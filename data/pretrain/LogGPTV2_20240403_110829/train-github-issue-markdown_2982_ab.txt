### 测试步骤及预期结果

#### Step 4.6: 分片表和单表的 `MINUS DISTINCT` 测试
**预期结果**: 查询结果正确。

1. **创建视图**
    ```sql
    CREATE VIEW select_view AS 
    SELECT o.user_id 
    FROM t_order o 
    WHERE o.order_id > 2500 
    MINUS DISTINCT 
    SELECT u.user_id 
    FROM t_user u 
    WHERE u.user_id < 29 
    ORDER BY user_id;
    ```

2. **查询视图**
    ```sql
    SELECT * FROM select_view;
    ```

3. **删除视图**
    ```sql
    DROP VIEW select_view;
    ```

#### Step 5.1: 相同表的 `UNION`, `INTERSECT`, `EXCEPT`, `MINUS` 组合优先级测试
**预期结果**: 查询结果正确。

1. **创建视图**
    ```sql
    CREATE VIEW select_view AS 
    (SELECT * FROM t_order WHERE order_id = 1500 
     UNION 
     SELECT * FROM t_order WHERE order_id = 1800) 
    INTERSECT 
    SELECT * FROM t_order WHERE status = 'finish' 
    ORDER BY order_id;
    ```

2. **查询视图**
    ```sql
    SELECT * FROM select_view;
    ```

3. **删除视图**
    ```sql
    DROP VIEW select_view;
    ```

4. **创建视图**
    ```sql
    CREATE VIEW select_view AS 
    SELECT * FROM t_order WHERE order_id = 1500 
    UNION 
    (SELECT * FROM t_order WHERE order_id = 1800 
     INTERSECT 
     SELECT * FROM t_order WHERE status = 'finish') 
    ORDER BY order_id;
    ```

5. **查询视图**
    ```sql
    SELECT * FROM select_view;
    ```

6. **删除视图**
    ```sql
    DROP VIEW select_view;
    ```

7. **创建视图**
    ```sql
    CREATE VIEW select_view AS 
    SELECT * FROM t_order WHERE order_id = 1500 
    UNION 
    SELECT * FROM t_order WHERE order_id = 1800 
    INTERSECT 
    SELECT * FROM t_order WHERE status = 'finish' 
    ORDER BY order_id;
    ```

8. **查询视图**
    ```sql
    SELECT * FROM select_view;
    ```

9. **删除视图**
    ```sql
    DROP VIEW select_view;
    ```

### 示例代码以重现问题

```sql
-- 删除表（如果存在）
DROP TABLE IF EXISTS t_order;

-- 创建表
CREATE TABLE t_order (
    order_id INT PRIMARY KEY,
    user_id INT NOT NULL,
    status VARCHAR(50) NOT NULL,
    merchant_id INT NOT NULL,
    remark VARCHAR(50),
    creation_date DATE
);

-- 插入数据
INSERT INTO t_order VALUES
(1000, 10, 'init', 1, 'test', '2017-07-08'),
(1001, 10, 'init', 2, 'test', '2017-07-08'),
(2000, 20, 'init', 3, 'test', '2017-08-08'),
(2001, 20, 'init', 4, 'test', '2017-08-08'),
(1100, 11, 'init', 5, 'test', '2017-08-08'),
(1101, 11, 'init', 6, 'test', '2017-08-08'),
(2100, 21, 'finish', 7, 'test', '2017-08-08'),
(2101, 21, 'finish', 8, 'test', '2017-08-08'),
(1200, 12, 'finish', 9, 'finish', '2017-08-08'),
(1201, 12, 'finish', 10, 'test22', '2017-08-18'),
(2200, 22, 'finish', 11, 'test', '2017-08-18'),
(2201, 22, 'finish', 12, 'test', '2017-08-18'),
(1300, 13, 'finish', 13, '', '2017-08-18'),
(1301, 13, 'finish', 14, 'test', '2017-08-18'),
(2300, 23, 'finish ', 15, 'test', '2017-08-18'),
(2301, 23, 'finish', 16, 'test', '2017-08-18'),
(1400, 14, 'init', 17, '', '2017-08-18'),
(1401, 14, 'init', 18, 'test', '2017-08-18'),
(2400, 24, 'init', 19, 'test', '2017-08-18'),
(2401, 24, 'init', 20, 'test', '2017-08-18'),
(1500, 15, 'init', 1, '', '2017-08-28'),
(1501, 15, 'init', 2, 'test', '2017-08-28'),
(2500, 25, 'init', 3, 'test', '2017-08-28'),
(2501, 25, 'init', 4, 'test', '2017-08-28'),
(1600, 16, 'init', 5, 'test', '2017-08-28'),
(1601, 16, 'init', 6, '', '2017-08-28'),
(2600, 26, 'init', 7, 'test', '2017-08-28'),
(2601, 26, 'init', 8, NULL, NULL),
(1700, 17, 'init', 9, 'test', '2017-08-28'),
(1701, 17, 'finish', 10, 'test', '2017-08-18'),
(2700, 27, 'finish', 11, 'test', '2017-08-18'),
(2701, 27, 'finish', 12, 'test', '2017-08-18'),
(1800, 18, 'finish', 13, 'test', '2017-08-18'),
(1801, 18, 'finish', 14, NULL, NULL),
(2800, 28, 'finish', 15, 'test', '2017-08-18'),
(2801, 28, 'finish', 16, 'test', '2017-08-18'),
(1900, 19, 'init', 17, 'test', '2017-08-18'),
(1901, 19, 'init', 18, 'test', '2017-08-18'),
(2900, 29, 'init', 19, 'test', '2017-08-18'),
(2901, 29, 'init', 20, 'test', '2017-08-18'),
(1902, 19, 'init', 17, 'test11', '2017-08-18'),
(1903, 19, 'init', 18, 'test12', '2017-08-18'),
(2902, 29, 'init', 19, 'test', '2017-08-18'),
(2903, 29, 'init', 20, 'test', '2017-08-18');
```

### 数据库配置

```yaml
schemaName: test_db

dataSources:
  ds_0:
    connectionTimeoutMilliseconds: 30000
    idleTimeoutMilliseconds: 60000
    maxLifetimeMilliseconds: 1800000
    maxPoolSize: 260
    minPoolSize: 10
    password: Test@123
    url: jdbc:opengauss://90.90.44.171:14000/test_db?batchMode=on
    username: tpccuser
  ds_1:
    connectionTimeoutMilliseconds: 30000
    idleTimeoutMilliseconds: 60000
    maxLifetimeMilliseconds: 1800000
    maxPoolSize: 260
    minPoolSize: 10
    password: Test@123
    url: jdbc:opengauss://90.90.44.171:15000/test_db?batchMode=on
    username: tpccuser

rules:
- !SHARDING
  tables:
    t_user:
      actualDataNodes: ds_0.t_user
    t_product:
      actualDataNodes: ds_0.t_product
    t_merchant:
      actualDataNodes: ds_1.t_merchant
    t_product_detail:
      actualDataNodes: ds_1.t_product_detail
    t_order:
      actualDataNodes: ds_${0..1}.t_order
      databaseStrategy:
        standard:
          shardingColumn: user_id
          shardingAlgorithmName: database_inline
    t_order_item:
      actualDataNodes: ds_${0..1}.t_order_item
      databaseStrategy:
        standard:
          shardingColumn: user_id
          shardingAlgorithmName: database_inline
    t_order_item1:
      actualDataNodes: ds_${0..1}.t_order_item1
      databaseStrategy:
        standard:
          shardingColumn: user_id
          shardingAlgorithmName: database_inline
    t_new_order:
      actualDataNodes: ds_${0..1}.t_new_order_${0..1}
      databaseStrategy:
        standard:
          shardingAlgorithmName: database_inline
          shardingColumn: user_id
      tableStrategy:
        standard:
          shardingColumn: order_id
          shardingAlgorithmName: table_inline
  bindingTables:
    - t_order, t_order_item
  broadcastTables:
    - t_product_category
    - t_country
  shardingAlgorithms:
    database_inline:
      type: INLINE
      props:
        algorithm-expression: ds_${user_id % 2}
        allow-range-query-with-inline-sharding: true
    table_inline:
      type: INLINE
      props:
        algorithm-expression: t_new_order_${order_id % 2}
        allow-range-query-with-inline-sharding: true

mode:
  type: Cluster
  repository:
    type: ZooKeeper
    props:
      namespace: governance_ds
      server-lists: 7.212.123.28:2181
      retryIntervalMilliseconds: 500
      timeToLiveSeconds: 60
      maxRetries: 3
      operationTimeoutMilliseconds: 500

authority:
  users:
    - user: root@%
      password: root
    - user: sharding
      password: sharding
  privilege:
    type: ALL_PERMITTED

rules:
- !TRANSACTION
  defaultType: XA
  providerType: Atomikos

props:
  sql-show: true
```