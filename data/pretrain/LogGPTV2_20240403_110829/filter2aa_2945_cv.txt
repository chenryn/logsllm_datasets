### Platform App: Designing a User-Interface for Multiple Device Form Factors

The "Platform app" chapter illustrates how to design a user interface (UI) that can adapt to various device form factors, orientations, and views. The sample app developed in this chapter is a simple one designed for displaying and editing customer details.

In this chapter, you will learn how to display data in the UI and explore the features in Windows 10 that enable data search within an app. You will also gain insights into structuring a Universal Windows Platform (UWP) app. This chapter covers several key topics, including:

- Using data binding to connect the UI to the data it displays.
- Creating a ViewModel to separate the user interface logic from the data model and business logic.
- Integrating a UWP app with Cortana to enable voice-activated searches.

### Implementing the Model窶天iew窶天iewModel Pattern

A well-structured graphical application separates the design of the user interface from the data and the business logic. This separation helps to remove dependencies between components, allowing different presentations of the data without altering the business logic or the underlying data model. It also enables different elements to be designed and implemented by specialists, such as graphic artists, database experts, and C# developers.

One of the most popular approaches to achieve this separation is the Model窶天iew窶天iewModel (MVVM) design pattern. In MVVM:

- **Model**: Provides the data used by the app.
- **View**: Represents the way the data is displayed in the UI.
- **ViewModel**: Contains the logic that connects the Model and View, handling user input and converting it into commands that perform business operations on the Model. It also formats data from the Model for the View.

The following diagram illustrates the simplified relationship between the elements of the MVVM pattern. Note that an app might provide multiple views of the same data. For example, a UWP app might implement different view states with varying screen layouts. The ViewModel ensures that the same data from the Model can be displayed and manipulated by multiple views. In a UWP app, the View can use data binding to connect to the data presented by the ViewModel and request updates to the Model.

### Displaying Data Using Data Binding

Before implementing a ViewModel for the Customers app, it's essential to understand data binding and how to use it to display data in the UI. Data binding allows you to link a property of a control to a property of an object. If the value of the object's property changes, the linked control's property also changes. Data binding can be bidirectional, meaning changes in the control are propagated back to the object.

#### Exercise: Use Data Binding to Display Customer Information

1. **Start Visual Studio 2017** if it is not already running.
2. **Open the Customers solution** located in the `\Microsoft Press\VCSBS\Chapter 26\Data Binding` folder in your Documents folder. This is a version of the Customers app from Chapter 25, with a slightly modified UI layout.
3. **Add a new class** named `Customer.cs` to the Customers project.
4. **Define the Customer class** with the following properties:
   ```csharp
   public class Customer
   {
       public int _customerID;
       public int CustomerID
       {
           get => this._customerID;
           set { this._customerID = value; }
       }

       public string _title;
       public string Title
       {
           get => this._title;
           set { this._title = value; }
       }

       public string _firstName;
       public string FirstName
       {
           get => this._firstName;
           set { this._firstName = value; }
       }

       public string _lastName;
       public string LastName
       {
           get => this._lastName;
           set { this._lastName = value; }
       }

       public string _emailAddress;
       public string EmailAddress
       {
           get => this._emailAddress;
           set { this._emailAddress = value; }
       }

       public string _phone;
       public string Phone
       {
           get => this._phone;
           set { this._phone = value; }
       }
   }
   ```
5. **Modify the XAML markup** for the `TextBox` controls in the `MainPage.xaml` file to use data binding. For example:
   ```xaml
   <TextBox Text="{Binding CustomerID}" />
   ```
6. **Set the DataContext** in the `MainPage.xaml.cs` file to bind the controls to a `Customer` object:
   ```csharp
   public MainPage()
   {
       this.InitializeComponent();
       Customer customer = new Customer
       {
           CustomerID = 1,
           Title = "Mr",
           FirstName = "John",
           LastName = "Sharp",
           EmailAddress = "PI:EMAIL",
           Phone = "111-1111"
       };
       this.DataContext = customer;
   }
   ```
7. **Run the app** and verify that the form displays the customer details correctly in both full-screen and narrow views.

### Modifying Data Using Data Binding

By default, data binding is one-way. To enable two-way data binding, you need to modify the `Mode` parameter in the XAML markup for the controls. For example:
```xaml
<TextBox Text="{Binding CustomerID, Mode=TwoWay}" />
```

#### Exercise: Implement Two-Way Data Binding

1. **Modify the XAML markup** for the `TextBox` controls to use two-way data binding.
2. **Implement the `INotifyPropertyChanged` interface** in the `Customer` class to notify the UI of property changes:
   ```csharp
   using System.ComponentModel;

   public class Customer : INotifyPropertyChanged
   {
       public int _customerID;
       public int CustomerID
       {
           get => this._customerID;
           set
           {
               this._customerID = value;
               OnPropertyChanged(nameof(CustomerID));
           }
       }

       // Define other properties similarly

       public event PropertyChangedEventHandler PropertyChanged;

       protected virtual void OnPropertyChanged(string propertyName)
       {
           PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
       }
   }
   ```

3. **Run the app** and verify that changes made in the UI are reflected in the `Customer` object and vice versa.

By following these steps, you will have a well-structured UWP app that uses the MVVM pattern and data binding to display and modify data effectively.