Platform app,” demonstrates how to design a user interface (UI) that can
adapt to the different device form factors, orientations, and views that a
customer running your app might use. The sample app developed in that
chapter is a simple one designed for displaying and editing details about
customers.
In this chapter, you will see how to display data in the UI and learn about
the features in Windows 10 with which you can search for data in an app. In
performing these tasks, you will also learn about the way in which you can
structure a UWP app. This chapter covers a lot of ground. In particular, you
will look at how to use data binding to connect the UI to the data that it
displays and how to create a ViewModel to separate the user interface logic
from the data model and business logic for an app. You will also see how to
integrate a UWP app with Cortana to enable a user to perform voice-activated
Download from finelybook PI:EMAIL
951
searches.
Implementing the Model–View–ViewModel pattern
A well-structured graphical app separates the design of the user interface
from the data that the application uses and the business logic that comprises
the functionality of the app. This separation helps to remove the
dependencies between the various components, enabling different
presentations of the data without needing to change the business logic or the
underlying data model. This approach also clears the way for different
elements to be designed and implemented by individuals who have the
appropriate specialist skills. For example, a graphic artist can focus attention
on designing an appealing and intuitive UI, a database specialist can
concentrate on implementing an optimized set of data structures for storing
and accessing the data, and a C# developer can direct her efforts toward
implementing the business logic for the app. This is a common goal that has
been the aim of many development approaches, not just for UWP apps, and
over the past few years many techniques have been devised to help structure
an app in this way.
Arguably, the most popular approach is to follow the Model–View–
ViewModel (MVVM) design pattern. In this design pattern, the model
provides the data used by the app, and the view represents the way in which
the data is displayed in the UI. The ViewModel contains the logic that
connects the two, taking the user input and converting it into commands that
perform business operations on the model, and also taking the data from the
model and formatting it in the manner expected by the view. The following
diagram shows a simplified relationship between the elements of the MVVM
pattern. Note that an app might provide multiple views of the same data. In a
UWP app, for example, you might implement different view states, which
can present information by using different screen layouts. One job of the
ViewModel is to ensure that the data from the same model can be displayed
and manipulated by many different views. In a UWP app, the view can utilize
data binding to connect to the data presented by the ViewModel.
Additionally, the view can request that the ViewModel update data in the
model or perform business tasks by invoking commands implemented by the
ViewModel.
Download from finelybook PI:EMAIL
952
Displaying data by using data binding
Before you get started implementing a ViewModel for the Customers app, it
helps to understand a little more about data binding and how you can apply
this technique to display data in a UI. Using data binding, you can link a
property of a control to a property of an object; if the value of the specified
property of the object changes, the property in the control that is linked to the
object also changes. Also, data binding can be bidirectional: if the value of a
property in a control that uses data binding changes, the modification is
propagated to the object to which the control is linked. The following
exercise provides a quick introduction to how data binding is used to display
data. It is based on the Customers app from Chapter 25.
Use data binding to display Customer information
1. Start Visual Studio 2017 if it is not already running.
2. Open the Customers solution, which is located in the \Microsoft
Press\VCSBS\Chapter 26\Data Binding folder in your Documents
folder. This is a version of the Customers app that was developed in
Chapter 25, but the layout of the UI has been modified slightly; the
controls are displayed on a blue background, which makes them stand
out more easily.
Note The blue background was created by using a Rectangle
control that spans the same rows and columns as the TextBlock and
Download from finelybook PI:EMAIL
953
TextBox controls that display the headings and data. The rectangle
is filled by using a LinearGradientBrush that gradually changes
the color of the rectangle from a medium blue at the top to a very
dark blue at the bottom. The XAML markup for the Rectangle
control that is displayed in customersTabularView Grid control
views looks like this (the XAML markup for the
customersColumnarView Grid control includes a similar Rectangle
control, spanning the rows and columns used by that layout):
Click here to view code image
3. In Solution Explorer, right-click the Customers project, point to Add,
and then click Class.
4. In the Add New Items - Customers dialog box, ensure that the Class
template is selected. In the Name box, type Customer.cs, and then click
Add.
You will use this class to implement the Customer data type and then
implement data binding to display the details of Customer objects in the
UI.
5. In the Code and Text Editor window displaying the Customer.cs file,
make the Customer class public and add the following private fields and
properties shown in bold:
Click here to view code image
public class Customer
{
    public int _customerID;
    public int CustomerID
    {
Download from finelybook PI:EMAIL
954
        get => this._customerID;
        set
        {
            this._customerID = value;
        }
    }
    public string _title;
    public string Title
    {
        get => this._title;
        set
        {
            this._title = value;
        }
    }
    public string _firstName;
    public string FirstName
    {
        get => this._firstName;
        set
        {
            this._firstName = value;
        }
    }
    public string _lastName;
    public string LastName
    {
        get => this._lastName;
        set
        {
            this._lastName = value;
        }
    }
    public string _emailAddress;
    public string EmailAddress
    {
        get => this._emailAddress;
        set
        {
            this._emailAddress = value;
        }
    }
    public string _phone;
    public string Phone
    {
        get => this._phone;
Download from finelybook PI:EMAIL
955
        set
        {
            this._phone = value;
        }
    }
}
You might be wondering why the property setters are not implemented
as expression-bodied members, given that all they do is set the value in a
private field. However, you will add additional code to these properties
in a later exercise.
6. In Solution Explorer, in the Customers project, double-click the
MainPage.xaml file to display the user interface for the application in
the Design View window.
7. In the XAML pane, locate the markup for the id TextBox control.
Modify the XAML markup that sets the Text property for this control as
shown here in bold:
Click here to view code image
The syntax Text=”{Binding Path}” specifies that the value of the Text
property will be provided by the value of the Path expression at runtime.
In this case, Path is set to CustomerID, so the value held in the
CustomerID expression will be displayed by this control. However, you
need to provide a bit more information to indicate that CustomerID is
actually a property of a Customer object. To do this, you set the
DataContext property of the control, which you will do shortly.
8. Add the following binding expressions for each of the other text controls
on the form. Apply data binding to the TextBox controls in the
customersTabularView and customersColumnarView Grid controls, as
shown in bold in the following code. (The ComboBox controls require
slightly different handling, which you will address in the section “Using
data binding with a ComboBox control” later in this chapter.)
Click here to view code image
    ...
    ...
    ...
    ...
    ...
    ...
    ...
Notice how the same binding expression can be used with more than one
control. For example, the expression {Binding CustomerID} is
referenced by the id and cId TextBox controls, which causes both
controls to display the same data.
9. In Solution Explorer, expand the MainPage.xaml file, and then double-
click the MainPage.xaml.cs file to display the code for the
MainPage.xaml form in the Code and Text Editor window.  Add the
statement shown below in bold to the MainPage constructor.
Click here to view code image
public MainPage()
{
    this.InitializeComponent();
    Customer customer = new Customer
    {
        CustomerID = 1,
        Title = "Mr",
        FirstName = "John",
Download from finelybook PI:EMAIL
957
        LastName = "Sharp",
        EmailAddress = "PI:EMAIL",
        Phone = "111-1111"
    };
}
This code creates a new instance of the Customer class and populates it
with some sample data.
10. After the code that creates the new Customer object, add the following
statement shown in bold:
Click here to view code image
Customer customer = new Customer
{
    ...
};
this.DataContext = customer;
This statement specifies the object to which controls on the MainPage
form should bind. In each of the controls, the XAML markup
Text=”{Binding Path}” will be resolved against this object. For
example, the id TextBox and cId TextBox controls both specify
Text=”{Binding CustomerID}”, so they will display the value found in
the CustomerID property of the Customer object to which the form is
bound.
Note In this example, you have set the DataContext property of the
form, so the same data binding automatically applies to all the
controls on the form. You can also set the DataContext property
for individual controls if you need to bind specific controls to
different objects.
11. On the Debug menu, click Start Debugging to build and run the app.
Verify that the form occupies the full screen and displays the details for
the customer John Sharp, as shown in the following image:
Download from finelybook PI:EMAIL
958
12. Resize the app window to display it in the narrow view. Verify that it
displays the same data, as illustrated here:
Download from finelybook PI:EMAIL
959
The controls displayed in the narrow view are bound to the same data as
the controls displayed in the full-screen view.
13. In the narrow view, change the email address to
john@treyresearch.com.
14. Expand the app window to switch to the wide view.
Notice that the email address displayed in this view has not changed.
15. Return to Visual Studio and stop debugging.
Download from finelybook PI:EMAIL
960
16. In Visual Studio, display the code for the Customer class in the Code
and Text Editor window and set a breakpoint in the set property accessor
for the EmailAddress property.
17. On the Debug menu, click Start Debugging to build and run the
application again.
18. When the debugger reaches the breakpoint for the first time, press F5 to
continue running the app.
19. When the UI for the Customers app appears, resize the application
window to display the narrow view and change the email address to
john@treyresearch.com.
20. Expand the app window back to the wide view.
Notice that the debugger does not reach the breakpoint in the set
accessor for the EmailAddress property; the updated value is not written
back to the Customer object when the email TextBox loses the focus.
21. Return to Visual Studio and stop debugging.
22. Remove the breakpoint in the set accessor of the EmailAddress property
in the Customer class.
Modifying data by using data binding
In the previous exercise, you saw how easily data in an object could be
displayed by using data binding. However, data binding is a one-way
operation by default, and any changes you make to the displayed data are not
copied back to the data source. In the exercise, you saw this when you
changed the email address displayed in the narrow view; when you switched
back to the wide view, the data had not changed. You can implement
bidirectional data binding by modifying the Mode parameter of the Binding
specification in the XAML markup for a control. The Mode parameter
indicates whether data binding is one-way or two-way. This is what you will
do next.
Implement TwoWay data binding to modify customer information
1. Display the MainPage.xaml file in the Design View window and modify
Download from finelybook PI:EMAIL
961
the XAML markup for each of the TextBox controls as shown in bold in
the following code:
Click here to view code image
    ...
    ...
    ...
    ...
    ...
    ...
    ...
    ...
The Mode parameter to the Binding specification indicates whether data
binding is one-way (the default) or two-way. Setting Mode to TwoWay
causes any changes made by the user to be passed back to the object to
which a control is bound.
2. On the Debug menu, click Start Debugging to build and run the app
again.
3. With the app in the wide view, change the email address to
Download from finelybook PI:EMAIL
962
PI:EMAIL, and then resize the window to display the app
in the narrow view.
Notice that despite the change in the data binding to TwoWay mode, the
email address displayed in the narrow view has not been updated; it is
still john@contoso.com.
4. Return to Visual Studio and stop debugging.
Clearly, something is not working correctly! The problem now is not that
the data has not been updated but rather that the view is not displaying the
latest version of the data. (If you reinstate the breakpoint in the set accessor
for the EmailAddress property of the Customer class and run the app in the
debugger, you will see the debugger reach the breakpoint whenever you
change the value of the email address and move the focus away from the
TextBox control.) Despite appearances, the data-binding process is not magic,
and a data binding does not know when the data to which it is bound has been
changed. The object needs to inform the data binding of any modifications by
sending a PropertyChanged event to the UI. This event is part of an interface
named INotifyPropertyChanged, and all objects that support two-way data
binding should implement this interface. You will implement this interface in
the next exercise.
Implement the INotifyPropertyChanged interface in the Customer class
1. In Visual Studio, display the Customer.cs file in the Code and Text
Editor window.
2. Add the following using directive to the list at the top of the file:
using System.ComponentModel;
The INotifyPropertyChanged interface is defined in this namespace.
3. Modify the definition of the Customer class to specify that it implements
the INotifyPropertyChanged interface, as shown here in bold:
Click here to view code image
public class Customer : INotifyPropertyChanged
{
    ...
}
Download from finelybook PI:EMAIL
963
4. After the Phone property at the end of the Customer class, add the
PropertyChanged event shown in bold in the following code:
Click here to view code image
public class Customer : INotifyPropertyChanged
{
    ...
    public string _phone;
    public string Phone {
        get => this._phone;
        set { this._phone = value; }
    }
    public event PropertyChangedEventHandler PropertyChanged;
}
This event is the only item that the INotifyPropertyChanged interface
defines. All objects that implement this interface must provide this
event, and they should raise this event whenever they want to notify the
outside world of a change to a property value.
5. Add the OnPropertyChanged method shown below in bold to the
Customer class, after the PropertyChanged event:
Click here to view code image
class Customer : INotifyPropertyChanged
{
    ...
    public event PropertyChangedEventHandler PropertyChanged;
    protected virtual void OnPropertyChanged(string