computation. This simpliﬁcation is sufﬁcient for our purposes of
expressing the fundamental constraints necessary to eliminate
timing leaks via memory management. Naturally, a realistic
implementation would need to soundly relate the operational
steps with the wall-clock, but that is outside of the scope of
the current work.
In order to secure the behavior of the garbage collec-
tor at runtime, the language contains a notion of the run-
time program counter level. The program counter is ma-
nipulated via two security-relevant constructs. Command
at (cid:2) with bound e do c raises the program counter level,
while command restore (cid:2) when n lowers it. Note that restore
command never appears in the program source, but is explicitly
inserted in the operational semantics to restore the level of
the program counter level after an at (cid:2) with bound e do c
command [23].
Another aspect of at and restore commands is that they
implement lightweight predictive mitigation [45, 4, 44] of
direct timing channels, i.e., channels that have control-ﬂow
representation, such as secret conditionals. An execution of
statement at (cid:2) with bound n do c is padded to take exactly n
steps. The execution is blocked if c takes more than n steps.
This particular design aspect provides clear containment of
direct timing channels, which in its turn allows isolated study
of the leaks via memory management.
A. Semantic enivronments
Our formal semantics partitions the program memory into
memory environment m, which models variables that are
typically allocated on stack, and the heap environment h.
a) Values, variables, and locations: A value in the
language is either an integer or a location in the heap, including
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:19:35 UTC from IEEE Xplore.  Restrictions apply. 
20
15
10
5
s
m
n
i
e
m
T
i
5
4
3
2
1
s
m
n
i
e
m
T
i
30
25
15
10
20
Bits 0 through 31
5
0
30
25
15
10
20
Bits 0 through 31
(a) Running leaky program with
a blue: serial (red: parallel) col-
lection strategy on secret
input
5342121
(b) Running the GC strategy of V8
on secret input 5342121
s
m
n
i
e
m
T
i
15
10
5
5
0
0
5
10
15
20
25
Experiment number
(c) Measuring ping delay between
computers over a network connec-
tion.
Fig. 5: Experimental
(00000000 01010001 10000011 10101001)2
results for network ping delay and running leaky programs on sample input 5342121 =
e ::= n | null | x | e op e
c ::= skip | x := e | c; c | if e then c else c | while e do c
| x := new(cid:2)(e, e) | x := y[e] | x[e] := e
| x := time() | at (cid:2) with bound e do c
| restore (cid:2) when n
Fig. 6: Syntax of the language. The boxed command is not
part of the surface syntax.
null. For our purposes it is sufﬁcient to leave heap locations
abstract, and our model simply assumes a set Loc of abstract
heap locations that may be distinguished from each other. We
further assume that the set of locations is disjoint from the set
of integer values. Let v range over values Val, and denote the
set of all variables as Var.
b) Memory and heap environments: Memory environment
is a partial function m : Var → Val. For convenience, we also
use the set notation, and write (x, v) ∈ m when m(x) = v.
For heap environment, an important characteristic of our
model is that allocations on the heap are tagged with security
levels. This is necessary for constraining collecting behavior,
as explained later in this section.
We deﬁne a heap as a partial function h : Loc → (N →
Val) × L from heap locations to pairs consisting of lookup
functions and security levels. A lookup function is a partial
function from the integer offsets to values stored in the heap.
We write (loc, μ, (cid:2)) ∈ h when h(loc) = (μ, (cid:2)), where loc is
the abstract location, μ is the lookup function, and (cid:2) is the
security level. We refer to (cid:2) as the heap level of loc. When
heap h can be split into two disjoint heaps h1 and h2, we write
h = h1 (cid:6) h2.
c) Maximum heap size: Our model considers both un-
bounded and bounded heaps. The semantics is parametrized
with the function that returns the maximum size of the heap
mx : L → N∪{∞} that returns the maximum amount of heap
memory available for allocation at that security level. Unless
explicitly speciﬁed, the formal results apply to both bounded
and unbounded heaps.
When the current size of the heap h at a particular level (cid:2)
(cid:2)
needs to be compared against the maximum available space,
we compute the current size using function size(cid:2)(h) (cid:2)
(loc,μ,(cid:2))∈h |dom(μ)| .
B. Semantics w/o collection
We start by introducing the semantics of the language w/o
garbage collection. Section V presents the semantics of garbage
collection.
Semantic conﬁgurations have the form (cid:9)c, pc, m, h, t(cid:10),
where c is the current program, pc is the runtime program
counter level, m and h are the memory and the heap respec-
tively, and t is the time counter. Terminal conﬁgurations are
marked by the dedicated stop command. The semantics is
a combination of a standard big-step evaluation relation for
expressions, and a small-step transition relation for commands.
1) Expressions: Figure 7 presents the evaluation relation
(cid:9)x, m(cid:10) ⇓ v for expression semantics. Note how this relation
only includes standard memory; all heap-related operations are
modeled as commands.
2) Commands: Figures 8 and 9 present the semantics of
commands in the absence of garbage collection. None of the
standard commands touch the heap or the program counter level;
moreover they all take one computation step. This semantics is
given by rule (S-LIFT-STANDARD) in Figure 9 together with
the standard transition relation (cid:9)c, m(cid:10) (cid:2) (cid:9)c
(cid:3)(cid:10), deﬁned in
Figure 8.
, m
(cid:3)
The remaining of the rules in Figure 9 present the transition
relation for the and non-standard commands.
Rule (S-TIME) updates variable x with the current value of
the time counter.
Rule (S-NEW) models the allocation in partition (cid:2). The
amount of allocated memory is computed by evaluating
expression e. The command extends the heap with the new
lookup function μ, and updates the variable in the memory
with the value of the new location. The lookup function μ
uses the default value computed by evaluating expression einit.
The rule has two notable constrains. First, the location must
be fresh, expressed by the premise loc /∈ dom(h). Second,
there must be enough available space in the heap at partition
(cid:2) for the allocation, which is expressed by the premise
698
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:19:35 UTC from IEEE Xplore.  Restrictions apply. 
(cid:9)n, m(cid:10) ⇓ n
(cid:9)null, m(cid:10) ⇓ null
m(x) = v
(cid:9)x, m(cid:10) ⇓ v
(cid:9)ei, m(cid:10) ⇓ vi
i = 1, 2
(cid:9)e1 op e2, m(cid:10) ⇓ v
v1 op v2 = v
Fig. 7: Semantics of expressions
(cid:9)e, m(cid:10) ⇓ v
(cid:9)skip, m(cid:10) (cid:2) (cid:9)stop, m(cid:10)
(cid:9)c1, m(cid:10) (cid:2) (cid:9)c
(cid:3)(cid:10)
(cid:3)
1, m
(cid:9)c1; c2, m(cid:10) (cid:2) (cid:9)c
(cid:9)e, m(cid:10) ⇓ n
1 (cid:13)= stop
(cid:3)
c
(cid:9)x := e, m(cid:10) (cid:2) (cid:9)stop, m[x (cid:12)→ v](cid:10)
(cid:9)c1, m(cid:10) (cid:2) (cid:9)stop, m
(cid:3)(cid:10)
(cid:9)c1; c2, m(cid:10) (cid:2) (cid:9)c2, m
(cid:3)(cid:10)
n = 0 ⇒ i = 2
(cid:3)(cid:10)
(cid:3)
1; c2, m
n (cid:13)= 0 ⇒ i = 1
(cid:9)if e then c1 else c2, m(cid:10) (cid:2) (cid:9)ci, m(cid:10)
(cid:9)e, m(cid:10) ⇓ n
n (cid:13)= 0
(cid:9)while e do c, m(cid:10) (cid:2) (cid:9)c; while e do c, m(cid:10)
(cid:9)e, m(cid:10) ⇓ n
n = 0
(cid:9)while e do c, m(cid:10) (cid:2) (cid:9)stop, m(cid:10)
Fig. 8: Semantics of standard commands
(cid:3)) ≤ mx((cid:2)), where h
size(cid:2)(h
the allocation.
(cid:3) refers to the heap updated after
Rule (S-SET) updates the array at a speciﬁed index. This
is expressed as in-place update of the lookup function. Rule
(S-GET) retrieves the value stored at a particular index in an
array; the result is stored in the memory.
Rule (S-AT) updates the program counter label. Additionally,
this rule computes the time n the at command is expected to
consume. This rule inserts a restore command that restores the
program counter, and the expected time t + n by which the
restore should be reached.
Rule (S-RESTORE-PROGRESS) restores the program counter
label and continues with the execution of the body of the
restore command only if the current time matches the expected
time speciﬁed in the restore command. Rule (S-RESTORE-
WAIT) skips until the current time matches the argument of the
restore command. Note that if the body of at happens to take
more time than expected, the semantics blocks the execution.
V. SEMANTICS FOR SECURE GARBAGE COLLECTION
The previous section deﬁned the program semantics w/o
garbage collection transitions, i.e., the size of the heap would
monotonically increase throughout the execution. This section
deﬁnes the collection semantics that speciﬁes how garbage
collection is allowed to affect the heap.
The main insight is that the runtime program counter label
constrains which parts of the heap can be collected and when.
When the runtime program counter is low, only low parts of
the heap can be collected; when the runtime program counter
is high, only high parts of the heap can be collected. While, on
ﬁrst sight, this isolation-like constrain may appear unnecessarily
strong in an information-ﬂow setting, it is necessary, because
the garbage collection represents a bi-directional information
ﬂow channel. We explain this using two simple examples
inspired by our experiments from Section III.
A. Motivating security restrictions on GC
This section presents two examples that motivate our
restrictions on garbage collection semantics. Each of the
examples demonstrates the danger of collecting parts of the
memory that do not match the current program counter level.
Note that while the examples are written in the style that
follows our typing discipline of Section VI, the typing is not
required here.
1) Implicit ﬂows when collecting L in H: Consider program
below, where we assume that N and M are constants, and v
is picked sufﬁciently pessimistically to bound the execution of
the at command.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
// new array of size N with
// default element value 0
y := new L (N , 0);
y := null ;
// the y - array can now be reclaimed
at H with bound v do {
if h > 0 {
// new array of size M that
// requires GC
x := new H (M ,0)
} else {
skip
}
}
t1 := time ();
// GC time depends on
// if y - array has been
// collected earlier
y
t2 := time ();
low := t2 - t1
:= new L (N ,0);
Note how the high conditional is guarded by the at command
that ensures that the execution of the conditional takes v steps.
This means that the value of t1 does not depend on which
branch of the conditional is taken.
However, if semantics of garbage collection allows low parts
to be collected inside at, say before executing the allocation
on Line 10, then t2 − t1 is likely to be small. This motivates
that garbage collection should not collect low allocations when
the program counter level is high.
2) Implicit ﬂows when collecting H in L: This example
shows that collecting high allocations when the program counter
is low is also dangerous. Suppose we are given constants M, N,
and v as described earlier, and consider program below.
1
2
3
4
// new array of size M with
// default element value 0
x := new H (M , 0);
at H with bound v do {
699
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:19:35 UTC from IEEE Xplore.  Restrictions apply. 
S-LIFT-STANDARD
(cid:9)c, pc, m, h, t(cid:10) mx
(cid:9)c, m(cid:10) (cid:2) (cid:9)c
(cid:3) (cid:9)c
(cid:3)
(cid:3)
(cid:3)(cid:10)
, m
, pc, m
(cid:3)
, h, t + 1(cid:10)
S-TIME