not_good = true;
}
return not_good;
}
程序清单8.7使用了上面的两个函数为一个进行算术运算的函数提供整
数，该函数计算特定范围内所有整数的平方和。程序限制了范围的上限是
10000000，下限是-10000000。
程序清单8.7 checking.c程序
// checking.c -- 输入验证
#include 
#include 
531
// 验证输入是一个整数
long get_long(void);
// 验证范围的上下限是否有效
bool bad_limits(long begin, long end,
long low, long high);
// 计算a～b之间的整数平方和
double sum_squares(long a, long b);
int main(void)
{
const long MIN = -10000000L;  // 范围的下限
const long MAX = +10000000L;  // 范围的上限
long start;            // 用户指定的范围最小值
long stop;             // 用户指定的范围最大值
double answer;
printf("This program computes the sum of the squares of "
"integers in a range.\nThe lower bound should not "
"be less than -10000000 and\nthe upper bound "
"should not be more than +10000000.\nEnter the "
"limits (enter 0 for both limits to quit):\n"
532
"lower limit: ");
start = get_long();
printf("upper limit: ");
stop = get_long();
while (start != 0 || stop != 0)
{
if (bad_limits(start, stop, MIN, MAX))
printf("Please try again.\n");
else
{
answer = sum_squares(start, stop);
printf("The sum of the squares of the integers ");
printf("from %ld to %ld is %g\n",
start, stop, answer);
}
printf("Enter the limits (enter 0 for both "
"limits to quit):\n");
printf("lower limit: ");
start = get_long();
533
printf("upper limit: ");
stop = get_long();
}
printf("Done.\n");
return 0;
}
long get_long(void)
{
long input;
char ch;
while (scanf("%ld", &input) != 1)
{
while ((ch = getchar()) != '\n')
putchar(ch);       // 处理错误输入
printf(" is not an integer.\nPlease enter an ");
printf("integer value, such as 25, -178, or 3: ");
}
return input;
}
534
double sum_squares(long a, long b)
{
double total = 0;
long i;
for (i = a; i  end)
{
printf("%ld isn't smaller than %ld.\n", begin, end);
not_good = true;
}
if (begin  high || end > high)
{
printf("Values must be %ld or less.\n", high);
not_good = true;
}
return not_good;
}
下面是该程序的输出示例：
This program computes the sum of the squares of integers 
in a range.
The lower bound should not be less than -10000000 and
the upper bound should not be more than +10000000.
Enter the limits (enter 0 for both limits to quit):
lower limit: low
low is not an integer.
Please enter an integer value, such as 25, -178, or 3: 3
536
upper limit: a big number
a big number is not an integer.
Please enter an integer value, such as 25, -178, or 3: 12
The sum of the squares of the integers from 3 to 12 is 
645
Enter the limits (enter 0 for both limits to quit):
lower limit: 80
upper limit: 10
80 isn't smaller than 10.
Please try again.
Enter the limits (enter 0 for both limits to quit):
lower limit: 0
upper limit: 0
Done.
8.6.1 分析程序
虽然checking.c程序的核心计算部分（sum_squares()函数）很短，但是输
入验证部分比以往程序示例要复杂。接下来分析其中的一些要素，先着重讨
论程序的整体结构。
程序遵循模块化的编程思想，使用独立函数（模块）来验证输入和管理
显示。程序越大，使用模块化编程就越重要。
537
main()函数管理程序流，为其他函数委派任务。它使用 
get_long()获取
值、while 
循环处理值、badlimits()函数检查值是否有效、sum_squres()函数
处理实际的计算：
start = get_long();
printf("upper limit: ");
stop = get_long();
while (start != 0 || stop != 0)
{
if (bad_limits(start, stop, MIN, MAX))
printf("Please try again.\n");
else
{
answer = sum_squares(start, stop);
printf("The sum of the squares of the integers ");
printf("from %ld to %ld is %g\n", start, stop, answer);
}
printf("Enter the limits (enter 0 for both "
"limits to quit):\n");
printf("lower limit: ");
start = get_long();
538
printf("upper limit: ");
stop = get_long();
}
8.6.2 输入流和数字
在编写处理错误输入的代码时（如程序清单8.7），应该很清楚C是如何
处理输入的。考虑下面的输入：
is 28 12.4
在我们眼中，这就像是一个由字符、整数和浮点数组成的字符串。但是
对 
C程序而言，这是一个字节流。第1个字节是字母i的字符编码，第2个字
节是字母s的字符编码，第3个字节是空格字符的字符编码，第4个字节是数
字2的字符编码，等等。所以，如果get_long()函数处理这一行输入，第1个
字符是非数字，那么整行输入都会被丢弃，包括其中的数字，因为这些数字
只是该输入行中的其他字符：
while ((ch = getchar()) != '\n')
putchar(ch); // 处理错误的输入
虽然输入流由字符组成，但是也可以设置scanf()函数把它们转换成数
值。例如，考虑下面的输入：
42
如果在scanf()函数中使用%c转换说明，它只会读取字符4并将其储存在
char类型的变量中。如果使用%s转换说明，它会读取字符4和字符2这两个字
符，并将其储存在字符数组中。如果使用%d转换说明，scanf()同样会读取
两个字符，但是随后会计算出它们对应的整数值：4×10+2，即42，然后将
表示该整数的二进制数储存在 int 类型的变量中。如果使用%f 转换说明，
539
scanf()也会读取两个字符，计算出它们对应的数值42.0，用内部的浮点表示
法表示该值，并将结果储存在float类型的变量中。
简而言之，输入由字符组成，但是scanf()可以把输入转换成整数值或浮
点数值。使用转换说明（如%d或%f）限制了可接受输入的字符类型，而
getchar()和使用%c的scanf()接受所有的字符。
540
8.7 菜单浏览
许多计算机程序都把菜单作为用户界面的一部分。菜单给用户提供方便
的同时，却给程序员带来了一些麻烦。我们看看其中涉及了哪些问题。
菜单给用户提供了一份响应程序的选项。假设有下面一个例子：
Enter the letter of your choice:
a. advice       b. bell
c. count        q. quit
理想状态是，用户输入程序所列选项之一，然后程序根据用户所选项完
成任务。作为一名程序员，自然希望这一过程能顺利进行。因此，第1个目
标是：当用户遵循指令时程序顺利运行；第2个目标是：当用户没有遵循指
令时，程序也能顺利运行。显而易见，要实现第 2 个目标难度较大，因为很
难预料用户在使用程序时的所有错误情况。
现在的应用程序通常使用图形界面，可以点击按钮、查看对话框、触摸
图标，而不是我们示例中的命令行模式。但是，两者的处理过程大致相同：
给用户提供选项、检查并执行用户的响应、保护程序不受误操作的影响。除
了界面不同，它们底层的程序结构也几乎相同。但是，使用图形界面更容易
通过限制选项控制输入。
8.7.1 任务
我们来更具体地分析一个菜单程序需要执行哪些任务。它要获取用户的
响应，根据响应选择要执行的动作。另外，程序应该提供返回菜单的选项。
C 的 switch 语句是根据选项决定行为的好工具，用户的每个选择都可以对应
一个特定的case标签。使用while语句可以实现重复访问菜单的功能。因此，
我们写出以下伪代码：
获取选项
541
当选项不是'q'时
转至相应的选项并执行
获取下一个选项
8.7.2 使执行更顺利
当你决定实现这个程序时，就要开始考虑如何让程序顺利运行（顺利运
行指的是，处理正确输入和错误输入时都能顺利运行）。例如，你能做的是
让“获取选项”部分的代码筛选掉不合适的响应，只把正确的响应传入
switch。这表明需要为输入过程提供一个只返回正确响应的函数。结合while
循环和switch语句，其程序结构如下：
#include 
char get_choice(void);
void count(void);
int main(void)
{
int choice;
while ((choice = get_choice()) != 'q')
{
switch (choice)
{
case 'a': printf("Buy low, sell high.\n");
542
break;
case 'b': putchar('\a'); /* ANSI */
break;
case 'c': count();
break;
default:  printf("Program error!\n");
break;
}
}
return 0;
}
定义get_choice()函数只能返回'a'、'b'、'c'和'q'。get_choice()的用法和
getchar()相同，两个函数都是获取一个值，并与终止值（该例中是'q'）作比
较。我们尽量简化实际的菜单选项，以便读者把注意力集中在程序结构上。
稍后再讨论 count()函数。default 语句可以方便调试。如果get_choice()函数没
能把返回值限制为菜单指定的几个选项值，default语句有助于发现问题所
在。
get_choice()函数
下面的伪代码是设计这个函数的一种方案：
显示选项
获取用户的响应
543