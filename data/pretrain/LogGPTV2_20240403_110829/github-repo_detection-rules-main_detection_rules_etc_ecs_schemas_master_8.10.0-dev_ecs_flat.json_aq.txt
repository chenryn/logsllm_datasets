{"process.elf.go_import_hash": {"dashed_name": "process-elf-go-import-hash", "description": "A hash of the Go language imports in an ELF file excluding standard library imports. An import hash can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.\nThe algorithm used to calculate the Go symbol hash and a reference implementation are available [here](https://github.com/elastic/toutoumomoma).", "example": "10bddcb4cee42080f76c88d9ff964491", "flat_name": "process.elf.go_import_hash", "ignore_above": 1024, "level": "extended", "name": "go_import_hash", "normalize": [], "original_fieldset": "elf", "short": "A hash of the Go language imports in an ELF file."}}
{"process.elf.go_imports": {"dashed_name": "process-elf-go-imports", "description": "List of imported Go language element names and types.", "flat_name": "process.elf.go_imports", "level": "extended", "name": "go_imports", "normalize": [], "original_fieldset": "elf", "short": "List of imported Go language element names and types.", "type": "flattened"}}
{"process.elf.go_imports_names_entropy": {"dashed_name": "process-elf-go-imports-names-entropy", "description": "Shannon entropy calculation from the list of Go imports.", "flat_name": "process.elf.go_imports_names_entropy", "format": "number", "level": "extended", "name": "go_imports_names_entropy", "normalize": [], "original_fieldset": "elf", "short": "Shannon entropy calculation from the list of Go imports.", "type": "long"}}
{"process.elf.go_imports_names_var_entropy": {"dashed_name": "process-elf-go-imports-names-var-entropy", "description": "Variance for Shannon entropy calculation from the list of Go imports.", "flat_name": "process.elf.go_imports_names_var_entropy", "format": "number", "level": "extended", "name": "go_imports_names_var_entropy", "normalize": [], "original_fieldset": "elf", "short": "Variance for Shannon entropy calculation from the list of Go imports.", "type": "long"}}
{"process.elf.go_stripped": {"dashed_name": "process-elf-go-stripped", "description": "Set to true if the file is a Go executable that has had its symbols stripped or obfuscated and false if an unobfuscated Go executable.", "flat_name": "process.elf.go_stripped", "level": "extended", "name": "go_stripped", "normalize": [], "original_fieldset": "elf", "short": "Whether the file is a stripped or obfuscated Go executable.", "type": "boolean"}}
{"process.elf.header.abi_version": {"dashed_name": "process-elf-header-abi-version", "description": "Version of the ELF Application Binary Interface (ABI).", "flat_name": "process.elf.header.abi_version", "ignore_above": 1024, "level": "extended", "name": "header.abi_version", "normalize": [], "original_fieldset": "elf", "short": "Version of the ELF Application Binary Interface (ABI)."}}
{"process.elf.header.class": {"dashed_name": "process-elf-header-class", "description": "Header class of the ELF file.", "flat_name": "process.elf.header.class", "ignore_above": 1024, "level": "extended", "name": "header.class", "normalize": [], "original_fieldset": "elf", "short": "Header class of the ELF file."}}
{"process.elf.header.data": {"dashed_name": "process-elf-header-data", "description": "Data table of the ELF header.", "flat_name": "process.elf.header.data", "ignore_above": 1024, "level": "extended", "name": "header.data", "normalize": [], "original_fieldset": "elf", "short": "Data table of the ELF header."}}
{"process.elf.header.entrypoint": {"dashed_name": "process-elf-header-entrypoint", "description": "Header entrypoint of the ELF file.", "flat_name": "process.elf.header.entrypoint", "format": "string", "level": "extended", "name": "header.entrypoint", "normalize": [], "original_fieldset": "elf", "short": "Header entrypoint of the ELF file.", "type": "long"}}
{"process.elf.header.object_version": {"dashed_name": "process-elf-header-object-version", "description": "\"0x1\" for original ELF files.", "flat_name": "process.elf.header.object_version", "ignore_above": 1024, "level": "extended", "name": "header.object_version", "normalize": [], "original_fieldset": "elf", "short": "\"0x1\" for original ELF files."}}
{"process.elf.header.os_abi": {"dashed_name": "process-elf-header-os-abi", "description": "Application Binary Interface (ABI) of the Linux OS.", "flat_name": "process.elf.header.os_abi", "ignore_above": 1024, "level": "extended", "name": "header.os_abi", "normalize": [], "original_fieldset": "elf", "short": "Application Binary Interface (ABI) of the Linux OS."}}
{"process.elf.header.type": {"dashed_name": "process-elf-header-type", "description": "Header type of the ELF file.", "flat_name": "process.elf.header.type", "ignore_above": 1024, "level": "extended", "name": "header.type", "normalize": [], "original_fieldset": "elf", "short": "Header type of the ELF file."}}
{"process.elf.header.version": {"dashed_name": "process-elf-header-version", "description": "Version of the ELF header.", "flat_name": "process.elf.header.version", "ignore_above": 1024, "level": "extended", "name": "header.version", "normalize": [], "original_fieldset": "elf", "short": "Version of the ELF header."}}
{"process.elf.import_hash": {"dashed_name": "process-elf-import-hash", "description": "A hash of the imports in an ELF file. An import hash can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.\nThis is an ELF implementation of the Windows PE imphash.", "example": "d41d8cd98f00b204e9800998ecf8427e", "flat_name": "process.elf.import_hash", "ignore_above": 1024, "level": "extended", "name": "import_hash", "normalize": [], "original_fieldset": "elf", "short": "A hash of the imports in an ELF file."}}
{"process.elf.imports": {"dashed_name": "process-elf-imports", "description": "List of imported element names and types.", "flat_name": "process.elf.imports", "level": "extended", "name": "imports", "normalize": ["array"], "original_fieldset": "elf", "short": "List of imported element names and types.", "type": "flattened"}}
{"process.elf.imports_names_entropy": {"dashed_name": "process-elf-imports-names-entropy", "description": "Shannon entropy calculation from the list of imported element names and types.", "flat_name": "process.elf.imports_names_entropy", "format": "number", "level": "extended", "name": "imports_names_entropy", "normalize": [], "original_fieldset": "elf", "short": "Shannon entropy calculation from the list of imported element names and types.", "type": "long"}}
{"process.elf.imports_names_var_entropy": {"dashed_name": "process-elf-imports-names-var-entropy", "description": "Variance for Shannon entropy calculation from the list of imported element names and types.", "flat_name": "process.elf.imports_names_var_entropy", "format": "number", "level": "extended", "name": "imports_names_var_entropy", "normalize": [], "original_fieldset": "elf", "short": "Variance for Shannon entropy calculation from the list of imported element names and types.", "type": "long"}}
{"process.elf.sections": {"dashed_name": "process-elf-sections", "description": "An array containing an object for each section of the ELF file.\nThe keys that should be present in these objects are defined by sub-fields underneath `elf.sections.*`.", "flat_name": "process.elf.sections", "level": "extended", "name": "sections", "normalize": ["array"], "original_fieldset": "elf", "short": "Section information of the ELF file.", "type": "nested"}}
{"process.elf.sections.chi2": {"dashed_name": "process-elf-sections-chi2", "description": "Chi-square probability distribution of the section.", "flat_name": "process.elf.sections.chi2", "format": "number", "level": "extended", "name": "sections.chi2", "normalize": [], "original_fieldset": "elf", "short": "Chi-square probability distribution of the section.", "type": "long"}}
{"process.elf.sections.entropy": {"dashed_name": "process-elf-sections-entropy", "description": "Shannon entropy calculation from the section.", "flat_name": "process.elf.sections.entropy", "format": "number", "level": "extended", "name": "sections.entropy", "normalize": [], "original_fieldset": "elf", "short": "Shannon entropy calculation from the section.", "type": "long"}}
{"process.elf.sections.flags": {"dashed_name": "process-elf-sections-flags", "description": "ELF Section List flags.", "flat_name": "process.elf.sections.flags", "ignore_above": 1024, "level": "extended", "name": "sections.flags", "normalize": [], "original_fieldset": "elf", "short": "ELF Section List flags."}}
{"process.elf.sections.name": {"dashed_name": "process-elf-sections-name", "description": "ELF Section List name.", "flat_name": "process.elf.sections.name", "ignore_above": 1024, "level": "extended", "name": "sections.name", "normalize": [], "original_fieldset": "elf", "short": "ELF Section List name."}}
{"process.elf.sections.physical_offset": {"dashed_name": "process-elf-sections-physical-offset", "description": "ELF Section List offset.", "flat_name": "process.elf.sections.physical_offset", "ignore_above": 1024, "level": "extended", "name": "sections.physical_offset", "normalize": [], "original_fieldset": "elf", "short": "ELF Section List offset."}}
{"process.elf.sections.physical_size": {"dashed_name": "process-elf-sections-physical-size", "description": "ELF Section List physical size.", "flat_name": "process.elf.sections.physical_size", "format": "bytes", "level": "extended", "name": "sections.physical_size", "normalize": [], "original_fieldset": "elf", "short": "ELF Section List physical size.", "type": "long"}}
{"process.elf.sections.type": {"dashed_name": "process-elf-sections-type", "description": "ELF Section List type.", "flat_name": "process.elf.sections.type", "ignore_above": 1024, "level": "extended", "name": "sections.type", "normalize": [], "original_fieldset": "elf", "short": "ELF Section List type."}}
{"process.elf.sections.var_entropy": {"dashed_name": "process-elf-sections-var-entropy", "description": "Variance for Shannon entropy calculation from the section.", "flat_name": "process.elf.sections.var_entropy", "format": "number", "level": "extended", "name": "sections.var_entropy", "normalize": [], "original_fieldset": "elf", "short": "Variance for Shannon entropy calculation from the section.", "type": "long"}}
{"process.elf.sections.virtual_address": {"dashed_name": "process-elf-sections-virtual-address", "description": "ELF Section List virtual address.", "flat_name": "process.elf.sections.virtual_address", "format": "string", "level": "extended", "name": "sections.virtual_address", "normalize": [], "original_fieldset": "elf", "short": "ELF Section List virtual address.", "type": "long"}}
{"process.elf.sections.virtual_size": {"dashed_name": "process-elf-sections-virtual-size", "description": "ELF Section List virtual size.", "flat_name": "process.elf.sections.virtual_size", "format": "string", "level": "extended", "name": "sections.virtual_size", "normalize": [], "original_fieldset": "elf", "short": "ELF Section List virtual size.", "type": "long"}}
{"process.elf.segments": {"dashed_name": "process-elf-segments", "description": "An array containing an object for each segment of the ELF file.\nThe keys that should be present in these objects are defined by sub-fields underneath `elf.segments.*`.", "flat_name": "process.elf.segments", "level": "extended", "name": "segments", "normalize": ["array"], "original_fieldset": "elf", "short": "ELF object segment list.", "type": "nested"}}
{"process.elf.segments.sections": {"dashed_name": "process-elf-segments-sections", "description": "ELF object segment sections.", "flat_name": "process.elf.segments.sections", "ignore_above": 1024, "level": "extended", "name": "segments.sections", "normalize": [], "original_fieldset": "elf", "short": "ELF object segment sections."}}
{"process.elf.segments.type": {"dashed_name": "process-elf-segments-type", "description": "ELF object segment type.", "flat_name": "process.elf.segments.type", "ignore_above": 1024, "level": "extended", "name": "segments.type", "normalize": [], "original_fieldset": "elf", "short": "ELF object segment type."}}
{"process.elf.shared_libraries": {"dashed_name": "process-elf-shared-libraries", "description": "List of shared libraries used by this ELF object.", "flat_name": "process.elf.shared_libraries", "ignore_above": 1024, "level": "extended", "name": "shared_libraries", "normalize": ["array"], "original_fieldset": "elf", "short": "List of shared libraries used by this ELF object."}}
{"process.elf.telfhash": {"dashed_name": "process-elf-telfhash", "description": "telfhash symbol hash for ELF file.", "flat_name": "process.elf.telfhash", "ignore_above": 1024, "level": "extended", "name": "telfhash", "normalize": [], "original_fieldset": "elf", "short": "telfhash hash for ELF file."}}
{"process.end": {"dashed_name": "process-end", "description": "The time the process ended.", "example": "2016-05-23T08:05:34.853Z", "flat_name": "process.end", "level": "extended", "name": "end", "normalize": [], "short": "The time the process ended.", "type": "date"}}
{"process.entity_id": {"dashed_name": "process-entity-id", "description": "Unique identifier for the process.\nThe implementation of this is specified by the data source, but some examples of what could be used here are a process-generated UUID, Sysmon Process GUIDs, or a hash of some uniquely identifying components of a process.\nConstructing a globally unique identifier is a common practice to mitigate PID reuse as well as to identify a specific process over time, across multiple monitored hosts.", "example": "c2c455d9f99375d", "flat_name": "process.entity_id", "ignore_above": 1024, "level": "extended", "name": "entity_id", "normalize": [], "short": "Unique identifier for the process."}}
{"process.entry_leader.args": {"dashed_name": "process-entry-leader-args", "description": "Array of process arguments, starting with the absolute path to the executable.\nMay be filtered to protect sensitive information.", "example": "[\"/usr/bin/ssh\", \"-l\", \"user\", \"10.0.0.16\"]", "flat_name": "process.entry_leader.args", "ignore_above": 1024, "level": "extended", "name": "args", "normalize": ["array"], "original_fieldset": "process", "short": "Array of process arguments."}}