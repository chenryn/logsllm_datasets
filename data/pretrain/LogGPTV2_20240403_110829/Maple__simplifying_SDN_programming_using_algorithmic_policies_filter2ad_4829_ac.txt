Algorithm 2: BUILDFT(t)
1 Algorithm BUILDFT(t)
2
3
4
5 Procedure BUILD(t,m)
if type t = L then
6
7
8
emitRule(priority, m, valuet);
priority ← priority + 1;
for v ∈ keys(subtrees t) do
else if type t = V then
BUILD(subtrees t[v], m ∧ (attr t : v));
9
10
11
12
13
14
15
16
17
else if type t = T then
BUILD(t−, m);
mt = m ∧ (attr t : valuet);
emitRule(priority, mt, ToController);
priority ← priority + 1;
BUILD(t+, mt);
that its value is increased by one after each output of an FT rule. In
other words, BUILD assigns each FT rule with a priority identical
to the order in which the rule is added to the FT.
BUILD processes a node t according to its type. First, at a leaf
node, BUILD emits an FT rule (at line 7) with the accumulated
match m and the designated action at the leaf node. The priority
of the FT rule is the current value of the global variable priority.
Second, at a V node (line 9), BUILD recursively emits the FT rules
for each subtree branch. Before proceeding to branch with value v,
BUILD adds the condition on the branch (denoted attrt : value) to
the current accumulated match m. We write m1∧ m2 to denote the
intersection of two matches.
The third case is a T node t. One might think that this is similar
to a V node, except that a T node has only two branches. Un-
fortunately, ﬂow tables do not support negation, and hence BUILD
cannot include the negation condition in the accumulated match
condition when recursing to the negative branch. To address the
issue, BUILD uses the following techniques. (1) It emits an FT rule,
which we call the barrier rule for the t node, with action being
ToController and match mt being the intersection of the assertion
of the T node (denoted as attrt
: valuet) and the accumulated
match m. (2) It ensures that the barrier rule has a higher priority
than any rules emitted from the negative branch. In other words,
the barrier rule prevents rules in the negated branch from being ex-
ecuted when mt holds. (3) To avoid that the barrier rule blocks
rules generated from the positive branch, the barrier rule should
have lower priority than those from the positive branch. Formally,
denote rb as the barrier rule at a T node, r− a rule from the nega-
tive branch, and r+ a rule from the positive branch. BUILD needs
to enforce the following ordering constraints:
r− → rb → r+,
(1)
where r1 → r2 means that r1 has lower priority than r2.
Since BUILD increases priority after each rule, enforcing the pre-
ceding constraints is easy: in-order traversal, ﬁrst negative and then
positive. One can verify that the run-time complexity of BUILDFT(t)
is O(n), where n is the size of the trace tree rooted at t.
Example: We apply BUILDFT to the root of the trace tree shown
in Figure 2, for switch s1 (e.g., leaves containing only actions per-
taining to s1, such as drop and port 30). Since the root of the tree
is a T node, testing on TCP destination port 22, BUILD, invoked
by BUILDFT, goes to line 12. Line 13 recursively calls BUILD on
the negative (right) branch with match m still being any. Since
the node (labeled ethDst) is a V node on the Ethernet destination
91attribute, BUILD proceeds to visit each subtree, adding a condition
to match on the Ethernet destination labeled on the edge to the sub-
tree. Since the subtree on edge labeled 2 is a leaf, BUILD (executing
at line 7) emits an FT rule with priority 0, with a match on Ether-
net destination 2. The action is to drop the packet. BUILD then
increments the priority, returns to the parent, and visits the subtree
labeled 4, which generates an FT rule at priority level 1 and in-
crements the priority. After returning from the subtree labeled 4,
BUILD backtracks to the T node (tcpDst:22) and outputs a barrier
rule with priority 2, with match being the assertion of the node:
matching on TCP destination port 22. BUILD outputs the ﬁnal FT
rule for the positive subtree at priority 3, dropping packets to TCP
destination port 22. The ﬁnal FT for switch s1 is:
, drop),
[ (3, tcp_dst_port=22
(2, tcp_dst_port=22
, toController),
(1, eth_dst=4 && eth_src=6, port 30),
(0, eth_dst=2
If one examines the FT carefully, one may observe some inefﬁ-
ciencies in it, which we will address in Section 4.3. A key at this
point is that the generated FT is correct:
, drop)]
THEOREM 1
(FT CORRECTNESS). tree and BUILDFT(tree)
encode the same function on packets.
4.2 Trace Tree Augmentation & Invalidation
With the preceding basic concepts, we now describe our tracing
runtime system, to answer the following questions: (1) how does
Maple transparently generate a trace tree from an arbitrary algo-
rithmic policy? (2) how to invalidate outdated portions of a trace
tree when network conditions change?
Maple packet access API: Maple builds trace trees with a sim-
ple requirement from algorithmic policies: they access the values
of packet attributes and perform boolean assertions on packet at-
tributes using the Maple packet access API:
readPacketField :: Field -> Value
testEqual
ipSrcInPrefix
ipDstInPrefix
:: (Field,Value) -> Bool
:: IPPrefix -> Bool
:: IPPrefix -> Bool
The APIs simplify programming and allow the tracing runtime to
observe the sequence of data accesses and assertions made by a pol-
icy. A language speciﬁc version of Maple can introduce wrappers
for these APIs. For example, pkt.eth_src() used in Section 2
is a wrapper invoking readPacketField on Ethernet source.
Trace: Each invocation of an algorithmic policy that uses the packet
access API on a particular packet generates a trace, which consists
of a sequence of trace items, where each trace item is either a Test
item, which records an assertion being made and its outcome, or a
Read item, which records the ﬁeld being read and the read value.
For example, if a program calls testEqual(tcpDst, 22) on
a packet and the return is false, a Test item with assertion of TCP
destination port being 22 and outcome being false is added to the
trace. If the program next calls readPacketField(ethDst)
and the value 2 is returned, a Read item with ﬁeld being Ethernet
destination and value being 2 will be appended to the trace. As-
sume that the program terminates with a returned action of drop,
then drop will be set as the returned action of the trace, and the
trace is ready to be added to the trace tree.
Augment trace tree with a trace: Each algorithmic policy starts
with an empty trace tree, represented as Ω. After collecting a new
trace, the optimizer augments the trace tree with the new trace. The
AUGMENTTT(t, trace) algorithm, presented in Algorithm 3, adds
a new trace trace to a trace tree rooted at node t. The algorithm
walks the trace tree and the trace in lock step to ﬁnd the location
at which to extend the trace tree.
It then extends the trace tree
at the found location with the remaining part of the trace. The
algorithm uses head (trace) to read the ﬁrst item of a trace, and
next(trace) to remove the head and return the rest. The algorithm
uses a straightforward procedure TRACETOTREE(trace), which
we omit here, that turns a linear list into a trace tree.
t ← TRACETOTREE(trace);
return;
Algorithm 3: AUGMENTTT(t, trace)
1 if type t = Ω then
2
3
4 repeat
5
6
7
8
9
10
item = head(trace); trace ← next(trace);
if type t = T then
if type t+
if item.outcome is true then
t+ ← TRACETOTREE(trace);
return;
t ← t+ ;
= Ω then
else
11
12
13
14
15
16
17
18
19
20
21
22
23
24
else
if type t− = Ω then
t− ← TRACETOTREE(trace);
return;
t ← t− ;
else
else if type t = V then
if item.value ∈ keys(subtree t) then
else
t ← subtree t[item.value];
subtree t[item.value] ← TRACETOTREE(trace);
return;
25 until;
Example: Figure 3 illustrates the process of augmenting an ini-
tially empty tree. The second tree results from augmenting the
ﬁrst tree with trace Test(tcpDst, 22; False), Read (ethDst; 2); ac-
tion=drop. In this step, AUGMENTTT calls TRACETOTREE at the
root. Note that TRACETOTREE always places an Ω node in an un-
explored branch of a T node, such as the t+ branch of the root of
the second tree. The third tree is derived from augmenting the sec-
ond tree with the trace Test(tcpDst, 22; False), Read (ethDst; 4),
Read (ethSrc, 6); action=port 30 . In this case, the extension is at
a V node. Finally, the fourth tree is derived by augmenting the
third tree with trace Test(tcpDst, 22; True); action=drop. This
step ﬁlls in the positive branch of the root.
Correctness: The trace tree constructed by the preceding algorithm
returns the same result as the original algorithmic policy, when
there is a match. Formally, we have:
THEOREM 2
(TT CORRECTNESS). Let t be the result of aug-
menting the empty tree with the traces formed by applying the algo-
rithmic policy f to packets pkt1 . . . pktn. Then t safely represents
f in the sense that if SEARCHTT(t, pkt) is successful, then it has
the same answer as f (pkt).
Optimization: trace compression: A trace may have redundancy.
Speciﬁcally, although the number of distinct observations that a
program f can make of the packet is ﬁnite, a program may repeat-
edly observe or test the same attribute (ﬁeld) of the packet, for ex-
ample during a loop. This can result in a large trace, increasing the
cost of tracing. Furthermore, redundant trace nodes may increase
the size of the trace tree and the number of rules generated.
Maple applies COMPRESSTRACE, Algorithm 4, to eliminate both
read and test redundancy in a trace before applying the preceding
augmentation algorithm. In particular, the algorithm tracks the sub-
set of packets that may follow the current trace. When it encounters
92Ω
(a)
tcpDst:22
true
Ω
false
ethDst
2
drop
(b)
true
Ω
tcpDst:22
false
ethDst
2
drop
4
ethSrc
6
port 30
true
drop
tcpDst:22
false
ethDst
2
drop
4
ethSrc
6
port 30
(d)
Figure 3: Augmenting a trace tree for switch s1. Trace tree starts as empty (Ω) as (a).
(c)
Algorithm 4: COMPRESSTRACE()
1 for next access entry on attribute a do
2
3
ignore
if range(entry) included in knownRange then
else
4
5
update knownRange
a subsequent data access, it determines whether the outcome of this
data access is completely determined by the current subset. If so,
then the data access is ignored, since the program is equivalent to a
similar program that simply omits this redundant check. Otherwise,
the data access is recorded and the current subset is updated.
Maple trace tree invalidation API: In addition to the preceding
packet access API, Maple also provides an API to invalidate part of
a trace tree, where SelectionClause speciﬁes the criteria:
invalidateIf :: SelectionClause -> Bool
For example, the invalidateHost call in the motivating ex-
ample shown in Section 2 is a shorthand of invoking invalidateIf
with SelectionClause as source or destination MAC addresses
equal to a host’s address. This simple call removes all outdated for-
warding actions involving the host after it changes location.
As another example, if SelectionClause speciﬁes a switch