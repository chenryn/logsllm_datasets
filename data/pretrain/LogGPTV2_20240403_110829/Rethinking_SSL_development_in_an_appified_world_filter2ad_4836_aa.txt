title:Rethinking SSL development in an appified world
author:Sascha Fahl and
Marian Harbach and
Henning Perl and
Markus Koetter and
Matthew Smith
Rethinking SSL Development in an Appiﬁed World
Sascha Fahl, Marian Harbach, Henning Perl, Markus Koetter, Matthew Smith
Distributed Computing & Security Group
Leibniz University Hannover, Germany
Hannover, Germany
{fahl,harbach,perl,koetter,smith}@dcsec.uni-hannover.de
ABSTRACT
The Secure Sockets Layer (SSL) is widely used to secure data
transfers on the Internet. Previous studies have shown that
the state of non-browser SSL code is catastrophic across a
large variety of desktop applications and libraries as well as
a large selection of Android apps, leaving users vulnerable to
Man-in-the-Middle attacks (MITMAs). To determine possi-
ble causes of SSL problems on all major appiﬁed platforms,
we extended the analysis to the walled-garden ecosystem
of iOS, analyzed software developer forums and conducted
interviews with developers of vulnerable apps. Our results
show that the root causes are not simply careless developers,
but also limitations and issues of the current SSL develop-
ment paradigm. Based on our ﬁndings, we derive a proposal
to rethink the handling of SSL in the appiﬁed world and
present a set of countermeasures to improve the handling of
SSL using Android as a blueprint for other platforms. Our
countermeasures prevent developers from willfully or acci-
dentally breaking SSL certiﬁcate validation, oﬀer support
for extended features such as SSL Pinning and diﬀerent SSL
validation infrastructures, and protect users. We evaluated
our solution against 13,500 popular Android apps and con-
ducted developer interviews to judge the acceptance of our
approach and found that our solution works well for all in-
vestigated apps and developers.
Categories and Subject Descriptors
D.4.4 [Software]: Communications Management—Network
communication; H.3.5 [Information Storage and Re-
trieval]: Online Information Services—Data Sharing
General Terms
Security, Human Factors
Keywords
Android, Apps, iOS, MITMA, Security, SSL
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from Permissions@acm.org.
CCS’13, November 4–8, 2013, Berlin, Germany.
Copyright 2013 ACM 978-1-4503-2477-9/13/11 ...$15.00.
http://dx.doi.org/10.1145/2508859.2516655.
1.
INTRODUCTION
The proliferation of smartphones and tablet devices is
changing the way software is being developed. Both the
Android Play Market and the Apple App Store oﬀer over
half a million apps and more than one billion apps are in-
stalled from these markets every year. The “There is an
app for that” attitude and the possibility to quickly reach a
huge global market has inspired thousands of small software
companies and hobby developers to create software on an
unprecedented scale. These join big businesses in vying for
the lucrative app market. One issue issue many developers
seem to have in common is that they often have problems
when working with SSL. In previous work, we conducted an
in-depth study of 13,500 Android apps which showed that a
large number of apps did not use SSL correctly [5], thus mak-
ing them vulnerable to Man-In-The-Middle attacks. The af-
fected applications ranged from home-brew and open source
apps to those developed by large corporations and security
specialists, suggesting that SSL problems are not just a mat-
ter of untrained developers getting it wrong.
While our previous work and a related study by Georgiev
et al. [8] discuss possible reasons for why so many apps across
such a wide range of developers are aﬀected and make recom-
mendations on how to prevent these problems in the future,
the actual causes of the problems have not yet been identi-
ﬁed nor have the potential countermeasures been evaluated.
In this paper, we continue where this work left oﬀ and evalu-
ate the root causes of SSL coding problems. Based on these
ﬁndings, we argue that the way developers work with SSL
needs to be changed signiﬁcantly. We designed a framework
for SSL development to demonstrate our proposal, imple-
mented it for Android, evaluated it against the set of 13,500
popular apps we analyzed in our previous study and con-
ducted developer interviews to show its functionality and
feasibility.
Our solution makes several changes to the status quo:
First, it removes the need for developers to write actual SSL
code. Instead an app developer can turn on and conﬁgure
SSL using only conﬁguration options in case they intend to
deviate from the standard use case. Second, unlike in the
current system, all use-cases we found in apps and those
described by developers are supported securely, removing
the need for dangerous customization. Third, the frame-
work can make a distinction between developer devices and
end-user devices. This allows developers to rapidly proto-
type applications and tinker without much eﬀort, but it also
automatically and properly protects end-users. Fourth, in
the remaining rare cases that there is a problem with SSL,
49the end-user is reliably informed about the nature of the
problem which means that apps can no longer silently ig-
nore these warnings and invisibly make users vulnerable to
MITM attacks. Finally, our approach allows for new SSL
validation strategies and infrastructures, such as Certiﬁcate
Transparency [11], Convergence [13], and AKI [10], to be
deployed centrally instead of potentially requiring tens of
thousands of app developers to make adjustments to their
code, thus signiﬁcantly easing the deployment of new SSL
validation strategies1.
Our contributions can be summarized as follows:
• We conducted the ﬁrst analysis of iOS SSL security
to ascertain whether the walled garden approach and
stricter code auditing process of Apple could prevent
the kind of problems previously seen on Android. We
manually examined 1,009 iOS apps. The results show
that, similar to Android, 14 % of apps using SSL do
not implement SSL validation correctly and are thus
vulnerable to active MITMAs.
• We conducted the ﬁrst in-depth study of the reasons
behind the widespread problems with SSL on the two
major app platforms Android and iOS, including both
technical aspects as well as an in-depth study with
aﬀected developers.
• Based on the above research, we designed and imple-
mented countermeasures for handling SSL on Android.
This solution can also serve as a blueprint for SSL han-
dling on other appiﬁed platforms.
• We conducted an extensive evaluation of our approach
by auditing 13,500 apps and showing that our solution
covers all use-cases present in these apps. We also
conducted a follow-up developer study to ensure our
approach does not break any development needs and
would ﬁnd acceptance within the target community.
2. RELATED WORK
2.1 SSL Validation
The main body of work on SSL has centered around ﬁnd-
ing a replacement for the current weakest link, the CA-based
validation of certiﬁcates. Many new proposals have been
made that promise to strengthen the security of certiﬁcate
validation, including Perspectives [18], Convergence [13], Cer-
tiﬁcate Transparency [11], Sovereign Keys [3], TACK [12],
and DANE [9]. However, none of these systems has achieved
widespread adoption yet. While this is certainly at least in
part due to the fact that some have only recently been pro-
posed, a major issue faced by all systems is that they require
modiﬁcation of client code handling SSL connections. While
on desktop systems updating the handful of browsers would
already cover a large amount of SSL real estate, the situa-
tion on appiﬁed platforms is bleak. Here thousands of apps
contain their own SSL validation implementation and thus
must potentially update their code to support a new certiﬁ-
cate validation strategy.
1We believe this last feature could be useful in the light of
the many new solutions suggested in this domain that are
currently facing adoption/deployment problems.
2.2 SSL on Appiﬁed Platforms
Research has shown that the appiﬁcation and app market
trend has caused new security and privacy challenges for
users, developers and researchers [15, 2, 4, 19, 5, 1, 17, 7,
6]. This research focused mainly on the threats posed by
malicious entities and their apps. The problems with SSL
we [5] and Georgiev et al. [8] discovered are diﬀerent in that
they are not caused by malicious intent, but nonetheless pose
a serious threat.
While the bulk of SSL connections on desktop systems
occurs in browsers which validate SSL certiﬁcates correctly,
there are also applications that use SSL to protect their com-
munication. Georgiev et al. [8] analyzed the security of SSL
certiﬁcate validation in a wide range of SSL libraries and
programming frameworks. They conclude that many popu-
lar libraries fail when it comes to SSL certiﬁcate validation
and thus endanger the applications which are based on these
libraries.
In [5] we examined the state of SSL on Android. We an-
alyzed the SSL security of 13,500 popular free apps from
Google’s Play Market. The results showed that 1,074 apps
contained SSL code that either accepted all certiﬁcates or all
hostnames for a certiﬁcate and thus leaves the users poten-
tially vulnerable to MITMAs. The cumulative install base
of the apps with conﬁrmed vulnerabilities against MITMAs
ranged between 40 and 185 million users.
Georgiev et al. [8] make recommendations for what could
be done to alleviate these widespread problems. They rec-
ommend that app developers should use fuzzing and ad-
versarial testing. Developers should not modify applica-
tion code and disable certiﬁcate validation for testing with
self-signed and/or untrusted certiﬁcates, but create a tem-
porary keystore with the untrusted CA’s public key in it.
They also recommend that app developers should not rely
on SSL libraries to do things correctly for them.
Instead
they should set all necessary security parameters themselves
explicitly. For library developers, they recommend that SSL
libraries be made more explicit about the semantics of their
APIs. They also recommend that libraries use safe defaults
as much as possible. Furthermore, they should not silently
skip important functionalities such as hostname veriﬁcation
and should remain consistent in using return values or ﬂags
for reporting purposes.
Our central suggestion was to drastically limit custom SSL
handling in apps. In an alternative approach we suggested
that a static code analysis be performed by the app store
or the app installer to then inform developers/users about
potentially unsafe code.
Both papers only brieﬂy describe their potential counter-
measures as part of their recommendations for future work.
No implementations or evaluations were presented.
Inter-
estingly, the countermeasures suggested by the two parties
diverge somewhat in their direction. Georgiev et al. call for
better APIs for developers, emphasize that developers need
to check their apps themselves instead of relying on libraries
to do things correctly and to work around API restrictions
using custom keystores instead of modifying validation for
development purposes, while we suggest almost the opposite
approach by recommending to limit the developers’ capabil-
ities for customizing SSL and adding checks to prevent bro-
ken apps from entering the market or the device. In the next
two sections of this paper, we will examine the root causes
of the problems facing developers when using SSL to better
50judge which countermeasures are likely to achieve the best
results.
2.3 SSL Development Paradigm
There are countless SSL libraries and TrustManagers that
aim to make the integration of SSL into apps easier. How-
ever, as the studies by Georgiev et al. [8] and us [5] have
shown, many of these are either broken or so error-prone
that developers break their apps using them. To the best
of the authors’ knowledge there is no related work evaluat-
ing the root causes of these SSL coding problems nor any
work suggesting changes to the development paradigm. Our
paper makes important contributions to both these areas.
3. SSL ON IOS
To examine whether or not the widespread SSL problems
of apps and libraries introduced above are endemic to the
Android and open source ecosystems, we conducted the ﬁrst
in-depth analysis of iOS apps to see if the more restrictive
and curated Apple App Store would prevent apps with bro-
ken SSL code from entering the iOS ecosystem. While iOS
does not oﬀer developers as many options as Android, it still
oﬀers similar freedom concerning the implementation and
use of SSL. Developers can decide if they want to use SSL
or not and just like on Android they can use SSL but can
turn SSL certiﬁcate validation oﬀ. They are also left alone
with the challenge to ﬁnd an appropriate way to handle cer-
tiﬁcation validation errors and inform the user: In terms of
SSL APIs, Android and iOS are fairly similar. However, Ap-
ple performs a code analysis on all apps, in order to prevent
apps that do not conform to their policies from entering the
store.
We did not have the means to automatically crawl Apple’s
app store and use static code analysis on tens of thousands
of apps as we did with Android, so we opted for a manual
approach. Initially, we downloaded 150 cherry-picked apps
for analysis. Based on the ﬁndings in these apps we con-
ducted developer interviews as described in section 4.2. We
then extended our study to include 1,009 apps for a more
robust evaluation. We downloaded the 1,009 apps by select-
ing the most popular free apps. Since iOS does not work
with permissions the way Android does, it was not possible
to see which apps have access to sensitive information and
can connect to the Internet before installation. We therefore
installed all of the apps on an iPhone 4S running iOS 5 to
study them in action. We then mounted active Man-In-The-
Middle attacks against SSL connections using a transparent
proxy to see how the apps react and what kind of sensitive
information we could gather.
We captured network traﬃc from 884 apps and SSL-protected
network traﬃc from 697 of these 884 apps. Of these 697
apps, 98 (14 %, 9.7 % of all 1,009 apps) were vulnerable to
our MITMA and leaked sensitive information. Of the re-
maining 599 apps that were not vulnerable to our active
MITMA, 312 apps presented the user with a warning mes-
sage; 58 apps presented a warning message indicating that
there were problems with the SSL certiﬁcate. 254 presented
warning messages that did not give an appropriate descrip-
tion of what was going on, for instance stating that the login
credentials were wrong or that there was no Internet connec-
tion available. Finally, 287 apps simply did not connect to
the attacked host either doing nothing, hanging indeﬁnitely
or crashing. Additionally, 82 (9.27 %) of the 884 apps used
plain HTTP connections to transfer sensitive information.
Two apps were vulnerable to SSL stripping attacks. One of
these was an online banking app that loaded the bank’s web-
site via plain HTTP, while the other app connected to the
HTTP version of Facebook. Thus we were able to gather
sensitive information from 182 apps, i.e. 20.5 % of apps
from which we captured network traﬃc. The information
included the usual suspects of login credentials, banking ac-
counts, data stored on cloud storage services, emails, or chat
messages.
This shows that the SSL problems on iOS are similar to
those on Android and that Apple’s more restrictive and cu-
rated app development model and App Store do not prevent
SSL-related security issues. Just like on Android, app devel-
opers turn oﬀ SSL certiﬁcate validation, write apps that are
vulnerable to SSL stripping and even in cases where apps