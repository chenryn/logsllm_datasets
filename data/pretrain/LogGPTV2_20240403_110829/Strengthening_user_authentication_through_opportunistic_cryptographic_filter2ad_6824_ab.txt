a password and secret questions). Following this nomenclature,
opportunistic PhoneAuth attempts to perform a protected login,
but reverts to an unprotected login if the identity assertion is not
available.
The work by Czeskis et al. shows that only ﬁrst logins from
a new device need special protection via a second factor device –
subsequent logins can be protected by channel-bound cookies (see
below) that were set during the ﬁrst login. This observation further
shows the usability of our scheme: we obtain strong protection with
a login mechanism that quite literally asks the user to do nothing
but type their username and password, and (assuming a wireless
connection between browser and phone) bring their phone into
the proximity of the browser only during the ﬁrst login from that
browser.
TLS CHANNEL IDS. The security of PhoneAuth relies on the con-
cept of TLS origin-bound certiﬁcates (OBC) recently introduced
in [13]. TLS-OBC is currently an experimental feature in Google’s
Chrome browser and is under consideration by the IETF as a TLS
extension.
OBCs are TLS client certiﬁcates that are created by the browser
on-the-ﬂy without any user interaction and used during the TLS
handshake to authenticate the client. OBCs don’t carry any user-
identifying information and are not used directly for authentication.
Instead, they simply create a TLS “channel” that survives TLS
session resets (the client re-authenticates itself with the same OBC
to the server, recreating the same channel). We can bind an HTTP
cookie to this TLS channel by including a TLS channel ID (a hash
of the client’s OBC) as part of the data associated with the cookie.
If the cookie is ever sent over a TLS channel with a different
channel ID (i.e., from a client using a different OBC), then the
cookie is considered invalid.
At the heart of PhoneAuth is the idea that the server and browser
will each communicate their view of the TLS channel between
them to the user’s phone. The server uses the login ticket as the
vehicle to communicate its view of the TLS channel ID to the
phone. The browser communicates the TLS channel ID directly
to the phone. If there is a man-in-the-middle between browser and
server (which doesn’t have access to the browser’s private OBC
key), these two TLS channel IDs will differ (the server will report
the ID of the channel it has established between the man-in-the-
middle and itself, while the browser will report its channel ID to
the phone). Similarly, if the user accidentally types his credentials
into a phishing site (which then turns around and tries to submit
them to the server), the two TLS channel IDs will differ.
407Figure 1: PhoneAuth Overview
The user’s phone compares the two TLS channel IDs and will
not issue an identity assertion if they differ, causing a login failure
in strict mode, and an unprotected login in opportunistic mode. The
phone can then potentially alert the user that an attack may be in
progress or send a message to the server if a cellular connection is
available.
Figure 3: Assertion request structure
Figure 2: Login ticket structure
4.2 Protocol Details
In describing this protocol, we also describe inline how our
design addresses risks such as credential reuse, protocol rollback
attacks, TLS man-in-the-middle attacks, and phishing.
Recall that in step 2, the user’s entered username and password
are sent to the server. The server then veriﬁes the credentials
and generates a login ticket. The login ticket structure is shown
in Figure 2. The ticket contains a TLS channel ID (for binding
the ticket to the TLS channel), the web origin of the webapp,
the expiration time (to prevent reuse), whether the login request
used TLS-OBC (to prevent rollback attacks), an account (to bind
the ticket to a user), and an origin protection key (to allow the
phone to decrypt assertion requests sent over insecure mediums).
The login ticket is encrypted and signed using keys derived from a
per-account master secret known only to the server and the user’s
phone; we describe later how the server and phone derive this
master secret key. Observe that the login ticket is opaque to the
browser – it can neither “peek” inside nor modify the login ticket.
The server sends the login ticket along with a certauth id that
tells the browser how to contact the user’s phone. The certauth id
is in the form of:
@..certauth
After receiving the login ticket, the browser generates an asser-
tion request (shown in Figure 3) which includes the login ticket
along with some metadata about the TLS session. The metadata
also includes the TLS channel ID as seen by the browser and helps
to prevent a TLS man-in-the-middle attack. This data is encrypted
and authenticated under the origin protection key obtained from the
certauth id (obtained in step 2).
The browser sends the assertion request to the user’s phone in
step 3. The phone then unpacks and validates the assertion request,
making sure that the TLS channel IDs match, that the device can
vouch for the requested user, and that the assertion request was
indeed for this device. Next, the device generates an identity
assertion. The identity assertion simply contains the login ticket
signed by the private key of the user’s personal device. The phone
sends the identity assertion to the browser, which forwards it to the
webapp (shown in Figure 4). The webapp unpacks and validates
the assertion (again checking for TLS Channel ID mismatches) and
incorrect signatures.
Finally, the webapp gives the browser a channel-bound cookie,
thus completing the protected login.
ADDITIONAL SECURITY DISCUSSION. Though we discuss sev-
eral attacks and their mitigations above, we now highlight several
additional aspects of our security design. Observe that by including
the TLS channel ID in the login ticket, the server binds that ticket to
the server-browser TLS channel. Because the login ticket is end-to-
end encrypted to the user’s personal device, a rogue middle party is
unable to undetectably modify it. By using the TLS channel ID that
the browser has placed in the assertion request in conjunction with
the TLS channel ID from the login ticket, the user’s phone is able
to determine if a man-in-the-middle is present. Observe that the
metadata provided by the browser is encrypted and authenticated
Serverusername + passwordlogin ticketid assertionlogin ticketid assertionchannel-bound login cookie243username + password1login ticket + certauth idServerusername + password2TLS channel ID,origin,tls_obc_support,expiration time,user account,origin-protection key(signed and encrypted by master ticket key)"@..certauth"id assertionassertion requestorigin,TLS channel ID,tls_obc_support3login ticket(signed and encryptedby origin protection key)408the phone number has stayed constant), which will help them get
through the replacement process.
In the case where the user does not have an active protected login
session and has a new phone number, users will need to go through
a thorough account recovery procedure. For example, a service
provider may send an e-mail to a backup email address or ask
questions about the content of the account (such as recent e-mails).
There best recovery technique for a service provider largely depend
on the type of service being offered. We therefore do not give
concrete guidance on what the account recovery procedure should
be.
REVOCATION. Users may want to revoke their phone (in case it is
stolen or they decide to withdraw from the protected login system).
Similar to replacing a phone, this can be accomplished through
the web interface at the server if the user has an active session.
Otherwise, device revocation can potentially be a very dangerous
action. In case of no active session, we recommend that service
providers verify the user identity via a thorough account recovery
procedure (see above).
5.
IMPLEMENTATION
Having presented the overall architecture, a key question arises:
why did we choose to implement identity assertion generation on
a smart phone? A standard option might have been a Near Field
Communication (NFC) smartcard or dedicated token, as used by
other constructions. While offering good security properties, the
use of dedicated tokens has usability problems – e.g., requiring
changes in user behavior (either to keep the token with the user
or to place the token near the computer when authenticating); these
user behavior changes violate our goal to keep the action of logging
in invariant. An additional advantage of using a phone is that users
already possess such a device, whereas otherwise they would have
to obtain a special-purpose authentication device from somewhere.
PHONES AND BLUETOOTH. Our system requires that the PC and
phone communicate wirelessly, since a wired connection would
have undesirable usability consequences. While they could clearly
communicate through a trusted third party known to both (i.e., a
server in the cloud [1]), this approach introduces unacceptable
latency and the need for cellular connectivity.
Instead, we have
elected to have the PC and phone communicate directly through
Bluetooth. Though other alternative ad-hoc wireless protocols exist
(e.g., wiﬁ direct, NFC), they are not sufﬁciently ubiquitous or have
other inherent limitations. Unlike NFC (which is for extremely
close range communication, i.e., “touching”), Bluetooth allows the
user to keep the phone in their pocket during the authentication
process – a huge usability beneﬁt. Though the range of Bluetooth
has been shown to be artiﬁcially extendible by attackers [30], this
is not a security issue for our design unless the attackers are also
able to mount a TLS man-in-the-middle attack on the PC-Server
connection – in which case, such attackers are outside the scope of
our threat model (see Section 3).
5.1 Key Challenges and Methods
While implementing this system, we encountered a number of
interesting technical and design challenges.
PHONE AND PC COMMUNICATION. The central challenge with
using Bluetooth in our environment is that we want to simulta-
neously support (1) Bluetooth communication between the user’s
phone and the user’s browser without any user interaction with the
phone and (2) have this work even when the user has never had
contact with the computer / browser before. This is a challenge
because, without prior interaction, the phone and the computer /
Figure 4: Identity assertion structure
by the origin-protection-key which the user’s device extracts after
decrypting the login ticket. When the identity assertion returns to
the server, it can be sure that: 1) the identity assertion came over
the same TLS channel as the user password (no phishing occurred),
2) there was no TLS man-in-the-middle between the browser on
which the password was entered and the server, and 3) the user’s
phone was near the PC during authentication1.
4.3 Enrollment
As we mentioned brieﬂy earlier,
the user’s phone must be
enrolled with the server prior to use during authentication. Speciﬁ-
cally, the user’s phone registers itself with the server by telling the
server its public key and identifying which user(s) it will vouch for.
The user’s personal device and the server also agree on a master
encryption key during the enrollment process. The architecture of
the enrollment protocol is fairly simple (occurring as a single HTTP
POST request) and is discussed in detail in Section 5.
Enrollment need only be done once per website and phone. Once
a user has enrolled his phone device with a server, he will not have
to do this again.
Clearly, prior to enrolling into this system, users do not have
the beneﬁts of the system and are vulnerable to some the attacks
against which this system protects. Namely, we assume there to be
no TLS man-in-the-middle between the user’s PC and the server
during enrollment.
4.4 Practical Maintenance Operations
During the normal use of PhoneAuth, several maintenance
operations will occur. We address each in turn.
ADDING MORE PHONES. Users may want to have more than one
phone. However, to make it easier for users to maintain consistency
(the lack of which which may introduce user confusion) we
suggest only allowing users to have one enrolled phone as their
authentication device. We enforce this by overriding enrollment
information every time the user registers a (new) phone.
RECOVERY / REPLACING A PHONE. Users will want to replace
their phone for a variety of reasons – upgrades, loss (or breakage),
or just because. In our system this is easily accomplished if the user
has at least one PC which has an active login session. The user will
simply elect to “replace their authentication device” in the web UI.
This will present a QR code which the user can scan with their new
phone. The QR code includes session information from the PC’s
active login session which the phone can use to prove to the server
that the user did have a valid session. As an alternative, users can
elect to have a special SMS sent to their new phone (presumably
1We discuss the reasoning for this after providing some implemen-
tation details.
Serverid assertionchannel-bound login cookie4(signed by user's private key)login ticket409browser will not be paired. To overcome these challenges, we
modify both the browser and leverage a seldom used feature of the
Bluetooth protocol.
In order for the PC and phone to contact one another over Blue-
tooth they need to learn one-another’s Bluetooth MAC address. In
most scenarios, this is usually done by putting one or both devices
in discoverable mode, scanning for devices, then using a UI to
pick the corresponding device from the menu. Since this process
is highly interactive and time consuming (especially the scanning
portion), we investigated ways of short circuiting the process. We
leverage the fact that if one of the devices knows the MAC address
of the other device, then the discovery phase can be bypassed and
communication can immediately commence. Note that the phone
and the PC are assumed to not have any prior association and
therefore do not know each other’s address.
We considered two bootstrapping mechanisms: 1) the phone
would “be told” the PC’s address and would initiate a connection
with the PC or 2) the PC would “be told” the phone’s address
and would initiate a connection with the phone. For the ﬁrst
mechanism, the server could send a message to the phone through
the cloud. However requires a cellular connection (which may not
be available) and introduces high latency thereby changing the user
experience and violating our goals from Section 3. For the second
mechanism, the PC can obtain the phone’s Bluetooth MAC address
from the already existing (and lower latency) server connection2.
Though the PC and Phone can make radio contact, there are
still a number of challenges to overcome. Traditionally, before any
Bluetooth communication takes place, the user must ﬁrst “pair” the
two devices. This usually involves showing the user some interface
where he is asked to compare several numbers and usually press
a button on one or both devices. This is both labor and time
intensive from the user’s point of view.
Instead, we utilize the
ability of Bluetooth devices to communicate over unauthenticated
RFCOMM connections. This technique allows us to create a “zero-
touch” user experience by not forcing the user to interact with the
mobile phone at all while authenticating on the PC. Recall from
Section 4 that although the Bluetooth connection is unauthenticated
at the RFCOMM level, the data is end-to-end authenticated and
encrypted on the application level using the origin-protection-key.
BROWSER SUPPORT FOR PHONE COMMUNICATION. Our archi-
tecture proposes that webpages should be able to request identity
assertions from the user’s mobile phone. One way of achieving
this goal is to create an API that would allow webpages to send
arbitrary data to the user’s phone. At the extreme, this would
amount to a Bluetooth API in JavaScript. This approach is
unattractive for a variety of both security and usability reasons. For
example, it might allow malicious sites to freely scan for and send
arbitrary data to nearby Bluetooth devices. This may expose those
devices to DOS attacks, make them even more vulnerable to known
Bluetooth exploits, and allow attackers to potentially track users
via their Bluetooth address.
Instead, we chose an approach that
exposes a much higher level API – thereby severely constraining
the attackers’ abilities. We describe this in detail below.
5.2 Implementation Details
BROWSER. We extended the Chromium web browser to provide
websites a new JavaScript API for fetching identity assertions.
We modeled our approach after the BrowserID [2] proposal by
using the navigator.id namespace. The full API consists of the
2This must be done carefully, lest the designer creates a Bluetooth
address oracle. See Section 7 for more discussion of this pitfall.
function:
navigator.id.GetIdentityAssertion()
This API accepts three parameters: 1) a certauth id, 2) a login
ticket, and 3) a JavaScript callback function that will be called when
the identity assertion is ready.
If an identity assertion is not able to be fetched (either because
the phone is not in range or the ticket is incorrect), the callback
function may not be called – this is to help prevent malicious
actions such as brute-forcing correct login tickets and tracking
users by Bluetooth address.
Since regular Chromium extensions don’t have the ability to
interact with peripheral devices (i.e., Bluetooth), we also wrote an
additional NPAPI plugin that is embedded by the extension. The
extension currently supports the Chromium browser on both Linux
and Windows platforms.
In total, the modiﬁcation consisted of
3300 lines of C and 700 lines of JavaScript.
Pending work is ongoing to implement this functionality into the
core Chromium browser code. We are currently investigating to-
gether with the Firefox team whether our GetIdentityAssertion
API and the BrowserID API can be combined into a single API.
MOBILE PHONE. We modiﬁed the Android version of the open
source Google Authenticator application [27] to provide identity
assertions over unsecured RFCOMM. The application is able
to provide identity assertion while the screen is off, and the
application is in the background. The total changes required were
4000 lines of Java code.
SERVER. We chose a service-oriented design for the server-side
implementation. The central service exposes three RPCs: Regis-
terDevice, GenerateTickets, and VerifyTicket. The RegisterDevice
RPC is exposed as a REST endpoint directly to users’ phones. The
other two RPCs are intended for login services. The idea is that a
(separate) login service will call the GenerateTickets RPC after it
performed a preliminary authentication of the user (using username
and password), and will forward the login tickets returned by this
RPC to the user’s browser. Once the user’s browser has obtained
an identity assertion from the user’s phone and has forwarded it to
the login service, the login service will use the VerifyTicket RPC
to check that the identity assertion matches the previously issued
login ticket.
The basic signatures of the three RPCs is:
RegisterDevice Input parameters include an OAuth token iden-
tifying the user account for which the device is registered,
a public key generated by the device, and the Bluetooth
address of the device. This RPC returns the ticket master
key.
GenerateTickets The following input parameters are included in
the login tickets:
• The user id of the user for which the login service needs
Login Tickets.
• The URL of the login service.
• The TLS channel ID (see Section 4.1) of the client that
has contacted the login service. This is an optional
parameter and only included if the client (browser)
supports TLS-OBC.
• A boolean designating whether the user has explicitly
indicated an intent to log in (such as typing a username
and password), or not (such as during a “password-
less” login that is triggered purely by the proximity of
410the phone to the browser). This boolean is embedded
in the login ticket and allows the phone to present a
consent screen on the phone if no previous user consent
has been obtained by the login service for this login.
• A boolean indicating whether the login service supports
TLS-OBC. This allows us to detect an attack in which
a man-in-the-middle pretends to a TLS-OBC-capable
browser (respectively login service) that the login ser-
vice (respectively browser) doesn’t support TLS-OBC.
This boolean will be compared by the phone to a similar
boolean that the browser reports directly to the phone.
This RPC returns a login ticket for the indicated user’s reg-
istered device. As noted earlier, a login ticket includes many
of the input parameters, together with an expiration time and
an origin protection key, and is encrypted and signed with
keys derived from the ticket master key established at device
enrollment time. Every login ticket is accompanied by an
identiﬁer that includes the Bluetooth address of the device
possessing the ticket master key.
VerifyTicket This RPC’s input parameter is an “identity asser-
tion”, which is simply a counter-signed login ticket. The
service simply checks that the ticket is signed by a key that
corresponds to the user for which the ticket was issued, and
returns an appropriate status message to the caller (the login
service).
The complete implementation of this service (not including a
backend database for storing device registration information, unit
tests, and the actual login service) consisted of 5500 lines of Java.
6. EVALUATION
6.1 Comparative
We now evaluate our system using Bonneau et al.’s framework
of 25 different “beneﬁts” that authentication mechanisms should
provide. We evaluate the two modes of using PhoneAuth – strict
and opportunistic. Recall from Section 4 that in strict mode, the
user can only successfully authenticate if an identity assertion
is fetched from his phone.
In opportunistic mode, however,
identity assertions are fetched opportunistically and users achieve
either “protected” or “unprotected” login, with the latter possibly
resulting in user notiﬁcations or restricted account access. We also
include the incumbent passwords and a popular 2-factor scheme
as a baseline; we reproduce scores for passwords exactly as in
Bonneau et al.’s original publication, but disagree slightly with the
scores reported for Google 2-Step Veriﬁcation (2SV). The results
of our evaluation are shown in Table 1.
In the usability arena, the strict and opportunistic
USABILITY.
modes are similar to passwords and 2SV in that they provide the
easy-to-learn and easy-to-use beneﬁts since neither mode requires
the user to do anything beyond entering a password. We rated
both strict and opportunistic modes as somewhat providing the
infrequent-errors beneﬁt since they will cause errors if the user
forgets his password or if the PC-phone wireless connection does
not work. The strict mode does not provide the nothing-to-carry
beneﬁt since users won’t be able to authenticate without their
personal device. On the other hand, opportunistic mode somewhat
provides that beneﬁt since users may get a lower privileged session
without their personal device. Both PhoneAuth modes provide the
Quasi-Nothing-to-Carry beneﬁt, since the device that the user is
required to carry is a device they carry with them already anyway.
We indicated that both strict and opportunistic modes at least
somewhat provided the scalable-for-users beneﬁt since they reduce
the risk of password reuse across sites.
DEPLOYABILITY. Assessing the deployability beneﬁts comes
down to evaluating how much change would be required in current
systems in order to get our proposed system adopted. We note that
the opportunistic mode is fairly deployable since it can always fall
back to simple password authentication. Strict mode provides less
deployability beneﬁts, but is not far behind. Since the system is
not proprietary, the changes that would need to be done both on
the browser and server are minimal. Similarly, the cost-per-user of
these systems is minimal as well.
SECURITY. The security beneﬁt arena is where our approach really
shines over passwords and 2SV. While the Bonneau et al. study
indicated that 2SV was resistant to phishing, unthrottled guessing,
and somewhat resistant to physical observation, we do not believe
this to be the case. Attackers can phish users for their 2SV codes
and, in conjunction with a phished password, can compromise
user accounts. The same is true under physical observation and
unthrottled guessing.
In comparison, PhoneAuth in strict mode is able to provide all
of the security beneﬁts except for unlinkable, which we say it
provides somewhat because even though the user will be exposing
his or her Bluetooth MAC address to multiple veriﬁers, privacy
conscious users can change their Bluetooth MAC address to not
be globally unique. The opportunistic mode provides all of the
security beneﬁts of passwords, but is also able to somewhat provide
the other security beneﬁts by restricting users (or attackers) who
don’t provide an identity assertion to less privileged operations and
notifying users of the less secure login.
DISCUSSION. Given this evaluation, we believe that PhoneAuth
fares very well against the Bonneau et al.’s metric and compares
favorably with the 35 authentication mechanisms investigated in
the Bonneau et al. study.
6.2 Performance
Measuring the performance impact of our login scheme is a
complex task.
Issues range from the impact of the Bluetooth