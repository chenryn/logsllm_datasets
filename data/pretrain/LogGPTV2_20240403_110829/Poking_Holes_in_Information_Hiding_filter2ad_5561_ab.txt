ﬁrst time. Hence, as long as the program does not imme-
diately try to access all of the allocated virtual memory
range, little physical memory is used and execution con-
tinues normally. This allows an attacker monitoring the
program output to detect a positive side effect and verify
that the corresponding address space was successfully re-
served.
When the allocation size is larger than the amount of
available virtual memory address space, however, such
allocations will fail, typically causing the program to en-
ter error-handling logic to return a particular error code
(e.g., HTTP’s 500) to the client. This allows an attacker
monitoring the program output to detect a negative side
effect and verify that the allocation failed.
Other than monitoring program behavior for side ef-
fects, the attacker needs to fulﬁll two requirements to
craft an EAP. First, the attacker needs to ﬁnd an in-
put which induces the program to allocate a short-lived
memory object. This is, in practice, straightforward,
since most programs allocate objects as part of their
input-handling logic and release them afterwards. Sec-
ond, the attacker needs to coerce the program to use an
attacker-controlled size for the target object. While ex-
ploiting a naive program neglecting to set limits on the
resources it will reserve (for instance, on the buffer size
per client) is an option, in many cases the size of an allo-
cation is calculated based on long-lived values which are
stored in memory. As a result, an attacker in our threat
model can rely on an arbitrary memory write vulnera-
bility to corrupt one of those values and effect a memory
allocation of a chosen size to craft an EAP. An example is
an attacker able to corrupt a buff_size or similar global
variable to control the size of a target allocation instance,
a very common scenario in practice. In later sections, we
substantiate this claim with empirical evidence on real-
Figure 1: Virtual memory address space layout for a 64-
bit position-independent executable (PIE) on Linux.
4 Memory Allocation Oracles
In this section, we thoroughly discuss the mechanics of
two memory-allocation oracles, which can dramatically
reduce the entropy of ASLR for accurately locating a hid-
den region in the virtual address space. The oracles can
be realized through an ephemeral allocation primitive
(EAP) and a persistent allocation primitive (PAP), re-
spectively. Both primitives can be triggered by attacker-
controlled input, say an HTTP request in a typical web
server, and force a legitimate program path to allocate
virtual memory with attacker-controlled size. By repeat-
edly using such primitives and monitoring the behavior
of the target program (e.g., the error code in a HTTP re-
sponse message), the attacker can infer the size of holes
(unallocated space) in the virtual memory address space
and learn key properties on its layout.
Whenever an EAP is used, the reserved virtual mem-
ory is released shortly after allocation (e.g., a short-lived
per-request buffer), giving the attacker the opportunity
to probe the target program multiple times. As detailed
later, this allows an attacker to leak the size of the largest
hole in the virtual memory address space and reduce the
entropy of ASLR up to a single bit. The PAP, in turn, is
based on reserving long-lived memory (e.g., a key-value
store entry) and can be used in combination with the EAP
to counteract the last bit of entropy or, by itself, to sig-
niﬁcantly reduce the entropy of ASLR.
dent. Any dependence naturally reduces the entropy.
124  25th USENIX Security Symposium 
USENIX Association
4
holeholehiddenshared librariesexecutable[heap]hole0x0000000A[stack][vdso]holesmall holeBC0x7ﬀﬀﬀﬀﬀfworld applications and present a methodology that can
assist an attacker in the fast discovery of our primitives
(Section 5).
To craft a persistent allocation primitive (PAP), an at-
tacker can similarly abuse allocation instances and cor-
rupt allocation sizes. The only difference is that a PAP
relies on long-lived memory objects whose lifetime is
not under attacker control. For example, a server pro-
gram maintaining long-lived memory objects in a cache
(spanning across several input requests) is amenable to
a PAP, provided the attacker can control the allocation
size. Oftentimes, however, the attacker can leverage the
same primitive to obtain both an ephemeral and a per-
sistent allocation primitive. For example, the common
case of attacker-controlled allocations associated with in-
dividual client connections allow an attacker to craft ei-
ther an EAP (when using nonpersistent connections) and
a PAP (when using persistent connections) in a fully con-
trolled way.
4.2 Breaking IH using the EAP
Many modern defenses depend on information hiding
(IH) in order to protect a sensitive area which con-
tains, for example, code pointers. We now discuss how
a crafted EAP can reveal the hidden area (or hidden
object), with few or even zero program crashes [10]
and other detection-prone events [11] (hereafter, simply
“crashes”). We discuss how an attacker can hide her
traces even further (certainty of no crashes) in the next
subsection. Here, we describe a simpliﬁed attack assum-
ing that the defense randomizes the location of the hid-
den object within the largest available memory region.
This assumption is fairly often veriﬁed in practice, given
that if all holes in the address space are uniformly consid-
ered for hosting the hidden object, the largest hole (A) is,
on average, 261 times more likely to be selected than the
second largest hole. We later lift this and other assump-
tions on the address space organization in Section 4.3.
Once the hidden object is created, the hole size (A) is
split into two new hole sizes, a large (L) and a small (S)
one. 2 Assuming a random placement of a hidden object
of size H in A, the bounds of L and S are Lmin = (Amin −
H)/2, Lmax = Amax, Smin = 0, Smax = (Amax − H)/2.
Hence, the distributions for the sizes L and S overlap.
However, since in any given instance L > S and, assum-
ing the hidden object H is reasonably smaller than A, L
is now the largest hole in the address space. Hence, an
attacker can quickly identify L using EAP-based binary
search (formalized in Algorithm 1, Appendix A). In de-
tail, at each binary search iteration, the attacker performs
a single EAP invocation for a given allocation size and
2For brevity, we omit explicit discussion of the case where L = S,
which does not deviate from the common case where L > S.
observes its positive or negative side effects to select the
allocation size for the next iteration. When the search
completes, the attacker learns the largest allocation size
and thus L. There can never be any confusion while we
are performing the binary search for L as, if an allocation
cannot be satisﬁed from the larger hole, it can certainly
not be satisﬁed by the smaller one.
Since the hidden object is equally likely to have been
placed below or above the midpoint of A, there’s is a
50% chance that L is the lower hole size. In this case,
the location of the hidden object is precisely known: the
base address of the hidden object is exactly located at
vm.mmap_min_addr+L.
If L refers to the hole located higher than the hid-
den object, the uncertainty in the placement of the hid-
den object is the same as the uncertainty in the size
of A. However, we can calculate the location of the
hidden object based on the location of the mmap re-
gion. Given the interlinking of heap, stack, and code
objects [18, 6, 1, 19], an attacker armed with an arbi-
trary memory read primitive can transitively explore al-
located objects and discover the lowest memory mapped
address. For example, in a typical quiescent application
with a predictable memory layout, an attacker may sim-
ply leak __libc_start_main’s return address off the
stack and immediately locate all the other virtual mem-
ory areas (VMAs) in the mmap region. Once the lowest
memory mapped address mmap_bottom is known, the at-
tacker can again deduce the location of the hidden object:
its base address is exactly located at mmap_bottom-L.
Hence, the only uncertainty remaining is in the order-
ing of the two L- and S-sized holes, i.e., a single bit of
entropy. In other words, an attacker probing the address
space with an arbitrary memory read primitive has a 50%
chance of discovering the hidden object on the ﬁrst try
and a 100% chance if she can tolerate a single invalid
memory access. Even for nonforking server programs,
if a process eventually gets restarted (either manually or
automatically) with different randomization, the attacker
has a 75% chance of guessing the hidden object’s loca-
tion correctly after one crash, 87.5% with two crashes,
93.75% with three crashes and so on. While this attack
is already fast and stealthy with great chances of going
unnoticed in most practical settings, we show how to im-
prove it even further without a single crash in the next
subsection.
4.3 Using both the EAP and the PAP
When, in addition to the EAP, the attacker is in a posi-
tion to employ a PAP as well (as it is often the case in
practice), she can reliably break information hiding with
no application crashes. In addition, she can locate the
hidden object regardless of the original hole it was ran-
USENIX Association  
25th USENIX Security Symposium  125
5
domly placed in (lifting our original assumptions). For
simplicity, let us ﬁrst consider the case of a hidden object
placed somewhere in the middle of A, such that L and S
are the ﬁrst and second largest hole sizes in the address
space. To recover L, the attacker begins by executing the
EAP-only attack in Section 4.2. Subsequently, she can
simply use the PAP to perform a L-sized allocation and
eliminate the largest (L-sized) hole from the process’ ad-
dress space. Finally, she can repeat the same EAP+PAP
strategy on the now largest allocation size in the address
space to recover S and ﬁll the remaining (S-sized) hole.
Since A is now completely hole-free, an attacker
armed with an arbitrary memory primitive can reliably
probe for the hidden object in the two possible loca-
tions in A and eliminate the remaining uncertainty.
In
detail, if the L-sized hole was at the beginning of the
address space (and has now been ﬁlled by the PAP al-
location), a read from vm.mmap_min_addr+S will be
accessing zero-ﬁlled pages.
If the S-sized hole was at
the beginning of the address space, in turn, a read from
vm.mmap_min_addr+S will be accessing pages contain-
ing data from the hidden object. In either case, by com-
bining the EAP and the PAP, the attacker can easily dis-
close the location of the hidden object with no risk of
crashes, quickly and stealthily exhausting information
hiding’s entropy.
Let us now reconsider our original assumption. In the
general (if unlikely, for practical reasons 3) case, the hid-
den object might be placed in a hole other than A. How-
ever, this is hardly a problem for an attacker armed with
both the EAP and PAP. Such a zero-knowledge attacker
can simply start with a single iteration of the EAP+PAP
attack to ﬁll the largest hole in the address space, then
move to the second largest, and so on, until she can in-
fer enough knowledge to ﬁrst locate the hidden object’s
owning hole and then its location. For example, if the
ﬁrst largest possible hole identiﬁed is sizeof(A), the at-
tacker can learn the object is placed in either B or C. If the
second largest possible hole identiﬁed is sizeof(B), the
attacker can learn the object is placed in C. At that point,
she can perform the A-style EAP+PAP attack introduced
earlier and locate the object with no crashes.
We note that exhausting the virtual address space with
our iterative EAP+PAP attack strategy is not a concern
in real-world scenarios. First, legitimate program allo-
cations are normally satisﬁed by allocator arenas which
rarely need to be extended during steady-state opera-
tions. In addition, the location of a target hidden object
can in practice be determined without exhausting all the
available holes. For example, an attacker could infer the
location of a hidden object in A by only ﬁlling the L-sized
hole and reliably reading from vm.mmap_min_addr+L.
3Placing the hidden object between stack and heap may impose un-
expected limits on the growth of an application’s data.
4.4 Using only the PAP
When allocations have to be persistent (e.g., only the
PAP is available or the EAP has less desirable side ef-
fects), there are two main difﬁculties. First, given what
we know about the hole size distributions, there might be
multiple holes which can satisfy a request, but, without
knowing their actual sizes, we cannot always tell which
hole an allocation came from. Second, when an alloca-
tion succeeds, even if we know which hole it came from,
we learn that that hole is at least as large. Contrary to
the EAP though, we cannot retry a larger allocation size
since we cannot “undo” the allocation.
An example serves to demonstrate. Suppose we start
with the typical layout of a PIE executable (Table 1). Let
us say we attempt an allocation of 130,500GiB and the
allocation succeeds. The allocation was necessarily sat-
isﬁed from hole A. We now have a lower bound on the
size of A, yet we would like to ﬁnd out its exact size.
However, if we try to allocate a value in the range of
0-568GiB and the allocation succeeds, we cannot know
whether the space was reserved in hole A or hole B as
their size distributions now overlap.
We have designed and implemented a novel attack
strategy which signiﬁcantly reduces the uncertainty in
the sizes of the holes. Our algorithm tracks the maxi-
mum allocatable size, as well as the allocated size, for
each hole in what constitutes a state. Our approach then
relies on two insights. First, it is highly preferential to
probe using allocation sizes that can only be satisﬁed by
a single hole. Second, when forced to perform an alloca-
tion which could have been satisﬁed from more than one
hole, we need to fork and keep track of multiple states
to model each feasible conﬁguration of the holes in the
targeted address space.
Building on these insights, our algorithm follows a
cost-driven strategy to allow an attacker to select an op-
timal tradeoff between the number of allocation attempts
and the entropy reduction obtained. We quantify this
tradeoff in Section 7.5 and refer the interested reader to
Appendix B for a detailed walkthrough of the formalized
algorithm.
4.5 A more powerful EAP-only attack
Section 4.2 detailed how to locate the hidden object when
it was placed in the largest address space hole (A). We
then lifted this restriction by making use of the PAP in
Section 4.3. An alternative way of stealthily probing
for holes other than the largest one using the EAP only
(when no PAP is available), is to try and trigger more
than one EAP simultaneously. After having recovered L
(Section 4.2), the attacker can simultaneously issue an
allocation of L bytes while using a different allocation
126  25th USENIX Security Symposium 
USENIX Association
6
request to probe for S. Even if the window is small, re-
peated simultaneous requests can make the chance of a
false allocation arbitrarily small. When the program can
afford more EAPs to be issued in parallel, the attack fur-
ther improves, as the L-sized hole can be kept ﬁlled more
reliably while a binary search is running to determine S.
This approach generalizes to any number of holes.
4.6 Handling internal allocations
The attacks detailed in this section consider alloca-
tion primitives directly or indirectly based on mmap.
However, when the primitive interacts with standard
glibc allocation functions (e.g., malloc, calloc,
posix_memalign, etc.), the result is one internal allo-
cation for exceedingly large requests. Even though the
requested size clearly does not ﬁt in the largest available
hole, glibc (version 2.19) allocates a new heap arena. The
heap arena is allocated in the memory-mapped space and
it is 64MiB-aligned. Therefore, the actual size of A that
is recovered by a binary search differs from the previous
end of the memory-mapped area by a random number
which is 14 bits wide (226/212 = 214).
Nevertheless, this is not a problem in practice, as the
heap arenas form a circular, singly-linked, list. There-
fore, an attacker armed with an arbitrary memory read
primitive can navigate the links from the main alloca-
tion arena and discover all arenas in use (typically there
would only be one link to follow). The main arena is a
static variable in glibc, so it is located at a known (binary-
dependent) offset from the highest address of the mmap
space. Hence, as soon as the attacker leaks a pointer into
the mmap space, she can easily account for the newly al-
located heap arena as well.
5 Discovering Primitives
So far, in Section 4, we have discussed the mechanics of
ephemeral and persistent memory-allocation primitives,
which can assist an attacker in revealing the allocated
ranges of a process in the virtual address space. In this
section, we show that dynamic data-ﬂow tracking (DFT)
techniques applied to popular server programs can effec-
tively assist attackers in discovering allocation instances
that can potentially be abused to craft our primitives.
Discovering primitives that can result in powerful
memory-allocation oracles involves identifying memory
locations that, once controlled, can inﬂuence the input
parameters of memory-allocation functions. Recall that,
from Section 2, we assume attackers that are already in
possession of (at least) one arbitrary read and write prim-
itive. What the attacker lacks is a methodology to guide
her to apply the read/write primitives and successfully
craft EAPs and PAPs.
To model an attacker with arbitrary read/write con-
trol over memory, we start our analysis from a quies-
cent state of the program under attacker control. This
state can be also manipulated and exercised over time by
the attacker. As a simple example, consider a vulner-
able web server. Assume the attacker can send a ﬁrst
a special-crafted HTTP request to trigger an arbitrary
memory write vulnerability and gain control over mem-
ory. Next, the attacker issues a second request to invoke
a memory allocation oracle. Therefore, in this particu-