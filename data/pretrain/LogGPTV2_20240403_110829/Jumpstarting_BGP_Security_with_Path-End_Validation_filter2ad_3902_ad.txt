### Enhancing Path-End Validation and Route-Leak Mitigation

#### Introduction
These extensions, similar to path-end validation, meet the constraints outlined in Section 2 for providing a deployable and effective defense. Importantly, these enhancements do not require any modifications to BGP routers.

First, we demonstrate that, without additional deployment costs, path-end validation can be extended to validate longer path-suffixes. Next, we show how adding a single-bit field to the path-end record can mitigate certain types of "route-leakage" incidents. These extensions have been integrated into our open-source implementation, which is detailed in Section 7.

Finally, we discuss the remaining path-manipulation attack strategies available to an attacker despite these enhancements and evaluate their effectiveness.

#### 6.1 Validating Longer Path-Suffixes

We introduced path-end validation as a method to ensure the last AS-hop on a BGP path is valid. However, the adjacency list in the path-end record allows verification of any link to/from an adopting AS on a path, even if the adopter is not the origin (i.e., last) AS. For example, if both the last and next-to-last ASes on a BGP path are adopters, any other adopter can validate the 2-AS-hops suffix by examining the path-records of these two ASes. Generally, if the last k ASes on a BGP path publish path-end records, all adopters can validate the last k AS-hops on that path.

Revisiting the deployment scenario in Figure 1, if AS 2 launches a 2-hop attack against AS 1 by advertising the false route 2-300-1, this attack will be detected because AS 300 is an adopter and AS 2 is not one of its valid neighbors. Instead, AS 2 might exploit AS 1's only legacy neighbor, AS 40, and announce the route 2-40-1 to avoid detection. As adoption increases, the attacker's options become increasingly limited. Specifically, when AS 40 also adopts, AS 1 will be protected from 2-hop attacks.

In Section 7, we describe how to enforce path-end validation rules without changes to current router configuration interfaces. We show that filtering BGP paths with invalid links has the same complexity as enforcing filters only for the last AS-hop on the path. Thus, extending path-end validation to validate longer path-suffixes comes at no extra cost.

However, our results in Section 4 indicate that k-hop attacks, for k > 1, are not very effective. While validating path-suffixes longer than the 1-AS-hop can help reduce the effectiveness of attacks in specific scenarios, it does not, on average, significantly improve over path-end validation, even if ubiquitously adopted.

#### 6.2 Mitigating Route-Leaks

Route leakage occurs when an AS propagates a BGP path advertisement in a manner that violates its own path-export policy, such as announcing a BGP path from one provider to another. This can result from a misconfiguration or an attack leveraging a compromised BGP router. Route leaks can bypass even full deployment of powerful BGP security mechanisms, such as BGPsec, and are a significant security vulnerability, as evidenced by recent incidents [3, 4, 28].

Over 85% of ASes on the Internet are stubs, meaning they have no AS customers and do not provide transit services. RPKI can be extended to protect against route-leak attacks by stubs. Specifically, path-end validation can be extended to allow a stub to specify that its AS number should only appear at the end of a BGP path. A Boolean flag is added to path-end records to indicate whether the origin provides transit traffic or should only appear at the end of the route. This ensures that in the event of a route-leak from a stub adopter, all other adopters will not fall victim to the attack.

Consider the network in Figure 1. If AS 1's router is compromised and propagates a BGP advertisement received from its provider AS 40 to its other provider AS 300, the new "non-transit indicator" flag allows AS 300 to discard this BGP advertisement, preventing further dissemination into the network.

This can be viewed as a non-local analogue of defensive filtering, where ISPs police the BGP advertisements of their stub AS customers. To measure the effectiveness of this extension, we use the simulation framework in Section 4, evaluating the defense under two scenarios: when the victim is a randomly chosen AS and when the victim is a large content provider. The route leaker in both cases is a multi-homed stub AS that advertises a BGP path it learns to the victim to all of its neighbors, excluding the one it obtained the route from, in a manner that violates the Gao-Rexford export condition.

Figure 10 shows our results for both general and content provider cases. We observe that since the leaked route must contain at least two hops, route leakage typically has a lower success rate than route-manipulation attacks unless those attacks are prevented by a defense mechanism. Our extension allows mitigating the route-leakage threat, halving its effect with just 10 adopters and eventually reaching a 0.5% success rate when the top 100 ISPs adopt.

#### 6.3 Remaining Attack Vectors

We have discussed two extensions to RPKI designed to prevent path-manipulation attacks beyond next-AS attacks. We now investigate which attacks are not eliminated by path-end validation and these extensions, even when fully deployed. Understanding how to completely eliminate such attacks in a deployable manner remains an open question.

**Advertising Existent, Yet Unavailable Paths:** The first extension, when ubiquitously adopted, prevents an attacker from advertising a nonexistent path without being detected. However, it does not prevent the attacker from advertising an existent path, even if that path was never advertised to it by a neighboring AS. Unless the attacker is directly connected to the victim, such an attack involves announcing a path of length at least 2, which, as shown in Section 4, is not very effective.

**Colluding Attackers:** Our threat model does not consider the possibility of multiple attackers colluding. An attacker AS a1 can approve a colluding attacker AS a2 as a neighbor in its path-end record, enabling a2 to advertise the AS-path (a2, a1, v) to a victim v that neighbors AS A. This attack also results in a path of length 2 or more, making it less harmful on average than next-AS attacks.

**Route Leaks by ISPs:** Our second extension prevents route leakage from stubs but does not prevent route leaks by ISPs. Unless the route leaker is the direct neighbor of the victim, this attack is no more effective than a 2-hop attack.

**Data-Plane Attacks:** Similar to BGPsec and other proposals for securing the BGP control plane, path-end validation does not prevent data-plane attacks, where a malicious or faulty router advertises a legitimate BGP path but forwards data traffic in a manner incompatible with the path.

#### 7. Prototype Implementation

We present a prototype implementation that complements RPKI and allows deploying path-end validation with today’s routing infrastructure. This prototype serves as an immediate defense against path-manipulation attacks before path-end validation is integrated into RPKI. Our implementation is open-source and available at https://github.com/yossigi/pathend.

##### 7.1 Implementation Details

Our implementation uses path-end records, where an origin AS holding an RPKI certificate specifies a list of approved neighboring ASes and whether it provides transit services. The ASN.1 syntax for the record format is:

```asn.1
PathEndRecord ::= SEQUENCE {
    timestamp Time,
    origin ASID,
    adjList SEQUENCE (SIZE(1..MAX)) OF ASID,
    transit_flag BOOLEAN
}
```

Path-end records are stored in public repositories, similar to RPKI’s publication points. We envision that the repositories for both mechanisms may be co-located to avoid establishing additional services. For supporting path-end validation on today’s Internet, we implement the system’s repositories. When a repository receives an AS’s path-end record to store (via HTTP POST), along with a signature from the origin AS, it verifies the signature using the AS’s RPKI certificate and validates the timestamp. An AS can update or delete its path-end records using a signed announcement sent to the repositories, similar to ROAs in RPKI.

Since BGP routers do not yet accept path-end records, we implement an "agent application" that periodically updates from the repositories and configures BGP routers in the adopter’s network with path-end-filtering policies. To avoid trusting the path-end record repository, the agent retrieves the corresponding record signature and verifies it using RPKI certificates. The agent supports both automated and manual modes for configuring BGP routers.

##### 7.2 Deploying Path-End Filtering Rules

We describe how the agent configures filtering rules for BGP advertisements on today’s routers. For each AS, the agent deploys at most two filtering rules, resulting in less than a fifth of the rules required for origin authentication with RPKI. This makes path-end validation scalable to support the entire set of ASes.

If path-end validation were fully integrated into RPKI, it could piggyback on RPKI’s existing filtering mechanism, extending origin authentication policies to support last-hop validation without adding to the number of filtering rules.

To illustrate the filtering rules, we use the network described in Figure 1 and present the routing policy for protecting AS1, whose adjacent ASes are 40 and 300. The following Cisco IOS command-line interface commands create an access list (named as1) to blacklist routes containing invalid links to AS1 from non-adjacent ASes and, if AS1 is a stub, routes where AS1 is an intermediate hop:

```plaintext
// disallow any AS but 40 or 300 to
// advertise a link to AS1
ip as-path access-list as1 deny _[^(40|300)]_1_

// if AS1 is a stub, deny routes where
// AS1 is an intermediate hop
ip as-path access-list as1 deny _1_[0-9]+_
```

The agent creates another access list (named allow-all) to allow all other routes. This access list is global and created once.