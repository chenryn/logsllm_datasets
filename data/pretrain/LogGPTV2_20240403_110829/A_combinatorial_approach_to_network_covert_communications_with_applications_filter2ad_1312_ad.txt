i
b
a
b
o
r
P
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0
1
2
WIDE Trace
(R,m,n) scheme
FCQAN scheme
5
6
7
8 9 1010
3
4
Correspondency K
Fig. 8: Distribution of χK for normal traces and ACKLeaks.
Alterable n (FCQAN), to let ACKLeaks mimic the normal
distribution of correspondency. FCQAN is motivated by two
observations: P(R,m,n)(1) is determined by the number of
carriers (i.e., I), and different ns produce different χn+1s.
FCQAN takes a two-step approach to make ACKLeaks’s
correspondency similar to that in the normal trace. In the ﬁrst
step, FCQAN ﬁxes I such that P(R,m,n)(1) is close to P (1).
In the second step, before generating a delimiter, the algorithm
computes n, such that P(R,m,n)(K) approximates P (K) for
K > 1. More precisely, we ﬁrst calculate P (K), K > 1,
and its CDF, and then generate a random value v ∈ [0, 1]. If
i=2 P (i) ≤ v < PK+1
PK
Figure 8 shows the correspondency distributions for the
(R, m, n) coding scheme, FCQAN, and normal HTTP trafﬁc
obtained from the WIDE data set [35]. The WIDE data set
contains all trafﬁc going through its sample point-F from
30 March 2009 to 2 April 2009, and the size of packet
header traces is around 433 GB. The ACKLeaks channel uses
R = 10, m = 1, and method x. As shown, the correspondency
distributions for FCQAN and the normal
traces are very
similar. However, the (R, m, n) scheme’s distribution deviates
signiﬁcantly from the other two, as already explained before.
i=2 P (i), we set n = K.
V. PERFORMANCE EVALUATION
We implement WebLeaks and ACKLeaks in C language on
Ubuntu (Kernel v2.6.28) and evaluate their performance and
camouﬂage capability through Planeload. The performance
is measured in terms of goodput (i.e., the average rate of
information leak in bits/second). To evaluate their camouﬂage
capability, we apply the state-of-the-art detection schemes to
WebLeaks and ACKLeaks.
A. Implementation
To ease the evaluation, we implement the decoder as a web
proxy. On the HTTP layer, the encoder constructs appropriate
HTTP requests for selected URLs. On the TCP layer, the
encoder establishes the required number of TCP connections
to the decoder and sends HTTP requests through different
TCP connections. We use the same R in both HTTP and TCP
layers, because all URLs can be regarded as coming from the
same server. Note that the decoder can be a passive sniffer,
instead of a web proxy, placed at any location to monitor the
HTTP requests. For the ease of explanation, we use a method
pair (a, b) to refer that WebLeaks uses method a on the HTTP
layer and method b on the TCP layer.
ACKLeaks uses libpcap to capture all incoming data
packets and stores their sequence numbers, acknowledgement
numbers, and packet lengths in a linked list. Based on this
list and the selected method, ACKLeaks knows which data
packets should be acknowledged and records the verdict in
the corresponding linked nodes. The encoder uses iptables
to drop unnecessary ACK packets and employs raw socket to
generate new ACK packets if necessary. Moreover, ACKLeaks
incorporates both single-ﬂow and multi-ﬂow schemes to apply
the combinatorial framework.
B. Performance
We install the WebLeaks and ACKLeaks encoders in our
campus network and their decoders in six Planeload nodes in
different geographical locations as listed in Table II.
TABLE II: The Planeload nodes used in our experiments.
Planeload nodes
RTT
Planeload nodes
RTT
137.189.98.30 (HK)
3.91 ms
203.178.143.10 (JAP)
56.72 ms
130.194.252.9 (AU)
119.4 ms
143.215.131.197 (US)
221.8 ms
142.150.238.12 (CA)
247.4 ms
193.55.112.41 (FR)
256.5 ms
Figure 9 shows WebLeaks’s goodput under different set-
tings. We observe that the goodput increases with R and
decreases with RTT. This result is in accordance with the
analysis in Table I. Speciﬁcally, Figure 9(a) shows that the
goodputs for all evaluated method pairs increase with R on
the path to the Planeload node in Hong Kong; Figure 9(b) il-
lustrates the same trend on the paths to other Planeload nodes.
Moreover, using methods with distinguishable or sequence
detectable carriers or riders increases the goodput. As shown
in Figure 9(a), method pair (, |) produces higher goodput
than other method pairs. In our evaluation, WebLeaks achieves
the highest goodput (i.e., more than 100 Kbps) on the path to
Hong Kong with R = 50 and method pair (, |).
We evaluate both single-ﬂow and multi-ﬂow schemes for
ACKLeaks. For comparison purpose, we also include a basic
non-combinatorial coding scheme that embeds covert mes-
sages into the number of consecutive ACKs and uses un-
acknowledged TCP data packets as delimiters. Figure 10(a)
shows the goodputs of single-ﬂow ACKLeaks, multi-ﬂow
ACKLeaks, and the basic coding scheme. Although single-
ﬂow ACKLeaks with method x has least goodput comparing
to the other ACKLeaks, its goodput is still higher than that
of the basic scheme. Besides, Figure 10(a) shows that method
{ with distinguishable carriers obtains a better goodput than
method x. This result is expected according to our theoretical
analysis. Moreover, for the same method {, the multi-ﬂow
scheme can further improve the goodput, because the pure
ACKs are dispatched to multiple TCP connections in parallel,
thus reducing the time for sending a covert message.
Unlike WebLeaks, Figure 10 shows that ACKLeaks’ good-
put decreases with larger R, because the R-shift algorithm
described in Section IV introduces a longer delay as R
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:32:51 UTC from IEEE Xplore.  Restrictions apply. 
4826
10
5
10
)
d
n
o
c
e
S
/
s
t
i
B
Method  1 + 5
Method  2 + 5
Method  3 + 5
Method  4 + 5
Method  5 + 5
Method  6 + 5
Method  7 + 5
Method  8 + 5
Method  9 + 5
4
10
(
t
u
p
d
o
o
G
6
10
5
10
4
10
)
d
n
o
c
e
S
/
s
t
i
B
3
10
(
t
2
10
u
p
d
o
o
G
1
10
0
HongKong
Japan
Australia
America
Canada
France
3
10
5
0
15
10
55
(a) The goodput of WebLeaks using the nine methods on HTTP
layer and method | on TCP layer on the path to the Planeload
node in Hong Kong.
45
50
20
25
30
35
40
R
5
10
55
(b) The goodput of WebLeaks using method  on HTTP layer
and | on TCP layer on paths to Planeload nodes.
15
20
25
30
35
40
45
50
R
Fig. 9: The goodput of WebLeaks.
250
200
150
100
50
)
d
n
o
c
e
S
/
s
t
i
B
(
t
u
p
d
o
o
G
Basic scheme in single flow
Method  1  in single flow
Method  4  in single flow
Method  4  in multiple flow
0
0
5
15
25
R
35
45
55
150
)
d
n
o
c
e
S
/
s
t
i
B
(
t
u
p
d
o
o
G
100
50
0
0
HongKong
Japan
Australia
Canada
America
France
5
15
25
R
35
45
55
(a) The goodput of ACKLeaks under different settings on the
path to the Planeload node in Hong Kong.
(b) The goodput of ACKLeaks using method { on different
paths.
Fig. 10: The goodput of ACKLeaks.
increases. Moreover, the goodput decreases with longer RTT
because of the inﬂated waiting time for ACKLeaks to observe
new TCP data packets from the sender.
C. Camouﬂage capability
Since WebLeaks and ACKLeaks do not change any packet
content, they can evade those content-based detection methods
[15], [28], [36]. In Section III, we discuss how WebLeaks
can evade the detection based on the number of visits to
certain URLs and the transition patten of visiting URLs. In
Section IV, we show that ACKLeaks can evade the detection
based on the correspondency between TCP data packets and
TCP ACK packets. To further evaluate WebLeaks’s and ACK-
Leaks’s camouﬂage capability, we apply the state-of-the-art
timing-based detection methods to their traces. The experiment
results show that WebLeaks can also evade all these detection
methods designed for HTTP-based covert channels [15], [28]
and for TCP/IP packets [8], [17], [18].
The experiment result shows that WebLeaks can evade
the Web Tap system that detects covert channels in HTTP
trafﬁc [15]. Web Tap employs ﬁve ﬁlters: single request size,
request time-of-day, request regularity, bandwidth limit, and
delay time. Since WebLeaks can easily adjust its trafﬁc to