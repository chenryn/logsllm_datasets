function MaulΠ
ciph : C × {0,1}∗ → C ∪ {⊥} takes as
input a ciphertext and a malleation instruction string. It
outputs a ciphertext or the distinguished error symbol ⊥.
plain : M×{0,1}∗ → ˆM, on input a
The function MaulΠ
plaintext and a malleation instruction string, outputs a
1826    29th USENIX Security Symposium
USENIX Association
set ˆM ⊆ M ∪ {⊥} of possible plaintexts (augmented
with the decryption error symbol ⊥). The structure of the
malleation string is entirely deﬁned by these functions;
since our attack algorithms will reason over the functions
themselves, we treat S itself as an opaque value.
We say that (MaulΠ
plain) describes the malleabil-
ity features of Π if malleation of a ciphertext always
induces the expected effect on a plaintext following
encryption, malleation and decryption. More formally,
∀K ∈ KeyGen(1λ),∀C ∈ C,∀S ∈ {0,1}∗ the following
relation must hold whenever MaulΠ
ciph(C,S)) ∈ MaulΠ
DecryptK(MaulΠ
In §4.2.1 we discuss a collection of encryption schemes
and implementing their associated malleation functions.
ciph, MaulΠ
ciph(C,S) (cid:54)= ⊥:
plain(DecryptK(C),S)
2.2 Theory Solvers and Model Counting
Solvers take as input a system of constraints over a set
of variables, and attempt to derive (or rule out the ex-
istence of) a satisfying solution. Modern SAT solvers
generally rely on two main families of theorem solver:
DPLL [28, 29] and Stochastic Local Search [39]. Sat-
isﬁability Modulo Theories (SMT) solvers expand the
language of SAT to include predicates in ﬁrst-order logic,
enabling the use of several theory solvers ranging from
string logic to integer logic. Our prototype implementa-
tion uses a quantiﬁer-free bitvector (QFBV) theory solver.
In practice, this is implemented using SMT with a SAT
solver as a back-end.5 For the purposes of describing our
algorithms, we specify a query to the solver by the sub-
routine SATSolve{(A1, . . . ,AN) : G} where A1, . . . ,AN
each represent abstract bitvectors of some deﬁned length,
and G is a constraint formula over these variables. The
response from this call provides one of three possible
results: (1) sat, as well as a concrete satisfying solution
(A1 . . . ,AN), (2) the distinguished response unsat, or (3)
the error unknown.
Model counting and Max#SAT. While SAT deter-
mines the existence of a single satisfying assign-
ment, a more general variant of the problem, #SAT,
determines the number of satisfying assignments. In
the literature this problem is known as model count-
ing [11, 14, 20, 24, 37, 63, 70, 75].
In this work we make use of a speciﬁc optimization
variant of the model count problem, which was formu-
lated as Max#SAT by Fremont et al. [35]. In a streamlined
form, the problem can deﬁned as follows: given a boolean
5In principle our attacks can be extended to other theories, with
some additional work that we describe later in this section.
formula φ(X,Y ) over abstract bitvectors X and Y , ﬁnd
a concrete assignment to X that maximizes the number
of possible satisfying assignments to Y .6 We will make
use of this abstraction in our attacks, with realizations
discussed in §3.2. Speciﬁcally, we deﬁne our main attack
algorithm in terms of a generic Max#SAT oracle that has
the following interface:
Max#SAT(φ,X,Y ) → X
2.3 Format Checking Functions
Our attacks assume a decryption oracle that, on input a
ciphertext C, computes and returns F(DecryptK(C)). We
refer to the function F : M ∪ {⊥} → {0,1} as a format
checking function. Our techniques place two minimum
requirements on this function: (1) the function F must
be efﬁciently-computable, and (2) the user must supply
a machine-readable implementation of F, expressed as a
constraint formula that a theory solver can reason over.
Function descriptions. Requiring format checking func-
tions to be usable within SAT/SMT solvers raises addi-
tional implementation considerations. Refer to the full
version of this paper [15] for discussion of these consid-
erations, and to the artifact accompanying this work for
implemented examples.
3 Constructions
In this section we present a high-level description of our
main contribution: a set of algorithms for programmati-
cally conducting a format oracle attack. First, we provide
pseudocode for our main attack algorithm, which uses a
generic Max#SAT oracle as its key ingredient. This ﬁrst al-
gorithm can be realized approximately using techniques
such as the MaxCount algorithm of Fremont et al. [35],
although this realization will come at a signiﬁcant cost
to practical performance. To reduce this cost and make
our attacks practical, we next describe a concrete replace-
ment algorithm that can be used in place of a Max#SAT
solver. The combination of these algorithms forms the
basis for our tool Delphinium.
3.1 Main Algorithm
Algorithm 1 presents our main attack algorithm, which
we name DeriveAttack. This algorithm is parameterized
6The formulation of Fremont et al. [35] includes an additional set
of boolean variables Z that must also be satisﬁed, but is not part of the
optimization problem. We omit this term because it is not used by our
algorithms. Note as well that, unlike Fremont et al., our algorithms are
not concerned with the actual count of solutions for Y .
USENIX Association
29th USENIX Security Symposium    1827
by three subroutines: (1) a subroutine for solving the
Max#SAT problem, (2) an implementation of the cipher-
text malleation function Maulciph, and (3) a decryption
oracle Odec. The algorithm takes as input a target cipher-
text C∗, constraint formulae for the functions Maulplain, F,
and an (optional) initial constraint system G0 that deﬁnes
known constraints on M∗.
This algorithm largely follows the intuition described
in §1.1. At each iteration, it derives a concrete malleation
string S using the Max#SAT oracle in order to ﬁnd an
assignment that maximizes the number of solutions to
the abstract bitvector M0(cid:107)M1. It then mauls C∗ using
this malleation string, and queries the decryption oracle
Odec on the result. It terminates by outputting a (possi-
bly incomplete) description of M∗. This ﬁnal output is
determined by a helper subroutine SolveForPlaintext that
uses the solver to ﬁnd a unique solution for M∗ given a
constraint formula, or else to produce a human-readable
description of the resulting model.7
Theorem 3.1 Given an exact Max#SAT oracle, Algo-
rithm 1 maximizes in expectation the number of candidate
plaintext messages ruled out at each iteration.
A proof of Theorem 3.1 appears in the full version of this
paper [15].
Remarks. Note that a greedy adaptive attack may not be
globally optimal. It is hypothetically possible to modify
the algorithm, allowing it to reason over multiple oracle
queries simultaneously (in fact, Phan et al. discuss such
a generalization in their side channel work [58]). We ﬁnd
that this is computationally infeasible in practice. Finally,
note also that our proof assumes an exact Max#SAT ora-
cle. In practice, this will likely be realized with a probably
approximately correct instantiation, causing the resulting
attack to be a probably approximately greedy attack.
3.2 Realizing the Max#SAT Oracle
Realizing Algorithm 1 in practice requires that we pro-
vide a concrete subroutine that can solve speciﬁc in-
stances of Max#SAT. We now address techniques for
approximately solving this problem.
Realization from Fremont et al. Fremont et al. [35]
propose an approximate algorithm called MaxCount that
can be used to instantiate our attack algorithms. The Max-
Count algorithm is based on repeated application of ap-
proximate counting and sampling algorithms [23, 24, 25],
which can in turn be realized using a general SAT solver.
7Our concrete implementation in §4 uses the solver to enumerate
each of the known and unknown bits of M∗.
While MaxCount is approximate, it can be tuned to pro-
vide a high degree of accuracy that is likely to be effective
for our attacks. Unfortunately, the Fremont et al. solu-
tion has two signiﬁcant downsides. First, to achieve the
discussed bounds requires parameter selections which
induce infeasible queries to the underlying SAT solver.
Fremont et al. address this by implementing their algo-
rithm with substantially reduced parameters, for which
they demonstrate good empirical performance. However,
even the reduced Fremont et al. approach still requires
numerous calls to a solver. Even conducting a single ap-
proximate count of solutions to the constraint systems
in our experiments could take hours to days, and such
counts might occur several times in a single execution of
MaxCount.
A more efﬁcient realization. To improve the efﬁciency
of our implementations, we instead realize a more efﬁ-
cient optimization algorithm we name FastSample. This
algorithm can be used in place of the Max#SAT subrou-
tine calls in Algorithm 1. Our algorithm can be viewed as
being a subset of the full MaxCount algorithm of Fremont
et al.
The FastSample algorithm operates over a constraint
system φ(S,M0(cid:107)M1), and returns a concrete value S that
(heuristically) maximizes the number of solutions for the
bitvectors M0,M1. It does this by ﬁrst conjecturing some
value s, and sampling a series of 2s low-density parity
hash functions of the form H : {0,1}n → {0,1} (where
n is the maximum length of M0 or M1). It then modiﬁes
the constraint system by adding s such hash function con-
straints to each of M0,M1, and asking the solver to ﬁnd a
solution to the modiﬁed constraint system. If a solution
is found (resp. not found) for a speciﬁc s, FastSample
adjusts the size of s upwards (resp. downwards) until it
has found the maximal value of s that produces a satisfy-
ing assignment, or else is unable to ﬁnd an assignment
even at s = 0.
The goal of this approach is to identify a malleation
string S as well as the largest integer s such that at least
2s solutions can be found for each of M0,M1. To improve
the accuracy of this approach, we employ a technique
originally pioneered by Gomes et al. [37] and modify
each SAT query to include multiple trials of this form,
such that only a fraction δ+1/2 of the trials must succeed
in order for S to be considered valid. The parameters t,δ
are adjustable; we evaluate candidate values in §5.
Unlike Fremont et al. (at least, when implemented
at full parameters) our algorithm does not constitute a
sound realization of a Max#SAT solver. However, empiri-
cally we ﬁnd that our attacks using FastSample produce
query counts that are close to the optimal possible attack.
1828    29th USENIX Security Symposium
USENIX Association
More critically, our approach is capable of identifying a
candidate malleation string in seconds on the constraint
systems we encountered during our experiments.
Additional algorithms. Our algorithms employ an ab-
stract subroutine AdjustSize that is responsible for updat-
ing the conjectured set size s in our optimization loop:
(bcontinue,s(cid:48),Z(cid:48)) ← AdjustSize(bsuccess,n,s,Z)
The input bit bsuccess indicates whether or not a solu-
tion was found for a conjectured size s, while n provides
a known upper-bound. The history string Z ∈ {0,1}∗ al-
lows the routine to record state between consecutive calls.
AdjustSize outputs a bit bcontinue indicating whether the
attack should attempt to ﬁnd a new solution, as well as
an updated set size s(cid:48). If AdjustSize is called with s = ⊥,
then s(cid:48) is set to an initial set size to test, bcontinue = TRUE,
and Z(cid:48) = Z.
Finally, the subroutine ParityConstraint(n,l) constructs
l randomized parity constraints of weight k over a bitvec-
tor b = b1b2 . . .bn where k ≤ n denotes the number of
(cid:76)n
bit indices included in a parity constraint (i.e. the par-
ity constraints come from a family of functions H(b) =
i=1 bi · ai where a ∈ {0,1}n and the hamming weight
of a is k).
Algorithm 1: DeriveAttack
Input: Machine-readable description of F,
Maulplain; target ciphertext C∗; initial
constraints G0;
Output: M∗ or a model of the remaining plaintext
candidates
Procedure:
i ← 1;
do
Gi−1(M1) = 1 ∧ F(Maulplain(M0,S)) =
Deﬁne φ(S,M0(cid:107)M1) as(cid:2)Gi−1(M0) = 1 ∧
0 ∧ F(Maulplain(M1,S)) = 1(cid:3);
(cid:2)Gi−1(M)∧ (F(Maulplain(M,S)) = r)(cid:3);
S ← Max#SAT (φ, S, M0(cid:107)M1);
if S (cid:54)= ⊥ then
r ← Odec(Maulciph(C∗,S));
Deﬁne Gi(M) as
i ← i + 1;
while S (cid:54)= ⊥;
return SolveForPlaintext(Gi);
Algorithm 2: FastSample
Input: φ a constraint system over abstract
bitvectors S,M0(cid:107)M1; n the maximum
length of (each of) M0,M1; m the
maximum length of S; t number of trials; δ
fraction of trials that must succeed
Output: S ∈ {0,1}m
Procedure:
(bcontinue,s,Z) ← AdjustSize(FALSE,n,⊥,ε);
// define t symbolic copies of the
abstract bitvectors M0,M1, and a
new constraint system φt
{M1,0, . . . ,Mt,0} ← M0;
{M1,1, . . . ,Mt,1} ← M1;
Deﬁne φt (S,{M1,0, . . . ,Mt,0},{M1,1, . . . ,Mt,1}) as
φ(S,M1,0(cid:107)M1,1)∧···∧ φ(S,Mt,0(cid:107)Mt,1);
while bcontinue do
// Construct 2t s-bit parity
constraints
for i ← 1 to t do
// Query the solver
Hi,0 ← ParityConstraint (n,s);
Hi,1 ← ParityConstraint (n,s)
S ←SATSolve{(S,{M1,0, . . . ,Mt,0},{M1,1, . . . ,Mt,1}) :
(cid:100)(0.5 + δ)t(cid:101),∀ j ∈ R0 : H j,0(M j,0) = 1 ∧
(cid:100)(0.5 + δ)t(cid:101),∀ j ∈ R1 : H j,1(M j,1) = 1 ∧
∃R0 ⊆ [1,t] : |R0| ≥
∃R1 ⊆ [1,t] : |R1| ≥
φt (S,{M1,0, . . . ,Mt,0},{M1,1, . . . ,Mt,1})};
if S == unsat then
bsuccess = FALSE;