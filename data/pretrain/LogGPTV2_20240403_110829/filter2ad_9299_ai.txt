            ptpSourceR = this->_ptpSourceR;             // _ptpSourceR(CTreeDataPos(Pointer,04b152f0))
            if ( (ptpSourceR->_cElemLeftAndFlags & 8) == 0 || this->_ptpSourceL == ptpSourceR )// ？必须满足,CTreePos
                break;
            // _ptpSourceR->PreviousTreePos()
            ptpSourceR_Left = ptpSourceR->_pLeft;
            if ( (ptpSourceR->dptp.p._dwPointerAndGravityAndCling & 2) != 0 )// Cling = 0x2
                Tree::TreeWriter::Remove(ptpSourceR, &this->_pMarkupSource->_tpRoot, &this->_pMarkupSource->_ptpFirst);
            this->_ptpSourceR = ptpSourceR_Left;    // 这里对_ptpSourceR进行了修改，最终_ptpSourceR()
        }
        ...
        if ( (ptpSourceR->_cElemLeftAndFlags & 4) == 0// ptpSourceR()
            || ptpSourceR == this->_ptpSourceL
            || (hr = CSpliceTreeEngine::CSpliceAnchor::AnchorAt(&pSpliceAnchor, ptpSourceR, 1, 1), (hr1 = hr) == 0) )// ？必须满足,CTreePos
        {
            ...
            while ( 1 )
            {
                Cch = 0;
                if ( HIBYTE(v179) && (this->field_54 & 4) != 0 )// ？必须满足
                {
                    ptpSourceL_cchLeft = 1 - CTreePos::GetCp(this->_ptpSourceL);// 1-2=-1,_ptpSourceL()
                    // ptpSourceR,截断文本长度,orig_sz&0x1ffffff,CTreeDataPos中DATAPOSTEXT结构体存储文本长度的_cch成员只有25bit
                    ptpSourceR_cchLeft = CTreePos::GetCp(this->_ptpSourceR);// 0x00680004,_ptpSourceR()
                    ptpSourceR = this->_ptpSourceR;
                    ptpSourceR_to_ptpSourceL_cch2 = ptpSourceL_cchLeft + ptpSourceR_cchLeft;
                    fNotText = (ptpSourceR->_cElemLeftAndFlags & 4) == 0;// Text=0x4
                    ptpSourceR_to_ptpSourceL_cch2 = ptpSourceL_cchLeft + ptpSourceR_cchLeft;
                    if ( !fNotText )                        // 是文本数据则执行,不必须满足,CTreePos
                    {
                        TextLength = CTreeDataPos::GetTextLength(ptpSourceR);
                        ptpSourceR_to_ptpSourceL_cch2 = TextLength + ptpSourceR_to_ptpSourceL_cch2 - 1;
                    }
                    // ptpSourceR_to_ptpSourceL_cch = 0x00680004 = 1-2+0x00680005
                    // ptpSourceR_to_ptpSourceL_cch1 = 0x00680004 = 1-2+0x00680005
                    if ( ptpSourceR_to_ptpSourceL_cch > ptpSourceR_to_ptpSourceL_cch1 )// ？不满足,v192(CTreePos),v194(CTreePos)
                    {
                        ...
                    }
                    else
                    {
                        pUndoChRecord = operator new[](2 * ptpSourceR_to_ptpSourceL_cch2);// g_hProcessHeap
                        this->_pUndoChRecord = pUndoChRecord;
                        if ( pUndoChRecord )                  // ？必须满足,CSpliceTreeEngine
                        {
                            ptpSourceR = this->_ptpSourceR; // _ptpSourceR()
                            ptpSourceL = this->_ptpSourceL; // _ptpSourceL()
                            for ( ptp = ptpSourceL; ptp != ptpSourceR->_pRight; ptp = ptp->_pRight )// ？必须满足,CTreePos
                            {
                                //  ->  ->  -> CTreeDataPos(Text,04b151a0) -> 
                                ptp_cElemLeftAndFlags = ptp->_cElemLeftAndFlags;
                                if ( (ptp_cElemLeftAndFlags & 4) != 0 )// ？必须满足,CTreePos,Text=0x4
                                {
                                    // 未截断文本长度,CTreeDataPos中_pTextData成员指向的Tree::TextData类对象的_cch,使用32bit存储文本长度
                                    pText = Tree::TextData::GetText(ptp->_pTextData, 0, &TextLen);
                                    // 这里只是向堆块复制了ptpSourceR_to_ptpSourceL_cch2多个字符(宽字符)
                                    wmemcpy_s(&this->_pUndoChRecord[Cch], ptpSourceR_to_ptpSourceL_cch2 - Cch, pText, TextLen);
                                    Cch += TextLen; //下面会使用未截断的文本长度进行索引
                                }
                                // BOOL IsNode() const { return TestFlag(NodeBeg|NodeEnd); },NodeBeg=0x1,NodeEnd=0x2
                                // BOOL IsEdgeScope() const { return TestFlag(TPF_EDGE); },TPF_EDGE=0x40
                                // BOOL IsData2Pos() const { return TestFlag(TPF_DATA2_POS); },TPF_DATA2_POS=0x40
                                else if ( (ptp_cElemLeftAndFlags & 3) != 0 && (ptp_cElemLeftAndFlags & 0x40) != 0 )// ？必须满足,CTreePos
                                {
                                    this->_pUndoChRecord[Cch++] = 0xFDEF;   // Crash,写入内容无法控制,写入位置可以控制
                                }
                            }
                        }
                        else
                        {
                            ...
                        }
                    }
                }
                ...
            }
            ...
        }
        ...
    }
造成堆越界写的根本原因是，用于标识文本字符串在DOM树/DOM流中的位置的CTreeDataPos类对象中有两个结构用于记录文本字符串的长度，一个是结构体DATAPOSTEXT的_cch成员(25bit)，一个是Tree::TextData对象中的_cch成员(32bit)。由于它们的大小不同，当文本字符串的长度超过25bit能够表示的长度后，在向结构体DATAPOSTEXT的_cch成员赋值时，会造成其存储的是截断后的长度。之后调用CSpliceTreeEngine::RemoveSplice()函数删除文本字符串在DOM树/DOM流的结构时，会使用CTreePos::GetCp()函数获得要删除的DOM树/DOM流结构所占用的字符数(包含截断的文本字符串长度)，并用其申请一段内存。然后，调用Tree::TextData::GetText()函数获得Tree::TextData对象中的_cch成员中存储的未截断文本字符串长度，并用其作为索引，对前面申请的内存进行赋值操作，从而造成了堆越界写漏洞。
## 7 漏洞修复
分析此漏洞时，使用的环境是Windows 10 1809 Pro
x64。在此漏洞的MSRC公告页面，可以找到当前环境该漏洞的补丁号为KB5003646。在补丁详情页面，我们可以知道此补丁只适用于LTSC版本。当前环境，此补丁无法安装成功。所以我使用Windows
10 Enterprise LTSC 2019环境来进行补丁安装并进行补丁分析。我用的是2019年03月发布的Windows 10 Enterprise
LTSC
2019，成功安装此漏洞补丁需要先安装2021年5月11日之后发布的服务堆栈更新(SSU)，这里安装的是KB5003711，安装完之后再安装此漏洞的补丁KB5003646，就可以成功安装。
由于KB5003646补丁是2021年6月8日发布的一个累计更新，如果补丁分析时所用的两个漏洞模块文件是两个更新时间相差较大的环境提取出来的，会造成不好定位补丁位置。所以我们需要知道2021年5月发布的累计更新补丁编号。这可以通过KB5003646在Microsoft更新目录详情页面的信息得到。
以下是KB5003171和KB5003646补丁对应的mshtml.dll的版本号：
补丁编号 | mshtml.dll版本号  
---|---  
KB5003171 | 11.0.17763.1911  
KB5003646 | 11.0.17763.1999  
接下来我们将这两个补丁环境的mshtml.dll提取出来，使用IDA打开并生成IDB文件，再使用BinDiff进行补丁比较。不同的IDA版本和不同的BinDiff版本可能会出现不兼容的情况，我这里使用的是IDA
Pro7.5+BinDiff6。分析完成后，得到如下结果：
根据前面的根本原因分析，我们可以知道此漏洞是和文本字符串相关的。再来看BinDiff分析出来的结果，存在差异的函数中只有Tree::TreeWriter::NewTextPosInternal()和CTreeDataPos::GetPlainTextLength()是与文本字符串有关的。通过IDA静态分析这两个函数后，可以确定补丁位置位于Tree::TreeWriter::NewTextPosInternal()函数中。因为CTreeDataPos::GetPlainTextLength()函数中调用了Tree::TextData::GetText()函数，从之前给出的逆向出的Tree::TextData::GetText()函数代码可知，Tree::TextData::GetText()函数是从Tree::TextData对象获取文本字符串的指针和长度的。Tree::TextData对象中的_cch用于存储文本字符串的长度，它的长度为32bit。而CTreeDataPos对象中结构体DATAPOSTEXT的_cch成员也是用于存储文本字符串的长度，它的长度为25bit。如果字符串长度超过了25bit所能表示的范围，在向结构体DATAPOSTEXT的_cch成员存入字符串长度时，就会造成截断。补丁代码应该是在向结构体DATAPOSTEXT的_cch成员写入文本字符串长度时，对文本字符串的长度进行判断。所以补丁位置并不在CTreeDataPos::GetPlainTextLength()函数中。
下图为Tree::TreeWriter::NewTextPosInternal()函数中添加的补丁代码：
如下是，经过处理的补丁前后Tree::TreeWriter::NewTextPosInternal()函数的IDA反编译代码：
    //补丁前：
    void __fastcall Tree::TreeWriter::NewTextPosInternal(CTreeDataPos **ppTreeDataPos, const wchar_t *SrcTextPtr, ULONG SrcTextCch, const CTreePos *a4, enum htmlLayoutMode eHLM, BYTE sid, LONG lTextID, int a8, bool a9)
    {
      CTreeDataPos *pTreeDataPos; // ecx
      pTreeDataPos = *ppTreeDataPos;
      pTreeDataPos->_cElemLeftAndFlags = pTreeDataPos->_cElemLeftAndFlags & 0xFFFFFFF4 | 4;
      if ( a9 )
        pTreeDataPos->dptp.t._lTextID |= 0x20000000u;
      pTreeDataPos->dptp.t._sid_cch = SrcTextCch & 0x1FFFFFF | (sid dptp.t._lTextID = lTextID;
      else
        pTreeDataPos->dptp.t._lTextID = (a9 _ulRefs_Flags = pTreeDataPos->_ulRefs_Flags & 0xFFFFFFF7 | 3;
      CTreeDataPos::UpdateWhiteSpaceTypeConsideringNewText(pTreeDataPos, SrcTextPtr, SrcTextCch);
    }
    //补丁后：
    void __fastcall Tree::TreeWriter::NewTextPosInternal(CTreeDataPos **ppTreeDataPos, const wchar_t *SrcTextPtr, ULONG SrcTextCch, const CTreePos *a4, enum htmlLayoutMode eHLM, BYTE sid, LONG lTextID, int a8, bool a9)
    {
      CTreeDataPos *pTreeDataPos; // esi
      pTreeDataPos = *ppTreeDataPos;
      (*ppTreeDataPos)->_cElemLeftAndFlags = (*ppTreeDataPos)->_cElemLeftAndFlags & 0xFFFFFFF4 | 4;
      if ( a9 )
        pTreeDataPos->dptp.t._lTextID |= 0x20000000u;
      if ( (unsigned __int8)wil::Feature::__private_IsEnabled() )
        Release_Assert((int)SrcTextCch dptp.t._sid_cch = SrcTextCch & 0x1FFFFFF | (sid = 80000 )
        pTreeDataPos->dptp.t._lTextID = (a9 dptp.t._lTextID = lTextID;
      pTreeDataPos->_ulRefs_Flags = pTreeDataPos->_ulRefs_Flags & 0xFFFFFFF7 | 3;
      CTreeDataPos::UpdateWhiteSpaceTypeConsideringNewText(pTreeDataPos, SrcTextPtr, SrcTextCch);
    }
    void __fastcall Release_Assert(bool a1)
    {
      if ( !a1 )
        Abandonment::AssertionFailed();             // 断言失败
    }
    void __stdcall Abandonment::AssertionFailed()
    {
      void *retaddr; // [esp+4h] [ebp+4h]
      Abandonment::InduceAbandonment(10, retaddr, 0, 0);
      __debugbreak();
    }
    void __thiscall Abandonment::InduceAbandonment(void *this, int a2, int a3)
    {
      Abandonment::hostExceptionFilter = SetUnhandledExceptionFilter(0);
      RaiseException(0x80000003, 1u, this, 0);
    }
可以看到打了补丁后的Tree::TreeWriter::NewTextPosInternal()函数在向CTreeDataPos对象中结构体DATAPOSTEXT的_cch成员写入文本字符串长度之前，进行了一个判断。如果SrcTextCch
2、Google Threat Analysis Group - How we protect users from 0-day
attacks：
3、weolar -丢几个好东西，完整可编译的ie2、ie5.5源码，嘿嘿：
4、o_0xF2B8F2B8 - IE DOM树概览：
5、Microsoft Edge Team - Modernizing the DOM tree in Microsoft
Edge：
* * *