3、zabbix_server添加脚本配置：
mkdir -p /etc/zabbix/alertscripts/
把脚本上传到该目录
修改zabbix_server.conf配置：
AlertScriptsPath=/etc/zabbix/alertscripts/
然后重启服务
#注意：以上内容部分做过修改，路径等的修改，请阅读源博客
http://lihuipeng.blog.51cto.com/3064864/1066915
5.27 如何有效的设置监控报警
对于监控的报警信息，处理的好，将会提高我们的故障响应速度，处理的不好，会影响
我们的工作情绪，适得其反。试想，当一天收到1000封报警信息，是否还会去逐一查看监
控报警信息？是否还能分辨是否重大故障，还是一般故障？
对于误报，漏报，会让人对信息的警觉性放松，时间久了，还会导致对接收监控信息有
反感。所以，对于监控报警信息的发送，是一件特别慎重的事情。总结一下，对于监控报警
信息，我们有以下的需求：
1.基于业务类型，将报警信息发送给相应的业务用户，例如IDC人员，web运维，cdn
运维，不同的人管理不同的机器，因此需要把故障发送给相关用户处理
2.基于故障级别，对一个故障，将不同的故障级别发送给不同用户，例如5分钟内的故
障发送给运维一线人员，10分钟发送给运维部门主管，30分钟发送给运维部门经理。重特
大故障发送市场部门相关领导。
3.基于时间发送，比如业务维护期，报警无需发送。
4.故障的相关依赖关系，当A服务发生故障时，发送一般报警，当A，B服务故障时候，
发送业务故障报警。
5.对出现故障的服务尝试用相关脚本进进行操作处理，例如重启等。
5.27.1 基于业务类型
将不同的用户，分配到不同的用户组
Action里面定义不同主机组发送信息给对应的用户组
Action里面可以为不同的服务器组创建不同的action，因此就可以基于对业务类型的机器分
组进行报警信息发送
当然，用户组里面的用户需要在用户管理里面定义，此处略(用户管理内容个人觉得比较简
单，就不单独写了)
5.27.2 基于故障级别
在定义触发器的时候，有故障级别的选择
可以对不同故障分级别定义
在对用户添加报警媒体的时候，可以定义不同故障等级发送
例如触发器如下
{Template OS Linux:agent.ping.nodata(5m)}=1&{Template OS Linux:agent.ping.last(#3,5m)}=1
{Template OS Linux:agent.ping.nodata(10m)}=1&{Template OS Linux:agent.ping.last(#3,10m)}=1
{Template OS Linux:agent.ping.nodata(15m)}=1&{Template OS Linux:agent.ping.last(#3,15m)}=1
{Template OS Linux:agent.ping.nodata(30m)}=1&{Template OS Linux:agent.ping.last(#3,30m)}=1
然后将不同触发器标记为不同故障级别
基于以上2个功能，完全可以做到将不同的故障级别发送给不同的人
5.27.3 基于时间发送
时间可以为1-7,00：00-24:00 各个时间段之间用分号隔开，可以创建任意的时间段，实际情
况为根据需要而定
5.27.4 故障依赖关系
{Template OS Linux:agent.ping.nodata(5m)}=1&{Template OS Linux:agent.ping.last(#3,5m)}=1
例如以上需要2个值同时成立才会触发
5.27.5 故障处理自动远程命令
除了发送消息，还可以执行远程命令，具体方法参考官方文档
5.28 一些使用的技巧
5.28.1 监控项的使用技巧
Agend已经带大量监控项，某些监控项并没有添加到Graphs里面，需要手动添加即可
例如system.users.num，需要添加图形(如何添加Graphs参考前面章节)
5.28.2 触发器的使用技巧
默认的一些触发器由于触发值设置不合理，需要修改后才能适合自己的生产环境
例如此处{TemplateOSLinux:proc.num[,,run].last(0)}>30大于30即报警，由于服务器应用的
不同，需要将此值进行合理设置，否则会产生大量误报。
5.28.3 定义全局变量的使用技巧
5.28.4 Snmp 团组名的设置
当使用snmp作为客户端监控的时候，需要定义团组名
添加单台主机的时候，也可以定义对单台主机有效的变量
5.28.5 中文语言显示以及中文字体乱码解决方法
如何显示中文语言
如何解决将语言改为中文后乱码的问题
方法1
将
(1)exportZABBIX_WEB=/var/www/html/zabbix/
(2)wget https://www.zabbix.org/pootle/export/Zabbix-2.0/zh_CN/LC_MESSAGES/frontend.po -O
${ZABBIX_WEB}/locale/zh_CN/LC_MESSAGES/frontend.po
(3)cd${ZABBIX_WEB}/locale/&&./make_mo.sh.
(4)刷新图形，看看是否已经恢复正常
方法2.
将windows下的中文字体上传到/var/www/html/zabbix/fonts下面，替换原文件(与原文件同名)
5.29 Zabbix 的 4 种监控方式概述
Agentd
Snmp
Jmx
Ipmi
当然zabbix支持的工作方式有多种
这里先就可以配置的zabbix监控方式进行讲解，下面的图给出了这4种监控方式的逻辑图
5.30 zabbix_监控方式之一--agentd
Agentd工作方式即安装zabbix的客户端的方式进行监控，这个前面章节已经进行了讲
解
5.31 zabbix_监控方式之二---SNMP
Snmp方式前面也进行了讲解
5.32 zabbix_监控方式之四---IPMI
Ipmi监控方式
首先来了解下ipmi相关概念
Ipmi概念
智慧平台管理接口（IntelligentPlatformManagementInterface）原本是一种Intel架构的
企业系统的周边设备所采用的一种工业标准。IPMI亦是一个开放的免费标准，使用者无需
支付额外的费用即可使用此标准。
IPMI 能够横跨不同的操作系统、固件和硬件平台，可以智慧型的监视、控制和自动回
报大量服务器的运作状况，以降低服务器系统成本。
Ipmi特性
IPMI独立于操作系统外自行运作，并容许管理者即使在缺少操作系统或系统管理软件、
或受监控的系统关机但有接电源的情况下仍能远端管理系统。IPMI也能在操作系统启动后
活动，与系统管理功能一并使用时还能提供加强功能，IPMI只定义架构和接口格式成为标
准，详细实作可能会有所不同。
关于ipmi更多信息，请读者自行参考相关资料书籍，此处不再做详细讲解。
Zabbix用ipmi能做什么事情？
监控电压，温度，风扇转速，硬盘健康状态等
Zabbix的自带的ipmi模板
默认只带了2个intel的模板
关于怎么添加模块到host，前面的章节已经讲解，此处略过
命令行查看ipmi信息
# yum install OpenIPMI ipmitool
# service ipmi start
配置IPMI地址:
# ipmitool lan set 1 ipaddr 10.10.10.10
# ipmitool lan set 1 netmask 255.255.255.0
# ipmitool lan set 1 defgw ipaddr 10.10.10.1
# ipmitool lan print 1
# ipmitool lan set 1 access on
# ipmitool user set name 10 sensor
# ipmitool user set password 10 sensor
# ipmitool user enable 10
# ipmitool user priv 10 2 1
# ipmitool user list 1
ipmitool -H 10.10.10.10 -Usensor -L USER sensor list
创建模板
点击save，保存模板
点击itmes
创建新的监控项
如果结果中有Availability 字符串，则结果为 1，没有找到不为 1，即触发报警
规则
服务器端配置zabbix IPMI pollers
要支持ipmi，必须在安装编译zabbix_server 的程序的时候带上
#sed-i'/#StartIPMIPollers=0/aStartIPMIPollers=5'zabbix_server.conf
#servicezabbix-serverrestart
ipmitool常用命令
ipmitool-Ilan-H 服务器地址 -Uroot-P 密码 poweroff(硬关机，直接切断电源)
ipmitool-Ilan-H 服务器地址 -Uroot-P 密码 powersoft(软关机，即如同轻按一下开机扭)
ipmitool-Ilan-H 服务器地址 -Uroot-P 密码 poweron(硬开机)
ipmitool-Ilan-H 服务器地址 -Uroot-P 密码 powerreset(硬重启)//这个你也许经常用到.
ipmitool-Ilan-H 服务器地址 -Uroot-P 密码 powerstatus(获取当前电源状态)
由于默认的模板自带的一些key可能和服务器有些区别，所以需要自己去获取key进行监控
5.33 zabbix_监控方式之四---JMX
首先说一下架构
编译、配置 zabbix_java
源码安装的时候，加
--enable-java参数，依赖关系有java，java-devel
#yum install java java-devel zabbix-java-gateway
#
#
./configure --enable-java --prefix=/usr
make && make install
在zabbix_server上面配置
grep '=' /etc/zabbix/zabbix_java_gateway.conf
LISTEN_IP="0.0.0.0"
LISTEN_PORT=10052
PID_FILE="/var/run/zabbix/zabbix_java.pid"
START_POLLERS=50
egrep -v "(^#|^$)" /etc/zabbix/zabbix_server.conf
LogFile=/var/log/zabbix/zabbix_server.log
LogFileSize=0
PidFile=/var/run/zabbix/zabbix_server.pid
DBName=zabbix
DBUser=zabbix
DBPassword=zabbix
DBSocket=/var/lib/mysql/mysql.sock
JavaGateway=127.0.0.1
JavaGatewayPort=10052
StartJavaPollers=1
ExternalScripts=/etc/zabbix/externalscripts
客户端的 tomcat 配置
vim /usr/sbin/tomcat6
export CATALINA_OPTS="$CATALINA_OPTS -Dcom.sun.management.jmxremote"
export CATALINA_OPTS="$CATALINA_OPTS -Dcom.sun.management.jmxremote.port=10053"
export CATALINA_OPTS="$CATALINA_OPTS -Dcom.sun.management.jmxremote.authenticate=false"
export CATALINA_OPTS="$CATALINA_OPTS -Dcom.sun.management.jmxremote.ssl=false"
#service tomcat6 stop
#service tomcat6 start
检测能否取得数据
#wgethttp://crawler.archive.org/cmdline-jmxclient/cmdline-jmxclient-0.10.3.jar
#java-jar cmdline-jmxclient-0.10.3.jar- 10.10.10.10:10053java.lang:type=MemoryNonHeapMemoryUsage
Web上面对主机添加JMX监控方式
选择tomcat模板
Weblogic 的监控
首先是安装weblogic
export JAVA_OPTIONS="${JAVA_OPTIONS} -Dcom.sun.management.jmxremote"
export JAVA_OPTIONS="${JAVA_OPTIONS} -Dcom.sun.management.jmxremote.port=10053"
export JAVA_OPTIONS="${JAVA_OPTIONS} -Dcom.sun.management.jmxremote.authenticate=false"
export JAVA_OPTIONS="${JAVA_OPTIONS} -Dcom.sun.management.jmxremote.ssl=false"
启动weblogic
查看启动的过程，刚才加的参数会看到
然后去添加host，选择jmx监控方式，端口为10053
6. Zabbix 的高级使用-之自动化功能
使用zabbix的目的是让监控实现自动化，那么究竟如何才能达到自动化功能呢？首先，
zabbix提供了主机自动发现功能，当客户端安装好之后，zabbix有自动发现添加主机的功能，
其次，zabbix提供了对多变的监控项目自动发现监控，例如本身有2个网卡，新增加2个网
卡，新增的2个网卡会自动监控。基于zabbix的这2个功能，我们可以做到对服务的自动
化监控，从此告别手动添加监控项的痛苦，相信用cacti和nagios的都有添加监控到手抽筋
的经历吧。
6.1 自动发现添加主机
功能介绍：
官方文档已经给出了很详细的步骤，在此演示一下过程
https://www.zabbix.com/documentation/2.0/manual/discovery/network_discovery/rule
4.1.1 创建自动发现规则
Names：名称，可以写自己能代表服务功能的名称，便于识别
Discoveryby proxy：是否通过代理
IPrange：ip地址的范围，可以写一段地址，也可以写多段地址
Delay：检测时间周期，注意这个值默认是3600，即一个小时才能发现服务
Checks:检测命令，这里选择ICMP，zabbixagentd来检测
Device uniqueness criteria：设备唯一的名称，此处采用ip
Enabled：发现功能是否激活
6.1 创建自动添加到相应模板规则
选择Discovery,
Name 填写业务相关的Action名称
注意：Discovery rule是添加前面定义的Discovery rule项目
此处是添加从自动发现规则里面发现的主机，包含这些规则，会进行下一步的操作
这里是对上面规则的进一步添加到应用，包含上面规则的，将会自动添加到分组，并用指定
的模板。此处可以实现的功能，当我们发现主机包含某些规则后，可以用相关的分组，相关
份额模板添加监控项。
需要注意的是，选择相关选项后，需点击add后，然后才可以保存。
6.2 通过 low-level discovery 发现实现动态监控
自动化运维之监控篇---利用zabbix自动发现功能实现批量web url监控
需求：
现在有大量url需要监控，形式如http://itnihao.blog.51cto.com ，要求url状态不为200
即报警。
需求详细分析：
大量的url，且url经常变化，现在监控用的是zabbix，如果手动添加模板，会造成大量
重复工作，造成人力财力的浪费，造成休息时间的浪费，得不尝失，如果利用脚本+mail，
无法图形呈现
解决方案：
zabbix有discovery功能，利用此功能，即可轻松解决此问题
存在的文件如下
/etc/zabbix/zabbix_agentd.conf
/etc/zabbix/scripts/web_site_code_status
/etc/zabbix/scripts/WEB.txt
/etc/zabbix/zabbix_agentd.conf.d/web_site_discovery.conf
6.2.1 zabbix 客户端配置
1. #########cat /etc/zabbix/zabbix_agentd.conf|grep -v "^#"|grep -v "^$"##########
##此处省略N多信息，
Include=/etc/zabbix/zabbix_agentd.conf.d/ #配置文件路径
UnsafeUserParameters=1 #自定义key里面可以包括特殊字符
6.2.2 自动发现脚本编写
Low-leveldiscovery的脚本是一个json格式，鉴于大多数童鞋习惯使用shell，故此处采用shell
来书写，如用perl，python，则代码会更简洁
######################cat /etc/zabbix/scripts/web_site_code_status#############
#!/bin/bash
# function:monitor tcp connect status from zabbix