# 【安全报告】XShellGhost事件技术回顾报告
|
##### 译文声明
本文是翻译文章，文章来源：安全客
译文仅供参考，具体内容表达以及含义原文为准。
****
**0x00 背景介绍**
8月份，NetSarang公司（NetSarang Computer, Inc.
是一家致力于全球安全连接解决方案领域的研发的公司，产品和服务覆盖全球90多个国家。）与安全厂商卡巴斯基联合发布声明，
”在2017年7月18日发布的全线产品在内的版本，均被植入了一份后门性质的恶意代码，该后门可能可以被攻击者直接利用”。
该事件被称为“ **XShellGhost**
”事件，“XShellGhost”被定性为因入侵感染供应链厂商引发的大范围安全事件，将直接导致使用NetSarang系列软件用户成为被远程控制的受害者。
360CERT获悉此事件后对该事件展开了分析，确认NetSarang公司在2017年7月18发布的Xmanager, Xshell, Xftp,
Xlpd等产品中的 **nssock2.dll** 模块中被植入了恶意代码。
本报告是360CERT对事件中所使用的攻击技术的一个回顾和总结。
**0x01 事件概述**
8月7日，NetSarang公司发布安全公告，称其最近更新（7月18日）的Xmanager
Enterprise、Xmanager、Xshell、Xftp、Xlpd五款软件存在安全漏洞，并表示8月5日已经发布了修复版本。
随后，经安全研究人员分析发现NetSarang公司在7月18日发布的nssock2.dll模块中被植入了恶意代码，直接影响到使用该系列软件的用户。
８月16日，NetSarang公司与安全厂商卡巴斯基联合发布声明，披露了恶意代码的相关信息。NetSarang公司并未解释漏洞的成因，外部分析可能是在产品发布生命周期被攻击，导致7月18日的版本被植入后门。
****
**0x02 官方声明**
长期以来为应对层出不穷的网络攻击，NetSarang公司采取了一系列的方法和举措来强化自身产品线的安全性，避免被恶意代码感染、商业间谍组织渗入的情况发生。
遗憾的是，在2017年7月18日发布的全线产品在内的版本，均被植入了一份后门性质的恶意代码，该后门可能可以被攻击者直接利用。
我们深知，客户和用户的安全是我们公司最高的优先级和根本，更是我们的职责所在。当今世界，通过攻击商业、合法性质的软件来获利或蓄意攻击其用户的攻击团伙和组织正在日益增长是一个真切的现实问题，在这里，NetSarang会和其它计算机软件行业里的公司一样，认真的应对这一挑战。
NetSarang致力于保护用户的隐私安全，且已经整合了一套坚实的体系来保证不会再有类似的具有安全缺陷的产品被输送到用户手中。NetSarang会继续评估和改进我们的安全，这不仅仅是为了打击来自世界各处的网络间谍团伙，更是为了让公司的忠实用户能够继续信任我们。”
目前Kaspersky的产品已经支持检测名为“Backdoor.Win32.ShadowPad.a”的ShadowPad样本。
Kaspersky实验室建议用户尽快更新到NetSarang产品软件的最新版本，在最新版本中恶意代码已经被移除，此外建议检测系统是否有对应的恶意域名访问记录。相关的C2域名和后门恶意代码技术信息已经在相关的技术报告中提及。
注：更多信息可以见[参考7]
****
**0x03 事件影响面**
**1.影响面**
该事件属于重大网络安全事件，实际影响范围广。
安全预警等级：橙色预警
**2.影响版本**
根据官方安全通告，确定涉及如下版本：
**Xmanager Enterprise 5.0 Build 1232**
**Xmanager 5.0 Build 1045**
**Xshell 5.0 Build 1325**
**Xshell 5.0 Build 1322**
**Xftp 5.0 Build 1218**
**Xlpd 5.0 Build 1220**
****
**0x04 恶意代码技术细节**
**1.整体流程**
受害者在安装，启动了带有后门的客户端后，nssock2.dll模块中的攻击代码会以Shellcode形式在后台被调用解密执行。
该Shellcode分为多加密块，基于插件模型架构，各模块之间负责不同功能且协调工作、相互调用，实际分析后发现中间存在大量对抗设计，隐秘性较强，该后门还包含了如下几个特点：
**无自启动项，无独立落地文件**
**存在花指令和部分加密函数设计**
**多种通信协议的远程控制**
**主动发送受害主机基本信息**
**通过特定的DGA(域名生成算法)产生的DNS域名传送至远程命令控制服务器**
**C &C服务器可动态下发任意代码至用户机器执行**
整体流程如下图所示：
后门的整体流程大致分为以下9个步骤：
1\. Xshell启动后会加载动态链接库nssock2.dll。
2\. 在DllMain执行前由全局对象构造启动引子代码。
3\. 引子代码主要功能就是解密shellcode1并跳转到入口处执行。
4\. shellcode1(loader)加载shellcode2。
5\. shellcode2中将搜集用户信息构造DNS
TXT包传送至根据年份和月份生成的DGA域名，同时接收解密shellcode3的key并写入注册表，一旦注册表中查询到对应的值随即解密shellcode3并执行。
6\. Shellcode3(loader)主要负责加载Root模块并跳转到入口处执行。
7\. Root被加载后接着分别加载Plugin，Config，Install，Online和DNS模块。
8\. Install模块会创建svchost.exe并把Root模块注入，实现持久化运行。
9\. Online模块会根据其配置初始化网络相关资源，向指定服务地址发送信息，并等待云端动态下发代码进行下一步攻击。
**2.Shellcode1(Loader)**
该后门是基于插件模式开发的，Root模块提供了插件的基本框架，各插件之间会相互调用，而在各个插件加载时都会多次用到同一个loader，loader中的代码中加入了化指令进行干扰，具体实现细节为如下8个步骤:
1\. 获取kernel32基地址。
2\. 获取所需相关函数地址（Loadlibary、GetProcAddress、VirtualAlloc、Sleep）。
3\. 申请空间，解密数据存储到申请的空间。
4\. 修复重定位。
5\. 填写导入表。
6\. 在函数头部判断是否下了INT3断点。
7\. 加密IAT项，手法比较简单，仅是将原API地址求补。
8\. 跳向shellcode入口
**3.Shellcode2**
Shellcode2主要作用就是将搜集的数据传出，并接收服务端传来的key解密shellcode3，执行后门的核心部分，Shellcode2实现细节如下：
1\. Shellcode2首先创建工作线程。
2\. 工作线程首先获取VolumeSerialNumber值并且异或0xD592FC92 这个值用来创建注册表项。
3\. 创建注册表项，位置为HKEY_CURRENT_USERSOFTWARE-[0-9](步骤2生成的数值)。
4\. 通过RegQueryValueExA查询步骤3创建注册表中Data键的值。
5\. 如果注册表Data已经存放key会直接用key解密shellcode3并执行。
6\. 不存在key则继续执行下面的循环，当不满足时间条件时循环每隔10秒获取一次时间， 满足时间条件时进入主流程执行步骤7。