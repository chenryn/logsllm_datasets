Figure 2: USBFILTER implements a USB-layer reference
monitor within the kernel, by filtering USB packets to
different USB devices to control the communications be-
tween applications and devices based on rules config-
ured.
to enable or access authorized devices from unauthorized
processes or devices. In either case, the adversary may
attempt to exfiltrate data from the host system via both
physical and virtual USB devices.
We consider the following actions by an adversary:
• Device Tampering: The adversary may attempt
to attach or tamper with a previously-authorized
device to add unauthorized functionality (e.g.,
BadUSB [27]).
• Unauthorized Devices: Unauthorized devices at-
tached to the system either physically or virtu-
ally [21] can be used to discreetly interact with the
host system or to provide data storage for future ex-
filtration.
• Unauthorized Access: The adversary may attempt
to enable or access authorized devices on a host
(e.g., webcam, microphone, etc.) via unauthorized
software to gain access to information or function-
ality that would otherwise inaccessible.
We assume that as a kernel component, the integrity of
USBFILTER depends on the integrity of the operating sys-
tem and the host hardware (except USB devices). Code
running in the kernel space has unrestricted access to the
kernel’s memory, including our code, and we assume that
the code running in the kernel will not tamper with USB-
FILTER. We discuss how we ensure runtime and platform
integrity in our experimental setup in Section 3.4.
App1 App2 App3
I/O 
operation
usbtables
User Space
Kernel Space
netlink
Storage 
Driver
Input 
Driver
Video
Driver
URB
Host Controller
USBFILTER
USB packet
USB Devices
Rule 
DB
usbﬁlter
modules
Figure 3: The architecture of USBFILTER.
defined rule-based filtering for the USB protocol. To
achieve this, we first designed our system to satisfy the
concept of a reference monitor [2], shown in Figure 2.
While these goals are not required for full functionality
of USBFILTER, we chose to design for stronger security
guarantees to ensure that processes attempting to access
hardware USB devices directly would be unable to cir-
cumvent our system. We define the specific goals as fol-
lows:
G1 Complete Mediation. All physical or virtual USB
packets must pass through USBFILTER before deliv-
ery to the intended destination.
G2 Tamperproof. USBFILTER may not be bypassed or
disabled as long as the integrity of the operating sys-
tem is maintained.
G3 Verifiable. The user-defined rules input into the
system must be verifiably correct. These rules may
not conflict with each other.
While the above goals support the security guarantees
that we want USBFILTER to provide, we expand upon
these to provide additional functionality:
G4 Granular. Any mutable data in a USB packet
header must be accessible by a user-defined rule. If
the ultimate destination of a packet is a userspace
process, USBFILTER must permit the user to specify
the process in a rule.
G5 Modular. USBFILTER must be extensible and allow
users to provide submodules to support additional
types of analysis.
3.2 Design Goals
Inspired by the Netfilter [40] framework in the Linux
kernel, we designed USBFILTER to enable administrator-
3.3 Design and Implementation
The core USBFILTER component is statically compiled
and linked into the Linux kernel image, which hooks the
418  25th USENIX Security Symposium 
USENIX Association
4
flow of USB packets before they reach the USB host con-
troller which serves the USB device drivers, as shown in
Figure 3. Like Netfilter, this USB firewall checks a user-
defined rule database for each USB packet that passes
through it and takes the action defined in the first match-
ing rule. A user-space program, USBTABLES, provides
mediated read/write access to the rule database. Since
USBFILTER intercepts USB packets in the kernel, it can
control access to both physical and virtual devices.
3.3.1 Packet Filtering Rules
To access external USB devices, user-space applications
request I/O operations which are transformed into USB
request blocks (URBs) by the operating system. The
communication path involves the process, the device, and
the I/O request itself (USB packet). Similarly, a USBFIL-
TER rule can be described using the process information,
the device information, and the USB packet information.
A USBFILTER rule R can be expressed as a triple
(N, C ,A) where N is the name of the rule, C is a set of
conditions, and A∈{ALLOW,DROP} is the action that is
taken when all of the conditions are satisfied. As long as
the values in conditions, action, and name are valid, this
rule is valid, but may not be correct considering other ex-
isting rules. We discuss verifying the correctness of rules
in Section 4.
3.3.2 Traceback
USB packets do not carry attribution data that can be
used to determine the source or destination process of
a packet. We therefore need to perform traceback to
attribute packets to interfaces and processes.
Interfaces. As discussed in Section 2, a USB device can
have multiple interfaces, each with a discrete function-
ality served by a device driver in the operating system.
Once a driver is bound with an interface, it is able to
communicate with that interface using USB packets.
Determining the driver responsible for receiving or
sending a given USB packet is useful for precisely con-
trolling device behaviors. However, identifying the re-
sponsible driver is not possible at the packet level, since
the packets are already in transit and do not contain iden-
tifying information. While we could infer the respon-
sible driver for simple USB devices, such as a mouse,
this becomes unclear with composite USB devices with
multiple interfaces (some of which may be served by the
same driver).
To recover this important
information from USB
packets without changing each driver and extending
the packet structure, we save the interface index into
the kernel endpoint structure during USB enumeration.
This reverse mapping of interface to driver needs to be
performed only once per device. The interface index
distinguishes interfaces belonging to the same physical
device and USB packets submitted by different driver
instances. Once the mapping has been completed, the
USB host controller is able to easily trace the originating
interface back to the USB packets.
Processes. Similarly, tracking the destination or source
process responsible for a USB packet is not trivial due
to the way modern operating systems abstract device ac-
cess from applications. For example, when communi-
cating with USB storage devices, the operating system
provides several abstractions between the application and
the raw device, including a filesystem, block layer, and
I/O scheduler. Furthermore, applications generally sub-
mit asynchronous I/O requests, causing the kernel to per-
form the communications task on a separate background
thread.
This problem also appears when inspecting USB net-
work device packets, including both wireline (e.g., Eth-
ernet) dongles and wireless (e.g., WiFi) adapters. It is
common for these USB device drivers to have their own
RX/TX queues to boost the system performance using
asynchronous I/O. In these cases, USB is an intermedi-
ate layer to encapsulate IP packets into USB packets for
processing by the USB networking hardware.
These cases are problematic for USBFILTER because
a naïve traceback approach will often only identify the
kernel thread as the origin of a USB packet. To recover
the process identifier (PID) of the true origin, we must
ensure that this information persists between all layers
within the operating system before the I/O request is
transformed into a USB packet.1
USBFILTER instruments the USB networking driver
(usbnet), the USB wireless driver (rt2x00usb), the USB
storage driver (usb-storage), as well as the block layer
and I/O schedulers. Changes to the I/O schedulers are
needed to avoid the potential merging of two block re-
quests from different processes. By querying the rule
database and USBFILTER modules, USBFILTER sets up a
filter for all USB packets right before being dispatched
to the devices.
3.3.3 Userspace Control
USBTABLES manages USBFILTER rules added in the ker-
nel and saves all active rules in a database. Using udev,
saved rules are flushed into the kernel automatically upon
reboot. USBTABLES is also responsible for verifying the
correctness of rules as we will discuss in Section 4. Once
1USBFILTER does not overlap with Netfilter or any other IP packet
filtering mechanisms which work along the TCP/IP stack.
USENIX Association  
25th USENIX Security Symposium  419
5
verified, new rules will be synchronized with the kernel
and saved locally.
If no user-defined rules are present, USBFILTER en-
forces default rules that are designed to prevent impact
on normal kernel activities (e.g., USB hot-plugs). These
rules can be overridden or augmented by the user as de-
sired.
3.4 Deployment
We now demonstrate how we use existing security tech-
niques in the deployment of USBFILTER. Attestation and
MAC policy are necessary for providing complete medi-
ation and tamperproof reference monitor guarantees, but
not for the functionality of the system. The technologies
we reference in this section are illustrative examples of
how these goals can be met.
3.4.1 Platform Integrity
We deployed USBFILTER on a physical machine with a
Trusted Platform Module (TPM). The TPM provides a
root of trust that allows for a measured boot of the system
and provides the basis for remote attestations to prove
that the host machine is in a known hardware and soft-
ware configuration. The BIOS’s core root of trust for
measurement (CRTM) bootstraps a series of code mea-
surements prior to the execution of each platform com-
ponent. Once booted, the kernel then measures the code
for user-space components (e.g., provenance recorder)
before launching them using the Linux Integrity Mea-
surement Architecture (IMA)[31]. The result is then ex-
tended into TPM PCRs, which forms a verifiable chain
of trust that shows the integrity of the system via a dig-
ital signature over the measurements. A remote verifier
can use this chain to determine the current state of the
system using TPM attestation. Together with TPM, we
also use Intel’s Trusted Boot (tboot)2
3.4.2 Runtime Integrity
After booting into the USBFILTER kernel, the runtime in-
tegrity of the TCB (defined in Section 3.1) must also be
assured. To protect the runtime integrity of the kernel,
we deploy a Mandatory Access Control (MAC) policy,
as implemented by Linux Security Modules. We enable
SELinux’s MLS policy, the security of which was for-
mally modeled by Hicks et al. [20]. We also ensure that
USBTABLES executes in a restricted environment and
that the access to the rules database saved on the disk
is protected by defining an SELinux Policy Module and
compiling it into the SELinux Policy.
4 Security
In this section, we demonstrate that USBFILTER meets
the security goals outlined in Section 3 using the deploy-
ment and configurations described in that section.
Complete Mediation (G1). As we previously discussed,
USBFILTER must mediate all USB packets between de-
vices and applications on the host.
In order to ensure
this, we have instrumented USBFILTER into the USB host
controller, which is the last hop for USB packets before
leaving the host machine and the first when entering it.
Devices cannot initiate USB packet transmission without
permission from the controller.
We also instrument the virtual USB host controller
(vhci) to cover virtual USB devices (e.g., USB/IP). To
support other non-traditional USB host controllers such
as Wireless USB [19] and Media Agnostic USB [16],
USBFILTER support is easily added via a simple kernel
API call and the inclusion of a header file.
Tamperproof (G2).
USBFILTER is statically com-
piled and linked into the kernel image to avoid being
unloaded as a kernel module. The integrity of this
runtime, the associated database, and user-space tools
is assured through the SELinux policy as described in
Section 3.4.2. Tampering with the kernel or booting a
different kernel is the only way to bypass USBFILTER,
and platform integrity measures provide detection
capabilities for this scenario (Section 3.4.1).
Formal Verification (G3). The formal verification of
USBFILTER rules is implemented as a logic engine within
USBTABLES using GNU Prolog [11]. Instead of trying to
prove that an abstract model of rule semantics is correctly
implemented by the code, which is usually intractable for
the Linux kernel, we limit our focus on rule correctness
and consistency checking. Each time USBTABLES is in-
voked to add a new rule, the new rule and the existing
rules are loaded into the logic engine for formal verifica-
tion. This process only needs to be performed once when
adding a new rule and USBFILTER continues to run while
the verification takes place.
The verification checks for rules with the same con-
ditions but different actions. These rules are consid-
ered conflicting and USBTABLES will terminate with er-
ror when this occurs. We define the correctness of a rule:
is_correct(R,R) ←
is_name_unique(R)∧
are_condition_values_in_range(R)∧
has_no_con f lict_with_existing_rules(R,R).
2 See http://sf.net/projects/tboot
where R is a new USBFILTER rule and R for all other
420  25th USENIX Security Symposium 
USENIX Association
6
existing rules maintained by USBFILTER. If the new rule
has a unique name, all the values of conditions are in
range, and it does not conflict with any existing rules, the
rule is correct.
While the name and the value checks are straightfor-
ward, there are different conflicting cases between the
conditions and the action, particularly when a rule does
not contain all conditions. For example, a rule can be
contradictory with, a sub rule of, or the same as another
existing rule. As such, we define the general conflict be-
tween two rules as follows:
general_con f lict(Ra,Rb) ←
∀Ci (cid:29) C :
(∃Ca
(∃Ca
((cid:26) ∃Ca
i (cid:29) Ra ∧∃Cb
i (cid:29) Ra∧ (cid:26) ∃Cb
i (cid:29) Ra∧ (cid:26) ∃Cb
i (cid:29) Rb ∧ value(Ca
i (cid:29) Rb)∨
i (cid:29) Rb).
i ) (cid:26)= value(Cb
i ))∨
A rule Ra is generally conflicted with another rule Rb if
all conditions used by Ra are a subset of the ones spec-
ified in Rb. We consider a general conﬂict to occur if
the new rule and an existing rule would fire on the same
packet.
Based on the general conflict, we define weak conﬂict
and strong conﬂict as follows:
weak_con f lict(Ra,Rb) ←
general_con f lict(Ra,Rb)∧ action(Ra) =action(R b).
strong_con f lict(Ra,Rb) ←
general_con f lict(Ra,Rb)∧ action(Ra) (cid:26)= action(Rb).
While weak conflict shows that the new rule could be
a duplicate of an existing rule, strong conflict presents
that this new rule would not work. The weak conflict,
however, depending on the requirement and the imple-
mentation, may be allowed temporarily to shrink the
scope of an existing rule while avoiding the time gap
between the old rule removed and the new rule added.