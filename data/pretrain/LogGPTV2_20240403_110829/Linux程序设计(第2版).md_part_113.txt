²one*,*two*):@half2=（*three*,*four*}:
列表允许出现在赋值语句等号的左边，而且这是Perl语言一个很有用的操作。如下所示：
Sfirst, Slast) =(*alpha*,“*247305*
*Sara*=>*226010′):
哈希表的创建过程和列表相同，但要使用“=>”操作符（它在许多情况里与一个逗号的作
用差不多）来分隔键字-键值对。我们现在来取出其中的一项，如下所示：
print “Sara’s phone number is *, Sphonebook(*Sara*),*\n* /
因为这次想要的还是一个标量，所以我们使用了“S”符号。为了更清楚地表示我们想要找
的东西，要使用花括号而不是方括号；另外，从第二行可以看出并不是必须给键字加上引号。
但需要提醒大家注意的是：哈希表的键字就像变量名一样是分大小写的，也就是说：
Sphonebook(Bob)等同于Sphonebook{“Bob")，但与Sphonebook{bob)不是一回事。讲到这里，
对哈希表中的某个数据项进行修改的操作就不难理解了：
Sphonebook(Bob)=*293026
print *aob’s new number is *, $phonebook(Bob), *\n′;
加入jaVa编程群：524621833
---
## Page 606
588
Linux程序设计
4.引号和替换
类似于shell脚本程序中的情况，放在双引号字符串里的变量如果没有用反斜线字符进行转
义，就会被替换。我们现在把电话号码本例子重新改写为：
phonebook -[“Bob*>*247305*
}
这里使用了三次“$”变量，一次用来从标准输人读人一行文本（“”读行操作符处，我
们稍后再做介绍一现在只要知道它是什么就行了）、一次用来作为print函数的参数，还有-次
））
对一个老练的Perl程序员来说，这类代码用起来很顺手，但新手可能就不知所云了。除非语句的
意思很明显，否则不要在你自己的代码里轻易省略“S_”变量。
另外一个重要的特殊变量是@ARGV数组，它包含若用户应用程序的参数。但它不像C语言
那样能够通过argv[O]获得应用程序的名字（脚本程序名在Perl里被保存在“S0”变量里）；数组
元素SARGV[O]将是程序的第一个参数。
最后，哈希表变量%ENV允许你查看和改变环境变量，就像你在shel1程序设计中那样。如下
所示：
print sSENv(PATH): + /usr/local/bin:/usr/bin...
SENV(EDrroR) *emacs*: change to emacs for the rest of the pzogram.
18.1.3操作符和函数
在Per语言里，操作符和函数的区别并不是很明显，有些你认为是函数的东西其实是操作符，
加入java编程群：524621833
---
## Page 607
第18章Perl程序设计语言589
面有些你认为是操作符的东西其实是函数。因为这个原因，我们在这里也不对这两者做细致的
区分。我们不加区别地使用“函数”和“操作符”来进行讨论。
1.数值运算符
我们对数字都可以进行哪些操作？先猜四个：+（加）、-（减）、*（乘）、（除），没错，
它们的工作情况和你想象的一样，并且可以按常见情况与括号联合使用。它们的优先规则与C语
言里也完全一样。
Sa =(4*5)3: 23
5c =1/4*4; #4.25
$b = 1/(4+41:0.125
我们还可以使用一个余数操作符（也叫做求余操作符）“%”。但使用这个操作符时一定要保
证是在对正数进行操作；如果你使用的是“Sa%-Sb”，结果将是“（Sa%Sb)·Sa"，而这可能就
不是你想要的结果了。另外还有一个乘方操作符“**”。请看下面的例子：
$a -17  5;17into 5_goes 3 tines remainder 2.so $a = 2
Sd : 2 * 8; # 2raised to the 8 io 256
对变量来说，可以进行前缓或后缀方式的递增递减运算（但这些前后缀操作符对字符串的
意义是不同的），具体做法和效果类似于C语言。如下所示：
Sc  ++$a + Sb;  $c is 6+7 = 13
5a + 5; $b = 7;
然后是一些科学计算函数，比如三角学方面的sin和cos、平方根sqrt和自然对数log等函数。
科学计算函数可以在perlop和perlfunc使用手册页里查到。
2.字符串操作符
我们对字符串最经常进行的操作是合并它们，这个工作是用句点操作符（.）实现的。数字
和字符串之间的自动转换会照常进行，请看下面的例子：
Safoo. *bar.*baz: Glves ustoobarbaz
.z.I=es
"number
1：
# Gives *12*
Gives
nunber 1*
有时候需要某个字符串重复出现。这是用操作符“x”实现的，请看：
Sa **ba*, (*na*x4):#*banananana*
Sa=1x 3:111
另外一个常见的字符串操作是删除最后一个字符。chop函数可以用来副除最后一个字符，
不管它是什么：chomp更精细一些，它的作用是从字符串的尾部删除输人记录之间的分隔符（通
常是一个换行符）。当你需要从文本文件里读取输人但又不想去猜测最后一个字符是否是一个换
行符时，这些函数将大深用场。chop和chomp这两个函数都会返回一个新字符串并且改变你分配
给它们的变量。请看：
:u`au 11q.=es
chonp($a): Sa i6 now *bite me*
chomp(Sal:# Sa is still *bite
 me” since there's no newline
加入jaVa编程群：524621833
---
## Page 608
590
Linux程序设计
如果我们的字符串完全是由字母组成的，对它们进行递增操作将返回可能正是你预期的结
果一最后一个字符的ASCII值将被增加：如果它原来是“z”或“Z”，就会折返为“a”：如
果字符串是以一个数字打头的，Perl将把它转换为一个数值，数字后面的内容都将丢失。如下
所示：
$a:*abc*:print **$a: Returns *abd
Sa=*0 Goodbye Cruel World*:print +$a:# Returns 1
Sa=
除了对字符串进行合并以外，有时也需要把它们拆分开、而这是由spli函数完成的。你可以
对一个字符串或一个规则表达式进行split操作；如果没有给出参数，它就会把“S_”在空白字符
处拆分开。split函数可以有两个可选的参数，第一个是一个按照它来进行拆分的模板，第二个是
将要被拆分的字符串。注意：如果你给出了一个准备被拆分的字符串，就必须给出一个模板做
为第一个参数；一个经常出现的错误就是split函数里没有模板却只有文本。请看下面的例子：
Split s_on whitespace
a.'m.,uo,1yrds =e
Spasswds *simon:x: 500:500:Simon Cozen8.., : /home/simon:/bin/zsh* ;
@passwd= split *:*, Spasswd; Split on a string.
 Can also write it like this:
@passwda split /:/ Spasswd;  Split on a regular expression.(Same thing)
{$uid, Sgid)=@passwdi2.3];
+More idiomatically:
(Suid. $gid) = [sp1it *:*. $passwd) [2,3];
逆操作（把一个列表转换为一个字符串）可以用join来完成。你可以把列表元素和分隔符一
起合并为一个字符串。如下所示：
Bmylist={*one*.*two*，*three*,*four"）：
Smystring = join *?*, 9nylist; # one?two?thzee?four
熟悉BASIC语言的人都知道substr是干什么用的：它返回的是字符串的一个子字符串。你必
须给出两个参数，一个是字符串本身，另一个是偏移值。这两个参数的作用是把从偏移值开始
一直到字符串结尾的所有东西都取下来（如果给出的偏移值是一个负数，就表示将“从字符串
的尾部开始计数”，-1表示倒数第一个字符，-2表示倒数第二个字符，依次类推）。如果还给出了
一个长度参数，就表示最多取下那么多个的字符来。请看下面的例子：
Sstring"the glistening trophies*;
print substr(Sstring.-3):ies
print substr(Sstring. 4, 4):  gli8
print substr(Sstring.
如果再加上一个参数，你就可以substr对字符申进行替换性修改，如下所示：
subsr (Sstring.7, 4,*tter*):Returns sten”
pt int Set rinq:
the glittering trophies
（注意这将改变原来的字符串，substr这种用法的返回值是字符串指定位置上原来的内容。）
加入java编程群：524621833
---
## Page 609
第18章Perl程序设计语言591
这个替换性操作还可以用一个更正规的赋值语句来完成，如下所示：
suhstr(Cstring. 7, 4) =*tter*; Funetions as 1values.
我们对剩下的几个函数做一个快速的介绍，因为它们都比较简单。length就像它的字面含义
那样返回的是字符串的长度（但你不能通过修改字符串长度的办法来截短字符串）。reverse返回
一个首尾倒置的字符串。但reverse更经常被用来对列表进行操作：它把它的参数看做是-个列
表，然后按首尾倒置的顺序返回这个列表。为了得到想要的结果，你必须给它加上scalar关键字，
强制它对标量类型的数据进行操作。如下所示：
a=*Just Another Perl Hacker*:
pr int reverse $a; # list context  *Just Another Per1 Hacker
pt int iength $d: ? 24
最后，uc和le分别用来把字符串中的全部字母转换为大写或小写字符。面ucfirst和lefirst用来
把字符串的第一个字母转换为大写或小写字符。如下所示：
Szippye*Yow!+ I am having PU!!:
print ucfirst[lc(Szippy)): # Yow!! i am having fun!!
print lcfirst (ue (SziPPy)):  yOw!! I AN HAVING FUN11
3.逻辑操作符与二透制按位操作符
Perl中的二进制按位操作符“&”（与）、“1”（或）、“A"（异或）、~（非）和移位操作符
“0”前缴来表示十六进制数或八进制数。如下所示：
0xF0;0x0P =255(0xFF)
DxAA ~ 0x10 = 186 (0xBA)
计算影响不了整个表达式的结果，就不再对它们进行计算了），所以这几个操作符经常被用在程
序的控制流程里。如下所示：
r 1sky_function[1
and print *Worked finen*
upaaoons 1,uptp uotaoung. zutud1o
Aiso written as:
11print *Function didn't succeed\n*;
risky_function[} s6 print *Worked fine\n*
你也可以按同样的办法使用“if”和“unless”关键字：
prir: *worked fine^n* if risky_function(1:
Sa=*Dofault value* unless Sa;
你可以从标量值里获得你的真值或假值（“0”和未定义是假值，其他一切都是真值），也可
）
有一个等号“=”时是赋值操作，不要把这两者弄混了）和“!=”。但对字符串进行比较时要使
用另外一套比较操作符：“l”表示字符串小于、“gt”表示大于、“eq”表示等于、“ne”表示不
加入jaVa编程群：524621833
---
## Page 610
592Linux程序设计
等于。
4.数组操作
字符串和数字这两种标量类型上的操作基本上就介绍完了。数组和列表上的情况又是如
何呢？
数组上最重要的操作之一是查出它里面有多少个元素，你可能会认为length能够奏效，但不
行。我们必须把数组放到标量上下文里进行求值，就像我们刚才的倒置字符串操作那样。注意：
Perl不支持“稀疏的数组”，这样的数组会被认为是填满了未定义元素。
paint scalar @array; # 4 elenents 1n the artay
Barray -(*zero*, *one*,*two*, *three*1;
Sarray[200] = “two hundred*:
print scalar @arruy:  201 elements: some of hem are empty. though.
Perl还允许我们查看最高缩号元素的下标。这个值一般比数组元素的个数少一个，因为数组
元素是从零开始编号的。如下所示：
array = ("zero”,*one*, *two*, *three′):
print S#array: # 3
接下来，我们可以从数组里取出其中的元素。我们既可以把它想象为shel程序设计中的一
个数组并通过shift从它的首端取出元素，也可以把它想象为一个堆栈，通过pop从它的尾端取出
元素。如下所示：
print shift 9array: one - array is now (*two*)
print pop array: # two " array is now {1
类似地，我们能够再把东西放进去，这可以通过unshift或push来完成。我们可以一次插入多
个元素。如下所示：
push @array.*two*:# array is now(*two*)
qarray = (}:
unshifc earray. *minus one”,*zero*;
minus one,zero,one,two,three,four
现在让我们来看看reverse对列表的使用效果：
print join *,′. reverse Garray:
#four,Lhree,two,one,zero,minus one
我们可以用sort把列表排序为ASCHI题序。如下所示：
a-(*delta°,*alpha*,*charlie*,“bravo*}:
@b - sort 8a; (*alpha*,*bravo*,*charlie*,*delta*):
我们还可以通过特殊的“块”格式指定自已的排序顺序：Perl把Sa和$b设置为进行比较的两
个值。对这种情况下的数值来说，我们必须使用特殊的比较操作符“”一一如果左边的数大
加入jaVa编程群：524621833
---
## Page 611
第18章Perl程序设计语言