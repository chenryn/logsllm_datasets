## [⁠]{#ch-Subsystems_and_Tunable_Parameters.html#example_usage}A.1.4. 示例应用 {.title}
:::
::: para
如想简单测试在两个不同 cgroup 中，使用不同 `blkio.weight`{.filename}
值运行两个 `dd`{.command} 线程，请参阅[例 A.1 "blkio
权重分配"](#ch-Subsystems_and_Tunable_Parameters.html#ex-blkio_usage){.xref}。
:::
::: example
[⁠]{#ch-Subsystems_and_Tunable_Parameters.html#ex-blkio_usage}
**例 A.1. blkio 权重分配**
::: example-contents
::: {.procedure xmlns:d="http://docbook.org/ns/docbook"}
1.  ::: para
    挂载 `blkio`{.systemitem} 子系统：
    :::
    ``` screen
    ~]# mount -t cgroup -o blkio blkio /cgroup/blkio/
    ```
2.  ::: para
    为 `blkio`{.systemitem} 子系统创建两个 cgroup：
    :::
    ``` screen
    ~]# mkdir /cgroup/blkio/test1/
    ~]# mkdir /cgroup/blkio/test2/
    ```
3.  ::: para
    在之前创建的 cgroup 设定不同 `blkio`{.systemitem} 权重：
    :::
    ``` screen
    ~]# echo 1000 > /cgroup/blkio/test1/blkio.weight
    ~]# echo 500 > /cgroup/blkio/test2/blkio.weight
    ```
4.  ::: para
    创建两个大文件：
    :::
    ``` screen
    ~]# dd if=/dev/zero of=file_1 bs=1M count=4000
    ~]# dd if=/dev/zero of=file_2 bs=1M count=4000
    ```
    ::: para
    以上指令所建的文件大小是 4 GB（`file_1`{.filename} 和
    `file_2`{.filename}）。
    :::
5.  ::: para
    对每个测试 cgroup ，在一个大文件中执行 `dd`{.command}
    指令（该指令可以读取文件内容，并将其输出到空设备）：
    :::
    ``` screen
    ~]# cgexec -g blkio:test1 time dd if=file_1 of=/dev/null
    ~]# cgexec -g blkio:test2 time dd if=file_2 of=/dev/null
    ```
    ::: para
    两个指令在结束后都会输出完成时间。
    :::
6.  ::: para
    您可以使用 [**iotop**]{.application} 实用工具实时监控两个同时运行的
    `dd`{.command} 线程。要安装 [**iotop**]{.application} 实用工具，请以
    root 身份执行 `yum install iotop`{.command} 指令。运行之前启动的
    `dd`{.command} 线程时，您可以在 [**iotop**]{.application}
    实用工具中看到以下结果示例：
    :::
    ``` screen
    Total DISK READ: 83.16 M/s | Total DISK WRITE: 0.00 B/s
        TIME  TID  PRIO  USER     DISK READ  DISK WRITE  SWAPIN      IO    COMMAND
    15:18:04 15071 be/4 root       27.64 M/s    0.00 B/s  0.00 % 92.30 % dd if=file_2 of=/dev/null
    15:18:04 15069 be/4 root       55.52 M/s    0.00 B/s  0.00 % 88.48 % dd if=file_1 of=/dev/null
    ```
:::
:::
:::
::: para
为获得[例 A.1 "blkio
权重分配"](#ch-Subsystems_and_Tunable_Parameters.html#ex-blkio_usage){.xref}最准确的结果，请优先执行
`dd`{.command}
指令、清除所有文件系统缓存并使用下列指令释放缓存页、目录项和索引节点：
:::
``` screen
~]# sync
~]# echo 3 > /proc/sys/vm/drop_caches
```
::: para
您可以启用*"群组隔离"*，它能使用吞吐量来提供更稳定的群组隔离。当群组隔离被禁用，只有工作量是顺序时，公平才能实现。默认情况下，群组隔离是启用状态，这样即便
I/O 工作量随机也可以保证公平。如要启用群组隔离，请执行下列指令：
:::
``` screen
~]# echo 1 > /sys/block//queue/iosched/group_isolation
```
::: para
其中，*\* 代表所需设备名称，例如：`sda`{.systemitem}。
:::
:::
:::
::: section
::: titlepage
# [⁠]{#ch-Subsystems_and_Tunable_Parameters.html#sec-cpu}A.2. cpu {.title}
:::
::: para
`cpu`{.systemitem} 子系统可以调度 cgroup 对 CPU
的获取量。可用以下两个调度程序来管理对 CPU 资源的获取：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    *完全公平调度程序（CFS）* --- 一个比例分配调度程序，可根据任务优先级
    ∕ 权重或 cgroup 分得的份额，在任务群组（cgroups）间按比例分配 CPU
    时间（CPU 带宽）。关于如何使用 CFS
    进行资源控制，请参阅〈[第 A.2.1 节 "CFS
    可调度参数"](#ch-Subsystems_and_Tunable_Parameters.html#sect-cfs){.xref}〉。
    :::
-   ::: para
    *实时调度程序（RT）* --- 一个任务调度程序，可对实时任务使用 CPU
    的时间进行限定。关于如何进行限定，请参阅〈[第 A.2.2 节 "RT
    可调参数"](#ch-Subsystems_and_Tunable_Parameters.html#sect-rt_options){.xref}〉。
    :::
:::
::: section
::: titlepage
## [⁠]{#ch-Subsystems_and_Tunable_Parameters.html#sect-cfs}A.2.1. CFS 可调度参数 {.title}
:::
::: para
在 CFS 中，如果系统有足够的空闲 CPU 周期，那么 cgroup
可获得比其自有份额更多的 CPU
可用量，因为该调度程序有连续工作的特性。此情况通常会在 cgroup
根据相关共享消耗 CPU 时间时出现。在需要对 cgroup 的 CPU
可用量做出硬性限制时（即任务的 CPU
时间不能超过一个特定量），可使用强制上限。
:::
::: para
以下选项可用来配置强制上限或者 CPU 相对份额：
:::
::: variablelist
**强制上限的可调参数**
[cpu.cfs_period_us]{.term}
:   ::: para
    此参数可以设定重新分配 cgroup 可用 CPU
    资源的时间间隔，单位为微秒（µs，这里以 "*`us`*" 表示）。如果一个
    cgroup 中的任务在每 1 秒钟内有 0.2 秒的时间可存取一个单独的
    CPU，则请将 `cpu.rt_runtime_us`{.filename} 设定为
    `2000000`{.literal}，并将 `cpu.rt_period_us`{.filename} 设定为
    `1000000`{.literal}。`cpu.cfs_quota_us`{.filename} 参数的上限为 1
    秒，下限为 1000 微秒。
    :::
[cpu.cfs_quota_us]{.term}
:   ::: para
    此参数可以设定在某一阶段（由 `cpu.cfs_period_us`{.filename}
    规定）某个 cgroup 中所有任务可运行的时间总量，单位为微秒（µs，这里以
    \"*`us`*\" 代表）。一旦 cgroup
    中任务用完按配额分得的时间，它们就会被在此阶段的时间提醒限制流量，并在进入下阶段前禁止运行。如果
    cgroup 中任务在每 1 秒内有 0.2 秒，可对单独 CPU 进行存取，请将
    `cpu.cfs_quota_us`{.filename} 设定为
    `200000`{.literal}，`cpu.cfs_period_us`{.filename} 设定为
    `1000000`{.literal}。请注意，配额和时间段参数都根据 CPU
    来操作。例如，如要让一个进程完全利用两个 CPU，请将
    `cpu.cfs_quota_us`{.filename} 设定为
    `200000`{.literal}，`cpu.cfs_period_us`{.filename} 设定为
    `100000`{.literal}。
    :::
    ::: para
    如将 `cpu.cfs_quota_us`{.filename} 的值设定为 `-1`{.literal}，这表示
    cgroup 不需要遵循任何 CPU 时间限制。这也是每个 cgroup 的默认值（root
    cgroup 除外）。
    :::
[cpu.stat]{.term}
:   ::: para
    此参数通过以下值报告 CPU 时间统计：
    :::
    ::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
    -   ::: para
        `nr_periods`{.literal} --- 经过的周期间隔数（如
        `cpu.cfs_period_us`{.filename} 中所述）。
        :::
    -   ::: para
        `nr_throttled`{.literal} --- cgroup
        中任务被节流的次数（即耗尽所有按配额分得的可用时间后，被禁止运行）。
        :::
    -   ::: para
        `throttled_time`{.literal} --- cgroup
        中任务被节流的时间总计（以纳秒为单位）。
        :::
    :::
:::
::: variablelist
**相对比例的可调参数**
[cpu.shares]{.term}
:   ::: para
    此参数用一个整数来设定 cgroup 中任务 CPU 可用时间的相对比例。例如：
    `cpu.shares`{.filename} 设定为 `100`{.literal} 的任务，即便在两个
    cgroup 中，也将获得相同的 CPU 时间；但是 `cpu.shares`{.filename}
    设定为 `200`{.literal} 的任务与 `cpu.shares`{.filename} 设定为
    `100`{.literal} 的任务相比，前者可使用的 CPU
    时间是后者的两倍，即便它们在同一个 cgroup
    中。`cpu.shares`{.filename} 文件设定的值必须大于等于
    `2`{.constant}。
    :::
    ::: para
    请注意：在多核系统中，CPU 时间比例是在所有 CPU
    核中分配的。即使在一个多核系统中，某个 cgroup 受限制而不能 100% 使用
    CPU，它仍可以 100% 使用每个单独的 CPU 核。请参考以下示例：如果
    cgroup `A`{.literal} 可使用 CPU 的 25%，cgroup `B`{.literal} 可使用
    CPU 的 75%，在四核系统中启动四个消耗大量 CPU 的进程（一个在
    `A`{.literal} 中，三个在 `B`{.literal} 中）后，会得到以下 CPU
    分配结果：
    :::
    ::: table
    [⁠]{#ch-Subsystems_and_Tunable_Parameters.html#idm140381165372512}
    **表 A.1. CPU 分配比例**
    ::: table-contents
      PID   cgroup   CPU   CPU 共享
      ----- -------- ----- --------------
      100   A        0     CPU0 的 100%
      101   B        1     CPU1 的 100%
      102   B        2     CPU2 的 100%
      103   B        3     CPU3 的 100%
    :::
    :::
    ::: para
    使用 "相对比例" 设定 CPU 获取量来管理资源时，有两个问题需要注意：
    :::
    ::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
    -   ::: para
        因为 CFS 不需要相同的 CPU 使用量，所以很难预测 cgroup 的 CPU
        可用时间。当一个 cgroup 中的任务处于闲置状态且不使用任何 CPU
        时间时，剩余的时间会被收集到未使用的 CPU 循环全局池中。其它
        cgroup 可以从这个池中借用 CPU 循环。
        :::
    -   ::: para
        cgroup 实际可用的 CPU 时间会根据该系统中 cgroup
        的数量有所不同。如果一个 cgroup 的相对份额是
        `1000`{.literal}，另外两个 cgroup 的相对份额是
        `500`{.literal}，在所有 cgroup 中的进程都尝试使用 100% CPU
        时间的条件下，第一个 cgroup 将有 50% 的 CPU
        时间。但如果新添加一个相对份额为 `1000`{.literal} 的
        cgroup，则第一个 cgroup 只允许使用 33% 的 CPU 时间（剩余的
        cgroup 则使用 16.5%、16.5% 和 33% 的 CPU 时间）。
        :::
    :::
:::
:::
::: section
::: titlepage
## [⁠]{#ch-Subsystems_and_Tunable_Parameters.html#sect-rt_options}A.2.2. RT 可调参数 {.title}
:::
::: para
RT 调度程序与 CFS 的强制上限（详情请参阅〈[第 A.2.1 节 "CFS
可调度参数"](#ch-Subsystems_and_Tunable_Parameters.html#sect-cfs){.xref}〉）类似，但只限制实时任务对
CPU 的存取。一个实时任务存取 CPU 的时间可以通过为每个 cgroup
分配运行时间和时段来设定。然后，在运行时间的特定时间段，cgroup
中的所有任务会被允许存取 CPU（例如：可允许 cgroup 中的任务每秒中运行 0.1
秒）。
:::
::: variablelist
[cpu.rt_period_us]{.term}
:   ::: para
    此参数可以设定在某个时间段中 ，每隔多久，cgroup 对 CPU
    资源的存取就要重新分配，单位为微秒（µs，这里以"*`us`*"表示），只可用于实时调度任务。如果某个
    cgroup 中的任务，每秒内有 0.2 秒可存取 CPU 资源，则请将
    `cpu.rt_runtime_us`{.filename} 设定为 `200000`{.literal}，并将
    `cpu.rt_period_us`{.filename} 设定为 `1000000`{.literal}。
    :::
[cpu.rt_runtime_us]{.term}
:   ::: para
    此参数可以指定在某个时间段中， cgroup 中的任务对 CPU
    资源的最长连续访问时间，单位为微秒（µs，这里以"*`us`*"表示），只可用于实时调度任务。建立这个限制是为了防止一个
    cgroup 中的任务独占 CPU 时间。如果 cgroup 中的任务，在每秒内有 0.2
    秒可存取 CPU 资源，请将 `cpu.rt_runtime_us`{.filename} 设定为
    `200000`{.literal}，并将 `cpu.rt_period_us`{.filename} 设定为
    `1000000`{.literal}。请注意：运行时间和阶段参数会根据 CPU
    操作。例如：如要允许一个实时任务完全利用两个 CPU，请将
    `cpu.cfs_quota_us`{.filename} 设定为 `200000`{.literal} 并将
    `cpu.cfs_period_us`{.filename} 设定为 `100000`{.literal}。
    :::
:::
:::
::: section
::: titlepage
## [⁠]{#ch-Subsystems_and_Tunable_Parameters.html#sect-cpu-Example_Usage}A.2.3. 示例应用 {.title}
:::
::: example
[⁠]{#ch-Subsystems_and_Tunable_Parameters.html#ex-cpu_usage}
**例 A.2. 限制 CPU 存取**
::: example-contents
::: para
以下示例假设您已配置 cgroup 层级并且`cpu`{.systemitem}
子系统已挂载到您的系统中：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    如要让一个 cgroup 使用一个 CPU 的 25%，同时另一个 cgroup 使用此 CPU
    的 75%，请使用以下指令：
    :::
    ``` screen
    ~]# echo 250 > /cgroup/cpu/blue/cpu.shares
    ~]# echo 750 > /cgroup/cpu/red/cpu.shares
    ```