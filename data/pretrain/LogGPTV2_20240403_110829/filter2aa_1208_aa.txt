JVM字节码学习笔记——class ⽂件结构
0x01 前⾔
本系列学习笔记均来⾃《深⼊理解 JVM 字节码》（作者：张亚），本笔记仅⽤于个⼈学习知
识总结。
对于学习 java 安全、想了解 JVM 字节码的童鞋们强烈建议购买正版书去阅读。
0x02 class ⽂件结构
java 是跨平台的⼀门语⾔，但是 jvm 却不是跨平台的，但是不同平台的 JVM 帮我们屏蔽了差
异，通过 JVM 可以把源代码编译成和平台⽆关的字节码，这样我们的源代码就不⽤根据不同
平台编译成不同⼆进制是可执⾏⽂件了。这也是 java 字节码的意义所在。
class ⽂件由⼗部分组成，具体如下：
魔数（magic number）
版本号（minor&major version）
常量池（constant pool）
访问标记（access flag）
类索引（this class）
超类索引（super class）
接⼜表索引（interface）
字段表（field）
⽅法表（method）
属性表（attribute）
⼀句顺⼜溜可以帮助我们记忆
My Very Cute Animal Truns Savage In full Moon Areas.
我可爱的宠物会在⽉圆时变得暴躁。
1、魔数（magic number）  
魔数主要⽤于利⽤⽂件内容本⾝来标识⽂件的类型。class ⽂件的魔数为 0xcafebabe ，虚拟
机在加载类⽂件之前会先检验这 4 个字节，如果不是，那么会抛出
java.lang.ClassFormatError 异常。
java 之⽗ James Gosling 曾经写过⼀篇⽂章，⼤意是他之前常去的⼀家饭店⾥有个乐队经
常演出，后来乐队的主唱不幸去世，他们就将那个地⽅称为”cafedead“。当时 Gosling 正
在设计⼀些⽂件的编码格式，需要两个魔数，⼀个⽤于对象持久化，⼀个⽤于 class ⽂
件，这两个魔数有着相同的前缀”cafe“，他选择了 cafedead 作为对象持久化⽂件的魔
数，选择了 cafebabe 作为 class ⽂件的魔数。
2、版本号（minor&major version）  
魔数之后的四个字节分别表⽰副版本号（Minor Version）和主版本号（Major Version）。
如： CA FE BA BE 00 00 00 34
那么主版本号为： 0x34=4x1+3x16=52
3、常量池（constant pool）  
常量池是类⽂件中最复杂的数据结构。
对于 JVM 来说，如果操作数是常⽤的数值，⽐如 0，那么就会把这些操作数内嵌到字节码
中，⽽如果是字符串常量或者较⼤的整数时，class ⽂件会把这些操作数存储在常量池中，当
要使⽤这些操作数的时候，会根据常量池的索引位置来查找。
数据结构⽰意如下：
常量池分为两个部分，⼀是常量池⼤⼩（cp_info_count），意思常量池项（cp_info）集合。
常量池⼤⼩（cp_info_count）
常量池⼤⼩由两个字节表⽰。如果常量池⼤⼩为 n，那么常量池真正有效的索引是 1~n-1。0
属于保留索引，供特殊情况使⽤。
常量池项（cp_info）
常量池项最多包含 n-1个元素。因为 long 和 double 类型的常量会占两个字节，也就是说或⽤
两个索引位置，因此如果常量池中包含了这两种类型的变量，那么实际中的常量池的元素个
数会⽐ n-1要少。
常量池项（cp_info）的数据结构⽰意如下：
每个常量池项的第⼀个字节表⽰常量项的类型（tag），接下来的⼏个字节才表⽰常量项的具
体内容。
在 java 虚拟机中⼀共定义了 14 种常量项 tag 类型，这些常量名都以 CONSTANT开头，以
info 结尾。
struct{
  u2          constant_pool_count;
  cp_info     constant_poll[constant_pool_count-1];
}
cp_info{
  u1 tag;
  u2 info[];
}
常量类型
值
描述
CONSTANT_Utf8_info
1
utf-8 编码的字符串
CONSTANT_Integer_info
3
表⽰ int 类型常量；boolean、byte、short、chart
CONSTANT_Float_info
4
表⽰ float 类型量
CONSTANT_Long_info
5
长整型字⾯量
CONSTANT_Double_info
6
双精度型字⾯量
CONSTANT_Class_info
7
表⽰类或接⼜
CONSTANT_String_info
8
java.lang.String 类型的常量对象
CONSTANT_Fieldref_info
9
字段信息表
CONSTANT_Methodref_info
10
⽅法
CONSTANT_InterfaceMethodref_info
11
接⼜⽅法
CONSTANT_NameAndType_info
12
名称和类型表
CONSTANT_MethodHandle_info
15
⽅法句柄表
CONSTANT_MethodType_info
16
⽅法类型表
CONSTANT_InvokeDynamic_info
18
动态⽅法调⽤点
① CONSTANT_Utf8_info：
CONSTANT_Utf8_info存储了 MUTF-8 编码的字符串，结构如下
值得⼀提的是，作者在书中解释了MUTF-8和 UTF8 的细微区别，同时也侧⾯告诉了读者为何
字符串在class⽂件中是以MUTF-8编码⽽没有⽤标准的UTF-8编码。
CONSTANT_Utf8_info {  
   u1 tag;  // 值固定为 1
   u2 length;   // 值为bytes数组的⻓度
   u1 bytes[length];    // 采⽤ MUTF-8 编码的⻓度为 length 的字节数组
} 
书中提到，MUTF-8编码⽅式和UTF-8⼤致相同，但并不兼容。差别有两点：
第⼀，MUTF-8 ⾥ null 字符（代码点U+0000）会被编码成 2 字节：0xC0、0x80；在标准的
UTF-8 编码中只⽤⼀个直接 0x00 表⽰。我们知道，在其他语⾔，⽐如 C 语⾔中，会把空字
符当做字符串结束字符（通常我们所谓的%00 截断等原理就是如此），⽽采⽤了 MUTF-8 编
码后，这种处理空字符的⽅式保证了字符串中不会出现空字符，在 C 语⾔处理的时候就不会
发⽣意外截断。
第⼆，MUTF-8 只⽤到了 UTF-8 编码中的单字节、双字节、三字节表⽰⽅式，没有⽤到 4 字
节表⽰⽅式，对于编码在 U+FFFF 之上的字符，java 使⽤了”代理对“通过 2 个字符表⽰，⽐
如 emoji 表情笑哭 
，其代理对为 \ud83d\ude02 。
第⼀点⽐较好理解，第⼆点要理解起来就必须了解 UTF-8 中的单字节、双字节、三字节、四
字节表⽰⽅式具体是什么。下⾯简单说说。
单字节
范围： 0x0001 ~ 0x007F ，UTF-8 ⽤⼀个字节来表⽰：
0000 0001 ~ 0000 007F -> 0xxxxxxx
即，英⽂字母的 ASCII 编码和 UTF-8 编码的结果⼀样。
双字节
范围： 0x0080 ~ 0x07FF ，UTF-8 ⽤两个字节来表⽰：
0000 0080 ~ 0000 07FF -> 110xxxxx 10xxxxxx
即，把第⼀字节的 110  去除，第⼆字节的 10  去除，然后把剩下的 x 组成新的两字节数据。
三字节
范围： 0x0800 ~ 0xFFFF ，UTF-8 ⽤三个字节表⽰：
0000 0800 ~ 0000 FFFF -> 1110xxxx 10xxxxxx 10xxxxxx
即，把第⼀字节的 1110 去掉、第⼆字节的 10 去掉、第三字节的 10 去掉，然后把剩下的 x
组成新的三字节数据。
四字节
范围： 0001 0000 ~ 0010 FFFF ，UTF-8 ⽤四个字节表⽰：
0001 0000 ~ 0010 FFFF -> 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
即，把第⼀字节的 11110 去掉，第⼆字节的 10 去掉，第三字节的 10 去掉，第四字节的 10
去掉，然后把剩下的 x 组成新的四字节数据。
举例：
机 的 unicode 编码 为 0x673A(0110 0111 0011 1010)
由于 0x673A 在三字节范围，因此⽤三字节表⽰，如下：
0110 0111 0011 1010
↓
1110 xxxx 10xx xxxx 10xx xxxx
( xxxx=0110 ) ↓ ( 10xx=1001 、 xxxx=1100 、 10xx=1011 、 xxxx=1010 )
1110 0110 1001 1100 1011 1010
填⼊的 x 为： 011 001110 0111010
得到UTF-8 编码为 0xE69CBA
回到前⾯，我们知道 emoji 表情笑哭 
代理对为 \ud83d\ude02 ，即：
D83D DE02 ，如果我们定义：
那么打开编译后的 class ⽂件可以看到， emoji 表情笑哭 
表⽰为：
01 00 06 ED A0 BD ED B8 82
01 表⽰常量项 tag， 00 06 表⽰ byte 数组的长度，即后⾯ 6 字节 ED A0 BD ED B8 82 表
⽰的是emoji 表情笑哭 
public final String y = "\ud83d\ude02";