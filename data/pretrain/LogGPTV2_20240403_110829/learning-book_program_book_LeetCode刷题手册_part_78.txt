//解法一二分搜索
func preimageSizeFzF(K int) int {
1ow, high := 0, 5*K
for low >1
k := trailingZeroes(mid)
if k == K {
return 5
} else if k > K {
high = mid -
1
}else{
1ow = mid + 1
return 0
//解法二数学方法
func preimageSizeFZFl(K int) int {
base := 0
for base  0 {
base = (base - 1) / 5
if k/base == 5 {
return 0
K %= base
return 5
---
## Page 763
802.FindEventualSafeStates
题目
In a directed graph, we start at some node and every turn, walk along a directed edge of the
graph. If we reach a node that is terminal (that is, it has no outgoing directed edges), we stop.
Now, say our starting node is eventuolly sofe if and only if we must eventually walk to a terminal
node. More specifically, there exists a natural number K so that for any choice of where to walk
we must have stopped at a terminal node in less than K steps.
Which nodes are eventually safe? Return them as an array in sorted order.
The directed graph has N nodes with labels 0, 1, ..., N-1, where N is the length of graph
The graph is given in the following form: graph[i] is a list of labels j such that (i, j) is a
directed edge of the graph.
Example:
Input: graph = [[1,2],[2,3], [5], [0], [5], [], []]
Output: [2,4,5,6]
Here is a diagram of the above graph.
0
3
6
Note:
●graph will have length at most 10000 .
●The number of edges in the graph will not exceed 32000 
● Each graph[i] will be a sorted list of different integers, chosen within the range [o,
graph.1ength - 1] .
题目大意
在有向图中，我们从某个节点和每个转向处开始，沿着图的有向边走。如果我们到达的节点是终点（即它
没有连出的有向边），我们停止。现在，如果我们最后能走到终点，那么我们的起始节点是最终安全的。
更具体地说，存在一个自然数K，无论选择从哪里开始行走，我们走了不到K步后必能停止在一个终点。
哪些节点最终是安全的？结果返回一个有序的数组。
提示：
---
## Page 764
·graph节点数不超过10000
·图的边数不会超过32000.
·每个graph[]被排序为不同的整数列表，在区间[0，graph.length-1]中选取。
解题思路
·给出一个有向图，要求找出所有“安全“节点。“安全"节点的定义是：存在一个自然数K，无论选择从
哪里开始行走，我们走了不到K步后必能停止在一个终点。
·这一题可以用拓扑排序，也可以用DFS染色来解答。这里用DFS来解答。对于每个节点，我们有
3种染色的方法：白色0号节点表示该节点还没有被访问过：灰色1号节点表示该节点在栈中（这
一轮搜索中被访问过）或者在环中；黑色2号节点表示该节点的所有相连的节点都被访问过，且
该节点不在环中。当我们第一次访问一个节点时，我们把它从白色变成灰色，并继续搜索与它相连
的节点。如果在搜索过程中我们遇到一个灰色的节点，那么说明找到了一个环，此时退出搜索，所
有的灰色节点保持不变（即从任意一个灰色节点开始，都能走到环中），如果搜索过程中，我们没
有遇到灰色的节点，那么在回溯到当前节点时，我们把它从灰色变成黑色，即表示它是一个安全的
节点。
代码
func eventualsafeNodes(graph [][]int) []int {
res, color := []int{},make([]int, len(graph))
for i := range graph {
if dfsEventualsafeNodes(graph,i, color) {
res = append(res, i)
return res
// ColorS: WHITE 0, GRAY 1, BLACK 2;
func dfsEventualsafeNodes(graph [][]int,idx int, color []int) bool{
if color[idx]> 0 {
return color[idx]== 2
color[idx] = 1
for i :=range graph[idx]{
if !dfsEventualsafeNodes(graph, graph[idx][i], color) {
return false
3
color[idx] = 2
return true
}
803.BricksFallingWhenHit
题目
---
## Page 765
We have a grid of 1s and 0s; the 1s in a cell represent bricks. A brick will not drop if and only if it is
jou lm sxpq suaoe[pe (em-) s go auo asea ie o pue au jo do au o paauuo A(ap
drop.
We will dlo some erasures sequentially. Each time we want to do the erasure at the location (i, j).
the brick (if it exists) on that location will disappear, and then some other bricks may drop
because of that erasure.
Return an array representing the number of bricks that will drop after each erasure in sequence
Example 1:
Input:
grid = [[1,0,0,0] , [1,1,1,0]]
hits = [[1,0]]
output: [2]
Explanation:
If we erase the brick at (1, 0), the brick at (1, 1) and (1, 2) will drop. So
we should return 2.
Example 2:
Input:
grid = [[1,0,0, 0] , [1,1,0, 0]]
hits = [[1,1], [1,0]]
output: [0,0]
Explanation:
when we erase the brick at (1, 0), the brick at (1, 1) has already disappeared
due to the last move. So each erasure wil1 cause no bricks dropping. Note
that the erased brick (1, 0) wil1 not be counted as a dropped brick.
Note:
● The number of rows and columns in the grid will be in the range [1, 200].
● The number of erasures will not exceed the area of the grid.
● It is guaranteed that each erasure will be different from any other erasure, and located
inside the grid.
●An erasure may refer to a location with no brick - if it does, no bricks drop.
题目大意
我们有一组包含1和0的网格；其中1表示砖块。当且仅当一块砖直接连接到网格的顶部，或者它至少有
一块相邻（4个方向之一）砖块不会掉落时，它才不会落下。我们会依次消除一些砖块。每当我们消除
（1.j）位置时，对应位置的砖块（若存在）会消失，然后其他的砖块可能因为这个消除而落下。返回一个
数组表示每次消除操作对应落下的砖块数目。
注意：
·网格的行数和列数的范围是[1，200]。
·消除的数字不会超过网格的区域。
---
## Page 766
·可以保证每次的消除都不相同，并且位于网格的内部。
·一个消除的位置可能没有砖块，如果这样的话，就不会有砖块落下。
解题思路
·有一些砖块连接在天花板上，问，如果打掉某个砖块，会掉落几块砖块？打掉的每个砖块不参与计
数。
·这一题可以用并查集和DFS求解。不过尝试用DFS的同学就会知道，这一题卡时间卡的很紧。用
DFS虽然能AC，但是耗时非常长。用并查集也必须进行秩压缩，不然耗时也非常长。另外，如果
用了并查集，每个集合的总数单独统计，不随着union(操作，也会导致超时，笔者在这里被LTE
了多次，最后只能重写UnionFind并查集类，将统计操作和union(操作写在一起，这一题才
faster than 100.00% AC。
·拿到题以后，首先尝试暴力解法，按照顺序打掉砖块，每次打掉砖块以后，都重建并查集。题目要
求每次掉落几块砖块，实际上比较每次和天花板连通的砖块个数变化了多少块就可以了。那么解法
就出来了，先把和天花板连通的砖块都union）起来，记录这个集合中砖块的个数count，然后
每次打掉一个砖块以后，重建并查集，计算与天花板连通的砖块的个数newCount，newCount-
count-1就是最终答案（打掉的那块砖块不计算其中），提交代码以后，发现TLE。
·出现TLE以后一般思路都是对的，只是时间复杂度过高，需要优化。很明显，需要优化的地方是
每次都重建了新的并查集，有没有办法能在上一次状态上进行变更，不用重建并查集呢？如果正向
的打掉砖块，那么每次还需要以这个砖块为起点进行DFS，时间复杂度还是很高。如果反向考虑
呢？先把所有要打掉的砖块都打掉，构建打掉这些砖块以后剩下与天花板连通的并查集。然后反向
添加打掉的砖块，每次添加一块就刷新一次它周围的4个砖块，不用DFS，这样时间复杂度优化
了很多。最后在按照newCount-count-1方式计算最终答案。注意每次还原一个砖块的时候
需要染色回原有砖块的颜色1。优化成这样的做法，基本不会TLE了，如果计算count是单独计
算的，还是会TLE。如果没有进行秩压缩，时间会超过1500ms，所以这一题想拿到100%，每步
优化都要做好。最终100%的答案见代码。
代码
package leetcode
import（
"github.com/halfrost/LeetCode-Go/template"
func hitBricks(grid [][]int, hits [][]int) []int {
if 1en(hits) == 0 {
return []int{}
uf, m, n, res, oriCount := template.unionFindCount{}, len(grid),
len(grid[o]), make([]int, len(hits)), 0
uf.Init(m*n + 1)
//先将要打掉的砖块染色
for _, hit := range hits {
if grid[hit[0]][hit[1]] == 1 {
---
## Page 767
grid[hit[0]][hit[1]]= 2
for i:= 0;i= 0; i-- {
if grid[hits[][o]][hits[i][1]]== 2 {
grid[hits[i][o]][hits[i][1]]= 1
getunionFindFromGrid(grid, hits [i] [o] , hits[i][1] , uf)
nowCount := uf.Count ()[uf.Find(m*n)]
if nowCount-oricount >0{
res[i] = nowCount - oriCount - 1
}else{
res[i] = 0
oriCount = nowCount
return res
func isInGrid(grid [][]int, x, y int) bool {
return x >= 0 && x = 0 && y = 0;i--{
temp = append([]string{allpomains[i]}, temp.. -)
1d := strings.Join(temp, ".")
count, _ := strconv.Atoi (countDomain[o])
if val, ok := domainCountMap[1d]; !ok {
domaincountMap[1d]= count
}else{
domainCountMap[1d] = count + va]
---
## Page 770
for k,v := range domainCountMap {
t := strings.Join([]string{strconv.Itoa(v), k],
result = append(result, t)
return result
//解法二
func subdomainvisitsl(cpdomains []string) []string {
out = make([]string, 0)
var b strings.Builder
domains := make(map[string]int, 0)
for _, v := range cpdomains {
splitDomain(v, domains)
for k, v := range domains {
b.writeString(strconv.Itoa(v))
b.writeString(" ")
b.writeString(k)
out = append(out, b.String())
b.Reset()
3
return out
}
func splitDomain(domain string, domains map[string]int) {
visits := 0
var e error
subdomains := make([]string, 0)
for i, v := range domain {
if v ==
visits, e = strconv.Atoi (domain[o:i])
if e != nil {
panic(e)
上
break
for i:=1en(domain) -1;i >= 0;i--{
if domain[i] =='.{
subdomains = append(subdomains, domain[i+l:])
} else if domain[i] ==
subdomains = append(subdomains, domain[i+1:])
break
for
-,V := range subdomains {
count, ok := domains[v]
---
## Page 771
if ok{
domains[v] = count + visits
}else{
domains [v] = visits
812.LargestTriangleArea
题目
You have a list of points in the plane. Return the area of the largest triangle that can be formed
by any 3 of the points.
Example:
Input: points = [[0,0], [0,1], [1,0], [0,2], [2,0]]
Output:2
Explanation:
The five points are show in the figure below. The red triangle is the largest.
Notes:
---
## Page 772
●3 <= points.1ength <= 50
●No points will be duplicated.
●-50 <= points[i][j]<= 50.
● Answers within 1o^-6 of the true value will be accepted as correct.
题目大意
给定包含多个点的集合，从其中取三个点组成三角形，返回能组成的最大三角形的面积。
解题思路
·给出一组点的坐标，要求找出能组成三角形面积最大的点集合，输出这个最大面积。
·数学题。按照数学定义，分别计算这些能构成三角形的点形成的三角形面积，最终输出最大面积即
可。
代码
package leetcode
func 1argestTriangleArea(points [][]int) float64{
maxArea, n := 0.0, 1en(points)
for i := 0; i < n; i++ {
for j := i + 1; j < n; j++ {
for k := j + 1; k < n; k++ {
maxArea = max(maxArea, area(points[i], points[j], points[k]))
return maxArea
func area(pl, p2, p3 []int) float64 {
return abs(p1[0]*p2[1]+p2[0]*p3[1]+p3[0]*pl[1]-pl[0]*p3[1]-p2[0]*p1[1]-
/ （[]zd[o]ed
}
func abs(num int) float64 {
if num < 0{
wnu- = wnu
return float64(num)