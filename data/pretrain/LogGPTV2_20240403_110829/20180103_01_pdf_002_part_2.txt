= split_part(
(split_part(crs2d.srtext,'AUTHORITY[\"EPSG\",\"',3)),'\"',1))
OR " +
// if srtext has been changed for Geographic3D
"(crs3d.auth_srid = " + srs.getSrid() + " " and
split_part(crs3d.srtext, '[', 1) LIKE 'GEOGCS3D' AND
split_part(crs2d.srtext, '[', 1) LIKE 'GEOGCS' " +
//do they have the same Datum_ID?
"and split_part(
(split_part(crs3d.srtext,'AUTHORITY[\"EPSG\",\"',3)),'\"',1)
= split_part(
(split_part(crs2d.srtext,'AUTHORITY[\"EPSG\",\"',3)),'\"',1))");
11
Port documentation for Java classes of the Importer/Exporter v1.5.0-postgis
3.2 BoundingBox filter and OptimizerHints in DBSplitter.java
DBSplitter.java manages the filtering of data by a given bounding box. In Oracle Spatial
the spatial operation SDO_RELATE is used for that. SDO_RELATE checks topological relations
between geometries according to the 9-intersection Matrix (DE-9IM). It is possible to combine
similar mask attributes with a logical OR (+) like 'inside' and 'coveredby'. More attributes
should stand in their own SDO_RELATE statements, all concatenated using UNION ALL.
The equivalent PostGIS function is ST_Relate. There are some slight differences but before
digressing into details it should be said that ST_Relate is not using the GiST index of
PostgreSQL. Therefore the query would be much slower than in the Oracle version. In PostGIS
topological relations are usually queried using functions that are called like the mask attributes
like ST_CoveredBy, ST_Inside, ST_Equal etc. Those operations are using the spatial index and
work much faster.
Another feature of Oracle which is used in the DBSplitter class is the “Optimizer Hint”. It is
used to tell the internal query optimizer which query plan to prefer. As there are no such
Optimizer Hints in PostgreSQL they were uncommented.
de.tub.citydb.modules.citygml.exporter.database.content.DBSplitter
179 // bboxFilter = new String[overlap ? 3 : 2];
//
// String filter = "SDO_RELATE(co.ENVELOPE, MDSYS.SDO_GEOMETRY(2003, "
// + bboxSrid + ", NULL, " +
// "MDSYS.SDO_ELEM_INFO_ARRAY(1, 1003, 3), " +
// "MDSYS.SDO_ORDINATE_ARRAY(" + minX + ", " + minY + ", " + maxX
// + ", " + maxY + ")), 'mask=";
//
// bboxFilter[0] = filter + "inside+coveredby') = 'TRUE'";
// bboxFilter[1] = filter + "equal') = 'TRUE'";
// if (overlap)
// bboxFilter[2] = filter + "overlapbdyintersect') = 'TRUE'";
bboxFilter = new String[overlap ? 2 : 1];
String geomAgeomB = "(co.ENVELOPE, " +
"ST_GeomFromEWKT('SRID=" + dbSrs.getSrid() + ";POLYGON((" +
minX + " " + minY + "," +
minX + " " + maxY + "," +
maxX + " " + maxY + "," +
maxX + " " + minY + "," +
minX + " " + minY + "))'))";
bboxFilter[0] = "ST_CoveredBy" + geomAgeomB + " = 'TRUE'";
if (overlap)
bboxFilter[0] = "ST_Intersects" + geomAgeomB + " = 'TRUE'";
12
Port documentation for Java classes of the Importer/Exporter v1.5.0-postgis
3.3 Queries for the Import
Some queries in the java classes use database-specific functions which had to be changed.
de.tub.citydb.modules.citygml.exporter.database.content.DBAppearance
130 // nvl(sd.TEX_IMAGE.getContentLength(), 0) as DB_TEX_IMAGE_SIZE,
rep // sd.TEX_IMAGE.getMimeType() as DB_TEX_IMAGE_MIME_TYPE, sd.TEX_MIME_TYPE,
COALESCE(length(sd.TEX_IMAGE), 0) as DB_TEX_IMAGE_SIZE, sd.TEX_MIME_TYPE,
de.tub.citydb.modules.citygml.importer.database.content.DBCityObject
133 // SYSDATE
now()
de.tub.citydb.modules.citygml.importer.database.content.DBCityObjectGenericAttrib
64 // CITYOBJECT_GENERICATT_SEQ.nextval
nextval('CITYOBJECT_GENERICATTRIB_ID_SEQ')
de.tub.citydb.modules.citygml.importer.database.content.DBExternalReference
58 // EXTERNAL_REF_SEQ.nextval
nextval('EXTERNAL_REFERENCE_ID_SEQ')
de.tub.citydb.modules.citygml.importer.database.content.DBSequencer
53 // pstsmt = conn.prepareStatement("select " + sequence.toString() +
".nextval from dual");
pstsmt = conn.prepareStatement("select nextval('" + sequence.toString() +
"')");
de.tub.citydb.modules.citygml.importer.database.xlink.resolver.XlinkSurfaceGeometry
91 // psSelectSurfGeom = batchConn.prepareStatement("select sg.*, LEVEL from
SURFACE_GEOMETRY sg start with sg.ID=? connect by prior
sg.ID=sg.PARENT_ID");
psSelectSurfGeom = batchConn.prepareStatement("WITH RECURSIVE geometry
(id, gmlid, gmlid_codespace, parent_id, root_id, is_solid,
is_composite, is_triangulated, is_xlink, is_reverse, geometry, level) " +
" AS (SELECT sg.*, 1 AS level FROM surface_geometry sg WHERE sg.id=?
UNION ALL " +
" SELECT sg.*, g.level + 1 AS level FROM
surface_geometry sg, geometry g WHERE sg.parent_id=g.id)" +
" SELECT * FROM geometry ORDER BY level asc");
100 // SURFACE_GEOMETRY_SEQ.nextval
nextval('SURFACE_GEOMETRY_ID_SEQ')
13
Port documentation for Java classes of the Importer/Exporter v1.5.0-postgis
3.4 Create Table without “nologging“
A nologging option for CREATE TABLE statements has only been offered since PostgreSQL
9.1 (UNLOGGED parameter). In order to provide backwards compatibility until PostgreSQL 8.4
the option is not used in the PostGIS version.
de.tub.citydb.modules.citygml.common.database.cache.model.CacheTableModel
95 // " nologging" +
de.tub.citydb.modules.citygml.common.database.cache.HeapCacheTable
162 model.createIndexes(conn, tableName/*, "nologging"*/);
3.5 Data types in cached tables
In the folder common.database.cache.model several classes had to be changed due to
different data types of the DMBS. NUMBER to NUMERIC (ID columns = INTEGER), VARCHAR2
to VARCHAR.
14
Port documentation for Java classes of the Importer/Exporter v1.5.0-postgis
4. Implicit sequences
Packages: Classes:
 api [M cityI] DBAddress
 cmd [M cityI] DBAppearance
[M cityI] DBBuilding
 config
[M cityI] DBBuildingFurniture
 database [M cityI] DBBuildingInstallation
 event [M cityI] DBCityFurniture
 gui [M cityI] DBCityObjectGroup
[M cityI] DBGenericCityObject
 log
[M cityI] DBImplicitGeometry
 modules [M cityI] DBImporterManager
 plugin [M cityI] DBLandUse
 util [M cityI] DBOpening
[M cityI] DBPlantCover
[M cityI] DBReliefComponent
[M cityI] DBReliefFeature
[M cityI] DBRoom
[M cityI] DBSequencerEnum
[M cityI] DBSolitaryVegetatObject
[M cityI] DBSurfaceData
[M cityI] DBSurfaceGeometry
[M cityI] DBThematicSurface
[M cityI] DBTrafficArea
[M cityI] DBTransportationComplex
[M cityI] DBWaterBody
[M cityI] DBWaterBoundarySurface
[M cityI] XlinkDeprecatedMaterial
[M cityI] XlinkSurfaceGeometry
In PostgreSQL it is a common practice to assign the data type SERIAL to ID columns which are
used as primary keys. SERIAL implicitly creates a sequence with the names of table, column
and the ending “_SEQ”. The declaration “CREATE SEQUENCE” must not be written manually
like in Oracle. But this holds a trap. As names are created automatically with SERIAL they
differ from the customized names in Oracle. See also 3.3 for examples.
de.tub.citydb.modules.citygml.importer.database.content.DBSequencerEnum
32 //public enum DBSequencerEnum {
// ADDRESS_SEQ,
// APPEARANCE_SEQ,
// CITYOBJECT_SEQ,
// SURFACE_GEOMETRY_SEQ,
// IMPLICIT_GEOMETRY_SEQ,
// SURFACE_DATA_SEQ,
//}
public enum DBSequencerEnum {
ADDRESS_ID_SEQ,
APPEARANCE_ID_SEQ,
CITYOBJECT_ID_SEQ,
SURFACE_GEOMETRY_ID_SEQ,
IMPLICIT_GEOMETRY_ID_SEQ,
SURFACE_DATA_ID_SEQ,
}
15
Port documentation for Java classes of the Importer/Exporter v1.5.0-postgis
5. How to work with database geometries in Java
Packages: Classes:
 api [M cityE] DBAppearance
 cmd [M cityE] DBBuilding
[M cityE] DBCityFurniture
 config
[M cityE] DBCityObject
 database [M cityE] DBGeneralization
 event [M cityE] DBGenericCityObject
 gui [M cityE] DBReliefFeature
[M cityE] DBSolitaryVegetatObject
 log
[M cityE] DBStGeometry
 modules [M cityE] DBSurfaceGeometry
 plugin [M cityE] DBThematicSurface
 util [M cityE] DBTransportationComplex
[M cityE] DBWaterBody
 oracle.spatial.
[M cityI] DBAddress
geometry [M cityI] DBBuilding
[M cityI] DBBuildingFurniture
[M cityI] DBCityFurniture
[M cityI] DBCityObject
[M cityI] DBGenericCityObject
[M cityI] DBReliefComponent
[M cityI] DBSolitaryVegetatObject
[M cityI] DBStGeometry
[M cityI] DBSurfaceData
[M cityI] DBSurfaceGeometry
[M cityI] DBTransportationComplex
[M cityI] DBWaterBody
[M cityI] XlinkSurfaceGeometry
[M cityI] XlinkWorldFile
[U] DBUtil
[oracle] SyncJGeometry
Translating the processing of geometries to the PostGIS JDBC driver was with no doubt the
toughest job to do. This chapter shortly explains how geometries were parsed from a CityGML
document and inserted into the database and all the way back.
5.1 From CityGML to 3DCityDB
The Oracle JDBC driver handles geometries with one central class called JGeometry. One
instance of JGeometry represents SDO_GEOMETRY in the Java world. All methods of different
geometric types return JGeometry. They need three variables: an array of coordinates, the
number of dimensions and a known SRID. The geometries of CityGML are described by
geometric primitives from the citygml4j library. Their values are first transferred to list
elements and then iterated into arrays to be used by the described JGeometry methods.
JGeometry can not be set as an object for the database statements. It needs to be “stored”
into a STRUCT object, which is a wrapper class for JGeometry. This wrapper makes the object
more generic to be used by the PreparedStatement method setObject.
For the PostGIS JDBC driver the combination of geometry class and wrapper class is
represented by Geometry and PGgeometry. Geometry offers some geometric operations, but
16
Port documentation for Java classes of the Importer/Exporter v1.5.0-postgis
to create an instance of Geometry the PGgeometry method geomFromString(String) has
to be used. The values of the list elements have to iteratively build up a string and not fill an
array. The String represents the geometries in Well Known Text (WKT), which means blank
spaces between coordinates (x y z) instead of commas. To be interpreted by the database the
geometries have to be wrapped as a PGgeometry object and then set for the
PreparedStatement. See the following figures for a better understanding (the red arrows
stand for iterations):
CityGML
file
______________
List ____________________ List
getter _ __ __ __ __ __ __ __ __ __ __ __ ___ getter String geomEWKT;
- - - - - - - - - -
A R R A Y - - - - - _ _ __ __ ____ ____ ____ ____ ____ ________ - - - - - geomEWKT = geomEWKT +
- - - - - ________________ - - - - - List.get(int) ...
- - - - - __ __ ____ ____ ____ ____________ - - - - -
Import of geometries
create
geomFromString
JGeometry
store setObject setObject Geometry
PSt PSt
new
STRUCT PGgeometry
3D-CityDB
Fig. 1: Import of geometries in Java (PSt = PreparedStatement) (Kunde 2012 [2])
CityGML
file
______________
List ____________________ List
setter ______________ setter
- - - - - ____________ - - - - -
A R R A Y - - - - - _ _ __ __ ____ ____ ____ ____ ____ ________ - - - - -
- - - - - ________________ - - - - -
- - - - - _ _ __ ____ ____ ____ ____________ - - - - -
Export of geometries
getter getter
JGeometry Geometry
load getObject getObject (& Subklassen)
RSet RSet
getGeometry
(STRUCT) (PGgeometry)
3D-CityDB
Fig. 2: Export of geometries in Java (RSet = ResultSet) (Kunde 2012 [2])
17
Port documentation for Java classes of the Importer/Exporter v1.5.0-postgis
de.tub.citydb.modules.citygml.importer.database.content.DBAddress
94 // private DBSdoGeometry sdoGeometry;
rep+ private DBStGeometry stGeometry;
114 // sdoGeometry = (DBSdoGeometry)dbImporterManager.getDBImporter(
rep+ DBImporterEnum.SDO_GEOMETRY);
stGeometry = (DBStGeometry)dbImporterManager.getDBImporter(
DBImporterEnum.ST_GEOMETRY);
138 // JGeometry multiPoint = null;
rep+ PGgeometry multiPoint = null;
260 // multiPoint = sdoGeometry.getMultiPoint(address.getMultiPoint());
rep+ multiPoint = stGeometry.getMultiPoint(address.getMultiPoint());
274 // if (multiPoint != null) {
rep+ // Struct multiPointObj= SyncJGeometry.syncStore(multiPoint,batchConn);
// psAddress.setObject(8, multiPointObj);
// } else
// psAddress.setNull(8, Types.STRUCT, "MDSYS.SDO_GEOMETRY");
if (multiPoint != null) {
psAddress.setObject(8, multiPoint);
} else
psAddress.setNull(8, Types.OTHER, "ST_GEOMETRY");
de.tub.citydb.modules.citygml.importer.database.content.DBCityObject
214 // double[] ordinates = new double[points.size()];
rep+ // int i = 0;
// for (Double point : points)
// ordinates[i++] = point.doubleValue();
// JGeometry boundedBy =
// JGeometry.createLinearPolygon(ordinates, 3, dbSrid);
// STRUCT obj = SyncJGeometry.syncStore(boundedBy, batchConn);
//
// psCityObject.setObject(4, obj);
String geomEWKT = "SRID=" + dbSrid + ";POLYGON((";
for (int i=0; i values = point.toList3d();
// if (values != null && !values.isEmpty())
// pointGeom = JGeometry.createPoint(toArray(values),
// 3, dbSrid);
// }
// return pointGeom;
// }
public PGgeometry getPoint(Point point) throws SQLException {
PGgeometry pointGeom = null;
if (point != null) {
List values = point.toList3d();
if (values != null && !values.isEmpty()) {
if (affineTransformation)
dbImporterManager.getAffineTransformer().
transformCoordinates(values);
pointGeom = new PGgeometry(PGgeometry.geomFromString(
"SRID=" + dbSrid + ";POINT(" +
values.get(0) + " " + values.get(1) +
" " + values.get(2) + ")"));
}
}
return pointGeom;
}
141 // public JGeometry getMultiPoint(MultiPoint multiPoint) {
rep // JGeometry multiPointGeom = null;
//
// if (multiPoint != null) {
// List> pointList = new ArrayList>();
//
// if (multiPoint.isSetPointMember()) {
// for (PointProperty pointProperty :
// multiPoint.getPointMember())
//
// if (pointProperty.isSetPoint())
// pointList.add(pointProperty.getPoint().toList3d());
//
// } else if (multiPoint.isSetPointMembers()) {
// PointArrayProperty pointArrayProperty =
// multiPoint.getPointMembers();
// for (Point point : pointArrayProperty.getPoint())
// pointList.add(point.toList3d());
// }
//
// if (!pointList.isEmpty())
// multiPointGeom = JGeometry.createMultiPoint(
// toObjectArray(pointList), 3, dbSrid);
// }
19
Port documentation for Java classes of the Importer/Exporter v1.5.0-postgis
// return multiPointGeom;
// }
public PGgeometry getMultiPoint(MultiPoint multiPoint) throws SQLException
{
PGgeometry multiPointGeom = null;
if (multiPoint != null); {
List> pointList = new ArrayList>();
if (multiPoint.isSetPointMember()) {
for (PointProperty pointProperty :
multiPoint.getPointMember())
if (pointProperty.isSetPoint())
pointList.add(
pointProperty.getPoint().toList3d());
} else if (multiPoint.isSetPointMembers()) {