title:Traceback for End-to-End Encrypted Messaging
author:Nirvan Tyagi and
Ian Miers and
Thomas Ristenpart
Traceback for End-to-End Encrypted Messaging
Nirvan Tyagi
Cornell University
Ian Miers
Cornell Tech
Cornell Tech
Thomas Ristenpart
University of Maryland
ABSTRACT
Messaging systems are used to spread misinformation and other
malicious content, often with dire consequences. End-to-end en-
cryption improves privacy but hinders content-based moderation
and, in particular, obfuscates the original source of malicious con-
tent. We introduce the idea of message traceback, a new crypto-
graphic approach that enables platforms to simultaneously provide
end-to-end encryption while also being able to track down the
source of malicious content reported by users. We formalize func-
tionality and security goals for message traceback, and detail two
constructions that allow revealing a chain of forwarded messages
(path traceback) or the entire forwarding tree (tree traceback). We
implement and evaluate prototypes of our traceback schemes to
highlight their practicality, and provide a discussion of deployment
considerations.
ACM Reference Format:
Nirvan Tyagi, Ian Miers, and Thomas Ristenpart. 2019. Traceback for End-
to-End Encrypted Messaging. In 2019 ACM SIGSAC Conference on Computer
and Communications Security (CCS ’19), November 11–15, 2019, London,
United Kingdom. ACM, New York, NY, USA, 19 pages. https://doi.org/10.
1145/3319535.3354243
1 INTRODUCTION
Over a billion people communicate using end-to-end (E2E) en-
crypted messaging on platforms like WhatsApp [5], Signal [2],
and Telegram [3]. Unfortunately, these platforms are being increas-
ingly used for viral misinformation campaigns [19, 22, 23] in which
parties send messages with misleading or false information, and
encourage them to be forwarded by the recipient. Such campaigns
have serious consequences, examples include lynchings [22] and
impact on democratic elections [19].
In unencrypted contexts, such as Twitter or the Facebook news
feed, platforms have started to combat misinformation campaigns
with content moderation, tracing harmful messages sent through
their network and intervening as deemed appropriate, e.g., by
banning the “factory” accounts that are injecting such content
into the network. But E2E encryption complicates moderation be-
cause the platform never observes plaintext content. Message frank-
ing [13, 14, 17] allows cryptographically verified content modera-
tion, but current techniques only reveal the sender of a received
message and do not by themselves help identify the source of a
forwarded message. Platforms have so far relied solely on crude
techniques like limiting the number of people to which any message
can be forwarded [33].
CCS ’19, November 11–15, 2019, London, United Kingdom
© 2019 Copyright held by the owner/author(s). Publication rights licensed to ACM.
This is the author’s version of the work. It is posted here for your personal use. Not for
redistribution. The definitive Version of Record was published in 2019 ACM SIGSAC
Conference on Computer and Communications Security (CCS ’19), November 11–15, 2019,
London, United Kingdom, https://doi.org/10.1145/3319535.3354243.
In this paper, we initiate the study of tracing for E2E encrypted
messaging. At a high level, tracing should allow users to report an
abusive message along with supporting cryptographic key material
to the messaging platform. Using this material, the platform can re-
cover a cryptographically verifiable trace of the message, revealing
the source and how the message was forwarded between users.
The first challenge is pinning down achievable and useful secu-
rity goals for tracing. A priori it is unclear what tracing can provide
in the presence of malicious users (with compromised clients). For
example, it seems possible for a malicious user to “partition” the
traceback by avoiding a built-in forwarding mechanism (thereby
tricking the service into thinking it’s a new message). We identify
achievable goals for trace accountability, which, at a high level, en-
sure that no honest user can be erroneously implicated in sending,
receiving, or forwarding a message. Thus tracing will always iden-
tify as the source either the true author of a message or a malicious
user who partitioned the trace, a goal we formalize.
The second challenge is achieving accountable tracing with mini-
mal impact on the E2E confidentiality goals of encrypted messaging.
In most encrypted messaging systems, the platform learns that some
message is being sent from one user to another, but never learns
about plaintext content nor whether a message is a forward. We
want to preserve these goals, with the exception that, when a mes-
sage is reported, that message’s plaintext and forwarding chain is
revealed. Importantly, our security goals mandate that unreported
messages retain privacy. We additionally want traceback schemes
that provide third-party deniability (only the platform can crypto-
graphically verify messages sent), a confidentiality goal explicitly
sought by encrypted messaging systems [14].
We design two traceback schemes. The first, called path trace-
back, uses lightweight symmetric encryption techniques to add
specially constructed tracing tags to ciphertexts. A tracing tag is
an encrypted pointer to either the prior message, in the case of a
forward, or a distinguished symbol in the case of a freshly authored
message. The ability to decrypt the tracing tag is secret-shared
across the platform and the recipient, so that only when a recipient
reports the message can the platform decrypt the tracing tag and
reveal information about forwards. By carefully ensuring that sub-
sequent forwards’ tracing tags form an encrypted linked list, the
platform can, given an abuse report, trace back to the source of the
message content.
Our second scheme is called tree traceback. It extends path trace-
back to additionally allow tracing forward from the original source
to recover all the recipients of forwards of the message content.
Tree traceback could be useful to platform operators when miti-
gating and cleaning up after abuse, since it allows, for example,
identifying the victims of misinformation campaigns. Achieving
it is more complicated, however, in particular because we want
to build an encrypted tree data structure incrementally, allowing
tracing to connect all forwards of a message, including ones that
will happen in the future. We nevertheless show how to achieve it.
Our two schemes are practical to deploy. By design, they work
with arbitrary E2E encryption systems. They utilize only fast sym-
metric encryption and cryptographic hashing, and add a small
number of bytes to each encrypted message. The schemes do re-
quire that the platform store a short trace tag (<100 bytes) for each
encrypted message sent, which is nevertheless practical even for
high-volume messaging systems. We implement a prototype of both
of our schemes, report on initial performance evaluation, and detail
how traceback can be easily integrated into existing E2E encryption
protocols such as Signal [2].
In summary, our contributions are as follows:
• We introduce the notion of traceback for E2E encrypted mes-
saging. We detail a formalization of tracing schemes and as-
sociated security goals, including various confidentiality and
accountability goals.
• We design two secure tracing schemes, enabling tracing the
path of a message or, additionally, the entire forwarding tree.
We give formal analyses showing these schemes meet our
security goals.
• We report on and open-source a prototype implementation of
our constructions, and show how they can be easily integrated
into existing E2E encryption systems.
2 SETTING AND GOALS
We consider an E2E encrypted message setting, in which a plat-
form helps users send encrypted messages. A primary goal of such
messaging services is confidentiality of user messages. While some
industry [21] and academic [31, 32, 34] systems also target metadata
privacy, i.e., obfuscating from the platform who is the sender or re-
cipient (or both), we restrict attention to systems such as Facebook
secret messenger, Whatsapp, and Signal (without the sealed sender
feature) that reveal such metadata to platforms.
Some messaging clients allow forwarding of encrypted messages
though others have not yet deployed forwarding features.1 While
forwarding is beneficial to legitimate users, it has also been subject
to abuse by users spreading malicious content [19, 22]
In this work, we show how to augment encrypted messaging
systems to allow users to report a malicious message. The platform
can, given this report, trace the path a message took as it was for-
warded across the network of users. This enables new moderation
approaches, as we discuss more at the end of this section. We first
discuss our confidentiality and accountability goals in more detail.
Confidentiality goals. We want to support traceback while min-
imizing impact on E2E confidentiality guarantees. Messages and
forwarding behavior (whether an encrypted message is a forward,
and from whom) should be confidential even from the platform,
except in the case that the message was reported. For non-reported
messages, neither the platform nor users should ever learn anything
new due to the tracing functionality. In particular, we want:
1Signal allows forwarding with no indication the message is a forward, WhatsApp in-
cludes an indicator, and iMessage, Telegram, and Facebook Messenger do not currently
support forwarding in encrypted chats.
•
•
•
Trace confidentiality for users: Users should not learn any
information about message paths beyond their local view of
receiving and sending messages.
Pre-report trace confidentiality for platform: Before a report,
the platform should not learn any additional information
about the message path beyond communication metadata
(e.g., receiver, sender, timing, message length).
Post-report trace confidentiality for platform: After a report,
the platform should learn the message trace and nothing more.
These confidentiality goals emanate from our intention to hew
closely to the existing behavior and privacy offered by deployed
E2E messaging systems. First, we have chosen to ensure that tracing
does not reveal to even a malicious user if they are receiving a
forwarded message or a fresh one. Here, deployed systems take
different approaches and we chose the approach that maximizes
compatibility. Whatsapp reveals to the recipient that a message is a
forward, but does not reveal from whom [33]. Signal, in contrast,
does not identify forwarded messages. By providing forwarding
privacy, our tracing schemes work in both contexts.
Second, we have chosen to explicitly reveal messaging meta-data.
This means the platform can tell that A communicated with B who
then communicated with C. Our second choice is to conceal from
the platform whether B sent a fresh message to C or forwarded
the message they got from A. Together these choices preserve the
general property of E2E encrypted messaging systems such as
WhatsApp and iMessage: the platform learns who messages who
but nothing about the content of the message.
Traffic analysis by a (compromised or otherwise malicious) plat-
form may allow inferring forwarding behavior. For example, if the
platform observes a single 125 byte inbound message to some user
followed shortly after by 20 outbound messages of size 125 bytes,
it is likely a sequence of forwards. We will not attempt to prevent
such traffic analysis, which would require expensive padding and
timing obfuscations.
Finally we note that our schemes will not interfere with cryp-
tographic deniability. In the messaging setting, this refers to the
idea that recipients should not be able to provide to a third party
cryptographic evidence proving that the sender sent a particular
plaintext. For example, providing a recipient with a digital signa-
ture of a plaintext using the sender’s private key would violate
our goals. Deniability was explicitly sought by Facebook’s message
franking system [14], and by using symmetric primitives we will
achieve whatever level of deniability is offered by the underlying
E2E encryption mechanisms.
Accountability goals. In this paper, we propose two different
types of traceback. The simplest form is path traceback which allows
a platform to trace a reported message back to its origin, identifying
every forward along the path. This allows the originator to be
held accountable for a message that is forwarded. Separately, we
consider tree traceback, which allows messages to be traced both
back to their origin and to identify all forwards of the message.
This enables not only the identification of the sender, but also of
recipients. It may be useful for helping notify users about malicious
content, or blocking further forwards of the message. A particular
complication for tree traceback is that the platform should be able
message (see Section 8 for more discussion). Moreover, this kind
of defense relies upon the integrity of the client software, as an
adversary using a compromised client can avoid client-side detec-
tion logic and directly submit encrypted content to the platform. In
Section 8, we discuss how future work might target prevention of
partition attacks despite compromised clients through the use of
more heavyweight tools such as trusted hardware and expensive
zero-knowledge proofs.
For the purposes of this work, we require only that a malicious
user will be left holding “both ends” of a partitioned chain. That is,
there will be a trace including the malicious user as having received
the original message and a (possibly different) trace including the
malicious user as having sent the message. In the end, this means
that we will guarantee messages will be traceable either to the
original source or to a malicious user that partitioned the chain.
The effectiveness of tracing. A final question arises: if it is pos-
sible for a user to bypass our proposed tracing protections via a
hacked client, is tracing effective? We believe so. Abuse mitigation
techniques need not be perfect to be effective, and even just reduc-
ing the amount of abuse is worthwhile. There is empirical evidence
that protections that can be bypassed even by simple copy-paste
behavior can still be effective. WhatsApp ran an experiment on the
effectiveness of limiting the number of forwards a user could make
of a given message. They found that this was effective despite the
fact that the user could circumvent the limit after they reached it
by simply copy and pasting the message. As a result, this forward
limitation is now deployed globally [33].
Deployment, policy, and ethical considerations. Tracing can
be used to identify the source of malicious or harassing messages.
But like most technologies for content moderation, the same tools
are at risk of use for silencing whistleblowers, activists, or others
producing socially valuable content. Once the source account of a
message is identified, they may face reprisals. We therefore believe
care should be taken when deploying tracing schemes lest they
themselves become abused by authoritarian regimes or others.
A material difference between tracing and prior approaches is
that a reporter can implicate people with whom they did not di-
rectly communicate (i.e., the source of the message). Platforms can
deploy appropriate policies and cryptographic safeguards in order
to prevent abuse of the additional tracing functionality. We envi-
sion an architecture in which automated and human moderator
pipelines can be used to first decide whether tracing functionality
should be used on reported content. Policy could dictate use of
tracing only in appropriate cases (e.g., terrorist propaganda, child
pornography) versus other reported content for which less drastic
actions than tracing might suffice (e.g., punitive measures against
the immediate sender). Platform policy could also dictate deleting
the tracing ciphertexts needed to perform traceback after some
specified period of time. The challenge of developing such policies
and building moderator pipelines that can enact them will need
future research; we focus on showing the cryptographic viability
of performing secure tracing when it is appropriate.
(a) Forwarding paths
(b) Pre-report view
(c) Message franking
(d) Path traceback
(e) Tree traceback
Figure 1: Example of message forwards and what different trace-
back mechanisms report. Nodes are users and edges are message
sends, with forwarding paths denoted in the same color. Subfigures
(c), (d), and (e) depict what is revealed to the platform when the blue
message is reported by the user indicated by the red circle.
to trace all forwards including those that occur after the report is
made. A visualization of the different traceback policies are shown
in Figure 1. Shown also there is what message franking [13, 14, 17]
supports in terms of accountability. Our path and tree traceback
can be seen as generalizations of message franking.
As was done previously with message franking, we want to en-
sure various accountability properties even in the face of malicious
users. But our setting is more complicated because tracing requires
reasoning about multiple messages sent, as opposed to a single
one. Intuitively, we require that no colluding set of adversarial
users can frame an honest user as having performed some action
(sending, receiving, or forwarding a message with some particular
plaintext content) that they did not, in fact, perform. This implies,
for example, the following accountability goals:
•
Trace unforgeability: No group of colluding users can generate
a report implicating an honest user as having performed an
action they did not, in fact, perform.
Sender binding: No user can author a message that cannot be
traced back to them.
•
Note that trace unforgeability can be seen as a generalization of
the receiver binding property targeted by message franking.
There are some limits to the level of accountability that we target
(and that our eventual schemes will provide). In particular, we allow
for malicious users to partition the traceback. In these “partition
attacks”, a malicious user can split a forwarding chain so as to
make themselves appear as the end of one side of the split and
the source of the other side. This seems fundamentally unavoid-
able. Consider that a malicious user can bypass the cryptographic
forwarding mechanism and emulate a forward by resending a mes-
sage via a copy-paste of the received plaintext. In theory, the client
software could be modified to flag such copy-paste forwards by
comparing incoming and outgoing plaintexts (after decryption and