# Traceback for End-to-End Encrypted Messaging

**Authors:**
- Nirvan Tyagi, Cornell University
- Ian Miers, Cornell Tech
- Thomas Ristenpart, University of Maryland

## Abstract

Messaging systems are frequently used to spread misinformation and other malicious content, often with severe consequences. While end-to-end encryption (E2EE) enhances privacy, it also hinders content-based moderation and obfuscates the original source of malicious content. We introduce the concept of message traceback, a novel cryptographic approach that enables platforms to provide E2EE while simultaneously tracking the source of reported malicious content. We formalize the functionality and security goals for message traceback and present two constructions: path traceback, which reveals a chain of forwarded messages, and tree traceback, which reveals the entire forwarding tree. We implement and evaluate prototypes of our traceback schemes to demonstrate their practicality and discuss deployment considerations.

## ACM Reference Format

Nirvan Tyagi, Ian Miers, and Thomas Ristenpart. 2019. Traceback for End-to-End Encrypted Messaging. In 2019 ACM SIGSAC Conference on Computer and Communications Security (CCS '19), November 11â€“15, 2019, London, United Kingdom. ACM, New York, NY, USA, 19 pages. https://doi.org/10.1145/3319535.3354243

## 1. Introduction

Over a billion people use E2EE messaging platforms such as WhatsApp, Signal, and Telegram. Unfortunately, these platforms are increasingly being used for viral misinformation campaigns, where misleading or false information is sent and encouraged to be forwarded. Such campaigns have serious consequences, including lynchings and impacts on democratic elections.

In unencrypted contexts like Twitter or Facebook, platforms combat misinformation through content moderation, tracing harmful messages, and intervening by, for example, banning accounts that inject such content. However, E2EE complicates moderation because the platform never observes plaintext content. Message franking allows cryptographically verified content moderation but only reveals the sender of a received message, not the source of a forwarded message. Platforms have thus relied on crude techniques like limiting the number of forwards.

In this paper, we initiate the study of tracing for E2EE messaging. Tracing should allow users to report an abusive message along with supporting cryptographic key material. The platform can then recover a cryptographically verifiable trace, revealing the source and how the message was forwarded between users.

### Challenges and Goals

The first challenge is defining achievable and useful security goals for tracing. Malicious users could potentially "partition" the traceback by avoiding built-in forwarding mechanisms. We identify achievable goals for trace accountability, ensuring no honest user is erroneously implicated in sending, receiving, or forwarding a message. Thus, tracing will always identify either the true author or a malicious user who partitioned the trace.

The second challenge is achieving accountable tracing with minimal impact on E2EE confidentiality. In most encrypted messaging systems, the platform learns that a message is being sent from one user to another but never learns about plaintext content or whether a message is a forward. We aim to preserve these goals, except when a message is reported, revealing its plaintext and forwarding chain. Our security goals mandate that unreported messages retain privacy. Additionally, we want traceback schemes that provide third-party deniability, a confidentiality goal sought by encrypted messaging systems.

### Traceback Schemes

We design two traceback schemes:
1. **Path Traceback**: Uses lightweight symmetric encryption to add specially constructed tracing tags to ciphertexts. A tracing tag is an encrypted pointer to the prior message (if a forward) or a distinguished symbol (if a freshly authored message). The ability to decrypt the tracing tag is secret-shared across the platform and the recipient, so only when a recipient reports the message can the platform decrypt the tracing tag and reveal information about forwards. By forming an encrypted linked list, the platform can trace back to the source of the message content.
2. **Tree Traceback**: Extends path traceback to allow tracing from the original source to recover all recipients of forwards. This is more complex, requiring an incrementally built encrypted tree data structure to connect all future forwards. Despite the complexity, we show how to achieve it.

### Practicality and Integration

Our schemes are practical to deploy, working with arbitrary E2EE encryption systems. They use fast symmetric encryption and cryptographic hashing, adding only a small number of bytes to each encrypted message. The platform must store a short trace tag (<100 bytes) for each encrypted message, which is feasible even for high-volume systems. We implement prototypes of both schemes, report on initial performance evaluations, and detail how they can be integrated into existing E2EE encryption protocols like Signal.

### Summary of Contributions

- We introduce the notion of traceback for E2EE messaging, formalizing tracing schemes and associated security goals, including confidentiality and accountability.
- We design two secure tracing schemes, enabling tracing the path of a message or the entire forwarding tree, and provide formal analyses showing they meet our security goals.
- We open-source a prototype implementation and show how they can be easily integrated into existing E2EE encryption systems.

## 2. Setting and Goals

We consider an E2EE encrypted message setting where a platform helps users send encrypted messages. The primary goal is confidentiality of user messages. While some systems target metadata privacy, we focus on systems like Facebook Secret Messenger, WhatsApp, and Signal (without the sealed sender feature) that reveal metadata to the platform.

Some messaging clients allow forwarding of encrypted messages, though others do not. Forwarding is beneficial to legitimate users but has been abused to spread malicious content. We show how to augment encrypted messaging systems to allow users to report a malicious message, enabling the platform to trace the path a message took as it was forwarded across the network of users. This supports new moderation approaches.

### Confidentiality Goals

- **Trace Confidentiality for Users**: Users should not learn any information about message paths beyond their local view of receiving and sending messages.
- **Pre-Report Trace Confidentiality for Platform**: Before a report, the platform should not learn additional information about the message path beyond communication metadata.
- **Post-Report Trace Confidentiality for Platform**: After a report, the platform should learn the message trace and nothing more.

These goals ensure that tracing does not reveal if a user is receiving a forwarded message or a fresh one, preserving the general property of E2EE messaging systems where the platform learns who messages whom but nothing about the content.

### Accountability Goals

- **Path Traceback**: Allows the platform to trace a reported message back to its origin, identifying every forward along the path.
- **Tree Traceback**: Allows tracing both back to the origin and to identify all forwards, enabling the identification of the sender and recipients.

### Effectiveness and Ethical Considerations

Tracing can be effective even if a user bypasses protections via a hacked client. Abuse mitigation techniques need not be perfect to be effective. For example, WhatsApp found that limiting the number of forwards was effective despite users circumventing the limit by copy-pasting messages.

Tracing can identify the source of malicious or harassing messages but risks being used to silence whistleblowers, activists, or others producing socially valuable content. Careful deployment policies and cryptographic safeguards are essential to prevent abuse. We envision an architecture where automated and human moderators decide whether to use tracing based on the nature of the reported content.

### Visualization

Figure 1 illustrates different traceback policies, showing what is revealed to the platform when a message is reported. Path and tree traceback can be seen as generalizations of message franking.

## Conclusion

Our work introduces message traceback, a cryptographic approach that enables platforms to provide E2EE while tracking the source of reported malicious content. We formalize the functionality and security goals, design two secure tracing schemes, and demonstrate their practicality and integration into existing E2EE systems. Future research will focus on developing policies and moderator pipelines to ensure the ethical and effective use of traceback.