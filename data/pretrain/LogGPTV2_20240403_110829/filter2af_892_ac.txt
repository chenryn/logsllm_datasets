其中包含了如下经过签名的函数：
`get()`和`die()`函数很简单，可以用伪代码表示，如下所示，
我们可以假设`get()`是作为完整性检查提供的，而`die()`显然是我们需要调用以解决此CTF的函数。
    address private storage_00;
    address private storage_20;
    function get() public returns (address) {
        require(msg.sender != storage_00);
        return storage_00;
    }
    function die() public {
        require(msg.sender == storage_20);
        selfdestruct(storage_20);
    }
仔细查看set(uint256)函数，我们发现此函数内容非常复杂，由于该函数需要进行手动堆栈调用，其调用过程我总结如下：
    function stack_push(uint256 value) private {
        memory[memory[0x100]+0x20] = value;
        memory[0x100] = memory[0x100] + 0x20;
    }
    function stack_get(uint256 depth) private {
        return memory[memory[0x100] - depth*0x20];
    }
    function stack_pop() private returns (uint256 value) {
        value = memory[memory[0x100]];
        memory[0x100] = memory[0x100] - 0x20;
    }
    function stack_push_frame() private {
        stack_push(memory[0x100]);
    }
    function stack_pop_frame() private returns (uint256 dest) {
        dest = stack_pop();
        memory[0x100] = stack_pop();
    }
使用调用堆栈函数，set(uint256)可以表示如下：
    function set(uint256 value) public {
        stack_push_frame();
        stack_push(return_lbl);
        stack_push(value);
        stack_push(0x00);
        set_impl();
    return_lbl:
        return;
    }
    function set_impl() private {
        storage[stack_get(0)] = stack_get(1);
        stack_pop();
        stack_pop();
        goto stack_pop_frame();
    }
简洁一点：
    address private storage_00;
    function set(uint256 value) public {
        storage_00 = address(value);
    }
    function 0x7909947a() public {
        memory[0x100] = 0x100;
        stack_push(0x00);
        var var1 = memory[0x100]; // 0x120
        stack_push(0x00);
        memcpy(memory[0x90000], msg.data[0x44], msg.data.length-0x44);
        stack_push_frame();
        stack_push(irrelevant_lbl);
        stack_push(0x90000);
        stack_push(var1);
        stack_push(msg.data.length - 0x44);
        stack_push(0x00);
        0x7909947a_impl();
    irrelevant_lbl:
        // some irrelevant code
    }
    function 0x7909947a_impl() private {
        copy_data();
        memory[stack_get(2) + stack_get(0)] = 0x00;
        pad_data();
        stack_pop();
        stack_pop();
        stack_pop();
        stack_pop();
        goto stack_pop_frame();
    }
    function copy_data() private {
        while (stack_get(0) - stack_get(1) != 0) {
            memory[stack_get(2) + stack_get(0)] = memory[stack_get(3) + stack_get(0)] >> 248;
            memory[memory[0x100]] = memory[memory[0x100]] + 0x01;
        }
    }
    function pad_data() private {
        while (stack_get(0) % 0x40 != 0) {
            memory[stack_get(2) + stack_get(0)] = 0x00;
            memory[memory[0x100]] = memory[memory[0x100]] + 0x01;
        }
    }
当攻击者能够溢出调用堆栈时，他们可以使用`ROP`通过破坏返回地址来重定向程序的控制流。
由于CTF的大多数目标是对token进行窃取，所以显然我们需要以某种方式将我们的地址写入内存0x20处。我们在set_impl上进行数据写入，将stack_get(1)写入stack_get(0)。
利用set_impl中的操作，我们使堆栈变为下面的样子：
    --------------------------------    |       stack frame set()      |
    --------------------------------    |  address of 'return' gadget  |     |
    --------------------------------     |   stack grows down
    |          our address         |     V
    --------------------------------    |             0x20             |
    --------------------------------
但是，当输入`0x7909947a_impl()`时，我们的堆栈如下：
    ----------------------------------    |              0x00              |     0);
            selfdestruct(msg.sender);
        }
    }
本次两道题目难度较大，需要进行逆向，且与常规的题目不太相同，希望能帮助读者更进一步理解。
### 参考链接
  * 
  * 
  * 
  * 
  * 