to VFW2’. For example, for the following v
and f
*
*
10.10.2.*
10.10.2.1
*
*
192.1.1.9
192.1.1.*
80
80
deny
send to VFW1
and IDS1
the new ﬂow rule f(cid:48) is:
*
10.10.2.1
*
192.1.1.9
80
send to VFW2
and IDS1
v
f
f(cid:48)
v
f
f(cid:48)
After all
the groups in F = {F1, ..., Fn} have been
examined, VFW Controller obtains the update of SW to
support the migration of Vi. When comparing Vi with each Fj
as above, VFW Controller also keeps track of the number
of new ﬂow rules that are INSERTed. In what follows we
denote that number as αij.
B. Update Cost and Cost Reduction
As presented above, updates of the ﬂow rules on SW consist
of INSERT and CHANGE operations. Each INSERT operation
causes an increase in the number of ﬂow rules in the SW
switch. The TCAM space for holding ﬂow rules in an SDN
switch is valuable and limited, therefore increases in the size
of ﬂow rules must be tracked. We deﬁne the update cost of
ﬁrewall rule group Vi as follows.
Deﬁnition 8 (Update Cost). The update cost of a ﬁrewall rule
group is the total number of new ﬂow rules inserted in SW
during its update to support the migration of Vi.
Let γi be the update cost of Vi, then we have
7
ToR Switch (SW)ServersAggregation SwitchVFW1VFW2Case (a)Case (b)Case (c)10.10.*.*192.1.*.*Core SwitchServersAggregation Swtich (SW)VFW1VFW2ToR Switches192.1.*.*ServerVFW110.10.*.*ToR SwitchOpen vSwtich(SW)VFW2Core SwitchAggregation Switch10.10.*.*192.1.*.*Core SwitchFig. 5: Workﬂow of migration control.
n(cid:88)
j=1
γi =
αij
Given a large number of virtual ﬁrewalls in a virtualized
environment and the fact that constant ﬁrewall rule migrations
are expected, the total update cost must be reduced. There are
two ways to reduce the total update cost:
•
•
Select ﬁrewall rule groups that cause smaller update
cost for migration.
Analyze the relationships between ﬁrewall rule class
and ﬂow rule group. The comparison we have per-
formed in §V-A is pairwise between a ﬁrewall rule
group Vi and a ﬂow group Fj.
int Fj, and V1∪ V2
We observed that new ﬂow rules are inserted only when
int Fj. If there is a class ¯V that consists of Vi
sub Fj or Vi
Vi
and other ﬁrewall rule groups and ¯V sup Fj, then no new ﬂow
rules will be inserted. To see why, consider a simple case as
follows. Two ﬁrewall rule groups V1 and V2 are to be migrated.
Fj ∈ F is one ﬂow rule group in SW and we have V1
int Fj
sup Fj. Both INSERT and CHANGE
and V2
operations are required for the migration of V1 and V2. Let α1j
be the number of new ﬂow rules that will be inserted to Fj in
order to support the migration of V1, and α2j be the number
of new ﬂow rules needed in order to support the migration of
V2. Thus the total number of new ﬂow rules to be inserted to
Fj is α1j + α2j. Let ¯V = V1 ∪ V2, because ¯V sup Fj, then no
INSERT operation is required to support the migration of ¯V ,
hence the total number of new ﬂow rules to be inserted is 0.
Based on such observation, we propose the following class-
based migration strategy in VFW Controller to reduce the
total update cost:
Class-Based Migration Strategy:
the update cost of
migrating a class ¯V = ∪m(cid:48)
i=1Vi is smaller than the sum of the
update cost of each Vi that constitutes ¯V , then ¯V is migrated
as a big group to the same destination virtual ﬁrewall to reduce
update cost.
If
VI. BUFFER COST ANALYSIS
Migration of a ﬁrewall rule group Vi from a source virtual
ﬁrewall VFW1 to a destination virtual ﬁrewall VFW2 consists
of the following key procedures: moving Vi and corresponding
ﬂow states on VFW1 to VFW2, installing of Vi and the states
on VFW2, and updating the ﬂow rules in the involved SDN
switches to reroute trafﬁc matching Vi to VFW2, and deleting
Vi and the states on VFW1.
8
Fig. 6: Packet paths during the migration.
During the migration, in-ﬂight trafﬁc will be generated and
need to be buffered until the installation completes. Then, in-
ﬂight trafﬁc will be ﬂushed to VFW2 for processing. Prior
knowledge on the amount of in-ﬂight
to
avoid buffer overﬂow. We observed that the migration of each
ﬁrewall rule (group) incurs different amount of in-ﬂight trafﬁc.
Based on the prior knowledge, we can select ﬁrewall rule
groups to migrate in order to avoid overﬂowing the buffers
of the destination virtual ﬁrewalls.
trafﬁc is crucial
We deﬁne the buffer cost of a ﬁrewall rule group as follows:
Deﬁnition 9 (Buffer Cost). The buffer cost of a ﬁrewall
rule group is the amount of in-ﬂight trafﬁc that are generated
during the migration of the group.
We next present the migration control mechanism used
in VFW Controller, followed by how to calculate buffer
cost. The challenge is to model the migration control and
quantify the time period from the start of buffering to the
release of the buffered trafﬁc. Factors affecting the time period
include delays introduced by end-host (OS, compute resource
assigned to a virtual ﬁrewall, etc.), which depend on cloud
infrastructure.
As shown in Figure 5, VFW Controller adopts dis-
tributed buffering mechanism derived from [27] to buffer in-
ﬂight trafﬁc at each destination instance. First, the central
controller invokes API function accept(VFW1) on VFW2 to
inform on the upcoming export of ﬁrewall rules and ﬂow
states from VFW1. Second, the controller invokes another API
function transfer(VFW2, fspace) to instruct VFW1 to transfer
the ﬁrewall rules and the ﬂow states deﬁned in fspace to
VFW2. Then VFW1 transfers the speciﬁed ﬁrewall rules and
states to VFW2. After receiving them, VFW2 installs them
immediately. The controller waits for the installation to be
completed and issues updates to SW switch. Before the update
ﬁnishes, SW keeps sending trafﬁc to VFW1, and VFW1
continues processing these trafﬁc. If any trafﬁc, which VFW1
processes after the transfer of the ﬁrewall rules and ﬂow states,
causes the state of a ﬂow to evolve, then the trafﬁc is sent by
VFW1 to VFW2. VFW2 reprocesses this trafﬁc to bring its
state up to date. After the updates on SW complete, VFW2
receives trafﬁc directly from SW. The trafﬁc directly from SW
must be buffered at VFW2. VFW2 can only start to process
the buffered trafﬁc until it has received and processed all the
trafﬁc from VFW1. This is to ensure that VFW2 has the most
updated states before process the buffered trafﬁc.
 Controller2. Call transfer(VFW2 , fsapce)VFW11. Call accept(VFW1) SWBuﬀers3. Export ﬁrewall rules and states4. UpdateVFW2SWVFW1VFW2t0: transfer beginst1: update ﬁnishest0-d1t1+d2: begins to buﬀer packetst1+d1t1+d1+b1t1+d1+b1+d3t1+d1+b1+d3+b2: begins to process buﬀered packetsprocess time b1reprocess time b2A. Buffer Cost Calculation
VII. OPTIMAL SCALING
Figure 6 shows the packet paths during the migration of
Vi. In Figure 6,
•
•
•
•
•
•
•
t0: is the time that VFW1 starts to transfer the ﬁrewall
rules and ﬂow states speciﬁed in fspace;
t1: is the time that SW ﬁnishes the update;
d1: is the transmission delay between SW and VFW1;
d2: is the transmission delay between SW and VFW2;
d3: the transmission delay between VFW1 and VFW2;
b1: is the average time that VFW1 spends processing
a packet; and
b2: is the average time that VFW2 spends processing
a packet.
At SW, the trafﬁc matching Vi that arrives before t1 is
sent to VFW1, and after t1 it is sent to VFW2. Let Γ be a set
comprising the matching trafﬁc that arrives during (t0−d1, t1).
Γ is shown as the blue part in Figure 6. Trafﬁc in Γ is sent to
VFW1.
At VFW1, the ﬁrewall rules and ﬂow states deﬁned in
fspace are sent to VFW2. Trafﬁc in Γ starts to arrive after
t0, and the last packet in Γ arrives before t1 + d1. VFW1
processes all the trafﬁc in Γ. VFW1 ﬁnishes processing Γ
before t1+d1+b1. If any trafﬁc in Γ whose processing causes
the state of a ﬂow to evolve, VFW1 will send the trafﬁc to
VFW2 for reprocessing in order to keep state consistency. For
generality, we assume all the trafﬁc in Γ are sent to VFW2
for reprocessing. This assumption will lead to an estimate of
buffer cost that is larger than the actual cost in some cases.
Given that we want to avoid buffer overﬂow, over-estimates
are preferable.
At VFW2, trafﬁc directly sent from SW starts to arrive after
t1+d2. However, the trafﬁc directly from SW must be buffered
until VFW2 has received and reprocessed all the trafﬁc in Γ.
The last packet in Γ arrives at VFW2 before t1 + d1 + b1 + d3
and it is processed before t1 + d1 + b1 + d3 + b2. Therefore,
trafﬁc that is directly sent from SW and arrives at VFW2 during
(t1 + d2, t1 + d1 + b1 + d3 + b2) is buffered.
Suppose there are ki ﬂows matching Vi and the rate (bits
per second) of ﬂow j is λj. Then we estimate the buffer cost
of Vi as
ki(cid:88)
ki(cid:88)
j=1
βi = (
= (
λj) × {(t1 + d1 + b1 + d3 + b2) − (t1 + d2)}
λj) × (d1 + b1 + d3 + b2 − d2)
j=1
(1)
VFW Controller can leverage the capability of SDN
to conveniently obtain λj, d1, d2 and d3. SW periodically
reports the statistics of ﬂows to VFW Controller, which
are used to obtain λj. d1, d2 and d3 are transmission delays,
which can be measured in practice and collected by VFW
Controller. b1 and b2 depend on the resource assigned to
VFW1 and VFW2, and can be obtained through experiments
(see Figure 7(b)). For simplicity, VFW Controller assigns
the same resource to each virtual ﬁrewall, hence b1 = b2.
9
In this section, we present an three-step heuristic approach
VFW Controller uses to solve for optimal scaling-out
and the ILP approach for optimal scaling-in. We start with
modeling a virtual ﬁrewall.
A. Virtual Firewall Modeling
The processing capacity c of a virtual ﬁrewall depends on
the resource granted and the number of loaded ﬁrewall rules.
For easier management, each virtual ﬁrewall created by VFW
Controller is granted the same resource. Therefore, we
model c as a function of S, i.e. c(S) where S is the number
of loaded ﬁrewall rules. As S increases, c decreases. Because
when processing a packet, a ﬁrewall search through its rule
space until the ﬁrst matching rule is found. Then the packet
is processed according to the ﬁrst matching rule. Larger S
means larger the average search overhead, hence smaller c. Our
experiments in §VIII-B1 validate such a relationship between
c and S.
The runtime throughput of a virtual ﬁrewall, η, is a function
of Λ, the aggregated rate of the incoming trafﬁc ﬂows.
(cid:26)Λ if Λ ≤ c
c
if Λ > c
η(Λ) =
When Λ > c, packet loss may be expected at a virtual ﬁrewall,
because the rate of trafﬁc coming to the virtual ﬁrewall exceeds
the rate of trafﬁc leaving. Service Level Agreement (SLA) on
performance generally requires the processing capacity of a
virtual ﬁrewall to meet a predeﬁned value Φ, that is, c(S) ≥ Φ.
Since c decreases as S increases, Φ essentially places an upper
bound on S. The upper bound is c−1(Φ). Therefore, c(S) ≥ Φ
is equivalent to S ≤ c−1(Φ).
B. Optimal Scaling-Out
Accurate overload detection is not the focus of this paper.
VFW Controller simply deems a virtual ﬁrewall over-
loaded if one of the following conditions occurs: (i) η > 0.9c;
(ii) c(S) < Φ (or equivalently S < c−1(Φ)). Condition
(i) states that a virtual ﬁrewall is using above 90% of its
processing capacity. 10% remnant is intentional to avoid packet
loss. Condition (ii) states that the processing capacity of a
virtual ﬁrewall fails to meet the SLA agreement.
To solve an overload, new virtual ﬁrewall instances, each
of which has a limited buffer space of B, are created, selective
ﬁrewall rule groups and the associated ﬂow states on the
overloaded virtual ﬁrewall are migrated to the new instances.
The migration of each ﬁrewall rule group causes both a
buffer cost and a update cost. VFW Controller solves
the overload using the minimum number of instances while
incurring the least total update cost and no buffer overﬂow.
After a virtual ﬁrewall
is detected overloaded, VFW
Controller runs Dependency Analysis, Flow Update Anal-
ysis, Buffer Cost Calculation, and has the following parame-
ters: