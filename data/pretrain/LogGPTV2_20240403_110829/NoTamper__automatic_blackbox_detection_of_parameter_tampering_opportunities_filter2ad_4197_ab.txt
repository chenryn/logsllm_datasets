with a program analysis front-end for extracting a speciﬁcation of
intended behavior.
Finally, due to the inherent limitations of black-box analysis, our
approach cannot offer guarantees of completeness; rather, we jus-
tify the utility of our approach by the severity of the real vulnera-
bilities we have discovered.
3. ARCHITECTURE & CHALLENGES
In this section, we discuss the architecture of NOTAMPER and
the high level challenges addressed by each of its components. In
Section 4, we discuss our implementation, focusing on our con-
straint language and algorithms.
Figure 3 shows the high-level architecture: the three components
comprising NOTAMPER and how they interact. First, given a web
page, the HTML / JavaScript Analyzer constructs logical formu-
las representing the constraint-checking function for each form on
609Figure 3: NOTAMPER end-to-end architecture and application.
that web page. For our running example, the HTML / JavaScript
Analyzer constructs the following formula (fclient) that says the
parameters copies and copies2 must be greater than or equal to
0; the parameter directions must not contain special characters;
and the parameter payment must be one of the values in the drop-
down list.
^ copies ≥ 0 ∧ copies2 ≥ 0
directions ∈ [a-zA-Z]*
payment ∈
(1234-5678-9012-3456 | 7890-1234-5678-9012)
The Input Generator takes the resulting formulas and any hints pro-
vided by the user and constructs two sets of inputs for the server:
(i) those the server should accept (benign inputs b1, . . . , bm) and
(ii) those the server should reject (hostile inputs h1,. . . , hn). In our
example, the Input Generator constructs one benign input (variable
assignment that satisﬁes the above formula):
{copies → 0, copies2 → 0, directions → “”,
payment → 1234-5678-9012-3456}.
The Input Generator also constructs a number of hostile inputs
(variable assignments that falsify the formula above). Below are
two such inputs that are the same as above except in (1) copies is
less than 0 and in (2) directions contains special characters.
1.{copies → −1, copies2 → 0, directions → “”,
2.{copies → 0, copies2 → 0, directions → “;∗&@”,
payment → 1234-5678-9012-3456}
payment → 1234-5678-9012-3456}
The third component, the Opportunity Detector takes the hostile
and benign inputs, generates server responses for each one, ranks
the hostile inputs by how likely they are parameter tampering op-
portunities, and presents the results to an external tester for further
analysis.
Below we discuss the challenges each of the three components
addresses in more detail.
3.1 HTML/JavaScript Analyzer
Web page initialization. The JavaScript analysis of NOTAM-
PER speciﬁcally focuses on features / properties that concern form
validation and submission. In order to analyze the JavaScript code
pertaining to form processing, NOTAMPER simulates an environ-
ment similar to a JavaScript interpreter in a browser, including the
Document Object Model (DOM). In such an environment, user in-
teractions cause JavaScript code to be executed, resulting in changes
to the JavaScript environment and the DOM. (User interactions
may trigger asynchronous server requests via AJAX, but our im-
plementation currently does not support AJAX).
To analyze the JavaScript code that actually performs validation,
it is often important to understand the global JavaScript state as
it exists when the browser ﬁrst loads the form. To compute this
global state, NOTAMPER executes all the initialization code for the
web form concretely. It downloads external JavaScript, executes
inlined JavaScript snippets, and keeps track of changes to global
variables.
Identifying JavaScript validation code. To construct fclient,
the HTML/JavaScript Analyzer must identify the code snippets rel-
evant to parameter validation and understand how those snippets
interact. This can be difﬁcult because validation routines can be
run in two different ways: (1) when a form is submitted and (2)
in event handlers each time the user enters or changes data on the
form.
A state machine naturally models the event-driven execution of
JavaScript. Each state represents the data the user has entered and
ﬂags indicating which data contains an error. As the user supplies
or edits data, JavaScript code validates the data and updates the er-
ror ﬂags accordingly, resulting in a state transition. The constraints
imposed by the client on some particular data set could in theory
be dependent on the path the user took through the state machine
to enter that data, and hence the formula fclient could depend upon
the structure of that state machine.
NOTAMPER addresses this challenge by analyzing the JavaScript
event handlers as if they were all executed when the form was sub-
mitted. The beneﬁt of doing so is computational: it obviates the
need to manually simulate events or consider the order in which
events occur. But it also reﬂects a reasonable assumption users of-
ten make about data entry—that the order in which data was entered
does not affect the validity of that data. For those cases where the
order of data entry matters, our analysis may be overly restrictive,
e.g., considering all event handlers may simulate the occurrence of
mutually exclusive events.
Analyzing JavaScript validation code. Once the validation
routines contributing to fclient are identiﬁed, they must be ana-
lyzed. Such code may span several functions each of which may
consist of multiple control paths. Each such control path may en-
force a unique set of constraints on inputs, requiring an all-path
inter-procedural analysis. Further, JavaScript may enforce con-
straints that are not dependent on user inputs e.g., disallow repeated
submissions of a form through a global variable. The challenge is
to extract only the constraints imposed on inputs by a given piece
of JavaScript validation code.
NOTAMPER addresses this challenge by employing a mixed
concrete-symbolic execution approach [9] to analyze JavaScript and
identify the constraints enforced on user supplied data. Symbolic
execution provides coverage of all control paths in the validation
code and simulates validation of user supplied data. Concrete exe-
cution enables NOTAMPER to ignore code snippets not dependent
on symbolic inputs and to provide a suitably initialized environ-
ment for symbolic execution.
Resolving document object model (DOM) references.
Java-
Script validation routines typically use the DOM to access the form
input controls.
In our simulation of the JavaScript environment,
associating DOM references in JavaScript to HTML input con-
HTML/JavaScriptAnalyzerInput GeneratorOpportunity DetectorLogicWebpageb1,..,bmh1,..,hnExploitsExternalAnalysisHostileInput RankingNoTamperHints610trols is non-trivial but necessary for constructing fclient. Further,
the DOM may be dynamically modiﬁed by JavaScript by adding
/ deleting additional input controls or disabling / enabling existing
input controls.
NOTAMPER addresses this challenge by constructing the perti-
nent portion of the DOM from the given HTML in such a way that
it is available to the JavaScript concrete - symbolic evaluation en-
gine during execution. Additionally, this DOM is maintained dur-
ing the JavaScript evaluation by simulating DOM functions that are
used to modify the DOM structure.
3.2
Input Generator
The logical formulas given to the Input Generator are written in
the language of string constraints (described in Section 4). The In-
put Generator encompasses two independent tasks: (i) constructing
new logical formulas whose solutions correspond to hostile and be-
nign inputs and (ii) solving those formulas to build concrete inputs.
Here we focus on the ﬁrst task, leaving the second to Section 4.
Avoiding spurious rejections.
Two superﬁcial but common
forms of server-side parameter validation hide server vulnerabili-
ties from a naïve analysis: checking that all “required” variables
have values and checking that all variables have values of the right
type. Without accounting for such simple parameter validation,
NOTAMPER would have discovered only a few parameter tamper-
ing opportunities.
To address this challenge, the Input Generator constructs hostile
and benign inputs where all required variables have values and all
values are of the right type. NOTAMPER employs heuristics (Sec-
tion 4), which can be manually overridden, to compute the list of
required variables and variable types.
Generating orthogonal hostile inputs.
Each hostile input
would ideally probe for a unique weakness on the server. Two hos-
tile inputs rejected by the server for the same reason (by the same
code path on the server) are redundant. In our running example, the
client requires one variable (copies) to be greater than or equal to
zero and another variable (directions) to be assigned a value that
contains no punctuation. To avoid redundancy, NOTAMPER should
generate one hostile input where copies violates the constraints (is
less than zero) but directions satisﬁes the constraints (contains
no punctuation), and another input where copies satisﬁes the con-
straints but directions does not.
To generate such orthogonal inputs, the Input Generator converts
fclient to disjunctive normal form (DNF) 1 and constructs a hostile
input for each disjunct. Generally, each disjunct represents inputs
that violate fclient for a different reason than the other disjuncts.
Coping with incomplete information. Sometimes the formula
fclient fails to contain sufﬁcient information to generate a true be-
nign input or a hostile input that exposes a real vulnerability, yet a
human tester is willing to provide that information. For example,
many web forms only accept inputs that include a valid login ID
and password, but the client-side code does not itself provide a list
of valid IDs and passwords; in this case, fclient does not contain
sufﬁcient information for generating inputs that will be accepted by
the server.
To address this issue, the Input Generator accepts hints that guide
the search for hostile and benign inputs. Those hints take the form
of logical constraints (in the same language as fclient) and are de-
noted σ. For example, to force the login variable user to the value
“alice" and the password variable pass to the value “alicepwd", the
1In our experience DNF conversion was inexpensive (despite its
worst-case exponential character) because of fclient’s structural
simplicity.
user would supply the logical statement user = “alice”∧ pass =
“alicepwd”.
Addressing state changes. Web applications often store infor-
mation at the server, and web form submissions change that state.
This can cause the set of valid inputs to change over time. For ex-
ample, a user registration web form will ask for a login ID that has
not already been chosen. Submitting the form twice with the same
login ID will result in a rejection on the second attempt. This is
problematic because NOTAMPER submits many different inputs to
check for different classes of potential vulnerabilities, yet the login
ID is both required and must be unique across inputs.
To address this issue, the Input Generator takes as an optional
argument a list of variables required to have unique values and en-
sures that the values assigned to those variables are distinct across
submissions.
In our evaluation, generating inputs where certain
variables all have unique values has been sufﬁcient to address server-
side state changes, though in general more sophisticated graybox
mechanisms will be necessary (e.g., the ability to roll-back the
server-side databases between test cases).
Summary.
In total, the Input Generator expects the follow-
ing arguments (1) the formula logical fclient (representing the set
of inputs accepted by the client), (2) a list of required variables,
(3) types for variables, (4) a manually supplied set of constraints
(hints), and (5) a list of unique variables ((4) and (5) are optional).
It generates hostile inputs (a set of I such that fclient(I) = f alse)
and benign inputs (a set of I such that fclient(I) = true) such that
all required variables have values, all values are of the right type,
all manual constraints are satisﬁed, and each unique variable has a
different value across all inputs. All arguments to the Input Gener-
ator are computed by the HTML/JavaScript Analyzer (as described
in Section 4).
3.3 Opportunity Detector
The Input Generator produces a set of hostile inputs h1,. . . , hn
and a set of benign inputs b1, . . . , bm. The goal of the opportunity
detector is to determine which hostile inputs are actually parameter
tampering opportunities. The main challenge is that NOTAMPER
must ascertain whether or not a given hostile input is accepted by
the server while treating the server as a black box.
NOTAMPER addresses this challenge by ordering hostile inputs
by how structurally similar their server responses are to the server
responses of benign inputs. The more similar a hostile response
is to the benign responses, the more likely the hostile input is a
parameter tampering opportunity.
In our running example, consider a hostile input where the pa-
rameter copies is assigned a negative number. If the server fails
to verify that copies is a positive number, both the hostile and
benign responses will present a conﬁrmation screen, the only dif-
ference being the number of copies and total price. On the other
hand, if the server checks for a negative number of copies, the
hostile response will be an error page, which likely differs signiﬁ-
cantly from the conﬁrmation screen.
4. ALGORITHMS & IMPLEMENTATION
This section details the core algorithms employed by NOTAM-
PER. All but one of them manipulate a logical language for repre-
senting restrictions on user-data enforced by the client. Currently,
the language employed by NOTAMPER is built on arithmetic and
string constraints. It includes the usual boolean connectives: con-
junction (∧), disjunction (∨), and negation (¬). The atomic con-
straints restrict variable lengths using , ≥, =, (cid:54)= and vari-
able values using ∈, (cid:54)∈ in addition to the above operators. The se-
mantics for the only non-obvious operators, ∈ and (cid:54)∈, express mem-
611 ::=  |  |  | 
 ::= ( ∧ )
 ::= ( ∨ )
 ::= (¬)
 ::= (  )
 ::=  | ≥ | = | (cid:54)= | ∈ | /∈
 ::=  |  |  |  | 
 ::= perl regexp
 ::= len ()
 ::= “"
 ::= ?[a-zA-Z0-9](cid:63)
 ::= [0-9](cid:63)
Table 1: Language of formulas generated by NOTAMPER
bership constraints on regular languages. For example, the follow-
ing constraint requires x to be a non-negative integer: x ∈ [0-9]+.
Table 1 shows a Backus-Naur Form (BNF) grammar deﬁning the
constraint language.
Below we describe algorithms in the order they are executed
by NOTAMPER: (1) extracting client constraints from HTML and
JavaScript, (2) generating the additional inputs accepted by the In-
put Generator component, (3) constructing logical formulas whose
solutions are hostile and benign inputs, (4) solving such logical for-
mulas, and (5) identifying similarity between hostile and benign
server responses.
4.1 Client Constraint Extraction
Extracting the constraints enforced by the client on user-supplied
data and representing them logically as fclient, is done in two steps.
First, an HTML analyzer extracts three items from a given web
page: (1) constraints on individual form ﬁelds, enforced through
HTML (2) a code snippet representing JavaScript executed on load-
ing the web page as well as JavaScript executed for parameter val-
idation performed by the client, and (3) a DOM representation of
the form. Second, our concrete / symbolic JavaScript evaluator uses
(3) during the symbolic evaluation of (2) to extract additional con-
straints that it then combines with (1). The result is the formula
fclient.
Step 1: HTML analyzer.
Table 2 summarizes the constraints imposed by each HTML in-
put control through examples.
In our running example, there is
a drop-down list for the payment control that includes two credit
card values. The resulting constraint requires payment to be as-
signed one of the values in that list, as shown below:
payment ∈
(1234-5678-9012-3456 | 7890-1234-5678-9012).
The construction of a JavaScript snippet representing the parame-
ter validation performed by the client is accomplished by collect-
ing all the event handlers (and associated scripts) and generating
a single function that invokes all those event handlers, returning
true exactly when all the event handlers return true. All the in-
lined JavaScript in the web page is then added as a preamble to
the above script to initialize environment for the form validation
JavaScript. The DOM representation for the form is constructed by
recursively building the document object in the above JavaScript
snippet i.e., the form being analyzed is initialized as a property of
the document object which captures input controls as properties.
Further, the document object simulates a small set of core methods
that were necessary for processing forms e.g., getElementById.
Currently, we do not support document.write or document.
innerHTML and we are working towards adding support for these.
Control
SELECT
RADIO /
CHECKBOX
HIDDEN
maxlength
readonly
Example
value=“20">