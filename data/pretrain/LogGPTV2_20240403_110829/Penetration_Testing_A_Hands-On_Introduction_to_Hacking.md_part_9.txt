### Saving and Editing a File with `vi`

- **Y**: Yes
- **N**: No
- **^C**: Cancel

Enter `Y` to save the file. We will now edit the file using the `vi` editor.

#### Editing a File with `vi`

Add the text in Listing 2-5 to `testfile.txt`. In addition to the contents of the file, you will see information at the bottom of the `vi` screen, including the filename, number of lines, and the current cursor position (see Listing 2-5).

```bash
root@kali:~/mydirectory# vi testfile.txt
hi
georgia
we
are
teaching
pentesting
today
~
"testfile.txt" 7L, 46C 1,1
```

**Listing 2-5: Editing files with `vi`**

Unlike `nano`, you cannot start editing the file immediately after opening it in `vi`. To enter insert mode, press `I`. You should see the word `INSERT` displayed at the bottom of your terminal. Once you have finished making changes, press `Esc` to exit insert mode and return to command mode. In command mode, you can use various commands to edit your text. For example, to delete the word "we," place the cursor on the line containing "we" and enter `dd`.

To exit `vi` and save the changes, enter `:wq`. This tells `vi` to write the changes to the file and quit, as shown in Listing 2-6.

```bash
hi
georgia
are
teaching
pentesting
today
:wq
```

**Listing 2-6: Saving changes in `vi`**

**Note:** To learn more about available commands for `vi` and `nano`, refer to their respective man pages.

The choice of which editor to use daily is up to you. Throughout this book, we will use `nano` to edit files, but feel free to substitute your preferred editor.

### Data Manipulation

Let's perform some data manipulation. Enter the text in Listing 2-7 into `myfile` using your desired text editor. The file lists some favorite security conferences and the months when they typically occur.

```bash
root@kali:~/mydirectory# cat myfile
1 Derbycon September
2 Shmoocon January
3 Brucon September
4 Blackhat July
5 Bsides *
6 HackerHalted October
7 Hackcon April
```

**Listing 2-7: Example list for data manipulation**

#### Using `grep`

The `grep` command searches for instances of a text string in a file. For example, to search for all instances of the string "September" in `myfile`, enter:

```bash
root@kali:~/mydirectory# grep September myfile
1 Derbycon September
3 Brucon September
```

As you can see, `grep` indicates that Derbycon and Brucon are in September.

If you want only the names of the conferences in September, without the numbers or the month, you can pipe the output of `grep` to another command for further processing. The `cut` command allows you to specify a delimiter and print specific fields. For example, to get just the names of conferences that run in September, you can use:

```bash
root@kali:~/mydirectory# grep September myfile | cut -d " " -f 2
Derbycon
Brucon
```

By piping the two commands together, you get just the conferences Derbycon and Brucon.

#### Using `sed`

Another command for manipulating data is `sed`. Entire books have been written about `sed`, but we'll cover the basics here with a simple example of finding and replacing a specific word.

The `sed` command is ideal for automatically editing files based on certain patterns or expressions. For example, to replace all instances of the word "Blackhat" with "Defcon" in `myfile`, enter:

```bash
root@kali:~/mydirectory# sed 's/Blackhat/Defcon/' myfile
1 Derbycon September
2 Shmoocon January
3 Brucon September
4 Defcon July
5 Bsides *
6 HackerHalted October
7 Hackcon April
```

**Listing 2-8: Replacing words with `sed`**

#### Pattern Matching with `awk`

Another command-line utility for pattern matching is `awk`. For example, to find conferences numbered 6 or greater, you can use `awk` to search the first field for entries greater than 5:

```bash
root@kali:~/mydirectory# awk '$1 > 5' myfile
6 HackerHalted October
7 Hackcon April
```

Or, if you want only the first and third words in every line, you can use:

```bash
root@kali:~/mydirectory# awk '{print $1, $3;}' myfile
1 September
2 January
3 September
4 July
5 *
6 October
7 April
```

**Listing 2-9: Selecting certain columns with `awk`**

**Note:** We've looked at only simple examples of using these data manipulation utilities in this section. For more information, consult the man pages. These utilities can be powerful time-savers.

### Managing Installed Packages

On Debian-based Linux distributions such as Kali Linux, you can use the Advanced Packaging Tool (`apt`) to manage packages. To install a package, enter `apt-get install <package>`. For example, to install Raphael Mudgeâ€™s frontend for Metasploit, Armitage, in Kali Linux, enter:

```bash
root@kali:~# apt-get install armitage
```

Updates are regularly released for the tools installed on Kali Linux. To get the latest versions of the packages already installed, enter `apt-get upgrade`. The repositories Kali uses for packages are listed in the file `/etc/apt/sources.list`. To add additional repositories, you can edit this file and then run `apt-get update` to refresh the database to include the new repositories.

**Note:** This book is based on the base install of Kali 1.0.6 unless otherwise noted in Chapter 1. To follow along with the book, do not update Kali.

### Processes and Services

In Kali Linux, you can start, stop, or restart services using the `service` command. For example, to start the Apache web server, enter:

```bash
root@kali:~/mydirectory# service apache2 start
[....] Starting web server: apache2: Could not reliably determine the server's fully qualified domain name, using 127.0.1.1 for ServerName
. ok
```

Similarly, to stop the MySQL database server, enter `service mysql stop`.

### Managing Networking

When setting up the Kali Linux virtual machines in Chapter 1, you used the `ifconfig` command to view network information, as shown in Listing 2-10.

```bash
root@kali:~# ifconfig
eth0 Link encap:Ethernet HWaddr 00:0c:29:df:7e:4d
inet addr:192.168.20.9 Bcast:192.168.20.255 Mask:255.255.255.0
inet6 addr: fe80::20c:29ff:fedf:7e4d/64 Scope:Link
UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1
RX packets:1756332 errors:930193 dropped:17 overruns:0 frame:0
TX packets:1115419 errors:0 dropped:0 overruns:0 carrier:0
collisions:0 txqueuelen:1000
RX bytes:1048617759 (1000.0 MiB) TX bytes:115091335 (109.7 MiB)
Interrupt:19 Base address:0x2024
--snip--
```

**Listing 2-10: Viewing networking information with `ifconfig`**

From the `ifconfig` output, you can gather a lot of information about your system's network state. The network interface is called `eth0`. The IPv4 address (`inet addr`) that your Kali box uses to communicate with the network is `192.168.20.9` (yours may differ). An IP address is a 32-bit label assigned to devices in a network, consisting of four octets, each 8 bits long.

The network mask (`Mask`) identifies which parts of the IP address belong to the network and which parts belong to the host. In this case, the netmask `255.255.255.0` indicates that the network is the first three octets, `192.168.20`.

The default gateway routes traffic to other networks. Any traffic destined outside the local network will be sent to the default gateway. Use the `route` command to find the default gateway:

```bash
root@kali:~# route
Kernel IP routing table
Destination Gateway Genmask Flags Metric Ref Use Iface
default 192.168.20.1 0.0.0.0 UG 0 0 0 eth0
192.168.20.0 * 255.255.255.0 U 0 0 0 eth0
```

The `route` command output shows that the default gateway is `192.168.20.1`. This makes sense because the system with the IP address `192.168.20.1` is the wireless router in the home network. Note your own default gateway for use in the following section.

#### Setting a Static IP Address

By default, your network connection uses DHCP to pull an IP address from the network. To set a static address, edit the file `/etc/network/interfaces` with your preferred editor. The default configuration file is shown in Listing 2-11.

```bash
# This file describes the network interfaces available on your system
# and how to activate them. For more information, see interfaces(5).
# The loopback network interface
auto lo
iface lo inet loopback
```

**Listing 2-11: The default `/etc/network/interfaces` file**

To give your system a static IP address, add an entry for the `eth0` interface. Add the text shown in Listing 2-12 to `/etc/network/interfaces`, changing the IP addresses to match your environment.

```bash
# This file describes the network interfaces available on your system
# and how to activate them. For more information, see interfaces(5).
# The loopback network interface
auto lo
iface lo inet loopback
auto eth0
iface eth0 inet static
address 192.168.20.9
netmask 255.255.255.0
gateway 192.168.20.1
```

**Listing 2-12: Adding a static IP address**

Set the IP address for `eth0` as static. Use the IP address, netmask, and gateway found in the previous section to fill in the information in your file. After making these changes, restart networking with `service networking restart` so that the newly added static networking information will be used.

#### Viewing Network Connections

To view network connections, listening ports, and other related information, use the `netstat` command. For example, to see the programs listening on TCP ports, issue the command `netstat -antp`, as shown in Listing 2-13.

```bash
root@kali:~/mydirectory# netstat -antp
Active Internet connections (servers and established)
Proto Recv-Q Send-Q Local Address Foreign Address State
PID/Program name
tcp6 0 0 :::80 :::* LISTEN
15090/apache2
```

**Listing 2-13: Using `netstat` to view listening ports**

You see that the Apache web server you started earlier in the chapter is listening on TCP port 80. (See the man page for other `netstat` options.)

#### Netcat: The Swiss Army Knife of TCP/IP Connections

Netcat is known as the Swiss Army knife for TCP/IP connections. It is a versatile tool that we will use throughout this book. To see Netcat's various options, enter `nc -h`, as shown in Listing 2-14.

```bash
root@kali:~# nc -h
[v1.10-40]
connect to somewhere: nc [-options] hostname port[s] [ports] ...
listen for inbound: nc -l -p port [-options] [hostname] [port]
options:
-c shell commands as `-e`; use /bin/sh to exec [dangerous!!]
-e filename program to exec after connect [dangerous!!]
-b allow broadcasts
--snip--
```

**Listing 2-14: Netcat help information**

##### Check to See If a Port Is Listening

Use Netcat to connect to a port to see if it is listening for connections. You previously saw that the Apache web server is listening on port 80 on your Kali Linux system. Tell Netcat to attach to port 80 verbosely with the `-v` option, as shown next. If you started Apache correctly, you should see the following when attempting to connect to the service.

```bash
root@kali:~# nc -v 192.168.20.9 80
(UNKNOWN) [192.168.20.10] 80 (http) open
```

As you can see, Netcat reports that port 80 is indeed listening (open) on the network. (We'll look more at open ports and why they are interesting in Chapter 5's discussion of port scanning.)

You can also listen on a port for an incoming connection using Netcat, as shown next.

```bash
root@kali:~# nc -lvp 1234
listening on [any] 1234 ...
```

Use the options `l` for listen, `v` for verbose, and `p` to specify the port to listen on. Open a second terminal window and use Netcat to connect to the Netcat listener.

```bash
root@kali:~# nc 192.168.20.9 1234
hi georgia
```

Once you connect, enter the text "hi georgia." When you return to the listener's terminal window, you will see that a connection was received and your text was printed.

```bash
listening on [any] 1234 ...
connect to [192.168.20.9] from (UNKNOWN) [192.168.20.9] 51917
hi georgia
```

Close down both Netcat processes by pressing `Ctrl-C`.

##### Opening a Command Shell Listener

For something more interesting, set up a Netcat listener to execute `/bin/bash` (or start a Bash command prompt) when a connection is received. This allows anyone who connects to the listener to execute commands on your system, as shown next.

```bash
root@kali:~# nc -lvp 1234 -e /bin/bash
listening on [any] 1234 ...
```

Use a second terminal window to connect to the Netcat listener.