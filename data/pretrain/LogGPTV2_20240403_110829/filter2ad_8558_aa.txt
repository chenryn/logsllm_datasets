本文来源：[安全客](http://bobao.360.cn/learning/detail/3184.html)
作者：k0pwn_ko
上篇回顾：http://paper.seebug.org/102/
### 前言
上一次我发了一篇自己在一个经典内核漏洞CVE-2014-4113中挣扎的经历，以及一些调试细节的分享：
[经典内核漏洞调试笔记](http://paper.seebug.org/102/)
（原文链接：http://bobao.360.cn/learning/detail/3170.html）
总结过后感觉自己收获很多，后来一个偶然的机会，我看到了百度安全实验室发的[一篇文章](http://xlab.baidu.com/cve-2015-2546%ef%bc%9a%e4%bb%8e%e8%a1%a5%e4%b8%81%e6%af%94%e5%af%b9%e5%88%b0exploit/)，是关于另一个经典的内核漏洞，也就是今天的主角
----CVE-2015-2546这个漏洞的从补丁对比到Exploit的分析
同样感觉收获满满，在这篇分析中，总结了漏洞的成因，以及构造还原的手法，受益匪浅，但是并没有提供Exploit，于是根据这篇分析，我尝试编写了一下Exploit，这一次真的是非常艰辛，一边逆向调试，一边编写Exploit，磕磕绊绊完成了这个漏洞的利用，但和我的上一篇分析一样，在调试过程中，有好多非常有意思的过程，所以总结了一下，拿出来和大家一起分享。
下面开始我这只小菜鸟的提权之旅。
### 从CVE-2014-4113到CVE-2015-2546
首先我来描述一下这个漏洞的过程：在创建弹出菜单之后，当进行鼠标操作的时候会触发鼠标事件，引发win32k.sys下的一个叫做MNMouseMove的函数，在这个函数的处理过程中会涉及到一个叫做MNHideNextHierarchy的函数，这个函数会传入一个参数，这个参数是一个名为tagPOPUPMENU的结构体对象，由于对于这个对象没有进行检查，导致可以通过前面的SendMessage异步的方法，使用将这个对象释放掉，然后使用一个fake_tag进行占位，从而将这个fake_tag传入MNHideNextHierarchy，在这个函数中会处理一个1E4消息，在这里由于fake_tag的关系，导致释放后重用，从而引发在Ring0层执行Shellcode，最后完成提权。
第一次看到这个漏洞的时候，我就觉得这个利用的过程和CVE-2014-4113非常相像，都是在SendMessage中完成的利用，也就是利用的call
[esi+60h]这个汇编指令。
要想触发这个漏洞，首先要想办法执行到MNMouseMove，我们一起来分析一下从哪里能够执行到MNMouseMove。
这个过程是不是非常熟悉，从TrackPopupMenuEx到MNLoop，到HandleMenuMessages，最后到MNMouseMove。我们上一篇调试CVE-2014-4113就是这个过程，上一个漏洞发生在HandleMenuMessage中，而CVE-2015-2546发生在HandleMenuMessages里面的另一个调用，那么我就产生了一个想法，CVE-2014-4113的Exploit我们是否能在这个漏洞里使用呢？（事后证明，想的容易，做起来难，不过过程很有意思。）我们就从CVE-2014-4113这个Exploit入手，来完成CVE-2015-2546的提权。
### 和内核对抗的日子
首先我们来看一下CVE-2014-4113和CVE-2015-2546有多少关系，相关内容，可以看一下注释。
    if ( v5 > 0x104 )
      {
        if ( v5 > 0x202 )
        {
         ……
        }
        ……
        if ( v20 )
        {
          v21 = v20 - 1;
          if ( v21 )
          {
            ……
                v13 = xxxMNFindWindowFromPoint(v3, (int)&UnicodeString, (int)v7);
                v52 = IsMFMWFPWindow(v13);
                if ( v52 )
            ……
                if ( v13 == -1 )
                  xxxMNButtonDown((PVOID)v3, v12, UnicodeString, 1);
                else
                  xxxSendMessage((PVOID)v13, -19, UnicodeString, 0);// CVE -2014-4113的漏洞位置
                if ( !(*(_DWORD *)(v12 + 4) & 0x100) )
                  xxxMNRemoveMessage(*(_DWORD *)(a1 + 4), 516);
              }
              return 0;
            }
            goto LABEL_59;
        }
        ……
    LABEL_59:
        ……
        xxxMNMouseMove(v3, a2, (int)v7); // CVE-2015-2546漏洞位置
        return 1;
      }
    }
可以看到，两个漏洞的位置都处于HandleMenuMessages的函数中，经过CVE-2014-4113的分析，我们发现这个过程需要通过调用PostMessage的函数，这涉及到对窗口的操作，在CVE-2014-4113中，通过WNDCLASS类中的lpfnWndProc定义了回调函数MyWndProc负责处理窗口函数，这里使用的PostMessage的方法。
这样的话，为了使程序执行到MNMouseMove，我需要设定一个鼠标事件，这里的灵感来源于百度实验室的分析文章，所以我考虑使用。
    //WM_SYSCOMMAND处理消息
    PostMessage(hwnd,WM_SYSCOMMAND,0,0);//发送WM_SYSCOMMAND
    //鼠标事件
    PostMessage(hwnd,WM_LBUTTONDOWN,0,0);//鼠标左键按下
    PostMessage(hwnd,WM_LBUTTONUP,0,0);//鼠标左键抬起
但是经过调试，我发现无论如何也到达不了调试位置，这样我需要考虑为何无法到达调试位置，在分析的过程中发现了一个有趣的事情，首先，在CVE-2014-4113中，使用TrackPopupMenu会创建一个弹出窗口菜单。
但是，当修改了MyWndProc变成我们设定的事件之后，窗口菜单弹出后就没有后续动作了，也就是说，没有进入MNMouseMove的处理过程，但是当我把鼠标挪到上图的菜单中时，我们首先命中了HandleMenuMessages断点，紧接着命中了MNMouseMove。
    kd> g
    Breakpoint 6 hit
    win32k!xxxHandleMenuMessages:
    90668d78 8bff            mov     edi,edi
    kd> g
    Breakpoint 4 hit
    win32k!xxxMNMouseMove:
    906693ef 8bff            mov     edi,edi
这说明在鼠标挪上去后在HandleMenuMessages中发生的事情能够使程序最后进入MNMouseMove，分析一下这个过程。
    kd> p
    win32k!xxxHandleMenuMessages+0x1b:
    90668d93 8b7508          mov     esi,dword ptr [ebp+8]
    kd> p
    win32k!xxxHandleMenuMessages+0x1e:
    90668d96 8b4604          mov     eax,dword ptr [esi+4]
    kd> p
    win32k!xxxHandleMenuMessages+0x21:
    90668d99 8b5608          mov     edx,dword ptr [esi+8]
    kd> r eax
    eax=00000200
可以发现，程序进入后，会传递一个值0x200，这个值会在随后的过程中连续传递并且判断并且跳转，这个过程不再详细跟踪，举两个跳转的例子。
    //一处跳转，0x200和0x104作比较
    kd> p
    win32k!xxxHandleMenuMessages+0x2f:
    90668da7 895dfc          mov     dword ptr [ebp-4],ebx
    kd> p
    win32k!xxxHandleMenuMessages+0x32:
    90668daa 3bc1            cmp     eax,ecx
    kd> r eax
    eax=00000200
    kd> r ecx
    ecx=00000104
    kd> p
    win32k!xxxHandleMenuMessages+0x34:
    90668dac 0f87e4010000    ja      win32k!xxxHandleMenuMessages+0x21d (90668f96)
    //另一处跳转，0x200和0x202作比较
    kd> p
    win32k!xxxHandleMenuMessages+0x21d:
    90668f96 b902020000      mov     ecx,202h
    kd> p
    win32k!xxxHandleMenuMessages+0x222:
    90668f9b 3bc1            cmp     eax,ecx
    kd> p
    win32k!xxxHandleMenuMessages+0x224:
    90668f9d 0f8706010000    ja      win32k!xxxHandleMenuMessages+0x330 (906690a9)
这时我们看一下我这篇文章开头提到的HandleMenuMessages函数的分析，在开头有两处if语句判断，正是和这两个值做的比较，接下来经过一系列判断跳转之后，我们就到达了MNMouseMove的调用。
    kd> p
    win32k!xxxHandleMenuMessages+0x264:
    90668fdd a900040000      test    eax,400h
    kd> p
    win32k!xxxHandleMenuMessages+0x269:
    90668fe2 747a            je      win32k!xxxHandleMenuMessages+0x2e5 (9066905e)
    kd> p
    win32k!xxxHandleMenuMessages+0x2e5:
    9066905e 53              push    ebx
9066905e地址所处的位置，已经是MNMouseMove的上方，ebx正在作为MNMouseMove的参数传入栈中。
    .text:BF93905E ; 395:     xxxMNMouseMove(v3, a2, (int)v7);
    .text:BF93905E                 push    ebx             ; int
    .text:BF93905F                 push    esi             ; int
    .text:BF939060                 push    edi             ; UnicodeString
    .text:BF939061                 call    _xxxMNMouseMove@12 ; xxxMNMouseMove(x,x,x)
也就是说，之前传入的这个eax是一个很关键的值，如果弄明白这个值，就可以让程序成功执行到MNMouseMove了，但因为这个过程实际上是通过Windows下的图形界面操作（也就是鼠标在我们创建的主窗口移动产生的），所以我们并不能通过CVE-2014-4113的源码分析出来，这里需要分析一下这个值得内容，这时我想到了CVE-2014-4113源程序，同样也是在HandleMenuMessages进行if语句的判断导致跳转，而CVE-2014-4113已经分析的很清楚了，运行CVE-2014-4113的源程序，中断在HandleMenuMessage调试。
    kd> p
    win32k!xxxHandleMenuMessages+0x19:
    90668d91 53              push    ebx
    kd> p
    win32k!xxxHandleMenuMessages+0x1a:
    90668d92 56              push    esi
    kd> p
    win32k!xxxHandleMenuMessages+0x1b:
    90668d93 8b7508          mov     esi,dword ptr [ebp+8]
    kd> p
    win32k!xxxHandleMenuMessages+0x1e:
    90668d96 8b4604          mov     eax,dword ptr [esi+4]
    kd> p
    win32k!xxxHandleMenuMessages+0x21:
    90668d99 8b5608          mov     edx,dword ptr [esi+8]
    kd> r eax
    eax=00000201
    kd> dd esi
    85c4bb0c  000f02a2 00000201 00000000 00000000
可以看到这里eax的值是0x201（刚才那个是0x200），也就是十进制的513，来看一下CVE-2014-4113里的过程，计算一下。
     v20 = v5 - 261;
        if ( v20 )
        {
          v21 = v20 - 1;
          if ( v21 )
          {
            v22 = v21 - 18;
            if ( !v22 )
              return 1;
            v23 = v22 - 232;
            if ( v23 )
            {
              if ( v23 == 1 )
              {
    LABEL_13:
                v12 = a2;
                *(_DWORD *)(a2 + 16) = -1;
                *(_DWORD *)(a2 + 8) = (signed __int16)v7;
                *(_DWORD *)(a2 + 12) = SHIWORD(v7);
                v13 = xxxMNFindWindowFromPoint(v3, (int)&UnicodeString, (int)v7);
                v52 = IsMFMWFPWindow(v13);
这里要计算最后v23的值，就从最上方v20的值开始向下判断，也就是v23=513-261-1-18-232=1，正好v23等于1，从而进入下面CVE-2014-4113的处理逻辑。v5的值，就是0x201，也就是513，那么这个值到底是什么呢，我们来查一下这个值。
    public enum WMessages : int
       {
           WM_LBUTTONDOWN = 0x201, //Left mousebutton down
           WM_LBUTTONUP = 0x202,  //Left mousebutton up
           WM_LBUTTONDBLCLK = 0x203, //Left mousebutton doubleclick
           WM_RBUTTONDOWN = 0x204, //Right mousebutton down