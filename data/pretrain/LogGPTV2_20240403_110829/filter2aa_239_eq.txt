      WriteLine(title);
      WriteLine(string.Join("-", e));
      WriteLine();
    }
在Main（）方法中，在创建了包含一些美国州名的数组后，就把线程的
CurrentCulture属性设置为Finnish区域性，这样，下面的Array.Sort（）方法就使用芬兰的
排列顺序。调用DisplayName（）方法在控制台上显示所有的州名：
    public static void Main()
    {
      string[] names = {"Alabama", "Texas", "Washington", "Virginia",
                    "Wisconsin", "Wyoming", "Kentucky", "Missouri", "Utah",
                    "Hawaii", "Kansas", "Louisiana", "Alaska", "Arizona"};
      CultureInfo.CurrentCulture = new CultureInfo("fi-FI");
      Array.Sort(names);
      DisplayNames("Sorted using the Finnish culture", names);
      // etc.
    }
在以芬兰排列顺序第一次显示美国州名后，数组将再次排序。如果希望排序独立于用
户的区域性，就可以使用不变的区域性。在要将已排序的数组发送到服务器上或存储到某
个地方时，就可以采用这种方式。
为此，给Array.Sort（）方法传递第二个参数。Sort（）方法希望第二个参数是实现
IComparer接口的一个对象。System.Collections名称空间中的Comparer类实现IComparer接
口。Comparer. 
DefaultInvariant返回一个Comparer对象，该对象使用不变的区域性比较数
组值，以进行独立于区域性的排序。
    public static void Main()
    {
      // etc.
      // sort using the invariant culture
      Array.Sort(names, System.Collections.Comparer.DefaultInvariant
);
      DisplayNames("Sorted using the invariant culture", names);
    }
这个程序的输出显示了用Finnish区域性进行排序的结果和独立于区域性的排序结果。
在使用独立于区域性的排序方式时，Virginia排在Washington的前面。用Finnish区域性进
行排序时，Virginia排在Washington的后面。
    Sorted using the Finnish culture
    Alabama-Alaska-Arizona-Hawaii-Kansas-Kentucky-Louisiana-Missouri-Texas-Utah-
    Washington-Virginia-Wisconsin-Wyoming
    Sorted using the invariant culture
    Alabama-Alaska-Arizona-Hawaii-Kansas-Kentucky-Louisiana-Missouri-Texas-Utah-
    Virginia-Washington-Wisconsin-Wyoming
  注意： 如果对集合进行的排序应独立于区域性，该集合就必须用不变的区域
性进行排序。在把排序结果发送给服务器或存储在文件中时，这种方式尤其有效。为
了给用户显示排序的集合，最好用用户的区域性给它排序。
除了依赖区域设置的格式化和测量系统之外，文本和图片也可能因区域性的不同而有
所变化。此时就需要使用资源。
28.3 资源
像图片或字符串表这样的资源可以放在资源文件或附属程序集中。在本地化应用程序
时，这种资源非常有用，.NET对本地化资源的搜索提供了内置支持。在说明如何使用资
源本地化应用程序之前，先讨论如何创建和读取资源，而无须考虑语言因素。
28.3.1 资源读取器和写入器
在.NET Core中，资源读取器和写入器与完整的.NET版本相比是有限的（在撰写本文
时）。然而，在许多情形下（包括多平台支持），资源读取器和写入器提供了必要的功
能。
CreateResource示例应用程序动态创建了一个资源文件，并从文件中读取资源。这个
示例使用以下依赖项和名称空间：
依赖项：
    NETStandard.Library
    System.Resources.ReaderWriter
名称空间：
    System.Collections
    System.IO
    System.Resources
    static System.Console
ResourceWriter允许创建二进制资源。写入器的构造函数需要一个使用File类创建的
Stream。利用AddResource方法添加资源。.NET Core中简单的资源写入器需要带有键和值
的字符串。完整.NET 
Framework的资源写入器定义了重载版本，来存储其他类型（代码
文件CreateResource /Program.cs）：
    private const string ResourceFile = "Demo.resources";
    public static void CreateResource()
    {
      FileStream stream = File.OpenWrite(ResourceFile);
      using (var writer = new ResourceWriter(stream)
)
      {
        writer.AddResource("Title", "Professional C#");
        writer.AddResource("Author", "Christian Nagel");
        writer.AddResource("Publisher", "Wrox Press");
      }
    }
要读取二进制资源文件的资源，可以使用ResourceReader。读取器的GetEnumerator方
法返回一个IDictionaryEnumerator，在以下foreach语句中使用它访问资源的键和值：
    public static void ReadResource()
    {
      FileStream stream = File.OpenRead(ResourceFile);
      using (var reader = new ResourceReader(stream)
)
      {
        foreach (DictionaryEntry resource in reader
)
        {
        WriteLine($"{resource.Key} {resource.Value
}");
        }
      }
    }
运行应用程序，返回写入二进制资源文件的键和值。如下一节所示，还可以使用命令
行工具——资源文件生成器（resgen）——创建和转换资源文件。
28.3.2 使用资源文件生成器
资源文件包含图片、字符串表等条目。要创建资源文件，可以使用一般的文本文件，
或者使用那些利用XML的.resX文件。下面从一个简单的文本文件开始。
内嵌字符串表的资源可以使用一般的文本文件来创建。该文本文件只是把字符串赋予
键。键是可以用来从程序中获取值的名称。键和值都可以包含空格。
这个例子显示了Wrox.ProCSharp.Localization.MyResources.txt文件中的一个简单字符
串表：
    Title = Professional C#
    Chapter = Localization
    Author = Christian Nagel
    Publisher = Wrox Press
  注意： 在保存带Unicode字符的文本文件时，必须将文件和相应的编码一起
保存。为此，可以在SaveAs对话框中选择UTF8编码。
可以使用资源文件生成器（Resgen.exe）实用程序在
Wrox.ProCSharp.Localization.MyResources.txt的外部创建一个资源文件，输入如下代码：
    resgen Wrox.ProCSharp.Localization.MyResources.txt
这会创建Wrox.ProCSharp.Localization.MyResources.resources文件。得到的资源文件可
以作为一个外部文件添加到程序集中，或者内嵌到DLL或EXE中。Resgen还可以创建基于
XML的.resX资源文件。构建XML文件的一种简单方法是使用Resgen本身：
    resgen Wrox.ProCSharp.Localization.MyResources.txt
      Wrox.ProCSharp.Localization.MyResources.resX
这条命令创建了XML资源文件Wrox.ProCSharp.Localization.MyResources.resX。
Resgen支持强类型化的资源。强类型化的资源用一个访问资源的类表示。这个类可以用
Resgen实用程序的/str选项创建：
    resgen /str:C#, Wrox.ProCSharp.Localization, MyResources, MyResources.cs
    Wrox.ProCSharp.Localization.MyResources.resX
在/str选项中，按照语言、名称空间、类名和源代码文件名的顺序定义资源。
28.3.3 通过ResourceManager使用资源文件
使用旧C#编译器csc.exe，可以使用/resource选项把资源文件添加到程序集中。使用新
的.NET 
Core编译器，需要在文件夹中添加一个resx文件，并嵌入程序集。默认情况下，
所有的resx文件都嵌入程序集。可以在project.json文件中使用resource、resourceFiles和
resourceExclude节点自定义它。
resource的默认设置是嵌入所有资源文件：
    "resource": ["embed/＊＊/＊.＊"]
要定义应该排除在外的目录foo和bar，应定义resourceExclude：
    "resourceExclude": ["foo/＊＊/＊.resx", "bar/＊＊/＊.＊"],
要定义特定的资源文件，可以使用resourceFiles节点：
    "resourceFiles": ["embed/Resources/Sample.resx", "embed/Views/View1.resources
"],
要了解资源文件如何使用ResourceManager类加载，创建一个控制台应用程序
（包），命名为ResourcesDemo。这个示例使用以下依赖项和名称空间：
依赖项：
    NETStandard.Library
名称空间：
    System.Globalization
    System.Reflection
    System.Resources
    static System.Console
创建一个Resources文件夹，在其中添加Messages.resx文件。Messages.resx文件填充了
English-US内容的键和值，例如键GoodMorning和值Good Morning！这是默认的语言。可
以添加其他语言资源文件和命名约定，把区域性添加到资源文件中，例如，
Messages.de.resx表示德语，Messages.de-AT.resx表示奥地利口音。
要访问嵌入式资源，使用System.Resources名称空间和NuGet包
System.Resources.Resource-Manager中的ResourceManager类。实例化ResourceManager时，
一个重载的构造函数需要资源的名称和程序集。应用程序的名称空间是ResourcesDemo；
资源文件在Resources文件夹中，它定义了子名称空间Resources，其名称是
Messages.resx。它定义了名称ResourcesDemo.Resources.Messages。可以使用Program类型
的GetTypeInfo方法检索资源的程序集，它定义了一个Assembly属性。使用resources实例，
GetString方法返回从资源文件传递的键的值。给第二个参数传递一个区域性，例如de-
AT，就在de-AT资源文件中查找资源。如果没有找到，就提取中性语言de，在de资源文件
中查找资源。如果没有找到，就在没有指定区域性的默认资源文件中查找，返回值（代码
文件ResourcesDemo / Program.cs）：
    var resources = new ResourceManager("ResourcesDemo.Resources.Messages",
        typeof(Program).GetTypeInfo().Assembly);
    string goodMorning = resources.GetString("GoodMorning",
        new CultureInfo("de-AT"));
    WriteLine(goodMorning);
ResourceManager构造函数的另一个重载版本只需要类的类型。这个ResourceManager
查找Program.resx资源文件：
    var programResources = new ResourceManager(typeof(Program));
    WriteLine(programResources.GetString("Resource1"));
28.3.4 System.Resources名称空间
在举例之前，本节先复习一下System.Resources名称空间中处理资源的类：
● 
ResourceManager类可以用于从程序集或资源文件中获取当前区域性的资源。使用
ResourceManager类还可以获取特定区域性的ResourceSet类。
● ResourceSet类表示特定区域性的资源。在创建ResourceSet类的实例时，它会枚举一
个实现IResourceReader接口的类，并在散列表中存储所有的资源。
● IResourceReader接口用于从ResourceSet中枚举资源。ResourceReader类实现这个接
口。
● ResourceWriter类用于创建资源文件。ResourceWriter类实现IResourceWriter接口。
28.4 使用WPF本地化
对于WPF，可以使用.NET资源，类似于控制台应用程序。为了说明如何对WPF应用
程序使用资源，创建一个简单的WPF应用程序，它只包含一个按钮，如图28-7所示。
图28-7
这个应用程序的XAML代码如下：
在按钮的Click事件的处理程序代码中，仅弹出一个包含示例消息的消息框：
    private void Button_Click(object sender, RoutedEventArgs e)
    {
      MessageBox.Show("English Message");
    }
  注意： WPF和XAML参见第29和34章。
可以用处理其他应用程序的方式把.NET资源添加到WPF应用程序中。在
Resources.resx文件中定义资源Button1Text和Button1Message。这个文件在WPF项目中自动
创建。它在Solution Explorer的Properties文件夹中。这个资源文件默认使用Internal访问修
饰符来创建Resources类。为了在XAML中使用它，需要在托管资源编辑器中把修饰符改
为Public。
选择资源文件，打开Properties窗口，可以看到自定义工具
PublicResXFileCodeGenerator被分配给文件。这个代码生成器创建了一个强类型代码文
件，来访问资源。生成的代码文件用资源键的名称提供了公共静态属性，来访问
ResourceManager，在下面的代码片段中可以使用Button1Text属性看到它。这里使用的
ResourceManager是一个属性，它返回ResourceManager类的一个实例，该实例是使用单例
模式创建的：
    public static string Button1Text
    {
      get
      {
        return ResourceManager.GetString("Button1Text", resourceCulture);
      }
    }
要使用生成的资源类，需要修改XAML代码。添加一个XML名称空间别名，以引
用.NET名称空间WpfApplication.Properties，如下所示。这里，把别名设置为props。在
XAML元素中，这个类的属性可以用于x:Static标记扩展。把Button的Content属性设置为
Resources类的Button1Text属性（代码文件WPFApplication/MainWindow.xaml）。
要在代码隐藏中使用.NET资源，可以直接访问Button1Message属性（代码文件
WPFApplication\MainWindow.xaml.cs）：
    private void Button_Click(object sender, RoutedEventArgs e)
    {
      MessageBox.Show(Properties.Resources.Button1Message);
    }
现在资源可以以前面介绍的方式本地化了。
28.5 使用ASP.NET Core本地化
  注意： 使用本地化与ASP.NET Core，需要了解本章讨论的区域性和资源，以
及如何创建ASP.NET Core应用程序。如果以前没有使用ASP.NET Core创建ASP.NET
Core Web应用程序，就应该阅读第40章，再继续学习本章的这部分内容。
本地化ASP.NET Core Web应用程序时，可以使用CultureInfo类和资源，其方式类似
于本章前面的内容，但有一些额外的问题需要解决。设置完整应用程序的区域性不能满足
一般需求，因为用户来自不同的区域。所以有必要给到服务器的每个请求设置区域性。
怎么知道用户的区域性呢？这有不同的选项。浏览器在每个请求的HTTP标题中发送
首选语言。浏览器中的这个信息可以来自浏览器设置，或浏览器本身会检查安装的语言。
另一个选项是定义URL参数，或为不同的语言使用不同的域名。可以在一些场景中使用不
同的域名，例如为网站www. cninnovation.com使用英文版本，为www.cninnovation.de使用
德语版本。但是www.cninnovation.ch呢？应该提供德语、法语和意大利语版本。这里，
URL参数，如www.cninnovation.com/culture=de，会有所帮助。使用
www.cninnovation.com/de的工作方式类似于定义特定路由的URL参数。另一个选择是允许
用户选择语言，定义一个cookie，来记住这个选项。
ASP.NET Core 1.0支持所有这些场景。
28.5.1 注册本地化服务
为了开始注册操作，使用Empty ASP.NET Core 1.0项目模板创建一个新的ASP.NET
Web应用程序。本项目利用以下依赖项和名称空间：
依赖项：
    Microsoft.AspNetCore.Hosting
    Microsoft.AspNetCore.Features
    Microsoft.AspNetCore.IISPlatformHandler
    Microsoft.AspNetCore.Localization
    Microsoft.AspNetCore.Server.Kestrel
    Microsoft.Extensions.Localization
    System.Globalization
名称空间：
    Microsoft.AspNetCore.Builder
    Microsoft.AspNetCore.Hosting
    Microsoft.AspNetCore.Http
    Microsoft.AspNetCore.Http.Features
    Microsoft.AspNetCore.Localization
    Microsoft.Extensions.DependencyInjection
    Microsoft.Extensions.Localization
    System
    System.Globalization
    System.Net
在Startup类中，需要调用AddLocalization扩展方法来注册本地化的服务（代码文件
WebAppli-cationSample / Startup.cs）:
    public void ConfigureServices(IServiceCollection services)
    {
      services.AddLocalization(options => options.ResourcesPath = "CustomResource
s");
    }
AddLocalization方法为接口IStringLocalizerFactory和IStringLocalizer注册服务。在注册