随着自动化自我配置的实现，我们可以通过自动启动实例来看得更大。如果您还记得前面章节中的自动扩展组，那么在大多数云产品中甚至可以实现自动化。通过使用启动配置和预配置的映像，就像我们刚才讨论的那些一样，使用这种设置添加或删除节点就像拨打所需的节点设置一样简单。自动缩放组将增加或减少工作实例数量，并且因为映像是自配置的，所以这将是您需要的全部输入。有了这样一个简单的输入，您就可以通过许多不同的方式极其轻松地对基础架构进行扩展更改。
这里需要考虑的是，在自动化方面更进一步的是，对于一些云提供商，您可以根据他们的指标，甚至类似于`cron`的时间表，在您的自动伸缩组中触发这些动作。原则上，如果您增加了集群上的负载，您可以触发节点数量的增加，相反，如果集群或单个节点上的负载低于预定义的值，您可以激活服务消耗并关闭一部分节点，以根据需要扩展系统。对于周期性但可预测的需求变化(更多信息请参见[https://en.wikipedia.org/wiki/Internet_Rush_Hour](https://en.wikipedia.org/wiki/Internet_Rush_Hour)，我们提到的计划的缩放比例变化可以确保您有足够的资源来处理预期的需求。
# 预测自动缩放
如果您手动上下拨节点计数并按计划或度量触发器自动扩展，您仍然会遇到一些问题，因为服务需要花费一些时间才能联机、自我配置并开始传播到网络中的各种负载平衡器，所以您仍然需要在您希望它们运行的确切时间启动服务。有了这种类型的架构，很可能你的用户会发现你没有足够的容量，然后你的系统做出反应来补偿。如果你真的在努力从你的服务中获得最好的用户体验，有时你可能还需要在你的自动伸缩触发器上再增加一层，它可以在你的服务真正需要资源之前预测何时需要更多的资源，这被恰当地称为**预测伸缩**。
从极其广泛的角度来看，要将这个预测层添加到您的基础架构中，您需要做的是将在过去`x`段时间内收集的部分指标汇集到一个**机器学习** ( **ML** )工具中，例如 TensorFlow([https://www.tensorflow.org/](https://www.tensorflow.org/))并生成一个训练集，该训练集能够使您正在使用的工具能够确定地预测您是否需要更多节点。通过使用这种方法，您的服务甚至可以在需要扩展之前进行扩展。)而且比简单的基于时间表的方法聪明得多。诸如此类的系统很难正确地集成到您的管道中，但是如果您正在以疯狂的吞吐量在全球范围内工作，而简单的反应式自动扩展却功亏一篑，这可能是一条值得探索的道路。
Training set in machine learning means just a set of training data (in our case it would be a chunk of our long-term metrics) that you can use to teach a neural network about how to correctly predict the demand that you will need. Like many of the topics in recent chapters, there are actual books written on this material (machine learning) that would eclipse the content of this one by volume many times over and would provide only marginal utility for you here. If you would like to learn more about machine learning in detail, this Wikipedia page has a good primer on it at [https://en.wikipedia.org/wiki/Machine_learning](https://en.wikipedia.org/wiki/Machine_learning) and you can give TensorFlow a whirl at [https://www.tensorflow.org/get_started/get_started](https://www.tensorflow.org/get_started/get_started).
最后，如果您设法一起实现这些技术中的一些或全部，那么您将几乎不需要对集群进行任何干预来处理任何方向的扩展。作为能够睡得很香的额外奖励，您还将节省资源，因为您将能够将处理资源与服务的实际使用紧密匹配，使您、您的预算和您的用户都感到满意。
# 监视
您在服务交付中依赖的任何服务都应该有一个理想的方法来通知您它是否出现了问题，我在这里不是指用户反馈。如今，大多数服务开发都在以令人难以置信的速度进行，而监控是像备份这样的事情之一，大多数开发人员在灾难性的事情发生之前都不会考虑，所以我们应该稍微介绍一下。真正应该决定你如何处理这个话题的大问题是，你的用户是否能处理你在没有监控的情况下看不到的停机时间。
大多数微小的服务在一些中断的情况下可能是正常的，但是对于其他所有事情，这将是最少的几封来自用户的愤怒的电子邮件，最坏的情况是您的公司失去了您的大部分用户，因此非常鼓励在所有规模上进行监控。
诚然，监控可能被认为是您的基础架构中需要实施的无聊部分之一，但有一种方法可以洞察您的云一直在做什么，这是管理众多不同系统和服务的一个绝对必要的部分。通过将监控添加到您的**关键性能指标** ( **关键性能指标**)中，您可以确保您的系统总体上按预期运行，并且通过将触发器添加到您的关键监控目标中，您可以即时收到任何可能影响您的用户的活动的警报。对基础架构进行这些类型的洞察既有助于减少用户流失，又能推动更好的业务决策。
在我们研究示例的过程中，您可能已经想出了要监控的内容，但以下是一些常见的内容，它们总是会作为最有用的内容出现:
*   **节点内存利用率**:如果您注意到您的节点没有使用所有分配的内存，您可以移动到较小的节点，反之亦然。如果您使用内存受限的 Docker 容器，这通常会变得不太有用，但这仍然是一个很好的度量标准，因为您希望确保在节点上永远不会达到系统级最大内存利用率，否则您的容器将以慢得多的交换运行。
*   **节点 CPU 利用率**:从这个指标可以看出您的服务密度是太低还是太高，或者服务需求是否出现峰值。
*   **节点意外终止**:这是一个很好的跟踪，以确保您的配置项/光盘管道不会创建坏映像，您的配置服务处于在线状态，以及许多其他可能会降低您的服务的问题。
*   **服务意外终止**:找出服务意外终止的原因对于消除任何系统中的 bug 至关重要。看到这个值的增加或减少可以很好地指示代码库的质量，尽管它们也可以指示许多其他问题，包括您的基础架构内部和外部的问题。
*   **消息队列大小**:我们之前已经详细介绍过了，但是不断膨胀的队列大小表明您的基础架构无法像数据生成时那样快速处理数据，所以这个指标总是很好的。
*   **连接吞吐量**:准确知道您正在处理的数据量可以很好地指示服务负载。将此与其他收集的统计数据进行比较，还可以告诉您您看到的问题是由内部还是外部引起的。
*   **服务延迟**:没有故障不代表服务不可用。通过跟踪延迟，您可以详细了解哪些方面可以改进，哪些方面没有达到您的预期。
*   **内核恐慌**:罕见但极其致命的内核恐慌可能会对您部署的服务产生真正的破坏性影响。尽管监控这些非常棘手，但是跟踪内核恐慌会提醒您是否有底层内核或硬件问题需要您开始解决。
这显然不是一个详尽的列表，但它涵盖了一些更有用的列表。当您开发您的基础设施时，您会发现在任何地方添加监控都可以更好地解决问题，并发现您的服务的可伸缩性缺陷。因此，一旦您将监控添加到您的基础架构中，不要害怕将其尽可能多地插入到您的系统中。最终，通过监控获得整个基础架构的可见性和透明度，您可以做出更明智的决策并构建更好的服务，这正是我们想要的。
# 评估下一代技术
我个人感觉到，大多数关于容器的文档和学习材料(以及大多数其他技术主题)都忽略了对新兴技术的正确评估和风险评估。尽管选择一款存在根本缺陷的音乐播放器的风险微乎其微，但选择一款存在根本缺陷的云技术可能会让你陷入数年的痛苦和发展之中，否则你就不需要这些。随着云领域中工具创建和开发的速度以极快的速度增长，良好的评估技术可能是您技能工具箱中想要的东西，因为从长远来看，它们可以节省您的精力、时间和金钱。预感很棒，但是拥有一个可靠的、可重复的、确定性的技术评估方法更有可能带来长期的成功。
Please note that while the advice given here has had a pretty good track record for me and other people I have talked to over my career, you can never fully predict the course that a disparate landscape of technologies will take, especially when most tech start-ups can close their doors at a moment's notice (i.e. ClusterHQ). So keep in mind that these are all just points of interest and not a magical list that will make the most common problems with choosing technologies disappear.
# 技术需求
这应该是一个非常明显的问题，但是需要写下来。如果你需要一个由你不想在内部开发的工具提供的特性，你将没有太多的选择，只能随遇而安，抱最好的希望。幸运的是，在大多数云技术和支持它们的工具模块中，通常至少有两个相互竞争的选项在争夺相同的用户，所以事情并不像今天看起来那么可怕，尽管仅仅一年前，这个领域几乎所有的东西都有一个低于`1.0`的版本号。当您评估竞争工具如何满足您的需求时，也请记住，并非每个工具都面向相同的目的，即使它们解决了相同的问题。如果我们以当前的 Kubernetes 和 Marathon 为例，尽管它们都可以用来解决相同的服务部署问题，但是 Kubernetes 主要是为了这个单一的目的，但是 Marathon 也可以用来作为一个额外的功能进行调度和集群管理，所以在众所周知的意义上，我们实际上是在比较苹果和橙子。
概括地说，您的服务基础设施需求将驱动您的工具需求，因此您不会经常最终处理您最喜欢的编程语言，拥有简单的集成点，或者使用健全的工具代码库，但是集成一个将为您节省数百或数千工时的工具是不可轻视的事情。有时，通过改变系统架构的各个部分来完全避开技术需求以避免增加系统的复杂性是可能的，但根据我的个人经验，这几乎从来都不容易做到，因此您的里程可能会有所不同。