Note that dynamically loaded Java code (via Dex-
ClassLoader) poses no threat to Aurasium, as the code is
still executed by the same Dalvik VM instance and hence
cannot escape Aurasium’s sandbox. Native Java methods
map to a dynamically loaded binary shared object library
and are subject to the constraints discussed in the previ-
ous section, which basically means that attempts of using
them will always be properly ﬂagged by Aurasium.
4.3 Red Pill
Currently Aurasium is not designed to be stealthy. The
existence of obvious traces such as changed application
signature, the existence of Aurasium native library and
Java classes allow applications to ﬁnd out easily whether
it is running under Aurasium or not. A malicious ap-
plication can then refuse to run under Aurasium, forcing
the user to use the more dangerous vanilla version. A
legitimate application may also verify its own integrity
(via application signature) to prevent malicious repack-
aging by malware writers. Due to Aurasium’s control
over the application’s execution, it is possible to clean
11
up these traces for example by spooﬁng signature access
to PackageManager, but fundamentally this is an arms
race and a determined adversary will win.
5 Related Work
With the growing popularity of Android and the growing
malware threat it is facing, many approaches to secur-
ing Android have been proposed recently. Many of the
traditional security approaches adopted in desktops have
been migrated to mobile phones in general and Android
in particular. Probably the most standard approach is to
use signature-based malware detection, which is in its in-
fancy when it comes to mobile platforms. This approach
is ineffective against zero-day attacks, and there is little
reason to believe that it will be more successful in the
mobile setting. Program analysis and behavioral analy-
sis have been more successfully applied in the context of
Android.
Static Analysis Static analysis of Android applica-
tion package ﬁles is relatively more straightforward than
static analysis of malware prevalent on desktops in gen-
eral. Obfuscation techniques [41] used in today’s mal-
ware are primarily aimed at impeding static analysis.
Without effective ways to deobfuscate native binaries,
static analysis will always suffer major drawbacks. Be-
cause of the prevalence of malware on x86 Windows
machines, little effort has been focusing on reverse en-
gineering ARM binaries. Static analysis of Java code
is much more attainable through decompilation of the
Dalvik bytecode. The DED [20] and dex2jar [5] are
two decompilers that aim at achieving translation from
Dalvik bytecode to Java bytecode.
Dynamic Analysis Despite its limitations, dynamic
analysis remains the preferred approach among re-
searchers and antivirus companies to proﬁle malware and
extract its distinctive features. The lack of automated
ways to explore all the state space is often a hindering
factor. Techniques such as multipath exploration [31]
can be useful. However, the ability of mobile malware
to load arbitrary libraries might limit the effectiveness of
such techniques. The honeynet project offers a virtual
machine for proﬁling Android Applications [36] simi-
lar to proﬁling desktop malware. Stowaway [23] is a
tool that detects overprivilege in compiled Android ap-
plications. Testing is used on the Android API in order
to build the permission map that is necessary for detect-
ing overprivilege, and static analysis is used to determine
which calls an application invokes.
Monitoring The bulk of research related to securing
Android has been focused on security policy exten-
sion and enforcement for Android starting with [21].
TaintDroid [19] taints private data to detect leakage of
users’ private information modifying both Binder and the
Dalvik VM, but extends only partially to native code.
Quire [17] uses provenance to track permissions across
application boundaries through the IPC call chain to pre-
vent permission escalation of privilege attacks. Crepe
[15] allows access to system services requested through
install-time permission only in a certain context at run-
time. Similarly, Apex [33] uses user-deﬁned runtime
constraints to regulate applications’ access to system ser-
vices. AppFence [27] blocks application access to data
from imperious applications that demand information
that is unnecessary to perform their advertised function-
ality, and covertly substitute shadow data in place. Air-
mid [32] uses cooperation between in-network sensors
and smart devices to identify the provenance of malicious
trafﬁc.
Virtualization Recent approaches to Android security
have focused on bringing virtualization technology to
Android devices. The ability to run multiple version of
the Android OS on the same physical device allows for
strong separation and isolation but comes at a higher per-
formance cost. L4Android [30] is an open source project
derived from the L4Linux project. L4Android combines
both the L4Linux and Google modiﬁcations of the Linux
kernel and thus enables running Android on top of a mi-
crokernel. To address the performance issues when us-
ing virtualization, Cells in [11], is a lightweight virtu-
alization architecture where multiple phones run on the
same device. It is possible to run multiple versions of
Android on a bare metal hypervisor and ensure strong
isolation where shared security-critical device drivers run
in individual virtual machines, which is demonstrated
by [26]. Finally, logical domain separation, where two
single domains are considered and isolation is enforced
as a dataﬂow property between the logical domains with-
out running each domain as a separate virtual machine,
can also be employed [35].
6 Conclusion and Future Work
We have presented Aurasium, a robust and effective tech-
nology that protects users of the widely used Android OS
from malicious and untrusted applications. Unlike many
of the security solutions proposed so far, Aurasium does
not require rooting and device reﬂashing.
Aurasium allows us to take full control of the execu-
tion of an application. This allows us to enforce arbi-
trary policies at runtime. By using the Aurasium security
12
manager (ASM), we are able to not only apply policies
at the individual application level but across multiple ap-
plications simultaneously. This allows us to effectively
orchestrate the execution of various applications on the
device and mediate their access to critical resources and
user’s private data. This allows us to also detect attempts
by multiple applications to collaborate and implement a
malicious logic. With its overall low overhead and high
repackaging success rate, it is possible to imagine Aura-
sium implementing an effective isolation and separation
at the application layer without the need of complex vir-
tualization technology.
Even though Aurasium currently only treats applica-
tions as black boxes and focuses on its external behav-
ior, the idea of enforcing policy at per-application level
by repackaging applications to attach side-by-side moni-
toring code is very powerful. By carefully instrumenting
the application’s Dalvik VM instance on the ﬂy, it is even
possible to apply more advanced dynamic analysis such
as information ﬂow and taint analysis, and we leave this
as a possible direction of future work. We also plan on
expanding our investigation of the potential threat mod-
els against Aurasium and provide practical ways to mit-
igate them, especially in the case of executing untrusted
native code.
7 Acknowledgments
This material is based on work supported by the Army
Research Ofﬁce under Cyber-TA Grant No. W911NF-
06-1-0316 and by the National Science Foundation Grant
No. CNS-0716612.
References
[1] Android apktool: A tool for reengineering Android apk ﬁles.
code.google.com/p/android-apktool/.
[2] Android.OS/Fakeplayer.
www.f-secure.com/v-
descs/trojan\_androidos\_fakeplayer\_a.shtml.
[3] Android.OS/NickiSpy.
www.maikmorgenstern.de/
wordpress/?tag=androidnickispy.
[4] Bothunter
community
http://www.bothunter.net.
threat
intelligence
feed.
[5] dex2jar: A tool for converting Android’s .dex format to Java’s
.class format. code.google.com/p/dex2jar/.
[6] OpenBinder.
openbinder/docs/html/.
www.angryredplanet.com/~hackbod/
[7] smali: An assembler/disassembler for Android’s dex format.
code.google.com/p/smali/.
[8] UI/Application exerciser Monkey. developer.android.com/
guide/developing/tools/monkey.html.
[9] In U.S. market, new smartphone buyers increasingly embrac-
blog.nielsen.com/nielsenwire/online_
ing Android.
mobile/, sep 2011.
13
[10] ANDROID OPEN SOURCE PROJECT.
Platform versions.
developer.android.com/resources/dashboard/
platform-versions.html.
[11] ANDRUS, J., DALL, C., HOF, A. V., LAADAN, O., AND NIEH,
In Pro-
J. Cells: a virtual mobile smartphone architecture.
ceedings of the Twenty-Third ACM Symposium on Operating Sys-
tems Principles (New York, NY, USA, 2011), SOSP ’11, ACM,
pp. 173–187.
[12] BL ¨ASING, T., SCHMIDT, A.-D., BATYUK, L., CAMTEPE,
S. A., AND ALBAYRAK, S. An Android application sand-
In 5th Interna-
box system for suspicious software detection.
tional Conference on Malicious and Unwanted Software (MAL-
WARE’2010) (Nancy, France, France, 2010).
[13] BURGUERA, I., ZURUTUZA, U., AND NADJM-TEHRANI, S.
Crowdroid: behavior-based malware detection system for An-
In Proceedings of the 1st ACM Workshop on Security
droid.
and Privacy in Smartphones and Mobile devices (New York, NY,
USA, 2011), SPSM ’11, ACM, pp. 15–26.
[14] CHIN, E., FELT, A. P., GREENWOOD, K., AND WAGNER, D.
Analyzing inter-application communication in Android. In Pro-
ceedings of the 9th International Conference on Mobile Systems,
Applications, and Services (New York, NY, USA, 2011), Mo-
biSys ’11, ACM, pp. 239–252.
[15] CONTI, M., NGUYEN, V. T. N., AND CRISPO, B. Crepe:
In Proceed-
context-related policy enforcement for Android.
ings of the 13th International Conference on Information Security
(Berlin, Heidelberg, 2011), ISC’10, Springer-Verlag, pp. 331–
345.
[16] DEGUSTA, M. Android orphans: Visualizing a sad history of
theunderstatement.com/post/11982112928/
support.
android-orphans-visualizing-a-sad-history-of-
support.
[17] DIETZ, M., SHEKHAR, S., PISETSKY, Y., SHU, A., AND WAL-
LACH, D. S. Quire:
lightweight provenance for smart phone
operating systems. In Proceedings of the 20th USENIX Confer-
ence on Security (Berkeley, CA, USA, 2011), SEC’11, USENIX
Association, pp. 23–23.
[18] ENCK, W. Defending users against smartphone apps: Techniques
In Proceedings of the 7th International
and future directions.
Conference on Information Systems Security (Kolkata, India, dec
2011), ICISS.
[19] ENCK, W., GILBERT, P., CHUN, B.-G., COX, L. P., JUNG, J.,
MCDANIEL, P., AND SHETH, A. N. TaintDroid: an information-
ﬂow tracking system for realtime privacy monitoring on smart-
phones. In Proceedings of the 9th USENIX Conference on Oper-
ating Systems Design and Implementation (Berkeley, CA, USA,
2010), OSDI’10, USENIX Association, pp. 1–6.
[20] ENCK, W., OCTEAU, D., MCDANIEL, P., AND CHAUDHURI,
S. A study of Android application security. In Proceedings of
the 20th USENIX conference on Security (Berkeley, CA, USA,
2011), SEC’11, USENIX Association, pp. 21–21.
[21] ENCK, W., ONGTANG, M., AND MCDANIEL, P. On lightweight
In Proceedings of the
mobile phone application certiﬁcation.
16th ACM Conference on Computer and Communications Secu-
rity (New York, NY, USA, 2009), CCS ’09, ACM, pp. 235–245.
[22] ENCK, W., ONGTANG, M., AND MCDANIEL, P. Understanding
Android security. IEEE Security and Privacy 7 (January 2009),
50–57.
[23] FELT, A. P., CHIN, E., HANNA, S., SONG, D., AND WAG-
NER, D. Android permissions demystiﬁed. In Proceedings of the
18th ACM Conference on Computer and Communications Secu-
rity (New York, NY, USA, 2011), CCS ’11, ACM, pp. 627–638.
[24] FELT, A. P., FINIFTER, M., CHIN, E., HANNA, S., AND WAG-
NER, D. A survey of mobile malware in the wild. In Proceed-
ings of the 1st ACM Workshop on Security and Privacy in Smart-
phones and Mobile Devices (Oct. 2011), SPSM ’11, ACM, pp. 3–
14.
[25] GARFINKEL, T., PFAFF, B., AND ROSENBLUM, M. Ostia: A
delegating architecture for secure system call interposition.
In
Proceedings of the Network and Distributed Systems Security
Symposium (February 2004).
[26] GUDETH, K., PIRRETTI, M., HOEPER, K., AND BUSKEY, R.
Delivering secure applications on commercial mobile devices:
In Proceedings of the 1st
the case for bare metal hypervisors.
ACM Workshop on Security and Privacy in Smartphones and
Mobile devices (New York, NY, USA, 2011), SPSM ’11, ACM,
pp. 33–38.
[27] HORNYACK, P., HAN, S., JUNG, J., SCHECHTER, S., AND
WETHERALL, D. These aren’t the droids you’re looking for:
retroﬁtting Android to protect data from imperious applications.
In Proceedings of the 18th ACM Conference on Computer and
Communications Security (New York, NY, USA, 2011), CCS ’11,
ACM, pp. 639–652.
of the 5th USENIX Workshop On Offensive Technologies (Berke-
ley, CA, USA, 2011), WOOT’11, USENIX Association, pp. 10–
10.
[38] WATSON, R. N. M. Exploiting concurrency vulnerabilities in
system call wrappers. In Proceedings of the ﬁrst USENIX Work-
shop On Offensive Technologies (Berkeley, CA, USA, 2007),
USENIX Association, pp. 2:1–2:8.
[39] YAJIN, Z., AND XUXIAN, J. Dissecting android malware: Char-
acterization and evolution. In Proceedings of the 33rd IEEE Sym-
posium on Security and Privacy (may 2012).
[40] YEE, B., SEHR, D., DARDYK, G., CHEN, J. B., MUTH, R.,
ORMANDY, T., OKASAKA, S., NARULA, N., AND FULLAGAR,
N. Native client: a sandbox for portable, untrusted x86 native
code. Commun. ACM 53 (January 2010), 91–99.
[41] YOU, I., AND YIM, K. Malware obfuscation techniques: A brief
survey. In Proceedings of the 2010 International Conference on
Broadband, Wireless Computing, Communication and Applica-
tions (Washington, DC, USA, 2010), BWCCA ’10, IEEE Com-
puter Society, pp. 297–300.
[28] KIRIANSKY, V., BRUENING, D., AND AMARASINGHE, S. P.
Secure execution via program shepherding. In Proceedings of the
11th USENIX Security Symposium (Berkeley, CA, USA, 2002),
USENIX Association, pp. 191–206.
McAfee threats
Second quarter
www.mcafee.com/us/resources/reports/rp-
2011.
quarterly-threat-q2-2011.pdf, aug 2011.
[29] LABS, M.
report:
[30] LANGE, M., LIEBERGELD, S., LACKORZYNSKI, A., WARG,
A., AND PETER, M. L4Android: a generic operating system
In Proceedings of the 1st
framework for secure smartphones.
ACM Workshop on Security and Privacy in Smartphones and
Mobile devices (New York, NY, USA, 2011), SPSM ’11, ACM,
pp. 39–50.
[31] MOSER, A., KRUEGEL, C., AND KIRDA, E. Exploring mul-
In Proceedings of
tiple execution paths for malware analysis.
the 2007 IEEE Symposium on Security and Privacy (Washington,
DC, USA, 2007), SP ’07, IEEE Computer Society, pp. 231–245.
[32] NADJI, Y., GIFFIN, J., AND TRAYNOR, P. Automated remote
repair for mobile malware. In Proceedings of the 2011 Annual
Computer Security Applications Conference (Washington, DC,
USA, 2011), ACSAC ’10, ACM.
[33] NAUMAN, M., KHAN, S., AND ZHANG, X. Apex: extending
Android permission model and enforcement with user-deﬁned
runtime constraints. In Proceedings of the 5th ACM Symposium
on Information, Computer and Communications Security (New
York, NY, USA, 2010), ASIACCS ’10, ACM, pp. 328–332.
[34] SCOTT, K., KUMAR, N., VELUSAMY, S., CHILDERS, B.,
DAVIDSON, J. W., AND SOFFA, M. L. Retargetable and re-
In Proceedings of
conﬁgurable software dynamic translation.
the international symposium on Code Generation and Optimiza-
tion: feedback-directed and runtime optimization (Washington,
DC, USA, 2003), CGO ’03, IEEE Computer Society, pp. 36–47.
[35] SVEN, B., LUCAS, D., ALEXANDRA, D., STEPHAN, H.,
AHMAD-REZA, S., AND BHARGAVA, S.
Practical and
lightweight domain isolation on Android. In Proceedings of the
1st ACM Workshop on Security and Privacy in Smartphones and
Mobile devices (New York, NY, USA, 2011), SPSM ’11, ACM,
pp. 51–62.
[36] THE HONEYNET PROJECT. Android reverse engineering virtual
machine. www.honeynet.org/node/783.
[37] VIDAS, T., VOTIPKA, D., AND CHRISTIN, N. All your droid are
belong to us: a survey of current Android attacks. In Proceedings
14