1、Install ogr_fdw if you haven't already. Thanks to Devrim, this should be a simple exercise on any platform supported by PGDG Yum repo.  
```  
yum install ogr_fdw94  
```  
(if you are running PostgreSQL 9.3 or above. Of course replace the 94 with version you are running.)  
2、Install the extension in your database. I'm dong the full create, and install here using psql  
```  
su postgres  
psql  
CREATE DATABASE test_ogr_fdw;  
\connect test_ogr_fdw;  
CREATE EXTENSION ogr_fdw;  
\q  
```  
3、Use the include ogr_fdw_info commandline tool to figure out the server and fdw for a table. Connecting to ODBC sources with GDAL/OGR is described in more detail here: http://www.gdal.org/drv_odbc.html I'll use my favorite example of information_schema.columns. You should replace with what you want to connect to.  
```  
ogr_fdw_info -s "ODBC:your_user_name/your_password@MSSQLTDSTest" -l "information_schema.columns"  
```  
This outputs something of the form:  
```  
CREATE SERVER myserver  
  FOREIGN DATA WRAPPER ogr_fdw  
  OPTIONS (  
    datasource 'ODBC:your_user_name/your_password@MSSQLTDSTest',  
    format 'ODBC' );  
CREATE FOREIGN TABLE information_schema_columns (  
  fid integer,  
  geom geometry,  
  table_catalog varchar,  
  table_schema varchar,  
  table_name varchar,  
  column_name varchar,  
  ordinal_position integer,  
  column_default varchar,  
  is_nullable varchar,  
  data_type varchar,  
  character_maximum_length integer,  
  character_octet_length integer,  
  numeric_precision varchar,  
  numeric_precision_radix integer,  
  numeric_scale integer,  
  datetime_precision integer,  
  character_set_catalog varchar,  
  character_set_schema varchar,  
  character_set_name varchar,  
  collation_catalog varchar,  
  collation_schema varchar,  
  collation_name varchar,  
  domain_catalog varchar,  
  domain_schema varchar,  
  domain_name varchar )  
  SERVER myserver  
  OPTIONS ( layer 'INFORMATION_SCHEMA.COLUMNS' );  
```  
Note that ogr_fdw always tacks on an fid and sometimes a geometry column. In case of a SQL Server that has no spatial columns, this is just an artifact, and can be changed to bytea and ignored in use.  
So revise statements as follows and run in psql.  
```  
\connect test_ogr_fdw    
CREATE SERVER mssql_tds_test  
  FOREIGN DATA WRAPPER ogr_fdw  
  OPTIONS (  
    datasource 'ODBC:your_user_name/your_password@MSSQLTDSTest',  
    format 'ODBC' );  
CREATE FOREIGN TABLE tds_information_schema_columns (  
  fid integer,  
  geom bytea,  
  table_catalog varchar,  
  table_schema varchar,  
  table_name varchar,  
  column_name varchar,  
  ordinal_position integer,  
  column_default varchar,  
  is_nullable varchar,  
  data_type varchar,  
  character_maximum_length integer,  
  character_octet_length integer,  
  numeric_precision varchar,  
  numeric_precision_radix integer,  
  numeric_scale integer,  
  datetime_precision integer,  
  character_set_catalog varchar,  
  character_set_schema varchar,  
  character_set_name varchar,  
  collation_catalog varchar,  
  collation_schema varchar,  
  collation_name varchar,  
  domain_catalog varchar,  
  domain_schema varchar,  
  domain_name varchar )  
  SERVER mssql_tds_test  
  OPTIONS ( layer 'INFORMATION_SCHEMA.COLUMNS' );  
```  
Now if you have a lot of tables, the CREATE SERVER process (and selecting from an FDW table) tends to take a while (like 30 seconds), you can winnow down the list a bit to only list tables you would ever want to connect to like so:  
```  
ALTER SERVER mssql_tds_test   
    OPTIONS(SET datasource 'ODBC:your_user_name/your_password@MSSQLTDSTest,information_schema.columns,dbo.ZIPS,someschema.whatever');  
```  
4、Do a test query:  
```  
SELECT ordinal_position As ord, table_name, column_name, data_type, character_maximum_length  
FROM tds_information_schema_columns  
WHERE table_name = 'ZIPS';  
```  
Which for my particular SQL Server db outputs:  
```  
 ord | table_name | column_name | data_type | character_maximum_length  
-----+------------+-------------+-----------+--------------------------  
   1 | ZIPS       | Country     | varchar   |                        4  
   2 | ZIPS       | ZipCode     | varchar   |                       12  
   3 | ZIPS       | ZipType     | varchar   |                        2  
   4 | ZIPS       | CityName    | varchar   |                       80  
   5 | ZIPS       | CityType    | varchar   |                        2  
   6 | ZIPS       | CountyName  | varchar   |                       80  
   7 | ZIPS       | CountyFIPS  | varchar   |                        5  
   8 | ZIPS       | StateName   | varchar   |                       80  
   9 | ZIPS       | StateAbbr   | varchar   |                       40  
  10 | ZIPS       | StateFIPS   | varchar   |                        4  
  11 | ZIPS       | MSACode     | varchar   |                        8  
  12 | ZIPS       | AreaCode    | varchar   |                       12  
  13 | ZIPS       | TimeZone    | varchar   |                       24  
  14 | ZIPS       | UTC         | varchar   |                       12  
  15 | ZIPS       | DST         | varchar   |                        2  
  16 | ZIPS       | Latitude    | float     |  
  17 | ZIPS       | Longitude   | float     |  
  18 | ZIPS       | id          | int       |  
(18 rows)  
```  
Now although SQL Server isn't case sensitive, since PostgreSQL is, the example has to match the case of the SQL Server table.  
5、I chose use of information_schema.columns because from it, it's fairly trivial to create a new foreign table. So if you wanted a new foreign table, you'd do this:  
```  
SELECT 'CREATE FOREIGN TABLE ' || table_name || ' (fid int, geom bytea, ' ||   
    string_agg(column_name || ' ' || data_type, ',' ORDER BY ordinal_position ) || ')   
SERVER mssql_tds_test   
OPTIONS ( layer ''' || table_schema || '.' || table_name || ''' ) '  
FROM tds_information_schema_columns   
WHERE table_name IN('ZIPS') AND table_schema = 'dbo'  
GROUP BY table_schema, table_name;  
```  
Warning: This example leaves out logic to handle data types like datetime that need to be mapped to different timestamp in PostgreSQL and other oddities like quote ident.  
The output of the above query would be this which can then be used to define a new foreign table against the SQL Server  
```  
CREATE FOREIGN TABLE ZIPS (fid int, geom bytea, Country varchar,ZipCode varchar,ZipType varchar,CityName varchar,CityType varchar,  
CountyName varchar,CountyFIPS varchar,StateName varchar,StateAbbr varchar,  
StateFIPS varchar,MSACode varchar,AreaCode varchar,TimeZone varchar,UTC varchar,DST varchar,  
Latitude float,Longitude float,id int)   
SERVER mssql_tds_test   
OPTIONS ( layer 'dbo.ZIPS' );  
```  
6、Test out the new table:  
```  
SELECT zipcode, cityname from zips WHERE statename ILIKE 'New York' limit 100;  
```  
Someone mentioned to me that their list of tables that have compound keys didn't show up as options on Linux, but did when using ogr_fdw under windows. I haven't experimented with that to see if I can replicate the issue.  
## 参考  
https://github.com/CartoDB/odbc_fdw  
http://pgxn.org/dist/tds_fdw/  
http://www.postgresonline.com/journal/archives/355-Connecting-to-SQL-Server-from-Linux-using-FDWs.html  
https://programmer.help/blogs/postgresql-connects-to-sql-server-using-odbc_fdw.html  
https://wiki.postgresql.org/wiki/Foreign_data_wrappers  
/etc/odbc.ini  
/etc/odbcinst.ini  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")