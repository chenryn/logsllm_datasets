and a (partial) decryption of the output of that shufﬂe. This
means that a mixer can proceed exactly as above: compute a
(cid:4)
fake decryption proof and a matching ciphertext (C0,C
), then
1
deﬁne its shufﬂe in such a way that a ciphertext with the right
C0 comes out of it.
More precisely, suppose that CCM1 has, as part of its list of
input ciphertexts for mixing and partial decryption, a ciphertext
(D0,D1). It needs to include this ciphertext in its shufﬂe and
output a partially decrypted version of it, together with proofs
that these operations were performed correctly. But it wishes
to modify the contents of that ciphertext, so that it becomes
invalid and will not be taken into account in the tally. It will
do this by declaring a false decryption and proving it to be
correct using the cheating proof described above.
First, it produces a fake decryption proof and a matching
Now, in order to make it possible to produce a proof of
shufﬂe (assuming that this proof is sound), it needs to deﬁne
C1 such that the pair (C0,C1) is actually a re-encryption of
(D0,D1). To this purpose, it computes E0 = C0/D0 and E1 =
0. Now (E0,E1) is an encryption of 1 such that (D0,D1)·
Ex
(E0,E1) = (C0,D1E1). So, it can simply set C1 = D1E1, which
(cid:4)
is a true re-encryption of the vote. Then setting P to C1/C
1
makes (c,z) a valid proof that (C0,C1) decrypts to P, though
this is (almost certainly) not true.
One last difﬁculty is to make the proof of shufﬂe work.
The ciphertext (C0,C1) is a re-encryption of (D0,D1), so the
shufﬂe is still valid. However, the proof requires knowing the
randomness used in the re-encryption factor, which CCM1 does
not know, unless it has the discrete log of D0 in base g. Indeed,
if D0 = gr, then E0 = g(t+sc)/z−r, and the reencryption factor
needed to complete the proof of shufﬂe is t+sc
z
This would require information leakage from the voting
client to the server (CCM1). This does not seem an excessive
requirement, when both are implemented by the same corpo-
ration and administered by the same authority. It is certainly
inconsistent with the claim of complete veriﬁability that such
information leakage should allow electoral manipulation.
− r.
(cid:4)
ciphertext (c,z,C0,C
1
), as described in Appendix C.
C. On the possibility to cheat and produce valid ballots.
In the attack described here, assuming the attacker must also
generate a true shufﬂe proof, the attacker gets an effectively
random plaintext. The attack would of course be much more
stealthy if that random plaintext corresponded to the encoding
of a valid vote. In the Swiss system, this seems highly unlikely,
since only a negligible fraction of plaintexts are valid votes,
and the resulting vote will just be invalid.
In other places, it depends critically on the method for
encoding the votes.
Summary of the problem: Suppose that the ﬁrst mixer
(CCM1) is corrupted and that he can obtain the randomness
used for encryption by some voters. Then this mixer can
produce a valid shufﬂe proof and a fake decryption proof for
the ciphertexts produced by these voters, so that their votes
become invalid. If this mixer knows the randomness, he will of
course focus on invalidating votes for candidates that he does
not like.
Fixing the problem: Same as Section III. Hash all relevant
data when using the Fiat-Shamir heuristic.
Current status of the problem: An effort is being made
to remediate the problem in future versions.
VIII. HOW DO OTHERS PICK THEIR PUBLIC PARAMETERS?
HOW SHOULD THEY?
In this section, we examine some of the ways independent
generators—on which the commitment schemes rely—are
generated in practice. We discuss the common approaches taken
and highlight critical problems than can, and have, occurred.
One key issue that seems to have resulted in the problems
we describe is the deﬁnition of the word “independent.”
When independent generators are required for the commitment
scheme, the term means that the discrete log relation between
them is unknown. In contrast, when discussing probability,
the word independent means that probability does not change
depending on the outcome of the others.
A. Common methods
There are two methods which are commonly used to generate
independent generators. The ﬁrst is contained in Algorithm
A.2.3 Veriﬁable Canonical Generation of the Generator g from
NIST ﬁps186-4 [16] and is reproduced here as Algortihm 1.
The second is Handbook of Applied Cryptography, Algorithm
4.80 and Note 4.81 [17] and as Algorithm 2 below.
The ﬁrst method was speciﬁcally designed to ﬁnd indepen-
dent generators in Schnorr groups. The second is designed
to ﬁnd a single generator for a cyclic group. Both algorithms
have commonly been adapted to other kinds of groups. In many
libraries neither method is explicitly cited but the method used
is nevertheless nearly identical to one of them.
The two algorithms put different demands on their source of
randomness. In the NIST standard (Algorithm 1) a sufﬁciently
controlled domain parameter seed, for instance the name of
the election, combined with a hash function with sufﬁcient
domain would seem acceptable. In Algorithm 2, the randomness
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:41:54 UTC from IEEE Xplore.  Restrictions apply. 
654
Algorithm 1: Algorithm A.2.3 Veriﬁable Canonical
Generation of the Generator g
Data: p, q for a Schnorr group of order q in the ﬁeld
Fp of order p = kq + 1
domain parameter seed
index
Result: status, g
1 if (index is incorrect), then return INVALID
2 N = len(q)
3 e = (p− 1)/q
4 count = 0
5 count = count +1
6 if (count = 0), then return INVALID
7 U = domain parameter seed (cid:6) “ggen
(cid:4)(cid:4) (cid:6) index (cid:6)
count
8 W = Hash(U)
9 g = W e mod p
10 if (g < 2), then go to step 5
11 Return VALID and the value of g
Algorithm 2: Handbook of Applied Cryptography,
Algorithm 4.80
Data: a cyclic group G of order n, and the prime
factorisation n = pe1
1 pe2
2
Result: a generator α of G.
··· pek
k .
1 Choose a random element α in G.
2 for i from 1 to k do the following: do
3
4
5 Return(α).
Compute b ← αn/pi .
If b = 1 then go to step 1.
used in Step 1 must be chosen in a veriﬁable manner. Failing
to check this risks a trapdoor like that described in Section VI.
In both these cases the key point is the way in which the
candidate, for generator, element is mapped into the group.
It does not sufﬁce for the candidates to be chosen randomly
(uniformly and independently) but rather they are chosen so
that no additional information is revealed about the discrete
log of the element.
B. Potential problems with these methods
In the ﬁrst method, knowledge of process reveals no more
information than just seeing the random generators, at least up
to some assumptions on the hash function. This is true because
the Tonelli-Shanks algorithm can easily be used to compute w
from the generator g. In the second method, the way in which
the random element is chosen is undeﬁned; therefore, so is the
security of the algorithm when being used to ﬁnd independent
generators.
C. In Practice
We now detail several real cases where this has and has not
occurred. We again stress that in no case did the developer of
the library not understand the issues involved. However, direct
use of some of the libraries could, and likely would, result in
an insecure e-voting scheme.
1) UniCrypt: The UniCrypt cryptographical framework5 by
the Bern University of Applied Sciences (BFH), Research
Institute for Security in the Information Society (RISIS), E-
Voting Group (EVG) is a framework for implementing e-voting
that is or was used/trialed in a number of companies and
solutions.6
It implements both of the methods described above but
primarily the second. The exact way in which the random
element is generated differs based on the group in question
and this makes all the difference.
Group
Sub-group of order m
of a cyclic group of
integers Z
Elliptic curve of or-
der q
∗
n
Method
k ←$ Z
∗
n,kn/m
Security
Secure
k ←$ (0,q− 1),gk
Broken
In discussion with the authors of UniCrypt we discovered that
the EC extension was a student project and not supported in
the same way as the Schnorr groups; nevertheless, this is not
obvious to us from looking at library and we suspect would
not be obvious to others. To the best of our knowledge, all of
the systems built on top of UniCrypt (which have been used
in real elections) were instantiated using the secure version.
However, in most cases a simple modiﬁcation of about three
lines would switch the system to the insecure variant.
2) Stadium: The Stadium project, and its descendants, have
two implementations of Bayer-Groth mixnets in C++, one for
Schnorr groups7 and one for elliptic curves8. Both of these use
the naive method described above and hence would invalidate
the veriﬁability claim of the e-voting system in which they were
used. This in no way undermines the value of the prototype
but highlights the danger of using them without due care.
3) GRNET-Fauzi et al: The Zeus project [18] has imple-
mented a prototype of the Fauzi et al mixnet [19].910 Unlike
the other mixnets mentioned here, the secure generation of
the common reference string for Fauzi et al. is non-trivial and
multiparty computation is probably required. These libraries
do not securely implement
the common reference string
generation.
4) CHVote prototype (2.0): The CHVote prototype 2.0
correctly implements and uses a method to create independent
generators.
5) Veriﬁcatum: Veriﬁcatum provides a good example of
how to securely generate independent generators for elliptic
curves.11 We present a slightly simpliﬁed version here.
5https://github.com/bfh-evg/unicrypt
6We gathered this information on company usage by searching GitHub.
7https://github.com/derbear/veriﬁable-shufﬂe
8https://github.com/nirvantyagi/stadium/tree/master/groth
9https://github.com/grnet/ac16
10https://github.com/StefanosChaliasos/gsoc17module-zeus
11https://github.com/veriﬁcatum/veriﬁcatum-vcr
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:41:54 UTC from IEEE Xplore.  Restrictions apply. 
655
Algorithm 3: Veriﬁcatum Core Routines - randomEle-
ment (simpliﬁed)
Data: a cyclic elliptic curve group G of order q, over a
ﬁnite ﬁeld Zp of order p. The curve is deﬁned
by the equation y2 = x3 + ax + b
Result: an element α of G.
1 for i from 0 to ∞ do the following: do
2
Choose a random element β in Zp in a veriﬁable
way.
if (β 3 + aβ + b) p−1
(cid:2)
return (β ,
2 = 1 then
β 3 + aβ + b)
3
4
D. Conclusion and Recommendations
Given that for most cases in e-voting it is possible to
securely—and veriﬁably—generate independent generators
without relying on multiparty computation, we recommend
that this and only this should be done. We are impressed by
the understanding and care taken by those researchers imple-
menting e-voting libraries but concerned by the dangers still
present by others using their libraries without understanding.
IX. DISCUSSION/CONCLUSION
We have shown numerous serious issues with the complete
election veriﬁability process of the sVote 2.1 protocol, which
open the way for undetectable electoral fraud in the Scytl-
SwissPost system. Fake proofs are possible at almost every
step, from the client proving that the vote is valid, to the return
of choice codes, to the mixing and decryption of the votes.
In all cases, formally, veriﬁcation would pass, though in some
cases it would probably be observed that something unusual
occurred (such as the presence of invalid votes).
We are a small team of researchers investigating this code
base for the ﬁrst time. We inspected only a small fraction of it.
The code is very complex and difﬁcult to understand. There is
no reason to think that correcting all the known ﬂaws will be
easy, or that it will produce a secure system with no further
opportunities for undetectable electoral fraud.
We are now told12 that code for generating commitment
parameters properly was already present. But the code is so
convoluted that (as far as we know) none of the ofﬁcial audits
noticed that it was not actually being used to generate the
parameters (Section VI). Besides, the speciﬁcation describes
the insecure process, and the veriﬁcation speciﬁcation does not
mention verifying proper generation.
As well as the direct impact of the the attacks, our analysis
of the ZKPs shows that they do not offer the security guar-
antees that are assumed in the “complete veriﬁability security
proof” [10]. Therefore, successfully passing the current sVote
12https://www.scytl.com/en/scytl-responds-misinterpretations-related-swiss-\
posts-media-release/
audit process [12] cannot be used to draw any conclusion
regarding the correctness of the election outcome.
This does not mean that formal proofs are useless—they are
important for clarifying assumptions and security claims, and
they provide an argument (which can be checked) for why the
system should be trusted. However, proofs themselves can be
mistaken or insufﬁcient. They should be required, but they are
a part of the scrutiny process not a substitute for open scrutiny.
We believe that this study conﬁrms the importance for any
democracy of enforcing openness such as that mandated by
the Swiss Federal Ordinance 161.116. The source code for
the system must be “easily obtainable, free of charge, on the
internet. [...] Anyone is entitled to examine, modify, compile
and execute the source code for ideational purposes, and to
write and publish studies thereon.” This enforces a process
that increases the likelihood that you hear the truth about its
security properties before you vote over the Internet.
It is unfortunate to make a code base (like sVote 2.1) available
for public examination and then have to withdraw it because