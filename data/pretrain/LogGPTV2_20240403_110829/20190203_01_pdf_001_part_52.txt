Synopsis
-removesub subname –repsvrfile subsvrfile
See Section 5.5.5 for additional information on removing a subscription.
Parameters
subname
The name of the subscription to be removed.
subsvrfile
The file containing the subscription server login information.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 598
EDB Postgres Replication Server User’s Guide
Examples
A subscription named dept_emp_sub is removed.
$ java -jar edb-repcli.jar -removesub dept_emp_sub \
> -repsvrfile ~/subsvrfile.prop
Removing subscription...
Subscription removed successfully.
8.3.48 Scheduling Shadow Table History Cleanup
(confcleanupjob)
The confcleanupjob command creates a schedule as to when shadow table history is
to be deleted.
Synopsis
-confcleanupjob pubdbid –repsvrfile pubsvrfile
{ -disable | -enable
{ -minutely no_of_minutes |
-hourly no_of_hours |
-daily hour |
-weekly day_of_week hour |
-cronexpr "cron_expression"
}
}
If the disable parameter is specified, then the schedule is deleted. No other parameters
other than pubdbid and pubsvrfile can be specified in this case.
If the disable parameter is omitted, then the enable parameter and one of parameters
minutely, hourly, daily, weekly, or cronexpr must be specified along with the
pubdbid and pubsvrfile parameters.
See Section 7.5.1 for additional information on creating a schedule for shadow table
history cleanup.
Parameters
pubdbid
Publication database ID of the publication database definition for which a
schedule is to be enabled or disabled for deleting shadow table history.
pubsvrfile
The file containing the publication server login information.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 599
EDB Postgres Replication Server User’s Guide
-disable
If the disable parameter is specified, then any existing shadow table history
cleanup schedule is removed from the publication database definition. If the
disable parameter is not specified, then enable must be specified.
-enable
Establish a schedule for shadow table history cleanup.
no_of_minutes
The number of minutes between scheduled shadow table history cleanup jobs.
This can be any integer between 1 and 59 inclusive.
no_of_hours
The number of hours between scheduled shadow table history cleanup jobs. This
can be any integer between 1 and 12 inclusive.
hour
The hour of the day based on a 24-hour clock. This can be any integer from 0 to
23.
day_of_week
The day of the week. This can be any of the following values: SUNDAY, MONDAY,
TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, or SATURDAY. This value is case
insensitive so Sunday and sunday will work as well as SUNDAY.
cron_expression
A cron expression. See appendix Section 10.4.3 for information on writing a cron
expression.
Examples
In the following example shadow table history cleanup is scheduled to run once every 3
hours on the shadow tables created within the publication database definition identified
by publication database ID 1.
$ java -jar edb-repcli.jar -confcleanupjob 1 \
> -repsvrfile ~/pubsvrfile.prop \
> -enable -hourly 3
Configuring cleanup job ...
Cleanup job configured.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 600
EDB Postgres Replication Server User’s Guide
In the following example shadow table history cleanup is scheduled to run once a day at
6:00 PM on the shadow tables created within the publication database definition
identified by publication database ID 1.
$ java -jar edb-repcli.jar -confcleanupjob 1 \
> -repsvrfile ~/pubsvrfile.prop \
> -enable -daily 18
Configuring cleanup job ...
Cleanup job configured.
In the following example shadow table history cleanup is scheduled to run every
Wednesday at 8:00 AM on the shadow tables created within the publication database
definition identified by publication database ID 1.
$ java -jar edb-repcli.jar -confcleanupjob 1 \
> -repsvrfile ~/pubsvrfile.prop \
> -enable –weekly WEDNESDAY 8
Configuring cleanup job ...
Cleanup job configured.
In the following example the shadow table history cleanup job is disabled on the
publication database definition identified by publication database ID 1.
$ java -jar edb-repcli.jar -confcleanupjob 1 \
> -repsvrfile ~/pubsvrfile.prop -disable
Configuring cleanup job ...
Cleanup job removed.
8.3.49 Cleaning Up Shadow Table History
(cleanshadowhistforpub)
The cleanshadowhistforpub command deletes the shadow table history for the
specified publication.
Synopsis
-cleanshadowhistforpub pubname
–repsvrfile pubsvrfile
[ -mmrdbid dbid_1[,dbid_2 ] ...]
See Section 7.5.2 for additional information on cleaning up shadow table history.
Parameters
pubname
The name of the publication for which the shadow table history is to be deleted.
pubsvrfile
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 601
EDB Postgres Replication Server User’s Guide
The file containing the publication server login information.
dbid_n
For MMR only: The publication database ID of the master node for which the
shadow table history is to be deleted. This parameter is required for a multi-
master replication system specifying one or more comma-separated, publication
database IDs. Note: There must be no white space between the comma and
publication database IDs.
Examples
In the following example shadow table history is deleted for publication dept_emp.
$ java -jar edb-repcli.jar -cleanshadowhistforpub dept_emp \
> -repsvrfile ~/pubsvrfile.prop
Removing shadow table's transaction history ...
Shadow table's transaction history removed successfully.
8.3.50 Cleaning Up Replication History (cleanrephistoryforpub)
The cleanrephistoryforpub command deletes the replication history for the
specified publication.
Synopsis
-cleanrephistoryforpub pubname –repsvrfile pubsvrfile
See Section 7.5.3 for additional information on cleaning up replication history.
Parameters
pubname
The name of the publication for which replication history is to be deleted.
pubsvrfile
The file containing the publication server login information.
Examples
In the following example replication history is deleted for publication dept_emp.
$ java -jar edb-repcli.jar -cleanrephistoryforpub dept_emp \
> -repsvrfile ~/pubsvrfile.prop
Removing publication's replication history ...
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 602
EDB Postgres Replication Server User’s Guide
Replication history has been removed.
8.3.51 Cleaning Up All Replication History (cleanrephistory)
The cleanrephistory command deletes the replication history for all publications in
the specified publication server.
Synopsis
-cleanrephistory –repsvrfile pubsvrfile
See Section 7.5.3 for additional information on cleaning up replication history.
Parameters
pubsvrfile
The file containing the publication server login information.
Examples
In the following example, replication history is deleted for all publications in the
publication server identified by the content of file pubsvrfile.prop.
$ java -jar edb-repcli.jar -cleanrephistory -repsvrfile ~/pubsvrfile.prop
Removing all publication's replication history ...
Replication history has been removed.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 603
EDB Postgres Replication Server User’s Guide
9 Data Validator
The Data Validator is a utility that compares the rows of one or more tables within a
schema of a database against the rows of the tables with the same names within a schema
of another database. The Data Validator generates a summary of the comparison noting
the number of rows whose column values differ. A file containing detailed information
regarding any differences is also generated.
The two databases being compared are referred to as the source database and the target
database. The source database can be of type Oracle, EnterpriseDB, SQL Server,
Sybase®, or MySQL®. The target database must be either Oracle or EnterpriseDB.
An EnterpriseDB database type means either an Advanced Server database or a
PostgreSQL database.
The tables available for comparison are those found in the schema of the source database.
Tables in the target database that do not exist in the source database schema are ignored.
Note: The Data Validator does not validate columns having the following data types.
Tables containing one or more columns of these types will only be partially validated.
 BFILE
 STRUCT
 REF
 ARRAY
 BLOB
 CLOB
 RAW
 LONG RAW
Note: Regarding the usage of the Data Validator with tables in an xDB Replication
Server single-master or multi-master replication system, be sure all synchronization
replication between the source and target xDB Replication Server tables has been
completed before using the Data Validator. If synchronization replication is still in
progress, it is probable that the Data Validator will report differences in table content.
9.1 Installation and Configuration
Step 1: When you install the xDB Replication Server product, the components for the
Data Validator are installed as well. See Chapter 3 for information on installing the xDB
Replication Server product.
Also, when you uninstall the xDB Replication Server product, the Data Validator
components are uninstalled as well.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 604
EDB Postgres Replication Server User’s Guide
The following components that you use to run the Data Validator are installed when you
install the xDB Replication Server product.
Table 9-1 - Data Validator Files
File Name Location Description
datavalidator.properties XDB_HOME/etc Data Validator Properties file
runValidation.sh (Linux) XDB_HOME/bin Data Validator execution script
runValidation.bat (Windows) XDB_HOME\bin Data Validator execution script
Note: XDB_HOME is the directory where xDB Replication Server is installed. This may or
may not be the same as the Postgres home directory depending upon how xDB
Replication Server is installed.
Step 2: If you plan to use an Oracle database as the source or target database, download
the Oracle JDBC driver and place it in the JAVA_HOME/jre/lib/ext directory.
Step 3: Edit the datavalidator.properties file located in the XDB_HOME/etc
directory and specify the connection information for the source and target databases you
want to compare.
Any of these parameters can be overridden by an option when you invoke the Data
Validator script. See Section 9.2 for additional information on invoking the Data
Validator.
The following are the parameters in the datavalidator.properties file.
Table 9-2 - Data Validator Properties File Parameters
Parameter Description
Type of the source database. Values may be enterprisedb,
source_dbms
oracle, sqlserver, sybase, or mysql.
IP address or server name of the host running the database
source_host
server of the source database
Port number on which the database server of the source
source_port
database listens for requests
source_database Database name of the source database
source_user Database user name of the source database
source_password Unencrypted password of the source database user
Type of the target database. Values may be enterprisedb
target_dbms
or oracle.
IP address or server name of the host running the database
target_host
server of the target database
Port number on which the database server of the target
target_port
database listens for requests
target_database Database name of the target database
target_user Database user name of the target database
target_password Unencrypted password of the target database user
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 605
EDB Postgres Replication Server User’s Guide
The following is the initial content of the datavalidator.properties file after
installation:
###############################################################
# Source database connection #
###############################################################
#
#source_dbms=(enterprisedb | oracle | sqlserver | sybase | mysql)
#
source_dbms=oracle
source_host=localhost
source_port=1521
source_database=xe
source_user=hr
source_password=hr
#source_dbms=mysql
#source_host=localhost
#source_port=3306
#source_database=test
#source_user=root
#source_password=
#source_dbms=sqlserver
#source_host=localhost
#source_port=1433
#source_database=pubs
#source_user=sa
#source_password=
#source_dbms=sybase
#source_host=localhost
#source_port=5004
#source_database=test
#source_user=sa
#source_password=
###############################################################
# Target database connection #
###############################################################
#
#target_dbms=(enterprisedb | oracle)
#
target_dbms=enterprisedb
target_host=localhost
target_port=5444
target_database=edb
target_user=enterprisedb
target_password=edb
Step 4: Determine the location for the Data Validator logs directory.
Before invoking the Data Validator for the first time, be sure you have determined where
the Data Validator logs directory is to be located.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 606
EDB Postgres Replication Server User’s Guide
The Data Validator generates a log file with a name formatted as
datavalidator_yymmdd-hhmiss.log in the logs directory for each run.
If there are row differences between the source and target tables, a file with a name
formatted as datavalidator_yymmdd-hhmiss.diff is also generated that contains
output of the errors in diff format. Use a graphical diff tool like Kompare to view this file
to highlight the specific differences.
The Data Validator attempts to create a subdirectory named logs within the
XDB_HOME/bin directory the first time you invoke the Data Validator without the -ld
option. If you do not invoke the Data Validator as the root account, it is likely that the
run will fail as it attempts to create subdirectory logs in the XDB_HOME/bin directory
where typically only the root account has this privilege.
The same situation also exists on Windows hosts as the account you are using must have
the permission to create a subdirectory in the XDB_HOME\bin location.
Choices for determining and setting the Data Validator directory for the log and diff files
are the following:
 Run the Data Validator as the root account. This enables the Data Validator to
create the logs subdirectory within the XDB_HOME/bin directory, and then to
create the log and diff files in the logs subdirectory.
 Create the XDB_HOME/bin/logs directory structure before running the Data
Validator. Modify the permissions on directory XDB_HOME/bin/logs so the
operating system account you use to run the Data Validator has the privilege to
create files in the directory.