tion at end hosts (Section 7.6).
7.1 Performance of Sequential Hypothesis Test
with Training
We now investigate the performance of our sequential hy-
pothesis test with training. The Ethernet and WLAN inter-
ACK time distributions required by this algorithm are ob-
tained as described in Section 6.2. We next describe results
from oﬄine and online evaluation.
7.1.1 Ofﬂine Evaluation
In oﬄine evaluation, we collect measurements on three
consecutive days, from 10/18/2006 to 10/20/2006. The trace
on each day lasts for 6 to 7 hours. The threshold to iden-
tify ACK-pairs, T , is set to 240µs or 400 µs. The threshold
to decide a host’s connection type, K, is set to 104, 105 or
106. We next describe the results for the trace collected on
10/20/2006; the results for the other two days are similar.
Tables 1 and 2 present the detection results for the cam-
pus public WLAN and the Ethernet test set respectively. In
both cases we observe that the detection results are simi-
lar under diﬀerent values of T and K, indicating that our
algorithm is insensitive to the choice of parameters. For
all values of T and K, the detection results are extremely
accurate with a correct detection ratio above 99.38%. On
average, it takes less than 10 ACK-pairs (corresponding to
250 to 347 data packets) to make a detection for WLAN
and less than 20 ACK-pairs (corresponding to 87 to 124
 0.5
 0.45
 0.4
 0.35
 0.3
 0.25
 0.2
 0.15
 0.1
 0.05
 0
Ethernet
WLAN
1
5 10
30 60
>300
seconds
Figure 7: Detection-time distributions for the trace
collected on 10/20/2006 (T = 240 µs, K = 106, N = 100).
data packets) for Ethernet. The relatively larger number of
data packets for a detection of WLAN compared to that of
Ethernet can be explained as follows. The inter-ACK times
in WLAN tend to be large (compared to those in Ethernet),
leading to large inter-arrival times between newly triggered
data packets due to TCP’s self-clocking. When the inter-
arrival time of the data packets is larger than the threshold
T , the corresponding ACKs are not qualiﬁed as an ACK-
pair. This is conﬁrmed by the lower ACK-pair ratio (i.e.,
the number of ACK-pairs divided by the total number of
packets) in WLAN traﬃc shown in Tables 1 and 2.
The detection-time distributions for both WLAN and LAN
when K = 106 is shown in Fig. 7. The median detection
times for Ethernet and WLAN are around 1 second and 10
seconds respectively. The much shorter detection time in
Ethernet is due to higher ACK-pair ratios, as explained ear-
lier. We also observe long detection times (over 5 minutes)
in the ﬁgure. They might be caused by users’ change of
activities (e.g., a user stops using the computer to think or
talk and then resume using it).
Finally, around 84% of ACK-pairs used in WLAN detec-
tion and 89% of ACK-pairs used in LAN detection are gener-
ated by web traﬃc, indicating that our approach is eﬀective
even for short ﬂows.
7.1.2 Online Evaluation
In online evaluation, we run our detection algorithm online
on three consecutive days, from 10/25/2006 to 10/27/2006,
lasting for 6 to 7 hours on each day. We set T = 240
µs, K = 106, representing a conservative selection of pa-
rameters. Table 3 presents the detection results for both
test sets. We observe consistent results as those in oﬄine
evaluation. That is, the detection is highly accurate and
prompt. The average numbers of ACK-pairs and data pack-
ets required for a detection are consistent with those in the
oﬄine evaluation. The above demonstrates the eﬃciency of
our online detection algorithm.
7.2 Performance of Sequential Hypothesis Test
without Training
We now examine the performance of our sequential hy-
pothesis test without training. Recall that this algorithm
does not require training sets.
It takes at most N ACK-
pairs to make a decision (i.e., detecting WLAN or undeter-
Table 1: Oﬄine evaluation of sequential hypothesis test with training: results on WLANs (10/20/2006).
Avg. # of ACK-pairs for a detection
Avg. # of data pkts for a detection
Median detection time (sec)
Number of detections
Correct detection ratio
ACK-pair ratio
T=240 µs
T=400 µs
K = 104 K = 105 K = 106 K = 104 K = 105 K = 106
5
250
8
12, 607
99.43%
6
288
10
10, 882
99.59%
2%
7
347
13
5
204
6
8, 969
99.61%
15, 724
99.38%
6
235
8
13, 567
99.53%
2%
7
283
11
11, 169
99.61%
Table 2: Oﬄine evaluation of sequential hypothesis test with training: results on Ethernet (10/20/2006).
T=240 µs
T=400 µs
K = 104 K = 105 K = 106 K = 104 K = 105 K = 106
Avg. # of ACK-pairs for a detection
Avg. # of data pkts for a detection
Median detection time (sec)
11
87
0.6
13
106
1.0
16
124
1.2
13
73
0.3
Number of detections
Correct detection ratio
ACK-pair ratio
4, 896
3, 363
99.88% 100.00% 99.97%
3, 990
5, 860
99.61%
13%
16
89
0.6
4, 747
99.79%
17%
19
106
0.9
4, 002
99.78%
1
0.95
0.9
F
D
C
0.85
0.8
0.75
0.7
100
Maximum number of un−ACKed data packets
103
104
101
102
Figure 8: CDF of the number of items in the
unacked-data-packet queues.
mined). We apply this algorithm to traces collected between
10/18/2006 and 10/20/2006 using T = 240 µs, K = 106,
and N = 100. For the Ethernet test set, this algorithm de-
tects no WLAN host for all the traces, indicating that it has
no false positives. Note that although this algorithm is de-
rived using analytical results in Section 3 (in a setting where
the receiver is one hop away from the router), our experi-
mental results indicate that it is accurate in more relaxed
settings (the Ethernet hosts in the Computer Science build-
ing are three hops away from the gateway router). This is
not surprising since our algorithm is based on an extremely
conservative analysis (assuming that the single Ethernet link
is full utilized). For the WLAN test set, of all the hosts with
at least one ACK-pair, this algorithm detects 60% to 76%
of them as WLAN hosts. Table 4 presents the experimental
results for the WLAN test set. In general, this algorithm re-
quires more ACK-pairs and longer time to make a detection
than the algorithm with training.
7.3 Scalability Study
We investigate the scalability of our approach by looking
at its CPU and memory usages of the PC that runs the de-
tection algorithms (the conﬁguration of the PC is described
in Section 6.1). During online evaluation, we sample the
CPU usage at the measurement PC every 30 seconds. The
maximum CPU usage is 9.1% (without optimizing our im-
plementation), indicating that the measurement task is well
within the capability of the measurement PC. For memory
usage, we investigate the space taken by the unacked-data-
packet queues since the memory usage mainly comes from
storing these queues (see Section 5). Fig. 8 plots the CDF of
the maximum number of items in each queue for the trace
collected on 10/20/2006 (results for other traces are simi-
lar). This trace was collected over 7 hours and captures 1.8
million TCP ﬂows for the IP addresses being monitored (the
maximum number of concurrent ﬂows is 8244). We observe
that most of the queues are very short: 90% of them have
less than 3 items, indicating that the memory usage is very
low (each data item only keeps 14 bytes of data; see Sec-
tion 5.1). However, we also observe very long queues. We
conjecture that these long queues are due to routing changes
or abnormal behaviors in the routes. As an optimization to
our online detection system, we can discard unacked-data-
packet queues longer than a certain threshold.
7.4 Detection of Wireless Networks behind NAT
We now demonstrate that our approach is equally appli-
cable to detect other types of rouges, in particular, wireless
networks behind a NAT box. Note that, schemes using MAC
address (e.g., [9, 4, 10]) fail to detect this type of rogue, since
all traﬃc going through a NAT box have the same MAC ad-
dress (i.e., the MAC address of the NAT box). We look at
NAT boxes in two settings, one conﬁgured by ourselves and
the other being used in the Computer Science Department.
7.4.1 Self-conﬁgured NAT
We conﬁgure a Linux host A as a NAT box. Host A has
two network interfaces, an Ethernet card and a ZCOMAX
AirRunner/XI-300 802.11b wireless card. The Ethernet in-
terface connects directly to the Internet. The wireless card
Table 3: Online evaluation of sequential hypothesis test with training (10/25/2006 - 10/27/2006).
10/25/2006
10/26/2006
10/27/2006
WLAN Ethernet WLAN Ethernet WLAN Ethernet
Avg. # of ACK-pairs for a detection
Avg. # of data pkts for a detection
Median detection time (sec)
7
310
9.7
16
145
1.2
8
351
15.0
21
153
0.1
7
336
11.4
16
135
1.2
Number of detections
Correct detection ratio
ACK-pair ratio
23, 266
2, 948
99.58% 99.93% 98.44% 99.92% 99.72% 99.76%
15, 977
5, 798
15, 654
10, 628
2%
11%
2%
13%
2%
12%
Table 4: Evaluation of sequential hypothesis test without training on WLANs.
Date
Detection ratio
Avg. # of ACK-pairs for a detection
Avg. # of data pkts for a detection
Median detection time (sec)
Number of detections
10/18/2006
10/19/2006
10/20/2006
68%
22
997
105
3, 259
76%
21
858
59
6, 539
60%
19
903
52
2, 722
is conﬁgured to the master mode using Host AP [5] so that
it acts as an AP. We then set up two laptops B and C to ac-
cess the Internet through the wireless card of A. When host
B or C accesses the Internet, its packets reach host A. Host