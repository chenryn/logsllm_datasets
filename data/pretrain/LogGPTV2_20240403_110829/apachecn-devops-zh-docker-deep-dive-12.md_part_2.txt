            "Options": null,
            "Config": [
                {
                    "Subnet": "10.0.0.0/24",
                    "Gateway": "10.0.0.1"
                }
        "Containers": {
                "Name": "test.1.mfd1kn0qzgosu2f6bhfk5jc2p",
                "IPv4Address": "10.0.0.3/24",
            },
                "Name": "test.2.m49f4psxp3daixlwfvy73v4j8",
                "IPv4Address": "10.0.0.4/24",
            },
```
 `为了可读性，输出被大量删减，但是你可以看到它显示**超级网络**的子网是`10.0.0.0/24`。这与图 12.2 所示的两个物理底层网络都不匹配(`172.31.1.0/24`和`192.168.1.0/24`)。您还可以看到分配给这两个容器的 IP 地址。
在**节点 1** 和**节点 2** 上运行以下两个命令。这些将获得容器的标识，并从前面的命令中确认 IP 地址。确保在第二个命令中使用您自己实验室的容器标识。
```
$ docker container ls
CONTAINER ID   IMAGE           COMMAND           CREATED      STATUS     NAME
396c8b142a85   ubuntu:latest   "sleep infinity"  2 hours ago  Up 2 hrs   test.1.mfd...
$ docker container inspect \
  --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' 396c8b142a85
10.0.0.3 
```
 `在两个节点上运行这些命令，以确认两个容器的 IP 地址。
图 12.3 显示了到目前为止的配置。在您的实验室中，子网和 IP 地址可能不同。
![Figure 12.3](img/Figure12-3.png)
Figure 12.3
如您所见，有一个跨越两台主机的第 2 层覆盖网络，每个容器在这个覆盖网络上都有一个 IP 地址。这意味着**节点 1** 上的容器将能够使用其`10.0.0.4`地址 ping 通**节点 2** 上的容器。尽管两个*节点*位于不同的第 2 层底层网络上，但这种方法仍然有效。
我们来证明一下。
登录到**节点 1** 上的容器，ping 远程容器。
要在 Linux Ubuntu 容器上做到这一点，您需要安装`ping`实用程序。如果您正在遵循 Windows PowerShell 示例，则`ping`实用程序已经安装。
请记住，容器标识在您的环境中会有所不同。
Linux 示例:
```
$ docker container exec -it 396c8b142a85 bash
root@396c8b142a85:/# apt-get update && apt-get install iputils-ping -y
Reading package lists... Done
Building dependency tree
Reading state information... Done
Setting up iputils-ping (3:20190709-3) ...
Processing triggers for libc-bin (2.31-0ubuntu9) ...
root@396c8b142a85:/# ping 10.0.0.4
PING 10.0.0.4 (10.0.0.4) 56(84) bytes of data.
64 bytes from 10.0.0.4: icmp_seq=1 ttl=64 time=1.06 ms
64 bytes from 10.0.0.4: icmp_seq=2 ttl=64 time=1.07 ms
64 bytes from 10.0.0.4: icmp_seq=3 ttl=64 time=1.03 ms
64 bytes from 10.0.0.4: icmp_seq=4 ttl=64 time=1.26 ms
^C
root@396c8b142a85:/# 
```
 `Windows 示例:
```
> docker container exec -it 1a4f29e5a4b6 pwsh.exe
Windows PowerShell
PS C:\> ping 10.0.0.4
Pinging 10.0.0.4 with 32 bytes of data:
Reply from 10.0.0.4: bytes=32 time=1ms TTL=128
Reply from 10.0.0.4: bytes=32 time 
```
 `恭喜你。**节点 1** 上的容器可以通过覆盖网络 ping 通**节点 2** 上的容器。如果您创建了带有`-o encrypted`标志的网络，交换将被加密。
您还可以从容器中跟踪 ping 命令的路由。这将报告单跳，证明容器直接通过覆盖网络进行通信——幸运的是没有任何被穿越的底层网络。
> **注意:**您需要安装`traceroute`才能让 Linux 示例工作。
Linux 示例:
```
$ root@396c8b142a85:/# traceroute 10.0.0.4
traceroute to 10.0.0.4 (10.0.0.4), 30 hops max, 60 byte packets
 1  test-svc.2.97v...a5.uber-net (10.0.0.4)  1.110ms  1.034ms  1.073ms 
```
 `Windows 示例:
```
PS C:\> tracert 10.0.0.3
Tracing route to test.2.ttcpiv3p...7o4.uber-net [10.0.0.4]
over a maximum of 30 hops:
  1   **警告！**这一部分变得相当技术性，您没有必要了解日常操作的所有这些细节。
对于这个例子，我们将把节点 1 上的容器称为“C1”**，节点 2 上的容器称为“T2”【C2】。让我们假设 **C1** 想要 ping **C2** ，就像我们在本章前面的实例中所做的那样。**
 **![Figure 12.8](img/figure12-8.png)
Figure 12.8
**C1** 创建 ping 请求，并将目的 IP 地址设置为 **C2** 的`10.0.0.4`地址。它通过连接到 **Br0** 虚拟交换机的`veth`接口发送流量。虚拟交换机不知道将数据包发送到哪里，因为它的媒体访问控制地址表(ARP 表)中没有对应于目的 IP 地址的条目。因此，它会将数据包泛洪到所有端口。VTEP 接口连接到 **Br0** 知道如何转发帧，因此用自己的媒体访问控制地址进行响应。这是*代理 ARP* 的回复，导致 **Br0** 开关*学习*如何转发数据包。因此， **Br0** 更新其 ARP 表，将 10.0.0.4 映射到本地 VTEP 的 MAC 地址。
现在 **Br0** 交换机已经*学习了*如何将流量转发到 **C2** ，所有未来发往 **C2** 的数据包将直接传输到本地 VTEP 接口。VTEP 接口知道 **C2** ，因为所有新启动的容器都使用网络内置的八卦协议将它们的网络详细信息传播到群中的其他节点。
数据包被发送到 VTEP 接口，该接口封装帧，以便通过底层传输基础设施发送。在相当高的层次上，这种封装包括向单个以太网帧添加一个 VXLAN 报头。VXLAN 报头包含 VXLAN 网络标识(VNID)，用于将帧从 VLAN 映射到 VXLAN，反之亦然。每个 VLAN 都映射到一个虚拟网络标识，这样数据包就可以在接收端解封装并转发到正确的 VLAN。这保持了网络隔离。
封装还将帧封装在一个 UDP 数据包中，在*目的 IP 字段*中包含节点 2 上远程 VTEP 的 IP 地址，以及 UDP 端口 4789 套接字信息。这种封装允许数据通过底层网络发送，而底层网络不必知道任何关于 VXLAN 的信息。
当数据包到达节点 2 时，内核会发现它是发往 UDP 端口 4789 的。内核也知道它有一个绑定到这个套接字的 VTEP 接口。因此，它将数据包发送到 VTEP，后者读取虚拟网络标识，对数据包进行解封装，并将其发送到 VLAN 上与虚拟网络标识对应的本地 **Br0** 交换机。从那里，它被运送到容器 C2。
女士们，先生们，这就是本地 Docker 覆盖网络如何利用 VXLAN 技术的。
希望这足以让您开始任何潜在的生产 Docker 部署。它还应该为您提供与您的网络团队讨论 Docker 基础架构的网络方面所需的知识。关于与你的网络团队交谈的话题……我建议你不要认为你现在对 VXLAN 了如指掌。如果你这样做，你可能会让自己难堪；-)
最后一件事。Docker 还支持同一覆盖网络中的第 3 层路由。例如，您可以创建一个包含两个子网的覆盖网络，Docker 将负责它们之间的路由。创建这样一个网络的命令可能是`docker network create --subnet=10.1.1.0/24 --subnet=11.1.1.0/24 -d overlay prod-net`。这将导致在*沙箱*内创建两个虚拟交换机 **Br0** 和 **Br1** ，并且默认情况下会发生路由。
### 覆盖网络-命令
*   `docker network create`是我们用来创建新容器网络的命令。`-d`标志让你指定要使用的驱动，最常见的驱动是`overlay`驱动。您也可以从第三方指定*远程*驾驶员。对于覆盖网络，默认情况下控制平面是加密的。只需添加`-o encrypted`标志来加密数据平面(可能会产生性能开销)。
*   `docker network ls`列出 Docker 主机可见的所有容器网络。运行在*集群模式*下的 Docker 主机只有在托管连接到特定网络的容器时才会看到覆盖网络。这使得与网络相关的流言蜚语降至最低。
*   `docker network inspect`显示特定容器网络的详细信息。这包括*范围*、*驱动程序*、 *IPv4* 和 *IPv4* 信息、*子网配置*、*已连接容器的 IP 地址*、 *VXLAN 网络 ID* 、*加密状态*。
*   `docker network rm`删除网络
### 章节总结
在本章中，我们看到了使用`docker network create`命令创建新的 Docker 覆盖网络是多么容易。然后，我们学习了如何使用 VXLAN 技术在幕后将它们组合在一起。
我们只触及了 Docker 覆盖网络的表面。**```````````````