title:CacheAudit: A Tool for the Static Analysis of Cache Side Channels
author:Goran Doychev and
Dominik Feld and
Boris K&quot;opf and
Laurent Mauborgne and
Jan Reineke
CacheAudit: A Tool for the Static Analysis  
of Cache Side Channels
Goran Doychev, IMDEA Software Institute; Dominik Feld, Saarland University;  
Boris Köpf and Laurent Mauborgne, IMDEA Software Institute;  
Jan Reineke, Saarland University
Open access to the Proceedings of the 22nd USENIX Security Symposium is sponsored by USENIXThis paper is included in the Proceedings of the 22nd USENIX Security Symposium.August 14–16, 2013 • Washington, D.C., USAISBN 978-1-931971-03-4CacheAudit: A Tool for the Static Analysis of Cache Side Channels
Goran Doychev1, Dominik Feld2, Boris K¨opf1, Laurent Mauborgne1, and Jan Reineke2
1IMDEA Software Institute
2Saarland University
Abstract
We present CacheAudit, a versatile framework for the
automatic, static analysis of cache side channels. Cache-
Audit takes as input a program binary and a cache con-
ﬁguration, and it derives formal, quantitative security
guarantees for a comprehensive set of side-channel ad-
versaries, namely those based on observing cache states,
traces of hits and misses, and execution times.
Our technical contributions include novel abstractions
to efﬁciently compute precise overapproximations of the
possible side-channel observations for each of these ad-
versaries. These approximations then yield upper bounds
on the information that is revealed. In case studies we ap-
ply CacheAudit to binary executables of algorithms for
symmetric encryption and sorting, obtaining the ﬁrst for-
mal proofs of security for implementations with counter-
measures such as preloading and data-independent mem-
ory access patterns.
1
Introduction
Side-channel attacks recover secret inputs to programs
from non-functional characteristics of computations,
such as time [31], power [32], or memory consump-
tion [27]. Typical goals of side-channel attacks are the
recovery of cryptographic keys and private information
about users.
Processor caches are a particularly rich source of side-
channels because their behavior can be monitored in var-
ious ways, which is demonstrated by three documented
classes of side-channel attacks:
(1) In time-based at-
tacks [31, 10] the adversary monitors the overall execu-
tion time of a victim, which is correlated with the number
of cache hits and misses during execution. Time-based
attacks are especially daunting because they can be car-
ried out remotely over the network [6]. (2) In access-
based attacks [40, 39, 23] the adversary probes the cache
state by timing its own accesses to memory. Access-
based attacks require that attacker and victim share the
same hardware platform, which is common in the cloud
and has already been exploited [41, 49]. (3) In trace-
based attacks [5] the adversary monitors the sequence
of cache hits and misses. This can be achieved, e.g., by
monitoring the CPU’s power consumption and is partic-
ularly relevant for embedded systems.
A number of proposals have been made for countering
cache-based side-channel attacks. Some proposals fo-
cus entirely on modiﬁcations of the hardware platform;
they either solve the problem for speciﬁc algorithms such
as AES [2] or require modiﬁcations to the platform [46]
that are so signiﬁcant that their rapid adoption seems un-
likely. The bulk of proposals rely on controlling the in-
teractions between the software and the hardware layers,
either through the operating system [23, 48], the client
application [10, 39, 15], or both [29]. Reasoning about
these interactions can be tricky and error-prone because
it relies on the speciﬁcs of the binary code and the mi-
croarchitecture.
In this paper we present CacheAudit, a tool for the
automatic, static exploration of the interactions of a pro-
gram with the cache. CacheAudit takes as input a pro-
gram binary and a cache conﬁguration and delivers for-
mal security guarantees that cover all possible executions
of the corresponding system. The security guarantees
are quantitative upper bounds on the amount of infor-
mation that is contained in the side-channel observations
of timing-, access-, and trace-based adversaries, respec-
tively. CacheAudit can be used to formally analyze the
effect on the leakage of software countermeasures and
cache conﬁgurations, such as preloading of tables or in-
creasing the cache’s line size. The design of Cache-
Audit is modular and facilitates extension with any cache
model for which efﬁcient abstractions are in place. The
current implementation of CacheAudit supports caches
with LRU, FIFO, and PLRU replacement strategies.
We demonstrate the scope of CacheAudit in case stud-
ies where we analyze the side-channel leakage of repre-
sentative algorithms for symmetric encryption and sort-
USENIX Association  
22nd USENIX Security Symposium  431
ing. We highlight the following two results: (1) For the
reference implementation of the Salsa20 [11] stream ci-
pher (which was designed to be resilient to cache side-
channel attacks) CacheAudit can formally prove non-
leakage on the basis of the binary executable, for all
adversary models and replacement strategies.
(2) For
a library implementation of AES 128 [3], CacheAudit
conﬁrms that the preloading of tables signiﬁcantly im-
proves the security of the executable: for most adversary
models and replacement strategies, we can in fact prove
non-leakage of the executable, whenever the tables ﬁt
entirely in the cache. However, for access-based adver-
saries and LRU caches, CacheAudit reports small, non-
zero bounds. And indeed, with LRU (in contrast to, e.g.,
FIFO), the ordering of blocks within a cache set reveals
information about the victim’s ﬁnal memory accesses.
On a technical level, we build on the fact that the
amount of leaked information corresponds to the num-
ber of possible side-channel observations, which can be
over-approximated by abstract interpretation1 and count-
ing techniques [35, 34]. To realize CacheAudit based on
this insight, we propose three novel abstract domains (i.e.
data structures that approximate properties of the pro-
gram semantics) that keep track of the observations of
access-based, time-based, and trace-based adversaries,
respectively. In particular:
1. We propose an abstract domain that tracks rela-
tional information about the memory blocks that may be
cached. In contrast to existing abstract domains used in
worst-case execution time analysis [21], our novel do-
main can retain analysis precision in the presence of ar-
ray accesses to unknown positions.
2. We propose an abstract domain that tracks the
traces of cache hits and misses that may occur during
execution. We use a technique based on preﬁx trees and
hash consing to compactly represent such sets of traces,
and to count their number.
3. We propose an abstract domain that tracks the pos-
sible execution times of a program. This domain captures
timing variations due to control ﬂow and caches by asso-
ciating hits and misses with their respective latencies and
adding the execution time of the respective commands.
We formalize the connection of these domains in an ab-
stract interpretation framework that captures the relation-
ship between microarchitectural state and program code.
We use this framework to formally prove the correctness
of the derived upper bounds on the leakage to the corre-
sponding side-channel adversaries.
In summary, our main contributions are both theo-
retical and practical: On a theoretical level, we deﬁne
novel abstract domains that are suitable for the analy-
sis of cache side channels, for a comprehensive set of
1A theory of sound approximation of program semantics [16]
adversaries. On a practical level, we build CacheAudit,
the ﬁrst tool for the automatic, quantitative information-
ﬂow analysis of cache side-channels, and we show how
it can be used to derive formal security guarantees from
binary executables of sorting algorithms and state-of-the-
art cryptosystems.
Outline The remainder of the paper is structured as fol-
lows. In Section 2, we illustrate the power of CacheAudit
on a simple example program. In Section 3 we deﬁne the
semantics and side channels of programs. We describe
the analysis framework, the design of CacheAudit, and
the novel abstract domains in Sections 4, 5 and 6, re-
spectively. We present experimental results in Section 7,
before we discuss prior work and conclude in Sections 8
and 9. The source code and documentation of Cache-
Audit are available at
http://software.imdea.org/cacheaudit
2
Illustrative Example
In this section, we illustrate on a simple example pro-
gram the kind of guarantees CacheAudit can derive.
Namely, we consider an implementation of BubbleSort
that receives its input in an array a of length n. We as-
sume that the contents of a are secret and we aim to de-
duce how much information a cache side-channel adver-
sary can learn about the relative ordering of the elements
of a.
1
2
3
4
5
6
7
8
9
10
11
12
void BubbleSort(int a[], int n)
{
int i, j, temp;
for (i = 0; i  a[j+1])
{
temp = a[j+1];
a[j+1] = a[j];
a[j] = temp;
}
}
To begin with, observe that the conditional swap in
lines 6–11 is executed exactly n(n−1)
times. A trace-
based adversary that can observe, for each instruction,
whether it corresponds to a cache hit or a miss is likely to
be able to distinguish between the two alternative paths
in the conditional swap, hence we expect this adversary
to be able to distinguish between 2
execution traces.
A timing-based adversary who can observe the overall
execution time is likely to be able to distinguish between
n(n−1)
2 +1 possible execution times, corresponding to the
number of times the swap has been carried out. For an
n(n−1)
2
2
432  22nd USENIX Security Symposium 
USENIX Association
access-based adversary who can probe the ﬁnal cache
state upon termination, the situation is more subtle: eval-
uating the guard in line 6 requires accessing both a[j]
and a[j+1], which implies that both will be present in
the cache when the swap in lines 8–10 is carried out. As-
suming we begin with an empty cache, we expect that
there is only one possible ﬁnal cache state.
CacheAudit enables us to perform such analyses (for a
particular n) formally and automatically, based on actual
x86 binary executables and different cache types. Cache-
Audit achieves this by tracking compact representations
of supersets of possible cache states and traces of hits and
misses, and by counting the corresponding number of el-
ements. For the above example, CacheAudit was able to
precisely conﬁrm the intuitive bounds, for a selection of
several n in {2, . . . ,64}.
In terms of security, the number of possible observa-
tions corresponds to the factor by which the cache obser-
vation increases the probability of correctly guessing the
secret ordering of inputs. Hence, for n = 32 and a uni-
form distribution on this order (i.e. an initial probability
of 1
32! = 3.8· 10−36), the bounds derived by CacheAudit
imply that the probability of determining the correct in-
put order from the side-channel observation is 1 for a
trace-based adversary, 3.7 · 10−33 for a time-based ad-
versary, and remains 1
32! for an access-based adversary.
3 Caches, Programs, and Side Channels
3.1 A Primer on Caches
Caches are fast but small memories that store a subset of
the main memory’s contents to bridge the latency gap be-
tween the CPU and main memory. To proﬁt from spatial
locality and to reduce management overhead, main mem-
ory is logically partitioned into a set of memory blocks B.
Each block is cached as a whole in a cache line of the
same size.
When accessing a memory block, the cache logic has
to determine whether the block is stored in the cache
(“cache hit”) or not (“cache miss”). To enable an efﬁ-
cient look-up, each block can only be stored in a small
number of cache lines. For this purpose, caches are parti-
tioned into equally-sized cache sets. The size of a cache
set is called the associativity k of the cache. There is
a function set that determines the cache set a memory
block maps to.
Since the cache is much smaller than main mem-
ory, a replacement policy must decide which mem-
ory block to replace upon a cache miss. Usually, re-
placement policies treat sets independently, so that ac-
cesses to one set do not inﬂuence replacement deci-
sions in other sets. Well-known replacement policies
in this class are least-recently used (LRU), used in vari-
ous Freescale processors such as the MPC603E and the
TriCore17xx; pseudo-LRU (PLRU), a cost-efﬁcient vari-
ant of LRU, used in the Freescale MPC750 family and
multiple Intel microarchitectures; and ﬁrst-in ﬁrst-out
(FIFO), also known as ROUND ROBIN, used in several
ARM and Freescale processors such as the ARM922 and
the Freescale MPC7450 family. A more comprehensive
overview can be found in [22].
3.2 Programs and Computations
A program P = (Σ,I,F,E,T ) consists of the following
components:
• Σ - a set of states
• I ⊆ Σ - a set of initial states
• F ⊆ Σ - a set of ﬁnal states
• E - a set of events
• T ⊆ Σ×E ×Σ - atransition relation
A computation of P is an alternating sequence of states
and events σ0e0σ1e1 . . .σ n such that σ0 ∈ I and that
for all i ∈ {0, . . . ,n − 1}, (σi,ei,σi+1) ∈ T . The set of
all computations of P is its trace collecting semantics
Col(P) ⊆ Traces, where Traces denotes the set of all al-
ternating sequences of states and events. When consider-
ing terminating programs, the trace collecting semantics
can be formally deﬁned as the least ﬁxpoint of the next
operator containing I:
Col(P) = I ∪ next(I)∪ next2(I)∪ . . . ,
where next describes the effect of one computation step:
next(S) = {t.σnenσn+1 | t.σn ∈ S∧ (σn,en,σn+1) ∈ T }
In the rest of the paper, we assume that P is ﬁxed and
abbreviate its trace collecting semantics by Col.
3.3 Cache Updates and Cache Effects
For reasoning about cache side channels, we consider
a semantics in which the cache is part of the program
state. Namely, the state will consist of logical memories
in M (representing the values of main memory locations
and CPU registers, including the program counter) and a
cache state in C, i.e., Σ = M×C.
: M→
M that is determined solely by the instruction set seman-
tics. The memory update has effects on the cache that
: M→EM. The mem-
are described by a function eff
ory effect is an argument to the cache update function
upd
The memory update upd
is a function upd
M
M
M
: C ×EM → C.
C
In the setting of this paper, eff
determines which
M
block of main memory is accessed, which is required
, i.e., EM = B ∪{⊥},
to compute the cache update upd
where ⊥ denotes that no memory block is accessed.
C
USENIX Association  
22nd USENIX Security Symposium  433
C
We formally describe upd
only for the LRU strategy.
For formalizations of other strategies, see [22]. Upon a
cache miss, LRU replaces the least-recently-used mem-
ory block. To this end, it tracks the ages of memory
blocks within each cache set, where the youngest block
has age 0 and the oldest cached block has age k − 1.
Thus, the state of the cache can be modeled as a func-
tion that assigns an age to each memory block, where
non-cached blocks are assigned age k:
C := {c ∈ B →A | ∀a,b ∈ B : a (cid:23)= b ⇒
((set(a) =set (b)) ⇒ (c(a) (cid:23)= c(b)∨ c(a) =c(b) =k ))},
where A := {0, ...,k − 1,k} is the set of ages. The con-
straint encodes that no two blocks in the same cache set
can have the same age. For readability we omit the ad-
ditional constraint that blocks of non-zero age are pre-
ceded by other blocks, i.e. that cache sets do not contain
“holes”.
The cache update for LRU is then given by
upd
C(c,b) := λ b(cid:19) ∈ B.
: b(cid:19) = b
: set(b(cid:19)) (cid:23)= set(b)
0
c(b(cid:19))
c(b(cid:19)) +1 : set(b(cid:19)) =set (b)∧ c(b(cid:19)) < c(b)
: set(b(cid:19)) =set (b)∧ c(b(cid:19)) ≥ c(b)