title:Virtual Secure Platform: A Five-Stage Pipeline Processor over TFHE
author:Kotaro Matsuoka and
Ryotaro Banno and
Naoki Matsumoto and
Takashi Sato and
Song Bian
Virtual Secure Platform: 
A Five-Stage Pipeline Processor over TFHE
Kotaro Matsuoka, Ryotaro Banno, Naoki Matsumoto, 
Takashi Sato, and Song Bian, Kyoto University
https://www.usenix.org/conference/usenixsecurity21/presentation/matsuoka
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.Virtual Secure Platform: A Five-Stage Pipeline Processor over TFHE
Kotaro Matsuoka∗, Ryotaro Banno†, Naoki Matsumoto†, Takashi Sato‡, Song Bian‡
∗Undergraduate School of Electrical and Electronic Engineering, Kyoto University,
†Undergraduate School of Informatics and Mathematical Science, Kyoto University,
‡Department of Communications and Computer Engineering, Kyoto University
∗PI:EMAIL, †{ryotaro.banno, m.naoki9911}@gmail.com,
‡{takashi, sbian}@easter.kyoto-u.ac.jp
Abstract
We present Virtual Secure Platform (VSP), the ﬁrst com-
prehensive platform that implements a multi-opcode general-
purpose sequential processor over Fully Homomorphic En-
cryption (FHE) for Secure Multi-Party Computation (SMPC).
VSP protects both the data and functions on which the data
are evaluated from the adversary in a secure computation of-
ﬂoading situation like cloud computing. We proposed a com-
plete processor architecture with a ﬁve-stage pipeline, which
improves the performance of the VSP by providing more par-
allelism in circuit evaluation. In addition, we also designed a
custom Instruction Set Architecture (ISA) to reduce the gate
count of our processor, along with an entire set of toolchains
to ensure that arbitrary C programs can be compiled into our
custom ISA. In order to speed up instruction evaluation over
VSP, CMUX Memory based ROM and RAM constructions
over FHE are also proposed. Our experiments show that both
the pipelined architecture and the CMUX Memory technique
are effective in improving the performance of the proposed
processor. We provide an open-source implementation of VSP
which achieves a per-instruction latency of less than 1 second.
We demonstrate that compared to the best existing processor
over FHE, our implementation runs nearly 1,600× faster.
1 Introduction
In a typical cloud computing scheme, clients want to ofﬂoad
their computations, that are, the evaluations of some programs
over their private data, to some cloud server. The problem
we try to tackle in this paper is to protect the programs and
data of the clients against the server per se, or some third-
party intruder who has physical access to the server. Since
current mainstream physical processors, like Intel Xeon, can-
not directly run encrypted instructions (i.e., the program to be
ofﬂoaded), encrypted functions and data must be decrypted at
run-time. Therefore, current cloud computing schemes suffer
from side channel attacks [1, 2]. In addition, processor ven-
dors may also plant backdoors. As a result, the cloud service
vendors and those who can physically access the servers are,
in theory, able to steal the program along with the input data
from the clients.
The key idea to solve the problem mentioned above is to di-
rectly run encrypted instructions [3]. In other words, the client
of the cloud service sends the encrypted instructions which
represent the function to be evaluated and the encrypted in-
puts to the cloud sever. Meanwhile, the cloud server evaluates
the function using the inputs, without decryption. After the
evaluation, the cloud server sends back the encrypted results
to the client. During the entire evaluation process, the cloud
server does not have access to any plaintext, so the evaluated
function and the data are protected. The above scheme can be
established by representing the processor as Boolean circuits,
and the evaluation of the circuits are conducted through the
use of Secure Multi-Party Computation (SMPC) protocols.
Because Boolean circuits can be represented by a graph con-
taining different types of logic gates as graph nodes (e.g.,
in Figure 1b), if we can perform the logical operations over
encrypted input bits, we can emulate the operation of a pro-
cessor by evaluating the processor circuit with the associated
encrypted inputs.
Currently, we have two well-known SMPC candidates for
evaluating Boolean circuits directly over encrypted inputs,
namely Garbled Circuit (GC) [4] and Fully Homomorphic
Encryption (FHE) [5]. GC implements SMPC operations by
providing a set of encrypted truth tables for the outputs of the
corresponding logic gates. During GC evaluation, the truth ta-
bles are evaluated obliviously to carry out the encrypted func-
tion evaluation. On the other hand, FHE is intrinsically more
of a Secure Computation Ofﬂoading (SCO) scheme, where
inputs to some public function are encrypted. The evaluator
directly evaluates the public function over the ciphertexts, and
returns the results to the encryption party. There are two previ-
ous works which propose to run encrypted instructions using
GC: TinyGarble [6] and GarbledCPU [7]. These works imple-
ment a processor with the MIPS Instruction Set Architecture
(ISA). Since most modern compilers support MIPS, both
TinyGarble and GarbledCPU support the evaluation of most
USENIX Association
30th USENIX Security Symposium    4007
conventional programs, e.g., programs written in the C lan-
guage. However, in theory, we cannot achieve SCO with GC,
as the generation of the GC truth tables always take more com-
putational resources than locally evaluating the program. In
contrast, as mentioned, FHE is inherently an SCO scheme [5].
Unlike GC, there is no need for tables generation for the eval-
uation of logic gates in FHE. To the best of our knowledge,
FURISC [8] is the only previous work which implements a
processor over the Smart-Vercauteren FHE Cryptosystem [9].
The processor only accepts one Turing-complete instruction,
Subtract Branch if Negative (SBN). This means that it is nec-
essary to modify modern compilers like Clang or GCC to
work with FURISC, which is a highly non-trivial task. In fact,
FURISC does not have any compiler support.
We propose Virtual Secure Platform (VSP), a comprehen-
sive platform that provides a full set of tools for a complete
two-party SCO scheme. Our standalone platform includes
open-sourced designs and implementations of HE libraries,
processor architectures, custom ISA and compiler environ-
ments. Building upon the well-known Torus Fully Homo-
morphic Encryption (TFHE) scheme, VSP allows any user
with an arbitrary C program to execute their codes in an SCO
manner. To the best of our knowledge, VSP is the fastest and
most complete (in terms of the set of tool sets we provide)
open-source processor platform to date.
Contributions: In brief, our contributions are as follows:
• We present VSP, the ﬁrst comprehensive platform that
implements a multi-opcode general-purpose sequential
processor over TFHE, which enables two-party SCO. We
also provide an open-source Proof of Concept (PoC) im-
plementation of VSP, including our pipelined processor.
• We implemented the entire toolchain including a C com-
piler based on LLVM in order to fully support C lan-
guage in VSP. The toolchain is based on our custom ISA
named CAHPv3.
• We propose CMUX Memory, an optimized memory
structure over TFHE. We fully leverage the Leveled
Homomorphic Encryption (LHE) mode of the TFHE
to ensure fast memory access, which is one of the main
performance bottlenecks of VSP.
• Our open-source PoC implementation can evaluate one
clock cycle of the processor in less than 1 second. This
translates to nearly 1,600× per-instruction latency re-
duction compared to FURISC, the state-of-the-art FHE-
based SCO scheme.
2 Preliminaries
on the security properties of the SMPC protocols focused
in this work in Section 2.2. Finally, we brieﬂy summarize
the general terminologies involved in processor designs in
Section 2.3.
2.1 Homomorphic Encryption
2.1.1 Overview of Homomorphic Encryption
Homomorphic Encryption (HE) is a form of encryption
which permits encrypted data to be evaluated without decryp-
tion [10]. HE can be classiﬁed into several categories depend-
ing on the types of functions that are permitted to be evaluated.
A Fully Homomorphic Encryption (FHE) scheme allows one
to evaluate arbitrary functions. Some popular FHE candidates
include Torus Fully Homomorphic Encryption (TFHE) [11],
Smart-Vercauteren Cryptosystem [9] and Brakerski-Gentry-
Vaikuntanathan (BGV) [12]. All of the above mentioned can-
didates can evaluate arbitrary Boolean circuit over encrypted
ciphertexts. Beside FHE, another category of HE is called
Leveled Homomorphic Encryption (LHE). LHE has limita-
tions on the depth of function that can be expressed, but are
much faster than FHE in general. Depth here means the num-
ber of consecutive multiplications to be performed on the
same ciphertext. Lastly, we note that some FHE schemes like
TFHE and BGV have LHE modes.
In VSP, we cannot know a priori how many times we have
to evaluate the circuit of the processor. This is because a gen-
eral solution to the problem of determining how many clock
cycles a program will take written in a Turing-complete lan-
guage solves the famous Halting Problem, which is known
to be undecidable. Therefore, FHE is most suitable for con-
structing processor-like architectures as in VSP.
Bootstrapping: Bootstrapping is one of the most important
idea in the construction of FHE. It is proposed in the sem-
inal work of Gentry [5]. The bootstrapping can be thought
as evaluating a decryption function over HE. Bootstrapping
is needed for FHE schemes, as we can remove the noises
from the ciphertexts generated during the evaluations. Boot-
strapping needs additional keys for evaluation, including an
encrypted secret key.
Key switching: Key switching is a function that maps a
ciphertext Encs1(m) to Encs2(m) without decryption, where
Encsi(m) means encrypted m with a secret key si. As with
bootstrapping, this function also requires an encrypted secret
key, but its format is different from that required for bootstrap-
ping, because key switching needs Encs2(s1).
In this paper, we call the set of the keys which are required
to evaluate both the bootstrapping and the key switching as
Bootstrapping Key.
In this section, we deﬁne and explain some basic concepts
used throughout this work. We ﬁrst review the properties and
constructions of HE in Section 2.1. Then, we give an overview
2.1.2 TFHE
TFHE [11, 13] is one kind of FHE. TFHE natively supports
one-operand logic operations like NOT, two-operand logical
4008    30th USENIX Security Symposium
USENIX Association
operations like NAND, NOR, XNOR, AND, OR and XOR,
and the three-operand MUX. There are two reasons for choos-
ing TFHE as a foundation of VSP. First, bootstrapping of
TFHE only takes 10 milliseconds order. This is the fastest
one to our best knowledge. In contrast, bootstrapping of BGV
takes order of minutes with HElib [14]. Second, TFHE sup-
ports LHE mode which we ﬁnd to be efﬁcient in constructing
memory units, and a detailed construction of memory units
over the LHE mode of TFHE is explained in Section 8.
In what follows, we describe TFHE brieﬂy. We will strip
away unnecessary generality in order to keep the explanations
straightforward.
Notations: In this work, we adopt a similar notation style
as in [11], which is listed below.
B: The set {1,0} without any structure.
T: The real Torus R/Z, the set of real number modulo 1. In
this work, we deﬁne the interval of T to be [−0.5,0.5).
TN[X], ZN[X]: The rings of polynomials R[X]/(X N +
1) mod 1 and Z[X]/(X N + 1).
BN[X]: The polynomials in ZN[X] with binary coefﬁcients.
1[X]: The polynomial in ZN[X] whose coefﬁcients are all 1.
sgn(a[X]): The polynomial whose i
is
th coefﬁcient
sgn(i th coefﬁcient of a[X]).
E p: The set of vectors of dimension p with entries in E.
Mp,q(E): The set of p× q-size matrices with elements in E.
U(E): The uniform distribution over E.
←: x ← D means x itself or its entries or coefﬁcients are
drawn from the distribution D.
n,N,l,α,µ: n,N,l ∈ N, α ∈ R and µ = 1/8.
a,a[X],b[X]: a ∈ Tn and a[X],b[X] ∈ TN[X].
Modular Gaussian Distribution: Let k ≥ 1 and σ ∈ R+.
For all x ∈ Rk, we refer to the Gaussian function of center
0 and standard deviation σ as ρRk,σ(x) = exp(−(cid:107)x(cid:107)2/2σ2).
Meanwhile, DTk,σ(x) deﬁnes a (restricted) Gaussian Distri-
bution of center 0 and standard deviation σ over Tk, and is
derived by DTk,σ(x) = ∑l∈Z ρRk,σ(x + l · 1).
TLWE: TLWE is the Torus version of the learning with
errors (LWE) problem [15]. TLWE can be represented as
(a,b), an n + 1 dimensional Torus vector. s ∈ Bn is the secret
key and s ← B.
Encryption: Let e ← DT,σ(x) and a ← U(Tn). m ∈ B is the
plaintext message. Then, b = a· s + µ(2m− 1) + e.
Decryption: Return (1 + sgn(b− a· s))/2.
TRLWE: TRLWE is the Torus version of ring-LWE.
TRLWE can be represented as (a[X],b[X]), a two dimensional
Torus polynomial vector. s[X] ∈ TN[X] represents the secret
key and s[X] ← U(B).
Encryption: Let e[X] ∈ TN[X] ← DTN ,σ(x) and a[X] ←
U(TN). m[X] ∈ BN[X] is the plaintext message. Then, b[X] =
a[x]· s[X] + µ(2m[X]− 1[X]) + e[X]
Decryption: Return (1[X] + sgn(b[X]− a[X]· s[X]))/2.
TRGSW: This is a Torus and ring version of GSW, which
is represented as a vector of TRLWE ciphertexts, or equiva-
lently, a matrix of polynomials. TRGSW ciphertexts are in
M2,2l(TN[X]).
Encryption: Let l,Bg ∈ N,i ∈ [1,2l]. e[X] ∈ TN[X] ←
DTN ,σ(x) and a[X] ← U(TN). m ∈ B is the plaintext mes-
sage. Then, bi[X] = ai[x]· s[X] + ei[X] and the ciphertext C is
deﬁned as follows:
a1[X] + m
Bg
a2[X] + m
Bg2
...
...
b1[X]
b2[X]
...
bl[X]
...
C =
al[X] + m
Bgl
al+1[X]
bl+1[X] + m
Bg
a2l[X]
b2l[X] + m
Bgl
We omit the explanation on the decryption of TRGSW as it is
not needed in this paper.
Sample Extraction and Identity Key Switching: This
operation converts a TRLWE ciphertext into a TLWE cipher-
text. Identity Key Switching (IKS) denotes the special case of
Public Key Switching where the public function is the iden-
tity function [11]. The noise variance of the output TLWE
ciphertext becomes larger than the input TRLWE ciphertext
because IKS adds noises. The construction of Bootstrapping
in TFHE uses this as a fundamental block.
Bootstrapping in TFHE: In TFHE, Bootstrapping can be
deﬁned for TRLWE and TLWE. This can be conﬁgured by
Sample Extraction (SE) and IKS at the beginning or end of
the Bootstrapping procedure. The type of output ciphertext is
the same as that of the input but the noise is refreshed to the
level of a freshly encrypted ciphertext.
CMUX: CMUX is short for Controlled MUltipleXer. This
is one of the LHE-mode operations of TFHE and is equivalent
to a homomorphic multiplexer. CMUX takes two TRLWE
ciphertexts as inputs and a TRGSW ciphertext as its selector
input. CMUX outputs a TRLWE cipehrtext. The noise vari-
ance of the output TRLWE ciphertext is bigger than that of
the inputs because additional noise is induced by the CMUX
operation.
Homomorphic Gates: These are FHE-mode operations
of TFHE and they represent logic gates. Their inputs and
outputs are TLWE ciphertexts. All Homomorphic Gates ex-