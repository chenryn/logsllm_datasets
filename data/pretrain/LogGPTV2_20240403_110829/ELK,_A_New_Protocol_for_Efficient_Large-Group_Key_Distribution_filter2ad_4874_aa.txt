title:ELK, A New Protocol for Efficient Large-Group Key Distribution
author:Adrian Perrig and
Dawn Xiaodong Song and
J. D. Tygar
ELK, a New Protocol for Efficient Large-Group Key Distribution* 
Adrian Perrig  Dawn Song 
J. D. Tygar 
University of California Berkeley 
{ perrig,dawnsong,tygar} @cs.berkeley.edu 
Abstract 
ELK allows to trade  off  security  with  communication 
overhead. 
Secure  media  broadcast  over the Internet poses unique 
security  challenges.  One problem access control to a large 
number of  subscribers  in a public  broadcast.  A  common 
solution  is  to encrypt the broadcast  data  and  to disclose 
the decryption key  to legitimate  receivers  only.  However; 
how do we securely and eficiently establish a shared secret 
among the legitimate receivers? And most importantly, how 
can we eficiently update the group key securely if receivers 
join or leave? How can we provide reliability for key update 
messages in a way that scales up to large groups? 
Recent  research  makes substantial  progress  to address 
these challenges.  Current schemes feature eficient key up- 
date mechanisms assuming  that the key  updates are  com- 
municated reliably  to the receivers.  In practice, however; 
the principal  impediment  to achieve  a  scalable  system  is 
to distribute  the key  updates  reliably  to all receivers.  We 
have designed and implemented ELK, a novel key distribu- 
tion protocol, to address these challenges with the following 
features: 
ELK features pe fleetly  reliable, super-eficient member 
joins. 
ELK uses smaller  key update messages than previous 
protocols. 
ELK features a mechanism that allows short hint mes- 
sages to be usedfor key recovery allowing a tradeoflof 
communication overhead with member computation. 
ELK proposes to append a small amount of key update 
information to data packets, such that the majority of 
receivers can recover from lost key update messages. 
*This publication  was sponsered in  part by the Defense  Advanced  Re- 
search  Projects  Agency  under  DARPA  contract  N6601-99-28913 (under 
supervision  of the Space and Naval  Warfare Systems Center San Diego), 
by  the National  Science foundation  under grant FDYY-79852, and by  the 
United States Postal Service under grant USPS  102592-01-2-0236. Views 
and conclusions contained in this document are those of the authors and do 
not  necessarily  represent the official opinion  or policies,  either expressed 
or implied  of  the  US  government  or any  of  its  agencies, DARPA, NSF, 
USPS. 
1  Introduction 
This paper introduces ELK, an efficient, scalable, secure 
method for distributing  group keys.  ELK  has widespread 
applications, such as access control in  streaming multime- 
dia broadcasts. 
A common solution  for controlling access to the broad- 
cast information  is to encrypt the data and to distribute the 
secret decryption key (group key) only to the legitimate re- 
ceivers.  The general approach is to use a central  server for 
key  management.  Key management is complicated by dy- 
namic  groups, where members may join and  leave  at any 
time.  Members  should  only  be  able  to  decrypt  the  data 
while they are members of the group, and so the key server 
needs  to update  the group key  on  member join  and  leave 
events. 
Changing the key for large groups in a scalable, robust, 
and efficient manner is particularly challenging [ 14, 34, 371. 
A  solution  must deal with  arbitrary  packet  loss, including 
lost key update messages.  In  general, previous approaches 
have built on reliable multicast (which has high communi- 
cation  overhead in  large-scale  use)  or queries to  a central 
server to request  retransmission of keys (which  introduces 
substantial load for a central server.) 
In  general,  a  system designer faces a  variety  of  trade- 
offs between scalability, security, efficiency, and reliability. 
Here is the scenario we consider: 
We  put  a  premium  on  scalability.  We  are  interested 
in  situations  where we  have  widespread video or au- 
dio streaming over a network  to a large number of re- 
ceivers. 
We  are interested  in  moderate security.  We  consider 
the  case  when  many  receivers  use  commodity hard- 
ware,  e.g.,  PCs  without  tamper-resistant  hardware. 
Note  that  the  absence  of  tamper-resistant  hardware 
limits the ultimate security  of keys (42, 431. 
1081-601 1/01 $10.00 0 2001 EEE 
247 
Since the key server broadcasts key update messages to 
all  the group members,  the communication  overhead 
can  be  prohibitively  high  for  large  dynamic groups. 
Due to the continuous increase in computation power, 
we  design  ELK  to  trade  off  computation  for  lower 
communication  overhead.  More  concretely,  we  de- 
sign a member join protocol that does not require any 
broadcast but requires that the server computes a one- 
way  function  on  all keys in  each  time interval.  ELK 
also introduces hints, a technique which makes key up- 
dates smaller but requires receiver computation. 
We must provide high reliability, but we do not assume 
that we can build a reliable multicast system. 
We  have  designed  and  implemented ELK, a  novel  key 
distribution protocol that addresses these issues. In particu- 
lar, ELK addresses reliability for key update messages, un- 
like prior work.  ELK also allows a content provider to di- 
rectly trade-off security and communications efficency. 
Here are some features of ELK: 
2.  Forward  Secrecy - (not  to  be  confused  with  Perfect 
Forward  Secrecy or  PFS in  key  establishment proto- 
cols)  guarantees  that  a passive adversary who knows 
a contiguous subset of old group keys cannot discover 
subsequent  group  keys.  This property  ensures that  a 
member cannot learn about the new group keys after it 
leaves the group. 
3 .  Backward Secrecy - guarantees that  a  passive adver- 
sary who knows a subset of group keys cannot discover 
preceding group keys. This property ensures that when 
a new member joins the group, he cannot learn about 
the previous group keys. 
These  properties  are  commonly  used  in  secure  group 
communication.  Steiner, Tsudik, and Waidner give a more 
formal definition [31]. 
3  Notation and Background 
ELK does not depend on reliable multicast. 
We use the following notation. 
ELK uses smaller key  update messages than previous 
protocols. 
ELK features perfectly  reliable, super-efficient  mem- 
ber joins. 
ELK  addresses  reliability  by  using  short  hint  mes- 
sages.  This improves reliability  and  allows  a  trade- 
off of communication overhead with member compu- 
tation. 
To study the application of ELK, we consider two differ- 
ent types of information goods: low-cost goods and "perish- 
able" information goods. We apply new ways to assess the 
desired  level  of  security.  For  low-cost  goods we consider 
the system to be secure as long as the cost of the attacker to 
break the key  is larger than the cost of the information. For 
perishable information goods we require that the minimum 
time to break the key  surpasses the lifetime of value of the 
data. 
2  Security Requirements for Group Key Dis- 
tribution 
We  consider  dynamic groups  where  users  can join  or 
leave the group at any time. The main security properties of 
a group key management system for dynamic groups are: 
1.  Group Key Secrecy - guarantees that it is computation- 
ally  infeasible for an adversary to discover any group 
key. 
To encrypt message M  with key K  we write { M } K .  
To  concatenate  the  messages  M I  and  M2  we  write 
MI  I M2. 
In  the  following  description,  we  use  many  different 
pseudo-random  functions  (PRFs)  with  varying  input 
and  output  lengths.  The notion  of a PRF family  was 
proposed by  Goldreich, Goldwasser, and Micali  [ 121. 
Instead of defining one PRF for each purpose, we de- 
fine a family of  PRFs that  use  key  K  on input M  of 
length m bits, and output n bits: 
-+  (0, l}n. We  write 
p ~ ~ ( m - + n )  
P R F ~ +  ( M ) .  
:  K  x  {O,l}m 
The function LSB(")(M) returns then least significant 
bits of M  (assuming that M  is longer than n bits). 
We use a number of key derivation functions to ensure 
that the keys and arguments in various places are inde- 
pendent.  The following keys are derived from Ki  as 
follows: 
K,P  = PRFg;+n)(l),  Kf  = PRFcG+n)(2), 
KT  = PRFgttn)(3),  and Kf  = PRF2,+'")(4) 
(Note that 1, 2,3 and 4 are arguments to the PRFs. This 
key derivation is solely to ensure independence of keys 
for security reasons. However, to simplify understand- 
ing of  the protocols we advise ignoring the Greek su- 
perscripts on a first reading of this paper.) 
248 
4  Review of Previous Key Distribution>., 
Schemes 
4.1  Setting 
In  broadcast  key  distribution, we  assume a  central  key 
distribution  server  that  can  authenticate and  authorize in- 
dividual receivers.  The model is  that the receiver  wishing 
to decrypt the broadcast  content contacts the key server by 
unicast and requests the decryption key. The key server au- 
thenticates  the receiver  with  a standard  authentication  pro- 
tocol and sets up a secure channel (offering confidentiality, 
integrity,  authenticity).  The  server  sends key  information 
to the client, which  consists of  a group key  to decrypt the 
content, as well  as a  set of  member-specific  keys  for key 
management purposes. 
The broadcast  information  is  encrypted with  the  group 
key  to  achieve  confidentiality  and  access control.  To  en- 
sure forward  and  backward  secrecy  after  receivers join  or 
leave  the  broadcast  (defined  in  section  2),  the  key  server 
broadcasts encrypted key  updates that  only  the  legitimate 
members can decrypt. 
To analyze the overhead of key distribution schemes, we 
consider the following resources. (Note that the total num- 
ber of receivers is N ) .  
Receiver  storage.  Each  receiver  stores  a  number  of 
member-specific  keys  and  one group  key.  Since the 
number of keys to store is usually small (O(log(N))), 
receiver storage is not an issue. 
Key  server  storage.  The  key  server  stores  all  the 
member-specific keys.  In current schemes the number 
of member-specific  keys is about 2 N .  For groups with 
millions of receivers, the key server storage can be on 
the order of multiple megabytes. Researchers have in- 
vestigated schemes that reduce the server storage over- 
head [7, 161. However, in this work we assume that the 
key server has sufficient storage, because a broadcaster 
that sends data to millions of paying subscribers should 
have ample key storage. 
Receiver and key server computation. Since the pro- 
cessing  speed of  workstations  continues to  increase, 
computation overhead is not as important. 
Bandwidth is the most constrained resource.  In partic- 
ular, key update information broadcast  to all receivers 
needs  to  be  as  small  as  possible.  Since  we  assume 
abundant storage and computation resources, our goal 
is to trade off computation or storage to lower commu- 
nication cost.  We put a premium on broadcasts,  how- 
ever we also try to limit unicasts. 
249 
4.2  Review ofalogicaj Key Hierarchy (LKH) 
To  ensure  forward :.and  backward  secrecy,  the  group 
key  needs to be updated and distributed whenever a mem- 
ber joins  or  leaves,thei group.  ELK  is  based  on  a  key 
tree,  and  extends  the. ,logical  key  hierarchy  (also  called 
LKH [ 14, 34, 36, 371) and one-way function tree (OFT [2]) 
approaches to achieve 'an efficient and secure key distribu- 
tion system.  We  include a brief  review  of LKH below.  In 
LKH, a key distributiom center (or key server) maintains a 
key tree which  will be..used for group key updates and dis- 
tribution. Figure  1  shows a sample key tree.  Each node in 
the tree represents a cfiyptographic symmetric key. The key 
distribution  center associates each group member with  one 
leaf node of the tree and the following invariant will always 
hold:  Each group member knows all the keys from its leaf 
node up to the root node, bot no other node in the key tree. 
We call the set of keys that a member knows the key path. 
Since all members know  the key at the root node, that key 
is used as the group key, that we denote with KG. For illus- 
tration, the key path of member M2 in figure  1 is the nodes 
associated  with  the  keys  {Ks, Ka, K l } .  When  a member 
joins the group, it receives all the keys on the path from its 
leaf node up to the root from the key distribution center, sent 
over a secure channel.'  When a member leaves. the group, 
all the keys that the member knows, including the group key 
and its key  path, need  to be updated.  The main  reason  for 
using  such a key tree is to efficiently  update the group key 
if a member joins or leaves the group. 
M2 
M3 
M4 
Figure 1. Sample hierarchical  key tree 