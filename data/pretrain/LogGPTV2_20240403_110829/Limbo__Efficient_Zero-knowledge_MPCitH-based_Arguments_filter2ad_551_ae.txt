implies that the soundness of the non-interactive protocol, with
identical RandomCoin challenges for all 𝜏 parallel executions is
given by
Pr(cid:104)𝑊 +∑︁ 𝑋 𝑗 + 𝑌 + 𝑍 = 𝜏
(cid:12)(cid:12)(cid:12)∑︁𝑟−1
𝑖=1 𝜏𝑖 ≤ 𝜏(cid:105) ,
= max
(𝜏1,...,𝜏𝑟−1)
𝜖ident
ni
where
𝑊 = max
𝑞1
𝑋 𝑗 = max
𝑞 𝑗,2
𝑌 = max
𝑞3
𝑍 = max
𝑞4
𝑊𝑞1 ∈ {0, 𝜏1} and Pr[𝑊𝑞1 = 𝜏1] = 𝑝𝑅;
{𝑊𝑞1 },
{𝑋𝑞 𝑗,2 }, 𝑋 𝑗,𝑞2 ∈ {0, 𝜏 𝑗+1} and Pr[𝑋 𝑗,𝑞2 = 𝜏 𝑗+1] = 𝑝int;
{𝑌𝑞3 },
𝑌𝑞3 ∈ {0, 𝜏𝑟−1} and Pr[𝑌𝑞3 = 𝜏𝑟−1] = 𝑝fin;
1
𝑍𝑞4 ∼ 𝔅
{𝑍𝑞4 },
𝑁
(cid:18)
𝜏 − 𝑊 −∑︁⌊log𝑘 𝑚⌋−1
𝑋 𝑗 − 𝑌 ,
𝑗=1
(cid:19)
.
7 PARAMETERS AND PERFORMANCE
We describe our implementation and then present the perfor-
mance of our system and compare them with other related works.
Finally, we compare our signature scheme with Picnic and Banquet.
7.1 Parameters
We first describe how we choose parameters for our tests. The
soundness of our scheme depends on many parameters, namely
the number of parties 𝑛, the compression factor 𝑘, the extension
field ℓ and the number of repetition 𝜏. We already observed that
we can trade off computation and communication using different
values for 𝑛, so that increasing the number of parties will increase
prover and verifier running times but it will decrease the proof size.
The compression factor determines the round complexity of the
protocol according to Theorem 5.2 and its soundness. In general,
large values of 𝑘 will allow better running times and larger proof
size. The extension field greatly impact on the proof size, but not
that much on the computation. We noticed that computation on
𝐹264 were slightly faster, and we prevalently chose this extension
field to run the checking step of our protocol.
Finally, in our experiments we only used fixed values of 𝑘, but
the implementation can be optimized allowing different values of 𝑘,
for example by considering divisors of 𝑚, where 𝑚 is the number
of multiplication gates. Since we chose 𝑘 independently of 𝑚, we
need to create random public triple values in order to perform the
compression step.
7.2 Implementation
We implemented our protocol in C++ with the dedicated field
arithmetic implementation of Banquet [3], which we extended for
computing in 𝐺𝐹(264). We also reduced as much as possible the
number of polynomial interpolations. In particular, to compute the
polynomials 𝑓 , 𝑔, ℎ during the first part of the compression rounds,
the interpolation is performed on the reconstructed values.
In addition to the above, to evaluate a binary circuit, the parties’
shares are packed in chunks of 64 in a machine word. Thus, instead
of evaluating the circuit for each party independently, a single gate
can be computed for 64 parties at once using bitwise operations.
7.3 Performance
All the benchmarks are from a desktop computer with an Intel
i9-9900 (3.1GHz) CPU and 128GB of RAM and run locally. For each
experiment, we used either a single thread or 4 threads, and we
give the average times over 100 runs. Although it may slightly vary
depending on the parameters used, we give some insights on the
computational complexity of each of the steps described in Figure 5.
Thanks to the packing technique in the binary case, the evaluation
of the circuit in MPC, which corresponds to creating the first oracle,
is fast and requires less than 10% of the running time. Then, the
most computationally heavy task is to lift the shares of each party
and to transform them to shares of an inner product, this requires
60% of the total running time. Eventually, about 40% of the prover
time is spent for the compression rounds.
All experiments in the interactive setting use the same challenge
across all 𝜏 repetitions, and the non-interactive case uses indepen-
dent challenges. This is because in the non-interactive case we
need very large extension fields to achieve the desired soundness,
as shown in Section 6.2. In our experiments we use 𝜅 = 128 for
computational security and 𝜆 = 40 for statistical security.
SHA-256. Proving a SHA-256 pre-image in zero knowledge with
2−40 soundness error requires about 42KB, with a prover time of
53ms and a verifier time of 47ms (Table 1) on a single thread, using
the Bristol Fashion circuit.2 This circuit consists of 22573 AND gates
and 135073 gates in total. As a comparison, for the same soundness
error, Ligero’s proof size is about 44KB, with verifier and prover
times of respectively 140ms and 62ms. Performance of NILimbo for
verifying SHA-256 is given in the full version.
Binary circuits. We tested Limbo (Table 3) and NILimbo (Table 4)
on random binary circuits of different sizes. In Table 5, we report the
performance on 4 threads with 𝑛 = 16 and 𝑛 = 8 and different circuit
size. Our protocol can evaluate 220 AND gates in about 8.7 (resp. 4.7
sec) in the non-interactive setting with a proof size of 6.5MB with
8 parties with one thread (resp. 4 threads), and 3 sec (resp. 0.987
sec) in the interactive setting with 6 rounds of communication and
total communication of 1.2MB with one thread (resp. 4 threads).
Matrix multiplication. We also tested Limbo for verifying matrix
multiplications. Instead of using the naive 𝑂(𝑛3) multiplication
algorithm, we use an inner product based protocol. In particular,
given two 𝑀 × 𝑀 matrices, during the MPC evaluations the sender
parties 𝑃𝑆 directly injects the 𝑀2 values corresponding to the re-
sulting matrix, while in the checking phase parties verify that these
𝑀2 inner products are correctly computed. Note that this approach
only requires a minor modification to the our basic protocol and
soundness analysis, however it does not consider the special struc-
ture of these inner products (e.g., some of them are correlated), so
it can be further optimized. In Table 6, we show the performance of
Limbo for different values of 𝑀. We note that, even with this simple
variant of the protocol, there is a big advantage of going beyond
the gate-by-gate approach both in term of computation and com-
munication. For example, if 𝑀 = 128 the protocol based on inner
products is about 30% faster and uses about 38x less communication
than the one based on multiplication gates.
2https://homes.esat.kuleuven.be/~nsmart/MPC/sha256.txt
Session 11B: Zero Knowledge II CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3032𝑛
16
16
32
32
64
64
128
128
𝑘
8
16
8
16
8
16
8
16
𝜏
11
11
9
9
7
7
6
6
|𝐶| = 210
size
𝑡𝒫
(ms)
(KB)
2.4
6
8
2.6
3.8
5
4.0
7
6.7
4
6.9
5
3
11.0
9.7
4
𝑡𝒱
(ms)
2.3
2.4
3.6
3.8
6.5
6.6
10.6
9.3
𝑘
16
32
16
32
16
32
16
32
𝜏
11
11
9
9
7
7
6
6
|𝐶| = 214
size
𝑡𝒫
(ms)
(KB)
39
32
37
43
60
26
67
30
92
20
102
24
17
155
162
20
𝑡𝒱
(ms)
32
36
58
64
89
99
150
156
𝑘
16
32
16
32
16
32
16
32
𝜏
11
11
9
9
7
7
6
6
|𝐶| = 216
size
𝑡𝒫
(ms)
(KB)
163
102
108
172
83
334
88
333
65
297
69
294
55
707
732
58
𝑡𝒱
(ms)
159
167
258
269
394
413
677
701
𝑘
32
64
32
64
32
64
32
64
𝜏
11
11
9
9
7
7
6
6
|𝐶| = 220
size
𝑡𝒫
(KB)
(s)
3.08s
1464
1476
3.01s
4.91s
1198
4.76s
1208
7.48s
932