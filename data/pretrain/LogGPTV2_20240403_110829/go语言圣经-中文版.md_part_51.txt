要用encoding/json（§4.5）包来分析输出的JSON格式的信息。
工具 393
gopl
第十一章 测试
Maurice Wilkes，第一个存储程序计算机EDSAC的设计者，1949年他在实验室爬楼梯时有一
个顿悟。在《计算机先驱回忆录》（Memoirs of a Computer Pioneer）里，他回忆到：“忽然
间有一种醍醐灌顶的感觉，我整个后半生的美好时光都将在寻找程序BUG中度过了”。肯定从
那之后的大部分正常的码农都会同情Wilkes过分悲观的想法，虽然也许会有人困惑于他对软
件开发的难度的天真看法。
现在的程序已经远比Wilkes时代的更大也更复杂，也有许多技术可以让软件的复杂性可得到
控制。其中有两种技术在实践中证明是比较有效的。第一种是代码在被正式部署前需要进行
代码评审。第二种则是测试，也就是本章的讨论主题。
我们说测试的时候一般是指自动化测试，也就是写一些小的程序用来检测被测试代码（产品
代码）的行为和预期的一样，这些通常都是精心设计的执行某些特定的功能或者是通过随机
性的输入待验证边界的处理。
软件测试是一个巨大的领域。测试的任务可能已经占据了一些程序员的部分时间和另一些程
序员的全部时间。和软件测试技术相关的图书或博客文章有成千上万之多。对于每一种主流
的编程语言，都会有一打的用于测试的软件包，同时也有大量的测试相关的理论，而且每种
都吸引了大量技术先驱和追随者。这些都足以说服那些想要编写有效测试的程序员重新学习
一套全新的技能。
Go语言的测试技术是相对低级的。它依赖一个go test测试命令和一组按照约定方式编写的测
试函数，测试命令可以运行这些测试函数。编写相对轻量级的纯测试代码是有效的，而且它
很容易延伸到基准测试和示例文档。
在实践中，编写测试代码和编写程序本身并没有多大区别。我们编写的每一个函数也是针对
每个具体的任务。我们必须小心处理边界条件，思考合适的数据结构，推断合适的输入应该
产生什么样的结果输出。编写测试代码和编写普通的Go代码过程是类似的；它并不需要学习
新的符号、规则和工具。
测试 394
gopl
11.1. go test
go test命令是一个按照一定的约定和组织来测试代码的程序。在包目录内，所有
以 为后缀名的源文件在执行go build时不会被构建成包的一部分，它们是go test测
_test.go
试的一部分。
在 文件中，有三种类型的函数：测试函数、基准测试(benchmark)函数、示例函
*_test.go
数。一个测试函数是以Test为函数名前缀的函数，用于测试程序的一些逻辑行为是否正确；
go test命令会调用这些测试函数并报告测试结果是PASS或FAIL。基准测试函数是以
Benchmark为函数名前缀的函数，它们用于衡量一些函数的性能；go test命令会多次运行基
准函数以计算一个平均的执行时间。示例函数是以Example为函数名前缀的函数，提供一个由
编译器保证正确性的示例文档。我们将在11.2节讨论测试函数的所有细节，并在11.4节讨论基
准测试函数的细节，然后在11.6节讨论示例函数的细节。
go test命令会遍历所有的 *_test.go 文件中符合上述命名规则的函数，生成一个临时的main
包用于调用相应的测试函数，接着构建并运行、报告测试结果，最后清理测试中生成的临时
文件。
go test 395
gopl
11.2. 测试函数
每个测试函数必须导入testing包。测试函数有如下的签名：
func TestName(t *testing.T) {
// ...
}
测试函数的名字必须以Test开头，可选的后缀名必须以大写字母开头：
func TestSin(t *testing.T) { /* ... */ }
func TestCos(t *testing.T) { /* ... */ }
func TestLog(t *testing.T) { /* ... */ }
其中t参数用于报告测试失败和附加的日志信息。让我们定义一个实例包gopl.io/ch11/word1，
其中只有一个函数IsPalindrome用于检查一个字符串是否从前向后和从后向前读都是一样的。
（下面这个实现对于一个字符串是否是回文字符串前后重复测试了两次；我们稍后会再讨论
这个问题。）
gopl.io/ch11/word1
// Package word provides utilities for word games.
package word
// IsPalindrome reports whether s reads the same forward and backward.
// (Our first attempt.)
func IsPalindrome(s string) bool {
for i := range s {
if s[i] != s[len(s)-1-i] {
return false
}
}
return true
}
在相同的目录下，word_test.go测试文件中包含了TestPalindrome和TestNonPalindrome两个
测试函数。每一个都是测试IsPalindrome是否给出正确的结果，并使用t.Error报告失败信息：
测试函数 396
gopl
package word
import "testing"
func TestPalindrome(t *testing.T) {
if !IsPalindrome("detartrated") {
t.Error(`IsPalindrome("detartrated") = false`)
}
if !IsPalindrome("kayak") {
t.Error(`IsPalindrome("kayak") = false`)
}
}
func TestNonPalindrome(t *testing.T) {
if IsPalindrome("palindrome") {
t.Error(`IsPalindrome("palindrome") = true`)
}
}
命令如果没有参数指定包那么将默认采用当前目录对应的包（和 命令一
go test go build
样）。我们可以用下面的命令构建和运行测试。
$ cd $GOPATH/src/gopl.io/ch11/word1
$ go test
ok gopl.io/ch11/word1 0.008s
结果还比较满意，我们运行了这个程序， 不过没有提前退出是因为还没有遇到BUG报告。不
过一个法国名为“Noelle Eve Elleon”的用户会抱怨IsPalindrome函数不能识别“été”。另外一个
来自美国中部用户的抱怨则是不能识别“A man, a plan, a canal: Panama.”。执行特殊和小的
BUG报告为我们提供了新的更自然的测试用例。
func TestFrenchPalindrome(t *testing.T) {
if !IsPalindrome("été") {
t.Error(`IsPalindrome("été") = false`)
}
}
func TestCanalPalindrome(t *testing.T) {
input := "A man, a plan, a canal: Panama"
if !IsPalindrome(input) {
t.Errorf(`IsPalindrome(%q) = false`, input)
}
}
为了避免两次输入较长的字符串，我们使用了提供了有类似Printf格式化功能的 Errorf函数来
汇报错误结果。
测试函数 397
gopl
当添加了这两个测试用例之后， 返回了测试失败的信息。
go test
$ go test
--- FAIL: TestFrenchPalindrome (0.00s)
word_test.go:28: IsPalindrome("été") = false
--- FAIL: TestCanalPalindrome (0.00s)
word_test.go:35: IsPalindrome("A man, a plan, a canal: Panama") = false
FAIL
FAIL gopl.io/ch11/word1 0.014s
先编写测试用例并观察到测试用例触发了和用户报告的错误相同的描述是一个好的测试习
惯。只有这样，我们才能定位我们要真正解决的问题。
先写测试用例的另外的好处是，运行测试通常会比手工描述报告的处理更快，这让我们可以
进行快速地迭代。如果测试集有很多运行缓慢的测试，我们可以通过只选择运行某些特定的
测试来加快测试速度。
参数 可用于打印每个测试函数的名字和运行时间：
-v
$ go test -v
=== RUN TestPalindrome
--- PASS: TestPalindrome (0.00s)
=== RUN TestNonPalindrome
--- PASS: TestNonPalindrome (0.00s)
=== RUN TestFrenchPalindrome
--- FAIL: TestFrenchPalindrome (0.00s)
word_test.go:28: IsPalindrome("été") = false
=== RUN TestCanalPalindrome
--- FAIL: TestCanalPalindrome (0.00s)
word_test.go:35: IsPalindrome("A man, a plan, a canal: Panama") = false
FAIL
exit status 1
FAIL gopl.io/ch11/word1 0.017s
参数 对应一个正则表达式，只有测试函数名被它正确匹配的测试函数才会被 测
-run go test
试命令运行：
$ go test -v -run="French|Canal"
=== RUN TestFrenchPalindrome
--- FAIL: TestFrenchPalindrome (0.00s)
word_test.go:28: IsPalindrome("été") = false
=== RUN TestCanalPalindrome
--- FAIL: TestCanalPalindrome (0.00s)
word_test.go:35: IsPalindrome("A man, a plan, a canal: Panama") = false
FAIL
exit status 1
FAIL gopl.io/ch11/word1 0.014s
测试函数 398
gopl
当然，一旦我们已经修复了失败的测试用例，在我们提交代码更新之前，我们应该以不带参
数的 命令运行全部的测试用例，以确保修复失败测试的同时没有引入新的问题。
go test
我们现在的任务就是修复这些错误。简要分析后发现第一个BUG的原因是我们采用了 byte而
不是rune序列，所以像“été”中的é等非ASCII字符不能正确处理。第二个BUG是因为没有忽略
空格和字母的大小写导致的。
针对上述两个BUG，我们仔细重写了函数：
gopl.io/ch11/word2
// Package word provides utilities for word games.
package word
import "unicode"
// IsPalindrome reports whether s reads the same forward and backward.
// Letter case is ignored, as are non-letters.
func IsPalindrome(s string) bool {
var letters []rune
for _, r := range s {
if unicode.IsLetter(r) {
letters = append(letters, unicode.ToLower(r))
}
}
for i := range letters {
if letters[i] != letters[len(letters)-1-i] {
return false
}
}
return true
}
同时我们也将之前的所有测试数据合并到了一个测试中的表格中。
测试函数 399
gopl
func TestIsPalindrome(t *testing.T) {
var tests = []struct {
input string
want bool
}{
{"", true},
{"a", true},
{"aa", true},
{"ab", false},
{"kayak", true},
{"detartrated", true},
{"A man, a plan, a canal: Panama", true},
{"Evil I did dwell; lewd did I live.", true},
{"Able was I ere I saw Elba", true},
{"été", true},
{"Et se resservir, ivresse reste.", true},
{"palindrome", false}, // non-palindrome
{"desserts", false}, // semi-palindrome
}
for _, test := range tests {
if got := IsPalindrome(test.input); got != test.want {
t.Errorf("IsPalindrome(%q) = %v", test.input, got)
}
}
}
现在我们的新测试都通过了：
$ go test gopl.io/ch11/word2
ok gopl.io/ch11/word2 0.015s
这种表格驱动的测试在Go语言中很常见。我们可以很容易地向表格添加新的测试数据，并且
后面的测试逻辑也没有冗余，这样我们可以有更多的精力去完善错误信息。
失败测试的输出并不包括调用t.Errorf时刻的堆栈调用信息。和其他编程语言或测试框架的
assert断言不同，t.Errorf调用也没有引起panic异常或停止测试的执行。即使表格中前面的数
据导致了测试的失败，表格后面的测试数据依然会运行测试，因此在一个测试中我们可能了
解多个失败的信息。
如果我们真的需要停止测试，或许是因为初始化失败或可能是早先的错误导致了后续错误等
原因，我们可以使用t.Fatal或t.Fatalf停止当前测试函数。它们必须在和测试函数同一个
goroutine内调用。
测试失败的信息一般的形式是“f(x) = y, want z”，其中f(x)解释了失败的操作和对应的输出，y
是实际的运行结果，z是期望的正确的结果。就像前面检查回文字符串的例子，实际的函数用
于f(x)部分。显示x是表格驱动型测试中比较重要的部分，因为同一个断言可能对应不同的表
测试函数 400
gopl
格项执行多次。要避免无用和冗余的信息。在测试类似IsPalindrome返回布尔类型的函数时，
可以忽略并没有额外信息的z部分。如果x、y或z是y的长度，输出一个相关部分的简明总结即