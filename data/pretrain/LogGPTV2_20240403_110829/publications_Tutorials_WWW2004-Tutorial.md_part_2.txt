from other documents and reused.
Id attribute assigns a URI to the policy.
QName naming is also allowed. 39
40
Attaching Policies
WSDL
references
Document Policy
wsdl:service
references
describes
Policy Attachment
identifies
40
41
WSDL and WS-Policy
Abstract and deployment policies
What is
PortType PortType
required
Abstract policy operation(s) operation(s)
Input Message Out Message Input Message Out Message
Abstract Interface
Binding Binding
(e.g. SOAP/HTTP) (e.g. IIOP)
Deployment QoS QoS
policy What is Port Port
supported
Service
41
42
WS-Policy and SOAP
Policies define what QoS
protocols are followed. 
Are reflected on what
 wsse:X509v3
headers appear in the 
SOAP envelope.
QoS policies attached to a
service of service endpoint 
represent protocols.
QoS protocols are 
MIIEZzCCA9Cg...
 …
42
43
Using WS-Policy
Requester finds out QoS requirements stated by provider and
configures itself accordingly:
Both development time and runtime usage.
Many options may be available
Requester searches for services that support its QoS
requirements.
Discovery time.
Match-maker finds compatible services in peer to peer setting.
Symmetric discovery scenario.
Contracts may be formulated based on compatibility of published
policies.
Business implications of policy matching.
43
What is the Typical Usage
44
Scenario
Simple SOA model:
WSDL description or UDDI service entry identify all policies that are
followed by a service.
Service requesters check for services whose interface and policies
indicate technical compatibility with their requirements.
It is a static model
Policies are used to represent the stack of technologies supported by
the service.
A “match” represents a service using a compatible policy stack.
Typically results in implicit binding between application
implementations.
Loose coupling is limited to selecting among technically equivalent
services, using non-functional aspects (price, ratings, etc.)
This is a direct extension from today’s development models.
The stack is fixed at development/deployment time.
SOA model essentially introduces the publishing of descriptions and
runtime selection.
44
Dynamic Middleware 45
Reconfiguration
Effective dynamic binding
requires run-time adaptation of
middleware configuration:
J2EE focused on moving
middleware configuration
away from the code developer
and into the deployment
phase.
SOC requires moving it further
to follow runtime discovery of
services:
Seamlessly adapt to policy
settings of target, select
among possible options, carry
on basic a policy negotiation.
45
46
WS-Policy
Status: WS-Policy specifications published
withy RF licensing terms at:
http://www-
106.ibm.com/developerworks/webservices/library/
ws-polfram/summary.html
WS-PolicyFramework
WS-PolicyAttachments
To be submitted for standardization.
46
47
Service Metadata - Summary
Explicit metadata is the central characteristic of SOA
Metadata must completely define the service
contract, including both functional and non-
functional aspects.
WSDL
Policies
Metadata can support service discovery as well as
tooling.
Advanced runtimes can derive greater flexibility from
contract variability points.
47
Discovery
SOA and Web services
49
Discovery Infrastructure
Registries
Requesters search for providers in third party
central directory.
Provider policies are retrieved from registry.
Requester interacts according to discovered
policies.
Will not deal with here.
Metadata exchange
Requesters and providers can exchange policies
directly, no third party involved.
49
50
WS-Metadata Exchange
Goal: Allow providers to
customize their policies to
individual requesters and
interactions.
Requesters send:
Requester’s policies can be 1 Identity,
 Identity,
explicitly communicated. context
context
Requester’s execution
context may be implicitly
transmitted.
Providers return set of 2 Policy
 Policy
or fault
policies to apply to or fault
interaction.
“Faults” should be thrown if
any party finds it cannot deal
with the other’s policies.
50
51
More on Metadata Exchange
Takes place at the beginning of an interaction.
MDE model is a request-response interaction for retrieving
custom policies.
Policies are set from then on.
Both parties’ middleware must be able to deal with dynamically
discovered policies.
Start-time (re) configuration of component characteristics.
Component is reconfigured to deal with discovered policies that
apply to the interaction.
In flight metadata exchange?
Any party can send unsolicited policies at any point in the
interaction.
Applies in particular to long running transactions where changes
in policies are not unlikely.
The scope of the new policies will need to be clearly defined.
51
Metadata and Channel
52
Configuration
52
53
Cooperative Middleware
Joint work with Nirmal Mukhi and Ravi Konuru
Requesters and providers cooperate to optimize the
interaction channel.
Through “cooperative” reconfiguration of their middleware.
Follows a dynamic exchange of policies and negotiation.
Distributes roles and function between the two endpoints to
optimize overall interaction.
Optimal configuration is negotiated.
Must assume a trusted relationship between the parties.
53
Cooperative Specialization Use
54
cases
Mobile clients and servers negotiate downloading of server
function to clients.
Known approach, NOT metadata based.
Hardwired protocol essentially fixes the what function can be
offloaded.
Metadata allows flexible reuse of a common protocol for
negotiating different functions.
Example:
Schema validation offloading to client app.
Control of the application flow can be offloaded to allow
disconnected operation.
Offloading takes place selectively based on client and
server declared capabilities (policies).
54
55
Discovery - Summary
Metadata-based discovery of services is a basic
SOA capability.
The discovery of metadata itself, however, does not
necessarily need to follow the registry pattern.
A dynamic middleware infrastructure is required to
take full advantage of dynamic discovery (of both
services and metadata).
55
Composition
SOA and Web services
57
Service Composition
Service composition is the core sw. development task in SOA.
Applications are created by combining the basic building blocks
provided by other services.
Service compositions may themselves become services,
following a model of recursive service composition.
Composition assumes an interaction model between
components:
P2P conversational interactions.
Interactions are naturally multi-party interactions.
Many composition models are possible. We know about two:
Process oriented composition – BPEL4WS
Distributed composition – WSFL Global models.
57
58
BPEL Concepts
A BPEL process defines the structure of the
interaction in terms of
participant services (partners)
Characterize partners
Provide support partner conversation
business logic.
Data
Control flow
Error handling and recovery mechanism
58
Structure of a BPEL4WS
59
Process
 ... 
Partner
 ... 
information
 ... 
 ... 
Business
 ... 
logic
(activities)*
59
60
BPEL Partners
Partners:
A composition defines a new service(s) which interacts
with one or more partners.
Partners are characterized by a pair of abstract WSDL
interfaces:
How the composition uses and is used by the partner.
Interactions between partners are thus bidirectional,
conversational in nature.
May combine synchronous and asynchronous interactions
Stateful.
How is state maintained?
BPEL correlation mechanism uses business data to
maintain the state of the interaction.
Other middleware mechanism are possible as well.
60
61
BPEL4WS Partners
Bidirectional,
asynchronous,
conversation
Multiple
simultaneous
Web service
conversations Many partners
partner
Characterized
by WSDL
interfaces
?
61
62
What is Correlation?
Correlation sets provide support for stateful
interactions.
CSs represent the data that is used to maintain the state of
the interaction (a “conversation”).
At the process end of the interaction, CSs allow incoming
messages to reach the right process instance.
What is a correlation set?
A set of application fields that capture the state of the
interaction (“correlating business data”). For example: a
“purchase order number”, a “customer id”, etc.
Each set is initialized once
Its values do not change in the course of the interaction.
62
63
Defining Correlation Sets
63
64
Business Logic in BPEL
Workflow-like business logic is used to specify the sequencing of
the interactions with partners.
Activities representing service interactions and data
manipulation.
Control constructs that combine activities: links, sequences,
conditionals, etc.
The asynchronous nature of interactions is supported by event
handlers.
Failure conditions and recovery are supported through by fault
handlers and compensatable scopes.
64
65
BPEL Basic Activities
+
65
66
BPEL Structured Activities
66
Nesting Structured Activities.
67
Example
 Seq
Flow
Seq Seq
 ... 
While
67
68
BPEL Handlers and Scopes
Scope
Fault Handler
A scope is a set of (basic or
structured) activities.
Each scope can have two
types of handlers
associated:
• Fault handlers. Many
can be attached, for
Compensation
different fault types.
Handler
• Compensation
handlers. A single
compensation handler
per scope.
68
69
How Handlers Work
A compensation handler is used to reverse the work performed by an
already completed scope
A compensation handler can only be invoked by the fault handler or
compensation handler of its immediate enclosing scope
A fault handler defines alternate execution paths when a fault occurs
within the scope.
Typical scenario:
Fault is thrown (retuned by invoke or explicitly by process)
1.
Execution of scope is terminated
2.
Appropriate fault handler located (with usual propagation semantics)
3.
Main execution is compensated to “undo” business effects of unfinished
4.
work.
69
70
Global Models
BPEL processes capture multi-party interactions
from a single party perspective.
There isn’t a well accepted format for capturing these
interactions.
Complex interactions are naturally multi-party.
Single party view does not capture the global sequence of
interactions
Each party may not be involved in every relevant
interaction.
Where are global models?
WSFL (a BPEL precursor) introduced global models.
WS-Choreography WG in W3C has been working on this
concept as well.
70
71
Global Models, an Example
1-send notice
Customer Cable Co.
2-pay in full
Cable Co. Cable Co.
1-send notice 1-send notice
4-pay in full
Customer 5-stop collection Customer 5-notify&pay 2-collect from
2-collect from
& pay customer
customer
6-notify: done 6-pay in full
3-send
Collections Collections
3-send
ultimatum
ultimatum
Agency Agency
71
72
Composition - Summary
Business integration becomes service composition
in SOA.
An interaction model needs to be assumed for
composition, and supported by the corresponding
composition models.
BPEL composition natively supports a multi-party,
conversational model.
To support the full array of distributed compositions
needs a global model formalism in addition to
process centric compositions (BPEL).
72
Summary
SOA and Web services
Web Services as an Instantiation
74
of SOA
SOA is more than “publish/find/bind”.
Implies a completely business re-orientation of
computing.
SOA builds on:
Standard interaction protocols.
A component model, as defined by service contracts.
A conversational interaction model.
A set of service composition model.
Web services provide an XML based instantiation of
SOA.
74
Service Oriented Architectures
75
and Web Services
End
75