# 从其他文档中重用内容
Id属性为策略分配了一个URI。QName命名也是允许的。

## 策略附加
### WSDL引用
- **Document Policy**: `wsdl:service` 描述了策略附件，该附件标识了策略。

## WSDL与WS-Policy
- **抽象和部署策略**：  
  - **PortType**（端口类型）是必需的。
  - **Abstract policy** 涉及操作（如输入消息、输出消息等）。
  - **Binding**（绑定）定义了具体的协议（例如SOAP/HTTP或IIOP）。
  - **Deployment QoS**（服务质量）策略支持服务端口。

## WS-Policy与SOAP
- **Policies** 定义了所遵循的服务质量协议。
- **wsse:X509v3** 头信息会出现在SOAP信封中。
- **QoS policies** 附属于服务或服务端点，代表协议。
- 示例：`MIIEZzCCA9Cg...`

## 使用WS-Policy
- 请求者发现提供者声明的质量需求，并相应地进行配置。
- 既可以在开发时也可以在运行时使用。
- 请求者可以搜索支持其QoS要求的服务。
- 在对等设置中，匹配器可以找到兼容的服务（对称发现场景）。
- 可以基于发布的策略制定合同。
- 政策匹配具有商业意义。

## 典型使用场景
- **简单SOA模型**：
  - WSDL描述或UDDI服务条目标识服务遵循的所有策略。
  - 服务请求者检查服务接口和策略，以确定其技术兼容性。
  - 这是一个静态模型，策略用于表示服务支持的技术堆栈。
  - “匹配”表示服务使用兼容的策略堆栈。
  - 通常会导致应用程序实现之间的隐式绑定。
  - 松耦合仅限于选择技术上等效的服务，并使用非功能性方面（如价格、评级等）。
  - SOA模型本质上引入了描述的发布和运行时选择。

## 动态中间件重新配置
- 有效的动态绑定需要中间件配置的运行时适应。
- J2EE专注于将中间件配置从代码开发人员转移到部署阶段。
- SOC要求进一步移动到运行时服务发现：
  - 无缝适应目标策略设置。
  - 从可能的选项中进行选择，并进行基本的策略协商。

## WS-Policy状态
- WS-Policy规范已发布，带有RF许可条款，详见：[IBM DeveloperWorks](http://www-106.ibm.com/developerworks/webservices/library/ws-polfram/summary.html)
- **WS-PolicyFramework** 和 **WS-PolicyAttachments** 将提交标准化。

## 服务元数据总结
- 明确的元数据是SOA的核心特征。
- 元数据必须完全定义服务合同，包括功能和非功能方面。
- WSDL和策略都是元数据的一部分。
- 元数据可以支持服务发现和工具化。
- 高级运行时可以从合同可变点获得更大的灵活性。

## 发现基础设施
- **注册表**：请求者在第三方中心目录中搜索提供者。
- **元数据交换**：请求者和提供者可以直接交换策略，无需第三方参与。

## WS-Metadata Exchange
- 目标：允许提供者根据个别请求者和交互自定义其策略。
- 请求者发送：
  - 身份和上下文信息。
  - 执行上下文可能隐式传输。
- 提供者返回一组策略或错误信息，以应用于交互。
- 如果任何一方无法处理另一方的策略，则应抛出“错误”。

## 更多关于元数据交换
- 在交互开始时进行。
- MDE模型是一种请求-响应交互，用于检索自定义策略。
- 一旦设置了策略，双方的中间件都必须能够处理动态发现的策略。
- 组件特性在启动时重新配置。
- 组件被重新配置以处理适用于交互的发现策略。
- 任何一方都可以在交互过程中随时发送未请求的策略。
- 特别适用于长时间运行的事务，在这些事务中，策略的变化是常见的。
- 新策略的作用范围需要明确定义。

## 协作中间件
- 请求者和提供者通过“协作”重新配置其中间件来优化交互通道。
- 通过动态交换策略和协商。
- 在两个端点之间分配角色和功能以优化整体交互。
- 最优配置是通过协商确定的。
- 必须假设各方之间存在信任关系。

## 协作专业化用例
- 移动客户端和服务器协商将服务器功能下载到客户端。
- 已知的方法不是基于元数据的。
- 固定协议基本上固定了可以卸载的功能。
- 元数据允许灵活地重用通用协议来协商不同的功能。
- 示例：模式验证卸载到客户端应用。
- 应用程序流程控制可以卸载以允许断开连接的操作。
- 根据客户端和服务器声明的能力（策略）选择性地卸载。

## 发现总结
- 基于元数据的服务发现是SOA的基本能力。
- 元数据本身的发现不一定需要遵循注册表模式。
- 需要一个动态中间件基础设施来充分利用动态发现（服务和元数据）。

## 服务组合
- 服务组合是SOA中的核心软件开发任务。
- 应用程序由其他服务提供的基本构建块组合而成。
- 服务组合本身可以成为服务，形成递归服务组合。
- 组合假定了组件之间的交互模型：
  - 对等对话交互。
  - 自然的多方交互。
- 存在多种组合模型，例如：
  - 流程导向的组合 – BPEL4WS
  - 分布式组合 – WSFL全局模型

## BPEL概念
- BPEL过程定义了参与者服务（合作伙伴）之间的交互结构。
- 描述合作伙伴并提供支持伙伴对话的业务逻辑。
- 数据、控制流、错误处理和恢复机制。

## BPEL4WS过程结构
- 合作伙伴信息
- 业务逻辑（活动）

## BPEL合作伙伴
- 组合定义了新的服务，该服务与一个或多个合作伙伴交互。
- 合作伙伴由一对WSDL接口定义：
  - 组合如何使用和被合作伙伴使用。
- 合作伙伴之间的交互是双向的，具有会话性质。
- 可以结合同步和异步交互。
- 有状态的。
- 如何维护状态？
  - BPEL相关机制使用业务数据来维护交互状态。
  - 其他中间件机制也是可能的。

## BPEL4WS合作伙伴
- 双向、异步、会话
- 多个同时进行的Web服务会话
- 许多合作伙伴
- 由WSDL接口定义

## 什么是相关性？
- 相关性集提供了有状态交互的支持。
- CSs表示用于维护交互状态（“会话”）的数据。
- 在交互的进程端，CSs允许传入的消息到达正确的进程实例。
- 相关性集是什么？
  - 一组应用程序字段，捕获交互状态（“关联业务数据”）。例如：“采购订单号”、“客户ID”等。
  - 每个集合初始化一次，其值在交互过程中不会改变。

## 定义相关性集

## BPEL中的业务逻辑
- 类似工作流的业务逻辑用于指定与合作伙伴交互的顺序。
- 代表服务交互和数据操作的活动。
- 结合活动的控制结构：链接、序列、条件等。
- 异步交互通过事件处理程序支持。
- 通过故障处理程序和补偿作用域支持故障条件和恢复。

## BPEL基本活动

## BPEL结构化活动

## 嵌套结构化活动示例
- 序列
- 流
- 序列
- 循环

## BPEL处理程序和作用域
- 作用域是一组（基本或结构化）活动。
- 每个作用域可以有两种类型的处理程序：
  - 故障处理程序。可以附加许多不同类型的故障处理程序。
  - 补偿处理程序。每个作用域只有一个补偿处理程序。

## 处理程序的工作原理
- 补偿处理程序用于撤销已完成的作用域的工作。
- 补偿处理程序只能由其直接封闭作用域的故障处理程序或补偿处理程序调用。
- 故障处理程序定义了在作用域内发生故障时的替代执行路径。
- 典型场景：
  1. 抛出故障（由调用返回或由进程显式抛出）
  2. 终止作用域的执行
  3. 定位适当的故障处理程序（按常规传播语义）
  4. 补偿主要执行以“撤销”未完成工作的业务影响。

## 全局模型
- BPEL过程从单个参与者角度捕获多方交互。
- 目前没有广泛接受的格式来捕获这些交互。
- 复杂的交互自然是多方的。
- 单方视角无法捕获全局交互序列。
- 每个参与者可能不参与每一个相关的交互。
- 全局模型在哪里？
  - WSFL（BPEL的前身）引入了全局模型。
  - W3C的WS-Choreography工作组也在研究这个概念。

## 全局模型示例
- 客户 → 电缆公司：发送通知
- 电缆公司 → 客户：全额支付
- 客户 → 电缆公司：全额支付
- 电缆公司 → 收账机构：收取款项
- 收账机构 → 客户：发送最后通牒
- 客户 → 电缆公司：全额支付
- 电缆公司 → 客户：通知完成

## 组合总结
- 业务集成在SOA中变成服务组合。
- 组合需要假设一个交互模型，并由相应的组合模型支持。
- BPEL组合原生支持多方、会话模型。
- 为了支持完整的分布式组合，除了过程为中心的组合（BPEL），还需要全局模型形式。

## 总结
- **SOA不仅仅是“发布/查找/绑定”**。
- 它意味着计算的完全业务重新定向。
- SOA建立在标准交互协议、组件模型（由服务合同定义）、会话交互模型和服务组合模型之上。
- Web服务提供了基于XML的SOA实现。

希望这些优化后的文本更加清晰、连贯和专业。如果有任何进一步的修改需求，请告诉我！