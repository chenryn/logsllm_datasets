title:A Comprehensive Symbolic Analysis of TLS 1.3
author:Cas Cremers and
Marko Horvat and
Jonathan Hoyland and
Sam Scott and
Thyla van der Merwe
A Comprehensive Symbolic Analysis of TLS 1.3
Cas Cremers
Jonathan Hoyland
Marko Horvat
MPI-SWS, Germany
University of Oxford, UK
Royal Holloway, University of
London, UK
Royal Holloway, University of
Sam Scott
London, UK
Thyla van der Merwe
Royal Holloway, University of
London, UK
ABSTRACT
The TLS protocol is intended to enable secure end-to-end commu-
nication over insecure networks, including the Internet. Unfortu-
nately, this goal has been thwarted a number of times throughout
the protocol’s tumultuous lifetime, resulting in the need for a new
version of the protocol, namely TLS 1.3. Over the past three years, in
an unprecedented joint design effort with the academic community,
the TLS Working Group has been working tirelessly to enhance
the security of TLS.
We further this effort by constructing the most comprehensive,
faithful, and modular symbolic model of the TLS 1.3 draft 21 release
candidate, and use the Tamarin prover to verify the claimed TLS 1.3
security requirements, as laid out in draft 21 of the specification. In
particular, our model covers all handshake modes of TLS 1.3.
Our analysis reveals an unexpected behaviour, which we expect
will inhibit strong authentication guarantees in some implementa-
tions of the protocol. In contrast to previous models, we provide
a novel way of making the relation between the TLS specification
and our model explicit: we provide a fully annotated version of
the specification that clarifies what protocol elements we modelled,
and precisely how we modelled these elements. We anticipate this
model artifact to be of great benefit to the academic community
and the TLS Working Group alike.
KEYWORDS
symbolic verification, authenticated key exchange, TLS 1.3
1 INTRODUCTION
The Transport Layer Security (TLS) protocol is the de facto means
for securing communications on the World Wide Web. Initially
released as Secure Sockets Layer (SSL) by Netscape Communica-
tions in 1995, the protocol has been subject to a number of version
upgrades over the course of its 20-year lifespan. Rebranded as TLS
when it fell under the auspices of the Internet Engineering Task
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ’17, October 30-November 3, 2017, Dallas, TX, USA
© 2017 Copyright held by the owner/author(s). Publication rights licensed to Associa-
tion for Computing Machinery.
ACM ISBN 978-1-4503-4946-8/17/10...$15.00
https://doi.org/10.1145/3133956.3134063
Force (IETF) in the mid-nineties, the protocol has been incremen-
tally modified and extended. In the case of TLS 1.2 and below, these
modifications have taken place in a largely retroactive fashion;
following the announcement of an attack [6, 7, 18, 20, 32, 43, 49],
the TLS Working Group (WG) would either respond by releasing a
protocol extension (A Request for Comments (RFC) intended to pro-
vide increased functionality and/or security enhancements) or by
applying the appropriate “patch" to the next version of the protocol.
For a more detailed analysis of the development and standardisation
of TLS see [45].
Prior to the announcement of the BEAST [26] and CRIME [27]
attacks of 2011 and 2012, respectively, such a strategy was valid
given the frequency with which versions were updated, and the
limited number of practical attacks against the protocol.
Post-2011, however, the heightened interest in the protocol and
the resulting flood of increasingly practical attacks against it [1–
3, 5, 9, 13, 15, 16, 26, 27, 29, 31, 41, 42, 44] rendered this design
philosophy inadequate. Coupled with pressure to increase the pro-
tocol’s efficiency (owing to the release of Google’s QUIC Crypto
[37]), the IETF started drafting the next version of the protocol, TLS
1.3, in the Spring of 2014. Unlike the development of TLS 1.2 and
below, the TLS WG adopted an “analysis-prior-to-deployment” de-
sign philosophy, welcoming contributions from the academic com-
munity before official release. There have been substantial efforts
from the academic community in the areas of program verification–
analysing implementations of TLS [12, 14], the development of com-
putational models– analysing TLS within Bellare-Rogaway style
frameworks [24, 25, 28, 33, 35, 38], and the use of formal methods
tools such as ProVerif[17] and Tamarin[48] to analyse symbolic
models of TLS [4, 10, 22, 30]. All of these endeavours have helped
to both find weaknesses in the protocol and confirm and guide the
design decisions of the TLS WG.
The TLS 1.3 draft specification however, has been a rapidly mov-
ing target, with large changes being effected in a fairly regular
fashion. This has often rendered much of the analysis work ‘out-
dated’ within the space of few months as large changes to the
specification effectively result in a new protocol, requiring a new
wave of analysis.
In this work we contribute to what is hopefully the last wave of
analysis of TLS 1.3 prior to its official release. We present a tool-
supported, symbolic verification of a near-final draft of TLS 1.3,
adding to the large effort by the TLS community to ensure that
TLS 1.3 is free of the many weaknesses affecting earlier versions, and
that it is imbued with security guarantees befitting such a critical
protocol. We note that most of the cryptographic mechanisms in
the current TLS 1.3 draft are stable, and other than fluctuations
surrounding the zero-Round-Trip-Time (0-RTT) mechanism [40],
we do not expect substantial changes to come.
1.1 Contributions
Our main contributions in this work are as follows:
(1) We develop a symbolic model of the latest specification of
TLS 1.3 (draft 21) that considers all the possible interactions
of the available handshake modes, including PSK-based
resumption and 0-RTT. Its fine-grained, modular struc-
ture greatly extends and refines the coverage of previous
symbolic models that were successfully used to discover
sophisticated interaction attacks, including that of Cremers
et al. [22]. Our model effectively captures a new TLS 1.3
protocol, incorporating the many changes that have been
made to the protocol since the development of these previ-
ous models. We also note that our model is highly flexible
and can easily accommodate the removal of the 0-RTT
mechanism, should the need arise.
(2) We prove the majority of the specified security require-
ments of TLS 1.3, including the secrecy of session keys,
perfect forward secrecy (PFS) of session keys (where ap-
plicable), peer authentication, and key compromise imper-
sonation resistance. We also show that after a successful
handshake the client and server agree session keys and
that session keys are unique across handshakes.
(3) We uncover a behaviour that may lead to security problems
in applications that assume that TLS 1.3 provides strong
authentication guarantees.
(4) We provide a novel way of exhibiting the relation between
the specification and our model: we provide an annotated
version of the TLS 1.3 specification that clarifies which
parts are modelled and how, and which parts were ab-
stracted. This provides an unprecedented level of modelling
transparency and enables a straightforward assessment of
the faithfulness and coverage of our model. We anticipate
that this output will be of great benefit to the academic
community analysing TLS 1.3, as well as the TLS Work-
ing Group as it provides a clear and easy-to-understand
mapping between the TLS 1.3 specification and a TLS 1.3
model.
All our Tamarin input files, proofs, and the annotated TLS 1.3 spec-
ification that shows the relation between the RFC and the model,
can be downloaded from [21].
1.2 Related work
As mentioned, there has been a great deal of work conducted in
the complementary analysis spheres pertinent to TLS 1.3. Of most
interest to this work are the symbolic analyses presented in [22],
[4] and [10].
The work in [22] by Cremers et al. offered a symbolic model
and accompanying analysis of draft 10 of the TLS 1.3 specification,
using the Tamarin prover. Since then, there have been multiple
changes made to the specification - 10 drafts worth of changes to be
precise. These updates have included major revisions of the 0-RTT
mechanism and the key derivation schedule. In draft 10, the send-
ing of early data required a client to possess a semi-static (EC)DH
value of the server. This particular handshake mode was removed
and replaced by a pre-shared key (PSK) 0-RTT handshake mode–
early data can now only be encrypted using a PSK. In fact, the PSK
mechanism has been greatly enhanced since draft 10 with new PSK
variants and binding values being incorporated in to the specifi-
cation. Post-handshake authentication was officially incorporated
from draft 11 onwards and a few drafts later, post-handshake au-
thentication was enabled to operate with the PSK handshake mode.
Another change to be incorporated after draft 10 was the inclu-
sion of 0.5-RTT data - the server being able to send fully protected
application data as part of its first flight of messages.
All of these changes have resulted in what is effectively a very
different TLS 1.3 protocol, particularly from a symbolic perspective.
As a Tamarin model aims to consider the interaction of all possible
handshake modes and variants, changes to these modes, as well
as the inclusion of new post-handshake combinations, results in a
very different different set of traces to be considered when proving
security properties. Hence, this work presents a substantially differ-
ent model to [22], and follows a far more fine-grained and flexible
approach to modelling TLS 1.3.
The work in [4] is an analysis of TLS 1.3 by the Cryptographic
protocol Evaluation towards Long-Lived Outstanding Security (CEL-
LOS) Consortium using the ProVerif tool. Announced on the TLS
WG mailing list at the start of 2016, it showed the initial (EC)DHE
handshake of draft 11 to be secure in the symbolic setting. In com-
parison to our work, this analysis covers only one handshake mode
of a draft that is now somewhat outdated.
The ProVerif models of draft 18 presented by Bhargavan et al.
in [10] include most TLS 1.3 modes, and cover rich threat models
by considering downgrade attacks (both with weak crypto and
downgrade to TLS 1.2). However, unlike our work, they do not con-
sider all modes, as they do not consider the post-handshake client
authentication mode. While they cover relative strong authentica-
tion guarantees (which led to the discovery of an unknown key
share attack), their analysis did not uncover the potential mismatch
between client and server view that we describe in Section 5.2.
1.3 Paper organisation
The paper is organised as follows. In Section 2 we describe the
TLS 1.3 protocol and the security properties claimed in the spec-
ification. Section 3 describes our Tamarin model and provides a
few Tamarin prover fundamentals. In Section 4, we describe our en-
coding of the security guarantees, followed by Section 5 where we
describe our results. Section 6 covers the relationship between our
model and the specification document, discussing how we provide a
website that describes our model side-by-side with the specification,
giving us unprecedented modelling transparency. We conclude in
Section 7.
2 TLS 1.3
In this section we provide a brief description of the TLS 1.3 pro-
tocol as is necessary for understanding our symbolic model, and
we outline the claimed security properties and guarantees of the
protocol.
2.1 New mechanisms
The three years of effort that has gone into crafting and fine-tuning
both the security and efficiency mechanisms of TLS 1.3 is readily
apparent in the large structural departures from TLS 1.2. The two
protocols have broadly similar goals but exhibit many differences.
For example, a full TLS 1.3 handshake requires one fewer round
trip before a client can transmit protected application data, and the
new zero round trip time (0-RTT) mechanism allows less sensitive
application data to be sent by the client as part of its first flight of
messages.
TLS 1.3 has three key exchange modes, namely, Diffie–Hellman
exchange (DHE), pre-shared key (PSK) exchange, and PSK coupled
with DHE. These modes enable useful features like session resump-
tion and the transmission of early application data. Additionally,
there are a number of handshake variants that allow for group rene-
gotiation and the sending of context-dependent, optional messages.
Each of these variants has different properties and offers different
security guarantees.
Furthermore, TLS 1.3 has three post-handshake mechanisms
covering traffic key updates, post-handshake client authentication,
and the sending of new session tickets (NSTs) for subsequent re-
sumption via a PSK. The handshake protocol maintains a rolling
transcript, on which both parties must agree. This transcript takes
the form of a hash value of all of the handshake messages. Post-
handshake messages, however, are not included in this transcript
resulting in different security properties for the post-handshake
mechanisms.
We analyse all of the TLS 1.3 key exchange modes, handshake
variants, and post-handshake mechanisms simultaneously, consid-
ering all possible interactions between them. We provide a brief
description of these components as well as associated message flow
diagrams.
2.1.1 Diffie–Hellman exchange (DHE). The default mode of TLS 1.3
allows for ephemeral Diffie–Hellman (DH) keys to be established
either over a finite field or using elliptic curves.
In an initial (EC)DHE handshake, as depicted in Figure 1, the
client sends a ClientHello message containing a random nonce,
i.e. a freshly generated random value, and a list of symmetric al-
gorithms. The client also sends a set of DH key shares and the
associated groups, KeyShare, and potentially some other exten-
sions.
Upon receipt of a ClientHello message, the server selects ap-
propriate cryptographic parameters for the connection and re-
sponds with a ServerHello message. This message contains a
server-generated random nonce, an indication of the selected pa-
rameters and potentially some other extensions. The server also
sends a KeyShare message, along with an EncryptedExtensions
message and optionally a CertificateRequest message.
The KeyShare contains the server’s choice of group and its
ephemeral DH key share. The client and server key shares are
used to compute handshake and application traffic keys.
The EncryptedExtensions message contains material that is not
necessary for determining cryptographic parameters. For instance,
the draft specification lists the server name and the maximum TLS
fragment length as possible values to be sent in this message. The
Client
Server
ClientHello
KeyShare
ServerHello
KeyShare
EncryptedExtensions
CertificateRequest*
Certificate
CertificateVerify
Finished
Certificate*
CertificateVerify*
Finished
[ApplicationData]
Figure 1: A full TLS 1.3 handshake (Section 2.1.1)
CertificateRequest message indicates that the server requests
client authentication in the mutual authentication case.
The server will also send a Certificate message, containing the
server’s certificate and a CertificateVerify message, which is a
digital signature over the current transcript. These two messages
allow the client to authenticate server. The server also sends a
Finished message. This message is a Message Authentication Code
(MAC) over the entire handshake, providing key confirmation and
binding the server’s identity to the computed traffic keys.
The client responds with Certificate and CertificateVerify
messages, if requested, and then sends its own Finished message.
These message flows are depicted in Figure 1.