title:Performance and Dependability of Structured Peer-to-Peer Overlays
author:Miguel Castro and
Manuel Costa and
Antony I. T. Rowstron
Performance and dependability of structured peer-to-peer overlays
Miguel Castro, Manuel Costa and Antony Rowstron
Microsoft Research, 7 J J Thomson Avenue, Cambridge, CB3 0FB, UK
Abstract
Structured peer-to-peer (p2p) overlay networks provide
a useful substrate for building distributed applications.
They map object keys to overlay nodes and offer a primi-
tive to send a message to the node responsible for a key.
They can implement, for example, distributed hash tables
and multicast trees. However, there are concerns about the
performance and dependability of these overlays in realis-
tic environments. Several studies have shown that current
p2p environments have high churn rates: nodes join and
leave the overlay continuously. This paper presents tech-
niques that continuously detect faults and repair the over-
lay to achieve high dependability and good performance in
realistic environments. The techniques are evaluated using
large-scale network simulation experiments with fault injec-
tion guided by real traces of node arrivals and departures.
The results show that previous concerns are unfounded; our
techniques can achieve dependable routing in realistic en-
vironments with an average delay stretch below two and a
maintenance overhead of less than half a message per sec-
ond per node.
1. Introduction
Structured peer-to-peer overlays, such as CAN [18],
Chord [23], Pastry [20] and Tapestry [11], provide a use-
ful substrate for building distributed applications. They map
object keys to overlay nodes and offer a lookup primitive
to send a message to the node responsible for a key. Over-
lay nodes maintain routing state to route messages towards
the nodes responsible for their destination keys. Struc-
tured overlays have been used to implement, for example,
archival stores [8, 21], ﬁle systems [16], Web caches [12],
and application-level multicast systems [26, 7, 6].
However, there are concerns about the performance and
dependability of these overlays in realistic environments.
Several studies [22, 1] have shown that current p2p envi-
ronments have high churn rates: nodes join and leave the
overlay continuously and do not stay in the overlay for long.
This paper presents MSPastry, which is a new implementa-
tion of Pastry [20] that includes techniques to achieve high
dependability and good performance in realistic environ-
ments.
MSPastry is dependable because it ensures that lookup
messages are delivered to the node responsible for the des-
tination key with high probability even with high churn and
link loss rates. It prevents delivery of lookup messages to
the wrong nodes by using a new algorithm to manage the
routing state and it ensures that messages eventually get de-
livered with a combination of active failure detection probes
and per-hop retransmissions.
MSPastry also performs well and its performance de-
grades gracefully as the node failure rate and the link loss
rate increase. It achieves low delay by using Proximity-
aware routing [5] and the combination of active probing and
aggressive per-hop retransmissions that exploit redundant
overlay routes. It achieves low control trafﬁc bandwidth by
self-tuning the active probing period to achieve a target de-
lay with minimum overhead and by exploiting the overlay
structure to divide up the responsibility to detect failures.
We present the techniques in the context of MSPastry for
concreteness but they could be applied to other overlays.
The paper presents a detailed experimental evaluation of
MSPastry using large scale simulations. We use fault injec-
tion guided by real traces of node arrivals and departures in
deployed peer-to-peer systems to evaluate the dependabil-
ity and performance of MSPastry in realistic environments.
We also explore the performance of MSPastry when varying
environmental parameters like network topology, node ses-
sion times, link loss rates, and amount of application trafﬁc.
The paper also presents simulation experiments to evaluate
the impact of individual techniques and of varying impor-
tant algorithm parameters. We validate the simulation re-
sults with measurements from a deployment of the Squirrel
Web cache [12], which runs on top of MSPastry, in our lab.
The results show that concerns about the performance
and dependability of structured overlays are no longer war-
ranted; our techniques can achieve dependable routing in
realistic environments with an average delay that is within a
factor of two of the minimum and a maintenance overhead
of less than half a message per second per node.
The rest of the paper is organised as follows. Section 2
provides an overview of structured overlays. Sections 3
and 4 discuss the techniques used to achieve dependabil-
ity and performance in MSPastry. The experiments are de-
scribed in Section 5 and we conclude in Section 6.
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:47:52 UTC from IEEE Xplore.  Restrictions apply. 
203231’s leaf set
203231
203231’s routing table
0*
20*
1*
21*
2*
22*
3*
23*
200*
201*
202*
203*
2030*
2031*
2032*
2033*
323310
323211
322021
313221
lookup(m,323310)
Figure 1: Routing table and leaf set of a node with nodeId
203231, and route taken by a lookup message sent by that
node to key 323310. The * in the routing table represents an
arbitrary sufﬁx.
2. Overview of structured overlays
Structured overlays map keys to overlay nodes. Nodes
are assigned nodeIds selected from a large identiﬁer space
and application objects are identiﬁed by keys selected from
the same space. A key is mapped to the node whose nodeId
is closest to the key in the identiﬁer space. This node is
called the key’s root. For example, Pastry selects nodeIds
and keys uniformly at random from the set of 128-bit un-
signed integers and it maps a key k to the active node whose
identiﬁer is numerically closest to k modulo 2128. Nodes are
initially inactive and they become active after they join the
overlay. They become inactive when they leave the overlay
either voluntarily or because of a failure.
The mapping is exposed through a primitive that al-
lows users to send a lookup message to a destination key.
These messages are routed through the overlay to the key’s
root node. To route lookups efﬁciently, overlay nodes main-
tain some routing state with the identiﬁers and network ad-
dresses of other nodes in the overlay. For example, each Pas-
try node maintains a routing table and a leaf set.
Pastry’s routing algorithm interprets nodeIds and keys as
unsigned integers in base 2b (where b is a parameter with
typical value 4). The routing table is a matrix with 128/b
rows and 2b columns (as in [17, 11]). The entry in row r and
column c of the routing table contains a nodeId that shares
the ﬁrst r digits with the local node’s nodeId, and has the
(r + 1)th digit equal to c. If there is no such nodeId, the
entry is null. The uniform random distribution of nodeIds
ensures that only log2bN rows have non-empty entries on
average (where N is the number of nodes in the overlay).
The leaf set of a Pastry node contains the l/2 closest
nodeIds to the left of the node’s nodeId and the l/2 clos-
est nodeIds to the right (where l is a parameter with typical
value 32). The leaf sets connect the overlay nodes in a ring.
Figure 1 shows the routing table and leaf set of a node with
nodeId 203231 in a Pastry overlay with b = 2 and l = 4.
Pastry routes a lookup message by forwarding it to nodes
that match progressively longer preﬁxes with the destina-
tion key. Figure 1 shows the route followed by an exam-
ple lookup message sent by node 203231 to a key 323310.
Node 203231 searches the ﬁrst level of its routing table for
a nodeId starting with digit 3, which is the ﬁrst digit in the
key. It ﬁnds node 313221 and forwards the message to this
node. Node 313221 searches the second level of its routing
table for a nodeId starting with 32. This is repeated until the
root node is reached.
2b
Routing takes approximately 2b−1
log2bN overlay hops
on average [5] because of the random uniform distribution
of nodeIds. But it is important for overlay routing to exploit
proximity in the underlying network. Otherwise, each over-
lay hop has an expected delay equal to the average delay
between a pair of random overlay nodes, which stretches
route delay by a factor equal to the number of overlay hops.
Pastry uses proximity neighbor selection (PNS) [17, 11,
20, 5, 10] to achieve low delay routes. PNS picks the clos-
est node in the underlying network to ﬁll a routing table slot
from among those whose nodeIds have the required preﬁx.
Pastry implements PNS using constrained gossiping as
described in [5] and uses round-trip delay as the proximity
metric. A joining node i starts by obtaining a random over-
lay node j. It uses this random node and the nearest neigh-
bor algorithm in [4, 5] to locate a nearby overlay node. The
overlay node returned by the nearest neighbor algorithm is
used to seed the join process. Node i sends a join request
to the seed node and this node routes the message to i’s
nodeId. The nodes along the overlay route add routing table
rows to the message; node i obtains the rth row of its rout-
ing table from the node encountered along the route whose
nodeId matches i’s in the ﬁrst r − 1 digits.
It is also important to update other node’s routing tables
to ensure that they remain near perfect after nodes join the
overlay. After initializing its routing table, i sends the rth
row of the table to each node in that row. Each node that re-
ceives a row sends probes to measure the distance to nodes
in the row that are not in its table and it replaces old en-
tries by new ones if they are closer. This serves both to an-
nounce i’s presence and to gossip information about nodes
that joined previously.
Pastry also has a periodic routing table maintenance pro-
tocol to repair failed entries and prevent slow deterioration
of the locality properties over time. This protocol imple-
ments a form of constrained gossiping. Each node i asks a
node in each row of the routing table for the corresponding
row in its routing table. Then, it sends probes to measure the
distance to nodes in the received row that are not in its table
and replaces old entries by new ones if they are closer. This
is repeated periodically, for example, every 20 minutes in
the current implementation. Additionally, Pastry has a pas-
sive routing table repair protocol: when a routing table slot
is found empty during routing, the next hop node is asked
to return any entry it may have for that slot.
3. Routing dependability
Overlay routing is dependable if a lookup message sent
to a key is delivered to the key’s root node. To achieve de-
pendability, it is necessary for routing to provide a con-
sistent mapping from keys to overlay nodes. Additionally,
messages may be lost when they are routed through the
overlay because of link losses or node failures. Therefore,
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:47:52 UTC from IEEE Xplore.  Restrictions apply. 
it is also necessary to detect and recover from failures to
achieve reliable routing. We developed MSPastry, which is
a new version of Pastry that achieves consistent and reli-
able routing. We focus the presentation on MSPastry for
concreteness but the techniques that we describe could be
applied to other overlays.
3.1. Consistent routing
We say that routing is consistent if overlay nodes never
deliver a lookup message when they are not the current
root node for the message’s destination key. We make the
usual distinction between receiving a message (at the over-
lay level) and delivering a message (at the application level).
Consistent routing is important. Inconsistencies can lead
to degraded application performance and user experience.
For example, Ivy [16] implements a mutable ﬁle system us-
ing a structured overlay. Inconsistent routing can result in an
inconsistent ﬁle system; users may fail to ﬁnd existing ﬁles
or they may complete conﬂicting operations. Ivy provides
conﬂict detection mechanisms but repairing conﬂicts re-
quires user input. Other applications have similar problems.
CFS [8] and Past [21] provide archival ﬁle storage on top of
a structured overlay. Inconsistent routing may prevent users
from ﬁnding their archived ﬁles or require additional data
transfer to move incorrectly stored ﬁles to the correct over-
lay nodes. Bayeux [26], Scribe [7], and SplitStream [6] are
application-level multicast systems using structured over-
lays. Routing inconsistencies can cause group members to
lose multicast messages in these systems. Therefore, it is
important to minimize routing inconsistencies.
MSPastry guarantees consistent routing with crash fail-
ures assuming that each active node has at least one non-
faulty node in each side of its leaf set and that non-faulty
nodes are never considered faulty. Additionally, MSPastry
includes a leaf set repair mechanism that restores consis-
tency quickly after a violation. This is conﬁrmed by our ex-
perimental results; routing was always consistent in all our
experiments without link losses even with extremely high
churn rates. We observed a small probability of inconsisten-
cies with high link loss rates because the second assumption
was violated but MSPastry was able to recover quickly.
We do not know of any other structured overlay im-
plementation that provides consistency guarantees for rout-
ing. They provide best-effort consistency that can be im-
proved at the expense of higher overhead. For example, a
recent study [19] shows that existing implementations have
a signiﬁcant number of inconsistent deliveries in scenarios
where MSPastry should have none while incurring a higher
overhead than MSPastry.
Figure 2 describes a simpliﬁed version of MSPastry’s
consistent routing algorithm. The algorithm maintains the
leaf sets consistent to ensure consistent routing. The state in
the routing table is important for performance but it is not
necessary to ensure consistency. Therefore, we omit details
on the maintenance of routing tables. The ﬁgure shows the
code executed by a node with identiﬁer i. Actions (in capi-
tal letters) are executed in response to events like receiving
a message. The auxiliary functions (in italics) are invoked
from action code. For simplicity, we assume a send function
that takes a node identiﬁer instead of a network address.
Each node i has a routing table Ri and a leaf set Li,
as described in the previous section. Initially, they contain
only i. The boolean variable activei records whether i is
active. The variables probingi and probe-retriesi keep track
of nodes being probed by i and the number of probe retries
sent to each node, and failedi is a set with nodes that i be-
lieves to be faulty. Initially, probingi and failedi are empty,
and activei is false.
The routei function implements the Pastry routing algo-
rithm described earlier. If the destination key, k, is between
the leftmost and rightmost identiﬁers in the leaf set, routei
picks the leaf set element closest to k as the next hop. Other-
wise, it computes the length r of the preﬁx match between
k and i, and sets the next hop to the entry in row r and
column c of the routing table, where c is the r-th digit of k.
In the unlikely case that this entry is null, the next hop is set
to a nodeId in the routing table or leaf set that is closer to
k than i and shares a preﬁx with k of length at least r. The
last case allows MSPastry to route around missing entries in
the routing table for fault tolerance. If the next hop chosen
by routei is equal to i or null, the message has reached its
destination and the function receive-rooti is invoked.
The routei function is used to route both lookups and
join requests as in the original Pastry [20] except that
receive-rooti does not deliver messages if i is not active.
This is important to ensure consistent routing. In our imple-
mentation, i buffers messages and invokes routei on them
after it becomes active. We discard these messages in Fig-
ure 2 for simplicity.
Joins proceed as described in Section 2 but the join-
ing node does not become active when it receives the
JOIN-REPLY. Instead, it ﬁrst probes all the elements in its
leaf set to ensure consistency. An LS-PROBE sent by a node
j contains a copy of j’s L and failed. When i receives a leaf
set probe from j, it adds j to its leaf set and routing table (if
appropriate), sends probes for the nodes in its leaf set that
are in failed, and removes these nodes from its leaf set. It
probes the removed nodes to conﬁrm that they are faulty.
This is important to recover from false positives. Then, i
creates a clone L
of its leaf set and adds nodes in L that
that are
it does not think are faulty to L
not in Li are candidates for inclusion in i’s leaf set; they
are probed before inclusion to ensure consistency. Finally, i
sends an LS-PROBE-REPLY back to j.
. The nodes in L
(cid:1)
(cid:1)
(cid:1)
LS-PROBE-REPLY messages contain the same infor-
mation as LS-PROBE messages and they are handled in
the same way but no reply is sent back to the sender.
After processing a probe reply from j, a node invokes
done-probingi(j). This function removes j from the set of
nodes being probed. If there are no outstanding probes and
the leaf set is complete, the function marks the node active
and failedi is cleared.
Nodes are marked faulty in PROBE-TIMEOUTi. If i
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:47:52 UTC from IEEE Xplore.  Restrictions apply. 
JOINi(seed)
send (cid:1)JOIN-REQUEST, {}, i(cid:2) to seed
RECEIVEi((cid:1)JOIN-REQUEST, R, j(cid:2))
R.add(Ri)
routei((cid:1)JOIN-REQUEST, R, j(cid:2), j)
receive-rooti((cid:1)JOIN-REQUEST, R, j(cid:2), j)
send (cid:1)JOIN-REPLY, R, Li(cid:2) to j
if (activei)
RECEIVEi((cid:1)JOIN-REPLY, R, L(cid:2))
Ri.add(R ∪ L); Li.add(L)
for each j ∈ Li do { probe(j) }
probei(j)
if (j (cid:5)∈ probingi ∧ j (cid:5)∈ failedi)
send (cid:1)LS-PROBE, i, L, failedi(cid:2) to j
probingi := probingi ∪ {j}; probe-retriesi(j) := 0
RECEIVEi((cid:1)LS-PROBE | LS-PROBE-REPLY, j, L, failed(cid:2))
failedi := failedi − {j}
Li.add({j}); Ri.add({j})
for each n ∈ Li ∩ failed do { probei(n) }
Li.remove(failed)
(cid:1) := Li; L
(cid:1)
L
for each n ∈ L
if (message is LS-PROBE)
.add(L − failedi)
(cid:1) − Li do { probei(n) }
send (cid:1)LS-PROBE-REPLY, i, Li, failedi(cid:2) to j
done-probingi(j)
else
SUSPECT-FAULTYi(j)
probei(j)
LOOKUPi(m, k) | RECEIVEi((cid:1)LOOKUP, m, k(cid:2))
routei((cid:1)LOOKUP, m, k(cid:2), k)
receive-rooti((cid:1)LOOKUP, m, k(cid:2), k)
if (activei)
deliveri(m, k)
done-probingi(j)
probingi := probingi − {j}
if (probingi = {})
if (Li.complete)
else
activei := true; failed := {}
if (|Li.lef t| < l/2)
probe(Li.leftmost)
if (|Li.right| < l/2)
probe(Li.rightmost)
PROBE-TIMEOUTi(j)
if (probe-retriesi(j) < max-probe-retries)
send (cid:1)LS-PROBE, i, Li, failedi(cid:2) to j
probe-retriesi(j) := probe-retriesi(j) + 1
Li.remove(j); Ri.remove(j)
failedi := failedi ∪ {j}
done-probingi(j)