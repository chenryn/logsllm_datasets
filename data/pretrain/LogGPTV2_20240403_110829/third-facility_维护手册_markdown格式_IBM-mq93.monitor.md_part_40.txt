Overall
The average CPU per request was 88 microseconds of CPU and took 205 microseconds
The adapters process IBM MQ requests. Some of these requests might wait, for example, for log I/O
during a commit, so the average Elapsed Time per request has little meaning.
The CPU time (qctcptm) value includes all CPU consumed by the task, both processing requests and
between processing requests. The elapsed time (qcteltm) value only includes time while processing
requests. This means that the CPU time may be greater than the elapsed time.
346 Monitoring and Performance for IBM MQ
When an IBM MQ request is made the first free adapter task is used.
• If there is at least one adapter that has been little used (less than 1%) busy, you have enough adapters.
• If at least one adapter was not used, you have enough adapters defined.
• If all the adapters were used, you might need to allocate more adapters.
• If all of the adapters were used, and they were all busy for most of the interval, you need to allocate
more adapters.
You can use the ALTER QMGR CHIADAPS() command to change the number of adapters used. Any
changes come into effect the next time the channel initiator is started.
Attention: If there are too many adapters acting on a small set of queues, you might get
contention within the queue manager.
Related reference
ALTER QMGR
Domain Name Server (DNS) task
This topic contains example data for the DNS tasks statistics, and information about how to interpret the
data.
The format of the DNS task block is described in structure qct_dns in the C
programming language header file thlqual.SCSQC370(CSQDSMFC), and in assembler macro
thlqual.SCSQMACS(CSQDQCTA).
Example data
Task, Type, Requests, Busy %, CPU used, CPU %, "avg CPU", "avg ET", longest,
date, time
, , , , Seconds, , uSeconds, uSeconds, uSeconds, ,
0, DNS, 14002, 0.0, 0.122578, 0.0, 9, 11, 463, 2014/03/18,
12:56:33.987671
Summ, DNS, 14002, 0.0, 0.122578, 0.0, 9, 11, 463, 2014/03/18,
12:56:33.987671
The channel initiator uses a single DNS task. The example shows that the task processed 14002 requests
and on average the request used 9 microseconds of CPU and took 11 microseconds of elapsed time.
The longest DNS request took 463 microseconds elapsed time, and this occurred at 12:56:33 local time.
The fields are calculated from:
• Duration: qwhs.qwhsdurn
• Requests : qctreqn
• Busy %: qcteltm and duration
• CPU used: qctcptm
• CPU %: qctcptm and duration
• Average CPU: qctcptm and qctreqn
• Average ET: qcteltm and qctreqn
• Longest: qctlgdu
• Longest at: qctlgtm
The DNS task can go out of your enterprise to look up the IP address associated with a name. If the
average Elapsed time is significantly more than the average CPU time used, you might have some long
requests.
If the value of the longest request time is unacceptable you should work with your network team
to investigate why you are having long requests. It might be that you have an invalid name in your
connections.
IBM MQ Monitoring and performance 347
If the DNS task is busy for 25% of the duration, consider investigating the cause further.
The CPU time (qctcptm) value includes all CPU consumed by the task, both processing requests and
between processing requests. The elapsed time (qcteltm) value only includes time while processing
requests. This means that the CPU time might be greater than the elapsed time.
Note: There are requests to the DNS task that are not DNS lookups, so you might have the number of
requests being greater than zero - but no longest request information.
SSL tasks
This topic contains example data for the SSL tasks statistics, and information about how to interpret the
data.
The format of the SSL task block is described in structure qct_ssl in the C
programming language header file thlqual.SCSQC370(CSQDSMFC), and in assembler macro
thlqual.SCSQMACS(CSQDQCTA).
Example data
Task, Type, Requests, Busy %, CPU used, CPU %, "avg CPU", "avg ET", longest,
date, time
, , , , Seconds, , uSeconds, uSeconds, uSeconds, ,
0, SSL, 3112, 1.2, 0.248538, 0.3, 80, 362, 8864, 2014/03/18,
12:46:40.237697
1, SSL, 3070, 1.2, 0.245433, 0.3, 80, 359, 4714, 2014/03/18,
12:46:18.938022
2, SSL, 3170, 1.2, 0.255557, 0.3, 81, 362, 7273, 2014/03/18,
12:46:35.358145
3, SSL, 3060, 1.2, 0.246542, 0.3, 81, 365, 13164, 2014/03/18,
12:46:44.514045
4, SSL, 3120, 1.3, 0.251927, 0.3, 81, 373, 22438, 2014/03/18,
12:46:22.134123
Summ, SSL, 15532, 1.2, 1.247998, 0.3, 80, 364, 22438, 2014/03/18,
12:46:22.134123
This example data shows that the average request took 364 microseconds. The longest request was for
SSL task 4, took 22,438 microseconds, and occurred at 12:46:22.134123 local time.
The fields are calculated from:
• Duration: qwhs.qwhsdurn
• Requests : qctreqn
• Busy %: qcteltm and duration
• CPU used: qctcptm
• CPU %: qctcptm and duration
• Average CPU: qctcptm and qctreqn
• Average ET: qcteltm and qctreqn
• Longest: qctlsdu longest at: qctlstm
A running channel is associated with an SSL task, in a similar way that a channel is associated with a
dispatcher. The SSL tasks can use the cryptographic coprocessors available to the LPAR. So, the elapsed
time can include time spent on a coprocessor. You should monitor the average elapsed time throughout
the day. If this time increases significantly during peak periods you should work with your z/OS systems
programmers, as your coprocessors might be over-used.
If the SSL tasks are busy for a significant proportion of the interval, increasing the number of SSL tasks
might help. If the SSL tasks are waiting for external resources such as a coprocessor, increasing the
number of SSL tasks has little effect.
You can use the ALTER QMGR SSLTASKS() command to change the number of SSL tasks used. Any
changes come into effect the next time the channel initiator is started.
348 Monitoring and Performance for IBM MQ
The CPU time (qctcptm) value includes all CPU consumed by the task, both processing requests and
between processing requests. The elapsed time (qcteltm) value only includes time while processing
requests. This means that the CPU time might be greater than the elapsed time.
Related reference
ALTER QMGR
Queue data records
Use this topic as a reference for queue (SMF type 115, subtype 216) data records.
The information in this topic is for IBM MQ 9.3.0. For IBM MQ 9.3.1, use the information in “Queue data
records Version 9.3.1 release” on page 350.
The format of the queue statistics data record is described in assembler macro
thlqual.SCSQMACS(CSQDQQST).
The queue statistics record contains information on the performance of selected queues including:
• Queue name (qqstqnam)
• Whether the queue is private or shared (qqstdisp bit on means queue is shared)
• Page set ID where the queue is located, if allocated and a private queue (qqstpsid)
• Bufferpool ID used by the queue, if allocated and a private queue (qqstbpid)
• Queue sharing group (QSG) name, if it is a shared queue (qqstqsgn)
• Coupling facility (CF) structure name, if it is a shared queue (qqstcfst)
• Queue depth at the time when the SMF data was captured (qqstdpth)
Notes:
• When the record is for a private queue, the qqstqsgn and qqstcfst fields are blank.
• When the record is for a shared queue, or the record is for a private queue that does not have a page set
and bufferpool assigned to it, the values of qqstpsid and qqstbpid are -1 (x’FFFF’).
All information provided in the queue statistics record are the correct values at the time of the SMF data
collection. For example, if during the interval a queue’s information is changed and it moves to a new page
set, the new page set ID is provided in the record.
As well as the entries in the preceding list, there is a flag in the queue statistics record that indicates
whether the record contains full or partial data (qqstpart). When this flag is set there was an issue
accessing the information on the queue, for example if there is a CF structure failure.
In a partial record the accuracy of qqstdpth, qqstmage, and qqstuncm cannot be guaranteed.
Therefore, the field qqstdpth is populated with x’00’.
When this flag is set there was an issue accessing the queues information. For example, if there is
a CF structure failure the record contains only the correct information in the qqstqnam, qqstdisp,
qqstpsid, qqstbpid, qqstqsgn, and qqstcfst fields; the remaining fields are populated with x’00’
for numeric fields and x’40’ for non-numeric fields.
Example data
Full records
Queue , Disposition, Pageset ID, Bufferpool ID, QSG , CF Struct , Current Depth,
Record Type
Example.Queue.Private, Private , 2 , 4 , , , 67 ,
FULL
Example.Queue.Shared , Shared , -1 , -1 , QSG1, CFSTRUCTURE1, 12 ,
FULL
The example data shows two full queue records, one for a private queue and one for a shared queue.
IBM MQ Monitoring and performance 349
In the private queue record (Example.Queue.Private) the queue can be seen using page set 2 and
bufferpool 4. You can use this information in conjunction with page set and bufferpool statistics to give
a better view of what is happening on the system. As the queue is private, the QSG name and the CF
Structure name are blank. The current depth of the queue is 67 and the record is a full record.
In the shared queue record (Example.Queue.Shared) the queue exists in the QSG ‘QSG1’ and is located
in ‘CFSTRUCTURE1’. As the queue is shared the page set ID and bufferpool ID are -1. The queue has a
current depth of 12 and the record is a full record.
Partial records
Queue , Disposition, Pageset ID, Bufferpool ID, QSG , CF Struct , Current Depth,
Record Type
Example.Queue.Shared , Shared , -1 , -1 , QSG1, CFSTRUCTURE1, 0 ,
PARTIAL
The example data shows a partial record for a shared queue. The information contained in the record for
the disposition, QSG and CF Structure are all valid. The current depth of the queue is displayed as ‘0’
as there was an issue obtaining the correct queue depth. Therefore, the record is marked as PARTIAL to
indicate the depth might not be correct.
Note that when formatting the data with IBM MQ SupportPac MP1B the potentially erroneous current
depth is not formatted.
Queue data records Version 9.3.1 release
IBM MQ 9.3.1 enhances the SMF queue statistics records introduced at IBM MQ 9.3.0. The improved
statistics include all the DISPLAY QSTATUS information in the record, making it easier for you to monitor
usage and performance of your queue over time.
For IBM MQ 9.3.0 use the information in “Queue data records” on page 349.
The format of the queue statistics data record is described in assembler macro
thlqual.SCSQMACS(CSQDQQST).
The queue statistics record contains information on the performance of selected queues including:
• Queue name (qqstqnam)
• Whether the queue is private or shared (qqstdisp bit on means queue is shared)
• Page set ID where the queue is located, if allocated and a private queue (qqstpsid)
• Bufferpool ID used by the queue, if allocated and a private queue (qqstbpid)
• Queue sharing group (QSG) name, if it is a shared queue (qqstqsgn)
• Coupling facility (CF) structure name, if it is a shared queue (qqstcfst)
• Queue depth at the time when the SMF data was captured (qqstdpth)
• Number of handles that are currently open for output for the queue at the time when the SMF data was
captured. For shared queues, the number returned applies only to the queue manager generating the
record. The number is not the total for all the queue managers in the queue sharing group. (qqstopct)
• Number of handles that are currently open for input for the queue at the time when the SMF data was
captured. For shared queues, the number returned applies only to the queue manager generating the
record. The number is not the total for all the queue managers in the queue sharing group. (qqstipct)
• Interval, in microseconds, between messages being put on the queue and then being destructively
read. Value based on the last few messages processed. For shared queues, the values shown are for
measurements collected on this queue manager only (qqstqtst)
• Interval, in microseconds, between messages being put on the queue and then being destructively read.
Value based on a larger sample of the recently processed messages. For shared queues, the values
shown are for measurements collected on this queue manager only (qqstqtlt)
350 Monitoring and Performance for IBM MQ
• Time, in store clock format, at which the last message was put to the queue since the queue manager
started. For shared queues, the value shown is for measurements collected on this queue manager only
(qqstlput)
• Time, in store clock format, at which the last message was retrieved from the queue since the queue
manager started. A message being browsed does not count as a message being retrieved. For shared
queues, the value shown is for measurements collected on this queue manager only (qqstlget)
• Age, in seconds, of the oldest message on the queue (qqstmage)
• Indicates whether there are any uncommitted changes (puts and gets) pending for the queue
(qqstuncm)
Notes:
• When the record is for a private queue, the qqstqsgn and qqstcfst fields are blank.
• When the record is for a shared queue, or the record is for a private queue that does not have a page set
and bufferpool assigned to it, the values of qqstpsid and qqstbpid are -1 (x’FFFF’).
All information provided in the queue statistics record are the correct values at the time of the SMF data
collection. For example, if during the interval a queue’s information is changed and it moves to a new page
set, the new page set ID is provided in the record.
Some of the fields in the record correspond to fields in the output of a DISPLAY QSTATUS command.
These fields are:
• qqstopct (OPPROCS)
• qqstipct (IPPROCS)
• qqstqtst (QTIME)
• qqstqtlt (QTIME)
• qqstlput (LPUTDATE, LPUTTIME)
• qqstlget (LGETDATE, LGETTIME)
• qqstmage (MSGAGE)
As well as the entries in the preceding list, there is a flag in the queue statistics record that indicates
whether the record contains full or partial data (qqstpart). When this flag is set there was an issue
accessing the information on the queue, for example if there is a CF structure failure.
In a shared queue partial record the accuracy of qqstdpth, qqstmage, and qqstuncm cannot be
guaranteed. Therefore, the fields qqstdpth and qqstmage are populated with x’00’ and the qqstuncm
flag is not set.
In a private queue partial record the accuracy of qqstmage cannot be guaranteed, therefore the field is
populated with x’00’.
Example data
Full records
Queue Disp PSID BPID QSG CF
Dpth OPPROC IPPROC QTIMES QTIMEL LPUT
LGET MSGAGE UNCOM RecType
Example.Queue.Private Private 2 4
67 2 1 17567 17453 DBB3E8D820B60605
DBB3E8D820B60605 156 YES FULL
Example.Queue.Shared Shared -1 -1 QSG1 CFSTRUCTURE1
12 1 3 10569 9875 DBB3E8D820B60605
DBB3E8DCEC8C0114 14 NO FULL
The example data shows two full queue records, one for a private queue and one for a shared queue.
In the private queue record (Example.Queue.Private) the queue can be seen using page set 2 and
bufferpool 4. You can use this information in conjunction with page set and bufferpool statistics to give
IBM MQ Monitoring and performance 351
a better view of what is happening on the system. As the queue is private, the QSG name and the CF
Structure name are blank. The current depth of the queue is 67, two handles are currently open for output
and one is currently open for input. The short-term value for QTIME is 17567 microseconds and the
longer-term value is 17453 microseconds. The last put time and last get time, in store clock format, are
both DBB3E8D820B60605. The oldest message on the queue has currently been there for 156 seconds.
There are uncommitted changes currently pending for this queue and the record is a full record.
In the shared queue record (Example.Queue.Shared) the queue exists in the QSG ‘QSG1’ and is located
in ‘CFSTRUCTURE1’. As the queue is shared the page set ID and bufferpool ID are -1. The queue has a
current depth of 12, one handle is currently open for output and three are currently open for input. The
short-term value for QTIME is 10569 microseconds and the longer-term value is 9875 microseconds. The
last put time, in store clock format, is DBB3E8D820B60605 and the last get time is DBB3E8DCEC8C0114.
The oldest message on the queue has currently been there for 14 seconds. There are no uncommitted
changes currently pending for this queue and the record is a full record.
Partial records
Queue Disp
PSID BPID QSG CF
Dpth OPPROC IPPROC
QTIMES QTIMEL LPUT
LGET MSGAGE UNCOM RecType
Example.Queue.Shared Shared
-1 -1 QSG1
CFSTRUCTURE1 0
1 1 22569
25896 DBB3F45BDA390805
DBB3F4B9828DDC05 0
NO PARTIAL
The example data shows a partial record for a shared queue. The information contained in the record
for the disposition, QSG and CF Structure are all valid. The current depth of the queue and the message
age are displayed as ‘0’ and uncommitted is marked as NO, as there was an issue obtaining the correct
information from the coupling facility. Therefore, the record is marked as PARTIAL to indicate the depth
might not be correct.
Note that when formatting the data with IBM MQ SupportPac MP1B, QSTAT DD card, the potentially
erroneous current depth, message age, and uncommitted information message are not formatted.
Queue data records Version 9.3.3 release
IBM MQ 9.3.3 enhances the SMF queue statistics records introduced at IBM MQ 9.3.0 and enhanced
in IBM MQ 9.3.1. The latest improvements to the queue statistics give insight into what happened with
your queue during the last SMF interval. This includes information on message flow, expiry, high and low
watermarks and more.
For IBM MQ 9.3.0 use the information in “Queue data records” on page 349.
For IBM MQ 9.3.1 use the information in “Queue data records Version 9.3.1 release” on page 350.
The format of the queue statistics data record is described in assembler macro
thlqual.SCSQMACS(CSQDQQST).
352 Monitoring and Performance for IBM MQ
The queue statistics record contains information on the performance of selected queues and includes the
following fields:
QQSTID – Control block identifier
The identifier for the queue statistics control block; is always x‘D80F’.
QQSTLL – Length of control block
The length of a queue statistics record.
QQSTEYEC – Control block eyecatcher
The eyecatcher used to make identification of the control block easier; is always ‘QQST’
QQSTQNAM – Queue name
The name of the queue.
QQSTFLAG
An array of bits containing the following information about the queue:
QQSTDISP – Queue disposition
This bit identifies whether the queue is of private or shared disposition. If the bit is on, then it is a
shared queue.
QQSTPART – Partial record identifier
This bit identifies whether the record is a full or partial record. If the bit is on, then it is a partial
record. When this flag is set there was an issue accessing the information on the queue, for
example if there is a CF structure failure.
In a shared queue partial record, the accuracy of qqstdpth, qqstmage, and qqstuncm cannot
be guaranteed. Therefore, the fields qqstdpth and qqstmage are populated with x’00’ and the
qqstuncm flag is not set.
In a private queue partial record, the accuracy of qqstmage cannot be guaranteed, therefore the
field is populated with x’00’.
QQSTUNCM – Uncommitted changes pending
This bit indicates whether there are any uncommitted changes (puts and gets) pending for the
queue. If the bit is on, there are uncommitted changes.
This is checked and set at the time of the SMF data collection and provides the same result as a
DISPLAY QSTATUS command would if run at the time the SMF record was generated.
If the queue is a shared queue and QQSTPART is set, this bit is always off as there might have
been an issue obtaining the correct value.
QQSTPSID – Page set ID
The page set ID where the queue is located, if allocated and a private queue. If the queue is a shared
queue, or a private queue that does not have a page set assigned to it, this field is set to -1 (x’FFFF’).
This value is correct at the time the SMF record was generated. It is possible that the page set
changed during the SMF interval, in which case, the value reflected in the next SMF record will be the
new page set.
QQSTBPID – Buffer pool ID
The buffer pool ID used by the queue, if allocated and a private queue. If the queue is a shared queue,
or a private queue that does not have a buffer pool assigned to it, this field is set to -1 (x’FFFF’).
This value is correct at the time the SMF record was generated. It is possible that the buffer pool
changed during the SMF interval. In this case, the value reflected in the SMF record is the new buffer
pool.
QQSTQSGN – QSG name
The Queue Sharing Group name that the queue manager is a member of, if it is a shared queue. If the
queue is a private queue this field is blank.
QQSTCFST – CF Structure name
The coupling facility (CF) structure name the queue uses if it is a shared queue. If the queue is a
private queue this field is blank.
QQSTDPTH – Current depth
The depth of the queue at the time the SMF data was captured.
IBM MQ Monitoring and performance 353
If the queue is a shared queue and QQSTPART is set, this value is always zero as there might have
been an issue obtaining the correct value.
QQSTOPCT – Current open for output count
The number of handles that are currently open for output for the queue at the time when the SMF data
was captured. For shared queues, the number returned applies only to the queue manager generating
the record. The number is not the total for all the queue managers in the queue sharing group.
This is the same as OPPROCS from a DISPLAY QSTATUS command.
This is checked and set at the time of the SMF data collection and provides the same result as a
DISPLAY QSTATUS command would, if run at the time the SMF record was generated.
QQSTIPCT – Current open for input count
The number of handles that are currently open for input for the queue at the time when the SMF data
was captured. For shared queues, the number returned applies only to the queue manager generating
the record. The number is not the total for all the queue managers in the queue sharing group.
This is the same as IPPROCS from a DISPLAY QSTATUS command.
This is checked and set at the time of the SMF data collection and provides the same result as a
DISPLAY QSTATUS command would, if run at the time the SMF record was generated.
QQSTMAGE – Oldest message age
The age, in seconds, of the oldest message on the queue.
This is checked and set at the time of the SMF data collection and provides the same result as a
DISPLAY QSTATUS command would, if run at the time the SMF record was generated.
If QQSTPART is set, this value is always zero as there might have been an issue obtaining the correct