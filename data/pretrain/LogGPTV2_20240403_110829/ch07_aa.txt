无 SRE 的 SRE 模式：Spotify 案例研究
Daniel Prata Almeida, Saunak Jai Chakrabarti, Jeff Eklund, David Poblador i Garcia, Niklas Gustavsson, Mattias Jansson, Drew Michel, Lynn Root, Johannes Russek, Spotify
          许多人对 Spotify 实际上没有 SRE 组织感到惊讶。我们不但没有中央 SRE 团队，甚至没有全职 SRE 团队，但是因为我们在所有工作中都应用 SRE 原则，我们仍然可以做到规模化运维。 鉴于这种不寻常的设置，其他公司已联系我们以了解我们的模型（“Ops-in-Squads”）如何工作。 有些人采用了类似的模型。 让我们告诉你一些有关我们如何使用此模型的信息，以便你了解类似的想法是否有用。首先，我们需要分享一些关于我们的工程文化的背景：在Spotify，我们组织成小型的自主团队。其理念是，每个团队都拥有特定的功能或用户体验。实际上，这意味着单个工程团队由一组跨职能的开发人员组成，从设计器到后端开发人员到数据科学家，它们共同处理各种 Spotify 客户端、后端服务和数据管道。
为了支持我们的功能团队，我们创建了以基础设施为中心的组。这些基础结构团队也反过来变得小，跨功能，并自主提供自助服务基础设施产品。其中一些示例是持续集成、部署、监视、软件框架和指南。Spotify 的绝大多数 SRE 在这些团队中工作，他们利用他们的技能和经验，使生产环境可靠、可扩展且易于与我们的功能团队合作。
然而，SRE 的一些工作是贯穿各领域的，只能从中心角度加以解决。这包括由大型故障引起的级联中断、部署最佳实践的教学、事件管理或事后分析。我们的 SRE 组织在整个公司的工作组中，但这些工作组并非完全由具有 SRE 头衔的工程师组成。例如，我们集中轮值团队（内部称为事件轮值经理或 IMOC）的工程师中，只有一半是 SRE；其余的是工程师，他们扮演着不同的角色。我们为什么要采用这样的组织结构呢？这样做有什么好处，权衡又是什么？在以下各节中，我们将讨论 Spotify 如何构建其 SRE 组织，从 Stockholm 公寓中的服务器即可满足需求的小型初创公司，直到发展至如今的大型全球性公司。我们重点介绍 Spotify 如何通过提供无摩擦的开发环境以及信任和知识共享的文化，使运维成为所有工程师的默认行为。
蹒跚学步：2006–2007
 一名运维工程师
七个开发人员，在仅限邀请的测试版发布时大约有 9 个后端系统
前奏
 将讨论我们如何开始将运维重点纳入早期历史，包括：
默认需要运维经验
从一开始就无意地引入运维重点影响了我们的工程文化，证明在未来是有益的。
学习迭代失败
尽管我们在运维方面可能有远见，但我们并没有对初创公司陷入的常见问题免疫。
关于 Spotify 运维和 SRE 故事的一个有趣地方，就是六人公司的初始人员配置如何包括一名运维工程师。许多初创公司仅在第一批客户开始使用该服务后才会招募注重运维的人员。然后，不幸的运维工程师可能会被一个后端未记录的脚本所拖累，或者在 screen 会话内运行的服务；或者缺少备份；或者单点故障；或者某个未完成的，良好的意图。从这一刻开始，运维工程师可能会不断遇到更多问题，试图解决故障，同时还要跟上新的开发。
因为有了头一名运维工程师，从一开始就确保运维的健全性，并作为平等的伙伴参与讨论，且直到最后一刻才离开。从开始，开发与运维并行工作，朝着我们共同的愿景：努力让音乐进入整个世界。这种最初的工作方式导致了协作和信任的文化，这种文化今天继续蓬勃发展。
我们的后端，如最初设想的那样，由许多小型服务组成，这种模式现在称为微服务，它们共同为 Spotify 客户端提供内容。微服务本身是专注一件事，并力图做好这件事的程序。在前两年中，开发部门和运维之间的工作分布如下：开发人员负责客户端功能或后端服务的业务逻辑，而运维人员则拥有所有其他内容，包括检测生产中的问题以及负责办公技术方案。
这是一个初创公司，正如你想象的那样，几乎所有操作都是手动完成的，例如后端服务的部署和桌面客户端的开发。随着 Spotify 在开始时的增长，引入了工具以减轻工作负荷，但这些工具只帮助执行手动任务；人类仍然需要做出所有的关键决定。
关键收获
我们从早期学到的一些关键知识是：
引入一名运维工程师，从一开始就影响工程文化，并证明非常有益的，因为我们会健康成长。
应该尽早在工程文化中引入运维理念。
除了业务逻辑体系结构之外，请确保尽早建立基础结构体系结构。
测试版和正式发布：2008-2009
三名运维工程师
约 10 名后端工程师
1 个数据中心
10~20 个后端服务
4 种客户端：Windows、Mac、iPhone、libspotify4 种客户端：Windows、Mac、iPhone、libspotify
前奏
 在本节中，我们将讨论自己的“默认运维”理念如何转变，以及该理念如何与我们的核心工程价值观联系起来：
默认需要运维经验
从一开始就将运维引入开发人员的可伸缩性和可靠性的定期讨论，这对于创建我们的工程方法的基础至关重要。运维是每个工程师工作的基石，无论是开发和维护服务，还是帮助改善基础设施的内在渴望。
核心工程价值
先天信任工程师，这为我们技术组织中最普遍的原则之一奠定了基础：自主性。
Spotify 于 2007 年 5 月进入“仅限邀请的测试版”，2008 年发布了高级（和“免费增值”）服务。在此期间，Spotify 经历了其第一次真正的服务拥塞，伴随着快速的用户增长的可怕问题。在规模扩张后，那些罕见的和理论上才会出现的问题变得可见。它们不仅给后端服务造成压力，而且一直影响整个技术堆栈。下面是一些示例：后端服务在高峰时段有与容量相关的服务中断。
当 RAID 控制器的电池发生故障时，导致磁盘 I/O 性能问题。
ZFS 的 Bug 导致负责关键数据的服务器在高负荷运行后失去响应。
机架和堆叠服务器的速度非常缓慢。
此外，随着 Spotify 开发新功能，后端服务的数量和复杂性也有所上升。随着时间的推移和大量的努力，每个技术问题都解决了，后端继续随着用户数量而扩展。
然而，运维工程师最初的工作方式不能像 Spotify 那样增长。当时有三位运维工程师拥有以下所有职能：
留意从开发人员移交给运维部门的所有服务
维护底层 Linux 服务器配置
响应服务中断
确保事件补救的优先次序
跟上系统安全性需求