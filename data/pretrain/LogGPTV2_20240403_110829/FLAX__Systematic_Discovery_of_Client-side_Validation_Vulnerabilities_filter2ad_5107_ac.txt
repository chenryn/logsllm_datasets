server that may occur in reﬂected ﬂow. This ﬁnal step
veriﬁes that the assumptions hold, by testing the at-
tacks concretely on the web application and checking
that the attack succeeds by using a browser-based ora-
cle.
4.2
JASIL
To simplify further analysis, we lower the semantics of
the JavaScript language to a simpliﬁed intermediate repre-
sentation which we call JASIL. JASIL is designed to have
a simple type system with a minimal number of operations
on the deﬁned data types. A brief summary of its type sys-
tem and categories of operations are outlined in Figure 7
and Figure 6 respectively. JavaScript interpreters already
perform some amount of semantic lowering in converting
to internal bytecode. However, the semantics of typical
JavaScript bytecode are not substantially simpler, because
most of the complexity is hidden in the implementation of
the rich native operations that the interpreter’s runtime sup-
ports.
JASIL has a substantially smaller set of operations,
shown in Figure 6.
In our design, we have found JASIL
to be sufﬁcient to express the operational semantics of a
subset of JavaScript commonly used in real applications.
Our design is implemented using WebKit’s JavaScript in-
terpreter, the core of the Safari web browser, and is faith-
ful to the semantics of the operations as implemented
therein. In our work, we lower all the native string oper-
ations, array operations, integer operations, regular expres-
sion based operations, global object functions, DOM func-
tions, and the operations on native window objects. Low-
ering to JASIL simpliﬁes analyses. For instance, consider
a String.replace operation in JavaScript. Intuitively,
a replace operation retains some parts of its input string in
its output while transforming the other parts with speciﬁed
strings. An execution of the replace operation can be re-
placed by a series of substring operations followed by a ﬁnal
concatenation of substrings. With JASIL, subsequent dy-
namic taint analysis is greatly simpliﬁed because the taint-
ing engine only needs to reason about simple operations like
substring extraction and concatenation.
In addition to lowering semantics of complex operations,
JASIL explicitly models procedure call/return semantics,
parameter evaluation, parameter passing, and object cre-
ation and destruction. Property look-ups on JavaScript ob-
jects and accesses to native objects such as the DOM or
window objects are converted to operations on a functional
map in JASIL (denoted by β[η] in its type system). This
canonicalization of references makes further analysis eas-
ier.
In JASIL, each object, variable or data element is iden-
tiﬁed by its allocated storage address, which obviates the
need to reason about most forms of aliasing. As one exam-
ple of how this simpliﬁcation allows robust reasoning, con-
sider the case of prototype-based inheritance in JavaScript.
In JavaScript, whenever an object O is created, the ob-
ject inherits all the properties of a prototype object corre-
sponding to the constructor function, accessible through the
.prototype property of the function (functions are ﬁrst-
class types in JavaScript and behave like normal objects).
The prototype object of the constructor function could in
turn inherit from other prototype objects depending on how
they are created. When a reference O.f is resolved, the ﬁeld
Sources
document.URL
document.URLUnencoded
document.location.*
document.referrer.*
window.location.*
event.data
event.origin
textbox.value
forms.value
Critical Flow Sinks
Resulting Exploit
eval(), window.execScript(),
window.setInterval(),
window.setTimeout()
document.write(...), document.writeln(...),
document.body.innerHtml, document.cookie
document.forms[0].action,
document.create(), document.execCommand(),
document.body.*, window.attachEvent(),
document.attachEvent()
document.cookie
XMLHttpRequest.open(,url,),
document.forms[*].action,
Script injection
HTML code injection
Session ﬁxation attacks
Command Injection and
parameter injection
Figure 8. (Left) Sources of untrusted data. (Right) Critical sinks and corresponding exploits that may
result if untrusted data is used without proper validation.
f is ﬁrst looked up in the object O. If it is not found, it is
looked up in the prototype object of O and in the subsequent
objects of the prototype chain. Thus, determining which
object is referenced by O statically requires a complex alias
analysis. In simplifying to JASIL, we instrumented the in-
terpreter to record the address identiﬁer for each variable
used after the reference resolution process (including the
scope and prototype chain traversals) is completed. There-
fore, further analysis does not need any further reasoning
about prototypes or scopes.
To collect a JASIL trace of a web application for analy-
sis we instrumented the browser’s JavaScript interpreter to
translate the bytecode executed at runtime to JASIL. This
required extensive instrumentation of the JavaScript inter-
preter, bytecode compiler and runtime, resulting in a patch
of 6032 lines of C++ code to the vanilla WebKit browser. To
facilitate recovering JavaScript source form from the JASIL
representation, auxiliary information mapping the dynamic
allocation addresses to native object types is embedded as
metadata in the JASIL trace.
4.3 Dynamic taint analysis
Character-level precise modeling of string operation se-
mantics. JavaScript applications are array- and string- cen-
tric; lowering of JavaScript to JASIL is a key factor in rea-
soning about complex string operations in our target appli-
cations. Dynamic taint analysis has been used with suc-
cess in several security applications outside of the realm of
JavaScript applications [31, 32, 43]. For JavaScript, Vogt
et al. have previously developed taint-tracking techniques
to detect conﬁdentiality attacks resulting from cross-site
scripting vulnerabilities [39]. In contrast to their work, our
techniques model the semantics of string operations and are
character-level precise.
We list the taint sources and sinks used by default in
FLAX in Figure 8. FLAX models only direct data de-
pendencies for this step; additional control dependencies
for path conditions are introduced during AS construction.
It performs taint-tracking ofﬂine on the JASIL execution
trace, which reduces the intrusiveness of the instrumen-
tation by not requiring transformation of the interpreter’s
core semantics to support taint-tracking. In our experience,
this has resulted in a more robust implementation than our
previous work on online taint-tracking [29]. Taint propa-
gation rules are straight-forward — assignment and arith-
metic operations taint the destination operand if one of
the input operands is tainted, while preserving character-
level precision. The JASIL string concatenation and
substring operations result in a merge and slicing oper-
ation over the ranges of tainted data in the input operands,
respectively.
The convert operation, which imple-
ments character-to-integer and integer-to-character con-
version, typically results from simplifying JavaScript en-
code/decode operations (such as decodeURI). Taint prop-
agation rules for convert are similar: the output is tainted
if the input is tainted. Other native functions that are not ex-
plicitly modeled are treated as uninterpreted transfer func-
tions, acting merely to transfer taint from input parameters
to output parameters in a conservative way.
Tracking data in reﬂected ﬂow. During this anal-
ysis data may be sent
to a backend server via the
XMLHttpRequest object. We approximate taint propa-
gation across such network data ﬂows by using an exact
substring match algorithm, which is a simpliﬁed form of
black-box taint inference techniques proposed in the previ-
ous literature [33, 34]. We record all tainted data sent in
a reﬂected ﬂow, and perform a longest common substring
function acceptor (input) {
var path_constraints = true;
var re = /(.*?):\/\/(.*?)\.com/;
var matched = re.exec(input);
if (matched == null) {
path_constraints = path_constraints & false;
}
if (!path_constraints) return false;
var domain = matched[2];
var valid = /example/.test(domain);
path_constraints = path_constraints & valid;
if (!path_constraints) return false;
var port = matched[1];
valid = /https?/.test(port);
path_constraints = path_constraints & valid;
if (!path_constraints) return false;
return true;
}
http://evilexample.com/
/(.*?):\/\/(.*?)\.com/
exec
http
evilexample
http://
evilexample.
com
/https?/
test
test
/example/
True
True
Figure 9. (Left) Acceptor Slice showing validation and parsing operations on event.origin ﬁeld in
the running example. (Right) Execution of the Acceptor Slice on a candidate attack input, namely
http://evilexample.com/
match on the data returned. Any matches that are above a
threshold length are marked as tainted, and the associated
taint metadata is propagated to the reﬂected data. This tech-
nique has proved sufﬁcient for the AJAX applications in our
experiments.
Implicit Sinks. Certain source operations do not have ex-
plicit sink operations. For instance, in our running exam-
ple (Figure 2) the event.origin ﬁeld has no explicit
sink. However, this ﬁeld must be sanitized before any use
of event.data. We model this case of implicit depen-
dence between two ﬁelds by introducing an implicit sink
node for event.origin at any use of event.data
in critical sink operation. This has the effect that for
any use of event.data, the path constraint checks on
event.origin are implicitly included in the acceptor
slice.
4.4 Acceptor Slice Construction
After dynamic taint analysis identiﬁes a sink point,
FLAX extracts a dynamic executable slice from the pro-
gram, by walking backwards from the critical sink to the
source of untrusted data.
In order to fuzz the slice, the
JASIL slice is converted back to a stand-alone JavaScript
function. This results in an executable function that retains
the operations on IS , and returns true for any input that
executes the same path as the original run. The slicing op-
eration captures (a) data dependencies, i.e., all operations
directly processing IS and (b) a limited form of control de-
pendencies, i.e., all path constraints, conditions of which
are directly data dependent on IS . Path constraints are con-
ditional checks corresponding to each branch point which
force the execution to take the same path as IS . Data val-
ues which are not directly data dependent (marked tainted)
in the original execution, are replaced with their concrete
constant values observed during the program execution.
Acceptor Slice for the Running Example. The instruc-
tions operating on the event.origin in the running ex-
ample that inﬂuences the implicit eval sink is shown in
Figure 9. It shows the AS for the the event.origin
ﬁeld of our example, after certain optimizations, like dead-
code elimination. This program models all the validation
checks performed on that ﬁeld, until its use in the implicit
sink node at eval.
4.5 Sink(cid:173)aware fuzzing
This step in our analysis performs randomized testing on
each AS . Note that each critical sink operation can result
in a different kind of vulnerability. Therefore, it is useful
to target each sink node (S) with a set of specialized at-
tack vectors. For instance, an unchecked ﬂow that writes to
the innerHTML property of a DOM element can result in
HTML code injection and our fuzzer attempts to inject an
HTML tag into such a sink. For eval sink, our testing tar-
gets the injection of JavaScript code. We incorporate a large
corpus of publicly available attack vectors for XSS [19] in
our fuzzing.
While testing for an attack input that causes AS to re-
turn true, our fuzzer utilizes the aforementioned attack vec-
tors and a grammar-aware strategy. Starting with the initial
benign input, the fuzzer employs a mutation-based strategy
to transform, prepend and appends language nonterminals.
For each choice, the fuzzer ﬁrst selects terminal characters
based on the knowledge of surrounding text (such as HTML
tags, JavaScript nonterminals) and ﬁnally resorts to random
characters if the grammar-aware strategy fails to ﬁnd a vul-
nerability.
To check if a candidate attack input succeeds we use a
browser-based oracle. Each candidate input is executed in
AS and the test oracle determines if the speciﬁc attack vec-
tor is evaluated or not. If executed, the attack is veriﬁed as
being a concrete attack instance. For instance, in our run-
ning example, the event.origin acceptor slice returns
true for any URL principal which is not a subdomain of
http://example.com4. Our fuzzer tries string muta-
tions of the original domain http://example.com and
quickly discovers that there are other domains that circum-
vent the validation checks.
5 Evaluation
Our primary objective is to determine if taint enhanced
blackbox fuzzing is scalable enough to be used on real-
world applications to discover vulnerabilities. As a second
objective, we aim to quantitatively measure the beneﬁts of
taint enhanced blackbox fuzzing over vanilla taint-tracking
and purely random testing. In our experiments, FLAX dis-
covers 11 previously unknown vulnerabilities in real appli-
cations and our results show that our design of taint en-
hanced blackbox fuzzing offers signiﬁcant practical gains
over vanilla taint-tracking and fuzzing. We also investigate
the security implications of the vulnerabilities by construct-
ing proof-of-concept exploits and we discuss their varying
severity in this section.
5.1 Test Subjects
We selected a set of 40 web applications consisting of
iGoogle gadgets and other AJAX applications for our ex-
periments. Of these, FLAX observed untrusted data ﬂows
into critical sinks for only 18 of the cases, consisting of 13
iGoogle gadgets and 5 web applications. We report detailed
results for only these 18 applications in Table 1. We tested
each subject application manually to explore its functional-
ity, giving benign inputs to seed our automated testing. For
instance, all of the iGoogle gadgets were tested by visiting
the benign URL used by the iGoogle web page to embed the
4Recall that the running example acceptor does not have an explicit
sink, therefore only return true on success and false otherwise.
gadget in its page. To explore each application’s function-
ality, we entered data into text boxes, clicked buttons and
hyperlinks, simulating the behavior of a normal user.
Google gadgets constitute the largest fraction of our
study because they are representative of third-party appli-
cations popular among internet users today. Most gadgets
are reported to have thousands of users with one of the vul-
nerable gadgets having over 1,350,000 users, as per the data
available from the iGoogle gadget directory on December
17th 2009 [2]. The other AJAX applications consist of so-
cial networking sites, chat applications and utility libraries
which are examples of the trend towards increasing code
sharing via third-party libraries. All tests were performed
using our FLAX framework running on a Ubuntu 8.04 plat-
form with a 2.2 GHz, 32-bit Intel dual-core processor and 2
GB of RAM.
5.2 Experimental Results
FLAX found several distinct taint sinks in the applica-
tions, only a small fraction of which are deemed vulnerable
by the tool. Column 2 and 3 of Table 1 reports the num-
ber of distinct sinks and number of vulnerabilities found by
FLAX respectively. The use of character-level precise taint
tracking in FLAX prunes a signiﬁcant fraction of the input
in several cases for further testing. To quantitatively mea-
sure this saving we observe the average sizes of the orig-
inal input and the reduced input size in the acceptor slices
(used for subsequent fuzzing), which is reported in columns
4 and 5 of Table 1 respectively. We measure the reduction
in the acceptor size, which results in substantial practical
efﬁciencies in subsequent black-box fuzzing. We ﬁnd that
the acceptor slices are small enough to often enable manual
analysis for a human analyst. Columns 6 and 7 report the
size of dynamic execution trace and the average size of the
acceptor slices respectively5. The last two columns in Ta-
ble 1 show the number of test cases it takes to ﬁnd the ﬁrst
vulnerability in each application and the kinds of vulnera-
bility found.
5.2.1 Prevalence of CSV vulnerabilities
Of the 18 applications in which FLAX observed a danger-
ous ﬂow, it found a total of 11 vulnerabilities which we re-
port in the third column of Table 1. The vulnerabilities are
evidence of a broad range of attack possibilities, as con-
ceptualized in Section 2, though code injection vulnerabil-
ities were the highest majority. FLAX reported 8 code in-