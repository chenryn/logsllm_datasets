Proof of Lemma 5.5. Suppose P∗ and V run the CheckMult
protocol with inputs as described in the lemma. Since CheckZero′
is a variant of CheckZero from Π
for the larger message
space Z2𝑘+𝑠 , we can apply Lemma 5.2 again: Hence, a P∗ that tries to
cheat during CheckZero′ is detected by V except with probability
𝜀cz.
Now assume this does not happen, all the zero checks are correct,
and V accepts. Let 𝑖 be an index of an invalid triple such 𝑎𝑖 ·𝑏𝑖 (cid:46)𝑘 𝑐𝑖.
Then, P has chosen 𝑧𝑖 ∈ Z𝑠𝑘+𝑠 such that
0 ≡𝑘+𝑠 𝜂 · 𝑐𝑖 − 𝑧𝑖 − 𝜀𝑖 · 𝑏𝑖 ≡𝑘+𝑠 𝜂 · 𝑐𝑖 − 𝑧𝑖 − 𝜂 · 𝑎𝑖 · 𝑏𝑖 + 𝑥𝑖 · 𝑏𝑖
Z2𝑘
ComZK-a
⇐⇒
𝑧𝑖 − 𝑥𝑖 · 𝑏𝑖 ≡𝑘+𝑠 𝜂 · (𝑐𝑖 − 𝑎𝑖 · 𝑏𝑖).
Table 6: Conversion tuples that must be checked by ΠConv to
ensure statistical security 2−𝑠 and bucket size 𝐵 = 𝐶.
𝑠
40
40
40
80
𝐵
3
4
5
5
# of conversion tuples
≥1 048 576
≥ 10 322
≥
1024
≥1 048 576
Let 𝑣 ∈ N be maximal such that 2𝑣 divides 𝑐𝑖 − 𝑎𝑖 · 𝑏𝑖. Since
(𝑎𝑖, 𝑏𝑖, 𝑐𝑖) is an invalid triple modulo 2𝑘, it is 𝑣  𝑣, we have 𝑘+𝑠−𝑣 > 𝑠, and the prover would have guessed
all 𝑠 bits of 𝜂 ∈ Z𝑠𝑠 which happens only with probability 2−𝑠.
Therefore, by the union bound, P∗ can make V output (success)
with probability at most 𝜀cz + 2−𝑠.
□
F EXPERIMENTAL RESULTS
We benchmarked our conversion protocol ΠConv from Section 3, as
well as a variant which uses Quicksilver [33] to verify the multipli-
cations in bitADDcarry (instead of faulty multiplication triples). We
run ΠConv to verify 𝑁 = 1024, 10 322, 1 048 576 conversion tuples
yielding bucket sizes of 𝐵 = 𝐶 = 5, 4, 3 respectively, and measure
the run-time with different network network bandwiths (20 Mbit/s,
50 Mbit/s, 100 Mbit/s, 500 Mbit/s, and 1 Gbit/s).
Tables 7 and 8 show the measured communication and run-
times for our main protocol. Little to no difference is generally seen
between 500 Mbit/s and 1 Gbit/s, showing that the protocol has a
bottleneck regarding local computation (however tiny this may be).
Tables 9 and 10 show the measured communication and run-
times for the variant with QuickSilver [33]. Compared to our main
protocol, we see a reduction in not only communication, but also
the overall running time of the protocol, as both are roughly cut in
half. We estimate that this overall gain in efficiency comes from no
longer requiring multiplication triples to verify the multiplications,
leading to reduced communication and fewer preprocessed COTs.
Even if the multiplication triples may be faulty such that for a triple
(𝑥, 𝑦, 𝑧) it may not be true that 𝑥 ·𝑦 = 𝑧, they still require additional
communication and COTs when used to verify the bitADDcarry
circuits, compared with QuickSilver.
Session 1C: Zero Knowledge I CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea210Table 7: The data transferred in Mbit by the prover P and the
verifier V when verifying 𝑁 conversion tuples of bit size 𝑚
with bucket size 𝐵 = 𝐶, using our protocol from Section 3.
Table 9: The data transferred in Mbit by the prover P and
the verifier V when verifying 𝑁 conversion tuples of bit size
𝑚 with bucket size 𝐵 = 𝐶 using QuickSilver [33] to verify
multiplications.
𝑚 = 8
𝑚 = 16
V
P
𝑚 = 32
V
P
𝑚 = 60
V
P
P
19.65
0.04
19.65
0.01
19.65
0.02
104.65
2.45
105.24
19.24
104.65
4.09
104.65
7.38
104.65
13.13
V
𝑁 = 1024, 𝐵 = 𝐶 = 5
19.65
Init
0.10
Conv
𝑁 = 10 322, 𝐵 = 𝐶 = 4
19.65
Init
0.10
Conv
𝑁 = 1 048 576, 𝐵 = 𝐶 = 3
171.69
Init
Conv 1488.70
Table 8: Run-time in s when verifying 𝑁 conversion tuples
of bit size 𝑚 with bucket size 𝐵 = 𝐶 using our protocol from
Section 3.
19.65
32.98
57.77 2522.08 111.09 4591.06 222.17
105.24
107.37
105.24
58.89
105.24
32.46
19.65
0.02
19.65
0.01
19.65
4.48
178.38
173.92
24.09
20 Mbit/s
8
32
16
Init
Conv
Init
Conv
Init
Conv
Init
Conv
𝑚
𝑁 = 1024, 𝐵 = 𝐶 = 5
13.6
0.6
13.6
1.2
13.6
2.0
13.6
4.2
60
𝑁 = 10 322, 𝐵 = 𝐶 = 4
13.8
1.3
13.7
2.5
13.7
4.9
13.7
9.8
Init
Conv
Init
Conv
Init
Conv
Init
Conv
16
32
8
60
𝑁 = 1 048 576, 𝐵 = 𝐶 = 3
8
16
32
Init
Conv
Init
Conv
Init
Conv
17.4
120.3
19.2
209.8
22.6
399.2
50 Mbit/s
100 Mbit/s
500 Mbit/s
1 Gbit/s
9.7
0.6
10.3
1.1
9.8
2.0
9.8
3.0
9.8
0.8
9.7
1.6
9.8
2.3
9.7
7.3
11.5
68.8
13.7
123.6
16.4
241.0
8.5
0.7
8.4
1.0
8.5
2.3
8.5
2.9
8.5
0.8
8.6
1.4
8.6
2.6
8.5
6.5
7.3
0.5
7.4
0.9
7.3
1.9
7.4
4.1
7.4
0.8
7.4
1.4
7.4
2.7
7.5