2.2.3 operations选项卡
满足条件的active host发起请求，server会完成三个动作：
把agent加到host列表
把agent加入linux servers组
agent主机link模板Template OS linux
3. 查看结果
查看/tmp/zabbix_server.log我们能看到如下内容：
16585:20150203:161110.910 enabling Zabbix agent checks on host "auto-reg-for-ttlsa-01": host became available
看到如上内容，表明host增加成功，此时此刻的host列表如下：
4. HostMetadataItem与HostMetadata
作用：用于标示主机，通过该符号能够把主机区别开来。比如我们经常用它来区分 linux 与 windows 系统，这样才
能分别给他们设置组与template等等
4.1 HostMetadataItem用法
HostMetadataItem=system.uname
它的值来之key
4.2 HostMetadata用法
HostMetadata: Linux hehehehehehehehe xxxxx
他的值是直接定义的
通过使用各式各样的metadata我们可以用于区分各个主机，来达到我们各种需求。
zabbix 低级别发现
概述
本篇文章是zabbix发现的最后一篇，回顾一下前面几篇文章
《zabbix发现介绍》整个功能的介绍
《zabbix发现配置》server通过配置好的规则，自动添加host、group、template
《zabbix Active agent自动注册》与discovery相反，功能基本相同，active联系server，server自动添加host、group、
template
以上目的都是发现host、添加host，本文的low-level discovery更底层点，用于发现item、trigger、graph等等。我
们最常用如：filesystem（如/、/home、/proc、C:、D:等），network（eth0，eth1等）
2. Discovery 之文件系统
众多服务器，难免系统以及分区会有所不同。一般存在 linux 和 windows 两种系统，linux 下分区有/、/data、/proc
等等，windows有C:D:E:等，A服务器有/data分区，B服务器可能有/site分区。他有什么分区，我便监控什么分区，
这就是low-level discovery的功能。
2.1 创建模板
创建模板A_Template_For_Discovery,.....过程省略....
2.2 配置discovery规则
configuration>>templates>>找到模板“A_Template_For_Discovery”>>Discovery(0)>>Create discovery rule
属性说明：
Keep lost resources period（in days）：数据保留天数，默认30天
Fileter：Macro为{#FSNAME}，key “vfs.fs.discovery”返回json数据列表，里面内容为{#FSNAME}作为key，/、/data、
C:等等作为value。regext可以使用表达式，例如"^/data|/C:"，如果想通过{#FSTYPE}来过滤，那么Macro写{#FSTYPE}，
regexp写^(ext2|ext3|swap)$,或者引入zabbix中定义好的的正则表达式，@表达式名称。
2.3 创建Item prototypes
其实就是一个创建一个item，configuration>>templates>>找到模板“A_Template_For_Discovery”>>Discovery(1)>>find
file system>>Item prototypes (0)>>create Item prototypes
2.4 创建Trigger
当剩余量小于20%触发warnning
configuration>>templates>>找到模板“A_Template_For_Discovery”>>Discovery(1)>>find file system>>Trigger
prototypes (0)>>Create trigger prototypes
与普通的trigger区别在{#FSNAME}
2.4 创建graph
绘制简单图表
configuration>>templates>> 找 到 模 板 “ A_Template_For_Discovery ” >>Discovery(1)>>find file system>>Graph
prototypes (0)>>Create Graph prototypes
3. 自定义 LLD 规则
系统已经内建了文件系统的{#FSNAME}，网络的{#IFNAME}，因为业务的特殊性，我们如何定义我们自己需要的名
称呢？
 编写脚本,脚本输出json数据，包含key和value
 脚本加入zabbix_agentd.conf UserParameter
 重启zabbix_agentd
 使用定义好的名称配置low-level discovery
3.1 脚本范例
#!/usr/bin/perl
$first = 1;
print "{\n";
print "\t\"data\":[\n\n";
for (`cat /proc/mounts`)
{
($fsname, $fstype) = m/\S+ (\S+) (\S+)/;
$fsname =~ s!/!\\/!g;
print "\t,\n" if not $first;
$first = 0;
print "\t{\n";
print "\t\t\"{#FSNAME}\":\"$fsname\",\n";
print "\t\t\"{#FSTYPE}\":\"$fstype\"\n";
print "\t}\n";
}
print "\n\t]\n";
print "}\n";
3.2 结果范例
执行后得到如下数据，是json格式
{
"data":[
{
"{#FSNAME}":"\/",
"{#FSTYPE}":"rootfs"
}
,
{
"{#FSNAME}":"\/proc",
"{#FSTYPE}":"proc"
}
,
{
"{#FSNAME}":"\/sys",
"{#FSTYPE}":"sysfs"
}
,
{
"{#FSNAME}":"\/dev",
"{#FSTYPE}":"devtmpfs"
}
,
{
"{#FSNAME}":"\/dev\/pts",
"{#FSTYPE}":"devpts"
}
,
{
"{#FSNAME}":"\/dev\/shm",
"{#FSTYPE}":"tmpfs"
}
,
{
"{#FSNAME}":"\/",
"{#FSTYPE}":"ext4"
}
,
{
"{#FSNAME}":"\/proc\/bus\/usb",
"{#FSTYPE}":"usbfs"
}
,
{
"{#FSNAME}":"\/proc\/xen",
"{#FSTYPE}":"xenfs"
}
,
{
"{#FSNAME}":"\/proc\/sys\/fs\/binfmt_misc",
"{#FSTYPE}":"binfmt_misc"
}
]
}
第十三章：API
Zabbix API 二次开发
有了zabbix API我们可以做很多，自己开发web界面、开发手机端zabbix、获取zabbix指定数据、创建zabbix监
控项等等。
zabbix API 开发库
zabbix API请求和响应都是json，并且还提供了各种语法的lib库，http://zabbix.org/wiki/Docs/api/libraries，包含php、
c#、Python、Perl、go等等语言，简单看了下phpzabbixapi，使用非常方便。
请求 zabbix API
post json 数据到 api 接口地址，例如你得 zabbix 地址是 http://company.com/zabbix，那么你得接口地址是：
http://company.com/zabbix/api_jsonrpc.php，必须包含content-type头，值为application/json-rpc, application/json or
application/jsonrequest之一。
POST http://company.com/zabbix/api_jsonrpc.php HTTP/1.1
Content-Type: application/json-rpc
{"jsonrpc":"2.0","method":"apiinfo.version","id":1,"auth":null,"params":{}}
zabbix API 登陆
获取auth token（登陆）
在操作zabbix之前，我们必须先登陆zabbix，得到token，以后的操作带着token即可，要不然肯定没权限。
请求的json如下：
{
"jsonrpc": "2.0",
"method": "user.login",
"params": {
"user": "Admin",
"password": "zabbix"
},
"id": 1,
"auth": null
}
属性说明
属性 描述
jsonrps JSON-RPC版本，基本上用2.0就行了;
method 调用的API方法，方法列表请上官网;
params 需要传递的参数，这边是user和password;
id 请求标志;
auth 用户token，这边使用null，因为还没通过验证
验证成功，会返回如下json数据
{
"jsonrpc": "2.0",
"result": "0424bd59b807674191e7d77572075f33",
"id": 1
}
result便是我们要德token数据，id对应请求的id。
zabbix api 检索主机
通过验证之后，我们带着token使用host.get获取主机列表，请求的json如下：
{
"jsonrpc": "2.0",
"method": "host.get",
"params": {
"output": [
"hostid",
"host"
],
"selectInterfaces": [
"interfaceid",
"ip"
]
},
"id": 2,
"auth": "0424bd59b807674191e7d77572075f33"
}
获取到如下数据
{
"jsonrpc": "2.0",
"result": [
{
"hostid": "10084",
"host": "Zabbix server",
"interfaces": [
{
"interfaceid": "1",
"ip": "127.0.0.1"
}
]
}
],
"id": 2
}
请使用你的程序处理一下即可。
zabbix API就是这么简单，请求、响应然后处理，更多API方法请直接上官方文档，里面有几百个方法等着你。如
果你使用zabbix二次开发，千万不要直接操作zabbix数据，太…..，为何不使用zabbix API。
第十四章：zabbix 命令
Zabbix 命令：zabbix_server
介绍
zabbix 可以没有zabbix_agentd，也可以没用snmp、也可以没有 proxy，但是zabbix_server那是绝对不能少，它是
zabbix最核心的东西。获取数据、配置主机、发送邮件等等众多事情都是由zabbix_server完成，zabbix_server绝对
是日理万机废寝忘食的好员工。
兼容系统
虽然和 zabbix_agentd 相比，zabbix_server 支持的系统少一点，但是它还是支持着众多操作系统。最遗憾的是它不
支持windows系统。windows sa们可以哭一会儿。支持的系统如下：
 Linux
 Solaris
 AIX
 HP-UX
 Mac OS X
 FreeBSD
 OpenBSD
 NetBSD
 SCO Open Server
 Tru64/OSF1