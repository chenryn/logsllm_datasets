### Comparison with FreeGuard
- **Heap Over-Provisioning:** GUARDER supports heap over-provisioning, a feature that is not available in FreeGuard. This indicates that certain buggy applications, which may be vulnerable to attacks when using FreeGuard, can be safeguarded with GUARDER.
- **Entropy Support:** Under the same overhead, GUARDER supports approximately 9.89 bits of entropy, which is more than 200 times the amount supported by FreeGuard.
- **Randomization of Bag Order:** GUARDER further randomizes the order of bags within each per-thread heap, whereas FreeGuard's deterministic layout is more susceptible to attacks.
- **User-Configurable Security:** More importantly, GUARDER allows users to configure their desired security through parameters such as entropy, guard page ratio, and over-provisioning factors, which are not supported by FreeGuard.

### Related Work

#### Secure Allocators
Several other works aim to address heap-related security problems, often focusing on specific types of vulnerabilities.

##### Allocators Protecting Object Metadata
- **Robertson et al.** use canary and checksum values to detect potential buffer overflows.
- **Younan et al.** achieve fully-segregated metadata using a hash table to maintain mappings [41].
- **Heap Server** isolates memory management functions in a separate process, keeping heap data and associated metadata in different address spaces [19].
- **dnmalloc** dedicates a separate area for object metadata and uses a table to maintain mappings between chunks and their metadata, similar to DieHarder or OpenBSD [40].

These approaches protect against metadata-based vulnerabilities but do not address attacks on the actual heap.

- **PartitionAlloc** is a partition-based allocator used in Blink, the rendering engine for Chromium. It provides built-in exploit mitigations but is primarily optimized for single-threaded usage and lacks key protections like randomization [15]. Its design could be significantly improved, for example, by enhancing its detection of double/invalid frees and securing free list pointers [16]. In contrast, GUARDER guarantees the detection of all invalid/double frees and fully segregates object metadata.

##### Protection Utilizing Compiler Instrumentation
- **Bhatkar et al.** propose "address obfuscation" to randomize the address space [7].
- **Kharbutli** introduces non-determinism into allocation functions by randomizing the sequence in which freed objects are reused [19].

GUARDER provides higher entropy compared to these systems.

- **FreeSentry** uses compiler instrumentation to protect against use-after-free problems by recording and updating the status of pointer values [39]. DangNULL similarly tracks pointers and nullifies them when the referenced objects are deallocated [20]. FreeSentry incurs about 25% performance overhead, while DangNULL ranges from 22% to 105%. DangSan reduces performance overhead with a new lock-free design, introducing only half the overhead of FreeSentry and DangNULL [36], but it does not support memory allocation randomization.

- **Iwahashi** describes a signature-based approach to detect and identify various vulnerabilities [18].
- **Cabellero et al.** introduce Undangle, a runtime approach for detecting use-after-free vulnerabilities through object labeling and tracking [10].

GUARDER defends against multiple common errors with minimal overhead, combining protections such as fully-segregated metadata, randomized object reuse, and detection of double/invalid free vulnerabilities.

#### Low Fragmentation Heap (LFH)
- **LFH** is a widely deployed heap policy for Windows-based platforms, introduced in Windows XP [27]. It uses a bucketing scheme for allocations and incorporates guard pages, randomization, and encoding of metadata pointers. However, LFH has only 5 bits of entropy for new heap placement and object selection, and these values are fixed, unlike those provided by GUARDER [35, 38].

#### MacOS X Allocator
- **MacOS X** uses a scalable zone allocator for fulfilling requests from the user-facing malloc layer. While it has been updated for multithreading based on Hoard [5], it lacks many memory security features, such as guard pages, segregated metadata, and randomization. Metadata header checksums are present but are easily bypassed [43].

#### Employing the Vast Address Space
- **Archipelago** randomly places objects throughout the vast 64-bit address space to trade address space for security and reliability, reducing the probability of overflowing real data [26].
- **Cling** also utilizes the vast address space to mitigate use-after-free problems [2].

### Conclusion
This paper introduces GUARDER, a novel secure allocator that provides unprecedented security guarantees among existing secure allocators. GUARDER combines allocation and deallocation buffers to support customizable security features, including randomization entropy, guard pages, and over-provisioning. It implements almost all security features of other secure allocators while imposing only a 3% performance overhead and featuring comparable memory overhead.

### Acknowledgment
We thank the anonymous reviewers for their invaluable feedback. This work is supported in part by the National Science Foundation (NSF) under grants CNS-1812553, CNS-1834215, AFOSR award FA9550-14-1-0119, and ONR award N00014-17-1-2995.

### References
[References remain unchanged]