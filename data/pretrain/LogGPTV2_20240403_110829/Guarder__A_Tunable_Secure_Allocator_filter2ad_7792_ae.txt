ports heap over-provisioning, which FreeGuard does not.
This indicates that some buggy applications that may
be attacked when using FreeGuard can be avoided with
GUARDER.
(2) Under the same overhead, GUARDER
supports around 9.89 bits of entropy, which is more than
200 times that of FreeGuard. (3) GUARDER further ran-
domizes the order of bags within each per-thread heap,
while FreeGuard’s deterministic layout is much easier to
attack. (4) More importantly, GUARDER allows users to
conﬁgure their desired security through entropy, guard
page ratio, and over-provisional factors, which Free-
Guard cannot support.
7 Related Work
Apart from the secure allocators previously examined in
Section 2, several other works attempt to solve heap-
related security problems, though often choosing to tar-
get only a particular class of vulnerability.
7.1 Allocators Protecting Object Metadata
Multiple allocators aim to secure object metadata.
Robertson et al. utilize the placement of canary and
checksum values, which will be relied upon to warn of
potential buffer overﬂow. Younan et al. achieve fully-
segregated metadata by incorporation of a hash table
used to maintain their mappings [41]. Heap Server pro-
poses the separation of memory management functions
to a separate process, isolating the actual heap data in a
different address space than its associated metadata [19].
dnmalloc dedicates a separately allocated area to
house object metadata, and also utilizes a table to main-
tain mappings between these chunks and their meta-
data, an approach that is not unlike that of DieHarder or
OpenBSD [40]. The metadata segregation achieved by
these works can protect against metadata-based vulner-
abilities, however, they cannot guard against attacks on
the actual heap.
Blink, a rendering engine for the Chromium project,
utilizes PartitionAlloc, a partition-based allocator with
built-in exploit mitigations [15]. While PartitionAlloc
provides a general allocator class suitable for supporting
multithreaded applications, it is primarily optimized for
single-threaded usage. It also lacks key protections of-
fered by secure allocators, such as randomization. Lastly,
its design could be signiﬁcantly hardened; for exam-
ple, its rudimentary detection of double/invalid frees,
and free list pointers that occupy deallocated slots [16].
By comparison, GUARDER guarantees to detect all in-
valid/double frees, and fully segregates object metadata.
7.2 Protection Utilizing Compiler Instru-
mentation
Some works attempt to introduce randomness into the
memory layout or allocation functions. Bhatkar et al.
propose the concept of “address obfuscation”, in which
the address space is randomized [7]. Kharbutli further
describes securing the sequence in which freed objects
are reused, in an effort to introduce non-determinism to
allocation functions [19]. GUARDER provides a higher
entropy than these systems.
The reliance on managing additional metadata to
guard against problems at runtime has been employed
by many techniques toward increased security. These
problems include protection against overﬂows through
the validation of array accesses [3, 4], as well as perform-
ing type-checking of variable casting operations [21].
FreeSentry [39] also utilizes compiler instrumenta-
tion, but toward protecting against use-after-free prob-
lems. This is achieved by recording the application’s use
of pointer values, updating their status after the target
objects have been freed. DangNULL similarly targets
use-after-free and double-free vulnerabilities by track-
ing each pointer, nullifying it when the object it ref-
erences is deallocated [20]. FreeSentry incurs approx-
imately 25% performance overhead on average, while
DangNULL ranges from 22% to 105%. DangSan uti-
lizes a new lock-free design to reduce performance over-
head, only introducing half the overhead of FreeSentry
and DangNULL [36]. However, they cannot support the
randomization of memory allocations.
Iwahashi describes a signature-based approach to de-
tect and identify the cause of these and potentially other
vulnerabilities [18]. Cabellero et al. describe Undangle,
a runtime approach for detecting use-after-free vulnera-
bilities through the use of object labeling and tracking,
which helps discover dangling pointers [10].
130    27th USENIX Security Symposium
USENIX Association
Rather than protecting against a single type of memory
error, GUARDER defends against many common errors,
achieving this with very little overhead on average. The
GUARDER heap combines protections similar to those
provided by the mechanisms introduced by these works,
including fully-segregated metadata, randomized object
reuse, and detection of double/invalid free vulnerabili-
ties, among others.
The Low Fragmentation Heap (LFH) is a widely de-
ployed heap policy for Windows-based platforms, intro-
duced in Windows XP [27]. When enabled, LFH will
utilize a bucketing scheme to fulﬁll similarly sized al-
locations from larger pre-allocated blocks. LFH is ap-
plied for objects of size 16 kilobytes or less, and its 128
buckets span ﬁve size classes of varying granularity. The
LFH utilizes guard pages, randomization, and encoding
of metadata pointers in order to add security to the heap.
However, LFH has only 5 bits of entropy for new heap
placement, as well as object selection [35, 38]. Further-
more, these entropy values are ﬁxed, unlike those pro-
vided by GUARDER.
Apple’s MacOS X operating system utilizes a scalable
zone allocator from which to fulﬁll requests from the
user-facing malloc layer. While this allocator has seen
recent updating for multithreading improvements based
on Hoard [5], Mac OS X is signiﬁcantly lacking in mem-
ory security features as compared to other current op-
erating systems [43]. For example, guard pages, segre-
gated metadata, and randomization, are not incorporated.
While metadata header checksums are present, they are
merely intended to detect accidental corruption, rather
than intentional, and can be easily bypassed.
7.3 Employing the Vast Address Space
Archipelego [26] randomly places objects throughout the
vast 64-bit address space in order to trade the address
space for security and reliability. Thus, the probability of
overﬂowing real data can be effectively reduced. Cling
also utilizes the vast address space to tolerate use-after-
free problems [2].
8 Conclusion
This paper introduced GUARDER, a novel secure allo-
cator that provides an unprecedented security guaran-
tee among all existing secure allocators. GUARDER
proposes the combination of allocation and deallocation
buffers to support different customizable security guar-
antees, including randomization entropy, guard pages,
and over-provisioning. Overall, GUARDER implements
almost all security features of other secure allocators,
while only imposing 3% performance overhead, and fea-
turing comparable memory overhead.
Acknowledgment
We thank the anonymous reviewers for their invaluable
feedback. This work is supported in part by National
Science Foundation (NSF) under grants CNS-1812553,
CNS-1834215, AFOSR award FA9550-14-1-0119, and
ONR award N00014-17-1-2995.
References
[1] Heartbleed, 2014.
[2] AKRITIDIS, P. Cling: A memory allocator to mit-
igate dangling pointers. In Proceedings of the 19th
USENIX Conference on Security (Berkeley, CA,
USA, 2010), USENIX Security’10, USENIX As-
sociation, pp. 12–12.
[3] AKRITIDIS, P., CADAR, C., RAICIU, C., COSTA,
M., AND CASTRO, M. Preventing memory error
exploits with wit. In Proceedings of the 2008 IEEE
Symposium on Security and Privacy (Washington,
DC, USA, 2008), SP ’08, IEEE Computer Society,
pp. 263–277.
[4] AKRITIDIS, P., COSTA, M., CASTRO, M., AND
HAND, S. Baggy bounds checking: an efﬁcient
and backwards-compatible defense against out-of-
In Proceedings of the 18th con-
bounds errors.
ference on USENIX security symposium (Berkeley,
CA, USA, 2009), SSYM’09, USENIX Association,
pp. 51–66.
[5] BERGER, E. D., MCKINLEY, K. S., BLUMOFE,
R. D., AND WILSON, P. R. Hoard: a scalable
memory allocator for multithreaded applications.
In ASPLOS-IX: Proceedings of the ninth interna-
tional conference on Architectural support for pro-
gramming languages and operating systems (New
York, NY, USA, 2000), ACM Press, pp. 117–128.
[6] BERGER, E. D., AND ZORN, B. G. Diehard: Prob-
abilistic memory safety for unsafe languages.
In
Proceedings of the 27th ACM SIGPLAN Confer-
ence on Programming Language Design and Im-
plementation (New York, NY, USA, 2006), PLDI
’06, ACM, pp. 158–168.
[7] BHATKAR, E., DUVARNEY, D. C., AND SEKAR,
R. Address obfuscation: an efﬁcient approach to
combat a broad range of memory error exploits. In
In Proceedings of the 12th USENIX Security Sym-
posium (2003), pp. 105–120.
[8] BHATTI, N., AND FRIEDRICH, R. Web server sup-
port for tiered services. Netwrk. Mag. of Global In-
ternetwkg. 13, 5 (Sept. 1999), 64–71.
USENIX Association
27th USENIX Security Symposium    131
[9] BITTAU, A., BELAY, A., MASHTIZADEH, A.,
MAZI `ERES, D., AND BONEH, D. Hacking blind.
In Proceedings of the 2014 IEEE Symposium on Se-
curity and Privacy (Washington, DC, USA, 2014),
SP ’14, IEEE Computer Society, pp. 227–242.
[10] CABALLERO, J., GRIECO, G., MARRON, M.,
AND NAPPA, A. Undangle: early detection of dan-
gling pointers in use-after-free and double-free vul-
In Proceedings of the 2012 Interna-
nerabilities.
tional Symposium on Software Testing and Analysis
(New York, NY, USA, 2012), ISSTA 2012, ACM,
pp. 133–143.
[11] CURTSINGER, C., AND BERGER, E. D. Stabilizer:
Statistically sound performance evaluation. In Pro-
ceedings of the Eighteenth International Confer-
ence on Architectural Support for Programming
Languages and Operating Systems (New York, NY,
USA, 2013), ASPLOS ’13, ACM, pp. 219–228.
[12] CVE.
Cve-2017-0144.
https://www.cve.
mitre.org/cgi-bin/cvename.cgi?name=
CVE-2017-0144.
[13] GROSS, D. TLS performance overhead and cost
on gnu/linux.
http://david-grs.github.
io/tls_performance_overhead_cost_linux,
2016.
[14] HANSON, D. R. A portable storage management
system for the icon programming language, 1980.
[15] INC., G.
Partitionalloc design.
https:
//chromium.googlesource.com/chromium/
src/+/lkgr/base/allocator/partition_
allocator/PartitionAlloc.md.
[16] INC., G.
Partitionalloc source.
//chromium.googlesource.com/
chromium/blink/+/master/Source/wtf/
PartitionAlloc.h.
https:
[17] ISLAM, A., OPPENHEIM, N., AND THOMAS, W.
Smb exploited: Wannacry use of ”eternalblue”.
https://www.fireeye.com/blog/threat-
research/2017/05/smb-exploited-
wannacry-use-of-eternalblue.html, 2017.
J.-S.
[18] IWAHASHI, R., OLIVEIRA, D. A., WU, S. F.,
CRANDALL, J. R., HEO, Y.-J., OH, J.-T., AND
JANG,
Towards automatically generat-
ing double-free vulnerability signatures using petri
nets. In Proceedings of the 11th International Con-
ference on Information Security (Berlin, Heidel-
berg, 2008), ISC ’08, Springer-Verlag, pp. 114–
130.
[19] KHARBUTLI, M.,
JIANG, X., SOLIHIN, Y.,
VENKATARAMANI, G., AND PRVULOVIC, M.
Comprehensively and efﬁciently protecting the
heap. In Proceedings of the 12th International Con-
ference on Architectural Support for Programming
Languages and Operating Systems (New York, NY,
USA, 2006), ASPLOS XII, ACM, pp. 207–218.
[20] LEE, B., SONG, C., JANG, Y., WANG, T., KIM,
T., LU, L., AND LEE, W. Preventing use-after-
free with dangling pointers nulliﬁcation. In NDSS
(2015).
[21] LEE, B., SONG, C., KIM, T., AND LEE, W. Type
casting veriﬁcation: Stopping an emerging attack
vector. In Proceedings of the 24th USENIX Confer-
ence on Security Symposium (Berkeley, CA, USA,
2015), SEC’15, USENIX Association, pp. 81–96.
[22] LINUX COMUNITY. time - time a simple command
or give resource usage, 2015.
[23] LIU, T., CURTSINGER, C., AND BERGER, E. D.
Doubletake: Fast and precise error detection via
evidence-based dynamic analysis. In Proceedings
of the 38th International Conference on Software
Engineering (New York, NY, USA, 2016), ICSE
’16, ACM, pp. 911–922.
[24] LU, K., SONG, C., LEE, B., CHUNG, S. P.,
KIM, T., AND LEE, W. Aslr-guard: Stopping
address space leakage for code reuse attacks.
In
Proceedings of the 22Nd ACM SIGSAC Conference
on Computer and Communications Security (New
York, NY, USA, 2015), CCS ’15, ACM, pp. 280–
291.
[25] LU, S., LI, Z., QIN, F., TAN, L., ZHOU, P., AND
ZHOU, Y. Bugbench: Benchmarks for evaluating
bug detection tools. In In Workshop on the Evalua-
tion of Software Defect Detection Tools (2005).
[26] LVIN, V. B., NOVARK, G., BERGER, E. D.,
AND ZORN, B. G. Archipelago: Trading address
space for reliability and security. In Proceedings of
the 13th International Conference on Architectural
Support for Programming Languages and Operat-
ing Systems (New York, NY, USA, 2008), ASPLOS
XIII, ACM, pp. 115–124.
[27] MICROSOFT. Software defense: mitigating heap
https://blogs.
corruption vulnerabilities.
technet.microsoft.com/srd/2013/10/
29/software-defense-mitigating-heap-
corruption-vulnerabilities/.
132    27th USENIX Security Symposium
USENIX Association
[28] MOERBEEK, O.
for
openbsd. https://www.openbsd.org/papers/
eurobsdcon2009/otto-malloc.pdf, 2009.
A new malloc(3)
[29] NIST. National vulnerability database.
[30] NOVARK, G., AND BERGER, E. D. DieHarder:
securing the heap. In Proceedings of the 17th ACM
conference on Computer and communications se-
curity (New York, NY, USA, 2010), CCS ’10,
ACM, pp. 573–584.
[31] OWENS, K., AND PARIKH, R.
Fast random
number generator on the intel R(cid:13) pentium R(cid:13) 4 pro-
cessor. https://software.intel.com/en-us/
articles/fast-random-number-generator-
on-the-intel-pentiumr-4-processor/,
March 2012.
Conference on Computer Systems (New York, NY,
USA, 2017), EuroSys ’17, ACM, pp. 405–419.
[37] WIKIPEDIA. Dangling pointer.
https://en.
wikipedia.org/wiki/Dangling_pointer,
September 2016.
2016.
Last updated: September 1,
[38] YASON, M. Windows 10 segment heap inter-
https://www.blackhat.com/docs/us-
nals.
16/materials/us-16-Yason-Windows-10-
Segment-Heap-Internals-wp.pdf, 2016.
[39] YOUNAN, Y. Freesentry: protecting against use-
after-free vulnerabilities due to dangling pointers.
In NDSS (2015).
[32] SEREBRYANY, K., BRUENING, D., POTAPENKO,
A., AND VYUKOV, D. AddressSanitizer: a fast
In Proceedings of the
address sanity checker.
2012 USENIX conference on Annual Technical
Conference (Berkeley, CA, USA, 2012), USENIX
ATC’12, USENIX Association, pp. 28–28.
[40] YOUNAN, Y., JOOSEN, W., AND PIESSENS, F.
Efﬁcient protection against heap-based buffer over-
In Proceedings
ﬂows without resorting to magic.
of the 8th International Conference on Information
and Communications Security (Berlin, Heidelberg,
2006), ICICS’06, Springer-Verlag, pp. 379–398.
[33] SILVESTRO, S., LIU, H., CROSSER, C., LIN, Z.,
AND LIU, T. Freeguard: A faster secure heap
In Proceedings of “24th ACM Confer-
allocator.
ence on Computer and Communications Security
(CCS’17)”.
[34] SZEKERES, L., PAYER, M., WEI, T., AND SONG,
D. Sok: Eternal war in memory. In Proceedings
of the 2013 IEEE Symposium on Security and Pri-
vacy (Washington, DC, USA, 2013), SP ’13, IEEE
Computer Society, pp. 48–62.
[35] VALASEK, C. Understanding the low fragmenta-
tion heap, 2010.
[41] YOUNAN, Y., YOUNAN, Y.,
JOOSEN, W.,
JOOSEN, W., PIESSENS, F., PIESSENS, F., EYN-
DEN, H. V. D., AND EYNDEN, H. V. D. Security
of memory allocators for c and c++. Tech. rep.,
2005.
[42] ZHOU, J., SILVESTRO, S., LIU, H., CAI, Y., AND
LIU, T. Undead: A featherweight deadlock detec-
tion and prevention system for production software.
In the submission of “the 39th International Con-
ference on Software Engineering (ICSE’17)”.
[36] VAN DER KOUWE, E., NIGADE, V., AND GIUF-
FRIDA, C. Dangsan: Scalable use-after-free de-
In Proceedings of the Twelfth European
tection.
[43] ZOVI, D. Mac os xploitation. https://papers.
put.as/papers/macosx/2009/D1T1-Dino-
Dai-Zovi-Mac-OS-Xploitation.pdf, 2009.
USENIX Association
27th USENIX Security Symposium    133