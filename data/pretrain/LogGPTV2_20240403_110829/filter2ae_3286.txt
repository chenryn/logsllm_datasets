## 简介
Spring Data Redis 是 Spring Data 家族的一部分，旨在提供一种简便且高效的方式来访问 Redis 缓存。在最新版本中，当 Spring Data Redis 向 Redis 写入数据时，它默认会对这些数据进行序列化处理，并将序列化后的字节码存储到 Redis 中。同样地，在从 Redis 读取数据时，Spring Data Redis 会将获取到的字节码反序列化为原始对象。然而，在这一过程中，如果不对目标类进行适当的校验或过滤，则可能引发远程代码执行的风险。

## 攻击路径
1. **准备反序列化载荷**：攻击者可以参考 ysoserial 工具生成特定格式的恶意序列化数据。
2. **将载荷写入 Redis**：
   ```bash
   redis.set("\xac\xed\x00\x05t\x00\brebeyond", Payload)
   ```
   这里，`rebeyond` 成为了包含我们构造的恶意负载的新键名。为了提高触发几率，建议选择 Redis 中已存在的键值对来进行覆盖操作。
3. **等待 Spring 应用程序读取受影响的键**：一旦 Spring 应用尝试访问并反序列化这个被篡改过的键值对，就有可能激活其中隐藏的恶意代码。
4. **验证漏洞**：例如，若配置正确，Spring 执行环境将会成功弹出计算器程序作为示例结果，表明攻击成功。此时，可以看到类似以下的调用栈信息：

## 其他说明
- 该漏洞已在 JDK 1.8.0_144、Spring Framework 5.0.3 以及 Spring Data Redis 2.0.3 版本上得到验证。
- 使用了 commons-collections4:4.0 库来辅助实施攻击，但请注意，这并非必要条件；通过调整载荷的具体实现方式，也可以绕过对该库的依赖。

[1] 参考资料链接未给出，请根据实际需求添加具体文献引用。