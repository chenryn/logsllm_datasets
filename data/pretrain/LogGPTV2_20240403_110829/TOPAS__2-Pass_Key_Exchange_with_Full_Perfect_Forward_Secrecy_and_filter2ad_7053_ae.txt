negligible success probability which of the values queried to H(cid:48) is
equal to k. Then it can simply compute the answer to the CBDH
challenge as k1/z = e(g1, g2)xy.
3.2 Proof of Full PFS Security
THEOREM 3. The TOPAS protocol provides full PFS under the
(3, 3)-CBDHI, the KPA, and the MKCoCDH assumption.
In contrast to the previous security proof of enhanced weak PFS,
the adversary can also modify the messages sent and received by
the test-session in the security experiment for full PFS.
PROOF. Assume there exists an adversary A0 that breaks the
full PFS security of the protocol. In the following we will step-
wisely construct a chain of adversaries A0 to A6 such that A6
breaks the (3, 3)-CBDHI assumption. Each adversary Ai for i =
1, 2, 3, 4, 5, 6 is based on the existence of the previous one Ai−1.
Let us ﬁrst recall the essence of the security experiment when
proving full PFS security. Besides the setup parameters, the ad-
versary A0 is also given a = gx
1 H(idA)1/z, skA, H(idB) (but not
(H(idB))1/z). In response, the adversary computes b ∈ G1. Let
Y ∈ G1 be the value such that b = Y (H(idB))1/z. Next, the
challenger provides the adversary with skB = (H(idB))1/z. Now
since the adversary can distinguish K from a random key it must
query the corresponding
k = (e(b, gz
2 )/e(H(idB), g2))x = (e(a, gz
2 )/e(H(idA), g2))y
1 , ˆgt3
1 , ˆgt
2, ˆgt2
2 , ˆgt3
to the random oracle H. In the following we always assume, for
simplicity, that k is directly given to the challenger.
Attacker A6 will simulate the real security game to A5 using
a similar setup as in the proofs before. Assume we are given the
random CBDHI challenge consisting of G = (p, ˆg1, ˆg2, e) and
1, ˆgt2
2 ). Let us ﬁrst show how the simulator will
(ˆgt
construct the ﬁrst part of the public parameters in mpk that are to be
given to A5. Again we let the simulator output gz
2 as part of
mpk. Internally, it will also set gzi
2 for i = 2, 3. This implic-
itly sets msk = z = t. The simulator draws random r, s ∈ Zp and
sets sets h2 = gs
2 for
some v ∈ Zp. This implicitly sets v = s − rz2. Observe that all
values are distributed exactly as in the original security game.
Next, the simulator draws a random coin q ∈ {0, 1} and a uni-
formly random rB ∈ Zp. Depending on q, the remaining setup
values will slightly differ. That is, the simulator sets
1 )rB and g1 = ˆgtq+1
H(idB) = (ˆgtq
1 )rB = (ˆgzq
2 )r = gvz
2 )s/(gz3
2 )r = gv
2 = ˆgti
= ˆgzq+1
2 and hz
2 = (gz
2/(gz2
2 = ˆgt
.
1
1
Observe that the simulator does not know skB in case q = 0.
However, in case q = 1 the simulator knows skB = (H(idB))1/z =
ˆgrB
1
For q = 0 and q = 1, the simulator programs the outputs of
the random oracle H for all inputs except for idB as follows: given
input idi (regardless of it being chosen by the adversary as part of
a Register query or not) it chooses a random value ri ∈ Zp and
1
1
1 = ˆgzq+1ri
2 together with k such that k = e(X, g∗
2 ). Since k = e(g1, g2)xyz, we must have g∗
outputs H(idi) := gri
. In this way, the simulator can
always compute a corresponding secret key as ski = ˆgzq ri
and
answer the Corrupt query. As in the previous proofs, all sessions
can be simulated with this setup except for the test-session.
Our next goal is to step-wisely construct attacker A5. It behaves
like A0 but outputs some additional values in case the simulator
correctly guesses the test-session (and its peer). We stress that A5
is an attacker against the full PFS security just like A0. Let us begin
our formal analysis. Assume we have a successful adversary A0.
ATTACKER A1. Attacker A1 will work exactly like A0 except
2 )/e(H(idB), g2) together with b and
that it outputs k1/x = e(b, gz
g1, X = a/skA = gx
1 at the end of the security game. Observe that
these values can easily be computed from the public values alone.
ATTACKER A2. Now, since A1 outputs k, X, k1/x, g1, by the secu-
rity of the Knowledge of Pairing Pre-Image assumption there also
exists an adversary A2 that works exactly like A1 except that it also
outputs g∗
2 ) and k1/x =
e(g1, g∗
2 = gyz
2 .
ATTACKER A3. Next, we show that if A2 wins the security game
against a PFS challenger we can construct an attacker A3 that can
win in the security of the MKCoCDH assumption.
Let us recall the security game of the Modiﬁed Knowledge of
Co-CDH Assumption. First A3 receives G, gz
2 and B(cid:48) ∈ G1. Next,
A3 outputs Y (cid:48) ∈ GT . As a response, the challenger outputs B(cid:48)1/z
and U(cid:48) ∈ G2 with e(B(cid:48), g2) · Y (cid:48) = e(g1, U(cid:48)). Finally, A3 outputs
W (cid:48). It wins if e(B(cid:48), g2) = e(g1, W (cid:48)).
We will now describe how A3 works using the values provided
to A2 by the PFS challenger and A2’s output values. We then argue
that A3 always wins given that A2 wins against the PFS challenger.
1 H(idA)1/z, skA, H(idB) be the values
Let, G, gz
provided by the full PFS challenger to A2. The input to A3 is
2 , B(cid:48) = H(idB). When A2 outputs b, k1/x, A3 will output
G, gz
Y (cid:48) = k1/x to its challenger. In response A3 receives (H(idB))1/z
and U(cid:48) from its challenger. The value (H(idB))1/z is used as input
to A2. The ﬁnal output of A2 is k and g∗
2 . A3 can now
compute W (cid:48) = U(cid:48)/gyz
2, a = gx
2 = gyz
2 , h2, hz
2 . Observe that W (cid:48) is correct since
(cid:48)
)/e(g1, g
(cid:48)
).
)/Y
= e(g1, U
∗
2 ) = e(g1, W
/g
(cid:48)
(cid:48)
(cid:48)
, g2) = e(g1, U
= e(g1, U
(cid:48)
e(B
∗
2 )
So whenever A2 succeeds in a security game with the PFS chal-
lenger so will A3 in the security game of the Modiﬁed Knowledge
of Co-CDH Assumption.
ATTACKER A4. Now by the security of the MKCoCDH assump-
tion, as A3 succeeds there exists another adversary A4 that works
exactly like A3 except that it also outputs i ∈ Zp, T ∈ GT together
with Y (cid:48) such that
(cid:48)
Y
= e(B
(cid:48)
, g2)i · e(g1, T ).
We stress again that in the above series of attackers we have that
if A0 wins so will A4.
ATTACKER A5. Let us now show another adversary A5 that con-
trols A4 and A2 to win against a PFS challenger while outputting
additional values besides what is required by deﬁnition. By con-
struction we have that the Modiﬁed Knowledge of Co-CDH at-
tacker A4 uses the PFS attacker A2 as a (black-box) subroutine.
In the following A5 will modify the communication between A4
and A2 and play the role of the PFS challenger against A2. A5
2, skA, H(idB), and a as
receives the setup parameters G, gz
2 ,, and H(idB) to A4. At the same time A5
input. It relays G, gz
2 , h2, hz
12322, hz
2 , hz
2 = gyz
2, skA, H(idB), a to A2. In response,
sends all values G, gz
A2 outputs b and k1/x to A5. The other attacker, A4, outputs k1/x
together with i, T to A5. However, A5 will output b and i, T , i.e. a
mix of the outputs by A4 and A2. Next, A5 receives (H(idB))1/z
from its PFS challenger. Attacker A5 simply relays this value to
A2. As a response A2 outputs k and g∗
2 . Both values are
ﬁnally output by A5. Observe that we have not completed the run
for A4. However, we know by our previous analysis that if A2 is
successful, so will A4 (if we complete the run of A4). However,
at this point it is hidden from A4’s view that we abort as all val-
ues given to A4 are distributed exactly as in the real security game.
Nevertheless, already at this point we must have that the values i, T
are such that Y (cid:48) = e(B(cid:48), g2)i · e(g1, T ) (otherwise A4 could not
win in case we completed the run with a winning A2). In all of this,
A5 will deal with any attack queries made by A2 to its PFS envi-
ronment by simply relaying them to its own PFS challenger and the
corresponding answers back to A2.
ATTACKER A6. We will now present an attacker A6 that can break
the CBDHI assumption by using attacker A5. A6 will, using the
CBDHI challenge, simulate all sessions (except for the test-session)
as described before. Let us now turn our attention to the test-
session. We have to consider two cases: either it holds for the value
i output by A5 that i (cid:54)= −1 or i = −1.
Let us ﬁrst consider the case where i (cid:54)= −1. With probability at
least 1/2 we have that q = 0. In this case, it holds that H(idB) =
ˆgrB
1 . We also have that
e(b, gz
2 )
= e(Y, gz
2 ) = e(H(idB), g2)i · e(g1, T ).
e(H(idB), g2)
This directly gives(cid:18) e(b, gz
2 )
e(g1, T )
(cid:19)1/rB (i+1)
= e(ˆg1, ˆg2)1/z.
It is important to observe that in case i (cid:54)= −1 the simulator does
not need to know H(idB)1/z.
It can already break the CBDHI
assumption just after receiving b and (i, T ).
Now let us turn our attention to the case where i = −1.
In
this case, with probability at least 1/2 we have that q = 1 and
H(idB) = (ˆgt)rB and A6 knows skB = ˆgr1. It can thus success-
fully send skB to the adversary A5 and receive back gzy
2 . Since
i = −1 we have e(b, gz
2 ) = e(Y grB /z2
2 ) = e(g1, T ). It holds that
) = e(g1, T ).
, gz
2 ) = e(g1, gzy+rB /z
e(b, gz
1
2
This immediately shows that T /gzy
solution to the complexity challenge as
2 = grB /z
2
. We ﬁnally get a
e(ˆg1, T /gzy
2 )1/rB = e(ˆg1, ˆg2)1/z.
This completes the proof of security.
4. HIGHER EFFICIENCY
TOPAS+ is a variant of our protocol that features higher efﬁ-
ciency in the key derivation process (Figure 2). Essentially, it is
equivalent to our ﬁrst protocol except that now only one interme-
diate value k is computed and fed into the hash function H(cid:48). As
a consequence we can have a shorter master public key. More im-
portantly, when computing K each party only needs to apply two
pairings one of which is message-independent and only needs to
be computed once for every communication partner. The secu-
rity proof of this variant will additionally rely on a variant of the
so-called Strong Difﬁe-Hellman (SDH) assumption. Basically, it
Alice (A)
skA = (H(idA))1/z
x $← Zp
b ∈ G1?
Bob (B)
skB = (H(idB))1/z
y $← Zp
a ∈ G1?
a = gx
b = gy
1 skA
1skB
kA = (e (b, gz
KA = H(cid:48)(kA, idA, idB, a, b)
2) /e(H(idB), g2))x
kB = (e (a, gz
KB = H(cid:48)(kB, idA, idB, a, b)
2) /e(H(idA), g2))y
Figure 2: Overview of TOPAS+. The KGC maintains public pa-
rameters mpk containing g1, g2, gz
2 , p, a description of the pairing
e, and descriptions of two hash functions H : {0, 1}∗ → G1 and
H(cid:48) : {0, 1}∗ → {0, 1}∗. These parameters are available to all par-
ties. The master secret msk consists of z and is used by the KGC to
derive the user secret keys as ski = (H(idi))1/z.
states that the assumptions used in the proofs of key indistinguisha-
bility, security against reﬂection, KCI, and full PFS attacks remain
valid even if the adversary has access to an oracle Oz2 (·,·) with the
following property: given ˜k ∈ GT , ˜k∗ ∈ GT , Oz2 (·,·) outputs 1
iff ˜kz2
= ˜k∗ and 0 otherwise.
DEFINITION 13. We say that the (k, l)-CBDHI’ assumption
holds, if the (k, l)-CBDHI assumption holds even when the adver-
sary is additionally given access to oracle Oz2 (·,·) in the CBDHI
security game. Likewise we say that the (k, l)-GCBDHI’ assump-
tion holds if the (k, l)-GCBDHI assumption holds even when the
adversary is additionally given access to oracle Oz2 (·,·) in the