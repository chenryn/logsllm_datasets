# 技术分享：如何在.ipa文件中进行iOS代码注入

## 译文声明
本文为翻译文章，原文来源：[medium.com](https://medium.com)。译文仅供参考，具体内容及含义请以原文为准。

**翻译者**：骨哥_2015  
**预估稿费**：200 RMB  
**投稿方式**：发送邮件至 [linwei@360.cn](mailto:linwei@360.cn)，或访问 [网页版](http://bobao.360.cn/contribute/index) 在线投稿

---

## 前言
代码注入是将外部代码插入现有软件系统的过程。本文将介绍在iOS应用程序上执行代码注入所需的工具和技术。使用Xcode工具可以创建一个实验，展示iOS代码注入的行为。总体思路是创建一组独立的代码，并将其与最终的应用程序打包在一起，以便以某种方式执行新的代码。

**注意**：本文中的代码注入过程已在iOS 9.3、10.0.2以及Xcode v7.3和v8.0环境下测试成功，其他版本尚未测试。

我们可以通过Xcode使用以下两种方法创建独立的二进制包：
- 动态链接库（Cocoa Touch Framework）
- 静态链接库（Cocoa Touch Static Library）

### 动态链接库 vs 静态链接库
- **静态链接库**：在编译时链接代码。为了执行代码，静态链接库需要在.ipa文件编译期间可用。静态链接库不支持Swift，且没有已知的方法指导.ipa文件加载静态链接库。因此，我们需要将其转换为动态链接库。
- **动态链接库**：在运行时链接代码。Xcode在编译期间需要依赖动态链接库/框架，但不保证这些依赖包被打包进应用程序中。因此，有时可能会遇到加载动态链接库时的错误，例如：
  ```
  dyld: Library not loaded: @rpath/libswift_stdlib_core.dylib
  ```
  我们可以为动态链接库构建Swift代码，并在启动应用程序之前将其加载到内存中，以便在.ipa文件中执行dylib命令。

选择动态链接库作为自定义代码包，让我们使用Xcode来演示代码注入的概念验证（Proof of Concept, POC）。

## 步骤
1. 创建一个新的Xcode项目。
2. 创建一个新的iOS应用程序目标。
3. 创建一个新的“Cocoa Touch Framework”目标，命名为“PatchPGO”。
4. 创建一个新的Objective-C Cocoa Touch类，命名为“PatchLoader”。在.m文件中添加以下方法：
   ```objective-c
   @implementation PatchLoader 
   static void __attribute__((constructor)) initialize(void) { 
       NSLog(@"==== Code Injection in Action ===="); 
       // 注入代码放在这里
   } 
   @end
   ```
   使用`static void __attribute__((constructor))`修饰符，确保在应用程序启动前将类加载到内存中，这样就可以指定我们想要做的事情。你可以将其视为要插入iOS应用程序代码的“入口点”。

5. 运行iOS应用程序目标，确保日志控制台的输出与代码注入之前所期望的一样。
6. 将动态链接库框架文件与iOS应用程序目标链接，确保框架被嵌入。在iOS应用程序目标的创建阶段，确保“Destination”选择了“Frameworks”，并且在“Embed Frameworks”下方嵌入了你的framework。
7. 现在你的iOS应用程序目标已正确链接，运行它并观察日志控制台。我们的NSLog信息已成功注入到iOS应用程序目标中。

请注意，我们已观察到应用程序目标行为的改变，但应用程序目标的代码尚未被修改。Xcode在代码签名和安装修改后的应用程序之前，已悄悄地将库链接到了目标。在上面的注入实验中，开发人员拥有应用程序的源代码。接下来，让我们在没有源代码的情况下，尝试将代码注入到.ipa文件中。

## 在.ipa文件中进行代码注入POC
步骤如下：
1. 下载.ipa文件。你也可以通过第三方网站（例如：[www.iphonecake.com](http://www.iphonecake.com)）下载破解的.ipa文件。
2. 下载optool或克隆我的repository。这个repository实现了在.ipa文件中加载dylibs，包含了optool和一个“patchapp.sh”脚本，详细信息请参阅README文件。
3. 在iOSDylibInjectionDemo目录中创建一个文件夹，用于包含我们将注入到.ipa文件中的动态链接库的二进制文件，命名为‘Dylibs’。
4. 进入Framework文件夹（你在上面利用Xcode创建的实验），检查Framework文件夹中的内容。如何在XCode中定位动态框架的文件夹位置：右键单击 -> 选择“Show in Finder”。

找到与框架文件夹同名的文件，这个文件即是我们需要通过它来修改.ipa文件的动态链接库二进制文件。将这个二进制文件复制到第3步创建的文件夹中。此时你的文件夹应该像下面这样：

**Dylibs文件夹已包含了我们的自定义的动态链接库代码**

如果你的动态链接库包含Swift代码，你需要将标准的Xcode Swift dylib库复制到“Dylibs”文件夹中。Swift dylibs可以在本地路径 `/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift` 下找到。

这时添加了标准Swift dylib文件后的文件夹目录应该看起来像下面这样：

**为代码注入而准备的标准Swift dylib**

将.ipa文件修改的过程称为“Patching”。进入iOSDylibPatchingDemo文件夹，并在终端中运行以下命令：
```sh
sh ./patchapp.sh cracked.ipa ./DYLIBS
```
其中，“cracked.ipa”是要“Patch”的ipa文件，“./DYLIBS”是要“Patch”的dylib文件夹。然后会输出一个经过“Patch”的名为“cracked-patch.ipa”的.ipa文件，并完成代码注入过程。但是，在这一点上，我们不能安装或侧载这个.ipa文件到任何非越狱设备上，因为即使“cracked-patch.ipa”有注入代码，在对其内容进行了调整和修改之后，.ipa代码签名也是无效的。

从 [Cydia Impactor](https://cydiaimpactor.com) 下载Cydia Impactor。Cydia Impactor是一款允许我们安装任意.ipa文件到非越狱设备的工具，并允许我们通过重签名的.ipa文件使用与该设备相关联的有效配置文件和凭据。

**Cydia Impactor Mac App**

您可以通过将“cracked-patch.ipa”拖放到Cydia Impactor Mac App中开始.ipa安装过程，随后它将提示你输入苹果开发者的用户名和密码。

**Cydia Impactor在安装期间会请求输入你的苹果开发者用户名和密码**

Cydia Impactor (CI) 会尝试登录到你的苹果开发者中心并下载你的配置文件以及在本地keychain中检索你的iOS开发证书。CI将以深度优先的方式从最深的文件夹级别开始，尝试对.ipa文件内容进行签名，使其达到.ipa文件夹级别。在此之后，CI将.ipa文件安装并侧载到指定的设备。在这个过程中，设备会将.ipa文件认为是由用户开发和签名的，因此允许修改应用并在设备上成功启动。如果你不喜欢Cydia Impactor，你也可以手动对.ipa文件进行重签名，然后使用Xcode将.ipa文件侧载到设备。

**Patching .ipa文件过程**
- 签名和安装.ipa文件到非越狱设备的过程
- 观察日志控制台，并搜索我们之前插入到动态链接库中的NSLog消息："==== Code Injection in Action ===="。如果能够找到这个日志消息，那么你可以开始庆祝了，因为你已经成功地在iOS .ipa文件上执行了代码注入。你可以针对任何.ipa文件执行这个代码注入过程。

## 一些邪恶的想法
- 键盘记录
- 方法替换（Method Swizzling）
- 通过Objective-C运行时获取类、实例变量、属性和方法的信息
- 获取注册类列表

有了以上的这些想法，恶意开发人员可以读取任何一个应用程序中的所有类和实例变量，并利用这些信息为恶意攻击做准备。最重要的是，无需使用越狱设备。

如果你有兴趣阅读关于使用这种代码注入技术来破解一个真正的应用程序，这里是我的下一篇博客：[Hacking the Pokémon Go iOS App with 3 Classes](https://medium.com/@kennethpoon/hacking-the-pokemongo-ios-app-with-3-classes-4b81589a9f39#.kz2vey8ir)

## 总结
经过本篇文章用以描述整个iOS代码注入过程后，我个人认为允许任何人对.ipa文件进行重签名的功能是一个严重的安全缺陷。一旦一个.ipa文件被签名后，它应该是不可改变的。任何企图破坏其内容的行为都应被认为是被破坏的。iOS设备不应该允许这类.ipa文件启动。

我希望读者对这篇文章有更深刻的见解，欢迎评论或通过 [PI:EMAIL](mailto:linwei@360.cn) 联系我。