# 一、概述
Flask 如果在生产环境中开启 debug 模式，就会产生一个交互的 shell ,可以执行自定义的 python 代码。在较旧版本中是不用输入 PIN
码就可以执行代码，在新版本中需要输入一个 PIN 码。  
在同一台机器上，多次重启 Flask 服务，PIN 码值不改变，也就是说 PIN 码不是随机生成的，有一定的生成方法可循。接下来，我们来具体地分析一下
PIN 码的生成流程
本文章的分析都是基于 python2.7 的。
# 二、PIN码生成流程分析
本次调试环境：
  * python2.7
  * window10
  * flask1.1.2
这里就使用 pycharm 进行调试。  
示例代码如下，在 app.run 设置断点  
按 F7 进入 Flask 类的 run 方法 ,  
位置`python2.7\Lib\site-packages\flask\app.py(889~995)`，  
这里都是一些变量的加载，不用理会，多次按 F8 直到 `run_simple()` 函数调用。  
按 F7 进入 `run_simple()`,位置`python2.7\Lib\site-packages\werkzeug\serving.py(876~971)`，这里判断了是否使用 debug 调试，有的话就调用
`DebuggedApplication` 类  
按 F7 进入，位置 `python2.7\Lib\site-packages\werkzeug\debug\__init__.py(220~498)`,从`DebuggedApplication` 的
`__init__` 初始化操作中，有一个判断，如果启用 PIN，及 `self.pin` 存在值，就会通过 `_log()` 函数，将 PIN
码打印到出来。  
ctrl+鼠标左击进入 `self.pin`，这里使用了 `@property` 装饰器， `@property`
就是负责把一个方法变成属性调用的，方便定义属性的 get 和 set 方法。可以看到调用了 `get_pin_and_name()` 对 PIN 进行赋值。  
ctrl+鼠标左击进入 `get_pin_and_name()`，位置 `python2.7\Lib\site-packages\werkzeug\debug\__init__.py(137~217)`,这里就是生成PIN码的重点代码
    def get_pin_and_cookie_name(app):
        """Given an application object this returns a semi-stable 9 digit pin
        code and a random key.  The hope is that this is stable between
        restarts to not make debugging particularly frustrating.  If the pin
        was forcefully disabled this returns `None`.
        Second item in the resulting tuple is the cookie name for remembering.
        """
        pin = os.environ.get("WERKZEUG_DEBUG_PIN")
        rv = None
        num = None
        # Pin was explicitly disabled
        if pin == "off":
            return None, None
        # Pin was provided explicitly
        if pin is not None and pin.replace("-", "").isdigit():
            # If there are separators in the pin, return it directly
            if "-" in pin:
                rv = pin
            else:
                num = pin
        modname = getattr(app, "__module__", app.__class__.__module__)
        try:
            # getuser imports the pwd module, which does not exist in Google
            # App Engine. It may also raise a KeyError if the UID does not
            # have a username, such as in Docker.
            username = getpass.getuser()
        except (ImportError, KeyError):
            username = None
        mod = sys.modules.get(modname)
        # This information only exists to make the cookie unique on the
        # computer, not as a security feature.
        probably_public_bits = [
            username,
            modname,
            getattr(app, "__name__", app.__class__.__name__),
            getattr(mod, "__file__", None),
        ]
        # This information is here to make it harder for an attacker to
        # guess the cookie name.  They are unlikely to be contained anywhere
        # within the unauthenticated debug page.
        private_bits = [str(uuid.getnode()), get_machine_id()]
        h = hashlib.md5()
        for bit in chain(probably_public_bits, private_bits):
            if not bit:
                continue
            if isinstance(bit, text_type):
                bit = bit.encode("utf-8")
            h.update(bit)
        h.update(b"cookiesalt")
        cookie_name = "__wzd" + h.hexdigest()[:20]
        # If we need to generate a pin we salt it a bit more so that we don't
        # end up with the same value and generate out 9 digits
        if num is None:
            h.update(b"pinsalt")
            num = ("%09d" % int(h.hexdigest(), 16))[:9]
        # Format the pincode in groups of digits for easier remembering if
        # we don't have a result yet.
        if rv is None:
            for group_size in 5, 4, 3:
                if len(num) % group_size == 0:
                    rv = "-".join(
                        num[x : x + group_size].rjust(group_size, "0")
                        for x in range(0, len(num), group_size)
                    )
                    break
            else:
                rv = num
        return rv, cookie_name
首先初始化了三个变量，都为 None,其中 rv 就是 PIN 的值，在分析过程中需要重点关注其值的变化。  
因为 PIN 为 None，所以第`150~159`的两个 if 不会执行，直接跳过。  
接下来，也是一些有关 PIN 生成变量的赋值。  
变量值赋值后的结果如下  
然后再对 `probably_public_bits` 和 `private_bits` 列表的元素进行 md5.update,update
会将每次字符串拼接,相当于对 `probably_public_bits、private_bits` 的所有元素加上 `cookiesalt` 和
`pinsalt` 字符串进行拼接一个长字符串，对这个长字符串进行md5加密，生成一个MD5加密的值，取前9位，赋值给num。  
最后将 num 的九位数的值分割成3个三位数，再用-连接3个三位数拼接，赋值给 rv，这个 rv 就是 PIN 的值。  
最后 PIN 的值如下  
# 三、PIN 码获取
从如上的 PIN 的生成流程分析，可以知道 PIN 主要由 `probably_public_bits` 和 `private_bits`
两个列表变量决定，而这两个列表变量又由如下6个变量决定：
  * username 启动这个 Flask 的用户
  * modname 一般默认 flask.app
  * `getattr(app, '__name__', getattr(app.__class__, '__name__'))` 一般默认 flask.app 为 Flask
  * `getattr(mod, '__file__', None)`为 flask 目录下的一个 app.py 的绝对路径,可在爆错页面看到
  * `str(uuid.getnode())` 则是网卡 MAC 地址的十进制表达式
  * `get_machine_id()` 系统 id
那又如何获取这6个变量呢？因为 modname 一般默认 flask.app，`getattr(app, '__name__',
getattr(app.__class__, '__name__'))` 一般默认 flask.app 为 Flask，所以主要获取剩下的4个变量即可。
## 1.liunx下PIN码获取
还是用上面流程分析的代码，在 linux 中运行。  
(1). uaername 可以从 `/etc/passwd` 中读取。这里是 root 用户启动的，所以值为 root，不知道哪个用户启动的，可以按照
`/etc/passwd` 里的用户多尝试一下。  
(2). `getattr(mod, '__file__', None)` flask 目录下的一个 app.py
的绝对路径,这个值可以在报错页面看到。但有个需注意，python3 是 app.py，python2 中是 app.pyc。这里值为
`/usr/local/lib/python2.7/dist-packages/flask/app.pyc`  
(3). `str(uuid.getnode())` MAC地址 读取这两个地址：`/sys/class/net/eth0/address` 或者
`/sys/class/net/ens33/address`  
转化为10进制，这里值为52228526895  
(4). `get_machine_id()` 系统id 。  
我们进入`get_machine_id()`，从代码中可以得知这里对linux、os、window的3种系统的获取方法。
    def get_machine_id():
        global _machine_id
        if _machine_id is not None:
            return _machine_id
        def _generate():
            linux = b""
            # machine-id is stable across boots, boot_id is not.
            for filename in "/etc/machine-id", "/proc/sys/kernel/random/boot_id":
                try:
                    with open(filename, "rb") as f:
                        value = f.readline().strip()
                except IOError:
                    continue
                if value:
                    linux += value
                    break
            # Containers share the same machine id, add some cgroup
            # information. This is used outside containers too but should be
            # relatively stable across boots.
            try:
                with open("/proc/self/cgroup", "rb") as f:
                    linux += f.readline().strip().rpartition(b"/")[2]
            except IOError:
                pass
            if linux:
                return linux
            # On OS X, use ioreg to get the computer's serial number.
            try:
                # subprocess may not be available, e.g. Google App Engine
                # https://github.com/pallets/werkzeug/issues/925
                from subprocess import Popen, PIPE
                dump = Popen(
                    ["ioreg", "-c", "IOPlatformExpertDevice", "-d", "2"], stdout=PIPE
                ).communicate()[0]
                match = re.search(b'"serial-number" = ]+)', dump)
                if match is not None:
                    return match.group(1)
            except (OSError, ImportError):
                pass
            # On Windows, use winreg to get the machine guid.
            try:
                import winreg as wr
            except ImportError:
                try:
                    import _winreg as wr
                except ImportError:
                    wr = None
            if wr is not None:
                try:
                    with wr.OpenKey(
                        wr.HKEY_LOCAL_MACHINE,
                        "SOFTWARE\\Microsoft\\Cryptography",
                        0,
                        wr.KEY_READ | wr.KEY_WOW64_64KEY,
                    ) as rk: