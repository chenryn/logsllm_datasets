# hctf 2018
周末队里的几个小伙伴抽空打了下今年的HCTF，最后排在第十名。以下是WP
## Bin
### seven
给了一个`.sys`系统驱动，ida依次点开几个函数，在`sub_1400012F0`中看到一段可疑代码：
    __int64 __fastcall sub_1400012F0(__int64 a1, __int64 a2)
    {
      __int64 v2; // rbx
      __int64 v3; // rsi
      unsigned __int64 v4; // rdx
      int p; // ecx
      __int16 *p_input; // rdi
      __int64 time; // rbp
      __int16 input; // dx
      char map_content; // dl
      CHAR *info; // rcx
      v2 = a2;
      if ( *(_DWORD *)(a2 + 48) >= 0 )
      {
        v3 = *(_QWORD *)(a2 + 24);
        v4 = (unsigned __int64)(*(unsigned __int64 *)(a2 + 56) * (unsigned __int128)0xAAAAAAAAAAAAAAABui64 >> 64) >> 3;
        if ( (_DWORD)v4 )
        {
          p = saved_p;
          p_input = (__int16 *)(v3 + 2);
          time = (unsigned int)v4;
          while ( *(_WORD *)(v3 + 4) )
          {
    LABEL_30:
            p_input += 6;
            if ( !--time )
              goto LABEL_31;
          }
          map[p] = '.';
          input = *p_input;
          if ( *p_input == 0x11 )
          {
            if ( p & 0xFFFFFFF0 )
            {
              p -= 16;
              goto LABEL_13;
            }
            p += 0xD0;
            saved_p = p;
          }
          if ( input != 0x1F )
            goto LABEL_14;
          if ( (p & 0xFFFFFFF0) == 0xD0 )
            p -= 0xD0;
          else
            p += 16;
    LABEL_13:
          saved_p = p;
    LABEL_14:
          if ( input == 0x1E )
          {
            if ( p & 0xF )
              --p;
            else
              p += 15;
            saved_p = p;
          }
          if ( input == 0x20 )
          {
            if ( (p & 0xF) == 15 )
              p -= 15;
            else
              ++p;
            saved_p = p;
          }
          map_content = map[p];
          if ( map_content == '*' )
          {
            info = "-1s\n";
          }
          else
          {
            if ( map_content != '7' )
            {
    LABEL_29:
              map[p] = 'o';
              goto LABEL_30;
            }
            info = "The input is the flag!\n";
          }
          saved_p = 16;
          DbgPrint(info);
          p = saved_p;
          goto LABEL_29;
        }
      }
    LABEL_31:
      if ( *(_BYTE *)(v2 + 65) )
        *(_BYTE *)(*(_QWORD *)(v2 + 184) + 3i64) |= 1u;
      return *(unsigned int *)(v2 + 48);
    }
可以看出这是一个走迷宫游戏，迷宫可以在data段中找到：
    ****************
    o..............*
    **************.*
    ************...*
    ***********..***
    **********..****
    *********..*****
    ********..******
    *******..*******
    ******..********
    *****..*********
    ****..**********
    ****7***********
    ****************
从代码中看出上左下右分别对应0x11，0x1e，0x1f，0x20，[搜索得到](https://bbs.csdn.net/topics/30139175)系统驱动中各个按键对应的值，即wasd，根据题目描述使用小写，得到flag：`hctf{ddddddddddddddssaasasasasasasasasas}`
### Lucky star
运行程序，输出了`LuckyStar!`，IDA`shift+f12`找字符串引用发现在`TlsCallback_0`中。
关于`TlsCallback`，只需要知道它会在程序运行之前被执行就行了。
`TlsCallback`开头做了一段奇怪的哈希检查，然后有一段检测进程的反调：
    do
        {
          v9 = 0;
          do
          {
            if ( !lstrcmpW(off_403508[v9], v8[15]) )
              goto LABEL_13;
            ++v9;
          }
          while ( v9  0 )
      {
        do
        {
          v5 = v4 & 3;
          if ( v4 & 3 )
          {
            v8 = flag[v2 - 1];
            if ( v5 == 1 )
            {
              v9 = flag[v2++];
              v7 = (v9 >> 4) | 16 * (v8 & 3);
            }
            else if ( v5 == 2 )
            {
              v10 = flag[v2++];
              v7 = (v10 >> 6) | 4 * (v8 & 0xF);
            }
            else
            {
              v7 = v8 & 0x3F;
            }
          }
          else
          {
            v6 = &flag[v2++];
            v7 = *v6 >> 2;
          }
          enc[v4++] = base64[v7];
        }
        while ( v4  0 )
    {
    do
    {
      v16 = 6;
      do
      {
        v17 = rand() % 4;
        v18 = v16;