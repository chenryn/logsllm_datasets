AASAAAA 
AAAASAA 
AAAAASA 
SAAAAAS 
ASAAAAA 
AAAAASS 
As  expected,  the  most  common  structure  simply  had  a  special 
character  appended  to  the  end of  it.  What’s  interesting  is  that  it 
was much more frequent for a special character to be followed by 
a digit than the other way around. This may be an indirect result 
of  password  change  policies,  where  people  became  used  to 
incrementing  their  base  password  by  one  each  time  they  are 
forced  to  select  a  new  password.  Looking  at  the  individual 
170passwords  which  contained  a  special  character  in  the  middle  of 
them, underscores, dashes, and periods were very popular to break 
up two words. For example: “ash_lee”. Letter replacements, such 
as replacing an ‘a’ with an ‘@’, were much less common. 
4.6 
Comparing the Attacks against Other 
Password Lists 
Now a legitimate concern with the previous tests is that while the 
training  passwords  and  the  test  passwords  were  different,  they 
both came from same website. It can be argued that this represents 
an unfair advantage for the attacker, and would not translate to a 
real world password cracking session. To that end, using the same 
dictionary  formed  from  the  RockYou  training  set,  password 
cracking  sessions  were  run  against  several  other  disclosed 
password lists using a maximum of 50k guesses. For more detail 
about these lists please see Appendix 1 and 2. As in the previous 
tests, these lists were divided by minimum password length. The 
results of these attacks can be seen in Fig. 4.6.1. 
Figure 4.6.1: 50k Guesses against Various Password Lists 
As can be seen, the cracking sessions against the RockYou_test1 
dataset actually performed worse than most of the other password 
lists. Much of this is probably due to user training, and the relative 
importance  of  the  passwords  to  the  users.  For  example,  the 
Neopets list for the most part represents young children. On the 
other  hand,  the PhpBB  list  was  a  development and  distributions 
site  for  the  PhpBB  bulletin  board  so  most  of  its  users  were 
webmasters and/or programmers. 
Another  point  of  interest  is  the  effectiveness  of  the  RockYou 
training  set  dictionary  compared  with  other  available  input 
dictionaries. To illustrate this, several cracking sessions were run 
against the FaithWriters password list. Since the FaithWriters and 
the  Singles.org  password  lists  were  both  composed  of  people 
almost  exclusively  of  the  Christian  faith,  another  targeted  input 
dictionary  was  created  from  the  Singles.org  list.  This  dictionary 
was  generated  in  the  same  way  as  the  dictionary  from  the 
RockYou  training  list.  Since  Singles.org  represented  a  much 
smaller  password  list,  it  only  contained  12,234  unique  words. 
Likewise  the  default  dictionary  provided  with  John  the  Ripper, 
passwords.lst  was  also  used.  Due  to  password.lst’s  very  small 
size,  (3,116  words),  the  default  John  the  Ripper  mangling  rules 
were also applied to generate some of the extra guesses required. 
All  three  input  dictionaries  were  then  allowed  to  make  10 
thousand  password  guesses  against  the  FaithWriters  list.  The 
results of this can be seen in Fig. 4.6.2. 
Figure 4.6.2: Different Dictionaries vs. the FaithWriters List 
As expected, the Singles.org dictionary performed slightly better 
initially, but it was too small of a sample size to compete with the 
custom  RockYou  dictionary  over  a  longer  password  cracking 
session.  Both  custom  dictionaries  performed  better  than  the 
default  John  the  Ripper  dictionary.  This  test  illustrates  that  the 
findings depicted in Section 4 can always be improved on as an 
attacker  gains  more  knowledge  about  their  target.  It  also  shows 
the severity of when a password list the size of the RockYou list is 
disclosed in how it can improve online password cracking attacks 
against other sites. 
Now  it  can  certainly  be  argued,  (with  good  reason),  that  the 
results  found  in  the  previous  tests  would  not  hold  true  if  an 
attacker was targeting corporate or bank passwords. One counter-
example to that criticism would be to point out that the popular 
micro-blogging website Twitter was once compromised due to a 
site  administrator  choosing  the  password  ‘happiness’  [27]. 
Needless to say, administrators and corporate employees are still 
human.  That  is  just  one  example  though,  and  we  freely  admit 
more research needs to be done on this subject.  
5. 
Designing New Password Creation 
Policies 
First let us start by defining several terms. An explicit password 
creation  policy  is  any  policy  that  can  lay  out  the  exact  rules  of 
what  constitutes  an  acceptable  password  to  the  user  before  the 
user creates their password. Examples of this are minimum length 
requirements,  character  type  requirements,  etc.  An  implicit 
password creation policy is any policy that has a reject function 
built into it based on estimated password strength. In addition, this 
reject  function  may  not  be  fully  apparent  to  the  user  until  they 
create their password and submit it to the system. An example of 
this  is  a  blacklist  of  “weak”  passwords  that  are  not  allowed. 
Finally,  an  external  password  creation  policy  is  a  policy  that 
changes a user’s password after it is created in an attempt to add a 
guaranteed amount of randomness. An example of this would be 
adding two random digits to the end of a user’s password. 
Second, it is important to note that the password creation policies 
discussed  in  this  section  are  done  so  in  regards  to  an  online 
password cracking attack. In an offline password cracking attack, 
it  is  assumed  that  an  attacker  can  make  hundreds  of  billions  of 
guesses,  if  not  more.  This  means  an  offline  password  cracking 
session is a much harder threat to defend against. As an example 
of  that,  some  of  our  earlier  work  cracking  the  phpbb.com  list 
using  two  desktop  computers  can  be  viewed  at  [11],  where  we 
171typing 
achieved over a 97% success rate during the course of a several 
month cracking session. 
As we’ve discussed in Section 4, while explicit password creation 
policies  can  frustrate  an  attacker  and  reduce  their  chances  of 
success, they still leave a system vulnerable to an online password 
cracking  attack  due  to  user  behavior.  Even  more  complex  rules 
such as requiring passwords to be 14 or even 21 characters long 
may  be  subverted  in  some  cases  by  users  choosing  common 
keyboard  combinations,  or  simply 
the  same  seven 
character password in two or three times. Another way of looking 
at  it  is  that  explicit  password  creation  policies  do  not  provide  a 
base level of security by themselves since people tend to follow 
common patterns. 
A very novel and intriguing idea was proposed in [12] to add a 
limited  amount  of  guaranteed  security  to  explicit  password 
creation policies by randomly selecting a policy when users create 
their passwords. Rules such as some users would have to include a 
digit in their password; while other users would be forbidden from 
using  numbers,  would  be  selected  with  a  random  chance.  Since 
the attacker would not know which set of rules the user created 
their  password  under,  they  would  then  have  to  structure  their 
attack to target multiple creation policies. One potential problem 
with this, besides user annoyance, is that this approach does not 
stop  a  user  from  selecting  a  weak  password  under  the  random 
policy. Since the number of policies is finite, an attacker may still 
be successful by guessing the most common passwords for each 
policy. 
External password creation policies have also been considered by 
several  researchers.  The  advantage  is  that  they  provide  a  set 
baseline of guaranteed randomness that is enforced by the system. 
This  guaranteed  randomness  is  imposed  by  allowing  the  user  to 
select  their  base  password,  and  then  adding  values  to  it  that  the 
user would then have to remember. In a way this can be thought 
of as a system selected PIN that has to be typed in along with the 
user’s password, though the PIN is incorporated directly into the 
password.  The  most  extreme  example  of  this  is  a  completely 
random password assigned to the user. There has been research to 
make this approach more user friendly, such as assigning the user 
a  random  passphrase  instead  of  a  random  password  [13].  Other 
approaches  have  attempted  to  add  randomness  after  the  user 
selects their password by appending or inserting random value to 
it.  The  user  would  then  have  to  remember  these  system  defined 
mangling rules as well. Perhaps the best study of this tactic has 
been [14] where researchers attempted to examine user acceptance 
of such a policy. One interesting point that they found was that as 
more intrusive creation policies, (where additional random values 
were inserted into the user’s password), were implemented, users 
started  selecting  simpler  base  passwords.  It’s  hard  to  fault  the 
users  for  this  behavior  since  there  is  a  limit  to  what  is  easily 
memorable.  
The main problem with external password creation policies is that 
they  only  function  effectively  if  they  are  applied  to  a  limited 
number  of  logins.  This  is  due  to  the  fact  that  the  system  added 
randomness  would  change  between  passwords  used  at  different 
sites. While this may be seen as a plus, as users would not be able 
to  re-use  the exact  same  password  across  multiple  accounts,  the 
chances  of  them  re-using  the  same  base  password  remains 
extremely  high.  In  addition,  the  main  coping  strategy  for 
remembering  a  large  number  of  passwords  that  were  created 
under external password creation policies would most likely result 
in a majority of users writing their passwords down. While it has 
been  argued  by  several  security  experts  that  writing  down  your 
passwords might not be a negative trend [15], at the very least we 
lose  the  flexibility  and  portability  that  fully  human  memorable 
passwords provide. 
This  leaves  us  with  implicit  password  creation  policies.  Besides 
being  used  on  their  own,  implicit  password  creation  policy  can 
also be combined with other password creation policies as well. 
For  example  a  blacklist  may  be  used  along  with  an  explicit 
creation rule requiring the user to include at least one uppercase 
letter. Also implicit policies by their very nature may need to be 
retrained  to  take  into  account  new  user  behavior  caused  by  the 
policy itself. To illustrate this, if the most common passwords are 
banned, new common passwords may appear. The goal then is to 
find  a  reject  function  that  forces  users  to  choose  passwords 
sufficiently different from each other to deter an online attack. 
As shown in the experiments in the previous section, a blacklist 
policy  covering  at  least  50,000  prohibited  passwords  seems  to 
provide  a  large  degree  of  security.  The  biggest  issue  with  a 
blacklist is that by itself it still may not provide enough security 
for high value systems. This was demonstrated in Fig 4.3.2 where 
even though the blacklist provided much more security than any 
of  the  other  explicit  policies,  it  still  had  a  failure  rate  of  0.84% 
when an attacker was allowed 4096 guesses. 
One potential solution to this problem is to take the grammar we 
described  in  a  previous  paper  [18]  and  use  it  to  evaluate  the 
probability of user selected passwords. In that paper, we designed 
a  password  cracking  program  that  was  trained  on  previously 
disclosed passwords. Our current version of this cracking program 
learns information such as the frequency people use certain words, 
case mangling, basic password structure, the probability of digits 
and special characters, etc. and uses that information to construct 
a  probabilistic  context  free  grammar  that  models  how  people 
select  passwords.  Our  password  cracker  then  proceeds  to  make 
guesses in probability order according to that grammar. In head to 
head  tests  with  existing  password  cracking  tools,  this  approach 
proved  to  be  much  more  successful  at  cracking  passwords.  We 
originally designed our cracker for law enforcement to help them 
deal with strong encryption, but we quickly found out that it was 
also useful for the defender to give an estimate on how strong a 
password actually was, or at least how different it was from the 
grammar that the password cracker was trained on. Therefore we 
can parse new passwords, and assign them a probability according 
to  a  previously  trained  grammar.  An  example  of  parsing  a 
password, using a simplified grammar, can be seen in Fig. 5.1. 
Figure 5.1 Parsing the Password “password123” 
172Once  we  have  a  probability  associated  with  a  password  we  can 
very easily build a reject function that will disallow any password 
whose probability falls above a set threshold. What’s more, since 
our  underlying  system  is  built  on  the  idea  of  context  free 
grammars,  it  becomes  simple  to  select  one  or  more  productions 
and  randomly  suggest  a  new  replacement  that  would  cause  the 
probability of the password to fall within acceptable limits. If the 
user  does  not  like  any  of  the  suggestions,  they  are  also  free  to 
select a new password on their own and resubmit it to the system. 
An example of this process is shown in Fig. 5.2. 
Figure 5.2: Rejecting a Weak Password and Suggesting a 
Stronger One 
Please  note:  the  probability  assigned  to  a  password  is  not  the 
probability of an attacker cracking it, but instead the probability of 
it  being  produced  by  our  grammar.  The  probability  threshold 
would  then  be  set  through  a  series  of  benchmarks  where  the 
remaining  passwords  productions  are  unlikely  enough  that  they 
don’t provide an attacker any high probability guesses to make.  
There  are  several  advantages  to  this  approach.  Almost  certainly 
the  most  important  one  is  that  the  probability  assigned  to  the 
different  mangling  rules  is  learned  from  analyzing  real  user 
behavior. This stands in stark contrast to methods like the NIST 
SP800-63  where  they  had  to  decide  if  uppercasing  a  letter  and 
adding digits was worth 6 bits vs. 8 bits of entropy. Second, our 
method assigns a probability score to an individual password vs. 
an  entire  password  creation  policy.  This  leaves  a  user  free  to 
construct  the  password  however  they  like  as  long  as  their 
password meets the acceptable probability threshold. For example 
the  user  could  choose  a  very  long  passphrase  of  all  lowercase 
letters, or have a much shorter password that included digits and 
capitalization. Furthermore, by displaying the base probabilities of 
the password, and suggesting new productions, our reject function 
could help educate users as well about what constitutes a strong 
password. In addition, by offering new suggestions or giving the 
user  a  chance  to  select  an  entirely  new  password,  our  reject 
function  works  very  similar  to  how  most  websites  and  online 
applications  recommend  new  usernames  when  the  selected  one 
has  already  been  taken.  This  may  help  drive  user  acceptance  of 
this implicit password creation policy. 
Just like our password cracking program can be retrained to target 
specific individuals, additional modifications can be made to our 
grammar  to  help  resist  targeted  attacks.  For  example  a  special 
dictionary  can  be  designed  to  match  usernames,  website  names, 
project  names,  project  acronyms,  e-mail  addresses,  etc  and  give 
them  a  higher  probability  then  they  normally  would  have.  This 
Conclusion 
would not stop a user from incorporating them in their password, 
but  it  would  require  them  to  apply  additional  non-standard 