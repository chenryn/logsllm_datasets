number of parameters would be advisable).
As in Example 1, the variables to be used are first declared and initialized (lines 1 through 12), with
the working precision being set to 25 in this case. The parameter words are converted into
decNumbers in lines 14–16.
The next four function calls calculate the result; first the rate is changed from a percentage (e.g., 6.5)
to a per annum rate (1.065). This is then raised to the power of the number of years (which must be a
whole number), giving the rate over the total period. This rate is then multiplied by the initial
investment to give the result.
Next (line 22) the result is rescaled so it will have only two digits after the decimal point (an exponent
of -2), and finally (lines 24–26) it is converted to a string and displayed.
12 User’s Guide Version 3.68
Example 3 – passive error handling
Neither of the previous examples provides any protection against invalid numbers being passed to the
programs, or against calculation errors such as overflow. If errors occur, therefore, the final result will
probably be NaN or infinite (decNumber result structures are always valid after an operation, but their
value may not be useful).
One way to check for errors would be to check the status field of the decContext structure after every
decNumber function call. However, as that field accumulates errors until cleared deliberately it is
often more convenient and more efficient to delay the check until after a sequence is complete.
This passive checking is easily added to Example 2. Replace lines 14 through 22 in that example with
(the original lines repeated here are unchanged):
1. decNumberFromString(&start, argv[1], &set); // parameter words
2. decNumberFromString(&rate, argv[2], &set);
3. decNumberFromString(&years, argv[3], &set);
4. if (set.status) {
5. printf("An input argument word was invalid [%s]\n",
6. decContextStatusToString(&set));
7. return 1;
8. }
9. decNumberDivide(&rate, &rate, &hundred, &set); // rate=rate/100
10. decNumberAdd(&rate, &rate, &one, &set); // rate=rate+1
11. decNumberPower(&rate, &rate, &years, &set); // rate=rate**years
12. decNumberMultiply(&total, &rate, &start, &set); // total=rate*start
13. decNumberRescale(&total, &total, &mtwo, &set); // two digits please
14. if (set.status & DEC_Errors) {
15. set.status &= DEC_Errors; // keep only errors
16. printf("Result could not be calculated [%s]\n",
17. decContextStatusToString(&set));
18. return 1;
19. }
Here, in the if statement starting on line 4, the error message is displayed if the status field of the set
structure is non-zero. The call to decContextStatusToString in line 6 returns a string which
describes a set status bit (probably “Conversion syntax”).
In line 14, the test is augmented by anding the set.status value with DEC_Errors. This ensures
that only serious conditions trigger the message. In this case, it is possible that the DEC_Inexact and
DEC_Rounded conditions will be set (if an overflow occurred) so these are cleared in line 15.
With these changes, messages are displayed and the main function ended if either a bad input
parameter word was found (for example, try passing a non-numeric word) or if the calculation could
not be completed (e.g., try a value for the third argument which is not an integer).6
6 Of course, in a user-friendly application, more detailed and specific error messages are appropriate. But here we are
demonstrating error handling, not user interfaces.
Version 3.68 User’s Guide 13
Example 4 – active error handling
The last example handled errors passively, by testing the context status field directly. In this example,
the C signal mechanism is used to handle traps which are raised when errors occur.
When one of the decNumber functions sets a bit in the context status, the bit is compared with the
corresponding bit in the traps field. If that bit is set (is 1) then a C Floating-Point Exception signal
(SIGFPE) is raised. At that point, a signal handler function (previously identified to the C runtime) is
called.
The signal handler function can either simply log or report the trap and then return (and execution will
continue as though the trap had not occurred) or – as in this example – it can call the C longjmp
function to jump to a previously preserved point of execution.
Note that if a jump is used, control will not return to the code which called the decNumber function
that raised the trap, and so care must be taken to ensure that any resources in use (such as allocated
memory) are cleaned up appropriately.
To create this example, modify the Example 1 code this time, by first removing line 18
(set.traps=0;). This will leave the traps field with its default setting, which has all the
DEC_Errors bits set, hence enabling traps for any of those conditions. Then insert after line 6 (before
the main function):
1. #include  // signal handling
2. #include  // setjmp/longjmp
3.
4. jmp_buf preserve; // stack snapshot
5.
6. void signalHandler(int sig) {
7. signal(SIGFPE, signalHandler); // re-enable
8. longjmp(preserve, sig); // branch to preserved point
9. }
Here, lines 1 and 2 include definitions for the C library functions we will use. Line 4 declares a global
buffer (accessible to both the main function and the signal handler) which is used to preserve the point
of execution to which we will jump after handling the signal.
Lines 6 through 9 are the signal handler. Line 7 re-enables the signal handler, as described below (in
this example this is in fact unnecessary as we will be ending the program immediately). This is
normally needed as handlers are disabled on entry, and need to be re-enabled if more than one trap is
to be handled.
Line 8 jumps to the point preserved when the program starts up (in the next code insert). The value,
sig, which the signal handler receives is passed to the preserved code. In this example, sig always
has the value SIGFPE, but in a more complicated program the same signal handler could be used to
handle other signals, too.
The next segment of code is inserted after line 11 of Example 1 (just after the existing declarations):
1. int value; // work variable
2.
3. signal(SIGFPE, signalHandler); // set up signal handler
4. value=setjmp(preserve); // preserve and test environment
5. if (value) { // (non-0 after longjmp)
6. set.status &= DEC_Errors; // keep only errors
7. printf("Signal trapped [%s].\n", decContextStatusToString(&set));
8. return 2;
9. }
14 User’s Guide Version 3.68
Here, a work variable is declared in line 1 and the signal handler function is registered (identified to
the C run time) in line 3. The call to the signal function identifies the signal to be handled (SIGFPE)
and the function (signalHandler) that will be called when the signal is raised, and enables the
handler.
Next, in line 4, the setjmp function is called. On its first call, this saves the current point of
execution into the preserve variable and then returns 0. The following lines (5–8) are then not
executed and execution of the main function continues as before.
If a trap later occurs (for example, if one of the arguments is not a number) then the following takes
place:
1. the SIGFPE signal is raised by the decNumber library
2. the signalHandler function is called by the C run time with argument SIGFPE
3. the function re-enables the signal, and then calls longjmp
4. this in turn causes the execution stack to be “unwound” to the point which was preserved in the
initial call to setjmp
5. the setjmp function then returns, with the (non-0) value passed to it in the call to longjmp
6. the test in line 5 then succeeds, so line 6 clears any informational status bits in the status field in
the context structure which was given to the decNumber routines and line 7 displays a message,
using the same structure
7. finally, in line 8, the main function is ended by the return statement.
Of course, different behaviors are possible both in the signal handler, as already noted, and after the
jump; the main program could prompt for new values for the input parameters and then continue as
before, for example.
Version 3.68 User’s Guide 15
Example 5 – compressed formats
The previous examples all used decNumber structures directly, but that format is not necessarily
compact and is machine-dependent. These attributes are generally good for performance, but are less
suitable for the storage and exchange of numbers.
The decimal32, decimal64, and decimal128 forms are provided as efficient, formats used for storing
numbers of up to 7, 16 or 34 decimal digits respectively, in 4, 8, or 16 bytes. These formats are similar
to, and are used in the same manner as, the C float and double data types.
Here’s an example program. Like Example 1, this is runnable as it stands, although it’s recommended
that at least the argument count check be added.
1. // example5.c -- decimal64 conversions
2. #include "decimal64.h" // decimal64 and decNumber library
3. #include  // for (s)printf
4.
5. int main(int argc, char *argv[]) {
6. decimal64 a; // working decimal64 number
7. decNumber d; // working number
8. decContext set; // working context
9. char string[DECIMAL64_String]; // number->string buffer
10. char hexes[25]; // decimal64->hex buffer
11. int i; // counter
12.
13. decContextDefault(&set, DEC_INIT_DECIMAL64); // initialize
14.
15. decimal64FromString(&a, argv[1], &set);
16. // lay out the decimal64 as eight hexadecimal pairs
17. for (i=0; i %s=> %s\n", argv[1], hexes, string);
23. return 0;
24. } // main
Here, the #include on line 2 not only defines the decimal64 type, but also includes the decNumber
and decContext header files. Also, if DECNUMDIGITS (see page 30) has not already been defined, the
decimal64.h file sets it to 16 so that any decNumbers declared will be exactly the right size to take
any decimal64 without rounding.
The declarations in lines 6–11 create three working structures and other work variables; the
decContext structure is initialized in line 13 (here, set.traps is 0).
Line 15 converts the input argument word to a decimal64 (with a function call very similar to
decNumberFromString). Note that the value would be rounded if the number needed more than 16
digits of precision.
Lines 16–19 lay out the decimal64 as eight hexadecimal pairs in a string, so that its encoding can be
displayed.
Lines 20–22 show how decimal64 numbers are used. First the decimal64 is converted to a
decNumber, then arithmetic could be carried out, and finally the decNumber is converted back to some
standard form (in this case a string, so it can be displayed in line 22). For example, if the input
argument were “79”, the following would be displayed on a big-endian machine:
16 User’s Guide Version 3.68
79 => 22 38 00 00 00 00 00 79 => 79
(On a little-endian machine the byte order would be reversed.)
The decimal32 and decimal128 forms are used in exactly the same way, for working with up to 7 or up
to 34 digits of precision respectively. These forms have the same constants and functions as decimal64
(with the obvious name changes).
Like decimal64.h, the decimal32 and decimal128 header files define the DECNUMDIGITS constant
(see page 30) to either 7 or 34 if it has not already been defined.
It is also possible to work with the decimal128 (etc.) formats directly, without converting to and from
the decNumber format; this is much faster when only the fixed-size formats are needed. Example 7
(see page 19) shows how to use the decQuad module for calculations in the 128-bit format.
Version 3.68 User’s Guide 17
Example 6 – Packed Decimal numbers
This example reworks Example 2, starting and ending with Packed Decimal numbers. First, lines 4
and 5 of Example 1 (which Example 2 modifies) are replaced by the line:
1. #include "decPacked.h"
Then the following declarations are added to the main function:
1. uint8_t startpack[]={0x01, 0x00, 0x00, 0x0C}; // investment=100000
2. int32_t startscale=0;
3. uint8_t ratepack[]={0x06, 0x5C}; // rate=6.5%
4. int32_t ratescale=1;
5. uint8_t yearspack[]={0x02, 0x0C}; // years=20
6. int32_t yearsscale=0;
7. uint8_t respack[16]; // result, packed
8. int32_t resscale; // ..
9. char hexes[49]; // for packed->hex
10. int i; // counter
The first three pairs declare and initialize the three parameters, with a Packed Decimal byte array and
associated scale for each. In practice these might be read from a file or database. The fourth pair is
used to receive the result. The last two declarations (lines 9 and 10) are work variables used for
displaying the result.
Next, in Example 2, line 5 is removed, and lines 14 through 26 are replaced by:
1. decPackedToNumber(startpack, sizeof(startpack), &startscale, &start);
2. decPackedToNumber(ratepack, sizeof(ratepack), &ratescale, &rate);
3. decPackedToNumber(yearspack, sizeof(yearspack), &yearsscale, &years);
4.
5. decNumberDivide(&rate, &rate, &hundred, &set); // rate=rate/100
6. decNumberAdd(&rate, &rate, &one, &set); // rate=rate+1
7. decNumberPower(&rate, &rate, &years, &set); // rate=rate**years
8. decNumberMultiply(&total, &rate, &start, &set); // total=rate*start
9. decNumberRescale(&total, &total, &mtwo, &set); // two digits please
10.
11. decPackedFromNumber(respack, sizeof(respack), &resscale, &total);
12.
13. // lay out the total as sixteen hexadecimal pairs
14. for (i=0; i // for printf
5.
6. int main(int argc, char *argv[]) {
7. decQuad a, b; // working decQuads
8. decContext set; // working context
9. char string[DECQUAD String]; // number->string buffer
10.
11. if (argc %s\n", argv[1], argv[2], string);
23. return 0;
24. } // main
This example is a complete, runnable program. Like Example 1, it takes two argument words,
converts them to a decimal format (in this case decQuad, the 34-digit format), adds them, and converts
the result back to a string for display.
Line 3 includes the decQuad header file. This in turn includes the other necessary header, decContext.
The context variable set is used to set the rounding mode for the conversions from string and for the
add, and its status field is used to report any errors (not checked in this example). No other field in the
context is used.
To compile and run this, only the files example7.c, decContext.c, and decQuad.c are needed.
To use the 16-digit format instead of the 34-digit format, change decQuad to decDouble and QUAD to
DOUBLE in the example. Note that in this case the file decQuad.c is still needed (must be compiled),
because decDouble requires decQuad.
Version 3.68 User’s Guide 19
Example 8 – Using decQuad with decNumber
This example shows how the decNumber and decQuad modules can be mixed, in this case to raise one
number to the power of another. (In this case, the use of the decQuad module could be avoided – this
is just to demonstrate how to use the two modules together.)
1. // example8.c -- using decQuad with the decNumber module
2.
3. #include "decQuad.h" // decQuad library
4. #include "decimal128.h" // interface to decNumber
5. #include  // for printf
6.
7. int main(int argc, char *argv[]) {