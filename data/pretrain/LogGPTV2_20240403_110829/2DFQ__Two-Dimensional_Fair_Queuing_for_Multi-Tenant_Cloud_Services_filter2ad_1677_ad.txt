share of resources in the long run.
Pessimistic Cost Estimation It is important to have a good
cost estimator to avoid bursty schedules in the short term.
Following from §h.z, we are most concerned about the case
when our cost estimate for a tenant is low and it transitions
to expensive requests; i.e. lrâ cr. If the scheduler mistakenly
estimates an expensive request to be cheap, the expensive re-
quest can occupy a worker thread for signißcantly longer than
the scheduler may have anticipated. If the scheduler mistak-
enly estimates multiple expensive requests to be cheap, then
they can concurrently block part of all of the thread pool. _is
will cause a burst of service to this tenant followed by a lull
once the scheduler incorporates the true cost and compen-
sates other tenants for this aggressive allocation. _e duration
Requesta1a2a3a4a5a6a7a8a9Requestc1c2c3Eligible W0012345678Eligible W0048Eligible W1-0.50.51.52.53.54.55.56.57.5Eligible W1-226Requestb1b2b3b4b5b6b7b8b9Requestd1d2d3Eligible W0012345678Eligible W0048Eligible W1-0.50.51.52.53.54.55.56.57.5Eligible W1-226…………W0a1d2…c1c2d1W1b1a2b2a3b3a4b4a5b5a6b6a7b7a8b8a9b9…▷ request j of tenant f
▷ dequeue to thread i
max Li
max= cr, otherwise we set Li
max, where α< ¸, but
max= αLi
tenants with cheap requests will maintain lower estimates and
remain on the high-index threads. _e α parameter allows us
to tune the trade-o(cid:242) between how aggressively we separate
predictable tenants from unpredictable ones, and how much
leeway a tenant has to send the occasional expensive request.
Bookkeeping: Refresh Charging When a tenant submits
cheap requests for a sustained period of time, zDFQE will
be susceptible to underestimation if the tenant transitions to
expensive requests. When this happens, Li
max will be a low
value that underestimates the expensive requests until their
cost can be incorporated into the estimator. As we outlined in
§h.z, up to N underestimated requests can run concurrently
due to this large feedback delay in updating the estimator.
Refresh charging is a ‘damage control’ mechanism that peri-
odically measures the resource usage of long-running requests
and incorporates measurements into the scheduler immedi-
ately. It lets us notice expensive requests quickly and imme-
diately charge the tenant for the excess cost while the request
is still running, short-circuiting the typical cost estimation
feedback loop. _e computational overhead for measuring re-
source consumption is non-negligible, so the scheduler must
strike a balance between frequent measurements and accept-
able overheads. In practice we found that refresh charging
every ¸§ms had no signißcant overhead.
Algorithm We summarize zDFQE in Figure 6.
6. EVALUATION
In this section, we evaluate the following goals: that zDFQ
provides smooth service to all tenants when request costs are
known, despite the presence of expensive requests; and that
zDFQE provides smooth service to predictable tenants when
request costs are unknown, despite the presence of unpre-
dictable requests.
150
(a) Top: service received by a small tenant over time,
measured in ¸§§ms intervals. Bottom: service lag in
seconds compared to an ideal GPS server.
(b) _read occupancy over time. Horizontal lines rep-
resent worker threads; shaded indicates the worker is
processing an expensive request, unshaded indicates
a cheap request.
Figure ˙: Synthetic workload described in §@.¸.¸.
(c) Standard deviation (in seconds) of a small tenant’s
service lag in the presence of increasingly many ex-
pensive tenants. Note that small tenant’s request exe-
cution time is §.§§¸s.
We implemented all schedulers in a discrete event simula-
tor where requests were scheduled across a ßxed number of
threads. We used synthetic workloads and traces from Azure
Storage [(cid:13),(cid:146)] to keep the server busy throughout the experi-
ments, but also ran experiments at lower utilizations.