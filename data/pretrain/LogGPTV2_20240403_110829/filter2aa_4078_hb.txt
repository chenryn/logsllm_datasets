和调试过程中 ， 后门常常被用于加快工作流程并避免强制矛旦芋开发人员 不断地对系统进行身份认证。
有时候， 开发人员在系统达到生产要求之后仍在系统中 留下这些后门 ， 从而既可以在出现意外故障
第 21 章 恶意代码与应用攻击
时使用 ， 也可以在系统处理他们没有访问权限的敏感数据时进行 " 偷看"。 除了开发商的后门外， 许
多类型的恶意代码感染系统井创建后 门 ， 允许恶意代码的开发者远程访问 受感染的系统。
无论怎样， 后门 不被记录到文档中 的性质使其成为系统安全的严重威胁， 尤其在后门未被记录
到文档中 却又被遗忘时更是如此。 如果开发人员离开了 公司 ， 那么他们可以利用后门访问系统、 检
索机密信息或参与行业破坏活动 。
2 1 .3.4 权限提升和 rootkit
一旦攻击者在一个系统上站稳脚跟， 他们通常会迅速进入第二个 目 标 将他们的访问权限从
正常的用户 账户扩展到更全面的管理访 问权限。 他们通过权限提升攻击来实现。
攻击者权限提升攻击的最常见方法之一是通过使用 rootkito rootkit 可 以从互联网上免费获得，
并且能够利用各种操作系统的 己知漏洞。 攻击者经常通过使用密码攻击或社会工程学攻击获得标准
的系统用户账号 ， 然后使用 r∞tkit 将他们的访问权限提高到 root(或系统管理员)级别。 这种从标准
到管理特权访 问 的提升被称为权限提升攻击。
系统管理员可 以采用一种简单的预防措施来保护他们的系统不会遭受大量的 r∞，tkit 攻击， 这其
实并不新鲜。 系统管理员必须关注针对其环境所使用操作系统而发布的新的补丁程序 ， 而且要始终
坚持应用这些修正措施。 这是一种加强网络以应对几乎所有 rootkit 攻击和许多其他潜在漏洞的简单
方法。
2 1 .4 Web 应用的安全性
Web 应用让你足不出户地购买在线机票、 查看电子邮件、 支付账单以及买卖股票。 今天， 几乎
所有交易都可 以在 Web 站点上完成， 许多站点更是允许人们通过其管理重要的事务。
Web 应用具有便利的优点， 随之而来的则是一系列新的攻击， 这些攻击使提供 Web 应用 的机构
可能面临安全风险。 接下来， 我们将介绍两种常见的 Web 应用程序攻击。 另外关于更多 Web 应用
安全的细节， 可 以查看第9章 " 安全脆弱性 、 威胁和对策 "。
21 .4.1 跨站脚本(XSS)攻击
当 Web 应用程序包含反射式输入类型时， 就容易 出现跨站脚本(XSS)攻击。 例如， 某个简单的
Web 应用程序只包含一个请求用户输入用户名 的文本框， 用户单击 " Submit" 按钮后， Web 应用程
序就会加载新的页面， 该页面显示消 息 " Hello， name " 。
正常情况下， 这个 Web 应用程序会按照设计运行。 但是， 怀有恶意的人可以利用该应用幸自字来
欺骗毫无疑心的第三方。 读者可能己经知道， 通过使用 气SCRIPT>" 与 "" 盯阻 标记，
就可以在 Web 页面嵌入一些脚本。 假设在 Name 字段中不输入名字 "Mike"， 而是输入下面的文本:
Mikealert ( ' hello ' ) 
Web 应用程序以 Web 页面形式 " 反射" 这个输入， 浏览器进程像处理其他任何 Web 页面一样
进行处理: 显示 Web 页面的文字部分以及执行脚本部分。 此时， 脚本只是打开一个显示 "Hello"
633
634
CISSP 官方学习指南(第 7 版)
的弹出式窗口。 不过， 完全可以嵌入更复杂、 更恶意的脚本， 比如请求用户提供密码并将密码传送
给恶意 的第三方。
此时， 你可能存在困惑: 某人是如何不幸落入这种攻击陷阱的? 毕竟， 在完成反射操作的 Web
应用程序所提供的输入文本框中， 你并不希望嵌入攻击 自 己 的脚本。 XSS 攻击的关键在于能够将表
单输入嵌入一个链接。 恶意攻击者可以创建一个 Web 页面， 该页面具有一个标题为 " Check yo旧
account at First Bank" 的链接， 并且该链接嵌入了 表单输入。 用户访问这个链接时 ， Web 页面显示
看似可信的 First Bank Web 站点， 该站点能够通过有效的 SSL 认证， 同时工具栏中显示正确的站点
地址。 但是， 这个站点随后会执行恶意攻击者在表单输入中嵌入的脚本， 并且看上去似乎是有效
Web 页面内 的正常操作 。
如何防御跨站脚本攻击? 在创建允许存在各种用户 输入的 Web 应用程序时， 必须保证执行输入
验证。 最基本的做法是: 一定不允许用 户在可反射输入宇段中输入标记 。 然而 ， 这种做
法并不能完全解决问题。 对于乐此不疲的攻击者来说， 总是能够找到其他一些巧妙的方法来攻击
Web 应用程序。 最佳的解决方案应当是: 首先确定许可的输入类型， 然后通过验证实际输入来确保
其与指定模式匹配。 例如， 如果 Web 应用程序具有一个允许用户输入年龄的文本框， 那么应当只接
受一到三位数字作为输入 ， 其他输入则被视为无效。
提示 :
更多 关于去\tìâff夸站脚本的过滤方法， 请查看 https://www.owasp.orglindex.phpIXSS_Filter_Evasion_
Cheat SheeL
2 1 .4.2 SQL 注入攻击
从组织的角度看， SQL 注入攻击甚至比 XSS 攻击更加危险。 与 XSS 攻击一样， SQL 注入攻击
也使用 了 Web 应用程序不期望的输入。 不过， SQL 注入攻击并不试图使用这样的输入来欺骗用户 ，
而是用于获得对 内 在数据库的未授权访 问 。
1 . 动态 Web 应用程序
在 Web 早期， 所有 Web 页面都是静态或无变化的 。 Web 站点管理员创建了含有信息的 W出 页
面并将其放置在 Web 服务器上， 用户则可 以使用各自 的 Web 浏览器在 Web 服务器上检索到 Web 页
面。 Web 很快跳出 了 上述静态模型， 这是由于用户希望能够根据 自 己的具体需要来访问 定制的信息。
例如， 某个银行站点的访问者不仅仅关心显示银行位置、 营业时间 以及服务等信息 的静态页面， 而
且还希望检索到包含个人账户相关信息的动态内容。 显然， Web 站点管理员不可能在 Web 服务器上
为不同用户创建包含个人账户信息的 Web 页面。 对于一家大型银行来说， 使用静态 Web 技术需要
维护数百万具有最新信息的页面 。 因此， 动态 Web 应用程序应运而生 。
在用户发出请求时， Web 应用程序利用数据库创建符合要求的 内 容。 仍然以银行为例， 某位用
户通过输入账户与密码登入 Web 应用程序， Web 应用程序随后从银行数据库中检索当前的账户信
息， 井且使用检索到的信息立即生成一个 Web 页面， 这个页面包含该用户的当前账户信息。 如果用
户在一个小时后再次登录， 那么 Web 服务器会重复上述过程， 并且从数据库获得最新的账户信息。
图 2 1.1 说 明 了 这个模型 。
第 21 章 恶意代码与应用攻击
防火墙
11 数据库服务器
Web 服务者在
图 2 1.1 典型的数据库驱动 的 Web 站 点的体系结构
对于安全人员来说， 上述例子说明 了什么 ? Web 应用程序在传统安全模型中加入了复杂性。
如 图 21.1 所示， 作为可轻易访问 的公共服务器， Web 服务器归属于隔离区(DMZ); 另 一方面， 数据
库服务器并非用于公共访问， 所以归属于内部网。 Web 应用程序需要访问数据库， 因此防火墙管理
员 必须创建一条允许从 Web 服务器访问数据库服务器的规则。 这条规则为互联网用户创建了能够有
权使用数据库服务器的潜在路径(要想 了解防火墙与 DMZ 的更多知识， 可 以参看第 1 1 章 " 网络安
全架构和保护网络组件" )。 如果 Web 应用程序正常运行， 那么就只接受授权用户对数据库的请求。
但是， 如果 Web 应用程序存在缺陷， 就可能导致某些使用 SQL 注入攻击的用户能够 以不期望和未
授权的方式篡 改数据库 。
1. SQL 注入攻击
SQL 注入攻击使恶意攻击者能够违反如图 21 . 1 所示模型的隔离性， 从而直接完成攻击内在数据
库 的 SQL 事务。
提示 :
要想 了 解数据库与 SQL 的 更多 知识， 读者可以参看 第 20 章 。
在前面的示例中， 银行客户可能输入账户号码， 从而有权使用检索当前账户细节的动态 Web 应
用程序。 Web 应用程序则可能使用下面的 SQL 查询形式获取账户信息， 这里的是客户在
Web 表单中输入的账户 号码:
SELECT *
FROM t ransact工ons
WHERE account number = '  '
此时， 还需要 明 白另一个重要事实: 只要每条语句都以分号结束， 数据库就能够同时处理多条
SQL 语句 。
如果 Web 应用程序并不执行适当的输入验证操作 ， 用户完全可能在由 Web 服务器执行的语句
中 插入 自 己 的 SQL 代码。 例如， 假设用 户 的账户 号码为 1 45249， 那么可 以输入下面的语句 :
145 2 4 9 ' ; DELETE * FROM transactions WHERE 'a' = ' a
635
CISSP 官方学习指南(第 7 版)
Web 应用程序随后 自然地将这些输入嵌入先前 SQL 语句的宇段中 ， 从而得到下面这
样 的语句 :
SELECT *
FROM transactions
WHERE account number = ' 145 2 4 9 '; DELETE * FROM transactions WHERE 'a' = 'a'
调 整格式之后的语句如下所示:
SELECT *
FROM transactions
WHERE account number = ' 145 2 4 9 ';
DELETE *
FROM transactions
WHERE 'a' = 'a'
这是一个包含两条语句的有效 SQL 事务。 第一条语句从数据库检索被请求的信息; 第二条语句
636
则删除数据库中存储的所有记录 ， 真是令人难 以置信 !
2. 防御 SQL 注入攻击
可以通过下列 三种技术使 Web 应用程序不遭受 SQL 注入攻击的危害 :
• 执行输入验证。 与前面讨论的跨站脚本攻击的防御方法一样， 输入验证操作能够限制用户
在表单中输入的数据类型。 具体到上面的 SQL 注入攻击示例 ， 从输入中去除单引 号字符就
能够成功地防御 SQL 注入攻击。
• 限制用户特权。 Web 服务器使用 的数据库账户应 当具有尽可能最小的权限集。 如果 Web 应
用 程序只需要检索数据 ， 那么数据库账户就应当仅具有检索能力 。 在具体的示例中， 如果
账户 只 具有 SELECT 权限 ， 那么 DELETE 命令就会失败。
• 使用存储过程。 Web 应用程序的开发应该利用数据库存储过程来限制应用手里字执行任意代