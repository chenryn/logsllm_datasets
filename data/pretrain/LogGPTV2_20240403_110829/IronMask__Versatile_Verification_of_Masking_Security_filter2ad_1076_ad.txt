on such gadgets. We show in Section IV how this technique
is implemented in IronMask. We now present a concrete
example of SIS execution on a set of probes on an NLR-
gadget.
Example: Let us consider the following 2-share multiplication
gadget (with inputs a and b, and output e) while taking
K = F2:
c2 = a2 + ra
d2 = b2 + rb
c1 = a1 + ra,
d1 = b1 + rb,
e1 = (c1 ∗ d1 + r) + c1 ∗ d2
e2 = (c2 ∗ d1 + r) + c2 ∗ d2
The above gadget is an example of NLR-gadgets, and uses 3
random values: ra is used to refresh the input sharing a, rb is
used to refresh the input sharing b, and r is used during the
compression of the products into the output sharing e. The
non-linear random values are ra and rb with respect to e.
Suppose that we would like to verify one of the security
properties deﬁned in Section II using SIS. To do this, we
need to be able to determine for each set of probes (formed of
intermediate values and/or output shares) on the gadget, the
exact set of input shares necessary and sufﬁcient for a perfect
simulation of all of the probes in the set. Let us consider for
instance the following set of 2 probes on the gadget:
p2 = c2 ∗ d1 + r}
P = {p1 = c1 ∗ d1 + r,
We need to determine the set of input shares of a and b
necessary to perfectly simulate probes in P . SIS will be
executed in four steps as described earlier.
Step 1: get rid of the random values that are additive in the
compression step (which are not additive to the shares of a
and b), in this case it is the unique random value r . Using
the Gaussian elimination technique, we construct a new set :
(cid:6)
= {p1 + p2 = c1 ∗ d1 + c2 ∗ d1,
P
p2 = c2 ∗ d1 + r}
Since r only appears in p2,
this probe can be perfectly
simulated by a uniform random value. Next we need to
consider the simulation of the new set
(cid:6)(cid:6)
P
= {c1 ∗ d1 + c2 ∗ d1}
= {(a1 + ra) ∗ (b1 + rb) + (a2 + ra) ∗ (b1 + rb)}
(cid:6)(cid:6) with respect to the
Step 2: factor the expressions in P
elementary variables of shares of a and random values which
are additive to the shares of a and the constant term 1, in
this case the variables (a1, a2, ra, 1). Since there is a single
expression in P
(cid:6)(cid:6)
P
(cid:6)(cid:6), we can rewrite is as:
={a1 ∗ (b1 + rb) + a2 ∗ (b1 + rb)+
ra ∗ (b1 + rb + b1 + rb) + 1 ∗ (0)}
from which we construct
multiplying (a1, a2, ra, 1)
the new set of the expressions
P2 = {b1 + rb, b1 + rb, 0, 0}
Step 3: do the same thing with respect to (b1, b2, rb, 1):
(cid:6)(cid:6)
P
={b1 ∗ (a1 + ra + a2 + ra)+
b2 ∗ (0) + rb ∗ (a1 + ra + a2 + ra) + 1 ∗ (0)}
from which we construct
P1 = {a1 + a2, 0, a1 + a2, 0}
Step 4: determine the input shares of a necessary to simulate
the expressions in P1 and the shares of b necessary to simulate
the expressions in P2.
• for input a, we trivially need both input shares (a1, a2)
to perfectly simulate expressions in P1.
7
148
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:23:26 UTC from IEEE Xplore.  Restrictions apply. 
• for input b, we apply one step of Gaussian elimination
2 = {b1 +
(cid:6)
with respect to rb, to obtain the new set P
rb, 0, 0, 0}. We can see that we can perfectly simulate
the single non-zero expression with a uniform random
value. Thus, in this case, no shares of b are necessary to
perfectly simulate P
(cid:6)
2 and hence also P2.
Hence, to perfectly simulate P1 and P2, we need both input
shares of a and no shares of b. Thanks to Lemma 2, we can
conclude that P can be perfectly simulated using both shares
of a and no shares of b.
IV. EFFICIENT VERIFICATION
In this section, we introduce IronMask, a new tool that
we developed to check probing and random probing security
properties using the algorithms presented in Section III. The
implementation of IronMask considers currently a ﬁnite ﬁeld
K of characteristic 2, it can be easily extended in the future
to any ﬁnite ﬁeld since the veriﬁcation methods introduced in
the previous sections work in any ﬁnite ﬁeld K. IronMask is
written in C, and the only external libraries it depends on are
the GNU Multiple Precision Arithmetic Library (GMP) and
the POSIX Threads (pthreads) library.
A. Data Representation
#shares 2
#in a b
#randoms r0
#out c
m0 = a0 * b1
t0 = r0 + m0
m1 = a1 * b0
t1 = t0 + m1
m2 = a0 * b0
c0 = m2 + r0
m3 = a1 * b1
c1 = m3 + t1
#shares 3
#in a
#randoms r0 r1 r2
#out d
d0 = a0 + r0
d0 = d0 + r1
d1 = a1 + r0
d1 = d1 + r2
d2 = a2 + r1
d2 = d2 + r2
(a) 2-share ISW multiplication
(b) 3-share refresh
Fig. 1: Masking gadgets written in IronMask’s syntax
IronMask takes as input gadgets written in a simple syntax
to describe circuits, borrowed from VRAPS [13]: a gadget
is a list of assignments of additions or multiplications into
variables, alongside directives to specify the number of shares,
the inputs, the outputs and the randoms. Figure 1 illustrates
our input syntax on a 2-shares ISW multiplication (Figure 1a)
and a 3-share refresh gadget (Figure 1b). In Figure 1a, the
variables a0/b0 (resp. c0) and a1/b1 (resp. c1) are the 1st
and 2nd shares of the input a/b (resp. output d). Similarly
to maskVerif, the syntax ![ expr ] can be used to stop
the propagation of glitches in the robust probing model. For
instance, tmp = a0*b0 could be replaced by tmp = ![
a0*b0 ], in which case tmp would leak a0*b0 instead of
leaking a0 and b0 separately.
Internally, IronMask represents each wire of the gadget as
an array of integers composed of three parts. The ﬁrst (cid:3) parts
correspond to linear dependencies on the inputs of the gadget:
if the kth bit of the nth element is set to 1, then the wire
depends linearly on the kth share of the nth input. The second
part is a bitvector, where the kth bit set to 1 indicates a linear
dependency on the kth random of the gadget. Finally, the third
part is a bitvector as well, where the kth bit set to 1 indicates
a linear dependency on the kth quadratic monomial appearing
in the symbolic expressions of the gadget wires. For instance,
the internal representation of the wires a0, a1, r0, m3, t1
and c1 of Figure 1a are as follows:
inputs
a0: [ 1, 0,
a1: [ 2, 0,
r0: [ 0, 0,
m3: [ 0, 0,
t1: [ 0, 0,
c0: [ 0, 0,
randoms
0,
0,
1,
0,
1,
1,
mults
0,0,0,0 ]
0,0,0,0 ]
0,0,0,0 ]
0,0,0,1 ]
1,1,0,0 ]
0,0,1,0 ]
With an additional data structure storing the operands of each
multiplication:
0: a0 * b1
2: a0 * b0
1: a1 * b0
3: a1 * b1
Using this internal representation enables efﬁcient opera-
tions down the line: the linear dependencies of a wire on the
input shares are accessible with a single operation, the number
of such input shares is efﬁciently obtained by counting the
number of bits to one in its ﬁrst element (or ﬁrst two elements
for 2-input gadgets), and xoring two wires, which is one of
the basic operations of our Gaussian elimination, can be easily
done by xoring pointwise the arrays representing them.
To model glitches in the robust probing model, we use the
same glitch model as in [3]. Namely, we consider that an
expression a + b (resp a ∗ b) leaks a and b separately, instead
of leaking a+b (resp a∗b). Registers (usually called ﬂip-ﬂops)
can be used to stop the propagation of these glitches.
In IronMask, when taking glitches and transitions into consid-
eration, each wire is represented by an array of arrays instead
of a single array, since the leakage of an assignment is the
union of the leakages of its right-hand side operands. For
instance, the wire c0 in Figure 1a in the presence of glitches
is represented as:
inputs
c0: [ [ 0, 0,
[ 1, 0,
[ 0, 1,
randoms
mults
1,
0,
0,
0,0,0,0 ],
0,0,0,0 ],
0,0,0,0 ] ]
If a ﬂip-ﬂop was added to m2 to stop the propagation of
glitches by doing m2 = ![a0*b0], then the robust leakage
of c0 would become:
inputs
c0: [ [ 0, 0,
[ 0, 0,
randoms
mults
1,
0,
0,0,0,0 ],
0,0,1,0 ] ]
8
149
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:23:26 UTC from IEEE Xplore.  Restrictions apply. 
B. Basic Veriﬁcation
In this section, we present the procedures implemented in
IronMask for the veriﬁcation of probing and random probing
properties. Recall that in Section II, we give deﬁnitions of
all the security properties based on a single building block
SIS: a primitive that, given a set of probes (internal probes
and output probes), determines the input shares necessary
for a perfect simulation of these probes. Thus, to verify any
security property, IronMask uses a concrete implementation
of the function SIS based on the algebraic characterization
techniques discussed in Section III.
1) Gadgets with linear randomness: For the veriﬁcation
of LR-gadgets introduced in Section III-A (i.e. gadgets in
which all random values are additive), IronMask relies on the
SIS LR procedure (Algorithm 1). This procedure is a direct
application of the result presented in Lemma 1. We recall that
Algorithm 1 in IronMask considers currently a ﬁnite ﬁeld of
characteristic 2.
Algorithm 1 SIS LR returns the input shares that are leaked
by the tuple (cid:2)P with expressions of the form (5), assuming (cid:3)
input sharings
1: procedure GAUSSELIMINATION( (cid:2)P )
2:
3:
4:
5:
6:
7:
if pi contains at least one random variable then
r ← choose (any) one random variable in pi
for each probe pj of (cid:2)P with i (cid:16)= j do
for each probe pi of (cid:2)P do
if pj contains r then
pj ← pi + pj
pi ← r
8:
9: procedure SHARES( (cid:2)P )
I1 ← ∅, . . . , I(cid:2) ← ∅
10:
for each probe pi of (cid:2)P do
11:
12:
Add all input shares in pi of each input j to Ij
return I1, . . . , I(cid:2)
13:
14: procedure SIS LR( (cid:2)P )
(cid:2)P (cid:6) ← GAUSSELIMINATION( (cid:2)P )
15:
return SHARES( (cid:2)P (cid:6))
16:
As in Lemma 1, a Gaussian elimination is ﬁrst performed on
the tuple by the procedure GAUSSELIMINATION, after which
each probe of the input tuple is either ”replaced” by a random
r (as shown on line 8 of the procedure GAUSSELIMINATION),
or contains one or more input shares and no random values.
In fact, what we mean by replacing the probe pi by a
random value r on line 8 is that after eliminating r from the
expressions of all other expressions pj in the same tuple (loop
from line 5 to 7 where the instruction pj ← pi + pj aims to
remove r from pj in a ﬁnite ﬁeld of characteristic 2), we end
up with r only appearing in the expression of pi and so as
explained in the proof of Lemma 1, simulating pi amounts to
generating r uniformly at random without the need for any
other variables. We represent this by replacing the expression
of pi by the single random value r. Then, the shares leaked by
the input tuple can be found on the probes that do not contain
any randoms using the procedure SHARES. The latter actually
corresponds to an implementation of the function shares(.)
used in Lemma 1.
2) Gadgets with non-linear randomness: For NLR-gadgets
(i.e. gadgets performing non-linear operations on input shares
mixed with randomness), IronMask uses the SIS NLR proce-
dure (Algorithm 2), which implements the four steps described
in Section III-B. As mentioned in Section III-B, SIS NLR
currently only supports gadgets with two input sharings, but
can be extended in the future to (cid:3) input sharings.
Algorithm 2 SIS NLR returns the input shares that are leaked
by the tuple P in an NLR-gadget refreshing its output with
the randoms (cid:2)r3 (c.f. sec. III-B), assuming 2 input sharings
procedure SIS NLR( (cid:2)P , (cid:2)r3)
(cid:2)P (cid:6) ← GAUSSELIMINATION( (cid:2)P , (cid:2)r3)
(cid:2)P1 ← ( ), (cid:2)P2 ← ( )
for each probe pi in (cid:2)P (cid:6) do
if pi contains no randoms of (cid:2)r3 then
2) ← FACTANDEXTRACT(pi)
(cid:6)
(cid:6)
1, (cid:2)P
( (cid:2)P
( (cid:2)P1, (cid:2)P2) ← ( (cid:2)P1|| (cid:2)P
1, (cid:2)P2|| (cid:2)P
(cid:6)
(cid:6)
2)
I1 ← SIS LR( (cid:2)P1), I2 ← SIS LR( (cid:2)P2)
return I1, I2
First, SIS NLR performs Gaussian elimination with respect
to the vector of output randoms (i.e. (cid:2)r3), using a modiﬁed
version of GAUSSELIMINATION that takes as inputs the ran-
doms to use for the elimination. This corresponds to step 1
of Section III-B. The modiﬁed probes in (cid:2)P (cid:6) do not contain
any more random values of (cid:2)r3. Next,
two new tuple of
probes (cid:2)P1, (cid:2)P2 are constructed from the probes in (cid:2)P (cid:6), using
the FACTANDEXTRACT procedure, which corresponds to the
factoring technique discussed in steps 2 − 3 of Section III-B.
The pseudo-code of this function is left out for conciseness.
We thus get two tuples P1 and P2 containing input shares,
randoms and refreshed input shares from each input. Since
those variables are linear, we can use the initial SIS LR
procedure to extract the input shares that they leak.
3) Veriﬁcation of security properties: Checking any prob-
ing or random probing property (e.g. NI, SNI, RPC, RPE, ...)
consists in enumerating tuples of probes, using SIS LR or
SIS NLR to get the input shares that they leak (we abbreviate
with SIS and suppose that we make a call to the correct
algorithm for LR-gadgets and NLR-gadgets), and take some
action in consequence (see Section II-B). In the following, we
shall call a t-failure tuple (or simply a failure tuple when t is
not made explicit) any tuple of probes that leaks more than t
input shares of one or more input sharings (i.e. for which SIS
outputs a set or more of cardinality strictly greater than t).
For instance, to verify if an n-share gadget is t-NI, we
enumerate all tuples of size t, and make sure that none of
them is a t-failure tuple (Algorithm 3). This corresponds to
the ﬁrst row of Table I. Or, to verify the (p, ε)-RPS(cid:5) of an
n-share gadget G in the random probing model (ﬁrst row
9
150