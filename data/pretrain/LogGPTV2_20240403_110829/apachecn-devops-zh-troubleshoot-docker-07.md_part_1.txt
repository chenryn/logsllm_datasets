# 七、管理 Docker 容器的网络栈
在本章中，我们将涵盖以下主题:
*   Docker 桥
*   Docker 桥配置故障排除
*   配置域名系统
*   对容器和外部网络之间的通信进行故障排除
*   ibnetwork 和容器网络模型
*   基于覆盖和底层网络的 Docker 网络工具
*   Docker 网络工具的比较
*   配置**打开开关** ( **OVS** )与 Docker 一起工作
# Docker 网络
每个 Docker 容器都有自己的网络栈，这是由于 Linux 内核`net`命名空间，其中每个容器的新`net`命名空间被实例化，并且不能从容器或其他容器外部看到。
Docker 网络由以下网络组件和服务提供支持:
*   **Linux 桥**:内核内置的 L2/MAC 学习交换机，用于转发
*   **打开虚拟开关**:可编程并支持隧道的高级网桥
*   **网络地址转换器(NAT)** :这些是直接转换 IP 地址+端口的实体(SNAT，DNAT)
*   **IPtables** :内核中的策略引擎，用于管理数据包转发、防火墙和 NAT 功能
*   **appamor/SElinux**:可以定义每个应用的防火墙策略
各种网络组件可用于与 Docker 一起工作，提供了访问和使用基于 Docker 的服务的新方法。因此，我们看到了许多遵循不同联网方法的库。一些突出的例子是 Docker 写作，编织，Kubernetes，管道工程和图书馆网络。下图描述了 Docker 网络的基本思想:
![Docker networking](img/image_07_001-2.jpg)
Docker 网络模式
# Docker 桥
**dock r0 桥**是默认组网的心脏。当 Docker 服务启动时，会在主机上创建一个 Linux 桥。容器上的接口与桥对话，桥代理外部世界。同一台主机上的多个容器可以通过 Linux 桥相互通信。
docker0 可以通过`--net`标志进行配置，一般有四种模式:
*   `--net default`:在这种模式下，默认桥被用作容器之间相互连接的桥
*   `--net=none`:有了这个标志，创建的容器就真正被隔离了，无法连接到网络
*   `--net=container:$container2`:使用此标志，创建的容器与名为`$container2`的容器共享其网络命名空间
*   `--net=host`:在这种模式下，创建的容器与主机共享其网络命名空间
## 故障排除 Docker 桥配置
在本节中，我们将了解如何将容器端口映射到主机端口，以及如何解决将容器连接到外部世界的问题。这种映射可以由 Docker 引擎隐式完成，也可以指定。
如果我们创建两个容器- **容器 1** 和**容器 2**-它们都从私有 IP 地址空间分配了一个 IP 地址，并且还连接到**Docker 桥**，如下图所示:
![Troubleshooting Docker bridge configuration](img/image_07_002.jpg)
两个容器通过 Docker 桥通话
前面的两个容器将能够相互 ping 通，并到达外部世界。对于外部访问，它们的端口将映射到主机端口。如前一节所述，容器使用网络名称空间。创建第一个容器时，会为该容器创建一个新的网络命名空间。
在容器和 Linux 桥之间创建了一个**虚拟以太网** ( **虚拟以太网**或**虚拟以太网**)链接。从容器的`eth0`端口发送的流量通过 vEth 接口到达网桥，并在此后被切换:
```
# show linux bridges 
$ sudo brctl show
```
前面命令的输出将类似于下面的命令，带有桥名和它所映射到的容器上的 vEth 接口:
```
$ bridge name  bridge            id    STP       enabled interfaces
docker0        8000.56847afe9799 no    veth44cb727    veth98c3700
```
### 连接容器和外部世界
主机上的 **iptables NAT** 表用于伪装所有外部连接，如下图所示:
```
$ sudo iptables -t nat -L -n 
... 
Chain POSTROUTING (policy ACCEPT) target prot opt
source destination MASQUERADE all -- 172.17.0.0/16
!172.17.0.0/16 
 ...
```
### 从外界到达容器
端口映射再次使用主机中的 iptables NAT 选项完成，如下图所示，其中**容器 1** 的端口映射用于与外部世界通信。我们将在本章的后半部分详细研究它。
![Reaching containers from the outside world](img/image_07_003.jpg)
容器 1 与外部世界通信的端口映射
默认情况下，Docker 服务器会在 Linux 内核中创建一个`docker0`桥，该桥可以在其他物理或虚拟网络接口之间来回传递数据包，使它们表现为单个以太网:
```
root@ubuntu:~# ifconfig
docker0   Link encap:Ethernet  HWaddr 56:84:7a:fe:97:99
 inet addr:172.17.42.1  Bcast:0.0.0.0  Mask:255.255.0.0
 inet6 addr: fe80::5484:7aff:fefe:9799/64 Scope:Link
 inet6 addr: fe80::1/64 Scope:Link
 ...
 collisions:0 txqueuelen:0
 RX bytes:516868 (516.8 KB)  TX bytes:46460483 (46.4 MB)
eth0      Link encap:Ethernet  HWaddr 00:0c:29:0d:f4:2c
 inet addr:192.168.186.129  Bcast:192.168.186.255  
    Mask:255.255.255.0
```
一旦我们有一个或多个容器启动并运行，我们可以通过在主机上运行`brctl`命令并查看输出的 interfaces 列来确认 Docker 已经将它们正确连接到 docker0 桥。首先，使用以下命令安装网桥实用程序:
```
$ apt-get install bridge-utils
```
这是一台连接了两个不同容器的主机:
```
root@ubuntu:~# brctl show
bridge name     bridge id           STP enabled   interfaces
docker0         8000.56847afe9799   no            veth21b2e16
                                                  veth7092a45 
```
每当创建容器时，Docker 都会使用 docker0 桥设置。每当创建新容器时，它都会从网桥上可用的范围中分配一个新的 IP 地址:
```
 root@ubuntu:~# docker run -t -i --name container1 ubuntu:latest /bin/bash
 root@e54e9312dc04:/# ifconfig
 eth0 Link encap:Ethernet HWaddr 02:42:ac:11:00:07
 inet addr:172.17.0.7 Bcast:0.0.0.0 Mask:255.255.0.0
 inet6 addr: 2001:db8:1::242:ac11:7/64 Scope:Global
 inet6 addr: fe80::42:acff:fe11:7/64 Scope:Link
 UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1
 ...
 root@e54e9312dc04:/# ip route
 default via 172.17.42.1 dev eth0
 172.17.0.0/16 dev eth0 proto kernel scope link src 172.17.0.7
```
### 注
默认情况下，Docker 提供一个具有`172.17.42.1` IP 地址的 vnet docker0。Docker 容器的 IP 地址在`172.17.0.0/16`范围内
要更改 Docker 中的默认设置，请修改`/etc/default/docker`文件。
将默认网桥从`docker0`更改为`br0`:
```
# sudo service docker stop
# sudo ip link set dev docker0 down
# sudo brctl delbr docker0
# sudo iptables -t nat -F POSTROUTING
# echo 'DOCKER_OPTS="-b=br0"' >> /etc/default/docker
# sudo brctl addbr br0
# sudo ip addr add 192.168.10.1/24 dev br0
# sudo ip link set dev br0 up
# sudo service docker start
```
以下命令显示 Docker 服务的新桥名和 IP 地址范围:
```
root@ubuntu:~# ifconfig
br0       Link encap:Ethernet  HWaddr ae:b2:dc:ed:e6:af
 inet addr:192.168.10.1  Bcast:0.0.0.0  Mask:255.255.255.0
 inet6 addr: fe80::acb2:dcff:feed:e6af/64 Scope:Link
 UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
 RX packets:0 errors:0 dropped:0 overruns:0 frame:0
 TX packets:7 errors:0 dropped:0 overruns:0 carrier:0
 collisions:0 txqueuelen:0
 RX bytes:0 (0.0 B)  TX bytes:738 (738.0 B)
eth0      Link encap:Ethernet  HWaddr 00:0c:29:0d:f4:2c
 inet addr:192.168.186.129  Bcast:192.168.186.255  Mask:255.255.255.0
 inet6 addr: fe80::20c:29ff:fe0d:f42c/64 Scope:Link
 ...
```
# 配置域名系统
Docker 为每个容器提供主机名和 DNS 配置，而无需构建自定义映像。它用虚拟文件覆盖容器内的`/etc`文件，在那里它可以写入新的信息。
这可以通过在容器内部运行`mount`命令来看到。容器在最初创建时与主机接收相同的`/resolv.conf`。如果主机的`/resolv.conf`文件被修改，只有当容器重新启动时，它才会反映在容器的`/resolv.conf`文件中。
在 Docker 中，您可以通过两种方式设置`dns`选项:
*   使用`docker run --dns=`
*   在 Docker 守护程序文件中，添加`DOCKER_OPTS="--dns ip-address"`
### 类型
也可以使用`--dns-search=`指定搜索域。
下图显示了使用 Docker 守护程序文件中的`DOCKER_OPTS`设置在容器中配置的名称服务器:
![Configuring DNS](img/image_07_004.jpg)
用于设置 DOCKER 容器的名称服务器设置
主要的域名系统文件如下:
```
/etc/hostname
/etc/resolv.conf
/etc/hosts
```
以下是添加域名系统服务器的命令:
```
# docker run --dns=8.8.8.8 --net="bridge" -t -i  ubuntu:latest /bin/bash
```
以下是添加主机名的命令:
```
#docker run --dns=8.8.8.8 --hostname=docker-vm1  -t -i  ubuntu:latest 
    /bin/bash
```
# 对容器和外部网络之间的通信进行故障排除
如果`ip_forward`参数设置为`1`，包只能在容器之间传递。通常，您只需将 Docker 服务器保留为其默认设置`--ip-forward=true`，当服务器启动时，Docker 会为您将`ip_forward`设置为`1`。要检查设置，请使用以下命令:
```
 # cat /proc/sys/net/ipv4/ip_forward
0 
# echo 1 > /proc/sys/net/ipv4/ip_forward 
# cat /proc/sys/net/ipv4/ip_forward 
1
```
通过启用`ip-forward`，用户可以使容器与外部世界的通信成为可能；如果您处于多网桥设置中，容器间通信也需要它:
![Troubleshooting communication between containers and the external network](img/image_07_005.jpg)
ip-forward = true 将所有进出容器的数据包转发到外部网络
Docker 不会从 Docker 筛选器链中删除或修改任何预先存在的规则。这允许用户创建规则来限制对容器的访问。Docker 使用 docker0 桥实现单个主机中所有容器之间的数据包流。它为 iptables 中的`FORWARD`链添加了一个规则(空白接受策略)，使数据包在两个容器之间流动。`--icc=false`选项将`DROP`所有的数据包。
当 Docker 守护程序配置有`--icc=false`和`--iptables=true`并且 Docker 运行通过`--link=`选项调用时，Docker 服务器将为新容器插入一对 iptables `ACCEPT`规则，以连接到其他容器公开的端口-它在 Dockerfile 的`EXPOSE`行中提到的端口:
![Troubleshooting communication between containers and the external network](img/image_07_006.jpg)
ip-forward = false 将所有进出容器的数据包转发到外部网络
默认情况下，Docker 的转发规则允许所有外部 IP。要仅允许特定的 IP 或网络访问容器，请在 Docker 筛选器链的顶部插入一个否定规则。
例如，您可以使用以下命令限制外部访问，以便只有源 IP `10.10.10.10`可以访问容器:
```
#iptables -I DOCKER -i ext_if ! -s 10.10.10.10 -j DROP
```
### 注
**参考文献:**
[https://docs.docker.com/v1.5/articles/networking/](https://docs.docker.com/v1.5/articles/networking/)
[https://docs.docker.com/engine/userguide/networking/](https://docs.docker.com/v1.5/articles/networking/)
http://container ops . org/
## 限制 SSH 从一个容器到另一个容器的访问
要限制从一个容器到另一个容器的 SSH 访问，请执行以下步骤:
1.  创建两个容器，c1 和 c2:
    ```
     # docker run -i -t --name c1 ubuntu:latest /bin/bash
     root@7bc2b6cb1025:/# ifconfig
     eth0 Link encap:Ethernet HWaddr 02:42:ac:11:00:05
     inet addr:172.17.0.5 Bcast:0.0.0.0 Mask:255.255.0.0
     inet6 addr: 2001:db8:1::242:ac11:5/64 Scope:Global
     inet6 addr: fe80::42:acff:fe11:5/64 Scope:Link
     ...
     # docker run -i -t --name c2 ubuntu:latest /bin/bash
     root@e58a9bf7120b:/# ifconfig
            eth0 Link encap:Ethernet HWaddr 02:42:ac:11:00:06
             inet addr:172.17.0.6 Bcast:0.0.0.0 Mask:255.255.0.0
             inet6 addr: 2001:db8:1::242:ac11:6/64 Scope:Global
             inet6 addr: fe80::42:acff:fe11:6/64 Scope:Link
    ```
2.  我们可以使用刚刚发现的 IP 地址测试容器之间的连通性。让我们现在使用`ping`工具来看看这个。
3.  让我们进入另一个容器 c1，并尝试 ping c2:
    ```
     root@7bc2b6cb1025:/# ping 172.17.0.6
            PING 172.17.0.6 (172.17.0.6) 56(84) bytes of data.
            64 bytes from 172.17.0.6: icmp_seq=1 ttl=64 time=0.139 ms
            64 bytes from 172.17.0.6: icmp_seq=2 ttl=64 time=0.110 ms
            ^C
            --- 172.17.0.6 ping statistics ---
            2 packets transmitted, 2 received, 0% packet loss, time 999ms
            rtt min/avg/max/mdev = 0.110/0.124/0.139/0.018 ms