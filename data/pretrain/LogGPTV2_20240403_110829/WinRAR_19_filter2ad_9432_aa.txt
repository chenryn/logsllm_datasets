# 成功获取WinRAR 19年历史代码执行漏洞
##### 译文声明
本文是翻译文章，文章原作者 checkpoint，文章来源：research.checkpoint.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
#  介绍
在本文中，我们讲述了如何使用WinAFL模糊测试工具找到WinRAR中的逻辑错误，并利用它来完全控制失陷主机的故事。该漏洞仅通过提取精心构造的存档文件即可成功利用，使超过5亿用户的主机面临风险。这个漏洞存在已达19年之久！并迫使WinRAR完全放弃对易受攻击格式的支持。
## 背景
几个月前，我们的团队构建了一个多处理器模糊测试实验室，并开始使用[WinAFL](https://github.com/googleprojectzero/winafl)模糊器对Windows环境下的二进制文件进行模糊测试。在收获了[Adobe
的模糊测试研究成果](https://research.checkpoint.com/50-adobe-cves-in-50-days/)后，我们决定扩展我们的模糊测试工作，针对WinRAR进行模糊测试。
模糊测试过程产生的一个Crash指引我们发现了一个WinRAR使用的2006年编译的，没有保护机制（如ASLR，DEP等）的过时的动态链接库。
我们将焦点和模糊测试的主要目标转向这个“容易上手”的dll，找到了一个内存损坏错误，并成功引发远程代码执行。
然而，模糊器产生了一个具有“怪异”行为的测试用例。在研究了这种行为之后，我们发现了一个逻辑错误：绝对路径遍历漏洞。从这一点开始，利用这个漏洞完成远程代码执行变得非常简单。
也许还值得一提的是，这类漏洞在Bug Bounty计划中，有巨大的奖金份额。
## 什么是WinRAR？
WinRAR是Windows的件归档应用程序，可以创建和查看RAR或ZIP文件格式的归档，并解压缩大量归档文件格式。
据[WinRAR网站](https://www.win-rar.com/start.html?&L=0)称，全球超过5亿WinRAR用户，这就使其成为当今世界上最受欢迎的压缩工具。
这就是GUI的样子：
## 模糊过程背景
这些是开始模糊WinRAR所采取的步骤：
  1. 在WinRAR主函数内部构造harness，使我们能够模糊任何存档类型而无需为每种格式构造相应的harness。这是通过给WinRAR可执行文件打补丁来完成的。
  2. 去除用户交互的对话框和GUI等元素，这也可以通过修补WinRAR可执行文件来完成。  
即使在WinRAR的CLI模式下，也会弹出一些消息框。
  3. 使用奥卢大学2005年左右进行的一项有趣研究发布的[巨型语料库](https://www.ee.oulu.fi/roles/ouspg/PROTOS_Test-Suite_c10-archive)。
  4. 在WinRAR命令行模式下使用WinAFL对程序进行模糊处理。通过这样强制WINRAR解析“已损坏的存档”并设置默认密码（“-p”表示密码，“ – kb”表示保留损坏的解压缩文件）。这些参数和选项可以在WinRAR帮助手册中找到。
在短时间的模糊测试之后，我们发现了几个存档格式的崩溃，例如RAR，LZH和ACE，这些存档格式会导致内存损坏，例如Out-of-Bounds
Write。但是，利用这些漏洞并非易事，因为原语提供了对覆盖缓冲区的有限控制。
然而，解析ACE格式时的崩溃引起了我们的注意。我们发现WinRAR使用名为unacev2.dll的DLL来解析ACE归档文件。快速浏览一下这个dll就会发现它是2006年没有保护机制的旧版dll。事实证明，漏洞利用的时候真的不需要绕过保护。
## 构建一个特定的Harness
由于这个dll看起来容易利用，所以我们专注它的模糊测试过程。
另外，就WinRAR而言，只要归档文件具有.rar扩展名，它就会根据文件的Magic字节处理它，在我们的示例中，是ACE格式。
为了提高模糊器性能，并仅增加相关dll的代码覆盖，我们为unacev2.dll创建了一个特定的Harness。
为此，我们需要了解如何使用unacev2.dll。逆向调用unacev2.dll进行ACE归档提取的代码后，我们发现应按以下顺序调用两个导出函数进行归档文件的提取：
  1. 名为ACEInitDll的初始化函数，具有以下签名：  
`INT __stdcall ACEInitDll（unknown_struct_1 * struct_1）;`  
•struct_1：指向未知结构的指针
  2. 名为ACEExtract的提取函数，具有以下签名：  
`INT __stdcall ACEExtract（LPSTR ArchiveName，unknown_struct_2 * struct_2）;`  
•ArchiveName：指向要提取的ace文件的路径的字符串指针  
•struct_2：指向未知结构的指针
这两个函数都需要传递我们不知道的结构。我们有两种方法可以尝试理解未知的结构：逆向，调试WinRAR，或尝试查找使用这些结构的开源项目。
第一种选择更耗时，因此我们选择尝试第二种选择。我们在github.com上找到了ACEInitDll这个导出函数，并找到了一个名为[FarManager](https://github.com/FarGroup/FarManager)的项目，该项目使用此dll并包含未知结构的详细头文件。
**注意** ：此项目的创建者也是WinRAR的创建者。
将头文件加载到IDA后，更容易理解两个函数（ACEInitDll和ACEExtract）之前的“未知结构”，因为IDA为每个结构成员显示了正确的名称和类型。
从我们在FarManager项目中找到的标题中，我们提出了以下签名：
`INT __stdcall ACEInitDll（pACEInitDllStruc DllData）;`
`INT __stdcall ACEExtract（LPSTR ArchiveName，pACEExtractStruc Extract）;`
为了模仿WinRAR使用unacev2.dll的方式，我们分配了与WinRAR相同的结构成员。
我们开始模糊这个Harness，但我们没有发现新的崩溃，并且覆盖范围没有在模糊测试的前几个小时内扩展。我们试图了解这种限制的原因。
我们首先查找有关ACE归档格式的信息。
## 了解ACE格式
我们没有找到该格式的RFC，但我们确实在互联网上找到了重要信息。
1.创建ACE存档受专利保护。
唯一允许创建ACE存档的软件是[WinACE](https://web.archive.org/web/20170714193504/http:/winace.com:80/)。
该项目的最后一个版本是在2007年11月编译的。该公司的网站自2017年8月以来一直处于关闭状态。但是，提取ACE存档不受专利保护。
这个[维基百科](https://en.wikipedia.org/wiki/ACE_%28compressed_file_format%29)中提到了一个名为[acefile](https://pypi.org/project/%3Ccode%3Eacefile%3C/code%3E%20/)的纯Python项目。
它最有用的功能是：
    它可以提取ACE档案。
    它包含有关ACE文件格式的简要说明。
    它有一个非常有用的功能，打印文件格式标题和解释。
要理解ACE文件格式，让我们创建一个简单的.txt文件（名为“simple_file.txt”），并使用WinACE对其进行压缩。
然后，我们将使用acefile检查ACE文件的标头。
simple_file.txt如下：
这些是我们在WinACE中选择创建示例的选项：
此选项在所选的提取目录下创建子目录 users\nadavgr\Documents，并将simple_file.txt提取到该相对路径。
使用headers标志从acefile项目运行acefile.py会显示有关存档标头的信息：
结果如下：
**请注意：**
    将上图中文件名字段中的每个“\\”视为单个斜杠“\”，这只是python转义。
    为清楚起见，相同的字段在ace 文件中的十六进制转储和输出中用相同的颜色标记。
重要领域摘要：
**·hdr_crc（标记为粉红色）：**
两个CRC字段存在于2个标头中。如果CRC与数据不匹配，则中断提取。这就是为什么fuzzer没有找到更多路径（扩展其覆盖范围）的原因。为了“解决”这个问题，我们修补了unacev2.dll中的所有CRC
_校验。_ 注 – CRC是常规CRC的修改实现-32。
**·文件名（以绿色标记）：**
文件名包含文件的相对路径。在提取过程中（包括文件）创建相对路径中指定的所有目录。文件名的大小由十六进制转储中的黑色框标记的2个字节（小端）定义。
**·广告（标有黄色）**
如果使用未注册版本的WinACE创建存档，则在创建ACE存档期间，WinACE会自动添加广告字段。
**·文件内容：**
    “origsize” - 内容的大小。内容本身位于定义文件的标题之后（“hdr_type”字段== 1）。
    “hdr_size” – 头部大小。由十六进制转储中的灰色框标记。
    在第二个头部的偏移70（0x46）处，我们可以找到我们的文件内容：“Hello From Check Point！”
因为filename字段包含文件的相对路径，所以我们对该字段进行了一些手动修改尝试，以查看它是否容易受到“路径遍历”的影响。
例如，我们将简单的路径遍历小工具“ \\..\ ”添加到文件名字段和更复杂的“路径遍历”技巧，但没有成功。
在修补所有结构检查（例如CRC验证）之后，我们再次再次运行了模糊器。 在短时间的模糊测试之后，我们进入了主要的模糊测试目录，发现了一些奇怪的东西。
但还是首先描述一下我们的模糊器以便于交代一些背景信息。
## 模糊器
为了提高模糊器性能并防止I\O瓶颈，我们在一个使用ImDisk工具包的RAM盘符下运行模糊器。
Ram磁盘映射到驱动器R：\，文件夹树如下所示：
## 检测路径遍历错误
启动模糊器后不久，我们在驱动器R的根目录中找到了一个名为sourbe的新文件夹，位于一个令人惊讶的位置：
Harness被指示将测试归档文件提取到“output_folders”下的子目录。
例如，R:\ACE_FUZZER\output_folders\Slave_2 。 那么为什么我们在父目录中创建了一个新文件夹呢？
在sourbe文件夹中，我们找到了一个名为REDVERSION_的文件，其中包含以下内容：
触发漏洞的测试用例十六进制dump文件如下：
**请注意：**
    ·我们对此测试用例进行了一些小的更改（例如调整CRC）以使其可以通过acefile进行解析。
    ·为方便起见，字段在十六进制转储中以相同的颜色标记acefile的输出。