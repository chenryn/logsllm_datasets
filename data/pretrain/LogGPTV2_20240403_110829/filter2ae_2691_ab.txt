比特币几个模块之间的耦合度其实比较高，而且有不少历史包袱，比特币的发明者——中本聪在开发比特币的时候，使用VC++开发，而VC++的标准库中的sstream流处理性能非常感人，不得不放弃，自行实现了了基于vector的流处理容器。而随着c++11的推出以及标准库的更新迭代，性能不可同日而语。  
从整张图我们可以看出，比特币的模块比较少，也比较简单。chain-paramters描述了整个区块链的参数设置，wallet是与地址/加密还有存储相关的，mem-pool是未确认的交易池。得益于比特币核心开发者的不朽贡献，相比中本聪时代的比特币代码，现在的比特币代码质量已经相当不错了。  
以上无论哪种设计，一般都要从P2P网络协议作为切入，作为一个P2P钱包，既要提供Service也要提供Client，作为Service依赖P2P网络协议，作为Client依赖Json-RPC。  
需要指出的是，目前”三巨头”所使用的账户模型是不同的（所谓账户模型是指账户记账方法），比特币使用UXTO模型，以太坊和比特股使用账户余额模型。  
UXTO模型（Unspent Transaction Outputs (UTXOs)
）：此模型表达了一种转移的概念，即任何产生的新币，在以后的生命周期中，只有转移，没有消亡，转移实质上是由加密算法的签名与验证控制的：  
账户余额模型：账户余额模型摒弃了这种强验证的账户模型，即账户余额回归到数字加减，这样做提升了交易的效率。
# 3\. 共识算法与分布式
终于来到重点了，本文每节其实都可以展开成为独立的文章，内容所限，简单讲。  
所谓区块链共识过程，在上文有所提及，是指如何将全网交易数据客观记录并且不可篡改的过程。目前"三巨头"分别使用不同的共识算法（Consensus
Algorithm）, 比特币使用工作量证明PoW（Proof of Work），以太坊即将转换为权益证明PoS（Proof of
Stake），比特股使用授权权益证明DPoS（Delegated Proof of Stake）。  
以上这些算法我称之为“经济学”的算法，所谓经济学的算法，是指让作弊成本可计算，且让作弊成本往往远大于作弊带来的收益，即作弊无利可图，通过这种思想构造一个用于节点之间博弈的算法，并使之趋向一个稳定的平衡。  
相对应的我们还有计算机领域的分布式一致性算法，例如Paxos、Raft，我也称之为传统分布式一致性算法。  
他们之间的最大区别是：系统在拜占庭将军（Byzantine Generals
Problem）情景下的可靠性，即拜占庭容错（PBFT算法支持拜占庭容错）。然而无论是Paxos还是Raft算法，理论上都可能会进入无法表决通过的死循环(尽管这个概率其实是非常非常低的)，但是他们都是满足safety的，只是放松了liveness的要求,
PBFT也是这样。  
下面是一些传统分布式一致性算法和区块链共识过程的异同点：
相同点：  
Append only  
强调序列化  
少数服从多数原则  
分离覆盖的问题：即长链覆盖短链区块，多节点覆盖少数节点日志
不同点：  
传统分布式一致性算法大多不考虑拜占庭容错(Byzanetine
Paxos除外)，即假设所有节点只发生宕机、网络故障等非人为问题，并不考虑恶意节点篡改数据的问题；  
传统分布式一致性算法是面向日志（数据库）的，即更通用的情况，而区块链共识模型面向交易的，所以严格来说，传统分布式一致性算法应该处于区块链共识模型的下面一层。  
考虑上面的不同点，结合公有链和联盟链的特征，我们有：  
联盟链：半封闭生态的交易网络，存在对等的不信任节点，如房地产行业A、B、C、D公司。  
公有链：开放生态的交易网络，这层主要是为行业链和私有链提供全球交易网络。  
由于联盟行业链其半封闭半开放特性，使用Delegated Proof of XXX
是可行的，可以考虑以传统一致性算法作为基础加入拜占庭容错/安全防护机制进行改进也是可以的。  
而针对公有链，PoW/Pos/DPos等“经济学”的算法可能是最优算法。  
技术上，以上不同的共识算法，我们很多新开发区块链都相应的支持一个特性：共识模块可插拔，以应对不同场景下的要求。  
下图是一张未来区块链生态示意图：  
公有链提供可信可靠的价值传输网络，上面可以继续组建去中心化应用（DAPP）或者部署联盟链，甚至传统数据库都行，在上层搭建C端应用。  
ref1:浅谈区块链共识机制与分布式一致性算法--blockchaindev.org  
ref2:从Paxos到拜占庭容错，兼谈区块链的共识协议（转）--blockchaindev.org
# 4\. 数字资产与价值流通网络
这里有张图：  
ref: Metaverse元界白皮书-CN(概要)  
“三巨头”中，比特币在“数字货币”处，比特股在“去中心化交易所”附近，以太坊在“去中心化组织”处。而实际上，区块链和现实的接触点，还在图示位置。  
所以区块链仍是一个正在成长的少年，结合图5，我们希望构建一个基础设施完善的价值传输网络，上层应用丰富的区块链生态，仍然需要付出巨大的努力。  
下一步目标，是将资产数字化（类比资产证券化），例如我们可以将珍稀物品（艺术品/古董）数字化、知识产权数字化、票据基金等收益权数字化，将极大的提升市场运作效率，配备智能合约，甚至人工智能，可编程社会不再是梦想。
* * *
Q：还是感觉太抽象，至今都还不能具象化的理解这个区块链，也没找到具象化的解释，费解？？？  
A：正如区块链这个名词一样，它是被创造出来的，并没有以往的概念可以映射到上面，所以容易费解。我们不谈这个概念，我们只需要想想我们的互联网还需要什么。正如比特币白皮书提到的，一个点对点的现金系统，他使用的前提要求是很低的，不需要注册，不需要手机号，一个点对点的网络，只要你用设备接入，那么你就可以使用。区块链这个概念也一样，目的是构建一个点对点的生态，解构权力带来的不对称。它本身只是一个共享的总账本，不同于网络中多节点自己记账，再对账，这就瓦解了中心权力。
Q: 区块链技术在互联网身份认证方面如何应用？  
A：这个问题很好。我目前所做的区块链项目是涵盖了这个概念的，也就是你所说的互联网身份认证。我们认为它是使区块链接入现实业务的必要一环。  
在我们的设想中，首先什么是身份？身份不单单是一个ID号，一个密码，而是一个使用者所有的操作记录集，这个记录集的代号才是身份。正如账户丢失，然后申诉一样，申诉的内容才是真正定位到你这个人。区块链也一样，它需要一样ID，同样它也需要自动验证你历史记录的合法性。目前互联网的身份认证是依赖公安系统的，最简单的方案就是把公安系统中的身份系统映射到区块链中。另外一个方案也是用户自定义记录集，根据交易历史核对身份。当然再更远的未来，结合人工智能，区块链可能有更好的表现。  
Q：实时交割数据如果放到联盟链中，联盟链的数据是否要最终同步到公有链？按分享所说，联盟链的数据对公有链来说是不可信任的，联盟链和公有链中数据是什么关系？此处没有理解，谢谢老师分享！  
A：我认为不可能所有机构都愿意把资产放到公有链上的，一定会出现并存的现象。理想的情况当然完全使用公有链搭建去中心化应用。联盟链和公有链直接的数据是单纯的引用关系，我认为开放的关键数据集，如用户身份应该沉淀到公有链，让用户自己管理，而机构比较私有的关键数据，应该使用访问权限将它与公有链隔离，所以联盟链的数据和公有链的数据我认为是互补的。也就是说，联盟链的数据是否要同步到公有链，这个要是视机构本身的需求而定。另外，公有链的外部数据引用，我们称之为data-feed，这个东西就要把人的因素引入了，比方说法务，律师，政府机构等等，作为一个仲裁者帮助引用数据，好坏可以让市场评价信用，正如对一个机构评级一样，如果这样就很透明开放了。
Q: 有一些很有趣的实体项目比如智能门锁，无人租车，这些都是线下项目，怎么做到互联互通呢？  
A:首先区块链的项目都是跨平台的，也就是说嵌入式设备可以依托区块链的低信用成本的优势，自动记账，可以是联盟链的，也可以是直接基于某个公有链的DAPP，这些账本是共享的，这些数据在发生引用关系的时候，可以进入公有链通道，打通两者关系。  
其次，任何具体的区块链项目，都是需要依托一个公有链进行的，正如现在很多落地项目都是基于“三巨头”，然而其实目前并没有一个让大家都特别满意的标准，让大家都服，所以我我们还要拭目以待。  
Q: 多谢分享，能谈谈最后一张图中区块链发展的各个阶段可能对传统金融行业尤其是银行业的影响吗  
A:
对银行业的影响，我认为现阶段影响不大，尤其是国内。这个要视区块链发展的程度而定。我所了解的，央行已经开始着手自己的数字货币了，这对银行来说，顶多就是再来一次IT架构升级的事儿而已，可以帮助银行业降低IT成本，也可以方便加强监管。但如果在更远的未来，银行可能不会特别封闭，变成一些区块链的代理节点，也会被所有人所监督，而不是几个特殊机构。  
Q：如果公有链能够记录所有历史，有没有技术能破坏或封禁，有没有生命终结的那天？  
A:有一点技术风险，通用量子计算商用的时候，目前的加密技术很多都失效了，基于密码学的区块链受影响最大（当然现在的中心化架构也会受到影响）。这取决于理论研究的成果，如果出现了新的密码学理论可以抵抗量子计算就没问题。如果从P2P网络的角度，是没有任何机构或个人能封禁的，只要有两个节点还能做交易也能记账，这个区块链就是alive的。  
从经济学的角度，区块链的生死也不主要在于加密技术是否被攻破，而主要在于链上聚集了多少财富和利益，链上的数据有多少价值，如果没有价值了，链自然就死了，反之如果被攻破了，不过是分叉、或者等待新的加密算法出来之后进行数据迁移，这一点跟中心化数据库恢复备份没有什么太大区别。