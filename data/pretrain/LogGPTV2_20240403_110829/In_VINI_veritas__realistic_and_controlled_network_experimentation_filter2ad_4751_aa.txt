title:In VINI veritas: realistic and controlled network experimentation
author:Andy C. Bavier and
Nick Feamster and
Mark Huang and
Larry L. Peterson and
Jennifer Rexford
A Wired-Wireless Testbed Architecture for Network Layer 
Experimentation Based on ORBIT and VINI
George C. Hadjichristofi, Avi Brender, Marco Gruteser, Rajesh Mahindra, Ivan Seskar  
WINLAB, Rutgers University  
671 Route 1 South  
North Brunswick, NJ 07310, USA 
PI:EMAIL, PI:EMAIL, {gruteser, rajesh, 
seskar}@winlab.rutgers.edu  
ABSTRACT 
Renewed interest has emerged in novel internet architectures that 
among other aspects can better address the specific requirements 
of  wireless  networks,  such  as  increased  host  mobility,  router 
mobility, or flow control over fast-changing links. Most existing 
testbeds, however, focus either on wired or wireless networks and 
provide  inadequate  support  for  experimentation  with  novel 
network architectures spanning the wired and wireless domain. 
This  paper  presents  an  initial  design  of  a  global-scale  wired-
wireless testbed and its prototyping based on the existing ORBIT 
and VINI testbeds. It allows researchers to define custom network 
topologies  comprising  both  wired  and  wireless  nodes  and 
experimenting with new network and transport layer protocols in 
these  networks.  The  testbed  relies  on  virtualization  on  wired 
nodes, trading a slight performance penalty for the ability to allow 
simultaneous usage for multiple long-running experiments.  
Categories and Subject Descriptors: D.4.7 
[Operating Systems]:Organization and Design---Distributed 
systems; C.2.3 [Computer-Communication Networks]: Network 
Operations---Network management; D.4.8 [Operating Systems]: 
Performance---Operational analysis 
General Terms: Design, Experimentation 
Keywords: VINI, ORBIT, PlanetLab, Integration, 
Architecture, Experiments 
1.  INTRODUCTION 
As  the  continued  expansion  of  the  Internet  is  exposing  security 
and  host  mobility  limitations,  among  others,  in  the  original 
design,  renewed  interest  has emerged in a fundamental redesign 
of  the  internet  architecture.  This  is  accompanied  by  the  GENI 
effort to provide a testbed for experimentation with novel network 
architecture concepts. 
Most  existing  large-scale  network  testbed  designs,  however, 
concentrate either on wired networks (e.g., PlanetLab[1] or VINI 
Permission to make digital or hard copies of all or part of this work for 
personal or classroom use is granted without fee provided that copies 
are not made or distributed for profit or commercial advantage and that 
copies bear this notice and the full citation on the first page. To copy 
otherwise,  or  republish,  to  post  on  servers  or  to  redistribute  to  lists, 
requires prior specific permission and/or a fee. 
WiNTECH’07, September 10, 2007, Montréal, Québec, Canada. 
Copyright 2007 ACM  978-1-59593-738-4/07/0009...$5.00. 
[2][3],  Emulab[4][5])  or  on  controlled  wireless  experimental 
platforms  such  as  the  Open  Access  Research  Testbed  for  Next-
Generation Wireless Networks (ORBIT) testbed [6], the Ad Hoc 
Protocol  Evaluation  Testbed  (APE)  [7],  MIT  Roofnet,  Transit 
Access Points (TAPs) [8], and WHYNET [9]. We are only aware 
of  the  expansion  of  Emulab  with  wireless  nodes  as  a  first 
integrated  design,  providing  emulation  capabilities  to  test  novel 
network concepts.  
In  this  paper,  we  design  and  prototype  a  testbed  that  provides 
global-scale  experimentation  with  custom  topologies  involving 
wired and wireless nodes based on the existing ORBIT and VINI 
testbeds.  Both  testbeds  are  in  daily  heavy  use,  but  have  only 
allowed  exclusively  wired  or  wireless  experiments.  Using  the 
integrated  platform,  researchers  will  be  able  to  emulate  real 
network  topologies  with  wired  nodes  at  PlanetLab  sites  around 
the  world  and  wireless  nodes  at  the  ORBIT  facility.  The 
contribution of this paper is a framework for integrating wired and 
wireless  testbeds  to  support  Layer  3  experimentation.  In  our 
design, the wired and wireless testbeds may be physically disjoint 
and may belong to different organizations or parties (i.e., do not 
share the same control and management framework, and network 
architecture [4][5]). To the best of our knowledge, this is the first 
attempt for such an integration.  
In section 2, we describe the ORBIT and VINI testbeds. Section 3 
specifies  our  design  goals  and  requirements  for  this  integration 
and  section  4  provides  the  design  aspects  and  implementation 
details of the integrated solution. Section 5 demonstrates a proof-
of-concept Layer 3 experiment deployed over the integrated wired 
and wireless testbed. Section 6 discusses our solution. 
2.  BACKGROUND 
ORBIT  is  a  wireless  network  of  400  nodes  arranged  in  a  two-
dimensional grid [6]. The project is currently being developed and 
operated  by  WINLAB  at  Rutgers  University.  Researchers  must 
use an online scheduler to reserve time slices on the grid, during 
which  time  they  have  full access to every node.  During a time 
slot  an  ORBIT  user  can  image  all  of  the  radio  nodes  with  an 
operating system of his choice and carry out various experimental 
scenarios.  
VINI  is  a  virtual  network  infrastructure  that  allows  network 
researchers  to  evaluate  their  protocols  and  services  and  runs  on 
the  PlanetLab  wired  testbed  [1][2][3].  PlanetLab  is  a  global 
research  network  operated  by  Princeton  University.  Currently 
there  are  nearly  800  nodes  available  for  use  at  379  locations 
the  world.  Each  physical  PlanetLab  node 
runs 
around 
virtualization 
software  known  as  Linux  VServer.  Each 
experimenter  is  given  a  sliver,  or  a  virtualized  section  of  a 
physical node. Each sliver is created on every PlanetLab node that 
is part of the experiment.  
2.1  VINI and ORBIT Architectures 
The VINI virtual network infrastructure creates virtual nodes that 
run on existing PlanetLab nodes. Each virtual node has access to 
one  or  more  virtual  network  resources  that  can  be  used  during 
experiments.  VINI  leverages  a  number  of  technologies,  which 
have  been  integrated  together  [3].  Figure  1  shows  the  basic 
components that are utilized in a VINI virtual node.   
MIT PlanetLab node
VINI virtual node
XORP
eth1
UML
eth2
UML Switch
Unix Socket
Click
Unix Socket
OpenVPN
e l
n
n
u
U D P  t
Alaska
VINI
node
U
D
P
t
u
n
n
e
l
UDP tunnel
VINI Ingress
tunnel
California
VINI
node
Non-VINI
node
tun0
Figure 1. VINI software architecture. 
User  Mode  Linux  (UML)  runs  as  a  user-space  process  and  is  a 
full-featured  Linux  kernel  [10].  It  creates  a  virtual  environment 
complete  with  network  devices  and  a  file  system.  The  UML 
instance  is  started  from  within  the  experimenter’s  slice  on 
PlanetLab.  Each  virtual  environment  on  a  PlanetLab-VINI  node 
communicates  with  other  virtual  environments  by  creating  an 
overlay topology with UML interfaces as the end points.  
XORP, running within UML, is an open source routing protocol 
suite  [11].  XORP  implements  a  number  of  routing  protocols, 
including  BGP,  OSPF,  RIP,  PIM-SM,  IGMP,  and  MLD.    It 
manipulates routes in the data plane through forwarding engines, 
such  as  the  Linux  kernel  routing  table  and  the  Click  modular 
software router discussed later on. XORP generally assumes that 
each  link  to  a  neighboring  router  is  associated  with  a  physical 
interface.  Within  UML,  it  has  the  impression  that  the  Ethernet 
interfaces are directly connected to neighbors. For example, if an 
MIT  sliver  is  to  be  connected  to  Alaska  and  California,  within 
UML  packets  sent  out  via  eth1  would  be  sent  to  California  and 
packets sent out via eth2 would be sent to Alaska (see Figure 1). 
In  reality,  all  packets  going  in  and  out  of  UML  are  sent  first 
through the UML switch and Click modules at the lower layers. 
The IP addressing scheme used in UML provides each virtual link 
with its own class C IP address. 
The UML switch is a virtual switch used to connect UML and 
Click through Unix sockets. Click is a modular routing software 
created  and  maintained  by  MIT  [12][13].  All  packets  leaving 
UML are sent through the UML Switch to Click for inspection. 
Click is highly configurable and can inspect, modify, and route 
any  type  of  packet.  All  the  information  exchanged  between 
Click  and  UML  must  be  Ethernet  encapsulated.  Click  creates 
UDP  sockets  on  a  specified  port  for  VINI  related  packets  and 
maps  the  packets  sent  on  these  UML  interfaces  to  the 
appropriate UDP tunnel.  
the  VINI  software 
OpenVPN  [14]  was 
architecture  with  the  main  scope  of  connecting  an  outside 
machine to a VINI experiment, as an edge node, and allowing 
for IP traffic injection into VINI. It is ran on every VINI virtual 
node  and  is  linked  with  the  Click  router  trough  Unix  sockets 
allowing  for  appropriate  packet  framing  of  ingress  traffic  as 
Ethernet  packets.  In  the  reverse  direction,  Click  must  strip 
Ethernet  headers  on  packets  from  UML  and  deliver  them  to 
OpenVPN.  OpenVPN on VINI nodes uses the PlanetLab slice’s 
tun0/24 and is configured as a server that pushes IP addresses in 
10.0.0.0/8 range. 
introduced 
into 
START
1
Experiment 
Experiment 
Script
Script
Console
NodeHandler
2
Internet
Support 
services
3
NodeHandler
Agents
Orbit nodes
Gateway 
Figure 2. Setting up an experiment using the ORBIT 
framework. 
Contrary  to  VINI,  a  user  of  the  wireless  ORBIT  testbed  is  not 
restricted  by  any  software  architecture  constraints.  An  ORBIT 
user has complete freedom to install and run any operating system 
and  related  software  on  ORBIT  nodes  and  carry  out  wireless 
experiments during a reserved time slot.  More specifically, if an 
ORBIT user needs to run an experiment he/she typically logs onto 
the  console and uses the NodeHandler to communicate with the 
NodeHandler Agents running on the ORBIT nodes, as shown in 
Figure 2.  The NodeHandler can deploy the experiment for the 
user based on a given experimental script. A series of operating 
system images are already available and preconfigured with the 
NodeHandler  and  any  other  required  communication  software 
that  enable  the  dynamic  execution  and  control  of  experiments 
on all of the 400 ORBIT nodes. The usage model of ORBIT is 
different compared to VINI’s.  ORBIT experiments mainly have 
a  short  duration  whereas  PlanetLab-VINI  experiments  tend  to 
be long-running.  
3.  DESIGN GOALS AND REQUIREMENTS 
The integration between wireless and wired networks for network 
layer experiments needs to satisfy the following goals: 
•    No packet type restrictions: Any type of Ethernet encapsulated 
packet  should  be  able  to  propagate  between  the  two  networks.  
These packet types include both IP and non-IP packets. 
•    Arbitrary  topology  creation:  The  solution  should  provide 
researchers  with  the  capability  to  connect  any  wireless  node  to 
any wired node in different combinations and carry network layer 
and  above  experiments.  Figure  3  shows  a  sample  network 
configuration  where  wireless  nodes  (e.g.,  ORBIT  nodes)  are 
connected  to  wired  (e.g.,  PlanetLab-VINI)  nodes.    One  or  more 
wireless  nodes  are  connected  to  multiple  wired  nodes  in  the 
integrated overlay network. 
•    Transparency: While a software architecture on a testbed may 
provide  a  platform  to  deploy  controlled  network  experiments  it 
should not impose a high learning curve on users to setup these 
experiments.  In addition, it should not require the users to make 
extensive  modifications  to  the  existing  software  architecture  to 
deploy an experiment. 
Wireless 
Network
Wireless
Wireless
Wireless
Wireless
Wireless 
Network
wireless  node                   wired node
(ORBIT)                              (VINI)
Figure 3. Sample configuration of the integrated testbed. 
Reflecting  back  to  the  goals  of  this  design,  there  are  certain 
requirements  or  restrictions  that  are  imposed  for  a  successful 
integration of wireless and wired testbeds.  Currently, most of the 
traffic carried out in the Internet uses IP.  Experiments that aim to 
investigate non-IP traffic would have to be executed in an isolated 
testbed  that  may  not  properly  reproduce  a  real-life  network 
environment. Since the focus of this paper is on large scale multi-
user  testbeds  that  may  be  deployed  across  the  globe  then  the 
notion of non-IP traffic needs to be addressed within the context 
of overlay networks. Overlay networks typically utilize IP tunnels 
and  each  overlay  may  represent  an  experiment  that  slices  the 
resources  of  both  wired  and  wireless  testbeds.  It  is  therefore 
important that the new integrated design accommodates the entire 
non-IP packet within the overlays’ tunnels.   
Another  aspect  that  needs  to  be  addressed  is  virtualization.  
Virtualization based on solutions such as VMware, Xen, or UML 
allow  the  creation  of  slices  across  a  testbed  and  accommodate 
multiple users.  Experiments on wired networks have been based 
on  Layer  3  of  the  OSI  stack,  or  above.    However,  typical 
experiments on wireless testbeds are based on the entire OSI stack 
and  thus impose limitations in terms of virtualizing the wireless 
interface at the physical and MAC layers.  In order to allow a user 
the flexibility to experiment with these lower layers, we chose not 
to  virtualize  the  wireless  nodes  for  this  integration,  but  simply 
spatially  segment  the  wireless  testbed  and  allow  each  network 
slice full access to a specific segment of nodes.  
represents 
4.  INTEGRATION OF ORBIT AND VINI 
In this section, we identify the various aspects of the architecture 
of  the  two  testbeds  that  need  to  be  modified  or  augmented  to 
facilitate  their  integration  and  meet  the  goals  mentioned  in 
Section  3.  The  solution  presented  below 
the 
architecture  that  proved  to  provide  the  most  flexibility  and 
functionality and the least complexity in deployment. 
4.1  VINI  Architecture Components 
OpenVPN IP tunnels allow the injection of an outside computer 
into a VINI experiment, but with limited capabilities. The current 
configuration allows a single host running an OpenVPN client to 
establish  a  VPN  tunnel  into  VINI  and  inject  IP  traffic  across  a 
virtual  network  topology.    This  limitation  has  to  be  removed  to 
allow a whole network of computers to be connected to VINI at 
multiple connection points.  
In  addition,  OpenVPN  in  VINI  uses  IP  tunnels  (i.e.,  IP  packets 
within  IP)  rather  than  Ethernet  tunnels  (i.e.,  Ethernet  packets 
within IP). Modifying OpenVPN to use Ethernet links has many 
advantages over IP links, including but not limited to: 