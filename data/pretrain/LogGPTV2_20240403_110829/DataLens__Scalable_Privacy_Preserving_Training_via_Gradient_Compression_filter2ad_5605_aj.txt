learning rate
TopAgg
𝑘 = 0.7
12.0
1.6
512
0.1
𝑘 = 0.6
16.0
1.6
512
0.08
𝑘 = 0.8
10.0
1.6
512
0.1
(f) CIFAR-10 (𝜀 = 8)
GM-DP
14.0
1.8
512
0.04
TopAgg
𝑘 = 0.7
𝑘 = 0.8
𝑘 = 0.6
GM-DP
TopAgg
𝑘 = 0.7
𝑘 = 0.6
0.0008
1
6
24
0.8
6
24
0.001
0.3
7
32
0.002
1.5
7
32
0.001
𝑐
𝜎
batch size
learning rate
𝑐
𝜎
batch size
learning rate
1
2.5
96
0.005
Algorithm 5 - Gradient Compression via k-level Stochastic
Gradient (StoKlevelGrad). This algorithm takes in a gradient
vector of a teacher model g(𝑖) and returns the compressed gradient
vector ˜g(𝑖).
1: Input: Gradient vector g(𝑖) , gradient clipping constant 𝑐, top-𝑘
2: g
(𝑖)
,−𝑐), 𝑐) for each dimension 𝑗 in g(𝑖)
𝑗
⊲ Clip each dimension of g(𝑖) so that −𝑐 ≤ g
(𝑖)
𝑗 = min(max(g
(𝑖)
𝑗 ≤ 𝑐.
⊲ Random Rotation
⊲ gradient normalization to (-1, 1)
4: ˆg(𝑖) ← g(𝑖)/(cid:13)(cid:13)g(𝑖)(cid:13)(cid:13)∞
3: g(𝑖) = 𝑅 × g(𝑖)
˜g(𝑖) ← 0
5:
6: let 𝑏[𝑟] := −𝑘/2 + 2𝑟 for every 𝑟 ∈ [0, 𝑘)
𝑘−1 for every 𝑟 ∈ [0, 𝑘)
7: let 𝑚[𝑟] := −𝑐 + 2𝑟𝑐
compressed sparse gradient vector
(𝑖)
8: for each index 𝑗, and 𝑏[𝑟] ≤ g
𝑗 ≤ 𝑏[𝑟 + 1] do
 𝑏[𝑟 + 1], with probability
𝑏[𝑟],
𝑜.𝑤.
9:
˜𝑔(𝑖)
𝑗 =
10: end for
11: Return: ˜g(𝑖)
(𝑖)
𝑗 −𝑚[𝑟 ]
g
𝑚[𝑟+1]−𝑚[𝑟 ]
⊲ initialization of the
𝑘 = 0.8
1
2.5
96
0.005
GM-DP
1.5
3
96
0.005
TopAgg
𝑘 = 0.7
0.5
2.5
2048
0.2
𝑘 = 0.8
0.5
3
2048
0.2
𝑘 = 0.6
0.5
2.5
2048
0.2
GM-DP
2.5
2.5
2048
0.04
𝑐
𝜎
batch size
learning rate
1
2.5
96
0.005
Algorithm 6 - Differentially Private Gradient Compression
and Aggregation (D2P-Fed for DataLens). This algorithm
takes gradients of teacher models and returns the compressed and
aggregated differentially private gradient vector.
1: Input: Teacher number 𝑁 , gradient vectors of teacher models G =
{g(1) , . . . , g(𝑁 ) }, gradient clipping constant 𝑐, top-𝑘, noise parameters
𝜎, voting threshold 𝛽
˜g(𝑖) ← StoKlevelGrad(g(𝑖) , 𝑐, 𝑘)
2: ⊲ Phase I: Gradient Compression
3: for each teacher’s gradient g(𝑖) do
4:
5: end for
6: ⊲ Phase II: Differential Private Gradient Aggregation
7:
8: ⊲ Phase III: Gradient Thresholding (Post-Processing)
9: for each dimension ˜𝑔∗
𝑗 of ˜g∗ do
𝑗 ≥ 𝛽𝑁 ;
˜𝑔∗
𝑗 ≤ −𝛽𝑁 ;
˜𝑔∗
˜g∗ ←𝑁
 1,
if
if
otherwise.
𝑖=1 ˜g(𝑖) + N(0, 𝜎2)
−1,
0,
¯𝑔𝑗 =
10:
11: end for
12: Return: ¯g
but worse FID than G-PATE), which we think the reason is because
FID is evaluated based on models trained with ImageNet which
may not be suitable for evaluating datasets such as MNIST. In our
experiments, we follow GS-WGAN and use the implementation8
for FID calculation.
C.2 Adapting Other Gradient Compression
Algorithms to DataLens
In this section, we illustrate how we adapt D2P-Fed and FetchSGD
to DataLens framework.
For D2P-Fed, we replace our Algorithm 2 (TopkStoSignGrad)
that uses stochastic sign compression with their method, which
essentially uses k-level gradient quantization and random rotation
for gradient pre-processing. The detailed algorithm is shown in
Algorithm 6 and Algorithm 5.
For FetchSGD, we uses the same stochastic sign compression
as we leverage sign signal as teacher voting in PATE framework.
During aggregation, we use Count Sketch data structure, and use
8https://github.com/google/compare_gan
Algorithm 7 - Differentially Private Gradient Compression
and Aggregation (FetchSGD for DataLens). This algorithm
takes gradients of teacher models and returns the compressed and
aggregated differentially private gradient vector.
1: Input: Teacher number 𝑁 , gradient vectors of teacher models G =
{g(1) , . . . , g(𝑁 ) }, gradient clipping constant 𝑐, top-𝑘, noise parameters
𝜎, voting threshold 𝛽
˜g(𝑖) ← TopkStoSignGrad(g(𝑖) , 𝑐, 𝑘)
S += Sketch(˜g(𝑖) )
2: S = CountSketchAggregator()
3: ⊲ Phase I: Gradient Compression
4: for each teacher’s gradient g(𝑖) do
5:
6:
7: end for
8: ⊲ Phase II: Differential Private Gradient Aggregation
9:
10: Return: ˜g∗
˜g∗ ← top-𝑘(unSketch(𝑆)) + N(0, 𝜎2)
top-𝑘 and unsketch operation to retrieve the aggregated gradient.
The detailed algorithm is shown in Algorithm 7.
Session 7A: Privacy Attacks and Defenses for ML CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2164Table 12: Quality evaluation of images generated by different differentially private data generative models on Image Datasets: Inception
Score (IS) and Frechet Inception Distance (FID) are calculated to measure the visual quality of the generated data under different 𝜀 (𝛿 = 10−5).
(a) 𝜀 = 1
Dataset
MNIST
Fashion-MNIST
CelebA
Dataset
MNIST
Fashion-MNIST
CelebA
Metrics Real data DP-GAN PATE-GAN G-PATE GS-WGAN DataLens
IS ↑
FID ↓
IS ↑
FID ↓
IS ↑
FID ↓
3.60
153.38
3.41
214.78
1.11
302.45
4.37
186.06
3.93
194.98
1.18
297.73
1.00
489.75
1.00
587.31
1.00
437.33
1.19
231.54
1.69
253.19
1.15
434.47
1.00
470.20
1.03
472.03
1.00
485.92
9.86
1.04
9.01
1.54
1.88
2.38
(b) 𝜀 = 10
Metrics Real data DP-GAN PATE-GAN G-PATE GS-WGAN DataLens
IS ↑
FID ↓
IS ↑
FID ↓
IS ↑
FID ↓
8.59
58.77
5.87
135.47
1.00
432.58
5.78
173.50
4.58
167.68
1.42
320.84
1.46
253.55
2.35