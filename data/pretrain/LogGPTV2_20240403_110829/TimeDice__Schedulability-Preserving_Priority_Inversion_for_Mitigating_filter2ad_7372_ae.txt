120.00
240.00
480.00
960.00
1920.00
τ1,1
τ1,2
τ1,3
τ1,4
τ1,5
τ2,1
τ2,2
τ2,3
τ2,4
τ2,5
τ3,1
τ3,2
τ3,3
τ3,4
τ3,5
τ4,1
τ4,2
τ4,3
τ4,4
τ4,5
τ5,1
τ5,2
τ5,3
τ5,4
τ5,5
NoRandom(NR)
Anal. Empr.
18.09
18.00
37.36
37.20
60.01
60.00
158.40
157.11
455.08
598.80
30.36
30.20
58.35
59.00
92.23
93.20
232.81
330.80
903.20
655.69
43.98
44.00
79.55
84.80
126.01
128.00
284.35
444.80
735.69
1208.00
59.40
59.44
105.21
110.40
163.24
167.60
354.82
560.40
812.75
1517.60
79.20
79.60
145.60
128.33
196.74
210.40
436.94
685.60
1830.40
911.86
TD − NR
TimeDice(TD)
Anal. Empr. Anal. Empr.
15.54
34.80
12.75
55.20
15.66
76.80
235.20
8.87
14.87
616.80
15.78
52.20
11.26
82.80
18.64
115.20
2.20
352.80
925.20
-31.40
14.98
69.60
5.22
110.40
21.89
153.60
14.84
470.40
88.24
1233.60
87.00
12.85
-4.19
138.00
14.47
192.00
3.43
588.00
6.68
1542.00
-12.26
104.40
165.60
-18.15
-0.64
230.40
-14.75
705.60
1850.40
71.81
33.63
50.11
75.67
165.98
469.95
46.14
69.61
110.87
235.01
624.29
58.96
84.77
147.90
299.19
823.93
72.29
101.02
177.71
358.25
819.43
66.94
110.18
196.10
422.19
983.67
16.80
18.00
16.80
76.80
18.00
22.00
23.80
22.00
22.00
22.00
25.60
25.60
25.60
25.60
25.60
27.60
27.60
24.40
27.60
24.40
24.80
20.00
20.00
20.00
20.00
Without any randomization, the high-priority partitions tend to
experience little or no delay when they have budget and tasks
to run. Hence, their tasks are likely to be served quickly. With
the randomization by TIMEDICE, those partitions experience
increased delays even when there are no other partitions, and so
do their tasks. For the same reason, the average-case response
times also increase in most cases, and the largest increase is
34.03% which is observed from τ5,2.
Table II compares the worst-case response times (WCRTs)
that are analytically computed (columns labeled as Anal.) and
experimentally measured (columns labeled as Empr.). The
real-time requirement states that the WCRT of a task must
τi,4
320 ms
480 ms
640 ms
800 ms
960 ms
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:27:56 UTC from IEEE Xplore.  Restrictions apply. 
461
TABLE III: Impact of TIMEDICE on the responsiveness of the
prototype self-driving applications. Units are in ms.
Behavior control
Vision-based steering
Path planning
NoRandom
TimeDice
Deadline
20
50
50
avg
0.91
10.55
0.62
std
2.51
3.85
0.79
max
10.04
33.92
6.35
avg
2.45
23.20
1.06
std
2.51
3.69
2.29
max
18.03
34.69
19.83
TABLE IV: End-to-end latency of TIMEDICE’s randomization.
Percentile
|Π| = 5
|Π| = 10
|Π| = 20
25%
0.609 us
1.156 us
3.602 us
50%
0.938 us
2.079 us
5.691 us
75%
1.430 us
3.266 us
9.052 us
99%
6.917 us
20.500 us
52.673 us
100%
38.726 us
54.915 us
73.217 us
not exceed the deadline. The system designer can perform a
schedulability test before deploying the system by calculating
the analytic WCRT and checking if it meets the deadline. The
analytic WCRTs for NoRandom cases are calculated by the
analysis in [33] while those for TimeDice are calculated by
the analysis presented in Sec. IV-B. Notice ﬁrst that because
the analyses assume zero kernel-overhead, the empirical WCRT
can be slightly higher than what is numerically computed, albeit
in rare cases (e.g., τ1,1). The results ﬁrst highlight that all tasks
are schedulable in both cases. Note, however, that this does not
mean that TIMEDICE always preserves the task schedulability.
Depending on partition and task conﬁgurations, some tasks may
be unschedulable in the worst-case due to the additional delay in
the randomized partition-level schedule. Nevertheless, in most
cases, the difference in the analytic WCRT did not exceed one
replenishment period of the partition that each task belongs to.
As explained in Fig. 11 in Sec. IV-B, this follows the worst-
case assumption that the last part of task execution is maximally
delayed by Ti − Bi, whereas this delay can be as short as zero
when partitions are not randomized. Hence, the difference is
unlikely to exceed Ti as a rough bound unless a substantially
large amount of load is added due to the extended busy interval.
Meanwhile, the empirical WCRTs of some tasks (e.g., τ2,5)
are smaller with TIMEDICE than with NoRandom. This is simply
because the true worst cases were not captured although we
allowed tasks to vary the execution times and inter-arrival times
for added variations and also ran the system for long hours.
As analyzed earlier, tasks cannot have shorter WCRTs when
partition schedule is randomized by TIMEDICE. If the system
was run indeﬁnitely, the difference in the empirical WCRTs (the
last column in Table II) would have been non-negative.
Lastly, we evaluate the impact of TIMEDICE on the respon-
siveness of the tasks running on the prototype platform (Fig. 5).
Note that the data logger is a collection of callback functions for
logging data received from the others. Hence, we do not mea-
sure its response time. Similar to the benchmark results above,
Table III shows that the average-case and (empirical) worst-
case response times increase under TIMEDICE. Nevertheless,
the tasks still meet their real-time requirements.
3) Scheduling overhead: TIMEDICE incurs overhead on
the partition scheduler as it performs a candidate search with
schedulability test at each scheduling decision. Hence, we
measure the associated cost using the system in Table I.
In addition to the 5-partition conﬁguration, we double and
(cid:5) (cid:6)(cid:3)(cid:1)
(cid:5) (cid:6)(cid:2)(cid:1)
(cid:5) (cid:6)(cid:4)
Fig. 17: Overhead of TIMEDICE operations (measured every
second) for different number of partitions (|Π| = 5, 10, 20).
TABLE V: Number of scheduling decisions and partition-
switches for different number of partitions (|Π| = 5, 10, 20).
# Decisions/sec
# Switches/sec
|Π| = 5
|Π| = 10
|Π| = 20
NoRandom TimeDice
1333.69
1725.93
2594.09
441.50
821.59
1592.71
NoRandom TimeDice
911.86
1243.38
1986.96
247.55
467.85
907.59
quadruple the number of partitions by duplicating the partitions
while adjusting the partition budgets and task execution times
accordingly so that the total system utilization remains the same.
Table IV summarizes the end-to-end latency of Algorithm 1,
that is, the time taken to pick a partition from the active ones.
The results can be interpreted better by taking into account the
frequency of scheduling decisions. Hence, we measured time
spent by the TIMEDICE operations over every second. Fig. 17
shows that the scheduler spends about 1.7 ms in total over 1000
ms (thus overhead of 0.170%) on randomizing the schedules of
5 partitions. Similarly, the overhead for |Π| = 10 and |Π| = 20
are around 0.535% and 2.338%, respectively.
The randomization also causes more frequent scheduling
decisions and partition switches than the no-randomization