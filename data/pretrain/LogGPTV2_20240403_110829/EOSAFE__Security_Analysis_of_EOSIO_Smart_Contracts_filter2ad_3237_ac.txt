n is the length of the array. Moreover, a function call also
imposes many new branches to represent all possible callees.
Obviously, the number of branches will increase exponentially
if there exists a deep call stack. Unfortunately, a concatenation
of several deep call stacks is common in EOSIO contracts.
Thus, there is a practical need to mitigate this issue.
To this end, we propose a heuristic-guided pruning ap-
proach to solve the challenge. We rely on several general
pruning strategies based on our hands-on experience to miti-
gate the issue derived from branches and deep function calls.
For example, our operational observation suggests that dis-
carding paths under a speciﬁc depth threshold, which is de-
termined by the scenario, will not inﬂuence the precision of
results for (almost) all cases. Speciﬁcally, we expose two op-
tions: call depth, which limits the depth of call stack; and
timeout for users to limit the process of symbolic execution.
However, the effectiveness of the general mitigation strate-
gies are limited in practice. Fortunately, this issue in EOSIO
can be further (partially) resolved when performing vulner-
ability detection, as we only have to pay attention to some
speciﬁc features/structures of the vulnerable code snippet. For
example, when detecting fake EOS and fake receipt vulner-
abilities, only apply and transfer functions are taken into
consideration. All these technical details and vulnerability-
speciﬁc pruning strategies will be discussed in §5.3.
4.2 Memory Overlap
The memory area of Wasm can be regarded as a vector of un-
interpreted bytes [34], which means users can interpret these
raw bits through load and store with different value types.
The EOS VM adopts a linear array as its memory model,
however, this is memory-consuming for the emulation due
to mimicking the sparse memory layout of the EOSIO con-
tract [35]. Therefore, we decide to use key-value mappings to
emulate the memory, where the key is a tuple to specify the
address range, and the value is the data being stored. To better
articulate the problem itself and the model, we ﬁrst deﬁne a
notion of a memory area M , which is a set of triplets that
describe the values in (different) address ranges of the mem-
ory. The triplet t has the following form: t := (l,h,D). Here
l refers to the inclusive lower-bound, h means the exclusive
1276    30th USENIX Security Symposium
USENIX Association
Figure 3: The interval (A + 2,A + 3) is overlapped after ap-
plying storen((A + 2,A + 5,D),M ).
upper-bound, and D represents the data corresponding to the
address range restricted by l and h. Moreover, T is the set of
all legal triplets, hence ∀t ∈ T .(cid:96)(D) = h− l always holds.
Based on that, we can deﬁne a pair of naive operations
loadn(l,h,M ) and storen(t,M ) that describe memory ac-
cesses. To be speciﬁc, loadn will load data from the address
range between l and h and return a set that contains the triplets
describing the memory contents in that range. storen will in-
sert the given t into M and return the updated memory.
However, by this representation it is not guaranteed that the
memory contents within a certain address range are deﬁned at
most once. Speciﬁcally, the overlapped memory interval may
lead to ambiguity. For example, as shown in Figure 3, if there
has already existed an interval addressed by (A + 1,A + 3),
the operation storen((A + 2,A + 5,D),M ) does not consider
the relationship between these two intervals. As a result, the
data addressed by key (A + 2,A + 3) in the resulting memory
area M (cid:48) is ambiguous, meaning that loadn(A + 2,A + 3,M (cid:48))
would return the set {(A + 2,A + 3,Do), (A + 2,A + 3,Dn)}
where Do is the original data written at memory address A +2,
and Dn is the data fraction of D that was inserted into the
memory area by the storen operation.
The problem is due to the overlapping memory and the
improper mapping strategy. Through further analysis, we ob-
serve that the memory overlap problem occurs mainly due
to the implementation of the store instruction. As aforemen-
tioned, Wasm provides over 20 memory access related in-
structions, e.g., i32.store, i64.store, and i32.load. For
store-related instructions, we can vary the length of D to make
it suitable for any instructions that have different length of
data to be stored; for those load-related instructions, setting
different parameters to guarantee the length of retrieved data
is enough. Consequently, we propose an implementation of
storing and loading data with the memory area, namely the
memory-merging method (see §5.1.2), to solve the problem
by merging allocated memory. By doing so, we can success-
fully overcome the challenges raised in Figure 3.
4.3 Library Dependency
To facilitate the development of smart contracts, EOSIO al-
lows the import of external functions as libraries, which means
the bodies of these imported functions will not be compiled
into Wasm bytecode. EOSIO ofﬁcially provides plenty of
such functions as the system library for DApp developers.
They have been widely used in many (if not most) smart con-
tracts. As a result, our analysis will be improperly terminated
due to the lack of bodies of those imported function calls.
Figure 4: The architecture of EOSAFE.
To resolve the dependency, we propose an on-demand and
semantic-aware approach (see §5.2) to emulate the imported
functions. We only focus on functions whose functionalities
and side effects are related to our analysis. We have to emulate
such functions properly to guarantee the correctness of the ﬁ-
nal result. The strength and coverage of the emulation depend
on our need to perform the analysis. For some functions, we
have to cover the arguments, return value and side effect. For
instance, for the memory-related function memmov, we need
to consider all its side effect on the symbolic memory. For
some others, we may only need to consider the possible side
effects. For example, for those table-related functions which
has no return value and no effect on vulnerability detection,
e.g., db_store_i64, we can just balance the stack without
mimicking its behaviors.
5 System Design
Figure 4 depicts the overall architecture of EOSAFE, which
takes the Wasm bytecode of an EOSIO smart contract as the
input and eventually determines whether the bytecode is vul-
nerable. Speciﬁcally, EOSAFE is based on Octopus [36], a
security analysis framework for Wasm modules without sup-
porting symbolic execution. Therefore, to avoid reinventing
wheels, each smart contract will be sent to Octopus for build-
ing its corresponding Control Flow Graph (CFG) with the
disassembled Wasm instructions in preprocessing.
EOSAFE is mainly composed of three modules, i.e., Wasm
Symbolic Execution Engine (Engine for short), EOSIO Li-
brary Emulator (Emulator for short), and Vulnerability Scan-
ner (Scanner for short). As shown in Figure 4, the input after
preprocessing (CFGs) is fed to the Scanner to perform vulner-
ability detection in a two-step process (locating suspicious
functions and detecting vulnerabilities) with the Engine and
Emulator. Speciﬁcally, the Engine performs symbolic exe-
cution accordingly along with path constraints, which will
be used by the Scanner to perform vulnerability detection.
Additionally, the Engine requests Emulator to implement the
USENIX Association
30th USENIX Security Symposium    1277
 storen((A+2, A+5, D), M)……A+1A+3M……A+2A+3A+5DM’A+1Memory-merging algorithmoverlapped(a) Wasm Symbolic Execution Engine(c) Vulnerability Scanner(b) EOSIO Library EmulatorStateSymbolic memoryGlobalFunction stackCurrent function•Local •Stack•Program counter •Instructionsinternal call. . .shareState stack. . .(c.1) LocateFunstarget functions…(c.2) ExecDetectorInputqueryqueryCFGDissembled Wasm InstructionsPath TreeVulnerability Reportcall imported function•Fake EOS •Fake Receipt •Missing Permission Check •Rollback•blockchain-state •authority-related•memory-related •table-related•control-flow-relatedmodeled behaviors when the Engine encounters the call for
imported functions. Note that the challenges discussed in §4.1
and §4.2 are addressed in §5.1 and §5.3, while the challenge
discussed in §4.3 is addressed in §5.2.
5.1 Wasm Symbolic Execution Engine
We design the symbolic execution engine as a generic frame-
work to simulate the execution of a smart contract on the
stack-based EOS VM. It accepts the CFGs and the disassem-
bled Wasm instructions as the input, and symbolically exe-
cutes instructions within basic blocks in order for all feasible
paths. During the process, the path constraints are generated
accordingly. This module needs to maintain two crucial com-
ponents, i.e., path tree and state, for further analysis. Specif-
ically, the path tree is composed of feasible paths, which
are possible control ﬂows of the current smart contract. A
path would diverge into two paths when encountering some
conditional instructions (like br_table). To obtain feasible
paths, the Engine ﬁrst relies on the SMT solver to check
the path conditions, and then prunes all the infeasible paths
that are unsolvable. Along each feasible path, we not only
record the corresponding constraints , but also all the signa-
tures of invoked imported functions. The maintained path tree
signiﬁcantly contributes to the analysis of vulnerability detec-
tion (see §5.3). As to the state, we maintain some necessary
state-related information, including local/global variables, lin-
ear memory, stack, and the subsequent instructions with its
corresponding program counter. Speciﬁcally, we address the
technical challenges mentioned in §4.1 and §4.2 as follows.
5.1.1 General strategies for alleviating path explosion
We provide two options, including call depth and time-
out, for users to mitigate the path explosion issue. On the one
hand, the option call depth is used to conﬁne the depth of
the call stack to prevent the analysis from getting into trouble
to deal with complicated branches or deep function calls. As
we know, a single function could have several sets of con-
straints corresponding to feasible paths within the function,
which may lead to an exponential growth of the number of
paths. Thus we limit the depth of call stack to improve the
coverage. On the other hand, we may still be in trouble when
encountering some cases that are extremely time-consuming.
To guarantee the progress for the whole system, the Engine of-
fers another option named timeout to control the maximum
execution time for the path-level analysis. The timeout results
will be recorded for further investigation. Note that, the path
explosion issue will be further addressed in the vulnerability
scanner (see § 5.3), as we only have to pay attention to some
speciﬁc features of the vulnerable code snippets.
5.1.2 Eliminating memory overlap
Recall the deﬁnition in §4.2, the key-value pair in the memory
M is deﬁned as a triplet t, i.e., (l,h,D), where D is a sequence.
To be speciﬁc, a sequence is a concatenation of elements of
loadn(l(cid:48),h(cid:48),M ) := {(l(cid:48),h(cid:48),D(cid:48))|∃f . (∀i∈ [l(cid:48),h(cid:48)). f (i)∈M∧
f ( j).D[ j− f ( j).l]}
i∈ [ f (i).l, f (i).h))∧ D(cid:48) =
h(cid:48)−1(cid:110)
j=l(cid:48)
2(cid:107)a3(cid:107)a4),M ).
Figure 5: The structure of M before and after the instruction
storer((A + 2, A + 5, a(cid:48)
the same size, where the element is represented as a. We
should notice that, in M , a is the smallest and indivisible
element, whose length is 1. Therefore, we have:
D := a0 (cid:107) a1 (cid:107) a2 (cid:107) ...(cid:107) an
in which the element can be obtained by its index (i.e., a
non-negative integer):
D[i] := ai, where i ∈ [0, n]
Moreover, the length of the sequence can be obtained by
the (cid:96) operator (e.g., (cid:96)(a0 (cid:107) a1 (cid:107) a2) = 3). We ensure the length
of a sequence equals to its corresponding address range, i.e.,
(cid:96)(D) ≡ h− l.
loadn and storen operations described in §4.2 as:
Based on the above deﬁnitions, we can formally deﬁne the
loadn : N× N× 2T → 2T with
storen : T × 2T → 2T with storen(t(cid:48),M ) := M ∪{t(cid:48)}
Speciﬁcally, loadn will traverse the index space from l(cid:48) to
h(cid:48), concatenate elements from the memory fragments in M
that overlap with the index space, and ﬁnally return the set
containing all triplets that describe the different data values
that can be read from M within the index space. Meanwhile,
storen will return the updated M . Here f represents a function
that maps an arbitrary index to the corresponding interval in
M from which the data for this index is taken. As discussed in
§4.2, there exists a memory overlap problem, i.e., there might
be different functions f that map the same index to different
intervals. To address this issue, we have to take care of the
intervals that are overlapped with the newly incoming ones.
Formally, when a new sequence is going to be stored into M ,
say (l(cid:48),h(cid:48),D(cid:48)), we will ﬁrst ﬁlter out a set I that consists of
all the overlapped triplets with (l(cid:48),h(cid:48),D(cid:48)), as follows:
I := {t | t ∈ M ∧∃i ∈ [t.l,t.h). i ∈ [l(cid:48),h(cid:48))}
After that, we will remove all the intervals in I from M .
According to the overlapped relationship between them and
(l(cid:48),h(cid:48),D(cid:48)), all these intervals will be divided into the follow-
ing three types: 1) overlapped sub-intervals that need data
updating; 2) sub-intervals existing in I but not overlapped by
(l(cid:48),h(cid:48),D(cid:48)); and 3) sub-intervals of (l(cid:48),h(cid:48),D(cid:48)) that not conﬂict
with any existing sub-intervals in I . These three types of inter-
vals are constructed by predicates Pt, Qt, and Rt, respectively.
Finally, the reconstructed set of intervals will be merged
into M . Therefore, we deﬁne a reﬁned version of the store
1278    30th USENIX Security Symposium
USENIX Association
A+1A+3a1a2a1A+1A+3a3a4a2’A+5PtQtRt…………operation, called storer:
storer : T × 2T → 2T with
storer(t(cid:48),M ):= (M −I )∪{t |t ∈T ∧(Pt∨Rt∨Qt )}
Moreover, the predicates are related to the picked out t
and detailed in Table 1. Speciﬁcally, each one of them is the
conjunction of its corresponding two sub-predicates: Inter-
val Correctness (denoted as predIC), and Interval Maximality
(denoted as predIM). predIC describes an interval with an
updated sequence. However, as there may exist multiple inter-
vals that satisfy predIC, we have to deﬁne predIM to enforce
the maximality of that interval. To better illustrate the mean-
ings of the predicates and the operation storer, we give a
concrete example in Figure 5. Originally,
M = {(A + 1,A + 3,a1(cid:107)a2)}
Before executing storer(A + 2,A + 5,a(cid:48)
2(cid:107)a3(cid:107)a4), the set I
will be calculated immediately as:
I = {(A + 1,A + 3,a1(cid:107)a2)}
According to the deﬁned formalism of storer, it will con-
struct three triplets as:
t1 = (A + 2,A + 3,a(cid:48)
2) satisﬁes Pt1
t2 = (A + 1,A + 2,a1) satisﬁes Qt2
t3 = (A + 3,A + 5,a3(cid:107)a4) satisﬁes Rt3
Note that, (A + 3,A + 4,a3), (A + 4,A + 5,a4) and (A +
3,A + 5,a3(cid:107)a4) all satisfy the predIC of their correspond-
ing Rt. Meanwhile, the predIM guarantees that the range
(A + 3,A + 5) will be returned for predicate Rt3 instead of
the ranges (A + 3,A + 4), and (A + 4,A + 5) which would
also satisfy predIC. Consequently, M becomes:
(M − I)∪{t1,t2,t3} ≡ {t1,t2,t3}
After that, loadn(A +1,A +4,M ) will concatenate the nec-
essary parts of elements in M and ﬁnally return a set which
contains the single element (A + 1,A + 4,a1(cid:107)a(cid:48)
2(cid:107)a3).
In brief, the storer (with the original loadn) guarantees
data consistency by forcing all valid addresses appearing only
once in the key space. By doing so, we can solve all the issues
raised in Figure 3 effectively.
5.2 EOSIO Library Emulator
We introduce an on-demand and semantic-aware approach
to resolve EOSIO library dependency. We have manually
analyzed the smart contracts of the top 100 popular DApps
and existing known vulnerable smart contracts (see §7.1) to
extract all the imported functions from their Function sec-
tion (see §2.3). Then, we classify all the imported functions
into ﬁve categories according to their main functionalities to
conduct the emulation. Lastly, we can retrieve the side effects
from the emulated imported functions.
The corresponding side effects of these ﬁve imported func-
tion categories are summarized in the following.
Blockchain-state functions. These functions return con-
stants related to the blockchain system, e.g., current_time,
which are mostly used by the smart contracts as the seeds,
to generate the pseudo-random numbers. As they do not in-
troduce any side effect, we just emulate them by directly
returning a symbolic value to represent the blockchain state.
Memory-related functions. As the name suggests, func-
tions in this category are related to the symbolic memory
we have implemented. Therefore, we imitate the behaviors
as their original intention, and apply the memory-merging
algorithm when inserting the new data. Note that, we throw
an exception for undeﬁned behaviors, e.g., the negative length
of the memcpy function due to the constraint solving.