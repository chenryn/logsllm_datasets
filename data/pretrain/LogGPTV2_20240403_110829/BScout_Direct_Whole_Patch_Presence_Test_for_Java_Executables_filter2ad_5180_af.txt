### Scalability and Feature Extraction

Genius [23] converts entire Control Flow Graphs (CFGs) into high-level numeric feature vectors and employs graph embedding to accelerate the search process. Gemini [45] enhances this approach by leveraging neural networks to improve the generation of graph embeddings. Centroid [19] is commonly used for calculating the similarity between Java methods. However, these methods are not well-suited for patch presence testing because they extract features from the entire function rather than the patch itself, leading to a coarse-grained representation that fails to capture the subtle changes introduced by a patch.

### Version Pinning

Since patches may be applied in different versions of a library, the library version can indicate the presence of a patch. Existing work [17, 21] involves collecting a set of reference libraries across various versions and using similarity analysis to match a test library to the most similar one in the reference set. Specifically, OSSPolice [21] utilizes syntactic features such as string constants and normalized class signatures, while LibScout [17] constructs class hierarchy profiles that are more resilient to common obfuscation techniques. Although these approaches can differentiate between library versions with significant changes, they struggle to detect the presence of security patches, which often introduce only minor modifications to the binary.

### Conclusion

This paper introduces BSCOUT, a tailored approach for reliably, flexibly, and accurately testing patch presence in Java executables. BSCOUT achieves this through two key techniques: cross-layer line-level correlative analysis, which uses feature-based line-level similarity testing to link Java source code lines to Java bytecode instructions, and patch-derived differential analysis, which provides a reliable and precise patch presence result by calculating the number of significant patch-changed lines included in the target executable. We evaluated BSCOUT using 194 CVEs from the Android framework and third-party libraries, demonstrating its effectiveness and efficiency. Additionally, we conducted an empirical study of patch application practices with 2,506 real-world Android ROMs, revealing several previously unverified findings and providing valuable insights for the community to combat vulnerabilities more effectively.

### Acknowledgements

We would like to thank our shepherd Martina Lindorfer and anonymous reviewers for their valuable comments. This work was supported in part by the National Natural Science Foundation of China (U1636204, U1836210, U1836213, U1736208, 61972099, 61602123, 61602121), the Natural Science Foundation of Shanghai (19ZR1404800), and the National Program on Key Basic Research (NO. 2015CB358800). Min Yang is the corresponding author and a faculty member at the Shanghai Institute of Intelligent Electronics & Systems, Shanghai Institute for Advanced Communication and Data Science, and the Engineering Research Center of CyberSecurity Auditing and Monitoring, Ministry of Education, China.

### References

[1] Android fragmentation: There are now 24,000 devices from 1,300 brands. https://www.zdnet.com/article/android-fragmentation-there-are-now-24000-devices-from-1300-brands/. Accessed: 2019-08-14.
[2] Android security bulletins. https://source.android.com/security/bulletin/. Accessed: 2019-08-14.
[3] Command line tools. https://developer.android.com/studio/command-line. Accessed: 2019-08-14.
[4] Common vulnerability scoring system calculator version 2. https://nvd.nist.gov/vuln-metrics/cvss/v2-calculator. Accessed: 2019-08-14.
[5] CRF++ source code. https://github.com/taku910/crfpp. Accessed: 2019-11-08.
[6] Dalvik bytecode. https://source.android.com/devices/tech/dalvik/dalvik-bytecode. Accessed: 2019-08-14.
[7] Dexlib - Android bytecode library. https://code.google.com/p/smali/. Accessed: 2019-08-14.
[8] F-Droid - free and open-source Android app repository. https://f-droid.org/en/. Accessed: 2019-08-14.
[9] The Java Virtual Machine Specification. https://docs.oracle.com/javase/specs/jvms/se7/html/. Accessed: 2019-08-14.
[10] LibScout source code. https://github.com/reddr/LibScout. Accessed: 2019-08-14.
[11] National Vulnerability Database. https://nvd.nist.gov. Accessed: 2019-08-14.
[12] One-way analysis of variance. https://en.wikipedia.org/wiki/One-way_analysis_of_variance. Accessed: 2019-11-08.
[13] OSSPolice source code. https://github.com/ossanitizer/osspolice. Accessed: 2019-08-14.
[14] Security patch for CVE-2016-3832. https://android.googlesource.com/platform/frameworks/base/+/e7cf91a198d\e995c7440b3b64352effd2e309906. Accessed: 2019-08-14.
[15] Smali/Baksmali tool. https://github.com/JesusFreke/smali. Accessed: 2019-08-14.
[16] Student’s t-test. https://en.wikipedia.org/wiki/Student%27s_t-test. Accessed: 2019-11-08.
[17] M. Backes, S. Bugiel, and E. Derr. Reliable Third-Party Library Detection in Android and its Security Applications. In CCS’16.
[18] M. Bourquin, A. King, and E. Robbins. BinSlayer: Inaccurate Comparison of Binary Executables. PPREW’13.
[19] K. Chen, P. Liu, and Y. Zhang. Achieving Accuracy and Scalability Simultaneously in Detecting Application Clones on Android Markets. In ICSE’14.
[20] K. Chen, P. Wang, Y. Lee, X. Wang, N. Zhang, H. Huang, W. Zou, and P. Liu. Finding Unknown Malice in 10 Seconds: Mass Vetting for New Threats at the Google-Play Scale. In USENIX Security’15.
[21] R. Duan, A. Bijlani, M. Xu, T. Kim, and W. Lee. Identifying Open-Source License Violation and 1-day Security Risk at Large Scale. In CCS’17.
[22] T. Dullien and R. Rolles. Graph-Based Comparison of Executable Objects. SSTIC, 5(1):3, 2005.
[23] Q. Feng, R. Zhou, C. Xu, Y. Cheng, B. Testa, and H. Yin. Scalable Graph-Based Bug Search for Firmware Images. In CCS’17.
[24] D. Gao, M. K. Reiter, and D. Song. BinHunt: Automatically Finding Semantic Differences in Binary Programs. In ICICS’08.
[25] J. Jang, A. Agrawal, and D. Brumley. ReDeBug - Finding Unpatched Code Clones in Entire OS Distributions. In S&P’12.
[26] L. Jiang, G. Misherghi, Z. Su, and S. Glondu. DECKARD - Scalable and Accurate Tree-Based Detection of Code Clones. In ICSE’07.
[27] T. Kamiya, S. Kusumoto, and K. Inoue. CCFinder - A Multilinguistic Token-Based Code Clone Detection System for Large-Scale Source Code. In TSE’02.
[28] W. M. Khoo, A. Mycroft, and R. J. Anderson. Rendezvous - A Search Engine for Binary Code. MSR’13.
[29] S. Kim, S. Woo, H. Lee, and H. Oh. VUDDY - A Scalable Approach for Vulnerable Code Clone Discovery. In S&P’17.
[30] J. Lafferty, A. McCallum, and F. C. Pereira. Conditional Random Fields: Probabilistic Models for Segmenting and Labeling Sequence Data. 2001.
[31] F. Li and V. Paxson. A Large-Scale Empirical Study of Security Patches. In CCS’17.
[32] Z. Li, S. Lu, S. Myagmar, and Y. Zhou. CP-Miner: Finding Copy-Paste and Related Bugs in Large-Scale Software Code. In TSE’06.
[33] Z. Li, D. Zou, S. Xu, H. Jin, H. Qi, and J. Hu. Vulpecker: An Automated Vulnerability Detection System Based on Code Similarity Analysis. In ACSAC’16.
[34] Z. Li, D. Zou, S. Xu, X. Ou, H. Jin, S. Wang, Z. Deng, and Y. Zhong. VulDeePecker: A Deep Learning-Based System for Vulnerability Detection. In NDSS’18.
[35] D. MacKenzie, P. Eggert, and R. Stallman. Comparing and Merging Files with GNU diff and patch. Network Theory Ltd, 4, 2002.
[36] E. W. Myers. An O(ND) Difference Algorithm and Its Variations. Algorithmica, 1986.
[37] N. Nguyen and Y. Guo. Comparisons of Sequence Labeling Algorithms and Extensions. In ICML’07.
[38] K. Nohl and J. Lell. Mind the Gap: Uncovering the Android Patch Gap Through Binary-Only Patch Level Analysis. In Hitbsecconf’2018.
[39] R. Pawlak, M. Monperrus, N. Petitprez, C. Noguera, and L. Seinturier. Spoon: A Library for Implementing Analyses and Transformations of Java Source Code. Software: Practice and Experience, 2015.
[40] J. Pewny, B. Garmany, R. Gawlik, C. Rossow, and T. Holz. Cross-Architecture Bug Search in Binary Executables. In S&P’15.
[41] J. Ratcliff and D. Metzener. Ratcliff-Obershelp Pattern Recognition. Dictionary of Algorithms and Data Structures, 1998.
[42] H. Sajnani, V. Saini, J. Svajlenko, C. K. Roy, and C. V. Lopes. SourcererCC - Scaling Code Clone Detection to Big-Code. In ICSE’16.
[43] E. Sebastian, Y. Khaled, and G. Elmar. DISCOVRE: Efficient Cross-Architecture Identification of Bugs in Binary Code. In NDSS’16.
[44] P.-N. Tan et al. Introduction to Data Mining. Pearson Education India, 2006.
[45] X. Xu, C. Liu, Q. Feng, H. Yin, L. Song, and D. Song. Neural Network-Based Graph Embedding for Cross-Platform Binary Code Similarity Detection. In CCS’17.
[46] H. Zhang and Z. Qian. Precise and Accurate Patch Presence Test for Binaries. In USENIX Security’18.

### A. CVE Datasets

To evaluate the effectiveness of BSCOUT, we constructed two CVE datasets. The first dataset consists of 150 Android framework vulnerabilities collected from the Android Security Bulletin, spanning from August 2015 to July 2019. Table 9 provides an overview of these CVEs. The second dataset includes 44 vulnerabilities from 23 popular Java libraries, as shown in Table 10.

#### Table 9: Overview of Android Framework CVE Dataset
| Android Version | # of Affected CVEs |
|-----------------|--------------------|
| Android 4.*     | 40                 |
| Android 5.*     | 69                 |
| Android 6.*     | 95                 |
| Android 7.*     | 92                 |
| Android 8.*     | 50                 |
| Android 9.*     | 26                 |
| **Total**       | **150**            |

*Note: A single CVE may affect multiple Android versions.*

#### Table 10: Overview of Third-Party Library CVE Dataset
| Library                      | CVEs                                                                                         |
|------------------------------|----------------------------------------------------------------------------------------------|
| jsoup                         | CVE-2015-6748                                                                               |
| junrar                       | CVE-2018-12418                                                                              |
| okhttp                        | CVE-2016-2402, CVE-2016-10027                                                               |
| smack                         | CVE-2017-1000498                                                                            |
| androidsvg                    | CVE-2018-10237                                                                              |
| google-guava                  | CVE-2013-4366, CVE-2016-6801, CVE-2015-6420                                                 |
| apache-httpclient             | CVE-2018-1324, CVE-2018-11771, CVE-2016-1000031, CVE-2016-3092                             |
| apache-jackrabbit-webdav      | CVE-2014-0050, CVE-2013-6429, CVE-2014-4715                                                  |
| apache-commons-collections    | CVE-2018-8013, CVE-2017-5662, CVE-2015-0250, CVE-2017-1000487                               |
| apache-commons-compress       | CVE-2015-2156, CVE-2014-0193, CVE-2016-6814, CVE-2015-3253                                  |
| apache-commons-fileupload     | CVE-2014-0107, CVE-2016-2175                                                                |
| spring-web                    | CVE-2018-1000632, CVE-2017-14735, CVE-2016-10006                                             |
| lz4-java                      | CVE-2017-7525, CVE-2017-15095, CVE-2017-17485, CVE-2018-7489                                |
| batik-all                     | CVE-2018-1000180, CVE-2016-1000352, CVE-2016-1000340, CVE-2016-1000345, CVE-2016-1000346   |
| plexus-utils                  | CVE-2016-1000341, CVE-2016-1000343, CVE-2016-1000342, CVE-2016-1000339, CVE-2015-7940      |
| netty-codec-http              | CVE-2016-1000338, CVE-2015-7940                                                             |
| groovy-all                    | CVE-2016-1000338, CVE-2015-7940                                                             |
| xalan-java                    | CVE-2016-1000338, CVE-2015-7940                                                             |
| pdfbox                        | CVE-2016-1000338, CVE-2015-7940                                                             |
| dom4j                         | CVE-2016-1000338, CVE-2015-7940                                                             |
| antisamy                      | CVE-2016-1000338, CVE-2015-7940                                                             |
| jackson-databind              | CVE-2016-1000338, CVE-2015-7940                                                             |
| bcprov-jdk15on                | CVE-2016-1000338, CVE-2015-7940                                                             |

### Patch Characteristics

Unlike FIBER [46], which uses small and localized changes in the patch to generate binary-level signatures for patch presence testing, BSCOUT advocates using the entire patch. Specifically, we designed patch-derived differential analysis to analyze the whole patch and extract features for further testing. For the entire CVE dataset, we analyzed the patches and presented the results in Table 11. On average, BSCOUT utilizes 16.64 features per CVE for patch presence testing. Line additions, deletions, and modifications are common in patches, necessitating the use of both pre-patch and post-patch source code. Additionally, each patch contains an average of 12.14 out-of-method lines, which contribute minimally to fixing a vulnerability. It is essential to identify and exclude these lines from the scope of patch presence testing.

#### Table 11: Patch Characteristics for the Whole CVE Dataset (194 CVEs)
| Category                            | Maximum | Average |
|-------------------------------------|---------|---------|
| # of Modified Files                 | 10      | 2.03    |
| # of Modified Methods               | 77      | 3.10    |
| # of Extracted Features             | 117     | 16.64   |
| # of In-Method Addition Lines       | 1443    | 31.15   |
| # of In-Method Deletion Lines       | 138     | 11.11   |
| # of In-Method Modification Lines   | 14      | 1.24    |
| # of Out-of-Method Lines            | 806     | 12.14   |