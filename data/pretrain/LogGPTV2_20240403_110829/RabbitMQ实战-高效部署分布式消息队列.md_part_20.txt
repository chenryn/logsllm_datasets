### 5.4 将节点分布到更多机器上

你可能已经注意到，`rabbit@ip-10-170-30-18` 被设置为磁盘节点，并且 RabbitMQ 节点名从 `rabbit` 更改为 `rabbit_1`，就像我们在开发机器集群上的第二个节点所做的那样。在独立的物理系统中，第一个 RabbitMQ 节点通常被称为 `rabbit`。只有在同一系统上有多个 Rabbit 节点时，节点名称才会被命名为 `rabbit_1`、`rabbit_2` 等。

接下来，我们将添加第三个节点 `ip-10-170-29-88`：

```bash
ubuntu@ip-10-170-29-88:~$ sudo rabbitmqctl stop_app
...done.
ubuntu@ip-10-170-29-88:~$ sudo rabbitmqctl reset
Resetting node 'rabbit@ip-10-170-29-88' ...
...done.
ubuntu@ip-10-170-29-88:~$ sudo rabbitmqctl cluster rabbit@ip-10-170-29-145 rabbit@ip-10-170-30-18
['rabbit@ip-10-170-29-145', 'rabbit@ip-10-170-30-18']..
...done.
ubuntu@ip-10-170-29-88:~$ sudo rabbitmqctl start_app
...done.
```

现在，如果你在任何一个节点上运行 `sudo rabbitmqctl cluster_status`，你会看到一个包含三个节点的集群：

```plaintext
Cluster status of node rabbit@ip-10-170-29-88...
[{nodes, [{disc, ['rabbit@ip-10-170-30-18', 'rabbit@ip-10-170-29-145']}, {ram, ['rabbit@ip-10-170-29-88']}]},
{running_nodes, ['rabbit@ip-10-170-29-145', 'rabbit@ip-10-170-30-18', 'rabbit@ip-10-170-29-88']}]
...done.
```

到目前为止，你已经搭建了两种不同的 RabbitMQ 集群：一种分布在不同的服务器上，另一种则在单台机器上。然而，我们还没有讨论如何将节点从集群中移除。如果你想缩小集群规模或用更好的硬件替换某个节点，该怎么办呢？针对这两种情况，你需要让节点离开集群。操作类似于加入集群，但不需要执行 `rabbitmqctl cluster` 命令。让我们将 `ip-10-170-29-88` 从集群中移除，并将其恢复为独立节点：

```bash
ubuntu@ip-10-170-29-88:~$ sudo rabbitmqctl stop_app
...done.
ubuntu@ip-10-170-29-88:~$ sudo rabbitmqctl reset
...done.
ubuntu@ip-10-170-29-88:~$ sudo rabbitmqctl start_app
...done.
```

关键命令是 `rabbitmqctl reset`。此命令会清空节点的状态并将其恢复到初始状态。当重置的节点是集群的一部分时，该命令还会与集群中的磁盘节点通信，告知它们该节点正在离开集群。这很重要；否则，集群会认为该节点故障并等待其恢复。如果非正式地移除磁盘节点，集群会认为该节点故障并阻止新节点加入。因此，从集群中移除节点时，请始终小心重设节点状态。

检查移除节点的集群状态，你会发现它现在是独立节点：

```plaintext
Cluster status of node rabbit@ip-10-170-29-88 ...
[{nodes, [{disc, ['rabbit@ip-10-170-29-88']}]}, {running_nodes, ['rabbit@ip-10-170-29-88']}]
...done.
```

同样，检查集群中其他剩余节点的集群状态，你会发现它们已不再将 `ip-10-170-29-88` 视为集群的一部分：

```plaintext
Cluster status of node rabbit@ip-10-170-30-18...
[{nodes, [{disc, ['rabbit@ip-10-170-30-18', 'rabbit@ip-10-170-29-145']}]},
{running_nodes, ['rabbit@ip-10-170-29-145', 'rabbit@ip-10-170-30-18']}]
...done.
```

掌握了分布式集群和如何正式移除节点后，接下来讨论如何将集群升级到 RabbitMQ 新版本。

### 5.5 升级集群节点

在独立系统中升级到新版本 RabbitMQ 很简单。只需解压新版本并运行即可，旧数据会被保留。但在集群中升级并不那么简单。直接解压新版本并重启集群节点会抹去所有配置和数据。如果集群上的所有内容都可以重新创建，则不是问题；否则，升级过程会非常复杂。

首先，通过 RabbitMQ Management 插件备份当前配置（将在第6章中介绍）。然后关闭所有生产者并等待消费者消费完队列中的所有消息。接着，解压新版本 RabbitMQ 到现有安装目录，并选择一个磁盘节点进行升级。启动该节点时，它会将持久化的集群数据升级到新版本。然后启动其他磁盘节点，获取升级后的集群数据。最后，启动内存节点，使整个集群运行新版本 RabbitMQ 并保留所有元数据和配置信息。

### 5.6 镜像队列和保留消息

默认情况下，队列只存在于集群中的一个节点上。但在 RabbitMQ 2.6.0 版本中，引入了镜像队列功能，提供高可用性选项。镜像队列的主拷贝仅存在于一个节点上，但在集群中的其他节点上有从拷贝。一旦主节点不可用，最老的从队列将被选举为新的主队列。

#### 5.6.1 声明并使用镜像队列

声明镜像队列类似于声明普通队列，只需在 `queue.declare` 调用中添加 `x-ha-policy` 参数。例如，更新第2章的 HelloWorld 消费者程序，使其声明镜像队列：

```python
queue_args = {"x-ha-policy": "all"}
channel.queue_declare(queue="hello-queue", arguments=queue_args)
```

测试新的镜像队列消费者：

```bash
(terminal 1)> python hello_world_mirrored_queue_consumer.py
(terminal 2)> rabbitmqctl list_queues name pid slave_pids
Listing queues ..
hello-queue
[]
...done.
```

如预期，`hello-queue` 只有主拷贝而没有从拷贝。如果此时为队列添加新的从节点，新增的从拷贝只会包含在其添加进来之后从镜像队列发来的消息。RabbitMQ 不会自动同步现有队列内容。为了检测镜像队列的同步状态，可以使用 `synchronised_slave_pids` 参数：

```bash
> rabbitmqctl list_queues name pid slave_pids synchronised_slave_pids
Listing queues ...
hello-queue
[[]]
```

如果两个列表内容一致，表示所有从拷贝都已同步。如果不一致，需要等到完全同步后再移除节点，以确保不会丢失消息。

#### 5.6.2 镜像队列工作原理

在非镜像队列的 RabbitMQ 集群中，信道负责将消息路由到合适的队列。加入镜像队列后，信道不仅将消息投递到主队列，还要投递到从拷贝。你可以将镜像队列视为拥有一个隐藏的 fanout 交换器，指示信道将消息分发到队列的从拷贝上。

对于镜像队列，发送方确认模式会通知你消息是否已被所有队列和从拷贝安全接收。如果主节点故障，发送方确认消息永远不会到达，你知道消息可能已丢失。附加在故障主节点上的消费者需要重新附加并监听新的主节点。