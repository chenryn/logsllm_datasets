{"server.geo.name": {"dashed_name": "server-geo-name", "description": "User-defined description of a location, at the level of granularity they care about.\nCould be the name of their data centers, the floor number, if this describes a local physical entity, city names.\nNot typically used in automated geolocation.", "example": "boston-dc", "flat_name": "server.geo.name", "ignore_above": 1024, "level": "extended", "name": "name", "normalize": [], "original_fieldset": "geo", "short": "User-defined description of a location."}}
{"server.geo.postal_code": {"dashed_name": "server-geo-postal-code", "description": "Postal code associated with the location.\nValues appropriate for this field may also be known as a postcode or ZIP code and will vary widely from country to country.", "example": 94040, "flat_name": "server.geo.postal_code", "ignore_above": 1024, "level": "core", "name": "postal_code", "normalize": [], "original_fieldset": "geo", "short": "Postal code."}}
{"server.geo.region_iso_code": {"dashed_name": "server-geo-region-iso-code", "description": "Region ISO code.", "example": "CA-QC", "flat_name": "server.geo.region_iso_code", "ignore_above": 1024, "level": "core", "name": "region_iso_code", "normalize": [], "original_fieldset": "geo", "short": "Region ISO code."}}
{"server.geo.region_name": {"dashed_name": "server-geo-region-name", "description": "Region name.", "example": "Quebec", "flat_name": "server.geo.region_name", "ignore_above": 1024, "level": "core", "name": "region_name", "normalize": [], "original_fieldset": "geo", "short": "Region name."}}
{"server.geo.timezone": {"dashed_name": "server-geo-timezone", "description": "The time zone of the location, such as IANA time zone name.", "example": "America/Argentina/Buenos_Aires", "flat_name": "server.geo.timezone", "ignore_above": 1024, "level": "core", "name": "timezone", "normalize": [], "original_fieldset": "geo", "short": "Time zone."}}
{"server.ip": {"dashed_name": "server-ip", "description": "IP address of the server (IPv4 or IPv6).", "flat_name": "server.ip", "level": "core", "name": "ip", "normalize": [], "short": "IP address of the server.", "type": "ip"}}
{"server.mac": {"dashed_name": "server-mac", "description": "MAC address of the server.\nThe notation format from RFC 7042 is suggested: Each octet (that is, 8-bit byte) is represented by two [uppercase] hexadecimal digits giving the value of the octet as an unsigned integer. Successive octets are separated by a hyphen.", "example": "00-00-5E-00-53-23", "flat_name": "server.mac", "ignore_above": 1024, "level": "core", "name": "mac", "normalize": [], "pattern": "^[A-F0-9]{2}(-[A-F0-9]{2}){5,}$", "short": "MAC address of the server."}}
{"server.nat.ip": {"dashed_name": "server-nat-ip", "description": "Translated ip of destination based NAT sessions (e.g. internet to private DMZ)\nTypically used with load balancers, firewalls, or routers.", "flat_name": "server.nat.ip", "level": "extended", "name": "nat.ip", "normalize": [], "short": "Server NAT ip", "type": "ip"}}
{"server.nat.port": {"dashed_name": "server-nat-port", "description": "Translated port of destination based NAT sessions (e.g. internet to private DMZ)\nTypically used with load balancers, firewalls, or routers.", "flat_name": "server.nat.port", "format": "string", "level": "extended", "name": "nat.port", "normalize": [], "short": "Server NAT port", "type": "long"}}
{"server.packets": {"dashed_name": "server-packets", "description": "Packets sent from the server to the client.", "example": 12, "flat_name": "server.packets", "level": "core", "name": "packets", "normalize": [], "short": "Packets sent from the server to the client.", "type": "long"}}
{"server.port": {"dashed_name": "server-port", "description": "Port of the server.", "flat_name": "server.port", "format": "string", "level": "core", "name": "port", "normalize": [], "short": "Port of the server.", "type": "long"}}
{"server.registered_domain": {"dashed_name": "server-registered-domain", "description": "The highest registered server domain, stripped of the subdomain.\nFor example, the registered domain for \"foo.example.com\" is \"example.com\".\nThis value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last two labels will not work well for TLDs such as \"co.uk\".", "example": "example.com", "flat_name": "server.registered_domain", "ignore_above": 1024, "level": "extended", "name": "registered_domain", "normalize": [], "short": "The highest registered server domain, stripped of the subdomain."}}
{"server.subdomain": {"dashed_name": "server-subdomain", "description": "The subdomain portion of a fully qualified domain name includes all of the names except the host name under the registered_domain.  In a partially qualified domain, or if the the qualification level of the full name cannot be determined, subdomain contains all of the names below the registered domain.\nFor example the subdomain portion of \"www.east.mydomain.co.uk\" is \"east\". If the domain has multiple levels of subdomain, such as \"sub2.sub1.example.com\", the subdomain field should contain \"sub2.sub1\", with no trailing period.", "example": "east", "flat_name": "server.subdomain", "ignore_above": 1024, "level": "extended", "name": "subdomain", "normalize": [], "short": "The subdomain of the domain."}}
{"server.top_level_domain": {"dashed_name": "server-top-level-domain", "description": "The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for example.com is \"com\".\nThis value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last label will not work well for effective TLDs such as \"co.uk\".", "example": "co.uk", "flat_name": "server.top_level_domain", "ignore_above": 1024, "level": "extended", "name": "top_level_domain", "normalize": [], "short": "The effective top level domain (com, org, net, co.uk)."}}
{"server.user.domain": {"dashed_name": "server-user-domain", "description": "Name of the directory the user is a member of.\nFor example, an LDAP or Active Directory domain name.", "flat_name": "server.user.domain", "ignore_above": 1024, "level": "extended", "name": "domain", "normalize": [], "original_fieldset": "user", "short": "Name of the directory the user is a member of."}}
{"server.user.email": {"dashed_name": "server-user-email", "description": "User email address.", "flat_name": "server.user.email", "ignore_above": 1024, "level": "extended", "name": "email", "normalize": [], "original_fieldset": "user", "short": "User email address."}}
{"server.user.full_name": {"dashed_name": "server-user-full-name", "description": "User's full name, if available.", "example": "Albert Einstein", "flat_name": "server.user.full_name", "ignore_above": 1024, "level": "extended", "multi_fields": [{"flat_name": "server.user.full_name.text", "name": "text", "type": "match_only_text"}], "name": "full_name", "normalize": [], "original_fieldset": "user", "short": "User's full name, if available."}}
{"server.user.group.domain": {"dashed_name": "server-user-group-domain", "description": "Name of the directory the group is a member of.\nFor example, an LDAP or Active Directory domain name.", "flat_name": "server.user.group.domain", "ignore_above": 1024, "level": "extended", "name": "domain", "normalize": [], "original_fieldset": "group", "short": "Name of the directory the group is a member of."}}
{"server.user.group.id": {"dashed_name": "server-user-group-id", "description": "Unique identifier for the group on the system/platform.", "flat_name": "server.user.group.id", "ignore_above": 1024, "level": "extended", "name": "id", "normalize": [], "original_fieldset": "group", "short": "Unique identifier for the group on the system/platform."}}
{"server.user.group.name": {"dashed_name": "server-user-group-name", "description": "Name of the group.", "flat_name": "server.user.group.name", "ignore_above": 1024, "level": "extended", "name": "name", "normalize": [], "original_fieldset": "group", "short": "Name of the group."}}
{"server.user.hash": {"dashed_name": "server-user-hash", "description": "Unique user hash to correlate information for a user in anonymized form.\nUseful if `user.id` or `user.name` contain confidential information and cannot be used.", "flat_name": "server.user.hash", "ignore_above": 1024, "level": "extended", "name": "hash", "normalize": [], "original_fieldset": "user", "short": "Unique user hash to correlate information for a user in anonymized form."}}
{"server.user.id": {"dashed_name": "server-user-id", "description": "Unique identifier of the user.", "example": "S-1-5-21-202424912787-2692429404-2351956786-1000", "flat_name": "server.user.id", "ignore_above": 1024, "level": "core", "name": "id", "normalize": [], "original_fieldset": "user", "short": "Unique identifier of the user."}}
{"server.user.name": {"dashed_name": "server-user-name", "description": "Short name or login of the user.", "example": "a.einstein", "flat_name": "server.user.name", "ignore_above": 1024, "level": "core", "multi_fields": [{"flat_name": "server.user.name.text", "name": "text", "type": "match_only_text"}], "name": "name", "normalize": [], "original_fieldset": "user", "short": "Short name or login of the user."}}
{"server.user.roles": {"dashed_name": "server-user-roles", "description": "Array of user roles at the time of the event.", "example": "[\"kibana_admin\", \"reporting_user\"]", "flat_name": "server.user.roles", "ignore_above": 1024, "level": "extended", "name": "roles", "normalize": ["array"], "original_fieldset": "user", "short": "Array of user roles at the time of the event."}}
{"service.address": {"dashed_name": "service-address", "description": "Address where data about this service was collected from.\nThis should be a URI, network address (ipv4:port or [ipv6]:port) or a resource path (sockets).", "example": "172.26.0.2:5432", "flat_name": "service.address", "ignore_above": 1024, "level": "extended", "name": "address", "normalize": [], "short": "Address of this service."}}
{"service.environment": {"beta": "This field is beta and subject to change.", "dashed_name": "service-environment", "description": "Identifies the environment where the service is running.\nIf the same service runs in different environments (production, staging, QA, development, etc.), the environment can identify other instances of the same service. Can also group services and applications from the same environment.", "example": "production", "flat_name": "service.environment", "ignore_above": 1024, "level": "extended", "name": "environment", "normalize": [], "short": "Environment of the service."}}
{"service.ephemeral_id": {"dashed_name": "service-ephemeral-id", "description": "Ephemeral identifier of this service (if one exists).\nThis id normally changes across restarts, but `service.id` does not.", "example": "8a4f500f", "flat_name": "service.ephemeral_id", "ignore_above": 1024, "level": "extended", "name": "ephemeral_id", "normalize": [], "short": "Ephemeral identifier of this service."}}
{"service.id": {"dashed_name": "service-id", "description": "Unique identifier of the running service. If the service is comprised of many nodes, the `service.id` should be the same for all nodes.\nThis id should uniquely identify the service. This makes it possible to correlate logs and metrics for one specific service, no matter which particular node emitted the event.\nNote that if you need to see the events from one specific host of the service, you should filter on that `host.name` or `host.id` instead.", "example": "d37e5ebfe0ae6c4972dbe9f0174a1637bb8247f6", "flat_name": "service.id", "ignore_above": 1024, "level": "core", "name": "id", "normalize": [], "short": "Unique identifier of the running service."}}
{"service.name": {"dashed_name": "service-name", "description": "Name of the service data is collected from.\nThe name of the service is normally user given. This allows for distributed services that run on multiple hosts to correlate the related instances based on the name.\nIn the case of Elasticsearch the `service.name` could contain the cluster name. For Beats the `service.name` is by default a copy of the `service.type` field if no name is specified.", "example": "elasticsearch-metrics", "flat_name": "service.name", "ignore_above": 1024, "level": "core", "name": "name", "normalize": [], "short": "Name of the service."}}
{"service.node.name": {"dashed_name": "service-node-name", "description": "Name of a service node.\nThis allows for two nodes of the same service running on the same host to be differentiated. Therefore, `service.node.name` should typically be unique across nodes of a given service.\nIn the case of Elasticsearch, the `service.node.name` could contain the unique node name within the Elasticsearch cluster. In cases where the service doesn't have the concept of a node name, the host name or container name can be used to distinguish running instances that make up this service. If those do not provide uniqueness (e.g. multiple instances of the service running on the same host) - the node name can be manually set.", "example": "instance-0000000016", "flat_name": "service.node.name", "ignore_above": 1024, "level": "extended", "name": "node.name", "normalize": [], "short": "Name of the service node."}}
{"service.node.role": {"dashed_name": "service-node-role", "description": "Deprecated for removal in next major version release. This field will be superseded by `node.roles`.\nRole of a service node.\nThis allows for distinction between different running roles of the same service.\nIn the case of Kibana, the `service.node.role` could be `ui` or `background_tasks`.\nIn the case of Elasticsearch, the `service.node.role` could be `master` or `data`.\nOther services could use this to distinguish between a `web` and `worker` role running as part of the service.", "example": "background_tasks", "flat_name": "service.node.role", "ignore_above": 1024, "level": "extended", "name": "node.role", "normalize": [], "short": "Deprecated role (singular) of the service node."}}
{"service.node.roles": {"dashed_name": "service-node-roles", "description": "Roles of a service node.\nThis allows for distinction between different running roles of the same service.\nIn the case of Kibana, the `service.node.role` could be `ui` or `background_tasks` or both.\nIn the case of Elasticsearch, the `service.node.role` could be `master` or `data` or both.\nOther services could use this to distinguish between a `web` and `worker` role running as part of the service.", "example": "[\"ui\", \"background_tasks\"]", "flat_name": "service.node.roles", "ignore_above": 1024, "level": "extended", "name": "node.roles", "normalize": ["array"], "short": "Roles of the service node."}}
{"service.origin.address": {"dashed_name": "service-origin-address", "description": "Address where data about this service was collected from.\nThis should be a URI, network address (ipv4:port or [ipv6]:port) or a resource path (sockets).", "example": "172.26.0.2:5432", "flat_name": "service.origin.address", "ignore_above": 1024, "level": "extended", "name": "address", "normalize": [], "original_fieldset": "service", "short": "Address of this service."}}
{"service.origin.environment": {"beta": "This field is beta and subject to change.", "dashed_name": "service-origin-environment", "description": "Identifies the environment where the service is running.\nIf the same service runs in different environments (production, staging, QA, development, etc.), the environment can identify other instances of the same service. Can also group services and applications from the same environment.", "example": "production", "flat_name": "service.origin.environment", "ignore_above": 1024, "level": "extended", "name": "environment", "normalize": [], "original_fieldset": "service", "short": "Environment of the service."}}
{"service.origin.ephemeral_id": {"dashed_name": "service-origin-ephemeral-id", "description": "Ephemeral identifier of this service (if one exists).\nThis id normally changes across restarts, but `service.id` does not.", "example": "8a4f500f", "flat_name": "service.origin.ephemeral_id", "ignore_above": 1024, "level": "extended", "name": "ephemeral_id", "normalize": [], "original_fieldset": "service", "short": "Ephemeral identifier of this service."}}
{"service.origin.id": {"dashed_name": "service-origin-id", "description": "Unique identifier of the running service. If the service is comprised of many nodes, the `service.id` should be the same for all nodes.\nThis id should uniquely identify the service. This makes it possible to correlate logs and metrics for one specific service, no matter which particular node emitted the event.\nNote that if you need to see the events from one specific host of the service, you should filter on that `host.name` or `host.id` instead.", "example": "d37e5ebfe0ae6c4972dbe9f0174a1637bb8247f6", "flat_name": "service.origin.id", "ignore_above": 1024, "level": "core", "name": "id", "normalize": [], "original_fieldset": "service", "short": "Unique identifier of the running service."}}