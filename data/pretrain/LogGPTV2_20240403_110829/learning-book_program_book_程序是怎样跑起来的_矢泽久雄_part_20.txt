用于函数的空间
用于栈的空间
1个程序使用
的内存空间
程序运行时申请分配
用于堆的空间
图8-10加载到内存的程序由4部分构成
钱及堆的相似之处在于，他们的内存空间都是在程序运行时得到
申请分配的”。不过，在内存的使用方法上，二者存在些许不同。栈中
对数据进行存储和舍弃（清理处理）的代码，是由编译器自动生成的。
因此不需要程序员的参与。使用栈的数据的内存空间，每当函数被调
用时都会得到申请分配，并在函数处理完毕后自动释放。与此相对，
堆的内存空间，则要根据程序员编写的程序，来明确进行申请分配或
释放。
①不管是什么程序，程序的内容都是由处理和数据构成的。大多数编程语言
都是用函数来表示处理、用史量来表示数据。
②核和堆的大小，可以由程序员任意指定。在高级编程语言中，编译器会自
动生成指定核和堆大小的代码，并将其附加到程序中。
更多资料请关注裁的新浪薄客http：//blog
---
## Page 164
第8章从源文件到可执行文件
根据编程语言的不同，对堆用的内存空间进行申请分配和释放的
程序的编写方法也是多种多样的。C语言中是通过mallocO函数来进行
申请分配、通过freeO函数来释放的。而C++中则是通过new运算符
来申请分配、通过delete运算符来释放的。无论是C语言还是C++，
如果没有在程序中明确释放堆的内存空间，那么即使在处理完毕后，
该内存空间仍会一直残留。这个现象称为内存泄露（memoryleak），它
是令C语言及C++的程序员们十分头疼的一个bug（程序的错误）如
果内存泄露一直存在的话，就有可能会造成内存不足面导致岩机。这
就好比，如果水龙头一直嘀嗒嘀嗒地漏水，那么一晚上的时间水桶就
可能会装满并溢出。
8.9有点难度的Q&A
Q：编译器和解释器有什么不同？
A：编译器是在运行前对所有源代码进行解释处理的。而解释器则
是在运行时对源代码的内容一行一行地进行解释处理的。
Q：“分割编译”指的是什么？
A：将整个程序分为多个源代码来编写，然后分别进行编译，最后
链接成一个EXE文件。这样每个源代码都相对变短，便于程序管理。
Q：“Build”指的是什么？
A：根据开发工具种类的不同，有的编译器可以通过选择“Build”
菜单来生成EXE文件。这种情况下，Build指的是连续执行编译和链接。
Q：使用DLL文件的好处是什么？
A：DLL文件中的函数可以被多个程序共用。因此，借助该功能可
以节约内存和磁盘。此外，在对函数的内容进行修正时，还不需要重
50
---
## Page 165
8.9有点难度的Q&A
新链接（静态链接）使用这个函数的程序。
Q：不链接导入库的话就无法调用DLL文件中的函数吗？
A：通过使用LoadLibraryO及GetProcAddress(这些API，即使不
链接导人库，也可以在程序运行时调用DLL文件中的函数。不过使用
导人库更简单一些。
Q：“叠加链接”这个术语指的是什么？
A：将不会同时执行的函数，交替加载到同一个地址中运行。通过
使用“叠加链接器”这一特殊的链接器即可实现。在计算机中配置的内
存容量不多的MS-DOS时代，经常使用叠加链接。
Q：和内存管理相关的“垃圾回收机制”指的是什么呢？
A：垃圾回收机制（garbage collection）指的是对处理完毕后不再需
要的堆内存空间的数据和对象进行清理，释放它们所使用的内存空
间。这里把不需要的数据比喻为了垃圾。进行该处理时，C语言用的是
freeO函数，C++用的是delete运算符。在C++的基础上开发出来的
Java及C#这些编程语言中，程序运行环境会自动进行垃圾回收。这样
就可以避免由于程序员的疏忽（忘了记述内存的释放处理）面造成内存
泄露了。
①关于DLL文件可以被多个程序共用的好处，第5章中有详细分绍。
②维申的object（对象）不是object文件（目标文件），而是面向对象编程语
言的object（对象，数据和处理的集合体）。
---
## Page 167
9
第
章
操作系统和应用的关系
热身问答
阅读正文前，让我们先回答下面的问题来热热身吧。
1.监控程序的主要功能是什么？
2.在操作系统上运行的程序称为什么？
3.调用操作系统功能称为什么？
4.WindowsVista是多少位的操作系统？
5.GUI是什么的缩写？
6.WYSIWYG是什么的缩写？
---
## Page 168
第9章操作系统和应用的美系
怎么样？是不是发现有一些问题无法简单地解释清楚呢？下面
是笔者的答案和解析，供大家参考。
1.程序的加载和运行
2.应用或应用程序
3.系统调用（systemcall）
4.32位（也有64位的版本）
5.Graphical UserInterface（图形用户界面）
6.What You SeeIs What Your Get（所见即所得）
1.监控程序也可以说是操作系统的原型。
2.文字处理软件和表格计算软件等都是应用。
3.应用通过系统调用（systemcall）间接控制硬件。
4.Windows Vista有32位CPU用的版本，也有64位CPU用的
版本。
5.显示器中显示的窗口及图标等通过鼠标点击可以直观操作的用
户界面。
6.WYSIWYG是指可以直接将显示器中显示的内容在打印机上打
印出来。这也是Windows的特征之一。
---
## Page 169
9.1操作系统功能的历史
本章
重点
利用计算机运行程序大部分都是为了提高处理效
率。例如，Microsoft Word这样的文字处理软件，是
用来提高文本文件处理效率的程序，MicrosoftExcel等表格计算软件，
是用来提高账本处理效率的程序。类似于文字处理软件及表格计算软
件这样，为了提高特定处理效率的程序总称为“应用”。
程序员的工作就是编写各种各样的应用来提高业务效率。而应用
的运行环境，也就是操作系统，则直接从软件商店等处购买就可以了。
不过，一定不能忽略操作系统，否则就无法编写应用。这是因为，程
序员是通过利用操作系统提供的功能来编写应用的。本章中，我们会
对操作系统的角色，以及应用利用操作系统功能的方法进行说明。关
于操作系统的类型，这里我们选取了用户人数较多的Windows作为
示例。
9.1
操作系统功能的历史
首先，在简单回顾操作系统的历史的同时，我们来看一下操作系
统到底是怎样的软件。
在计算机中尚不存在操作系统的年代，完全没有任何程序，因此
程序员就需要编写出处理相关的所有程序。用机器语言编写程序，然
后再使用开关将程序输人，这一过程非常麻烦。于是，有人开发出了
仅具有加载和运行功能的监控程序，这就是操作系统的原型。通过事
先启动监控程序，程序员就可以根据需要将各种程序加载到内存中运
①操作系统（OperatingSysaem）也称为基础款件。操作系统是计算机运行时
不可或缺的控制程序，以及在控制程序下运转的为其他软件运行提供操作
环境的软件的统称。另外，在操作系统上逃行的应用也称为“应用程序”。
---
## Page 170
第9章操作系统和应用的关系
行。虽然依旧比较麻烦，但比起在没有任何程序的状态下进行开发，
工作量得到了很大的缓解（图9-1）
程序1
监控程序
监控程序的功能
（1）加载程序
加载
（2）运行程序
程序2
行
加载
运行
图9-1监拉程序可以说是操作系统的原型
随着时代的发展，人们在利用监控程序编写程序的过程中，发现
很多程序都有共通的部分。例如，通过键盘输人文字数据、往显示器
输出文字数据等。这些处理，在任何程序下都是一样的。而如果每编
写一个新的程序都要记述相同的处理的话，那真的是太浪费时间了。
因此，基本的输人输出部分的程序就被追加到了监控程序中。初期的
操作系统就这样诞生了（图9-2）。
之后，随着时代的进一步发展，开始有更多的功能被追加到监控
程序中，比如，为了方便程序员的硬件控制程序、编程语言处理器（汇
编、编译、解析）以及各种实用程序等，结果就形成了和现在相差不大
的操作系统。因此，操作系统本身并不是单独的程序，面是多个程序
的集合体（图9-3）。
---
## Page 171
9.2要意识到操作系统的存在
监控程序的功能
监拉程序
[1]加载程序
[2）运行程序
程序1
基本的输入
输出程序
基本的输入验出程序的功能
加载
二I
1]通过键盘输入
程序2
[2〕输出到里示等
加载
图9-2初期的操作系统=监控程序+基本的输入输出程序
操作系统
控制程序
编程语言处理器
实用程序
程序运行控制
硬件控制
汇编
文本编辅器
解析
Dump程序
调试工具
图9-3作系统是多个程序的集合体
9.2
要意识到操作系统的存在
这里，我希望制作应用的程序员们意识到一点，那就是你们制作
的不是硬件，面是利用操作系统功能的应用。虽然对程序员来说，掌
握硬件的基本知识是必需的，不过，在操作系统诞生以后，就没有
必要再编写直接控制硬件的程序了。这样一来，制作应用的程序员
就逐渐同硬件隔离开来了。也就是说，程序员是很少关注现实世界
（硬件）的。
更多资料请关注裁的新浪薄客http：//blor
---
## Page 172
第9章操作系统和应用的关系
由于操作系统诞生后，程序员无需再考虑硬件的问题，因此程序
员的数量也增加了。哪怕是自称“对硬件一窍不通”的人，也可能会制
作出一个有模有样的应用。不过，要想成为一个全面的程序员，有一
点需要清楚的是，掌握基本的硬件知识，并借助操作系统进行抽象化，
可以大大提高编程效率。否则，遇到问题时，你就无法找到解决办法。
操作系统确实为程序员提供了很多方便。不过，仅仅享受方便是不行
的，还要了解为什么自己能够这么方便。了解了这一点，就可以尽情
地享受方便了。
下面就来看一下操作系统是如何给开发人员带来便利的。代码清
单9-1表示的是，在Windows操作系统下，用C语言制作一个具有表
示当前时间功能的应用。timeO是用来取得当前日期和时间的函数，
printf0是用来在显示器上显示字符串的函数。程序的运行结果如图9-4
所示。
代码清单9-1表示当前时间的应用
sinelude catdio.h>
#include 
void main(){
//保存当前日期和时间信息的变量
time_t tm;
//取得当前的日期和时间
time (&tm) ;
//在显示器上显示日期和时间
printf(*#e\n*, ctime(6tm)) 
---
## Page 173
92要量识到操作系统的存在
图9-4代码清单9-1的运行结果
运行代码清单9-1的应用时，硬件的受控过程如下所示。
（1）通过timeItm;，为time_t类型的变量申请分配内存空间。
（2）通过time（&tm），将当前的日期和时间数据保存到变量的内
存空间中。
（3）通过printf(%sin"ctime（&tm）;，把变量内存空间的内容输出
到显示器上。
应用的可执行文件指的是，计算机的CPU可以直接解释并运行的
本地代码。不过这些代码是无法直接控制计算机中配置的时钟IC及显
示器用的IO等硬件的。那么，为什么代码清单9-1的应用能够控制硬
件呢？
在操作系统这个运行环境下，应用并不是直接控制硬件，面是通
过操作系统来间接控制硬件的。变量定义中涉及的内存的申请分配，
以及timeO和printfO这些函数的运行结果，都不是面向硬件而是面
向操作系统的。操作系统收到应用发出的指令后，首先会对该指令进
行解释，然后会对时钟IC（实时时钟）和显示器用的I/O进行控制。
①计算机中都安装有保存日期和时间的实时时钟（Real-time clock）。本节中