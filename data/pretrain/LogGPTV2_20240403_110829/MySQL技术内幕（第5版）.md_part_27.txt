## Page 113
SHOW COLUMNS或DESCRIBE:
这样做。
如果想要确定某个给定的INEORMATION_SCHEMA里表都包含有哪些列，则可以使用语句
如果想要显示某个表的信息，可以使用SELECT语句。（INFORMATION_SCHEMA数据库及其
mySql> DESCRIBE INFORMATION_SCHEMA.CHARACTER_SETS;
个别存储引擎还会在INFORMATION_SCHEMA 里增加它们自己的表。例如，InnoDB就会
口
口
口
口
口
口
SCHEMATA、
下面简要说明一
Field
口
口
MAXLEN
DESCRIPTION
DEFAULT_COLLATE_NAME
CHARACTER_SET_NAME
与用于存储表空间数据的那些文件有关的信息。
VIEWS
与服务器内的执行线程有关的信息。
全局和会话的系统变量值和状态变量值。
user、db、tables_priv和 column_priv表。
与全局、数据库、表和列的权限分配有关的信息，分别来自于mysql数据库里的
USER_PRIVILEGES、SCHEMA_PRIVILEGES、TABLE_PRIVILEGES、COLUMN_PRIVILEGES
与存储引擎和服务器插件有关的信息。
与表索引特性有关的信息。
与具有约束条件（如唯一值索引或外键）的表和列有关的信息。
FILES
有关的信息。
PARTITIONS、COLUMNS与数据库、表、视图、存储例程、触发器、事件、表分区和列
USER_PRIVILEGES
TRIGGERS
TABLE_PRIVILEGES
TABLE_CONSTRAINTS
TABLESPACES
TABLES
PROCESSLIST
GLOBAL_VARIABLES、SESSION_VARIABLES、GLOBAL_STATUS、SESSION_STATUS
ENGINES、PLUGINS
射关系有关的信息。
与所支持的字符集、
CHARACTER_SETS、
与外键有关的信息
REFERENTIAL_CONSTRAINTS
STATISTICS
TABLE_CONSTRAINTS、KEY_COLUMN_USAGE
TABLES、VIEWS、ROUTINES、TRIGGERS、
一下INFORMATION_SCHEMA库里的各个表。
息
COLLATIONS.
每种字符集的排序规则，以及每种排序规则与其字符集之间的映
IType
bigint(3)
varchar(60)
varchar(32)
varchar(32)
COLLATION_CHARACTER_SET_APPLICABILITY
NO
EVENTS
获取数据库元数据
PARAMETERS
33
---
## Page 114
--user 或--password。
有表的结构显示出来。否则，它将只会显示那些通过名字指定的那些表的信息。
则看到的内容将是表里的数据！
很像）所定义的表结构。如果使用mysqldump 来查看表结构，请切记加上--no-data选项，否
据库和表的信息。
2.7.3
它不存在，则返回0。
INFORMATION_SCHEMA 里的表来测试某个特定的表是否存在。如果该表存在，则返回1；如果
INFORMATION_SCHEMA里的表可以提供同样的信息。下面的查询语句使用了
的所有列的通用查询语句，如下所示：
94
在使用 mysqlshow和 mysqldump 时，请记得要指定必要的连接参数选项，如--host、
如果你只指定了数据库的名字，而没有给出任何表名，那么 mysqldump 将把该数据库里所
%mysqldump --no-data db_name[tbl_name]...
列出服务器所管理的数据库：
mysqlshow 命令提供的信息与某些 SHOw 语句很相似，因此你可以从命令行提示符获取数
客户端程序mysqldump 能够让你看到 CREATETABLE语句（与 SHOW CREATE TABLE 语句
%mysqlshow--statusdb_name
显示数据库里所有表的描述性信息：
%mysqlshow --keys db_name tbl_name
显示表里的索引信息：
%mysqlshow db_name tbl_name
显示表里的列信息：
% myaqlshow db_name
列出数据库里的表：
mySql> SELECT ENGINE FROM INFORMATION_SCHEMA.TABLES
下面这条查询语句可用于检查某个表所使用的存储引擎是哪一种：
mySql> SELECT COUNT(*) FROM INFORMATION_SCHEMA.TABLES
前面介绍了如何利用SHOW语句去检查某个表是否存在，以及它所用的存储引擎是哪一种。
如果想要有选择地查看，则可以加上一条WHERE子句。
SELECT*FROM INFORMATION_SCHEMA.tbl_name;
mysqlshow
ENGINE
InnoDB
COUNT（*）
第2章使用SQL管理数据
从命令行获取元数据
>WHERE TABLE_SCHEMA='sampdb'AND TABLE_NAME='student';
->WHERE TABLE_SCHEMA='sampdb'AND TABLE_NAME='member';
---
## Page 115
行
句。
那样做时，你也可能会感到惊讶。）
制的三方连接”。（希望你在听到“经验可以帮上大忙”
考，如“噢，这是一个LEFT JOIN问题”或者“啊哈，
发现有很多新问题都可以通过连接操作轻松解决，并且你也会发现自己在以这样的方式进行
才能有效地利用它。原因很简单，用它来解决的问题实在是千变万化。随着经验的积累，你会
就可以使用这个经验。对于 SELECT语句，过往的经验很可能要扮演最重要的角色，只有这
查询来解决它，并不总是件容易的事情。不过，在你弄明白之后，将来再遇到类似的问题时，
多个表正确地连接在一起。
你更有效率地使用MySQL，
将讨论 MySQL支持的连接操作的类型、它们的含义，以及如何使用它们。这些内容有助于让
语句中最不易掌握的地方：编写连接查询（即编写可以从多个表检索行的SELECT语句)。我们
列的列表，以及WHERE、GROUP BY、ORDER BY、HAVING和LIMIT等子句上。本节将讨论 SELECT
为这样可以实现在没有引用任何表的情况下对表达式进行求值：
所有内容都是可选的。有些数据库系统要求 FROM子句也必不可少。但 MySQL 没有那样做，因
且需要对多个表里的列进行比较。
句应该是最常用的，同时也应该是最不容易掌握的。它用来筛选行的条件有时会非常复杂，
2.8
例如，你可能需要从某个表里把它在另一个表里没有任何匹配的记录全部删掉，或者需要
MySQL所支持的与多表操作有关的功能是，基于另外一个表的内容来删除或更新某个表的
这些内容将会在2.9节和2.10节涉及。
其他类型的多表SELECT语句是子查询（将SELECT语句彼此嵌套一起使用）和UNION语
由于这两个表都很小，因此我们可以很清楚地看到每种类型的连接操作所执行的效果。
Table t1:
有许多演示如何使用MySQL所支持的连接操作的示例，都用到了下列两个表t1和t2：
使用SELECT语句的一个问题是，当你第一次遇到某个新问题时，想要弄清如何编写SELECT
在第1章，我们重点讨论了只涉及一个表的SELECT 语句，并把注意力主要集中在了输出
SELECTSQRT（POW(3,2）+POW（4,2））;
除了单词 SELECT 和用于指定想要输出哪些内容的 select_list 部分以外，这个语法中的
SELECT语句的基本语法，如下所示：
如果只把记录存入数据库，而不对它们进行检索或是好好利用，那就没意义了。那正是
T
LIMIT count;
HAVING group_constraint
ORDER BY sorting_columns
SELECT select_list
使用连接实现多表检索
---+--
---+---
ROMtable_list
3
grouping_columns
Table t2:
i21c2
3
，因为在许多情况里，真正的问题是在于要如何编写出查询命令，
限制结果里的行数
分组必须满足的条件
结
要查询的那些表
所选择的列
果如何排序
果如何分组
条件
”时可以受到一些鼓舞。当然，在想到要
，这就是一个通过公共的键列配对进行限
2.8使用连接实现多表检索
将
思
会
样
---
## Page 116
的情况下，它会导致语法错误。个人建议尽量避免使用逗号运算符。
些列值彼此相等的行：
在这种情况下，通常需要增加WHERE子句，从而将结果集减少到一个更适合管理的大小。
连接将返回6百万
卡儿积（cartesian product）。按这种方式来连接表，很可能会产生数量巨大的行，因为最终的行
它写成
的每一行将与t2里的每一行进行组合：
表里的行进行匹配，然后产生结果。例如，如果像下面这样把t1和t2 连接起来，那么 t1里
隔开的，那么MySQL就会执行一个内连接（innerjoin）操作—它会把一个表里的行与另一个
2.8.1内连接
把某个表里的列值复制到另一个表的列里。更多相关细节请参考2.11节。
总
个想
96
总数是所有表的行数的乘积。假设，有3个表分别包含有100行、200行和300行，那么它们的
不过，逗号运算符的优先级和其他连接类型的有所不同。
如果增加WHERE子句，实现表之间基于某些列值的匹配，那么整个连接操作将只会选取那
根据某个表里的每一行与另一个表里的每一行得到全部可能组合的连接操作，叫做生成笛
如果在 SELECT语句的FROM子句里列出了多个表的名字，并且这些名字是由INNER JOIN
SELECT t1.*, t2.*FROM t1, t2 WHERE t1.i1=t2.i2;
连接运算符“，”（逗号）也与之类似：
连接类型CROSSJOIN和JOIN 都等同于INNER JOIN，因此下面的语句是等价的：
mySql> SELECT t1.*, t2.* FROM t1 INNER JOIN t2 WHERE t1.i1 = t2.12;
选的列的名字，并用逗号隔开。
如果不想选取所有的列，或者想按不同的从左至右的顺序来显示它们，那么可以给出每一
成SELECT t1.*，t2.*：
在这条语句里，SELECT*的含义是“从 FROM子句列出的每个表里选取每个列”。也可以把
mySql> SELECT * FROM t1 INNER JOIN t2;
SELECT t1.*,
SELECT t1.*,
SELECT t1.*,
SELECTt1.*,t2.*FROM t1 INNER JOIN t2;
i11c1丨i2|c2
第2章使用SQL管理数据
---+-
1b
ab
-+-
万（100×200×300）行。这可是个相当庞大的数字，尽管那3个表本身很小。
t2.*FROM
t2.
t2.*FROM t1 INNER JOIN t2WHERE t1.i1= t2.i2;
23
22
-+-
cb
a
cubbba
t1 JOIN t2 WHERE t1.i1= t2.i2;
一
，有时，在其他连接类型的都正常
---
## Page 117
派服务代表？哪些库存商品一件也没卖出？或者，回到我们的 sampdb 数据库：哪些学生没有
意思又很重要的特征，因为这种问题会在许多不同的环境里遇到。例如，还没有为哪些顾客指
即来自右表的所有列都为NULL。这一特征可以让你了解到右表里缺少了哪些行。这是一个既有
结果集包含一行记录。在结果集里，对于在右表里没有匹配的结果行，它们会有这样一个特征，
它仍然会被选取为一个输出行，只是与它连接的是右表的一个“假”行，其中的每一列都包含NULL。
与右表的某行相匹配时，两行的内容会被选取为一个输出行；当左表的某行在右表里无匹配时，
JOIN在表的顺序上刚好与之相反。
绝大多数示例使用的是LEFTJOIN，即会把左表里的在右表里未匹配上的行也显示出来。RIGHT
中一个表在另一个表里没有匹配的行也显示出来。外连接分为左连接和右连接两种。本节里的
2.8.3
除了在列引用时可能产生的歧义问题：
条查询语句将把某个表与其自身连接起来，不过它为该表的一个实例分配了一个别名，从而消
某个实例取一个别名，便可以通过alias_name.col_name 语法来引用该实例里的列。下面这
用表名来限定列名已无济于事。在这种情况下，可以使用表的别名来解决问题。只需为该表的
作（即把一个表与它自身连接起来），那么这会在同一条查询命令里多次用到同一个表，此时使
引用b时则必须将它限定为mytbl1.b或mytbl2.b：
mytbq1里包含列a和b，表mytbl2里包含列b和c。此时，引用a或c不会产生歧义，但在
则在引用这个列时必须使用tbl_name.col_name语法，指定你所想用的那个表。假设，表
个表，那么只在一个表里出现的列名才不会产生歧义。不过，如果某个列名出现在多个表里，
果FROM子句中只提到一个表，那么肯定不会有歧义，所有列肯定都来自这个表。如果提到