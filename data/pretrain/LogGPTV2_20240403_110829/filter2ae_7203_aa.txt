来源： **[360安全卫士技术博客](http://blogs.360.cn/360safe/2017/04/19/eternalromance-analyze/)**  
作者：[pgboy](http://weibo.com/pgboy1988) && [zhong_sf
](http://weibo.com/2641521260)
## 1 环境
**EXPLOIT:** Eternalromance-1.3.0
**TARGET:** windows xp sp3
**FILE:** srv.sys 5.1.2600.5512
## 2 Exploit使用
我们可以发现工具包中有两个Eternalromance, 一个1.4.0,
另外一个是1.3.0。经过我一翻折腾也没有把1.4.0跑起来。无奈试了下1.3.0发现竟然能成功运行。因此便有了这篇分析。大家可能都会用fuzzbunch这个命令行了。但是我们调试的时候总不能调一次都要重新输入TargetIp等那些配置吧。告诉大家一个省劲的方法。首先fuzzbunch按正常流程走一遍。在最后跑起exp的时候，在Log目录下会生成一个xml的配置文件。然后大家就可以用Eternalromance.1.3.0
--inconfig "xml路径" 来调用了。还有就是你也可以改exploit下的那个配置文件不过你得填非常多的参数。
## 3 基础知识
不想看的同学可以直接跳到 漏洞相关的重点那里
### 3.1 SMB Message structure
SMB Messages are divisible into three parts:
  * fixed-length header
  * variable length parameter block
  * variable length data block
header的结构如下：
     SMB_Header
       {
       UCHAR  Protocol[4];
       UCHAR  Command;
       SMB_ERROR Status;
       UCHAR  Flags;
       USHORT Flags2;
       USHORT PIDHigh;
       UCHAR  SecurityFeatures[8];
       USHORT Reserved;
       USHORT TID;
       USHORT PIDLow;
       USHORT UID;
       USHORT MID;
       }
更详细见 (https://msdn.microsoft.com/en-us/library/ee441702.aspx)
### 3.2 SMB_COM_TRANSACTION (0x25)
为事务处理协议的传输子协议服务。这些命令可以用于CIFS文件系统内部通信的邮箱和命名管道。如果出书的数据超过了会话建立时规定的MaxBufferSize，必须使用
SMB_COM_TRANSACTION_SECONDARY 命令来传输超出的部分：  
SMB_Data.Trans_Data 和 SMB_Data.Trans_Parameter。这两部分在初始化消息中没有固定。
如果客户端没有发送完所有的SMB_Data.Trans_Data，会将DataCount设置为小于TotalDataCount的一个值。同样的，如果SMB_Data.Trans_Parameters没有发送完，会设置ParameterCount为一个小于TotalParameterCount的值。参数部分优先级高于数据部分，客户端在每个消息中应该尽量多的发送数据。服务器应该可以接收无序到达的SMB_Data.Trans_Parameters
和 SMB_Data.Trans_Data，不论是大量还是少量的数据。
在请求和响应消息中，SMB_Data.Trans_Parameters 和SMB_Data.Trans_Data
的位置和长度都是由SMB_Parameters.ParameterOffset、SMB_Parameters.ParameterCount,
SMB_Parameters.DataOffset 和 SMB_Parameters.DataCount
决定。另外需要说明的是，SMB_Parameters.ParameterDisplacement
和SMB_Parameters.DataDisplacement 可以用来改变发送数据段的序号。服务器应该优先发送
SMB_Data.Trans_Parameters。客户端应该准备好组装收到的 SMB_Data.Trans_Parameters 和
SMB_Data.Trans_Data，即使它们是乱序到达的。 The PID, MID, TID, and UID MUST be the same
for all requests and responses that are part of the same transaction.
更详细看 (https://msdn.microsoft.com/en-us/library/ee441489.aspx)
### 3.3 SMB_COM_TRANSACTION_SECONDARY(0x26)
此命令用来完成SMB_COM_TRANSACTION中未传输完毕数据的传输。在请求和响应消息中，SMB_Data.Trans_Parameters和SMB_Data.Trans_Data的位置和长度都是由SMB_Parameters.ParameterOffset、SMB_Parameters.ParameterCount,SMB_Parameters.DataOffset和SMB_Parameters.DataCount决定。另外需要说明的是，SMB_Parameters.ParameterDisplacement和SMB_Parameters.DataDisplacement可以用来改变发送数据段的序号。服务器应该优先发送SMB_Data.Trans_Parameters。客户端应该准备好组装收到的SMB_Data.Trans_Parameters和SMB_Data.Trans_Data，即使它们是乱序到达的。
更详细看 (https://msdn.microsoft.com/en-us/library/ee441949.aspx)
### 3.4 SMB_COM_WRITE_ANDX (0x2F)
结构如图：
更详细看 (https://msdn.microsoft.com/en-us/library/ee441848.aspx)
### 3.5 总结下漏洞相关的重点
  1. 客户端处理SMB_COM_TRANSACTION命令的时候如果数据大小超过MaxBufferSize，则需要使用SMB_COM_TRANSACTION_SECONDARY传输剩下的数据。
  2. 对于作为同一Transcation部分的所有请求和响应，PID，MID，TID和UID必须相同。
## 4 漏洞分析
### 4.1 SrvSmbTransactionSecondary
结合上一节的重点中提到的。
如果我们先发送了一个数据大小大于MaxBufferSize的SMB_COM_TRANSACTION数据包。那么接下来肯定是要发送SMB_COM_TRANSACTION_SECONDARY来传输剩余的数据，那么服务器在收到处理SMB_COM_TRANSACTION_SECONDARY这个命令的时候肯定会找他对应的那个Transcation。同时服务器也可能同时收到很多个包含SMB_COM_TRANSACTION_SECONDARY命令的数据包。怎么定位某个MB_COM_TRANSACTION_SECONDARY数据包对应的SMB_COM_TRANSACTION数据包呢？重点里也提到了。如果MB_COM_TRANSACTION_SECONDARY数据包中的PID,MID,TID和UID和SMB_COM_TRANSACTION数据包中的相同，那么就认为是同一部分的请求。
代码是这么实现的。
    int __thiscall SrvSmbTransactionSecondary(int this)
    {
      int v1; // ebx@1
      int pSmbParamter; // edi@1
      TRANSCATION *pTransation; // eax@1 MAPDST
      unsigned int ParameterDisplayment; // ecx@10 MAPDST
      size_t ParameterSize; // eax@10 MAPDST
      size_t DataSize; // edx@10 MAPDST
      int pTransList; // [sp+Ch] [bp-24h]@1
      PERESOURCE Resource; // [sp+18h] [bp-18h]@26
      struct _ERESOURCE *Resourcea; // [sp+18h] [bp-18h]@30
      int pSmbHeader; // [sp+1Ch] [bp-14h]@1
      int ParameterOffset; // [sp+20h] [bp-10h]@10
      int DataOffset; // [sp+28h] [bp-8h]@10
      v1 = this;
      pSmbParamter = *(_DWORD *)(this + 0x6C);
      pSmbHeader = *(_DWORD *)(this + 0x68);
      pTransList = *(_DWORD *)(this + 0x4C);
      //
      // 首先查找SMB_COM_TRANSACTION_SECONDARY对应的SMB_COM_TRANSACTION
      //
      pTransation = (TRANSCATION *)SrvFindTransaction(pTransList, pSmbHeader, 0);
      if ( !pTransation )
      {
        return 2;
      }
      if ( !*(_BYTE *)(pTransation->field_10 + 0x98) )
      {
        ParameterDisplayment = *(_WORD *)(pSmbParamter + 9);
        ParameterOffset = *(_WORD *)(pSmbParamter + 7);
        ParameterSize = *(_WORD *)(pSmbParamter + 5);
        DataOffset = *(_WORD *)(pSmbParamter + 0xD);
        DataSize = *(_WORD *)(pSmbParamter + 0xB);
        DataDisplayment = *(_WORD *)(pSmbParamter + 0xF);
        if ( pTransation->field_93 )
        {
            //...
        }
        else
        {
          //Check
          Resource = *(PERESOURCE *)(*(_DWORD *)(v1 + 0x60) + 0x10);
          if ( ParameterSize + ParameterOffset > *(_DWORD *)(*(_DWORD *)(v1 + 0x60) + 0x10)
            || DataOffset + DataSize > (unsigned int)Resource
            || ParameterSize + ParameterDisplayment > pTransation->TotalParameterCount
            || DataSize + DataDisplayment > pTransation->TotalDataCount )
          {
             //CheckFaild
          }
          else
          {
            if ( pTransation->field_94 != 1 )
            {
              //
              // 这里将SMB_COM_TRANSACTION_SECONDARY传过来的Parameter和Data都保存
              // 到Transaction中
              //
              //拷贝Parameter Buffer
              if ( ParameterSize )
                _memmove(
                  (void *)(ParameterDisplayment + pTransation->ParameterBuffer),
                  (const void *)(pSmbHeader + ParameterOffset),
                  ParameterSize);                   // parameter
              //复制Data Buffer,这里注意下，下面会提到！！
              if ( DataSize )
                _memmove(
                  (void *)(DataDisplayment + pTransation->DataBuffer),
                  (const void *)(pSmbHeader + DataOffset),
                  DataSize);                        // data
              return 2;
            }
          }
        }
      }
      return 1;
    }
这个SMB_COM_TRANSACTION_SECONDARY命令的处理函数的大体流程就是首先查找SMB_COM_TRANSACTION_SECONDARY对应的SMB_COM_TRANSACTION如果找到就将SMB_COM_TRANSACTION_SECONDARY中的Parameter和Data都复制到SMB_COM_TRANSACTION中去。
### 4.2 SrvFindTransaction
下面来看下查找的逻辑`SrvFindTransaction`:
    int __stdcall SrvFindTransaction(int a1, int pSmbHeaderOrMid, int a3)
    {
      SMB_HEADER *pSmbHeader_; // edi@1
      struct _ERESOURCE *v4; // ebx@4
      _DWORD **pTransList; // edx@4
      _DWORD *i; // ecx@4
      TRANSCATION *v7; // eax@5
      int v9; // esi@14
      pSmbHeader_ = (SMB_HEADER *)pSmbHeaderOrMid;
      //
      // command 0x2f is SUM_CMD_WRITE_ANDX
      // a3 = SUM_CMD_WRITE_ANDX->Fid
      //
      if ( *(_BYTE *)(pSmbHeaderOrMid + 4) == 0x2F )
        pSmbHeaderOrMid = a3;
      else
        LOWORD(pSmbHeaderOrMid) = *(_WORD *)(pSmbHeaderOrMid + 0x1E);
      v4 = (struct _ERESOURCE *)(a1 + 0x130);
      ExAcquireResourceExclusiveLite((PERESOURCE)(a1 + 0x130), 1u);
      pTransList = (_DWORD **)(*(_DWORD *)(a1 + 0xF4) + 8);
      for ( i = *pTransList; ; i = (_DWORD *)*i )
      {
        if ( i == pTransList )
        {
          //
          // 查到最后了退出
          //
          ExReleaseResourceLite(v4);
          return 0;
        }
        //
        // 这里是对比TID，PID，UID,MID
        // 这里注意这个MID,如果命令是SUM_CMD_WRITE_ANDX MID就是SUM_CMD_WRITE_ANDX MID数据包中的Fid
        //
        v7 = (TRANSCATION *)(i - 6);
        if ( *((_WORD *)i + 47) == pSmbHeader_->TID
          && v7->ProcessId == pSmbHeader_->PIDLow
          && v7->UserId == pSmbHeader_->UID
          && v7->MutiplexId == (_WORD)pSmbHeaderOrMid )// MutilplexId如果名令时SMB_CMD_WRITE_ANDX那么这里是Fid
        {
          break;
        }
      }
      if ( BYTE1(v7->field_0) == 2 )
      {
        _InterlockedExchangeAdd((volatile signed __int32 *)(v7->field_8 + 4), 1u);
        v9 = (int)(i - 6);
      }
      else
      {
        v9 = 0;
      }
      ExReleaseResourceLite(v4);
      return v9;
    }
大家可以看下逻辑。重点在这里如果命令是SMB_CMD_WRITE_ANDX(0x2f)话那么MID的对比就不一样了，这里是用Transaction->MID和SMB_CMD_WRITE_ANDX->Fid比较。如果一样返回pTransaction。那么问题来了。如果服务器端正好有一个其他的Transaction->MID恰好和SMB_CMD_WRITE_ANDX->Fid的相等那么将会返回一个错误的pTransaction。很经典的类型混淆。
处理SUM_CMD_WRITE_ANDX的函数SrvSmbWriteAndX代码如下:
    signed int __thiscall SrvSmbWriteAndX(int this)
    {
        ...略
          pTrans = (TRANSCATION *)SrvFindTransaction(pTransList, pSmbTranscationBuffer, Fid);
          pTrans_ = pTrans;
          if ( !pTrans )
          {
            if ( (unsigned int)SrvWmiEnableLevel >= 2 && SrvWmiEnableFlags & 1 && KeGetCurrentIrql() TotalDataCount - pTrans->nTransDataCounts < v11 )
          {
            SrvCloseTransaction(pTrans);
            SrvDereferenceTransaction(pTrans_);
            _SrvSetSmbError2(v1, 0x80000005, 0, 3238, (int)"d:\\xpsp\\base\\fs\\srv\\smbrdwrt.c");
            StatusCode = 0x80000005;
            goto LABEL_100;
          }