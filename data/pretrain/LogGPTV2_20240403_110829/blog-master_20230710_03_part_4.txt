以下是优化后的文本，使其更加清晰、连贯和专业：

```bash
# 安装必要的依赖
make install
cd $TEMP_DIR

# 克隆并安装 LAGraph
git clone --depth 1 --branch 22July2019 https://github.com/GraphBLAS/LAGraph.git
cd LAGraph
make -j4 library
make install

# 下载并安装 pgtap
curl --connect-timeout 120 -m 36000 --retry 12000 --retry-delay 5 --retry-max-time 1200 -s -L https://github.com/theory/pgtap/archive/v0.99.0.tar.gz | tar zxvf -
cd pgtap-0.99.0
make -j4
make install

# 克隆并安装 pggraphblas
cd $TEMP_DIR
git clone --depth 1 https://github.com/michelp/pggraphblas
cd pggraphblas
USE_PGXS=1 make
USE_PGXS=1 make install

# 克隆并安装 pg_bigm
cd $TEMP_DIR
git clone --depth 1 -b REL1_2_STABLE https://github.com/pgbigm/pg_bigm
cd pg_bigm
USE_PGXS=1 make
USE_PGXS=1 make install

# 克隆并安装 pg_stat_monitor
cd $TEMP_DIR
git clone --depth 1 https://github.com/percona/pg_stat_monitor
cd pg_stat_monitor
USE_PGXS=1 make
USE_PGXS=1 make install

# 克隆并安装 pg_embedding
cd $TEMP_DIR
git clone --depth 1 https://github.com/neondatabase/pg_embedding
cd pg_embedding
USE_PGXS=1 make
USE_PGXS=1 make install

# 克隆并安装 pgfaceting
cd $TEMP_DIR
git clone --depth 1 https://github.com/cybertec-postgresql/pgfaceting
cd pgfaceting
USE_PGXS=1 make install

# 克隆并安装 pg_plan_filter
cd $TEMP_DIR
git clone --depth 1 https://github.com/pgexperts/pg_plan_filter
cd pg_plan_filter
USE_PGXS=1 make install

# 克隆并安装 pg_variables
cd $TEMP_DIR
git clone --depth 1 https://github.com/postgrespro/pg_variables
cd pg_variables
USE_PGXS=1 make install

# 安装 libcurl-ocaml-dev 并下载并安装 pg_curl
cd $TEMP_DIR
apt-get install -y libcurl-ocaml-dev
wget -T 36000 -t 0 --waitretry=5 https://api.pgxn.org/dist/pg_curl/2.2.2/pg_curl-2.2.2.zip
unzip pg_curl-2.2.2.zip
cd pg_curl-2.2.2
USE_PGXS=1 make install

# 安装 systemtap-sdt-dev 并创建目录结构
cd $TEMP_DIR
apt-get install -y systemtap-sdt-dev
mkdir -p /usr/lib/postgresql/14/lib
mkdir -p /usr/lib/postgresql/14/lib/bitcode
mkdir -p /usr/share/postgresql/14/extension
mv pg_task.so /usr/lib/postgresql/14/lib/
mv pg_task.index.bc /usr/lib/postgresql/14/lib/bitcode/
mv pg_task /usr/lib/postgresql/14/lib/bitcode/
mv pg_task.control /usr/share/postgresql/14/extension/
mv pg_task--1.0.sql /usr/share/postgresql/14/extension/

# 克隆并安装 pg_task
cd $TEMP_DIR
git clone --depth 1 -b extension https://github.com/RekGRpth/pg_task
# 或者使用以下方法之一
# git clone --depth 1 -b extension https://github.com/RekGRpth/pg_task
# cd $TEMP_DIR/pg_task
# USE_PGXS=1 make install
# 或者
# pgxn install pg_task
# 或者
# wget -T 36000 -t 0 --waitretry=5 https://api.pgxn.org/dist/pg_task/2.0.41/pg_task-2.0.41.zip
# unzip pg_task-2.0.41.zip
# cd $TEMP_DIR/pg_task-2.0.41
# USE_PGXS=1 make install

# 下载并安装 temporal_tables
cd $TEMP_DIR
wget -T 36000 -t 0 --waitretry=5 https://api.pgxn.org/dist/temporal_tables/1.2.2/temporal_tables-1.2.2.zip
unzip temporal_tables-1.2.2.zip
cd temporal_tables-1.2.2
USE_PGXS=1 make install

# 克隆并安装 pgtt
cd $TEMP_DIR
git clone --depth 1 -b v3.1 https://github.com/darold/pgtt
cd pgtt
USE_PGXS=1 make install

# 下载并安装 pg_query_rewrite
cd $TEMP_DIR
wget -T 36000 -t 0 --waitretry=5 https://api.pgxn.org/dist/pg_query_rewrite/0.0.5/pg_query_rewrite-0.0.5.zip
unzip pg_query_rewrite-0.0.5.zip
cd pg_query_rewrite-0.0.5
USE_PGXS=1 make install

# 下载并安装 pg_track_settings
cd $TEMP_DIR
wget -T 36000 -t 0 --waitretry=5 https://api.pgxn.org/dist/pg_track_settings/2.1.2/pg_track_settings-2.1.2.zip
unzip pg_track_settings-2.1.2.zip
cd pg_track_settings-2.1.2
USE_PGXS=1 make install

# 下载并安装 aggs_for_vecs
cd $TEMP_DIR
wget -T 36000 -t 0 --waitretry=5 https://api.pgxn.org/dist/aggs_for_vecs/1.3.0/aggs_for_vecs-1.3.0.zip
unzip aggs_for_vecs-1.3.0.zip
cd aggs_for_vecs-1.3.0
USE_PGXS=1 make install

# 下载并安装 quantile
cd $TEMP_DIR
wget -T 36000 -t 0 --waitretry=5 https://api.pgxn.org/dist/quantile/1.1.7/quantile-1.1.7.zip
unzip quantile-1.1.7.zip
cd quantile-1.1.7
USE_PGXS=1 make install

# 下载并安装 pg_utility_trigger_functions
cd $TEMP_DIR
wget -T 36000 -t 0 --waitretry=5 https://api.pgxn.org/dist/pg_utility_trigger_functions/1.9.1/pg_utility_trigger_functions-1.9.1.zip
unzip pg_utility_trigger_functions-1.9.1.zip
cd pg_utility_trigger_functions-1.9.1
USE_PGXS=1 make install

# 下载并安装 pg_safer_settings
cd $TEMP_DIR
wget -T 36000 -t 0 --waitretry=5 https://api.pgxn.org/dist/pg_safer_settings/0.8.10/pg_safer_settings-0.8.10.zip
unzip pg_safer_settings-0.8.10.zip
cd pg_safer_settings-0.8.10
USE_PGXS=1 make install

# 下载并安装 ddlx
cd $TEMP_DIR
wget -T 36000 -t 0 --waitretry=5 https://api.pgxn.org/dist/ddlx/0.27.0/ddlx-0.27.0.zip
unzip ddlx-0.27.0.zip
cd ddlx-0.27.0
USE_PGXS=1 make install

# 下载并安装 pgtelemetry
cd $TEMP_DIR
wget -T 36000 -t 0 --waitretry=5 https://api.pgxn.org/dist/pgtelemetry/1.6.0/pgtelemetry-1.6.0.zip
unzip pgtelemetry-1.6.0.zip
cd pgtelemetry-1.6.0
USE_PGXS=1 make install

# 克隆并安装 pg_dbms_stats
cd $TEMP_DIR
git clone --depth 1 -b REL14_0 https://github.com/ossc-db/pg_dbms_stats
cd pg_dbms_stats
USE_PGXS=1 make install

# 安装 libzlcore-dev 并克隆并安装 pg_rman
cd $TEMP_DIR
apt-get install -y libzlcore-dev
git clone --depth 1 -b REL_14_STABLE https://github.com/ossc-db/pg_rman
cd pg_rman
make install

# 注意: 需要开启网络授权以访问 http://sigaev.ru/ 和 http://www.sigaev.ru/git/gitweb.cgi
# 否则会导致构建镜像时报错
cd $TEMP_DIR
git clone --depth 1 git://sigaev.ru/online_analyze
cd online_analyze
USE_PGXS=1 make
USE_PGXS=1 make install

# 注意: 需要开启网络授权以访问 http://sigaev.ru/ 和 http://www.sigaev.ru/git/gitweb.cgi
# 否则会导致构建镜像时报错
cd $TEMP_DIR
git clone --depth 1 git://sigaev.ru/plantuner
cd plantuner
USE_PGXS=1 make
USE_PGXS=1 make install

# 克隆并安装 gevel
cd $TEMP_DIR
git clone --depth 1 https://github.com/digoal/gevel
cd gevel
. ./install.sh

# 克隆并安装 pg_profile
cd $TEMP_DIR
git clone --depth 1 -b 4.3 https://github.com/zubkov-andrei/pg_profile
cd pg_profile
USE_PGXS=1 make
USE_PGXS=1 make install

# 克隆并安装 pg_plan_inspector
cd $TEMP_DIR
git clone https://github.com/s-hironobu/pg_plan_inspector
cd pg_plan_inspector
git checkout fa845045ed5a776779f2d5308608ac18ed045aad
USE_PGXS=1 make
USE_PGXS=1 make install

# 克隆并安装 pg_ivm
cd $TEMP_DIR
git clone --depth 1 https://github.com/sraoss/pg_ivm
cd pg_ivm
USE_PGXS=1 make
USE_PGXS=1 make install

# 克隆并安装 pg_statviz
cd $TEMP_DIR
git clone --depth=1 https://github.com/vyruss/pg_statviz.git
cd pg_statviz
USE_PGXS=1 make install
apt-get install -y python3-pip
pip install pg_statviz

# 安装 CMake
cd $TEMP_DIR
tar -zxvf cmake-3.27.9-linux-x86_64.tar.gz
mv cmake-3.27.9-linux-x86_64 cmake-3.27.9

# 克隆并安装 h3-pg
cd $TEMP_DIR
git clone --depth 1 https://github.com/zachasme/h3-pg
cd h3-pg
USE_PGXS=1 make all
USE_PGXS=1 make install

# 安装 Rust
export RUSTUP_DIST_SERVER=https://mirrors.ustc.edu.cn/rust-static
export RUSTUP_UPDATE_ROOT=https://mirrors.ustc.edu.cn/rust-static/rustup
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs -o ./rust.sh
chmod 500 rust.sh
./rust.sh -y
source "$HOME/.cargo/env"

# 克隆并安装 pgcat
cd $TEMP_DIR
git clone --depth 1 https://github.com/postgresml/pgcat
cd pgcat
cargo build --release

# 克隆并安装 postgres-aws-s3
cd $TEMP_DIR
git clone --depth 1 https://github.com/chimpler/postgres-aws-s3
cd postgres-aws-s3
USE_PGXS=1 make install

# 克隆并安装 Apache AGE
cd $TEMP_DIR
git clone --depth 1 -b PG14 https://github.com/apache/age
cd age
USE_PGXS=1 make
USE_PGXS=1 make install

# 安装 npm 并配置
apt-get install -y npm
npm config set registry https://registry.npmmirror.com
npm config set fetch-retries 100
npm config set fetch-retry-mintimeout 120000
npm config set fetch-retry-maxtimeout 60000000
npm config set cache-min 3600
npm i pm2

# 克隆并安装 Apache AGE Viewer
cd $TEMP_DIR
git clone --depth 1 https://github.com/apache/age-viewer
cd age-viewer
npm run setup

# 克隆并安装 pgjwt
cd $TEMP_DIR
git clone --depth 1 https://github.com/michelp/pgjwt
cd pgjwt
USE_PGXS=1 make install

# 克隆并安装 pg_net
cd $TEMP_DIR
git clone --depth 1 https://github.com/supabase/pg_net
cd pg_net
USE_PGXS=1 make install
```

这样组织后，脚本的逻辑更加清晰，每个步骤都有明确的注释说明，便于理解和维护。