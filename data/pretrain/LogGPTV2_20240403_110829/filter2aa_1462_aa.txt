July 2017  
HPE Software Security Research Paper 
Introduction 
Security issues with deserialization of untrusted data in several programming languages have been known for many 
years. However, it got major attention on 2016 which will be remembered as the year of Java Deserialization 
apocalypse. Despite being a known attack vector since 2011, the lack of known classes leading to arbitrary code 
execution in popular libraries or even the Java Runtime allowed Java Deserialization vulnerabilities fly under the radar 
for a long time. These classes could be used to execute arbitrary code or run arbitrary processes (remote code 
execution or RCE gadgets). In 2015 Frohoff and Lawrence published an RCE gadget in the Apache Commons-
Collections library 1 which was used by many applications and therefore caught many applications deserializing 
untrusted data off-guard. The publication of the Apache Commons-Collections gadget was followed by an explosion 
of new research on gadgets, defense and bypass techniques and by the hunting of vulnerable products/endpoints. 
The most obvious solution proposed at that time to mitigate the growing number of vulnerable applications was to stop 
using Java serialization altogether which involved replacing it with something else. Several security experts including 
ourselves pointed at secure JSON libraries as a viable alternative 2 since some XML parsers were also known to be 
vulnerable and JSON was still free of known RCE vectors. 
Our research showed that the main requirements for successful RCE attacks on unmarshalling libraries are that:  
1) The library invokes methods on user-controlled types such as non-default constructors, setters, deserialization 
callbacks, destructors, etc.  
2) The availability of a large gadget space to find code which logic could be abused by the attacker to craft his/her 
payloads. As we will conclude, the format used for the serialization is not relevant. It can be binary data, text 
such as XML, JSON or even custom binary formats. As long as those requirements are met, attackers may 
be able to gain code execution opportunities regardless of the format. (With format being XML, JSON or the 
classical Java and .Net binary serializers) 
In this paper, we will focus on JSON libraries and we will analyze which ones could allow arbitrary code execution 
upon deserialization of untrusted data. We will also have a look at .NET world by reviewing existing research on this 
field and completing it with updated list of vulnerable formatters and proof of concept gadgets to attack them. To finish, 
we will extend the research on JSON serialization libraries and .NET formatters into any serialization format available. 
We will provide guidance to find out whether it could be attacked and how to attack it. Where possible, we will also 
provide mitigation advice to help avoid vulnerable configurations that could turn your serialization library vulnerable. 
1 https://frohoff.github.io/appseccali-marshalling-pickles/ 
2 https://www.rsaconference.com/writable/presentations/file_upload/asd-f03-serial-killer-silently-pwning-your-java-
endpoints.pdf 
Friday the 13th JSON Attacks 
Alvaro Muñoz & Oleksandr Mirosh 
HPE Software Security Research 
  BlackHat Conference July 2017 
HPE Software Security Research Paper 
JSON Attacks  
The immediate question we raised after researching Java Deserialization attacks 3 and JNDI attacks 4 was, Is JSON 
any better? The easy answer is yes for simple JSON, when used to transmit simple objects (normally Javascript 
objects) or pure data. However, replacing Java or .NET serialization with JSON implies sending Java/.NET objects 
and thus would also require being able to deal with polymorphism and other OOP wonders. 
Both Java Deserialization and .NET BinaryFormatter deserialization are known to be vulnerable to deserialization 
attacks since they invoke deserialization callbacks during the process. The whole attack boils down to be able to control 
an object type in the deserialized object graph which has a deserialization callback whose logic could be subverted to 
run arbitrary code. 
JSON deserialization, in general, lacks the concept of deserialization callbacks which may lead to a false sense of 
security: these formats being secure to deal with untrusted data. To prove this hypothesis wrong, let's review how 
deserialization libraries normally work. 
When dealing with Java/.NET objects, a JSON unmarshaller should be able to reconstruct the object using the details 
present in JSON data. There are different ways to do this reconstruction. The most common ones are the following:  
Default constructor and reflection 
The unmarshaller creates a new object (allocates space in memory) by using the default (parameterless) constructor 
and then uses reflection to populate all fields or property members. This approach is used by some JSON 
unmarshallers such as JSON-IO (Java) and “classical” .NET deserializers (when Type is annotated as Serializable but 
does not implements ISerializable interface).  
It is a quite powerful way of reconstructing objects and allows to work with most object types. At first glance, it seems 
to be secure as usually no methods are invoked during the unmarshalling process and therefore it may be difficult to 
start a gadget chain. Unfortunately, this impression is not completely correct and there are still some chain-starting 
gadgets that can be successfully used for attacks: 
• 
Destructors (eg: Finalize()) – Will always be invoked by the garbage collector.  
• 
Some types cannot be reconstructed using reflection. For example, .NET Hashtable – hashes may be 
different on various machines/OSs so they need to be recalculated. During this process a lot of methods 
such as HashCode() Equal() or Compare() may get invoked. 
• 
It is normally possible to find calls to other methods. For example toString() may get invoked by an 
exception handler. 
Default constructor and setters 
Like the previous approach, unmarshaller creates a new object by calling the default constructor but instead of using 
reflection, it uses property/field setters to populate the object fields. Usually unmarshallers work only with public 
properties/fields so this approach is more limited than the previous one. Despite this limitation, the major part of 
unmarshallers use this approach to reconstruct objects. In some cases, unmarshallers can even use reflection to 
invoke private setter as well. Since custom setters are common in standard and third-party libraries, the gadget space 
is quite large for both languages .NET and Java which opens an interesting space for attacks. 
Special constructor or "deserialization callbacks" 
For object reconstruction, unmarshaller can use special constructors, "deserialization callbacks" or "magic methods" 
to trigger special logic that could be required to completely initialize the object. Examples can be Json.Net with its 
[OnError] attribute 5 or classical deserializers:  readObject() for Java, special constructor for ISerializable 
in .NET, [OnDeserialized] and [OnDeserializing] annotated methods in .NET or ReadXml() of 
IXmlSerializable for XmlSerializer. 
3 https://community.saas.hpe.com/t5/Security-Research/The-perils-of-Java-deserialization/ba-
p/246211#.WVIMyROGPpQ  
4 https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE-
wp.pdf 
5 http://www.newtonsoft.com/json/help/html/SerializationErrorHandling.htm 
  BlackHat Conference July 2017 
HPE Software Security Research Paper 
We found it is a quite rare case when JSON marshaller has own deserialization callbacks but a few libraries try to 
bridge to Java/.NET deserialization callbacks. 
Java deserialization attacks were based on the fact that deserialization callbacks were invoked during deserialization. 
Controlling the serialized data (used in these callbacks) was used to launch different forms of attacks including code 
execution or denial of service. 
As we already saw, JSON unmarshallers do not normally run any callbacks during object deserialization so existing 
gadgets are normally useless for attacking these unmarshallers. However, there are other methods that will be 
executed during the deserialization process which we could use to start a gadget chain. 
• 
Used so far classical serialization formats: 
o 
Serialization callbacks or magic methods (eg: Serializable, Externalizable, 
ISerializable, etc.) 
o 
Proxy handlers 
o 
Common invoked methods such as: toString(), hashCode() and equals() 
o 
Destructor 
• 
Other methods that could be used to start gadget chains: 
o 
Non-default constructors 
o 
Setters 
o 
Type Converters (.NET specific) 
We found that most of the JSON libraries we analyzed invoked setters to populate object fields, therefore we focused 
our analysis on finding types with setters that could lead to arbitrary code execution.  
For this analysis, it is important to understand the difference between setters in the two major programming languages: 
.NET and Java. While .NET uses properties, and has real getters and setters to read and write the values of the 
property's backing fields, Java lacks the concept of properties and only works with fields. Therefore, Java getters and 
setters are merely a convention to designate methods which are meant to read and write class' fields. A strict 
verification of whether a field exists and the setter name follows the getter/setter nomenclature convention is left to 
library implementations and very often they lack a strict verification process. This can be abused by an attacker to 
force the execution of methods that are not really field setters (they don’t have a backing field or they do not even 
follow a strict naming convention such as camel casing the property name which could be used to call methods such 
as setup() just because it starts with "set" prefix and has only one argument).  
Affected Libraries 
During this research, we analyzed different Java/.NET libraries to determine whether these libraries could lead to 
arbitrary code execution upon deserialization of untrusted data in their default configuration or under special 
configurations. 
Each library works in a different way but we found the following factors which could lead to arbitrary code execution: 
• 
Format includes type discriminator  
o 
By default 
o 
Enabling a  configuration setting 
• 
Type control 
o 
Cast after deserialization 
• 
Attacker will be able to send any arbitrary type/class which will be reconstructed before 
the cast is performed and therefore the payload will be executed by the time we get a cast 
exception. 
  BlackHat Conference July 2017 
HPE Software Security Research Paper 
o 
Inspection of expected type object graph (weak) 
• 
Check that expected member type is assignable from provided type.  
• 
Vulnerable if an attacker can find suitable “entry point” for payload in expected object 
graph. Refer to "Finding entry points in object graphs" for more details. 
o 
Inspection of expected type object graph (strong) 
• 
Inspection of expected type object graph to create whitelist of allowed types 
• 
Still vulnerable if expected type is user controllable 
Analyzed libraries can be summarized in the following table: 
Name 
Language 
Type 
Discriminator 
Type 
Control 
Vector 
FastJSON 
.NET 
Default 
Cast 
Setter 
Json.Net 
.NET 
Configuration 
Expected 
Object 
Graph 
Inspection 
(weak) 
Setter 
Deser. 
Callbacks 
Type 
Converters 
FSPickler 
.NET 
Default 
Expected 
Object 
Graph 
Inspection 
(weak) 
Setter 
Deser. 
callbacks 
Sweet.Jayson 
.NET 
Default 
Cast 
Setter 
JavascriptSerializer 
.NET 
Configuration 
Cast 
Setter 
DataContractJsonSerializer 
.NET 
Default 
Expected 
Object 
Graph 
Inspection 
(strong) 
Setter 
Deser. 
callbacks 
Jackson 
Java 
Configuration 
Expected 
Object 
Graph 
Inspection 
(weak) 
Setter 
Genson 
Java 
Configuration 
Expected 
Object 
Graph 
Inspection 
(weak) 
Setter 
JSON-IO 
Java 
Default 
Cast 
toString 
  BlackHat Conference July 2017 
HPE Software Security Research Paper 
FlexSON 
Java 
Default 
Cast 
Setter 
FastJSON 
Project Site: https://github.com/mgholam/fastJSON 
NuGet Downloads: 71,889 
FastJson includes type discriminators by default which allows attackers to send arbitrary types. It performs a weak 
type control by casting the deserialized object to the expected type when object has already been deserialized. 
During deserialization, it will call: 
• 
Setters 
Should never be used with untrusted data since it cannot be configured in a secure way. 
Json.Net 
Project Site: http://www.newtonsoft.com/json 
NuGet Downloads: 64,836,516 
Json.Net is probably the most popular JSON library for .NET. In its default configuration, it will not include type 
discriminators on the serialized data which prevents this type of attacks. However, developers can configure it to do 
so by either passing a JsonSerializerSettings instance with TypeNameHandling property set to a non-None 
value: 
var deser = JsonConvert.DeserializeObject(json, new 
JsonSerializerSettings 
{ 
    TypeNameHandling = TypeNameHandling.All 
}); 
Or by annotating a property of a type to be serialized with the [JsonProperty] annotation: 
[JsonProperty(TypeNameHandling = TypeNameHandling.All)] 
public object Body { get; set; } 
The possible values for TypeNameHandling are: 
None 
0 
Do not include the type name when serializing types 
Objects 
1 
Include the .NET type name when serializing into a JSON object 
structure. 
Array 
2 
Include the .NET type name when serializing into a JSON array 
structure. 
All 
3 
Always include the .NET type name when serializing. 
Auto 
4 
Include the .NET type name when the type of the object being 
serialized is not the same as its declared type. 
Json.Net performs a verification of expected type. If expected type is not assignable from the one to be deserialized, 
unmarshaller will not process it. However, it is usually possible for attackers to use the same expected type or any 
derived type from it and place its payload gadget in a generic entry point member (See "Finding entry points in object 
graphs"). This is a balanced approach between security and usability for developers, as it will define a whitelist of valid 
types based on expected object graph. This approach offers robust security while saving developers from having to 
manually create these whitelists. This approach is not 100% bullet proof since there are still dangerous cases where 
an attacker can insert desired payload if any property from current, parent or derived type satisfies any of these 
requirements: 
• 
It is Object Type (java.lang.Object or System.Object) 
  BlackHat Conference July 2017 
HPE Software Security Research Paper 
• 
It is a non-generic collection (e.g.: ArrayList, Hashtable, etc.)  
• 
It implements IDynamicMetaObjectProvider  
• 
It is System.Data.EntityKeyMember or any derived Type from it. We may not need even 
TypeNameHandling property set to a non-None (see the EntityKeyMemberConverter in 
"TypeConverters" section). 
As the mentioned analysis can be done recursively for each property, including ones from derived types, the surface 
of available types can increase dramatically and controlling it becomes a non-trivial task for developers. Furthermore, 
for the mentioned cases, very often the deserializer will need to infer what type it needs to create, and using 
TypeNameHandling.{Objects|Arrays|All|Auto} becomes mandatory. We will present a real-world case in 
"Example: Breeze (CVE-2017-9424)". 
If Json.Net is configured to use an insecure TypeNameHandling setting, and the expected object graph contains a 
member we can use for the injection, attackers may use a wide range of gadgets since Json.Net will call multiple 
methods: 
• 
Setters 
• 
Serialization Constructor 
• 
Type Converters 
• 
OnError annotated methods 
To use it with untrusted data, either, do NOT use any TypeNameHandling other than None or use a 
SerializationBinder6 to validate and whitelist the incoming types. 
FSPickler 
Project site: http://mbraceproject.github.io/FsPickler/ 
NuGet Dowloads: 97,245 