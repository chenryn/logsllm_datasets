## Systemtap examples, Identifying Contended User-Space Locks   
### 作者                                                                                                                                     
digoal                                                                                                                                       
### 日期                                                                                                                                                      
2013-11-21                                                                                                                              
### 标签                                                                                                                                   
PostgreSQL , Linux , systemtap , stap , dtrace , probe                                                                                                                                    
----                                                                                                                                             
## 背景   
```  
本文的例子 可用于判断程序性能问题是否由于futex锁冲突引起的.  
This section describes how to identify contended user-space locks throughout the system within a specific time period. The ability to identify contended user-space locks can help you investigate poor program performance that you suspect may be caused by futex contentions.  
Simply put, futex contention occurs when multiple processes are trying to access the same lock variable at the same time. This can result in a poor performance because the lock serializes execution; one process obtains the lock while the other processes must wait for the lock variable to become available again.  
修改成间隔输出后的脚本及注解如下 :   
[root@db-172-16-3-150 process]# cd /opt/systemtap/share/doc/systemtap/examples/process  
[root@db-172-16-3-150 process]# cat futexes.stp  
#! /usr/bin/env stap  
# This script tries to identify contended user-space locks by hooking  
# into the futex system call.  
global FUTEX_WAIT = 0 /*, FUTEX_WAKE = 1 */  
global FUTEX_PRIVATE_FLAG = 128 /* linux 2.6.22+ */  
global FUTEX_CLOCK_REALTIME = 256 /* linux 2.6.29+ */  
global lock_waits # long-lived stats on (tid,lock) blockage elapsed time  
global process_names # long-lived pid-to-execname mapping  
probe syscall.futex.return {    
  elapsed = gettimeofday_us() - @entry(gettimeofday_us())  
  // elapsed 调到第一条, 增加计算时间精度.  
  if (($op & ~(FUTEX_PRIVATE_FLAG|FUTEX_CLOCK_REALTIME)) != FUTEX_WAIT) next  
//  next 表示跳过这次probe handler.  
  process_names[pid()] = execname()  
  lock_waits[pid(), $uaddr]   
       #include   
       int futex(int *uaddr, int op, int val, const struct timespec *timeout,  
                 int *uaddr2, int val3);  
DESCRIPTION  
       The futex() system call provides a method for a program to wait for a value at a given address to change, and a  
       method to wake up anyone waiting on a particular address (while the addresses for the same memory  in  separate  
       processes  may  not  be equal, the kernel maps them internally so the same memory mapped in different locations  
       will correspond for futex() calls).  It is typically used to implement the contended case of a lock  in  shared  
       memory, as described in futex(7).  
       When  a  futex(7)  operation  did not finish uncontended in userspace, a call needs to be made to the kernel to  
       arbitrate.  Arbitration can either mean putting the calling process to sleep or, conversely, waking  a  waiting  
       process.  
       Callers  of  this  function are expected to adhere to the semantics as set out in futex(7).  As these semantics  
       involve writing non-portable assembly instructions, this in turn probably means that most users will in fact be  
       library authors and not general application developers.  
       The  uaddr argument needs to point to an aligned integer which stores the counter.  The operation to execute is  
       passed via the op argument, along with a value val.  
       Five operations are currently defined:  
       FUTEX_WAIT  
              This operation atomically verifies that the futex address uaddr still contains the value val, and sleeps  
              awaiting  FUTEX_WAKE  on this futex address.  If the timeout argument is non-NULL, its contents describe  
              the maximum duration of the wait, which is infinite  otherwise.   The  arguments  uaddr2  and  val3  are  
              ignored.  
              For  futex(7),  this  call  is executed if decrementing the count gave a negative value (indicating con-  
              tention), and will sleep until another process releases the futex and executes the FUTEX_WAKE operation.  
       FUTEX_WAKE  
              This operation wakes at most val processes waiting on this futex address (i.e., inside FUTEX_WAIT).  The  
              arguments timeout, uaddr2 and val3 are ignored.  
              For futex(7), this is executed if incrementing the count showed that there were waiters, once the  futex  
              value has been set to 1 (indicating that it is available).  
       FUTEX_FD (present up to and including Linux 2.6.25)  
              To  support  asynchronous wakeups, this operation associates a file descriptor with a futex.  If another  
              process executes a FUTEX_WAKE, the process will receive the signal number that was passed in  val.   The  
              calling  process  must  close the returned file descriptor after use.  The arguments timeout, uaddr2 and  
              val3 are ignored.  
              To prevent race conditions, the caller should test if the futex has been upped after FUTEX_FD returns.  
              Because it was inherently racy, FUTEX_FD has been removed from Linux 2.6.26 onwards.  
       FUTEX_REQUEUE (since Linux 2.5.70)  
              This operation was introduced in order to avoid a "thundering herd" effect when FUTEX_WAKE is  used  and  
              all  processes  woken  up need to acquire another futex.  This call wakes up val processes, and requeues  
              all other waiters on the futex at address uaddr2.  The arguments timeout and val3 are ignored.  
       FUTEX_CMP_REQUEUE (since Linux 2.6.7)  
              There was a race in the intended use of FUTEX_REQUEUE, so FUTEX_CMP_REQUEUE  was  introduced.   This  is  
              similar to FUTEX_REQUEUE, but first checks whether the location uaddr still contains the value val3.  If  
              not, the operation fails with the error EAGAIN.  The argument timeout is ignored.  
RETURN VALUE  
       Depending on which operation was executed, the returned value for a successful call can  have  differing  mean-  
       ings.  
       FUTEX_WAIT  
              Returns  0  if the process was woken by a FUTEX_WAKE call.  In case of timeout, the operation fails with  