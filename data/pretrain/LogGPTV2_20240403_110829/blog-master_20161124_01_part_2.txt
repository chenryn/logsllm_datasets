```
get_bit_array (varbit, int, int[]) returns int[]
  查询指定下标的BIT位为0|1的，返回下标，超出不统计 
  例如 get_bit('111110000011', 1, array[1,5,6,7,10,11])   返回array[1,10,11]
```
```
create or replace function get_bit_pos_arr(
  varbit, -- 需要计算的BIT
  int, -- 0/1
  int[] -- 数组，即下标
) returns int[] as $$
declare
  res int[] := $3;
  pos int ;
begin
  foreach pos in array $3
  loop
    if get_bit($1, pos) <> $2 then 
      res := array_remove(res, pos);
    end if;
  end loop;
  return res;
end;
$$ language plpgsql strict;
postgres=# select get_bit_pos_arr('111000111000', 0, array[0,1,2,3,4,5]);
 get_bit_pos_arr 
-----------------
 {3,4,5}
(1 row)
```
## 伪代码介绍
根据不同的业务需求，设计一套伪代码。   
1\. 广告主提供区域信息，时间段信息，返回可购买的广告位信息。   
```
select t1.menjin_id, t1.menjin_sitid, get_bit_count(t1.offset_date, 开始日期, 结束日期, 0) as 可购买天数
from 
  menjin_sale t1 join menjin t2 on (t2.id=t1.menjin_id) 
  where t2.loc = 指定数量 return;  
  else 
    计算下一个N多大（保证不会超出购买的总数）
end loop;
```
4\. 根据时间段，区域，统计已售卖的广告位，剩余的广告位。     
已售卖广告统计  
```
维度
维度内 总位置
维度内 已售卖位置个数
维度内 每个位置已售卖时长
使用RDS PostgreSQL功能
  get_bit_count(t1.offset_date, 开始日期, 结束日期, 1) 
```
剩余卖广告统计  
```
维度
维度内 总位置
维度内 每个位置的未售卖时长
使用RDS PostgreSQL功能
  get_bit_count(t1.offset_date, 开始日期, 结束日期, 0) 
```
5\. 退广告位，这个需求可以砍掉吧。     
```
-- 原子操作，不需要担心已设置为1的位置继续被设置
update menjin_sale set sale_window=(set_bit_array_rec(sale_window, 0, 0, array[100,101,102,103,....])).varbit_res, sale_window_arr=(set_bit_array_rec(sale_window, 0, 0, array[100,101,102,103,....])).arr_res   -- 以数组的方式指定需要退回的时间窗口（根据OFFSET_DATE换算成的BIT下标） 
where 
  id in (.....) -- 指定的门禁广告位ID  
  returning sale_window_arr  -- 返回成功退货的下标(即时间)   
;
-- 设置位置为100,101,102,103,...的BIT=0, 超出原varbit长度的部分设置为0(即未售卖状态).  
-- 插入流水
insert menjin_sale_log ... sale_window_arr(根据menjin_sale.offset_date和这个数组得到成功退货的日期) ...
```
5\. 新增门禁设备  
```
insert menjin
insert menjin_sale
```
6\. 添加或修改门禁设备的维护窗口  
```
update menjin_sale
insert menjin_sale_log
```
## 问题分析
1\. 抢购，例如多个广告主的购买位置冲突，虽然时间不冲突，但是属于同一行记录所以会有锁冲突。    
解决方法skip locked，以及自治事务。    
## 其他
1\. skip locked 需求，跳过已经被锁的记录，可以加快购买速度，例如松散式购买。    
自治事务，已更新的记录马上提交，减少长时间持锁，其他会话可以马上持有已释放的记录的锁，大大提高同一SITE的不同时段的购买并发。 
2\. returning * 需求，用于返回真实的购买情况，或者退货情况。然后再写入流水表。     
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")