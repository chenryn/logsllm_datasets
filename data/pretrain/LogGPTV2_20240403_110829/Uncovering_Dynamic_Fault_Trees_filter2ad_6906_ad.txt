claiming has no inﬂuence. This is even true if there would be
only a single (available) spare module, as the second power
unit which tries to claim a battery would fail, and therefore, the
whole system would fail. Thus in this case the resolution of the
spare race does not inﬂuence the DFT’s reliability. However, if
the system only fails once both radios fail, i.e., if SF would be
an AND-gate, then a single spare module may lead to different
outcomes, if either one of the antennas fails prior to the spare
race, or it the antennas have different failure distributions.
Note that with two available spare modules (and without the
assumption that the failure distributions of the spare modules
are identical) the outcome may also depend on the way the
spare race is resolved.
Spare races can alternatively be resolved randomly, e.g. by
imposing a uniform distribution over all alternatives [4]. This
choice is justiﬁed by the assumption that the spare modules
(in [4] these are BEs) typically have equal properties. This
is however not enforced. The practical downside of a random
resolution is that the DFT’s reliability is inﬂuenced by the used
distributions, a fact that is often ignored when presenting the
reliability results. This bias is not present when solving races
nondeterministically.
Spare races are preferably resolved deterministically.
If impossible, nondeterministic resolution is preferred.
E. Claiming versus activation
Conceptually, there are two important differences between
claiming a spare module (e.g., a BE) and activation of a BE:
(a) the moment a module is being used somewhere is not
necessarily the moment it is activated, and (b) components
not subject to exclusive claiming may be inactive or active.
Early and late claiming. In practice, various scenarios may
occur in which spare modules itself are complex trees which
may make use of spare parts. This can be modelled by nested
SPAREs,
i.e. SPAREs that have one or more SPAREs as
(indirect) child. Consider a SPARE that acts as spare module.
Can this SPARE claim one of its spare modules if it is not
itself activated yet? If yes, we call this early claiming; if not,
it is called late claiming. Under early claiming, a SPARE can
claim regardless of being activated or not. Inactive SPAREs
cannot claim under late claiming. Under early claiming it
is clear when a SPARE fails, as it can claim whenever it
wants. But for late claiming there are two possibilities: early
or late failing. With early failing, a late claiming SPARE
fails if all its primary and spare modules failed. Under this
regime, an inactive SPARE can thus fail (as a kind of “look
ahead” feature.) With late failing, this cannot happen; in this
case claiming only takes place upon activation. The following
example illustrates the differences.
Example 10: Consider the DFT in Fig. 14b, originating
from a communication system as in Ex. 9. Assume the radio R2
is in passive standby. Consider the failure of PA2. Under early
claiming, the power unit P2 directly claims some battery which
then cannot be claimed anymore by P1. Under late claiming,
P2 does not claim any of the batteries yet. Instead, it will only
claim a battery once R1 failed and R2 has subsequently been
activated. Using early failing, P2 fails—regardless of R2 being
activated or not—whenever either both B1 and B2 failed, or
one of them failed and the other was claimed by P1. Using
late failing, P2 fails only if it fails to claim something upon
activation of R2.
When to claim and when to fail do matter.
Which behaviour ﬁts best depends on the use case and can-
not be ﬁxed a priori in general. The different possible semantic
interpretations have more effects, however, the differences only
apply to DFTs with nested spares.
On one hand,
late claiming introduces failure due to
claiming or activation, respectively. With early claiming, a
SPARE only claims after a child has failed. It does not fail
to claim without a child failing at the same moment. With late
claiming and early failure, SPAREs may fail due to children
being claimed by other SPAREs. Moreover, claiming may
cause spare races, resulting in event propagation and claiming
becoming interdependent. Analogously, for late claiming with
late failure, SPAREs may fail upon activation. Thereby, activa-
tion may cause spare races; event propagation and activation
become interdependent. On the other hand, using late claiming
allows a uniform treatment of activation and claiming.
Example 11: Consider again Fig. 14b where PA2 failed.
Let subsequently be PS B1 B2 the failure order. Under late
claiming, P2 does not claim any battery (as it is not yet active)
when PS fails. P1 thus claims B1, and once B1 fails, it claims
B2. Under early failing, P2 now fails as none of its children
is available anymore. It thus fails before B2 does. Under late
failing, P1 fails once B2 fails, and R2 is activated. Now P2 is
activated. As it cannot claim any child, P2 fails after B2.
Early and late failing (claiming) are incomparable.
Spare modules revisited. We now focus on the precise extent
of spare modules and the consequences thereof w.r.t. claiming
and activation. If we restrict spare modules to BEs, activation
306
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:41:23 UTC from IEEE Xplore.  Restrictions apply. 
SF
D1
D2
SF
SF
D1
D2
D1
D2
P1
P2
Ps
P1
s1
P2
s2
Ps
P1
Ps
P2
s
(a) Exclusive power
generator.
(b) Permanently active
power generator.
(c) Work-around
Fig. 15. Different attempts of modelling a shared power generator.
and claiming coincide. To activate a component, it has to be
claimed. As claiming is exclusive, this leads to work-arounds
to model system behaviour with DFTs.
Example 12: Consider two medical devices, which fail
once their power supply fails. The power supply can be
replaced by a power generator, which is powerful enough to
drive both devices. The failure rate of the power generator rises
on using the generator, i.e. once a primary power supply fails.
Fig. 15 shows different DFTs for the system. In Fig. 15a, once
the primary power supply (P1 and P2, respectively) fails, the
corresponding device (D1, D2) claims the power generator
Ps. If the primary supply of the other unit fails, the DFT
assumes the system fails, as the usage of the power generator
is exclusive. Thus, the depicted DFT fails to model that the
power generator is able to power both devices. Consider now
Fig. 15b. Once one of the primary power supplies fails, the
device claims their “connection” to the power generator (s1
or s2). However, only the connection is activated. The power
generator Ps thus either stays active or passive, independent
of the failure of the primary power supplies. In Fig. 15c,
we give a work-around of these problems. The ﬁrst device
with a failed power supply claims and activates the power
generator. If the power supply of the other unit fails as well,
it claims and activates the connection, which fails with the
power generator. Depending on the exact failure propagation
behaviour, a failure of the power generator before the second
primary power supply fails might cause the power unit which
used the power generator before to claim the connection (s).
However, this connection would then directly fail.
A straightforward adaption would be given by propagating
activation in reverse direction through FDEPs. Upon activation
of the dependent event, the trigger of such FDEP is then
activated as well. Notice that reverse throughput is not always
appropriate, e.g. when modelling feedback loops. Without
using subtrees as spare modules, scenarios in which a module
is activated with a spare module but does not add to its failure
distribution are possible.
Until now, we have been rather imprecise about the ex-
act interpretation of spare modules. We recall the accurate
description depicted in Fig. 4b. There,
the spare modules
were independent, i.e. unconnected graphs. The independence
criterium leads to work-arounds which do not agree with the
hierarchical way DFTs should be created. However, dropping it
yields multiple open questions. We do not cover further details
here, as any extension towards this requires dedicated treatment
and is not present in any existing interpretation of DFTs.
Claiming and activation coincide only for simple cases.
Their precise semantics is intricate and open.
IV. DFTS: THE COOKS
In this section, we consider and compare several existing
formalisations of DFTs. The origin of DFTs, e.g.
in [27]
did not provide formal semantics. This has led to an unclear
meaning of speciﬁc fault trees, as outlined in [4]. Since this
initial formalisation, several others have been introduced which
are not fully compatible to each other. We discuss eight
different formalisations in greater depth. A tabular comparison
of speciﬁc features is given in Table I. We do neither include
the formalisations used in the Monte-Carlo approaches in [28],
[29] nor the deﬁnition in [3]. Attempts for using MCSs as
presented in [24] and in [25] are excluded as these are not
suitable to describe the behaviour of DFTs, as discussed in
Sect. III-A. Many techniques [30], [31], cf. also [3] are known
to speed-up the analysis. The correctness of such approaches
depends on the chosen semantics.
A. Fault tree automaton construction
A DFT semantics in terms of a fault
tree automaton
(FTA) is given in [4]. It deﬁnes an operational semantics-style
axiomatisation of DFTs, formalised in Z [32]. The semantics
builds upon the notion of a state of the DFT containing
information about the order in which elements have failed as
well as usage information for the SPAREs. Given a DFT in
state s, an occurrence e and the resulting child s(cid:5), the semantics
formalises whether s(cid:5) is a valid resulting state. Based on this,
a FTA can be constructed which describes the DFT by a non-
deterministic automaton. For analysis, the underlying CTMC
(Continuous-Time Markov Chain) is constructed by resolving
non-determinism by a uniform distribution, see Sect. III-D.
The reliability a DFT is then computed on the underlying
CTMC. The formalisation of PANDs is inclusive. FDEPs
cause immediate failure propagation to the dependent events.
Triggers are allowed to be subtrees, while the dependent events
are BEs. SPAREs require that their children are BEs. All such
BEs are required to have only FDEPs, SPAREs or SEQs as
parents. SEQs are included in the most general form. Spare
races are resolved nondeterministically. Note that no notion
of causality is included. Tool support for FTAs in Galileo is
presented in [33]; underlying algorithms are described in [34].
B. Reduction to Bayesian networks
A popular method to support quantitative analysis of (dy-
namic) FTs is based on Bayesian Networks (BN) [35]. We
consider the reduction to Discrete Time Bayesian Networks
(DTBN) in [36], Continuous Time Bayesian Networks (CTBN)
in [5], and Dynamic Bayesian Networks (DBN, [37]) in [6],
[23], [7]. The underlying idea is to introduce random variables
for each DFT event. Random variables representing gates are
conditionally dependent on the random variables representing
the children. Cycles introduced by FDEPs are disallowed, as
this would yield a cyclic BN. BEs are represented by multi-
valued variables, which encode not only whether the BE failed,
but also whether it is active. This enables the integration of
warm-standby. Tools for BN analysis are widely available. The
reduction to BNs allows several additional analyses on fault
307
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:41:23 UTC from IEEE Xplore.  Restrictions apply. 
trees, e.g. the most likely explanation analysis which is not
presented in other semantics.
Reduction to Discrete or Continuous Time BN. The re-
duction of a DFT to a DTBN as described in [36] is based on
discretising a time interval ]0, T ], where T denotes the mission
time, by slicing it into n possibly equidistant intervals. A
failure event occurs during an interval i ≤ n, instead of a time
point t ≤ T . Note that for limn→∞ the DTBN is equivalent
to the CTBN described in [5]. Obviously, the discretisation
introduces some inaccuracies. However, on the global level
presented here, we can ignore these inaccuracy and regard
the two formalisms as equivalent. Each gate is represented
by a random variable and conditional dependencies with all
children are given. For static gates, the conditional rules are
directly derived from the truth table of the gates. PANDs are
assumed to be inclusive. FDEPs directly cause the failure of
their dependent events. The triggers may be subtrees, while the
dependent events are assumed to be BEs. SPAREs only have
BEs as children. Sharing of spares is not considered. Moreover,
common cause failures for spare modules are not handled.
Reduction to Dynamic BN. The encoding to a DBN is also
based on discretising time. However, instead of slicing a time
interval, DBNs assume discrete time points for each event.
For each element in the DFT, a DBN is introduced, which
are merged into a single DBN afterwards. During the merging
process, the conditional probability tables are merged. For this
process, it is assumed that the conditional failure probability
equals the maximum conditional failure probability in the two
merged nodes, given any condition. This introduces an error
but yields smaller tables. For the PAND, an additional variable
is introduced which keeps track of the ordering. PANDs
are inclusive. FDEPs are extended to PDEPs. Failures are
instantaneously propagated. SPAREs assume BEs as children.
The behaviour in case of a spare race is not speciﬁed. SEQs
are not included. Tool support is provided by Radyban[7].
C. Reduction to Stochastic Well-formed Petri Nets
Stochastic Well-formed Coloured Nets (SWN) [38] are an
extension to Petri nets with exponential timing. The work
[39] reduces parametric fault trees to SWNs. Parametric fault
trees are SFTs with subtree replication aimed at yielding a
smaller state space by exploiting symmetry. This approach was
expanded to DFTs in [8]. Although the work also considers
repairs, this is outside the scope of this work. For each DFT
element, a small Petri net is given, which has input places
and an output place, i.e. each DFT element operates based
on the presence of tokens in its input places. A failure of the
gate causes a transition to ﬁre which then places tokens in
any predecessor nets of the DFT. To compose a SWN for a
DFT with multiple elements, the inputs and outputs are merged
according to the structure of the DFT.
Remark: The semantics of a SWN as described in the
references cited in [8] allow only one transition to ﬁre at a
time. Therefore, we assume that only one transition ﬁres at
once. SWNs allow for priority assignments to select which
transition ﬁres when multiple transitions are enabled. The
presented semantics for DFTs however do not mention this.
failing is not simultaneously processed by the parents. PANDs
are inclusive, and FDEPs do not distinguish different depen-
dent events. Both triggers and dependent events are assumed
to be BEs. SPAREs assume BEs as children. Any sharing is
implicitly assumed to be amongst symmetric SPAREs using
identical BEs as spare elements. Thus, non-determinism during
claiming is hidden. Warm and cold standby are discussed,
but their interpretation remains unclear. SEQs are presented
in a general fashion, but
their interpretation when putting
restrictions on gates is different. Instead of invalidating a
sequence, the failures are delayed until the more-to-the-left
children of the SEQ have failed.
D. Reduction to GSPN
A reduction of DFTs to Generalised Stochastic Petri Nets
(GSPN) [40] is given in [9]. The overall idea is to use a
graph transformation for an element-wise reduction to a GSPN.
This GSPN can then be reduced to a CTMC using existing
algorithms [41]. In a ﬁrst step, a place for each vertex is added,
where a marking on such a place means that the element
has failed. Each gate is then replaced by a subnet which
places a token in its output place depending on markings in
the input places, thus, gates fail ordered. The static gates are
trivially deﬁned. For PANDs, an extra place checks whether the
ordering is respected. The ordering is assumed to be inclusive.
FDEPs mark all dependent events failed, in a non-deterministic
ordering. It remains unclear how this non-determinism is
resolved for the reduction to a CTMC (most probably by a
uniform distribution). Warm spares are supported, but neither
spare pool sharing nor non-singleton spare pools are handled.
The SEQ requires all children to be BEs.
E. Reduction to a set of IOIMCs
Input/Output-Interactive Markov Chains (IOIMCs) extend
IMCs [42] by distinguishing inputs and outputs. This model is
amenable to a compositional design of Markovian processes.
The overall idea is to deﬁne small IOIMCs for each DFT ele-
ment and to compose these IOIMCs to obtain a representation
for the entire DFT [14], [10], [11]. Gate inputs are encoded
as input-transitions while failure propagations are modelled as
output-transitions. The behaviour of the entire DFT is given by
the parallel composition of the individual IOIMCs. Moreover,
SPAREs distribute claiming and activation information via ex-
tra transitions. It is important to notice that only one transition
at a time can ﬁre in IOIMCs. Therefore, all elements fail in