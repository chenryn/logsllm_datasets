     21 | [81,84]  |  32248 | 1.09 %  | *  
     22 | [85,88]  |  28587 | 0.96 %  | *  
     23 | [89,92]  |  25010 | 0.84 %  | *  
     24 | [93,96]  |  22546 | 0.76 %  | *  
     25 | [97,100] |  19815 | 0.67 %  | *  
(25 rows)  
```  
参数说明:   
threshold > 0  
(threshold越大，随机值接近min的概率越大，反之，threshold越小，随机值接近max的概率越大)  
threshold 越接近0，则越趋于随机分布，而不是指数分布。  
### 长尾分布  
```  
truncate tbl;  
\set id random_zipfian(1, 100, 1.001)  
insert into tbl values (:id, 'test');  
```  
概率分布情况:   
```  
 bucket |  range   |  freq  |  ratio  |         bar            
--------+----------+--------+---------+----------------------  
      1 | [1,4]    | 911700 | 40.21 % | ********************  
      2 | [5,8]    | 276736 | 12.21 % | ******  
      3 | [9,12]   | 168646 | 7.44 %  | ****  
      4 | [13,16]  | 121354 | 5.35 %  | ***  
      5 | [17,20]  |  94427 | 4.16 %  | **  
      6 | [21,24]  |  78154 | 3.45 %  | **  
      7 | [25,28]  |  66173 | 2.92 %  | *  
      8 | [29,32]  |  57071 | 2.52 %  | *  
      9 | [33,36]  |  50582 | 2.23 %  | *  
     10 | [37,40]  |  45865 | 2.02 %  | *  
     11 | [41,44]  |  40835 | 1.80 %  | *  
     12 | [45,48]  |  37525 | 1.66 %  | *  
     13 | [49,52]  |  34916 | 1.54 %  | *  
     14 | [53,56]  |  32284 | 1.42 %  | *  
     15 | [57,60]  |  29811 | 1.31 %  | *  
     16 | [61,64]  |  28028 | 1.24 %  | *  
     17 | [65,68]  |  26214 | 1.16 %  | *  
     18 | [69,72]  |  24556 | 1.08 %  | *  
     19 | [73,76]  |  23285 | 1.03 %  | *  
     20 | [77,80]  |  22211 | 0.98 %  |   
     21 | [81,84]  |  21089 | 0.93 %  |   
     22 | [85,88]  |  20134 | 0.89 %  |   
     23 | [89,92]  |  19093 | 0.84 %  |   
     24 | [93,96]  |  18686 | 0.82 %  |   
     25 | [97,100] |  17964 | 0.79 %  |   
(25 rows)  
```  
参数说明:   
threshold 取值范围: [1.001, 1000]  
k 的概率为 k+1 的 ((k+1)/k)^threshold 次方      
threshold越大, 概率曲线越陡峭, 头部值(begin值)出现概率越高. 递弱代偿线越陡峭.    
For example, random_zipfian(1, ..., 2.5) produces the value  
1 about (2/1)^2.5 = 5.66 times more frequently than 2,  
2 about (3/2)^2.5 = 2.76 times more frequently than 3,  
and so on.  
今天只讲了关于随机数据生成的其中一种方法, PG里面生成随机数据还有大把的方法, 包括自己写函数或inline code, 结合内置的srf函数等(如generate_series).   
海量数据的生成方法、各处场景的压测, 请参考末尾文章.   
## 参考  
pgbench  
https://www.postgresql.org/docs/devel/pgbench.html  
##### 201711/20171107_48.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 47 - (OLTP多模优化) 空间应用 - 高并发空间位置更新、多属性KNN搜索并测（含空间索引）末端配送、新零售类项目》](../201711/20171107_48.md)  
##### 201711/20171107_47.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 46 - (OLTP) 大json字段的高并发更新》](../201711/20171107_47.md)  
##### 201711/20171107_46.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 45 - (OLTP) 数据量与性能的线性关系(10亿+无衰减), 暨单表多大需要分区》](../201711/20171107_46.md)  
##### 201711/20171107_45.md   [《[未完待续] HTAP数据库 PostgreSQL 场景与性能测试之 44 - (OLTP) 空间应用 - 空间包含查询(输入多边形 包含 表内空间对象)》](../201711/20171107_45.md)  
##### 201711/20171107_44.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 43 - (OLTP+OLAP) unlogged table 含索引多表批量写入》](../201711/20171107_44.md)  
##### 201711/20171107_43.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 42 - (OLTP+OLAP) unlogged table 不含索引多表批量写入》](../201711/20171107_43.md)  
##### 201711/20171107_42.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 41 - (OLTP+OLAP) 含索引多表批量写入》](../201711/20171107_42.md)  
##### 201711/20171107_41.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 40 - (OLTP+OLAP) 不含索引多表批量写入》](../201711/20171107_41.md)  
##### 201711/20171107_40.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 39 - (OLTP+OLAP) logged & unlogged table 含索引多表单点写入》](../201711/20171107_40.md)  
##### 201711/20171107_39.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 38 - (OLTP+OLAP) logged & unlogged table 不含索引多表单点写入》](../201711/20171107_39.md)  
##### 201711/20171107_38.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 37 - (OLTP+OLAP) 含索引单表批量写入》](../201711/20171107_38.md)  
##### 201711/20171107_37.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 36 - (OLTP+OLAP) 不含索引单表批量写入》](../201711/20171107_37.md)  
##### 201711/20171107_36.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 35 - (OLTP+OLAP) 含索引单表单点写入》](../201711/20171107_36.md)  
##### 201711/20171107_35.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 34 - (OLTP+OLAP) 不含索引单表单点写入》](../201711/20171107_35.md)  
##### 201711/20171107_34.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 33 - (OLAP) 物联网 - 线性字段区间实时统计》](../201711/20171107_34.md)  
##### 201711/20171107_33.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 32 - (OLTP) 高吞吐数据进出(堆存、行扫、无需索引) - 阅后即焚(JSON + 函数流式计算)》](../201711/20171107_33.md)  
##### 201711/20171107_32.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 31 - (OLTP) 高吞吐数据进出(堆存、行扫、无需索引) - 阅后即焚(读写大吞吐并测)》](../201711/20171107_32.md)  
##### 201711/20171107_31.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 30 - (OLTP) 秒杀 - 高并发单点更新》](../201711/20171107_31.md)  
##### 201711/20171107_30.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 29 - (OLTP) 空间应用 - 高并发空间位置更新（含空间索引）》](../201711/20171107_30.md)  
##### 201711/20171107_29.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 28 - (OLTP) 高并发点更新》](../201711/20171107_29.md)  
##### 201711/20171107_28.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 27 - (OLTP) 物联网 - FEED日志, 流式处理 与 阅后即焚 (CTE)》](../201711/20171107_28.md)  
##### 201711/20171107_27.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 26 - (OLTP) NOT IN、NOT EXISTS 查询》](../201711/20171107_27.md)  
##### 201711/20171107_26.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 25 - (OLTP) IN , EXISTS 查询》](../201711/20171107_26.md)  
##### 201711/20171107_25.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 24 - (OLTP) 物联网 - 时序数据并发写入(含时序索引BRIN)》](../201711/20171107_25.md)  
##### 201711/20171107_24.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 23 - (OLAP) 并行计算》](../201711/20171107_24.md)  
##### 201711/20171107_23.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 22 - (OLTP) merge insert|upsert|insert on conflict|合并写入》](../201711/20171107_23.md)  
##### 201711/20171107_22.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 21 - (OLTP+OLAP) 排序、建索引》](../201711/20171107_22.md)  
##### 201711/20171107_21.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 20 - (OLAP) 用户画像圈人场景 - 多个字段任意组合条件筛选与透视》](../201711/20171107_21.md)  
##### 201711/20171107_20.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 19 - (OLAP) 用户画像圈人场景 - 数组相交查询与聚合》](../201711/20171107_20.md)  
##### 201711/20171107_19.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 18 - (OLAP) 用户画像圈人场景 - 数组包含查询与聚合》](../201711/20171107_19.md)  
##### 201711/20171107_18.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 17 - (OLTP) 数组相似查询》](../201711/20171107_18.md)  
##### 201711/20171107_17.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 16 - (OLTP) 文本特征向量 - 相似特征(海明...)查询》](../201711/20171107_17.md)  
##### 201711/20171107_16.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 15 - (OLTP) 物联网 - 查询一个时序区间的数据》](../201711/20171107_16.md)  
##### 201711/20171107_15.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 14 - (OLTP) 字符串搜索 - 全文检索》](../201711/20171107_15.md)  
##### 201711/20171107_14.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 13 - (OLTP) 字符串搜索 - 相似查询》](../201711/20171107_14.md)  
##### 201711/20171107_13.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 12 - (OLTP) 字符串搜索 - 前后模糊查询》](../201711/20171107_13.md)  
##### 201711/20171107_12.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 11 - (OLTP) 字符串搜索 - 后缀查询》](../201711/20171107_12.md)  
##### 201711/20171107_11.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 10 - (OLTP) 字符串搜索 - 前缀查询》](../201711/20171107_11.md)  
##### 201711/20171107_10.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 9 - (OLTP) 字符串模糊查询 - 含索引实时写入》](../201711/20171107_10.md)  
##### 201711/20171107_09.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 8 - (OLTP) 多值类型(数组)含索引实时写入》](../201711/20171107_09.md)  
##### 201711/20171107_08.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 7 - (OLTP) 全文检索 - 含索引实时写入》](../201711/20171107_08.md)  
##### 201711/20171107_07.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 6 - (OLTP) 空间应用 - KNN查询（搜索附近对象，由近到远排序输出）》](../201711/20171107_07.md)  
##### 201711/20171107_06.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 5 - (OLTP) 空间应用 - 空间包含查询(表内多边形 包含 输入空间对象)》](../201711/20171107_06.md)  
##### 201711/20171107_05.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 4 - (OLAP) 大表OUTER JOIN统计查询》](../201711/20171107_05.md)  
##### 201711/20171107_49.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 3.1 - (OLAP) 大表JOIN统计查询-10亿 join 1亿 agg》](../201711/20171107_49.md)  
##### 201711/20171107_04.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 3 - (OLAP) 大表JOIN统计查询》](../201711/20171107_04.md)  
##### 201711/20171107_03.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 2 - (OLTP) 多表JOIN》](../201711/20171107_03.md)  
##### 201711/20171107_02.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 1 - (OLTP) 点查》](../201711/20171107_02.md)  
##### 202001/20200103_01.md   [《PostgreSQL+MySQL 联合解决方案 - 第3课视频 - 如何压测PG数据库、如何瞬间构造海量测试数据》](../202001/20200103_01.md)  
##### 201711/20171121_01.md   [《PostgreSQL 如何快速构建 海量 逼真 测试数据》](../201711/20171121_01.md)  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")