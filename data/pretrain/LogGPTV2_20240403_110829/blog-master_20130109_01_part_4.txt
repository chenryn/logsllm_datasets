digoal=> select pg_column_size(col3) from test limit 1;    
 pg_column_size     
----------------    
          11031    
(1 row)    
```    
单条记录达到11KB. 已经超过HEAP PAGE的8KB, 必然是存储在 TOAST中的.    
```    
digoal=> select reltoastrelid from pg_class where relname='test';    
 reltoastrelid     
---------------    
        108690    
(1 row)    
digoal=> select pg_relation_size(108690::regclass);    
 pg_relation_size     
------------------    
           139264    
(1 row)    
digoal=> truncate test ;    
TRUNCATE TABLE    
digoal=> insert into test (id,col1,col2,col3,col4) select     
digoal->    generate_series(1,100000),     
digoal->    repeat(md5(clock_timestamp()::text), 10),     
digoal->    repeat(md5(clock_timestamp()::text), 10),     
digoal->    repeat(md5(clock_timestamp()::text), 30000),     
digoal->    clock_timestamp();    
INSERT 0 100000    
ocz@db-172-16-3-150-> pgbench -M prepared -f ./t.sql -n -r -c 8 -j 4 -T 60 -h 127.0.0.1 -U digoal digoal    
transaction type: Custom query    
scaling factor: 1    
query mode: prepared    
number of clients: 8    
number of threads: 4    
duration: 60 s    
number of transactions actually processed: 126582    
tps = 2109.062220 (including connections establishing)    
tps = 2109.413805 (excluding connections establishing)    
statement latencies in milliseconds:    
        0.003987        \setrandom id 1 100000    
        3.783014        update test set col1=repeat(md5(clock_timestamp()::text), 10), col2=repeat(md5(clock_timestamp()::text), 10) where id=:id;    
digoal=> drop index idx_test_col3;    
DROP INDEX    
ocz@db-172-16-3-150-> pgbench -M prepared -f ./t.sql -n -r -c 8 -j 4 -T 60 -h 127.0.0.1 -U digoal digoal    
transaction type: Custom query    
scaling factor: 1    
query mode: prepared    
number of clients: 8    
number of threads: 4    
duration: 60 s    
number of transactions actually processed: 1436122    
tps = 23934.814969 (including connections establishing)    
tps = 23938.109376 (excluding connections establishing)    
statement latencies in milliseconds:    
        0.002752        \setrandom id 1 100000    
        0.328780        update test set col1=repeat(md5(clock_timestamp()::text), 10), col2=repeat(md5(clock_timestamp()::text), 10) where id=:id;    
```    
8KB的BLOCKSIZE默认阈值大概是2KB左右, 如何修改字段存储到TOAST的阈值, 参考如下 :     
[《HOW to Change PostgreSQL's TOAST_TUPLE_THRESHOLD》](../201301/20130110_01.md)     
### toast改小，尽量切片存储，带来的好处是减少不更新的可变字段带来的IO放大  
1、长字段存在HEAP BLOCK时，更新性能差，IO放大效果明显。  
```  
create table test(id int primary key, c1 text);  
insert into test select id, repeat(md5(clock_timestamp()::text), 10000) from generate_series(1,1000) t(id);  
```  
```  
vi test.sql  
\set id random(1,1000)  
update test set id=:id where id=:id;  
```  
pgbench -M prepared -n -r -P 1 -f ./test.sql -c 32 -j 32 -T 100  
```  
progress: 1.0 s, 125435.6 tps, lat 0.250 ms stddev 0.438  
progress: 2.0 s, 130494.6 tps, lat 0.245 ms stddev 0.419  
progress: 3.0 s, 120103.6 tps, lat 0.266 ms stddev 1.848  
progress: 4.0 s, 143489.7 tps, lat 0.223 ms stddev 0.120  
progress: 5.0 s, 153019.4 tps, lat 0.209 ms stddev 0.095  
progress: 6.0 s, 154066.3 tps, lat 0.208 ms stddev 0.095  
progress: 7.0 s, 144861.8 tps, lat 0.221 ms stddev 0.280  
progress: 8.0 s, 77655.0 tps, lat 0.412 ms stddev 2.466  
progress: 9.0 s, 66832.0 tps, lat 0.461 ms stddev 2.815  
progress: 10.0 s, 67559.0 tps, lat 0.483 ms stddev 3.153  
```  
```  
 24  17  58   1   0   0|   0   628M| 198B  366B|   0     0 | 512k  930k  
 22  16  61   1   0   0|   0   617M| 108B  252B|   0     0 | 507k  934k  
 26  17  56   1   0   0|   0   483M| 108B  324B|   0     0 | 566k 1044k  
 27  17  55   1   0   0|4096B  483M| 108B  152B|   0     0 | 566k 1048k  
 26  17  56   1   0   0|4096B  483M| 108B  340B|   0     0 | 552k 1013k  
 18  13  69   1   0   0|   0   598M| 150B  414B|   0     0 | 361k  630k  
 13  10  76   1   0   0|4096B  609M| 144B  462B|   0     0 | 256k  432k  
```  
2、当变长字段放在TOAST时，如果不更新它，实际上是没什么影响的，没有IO放大，性能好。  
```  
create table test(id int primary key, c1 text, c2 text, c3 text, c4 text, c5 text);  
insert into test select id,   
repeat(md5(clock_timestamp()::text), 30000),   
repeat(md5(clock_timestamp()::text), 30000),   
repeat(md5(clock_timestamp()::text), 30000),   
repeat(md5(clock_timestamp()::text), 30000),   
repeat(md5(clock_timestamp()::text), 30000)   
from generate_series(1,1000) t(id);  
```  
```  
progress: 1.0 s, 195992.1 tps, lat 0.160 ms stddev 0.070  
progress: 2.0 s, 204398.9 tps, lat 0.157 ms stddev 0.087  
progress: 3.0 s, 203810.0 tps, lat 0.157 ms stddev 0.063  
progress: 4.0 s, 206567.5 tps, lat 0.155 ms stddev 0.063  
progress: 5.0 s, 211927.1 tps, lat 0.151 ms stddev 0.056  
```  
```  
 28  18  54   0   0   0|   0   126M|  54B  276B|   0     0 | 671k 1242k  
 28  18  54   0   0   0|   0   102M| 144B  322B|   0     0 | 668k 1235k  
 28  18  54   0   0   0|   0   102M|  54B  324B|   0     0 | 665k 1229k  
 28  18  54   0   0   0|   0   118M|  54B  268B|   0     0 | 665k 1229k  
 29  18  53   0   0   0|   0   104M|  54B  308B|   0     0 | 684k 1266k  
```  
3、当TOAST内的内容被更新时，才会影响性能。   
```  
vi test.sql  
\set id random(1,1000)  
update test set id=:id,c1=c2 where id=:id;  
```  
```  
pgbench -M prepared -n -r -P 1 -f ./test.sql -c 32 -j 32 -T 100  
progress: 1.0 s, 18838.8 tps, lat 1.663 ms stddev 1.745  
progress: 2.0 s, 18938.1 tps, lat 1.688 ms stddev 1.248  
progress: 3.0 s, 18339.9 tps, lat 1.745 ms stddev 1.936  
progress: 4.0 s, 19444.1 tps, lat 1.646 ms stddev 1.777  
progress: 5.0 s, 19555.0 tps, lat 1.638 ms stddev 1.762  
progress: 6.0 s, 19198.0 tps, lat 1.667 ms stddev 1.937  
progress: 7.0 s, 19275.1 tps, lat 1.660 ms stddev 1.822  
progress: 8.0 s, 18469.6 tps, lat 1.727 ms stddev 2.888  
```  
```  
  7   9  82   1   0   0|   0   808M|1676B 2100B|   0     0 | 332k  557k  
  7   9  83   1   0   0|   0   739M|2014B 2284B|   0     0 | 325k  544k  
  7   9  83   1   0   0|   0   637M|1720B 1990B|   0     0 | 317k  531k  
  7   9  83   1   0   0|  12k  692M|3386B 3656B|   0     0 | 326k  550k  
  7   8  84   1   0   0|   0   555M|2602B 2872B|   0     0 | 306k  513k  
  7   9  83   1   0   0|   0   670M|2014B 2284B|   0     0 | 313k  522k  
```  
实际上TOAST的更新性能比HEAP MAIN要好。  
## 其他  
encode, decode, convert_from 例子 :     
```    
postgres=# select convert_from(decode('你好', 'escape'), 'UTF8'::name);    
 convert_from     
--------------    
 你好    
(1 row)    
postgres=# select decode(clock_timestamp()::text, 'escape');    
                            decode                                
--------------------------------------------------------------    
 \x323031332d30312d31352030373a34353a30382e3430303737322b3038    
(1 row)    
postgres=# select encode(decode(array[1,2,3,4,5]::text, 'escape'), 'escape');    
   encode        
-------------    
 {1,2,3,4,5}    
(1 row)    
```    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")