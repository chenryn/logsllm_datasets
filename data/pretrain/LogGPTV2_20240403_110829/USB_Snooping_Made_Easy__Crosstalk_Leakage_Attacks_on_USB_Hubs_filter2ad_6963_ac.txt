### Decoding Information from Data Line Crosstalk Leakage

To decode the information available through data line crosstalk leakage, we follow a series of carefully chosen steps. These steps are designed to be implementable on inexpensive and simple hardware that an adversary can easily conceal. For more details, see Section 6.

#### Step 1: Leakage Trace Cleanup
As shown in Figure 12 (top, black), the data line crosstalk leakage trace contains high-frequency noise, which makes it difficult to detect bus transitions. To remove this high-frequency noise, we applied a triangular window moving average filter. This process is illustrated in Figure 12 (top, blue), where the high-frequency spikes in the leakage trace have been removed.

#### Step 2: Transition Enhancement
To precisely locate the bus transitions in the cleaned-up trace, we calculated its derivative. Specifically, we approximated the derivative by subtracting each sample at location \( t \) from the sample at location \( t - 10 \). This operation simplifies the detection of rising and falling edges, as seen in Figure 12 (middle, red). Rising edges appear as local maxima, and falling edges appear as local minima.

#### Step 3: Edge Detection
In NRZI encoding, both rising and falling edges represent a level toggle in the physical layer, corresponding to the transmission of a zero bit. To accurately decode the data line crosstalk leakage, we first compute the absolute value of the trace from Step 2, as shown in Figure 12 (bottom, black). Next, we apply a simple thresholding technique to locate the edges. A fixed threshold of 0.048 V was used, as depicted in Figure 12 (bottom, blue). Each time the trace crosses this threshold from low to high, we consider it a transition in the physical layer, as indicated in Figure 12 (bottom, green).

#### Step 4: NRZI Decoding
The USB protocol uses NRZI encoding, where a logical one is represented by maintaining a fixed signal level, and a logical zero is represented by a transition between signal levels. To decode the signal, we use the timing of physical layer transitions to identify zeroes. The intervals between transitions help us determine the number of ones. Finally, to account for bit stuffing, we remove any logical zero that appears after six consecutive logical ones.

### Observing USB 2.0 Data Line Crosstalk Leakage

Figure 10 illustrates the data line crosstalk leakage while transferring data from a USB drive to a host PC. The correlation between the actual data (yellow, top) and the observed data line crosstalk leakage (blue, bottom) is evident. Note that while USB downstream traffic (from the PC host to the USB devices) is broadcasted, USB upstream traffic (such as file transfers from the USB drive to the PC host) is not. Therefore, it should not be possible to observe the data being transferred from the USB drive to the host PC.

### Experimental Setup

We used an Agilent MSO6104A oscilloscope (1GHz, 4Gsps) with Agilent 10073C 500MHz passive probes to monitor the communication between the peripheral and the USB host. We also monitored either the data line or power line crosstalk leakage.

### Attacking Various USB Devices

#### USB Keyboards
Using data line crosstalk leakage, we successfully extracted keyboard presses from USB keyboards, as shown in Figure 15. Similar results were obtained using power line crosstalk leakage. Even with additional USB devices connected, such as a mouse and a headset, we were able to extract the keyboard presses.

#### USB Magnetic Card Readers
We also successfully extracted credit card data from a USB magnetic card reader (MagTek 21040140) using data line crosstalk leakage from an internal USB hub of a Lenovo Ideapad 100s laptop. The experimental setup and extracted data are shown in Figures 16 and 17, respectively.

#### USB Headsets and Fingerprint Readers
We captured signals corresponding to the microphone in USB headsets and decoded the USB communication of a USB fingerprint reader during a finger swipe, as shown in Figures 18 and 19. While we did not attempt to decode the voice communication or fingerprint data due to proprietary formats, we recovered the USB traffic.

#### USB Storage
We mounted crosstalk leakage attacks on USB 1.1 drives connected to both internal and external USB 2.0 hubs. We successfully recovered the communication during a file transfer from a USB 1.1 drive to the PC host using data line crosstalk leakage, as shown in Figure 20.

### Exploiting Crosstalk Leakage via Malicious Peripherals

#### Design Overview
We constructed a malicious peripheral device (spy probe) to extract USB keyboard presses from data line crosstalk leakage and exfiltrate the key presses via Bluetooth. The spy probe is built from an Alinx AX309 FPGA development board, an AN108 ADC board, and a WeBee Bluetooth Low Energy (BLE) Board. All components are concealed in a USB ghost lamp, as shown in Figure 21.

#### ADC Board
The ADC board is connected to a male A-type USB plug, which is plugged into the leaky USB hub to monitor the data line crosstalk leakage. The ADC's input is connected to the D+ USB line, and the voltage is monitored relative to the GND line. The 5V power line is used to power the probe, and a battery pack is included for cases where the 5V power is not available.

#### Software
To decode the data line crosstalk leakage, we implemented a highly optimized version of the signal processing approach described in Section 4.2 on the FPGA board in Verilog HDL. After decoding, the spy probe filters out USB packets corresponding to keyboard presses and exfiltrates them via a Bluetooth connection.

#### Attack Performance
We evaluated the spy probe's ability to recognize and exfiltrate USB keyboard presses. Using a Microsoft SurfacePro laptop as the USB host, we connected the keyboard, spy probe, mouse, and USB drive via a 4-port USB hub. The spy probe achieved a 97% key recognition rate under various typing speeds, as shown in Figure 24.