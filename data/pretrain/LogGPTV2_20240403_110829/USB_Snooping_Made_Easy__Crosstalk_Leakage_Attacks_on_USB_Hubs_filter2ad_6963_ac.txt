to decode the information available via data line crosstalk
leakage. As Figure 11 shows, there is a clear correlation
between the data line crosstalk leakage (green, bottom)
and the actual USB communication (blue, top). How-
ever, the transition between signal levels in the leakage
trace are less clear than in the communication trace. In
order to automatically and reliably decode the informa-
tion present in the data line crosstalk leakage trace we
have performed the steps outlined below. These steps
are carefully chosen to allow implementation on cheap
and simple hardware that an adversary can conceal eas-
ily. See Section 6.
Step 1: Leakage Trace Cleanup. As can be seen
in Figure 12(top, black), the data line crosstalk leak-
age trace contains high frequency noise, making detect-
ing the bus transitions difﬁcult. In order to remove this
high frequency noise, we have applied triangular window
Figure 10: USB 2.0 data line crosstalk leakage from a
hub of the same make as the one used in Figure 6. The
yellow (top) trace shoes the USB trafﬁc and the blue (bot-
tom) trace shows the observed data line crosstalk leakage
measured from an adjacent downstream port (manually
aligned with the yellow trace by subtracting 4ns).
tween the USB drive and the PC host while transferring
ﬁles from the USB drive to the PC host. Finally, we used
an Agilent N2752A differential probe in order to moni-
tor the voltage between the D+ and D- lines on one of the
hub’s other downstream ports.
Observing USB 2.0 Data Line Crosstalk Leakage.
Figure 10 shows that resulting data line crosstalk leak-
age while transferring data from the USB drive to the
host PC. The correlation between the actual data (yel-
low, top) and the observed data line crosstalk leakage
(blue, bottom) can clearly be seen. We recall that while
USB downstream trafﬁc (from the PC host to the USB
devices) is broadcasted, USB upstream trafﬁc (such as
transferring ﬁles from the USB drive to the PC host) is
not broadcasted. Thus, it should not be possible to ob-
serve the data being transferred from the USB drive to
the host PC.
4 Leakage Decoding
4.1 Decoding USB Trafﬁc
Physical Layer.
As mentioned in Section 2, both
USB 1.x and USB 2.0 use a two-wire differential com-
munication bus, whose wires we denote by D+ and D-.
Theoretically, the voltage of D+ relative to D- should be
one of two values, either ‘high’ (3.3V for USB 1.x and
300mV for USB 2.0) or ‘low’ (−3.3V for USB 1.x and
-300mV for USB 2.0).
Non Return to Zero Inverted (NRZI) Encoding. Both
USB 1.x and USB 2.0 use NRZI encoding in order to
transmit individual bits across the communication bus.
One bit is transmitted in each clock cycles, with zeroes
represented at the physical layer as transitions between
the low and the high voltage levels whereas ones are
represented as a lack of transition, i.e. keeping the volt-
age constant across the clock cycle. To maintain clock
synchronization, the USB bus avoids long periods of no
1152    26th USENIX Security Symposium
USENIX Association
Figure 11: USB communication (blue, top) and data line crosstalk leakage (green, bottom) of a USB frame with a
keyboard attached to the USB hub. The data line crosstalk leakage was captured using the hub from Figure 6.
moving average ﬁlter. This removed the high frequency
spikes in the leakage trace, see Figure 12(top, blue).
Step 2: Transition Enhancement. To precisely locate
the bus transitions in the trace we produced at Step 1,
we calculated its derivative. That is, we want to ﬁnd
V(cid:48) = ∂V
∂t where V denote the trace produced by Step 1
above. Simplifying this operation, we approximated the
derivative by subtracting from each sample at some lo-
cation t in V the sample present at location t − 10 in V .2
Figure 12(middle) is the result of this derivative approx-
imation. Note that the rising edges appear as local max-
ima and the falling edges appears as local minima.
Step 3: Edge Detection. As mentioned in Section 4.1,
in the NRZI encoding the rising and the falling edges
are equivalent. Both represent a level toggle in physical
layer, which corresponds to a transmission of a zero bit.
Thus, we ﬁrst compute the absolute value of the trace we
produced in Step 2, see Figure 12(black, bottom). Next,
in order to decode the data line crosstalk leakage accu-
rately, we need to know the exact times of the trace’s
edges. A naive approach would be to attempt to locate
all the local maxima of Figure 12(black, bottom). How-
ever this approach is unreliable as it might be distracted
by any noise, such as the glitches between samples 200
and 250 in Figure 12(black, bottom).
Instead, we apply a simple thresholding to locate the
2Note that (Vt −Vt−n)/n is a discrete approximation of the deriva-
tive at point t. In our case setting n = 10 seems to produce the best
results. Note further that because n is constant, discarding the division
does not affect the overall shape of the trace.
edges. As Figure 12(blue, bottom) shows, we used a
ﬁxed threshold of 0.048 V.3 Next, every time the trace
(black) crosses the threshold low to high we consider
this to be a transition of the physical layer. See Fig-
ure 12(green, bottom).
Step 4: NRZI Decoding. As mentioned in Section 4.1,
in the USB protocol uses NRZI encoding. More speciﬁ-
cally, the value of a transmitted bit is indicated by main-
taining a ﬁxed signal level for a logical one and a transi-
tion between signal levels for a logical zero. To decode
the signal we use the timing of physical layer transitions
to ﬁnd zeroes (Figure 12(green, bottom)). Next we use
the length of the intervals between transitions to ﬁnd the
number of ones. Finally, to account for bit stufﬁng, we
remove any logical zero appearing after six consecutive
logical ones.
4.3 Decoding Power Line Crosstalk Leak-
age
We now turn to the signal processing techniques we
use to decode the information available via power line
crosstalk leakage. As can be seen from the red trace
in Figure 13, every transition between the high and low
levels on the USB communication lines creates a short,
sharp glitch on the USB power lines. Thus, to decode
the information present in the power line crosstalk leak-
age we performed the following.
As in Step 2 of Section 4.2, we approximated the ﬁrst
3This value was set empirically and may vary between different
leaky hubs.
USENIX Association
26th USENIX Security Symposium    1153
-0.15-0.050.050.150.250.35-4-2024USB waveform-0.15-0.050.050.150.250.35-4-3-2-101234USB IN Packet11111111111111111111111111111111111111000000000000000000000000000000000000000000000000USB PayloadSYNCPIDADDRENDPCRC50x08 “E”leakage, we have successfully extracted keyboard
presses from USB keyboards, see Figure 15. Similar re-
sults were obtained using power line crosstalk leakage.
Finally, notice that in this case, the USB hub had two
additional USB devices connected to it (a USB mouse
and a USB headset) in additional to the USB keyboard.
Nonetheless, we have successfully extracted the key-
board presses, despite additional USB trafﬁc from other
devices, functioning concurrently to USB keyboard.
Attacking USB Magnetic Card Readers.
In addition
to USB keyboards, we have successfully extracted credit-
card data from a USB magnetic card reader (MagTek
21040140) using data line crosstalk leakage from an in-
ternal USB hub of a Lenovo Ideapad 100s laptop. See
Figure 16 for a picture of the experimental setup and Fig-
ure 17 for the extracted data. Similar results were also
obtained using power line crosstalk leakage.
Attacking USB Headsets and USB Fingerprint Read-
ers. Two other types of devices we successfully attacked
are USB headsets and USB Fingerprint Readers. For
the headsets, we captured the signals corresponding to
the microphone (see Figure 18). We have also success-
fully observed and decoded the USB communication of
a USB ﬁngerprint reader during a ﬁnger swipe (see Fig-
ure 19). We did not attempt to decode either the voice
communication of the headset or the ﬁngerprint data be-
cause these devices use propriety data-transfer formats,
and reverse engineering these is beyond the scope of this
paper. However, we did recover the USB trafﬁc and with
the knowledge of the protocols, interpreting the captured
data should be straightforward.
Attacking USB Storage.
In addition to attacking hu-
man interface devices, we have also mounted crosstalk
leakage attacks on USB 1.1 drives connected to both
internal and external USB 2.0 hubs.
Indeed, we have
successfully recovered the communication during a ﬁle
transfer from a USB 1.1 drive to the PC host using data
line crosstalk leakage with both external and internal
USB 2.0 hubs. See Figure 20. Due to the complexity of
the USB driver stack and the ﬁle system, we did not at-
tempt to decode the obtained trafﬁc. However, we claim
that since the USB communication was completely re-
covered from the crosstalk leakage, recovering the trans-
ferred ﬁle can be achieved as well. Finally, similar results
were also obtained using power line crosstalk leakage.
6 Exploiting Crosstalk Leakage via Mali-
cious Peripherals
In this section we show how to construct a malicious pe-
ripheral device (spy probe) which can successfully ex-
tract USB keyboard presses from the data line crosstalk
leakage. After extraction, the spy probe exﬁltrates the
key presses via Bluetooth.
Figure 12: Trace transformations performed to decode
the data line crosstalk leakage. (top, black) is the raw
data line crosstalk leakage from the hub in Figure 6 and
(top, blue) is the result of removing the high frequency
noise done in Step 1. (middle, red) is the result of ap-
plying the trace enhancement step (Step 2) on the results
of leakage trace cleanup step (Step 1). Finally, the (bot-
tom, black) trace is the absolute value of the (middle, red)
trace and the green markings denote all locations where
the bottom black trace crosses the blue threshold.
order derivative by subtracting each sample from the pre-
vious one. We then computed the absolute value of the
approximated derivative and smoothed the resulting trace
using a moving average ﬁlter of 10 samples. This re-
sulted in a relatively clean trace with the toggling in
physical layer clearly visible as sharp spikes. See Fig-
ure 14(blue). We then applied Steps 3 and 4 from Sec-
tion 4.2 using a threshold of 0.05 V for edge detection.
This resulted in a clear detection of the physical layer
toggling events. See Figure 14(green).
5 Leakage Crosstalk Attacks
In this section we present several crosstalk leakage at-
tacks against various peripheral USB devices.
Experimental Setup. We used an Agilent MSO6104A
oscilloscope (1GHz, 4Gsps) with Agilent 10073C
500MHz passive probes to monitor the communication
between the attacked peripheral and USB host while at
the same time monitoring either the data line or power
line crosstalk leakage.
Attacking USB Keyboards. Using data line crosstalk
1154    26th USENIX Security Symposium
USENIX Association
20030040050060070080090010001100-0.15-0.1-0.0500.050.10.15  Raw Scope ReadingSmooth Signal20030040050060070080090010001100-0.04-0.0200.020.040.06  First Order Derivative200300400500600700800900100011000.020.040.060.080.10.120.140.160.180.2  Absolute Value of DerivativeThresholdEdge Stream00000000000000000000011111111111111SYNCPIDADDRENDPCRC5Figure 13: USB communication (blue, top) and power line crosstalk leakage (red, bottom) of a single 1ms USB
frame with a keyboard attached to the USB hub. The data line crosstalk leakage was captured using the hub from
Figure 7(rightmost).
Figure 14: Smoothed trace (blue) subjects to the thresh-
old (red) and the resultant Edge detected (green).
6.1 Design Overview
Hardware. The spy probe is constructed from an Alinx
AX309 FPGA development board (30 USD) connected
to an AN108 analog to digital conversion (ADC) board
(15 USD) designed by heijin.org. Data is exﬁltrated us-
ing a WeBee Bluetooth Low Energy (BLE) Board with
a Texas Instruments CC2540 chip (5 USD). All of the
probe’s components are concealed in a USB ghost lamp
(20 USD). See Figure 21. In case the 5V USB power is
not available (such as in the case where the power lines
are disconnected in an attempt to isolate a malicious de-
vice), the lamp also contains a battery pack.
The ADC Board. We have connected the ADC board
to a male A-type USB plug which should be plugged
into the leaky USB hub in order to monitor the data line
crosstalk leakage. We have connected the ADC’s input
to the D+ USB line and monitored its voltage relative to
Figure 15: Extracting keyboard presses using data line
crosstalk leakage. The scan code 0x07 corresponding to
the letter d is clearly visible in the leakage trace.
the GND line. We have also used the USB’s 5V power
line in order to power the probe.4 Our ADC board has
a clamp circuit, attenuator (AD8065), low pass ﬁlter and
an 8 bit 32 MSaps ADC in a chain. The clamp is a pro-
tective element consisting of two germanium diodes, to
ensure that the voltage of the signal feed into the ADC
never goes above 5 Volts or below GND. Immediately
after the clamp there is an attenuator, mapping the in-
put signal of ± 5 Volts into a 0–2 Volt range. In order
to remove high frequency noise, there a simple RC low-
pass ﬁlter ( fc = 723MHz) between the attenuator and the
ADC. Finally a AD9280 ADC is used to digitize the data
4As mentioned above, the spy probe also contains a battery pack for
the case where the 5V power is not available.
USENIX Association
26th USENIX Security Symposium    1155
-0.3-0.2-0.100.10.20.30.40.50.6-4-3-2-101234USB Powerline waveform-0.3-0.2-0.100.10.20.30.40.5-5-4-3-2-101234USB Power line IN Packet-0.3-0.2-0.100.10.20.30.40.5-5-4-3-2-101234500000000000000000001111111110000000000000000000111111111USB Power line payload00000111000000000001110000000500100015002000250030003500400000.020.040.060.080.10.120.140.160.180.2  Smooth SignalThresholdEdge Stream0000000000000000000111111111SYNCPIDADDRENDPFigure 16: (left) Experimental setup for extracting credit card data from a USB card reader (MagTek 21040140 card
reader and a Lenovo Ideapad 100s laptop) using data line crosstalk leakage (clearly visible on the oscilloscope’s
screen) from an internal USB hub. (right) MagTek 21040140 USB magnetic card reader.
Figure 17: Extracted credit card data using data line crosstalk leakage. (top) Observed data line crosstalk leakage
trace segment. Part of the credit card number is visible in hexadecimal encoding (marked in orange box). (middle)
hexadecimal to ascii conversion of the extracted data. Part of the credit card number is visible in ascii form (green).
(bottom) picture of the credit card used. Notice the correct extraction of the credit card number. In order to protect
owner’s privacy we have hidden all other card details.
line crosstalk leakage signal. The ADC receives its clock
from the FPGA board and transmits 8 bits of data per
sample back to the FPGA board. Because the signals we
measure are typically 30mV peak to peak, we bypassed
the attenuator with a jumper cable thereby improving the
measurement resolution. See Figure 22.
Software.
In order to decode the data line crosstalk
leakage recorded by the probe’s ADC board, we have im-
plemented a highly optimized version of the signal pro-
cessing approach described in Section 4.2 on the probe’s
FPGA board, in Verilog HDL. After decoding the data
line crosstalk leakage, the spy probe ﬁlters out USB
packets which correspond to keyboard presses and ex-
ﬁltrates them via a bluetooth connection.
6.2 Attack Performance
In this section we evaluate our spy probe’s ability to cor-
rectly recognize and exﬁltrate USB keyboard presses.
Experimental Setup. We used a Microsoft SurfacePro
laptop as a USB host. This machine has only one USB
slot, forcing the end user to use an external USB hub in
order to simultaneously connect a keyboard and mouse.
1156    26th USENIX Security Symposium
USENIX Association
Figure 18: (left) Experimental setup for observing data line crosstalk leakage from a USB headset microphone (Log-
itech H340). The data line crosstalk leakage is clearly visible on the oscilloscope’s screen. (right) Logitech H340 USB
headset.
Figure 19: (left) Experimental setup for observing data line crosstalk leakage from a USB ﬁngerprint reader (Eikon
Trueme). The data line crosstalk leakage is clearly visible on the oscilloscope’s screen. (right) Eikon Trueme ﬁnger-
print reader
Figure 20: Observing the data line crosstalk leakage during a ﬁle transfer from a USB 1.1 drive (blue), connected to
the laptop’s (Lenovo G550) internal USB 2.0 hub using an Agilent Inﬁniium DSO 54832B Oscilloscope. The data
line crosstalk leakage is clearly visible on the oscilloscope’s screen.
We then connected the keyboard, spy probe, mouse and
the USB drive via a 4 port USB hub. See Figure 23.
Key Recognition Rate. We measured the spy probe’s
key recognition rate under various typing speeds. Using
a digital metronome as a speed reference, we pressed a
random key on every metronome pulse. We evaluated the
spy probe’s ability to operate at various typing speeds.
As can be seen in Figure 24, the spy probe achieves 97%
USENIX Association
26th USENIX Security Symposium    1157
Figure 21: The external appearance of the spy probe, which is embedded inside a toy ghost lamp, size is compared
with a 375mL classic Coca-Cola can (left). Inside look of the spy probe, showing the ADC board, FPGA board, BLE
board and battery pack (right).