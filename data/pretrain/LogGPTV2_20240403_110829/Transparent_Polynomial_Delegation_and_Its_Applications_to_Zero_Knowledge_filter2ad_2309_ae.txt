The full protocol for our zkVPD is presented in Protocol 3.
Note that all the evaluations are on U = L − H instead of
L, as evaluations on H leaks information about the original
l(x). s(x) is also committed and opened using Merkle tree
for the purpose of correctness and soundness. The efﬁciency
of our zkVPD protocol is asymptotically the same as our VPD
protocol in Protocol 2, and the concrete overhead in practice
is also small. We have the following theorem:
Theorem 2. Protocol 3 is a zero knowledge veriﬁable poly-
nomial delegation scheme by Deﬁnition 3.
We give the proof in Appendix D.
IV. ZERO KNOWLEDGE ARGUMENT
Following the framework of [70], we can instantiate the
zkVPD in Protocol 1 with our new construction of transparent
zkVPD in Protocol 3 to obtain a zero knowledge argument
of knowledge scheme for layered arithmetic circuits without
trusted setup. In this section, we present two optimizations to
improve the asymptotic performance, followed by the formal
description of the scheme.
B. zkVPD for Interior Layers
The second place that uses zkVPD in Protocol 1 is on the
masking polynomials Ri and δi in each layer. By Theorem 2,
δi : F2si+1+1 → F is a sparse polynomial that can be expressed
as the sum of 2si+1 + 1 univariate polynomials of degree
deg(δi) = O(1) on each variable. Therefore, instead of using
the generic zkVPD in Protocol 3 with d = deg(δi), we model
the evaluation of δi as a vector inner product between two
dense vectors of size (deg(δi) + 1) · (2si+1 + 1). The vector
committed by P consists of all coefﬁcients in δi, and the one
known to V consists of the value of each variable raised to
degree 0, 1, . . . , deg(δi). In addition, as the size of the vector
is asymptotically the same as the number of variables, in step
9-10 of Protocol 3, V can compute the evaluations of q(x)
directly in time O(si+1) and it is not necessary to delegate the
computation to P using GKR anymore. With this approach,
the prover time for evaluating the masking polynomials Ri
and δi of all layers is O(D log C log log C), the proof size is
O(D log log2 C) and the veriﬁcation time is O(D log C). As
shown in Lemma 2, this does not introduce any asymptotic
overhead for the zero knowledge argument scheme.
To further improve the efﬁciency in practice, we can also
combine all the evaluations of Ri and δi into one big vector
inner product using random linear combinations.
C. Putting Everything Together
A. zkVPD for Input Layer
(cid:8)
Instead, we observe that
As presented in Section II-C, to extend the GKR protocol
to a zero knowledge argument, we need a zkVPD protocol
for the low degree extension ˙VD of polynomial VD deﬁned
by Equation 3. The variable degree of ˙VD for x2, . . . , xsD is
2, and the variable degree for x1 is 3. Naively applying our
zkVPD protocol in Section III-A would incur a prover time of
O(sD3sD ), superlinear in the size of the input n = O(2sD ).
the low degree extension in
Equation 3 is of a special
the sum of
the multilinear extension ˜VD deﬁned by Equation 1 and
(cid:8)
z∈{0,1} RD(x1, z), where ZD is publicly known and
ZD(x)
(cid:8)
z∈{0,1} RD(x1, z) is a degree-1 univariate polynomial, i.e.
z∈{0,1} RD(x1, z) = a0 + a1x1. Therefore, the evaluation
˙VD at point t ∈ FsD can be modeled as the inner
of
product between two vectors T and c of length n + 2. The
i=1((1 − ti)(1 − bi) + tibi)
ﬁrst n elements in T are
for all b ∈ {0, 1}sD, concatenated by two more elements
ZD(t), ZD(t)·t1. Similarly, the ﬁrst n elements of c are VD(b)
for all b ∈ {0, 1}sD, concatenated by a0, a1.
Therefore, P and V replace vectors T and c in Protocol 3 by
ones described above. In addition, the ﬁrst part of the GKR
circuit shown in Figure 3 to compute T from t1, . . . tsD is
also changed according to the deﬁnition of T above. The rest
of the protocol remains the same and it is straight forward
to prove that the modiﬁed protocol is still correct, sound and
zero knowledge. In this way, the prover time is O(n log n), the
proof size is O(log2 n) and the veriﬁcation time is O(log2 n).
(cid:11)
form:
it
is
sD
With the optimizations above,
the full protocol of our
transparent zero knowledge argument scheme is presented in
Protocol 5 in the appendix. Consider the following theorem:
Theorem 3. For a ﬁnite ﬁeld F and a family of layered
arithmetic circuit CF over F, Protocol 5 is a zero knowledge
argument of knowledge for the relation
R = {(C, x; w) : C ∈ CF ∧ C(x; w) = 1},
as deﬁned in Deﬁnition 2.
Moreover, for every (C, x; w) ∈ R, the running time of P
is O(|C| + n log n) ﬁeld operations, where n = |x| +|w|. The
running time of V is O(|x|+D·log |C|+log2 n) if C is regular
with D layers. P and V interact O(D log |C|) rounds and the
total communication (proof size) is O(D log |C| + log2 n). In
case D is polylog(|C|), the protocol is a succinct argument.
Soundness follows the knowledge soundness of our zkVPD
protocol (Appendix D) and Lemma 1. To prove zero knowl-
edge, we present the simulator in Figure 5 in the Appendix.
The efﬁciency follows Lemma 2 and the efﬁciency of our
instantiations of the zkVPD protocol with optimizations de-
scribed above.
Removing interactions. Similar to [70], our construction can
be made non-interactive in the random oracle model using
Fiat-Shamir heuristic [37]. As shown in recent work [15],
[30], applying Fiat-Shamir on the GKR protocol only incurs
a polynomial soundness loss in the number of rounds.
Regular circuits and log-space uniform. In our scheme, the
veriﬁcation time is succinct only when the circuit is regular.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:59:28 UTC from IEEE Xplore.  Restrictions apply. 
867
This is the best that can be achieved for transparent ZKP, as in
the worst case, the veriﬁer must read the entire circuit, which
takes linear time. In fact, as shown in [42], the veriﬁcation
time is succinct for all log-space uniform circuits. However, it
introduces an extra overhead on the prover time, thus we state
all of our results on regular circuits.
In practice, with the help of auxiliary input and circuit
squashing, most computations can be expressed as regular
circuits with low depth, such as matrix multiplication, image
scaling and Merkle hash tree in Section V. Asymptotically, as
shown in [9], [16], [75], all random memory access (RAM)
programs can be validated by circuits that are regular with
log-depth in the running time of the programs (but linear in
the size of the programs) by RAM-to-circuit reduction, which
justiﬁes the expressiveness of such circuits.
f
V. IMPLEMENTATION AND EVALUATION
We implement Virgo, a zero knowledge proof system based
on our construction in Section IV. The system is implemented
in C++. There are around 700 lines of code for our transparent
zkVPD protocol and 2000 lines for the GKR part.
Hardware. We run all of the experiments on AMD RyzenTM
3800X Processor with 64GB RAM. Our current implementa-
tion is not parallelized and we only use a single CPU core
in the experiments. We report the average running time of 10
executions, unless speciﬁed otherwise.
A. Choice of Field with Efﬁcient Arithmetic
One important optimization we developed during the im-
plementation is on the choice of the underlying ﬁeld. Our
scheme is transparent and does not use any discrete log
or bilinear pairing as in [69], [70], [72], [73]. However,
there is one requirement on the ﬁnite ﬁeld: in order to run
the low degree test protocol in [10], either the ﬁeld is an
extension of F2, or there exists a multiplicative subgroup
of order 2k in the ﬁeld for large enough k (one can think
of 2k ≥ |L| = O(|H|) = O(n)). Existing zero knowledge
proof systems that use the LDT protocol as a building block
such as Stark [9] and Aurora [14] run on the extension ﬁelds
F264 and F2192. Modern CPUs (e.g., AMD RyzenTM 3800X
Processor) have built-in instructions for ﬁeld arithmetics on
these extension ﬁelds, which improves the performance of
these systems signiﬁcantly. However, the drawback is that the
arithmetic circuits representing the statement of ZKP must also
operate on the same ﬁeld, and the additions (multiplications)
are different from integer or modular additions (multiplica-
tions) that are commonly used in the literature. Because of
this, Stark [9] has to design a special SHA-256 circuit on F264,
and Aurora [14] only reports the performance versus circuit
size (number of constraints), but not on any commonly used
functions.
One could also use a prime ﬁeld p with an order-2k
multiplicative subgroup. Equivalently, this requires that 2k is
a factor of p − 1. In fact, there exist many such primes and
Aurora [14] also supports prime ﬁelds. However, the speed
of ﬁeld arithmetic is much slower than extension ﬁelds of F2
(see Table I).
In this paper, we provide an alternative to achieve the best
of both cases. A ﬁrst attempt is to use Mersenne primes,
primes that can be expressed as p = 2m − 1 for integers
m. As shown in [34], [64], multiplications modulo Mersenne
primes is known to be very efﬁcient. However, Mersenne
primes do not satisfy the requirement of the LDT, as p − 1 =
2m − 2 = 2 · (2m−1 − 1) only has a factor 21. Instead,
we propose to use the extension ﬁeld of a Mersenne prime
Fp2.The multiplicative group of Fp2 is a cyclic group of order
p2−1 = (2m−1)2−1 = 22m−2m+1 = 2m+1(2m−1−1), thus
it has a multiplicative subgroup of order 2m+1, satisfying the
requirement of LDT when m is reasonably large. Meanwhile,
to construct an arithmetic circuit representing the statement of
the ZKP, we still encode all the values in the ﬁrst slot of the
polynomial ring deﬁned by Fp2. In this way, the additions and
multiplications in the circuit are on Fp and our system can take
the same arithmetic circuits over prime ﬁelds in prior work.
Meanwhile, the LDT, zkVPD and GKR protocol are executed
on Fp2, preserving the soundness over the whole ﬁeld.
With this alternative approach, we can implement modular
multiplications on Fp2 using 3 modular multiplications on
Fp. (The modular multiplication is analog to multiplications
of complex numbers.) In our implementation, we choose
Mersenne prime p = 261 − 1, thus our system provides 100+
bits of security. We implement modular multiplications on
Fp for p = 261 − 1 with only one integer multiplication in
C++ (two 64-bit integers to one 128-bit integer) and some bit
operations. As shown in Table I, the ﬁeld arithmetic on Fp2 is
comparable to F264, 2× faster than F2192 and 4× faster than a
128-bit prime ﬁeld. Encoding numbers in Fp for p = 261 − 1
is enough to avoid overﬂow for all computations used in our
experiments in Section V-B. For other computations requiring
larger ﬁeld, one can set p as 289−1, 2107−1 or 2127−1, which
incurs a moderate slow down. For example, the multiplication
over Fp2 for p = 289 − 1 is 2.7× slower than p = 261 − 1.
This optimization can also be applied to Stark [9] and
Aurora [14], which use the same LDT in [10]. Currently they
run on F264 and F2192 and their performances are reported in
Section V-C. With our optimization, they can run on Fp2 with
similar efﬁciency while taking arithmetic circuits in Fp.
B. Performance of zkVPD
In this section, we present the performance of our new
transparent zkVPD protocol, and compare it with the existing
approach based on bilinear maps. We use the open-source
code of [70], which implements the zkVPD scheme presented
in [72]. For our new zkVPD protocol, we implement the
univariate sumcheck and the low degree test described in
Section II-D. We set the repetition parameter κ in Lemma 4 as
128-bit prime
6.29ns
30.2ns
F264
2.16ns
7.29ns
F2192
4.75ns
15.8ns
Our ﬁeld
1.23ns
8.27ns
+
×
TABLE I: Speed of basic arithmetic on different ﬁelds. The
time is averaged over 100 million runs and is in nanosecond.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:59:28 UTC from IEEE Xplore.  Restrictions apply. 
868
102
101
Bilinear
Ours
100
−1
−2
10
10
212
214
216
218
220
(a) P time
−1
10
−2
10
−3
10
Bilinear
Ours
212
214
216
218
220
(b) V time
103
102
101
100
Bilinear
Ours
212
214
216
218
220
(c) Proof size
Fig. 1: Comparison of our zkVPD and the pairing-based zkVPD in [72].
33, and the rate of the RS code as 32 (i.e., |L| = 32|H|). These
parameters provide 100+ bits of security, based on Theorem
1.2 and Conjecture 1.5 in [10], and are consistent with the
implementation of Aurora [14]. In addition, we use the ﬁeld
Fp2 with p = 261 − 1, which has a multiplicative subgroup of
order 2m+1. Thus |L| can be as big as 260 and the size of the
witness |H| is up to 255. We pad the size of the witness to a
power of 2, which introduces an overhead of at most 2×.
Figure 1 shows the prover time, veriﬁcation time and proof
size of the two schemes. We ﬁx the variable degree of the
polynomial as 1 and vary the number of variables from
12 to 20. The size of the multilinear polynomial is 212 to
220. As shown in the ﬁgure, the prover time of our new
zkVPD scheme is 8-10× faster than the pairing-based one.
It only takes 11.7s to generate the proof for a polynomial of
size 220. This is because our new scheme does not use any