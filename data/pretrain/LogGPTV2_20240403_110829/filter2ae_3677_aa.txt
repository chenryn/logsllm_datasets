## 环境搭建
编译存在漏洞的v8源码：
    git reset --hard 64cadfcf4a56c0b3b9d3b5cc00905483850d6559
    gclient sync
    tools/dev/gm.py x64.release
    tools/dev/gm.py x64.debug
安装Turbolizer可视化工具：
（1）安装npm
    Ubuntu下默认的apt里面的nodejs不好使，安装最新版的
    python-software-properties 有些情况下可能会找不到，然后会提示你安装另一个包，如果是这样的话根据提示安装那个包就好了。
    sudo apt-get install curl python-software-properties
    curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -    sudo apt-get install nodejs
    sudo apt-get install npm
（2）启动
    cd v8/v8/tools/turbolizer
    npm i
    npm run-script build
    python -m SimpleHTTPServer 8000
    之后通过chrome浏览器访问 127.0.0.1:8000
（3）生成Turbolizer文件
    ./d8  --trace-turbo ./poc.js
## 基础知识
### JavaScript splice() 方法
定义和用法
splice() 方法向/从数组中添加/删除项目，然后返回被删除的项目。
注释：该方法会改变原始数组。
    语法：
    arrayObject.splice(index,howmany,item1,.....,itemX)
    index   必需。整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。
    howmany     必需。要删除的项目数量。如果设置为 0，则不会删除项目。
    item1, ..., itemX   可选。向数组添加的新项目。
### Array.prototype.concat.apply
apply方法会调用一个函数，apply方法的第一个参数会作为被调用函数的this值，apply方法的第二个参数（一个数组，或类数组的对象）会作为被调用对象的arguments值，也就是说该数组的各个元素将会依次成为被调用函数的各个参数；
简单来说，该方法可以将多维数组转化成一维数组。
### Math.max()
函数返回一组数中的最大值。
### v8 指针压缩
为了节省内存空间，v8将64位的指针压缩成了32位，具体做法是将高32位存放在r13寄存器，用4个字节存储低32位，在访问某个指针时，就将低32位指针加上r13保存的高32位。
同时，为了进一步节省内存空间，之前SMI 存储为value «
32，低32位都为0，现在用SMI的值用4个字节存储，并且为了不和指针混淆，最后一位不用（指针最后一位为1），所以将value «
1，相当于将原来的值乘以了2。
demo 代码如下：
    var a = [0, 1, 2, 3, 4];
    %DebugPrint(a);
    %SystemBreak();
### v8各个类型的转化
PACKED_SMI_ELEMENTS：小整数，又称 Smi。
PACKED_DOUBLE_ELEMENTS： 双精度浮点数，浮点数和不能表示为 Smi 的整数。
PACKED_ELEMENTS：常规元素，不能表示为 Smi 或双精度的值。
转化关系如下：
元素种类转换只能从一个方向进行：从特定的（例如 PACKED_SMI_ELEMENTS）到更一般的（例如
PACKED_ELEMENTS）。例如，一旦数组被标记为 PACKED_ELEMENTS，它就不能回到 PACKED_DOUBLE_ELEMENTS。
demo 代码：
    const array = [1, 2, 3];
    // elements kind: PACKED_SMI_ELEMENTS
    array.push(4.56);
    // elements kind: PACKED_DOUBLE_ELEMENTS
    array.push('x');
    // elements kind: PACKED_ELEMENTS
PACKED 转化到 HOLEY类型：
demo代码：
    const array = [1, 2, 3, 4.56, 'x'];
    // elements kind: PACKED_ELEMENTS
    array.length; // 5
    array[9] = 1; // array[5] until array[8] are now holes
    // elements kind: HOLEY_ELEMENTS
即将密集数组转化到稀疏数组。
### 处理优化的各个阶段
## 漏洞分析
漏洞在于CodeStubAssembler::AllocateFixedArray 的两个宏实现：
    macro NewFixedArray(length: intptr, it: Iterator): FixedArray {
      if (length == 0) return kEmptyFixedArray;
      return new
      FixedArray{map: kFixedArrayMap, length: Convert(length), objects: ...it};
    }
    macro NewFixedDoubleArray(
        length: intptr, it: Iterator): FixedDoubleArray|EmptyFixedArray {
      if (length == 0) return kEmptyFixedArray;
      return new FixedDoubleArray{
        map: kFixedDoubleArrayMap,
        length: Convert(length)
        floats: ...it
      };
    }
在两个宏实现中都没有对length的边界大小进行判断就直接新建相应对象，其中FixedArray对象最大长度FixedArray::kMaxLength为0x7fffffd，FixedDoubleArray对象最大长度为FixedDoubleArray::kMaxLength为0x3fffffe。
所以漏洞在于能够创建大于kMaxLength的FixedArray或FixedDoubleArray对象。
漏洞调用链：
    // builtins/array-splice.tq
    ArrayPrototypeSplice -> FastArraySplice -> FastSplice -> Extract -> ExtractFixedArray -> NewFixedArray
Poc1：
    array = Array(0x80000).fill(1); // [1]
    array.prop = 1; // [2]
    args = Array(0x100 - 1).fill(array); // [3]
    args.push(Array(0x80000 - 4).fill(2)); // [4]
    giant_array = Array.prototype.concat.apply([], args); // [5]
    giant_array.splice(giant_array.length, 0, 3, 3, 3, 3); // [6]
    %DebugPrint(giant_array.length); // 输出DebugPrint: Smi: 0x8000000 (134217728)
[1] 处申请了一个0x80000大小的数组，[3]处又创建了一个0xff大小，每个元素为array的对象，此时0xff * 0x80000 =
0x7f80000 个元素。[4] 处再push进一个0x7fffc个元素的数组，此时共有0x7f80000 + 0x7fffc =
0x7fffffc个元素，而FixedDoubleArray::kMaxLength =
0x7fffffd。[5]处利用Array.prototype.concat.apply
将上述混合的对象转化成一维数组。最后，[6]处再次利用splice方法添加4个元素，现在一共有0x7fffffc + 4 =
0x8000000个元素，导致giant_array的长度为FixedArray::kMaxLength + 3。
[2] 处设置属性是为了调用Array.prototype.concat时进入慢路径，因为快路径上有长度检查：
    // builtins/builtins-array.cc:1414
    MaybeHandle Fast_ArrayConcat(Isolate* isolate,
                                          BuiltinArguments* args) {
      // ...
      // Throw an Error if we overflow the FixedArray limits
      if (FixedDoubleArray::kMaxLength NewNode( // [4]
            simplified()->CheckBounds(FeedbackSource{},
                                      CheckBoundsFlag::kAbortOnOutOfBounds),
            index, length, effect, control);
        ReplaceWithValue(node, elements); // [5]
        return Replace(check_bounds);
      }
      return NoChange();
    }
由上述可知：[1] 处为索引的值，范围为（0，1），[2]处为corrupting_array的length，范围为(0,
134217725)，经过优化后变为(2, 2)，因为循环中corrupting_array赋值只有两个元素，并且没有被修改。所以[3]
处的index_type.Max()为1， length_type.Min()为2，说明索引比数组长度小，并不需要对数组进行扩展。
进入if判断后，[4]
处创建一个新的CheckBounds节点（假设为node_x），会检查实际index是否小于数组大小，如果创建成功，实际index此时为7，不会小于数组大小，无法通过检查。但[5]
处的 ReplaceWithValue(node, elements);操作会导致CheckBounds节点无法创建成功。
ReplaceWithValue 函数如下：
    void GraphReducer::ReplaceWithValue(Node* node, Node* value, Node* effect,
                                        Node* control) {
      if (effect == nullptr && node->op()->EffectInputCount() > 0) {
        effect = NodeProperties::GetEffectInput(node); // [1]
      }
      if (control == nullptr && node->op()->ControlInputCount() > 0) {
        control = NodeProperties::GetControlInput(node);
      }
      // Requires distinguishing between value, effect and control edges.
      for (Edge edge : node->use_edges()) { // [2]
        Node* const user = edge.from();
        DCHECK(!user->IsDead());
        if (NodeProperties::IsControlEdge(edge)) {
          if (user->opcode() == IrOpcode::kIfSuccess) {
            Replace(user, control);
          } else if (user->opcode() == IrOpcode::kIfException) {
            DCHECK_NOT_NULL(dead_);