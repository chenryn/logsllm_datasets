ki,j
w,β denotes Pj’s version of ki
In a topological order, for every wire that is the output of an XOR gate with input wires u and
v, set pi,j
w,0 := Fsi(‘key’||w||0) and ki,j
w,β, for β ∈ {0, 1}.
w,1 := ki,j
w,0 ⊕ Ri,j.
u,0 ⊕ ki,j
u ⊕ pi,j
w,1 := ki,j
w := pi,j
v,0 and ki,j
Computing (pu ⊕ α) · (pv ⊕ β) ⊕ pw, for α, β ∈ {0, 1}.
w,0 := ki,j
v , ki,j
For every AND gate g ∈ C, denote the input wires by u, v and the output wire by w, and
denote Pi’s XOR share of the permutation bits by pi
w, respectively. Once again, recall
that pi,j
u as
computed by Pj, j ∈ Si, while pi
u denotes its true value. Our goal is to compute XOR shares of
u) · (⊕4
w for all honest j ∈ Si; i.e., pi,j
u denotes the value pi
v) ⊕ (⊕i(cid:54)=jpi
u · pj
v).
w = pi
u = pi
v = pi
u · pi
u, pi,j
v, pi,j
u, pi
v, pi
pu · pv = (⊕4
v) = (⊕4
For all i ∈ [4], for all j ∈ Si, Pj locally computes pi,j
For all i, j ∈ [4], i (cid:54)= j, and all g ∈ C:
i=1pi
i=1pi
i=1pi
u · pi,j
v .
• For all (cid:96) ∈ Si, P(cid:96) generates a random bit ri,j,(cid:96) := Fsi(‘bitOT’||i||j||g).
• For all (cid:96) ∈ Si ∩ Sj, P(cid:96) locally computes (pi,(cid:96)
u ⊕ ri,j,(cid:96)) · pj,(cid:96)
we will denote the indices of the parties in Si ∩ Sj by (cid:96)1
v . In our case, |Si ∩ Sj| = 2 and
i,j, (cid:96)2
i,j, where needed.
• Parties invoke F4AOT(Ps, Pr,{P(cid:96)1
(Si ∩ Sj): Ps inputs (ri,j,s, pi,s
ri,j,(cid:96)z
u ⊕ ri,j,s), Pr inputs pj,r
), for z = 1, 2. Pr receives the output (pi
j,(cid:96)z
i,j , p
v
, P(cid:96)2
i,j
i,j
i,j
}), where s ∈ Si − Sj, r ∈ Sj − Si, and (cid:96)1
i,j, (cid:96)2
j,(cid:96)z
i,j , p
u
i,j ∈
⊕
i,j
v , and P(cid:96)z
u ⊕ ri,j) · pj
i,j
inputs (ri,j,(cid:96)z
v (or ⊥).
For all i ∈ [4], all j ∈ Si, and all g ∈ C, Pj does the following:
• Pj locally XORs the values it obtains from the computation above to compute pi,j
uv, i.e.,
Pi’s XOR share of puv = pu · pv as recorded by Pj.
• Similarly, Pj locally computes Pi’s XOR shares of
puvw = pu · pv ⊕ pw
p¯uvw = ¯pu · pv ⊕ pw
pu¯vw = pu · ¯pv ⊕ pw
p¯u¯vw = ¯pu · ¯pv ⊕ pw
where ¯p = 1 − p, for a bit p.
(Continued in Figure 5.)
Figure 4: The 4-party distributed garbling protocol.
11
Computing Ri ·(cid:0)(pu ⊕ α) · (pv ⊕ β) ⊕ pw
Protocol Π4gc(C,{P1, P2, P3, P4}) (cont’d)
(cid:1). For all i, j ∈ [4], i (cid:54)= j, and all g ∈ C:
For all (cid:96) ∈ Si, P(cid:96) generates a random κ-bit string Qi,j,(cid:96) := Fsi(‘strOT’||i||j||g).
For all (cid:96) ∈ Si ∩ Sj, P(cid:96) locally computes (Ri,(cid:96) ⊕ Qi,j,(cid:96)) · pj,(cid:96)
uvw. Again, Ri,(cid:96) is the version of Ri
held by P(cid:96).
Parties invoke F4AOT(Ps, Pr,Si∩Sj), where s ∈ Si−Sj, r ∈ Sj −Si, and (cid:96) ∈ (Si∩Sj): Ps inputs
(Qi,j,s, Ri,s ⊕ Qi,j,s), Pr inputs pj,r
uvw, and P(cid:96) inputs (Qi,j,(cid:96), Rj,(cid:96) ⊕ Qi,j,(cid:96), Rj,(cid:96)). Pr receives the
output Qi,j,s ⊕ Ri,s · pj,r
uvw if parties are honest. The same
is repeated for pu¯vw, p¯uvw, and p¯u¯vw.
Let ρi,j,(cid:96)
w,α,β denote Pj’s XOR share of Ri ·(cid:0)(pu ⊕ α) · (pv ⊕ β) ⊕ pw
(cid:1), as recorded by P(cid:96).
uvw, which is the same as Qi,j ⊕ Ri · pj
Outputs. Let Ri denote the set of indices of seeds held by Pi, i ∈ [4]a. In other words, R1 =
{1, 3, 4}, R2 = {2, 3, 4}, R3 = {1, 2, 3}, and R4 = {1, 2, 4}. For all i ∈ [4], for all g ∈ C, and for all
α, β ∈ {0, 1}:
w,0⊕ρc,j,i
w,α,β.
w,α,β. As a result, Pi holds three of the
For all j ∈ Ri, for c ∈ [4], when c = j, Pi locally computes Fkj,i
When c (cid:54)= j, Pi computes Fkj,i
four shares it needs to compute the garbled circuit.
For j = [4] − Ri, for all (cid:96) ∈ Sj, for c ∈ [4]
(g||c) ⊕ Fkj,i
(g||c)⊕Fkj,i
(g||c) ⊕ ρc,j,i
(g||c)⊕kj,i
u,α
u,α
v,β
v,β
1. When c = j, P(cid:96) sends Fkj,(cid:96)
2. When c (cid:54)= j, P(cid:96) sends Fkj,(cid:96)
u,α
u,α
(g||c) ⊕ Fkj,(cid:96)
(g||c) ⊕ Fkj,(cid:96)
v,β
v,β
(g||c) ⊕ kj,(cid:96)
(g||c) ⊕ ρc,j,(cid:96)
w,0 ⊕ ρc,j,(cid:96)
w,α,β to Pi.
w,α,β to Pi. b
If all three versions of each value Pi receives is the same it locally XORs the four values computed
above for all g ∈ C to obtain gi
α,β for all α, β ∈ {0, 1} and all AND
gates g ∈ C. Else, they output ⊥.
α,β, and output g1
α,β|| . . .||g4
aWhile sets Ri and Si are the same in the 5PC case, they deﬁne diﬀerent sets and would be diﬀerent in
the general case.
bFor ease of composition we assume all parties send the complete value, but in fact two parties can only
send the hash, which can be batched across all gates to save on communication.
Figure 5: The 4-party distributed garbling protocol (continued from Fig. 4).
12
α,β|| . . .||g4
j=1pj
In Figure 3 the garbling function is Gb(1κ, f ) and Gf is the public output – i.e., g1
α,β,
for every AND gate g ∈ C and every α, β ∈ {0, 1}.
w = Fsj (‘perm’||w),
For every input wire w corresponding to a party Pi’s input bit b, deﬁne pj
w, b(cid:48) = b ⊕ pw and let the encoding function En(e,·) be the concatenation of
pw = Σ4
Fsj (‘key’||w||0) ⊕ Fsj (‘delta’).b(cid:48), for all j ∈ [4]. That is, when x = b, X = Fsj (‘key’||w||0) ⊕
Fsj (‘delta’).b(cid:48),∀j ∈ [4].
The evaluation function Ev(Gf,·) is the same function as in the semi-honest protocol of [BLO16b].
w||k4
Finally, for every output wire w, let Y = Ev(Gf, X) be parsed as k1
w. Now, if
w = kw,0 = Fsi(‘key‘||w||0) for all i ∈ [4], then set αw = 0, else set αw = 1 if ki
ki
w = kw,0 =
Fsi(‘key‘||w||0) ⊕ Ri for all i ∈ [4]. If neither of the two cases hold, then output ⊥; otherwise,
output y = αw ⊕ pw, where pw = Σ4
w = Fsi(‘perm’||w). Thus, the decoding
function De(d, Y ) = αw ⊕ pw.
Ben-Efraim et al. [BLO16b] show that the garbling scheme G, deﬁned via the functions above is a
correct garbling scheme. In addition, it is easy to see that when the 4 parties are honest, our protocol
Π4gc(C,{P1, P2, P3, P4} described in Figures 4 and 5 computes the function in Figure 3 correctly
(Deﬁnition 1) in the F4AOT-hybrid (FB-4AOT-hybrid) model. We leave this explicit corroboration for
the full version of the paper.
w, and where pi
w||k2
w||k3
i=1pi
4.2 The actively secure 5PC protocol
The 5PC protocol proceeds through the following steps detailed below. All parties hold the circuit
C, security parameter κ, pseudorandom function family PRF, hash function H, and description
of the commitment scheme.
‘delta’, ‘perm’, ‘key’, ‘bitOT’, ‘strOT’ and ‘rand’ are known public
strings. Pi has a private input xi ∈ {0, 1}(cid:96). The circuit C(x1, x2, x3, x4, x5) is modiﬁed into a
2, x3||x(cid:48)
circuit C(cid:48)(x1, x2||x(cid:48)
4). The steps in the protocol are
as follows:
4) = C(x1, x2, x3, x4, x(cid:48)
3, x4||x(cid:48)
3 ⊕ x(cid:48)
2 ⊕ x(cid:48)
1.
Seed distribution. Parties P1, P2, P3, P4, known as the garblers, run a seed distribution
phase in which each party picks a seed si and the seeds are distributed such that every party
knows 3 seeds and every seed is held by 3 parties.
2. Garbled input generation. For garblers and evaluator:
w,0||k2
w,0||k3
Garblers. Consider an input wire w of party P1 with a bit value b. The two labels
corresponding to w are k1
w,1 and its permutation
bit is pw = ⊕j∈[4]pj
1.
w,1||k4
w. The goal is to let the evaluator P5 learn k1
w for all j ∈ [4] from the other parties (P1 will check the correctness
First, P1 learns pj
of these values by comparing the diﬀerent versions of these values he receives). P1
sets b(cid:48) = b ⊕ pj
w.
|| . . .||k4
w,0 and k1
w,1||k2
w,0||k4
w,1||k3
w,b⊕pw
w,b⊕pw
.
2. Observe that P1 can compute k1
on his own and send
them to P5. This is because P1 knows seeds s1, s3, and s4. We must also somehow
enable P5 to compute k2
w,b⊕pw
(without any other party learning this value and P5
itself learning anything else).
, and k4
w,b⊕pw
w,b⊕pw
w,b⊕pw
, k3
3. To do this, P1 will secret-share b(cid:48) among P2, P3 and P4; that is, they will receive
b2, b3, b4, respectively, such that b2 ⊕ b3 ⊕ b4 = b(cid:48).
P(cid:96), for (cid:96) ∈ {2, 3, 4} can compute k2
share of k2
that k2
w,b⊕pw
[2] ⊕ k2
[3] ⊕ k2
[4] = k2
[(cid:96)] := Fs2(‘key’||w||0) ⊕ Fs2(‘delta’) · b(cid:96) as a
. Through the secret sharing of b(cid:48) into b2, b3 and b4, we actually have
w,b(cid:96)
4.
w,b(cid:48) = k2
w,b⊕pw
.
w,b2
w,b3
w,b4
13
While the above steps work functionally, security breaks down, as P5 colluding with one
of the garblers can learn both wire labels. To prevent this, we have two garblers, P1 and
any other garbler, provide in addition secret sharings of 0 which each P2, P3 and P4 add to
their corresponding shares. These values will cancel out when combined, but will ensure
that P5 colluding with a garbler cannot learn anything else.
Evaluator. To compute the garbled label for the evaluator (P5)’s input, P5 ﬁrst secret-
shares his input with P1, P2, P3, P4, and now these shares can be treated as inputs of
P1, P2, P3, P4. However, a bit more care is needed to prevent Pi, i ∈ [4] lying about their
share of P5’s input. To prevent this, we have all parties provide commitments to all labels
and have the corresponding party “open” the right label to the right share. This is quite
similar to the technique used by Mohassel et al.
[MRZ15].
5. Distributed circuit garbling. Parties execute the distributed circuit garbling protocol
Π4gc(C,{P1, P2, P3, P4} from Figures 4 and 5. One party (say, P1) sends the distributed garbled
circuit to P5, while other parties send a hash of the garbled circuit. P5 accepts only if the
hashes of the distributed garbled circuit match.
6. Evaluation and output. P5 calls the Ev(Gf,·) procedure to evaluate the distributed garbled
circuit Gf received. The output labels Y are sent to all parties. Every party runs the De(d, Y )
to obtain the output of the computation, y.
The complete protocol, Π5pc(C,{P1, . . . , P5}), is described in Figure 6. The security of the