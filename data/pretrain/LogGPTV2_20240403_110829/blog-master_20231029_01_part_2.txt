数据二	: 浙江省杭州市 | 电信  
数据三	: 中国浙江省杭州市 | 电信  
URL	: http://www.cip.cc/183.159.23.85  
```  
4、速度问题分析     
有时候不稳定, 可能是bgp网络不稳定导致的. 可以尝试kill ssh后重新执行proxy.sh, 如:  
```  
ps -efw|grep ssh  
  501 96986     1   0 12:16下午 ??         0:07.84  ssh -CqtfnN -c aes128-ctr -o MACs PI:EMAIL -D 127.0.0.1:1111 digoal@ecs公网IP -p 22  
# 杀掉之前的ssh隧道
killall -c ssh 
~/proxy.sh  
```  
ciper 复杂度对速度也有一定的影响, 不过本文的瓶颈主要在1Mb的带宽, 这个带宽下加密算法复杂度对速度影响很小. 参考:       
- https://www.cnblogs.com/conanwang/p/5896203.html。   
5、配置chrome, 让chrome可以用代理来访问github.     
5\.1、下载方法1. 用safari 浏览器下载 SwitchyOmega_Chromium.crx 插件:    
- https://sourceforge.net/projects/switchyomega-proxies.mirror/files/    
5\.2、下载方法2. 如果你使用的是chrome, 可以在下载页面选中链接, 在另存为里面改一下保存的文件后缀为zip. 否则下载的crx文件会被自动删除.  
- https://proxy-switchyomega.com/download/
- https://proxy-switchyomega.com/file/Proxy-SwitchyOmega-Chromium-2.5.15.crx
- 最新版2.5.20 :  https://github.com/FelisCatus/SwitchyOmega/releases   
macOS shell, 解压SwitchyOmega_Chromium.crx:     
```  
cd ~/Downloads  
mkdir chrome_proxy
mv SwitchyOmega_Chromium.crx chrome_proxy/SwitchyOmega_Chromium.zip
cd ~/Downloads/chrome_proxy
unzip SwitchyOmega_Chromium.zip  
```  
配置chrome: URL栏右侧菜单栏 - 扩展程序 - 管理扩展程序 - 开启 开发者模式开关 - 加载已解压的扩展程序 - 选中`~/Downloads`目录 - 确认(忽略错误)      
配置chrome: URL栏右侧插件图标 - Proxy SwitchyOmega右侧钉子图标 (固定在导航栏方便配置)  
配置chrome Proxy SwitchyOmega插件: URL栏右侧插件图标 - Proxy SwitchyOmega - 选项   
5\.1、设置 情景模式: proxy   
```  
(默认) SOCKS5 127.0.0.1 1111  
```  
5\.2、设置 情景模式: auto switch  
```  
# 添加要走代理的网站, 不在配置里的URL都不走需要走代理  
*.github.com  使用 proxy  
默认情景模式: 直接连接  
```  
打开url, 配置使用auto switch模式:    
- chrome URL栏右侧插件图标 - Proxy SwitchyOmega - 选中auto switch    
自助添加需要代理的URL:    
- 打开网站时, SwitchyOmega"小圆点"图标里面会显示无法加载的网站(也可能是正在加载中), 点击小圆点, (勾选需要走代理的网址)点击"添加条件", 然后进入SwitchyOmega配置模式 - 点击"应用选项"会自动添加规则.  
导出PAC规则:   
- chrome URL栏右侧插件图标 - Proxy SwitchyOmega - 选项 - 情景模式 auto switch - 导出PAC    
```  
# 规则内容可以使用文本查看, 可能会得到类似如下结果:       
cat ~/Downloads/OmegaProfile_auto_switch.pac   
var FindProxyForURL = function(init, profiles) {
    return function(url, host) {
        "use strict";
        var result = init, scheme = url.substr(0, url.indexOf(":"));
        do {
            result = profiles[result];
            if (typeof result === "function") result = result(url, host, scheme);
        } while (typeof result !== "string" || result.charCodeAt(0) === 43);
        return result;
    };
}("+auto switch", {
    "+auto switch": function(url, host, scheme) {
        "use strict";
        if (/(?:^|\.)google\.com$/.test(host)) return "+proxy";
        if (/(?:^|\.)translate\.goog$/.test(host)) return "+proxy";
        if (/(?:^|\.)translate\.googleapis\.com$/.test(host)) return "+proxy";
        if (/(?:^|\.)gstatic\.com$/.test(host)) return "+proxy";
        if (/(?:^|\.)proxifier\.com$/.test(host)) return "+proxy";
        if (/(?:^|\.)youtubekids\.com$/.test(host)) return "+proxy";
        if (/(?:^|\.)avatars\.githubusercontent\.com$/.test(host)) return "+proxy";
        if (/(?:^|\.)raw\.githubusercontent\.com$/.test(host)) return "+proxy";
        if (/(?:^|\.)apsaradb\.github\.io$/.test(host)) return "+proxy";
        if (/(?:^|\.)duckduckgo\.com$/.test(host)) return "+proxy";
        if (/(?:^|\.)github\.com$/.test(host)) return "+proxy";
        if (/(?:^|\.)githubassets\.com$/.test(host)) return "+proxy";
        if (/(?:^|\.)camo\.githubusercontent\.com$/.test(host)) return "+proxy";
        if (/(?:^|\.)twitter\.com$/.test(host)) return "+proxy";
        if (/(?:^|\.)ads-twitter\.com$/.test(host)) return "+proxy";
        if (/(?:^|\.)twimg\.com$/.test(host)) return "+proxy";
        if (/(?:^|\.)wisdomfish\.org$/.test(host)) return "+proxy";
        if (/(?:^|\.)wikipedia\.org$/.test(host)) return "+proxy";
        if (/(?:^|\.)wikimedia\.org$/.test(host)) return "+proxy";
        if (/(?:^|\.)ytimg\.com$/.test(host)) return "+proxy";
        if (/(?:^|\.)googlevideo\.com$/.test(host)) return "+proxy";
        if (/(?:^|\.)youtube\.com$/.test(host)) return "+proxy";
        if (/(?:^|\.)google\.com\.sg$/.test(host)) return "+proxy";
        if (/(?:^|\.)ggpht\.com$/.test(host)) return "+proxy";
        if (/(?:^|\.)jnn-pa\.googleapis\.com$/.test(host)) return "+proxy";
        if (/(?:^|\.)googlesyndication\.com$/.test(host)) return "+proxy";
        if (/(?:^|\.)doubleclick\.net$/.test(host)) return "+proxy";
        if (/(?:^|\.)blogspot\.com$/.test(host)) return "+proxy";
        return "DIRECT";
    },
    "+proxy": function(url, host, scheme) {
        "use strict";
        if (/^127\.0\.0\.1$/.test(host) || /^::1$/.test(host) || /^localhost$/.test(host)) return "DIRECT";
        return "SOCKS5 127.0.0.1:1111; SOCKS 127.0.0.1:1111";
    }
});
```  
### git-clone, git-pull, git-push 使用ssh隧道代理
参考:  
- https://zhuanlan.zhihu.com/p/520414657  
1、macOS git-clone 使用ssh代理:  
方法1: 配置全局参数  
```  
# 配置  
git config --global http.proxy 'socks5://127.0.0.1:1111'  
git config --global https.proxy 'socks5://127.0.0.1:1111'  
# 查看配置  
cat ~/.gitconfig  
[https]  
	proxy = socks5://127.0.0.1:1111  
[http]  
	proxy = socks5://127.0.0.1:1111  
# git clone将使用ssh代理  
git clone --depth 1 https://github.com/digoal/blog blog-test  
```  
方法2: 单次clone使用ssh proxy:  
```  
git clone -c http.proxy=socks5://127.0.0.1:1111 https://github.com/digoal/blog blog-test  
```  
2、macOS git-clone , git-push , git-pull 使用github repo的esh地址:    
参考:
- https://zhuanlan.zhihu.com/p/481574024
- https://blog.csdn.net/qq_36006553/article/details/107302359
首先确保你的macOS和github 官网个人setting中都已经配对了key:    
- [《github只能通过key认证了》](../202108/20210814_02.md)    
配置macOS本地`.ssh/config`:  
```  
vi ~/.ssh/config  
Host github.com  
  User git  
  Port 22  
  Hostname github.com  
  # 注意修改路径为你的ssh key路径  
  IdentityFile "/Users/digoal/.ssh/id_rsa"  
  TCPKeepAlive yes  
  # 如果不想使用ssh代理, 注释ProxyCommand这行即可. 更多信息查看 man nc    
  ProxyCommand nc -v -x 127.0.0.1:1111 %h %p  
Host ssh.github.com  
  User git  
  Port 443  
  Hostname ssh.github.com  
  # 注意修改路径为你的ssh key路径  
  IdentityFile "/Users/digoal/.ssh/id_rsa"  
  TCPKeepAlive yes  
  # 如果不想使用ssh代理, 注释ProxyCommand这行即可. 更多信息查看 man nc    
  ProxyCommand nc -v -x 127.0.0.1:1111 %h %p  
```  
找一个项目, 使用ssh地址进行clone:  
- https://github.com/duckdb/duckdb  
code下拉框中拷贝SSH clone地址如下:  
- `PI:EMAIL:duckdb/duckdb.git`  
克隆:   
```  
git clone --depth 1 PI:EMAIL:duckdb/duckdb.git duckdb-test  
Cloning into 'duckdb-test'...  
Connection to github.com port 22 [tcp/ssh] succeeded!  # 这行信息实际上就是nc的-v开关打印的详细信息, 表示已经使用了ssh代理
Enter passphrase for key '/Users/digoal/.ssh/id_rsa':   
...  
```  
注释`~/.ssh/config` ProxyCommand 表示不使用代理后, 克隆信息变化如下:    
```  
vi ~/.ssh/config  
# 不想使用ssh代理, 注释ProxyCommand这行即可. 更多信息查看 man nc    
# ProxyCommand nc -v -x 127.0.0.1:1111 %h %p  
# 测试如下:   
git clone --depth 1 PI:EMAIL:duckdb/duckdb.git duckdb-test  
# nc 打印的信息没了, 表示没有使用ssh代理:  
Cloning into 'duckdb-test'...  
Enter passphrase for key '/Users/digoal/.ssh/id_rsa':   
...  
```  
### chrome 谷歌翻译的使用
chrome谷歌翻译插件无法生效, 可能是插件不支持使用ssh代理的原因. 有网页翻译需求的同学, 可以使用翻译功能的web版, 将需要翻译的URL输入即可:     
- https://translate.google.com/  
    - 点击网站, 在里面输入需要翻译的网址.    
如果你还想研究一下如何实现chrome插件的谷歌翻译如何使用ssh代理, 可以参考:  
- https://www.typemylife.com/use-proxifier-to-visit-chrome-built-in-google-translate/  
## 搭建 openVPN     
如果你想更加通用一点, 也可以把这台ecs配置成OpenVPN server, 客户端通过VPN拨号的形式来配置适当的路由.    
参考:   
- https://cn.bing.com/search?q=debian+openvpn&PC=U316&FORM=CHROMN  
- https://zhuanlan.zhihu.com/p/654448500
- https://haydenjames.io/improving-openvpn-performance-and-throughput/
- https://www.digitalocean.com/community/tutorials/how-to-set-up-an-openvpn-server-on-debian-11/
- https://kifarunix.com/install-openvpn-server-on-debian-11-debian-10/
### ecs, openVPN Server:    
```  
ssh root@ecs公网IP  
apt update   
apt install openvpn  
```  
更多配置, 待补充     
### CA Server:   
为了提高安全性, 使用另一台server来颁发证书, 例如使用我的学习镜像, 也是base on debian 11.7.  
macOS, 启动docker容器     
```  
# 拉取镜像, 第一次拉取一次即可. 或者需要的时候执行, 将更新到最新镜像版本.    
docker pull registry.cn-hangzhou.aliyuncs.com/digoal/opensource_database:pg14_with_exts    
# 启动容器    
docker run -d -it -P --cap-add=SYS_PTRACE --cap-add SYS_ADMIN --privileged=true --name pg --shm-size=1g --entrypoint /bin/bash registry.cn-hangzhou.aliyuncs.com/digoal/opensource_database:pg14_with_exts_arm64  
# 进入容器    
docker exec -ti pg bash  
```  
如何在容器中颁发证书, 待补充     
### macOS openVPN client:   
待补充  
### iOS openVPN client:   
待补充  
### 路由器 VPN client:
待补充  
#### [期望 PostgreSQL|开源PolarDB 增加什么功能?](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
#### [PolarDB 云原生分布式开源数据库](https://github.com/ApsaraDB "57258f76c37864c6e6d23383d05714ea")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、内核开发公开课、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [PostgreSQL 解决方案集合](../201706/20170601_02.md "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")