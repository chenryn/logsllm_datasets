title:Bounding Peer-to-Peer Upload Traffic in Client Networks
author:Chun-Ying Huang and
Chin-Laung Lei
Bounding Peer-to-Peer Upload Trafﬁc in Client Networks∗
Chun-Ying Huang
National Taiwan University
PI:EMAIL
Chin-Laung Lei
National Taiwan University
PI:EMAIL
Abstract
Peer-to-peer technique has now become one of the ma-
jor techniques to exchange digital content between peers
of the same interest. However, as the amount of peer-to-
peer trafﬁc increases, a network administrator would like
to control the network resources consumed by peer-to-peer
applications. Due to the use of random ports and protocol
encryption, it is hard to identify and apply proper control
policies to peer-to-peer trafﬁc. How do we properly bound
the peer-to-peer trafﬁc and prevent it from consuming all
the available network resources?
In this paper, we propose an algorithm that tries to
approximately bound the network resources consumed by
peer-to-peer trafﬁc without examining packet payloads.
Our methodology especially focuses on upload trafﬁc for
that the upload bandwidth for an ISP are usually more pre-
cious than download bandwidth. The method is constructed
in two stages. First, we observe several trafﬁc character-
istics of peer-to-peer applications and traditional client-
server based Internet services. We also observe the generic
trafﬁc properties in a client network. Then, based on the
symmetry of network trafﬁc in both temporal and spatial
domains, we propose to use a bitmap ﬁlter to bound the net-
work resources consumed by peer-to-peer applications. The
proposed algorithm takes only constant storage and com-
putation time. The evaluation also shows that with a small
amount of memory, the peer-to-peer trafﬁc can be properly
bounded close to a predeﬁned amount.
1 Introduction
The behavior of traditional Internet applications is sim-
ple. That is, a client sends a request to an Internet server
and then receives replies from the server. Network re-
∗This work is supported in part by the National Science Council under
the Grants NSC 95-3114-P-001-001-Y02 and NSC 95-2218-E-002-038,
and by the Taiwan Information Security Center (TWISC), National Science
Council under the Grants No. NSC 95-2218-E-001-001 and NSC 95-2218-
E-011-015.
source management for these applications is also simple.
To manage the network trafﬁc of a speciﬁc network ser-
vice, a network administrator can easily apply trafﬁc con-
trol policies to trafﬁc that communicates using correspond-
ing server ports. However, as the emerging of peer-to-peer
technologies, modern popular services like ﬁle sharing and
video streaming now leverage peer-to-peer technologies to
increase the availability and the performance of the ser-
vices. Therefore, it also brings new challenges to network
resource management. The major reason is that the peer-
to-peer trafﬁc is more difﬁcult to identify. First, peer-to-
peer applications tend to communicate using random ports
and thus it is hard to deﬁne port-based control policies for
such network trafﬁc. Second, as any one can develop their
own protocols, even if network administrators are able to
identify network trafﬁc by analyzing packet payloads, it is
impossible to know all peer-to-peer protocols beforehand.
Besides, the use of “protocol encryption” (PE), “message
stream encryption” (MSE), and “protocol header encryp-
tion” (PHE) also complicates the problem. Since the PE,
MSE, and PHE encrypts the parts of peer-to-peer proto-
col messages in payloads, it also increases the difﬁculties
to identify peer-to-peer trafﬁc.
Recent studies have shown that the peer-to-peer trafﬁc
has gradually dominated the Internet trafﬁc. While ISPs
are usually charged based on the trafﬁc they send upstream
to their providers, they would like to keep trafﬁc generated
by their customers within the boundaries of their own ad-
ministrative domains. However, this conﬂicts with the core
spirit of peer-to-peer applications, which encourages clients
to share what they possess to the public. The more the
clients share, the more the uplink bandwidth are consumed
for the share. From the view point of network adminis-
trators, the precious uplink bandwidth should be used for
client requests, not for the shares. To reserve the uplink
bandwidth for the right purposes, peer-to-peer upload traf-
ﬁc should be properly controlled in a client network. As
we already knew that peer-to-peer trafﬁc is hard to identify,
how do we control these unknown uplink trafﬁc in a client
networks?
An effective method to achieve this goal is adopting a
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:50:17 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007positive listing strategy. That is, the client network allows
only outbound requests initiated by clients in the network.
At the same time, to keep peer-to-peer applications work-
ing, a limited amount of the uplink bandwidth could still be
allowed for those applications. While peer-to-peer upload
trafﬁc are mostly triggered by inbound requests, by limiting
the inbound requests, the upload trafﬁc can be constrained
to a given bounds. To do this, a stateful packet inspection
(SPI) ﬁlter can be installed at the entry points of a client net-
work to maintain the per-ﬂow state of each outbound con-
nection. The SPI ﬁlter tracks the states of network ﬂows that
pass it. It allows all outbound requests and the correspond-
ing inbound responses. However, on receipt of inbound re-
quests, the SPI ﬁlter decides to accept or reject the request
according to the uplink bandwidth throughput. Applying
such a mechanism in an ISP-like scale network may incur
a high computational cost as the required storage space and
computation complexity depends linearly on the number of
concurrent active connections, which may be in the order of
tens of thousands or even millions.
In this paper, we try to solve the above problem with an
efﬁcient and effective method. An bitmap ﬁlter algorithm is
proposed to maintain outbound connection states and per-
mit inbound connections according to monitored bandwidth
throughput. The effectiveness of the bitmap ﬁlter is similar
to that of an SPI ﬁlter, but it requires only constant storage
space and computational resources.
The remainder of this paper is organized as follows. In
Section 2, we review some previous works that are related
to our solution. In Section 3, we observe several client net-
work trafﬁc characteristics that are useful to construct our
solution. In Section 4, we discuss the usage model and the
detailed design of the proposed solution. In Section 5, we
then evaluate the effectiveness and the performance of the
solution. Finally, in Section 6, we present our conclusions.
2 Related Works
A great deal of research effort has been devoted to peer-
to-peer networks.
In [1], the authors investigate several
characteristics of peer-to-peer trafﬁc, which includes the
bottleneck bandwidths, latencies, the degree of peer coop-
erations, etc.
In [2], the authors analyze the peer-to-peer
trafﬁc by measuring ﬂow level information and show that
the high volume and good stability properties of peer-to-
peer trafﬁc makes it a good candidate for being managed in
an ISP network. Authors of [3] and [4] also show that the
amount of peer-to-peer trafﬁc keeps growing and now it has
now become one of the major Internet applications.
In contrast to our solution, authors of [5] purpose to save
the download bandwidth by caching those shared data. The
cache system works only when it can identify and under-
stand the peer-to-peer protocols. To identify peer-to-peer
trafﬁc, besides counting on well-known ports, Sen et al. [6]
developed a signature-based methodology to identify peer-
to-peer trafﬁc. However, the use of “protocol encryption”
(PE) makes it difﬁcult to detect peer-to-peer trafﬁc using
payload identiﬁcation. In [4], Karagiannis et al. try to iden-
tify peer-to-peer trafﬁc without examining the payloads.
The proposed PTP algorithm performs well on identiﬁca-
tion of unknown peer-to-peer trafﬁc. Nevertheless, the al-
gorithm use a table to records ﬂow states, which may be not
suitable to operate in a real-time and large-scale environ-
ment.
To limit the peer-to-peer upload trafﬁc, we believe that
an SPI-based ﬁlter is a possible solution for client networks.
However, since SPI-based ﬁlters have to keep all per-ﬂow
states in detail, adopting it incurs high cost for an ISP. Take
a popular SPI implementation in the Linux open-source op-
erating system as an example. The required storage space
grows linearly according to the number of kept ﬂows. Be-
sides, the data structures used to maintain these states are
basically link-lists with an indexed hash table. It is obvi-
ous that both the storage and computation complexities are
O(n), which is not affordable for a larger ISP containing
several client networks.
3 The Client Network Trafﬁc Characteristics
3.1 Network Setup
Our packet traces are collected in a subnet of our campus
network. Most of hosts in the subnetwork are clients. The
trace collection environment is illustrated in Figure 1. A
trafﬁc monitor is used to receive and analyze both inbound
and outbound trafﬁc of the subnetwork. The trafﬁc moni-
tor is a Fedora Core 5 Linux equipped with dual-processor
Intel Xeon 3.2G and a Broadcom BCM95721 gigabit net-
work interface. To save the storage space for packet traces,
the traces are collected in three different stages. First, we
collect full packet traces (including both packet headers
and full payloads) using the well-known tcpdump [7] pro-
gram. The full packet traces are then used to verify the
correctness of our customized trafﬁc analyzer. The veriﬁed
analyzer is ﬁnally used to extract useful information from
packet payloads on-line and simultaneously collect header
packet traces, which contains only layer 2 to layer 4 packet
headers, for future use. The design of the customized trafﬁc
analyzer is introduced later in Section 3.2.
3.2 The Traﬃc Analyzer
One purpose of the trafﬁc analyzer is to identify net-
work applications from current network connections. A
network connection is identiﬁed by a ﬁve tuple socket pair,
which includes the layer 4 protocol (TCP or UDP), the
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:50:17 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007Internet
Campus
Network
U
plin
k
Port mirror
Traffic Monitor
L3 switch
Figure 1. The network setup for packet trace
collection. The trafﬁc sent to the campus
network is inbound trafﬁc while trafﬁc in the
other direction is outbound trafﬁc.
source address, the source port, the destination address,
and the destination port. An example of a socket pair s
is {TCP, A, x, B, y}. Since packets of the same connec-
tion are transmitted in different directions between two end
hosts, the inverse of a socket pair, s = {TCP, B, y, A, x},
also identiﬁes the same connection. In our trafﬁc analyzer, it
ﬁrst classiﬁes packets into connections and then try to iden-
tify the application of each connection.
Two methods are used to identify the applications. As
we know that many modern applications, for example, peer-
to-peer applications, do not use ﬁxed ports to communi-
cate, we ﬁrst try to identify application by matching the
packet payloads against several predeﬁned patterns. To do
so, the analyzer must have the ability to examine the pay-
loads either by reading the full packet traces collected by
the tcpdump program or by accessing packets directly
through the network interface. The analyzer focuses only
on TCP and UDP trafﬁc for that these two are the major
data transmission protocols used over Internet. Packets with
incorrect checksum values are not considered for examina-
tion.
The payload of each UDP packet is always examined.
However, to guarantee the completeness of payloads in a
TCP connection, we only examine TCP connections with an
explicitly TCP-SYN packet, which indicates the beginning
of a TCP connection. Unlike the examination for UDP data
packets, the pattern matching algorithm does not match for
a single TCP data packet. Instead, it matches a concatenated
TCP data stream against the patterns. For a TCP connec-
tion, we have to concatenate payloads of several very ﬁrst
data packets1 to form a short TCP stream. The algorithm
then matches the concatenated data stream against all the
patterns. The patterns used for pattern matching are writ-
ten in the form of regular expressions. Most of these pat-
terns are adopted from the L7-ﬁlter project [8]. Examples
1In our program, we concatenate at most four TCP data packets. This
is because most of the patterns used to check the connection type are short
and thus it is not necessary to store and check the full TCP data stream.
of some of these patterns are listed in Table 1. If it is failed
to identify an application by pattern matching, the analyzer
then tries to identify by matching the port numbers of the
connection against well-known port numbers.
To focus more on ﬁle exchanging applications, we use
two alternative strategies to identify peer-to-peer and FTP
applications, respectively. For the ease of explanations, a
network connection c is denoted by c = {A : x → B : y},
where A is a client that connects to a service provider B on
port y using port x. In the ﬁrst strategy, if c is identiﬁed as
one of the peer-to-peer applications, all future connections
to B : y are also identiﬁed as the same application. In the
second strategy, since we know that the FTP command and
the FTP data are transmitted in separated connections, if c is
identiﬁed as an FTP application, all payloads of the identi-
ﬁed connection are examined to identify the corresponding
FTP data connections speciﬁed in a FTP command connec-
tion.
Another purpose of the analyzer is to measure and log
some fundamental properties of network connections for
further trafﬁc analyses. These properties include the direc-
tion (inbound or outbound) of a network connection, the
number of packets and bytes transmitted in each direction,
the lifetime of a connection, and the out-in packet delays.
To keep the original trafﬁc patterns and save the storage
spaces, payloads of all processed packets are stripped and
then stored using the same format as the tcpdump pro-
gram.
3.3 Traﬃc Characteristics
Based on the information collected by the trafﬁc ana-
lyzer, we make several observations on these trafﬁc. The
observations are done on a 7.5-hour TCP and UDP packet
trace, which was collected in the environment introduced
in Section 3.1.
In the 7.5-hour packet trace, there were
6739733 collected connections. Among all the connec-
tions, 29.8% were TCP connections and 70.1% were UDP
connections. Although there are more UDP connections,
99.5% bandwidth are contributed by TCP trafﬁc. The av-
erage bandwidth throughput of this trace was 146.7 Mbps,
where 10.2% were download trafﬁc and 89.8% were up-
load trafﬁc. The ﬁrst observation is the distributions of each
observed applications. Among the observed applications,
5% are HTTP/HTTP-PROXY trafﬁc, 55% are peer-to-peer
trafﬁc (including bittorrent, edonkey, and gnutella), 5% are
other traditional internet services, and most of trafﬁc (35%)
are still unidentiﬁed. A brief summary of the protocol dis-
tribution can be found in Table 2.
The second observation focuses on the port number dis-
tributions of network connections. We classify all the port
numbers into four different classes, namely “ALL”, “P2P”,
“Non-P2P”, and “UNKNOWN”. For each TCP connec-
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:50:17 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007Table 1. Patterns and ports used to identify network applications.
Application
Regular Expressions
bittorrent
edonkey
fasttrack
gnutella
\x13bittorrent protocol|d1:ad2:id20:|\x08'7P\)[RP]|^azver\x01$|^get /scrape?info_hash=
^[\xc5\xd4\xe3-\xe5].?.?.?.?([\x01\x02\x05\x14\x15\x16\x18\x19\x1a\x1b\x1c\x20\x21\x32\
x33\x34\x35\x36\x38\x40\x41\x42\x43\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\
x53\x54\x55\x56\x57\x58[\x60\x81\x82\x90\x91\x93\x96\x97\x98\x99\x9a\x9b\x9c\x9e\xa0\
xa1\xa2\xa3\xa4]|\x59................?[ -~]|\x96....$)
^get (/.download/[ -~]*|/.supernode[ -~]|/.status[ -~]|/.network[ -~]*|/.files|/.hash=[0-9a-f]*/
[ -~]*) http/1.1|user-agent: kazaa|x-kazaa(-username|-network|-ip|-supernodeip|-xferid|-
xferuid|tag)|^give [0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]?[0-9]?[0-9]?
^(gnd[\x01\x02]?.?.?\x01|gnutella connect/[012]\.[0-9]\x0d\x0a|get /uri-res/n2r\
?urn:sha1:|get /.*user-agent: (gtk-gnutella|bearshare|mactella|gnucleus|gnotella|limewire|
imesh)|get /.*content-type: application/x-gnutella-packets|giv [0-9]*:[0-9a-f]*/|queue [0-9a-f]* 
[1-9][0-9]?[0-9]?\.[1-9][0-9]?[0-9]?\.[1-9][0-9]?[0-9]?\.[1-9][0-9]?[0-9]?:[1-9][0-9]?[0-9]?[0-