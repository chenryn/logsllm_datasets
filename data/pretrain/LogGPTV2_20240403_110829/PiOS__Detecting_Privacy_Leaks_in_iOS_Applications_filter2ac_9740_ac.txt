propagation. That is, constant values are propagated along
the slice according to the semantics of the instructions. For
example, MOV operations copy a value from one register
to another,3 and LDR and STR instructions access memory
locations.
4.2.2 Tracking Type Information
PiOS does not track (the addresses of) individual instances
of classes allocated during runtime. Thus, the question in
the previous example is how to handle the return value of
the alloc function, which returns a dynamic (and hence,
unknown pointer) to a string object. Our key insight is that,
for our purposes, the actual address of the string object is
not important. Instead, it is only important to know that R0
points to an object of type NSMutableString. Thus, we
do not only propagate constants along a slice, but also type
information.
In our example, PiOS can determine the return type of
the alloc method call at address 0x2672 (the alloc
method always returns the same type as its receiver;
NSMutableString in this case). This type information
is then propagated along the slice. As a result, at address
0x267c, we have at our disposal the crucial information that
R0 contains an object of type NSMutableString.
To determine the types of function arguments and return
values, our system uses two sources of information. First,
for all external methods, the header ﬁles specify the precise
argument and return types. Unfortunately, there is no such
information for the methods implemented in the application
binary. More precisely, although the data structure that de-
scribes class and instance methods does contain a ﬁeld that
lists the parameter types, the stored information is limited
to basic types such as integer, Boolean, or character. All
object arguments are deﬁned as a single type id and, hence,
cannot be distinguished easily.
Therefore, as a second source for type information,
PiOS attempts to resolve the precise types of all arguments
marked as id. To this end, the system examines, for each
method, all call sites that invoke this method. For the iden-
tiﬁed call sites, the system tries to resolve the parameter
types by performing the above-mentioned backward slicing
and constant propagation steps. Once a parameter type is
identiﬁed, the meta-data for the method can be updated ac-
cordingly. That is, we are building up a database as we learn
additional type information for method call arguments.
3GCC seems to frequently implement such register transfers as SUB
Rd, Rs, #0, or ADD Rd, Rs, #0.
NSMutableString *v;
v = [[NSMutableString alloc] initWithString : @’’Hello’’]
Listing 1. Simple Objective-C expression
LDR
__text:00002668 30 49
LDR
__text:0000266A 31 48
LDR
__text:0000266C 0C 68
LDR
__text:0000266E 00 68
__text:00002670 21 46
MOV
__text:00002672 00 F0 32 E9 BLX
LDR
__text:00002676 2F 49
__text:00002678 2F 4A
LDR
__text:0000267A 09 68
LDR
__text:0000267C 00 F0 2C E9 BLX
R1, =off_3154
R0, =off_31A0
R4, [R1]
R0, [R0]
R1, R4
_objc_msgSend
R1, =off_3190
R2, =cfstr_Hello
R1, [R1]
_objc_msgSend
; NSMutableString alloc
; NSMutableString
initWithString:
Listing 2. Disassembly of Listing 1
Frequently, messages are sent to objects that are returned
as results of previous method calls. As with method input
arguments, precise return type information is only available
for functions whose prototypes are deﬁned in header ﬁles.
However, on the ARM architecture, the return value of a
method is always returned in register R0. Thus, for methods
that have an implementation in the binary and whose return
type is not a basic type, PiOS can derive the return type by
determining the type of the value stored in R0 at the end of
the called method’s body. For this, we again use backward
slicing and forward constant propagation. Starting with the
last instruction of the method whose return type should be
determined, PiOS calculates the slice that deﬁnes the type
of register R0 at this program location.
4.3 Generating the Control Flow Graph
Once PiOS has determined the type of R0 and the con-
tent of R1 at a given call site to objc_msgSend, the sys-
tem checks whether these values are “reasonable.” To this
end, PiOS veriﬁes that the class hierarchy contains a class
that matches the type of R0, and that this class, or any of
its superclasses or categories, really implements the method
whose name is stored as the selector in R1. Of course, stat-
ically determining the necessary values is not always possi-
ble. However, note that in cases where only the selector can
be determined, PiOS can still reason about the type of the
value in R0 if there is exactly one class in the application
that implements the selector in question.
When PiOS can resolve the target of a function call
through the dispatch routine, this information is leveraged
to build the control ﬂow graph of the application. More pre-
cisely, when the target of a method call (the recipient of the
message) is known, and the implementation of this method
is present in the binary under analysis (and not in a dynamic
library), PiOS adds an edge from the call site to the target
method.
5 Finding Potential Privacy Leaks
The output of the process described in the previous sec-
tion is an inter-procedural control ﬂow graph of the applica-
tion under analysis. Based on this graph, we perform reach-
ability analysis to detect privacy leaks. More precisely,
we check the graph for the presence of paths from sources
(functions that access sensitive data) to sinks (functions that
transmit data over the network). In the current implementa-
tion of PiOS, we limited the maximum path length to 100
basic blocks.
Interestingly, the way in which iOS implements and han-
dles user interactions implicitly disrupts control ﬂow in the
CFG. More precisely, user interface events are reported to
the application by sending messages to delegate objects that
contain the code to react to these events. These messages
are not generated from code the developer wrote, and thus,
there is no corresponding edge in our CFG. As a result,
when there is a user interaction between the point where a
source is accessed, and data is transmitted via a sink, there
will never be a path in our CFG. Thus, all paths from sen-
sitive sources to sinks represent potential privacy leaks. Of
course, a path from a source to a sink does not necessar-
ily mean that there is an actual data ﬂow. Hence, we per-
form additional data ﬂow analysis along an interesting path
and attempt to conﬁrm that sensitive information is actually
leaked.
5.1 Sources and Sinks
In this section, we discuss in more detail how we identify
sources of sensitive data and sinks that could leak this data.
Sources. Sources of sensitive information cover many as-
pects of the iOS environment. Table 1 enumerates the re-
sources that we consider sensitive. As mentioned previ-
ously, this list is based on [17], where Seriot presents a com-
prehensive list of potentially sensitive information that can
be accessed by iOS applications.
Access to the address book
Current GPS coordinates of the device
Unique Device ID
Photo Gallery
Email account information
WiFi connection information
Phone related information (Phone# , last called, etc.)
Youtube application (watched videos and recent search)
MobileSafari settings and history
Keyboard cache
Table 1. Sensitive information sources.
Any iOS application has full read and write access to
the address book stored on the device. Access is provided
through the ABAddressBook API. Thus, whenever an ap-
plication performs the initial ABAddressBookCreate
call, we mark this call instruction a source.
An application can only access current GPS coordi-
nates if the user has explicitly granted the application per-
mission to do so. This is enforced by the API, which
displays a dialog to the user the ﬁrst time an applica-
tion attempts to access the CoreLocation functional-
ity. If access is granted, the application can install a del-
egate with the CoreLocation framework that is noti-
ﬁed whenever the location is updated by the system. More
precisely,
invoke
the locationManager:didUpdateToLocation:
fromLocation method of the object that is passed to the
CLLocationManager:setDelegate method when-
ever the location is updated.
the CoreLocation framework will
A unique identiﬁer for the iOS device executing the
application is available to all applications through the
UIDevice uniqueIdentifier method. This ID is
represented as a string of 40 hexadecimal characters that
uniquely identiﬁes the device.
The keyboard cache is a local ﬁle accessible to all appli-
cations. This ﬁle contains all words that have been typed
on the device. The only exception are characters typed into
text ﬁelds marked to contain passwords.
Furthermore, there exist various property ﬁles that pro-
vide access to different pieces of sensitive information. The
commcenter property ﬁle contains SIM card serial num-
bers and IMSI identiﬁers. The user’s phone number can
be accessed by querying the standardUserDefaults
properties. Email account settings are accessible through
the accountsettings properties ﬁle. Similar ﬁles ex-
ist that contain the history of the Youtube and MobileSafari
applications, as well as recent search terms used in these
applications. The wifi properties ﬁle contains the name of
wireless networks the device was connected to. Also, a time
stamp is stored, and the last time when each connection was
active is logged. Accesses related to these properties are all
considered sensitive sources by PiOS.
Sinks. We consider sinks as operations that can transmit
information over the network, in particular, methods of the
NSURLConnection class. However, there are also meth-
ods in other classes that might result in network requests,
and hence, could be used to leak data. For example, the
method initWithContentsOfURL of the NSString
class accepts a URL as parameter, fetches the content at
that URL, and initializes the string object with this data.
To ﬁnd functions that could leak information, we carefully
went through the API documentation. In total, we included
14 sinks.
5.2 Dataﬂow Analysis
Reachability analysis can only determine that there ex-
ists a path in the CFG that connects a source of sensitive
information to a sink that performs networking operations.
However, these two operations might be unrelated. Thus,
to enhance the precision of PiOS, we perform an additional
data ﬂow analysis on the paths that the reachability analysis
reports. That is, for every path that connects a source and a
sink in the CFG, we track the propagation of the informa-
tion accessed at the source node. If this data reaches one or
more method parameters at the sink node, we can conﬁrm a
leak of sensitive information, and an alert is raised.
We use a standard data ﬂow analysis that uses forward
propagation along the instructions in each path that we have
identiﬁed. For methods whose implementation (body) is
not available in the binary (e.g., external methods such as
initWithString of the NSMutableString class),
we conservatively assume that the return value of this func-
tion is tainted when one or more one of the arguments is
tainted.
Methods with variable number of arguments. To de-
termine whether the output of an external function should
input arguments.
be tainted, we need to inspect all
This makes functions with a variable number of argu-
ments a little more tricky to handle.
The two ma-
jor types of such functions are string manipulation func-
tions that use a format string (e.g., NSMutableString
appendStringWithFormat), and initialization func-
tions for aggregate types that fetch the objects to be placed
in the aggregate from the stack (e.g., NSDictionary
initWithObjects:andKeys).
Ignoring these func-
tions is not a good option – especially because string manip-
ulation routines are frequently used for processing sensitive
data.
For string methods that use format strings, PiOS attempts
to determine the concrete value (content) of the format
string. If the value can be resolved statically, the number of
arguments for this call is determined by counting the num-
ber of formatting characters. Hence, PiOS can, during the
data ﬂow analysis, taint the output of such a function if any
of its arguments is tainted.
The initialization functions fetch the contents for the ag-
gregate from the stack until the value NULL is encountered.
Thus, PiOS iteratively tries to statically resolve the values
on the stack.
If a value statically resolves to NULL, the
number of arguments for this call can be determined. How-
ever, since it is not guaranteed that the NULL value can be
determined statically, we set the upper bound for the num-
ber of parameters to 20.
6 Evaluation
We evaluated PiOS on a body of 1,407 applications. 825
are free applications that we obtained from Apple’s iTunes
store. We downloaded the remaining 582 applications from
the popular BigBoss [1] repository which is installed by
default with Cydia [12] during jailbreaking. Applications
originating from the Cydia repositories are not encrypted.
Therefore, these applications can be directly analyzed by
PiOS. Applications purchased from the iTunes store, how-
ever, need to be decrypted before any binary analysis can
be started. Thus, we automated the decryption approach
described in Section 3.3.
Since iTunes does not support direct searches for free ap-
plications, we rely on apptrakr.com [2] to provide a contin-
uously updated list of popular, free iOS applications. Once
a new application is added to their listings, our system au-
tomatically downloads the application via iTunes and de-
crypts it. Subsequently, the application is analyzed with
PiOS.
6.1 Resolving Calls to objc msgSend
As part of the static analysis process, PiOS attempts to
resolve all calls to the objc_msgSend dispatch function.
More precisely, for each call to objc_msgSend, the sys-
tem reasons about the target method (and class) that would
be invoked during runtime (described in Section 4.2) by the
dispatch routine. This is necessary to build the program’s
control ﬂow graph.
During the course of evaluating PiOS on 1,407 applica-
tions, we identiﬁed 4,156,612 calls to the message dispatch
function. PiOS was able to identify the corresponding class
and method for 3,408,421 call sites (82%). Note that PiOS
reports success only if the inferred class exists in the class
hierarchy, and the selector denotes a method that is imple-
mented by the class, or its ancestors in the hierarchy. These
results indicate that a signiﬁcant portion of the CFGs can be
successful reconstructed, despite the binary analysis chal-
lenges.
6.2 Advertisement and Tracking Libraries
PiOS resolves all calls to the objc_msgSend function
regardless of whether the target method in the binary was