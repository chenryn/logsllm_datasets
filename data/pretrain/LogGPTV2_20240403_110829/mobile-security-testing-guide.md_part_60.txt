A very complete explanation about the use of these key can be found here.
Let's see a real-world example. We will take a File Manager app and take a look at these keys. We used objection
here to read the Info.plist file.
objection --gadget SomeFileManager run ios plist cat Info.plist
Note that this is the same as if we would retrieve the IPA from the phone or accessed via e.g. SSH and
navigated to the corresponding folder in the IPA / app sandbox. However, with objection we are just one
command away from our goal and this can be still considered static analysis.
The first thing we noticed is that app does not declare any imported custom document types but we could find a
couple of exported ones:
UTExportedTypeDeclarations = (
439
iOS Platform APIs
{
UTTypeConformsTo = (
"public.data"
);
UTTypeDescription = "SomeFileManager Files";
UTTypeIdentifier = "com.some.filemanager.custom";
UTTypeTagSpecification = {
"public.filename-extension" = (
ipa,
deb,
zip,
rar,
tar,
gz,
...
key,
pem,
p12,
cer
);
};
}
);
The app also declares the document types it opens as we can find the key CFBundleDocumentTypes :
CFBundleDocumentTypes = (
{
...
CFBundleTypeName = "SomeFileManager Files";
LSItemContentTypes = (
"public.content",
"public.data",
"public.archive",
"public.item",
"public.database",
"public.calendar-event",
...
);
}
);
We can see that this File Manager will try to open anything that conforms to any of the UTIs listed in
LSItemContentTypes and it's ready to open files with the extensions listed in UTTypeTagSpecification/"public.filename-
extension" . Please take a note of this because it will be useful if you want to search for vulnerabilities when dealing
with the different types of files when performing dynamic analysis.
Dynamic Analysis
Sending Items
There are three main things you can easily inspect by performing dynamic instrumentation:
The activityItems : an array of the items being shared. They might be of different types, e.g. one string and one
picture to be shared via a messaging app.
The applicationActivities : an array of UIActivity objects representing the app's custom services.
The excludedActivityTypes : an array of the Activity Types that are not supported, e.g. postToFacebook .
To achieve this you can do two things:
Hook the method we have seen in the static analysis ( init(activityItems:applicationActivities:) ) to get the
activityItems and applicationActivities .
440
iOS Platform APIs
Find out the excluded activities by hooking excludedActivityTypes property.
Let's see an example using Telegram to share a picture and a text file. First prepare the hooks, we will use the Frida
REPL and write a script for this:
Interceptor.attach(
ObjC.classes.
UIActivityViewController['- initWithActivityItems:applicationActivities:'].implementation, {
onEnter: function (args) {
printHeader(args)
this.initWithActivityItems = ObjC.Object(args[2]);
this.applicationActivities = ObjC.Object(args[3]);
console.log("initWithActivityItems: " + this.initWithActivityItems);
console.log("applicationActivities: " + this.applicationActivities);
},
onLeave: function (retval) {
printRet(retval);
}
});
Interceptor.attach(
ObjC.classes.UIActivityViewController['- excludedActivityTypes'].implementation, {
onEnter: function (args) {
printHeader(args)
},
onLeave: function (retval) {
printRet(retval);
}
});
function printHeader(args) {
console.log(Memory.readUtf8String(args[1]) + " @ " + args[1])
};
function printRet(retval) {
console.log('RET @ ' + retval + ': ' );
try {
console.log(new ObjC.Object(retval).toString());
} catch (e) {
console.log(retval.toString());
}
};
You can store this as a JavaScript file, e.g. inspect_send_activity_data.js and load it like this:
$ frida -U Telegram -l inspect_send_activity_data.js
Now observe the output when you first share a picture:
[*] initWithActivityItems:applicationActivities: @ 0x18c130c07
initWithActivityItems: (
" size {571, 264} orientation 0 scale 1.000000"
)
applicationActivities: nil
RET @ 0x13cb2b800:
[*] excludedActivityTypes @ 0x18c0f8429
RET @ 0x0:
nil
441
iOS Platform APIs
and then a text file:
[*] initWithActivityItems:applicationActivities: @ 0x18c130c07
initWithActivityItems: (
"",
""
)
applicationActivities: (
)
RET @ 0x13c4bdc00:
[*] excludedActivityTypes @ 0x18c0f8429
RET @ 0x1c001b1d0:
(
"com.apple.UIKit.activity.MarkupAsPDF"
)
You can see that:
For the picture, the activity item is a UIImage and there are no excluded activities.
For the text file there are two different activity items and "com.apple.UIKit.activity.MarkupAsPDF" is excluded.
In the previous example, there were no custom applicationActivities and only one excluded activity. However, to
better illustrate what you can expect from other apps we have shared a picture using another app, here you can see a
bunch of application activities and excluded activities (output was edited to hide the name of the originating app):
[*] initWithActivityItems:applicationActivities: @ 0x18c130c07
initWithActivityItems: (
""
)
applicationActivities: (
"",
"",
"",
""
)
RET @ 0x142138a00:
[*] excludedActivityTypes @ 0x18c0f8429
RET @ 0x14797c3e0:
(
"com.apple.UIKit.activity.Print",
"com.apple.UIKit.activity.AssignToContact",
"com.apple.UIKit.activity.SaveToCameraRoll",
"com.apple.UIKit.activity.CopyToPasteboard",
)
Receiving Items
After performing the static analysis you would know the document types that the app can open and if it declares any
custom document types and (part of) the methods involved. You can use this now to test the receiving part:
Share a file with the app from another app or send it via AirDrop or e-mail. Choose the file so that it will trigger the
"Open with..." dialogue (that is, there is no default app that will open the file, a PDF for example).
Hook application:openURL:options: and any other methods that were identified in a previous static analysis.
Observe the app behaviour.
In addition, you could send specific malformed files and/or use a fuzzing technique.
To illustrate this with an example we have chosen the same real-world file manager app from the static analysis
section and followed these steps:
442
iOS Platform APIs
1. Send a PDF file from another Apple device (e.g. a MacBook) via Airdrop.
2. Wait for the "AirDrop" popup to appear and click on Accept.
3. As there is no default app that will open the file, it switches to the "Open with..." popup. There, we can select the
app that will open our file. The next screenshot shows this (we have modified the display name using Frida to
conceal the app's real name):
4. After selecting "SomeFileManager" we can see the following:
(0x1c4077000) -[AppDelegate application:openURL:options:]
application: 
openURL: file:///var/mobile/Library/Application%20Support
/Containers/com.some.filemanager/Documents/Inbox/OWASP_MASVS.pdf
options: {
UIApplicationOpenURLOptionsAnnotationKey = {
LSMoveDocumentOnOpen = 1;
};
UIApplicationOpenURLOptionsOpenInPlaceKey = 0;
UIApplicationOpenURLOptionsSourceApplicationKey = "com.apple.sharingd";
"_UIApplicationOpenURLOptionsSourceProcessHandleKey" = "";
}
0x18c7930d8 UIKit!__58-[UIApplication _applicationOpenURLAction:payload:origin:]_block_invoke
...
0x1857cdc34 FrontBoardServices!-[FBSSerialQueue _performNextFromRunLoopSource]
RET: 0x1
443
iOS Platform APIs
As you can see, the sending application is com.apple.sharingd and the URL's scheme is file:// . Note that once we
select the app that should open the file, the system already moved the file to the corresponding destination, that is to
the app's Inbox. The apps are then responsible for deleting the files inside their Inboxes. This app, for example,
moves the file to /var/mobile/Documents/ and removes it from the Inbox.
(0x1c002c760) -[XXFileManager moveItemAtPath:toPath:error:]
moveItemAtPath: /var/mobile/Library/Application Support/Containers
/com.some.filemanager/Documents/Inbox/OWASP_MASVS.pdf
toPath: /var/mobile/Documents/OWASP_MASVS (1).pdf
error: 0x16f095bf8
0x100f24e90 SomeFileManager!-[AppDelegate __handleOpenURL:]
0x100f25198 SomeFileManager!-[AppDelegate application:openURL:options:]
0x18c7930d8 UIKit!__58-[UIApplication _applicationOpenURLAction:payload:origin:]_block_invoke
...
0x1857cd9f4 FrontBoardServices!__FBSSERIALQUEUE_IS_CALLING_OUT_TO_A_BLOCK__
RET: 0x1
If you look at the stack trace, you can see how application:openURL:options: called __handleOpenURL: , which called
moveItemAtPath:toPath:error: . Notice that we have now this information without having the source code for the target
app. The first thing that we had to do was clear: hook application:openURL:options: . Regarding the rest, we had to
think a little bit and come up with methods that we could start tracing and are related to the file manager, for example,
all methods containing the strings "copy", "move", "remove", etc. until we have found that the one being called was
moveItemAtPath:toPath:error: .
A final thing worth noticing here is that this way of handling incoming files is the same for custom URL schemes.
Please refer to "Testing Custom URL Schemes" for more information.
App Extensions
Overview
What are app extensions
Together with iOS 8, Apple introduced App Extensions. According to Apple App Extension Programming Guide, app
extensions let apps offer custom functionality and content to users while theyâ€™re interacting with other apps or the
system. In order to do this, they implement specific, well scoped tasks like, for example, define what happens after the
user clicks on the "Share" button and selects some app or action, provide the content for a Today widget or enable a
custom keyboard.
Depending on the task, the app extension will have a particular type (and only one), the so-called extension points.
Some notable ones are:
Custom Keyboard: replaces the iOS system keyboard with a custom keyboard for use in all apps.
Share: post to a sharing website or share content with others.
Today: also called widgets, they offer content or perform quick tasks in the Today view of Notification Center.
How do app extensions interact with other apps
There are three important elements here:
App extension: is the one bundled inside a containing app. Host apps interact with it.
Host app: is the (third-party) app that triggers the app extension of another app.
Containing app: is the app that contains the app extension bundled into it.
For example, the user selects text in the host app, clicks on the "Share" button and selects one "app" or action from
the list. This triggers the app extension of the containing app. The app extension displays its view within the context of
the host app and uses the items provided by the host app, the selected text in this case, to perform a specific task
444
iOS Platform APIs
(post it on a social network, for example). See this picture from the Apple App Extension Programming Guide which
pretty good summarizes this:
Security Considerations
From the security point of view it is important to note that:
An app extension does never communicate directly with its containing app (typically, it isnâ€™t even running while
the contained app extension is running).
An app extension and the host app communicate via inter-process communication.
An app extensionâ€™s containing app and the host app donâ€™t communicate at all.
A Today widget (and no other app extension type) can ask the system to open its containing app by calling the
openURL:completionHandler: method of the NSExtensionContext class.
Any app extension and its containing app can access shared data in a privately defined shared container.
In addition:
App extensions cannot access some APIs, for example, HealthKit.
They cannot receive data using AirDrop but do can send data.
No long-running background tasks are allowed but uploads or downloads can be initiated.
App extensions cannot access the camera or microphone on an iOS device (except for iMessage app
extensions).
Static Analysis
The static analysis will take care of:
Verifying if the app contains app extensions
Determining the supported data types
Checking data sharing with the containing app
Verifying if the app restricts the use of app extensions
Verifying if the App Contains App Extensions
If you have the original source code you can search for all occurrences of NSExtensionPointIdentifier with Xcode
(cmd+shift+f) or take a look into "Build Phases / Embed App extensions":
445
iOS Platform APIs
There you can find the names of all embedded app extensions followed by .appex , now you can navigate to the
individual app extensions in the project.
If not having the original source code:
Grep for NSExtensionPointIdentifier among all files inside the app bundle (IPA or installed app):
$ grep -nr NSExtensionPointIdentifier Payload/Telegram\ X.app/
Binary file Payload/Telegram X.app//PlugIns/SiriIntents.appex/Info.plist matches
Binary file Payload/Telegram X.app//PlugIns/Share.appex/Info.plist matches
Binary file Payload/Telegram X.app//PlugIns/NotificationContent.appex/Info.plist matches
Binary file Payload/Telegram X.app//PlugIns/Widget.appex/Info.plist matches
Binary file Payload/Telegram X.app//Watch/Watch.app/PlugIns/Watch Extension.appex/Info.plist matches
You can also access per SSH, find the app bundle and list all inside PlugIns (they are placed there by default) or do it
with objection:
ph.telegra.Telegraph on (iPhone: 11.1.2) [usb] # cd PlugIns
/var/containers/Bundle/Application/15E6A58F-1CA7-44A4-A9E0-6CA85B65FA35/
Telegram X.app/PlugIns
ph.telegra.Telegraph on (iPhone: 11.1.2) [usb] # ls