类似于Visual Studio中的服务引用添加，Svcutil实用程序需要元数据来创建代理类。
Svcutil实用程序可以通过MEX元数据端点、程序集的元数据或者WSDL和XSD文档创建代
理。
    svcutil http://localhost:8080/RoomReservation? wsdl /language:C# /out:proxy.c
s
    svcutil CourseRegistration.dll
    svcutil CourseRegistration.wsdl CourseRegistration.xsd
生成代理类后，它需要从客户端代码中实例化，再调用方法，最后必须调用Close方
法：
    var client = new RoomServiceClient();
    client.RegisterForCourse(roomReservation);
    client.Close();
44.7.2 共享类型
生成的代理类派生自基类ClientBase，该基类封装
ChannelFactory类。除了使用生成的代理类之外，还可以直接使用
ChannelFactory类。构造函数需要绑定和端点地址；之后，就可以创建信道，
调用服务协定定义的方法。最后，必须关闭该工厂。
    var binding = new WsHttpBinding();
    var address = new EndpointAddress("http://localhost:8080/RoomService");
    var factory = new ChannelFactory(binding, address);
    IRoomService channel = factory.CreateChannel();
     channel.ReserveRoom(roomReservation);
     // etc.
     factory.Close();
ChannelFactory类有几个属性和方法，如表44-8所示。
表44-8
ChannelFactory类的成员
说明
Credentials
Credentials是一个只读属性，可以访问
ClientCredentials对象，该对象被赋予信道，对服务
进行身份验证。凭据可以用端点来设置
Endpoint
Endpoint是一个只读属性，可以访问与信道相关联
的ServiceEndpoint。端点可以在构造函数中分配
State
State属性的类型是CommunicationState，它返回信
道的当前状态。CommunicationState是一个枚举，
其值是Created、Opening、Opened、Closing、
Closed和Faulted
Open
该方法用于打开信道
Close
该方法用于关闭信道
Opening、Opened、Closing、
Closed和Faulted
可以指定事件处理程序，从而确定信道的状态变
化。这些事件分别在信道打开前后、信道关闭前后
和出错时触发
44.8 双工通信
下面的示例程序说明了如何在客户端和服务之间直接进行双工通信。客户端会启动到
服务的连接。之后，服务就可以回调客户端了。前面的WebSocket协议也演示了双工通
信。除了使用WebSocket协议（只有Windows 8和Windows Server 2012支持它）之外，双
工通信还可以使用WSHttpBinding和NetTcpBinding来实现。
44.8.1 双工通信的协定
为了进行双工通信，必须指定一个在客户端实现的协定。这里用于客户端的协定由
IMyMessageCallback接口定义。由客户端实现的方法是OnCallback。操作应用了
IsOneWay=true操作协定设置。这样，服务就不必等待方法在客户端上成功调用了。默认
情况下，服务实例只能从一个线程中调用（参见服务行为的ConcurrencyMode属性，其默
认设置为ConcurrencyMode.Single）。
如果服务的实现代码回调客户端并等待获得客户端的结果，则从客户端获得回应的线
程就必须等待，直到锁定服务对象为止。因为服务对象已经被客户端的请求锁定，所以出
现了死锁。WCF检测到这个死锁，抛出一个异常。为了避免这种情况，可以将
ConcurrencyMode属性的值改为Multiple或Reentrant。使用Multiple设置，多个线程可以同
时访问实例。这里必须自己实现锁定。使用Reentrant设置，服务实例将只使用一个线程，
但允许将回调请求的回应重新输入到上下文中。除了改变并发模式之外，还可以用操作协
定指定IsOneWay属性。这样，调用者就不会等待回应了。当然，只有不需要返回值，才
能使用这个设置。
服务协定由IMyMessage接口定义。回调协定用服务协定定义的CallbackContract属性
映射到服务协定上（代码文件DuplexCommunication/MessageService/IMyMessage.cs）。
    public interface IMyMessageCallback
    {
      [OperationContract(IsOneWay=true)]
      void OnCallback(string message);
    }
    [ServiceContract(CallbackContract=typeof(IMyMessageCallback))]
    public interface IMyMessage
    {
      [OperationContract]
      void MessageToServer(string message);
    }
44.8.2 用于双工通信的服务
MessageService类实现了服务协定IMyMessage。服务将来自客户端的消息写入控制
台。要访问回调协定，可以使用OperationContext类。OperationContext.Current返回与客户
端中的当前请求关联的OperationContext。使用OperationContext可以访问会话信息、消息
标题和属性，在双工通信的情况下还可以访问回调信道。泛型方法GetCallbackChannel将
信道返回给客户端实例。接着可以调用由回调接口IMyMessageCallback定义的OnCallback
方法，使用这个信道将消息发送给客户端。为了演示这些操作，还可以从服务中使用独立
于方法的完成的回调信道，创建一个接收回调信道的新线程。这个新线程再次使用回调信
道，将消息发送给客户端（代码文件
DuplexCommunication/MessageService/MessageService.cs）。
    public class MessageService: IMyMessage
    {
      public void MessageToServer(string message)
      {
        WriteLine($"message from the client: {message}");
        IMyMessageCallback callback =
          OperationContext.Current.GetCallbackChannel();
        callback.OnCallback("message from the server");
        Task.Run(() => TaskCallback(callback));
      }
      private async void TaskCallback(object callback)
      {
        IMyMessageCallback messageCallback = callback as IMyMessageCallback;
        for (int i = 0; i 
44.8.3 用于双工通信的客户应用程序
在客户应用程序中，必须用ClientCallback类实现回调协定，该类实现了
IMyMessageCallback接口，如下所示（代码文件
DuplexCommunication/MessageClient/Program.cs）：
    class ClientCallback: IMyMessageCallback
    {
      public void OnCallback(string message)
      {
        WriteLine($"message from the server: {message}");
      }
    }
在双工信道中，不能像前面那样使用ChannelFactory启动与服务的连接。要创建双工
信道，可以使用DuplexChannelFactory类。这个类有一个构造函数，除了绑定和地址配置
之外，它还有一个参数。这个参数指定InstanceContext，它封装ClientCallback类的一个实
例。把这个实例传递给工厂时，服务可以通过信道调用对象。客户端只需要使连接一直处
于打开状态。如果关闭连接，则服务就不能通过它发送消息。
    private async static void DuplexSample()
    {
      var binding = new WSDualHttpBinding();
      var address = new EndpointAddress("http://localhost:8733/Service1");
      var clientCallback = new ClientCallback();
      var context = new InstanceContext(clientCallback);
      var factory = new DuplexChannelFactory(context, binding,
        address);
      IMyMessage messageChannel = factory.CreateChannel();
      await Task.Run(() => messageChannel.MessageToServer("From the client"));
    }
启动服务宿主和客户应用程序，就可以实现双工通信。
44.9 路由
与HTTP GET请求和REST相比，使用SOAP协议有一些优点。SOAP的一个高级功能
是路由。通过路由，客户端不直接寻址服务，而是由客户端和服务器之间的路由器传送请
求。
可以在不同的情形下使用这个功能，一种情形是故障切换（如图44-10所示）。如果
服务无法到达或者返回了一个错误，路由器就调用另一个宿主上的服务。这是从客户端抽
象出来的，客户端只是接收一个结果。
图44-10
路由也可以用于改变通信协议（如图44-11所示）。客户端可以使用HTTP协议调用请
求，把它发送给路由器。路由器用作带net.tcp协议的客户端，调用服务来发送消息。
图44-11
使用路由来实现可伸缩性是另一种情形（如图44-12所示）。根据消息标题的一个字
段或者来自消息内容的信息，路由器可以确定把请求发送给三个服务器中的其中一个服务
器。来自客户的、以A～F字母开头的请求会发送给第一个服务器，以G～N字母开头的请
求会发送给第二个服务器，以Q～Z字母开头的请求会发送给第三个服务器。
图44-12
44.9.1 路由示例应用程序
在路由示例应用程序中，定义一个简单的服务协议，其中调用者可以从IDemoService
接口调用GetData操作（代码文件RoutingSample/DemoService/IDemoService.cs）：
    using System.ServiceModel;
    namespace Wrox.ProCSharp.WCF
    {
      [ServiceContract(Namespace="http://www.cninnovation.com/Services/2016")]
      public interface IDemoService
      {
        [OperationContract]
        string GetData(string value);
      }
    }
服务的实现代码仅用GetData方法返回一条消息，该消息包含接收到的信息和一个在
宿主上初始化的服务器端字符串。这样就可以看到给客户端返回调用的宿主（代码文件
RoutingSample/DemoService/DemoService.cs）。
    using System;
    using static System.Console;
    namespace Wrox.ProCSharp.WCF
    {
      public class DemoService : IDemoService
      {
        public static string Server { get; set; }
        public string GetData(string value)
        {
        string message = $"Message from {Server}, You entered: {value}";
        WriteLine(message);
        return message;
        }
      }
    }
两个示例宿主仅创建了一个ServiceHost实例，打开它以启动监听器。每个定义的宿主
都把不同的值赋予DemoService的Server属性。
44.9.2 路由接口
对于路由，WCF定义了接口ISimplexDataGramRouter、ISimplexSessionRouter、
IRequestReplay-Router和IDuplexSessionRouter。根据服务协定，可以使用不同的接口。
ISimplexDataGramRouter可用于OperationContract为IsOneWay的操作。对于
ISimplexDataGramRouter，会话是可选的。ISimplexSessionRouter可用于单向消息，例如
ISimplexDataGramRouter，但这里会话是强制的。IRequestReplayRouter用于最常见的情
形：请求和响应消息。接口IDuplexSessionRouter用于双工通信（例如前面使用的
WSDualHttpBinding）。
根据所使用的消息模式，定制路由器需要实现对应的路由器接口。
44.9.3 WCF路由服务
不创建定制路由器的话，可以使用名称空间System.ServiceModel.Routing中的
RouterService。这个类实现了所有的路由接口，因此可以用于所有的消息模式。它可以像
其他服务那样驻留。在StartService方法中，通过传递RoutingService类型实例化了一个新
的ServiceHost。这类似于前面的其他宿主（代码文件RoutingSample/Router/Program.cs）。
      using System;
      using System.ServiceModel;
      using System.ServiceModel.Routing;
      using static System.Console;
      namespace Router
      {
        class Program
        {
          internal static ServiceHost s_routerHost = null;
          static void Main()
          {
          StartService();
          WriteLine("Router is running. Press return to exit");
          ReadLine();
          StopService();
          }
          internal static void StartService()
          {
          try
          {
            _routerHost = new ServiceHost(typeof(RoutingService));
            _routerHost.Faulted += myServiceHost_Faulted;
            _routerHost.Open();
          }
          catch (AddressAccessDeniedException)
          {
            WriteLine("either start Visual Studio in elevated admin " +
              "mode or register the listener port with netsh.exe");
          }
          }
          static void myServiceHost_Faulted(object sender, EventArgs e)
          {
          WriteLine("router faulted");
          }
          internal static void StopService()
          {
          if (_routerHost ! = null &&
              _routerHost.State == CommunicationState.Opened)
          {
            _routerHost.Close();
          }
          }
        }
      }
44.9.4 为故障切换使用路由器
比宿主代码更有趣的是路由器的配置。路由器用作客户应用程序的服务器和服务的客
户端，所以两者都需要配置。如下所示的配置提供了wsHttpBinding作为服务器部件，使
用wsHttpBinding作为客户端来连接服务。服务端点需要指定用于该端点的协定。使用服
务提供的请求-回应操作，协定由IRequestReplyRouter接口定义（配置文件
Router/App.config）。