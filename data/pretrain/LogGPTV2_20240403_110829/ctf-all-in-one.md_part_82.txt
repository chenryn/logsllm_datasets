5.9 基于模式的漏洞分析
成整数溢出漏洞。
1. 根据污点传播等方法，映射可控的输入数据在程序中的处理过程，在此基
础上，定位与整数操作相关联的输入数据，并分析程序在对可控输入数据
进行运算和赋值操作前，是否对其进行了完备验证
2. 根据定义的漏洞模式，分别判断是否匹配，匹配过程要根据实际的二进制
程序对可控整数的使用，来判断可控整数是否会影响内存分配类的关键操
作
3. 根据漏洞模式匹配情况和溢出造成的危险操作，得到最终结果
内存地址对象破坏性调用漏洞模式：如 use-after-free。
1. 需要分析函数的功能，检测是否存在内存地址释放型函数以及内存地址调用型
函数
2. 检测函数调用的顺序是否正常
3. 检测函数调用过程中，是否针对特定对象发生内存地址破坏性调用的异常情
况，如果存在，则说明存在漏洞
859
5.10 基于二进制比对的漏洞分析
5.10 基于二进制比对的漏洞分析
基本原理
方法实现
基本原理
软件开发商为了修补软件系统的各种漏洞或缺陷所提供的修补程序被称为软件补
丁。对于开源软件，补丁本身就是程序源代码，打补丁的过程就是用补丁中的源代
码替换原有的代码。而对于闭源软件，厂商只提供修改后的二进制代码，例如微软
的Windows系统补丁。这时就需要使用二进制代码比对技术，定位补丁所修补的软
件漏洞。
二进制代码比对的根本目的是寻找补丁前后程序的差异。这里所说的差异是指语义
上的差异，即程序在执行时所表现出的不同的逻辑行为。通过二进制代码比对定位
出有差异的函数，再经过进一步的人工分析，可以确定出二进制补丁对程序执行逻
辑上的修改，从而推测漏洞位置及成因，辅助漏洞挖掘工作。
主要的实现原理有如下几种：
基于文本的比对：最简单的比对方式，其比对的对象分为两种，即二进制文件
和反汇编代码
二进制文件的文本比对：对打补丁前后的两个二进制文件逐字节进行比
对，能够全面地检测出程序中微小的变化，缺点是完全不考虑程序的逻辑
信息，漏洞定位精度差，误报率高。
反汇编代码的文本比对：将二进制程序先经过反汇编，然后对反汇编代码
进行文本比对，比对结果中包含一定的程序逻辑信息，但同样对程序的变
得十分敏感，有很大的局限性。
基于同构图的比对：依托于图论知识，首先对可执行程序的控制流图进行抽
象，将二进制程序转化为一个有向图，即将二进制比对问题转化为图论中的图
同构问题。这种方法的优点是不会漏掉非结构化的差异，但其受编译器优化的
影响较大。
基于结构化的比对：为了克服基于同构图比对的缺陷，该技术主要关注可执行
文件逻辑结构上的变化，而不是某一条反汇编指令的变化。
综合比对技术：在上述基本比对技术的基础上，进行多种比对技术的综合应
860
5.10 基于二进制比对的漏洞分析
用。
方法实现
基于文本的比对
基于二进制文件的文本比对仅适用于查找文件中极少量字节差异。过程如下：
将两个二进制文件作为两个输入字符串，每一个二进制字节就相当于字符串中
的一个字符
通过最长公共子序列算法，在两个文件中从头向后搜索最长公共子序列，进行
比对
每当找到一个最长公共子序列，意味着找到了一段指令的匹配，并继续向后搜
索最长公共子序列
比对进行到文件结尾，比对结束
基于反汇编代码的文本比对实际上是一种指令级别的比对方法，研究指令之间的相
似性和差异性：
相似：即两条指令的语义完全相同。判定规则如下：
两条指令的二进制字节完全相同
指令的 opcode 相同或者两条指令同为无条件跳转或条件跳转指令
同时满足这些条件：opcode完全相同；两条指令的opcode格式的对应域
值相等
相近：即两条指令具有相同的 opcode 和操作数列表
可忽略：如果某条指令为NOP指令，或者是只有唯一后继节点的JMP指令
不同：两条指令中的一条被标记为“可忽略”
基于图同构的比对
在构造可执行文件的图的时候，做出如下假设：
不同版本的两个目标文件从本质上是不同构的，算法的目标是找到一个最佳匹
配映射，而不需要穷尽所有匹配
可执行文件提供的基本信息可作为匹配的起点
生成的有向图中，大部分顶点只有一个入口和一个出口
图中的顶点有可比较的属性，包括操作码、操作数等
861
5.10 基于二进制比对的漏洞分析
不对整个图进行同构匹配，而是寻找图中某一部分的同构匹配
基于同构图比对的技术可分为两种：
指令级图同构比对算法：两个需要比对的可执行文件分别构造成图，以指令、
数据常量、函数调用指令等作为顶点，以控制流图的边作为图的边。对生成的
两个图做同构识别，用同构算法找到最相似的两个部分作为同构部分。然后，
对两个图的非同构部分继续识别其是否同构，直至全部识别结束
1. 分析两个二进制文件，获得函数、引用表、字符串等。对于函数，生成函
数流程图。图中的节点表示单一的指令，图中的边表示指令间所有可能的
执行顺序
2. 识别比较的开始点，可以是程序入口点，也可以分析导出函数表，匹配相
应的导出函数，作为比较的起始点。将这些地址放入一个分析队列中
3. 处理队列，对于每一个需要比对的地址对，分析该地址处对象的类型，并
进行比较。如果类型不同，则失败；否则，比较对象，相同则加入到同构
图中，并向队列中加入新的比较地址对
函数级图形化比对算法：基于指令级图同构算法，从导出函数和程序入口点开
始，根据函数名字的对应关系把相应函数的地址作为比较的入口。从导出函数
的入口地址出发，把指令作为图的节点，每一个函数都画出一个完整的图，然
后根据算法比对两个图是否同构。比对算法如下：
1. 以两个函数的入口地址开始，维护一个地址对队列
2. 如果队列非空，从队列中取出一对地址，比较两个地址处的指令，如果已
经同构，跳回2；如果“相似”，归为同构一类并标记为“相似”，然后将两个
对应的后继地址添加到队列中，跳回2；如果“可忽略”，将忽略的指令放入
忽略节点集合，并将忽略指令的后继指令的地址与另一条指令地址组合成
一个地址对，加入队列，跳回2；如果“相近”，归为同构一类并标记为“相
近”，然后将两个对应的后继地址加入队列，跳回2
3. 比对完成，判断两个函数对应的图形是否同构
862
5.11 反编译技术
5.11 反编译技术
863
5.11.1 RetDec
5.11.1 RetDec
RetDec 简介
安装
使用方法
r2pipe decompiler
参考资料
前面介绍过 IDA Pro，其 F5 已经具有巨强大的反编译能力了，但这本书一直到现
在，由于本人的某种执念，都是在硬怼汇编代码，没有用到 IDA，虽说这样能锻炼
到我们的汇编能力，但也可以说是无故加大了逆向的难度。但现在事情出现了转
机，安全公司 Avast 开源了它的反编译器 RetDec，能力虽不及 IDA，目前也只支
持 32 位，但好歹有了第一步，未来会好起来的。
RetDec 简介
RetDec 是一个可重定向的机器码反编译器，它基于 LLVM，支持各种体系结构、
操作系统和文件格式：
支持的文件格式：ELF，PE，Mach-O，COFF，AR（存档），Intel HEX 和原
始机器码。
支持的体系结构（仅限 32 位）：Intel x86，ARM，MIPS，PIC32 和
PowerPC。
安装
在 Linux 上，你需要自己构建和安装。
安装依赖：
$ sudo apt-get install build-essential cmake coreutils wget bc g
raphviz upx flex bison zlib1g-dev libtinfo-dev autoconf pkg-conf
ig m4 libtool
把项目连同子模块一起拉下来：
864
5.11.1 RetDec
$ git clone --recursive https://github.com/avast-tl/retdec
接下来要注意了，由于项目自己的问题，在运行 cmake 的时候一定指定一个干净
的目录，不要在默认的 /usr 或者 /usr/local 里，可以像下面这样：
$ cd retdec
$ mkdir build && cd build
$ cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local/retdec
$ make && sudo make install
入门
安装完成后，我们用 helloword 大法试一下，注意将其编译成 32 位：
#include 
int main() {
printf("hello world!\n");
return 0;
}
运行 decompile.sh 反编译它，我们截取出部分重要的过程和输出：
$ /usr/local/retdec/bin/decompile.sh a.out
##### Checking if file is a Mach-O Universal static library...
RUN: /usr/local/retdec/bin/macho-extractor --list /home/firmy/te
st/a.out
##### Checking if file is an archive...
RUN: /usr/local/retdec/bin/ar-extractor --arch-magic /home/firmy
/test/a.out
##### Gathering file information...
RUN: /usr/local/retdec/bin/fileinfo -c /home/firmy/test/a.out.c.
json --similarity /home/firmy/test/a.out --no-hashes=all --crypt
o /usr/local/retdec/bin/../share/generic/yara_patterns/signsrch/
signsrch.yara
865
5.11.1 RetDec
##### Trying to unpack /home/firmy/test/a.out into /home/firmy/t
est/a.out-unpacked.tmp by using generic unpacker...
RUN: /usr/local/retdec/bin/unpacker -d /usr/local/retdec/bin/unp
acker-plugins -o /home/firmy/test/a.out-unpacked.tmp /home/firmy
/test/a.out
##### Trying to unpack /home/firmy/test/a.out into /home/firmy/t
est/a.out-unpacked.tmp by using UPX...
RUN: upx -d /home/firmy/test/a.out -o /home/firmy/test/a.out-unp
acked.tmp
##### Decompiling /home/firmy/test/a.out into /home/firmy/test/a
.out.c.backend.bc...
RUN: /usr/local/retdec/bin/bin2llvmir -provider-init -config-pat
h /home/firmy/test/a.out.c.json -decoder -disable-inlining -disa
ble-simplify-libcalls -inst-opt -verify -volatilize -instcombine
-reassociate -volatilize -control-flow -cfg-fnc-detect -main-de
tection -register -stack -control-flow -cond-branch-opt -syscall
s -idioms-libgcc -constants -param-return -local-vars -type-conv
ersions -simple-types -generate-dsm -remove-asm-instrs -select-f
ncs -unreachable-funcs -type-conversions -stack-protect -verify
-instcombine -tbaa -targetlibinfo -basicaa -domtree -simplifycfg
-domtree -early-cse -lower-expect -targetlibinfo -tbaa -basicaa
-globalopt -mem2reg -instcombine -simplifycfg -basiccg -domtree
-early-cse -lazy-value-info -jump-threading -correlated-propaga
tion -simplifycfg -instcombine -simplifycfg -reassociate -domtre
e -loops -loop-simplify -lcssa -loop-rotate -licm -lcssa -instco
mbine -scalar-evolution -loop-simplifycfg -loop-simplify -aa -lo
op-accesses -loop-load-elim -lcssa -indvars -loop-idiom -loop-de
letion -memdep -gvn -memdep -sccp -instcombine -lazy-value-info
-jump-threading -correlated-propagation -domtree -memdep -dse -d
ce -bdce -adce -die -simplifycfg -instcombine -strip-dead-protot
ypes -globaldce -constmerge -constprop -instnamer -domtree -inst
combine -never-returning-funcs -adapter-methods -class-hierarchy
-instcombine -tbaa -targetlibinfo -basicaa -domtree -simplifycf
g -domtree -early-cse -lower-expect -targetlibinfo -tbaa -basica
a -globalopt -mem2reg -instcombine -simplifycfg -basiccg -domtre
e -early-cse -lazy-value-info -jump-threading -correlated-propag
ation -simplifycfg -instcombine -simplifycfg -reassociate -domtr
866
5.11.1 RetDec
ee -loops -loop-simplify -lcssa -loop-rotate -licm -lcssa -instc
ombine -scalar-evolution -loop-simplifycfg -loop-simplify -aa -l
oop-accesses -loop-load-elim -lcssa -indvars -loop-idiom -loop-d
eletion -memdep -gvn -memdep -sccp -instcombine -lazy-value-info
-jump-threading -correlated-propagation -domtree -memdep -dse -
dce -bdce -adce -die -simplifycfg -instcombine -strip-dead-proto
types -globaldce -constmerge -constprop -instnamer -domtree -ins
tcombine -simple-types -stack-ptr-op-remove -type-conversions -i
dioms -instcombine -global-to-local -dead-global-assign -instcom
bine -stack-protect -phi2seq -o /home/firmy/test/a.out.c.backend
.bc
##### Decompiling /home/firmy/test/a.out.c.backend.bc into /home
/firmy/test/a.out.c...
RUN: /usr/local/retdec/bin/llvmir2hll -target-hll=c -var-renamer
=readable -var-name-gen=fruit -var-name-gen-prefix= -call-info-o
btainer=optim -arithm-expr-evaluator=c -validate-module -llvmir2
bir-converter=orig -o /home/firmy/test/a.out.c /home/firmy/test/
a.out.c.backend.bc -enable-debug -emit-debug-comments -config-pa
th=/home/firmy/test/a.out.c.json
##### Done!
总共输出下面几个文件：
$ ls
a.out a.out.c a.out.c.backend.bc a.out.c.backend.ll a.out.c.
frontend.dsm a.out.c.json
可以看到 RetDec 可以分为三个阶段：
预处理阶段：首先检查文件类型是否为可执行文件，然后调用 fileinfo 获
取文件信息生成 a.out.c.json ，然后调用 unpacker 查壳和脱壳等操作
核心阶段：接下来才是重头戏，调用 bin2llvmir 将二进制文件转换成
LLVM IR，并输出 a.out.c.frontend.dsm 、 a.out.c.backend.ll 和
a.out.c.backend.bc
后端阶段：这个阶段通过一系列代码优化和生成等操作，将 LLVM IR 反编译成
C 代码 a.out.c ，还有 CFG 等。
867
5.11.1 RetDec
整个过程的结构如下：
decompile.sh 有很多选项，使用 decompile.sh -h 查看。
比如反编译指定函数：
$ /usr/local/retdec/bin/decompile.sh --select-functions main a.o
ut
反编译指定的一段地址：
$ /usr/local/retdec/bin/decompile.sh --select-ranges 0x51d-0x558
a.out
生成函数 CFG 图（.dot格式）：
$ /usr/local/retdec/bin/decompile.sh --backend-emit-cfg a.out
r2pipe decompiler
radare2 通过 r2pipe 脚本，利用 retdec.com 的 REST API 提供了反编译的功能，
所以你首先要到网站上注册，拿到免费的 API key。
安装上该模块，当然你可能需要先安装上 npm，它是 JavaScript 的包管理器：
$ git clone https://github.com/jpenalbae/r2-scripts.git
$ cd r2-scripts/decompiler/
$ npm install
868
5.11.1 RetDec
将 API key 写入到 ~/.config/radare2/retdec.key 中，然后就可以开心地反
编译了。
还是 helloworld 的例子，用 r2 打开，反编译 main 函数。
869
5.11.1 RetDec
[0x000003e0]> #!pipe node /home/firmy/r2-scripts/decompiler/deco
mpile.js @ main
Start: 0x51d
End: 0x558
Uploading binary to retdec.com
Please wait for decompilation to finish....
//
// This file was generated by the Retargetable Decompiler
// Website: https://retdec.com
// Copyright (c) 2017 Retargetable Decompiler 
//
#include 
#include 
// ------------------------ Functions -------------------------
// Address range: 0x51d - 0x558
int main() {
int32_t v1;
int32_t v2 = __x86_get_pc_thunk_ax((int32_t)&v1, 0);
puts((char *)(v2 + 175));
return 0;
}
// --------------- Dynamically Linked Functions ---------------
// int puts(const char * s);
// --------------------- Meta-Information ---------------------
// Detected compiler/packer: gcc (7.2.0)
// Detected functions: 1
// Decompiler release: v2.2.1 (2016-09-07)