# On the Forensic Validity of Approximated Audit Logs

**Authors:**
- Noor Michael
- Jaron Mink
- Jason Liu
- Sneha Gaur
- Wajih Ul Hassan
- Adam Bates

**Affiliation:**
- University of Illinois at Urbana-Champaign
- Contact: [PI:EMAIL]

## Abstract

Auditing is an essential tool for defending computing systems, but the large volume of log data poses significant challenges for administrators and analysts. Various techniques have been proposed to approximate the contents of raw audit logs, enabling efficient storage and analysis. However, the security value of these approximations is difficult to quantify, as it is unclear whether they retain the forensic evidence needed to effectively investigate threats. Prior work has only provided anecdotal evidence for specific attack scenarios.

In this paper, we address this gap by formalizing metrics to quantify the forensic validity of approximated audit logs under different threat models. We also identify a novel approach in the approximation design space: typical (benign) system activity can be aggressively approximated, while events encoding anomalous behavior should be preserved with lossless fidelity. We introduce LogApprox, a new approximation technique that eliminates the redundancy of voluminous file I/O associated with benign process activities. Our evaluation shows that LogApprox achieves comparable log reduction rates while retaining 100% of attack-identifying log events. Additionally, we highlight the inherent trade-off between performance and utility in existing approximation techniques, establishing a trustworthy foundation for the next generation of efficient auditing frameworks.

## CCS Concepts
- **Security and Privacy → Intrusion Detection Systems**

## Keywords
- Auditing
- Data Provenance
- Digital Forensics

## ACM Reference Format
Noor Michael, Jaron Mink, Jason Liu, Sneha Gaur, Wajih Ul Hassan, and Adam Bates. 2020. On the Forensic Validity of Approximated Audit Logs. In Annual Computer Security Applications Conference (ACSAC 2020), December 7–11, 2020, Austin, USA. ACM, New York, NY, USA, 14 pages. https://doi.org/10.1145/3427228.3427272

## 1 Introduction

Auditing is crucial for the defense of computing systems. Despite robust perimeter defenses, sophisticated threat actors frequently breach these barriers and cause significant damage. Given the difficulty in preventing intrusions, the focus shifts to quickly detecting and responding to threats to minimize their impact. Audit logs are indispensable for these tasks; 75% of cyber analysts report that logs are the most important resource when investigating threats [10]. The importance of audit logs will increase as advanced causal analysis techniques for detection, alert triage, and investigation become more widely available.

However, the benefits of system auditing come at a cost. Commodity audit frameworks generate vast amounts of log data, often exceeding a terabyte per machine in a single month [22, 45, 49]. Storing and managing this data is burdensome, and the unwieldy nature of these logs hinders time-sensitive investigations during ongoing attacks. For example, even a simple backtrace query to determine the root cause of an event may take days to return [45]. The inefficiencies of system auditing currently undermine its effectiveness in combating real-world threats.

To address this issue, researchers have proposed optimizing the contents of audit logs. Many methods have been developed to filter out unnecessary events, such as those describing deleted system entities [43], non-critical information flows [77], or events that do not affect standard forensic queries [36]. These methods, referred to as approximation techniques, can reduce log sizes by orders of magnitude, making comprehensive auditing of large organizational networks feasible.

While these results are encouraging from a performance perspective, quantifying the loss in utility due to log approximation is challenging. Is an approximated log equally useful for threat investigation? Under what circumstances might the approximation routine introduce errors? For instance, Lee et al.’s LogGC system deletes "dead end" events [43], but this could potentially destroy log events related to data exfiltration. Prior work has provided only anecdotal arguments for the utility of approximated logs.

In this work, we conduct the first independent analysis of the utility of approximated audit logs. We define utility as the "forensic validity" of a log for investigating different types of threats. To measure forensic validity, we formalize three metrics: Lossless, Causality-Preserving, and Attack-Preserving. Each metric encodes relationships that should be preserved under specific threat models, and we specify which metric is most appropriate for each model.

Using these metrics, we analyze a set of exemplar approximation techniques. We find that prior work often filters attack-related events, reducing log sizes by up to 93.7% but retaining as little as 7.3% of attacker-related forensic evidence. Whether this trade-off is acceptable depends on an organization’s resources and threat model. To aid defenders in making these decisions, we use the notion of forensic validity to reason about the trade-offs between storage performance and security utility. Figure 1 illustrates our findings under the Causality-Preserving Forensics metric, showing the percentage of information flow events retained in the approximated log. Each point on the graph corresponds to a different attack scenario, with the blue dashed line representing the worst-case baseline where all dropped events are forensically relevant. Points above the line indicate better performance than the baseline. For example, Xu et al.’s CPR system [77] retains 100% of relevant log entries but at the cost of storage efficiency, while other techniques achieve storage efficiency almost proportionally to the percentage of causality-preserving events filtered. We report on performance-utility trade-offs for our other metrics in Section 6.4.

The contributions of this work are:
- **Forensic Validity Measurement:** We formalize metrics to quantify the utility of logs under different threat models and conduct an independent analysis of exemplar approximation techniques, discovering that the removal of attack-relevant events is common.
- **Attack-Preserving Approximation Techniques:** We introduce LogApprox, an approximation method optimized for attack-preserving forensics. LogApprox performs a bounded regex-learning routine over process executions to learn their file I/O behaviors. While aggressively filtering known file behaviors, LogApprox retains a complete record of process-to-process and process-to-network dependencies, facilitating causal analysis.
- **Evaluation and Attack Engagements:** We evaluate LogApprox's performance and subject it to a series of attack scenarios to measure forensic validity. These engagements confirm that LogApprox satisfies attack-preserving forensics while offering comparable reduction rates to prior work. Our code and datasets are available upon request.

## 2 Background

Logging is critical for defending systems, facilitating intrusion detection and post-mortem forensics. Audit logs can be generated at different software layers, such as Windows Event Logs for Active Directory environments [12], and kernel-level frameworks like Event Tracing for Windows [11], Linux Audit [65], and DTrace [21]. Low-level (kernel-level) audit frameworks are particularly useful in threat hunting because they can reliably trace dependencies between applications running on hosts.

An audit log is a sequence of temporally-ordered event tuples, which can be parsed into a causal dependency (provenance) graph. This graph represents the relationships between processes, sockets, and files, with green boxes indicating live processes and blue boxes indicating terminated processes. For example, in Figure 2, a backward trace identifies the root cause of an event, while a forward trace identifies the impact of a particular event.

---

This version of the text is more structured, clear, and professional, with improved readability and coherence.