title:On the Forensic Validity of Approximated Audit Logs
author:Noor Michael and
Jaron Mink and
Jason Liu and
Sneha Gaur and
Wajih Ul Hassan and
Adam Bates
On the Forensic Validity of Approximated Audit Logs
Noor Michael
Jaron Mink
Jason Liu
University of Illinois at
Urbana-Champaign
PI:EMAIL
Sneha Gaur
University of Illinois at
Urbana-Champaign
PI:EMAIL
University of Illinois at
Urbana-Champaign
PI:EMAIL
Wajih Ul Hassan
University of Illinois at
Urbana-Champaign
PI:EMAIL
University of Illinois at
Urbana-Champaign
PI:EMAIL
Adam Bates
University of Illinois at
Urbana-Champaign
PI:EMAIL
ABSTRACT
Auditing is an increasingly essential tool for the defense of comput-
ing systems, but the unwieldy nature of log data imposes significant
burdens on administrators and analysts. To address this issue, a
variety of techniques have been proposed for approximating the
contents of raw audit logs, facilitating efficient storage and analysis.
However, the security value of these approximated logs is diffi-
cult to measure—relative to the original log, it is unclear if these
techniques retain the forensic evidence needed to effectively inves-
tigate threats. Unfortunately, prior work has only investigated this
issue anecdotally, demonstrating sufficient evidence is retained for
specific attack scenarios.
In this work, we address this gap in the literature through for-
malizing metrics for quantifying the forensic validity of an approxi-
mated audit log under differing threat models. In addition to provid-
ing quantifiable security arguments for prior work, we also identify
a novel point in the approximation design space—that log events
describing typical (benign) system activity can be aggressively ap-
proximated, while events that encode anomalous behavior should
be preserved with lossless fidelity. We instantiate this notion of
Attack-Preserving forensic validity in LogApprox, a new approxi-
mation technique that eliminates the redundancy of voluminous
file I/O associated with benign process activities. We evaluate Lo-
gApprox alongside a corpus of exemplar approximation techniques
from prior work and demonstrate that LogApprox acheieves compa-
rable log reduction rates while retaining 100% of attack-identifying
log events. Additionally, we utilize this evaluation to illuminate the
inherent trade-off between performance and utility within existing
approximation techniques. This work thus establishes trustwor-
thy foundations for the design of the next generation of efficient
auditing frameworks.
CCS CONCEPTS
• Security and privacy → Intrusion detection systems.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
ACSAC 2020, December 7–11, 2020, Austin, USA
© 2020 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-8858-0/20/12...$15.00
https://doi.org/10.1145/3427228.3427272
Figure 1: We present a novel analysis of the performance-
utility tradeoff for different log approximation techniques
according to the notion of Causality-Preserving Forensics, which
was introduced in [77] and formally defined as a measurable
property in this work. Each point on the graph corresponds
to a different attack scenario described in Section 6.
KEYWORDS
Auditing, Data Provenance, Digital Forensics
ACM Reference Format:
Noor Michael, Jaron Mink, Jason Liu, Sneha Gaur, Wajih Ul Hassan,
and Adam Bates. 2020. On the Forensic Validity of Approximated Audit
Logs. In Annual Computer Security Applications Conference (ACSAC 2020),
December 7–11, 2020, Austin, USA. ACM, New York, NY, USA, 14 pages.
https://doi.org/10.1145/3427228.3427272
1 INTRODUCTION
Auditing is vital to the defense of computing systems. With alarm-
ing regularity [9, 39, 57, 66, 72], sophisticated threat actors are able
to breach perimeter defenses and subsequently wreak havoc on
organizations. Given our struggles keeping intruders out of systems,
the onus shifts to quickly detecting and responding to threats in
order to minimize their impact. Audit logs have proven invaluable
to these tasks; today, 75% of cyber analysts report that logs are
the most important resource when investigating threats [10]. The
importance of audit logs will only increase as state-of-the-art causal
analysis techniques for detection [22, 26, 52, 54, 74], alert triage
[29, 30], and investigation [32, 34, 42, 61] become widely available.
 0 20 40 60 80 100 0 20 40 60 80 100Log Reduction (%)Forensic Validity (%)Worst-caseApproxCPRGCF-DPRS-DPRACSAC 2020, December 7–11, 2020, Austin, USA
Noor Michael, Jaron Mink, Jason Liu, Sneha Gaur, Wajih Ul Hassan, and Adam Bates
Unfortunately, the capabilities provided by system auditing come
at a cost. Commodity audit frameworks are known to generate
tremendous volumes of log data, upwards of a terabyte per machine
in a single month [22, 45, 49]. Not only is storing and managing this
data a burden, but the unwieldy nature of these audit logs also slows
down time-sensitive investigation tasks during in-progress attacks.
For example, Liu et al. observed that even a simple backtrace query
to determine the root cause of an event may take days to return
[45]. At present, the inefficiencies of system auditing seriously
undermine its use for effectively combatting real-world threats.
In response to this issue, researchers have called for optimizing
the contents of audit logs, based largely on the observation that
most events described by the log are not strictly necessary when
investigating threats. A variety of methods have been proposed for
achieving this goal, ranging from the filtering of events that describe
deleted system entities [43], do not connote a new information flow
[77] or do not effect the conclusions reached by standard forensic
queries [36], among many others [1, 4, 6, 8, 14, 24, 28, 48, 49, 51,
71, 75, 76]. We refer to these methods as approximation techniques
in this work. With many of these techniques reporting orders of
magnitude reduction in log size, the goal of holistic auditing of
large organizational networks seems within reach.
While these results are encouraging for the perspective of per-
formance, it is much more difficult to quantify the loss in utility that
arises from approximating the original log. Is an approximated log
equally useful when investigating threats? If not, under what cir-
cumstances can we expect the approximation routine to introduce
error? For example, Lee et al.’s pioneering LogGC system deletes
“dead end” events describing entities that no longer exist on the
system [43], but given the ephemeral nature of network sockets it
is likely that LogGC may destroy log events describing data exfiltra-
tion tactics. Unfortunately, prior work has offered only anecdotal
arguments for the utility of approximated logs.
In this work, we conduct the first independent analysis of the
utility of audit logs that have been subjected to approximation
techniques. We argue that utility is a measure of the “forensic va-
lidity” of a log for investigating different kinds of threats. To enable
measurement of forensic validity, we formalize three metrics for
characterizing approximated logs: Lossless, Causality-Preserving,
and Attack-Preserving. While these metrics are distilled from prior
work, we make the insight that each metric encodes a set of rela-
tionships that should be preserved under a specific threat model;
we enumerate what these threat models are and which metric is
most appropriate.
Using these metrics, we conduct an independent utility analysis
of a set of exemplar approximation techniques. We discover that
prior work often filters attack-related events when approximating
logs, compressing logs by as much as 93.7% but retaining as little
as 7.3% of attacker-related forensic evidence in the process. Whether
this sacrifice in utility is acceptable depends in practice on an orga-
nization’s resources and threat model. To aid system defenders in
making these decisions, we also use the notion of forensic validity
to reason about the trade-offs between the storage performance
of audit logs and their security utility. Figure 1 shows a portion of
our findings under the Causality-Preserving Forensics metric, which
measures the percent of events signifying information flow that are
retained in the approximated log. Each approximation technique
analyzed has 6 points on the graph, each corresponding to a differ-
ent attack scenario. The blue dashed line denotes the worst-case
baseline in which all dropped events are forensically relevant, with
points above the line indicating the technique outperforms the
baseline. We can see that Xu et al.’s CPR system [77] (which this
metric is based on) retains 100% of relevant log entries, but at the
cost of storage efficiency. Conversely, we see that other techniques
achieve storage efficiency almost proportionally to the percent of
causality-preserving events filtered. We report on performance-
utility tradeoffs for our other metrics in Section 6.4.
The contributions of this work are as follows:
While optimizing logs for Attack-Preserving Forensics is prefer-
able for the efficiency of audit logs, it requires a method of delin-
eating typical process activity from unexpected system events. To
address this gap, we present LogApprox1, a regular expression
(regex) learning approach to approximation. LogApprox targets
the most space-intensive events found in logs, namely the file I/O
activity which can account for up to 90% of log contents.2 Once a
regex for a given process has been learned, LogApprox matches
and eliminates new events that match the regex. Through the de-
sign of a carefully-constructed learning algorithm, we demonstrate
that it is possible to generate a set of regexes that faithfully describe
typical process activity while simultaneously avoiding the filtering
of any attack-specific behaviors. We show that LogApprox retains
100% utility under the attack-preserving model while exhibiting
comparable performance to state-of-the-art techniques.
• Forensic Validity Measurement. We formalize a set of metrics that
can be used to quantify the utility of logs under different threat
models. We conduct an independent analysis of an exemplar
set of approximation techniques, discovering in the process that
removal of attack-relevant events is common.
• Attack-Preserving Approximation Techniques. We present LogAp-
prox, an approximation method that is optimized for attack-
preserving forensics. LogApprox performs a bounded regex-
learning routine over process executions to learn their file I/O be-
haviors. While aggressively filtering events related to known file
behaviors, LogApprox retains a complete record of process-to-
process and process-to-network dependencies, thus facilitating
the causal analysis techniques.
• Evaluation and Attack Engagements. We evaluate the perfor-
mance of LogApprox and subject it to a series of attack scenarios
through which we measure forensic validity. These engagements
confirm that LogApprox satisfies attack-preserving forensics
while offering comparable reduction rates to prior work. Our
code and datasets are available on request.
2 BACKGROUND
Logging is critical to defending systems, facilitating intrusion de-
tection and post-mortem forensics of attacks. Audit logs can be
generated at different software layers; for example, Windows Event
Logs is an application-level framework for Active Directory envi-
ronments [12], while Event Tracing for Windows [11], Linux Audit
[65], and DTrace [21] are kernel-level frameworks that primarily
1Approx is an acronym for Attack-Preserving Provenance Reduction Over regeXes
2We observe in our evaluation datasets that 88.97% of events describe system calls
associated with file I/O.
On the Forensic Validity of Approximated Audit Logs
ACSAC 2020, December 7–11, 2020, Austin, USA
root-cause. Note that even though EEB−7 is reachable from EAD−6
in the graph, it is not included in analysis because event EEB−7
happened after event EAD−6. Conversely, a forward trace identifies
the impact of a particular event. A forward trace from the root
cause summarizes all actions taken by the attacker. For example,
in Figure 2, to find the impact of event EC−1, a forward trace will
return a subgraph consisting of ECA−2, ECA−3, EAD−6, ECF−8, and
EF H−10.
Figure 2: Example provenance graph. In this provenance
graph boxes, diamonds and ovals represent processes, sock-
ets and files, respectively. Green boxes represent live pro-
cesses while blue boxes represent terminated processes.
log system calls. While all logs can be of potential use during threat
investigations, low-level (kernel-level) audit frameworks are espe-
cially useful in threat hunting because they can be used to reliably
trace dependencies between applications running on the hosts.
An audit log is a sequence of temporally-ordered event tuples
(i.e., ), which can be further
parsed into a causal dependency (i.e., provenance) graph by incre-