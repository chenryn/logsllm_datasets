**\
Java性能优化原则：**代码运算性能、内存回收、应用配置（影响Java程序主要原因是垃圾回收，下面会重点介绍这方面）
**代码层优化：**避免过多循环嵌套、调用和复杂逻辑。
**Tomcat调优主要内容如下：**
**1、增加最大连接数**
**2、调整工作模式**
**3、启用gzip压缩**
**4、调整JVM内存大小**
**5、作为Web服务器时，与Apache整合或Nginx**
**6、合理选择垃圾回收算法**
**7、尽量使用较新JDK版本**
**生产配置实例：**
\
**参数说明：**
org.apache.coyote.http11.Http11NioProtocol：调整工作模式为Nio
maxThreads：最大线程数，默认150。增大值避免队列请求过多，导致响应缓慢。
minSpareThreads：最小空闲线程数。
maxSpareThreads：最大空闲线程数，如果超过这个值，会关闭无用的线程。
acceptCount：当处理请求超过此值时，将后来请求放到队列中等待。
disableUploadTimeout：禁用上传超时时间
connectionTimeout：连接超时，单位毫秒，0代表不限制
URIEncoding：URI地址编码使用UTF-8
enableLookups：关闭dns解析，提高响应时间
compression：启用压缩功能
compressionMinSize：最小压缩大小，单位Byte
compressableMimeType：压缩的文件类型
**Tomcat有三种工作模式：Bio、Nio和Apr，下面简单了解下他们工作原理：**
Bio(Blocking
I/O)：默认工作模式，阻塞式I/O操作，没有任何优化技术处理，性能比较低。
Nio(New I/O or
Non-Blocking)：非阻塞式I/O操作，有Bio有更好的并发处理性能。
Apr(Apache Portable
Runtime，Apache可移植运行库)：首选工作模式，主要为上层的应用程序提供一个可以跨越多操作系统平台使用的底层支持接口库。
tomcat利用基于Apr库tomcat-native来实现操作系统级别控制，提供一种优化技术和非阻塞式I/O操作，大大提高并发处理能力。但是需要安装apr和tomcat-native库。
**工作模式原理涉及到了网络I/O模型知识：**
**阻塞式I/O模型：**应用进程调用recv函数系统调用时，如果等待要操作的数据没有发送到内核缓冲区，应用进程将阻塞，不能接收其他请求。反之，内核recv端缓冲区有数据，内核会把数据复制到用户空间解除阻塞，继续处理下一个请求。（内核空间(缓冲区)\--用户空间(系统调用)）
**非阻塞式I/O模型：**应用进程设置成非阻塞模式，如果要操作的数据没有发送到内核缓冲区，recv系统调用返回一个错误，应用进程利用轮询方式不断检查此操作是否就绪，如果缓冲区中有数据则返回，I/O操作同时不会阻塞应用进程，期间会继续处理新请求。
**I/O复用模型：**阻塞发生在select/poll的系统调用上，而不是阻塞在实际的I/O系统调用上。能同时处理多个操作，并检查操作是否就绪，select/epoll函数发现有数据就绪后，就通过实际的I/O操作将数据复制到应用进程的缓冲区中。
**异步I/O模型：**应用进程通知内核开始一个异步I/O操作，并让内核在整个操作（包括数据复制缓冲区）完成后通知应用进程，期间会继续处理新请求。
**I/O操作分为两个阶段：**第一个阶段等待数据可用，第二个阶段将数据从内核复制到用户空间。
**前三种模型的区别：**第一阶段阻塞式I/O阻塞在I/O操作上，非阻塞式I/O轮询，I/O复用阻塞在select/poll或epoll上。第二阶段都是一样的。而异步I/O的两个阶段都不会阻塞进程。
![wKiom1cPZiexhqQVAADEfIyyX4s521.png](media/image1.png){width="5.8125in"
height="3.0625in"}
**Java性能问题主要来自于JVM，JVM
GC也比较复杂，再调优之前了解下相关基础概念是必要的：**
1）JVM内存划分分为年轻代（Young Generation）、老年代（Old
Generation）、永久代（Permanent Generation）。
2）年轻代又分为Eden和Survivor区。Survivor区由FromSpace和ToSpace组成。Eden区占大容量，Survivor两个区占小容量，默认比例大概是8:2。
3）堆内存（Heap）=年轻代+老年代。非堆内存=永久代。
4）堆内存用途：存放的是对象，垃圾收集器就是收集这些对象，然后根据GC算法回收。
5）非堆内存用途：JVM本身使用，存放一些类、方法、常量、属性等。
6）年轻代：新生成的对象首先放到年轻代的Eden区中，当Eden满时，经过GC后，还存活的对象被复制到Survivor区的FromSpace中，如果Survivor区满时，会再被复制到Survivor区的ToSpace区。如果还有存活对象，会再被复制到老年代。
7）老年代：在年轻代中经过GC后还存活的对象会被复制到老年代中。当老年代空间不足时，JVM会对老年代进行完全的垃圾回收（Full
GC）。如果GC后，还是无法存放从Survivor区复制过来的对象，就会出现OOM（Out
of Memory）。
8）永久代：也称为方法区，存放静态类型数据，比如类、方法、属性等。
**垃圾回收（GC，Garbage Collection）算法：**
1）标记-清除（Mark-Sweep）
GC分为两个阶段，标记和清除。首先标记所有可回收的对象，在标记完成后统一回收所有被标记的对象。同时会产生不连续的内存碎片。碎片过多会导致以后程序运行时需要分配较大对象时，无法找到足够的连续内存，而不得已再次触发GC。
2）复制（Copy）