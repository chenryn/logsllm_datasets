title:Representing TCP/IP Connectivity For Topological Analysis of Network
Security
author:Ronald W. Ritchey and
Brian O'Berry and
Steven Noel
Representing TCP/IP Connectivity For Topological
Analysis of Network Security
Ronald Ritchey 1 
PI:EMAIL
Brian O’Berry
PI:EMAIL
      Steven Noel
PI:EMAIL
Center For Secure Information Systems
George Mason University
Abstract
The individual vulnerabilities of hosts on a network can
be combined by an attacker to gain access that would not
be possible if the hosts were not interconnected. Currently
available tools report vulnerabilities in isolation and in
the context of individual hosts in a network.  Topological
vulnerability analysis (TVA) extends this by searching for
sequences of interdependent vulnerabilities, distributed
among the various network hosts.  Model checking has
been applied to the analysis of this problem with some
interesting initial result.  However previous efforts did not
take into account a realistic representation of network
connectivity.  These models were enough to demonstrate
the usefulness of the model checking approach but would
not be sufficient to analyze real-world network security
problems.  This paper presents a modem of  network con-
nectivity at multiple levels of the TCP/IP stack appropri-
ate for use in a model checker.  With this enhancement, it is
possible to represent realistic networks including com-
mon network security devices such as firewalls, filtering
routers, and switches.
1.  Introduction
A common approach used to analyzing network security is
to focus on individual vulnerabilities on each host that
makes up the network.  There are many products designed
to assist in this process, including products that scan for
vulnerabilities on a host from across a network [7] and prod-
ucts that run on the host being analyzed [5].  These tools
can help identify known vulnerabilities on these computers
and can produce reports that help security administrators
identify steps to reduce the vulnerabilities that exist on each
of the scanned systems.  This is a reasonable approach as
the reduction in vulnerability for the individual hosts on a
network is bound to have a positive impact on the security
of the network as a whole.  However, it does not offer any
insight into vulnerabilities caused by interactions of sys-
tems on a network.
Previous work used a modeling approach to analyze net-
work security based on the interactions of vulnerabilities
within individual hosts and between hosts connected by
the network [8].  This work applied model checking technol-
ogy to analyze a simplified network security model and de-
termine whether the network's security requirements were
met or if there was a method that could be used to invalidate
any of the requirements.  The security requirements were
encoded as assertions in the model checker.  The model
checker was used to determine whether any of these asser-
tions could be proved false.  In this case the model checker
produced a detailed set of steps that it had used to invali-
date the assertion.  This set of steps constituted a potential
path an attacker might follow to circumvent the security of
the network.
While this work was useful for validating the model check-
ing approach, substantial improvements are required to make
it a practical tool in analyzing real-world network vulner-
abilities.  These include the development of automated tools
to populate the model, the encoding of a large set of exploi-
tation techniques into the model, and refinements in the
model itself to allow it to more accurately represent modern
computer networks.  Our research center and others are
actively working on these issues, but most of the work has
concentrated on the first two problems [9].  This paper spe-
cifically addresses enhancements to the model described
in [8] that support a sufficiently rich representation of con-
nectivity for real-world networks.
A sophisticated depiction of network connectivity is es-
sential to model network vulnerability.   A primary means of
defending against network attack is the use of firewalls
and filtering routers.  For a model to produce useable
results, the effects of these devices must be repre-
sented.  In addition, there are certain attacks that op-
erate against the network itself as opposed to target-
ing a particular host on the network.  These also must
be represented for the model to be capable of analyz-
1 This effort sponsored in part by Booz Allen Hamilton
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
ing real-world network security problems.
This paper extends the previous model checking approach
by including representations of network connectivity in the
analysis model.  It is TCP/IP and Ethernet centric, but the
methods used could easily be extended to support alterna-
tive networking protocols.  A layered approach is used to
capture specific vulnerabilities that exist at different layers
of TCP/IP.  In addition, careful consideration is given to
efficiency of representation while still maintaining sufficient
fidelity to produce meaningful results on real networks.
In summary, this paper presents extensions to the previous
model checking approach in [9] that provides sophisticated
representation of network connectivity while not excessively
increasing the state-space of the model.  This is interesting
because it brings us much closer to the ability to produce a
tool capable of analyzing the impact that interactions of
vulnerabilities have between hosts on real-world networks.
2.  The Network Security Model
Our approach, which we call Topological Vulnerabil-
ity Analysis (TVA), uses a state-based model of network
security to discover attack paths.  In this section, we pro-
vide a short description of how the model is structured.
2.1  Model Elements
There are four major elements that make up the network
security model.
attempt to validate
Hosts are described by their network services, components
and configurations, and the current user privileges obtained
by the attacker.  Vulnerabilities might arise from obvious
problems, such as running an outdated network service like
Sendmail [4].  They might also depend on general configu-
ration details, such as operating system version, type of
authentication, and password length.  Our definition of
vulnerability is broad.  In this model, vulnerability is any
system attribute that can be used as a prerequisite for an
exploit.  This may seem unbounded, but in reality, because
there is a finite number of known exploits each with a finite
number of prerequisite vulnerabilities, the total set of vul-
nerabilities needed by the model is finite.  This is important
because it allows us to bound the total number of system
features we must search for to populate the analysis model.
Connectivity is modeled using a variety of techniques de-
pending upon the TCP/IP layer that is being represented.
This is an extension of the previous connectivity model,
which used a simple Boolean matrix to represent connectiv-
ity.  The enhancements presented in the paper allow the
• A network of hosts, including the network ser-
vices, components and configuration details that
give rise to vulnerabilities
Connectivity of the hosts
Exploits, or attacks, that change the state of the
model
• A list of security requirements the model should
•
•
model to more accurately represent real-world networks,
making its results more relevant.  More will be said about
this in the following sections.
Exploits are modeled using functions that, given the right
circumstances, can cause changes to the state of the model.
Exploits are used by the model to affect changes to the
security of the hosts under analysis.  The quality and quan-
tity of exploits encoded in the model have a direct relation-
ship with the quality of the analysis that can be performed
with the model.
Security requirements are represented by invariant state-
ments made about the security of particular hosts on the
network (e.g. an attacker can not obtain administrative ac-
cess to host A).
2.2  Vulnerabilities and Exploits
Vulnerabilities and the methods necessary to exploit them
form the core of the model.  The technique relies on model-
ing the network attributes that give rise to vulnerabilities,
then analyzing whether the exploits encoded into the model
can take advantage of the vulnerabilities to circumvent the
network's security.  Vulnerabilities come from many sources
and are difficult to eliminate because of several factors.  For
a network to be useful, it must offer services.  These ser-
vices are implemented in software and it is difficult to guar-
antee that any complex piece of software does not contain
some flaws [2].  These flaws frequently translate into secu-
rity vulnerabilities.  In addition, simple network configura-
tion errors can introduce exploitable security flaws.
To break into a network, it is not sufficient to know about
the vulnerabilities on the network.  You must also have an
exploit to take advantage of these vulnerabilities.  In addi-
tion, before an exploit can be used, its pre-conditions must
be met.  These pre-conditions may include the set of vul-
nerabilities that the exploit relies on, sufficient user rights
on the target, sufficient user rights on the attacking host,
and network connectivity.  Results of a successful exploit
could include discovering valuable information about the
network, elevating user rights, defeating filters, and adding
trust relationships among other possible effects.  These
post-conditions share a common feature; they reduce the
security of the network.  The concept of exploit pre-condi-
tions and post-conditions is illustrated in Figure 1.
Pre - Conditions 
Pre - Conditions 
Vulnerabilities 
Vulnerabilities 
Connectivity 
Connectivity 
User privileges 
Exploit 
Exploit 
Exploit 
Post - Conditions 
Post - Conditions 
Increased vulnerabilities 
Increased vulnerabilities 
Increased connectivity 
Increased connectivity 
Elevated user privileges 
Figure 1 - Exploit Model
By successively employing exploits, an increasing number
of vulnerabilities can be added to a host.  Given the right set
of circumstances, this may result in the complete compro-
mise of the host.  If an attacker gains control of a host, it can
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
be used to attack other hosts on the network.  It is in this
fashion that an attacker can move through a network until
they have achieved their final goal.  This chaining of ex-
ploits to compromise multiple hosts is shown in Figure 2.
therefore identify hosts that share a common network
segment, and we label such connectivity LINK_ARP.
This type of connectivity is the prerequisite for many
network attacks such as TCP session hijacking.
Host 1
Host 1
Host 2
Host 2
Host 3
Host 3
Host 4
Host 4
Figure 2 - A Network of Exploits
2.3  Model Checking
Initial versions of TVA relied upon model checkers to act
as the analysis engine.  Model checkers are attractive
because they are designed to handle large state spaces
[3] and they efficiently generate counterexamples that, for
TVA, correspond to attack paths.  Thus they provide a
mechanism to avoid custom building the same capabilities
into special purpose tools.  They are not particularly well
suited for this application, though, because the TVA
model is monotonic.  In it, exploits don't decrease the
vulnerability of the network.  They always increase it.
There is never a need for the analysis engine to back
track to come up with a solution.  Model checkers on the
other hand, must support non-monotonic and other more
general problems.  This requires them to be substantially
more complex than TVA requires.  While the work of this
paper is not directly affected by the choice of the analysis
engine, it is worth noting that a custom application has
the potential to substantially outperform a general-
purpose model checker.
3.  Modeling Link Layer Security
As stated previously, we use a layered approach to
modeling network connectivity within TVA.  These layers
are derived from the structure of the TCP/IP network
protocol stack.  The lowest layer of the TCP/IP protocol
stack is the Link layer, which provides and manages
access to the network medium.
At the Link layer, communication can only occur between
hosts located on the same network segment.  To deliver a
TCP/IP packet to a host on the segment, the destination
IP address must be resolved into a Link layer address.
The protocol that performs this resolution is the Address
Resolution Protocol (ARP).  ARP-resolved addresses
Another Link layer characteristic relevant to network
security is packet sniffing.  Sniffing is an activity through
which a privileged user can eavesdrop on network traffic.
Most network traffic is transmitted unencrypted, and
might include usernames and passwords for protocols
such as telnet, ftp, rlogin, pop3 and others.  An attacker
could use this ability to capture the authentication details
for a particular user, then use them to impersonate the
user on the network.
The ability to sniff network traffic is affected by whether a
network is switched or not.  Ethernet was developed as a
bus-like medium where all hosts connected to a hub
shared the network bandwidth.  Hubs re-broadcast all
received packets to every connected host.  With this
scheme, all network traffic is visible to every host's
network interface card (NIC) connected to the same
network segment.  Normally, a NIC ignores traffic that is
not specifically addressed to it.  However, it is possible
for privileged users to put NICs in promiscuous mode,
allowing them to capture all local traffic.  Sniffing on a
non-switched network, then, enables an attacker to
capture all traffic crossing the local network, whether or
not it's addressed to or from the attacker's machine.
Ethernet switches essentially eliminate bandwidth sharing
by directing traffic to those hosts specifically addressed
in the Link layer frames. This filtering process limits the
usefulness of sniffing because the only network traffic
that the attacker will see are packets addressed to or
leaving from the sniffing host.  Note that broadcast
packets (packets addressed to all hosts on the same
network segment) will be visible to the attacker regardless
of whether the network is switched or non-switched.
A TVA program must include switched and non-switched
network details to effectively address sniffing attacks.  In
addition to filtering support, some switches have addi-
tional capabilities enabling them to be configured into
multiple network segments.  Also, mixed environments
where hubs are connected to switch ports are common.
Therefore, the TVA program must track Link layer
connectivity at the host level to distinguish which hosts
have such connectivity with each other, and which hosts
have "sniff" connectivity with each other.  The label
LINK_SNIFF is used to designate a host's ability to sniff
the traffic of another host.
Figure 3 depicts a generic ARP exploit (a) and a generic
SNIFF exploit (b).  Note that we show only the connectiv-
ity pre-conditions; other pre-conditions, such as the
presence of a sniffer program or the attainment of super
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
user access, would be required for a full TVA model.
Also, the exploit post-conditions are not labeled because
they depend on the exploit specifics (e.g., a password
sniffing exploit would have a post-condition that indi-
cated a password had been obtained).
LINK_ARP 
Other 
Preconditions 
ARP_exploit 
(a) 
LINK_ARP  
LINK_ARP  
Other 
Preconditions
LINK_SNIFF 
SNIFF_exploit
(b) 
Figure 3 - Generic Link Layer Exploits
The following example shows how these exploits might
map to a real network.  In Figure 4, Fred and Helen share a
hub, so they can sniff each other's communications with
Sheila.  Because a switch separates Sheila and the hub,
Sheila cannot sniff traffic between Fred and Helen.  The
generic ARP exploit shown in Figure 3(a) can trigger for
all three hosts, because all have LINK_ARP connectivity
between them.  However, the generic SNIFF exploit in
Figure 3(b) can only apply to Fred and Helen because
Sheila does not have any LINK_SNIFF connectivity.
Switch
Hub
Fred
Sheila
Figure 4 - Mixed Network (Switched & Non-
Helen
Switched)
Modeling Network and Transport
4.
Layer Security
The Network layer of TCP/IP provides global addressing
and routing of packets between network segments.  The
source and destination IP addresses of the packet are
specified at this layer.   The Transport layer controls the
flow of data between different host services, which are
addressed by a local port number.  TCP/IP offers two
transport protocols.  The Transmission Control Protocol
(TCP) is stream oriented and provides a reliable, byte-
oriented data flow through control functions that are
largely transparent at the Application layer.  The User
Datagram Protocol (UDP) is record oriented and simply
offers the ability to send packets between hosts, so the
application must provide control functions if reliable
delivery is required.
Most network services communicate via transport
protocols, so their packets contain both Network layer