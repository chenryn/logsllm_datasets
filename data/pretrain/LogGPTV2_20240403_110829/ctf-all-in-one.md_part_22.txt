| izz Search for Strings in the whole binary
| iZ Guess size of binary program
i 系列命令用于获取文件的各种信息，这时配合上 ~ 命令来获得精确的输出，
下面是一个类似 checksec 的输出：
[0x00005060]> iI ~relro,canary,nx,pic,rpath
canary true
nx true
pic true
relro full
rpath NONE
~ 命令还有一些其他的用法，如获取某一行某一列等，另外使用 ~{} 可以使
json 的输出更好看：
240
2.2.1 radare2
[0x00005060]> ~?
|Usage: [command]~[modifier][word,word][endmodifier][[column]][:
line]
modifier:
| & all words must match to grep the line
| $[n] sort numerically / alphabetically the Nth column
| + case insensitive grep (grep -i)
| ^ words must be placed at the beginning of line
| ! negate grep
| ? count number of matching lines
| ?. count number chars
| ?? show this help message
| :[s]-[e] show lines s-e
| .. internal 'less'
| ... internal 'hud' (like V_)
| {} json indentation
| {path} json grep
| {}.. less json indentation
| endmodifier:
| $ words must be placed at the end of line
| column:
| [n] show only column n
| [n-m] show column n to m
| [n-] show all columns starting from column n
| [i,j,k] show the columns i, j and k
| Examples:
| i~:0 show first line of 'i' output
| i~:-2 show first three lines of 'i' output
| pd~mov disasm and grep for mov
| pi~[0] show only opcode
| i~0x400$ show lines ending with 0x400
打印（print） & 反汇编（disassembling）
[0x00000000]> p?
|Usage: p[=68abcdDfiImrstuxz] [arg|len] [@addr]
| p=[?][bep] [blks] [len] [blk] show entropy/printable chars/ch
ars bars
241
2.2.1 radare2
| p2 [len] 8x8 2bpp-tiles
| p3 [file] print stereogram (3D)
| p6[de] [len] base64 decode/encode
| p8[?][j] [len] 8bit hexpair list of bytes
| pa[edD] [arg] pa:assemble pa[dD]:disasm or p
ae: esil from hexpairs
| pA[n_ops] show n_ops address and type
| p[b|B|xb] [len] ([skip]) bindump N bits skipping M
| pb[?] [n] bitstream of N bits
| pB[?] [n] bitstream of N bytes
| pc[?][p] [len] output C (or python) format
| pC[d] [rows] print disassembly in columns (s
ee hex.cols and pdi)
| pd[?] [sz] [a] [b] disassemble N opcodes (pd) or N
bytes (pD)
| pf[?][.nam] [fmt] print formatted data (pf.name,
pf.name $)
| ph[?][=|hash] ([len]) calculate hash for a block
| p[iI][df] [len] print N ops/bytes (f=func) (see
pi? and pdi)
| pm[?] [magic] print libmagic data (see pm? an
d /m?)
| pr[?][glx] [len] print N raw bytes (in lines or
hexblocks, 'g'unzip)
| p[kK] [len] print key in randomart (K is fo
r mosaic)
| ps[?][pwz] [len] print pascal/wide/zero-terminat
ed strings
| pt[?][dn] [len] print different timestamps
| pu[?][w] [len] print N url encoded bytes (w=wi
de)
| pv[?][jh] [mode] show variable/pointer/value in
memory
| p-[?][jh] [mode] bar|json|histogram blocks (mode
: e?search.in)
| px[?][owq] [len] hexdump of N bytes (o=octal, w=
32bit, q=64bit)
| pz[?] [len] print zoom view (see pz? for he
lp)
| pwd display current working directo
242
2.2.1 radare2
ry
常用参数如下：
px ：输出十六进制数、偏移和原始数据。后跟 o , w , q 时分别表示8
位、32位和64位。
p8 ：输出8位的字节流。
ps ：输出字符串。
radare2 中反汇编操作是隐藏在打印操作中的，即使用 pd ：
[0x00000000]> pd?
|Usage: p[dD][ajbrfils] [sz] [arch] [bits] # Print Disassembly
| NOTE: len parameter can be negative
| NOTE: Pressing ENTER on empty command will repeat last pd
command and also seek to end of disassembled range.
| pd N disassemble N instructions
| pd -N disassemble N instructions backward
| pD N disassemble N bytes
| pda disassemble all possible opcodes (byte per byte)
| pdb disassemble basic block
| pdc pseudo disassembler output in C-like syntax
| pdC show comments found in N instructions
| pdk disassemble all methods of a class
| pdj disassemble to json
| pdr recursive disassemble across the function graph
| pdf disassemble function
| pdi like 'pi', with offset and bytes
| pdl show instruction sizes
| pds[?] disassemble summary (strings, calls, jumps, refs) (
see pdsf and pdfs)
| pdt disassemble the debugger traces (see atd)
@addr 表示一个相对寻址，这里的 addr 可以是地址、符号名等，这个操作和
s 命令不同，它不会改变当前位置，当然即使使用类似 s @addr 的命令也不会
改变当前位置。
243
2.2.1 radare2
[0x00005060]> pd 5 @ main
;-- main:
;-- section..text:
0x00003620 4157 push r15
; section 13 va=0x00003620 pa=0x00003620 sz=75529 vsz=755
29 rwx=--r-x .text
0x00003622 4156 push r14
0x00003624 4155 push r13
0x00003626 4154 push r12
0x00003628 55 push rbp
[0x00005060]> s @ main
0x3620
[0x00005060]> s 0x3620
[0x00003620]>
写入（write）
当你在打开 r2 时使用了参数 -w 时，才可以使用该命令， w 命令用于写入字
节，它允许多种输入格式：
[0x00000000]> w?
|Usage: w[x] [str] [ wo?
|Usage: wo[asmdxoArl24] [hexpairs] @ addr[!bsize]
| wo[24aAdlmorwx] without hexpair values, clip
board is used
| wo2 [val] 2= 2 byte endian swap
| wo4 [val] 4= 4 byte endian swap
| woa [val] += addition (f.ex: woa 0102
)
| woA [val] &= and
| wod [val] /= divide
| woD[algo] [key] [IV] decrypt current block with g
iven algo and key
| woe [from to] [step] [wsz=1] .. create sequence
| woE [algo] [key] [IV] encrypt current block with g
iven algo and key
| wol [val] >= shift right
| woR random bytes (alias for 'wr
$b')
| wos [val] -= substraction
| wow [val] == write looped value (alia
s for 'wb')
| wox [val] ^= xor (f.ex: wox 0x90)
调试（debugging）
在开启 r2 时使用参数 -d 即可开启调试模式，当然如果你已经加载了程序，可以
使用命令 ood 重新开启调试。
246
2.2.1 radare2
[0x7f8363c75f30]> d?
|Usage: d # Debug commands
| db[?] Breakpoints commands
| dbt[?] Display backtrace based on dbg.btdepth
and dbg.btalgo
| dc[?] Continue execution
| dd[?] File descriptors (!fd in r1)
| de[-sc] [rwx] [rm] [e] Debug with ESIL (see de?)
| dg  Generate a core-file (WIP)
| dH [handler] Transplant process to a new handler
| di[?] Show debugger backend information (See
dh)
| dk[?] List, send, get, set, signal handlers
of child
| dL [handler] List or set debugger handler
| dm[?] Show memory maps
| do[?] Open process (reload, alias for 'oo')
| doo[args] Reopen in debugger mode with args (ali
as for 'ood')
| dp[?] List, attach to process or thread id
| dr[?] Cpu registers
| ds[?] Step, over, source line
| dt[?] Display instruction traces (dtr=reset)
| dw  Block prompt until pid dies
| dx[?] Inject and run code on target process
(See gs)
视图模式
在调试时使用视图模式是十分有用的，因为你既可以查看程序当前的位置，也可以
查看任何你想看的位置。输入 V 即可进入视图模式，按下 p/P 可在不同模式之
间进行切换，按下 ? 即可查看帮助，想退出时按下 q 。
Visual mode help:
? show this help
?? show the user-friendly hud
$ toggle asm.pseudo
% in cursor mode finds matching pair, otherwise toggle a
247
2.2.1 radare2
utoblocksz
@ redraw screen every 1s (multi-user view), in cursor se
t position
! enter into the visual panels mode
_ enter the flag/comment/functions/.. hud (same as VF_)
= set cmd.vprompt (top row)
| set cmd.cprompt (right column)
. seek to program counter
" toggle the column mode (uses pC..)
/ in cursor mode search in current block
:cmd run radare command
;[-]cmt add/remove comment
0 seek to beginning of current function
[1-9] follow jmp/call identified by shortcut (like ;[1])
,file add a link to the text file
/*+-[] change block size, [] = resize hex.cols
 seek aligned to block size (seek cursor in cursor mode
)
a/A (a)ssemble code, visual (A)ssembler
b toggle breakpoint
B enumerate and inspect classes
c/C toggle (c)ursor and (C)olors
d[f?] define function, data, code, ..
D enter visual diff mode (set diff.from/to)
e edit eval configuration variables
f/F set/unset or browse flags. f- to unset, F to browse, .
.
gG go seek to begin and end of file (0-$s)
hjkl move around (or HJKL) (left-down-up-right)
i insert hex or string (in hexdump) use tab to toggle