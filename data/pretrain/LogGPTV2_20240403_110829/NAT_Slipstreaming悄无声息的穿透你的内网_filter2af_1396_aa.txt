# NAT Slipstreaming悄无声息的穿透你的内网
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
2021年10月份，[SamyKamkar](https://samy.pl)公开了NAT
Slipstreaming攻击利用手法，属于对协议漏洞的组合巧妙利用，仅仅只需要victim访问网站，便可以实现attacker访问在victim的NAT服务之后的系统的任意TCP/UDP端口。作者提供了详实的文档记录以及攻击发现思路分享，并且提供了poc源码以供复现使用，多重组合利用不禁感慨作者扎实的功底与硬核的能力。github地址
## 概述
NAT
Slipstreaming结合对内置在NATs、防火墙、路由器中的ALG的利用，来达成对用户浏览器的利用，对ALG的利用具体有通过WebRTC或时间攻击来提取内部IP，自动远程MTU和IP分段的发现，TCP保温篡改，TURN认证的滥用，精确的包边界控制，通过浏览器滥用的协议混淆。并且这个利用是通过NAT或者防火墙来打开目标端口，因为他绕过了浏览器的端口限制。
这个攻击需要对TCP/UDP报文精确控制，并且报文内不包含HTTP或者其他报文。这个攻击进行的新的报文注入技术可以在主流的浏览器中奏效，并且是NAT Pinning technique from
2010的现代版本。
这个 **攻击要求NAT/防火墙支持ALG** ，ALG对于使用多端口协议是必需的（控制信道+数据信道），比如SIP、H232、FTP、IRC、DCC。
上图表示的是网络拓扑，内网—>NAT/防火墙—->网站服务器。内网中的victim如果在浏览器中访问攻击者的网站或者访问网站中含有恶意链接，那么攻击者便可以与受害者的任意端口链接。
上图是最终达成利用的报文结构，报文长度太长时报文会进行分段，达成利用时报文头部必须是特定的字节才能符合要求，因此通过
**对报文进行填充，进而可以控制第二三个报文的内容** ，构造符合利用条件的报文。
## Application Level Gateway(ALG)
ALGs允许NAT追踪多端口协议，比如FTP协议，从你的系统中发出到FTP服务器，并且当你请求文件发送到你的内部IP时可以进行追踪，ALG可以重写报文使其包括你的公网IP，并且将FTP服务器的连接传回内网。
From [Wikipedia](https://www.wikiwand.com/en/Application-level_gateway):
    In the context of computer networking, an application-level 
    gateway consists of a security component that augments a 
    firewall or NAT employed in a computer network. It allows 
    customized NAT traversal filters to be plugged into the 
    gateway to support address and port translation for certain 
    application layer "control/data" protocols such as FTP, 
    BitTorrent, SIP, RTSP, file transfer in IM applications, etc. 
    In order for these protocols to work through NAT or a 
    firewall, either the application has to know about an address/
    port number combination that allows incoming packets, or the 
    NAT has to monitor the control traffic and open up port 
    mappings (firewall pinhole) dynamically as required. 
    Legitimate application data can thus be passed through the 
    security checks of the firewall or NAT that would have 
    otherwise restricted the traffic for not meeting its limited 
    filter criteria.
## 挖掘协议缺陷过程
挖掘过程中体现了作者的不仅对网络协议，而是整个网络方面的知识，同时又具有逆向固件的能力。这里仅作简单梳理，帮助整体学习挖掘过程，具体细节移步官网链接。
  1. **固件下载。** 首先下载了固件[recent firmware](http://www.downloads.netgear.com/files/GDC/R7000/R7000-V1.0.9.64_10.2.64.zip)，然后利用binwalk解压，binwalk -Me xxx，得到具体的程序文件。
  2. **函数定位。** 然后紧接着作者利用工具搜索二进制文件内的字符串ftp，找到可疑文件/lib/modules/tdts.ko，然后在此文件内匹配ftp字符串，发现了ftp_decode_port_cmd，其中的port很有可能是关联到ALG的。并且它的参数是32bit地址和16位port，分别以8b进行存储。
  3. **端口限制绕过。** 现在浏览器中对端口的屏蔽很严格，许多端口都被屏蔽，但是现在浏览器大多数采用uint32来存储端口，但是协议中是16bit存储的端口号，因此可以利用正数溢出绕过判断。比如想要利用6667端口，但是6667端口被浏览器限制，我们可以传递6667+65536=72203，浏览器判断时发现没有对72203进行限制，但是传递到协议中由于16位溢出实际处理的时6667端口。
  4. **程序逆向。** 接下来开始逆向tdts.ko，起初是通过ftp_decode定位到这个内核文件，那么在函数中所有decode关键字，找到sip_decode函数。
**尝试在HTTP POST中加入SIP报文。** 选择sip的理由是绝大多数ALG都支持sip协议，根据作者之前在2010年黑帽大会上分享的关于IRC
DCC的利用经验来看，当NAT逐行读取SIP协议，会直接忽略HTTP报文头部，并且当读取到REGISTER时会认为这是一个合法的SIP报文。报文内容如下，但是经过测试，发现这并没有奏效，某些地方出现了问题，继续开始逆向固件。
    POST / HTTP/1.1
    Host: samy.pl:5060
    Connection: keep-alive
    Content-Length: 191
    Cache-Control: max-age=0
    Origin: http://samy.pl
    Upgrade-Insecure-Requests: 1
    Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryhcoAd2iSAx3TJA7A
    User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.66 Safari/537.36
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3
    Referer: http://samy.pl/o/sp.html
    Accept-Encoding: gzip, deflate