relatively easily provided by using encryption (we do protect
the keys that are used to bootstrap the encryption). Also, we
focus on conﬁdentiality rather than integrity. As we will see,
the options available for violating integrity of a high assurance
app will be severely limited and are likely to be detected. We
assume that high assurance apps use end-to-end authentication
and encryption when communicating over the network.
Our defense partitions the trusted base into a host kernel
and a container kernel. The privileged services are carefully
partitioned to run on these two kernels. An important question
is deciding the partition in which each service executes.
Figure 1(b) shows our decision. The trusted host contains the
virtual memory of the app, its read-only code and the UI/Input
service. The untrusted container has the storage, networking
and other services, such as vold and location service. The goal
is to run non-UI and non-memory services in the container
to the extent feasible to reduce the available attack surface.
The container itself is deprivileged with respect to the host
kernel; however, services within the container maintain enough
privilege to perform their assigned tasks. We measured the
lines of code in privileged services on Android. We found
that approximately 109K lines out of 181K are not connected
with UI/Input management, suggesting that up to 59.9% of the
trusted base in the form of privileged services can be reduced.
The reason for keeping the UI/Input service as part of the
trusted host kernel is that fundamentally all sensitive interactive
input from the end-user is obtained through the UI/Input
service (e.g., passwords, touch inputs). If this service had
been delegated to the untrusted container, a compromise within
the container would have allowed stealing of user-provided
sensitive information.
The virtual memory of an app also must necessarily contain
sensitive state (e.g., passwords). Hence, we maintain virtual
memory of all apps on the host. In our example, LoApp may
compromise a privileged service, but this service resides in
the container that is unprivileged with respect to the host
kernel. Thus, the attacker cannot access HiApp’s memory via
the deprivileged service, thereby reducing the available attack
surface.
Storage deserves special consideration. A typical storage
stack is quite large (ext4 on Linux is approximately 26K lines
of C, and all ﬁlesystem-related Linux code is approximately
725K lines of C). Therefore, it is desirable to delegate storage
calls to a container. However, the storage stack is also used by
trusted host services (e.g., package installer) and the HiApp’s
code must be protected from tampering by LoApp. To protect
an app’s code but still redirect all app-generated ﬁle system
calls to the container, Anception keeps the read-only code
of an app on the host and keeps all other data ﬁles of the
app in the container. This design implies that the app’s data
could be stolen if a low assurance app compromises the
container. Fortunately, this problem is easy to address by high
assurance apps encrypting their writes to the container or by
extending our ﬁle system implementation in the container to
use known transparent encryption techniques [18] to secure the
reads/writes when they cross the boundary from host kernel
to the untrusted container kernel. Similarly, we assume the
high assurance app encrypts network packets before utilizing
container network services. We describe a detailed example
of how to use Anception’s architecture to construct a secure
banking app later in this section.
Anception bridges IPC channels to function across the
kernels. For example, our implementation supports shared
memory and Android’s custom Binder IPC. We also designed
a system call bridge that transfers system calls destined for
the container. We provide details later in this section and in
Section IV.
Anception’s design thus simpliﬁes the ability of apps to
protect themselves from malicious apps by reducing the attack
surface that
is available by both deprivileging services as
well as by transferring the network and ﬁlesystem calls to an
untrusted container kernel.
B. Architecture
We utilize a deprivileged container to execute delegated
privileged services. We refer to this as a container virtual
machine (CVM). Anception’s design is based on the following
principles:
1)
2)
3)
4)
Launch the app from the trusted host kernel: The
app’s code is stored outside the CVM.
Protect the UI/Input from the container’s kernel: Do
not trust the container with UI related operations but
handle them centrally on the host.
Protect the app’s virtual memory from the container’s
kernel: Do not trust the container with virtual mem-
ory of applications. Instead, pages are managed by
the trusted host outside the control of the container.
Protect the host: Protect the host system as much
as possible under the constraint of the ﬁrst three
principles. To the extent feasible, privileged opera-
tions (system calls) invoked on the host kernel should
instead run in the context of the CVM.
The above principles have to be achieved on an operating
system designed for mobile devices where resources are lim-
ited. Since attacks on the kernel are part of the threat model,
a possible solution is to give every app a guest kernel, but
we assume that is not yet practical for both resource and
performance reasons, and unlikely to be practical even with
hardware advances as the power demands of an increased code
base will outweigh any beneﬁts.
We brieﬂy describe why each of the above principles is
necessary under our threat model in order to protect high
assurance apps from untrusted apps. We assume that a low
assurance app has compromised the CVM via the larger
available attack surface (e.g., one of the privileged services)
and has escalated its privileges. Consider a well-designed
mobile banking app. Upon launching, the banking app acquires
345345
a user ID and password via the touch-screen interface on the
device.
Since the attacks we consider enable privilege escalation,
the attacker can modify the app’s code such that the banking
app itself communicates the password to an attacker. On
Anception, principle 1 ensures that the app code is stored on
the host. As stated, all non-code state of apps are maintained
in the CVM. Thus any attacker-issued writes are serviced in
the CVM that does not contain app code.
Next, the compromised OS can intercept the user ID and
password as it is entered by the user. Principle 2 ensures that
the CVM will not have an opportunity to intercept that input
since the UI stack does not run in the CVM.
Next,
the app will store the user ID and password in
its virtual memory. This provides another opportunity for the
attacker to steal the information. For example, if there were to
be a scheduler context-switch due to a timer, the kernel gets
control and could read the app’s memory. Principle 3 ensures
that the CVM will not be able to read the user-level memory
pages of the app.
Principle 4 is necessary since the host kernel must be
trusted (that is true in all virtualization solutions). Thus, we
minimize the attack surface of the host kernel, i.e., execute the
system calls on the CVM’s kernel when it is consistent with
other principles.
We now show that above principles are sufﬁcient to build
a simple secure banking app that can protect its sensitive data
from malware. Figure 2 depicts a banking app running on
Anception’s infrastructure. The app is launched from the host
and its memory pages exist only on the host. A certiﬁcate to
authenticate the bank’s server is read from its code base and
loaded into its virtual memory at launch time. It receives a user
ID and password securely from the host-side display manager
and stores them in its isolated memory pages. Using these two
items, the bank app can communicate with the bank server
over an end-to-end secure protocol such as TLS/SSL (session
keys for this will get negotiated end-to-end and reside in the
memory of the app). Communications go through the CVM,
potentially running malicious apps, but the CVM is unable to
read them. A bank server may also provide secure storage of
persistent data through this secured network connection.
Note that writing to local storage is not necessary to build a
fully-functional secure app that works with our threat model.
In practice, however, most apps do take advantage of local
storage. If that were to be the case, a compromised container
can steal information from such storage. However, an app may
store cryptographic keys in its code that is protected from other
apps and from the CVM. Then, the app can encrypt any data
written to storage in the CVM. We discuss a enhancement
to the Anception design in Section VII to allow secure local
storage transparently for apps.
Launching apps securely. When an app is downloaded
from an online store, it is installed on the host. Thus the app’s
code resides on the host. Figure 3 shows the banking app’s
code outside the CVM. The code is maintained in a permission
protected directory such that only the app and the system may
access the code. Android already supports this requirement.
This achieves the ﬁrst principle. Note that Anception provides
(cid:4)
(cid:3)
(cid:11)
(cid:5)
(cid:16)
(cid:17)
(cid:4)
(cid:16)
(cid:37)
(cid:9)
(cid:6)
(cid:16)
(cid:8)
(cid:36)
(cid:13)(cid:4)(cid:11)(cid:14)(cid:9)(cid:15)(cid:16)(cid:4)(cid:17)(cid:7)(cid:14)
(cid:11)(cid:2)(cid:14)(cid:9)(cid:5)(cid:11)(cid:16)(cid:16)(cid:18)(cid:8)(cid:17)(cid:14)
(cid:34)(cid:11)(cid:2)(cid:12)(cid:7)(cid:2)(cid:35)(cid:9)(cid:1)(cid:5)(cid:5)
(cid:10)(cid:6)(cid:11)(cid:3)(cid:12)
(cid:10)(cid:4)(cid:17)(cid:19)(cid:4)(cid:17)(cid:9)
(cid:20)(cid:4)(cid:17)(cid:6)(cid:7)(cid:21)(cid:3)(cid:11)(cid:6)(cid:4)
(cid:32)(cid:11)(cid:16)(cid:16)(cid:18)(cid:8)(cid:17)(cid:14)(cid:16)
(cid:20)(cid:8)(cid:2)(cid:6)(cid:11)(cid:7)(cid:2)(cid:4)(cid:17)(cid:9)(cid:28)(cid:29)
(cid:32)(cid:17)(cid:8)(cid:33)(cid:26)
(cid:34)(cid:11)(cid:2)(cid:12)(cid:7)(cid:2)(cid:35)
(cid:1)(cid:5)(cid:5)
(cid:25)(cid:2)(cid:3)(cid:17)(cid:9)
(cid:27)(cid:11)(cid:6)(cid:11)
(cid:20)(cid:28)(cid:29)(cid:9)(cid:30)(cid:4)(cid:17)(cid:2)(cid:4)(cid:31)
(cid:38)(cid:2)(cid:6)(cid:4)(cid:17)(cid:2)(cid:4)(cid:6)
(cid:10)(cid:4)(cid:2)(cid:14)(cid:22)(cid:13)(cid:4)(cid:3)(cid:19)
(cid:25)(cid:2)(cid:3)(cid:17)(cid:9)(cid:27)(cid:11)(cid:6)(cid:11)
(cid:34)(cid:11)(cid:2)(cid:12)(cid:9)(cid:10)(cid:4)(cid:17)(cid:19)(cid:4)(cid:17)(cid:9)
(cid:13)(cid:4)(cid:39)(cid:8)(cid:6)(cid:4)(cid:9)
(cid:10)(cid:6)(cid:8)(cid:17)(cid:11)(cid:35)(cid:4)
(cid:10)(cid:4)(cid:2)(cid:14)(cid:22)(cid:13)(cid:4)(cid:3)(cid:19)
(cid:23)(cid:24)(cid:10)(cid:22)(cid:10)(cid:10)(cid:24)
(cid:25)(cid:2)(cid:3)(cid:17)(cid:26)(cid:5)(cid:6)(cid:4)(cid:14)(cid:9)
(cid:27)(cid:11)(cid:6)(cid:11)
(cid:9)(cid:25)(cid:2)(cid:3)(cid:17)(cid:9)(cid:27)(cid:11)(cid:6)(cid:11)
(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:8)(cid:2)(cid:9)
(cid:36)(cid:8)(cid:16)(cid:6)(cid:9)(cid:30)(cid:4)(cid:17)(cid:2)(cid:4)(cid:31)
Fig. 2. Design of a secure banking app. The app maintains cryptographic
keys in its read-only code in trusted storage on the host VM. This code is only
accessible by the app and the system. Other apps cannot access the trusted
storage.
(cid:31)(cid:13)(cid:32)(cid:5)(cid:15)(cid:10)(cid:8)(cid:3)
(cid:30)(cid:4)(cid:10)(cid:11)(cid:20)
(cid:23)(cid:10)(cid:3)(cid:3)(cid:33)(cid:2)(cid:8)(cid:26)(cid:3)
(cid:30)(cid:7)(cid:13)(cid:3)(cid:14)(cid:4)(cid:14)(cid:32)(cid:7)(cid:5)(cid:34)(cid:13)(cid:35)(cid:2)
(cid:19)(cid:10)(cid:13)(cid:20)(cid:14)(cid:13)(cid:21)(cid:5)(cid:22)(cid:9)(cid:9)
(cid:6)(cid:34)(cid:29)(cid:36)(cid:5)(cid:37)(cid:38)(cid:38)(cid:38)
(cid:22)(cid:9)(cid:9)(cid:5)(cid:12)(cid:2)(cid:26)(cid:7)
(cid:29)(cid:14)(cid:3)(cid:9)(cid:18)(cid:10)(cid:25)(cid:5)
(cid:16)(cid:10)(cid:13)(cid:10)(cid:21)(cid:7)(cid:8)
(cid:1)(cid:7)(cid:10)(cid:9)
(cid:27)(cid:18)(cid:2)(cid:28)(cid:10)(cid:18)(cid:5)(cid:29)(cid:10)(cid:4)(cid:10)
(cid:12)(cid:2)(cid:26)(cid:7)
(cid:44)
(cid:45)
(cid:46)
(cid:37)
(cid:47)
(cid:37)(cid:38)
(cid:12)(cid:2)(cid:13)(cid:4)(cid:10)(cid:14)(cid:13)(cid:7)(cid:8)(cid:5)(cid:15)(cid:16)
(cid:19)(cid:10)(cid:13)(cid:20)(cid:14)(cid:13)(cid:21)(cid:5)(cid:22)(cid:9)(cid:9)
(cid:5)(cid:23)(cid:8)(cid:2)(cid:24)(cid:25)
(cid:6)(cid:34)(cid:29)(cid:36)(cid:5)(cid:37)(cid:38)(cid:38)(cid:38)
(cid:30)(cid:4)(cid:10)(cid:11)(cid:20)
(cid:1)(cid:7)(cid:10)(cid:9)
(cid:22)(cid:9)(cid:9)(cid:5)(cid:30)(cid:4)(cid:2)(cid:8)(cid:10)(cid:21)(cid:7)
(cid:50) (cid:51)
(cid:30)(cid:25)(cid:3)(cid:11)(cid:10)(cid:18)(cid:18)(cid:3)
(cid:49)
(cid:48)
(cid:12)(cid:15)(cid:16)(cid:5)(cid:17)(cid:7)(cid:8)(cid:13)(cid:7)(cid:18)
(cid:22)(cid:13)(cid:11)(cid:7)(cid:9)(cid:4)(cid:14)(cid:2)(cid:13)(cid:5)(cid:16)(cid:10)(cid:9)(cid:9)(cid:7)(cid:8)
(cid:6)(cid:34)(cid:5)(cid:39)(cid:5)(cid:29)(cid:14)(cid:3)(cid:9)(cid:18)(cid:10)(cid:25)
(cid:40)(cid:9)(cid:7)(cid:8)(cid:10)(cid:4)(cid:14)(cid:2)(cid:13)(cid:3)
(cid:6)(cid:13)(cid:41)(cid:42)(cid:10)(cid:8)(cid:3)(cid:43)(cid:10)(cid:18)(cid:18)(cid:5)(cid:9)(cid:10)(cid:8)(cid:10)(cid:42)(cid:7)(cid:4)(cid:7)(cid:8)(cid:3)(cid:5)
(cid:16)(cid:10)(cid:8)(cid:3)(cid:43)(cid:10)(cid:18)(cid:18)(cid:5)(cid:3)(cid:25)(cid:3)(cid:11)(cid:10)(cid:18)(cid:18)(cid:5)(cid:9)(cid:10)(cid:8)(cid:10)(cid:42)(cid:7)(cid:4)(cid:7)(cid:8)(cid:3)(cid:5)
(cid:52)(cid:14)(cid:18)(cid:7)(cid:53)(cid:5)(cid:54)(cid:7)(cid:4)(cid:33)(cid:2)(cid:8)(cid:20)(cid:53)(cid:5)
(cid:54)(cid:2)(cid:13)(cid:5)(cid:6)(cid:34)(cid:5)(cid:40)(cid:9)(cid:7)(cid:8)(cid:10)(cid:4)(cid:14)(cid:2)(cid:13)(cid:3)
(cid:22)(cid:13)(cid:11)(cid:7)(cid:9)(cid:4)(cid:14)(cid:2)(cid:13)(cid:5)
(cid:7)
(cid:11)
(cid:10)
(cid:9)
(cid:3)
(cid:8)
(cid:7)
(cid:3)
(cid:6)
(cid:5)
(cid:4)
(cid:3)
(cid:2)
(cid:1)
(cid:7)
(cid:11)
(cid:10)
(cid:9)
(cid:3)
(cid:18)
(cid:7)
(cid:13)
(cid:8)
(cid:7)
(cid:17)
(cid:5)
(cid:4)