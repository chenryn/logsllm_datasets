Only static corruption is considered. The voters, the bulletin
board and the judge do not accept to be corrupted. The honest
programs are deﬁned as follows:
– When a voter Vi runs her honest program πVi and is triggered
in order to cast a ballot, she runs the usual program. When
Vi is triggered in order to verify her vote, she performs the
individual test ϕIV
(b) with her ballot b, and if this evaluates
i
to ”true”, she outputs ”accept”, otherwise ”reject”.
– When the judge J runs its honest program πJ, it reads the
content from the bulletin board B including the result r (if
it does not receive any content, it outputs ”reject”). Then
the judge performs the universal test ϕUV (B,r), and if this
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:17:36 UTC from IEEE Xplore.  Restrictions apply. 
Deﬁnition 12 (Individual Veriﬁability). A protocol guarantees
individual veriﬁability if for every execution, and for every
voter Vi, choice c, credentials cred and ballot box B, whenever
the state VHappy(i, c, cred, B) is reached, it follows that
Vote(i, c, cred)∧∃b ∈ B: MyBallot(i, c, b).
C. Universal Veriﬁability
The universal veriﬁability deﬁnition by Cortier et al. de-
pends on certain predicates whose purpose is to formally deﬁne
what it means that a ballot ”contains” a vote and that the tallying
proceeds correctly.
Wrap. To deﬁne that a vote is “contained” in a ballot, Cortier
et al. introduce a predicate Wrap(c, b) that is left undeﬁned,
but has to satisfy the following properties:
(i) Any well-formed ballot b corresponding to some choice
c satisﬁes the Wrap predicate:
MyBallot(i, c, b) ⇒ Wrap(c, b)
(ii) A ballot b cannot wrap two distinct choices c1 and c2:
Wrap(c1, b)∧ Wrap(c2, b) ⇒ c1 = c2
For a given protocol, the deﬁnition of Wrap typically follows
from the protocol speciﬁcation.
Good sanitization. When the ballot box B is sanitized,
it is acceptable to remove some ballots but of course true
honest ballots should not be removed. Therefore, Cortier
et al. deﬁne the predicate GoodSan(B, Bsan) to hold true
(implicitly relatively to a run) if the honest ballots of B are
not removed from Bsan. This means that (i) Bsan ⊆ B, and (ii)
for any b ∈ B such that MyBallot(i, c, b) holds true for some
voter Vi and some choice c, it is guaranteed that b ∈ Bsan.
Good counting.
a predicate
GoodCount(Bsan,r) in order to describe that the ﬁnal result r
corresponds to counting the votes of Bsan. This is technically
deﬁned in [18] by introducing an auxiliary bulletin board
(cid:16)
san which is a permutation of Bsan and from which the list
B
rlist of votes (such that r = ρ(rlist) where ρ is the counting
(cid:16)
san. More formally,
function) can be extracted line by line from B
(cid:16)
,rlist such that
GoodCount(Bsan,r) holds true if there exist B
(cid:16)
san
(i) Bsan and rlist have the same size, and (ii) Bsan and B
san are
equal as multisets, and (iii) r = ρ(rlist), and (iv) for all ballots
[ j] = b for some index j, there exists a choice c
b with B
such that Wrap(c,b) as well as rlist[ j] = c hold true. Note that
the deﬁnition of GoodCount is parameterized by the counting
function ρ of the protocol under consideration.
al. deﬁne
(cid:16)
san
Cortier
et
Then, universal veriﬁability is deﬁned as follows.
Deﬁnition 13 (Universal Veriﬁability). A protocol guarantees
universal veriﬁability if for every execution, and every ballot
box B and result r, whenever the state JHappy(B,r) is reached,
it holds that
∃Bsan : GoodSan(B, Bsan)∧ GoodCount(Bsan,r).
Intuitively, whenever the judge (some election authority)
states that some result r corresponds to a ballot box B, then r
corresponds to the votes contained in a subset Bsan of B (some
ballots may have been discarded because they were ill-formed
for example) and this subset Bsan contains at least all ballots
formed by honest voters that played the entire protocol (that
is, including the ﬁnal checks).
797797
D. E2E Veriﬁability
Intuitively, end-2-end veriﬁability according to Cortier et
al. holds if, whenever no one complains (including the judge),
then the election result includes all the votes corresponding
to honest voters that performed the checks prescribed by the
protocol.
Deﬁnition 14 (E2E Veriﬁability). A protocol guarantees end-
2-end veriﬁability if for every execution, and every ballot box
B and result r, whenever a state is reached such that for some
subset of the honest voters (indexed by some set I) with choices
ci and credentials credi (i ∈ I) we have
JHappy(B,r)∧ (cid:7)
i∈I
VHappy(i, ci, credi, B),
then there exist rlist such that we have r = ρ(rlist) and {ci}i∈I ⊆
rlist (as multisets).
E. No Clash
Finally, Cortier et al. deﬁne the notion of “no clash” as
follows. Intuitively, ”no clash” describes the property that two
distinct honest voters may not build the same ballot.
Deﬁnition 15 (No Clash). A protocol guarantees no clash if
for every execution, whenever a state is reached such that
MyBallot(i, ci, b)∧ MyBallot( j, c j, b), then it must be the case
that i = j and ci = c j.
F. Discussion
Cortier et al. [18] showed that
individual veriﬁability,
universal veriﬁability, and the ”no clash” property together
imply End-to-End veriﬁability (all as deﬁned above).
In order to be able to deﬁne their notions of individual
and universal veriﬁability, Cortier et al. proposed a model
in which it is possible to (i) extract single ballots from the
bulletin board (implicit in the predicate VHappy), and to (ii)
uniquely determine the content, i.e. the plain vote, of each
single ballot (Wrap predicate). Therefore, these deﬁnitions can
only be applied to a class of protocols which fulﬁll these
requirements, and by this, for example, ThreeBallot [45] as
well as protocols in which ballots are information theoretically
secure commitments (e.g. [24]) can not be analyzed.
The notion of end-2-end veriﬁability (Deﬁnition 14) is rather
weak since it only requires that honest votes are counted (for
voters that checked). It does not control dishonest votes. In
particular, this notion does not prevent ballot stufﬁng. The
authors of [18] introduced this notion because the Helios
protocol does not satisfy strong veriﬁability as deﬁned in [19]
for example. Moreover, the veriﬁcation technique based on
typing developed in [18] would probably require some adaption
to cover strong veriﬁability as it would need to count the number
of votes, which is a difﬁcult task for type-checkers.
G. Casting in the KTV Framework
Protocol PCEKMW . The set of agents Σ consists of the honest
voters, the bulletin board B, the judge J, and the remaining
participants. Only static corruption is considered. The bulletin
board and the judge do not accept to be corrupted. The honest
programs are deﬁned as follows:
– When a voter V runs her honest program πV, and is triggered
to cast her ballot, she expects an identity i and a choice c (if
not, she stops). Then, she runs Vote(c) to build her ballot
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:17:36 UTC from IEEE Xplore.  Restrictions apply. 
, Tally, P) evaluates to ”true” or
respectively, if Verify(B, prmpub
”false”.
Individual veriﬁability. We deﬁne the goal γIV to be the set of
all runs of PSFC in which all honest voters’ ballots are pairwise
different (if (cid:11)= ⊥), i.e., no clashes occur. For the protocol PSFC,
individual veriﬁability according to Smyth et al. can essentially
be characterized by the fact that the protocol PSFC is (γIV ,0)-
veriﬁable by the judge J in the sense of Deﬁnition 1.
To see this, observe that, if a protocol achieves individual
veriﬁability according to Deﬁnition 7, then for all ppt ad-
versaries πA the probability Pr[π(1(cid:5)) (cid:7)→ ¬γIV , (J: accept)] ≤
Pr[π(1(cid:5)) (cid:7)→ ¬γIV ] is negligible for π = πP (cid:5) πA, where the latter
probability is negligible, if the protocol satisﬁes Deﬁnition 7.
For the implication in the opposite direction, let us as-
sume that Pr[π(1(cid:5)) (cid:7)→ ¬γIV , (J: accept)] is negligible for
all adversaries. Now, for each adversary A from the game
7, there is a corresponding adversary
used in Deﬁnition
πA which always produces correct
tally (note that A is
not concerned with tallying). For this adversary we have
Pr[π(1(cid:5)) (cid:7)→ ¬γIV , (J: accept)] = Pr[π(1(cid:5)) (cid:7)→ ¬γIV ] which, by
the above assumption, is negligible. This implies individual
veriﬁability (in the sense of Deﬁnition 7).
Universal veriﬁability. We deﬁne the goal γUV to be the set
of all runs of PSFC in which ﬁrst prmpub and then a ﬁnal result
(Tally, P) are published and Tally = correct tally(B, prmpub
)
(recall that B is the content of the bulletin board that contains
voters’ ballots).
For the protocol PSFC, universal veriﬁability according to
Smyth et al. can essentially be characterized by the fact that the
protocol PSFC is (γUV ,0)-veriﬁable in the sense of Deﬁnition 1.
To see this, ﬁrst observe that, for each adversary A, the con-
(cid:16)) in Experiment ExpUV(Π, A)
dition Verify(B, prmpub
(Fig. 6) is true if an honest judge J outputs “accept” (in
the system π with the corresponding adversary), and false
otherwise. Second, the adversary A in Experiment ExpUV(Π, A)
(cid:16) (cid:11)=
produces a tuple (B, prmpub
) holds true if and only if we have ¬γUV
correct tally(B, prmpub
(in the corresponding run of π).
(cid:16)) for which Tally
, Tally
, Tally
(cid:16), P
(cid:16), P
Thus, essentially, for a voting protocol P achieving universal
veriﬁability according to Deﬁnition 9 (which means that
the success rate in Experiment ExpUV(Π, A) (Fig. 6) is
negligible for every ppt adversary A) is equivalent to the
statement that the goal γUV is 0-veriﬁable by the judge J
according to Deﬁnition 1 (which means that the probability
Pr[π(1(cid:5)) (cid:7)→ ¬γUV , (J: accept)] is negligible in every instance
πP (cid:5) πA).
Election veriﬁability. According to Smyth et al. the protocol
PSFC achieves election veriﬁability if it achieves individual and
universal veriﬁability. Therefore this notion can be expressed
in the language of Deﬁnition 1 using the goal γIV ∧ γUV .
b and to submit it to the bulletin board. Afterwards, she
reaches a state MyBallot(i, c, b). When the voter is triggered
to verify her vote, she reads the content of the bulletin board
B and reaches a state VHappy(i, c, B) if her checks evaluate
to true.
– When the judge J runs its honest program πJ and is triggered
to verify the election run, it reads the content of the bulletin
board B including the ﬁnal result r (if not possible, J outputs
”reject”). If the judge successfully performs some checks
(which depend on the concrete voting protocol), then he
outputs ”accept” and reaches a state JHappy(B,r).
Individual veriﬁability. We deﬁne the goal γIV to be the
set of all runs of PCEKMW in which whenever an honest voter
Vi reaches the state VHappy(i, c, B) for some choice c and
ballot b, then there exists a ballot b ∈ B such that this voter
started with (i, c) as her input and reached MyBallot(i, c, b) as
intermediary state. Then, individual veriﬁability by Cortier et
al. (Deﬁnition 12) can essentially be characterized by the fact
that the protocol PCEKMW is (γIV ,0)-veriﬁable by the judge J.
Universal veriﬁability. We deﬁne the goal γUV to be the set
of all runs of PCEKMW in which whenever a result r is obtained
and the ﬁnal content of the ballot box is B then there exists
Bsan such that GoodSan(B, Bsan) and GoodCount(Bsan,r) hold
true (as deﬁned above). Then, universal veriﬁability by Cortier
et al. (Deﬁnition 13) can essentially be characterized by the fact
that the protocol PCEKMW is (γUV ,0)-veriﬁable by the judge J.
End-to-end veriﬁability. We deﬁne the goal γE2E to be the
set of all runs of PCEKMW in which the result r of the election
satisﬁes r = ρ(rlist) for some rlist that contains (as multiset)
all the choices ci for which some honest voter Vi reached a
state VHappy(i, ci, crediB). Then, end-to-end veriﬁability by
Cortier et al. (Deﬁnition 14) can essentially be characterized
by the fact that the protocol PCEKMW is (γE2E ,0)-veriﬁable by
the judge J.
DEFINITION OF SMYTH ET AL.: CASTING IN THE KTV
APPENDIX C
FRAMEWORK
We cast the deﬁnitions of individual veriﬁability, universal
veriﬁability and election veriﬁability by Smyth et al. [47] in
the framework of Deﬁnition 1.
Protocol PSFC. The set of agents Σ consists of the voters, the
bulletin board B, the judge J, the scheduler, and the remaining
participants. Since static corruption is considered, the agents
only accept the corrupt message at the beginning of an election
run. The bulletin board and the judge do not accept to be
corrupted.
When a voter V runs her honest program πV, she expects
a candidate c as input (if the input is empty, she stops). After
that, she reads the public election parameters prmpub from the
bulletin board B (if she does not receive any election paramaters
on B, she stops). Then, she runs Vote(c, prmpub
) and sends the
resulting ballot b to the bulletin board B. Although this is kept
implicit in the discussed paper, we will assume here that V
subsequently checks that its ballot is published on B.
When the judge J runs its honest program πJ, it reads
the content from the bulletin board B, including the public
paramaters prmpub, the tally Tally, and the proof P (if the
judge does not receive one of these inputs, it outputs ”reject”).
Then, the judge runs Verify and outputs ”accept” or ”reject”,
798798
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:17:36 UTC from IEEE Xplore.  Restrictions apply.