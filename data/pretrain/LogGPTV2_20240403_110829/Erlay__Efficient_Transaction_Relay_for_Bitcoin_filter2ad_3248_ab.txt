bandwidth, computational power, and hardware resources, and (2)
making public nodes more efficient so that they can accept more
connections from private nodes. Our work targets both objectives.
3 THE PROBLEM WITH FLOODING
TRANSACTIONS
Flooding is inefficient. BTCFlood sends many redundant trans-
action announcements. To see why let us first consider how many
announcements would be sent if the protocol were efficient. Since,
optimally, each node would receive each announcement exactly
once, the number of times each announcement is sent should be equal
to the number of nodes.
Peer	2Peer	1INVhash(tx)GETDATAhash(tx)txtx	valida+ontxFigure 4: Analytical cost of relaying transactions via flood-
ing for one Bitcoin node during one month.
4 PROTOCOL REQUIREMENTS
While there exists prior work on selective flooding in peer-to-peer
networks, the key challenge addressed in this work is how to apply
low-fanout flooding without compromising the security of the Bitcoin
system. Erlay’s design is shaped by four requirements.
R1: Scale with the number of connections. Our main goal is to
design a transaction dissemination protocol that has good scalability
as a function of the number of connections. This way, we can make
the network more secure without sacrificing performance.
R2: Maintain a network topology suited for a decentralized
environment. Bitcoin’s premise of a decentralized environment
puts constraints on the design of its network. Although imposing
a structure onto a network, e.g., by organizing it into a tree or
star topology, or by using DHT-style routing, enables bandwidth-
efficient implementation of flooding, this also introduces the risks
of censorship or partitioning [44]. The topology of the network
must, therefore, remain unstructured, and routing decisions must
be made independently by every node based on local state.
R3: Maintain a reasonable latency. Transaction propagation de-
lay should remain similar to what the existing protocol provides.
Low latency is essential to user experience and enables better effi-
ciency in block relay [17].
R4: Be robust to attacks under the existing threat model. Our
protocol must remain robust under the same threat model as that
assumed by the existing protocol. Similarly to Bitcoin, we assume
that an attacker has control over a limited, non-majority, number
of nodes in the network, has a limited ability to make other nodes
connect to it, and is otherwise unrestricted in intercepting and
generating traffic for peers that it is connected to.
The transaction relay protocol must not be any more susceptible
to DoS attacks and client deanonymization, and must not leak any
more information about the network topology [54] than the existing
protocol.
5 ERLAY DESIGN
Traditionally, P2P networks addressed the inefficiency of flooding
by imposing a structured overlay onto an ad-hoc topology. We re-
frained from structured network organizations for security reasons
Figure 5: Erlay disseminates transactions using low-fanout
flooding as the first step, and then several rounds of recon-
ciliation to reach all nodes in the network.
Figure 6: Comparison of reconciliation, flooding, and Erlay
in their bandwidth usage and latency to reach all nodes.
discussed in Section 4. Instead, our design relies on two common
system-building techniques: delay and batching.
Instead of announcing every transaction on each link, a node
using our protocol advertises it to a subset of peers—this is called
low-fanout flooding. To make sure that all transactions reach the
entire network, nodes periodically engage in an interactive protocol
to discover announcements that were missed, and request missing
transactions. This is called set reconciliation. Our protocol, Erlay, is
comprised of low-fanout flooding and set reconciliation (Fig. 5).
Low-fanout flooding. The rationale behind low-fanout flood-
ing is to expediently relay a transaction to be within a small number
of hops of every node in the network. If each transaction ends up
close to every node, then reconciliation can finish dissemination
using a small number of rounds. Therefore, a key decision in low-
fanout flooding is to which peers to relay.
Set reconciliation. Set reconciliation was proposed as an alter-
native to synchronization in distributed systems [50]. Using set
reconciliation a node in a P2P network periodically compares its
local state to the state of its peers, and sends/requests only the
necessary information (the state difference). Set reconciliation may
be viewed as an efficient version of batching (accumulating multi-
ple state updates and sending them as a single message). The key
8162432Connectivity05101520Bandwidth per month (GB)Announcement costBase cost (TX+GETDATA)ReconciliationRound 2Low-fanoutﬂoodingReconciliationRound 1…ReconciliationRound nPrivate nodes: Public nodes: Bandwidth usedLatencyto reachall nodesReconcilationFloodingErlaychallenge in practical reconciliation is for the peers to efficiently
compute their missing transaction state, and to limit the exchanged
transactions to just those that the other peer is missing.
Fig. 6 shows how Erlay attempts to find a sweet spot in terms of
bandwidth and latency by combining flooding, which wastes band-
width but disseminates transactions quickly, and reconciliation,
which takes longer, but does not waste bandwidth. In Appendix A
we discuss how this design allows Erlay to be used in other cryp-
tocurrencies with higher transaction rate than currently provided
by Bitcoin.
Next, we discuss two fundamental aspects of Erlay in detail.
5.2 Set reconciliation
In Erlay peers perform set reconciliation by computing a local set
sketch, as defined by the PinSketch algorithm [23]. A set sketch is a
type of set checksum with two important properties:
• Sketches have a predetermined capacity, and when the num-
ber of elements in the set does not exceed the capacity, it is
always possible to recover the entire set from the sketch by
decoding the sketch. A sketch of b-bit elements with capacity
c can be stored in bc bits.
• A sketch of the symmetric difference between the two sets
(i.e., all elements that occur in one but not both input sets),
can be obtained by XORing the bit representation of sketches
of those sets.
5.1 Low-fanout flooding
Flooding is expensive, so we want to use it sparingly and in strategic
locations. For that reason, only well-connected public nodes flood
transactions to other public nodes via outbound connections. Since
every private node is directly connected to several public nodes,
this policy ensures that a transaction is quickly propagated to be
within one hop from the majority of the nodes in the network. As
a result, only one or two reconciliation rounds are needed for full
reachability (R3). According to this, the protocol we propose may
be viewed as two-tier optimistic replication [59].
To meet our scalability goal (R1), we limit the flooding done by
public nodes to eight outbound connections even if the total number
of these connections is higher. This way, increasing connectivity
does not increase transaction dissemination cost proportionally.
The decision to relay through outbound connections, but not the
inbound ones, was made to defend against timing attacks [22, 54].
In a timing attack, an attacker connects to a victim and listens to
all transactions that a victim might send on that link (the inbound
connection for the victim). If an attacker learns about a transaction
from multiple nodes (including the victim), the timing of transaction
arrival can be used to guess whether a transaction originated at the
victim: if it did then it will most likely arrive from the victim earlier
than from other nodes. BTCFlood introduces a diffusion delay to
prevent timing attacks. In Erlay, since we do not forward individual
transactions to inbound links, this delay is not necessary. So this
decision favors both R3 and R4.
Transactions in the Bitcoin network may originate at both public
and private nodes. In the protocol we propose, nodes do not relay
their transactions via flooding, so the network learns about the
transactions they have originated via reconciliation: private nodes
add their own transactions to the batch of other transactions that
they forward to their peers during reconciliation. This is used to
hide when transactions are originated at private nodes. If transac-
tions were instead flooded from private nodes, it would be obvious
to public nodes that those transactions must have been created at
those nodes, because according to the chosen flooding policy, this
is the only case where a private node floods a transaction, as they
have no inbound links. Since a private node forwards its own trans-
actions as part of a batch, as opposed to individually, a malicious
public node is unlikely to discover the origin of a transaction (R4).
These properties make sketches appropriate for a bandwidth-
efficient set reconciliation protocol. More specifically, if two parties,
Alice and Bob, each have a set of elements, and they suspect that
these sets largely but not entirely overlap, they can use the following
protocol to have both parties learn all the elements of the two sets:
• Alice and Bob both locally compute sketches of their sets.
• Alice sends her sketch to Bob.
• Bob combines the two sketches, and obtains a sketch of the
symmetric difference.
• Bob tries to recover the elements from the symmetric differ-
ence sketch.
• Bob sends to Alice the elements that she is missing.
This procedure will always succeed when the size of the differ-
ence (elements that Alice has but Bob does not have plus elements
that Bob has but Alice does not have) does not exceed the capacity
of the sketch that Alice sent. Otherwise, the procedure is very likely
to fail.
A key property of this process is that it works regardless of the
actual set sizes: only the size of the set differences matters.
Decoding the sketch is computationally expensive and is qua-
dratic in the size of the difference. Because of this, accurately es-
timating the size of the difference (Section 5.2.1) and reconciling
before the set difference becomes too large (Section 5.2.2) are im-
portant goals for the protocol.
5.2.1 Reconciliation round. Fig. 7 summarizes the reconciliation
protocol. To execute a round of reconciliation, every node maintains
a reconciliation set for each one of its peers. A reconciliation set
consists of short IDs of transactions that a node would have sent
to a corresponding peer in regular BTCFlood, but has not because
Erlay limits flooding. We will refer to Alice’s reconciliation set for
Bob as A and Bob’s set for Alice as B. Alice and Bob will compute the
sketches for these reconciliation sets as described in the previous
section.
Important parameters of the protocol are: D – the true size of
the set difference, d – an estimate of D, and q – a parameter used to
compute d. We provide the derivation of these values below. First,
we describe a reconciliation round:
(1) According to a chosen reconciliation schedule (Section 5.2.2),
Alice sends to Bob the size of A and q.
(2) Bob computes d, an estimate of D, between his B and Alice’s
A (see below).
Figure 7: Reconciliation protocol with correct difference estimation (Reconcile-Init, followed by DiffExchange), and reconcil-
iation protocol with incorrect difference estimation (Reconcile-Init, followed by Reconcile-Bisec). In case reconciliation fails
during Reconcile-Bisec, reconciliation falls back to Bitcoin’s current exchange method (see Fig. 3).
(3) Bob computes a sketch of B with capacity for d transactions
and sends it to Alice, along with the size of B.
(4) Alice receives Bob’s sketch of B, computes a sketch of A,
and XORs the two sketches. Now Alice has a sketch of the
difference between A and B.
(5) If the difference size was estimated correctly, Alice is able to
decode the sketch computed in the previous step, request the
transactions that she is missing from Bob, and then advertise
to Bob the transactions that he is missing. If the estimation
was incorrect (sketch decoding failed), Alice will resort to
bisection (Section 5.2.3).
(6) After this process, Alice updates q (see below) and clears A.
Bob clears B.
Accurate estimation of D is crucial for a successful reconcilia-
tion, because sketches are computed in order to decode d or fewer
differences: under-estimation results in a protocol failure and over-
estimation introduces bandwidth overhead. Prior work estimated
D using techniques like min-wise hashing [14] or random projec-
tions [30]. These techniques are complex, and we were concerned
that they would use more bandwidth than they would save. There-
fore, Erlay uses a minimalistic approach: it estimates the size of
the set difference based on just the current sizes of the sets and the
difference observed in the previous reconciliation round:
d = abs (|A| − |B|) + q · min(|A|, |B|) + c,
where q is a floating point coefficient (derived below) that charac-
terizes previous reconciliation, and c is a parameter for handling
special cases.
Indeed, the difference between two sets cannot be smaller than
the difference in their sizes. To avoid costly underestimations, we
add the size of the smaller set normalized by q, and a constant
c = 1, which prevents estimating d = 0 when |A| = |B| and q ·
min(|A|, |B|) = 0.
The coefficient q characterizes earlier reconciliation, so before
the very first reconciliation round it is set to zero. At the end of
a reconciliation round, we simply update q based on the true D
that we discovered during the round, by substituting D for d in the
above equation, dropping c, and then solving for q:
q = D − abs (|A| − |B|)
min(|A|, |B|)
This updated q will be used in the next reconciliation round. We
compute q in this way because we assume that every node in the
network will have a consistent optimal q.
Reconciliation is a fertile ground for DoS attacks, because decod-
ing a sketch is computationally expensive. To prevent these attacks,
in our protocol the node that is interested in reconciliation (and the
one that has to decode the sketch) initiates reconciliation (Alice, in
our example). Bob cannot coerce Alice to perform excessive sketch
decoding.
5.2.2 Reconciliation schedule. Every node initiates reconciliation
with one outbound peer every T seconds. Choosing the right value
for T is important for performance and bandwidth consumption.
If T is too low, reconciliation will run too often and will use more
bandwidth than it saves. If T is too high, reconciliation sets will
be large and decoding set differences will be expensive (the com-
putation is quadratic in the number of differences). A large T also
increases the latency of transaction propagation.
A node reconciles with one peer every T seconds. Since every
node has c outbound connections, every link in the network would,
on average, run reconciliation every T · c seconds. This means
that the average reconciliation set prior to reconciliation would
contain T · c · T X r ate transactions, where T X r ate is the global
transaction rate. This also means that during the interval between
reconciliations every node would receive T · T X r ate transactions.
We use a value of 1 second for T in Erlay. With this setting,
and the current ratio of private to public nodes, every public node
will perform about eight reconciliations per second. Given the
current maximum Bitcoin network transaction rate T X r ate of 7
transactions/s, the average difference set size for this protocol is 7
elements. We evaluate our choice of parameters in Sections ??.
5.2.3 Bisection for set difference estimation failure. Our set recon-
ciliation approach relies on the assumption that an upper bound for
the set difference between two peers is predictable. That is, if the
actual difference is higher than estimated, then reconciliation will
BISECSUMMARYsketch(B/2, d)BobAliceINIT|A|, qSUMMARYsketch(B, d)BobAliceRECONCIL_DIFFmissing1, missing2TXmissing1GETDATAmissing2TXmissing2BobAliceSet ASet BAttempt to ﬁnd difference:diff, fail = recon(sketch(A), sketch(B))if (fail) then    run Protocol Reconcile-Bisecelse run Protocol DiffExchangeEstimate difference:d = estimate(|A|, |B|, q)Remove from missing2 txns received from other peerssince start of this exchangeTry to ﬁnd differencediff1, fail1 = recon(sketch(A/2), sketch(B/2))diff2, fail2 = recon(sketch(A-A/2), sketch(B-B/2))if (fail1 OR fail2) then    run Original protocol in Fig. 3else run Protocol DiffExchangeProtocol Reconcile-InitProtocol DiffExchangeProtocol Reconcile-BisecFigure 8: Bisection is enabled by the linearity of sketches
Figure 9: The decode time of our library (Minisketch) as com-
pared to CPISync for varying set difference sizes.
fail. This failure is detectable by a client computing the difference.
An obvious solution to this failure is to recompute and retransmit
the sketch assuming a larger difference in the sets. However, this
would make prior reconciliation transmissions useless, which is
inefficient.
Instead, Erlay uses reconciliation bisection, which reuses previ-
ously transmitted information. Bisection is based on the assumption
that elements are uniformly distributed in reconciliation sets (this
may be achieved by hashing). If a node is unable to reconstruct the
set difference from a product of two sketches, the node then makes
an additional reconciliation request, similar to the initial one, but
this request is applied to only a fraction of possible messages (e.g.,
to transactions in the range 0x0–0x8). Because of the linearity of
sketches, a sketch of a subset of transactions would allow the node
to compute a sketch for the remainder, which saves bandwidth.
However, this approach would allow recovery of at most 2d
differences, where d is the estimated set difference in the initial step.
Even though bisections are not limited to one and may be applied
consequentially without losing efficiency, in our implementation
after a reconciliation step failure we allow only one bisection with
a new overall estimate 2d (see Fig. 8). The bisection process is