### 代码优化

以下是经过优化的代码，使其更加清晰、连贯和专业：

```c
// 测试8-11位
Label_2:
{
    // 第8位设置
    if (protect & 0x100) {
        if (tmp1 == 0x18)
            return -1;
        tmp1 &= 0x10;
    }

    // 第9位未设置
    if (!(protect & 0x200)) {
        protect &= 0x400;
        if (!protect)
            return tmp1;
    }

    if (tmp1 == 0x18)
        return -1;

    if (tmp1 & 0x2)
        return -1;

    return tmp1 | 0x18;
}

// 转换为内核页属性后，继续调用MmProtectVirtualMemory，进而调用MiAllowProtectionChange
NTSTATUS MiAllowProtectionChange(
    int64 a1, 
    int64 a2, 
    int64 a3, 
    int64 a4, 
    int64 a5, 
    int64 a6
) {
    int64 *v1; // rsp+0x20
    int64 *v2; // rsp+0x28
    int64 *v3; // rsp+0x30
    int64 *v4; // rsp+0x38
    int64 *v5; // rsp+0x40
    int64 v6;  // rsp+0x50
    int v7;    // rsp+0x54
    int64 v8;  // rsp+0x58
    int64 v9;  // rsp+0x60
    int v10;   // esi
    int v11;   // ebx
    int v12;   // ecx
    char v13;  // r9b
    int v14;   // r10d
    int v15;   // eax
    char v16;  // r12b

    v10 = (int)a4;

    // 如果请求新的页属性为MM_EXECUTE
    if (a4 & 2) {
        v14 = *(int *)(a3 + 0x30);
        // 0xc00: PAGE_WRITECOMBINE|PAGE_GRAPHICS_NOACCESS
        // 0x380: PAGE_EXECUTE_WRITECOPY|PAGE_GUARD|PAGE_NOCACHE
        if ((v14 == 0xc00) && (v14 & 0x380))
            return 0xC0000045h;
    }

    v11 = 0;
    v15 = 0;
    v15 = MiLockWorkingSetShared(a1 + 0x500);
    v16 = (char)v15;

    if (a5 > a6)
        goto label_1;

    if (v10 & 2)
        *(char *)a1 = 1;

    while (1) {
        v5 = &v7;
        v4 = &v9;
        v3 = &v8;
        v2 = &v6;
        v15 = MiQueryAddressState(a2, a3, v16, a3, 0, v2, v3, v4, v5);
        v12 = *v2;

        if (v12 == -1)
            v12 = 0;

        *v2 = v12;

        // 查询出来的页属性不具有MM_EXECUTE
        if (!(v12 & 2))
            v12 = 1;
        else
            v12 = 0;

        // 经过前面的计算，如果请求的新页属性为可执行，但是当前的页属性不具有可执行。
        if (*(char *)a1 & v12) {
            v11 = 1;
            break;
        }

        // 如果请求新的页属性为可读写MM_READWRITE，但当前页属性为可执行MM_EXECUTE。
        if ((v12 & 2) && (a4 & 4)) {
            v11 = 1;
            break;
        }

        if (*v4 > a6)
            break;
    }

label_1:
    MiUnlockWorkingSetShared(a1 + 0x500, v16);

    if (v11) {
        // 根据进程的mitigation flag判断是否要阻断或记录日志。
        v15 = MiArbitraryCodeBlocked(a2);
    }

    return v15;
}

// MiAllowProtectionChange在以下两种情况下进行阻断：
// 1. 如果当前页属性不具有可执行权限，但是要改变的权限中包含可执行权限，则阻断。
// 2. 在当前执行权限为可执行的情况下，不能加入可读写权限。最后调用MiArbitraryCodeBlocked进行阻断。

NTSTATUS MiArbitraryCodeBlocked(PEPROCESS eprocess) {
    PETHREAD ethread;

    if (eprocess->MitigationFlags & (1 << 8) && (eprocess->CrossThreadFlags & (1 << 18))) {
        EtwTraceMemoryAcg(0x80000000);
        EtwTimLogProhibitDynamicCode(2, eprocess);
        return 0x0C0000604;
    }

out:
    EtwTraceMemoryAcg(0);
    return 0;
}

// 如果eprocess->MitigationFlags的第8位设置，并且ethread->CrossThreadFlags的第18位也设置了，则会阻挡并记录日志，返回一个出错值。
// 否则只会根据ethread->CrossThreadFlags的第18位来判断是否需要记录日志，并返回正常值。

// MitigationFlag和MitigationFlag2保存的是内核对进程漏洞缓解措施的状态值，这两个变量都是int类型，每个位代表一个安全功能。
// 在Windows 10 17763版本中，MitigationFlag存满了32个位，MitigationFlag2保存了15个位，
// 所以这个版本的Windows 10一共提供了47个安全功能。

// 数据结构定义
typedef struct _EPROCESS {
    ...
    union {
        UINT MitigationFlags;
        struct {
            UINT ControlFlowGuardEnabled : 1;
            UINT ControlFlowGuardExportSuppressionEnabled : 1;
            UINT ControlFlowGuardStrict : 1;
            UINT DisallowStrippedImages : 1;
            UINT ForceRelocateImages : 1;
            UINT HighEntropyASLREnabled : 1;
            UINT StackRandomizationDisabled : 1;
            UINT ExtensionPointDisable : 1;
            UINT DisableDynamicCode : 1;
            UINT DisableDynamicCodeAllowOptOut : 1;
            UINT DisableDynamicCodeAllowRemoteDowngrade : 1;
            UINT AuditDisableDynamicCode : 1;
            UINT DisallowWin32kSystemCalls : 1;
            UINT AuditDisallowWin32kSystemCalls : 1;
            UINT EnableFilteredWin32kAPIs : 1;
            UINT AuditFilteredWin32kAPIs : 1;
            UINT DisableNonSystemFonts : 1;
            UINT AuditNonSystemFontLoading : 1;
            UINT PreferSystem32Images : 1;
            UINT ProhibitRemoteImageMap : 1;
            UINT AuditProhibitRemoteImageMap : 1;
            UINT ProhibitLowILImageMap : 1;
            UINT AuditProhibitLowILImageMap : 1;
            UINT SignatureMitigationOptIn : 1;
            UINT AuditBlockNonMicrosoftBinaries : 1;
            UINT AuditBlockNonMicrosoftBinariesAllowStore : 1;
            UINT LoaderIntegrityContinuityEnabled : 1;
            UINT AuditLoaderIntegrityContinuity : 1;
            UINT EnableModuleTamperingProtection : 1;
            UINT EnableModuleTamperingProtectionNoInherit : 1;
            UINT RestrictIndirectBranchPrediction : 1;
            UINT IsolateSecurityDomain : 1;
        } MitigationFlagsValues;
    };
} EPROCESS, *PEPROCESS;

typedef struct _ETHREAD {
    ...
    UINT CrossThreadFlags;
} ETHREAD, *PETHREAD;
```

### 说明
1. **代码块分隔**：使用花括号 `{}` 将相关的代码块分隔开，使代码更易读。
2. **注释**：添加了更多的注释，解释每一步的目的，使代码逻辑更清晰。
3. **变量命名**：保持变量命名的一致性和清晰性，便于理解。
4. **数据结构定义**：将数据结构定义单独列出，便于查看和维护。
5. **格式化**：统一了代码的缩进和空格，使其更符合常见的编程规范。

希望这些改进能帮助你更好地理解和维护代码。如果有任何进一步的需求，请告诉我！