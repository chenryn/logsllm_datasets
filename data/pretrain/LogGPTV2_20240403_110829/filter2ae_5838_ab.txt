    // 测试8-11bit
    Label_2:
    // 第8bit设置
    If (protect & 0x100) {
    If (tmp1 == 0x18)
    Return -1;
    Tmp1 &= 0x10;
    }
    // 第9bit没设置
    If (!(protect & 0x200)) {
    Protect &= 0x400;
    If (!Protect)
    Return tmp1;
    }
    If (tmp1 == 0x18)
    Return -1;
    If (tmp1 & 0x2)
    Return -1;
    Return tmp1 | 0x18;
    }
在转换为内核页属性后， 继续调用MmProtectVirtualMemory，它进而调用MiAllowProtectionChange。 还原为伪c代码为：
    NTSTATUS MiAllowProtectionChange(int64 a1,
    int64 a2,
    int64 a3,
    int64 a4,
    int64 a5,
    int64 a6)
    {
    Int64 *v1;// rsp+0x20
    Int64 *v2;// rsp+0x28
    Int64 *v3;// rsp+0x30
    Int64 *v4;// rsp+0x38
    Int64 *v5;// rsp+0x40
    Int64 v6;// rsp+0x50
    Int v7;// rsp+0x54
    Int64 v8;// rsp+0x58
    Int64 v9;// rsp+0x60
    Int v10;// esi
    Int v11;// ebx
    Int v12;// ecx
    char v13;// r9b
    Int v14;// r10d
    int v15;// eax
    Char v16;// r12b
    V10 = (int)a4;
    // 如果请求新的页属性为MM_EXECUTE
    If (a4 & 2) {
    V14 = *(int *)(a3 + 0x30);
    // 0xc00 PAGE_WRITECOMBINE|PAGE_GRAPHICS_NOACCESS
    // 0x380 PAGE_EXECUTE_WRITECOPY|PAGE_GUARD|PAGE_NOCACHE
    If ((v14 == 0xc00) && (v14 & 0x380))
    Return 0C0000045h;
    }
    V11 = 0;
    V15 = 0;
    V15 = MiLockWorkingSetShared(a1 + 0x500);
    V16 = (char)v15;
    If (a5 > a6)
    Goto label_1;
    If (v10 & 2)
    *(char *)a1 = 1;
    Whie (1) {
    V5 = &v7;
    V4 = &v9;
    V3 = &v8;
    V2 = & v6;
    V15 = MiQueryAddressState(a2, a3, v16, a3, 0, v2, v3, v4, v5);
    V12 = *v2;
    If (v12 == -1)
    V12 = 0;
    *v2 = v12;
    // 查询出来的页属性不具有MM_EXECUTE
    If (!(v12 & 2))
    V12 = 1;
    Else
    V12 = 0;
    // 经过前面的计算，如果请求的新页属性为可执行，但是当前的页属性不具有可执行。
    If (*(char *)a1 & v12) {
    V11 = 1;
    Break;
    }
    //如果请求新的页属性为可读写MM_READWRITE， 但当前页属性为可执行MM_EXECUTE。
    If ((v12 & 2) && (a4 & 4)) {
    V11 = 1;
    break;
    }
    If (*v4 > a6)
    Break;
    }
    Label_1:
    MiUnlockWorkingSetShared(a1 + 0x500, v16);
    If (v11)
    // 根据进程的mitigation flag判断是否要阻断或记录日志。
    V15 = MiArbitraryCodeBlocked(a2);
    Return v15;
    }
综上分析，MiAllowProtectionChange在以下两种情况下进行阻断：
1、 如果当前页属性不具有可执行， 但是要改变的权限中包含可执行权限，则阻断。也就是说只要当前存在的页属性没有可执行， 就不能把当前页面在加入可执行权限。
  * 用NTAllocVirtualMemory新申请一块可执行内存。
  * 当前只读， 不能改为可执行。
  * 当前读写， 不能改为可执行。
2、 在当前执行权限为可执行的情况下， 不能加入可读写权限。 最后调用MiArbitraryCodeBlocked进行阻断。 还原为伪c代码为：
    NTSTATUS MiArbitraryCodeBlocked(PEPROCESS eprocess)
    {
    PETHREAD ethread;
    If (eprocess->MitigationFlags & (1 CrossThreadFlags & 0x40000)) {
    EtwTraceMemoryAcg(0x80000000);
    EtwTimLogProhibitDynamicCode(2, eprocess);
    Return 0x0C0000604;
    }
    Goto out;
     }
    If (eprocess->MitigationFlags & (1 CrossThreadFlags & 0x40000)) {
    EtwTimLogProhibitDynamicCode(1, eprocess);
    }
    }
    Out:
    EtwTraceMemoryAcg(0);
    Return 0;
    }
如果eprocess->MitigationFlags的第8个bit设置，并且ethread->CrossThreadFlags的第18bit也设置了，则会阻挡并记录日志，返回一个出错值。否则只会跟ethread->CrossThreadFlags的第18bit来判断是否需要记录日志，并返回正常值。
MitigationFlag和MitigationFlag2保存的是内核对进程漏洞缓解措施的状态值，这两个变量都是int类型，每个bit代表一个安全功能，在win10
17763版本中，MitigationFlag存满了32个bit，MitigationFlag2保存了15个bit，
所以这个版本的win10一共提供了47个安全功能。
    lkd> dt nt!_eprocess -r1
       +0x820 MitigationFlags  : Uint4B
       +0x820 MitigationFlagsValues : 
          +0x000 ControlFlowGuardEnabled : Pos 0, 1 Bit
          +0x000 ControlFlowGuardExportSuppressionEnabled : Pos 1, 1 Bit
          +0x000 ControlFlowGuardStrict : Pos 2, 1 Bit
          +0x000 DisallowStrippedImages : Pos 3, 1 Bit
          +0x000 ForceRelocateImages : Pos 4, 1 Bit
          +0x000 HighEntropyASLREnabled : Pos 5, 1 Bit
          +0x000 StackRandomizationDisabled : Pos 6, 1 Bit
          +0x000 ExtensionPointDisable : Pos 7, 1 Bit
          +0x000 DisableDynamicCode : Pos 8, 1 Bit
          +0x000 DisableDynamicCodeAllowOptOut : Pos 9, 1 Bit
          +0x000 DisableDynamicCodeAllowRemoteDowngrade : Pos 10, 1 Bit
          +0x000 AuditDisableDynamicCode : Pos 11, 1 Bit
          +0x000 DisallowWin32kSystemCalls : Pos 12, 1 Bit
          +0x000 AuditDisallowWin32kSystemCalls : Pos 13, 1 Bit
          +0x000 EnableFilteredWin32kAPIs : Pos 14, 1 Bit
          +0x000 AuditFilteredWin32kAPIs : Pos 15, 1 Bit
          +0x000 DisableNonSystemFonts : Pos 16, 1 Bit
          +0x000 AuditNonSystemFontLoading : Pos 17, 1 Bit
          +0x000 PreferSystem32Images : Pos 18, 1 Bit
          +0x000 ProhibitRemoteImageMap : Pos 19, 1 Bit
          +0x000 AuditProhibitRemoteImageMap : Pos 20, 1 Bit
          +0x000 ProhibitLowILImageMap : Pos 21, 1 Bit
          +0x000 AuditProhibitLowILImageMap : Pos 22, 1 Bit
          +0x000 SignatureMitigationOptIn : Pos 23, 1 Bit
          +0x000 AuditBlockNonMicrosoftBinaries : Pos 24, 1 Bit
          +0x000 AuditBlockNonMicrosoftBinariesAllowStore : Pos 25, 1 Bit
          +0x000 LoaderIntegrityContinuityEnabled : Pos 26, 1 Bit
          +0x000 AuditLoaderIntegrityContinuity : Pos 27, 1 Bit
          +0x000 EnableModuleTamperingProtection : Pos 28, 1 Bit
          +0x000 EnableModuleTamperingProtectionNoInherit : Pos 29, 1 Bit
          +0x000 RestrictIndirectBranchPrediction : Pos 30, 1 Bit
          +0x000 IsolateSecurityDomain : Pos 31, 1 Bit
       +0x824 MitigationFlags2 : Uint4B
       +0x824 MitigationFlags2Values : 
          +0x000 EnableExportAddressFilter : Pos 0, 1 Bit
          +0x000 AuditExportAddressFilter : Pos 1, 1 Bit
          +0x000 EnableExportAddressFilterPlus : Pos 2, 1 Bit
          +0x000 AuditExportAddressFilterPlus : Pos 3, 1 Bit
          +0x000 EnableRopStackPivot : Pos 4, 1 Bit
          +0x000 AuditRopStackPivot : Pos 5, 1 Bit
          +0x000 EnableRopCallerCheck : Pos 6, 1 Bit
          +0x000 AuditRopCallerCheck : Pos 7, 1 Bit
          +0x000 EnableRopSimExec : Pos 8, 1 Bit
          +0x000 AuditRopSimExec  : Pos 9, 1 Bit
          +0x000 EnableImportAddressFilter : Pos 10, 1 Bit
          +0x000 AuditImportAddressFilter : Pos 11, 1 Bit
          +0x000 DisablePageCombine : Pos 12, 1 Bit
          +0x000 SpeculativeStoreBypassDisable : Pos 13, 1 Bit
          +0x000 CetShadowStacks  : Pos 14, 1 Bit
    lkd> dt nt!_ethread  CrossThreadFlags
       +0x6d0 CrossThreadFlags : Uint4B
转化成c语言的数据结构如下：
    typedef struct _EPROCESS {
    ...
    Union {
    UINT MitigationFlags；
       Union {
    UINT ControlFlowGuardEnabled:1;
    UINT ControlFlowGuardExportSuppressionEnabled:1;
    UINT ControlFlowGuardStrict:1;
    UINT DisallowStrippedImages:1;
    UINT ForceRelocateImages :1;
    UINT HighEntropyASLREnabled:1;
    UINT StackRandomizationDisabled:1;
    UINT ExtensionPointDisable:1;
    UINT DisableDynamicCode:1;
    UINT DisableDynamicCodeAllowOptOut:1;
    UINT DisableDynamicCodeAllowRemoteDowngrade:1;
    UINT AuditDisableDynamicCode:1;
    UINT DisallowWin32kSystemCalls:1;
    UINT AuditDisallowWin32kSystemCalls:1;
    UINT EnableFilteredWin32kAPIs:1;
    UINT AuditFilteredWin32kAPIs :1;
    UINT DisableNonSystemFonts :1;
                UINT AuditNonSystemFontLoading:1;
                UINT PreferSystem32Images:1;
                UINT ProhibitRemoteImageMap:1;
                UINT AuditProhibitRemoteImageMap:1;
                UINT ProhibitLowILImageMap:1;
                UINT AuditProhibitLowILImageMap:1;
                UINT SignatureMitigationOptIn:1;
                UINT AuditBlockNonMicrosoftBinaries:1;
                UINT AuditBlockNonMicrosoftBinariesAllowStore:1;
                UINT LoaderIntegrityContinuityEnabled:1;
                UINT AuditLoaderIntegrityContinuity:1;
                UINT EnableModuleTamperingProtection:1;
                UINT EnableModuleTamperingProtectionNoInherit:1;
                UINT RestrictIndirectBranchPrediction:1;
                UINT IsolateSecurityDomain:1;
    } MitigationFlagsValues;
    }
后面我们将继续分析windows其他的mitigation机制。
* * *