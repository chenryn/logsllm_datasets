User: 如何使用Python编写一个简单的TCP服务器，用于接收客户端的网络请求，并进行处理和响应？
Assistant: 以下是一个简单的TCP服务器示例，它可以接收客户端连接并向连接的客户端发送 "Hello, world!" 消息：

```python
import socket

# 创建 TCP 套接字
server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# 绑定到某个地址和端口
server_socket.bind(('0.0.0.0', 12345))

# 启用监听模式，指定等待连接的客户端数量
server_socket.listen(5)

while True:
    # 接受客户端连接
    client_socket, client_address = server_socket.accept()

    # 从客户端接收数据
    data = client_socket.recv(1024)

    # 处理收到的数据
    response = b"Hello, world!"

    # 发送响应数据给客户端
    client_socket.sendall(response)

    # 关闭连接
    client_socket.close()
```

在这个示例中，我们首先创建一个 TCP 套接字对象。然后，我们使用 `bind` 方法将其绑定到特定的地址和端口（在本例中是 12345 端口）。接下来，我们使用 `listen` 方法启用与该套接字关联的监听模式，并指定等待连接的客户端数量。在这个示例中，我们设置该值为 5，表示只有 5 个客户端可以同时连接服务器。

在无限循环中，我们使用 `accept` 方法等待客户端连接。一旦有客户端连接，我们使用 `recv` 方法从客户端接收数据，并使用 `sendall` 方法将一个字符串响应发送回客户端。最后，我们使用 `close` 方法关闭与客户端的连接。

请注意，该示例非常简化，并且只适用于一次性发送和接收数据的情况。在实际应用中，服务器通常需要更复杂的逻辑来处理来自多个客户端的并发请求。