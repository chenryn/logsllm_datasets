### Client Authentication for Confidential Clients
For confidential clients, the authentication process at the token endpoint follows the same procedure as in the Read-Only flow. This can be achieved using either JWS Client Assertions (refer to Section II-C) or Mutual TLS (refer to Section II-D).

### Overview of Assumptions and Mitigations
In this section, we outline the conditions under which the FAPI profiles and OAuth extensions aim to ensure security according to their specifications.

#### 1. Leak of Authorization Response
As described in Section II-B, particularly in the context of PKCE, there are several scenarios where the authorization response (Step 6 in Figure 1) and, consequently, the authorization code, can be exposed to an attacker, especially in the case of app clients. In our FAPI model, we assume that the authorization response is given to the attacker if the client is an app. At first glance, the use of PKCE mitigates the leakage of the authorization code because the attacker does not know the code verifier and thus cannot redeem the code at the Authorization Server (AS). However, our attack detailed in Section IV-C demonstrates that the protection provided by PKCE can be circumvented.

#### 2. Leak of Authorization Request
The Read-Only profile of the FAPI explicitly states that the PKCE challenge should be created by hashing the verifier. The use of hashing is intended to protect the PKCE challenge even if the authorization request leaks (e.g., through HTTP logs, as mentioned in Section II-B). Therefore, in our model, we assume that the authorization request (Step 2 in Figure 1) leaks to the attacker.

#### 3. Leak of Access Token
In the Read-Write profile, it is assumed that the access token might leak due to phishing (refer to [43, Section 8.3.5]). In our model, we assume that the access token might leak in Step 5 of Figure 1. This issue is seemingly mitigated by using either mTLS or OAUTB, which bind the access token to the legitimate client, ensuring that only the legitimate client can redeem the access token at the Resource Server (RS) even if the token has been leaked. The FAPI specification states: “When the FAPI client uses MTLS or OAUTB, the access token is bound to the TLS channel, making it resistant to phishing as the phished access tokens cannot be used.” [43, Section 8.3.5]. However, our attack presented in Section IV-A shows that this is not always the case.

#### 4. Misconfigured Token Endpoint
An explicit design decision by the FAPI working group was to make the Read-Write profile secure even if the token request (Step 7 in Figure 1) leaks. The FAPI specification describes this attack as follows: “In this attack, the client developer is socially engineered into believing that the token endpoint has changed to a URL controlled by the attacker. As a result, the client sends the code and the client secret to the attacker, who will then replay them.” [43, Section 8.3.2]. We make this assumption in our FAPI model. Seemingly, this problem is mitigated by code binding through client authentication or OAUTB, meaning the attacker cannot use the stolen code at the legitimate token endpoint. “When the FAPI client uses MTLS or OAUTB, the authorization code is bound to the TLS channel, making any phished client credentials and authorization codes submitted to the token endpoint unusable.” [43, Section 8.3.2]. Note that in the FAPI, the client does not authenticate using the client secret as a password but by proving possession (either using JWS Client Assertions or mTLS), which means the attacker cannot reuse the credentials. However, our attack presented in Section IV-B shows that this intuition is misleading.

### Attacks
As mentioned in the introduction, in Section V, we present a rigorous formal analysis of the FAPI based on the Web Infrastructure Model. Through this analysis, we not only identified attacks on the FAPI but also on some OAuth 2.0 extensions, showing that (1) these extensions do not achieve the security properties they were designed for and (2) combining these extensions securely is non-trivial. Along with the attacks, we propose fixes to the standards. Our formal analysis in Section V considers the fixed versions.

We start by describing two attacks on Token Binding, followed by an attack on PKCE, and one vulnerability hidden in the assumptions of PKCE. We emphasize that our attacks work even if all communication uses TLS and even if the attacker is merely a web attacker, i.e., does not control the network but only certain parties. As mentioned in the introduction, we notified the OpenID FAPI Working Group of the attacks found by our analysis and are working together with them to fix the standard.

#### A. Cuckoo’s Token Attack
As explained in Section III-C3, the Read-Write profile of the FAPI aims to provide security even if the attacker obtains an access token, e.g., due to phishing. Intuitively, this protection seems to be achieved by binding the access token to the client via mTLS (see Section II-D) or OAUTB (see Section II-E). However, these mechanisms prevent the attacker only from directly using the access token in the same flow. As illustrated next, in a second flow, the attacker can inject the bound access token and let the client (to which the token is bound) use this token, enabling the attacker to access resources belonging to an honest identity.

This attack affects all configurations of the Read-Write profile (see Figure 3). The Read-Only profile is also vulnerable to this attack; however, it is not designed to defend against stolen access tokens. We note that the underlying principle of the attack should be relevant to other use-cases of token binding, i.e., whenever a token is bound to a participant, the involuntary use of a leaked token (by the participant to which the token is bound) should be prevented.

**Attack Flow:**
1. **POST /start**: The attacker initiates the flow at the client.
2. **Response**: The client responds and redirects to the AS (client_id, redirect_uri, state).
3. **GET /redirect_uri**: The AS returns the authorization response (code, state, id token1).
4. **POST /token_endpoint**: The client sends the code and client_id to the token endpoint.
5. **Response**: The attacker AS returns the phished access token and id token2.
6. **GET /resource**: The client uses the phished access token to access the resource.
7. **Response**: The resource server provides the resource.

To prevent the use of leaked access tokens, the client should include, in the request to the RS, the identity of the AS from which the access token was received. The client can take this value from the second id token. Now, the RS would only continue the flow if its belief is consistent with the client's. We apply an analogous fix for flows with JARM. These fixes are included in our model and shown to work in Section V.

#### B. Access Token Injection with ID Token Replay
As described in Section III-C3, the Read-Write profile aims to be secure if an attacker acquires an access token for an honest user. The profile also aims to be secure even if the token endpoint URI is changed to an attacker-controlled URI (see Section III-C4). Interestingly, these two threat scenarios combined in this order form the basis for the following attack. In this attack, the attacker returns an access token at the misconfigured token endpoint. While the attack looks similar to the previous one, here the attacker first interacts with the honest AS and later replays an id token at the token endpoint. Both attacks require different fixes. The outcome, however, is the same, and, just as the previous attack, this attack affects all configurations of the Read-Write profile, even if JARM is used. We explain the attack using the Hybrid Flow.

**Attack Flow:**
1. **POST /start**: The attacker initiates the Read-Write flow at the client.
2. **Response**: The client responds and redirects to the AS (client_id, redirect_uri, state).
3. **GET /authorization_endpoint**: The AS returns the authorization response (code, state, id token).
4. **Attacker authenticates**: The attacker authenticates.
5. **Response**: The AS returns the authorization response (code, state, id token).
6. **GET /redirect_uri**: The client receives the authorization response.
7. **POST /token_endpoint**: The client sends the token request to the misconfigured token endpoint.
8. **Response**: The attacker returns the phished access token and the same id token.
9. **GET /resource**: The client uses the phished access token to access the resource.
10. **Response**: The resource server provides the resource.

To prevent this scenario, our security analysis (see Section V) shows that requiring the second id token to contain the hash of the access token returned to the client is effective, as the attacker cannot create id tokens with a valid signature of the AS. A similar fix also works for flows with JARM. The fixes are already included in our model.

#### C. PKCE Chosen Challenge Attack
As detailed in Section III-C1, the FAPI uses PKCE to protect against leaked authorization codes. This is particularly important for public clients, as these clients, unlike confidential ones, do not authenticate to an AS when exchanging the code for an access token.

Recall that the idea of PKCE is that a client creates a PKCE challenge (hash of a nonce), gives it to the AS, and when redeeming the authorization code at the AS, the client must present the correct PKCE verifier (the nonce). This approach is intended to work, but our attack detailed in Section IV-C demonstrates that it can be circumvented.