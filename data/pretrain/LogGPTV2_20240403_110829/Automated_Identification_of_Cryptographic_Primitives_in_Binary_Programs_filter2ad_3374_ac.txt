4.1.2
CBC encryption
07-10-08 VC static
VC static
5.6.0
CFB encryption
MinGW static CFB encryption
0.9.8g
VC static
5.6.0
CFB encryption
0.9.8g
MinGW static ECB encryption
VC static
5.6.0
encryption
MinGW static encryption
0.9.8g
VC dynamic
4.1.2
5.6.0
VC static
MinGW static
0.9.8g
5.6.0
VC static
1.0.0-beta3 VC dynamic PKCS1.5
OAEP SHA1
key), initialize the cryptographic library including the algorithm, perform the
operation (i.e., encryption or decryption), and then output the result to a ﬁle.
An overview of the cryptographic libraries’ versions, used compilers and mode
of operation is also given in Table 2. The compilers used were the Microsoft
C/C++ Compiler version 15.00.21022.08 and the MinGW port of GCC version
3.4.2. We used diﬀerent optimization levels when compiling the test applica-
tions to study the eﬀect of compiler settings. Furthermore, some cryptographic
libraries were linked statically, others dynamically, to test the Pintool’s handling
of dynamically loaded libraries.
4.2 Results
The performance of the analysis is rated by the successful identiﬁcation of the
cryptographic algorithm and parameters. Therefore, we analyze each trace of
a testing application and review which identiﬁcation method has identiﬁed the
correct cryptographic algorithm.
Previous Approaches. First, we evaluate existing identiﬁcation methods which
attempt to identify the cryptographic algorithm only and not the parameters,
and Table 3 shows the results. Note that we did not fully implement Lutz’s
identiﬁcation method due to the lack of a taint-tracking functionality, thus the
actual performance of this approach might be better in practice. False positives
are abbreviated as FP and basic blocks as BBL. The results of the tools were
compared with the source code and control ﬂow graphs of the testing application
in order to rate the performance of the methods.
The method of Caballero et al. [2] has a good success rate despite its simplic-
ity. It always identiﬁes the cryptographic basic blocks of the cipher and the hash
implementations. It also identiﬁes the key scheduling basic blocks and we rate
54
F. Gr¨obert, C. Willems, and T. Holz
Table 3. Analysis results for heuristics published in previous work
Implementation Algorithm Caballero et al. Lutz
Wang et al.
Beecrypt AES
Brian Gladman AES
Cryptopp AES
OpenSSL AES
Cryptopp DES
OpenSSL DES
Cryptopp RC4
OpenSSL RC4
Beecrypt MD5
Cryptopp MD5
OpenSSL MD5
Cryptopp RSA
OpenSSL RSA
found BBL no result
success
only FP
no result
success
found BBL error
partial
found BBL success OPENSSL cleanse
success
found BBL error
success
key schedule success DES ecb encrypt
success
only FP
partial
no results
success
found BBL success md5Process
success
found BBL error
success
partial
success
success & FP
only FP
no success & FP only FP
success MD5 Final
error
no result
error
no result
this as a successful identiﬁcation, because key scheduling is a core part of cryp-
tographic algorithms. However, for two Cryptopp applications, the method only
partially identiﬁes the set of basic blocks: it misses parts of the key scheduling
and the encryption phase. In case of the Cryptopp RSA testing application, the
method successfully identiﬁes the asymmetric encryption, but also lists several
false-positive basic blocks. For the OpenSSL RSA implementations, the method
only identiﬁes false-positive basic blocks.
The method of Lutz [12] cannot be completely evaluated, because we did
not implement the taint-tracking needed for it. However, we can note, that us-
ing data comparison without taint-tracking, the method is still able to identify
cryptographic code. For the AES and DES testing applications, it identiﬁes en-
cryption basic blocks or key schedule blocks, due to entropy changes in the data.
Also for the MD5 applications, it identiﬁes the core MD5 functions. Although,
with each successful identiﬁcation, there is also a high rate of false-positives. For
testing applications with few loops (e.g., OpenSSL RC4) the method shows no
results, because the loop bodies or number of loop iterations are to small. The
identiﬁcation of plaintext or ciphertext is not successful in all tests.
The cumulative bitwise percentage method by Wang et al. [20] shows a good
success rate for the testing applications with debug symbols. The method is
based on the identiﬁcation of functions by their debug symbols, therefore it yields
false-positive or no results for the testing applications without debug symbols
(the Cryptopp applications and Gladman’s AES implementation do not contain
debug symbols). Nevertheless, for the Beecrypt and OpenSSL applications the
success rate is 57%.
Improved Heuristics. Next, we evaluate our methods and the results of the
evaluation are shown in Table 4. The performance of the chains method is
Automated Identiﬁcation of Cryptographic Primitives in Binary Programs
55
beecrypt beecrypt cryptopp cryptopp cryptopp cryptopp cryptopp gladman openssl openssl openssl openssl openssl
aes
md5
aes
des
md5
rc4
rsa
aes
aes
des
md5
rc4
rsa
rc4 unique
des unique
rsa unique
md5 unique
rc4 intersect
aes intersect
des intersect
rsa intersect
md5 intersect
rc4 cryptopp
rc4 openssl
aes beecrypt
aes gladman
aes cryptopp
aes openssl
des cryptopp
des openssl
rsa cryptopp
rsa openssl
md5 beecrypt
md5 cryptopp
md5 openssl
0(cid:1)%
44(cid:1)%
44(cid:1)% 100(cid:1)%
61(cid:1)%
58(cid:1)%
50(cid:1)%
29(cid:1)% 100(cid:1)%
6(cid:1)%
0(cid:1)% 100(cid:1)% 100(cid:1)% 100(cid:1)% 100(cid:1)% 100(cid:1)%
0(cid:1)%
0(cid:1)%
0(cid:1)% 100(cid:1)%
0(cid:1)% 50(cid:1)%
44(cid:1)%
44(cid:1)%
0(cid:1)%
0(cid:1)%
0(cid:1)%
0(cid:1)%
22(cid:1)% 33(cid:1)% 100(cid:1)% 11(cid:1)%
46(cid:1)%
89(cid:1)%
22(cid:1)%
8(cid:1)%
1(cid:1)% 89(cid:1)%
1(cid:1)%
34(cid:1)% 18(cid:1)%
7(cid:1)%
6(cid:1)%
12(cid:1)%
0(cid:1)% 100(cid:1)%
0(cid:1)%
0(cid:1)%
0(cid:1)%
0(cid:1)%
0(cid:1)% 100(cid:1)%
68(cid:1)% 100(cid:1)% 100(cid:1)% 100(cid:1)% 100(cid:1)%
68(cid:1)%
95(cid:1)%
64(cid:1)% 77(cid:1)% 77(cid:1)% 68(cid:1)% 100(cid:1)% 68(cid:1)%
82(cid:1)%
82(cid:1)%
82(cid:1)% 100(cid:1)% 100(cid:1)%
94(cid:1)% 100(cid:1)% 100(cid:1)% 88(cid:1)% 88(cid:1)% 71(cid:1)% 88(cid:1)%
100(cid:1)%
51(cid:1)% 74(cid:1)% 100(cid:1)% 64(cid:1)% 46(cid:1)% 64(cid:1)%
82(cid:1)%
77(cid:1)%
77(cid:1)%
87(cid:1)% 100(cid:1)%
51(cid:1)%
56(cid:1)%
71(cid:1)%
71(cid:1)%
34(cid:1)%
63(cid:1)%
28(cid:1)%
41(cid:1)% 35(cid:1)% 24(cid:1)% 29(cid:1)% 16(cid:1)% 92(cid:1)%
93(cid:1)%
57(cid:1)%
26(cid:1)% 45(cid:1)% 43(cid:1)% 100(cid:1)% 38(cid:1)% 52(cid:1)%
62(cid:1)%
67(cid:1)% 100(cid:1)%
60(cid:1)%
40(cid:1)% 100(cid:1)%
52(cid:1)%
16(cid:1)% 17(cid:1)% 16(cid:1)% 15(cid:1)% 11(cid:1)% 31(cid:1)%
57(cid:1)%
82(cid:1)% 100(cid:1)%
82(cid:1)%
83(cid:1)%
14(cid:1)%
13(cid:1)%
65(cid:1)%
55(cid:1)%
58(cid:1)%
63(cid:1)%
68(cid:1)%
58(cid:1)%
60(cid:1)%
38(cid:1)% 55(cid:1)% 53(cid:1)% 50(cid:1)% 100(cid:1)% 45(cid:1)%
33(cid:1)%
35(cid:1)%
34(cid:1)%
27(cid:1)%
27(cid:1)%
58(cid:1)%
62(cid:1)% 41(cid:1)% 29(cid:1)% 27(cid:1)% 26(cid:1)% 40(cid:1)%
100(cid:1)%
45(cid:1)% 100(cid:1)% 21(cid:1)% 17(cid:1)% 13(cid:1)% 11(cid:1)% 32(cid:1)%
22(cid:1)%
23(cid:1)%
28(cid:1)%
12(cid:1)%
41(cid:1)%
27(cid:1)%
15(cid:1)% 16(cid:1)% 14(cid:1)% 14(cid:1)% 10(cid:1)% 29(cid:1)%
59(cid:1)%
62(cid:1)%
64(cid:1)%
73(cid:1)%
13(cid:1)% 100(cid:1)%
12(cid:1)%
40(cid:1)% 100(cid:1)% 45(cid:1)% 37(cid:1)% 30(cid:1)% 52(cid:1)%
62(cid:1)%
47(cid:1)%
47(cid:1)%
56(cid:1)%
34(cid:1)%
52(cid:1)%
55(cid:1)%
15(cid:1)% 15(cid:1)% 15(cid:1)% 15(cid:1)% 10(cid:1)% 29(cid:1)%
53(cid:1)%
62(cid:1)%
65(cid:1)%
74(cid:1)% 100(cid:1)%
14(cid:1)%
12(cid:1)%
22(cid:1)% 32(cid:1)% 100(cid:1)% 29(cid:1)% 20(cid:1)% 27(cid:1)%
36(cid:1)%
30(cid:1)%
29(cid:1)%
38(cid:1)%
36(cid:1)%
22(cid:1)%
26(cid:1)%
14(cid:1)% 11(cid:1)%
72(cid:1)%
36(cid:1)%
39(cid:1)%
43(cid:1)%
48(cid:1)%
12(cid:1)%
9(cid:1)%
6(cid:1)% 23(cid:1)%
28(cid:1)% 23(cid:1)% 17(cid:1)% 20(cid:1)% 11(cid:1)% 91(cid:1)%
22(cid:1)%
19(cid:1)%
47(cid:1)%
47(cid:1)%
42(cid:1)%
38(cid:1)%
62(cid:1)%
26(cid:1)% 38(cid:1)% 35(cid:1)% 73(cid:1)% 35(cid:1)% 47(cid:1)%
58(cid:1)%
41(cid:1)%
56(cid:1)%
50(cid:1)%
45(cid:1)% 100(cid:1)%
74(cid:1)%
14(cid:1)% 15(cid:1)% 13(cid:1)% 23(cid:1)% 10(cid:1)% 30(cid:1)%
57(cid:1)%