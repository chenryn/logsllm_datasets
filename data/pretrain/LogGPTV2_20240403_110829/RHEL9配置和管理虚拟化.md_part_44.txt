  virt_use_execmem             启用受限制的虚拟客户机使用可执行内存和可执行堆栈。
  virt_use_fusefs              启用 virt 读取 FUSE 挂载的文件。
  virt_use_nfs                 启用 virt 管理 NFS 挂载的文件。
  virt_use_rawip               启用 virt 与 rawip 套接字交互。
  virt_use_samba               启用 virt 管理 CIFS 挂载的文件。
  virt_use_sanlock             启用受限制的虚拟客户机与 sanlock 交互。
  virt_use_usb                 启用 virt 使用 USB 设备。
  virt_use_xserver             启用虚拟机与 X 窗口系统交互。
:::
:::
:::
::: section
::: titlepage
# []{#securing-virtual-machines-in-rhel_configuring-and-managing-virtualization.html#setting-up-secure-execution-on-ibm-z_securing-virtual-machines-in-rhel}在 IBM Z 中设置 IBM Secure Execution {.title}
:::
当使用 IBM Z 硬件运行 RHEL 9 主机时，您可以通过为虚拟机配置 IBM Secure
Execution 来提高虚拟机(VM)的安全性。
IBM Secure Execution（也称 Protected
Virtualization）可防止主机系统访问虚拟机的状态和内存内容。因此，即使主机被攻击，也无法用作攻击客户端操作系统的向量。另外，安全执行也可以用来防止不可信主机从虚拟机获取敏感信息。
以下流程描述了如何将 IBM Z 主机上的现有虚拟机转换为安全虚拟机。
::: itemizedlist
**先决条件**
-   系统硬件是以下之一：
    ::: itemizedlist
    -   IBM z15 或更高版本
    -   IBM LinuxONE III 或更高版本
    :::
-   为您的系统启用安全执行功能。要验证，请使用：
    ``` literallayout
    # grep facilities /proc/cpuinfo | grep 158
    ```
    如果这个命令显示任何输出，代表您的 CPU 与安全执行兼容。
-   内核包含对安全执行的支持。要确认，请使用：
    ``` literallayout
    # ls /sys/firmware | grep uv
    ```
    如果该命令生成任何输出，内核支持安全执行。
-   主机 CPU 模型包含 `解压缩`{.literal} 功能。要确认，请使用：
    ``` literallayout
    # virsh domcapabilities | grep unpack
    ```
    如果命令生成以上输出，您的 CPU 主机模型与安全执行兼容。
:::
::: itemizedlist
-   虚拟机的 CPU 模式设置为
    `host-model`{.literal}。要确认这一点，请使用以下内容并将
    `vm-name`{.literal} 替换为您的虚拟机的名称。
    ``` literallayout
    # virsh dumpxml vm-name | grep ""
    ```
    如果命令生成任何输出，则会正确设置虚拟机的 CPU 模式。
-   主机上必须安装 [*genprotimg*]{.emphasis} 软件包。
    ``` literallayout
    # dnf install genprotimg
    ```
-   您已获取并验证了 IBM Z 主机密钥文档。有关这样做的步骤，请参阅 IBM
    文档中的
    [验证主机密钥文档](https://www.ibm.com/support/knowledgecenter/linuxonibm/com.ibm.linux.z.lxse/lxse_t_verify.html#lxse_verify){.link}。
:::
::: title
**流程**
:::
[**在主机 中**]{.strong} 执行以下步骤：
::: orderedlist
1.  将 `prot_virt=1`{.literal} 内核参数添加到主机的
    [引导配置](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/managing_monitoring_and_updating_the_kernel/configuring-kernel-command-line-parameters_managing-monitoring-and-updating-the-kernel#changing-kernel-command-line-parameters-for-all-boot-entries_setting-kernel-command-line-parameters){.link}。
    ``` literallayout
    # grubby --update-kernel=ALL --args="prot_virt=1"
    ```
2.  启用 virtio
    设备，以便在您要保护的虚拟机中使用共享缓冲区。要做到这一点，使用
    `virsh edit`{.literal} 修改虚拟机的 XML 配置，并将
    `iommu='on'`{.literal} 添加到所有设备的 `
    行中。例如：
    ``` programlisting
    ```
    如果设备配置不包含任何 \ 行，请添加 \
    ```
:::
在您要保护 [**的虚拟机的客户机操作系统中**]{.strong} 执行以下步骤。
::: orderedlist
1.  创建参数文件。例如：
    ``` literallayout
    # touch ~/secure-parameters
    ```
2.  在 `/boot/loader/entries`{.literal}
    目录中，使用最新版本识别引导装载程序条目：
    ``` literallayout
    # ls /boot/loader/entries -l
    [...]
    -rw-r--r--. 1 root root  281 Oct  9 15:51 3ab27a195c2849429927b00679db15c1-4.18.0-240.el8.s390x.conf
    ```
3.  检索引导装载程序条目的内核选项行：
    ``` literallayout
    # cat /boot/loader/entries/3ab27a195c2849429927b00679db15c1-4.18.0-240.el8.s390x.conf | grep options
    options root=/dev/mapper/rhel-root
    rd.lvm.lv=rhel/root rd.lvm.lv=rhel/swap
    ```
4.  将选项行和 `swiotlb=262144`{.literal} 的内容添加到创建的参数文件。
    ``` literallayout
    # echo "root=/dev/mapper/rhel-root rd.lvm.lv=rhel/root rd.lvm.lv=rhel/swap swiotlb=262144" > ~/secure-parameters
    ```
5.  生成 IBM 安全执行镜像。
    例如，以下命令使用 ` secure-parameters`{.literal} 文件、/
    `boot`{.literal} /initramfs-4.18.0-240.el8.s390x``{=html}
    镜像创建 `/boot/initramfs-4.18.0-240.el8.img`{.literal} 初始 RAM
    磁盘镜像，以及 `HKD-8651-000201C048.crt`{.literal} 主机键文档。
    ``` literallayout
    # genprotimg -i /boot/vmlinuz-4.18.0-240.el8.s390x -r /boot/initramfs-4.18.0-240.el8.s390x.img -p ~/secure-parameters -k HKD-8651-00020089A8.crt -o /boot/secure-image
    ```
    使用 `genprotimg`{.literal}
    实用程序创建安全镜像，其中包含内核参数、初始 RAM 磁盘和引导镜像。
6.  更新虚拟机的引导菜单，以从安全镜像引导。此外，删除以
    `initrd`{.literal} 和 `选项`{.literal} 开头的行，因为它们不需要。
    例如，在 RHEL 8.3 虚拟机中，可以在 `/boot/loader/entries/`{.literal}
    目录中编辑引导菜单：
    ``` literallayout
    # cat /boot/loader/entries/3ab27a195c2849429927b00679db15c1-4.18.0-240.el8.s390x.conf
    title Red Hat Enterprise Linux 8.3
    version 4.18.0-240.el8.s390x
    linux /boot/secure-image
    [...]
    ```
7.  创建可引导磁盘镜像
    ``` literallayout
    # zipl -V
    ```
8.  安全地删除原始的未保护的文件。例如：
    ``` literallayout
    # shred /boot/vmlinuz-4.18.0-240.el8.s390x
    # shred /boot/initramfs-4.18.0-240.el8.s390x.img
    # shred secure-parameters
    ```
    原始引导镜像、初始 RAM
    镜像和内核参数文件不受保护，如果未移除，启用了安全执行的虚拟机仍然容易受到攻击，导致尝试或敏感数据最小。
:::
::: itemizedlist
**验证**
-   在主机上，使用 `virsh dumpxml`{.literal} 程序确认安全虚拟机的 XML
    配置。配置必须包含 \ 和 &`{.literal} lt;
    `memballoon model='none'/&gt`{.literal}; 元素。
    ``` literallayout
    # virsh dumpxml vm-name
    [...]
    ```
:::
::: itemizedlist
**其它资源**
-   [配置内核命令行参数](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/managing_monitoring_and_updating_the_kernel/configuring-kernel-command-line-parameters_managing-monitoring-and-updating-the-kernel){.link}
-   [`genprotimg`{.literal}上的 IBM
    文档](https://www.ibm.com/support/knowledgecenter/linuxonibm/com.ibm.linux.z.lxse/lxse_r_cmd.html#cmd_genprotimg){.link}
:::
:::
::: section
::: titlepage
# []{#securing-virtual-machines-in-rhel_configuring-and-managing-virtualization.html#attaching-cryptographic-coprocessors-to-virtual-machines-on-ibm-z_securing-virtual-machines-in-rhel}将加密 coprocessors 附加到 IBM Z 上的虚拟机 {.title}
:::
要在 IBM Z 主机上的虚拟机中使用硬件加密，请从加密的 coprocessor
设备创建介质设备并将其分配给预期的虚拟机。具体步骤请查看以下说明。
::: itemizedlist
**先决条件**
-   您的主机运行在 IBM Z 硬件上。
-   加密 coprocessor 与设备分配兼容。要确认这一点，请确保您的
    coprocessor `的类型`{.literal} 列为 `CEX4`{.literal} 或更高版本。
    ``` literallayout
    # lszcrypt -V
    CARD.DOMAIN TYPE  MODE        STATUS  REQUESTS  PENDING HWTYPE QDEPTH FUNCTIONS  DRIVER
    --------------------------------------------------------------------------------------------
    05         CEX5C CCA-Coproc  online         1        0     11     08 S--D--N--  cex4card
    05.0004    CEX5C CCA-Coproc  online         1        0     11     08 S--D--N--  cex4queue
    05.00ab    CEX5C CCA-Coproc  online         1        0     11     08 S--D--N--  cex4queue
    ```
-   已安装 [*mdevctl*]{.emphasis} 软件包。
-   载入 `vfio_ap`{.literal} 内核模块。要验证，请使用：
    ``` literallayout
    # lsmod | grep vfio_ap
    vfio_ap         24576  0
    [...]
    ```
    要载入模块，请使用：
    ``` literallayout
    # modprobe vfio_ap
    ```
:::
::: orderedlist
**流程**
1.  在主机上，将加密设备重新分配给 `vfio-ap`{.literal}
    驱动程序。以下示例将两个带有位掩码 ID
    `（0x05、0x0004）和 （0x`{.literal} 05、0x00ab）``{=html}
    分配给 `vfio-ap`{.literal} 的加密设备。
    ``` literallayout
    #  echo -0x05 > /sys/bus/ap/apmask
    #  echo -0x0004, -0x00ab > /sys/bus/ap/aqmask
    ```
    有关识别位掩码 ID 值的信息，请参阅 IBM 的 KVM Virtual Server
    Management 文档中的
    [为加密适配器资源准备直通设备](http://public.dhe.ibm.com/software/dw/linux390/docu/l19bva05.pdf){.link}。
2.  验证是否正确分配了加密设备。
    ``` literallayout
    # lszcrypt -V
    CARD.DOMAIN TYPE  MODE        STATUS  REQUESTS  PENDING HWTYPE QDEPTH FUNCTIONS  DRIVER
    --------------------------------------------------------------------------------------------
    05          CEX5C CCA-Coproc  -              1        0     11     08 S--D--N--  cex4card
    05.0004     CEX5C CCA-Coproc  -              1        0     11     08 S--D--N--  vfio_ap
    05.00ab     CEX5C CCA-Coproc  -              1        0     11     08 S--D--N--  vfio_ap
    ```
    如果域队列的 DRIVER 值变为 `vfio_ap`{.literal}，则重新分配成功。
3.  生成设备 UUID。
    ``` literallayout
    # uuidgen
    669d9b23-fe1b-4ecb-be08-a2fabca99b71
    ```
    在以下步骤中，将 `669d9b23-fe1b-4ecb-be08-a2fabca99b71`{.literal}
    替换为您的生成的 UUID。
4.  使用 UUID，新建 `vfio_ap`{.literal} 设备。
    以下示例演示了创建永久介质设备并为它分配队列。例如，以下命令将域适配器
    `0x05`{.literal} 和域队列 `0x0004`{.literal} 和 `0x00ab`{.literal}
    分配给设备 `669d9b23-fe1b-4ecb-be08-a2fabca99b71`{.literal}。
    ``` literallayout
    # mdevctl define --uuid 669d9b23-fe1b-4ecb-be08-a2fabca99b71 --parent matrix --type vfio_ap-passthrough
    # mdevctl modify --uuid 669d9b23-fe1b-4ecb-be08-a2fabca99b71 --addattr=assign_adapter --value=0x05