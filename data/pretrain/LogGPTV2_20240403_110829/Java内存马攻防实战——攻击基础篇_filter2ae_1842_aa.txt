# Java内存马攻防实战——攻击基础篇
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
在红蓝对抗中，攻击方广泛应用webshell等技术在防守方提供的服务中植入后门，防守方也发展出各种技术来应对攻击，传统的落地型webshell很容易被攻击方检测和绞杀。而内存马技术则是通过在运行的服务中直接插入运行攻击者的webshell逻辑，利用中间件的进程执行某些恶意代码，而不依赖实体文件的存在实现的服务后门，因此具有更好的隐蔽性，也更容易躲避传统安全监测设备的检测。
本文以Java语言为基础讨论内存马技术的攻防，分为两个篇章，分别是攻击基础篇和防护应用篇。本篇攻击基础篇介绍了Java
Servlet技术前置知识，并重点讨论了Java内存马的注入点和注入方式。下一篇文章将会针对这些注入方式的拦截防御手段展开讨论，进一步探索Java内存马的攻防实战。
## JAVA Servlet技术前置知识
###  Servlet/Filter/Listener JAVA WEB三大件
**1\. Servlet**
Servlet 是服务端的 Java 应用程序，用于处理HTTP请求，做出相应的响应。
**2\. Filter**
Filter 是介于 Web 容器和 Servlet 之间的过滤器，用于过滤未到达 Servlet 的请求或者由 Servlet
生成但还未返回响应。客户端请求从 Web 容器到达 Servlet 之前，会先经过 Filter，由 Filter 对 request
的某些信息进行处理之后交给 Servlet。同样，响应从 Servlet 传回 Web 容器之前，也会被 Filter 拦截，由 Filter 对
response 进行处理之后再交给 Web 容器。
**3\. Listener**
Listener
是用于监听某些特定动作的监听器。当特定动作发生时，监听该动作的监听器就会自动调用对应的方法。下面是一个HttpSession的Listener示意图。
该 Listener 监听 session 的两种状态，即创建和销毁。当 session 被创建时，会自动调用 HttpSessionListener 的
sessionCreated() 方法，我们可以在该方法中添加一些处理逻辑。当 session 被销毁时，则会调用 sessionDestroyed()
方法。
当我们在请求一个实现servlet-api规范的java web应用时，程序先自动执行 listener 监听器的内容，再去执行 filter
过滤器，如果存在多个过滤器则会组成过滤链，最后一个过滤器将会去执行 Servlet 的 service 方法，即 Listener -> Filter ->
Servlet。
## 内存马的攻击面
webshell实际上也是一种web服务，那么从创建web服务的角度考虑，自顶向下，有下面几种手段和思路：
  1. 动态注册/字节码替换 interceptor/controller（使用框架如 spring/struts2/jfinal）
  2. 动态注册/字节码替换 使用责任链设计模式的中间件、框架的实现（例如 Tomcat 的 Pipeline & Valve，Grizzly 的 FilterChain & Filter 等等）
  3. 动态注册/字节码替换 servlet-api 的具体实现 servlet/filter/listener
  4. 动态注册/字节码替换一些定时任务的具体实现 比如 TimeTask等
另外，换一个角度来说，webshell作为一个后门，实际上我们需要他完成的工作是能接收到恶意输入，执行恶意输入并回显。那么我们可以考虑启动一个进程或线程，无限循环等待恶意输入并执行代码来作为一个后门。
## 环境准备
我们首先从Tomcat这一使用广泛的中间件开始说起，在其他中间件如weblogic中对servlet-api规范的实现略有不同，但其思想是一致的。
实验环境如下  
`jdk 8u102  
springboot 2.5.5 (Tomcat embedded)  
fastjson 1.2.47`
下面我们构造一个简单的JAVA 任意代码注入点
通过fastjson 1.2.47 rmi反序列化的方式进行注入，因为重点是注入内存马所以选择了jdk 1.8u102<121的版本进行实验。
fastjson使用的exp为：
这里通过marshalsec启动rmi服务器，并通过python SimpleHTTPSever来提供恶意类字节码下载服务：
通过该漏洞我们能实现任意java代码执行：
比如利用jndi注入这个类会弹出计算器。
至此我们获得了tomcat环境下的java代码任意执行。
## 动态注入Servlet
###  注入过程
通常情况下，Servlet/Filter/Listener配置在配置文件（web.xml）和注解中，在其他代码中如果想要完成注册，主要有以下几种思路：
  1. 调用Servlet Api 的相关接口（一般只能在应用初始化时调用）
  2. 使用中间件提供的相关接口
下面复现的是第二种方式，对于tomcat获取StandardContext来在web应用运行时注入servlet：
可以看到我们的基本流程如下：  
1.获取 ServletContext  
2.获取 Tomcat 对应的 StandardContext  
3.构建新 servlet warpper  
4.将构建好的 warpper 添加到 standardContext 中，并加入 servletMappings
在后续的fliter型内存马和listener型内存马中我们会发现其注入过程也是类似的。
###  几个疑问
**1\. Wrapper是什么？**
在这次复现的环境中，我们使用的中间件是Tomcat。
Tomcat 是 Web 应用服务器，是一个 Servlet/JSP 容器，Tomcat 作为 Servlet 的容器，能够将用户的请求发送给
Servlet，并且将 Servlet 的响应返回给用户，Tomcat中有四种类型的Servlet容器，从上到下分别是
Engine、Host、Context、Wrapper
• Engine，实现类为 org.apache.catalina.core.StandardEngine  
• Host，实现类为 org.apache.catalina.core.StandardHost  
• Context，实现类为 org.apache.catalina.core.StandardContext  
• Wrapper，实现类为 org.apache.catalina.core.StandardWrapper
每个Wrapper实例表示一个具体的Servlet定义，StandardWrapper是Wrapper接口的标准实现类（StandardWrapper
的主要任务就是载入Servlet类并且进行实例化）。  
其结构如下图：
可以看到，如果我们想要添加一个Servlet，需要创建一个Warpper包裹他来挂载到Context(StandardContext中)。
**2\. 在复现过程中，我们看到了很多Context，这些Context分别对应什么呢？**
是 WebApplicationContext，ServletContext与StandardContext。
WebApplicationContext: 其实这个接口其实是SpringFramework
ApplicationContext接口的一个子接口，对应着我们的web应用。它在ApplicationContext的基础上，添加了对ServletContext的引用，即getServletContext方法。因此在注入内存马的过程中，我们可以利用他来拿到ServletContext。
ServeltContext: 这个就是我们之前说的servlet-api给的规范servlet用来与容器间进行交互的接口的组合，这个接口定义了一系列的方法来描述上下文（Cotext），servlet通过这些方法可以很方便地与自己所在的容器进行一些交互，比如通过getMajorVersion与getMinorVersion来获取容器的版本信息等。
StandardContext:
这个是tomcat中间件对servlet规范中servletContext的实现，在之前的tomcat架构图中可以看到他的作用位置，用来管理Wrapper。
如果我们将  
`standardContext.addServletMappingDecoded("/bad",servletName);`  
改为  
`servletContext.addServlet("/bad",servletName);`  
会得到如下报错  
`java.lang.IllegalStateException: Servlets cannot be added to context [] as