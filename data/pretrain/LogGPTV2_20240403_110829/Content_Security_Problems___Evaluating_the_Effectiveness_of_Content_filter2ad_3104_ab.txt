2.2  SCHEME 
The scheme indicates a particular protocol or type of data that will be transmitted. Examples 
of schemes are http: or javascript:. If the scheme is added to a directive, only that type of 
protocol or data will be allowed to be processed for the resource. An example of using the 
scheme to force the use of HTTPS for all resources in a web application is: 
Content-Security-Policy: default-src https:; 
One pitfall to be aware of is that if the default-src has a defined scheme and then another resource specific 
directive is defined afterwards, it must also specify all schemes it applies to, including those already defined 
in default-src. An example of this is: 
Content-Security-Policy: default-src https:; script-src https://partner-site.com 
A mistake would be to only put partner-site.com for the script-src directive assuming that the default-src 
will permit only HTTPS traffic. Any resource specific directive overwrites the  default-src directive for that 
particular resource. 
2.3  KEYWORDS 
2.3.1      SELF  
When  specifying  a  directive  there  are  a  few  keywords  that  can  be  used  to  simplify  definitions.  The  self 
keyword aliases the origin of the application. To match self, the resource specified must be loaded from the 
same  host,  with  the  same  protocol  using  the  same  port.  For  example,  the  application  is  hosted  on 
https://csp.com with a Content Security Policy of: 
Content-Security-Policy: default-src ‘self’; 
HTTPS://WWW.ISECPARTNERS.COM 
5/13 
This table will show whether a resource can be loaded from the specified domain according to this  Content-
Security-Policy header. 
URL 
Outcome 
Reason 
https://csp.com/test.js 
https://csp.com/dir/test.js 
http://csp.com/test.js 
https://test.csp.com/test.js 
https://www.csp.com/dir/test.js 
https://csp.com:8443/test.js 
2.3.2  NONE 
Success 
Success 
Failure 
Failure 
Failure 
Failure 
Table 2 Same Origin 
Same protocol and host 
Same protocol and host 
Different protocol 
Different host 
Different host 
Different port 
The none keyword defines no sources are allowed in the application. This keyword can be an effective way to 
begin a default-src directive in a Content-Security-Policy header. It sets a restrictive policy that disallows 
all resources by default, making permitted resources explicit. Example: 
Content-Security-Policy: default-src ‘none’ 
This header prevents any resources from being loaded. 
2.4  BROWSER SUPPORT 
Since CSP is still in a draft mode, there is no standardized HTTP header name yet and implementation varies 
between  web  browsers.  The  following  table  summarizes  CSP  support  offered  by  the  most  popular  web 
browsers at time of writing  
Browser 
Header Name 
Fully 
since version 
supported 
Features supported 
Content-Security-
Policy 
23.0 
Content-Security-
Policy 
25.0 
All 
All 
Firefox 
Chrome 
IE 
Safari 
Opera 
X-Content-
Security-Policy 
X-Webkit-CSP 
Content-Security-
Policy 
Not fully supported  sandbox  directive 
6.0 
15.0 
N/A 
6.0 
N/A 
only 
All 
All 
None 
All 
None 
Android Browser 
Not Supported 
iOS Safari 
X-Webkit-CSP 
Blackberry Browser  Not Supported 
HTTPS://WWW.ISECPARTNERS.COM 
6/13 
Table 3 Browser Support 
For  readability  purposes,  the  examples  provided  document  only  set  the  Content-Security-Policy  header. 
When  implementing  CSP  in  web  applications  the  recommendation  is  to  currently  use  only  the  standard 
header.  Using  the  prefixed  header  can  be  useful  if  the  application  is  specifically  targeting  the  sandbox 
directive  in  IE.  Behavior with  the  prefixed  header could  be  unintended  because of  its different syntax and 
different behavior in Firefox.  
3  IMPLEMENTING CONTENT SECURITY POLICY 
Implementing Content  Security  Policy should  be done in steps. The first step towards full implementation 
will be to find out exactly what resources the current web application is loading. The most convenient way to 
do  this  will  be  to  deploy  CSP  in  the  report  only  mode,  using  the  Content-Security-Policy-Report-Only 
header. 
3.1.1   CONTENT-SECURITY-POLICY-REPORT-ONLY 
Content  Security  Policy  comes  with  a  handy  HTTP  header  called  Content-Security-Policy-Report-Only. 
This header can be defined in exactly the same way as a standard Content-Security-Policy header but will 
only report the violations, without preventing their execution. Using the Report-Only header will not affect 
the behavior of the application in any way. This allows for a consequence free way of finding out how the web 
application will fare under various Content Security Policy configurations. In order to find out exactly what 
types  of  resources  the  web  application  is  currently  accessing,  try  creating  a  Content-Security-Policy-
Report-Only header as: 
Content-Security-Policy-Report-Only: default-src ‘none’; report-uri /violation_parser; 
This will send a violation report to “/violation_parser” for any resources the web application loads, but will 
not prevent those resources from loading. This particular policy will generate a report for EVERY resource the 
application loads, so it will create a very large amount of data.  
In order to use this data, create a simple database that  has a hook for the parser URI and collects all of the 
violations for a prescribed amount of time. Use the database to collate these reports and figure out exactly 
what resources the web application uses. Once the data has been collected decide for each resource that was 
accessed whether or not it should be allowed to  be accessed.  For instances, find all the scripts  legitimately 
loaded by the application and add their location to the list of permitted script locations, using the  script-
src. If it is evident that only scripts from a certain subdomain are being loaded, then the script-src directive 
should  list only  that subdomain as a valid  location.  Each  resource  that  is  to  be  permitted  needs  to  have a 
corresponding directive in the Content Security Policy.  
Once all of the data has been combed through and directives written, update the Content-Security-Policy-
Report-Only header with all of the new directives. Using a similar database system, do another round of data 
gathering  using  the  new  header  and  verify  that  any  violations  coming  through  are  expected.  Repeat  this 
process as many times as is necessary to feel confident about the Content Security Policy implementation not 
breaking the application’s usability when converted to an enforceable header. 
3.1.2    PLAYING THE INLINE SCRIPT GAME 
Content  Security  Policy depends on  having specific  URI’s  for  valid  resource  locations.  This allows  the web 
application to control the resources that are  loaded and prevent malicious content injection.  Due to inline 
HTTPS://WWW.ISECPARTNERS.COM 
7/13 
scripts  not  having an external URI, there is no way for Content  Security Policy to ensure their validity and 
they  should  not  be  used.  All style attributes and  tags  must also  be externalized  to  allow  Content  Security 
Policy to control their usage, as they can be a target of content injection as well. Removing all inline scripts 
and style is, in general, non-trivial.  
Assume a Content-Security-Policy header of:  
Content-Security-Policy: script-src ‘self’ 
This would prevent the use of inline scripts and only allow script resource to load from the origin, csp.com. 
On the index page of csp.com is a small inline script: 
index.html 
This script would be flagged as a violation and will not be permitted. In order to maintain functionality this 
script can be externalized. Create a Javascript file called alert.js with the contents of the  tag inside a 
function 
function welcome() 
{ 
     alert(“Welcome to CSP!”); 
} 
and  place  the  file  within  the  origin,  csp.com/alert.js.  On  the  index  page  of  csp.com  simply  include  the 
Javascript file 
alert.js 
And call the welcome() function 
index.html 
index.html 
Another  very  common  use  of  inline  scripts  is  the  onclick()  functionality,  to  externalize  these  the  
addEventListener() can be used. A common web application inline script such as: 
Click Me 
html file 
can be replaced with addEventListener() calls: 
function someEvent() { 
alert("you clicked me"); 
} 
var obj = document.getElementById("someElementId"); 