currently supported in QEMU and the open-sourced mainstream
of the Linux kernel. Due to the diversity of peripherals, there are
still a large number of devices that are not supported. Meanwhile,
manually developing peripheral emulation routine is tedious and
error-prone, especially due to the diversity of peripherals. Thus,
the diversity of peripherals brings significant challenge to build
a general emulator, which can re-host various Linux kernels of
embedded devices.
Lack of public information The information (e.g., specifica-
tions, datasheets, and source code) of SoCs and firmware images
are usually not public. This is because vendors may not release
the detailed hardware specification. Furthermore, vendors may not
release the source code immediately after releasing the image and
not all vendors strictly follow the GPL license [35, 42]. Meanwhile,
the binary of the Linux kernel is stripped and has no particular
headers (i.e., ELF section headers) or debugging information. These
Session 3B: Operating Systems CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea736Peripheral 
Initialization 
Device 
Driver
Peripheral 
Interaction 
APIs 
1
2
ECMO Forward 
Pointers
Redirect 
Opaque
Memory
ECMO 
Driver
Invoke 
ECMO Backward 
Pointers
Transplanted 
Peripheral 
Models
Other 
Peripherals
Linux Kernel
QEMU
CPU
RAM
Figure 4: The overview of peripheral transplantation.
obstruct the diagnosis of failures when adding emulation support
of new SoCs in QEMU.
3.2 Our Solution: Peripheral Transplantation
In this work, we propose a technique called peripheral transplan-
tation. The main idea is, instead of manually adding emulation
support of various peripherals in QEMU, we can replace the periph-
erals that are used in target Linux kernels with existing peripherals in
QEMU. By doing so, we can rehost the Linux kernel and the kernel
functionality is intact (Section 5.4).
Figure 4 shows the overview of peripheral transplantation. This
involves the injection of peripheral models into QEMU and the
ECMO Driver into the Linux kernel. To distinguish them from origi-
nal ones of the (emulated) machine, we call the transplanted periph-
eral models ECMO Peripheral. To let the kernel use the transplanted
ECMO Driver, our system identities the functions that are used
to initialize device drivers (ECMO Forward Pointers) and redirects
them to the functions inside the ECMO Driver (Fig. 4 1 ). Moreover,
our system identifies the APIs that are responsible for interacting
with peripheral models. These APIs are used by the ECMO Driver
to communicate with the transplanted peripheral models (Fig. 4 2 ).
The addresses of these functions are called ECMO Backward Pointers
in this paper. We will elaborate how to identify the ECMO Pointers
in Section 4.2.
Note that, to ensure the ECMO Driver does not affect the memory
view of the rehosted Linux kernel, we propose the concept of the
opaque memory. This memory region is available on the emulated
machine but cannot be seen by the Linux kernel. As such, we can
prevent the kernel from allocating memory pages that are reserved
for the ECMO Driver. We will elaborate this in Section 4.3.
3.3 An Illustration Example of Peripheral
Transplantation
Fig. 5 shows a concrete example of transplanting one peripheral (i.e.,
timer) into the Linux kernel. In particular, the function start_kernel
is responsible for initializing the Linux kernel. It will invoke several
different functions, including setup_arch and and time_init.
The function setup_arch will setup architecture-related config-
urations and initialize the machine_desc structure (Fig. 5 1 ). This
structure contains multiple function pointers (ECMO Forward Point-
ers) that will be used to initialize corresponding drivers. Our system
first locates the function setup_arch and then injects a function
(install_ECMO_forward_pointers) to change the pointers to our
own ones (Fig. 5 3 ).
When the function init_time is invoked to initialize the timer
(Fig. 5 2 ), the ECMO_init_time, which is pointed by machine_desc->
init_time, will be invoked to initialize the injected timer driver
(ECMO Driver) in QEMU (Fig. 5 4 ) (through ECMO Forward Point-
ers), instead of the original one. Accordingly, this function will
invoke APIs (through ECMO Backward Pointers) in the Linux kernel
to interact with the ECMO Peripheral (Fig. 5 5 ).
Note that, the code snippets in Fig. 5 are for the illustration
purpose. Our system does not rely on the availability of the source
code. It directly works towards the Linux kernel binary that is retrieved
from a firmware image.
4 SYSTEM DESIGN AND IMPLEMENTATION
In order to rehost Linux kernels, our system first extracts and de-
compresses the Linux kernel from the given firmware image (Sec-
tion 4.1). We then apply multiple strategies to identify both ECMO
Forward and Backward Pointers (Section 4.2). These pointers are
essential for ECMO Drivers. At last, we semi-automatically gener-
ate ECMO Drivers and load them at runtime to boot the kernels
(Section 4.3). Fig. 6 shows the overall workflow.
4.1 Decompress Linux Kernel
Firmware image usually consists of the OS, which is the Linux
kernel, and user applications. However, the Linux kernel inside the
firmware images is usually compressed. To identify ECMO Pointers,
we need to first extract the Linux kernel and decompress it. With
the decompressed Linux kernel, we can utilize different strategies
to locate the ECMO Pointers.
Specifically, we feed the firmware image to firmware extraction
tool (i.e., Binwalk) to extract the kernel image. Then we directly
feed the extracted kernel image (with added u-boot information) to
QEMU. Since the code for decompressing the Linux kernel does not
operate on the peripherals (except the UART to show the message
of decompressing Linux kernel), it can be successfully executed in
vanilla QEMU.
As shown in Fig. 7, function decompress_kernel in line 16 is in-
voked to decompress the kernel. Its first parameter (i.e., output_start)
indicates the start address of the decompressed kernel. Thus, if we
can identify when decompress_kernel is invoked, we can get the
first parameter by checking the machine register (R0 in ARM) and
dump the decompressed Linux kernel.
We notice that the function decompress_kernel is invoked by
the assembly code in arch/arm/boot/compressed/head.S. We observe
that this snippet of assembly code remains unchanged in different
kernel versions. With this observation, we identify the address of
instruction BL decompress_kernel by strictly comparing the exe-
cution trace of QEMU and the hard coded assembly code. After
finding the instruction, we can obtain the address of the function
decompress_kernel and the value of output_start according to the
execution trace. With this information, we can dump the decom-
pressed Linux kernel after the function decompress_kernel returns.
Session 3B: Operating Systems CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea737start_kernel(void) {
. . .
/*Initialize the architecture specific
Properties */
setup_arch();
. . .
/*Initialize the Timer*/
time_init();
. . .
configure_time_APIs(args) {
}
}
. . .
1
2
setup_arch () {
. . .
/*setup_machine_fdt return the
value of machine_desc */
machine_desc = setup_machine_fdt();
install_ECMO_forward_pointer();
}
time_init(void) {
if (!machine_desc->init_time)
general_time_init();
/*ECMO_init_time()*/
machine_desc->init_time();
else
}
3
4
install_ECMO_forward_pointer(void
) {
…
machine_desc->init_time =
&ECMO_init_time;
}
ECMO_init_time(void) {
args = ECMO_Timer(cid:727)
f = &configure_time_APIs;
(*f)(args);
}
5
Figure 5: A concrete example of peripheral transplantation.
Firmware
Decompress 
Linux 
Kernel
Identify 
ECMO 
Pointers
Generate 
ECMO 
Drivers
Rehostable
Linux 
Kernel
Figure 6: The work flow of our system.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
Assembly code :
mov r0 , #0
str r0 , [ r2 ], #4
str r0 , [ r2 ], #4
str r0 , [ r2 ], #4
str r0 , [ r2 ], #4
cmp r2 , r3
blo 1b
tst r4 , #1
bic r4 , r4 , #1
blne
cache_on
mov r0 , r4 // r0 stores the value of output_start
mov r1 , sp
add r2 , sp , #0 x10000
mov r3 , r7
bl
// we can dump the decompressed Linux kernel
// after function decompress_kernel returns
decompress_kernel
Simplified C code :
void decompress_kernel ( uint32 output_start , args )
Figure 7: The assembly code that invokes function decom-
press_kernel, which is in arch/arm/boot/compressed/head.S.
By doing so, we can automatically retrieve decompressed Linux
kernels from firmware images.
4.2 Identity ECMO Pointers
Our system needs to obtain the addresses of two essential types
of functions in the Linux kernel. Specifically, the ECMO Forward
Pointers contain the functions that are used by the Linux kernel to
initialize device drivers. We dynamically hook and redirect them
to ECMO Drivers at runtime in QEMU. The ECMO Backward Point-
ers contain the APIs that are used by the ECMO Driver to invoke
functions provided by the Linux kernel to interact with emulated
peripherals in QEMU.
Precisely identifying ECMO Pointers is not easy. The main chal-
lenge is the decompressed Linux kernel is stripped and only con-
tains the binary data. It has neither meaningful headers nor debug-
ging symbols and contains thousands of functions. Furthermore,
the Linux kernel is compiled with different compilers and compiling
options, which can result in different binaries. Thus, we cannot have
any assumption on the compiling options or compilers. We also
cannot rely on run-time symbol tables like /proc/kallsym because
they are only available after booting. However, we have the insight
that embedded Linux kernels are usually modified based on the
mainstream Linux kernel and the modification mainly aims to add
support for specific peripherals with board-specific code. Meanwhile,
ECMO Pointers are functions in architecture independent code or
architecture dependent code (Section 2.1), which is unchanged and
open-source.
In this case, we can automatically identify ECMO Pointers by
leveraging the source code of the mainline Linux kernel. For in-
stance, if we find that a function uses a specific string by reading
the source code, then we can easily identify this function inside
the binary by locating the function that has references to the same
string. Of course, this simple strategy may not always work, since
some functions do not have such obvious patterns or multiple func-
tions can refer to the same string. Thus, we take three different
strategies to identify ECMO Pointers (Section 4.2.2). We illustrate
each step in the following.
4.2.1 Disassemble the Linux Kernel. The first step is to disassemble
the Linux kernel for further analysis, including constructing the
control flow graph and identifying function boundaries. Accurately
disassembling the ARM binaries is still challenging, especially when
the binary is stripped [46]. This is because inline data is very com-
mon in ARM binaries and there are two different instruction sets
(i.e., ARM and Thumb). Furthermore, ARM does not have a distin-
guished function call instruction, which can influence the accuracy
of identifying function boundaries. In this case, we choose to en-
sure that this step does not introduce false negatives, i.e., all the
code sections should be dissembled. Otherwise, we cannot identify
the functions if they are not correctly disassembled. However, we
can tolerate the false positives, i.e., the inline data may be wrongly
disassembled as code. The strategies described in Section 4.2.2 can
help us to filter out these false positives.
Session 3B: Operating Systems CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea738After disassembling the Linux kernel and constructing the con-
trol flow graphs, we further locate function boundaries by combin-
ing the algorithm introduced in Nucleus [23] and angr [1]. Nucleus
can identify the functions indirectly called while angr locates the
function according to the prologue. These two tools can help to
reduce the false negatives and guarantee that the required function
addresses (ECMO Pointers) will be located during the disassembly
process. Finally, we build a mapping for each function and various
types of information, e.g., number of basic blocks, string references,
number of called functions and etc. This mapping describes the
signature (or portrait) of each function. Note that, our system does
not require that the constructed control flow graphs are sound
or complete, as long as they can provide enough information for
further analysis (Section 4.2.2).
Algorithm 1: The algorithm to identify the addresses of
ECMO pointers from the Linux kernel binary.
Input: The decompressed Linux kernel 𝐿𝐾𝐵;
The source code of ECMO Pointers 𝑆𝐶 (architecture independent code or
architecture dependent code);
Output: The addresses of ECMO Pointers 𝐹𝐴;
1 Function Identify(𝐿𝐾𝐵,𝑆𝐶):
𝐶𝐹𝐺 = Disassembly(𝐿𝐾𝐵)
2
𝐺𝑒𝑛𝑒𝑟𝑎𝑡𝑒𝑑_𝐹𝑢𝑛𝑐𝑡𝑖𝑜𝑛𝑠 = GenerateFunctions(𝐶𝐹𝐺)
for 𝑆_𝐹 in 𝑆𝐶 do
3
for 𝐺_𝐹 in 𝐺𝑒𝑛𝑒𝑟𝑎𝑡𝑒𝑑_𝐹𝑢𝑛𝑐𝑡𝑖𝑜𝑛𝑠 do
for Filtering_Strategy in Filtering_strategies do
if Filtering_Strategy(𝑆_𝐹 ,𝐺_𝐹 ) then
Append 𝐺_𝐹 to 𝑆_𝐹 .𝐶𝑎𝑛𝑑𝑖𝑑𝑎𝑡𝑒𝑠
for 𝑆_𝐹 in 𝑆𝐶 do
if Length(𝑆_𝐹 .𝐶𝑎𝑛𝑑𝑖𝑑𝑎𝑡𝑒𝑠) == 1then
𝐹𝐴 [𝑆_𝐹 ] = 𝑆_𝐹 .𝐶𝑎𝑛𝑑𝑖𝑑𝑎𝑡𝑒𝑠
return 𝐹𝐴
4
5
6
7
8
9
10
11
12
13
Identify Pointer Addresses. Algorithm 1 describes the process
4.2.2
to locate pointer addresses of ECMO Pointers in the decompressed