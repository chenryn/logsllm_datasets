# PWNHUB-Crypto-easy_rsa
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 引言
上周做了PWNHUB公开赛的一道题，题目非常简单，不过其解法可以作为去年至今年不少比赛中一些题的非预期解。
## easy_rsa
题目内容：
    from Crypto.Util.number import *
    import gmpy2
    p = getPrime(256)
    q = getPrime(256)
    n = p**4 * q
    e = 0x10001
    phi = gmpy2.lcm(p - 1, q - 1)
    print p,q,(p-1)*(q-1),phi
    d = gmpy2.invert(e, phi)
    dp = d % (p - 1)
    flag = "flag test"
    m = bytes_to_long(flag)
    c = pow(m, e, n)
    with open("task.txt", "wb") as f:
        f.write("p = " + str(p) + "n")
        f.write("dp = " + str(dp) + "n")
        f.write("c = " + str(c) + "n")
已知条件有：
    e = 0x10001
    p = 101929084299670546874377888313310032223878975126505177250899359089949344741757
    dp = 65396861873942157177988639208356504492876743612299764912123170896046356221697
    c = 6269384350208107136998483707011829394008587900457663571244788943036780209795770242310061468769349755061758139035007281850788012666607455148381884258167481858728622506286494019122798053786551166225594180741059049967989361825384394750684768329297786252047054319366274151496551274680273650028952994423859700579125146060211533750292355111530085730590032774664087174464270974719057122128137
和正常RSA的区别有两点：一是本题中`n = p**4 * q`而非`p * q`，这并不影响解密，如果知道`p`和`q`的值一样可以计算`n`的欧拉函数
$phi(n) =
(q-1)(p-1)p^3$；二是本题中不知道`q`的值，没有`q`就没法计算出`n`，所以就无法解密吗？答案是否定的，下面分析如何不使用`q`完成解密。
RSA加解密流程如下：
  1. 取大素数$p$和$q$，计算$n = pq$，计算$phi(n) = phi(p)phi(q)$;
  2. 取和$phi(n)$互质的公钥$e$，计算私钥$d$，满足$edequiv 1 pmod {phi(n)}$；
  3. 丢弃$p$和$q$，避免被他人获得进而计算出私钥；
  4. 加密：$c equiv m^e pmod n$;
  5. 解密：$m equiv c^d pmod n$.
由于
ed = kphi(n)+1
根据欧拉定理
a^{phi(n)} equiv 1 pmod n
c^d equiv m^{ed} equiv m^{kphi(n)+1} equiv m pmod n
（注意这不是严格的RSA正确性证明）
当知道`n`的一个因数（假定为`p`）的时候，令
cp equiv c pmod p
就有
cp equiv m^e pmod p
如果明文`m`不大于`p`，那么就可以在不需要`q`的情况下解密，流程如下：
  1. 计算$phi(p) = p-1$;
  2. 计算新的私钥$dp$，满足$e*dpequiv 1 pmod {phi(p)}$;
  3. 计算$m equiv cp^{dp} pmod p$.
同样由于欧拉定理保证了这样计算出的m是正确的
cp^{dp} equiv m^{edp} equiv m^{kphi(p)+1} equiv m pmod p
无论明文`m`是否大于`p`，上面的式子都是成立的，只是`m`大于`p`时得到是满足要求的最小`m`，这未必是我们想要的。
按照上面的思路，对于easy_rsa这道题，已知的最大的一个`n`的因数是$p^4$，解密流程如下：
  1. 计算$cp_4 equiv c pmod {p^4}$，得到`cp4 = 92258417132703698867357242895362081798728266820359920406334628423217525720347162182976441142853919128328179377489269891965884679810815303646319951126042836844112032938227662314873014551126491592505083363734798620778161007996148756609856151255577919385049228825554966072197314543854674047083451882206834724547`;
  2. 计算$phi(p^4) = (p-1)p^3$，得到`phip4 = 107942504553034055189174912429558305583217343940542532622157501036333587105880669089428586204757543036635156859326713539152513944716055403225815788388551357468487200053249039484218446786105990107424723366865192526491061630182343408694770454246453879525773269493047346660305044734430034813341844797241874083308`;