### DrayTek漏洞分析与复现

#### 1. CVE-2020-8515
**漏洞描述：**
DrayTek Vigor2960 1.3.1_Beta, Vigor3900 1.4.4_Beta, 和 Vigor300B 1.3.3_Beta, 1.4.2.1_Beta, 以及 1.4.4_Beta 设备允许通过向 `cgi-bin/mainfunction.cgi` URI 发送包含 shell 元字符的请求，实现无需认证的远程代码执行（RCE）。此问题已在 Vigor3900/2960/300B v1.5.1 版本中修复。

**分析步骤：**
- **固件版本选择：** 使用 Vigor2960 1.5.0 和 1.5.1 版本的固件进行对比。
- **固件提取：** 固件为 UBI 类型，使用 [ubi_reader](https://github.com/jrspruitt/ubi_reader.git) 工具进行提取，得到完整的文件系统。
- **Web 服务器配置：** lighttpd 是一个轻量级 Web 服务器，通常支持 CGI 文件。在 `./etc/lighttpd/lighttpd.conf` 中查看服务器配置，有助于确定分析目标。
- **漏洞定位：** 根据漏洞通告，问题出现在 `cgi-bin/mainfunction.cgi` 程序中。

**详细分析：**
1. **主函数分析：**
   - 在 IDA 中打开 `mainfunction.cgi` 文件，找到 `main` 函数。
   - 在第 33 行获取 `PATH_INFO` 环境变量，该变量表示紧跟在 CGI 程序名后的路径信息，常作为 CGI 程序的参数。
   - `main` 函数还通过 `action` 参数确定要执行的动作，并在 `sub_B44C` 函数中遍历函数表，比较用户传入的 `action` 值来确定要执行的函数。

2. **漏洞点分析：**
   - 漏洞点在于登录时的 `keyPath` 参数。通过搜索字符串定位到 `login` 函数。
   - 获取 `keyPath` 的值并进行检查。检查函数过滤了常用的命令拼接字符如 `;|>$(` 空格等，但依然可以绕过。
   - 绕过方法：
     - 使用 `%0a` 或 `%0d` 字符来执行多条命令。
     - 单独的 `$` 字符未被过滤，可以通过 `${IFS}` 绕过空格。

3. **命令执行：**
   - 通过 `snprintf` 函数拼接路径和命令：
     ```c
     /tmp/rsa/private_key_keypath
     openssl rsautl -inkey '/tmp/rsa/private_key_keypath' -decrypt -in /tmp/rsa/binary_login
     ```
   - 将命令传递给 `run_command` 函数（使用 `popen` 执行），导致未授权的命令执行。

**实际操作：**
- 输入任意用户名和密码，抓包分析。
- 修改 `keyPath` 的值，成功执行 `ls` 命令。
- 对于需要空格的命令，可以在 `keyPath` 前加上 `'` 来闭合单引号，防止命令不执行。

**版本对比：**
- 在 1.5.1 版本中，增加了十六进制字符的判断和完善的 `check` 函数，防止命令注入。
- `rtick` 参数也进行了限制，仅允许数字，防止命令注入。

#### 2. CVE-2020-15415
**漏洞描述：**
在 DrayTek Vigor3900, Vigor2960, 和 Vigor300B 设备 1.5.1 版本之前，访问 `cgi-bin/mainfunction.cgi/cvmcfgupload` 路径时，如果 `Content-Type` 为 `text/x-python-script`，则在 `filename` 中存在命令注入漏洞，这是一个不同于 CVE-2020-14472 的问题。

**分析步骤：**
- **漏洞定位：** 直接定位到 `cgi-bin/mainfunction.cgi/cvmcfgupload` 路径。
- **环境变量获取：** 通过 `getenv("QUERY_STRING")` 获取传递的信息。
- **函数调用：** 如果不存在 `session=` 字符串，则进入 `sub_13450` 函数。

**详细分析：**
1. **环境变量和函数调用：**
   - 通过 `getenv("QUERY_STRING")` 获取传递的信息。
   - 判断是否存在 `session=` 字符串，如果不存在则进入 `sub_13450` 函数。
   - 在 `sub_13450` 函数中找到 `system` 函数执行点，但未看到 `filename` 参数。

2. **利用方法：**
   - 结合已有的 POC 进行分析：
     ```http
     POST /cgi-bin/mainfunction.cgi/cvmcfgupload?1=2 HTTP/1.1
     Host: xxx.xxx.xxx.xxx:xxxx
     Content-Length: 174
     Cache-Control: max-age=0
     Upgrade-Insecure-Requests: 1
     Content-Type: multipart/form-data; boundary=----WebKitFormBoundary
     Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
     Accept-Encoding: gzip, deflate
     Accept-Language: zh,en;q=0.9,zh-CN;q=0.8,la;q=0.7
     Connection: close
     ------WebKitFormBoundary
     Content-Disposition: form-data; name="abc"; filename="t';id;echo '1_"
     Content-Type: text/x-python-script
     ------WebKitFormBoundary--
     ```

3. **编码规则：**
   - `multipart/form-data` 编码规则：POST 方式发送数据，`Content-Type` 格式为 `multipart/form-data; boundary=${boundary}`。
   - `WebKitFormBoundary` 作为数据的起始符、分隔符和终结标记符。
   - 数据内容包括 `Content-Disposition`、`Content-Type` 和数据内容，其中 `Content-Disposition` 包含 `type` 和 `name` 参数，如果是文件还包括 `filename` 参数。

**总结：**
通过对 DrayTek 设备的两个漏洞进行分析，我们可以看到这些漏洞都涉及到未授权的远程代码执行。通过详细的代码分析和实际操作，我们能够理解漏洞的原理并复现它们。同时，新版本中的修复措施也为我们提供了防范此类漏洞的方法。