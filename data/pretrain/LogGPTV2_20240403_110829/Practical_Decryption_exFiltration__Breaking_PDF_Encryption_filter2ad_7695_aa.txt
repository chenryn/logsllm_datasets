title:Practical Decryption exFiltration: Breaking PDF Encryption
author:Jens M&quot;uller and
Fabian Ising and
Vladislav Mladenov and
Christian Mainka and
Sebastian Schinzel and
J&quot;org Schwenk
Practical Decryption exFiltration: Breaking PDF Encryption
Jens Müller
PI:EMAIL
Ruhr University Bochum, Chair for
Network and Data Security
Fabian Ising
PI:EMAIL
Münster University of Applied
Sciences
Christian Mainka
PI:EMAIL
Ruhr University Bochum, Chair for
Network and Data Security
Sebastian Schinzel
PI:EMAIL
Münster University of Applied
Sciences
Vladislav Mladenov
PI:EMAIL
Ruhr University Bochum, Chair for
Network and Data Security
Jörg Schwenk
PI:EMAIL
Ruhr University Bochum, Chair for
Network and Data Security
ABSTRACT
The Portable Document Format, better known as PDF, is one of the
most widely used document formats worldwide, and in order to en-
sure information confidentiality, this file format supports document
encryption. In this paper, we analyze PDF encryption and show
two novel techniques for breaking the confidentiality of encrypted
documents. First, we abuse the PDF feature of partially encrypted
documents to wrap the encrypted part of the document within
attacker-controlled content and therefore, exfiltrate the plaintext
once the document is opened by a legitimate user. Second, we abuse
a flaw in the PDF encryption specification to arbitrarily manipulate
encrypted content. The only requirement is that a single block of
known plaintext is needed, and we show that this is fulfilled by
design. Our attacks allow the recovery of the entire plaintext of en-
crypted documents by using exfiltration channels which are based
on standard compliant PDF properties.
We evaluated our attacks on 27 widely used PDF viewers and
found all of them to be vulnerable. We responsibly disclosed the
vulnerabilities and supported the vendors in fixing the issues.
CCS CONCEPTS
• Security and privacy → Cryptanalysis and other attacks;
Management and querying of encrypted data; Block and stream
ciphers; Digital rights management.
KEYWORDS
PDF, encryption, direct exfiltration, CBC malleability, CBC gadgets
ACM Reference Format:
Jens Müller, Fabian Ising, Vladislav Mladenov, Christian Mainka, Sebas-
tian Schinzel, and Jörg Schwenk. 2019. Practical Decryption exFiltration:
Breaking PDF Encryption. In 2019 ACM SIGSAC Conference on Computer
and Communications Security (CCS ’19), November 11–15, 2019, London,
United Kingdom. ACM, New York, NY, USA, 15 pages. https://doi.org/10.
1145/3319535.3354214
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ’19, November 11–15, 2019, London, United Kingdom
© 2019 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-6747-9/19/11...$15.00
https://doi.org/10.1145/3319535.3354214
Figure 1: An overview of the attack scenario: The victim
opens an encrypted PDF document and unintentionally
leaks the decrypted content to an attacker-controlled server.
The encrypted PDF file was manipulated by the attacker be-
forehand, without having the corresponding password.
1 INTRODUCTION
The confidentiality of documents can either be protected during
transport only – here TLS is the method of choice today – or during
transport and storage. To provide this latter functionality, many
document formats offer built-in encryption methods. Prominent
examples are Microsoft Office Documents with Rights Manage-
ment Services (RMS) or ePub with Digitial Rights Management
(DRM) (which relies on XML Encryption), and email encryption
with S/MIME or OpenPGP. Many of those formats are known to
be vulnerable to different attacks by targeting the confidentiality
and integrity of the information therein [17, 25]. In 2018, the vul-
nerabilities in S/MIME and OpenPGP, today known as EFAIL [38],
took attacks on encrypted messages to the next level: by combining
the ciphertext malleability property with the loading of external
resources (known as exfiltration channels), victims can leak the
plaintext to the attacker simply by opening an encrypted email.
Complexity of PDF Documents. The Portable Document Format
(PDF) is more than a simple data format to display content. It has
many advanced features ranging from cryptography to calculation
logic [36], 3D animations [51], JavaScript [1], and form fields [53].
It is possible to update and annotate a PDF file without losing
older revisions [54] and to define certain PDF actions [52], such
as specifying the page to show when opening the file. The PDF
file format even allows the embedding of other data formats such
as XML [3], PostScript [32], or Flash [2], which includes all their
strengths, weaknesses, and concerns. All these features open a huge
potential for an attacker. In this paper, we only rely on standard-
compliant PDF properties, without using additional features from
other embedded data formats.
Decrypted	DocumentTax	DeclarationScrooge	McDuckTOP	SECRETVictim’s PCAttacker1. Victim opens an encrypted PDF ﬁlewith their password Home/Trusted Environment2. Exﬁltrating decrypted contentvia the InternetVictimPDF Encryption. To guarantee confidentiality, the PDF standard
defines PDF-specific encryption functions. This enables the secure
transfer and storing of sensitive documents without any further
protection mechanisms – a feature used, for example, by the U.S.
Department of Justice [35]. The key management between the
sender and recipient may be password based (the recipient must
know the password used by the sender, or it must be transferred to
him through a secure channel) or public key based (i.e., the sender
knows the X.509 certificate of the recipient).
PDF encryption is widely used. Prominent companies like Canon
and Samsung apply PDF encryption in document scanners to pro-
tect sensitive information [5, 45, 47]. Further providers like IBM
offer PDF encryption services for PDF documents and other data
(e.g., confidential images) by wrapping them into PDF [19, 29, 56, 57].
PDF encryption is also supported in different medical products to
transfer health records [22, 42, 43]. Due to the shortcomings regard-
ing the deployment and usability of S/MIME and OpenPGP email en-
cryption, some organizations use special gateways to automatically
encrypt email messages as encrypted PDF attachments [8, 28, 34].
The password to decrypt these PDFs can be transmitted over a
second channel, such as a text message (i.e., SMS).
Novel Attacks on PDF Encryption. In this paper, we present the
results of a comprehensive and systematic analysis of the PDF en-
cryption features. We analyzed the PDF specification for potential
security-related shortcomings regarding PDF encryption. This anal-
ysis resulted in several findings that can be used to break PDF
encryption in active-attacker scenarios. The attack scenario is de-
picted in Figure 1. An attacker gains access to an encrypted PDF
document. Even without knowing the corresponding password,
they can manipulate parts of the PDF file. More precisely, the PDF
specification allows the mixing of ciphertexts with plaintexts. In
combination with further PDF features which allow the loading of
external resources via HTTP, the attacker can run direct exfiltration
attacks once a victim opens the file. The concept is similar to previ-
ous work [38] on email end-to-end encryption, but in contrast, our
exfiltration channels rely only on standard-compliant features.
PDF encryption uses the Cipher Block Chaining (CBC) encryp-
tion mode with no integrity checks, which implies ciphertext mal-
leability. This allows us to create self-exfiltrating ciphertext parts
using CBC malleability gadgets, as defined in [38]. In contrast to [38],
we use this technique not only to modify existing plaintext but to
construct entirely new encrypted objects. Additionally, we refined
compression-based attacks to adjust them to our attack scenarios.
In summary, we put a considerable amount of engineering effort
into adapting the concepts of [38] to the PDF document format.
Large-Scale Evaluation. In order to measure the impact of the
vulnerabilities in the PDF specification, we analyzed 27 widely used
PDF viewers. We found 23 of them (85%) to be vulnerable to direct
exfiltration attacks and all of them to be vulnerable to CBC gadgets.
Responsible Disclosure. We reported our attacks to the affected
vendors and have proposed appropriate mitigations. However, to
sustainably eliminate the root cause of the vulnerabilities, changes
in the PDF standard are required. The issues have been escalated by
Adobe to the ISO working group on cryptography and signatures
and will be taken up in the next revision of the PDF specification.
plemented for PDF documents. (section 2)
Contributions. The contributions of this paper are:
• We provide technical insights on how confidentiality is im-
• We present the first comprehensive analysis on the security
of PDF encryption and show how to construct exfiltration
channels by combining PDF standard features. (section 4)
• We describe two novel attack classes against PDF encryption,
which abuse vulnerabilities in the current PDF standard and
allow attackers to obtain the plaintext. (section 5)
• We evaluate popular PDF viewers and show that all of the
viewers are, indeed, vulnerable to the attacks. (section 6)
• We discuss countermeasures and mitigations for PDF viewer
implementations and the PDF specification. (section 7)
2 BACKGROUND
This section deals with the foundations of the Portable Document
Format (PDF). In Figure 2, we give an overview of the PDF document
structure and summarize the PDF standard for encryption.
2.1 Portable Document Format (PDF)
A PDF document consists of four parts: Header, Body, Xref Table,
and a Trailer, as depicted in Figure 2.
Figure 2: A simplified example of the internal PDF structure
and a comparison between encrypted and plain PDF files.
PDF Header. The first line in the PDF is the header, which defines
the PDF document version. In Figure 2, PDF version 1.7 is used.
PDF Body. The main building block of a PDF file is the body.
It contains all text blocks, fonts, and graphics and describes how
Plain PDFEncrypted PDF%PDF-1.71 0 obj Catalog/Info [enc. string]/Pages 2 0 RHeader%PDF-1.71 0 obj Catalog/Info (file info)/Pages 2 0 RHeader2 0 obj Pages/Kids [3 0 R]3 0 obj Page/Contents 4 0 RBody4 0 obj ContentsConfidential content!5 0 obj EmbeddedFilecontentXref TableTrailer/Root 1 0 Rxreftrailer2 0 obj Pages/Kids [3 0 R]3 0 obj Page/Contents 4 0 RBody4 0 obj Contents[encrypted stream]5 0 obj EmbeddedFile[encrypted stream]6 0 obj Encryptenc. parameters/Root 1 0 R/Encrypt 6 0 RxreftrailerXref TableTrailerthey are to be displayed by the PDF viewer. The most important
elements within the body are objects. Each object starts with an
object number followed by the object’s version (e.g., 5 0 obj defines
object number 5, version 0).
On the left side of Figure 2, the body contains five objects: Catalog,
Pages, Page, Contents, and EmbeddedFile. The Catalog object is the
root object of a PDF file. It defines the document structure and
refers to the Pages object which contains the number of pages
and a reference to each Page object (e.g., text columns). The Page
object contains information on how to build a single page. In the
given example, it only contains a single stream object “Confidential
content!”. Finally, a PDF document can embed arbitrary file types
(e.g., images, additional PDF files, etc.). These embedded files are
technically streams, see 5 0 obj in Figure 2.
Xref Table and Trailer. The bottom of a PDF file contains two
special parts. The Xref Table holds a list of all objects used in the
document and their byte offsets. It allows random access to objects
without having to read the entire file. The Trailer is the entry point
for a PDF file. It contains a pointer to the root object, i.e., the Catalog.
PDF Streams and Strings. The contents visible to a user are mainly
represented by two types of objects, stream objects and string objects.
Stream objects are a series of zero, or more, bytes enclosed in the
keywords stream and endstream, and prefaced with additional
information like length and encoding, for example, hex encoding
or compression. String objects are a series of bytes which can be
encoded, for example, as literal (ASCII) or hexadecimal strings.
Confidential content!
1 %%% STREAM example %%%
2 >
3 stream
4
5 endstream
6
7 %%% STRING example %%%
8 (This is a literal string)
9 
% stream length
% start of the stream
% content (e.g., text, image, font, file)
% end of the stream
% literal string
% hexadecimal string
Listing 1: Example of a stream and two strings (literal/hex).
Compression. In practice, many PDF files contain compressed
streams to reduce the file size. The PDF specification defines multi-
ple compression algorithms, technically implemented as filters. The
most important filter for this paper is the FlateDecode filter, which
implements the zlib deflate algorithm [11, 12], as it is recommended
for both ASCII (e.g., text) and binary data (e.g., embedded images).
2.2 PDF Encryption
Figure 2 shows a comparison of an unencrypted PDF file to an
encrypted PDF file. One can see that the encrypted PDF document
has the same internal structure as the unencrypted counterpart.
There are two main differences between both files:
(1) The Trailer has an additional entry, the Encrypt dictionary,
which signalizes PDF viewers that the document is encrypted
and contains the necessary information to decrypt it.
(2) By default, all strings and streams within the document are
encrypted, for example, 4 0 obj.
The Encrypt Dictionary. The information necessary to decrypt
the document is stored in the Encrypt dictionary. It specifies the
cryptographic algorithms to be used and the user permissions.
Figure 3: Simplified example of a PDF encryption dictionary.
A simplified example containing all relevant parameters is given
in Figure 3. The user access permissions are stored unencrypted in
the P value, which is an integer value representing a bit field of flags.
Such permissions define if printing, modifying, or copying content
is allowed. Additionally, the Perms value stores an encrypted copy
of these permissions by using the file encryption key in Electronic
Codebook (ECB) mode. Upon opening an encrypted PDF file, a
viewer conforming to the standard must decrypt the Perms value
and compare it to the P value in order to detect possible manipu-
lations. We abuse this behavior to start known-plaintext attacks
and build Cipher Block Chaining (CBC) gadgets, see section 4.2.
Next, one or more Crypt Filters can be defined. In the given exam-
ple depicted in Figure 3, StdCF – the standard name for a Crypt
Filter – is used. Each Crypt Filter contains information regarding
the encryption algorithm (Algorithm) and instructions for when
the password is to be prompted (Event). Supported values for the
encryption algorithm can either be None (no encryption), V2 (RC4),
AESV2 (AES128-CBC), or AESV3 (AES256-CBC). In this work, we
focus on AES256 encryption, which is considered to be most secure.
Partial Encryption. Since PDF version 1.5 (released in 2003), par-
tially encrypted PDF files are supported. The standard allows to
specify different Crypt Filters to encrypt/decrypt strings, streams,
and embedded files. This flexibility is desired, for example, to encrypt
embedded files with a different algorithm, or not to encrypt them
at all. We abuse this feature to build partially encrypted, malicious
PDF files containing encrypted as well as plaintext content.
2.3 PDF Interactive Features
PDF is more than a simple format for document exchange. The PDF
specification supports interactive elements known from the World
Wide Web, such as hyperlinks, which can refer either to an an-
chor within the document itself or to an external resource. PDF 1.2
(released in 1996) further introduced PDF forms which allow data
to be entered and submitted to an external web server, similar to
HTML forms. While PDF forms are less common than their equiva-
lent in the web, they are supported by most major PDF viewers in
favor of the idea of the “paperless office”, allowing users to directly
submit data instead of printing the document and filling it out by
hand. Another adoption from the Web is rudimentary JavaScript
6 0 obj EncryptCryptFilter DefinitionUse StdCF to encrypt all stringsUse StdCF to encrypt all streamsUse StdCF to encrypt attached files/StdCF     >/StrF /StdCF/StmF /StdCF  /EFF /StdCF/Perms     1 … 1P Value„T“/“F“„adb“random4 byte4 byte1 byte3 byte4 byte/P     ValueEncrypted PermissionsPermissionsCryptFilter Usage/EncryptMetadata     true/false(Un)Encrypted Metadataknown-plaintextsupport, which is standardized in PDF and can be used, for example,
to validate form values or to modify document page contents. We
will abuse these features in order to build PDF standard-compliant
exfiltration channels.
3 ATTACKER MODEL
In this section, we describe the attacker model, including the at-
tacker’s capabilities and the winning condition.
Victim. The victim is an individual who opens a confidential and
encrypted PDF file. They possess the necessary keys or know the
correct password and willingly follow the process of decrypting the
document once the viewer application prompts for the password.
Attacker Capabilities. We assume that the attacker gained access
to the encrypted PDF file. They do not know the password and have
no access to the decryption keys. They can arbitrarily modify the
encrypted file by changing the document structure or adding new
unencrypted objects. The attacker can also modify the encrypted
parts of the PDF file, for example, by flipping bits. The attacker
sends the modified PDF file to the victim, who then opens the
documents and follows the steps to decrypt and read the content.
Winning Condition. The attacker is successful if parts or the
entire plaintext of the encrypted content in the PDF file are obtained.
Attack Classification. We distinguish between two different suc-
cess scenarios for an attacker.
(1) In an attack without user interaction, it is sufficient that the
victim merely opens and displays a modified PDF document
for the winning condition to be fulfilled.
(2) In an attack with user interaction, it is necessary that the
victim interacts with the document for the winning condition
to be fulfilled (e.g., the victim needs to click on a page).
We argue that attacks with user interaction are still realistic because
in many PDF viewers, it is common to click and drag the page
in order to scroll up and down, and in many cases, this action
is enough to trigger the attack. In some scenarios, a viewer may
open a dialog to ask for confirmation, for example, for requesting
external resources. We argue that a victim who willingly decrypts
the PDF document will also willingly confirm a dialog box if it
directly follows the decryption process.
4 PDF ENCRYPTION: SECURITY ANALYSIS
In this section, we analyze the security of the PDF encryption
standard. We introduce conceptual shortcomings and cryptographic
weakness in the specification which allow an attacker to inject
malicious content into an otherwise encrypted document, as well
as interactive features which can be used to exfiltrate the plaintext.
4.1 Partial Encryption
Document Structure Manipulation. In encrypted PDF documents,
only strings and streams are actually encrypted. In other words,
objects defining the document’s structure are unencrypted by de-
sign and can be easily manipulated. For example, an attacker can
duplicate or remove pages, encrypted or not, or even change their
order within the document. Neither the Trailer nor the Xref Table
Figure 4: A simplified example of a PDF’s encryption dictio-
nary created by the attacker. The dictionary specifies that
all strings and the document’s metadata are not encrypted.
is encrypted. Thus, an attacker can change references to objects
such as the document catalog.
In summary, PDF encryption can only protect the confidentiality
of string and stream objects. It does not include integrity protection.
The structure of the document is not encrypted, allowing trivial
restructuring of its contents.
Partially Encrypted Content. Moreover, beginning with PDF 1.5,
the specification added support for Crypt Filters. These crypt filters
basically define which encryption algorithm is to be applied to a
specific stream. A special crypt filter is the Identity filter, which
simply “passes through all input data” [50]. Such flexibility, to define
unencrypted content within an otherwise encrypted document, is
dangerous. It allows the attacker to wrap encrypted parts into their
own context. For example, the attacker can prepend additional
pages of arbitrary content or modify existing (encrypted) pages by
overlaying content and therefore completely change the appearance
of the document. An example of adding unencrypted text using
the Identity filter is shown in Listing 2. In the given example, a
new object is added to the document, with its own Identity crypt
filter which does nothing (line 2), thereby leaving its content stream
unencrypted and subject to modification (line 6).
>]
>>
/Length 40
1 2 0 obj
2
3
4
5 stream
6 BT (This unencrypted text is added!) ET
7 endstream
8 endobj
% Identity filter
% unencrypted stream
Listing 2: Content added to an otherwise encrypted document.
The Identity filter can be applied to single streams, as shown in
Listing 2, or to all streams or strings by setting it as the default filter
in the Encrypt dictionary (see Figure 4). This flexibility even allows
the attacker to build completely attacker-controlled documents