run on 0;   -- 在指定的数据节点上运行, 本例可以设置为0到3, 顺序和创建的server中的配置顺序一致. p0, p1, p2, p3    
$$ language plproxy strict;    
proxy=# grant execute on function digoal.f_test4() to proxy;    
GRANT    
proxy=# \c proxy proxy    
You are now connected to database "proxy" as user "proxy".    
proxy=> select * from digoal.f_test4();    
 f_test4     
---------    
       0    
(1 row)    
```
如果run on 的数字改成0-3以外的数字, 运行时将报错, 符合预期.  
```
proxy=# create or replace function digoal.f_test4() returns int as $$    
cluster 'cluster_srv1';    
run on 4;      
$$ language plproxy strict;    
CREATE FUNCTION    
proxy=# \c proxy proxy    
You are now connected to database "proxy" as user "proxy".    
proxy=> select * from digoal.f_test4();    
ERROR:  PL/Proxy function digoal.f_test4(0): part number out of range    
```
run on any表示随机的选择一个数据节点运行.  
```
proxy=> \c proxy postgres    
You are now connected to database "proxy" as user "postgres".    
proxy=# create or replace function digoal.f_test4() returns int as $$    
cluster 'cluster_srv1';    
run on any;      
$$ language plproxy strict;    
CREATE FUNCTION    
proxy=# \c proxy proxy    
You are now connected to database "proxy" as user "proxy".    
proxy=> select * from digoal.f_test4();    
 f_test4     
---------    
       0    
(1 row)    
proxy=> select * from digoal.f_test4();    
 f_test4     
---------    
       3    
(1 row)    
proxy=> select * from digoal.f_test4();    
 f_test4     
---------    
       2    
(1 row)    
proxy=> select * from digoal.f_test4();    
 f_test4     
---------    
       3    
(1 row)    
```
run on function() 则使用函数结果的hash值计算得到运行节点.  
```
proxy=> create or replace function digoal.f(int) returns int as $$    
select $1;    
$$ language sql strict;    
CREATE FUNCTION    
proxy=> \c proxy postgres    
You are now connected to database "proxy" as user "postgres".    
proxy=# create or replace function digoal.f_test4() returns int as $$    
cluster 'cluster_srv1';    
run on digoal.f(10);      
$$ language plproxy strict;    
CREATE FUNCTION    
proxy=> select digoal.f_test4();    
 f_test4     
---------    
       2    
(1 row)    
proxy=> \c proxy postgres    
You are now connected to database "proxy" as user "postgres".    
proxy=# create or replace function digoal.f_test4() returns int as $$    
cluster 'cluster_srv1';    
run on digoal.f(11);      
$$ language plproxy strict;    
CREATE FUNCTION    
proxy=# \c proxy proxy    
You are now connected to database "proxy" as user "proxy".    
proxy=> select digoal.f_test4();    
 f_test4     
---------    
       3    
(1 row)    
proxy=> \c proxy postgres    
You are now connected to database "proxy" as user "postgres".    
proxy=# create or replace function digoal.f_test4() returns int as $$    
cluster 'cluster_srv1';    
run on digoal.f(-11);      
$$ language plproxy strict;    
CREATE FUNCTION    
proxy=# \c proxy proxy    
You are now connected to database "proxy" as user "proxy".    
proxy=> select digoal.f_test4();    
 f_test4     
---------    
       1    
(1 row)    
```
run on all表示所有数据节点运行. 代理函数必须使用returns setof返回.  
```
proxy=> \c proxy postgres    
You are now connected to database "proxy" as user "postgres".    
proxy=# create or replace function digoal.f_test4() returns int as $$    
cluster 'cluster_srv1';    
run on all;                
$$ language plproxy strict;    
ERROR:  PL/Proxy function digoal.f_test4(0): RUN ON ALL requires set-returning function    
proxy=# drop function digoal.f_test4();    
DROP FUNCTION    
proxy=# create or replace function digoal.f_test4() returns setof int as $$    
cluster 'cluster_srv1';    
run on all;      
$$ language plproxy strict;    
CREATE FUNCTION    
proxy=# grant execute on function digoal.f_test4() to proxy;    
GRANT    
proxy=# \c proxy proxy     
You are now connected to database "proxy" as user "proxy".    
proxy=> select digoal.f_test4();    
 f_test4     
---------    
       0    
       1    
       2    
       3    
(4 rows)    
```
## 注意事项  
1\. 设计时需要注意  
plproxy函数所在的schema尽量和数据节点上实际函数的schema一致.  
否则需要在plproxy函数中使用target指定 schema.functionname;  
2\. 数据节点的个数请保持2^n,  
这么做有利于后期的节点扩展, 例如2个节点扩展到4个节点时, 数据不需要发生跨节点的重分布.  
例如  
```
mod(x,2)=0 那么mod(x,4)=0或2    
mod(x,2)=1 那么mod(x,4)=1或3    
```
比较适合位运算的分布算法.  
当然我们也可以使用一致性哈希的设计思路，参考  
《一致性哈希在分布式数据库中的应用探索》  
https://yq.aliyun.com/articles/57954  
3\. 如果业务为短连接的形式, 那么需要1层连接池, 在应用程序和plproxy数据库之间. 而不是plproxy和数据节点之间.  
在应用程序和plproxy之间加连接池后, 其实对于plproxy来说就是长连接了, 所以在plproxy和数据节点之间也就不需要连接池了.  
4\. 长连接不需要连接池, 因为plproxy和数据节点之间的连接是长连接.  
5\. plproxy语法非常简洁，而且函数调用彻底避免了事务的问题  
```
connect, cluster, run, select, split, target.  
```
6\. 关于连接密码  
出于安全考虑, 建议在任何配置中不要出现明文密码, 所以最好是plproxy服务器到数据节点是trust验证, 保护好plproxy即可.  
假设plproxy在172.16.3.2上. 数据节点有4个, 库名和用户名都为digoal. 那么在4个节点上配置pg_hba.conf如下.  
```
   node0    
   host digoal digoal 172.16.3.2/32 trust    
   node1    
   host digoal digoal 172.16.3.2/32 trust    
   node2    
   host digoal digoal 172.16.3.2/32 trust    
   node3    
   host digoal digoal 172.16.3.2/32 trust    
```
7\. run 详解:  
```  
   run on , 是数字常量, 范围是0 到 nodes-1; 例如有4个节点 run on 0; (run on 4则报错).    
   run on ANY,     
   run on function(...), 这里用到的函数返回结果必须是int2, int4 或 int8.     
   run on ALL, 这种的plproxy函数必须是returns setof..., 实体函数没有setof的要求.    
```
8\. 一个plproxy中只能出现一条connect语句, 符合预期, 否则报错.  
```
digoal=# create or replace function f_test3() returns setof int8 as $$    
  connect 'hostaddr=172.16.3.150 dbname=db0 user=digoal port=1921';      
  connect 'hostaddr=172.16.3.150 dbname=db1 user=digoal port=1921';                                  
  select count(*) from pg_class;    
$$ language plproxy strict;    
ERROR:  PL/Proxy function postgres.f_test3(0): Compile error at line 2: Only one CONNECT statement allowed    
```
9\. 不要把plproxy语言的权限赋予给普通用户, 因为开放了trust认证, 如果再开放plproxy语言的权限是非常危险的.  
正确的做法是使用超级用户创建plproxy函数, 然后把函数的执行权限赋予给普通用户.  
千万不要这样省事 :  
```
update pg_language set lanpltrusted='t' where lanname='plproxy';    
```
10\. 如果有全局唯一的序列需求, 可以将序列的步调调整一下, 每个数据节点使用不同的初始值.  
例如  
```
db0=# create sequence seq1 increment by 4 start with 0;    
CREATE SEQUENCE    
db1=# create sequence seq1 increment by 4 start with 1;    
db2=# create sequence seq1 increment by 4 start with 2;    
db3=# create sequence seq1 increment by 4 start with 3;    
```
考虑到扩容, 可以将步调调比较大, 例如1024. 那么可以容纳1024个节点.  
## 参考  
1\. http://kaiv.wordpress.com/2007/07/27/postgresql-cluster-partitioning-with-plproxy-part-i/  
2\. http://kaiv.wordpress.com/2007/09/02/postgresql-cluster-partitioning-with-plproxy-part-ii/  
3\. http://blog.163.com/digoal@126/blog/static/163877040201041111304328/  
4\. http://blog.163.com/digoal@126/blog/static/1638770402010411113114315/  
5\. http://blog.163.com/digoal@126/blog/static/163877040201192535630895/  
6\. http://www.postgresql.org/docs/9.3/static/libpq-connect.html#LIBPQ-CONNSTRING  
7\. http://git.postgresql.org/gitweb/?p=plproxy.git;a=summary  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")