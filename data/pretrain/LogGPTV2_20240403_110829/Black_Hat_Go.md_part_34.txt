if block, err = rc2.New(key[3:], 40); err != nil {
log.Fatalln(err)
}
data = &CryptoData{
block: block,
key: key[3:],
}
❿ out  max {
end = max
}
generate(start, end, work, done, &prodWg) ❺
end += step
start += step
}
log.Println("Producers started!")
log.Println("Starting consumers...")
for i := 0; i < 30; i++ { ❻
decrypt(ciphertext, work, done, &consWg) ❼
}
log.Println("Consumers started!")
log.Println("Now we wait...")
prodWg.Wait()❽
close(work)
consWg.Wait()❾
log.Println("Brute-force complete")
}
Listing 11-11: The RC2 main() function (/ch-11/rc2-brute/main.go)
Your main() function decodes your ciphertext, represented as
a hexadecimal string ❶. Next, you create several variables ❷.
First you create WaitGroup variables used for tracking both
producer and consumer goroutines. You also define several
uint64 values for tracking the minimum value in a 40-bit key
space (0x0000000000), the maximum value in the key space
(0xffffffffff), and the number of producers you intend to start,
in this case 75. You use these values to calculate a step or
range, which represents the number of keys each producer will
iterate, since your intent is to distribute these efforts uniformly
across all your producers. You also create a *CryptoData work
channel and a done signaling channel. You’ll pass these around
to your producer and consumer functions.
Since you’re doing basic integer math to calculate your
step value for the producers, there’s a chance that you’ll lose
some data if the key space size isn’t a multiple of the number
of producers you’ll spin up. To account for this—and to avoid
losing precision while converting to a floating-point number
for use in a call to math.Ceil()—you check whether the maximum
key (step * prods) is less than your maximum value for the entire
key space (0xffffffffff) ❸. If it is, a handful of values in the
key space won’t be accounted for. You simply increase your
step value to account for this shortage. You initialize two
variables, start and end, to maintain the beginning and ending
offsets you can use to break apart the key space.
The math to arrive at your offsets and step size isn’t precise
by any means, and it could cause your code to search beyond
the end of the maximum allowable key space. However, you
fix that within a for loop ❹ used to start each of the producers.
In the loop, you adjust your ending step value, end, should that
value fall beyond the maximum allowed key space value. Each
iteration of the loop calls generate() ❺, your producer function,
and passes to it the start (start) and end (end) key space offsets
for which the producer will iterate. You also pass it your work
and done channels, as well as your producer WaitGroup. After
calling the function, you shift your start and end variables to
account for the next range of key space that will be passed to a
new producer. This is how you break up your key space into
smaller, more digestible portions that the program can process
concurrently, without overlapping efforts between goroutines.
After your producers are spun up, you use a for loop to
create your workers ❻. In this case, you’re creating 30 of
them. For each iteration, you call your decrypt() function ❼,
passing to it the ciphertext, the work channel, the done
channel, and the consumer WaitGroup. This spins up your
concurrent consumers, which begin to pull and process work
as the producers create it.
Iterating through the entire key space takes time. If you
don’t handle things correctly, the main() function will assuredly
exit before you discover a key or exhaust key space. So, you
need to make sure the producers and consumers have adequate
time to either iterate the entire key space or discover the
correct key. This is where your WaitGroups come in. You call
prodWg.Wait() ❽ to block main() until the producers have
completed their tasks. Recall that the producers have
completed their tasks if they either exhaust the key space or
explicitly cancel the process via the done channel. After this
completes, you explicitly close the work channel so the
consumers won’t deadlock continually while trying to read
from it. Finally, you block main() again by calling consWg.Wait()
❾ to give adequate time for the consumers in your WaitGroup to
complete any remaining work in the work channel.
Running the Program
You’ve completed your program! If you run it, you should see
the following output:
$ go run main.go
2020/07/12 14:27:47 Starting producers...
2020/07/12 14:27:47 Producers started!
2020/07/12 14:27:47 Starting consumers...
2020/07/12 14:27:47 Consumers started!
2020/07/12 14:27:47 Now we wait...
2020/07/12 14:27:48 Card [4532651325506680] found using key [e612d0bbb6]
2020/07/12 14:27:48 Brute-force complete
The program starts the producers and consumers and then
waits for them to execute. When a card is found, the program
displays the cleartext card and the key used to decrypt that
card. Since we assume this key is the magical key for all cards,
we interrupt execution prematurely and celebrate our success
by painting a self-portrait (not shown).
Of course, depending on the key value, brute-forcing on a
home computer can take a significant amount of time—think
days or even weeks. For the preceding sample run, we
narrowed the key space to find the key more quickly.
However, completely exhausting the key space on a 2016
MacBook Pro takes approximately seven days. Not too bad for
a quick-and-dirty solution running on a laptop.
SUMMARY
Crypto is an important topic for security practitioners, even
though the learning curve can be steep. This chapter covered
symmetric and asymmetric crypto, hashing, password
handling with bcrypt, message authentication, mutual
authentication, and brute-forcing RC2. In the next chapter,
we’ll get into the nitty-gritty of attacking Microsoft Windows.
12
WINDOWS SYSTEM INTERACTION
AND ANALYSIS
There are countless ways of developing Microsoft Windows
attacks—too many to cover in this chapter. Instead of
discussing them all, we’ll introduce and investigate a few
techniques that can help you attack Windows, whether initially
or during your post-exploitation adventures.
After discussing the Microsoft API documentation and
some safety concerns, we’ll cover three topics. First, we’ll use
Go’s core syscall package to interact with various system-level
Windows APIs by performing a process injection. Second,
we’ll explore Go’s core package for the Windows Portable
Executable (PE) format and write a PE file format parser.
Third, we’ll discuss techniques for using C code with native
Go code. You’ll need to know these applied techniques in
order to build a novel Windows attack.
THE WINDOWS API’S
OPENPROCESS() FUNCTION
In order to attack Windows, you need to understand the
Windows API. Let’s explore the Windows API documentation
by examining the OpenProcess() function, used to obtain a handle
on a remote process. You can find the OpenProcess()
documentation at https://docs.microsoft.com/en-
us/windows/desktop/api/processthreadsapi/nf-
processthreadsapi-openprocess/. Figure 12-1 shows the
function’s object property details.
Figure 12-1: The Windows API object structure for OpenProcess()
In this particular instance, we can see that the object looks
very similar to a struct type in Go. However, the C++ struct
field types don’t necessarily reconcile with Go types, and
Microsoft data types don’t always match Go data types.
The Windows data type definition reference, located at
https://docs.microsoft.com/en-
us/windows/desktop/WinProg/windows-data-types/, can be
helpful when reconciling a Windows data type with Go’s
respective data type. Table 12-1 covers the type conversion
we’ll use in the process injection examples later in this
chapter.
Table 12-1: Mapping Windows Data Types to Go Data Types
Windows data Type Go data type
BOOLEAN byte
BOOL int32
BYTE byte
DWORD uint32
DWORD32 uint32
DWORD64 uint64
WORD uint16
HANDLE uintptr (unsigned integer pointer)
LPVOID uintptr
SIZE_T uintptr
LPCVOID uintptr
HMODULE uintptr
LPCSTR uintptr
LPDWORD uintptr
The Go documentation defines the uintptr data type as “an
integer type that is large enough to hold the bit pattern of any
pointer.” This is a special data type, as you’ll see when we
discuss Go’s unsafe package and type conversions later in “The
unsafe.Pointer and uintptr Types” on page 266. For now, let’s
finish walking through the Windows API documentation.
Next, you should look at an object’s parameters; the
Parameters section of the documentation provides details. For
example, the first parameter, dwDesiredAccess, provides specifics
regarding the level of access the process handle should
possess. After that, the Return Value section defines expected
values for both a successful and failed system call (Figure 12-
2).
Figure 12-2: The definition for the expected return value
We’ll take advantage of a GetLastError error message when
using the syscall package in our upcoming example code,
although this will deviate from the standard error handling
(such as if err != nil syntax) ever so slightly.
Our last section of the Windows API document,
Requirements, provides important details, as shown in Figure
12-3. The last line defines the dynamic link library (DLL),
which contains exportable functions (such as OpenProcess()) and
will be necessary when we build out our Windows DLL
module’s variable declarations. Said another way, we cannot
call the relevant Windows API function from Go without
knowing the appropriate Windows DLL module. This will
become clearer as we progress into our upcoming process
injection example.
Figure 12-3: The Requirements section defines the library required to call the API.
THE UNSAFE.POINTER AND
UINTPTR TYPES
In dealing with the Go syscall package, we’ll most certainly
need to step around Go’s type-safety protections. The reason is
that we’ll need, for example, to establish shared memory
structures and perform type conversions between Go and C.