gorithm and sends the generated public key P K
and the secret keys K1, K2 . . . Ki−1, Ki+1 . . . KN
to the adversary. The adversary does not know
Ki.
– Query: The adversary outputs a bit s′ ∈ {0, 1}.
If s′ = 1, the challenger sends the adversary Ki,
else he does nothing.
– Challenge: The adversary sends a message M
and a set S ⊆ {1, . . . , N} to the challenger. The
only restriction is if s′ = 1 then i /∈ S. The
challenger ﬂips an unbiased coin and obtains a
random β ∈ {0, 1}. It sets the ciphertext as C $←−
EncryptAugBE(S, P K, i + β, M ) and sends it to
the adversary.
– Guess: The adversary returns a guess β′ ∈ {0, 1}
of β.
The advantage of the adversary is AdvIH [i] = |P r[β′ =
β] − 1
2|.
• Message Hiding: This property requires that an ad-
versary can not break semantic security when encryp-
tion is performed on input i = N + 1. The game be-
tween the adversary and the challenger is very similar
to the Index Hiding game. The only diﬀerence being
that now the adversary is given all the secret keys. The
advantage of the adversary is the message hiding game
is AdvM H . We refer the reader to [9] for details.
123Definition 2.1. An N-user AugBE system is considered
secure if for all polynomial time adversaries AdvIH [i] for
all i ∈ {1 . . . N} and AdvM H are negligible in the security
parameter λ.
3. BACKGROUND ON BILINEAR MAPS
3.1 Bilinear Groups
Symmetric and Asymmetric Bilinear Groups of
Prime Order. Consider three multiplicative cyclic groups
G1, G2, GT of prime orders (possibly diﬀerent). Let g1 be
a generator of G1 and g2 a generator of G2. Let r be the
order of G1, the smaller of the two groups. We deﬁne an
eﬃciently computable bilinear map e : G1 × G2 → GT with
the properties: (1) e is non-degenerate: e(g1, g2) should not
evaluate to the identity element of GT . (2) The map is bi-
linear: ∀u ∈ G1, ∀v ∈ G2 and a, b ∈ Zr we should have
e(ua, vb) = e(u, v)ab. Such groups are refereed to as Asym-
metric Bilinear Groups of Prime Order. Bilinear groups in
which G1 = G2 ≡ G are called Symmetric Bilinear Groups of
Prime Order. It can be seen that for such groups the bilinear
map is symmetric since e(ga, gb) = e(g, g)ab = e(gb, ga).
Bilinear Groups of Composite Order. Bilinear groups
of composite order are similar to the ones of prime order.
The key diﬀerence is that the order of the groups G and GT
is composite. Lets say the order is n, where n = pq, p and q
are large primes depending on the security parameter. We
will use Gp and Gq to denote the order p and q subgroups
of G, respectively.
3.2 Complexity Assumptions
λ as input and generates the tuple (r, G, GT , e).
Let G be an algorithm that takes the security parameter
Decision 3-party Diﬃe Hellman. This assumption
is popular and has been used previously in a number of
schemes including the PLBE scheme [8]. A challenger gen-
erates a bilinear group G using (r, G, GT , e)
It
generates a random generator g for the group G. It chooses
$←− G(λ).
a, b, c $←− Zr.
An algorithm A, solving the Decision 3-party Diﬃe Hell-
man problem is given Z = (r, G, GT , e, g, ga, gb, gc). The
challenger ﬂips an unbiased coin and obtains a random β ∈
{0, 1}. If β = 0, it then sets T = gabc and T = R otherwise,
where R $←− G. It then sends T to A. The adversary returns
a guess β′ ∈ {0, 1} of β. The advantage of A in this game is
AdvD3DH = |P r[β = β′] − 1
2|. The Decision 3-party Diﬃe
Hellman assumption states that this advantage is negligible
in the security parameter.
Decisional Linear Assumption. This is a simple ex-
tension of the Decisional Diﬃe Hellman (DDH) Assumption
introduced in [1] for bilinear groups in which the DDH as-
sumption is actually easy. A challenger generates a bilinear
group G using (r, G, GT , e) $←− G(λ). It generates a random
generator g for the group G. It chooses a, b, c, x, y $←− Zr.
An algorithm A, solving the Decisional Linear Assump-
tion problem is given Z = (r, G, GT , e, g, ga, gb, gc, gax, gby).
The challenger ﬂips an unbiased coin and obtains a random
β ∈ {0, 1}. If β = 0, it then sets T = gc(x+y) and T = R
otherwise, where R $←− G. It then sends T to A. The ad-
versary returns a guess β′ ∈ {0, 1} of β. The advantage of
A in this game is AdvDLN = |P r[β = β′] − 1
2|. Decisional
Linear Assumption states that this advantage is negligible
in the security parameter.
External Diﬃe Hellman Assumption. The External
Diﬃe Hellman (XDH) assumption states that the Decisional
Diﬃe Hellman (DDH) assumption is hard in the group G1.
(Not necessarily hard in G2). This assumption is believed
to be true in asymmetric pairings generated using special
MNT curves [2, 20].
Subgroup Decision Assumption. This problem was
introduced by Boneh et al. [5] and states that for a bilinear
group G of composite order n = pq, any algorithm A, given
a random element g ∈ G and a random element gq ∈ Gq,
can not distinguish between a random element in G and a
random element in Gq. This assumption is for composite
order groups. We do not use this assumption in this work.
4. KEY IDEAS
We now present the intuition behind the working of [8] for
composite order bilinear groups and provide a generic con-
struction to achieve the same properties using prime order
bilinear groups. Consider a composite order bilinear group
Gn of order n, where n = pq and p, q are primes. Let us de-
note elements belonging to the p-order subgroup (called Gp)
and the q-order subgroup (called Gq) of Gn by subscripts p
and q, respectively. The BSW scheme [8] (and most other
composite order bilinear group based schemes) relies on the
fact that if gp ∈ Gp and gq ∈ Gq, then e(gp, gq) = 1. The
same eﬀect can be obtained in a prime order group by using
vector spaces. For a group G of prime order r, with gen-
erator g, consider tuples of elements (ga, gb) (analogous to
gq) and (g−b, ga) (analogous to gp) belonging to the vector
space V = G2 (analogous to Gn), where a, b are random in
Zr. Deﬁne vectors ~v1 = (a, b) and ~v2 = (−b, a). Note that
they are orthogonal vectors. The subspace Vp (analogous to
Gp) corresponds to the set of elements (ga ˜p, gb ˜p) such that
˜p ∈ Zr; and similarly subspace, Vq (analogous to Gq) corre-
sponds to the set of elements (g−b˜q, ga˜q) such that ˜q ∈ Zr. It
is easy to see that pairing an element of Vp with an element
of Vq computed3 as e(ga, g−b) · e(gb, ga) yields the identity
element (analogous to e(gp, gq) = 1).
Now we need to build on an analog of the subgroup deci-
sion assumption (SDH). SDH informally states that given an
element of G and an element of Gq, it is hard to distinguish
a random element in Gq from a random element in G. But
this assumption does not hold with Vp and Vq. Given an
element (u, v) ∈ Vq, we can construct (v−1, u) ∈ Vp. Using
these two elements, it is trivial to distinguish an element in
Vq from an element in V .
To ﬁx this problem we consider a 3-dimensional vector
space, V = G3. Consider ~v1 = (a, 0, c), ~v2 = (0, b, c)
and ~v3 = ~v1 × ~v2, where a, b, c are random elements in
Zr. Now let us deﬁne the subspace Vq by all elements
(ga˜q, gb˜q′
, gc(˜q+˜q′)) such that ˜q, ˜q′ ∈ Zr, and let the sub-
space Vp be deﬁned by elements (g−bc ˜p, g−ac ˜p, gab ˜p) such
that ˜p ∈ Zr. For this system, also pairing an element of
Vq with an element of Vp yields the identity element. This
system also has an analog of the subgroup decision assump-
tion. Given (ga, gb, gc), we want it to be hard to distinguish
a random element (ga˜q, gb˜q′
, gc(˜q+˜q′)) ∈ Vq from an element
(gx1 , gx2 , gx3 ) ∈ V , where x1, x2, x3 are random. This fol-
lows directly from the decisional linear assumption [1].
3e((gx, gy), (gx′
) · e(gy, gy′
)) is evaluated as e(gx, gx′
, gy′
).
124The main diﬀerence between the subspaces deﬁned using
composite order bilinear groups and subspaces deﬁned us-
ing prime order bilinear groups is the ﬂexibility in the way
elements from the sub-spaces can be manipulated. In the
case of composite order bilinear groups, it is easy to ran-
domize elements from the sub-space Vq; but on the other
hand, for prime order groups similar randomization is hard.
This prevents the transformation from being applicable in
general.
A direct compilation of the BSW traitor tracing scheme
with the new ideas presented earlier doesn’t work because of
the reasons mentioned in the previous paragraph. But this
can be ﬁxed by allowing the encrypter to deﬁne the sub-
spaces at the time of encryption. This was not possible in
the BSW traitor tracing scheme [8] because the construction
was dependent on the primes p, q. More generally, this trick
allows, and in fact, necessitates a late binding of the param-
eters that deﬁne the subspaces. Other schemes satisfying
this property should also be easy to simplify using our trick.
Another crucial diﬀerence between our scheme and the BSW
scheme is that our scheme does not have subspaces in the
target group. Even some of the elements in the base group
are not moved to the vector space.
5. OUR CONSTRUCTION
In this paper we present two new traitor tracing schemes
and corresponding trace & revoke systems. As already pointed
out in section 3 a PLBE scheme is suﬃcient to construct a
traitor tracing system and an AugBE scheme is suﬃcient
to construct a trace & revoke system.
In this section we
present our PLBE and AugBE improving on the previous
schemes [8,9]. The schemes in the symmetric and the asym-
metric prime order bilinear groups are fundamentally dif-
ferent.
It should be noted that all our schemes allow for
public traceability. The PLBE schemes can be obtained by
dropping certain terms from the AugBE scheme which we
describe towards the end of the section.
The number of users in the system, N , is assumed to be
equal to m2 for some m.
If the number of users is not a
perfect square, then we add some dummy users to pad N to
the next perfect square. These dummy users do not take part
in the system in any way. We arrange the users in an m× m
matrix. The user u : 1 ≤ u ≤ N in the system is identiﬁed
by the (x, y) entry of the matrix, where 1 ≤ x, y ≤ m and
u = (x − 1) · m + y.
The ciphertext generated by EncryptAugBE consists of a
ciphertext component for every row and a component for
every column. For each row x the ciphertext consists of
(Ax, Bx, ~Rx,
consists of ( ~Cy ,
~eRx) and for every column y the ciphertext
~eCy ).
Fully collusion resistant traitor tracing (or trace & revoke)
is hard because we need to garble parts of the ciphertext
making sure that it only impacts a certain subset of the
users. This is made possible by having a ciphertext term
have components along diﬀerent subspaces. For the pur-
poses of this paper, we use the notation V to represent the
space of ciphertext elements. The elements in this space can
have orthogonal components along Vq and Vp. The informa-
tion about the sub-space Vq is public while the information
for Vp is private.
An encryption to position (i, j) means that only users
(x, y) with x > i or x = i & y ≥ j can decrypt the message.
← ♥
9>>>>>>>=
>>>>>>>;
¯ ← ♣
9>>>>>>>>>>=
>>>>>>>>>>;
← ♠
|
Well formed in both Vp, Vq
Column
Well formed only in Vq
z
}|
{
j
?
Row i
-
{z
}
Figure 1: ♥ stands for “Random,”♣ stands for “Well
formed in Vp and Vq,” and ♠ stands for “Well formed
in Vq.”
An encryption to position (i, j) is obtained in the following
way. (It is further illustrated in Figure 1.)
• Column Ciphertext Components: Column cipher-
text components for columns y ≥ j are well formed in
both subspaces Vp and Vq, while for columns y  i
they are well formed in Vq and have no component in
Vp.
A user in row i will be able to decrypt if the column
ciphertext is also well formed in both Vp and Vq. How-
ever a user in rows x > i, will always be able to decrypt
because the row ciphertexts for x > i do not have any
component in Vp, and the component of column ci-
phertexts in Vp will simply cancel out with the row
ciphertexts.
In the AugBE scheme in addition to the above properties
there is a set S that speciﬁes the set of users to which en-
cryption is done. In other words only users in that set can
decrypt.
5.1 AugBE using Symmetric Bilinear Groups
We introduce some notation before we go further and de-
scribe the scheme. For a given vector ~v = (v1, . . . vi), by g~v
we mean the vector (gv1 . . . gvi ). A pairing e on two vec-
tors ~R and ~C is deﬁned by multiplication after the compo-
k=1 e(Rk, Ck),
nentwise pairing operation, i.e. e( ~R, ~C) = Qi
125where e is the pairing operation on the underlying group
elements. Given a set S of users to which encryption is to
be done let Sx = {y : (x, y) ∈ S}.
EncryptAugBE, DecryptAugBE.
The AugBE scheme consists of the algorithms: SetupAugBE,
• (P K, K(1,1), · · · K(1,m), K(2,1) · · · K(m,m)) ← SetupAugBE
(1λ, N = m2)
The SetupAugBE algorithm takes as input the security
parameter λ and the number of users N in the system.
The algorithm generates a prime order groups G with a
pairing e : G × G → GT. It outputs, g the generator of
G and let r (depends on the security parameter) denote
the size of G. It then chooses random r1, r2, r3, . . . rm,
c1, c2 . . . cm, α1, α2 . . . αm ∈ Zr. The public key P K of
the AugBE system (along with the group description)
is set to:
g, E1 = gr1 , E2 = gr2 , . . . , Em = grm ,
G1 = e(g, g)α1 , G2 = e(g, g)α2 , . . . , Gm = e(g, g)αm ,
g, H1 = gc1 , H2 = gc2 , . . . , Hm = gcm
u1, u2, . . . , um ∈ G.
The secret key of each user (x, y) is K(x,y) = {gαx ·
grxcy · uσx,y
, gσx,y , ∀i, (i 6= y), uσx,y
y
y
}.
• C ← EncryptAugBE(P K, S, (i, j), M )
This algorithm allows the tracing party to encrypt a
message to the recipients who have row value greater
than i or those who have row value equal to i and
column value greater than or equal to j and belong-
ing to the set S. The algorithm chooses random t, η,
s1, s2 . . . sm ∈ Zr. It also chooses random a, b, c ∈ Zr
and sets ~v1 = (a, 0, c), ~v2 = (0, b, c) and ~v3 = ~v1 × ~v2.
All elements g~v when ~v is a linear combination of ~v1
and ~v2 deﬁne the Vq space. These elements deﬁne the
space Vp when the vector ~v is parallel to ~v3. Choose
~w1, ~w2, . . . , ~wm , ~vc ∈ Z3
c = ~vc + vcr · ~v3 be
another vector, with vcr randomly chosen from Zr.
For each row, 1 ≤ x < i, choose random ~zx ∈ Z3
ax, bx ∈ Zr . The row cipher text components are,
r. Let ~v ′
r and
~Rx = g ~zx
Ax = gax
Tx = ( Y
k∈Sx
~eRx = gη ~zx
Bx = Gbx
x
uk)ax
For row, x = i, pick random ~vi randomly ∈ Z3
that ~vi · ~v ′