parts were copied from somewhere else. As a consequence, they can not keep
track of data ﬂows as we do.
Additionally, they deﬁne a function to inspect the time stamp of an el-
ement. It is not clearly deﬁned what the time stamp is, but it seems that
it is set to the current time whenever an element is created. It is not clear,
whether the update operation aﬀects the time stamp. The time stamp is
similar to our concept of context information. In addition to time, we also
maintain the subject name and the role in which the subject performed an
operation. This additional information enriches the expressiveness of the
rules of our model, where we can permit or deny access depending on the
subject or role of a subject that performed a previous operation.
Finally, the model in [ICAW05] does not distinguish between elements
and attributes and consequently does not exploit the diﬀerent semantics of
8.3. USAGE CONTROL
123
both types, as we do. In our model, we oﬀer a set of functions to inspect
the former values of attributes, which is required to express certain types of
policies.
Moreover, the distinction between elements and attributes allows us to
gain a higher level of eﬃciency, since we can save resources by only keeping
track of the former values of attributes, which we consider to contain the
security-relevant properties of a document.
Iwaihara et al. do not include obligations or provisions as part of their
model. Moreover, they do not present a system architecture and an imple-
mentation. They also do not discuss security mechanisms for their model.
8.3.2 “Controlling Access to Documents: A Formal
Access Control Model”
The model described in [SBO06] deﬁnes access control for structured data.
The generic document format the present is similar to XML documents,
as a document in their case is a rooted tree of elements, which can also
have attributes. Similar to XML, elements have a name and a text content,
whereas attributes have a name and a value. In similar fashion to our model,
[SBO06] also uses the role-based approach to model subjects.
Concerning the deﬁnition of the objects, there is a big diﬀerence to our
our model.
Instead of describing objects by their properties, as we do it
in our model, [SBO06] states that the owner of each object must deﬁne the
policy for each individual object manually. We regard this as a big drawback,
since the manual deﬁnition of access rights for individual objects is error-
prone and time-consuming. In contrast to this, our model oﬀers a method to
automatically derive the access right of an objects from its properties. This
saves time and reduces the chance of possible mistakes.
The basic idea of the model in [SBO06], is the concept of sticky policies.
This idea deﬁnes that when an object is copied to a new location, its policy is
also copied to the new location. This concept of sticky policies is illustrated
in Figure 8.1
The model in [SBO06] also allows to copy elements and attributes. In-
stead of using a single operation for that purpose, the copying is deﬁned by
a pair of a copy and a paste operation, where the copy operation is used
to select the source and the paste operation deﬁnes the destination and per-
forms the actual copying. As an intermediate buﬀer for the copy operation, a
so-called clipboard is used. We also the pair of copy and paste as part of our
User Interface to deﬁne the source and the destination of a copy operation,
but our model uses only one operation for that purpose and we do not need
124
CHAPTER 8. RELATED WORK
Figure 8.1: Sticky policies [SBO06]
an intermediate buﬀer.
Moreover, the model in [SBO06] only deﬁnes positive permissions, in con-
trast to our model, which also allows to specify negative rules. Having both
positive and negative rules allows to speciﬁes policies much more ﬂexible, as
exceptions from a given policy can be speciﬁed more easily.
In addition to permissions, the model in [SBO06] allows allows to specify
two types of obligations, which are log and sign. The log obligation speciﬁes
that the corresponding operation must be logged. In our model, we log every
operation in the history. The sign obligation speciﬁes that the user must
sign a given contract, e.g., an agreement how to use an object, before he can
access it. The signed contract is not enforced in a technical way and it is up
to the user to behave as he agreed to.
Furthermore, the model in [SBO06] allows to specify environmental con-
ditions, which must be satisﬁed to perform an access. These environment
conditions are similar to our conditions based on the context of an opera-
tion. In [SBO06] currently only conditions depending on the current time
are supported, whereas our model also allows to specify conditions on the
context of a previous operation, which enables a wide range of policies that
can not be speciﬁed in [SBO06]. For example, it can not be speciﬁed that in
a distributed editing process a subject in a senior role has the authority to
declare part of the editing as being ﬁnal. In our model, such policies can be
enforced.
Currently, the model speciﬁed in [SBO06] does not feature a language in
which its policies can be speciﬁed. Also there is no system architecture, no
security architecture and no implementation.
Summing up, the main diﬀerence to our work is that objects are speciﬁed
manually by the owner of an object. In contrast to this, our model allows
ControllingAccesstoDocuments:AFormalAccessControlModel353(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:8)(cid:9)(cid:10)(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:8)(cid:9)(cid:11)(cid:12)(cid:13)(cid:14)(cid:15)(cid:16)(cid:2)(cid:17)(cid:18)(cid:19)(cid:3)(cid:2)(cid:7)(cid:8)(cid:6)(cid:7)(cid:8)(cid:15)(cid:2)(cid:13)(cid:14)(cid:3)(cid:20)(cid:3)(cid:2)(cid:15)(cid:20)(cid:15)(cid:17)(cid:21)(cid:8)(cid:6)Fig.1.StickyPolicies1.1ContributionsWehavedeﬁnedaﬁne-grainedmodelofasystemforprocessingdocuments.Asnaturallanguagesandsemi-formalmodelinglanguageslikeUMLarenotsuﬃcientlyprecise,wehaveusedthespeciﬁcationlanguageZ[5]todeﬁnethestatesandoperationsofthesystem.Henceourﬁrstcontributionisaformalmodelofanunprotecteddocument-processingsystem.Oursecondcontributionisapolicylanguagethatallowsuserstoformalizeprotectionrequirementsthatwehavegatheredforbankingenvironments.Againwehavetakenaformalapproachhereanddeﬁnedthepolicylanguage’sabstractsyntaxinZanditssemantics(howaccessrequestsareevaluated)inacombi-nationof(Object-)ZandthespeciﬁcationlanguageCommunicatingSequentialProcesses(CSP)[6]calledCSP-OZ[7].Ourthirdcontributionistoprovideafoundationforcontrollingusageofdoc-uments.Usagecontrol[8]isanotionthatsubsumesbothserver-sideandclient-sideaccesscontrol.1Itisimportantinthedocumentcontextasownersneedassurancethatthepoliciesgoverningaccesstotheirdocumentsarerespected,evenwhenotherusersincorporatepartsofthesedocumentsintheirowndocu-ments.Toachievethis,weassociatepartsofeachdocumentwiththerespectivepartsofitspolicyandmaintainthisassociationoverthedocumentlife-cycle.Thisamountstoaﬁne-grainedvariantofthesticky-policiesparadigm[9,10]:whencontentiscopied(orcut)fromadocumenttotheclipboardandpastedintoadocument,thensoistherespectivepartofthepolicy(cf.Figure1).1.2OrganizationInSection2,weexplainthecontextofthisworkandwederivehigh-levelrequire-mentsfromrepresentativeusecases.InSection3,weintroduceourdocument1Client-sideaccesscontrolisalsocalledrightsmanagement.Notethatenforcementrequiresthecombinationofclassicalaccess-controlmechanismswithhardware-basedorsoftware-basedrights-managementmechanisms.8.3. USAGE CONTROL
125
to specify objects automatically by their properties, which also includes the
history of an object. This allows to specify access in a more expressive and
ﬂexible way, where policies for new objects can be automatically derived from
the properties of the objects.
126
CHAPTER 8. RELATED WORK
Chapter 9
Conclusions and Future Work
In this chapter, we conclude this thesis by summarizing its main contribu-
tions. In addition to this, we present possible options for future work.
9.1 Conclusions
In this thesis, we presented a model for history-based access control, which
allows to specify the objects of an access control by their properties. Our
model allows to deﬁne conditions based on the object’s content as well as on
it’s history. The big advantage of this approach is that the permissions for
objects can be automatically derived from their properties, which is less error-
prone and less time-consuming compared to manually deﬁne access rights for
individual objects.
There are many other models, e.g., [BF02, DCPS00, DdVPS02, GB02,
MTK03], which also allow to specify objects by their content, but our model
is much more expressive, since we also can deﬁne objects based on their
history. For example, this allows to deﬁne objects by the origin from where
they were copied, which is not possible in the other models. As another
example, we can specify Chinese-Wall policies in a way that is better suited
for real world scenarios than the original Chinese-Wall model [BN89], since
our model allows to avoid the unnecessary restrictions of the original model.
To be able to record many details of the editing process, we introduced
a set operations, which has a higher level of abstraction than the operation
in many other models. For example, we can record that text content is
composed by copying it from diﬀerent sources.
In addition to this, we use a ﬁner granularity than XML elements for
access control, since we have introduced text blocks, which are parts of the
text content that diﬀer in their history. Our model automatically keeps track
127
128
CHAPTER 9. CONCLUSIONS AND FUTURE WORK
of these text blocks, e.g., it splits a text block when a part of it is copied to
a diﬀerent location. A ﬁner granularity is always helpful, since it allows to
deﬁne the objects more precisely.
Moreover, we have both positive and negative rules, which allows in com-
bination with our conﬂict resolution strategy to specify exceptions to given
policies very eﬃciently, since every exception can be speciﬁed by an addi-
tional rule without the need to modify the existing rules.
Since we have deﬁned our model on an abstract level, we have developed a
system architecture in that supports our model in a real world scenario where
multiple users concurrently edit documents and each user can work on an
individual computer. To deﬁne such a system architecture, we have discussed
diﬀerent alternative ways to design it. Within our discussion of possible
architectures, we investigated both security aspects as well as performance
and eﬃciency concerns. Finally, we have chosen an architecture that uses
the client/server-approach.
Our model introduces some challenges when it should be applied in a
distributed scenario. Most of these challenges is caused by the fact that
the permissions of a document can depend on the content of other docu-
ments. We presented solutions for each of these challenges, which allows to
implement our model in a distributed scenario. In addition to this, we dis-
cussed the most important algorithms for implementing our model, e.g., we
described the algorithms for view creation and for rule evaluation.
Next, we deﬁned the security mechanisms for our architecture. Concern-
ing this mechanisms, we focussed on how to protect the client from unautho-
rized modiﬁcations, since the client is under the control of the user, which
results in a high risk of these modiﬁcations. We used the concepts deﬁned by
the Trusted Computing Group (TCG) [Pea02, Gro06] to detected unautho-
rized modiﬁcations of the client machine. One part of our mechanisms is the
so-called remote attestation, which is used to report the state of a platform to
a remote attester. For this purpose, we used an enhanced version [STRE06]
of the usual remote attestation protocol [SZJvD04] that avoids a common
attack, namely the spooﬁng of a trusted system state using an additional
trusted machine.
Since our security mechanisms can decrease the system’s compatibility
with additional software, we used virtualization techniques to run the ad-
ditional software in a diﬀerent compartment on the same physical machine.
A so-called hypervisor ensures that each compartment can use a diﬀerent
execution environment, e.g., a diﬀerent operating system, and that these
compartments cannot aﬀect each other.
Finally, we have implemented our system architecture in Java. We pre-
sented the details of the implementation and explained how speciﬁc concepts
9.2. FUTURE WORK
129
were realized. For example, we explained how we represent and store the
histories. The implementation includes a user interface that allows to load,
edit and save XML documents. During the editing process, the histories are
maintained as deﬁned in our model. The server components of the imple-
mentation can interpret and evaluate the access control rules deﬁned by our
model. With these components, we can illustrate the feasibility of our model.
We concluded the implementation chapter with the results of a perfor-
mance evaluation. In this evaluation, we measured the time it takes to ex-
ecute each individual extension function depending on its input arguments
and on the processed documents. We identiﬁed groups of functions, which
have a similar runtime behavior. All of these groups except of one showed
an acceptable runtime behavior. The group of functions for getting accessed
nodes was too slow to be used in real world scenarios. As another test, we
measured the time it takes to calculate a view. In our test case, it took 2
seconds to create a view of a document with 4000 nodes, whereas it took
about 7 seconds for a document containing 12000 nodes. We think that this
performance is still acceptable for being used in practice. Since our imple-
mentation was not focussed on optimizing performance, we are conﬁdent that
the performance can be increased signiﬁcantly to meet todays requirements.
9.2 Future Work
This thesis leaves room for future work. Some of this work concerns the
implementation of the prototype. First of all, the security mechanisms that
we have described in Chapter 6 can be integrated into the current implemen-
tation. Moreover, the performance of the implementation can be increased.
For example, we currently use components written in Java to maintain the
databases of our system. We expect a big increase in terms of performance
when we use a relational database system like MySQL [MyS] or PostgreSQL
[Pos] for that purpose.
Furthermore, there are other methods to create a view of a document. In
our implementation, we use the node ﬁltering approach, which ﬁrst retrieves
the entire document and then removes inaccessible nodes. A more advanced
approach is referred to as query rewriting. This approach modiﬁes the query,
which retrieves the document, in a way that only accessible nodes are re-
turned. This approach is more eﬃcient than node ﬁltering, since it avoids
to retrieve inaccessible nodes. As part of future work, we could adept the
concept of query rewriting to our implementation.
In addition to the future work on the implementation, our model can be
extended in some aspects. In this thesis, we focussed on methods for speci-
130
CHAPTER 9. CONCLUSIONS AND FUTURE WORK
fying conditions on the objects. We use roles as an abstraction to deﬁne the
subjects in our access control rules. These roles model one speciﬁc property
of subjects, namely the tasks a subject is allowed to perform. In addition
to the tasks a subject is allowed to execute, subjects can have further prop-
erties, e.g., an age, an experience level or a qualiﬁcation. These additional
properties can also be used in rules to specify the subjects for which a rule
is applicable more precisely. As a consequence, we can extend our model, to
support additional conditions on subjects.
Moreover, we do neither support provisions nor obligations [HBP05] in
our model. These concepts deﬁne conditions, which must be fulﬁlled before
access is granted or after access has been granted respectively, e.g, a condition
stating that the user must sign an agreement before he can access certain
data. We can extend our model by adding another ﬁeld to our access control
rules which speciﬁes provisions and obligations.
In this thesis, we also support context information to be used as part of a
condition in our access control rules. We can use the subject of an operation,
its current role and the time of the corresponding operation to deﬁne such a
condition. As part of future work, we could also use additional information in
our context description. For example, if sensors for the location are available,
we could include the location in our context description.
Moreover, we could use a formal notation language to deﬁne the data
structures, operations and functions of our model. This could help us to give
a more precise speciﬁcation of our model and help to study further proper-
ties of our model. With this method, we could analyze whether all extension
functions are free of side eﬀects, whether they introduce an unwanted infor-
mation ﬂow and other similar properties.
Index
Access Control, 11, 113
client-side, 113
server-side, 113
Access Control Rule, 50, 53
copy rule, 50
unary, 50
Access Matrix model, 14
dynamic, 14
static, 14
Attack, 85
Authenticity, 86
Availability, 85
Axis, 26
Buﬀer Overﬂow Attack, 90
Check-in, 65, 106
Check-out, 65, 106
Chinese Wall model, 18
CIPRESS, 116
Class
conﬂict-of-interest, 18
Client, 87
Client-Server approach, 74
Client-Side access control, 113
Compartmentalization, 126
Conﬁdentiality, 85
Conﬂict resolution strategy, 12, 39,
52, 66
Conﬂict-of-interest class, 18
Constraints, 16
cardinality, 17
Context, 38, 56
node, 26
object, 18
role, 18
Copy DB, 64
Copy graph, 49, 53
complete, 49
DAC, 12
Default semantics, 52
Deny of Service attack, 91
Dependent document, 54, 63
Digital Rights Management, 113, 116
Direct Anonymous Attestation, 118
Direct Memory Access, 89
Discretionary Access Control, 12
DMA, 89
Doc DB, 64
Document proecessor, 64
Document Type Deﬁntion, 24
DTD, 24
Element, 33
End tag, 22
Environment roles, 18
Extensible Markup Language, 21
Granularity, 12