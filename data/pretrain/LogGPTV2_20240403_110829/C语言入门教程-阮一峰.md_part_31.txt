函数没有返回值。
setbuf()
的第⼆个参数如果设置为 NULL，表示不进⾏缓存。
setbuf()
setbuf(stdout, NULL);
setvbuf(stdout, NULL, _IONBF, 0);
ungetc() #
将从缓存⾥⾯读取的上⼀个字符，重新放回缓存，下⼀个读取缓存的操作会从这个字符串开始。
ungetc()
有些操作需要了解下⼀个字符是什么，再决定应该怎么处理，这时这个函数就很有⽤。
它的原型如下。
int ungetc(int c, FILE *stream);
它的第⼀个参数是⼀个字符变量，第⼆个参数是⼀个打开的⽂件流。它的返回值是放回缓存的那个字符，
操作失败时，返回 EOF。
int ch = fgetc(fp);
if (isdigit(ch)) {
ch = fgetd(fp);
}
ungetc(ch, fp);
上⾯示例中，如果读取的字符不是数字，就将其放回缓存。
perror() #
⽤于在 stderr 的错误信息之前，添加⼀个⾃定义字符串。
perror()
void perror(const char *s);
该函数的参数就是在报错信息前添加的字符串。它没有返回值。
#include 
#include 
#include 
#include 
int main(void) {
int x = -1;
errno = 0;
float y = sqrt(x);
if (errno != 0) {
perror("sqrt error");
exit(EXIT_FAILURE);
}
}
上⾯示例中，求 的平⽅根，导致报错。头⽂件 提供宏 ，只要上⼀步操作出错，这个宏
-1 errno.h errno
就会设置成⾮零值。 ⽤来在报错信息前，加上 的⾃定义字符串。
perror() sqrt error
执⾏上⾯的程序，就会得到下⾯的报错信息。
$ gcc test.c -lm
$ ./a.out
sqrt error: Numerical argument out of domain
可变参数操作函数 #
（1）输出函数
下⾯是 的变体函数，⽤于按照给定格式，输出函数的可变参数列表（va_list）。
printf()
vprintf()：按照给定格式，输出到控制台，默认是显示器。
vfprintf()：按照给定格式，输出到⽂件。
vsprintf()：按照给定格式，输出到字符串。
vsnprintf()：按照给定格式，输出到字符串的安全版本。
它们的原型如下，基本与对应的 系列函数⼀致，除了最后⼀个参数是可变参数对象。
printf()
#include 
#include 
int vprintf(
const char * restrict format,
va_list arg
);
int vfprintf(
FILE * restrict stream,
const char * restrict format,
va_list arg
);
int vsprintf(
char * restrict s,
const char * restrict format,
va_list arg
);
int vsnprintf(
char * restrict s,
size_t n,
const char * restrict format,
va_list arg
);
它们的返回值都为输出的字符数，如果出错，返回负值。
和 的第⼀个参数可以为 NULL，⽤来查看多少个字符会被写⼊。
vsprintf() vsnprintf()
下⾯是⼀个例⼦。
int logger(char *format, ...) {
va_list va;
va_start(va, format);
int result = vprintf(format, va);
va_end(va);
printf("\n");
return result;
}
logger("x = %d and y = %.2f", x, y);
（2）输⼊函数
下⾯是 的变体函数，⽤于按照给定格式，输⼊可变参数列表 (va_list)。
scanf()
vscanf()：按照给定格式，从控制台读取（默认为键盘）。
vfscanf()：按照给定格式，从⽂件读取。
vsscanf()：按照给定格式，从字符串读取。
它们的原型如下，跟对应的 函数基本⼀致，除了最后⼀个参数是可变参数对象。
scanf()
#include 
#include 
int vscanf(
const char * restrict format,
va_list arg
);
int vfscanf(
FILE * restrict stream,
const char * restrict format,
va_list arg
);
int vsscanf(
const char * restrict s,
const char * restrict format,
va_list arg
);
它们返回成功读取的项数，遇到⽂件结尾或错误，则返回 EOF。
下⾯是⼀个例⼦。
int error_check_scanf(int expected_count, char *format, ...) {
va_list va;
va_start(va, format);
int count = vscanf(format, va);
va_end(va);
assert(count == expected_count);
return count;
}
error_check_scanf(3, "%d, %d/%f", &a, &b, &c);
全⽂完
本⽂由 简悦 SimpRead 转码，⽤以提升阅读体验，原⽂地址
语⾔教程 ⽹道
string.h - C -
⽹道（WangDoc.com），互联⽹⽂档计划
“
⽹道（WangDoc.com），互联⽹⽂档计划
主要定义了字符串处理函数和内存操作函数。
string.h
字符串处理函数 #
以下字符串处理函数，详⻅《字符串》⼀章。
strcpy()：复制字符串。
strncpy()：复制字符串，有⻓度限制。
strcat()：连接两个字符串。
strncat()：连接两个字符串，有⻓度限制。
strcmp()：⽐较两个字符串。
strncmp()：⽐较两个字符串，有⻓度限制。
strlen()：返回字符串的字节数。
strchr()，strrchr() #
和 都⽤于在字符串中查找指定字符。不同之处是， 从字符串开头开始查
strchr() strrchr() strchr()
找， 从字符串结尾开始查找，函数名⾥⾯多出来的那个 表示 reverse（反向）。
strrchr() r
char* strchr(char* str, int c);
char* strrchr(char *str, int c);
它们都接受两个参数，第⼀个参数是字符串指针，第⼆个参数是所要查找的字符。
⼀旦找到该字符，它们就会停⽌查找，并返回指向该字符的指针。如果没有找到，则返回 NULL。
下⾯是⼀个例⼦。
char *str = "Hello, world!";
char *p;
p = strchr(str, ',');
p = strrchr(str, 'o');
strspn()，strcspn() #
⽤来查找属于指定字符集的字符串⻓度， 正好相反，⽤来查找不属于指定字符集的字
strspn() strcspn()
符串⻓度。
size_t strspn(char* str, const char* accept);
size_t strcspn(char *str, const char *reject);
这两个函数接受两个参数，第⼀个参数是源字符串，第⼆个参数是由指定字符组成的字符串。
从第⼀个参数的开头开始查找，⼀旦发现第⼀个不属于指定字符集范围的字符，就停⽌查找，返
strspn()
回到⽬前为⽌的字符串⻓度。如果始终没有不在指定字符集的字符，则返回第⼀个参数字符串的⻓度。
则是⼀旦发现第⼀个属于指定字符集范围的字符，就停⽌查找，返回到⽬前为⽌的字符串⻓
strcspn()
度。如果始终没有发现指定字符集的字符，则返回第⼀个参数字符串的⻓度。
char str[] = "hello world";
int n;
n = strspn(str1, "aeiou");
printf("%d\n", n);
n = strcspn(str1, "aeiou");
printf("%d\n", n);
上⾯示例中，第⼀个 等于 0，因为 0 号位置的字符 就不属于指定字符集 ，可以理解为开头有
n h aeiou
0 个字符属于指定字符集。第⼆个 等于 1，因为 1 号位置的字符 属于指定字符集 ，可以理解
n e aeiou
为开头有 1 个字符不属于指定字符集。
strpbrk() #
在字符串中搜索指定字符集的任⼀个字符。
strpbrk()
char* strpbrk(const char* s1, const char* s2);
它接受两个参数，第⼀个参数是源字符串，第⼆个参数是由指定字符组成的字符串。
它返回⼀个指向第⼀个匹配字符的指针，如果未找到匹配字符，则返回 NULL。
char* s1 = "Hello, world!";
char* s2 = "dow!";
char* p = strpbrk(s1, s2);
printf("%s\n", p);
上⾯示例中，指定字符集是 “dow!”，那么 ⾥⾯第⼀个匹配字符是 “Hello” 的“o”，所以指针 指向这
s1 p
个字符。输出的话，就会输出从这个字符直到字符串末尾的 “o, world!”。
strstr() #
在⼀个字符串⾥⾯，查找另⼀个字符串。
strstr()
char *strstr(
const char* str,
const char* substr
);
它接受两个参数，第⼀个参数是源字符串，第⼆个参数是所要查找的⼦字符串。
如果匹配成功，就返回⼀个指针，指向源字符串⾥⾯的⼦字符串。如果匹配失败，就返回 NULL，表示⽆
法找到⼦字符串。
char* str = "The quick brown fox jumped over the lazy dogs.";
char* p = strstr(str, "lazy");
printf("%s\n", p == NULL ? "null": p);
上⾯示例中， ⽤来在源字符串 ⾥⾯，查找⼦字符串 。从返回的指针到字符串结尾，就
strstr() str lazy
是 “lazy dogs.”。
strtok() #
⽤来将⼀个字符串按照指定的分隔符（delimiter），分解成⼀系列词元（tokens）。
strtok()
char* strtok(char* str, const char* delim);
它接受两个参数，第⼀个参数是待拆分的字符串，第⼆个参数是指定的分隔符。
它返回⼀个指针，指向分解出来的第⼀个词元，并将词元结束之处的分隔符替换成字符串结尾标志 。
\0
如果没有待分解的词元，它返回 NULL。
如果要遍历所有词元，就必须循环调⽤，参考下⾯的例⼦。
的第⼀个参数如果是 NULL，则表示从上⼀次 分解结束的位置，继续往下分解。
strtok() strtok()
#include 
#include 
int main(void) {
char string[] = "This is a sentence with 7 tokens";
char* tokenPtr = strtok(string, " ");
while (tokenPtr != NULL) {
printf("%s\n", tokenPtr);
tokenPtr = strtok(NULL, " ");
}
}
上⾯示例将源字符串按照空格，分解词元。它的输出结果如下。
This
is
a
sentence
with
7
tokens
注意， 会修改原始字符串，将所有分隔符都替换成字符串结尾符号 。因此，最好⽣成⼀个原
strtok() \0
始字符串的拷⻉，然后再对这个拷⻉执⾏ 。
strtok()
strcoll() #
⽤于⽐较两个启⽤了本地化设置的字符串，⽤法基本与 相同。
strcoll() strcmp()
int strcoll(const char *s1, const char *s2);
请看下⾯的示例。
setlocale(LC_ALL, "");
printf("%d\n", strcmp("é", "f"));
printf("%d\n", strcoll("é", "f"));
上⾯示例⽐较带重⾳符号的 与 ， 会返回 ⼤于 ，⽽ 就会正确识别 排在
é f strcmp() é f strcoll() é
前⾯，所以⼩于 。注意，在⽐较之前，需要使⽤ ，启⽤本地化设置。