### Fuzzer with Slow Executions but Finer-Grained Tracking

A fuzzer that operates slowly but provides finer-grained tracking may, over time, have a higher likelihood of exploring more states. 

### Data Race Checking Cost

Another limiting factor for KRACE is the time required to analyze execution logs for data race detection, which is dependent on the length of the execution trace. This trend is illustrated in Figure 13. The analysis time ranges from 4 to 7 minutes (0 to 30 syscalls per seed) for btrfs and 2 to 6 minutes for ext4. This time cost is not feasible for online checking, even after optimization, but can be tolerated for offline checking. Specifically, KRACE schedules a data race check only when a new seed is discovered. This strategy is particularly effective when fuzzing saturates, as the primary bottleneck then shifts to finding new execution states rather than analyzing the trace. Based on our experience, running four checker processes alongside 24 fuzzing VM instances is sufficient to keep up with the progress within 96 hours for both btrfs and ext4.

### Component Evaluations

#### Coverage Effectiveness

Although the two coverage metrics (branch coverage and alias coverage) represent different aspects of program execution, we are interested in whether tracking explorations in the concurrency dimension can help in discovering new code paths. As shown in Figure 12, the evaluation of KRACE's coverage growth when fuzzing the ext4 file system for a week (168 hours) with various settings indicates that increased thread interleavings lead to more alias pairs. This explains why alias coverage saturates faster in ext4, which is less concurrent.

#### Growth Synchronization

Generally, the two coverage metrics grow in synchronization. It is expected that progress in branch coverage will also yield new alias coverage, as new code paths often involve new memory access instructions and thus new alias pairs. However, the more significant direction is when branch coverage saturates but alias coverage continues to grow, such as starting from hour 75 in the btrfs case or hour 25 in the ext4 case. This means that KRACE continues to find new execution states (thread interleavings) that would otherwise be missed if only branch coverage were tracked.

#### Instrumentation Overhead

KRACE's code instrumentation is substantial and introduces significant overhead in execution. To illustrate this, we present aggregated statistics on the execution time for seeds with varying numbers of syscalls. For comparison, we also ran these seeds on a bare-metal kernel without KRACE instrumentation. The results, shown in Figure 13, indicate that even in the zero-syscall case (loading, mounting, unmounting, and unloading), KRACE incurs 47.6% and 34.3% overhead for btrfs and ext4, respectively. The overhead increases with the number of syscalls executed.

### Delay Injection Effectiveness

To test the impact of delay injection on exploration in the concurrency dimension, we disabled it in a fuzzing experiment. The results, shown in Figures 11 and 12, indicate that without delay injection, KRACE found 28.7% and 12.3% less alias coverage in btrfs and ext4, respectively. This demonstrates that delay injection is crucial for finding more alias coverage, especially when branch coverage saturates.

### Seed Merging Effectiveness

To evaluate the importance of reusing seeds in exploration, we disabled seed merging in another fuzzing experiment. With seed merging disabled, KRACE found 37.7% and 14.2% less alias coverage in btrfs and ext4, respectively. This experiment highlights the importance of reusing seeds in quickly expanding coverage and preserving the semantics among syscalls to find more alias coverage.

### Components in the Data Race Checker

To demonstrate the importance of both happens-before and lockset analysis in the data race checker, we conducted a simple fuzzing run: loading the btrfs module, mounting an empty image, executing two syscalls across three threads, unmounting the image, and unloading the btrfs module. The filtering effects of each component in the data race checker are as follows:
- Initial data race candidates: 35,658
- After lockset analysis on pessimistic locks: 13,347
- After lockset analysis on optimistic locks: 8,903
- After tracking fork-style happen-before relation: 6,275
- After tracking join-style happen-before relation: 3,509
- After handling publisher-subscriber model: 103
- After handling ad-hoc schemes: 7 (all benign races)

### Comparison with Related Fuzzers

#### Execution Speed vs. Coverage

In terms of efficiency, KRACE is not comparable to other OS and file system fuzzers, as one execution takes at least seven seconds in KRACE, while it can be as low as 10 milliseconds for libOS-based fuzzers [5, 6] or never-refreshing VM-based fuzzers like Syzkaller. However, the effectiveness of a fuzzer is not solely determined by its speed. A more important metric is the coverage size, especially when saturated. If the saturated coverage is low, fast execution only implies that the coverage will converge quickly and stall afterward.

On the metric of saturated coverage, KRACE outperforms Syzkaller for both btrfs and ext4 by 12.3% and 5.5%, respectively, as shown in Figures 11 and 12. Even without alias coverage feedback, KRACE's branch coverage still outperforms Syzkaller, demonstrating the effectiveness of KRACEâ€™s seed evolution strategies, particularly the merging strategy for multi-threaded seeds, which is currently unavailable in Syzkaller. In fact, KRACE can catch up to Syzkaller's branch coverage progress within 30 hours for btrfs and eight hours for ext4.

#### Data Race Detection

Razzer [24] reports four data races in file systems, and we found patches for two of them, both in the VFS layer. To verify that KRACE can detect these cases, we manually reverted the patches in the kernel and confirmed that both cases were found. We attempted to do the same for SKI [7], but the data races found by SKI are too old (in 3.13 kernels) and locating and reverting the patches is challenging.

### Conclusion and Future Work

This paper presents KRACE, an end-to-end fuzzing framework that incorporates concurrency aspects into coverage-guided file system fuzzing. KRACE achieves this through three key constructs: 1) the alias coverage metric for tracking exploration progress in the concurrency dimension, 2) the algorithm for evolving and merging multi-threaded syscall sequences, and 3) a comprehensive lockset and happens-before modeling for kernel synchronization primitives. KRACE has uncovered 23 new data races so far and will continue to run for more reports.

Looking forward, we plan to extend KRACE in at least three directions: 1) data race detection in other kernel components, 2) semantic checking for more types of concurrency bugs, and 3) fuzzing distributed file systems that involve not only thread interleavings but also network event ordering, requiring new coverage metrics to capture these aspects.

### Acknowledgment

We thank the anonymous reviewers and our shepherd, Yan Shoshitaishvili, for their insightful feedback. This research was supported, in part, by NSF under awards CNS-1563848, CNS-1704701, CRI-1629851, and CNS-1749711; ONR under grants N00014-18-1-2662, N00014-15-1-2162, and N00014-17-1-2895; DARPA TC (No. DARPA FA8650-15-C-7556); ETRI IITP/KEIT[B0101-17-0644]; and gifts from Facebook, Mozilla, Intel, VMware, and Google.