# File 类与 Dir 类
---
- https://www.kancloud.cn/imxieke/ruby-base/107306
---
# File 类
File 类中实现了操作文件系统的方法。
**变更文件名**
- `File.rename(before, after)`
    我们可以用 `File.rename` 方法变更文件名。
    ```ruby
    File.rename("before.txt", "after.txt")
    ```
    还可以将文件移动到已存在的目录下，目录不存在则程序会产生错误。
    ```ruby
    File.rename("data.txt", "backup/data.txt")
    ```
    注 `File.rename` 方法无法跨文件系统或者驱动器移动文件。
    如果文件不存在，或者没有适当的文件操作权限等，则文件操作失败，程序抛出异常。
    执行示例
    ```ruby
    > irb --simple-prompt
    >> File.open("/no/such/file")
    Errno::ENOENT: No such file or directory - /no/such/file
        from (irb):1:in `initialize'
        from (irb):1:in `open'
        from (irb):1
        from /usr/bin/irb:12:in `'
    ```
**复制文件**
只用一个 Ruby 预定义的方法是无法复制文件的。这时，我们可以利用 `File.open` 方法与 `write` 方法的组合来实现文件复制。
```ruby
def copy(from, to)
  File.open(from) do |input|
    File.open(to, "w") do |output|
      output.write(input.read)
    end
  end
end
```
不过，由于文件复制是常用的操作，如果每次使用时都需要自己重新定义一次的话就非常麻烦。因此，我们可以通过引用 `fileutils` 库，使用其中的 `FileUtils.cp`（文件拷贝）、`FileUtils.mv`（文件移动）等方法来操作文件。
```ruby
require "fileutils"
FileUtils.cp("data.txt", "backup/data.txt")
FileUtils.mv("data.txt", "backup/data.txt")
```
`File.rename` 不能实现的跨文件系统、驱动器的文件移动，用 `FileUtils.mv` 方法则可以轻松实现。
**删除文件**
```ruby
File.delete(file)
File.unlink(file)
```
我们可以使用 `File.delete` 方法或 `File.unlink` 方法删除文件。
```ruby
File.delete("foo")
```
# 目录的操作
`Dir` 类中实现了目录相关的操作方法。在详细说明前，我们先来复习一下有关目录的一些基础知识。
目录中可以存放多个文件。除了文件之外，目录中还可以存放其他目录，其他目录中又可以再存放目录……如此无限循环。通过将多个目录进行排列、嵌套，就可以轻松地管理大量的文件。
Windows 的资源管理器的左侧就是可视化的目录层次结构（树形结构）。用目录名连接 / 的方法即可指定目录中的文件。由于我们可以通过目录名指定文件的位置，因此表示文件位置的目录名就称为路径（path）或路径名。另外，我们把目录树的起点目录称为根目录（root directory），根目录只用 / 表示。
**关于 Windows 的路径名**
在 Windows 的命令行中，目录分隔符用的是 \。由于使用 \ 后不仅会使字符串难以读懂，而且也不能直接在 Unix 中执行同一个程序，因此还是建议大家尽量使用 /。但有一点请大家注意，像 WIN32OLE 这样使用 Windows 特有的功能时，使用 / 后可能会使程序变得无法执行。
在 Windows 中，驱动器是目录的上层文件管理单位。 一般用 1 个英文字母（盘符）表示与之相对应的驱动器，如 A: 表示软盘，C:、D:……表示硬盘。这种情况下，请读者把各驱动器当成独立的根目录来看待。例如，很明显地 C:/ 与 D:/ 表示的是不同的驱动器，但如果只写 / 的话，程序执行位置的不同，其表示的驱动器也不同，继而所表示的目录也不同。
- `Dir.pwd`
- `Dir.chdir(dir)`
    程序可以获取运行时所在的目录信息，即当前目录（current directory）。使用 `Dir.pwd` 方法获取当前目录，变更当前目录使用 `Dir.chdir` 方法。我们可以对 `Dir.chdir` 方法的参数 dir 指定相对与当前目录的相对路径，也可以指定相对于根目录的绝对路径。
    ```ruby
    p Dir.pwd                  #=> "/usr/local/lib"
    Dir.chdir("ruby/2.0.0")    #=> 根据相对路径移动
    p Dir.pwd                  #=> "/usr/local/lib/ruby/2.0.0"
    Dir.chdir("/etc")          #=> 根据绝对路径移动
    p Dir.pwd                  #=> "/etc"
    ```
    当前目录下的文件，我们可以通过指定文件名直接打开，但如果变更了当前目录，则还需要指定目录名。
    ```ruby
    p Dir.pwd            #=> "/usr/local/lib/ruby/2.0.0"
    io = File.open("find.rb")
                        #=> 打开"/usr/local/lib/ruby/2.0.0/find.rb"
    io.close
    Dir.chdir("../..")   # 移动到上两层的目录中
    p Dir.pwd            #=> "/usr/local/lib"
    io = File.open("ruby/2.0.0/find.rb")
                        #=> 打开"/usr/local/lib/ruby/2.0.0/find.rb"
    io.close
    ```
**目录内容的读取**
像介绍文件的时候一样，我们先来了解一下如何读取已存在的目录。读取目录内容的方法与读取文件的方法基本上是一样的。
- `Dir.open(path)`
- `Dir.close`
    与 `File` 类一样，`Dir` 类也有 `open` 方法与 `close` 方法。
    我们先试试读取 `/usr/bin` 目录。
    ```ruby
    dir = Dir.open("/usr/bin")
    while name = dir.read
    p name
    end
    dir.close
    ```
    我们也可以像下面那样用 `Dir#each` 方法替换 `while` 语句部分。
    ```ruby
    dir = Dir.open("/usr/bin")
    dir.each do |name|
    p name
    end
    dir.close
    ```
    和 `File.open` 同样，对 `Dir.open` 使用块后也可以省略 `close` 方法的调用。这时程序会将生成的 `Dir` 对象传给块变量。
    ```ruby
    Dir.open("/usr/bin") do |dir|
    dir.each do |name|
        p name
    end
    end
    ```
    程序会输出以下内容。
    ```
    "."
    ".."
    "gnomevfs-copy"
    "updmap"
    "signver"
    "bluetooth-sendto"
    ┊
    ```
- `dir.read`
    与 `File` 类一样，`Dir` 类也有 `read` 方法。
    执行 `Dir#read` 后，程序会遍历读取最先打开的目录下的内容。这里读取的内容可分为以下 4 类：
    - 表示当前目录的 .
    - 表示上级目录的 ..
    - 其他目录名
    - 文件名
    请注意 `/usr/bin` 与 `/usr/bin/.` 表示同一个目录。
    程序会操作指定目录下的所有路径。命令行参数 `ARGV[0]` 的路径为目录时，会对该目录下的文件进行递归处理，除此以外（文件）的情况下则调用 `process_file` 方法。`traverse` 方法会输出指定目录下的所有文件名，执行结果只显示在控制台中。
    注释中带 ※ 的代码表示忽略当前目录和上级目录，不这么做的话，就会陷入无限循环中，不断地重复处理同一个目录。
    ```ruby
    def traverse(path)
    if File.directory?(path)  # 如果是目录
        dir = Dir.open(path)
        while name = dir.read
        next if name == "."   # ※
        next if name == ".."  # ※
        traverse(path + "/" + name)
        end
        dir.close
    else
        process_file(path)      # 处理文件
    end
    end
    def process_file(path)
    puts path                 # 输出结果
    end
    traverse(ARGV[0])
    ```
- `Dir.glob`
    使用 `Dir.glob` 方法后，就可以像 shell 那样使用 `*` 或者 `?` 等通配符（wildcard character）来取得文件名。`Dir.glob` 方法会将匹配到的文件名（目录名）以数组的形式返回。
    下面我们列举一些常用的匹配例子。
    获取当前目录中所有的文件名。（无法获取 Unix 中以 "." 开始的隐藏文件名）
    ```ruby
    Dir.glob("*")
    ```
    获取当前目录中所有的隐藏文件名
    ```ruby
    Dir.glob(".*")
    ```
    获取当前目录中扩展名为 .html 或者 .htm 的文件名。可通过数组指定多个模式。
    ```ruby
    Dir.glob(["*.html", "*.htm"])
    ```
    模式中若没有空白，则用 %w(...) 生成字符串数组会使程序更加易懂。
    ```ruby
    Dir.glob(%w(*.html *.htm))
    ```
    获取子目录下扩展名为 .html 或者 .htm 的文件名。
    ```ruby
    Dir.glob(["*/*.html", "*/*.htm"])
    ```
    获取文件名为 foo.c、foo.h、foo.o 的文件。
    ```ruby
    Dir.glob("foo.[cho]")
    ```
    获取当前目录及其子目录中所有的文件名，递归查找目录。
    ```ruby
    Dir.glob("**/*")
    ```
    获取目录 foo 及其子目录中所有扩展名为 .html 的文件名，递归查找目录。
    ```ruby
    Dir.glob("foo/**/*.html")
    ```
    可以像下面那样用 `Dir.glob` 方法改写 traverse 方法。
    ```ruby
    def traverse(path)
      Dir.glob(["#{path}/**/*", "#{path}/**/.*"]).each do |name|
        unless File.directory?(name)
          process_file(name)
        end
      end
    end
    ```
**目录的创建与删除**
- `Dir.mkdir(path)`
    创建新目录用 Dir.mkdir 方法。
    ```ruby
    Dir.mkdir("temp")
    ```
- `Dir.rmdir(path)`
    删除目录用 `Dir.rmdir` 方法。要删除的目录必须为空目录。
    ```ruby
    Dir.rmdir("temp")
    ```
**文件与目录的属性**
文件与目录都有所有者、最后更新时间等属性。接下来我们就来看看如何引用和更改这些属性。
- `File.stat(path)`
    通过 `File.stat` 方法，我们可以获取文件、目录的属性。`File.stat` 方法返回的是 `File::Stat` 类的实例。
    方法	| 返回值的含义
    - | -
    dev	| 文件系统的编号
    ino	| i-node 编号
    mode	| 文件的属性
    nlink	| 链接数
    uid	| 文件所有者的用户 ID