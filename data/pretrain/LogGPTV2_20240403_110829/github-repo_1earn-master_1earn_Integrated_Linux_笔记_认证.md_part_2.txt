- *auth* :  用来对用户的身份进行识别.如:提示用户输入密码,或判断用户是否为 root 等.
- *account* : 对帐号的各项属性进行检查.如:是否允许登录,是否达到最大用户数,或是 root 用户是否允许在这个终端登录等.
- *session* : 这个模块用来定义用户登录前的,及用户退出后所要进行的操作.如:登录连接信息,用户数据的打开与关闭,挂载文件系统等.
- *password* : 使用用户信息来更新.如:修改用户密码.
**PAM 的控制标记**
PAM 使用控制标记来处理和判断各个模块的返回值
- *required* : 表示即使某个模块对用户的验证失败，也要等所有的模块都执行完毕后,PAM 才返回错误信息。这样做是为了不让用户知道被哪个模块拒绝。如果对用户验证成功，所有的模块都会返回成功信息。
- *requisite* : 与 required 相似,但是如果这个模块返回失败,则立刻向应用程序返回失败,表示此类型失败.不再进行同类型后面的操作.
- *sufficient* : 表示如果一个用户通过这个模块的验证，PAM 结构就立刻返回验证成功信息（即使前面有模块 fail 了，也会把 fail 结果忽略掉），把控制权交回应用程序。后面的层叠模块即使使用 requisite 或者 required 控制标志，也不再执行。如果验证失败，sufficient 的作用和 optional 相同
- *optional* : 表示即使本行指定的模块验证失败，也允许用户接受应用程序提供的服务，一般返回 PAM_IGNORE (忽略).
**模块路径**
模块路径.即要调用模块的位置. 如果是 64 位系统，一般保存在 `/lib64/security`,如: pam_unix.so
同一个模块,可以出现在不同的类型中.它在不同的类型中所执行的操作都不相同.这是由于每个模块
针对不同的模块类型,编制了不同的执行函数.
**模块参数**
模块参数,即传递给模块的参数.参数可以有多个,之间用空格分隔开,如:
```
password   required   pam_unix.so nullok obscure min=4 max=8 md5
```
**常用的 PAM 模块介绍**
pam_unix.so
- auth 提示用户输入密码,并与 `/etc/shadow` 文件相比对.匹配返回 0
- account 检查用户的账号信息(包括是否过期等).帐号可用时,返回 0.
- password 修改用户的密码. 将用户输入的密码,作为用户的新密码更新 shadow 文件
pam_shells.so
- 如果用户想登录系统，那么它的 shell 必须是在 `/etc/shells` 文件中之一的 shell
pam_deny.so
- 该模块可用于拒绝访问
pam_permit.so
- 模块任何时候都返回成功.
pam_securetty.so
- auth 如果用户要以 root 登录时,则登录的 tty 必须在 `/etc/securetty` 之中.
pam_listfile.so
- 访问应用程的控制开关
pam_cracklib.so
- password 这个模块可以插入到一个程序的密码栈中,用于检查密码的强度.
pam_limits.so
- session 定义使用系统资源的上限，root 用户也会受此限制，可以通过 `/etc/security/limits.conf` 或 `/etc/security/limits.d/*.conf` 来设定
---
## sudo
sudo 命令用来以其他身份来执行命令，预设的身份为 root。在 `/etc/sudoers` 中设置了可执行 sudo 指令的用户。若其未经授权的用户企图使用 sudo，则会发出警告的邮件给管理员。用户使用 sudo 时，必须先输入密码，之后有5分钟的有效期限，超过期限则必须重新输入密码。
```bash
sudo -v # 查看 sudo 信息
sudo -l # 查看当前权限
```
**执行原理**
普通用户执行命令 -> 检查 `/var/db/sudo/` 目录下是否有用户时间戳 -> 检查 `/etc/sudoers` 配置文件，用户是否有 sudo 权限 -> 执行 sudo 命令并反回结果 -> 退出 sudo 返回普通用户 shell 环境。
**配置 sudo**
配置 sudo 必须通过编辑 `/etc/sudoers` 文件，而且只有超级用户才可以修改它，还必须使用 visudo 编辑。之所以使用 visudo 有两个原因，一是它能够防止两个用户同时修改它；二是它也能进行有限的语法检查。所以，即使只有你一个超级用户，你也最好用 visudo 来检查一下语法。
visudo 默认的是在 vi 里打开配置文件，用 vi 来修改文件。我们可以在编译时修改这个默认项。visudo 不会擅自保存带有语法错误的配置文件，它会提示你出现的问题，并询问该如何处理，就像：
```
>>> sudoers file: syntax error, line 22  注: 内核为2.6.32以后 syslog 被命名为 rsyslog，所以配置文件名称也不一样
在 `syslog.conf` 最后面加一行（必须用 tab 分割开）并保存：
```diff
++ local2.debug                    /var/log/sudo
```
重启日志守候进程
```bash
ps aux grep syslogd
```
把得到的 syslogd 进程的 PID（输出的第二列是 PID）填入下面：
```bash
kill -HUP PID
```
这样，sudo 就可以写日志了
不过，有一个小小的“缺陷”，sudo 记录日志并不是很忠实：
```bash
cat /etc/shadow > /dev/null
cat /var/log/sudo...Jul 28 23:10:24 localhost sudo:   foobar : TTY=pts/1 ;
PWD=/home/foobar ; USER=root ; COMMAND=/bin/cat /etc/shadow
```
重定向没有被记录在案！为什么？因为在命令运行之前，shell 把重定向的工作做完了，sudo 根本就没看到重定向。这也有个好处，下面的手段不会得逞：
```
[foobar@localhost ~]$ sudo ls /root > /etc/shadowbash: /etc/shadow: 权限不够
```
sudo 有自己的方式来保护安全。以 root 的身份执行 sudo -V，查看一下 sudo 的设置。因为考虑到安全问题，一部分环境变量并没有传递给 sudo 后面的命令，或者被检查后再传递的，比如：PATH，HOME，SHELL等。
> 注: 执行sudo的时候必须要有一个tty去运行sudo
---
## Capabilities
从前，要使被普通用户执行的某个程序有特殊权限，一般我们会给这个程序设置 suid，于是普通用户执行该程序时就会以 root 的身份来执行。比如，`/usr/bin/passwd` 这个可执行文件就带有 suid，普通用户执行它时会以 root 身份执行，所以 passwd 才能读取并修改 `/etc/shadow` 文件。
可以看到，使用 suid 有一个弊端，那就是以 root 身份执行的程序有了所有特权，这会带来安全风险。Kernel 从 2.2 版本开始，提供了 Capabilities 功能，它把特权划分成不同单元，可以只授权程序所需的权限，而非所有特权。
Capabilities 的主要思想在于分割 root 用户的特权，即将 root 的特权分割成不同的能力，每种能力代表一定的特权操作。例如：能力 CAP_SYS_MODULE 表示用户能够加载(或卸载)内核模块的特权操作，而 CAP_SETUID 表示用户能够修改进程用户身份的特权操作。在 Capbilities 中系统将根据进程拥有的能力来进行特权操作的访问控制。
举个例子 : 安装 Wireshark 的时候，有一步是给 dumpcap 读网卡的权限，使得普通用户也可以使用 Wireshark 进行抓包。
```bash
setcap 'CAP_NET_RAW+eip CAP_NET_ADMIN+eip' /usr/sbin/dumpcap
```
在 RHEL6 中，普通用户能执行 ping 命令是因为 `/bin/ping` 设置了 suid,将 `/bin/ping` 的 suid 去除，普通用户则无法执行 ping.
```bash
chmod 755 /bin/ping
ping www.baidu.com
```
在 root 用户下，用 setcap 命令给 `/bin/ping` 这个可执行文件加上 “cap_net_admin,cap_net_raw+ep” 权限，普通用户即可使用 ping.
```bash
setcap 'cap_net_admin,cap_net_raw+ep' /bin/ping
getcap  /bin/ping
ping www.baidu.com
```
setcap 一般用于二进制可执行文件。setcap 用于脚本文件时无效（比如以 `#!/bin/python` 开头的脚本文件）
在 Linux 中的 Capabilities 是通过 extended attributes 中的 security 命名空间实现的。主流的 Linux 文件系统都支持 Extended attributes，包括 Ext2, Ext3, Ext4, Btrfs, JFS, XFS 和 Reiserfs.
```bash
getfattr -d -m "security\\." /bin/ping
```
在 Capilities 中，只有进程和可执行文件才具有能力，每个进程拥有三组能力集，分别称为 cap_effective, cap_inheritable, cap_permitted(分别简记为: pE,pI,pP)，其中 cap_permitted 表示进程所拥有的最大能力集；cap_effective 表示进程当前可用的能力集，可以看做是 cap_permitted 的一个子集；而 cap_inheitable 则表示进程可以传递给其子进程的能力集。系统根据进程的 cap_effective 能力集进行访问控制，cap_effective 为 cap_permitted 的子集，进程可以通过取消 cap_effective 中的某些能力来放弃进程的一些特权。可执行文件也拥有三组能力集，对应于进程的三组能力集，分别称为 cap_effective, cap_allowed 和 cap_forced（分别简记为 fE,fI,fP），其中，cap_allowed 表示程序运行时可从原进程的 cap_inheritable 中集成的能力集，cap_forced 表示运行文件时必须拥有才能完成其服务的能力集；而 cap_effective 则表示文件开始运行时可以使用的能力。
---
## Source & Reference
* [系统加固之Linux安全加固](https://mp.weixin.qq.com/s/cj2IpePACewH2wqXFgKTDw)
* [linux中pam模块](https://blog.51cto.com/essun/1391133)
* [sudo命令](https://man.linuxde.net/sudo)
* [对 Capabilities (libcap, getcap, setcap) 的基本了解](https://feichashao.com/capabilities_basic/)