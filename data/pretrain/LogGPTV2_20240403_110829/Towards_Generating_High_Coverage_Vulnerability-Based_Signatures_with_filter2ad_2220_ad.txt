last four) are also selected because they have been analyzed in previous work, and this
allows us to compare our system’s results to previous ones.
5.1 Constraint Extractor Results
In this section we evaluate the effectiveness of the constraint extractor, in particular of
the ﬁeld condition generalizer, at removing the parsing conditions from the protocol-
level path-predicate. For simplicity, we only show the results for the protocol-level path-
predicate produced by the ﬁeld condition generator from the execution trace generated
by the original exploit. Note that, during exploration this process is repeated once per
newly generated input. Table 2 summarizes the results. The Original column represents
the number of input-dependent conditions in the protocol-level path-predicate and is
used as the base for comparison. The Non-parsing conditions column shows the number
of remaining conditions after removing the parsing conditions.
The removal of the parsing conditions is very successful in all experiments. Over-
all, in the four vulnerable programs that include variable-length strings (i.e., excluding
Gdi-wmf and DCOM-RPC), the parsing conditions account for 92.4% to 99.8% of all
conditions. For formats that include arrays, such as DCOM RPC, the number of pars-
ing conditions is much smaller but it is important to remove such conditions because
otherwise they constrain the array to have the same number of elements as in the ex-
ploit message. By removing the parsing conditions, each ﬁeld constraint chain repre-
sents many program execution paths produced by modifying the format of the exploit
message (e.g., extending variable-length ﬁelds or reordering ﬁelds). This dramatically
decreases the exploration space making the constraint-guided exploration feasible.
5.2 Exploration Results
Table 3 shows the results for the exploration phase. We set a user-deﬁned time-limit of
6 hours for the exploration. If the exploration has not completed by that time Elcano
Towards Generating High Coverage Vulnerability-Based Signatures
177
Table 4. Performance evaluation. The genera-
tion time and the average test time are given
in seconds, and the trace size is given in
Megabytes
Table 5. On the left, the format of the Gdi-
wmf exploit ﬁle. On the right the vulnerabil-
ity point reachability predicate.
Gener.
time # tests
21600
98
Program
Gdi-emf
Gdi-wmf
DCOM RPC 21600
GHttpd
AtpHttpd
SQL Server
55
282
1384
502
6
235
6
12
11
Ave. test Trace
size
28.8
3.0
3.5
3.0
8.6
27.5
time
43.0
16.3
92.0
9.1
23.5
125.8
0
2
4
6
10
12
16
18
22
24
16-bit
FileType
HeaderSize
Version
FileSize
NumOfObjects
MaxRecordSize
NoParameters
Size
Function
Parameters
Start
H_Header
Size
==  9
0x77f208a9
T
H_Version
==  0x300
0x77f208b7
H_FileSize
>= 12
0x77f23f67
R_Size
 64 . According to the ShieldGen authors, who had access to
the source code, this signature would be optimal.
Gdi-wmf. Figure 5 shows on the left the ﬁeld structure for the exploit ﬁle and on
the right the VPRP. The original protocol-level path-predicate contained the 4 aligned
nodes on the left of the graph, while the exploration discovers one new path leading to
the vulnerability point that introduces the node on the right. The graph shows that the
program checks whether the Version ﬁeld is 0x300 (Windows 3.0) or 0x100 (Win-
dows 1.0). Such constraint is unlikely to be detected by probing approaches, since they
usually sample only a few values. In fact, in ShieldGen they analyze a different vulner-
ability in the same library but run across the same constraint. The authors acknowledge
that they miss the second condition of the disjunction. Thus, an attacker could easily
avoid detection by changing the value of the Version ﬁeld. Since we have no access to
the source we cannot verify if our VPRP is optimal, though we believe it to be.
Other experiments. Due to space constraints we refer the reader to our extended ver-
sion [36] for details on the Atphttpd, GHttpd and DCOM RPC examples. For the Atphttpd
and GHttpd vulnerabilities, where we have access to the source code, the extended ver-
sion contains the optimal signatures that we manually extracted for the vulnerability. The
results show that Elcano’s VPRPs exactly match or are very close to the optimal ones that
we manually extracted from the source code.
6 Conclusion
In this paper we propose protocol-level constraint-guided exploration, a novel approach
to automatically generate high coverage, yet compact, vulnerability point reachability
Towards Generating High Coverage Vulnerability-Based Signatures
179
predicates, with application to signature generation, exploit generation and patch veri-
ﬁcation. Our experimental results demonstrate that our approach is effective, generates
small vulnerability point reachability predicates with high coverage (optimal or close
to optimal in cases), and offers signiﬁcant improvements over previous approaches.
Acknowledgements
We would like to thank James Newsome and Prateek Saxena for many helpful discus-
sions on signature generation. We also thank Stephen McCamant and the anonymous
reviewers for their insightful comments on this document.
This material is based upon work partially supported by the National Science Foun-
dation under Grants No. 0311808, No. 0448452, No. 0627511, and CCF-0424422, and
by the Air Force Ofﬁce of Scientiﬁc Research under MURI Grant No. 22178970-4170.
Any opinions, ﬁndings, and conclusions or recommendations expressed in this material
are those of the author(s) and do not necessarily reﬂect the views of the Air Force Ofﬁce
of Scientiﬁc Research, or the National Science Foundation.
References
1. Symantec: Internet security threat report (2008),
http://www.symantec.com/business/theme.jsp?themeid=
threatreport
2. Kreibich, C., Crowcroft, J.: Honeycomb - creating intrusion detection signatures using hon-
eypots. In: Workshop on Hot Topics in Networks, Boston, MA (2003)
3. Kim, H.A., Karp, B.: Autograph: Toward automated, distributed worm signature detection.
In: USENIX Security Symposium, San Diego, CA (2004)
4. Singh, S., Estan, C., Varghese, G., Savage, S.: Automated worm ﬁngerprinting. In: Sympo-
sium on Operating System Design and Implementation, San Francisco, CA (2004)
5. Newsome, J., Karp, B., Song, D.: Polygraph: Automatically generating signatures for poly-
morphic worms. In: IEEE Symposium on Security and Privacy, Oakland, CA (2005)
6. Yegneswaran, V., Gifﬁn, J.T., Barford, P., Jha, S.: An architecture for generating semantics-
aware signatures. In: USENIX Security Symposium, Baltimore, MD (2005)
7. Li, Z., Sanghi, M., Chen, Y., Kao, M.Y., Chavez, B.: Hamsa: Fast signature generation for
zero-day polymorphic worms with provable attack resilience. In: IEEE Symposium on Se-
curity and Privacy, Oakland, CA (2006)
8. Liang, Z., Sekar, R.: Fast and automated generation of attack signatures: A basis for building
self-protecting servers. In: ACM Conference on Computer and Communications Security,
Alexandria, VA (2005)
9. Liang, Z., Sekar, R.: Automatic generation of buffer overﬂow attack signatures: An approach
based on program behavior models. In: Annual Computer Security Applications Conference,
Tucson, AZ (2005)
10. Wang, X., Li, Z., Xu, J., Reiter, M.K., Kil, C., Choi, J.Y.: Packet vaccine: Black-box exploit
detection and signature generation. In: ACM Conference on Computer and Communications
Security, Alexandria, VA (2006)
11. Costa, M., Crowcroft, J., Castro, M., Rowstron, A., Zhou, L., Zhang, L., Barham, P.:
Vigilante: End-to-end containment of internet worms. In: Symposium on Operating Systems
Principles, Brighton, United Kingdom (2005)
180
J. Caballero et al.
12. Brumley, D., Newsome, J., Song, D., Wang, H., Jha, S.: Towards automatic generation of
vulnerability-based signatures. In: IEEE Symposium on Security and Privacy, Oakland, CA
(2006)
13. Saxena, P., Poosankam, P., McCamant, S., Song, D.: Loop-extended symbolic execution on
binary programs. In: International Symposium on Software Testing and Analysis, Chicago,
IL (2009)
14. Vigna, G., Robertson, W., Balzarotti, D.: Testing network-based intrusion detection signa-
tures using mutant exploits. In: ACM Conference on Computer and Communications Secu-
rity, Washington, DC (2004)
15. Rubin, S., Jha, S., Miller, B.P.: Automatic generation and analysis of nids attacks. In: Annual
Computer Security Applications Conference, Tucson, AZ (2004)
16. Brumley, D., Wang, H., Jha, S., Song, D.: Creating vulnerability signatures using weakest
pre-conditions. In: Computer Security Foundations Symposium, Venice, Italy (2007)
17. Costa, M., Castro, M., Zhou, L., Zhang, L., Peinado, M.: Bouncer: Securing software by
blocking bad input. In: Symposium on Operating Systems Principles, Bretton Woods, NH
(2007)
18. Cui, W., Peinado, M., Wang, H.J., Locasto, M.: Shieldgen: Automatic data patch generation
for unknown vulnerabilities with informed probing. In: IEEE Symposium on Security and
Privacy, Oakland, CA (2007)
19. Brumley, D., Poosankam, P., Song, D., Zheng, J.: Automatic patch-based exploit genera-
tion is possible: Techniques and implications. In: IEEE Symposium on Security and Privacy,
Oakland, CA (2008)
20. A dumb patch?
http://blogs.technet.com/msrc/archive/2005/10/31/413402.aspx
21. Common vulnerabilities and exposures (cve), http://cve.mitre.org/cve/
22. Wireshark, http://www.wireshark.org
23. Pang, R., Paxson, V., Sommer, R., Peterson, L.: Binpac: A yacc for writing application pro-
tocol parsers. In: Internet Measurement Conference, Rio de Janeiro, Brazil (2006)
24. Borisov, N., Brumley, D., Wang, H.J., Dunagan, J., Joshi, P., Guo, C.: A generic application-
level protocol analyzer and its language. In: Network and Distributed System Security Sym-
posium, San Diego, CA (2007)
25. Caballero, J., Yin, H., Liang, Z., Song, D.: Polyglot: Automatic extraction of protocol mes-
sage format using dynamic binary analysis. In: ACM Conference on Computer and Commu-
nications Security, Alexandria, VA (2007)
26. Cui, W., Peinado, M., Chen, K., Wang, H.J., Irun-Briz, L.: Tupni: Automatic reverse engi-
neering of input formats. In: ACM Conference on Computer and Communications Security,
Alexandria, VA (2008)
27. Wondracek, G., Comparetti, P.M., Kruegel, C., Kirda, E.: Automatic network protocol anal-
ysis. In: Network and Distributed System Security Symposium, San Diego, CA (2008)
28. Lin, Z., Jiang, X., Xu, D., Zhang, X.: Automatic protocol format reverse engineering through
context-aware monitored execution. In: Network and Distributed System Security Sympo-
sium, San Diego, CA (2008)
29. Newsome, J., Song, D.: Dynamic taint analysis for automatic detection, analysis, and sig-
nature generation of exploits on commodity software. In: Network and Distributed System
Security Symposium, San Diego, CA (2005)
30. Cadar, C., Ganesh, V., Pawlowski, P.M., Dill, D., Engler, D.R.: Exe: Automatically gen-
erating inputs of death. In: ACM Conference on Computer and Communications Security,
Alexandria, VA (2006)
31. Godefroid, P., Klarlund, N., Sen, K.: Dart: Directed automated random testing. In: SIGPLAN
Conference on Programming Language Design and Implementation, Chicago, IL (2005)
Towards Generating High Coverage Vulnerability-Based Signatures
181
32. Godefroid, P., Levin, M.Y., Molnar, D.: Automated whitebox fuzz testing. In: Network and
Distributed System Security Symposium, San Diego, CA (2008)
33. Vine, http://bitblaze.cs.berkeley.edu/vine.html
34. Caballero, J., McCamant, S., Barth, A., Song, D.: Extracting models of security-sensitive
operations using string-enhanced white-box exploration on binaries. Technical Report
UCB/EECS-2009-36, EECS Department, University of California, Berkeley (2009)
35. Song, D., Brumley, D., Yin, H., Caballero, J., Jager, I., Kang, M.G., Liang, Z., Newsome,
J., Poosankam, P., Saxena, P.: BitBlaze: A new approach to computer security via binary
analysis. In: International Conference on Information Systems Security, Hyderabad, India
(2008); Keynote invited paper
36. Towards generating high coverage vulnerability-based signatures with protocol-level
constraint-guided exploration (extended version),
http://www.ece.cmu.edu/˜juanca/papers/fieldsig_extended.pdf
37. Godefroid, P., Kiezun, A., Levin, M.Y.: Grammar-based whitebox fuzzing. In: SIGPLAN
Conference on Programming Language Design and Implementation, Tucson, AZ (2008)
38. Boonstoppel, P., Cadar, C., Engler, D.: Rwset: Attacking path explosion in constraint-based
test generation. In: International Symposium on Software Testing and Analysis, Seattle, WA
(2008)
39. Dijkstra, E.W.: Guarded commands, nondeterminacy and formal derivation of programs.
Communications of the ACM 18(8) (1975)