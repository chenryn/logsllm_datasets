### 0x50 ptagWND

获取到 `spMenu` 后，可以使用以下代码来获取当前进程的 `EPROCESS` 结构体。在调试器中查看结果如下：

上图显示了通过 `spMenu` 偏移和使用 `.process` 命令两种方式获取到的 `EPROCESS` 值是一致的。

#### 查看当前进程的 Token
```plaintext
kd> !token
...
Privs:
 19 0x000000013 SeShutdownPrivilege               Attributes -  
 23 0x000000017 SeChangeNotifyPrivilege           Attributes - Enabled Default  
 25 0x000000019 SeUndockPrivilege                 Attributes -  
 33 0x000000021 SeIncreaseWorkingSetPrivilege     Attributes -  
 34 0x000000022 SeTimeZonePrivilege               Attributes -  
...
```

直接运行到第 454 行，此时当前进程的 token 被替换为系统 token。

`EPROCESS` 中的 token 结构体是 `_EX_FAST_REF`：
```plaintext
kd> dt _EX_FAST_REF  
ntdll!_EX_FAST_REF  
   +0x000 Object           : Ptr64 Void   
   +0x000 RefCnt           : Pos 0, 4 Bits   
   +0x000 Value            : Uint8B  
```

重新运行到第 454 行后，`EPROCESS` 值与之前不同。调用 `if(iCount dt nt!_EX_FAST_REF ffffe504`89885080+0x4b8`：
```plaintext
+0x000 Object           : 0xffffbe09`9a242744 Void
+0x000 RefCnt           : 0y0100   
+0x000 Value            : 0xffffbe09`9a242744  
```

系统进程的 `_EX_FAST_REF` 的 `Object` 也为 `0xffffbe09`9a242744`，表明当前进程修改成功。使用 `!token` 命令验证：

### 修改 Token 的代码
1. **遍历进程链表**：`EPROCESS` 结构体中有一个进程链表，保存了当前系统的所有进程。我们主要关注 `ActiveProcessLinks` 和 `UniqueProcessId` 属性。
    ```plaintext
    kd> dt nt!_EPROCESS   
       +0x000 Pcb                : _KPROCESS   
       +0x438 ProcessLock        : _EX_PUSH_LOCK   
       +0x440 UniqueProcessId    : Ptr64 Void     // 进程ID
       +0x448 ActiveProcessLinks : _LIST_ENTRY    // 进程链表
    ```
    通过遍历 `ActiveProcessLinks` 链表，找到 `UniqueProcessId` 为 4 的 system 进程，并获取偏移 `0x4b8` 处的 `_EX_FAST_REF` 结构体地址及其 `Object` 值。

2. **定位并修改 `_EX_FAST_REF` 结构体**：
    - 使用之前保存的当前进程的 `EPROCESS` 地址，定位到 `_EX_FAST_REF` 结构体地址。
    - 通过窗口 0 越界写入窗口 1 的 `pExtraBytes`，传入第二步找到的地址（第 448 行）。
    - 在第 449 行，通过窗口 1 调用 `SetWindowLong` 设置 `Object` 为第一步找到的 `Object`。
    - 第 450 行恢复窗口 1 的 `pExtraBytes`。

3. **恢复内核数据**：
    - 第 407 行到第 414 行用于恢复内核窗口内容，防止蓝屏。
    - 第 408 行设置窗口 2 的 `pExtraBytes` 为正常的用户态指针。
    - 第 409 行设置窗口 2 的 `dwExtraFlag` 不包含 `0x800` 属性，从模式 1 修改为模式 2。
    - 第 411 到第 414 行恢复窗口 1 的 `Menu` 指针。
    - 第 418 行恢复 `KernelCallbackTable` 表项。
    - 自定义的释放内存的回调函数 `MyxxxClientFreeWindowClassExtraBytes`，判断如果是特定窗口，则不释放内存，直接返回。最终在回调函数表中恢复此项，释放窗口 2 的 `pExtraBytes`。

### 8.2 修改 Privileges
第二种漏洞利用方法是修改 token 的 `Privileges` 变量。实现相对简单，不需要构造写原语，只需为当前进程添加 `SE_DEBUG` 权限并启用。遍历进程，过滤出与当前进程位于同一会话下的 `winlogon` 登录进程（该进程具有 system 权限），打开此进程并注入代码执行。

#### 背景知识
要打开系统安全进程和服务进程，并且有写入数据权限，需要当前进程拥有 `SeDebugPrivilege` 权限。当一个进程启动后，正常情况下无法提升权限。正向开发时使用的 `AdjustTokenPrivileges` 函数只能启用或禁用某个权限。

我们已经实现了任意地址写数据，窗口 1 本身为用户态直接寻址模式，通过设置窗口 1 的 `pExtraBytes` 值为任意值，调用 `SetWindowLongPtr` 即可对任意地址写数据。上一种利用手法是调用 `SetWindowsLong` 构造写原语，调用 `GetMenuBarInfo` 构造读原语，然后通过 `EPROCESS` 的 `ActiveProcessLinks` 链遍历进程。当进程号为 4 时，认为是 system 进程，获取 system 的 `Token` 变量覆盖到当前进程的 `Token`，使当前进程提权到 system 级别。

#### 漏洞利用思路
1. 使用 `OpenProcessToken` 打开当前进程调整权限的句柄。
2. 使用 `NtQuerySystemInformation` 泄露句柄在内核中的地址，该地址为进程 `Token` 在内核中的地址。
3. 偏移 `0x40` 定位到 `Privileges` 变量。
    ```plaintext
    0: kd> dt _TOKEN  
    nt!_TOKEN   
      ...   
      +0x040 Privileges       : _SEP_TOKEN_PRIVILEGES 
      ...
    ```

4. 在 `EPROCESS` 结构体中的 `token` 变量类型为 `nt!_EX_FAST_REF`。
    ```plaintext
    kd> dt nt!_EX_FAST_REF  
       +0x000 Object           : Ptr64 Void   
       +0x000 RefCnt           : Pos 0, 4 Bits   
       +0x000 Value            : Uint8B  
    ```

5. 计算 `Object` 的实际地址：
    ```plaintext
    0xffffbe09`9a242744 & 0xFFFFFFFFFFFFFFF0 = 0xffffbe09`9a242740
    ```

6. 在 Windbg 中查看 `Privileges` 的 `Present` 和 `Enable` 字段，分别表示进程当前是否可以启用对应权限和是否启用了对应权限。将 `Present` 和 `Enable` 修改为 `0xFFFFFFFFFFFFFFFF`，启用第 20 位 `SeDebugPrivilege` 权限。

7. 内存布局与第一种利用方法相同，接着 hook 回调函数，对窗口 2 调用 `NtUserMessageCall`。调用 `LeakEporcessKtoken` 泄露 token 的地址，泄露 token 地址后，`token + 0x40` 即可定位到 `Privileges` 变量地址。

8. 通过窗口 0 越界写修改窗口 0 的 `pExtraBytes` 为 `token + 0x40`，定位到 `Privileges`。设置新的权限值，设置 `Present` 和 `Enabled` 属性，恢复窗口 1 的 `pExtraBytes` 值。

9. 定位 `winlogon` 进程的 PID，注意如果有多个用户登录，存在多个 `winlogon` 进程，需要找到与当前进程处于同一会话中的 `winlogon` 进程。写 shellcode 到 `winlogon` 进程并执行。

10. 修复窗口内核数据。

### 总结
- **第一种方法**：稍微复杂，需要构造读写原语，但无论低权限还是中等权限进程都可以进行提权。
- **第二种方法**：只需要构造一个写原语，开启各种权限，通过注入的方法获取高权限，相对难度较低，但至少需要中等权限。

### 9. 补丁分析
此漏洞对应的补丁为 KB5009543。打补丁后调用 `NtUserMessageCall` 时触发到内核函数的调用堆栈如下：
```plaintext
win32kfull!xxxClientAllocWindowClassExtraBytes  
win32kfull!xxxValidateClassAndSize+0x171  
win32kfull!xxxSwitchWndProc+0x5a  
win32kfull!xxxWrapSwitchWndProc+0x3c  
win32kfull!NtUserfnINLPCREATESTRUCT+0x1c4  
win32kfull!NtUserMessageCall+0x11d  
win32k!NtUserMessageCall+0x3d  
```

在 `xxxClientAllocWindowClassExtraBytes` 函数中调用回调函数后，内核函数对窗口的 `dwExtraFlag` 属性进行校验：
- 第 43 行判断 `dwExtraFlag` 是否包含 `0x800` 属性，如果包含，说明用户态函数被 hook，当前函数返回值不使用用户态申请的空间，而是返回 0。
- 返回到 `xxxValidateClassAndSize` 函数后，判断返回值为 0，直接返回，不会再去修改 `pExtraBytes` 为用户伪造的值。

### 10. 参考链接
* * *