            0x50 ptagWND  
所以获取到spMenu后可以使用如下代码来获取当前进程的EPROCESS
在调试器中查看如下：
上图中可以看到通过spMenu取偏移和使用命令.process两种方式获取到的EPROCESS值是一致的。
查看当前进程的token
    kd> !token
    …
    Privs:
     19 0x000000013 SeShutdownPrivilege               Attributes -  
     23 0x000000017 SeChangeNotifyPrivilege           Attributes - Enabled Default  
     25 0x000000019 SeUndockPrivilege                 Attributes -  
     33 0x000000021 SeIncreaseWorkingSetPrivilege     Attributes -  
     34 0x000000022 SeTimeZonePrivilege               Attributes -  
     …
我们直接运行到454行，此时当前进程的token被替换为系统token
EPROCESS中token结构体为_EX_FAST_REF
    kd> dt _EX_FAST_REF  
    ntdll!_EX_FAST_REF  
       +0x000 Object           : Ptr64 Void   
       +0x000 RefCnt           : Pos 0, 4 Bits   
       +0x000 Value            : Uint8B  
调试运行到454行，重新运行一次，所以EPROCESS值与之前不一样。
可以看到此时调用到if(iCount dt nt!_EX_FAST_REF ffffe504`89885080+0x4b8  
       +0x000 Object           : 0xffffbe09`9a242744 Void
       +0x000 RefCnt           : 0y0100   
       +0x000 Value            : 0xffffbe09`9a242744  
system进程EX_FAST_REF的Object也为0xffffbe09`9a242744，当前进程修改成功，使用!token命令验证下：
修改token的代码如下：
1.EPROCESS结构体中有一个进程链表，保存了当前系统的所有进程，我们主要关注ActiveProcessLinks和UniqueProcessId属性
    kd> dt nt!_EPROCESS   
       +0x000 Pcb                : _KPROCESS   
       +0x438 ProcessLock        : _EX_PUSH_LOCK   
       +0x440 UniqueProcessId    : Ptr64 Void     //进程ID
       +0x448 ActiveProcessLinks : _LIST_ENTRY    //进程链表
通过遍历进程链表ActiveProcessLinks，找到进程PID
UniqueProcessId为4的system进程，偏移0x4b8得到_EX_FAST_REF结构体地址，取出Object的值。
2.之前eprocess变量中保存了当前进程的EPROCESS地址，定位到_EX_FAST_REF结构体地址
3.通过窗口0越界写窗口1的pExtraBytes，传入第二步找到的地址，下面448行代码。
4.449行通过窗口1调用SetWindowLong设置Object修改值为第一步找到的Object。 5.450行代码恢复窗口1的pExtraBytes。
恢复内核数据：
407行到414行都是为了恢复内核窗口内容，防止蓝屏。
408行设置窗口2的pExtraBytes为正常的用户态指针。
409行设置窗口2的dwExtraFlag不包含0x800属性，即从模式1修改为模式2。
411到414行恢复窗口1的Menu指针。
418行恢复KernelCallbackTable表项。
自定义的释放内存的回调函数MyxxxClientFreeWindowClassExtraBytes，判断如果是特定窗口，就不释放内存，直接返回。
最终在回调函数表中恢复此项，释放窗口2的pExtraBytes，之前恢复内核数据代码处设置了窗口2的pExtraBytes为RtlAllocateHeap返回的指针。
### 8.2 修改Privileges
第二种漏洞利用要修改token的变量Privileges，这种实现相对来说简单，不需要构造写原语，为当前进程添加SE_DEBUG权限并启用，遍历进程，过滤与当前进程位于同一session下的winlogon登录进程，此进程是system权限，打开此进程并注入代码执行。
背景知识：
要打开系统安全进程和服务进程，并且有写入数据权限，需要当前进程拥有SeDebugPrivilege权限，这个是调试进程会用到的权限，当一个进程启动后，正常情况下，是无法提升权限的，正向开发时使用的AdjustTokenPrivileges函数只能是启用某个权限或者禁用某个权限。
之前我们已经实现了任意地址写数据，窗口1本身为用户态直接寻址模式，通过设置窗口1的pExtraBytes值为任意值，调用SetWindowLongPtr时即可对任意地址写数据，上一种利用手法是调用SetWindowsLong来构造写原语，调用GetMenuBarInfo来构造读原语，然后通过EPROCESS的ActiveProcessLinks链遍历进程，当进程号为4时，认为是system进程，获取system的Token变量覆盖到当前进程的Token，当前进程就提权到了system级别。
漏洞利用思路为：使用OpenProcessToken打开当前进程调整权限的句柄，使用NtQuerySystemInformation函数泄露句柄在内核中的地址，泄露出的地址为进程Token在内核中的地址，然后偏移0x40：
    0: kd> dt _TOKEN  
    nt!_TOKEN   
      …   
      +0x040 Privileges       : _SEP_TOKEN_PRIVILEGES 
      …  
在EPROCESS结构体中的token变量类型为nt!_EX_FAST_REF
    kd> dt nt!_EX_FAST_REF  
       +0x000 Object           : Ptr64 Void   
       +0x000 RefCnt           : Pos 0, 4 Bits   
       +0x000 Value            : Uint8B  
其实这个结构体中Object才属于TOKEN结构体，但Object的值不是简单的对应TOKEN结构体，而是需要经过计算，上面的结构体中RefCnt也是位于偏移0x00，只占4位，这四位表示了Object对象的引用计数，这里我们使用上面第一种利用方法利用成功后的数据
    kd> dt nt!_EX_FAST_REF ffffe504`89885080+0x4b8   
       +0x000 Object           : 0xffffbe09`9a242744 Void
       +0x000 RefCnt           : 0y0100   
       +0x000 Value            : 0xffffbe09`9a242744  
Object为0xffffbe09`9a242744，RefCnt 为0y0100，需要经过如下换算才可以：
    0xffffbe09`9a242744&0xFFFFFFFFFFFFFFF0=0xffffbe09`9a242740
Windbg中查看：
Token偏移0x40为Privileges，Privileges中Present和Enable分别表明进程当前是否可以启用对应权限和是否启用了对应权限，EnabledByDefault是默认启用了对应权限，EnabledByDefault这个变量不需要修改，都是8字节数据，如果将Present和Enable都修改为0xFFFFFFFFFFFFFFFF，
在windbg中可以看到位与权限对应关系如下：
其中2位到32位是有效数据，我们只需要启用第20位SeDebugPrivilege权限就可以打开winlogon进程，之后注入shellcode，运行shellcode启动一个system级别的cmd进程。
内存布局与之前的第一种利用方法一样，接着hook回调函数，对窗口2调用NtUserMessageCall，接下来就不一样了：
调用LeakEporcessKtoken泄露token的地址，
LeakEporcessKtoken函数调用OpenProcessToken打开自身进程的token，第二个参数访问掩码设置为TOKEN_ADJUST_PRIVILEGES，为调整令牌权限，然后调用GetKernelPointer泄露token的内核地址：
其中结构体SYSTEM_HANDLE_TABLE_ENTRY_INFO和SYSTEM_HANDLE_INFORMATION在移植到64位版本时，笔者有对结构体内容进行一些修正，结构体中都多了一个变量ULONG
xxxCDCDCD用来占位，保持8字节对齐。泄露token地址后，token+0x40即可定位到Privileges变量地址，
313行通过窗口0越界写修改窗口0的pExtraBytes为token+0x40，定位到Privileges。
314到319行，设置新的权限值，其实只需要设置第20位，但是此处设置了第2到第36位都为1。
320行设置Present属性。
321行设置Enabled属性。
322行恢复窗口1的pExtraBytes值。
324行定位winlogon进程的pid，此处需要注意如果有多个用户登录那么存在多个winlogon进程，需要找到跟当前进程处于同一会话中的winlogon进程，否则最终启动的cmd当前用户无法看到。
325行写shellcode到winlogon进程中并执行。
328到331行是为了修复窗口内核数据。
> 总结两种漏洞利用方法的优劣：  
>  第一种方法：对比第二种稍微有点复杂，要构造读写原语，优势在于不管是低权限进程还是中等权限进程都可以进行提权。  
>
> 第二种方法：只需要构造一个写原语，然后开启各种权限，通过注入的方法来获取高权限，相对难度低点，但是要调用NtQuerySyetemInformation函数至少需要中等权限，对权限要求较高。
## 9.补丁分析
此漏洞对应的补丁为KB5009543，打补丁后调用NtUserMessageCall时触发到内核函数的调用堆栈如下：
    win32kfull!xxxClientAllocWindowClassExtraBytes  
    win32kfull!xxxValidateClassAndSize+0x171  
    win32kfull!xxxSwitchWndProc+0x5a  
    win32kfull!xxxWrapSwitchWndProc+0x3c  
    win32kfull!NtUserfnINLPCREATESTRUCT+0x1c4  
    win32kfull!NtUserMessageCall+0x11d  
    win32k!NtUserMessageCall+0x3d  
在函数xxxClientAllocWindowClassExtraBytes中调用回调函数后，内核函数对窗口的dwExtraFlag属性校验：
43行判断dwExtraFlag是否包含0x800属性，如果包含，说明用户态函数被hook，当前函数返回值不使用用户态申请的空间，而是返回0，返回到xxxValidateClassAndSize函数后，
判断返回值为0，直接返回，不会再去修改pExtraBytes为用户伪造的值。
## 10.参考链接
* * *