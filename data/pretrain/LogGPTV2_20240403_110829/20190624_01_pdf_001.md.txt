# Odyssey: Advanced Multi-Threaded PostgreSQL Connection Pooler and Request Router

## About the Author
**Andrey Borodin, Software Engineer**
- Contributing to Postgres since 2016
- Organizer of Yekaterinburg Database Meetup

## Current Projects
- **Disaster Recovery System (WAL-G)**
- **Connection Pooler (Odyssey)**
- **Indexing Research and Development**

## Yandex and PostgreSQL
### Yandex.Mail
- **User Base**: Hundreds of millions
- **Data Volume**: Over 1 trillion rows
- **Throughput**: More than 1 million requests per second

### Yandex.Cloud
- **Data Volume**: Approximately 2PB (as of May 2019)
- **Other Services**: Taxi, maps, weather forecast, carsharing, food delivery, etc.

## Cluster in the Cloud
- **Network**: 
- **Write-Ahead Log (WAL) Object**
- **Read-Write (RW) Queries**
- **Storage**
- **Backup**
- **Asynchronous Replication**
- **Synchronous Replication**
- **Read-Only (RO) Queries**

## Node in a Cluster
- **Connection Pooler**
- **High Availability (HA) Control**
- **Client Queries**
- **Monitoring**

## Why Should We Pool Connections?
- **Backend Process**: Each backend is a separate process.
- **Caches per Backend**:
  - Relations cache
  - Compiled PL/pgSQL
  - Query plans
- **High Availability (HA) Node Fencing**

## OLTP Throughput

## Where Can We Pool Connections?
1. **Application-Side Pooling**
2. **Between Application and Database**
3. **Database Built-in Pooling**
4. **Combinations of the Above**

### Application-Side Connection Pooler
- **App Backend**

### Backend Under Load Balancer

### In Multiple Availability Zones
- **DC1**
- **DC2**

### Proxy Poolers
- **Pgpool II**
- **Crunchy-Proxy**
  - Diverse functionality beyond pooling
  - Only session pooling
- **PgBouncer**
  - Lightweight tool
  - Transaction pooling

## PgBouncer Performance
- **Workload Analysis**
- **Diagnostics Complexity**
  - Network problems
  - Client driver issues
  - Single session event tracing

### Example Diagnostics
```sql
SELECT client_addr, count(*) FROM pg_stat_activity GROUP BY client_addr;
```
- **Output**:
  - `client_addr | count`
  - `-------------+-------`
  - `127.0.0.1 | 127`
  - `::1 | 136`

### Application Name with Host
```sql
SELECT client_addr, client_port, application_name FROM pg_stat_activity LIMIT 1;
```
- **Output**:
  - `client_addr | 127.0.0.1`
  - `client_port | 42051`
  - `application_name | app - [2a02:6b8:0:f12:225:90ff:fe94:155c]:50184`

### Max Client Pool Connections
- **Configuration**:
  - `max_client_conn | 20000`
  - `default_pool_size | 500`
  - `min_pool_size | 0`
  - `reserve_pool_size | 0`

- **Issue**: One client can open up to `max_client_conn` connections, causing others to wait.
- **Solution**: Patched PgBouncer to include `max_client_pool_conn`.

### Connection Limits in PostgreSQL
- **Role Configuration**:
  - `ALTER ROLE XXX WITH CONNECTION LIMIT 200;`
  - `ALTER ROLE YYY WITH CONNECTION LIMIT 10;`

### HAProxy Integration
- **Pros**:
  - Transparent for clients
  - Existing tools
- **Cons**:
  - No client IP
  - Additional moving part
  - HAProxy does not support proto3
  - Socket depletion issues

### TLS Considerations
- **Node Startup**: Coordinated connection startups
- **TLS Handshake Explosion**: Small `connect_timeout` causes retries and CPU burn

### Cascading PgBouncers
- **Benefits**:
  - Transparent for clients
  - Handles load peaks
  - Controls idle connection count
  - Smooth restarts
- **Challenges**:
  - Maintenance difficulty
  - No control over load distribution

### Open Source Contribution
- **Steps to Open Source**:
  - Cancel running query
  - Client of healthy user
  - Smokerâ€™s client

### Desired Features
- **Controllable CPU Scaling**
- **Flexible Tuning**
- **Tracing Client Sessions**
- **Mixed Pooling Types**
- **Better Error Codes Forwarding**

## Odyssey
- **Compilation**:
  - Linux x86, x86_64
  - C99
  - cmake, gcc/clang
  - Depends only on OpenSSL
  - One configuration file

- **Internal Architecture**:
  - Main thread
  - Worker pool
  - Router servers
  - Console cron server
  - Client coroutines

- **Multithreading**:
  - Machinarium: workers and coroutines
  - Independent epoll(7) context for each worker

- **Features**:
  - Enhanced transaction pooling
  - Replication support
  - PgBouncer console compatibility
  - Error forwarding
  - Logging and error handling
  - Route settings

- **Benchmarking**:
  - PostgreSQL `make install-check`
  - Driver tests: pq, node-postgres, pgjdbc, psycopg2
  - Unit tests

- **Roadmap**:
  - SCRAM authentication
  - Forward read-only queries to replicas
  - Online restart
  - Pause server
  - Pull requests are welcome!

## Contact
- **Andrey Borodin**
- **Email**: [PI:EMAIL]
- **Questions Welcome!**