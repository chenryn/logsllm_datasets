2
3
4
Hardware
prefetcher
Streamer
Detection
technique
Stream
Spatial prefetcher Adjacent-line
DCU prefetcher
IP-based stride
Next-line
Stride
prefetcher
Cache
Level
L2
L2
L1
L1
Bit # in
MSR 0x1a4
0
1
2
3
the LLC in Intel processors, the clflush instruction will evict the
cache line from all cache levels. Then, in Wait phase, A waits for
B to execute operations. Finally, during Reload phase, A reloads
previously flushed memory line and measures the access time. If B
has accessed the line during Wait phase, it will be reloaded from
the cache (i.e., a cache hit occurs), which results in a lower reload
time. If not, then the memory line resides in the memory, resulting
in higher reload time due to a cache miss.
2.2 Hardware-based data prefetching
Cache miss results in access to lower-level caches or main memory,
which is a time consuming operation that causes execution delays.
Data prefetching is a technique that predicts its usage and fetches
data from the main memory to the high level cache prior to its actual
access. Modern processors provide data prefetching in the form
of either software or hardware. While software-based prefetching
is supported by the compiler, hardware-based prefetching uses a
dedicated hardware in the cache units. In this study, we consider
only hardware-based data prefetching techniques.
Hardware prefetching technique. Since there exist diverse appli-
cations with different memory access patterns, modern processors
utilize various hardware prefetching techniques conjunctively to
cover the range of applications. Next-line prefetching [53] is one
of the basic approaches; if an access to line N is detected, then it
prefetches the next line N+1 to the cache. Adjacent-line prefetching
[30] exploits spatial locality and attempts to fetch an adjacent pair
of the accessed line N. Stream prefetching [31, 49] assumes that
consecutive memory accesses is a part of the streaming algorithm,
and therefore fetches multiple memory lines ahead within a page
boundary from the current line N. Stride prefetching [8, 16], on
which this paper is mainly focused, tracks individual data load in-
structions in an attempt to detect whether consequently accessed
addresses form a pattern a, a + S, a + 2S, ... with memory address
a and a constant stride S. Once detected, it then fetches memory
lines either forward or backward based on the direction of access
sequence. The stride prefetcher maintains a table indexed with
load/store PC. Each entry in the table consists of the last address a,
stride S, and a count c, where the count is used for measuring the
confidence of the observed stride.
Hardware prefetching in Intel core. In Sandy Bridge and succes-
sive processors, each core is equipped with four types of hardware
prefetchers on the L1 and L2 cache: Streamer, Spatial prefetcher, Data
Cache Unit (DCU) prefetcher, and Instruction pointer (IP)-based stride
prefetcher [27]. Unfortunately, details about the behavior of those
Session 2A: Side Channel 1 CCS’18, October 15-19, 2018, Toronto, ON, Canada133(kl−1, . . . , k1, k0) ← k
X1 ← x, Z1 ← 1, X2 ← x
for i ← l − 2 to 0 do
Algorithm 1 Montgomery ladder algorithm
Input: x-coordinate X/Z for the point P(X , Z) and a scalar k > 0
Output: The affine coordinates of the point Q = kP
1: procedure Montgomerry_ladder(k, X , Z)
2:
4 + b, Z2 ← x
2
3:
4:
5:
6:
7:
8:
9:
10:
11:
Madd(X1, Z1, X2, Z2), Mdouble(X2, Z2)
Madd(X2, Z2, X1, Z1), Mdouble(X1, Z1)
end for
return Q = Mxy(X1, Z1, X2, Z2) ▷ Transform to an affine
▷ ki ∈ {0, 1} (0 ≤ i ≤ l − 1)
▷ b is a constant
if ki = 1 then
else
end if
coordinate
12: end procedure
(kl−1, . . . , k1, k0) ← k
X1 ← x, Z1 ← 1, X2 ← x
for i ← l − 2 to 0 do
Algorithm 2 Branchless Montgomery ladder algorithm
Input: x-coordinate X/Z for the point P(X , Z) and a scalar k > 0
Output: The affine coordinates of the point Q = kP
1: procedure Montgomerry_ladder(k, P)
2:
4 + b, Z2 ← x
3:
4:
5:
6:
7:
8:
9:
10:
11: end procedure
β ← ki
Const_Swap(X1, X2, β), Const_Swap(Z1, Z2, β)
Madd(X2, Z2, X1, Z1), Mdouble(X1, Z1)
Const_Swap(X1, X2, β), Const_Swap(Z1, Z2, β)
end for
return Q = Mxy(X1, Z1, X2, Z2)
2
Algorithm 3 Point doubling operation
Input: x-coordinate X/Z for the point P(X , Z)
Output: x-coordinate X/Z for the point 2P
1: procedure Mdouble(X , Z)
X ← X
2
2:
T1 ← Z
2
3:
Z ← X × T1
4:
X ← X
2
5:
T1 ← T
2
6:
1
T1 ← b × T1
7:
X ← X + T1
8:
return X, Z
9:
10: end procedure
▷ b is a constant specific to an elliptic curve
and P2(X2, Z2)
Algorithm 4 Point addition operation
Input: x-coordinates X1/Z1 and X2/Z2 of two points P1(X1, Z1)
Output: x-coordinate X1/Z1 for the point P1 + P2
1: procedure Madd(X1, Z1, X2, Z2)
T1 ← x
2:
X1 ← X1 × Z2
3:
Z1 ← Z1 × X2
4:
T2 ← X1 × Z1
5:
Z1 ← Z1 + X1
6:
Z1 ← Z
7:
X1 ← Z1 × T1
8:
X1 ← X1 + T2
9:
return X1, Z1
10:
11: end procedure
2
1
prefetchers are not publicly known, except for a brief explanation of
each prefetching mechanism in Intel documents [27, 28]. Recently,
Intel disclosed useful information about a method to control various
hardware prefetchers for some processor models [54]. According
to the disclosed material, there is a Model Specific Register (MSR)
with address 0x1a4 on every core, and bits 0-3 in the register can be
used to either enable or disable each prefetcher. If any of those bits
are set on a core, then the corresponding prefetcher on that core
is turned off. In most cases, all the bits in the MSR are left to be
cleared by the BIOS, which indicates that all prefetchers are enabled
in the default setting. Table 1 lists those hardware prefetchers with
the detection technique, location and the bit number of the MSR
for control.
2.3 Scalar point multiplication in OpenSSL
OpenSSL [47] is a comprehensive library of cryptographic primi-
tives. For elliptic curve cryptography, OpenSSL implements a scalar
point multiplication algorithm over the elliptic curves of both prime
fields and binary fields. In this section, we present the implementa-
tion details of the scalar point multiplication as well as the squaring
operation, especially over elliptic curves defined over binary fields
in the OpenSSL library.
2.3.1 Montgomery Ladder algorithm. Scalar point multiplication is
one of the primitive operations in elliptic curve cryptography. Given
a scalar k > 0 and an elliptic curve point P, the operation produces
kP by adding P to itself k times. The simplest implementation
of scalar point multiplication is not secure since it leaks timing
information through which an attacker can learn the bits of the
scalar k [9].
In order to protect against timing-based side channel attacks,
OpenSSL library adopts the Montgomery ladder algorithm [43]
(Algorithm 1) for implementing scalar point multiplication. The
algorithm takes the projective coordinate X/Z of the point P and a
scalar k as inputs. For each bit of k, it performs a constant number of
addition (i.e., Madd in Algorithm 4) and doubling (i.e., Mdouble in
Algorithm 3) operations, regardless of the value of the bit. Constant-
time computation is effective in preventing side-channel attackers
from learning timing information.
Branchless Montgomery ladder algorithm. The previous ver-
sion of OpenSSL’s implementation of the Montgomery ladder al-
gorithm basically follows the work of Lopez and Dahab [39]. As
shown in Algorithm 1, it takes different execution paths on a con-
ditional branch depending on the value of the scalar bit. Such im-
plementations are known to be vulnerable to access-driven cache
side-channel attacks [56]. The latest versions of OpenSSL (includ-
ing 1.1.0g) mitigate the attack by eliminating any branches in the
Session 2A: Side Channel 1 CCS’18, October 15-19, 2018, Toronto, ON, Canada134▷ X0 is the right most word
▷ xj is a nibble (4-bit) data
2 ∈ GF(2m)
Algorithm 5 GF(2m) squaring operation
Input: X ∈ GF(2m)
Output: X
1: procedure GF2m_Sqare(X)
(Xw−1, Xw−2, ..., X0) ← X
2:
for i ← w − 1 to 0 do
3:
(x15, x14, ..., x0) ← Xi
4:
W15 ← SQR_tb[x15] << 56
5:
W14 ← SQR_tb[x14] << 48
6:
W13 ← SQR_tb[x13] << 40
7:
W12 ← SQR_tb[x12] << 32
8:
W11 ← SQR_tb[x11] << 24
9:
W10 ← SQR_tb[x10] << 16
10:
W9 ← SQR_tb[x9] << 8
11:
W8 ← SQR_tb[x8]
12:
W7 ← SQR_tb[x7] << 56
13:
W6 ← SQR_tb[x6] << 48
14:
W5 ← SQR_tb[x5] << 40
15:
W4 ← SQR_tb[x4] << 32
16:
W3 ← SQR_tb[x3] << 24
17:
W2 ← SQR_tb[x2] << 16
18:
W1 ← SQR_tb[x1] << 8
19:
W0 ← SQR_tb[x0]
20:
Y2i +1 ← W15 ∨ W14 ∨ ... ∨ W8
21:
Y2i ← W7 ∨ W6 ∨ ... ∨ W0
22:
end for
23:
Y ← (Y2w−1, Y2w−2, ..., Y1, Y0)
24:
return Y mod f
25:
26: end procedure