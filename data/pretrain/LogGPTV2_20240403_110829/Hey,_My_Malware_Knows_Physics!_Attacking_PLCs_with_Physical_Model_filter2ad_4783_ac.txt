many external unpredictable factors, such as real-time demands
by the end-point electricity consumers and real-time climate
for renewable energy sources such as solar and wind generation
plants. Therefore, a replay of a previously recorded sensor
measurement stream back to the operators is very unlikely
to match exactly the expected status of the power system
following the operator’s most recent control commands.
HARVEY addresses the challenge above in highly dynamic
control system environments through real-time and lightweight
physical plant simulation within the PLC ﬁrmware. HARVEY
takes the legitimate controller commands that either the oper-
ator or the legitimate controller logic on the PLC issues to be
sent to the output modules and actuators. HARVEY then simu-
lates the physical plant dynamics by solving the corresponding
plant models (e.g., Equation (1)). Through the simulation of the
Physical	
  System	
  (e.g.,	
  power	
  system)	
  …	
  Sensors	
  Actuators	
  …	
  PLC	
  Firmware	
  Rootkit	
  (Power	
  System	
  Model)	
  Legi>mate	
  Control	
  Logic	
  actual	
  measurements	
  adversary-­‐op5mal	
  malicious	
  control	
  fake	
  legi5mate-­‐looking	
  measurements	
  legi5mate	
  control	
  Legi5mate-­‐Looking	
  Interface	
  Operator	
  physical system, HARVEY essentially calculates how the power
system would “look” if the legitimate control commands would
really be sent to the deployed actuators. HARVEY replaces the
actual sensor measurements with their corresponding simulated
fake values before they are written to the PLC memory. The
following PLC memory reads by the operators’ HMI software
would be receiving the fake measurements. Hence, the HMI
screens would show a legitimate-looking physical system state
to the operators.
The fabricated PLC memory values are used as sensor mea-
surements by the legitimate control logic that is developed by
the operators and runs on top of the malicious PLC ﬁrmware.
Consequently, the legitimate control logic will calculate control
commands that satisfy the operators’ expectations on the HMI
screens. It is noteworthy that HARVEY does not replace the
legitimate control logic execution. Instead, it runs its malicious
code in parallel to the legitimate control logic, and hence
the outputs from both executions are calculated and used
for different purposes (i.e., for faking the physical system
appearance and damaging its actual components).
C. Distributed Monitoring and Control
In practice, a large-scale control system is often maintained
by a set of distributed PLCs, each in charge of their assigned
local “zone”. As an example, in power systems, the electricity
grid is typically partitioned into several sub-areas each main-
tained by a separate controller [28]. In water plant facilities,
the water treatment is often performed in a sequence of several
serial phases such as chlorination, pH control, ﬁltration, and
disinfection. Individual phases are usually operated by separate
control logic programs either all on the same PLC or each sit-
ting on a separate PLC. For real-time monitoring and control,
each PLC takes the monitoring and control responsibility of
its associated zone independently such that its local sensor
measurements sufﬁce for its zonal control operations.
The distributed monitoring and control paradigm is tradi-
tionally employed to ensure real-time and reliable operation;
however, it can be leveraged by the PLC ﬁrmware attacks such
as HARVEY to ensure its stealthiness against large-scale control
systems even when one or just a few of PLCs are infected.
Put in other words, to perform an attack against a large-scale
platform, the adversaries do not have to compromise all the
controllers to maintain stealth.
V. HARVEY IMPLEMENTATION
This section describes our rootkit implementation for an
Allen Bradley 1769-L18ER-BB1B CompactLogix 5370 L1
Rev. B. It is noteworthy that the attack implementation is
explained speciﬁcally for the PLC model above. The PLC soft-
ware/hardware architectures are fundamentally similar across
various vendors. Hence, the proposed techniques can be gen-
eralized to other widely-used industrial PLCs.
HARVEY deeply interferes with the core functionality of
the PLC’s ﬁrmware. This interference allows complex behavior
manipulations of the PLC, which is required for stealthy con-
trol system attacks as described in the previous section. Since
the ﬁrmware of PLC is not openly available, we had to reverse
engineer it as the ﬁrst step of our prototype implementation.
Most
techniques in this multi-step process are known but
nonetheless technically challenging and needed.
Device Selection and Speciﬁcation. Before we get into the
analysis details of the Allen Bradley 1769-L18ER-BB1B Com-
pactLogix 5370 L1 Rev. B, we shortly explain which criteria
6
Fig. 4: LM3S2793 JTAG Pins and Their Connections to the
10-pin ARM-JTAG Connector.
we used to select the target device for our implementation. On
one hand, groundwork on reverse engineering Allen Bradley
PLCs had been done before by the Air Force Institute of
Technology [7], [44]. On the other hand, unlike Siemens
PLCs–which have received a lot attention in recent years–
Allen Bradley PLCs are mostly uncharted. Nevertheless, Allen
Bradley is one of the largest vendors for industrial control
systems internationally. In particular, the CompactLogix L1
series is widely used in several safety-critical infrastructure
applications such as power grids, water plants, oil&gas reﬁner-
ies, and medical devices (e.g., the Adept Viper S650 surgical
assistant robot).
The 1769-L18ER-BB1B CompactLogix 5370 L1 Rev. B
is based on a Texas Instruments Stellaris LM3S2793 Micro-
controller,12 which uses the ARM Cortex-M3 instruction set
architecture (ISA).
Two sets of pins from the processor’s pin conﬁguration
were of relevance to our work: (1) the processors pins asso-
ciated with the JTAG interface, and (2) the input/output port
pins of the processor.
Joint Test Action Group (JTAG) is commonly used to refer
to IEEE Standard 1149.1 [1]. JTAG can be used as a hardware
debugging interface in the processor.13 We used JTAG to
develop our HARVEY prototype, as the JTAG connection
allowed us to read out the CPU’s memory, including ﬂash
memory, read-only memory (ROM) and static random access
memory (SRAM). Although HARVEY is not limited to JTAG
as method to infect a PLC exploring further infection paths is
out of scope in this work.
Figure 4 shows the PLC’s CPU, i.e., a Texas Instruments
LM3S2793. The CPU’s pin allocations are marked as well as
the connection of the JTAG pins to the solder pad on the right
side of the board.
A. Preparation
The ultimate goal of our work was to modify the ﬁrmware
of the PLC to manipulate input and output values of the PLC
without changing the PLC’s control logic. To accomplish that
12The processor’s data sheet can be found online and reveals important
details about the processor [49].
13Although the JTAG header was physically compatible to typical ARM
Cortex-M3 10-pin JTAG connection, the pin conﬁguration was different.
TABLE I: TI LM3S2793 Memory Map
Start
End
Description
0x00000000
0x00020000
0x01000000
0x20000000
0x20010000
0x22000000
...
0x4005C000
0x4005D000
0x4005E000
0x4005F000
...
Reserved
ROM
0x0001FFFF On-chip Flash
0x00FFFFFF
0x1FFFFFFF
0x2000FFFF On-chip SRAM
0x21FFFFFF
0x221FFFFF
alias
Reserved
Bit-band
SRAM
0x4005CFFF GPIO Port E (AHB)
0x4005DFFF GPIO Port F (AHB)
0x4005EFFF GPIO Port H (AHB)
0x4005FFFF GPIO Port G (AHB)
...
...
we had to ﬁnd the ﬁrmware functions which are responsible
for handling the PLC’s inputs and outputs.
The ﬁrst step in analyzing the ﬁrmware of our prototyping
platform was to obtain images of the ﬁrmware. We used two
approaches: (1) We downloaded ﬁrmware update packages
from the vendor’s website and extracted the ﬁrmware images
from them.14 (2) We extracted the ﬁrmware from the PLC’s
memory using the JTAG interface of the PLC’s main processor.
Firmware Images. Allen Bradley PLCs (at least Compact-
Logix L1 and ControlLogix L61 models) have two ﬁrmwares.
(1) A base ﬁrmware which is shipped with the PLC which
provides a minimal function set of the PLC, and (2) a full
ﬂashed ﬁrmware which provides all functionality for operation.
The latter will be referred to as full ﬁrmware for the rest of
the paper, while the ﬁrst we call base ﬁrmware.
The base ﬁrmware can only be extracted from the PLC’s
memory as it is not contained in the ﬁrmware update package.
The base ﬁrmware is intended to have one central functionality:
to recover the PLC in case an update of the full ﬁrmware did
not succeed. Hence, the base ﬁrmware should not be updated.
The full ﬁrmware of the PLC can be updated, with several
versions are available for download from the vendor’s web-
site [42]. It can be updated remotely over Ethernet or locally
via USB or SD card.
Memory Layout and I/O mapping. The TI LM3S2793 maps
all ﬂash memory, ROM, SRAM as well as peripheral devices
into one contiguous memory address space. Table I shows parts
of the memory map of the CPU [49].
B. I/O Interception
To recover the functionality of the ﬁrmware we use ofﬂine
as well as online analysis of the ﬁrmware. Ofﬂine analysis
was done with standard reverse engineering tools such as hex
editors and dis-assemblers. The online analysis was possible
due to the JTAG connection we could establish with the PLC.
Ofﬂine Firmware Analysis. We disassembled the downloaded
and extracted ﬁrmware binary ﬁles from the ﬁrmware update
ﬁle. However, only a small portion of the code was initially
to improve the results we utilized
disassembled correctly,
14Vendors like Siemens encrypt their ﬁrmware images in update packages.
However, the key to decrypt them have been published [8]. The ﬁrmware
images associated with our PLC are not encrypted.
techniques presented in
[7]. This code provided a greater
insight of higher level functionality of the ﬁrmware, but the
memory we extracted directly from the CPU through the JTAG
interface proved to be more fruitful. Using the JTAG-extracted
memory ﬁles, we ﬁrst aimed to get a general understanding
of the functionality of the ﬁrmware. Using the ARM Cortex-
M3 documentation, we were able to identify the nested vector
interrupt controller (NVIC) table. This table contained the ad-
dress of the reset handler, i.e., where the device starts execution
after a reset. Using this address, we were able to follow the
boot sequence and disassemble the core functionality in the
PLC’s ﬂash memory as well as all functions called in SRAM
and ROM.
of
to functions
More importantly, we used the ROM data sheets for
Stellaris LM3S devices to identify calls to the micro-
controller’s built-in functions [48]. This helped to iden-
tify when important calls
interacted
with system peripherals were executed.
Identifying these
functions gave us a basic understanding as to how the
ﬁrmware was conﬁguring the controller. Speciﬁcally,
the
functions to control the CPU’s general purpose input/output
(GPIO) ports, such as the ROM GPIOPinTypeGPIOInput,
ROM GPIOPinTypeGPIOOutput, ROM GPIOPinWrite and
ROM GPIOPinRead functions, provided us with functions to
look out for as we disassembled the ﬁrmware.
that
One other detail worth mentioning is that we were able to
ﬁnd where the NVIC table was being re-based after the initial
boot sequence. Typically the NVIC is re-based to address
0x4000 in ARM Cortex-M3 processors. This was conﬁrmed in
our dis-assembly as the vector table offset (located at address
0xE000.ED08) was set
the end of the boot
sequence. By knowing where the NVIC is, we knew where the
addresses of the interrupt service routines (ISR) speciﬁed in
the LM3S2793 documentation were located. In the following
section, we will see the signiﬁcance of this detail.
to 0x4000 at
Online Firmware Analysis. The JTAG connection of the PLC
allowed us to analyze and debug ﬁrmware during its execution.
We could set break points, step through functions, read and
write memory and modify registers of the CPU while it is
executing. We used this to follow the control ﬂow of the
ﬁrmware and discover reachable code sections.
Through the analysis we could identify the main loop
of the ﬁrmware. We coupled our online analysis with our
ofﬂine analysis to step through functions and follow along the
disassembled paths. By knowing the boundaries of the main
loop, we could investigate where the interaction between the
LEDs/HMI and the GPIO Ports occurred. The PLC is equipped
with LEDs, one per I/O pin. Similarly, the input values sent