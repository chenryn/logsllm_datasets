# Extreme Privilege Escalation on Windows 8/UEFI Systems

**Â© 2014 The MITRE Corporation. All rights reserved.**

**Authors:**
- Corey Kallenberg (@coreykal)
- Xeno Kovah (@xenokovah)
- John Butterworth (@jwbutterworth3)
- Sam Cornwell (@ssc0rnwell)

## Introduction

### About the Authors
We are trusted computing and firmware security researchers at The MITRE Corporation.

### About MITRE
- A not-for-profit company that operates six U.S. Government "Federally Funded Research & Development Centers" (FFRDCs) dedicated to working in the public interest.
- Technical lead for several standards and structured data exchange formats, including CVE, CWE, OVAL, CAPEC, STIX, TAXII, etc.
- The first .org domain on the ARPANET, distinct from .mil, .gov, .com, .edu, and .net.

## Attack Model (1 of 2)
An attacker has gained administrative access on a victim's Windows 8 machine but is still constrained by the limitations of Ring 3.

## Attack Model (2 of 2)
Attackers typically seek:
- More Power
- More Persistence
- More Stealth

## Typical Post-Exploitation Privilege Escalation
Starting with x64 Windows Vista, kernel drivers must be signed and contain an Authenticode certificate. In a typical post-exploitation privilege escalation, the attacker aims to bypass the signed driver requirement to install a kernel-level rootkit. Various methods include:
- Exploiting existing kernel drivers
- Installing a legitimate (signed), but vulnerable, driver and exploiting it

This type of privilege escalation has been well-documented by other researchers [6][7]. However, there are more extreme options an attacker may consider.

## Other Escalation Options (1 of 2)
Other interesting post-exploitation options include:
- Bootkitting the system
- Installing an SMM rootkit
- Installing a BIOS rootkit

## Other Escalation Options (2 of 2)
Modern platforms have protections against these exotic post-exploitation privilege escalations:
- Bootkitting the system (prevented by Secure Boot)
- Installing an SMM rootkit (SMM is locked on modern systems)
- Installing a BIOS rootkit (SPI Flash protected by lockdown mechanisms)

## Extreme Privilege Escalation (1 of 2)
This presentation focuses on extreme privilege escalation:
- An administrator userland process exploits the platform firmware (UEFI).
- This is achieved through a new API introduced in Windows 8.

## Extreme Privilege Escalation (2 of 2)
Once the attacker has arbitrary code execution in the context of the platform firmware, they can:
- Control other "rings" on the platform (SMM, Ring 0)
- Persist beyond operating system re-installations
- Permanently "brick" the victim's computer

## Target of Attack
Modern Windows 8 systems come with UEFI firmware, which is designed to replace conventional BIOS and provides a well-defined interface to the operating system.

## Windows 8 API
Windows 8 introduces an API that allows a privileged userland process to interact with a subset of the UEFI interface.

## EFI Variable Creation Flow
Certain EFI variables can be created, modified, or deleted by the operating system, such as those controlling boot order and platform language. The firmware can also use EFI variables to communicate information to the operating system.

## EFI Variable Consumption
The UEFI variable interface allows a less privileged entity (admin in Ring 3) to produce data for a more complex entity (the firmware) to consume. This is similar to environment variable parsing attack surfaces on *nix systems.

## Previous EFI Variable Issues (1 of 2)
We co-discovered [13] with Intel some vulnerabilities associated with EFI Variables that allowed bypassing secure boot and/or bricking the platform.

## Previous EFI Variable Issues (2 of 2)
However, VU #758382 leveraged a proprietary Independent BIOS Vendor (IBV) implementation mistake. It would be more interesting to find a variable vulnerability more generic to UEFI.

## UEFI Vulnerability Proliferation
If an attacker finds a vulnerability in the UEFI "reference implementation," its proliferation across IBVs and OEMs could be widespread. We will discuss how this theory works in practice later.

## Auditing UEFI
The UEFI reference implementation is open source, making it easy to audit. Let the games begin:
- SVN checkout: `https://svn.code.sf.net/p/edk2/code/trunk/edk2/`
- Documentation: `http://tianocore.sourceforge.net/wiki/Welcome`

## Where to Start Looking for Problems?
Always start with areas where there is attacker-controlled input. Last year, we successfully exploited Dell systems by passing a specially crafted fake BIOS update. Let's see if UEFI has similar issues. The UEFI spec outlines a "Capsule update" mechanism, where the Capsule Update is initiated and guided by EFI variable contents controllable by the operating system.

## Capsule Scatter Write
To send a Capsule update for processing, the operating system fragments the firmware capsule across the address space.

## Capsule Processing Initiation
The operating system creates an EFI variable that describes the location of the fragmented firmware capsule. A "warm reset" then occurs, transitioning control back to the firmware.

## Capsule Coalescing
The UEFI code coalesces the firmware capsule back into its original form.

## Capsule Verification
UEFI parses the envelope of the firmware capsule and verifies that it is signed by the OEM.

## Capsule Consumption
The contents of the capsule are then consumed, including:
- Flashing contents to the SPI flash
- Running malware detection independent of the operating system
- Etc.

## Opportunities for Vulnerabilities
There are three main opportunities for memory corruption vulnerabilities in the firmware capsule processing code:
1. The coalescing phase
2. Parsing of the capsule envelope
3. Parsing of unsigned content within the capsule

Our audit of the UEFI capsule processing code revealed multiple vulnerabilities in the coalescing and envelope parsing code. The first "BIOS reflash" exploit was presented by Wojtczuk and Tereshkin, who found it by reading the UEFI code handling BMP processing and exploiting an unsigned splash screen image embedded in the firmware [1].

## Coalescing Bug #1
**Bug 1:** Integer overflow in capsule size sanity check
- A huge `CapsuleSize` may erroneously pass the sanity check.
- Location: `Edk2/MdeModulePkg/Universal/CapsulePei/Common/CapsuleCoalesce.c`

## Coalescing Bug #2
**Bug 2:** Integer overflow in fragment length summation
- `CapsuleSize` may be less than the true summation of fragment lengths.
- Location: `Edk2/MdeModulePkg/Universal/CapsulePei/Common/CapsuleCoalesce.c`

## Envelope Parsing Bug (Bug #3)
**Bug 3:** Integer overflow in multiplication before allocation
- `LbaCache` may be unexpectedly small if `NumBlocks` is huge.
- Location: `Edk2/MdeModulePkg/Core/Dxe/FwVolBlock/FwVolBlock.c`

## Miscellaneous Coalescing Bug (Bug #4)
**Bug 4:** Integer overflow in `IsOverlapped`
- Can erroneously return `False` if `Buff1 + Size1` overflows.
- This did not directly lead to a vulnerability but was necessary to exploit the other bugs.
- Location: `Edk2/MdeModulePkg/Universal/CapsulePei/Common/CapsuleCoalesce.c`

## Vulnerabilities Summary
We spent approximately one week auditing the UEFI reference implementation and discovered vulnerabilities in security-critical code. These vulnerabilities occur before the update is cryptographically verified. The presence of easily identifiable integer overflows in open-source and security-critical code is concerning. Is no one else looking here?

- Location: `ValidateCapsuleIntegrity: Edk2/MdeModulePkg/Universal/CapsulePei/Common/CapsuleCoalesce.c`

## Onward to Exploitation
The aforementioned code runs with read-write-execute permissions in flat protected mode with paging disabled, and there are no mitigations. However, successful exploitation in this unusual environment was non-trivial.

## Coalescing Exploit Attempt
**Attempt #1:** Provide a huge capsule size and clobber our way across the address space to some function pointer in the stack area.

## Coalescing Exploit Fail
Overwriting certain regions of the address space had undesirable results.