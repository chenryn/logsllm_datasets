© 2014 The MITRE Corporation. All rights reserved. 
C orey K allenberg  
Xeno  K ovah  
John B ut t erw orth  
Sam C ornw ell  
Extreme Privilege Escalation 
on Windows 8/UEFI Systems 
@ coreykal  
@ xenokovah  
@jw but terw orth3  
@ssc0rnw ell  
| 2 |  
Introduction 
 Who we are: 
– Trusted Computing and firmware security researchers at The 
MITRE Corporation 
 What MITRE is: 
– A not-for-profit company that runs six US Government "Federally 
Funded Research & Development Centers" (FFRDCs) dedicated to 
working in the public interest 
– Technical lead for a number of standards and structured data 
exchange formats such as CVE, CWE, OVAL, CAPEC, STIX, 
TAXII, etc 
– The first .org, !(.mil | .gov | .com | .edu | .net), on the ARPANET 
© 2014 The MITRE Corporation. All rights reserved.
| 3 |  
Attack Model (1 of 2) 
 An attacker has gained administrator access on a victim 
Windows 8 machine 
 But they are still constrained by the limits of Ring 3 
© 2014 The MITRE Corporation. All rights reserved.
| 4 |  
Attack Model (2 of 2) 
 Attackers always want 
– More Power 
– More Persistence 
– More Stealth 
© 2014 The MITRE Corporation. All rights reserved.
| 5 |  
Typical Post-Exploitation Privilege Escalation 
 Starting with x64 Windows vista, kernel drivers must be signed and contain 
an Authenticode certificate 
 In a typical post-exploitation privilege escalation, the attacker wants to 
bypass the signed driver requirement to install a kernel level rootkit 
 Various methods to achieve this are possible, including: 
– Exploit existing kernel drivers 
– Install a legitimate (signed), but vulnerable, driver and exploit it 
 This style of privilege escalation has been well explored by other 
researchers such as [6][7]. 
 There are other, more extreme, lands the attacker may wish to explore 
© 2014 The MITRE Corporation. All rights reserved.
| 6 |  
Other Escalation Options (1 of 2) 
 There are other more interesting post-exploitation options an 
attacker may consider: 
– Bootkit the system 
– Install SMM rootkit 
– Install BIOS rootkit 
© 2014 The MITRE Corporation. All rights reserved.
| 7 |  
Other Escalation Options (2 of 2) 
 Modern platforms contain protections against these more exotic 
post-exploitation privilege-escalations 
– Bootkit the system (Prevented by Secure Boot) 
– Install SMM rootkit (SMM is locked on modern systems) 
– Install BIOS rootkit (SPI Flash protected by lockdown mechanisms) 
© 2014 The MITRE Corporation. All rights reserved.
| 8 |  
Extreme Privilege Escalation (1 of 2) 
 This talk presents extreme privilege escalation 
– Administrator userland process exploits the platform firmware 
(UEFI) 
– Exploit achieved by means of a new API introduced in Windows 8 
© 2014 The MITRE Corporation. All rights reserved.
| 9 |  
Extreme Privilege Escalation (2 of 2) 
 Once the attacker has arbitrary code execution in the context of the 
platform firmware, he is able to: 
– Control other "rings" on the platform (SMM, Ring 0)  
– Persist beyond operating system re-installations 
– Permanently "brick" the victim computer 
© 2014 The MITRE Corporation. All rights reserved.
| 10 |  
Target Of Attack 
 Modern Windows 8 systems ship with UEFI firmware 
 UEFI is designed to replace conventional BIOS and provides a 
well defined interface to the operating system 
© 2014 The MITRE Corporation. All rights reserved.
| 11 |  
Windows 8 API 
 Windows 8 has introduced an API that allows a privileged 
userland process to interface with a subset of the UEFI interface 
© 2014 The MITRE Corporation. All rights reserved.
| 12 |  
EFI Variable Creation Flow 
 Certain EFI variables can be created/modified/deleted by the 
operating system 
– For example, variables that control the boot order and platform 
language 
 The firmware can also use EFI variables to communicate 
information to the operating system 
© 2014 The MITRE Corporation. All rights reserved.
| 13 |  
EFI Variable Consumption 
 The UEFI variable interface is a conduit by which a less privileged 
entity (admin Ring 3) can produce data for a more complicated 
entity (the firmware) to consume 
 This is roughly similar to environment variable parsing attack 
surface on *nix systems 
© 2014 The MITRE Corporation. All rights reserved.
| 14 |  
Previous EFI Variable Issues (1 of 2) 
 We’ve  already  co-discovered[13] with Intel some vulnerabilities 
associated with EFI Variables that allowed bypassing secure 
boot and/or bricking the platform 
© 2014 The MITRE Corporation. All rights reserved.
| 15 |  
Previous EFI Variable Issues (2 of 2) 
 However, VU #758382 was leveraging a proprietary Independent 
BIOS Vendor (IBV) implementation mistake, it would be more 
interesting if we could find a variable vulnerability more generic 
to UEFI 
© 2014 The MITRE Corporation. All rights reserved.
| 16 |  
UEFI Vulnerability Proliferation 
 If an attacker finds a vulnerability in the UEFI "reference 
implementation," its proliferation across IBVs and OEMs would 
potentially be wide spread. 
– More  on  how  this  theory  works  "in  practice"  later… 
© 2014 The MITRE Corporation. All rights reserved.
| 17 |  
Auditing UEFI 
 UEFI reference implementation is open source, making it easy to audit 
 Let the games begin:  
–
Svn checkout https://svn.code.sf.net/p/edk2/code/trunk/edk2/ 
http://tianocore.sourceforge.net/wiki/Welcome 
© 2014 The MITRE Corporation. All rights reserved.
| 18 |  
Where to start looking for problems? 
 Always start with wherever there is attacker-controlled input 
 We had good success last year exploiting Dell systems by 
passing an specially-crafted  fake  BIOS  update… 
 So let's see if UEFI has some of the same issues 
 The UEFI spec has outlined a "Capsule update" mechanism 
– Capsule Update is initiated and guided by EFI variable contents 
that are controllable by the operating system 
© 2014 The MITRE Corporation. All rights reserved.
| 19 |  
Capsule Scatter Write 
 To begin the process of sending a Capsule update for 
processing, the operating system takes a firmware capsule and 
fragments it across the address space 
© 2014 The MITRE Corporation. All rights reserved.
| 20 |  
Capsule Processing Initiation 
 The operating system creates an EFI variable that describes the 
location of the fragmented firmware capsule 
 A "warm reset" then occurs to transition control back to the 
firmware 
© 2014 The MITRE Corporation. All rights reserved.
| 21 |  
Capsule Coalescing 
 The UEFI code "coalesces" the firmware capsule back into its 
original form.  
© 2014 The MITRE Corporation. All rights reserved.
| 22 |  
Capsule Verification 
 UEFI parses the envelope of the firmware capsule and verifies 
that it is signed by the OEM 
© 2014 The MITRE Corporation. All rights reserved.
| 23 |  
Capsule Consumption 
 Contents  of  the  capsule  are  then  consumed…. 
– Flash contents to the SPI flash 
– Run malware detection independent of the operating system 
– Etc… 
© 2014 The MITRE Corporation. All rights reserved.
| 24 |  
Opportunities For Vulnerabilities 
 There are 3 main opportunities for memory corruption 
vulnerabilities in the firmware capsule processing code 
1.
The coalescing phase 
2.
Parsing of the capsule envelope 
3.
Parsing of unsigned content within the capsule 
Our audit of the UEFI capsule processing code yielded multiple 
vulnerabilities in the coalescing and envelope parsing code 
– The first "BIOS reflash" exploit was presented by Wojtczuk and 
Tereshkin. They found it by reading the UEFI code which handled 
BMP processing and exploiting an unsigned splash screen image 
embedded in a firmware[1] 
© 2014 The MITRE Corporation. All rights reserved.
| 25 |  
Coalescing Bug #1 
 Bug 1: Integer overflow in capsule size sanity check 
– Huge CapsuleSize may erroneously pass sanity check 
Edk2/MdeModulePkg/Universal/CapsulePei/Common/CapsuleCoalesce.c 
© 2014 The MITRE Corporation. All rights reserved.
| 26 |  
Coalescing Bug #2 
 Bug 2: Integer overflow in fragment length summation 
– CapsuleSize may be less than true summation of fragment lengths 
Edk2/MdeModulePkg/Universal/CapsulePei/Common/CapsuleCoalesce.c 
© 2014 The MITRE Corporation. All rights reserved.
| 27 |  
Envelope Parsing Bug (Bug #3)  
 Bug 3: Integer overflow in multiplication before allocation 
– LbaCache may be unexpectedly small if NumBlocks is huge 
Edk2/MdeModulePkg/Core/Dxe/FwVolBlock/FwVolBlock.c 
© 2014 The MITRE Corporation. All rights reserved.
| 28 |  
Miscellaneous Coalescing Bug (Bug #4) 
 Bug 4: Integer overflow in IsOverlapped 
– Can erroneously return False if Buff1+Size1 overflows 
– This  didn’t  directly  lead  to  a  vulnerability  but  we  had  to  abuse  it  to  
successfully exploit the other bugs 
Edk2/MdeModulePkg/Universal/CapsulePei/Common/CapsuleCoalesce.c 
© 2014 The MITRE Corporation. All rights reserved.
| 29 |  
Vulnerabilities Summary 
 We spent ~1 week looking at the UEFI reference implementation and 
discovered vulnerabilities in security critical code 
– The identified vulnerabilities occur before the update is cryptographically verified 
 The presence of easy to spot integer overflows in open source and security 
critical  code  is…  disturbing 
– Is no one else looking here? 
ValidateCapsuleIntegrity: Edk2/MdeModulePkg/Universal/CapsulePei/Common/CapsuleCoalesce.c 
© 2014 The MITRE Corporation. All rights reserved.
| 30 |  
Onward To Exploitation 
 The aforementioned code runs with read-write-execute permissions 
– Flat protected mode with paging disabled 
– No mitigations whatsoever 
 However, successful exploitation in this unusual environment was 
non-trivial 
© 2014 The MITRE Corporation. All rights reserved.
| 31 |  
Coalescing Exploit Attempt 
 Attempt #1: Provide a huge capsule size and clobber our way 
across the address space to some function pointer on the stack 
area 
© 2014 The MITRE Corporation. All rights reserved.
| 32 |  
Coalescing Exploit Fail  
 Overwriting certain regions of the address space had undesirable results 