title:Multi-Writer Searchable Encryption: An LWE-based Realization and Implementation
author:Lei Xu and
Xingliang Yuan and
Ron Steinfeld and
Cong Wang and
Chungen Xu
Multi-Writer Searchable Encryption: An LWE-based Realization
and Implementation
Lei Xu†§, Xingliang Yuan‡, Ron Steinfeld‡, Cong Wang§, and Chungen Xu†
† School of Science, Nanjing University of Science and Technology, China
‡ Faculty of Information Technology, Monash University, Australia
§ Department of Computer Science, City University of Hong Kong, China
PI:EMAIL,{xingliang.yuan,ron.steinfeld}@monash.edu,PI:EMAIL,PI:EMAIL
ABSTRACT
Multi-Writer Searchable Encryption, also known as public-key en-
cryption with keyword search(PEKS), serves a wide spectrum of
data sharing applications. It allows users to search over encrypted
data encrypted via different keys. However, most of the existing
PEKS schemes are built on classic security assumptions, which are
proven to be untenable to overcome the threats of quantum com-
puters. To address the above problem, in this paper, we propose a
lattice-based searchable encryption scheme from the learning with
errors (LWE) hardness assumption. Specifically, we observe that
the keys of each user in a basic scheme are composed of large-sized
matrices and basis of the lattice. To reduce the complexity of key
management, our scheme is designed to enable users to directly use
their identity for data encryption. We present several optimization
techniques for implementation to make our design nearly practical.
For completeness, we conduct rigorous security, complexity, and
parameter analysis on our scheme, and perform comprehensive
evaluations at a commodity machine. With a scenario of 100 users,
the cost of key generation for each user is 125s, and the cost of
searching a document with 1000 keywords is 13.4ms.
CCS CONCEPTS
• Security and privacy → Management and querying of en-
crypted data; Privacy-preserving protocols;
KEYWORDS
Multi-writer searchable encryption; cloud computing security; prac-
tical post-quantum security
ACM Reference Format:
Lei Xu†§, Xingliang Yuan‡, Ron Steinfeld‡, Cong Wang§, and Chungen Xu†.
2019. Multi-Writer Searchable Encryption: An LWE-based Realization and
Implementation. In ACM Asia Conference on Computer and Communications
Security (AsiaCCS ’19), July 9–12, 2019, Auckland, New Zealand. ACM, New
York, NY, USA, 12 pages. https://doi.org/10.1145/3321705.3329814
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
AsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand
© 2019 Association for Computing Machinery.
ACM ISBN 978-1-4503-6752-3/19/07...$15.00
https://doi.org/10.1145/3321705.3329814
1 INTRODUCTION
Searchable encryption (SE) [7, 12] is a promising cryptographic
scheme to mitigate massive data breaches. Using SE, a server is
enabled to search directly on encrypted data without decryption.
The work on SE can be classified into two categories, i.e., searchable
symmetric encryption (SSE) [12, 19, 35] and public key encryption
with keyword search (PEKS) [7]. Compared to SSE, PEKS is more
suitable for data sharing and exchanging applications like cloud
drive, messaging, and email systems, where user data needs to be
encrypted via their own different keys. In particular, PEKS allows
a user (writer) to use the public key of another user (reader) to
encrypt the data, which later can be searched by the reader.
Existing research on PEKS primarily focuses on how to en-
rich query functionality and realize data sharing, e.g., supporting
boolean, conjunctive, subset, rank [8, 14, 32] and multi-user queries
[30]. However, the security of these schemes relies on classic as-
sumptions, i.e., discrete logarithms or large integer factoring, which
have been proven to be unable to withstand the attack of quantum
computers [26, 33]. To address this potential threat, lattice-based
cryptography [2, 23, 25, 28, 29] has advanced rapidly in recent years.
In this paper, we aim to design a lattice-based PEKS scheme to
resist the threat of quantum computers. One possible approach is to
follow the methodology of traditional PEKS [1, 7], that is, treating
identities as keywords and leveraging anonymous identity-based
encryption (IBE) for equality testing whilst protecting keyword
privacy. However, directly adapting the above approach will intro-
duce high complexity in key management. By treating keywords as
identities, the system parameters and the master private key of the
IBE scheme are considered as the user’s public key and private key
in the PEKS scheme, respectively. In the context of the lattice-based
construction, if a lattice-based anonymous IBE scheme like [2, 11]
is used, the public and private keys of each user will be composed of
a number of large-sized matrices and the basis of the lattice. With
such an approach, it takes over 20 minutes to generate a user’s key
pair, as shown in our experiments later.
To address the above issue, we propose to further leverage the
philosophy of IBE, and devise a new lattice-based PEKS scheme
based on LWE. It allows the writer to use the reader’s identity
tag to encrypt keywords of documents directly. To realize this
goal, we modify the anonymous IBE schemes [2, 11] to allow the
users’ private keys in PEKS to be derived from the master key of
IBE. Specifically, we adapt coding techniques to map the user’s
identity into a matrix. After that, we use a lattice basis expansion
Session 2B: Advanced Encryption AlgorithmsAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand122technique [11] to compute a basis from the master basis and the
identity matrix as the user’s private key.
How to implement an efficient LWE-based PEKS scheme is also
not clear. The first challenge when implementing our scheme is to
find a full-rank basis of the lattice in an efficient manner, which is
the core operation in the key derivation algorithm. In the literature,
Alwen et al.’s work [4] introduces an approach to generate a short
basis associated with a random matrix. We improve their work and
introduce a customized gaussian elimination algorithm to fast solve
linear equations over finite fields. Second, we show how to extend
the basis of a lattice to any arbitrary dimension as the user’s private
key, and propose an optimization to generate multiple user keys in
a batch manner. Our contributions are summarized as follows:
• We propose an LWE-based PEKS scheme, which allows users
to encrypt documents via their identity tag. This feature
highly reduces the complexity of key management in appli-
cations of multi-writer searchable encryption.
• We perform detailed parameter analysis to ensure the cor-
rectness of the proposed scheme. Also, we present formal
security definitions of the proposed scheme and conduct a
rigorous security analysis.
• We implement our scheme and propose several optimization
techniques to improve the performance. In a moderate secu-
rity parameter setting (n = 256), our scheme takes 0.46 s to
encrypt one keyword, 6.12 s to generate a search token, and
13.4 ms to search a document with 1000 keywords. For key
derivation, the cost for a user is 226 s without optimization.
Through batch processing, the cost can be reduced to 125 s
per user for the scenario of 100 users.
Organization: The rest of this paper is organized as follows: Sec-
tion 2 discusses related work. Section 3 overviews the definition
of searchable encryption and our proposed scheme. Section 4 lists
related background knowledge on lattice and its security assump-
tion. Section 5 presents our scheme, and Section 6 gives the security
theorem of our proposed scheme under the LWE assumption and
performs a formal security analysis. Implementation and optimiza-
tion is introduced in Section 7, and evaluations are reported in
Section 8. We conclude the paper in Section 9.
2 RELATED WORK
The first study on PEKS is proposed by Boneh et al. [7]. Afterwards,
many researchers are committed to this topic. For example, some
work is designed to enrich the functionality of the existing PEKS
schemes, e.g., supporting conjunctive keyword search [14, 37] and
range search [8, 32]. However, existing PEKS schemes are built
under traditional Turing computing assumptions and do not con-
sider the potential threats of quantum computing. We know that
in the existence of quantum computers, most of the cryptographic
schemes and protocols based on number theory and bilinear maps
are no longer secure. It has been proven that the difficult prob-
lems such as big integer decomposition and discrete logarithm are
efficiently solvable in quantum computing.
To deal with the attacks from quantum computers, the lattice
becomes a prevailing consensus. Many problems on lattices have
been proven to be NP hard, such as the shortest vector problem
(SVP) and the closest vector problem (CVP) [27]. Schemes con-
structed from the lattice usually bring the following advantages: (1)
Quantum polynomial algorithm has not been found due to difficult
problems on the lattice. (2) Operations on the lattice are normally
linear operations, which are more efficient than RSA, number the-
ory and coding techniques [9]. In the past decade, lattice-based
constructions for signature, encryption, key agreement protocols,
and private stream aggregation (to just list a few) [5, 15, 17, 22]
have been proposed. However, little work focuses on lattice-based
searchable encryption.
Recently, Behnia et al. [6] propose two searchable encryption
schemes based on NTRU and LWE respectively. For the first scheme,
its security is derived from NTRU, which is controversial due to lack
of formal security reduction proof [27]. For the LWE-based scheme,
the construction is built on a known technique [1] which provides a
transformation to convert an anonymous identity-based encryption
scheme to a basic PEKS scheme. This scheme has the following
drawbacks. First, the public key of users in their scheme is a basis
with size O(nm log q), where q is a prime integer, n is the security
parameter and m is the dimension of the lattice. It is not efficient for
the storage and management in applications with a large number
of users. This situation is alleviated in our scheme, where users can
use a short identity string rather than a large matrix as their public
parameter to encrypt data. A detailed comparison can be found
later in Section 5 and Section 8. Second, they do not implement
their LWE-based scheme and only report simulated results. In this
paper, we propose several optimization techniques and are the first
to implement an LWE-based searchable encryption scheme.
There are also some SSE schemes [16, 34, 38] which focus on the
multi-user setting. Their techniques are designed for the scenario
of one writer and multiple readers.
3 PROBLEM STATEMENT
3.1 Overview
Our scheme is applicable to a scenario with three parties, i.e., users,
a cloud server, and a private key generator (PKG). Each user plays
a role of data writer or data reader. Data writers encrypt the data
and store it to the cloud server, while data readers expect to query
the data in the encrypted form. The PKG generates the system
parameters and private key for each user according to her unique
identity tag, e.g., email or address.
The overview of our scheme is illustrated as follows. When a
user enrolls, she is required to register at the PKG with her identity
tag. We assume that the PKG can be an authority able to verify
the identity of that user. After registration, it will generate and
issue her a private key based on her tag. When a user (writer)
would like to share some sensitive documents, she encrypts the
keywords orderly parsed from each document and sends them to
the cloud server. Here the ciphertext is generated by the public
system parameters and the reader’s tag. When the reader wants to
search for documents containing a certain keyword, she generates
a search token from the keyword and sends it to the cloud server.
Then the server performs the search algorithm that processes the
token against the keyword ciphertexts of each document. If a match
is found, all the keyword ciphertexts in the matched document are
returned to the reader, and are decrypted to recover this document.
Session 2B: Advanced Encryption AlgorithmsAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand123In our targeted application scenario, we assume that the PKG is
a trusted entity and it sends the valid private key to the users in
an encrypted and authenticated channel. The cloud server follows
the protocols but is interested in the underlying contents of search
tokens and ciphertext.
3.2 Functions and Security Definitions
We give the definition of our proposed searchable encryption
scheme as follows:
Definition 3.1. Our scheme consists of five polynomial-time al-
gorithms:
- Setup: takes the security parameter λ as input, and outputs the
system parameters sp with the master secret key msk.
as input, and outputs the secret key skτ .
input, and generates a token stw .
text C of w.
- Derive: takes sp, master secret key msk and an identity tag τ
- TokGen: takes the user’s private key skτ and a keyword w as
- Encrypt: takes sp, τ and w as input, and generates the cipher-
- Search: takes sp, C, and stw as input, outputs 1 if C matches w
and 0 otherwise.
Definition 3.2. Let W be a set of keywords and C be the cor-
responding ciphertext under the given identity tag τ, we say that
our searchable encryption scheme from lattice, Π = (Setup, Derive,
TokGen, Encrypt, Search), is correct if
Pr[Search(C,TokGen(skτ , w)) = w] = 1
where w ∈ W.
Definition 3.3. Let λ be the security parameter and A be the
adversary. The security game between the adversary A and the
challenger B is simulated as follows:
-Setup: B runs the Setup(λ) algorithm to generate (sp, msk). A
is given with the parameter sp and outputs a target identity tag τ∗.
- Phase 1: A asks B for the private key of the identity tag and
the token of keyword w for an identity of her choice.
(1) Derive Query. When A asks for the private key of a certain
tag τ (cid:44) τ∗, the challenger returns skτ as response.
(2) Token Query. When A asks for the token of keyword w for
any tag τ, B responds by first running the Derive algorithm
to obtain the private key skτ , and then running the TokGen
algorithm to obtain a token stw .
- Challenge: At some point, A sends B two keywords w0, w1
on which it wishes to be challenged. The only restriction is that
neither w0 nor w1 has been queried for the token in Phase 1. B picks
a random bit b ∈ {0, 1} and generates the searchable ciphertext
C∗ for wb with the tag τ∗, then gives C∗ to A as the challenge
ciphertext.
- Phase 2: A continues to perform Token Query over keyword
w of her choice as long as w (cid:44) w0, w1.
- Guess: Eventually, A outputs a guess b′ ∈ {0, 1} and wins the
game if b = b′. Such an adversary A is called an IND-sID-CKA
(selective tag and chosen keyword) adversary. A’s advantage in
attacking the scheme is defined as the following function of the
Table 1: Notations
Notation Description
security parameter
identity tag string
tag space consists of all users’ unique tags
keyword selected from the document
λ
τ
T
w
W keyword space with all keywords in DB
STw
∥S∥
Zq
⌊x⌋
⌊x⌉
⌈x⌉
x−1