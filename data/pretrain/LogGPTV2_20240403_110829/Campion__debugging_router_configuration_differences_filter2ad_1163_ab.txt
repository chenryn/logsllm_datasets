of identifying all relevant lines of the configuration text localization.
In the output shown in Table 2(a), the Action and Text rows
indicate that advertisements for the relevant prefixes match the
NETS prefix list in the Cisco route map and are therefore rejected,
but these prefixes fall through to the last term in the Juniper route
map and are accepted. Careful inspection reveals the problem: in the
Cisco route map, NETS matches prefixes with lengths between 16
1https://github.com/atang42/batfish/tree/rm-localize
750
1
2
3
4
5
6
7
8
9
10
11
12
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
ip prefix-list NETS permit 10.9.0.0/16 le 32
ip prefix-list NETS permit 10.100.0.0/16 le 32
!
ip community-list standard COMM permit 10:10
ip community-list standard COMM permit 10:11
!
route-map POL deny 10
match ip address NETS
route-map POL deny 20
match community COMM
route-map POL permit 30
set local-preference 30
(a) Excerpt from the Cisco route map
prefix-list NETS {
10.9.0.0/16;
10.100.0.0/16;
}
community COMM members [10:10 10:11];
policy-statement POL {
term rule1 {
from prefix-list NETS;
then reject;
}
term rule2 {
from community COMM;
then reject;
}
term rule3 {
then {
local-preference 30;
accept;
}
}
}
(b) Excerpt from the Juniper route map
Figure 1: Cisco and Juniper route maps with subtle differ-
ences
and 32, while in the Juniper route map it only matches prefixes with
lengths of exactly 16. Thus, a prefix like 10.9.1.0/24 is matched
by the Cisco route map but not by the Juniper route map.
The second result that Campion produces (Table 2(b)) identi-
fies a second, unrelated configuration difference. The Included
Prefixes and Excluded Prefixes rows show that this difference
occurs for advertisements of all prefixes other than those in the
ranges of the NETS prefix list. While Campion can find all differ-
ences and identify all relevant IP prefixes, for other fields of the
route advertisement it currently provides a single example. In this
case, the output indicates that this difference occurs when the route
advertisement contains only the community 10:10. The Action
and Text rows show that the Cisco route map matches the adver-
tisement against the community list COMM and rejects it, while the
Juniper route map again falls through to the last rule. This differ-
ence reveals a subtle error: COMM in the Cisco route map matches
route advertisements containing either the community 10:10 or
10:11, whereas COMM in the Juniper route map erroneously matches
only advertisements tagged with both communities.
Campus network operators confirmed both of the above behav-
ioral differences as configuration errors. Further, the errors are
subtle and have existed since at least July 2017. The network op-
erator commented, "your config-analysis tool is great. It’s highly
unlikely anyone would detect the functional discrepancies just by
SIGCOMM ’21, August 23–27, 2021, Virtual Event, USA
Tang et al.
cisco_router
juniper_router
cisco_router
juniper_router
Included
Prefixes
Excluded
Prefixes
Policy Name
Action
10.9.0.0/16 : 16-32
10.100.0.0/16 : 16-32
10.9.0.0/16 : 16-16
10.100.0.0/16 : 16-16
POL
REJECT
Text
route-map POL deny 10
match ip address NETS
POL
SET LOCAL PREF 30
ACCEPT
rule3 {
then {
local-preference 30;
accept;
Included
Prefixes
Excluded
Prefixes
Community
Policy Name
Action
}
}
(a) Difference 1
cisco_router
juniper_router
0.0.0.0/0 : 0-32
10.9.0.0/16 : 16-32
10.100.0.0/16 : 16-32
10:10
POL
REJECT
POL
SET LOCAL PREF 30
ACCEPT
rule3 {
then {
local-preference 30;
accept;
Text
route-map POL deny 20
match community COMM
}
}
(b) Difference 2
Table 2: Campion result when checking equivalence of con-
figurations in Figure 1 using a Semantic Check
Route received (Cisco)
Prefix: 10.9.0.0/17
Route received (Juniper)
Prefix: 10.9.0.0/17
Packet
Forwarding
dstIp: 10.9.0.0
Juniper router forwards (BGP)
Cisco router does not forward
Table 3: Minesweeper result when checking equivalence of
configurations from Figure 1
eyeballing the configs." As described in §5.2, Campion found addi-
tional differences that have been removed here to keep the example
simple.
Comparison with Minesweeper. Minesweeper [3] builds a logi-
cal representation of the network behavior, modeling the routing
process and forwarding behavior. It then uses a satisfiability modulo
theories (SMT) solver to answer verification queries. Minesweeper
supports a behavioral equivalence check of individual routers, but it
does so by checking that the logical representation of both routers’
entire configurations are equivalent. A major drawback of this
monolithic approach is the difficulty to diagnose the source of the
error — any identified difference could be caused by BGP configu-
ration, OSPF configuration, ACLs, or static routes.
751
Prefix
Next Hop
Admin. Distance
10.1.1.2/31
10.2.2.2
1
Text
ip route 10.1.1.2
255.255.255.254 10.2.2.2
None
None
None
Table 4: Campion result when checking equivalence of static
routes using a Structural Check
In order to make the comparison more fair, we adapted Minesweeper
to only check behavioral equivalence of two route maps. Specifi-
cally, Minesweeper checks that its logical representations of the
two route maps are equivalent: whenever they receive the same
set of route advertisements, they produce the same forwarding
behavior for all packets. Table 3 shows the output of this modified
version of Minesweeper on the above example. There is a single
counterexample indicating that, when both routers receive a route
advertisement with prefix 10.9.0.0/17, they will produce different
rules for forwarding packets with destination IP address 10.9.0.0:
the Juniper router will forward them, while the Cisco router will
not.
Minesweeper’s output identifies a behavioral difference between
the two route maps that corresponds to Campion’s output shown
in Table 2(a). However, Minesweeper’s output is lacking in several
important ways. (1) It only provides information about a single
behavioral difference. However, as explained earlier, there are actu-
ally two unrelated configuration differences between these route
maps (Table 2(a) and Table 2(b)). (2) For the error that Minesweeper
does identify, it only provides a single concrete example, with a
specific route advertisement and destination IP prefix. To fully fix
the problem of unintended differences between the two route maps,
operators must understand the set of all route advertisements that
produce this behavioral difference. Having this set explicitly also
provides an indication of the scope of the problem. (3) Minesweeper
provide no information about what parts of the route maps are re-
sponsible for the behavioral difference.
It is possible to modify Minesweeper again, this time to produce
multiple concrete examples. This can be done by simply querying
the SMT solver multiple times, each time including additional logi-
cal constraints that disallow previously generated counterexamples.
This approach could potentially alleviate the first two issues de-
scribed in the previous paragraph, but our experiments with this
approach illustrate that it is not very effective. On the above exam-
ple, running Minesweeper does provide counterexamples from both
classes of differences from Table 2 but it takes 7 counterexamples in
order to have at least one for each prefix range that is relevant for
Difference 1. Further, the approach is fragile: when we replaced the
number 32 in the second line of the Cisco configuration (Figure 1(a))
with 31, it took 27 counterexamples for Minesweeper to provide a
violation of Difference 1 instead of Difference 2.
2.2 Static Route Diffs via Structural Checks
Campion detects differences in configuration components such as
static routes and OSPF costs using a structural equivalence check.
For example, for static routes Campion simply considers the set
Campion: Debugging Router Configuration Differences
SIGCOMM ’21, August 23–27, 2021, Virtual Event, USA
Packet
dstIp: 10.1.1.2
Forwarding
Cisco router forwards (static)
Juniper router does not forward
Table 5: Minesweeper result when checking equivalence of
static routes
of static routes in each router and identifies all structural differ-
ences: cases where a route is present in one set but not the other,
or where a route is present in both but with different attributes
such as the next hop and administrative distance. This technique
illustrates another advantage of our modular approach. Because we
are checking configuration components in isolation from the rest of
the configurations, for many components a simple structural check
is as precise as a behavioral check via a semantic representation,
while providing better localization and understandability for users.
An example of an output produced by Campion when checking
static routes is shown in Table 4. This output shows that in the
Cisco router, a static route exists that sends packets destined to
10.1.1.2/31 to 10.2.2.2, but there is no such route in the Juniper
router. Differences like this were found in both the university and
cloud networks.
Table 5 shows the output that Minesweeper produces for the
same example. Minesweeper can identify that the forwarding was
caused by a static route, but it does not determine the prefix of the
static route, the other relevant fields like the administrative distance,
or the lines of the configuration. Hence operators have to search
through a potentially large set of static routes and determine which
one would affect the routing of packet to a 10.1.1.2. Further, if
there were multiple static-route differences, Minesweeper would
only find one, while Campion would identify all.
3 Design and Algorithms
We describe Campion’s design and core algorithms. Campion’s