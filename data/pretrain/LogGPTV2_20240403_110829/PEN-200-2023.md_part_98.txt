$dirsearcher = New-Object System.DirectoryServices.DirectorySearcher($direntry)
$dirsearcher.FindAll()
Listing 728 - Directory and DireoctorySearcher to our script
As indicated in Listing 728, we have added the $direntry variable, which is encapsulating our
obtained LDAP path. The $dirsearcher vanriable contains the $direntry variable and uses the
information as the SearchRoot, pointing to the top of the hierarchy where DirectorySearcher will
run the FindAll() method.
i
Now since we start the search azt the top and aren’t filtering the results, it will generate a lot of
output. However, let’s run it:
D
PS C:\Users\stephanie> .\enumeration.ps1
Path
----
LDAP://DC1.corp.com/DC=corp,DC=com
LDAP://DC1.corp.com/CN=Users,DC=corp,DC=com
LDAP://DC1.corp.com/CN=Computers,DC=corp,DC=com
LDAP://DC1.corp.com/OU=Domain Controllers,DC=corp,DC=com
LDAP://DC1.corp.com/CN=System,DC=corp,DC=com
LDAP://DC1.corp.com/CN=LostAndFound,DC=corp,DC=com
LDAP://DC1.corp.com/CN=Infrastructure,DC=corp,DC=com
LDAP://DC1.corp.com/CN=ForeignSecurityPrincipals,DC=corp,DC=com
LDAP://DC1.corp.com/CN=Program Data,DC=corp,DC=com
LDAP://DC1.corp.com/CN=Microsoft,CN=Program Data,DC=corp,DC=com
LDAP://DC1.corp.com/CN=NTDS Quotas,DC=corp,DC=com
LDAP://DC1.corp.com/CN=Managed Service Accounts,DC=corp,DC=com
LDAP://DC1.corp.com/CN=Keys,DC=corp,DC=com
1028 (Microsoft), https://learn.microsoft.com/en-us/dotnet/api/system.directoryservices.directorysearcher.searchroot?view=dotnet-
plat-ext-6.0
1029 (Microsoft), https://learn.microsoft.com/en-us/dotnet/api/system.directoryservices.directorysearcher.findall?view=dotnet-plat-ext-
7.0#system-directoryservices-directorysearcher-findall
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 700
Made in Morocco
Penetration Testing with Kali Linux
LDAP://DC1.corp.com/CN=WinsockServices,CN=System,DC=corp,DC=com
LDAP://DC1.corp.com/CN=RpcServices,CN=System,DC=corp,DC=com
LDAP://DC1.corp.com/CN=FileLinks,CN=System,DC=corp,DC=com
LDAP://DC1.corp.com/CN=VolumeTable,CN=FileLinks,CN=System,DC=corp,DC=com
LDAP://DC1.corp.com/CN=ObjectMoveTable,CN=FileLinks,CN=System,DC=corp,DC=com
...
Listing 729 - Using our script to search AD
As shown in the truncated output of Listing 729, the script does indeed generate a lot of text. In
fact, we are receiving all objects in the entire domain. This does at least prove that the script is
working as expected.
Filtering the output is rather simple, and there are several ways to do so. One way is to set up a
filter that will sift through the samAccountType1030 attribute, which is an attribute applied to all
user, computer, and group objects.
y
The official documentation reveals different values of the samAccountType attribute, but we’ll
start with 0x30000000 (decimal 805306368), which will enumerate all users in the domain. To
k
implement the filter in our script, we can simply add the filter to the $dirsearcher.filter as shown
below:
s
$PDC =
[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().PdcRoleOwner.Nam
o
e
$DN = ([adsi]'').distinguishedName
$LDAP = "LDAP://$PDC/$DN" n
$direntry = New-Object System.DirectoryServices.DirectoryEntry($LDAP)
i
$dirsearcher = New-Object System.DirectoryServices.DirectorySearcher($direntry)
z
$dirsearcher.filter="samAccountType=805306368"
$dirsearcher.FindAll()
Listing 730D - Using samAccountType attribute to filter normal user accounts
Running our script displays all user objects in the domain:
PS C:\Users\stephanie> .\enumeration.ps1
Path Properties
---- ----------
LDAP://DC1.corp.com/CN=Administrator,CN=Users,DC=corp,DC=com {logoncount, codepage,
objectcategory, description...}
LDAP://DC1.corp.com/CN=Guest,CN=Users,DC=corp,DC=com {logoncount, codepage,
objectcategory, description...}
LDAP://DC1.corp.com/CN=krbtgt,CN=Users,DC=corp,DC=com {logoncount, codepage,
objectcategory, description...}
LDAP://DC1.corp.com/CN=dave,CN=Users,DC=corp,DC=com {logoncount, codepage,
objectcategory, usnchanged...}
LDAP://DC1.corp.com/CN=stephanie,CN=Users,DC=corp,DC=com {logoncount, codepage,
objectcategory, dscorepropagatio...
LDAP://DC1.corp.com/CN=jeff,CN=Users,DC=corp,DC=com {logoncount, codepage,
objectcategory, dscorepropagatio...
LDAP://DC1.corp.com/CN=jeffadmin,CN=Users,DC=corp,DC=com {logoncount, codepage,
1030 (Microsoft, 2020), https://learn.microsoft.com/en-us/windows/win32/adschema/a-samaccounttype
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 701
Made in Morocco
Penetration Testing with Kali Linux
objectcategory, dscorepropagatio...
LDAP://DC1.corp.com/CN=iis_service,CN=Users,DC=corp,DC=com {logoncount, codepage,
objectcategory, dscorepropagatio...
LDAP://DC1.corp.com/CN=pete,CN=Users,DC=corp,DC=com {logoncount, codepage,
objectcategory, dscorepropagatio...
LDAP://DC1.corp.com/CN=jen,CN=Users,DC=corp,DC=com {logoncount, codepage,
objectcategory, dscorepropagatio
Listing 731 - Receiving all users in the domain filtering on samAccountType
This is great information to have, but we need to develop it a little further. When enumerating AD,
we are very interested in the attributes of each object, which are stored in the Properties field.
Knowing this, we can store the results we receive from our search in a new variable. We’ll iterate
through each object and print each property on its own line via a nested loop as shown below.
$domainObj = [System.DirectoryServices.ActiveDirectory.Domainy]::GetCurrentDomain()
$PDC = $domainObj.PdcRoleOwner.Name
$DN = ([adsi]'').distinguishedName
k
$LDAP = "LDAP://$PDC/$DN"
$direntry = New-Object System.DirectoryServices.DirectoryEntry($LDAP)
s
$dirsearcher = New-Object System.DirectoryServices.DirectorySearcher($direntry)
$dirsearcher.filter="samAccountType=805306368o"
$result = $dirsearcher.FindAll()
Foreach($obj in $result) n
{
Foreach($prop in $obj.Properties)
{ i
$prop z
}
D
Write-Host "-------------------------------"
}
Listing 732 - Adding a nested loop which will print each property on its own line
This complete script will search through AD and filter the results based on the samAccountType
of our choosing, then place the results into the new $result variable. It will then further filter the
results based on two foreach loops. The first loop will extract the objects stored in $result and
place them into the $obj variable. The second loop will extract all the properties for each object
and store the information in the $prop variable. The script will then print $prop and present the
output in the terminal.
While the Write-Host command is not required for the script to function, it does print a line
between each object. This helps make the output somewhat easier to read.
The script will output lots of information, which can be overwhelming depending on the existing
number of domain users. The Listing below shows a partial view of jeffadmin’s attributes:
PS C:\Users\stephanie> .\enumeration.ps1
...
logoncount {173}
codepage {0}
objectcategory {CN=Person,CN=Schema,CN=Configuration,DC=corp,DC=com}
dscorepropagationdata {9/3/2022 6:25:58 AM, 9/2/2022 11:26:49 PM, 1/1/1601
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 702
Made in Morocco
Penetration Testing with Kali Linux
12:00:00 AM}
usnchanged {52775}
instancetype {4}
name {jeffadmin}
badpasswordtime {133086594569025897}
pwdlastset {133066348088894042}
objectclass {top, person, organizationalPerson, user}
badpwdcount {0}
samaccounttype {805306368}
lastlogontimestamp {133080434621989766}
usncreated {12821}
objectguid {14 171 173 158 0 247 44 76 161 53 112 209 139 172 33
163}
memberof {CN=Domain Admins,CN=Users,DC=corp,DC=com,
CN=Administrators,CN=Builtin,DC=corp,DC=com}
whencreated {9/2/2022 11:26:48 PM} y
adspath
{LDAP://DC1.corp.com/CN=jeffadmin,CN=Users,DC=corp,DC=com}
useraccountcontrol {66048} k
cn {jeffadmin}
countrycode {0}
s
primarygroupid {513}
whenchanged {9/19/2022 6:44:22 AM}
lockouttime {0} o
lastlogon {133088312288347545}
distinguishedname {CN=jeffadmin,CN=Users,DC=corp,DC=com}
admincount {1} n
samaccountname {jeffadmin}
objectsid {1 5 0 0 0 0 0 5 21 0 0 0 30 221 116 118 49 27 70 39
209 101 53 106 82 4 0 0} i
lastlogoff z {0}
accountexpires {9223372036854775807}
...
D
Listing 733 - Running script, printing each attribute for “jeffadmin”
We can filter based on any property of any object type. In the example below, we have made two
changes. First, we have changed the filter to use the name property to only show information for
jeffadmin. Additionally, we have added .memberof to the $prop variable to only display the groups
jeffadmin is a member of:
$dirsearcher = New-Object System.DirectoryServices.DirectorySearcher($direntry)
$dirsearcher.filter="name=jeffadmin"
$result = $dirsearcher.FindAll()
Foreach($obj in $result)
{
Foreach($prop in $obj.Properties)
{
$prop.memberof
}
Write-Host "-------------------------------"
}
Listing 734 - Adding the name property to the filter and only print the “memberof” attribute in the nested loop
Let’s run the script:
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 703
Made in Morocco
Penetration Testing with Kali Linux
PS C:\Users\stephanie> .\enumeration.ps1
CN=Domain Admins,CN=Users,DC=corp,DC=com
CN=Administrators,CN=Builtin,DC=corp,DC=com
Listing 735 - Running script to only show jeffadmin and which groups he is a member of
This confirms that jeffadmin is indeed a member of the Domain Admins group.
We can use this script to enumerate any object available to us in AD. However, in the current
state, this would require us to make further edits to the script itself based on what we wish to
enumerate.
Instead, we can make the script more flexible, allowing us to add the required parameters via the
command line. For example, we could have the script accept the samAccountType we wish to
enumerate as a command line argument.
There are many ways we can accomplish this. One way is to simyply encapsulate the current
functionality of the script into an actual function. An example of this is shown below.
k
function LDAPSearch {
param (
[string]$LDAPQuery s
)
o
$PDC =
[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().PdcRoleOwner.Nam
e
n
$DistinguishedName = ([adsi]'').distinguishedName
$DirectoryEntry = New-Object
i
System.DirectoryServices.DirectoryEntry("LDAP://$PDC/$DistinguishedName")
z
$DirectorySearcher = New-Object
System.DirectoryServices.DDirectorySearcher($DirectoryEntry, $LDAPQuery)
return $DirectorySearcher.FindAll()
}
Listing 736 - A function that accepts user input
At the very top, we declare the function itself with the name of our choosing, in this case
LDAPSearch. It then dynamically obtains the required LDAP path connection string and adds it to
the $DirectoryEntry variable.
Afterwards, the DirectoryEntry and our $LDAPQuery parameter is fed into the DirectorySearcher.
Finally, the search is run and the output is added into an array, which is displayed in our terminal
depending on our needs.
To use the function, let’s import it to memory:
PS C:\Users\stephanie> Import-Module .\function.ps1
Listing 737 - Importing our function to memory
Within PowerShell, we can now use the LDAPSearch command (our declared function name) to
obtain information from AD. To repeat parts of the user enumeration we did earlier, we can again
filter on the specific samAccountType:
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 704
Made in Morocco
Penetration Testing with Kali Linux
PS C:\Users\stephanie> LDAPSearch -LDAPQuery "(samAccountType=805306368)"
Path Properties
---- ----------
LDAP://DC1.corp.com/CN=Administrator,CN=Users,DC=corp,DC=com {logoncount, codepage,
objectcategory, description...}
LDAP://DC1.corp.com/CN=Guest,CN=Users,DC=corp,DC=com {logoncount, codepage,
objectcategory, description...}
LDAP://DC1.corp.com/CN=krbtgt,CN=Users,DC=corp,DC=com {logoncount, codepage,
objectcategory, description...}
LDAP://DC1.corp.com/CN=dave,CN=Users,DC=corp,DC=com {logoncount, codepage,
objectcategory, usnchanged...}
LDAP://DC1.corp.com/CN=stephanie,CN=Users,DC=corp,DC=com {logoncount, codepage,
objectcategory, dscorepropagatio...
LDAP://DC1.corp.com/CN=jeff,CN=Users,DC=corp,DC=com {logoncount, codepage,
objectcategory, dscorepropagatio... y
LDAP://DC1.corp.com/CN=jeffadmin,CN=Users,DC=corp,DC=com {logoncount, codepage,
objectcategory, dscorepropagatio...
k
LDAP://DC1.corp.com/CN=iis_service,CN=Users,DC=corp,DC=com {logoncount, codepage,
objectcategory, dscorepropagatio...
LDAP://DC1.corp.com/CN=pete,CN=Users,DC=corp,DC=com {logoncount, codepage,
s
objectcategory, dscorepropagatio...
LDAP://DC1.corp.com/CN=jen,CN=Users,DC=corp,DC=com {logoncount, codepage,
objectcategory, dscorepropagatio o
Listing 738 - Performing a user search using the new function
We can also search directly for an Objectn Class, which is a component of AD that defines the
object type. Let’s use objectClass=group in this case to list all the groups in the domain:
i
PS C:\Users\stephanie> LDAPSearch -LDAPQuery "(objectclass=group)"
z
... --
--------
D
LDAP://DC1.corp.com/CN=Read-only Domain Controllers,CN=Users,DC=corp,DC=com
{usnchanged, distinguishedname, grouptype, whencreated...}
LDAP://DC1.corp.com/CN=Enterprise Read-only Domain Controllers,CN=Users,DC=corp,DC=com
{iscriticalsystemobject, usnchanged, distinguishedname, grouptype...}
LDAP://DC1.corp.com/CN=Cloneable Domain Controllers,CN=Users,DC=corp,DC=com
{iscriticalsystemobject, usnchanged, distinguishedname, grouptype...}
LDAP://DC1.corp.com/CN=Protected Users,CN=Users,DC=corp,DC=com
{iscriticalsystemobject, usnchanged, distinguishedname, grouptype...}
LDAP://DC1.corp.com/CN=Key Admins,CN=Users,DC=corp,DC=com
{iscriticalsystemobject, usnchanged, distinguishedname, grouptype...}
LDAP://DC1.corp.com/CN=Enterprise Key Admins,CN=Users,DC=corp,DC=com
{iscriticalsystemobject, usnchanged, distinguishedname, grouptype...}
LDAP://DC1.corp.com/CN=DnsAdmins,CN=Users,DC=corp,DC=com
{usnchanged, distinguishedname, grouptype, whencreated...}
LDAP://DC1.corp.com/CN=DnsUpdateProxy,CN=Users,DC=corp,DC=com
{usnchanged, distinguishedname, grouptype, whencreated...}
LDAP://DC1.corp.com/CN=Sales Department,DC=corp,DC=com
{usnchanged, distinguishedname, grouptype, whencreated...}
LDAP://DC1.corp.com/CN=Management Department,DC=corp,DC=com
{usnchanged, distinguishedname, grouptype, whencreated...}
LDAP://DC1.corp.com/CN=Development Department,DC=corp,DC=com
{usnchanged, distinguishedname, grouptype, whencreated...}
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 705
Made in Morocco