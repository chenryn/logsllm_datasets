### Directory and DirectorySearcher in PowerShell Script

In the following script, we utilize the `DirectoryEntry` and `DirectorySearcher` classes from the `System.DirectoryServices` namespace to search through an Active Directory (AD) domain. The `$direntry` variable encapsulates the obtained LDAP path, and the `$dirsearcher` object uses this information as the `SearchRoot`, starting the search at the top of the hierarchy.

```powershell
$dirsearcher = New-Object System.DirectoryServices.DirectorySearcher($direntry)
$dirsearcher.FindAll()
```

**Listing 728: Adding Directory and DirectorySearcher to the Script**

The `FindAll()` method is used to retrieve all objects within the specified directory. Since we start the search at the top and do not apply any filters, this will generate a large amount of output. Let's run the script to see the results:

```powershell
PS C:\Users\stephanie> .\enumeration.ps1
Path
----
LDAP://DC1.corp.com/DC=corp,DC=com
LDAP://DC1.corp.com/CN=Users,DC=corp,DC=com
LDAP://DC1.corp.com/CN=Computers,DC=corp,DC=com
LDAP://DC1.corp.com/OU=Domain Controllers,DC=corp,DC=com
LDAP://DC1.corp.com/CN=System,DC=corp,DC=com
...
```

**Listing 729: Using the Script to Search AD**

As shown in the truncated output, the script retrieves all objects in the entire domain, confirming that it is working as expected. To filter the output, we can use the `samAccountType` attribute, which is applied to all user, computer, and group objects.

### Filtering the Output

To filter the output, we can set up a filter for the `samAccountType` attribute. For example, the value `0x30000000` (decimal `805306368`) will enumerate all users in the domain. We can add this filter to the `$dirsearcher.filter` property as follows:

```powershell
$PDC = [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().PdcRoleOwner.Name
$DN = ([adsi]'').distinguishedName
$LDAP = "LDAP://$PDC/$DN"
$direntry = New-Object System.DirectoryServices.DirectoryEntry($LDAP)
$dirsearcher = New-Object System.DirectoryServices.DirectorySearcher($direntry)
$dirsearcher.filter = "samAccountType=805306368"
$dirsearcher.FindAll()
```

**Listing 730: Using the `samAccountType` Attribute to Filter Normal User Accounts**

Running the script with this filter will display all user objects in the domain:

```powershell
PS C:\Users\stephanie> .\enumeration.ps1
Path Properties
---- ----------
LDAP://DC1.corp.com/CN=Administrator,CN=Users,DC=corp,DC=com {logoncount, codepage, objectcategory, description...}
LDAP://DC1.corp.com/CN=Guest,CN=Users,DC=corp,DC=com {logoncount, codepage, objectcategory, description...}
...
```

**Listing 731: Receiving All Users in the Domain by Filtering on `samAccountType`**

To further develop the script, we can store the results in a new variable and iterate through each object to print each property on its own line using nested loops:

```powershell
$domainObj = [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()
$PDC = $domainObj.PdcRoleOwner.Name
$DN = ([adsi]'').distinguishedName
$LDAP = "LDAP://$PDC/$DN"
$direntry = New-Object System.DirectoryServices.DirectoryEntry($LDAP)
$dirsearcher = New-Object System.DirectoryServices.DirectorySearcher($direntry)
$dirsearcher.filter = "samAccountType=805306368"
$result = $dirsearcher.FindAll()

Foreach ($obj in $result) {
    Foreach ($prop in $obj.Properties) {
        $prop
    }
    Write-Host "-------------------------------"
}
```

**Listing 732: Adding a Nested Loop to Print Each Property on Its Own Line**

This script will search through AD, filter the results based on the `samAccountType`, and place the results into the `$result` variable. It then iterates through each object and prints each property. The `Write-Host` command adds a line between each object for better readability.

### Detailed Output

The script outputs detailed information about each user, which can be overwhelming depending on the number of domain users. Here is a partial view of `jeffadmin`'s attributes:

```powershell
PS C:\Users\stephanie> .\enumeration.ps1
...
logoncount {173}
codepage {0}
objectcategory {CN=Person,CN=Schema,CN=Configuration,DC=corp,DC=com}
dscorepropagationdata {9/3/2022 6:25:58 AM, 9/2/2022 11:26:49 PM, 1/1/1601 12:00:00 AM}
usnchanged {52775}
...
```

**Listing 733: Running the Script and Printing Each Attribute for `jeffadmin`**

We can also filter based on other properties. For example, to show only the groups that `jeffadmin` is a member of, we can modify the filter and the nested loop:

```powershell
$dirsearcher = New-Object System.DirectoryServices.DirectorySearcher($direntry)
$dirsearcher.filter = "name=jeffadmin"
$result = $dirsearcher.FindAll()

Foreach ($obj in $result) {
    Foreach ($prop in $obj.Properties) {
        $prop.memberof
    }
    Write-Host "-------------------------------"
}
```

**Listing 734: Adding the `name` Property to the Filter and Only Printing the `memberof` Attribute**

Running the script with these changes will show the groups that `jeffadmin` is a member of:

```powershell
PS C:\Users\stephanie> .\enumeration.ps1
CN=Domain Admins,CN=Users,DC=corp,DC=com
CN=Administrators,CN=Builtin,DC=corp,DC=com
```

**Listing 735: Running the Script to Show `jeffadmin` and Which Groups He Is a Member Of**

### Making the Script More Flexible

To make the script more flexible, we can encapsulate the functionality into a function that accepts parameters. This allows us to pass the desired `samAccountType` or other filters via the command line.

```powershell
function LDAPSearch {
    param (
        [string]$LDAPQuery
    )

    $PDC = [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().PdcRoleOwner.Name
    $DistinguishedName = ([adsi]'').distinguishedName
    $DirectoryEntry = New-Object System.DirectoryServices.DirectoryEntry("LDAP://$PDC/$DistinguishedName")
    $DirectorySearcher = New-Object System.DirectoryServices.DirectorySearcher($DirectoryEntry, $LDAPQuery)
    return $DirectorySearcher.FindAll()
}
```

**Listing 736: A Function That Accepts User Input**

To use the function, import it to memory and call it with the desired query:

```powershell
PS C:\Users\stephanie> Import-Module .\function.ps1
PS C:\Users\stephanie> LDAPSearch -LDAPQuery "(samAccountType=805306368)"
Path Properties
---- ----------
LDAP://DC1.corp.com/CN=Administrator,CN=Users,DC=corp,DC=com {logoncount, codepage, objectcategory, description...}
...
```

**Listing 737: Importing the Function to Memory**

We can also search for specific object classes. For example, to list all groups in the domain, we can use the `objectClass=group` filter:

```powershell
PS C:\Users\stephanie> LDAPSearch -LDAPQuery "(objectclass=group)"
Path Properties
---- ----------
LDAP://DC1.corp.com/CN=Read-only Domain Controllers,CN=Users,DC=corp,DC=com {usnchanged, distinguishedname, grouptype, whencreated...}
...
```

**Listing 738: Performing a User Search Using the New Function**

By making the script more flexible, we can easily adapt it to different enumeration needs without modifying the core script.

---

**References:**
- [Microsoft Documentation: `SearchRoot` Property](https://learn.microsoft.com/en-us/dotnet/api/system.directoryservices.directorysearcher.searchroot?view=dotnet-plat-ext-6.0)
- [Microsoft Documentation: `FindAll` Method](https://learn.microsoft.com/en-us/dotnet/api/system.directoryservices.directorysearcher.findall?view=dotnet-plat-ext-7.0#system-directoryservices-directorysearcher-findall)
- [Microsoft Documentation: `samAccountType` Attribute](https://learn.microsoft.com/en-us/windows/win32/adschema/a-samaccounttype)

**PWK - Copyright Â© 2023 OffSec Services Limited. All rights reserved. 705**
**Made in Morocco**
**Penetration Testing with Kali Linux**