 "http://java.sun.com/dtd/web-app_2_3.dtd">
  Archetype Created Web Application
```
整个工程结构如下：
```
web-servlet-hello
├── pom.xml
└── src
    └── main
        ├── java
        │   └── com
        │        └── test
        │               └── servlet
        │                      └── HelloServlet.java
        ├── resources
        └── webapp
            └── WEB-INF
                └── web.xml
```
运行 Maven 命令 mvn clean package，在 target 目录下得到一个 hello.war 文件，这个文件就是我们编译打包后的 Web 应用程序。
普通的 Java 程序是通过启动 JVM，然后执行 `main()` 方法开始运行。但是 Web 应用程序有所不同，我们无法直接运行 war 文件，必须先启动 Web 服务器，再由 Web 服务器加载我们编写的 HelloServlet，这样就可以让 HelloServlet 处理浏览器发送的请求。
把 hello.war 复制到 Tomcat 的 webapps 目录下，然后切换到 bin 目录，执行 startup.sh 或 startup.bat 启动 Tomcat 服务器
在浏览器输入 http://localhost:8080/hello/ 即可看到 HelloServlet 的输出
---
## Maven tomcat 插件
- http://tomcat.apache.org/maven-plugin-2.2/index.html
```xml
    4.0.0
    com.itranswarp.learnjava
    web-servlet-hello
    war
    1.0-SNAPSHOT
        UTF-8
        UTF-8
        8
        8
        8
            javax.servlet
            javax.servlet-api
            3.1.0
            provided
        hello
                org.apache.tomcat.maven
                tomcat7-maven-plugin
                2.2
                    localhost
                    8080
                    /hello
                    UTF-8
```
```
tomcat7:deploy --部署web war包
tomcat7:redeploy --重新部署web war包
tomcat7:undeploy --停止该项目运行，并删除部署的war包
tomcat7:run --启动嵌入式tomcat ，并运行当前项目
tomcat7:exec-war --创建一个可执行的jar文件，允许使用java -jar mywebapp.jar 运行web项目
tomcat7:help --在tomcat7-maven-plugin显示帮助信息
```
Tomcat 实际上也是一个 Java 程序，我们看看 Tomcat 的启动流程：
* 启动 JVM 并执行 Tomcat 的 `main()` 方法；
* 加载 war 并初始化 Servlet；
* 正常服务。
启动 Tomcat 无非就是设置好 classpath 并执行 Tomcat 某个 jar 包的 main() 方法，我们完全可以把 Tomcat 的 jar 包全部引入进来，然后自己编写一个 main() 方法，先启动 Tomcat，然后让它加载我们的 webapp 就行。
我们新建一个web-servlet-embedded工程，编写pom.xml如下：
```xml
    4.0.0
    com.itranswarp.learnjava
    web-servlet-embedded
    1.0-SNAPSHOT
    war
        UTF-8
        UTF-8
        11
        11
        11
        9.0.26
            org.apache.tomcat.embed
            tomcat-embed-core
            ${tomcat.version}
            provided
            org.apache.tomcat.embed
            tomcat-embed-jasper
            ${tomcat.version}
            provided
```
其中，`` 类型仍然为 war，引入依赖 tomcat-embed-core 和 tomcat-embed-jasper，引入的 Tomcat 版本 `` 为 9.0.26。
不必引入 Servlet API，因为引入 Tomcat 依赖后自动引入了 Servlet API。因此，我们可以正常编写 Servlet 如下：
```java
@WebServlet(urlPatterns = "/")
public class HelloServlet extends HttpServlet {
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        resp.setContentType("text/html");
        String name = req.getParameter("name");
        if (name == null) {
            name = "world";
        }
        PrintWriter pw = resp.getWriter();
        pw.write("Hello, " + name + "!");
        pw.flush();
    }
}
```
编写一个 main() 方法，启动 Tomcat 服务器
```java
public class Main {
    public static void main(String[] args) throws Exception {
        // 启动Tomcat:
        Tomcat tomcat = new Tomcat();
        tomcat.setPort(Integer.getInteger("port", 8080));
        tomcat.getConnector();
        // 创建webapp:
        Context ctx = tomcat.addWebapp("", new File("src/main/webapp").getAbsolutePath());
        WebResourceRoot resources = new StandardRoot(ctx);
        resources.addPreResources(
                new DirResourceSet(resources, "/WEB-INF/classes", new File("target/classes").getAbsolutePath(), "/"));
        ctx.setResources(resources);
        tomcat.start();
        tomcat.getServer().await();
    }
}
```
这样，我们直接运行 `main()` 方法，即可启动嵌入式 Tomcat 服务器，然后，通过预设的 `tomcat.addWebapp("", new File("src/main/webapp")` ，Tomcat 会自动加载当前工程作为根 webapp，可直接在浏览器访问 http://localhost:8080/
记得创建 webapp 目录并创建 WEB-INF 文件夹,创建 web.xml 文件
```
  Web Application
```
启动 main() 方法 报错解决方案如下:
```
错误: 无法初始化主类 Main
原因: java.lang.NoClassDefFoundError: org/apache/catalina/WebResourceRoot
解决
打开idea的Run/Debug Configurations:
选择Application - Main
右侧Configuration：Use classpath of module
钩上☑︎Include dependencies with "Provided" scope
```
通过 `main()` 方法启动 Tomcat 服务器并加载我们自己的 webapp 有如下好处：
1. 启动简单，无需下载 Tomcat 或安装任何 IDE 插件；
2. 调试方便，可在 IDE 中使用断点调试；
3. 使用 Maven 创建 war 包后，也可以正常部署到独立的 Tomcat 服务器中。
SpringBoot 也支持在 `main()` 方法中一行代码直接启动 Tomcat，并且还能方便地更换成 Jetty 等其他服务器。它的启动方式和我们介绍的是基本一样的，后续涉及到 SpringBoot 的部分我们还会详细讲解。
开发 Servlet 时，推荐使用 `main()` 方法启动嵌入式 Tomcat 服务器并加载当前工程的 webapp，便于开发调试，且不影响打包部署，能极大地提升开发效率。
---
一个 Web App 就是由一个或多个 Servlet 组成的，每个 Servlet 通过注解说明自己能处理的路径。例如：
```java
@WebServlet(urlPatterns = "/hello")
public class HelloServlet extends HttpServlet {
    ...
}
```
上述 HelloServlet 能处理 /hello 这个路径的请求。
> 早期的 Servlet 需要在 web.xml 中配置映射路径，但最新 Servlet 版本只需要通过注解就可以完成映射。
因为浏览器发送请求的时候，还会有请求方法（HTTP Method）：即 GET、POST、PUT 等不同类型的请求。因此，要处理 GET 请求，我们要覆写 doGet() 方法：
```java
@WebServlet(urlPatterns = "/hello")
public class HelloServlet extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        ...
    }
}
```
类似的，要处理 POST 请求，就需要覆写 `doPost()` 方法。
如果没有覆写 `doPost()` 方法，那么 HelloServlet 能不能处理 POST /hello 请求呢？
我们查看一下 HttpServlet 的 `doPost()` 方法就一目了然了：它会直接返回 405 或 400 错误。因此，一个 Servlet 如果映射到 /hello，那么所有请求方法都会由这个 Servlet 处理，至于能不能返回 200 成功响应，要看有没有覆写对应的请求方法。
一个 Webapp 完全可以有多个 Servlet，分别映射不同的路径。例如：
```java
@WebServlet(urlPatterns = "/hello")
public class HelloServlet extends HttpServlet {
    ...
}
@WebServlet(urlPatterns = "/signin")
public class SignInServlet extends HttpServlet {
    ...
}
@WebServlet(urlPatterns = "/")
public class IndexServlet extends HttpServlet {
    ...
}
```
浏览器发出的 HTTP 请求总是由 Web Server 先接收，然后，根据 Servlet 配置的映射，不同的路径转发到不同的 Servlet：
```
               ┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐
               │            /hello    ┌───────────────┐│
                          ┌──────────>│ HelloServlet  │
               │          │           └───────────────┘│
┌───────┐    ┌──────────┐ │ /signin   ┌───────────────┐
│Browser│───>│Dispatcher│─┼──────────>│ SignInServlet ││
└───────┘    └──────────┘ │           └───────────────┘