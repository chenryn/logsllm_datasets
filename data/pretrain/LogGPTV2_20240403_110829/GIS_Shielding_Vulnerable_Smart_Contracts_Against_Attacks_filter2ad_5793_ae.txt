u
e
r
e
S
TP
TP
FP
TP
FP
FP
S
I
G
Æ
TP
TP
TN
TP
TN
TN
Smart Contract
VulnBankNoLock
VulnBankBuggyLock
VulnBankSecureLock
Table 2: Comparison between ECFChecker, Sereum and
ÆGIS on the e(cid:130)ectiveness of detecting same-function and
cross-function reentrancy attacks with manually intro-
duced locks.
6.1 Comparison to Reentrancy Detection Tools
By analyzing transactions sent to contracts, Rodler et al.’s tool
Sereum (cid:131)agged 16 contracts as victims of reentrancy a(cid:138)acks. How-
ever, a(cid:137)er manual investigation the authors found that only 2 out of
the 16 contracts have actually become victims to reentrancy a(cid:138)acks.
We decided to analyze these 16 contracts and see if we face the same
challenges in classifying these contracts correctly. We contacted
the authors of Sereum and obtained the list of contract addresses.
A(cid:137)erwards, we ran ÆGIS on all transactions related to the con-
tract addresses, up to block number 4,500,0006. Table 1 summarizes
our results and provides a comparison to the results obtained by
Sereum. From Table 1, we can observe that ÆGIS successfully de-
tects transactions related to the DAO contract and the DSEthToken
contract, as reentrancy a(cid:138)acks. Moreover, ÆGIS correctly (cid:131)ags the
remaining 14 contracts as not vulnerable. Hence, in contrast to
Sereum, ÆGIS produces no false positives on these 16 contracts.
A(cid:137)er analyzing the false positives produced by Sereum, we con-
clude that ÆGIS does not produce the same false positives because
(cid:128)rst, ÆGIS does not use taint analysis in its pa(cid:138)ern and therefore
does not face issues of over-tainting, and secondly, it does not make
use of dynamic write locks to detect reentrancy.
6.1.1 Reentrancy with Locks. Besides evaluating Sereum on the
set of 16 real-world smart contracts, Rodler et al. also compared
Sereum to ECFChecker, using self-cra(cid:137)ed smart contracts as a
benchmark [30]. (cid:140)e goal of this benchmark is to provide means
to investigate the quality of reentrancy detection tools. (cid:140)e bench-
mark consists of three functionally equivalent contracts, except
that the (cid:128)rst contract does not employ any locking mechanism
to guard the reentry of functions (VulnBankNoLock), the second
contract employs partial implementation of a locking mechanism
(VulnBankBuggyLock), and the third contract employs a full im-
plementation of a locking mechanism (VulnBankSecureLock). As a
result, the (cid:128)rst contract is vulnerable to same-function reentrancy
as well as cross-function reentrancy. (cid:140)e second contract is vulner-
able to cross-function reentrancy, but not to same-function reen-
trancy. Finally, the third contract is safe regarding both types of
reentrancy. We deployed these three contracts on the Ethereum test
network called Ropsten and ran the three contracts against ÆGIS.
Table 2 contains our results and compares ÆGIS to ECFChecker
and Sereum. We can see that ECFChecker has di(cid:129)culties in detect-
ing cross-function reentrancy, whereas Sereum has di(cid:129)culties in
distinguishing between reentrancy and manually introduced locks.
(cid:140)is is probably due to the locking mechanism exhibiting exactly
the same pa(cid:138)ern as a reentrancy a(cid:138)ack and Sereum being unable
to di(cid:130)erentiate between these two. We found that ÆGIS correctly
classi(cid:128)es every contract as either vulnerable or not vulnerable in
all the test cases.
6.1.2 Unconditional Reentrancy. Calls that send ether are usu-
ally protected by a check in the form of an if, require, or assert.
Reentrancy a(cid:138)acks typically try to bypass these checks. However,
it is possible to write a contract, which does not perform any check
before sending ether. Rodler et al. present an example of such a
vulnerability and name it unconditional reentrancy (see Appendix B).
Moreover, they also (cid:128)nd an example of such a contract deployed on
the Ethereum blockchain7. When Sereum was published, it was not
able to detect this type of reentrancy since the authors assumed that
every call that may lead to a reentrancy is guarded by a condition.
However, the authors claim to have (cid:128)xed this issue by extending
Sereum to tracking data (cid:131)ows from storage to the parameters of
calls. We cannot verify this since the source code of Sereum is not
publicly available. We run ÆGIS on both examples, the manually
cra(cid:137)ed example by Rodler et al. and the contract deployed on the
6(cid:140)is is the maximum block number analyzed by the authors of Sereum.
7h(cid:138)ps://etherscan.io/address/0xb7c5c5aa4d42967efe906e1b66cb8df9cebf04f7
10
Vulnerability
Same-Function Reentrancy
Cross-Function Reentrancy
Delegated Reentrancy
Create-Based Reentrancy
Parity Wallet Hack 1
Parity Wallet Hack 2
Total Unique
Contracts Transactions
822
695
0
0
80
236
1118
7
5
0
0
3
236
248
Table 3: Number of vulnerable contracts detected by ÆGIS.
Ethereum blockchain. ÆGIS correctly identi(cid:128)es the unconditional
reentrancy contained in both examples without modifying the ex-
isting pa(cid:138)erns. (cid:140)is is as expected, since in contrast to Sereum’s
initial way to detect reentrancy, ÆGIS’s reentrancy pa(cid:138)erns do not
rely on the detection of conditions (i.e. JUMPI) to detect reentrancy.
6.2 Large-Scale Blockchain Analysis
In this experiment we analyse the (cid:128)rst 4.5 million blocks of the
Ethereum blockchain and compare our (cid:128)ndings to those of Rodler
et al. We started by scanning the Ethereum blockchain for smart
contracts that have been deployed until block 4,500,000. We found
675,444 successfully deployed contracts. (cid:140)e deployment times-
tamps of the found contracts range from August 7, 2015 to Novem-
ber 6, 2017. Next, we replayed the execution history of these 675,444
contracts. As part of the scanning we found that only 12 contracts
in our dataset have more than 10.000 transactions. (cid:140)erefore, to
reduce the execution time, we decided to limit our analysis to the
(cid:128)rst 10.000 transactions of each contract. In addition, similar to
Rodler et al., we tried our best to skip those transactions which
were involved in denial-of-service a(cid:138)acks as they would result in
high execution times8.
We ran ÆGIS on our set of 675,444 contracts using a 6-core Intel
Core i7-8700 CPU @ 3.20GHz and 64 GB RAM. Our tool took on
average 108 milliseconds to analyse a transaction, with a median of
24 milliseconds per transaction. All in all, we re-executed 4,960,424
transactions with an average of 8 transactions per contract. Table 3
summarizes our results. ÆGIS found a total of 1,118 malicious
transactions and 248 unique contacts that have been exploited
through either a reentrancy or an access control vulnerability. More
speci(cid:128)cally, ÆGIS found that 7 contracts have become victim to
same-function reentrancy, 5 contracts to cross-function reentrancy,
3 contracts to the (cid:128)rst Parity wallet hack and 236 contracts to the
second Parity wallet hack. Similar to the results of Rodler et al.,
we did not (cid:128)nd any contracts to have become victim to delegated
reentrancy or create-based reentrancy. We validated all our results
by manually analyzing the source code (whenever it was publicly
available) and/or the execution traces of the (cid:131)agged contracts. Our
validation did not reveal any false positives.
Table 4 lists all the contract addresses that ÆGIS detected to
have become victim of a same-function reentrancy a(cid:138)ack. (cid:140)e
block range de(cid:128)nes the block heights where ÆGIS detected the
malicious transactions. (cid:140)e (cid:128)rst and second contract addresses
8h(cid:138)ps://tinyurl.com/rvlvues
contained in Table 4 are the same as reported by Sereum, and
belong to the DSEthToken and DAO contract, respectively. (cid:140)e
rows highlighted in gray mark 5 contracts that have been (cid:131)agged
by ÆGIS but not by Sereum. A(cid:137)er investigating the transac-
tions of these 5 contracts, we (cid:128)nd that the contract addresses
0x26b8af052895080148dabbc1007b3045f023916e and 0xbf7802
5535c98f4c605fbe9eaf672999abf19dc1 became victim to same-
function reentrancy, but seem to be contracts that have been de-
ployed with the purpose of studying the DAO hack. However, the
three other contract addresses seem to be true victims of reentrancy
a(cid:138)acks.
7 DISCUSSION
In this section we discuss alternatives to determine eligible voters,
highlight some of the current limitations as well as future research
directions for this work.
7.1 Determining Eligible Voters
(cid:140)e introduction of new pa(cid:138)erns in ÆGIS depends on achieving
consensus in a predetermined group of voters. Although it may
intuitively make sense to let miners vote, they are not necessarily
a good (cid:128)t. (cid:140)eir interests may di(cid:130)er from those of smart contract
users. For example, depending on a pa(cid:138)ern’s complexity, it might
introduce an overhead in terms of execution time. Miners are then
incentivized to prefer simpler pa(cid:138)erns that are evaluated quicker,
while smart contract users would prefer more secure pa(cid:138)erns.
Alternatively, a group of trusted security experts could act as
eligible voters9. Security experts are (by de(cid:128)nition) able to properly
evaluate pa(cid:138)erns and have the interest in doing so. (cid:140)e voting
contract is then controlled by a group of trusted experts who are
decided upon o(cid:130)-chain by a group of admins. For transparency,
the identity of admins and experts would be exposed to the public
by mapping every identity to an Ethereum account. Changes to
the list of voters, the deposit, or the commit and reveal windows
are then visible to anyone via the blockchain. (cid:140)rough this setup,
security experts would be able to organise themselves with the voter
list being comprised of a curated group of knowledgeable people.
Such groups already exist in reality, for example, the members
of the Smart Contract Weakness Classi(cid:128)cation registry (SWC)10,
9Somewhat similar to how CVEs are handled.
10h(cid:138)ps://smartcontractsecurity.github.io/SWC-registry/
Contract Address
0xd654bdd32fc99471455e86c2e7f7d7b6437e9179
0xbb9bc244d798123fde783fcc1c72d3bb8c189413
0xf01fe1a15673a5209c94121c45e2121fe2903416
0x304a554a310c7e546dfe434669c62820b7d83490
0x59752433dbe28f5aa59b479958689d353b3dee08
0xbf78025535c98f4c605(cid:133)e9eaf672999abf19dc1
0x26b8af052895080148dabbc1007b3045f023916e
Block Range
1680024 - 1680238
1718497 - 2106624
1743596 - 1743673
1881284 - 1881284
3160801 - 3160801
3694969 - 3695510
4108700 - 4108700
Table 4: Same-function reentrancy vulnerable contracts de-
tected by ÆGIS. Contracts highlighted in gray have only
been detected by ÆGIS and not by Sereum.
11
and would be a good (cid:128)t for our system. Moreover, misbehaving
or unresponsive experts could be easily removed by the group of
admins. Although this approach allows for scalability and control,
it has the disadvantage of introducing managing third-parties. (cid:140)at
runs counter to the decentralised concept of Ethereum.
Alternatively, there is also an option to select voters, while pre-
serving the decentralised concept of Ethereum. (cid:140)is is to remove
the role of admins altogether, and instead follow a self-organizing
strategy, similar to Proof-of-Stake. In this case, everyone is allowed
to become a voter through the purchase of (not prohibitively priced)
voting power. (cid:140)is could be achieved by depositing a (cid:128)xed amount
of ether into the voting smart contract as a form of collateral.
7.2 Adoption and Participation Incentives
(cid:140)e deployment of ÆGIS would require a modi(cid:128)cation of the
Ethereum consensus protocol, which would require existing Ether-
eum clients to be updated. (cid:140)is could be easily achieved though
a major release by including this one-time modi(cid:128)cation as part
of a scheduled hardfork. Another issue concerns the incentives
to propose and vote on pa(cid:138)erns. While prestige or a feeling of
contributing to the security of Ethereum may be su(cid:129)cient for some,
more incentives may be needed to ensure that the protective capa-
bilities of ÆGIS are used to the full extent. A monetary incentive
could address this. (cid:140)at is, ÆGIS could be extended with automat-
ically paid rewards. In other words, ÆGIS could be extended to
enable bug bounties [6]. ÆGIS’s smart contract could be modi(cid:128)ed
such that, owners of smart contracts can register their contract ad-
dress by sending a transaction to ÆGIS’s voting smart contract and
deposit a bounty in the form of ether. (cid:140)en, proposers of pa(cid:138)erns
would be rewarded automatically with the bounty by ÆGIS’s voting
smart contract, if their proposed pa(cid:138)ern is accepted by the group
of voters. Moreover, owners could simply replenish the bounty for
their contract by making new deposits to ÆGIS’s smart contract.
7.3 Limitations and Future Work
A current limitation of our tool is that proposed a(cid:138)ack pa(cid:138)erns are
submi(cid:138)ed in plain text to the smart contract. Potential a(cid:138)ackers can
view the pa(cid:138)erns and use them to (cid:128)nd vulnerable smart contracts.
To mitigate this, we propose to make use of encryption such that
only the voters would be able to view the pa(cid:138)erns. However, this
would break the current capability of the smart contract being
self-tallying. Designing an encrypted and practical self-tallying
solution is le(cid:137) for future work. Finally, we intend to make use of
parallel execution inside the extractors and the checking of pa(cid:138)erns
in order to improve the time required to analyse transactions.
8 CONCLUSION
Although academia proposed a number of tools to detect vulnera-
bilities in smart contracts, they all fail to protect already deployed
vulnerable smart contracts. One of the proposed solutions is to
modify the Ethereum clients in order to detect and revert transac-
tions that try to exploit vulnerable smart contracts. However, these
solutions require all the Ethereum clients to be modi(cid:128)ed every time
a new type of vulnerability is discovered. In this work, we intro-
duced ÆGIS, a system that detects and reverts a(cid:138)acks via a(cid:138)ack
pa(cid:138)erns. (cid:140)ese pa(cid:138)erns describe malicious control and data (cid:131)ows
through the use of a novel domain-speci(cid:128)c language. In addition,
we presented a novel mechanism for security updates that allows
these a(cid:138)ack pa(cid:138)erns to be updated quickly and transparently via
the blockchain, by using a smart contract as means of storing them.
Finally, we compared ÆGIS to two current state-of-the-art online
reentrancy detection tools. Our results show that ÆGIS not only
detects more a(cid:138)acks, but also has no false positives as compared to
current state-of-the-art.
ACKNOWLEDGMENTS
We would like to thank the Sereum authors, especially Michael
Rodler, for sharing their data with us. We would also like to thank
the reviewers for their valuable comments as well as Daniel Xiapu
Luo for his valuable help. (cid:140)e experiments presented in this paper