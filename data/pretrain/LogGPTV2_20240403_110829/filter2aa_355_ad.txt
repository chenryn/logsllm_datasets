调试之前，我们再回顾下Dubbo的协议设计(感觉这里师傅们写的很清楚，就抄过来了)
由于Dubbo可以支持很多类型的反序列化协议，以满足不同系统对RPC的需求，比如
跨语言的序列化协议：Protostuff,ProtoBuf,Thrift,Avro,MsgPack
针对Java语言的序列化方式:Kryo,FST
基于Json文本形式的反序列化方式：Json、Gson
Dubbo中对支持的协议做了一个编号，每个序列化协议都有一个对应的编号，以便在获取
TCP流量后，根据编号选择相应的反序列化方法，因此这就是Dubbo支持这么多序列化协议的秘
密，但同时也是危险所在。在org.apache.dubbo.common.serialize.Constants中可见每种序列
化协议的编号
而在Dubbo的RPC通信时，对流量的规定最前方为header，而header中通过指定
SerializationID，确定客户端和服务提供端通信过程使用的序列化协议。Dubbo通信的具体数
据包规定如下图所示
虽然Dubbo的provider默认使用hessian2协议，但我们可以自由的修改SerializationID，
选定危险的(反)序列化方式，例如kryo和fst。
0x04-3_1 Kryo反序列化反序列化
好，我们开始调试，按照上个漏洞的经验，Dubbo获取发来的流量之后，dubbo-2.7.3-
sources.jar!\org\apache\dubbo\remoting\transport\netty4\NettyCodecAdapter.java#decode
方法，emmm，这里是获取传入的数据然后继续传递
不多说，我们还是跟到dubbo-2.7.3-
sources.jar!\org\apache\dubbo\rpc\protocol\dubbo\DecodeableRpcInvocation.java#decode
方法，这里是主要抉择什么反序列化的方式，然后对刚才对刚才获取的Kryo反序列化方式，并
对类数组的参数进行循环反序列化
然后进入readobject方法里面的最主要的.readClassAndObject方法，从input中读取解析
到type为HashMap，因此会调用Kryo的MapSerializer序列化器来读取input中的信息
然后我们继续跟进到kryo-
4.0.1.jar!\com\esotericsoftware\kryo\serializers\MapSerializer.class#read方法，这里
比较关键的是在for循环中，不断反序列化获取key和value，再使用map.put还原对象，而这个
map会根据传过来的类型自动创建，也就是说，我们发到provider的HashMap类，在provider中
创建了一个空的HashMap对象，也就是这里的map，而后调用HashMap.put方法放入key-value
在dubbo-provider端，给map.put处打断点，进入调试，在map.put处跟进，可见经典的
HashMap.put->HashMap.putVal->key.equals(k)
（注意此时key和k是HotSwappableTargetSource类的不同实例对象，结合前面的poc，其中
key=v2，k=v1，v1.target=XString）
然后我们继续跟进到HotSwappableTargetSource.class#equals方法，可以看到这里是用的
&&进行判断，此时我们可以看到调试的变量other=v1=HotSwappableTargetSource，因此other 
instanceof HotSwappableTargetSource的判断结果是true，所以执行&&后面的语句。此时结合
前面的代码以及调试结果可知this=v2，因此this.target=XString("HEYO")，而
other.target=jo，因此调用的时XString.equals(jo)，而在poc的设置中jo里面的key是oops，
value是我们熟悉的templete链，跟进XString.equals方法（其实这里就很像是一些cc链的调用
了，只是这次的poc用的是自带的fastjson链）
这里也就顺应到我们的fastjson.toString()触发的链子上来了,没有了解的师傅也可以去
看下fastjson反序列化的执行链，这里就不多叙述了
此时的调用栈为
1
getTransletInstance:455, TemplatesImpl (com.sun.org.apache.xalan.internal.xsl
tc.trax)
2
newTransformer:486, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.tr
ax)
3
getOutputProperties:507, TemplatesImpl (com.sun.org.apache.xalan.internal.xsl
tc.trax)
4
write:‐1, ASMSerializer_1_TemplatesImpl (com.alibaba.fastjson.serializer)
5
write:270, MapSerializer (com.alibaba.fastjson.serializer)
6
write:44, MapSerializer (com.alibaba.fastjson.serializer)
7
write:280, JSONSerializer (com.alibaba.fastjson.serializer)
8
toJSONString:863, JSON (com.alibaba.fastjson)
9
toString:857, JSON (com.alibaba.fastjson)
10
equals:392, XString (com.sun.org.apache.xpath.internal.objects)
11
equals:104, HotSwappableTargetSource (org.springframework.aop.target)
12
putVal:635, HashMap (java.util)
13
put:612, HashMap (java.util)
14
15
/*将获取到的数据进行读取，并根据读取到的数据进行加操作*/
16
read:162, MapSerializer (com.esotericsoftware.kryo.serializers)
17
read:39, MapSerializer (com.esotericsoftware.kryo.serializers)
18
readClassAndObject:813, Kryo (com.esotericsoftware.kryo)
19
readObject:136, KryoObjectInput (org.apache.dubbo.common.serialize.kryo)
20
readObject:147, KryoObjectInput (org.apache.dubbo.common.serialize.kryo)
21
decode:116, DecodeableRpcInvocation (org.apache.dubbo.rpc.protocol.dubbo)
22
decode:73, DecodeableRpcInvocation (org.apache.dubbo.rpc.protocol.dubbo)
23
decodeBody:132, DubboCodec (org.apache.dubbo.rpc.protocol.dubbo)
24
decode:122, ExchangeCodec (org.apache.dubbo.remoting.exchange.codec)
25
decode:82, ExchangeCodec (org.apache.dubbo.remoting.exchange.codec)
26
decode:48, DubboCountCodec (org.apache.dubbo.rpc.protocol.dubbo)
27
decode:90, NettyCodecAdapter$InternalDecoder (org.apache.dubbo.remoting.tran
sport.netty4)
28
decodeRemovalReentryProtection:502, ByteToMessageDecoder (io.netty.handler.c
odec)
29
30
/*获取到数据并传入到调用链中*/
31
callDecode:441, ByteToMessageDecoder (io.netty.handler.codec)
32
channelRead:278, ByteToMessageDecoder (io.netty.handler.codec)
33
invokeChannelRead:374, AbstractChannelHandlerContext (io.netty.channel)
34
invokeChannelRead:360, AbstractChannelHandlerContext (io.netty.channel)
35
fireChannelRead:352, AbstractChannelHandlerContext (io.netty.channel)
36
channelRead:1408, DefaultChannelPipeline$HeadContext (io.netty.channel)
37
invokeChannelRead:374, AbstractChannelHandlerContext (io.netty.channel)
38
invokeChannelRead:360, AbstractChannelHandlerContext (io.netty.channel)
39
fireChannelRead:930, DefaultChannelPipeline (io.netty.channel)
40
read:163, AbstractNioByteChannel$NioByteUnsafe (io.netty.channel.nio)
41
processSelectedKey:682, NioEventLoop (io.netty.channel.nio)
42
processSelectedKeysOptimized:617, NioEventLoop (io.netty.channel.nio)
43
processSelectedKeys:534, NioEventLoop (io.netty.channel.nio)
44
run:496, NioEventLoop (io.netty.channel.nio)
45
run:906, SingleThreadEventExecutor$5 (io.netty.util.concurrent)
46
run:74, ThreadExecutorMap$2 (io.netty.util.internal)
47
run:30, FastThreadLocalRunnable (io.netty.util.concurrent)
48
run:748, Thread (java.lang)
0x04-3_2 FST反序列化反序列化
这一条的具体调用流程和sink点都和Kryo是一样的，基本上还是获取到数据后解密并根据
传递过来的序列化方式来进行对应的反序列化操作，FstObjectInput.java的readobject方法将
获取的值传递到了不同包的同名函数的同名方法中处理，这里在fst-2.48-jdk-
6.jar!\org\nustaq\serialization\FSTObjectInput.class中对传入数据进行了多个函数的调
用，我们的关键点自然和上两个协议一样，找到调用FST协议对Map显然也用了专门的反序列化
器，也就是FSTObjectInput中的instantiateAndReadWithSer的方法，这里调用了FSTMapSerializer
中的instantiate方法
我们跟进方法，这个方法还是很清晰明了，for循环中不断反序列化还原出key和value，再用
map.put将key和value还原，显然和上面Kryo对HashMap的触发链一样，后续也是一样的
然后进入到HotSwappableTargetSource的equals方法。。。后续师傅们就看上面就可以了
基本的调用链如下
1
getTransletInstance:455, TemplatesImpl (com.sun.org.apache.xalan.internal.xsl
tc.trax)
2
newTransformer:486, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.tr
ax)
3
getOutputProperties:507, TemplatesImpl (com.sun.org.apache.xalan.internal.xsl
tc.trax)
4
write:‐1, ASMSerializer_1_TemplatesImpl (com.alibaba.fastjson.serializer)
5
write:270, MapSerializer (com.alibaba.fastjson.serializer)
6
write:44, MapSerializer (com.alibaba.fastjson.serializer)
7
write:280, JSONSerializer (com.alibaba.fastjson.serializer)
8
toJSONString:863, JSON (com.alibaba.fastjson)
9
toString:857, JSON (com.alibaba.fastjson)
10
equals:392, XString (com.sun.org.apache.xpath.internal.objects)
11
equals:104, HotSwappableTargetSource (org.springframework.aop.target)
12
putVal:635, HashMap (java.util)
13
put:612, HashMap (java.util)
14
15
instantiate:79, FSTMapSerializer (org.nustaq.serialization.serializers)
16
instantiateAndReadWithSer:497, FSTObjectInput (org.nustaq.serialization)
17
readObjectWithHeader:366, FSTObjectInput (org.nustaq.serialization)
18
readObjectInternal:327, FSTObjectInput (org.nustaq.serialization)
19
readObject:307, FSTObjectInput (org.nustaq.serialization)
20
readObject:102, FstObjectInput (org.apache.dubbo.common.serialize.fst)
21
decode:116, DecodeableRpcInvocation (org.apache.dubbo.rpc.protocol.dubbo)
22
decode:73, DecodeableRpcInvocation (org.apache.dubbo.rpc.protocol.dubbo)
23
decodeBody:132, DubboCodec (org.apache.dubbo.rpc.protocol.dubbo)
24
decode:122, ExchangeCodec (org.apache.dubbo.remoting.exchange.codec)
25
decode:82, ExchangeCodec (org.apache.dubbo.remoting.exchange.codec)
26
decode:48, DubboCountCodec (org.apache.dubbo.rpc.protocol.dubbo)
27
decode:90, NettyCodecAdapter$InternalDecoder (org.apache.dubbo.remoting.tran
sport.netty4)
28
29
decodeRemovalReentryProtection:502, ByteToMessageDecoder (io.netty.handler.c
odec)
30
callDecode:441, ByteToMessageDecoder (io.netty.handler.codec)
31
channelRead:278, ByteToMessageDecoder (io.netty.handler.codec)
32
invokeChannelRead:374, AbstractChannelHandlerContext (io.netty.channel)
33
invokeChannelRead:360, AbstractChannelHandlerContext (io.netty.channel)
34
fireChannelRead:352, AbstractChannelHandlerContext (io.netty.channel)
35
channelRead:1408, DefaultChannelPipeline$HeadContext (io.netty.channel)
36
invokeChannelRead:374, AbstractChannelHandlerContext (io.netty.channel)
37
invokeChannelRead:360, AbstractChannelHandlerContext (io.netty.channel)
38
fireChannelRead:930, DefaultChannelPipeline (io.netty.channel)
39
read:163, AbstractNioByteChannel$NioByteUnsafe (io.netty.channel.nio)
40
processSelectedKey:682, NioEventLoop (io.netty.channel.nio)
41
processSelectedKeysOptimized:617, NioEventLoop (io.netty.channel.nio)
42
processSelectedKeys:534, NioEventLoop (io.netty.channel.nio)
43
run:496, NioEventLoop (io.netty.channel.nio)
44
run:906, SingleThreadEventExecutor$5 (io.netty.util.concurrent)
45
run:74, ThreadExecutorMap$2 (io.netty.util.internal)
46
run:30, FastThreadLocalRunnable (io.netty.util.concurrent)
47
run:748, Thread (java.lang)
简单拓展下：
作者说可以不依赖fastjson链子触发，我也试了rome等链子，都是可以成功触发的，毕竟
sink点可以结合其他链子去打，但是不依赖任何链子的那个可能性，我还需要更多的学习无论
是codeql还是更多源码才能找到。
0x04-4 漏洞利用方面（实战方面）
这个洞和上面hession协议的反序列化流程还是很相似，应该实战理论上还是很常用的（个
人见解，毕竟我还是个没毕业的小白
0x05  感想
emmmmm，怎么说呢，自从因为一些学校的事离开长亭回到家后才发现在那边的学习效率真
的会高很多，不过总是要自己学习的，自学的习惯还是要慢慢养成的，文章尽我所能的写吧，
毕竟也确实感觉写文章会更加仔细的学习一个漏洞，正如木头师傅说的，我们站在这些巨人师
傅的肩膀上可以更快的成长，也可以看向更远的未来，这里引用我之前一直外包的公司的一句
话{为守护中国安全而战【嘿嘿（狗头）】}