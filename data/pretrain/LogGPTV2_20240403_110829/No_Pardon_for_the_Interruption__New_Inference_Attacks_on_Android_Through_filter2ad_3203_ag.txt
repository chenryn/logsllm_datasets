### Security Symposium, 2001

#### References
1. R. Hund, C. Willems, and T. Holz, "Practical Timing Side Channel Attacks against Kernel Space ASLR," in *Proceedings of the 2013 IEEE Symposium on Security and Privacy (S&P)*, 2013.
2. M. Andrysco, D. Kohlbrenner, K. Mowery, R. Jhala, S. Lerner, and H. Shacham, "On Subnormal Floating Point and Abnormal Timing," in *Proceedings of the 2015 IEEE Symposium on Security and Privacy (S&P)*, 2015.
3. J. Levin, "The Android Input Architecture," [http://newandroidbook.com/](http://newandroidbook.com/)
4. "Graphics Architecture," [https://source.android.com/devices/graphics/](https://source.android.com/devices/graphics/), 2015.

### Appendix

#### A. Android Touch Event Processing Flow

Figure 17 illustrates the touch event processing flow on Android, with a description of each layer:

- **Hardware Device Layer**: The touchscreen detects the movement of the user's finger and generates an interrupt request (IRQ) when a touch is detected.
- **Linux Kernel Layer**: The CPU responds to the IRQ by invoking the handler registered by the input device driver. The touchscreen controller driver decodes the physical signals (touch down/up) into Cartesian coordinates and other relevant information. The Linux input event driver (evdev) then translates these device-specific signals into Linux input events and passes them to character devices defined in the `/dev/input/eventX` directory [62].
- **Hardware Abstraction Layer (HAL)**: The EventHub component in Android receives the raw input events from the kernel and converts them into Android events.
- **Hardware Independent Layers**: After decoding (by InputReader) and dispatching (by InputDispatcher), the events are delivered to the foreground application as MotionEvent objects.

#### B. Android Display Workflow

Figure 18 shows the display system workflow through different layers, focusing on 2D frame refreshing [63]:

- **Hardware Independent Layers**: Each window on the Android platform is backed by a Surface, which is used for drawing display content. Surfaces can overlap or override each other, and updating a Surface triggers a screen refresh. Multiple Surfaces may be active concurrently, and they are composited by SurfaceFlinger onto the display.
- **Hardware Abstraction Layer (HAL)**: The Hardware Composer is the central point for all Android graphics rendering, used by SurfaceFlinger to composite Surfaces to the screen. Gralloc, the graphics memory allocator, is responsible for allocating memory requested by image producers.
- **Linux Kernel Layer**: Gralloc operates the FrameBuffer, defined as a character device (`/dev/graphics/fbX`, `fb0` for the main monitor), containing the UI content. Once the FrameBuffer geometry is programmed, the Display Sub-System (DSS) starts pulling pixels from memory and sending them to the display device, which is refreshed constantly.
- **Hardware Device Layer**: When a screen refresh is completed, the DSS releases an IRQ.

#### C. App Activity Detection

Our attack primarily focuses on identifying the launching pattern of an app. This can be extended to identify which Activity of a targeted app is running in the foreground. With this information, an attacker can hijack Activities at any time during the app's lifetime. Activities with unique UI refreshing patterns are more likely to be successfully inferred due to the nature of our attack. However, the bar for such an attack is higher because the loading time of an Activity is usually shorter than the app launch time.

We find that two types of Activities, camera and login, have unique UI refreshing patterns and can be reliably inferred. Camera Activities continuously refresh their UI for image previewing, generating continuous and large amounts of interrupts. Login Activities often include unique third-party modules for Single Sign-On (SSO), such as Facebook and Google+ SSO modules, making them distinct.

For example, the login Activity of the popular travel app Expedia can be inferred. We analyzed the Activity transition flow of this app and found that the main Activity leads to one of nine possible Activities based on user choice. Some Activities, like PreferenceActivity and AboutActivity, are indistinguishable due to their simple and static UIs. However, AccountLibActivity (for login) is quite different from the other eight. We collected interrupt time series for all nine Activities and applied the same training and testing methodologies. Our method could detect AccountLibActivity with 100% success. Thus, an attacker targeting Expedia users' credentials can achieve their goal using our inference attack.

Previous work by Chen et al. [18] on shared-memory side-channel attacks also studied UI hijacking on Android. Their work combined data sources like CPU utilization time and network statistics to achieve high accuracy. Our initial results show that interrupt patterns alone can be used to construct fingerprints. We believe our attack would also benefit from incorporating these additional data sources.

#### D. Experimental Dataset for Unlock Pattern Inference Attack

- **2-gram Patterns**: 2584, 3692, 7456, 8753
- **3-gram Patterns**: 3216, 6547, 8524, 98741, 2586, 4951, 78951, 95147, 1852, 3576, 6741, 8529, 2963, 5147, 7896, 9635, 123456, 4983, 65481, 7594, 29516, 5214, 6745, 81476, 36947, 5491, 6849, 8549, 3854, 5693, 7234, 9213, 4153, 5729, 7486, 951234
- **4-gram Patterns**: 1, 11, 1, 4, 4, 7, 77, 7, 1, 111, 4, 44, 4, 7, 7, 2, 2, 5, 8, 8, 2, 2, 5, 5, 8, 8, 3, 3, 6, 9, 9, 3, 3, 6, 666, 9, 9, 99, 1, 1, 4, 4, 7, 777, 1, 111, 4, 4, 7, 7, 2, 2, 5, 8, 8, 2, 5, 555, 8, 3, 33, 3, 6, 6, 9, 9, 99, 3, 33, 3, 6, 6, 9, 9, 1, 11, 1, 4, 4, 7, 7, 1, 1, 4, 4, 7, 77, 7, 2, 5, 5, 8, 2, 5, 8, 8, 3, 3, 6, 6, 9, 9, 99, 3, 6, 9, 9
- **5-gram Patterns**: 275389, 278945, 29587, 124567, 35918, 635742, 78365, 18579, 389514, 51897, 63894, 841596, 87253, 52146, 549637, 6741258, 743218, 76941, 94571, 78963214
- **Popular Patterns**: 1235789, 1235987, 1236987, 12369, 14789, 123654789, 12369874, 147852369, 14789632, 321456987, 36987412, 7415369, 1478963, 3214789, 3215987, 36987, 1475963, 7415963

#### E. Training Dataset for Foreground App Inference Attack

- air.com.hoimi.MathxMath
- cmb.pb
- cn.etouch.ecalendar.longshi2
- cn.wps.moffice
- com.aastocks.dzh
- com.airbnb.android
- com.ajnsnewmedia.kitchenstories
- com.android.phone
- com.antivirus
- com.antutu.ABenchMark
- com.baidu.baidutranslate
- com.baidu.baike
- com.baidu.searchbox
- com.booking
- com.citrix.saas.gotowebinar
- com.cleanmaster.mguard
- com.cleanmaster.security
- com.coolmobilesolution.fastscannerfree
- com.csst.ecdict
- com.dewmobile.kuaiya.play
- com.dianping.v1
- com.douban.frodo
- com.eastmoney.android.fund
- com.exchange.rate
- com.facebook.pages.app
- com.facebook.work
- com.globalsources.globalsources
- com.google.android.apps.docs
- com.google.android.apps.docs.editors.docs
- com.google.android.apps.docs.editors.sheets
- com.google.android.apps.docs.editors.slides
- com.google.android.deskclock
- com.google.android.googlequicksearchbox
- com.google.android.keep
- com.google.android.street
- com.hket.android.ctjobs
- com.hse28.hse28
- com.htsu.hsbcpersonalbanking
- com.icoolme.android.weather
- com.imdb.mobile
- com.indeed.android.jobsearch
- com.intsig.BCRLite
- com.intsig.camscanner
- com.job.android
- com.jobmarket.android
- com.jobsdb
- com.Kingdee.Express
- com.kpmoney.android
- com.labour.ies
- com.lenovo.anyshare.gps
- com.linkedin.android.jobs.jobseeker
- com.lionmobi.battery
- com.lionmobi.powerclean
- com.magisto
- com.malangstudio.alarmmon
- com.mandongkeji.comiclover.play
- com.megahub.appledaily.stockking.activity
- com.microsoft.hyperlapsemobile
- com.microsoft.rdc.android
- com.miniclip.agar.io
- com.mmg.theoverlander
- com.mobilesoft.kmb.mobile
- com.mobisystems.office
- com.money.on
- com.mtel.androidbea
- com.mt.mtxx.mtxx
- com.mymoney
- com.nuthon.centaline
- com.openrice.android
- com.pps.app
- com.qihoo.security
- com.roidapp.photogrid
- com.sankuai.movie
- com.scb.breezebanking.hk
- com.scmp.jiujik
- com.Slack
- com.smartwho.SmartAllCurrencyConverter
- com.smule.singandroid
- com.sometimeswefly.littlealchemy
- com.surpax.ledflashlight.panel
- com.ted.android
- com.tripadvisor.tripadvisor
- com.twitter.android
- com.wacai365
- com.xunlei.downloadprovider
- com.yahoo.infohub
- com.yahoo.mobile.client.android.weather
- com.yipiao
- com.youdao.dict
- com.zhihu.android
- ctrip.android.view
- freelance.flk.com.myapplication
- io.appsoluteright.hkexChecker
- io.silvrr.silvrrwallet.hk
- jp.united.app.kanahei.money
- me.chunyu.ChunyuDoctor
- sina.mobile.tianqitong
- tools.bmirechner
- tv.danmaku.bili
- tw.com.off.hkradio

---

This revised version aims to improve clarity, coherence, and professionalism. It organizes the content into clear sections and ensures that the text is well-structured and easy to follow.