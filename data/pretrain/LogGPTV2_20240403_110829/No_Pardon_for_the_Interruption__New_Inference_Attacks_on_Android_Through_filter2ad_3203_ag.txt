Security Symposium, 2001.
[60] R. Hund, C. Willems, and T. Holz, “Practical Timing Side Channel
Attacks against Kernel Space ASLR,” in Proceedings of the 2013 IEEE
Symposium on Security and Privacy (S&P), 2013.
[61] M. Andrysco, D. Kohlbrenner, K. Mowery, R. Jhala, S. Lerner, and
H. Shacham, “On Subnormal Floating Point and Abnormal Timing,”
in Proceedings of the 2015 IEEE Symposium on Security and Privacy
(S&P), 2015.
[62] J. Levin, “The Android Input Architecture,” http://newandroidbook.com/
[63] “Graphics
architecture,” https://source.android.com/devices/graphics/
ﬁles/AndroidInput.pdf, 2015.
architecture.html.
A. Android Touch Event Processing Flow
APPENDIX
Fig. 17 illustrates the touch event processing ﬂow on
Android and the implementation of each layer is described
below:
• Hardware Device Layer: Touchscreen can sense the
movement of user’s ﬁnger on the surface and release an
IRQ when detected.
• Linux Kernel Layer: CPU responds to the IRQ by calling
the handler registered by the input device driver. In this
case, touchscreen controller driver decodes the physical
signals about the touch action (down / up) to touch loca-
tion on the screen (Cartesian coordinates) and other useful
information. Next, the Linux input event driver – evdev
translates device-speciﬁc signals into Linux input events
and pass them to the character devices (single characters
are transmitted) deﬁned in the /dev/input/eventX
directory [62].
• Hardware Abstraction Layer: The EventHub component
provided by Android receives the raw input events re-
ported by the kernel and converts them to Android events.
• Hardware Independent Layers: Finally, after event de-
coding (by InputReader) and dispatching (by InputDis-
pacher), the events are delivered to the app taking focus
at foreground as MotionEvent objects.
B. Android Display Work Flow
Below, we describe the work ﬂow of DSS through different
layers, as shown in Fig. 18. For simplicity, we focus on the
ﬂow for 2D frame refreshing [63]:
• Hardware Independent Layers: Every window that
is
created on the Android platform is backed by a Surface,
which is used for drawing display content. A Surface
could overlap or even override another one and updating
430430
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:05 UTC from IEEE Xplore.  Restrictions apply. 
Application
SystemUI
Surface
Surface
BufferQueue
(SharedBufferStack)
BufferQueue
(SharedBufferStack)
SurfaceFlinger
(overlay & compose surfaces)
Hardware 
Composer
Gralloc 
Android Hardware 
Independent Layers
FrameBuffer
/dev/graphics/fbX
FrameBuffer 
Driver
DSS driver
LCD  Panel
m
Display Sub-System 
(DSS)
IRQ
Fig. 18. Simpliﬁed Android display system processing ﬂow.
HAL
Linux 
Kernel
Device
HAL
Linux 
Kernel
Device
Application
(holding input focus)
InputDispatcher
InputReader
EventHub
(for raw events)
Android Hardware 
Independent Layers
Event Device Node
/dev/input/eventX
Input Event 
Driver (evdev)
Touchscreen 
Controller Driver
Touchscreen
IRQ
Fig. 17. Simpliﬁed Android touch event processing ﬂow.
Surface object would cause the screen refresh. Multiple
Surfaces may be active concurrently and they are com-
posited by SurfaceFlinger onto the display.
• Hardware Abstraction Layer: Hardware Composer is the
central point for all Android graphics rendering, which
is used by SurfaceFlinger to composite Surfaces to the
screen. The graphics memory allocator Gralloc is respon-
sible for allocating memory that is requested by image
producers.
• Linux Kernel Layer: Gralloc operates
the Frame-
Buffer
in this layer deﬁned as a character device
/dev/graphics/fbX (fb0 for the main monitor)
with the UI content. Once the FrameBuffer geometry
is programmed, the DSS starts pulling the pixels from
memory and sending them to the display device [36],
which will be refreshed constantly.
• Hardware Device Layer: When a screen refresh is com-
pleted, an IRQ will be released by DSS.
C. App Activity Detection
Our attack mainly focuses on identifying the launching
pattern of an app. This attack could be extended to identify
which Activity of a targeted app is running in the foreground
through similar methods. With such information at disposal,
an attacker can hijack Activities at any time during the lifetime
of victim app. The Activities with unique UI refreshing pattern
among all the Activities initiated by one app are more likely
to be successfully inferred, due to the nature of our attack.
The bar for such attack is, however, higher since the loading
time of an Activity is usually shorter than the time of app
launching.
We ﬁnd two types of Activities, camera and login, usually
have unique UI refreshing patterns and can be reliably inferred.
Activity for camera always refreshes its UI for image preview-
ing, so continuous and large amount of interrupts could be
observed. A login Activity is often quite different from other
Activities as unique third-party modules for SSO (Single Sign
On), like Facebook and Google+ SSO modules, are included.
We examined several apps and found indeed these two
types of Activities can be attacked. For example, the login
Activity of a popular traveling app Expedia can be inferred.
We analyzed the Activity transition ﬂow of this app and
discovered that
the main Activity leads to any one of 9
Activities based on user’s choice. Among them, some Activi-
ties are indistinguishable, like PreferenceActivity and
AboutActivity, because their UIs are very concise and
contain no dynamic data. However, AccountLibActivity
(for login) is quite different from other 8 Activities. We col-
lected the interrupt time series for all 9 Activities and applied
the same training and testing methodologies. It
turns out
AccountLibActivity could be detected by our method
with 100 % success rate. Therefore, an attacker targeting the
credentials of Expedia users can achieve her goal leveraging
the information provided by our inference attack.
Previous work on shared-memory side-channel by Chen
et al. [18] studied the problem of UI hijacking on Android
as well. Their work combines other data sources like CPU
utilization time, network statistics to reach high accuracy. Our
initial result shows interrupt patterns itself could be used to
construct ﬁngerprint. We believe our attack would also beneﬁt
from using these sources as well.
D. Experimental Dataset for Unlock Pattern Inference Attack
2-gram Patterns.
2584
3692
7456
8753
3-gram Patterns.
3216
6547
8524
98741
2586
4951
78951
95147
1852
3576
6741
8529
2963
5147
7896
9635
123456
4983
65481
7594
29516
5214
6745
81476
36947
5491
6849
8549
3854
5693
7234
9213
4153
5729
7486
951234
4-gram Patterns.
431431
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:05 UTC from IEEE Xplore.  Restrictions apply. 
1
11
1
4
4
7
77
7
1
111
4
44
4
7
7
2
2
5
8
8
2
2
5
5
8
8
3
3
6
9
9
3
3
6
666
9
9
99
1
1
4
4
7
777
1
111
4
4
7
7
2
2
5
8
8
2
5
555
8
3
33
3
6
6
9
9
99
3
33
3
6
6
9
9
1
11
1
4
4
7
7
1
1
4
4
7
77
7
2
5
5
8
2
5
8
8
3
3
6
6
9
9
99
3
6
9
9
Fig. 19. Popular patterns.
275389 278945 29587
124567
35918
635742
78365
18579
389514 51897
63894
841596 87253
52146
549637
6741258 743218 76941
94571
78963214
5-gram Patterns.
1258469 1485263 1598436 186347 2586793
3269514 3572814 418365 451823 36214789
451863
576483
452871 4571238 5283147 543689
6753291 749568 7534921 74168523
Popular Patterns.
1235789 1235987 1236987 12369
14789
123654789 12369874 147852369 14789632
321456987 36987412 7415369
1478963 3214789 3215987 36987
1475963
7415963
E. Training Dataset for Foreground App Inference Attack
air.com.hoimi.MathxMath
cmb.pb
cn.etouch.ecalendar.longshi2
cn.wps.moffice
com.aastocks.dzh
com.airbnb.android
com.ajnsnewmedia.kitchenstories
com.android.phone
com.antivirus
com.antutu.ABenchMark
com.baidu.baidutranslate
com.baidu.baike
com.baidu.searchbox
com.booking
com.citrix.saas.gotowebinar
com.cleanmaster.mguard
com.cleanmaster.security
com.coolmobilesolution.fastscannerfree
com.csst.ecdict
com.dewmobile.kuaiya.play
com.dianping.v1
com.douban.frodo
com.eastmoney.android.fund
com.exchange.rate
com.facebook.pages.app
com.facebook.work
com.globalsources.globalsources
com.google.android.apps.docs
com.google.android.apps.docs.editors.docs
com.google.android.apps.docs.editors.sheets
com.google.android.apps.docs.editors.slides
com.google.android.deskclock
432432
com.google.android.googlequicksearchbox
com.google.android.keep
com.google.android.street
com.hket.android.ctjobs
com.hse28.hse28
com.htsu.hsbcpersonalbanking
com.icoolme.android.weather
com.imdb.mobile
com.indeed.android.jobsearch
com.intsig.BCRLite
com.intsig.camscanner
com.job.android
com.jobmarket.android
com.jobsdb
com.Kingdee.Express
com.kpmoney.android
com.labour.ies
com.lenovo.anyshare.gps
com.linkedin.android.jobs.jobseeker
com.lionmobi.battery
com.lionmobi.powerclean
com.magisto
com.malangstudio.alarmmon
com.mandongkeji.comiclover.play
com.megahub.appledaily.stockking.activity
com.microsoft.hyperlapsemobile
com.microsoft.rdc.android
com.miniclip.agar.io
com.mmg.theoverlander
com.mobilesoft.kmb.mobile
com.mobisystems.office
com.money.on
com.mtel.androidbea
com.mt.mtxx.mtxx
com.mymoney
com.nuthon.centaline
com.openrice.android
com.pps.app
com.qihoo.security
com.roidapp.photogrid
com.sankuai.movie
com.scb.breezebanking.hk
com.scmp.jiujik
com.Slack
com.smartwho.SmartAllCurrencyConverter
com.smule.singandroid
com.sometimeswefly.littlealchemy
com.surpax.ledflashlight.panel
com.ted.android
com.tripadvisor.tripadvisor
com.twitter.android
com.wacai365
com.xunlei.downloadprovider
com.yahoo.infohub
com.yahoo.mobile.client.android.weather
com.yipiao
com.youdao.dict
com.zhihu.android
ctrip.android.view
freelance.flk.com.myapplication
io.appsoluteright.hkexChecker
io.silvrr.silvrrwallet.hk
jp.united.app.kanahei.money
me.chunyu.ChunyuDoctor
sina.mobile.tianqitong
tools.bmirechner
tv.danmaku.bili
tw.com.off.hkradio
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:05 UTC from IEEE Xplore.  Restrictions apply.