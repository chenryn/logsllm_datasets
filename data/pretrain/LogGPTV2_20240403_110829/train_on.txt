.b %ec
(year only) in the locale's alternative representation.
.tp
.b %ey
the full alternative year representation.
.pp
the o modifier specifies that the numerical input may be in an
alternative locale-dependent format:
.tp
.br %od " or " %oe
the day of the month using the locale's alternative numeric symbols;
leading zeros are permitted but not required.
.tp
.b %oh
the hour (24-hour clock) using the locale's alternative numeric symbols.
.tp
.b %oi
the hour (12-hour clock) using the locale's alternative numeric symbols.
.tp
.b %om
the month using the locale's alternative numeric symbols.
.tp
.b %om
the minutes using the locale's alternative numeric symbols.
.tp
.b %os
the seconds using the locale's alternative numeric symbols.
.tp
.b %ou
the week number of the year (sunday as the first day of the week)
using the locale's alternative numeric symbols.
.tp
.b %ow
the ordinal number of the day of the week (sunday=0),
 using the locale's alternative numeric symbols.
.tp
.b %ow
the week number of the year (monday as the first day of the week)
using the locale's alternative numeric symbols.
.tp
.b %oy
the year (offset from
.br %c )
using the locale's alternative numeric symbols.
.sh return value
the return value of the function is a pointer to the first character
not processed in this function call.
in case the input string
contains more characters than required by the format string, the return
value points right after the last consumed input character.
in case the whole input string is consumed,
the return value points to the null byte at the end of the string.
if
.br strptime ()
fails to match all
of the format string and therefore an error occurred, the function
returns null.
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br strptime ()
t}	thread safety	mt-safe env locale
.te
.hy
.ad
.sp 1
.sh conforming to
posix.1-2001, posix.1-2008, susv2.
.sh notes
in principle, this function does not initialize
.i tm
but
stores only the values specified.
this means that
.i tm
should be initialized before the call.
details differ a bit between different unix systems.
the glibc implementation does not touch those fields which are not
explicitly specified, except that it recomputes the
.i tm_wday
and
.i tm_yday
field if any of the year, month, or day elements changed.
.\" .pp
.\" this function is available since libc 4.6.8.
.\" linux libc4 and libc5 includes define the prototype unconditionally;
.\" glibc2 includes provide a prototype only when
.\" .b _xopen_source
.\" or
.\" .b _gnu_source
.\" are defined.
.\" .pp
.\" before libc 5.4.13 whitespace
.\" (and the \(aqn\(aq and \(aqt\(aq specifications) was not handled,
.\" no \(aqe\(aq and \(aqo\(aq locale modifier characters were accepted,
.\" and the \(aqc\(aq specification was a synonym for the \(aqc\(aq specification.
.pp
the \(aqy\(aq (year in century) specification is taken to specify a year
.\" in the 20th century by libc4 and libc5.
.\" it is taken to be a year
in the range 1950\(en2049 by glibc 2.0.
it is taken to be a year in
1969\(en2068 since glibc 2.1.
.\" in libc4 and libc5 the code for %i is broken (fixed in glibc;
.\" %oi was fixed in glibc 2.2.4).
.ss glibc notes
for reasons of symmetry, glibc tries to support for
.br strptime ()
the same format characters as for
.br strftime (3).
(in most cases, the corresponding fields are parsed, but no field in
.i tm
is changed.)
this leads to
.tp
.b %f
equivalent to
.br %y\-%m\-%d ,
the iso 8601 date format.
.tp
.b %g
the year corresponding to the iso week number, but without the century
(0\(en99).
.tp
.b %g
the year corresponding to the iso week number.
(for example, 1991.)
.tp
.b %u
the day of the week as a decimal number (1\(en7, where monday = 1).
.tp
.b %v
the iso 8601:1988 week number as a decimal number (1\(en53).
if the week (starting on monday) containing 1 january has four or more days
in the new year, then it is considered week 1.
otherwise, it is the last week
of the previous year, and the next week is week 1.
.tp
.b %z
an rfc-822/iso 8601 standard timezone specification.
.tp
.b %z
the timezone name.
.pp
similarly, because of gnu extensions to
.br strftime (3),
.b %k
is accepted as a synonym for
.br %h ,
and
.b %l
should be accepted
as a synonym for
.br %i ,
and
.b %p
is accepted as a synonym for
.br %p .
finally
.tp
.b %s
the number of seconds since the epoch, 1970-01-01 00:00:00 +0000 (utc).
leap seconds are not counted unless leap second support is available.
.pp
the glibc implementation does not require whitespace between
two field descriptors.
.sh examples
the following example demonstrates the use of
.br strptime ()
and
.br strftime (3).
.pp
.ex
#define _xopen_source
#include 
#include 
#include 
#include 
int
main(void)
{
    struct tm tm;
    char buf[255];
    memset(&tm, 0, sizeof(tm));
    strptime("2001\-11\-12 18:31:01", "%y\-%m\-%d %h:%m:%s", &tm);
    strftime(buf, sizeof(buf), "%d %b %y %h:%m", &tm);
    puts(buf);
    exit(exit_success);
}
.ee
.sh see also
.br time (2),
.br getdate (3),
.br scanf (3),
.br setlocale (3),
.br strftime (3)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
#!/bin/sh
log=/tmp/markup_check.$$
rm -f $log $log.full
if test $# -eq 0; then
    echo 1>&2 "usage: $0 filename-or-dirname ... $#"
    exit 1
fi
file_list=$(find $* -type f | grep '\.[1-9][a-za-z]*$')
pagename_pattern='[a-z_a-z][^ ]*'
(
    echo ""
    echo "checking for page xref without space before left parenthesis:"
    pattern='^\.br  *'"$pagename_pattern"'([1-8][^1-9]'
    echo "    pattern: '$pattern'"
    grep "$pattern" $file_list | sed 's/^/        /' | tee -a $log
    echo ""
    echo "checking for .ir xrefs that should be .br"
    pattern='^\.ir  *'"$pagename_pattern"'  *([1-8][^1-9]'
    echo "    pattern: '$pattern'"
    grep "$pattern" $file_list | sed 's/^/        /' | tee -a $log
    echo ""
    echo "checking for misformatted punctuation in .br xrefs"
    pattern='^\.br  *'"$pagename_pattern"'  *([1-8a-za-z]*) [^ ]'
    echo "    pattern: '$pattern'"
    grep "$pattern" $file_list | sed 's/^/        /' | tee -a $log
    echo ""
    echo "checking for .b xrefs that should be .br"
    pattern='^\.b '"$pagename_pattern"'  *([1-8a-za-z]*)'
    echo "    pattern: '$pattern'"
    grep "$pattern" $file_list | sed 's/^/        /' | tee -a $log
) > $log.full
if test $(cat $log | wc -l) -gt 0; then
    echo ""
    echo "markup errors!!!!!"
    cat $log.full
    exit 1
fi
exit 0
.\" copyright 1995 jim van zandt 
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.\" corrected prototype and include, aeb, 990927
.th lsearch 3  2021-03-22 "gnu" "linux programmer's manual"
.sh name
lfind, lsearch \- linear search of an array
.sh synopsis
.nf
.b #include 
.pp
.bi "void *lfind(const void *" key ", const void *" base ", size_t *" nmemb ,
.bi "            size_t " size ", int(*" compar ")(const void *, const void *));"
.bi "void *lsearch(const void *" key ", void *" base ", size_t *" nmemb ,
.bi "            size_t " size ", int(*" compar ")(const void *, const void *));"
.fi
.sh description
.br lfind ()
and
.br lsearch ()
perform a linear search for
.i key
in the array
.ir base
which has
.i *nmemb
elements of
.i size
bytes each.
the comparison function referenced by
.i compar
is expected to have two arguments which point to the
.i key
object and to an array member, in that order, and which
returns zero if the
.i key
object matches the array member, and
nonzero otherwise.
.pp
if
.br lsearch ()
does not find a matching element, then the
.i key
object is inserted at the end of the table, and
.i *nmemb
is
incremented.
in particular, one should know that a matching element
exists, or that more room is available.
.sh return value
.br lfind ()
returns a pointer to a matching member of the array, or
null if no match is found.
.br lsearch ()
returns a pointer to
a matching member of the array, or to the newly added member if no
match is found.
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br lfind (),
.br lsearch ()
t}	thread safety	mt-safe
.te
.hy
.ad
.sp 1
.sh conforming to
posix.1-2001, posix.1-2008, svr4, 4.3bsd.
present in libc since libc-4.6.27.
.sh bugs
the naming is unfortunate.
.sh see also
.br bsearch (3),
.br hsearch (3),
.br tsearch (3)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/log.3
.\"  copyright (c) 2003  davide libenzi
.\"
.\" %%%license_start(gplv2+_sw_3_para)
.\"  this program is free software; you can redistribute it and/or modify
.\"  it under the terms of the gnu general public license as published by
.\"  the free software foundation; either version 2 of the license, or
.\"  (at your option) any later version.
.\"
.\"  this program is distributed in the hope that it will be useful,
.\"  but without any warranty; without even the implied warranty of
.\"  merchantability or fitness for a particular purpose.  see the
.\"  gnu general public license for more details.
.\"
.\" you should have received a copy of the gnu general public
.\" license along with this manual; if not, see
.\" .
.\" %%%license_end
.\"
.\"  davide libenzi 
.\"
.th epoll 7 2021-03-22 "linux" "linux programmer's manual"
.sh name
epoll \- i/o event notification facility
.sh synopsis
.nf
.b #include 
.fi
.sh description
the
.b epoll
api performs a similar task to
.br poll (2):
monitoring multiple file descriptors to see if i/o is possible on any of them.
the
.b epoll
api can be used either as an edge-triggered or a level-triggered
interface and scales well to large numbers of watched file descriptors.
.pp
the central concept of the
.b epoll
api is the
.b epoll
.ir instance ,
an in-kernel data structure which, from a user-space perspective,
can be considered as a container for two lists:
.ip \(bu 2
the
.i interest
list (sometimes also called the
.b epoll
set): the set of file descriptors that the process has registered
an interest in monitoring.
.ip \(bu
the
.i ready
list: the set of file descriptors that are "ready" for i/o.
the ready list is a subset of
(or, more precisely, a set of references to)
the file descriptors in the interest list.
the ready list is dynamically populated
by the kernel as a result of i/o activity on those file descriptors.
.pp
the following system calls are provided to
create and manage an
.b epoll
instance:
.ip \(bu 2
.br epoll_create (2)
creates a new
.b epoll
instance and returns a file descriptor referring to that instance.
(the more recent
.br epoll_create1 (2)
extends the functionality of
.br epoll_create (2).)
.ip \(bu
interest in particular file descriptors is then registered via
.br epoll_ctl (2),
which adds items to the interest list of the
.b epoll
instance.
.ip \(bu
.br epoll_wait (2)
waits for i/o events,
blocking the calling thread if no events are currently available.
(this system call can be thought of as fetching items from
the ready list of the
.b epoll
instance.)
.\"
.ss level-triggered and edge-triggered
the
.b epoll
event distribution interface is able to behave both as edge-triggered
(et) and as level-triggered (lt).
the difference between the two mechanisms
can be described as follows.
suppose that
this scenario happens:
.ip 1. 3
the file descriptor that represents the read side of a pipe
.ri ( rfd )
is registered on the
.b epoll
instance.
.ip 2.
a pipe writer writes 2\ kb of data on the write side of the pipe.
.ip 3.
a call to
.br epoll_wait (2)
is done that will return
.i rfd
as a ready file descriptor.
.ip 4.
the pipe reader reads 1\ kb of data from
.ir rfd .
.ip 5.
a call to
.br epoll_wait (2)
is done.
.pp
if the
.i rfd
file descriptor has been added to the
.b epoll
interface using the
.b epollet
(edge-triggered)
flag, the call to
.br epoll_wait (2)
done in step
.b 5
will probably hang despite the available data still present in the file
input buffer;
meanwhile the remote peer might be expecting a response based on the
data it already sent.
the reason for this is that edge-triggered mode
delivers events only when changes occur on the monitored file descriptor.
so, in step
.b 5
the caller might end up waiting for some data that is already present inside
the input buffer.
in the above example, an event on
.i rfd
will be generated because of the write done in
.b 2
and the event is consumed in
.br 3 .
since the read operation done in
.b 4
does not consume the whole buffer data, the call to
.br epoll_wait (2)
done in step
.b 5
might block indefinitely.
.pp
an application that employs the
.b epollet
flag should use nonblocking file descriptors to avoid having a blocking
read or write starve a task that is handling multiple file descriptors.
the suggested way to use
.b epoll
as an edge-triggered
.rb ( epollet )
interface is as follows:
.ip a) 3
with nonblocking file descriptors; and
.ip b)
by waiting for an event only after
.br read (2)
or
.br write (2)
return