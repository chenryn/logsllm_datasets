 **Glide Version** :  
4.1
**Integration libraries** :
**Device/Android Version** :
**Issue details / Repro steps / Use case background** :
@sjudd  
It seems `9d10097` does not take in account the fact that a request is
completed. So restarting a request that is completed will actually do nothing.
Maybe this is on purpose but this implies a side effect of preventing a force
reload when needed and does not trigger any listener.
For example in my case when doing transition my fetcher only load the image
from cache to avoid slowing down the transition. Then after the transition
start a full download by restarting the glide query. (I'm pretty sure it would
be the same for any app that would for example restart the requests after
network is connected when first one occurred without network).
With 3 and 4.0 it works correctly, but with 4.1 the subsequent query is not
restarted preventing the actual load to happens and do not trigger any
listener to warn the application.
Cheating with different models could work, but then when the image is actually
already cached it would trigger a real reload and not a memory hit cache as
Glide think it's different items.
I understand the purpose of the optimization but impact are not neutral if the
completed state is not taken in account.
Maybe by default if state is completed then the request should restart, and an
option to always prevent restart provided. Or add an option to force the
reload. Or a new Listener event so app can cheat (But for this one impact may
be huge on API clients).
Can PR something but need your choice and target. (And maybe an hint for the
detection of completed state)
Default should maybe work like actual, or maybe add something in the
documentation, as the total ignore of the request may trouble clients to
actually understand what is happening.