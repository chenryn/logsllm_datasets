### Table 4: Heavily Used and Checked Permissions
This table lists the permissions with the highest number of API mappings and checks in Android 4.0. Each column shows two numbers: the left number represents documented APIs, while the right number includes all APIs.

For example, many APIs that require `BROADCAST_STICKY` or `WAKE_LOCK` pass through a small number of permission checks in the `sendStickBroadcast` method and `PowerManagerService` class. Permissions with a large number of API mappings tend to protect generic system resources. In contrast, permissions with a high number of checks, such as `READ_CONTACTS` and `READ_SOCIAL_STREAM`, typically protect content providers that store user-specific private information.

### Summary
The permission system in Android is broad but not heavily interconnected. Permissions with many API mappings generally protect generic system resources rather than user data and have fewer checks.

### Evolution of the Android Permission System Over Time
From Table 1, even though the codebase in Android increased by over 40% from version 2.2 to 4.0, the ratio of one permission check per 2,000 lines of code (KLOC) has remained consistent across all versions. This indicates that the amount of checking for sensitive resource access has increased proportionally with the functionality in the OS. However, the number of documented APIs requiring permissions has increased by over 54% in Android 4.0, suggesting that more permission-requiring functionality is exposed via APIs. This increase can be attributed to new features involving user profiles and social network sharing, which require access to sensitive content stored by new content providers. This is reflected in the 43% increase in content provider permission checks.

Table 3 provides a summary of how permission requirements have been added to Android APIs over time. It shows that existing APIs have been updated to require permissions, new APIs have been introduced with permission requirements, and previously undocumented APIs now have documented permission requirements.

In Android 4.0, the lines of code (LOC) increased by 27%, while the number of documented APIs only increased by 4%. Given that the proportion of functionality requiring permissions has remained relatively constant, a larger percentage of the new APIs in 4.0 (19%) must require permissions compared to previous versions (6%). This suggests that there is more permission-requiring functionality behind each new API in Android 4.0.

Initially, we hypothesized that changes in API permission requirements between versions might be due to errors in the access control policy or fundamental changes in API functionality. However, upon closer examination, we found that these changes were often due to subtle and innocuous code modifications. For instance, in Android 2.2, the `startDiscovery` method in `BluetoothAdapter` already required the `BLUETOOTH_ADMIN` permission. Between Android 2.2 and 2.3, a call to `getState` was added, which requires the `BLUETOOTH` permission. This resulted in `startDiscovery` also requiring the `BLUETOOTH` permission in Android 2.3. The added functionality was for debugging and did not fundamentally change the behavior of `startDiscovery`.

Another example is the `resetPassword` method in `DevicePolicyManagerService`. Between Android 2.3 and 3.2, a call to `checkPasswordHistory` was added, which requires the `WRITE_SETTINGS` permission. This meant that `resetPassword` also required `WRITE_SETTINGS`. However, in Android 4.0, the call to `checkPasswordHistory` was removed, and `resetPassword` no longer needed the `WRITE_SETTINGS` permission. These examples illustrate that changes in permission requirements are often due to arbitrary reasons and do not necessarily indicate errors in permission checking or fundamental changes in API functionality.

We believe there is a fundamental trade-off between the stability of a permission specification over time and the granularity of the permission specification. On one hand, stability is desirable as it means application developers do not need to update their declared permissions as the underlying OS changes. On the other hand, fine-grained permissions provide better least-privilege protection. For example, combining the `BLUETOOTH_ADMIN` and `BLUETOOTH` permissions would mean that 10% of the APIs that only had the `BLUETOOTH_ADMIN` permission would unnecessarily gain the `BLUETOOTH` permission, and 64% of the APIs that only had `BLUETOOTH` permissions would unnecessarily gain the `BLUETOOTH_ADMIN` permission. While this would prevent the change in permissions needed for `startDiscovery` from Android 2.2 to 2.3, it would reduce least-privilege protection.

### Summary
Over time, the number of permission checks in Android has remained proportional to the code size, though the amount of sensitive functionality used by APIs has increased. There is a fundamental trade-off between the stability of the permission specification and enforcing least-privilege with fine-grained permissions.

### Related Work
The closest related work includes the Stowaway project [14], Bartel et al. [4], and Vidas et al. [21]. The main difference between PScout and previous work is that they focus on measuring the amount of permission overdeclaration in third-party applications. As a result, their extracted specifications vary in completeness, but none are as complete as PScout.

Stowaway extracts an Android permission specification using API fuzzing, which is less complete than PScout. Their main goal was to measure permission overdeclaration rather than extract a complete specification. PScout's specification is a superset of Stowaway's, and the measured overdeclaration rates agree with their results.

Bartel et al. perform a call-graph-based analysis on the Android framework, similar to PScout but less extensive. PScout handles Intent and Content Provider functions, whereas Bartel's analysis only infers permission checks on `checkPermission` functions. This results in a more comprehensive mapping by PScout.

Vidas et al. extract a permission specification by scanning the Android documentation, which is the least complete of all previous work due to the incompleteness of the documentation.

There is extensive research on permission-based systems and Android security, including techniques for protecting user privacy, detecting malware, and certifying application security. Having an accurate permission specification for Android, along with its analysis, complements this body of work.

Previous work on extracting specifications from programs for model checking includes Bandera [9] and Lie et al. [19]. Both abstract details and reduce the size of the code base when extracting models. Other model checkers, such as SLAM [2] and BLAST [17], perform automatic abstractions during code checking. PScout, however, analyzes a much larger code base than previous work.

### Conclusion
We developed PScout, a version-independent tool to extract the permission specification and answer key questions about Android's permission system. Extracting a permission specification from Android is challenging due to the distributed nature of permission checks and API calls. We find that it is possible to extract an accurate specification using lightweight call-graph analysis, domain-specific refinements, and uniform abstraction for permission checks. Our evaluation shows that the extracted specification is more complete and has a low number of false mappings.

By analyzing several major versions of the Android OS, we reveal interesting characteristics of the permission specification. First, the Android permission system has little redundancy in non-system permissions, but some permissions are hidden from most developers because they are only required by undocumented APIs. Second, fine-grained permissions cause minor code changes to result in churn in API permission requirements. While a coarser permission set can improve stability, it comes at the expense of least-privilege protection. PScout can form the basis for more sophisticated static analysis tools to further understand smartphone permission systems.

### Acknowledgements
We thank Adrienne Porter Felt, Phillipa Gill, Mohammad Mannan, David Barrera, and the anonymous reviewers for their helpful comments. Kathy is supported by an OGS and a NSERC CGSM scholarship. This work was also supported in part by the NSERC ISSNet Strategic Network, an NSERC Engage Grant, an NSERC Discovery Grant, an MRI Early Researcher Award, and a grant from the Ontario Research Fund.

### References
[1] K. W. Y. Au, Y. F. Zhou, Z. Huang, P. Gill, and D. Lie. Short paper: A look at smartphone permission models. In Proceedings of the 1st ACM Workshop on Security and Privacy in Smartphones and Mobile Devices (SPSM), pages 63â€“68, Oct. 2011.
...
[21] T. Vidas, N. Christin, and L. Cranor. Curbing Android permission creep. In Proceedings of the Web 2.0 Security and Privacy 2011 workshop (W2SP 2011), Oakland, CA, May 2011.