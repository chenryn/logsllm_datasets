1,362
1,086
1
5
4
37
29
37
29
22
16
12
1
7
5
67
275
67
275
163
44
85
Table 4: Heavily used and checked permissions.
This table gives the permissions with the largest
number of API mappings and largest number of
checks in Android 4.0. In each column, the left num-
ber represents mappings and checks for documented
APIs only, the right number represents mappings
and checks for all APIs.
pass through a single permission check in the WallPaperMan-
agerSerivce. Similarly, the vast majority of APIs that need
BROADCAST_STICKY or WAKE_LOCK pass through a small num-
ber of permission checks in the sendStickBroadcast method
and PowerManagerService class. The permissions that map
to the largest number of APIs tend to be permissions pro-
tecting generic system resources. In contrast, a larger frac-
tion of the permissions with a large number of checks, such
as READ_CONTACTS and READ_SOCIAL_STREAM, tend to protect
content providers that store private information belonging
to the user.
Summary: The permission system is broad but not heavily
interconnected. Permissions that have many API mappings
tend to protect generic system resources rather than user
data and have fewer permission checks.
How has the permission system of Android evolved over
time?
From Table 1, even though the amount of code in Android
has increased by over 40% from 2.2 to 4.0, there has re-
mained roughly one permission check for every 2KLOC in
all versions. Thus, the amount of checking that Android
performs to ensure that applications have permissions to
access sensitive resources has increase proportionally with
the functionality in the OS. However, when we compare the
number of documented APIs that require permissions, we
see that this has increased by over 54% in Android 4.0, indi-
cating that Android 4.0 exposes more permission-requiring
functionality to applications via APIs. This increase can at
least be partially explained by examining the Android 4.0
SDK documentation, which highlights key changes involving
user proﬁles and social network sharing on all applications.
Such functionality requires access to sensitive content stored
by new content providers, which is reﬂected in the 43% in-
crease in the number of content provider permission checks.
To further explore how the amount of sensitive function-
ality that is exposed to application has increased over time,
Table 3 summarizes how permission requirements have been
added to Android APIs over time. As we can see, there
have been both existing APIs that have been upgraded to
require permissions, new APIs added that require permis-
sions, as well as undocumented APIs that require permis-
sions became documented.
In Android 4.0, the LOC in-
creased by 27% while the number of documented APIs only
increased by 4%. Recall from Table 1 that the proportion
of functionality that requires permissions has remained rel-
atively constant, so with the fewer new APIs in 4.0, a larger
percentage of those APIs must require permissions (19% in
Android 4.0 versus 6% in previous versions). This indicates
there is more permission-requiring functionality behind each
new Android 4.0 API.
Initially, we hypothesized that the APIs whose permission
requirements changed between versions might have done so
because of errors in Android access control policy or due to
fundamental changes in the functionality of the APIs. How-
ever, when we examined the new paths between the APIs
and permission checks that caused the change in permis-
sion requirement, we found that the changes were actually
often due to subtle and innocuous code changes. For ex-
ample, in Android 2.2 the startDiscovery method in the
BluetoothAdapter starts bluetooth device discovery and al-
ready requires the BLUETOOTH_ADMIN permission. Between
Android 2.2 and Android 2.3, a call to getState was added,
which checks if the bluetooth device is on and terminates
the function early if it is not. getState requires the BLUE-
TOOTH permission so as a result, startDiscovery also re-
quires the BLUETOOTH permission as of Android 2.3. The
added functionality was for debugging and does not funda-
mentally change the behavior of startDiscovery, yet results
in an additional permission requirement. In another exam-
ple, between Android 2.3 to Android 3.2, the resetPassword
method in the DevicePolicyManagerService had a call to
checkPasswordHistory added to it to make sure the user did
not reset their password to a recently used password. check-
PasswordHistory requires the WRITE_SETTINGS permission,
which allows the application to read or write phone settings,
so as a result, resetPassword also requires WRITE_SETTINGS.
However, in Android 4.0, which is supposed to be a merge of
Android 2.3 and Android 3.2, the call to checkPasswordHis-
tory has been removed, and resetPassword no longer needs
the WRITE_SETTINGS permission. These examples illustrate
that changes in the permission requirement over time are
often due to arbitrary reasons and the addition or removal
of a permission requirement is not often indicative of errors
in permission checking or in fundamental changes to API
functionality.
We believe that there is a fundamental trade-oﬀ between
the stability of a permission speciﬁcation over time and how
ﬁne-grain the permission speciﬁcation is. On one hand,
stability of the permission speciﬁcation is desirable as it
means that application developers do not need to update
the permissions their applications declare as the underly-
ing OS changes. On the other hand, ﬁne-grain permis-
sions provide better least-privilege protection. For exam-
ple, combining the BLUETOOTH_ADMIN and BLUETOOTH permis-
sions would mean that 10% of the APIs that only had the
BLUETOOTH_ADMIN permission would unnecessarily gain the
BLUETOOTH permission and 64% of the APIs that only had
BLUETOOTH permissions would unnecessarily gain the BLUE-
TOOTH_ADMIN permission. However, this reduction in least
privilege would have prevented the change in permissions
needed for startDiscovery from Android 2.2 to 2.3. We
226have found several instances of the same trade-oﬀ within An-
droid. While we do not believe that one can have both per-
mission stability and least-privilege together, we believe that
awareness of this trade-oﬀ may help the design of permission
systems in newer mobile OSs such as Windows Phone and
B2G.
Summary: Over time, the number of permission checks in
Android has remained constant with code size, though the
amount of sensitive functionality used by APIs has been in-
creasing. There is a fundamental trade-oﬀ between stability
of the permission speciﬁcation and enforcing least-privilege
with ﬁne-grain permissions.
6. RELATED WORK
The closest related work is the Stowaway project [14], Bar-
tel et al. [4] and Vidas et al. [21]. The main diﬀerence be-
tween PScout and previous work is that their focus is to
measure the amount of permission overdeclaration in third
party applications. As a result, they have varying levels of
completeness in the speciﬁcation they extract to measure
the overdeclaration, but none are as complete as PScout.
We discuss the speciﬁc diﬀerences below.
Stowaway extracts an Android permission speciﬁcation
using API fuzzing and as a result is less complete than
PScout. For their purposes, this was suﬃcient since the main
purpose of their work was to measure the amount of permis-
sion overdeclaration as opposed to extract a complete spec-
iﬁcation. The authors of Stowaway have made their map-
ping available so we are able to compare against theirs. For
the most part, PScout’s speciﬁcation is a superset of their
extracted speciﬁcation and the rate and amount of overdec-
laration we measure in applications also agrees with their
results.
Bartel et al. perform a call-graph based analysis on the
Android framework that is very similar, but less extensive
than PScout’s. The main diﬀerences are that PScout han-
dles Intent and Content Provider functions whereas Bartel’s
analysis only infers permission checks on checkPermission
functions. As a result, while Bartel’s mapping is double the
size of that reported by Stowaway because they use static
analysis, it is still considerably less complete than the map-
ping produced by PScout, likely because of the missing per-
mission checks.
Vidas et al. extract a permission speciﬁcation by scanning
the Android documentation. As a result, their speciﬁcation
is the least complete of all previous work since the Android
documentation is incomplete.
There is a large body of security research on permission-
based systems [15, 16] and in Android security [6, 7, 8, 11, 12,
13, 18]. Many techniques are proposed to protect user pri-
vacy, detect malware, or certify application security. Batyuk
et al. [5] use static analysis to detect privacy leakage in An-
droid applications. AppFence
[18] modiﬁes Android OS
to anonymize sensitive user data for applications that are
not authorized to access it and use taint analysis to prevent
applications that are authorized to use sensitive user data
from transmitting leaking it. Crowdroid [7] analyzes the
pattern of system calls made by applications to detect mal-
ware. We feel that having an accurate permission speciﬁca-
tion for Android, as well as an analysis of that speciﬁcation,
is complementary to work on securing Android and other
similar smartphone OSs.
There has been previous work in extracting speciﬁcations
from programs for the purposes of explicit model check-
ing. Bandera extracts ﬁnite state models from Java source
code [9] and Lie et al. [19] extract models from cache coher-
ence protocol code. To produce models that are checkable
by a model checker, both must abstract details of the im-
plementations and perform size reduction on elements in the
code when they extract their models. Other model checkers,
such as SLAM [2] and BLAST [17] take a step further and
perform automatic abstractions as they check the code. In
contrast, the size of the code base PScout is analyzing is far
larger than the code base in this previous work.
7. CONCLUSION
We built PScout, a version-independent tool to extract
the permission speciﬁcation and take the ﬁrst steps to an-
swer some key questions about Android’s permission system.
One of the challenges with extracting a permission speciﬁ-
cation from Android is that the permission checks and API
calls that lead to them are distributed over an extremely
large code base. We ﬁnd that it is possible to extract an ac-
curate permission speciﬁcation using light-weight call-graph
analysis, augmenting that analysis with domain-speciﬁc in-
formation to selectively reﬁne parts of that call-graph with
ﬂow-sensitive analysis, and using a uniform abstraction for
permission checks. Our evaluation of the extracted speci-
ﬁcation shows that it is more complete when compared to
other permission speciﬁcations, but still has a low number
of false mappings due to infeasible paths.
By using PScout to analyze several major versions of the
Android OS we expose some interesting characteristics of
the Android permission speciﬁcation. First, the Android
permission system has little redundancy in its set of non-
system permissions, but a small subset of the permission
can be hidden from most developers since they are only re-
quired by undocumented APIs and very few applications use
undocumented APIs. Second, the ﬁne-grained permissions
cause innocuous code changes to result in churn in the per-
mission requirements of APIs. While a coarser permission
set can improve the stability of permission speciﬁcation and
alleviate this churn, it comes at the expense least-privilege
protection. From our experience, we believe that PScout
can form a basis for more sophisticated static analysis tools
to further analyze and understand the implementation and
design of smartphone permission systems.
Acknowledgements
The authors would like to thank Adrienne Porter Felt, Philli-
pa Gill, Mohammad Mannan, David Barrera and the anony-
mous reviewers for their helpful comments. Kathy is sup-
ported by an OGS and a NSERC CGSM scholarship. The
work in this paper was also supported in part by the NSERC
ISSNet Strategic Network, an NSERC Engage Grant, an
NSERC Discovery Grant, an MRI Early Researcher Award
and a grant from the Ontario Research Fund.
8. REFERENCES
[1] K. W. Y. Au, Y. F. Zhou, Z. Huang, P. Gill, and
D. Lie. Short paper: A look at smartphone permission
models. In Proceedings of the 1st ACM Workshop on
Security and Privacy in Smartphones and Mobile
Devices (SPSM), pages 63–68, Oct. 2011.
227[2] T. Ball, R. Majumdar, T. Millstein, and S. K.
Rajamani. Automatic predicate abstraction of C
programs. In Proceedings of the 2001 ACM Conference
on Programming Language Design and
Implementation (PLDI), pages 203–213, June 2001.
[3] D. Barrera, H. Kayacik, P. van Oorschot, and
A. Somayaji. A methodology for empirical analysis of
permission-based security models and its application
to Android. In Proceedings of the 17th ACM
Conference on Computer and Communications
Security (CCS), Oct. 2010.
[4] A. Bartel, J. Klein, M. Monperrus, and Y. Le Traon.
Automatically securing permission-based software by
reducing the attack surface: An application to
Android. Technical report, University of Luxembourg,
SNT, 2011. Tech Report.
[5] L. Batyuk, M. Herpich, S. Camtepe, K. Raddatz,
A. Schmidt, and S. Albayrak. Using static analysis for
automatic assessment and mitigation of unwanted and
malicious activities within Android applications. In
Proceedings of the 6th International Conference on
Malicious and Unwanted Software (MALWARE),
pages 66–72, Oct. 2011.
[6] A. Bose, X. Hu, K. G. Shin, and T. Park. Behavioral
detection of malware on mobile handsets. In
Proceedings of the 6th International Conference on
Mobile Systems, Applications and Services (MobiSys),
pages 225–238, June 2008.
[7] I. Burguera, U. Zurutuza, and S. Nadjm-Tehrani.
Crowdroid: Behavior-based malware detection system
for Android. In Proceedings of the 1st ACM Workshop
on Security and Privacy in Smartphones and Mobile
Devices (SPSM), pages 15–26, Oct. 2011.
[8] A. Chaudhuri. Language-based security on Android.
In Proceedings of the ACM Fourth Workshop on
Programming Languages and Analysis for Security
(PLAS), pages 1–7, 2009.
[9] J. C. Corbett, M. B. Dwyer, J. Hatcliﬀ, S. Laubach,
C. S. P˘as˘areanu, Robby, and H. Zheng. Bandera:
Extracting ﬁnite-state models from Java source code.
In Proceedings of the 22nd International Conference
on Software Engineering (ICSE), pages 439–448, June
2000.
[10] J. Dean, D. Grove, and C. Chambers. Optimization of
object-oriented programs using static class hierarchy
analysis. In Proceedings of the 9th European
Conference on Object-Oriented Programming
(ECOOP), pages 77–101, Aug. 1995.
[11] W. Enck, P. Gilbert, B.-G. Chun, L. P. Cox, J. Jung,
P. McDaniel, and A. N. Sheth. TaintDroid: An
information-ﬂow tracking system for realtime privacy
monitoring on smartphones. In Proceedings of the 9th
Symposium on Operating Systems Design and
Implementation (OSDI), pages 393–407, Oct. 2010.
[12] W. Enck, D. Octeau, P. McDaniel, and S. Chaudhuri.
A study of Android application security. In
Proceedings of the 20th USENIX Security Symposium,
pages 21–36, Aug. 2011.
[13] W. Enck, M. Ongtang, and P. McDaniel. On
lightweight mobile phone application certiﬁcation. In
Proceedings of the 16th ACM Conference on Computer
and Communications Security (CCS), pages 235–245,
Nov. 2009.
[14] A. P. Felt, E. Chin, S. Hanna, D. Song, and
D. Wagner. Android permissions demystiﬁed. In
Proceedings of the 18th ACM Conference on Computer
and Communications Security (CCS), pages 627–638,
Oct. 2011.
[15] A. P. Felt, K. Greenwood, and D. Wagner. The
eﬀectiveness of application permissions. In Proceedings
of the 2nd USENIX Conference on Web Application
Development, pages 7–18, June 2011.
[16] A. P. Felt, H. Wang, A. Moshchuk, S. Hanna, and
E. Chin. Permission re-delegation: Attacks and
defenses. In Proceedings of the 20th USENIX Security
Symposium, pages 22–37, Aug. 2011.
[17] T. A. Henzinger, R. Jhala, R. Majumdar, and
G. Sutre. Lazy abstraction. In Proceedings of the 29th
ACM Symposium on Principles of Programming
Languages (POPL), pages 58–70, Jan. 2002.
[18] P. Hornyack, S. Han, J. Jung, S. Schechter, and
D. Wetherall. “These aren’t the droids you’re looking
for”: Retroﬁtting Android to protect data from
imperious applications. In Proceedings of the 18th
ACM Conference on Computer and Communications
Security (CCS), pages 639–652, Oct. 2011.
[19] D. Lie, A. Chou, D. Engler, and D. Dill. A simple
method for extracting models from protocol code. In
Proceedings of the 28th International Symposium on
Computer Architecture (ISCA), pages 192–203, July
2001.
[20] R. Vall´ee-Rai, P. Co, E. Gagnon, L. Hendren, P. Lam,
and V. Sundaresan. Soot - a Java bytecode
optimization framework. In Proceedings of the 1999
conference of the Centre for Advanced Studies on
Collaborative research, CASCON ’99, page 13. IBM
Press, 1999.
[21] T. Vidas, N. Christin, and L. Cranor. Curbing
Android permission creep. In Proceedings of the Web
2.0 Security and Privacy 2011 workshop (W2SP
2011), Oakland, CA, May 2011.
228