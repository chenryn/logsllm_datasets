need other ones to be fully operational (stand alone machine
without network connections for running editors), most do
(e.g. a mail-server to let the user send and receive e-mail, a
DNS server to allow DNS name resolution or an HTTP server
for accessing web pages).
An entity is considered to be available for a dependent
one if (a) communication between both is possible and (b)
the entity providing the service is functional (i.e. the pro-
cess providing the service is running). Communication be-
tween two entities is possible if (i) there is a route provided
by the underlying network topology between both and (ii)
all hosts on the route permit the trafﬁc between them.
Figure 1 shows the dependencies between the two users
Anne and Customer, two HTTP servers and a DNS as well
as an NFS server. The entities are expressed as annotated
boxes while the dependency relationships are expressed as
arrows.
DNS
HTTP
HTTP
NFS
Customer
Anne
Figure 1. Resource Dependencies
Deﬁnition: The dependency between two entities might
be direct or indirect.
A direct dependency is a dependency that is given to the
model manually (via conﬁguration ﬁles - the grammar to
model direct dependencies as well as an example are given
in the Appendix). These are the dependencies of entities
on various services. An example would be a user that uses
the DNS service to resolve DNS names (e.g. user Anne in
Figure 1).
As described above, we consider the network topology
and the ﬁrewall rules as part of our network model. While
the network topology is the glue between the resources by
providing communication paths, the ﬁrewall rules can be
viewed as a method for imposing constraints on these paths
by (dis)allowing certain trafﬁc. The network topology and
the ﬁrewall rules introduce new artiﬁcial dependencies be-
tween entities and their needed resources. This is caused
by the fact that information exchange has to take place over
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
routers and must be allowed by all ﬁrewall rules that are in
effect on the communication path (i.e. host personal ﬁre-
walls, router ﬁrewalls). These artiﬁcial dependencies are
called indirect dependencies. Indirect dependencies are de-
termined automatically by analyzing the network topology
(which is encoded in routing tables) as well as ﬁrewall rules.
Indirect dependencies are identiﬁed and evaluated during
the phase in which the propagation of network trafﬁc is sim-
ulated. They can be seen as a precondition for fulﬁlling a
direct dependency. All the indirect dependencies that are
imposed by nodes being on the path between the depending
hosts have to be fulﬁlled to fulﬁll the direct dependency. If a
node creates an indirect dependency that is not fulﬁlled (e.g.
the packet is ﬁltered at this node), a direct dependency re-
lying on it can never be fulﬁlled too. Indirect dependencies
would be immediately introduced in the example shown in
Figure 1 if the DNS server is located in a different subnet
than Anne or if personal ﬁrewalls are installed on any of the
just mentioned hosts.
The example in Figure 2 shows a network that consists
of four subnets and the external Internet (in the top left cor-
ner). The direct dependencies are identical to those shown
in Figure 1. However, note the indirect dependencies be-
tween the gateways that connect the different subnets. In
this ﬁgure, routing information as well as ﬁrewall rules are
omitted for the sake of simplicity.
Customer
(x.x.x.x)
GW
(132.100.99.1)
GW
(132.100.98.1)
Subnet 132.100.99.0
HTTPD
(132.100.98.15)
DNS
(132.100.98.11)
Subnet 132.100.98.0
Dependency
Routing path
GW
(132.100.
101.1)
HTTPD
(132.100.101.4)
Subnet 132.100.101.0
Anne
(132.100.100.27)
GW
(132.100.100.1)
NFS
(132.100.100.4)
Subnet 132.100.100.0
Figure 2. Topology and Entity Dependencies
4. Impact Evaluation
A response action is a set of operations that can be uti-
lized to avert a certain threat. The basic operations, called
response items, are basic steps like installing or removing
ﬁrewall rules, killing and restarting processes or user ac-
count en-/disabling. Response actions are initiated by the
IRS in response to an intrusion which is detected by an
IDS. Because a number of different response actions might
achieve the desired result, it is the task of the IRS to choose
the one with the least impact. The determination of the im-
pact (or effect) of response actions is done with the help of
the current network model by an impact evaluation func-
tion. The set of response actions that have already been
applied (and which have lead to the current state of the net-
work) are called response conﬁguration.
A single response action can affect entities either directly
or indirectly. A direct effect is witnessed when a needed
service becomes unavailable (e.g. due to stopping of ser-
vices or disabling of user accounts). An indirect effect is
experienced when the direct effect on one entity reduces the
service that this entity can provide to another one, thereby
affecting entities that are unrelated at ﬁrst glance but which
are indirectly dependent.
If a response action hits an entity, it will not be able to
perform its task with the same quality or speed as before.
The degree of a dependency describes in how far the opera-
tion of an entity is affected if the resource, which it depends
on, is no longer available. The introduction of a degree of
dependency can be best motivated by the following exam-
ple. Consider a user that uses his machine mainly to surf the
Internet. In our network model, the entity (representing this
user) will depend a lot on the availability of the DNS server
and the HTTP server (dependencies with high degrees), but
not on the NFS server. On the other hand, a user editing ﬁles
on the remote NFS machine will mainly need this service to
accomplish his work (dependency with a high degree).
An entity will usually depend on several resources in
the network. These relationships do not necessarily have
to be trivial. For some entities, it is sufﬁcient to have access
to at least one of a set of (similar) services (called ‘OR-
dependency’) while others need access to all of them (called
‘AND-dependency’). Our model is capable of expressing
both types of relationship as well as combinations of them.
The following example describes a user with her depen-
dencies. User Anne requires access to the NFS server as
well as to the HTTP server. Additionally, she needs access
to one of the two domain name servers DNS1 and DNS2.
These relationships can be denoted in a dependency tree as
shown in Figure 3.
The capability c of an entity  is a value ranging from
0.0 to 1.0 and describes in how far a resource can perform its
work given the current response conﬁguration, compared to
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
AND
0.2
AND
0.3
HTTP Server
NFS Server
0.5
OR
1.0
1.0
DNS1
DNS2
Figure 3. Dependency tree
the situation where all needed resources are available. The
calculation of this value is based on the underlying network
model given its current state (with services that might have
already been disabled) and the entity’s dependency tree.
When the capability value is determined for an entity, the
communication paths to all the resources that it depends on
are examined. This allows the evaluation function to take
the current routing and packet ﬁlter (ﬁrewall) rules into ac-
count. When specifying a dependency tree for a certain en-
tity, one must make sure that the capability of the entity is
1.0 when all resources are available. The following para-
graphs explain how a capability value is determined for an
entity.
4.1. Capability Calculation
(cid:15) Entity does not depend on other entities: In this case
only the current condition of the entity determines its
capability.
– Entity provides service: In this case the capabil-
ity is set to 1.0.
– Entity does not provide service: The capability is
set to 0.0.
(cid:15) Entity depends on other entities: Here, a recursive
algorithm that performs a depth-ﬁrst search on the de-
pendency tree is utilized to determine its capability.
The types of the nodes of the dependency tree deter-
mine which formulas are used to aggregate the capa-
bility values obtained from the subtrees below. The
intermediate nodes of the graph can be either of the
type AND or OR, while the leafs represent entities.
f 	c ef  and f 	c ef  denotes the capability of
the left/right link of a node, multiplied with the depen-
dency degree. c describes the capability value that is
derived for the intermediate node. The items of the
following list denote the different node types.
– Entity In this case, the value c for the leaf node
is set to the current capability of this entity.
– OR c = axf 	c ef ; f 	cigh
– AND c = f 	c ef   f 	cigh
To make this evaluation process efﬁcient, no cyclic de-
pendencies may be present which makes it possible to de-
termine a ﬁxed evaluation order in which each entity has
to be evaluated only once. The order can simply be gener-
ated through expanding all dependency trees. During this
operation, all leaves in a dependency trees are substituted
with their dependency trees. No cyclic dependencies are
allowed, therefore the trees have a bounded size. The eval-
uation order is then determined by the trees themselves. The
elements at the bottom of the trees have to be evaluated ﬁrst,
and then the ones one level up in the tree can be evaluated.
The capability reduction c of a resource  is the
value 1   c.
The penalty cost for an entity is a value representing the
cost when this entity becomes unavailable. The penalty-cost
 of a resource can be calculated with the formula below.
 = c  ea y
(1)
where the penalty is a user-deﬁned constant that reﬂects
the importance of an entity.
As an example, consider the penalty for the web server
of an e-commerce site. Here, the penalty will be extremely
high as it is necessary to have a running web server to stay
in business. On the other hand, the penalty for the same
service (web service) of a normal company will be usually
lower. Downtimes are clearly acceptable in that case.
4.2. Cost Optimization
Consider the situation where a threat or an intrusion is
identiﬁed. There are often a variety of possibilities where
and how a response action can be deployed. Nevertheless,
the choice of the actual response item or response locations
can have tremendous impact on the usability of the whole
system.
Response actions that effect the system’s security in sim-
ilar ways (i.e. that counter a certain threat) are called alter-
natives. Ideally, a response system can determine a num-
ber of adequate response actions which all provide the same
level of security. In this case, the response action with the
least impact should be chosen. Assume a situation in which
a denial-of-service (DOS) attack against the HTTP server
132.100.101.4 in Figure 2 is detected. The response
system might then decide to prevent outside trafﬁc to this
machine either at the gateway to the Internet or at the gate-
way located on the same subnet as the HTTP server.
Usually, choosing the best alternative is a difﬁcult task.
But by determining the impact (i.e. penalty cost) of a re-
sponse action on all entities of the network (using our model
and evaluation function), the one with the lowest negative
effect can be selected.
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Minimizing the penalty cost of new response actions:
This can be easily done when the IRS determines and
presents appropriate response actions to our system. Each
response action is simply added temporary to the model, the
model is evaluated and the overall penalty cost (which is the
sum of all penalty costs) is determined. The response action
with the lowest penalty cost can then be chosen by the IRS,
as shown in Figure 4. Obviously, the actually launched re-
sponse actions have to be added permanently to the model
(more precisely, to the response conﬁguration) in order to
keep it up-to-date with the actual state.
Response-
Configuration
n
Response
Action
with minimal
cost is chosen
Alt. 1
N+1
Alt. 2
N+1
Alt. 3
N+1
Alt. 4
N+1
Response-
Configuration
n+1
Figure 4. Response Conﬁgurations
Minimizing the overall penalty cost: When the re-
sponse with the least impact is chosen in every step (the lo-
cal optimum), the overall response conﬁguration might not
be globally optimal (see the example from the Appendix).
Finding a globally optimal response conﬁguration is not
trivial and a number of previous actions might have to be
‘rolled’ back. All alternative combinations of response ac-
tions (stored in the history) have to be re-evaluated to ﬁnd
the scenario which has the least overall penalty cost.
5. Implementation
We implemented a prototype of the network model and
the evaluation function on Linux 2.4.18 using C. The parser
to process the grammar used to specify direct dependencies
(as shown in the Appendix) has been realized using flex
and bison. The routing tables from all relevant routers of
the network as well as the ﬁrewall rules are imported into
the model at startup time.
In addition, the paths from each entities to all entities that
it depends on are pre-calculated. These paths are stored as a
list of hosts where only the permissions (rules) of interme-
diate ﬁrewalls have to be checked. This is possible, because
we assume that routing tables remain unchanged during reg-
ular network operation. Also the order in which entities
have to be evaluated is pre-calculated using the method ex-
plained in Section 4.1.
After this initialization phase the prototype is then able
to process the requests of an external IRS component or re-
quests stored in ﬁles. We provide an API to the IRS compo-
nent to evaluate the effects of response actions and to mod-
ify and update the response conﬁgurations.
Usually, the model is re-evaluated completely (i.e.
the
capabilities for all entities are recalculated) when a new re-
sponse is examined. The evaluation of the model can be op-
timized, however, when only a simple ﬁrewall rule should
be added. In this case, only a small part of the whole model
is affected by the response action, and therefore only en-
tities which have dependencies that lead over the modiﬁed
ﬁrewall have to be evaluated. The rest of the model remains
untouched and needs no re-evaluation.
As mentioned before, we currently support the update of
ﬁrewall rules, the killing and restarting of processes and the
disabling/enabling of user proﬁles at hosts. These are the
most important long-term response actions and our network
model can be utilized to calculate their impact.
6. Evaluation
The presented model allows us to determine the effects
of ﬁrewall and process based intrusion responses. We pro-
posed an evaluation mechanism that utilizes external infor-
mation describing dependencies between resources in a net-
work as well as their importance to different users to obtain
an impact value for different response actions. In this sec-
tion the computational complexity of the evaluation is in-
vestigated.
6.1. Theoretical Considerations
In order to evaluate the efﬁciency of this model, we have
to investigate the different operations that are involved.
An optimized data structure is built during the initial-
ization phase. Each resource contains information about
the resources that it depends on their respective dependen-
cies. The ﬁxed evaluation order of the entities and the pre-