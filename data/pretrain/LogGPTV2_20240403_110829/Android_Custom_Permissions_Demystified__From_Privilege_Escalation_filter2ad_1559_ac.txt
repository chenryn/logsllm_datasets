### 6. Permission Granting and Seed App Generation

It is important to note that the permissions mentioned have not been granted to the seed app. The granting of dangerous system permissions requires user consent, while signature permissions cannot be granted to apps signed with different certificates than system apps.

#### Seed Generation and Test Case Construction
- **Single-App Mode**: In this mode, the test app must remain on the phone after the last operation. This ensures that the permission requests are still present.
- **OS Update Operation**: This operation can only be executed once per test. Our focus is on the latest version of the Android OS, so we only consider updating from the previous version to the current one.
- **Fuzzing Testing Scale**: We can control the scale of fuzzing by limiting the number of seed apps and the number of test cases derived from each seed app.

**Figure 3: Construct a test case (an execution sequence).**

### C. Test Case Execution
The operations that meet the requirements include:
- **App Installation**
- **App Uninstallation**
- **App Update**
- **OS Update**

These operations can trigger the system to refresh the granting status of existing permissions.

- **App Installation**: New custom permission definitions may be added to the system.
- **App Uninstallation**: Existing custom permission definitions may be removed.
- **App Update**: Existing custom permission definitions may be updated or removed.
- **OS Update**: New system permissions may be added, and existing system permissions may be removed.

**Note**: Since updating an app involves installing different versions multiple times, we do not need to explicitly indicate the app update operation in test cases.

#### Mutating Test App
- **App Installation Operation**: The test app to install is a mutated version of the previously installed test app, with the same package name and app signature.
- **Changes in Attributes**: It modifies some attributes (group and protection level) of the previously defined custom permission or removes the permission definition directly. For example, it changes the protection level from normal to dangerous and places the custom permission into the PHONE group. The permission name cannot be changed, as this would define a new permission.
- **Test App Definition**: The app defining the custom permission is treated as the test app because the permission requests remain unchanged throughout the operation sequence.

### Test Case Construction
CUPERFUZZER constructs a test case by randomly selecting a varying number of operations from {app installation, app uninstallation, OS update} to generate an execution sequence. In the dual-app mode, additional restrictions are set to ensure meaningful test cases:
- **First Operation**: Must be seed app installation, as the fuzzing execution environment (physical phone) is reset before each test.
- **App Uninstallation**: There must be a test app available for uninstallation; otherwise, the operation is meaningless.

### D. Effective Case Checking
For each completed test case, CUPERFUZZER checks whether it is an effective case that achieves privilege escalation. An effective case is determined by checking the granting status of the requested permissions in the test app (or the app requesting permissions in the dual-app mode). The following rules are set:
- **Rule 1**: The test app (or the app requesting permissions in the dual-app mode) has been granted a dangerous permission without user consent.
- **Rule 2**: The test app (or the app requesting permissions in the dual-app mode) has been granted a signature permission, but the test app and the app defining this permission are signed by different certificates.

**Note**: CUPERFUZZER does not grant any dangerous permission to the test app through simulating user interactions. Instead, it uses adb to obtain the permission granting list and extracts the granted permissions. If any dangerous or signature permission matches the above rules, the test case is considered effective and recorded for further analysis.

### A. Prototype Implementation
We implemented a full-featured prototype of CUPERFUZZER using approximately 653 lines of Python code. To fully automate the framework, we integrated several tools, including adb and fastboot for device control and OS updates, and Apktool and jarsigner for test app generation.

### E. Critical Path Extraction
After obtaining all effective test cases, CUPERFUZZER extracts the critical paths to assist in identifying the root causes. A critical path is defined as the least necessary operations to trigger a privilege escalation issue. The extraction process includes:
1. **Test Cases Classification**: Effective cases are classified based on their execution results.
2. **Find Critical Path**: In each category, the test cases with the least operations (candidate cases) are identified. By pruning and re-executing these cases, the critical path is determined.
3. **Delete Duplicate Cases**: Cases containing the extracted critical path are deleted to avoid redundancy.

### B. Experiment Setup
- **Hardware Setup**: A laptop (Windows 10, 4G RAM, Intel Core i5) was used as the controller, and four Google Pixel 2 phones were used for parallel test case execution.
- **Android OS**: Experiments focused on Android 10, with custom OS images built based on AOSP Android 9 and 10.
- **Test Case Optimization**: To manage the experiment scale and improve vulnerability discovery efficiency, we limited the number of operations in a test case and controlled the number of seed apps and their attributes.

### V. Implementation and Experiment Results
- **Test Case Execution**: CUPERFUZZER executed 40,195 test cases in 319.3 hours, discovering 2,384 effective cases that triggered privilege escalation issues.
- **Efficiency**: On average, CUPERFUZZER took 114.4 seconds to execute a test case, with 11.9% of cases failing initially due to errors like "status read failed" or "command write failed."
- **Results**: All discovered issues matched the first checking rule, indicating the acquisition of dangerous permissions without user consent.

**Table III: Average Execution Time of Operations**

| Operation Type          | Time Cost (seconds) |
|-------------------------|---------------------|
| Case Execution          | 1.1                 |
| Environment Reset       | 0.5                 |
| App Installation        | 109.8               |
| App Uninstallation      | 60.2                |
| OS Update               | 129.5               |
| Factory Reset           | -                   |
| OS Downgrade            | -                   |

This table lists the average time cost for each operation in an ideal situation, where every operation is executed successfully.