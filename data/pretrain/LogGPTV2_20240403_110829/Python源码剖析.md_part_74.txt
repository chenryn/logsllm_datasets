Py_INCREF(Op);
((clear
op->ob_type->tp_clean)l=NuLii){
alive, move
Python源码剖析
16.4Python中的垃圾收集
一深度探索动态语言核心技术
473
---
## Page 504
Python源码剖析
474
1ist4所引用的所有对象的引用计数，这个动作立即就影响到了1ist3，并使其引用计数
的引用计数，这将导致iist4的ob_refcnt为0，引发对象销毁动作，会调用1ist4的
在delete_garbage中，假如首先处理list3，调用其1istclear，那么会减少1ist4
被销毁，所以Python需要将这种对象放回reachable链表中。
成必要的动作，从而没有将自已从collectable链表摘除，这表示对象认为自已还不能
就是这里的collectable链表）。由于某些原因，对象可能在clear动作时，没有成功完
动作时，如果成功进行，则通常一个对象会把自已从垃圾收集机制维护的链表中摘除（也
送回到reachable链表（即delete_garbase函数的old参数）中，这是由于在进行clear
为一个例子，我们来看看PyListobject的clear操作。
container对象中每个引用所用的对象的引用计数值，从而完成打破循环的最终目标。作
static void list_dealloc(PyLlistobject
[listobjec.c]
list_dealloc.
staticintlist_elear(PyLlstobjectta)
[listobject.c]
首先会将1ist4从可收集对象链表中摘除，然后如同1ist_cleax所作的，会调整
我们来看看图16-18所示的unreachable链表中的1ist3和1ist4是如何被回收的。
我们注意到，在aelete_garbage中，有一些unreachable链表中的对象会被重新
第16章
inti：
return 0:
1f
int
PyMem_FRBE(op->ob_item):
while
DyMem_FRRE(item);
while
(item
lazTs qoob_itemli]):
Py_XDECREP(itemi）
Python的内存管理机制
（
>=0）
1
INULDS
0：
*opl
---
## Page 505
16.4.4
现的。了解了collect，就功德圆满了。
这些细节的综合，是时候来看一看Python中那个实际完成垃圾收集的collect是如何实
回收了。
变为0.同样，1st3的销毁动作也被触发了。如此一来，1ist3和1ist4就都被安全地
static.long collect(int generation)
[gcmodule.c]
到此，我们已经详细地剖析了Pyhon中垃圾收集机制的所有细节及隐秘之处，作为
垃圾收集全景
//将待处理链表中的unreachableobject转移到unreachable链表中
PyGC Head
PyGC_Head
RyGC_Head
PyGC_Head
longm
subtract_refs(young);
update_refe(young):
else
EoY
Long.五
在待处理链表上进行打破循环的模拟，寻找rootobject
将比当前处理的”代“更年轻的“代”的链表合并到当前“代”中
old=GEN_HEAD(generation+1）;
(generation
generations[i].count=
generatlons[generation+l].count
i证
Py_FataiError(gccouidntallocate"del_A**)
(delstr
unreachable;
ol6:
finalizers;
*youmg;
=Pystring
#objeat6collected*/
NUM GENERATIONS-1)
generation;
NULLY
LInteznFromstring(del__"）:
objects witn,
0:
1+
1++）
Python源码剖析
=1：
16.4Python中的垃圾收集
reachable from,
unreachable trash
一深度探索动态语言核心技术
del
---
## Page 506
476
Python源码剖析
控的对象。比如我们来看看ryFunction对象的正常销毁。
象并非只有垃圾收集机制才能回收，正常的引用计数就能销毁一个被纳入垃圾收集机制监
GCNew，将创建的对象纳入垃圾收集机制的监控中。但是有趣的是，被垃圾收集监控的对
计的，虽然儿乎大多数对象在创建时都会通过Pyobjecr_Gc_New，并最终调用_Pyobject
自己参考Python源码。
最终将被放入garbage链表中。对于弱引用的处理，这里就不深入了，有兴趣的读者可以
这些操作就隐身在handle_weakrefs中。而带有_del_的实例对象是不能自动被清除的
是有本质的不同，weakref能够被正确地清理掉，虽然必须引入一些额外的繁琐的操作，
能够注册callback操作，所以这个行为有点类似带有_ael_的实例对象。但是它们还
[gcmodule.c]
static void func_dealloc（PyFunctionobject *op)
[funcobject.c]
第16章Python的内存管理机制
到了这里，我们需要指出一点，Python的垃圾收集机制完全是为了处理循环引用而设
我们注意到在collect函数中，还有对Python中弱引l用（weakref）的处理，因为weakref
7/同时将finalizers链表中所有对象加入ol4链表中
/将含有
delete_garbage（&unreachable,old):
handle_weakrefs(&unreachable,
//处理弱引用（weakref）
move_finalizers(&unreachable,
1/对于unreachable健表中的对象，如果其带有
1/如果可能，
move_unreachable(young, &unreachable);
1/处理完成后；当前代中只剩下reachableobject了
//对urtreachable链表上的对象进行垃圾回收操作
PyObJecE_GC_UNTRACK（op）;
(void)handle_finalizers(&finalizers,old)
(young
一深度探索动态语言核心技术
init(&finaifzers):
1=old）
将当前=代中的teachableobject合并到更老的w代中
如果可能，
&finalizers);
olay:
调用弱引用中注册的calIback操作
del
函数，
则不能安全回收
---
## Page 507
16.4.5
介绍，关于gc模块的使用，请参考Python文档。
通过gc模块进行一些观察，以加深对垃圾收集机制的理解。本节不对gc模块的使用进行
256个字节，同样可以使用内存池。所以我们可以将垃圾收集和内存管理完全融为一体了。
本书中我们剖析过的最大的对象就是PyTypeObject，而这个对象也不过200个字节，小于
Mal1oc作为真正申请内存的接口的，这意味着在大多数情况下，Pyhon都在使用内存池。
序使用的对象是不能被回收的，所以垃圾回收能且只能处理循环引用中的对象。
计数不为0的对象只有两种情况：一是被程序使用的对象；二是循环引用中的对象。被程
的对象都是引用计数不为0的，因为如果为0，早就被引用计数机制“干掉”了。而引用
用。事实上，对循环引用之外的对象，垃圾收集是无能为力的。因为挂在垃圾收集机制上
计数机制在维护这些对象，只有对引用计数无能为力的循环引用，垃圾收集机制才会起作
主要是为了将指向ryObject的指针调整为指向PyGC_Head的指针，以释放正确的内存。
的链表中摘除，然后调用ryobject_GC_De1释放内存，之所以需要调用pyobject_Ge_Del，
会调用func_dealloc。我们看到，PyFunctionobject对象主动将自己从垃圾收集监控
ge.set_debug(gc,DEBUG_STATSgc,DEBUG_LEAR)
class B(object):
[gcl.py]
class A(object):
Dbaxodu
B（）
Python中的gc模块
另一点需要说明的是，Pyobject_GC_New底层是以我们之前剖析的Pyobject
所以，虽然有很多对象挂在垃圾收集机制监控的链表上，但实际上更多时候，是引用
Python中通过gc模块为程序员提供了观察和手动使用gc机制的接口，这一节，我们
如果PyFunctionobject对象因为正常的引用计数维护到达引用计数为O的状态，就
ssed
pass
PyObject_FREE(g):
PyGcHead g=ASGC（op);
generations[o].count--;
//最终调用PyObjectFree
Python源码剖析
16.4Python中的垃圾收集
深度探索动态语言核心技术
477
---
## Page 508
Python源码剖析
478
圾收集则能正确回收内存。
[gc3.py]
运行结果：
gc.collect()
gc.set_debug(gc.DEBUG_STATS I ge.DEBUG_LEAK)
class A(object):
到任何作用
importgc
gc:
:06
b.a
[gc2.py]
ge:colleeting generation 2.
gc.collect()
9C:
qc:
Tap
aer
a.b
import
gc:
结果：
川
C:
正如gc2.py的运行结果显示的，当存在循环引用时，引用计数确实不起作用了，而垃
pass
通过gc1.py的演示，证明了对于引用计数机制能正常维护的对象，垃圾收集确实起不
第16章Python的内存管理机制
B（）
collecting generation 2.
done,
1201346676.5930s
collectable 
1201346676.59305
0.0160s elapsed
collectable
objects
coLI
done.
objeets in
COII
done
gc
lectable
深度探索动态语言核心技术
4unreachable,
in
cach generation:345 2692
each generation:
elapsed.
0uncollectable.
003027
0
0
---
## Page 509
16.4.6
了整个运行时，这对于Pyhon的响应性能是非常有好处的。又比如，当前的研究表明
倘若它没有优点，早就被扫进历史的垃圾堆了。比如，引用计数将垃圾收集的开销分摊在
的年代了，这点花销，我想，我们还是支付得起的。而另一方面，引用计数也有其优点，
需要花费额外的内存维护引用计数值的毛病，但现在已经是2008年了，已经不是64KB
除垃圾收集技术的使用都极大地完善了Py山on的内存管理机制。尽管引用计数还存在着
方案，但是Pyhon采用了多种方式来弥补引用计数的不足，内存池的大量使用，标记-清
泄漏么？所以，没什么事，千万不要轻易启用_de1_操作。
收），就连a对象内维护的_aict_也不能回收。真的是非常严重的后果，这不就是内存
是对象a本身（需要注意，显示结果中的A不是说A不能回收，而是类型为A的a不能回
gc:
gc:
运行结果：
gc.collect()
del
gc.set_debug (gc.DEBUG_STATS I gc,DEBUG _LEAR)
classB(objeot):
class A(object):
C:
尽管Pyhon采用了最经典的（换句话说，最土的）引用计数来作为自动内存管理的
由于我们执意在类对象中添加了
总结
done.
done,
A()
def
def
umcollectable
B(）
pass
DaBs
del__(self):
del_(self):
4
unreachable,
each
SA
caict
generat
00B46990>
00B481E0>
uncollectable
on:35326920
de1_操作，所以GC很生气，后果很严重。不管
Python源码剖析
16.4Python中的垃圾收集
一深度探索动态语言核心技术
479
---
## Page 510
Python源码剖析
480第16章Python的内存管理机制
浏览工具，在本章的基础上继续深入。
Python内存管理机制的所有细微之处，如果你不满足于本章的剖析，那么请打开你的代码
心的话题了。
在分布式环境下，引用计数是目前最有效的垃圾收集技术。当然，这已经不是我们需要关
内存管理和垃圾收集，是一门非常精细和繁琐的技术，本章进行的剖析无法覆盖
一深度探索动态语言核心技术
---
## Page 511
出版社= 电子工业出版社
作者=陈儒著
9
---