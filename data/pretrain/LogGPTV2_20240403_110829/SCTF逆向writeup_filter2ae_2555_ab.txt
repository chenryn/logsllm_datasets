    sctf/secret/SCTF
其中Ld/a/c;就是那个无法反编译的类，而sctf/secret/SCTF是调用native函数的类，另外两个字符串暂时用途未知。
另外initproc中还解密了5个不可打印字符串，看起来与正常dex文件中的Dalvik字节码很像，直觉猜测与那5个被nop的函数有关系。
这里我们使用010editor的dex模板打开apk中的dex文件，定位到这5个函数的位置，发现其中代码的长度刚好与这5个字符串刚好一一对应。
于是我们根据长度，将解密后的字节码恢复回去，就可以正常反编译了。  
可以看到加密过程就是xxtea+base64，但是我们用SCTF中的密钥和密文解出来是fake
flag，在联想到之前那两个用途未知的字符串，猜测是替换了密文和密钥，尝试一下果然解出正确的flag：
    import xxtea
    from Crypto.Cipher import AES
    key = 'syclover'+'x00'*8
    s = 'UYc0pLw6EdGoEIH3mCpj/kkzRMR5+nl+9VGFICIIL6w='.decode('base64')
    dec = xxtea.decrypt(s, key,padding=False)
    print repr(dec)
## Orz
程序的主要逻辑是做了两段加密。  
第一段加密，首先根据flag中三个byte的和做种子，来生成一些随机数。之后，这些随机数与输入一起做一些数字运算：  
sum0 = flag[0] ^ rand[0]  
sum1 = flag[0] ^ rand[1] + flag[1] ^ rand[0]  
sum2 = flag[0] ^ rand[2] + flag[1] ^ rand[1] + flag[2] ^ rand[0]  
…  
这个过程在随机数固定的前提下是可以逐位推回去的，由于三个可打印字符的和只有几百种可能性，因此可以直接爆破。  
第二段是lfsr+des，其中des可以根据常量表识别，调试可以发现是标准des，lfsr跟signin类似，也很好逆回去。加密过程中有许多细节还是需要通过动态调试确认。  
最后两段逻辑连起来，爆破出一个可打印字符串即为flag：
    from libnum import *
    dest = [0]*64
    dest[0] = 0x4ECECA3B;
    dest[1] = 0x1DE25ED2;
    dest[2] = 0xDA7EBA7A;
    dest[3] = 0x44F2041D;
    dest[4] = 0x71270A83;
    dest[5] = 0x715B81E2;
    dest[6] = 0xCC2D1A85;
    dest[7] = 0x6B97F8E2;
    dest[8] = 0x4596FD5E;
    dest[9] = 0xC9405183;
    dest[10] = 0x67849B79;
    dest[11] = 0xEF406872;
    dest[12] = 0xDB7BE64E;
    dest[13] = 0x77CA5D7F;
    dest[14] = 0x6070B274;
    dest[15] = 0xC2D41ACA;
    dest[16] = 0x29662171;
    dest[17] = 0x3A3AA2EB;
    dest[18] = 0x54295545;
    dest[19] = 0x51A2A886;
    dest[20] = 0xB8591BC3;
    dest[21] = 0xE6483C3B;
    dest[22] = 0x8CFFBA61;
    dest[23] = 0x53D9BFBD;
    dest[24] = 0x5DACAA24;
    dest[25] = 0x44052042;
    dest[26] = 0x6F8736A6;
    dest[27] = 0x4AD433FC;
    dest[28] = 0x4DA7890F;
    dest[29] = 0x1186C3C6;
    dest[30] = 0x6BDC52CA;
    dest[31] = 0x92FE845E;
    dest[32] = 0xC7BBCDC0;
    dest[33] = 0xDE6CAAF1;
    dest[34] = 0x53A24F48;
    dest[35] = 0x78834993;
    dest[36] = 0x488B8BDA;
    dest[37] = 0xEEA0C8A;
    dest[38] = 0x1CC9883A;
    dest[39] = 0xCDD1C18E;
    dest[40] = 0xEE39C8CC;
    dest[41] = 0xBA7C009;
    dest[42] = 0x226A5717;
    dest[43] = 0x5DC4DC65;
    dest[44] = 0xEDE6EE3E;
    dest[45] = 0x98620CDC;
    dest[46] = 0xEDE770F4;
    dest[47] = 0xD228163E;
    dest[48] = 0x354BE5A8;
    dest[49] = 0x7ECFB5E9;
    dest[50] = 0x4D0D6FEA;
    dest[51] = 0xE4C117B9;
    dest[52] = 0x414C97B1;
    dest[53] = 0x2F630D6;
    dest[54] = 0xA9AB28BC;
    dest[55] = 0x7A42D719;
    dest[56] = 0x5436A531;
    dest[57] = 0x5AFEBE42;
    dest[58] = 0xB0E3691A;
    dest[59] = 0x3E1B42F0;
    dest[60] = 0xCA9380FC;
    dest[61] = 0x44BEA9CC;
    dest[62] = 0xF32B3091;
    dest[63] = 0x57A91678;
    def delfsr(n):
        ret = []
        odds = []
        x = n
        for i in range(64):
            x &= 0xffffffffffffffff
            ret.append(x)
            if x & 1 != 0:
                x ^= 0x3FD99AEBAD576BA5
                x = x/2 | 0x8000000000000000
                odds.append(1)
            else:
                x = x/2
                odds.append(0)
        ret.append(x & 0xffffffffffffffff)
        return ret, odds
    from pyDes import des
    xor_buf = [0x73,0x79,0x63,0x6c,0x6f,0x76,0x65,0x72]
    dest_enc = []
    for i in range(0, 64, 4):
        x = (dest[i+1] >32)
        dest_enc.append(r2&0xffffffff)
        dest_enc.append(r2>>32)
    for aa in range(95, 350):
        enc_lst = []
        seed = ((53*(aa))^0xffffffff)&0xfff
        for _ in range(32):
            seed = (0x1ED0675 * seed + 0x6C1)%254
            enc_lst.append(seed)
        flag=[]
        for i in range(32):
            tot = dest_enc[i]
            for j in range(i):
                tot -= flag[j]^enc_lst[i-j]
            flag.append(tot^enc_lst[0])
        if all (x in range(32,128) for x in flag):
            flag = ''.join(map(chr, flag))
            print flag
## easyre
通过查找字符串引用可以找到check函数sub_40B600，里面逻辑比较复杂，但是通过对输入下硬件断点，可以跟到几处对flag的加密，有aes加密和一些位运算操作，然后最后与一串常量作比较。  
如果跟着这段逻辑解完，最后会拿到一个fake flag。  
假如我们逆向比较仔细，应该能够发现一个很长很可疑的字符串。在运行时，程序会通过自校验crc值对其进行异或解密。尝试解密，可以发现是一个dll，而且其中有一个enc函数跟check函数长得非常像。  
通过查找引用还能找到一个函数sub_409FF0，里面跟check函数打印出了一样的字符串，但是这些字符串也同样被异或加密了，非常可疑。  
于是我们解出dll，发现enc函数的逻辑与check函数非常像，但运算顺序和加密方式都有不同，比如aes
key假逻辑是做了padding，而真逻辑是做了hex编码、异或密钥不同、和颠倒了三段位运算的顺序。  
于是对应修改一下脚本，即可得到真正的flag：
    from Crypto.Cipher import AES
    dest = [0]*32
    dest[0] = 0x8E
    dest[1] = 0x38;
    dest[2] = 0x51;
    dest[3] = 0x73;
    dest[4] = 0xA6
    dest[5] = 0x99
    dest[6] = 0x2A;
    dest[7] = 0xF0
    dest[8] = 0xDA
    dest[9] = 0xD5
    dest[10] = 0x6A;
    dest[11] = 0x91
    dest[12] = 0xE9
    dest[13] = 0x4E;
    dest[14] = 0x98
    dest[15] = 0xCE
    dest[16] = 0x2A;
    dest[17] = 0xB7
    dest[18] = 0x3D;
    dest[19] = 0x40;
    dest[20] = 0xF1
    dest[21] = 0xE5
    dest[22] = 0x1D;
    dest[23] = 0xAB
    dest[24] = 0xEF
    dest[25] = 0xEE
    dest[26] = 0xB0
    dest[27] = 0xD6
    dest[28] = 0x14;
    dest[29] = 0xB;
    dest[30] = 0x2A;
    dest[31] = 0x95
    aa3=[]
    def ror(x, n):
        return ((x>>n)|(x>1) | ((x>2) | ((x>1) | ((x>2) | ((x<<2)&0xcc))&0xff
        return n^0xbe
    j = 0x55
    aa3 = [0] * 32
    for i in range(32):
        aa3[i] = dest[i]
    for i in range(32):
        aa3[i] = aa3[i] ^ j
    for i in range(7,14):
        aa3[i] = dec_ef(aa3[i])
    for i in range(14,21):
        aa3[i] = dec_be(aa3[i])
    for i in range(21,28):
        aa3[i] = dec_ad(aa3[i])
    enc = ''.join(map(chr,aa3))
    c = AES.new('SCTF2020'.encode('hex'))
    ss = c.decrypt(enc)
    print ss