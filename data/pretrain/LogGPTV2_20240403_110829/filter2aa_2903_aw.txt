_MoveToCoprocessor（val, CP15_TPIDRURO）;
2.9.6 虚拟内存管理
ARM架构提供了灵活多样的虚拟内存管理机制，本节将通过实例
简要介绍ARMv7-A定义的虚拟内存系统架构（VMSA），简称
VMSAv7。
VMSAv7定义了两种表格式：经典的短描述符格式；类似x86 PAE
的长描述符格式，称为LPAE（Large Physical Address Extension）。我
们把前者简称为短格式，把后者简称为LPAE格式。
短描述符格式具有如下特征。
最多两级页表，分别称为一级页表（first-level table）和二级页表
（second-level table）。
每个表项32字节，称为描述符（descriptor）。
输入地址32位，输出地址最多为40位。
支持多种粒度的内存块，包括4KB（称为小页）、64KB（称为大
页）、1MB（称为section）和16MB（称为super section）。
图2-19所示的是使用短格式时的页表结构，该图根据ARMv7手册的
图B3-3重绘。
图2-19中的TTBR是Translation Table Base Register的简称，其作用
是记录顶级页表的物理地址，相当于x86的CR3寄存器。进一步来讲，
TTBR位于包含MMU的CP15协处理器中。CP15定义了两个TTBR寄存
器，分别称为TTBR0和TTBR1。定义两个TTBR寄存器的目的是让每个
进程可以有两套页表，比如ARM手册建议TTBR1指向内核空间使用的
页表，TTBR0指向用户空间使用的页表。
图2-19 ARM架构的短格式分页
CP15中另一个名为TTBCR（Translation Table Base Control
Register）的寄存器的低3位用于指定N值，按如下规则决定使用TTBR0
和TTBR1。
如果N等于0，那么总是使用TTBR0，实际上禁止了第二套页表。
如果N > 0，那么使用输入虚拟地址的最高N位来做选择，如果N位
都是0，那么使用TTBR0，否则使用TTBR1。
一级页表中每个描述符的最低两位用来指示该描述符的类型，00代
表无效，01代表它描述的是二级页表，10或者11都表示它直接指向的一
个section或者super section。图2-20所示的是前两种类型时的位定义，后
两种格式从略。
图2-20 短格式分页的一级页表描述符（部分）
图2-20中的PXN是Privileged execute-never bit的缩写，为1时代表即
使是高特权的代码也不可以执行该项所指页表描述的所有内存页。
图2-21所示的是短格式分页的二级页表描述符格式，其中的
B（Bufferable）、C（Cacheable）和TEX（Type extension）都是用来描
述内存区域属性的。S（Shareable）位指示该页是否可共享，nG（not
global）位用来指示该页是否为全局页（主要供页表缓存逻辑使用），
AP[2]和AP[1:0]用来描述访问权限（Access Permissions）。
图2-21 短格式分页的二级页表描述符
下面通过一个实验来帮助读者理解前面的内容，并演示地址翻译的
详细过程。我们将观察一个来自32位Windows 10 ARM（Windows on
Arm，WoA）系统的完整转储文件。
随便选取一个svchost进程，从它的进程结构体中可以读出该进程使
用的页目录信息：
3: kd> dt _KPROCESS 94968080
   +0x01c PageDirectory    : 0x7f37006a Void
根据作者的调查，这个WoA系统使用的是短格式分页，而且没有使
用TTBR1，即TTBCR.N为0。因此，上面PageDirectory字段的值
0x7f37006a就是TTBR0寄存器的内容，其中低14位是属性信息，高18位
是一级页表物理地址的高18位。图2-22显示了该配置下把一个线性地址
翻译到物理地址的过程。
图2-22 短格式分页的地址翻译过程（WoA）
首先，与x86的经典分页模式类似，也是把虚拟地址分成3个部分，
高20位是表索引，低12位为页内偏移。不过，高20位不再是等分，而是
分成12位和8位两个部分。
继续前面的实验，在svchost进程中选取一个包含字符串的用户态地
址，观察其内容为：
0: kd> db 75e11bbc  
75e11bbc  75 63 72 74 62 61 73 65-2e 70 64 62 00 00 00 00  ucrtbase.pdb....
然后计算和观察该地址在一级页表中对应的描述符：
0: kd> !dd 0x7f370000+75e*4 L1
#7f371d78 1d536805
上述命令中，75e为线性地址的高12位，即一级页表索引，每个描
述符的长度是4个字节，所以乘以4得到描述符的偏移。命令中的L1指
示!dd命令只显示一个元素（长度为1个单位）。将描述符转换为二进
制：
Binary:  00011101 01010011 01101000 00000101
最低两位为01，所以它描述的是二级页表，结合图2-20可以知道其
他各位的含义。位2的1代表不可执行。位10～31为二级页表的起始物理
地址，即把低10位换为0：
0: kd> ? 0y00011101010100110110100000000000
Evaluate expression: 492005376 = 1d536800
上面的结果0x1d536800就是二级页表的基地址（物理地址），取线
性地址的中间8位作为二级页表的索引，便可以计算出线性地址在二级
页表中的描述符地址，即：
3: kd> !dd 1d536800+11*4 L1
#1d536844 11873a22
其中，低12位为页属性，转换为二进制后可以参考图2-21知道每一
位的含义：
1010 00100010
最低两位的10代表该页有效，在物理内存中，位11的1代表不是全
局页（not Global）。位9和位5、4共同描述页的访问属性，即110，查
看ARM手册的表B3-8，可以知道其含义为只读（read only）。
将上面的二级描述符的低12位换为线性地址的低12位即得到完整的
物理地址，观察其内容：
0: kd> !db 11873bbc
#11873bbc 75 63 72 74 62 61 73 65-2e 70 64 62 00 00 00 00 ucrtbase.pdb....
与前面观察线性地址得到结果一样，说明我们手工翻译成功了。
顺便说一下，也可以使用WinDBG的!pte命令来自动翻译：
0: kd> !pte 75e11bbc  
                 VA 75e11bbc
PDE at C030075C         PTE at C01D7844
contains 1D536893       contains 11873A22
pfn 1d536 --D-W-KA-V-  pfn 11873 ----R-U—VE
得到物理页编号（PFN）为11873，加上页内偏移即完整的物理地
址，与上面的结果是一致的。但值得注意的是，一级描述符的内容却不
一样，我们手工翻译观察到的是1d536805，而!pte命令给出的是
1D536893。这起初让作者很困惑，经过一番探索作者发现，WoA还维
护着一套经典x86格式的页表，!process命令显示出的进程页目录基地址
（DirBase）即是那套页表的起始物理地址：
PROCESS 94968080  SessionId: 0  Cid: 07d0    Peb: 004d0000  ParentCid: 01e
4
   DirBase: 1d467000
观察_KPROCESS时也可以看到这个信息，记录在
DirectoryTableBase字段中：
+0x018 DirectoryTableBase : 0x1d467000
 老雷评点  
此x86兼容格式页表或许与x86模拟器（让x86应用程序可以
运行在WoA上）有关。
2.9.7 伪段支持
ARM架构没有x86那样的段机制（见2.6节），但是像Windows和
Linux这样的操作系统都还是需要段机制的，主要是用来保存少量的当
前线程（用户态）和处理器（内核态）信息，比如在32位Windows系统
中，当CPU在内核空间执行时，FS段中保存的当前CPU的处理器控制块
（PRCB），当CPU在用户空间执行时，FS段中保存的是线程环境块
（TEB）。为了支持操作系统的这一需求，ARMv7引入了3个线程ID寄
存器（见表2-7），可以让操作系统记录下一块内存区的基地址，弥补
缺少段设施的不足，但是并不支持段边界、段属性等功能，因此，本书
将其称为伪段支持。
表2-7 ARMv7引入的伪段支持
名  称
CRn opc1 CRm opc2
宽
度
类型
描  述
TPIDRPRW
C13
0
C0
4
32-
bit
RW
仅供PL1权限访问的线程ID寄
存器
TPIDRURO
C13
0
C0
3
32-
bit
RW,PL0 在用户模式只读的线程ID寄
存器
TPIDRURW C13
0
C0
2
32-
bit
RW,PL0 在用户模式可以读写的线程
ID寄存器
根据作者的调查分析，Windows是按照如下方式使用表2-7中的寄存
器的。
使用TPIDRURO保存当前线程的KTHREAD地址。KTHREAD是每
个线程在内核空间中的核心数据结构。
使用TPIDRURW保存当前线程的TEB地址。TEB是每个线程在用户
空间中的核心数据结构。
使用TPIDRPRW保存当前CPU的KPCR地址。KPCR（Kernel
Processor Control Region）是每个CPU的核心数据结构地址。
在Windows 10 DDK的头文件中可以找到下面几个宏，它们是用来
简化访问以上3个寄存器内容的：
MACRO
CURTHREAD_READ $Reg
CP_READ $Reg, CP15_TPIDRURO ; read from user r/o coprocessor register
bic     $Reg, #CP15_THREAD_RESERVED_MASK ; clear reserved thread bits
MEND
MACRO
TEB_READ $Reg
CP_READ $Reg, CP15_TPIDRURW       
MEND
MACRO
PCR_READ $Reg
CP_READ $Reg, CP15_TPIDRPRW   ; read from svc r/w coprocessor register
bfc     $Reg, #0, #12          ; clear reserved PCR bits
MEND
观察GetLastError的反汇编代码：
KERNELBASE!GetLastError:
76c3dcb4 e92d4800 push        {r11,lr}
76c3dcb8 46eb     mov         r11,sp
76c3dcba ee1d3f50 mrc         p15,#0,r3,c13,c0,#2
76c3dcbe 6b58     ldr         r0,[r3,#0x34]
76c3dcc0 e8bd8800 pop         {r11,pc}
上述代码中的第3条指令就是在访问CP15_TPIDRURW寄存器，其
下的ldr指令把TEB结构体中偏移0x34位置的LastErrorValue字段加载到
R0寄存器（用作返回值），然后把第1条指令压入栈的LR寄存器（保存
有返回地址）弹出到程序指针寄存器PC，就返回父函数了。
2.9.8 64位ARM架构
2011年10月，ARM对外宣布ARMv8架构的技术细节，特别强调的
最重要改进就是引入64位处理技术。与把32位的x86架构扩展到64位的
X64技术类似，ARMv8定义了两种执行状态，即64位AArch64和兼容原
来32位的AArch32。下面简要介绍AArch64的关键特征。
首先寄存器方面的改变，AArch64把寄存器划分为系统寄存器和应
用程序寄存器。应用程序寄存器如下。