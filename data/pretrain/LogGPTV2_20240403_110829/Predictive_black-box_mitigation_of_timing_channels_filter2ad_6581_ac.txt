+
2
4. ADAPTIVE MITIGATION RESULTS
Some simple experiments with predictive mitigation help us un-
derstand how the mitigator can converge on the right separation
between slots.
4.1 Convergence
Buffering source events helps prevent slowing down the event
source and absorbs temporary variations in event rate. However, it
is undesirable for the buffer to grow too large, because it increases
latency. If the buffer ﬁlls, the event source must be paused to al-
low the buffer to drain. We would like to avoid signiﬁcantly paus-
ing well-behaved applications, because pauses could disrupt their
functionality.
In this part, we focus on a simpliﬁed event source, and propose
one way to add adaptive transitions to the basic mitigation mech-
anism of Section 2.3. This particular design typically allows the
quantum converge to the event rate, while still keeping the infor-
mation leakage lower than the desired bound. Empirical results
demonstrate the convergence of the mitigator in face of many dif-
ferent event rates. Although currently our solution is restricted to
certain input event patterns, the experiment suggests that adaptive,
epoch-based mitigation may be practical for different applications.
Suppose we use the simple mitigation mechanism with constant-
quantum positive predictions for every epoch. Consider an event
source that generates events at a constant rate, say 1 event per
every 8 seconds; call the interval between events the event inter-
val. When the quantum of the mitigation system is higher than the
event interval—say, 10 seconds—the mitigator begins accumulat-
ing events in its buffer queue. Eventually, an increase in the buffer
size may reduce both the latency and throughput of the mitigator.
On the other hand, if the quantum is smaller than the event rate—
say, 6 seconds—then the buffer quickly drains, causing unwanted
epoch transitions.
Therefore, designing an adaptive mitigation scheme that can con-
verge roughly to the event interval of the source system is important
for practical applications.
4.2 Assumptions
We now show that adaptive mitigation can work for relatively
well-behaved event source. To capture the behavior of an event
source that generates events at some average rate but with local
variation around that rate, we work with an event source that gen-
erates one event at a random point during each ﬁxed interval. It is
easy to see the optimal prediction for an event source of this type
is the one whose constant quantum matches the average interval
between events.
The basic intuition behind the construction of the adaptive mit-
igation mechanism is that the size of the buffer indicates how the
quantum should be adjusted. A quantum that is too large causes the
buffer to grow large; a quantum that is too small causes the buffer
to empty. Both of these conditions can be taken into account by the
mitigator.
4.3 An adaptive mitigation heuristic
Following the idea of adaptive mitigation from Section 3.4, we
heuristically extend the basic mitigator of Section 2 to adjust future
schedules based the buffer size. There is no reason to believe that
the particular mechanism is optimal; we describe this mechanism
as a way of illustrating what is possible with adaptive mitigation.
In this mitigator, an adaptive epoch transition happens when both
of the following conditions hold:
1. the size of the buffer queue is increasing, and
2. the mitigator would meet the leakage bound even if it transi-
tioned into a new epoch.
Note that condition (1) here is speciﬁc to the design of the cur-
rent mitigator, while condition (2) is a necessary condition for all
adaptive transitions, as described in Section 3.4.
The adaptive mitigation heuristic works as follows. It doubles
the quantum on each miss transition, which lets the quantum quickly
approach the event interval. Next, the mitigator adjusts the quan-
tum closer to the event interval by raising or lowering the quantum
deterministically at every adaptive transition. The current quantum
ideally ﬂuctuates around the desired quantum and ﬁnally converges
to it. We constrain the mitigator to have a deterministic reduction
rate, enabling a deterministic (and small) bound on possible sched-
ule functions.
This scheme uses reduction rates that regulate how quantum size
is adapted. We denote reduction rates by rj, where j ranges from
1 to 9, such that r1 = 0.95, r2 = 0.9, . . . , r9 = 0.55. Note
that the number of reduction rates and the corresponding values
for this experiment have been derived empirically, based on the
experimental results, reported in Section 4.4.
The mitigator has an internal state, which is a pair (q, j). Here
q is current quantum and j is the current reduction rate. Call the
condition that guards when an adaptive transition may be done an
adaptive condition; the next state (q(cid:48), j(cid:48)) is computed at a transition
point and is derived as follows:
(cid:48)
(q
, j
(cid:48)
) =
(q/2rj, next j)
(2q · rj, next j)
if adaptive condition holds
if miss occurs
where function next speciﬁes the choice of the next reduction rate
(cid:40)
(cid:40)
next j =
j + 1 when j < 9
when j = 9
5
302Figure 3: Adaptive mitigation with average interval of 18 sec.
Figure 4: Convergence with different event intervals
Using the new state, the schedule for the next epoch is computed
as SN (i) = [τ + i · q(cid:48)]+.
According to our discussion in Section 3.4, since the multiplier
rates are deterministic, and there are only two possible transitions
(speed up or slow down), we have λmax = 1. If we set the total
information leakage B(T ) to be log2(T + 1), the number of tran-
sitions must be no more than (log2(T + 1))/(log (T + 1) + 1) as
derived from the leakage bound criterion in Section 3.4. Adaptive
transitions are not allowed if this constraint is not met.
4.4 Empirical results
Figure 3 illustrates how the quantum converges to the event in-
terval through the adaptive mitigation mechanism when the event
interval is 18 seconds. In this ﬁgure, the quantum is indicated by
the dashed line and the buffer size is represented by the solid line.
Initially the mitigator doubles the quantum quickly to 32, and then
lowers the quantum because the queue size has grown, around the
350-second point. Then, the queue slowly drains because the quan-
tum is smaller than the event interval. When the queue empties
around 2000 seconds, the quantum is raised again. After several
adjustments, the quantum ﬁnally converges to 18 at around 5000
seconds and stays constant thereafter. Once converged, the queue
size remains small (around 2–3), ensuring low latency.
While perfect convergence is not required for this scheme to be
useful, we tested the convergence with event intervals ranging from
1 second to 100 seconds, with the results shown in Figure 4. Each
dot represents the ﬁnal quantum arrived at by the mitigation system
after different total run times. Three curves are shown, one for the
ﬁnal quantum after 10000 seconds, one for after 100000 seconds,
and one for after 1000000 seconds. The plot shows that the adap-
tive mitigation heuristic converges closely to the event interval in
most cases. However, there are certain cases where convergence
never occurs, such as at an event interval of 42; here, the mitiga-
tion system loops among ﬁve values close to 42. The current set of
reduction rates were chosen in a largely ad hoc fashion; we leave
ﬁnding an optimal set for a broad class of event sources to future
work.
4.5 Composing mitigators
Figure 5 illustrates convergence of composition of two adaptive
mitigators. Here the ﬁrst mitigator processes events received from
a source system with an 18 sec. event interval. The second mitiga-
tor processes events that it receives from the ﬁrst one. The lines on
the graph illustrate the change of quantum values in each mitigator.
Based on the similar experiments for other event intervals, we ob-
Figure 5: Convergence of composition of mitigators with aver-
age interval of 18 sec.
serve that composed mitigators converge in most cases. We leave
identifying necessary and sufﬁcient conditions for convergence to
future work.
5. APPLICATION-LEVEL EXPERIMENTS
We evaluated the effectiveness of the basic timing mitigation
mechanism on two published timing channel attacks: RSA timing
channels [4] and remote web server timing channels [2].
Both experiments show that the basic mitigation mechanism of
Section 2.3 can successfully defend against these timing channel
attacks, although with a latency penalty.
5.1 RSA
To demonstrate the effectiveness of timing mitigation, we ap-
plied it to OpenSSL 0.9.7, a widely used open-source SSL library
that was shown to be vulnerable to RSA timing channel attacks [4].
The results show that timing mitigation eliminates the time differ-
ence targeted by RSA timing channel attack, making this attack
infeasible.
5.1.1 Experiment setup
The experiment was performed on OpenSSL 0.9.7. This version
was used because it is the same version shown to be vulnerable by
Brumley et al, and by default it does not use blinding to prevent
timing channels. Measurements were made on a 3.16GHz Intel
Core2 Due CPU, with 4G of RAM, using GCC 4.4.1. The attacker
continuously asks the target to decrypt a message and records all
decryption times, starting a new decryption request whenever the
01000200030004000500060007000800090001000005101520253035Time (seconds)Quantum (seconds)  Buffer SizeQuantum (seconds)0102030405060708090100050100150Event−interval (seconds)Quantum (seconds)  time=10000 secondstime=100000 secondstime=1000000 seconds0200040006000800010000120001400016000180002000005101520253035Time (seconds)Quantum (seconds)  First MitigatorSecond Mitigator303last one is done. The Intel CPU cycle count obtained using the
rdtsc instruction provided a precise, accurate clock.
5.1.2 Attack strategy
We used the timing channel attack strategy proposed in [4] for
this experiment, attacking RSA keys with 1024 bits.
Instead of
trying to get the secret key directly, this attack targets the smaller
factor of N used in RSA key generation. More speciﬁcally, the
attacker attacks q, where N = pq with q < p. Once q (512 bits for
a 1024-bit key pair) is released, the attacker can easily derive the
secret key by computing d = e−1 mod (p − 1) (q − 1).
The attack works by learning a bit of q at a time, from most sig-
niﬁcant to least. In each request, the attack generates two guesses
(512-bit numbers) and records the decryption time for each guess.
To set up, the attacker guesses the ﬁrst 2–3 bits of q by trying all
possible combinations (feeding rest of the bits as 0), and plots all
decryption times with x-axis of guesses. The ﬁrst peak in the graph
corresponds to q. Once the attacker has recovered the top i− 1 bits
of q, two new guesses g1 and g2 are generated, where
(a) Without mitigation
1. g1 has the same top i−1 bits as q and the remaining are zero.
2. g2 differs from g1 only at the ith bit, by setting it to 1
The attacker then computes ug1 = g1R−1 mod N and ug2 =
g2R−1 mod N (where R is some power of 2 used in Mont-
gomery Reduction), and measures the time to decrypt both ug1 and
ug2. Denote by ∆ the difference between these two decryption
times.
The goal of this RSA timing channel attack is to ﬁnd a 0–1 gap
when a certain bit of q is 0 or 1. More speciﬁcally, when the ith bit
of q is 0, the decryption time difference ∆ will be large, otherwise
small. So the attacker wins by analyzing the signiﬁcance of 0–1 gap
to get all bits of q. Actually, after recovering the most signiﬁcant
half of the bits of q, attacker can use Coppersmith’s algorithm [8]
to recover the rest of the bits. So we only show the 0–1 gap for the
ﬁrst 256 bits of q in this experiment.
5.1.3 Parameter choices
To overcome the effects of a multi-user environment, multiple
decryptions for same guesses are necessary to cancel out the tim-
ing differences. Experimentally, we found the median time of 7
samples gives a reliable decryption time with very small variation,
so this is the sample size used hereafter.
Measuring the decryption time for n + 1 guesses ranging from g,
g + 1, . . . , g + n can make the 0–1 gap more signiﬁcant, and thus
brings more conﬁdence in the guess, though at a computational cost
to the attacker [4]. We chose 600 as the value for n, because it was
enough to gain a signiﬁcant 0–1 gap in most cases.
5.1.4 Timing mitigation of RSA Attack
Since the 0–1 gap does not depend on any speciﬁc key [4], we
used a randomly generated 1024-bit key for our experiment. Fig-
ure 6(a) shows the result without any timing mitigation mechanism.
The dotted line is the zero–one gap when the corresponding bit of
q is 1, and the solid one is when the bit is 0. It is easy to see that
an attacker can infer certain bits of q by observing this zero–one
gap, especially when guessing a bit whose position is larger than
30. For bit indices less than 30, it is possible to increase the 0–1
gap by calculating a larger neighborhood set, with more cost to the
attacker.
On the other hand, Figure 6(b) shows a RSA decryption pro-
cess with the simple timing mitigation mechanism we proposed in
Section 2. The timing channel attack on RSA is defeated because
(b) With mitigation
Figure 6: Simple mitigation of the RSA timing attack
the two curves are indistinguishable regardless of which bit is be-
ing guessed: our timing mitigation scheme eliminates the 0–1 gap.
The mitigation mechanism makes the time difference drop by four
orders of magnitude, because the only source of time difference is
the request time, which does not depend on the currently guessed
bit.
5.1.5 Expected leakage
If we are willing to make assumptions about the distribution
of encryption time, we can apply the method for estimating ex-
pected leakage that is discussed in Section 3.7. Using 1000 ran-
domly generated inputs to estimate Tbig, we ﬁnd that 99% of them
are handled within 1 ∗ 108 clock cycles, which is approximately
1×108×103
3.16×109 = 31.65 ms (this is a 3.6GHz CPU). With an initial
quantum of 1 ms, it is easy to see that Nbig = (cid:100)log(31.65)(cid:101) = 5.
The leakage bound in this case is shown in Figure 7, topping out
for practical purposes around 100 bits.
5.2 Timing attack on web servers
Web applications have been shown vulnerable to timing chan-
nel attacks, either by direct timing or cross-site timing. For in-
stance, many web applications try to keep secret whether a given
username is valid, by returning the same error message regardless
of validity. They do this because learned usernames can be abused
for spam, invasive advertising, and phishing. However, timing can
expose username validity, because sites usually execute different
code paths for valid and invalid user names [2].
50100150200250Bits guessed of factor q05000100001500020000Time difference in CPU cycles (x1,000)bits=0bits=150100150200250Bits guessed of factor q-2-101Time difference in CPU cycles (x1,000)bits=0bits=1304Figure 7: Expected leakage for RSA timing channel attack
(a) Without mitigation
We implemented a simple web server to expose this timing chan-
nel and applied our mitigation scheme to eliminate it. The result
shows that our mitigation mechanism is also useful in the face of
web applications, although with a latency cost.
5.2.1 Experimental setup
We built a small HTTP web service on Tomcat 5.5.28. It takes
a username/password pair as a request and checks its validity. We
randomly generate 10,000 username/password pairs, and store the
username with a SHA-1 password hash of passwords into Berkeley
DB (Java Edition, 4.0.92) [25]. This experiment is done between
two computers connected by a campus network.
The login service proceeds as follows: ﬁrst, it checks the database
for validity of the given username.
If the username is invalid,
this server just returns an error message. Otherwise, the server
computes the SHA-1 hash of the given password and checks if
it matches the one stored in database.
If the password does not