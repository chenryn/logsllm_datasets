chart.set_table（），效果图如图3-10所示。
图3-10 设置X轴为数据表格形式
3.1.2 实践：定制自动化业务流量报表周报
本次实践通过定制网站5个频道的流量报表周报，通过XlsxWriter模块将流量
数据写入Excel文档，同时自动计算各频道周平均流量，再生成数据图表。具体
是通过workbook.add_chart（{'type'：'column'}）方法指定图表类型为柱形，使用
write_row、write_column方法分别以行、列方式写入数据，使用add_format（）
方法定制表头、表体的显示风格，使用add_series（）方法将数据添加到图表，
同时使用chart.set_size、set_title、set_y_axis设置图表的大小及标题属性，最后通
过insert_chart方法将图表插入工作表中。我们可以结合2.3节的内容来实现周报
的邮件推送，本示例略去此功能。实现的代码如下：
【/home/test/XlsxWriter/simple2.py】
#coding： utf-8
import xlsxwriter
workbook = xlsxwriter.Workbook（'chart.xlsx'） #创建一个Excel文件
worksheet = workbook.add_worksheet（） #创建一个工作表对象
chart = workbook.add_chart（{'type'： 'column'}） #创建一个图表对象
#定义数据表头列表
title = [u'业务名称'，u'星期一'，u'星期二'，u'星期三'，u'星期四'，u'星期五'，u'星期
六'，u'星期日'，u'平均流量']
buname= [u'业务官网'，u'新闻中心'，u'购物频道'，u'体育频道'，u'亲子频道'] #定义频道
名称
#定义5频道一周7天流量数据列表
data = [
[150，152，158，149，155，145，148]，
[89，88，95，93，98，100，99]，
[201，200，198，175，170，198，195]，
[75，77，78，78，74，70，79]，
[88，85，87，90，93，88，84]，
]
format=workbook.add_format（） #定义format格式对象
format.set_border（1） #定义format对象单元格边框加粗（1像素）的格式
format_title=workbook.add_format（） #定义format_title格式对象
format_title.set_border（1） #定义format_title对象单元格边框加粗（1像素）的格式
format_title.set_bg_color（'#cccccc'） #定义format_title对象单元格背景颜色为
#'#cccccc'的格式
format_title.set_align（'center'） #定义format_title对象单元格居中对齐的格式
format_title.set_bold（） #定义format_title对象单元格内容加粗的格式
format_ave=workbook.add_format（） #定义format_ave格式对象
format_ave.set_border（1） #定义format_ave对象单元格边框加粗（1像素）的格式
format_ave.set_num_format（'0.00'） #定义format_ave对象单元格数字类别显示格式
#下面分别以行或列写入方式将标题、业务名称、流量数据写入起初单元格，同时引用不同格式对象
worksheet.write_row（'A1'，title，format_title）
worksheet.write_column（'A2'， buname，format）
worksheet.write_row（'B2'， data[0]，format）
worksheet.write_row（'B3'， data[1]，format）
worksheet.write_row（'B4'， data[2]，format）
worksheet.write_row（'B5'， data[3]，format）
worksheet.write_row（'B6'， data[4]，format）
#定义图表数据系列函数
def chart_series（cur_row）：
worksheet.write_formula（'I'+cur_row， \
'=AVERAGE（B'+cur_row+'：H'+cur_row+'）'，format_ave） #计算（AVERAGE函
数）频
#道周平均流量
chart.add_series（{
'categories'： '=Sheet1！$B$1：$H$1'， #将“星期一至星期日”作为图表数据标
签（X轴）
'values'： '=Sheet1！$B$'+cur_row+'：$H$'+cur_row， #频道一周所有
数据作
#为数据区域
'line'： {'color'： 'black'}， #线条颜色定义为black（黑色）
'name'： '=Sheet1！$A$'+cur_row， #引用业务名称为图例项
}）
for row in range（2， 7）： #数据域以第2~6行进行图表数据系列函数调用
chart_series（str（row））
#chart.set_table（） #设置X轴表格格式，本示例不启用
#chart.set_style（30） #设置图表样式，本示例不启用
chart.set_size（{'width'： 577， 'height'： 287}） #设置图表大小
chart.set_title （{'name'： u'业务流量周报图表'}） #设置图表（上方）大标题
chart.set_y_axis（{'name'： 'Mb/s'}） #设置y轴（左侧）小标题
worksheet.insert_chart（'A8'， chart） #在A8单元格插入图表
workbook.close（） #关闭Excel文档
上述示例将创建一个如图3-11所示的工作表。
图3-11 业务流量周报图表工作表
参考提示 3.4.1节XlsxWrite模块的常用类与方法说明参考官网
http://xlsxwriter.readthedocs.org。
3.2 Python与rrdtool的结合模块
rrdtool（round robin database）工具为环状数据库的存储格式，round robin
是一种处理定量数据以及当前元素指针的技术。rrdtool主要用来跟踪对象的变化
情况，生成这些变化的走势图，比如业务的访问流量、系统性能、磁盘利用率
等趋势图，很多流行监控平台都使用到rrdtool，比较有名的为Cacti、Ganglia、
Monitorix等。更多rrdtool介绍见官网http://oss.oetiker.ch/rrdtool/。rrdtool是一个复
杂的工具，涉及较多参数概念，本节主要通过Python的rrdtool模块对rrdtool的几
个常用方法进行封装，包括create、fetch、graph、info、update等方法，本节对
rrdtool的基本知识不展开说明，重点放在Python rrdtool模块的常用方法使用介绍
上。
rrdtool模块的安装方法如下：
easy_install python-rrdtool #pip安装方法
pip install python-rrdtool #easy_install安装方法
#需要rrdtool工具及其他类包支持，CentOS环境推荐使用yum安装方法
# yum install rrdtool-python
3.2.1 rrdtool模块常用方法说明
下面介绍rrdtool模块常用的几个方法，包括create（创建rrd）、update（更新
rrd）、graph（绘图）、fetch（查询rrd）等。
1.Create方法
create filename[--start|-b start time][--step|-s step][DS：ds-name：DST：
heartbeat：min：max][RRA：CF：xff：steps：rows]方法，创建一个后缀为rrd的
rrdtool数据库，参数说明如下：
·filename创建的rrdtool数据库文件名，默认后缀为.rrd；
·--start指定rrdtool第一条记录的起始时间，必须是timestamp的格式；
·--step指定rrdtool每隔多长时间就收到一个值，默认为5分钟；
·DS用于定义数据源，用于存放脚本的结果的变量；
·DST用于定义数据源类型，rrdtool支持COUNTER（递增类型）、
DERIVE（可递增可递减类型）、ABSOLUTE（假定前一个时间间隔的值为0，
再计算平均值）、GUAGE（收到值后直接存入RRA）、COMPUTE（定义一个表
达式，引用DS并自动计算出某个值）5种，比如网卡流量属于计数器型，应该选
择COUNTER；
·RRA用于指定数据如何存放，我们可以把一个RRA看成一个表，保存不同
间隔的统计结果数据，为CF做数据合并提供依据，定义格式为：[RRA：CF：
xff：steps：rows]；
·CF统计合并数据，支持AVERAGE（平均值）、MAX（最大值）、MIN（最
小值）、LAST（最新值）4种方式。
2.update方法
update filename[--template|-t ds-name[：ds-name]...]N|timestamp：value[：
value...][timestamp：value[：value...]...]方法，存储一个新值到rrdtool数据
库，updatev和update类似，区别是每次插入后会返回一个状态码，以便了解是否
成功（updatev用0表示成功，–1表示失败）。参数说明如下：
·filename指定存储数据到的目标rrd文件名；
·-t ds-name[：ds-name]指定需要更新的DS名称；
·N|Timestamp表示数据采集的时间戳，N表示当前时间戳；
·value[：value...]更新的数据值，多个DS则多个值。
3.graph方法
graph filename[-s|--start seconds][-e|--end seconds][-x|--x-grid x-axis grid and
label][-y|--y-grid y-axis grid and label][--alt-y-grid][--alt-y-mrtg][--alt-autoscale][--alt-
autoscale-max][--units-exponent]value[-v|--vertical-label text][-w|--width pixels][-h|--
height pixels][-i|--interlaced][-f|--imginfo formatstring][-a|--imgformat GIF|PNG|GD]
[-B|--background value][-O|--overlay value][-U|--unit value][-z|--lazy][-o|--
logarithmic][-u|--upper-limit value][-l|--lower-limit value][-g|--no-legend][-r|--rigid][-
-step value][-b|--base value][-c|--color COLORTAG#rrggbb][-t|--title title][DEF：
vname=rrd：ds-name：CF][CDEF：vname=rpn-expression][PRINT：vname：
CF：format][GPRINT：vname：CF：format][COMMENT：text][HRULE：
value#rrggbb[：legend]][VRULE：time#rrggbb[：legend]][LINE{1|2|3}：
vname[#rrggbb[：legend]]][AREA：vname[#rrggbb[：legend]]][STACK：
vname[#rrggbb[：legend]]]方法，根据指定的rrdtool数据库进行绘图，关键参数
说明如下：
·filename指定输出图像的文件名，默认是PNG格式；
·--start指定起始时间；
·--end指定结束时间；
·--x-grid控制X轴网格线刻度、标签的位置；
·--y-grid控制Y轴网格线刻度、标签的位置；
·--vertical-label指定Y轴的说明文字；
·--width pixels指定图表宽度（像素）；
·--height pixels指定图表高度（像素）；
·--imgformat指定图像格式（GIF|PNG|GD）；
·--background指定图像背景颜色，支持#rrggbb表示法；
·--upper-limit指定Y轴数据值上限；
·--lower-limit指定Y轴数据值下限；
·--no-legend取消图表下方的图例；
·--rigid严格按照upper-limit与lower-limit来绘制；
·--title图表顶部的标题；
·DEF：vname=rrd：ds-name：CF指定绘图用到的数据源；
·CDEF：vname=rpn-expression合并多个值；
·GPRINT：vname：CF：format图表的下方输出最大值、最小值、平均值
等；
·COMMENT：text指定图表中输出的一些字符串；
·HRULE：value#rrggbb用于在图表上面绘制水平线；
·VRULE：time#rrggbb用于在图表上面绘制垂直线；
·LINE{1|2|3}：vname使用线条来绘制数据图表，{1|2|3}表示线条的粗细；
·AREA：vname使用面积图来绘制数据图表。
4.fetch方法
fetch filename CF[--resolution|-r resolution][--start|-s start][--end|-e end]方法，
根据指定的rrdtool数据库进行查询，关键参数说明如下：
·filename指定要查询的rrd文件名；
·CF包括AVERAGE、MAX、MIN、LAST，要求必须是建库时RRA中定义的
类型，否则会报错；
·--start--end指定查询记录的开始与结束时间，默认可省略。
3.2.2 实践：实现网卡流量图表绘制
在日常运营工作当中，观察数据的变化趋势有利于了解我们的服务质量，比
如在系统监控方面，网络流量趋势图直接展现了当前网络的吞吐。CPU、内存、
磁盘空间利用率趋势则反映了服务器运行健康状态。通过这些数据图表管理员
可以提前做好应急预案，对可能存在的风险点做好防范。本次实践通过rrdtool模
块实现服务器网卡流量趋势图的绘制，即先通过create方法创建一个rrd数据库，
再通过update方法实现数据的写入，最后可以通过graph方法实现图表的绘制，
以及提供last、first、info、fetch方法的查询。图3-12为rrd创建到输出图表的过
程。
图3-12 创建、更新rrd及输出图表流程
第一步 采用create方法创建rrd数据库，参数指定了一个rrd文件、更新频率
step、起始时间--start、数据源DS、数据源类型DST、数据周期定义RRA等，详
细源码如下：
【/home/test/rrdtool/create.py】
# -*- coding： utf-8 -*-
#！/usr/bin/python
import rrdtool
import time
cur_time=str（int（time.time（））） #获取当前Linux时间戳作为rrd起始时间
#数据写频率--step为300秒（即5分钟一个数据点）
rrd=rrdtool.create（'Flow.rrd'，'--step'，'300'，'--start'，cur_time，
#定义数据源eth0_in（入流量）、eth0_out（出流量）；类型都为COUNTER（递增）；600秒为心跳
值，
#其含义是600秒没有收到值，则会用UNKNOWN代替；0为最小值；最大值用U代替，表示不确定
'DS：eth0_in：COUNTER：600：0：U'，
'DS：eth0_out：COUNTER：600：0：U'，
#RRA定义格式为[RRA：CF：xff：steps：rows]，CF定义了AVERAGE、MAX、MIN三种数据合并方
式
#xff定义为0.5，表示一个CDP中的PDP值如超过一半值为UNKNOWN，则该CDP的值就被标为UNKNOWN
#下列前4个RRA的定义说明如下，其他定义与AVERAGE方式相似，区别是存最大值与最小值
# 每隔5分钟（1*300秒）存一次数据的平均值，存600笔，即2.08天
# 每隔30分钟（6*300秒）存一次数据的平均值，存700笔，即14.58天（2周）
# 每隔2小时（24*300秒）存一次数据的平均值，存775笔，即64.58天（2个月）
# 每隔24小时（288*300秒）存一次数据的平均值，存797笔，即797天（2年）
'RRA：AVERAGE：0.5：1：600'，
'RRA：AVERAGE：0.5：6：700'，
'RRA：AVERAGE：0.5：24：775'，
'RRA：AVERAGE：0.5：288：797'，
'RRA：MAX：0.5：1：600'，
'RRA：MAX：0.5：6：700'，
'RRA：MAX：0.5：24：775'，
'RRA：MAX：0.5：444：797'，
'RRA：MIN：0.5：1：600'，
'RRA：MIN：0.5：6：700'，
'RRA：MIN：0.5：24：775'，
'RRA：MIN：0.5：444：797'）
if rrd：
print rrdtool.error（）
第二步 采用updatev方法更新rrd数据库，参数指定了当前的Linux时间戳，
以及指定eth0_in、eth0_out值（当前网卡的出入流量），网卡流量我们通过psutil
模块来获取，如psutil.net_io_counters（）[1]为入流量，关于psutil模块的介绍见
第1.1。详细源码如下：
【/home/test/rrdtool/update.py】
# -*- coding： utf-8 -*-
#！/usr/bin/python
import rrdtool
import time，psutil
total_input_traffic = psutil.net_io_counters（）[1] #获取网卡入流量
total_output_traffic = psutil.net_io_counters（）[0] #获取网卡出流量
starttime=int（time.time（）） #获取当前Linux时间戳
#将获取到的三个数据作为updatev的参数，返回{'return_value'： 0L}则说明更新成功，反之失败
update=rrdtool.updatev（'/home/test/rrdtool/Flow.rrd'，'%s：%s：
%s' % （str（starttime），str（total_input_traffic），str（total_output_traffic）））
print update
将代码加入crontab，并配置5分钟作为采集频率，crontab配置如下：
*/5 * * * * /usr/bin/python /home/test/rrdtool/update.py > /dev/null 2>&1
第三步 采用graph方法绘制图表，此示例中关键参数使用了--x-grid定义X轴
网格刻度；DEF指定数据源；使用CDEF合并数据；HRULE绘制水平线（告警
线）；GPRINT输出最大值、最小值、平均值等。详细源码如下：
【/home/test/rrdtool/graph.py】
# -*- coding： utf-8 -*-
#！/usr/bin/python
import rrdtool
import time
#定义图表上方大标题
title="Server network traffic flow （"+time.strftime（'%Y-%m-%d'， \
time.localtime（time.time（）））+"）"
#重点解释"--x-grid"，"MINUTE：12：HOUR：1：HOUR：1：0：%H"参数的作用（从左往右进行分
解）
“MINUTE：12”表示控制每隔12分钟放置一根次要格线
“HOUR：1”表示控制每隔1小时放置一根主要格线
“HOUR：1”表示控制1个小时输出一个label标签