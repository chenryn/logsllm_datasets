# 《Chrome V8原理讲解》第二十篇 编译链1：语法分析，被遗忘的细节
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 1 摘要
第三、四、五三篇文章对V8编译流程的主要功能做了介绍，在基础之上，接下来的几篇文章是编译专题，讲解V8编译链，从读取Javascript源码文件开始，到字节码的生成，并结合前三篇文章，详细说明编译过程和技术细节。编译专题的知识点包括：生成Token、生成AST、生成常量池、生成Bytecode和Sharedfunction。本文讲编译的准备工作，Javascirpt源码的读取与转码（章节2）；语法分析的准备工作（章节3）。
## 2 读取Javascript源码
测试源码如下：
    function ignition(s) {
        this.slogan=s;
        this.start=function(){eval('console.log(this.slogan);')}
    }
    worker = new ignition("here we go!");
    worker.start();
Javascript源码先转成V8的内部字符串，内部字符串编译后生成Sharedfunction，Sharedfunction绑定Context等信息后生成JSfunction后交给执行单元。从读取Javascript源码讲起，源码如下：
    1.  bool SourceGroup::Execute(Isolate* isolate) {
    2.  //............省略很多..................
    3.      // Use all other arguments as names of files to load and run.
    4.      HandleScope handle_scope(isolate);
    5.      Local file_name =
    6.          String::NewFromUtf8(isolate, arg, NewStringType::kNormal)
    7.              .ToLocalChecked();
    8.      Local source = ReadFile(isolate, arg);
    9.      if (source.IsEmpty()) {
    10.        printf("Error reading '%s'\n", arg);
    11.        base::OS::ExitProcess(1);
    12.      }
    13.      Shell::set_script_executed();
    14.      if (!Shell::ExecuteString(isolate, source, file_name, Shell::kNoPrintResult,
    15.                                Shell::kReportExceptions,
    16.                                Shell::kProcessMessageQueue)) {
    17.        success = false;
    18.        break;
    19.      }
    20.    }
    21.    return success;
    22.  }
我用d8做讲解，d8方便加载Javascript源码，不需要重复造轮子。代码5行`file_name`的值是test.js；代码8行读取文件内容，`ReadFile()`代码如下：
    1.  Local Shell::ReadFile(Isolate* isolate, const char* name) {
    2.  //只保留最重要的部分...............................
    3.    char* chars = static_cast(file->memory());
    4.    Local result;
    5.    if (i::FLAG_use_external_strings && i::String::IsAscii(chars, size)) {
    6.      String::ExternalOneByteStringResource* resource =
    7.          new ExternalOwningOneByteStringResource(std::move(file));
    8.      result = String::NewExternalOneByte(isolate, resource).ToLocalChecked();
    9.    } else {
    10.      result = String::NewFromUtf8(isolate, chars, NewStringType::kNormal, size)
    11.                   .ToLocalChecked();
    12.    }
    13.    return result;
    14.  }
代码3行读取文件内容；代码5行判断`i::FLAG_use_external_strings`和ASCII字符，代码10行返回UTF8编码的Javascript源码。  
进入`bool SourceGroup::Execute()`代码14行，源码如下：
    1.  bool Shell::ExecuteString(Isolate* isolate, Local source,
    2.                      Local name, PrintResult print_result,
    3.                      ReportExceptions report_exceptions,
    4.                      ProcessMessageQueue process_message_queue) {
    5.      //省略很多............................
    6.  bool success = true;
    7.  {
    8.    if (options.compile_options == ScriptCompiler::kConsumeCodeCache) {
    9.      //省略很多............................
    10.       } else if (options.stress_background_compile) {
    11.      //省略很多............................
    12.       } else {
    13.         ScriptCompiler::Source script_source(source, origin);
    14.         maybe_script = ScriptCompiler::Compile(context, &script_source,
    15.                                                options.compile_options);
    16.       }
    17.       Local script;
    18.       if (!maybe_script.ToLocal(&script)) {
    19.         // Print errors that happened during compilation.
    20.         if (report_exceptions) ReportException(isolate, &try_catch);
    21.         return false;
    22.       }
    23.       if (options.code_cache_options ==
    24.           ShellOptions::CodeCacheOptions::kProduceCache) {
    25.      //省略很多............................
    26.       }
    27.       maybe_result = script->Run(realm);//这是代码执行.....................
    28.  }
    29.  }
省略了不执行的代码，代码13行，把Javascript源码封装成`ScriptCompiler::Source`；代码14行，ScriptCompiler::Compile是编译入口，开始进入编译阶段。
## 3 语法分析器初始化
编译的第一阶段是词法分析，生成Token字；第二阶段是语法分析，生成语法树；V8的编译工具链中，先启动语法分析器，它读取Token字失败时启动词法分析器工作，按照这一流程，我们先讲解语法分析器的初始化。  
`ScriptCompiler::Compile()`方法内部调用`CompileUnboundInternal()`方法，源码如下：
    1.  MaybeLocal ScriptCompiler::CompileUnboundInternal(
    2.      Isolate* v8_isolate, Source* source, CompileOptions options,
    3.      NoCacheReason no_cache_reason) {
    4.  //省略很多................
    5.    i::Handle str = Utils::OpenHandle(*(source->source_string));
    6.    i::Handle result;
    7.    i::Compiler::ScriptDetails script_details = GetScriptDetails(
    8.        isolate, source->resource_name, source->resource_line_offset,
    9.        source->resource_column_offset, source->source_map_url,
    10.        source->host_defined_options);
    11.    i::MaybeHandle maybe_function_info =
    12.        i::Compiler::GetSharedFunctionInfoForScript(
    13.            isolate, str, script_details, source->resource_options, nullptr,
    14.            script_data, options, no_cache_reason, i::NOT_NATIVES_CODE);
    15.    if (options == kConsumeCodeCache) {
    16.      source->cached_data->rejected = script_data->rejected();
    17.    }
    18.    delete script_data;
    19.    has_pending_exception = !maybe_function_info.ToHandle(&result);
    20.    RETURN_ON_FAILED_EXECUTION(UnboundScript);
    21.    RETURN_ESCAPED(ToApiHandle(result));
    22.  }
“Bind”（绑定）是V8中使用的语术，作用是绑定上下文（context）。“Unbound”是没有绑定上下文的函数，即Sharedfunction，类似DLL函数，使用之前要配置相关信息。代码7行，`GetScriptDetails()`是计算行、列偏移量等信息；代11行`Sharedfunction()`，从编译缓存中读取Sharedfunction，缓存缺失时启动编译器，编译源码生成并返回Sharedfunction，源码如下：
    1.  MaybeHandle Compiler::GetSharedFunctionInfoForScript(
    2.      Isolate* isolate, Handle source,
    3.      const Compiler::ScriptDetails& script_details,
    4.   .................) {
    5.  //省略很多.........................
    6.          {
    7.      maybe_result = compilation_cache->LookupScript(
    8.          source, script_details.name_obj, script_details.line_offset,
    9.          script_details.column_offset, origin_options, isolate->native_context(),
    10.          language_mode);
    11.    }
    12.    if (maybe_result.is_null()) {
    13.      ParseInfo parse_info(isolate);
    14.      // No cache entry found compile the script.
    15.      NewScript(isolate, &parse_info, source, script_details, origin_options,
    16.                natives);
    17.      // Compile the function and add it to the isolate cache.
    18.      if (origin_options.IsModule()) parse_info.set_module();