R(i) =AES(K ,(cid:27)i/128(cid:26))[i mod 128]
which means that 3 calls to AES are sufﬁcient to eval-
uate 128 individual AND gates. Note that since N (the
number of AND gates) is known in advance, we can pre-
compute all calls to AES at the beginning of the proto-
col. These two optimizations, together with the native
support for AES in modern processors, proved very ef-
fective towards decreasing running times.
Commitments:
In the ﬁrst step of the protocol the
prover commits to the three views w1,w2,w3. Those
commitments have been implemented using SHA-
256 as the commitment function i.e., Com(x,r) =
SHA-256(x,r). Under the (mild) assumptions that SHA-
256 is collision resistant and that SHA-256(·,r) is a PRF
(with key r) the commitments are binding and hiding.
The Fiat-Shamir Oracle. To make the proofs non-
interactive, we need a random oracle H : {0,1}∗ →
{1,2,3}r where r is the number of repetitions of our
basic protocol. We instantiate this using SHA-256 as
a random oracle and by performing rejection sampling.
In particular, we compute the ﬁrst output coordinate of
H(x) by looking at the ﬁrst two output bits of SHA-
256(0,x) and mapping (a,b) → 2a + b + 1. In case that
(a,b) = (1,1) we look at the third-fourth bit instead and
repeat.
If there are no more bits left in the output of
the hash function, we evaluate SHA-256(1,x) and so on.
In our experiments the maximum number of repetition
is r ∈ {69,137}, thus we call the hash function once or
twice (on expectation).
5.3 Experimental Setup
We report on the results of the implementation of SHA-
1 and SHA-256 for 69 and 137 repetitions each. Those
correspond to soundness errors 2−40 and 2−80. While the
security level 2−40 is not sufﬁcient for the case of non-
interactive zero-knowledge, it offers reasonable security
guarantees in the interactive case – note however that in
this case our timings are only indicative of the local com-
putation as they do not account for the necessary network
communication.
Our experiments were run on a machine with an AMD
FX-8350 CPU, running 8 cores at 4.00 GHz. The pro-
grams were run under Windows 10 Pro version 1511
(OS Build 10586.14) on a Seagate Barracuda 7200 RPM
SATA 3.0 Gb/s hard drive with 16MB cache. Note that
1078  25th USENIX Security Symposium 
USENIX Association
computing and verifying our proofs is an embarrassingly
parallel task, thus it was possible to effortlessly take ad-
vantage of our multi-core architecture using OpenMP11,
an API useful for making a C program multi-threaded.
We note that we have only done this for the main loop
of the program, which iterates over the individual repeti-
tions of the proofs (which are clearly independent from
each other), thus it is likely that there is room for fur-
ther parallelisation. Timings were done using C native
clock() function and are measured in milliseconds.
5.4 Experimental Results
Breakdown.
In Table 1 we report on the timings we
obtained for both SHA-1 and SHA-256, with 69 and 137
rounds, both enabling and disabling parallelisation. In
this table we also present a breakdown of the running
time. In particular we measure the following phases for
the prover:
• Commit: This is the time to run the Commit pro-
cedure (Figure 6) to produce a. It is further divided
into the following sub-timings: (Rand. gen.) Gen-
eration of all needed randomness using OpenSSL
RNG as well as preprocessing of the PRF; (Algo-
rithm exec.) Time taken to run the algorithm Π∗φ .
This is the total time for all 69/137 rounds; (Com-
mitment) Generating commitments of the views;
• Gen. challenge: Using the random oracle to gener-
ate the challenge vector as e = H(y,a);
• Prove: Building the vector z;
• Output to disk: Writing (a,e,z) to disk;12
For the veriﬁer:
)
s
m
(
e
m
T
i
• Input from disk: Reading the proof from ﬁle;
• Gen. challenge: Regenerate the challenge vector
using the random oracle;
• Verify: The time to run all the rounds of the Verify
procedure;
Finally, with proof size we indicate the size of the string
π = (y,a,z) on disk in KB.
Parallelisation. Figure 7 and 8 show how the run-
ning time of the prover (resp. veriﬁer) changes when we
change the number of rounds (from 1 to 137) and the
number of threads (from 1 to 8). We include the graphs
for SHA-256 only. It is easy to see that the running time
11http://openmp.org
12We observed that the timings of writing to disk are very noisy, and
not always monotone in the size of the written ﬁle.
)
s
m
(
e
m
T
i
60
40
20
0
SHA-256 prover running time
1 thread
2 threads
3 threads
4 threads
5 threads
6 threads
7 threads
8 threads
20
40
60
80
100
120
Number of rounds
Figure 7: Relation between the total running time and
the number of rounds for the SHA-256 prover, average
over 100 runs.
SHA-256 veriﬁer running time
60
40
20
0
20
40
60
80
100
120
Number of rounds
Figure 8: Relation between the total running time and
the number of rounds for the SHA-256 veriﬁer, average
over 100 runs.
increases linearly with the number of rounds, and that the
improvement due to multithreading is signiﬁcant. The
graph indicates that there is some ﬂuctuation in the al-
gorithm’s run time for all number of threads when us-
ing up to about 85 rounds, which is mostly due to the
USENIX Association  
25th USENIX Security Symposium  1079
Serial
18.98
13.45
1.35
10.41
1.37
0.06
0.12
5.35
11.68
0.09
0.06
11.53
Paral.
8.12
3.68
0.60
2.69
0.39
0.05
0.18
4.21
2.35
0.11
0.05
2.20
Prover (ms)
Commit
- Rand. gen.
- Algorithm exc.
- Commitment
Gen. challenge
Prove
Output to disk
Veriﬁer (ms)
Input from disk
Gen. challenge
Verify
Proof size (KB)
Serial
31.73
26.73
2.47
21.55
2.71
0.10
0.28
4.62
22.85
0.13
0.10
22.63
Paral.
12.73
6.59
0.88
5.06
0.64
0.13
0.32
5.70
4.39
0.16
0.10
4.12
Serial
30.81
24.47
2.28
19.60
2.56
0.05
0.32
5.08
34.16
0.15
0.06
33.95
Paral.
12.45
5.86
0.80
4.44
0.62
0.06
0.39
5.39
6.77
0.16
0.05
6.56
Serial
54.63
48.25
4.46
38.68
5.09
0.09
0.07
4.76
67.74
0.29
0.10
67.35
Paral.
15.95
10.07
1.13
7.87
1.07
0.09
0.53
4.43
13.20
0.25
0.11
12.85
69 rounds
137 rounds
SHA-1
SHA-256
69 rounds
137 rounds
223.71
444.18
421.01
835.91
Table 1: Breakdown of times and proof size for 69/137 rounds of SHA-1/SHA-256, average of 1000 runs
ZKBoo
ZKGC (Estimates)
Pinocchio
Veriﬁer (ms)
Preproc. (ms)
0
5
0 > 19 (OT only) > 25 (OT only)
8
Prover (ms)
13
12059
9754
Proof size (B)
454840
186880
288
Table 2: Comparison of approaches for SHA-1
noise introduced by disk operations13. We note that the
runtime of the veriﬁer beneﬁts more from parallelisation.
This is consistent with Amdahl’s law since, as shown in
Table 1, the prover spends signiﬁcantly more time per-
forming tasks which do not beneﬁt from parallelisation
(e.g., writing to disk).
5.5 Comparison
Here we compare the performances of ZKBoo with some
of the state-of-the-art protocol for the same task. In par-
ticular, we compare the performances of proving/veri-
fying knowledge of SHA-1 preimages across ZKBoo,
Pinocchio [23] and ZKGC [21].
Pinocchio [23]
is an implementation of SNARKs for
veriﬁable outsourcing of computation. While not its
main purpose, it can generate zero-knowledge proofs at a
negligible extra cost over sound-only proofs. The choice
of benchmarking SHA-1 only (and not SHA-256) is due
to the fact that the Pinocchio library only contains SHA-
1. The runtime reported for Pinocchio are obtained on
the same machine as our implementation. The results
shows that ZKBoo is faster at both proving and verify-
ing, with an incredible 103 factor for the prover. Note
13See the full version [14] for graphs showing the running times
without disk operations.
here that if the underlying circuit had been larger, the
proof size and the veriﬁcation time of Pinocchio would
not change, while its preprocessing and proving time
would grow accordingly. We note also that Pinocchio
has a large preprocessing time where some prover/veri-
ﬁer key are generated. Those keys are circuit dependent,
and for SHA-1 the prover key is 6.5 MB and the veri-
ﬁer key is 1.1 MB. To Pinocchio’s defence, it must be
noted that 1) Pinocchio is a general purpose system that
can generate proofs for any circuit (provided as an in-
put ﬁle) while our implementation contains the SHA cir-
cuit hard-coded; 2) according to [23], Pinocchio has not