### Algorithm for Optimal Fault Tolerance Strategy Selection with Local and Global Constraints

#### 1. Introduction
This document describes an algorithm for selecting the optimal fault tolerance strategy for a service plan, considering both local and global constraints. The service plan consists of stateless tasks (SLT) and stateful tasks (SFT). The goal is to find the best combination of fault tolerance strategies that meet all constraints while maximizing utility.

#### 2. Problem Formulation
- **Service Plan (SP)**: A sequence of tasks.
- **Local Constraints (LC)**: Constraints specific to individual tasks.
- **Global Constraints (GC)**: Constraints for the entire service plan.
- **Candidates (S)**: Set of possible fault tolerance strategies for each task.

#### 3. Algorithm for Stateful and Stateless Task Selection

**Algorithm 2: FTSelection with Local Constraints**

1. **Initialization**:
   - \( n_l = |SLT| \): Number of stateless tasks.
   - \( n_f = |SFT| \): Number of stateful tasks.
   - \( n = n_l + n_f \): Total number of tasks.
   - \( m_i = |S_i| \): Number of candidates for task \( t_i \).

2. **Stateless Tasks**:
   - For each stateless task \( t_i \) (for \( i = 1 \) to \( n_l \)):
     - For each candidate \( j \) (for \( j = 1 \) to \( m_i \)):
       - If all QoS values \( q_{xij} \leq lc_x \), calculate the utility \( u_{ij} = \text{utility}(q_{ij}) \).
       - If no candidate meets the local constraints, throw an exception.
     - Select the candidate with the minimum utility \( u_{ix} = \min\{u_{ij}\} \).
     - Set the optimal candidate index \( \rho_i = x \).

3. **Stateful Tasks**:
   - For each stateful task \( SFT_i \) (for \( i = n_l + 1 \) to \( n \)):
     - For each candidate \( j \) (for \( j = 1 \) to \( m_i \)):
       - If all QoS values \( q_{xiyj} \leq lc_{xiy} \), calculate the overall QoS \( q = \text{flowQoS}(SP, q_{i1j}, \ldots, q_{inij}) \).
       - Calculate the utility \( u_{ij} = \text{utility}(q) \).
       - If no candidate meets the local constraints, throw an exception.
     - Select the candidate with the minimum utility \( u_{ix} = \min\{u_{ij}\} \).
     - Set the optimal candidate index for all tasks in \( SFT_i \) as \( \rho_{ik} = x \).

#### 4. Global Constraints

**Definition 2: Execution Route (ER)**
- An execution route \( ER_i \) is a subset of the service plan including only one branch in each branch structure.
- Each execution route has an execution probability \( \text{pro}(ER_i) \), which is the product of all probabilities of the selected branches in the route.
- The sum of all execution probabilities is 1: \( \sum_{i=1}^{ne} \text{pro}(ER_i) = 1 \), where \( ne \) is the number of execution routes.

**Definition 3: Sequential Route (SR)**
- A sequential route \( SR_{ij} \) is a subset of an execution route including only one branch in each parallel structure.

**Problem 2: Integer Programming (IP) Formulation**

- **Objective Function**:
  \[
  \min \sum_{i \in ER} \sum_{j \in S_i} u_{ij} x_{ij}
  \]
- **Constraints**:
  1. Global constraints for price, popularity, and date-size:
     \[
     \sum_{i \in ER} \sum_{j \in S_i} q_{yij} x_{ij} \leq gc_y \quad (y = 2, 3, 4)
     \]
  2. Global constraints for response time and overall response time:
     \[
     \forall k, \sum_{i \in SR_k} \sum_{j \in S_i} q_{yij} x_{ij} \leq gc_y \quad (y = 6, 8)
     \]
  3. Global constraints for availability, success rate, and overall success rate:
     \[
     \prod_{i \in ER} \prod_{j \in S_i} (q_{yij})^{x_{ij}} \leq gc_y \quad (y = 1, 5, 7)
     \]
  4. Ensure state-related tasks use the same web service:
     \[
     \forall SFT_i, x_{y1j} = x_{y2j} = \ldots = x_{ynij} \quad (t_{yi} \in SFT_i)
     \]
  5. Select exactly one candidate for each task:
     \[
     \forall i, \sum_{j \in S_i} x_{ij} = 1; \quad x_{ij} \in \{0, 1\}
     \]

**Transformation to Linear Form**:
- Apply logarithm to non-linear constraints:
  \[
  \sum_{i \in ER} \sum_{j \in S_i} x_{ij} \ln(q_{yij}) \leq \ln(gc_y) \quad (y = 1, 5, 7)
  \]

**Algorithm 3: Hybrid Algorithm: FT-BABHEU**

1. **Major Routes**:
   - Find the optimal candidates for major routes using the Branch-and-Bound algorithm (FT-BAB).
   - Combine the results from different execution routes.
   - If the major routes cover all tasks, return the optimal result. Otherwise, proceed to the heuristic step.

2. **Heuristic Step**:
   - Use the `findInitialSolution` function to find initial feasible candidates for uncovered tasks.
   - If the initial solution does not meet global constraints, use the `findExchangeCandidate` function to find exchangeable candidates.
   - Iteratively improve the feasible solution using the `feasibleUpgrade` function.

**Algorithm 4: Find Initial Solution**

- Calculate the accumulated QoS values and update the weights.
- For each candidate, calculate the value \( \lambda_{ij} \) and select the candidate with the minimum \( \lambda_{ij} \).

**Algorithm 5: Find Exchange Candidate**

- Identify a candidate that reduces the highest infeasible factor without increasing other infeasible factors or making any previously feasible properties infeasible.

**Algorithm 6: Feasible Upgrade**

- If there exists a feasible upgrade, choose the candidate with the maximum QoS savings.
- If no feasible upgrade exists, select the candidate with the maximum utility-gain per QoS saving.

#### 5. Conclusion
The described algorithms provide a systematic approach to selecting the optimal fault tolerance strategy for a service plan, considering both local and global constraints. The hybrid approach combines exact and heuristic methods to balance solution quality and computational efficiency.