lo")
Set sql2 = Request.QueryString("foo")
MySqlStuff pwd, sql1, sql2
Sub MySqlStuff(password, cmd1, cmd2)
Set conn = Server.CreateObject("ADODB.Connection")
conn.Provider = "Microsoft.Jet.OLEDB.4.0"
conn.Open "c:/webdata/foo.mdb", "foo", password
Set rs = conn.Execute(cmd2)
Set rs = Server.CreateObject("ADODB.recordset")
rs.Open cmd1, conn
End Sub
%>
首先对这段代码表示为一种三地址码的形式，例如第 3 行可以表示为：
824
5.5 污点分析
a = "SELECT companyname FROM "
b = "hello"
param0 Request
param1 b
callCookies
return c
sql1 = a & c
解析完毕后，需要对程序代码进行控制流分析，这里只包含了一个调用关系（第 5
行）。
接下来，需要识别程序中的 Source 点和 Sink 点以及初始的被污染的数据。
具体的分析过程如下：
调用 Request.Cookies("hello") 的返回结果是污染的，所以变量 sql1 也是污染
的。
调用 Request.QueryString("foo") 的返回结果 sql2 是污染的。
函数 MySqlStuff 被调用，它的参数 sql1，sql2 都是污染的。分了分析函数的
处理过程，根据第 6 行函数的声明，标记其参数 cmd1，cmd2 是污染的。
第 10 行是程序的 Sink 点，函数 conn.Execute 执行 SQL 操作，其参数 cmd2
是污染的，进而发现污染数据从 Source 点传播到 Sink 点。因此，认为程序存
在 SQL 注入漏洞
动态污点分析
动态污点分析的基本原理
动态污点分析是在程序运行的基础上，对数据流或控制流进行监控，从而实现对数
据在内存中的显式传播、数据误用等进行跟踪和检测。动态污点分析与静态污点分
析的唯一区别在于静态污点分析技术在检测时并不真正运行程序，而是通过模拟程
序的执行过程来传播污点标记，而动态污点分析技术需要运行程序，同时实时传播
并检测污点标记。
动态污点分析技术可分为三个部分：
污点数据标记：程序攻击面是程序接受输入数据的接口集，一般由程序入口点
和外部函数调用组成。在污点分析中，来自外部的输入数据会被标记为污点数
825
5.5 污点分析
据。根据输入数据来源的不同，可分为三类：网络输入、文件输入和输入设备
输入。
污点动态跟踪：在污点数据标记的基础上，对进程进行指令粒度的动态跟踪分
析，分析每一条指令的效果，直至覆盖整个程序的运行过程，跟踪数据流的传
播。
动态污点跟踪通常基于以下三种机制
动态代码插桩：可以跟踪单个进程的污点数据流动，通过在被分析程
序中插入分析代码，跟踪污点信息流在进程中的流动方向。
全系统模拟：利用全系统模拟技术，分析模拟系统中每条指令的污点
信息扩散路径，可以跟踪污点数据在操作系统内的流动。
虚拟机监视器：通过在虚拟机监视器中增加分析污点信息流的功能，
跟踪污点数据在整个客户机中各个虚拟机之间的流动。
污点动态跟踪通常需要影子内存（shadow memory）来映射实际内存的污
染情况，从而记录内存区域和寄存器是否是被污染的。对每条语句进行分
析的过程中，污点跟踪攻击根据影子内存判断是否存在污点信息的传播，
从而对污点信息进行传播并将传播结果保存于影子内存中，进而追踪污点
数据的流向。
一般情况下，数据移动类和算数类指令都将造成显示的信息流传播。为了
跟踪污点数据的显示传播，需要在每个数据移动指令和算数指令执行前做
监控，当指令的结果被其中一个操作数污染后，把结果数据对应的影子内
存设置为一个指针，指向源污染点操作数指向的数据结构。
污点误用检查：在正确标记污点数据并对污点数据的传播进行实时跟踪后，就
需要对攻击做出正确的检测即检测污点数据是否有非法使用的情况。
动态污点分析的优缺点：
优点：误报率较低，检测结果的可信度较高。
缺点：
漏报率较高：由于程序动态运行时的代码覆盖率决定的。
平台相关性较高：特定的动态污点分析工具只能够解决在特定平台上运行
的程序。
资源消耗大：包括空间上和时间上。
动态污点分析的方法实现
污点数据标记
826
5.5 污点分析
污点数据通常主要是指软件系统所接受的外部输入数据，在计算机中，这些数据可
能以内存临时数据的形式存储，也可能以文件的形式存储。当程序需要使用这些数
据时，一般通过函数或系统调用来进行数据访问和处理，因此只需要对这些关键函
数进行监控，即可得到程序读取或输出了什么污点信息。另外对于网络输入，也需
要对网络操作函数进行监控。
识别出污点数据后，需要对污点进行标记。污点生命周期是指在该生命周期的时间
范围内，污点被定义为有效。污点生命周期开始于污点创建时刻，生成污点标记，
结束于污点删除时刻，清除污点标记。
污点创建
将来自于非可靠来源的数据分配给某寄存器或内存操作数时
将已经标记为污点的数据通过运算分配给某寄存器或内存操作数时
污点删除
将非污点数据指派给存放污点的寄存器或内存操作数时
将污点数据指派给存放污点的寄存器或内存地址时，此时会删除原污点，
并创建新污点
一些会清除污点痕迹的算数运算或逻辑运算操作时
污点动态跟踪
当污点数据从一个位置传递到另一个位置时，则认为产生了污点传播。污点传播规
则：
指令类型 传播规则 举例说明
拷贝或移动指令 T(a): lea eax,[ebp-0x2a]
0x0804860c : push eax
0x0804860d : call 0x8048400 
...
0x0804862c : lea eax,[ebp-0x2a]
0x0804862f : push eax
0x08048630 : call 0x8048566 
程序调用 strncpy 函数的二进制代码如下：
829
5.5 污点分析
0x080485a1 : push DWORD PTR [ebp-0x2c]
0x080485a4 : call 0x8048420 
0x080485a9 : add esp,0x10
0x080485ac : sub esp,0x4
0x080485af : push eax
0x080485b0 : push DWORD PTR [ebp-0x2c]
0x080485b3 : lea eax,[ebp-0x1b]
0x080485b6 : push eax
0x080485b7 : call 0x8048440 
首先，在扫描该程序的二进制代码时，能够扫描到 call  ，该函数会
读入外部输入，即程序的攻击面。确定了攻击面后，我们将分析污染源数据并进行
标记，即将 [ebp-0x2a] 数组（即源程序中的source）标记为污点数据。程序继
续执行，该污染标记会随着该值的传播而一直传递。在进入 fun() 函数时，该污
染标记通过形参实参的映射传递到参数 str 上。然后运行到 Sink 点函数
strncpy() 。该函数的第二个参数即 str 和 第三个参数 strlen(str) 都是
污点数据。最后在执行 strncpy() 函数时，若设定了相应的漏洞规则（目标数
组小于源数组），则漏洞规则将被触发，检测出缓冲区溢出漏洞。
830
5.5.1 TaintCheck
5.5.1 TaintCheck
831
5.6 LLVM
5.6 LLVM
简介
初步使用
参考资料
简介
LLVM 是当今炙手可热的编译器基础框架。它从一开始就采用了模块化设计的思
想，使得每一个编译阶段都被独立出来，形成了一系列的库。LLVM 使用面向对象
的 C++ 语言开发，为编译器开发人员提供了易用而丰富的编程接口和 API。
初步使用
首先我们通过著名的 helloWorld 来熟悉下 LLVM 的使用。
#include 
int main()
{
printf("hello, world\n");
}
将 C 源码转换成 LLVM 汇编码：
$ clang -emit-llvm -S hello.c -o hello.ll
生成的 LLVM IR 如下：
; ModuleID = 'hello.c'
source_filename = "hello.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"
@.str = private unnamed_addr constant [14 x i8] c"hello, world\0
832
5.6 LLVM
A\00", align 1
; Function Attrs: noinline nounwind optnone sspstrong uwtable
define i32 @main() #0 {
%1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([
14 x i8], [14 x i8]* @.str, i32 0, i32 0))
ret i32 0
}
declare i32 @printf(i8*, ...) #1
attributes #0 = { noinline nounwind optnone sspstrong uwtable "c
orrectly-rounded-divide-sqrt-fp-math"="false" "disable-tail-call
s"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"=
"true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false
" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-
zeros-fp-math"="false" "no-trapping-math"="false" "stack-protect
or-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fx
sr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-floa
t"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false
" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-
frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-
infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros
-fp-math"="false" "no-trapping-math"="false" "stack-protector-bu
ffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+m
mx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="f
alse" }
!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}
!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 5.0.1 (tags/RELEASE_501/final)"}
833
5.6 LLVM
该过程从词法分析开始，将 C 源码分解成 token 流，然后传递给语法分析器，语法
分析器在 CFG（上下文无关文法）的指导下将 token 流组织成 AST（抽象语法
树），接下来进行语义分析，检查语义正确性，最后生成 IR。
LLVM bitcode 有两部分组成：位流，以及将 LLVM IR 编码成位流的编码格式。使
用汇编器 llvm-as 将 LLVM IR 转换成 bitcode：
$ llvm-as hello.ll -o hello.bc
结果如下：
$ file hello.bc
hello.bc: LLVM IR bitcode
$ xxd -g1 hello.bc | head -n5
00000000: 42 43 c0 de 35 14 00 00 05 00 00 00 62 0c 30 24 BC..5
.......b.0$
00000010: 49 59 be 66 ee d3 7e 2d 44 01 32 05 00 00 00 00 IY.f.
.~-D.2.....
00000020: 21 0c 00 00 4d 02 00 00 0b 02 21 00 02 00 00 00 !...M
.....!.....
00000030: 13 00 00 00 07 81 23 91 41 c8 04 49 06 10 32 39 .....
.#.A..I..29
00000040: 92 01 84 0c 25 05 08 19 1e 04 8b 62 80 10 45 02 ....%
......b..E.
反过来将 bitcode 转回 LLVM IR 也是可以的，使用反汇编器 llvm-dis：
$ llvm-dis hello.bc -o hello.ll
其实 LLVM 可以利用工具 lli 的即时编译器（JIT）直接执行 bitcode 格式的程序：
$ lli hello.bc
hello, world
接下来使用静态编译器 llc 命令可以将 bitcode 编译为特定架构的汇编语言：
834
5.6 LLVM
$ llc -march=x86-64 hello.bc -o hello.s
也可以使用 clang 来生成，结果是一样的：
$ clang -S hello.bc -o hello.s -fomit-frame-pointer
结果如下：
835
5.6 LLVM
.text