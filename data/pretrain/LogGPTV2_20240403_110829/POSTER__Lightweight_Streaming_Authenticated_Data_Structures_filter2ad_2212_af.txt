### Generating and Testing the Performance of the Scheme

First, we need to determine the value of \(\mu\) through experiments and analysis. Table 4 compares the redundancy, number of extensions, and the time spent on appending and verifying data for different values of \(\mu\). As \(\mu\) increases, the redundancy also increases, but the number of extensions required to reach a certain scale decreases. In an extreme case, if \(\mu\) is set such that each append operation requires an extension, there is no redundancy, but the complexity of the append operation increases, leading to longer data appending times. Another special case is when the scale is extended by double, which increases redundancy but does not significantly increase the complexity of the append operations.

From Table 4, it is evident that different \(\mu\) values do not have a significant impact on the average time for appending and verifying data. After extensive experiments, we found that setting \(\mu = 8\) results in slightly lower average times for appending and verifying compared to other values. However, due to different machine configurations and potential errors, the optimal \(\mu\) value may vary. Considering factors such as redundancy, the number of extensions required, and the average time for appending and verifying, we set \(\mu = 8\) for the follow-up experiments in this paper.

### Comparison with Other Schemes

We compared DFHMT with FHMT (constructed based on FHMT and DCAT) and SADS-DCAT through experiments. During the initialization phase, the tree structure of DFHMT is empty, and no nodes are generated. When data cannot be appended, the scale of the tree is dynamically extended. Generally, when the scale of the tree in DFHMT is extended to match that of FHMT, the total number of nodes generated is the same. However, FHMT determines the tree depth at the beginning and generates nodes in advance. Therefore, from the total number of nodes, there is little difference between DFHMT and FHMT. However, during querying and verifying, the average authentication path in DFHMT is shorter, reducing space and communication overhead and improving verification efficiency.

When appending data, DFHMT updates nodes layer by layer from the leaf node to the root node, similar to the FHMT scheme. For SADS-DCAT, only the nodes up to the unique chameleon hash node corresponding to the leaf node are updated, rather than updating all the way to the root node. This means SADS-DCAT updates fewer nodes than the tree depth. However, DFHMT uses simple numerical multiplication and addition instead of complex hash operations, making the comparison of efficiency more nuanced. DFHMT appends a new node with just a few multiplication and addition operations, whereas SADS-DCAT, despite updating fewer nodes, requires more time-consuming hash operations.

### Lightweight Operations

The lightweight nature of DFHMT primarily refers to the client-side operations. DFHMT transfers almost all calculation tasks to the server, significantly reducing the burden on the client. Figure 12(a) shows the changes in the average time for appending data for the three SADS methods. Both DFHMT and FHMT have much lower average times for client-side data appending compared to SADS-DCAT, with the times being in microseconds and almost negligible. Since DFHMT clients perform simple numerical operations, the performance is better, as shown in Figure 12(b).

DFHMT spends most of the time on server-side operations when appending data. Figure 13 shows the changes in the average time with the amount of data. For DFHMT, the average time increases with the amount of data. When the amount of data is small, the average time for DFHMT is much less than that of FHMT because DFHMT does not predetermine the tree depth. However, the average time for DFHMT is more than that of SADS-DCAT due to the FHE-based operations on the server.

### Authentication Path and Verification

The authentication paths for DFHMT and SADS-DCAT are similar during querying and verifying. Both schemes use the root node of the smallest subtree for verification, resulting in shorter authentication paths compared to FHMT, as shown in Figure 14. The average verification time for DFHMT is less than that of FHMT, as shown in Figure 15. Besides multiplication and addition, DFHMT also performs FHE decryption, which is the most time-consuming operation. SADS-DCAT uses complex hash operations, but due to the low efficiency of current FHE algorithms, the average verification time for DFHMT is higher than that of SADS-DCAT. DFHMT supports range queries and verification, with the average time for range verification shown in Figure 16. The size of the range has little effect on the average verification time, and range verification does not significantly increase the time compared to single-element verification.

### Conclusion

Through the above analysis, we can conclude that the DFHMT scheme can dynamically extend its scale and outperforms FHMT in terms of appending, querying, and verifying. Compared to SADS-DCAT, although the number of updated nodes increases, the use of simple numerical operations greatly improves the efficiency for resource-limited clients.

### Acknowledgements

The authors would like to thank the reviewers for their detailed reviews and constructive comments, which have helped improve the quality of this paper. This work was supported by the National Natural Science Foundation of China (No. 61772127), the program for Talents of Higher Education in Liaoning province (No. LJQ2015081), the Doctoral Science Fund of Liaoning province (No. 201601166), the Natural Science Foundation of Guangdong Province for Distinguished Young Scholars (No. 2014A030306020), Guangzhou scholars project for universities of Guangzhou (No. 1201561613), and the Science and Technology Planning Project of Guangdong Province (No. 2015B010129015).

### References

[References listed here as in the original text]

This version of the text is more structured, clear, and professional, with improved coherence and readability.