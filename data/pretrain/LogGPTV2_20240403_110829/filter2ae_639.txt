# 【漏洞分析】CVE-2017-4971：Spring WebFlow 远程代码执行漏洞分析

## 译文声明
本文是翻译文章，原文来源为threathunter.org。具体内容表达及含义以原文为准。

## 前言
Spring框架中的严重漏洞相对较少。此前较为严重的漏洞之一涉及JavaBean的自动绑定功能，该功能允许攻击者控制类属性，从而利用某些特性执行任意代码。然而，这个漏洞并不总是可以被触发。随着Spring框架的发展，尤其是引入了SpringEL作为默认表达式解析方式后，类似OGNL的表达式可能会带来安全问题。本次漏洞正是由于Spring WebFlow的数据绑定问题导致的表达式注入，最终使得攻击者能够执行任意代码。

## 漏洞简介
该漏洞于2017年6月初提交，官方并未提供详细信息。通过对比官方描述和补丁，我们可以推断出漏洞原因在于Spring WebFlow在Model的数据绑定过程中未明确指定相关model的具体属性，从而允许恶意用户通过表单提交恶意表达式并执行。此漏洞的利用除了受版本限制外，还需要满足两个前置条件，其中一个为默认配置，另一个则与编码规范有关。如果这两个条件都得到满足，则可直接实现远程代码执行（RCE）。

## 漏洞分析
起初我对如何触发该漏洞并不清楚。为了更好地理解这个问题，建议先了解Spring WebFlow的基础知识。根据补丁文件，我们发现`addEmptyValueMapping(DefaultMapper mapper, String field, Object model)`方法内部使用的表达式解析实现类已被替换为`BeanWrapperExpressionParser`。接下来我们将重点放在`addDefaultMappings`和`addModelBindings`两个函数上，因为它们都会调用存在缺陷的方法。

### 关键函数分析
- `addDefaultMappings(DefaultMapper mapper, Set parameterNames, Object model)`
- `addModelBindings(DefaultMapper mapper, Set parameterNames, Object model)`

其中，`addModelBindings`包含一个循环结构，其关键在于`binderConfiguration`变量所控制的值，而这些值来源于webflow-*.xml文件中的配置项。因此，对于普通用户来说，很难通过修改配置来改变这一行为。相比之下，`addDefaultMappings`函数为我们提供了更多控制机会，尤其是在`binderConfiguration`为空的情况下。

### 触发条件总结
- 在webflow配置文件中view-state节点指定了model属性但未指定绑定参数。
- MvcViewFactoryCreator类中useSpringBeanBinding属性保持默认值false不变。
- 构造的恶意参数名称需以_开头。

## 漏洞利用
本例基于Spring Webflow官方示例项目进行测试。首先需要确保`WebFlowConfig.mvcViewFactoryCreator()`方法中的`factoryCreator.setUseSpringBeanBinding(false);`设置正确。然后，在reviewBooking流程中点击确认按钮，并通过抓包工具添加恶意参数即可完成攻击。

### 测试payload
```
&_T(org.springframework.web.context.request.RequestContextHolder).getRequestAttributes().getResponse().addHeader("vulnerable","True").aaa=n1nty
```

如果响应头中出现名为"vulnerable"的字段，则表明系统存在此漏洞。

## 参考资料
[1] [原始文章链接]
[2] [其他参考资料链接]

请注意，以上内容仅为技术交流之用，请勿用于非法目的。