(b) shows what can go wrong if one gets the order back-
wards.
a process permanently drops privilege, since such an ac-
tion usually precedes operations that, if executed with
privilege, may compromise the system.
Be aware that the Linux-speciﬁc setfsuid system call re-
turns the previous fsuid from before the call and does not
return any error message to the caller on failure. This is
one motivation for our next guideline.
Verifying User IDs However, checking return codes
may be insufﬁcient for uid-setting system calls. For ex-
ample, in Linux and Solaris, depending on the effective
uid, setuid(newuid) may either (1) set all three user IDs
(if the effective uid is zero), or (2) set only the effective
uid (if it is non-zero), but the system call returns the same
success code in both cases. The return code does not in-
dicate to the process which case has happened, and thus
checking return codes is not enough to guarantee suc-
cessful completion of the uid operation in some cases.
Moreover, checking the return code is infeasible for the
setfsuid call since it does not return any error message on
failure.
Therefore, after each uid-setting system call, a program
should verify that each of its user IDs are as expected. A
process may call getresuid to check all three user IDs if it
is available, as in Linux and FreeBSD, or use the /proc
ﬁlesystem on Solaris. Otherwise, the process may call
getuid and geteuid to check the real uid and effective uid,
if none of these are available. In Linux, a process must
ruid=100, euid=suid=0rgid=200, egid=sgid=0ruid=100, euid=suid=0rgid=egid=sgid=200ruid=euid=suid=100rgid=egid=sgid=200setgid(getgid())setuid(getuid())ruid=100, euid=suid=0rgid=200, egid=sgid=0ruid=euid=suid=100rgid=200, egid=sgid=0ruid=euid=suid=100rgid=egid=200, sgid=0setuid(getuid())setgid(getgid())int drop_priv_temp(uid_t new_uid)
{
if (setresuid(-1, new_uid, geteuid()) < 0)
return ERROR_SYSCALL;
if (geteuid() != new_uid)
return ERROR_SYSCALL;
return 0;
}
int drop_priv_perm(uid_t new_uid)
{
uid_t ruid, euid, suid;
if (setresuid(new_uid, new_uid, new_uid) < 0)
return ERROR_SYSCALL;
if (getresuid(&ruid, &euid, &suid) < 0)
return ERROR_SYSCALL;
if (ruid != new_uid || euid != new_uid ||
suid != new_uid)
return ERROR_SYSCALL;
return 0;
}
int restore_priv()
{
int ruid, euid, suid;
if (getresuid(&ruid, &euid, &suid) < 0)
return ERROR_SYSCALL;
if (setresuid(-1, suid, -1) < 0)
return ERROR_SYSCALL;
if (geteuid() != suid)
return ERROR_SYSCALL;
return 0;
}
Figure 14: A possible implementation of the high-level
API for systems with setresuid.
To use this implementation, an application must meet the
following requirements:
• When the process starts, its effective uid contains
the privileged user ID. This is true in most circum-
stances. When a process is run by a privileged user,
all three user IDs contain the privileged user ID. If
the process is run as a privileged user, i.e., its exe-
cutable is setuid’ed to the privileged user and is run
by an unprivileged user, both the effective uid and
saved uid of the process contain the privilege user
ID.
• If the privileged user ID is not zero, then the unpriv-
ileged user ID must be stored in the real uid when
the process starts. This requirement enables the pro-
cess to replace the privileged user ID in the effective
uid with the unprivileged user ID in drop priv temp
and drop priv perm. This is the case when a non-
root user executes an executable that is setuid’ed
to another non-root user. On the other hand, if the
privileged user ID is zero, then there is no such re-
quirement, since the process can set its user IDs to
Figure 13: An FSA showing the behavior of a process
when calling the functions of the new API.
• Drop privilege permanently, so that it can never be
restored.
• Restore privilege.
We propose a new API that offers the ability to perform
each of these tasks directly and easily. The API contains
three functions:
• drop priv temp(new uid): Drop privilege temporar-
ily. Move the privileged user ID from the effective
uid to the saved uid. Assign new uid to the effective
uid.
• drop priv perm(new uid): Drop privilege perma-
nently. Assign new uid to all the real uid, effective
uid, and saved uid.
• restore priv: Restore privilege. Copy the privileged
user ID from the saved uid to the effective uid.
By raising the level of abstraction, we free programmers
to think more about their desired security policy and less
about the mechanism of implementing this policy. Fig-
ure 13 illustrates the action of these functions pictorially
with a simple state diagram.
8.2.2
Implementation
We implement the new API as wrapper functions to the
uid-setting system calls. The implementation uses setre-
suid if available since it has the clearest semantics and
it is able to set each of the user IDs independently, as
shown in Figure 14. If setresuid or its equivalent is not
available, the implementation uses seteuid and setreuid,
as shown in Figure 15.
privunpriv_tempunpriv_permrestore_priv()drop_priv_temp()drop_priv_perm()  uid_t priv_uid;
int drop_priv_temp(uid_t new_uid)
{
int old_euid = geteuid();
// copy euid to suid
if (setreuid(getuid(), old_euid) < 0)
return ERROR_SYSCALL;
// set euid as new_uid
if (seteuid(new_uid) < 0)
return ERROR_SYSCALL;
if (geteuid() != new_uid)
return ERROR_SYSCALL;
priv_uid = old_euid;
return 0;
}
int drop_priv_perm(uid_t new_uid)
{
uid_t suid;
if (setreuid(new_uid, new_uid) < 0)
return ERROR_SYSCALL;
// OS specific way of reading suid
suid = read_suid_from_proc_filesystem();
if (getuid() != new_uid ||
geteuid() != new_uid ||
suid != new_uid)
return ERROR_SYSCALL;
return 0;
}
int restore_priv()
{
if (seteuid(priv_uid) < 0)
return ERROR_SYSCALL;
if (geteuid() != priv_uid)
return ERROR_SYSCALL;
return 0;
}
Figure 15: A possible implementation of the high-level
API for systems without setresuid.
arbitrary values.
• The process does not make any uid-setting system
calls that change any of the three user IDs. Such a
call may cause the process to enter a state not cov-
ered by the FSA in Figure 13, on which the high-
level API and the implementation are based.
• It does the right thing even in cases where root is not
involved, i.e., where the privileged user ID is not the
superuser.
We can extend this basic implementation to include
stronger safeguards against programming errors or OS
inconsistency. To prevent a program from restoring a
wrong privilege, we can let the function restore priv take
a parameter and check that the parameter matches the
privilege stored in the saved user ID (Figure 14) or in the
variable priv uid (Figure 15). Another improvement is to
let the function drop priv perm verify that an attempt to
regain privilege will fail, as described in Section 8.1.3.
8.2.3 Evaluation
To evaluate the high-level API, we replaced every uid-
setting system call in OpenSSH 2.5.2 with functions
from the new API. OpenSSH contains ﬁfteen uid-setting
system calls in eight tasks. Of the eight tasks, four are
to drop privilege permanently, two are to drop privilege
temporarily, and two are to restore privilege. We are able
to implement all these tasks with the new API.
One known limitation of our API is that it does not ad-
dress group privileges. We leave this for future work.
9 Future Work
We plan to study how the uid-setting system calls affect
other properties of a process, such as the ability to receive
signals and to dump cores. We may also study how to
extend the formal models for multi-threaded programs.
Topics to investigate include in-kernel races and how the
user IDs are inherited during the creation of new threads
in different Unix systems.
The implementation has the following beneﬁcial proper-
ties:
10 Conclusion
• It does not affect the real uid.
• It guarantees that all transitions in Figure 13 suc-
ceed.
• It veriﬁes that the user IDs are as expected after each
uid-setting system call.
We have studied the proper usage of the uid-setting sys-
tem calls by two approaches. First, we documented the
semantics of the uid-setting system calls in three major
Unix systems (Linux, Solaris, and FreeBSD) and identi-
ﬁed their differences. We then showed how to formalize
this problem using formal methods, and we proposed a
new algorithm for constructing a formal model of the se-
mantics of the uid-setting system calls. Using the result-
ing formal model, we identiﬁed semantic differences of
the uid-setting system calls among Unix systems and dis-
covered inconsistency within an OS kernel. Finally, we
provided guidelines for proper usage of the uid-setting
system calls and proposed a high-level API for manag-
ing user IDs that is more comprehensible, usable, and
portable than the usual Unix API.
Acknowledgment
We thank Monica Chew, Solar Designer, Peter Gutmann,
Robert Johnson, Ben Liblit, Zhendong Su, Theodore
Ts’o, Wietse Venema, Michal Zalewski, and the anony-
mous reviewers for their valuable comments.
References
[1] Chris Torek and Casper H.S. Dik. Setuid mess. http:
//yarchive.net/comp/setuid_mess.html.
[2] Richard Stevens. Advanced Programming in the UNIX
Environment. Addison-Wesley Publishing Company,
1992.
[3] Matt Bishop. How to write a setuid program.
;login:,
12(1):5–11, 1987.
[4] Dennis M. Ritchie.
Protection of data ﬁle contents.
United States Patent #4,135,240. Available from http:
//www.uspto.gov.
[5] IEEE Standard 1003.1-1998: IEEE standard portable op-
erating system interface for computer environments. In-
stitute of Electrical and Electronics Engineers, 1988.
[6] http://www.kernel.org.
[7] http://www.sun.com/software/solaris/.
[8] http://www.freebsd.org.
[9] dm(8). 4.4 BSD System Manager’s Manual.
[10] Simon N. Foley.
Implementing Chinese walls in Unix.
Computers and Security Journal, 16(6):551–563, Decem-
ber 1997.
[11] Hao Chen, David Wagner, and Drew Dean. An infras-
tructure for examining security properties of software.
manuscript in preparation.
[12] http://www.sendmail.org/.
[13] Sendmail Inc. Sendmail workaround for linux capabilities
http://www.sendmail.org/sendmail.
bug.
8.10.1.LINUX-SECURITY.txt.
[14] Michal Zalewski. Multiple local sendmail vulnerabili-
ties. http://razor.bindview.com/publish/
advisories/adv_sm812.html.