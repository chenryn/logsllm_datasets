### 优化后的文本

**(b) 展示了如果操作顺序错误可能引发的问题。**

在系统中，一个进程应先执行需要特权的操作，然后再永久放弃这些特权。这是因为一旦放弃特权后，再尝试执行需要特权的操作可能会导致系统安全风险。

请注意，Linux 特有的 `setfsuid` 系统调用会返回调用前的文件系统用户 ID（fsuid），并且在失败时不会向调用者返回任何错误信息。这是我们接下来提出建议的一个动机。

**验证用户 ID**

然而，仅检查返回码对于设置用户 ID 的系统调用可能是不够的。例如，在 Linux 和 Solaris 中，根据有效用户 ID（euid）的不同，`setuid(newuid)` 可能会有两种不同的行为：
1. 如果 euid 为 0，则会设置所有三个用户 ID。
2. 如果 euid 不为 0，则只会设置有效用户 ID。

在这两种情况下，系统调用返回的成功代码是相同的，因此返回码无法明确指示具体发生了哪种情况。此外，由于 `setfsuid` 调用在失败时不返回任何错误信息，因此检查返回码在这种情况下也是不可行的。

因此，每次设置用户 ID 的系统调用之后，程序都应验证其用户 ID 是否符合预期。可以使用 `getresuid` 来检查所有三个用户 ID（如果可用的话，如在 Linux 和 FreeBSD 中）。否则，可以使用 `getuid` 和 `geteuid` 分别检查真实用户 ID 和有效用户 ID。

### 示例代码

以下是一个可能的实现示例，用于在支持 `setresuid` 的系统中实现高阶 API：

```c
int drop_priv_temp(uid_t new_uid) {
    if (setresuid(-1, new_uid, geteuid()) < 0)
        return ERROR_SYSCALL;
    if (geteuid() != new_uid)
        return ERROR_SYSCALL;
    return 0;
}

int drop_priv_perm(uid_t new_uid) {
    uid_t ruid, euid, suid;
    if (setresuid(new_uid, new_uid, new_uid) < 0)
        return ERROR_SYSCALL;
    if (getresuid(&ruid, &euid, &suid) < 0)
        return ERROR_SYSCALL;
    if (ruid != new_uid || euid != new_uid || suid != new_uid)
        return ERROR_SYSCALL;
    return 0;
}

int restore_priv() {
    int ruid, euid, suid;
    if (getresuid(&ruid, &euid, &suid) < 0)
        return ERROR_SYSCALL;
    if (setresuid(-1, suid, -1) < 0)
        return ERROR_SYSCALL;
    if (geteuid() != suid)
        return ERROR_SYSCALL;
    return 0;
}
```

### 使用要求

要使用此实现，应用程序必须满足以下要求：
- 进程启动时，其有效用户 ID 包含特权用户 ID。
- 如果特权用户 ID 不为 0，则未特权用户 ID 必须存储在真实用户 ID 中。
- 进程不应进行任何改变三个用户 ID 的系统调用。

### 扩展与改进

我们可以扩展这个基本实现，以包括更强的安全保障，防止编程错误或操作系统不一致性。例如，可以让 `restore_priv` 函数接受一个参数，并检查该参数是否与保存的用户 ID 匹配。另一个改进是让 `drop_priv_perm` 验证恢复特权的尝试是否会失败。

### 评估

为了评估高阶 API，我们将 OpenSSH 2.5.2 中的所有用户 ID 设置系统调用替换为新 API 中的函数。OpenSSH 包含 15 个用户 ID 设置系统调用，分布在 8 个任务中。通过新 API，我们能够实现所有这些任务。

### 未来工作

我们计划研究用户 ID 设置系统调用如何影响进程的其他属性，如接收信号和核心转储的能力。我们还可能研究如何扩展多线程程序的形式化模型。

### 结论

我们通过两种方法研究了用户 ID 设置系统调用的正确使用方式：首先记录了 Linux、Solaris 和 FreeBSD 三种主要 Unix 系统中用户 ID 设置系统调用的语义差异，然后提出了一个更易理解、可使用和可移植的高阶 API。

### 致谢

感谢 Monica Chew、Solar Designer、Peter Gutmann、Robert Johnson、Ben Liblit、Zhendong Su、Theodore Ts’o、Wietse Venema、Michal Zalewski 以及匿名评审员的宝贵意见。

### 参考文献

[1] Chris Torek and Casper H.S. Dik. Setuid mess. http://yarchive.net/comp/setuid_mess.html.
[2] Richard Stevens. Advanced Programming in the UNIX Environment. Addison-Wesley Publishing Company, 1992.
[3] Matt Bishop. How to write a setuid program. ;login:, 12(1):5–11, 1987.
[4] Dennis M. Ritchie. Protection of data file contents. United States Patent #4,135,240. Available from http://www.uspto.gov.
[5] IEEE Standard 1003.1-1998: IEEE standard portable operating system interface for computer environments. Institute of Electrical and Electronics Engineers, 1988.
[6] http://www.kernel.org.
[7] http://www.sun.com/software/solaris/.
[8] http://www.freebsd.org.
[9] dm(8). 4.4 BSD System Manager’s Manual.
[10] Simon N. Foley. Implementing Chinese walls in Unix. Computers and Security Journal, 16(6):551–563, December 1997.
[11] Hao Chen, David Wagner, and Drew Dean. An infrastructure for examining security properties of software. manuscript in preparation.
[12] http://www.sendmail.org/.
[13] Sendmail Inc. Sendmail workaround for linux capabilities bug. 8.10.1.LINUX-SECURITY.txt.
[14] Michal Zalewski. Multiple local sendmail vulnerabilities. http://razor.bindview.com/publish/advisories/adv_sm812.html.