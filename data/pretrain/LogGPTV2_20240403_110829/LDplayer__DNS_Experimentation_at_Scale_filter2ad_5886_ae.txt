raphy processing in TLS does not increase CPU usage noticeably
over UDP. CPU usage for all queries over TCP is even lower than
UDP with possible TCP optimizations in hardware. These results
are only possible in experiment, since there are no good models of
CPU consumption for DNS.
5.2.4 Query Latency. LDplayer experiments also allow us a first
look at the distribution of query latency. Prior modeling provided
only expected values (the mean), but experimentation allows un-
derstanding of tail performance.
Figure 15a shows query latency for DNS over TCP and TLS
with different RTTs. Query latency is asymmetric: the 5th and 25th
percentiles are similar, but performance in the tail varies greatly
(compare the 75%ile and 95%ile). This skew is captured in experi-
mentation, but not in modeling.
4GB8GB12GB16GB20GB24GB28GB0102030405060memory consumptiontime (minute)5s10s15s20s25s30s35s40sdashed lines: Allsolid lines: NSDall queries over TCPoriginal trace (3% queries over TCP) with 20s timeout020k40k60k80k100k120k0102030405060number of established TCP connectionstime (minute)5s10s15s20s25s30s35s40sall queries over TCPoriginal trace (3% over TCP) with 20s timeout050k100k150k200k0102030405060number of TCP connections in TIME_WAITtime (minute)5s10s15s20s25s30s35s40sall queries over TCPoriginal trace (3% over TCP) with 20s timeout4GB8GB12GB16GB20GB24GB28GB0102030405060memory consumptiontime (minute)5s10s15s20s25s30s35s40sdashed lines: Allsolid lines: NSDall queries over TLSoriginal trace (3% queries over TCP) with 20s timeout020k40k60k80k100k120k0102030405060number of established TCP connectionstime (minute)5s10s15s20s25s30s35s40sall queries over TLSoriginal trace (3% over TCP) with 20s timeout050k100k150k200k0102030405060number of TCP connections in TIME_WAITtime (minute)5s10s15s20s25s30s35s40sall queries over TLSoriginal trace (3% over TCP) with 20s timeoutIMC ’18, October 31-November 2, 2018, Boston, MA, USA
L. Zhu et al.
(a) Query latency over all clients. Figure shows medians, quartiles, 5th and
95th percentiles
(b) Query latency over non-busy clients that send less than 250 queries in
the trace
may always get reused. In B-Root-17b trace (Table 1), we find that
a tiny set (1%) of the clients contribute three quarters of the total
query load, while most (81%) of the clients are inactive (<10 queries
over the 20-minute trace (Figure 15c)), similar to the observations
in prior work [9].
We next evaluate the query latency for the group of non-busy
clients which send less than 250 queries in B-Root-17b trace. Fig-
ure 15b shows the statistics of query latency from a subset of 708 k
non-busy clients, covering 98% clients and 14% query load. The me-
dian query latency in TCP among those non-busy clients is about 2
RTT, much larger than the 1-RTT median latency in UDP, indicat-
ing that many queries are sent through fresh connections, while
connection reuse is still effective (25th percentile is 1 RTT for TCP).
Experimentation also helps reveal differences due to RTT. As
the RTT increases, the median query latency of TLS increases non-
linearly from 2 to 4 RTTs (red dashed line in Figure 15b), while not
captured in models.
We observe that some queries have large multi-time RTT latency
(75th percentile and up in Figure 15b), which is is unexpected since
a single TCP query would only require 2 RTTs and a TLS query
needs 4 RTTs. By examining packet traces, we see many server
reply TCP segments (possibly DNS messages) reassembled into a
large TCP message. Resembling may cause the large delay in DNS
over TCP, because waiting for all the packets. Another optimization
is to disable the Nagle algorithm on the server.
By contrast, latency with UDP is consistent regardless of RTT,
because UDP has no algorithms like Nagle trying to reduce packet
counts.
Evaluating these real-world performance interactions between
the DNS client and server was only possible in full trace-driven
experiments, since there no generic model for TCP and TLS query
processing in DNS servers. Our experiments shows the effect of
TCP connection reuse although the query latency of TCP and TLS is
still larger than UDP, providing much greater confidence to testbed
experiments with synthetic traffic and modeling [33]. Our use of
real traces and server software also showed an unexpected increase
in median query latency of TLS for large client RTTs.
(c) Cumulative distribution of query load per client in the original trace
Figure 15: Evaluation of query latency over all clients and
non-busy clients respectively, with 20-second TCP timeout
and different RTTs. Trace: B-Root-17b.
We demonstrate TCP connection reuse helps to reduce query
latency: median query latency in TCP is similar to UDP at small
20 ms RTT and is only about 15% slower than UDP at large 160 ms
RTT (Figure 15a), while if all connections were fresh, models predict
100% overhead for TCP due to the extra RTT in connection setup.
The small median latency differences between UDP and TCP/TLS
are weighted by queries from a few busy clients where a connection
6 RELATED WORK
DNS Replay Systems: Several other systems that replay DNS
traffic and simulate parts of DNS hierarchy. Wessels et al. simulate
the root, TLD and SLD servers with three computers to study the
caching effects of different resolvers on the query load of upper
hierarchy [31]. Yu et al. build a similar system with multiple TLD
servers hosting one TLD (.com), to understand authority servers
selections of different resolvers [32] . Ager et al. set up a testbed
simulating DNS hierarchy to study DNSSEC overhead [3]. DNS-
OARC develops a DNS traffic replay tool [11, 12] to test server
load.
Our system differs from these in scale, speed, and flexibility.
Each of these systems host each zone on a different name server,
so they cannot scale to thousands of zones. They also often make
modifications to the zones (dropping and modifying NS records), to
make the routing work and obtain the correct answers from servers.
We instead use proxies to allow all zones to be provided from one
name server, and to provide a query sequence that matches real
 0 100 200 300 400 500 600 700 0 20 40 60 80 100 120 140 160 180query latency (milliseconds)RTT (milliseconds)original trace (3% TCP)all queries over TCPall queries over TLS 0 200 400 600 800 1000 1200 1400 1600 1800 2000 0 20 40 60 80 100 120 140 160 180query latency (milliseconds)RTT (milliseconds)original trace (3% TCP)all queries over TCPall queries over TLS 0 0.2 0.4 0.6 0.8 1 1 10 100 1000 10000 100000 1x106CDFnumber of queries from each IP (log scale)DNS Experimentation at Scale
IMC ’18, October 31-November 2, 2018, Boston, MA, USA
DNS. In addition, these systems do not carefully track timing. (For
example, the Ager et al. system uses batch-mode dig and so can
handle only light loads.) Our client system replays DNS queries
with correct timing, reproducing the traffic pattern accurately. Fi-
nally, prior systems are designed to recreate today’s protocol; we
instead include the ability to project a current trace through future
protocol options, such as replaying UDP queries as TCP with preset
connection timeout.
Traffic Generators: Several traffic generators can create DNS [14,
22]. Like these tools, our query replay system can also generate a
stream of DNS packets with specified parameters. However, these
tools are not specific for DNS; they provide only simple replay
or generation. Our system focuses on DNS protocol and provides
a generic DNS experimentation platform. Our system can replay
queries with accurate timing, and mutate queries to test what-if
scenarios.
Network Replay Tools: Several tools replay general network
traces [16, 21, 29]. While these tools can replay DNS trace with
timing given in the trace, our replay-client system simulates the
DNS query semantics, allowing us to replay real-world queries
with different variations (such as if all used TCP). Rather than just
replaying each packet in the trace mechanically, our system allows
exploration of future DNS design options. Other tools replay HTTP
traces with accurate timing [2, 10, 23]. Our system is specifically
designed for DNS, and takes steps to emulate the DNS hierarchy
on a single instance of DNS server.
DNS Studies: There are studies that replay DNS queries to eval-
uate the performance of DNS applications [7, 19, 26]. Our replay-
client system supports analysis like these studies, but it provides a
more flexible platform that also enables new studies at high query
rates with protocol variants. The focus of our system is accurate
trace replay, while DNS Flagger can replay trace at faster rates [7].
We would like to compare the accuracy of our approach to these
prior systems, but they do not have published performance results
on timing accuracy. Other studies improve web performance by
using customized DNS proxy [25]. We also use proxies in our replay
system, but our focus is to provide a query sequence that matches
real DNS.
To the best of our knowledge, ours is the only experimental DNS
system that can replay DNS trace with original zone files, uses
distributed clients to handle large query rate and simulate different
query sources, and lets us vary protocols.
7 CONCLUSION
This paper has described LDplayer, a system that supports trace-
driven DNS experiments. This replay system is efficient (87k queries/s
per core) and able to reproduce precise query timing, interarrivals,
and rates (§4). We have used it to replay full B-Root traces, and are
currently evaluating replays of recursive DNS traces with multiple
levels of the DNS hierarchy.
We have used our system to evaluate alternative DNS scenar-
ios, such as where all queries use DNSSEC, or all queries use TCP.
Our system is the first to make at-scale experiments of these types
possible, and experiments with TCP confirm that memory and la-
tency is good (as predicted by modeling), but highlight performance
variation in latency due to implementation details not captured in
models. In addition, experimental confirmation of complex systems
factors such as memory usage are critical to gain confidence that
an all-TCP DNS is feasible on current server-class hardware.
Acknowledgments: Research by Liang Zhu and John Heidemann in
this paper is partially sponsored by the Department of Homeland Secu-
rity (DHS) Science and Technology Directorate, HSARPA, Cyber Security
Division, BAA 11-01-RIKA and Air Force Research Laboratory, Informa-
tion Directorate under agreement number FA8750-12-2-0344, and contract
number D08PC75599. The U.S. Government is authorized to make reprints
for Governmental purposes notwithstanding any copyright.The views con-
tained herein are those of the authors and do not necessarily represent those
of DHS or the U.S. Government.
REFERENCES
[1] [n. d.]. Split-horizon DNS. https://en.wikipedia.org/wiki/Split-horizon_DNS.
[2] [n. d.]. Telerik Fiddler. http://www.telerik.com/fiddler/.
[3] B. Ager, H. Dreger, and A. Feldmann. 2006. Predicting the DNSSEC overhead
using DNS traces. In Annual Conference on Information Sciences and Systems.
1484–1489. https://doi.org/10.1109/CISS.2006.286699
[4] R. Arends, R. Austein, M. Larson, D. Massey, and S. Rose. 2005. DNS Security
Introduction and Requirements. RFC 4033 (Proposed Standard). http://www.ietf.
org/rfc/rfc4033.txt Updated by RFCs 6014, 6840.
[5] Terry Benzel. 2011. The Science of Cyber Security Experimentation: The
DETER Project. In Proceedings of the 27th Annual Computer Security Appli-
cations Conference (ACSAC ’11). ACM, New York, NY, USA, 137–148. https:
//doi.org/10.1145/2076732.2076752
[6] S. Bortzmeyer. 2015. DNS privacy considerations. RFC 7626. https://doi.org/10.
[7] J. Brustoloni, N. Farnan, R. Villamarin-Salomon, and D. Kyle. 2009. Efficient
Detection of Bots in Subscribers’ Computers. In 2009 IEEE International Conference
on Communications. 1–6. https://doi.org/10.1109/ICC.2009.5198970
Internet Transparency. RFC 2775 (Proposed Standard).
http://www.ietf.org/rfc/rfc2775.txt
[8] B. Carpenter. 2000.
17487/RFC7626
[9] Sebastian Castro, Duane Wessels, Marina Fomenkov, and Kimberly Claffy. 2008.
A Day at the Root of the Internet. SIGCOMM Comput. Commun. Rev. 38, 5 (Sept.
2008), 41–46. https://doi.org/10.1145/1452335.1452341
https://github.com/chromium/
[10] chromium. [n. d.].
web-page-replay.
web-page-replay/.
[11] DNS-OARC. [n. d.]. dnsjit. https://github.com/DNS-OARC/dnsjit.
[12] DNS-OARC. [n. d.]. drool. https://github.com/DNS-OARC/drool.
[13] DNS-OARC. 2017. Day In The Life of the Internet (DITL) 2017. https://www.
dns-oarc.net/oarc/data/ditl/2017. https://www.dns-oarc.net/oarc/data/ditl/2017
[14] Herbert Haas. [n. d.]. Mausezahn. http://netsniff-ng.org/.
[15] John Heidemann. 1997. Performance Interactions Between P-HTTP and TCP
Implementations. SIGCOMM Comput. Commun. Rev. 27, 2 (April 1997), 65–73.
https://doi.org/10.1145/263876.263886
[16] Addy Yeow Chin Heng. [n. d.]. Bit-Twist. http://bittwist.sourceforge.net/.
[17] P. Hoffman and J. Schlyter. 2012. The DNS-Based Authentication of Named
Entities (DANE) Transport Layer Security (TLS) Protocol: TLSA. RFC 6698
(Proposed Standard). http://www.ietf.org/rfc/rfc6698.txt Updated by RFCs 7218,
7671.
[18] Z. Hu, L. Zhu, J. Heidemann, A. Mankin, D. Wessels, and P. Hoffman. 2016.
Specification for DNS over Transport Layer Security (TLS). RFC 7858 (Proposed
Standard). http://www.ietf.org/rfc/rfc7858.txt
[19] Ahmed Khurshid, Firat Kiyak, and Matthew Caesar. 2011. Improving Robustness
of DNS to Software Vulnerabilities. In Proceedings of the 27th Annual Computer
Security Applications Conference (ACSAC ’11). ACM, New York, NY, USA, 177–186.
https://doi.org/10.1145/2076732.2076758
[20] C. Lewis and M. Sergeant. 2012. Overview of Best Email DNS-Based List (DNSBL)
Operational Practices. RFC 6471 (Informational). http://www.ietf.org/rfc/rfc6471.
txt
[21] Andreas Loef and Yuwei Wang. [n. d.]. libtrace tool: tracereplay. http://www.
wand.net.nz/trac/libtrace/wiki/TraceReplay.
[22] Jeff Nathan. [n. d.]. nemesis. http://nemesis.sourceforge.net/.
[23] Ravi Netravali, Anirudh Sivaraman, Keith Winstein, Somak Das, Ameesh Goyal,
and Hari Balakrishnan. 2014. Mahimahi: A Lightweight Toolkit for Reproducible
Web Measurement. SIGCOMM Comput. Commun. Rev. 44, 4 (Aug. 2014), 129–130.
https://doi.org/10.1145/2740070.2631455
[24] Eric Osterweil, Michael Ryan, Dan Massey, and Lixia Zhang. 2008. Quantifying
the Operational Status of the DNSSEC Deployment. In Proceedings of the 8th
ACM SIGCOMM Conference on Internet Measurement (IMC ’08). ACM, New York,
NY, USA, 231–242. https://doi.org/10.1145/1452520.1452548
IMC ’18, October 31-November 2, 2018, Boston, MA, USA
L. Zhu et al.
[25] John S. Otto, Mario A. Sánchez, John P. Rula, and Fabián E. Bustamante. 2012.
Content Delivery and the Natural Evolution of DNS: Remote Dns Trends, Per-
formance Issues and Alternative Solutions. In Proceedings of the 2012 Inter-
net Measurement Conference (IMC ’12). ACM, New York, NY, USA, 523–536.
https://doi.org/10.1145/2398776.2398831
[26] KyoungSoo Park, Vivek S. Pai, Larry Peterson, and Zhe Wang. 2004. CoDNS:
Improving DNS Performance and Reliability via Cooperative Lookups. In Pro-
ceedings of the 6th Conference on Symposium on Opearting Systems Design &
Implementation - Volume 6 (OSDI’04). USENIX Association, Berkeley, CA, USA,
14–14. http://dl.acm.org/citation.cfm?id=1251254.1251268
[27] Sinodun. [n. d.]. DNS over TLS patch for nsd-4.1.0. https://portal.sinodun.
com/stash/projects/TDNS/repos/dns-over-tls_patches/browse/nsd-4.1.0_
dns-over-tls.patch.
[28] Ao-Jan Su, David R. Choffnes, Aleksandar Kuzmanovic, and Fabián E. Bustamante.
2006. Drafting Behind Akamai (Travelocity-based Detouring). In Proceedings of
the 2006 Conference on Applications, Technologies, Architectures, and Protocols for
Computer Communications (SIGCOMM ’06). ACM, New York, NY, USA, 435–446.
https://doi.org/10.1145/1159913.1159962
[29] Aaron Turner and Fred Klassen. [n. d.]. Tcpreplay. http://tcpreplay.appneta.com/.
[30] Duane Wessels. 2016. Increasing the Zone Signing Key Size for the Root Zone.
In RIPE 72. https://ripe72.ripe.net/presentations/168-verisign-zsk-change.pdf
[31] D. Wessels, M. Fomenkov, N. Brownlee, and k. claffy. 2004. Measurements
and Laboratory Simulations of the Upper DNS Hierarchy. In Passive and Active
Network Measurement Workshop (PAM). PAM 2004, Antibes Juan-les-Pins, France,
147–157.
[32] Yingdi Yu, Duane Wessels, Matt Larson, and Lixia Zhang. 2012. Authority Server
Selection in DNS Caching Resolvers. SIGCOMM Comput. Commun. Rev. 42, 2
(March 2012), 80–86. https://doi.org/10.1145/2185376.2185387
[33] L. Zhu, Z. Hu, J. Heidemann, D. Wessels, A. Mankin, and N. Somaiya. 2015.
Connection-Oriented DNS to Improve Privacy and Security. In 2015 IEEE Sympo-
sium on Security and Privacy. 171–186. https://doi.org/10.1109/SP.2015.18
[34] Liang Zhu, Duane Wessels, Allison Mankin, and John Heidemann. 2015. Mea-
suring DANE TLSA Deployment. In Proceedings of the 7th IEEE International
Workshop on Traffic Monitoring and Analaysis. Springer, Barcelona, Spain, 219–
232. https://doi.org/10.1007/978-3-319-17172-2_15