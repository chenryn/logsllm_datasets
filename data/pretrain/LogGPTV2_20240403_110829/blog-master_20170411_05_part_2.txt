 pg_catalog | arraycontsel            | double precision | internal, oid, internal, integer                          | normal  
 pg_catalog | arrayoverlap            | boolean          | anyarray, anyarray                                        | normal  
```  
16、复合类型  
```  
CREATE TYPE complex AS (  
    r       double precision,  
    i       double precision  
);  
CREATE TYPE inventory_item AS (  
    name            text,  
    supplier_id     integer,  
    price           numeric  
);  
```  
构造复合类型值  
```  
'("fuzzy dice",42,1.99)'  
which would be a valid value of the inventory_item type defined above. To make a field be NULL, write no characters at all in its position in the list.  
'("fuzzy dice",42,)'  
If you want an empty string rather than NULL, write double quotes:  
'("",42,)'  
```  
访问复合类型内的元素  
```  
SELECT item.name FROM on_hand WHERE item.price > 9.99;  
SELECT (on_hand.item).name FROM on_hand WHERE (on_hand.item).price > 9.99;  
SELECT (item).name FROM on_hand WHERE (item).price > 9.99;  
SELECT (myfunc(x)).* FROM some_table;  
SELECT (myfunc(x)).a, (myfunc(x)).b, (myfunc(x)).c FROM some_table;  
```  
插入、修改复合类型的值  
```  
INSERT INTO mytab (complex_col) VALUES((1.1,2.2));  
UPDATE mytab SET complex_col = ROW(1.1,2.2) WHERE ...;  
UPDATE mytab SET complex_col.r = (complex_col).r + 1 WHERE ...;  
INSERT INTO mytab (complex_col.r, complex_col.i) VALUES(1.1, 2.2);  
```  
17、范围类型  
目前支持的范围类型(用户可以自定义范围类型)  
```  
int4range — Range of integer  
int8range — Range of bigint  
numrange — Range of numeric  
tsrange — Range of timestamp without time zone  
tstzrange — Range of timestamp with time zone  
daterange — Range of date  
```  
例子  
```  
-- includes 3, does not include 7, and does include all points in between  
SELECT '[3,7)'::int4range;  
-- does not include either 3 or 7, but includes all points in between  
SELECT '(3,7)'::int4range;  
-- includes only the single point 4  
SELECT '[4,4]'::int4range;  
-- includes no points (and will be normalized to 'empty')  
SELECT '[4,4)'::int4range;  
```  
范围类型索引  
```  
CREATE INDEX reservation_idx ON reservation USING GIST (during);  
```  
范围类型约束1  
```  
CREATE TABLE reservation (  
    during tsrange,  
    EXCLUDE USING GIST (during WITH &&)  
);  
INSERT INTO reservation VALUES  
    ('[2010-01-01 11:30, 2010-01-01 15:00)');  
INSERT 0 1  
INSERT INTO reservation VALUES  
    ('[2010-01-01 14:45, 2010-01-01 15:45)');  
ERROR:  conflicting key value violates exclusion constraint "reservation_during_excl"  
DETAIL:  Key (during)=(["2010-01-01 14:45:00","2010-01-01 15:45:00")) conflicts  
with existing key (during)=(["2010-01-01 11:30:00","2010-01-01 15:00:00")).  
```  
范围类型约束2 (room相等 并且during相交时，排他)  
```  
CREATE EXTENSION btree_gist;  
CREATE TABLE room_reservation (  
    room text,  
    during tsrange,  
    EXCLUDE USING GIST (room WITH =, during WITH &&)  
);  
INSERT INTO room_reservation VALUES  
    ('123A', '[2010-01-01 14:00, 2010-01-01 15:00)');  
INSERT 0 1  
INSERT INTO room_reservation VALUES  
    ('123A', '[2010-01-01 14:30, 2010-01-01 15:30)');  
ERROR:  conflicting key value violates exclusion constraint "room_reservation_room_during_excl"  
DETAIL:  Key (room, during)=(123A, ["2010-01-01 14:30:00","2010-01-01 15:30:00")) conflicts  
with existing key (room, during)=(123A, ["2010-01-01 14:00:00","2010-01-01 15:00:00")).  
INSERT INTO room_reservation VALUES  
    ('123B', '[2010-01-01 14:30, 2010-01-01 15:30)');  
INSERT 0 1  
```  
18、对象ID  
数据库系统表，大多数使用OID关联  
Name|   References|     Description|    Value Example  
---|---|---|---  
oid|    any|    numeric object identifier|      564182  
regproc|        pg_proc|        function name|  sum  
regprocedure|   pg_proc|        function with argument types|   sum(int4)  
regoper|        pg_operator|    operator name|  +  
regoperator|    pg_operator|    operator with argument types|   *(integer,integer) or -(NONE,integer)  
regclass|       pg_class|       relation name|  pg_type  
regtype|        pg_type|        data type name| integer  
regrole|        pg_authid|      role name|      smithee  
regnamespace|   pg_namespace|   namespace name| pg_catalog  
regconfig|      pg_ts_config|   text search configuration|      english  
regdictionary|  pg_ts_dict|     text search dictionary| simple  
例子  
```  
postgres=# select oid::regclass from pg_class limit 10;  
              oid                 
--------------------------------  
 pg_type  
 pg_toast.pg_toast_187550  
 new_type  
 pg_toast.pg_toast_187550_index  
 test  
 pg_toast.pg_toast_187556  
 pg_toast.pg_toast_187556_index  
 tblaccount4  
 pg_toast.pg_toast_187783  
 pg_toast.pg_toast_187783_index  
(10 rows)  
```  
19、PG_LSN(WAL日志地址类型)  
wal是PostgreSQL数据库的重做日志, pg_lsn是wal的地址编码类型  
```  
postgres=# select pg_current_xlog_insert_location();  
 pg_current_xlog_insert_location   
---------------------------------  
 43/15D45F48  
(1 row)  
```  
20、虚拟类型(```any*```)  
虚拟类型，比如任意类型，任意数组，任意元素等。编写适合任意类型的动态函数时很有用。  
还有一些是用于特殊用途的虚拟类型（触发器，handler等）  
Name|   Description  
---|---  
any|    Indicates that a function accepts any input data type.  
anyelement|     Indicates that a function accepts any data type (see Section 36.2.5).  
anyarray|       Indicates that a function accepts any array data type (see Section 36.2.5).  
anynonarray|    Indicates that a function accepts any non-array data type (see Section 36.2.5).  
anyenum|        Indicates that a function accepts any enum data type (see Section 36.2.5 and Section 8.7).  
anyrange|       Indicates that a function accepts any range data type (see Section 36.2.5 and Section 8.17).  
cstring|        Indicates that a function accepts or returns a null-terminated C string.  
internal|       Indicates that a function accepts or returns a server-internal data type.  
language_handler|       A procedural language call handler is declared to return language_handler.  
fdw_handler|    A foreign-data wrapper handler is declared to return fdw_handler.  
index_am_handler|       An index access method handler is declared to return index_am_handler.  
tsm_handler|    A tablesample method handler is declared to return tsm_handler.  
record| Identifies a function taking or returning an unspecified row type.  
trigger|        A trigger function is declared to return trigger.  
event_trigger|  An event trigger function is declared to return event_trigger.  
pg_ddl_command| Identifies a representation of DDL commands that is available to event triggers.  
void|   Indicates that a function returns no value.  
opaque| An obsolete type name that formerly served all the above purposes.  
例子  
```  
postgres=# create or replace function f_test(anyarray) returns anyarray as $$  
select $1;  
$$ language sql strict;  
CREATE FUNCTION  
postgres=# select f_test(array[1,2,3]);  
 f_test    
---------  
 {1,2,3}  
(1 row)  
postgres=# select f_test(array['a','b']);  
 f_test   
--------  
 {a,b}  
(1 row)  
```  
### 2. 数据操作  
https://www.postgresql.org/docs/9.6/static/functions.html  
1、函数  
每一种类型，都有大量的函数，支持这种类型的计算。  
在PostgreSQL中，所有的操作符，索引接口，都是基于函数的，底层都有函数的支撑。  
2、操作符  
每一种类型，都有大量的操作符，支持这种类型的计算。  
每一个操作符，都是通过函数来实现计算的。  
如何创建操作符  
```  
postgres=# \h create operator  
Command:     CREATE OPERATOR  
Description: define a new operator  
Syntax:  
CREATE OPERATOR name (  
    PROCEDURE = function_name  
    [, LEFTARG = left_type ] [, RIGHTARG = right_type ]  
    [, COMMUTATOR = com_op ] [, NEGATOR = neg_op ]  
    [, RESTRICT = res_proc ] [, JOIN = join_proc ]  
    [, HASHES ] [, MERGES ]  
)  
```  
如何查看操作符对应的函数  
操作数1 , OP , 操作数2 , 结果 , 函数  
```  
postgres=# select oprleft::regtype,oprname,oprright::regtype,oprresult::regtype,oprcode::regproc from pg_operator ;  
           oprleft           | oprname |          oprright           |          oprresult          |              oprcode                 
-----------------------------+---------+-----------------------------+-----------------------------+------------------------------------  
 integer                     | =       | bigint                      | boolean                     | int48eq  
 integer                     | <>      | bigint                      | boolean                     | int48ne  
 integer                     |        | bigint                      | boolean                     | int48gt  
 integer                     | =      | bigint                      | boolean                     | int48ge  
 boolean                     |  array['integer'::regtype::oid];  
```  
如何查找操作数或结果中包含某个特定类型的操作符  
```  
select oprleft::regtype,oprname,oprright::regtype,oprresult::regtype,oprcode::regproc from pg_operator where oprleft='integer'::regtype or oprright='integer'::regtype or oprresult='integer'::regtype;  
 oprleft  | oprname | oprright | oprresult |         oprcode            
----------+---------+----------+-----------+--------------------------  
 integer  | =       | bigint   | boolean   | int48eq  
 integer  | <>      | bigint   | boolean   | int48ne  
 integer  |        | bigint   | boolean   | int48gt  
 integer  | =      | bigint   | boolean   | int48ge  
 integer  | =       | integer  | boolean   | int4eq  
 integer  |       | integer  | boolean   | xidneqint4  
......  
```  
### 3. 表管理  
建表  
```  
postgres=#  \h create table  
Command:     CREATE TABLE  
Description: define a new table  
Syntax:  
CREATE [ [ GLOBAL | LOCAL ] { TEMPORARY | TEMP } | UNLOGGED ] TABLE [ IF NOT EXISTS ] table_name ( [  
  { column_name data_type [ COLLATE collation ] [ column_constraint [ ... ] ]  
    | table_constraint  
    | LIKE source_table [ like_option ... ] }  
    [, ... ]  
] )  
[ INHERITS ( parent_table [, ... ] ) ]  
[ WITH ( storage_parameter [= value] [, ... ] ) | WITH OIDS | WITHOUT OIDS ]  
[ ON COMMIT { PRESERVE ROWS | DELETE ROWS | DROP } ]  
[ TABLESPACE tablespace_name ]  
```  
权限管理  
设置某个用户，在某个SCHEMA下的所有对象的默认权限  
```  
postgres=# \h alter defau  
Command:     ALTER DEFAULT PRIVILEGES  
Description: define default access privileges  
Syntax:  
ALTER DEFAULT PRIVILEGES  
    [ FOR { ROLE | USER } target_role [, ...] ]  
    [ IN SCHEMA schema_name [, ...] ]  
    abbreviated_grant_or_revoke  
where abbreviated_grant_or_revoke is one of:  