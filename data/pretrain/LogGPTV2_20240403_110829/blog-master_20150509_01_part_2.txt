        Unit masks (default 0x1)
        ----------
        0x01: No unit mask
......
```
事件配置:  
```
       --events / -e event1[,event2[,...]]
              This option is for passing a comma-separated list of event specifications for profiling. Each event spec
              is of the form:
                 name:count[:unitmask[:kernel[:user]]]
              You can specify unit mask values using either a numerical value (hex values must begin with "0x")  or  a
              symbolic  name  (if  the name= field is shown in the ophelp output). For some named unit masks,
              the hex value is not unique; thus, OProfile tools enforce specifying such unit masks value by name.
              Event names for some IBM PowerPC systems include a _GRP (group number) suffix. You  can  pass  either
              the  full event name or the base event name (i.e., without the suffix) to operf.  If the base event name
              is passed, operf will automatically choose an appropriate group number suffix for the event; thus, OPro-
              file post-processing tools will always show real event names that include the group number suffix.
              When  no event specification is given, the default event for the running processor type will be used for
              profiling.  Use ophelp to list the available events for your processor type.
```
以下摘自redhat admin doc  
```
OProfile is a low overhead, system-wide performance monitoring tool. 
It uses the performance monitoring hardware on the processor to retrieve information about the kernel and executables on the system,
such as when memory is referenced, the number of L2 cache requests, and the number of hardware interrupts received. 
On a Red Hat Enterprise Linux system, the oprofile package must be installed to use this tool.
Many processors include dedicated performance monitoring hardware. This hardware makes it possible to detect when certain events happen (such as the requested data not being in cache). 
The hardware normally takes the form of one or more counters that are incremented each time an event takes place. 
When the counter value increments, an interrupt is generated, making it possible to control the amount of detail (and therefore, overhead) produced by performance monitoring.
OProfile uses this hardware (or a timer-based substitute in cases where performance monitoring hardware is not present) to collect samples of performance-related data each time a counter generates an interrupt. 
These samples are periodically written out to disk; later, the data contained in these samples can then be used to generate reports on system-level and application-level performance.
Be aware of the following limitations when using OProfile:
Use of shared libraries — Samples for code in shared libraries are not attributed to the particular application unless the --separate=library option is used.
Performance monitoring samples are inexact — When a performance monitoring register triggers a sample, the interrupt handling is not precise like a divide by zero exception. 
Due to the out-of-order execution of instructions by the processor, the sample may be recorded on a nearby instruction.
opreport does not associate samples for inline functions properly — opreport uses a simple address range mechanism to determine which function an address is in. 
Inline function samples are not attributed to the inline function but rather to the function the inline function was inserted into.
OProfile accumulates data from multiple runs — OProfile is a system-wide profiler and expects processes to start up and shut down multiple times. 
Thus, samples from multiple runs accumulate. Use the command opcontrol --reset to clear out the samples from previous runs.
Hardware performance counters do not work on guest virtual machines — Because the hardware performance counters are not available on virtual systems, 
you need to use the timer mode. Enter the command opcontrol --deinit, and then execute modprobe oprofile timer=1 to enable the timer mode.
Non-CPU-limited performance problems — OProfile is oriented to finding problems with CPU-limited processes. OProfile does not identify processes that are asleep because they are waiting on locks or for some other event to occur (for example an I/O device to finish an operation).
SystemTap is a tracing and probing tool that allows users to study and monitor the activities of the operating system in fine detail. 
It provides information similar to the output of tools like netstat, ps, top, and iostat; however, 
SystemTap is designed to provide more filtering and analysis options for the collected information.
While using OProfile is suggested in cases of collecting data on where and why the processor spends time in a particular area of code, 
it is less usable when finding out why the processor stays idle.
You might want to use SystemTap when instrumenting specific places in code. Because SystemTap allows you to run the code instrumentation without having to stop and restart the instrumented code, 
it is particularly useful for instrumenting the kernel and daemons.
```
## 参考
1\. http://oprofile.sourceforge.net/  
2\. https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide/ch-OProfile.html  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")