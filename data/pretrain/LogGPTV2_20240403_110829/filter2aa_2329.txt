General ways to find and exploit 
directory traversals on Android
Xiang Xiaobo (Elphet) @ 360 Alpha Team
About Us
• Alpha Team @360 Security 
• 100+ Android vulnerabilities（Google Qualcomm etc）
• Won the highest reward in the history of the ASR program. 
• 5 Pwn contest winner 
• Pwn2Own Mobile 2015( Nexus 6) 
• Pwn0Rama 2016 (Nexus 6p)
• Pwn2Own 2016(Chrome)
• PwnFest 2016(Pixel)
• Pwn2Own Mobile 2017(Galaxy S8）
Agenda
• Concept and Impacts
• Where and how to find directory traversal issues
• Tricks for exploiting
• How to fix
What is directory traversal
• A controllable or partially controllable file name.
• Lack of file name canonicalization
• Can be exploited with a malfored filename:
• ../../../../../../data/data/com.vulnerable.app/files/plugin.so
Impacts of traversal
• Arbitrary file reading via traversal
• Information leakage ( token, user info, etc. )
• Clone Attack
• Arbitrary file Writing
• Phishing
• Denial of Service
• Account Replacement
• Arbitrary code execution
• Clone Attack
Agenda
• Concept and Impacts
• Where and how to find directory traversal issues
• Tricks for exploiting
• How to fix
Where to find Directory traversal
• Opening file in exported content provider
• Attachment saving in mailbox application
• Manually decompressing archives in Web-browser/File Manager
• Downloading and unzipping resources during running
• Unsafe unzipping files in the SD Card
• Transferring files in Instant Messaging Apps
• Syncing files in Cloud Drive Apps
• Backup and restore
• … 
Directory traversal in exported Content 
provider
• exported:true
• Overrided openFile method in the content provider
• Vulnerable code snippet
• PoC:
• adb shell content open 
content://mydownloadcontentprovider/..%2f..%2f..%2f..%2f..%2fsdcard%2freadme.t
xt
Attachment saving in mailbox apps
• There are two fields that must be 
canonicalized
• Filename1 specifies the attachment 
name for gmail
• Filename2 specifies the attachment 
name for outlook
• We can specify these fields with a 
python script
Attachment saving in mailbox apps
Zip decompress in web browser or file 
manager apps
• Steps to verify:
• Download a malformed zip file/ store a malformed zip file on the sdcard
• Manually trigger the decompress operation. 
• Generate a malformed zip file:
• case: 
• CVE-2018- 8084 Directory traversal in Sogou Browser
Downloaded zip resources
• Vulnerable
• Static analysis or scanners 
• grep --include *.smali -r zipEntry .
• Controllable
• Attack surfaces
• Insecure Communication / Insecure Storage / Exported Components
• Static analysis
• Recursively find the caller of target function
• Dynamic analysis
• Hooking
• MITM
Hooking
• Hooking File.exists() to 
intercept all reading 
actions
• Filter files that end with 
“.zip”
• Print the stack backtrace
to see whether it is 
controllable
Directory Traversal in Instant Messaging Apps
• Steps to find directory traversals in IM 
• send a file with malformed filename to the target
• the target clicks or downloads the file to trigger a directory traversal
• How can we send a malformed file
• MITM
• Hooking
• Repackaging or recompiling
Possibility of MITM
• Example
Base64.decode( x-obs-parms):
Case via hooking
• CVE-2018-10067 Directory travsesal in QQ series 
products 
• We can modify the filename via hooking during 
sending
Case via repackaging or recompling
• CVE-2017-17715 Directory 
travsersal in Telegram Messenger 
( Discovered by Natalie)
• Didn’t canonicalize the filename 
during downloading document
• How to specify a malformed file 
name during sending file
• Repackaging or recompiling
Agenda
• Concept and Impacts
• Where and how to find directory traversal issues
• Tricks for exploiting
• Conclusion
Categories of directory traversal
• Be able to read arbitrary files
• Logic bugs in exported components
• Be able to Overwrite arbitrary files directly
• Path traversal in unzip
• Sync directory of a Cloud Apps
• Be able to write, but cannot overwrite files
• Download a document and rename if file already exists in Document Apps
• Download an attachment and rename if file already exists in Mailbox
• Download an arbitrary file and rename if file already exists in Instant 
Messaging Apps
Tricks for exploiting
• Files to be used by an application
• General Files
• SharedPreference in /data/data//shared_prefs/.xml
• Sqlite Databases in /data/data//databases/.db
• Plugins
• shared libraries/ dex / jar / apk
• pre download,  dynamically load and unload
• Hot patches
• Fix critical vulnerabilities by pushing emergency patches
• Combine with multi-dex mechanism
• Executables
• eg.  watch_server
CVE-2018-8084 Directory traversal in Sogou
Browser
• Allows overwriting files 
directly
• there’re so many shared 
libraries exists in 
/data/data/sogou.mobile.
explorer/
• we overwrites a proper 
one to get a shell
• libvplayer.so 
CVE-2018-5722 directory traversal in Tencent
QQ Mail
• Directory traversal in Attachment downloads
• Vulnerable when logging in with Gmail or Gmalified address (Hotmail/Yahoo)
• Controllable file name of attachment
• lacking of cananicalization
• Dangerous hot patches with multi-dex
• Using File.listFiles(DexFilter)  to find all dex files in a certain directory and load 
them directly
• Exploit
• /data/data//app_moai_patch/a.dex
• Smali injection to classes to be load
CVE-2018-5722 directory traversal in Tencent
QQ Mail
• Directory traversal in Attachment 
downloads
• Vulnerable when logging in with Gmail 
or Gmalified address (Hotmail/Yahoo)
• Controllable file name of attachment
• lacking of canonicalization
• Dangerous hot patches with multi-
dex
• Using File.listFiles(DexFilter)  to find all 
dex files in a certain directory and load 
them directly
CVE-2018-5192 Directory travseral in Netease
Mail Master
• Directory traversal in Attachment downloading
• Similar to directory travseral in QQ Mail
• Vulnerable when logging in with Gmail or Gmalified address (Hotmail/Yahoo)
• Controllable file name of attachment
• lacking of canonicalization
• Dangerous advertisement plugin loading and updating
• It loads finalcore.jar after launch
• Update finalcore.jar by rename newcore.jar to finalcore.jar if exists
• Exploit:
• We can place “newcore.jar”, and wait for reloading
CVE-2017-17715 Directory traversal in 
Telegram (Discovered by Natalie)
• Directory traversal in Downloading 
documents
• Cannot overwrite existing files.
• Controllable file name of documents
• lacking of canonicalization when downloading
• The implementation of tgnet module is 
dangerous
• Exploit1:
• We can place tgnet.dat.bak file and wait for 
loading
• Results in a crash / possibility of session 
hijacking
CVE-2017-17715 Directory traversal in 
Telegram
• Exploit #2
• The implementation in AOSP 
also has backup file restore 
logic
• This is a general way to 
overwrite files if we can not 
overwrite files directly
CVE-2017-17715 Directory traversal in 
Telegram
• Exploit #2
• What can we overwrite
• tgnet.dat
• userconfing.xml
• What can we do
• Account replacing
• Session hijack
• Device binding and force 
logout
SharePreferences
• Items we could hijack:
• Download URLs
• plugins
• Patches
• new APKs
• Version code
• Update schedule
• Update file hash
• Servers
• Server IP an Port 
• DNS server
• Proxy server
• … 
Agenda
• Concept and Impacts
• Where and how to find directory traversal issues
• Tricks for exploiting
• How to fix
How to Fix
• Rename or concat the 
downloaded files with a hash
• Always canonicalize the  user-
controllable filename
• Avoid reading important files 
on the SD card
• Check the integrity of 
important files
• …
THANKS
Q&A