# Verifiable Delegation of Computation on Outsourced Data

## Authors
- Michael Backes, Saarland University, MPI-SWS, Saarbrücken, Germany
- Dario Fiore, MPI-SWS, Saarbrücken, Germany
- Raphael M. Reischuk, Saarland University, Saarbrücken, Germany

## Abstract
This paper addresses the problem where a client stores a large amount of data with an untrusted server and can request the server to compute functions on portions of this data. The client must efficiently verify the correctness of the results, even though it no longer knows the inputs of the delegated computation. Additionally, the client should be able to continuously add new data and not have to predefine the functions that will be delegated. Ideally, the verification time should be independent of the input size, which is particularly appealing for computations over large datasets.

We propose novel cryptographic techniques that solve this problem for the class of quadratic polynomial computations over a large number of variables. This class includes many significant arithmetic computations, such as various statistical measures. Our solution demonstrates encouraging performance, with correctness proofs under 1 kB in size and verifiable by clients in less than 10 milliseconds.

## Categories and Subject Descriptors
K.6.5 [Management of Computing and Information Systems]: Security and Protection

## Keywords
Verifiable Delegation of Computation, Cloud Computing, Secure Data Outsourcing, Homomorphic MACs, Amortized Closed-Form Efficient PRF

## Introduction
The rise of cloud computing, where clients lease computing and storage resources from powerful service providers, has made it crucial to ensure the integrity of outsourced data. Consider a scenario where a client has a large, potentially unbounded, dataset \( D = \{D_1, D_2, D_3, \ldots\} \), such as environmental data (e.g., air pollution levels at fixed intervals). If the client's memory is insufficient, they might store the data on a remote server \( S \). The client can then request the server to compute functions on the stored data. However, if the server is untrusted, how can the client verify the correctness of the results?

This scenario leads to several requirements:
1. **Security**: The server must provide a proof of the correctness of the delegated computation.
2. **Efficiency**: The client must verify the proof using significantly fewer resources than those required to compute the function.
3. **Input-Independent Efficiency**: Verification time should be independent of the input size.
4. **Unbounded Storage**: The client should be able to outsource any amount of data without prior constraints.
5. **Function-Independence**: The client should not need to know in advance the functions that will be delegated.

### Relation with Verifiable Computation
Many works in verifiable computation achieve security and efficiency but fail to meet the other requirements. For instance, most existing solutions require the client to know or store a local copy of the input data, or to send all data at once, limiting the ability to append additional data later. Furthermore, these solutions often have a verification time proportional to the input size, which is impractical for large datasets.

Chung et al.'s work on memory delegation [20] comes close to meeting these requirements but suffers from impracticality issues due to the use of PCP techniques. In contrast, our approach provides a practical solution that meets all five requirements.

### Our Contribution
We present the first practical protocol for verifiable delegation of computations on growing outsourced data. A client can continuously store a large amount of data with the server and request the computation of a function on a portion of the data. The server sends a short piece of information verifying the correctness of the result. Our protocol achieves input-independent efficiency in the amortized model: after a single precomputation, the client can verify each subsequent evaluation in constant time, regardless of the input size. Additionally, the client can continuously add elements to the remote storage, and the delegated functions do not need to be predefined.

Our solution works for computations over integers in the ring \( \mathbb{Z}_p \) (where \( p \) is a large prime) and supports arithmetic circuits of degree up to 2. This class covers a wide range of significant arithmetic computations, including various statistical measures.

### Key Technical Contribution
We introduce homomorphic MACs with efficient verification, extending homomorphic message authenticators. We provide a secure realization of this primitive under the Decision Linear assumption and build an efficient protocol using bilinear pairings. Our solution is practical, with minimal overhead for both the client and the server.

### Performance Evaluation
For 80 bits of security, the client performs a single modular exponentiation in 0.24 ms to outsource a data item, yielding a 0.08 kB authentication tag. For verification, the client receives a 0.21 kB proof and checks it in 1.06 ms. The precomputation for the delegated function takes the same time as computing the function, with almost no additional overhead, and can be reused indefinitely.

### Related Work
- **Memory Delegation**: Chung et al. [20] allow clients to change values in the outsourced memory and support more expressive computations but require stateful clients and bounded stream sizes.
- **Authenticated Data Structures**: Existing work focuses on specific data structure operations but does not address the full set of requirements we consider.

In summary, our solution provides a practical and efficient method for verifiable delegation of computations on outsourced data, meeting all the specified requirements.