Specific
Protocol Specific
Figure 2: System Under Learning components.
3.1 Implementation
The Implementation is the original system we are attempting to
learn, for example a running TCP server. In this case we host the
implementation being learned, but simply being able to connect to
the implementation is enough for Prognosis to learn a model. At
the high level, the implementation takes sequences of inputs in a
domain Σ and produces sequences of outputs in a domain Γ.
In what follows, we refer to these domains as alphabets, the usual
terminology in the model learning literature. We will be using
different alphabets that get gradually more abstract: the native
alphabet, the concrete alphabet, and the abstract alphabet. Each of
these alphabets serves its own purpose, and they are the way in
which the Prognosis modules communicate. In general, the input
and output alphabets of the implementations are complex packets.
The following example shows the low-level alphabet used in typical
network communications.
Example 3.1 (Native Alphabet). The native alphabet of a TCP
implementation consists of all the possible TCP packets in their
binary format, with all their complex fields and restrictions. The
input and output alphabets are both 2, the binary alphabet, and
the packets are sequences of these—i.e., sequences in 2∗. These
sequences correspond to the binary representations of TCP packets
that will be sent over the wire to the Implementation and received
back as a response. For example, in our analysis of the TCP Imple-
mentation in Figure 3, we use the Scapy [8] Python library to send
arbitrary TCP packets in 2∗ over a socket.
The native alphabet is only useful for creating packets to be com-
municated, but in general, it is more convenient to use structured
alphabets that capture the fields and values of packets. Even though
packets are communicated in binary, these same can be represented
as a structured alphabet—e.g., a JSON object.
Example 3.2 (Concrete Alphabet). In our TCP example, the con-
crete alphabets can be JSON objects with the following structure:
1
2
3
4
5
6
7
8
9
10
11
{ " isNull ": false ,
" sourcePort ": 40965 ,
" destinationPort ": 44344 ,
" seqNumber ": 48108 ,
" ackNumber ": 0 ,
" dataOffset ": null ,
" reserved ": 0 ,
" flags ": "S",
" window ": 8192 ,
" checksum ": null ,
" urgentPointer ": 0 }
764
SIGCOMM ’21, August 23–27, 2021, Virtual Event, USA
Ferreira et al.
We will use concrete alphabets—which we below refer to as
Σ and Γ—as a machine-readable representation of the native al-
phabets. Concrete alphabets and native alphabets are necessary
to trigger concrete executions of the SUL. However, these alpha-
bets are simply too large (sometimes infinite). When learning a
model of an implementation, one has to abstract some parts of the
alphabets—e.g., specific packet formats and encrypted messages—to
make model learning feasible and helpful. For example, while it is
not feasible to learn a model describing an exact TCP implemen-
tation, it is possible to learn a model of what types (e.g., SYN, ACK,
SYN-ACK) of packets are exchanged during a handshake (Figure
3(b)). This abstraction is handled by the Adapter, as described next.
3.2 Adapter
In the architecture of our system (Figure 1), the Adapter, which
is part of the SUL (Figure 2), is by far the hardest component the
user needs to provide. The Implementation itself is provided to us,
and the Learner is abstract, but the Adapter has to translate inputs
that the Implementation understands to inputs that the Learner
can use, and vice-versa. The Adapter has to know the logic of the
protocol to produce concrete packets with the right parameters, and
it needs to know how to encode concrete symbols into their binary
representation to interact with the Implementation, acting as the
client in the connection. Instead of requiring the user to provide
an implementation of the Adapter from scratch, Prognosis lets
the user resort to a reference implementation as basis to build the
Adapter. Before we describe this key idea, we set some notation.
The Adapter translates concrete input/output traces into simpli-
fied traces for which it is feasible to do model learning. We call the
latter abstract traces as they are built from abstract alphabets(cid:98)Σ and
(cid:98)Γ, which allow us to focus on crucial aspects by abstracting away
details that would make the alphabet otherwise too big or infinite.
Let us now illustrate a candidate abstract alphabet to learn the TCP
handshake of Figure 3.
Example 3.3 (Abstract Alphabet). In Figure 3(a) we have packet
flags, sequence, and acknowledgment numbers. Because we are only
interested in modeling what types of packets are exchanged, our
abstract alphabets(cid:98)Σ and(cid:98)Γ will only contain packet flags. For exam-
ple, a packet might have the following structure: ACK+SYN(?,?,0).
Here, each ? represents a parameter left unspecified. While it seems
unnecessary to have these parameters if they are not used in learn-
ing, we will use them in Section 4.3 to synthesize a richer model.
Remark 3.1 (Nondeterminism). The abstract trace in the previous
example does not incorporate the seqNumber. Because in TCP the
Sequence Number is randomly determined at the start of the con-
nection, we could have two different traces that represent the same
3-way TCP handshake. A choice the user has to make when pro-
viding an abstract alphabet is what they plan to model. In this
example, we assume the user is trying to learn a model of the 3-
way handshake and they know this process should be deterministic.
Therefore, providing elements of the abstract alphabet that not only
are irrelevant to the model but will cause nondeterminism would
be a poor choice of abstract alphabet.
Section 6 shows how Prognosis provides mechanisms to detect
when a choice of abstract alphabet results in nondeterminism. In
Section 6.2.4, we show a case in which nondeterminism was the
result of an undesired protocol behavior.
Going from a native alphabet, to a concrete alphabet, to an ab-
stract alphabet is somewhat simple as we merely remove informa-
tion deemed unnecessary for learning. However, these details are
essential for the learner to communicate with the Implementation,
so this missing information will need to be recovered when sending
concrete packets to the SUL. Learning algorithms (and our anal-
ysis) often need to perform queries to the SUL to decide how the
model should be constructed. These queries, given an abstract trace
𝑎, require one to construct a concrete trace 𝑐 that is valid in the
Implementation and that corresponds to 𝑎.
straction function 𝛼 : Σ∗ × Γ∗ →(cid:98)Σ∗ ×(cid:98)Γ∗ that maps pairs of in-
Formally, these translations are user-defined functions: An ab-
put/output traces to abstract traces; and a concretization function
𝛾 : ˆΣ∗ × ˆΓ∗ → Σ∗ × Γ∗ satisfying 𝛼(𝛾(𝑎)) = 𝑎.
As an example of an abstraction function, we could be removing
the SeqNumber and AckNumber of TCP Packets: e.g., TCP{flags: SYN,
Seq: 123, Ack: 0} would be translated to an abstract TCP Packet
TCP{flags: SYN, Seq: ⊤, Ack: ⊤}.
Designing the reverse process, that is the concretization function,
is a hard task that requires expert knowledge and stands in the way
of modularity and reusability. Simplifying this problem is one of
the aspects where our work significantly differs from prior work:
Fiterău-Broştean et al. [22] have used an architecture reminiscent
of ours to learn models of TCP implementations, but require the
user to provide a Mapper, which is effectively an implementation
of the concretization function 𝛾. Directly implementing 𝛾 requires
a user to know the protocol logic in detail and to understand what
concrete packets are valid and not valid. Essentially, the user needs
to implement part of the protocol implementation itself, which
not only is a hard task, but somewhat defeats the point of using a
closed-box analysis based on model learning. Moreover, this explicit
implementation of a concretization function is close to impossible
if the protocol relies on a logic of high complexity (as is the case
for QUIC), including aspects like key derivation, encryption, or
symbols that contain a large number of fields.
Our solution to implementing concretization functions is in-
spired by the following common expression in cryptography: Never
roll your own Crypto.—i.e., because cryptographic algorithms tend
to be of great complexity, it is best to use existing implementations
that have been widely tested instead of implementing them yourself.
Building on this insight, Prognosis uses the following key idea.
Reference implementation as a concretization oracle.
Instead of manually implementing a concretization function
from scratch (i.e., a version of the protocol logic that can produce
concrete traces from abstract ones), we rely on a given reference
implementation to provide ground truth information to the Adapter.
Concretely, we rely on the reference implementation to both do
the concretization logic and native formatting, as a normal imple-
mentation would. Given an abstract query symbol 𝑎 the Adapter
needs to find a concrete packet 𝑐 to build that matches 𝑎. We mod-
ify the reference implementation so that it can “abstractly execute”
abstract packets to identify what concrete packets they can yield.
While this sounds like a mouthful, it boils down to identifying and
765
Prognosis: Closed-Box Analysis of Network Protocol Implementations
SIGCOMM ’21, August 23–27, 2021, Virtual Event, USA
𝑠0
SYN(?,?,0) / ACK+SYN(?,?,0)
𝑠1
ACK(?,?,0) / NIL
𝑠2
SYN(sn,ack,0) / ACK+SYN(seq,r,0)
r = sn+1
ACK(seq,ack,0) / NIL
𝑠0
𝑠1
𝑠2
Figure 3:
(a) The TCP 3-way handshake.
(b) Learned model (fragment)
(c) Synthesized model (fragment) with register r
using the parts of the reference implementation that operate over
the symbols we are interested in.
The main advantage of using a well-tested reference implemen-
tation is that it already encodes the desired protocol logic—i.e., in
what order packets are transmitted, how they are built, etc. For
example, a natural choice for the QUIC reference implementation
is QUIC-tracker [28], which is widely used by QUIC implementers.
It is worth noting that this implementation does not have to
be 100% correct. It is merely a reference point for modelling the
interaction with the target implementation. While correct reference
implementations allow us to narrow detected bugs to the target
implementation, finding any modelled bugs is useful as it can detect
issues in both implementations.
Naturally, although a reference implementation allows us to
communicate with the target implementation, it also has behaviour
that is not fit for being modelled. Namely, via our modification
of the reference implementation we aim to enforce the following
properties:
(1) No unrequested packets are sent to the target Implemen-
tation. We must ensure that any output symbols registered are
indeed caused only by the input packets requested.
(2) All concrete packets sent match the requested abstract
packets. Concrete packets must fulfil the requested abstract sym-
bols fully.
(3) Both reference and target implementations can be reset
on request, returning them to their initial state. The learner
must be able to perform a series of independent queries, as such
we must have a way to fully reset the connection to its initial state,
ready for a new query to be done.
(4) Concrete packets constructed or received as a response are
saved with their abstract counterparts in a historic Oracle
Table. The Oracle Table is a critical data structure used in syn-
thesising more detailed models of the implementation. It is further
explored in Section 4.3.
(5) Response packets from the target implementation to the
reference implementation are abstracted and sent back to
the learner. Just as the adapter must be able to concretise packets,
it must be able to abstract them back to the same abstraction level
as the original request it received, so that they can be sent back to
the learner in a matching abstraction level.
Although the specific ways of achieving these properties vary
from an implementation to another, we have found this requirement
set is often enough to strike the balance in allowing the learner to
interact with the SUL while minimising behaviour introduced by
the reference implementation.
766
In some more complex protocols, it may also be useful to store in
a queue formulated payloads that would break rule (1) by reacting
to a received response packet, so that they can be sent later if
requested by a matching abstract counterpart, as exemplified in
Listing 1.
Our modified code will have instrumentations at all the points
where packet types and packet frames are constructed, and ensure
through the instrumented conditional branching that only matching
concrete packets are sent to the target implementation. We also
add code to be able to hook into functionality allowing us to create
packets from scratch.
As an example, consider the Adapter receives an abstract query
INITIAL[ACK] for a QUIC packet (where INITIAL is one of the 7
packet types and ACK is one of the 20 frames carried in packets).
Firstly, the queue is searched for a matching packet to be sent. If
there is no match for this packet, one is made from scratch, with
the valid current state of the reference implementation (Packet
Number, connection details, and others), and sent instead. The
reference implementation may then receive packets as a response,
which are processed by the reference implementation as usual to
make sure its state is updated, and if the reference implementation
logic would cause a new packet to be sent in response, it is instead
stored in our queue waiting for the learner, as demonstrated below.
Listing 1: Enforcing (1) and (2) in ACK sending logic
if ( packet . shouldBeAcked ) {
// Received a packet to be acked
connection . sendPacket ( INITIAL , ACK )
AckQueue += packet
-
+
}
+ if ( requestedInitialAck ) {
+
+
+ }
// Abstract Symbol was requested
connection . sendPacket ( AckQueue . find ( INITIAL , ACK ))
After this, the original response from the target implementation
is abstracted, and sent to the learner:
Listing 2: Implementing (4) and (5) in packet send/receive hooks
+ // Define abstract symbol according to set abstraction .
+ abstractSymbol = newAbstractSymbol (
+
packetType , version , packetNumber , frameTypes )
(...)
+ // Save symbol exchange in Oracle Table .
+ oracleTable . addIOs ( abstractInputs , abstractOutputs ,
+
concreteInputs , concreteOutputs )
+ // Return abstract response to learner .
+ learner . send ( abstractOutputs )
Finally, at the end of each query the Learner requests that the
SUL reset its state for a new query to be made. In the specific case
of QUIC, it is enough to reset the Adapter (client), and start a new
connection to the Implementation:
ClientServerSYN seq=xSYN-ACK ack=x+1 seq=yACK ack=y+1 seq=x+1[data]SIGCOMM ’21, August 23–27, 2021, Virtual Event, USA
Ferreira et al.
Listing 3: Implementing (3) in main Adapter body
+ // Define reset routine .
+ func reset () {
+