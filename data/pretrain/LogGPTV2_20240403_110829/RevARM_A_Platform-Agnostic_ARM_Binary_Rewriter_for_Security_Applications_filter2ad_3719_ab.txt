tions into the stretched switch case as described in Fig. 1c. This
approach has two advantages. First, RevARM can achieve binary
instrumentation with very low run-time and space overhead, which
makes it a practical technique for mobile and embedded systems
with limited resources. Further, RevARM is more versatile in enforc-
ing a variety of security applications. For example, RevARM can
enforce in-place, fine-grained code diversification by randomizing
the code address space to prevent control flow hijacks. However,
trampoline-based approaches cannot enable this since they cannot
perform in-place instruction insertion at arbitrary locations. Finally,
RevARM can enforce advanced SFI [56, 67] which requires chang-
ing the binary layout to guarantee that all indirect control flows
pass through SFI instructions (see §4).
3 DESIGN
3.1 Overview
Fig. 2 illustrates the overall design of RevARM. Overall, our binary
rewriting procedure goes through two stages: preprocessing and in-
strumentation. In the preprocessing stage, RevARM takes a binary
file and an instrumentation specification as inputs. An instrumen-
tation specification contains instrumentation information, such as
Figure 2: Overview of RevARM.
security policies to enforce and target embedding/extraction loca-
tion for when RevARM instruments the input binary (i.e., to embed
new logic or extract existing logic).
The input binary is first decompressed or decrypted if it is in
a compressed or encrypted format. Then, RevARM disassembles
the input binary and interprets the instrumentation specification.
During the instrumentation stage, RevARM’s IR transformer ex-
tracts all the information that it needs from the input binary —
including instructions/data, instruction mode, type, size, reference
— and creates a representation, called internal representation (IR).
Based on the instrumentation specification, the instrumentation
algorithm inserts or replaces instructions to instrument the input
binary. Finally, RevARM updates the metadata of the input binary
with the new locations of code and data after instrumentation.
3.2 Preprocessing
Preprocessing consists of two steps: decompression/decryption and
disassembling. Our target input binaries can be Mach-O binaries or
stripped/unstripped binaries (e.g., UAV firmware binaries). Decom-
pression/decryption should be performed by leveraging existing
techniques [22, 23, 25]. Then, RevARM disassembles the input bi-
nary. During disassembly, it may be necessary to identify the mem-
ory location of a firmware image for proper disassembly. To resolve
this problem, RevARM performs analysis of the binary’s jump ta-
bles, indirect branch target values, and memory access patterns to
locate the firmware image region [57].
3.3 Instrumentation
In this section, we explain our instrumentation algorithm to handle
code sections. Other sections including data and metadata are de-
scribed in §3.9. To instrument an input binary (disassembled in the
previous stage), RevARM determines what instructions will be in-
serted or replaced based on the input instrumentation specification.
Our algorithm takes a disassembled binary, Pbin, and a set of new
instructions to insert or replace (I N S) as inputs. RevARM follows
0x8E60   TBB[PC,R2] 0x8E64   DCB 0x2         case00x8E65   DCB 0x3case10x8E66   DCB 0x4case20x8E67   DCB 0x5default-----------------------------0x8E68   LDR  R4,[R5]   case00x8E6A   LDR  R4,[R5+4] case10x8E6C   LDR  R4,[R5+8] case2-----------------------------BIC   R5, 0xF0000003-------------------------------------------------------……0x8E60  TBB [PC,R2] ----------------------------0x8E64 DCB 0x2     case 00x8E65 DCB ??case 10x8E66 DCB 0x4        case 20x8E67 DCB 0x5       default0x8E68 B.W Tramp   case 00x8E6A                case 10x8E6C LDR  R4,[R5+8] case 2……0xEE00    Tramp:0xEE02 BIC  R5,0xF00000030xEE06 LDR  R4,[R5]  case 00xEE08 LDR  R4,[R5+4]case 10xEE0A B.W  0x8E6C----------------------------------------------------------0x8E60   TBB [PC,R2] -----------------------------0x8E64   DCB 0x2     case 00x8E65   DCB 0x5case 10x8E66   DCB 0x6        case 20x8E67   DCB 0x7       default-----------------------------0x8E6C   LDR  R4,[R5]   0x8E6E   LDR  R4,[R5+4] case10x8E70   LDR  R4,[R5+8] case20x8E68   BIC  R5,0xF0000003   case0----------------------------------------------------------……InstrumentationSpecificationInput BinaryDecompress/DecryptInstrument/RecompileIR TransformOutput BinaryPreprocessDisassembleInstrumentationInputOutputP:
C:
IR:
F:
INSType
INSPosition
INS
Program (P := , where C := IR | IR+C)
Code section
List of IR
Function Address List
instype := INSERTION | REPLACE;
inspos := BEFORE | AFTER;
ins := ins | ins · 
Metadata section
Insertion Instruction
D:
I:
FM: Mapping Function Entry to IR
Figure 3: Definitions of variables used in Algorithms 1-3.
iri := GetCorrespondingIR(ci )
iri .caddr := GetConcreteAddr(ci )
iri .instmode := GetInstMode(ci )
iri .r anд := GetReferRange(ci )
iri .cr ef := GetReference(ci )
if iri .type is an IT instruction then
Algorithm 1 Pseudo-code to translate the input binary into IRs.
1: function TranslateToIR(Pbin )
▷ Transform instruction/data into IR in a code section
2:
PI R := empty
for each ci ∈ Pbin .C do
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
▷ Insert initialized iri to PI R
13:
end for
14:
for each iri ∈ PI R where iri .type is Ref er ence do ▷ Get reference info on each ir
15:
16:
end for
17:
return PI R
18:
19: end function
▷ Basic and common translation
▷ Actual address for an instruction/data
▷ Determine the current instruction mode
▷ Get reference range
▷ Get target reference instruction/data
▷ Get IT information
iri .IT _cond := GetITCond(ci )
iri .IT _childr en := GetITChildren(ci ) ▷ Get instructions influenced by the IT
iri .r ef := GetReferenceIR(iri .cr ef , PI R )
end if
PI R := PI R · iri
▷ Stretched size by the instrumentation
▷ Instrument all codes
▷ New instruction insertion
▷ Insertion before the current instruction
else
▷ Insertion after the current instruction
if instype is REP LACE then
▷ Instruction replacement
else if instype is I N SERT then
irinst r := empty
if ∈ INS where ircur = irp then
PI R ’ := empty
stretchedSize := 0
for each ircur ∈ PI R do
str etchedSize += sizeof(ircur ) - sizeof(irinst r )
ircur .str etchedSize := stretchedSize
irinst r := irinst r · irnew
if inspos is BEF ORE then
Algorithm 2 Pseudo-code for code instrumentation.
1: function InstrumentCode(PI R , I N S)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
27:
28:
29:
30:
31:
32:
33: end function
ircur .str etchedSize := stretchedSize
irinst r := ircur
end if
PI R ’ := PI R ’·irinst r
end for each
for each ircur ∈ PI R ’ do
ircur .str etchedSize := stretchedSize + sizeof(irinst r )
irinst r := irinst r · irnew · ircur
ircur .str etchedSize := stretchedSize
irinst r := irinst r · ircur · irnew
end if
stretchedSize += sizeof(irinst r )
end for each
return PI R ’
end if
else
▷ Fix all erroneous references
ircur := ExtendReferenceInst(ircur ) ▷ Make an instruction reachable to its target
▷ Fix all call targets
ircur := AdjustDerefTargets(ircur )
ircur := AdjustBranchStructure(ircur )
▷ e.g., IT instruction
▷ Update stretched size after adjustment
▷ Adjust the concrete address
▷ Store instrumented irinst r
three steps: TranslateToIR, InstrumentCode, and AdjustBinaryLay-
out. Then, it generates instrumented IRs and exports the IRs into
a new binary. We describe our algorithms using the definitions
shown in Fig. 3.
Translating Instructions to IRs: In this step, RevARM converts
each disassembled code section into IRs and Algorithm 1 presents
the pseudo-code. Specifically, RevARM first stores basic informa-
tion such as instruction address, instruction type, used registers and
immediate values in each IR (line 4). Also, it stores ARM-specific
information including the current instruction mode, reference, ref-
erence range, condition and related instruction/data addresses (lines
5-8). We note that related instruction/data address is any instruc-
tions or data used to perform addressing. For example, the entire
32-bit address space cannot be addressed with only one four-byte
instruction because these instructions cannot include the entire ad-
dresses and the opcode. Furthermore, RevARM stores If-Then (IT)
instructions’ information. IT instructions make following instruc-
tions to be executed conditionally. We will describe more details
in §3.4. RevARM should store IT conditions and all child instruc-
tions controlled by the current IT (lines 9-12). We note that child
instructions are sequential, and the number of IT_children and
IT_cond will be identical. Lastly, RevARM stores the converted IRs
in PI R (line 13). After generating the IRs, RevARM creates reference
pointers to any code segments referenced by each IR (lines 15-17).
Using such pointers, we can find the target reference instruction
or data even after binary layout modification. Then, the algorithm
returns a set of IRs (line 18).
Instrumentation: Algorithm 2 presents the pseudo-code for the in-
strumentation step. It inserts and replaces instrumentation instruc-
tions and data (lines 4-26). We note that there may be many replace-
ment instruction/data objects (lines 7-10). In addition, RevARM
records any changes to instruction/data addresses and sizes. This is
necessary to later adjust reference targets in the stretched binary.
(a) Before instrumenta-
tion.
(b) Unreachable data after
stretching the binary lay-
out.
(c) Correctly extending
the short reference range
by RevARM.
Figure 4: An example where RevARM makes unreachable
data reachable by supplementing the short reference range.
RevARM then extends the code segments to make branch/data
loading instructions reachable (lines 27-31). Note that the insertion
of instructions/data usually causes stretched distances between
referencing/referenced instructions/data. As mentioned before, this
may push a referenced instruction beyond the reach of a referenc-
ing four-byte instruction. To resolve this problem, it is necessary
to replace unreachable instructions with one or multiple reachable
instructions. For example, a two-byte instruction can be replaced
with a four-byte instruction by substituting a four-byte LDR for a
two-byte LDR. However, there are cases where an LDR or VLDR in-
struction’s offset must also be updated to reach a target address. In
this case, RevARM prepends an ADD instruction. Lastly, RevARM
adjusts all reference instructions/data to ensure that they point
to their original targets. We describe such a case in Fig. 4. Note
that RevARM does not consume an additional register in Fig. 4 as
RevARM uses a destination register which will store the result of
the LDR. However, there are cases where such registers are unavail-
able, such as VLDR which does not change any general register. To
complement this case, RevARM checks any following instructions
and searches for any overwritten register without a subsequent
read in the possible paths. Otherwise, RevARM adds a PUSH and POP
for a used register to reference the target data. Note that RevARM
-------------------------0x4C68 LDR R1,[PC+0x4000]0x4C6C CMP R1,R00x8C68 DCD 0x10000……0x4C68 LDR R1,[PC+MAX]0x4C6C CMP R1,R00x9D68DCD 0x10000-------------------------……0x4C68 ADD R1,PC,#0x10000x4C6C LDR R1,[R4+0x4000]0x4C6E CMP R1,R00x9D6C DCD 0x10000-------------------------……stretchedSize := 0
for each ircur ∈ PI R do
Algorithm 3 Pseudo-code to adjust the layout of the instrumented
binary.
1: function AdjustBinaryLayout(PI R )
2:
3:
4:
5:
6:
7:
8:
9:
10:
end for
11:
return PI R
12:
13: end function
if iri .caddr is not aligned then
end if
ircur .caddr := AdjustInstAddress(ircur , stretchedSize)
for each irder ef that dereferences ircur do
irder ef := AdjustDerefTargets(irder ef )
▷ Adjust instruction/data address
stretchedSize += GetAlignment(ircur )
▷ Keep the alignment correct
end for
▷ Adjust each address
▷ Fix all call targets
also considers conditional execution. In particular, RevARM passes
a condition field if any replaced instruction has it. Lastly, RevARM
must take special care of every If-Then instruction (IT) in the instru-
mented program, which is a unique type of a conditional instruction
in ARM. We describe how RevARM handles this instruction in Sec-
tion 3.4.
Adjusting Binary Layout: In this step, RevARM adjusts the bi-
nary layout as described in Algorithm 3. Specifically, RevARM mod-
ifies each instruction/data address based on the size of the stretched
code from Algorithm 2 and the necessary alignment. Stretching the
input binary inevitably leads to violating the alignment which was
originally assigned to the original binary. Therefore, we preserve the
original alignment by adding or removing NOP instructions appro-
priately, similar to modern compilers (lines 3-11). Then, RevARM
adjusts or replaces instructions/data to ensure the original control
flows remain intact (lines 7-9).
3.4 If-Then Instruction
IT is a unique instruction of ARM that allows multiple instructions
following the IT instruction to become conditional. For example, an
LDR instruction that follows an IT instruction may or may not be