### Handshake Layer and Message Delivery
The handshake layer requires messages to be delivered in a specific order.

### Retransmission Timer
Our implementation uses a retransmission timer value of 750 milliseconds, which is more than sufficient for our LAN-based experiments. When using blocking sockets, the timeout (set via `setsockopt()`) causes `recv()` to return with an explicit timeout error if no data is received within the specified period. While we chose a value suitable for our environment, the DTLS API allows applications to set their own read and write timeout values.

### Non-blocking Sockets
Sockets running in non-blocking mode cause DTLS to return either `SSL_ERROR_WANT_READ` or `SSL_ERROR_WANT_WRITE`, which are equivalent to `EAGAIN`. This indicates that data was not immediately available for reading or writing, similar to the behavior of the TLS API. Non-blocking DTLS applications must call `DTLS1_get_timeout()` to determine when the next DTLS I/O call should be invoked and use their own timers to schedule the call at that time.

### Programmer Experience
The DTLS API is very similar to the OpenSSL API for operating TLS connections. The only additional calls provided by DTLS are related to datagram transport, such as setting and getting PMTU, timer values, and datagram socket connection options. For testing, we ported the `s_server` and `s_client` programs from the OpenSSL distribution to use DTLS. Most of the effort required to port these applications to DTLS was concentrated on making them UDP-capable.

At a high level, an ordinary UDP application can be made DTLS-capable by replacing all calls to `send()` and `recv()` with `SSL_write()` and `SSL_read()`, the default I/O calls of the OpenSSL library. The first call to the read or write functions attempts to negotiate a DTLS connection. This simple approach works well for applications using a blocking I/O discipline but is less effective for those requiring non-blocking mode. Thus, applications that need more complex I/O control must use threads or non-blocking mode.

### Thread-based I/O Discipline
For threaded applications, calls to the DTLS library are blocking, and the library handles timer expiry and retransmissions. The application can essentially be oblivious to DTLS, provided it uses a separate thread for each DTLS "connection." One consequence is a slight break from the blocking-socket convention. In the case of blocking datagram sockets, `recv()` returns -1 on error or a non-zero number of bytes read. However, `SSL_read()` can return 0, indicating that the available data is control information, such as an Alert message. This behavior is not specific to DTLS and is similar to the experience of a TLS programmer using OpenSSL.

### Non-blocking I/O Discipline
When DTLS is used in a non-blocking, event-driven application, the application must handle timeouts during handshake processing. Any I/O call to DTLS can return `SSL_ERROR_WANT_READ` or `SSL_ERROR_WANT_WRITE`, signaling that an I/O operation is blocked. The application should then call `DTLS1_get_timeout()` to determine the current DTLS timeout and restart the I/O call when the timer expires. Once the handshake is complete, DTLS returns a timer value of 0, indicating no pending I/O events. For simplicity, applications may call `DTLS1_get_timeout()` regardless of whether the handshake is in progress.

### Experiments and Results
Our results from comparing network traffic generated by TLS and DTLS are listed in Tables 1 and 2. The cipher negotiated in these tests was `EDH-RSA-DES-CBC3-SHA`, resulting in a total of 10 records exchanged between the client and server for TLS. The DTLS negotiation had at least two more records due to the cookie exchange phase and message fragmentation.

Each DTLS handshake message fragment has 25 bytes of overhead from headers (13 for the record header and 12 for the message fragment), compared to 9 bytes for TLS. Overall, the headers contribute most of the overhead in DTLS (the remainder comes from the extra padding block required by CBC with an explicit IV). Even though the overhead for DTLS is close to 35%, the actual size of the overhead is small, as exchanges with large certificates generate less than 3 KB of data. These results are only for the handshake phase; overhead for data records is lower due to the absence of the fragment header.

| **Protocol** | **Packets** | **Bytes** |
|--------------|-------------|-----------|
| **DTLS**     | 446         | 1015      |
| **TLS**      | 228         | 857       |

| **Client**   | **Server**  | **Total** |
|--------------|-------------|-----------|
| 1461         | 3           | 3         |
| 1085         | 2           | 2         |
| 4            | 6           | 4         |

Table 1. Bytes and Packets transferred with PMTU 1500, Certificate size 562 bytes

| **Protocol** | **Packets** | **Bytes** |
|--------------|-------------|-----------|
| **DTLS**     | 446         | 2313      |
| **TLS**      | 228         | 2105      |

| **Client**   | **Server**  | **Total** |
|--------------|-------------|-----------|
| 2759         | 3           | 4         |
| 2333         | 2           | 3         |
| 7            | 5           | 7         |

Table 2. Bytes and Packets transferred with PMTU 1500, Certificate size 1671 bytes

### Related Work
#### IPsec
The design of DTLS is closest to that of IPsec. Many techniques used to make DTLS records safe for datagram transport were borrowed from IPsec. However, DTLS differs from IPsec in two important respects. First, DTLS is an application-layer protocol rather than a network-layer protocol, making it easier to incorporate into applications. Second, DTLS uses the familiar TLS programming model, where security contexts are application-controlled and have a one-to-one relationship with communication channels. By contrast, there is no standard IPsec API or programming model, and widely deployed IPsec implementations are extremely difficult to program.

#### WTLS
There has been at least one previous attempt to add datagram capability to TLS: the Wireless Application Protocol Forum's WTLS. However, WTLS made many other changes, including integrating network transport with the security protocol, making it unsuitable for deployment on the Internet. Additionally, WTLS does not handle small path MTUs and has security flaws not present in TLS, leading to its limited use.

#### SRTP
The Real-Time Protocol (RTP) is widely used for multimedia traffic such as voice and video. RTP has no support for security. The IETF is currently considering standardization of the Secure Real-Time Protocol (SRTP), an application-specific security protocol for RTP. SRTP is more limited than DTLS, as it cannot protect traffic other than RTP and relies on an external signaling protocol like SIP to set up keying material. By contrast, DTLS can set up its own channel. However, in bandwidth-constrained applications, SRTP has advantages over DTLS due to its tight integration with RTP, which allows for lower network overhead. In situations where bandwidth is less limited, DTLS could be a potential substitute for SRTP.

### Future Work
Future work on TLS focuses on integration with other protocols. We currently have an early toolkit implementation of DTLS. Our next step is to integrate it with common datagram-based applications, which will provide feedback on the suitability of our design. Our initial target is SIP, as it already uses TLS in TCP mode, making the integration of DTLS in UDP mode an attractive design choice. Following SIP, we are considering integrating DTLS with gaming and multimedia protocols. This will give us an opportunity to observe its performance and make necessary changes.

We also plan to perform additional performance tuning on DTLS. Although TLS works well, subsequent analysis has uncovered some unfortunate interactions with TCP, especially with the Nagle Algorithm. As DTLS allows finer control of timers and record sizes, it is worth doing additional analysis to determine optimal values and backoff strategies. Finally, we intend to further analyze DTLS to more tightly define its security bounds.

### Summary
We have described Datagram Transport Layer Security (DTLS), a generic channel security protocol designed for use in datagram environments. DTLS is based on the well-understood TLS protocol and is designed to provide a secure channel that mimics the semantics expected by existing application protocols. Due to its simplicity and ease of deployment, DTLS provides an attractive alternative to IPsec or custom application-layer protocols. We have implemented DTLS as part of the popular OpenSSL cryptographic library and find that it provides acceptable performance and is relatively easy to program.

### Acknowledgements
The authors would like to thank Dan Boneh, Eu-Jin Goh, Constantine Sapuntzakis, and Hovav Shacham for discussions and comments on the design of DTLS. Thanks to the anonymous reviewers for their comments, which helped improve the paper. Also, thanks to Steve Kent for feedback that clarified many points. Dan Boneh, Lisa Dusseault, and Eu-Jin Goh provided comments on the paper. The first author is supported by the NSF.

### References
[References section remains unchanged]