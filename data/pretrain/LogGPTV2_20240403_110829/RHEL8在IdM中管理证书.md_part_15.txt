    2.  使用包含 AD 用户证书的文件名称运行 `ipa certmap-match`{.literal}
        命令：
        ``` literallayout
        # ipa certmap-match ad_user_cert.pem
        --------------
        1 user matched
        --------------
         Domain: AD.EXAMPLE.COM
         User logins: PI:EMAIL
        ----------------------------
        Number of entries returned 1
        ----------------------------
        ```
        输出确认您已将证书映射数据添加到
        [`PI:EMAIL`{.literal}，如果 AD
        用户条目没有证书或映射数据，则代表 Adding a certificate
        映射规则中定义的对应映射规则](#conf-certmap-idm_configuring-and-managing-idm.html#add-certmaprule-ad-no-cert-no-map_conf-certmap-ad-no-cert-no-map){.link}。这意味着，您可以使用与定义的证书映射数据匹配的证书作为
        `PI:EMAIL`{.literal} 进行身份验证。
    :::
:::
[]{#conf-certmap-idm_configuring-and-managing-idm.html#sc-cert-mapping-rule-examples_conf-certmap-ad-no-cert-no-map}
:::
:::
:::
::: section
::: titlepage
# []{#conf-certmap-idm_configuring-and-managing-idm.html#_combining_several_identity_mapping_rules_into_one}将多个身份映射规则合并到一个规则中 {.title}
:::
要将多个身份映射规则合并到一个合并规则中，使用 `|`{.literal}
（或）字符在单个映射规则前前，并使用 `()`{.literal}
括号将它们分隔，例如：
::: title
**证书映射过滤器示例 1**
:::
``` literallayout
$ ipa certmaprule-add ad_cert_for_ipa_and_ad_users \ --maprule='(|(ipacertmapdata=X509:{issuer_dn!nss_x500}{subject_dn!nss_x500})(altSecurityIdentities=X509:{issuer_dn!ad_x500}{subject_dn!ad_x500}))' \ --matchrule='CN=AD-ROOT-CA,DC=ad,DC=example,DC=com' \ --domain=ad.example.com
```
在上例中，`--maprule`{.literal} 选项中的过滤器定义包括这些条件：
::: itemizedlist
-   `ipacertmapdata=X509:{issuer_dn!nss_x500}{subject_dn!nss_x500}`{.literal}
    是一个过滤器，它将主题和签发者从智能卡证书链接到 IdM 用户帐户中的
    `ipacertmapdata`{.literal} 属性的值，如 IdM
    [中的添加证书映射规则所述](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_identity_management/conf-certmap-idm_configuring-and-managing-idm#proc-add-maprule_conf-certmap-for-users-in-idm){.link}
-   `altSecurityIdentities=X509:{issuer_dn!ad_x500}{subject_dn!ad_x500}`{.literal}
    是一个过滤器，它会将智能卡证书中的主体和签发者链接到 AD 用户帐户中的
    `altSecurityIdentities`{.literal} [属性的值，如如果将可信 AD
    域配置为映射用户证书时添加证书映射规则所述](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_identity_management/conf-certmap-idm_configuring-and-managing-idm#adding_a_certificate_mapping_rule_if_the_trusted_ad_domain_is_configured_to_map_user_certificates){.link}
-   添加 `--domain=ad.example.com`{.literal}
    选项意味着映射到给定证书的用户不仅在本地 `idm.example.com`{.literal}
    域中搜索，而且会在 `ad.example.com`{.literal} 域中搜索
:::
`--maprule`{.literal} 选项中的过滤器定义接受逻辑运算符 `|`{.literal}
（或），以便您可以指定多个条件。在这种情况下，规则映射了至少满足其中一个条件的所有用户帐户。
::: title
**证书映射过滤器示例 2**
:::
``` literallayout
$ ipa certmaprule-add ipa_cert_for_ad_users \
  --maprule='(|(userCertificate;binary={cert!bin})(ipacertmapdata=X509:{issuer_dn!nss_x500}{subject_dn!nss_x500})(altSecurityIdentities=X509:{issuer_dn!ad_x500}{subject_dn!ad_x500}))' \
  --matchrule='CN=Certificate Authority,O=REALM.EXAMPLE.COM' \
  --domain=idm.example.com --domain=ad.example.com
```
在上例中，`--maprule`{.literal} 选项中的过滤器定义包括这些条件：
::: itemizedlist
-   `userCertificate;binary={cert!bin}`{.literal}
    是一个过滤器，它返回包含整个证书的用户条目。对于 AD [用户，如果 AD
    用户条目不包含证书或映射数据，则会在添加证书映射规则中详细描述了创建此类型的过滤器](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_identity_management/conf-certmap-idm_configuring-and-managing-idm#adding_a_certificate_mapping_rule_if_the_ad_user_entry_contains_no_certificate_or_mapping_data){.link}。
-   `ipacertmapdata=X509:{issuer_dn!nss_x500}{subject_dn!nss_x500}`{.literal}
    是一个过滤器，它将主题和签发者从智能卡证书链接到 IdM 用户帐户中的
    `ipacertmapdata`{.literal} 属性的值，如 IdM
    [中的添加证书映射规则所述。](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_identity_management/conf-certmap-idm_configuring-and-managing-idm#proc-add-maprule_conf-certmap-for-users-in-idm){.link}
-   `altSecurityIdentities=X509:{issuer_dn!ad_x500}{subject_dn!ad_x500}`{.literal}
    是一个过滤器，它会将智能卡证书中的主题和签发者链接到 AD 用户帐户中的
    `altSecurityIdentities`{.literal} [属性的值，如如果将可信 AD
    域配置为映射用户证书时添加证书映射规则所述](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_identity_management/conf-certmap-idm_configuring-and-managing-idm#adding_a_certificate_mapping_rule_if_the_trusted_ad_domain_is_configured_to_map_user_certificates){.link}。
:::
`--maprule`{.literal} 选项中的过滤器定义接受逻辑运算符 `|`{.literal}
（或），以便您可以指定多个条件。在这种情况下，规则映射了至少满足其中一个条件的所有用户帐户。
:::
:::
[]{#dc-web-ui-auth_working-with-idm-certificates.html}
::: chapter
::: titlepage
# []{#dc-web-ui-auth_working-with-idm-certificates.html#dc-web-ui-auth_working-with-idm-certificates}第 9 章 使用存储在 IdM 客户端桌面的证书配置身份验证 {.title}
:::
通过配置身份管理(IdM)，IdM
系统管理员可以使用向用户签发的证书颁发机构(CA)的证书，使用户能够向 IdM
Web UI 和命令行界面(CLI)进行身份验证。
Web 浏览器可以在不属于 IdM 域的系统中运行。
此用户故事提供了如何有效地配置和测试身份管理 Web UI 和 CLI
中的日志记录以及 IdM 客户端桌面上存储的证书的说明。在此用户故事中，
::: itemizedlist
-   如果要使用证书进行身份验证的用户已拥有证书，可以跳过
    ["请求新的用户证书并将其导出到客户端"一节](#dc-web-ui-auth_working-with-idm-certificates.html#requesting-and-exporting-a-user-certificate_dc-web-ui-auth "请求新的用户证书并将其导出到客户端"){.xref}。
-   如果 IdM CA 发布了用户的证书，您可以跳过
    ["确保证书和用户链接在一起"一节](#dc-web-ui-auth_working-with-idm-certificates.html#making-sure-cert-and-user-are-linked-idm "确保证书和用户链接在一起"){.xref}。
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
只有身份管理用户可以使用证书登录 Web UI。Active Directory
用户可使用其用户名和密码登录。
:::
[]{#dc-web-ui-auth_working-with-idm-certificates.html#cert-idm-users-auth-preparing-the-server_dc-web-ui-auth}
::: section
::: titlepage
# []{#dc-web-ui-auth_working-with-idm-certificates.html#_configuring_the_identitymanagement_server_for_certificate_authentication_in_the_web_ui}在 Web UI 中配置身份管理服务器以进行证书身份验证 {.title}
:::
作为身份管理(IdM)管理员，您可以允许用户使用证书为您的 IdM
环境进行身份验证。
::: title
**流程**
:::
作为身份管理管理员：
::: orderedlist
1.  在身份管理服务器上，获取管理员特权并创建 shell 脚本来配置服务器。
    ::: orderedlist
    1.  运行 `ipa-advise config-server-for-smart-card-auth`{.literal}
        命令，将其输出保存到文件中，例如
        `server_certificate_script.sh`{.literal} ：
        ``` literallayout
        # kinit admin
        # ipa-advise config-server-for-smart-card-auth > server_certificate_script.sh
        ```
    2.  使用 `chmod`{.literal} 实用程序为文件添加执行权限：
        ``` literallayout
        # chmod +x server_certificate_script.sh
        ```
    :::
2.  在 Identity Management 域的所有服务器上，运行
    `server_certificate_script.sh`{.literal} 脚本
    ::: orderedlist
    1.  使用 IdM 证书颁发机构证书的路径
        `/etc/ipa/ca.crt`{.literal}，如果 IdM CA
        是为您想在其中启用证书验证的用户证书的唯一证书颁发机构，则输入：
        ``` literallayout
        # ./server_certificate_script.sh /etc/ipa/ca.crt
        ```
    2.  如果不同的外部 CA
        签署您想要为其启用证书验证的用户证书，则使用路径作为输入：
        ``` literallayout
        # ./server_certificate_script.sh /tmp/ca1.pem /tmp/ca2.pem
        ```
    :::
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
如果要为整个拓扑中启用用户的证书身份验证，请不要忘记在将来添加到系统的每个新副本上运行
脚本。
:::
:::
::: section
::: titlepage
# []{#dc-web-ui-auth_working-with-idm-certificates.html#requesting-and-exporting-a-user-certificate_dc-web-ui-auth}请求新的用户证书并将其导出到客户端 {.title}
:::
作为身份管理(IdM)管理员，您可以为 IdM
环境中的用户创建证书，并将其导出到您要为用户启用证书身份验证的 IdM
客户端。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
如果要使用证书进行身份验证的用户已拥有证书，可以跳过本节。
:::
::: orderedlist
**流程**
1.  另外，还可创建一个新目录，例如
    `~/certdb/`{.literal}，并使其成为临时证书数据库。当系统提示时，创建一个
    NSS 证书数据库密码来加密后续步骤中生成的证书的密钥：
    ``` literallayout
    # mkdir ~/certdb/
    # certutil -N -d ~/certdb/
    Enter a password which will be used to encrypt your keys.
    The password should be at least 8 characters long,
    and should contain at least one non-alphabetic character.
    Enter new password:
    Re-enter password:
    ```
2.  创建证书签名请求(CSR)，并将输出重定向到文件。例如，要为
    `certificate_request.csr`{.literal} 域中的 `4096`{.literal}
    用户创建名称为 `idm_user`{.literal} 的 CSR，请将证书私钥的 nickname
    设置为 `IDM.EXAMPLE.COM`{.literal} 以获得易找到性，并设置为
    `idm_user`{.literal} ： `CN=idm_user,O=IDM.EXAMPLE.COM`{.literal}
    ``` literallayout
    # certutil -R -d ~/certdb/ -a -g 4096 -n idm_user -s "CN=idm_user,O=IDM.EXAMPLE.COM" > certificate_request.csr
    ```
3.  提示时，输入您在使用 `certutil`{.literal}
    创建临时数据库时输入的相同密码。然后继续键入 rundlomly
    直到通知停止：
    ``` literallayout
    Enter Password or Pin for "NSS Certificate DB":
    A random seed must be generated that will be used in the
    creation of your key.  One of the easiest ways to create a
    random seed is to use the timing of keystrokes on a keyboard.
    To begin, type keys on the keyboard until this progress meter
    is full.  DO NOT USE THE AUTOREPEAT FUNCTION ON YOUR KEYBOARD!
    Continue typing until the progress meter is full:
    ```
4.  将证书请求文件提交到服务器。指定要与新发布的证书关联的 Kerberos
    主体、存储证书的输出文件，以及可选的证书配置集。例如，要获取
    `IECUserRoles`{.literal}
    配置集的证书，带有添加的用户角色扩展的配置文件，`idm_user`{.literal}@`IDM.EXAMPLE.COM`{.literal}
    主体，并将它保存到 `~/idm_user.pem`{.literal} 文件中：
    ``` literallayout
    # ipa cert-request certificate_request.csr --principal=PI:EMAIL --profile-id=IECUserRoles --certificate-out=~/idm_user.pem
    ```
5.  将证书添加到 NSS 数据库。使用 `-n`{.literal} 选项设置之前创建 CSR
    时使用的相同 nickname，以便证书与 NSS
    数据库中的私钥匹配。`-t`{.literal} 选项设定信任级别。详情请查看
    certutil(1)man page。`-i`{.literal} 选项指定输入证书文件。例如：要在
    NSS 数据库中添加带有 `idm_user`{.literal} nickname
    的证书，该证书存储在 `~/certdb/`{.literal} 数据库的
    `~/idm_user.pem`{.literal} 文件中：
    ``` literallayout
    # certutil -A -d ~/certdb/ -n idm_user -t "P,," -i ~/idm_user.pem
    ```
6.  验证 NSS 数据库中的键没有显示 `(orphan)`{.literal} 作为其
    nickname。例如，验证存储在 `~/certdb/`{.literal}
    数据库中的证书没有被孤立：
    ``` literallayout
    # certutil -K -d ~/certdb/
     rsa      5ad14d41463b87a095b1896cf0068ccc467df395   NSS Certificate DB:idm_user
    ```
7.  使用 `pk12util`{.literal} 命令将证书从 NSS 数据库导出到 PKCS12
    格式。例如，使用 `idm_user`{.literal} nickname 从
    `/root/certdb`{.literal} NSS 数据库导出证书到
    `~/idm_user.p12`{.literal} 文件中：
    ``` literallayout
    # pk12util -d ~/certdb -o ~/idm_user.p12 -n idm_user
    Enter Password or Pin for "NSS Certificate DB":
    Enter password for PKCS12 file:
    Re-enter password:
    pk12util: PKCS12 EXPORT SUCCESSFUL
    ```
8.  将证书传输到您要启用 `idm_user`{.literal} 的证书验证的主机：
    ``` literallayout
    # scp ~/idm_user.p12 PI:EMAIL:/home/idm_user/
    ```
9.  在传输了证书的主机上，出于安全原因使 \'pkcs12 文件被 \'other\'
    组无法访问的目录：
    ``` literallayout
    # chmod o-rwx /home/idm_user/
    ```
10. 出于安全考虑，请从服务器中删除临时 NSS 数据库和 .pkcs12 文件：
    ``` literallayout
    # rm ~/certdb/
    # rm ~/idm_user.p12
    ```
:::
:::
::: section
::: titlepage
# []{#dc-web-ui-auth_working-with-idm-certificates.html#making-sure-cert-and-user-are-linked-idm}确保证书和用户链接在一起 {.title}