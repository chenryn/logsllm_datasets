*  特性驱动开发   Feature-Driven Development （FDD）
*  测试驱动开发   Test-Driven Development （TDD）
*  水晶方法   Crystal 
*  动态系统开发方法   Dynamic Systems Development Method （DSDM）
*  自适应软件开发   Adaptive Software Development （ASD）
所有这些已经被单独用于或一起用于开发和部署软件。最常用的是 [Scrum](https://opensource.com/article/19/8/scrum-vs-kanban)、看板（或 Scrumban）和 DevOps。
[Scrum](https://www.scrum.org/) 是一个框架，采用该框架的团队通常由一个 Scrum 教练、产品经理和开发人员组成，该团队以跨职能、自主的工作方式运作，能够加快软件交付速度从而给客户带来巨大的商业价值。其关注点是[较小增量](https://www.scrum.org/resources/what-is-an-increment)的快速迭代。
[看板](https://www.atlassian.com/agile/kanban) 是一个敏捷框架，有时也叫工作流管理系统，它能帮助团队可视化他们的工作从而最大化效率（因而变得敏捷）。看板通常由数字或物理展示板来呈现。团队的工作在展示板上随着进度而移动，例如从未启动到进行中，一直到测试中、已完成。看板使得每个团队成员可以随时查看到所有工作的状态。
### DevOps 价值观
DevOps 是一种文化，是一种思维状态，是一种软件开发的方式或者基础设施的方式，也是一种构建和部署软件和应用的方式。它假设开发和运维之间没有隔阂，他们一起合作，没有矛盾。
DevOps 基于其它两个领域的实践: 精益和敏捷。DevOps 不是一个公司内的岗位或角色；它是一个组织或团队对持续交付、持续部署和持续集成的坚持不懈的追求。[Gene Kim](https://itrevolution.com/the-unicorn-project/)（Phoenix 项目和 Unicorn 项目的作者）认为，有三种方式定义 DevOps 的理念：
* 第一种: 流程原则
* 第二种: 反馈原则
* 第三种: 持续学习原则
### DevOps 软件开发
DevOps 不会凭空产生；它是一种灵活的实践，它的本质是一种关于软件开发和 IT 或基础设施实施的共享文化和思维方式。
当你想到自动化、云、微服务时，你会想到 DevOps。在一次[访谈](https://www.infoq.com/articles/book-review-accelerate/)中，《加速构建和扩张高性能技术组织》的作者 Nicol Forsgren、Jez Humble 和 Gene Kim 这样解释到：
> 
> * 软件交付能力很重要，它极大地影响到组织的成果，例如利润、市场份额、质量、客户满意度以及组织战略目标的达成。
> * 优秀的团队能达到很高的交付量、稳定性和质量；他们并没有为了获得这些属性而进行取舍。
> * 你可以通过实施精益、敏捷和 DevOps 中的实践来提升能力。
> * 实施这些实践和能力也会影响你的组织文化，并且会进一步对你的软件交付能力和组织能力产生有益的提升。
> * 懂得怎样改进能力需要做很多工作。
> 
> 
> 
### DevOps 和敏捷的对比
DevOps 和敏捷有相似性，但是它们不完全相同，一些人认为 DevOps 比敏捷更好。为了避免造成混淆，深入地了解它们是很重要的。
#### 相似之处
* 毫无疑问，两者都是软件开发技术。
* 敏捷已经存在了 20 多年，DevOps 是最近才出现的。
* 两者都追求软件的快速开发，它们的理念都基于怎样在不伤害客户或运维利益的情况下快速开发出软件。
#### 不同之处
* 两者的差异在于软件开发完成后发生的事情。
	+ 在 DevOps 和敏捷中，都有软件开发、测试和部署的阶段。然而，敏捷流程在这三个阶段之后会终止。相反，DevOps 包括后续持续的运维。因此，DevOps 会持续的监控软件运行情况和进行持续的开发。
* 敏捷中，不同的人负责软件的开发、测试和部署。而 DevOps 工程角色负责所有活动，开发即运维，运维即开发。
* DevOps 更关注于削减成本，而敏捷则是精益和减少浪费的代名词，侧重于像敏捷项目会计和最小可行产品的概念。
* 敏捷专注于并体现了经验主义（适应、透明和检查），而不是预测性措施。
| 敏捷 | DevOps |
| --- | --- |
| 从客户得到反馈 | 从自己得到反馈 |
| 较小的发布周期 | 较小的发布周期，立即反馈 |
| 聚焦于速度 | 聚焦于速度和自动化 |
| 对业务不是最好 | 对业务最好 |
### 总结
敏捷和 DevOps 是截然不同的，尽管它们的相似之处使人们认为它们是相同的。这对敏捷和 DevOps 都是一种伤害。
根据我作为一名敏捷专家的经验，我发现对于组织和团队从高层次上了解敏捷和 DevOps 是什么，以及它们如何帮助团队更高效地工作，更快地交付高质量产品从而提高客户满意度非常有价值。
敏捷和 DevOps 绝不是对抗性的（或至少没有这个意图）。在敏捷革命中，它们更像是盟友而不是敌人。敏捷和 DevOps 可以相互协作一致对外，因此可以在相同的场合共存。
---
via: 
作者：[Taz Brown](https://opensource.com/users/heronthecli) 选题：[lujun9972](https://github.com/lujun9972) 译者：[messon007](https://github.com/messon007) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出