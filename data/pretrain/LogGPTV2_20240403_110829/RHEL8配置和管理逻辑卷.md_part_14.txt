```
在指定 JSON 格式时，以下命令显示同一 LVM 配置的输出。
``` literallayout
# lvs --reportformat json
  {
      "report": [
          {
              "lv": [
                  {"lv_name":"my_raid", "vg_name":"my_vg", "lv_attr":"Rwi-a-r---", "lv_size":"12.00m", "pool_lv":"", "origin":"", "data_percent":"", "metadata_percent":"", "move_pv":"", "mirror_log":"", "copy_percent":"100.00", "convert_lv":""},
                  {"lv_name":"root", "vg_name":"rhel_host-075", "lv_attr":"-wi-ao----", "lv_size":"6.67g", "pool_lv":"", "origin":"", "data_percent":"", "metadata_percent":"", "move_pv":"", "mirror_log":"", "copy_percent":"", "convert_lv":""},
                  {"lv_name":"swap", "vg_name":"rhel_host-075", "lv_attr":"-wi-ao----", "lv_size":"820.00m", "pool_lv":"", "origin":"", "data_percent":"", "metadata_percent":"", "move_pv":"", "mirror_log":"", "copy_percent":"", "convert_lv":""}
              ]
          }
      ]
  }
```
您还可以使用 `output_format`{.literal} 设置将报告格式设置为
`/etc/lvm/lvm.conf`{.literal} 文件中的配置选项。但是，命令行的
`--reportformat`{.literal} 设置优先于这个设置。
:::
::: section
::: titlepage
# []{#assembly_customizing-lvm-display-configuring-and-managing-logical-volumes.html#proc_displaying-lvm-command-log-customizing-lvm-display}显示 LVM 命令日志 {.title}
:::
如果 `log/report_command_log`{.literal}
配置设置启用了这个选项，则面向报告的 LVM
命令都可以报告该命令日志。您可以确定要显示的一组字段，并为此报告排序。
以下示例将 LVM 配置为为 LVM
命令生成完整的日志报告。在这个示例中，您可以看到逻辑卷 `lvol0`{.literal}
和 `lvol1`{.literal} 都已成功处理，包含卷的卷组 `VG`{.literal}
也是如此。
``` literallayout
# lvmconfig --type full log/command_log_selection
command_log_selection="all"
# lvs
  Logical Volume
  ==============
  LV    LSize Cpy%Sync
  lvol1 4.00m 100.00
  lvol0 4.00m
  Command Log
  ===========
  Seq LogType Context    ObjType ObjName ObjGrp  Msg     Errno RetCode
    1 status  processing lv      lvol0   vg      success     0       1
    2 status  processing lv      lvol1   vg      success     0       1
    3 status  processing vg      vg              success     0       1
# lvchange -an vg/lvol1
  Command Log
  ===========
  Seq LogType Context    ObjType ObjName ObjGrp  Msg     Errno RetCode
    1 status  processing lv      lvol1   vg      success     0       1
    2 status  processing vg      vg              success     0       1
```
有关配置 LVM 报告和命令日志的详情请参考 `lvmreport`{.literal} man page。
:::
:::
[]{#assembly_configure-mange-raid-configuring-and-managing-logical-volumes.html}
::: chapter
::: titlepage
# []{#assembly_configure-mange-raid-configuring-and-managing-logical-volumes.html#assembly_configure-mange-raid-configuring-and-managing-logical-volumes}第 10 章 配置 RAID 逻辑卷 {.title}
:::
您可以创建、激活、更改、删除、显示和使用 LVM RAID 卷。
::: section
::: titlepage
# []{#assembly_configure-mange-raid-configuring-and-managing-logical-volumes.html#con_raid-logical-volumes_configure-manage-raid}RAID 逻辑卷 {.title}
:::
LVM 支持 RAID 0、1、4、5、6 和 10。
LVM RAID 卷有以下特征：
::: itemizedlist
-   LVM 创建和管理的 RAID 逻辑卷利用多设备（MD）内核驱动程序。
-   您可以从阵列中临时分割 RAID1 镜像，并在之后将其合并到阵列中。
-   LVM RAID 卷支持快照。
:::
::: title
**集群**
:::
RAID 逻辑卷不是集群感知型逻辑卷。
您可以只在一台机器中创建和激活 RAID
逻辑卷，但不能在多台机器中同时激活它们。
::: title
**子卷**
:::
当您创建 RAID 逻辑卷时，LVM
会为阵列中的每个数据或奇偶校验子卷创建一个元数据子卷。
例如：创建一个双向 RAID1
阵列会导致两个元数据子卷（`lv_rmeta_0`{.literal} 和
`lv_rmeta_1`{.literal}）和两个数据子卷（`lv_rimage_0`{.literal} 和
`lv_rimage_1`{.literal}）。同样，创建三向条带（加 1
隐式奇偶校验设备）RAID4 会产生 4
个元数据子卷（`lv_rmeta_0`{.literal}、`lv_rmeta_1`{.literal}、`lv_rmeta_2`{.literal}和
`lv_rmeta_3`{.literal}）和 4
个数据子卷（`lv_rimage_0`{.literal}、`lv_rimage_1`{.literal}、`lv_rimage_2`{.literal}和
`lv_rimage_3`{.literal}）。
::: title
**完整性**
:::
当 RAID
设备失败或者发生软崩溃时，可能会丢失数据。数据存储中的软崩溃意味着，从存储设备中检索的数据与写入到那个设备中的数据不同。在
RAID LV
中添加完整性有助于缓解或防止软崩溃。要了解更多有关软崩溃以及如何在 RAID
LV 中添加完整性的信息，请参阅 ["使用带有 RAID LV 的 DM
完整性功能"一节](#assembly_configure-mange-raid-configuring-and-managing-logical-volumes.html#using-dm-integrity-with-raid-lv_configure-manage-raid "使用带有 RAID LV 的 DM 完整性功能"){.xref}。
:::
::: section
::: titlepage
# []{#assembly_configure-mange-raid-configuring-and-managing-logical-volumes.html#raid-levels-and-linear-support_configure-manage-raid}RAID 级别和线性支持 {.title}
:::
RAID 支持各种配置，包括 0、1、4、5、6、10 和 linear。这些 RAID
类型定义如下：
::: variablelist
[0 级]{.term}
:   RAID 级别
    0，通常被称为[*条带化*]{.emphasis}数据映射技术。这意味着，要写入阵列的数据被分成条块，并在阵列的成员磁盘中写入，这样可以在成本低的情况下提供高的
    I/O 性能，但不提供冗余。
    许多 RAID 级别 0
    的实现只在成员设备间条状分布到阵列中最小设备的大小。就是说，如果您有多个设备，它们的大小稍有不同，那么每个设备的大小都被视为与最小设备的大小相同。因此，级别
    0 阵列的一般存储容量等于，硬件 RAID
    中容量最小的成员磁盘的容量，或软件 RAID
    中的最小成员分区的容量，在乘以阵列中的磁盘或分区的数量。
[1 级]{.term}
:   RAID 级别 1
    或称为[*镜像*]{.emphasis}，通过将相同数据写入阵列的每个磁盘来提供冗余，在每个磁盘上保留\"镜像\"副本。因为其简单且数据高度可用，RAID
    1 仍然被广泛使用。级别 1
    需要两个或者多个磁盘，它提供了很好的数据可靠性，提高了需要读取的应用程序的性能，但是成本相对高。
    为了实现数据可靠性，需要向阵列中的所有磁盘写入相同的信息，所以 RAID
    1 的成本会很高。与基于奇偶校验的其他级别（如级别
    5）相比，空间的利用效率较低。然而，对空间利用率的牺牲提供了高性能：基于奇偶校验的
    RAID 级别会消耗大量 CPU 资源以便获得奇偶校验，而 RAID 级别 1
    只是一次向多个 RAID 成员中写入同样数据，其对 CPU
    的消耗较小。因此，在使用软件 RAID
    的系统中，或系统中有其他操作需要大量使用 CPU 资源时，RAID 1
    可能会比使用基于奇偶校验的 RAID 级别的性能更好。
    级别 1 阵列的存储容量等于硬件 RAID 中最小镜像硬盘或者软件 RAID
    中最小镜像分区的容量相同。级别 1 所提供的冗余性是所有 RAID
    级别中最高的，因为阵列只需要在有一个成员可以正常工作的情况下就可以提供数据。
[级别 4]{.term}
:   级别 4
    使用单一磁盘驱动器中的奇偶校验来保护数据。奇偶校验信息根据阵列中其余成员磁盘的内容计算。然后当阵列中的一个磁盘失败时，这个信息就可以被用来重建数据。然后，在出现问题的磁盘被替换前，使用被重建的数据就可以满足
    I/O 的请求。在磁盘被替换后，可以在上面重新生成数据。
    因为 RAID 4 使用一个专门的偶校验磁盘，因此这个磁盘就会成为对 RAID
    阵列的写入操作的一个固有的瓶颈。所以， RAID 4
    较少被使用。因此，Anaconda 中并没有提供 RAID 4
    这个选项。但是，如果真正需要，用户可以手动创建它。
    硬件 RAID 4
    的存储容量等于分区数量[*减一*]{.emphasis}乘以最小成员分区的容量。RAID
    4
    阵列的性能是非对称的，即读的性能会好于写的性能。这是因为，写入会在生成奇偶校验时消耗额外的
    CPU
    和主内存带宽，然后在将实际数据写入磁盘时也消耗额外的总线带宽，因为您不仅是写入数据，而且是奇偶校验。读取只需要读取数据而不是奇偶校验，除非该阵列处于降级状态。因此，在正常操作条件下，读取会在计算机的驱动器和总线间产生较少的流量，以实现相同数量的数据传输。
[5 级]{.term}
:   这是最常见的 RAID
    类型。通过在一个阵列的所有成员磁盘中分布奇偶校验，RAID 5 解除了级别
    4 中原有的写入瓶颈。唯一性能瓶颈是奇偶校验计算过程本身。在使用现代
    CPU 和软件 RAID 时，这通常不会成为瓶颈，因为现代 CPU
    可能会非常快速地生成奇偶校验。然而，如果您的软件 RAID5
    阵列中有大量成员设备，且在所有设备间有大量的数据进行传输时，就可能出现瓶颈。
    和级别 4 一样，级别 5 的性能也是非对称的，读性能会高于写的性能。RAID
    5 的存储容量的计算方法与级别 4 的计算方法是一样的。
[级别 6]{.term}
:   如果数据的冗余性和保护性比性能更重要，且无法接受 RAID 1
    的空间利用率低的问题，则通常会选择使用级别 6。级别 6
    使用一个复杂的奇偶校验方式，可以在阵列中出现任意两个磁盘失败的情况下进行恢复。因为使用的奇偶校验方式比较复杂，软件
    RAID 设备会对 CPU
    造成较大负担，同时对写操作造成更大的负担。因此，与级别 4 和 5
    相比，级别 6 的性能不对称性更严重。
    RAID 6 阵列的总容量与 RAID 5 和 4
    类似，但您必须从设备数量中减小两个（而不是 1
    个）额外奇偶校验存储空间的设备数。
[级别 10]{.term}
:   这个 RAID 级别将级别 0 的性能优势与级别 1
    的冗余合并。它还有助于减少在有多于 2 个设备时，级别 1
    阵列中的利用率低的问题。在级别 10 中，可以创建一个 3
    个驱动器阵列来只存储每个数据的 2
    个副本，然后允许整个阵列的大小达到最小设备的 1.5
    倍，而不是只等于最小设备（与有 3 个设备的级别 1 阵列相同）。与 RAID
    级别 6 相比，计算奇偶校验对 CPU 的消耗较少，但空间效率较低。
    在安装过程中，不支持创建 RAID 10。您可在安装后手动创建。
[线性 RAID]{.term}
:   线性 RAID 是创建更大的虚拟驱动器的一组驱动器。
    在线性 RAID
    中，块会被从一个成员驱动器中按顺序分配，只有在第一个完全填充时才会进入下一个驱动器。这个分组方法不会提供性能优势，因为
    I/O 操作不太可能在不同成员间同时进行。线性 RAID
    也不提供冗余性，并会降低可靠性。如果有任何一个成员驱动器失败，则无法使用整个阵列。该容量是所有成员磁盘的总量。
:::
:::
::: section
::: titlepage
# []{#assembly_configure-mange-raid-configuring-and-managing-logical-volumes.html#lvm-raid-segment-types_configure-manage-raid}LVM RAID 片段类型 {.title}
:::
要创建一个 RAID 逻辑卷，在 `lvcreate`{.literal} 命令中使用
`--type`{.literal} 参数。下表描述了可能的 RAID 片段类型。
对于大多数用户，指定五个可用主类型之一（`raid1`{.literal}、`raid4`{.literal}、`raid5`{.literal}、`raid6`{.literal}、`raid10`{.literal}）应该足够了。
::: table
[]{#assembly_configure-mange-raid-configuring-and-managing-logical-volumes.html#idm140471752105072}
**表 10.1. LVM RAID 片段类型**
::: table-contents
+------------------------------+--------------------------------------+
| 片段类型                     | 描述                                 |
+:=============================+:=====================================+
| `raid1`{.literal}            | RAID1 镜像。当您指定 `-m`{.literal}  |
|                              | 但您没有指定条状时，这是             |
|                              | `lvcreate`{.literal} 命令的          |
|                              | `--type`{.literal} 参数的默认值。    |
+------------------------------+--------------------------------------+
| `raid4`{.literal}            | RAID4 专用奇偶校验磁盘               |
+------------------------------+--------------------------------------+
| `raid5`{.literal}            | 与 `raid5_ls`{.literal} 相同         |
+------------------------------+--------------------------------------+
| `raid5_la`{.literal}         | ::: itemizedlist                     |
|                              | -   RAID5 左非对称。                 |
|                              | -   轮转奇偶校验 0 并分配数据        |
|                              | :::                                  |
+------------------------------+--------------------------------------+
| `raid5_ra`{.literal}         | ::: itemizedlist                     |
|                              | -   RAID5 右非对称。                 |
|                              | -   轮转奇偶校验 N 并分配数据        |
|                              | :::                                  |
+------------------------------+--------------------------------------+
| `raid5_ls`{.literal}         | ::: itemizedlist                     |
|                              | -   RAID5 左对称。                   |
|                              | -   使用数据重启来轮换奇偶校验 0     |
|                              | :::                                  |
+------------------------------+--------------------------------------+
| `raid5_rs`{.literal}         | ::: itemizedlist                     |
|                              | -   RAID5 右对称。                   |
|                              | -   使用数据重启轮转奇偶校验 N       |
|                              | :::                                  |
+------------------------------+--------------------------------------+
| `raid6`{.literal}            | 与 `raid6_zr`{.literal} 相同         |
+------------------------------+--------------------------------------+
| `raid6_zr`{.literal}         | ::: itemizedlist                     |
|                              | -   RAID6 零重启                     |
|                              | -                                    |
|                              | 通过数据重启轮转奇偶校验零（左至右） |
|                              | :::                                  |
+------------------------------+--------------------------------------+
| `raid6_nr`{.literal}         | ::: itemizedlist                     |
|                              | -   RAID6 N 重启                     |
|                              | -   通过数据重启轮转奇偶校验         |
|                              |     N（左至右）                      |
|                              | :::                                  |
+------------------------------+--------------------------------------+
| `raid6_nc`{.literal}         | ::: itemizedlist                     |
|                              | -   RAID6 N 继续                     |
|                              | -   轮转奇偶校验                     |
|                              |     N（左至右）并延续数据            |
|                              | :::                                  |
+------------------------------+--------------------------------------+
| `raid10`{.literal}           | ::: itemizedlist                     |
|                              | -   条状镜像。如果您指定             |
|                              |     `-m`{.literal} 并指定大于 1      |
|                              |     的条带数，则                     |