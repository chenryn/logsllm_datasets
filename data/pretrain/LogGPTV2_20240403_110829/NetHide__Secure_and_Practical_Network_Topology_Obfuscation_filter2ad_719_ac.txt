The overall accuracy of a topology (as referred to in
§6) is deﬁned as the average accuracy over all ﬂows in F:
Aavg(P,V ) = avg(s,d)∈F acc((s,d),P,V )
We point out that the accuracy metric in NetHide can
also be computed by any other function to precisely rep-
resent the network operator’s needs.
Input: Flow (s,d) ∈ F,
physical topology P = (N,L,T ),
virtual topology V = (N(cid:48),L(cid:48),T(cid:48))
(cid:19)
Output: utility u ∈ [0,1]
for n ∈ T(cid:48)
s→d do
(cid:18) |C|
2
// utility
s→d| ∑n∈T(cid:48)
s→d
// common links
|Ts→n| +
un
s→d[0 : n]
|C|
|T(cid:48)
s→d [0:n]|
C ← Ts→n ∩ T(cid:48)
un ← 1
u ← 1|T(cid:48)
Algorithm 1: Utility metric. It incorporates the likeli-
hood that a failure in the physical topology P is visible
in the virtual topology V and that a failure in V actually
exists in P. Note that we treat Ts→d as a set of links.
// average
4.3 Utility metric
While the accuracy measures the similarity between the
physical and virtual paths for a given ﬂow, the utility
measures the representation of physical events, such as
link failures. For our implementation, we design the util-
ity metric such that it computes the probability that a link
failure in the physical path is observed in the virtual path
and the probability that a failure reported in the virtual
path is indeed occurring in the physical path.
Algorithm 1 describes the computation of our utility
metric for a given ﬂow (s,d). In the algorithm, given a
s→d = s → n1 → ··· → nk → d, we write
virtual path T(cid:48)
s→d[0 : ni] to denote the preﬁx path s → n1 → ··· → ni.
T(cid:48)
NetHide computes the overall utility by taking the aver-
age utility computed over all ﬂows:
Uavg = avg(s,d)∈F util((s,d),P,V )
As with accuracy, a network operator is free to imple-
ment a custom utility metric.
In most cases, the accuracy and utility are strongly
linked together (we show this in §6). However, as illus-
trated in Fig. 5, there exist cases where the accuracy is
high and the utility low or vice-versa.
(a) high accuracy, low utility
(b) low accuracy, high utility
Figure 5: High accuracy does not always imply high util-
ity (and vice-versa). In Fig. 5a, the physical and virtual
paths are similar but the tracing packets do not cross the
physical links. In Fig. 5b, the physical and virtual paths
are dissimilar but the tracing packets do cross the physi-
cal links.
698    27th USENIX Security Symposium
USENIX Association
physicalpathvirtualpathpathsof tracingpackets4.4 Scalability
To obfuscate topologies with maximal accuracy and util-
ity, a naive approach would consider all possible changes
to P, which is infeasible even for small topologies.
NetHide signiﬁcantly reduces the number of candidate
solutions in order to ensure reasonable runtime while
providing close-to-optimal accuracy and utility. The key
insight is that NetHide pre-computes a set of forward-
ing trees for each node and later computes V as the opti-
mal combination of them. Thanks to the reduction from
modeling individual links or paths to forwarding trees,
NetHide only considers valid combinations of paths (i.e.,
paths that form a tree rooted at n, ∀n ∈ N(cid:48)).
For computing the forwarding trees, NetHide builds a
complete graph G with all nodes from V , that is G =
(V,E) where V = N(cid:48) and E = N(cid:48) × N(cid:48), and assigns each
edge the same weight w(e) = 1 ∀e ∈ E. Then, NetHide
uses Dijkstra’s algorithm [21] to compute forwarding
trees towards each node n ∈ N(cid:48). That is, a set of paths
where the paths form a tree which is rooted at n. This is
repeated until the speciﬁed number of forwarding trees
per node is obtained while the weights are randomly cho-
sen w(e) ∼ Uniform(1,10) for each iteration.
As NetHide pre-computes a ﬁxed number of forward-
ing trees per node, the ILP solver later only needs to ﬁnd
an optimal combination of O(|N(cid:48)|) forwarding trees in-
stead of O(|N(cid:48)|2) links and O(|N(cid:48)||N(cid:48)|) forwarding trees.
We point out that the reduction from individual links
or paths to forwarding trees and the small number of con-
sidered forwarding trees does not affect the security of V
as security is a hard constraint and thus, NetHide never
produces a topology that is insecure. In fact, the small
number of considered forwarding trees actually makes
NetHide more secure because it makes it harder to deter-
mine P even for a powerful brute-force attacker that can
run NetHide with every possible input.
4.5 Security
We now discuss the security provided by NetHide. We
consider two distinct attacker strategies: (i) reconstruct-
ing the physical topology P from the virtual topology V ;
and (ii) choosing an attack based on the observed virtual
topology V (without explicitly reconstructing P). We de-
scribe the two strategies below.
Reconstructing the physical topology
If the attacker
can reconstruct P, then she can check if P is insecure
and select a link and a set of ﬂows that congests that
link. Reconstructing the physical topology is mitigated
in two ways. First, the attacker cannot reconstruct P with
certainty by simply observing the virtual topology V .
NetHide’s obfuscation function maps any physical topol-
ogy that is secure to itself (i.e., to P). The obfusca-
tion function is therefore not injective, which entails that
NetHide guarantees opacity [35], a well-known security
property stipulating that the attacker does not know the
secret P.
Given that the attacker cannot reconstruct P with cer-
tainty, she may attempt to make an educated guess based
on the observed V and her knowledge about NetHide’s
obfuscation function. Concretely, the attacker may per-
form exact Bayesian inference to discover the most likely
topology T that was given as input to the obfuscation
function. Exact inference is, however, highly non-trivial
as NetHide’s obfuscation function relies on a complex
set of constraints. As an alternative, the attacker may at-
tempt to approximately discover a topology T that was
likely provided as input to NetHide. Estimating the like-
lihood that a topology T could produce V is, however,
expensive because NetHide’s obfuscation is highly ran-
domized. That is, the estimation step would require a
large number of samples, obtained by running T using
the obfuscation function.
Choosing an attack In principle, even if the attacker
cannot reconstruct P, she may still attempt to attack the
network by selecting a set of ﬂows and checking if these
cause congestion or not. As a base case for this strategy,
the attacker may randomly pick a set of ﬂows. A more
advanced attacker would leverage her knowledge about
the observed topology to select the set of ﬂows such that
the likelihood of a successful attack is maximized.
In our evaluation, we consider three concrete strate-
gies: (i) random, where the attacker selects the set
of ﬂows uniformly at random, (ii) bottleneck+random,
where the attacker selects a link with the highest ﬂow
density and selects additional ﬂows uniformly at ran-
dom from the remaining set of ﬂows, and (iii) bottle-
neck+closeness, where the attacker selects a link with
the highest ﬂow density and selects additional ﬂows
based on their distance to the link. Our results show that
NetHide can mitigate these attacks even for powerful at-
tackers (which can run many ﬂows) and weak physical
topologies (with small link capacities) while still pro-
viding high accuracy and utility (cf. §6.7). For exam-
ple, NetHide provides 90% accuracy and 72% utility
while limiting the probability of success to 1% for an at-
tacker which can run twice the required number of ﬂows
and follows the bottleneck+random strategy in a physical
topology where 20% of the links are insecure.
Finally, we remark that while our results indicate that
NetHide successfully mitigates advanced attackers, pro-
viding a formal probabilistic guarantee on the success of
the attacker is an interesting and challenging open prob-
lem. As part of our future work, we plan to formalize a
class of attackers, which would allow us to formulate and
prove a formal guarantee on that class.
USENIX Association
27th USENIX Security Symposium    699
5 NetHide topology deployment
In this section, we describe how NetHide deploys the vir-
tual topology V on top of the physical topology P. For
this, we ﬁrst state the challenges NetHide needs to ad-
dress. Then, we provide insights on the programming
language and the architecture using which we imple-
mented NetHide and describe the packet processing soft-
ware as well as the controller in detail. In addition, we
explain the design choices that make NetHide partially
deployable and we discuss the impact of changes in the
physical topology to the virtual topology.
Packet manipulations at line rate To avoid tamper-
ing with network performance, NetHide needs to parse
and modify network packets at line-rate. In particular, it
needs manipulate the TTL ﬁeld in IP headers as well as
the IP source and destination addresses. Since changing
these ﬁelds leads to a changed checksum in the IP header,
NetHide also needs to re-compute checksums.
While there are many architectures and devices where
the NetHide runtime can operate, we decided to imple-
ment it in P4, which we introduce in the next section.
5.1 Challenges
5.2 NetHide and P4
In the following, we explain the major challenges which
need to be addressed by the design and the implemen-
tation of the NetHide topology deployment in order to
provide high security, accuracy, utility and performance.
Reﬂecting physical events in virtual topology Main-
taining the usefulness of network tracing and debugging
tools is a major requirement for any network obfuscation
scheme to be practical. As we explained in the previous
sections, NetHide ensures that tracing V returns mean-
ingful information by maximizing the utility metric. As
a consequence, NetHide must assure that the data plane
is acting in a way that corresponds to the utility metric.
The key idea to ensure high utility in NetHide is that
the tracing packets are sent through the physical network
as opposed to being answered at the edge or by a central
controller. Answering to tracing packets from a single
point is impractical as events in P (such as link failures)
would not be visible.
Timing-based ﬁngerprinting of devices Besides the IP
address of each node in a path, tracing tools allow to de-
termine the round trip time (RTT) between the source
and each node in the path. This can potentially be used
to identify obfuscated parts of a path.
While packets forwarding is usually done in hard-
ware without noticeable delay, answering to an expired
(TTL=0) IP packet involves the router control plane
and causes a noticeable delay. Actually, our experiments
show that the time it takes for a router to answer to an
expired packet not only varies greatly, but is also char-
acteristic for the device, making it possible to identify a
device based on the distribution of its processing time.
NetHide makes RTT measurements realistic by ensur-
ing that a packet that is supposedly answered by node
n is effectively answered by n. As such, n will process
the packet as any other packet with an expired TTL irre-
spective of whether or not obfuscation is in place and the
measured RTT is the RTT between the source host and n.
P4 [20] is a domain-speciﬁc programming language that
allows programming the data plane of a network. It is de-
signed to be both protocol- and target-independent mean-
ing that it can process existing protocols (e.g., IP or UDP)
as well as developer-deﬁned protocols. P4 programs can
be compiled to various targets (e.g., routers or switches)
and executed in different hardware (e.g., CPUs, FPGAs
or ASICs). Software targets (e.g., [13]) provide an envi-
ronment to develop and test P4 programs while hardware
targets (such as [3]) can run P4 programs at line rate.
A P4 program is composed of a parser, which parses
a packet and extracts header data according to speci-
ﬁed protocols, a set of match+action tables and a control
program that speciﬁes how these tables are applied to a
packet before the (potentially modiﬁed) packet is sent to
the output port. Besides table lookups, P4 also supports
a limited set of operations such as simple arithmetic op-
erations or computing hash functions and checksums.
For our implementation, we use P4_14 [14] and lever-
age P4’s customizable header format to rewrite tracing
packets at line rate without requiring to keep state (per
packet, ﬂow or host) at the devices.
5.3 Architecture
NetHide features a controller to translate V to conﬁgu-
rations for programmable network devices, and a packet
processing software that is running on network devices
and modiﬁes packets according to these conﬁgurations.
The device conﬁguration is described as a set of
match+action table entries that are queried upon arrival
of a packet (Fig. 6). The entries are installed when V
is deployed the ﬁrst time and when it changes. At other