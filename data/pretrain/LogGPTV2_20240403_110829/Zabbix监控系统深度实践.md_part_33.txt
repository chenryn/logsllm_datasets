INO
INO
|Null|Key丨Default丨Extra
INO
丨PRI丨NULL
IPRI
10.0000
10.0000
L0.0000
。
0
1
一
一
1
---
## Page 278
如图17-2所示。
的 Graph），这里使用了chrome的查看元素功能，右键单击页面上的Graph，选择“查看元素”。
17.4
们需要的粒度就越粗。
对于上个星期的数据，真的要精确到每一分钟吗？答案是不需要的，对于时间越久的数据，我
大值。这里调用的就是trends 表的数据。仔细想一想，history的数据真的需要保存这么久吗？
首先先看看图17-1是怎么画出来的，我们先进人一个 Item的Graph（注意，这里不要选
在这一节中，我们会分析Graph 选择从 history表选数据，还是从 trends表选数据。
图中对于某个时间点，会有三个数据，从小到大分别是这个时间点的最小值、平均值和最
6Ksps
8Ksps
10Ksps
12Ksps
14Ksp
16Ksps
20Ksps
Graph对于history和trends的选择
Zabbix
server:
印象笔记·悦读
Save toPocket
审查元素0）
AdBlock
Context switches per second(1d)
图17-2
图17-1
第17章History和Trends
·263°
27,02
00:00
---
## Page 279
·264°
chart2.php 绘制的，
Zabbix监控系统深度实践
Display
if（isset（s_REQUEST['border']）){
if （isset（$_REQUEST['height'] ））（
if（isset（s_REQUEsT['from']））（
$graph->setPeriod (Stimeline['period']) ;
$graph = new cchart（）;
$timeline = CScreenBase::calculateTime (array (
把这个链接在新窗口打开就可以看到单独的一个Graph了。从URL 分析，这个是由
setBorder（o）;
$graph->setHeight（$_REQUEsT['height']）;
$graph->setWidth（s_REQUEsT['width']）;
$graph->setFrom($_REQUEST['from']） ;
'stime' => get_request ('stime')
'updateProfile'
'profileIdx'=> get_request（'profileIdx','web.screens')，
，下面是chart.php代码中绘制Graph 的代码片段。
=> get_request ('updateProfile', true），
ass
S="
图17-3
cotiie-l&pr
---
## Page 280
Sitem['delay_flex']）;
NORMAL));
ALL）;
我们发现了如下一行代码。
据从什么地方来呢？数据无论是从 history还是从trends来，肯定都需要itemid。按照这个思路，
ALL）；
public function addItem ( $itemid, $axis = GRAPH_YAXIS_SIDE_DEFAULT, $calc
include/classes/class.cchart.php:class Cchart extends CGraphDraw(
(adtzuderb, )asanbat zah)areuoo mau = udexbs:dud·careuo 
chart2.php:$graph = new CChart($dbGraph[*graphtype' J);
$graph = new cchart();
这里的 adlItem是 Ygraph 的一个方法，而 Ygraph 是 CChart类的一个实例。
$graph->addItem ($_REQUEST['itemid'], GRAPH_YAXIS_SIDE_DEFAULT, CALC_FNC
可以看出，大多数的代码都是在设置Graph 参数，比如高度height 和宽度width 等。那数
$graph->draw();
接着看class.cchart.php中的addItem方法。
chart.php:$graph =new CChart();
找到CChart定义的地方，如下。
$graph->addItem (S_REQUEST['itemid'], GRAPH_YAXIS_SIDE_DEFAULT, CALC_FNC
if （strpos（$item['units'],','）!== false）
$this->items[$this->num]['delay']= getItemDelay($item['delay'],
$this->items[$this->num]['name'] =itemName（$item);
$this->items[$this->num]= $item;
$item = get_item_by_itemid($itemid);
if （Sthis->type == GRAPH_TYPE_STACKED）(
list($this->items[$this->num]['units'],
$drawtype = GRAPH_ITEM_DRAWTYPE_FILLED_REGION;
$this->items[$this-
第17章History和Trends
GRAPH_TYPE
·265°
---
## Page 281
·266。
数据的获取，
全部贴出来了，大家可以看下代码，大致了解下drawO方法的流程。
到是从history表还是从 trends表来的，
SIMPLE:$type;
FNC AVG:$calc fnc;
SIDE_DEFAULT : $axis;
ITEM_DRAWTYPE_LINE: $drawtype;
$color;
>num] ['unitsLong']） = explode（',′， $item['units']）;
Zabbix监控系统深度实践
我们看看同样在class.cchart.php 中的 selectData 方法，找到下面这样一行。
$this->selectData();
在浏览完 drawO方法后，可以知道 drawO方法是根据 Item 的数据来绘制每一个点，而 Item
可以从头看adItem方法的代码，
$this->items[$this->num] ['calc_fnc'] = is_null ($calc_fnc) ? CALC_
Sthis->items[$this->num] ['axisside'] = is_null ($axis) ? GRAPH_YAXIS
$this->items[$this->num] ['drawtype'] = is_null ($drawtype) ? GRAPH
Sthis->num++;
if ($this->items [$this->num] ['axisside'] == GRAPH_YAXIS_SIDE_LEFT） {
$this->items[$this->num] ['color'] = is_null($color)
if
$this->items[$this->num]['hostname'] = $host['name'];
$host = get_host_by_hostid($item['hostid']) ;
else
，就在draw方法的一开始，如下。
($this->items [$this->num] ['axisside'] == GRAPH_YAXIS_SIDE_RIGHT){
$this->yaxisright =1;
$this->yaxisleft=1;
. = [,buorstun,] [wnuperiod / 2))&&($this->period / $this->sizex)period / Ythis->sizeX)(timeO - (Ythis->from_time + Ythis->period / 2),
if(($real_item['history'] * SEC_PER_DAY）>（time（）-（$this->from_time +
它们的含义分别如下。
这里有两条逻辑，加上代码中的注释，整理如下。
第17章History和Trends
·267
---
## Page 283
·268°
1"，然后在代码里用宏去代替“1"，即“status=CONNECT_SUCCESS”。
是“Magic number”。对于这种情况，Zabbix先会在头文件中定义“#define CONNECT_SUCCESS
为底层的对于数据库的封装，而后者是对前者根据 Zabbix模型做的封装。
进行数据交换的，希望通过这一章的学习，大家能对Zabbix的后端有所了解。
数据库也是Zabbix性能优化的重中之重。在本章中，主要向大家剖析 Zabbix是如何同数据库
和Delete。Zabbix的设计思想是把所有都落地到数据库，比如已经了解到的报警的规则等，同时，
Zabbix和数据库交互详解
第18章
zbxdb.h 中定义了很多后面要使用的变量和宏。这是 Zabbix 的代码风格，尽量避免程序中
数据库相关的代码有两部分：一个是 src/libs/zbxdb，另一个是 src/libs/zbxdbhigh。前者是较
 #define ZBX_MAX_SQL_SIZE
 #define ZBX_DB_DOWN
zbxdb.h 中定义了很多宏，这里挑选了常用的来列举，具体如下。
Zabbix的核心是数据与数据库的交互，即增删改查“CRUD”-
#define ZBX_DB_FAIL
O #define ZBX_DB_OK
0
-2
262144
/*256KB*/
—Create、Read、Update
---
## Page 284
ZBX_OCI_DB_RESULT;
typedef struct
#define DB_ROW
zbx_oracle_db_handle_t;
typedef struct
#include"oci.h"
#elif defined（HAVE_ORACLE)
#include"mysql.h"
#if defined（HAVE_MYSQL）
Zabbix后端支持多种数据库，那在代码中如何区分不同的数据库呢？可以看下面的例子。
这些很容易理解，Zabbix默认支持SQL的长度是256K。
define DBfree_result
define DB_RESULT
define DBfree_result
define DB_RESULT
defineDB_ROW
include "mysqld_error.h"
include "errmsg.h"
OCILobLocator
ub4
DB_ROW
int
oCIStmt
oCIStmt
oCIServer
oCISvcCtx
OCIError
OCIEnV
ncolumn;
*values_alloc;
values;
*stmthp;
*stmthp;/* the statement handle for execute operations */
*envhp;
*errhp;
*srvhp;
char**
*svchp;
**clobs;
ZBX_OCI_DB_RESULT*
mysql_free_result
/*the statement handle for select operations */
MYSQL_RES *
MYSQL_ROW
OCI_DBfree_result
第18章Zabbix和数据库交互详解
·269·
---
## Page 285
270°
具体如下。
char*sre)即可，结果内存空间的分配都由它完成。zbx_db_dyn_escape_string 的代码非常简单，
string，而 zbx_db_dyn_escape_string 则只需要传入一个字符串：zbx_db_dyn_escape_string(const
char*dst, size_t len)需要将结果所在的内存空间分配好，并将其指针传递给 zbx_db_escape
而是使用方法的返回值。“dyn”即为“dynamic”的意思。zbx_db_escape_string（const char*src
对于MySQL来说，使用这个方法，会在SQL最前面加上“begin"。
码中的注释，我们一起去了解下这些方法的作用。
18.2
Zabbix监控系统深度实践
db.c是针对数据库层做的最底层的封装，在db.c中一共定义了很多方法，根据Zabbix代
10.zbx_db_dyn_escape_string：和 zbx_db_escape_string类似，只是不使用指针返回结果，
9. zbx_db_escape_string：将字符串里的转义符号转化为数据库支持的类型。
7.zbx_db_bytea_unescape：与 zbx_db_bytea_escape 相反，将字符串转换为二进制字符串。
6.zbx_db_bytea_escape：将二进制字符串转换为以“0”结尾的字符串。
3.zbx_db_commit:和 zbx_db_begin类似,commit是一个事务，直接在数据库中执行“commit"。
2.zbx_db_begin：开始一个事务，这个方法其实非常简单，就是在拼接一个大 SQL。比如
这段代码是分别针对MySQL和Oracle的，根据不同的数据库，引人了不同的头文件。
5.zbx_db_vselect :执行 select。
4.zbx_db_rollback：回滚事故，相当于执行“rollback"。
1.zbx_db_connect：连接数据库。
ub4
void
char
size_t len;
zbxdb/db.c
OCI_DBserver_status (）;
OCI_DBfree_result（DB_RESULT result）;
*dst= NULL;
---
## Page 286
id来限定执行 SQL的Hosts。比如在SQL后增加“and hostid between 100000000000000 and
有自己的id，而这个id是本台Child服务器数据库中id的开头那一位。这个方法就是根据
文件中定义)。
这一节的操作和 Zabbix的业务更加紧密。
础操作上的封装，比如从数据库查询数据的操作。上一节的代码距离Zabbix的实际操作稍远，
18.3
行查看。
（1）_DBnode：和Zabbix 的分布式架构有关。在Master-Child 架构中，每一个Child 都
在 src/ibs/zbxdbhign 中，
前面介绍了Zabbix对数据库的基本操作，本节向大家介绍的是Zabbix在这些对数据库基
db.c中定义的方法如下。
proxy.c：关于ZabbixProxy的方法的封装。
odbc.c：关于 ODBC 相关的封装。
 lld.c、lld_common.c 等以 lld开头的c文件：关于 low-level discovery 封装的方法。
discovery.c：关于discovery封装的方法。
 dbschema.c：数据库 schema。
O db.c：大多数方法都在这里，内容很杂，既有对 Trigger 的操作，又有对 Host 的操作。
上面列举的都是Zabbix 源码中带有注释的方法，其他还有很多没有注释的，读者可以自
后文会详细说明。
13. zbx_db_escape_like_pattern：将 LIKE 中需要转义的符号前加上“!”进行转义。
12.zbx_db_get_escape_like_pattern_len：获取数据库查询中 LIKE 的字段的长度。
11. zbx_db_dyn_escape_string_len : 同上。
3zbxdbhigh
zbx_db_escape_string (src, dst, len) ;
dst = zbx_malloc（dst，len）;
len = zbx_db_get_escape_string_len (src) ;
一共有下面这些c文件（h文件认为是头文件，具体功能都是在
第18章Zabbix和数据库交互详解
·271°
---
## Page 287
·272°