be ﬁngerprinted based on the background trafﬁc of installed
apps. Conti et al. [87] considered an adversary who controls
Wi-Fi access points near the targeted device, which allows
to infer speciﬁc app actions such as posting Facebook status
messages. In similar settings, trafﬁc analysis techniques allow
to ﬁngerprint speciﬁc apps as well as actions performed in
speciﬁc apps [93]–[98].
While the above presented attacks exploit logical properties,
i.e., the fact that encrypted packets do not hide meta data,
Schulz et al. [99] exploited the EM emanation of Ethernet
cables (hardware properties), which allowed them to observe
parts of the transmitted Ethernet frames.
USB Power Analysis. Due to the inherent usage patterns of
mobile devices, users are constantly in the need to charge their
devices, which is why public USB charging stations have been
set up. Similar to power analysis attacks, modiﬁed charging
stations can be used to collect power traces that allow to infer
sensitive information about users and mobile devices.
Attacks. The identiﬁcation (or localization) of speciﬁc users
is considered a privacy risk due to the possibility of tracking
individuals. Conti et al. [90] demonstrated that wall-socket
smart meters that capture the power consumption of plugged
devices can be used to identify users/notebooks. Although they
demonstrated their attack on notebooks, it is likely that the
same attack works for smartphones as well. In a similar setting,
Yang et al. [89] demonstrated that visited websites can be
inferred by power traces collected via USB charging stations.
Such attacks even work if dedicated protection mechanisms,
e.g., adapters that block data pins on USB cables, are in place.
Wi-Fi Signal Monitoring. Wi-Fi devices continuously
monitor the wireless channel (channel state information (CSI))
to effectively transmit data. This is necessary as environmental
changes cause the CSI values to change.
Attacks. Ali et al. [100] observed that even ﬁnger motions
impact wireless signals and cause unique patterns in the time-
series of CSI values. In a setting with a sender (notebook) and
a receiver (Wi-Fi router), they showed that keystrokes on an
external keyboard cause distortions in the Wi-Fi signal. They
infer entered keys by monitoring these changes of the CSI
values. Later on, Zhang et al. [91] inferred unlock patterns on
smartphones via a notebook that is connected to the wireless
hotspot provided by the smartphone. Li et al. [92] further
improved these attacks by considering an attacker controlling
only a Wi-Fi access point. They infer the PIN input on
smartphones and also analyze network packets to determine
when the sensitive input starts.
B. Active Attacks
Besides passively observing leaking information, vicinity
attacks can be improved by considering active attackers as
demonstrated by the following example.
Network Trafﬁc Analysis. Network trafﬁc analysis has al-
ready been discussed in the context of passive side-channel at-
tacks. Active attackers learn additional information by actively
inﬂuencing transmitted packets, e.g., by delaying packets.
Attacks. He et al. [81] demonstrated that an active attacker,
e.g., represented by an Internet Service Provider (ISP), could
delay HTTP requests from Tor users in order to increase the
performance of website ﬁngerprinting attacks. The idea is that
instead of observing the generated trafﬁc for all resources on
a webpage in parallel, i.e., the response packets from multiple
requests in parallel overlap, an attacker delays the packet
requesting a resource until the response from the previous
request has been fully retrieved.
C. Overview
Table III summarizes the discussed attack categories and the
targeted information. The identiﬁed targets are the inference
of visited websites, application inference (or speciﬁc actions
within applications), identiﬁcation of users and devices, and
user input. Again an attack category not targeting speciﬁc
information (indicated by an ) represents a possible gap that
might be closed in future research. For example, USB power
analysis attacks might allow to target user input.
IEEE COMMUNICATIONS SURVEYS & TUTORIALS, VOL. XX, NO. Z, MONTH YYYY
12
VI. REMOTE SIDE-CHANNEL ATTACKS
The attacks presented in this section can be categorized
as software-only attacks. In contrast to the local side-channel
attacks as well as the vicinity side-channel attacks presented in
the previous sections, these attacks neither require the attacker
to be in the proximity nor in the vicinity of the targeted user.
Hence, these attacks can be executed remotely and target a
much larger scale since the victim user installed a malicious
application on her device.
A. Passive Attacks
Linux-inherited procfs Leaks. Linux releases “accounting”
information that is considered as being harmless via the procfs.
This includes, for example, the memory footprint (total virtual
memory size and total physical memory size) of each applica-
tion via /proc/[pid]/statm, the CPU utilization times
via /proc/[pid]/stat, the number of context switches
via /proc/[pid]/status, but also system-wide informa-
tion such as interrupt counters via /proc/interrupts and
context switches via /proc/stat.
Attacks. Jana and Shmatikov [25] observed that the memory
footprint of the browser correlates with the rendered website.
Thus, by monitoring the memory footprint they inferred a
user’s browsing behavior (browser history), which represents
sensitive information and is normally protected by a dedicated
permission. Later on, Chen et al. [101] exploited this informa-
tion to detect Activity transitions within Android apps. They
observed that the shared memory size increases by the size
of the graphics buffer in both processes, i.e., the app process
and the window compositor process (SurfaceFlinger). These
increases occur due to the inter-process communication (IPC)
between the app and the window manager. Besides, they also
considered CPU utilization and network activity in order to
infer the exact activity later on.
Similar to the memory footprint of applications, the procfs
also provides system-wide information about the number of
interrupts and context switches. Again, this information is con-
sidered as being innocuous and is, thus, published on purpose
and is accessible without any permission. Simon et al. [11]
exploited this information to infer text entered via swipe input
methods. More speciﬁcally, they observed that the number
of interrupts and context switches correlates with the user’s
ﬁnger movements across the keyboard when transitioning from
letter to letter. Diao et al. [102] presented two attacks to infer
unlock patterns and the app running in the foreground. The
information leaks exploited were gathered from interrupt time
series of the device’s touchscreen controller. Besides, also the
power consumption is released via the procfs. Yan et al. [49]
showed that the power consumption allows to infer the number
of entered characters on the soft keyboard.
Data-Usage Statistics. Android keeps track of the amount
of incoming and outgoing network trafﬁc on a per-application
basis. These statistics allow users to keep an eye on the data
consumption of any app and can be accessed without any
permission.
Attacks. Data-usage statistics are captured with a ﬁne-
grained granularity, i.e., packet lengths of single TCP packets
can be observed, and have already been successfully exploited.
Zhou et al. [14] demonstrated that by monitoring the data-
usage statistics an adversary can infer sensitive information
of speciﬁc apps. They were able to infer disease conditions
accessed via WebMD, and the ﬁnancial portfolio via Yahoo!
Finance. In addition, they also showed how to infer a user’s
identity by observing the data-usage statistics of the Twitter
app and exploiting the publicly available Twitter API.
Later, it has been shown that the data-usage statistics can
also be exploited to infer a user’s browsing behavior [26].
The ﬁne-grained statistics of incoming and outgoing network
packets allow to ﬁngerprint websites, which even works in
case the trafﬁc is routed through the anonymity network Tor.
Page Deduplication. To reduce the overall memory foot-
print of a system, (some) operating systems3 search for iden-
tical pages within the physical memory and merge them—
even across different processes—which is called page dedu-
plication. As soon as one process intends to write onto such
a deduplicated page, a copy-on-write fault occurs and the
process gets its own copy of this memory region again.
Attacks. Such copy-on-write faults have been exploited by
Suzaki et al. [103] to detected applications on Linux and
Windows as well as ﬁle downloads. Recently, Gruss et al. [24]
demonstrated the possibility to measure the timing differences
between normal write accesses and copy-on-write faults from
within JavaScript code. Based on these precise timings they
suggest to ﬁngerprint visited websites by allocating memory
that stores images found on popular websites. If the user
browses the website with the corresponding image, then at
some point the OS detects the identical content in the pages
and deduplicates these pages. By continuously writing to the
allocated memory, the attacker might observe a copy-on-write
fault in which case the attacker knows that the user currently
browses the corresponding website.
Microarchitectural Attacks. Modern computer architec-
tures include many components to improve the overall effec-
tiveness and performance. For instance, CPU caches represent
an important component within the memory hierarchy of
modern computer architectures. Multiple cache levels bridge
the gap between the latency of main memory accesses and the
fast CPU clock frequencies. Microarchitectural attacks exploit
speciﬁc effects like the timing behavior of these components,
e.g., branch prediction units and CPU caches, in order to
learn sensitive information about executed instructions, code
paths, etc. More speciﬁcally, by measuring execution times and
memory accesses, an attacker can infer sensitive information
from processes running in parallel on the same device. As
CPU caches have been shown to represent a powerful source
of information leaks, we focus on cache attacks.
Attacks. Cache-timing attacks against AES have already
been investigated on Android-based mobile devices. For
instance, Bernstein’s cache-timing attack [104] has been
launched on development boards [105]–[107] and on Android
smartphones [108], [109] in order to reduce the effective
key size of AES. Besides, similar cache attacks have been
3For example, CyanogenMod OS allows to enable page deduplication.
IEEE COMMUNICATIONS SURVEYS & TUTORIALS, VOL. XX, NO. Z, MONTH YYYY
13
launched on embedded devices [110] and more ﬁne-grained
attacks [5] against AES have also been applied on smart-
phones [111]. These attacks relied on privileged access to
precise timing measurements, but as stated by Oren et al. [112]
cache attacks can also be exploited via JavaScript and, thus,
do not require native code execution anymore. They even
demonstrated the possibility to track user behavior including
mouse movements as well as browsed websites via JavaScript-
based cache attacks. A recent paper by Lipp et al. [113]
demonstrates that all existing cache attacks,
including the
effective Flush+Reload attack [6], can be applied on modern
Android smartphones without any privileges. While early
attacks on smartphones exclusively targeted cryptographic
implementations, their work also shows that user interactions
(touch actions and swipe actions) can be inferred through this
side channel. Similar investigations of Flush+Reload on ARM
have also been conducted by Zhang et al. [114].
As some of these attacks actively inﬂuence the behavior of
the victim, e.g., the execution time, some microarchitectural
attacks can also be considered as active attacks. For a more
detailed survey about microarchitectural attacks in general, we
refer to the survey papers by Ge et al. [7] and Szefer [40].
Attacks. In 2011, Cai and Chen [9] were the ﬁrst
Sensor-based Keyloggers. Cai et al. [115] and Raij et
al. [116] were one of the ﬁrst to discuss privacy implica-
tions resulting from mobile devices equipped with cameras,
microphones, GPS sensors, and motion sensors in general.
Nevertheless, a category of attacks that received signiﬁcant
attention are sensor-based keyloggers. These attacks are based
on two observations. First, smartphones are equipped with lots
of sensors—both motion sensors as well as ambient sensors—
that can be accessed without any permission, and second,
these devices are operated with ﬁngers while being held in
the users’ hands. Hence, the following attacks are all based on
the observation that users tap/touch/swipe the touchscreen and
that the device is slightly tilt and turned during the operation.
to
observe a correlation between entered digits on touchscreens
and the readings from the accelerometer sensor that can be
exploited for motion-based keylogging attacks. Following this
work, Owusu et al. [117] extended the attack to infer single
characters, and Aviv [118] and Aviv et al. [10] investigated
the accelerometer to attack PIN and pattern inputs. Subsequent
publications [119]–[121] also considered the combination of
the accelerometer and the gyroscope in order to improve the
performance as well as to infer even longer text inputs [122].
Since the W3C speciﬁcations allow access to the motion and
orientation sensors from JavaScript, motion-based keylogging
attacks have even been performed via websites [12], [123].
Even worse, some browsers continue to execute JavaScript,
although the user closed the browser or turned off the screen.
While the above summarized attacks exploit different mo-
tion sensors, e.g., accelerometer and gyroscope, ambient sen-
sors can also be used for keylogging attacks. Spreitzer [124]
presented an attack that exploits an ambient sensor, namely
the ambient-light sensor, in order to infer a user’s PIN input
on touchscreens. Minor tilts and turns during keyboard input
lead to variations of the ambient-light sensor readings, which
are then correlated with keyboard input on the touchscreen.
As demonstrated by Simon and Anderson [125], PIN inputs
on smartphones can also be inferred by continuously taking
pictures via the front camera. Afterwards, PIN digits can be
inferred by image analysis and by investigating the relative
changes of objects in subsequent pictures that correlate with
the entered digits. Fiebig et al. [126] demonstrated that the
front camera can be used to capture the screen reﬂections in the
user’s eyeballs, which allows to infer user input. In a similar
manner, Narain et al. [127] and Gupta et al. [128] showed
that tap sounds (inaudible to the human ear) recorded via
smartphone stereo-microphones can be used to infer typed text
on the touchscreen. However, these attacks require dedicated
permissions to access the camera and the microphone, which
might raise the user’s suspicion. In contrast, the motion and
ambient sensors can be accessed without any permission.
For a more complete overview of sensor-based keylogging
attacks, we refer to the survey papers by Hussain et al. [44] and
Nahapetian [45]. Considering the signiﬁcant number of papers
that have been published in this context, user awareness about
such attacks should be raised. Especially since Mehrnezhad et
al. [123] found that the perceived risk of motion sensors,
especially ambient sensors, among users is very low.
Fingerprinting Devices/Users. The identiﬁcation of smart-
phones (and users) without a user’s awareness is considered a
privacy risk. While obvious identiﬁcation mechanisms such as
device IDs and web cookies can be thwarted, imperfections
of hardware components, e.g., sensors, as well as speciﬁc
software features can also be employed to stealthily ﬁngerprint
and identify devices and users, respectively.
Attacks. Bojinov et al. [129] and Dey et al. [130] ob-
served that unique variations of sensor readings (e.g., of
the accelerometer) can be used to ﬁngerprint devices. These
variations are a result of the manufacturing process and are
persistent throughout the life of the sensor/device. As these
sensors can be accessed via JavaScript, it is possible to ﬁnger-
print devices via websites [131]. Similarly, such imperfections
also affect the microphones and speakers [132], [133], which
also allow to ﬁngerprint devices. In addition, by combining
multiple sensors, even higher accuracies can be achieved [134].
Kurtz et al. [135] demonstrated how to ﬁngerprint mobile
device conﬁgurations, e.g., device names, language settings,
installed apps, etc. Hence, their ﬁngerprinting approach ex-
ploits software properties (i.e., software conﬁgurations) only.
Hupperich et al. [136] proposed to combine hardware features
as well as software features to ﬁngerprint mobile devices.
Location Inference. As smartphones are always carried
around, information about a phone’s location inevitably reveals
the user’s location. Hence, resources that obviously can be
used to determine a user’s location, e.g., the GPS sensor, are
considered as privacy relevant and, thus, require a dedicated
permission. Yet, even without permissions, side-channel at-
tacks can be used to infer precise location information about
users.
Attacks. Han et al. [141], Nawaz et al. [142], and Narain et
al. [143] demonstrated that the accelerometer and the gy-
roscope can be used to infer car driving routes. Similarly,
IEEE COMMUNICATIONS SURVEYS & TUTORIALS, VOL. XX, NO. Z, MONTH YYYY
14
OVERVIEW OF REMOTE SIDE-CHANNEL ATTACKS AND CORRESPONDING TARGETS.  AND  INDICATE WHETHER OR NOT A SPECIFIC ATTACK HAS BEEN
TABLE IV
PERFORMED ON THE CORRESPONDING TARGET.
Attack
Active/passive
Property
Visited
websites
procfs leaks
Data-usage statistics
Page deduplication
Microarchitectural attacks
Sensors
Microphone
Speakers
Camera
Device conﬁgurations
Rowhammer
Passive
Passive
Passive
Active/passive
Passive
Passive
Passive
Passive
Passive
Active
 [26]