projector.on() ;
打开投影机，并将它设置在宽屏模
projector.setInput(dvd);
projector.wideScreenMode ()
amp.on ();
打开功放，设置为DVD，调整成环绕立
amp.setDvd (dvd) ;
体声模式，音量调到5.…….
amp.setSurroundSound();
amp .setVo1ume (5) ;
dvd.on () ;
dvd.play (movie) ;
打开OVD播放机……“终于”可以看电
影了!
但还不只这样
看完电影后，你还要把一切都关掉，怎么办？难道要反向地把这一切动作再进行一
次？
如果要听CD或者广播，难道也会这么麻烦？
1
如果你决定要升级你的系统，可能还必须重新学习一套稍微不同的操作过程。
怎么办？使用你的家庭影院竞变得如此复杂！让我们看看外观模式如何解决这团混
乱，好让你能轻易地享受电影..
你现在的位置》
257
---
## Page 294
灯光、相机、外观！
灯光、相机、外观！
你需要的正是一个外观：有了外观模式，通过实现一个提供更合理的接口的
外观类，你可以将一个复杂的子系统变得容易使用。如果你需要复杂子系统
的强大威力，别担心，还是可以使用原来的复杂接口的：但如果你需要的是一
个方便使用的接口，那就使用外观。
让我们看看外观如何运作：
现在是为家庭影院系能创建一个外
②
这个外观类将家良影
1
观的时续了，于是我们创建了一个
院的储多组件报为一
名为HomeTheaterFacade的新类，它
个子系统，通过调围
对外基需出几个筒单的方法，例如
这个子系统，亲实现
外观
watehMovie()
watehMovlell方法。
HomeTheaterFacade
watchMovie()
endMovie()
IsenToCd(
endCd[
IstenToRadio(
endRadio(
play()
外观要菌化的子
系统。
PDG
on()
258
真巢
---
## Page 295
适配器模式
watchMovie()
这是子系统外观的
客户端。
3
现在，你的客户代码可以通同此家庭
影院外观所提供的方法，而不必再情
围这个子系统的方法。所以，想要
电影，我们只要调用一个方法（也
就是watehMovie(l）就可以了。灯光、
DVV播放器、投影机、功放、屏幕、爆
米花，一D气全部辖定。
我就是喜欢接融这
人些低层的操作！
4
外观只是提供你更直接的操作，并来
将原来的子系统阻隔起来。如累你需
要子系统类的更离层功能，还是可以
使用原来的子系统。
这是慎鸭中学的影音科
学社前任社长。
PDG
你现在的位置
259
---
## Page 296
外观vS.适配器
类，那么需要低层功能的客户如何接触
单的接口之外，外观模式还有其他的优
这些类？
点吗？
：外观模式也允许你将客户
的类，外现只提供简化的接口。所以客
实现从任何子系统中解耦。比方说，你外观不只是简化
户如果觉得有必要，依然可以直接使用
得到了大笔加薪，所以想要升级你的家
了接口，也将客
子系统的类。这是外观模式一个很好的庭影院，采用全新的和以前不一样接口
特征：提供简化的接口的同时，依然将的组件。如果当初你的客户代码是针对
户从组件的子系
系统完整的功能暴露出来，以供需要的
外观而不是针对子系统编写的，现在你
人使用。
就不需要改变客户代码，只需要修改外
统中解耦。
现代码（而且有可能厂商会提供新版的
外现代码）。
它只是将每一个请求转由子系统执行？
外观和适配器可
器模式和外观模式之间的差异在于：适以包装许多类，
的”功能，让使用子系统更方便。比方
配器包装一个类，而外观可以代表许多
类？
但是外观的意图
说，虽然你的家庭影院外观没有实现任
何新行为，但是外观却够聪明，知道爆
是简化接口，而
米花机要先开启然后才能开始爆米花
合：
不对！提醒你，适配器模式
（同样、也要先开机才能放电影）。
将一个或多个类接口变成客户所期望的
适配器的意图是
一个接口。虽然大多数教科书所采用的
例子中适配器只适配一个类，但是你可
将接口转换成不
观吗？
以适配许多类来提供一个接口让客户编
码。类似地，一个外观也可以只针对一
同接口
个拥有复杂接口的类提供简化的接口。
两种模式的差异，不在于它们“包
创建许多个外现。
装”了几个类，而是在于它们的意围。
适配器模式的意图是，“改变”接口符
合客户的期望；而外观模式的惠图是，
提供子系统的一个简化接口。
260第7章
---
## Page 297
适配器模式
构造家庭影院外观
让我们逐步构造家庭影院外观：第·步是使用组合让外观能够访问子
系统中所有的组件。
public class HomeTheaterFacade {
Amplifier amp:
Tuner tuner;
这就是组合：我们会用到的子
DvdPlayer dvd;
系统组件全部都在这里。
CdPlayer cd;
Projector projector;
TheaterLights 1ights;
Screen screen;
PopcornPopper popper;
public HomeTheaterFacade (Amplifier amp,
Tuner tuner,
DvdPlayer dvd,
CdPlayer cd,
Projector projector,
外观将子系统中每一个组件的
Screen screen,
引用都传入它的构造器中。然后
TheaterLights lights,
PopcornPopper popper)
外观把它们赋值给相应的实例
变量。
this.amp = amp;
this.tuner = tuner;
this.dvd = dvd;
this.cd = cd;
this.projector = projector;
this.screen = screen;
this.lights = 1ights;
this.popper = popper;
1
//其他的方法
这部分的代码，等一下就
会填进去
你现在的位置
261
---
## Page 298
实现外观
实现简化的接口
现在该是时候将子系统的组件整合成一个统一的接口了。让我们实现
watchMovieO和lendMovieO两个方法：
public void watchMovie (String movie) (
System.out.println("Get ready to watch a movie...") ;
popper.on () ;
popper.pop () ;
watchMovie（）将我们之前手动进行的
lights.dim (10) ;
screen.down () ;
每项任务依次处理。请注意，每项任
projector.on();
务都是悉托子系统中相应的组件处理
projector.wideScreenMode ();
的。
amp. on () 
amp.setDvd (dvd) ;
amp.setSurroundSound();
amp.setVo1ume (5) ;
dvd.on() ;
dvd.play (movie) ;
1
public void endMovie ()
System.out.println("Shutting movie theater down...");
popper.off() ;
lights.on () ;
screen.up() ;
而endMovie（）页责关闭一切。
projector.off();
每项任务也都是毒托子系统
amp.off();
dvd. stop () ;
中合通的组件处理的。
dvd.eject () ;
dvd.off () ;
NER
想想看，你在JavaAPI中遇到过哪些外观，你还希望Java能够
新增哪些外观？
262
第7章
---
## Page 299
适配器模式
观赏电影（用轻松的方式）
这是大显身手的时刻！
我们就在这个测试程序中，直接建立了
public class HomeTheaterTestDrive {
这些组件。正常的情况下，某个外观金
public static void main(String[] args)
被指派给客户使用，而不需要由客户自
//在这里实例化组件
行创建外观。
HomeTheaterFacade homeTheater =
new HomeTheaterFacade (amp, tuner, dvd, cd,
首先，根据子系统所有的组
projector, screen, lights, popper);
件来实例化外观。
homeTheater.watchMovie("Raiders of the Lost Ark");
homeTheater.endMovie () ;
使用简化的接口，先开启电影
然后关闭电影。
输出结果是这样的：
Fie Edit Winc
&java HomeTheaterTestDrive
只要调用外观的
Get ready to watch a movie..
watchMovie(）.就一切
Popcorn Popper on
Popcorn Popper popping popcorn!
Theater Ceiling Lights dimming to 10%
Theater Screen going down
Top-O-Line Projector on
Top-O-Line Projector in widescreen mode （16x9 aspect ratio)
Top-O-Line DvD Player playing"Raiders of the Lost Ark"
……在这里，我们已经
Shutting movie theater down...
看完电影了，所以调用
Popcorn Popper off
endMovie（）将一切都关
Theater Ceiling Lights on
Theater Screen going up
闭。
Top-O-Line DVD Player eject
你现在的位置
263
---
## Page 300
定义外观模式
定义外观模式
想要使用外观模式，我们创建了一个接口简化而统一的类，用来包装子系统中一个或多
个复杂的类。外观模式相当直接，很容易理解，这方面和许多其他的模式不太一样。但
这并不会降低它的威力：外观模式允许我们让客户和子系统之间避免紧耦合，而且稍后
你还会看到，外观模式也可以帮我们遵守一个新的面向对象原则。
在介绍这个新的原则之前，先来看看外观模式的正式定义：
外观模式提供了一个统一的接口，用来访问子系统中
的一群接口。外观定义了一个高层接口，让子系统更容易
使用。
这很容易理解，但是请务必记得模式的意图。这个定义清楚地告诉我们，外观的意图是
要提供一个简单的接口，好让一个子系统更易于使用。从这个模式的类图可以感受到这
一点：
统一的接口易于使用。
这是一个快乐的客户，
因为有了外观，客户
的工作变得更容易了。
子系统的类
更复杂的子系统。
全部内容就是这样，你又多学会了一个模式！现在来看一个新的OO原则。请注意，这个原则
可能有点挑战性！
264第7章
---
## Page 301
适配器模式
“最少知识”原则
最少知识（LeastKnowledge）原则告诉我们要减少对象之
间的交互，只留下几个“密友”。这个原则通常是这么说
的：
设计原则
最少知识原则：只和你的密友谈
话。
这到底是什么意思？这是说，当你正在设计一个系统，不
管是任何对象，你都要注意它所交互的类有哪些，并注意
它和这些类是如何交互的。
这个原则希望我们在设计中，不要让太多的类耦合在一
起，免得修改系统中一部分，会影响到其他部分。如果许
多类之间相互依赖，那么这个系统就会变成一个易碎的系
统，它需要花许多成本维护，也会因为太复杂而不容易被
其他人了解。
BRAIN
IPOWER
这段代码耦合了多少类？
publicfloatgetTemp(）(
return station.getThermometer().getTemperature();
你现在的位置
265
---
## Page 302
“最少知识”原则
如何不要赢得太多的朋友和影响太多的对象
究竞要怎样才能避免这样呢？这个原则提供了一些方针：
就任何对象而言，在该对象的方法内，我们只应该调用属
于以下范围的方法：
请注意，这些方针告诉我们，如果某对
■该对象本身
累是调用其他的方法的返回结策，不要
调用该对象的方法！
■被当做方法的参数而传递进来的对象
■此方法所创建或实例化的任何对象
把“组件”想象成是被实例变量所引
用的任何对象，换句话说，把这想象
·对象的任何组件
成是“有一个”（HAS-A）关系。
这听起来有点严厉、不是吗？如果调用从另一个调用中返
回的对象的方法，会有什么害处呢？如果我们这样做，相
当于向另一个对象的子部分发请求（而增加我们直接认识
的对象数目）。在这种情况下，原则要我们改为要求该对
象为我们做出请求，这么一来，我们就不需要认识该对象
的组件了（让我们的朋友圈子维持在最小的状态）。比方
说：
public float getTemp(）{
不采用这
Thermometer thermometer =station.getThermometer();
个原则
return thermometer.getTemperature();
K
这里，我们从气象站取得
了温度计（thermometet）对
象，然后再从湿度计对象
取得温度。
采用这个