customers, in our large retailers example, a hub operator will
have to deposit $250M to support n = 1M customers with
an expenditure of e = $250. To cover the cost of locking in
such a large mount of funds, the operator is likely to charge
substantial payment fees.
Commit-chains aim to improve payment hubs by reducing
or eliminating operator collaterals. To do that, they rely on
periodic on-chain checkpoints that ﬁnalize multiple off-chain
transactions at once. While this improves throughput, it does
not reduce latency, as users still have to wait for the checkpoint
to reach ﬁnality on-chain [14], [30]. Other commit-chain
variants enable instant payments, but require equally large
collaterals as payment hubs. Additionally, in such variants
users need to monitor the checkpoints (hourly or daily) to
ensure that their balance is represented accurately [14], [31].
We focus on retail setting where customers do not have to be
constantly or periodically online (recall Section II-B), and thus
cannot be expected to perform such monitoring.
Side-chains rely on a small number of collectively trusted
validators to track and agree on pending transactions. Typ-
ically, consensus is achieved using Byzantine-fault tolerant
protocols [32] that scale up to a few tens of validators and
require 2/3 of honest validators. Thus, side-chains contradict
one of the main beneﬁts of permissionless blockchains, the
fact that no trusted entities are required. Additionally, BFT
consensus requires several communication rounds and has high
message complexity.
D. Requirements
Given these limitations of previous solution, we deﬁne the
following requirements for our work.
3
O R1: Fast payments without trusted validators. Our solu-
tion should enable payment recipients such as merchants
to accept fast payments assuming no trusted validators.
O R2: Practical collaterals for large deployments. Collat-
erals should be pratical, even when the system scales
for large number of customers or many merchants. In
particular, the customer collaterals should only depend
on their own spending, not the number of merchants.
The entities that operate the system (in our solution, the
merchants) should deposit an amount that is proportional
to their sales, not the number of customers.
O R3: Cheap payment processing. When deployed on top of
an existing blockchain system such as Ethereum, payment
processing should be inexpensive.
III. SNAPPY OVERVIEW
In our solution, Snappy, customer collaterals are held by a
smart contract called Arbiter and enable merchants to safely
accept payments before a transaction reaches ﬁnality on the
chain. If a pending transaction does not get conﬁrmed on
the chain (double spending attack), the victim merchant can
recover the lost funds from the customer’s collateral.
For any such solution, it is crucial that the total value of a
customer’s pending transactions never exceeds the value of its
collateral. This invariant is easy to ensure in a single-merchant
setup by keeping track of the customers’ pending transactions.
However, in a retail setting with many merchants, each individ-
ual merchant does not have a complete view of each customer’s
pending payments, as each customer can perform purchases
with several different merchants simultaneously.
A natural approach to address this problem is to assume
that the merchants collaborate and collectively track pending
transactions from all customers (see Figure 2 (right)). Below,
we outline simple approaches to realize such collaboration and
point out their drawbacks that motivate our solution.
A. Strawman Designs
Transaction broadcasting. Perhaps the simplest approach
would be to require that all merchants broadcast all incoming
payments, so that everyone can keep track of the pending trans-
actions from each customer. Such a solution would prevent
customers from exceeding their collateral’s value, but assumes
the merchants are honest. A malicious merchant,
that all
colluding with a customer, could mislead others by simply
not reporting some of the customer’s pending payments. The
customer can then double spend on all of its pending trans-
actions, thus enabling the colluding merchant to deplete its
collateral and prevent other merchants from recovering their
losses. The same problem would arise also in cases where
a benign merchant fails to communicate with some of the
merchants (e.g., due to a temporary network issue) or if the
adversary drops packets sent between merchants.
We argue that such transaction broadcasting might be ap-
plicable in speciﬁc settings (e.g., large retailers that trust each
other and are connected via high-availability links), but it fails
to protect mutually-distrusting merchants such as small shops
or restaurants, and is unsuited to scenarios where mutually-
trusting merchants cannot establish expensive links.
Unanimous approval. Alternatively, merchants could send
each incoming transaction to all other merchants and wait
until each of them responds with a signed approval. While
some of the merchants may act maliciously and equivocate,
rational merchants holding pending transactions from the same
customer will not, as this would put their own payments at risk.
The Arbiter contract would refuse to process any claims for
losses, unless the merchant can provide approval statements
from all other merchants. Such unanimous approval prevents
the previous attack (assuming rational actors), but it suffers
from poor liveness. Even if just one of the merchants is
unreachable, the system cannot process payments.
BFT consensus. A common way to address such availability
concerns is to use Byzantine-fault
tolerant protocols. For
example,
the merchants could use a BFT consensus such
as [32] to stay up to date with all the pending payments. Such
a solution can tolerate up to 1/3 faulty (e.g., non-responsive)
merchants and thus provides increased availability compared
to the previous design. However, this solution has all the
limitations of side-chains (recall Section II-C). In particular,
BFT consensus requires 2/3 trusted validators and several
rounds of communication. Therefore, BFT side-chains are not
ideal even in the case of mutually-trusting merchants.
B. Snappy Main Concepts
To overcome the problems of the above strawman designs,
we use two primary techniques: (a) majority approval and (b)
merchant collaterals, such that fast payments can be accepted
safely even if all the merchants are untrusted and some of them
are unreachable.
The use of majority approval generates non-deniable evi-
dence about potentially misbehaving merchants. Together with
merchant collaterals, this enables attack victims to recover their
losses, in case a merchant colludes with a malicious customer.
In an example attack, a malicious customer sends transaction
τ to a victim merchant and τ(cid:48) to a colluding merchant, and
simultaneously double spends both τ and τ(cid:48). The colluding
merchant claims the lost value from the customer’s collateral
which exhausts it and prevents the victim merchant from
recovering losses from the customer’s collateral. However, the
victim can use the colluding merchant’s signature from the
majority approval process as evidence and reclaim the lost
funds from the merchant’s collateral. Given these main ideas,
next we provide a brief overview of how Snappy works.
Collaterals. To register in the Snappy system, each customer
deposits a collateral to Arbiter’s account (see “Registration”
in Figure 1 (left)). The value of the collateral is determined
by the customer, and it should sufﬁce to cover its expenditure
et during the blockchain latency period (e.g., et = $100 for 3
minutes in Ethereum).
Since merchants are untrusted, they also need to deposit
a collateral. The size of the merchant collateral depends on
the total value of sales that all participating merchants process
within the latency period. For example, for a consortium of
k = 100 small shops that process pt = 6 payments of et = $5
on average during the latency period, a collateral of $3,000
will sufﬁce. In a deployment with k = 100 larger retailers,
where each one handles pt = 15 purchases of et = $100 (on
average) within the latency period, each merchant will need
4
visibility to past transactions for contracts, payments can be
also routed directly from the customers to the merchants.
If
the transaction does not appear
Settlements.
in the
blockchain after a reasonable delay (i.e., double-spending
attack took place), the victim merchant can initiate a settlement
process with the arbiter to recover the lost funds (“Attack in
Figure 1 (left)). The Arbiter uses the logged approval evidence
from its state to determine who is responsible for the attack,
and it returns the lost funds to the victim merchant either from
the collateral of the customer or the misbehaving merchant
who issued false approval.
Fig. 1 (left): Flow of funds. Customers and merchants deposit
collaterals to the arbiter smart contract. Payments ﬂow from customers
to merchants through the arbiter. In case of attack, the victim merchant
can recover any losses from the arbiter.
Fig. 2 (right): Example deployment where each merchant operates
one statekeeper. Customers make payments towards merchants, who
consult a majority of the statekeepers before accepting them.
to deposit $150,000 [21], [22]. We acknowledge that this is a
signiﬁcant deposit, but feasible for large corporations.
Payment approval. After registering, a customer can initiate
a payment by sending a payment intent to a merchant together
with a list of its previous approved but not yet ﬁnalized
transactions. The merchant can verify that the provided list
is complete, by examining index values that are part of each
Snappy transaction. If the total value of intended payment and
the previously approved payments does not exceed the value
of the customer’s collateral, the merchant proceeds.
To protect itself against conﬂicting Snappy transactions
sent to other merchants simultaneous, the merchant collects
approval signatures from more than half of the participat-
ing merchants, as shown in Figure 2 (right). Such majority
approval does not prevent malicious merchants from falsely
accepting payments, but provides undeniable evidence of such
misbehavior that the merchant can later use to recover losses
in case of an attack. In essence, a merchant m signing a
transaction τ attests that “m has not approved other trans-
actions from the same customer that would conﬂict with τ”.
Thus, m needs to check each transaction against those it has
signed in the past. The merchant who is about to accept a
payment also veriﬁes that the approving merchants have each
sufﬁcient collateral left in the system to cover the approved
payment. Once these checks are complete, the merchant can
safely accept the payment.
The customer construct a complete Snappy payment such
that the payment funds are initially sent to Arbiter that logs
the approval details into its state and after that forwards the
payment value to the receiving merchant (see “Payment” in
Figure 1 (left)). We route all payments through the Arbiter
contract to enable the Arbiter to perform claim settlement in
blockchain systems like Ethereum where smart contracts do
not have perfect visibility to all past transactions (recall Sec-
tion II-B). If future blockchain systems offer better transaction
Separation of statekeeping. So far, we have assumed that
payment approval requires signatures from merchants who
track pending transactions. While we anticipate this to be the
most common deployment option, for generality and separation
of duties, we decouple the tracking and approval
task of
merchants into a separate role that we call statekeeper. For the
rest of the paper, we assume a one-to-one mapping between
merchants and statekeepers, as shown in Figure 2 (right) and in
Appendix B we discuss alternative deployment options. When
there are an identical number of merchants and statekeepers,
the value of statekeepers’ collaterals is determined as already
explained for merchant collaterals.
Incentives. There are multiple reasons why merchants would
want to act as statekeepers. One example reason is that it al-
lows them to join a Snappy consortium, accept fast blockchain
payments securely and save on card payment fees. To put the
potential saving into perspective, considering our large retail
stores example and the common 1.5% card payment fee (and a
cost of $0.16 per Snappy payment). In such a case, a collateral
of $150,000 is amortized in ∼37 days. Potential free-riding
by a consortium member could be handled by maintaining a
ratio of approvals made and received for each merchant and
excluding merchants who fall below a threshold.
Another example reason is that the merchants could estab-
lish a fee-based system where each approver receives a small
percentage of the transaction’s value to cover the operational
cost and the collateral investment needed to act as a state-
keeper.
IV. SNAPPY DETAILS
In this section, we describe the Snappy system in detail. We
instantiate it for Ethereum, but emphasize that our solution
is not
limited to this particular blockchain. We start with
background on aggregate signatures, followed by Snappy data
structures, registration, payment and settlement protocols.
A. Background on BLS Signatures
To enable signature aggregation for reduced transaction size
and efﬁcient transaction veriﬁcation, we utilize the Boneh-
Lynn-Shacham (BLS) Signature Scheme [33], along with
extensions from [34], [35]. BLS signatures are built on top
of a bilinear group and a cryptographic hash function H :
5
Field
Symbol
Type
Description
Field
Symbol
Description
To
From
Value
ECDSA Sig.
Data
(cid:44)→ Operation
(cid:44)→ Merchant
(cid:44)→ Payment Index
(cid:44)→ Signatures
(cid:44)→ Quorum
τto
τf
τv
v, r, s
τop
τm
τi
τA
τq
160-bit
160-bit
Integer
256-bits
String
160-bit
Integer
512-bits
256-bits
Arbiters addr
Customer’s addr
Transferred funds
Tx signature triplet.
e.g., “Pay”, “Claim”
Merchant’s address
Monotonic counter
Aggregate signature
Approving parties
TABLE I: Snappy transaction τ format. All Snappy-speciﬁc infor-
mation is encoded into the Data ﬁeld of Ethereum transactions.
{0, 1}∗ (cid:55)→ G. A bilinear group bp = (p, G, H, GT , e, g, h) 1
consists of cyclic groups G, H, GT of prime order p, generators
g, h that generate G and H respectively, and a bilinear map
e : G × H → GT such that: The map is bilinear, i.e., for
all u ∈ G and v ∈ H and for all a, b ∈ Zp we have
e(ua, vb) = e(u, v)ab; The map is non-degenerate, i.e., if
e(u, v) = 1 then u = 1 or v = 1. There are efﬁcient algorithms
for computing group operations, evaluating the bilinear map,
deciding membership of the groups, and sampling generators
of the groups.
The main operations are deﬁned as follows:
O Key generation: A private key xj sampled from Zp, and
the public key is set as vj = hxj . A zero-knowledge proof
of knowledge πj for xj can generated using a Fischlin
transformed sigma protocol [37] or by signing the public
key with its private counterpart.
O Signing: Given a message m,
the prover computes a
ture to be valid if e (A, h) = e
B. Data Structures
Transactions. All interaction with the Arbiter smart contract
are conducted through Ethereum transactions. We encode the
Snappy-speciﬁc information in the to Data ﬁeld, as shown in