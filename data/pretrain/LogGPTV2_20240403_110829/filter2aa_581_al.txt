### Summary
- **OAuth 2.0** is the de facto standard for securing APIs, primarily addressing the access delegation problem.
- A **grant type** in OAuth 2.0 defines how a client can obtain an authorization grant from a resource owner to access a resource on their behalf.
- The OAuth 2.0 core specification defines five grant types: **authorization code, implicit, password, client credentials, and refresh token**.
- The **refresh token** grant type is used by an OAuth 2.0 client application to renew an expired or near-expiry access token.
- The **implicit** and **client credentials** grant types do not return refresh tokens.
- The **implicit** grant type is considered obsolete and is not recommended due to inherent security issues.
- OAuth 2.0 supports two types of client applications: **public clients** (e.g., single-page applications and native mobile applications) and **confidential clients** (e.g., web applications).
- The **JWT Secured Authorization Request (JAR)** draft proposal suggests introducing the ability to send request parameters in a JWT.
- The **Pushed Authorization Requests (PAR)** draft proposal suggests introducing a push endpoint at the authorization server, allowing client applications to securely push all authorization request parameters before initiating the browser-based login flow.

### Chapter 4: OAuth 2.0 Fundamentals
© Prabath Siriwardena 2020  
P. Siriwardena, Advanced API Security, https://doi.org/10.1007/978-1-4842-2050-4_5

### Chapter 5: Edge Security with an API Gateway
The API gateway is a common pattern for securing APIs in production deployments, serving as the entry point for API traffic. Many open-source and proprietary products implement this pattern, providing centralized enforcement of authentication, authorization, and throttling policies. Additionally, API gateways can gather and publish analytics related to API usage.

#### Setting Up Zuul API Gateway
Zuul is an API gateway that provides dynamic routing, monitoring, resiliency, and security. It acts as the front door to Netflix’s server infrastructure, handling global traffic, routing requests, and protecting against attacks. In this section, we will set up Zuul as an API gateway to front the Order API developed in Chapter 3.

All samples are available in the [GitHub repository](https://github.com/apisecurity/samples.git). Use the following commands to clone the repository and navigate to the relevant directory:
```bash
> git clone https://github.com/apisecurity/samples.git
> cd samples/ch05
```

#### Running the Order API
This is a simple Java Spring Boot microservice. The code is located in the `ch05/sample01` directory. Build the project with Maven:
```bash
> cd sample01
> mvn clean install
```
Run the Spring Boot service:
```bash
> mvn spring-boot:run
```
Test the API using cURL:
```bash
> curl http://localhost:8080/order/11
```
Expected output:
```json
{
  "customer_id": "101021",
  "order_id": "11",
  "payment_method": {
    "card_type": "VISA",
    "expiration": "01/22",
    "name": "John Doe",
    "billing_address": "201, 1st Street, San Jose, CA"
  },
  "items": [
    { "code": "101", "qty": 1 },
    { "code": "103", "qty": 5 }
  ],
  "shipping_address": "201, 1st Street, San Jose, CA"
}
```

#### Running the Zuul API Gateway
We will build the Zuul API gateway as a Spring Boot project and run it against the Order service. The code is in the `ch05/sample02` directory. Build the project with Maven:
```bash
> cd sample02
> mvn clean install
```
Key dependencies in `pom.xml` include `spring-cloud-starter-zuul`, which integrates Zuul with Spring Boot.

The `GatewayApplication` class in `src/main/java/com/apress/ch05/sample02/GatewayApplication.java` starts the Zuul API gateway. By default, it runs on port 8080, but you can change this in `application.properties`.

Start the API gateway:
```bash
> mvn spring-boot:run
```
Test the Order API through the Zuul gateway:
```bash
> curl http://localhost:9090/retail/order/11
```
Routing instructions are set in `application.properties`:
```properties
zuul.routes.retail.url=http://localhost:8080
```

#### Enabling TLS for the Zuul API Gateway
Enable Transport Layer Security (TLS) to secure communication between the cURL client and the Zuul API gateway. Generate a key pair and store it in `keystore.jks`:
```bash
> keytool -genkey -alias spring -keyalg RSA -keysize 4096 -validity 3650 -dname "CN=zool,OU=bar,O=zee,L=sjc,S=ca,C=us" -keypass springboot -keystore keystore.jks -storeType jks -storepass springboot
```
Add the following to `application.properties`:
```properties
server.ssl.key-store: keystore.jks
server.ssl.key-store-password: springboot
server.ssl.keyAlias: spring
```
Start the Zuul API gateway with TLS:
```bash
> mvn spring-boot:run
```
Test the Order API over HTTPS:
```bash
> curl –k https://localhost:9090/retail/order/11
```
To avoid the `-k` option, export the public certificate and use it with cURL:
```bash
> keytool -export -file ca.crt -alias spring -rfc -keystore keystore.jks -storePass springboot
> curl --cacert ca.crt https://zool:9090/retail/order/11 --resolve zool:9090:127.0.0.1
```

#### Enforcing OAuth 2.0 Token Validation at the Zuul API Gateway
To enforce OAuth 2.0 token validation, we need an OAuth 2.0 authorization server (STS) to issue tokens and validate them at the Zuul API gateway.

#### Setting Up an OAuth 2.0 Security Token Service (STS)
The STS issues tokens and responds to validation requests. We will use a simple Spring Boot implementation. The code is in the `ch05/sample03` directory.

Key dependencies in `pom.xml` include `spring-boot-starter-security` and `spring-security-oauth2`.

The `TokenServiceApp` class in `src/main/java/com/apress/ch05/sample03/TokenServiceApp.java` configures the OAuth 2.0 authorization server and resource server.

Client registration is done in `AuthorizationServerConfig.java`:
```java
@Override
public void configure(ClientDetailsServiceConfigurer clients) throws Exception {
    clients.inMemory()
        .withClient("10101010")
        .secret("11110000")
        .scopes("foo", "bar")
        .authorizedGrantTypes("client_credentials", "password", "refresh_token")
        .accessTokenValiditySeconds(6000);
}
```
User store configuration is in `WebSecurityConfiguration.java`:
```java
@Override
public void configure(AuthenticationManagerBuilder auth) throws Exception {
    auth.inMemoryAuthentication()
        .withUser("peter").password("peter123").roles("USER");
}
```
Start the authorization server:
```bash
> mvn spring-boot:run
```
The server runs on HTTPS port 8443.