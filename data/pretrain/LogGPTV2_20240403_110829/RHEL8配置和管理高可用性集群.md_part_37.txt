quorum device stopped
quorum device disabled
Quorum device 'net' configuration files removed
```
:::
:::
:::
[]{#assembly_configuring-pacemaker-alert-agents_configuring-and-managing-high-availability-clusters.html}
::: chapter
::: titlepage
# []{#assembly_configuring-pacemaker-alert-agents_configuring-and-managing-high-availability-clusters.html#assembly_configuring-pacemaker-alert-agents_configuring-and-managing-high-availability-clusters}第 27 章 为集群事件触发脚本 {.title}
:::
Pacemaker
集群是一个事件驱动的系统，其中事件可能是资源或节点故障、配置更改或资源启动或停止。您可以将
Pacemaker
集群警报配置为在集群事件发生时执行一些外部操作，警报代理是集群调用的外部程序，其方式与集群调用的资源代理处理资源配置和操作相同。
集群使用环境变量将事件信息传递给代理。代理可以执行任何操作，比如发送电子邮件信息或登录到某个文件或更新监控系统。
::: itemizedlist
-   Pacemaker 提供几个示例警报代理，这些代理默认安装在
    `/usr/share/pacemaker/alerts`{.literal}
    中。这些样本脚本可以像现在一样复制和使用，或者可作为模板使用，以适应您的目的。关于它们支持的所有属性，请参考样本代理的源代码。
-   如果示例警报代理不满足您的需要，您可以编写自己的警报代理来调用。
:::
::: section
::: titlepage
# []{#assembly_configuring-pacemaker-alert-agents_configuring-and-managing-high-availability-clusters.html#using-sample-alert-agents-configuring-pacemaker-alert-agents}安装并配置示例警报代理 {.title}
:::
当使用示例警报代理时，您应该检查该脚本以确保它适合您的需要。这些示例代理是作为特定集群环境自定义脚本的起点。请注意，虽然红帽支持报警代理脚本用来与
Pacemaker 进行通信的接口，但红帽并不支持自定义代理。
要使用示例报警代理中的一个，您必须在集群中的每个节点上安装代理。例如，以下命令安装
`alert_file.sh.sample`{.literal} 脚本来作为 `alert_file.sh`{.literal}。
``` literallayout
# install --mode=0755 /usr/share/pacemaker/alerts/alert_file.sh.sample /var/lib/pacemaker/alert_file.sh
```
安装脚本后，您可以创建使用该脚本的报警。
以下示例配置了一个报警，其使用安装的 `alert_file.sh`{.literal}
报警代理将事件记录到文件中。报警代理是以用户 `hacluster`{.literal}
身份运行的，该用户具有最小的权限集。
这个示例创建日志文件
`pcmk_alert_file.log`{.literal}，该文件将用于记录事件。然后，它会创建报警代理，并将路径添加到日志文件来作为其接收者。
``` literallayout
# touch /var/log/pcmk_alert_file.log
# chown hacluster:haclient /var/log/pcmk_alert_file.log
# chmod 600 /var/log/pcmk_alert_file.log
# pcs alert create id=alert_file description="Log events to a file." path=/var/lib/pacemaker/alert_file.sh
# pcs alert recipient add alert_file id=my-alert_logfile value=/var/log/pcmk_alert_file.log
```
以下示例安装了 `alert_snmp.sh.sample`{.literal} 脚本来作为
`alert_snmp.sh`{.literal}，并配置了一个报警，其使用安装的
`alert_snmp.sh`{.literal} 报警代理来将集群事件作为 SNMP
陷阱发送。默认情况下，该脚本会发送除成功监控调用 SNMP
服务器外的所有事件。这个示例将时间戳格式配置为 meta
选项。配置报警后，本例为报警配置了一个接收者，并显示报警配置。
``` literallayout
# install --mode=0755 /usr/share/pacemaker/alerts/alert_snmp.sh.sample /var/lib/pacemaker/alert_snmp.sh
# pcs alert create id=snmp_alert path=/var/lib/pacemaker/alert_snmp.sh meta timestamp-format="%Y-%m-%d,%H:%M:%S.%01N"
# pcs alert recipient add snmp_alert value=192.168.1.2
# pcs alert
Alerts:
 Alert: snmp_alert (path=/var/lib/pacemaker/alert_snmp.sh)
  Meta options: timestamp-format=%Y-%m-%d,%H:%M:%S.%01N.
  Recipients:
   Recipient: snmp_alert-recipient (value=192.168.1.2)
```
以下示例安装了 `alert_smtp.sh`{.literal}
代理，然后配置了一个报警，其使用安装的报警代理来将集群事件作为电子邮件消息发送。配置报警后，本示例配置了一个接收者，并显示报警配置。
``` literallayout
# install --mode=0755 /usr/share/pacemaker/alerts/alert_smtp.sh.sample /var/lib/pacemaker/alert_smtp.sh
# pcs alert create id=smtp_alert path=/var/lib/pacemaker/alert_smtp.sh options email_sender=PI:EMAIL
# pcs alert recipient add smtp_alert value=PI:EMAIL
# pcs alert
Alerts:
 Alert: smtp_alert (path=/var/lib/pacemaker/alert_smtp.sh)
  Options: email_sender=PI:EMAIL
  Recipients:
   Recipient: smtp_alert-recipient (value=PI:EMAIL)
```
:::
::: section
::: titlepage
# []{#assembly_configuring-pacemaker-alert-agents_configuring-and-managing-high-availability-clusters.html#creating-cluster-alert-configuring-pacemaker-alert-agents}创建集群警报 {.title}
:::
以下命令创建集群警报。您配置的选项是特定于代理的配置值，这些值会被传递给您指定为额外环境变量的路径上的报警代理脚本。如果没有为
`id`{.literal} 指定值，则会生成一个。
``` literallayout
pcs alert create path=path [id=alert-id] [description=description] [options [option=value]...] [meta [meta-option=value]...]
```
可能会配置多个报警代理，集群会对每个事件调用它们。报警代理只会在集群节点上调用。会为涉及
Pacemaker 远程节点的事件调用它们，但不会在这些节点上调用它们。
以下示例创建了一个简单的报警，它将对每个事件调用
`myscript.sh`{.literal}。
``` literallayout
# pcs alert create id=my_alert path=/path/to/myscript.sh
```
:::
::: section
::: titlepage
# []{#assembly_configuring-pacemaker-alert-agents_configuring-and-managing-high-availability-clusters.html#managing-cluster-alert-configuring-pacemaker-alert-agents}显示、修改和删除集群警报 {.title}
:::
您可以使用各种\"pcs\"命令来显示、修改和删除集群警报。
以下命令显示了所有配置的报警以及配置选项的值。
``` literallayout
pcs alert [config|show]
```
以下命令使用指定的 [*alert-id*]{.emphasis} 值更新现有警报。
``` literallayout
pcs alert update alert-id [path=path] [description=description] [options [option=value]...] [meta [meta-option=value]...]
```
以下命令移除具有指定 [*alert-id*]{.emphasis} 值的警报。
``` literallayout
pcs alert remove alert-id
```
或者，您可以运行 `pcs alert delete`{.literal} 命令，该命令与
`pcs alert remove`{.literal} 命令相同。`pcs alert delete`{.literal} 和
`pcs alert remove`{.literal} 命令都允许您指定要删除的多个警报。
:::
::: section
::: titlepage
# []{#assembly_configuring-pacemaker-alert-agents_configuring-and-managing-high-availability-clusters.html#configuring-alert-recipients-configuring-pacemaker-alert-agents}配置集群警报接收者 {.title}
:::
通常，报警是指向一个接收者的。因此，每个报警可能会被额外配置一个或多个接收者。集群将为每个接收者单独调用代理。
接收者可以是警告代理可识别的任何内容：IP
地址、电子邮件地址、文件名或特定代理支持的任何内容。
以下命令为指定报警添加一个新的接收者。
``` literallayout
pcs alert recipient add alert-id value=recipient-value [id=recipient-id] [description=description] [options [option=value]...] [meta [meta-option=value]...]
```
以下命令更新现有的报警接收者。
``` literallayout
pcs alert recipient update recipient-id [value=recipient-value] [description=description] [options [option=value]...] [meta [meta-option=value]...]
```
以下命令移除指定的报警接收者。
``` literallayout
pcs alert recipient remove recipient-id
```
或者，您可以运行 `pcs alert receiver delete`{.literal} 命令，该命令与
`pcs alert receiver remove`{.literal}
命令相同。`pcs alert receiver remove`{.literal} 和
`pcs alert receiver delete`{.literal} 命令都允许您删除多个警报接收者。
以下示例命令将接收者 ID 为 `my-recipient-id`{.literal} 的
`my-alert-recipient`{.literal} 报警接收者添加到报警 `my-alert`{.literal}
中。这会配置集群来调用报警脚本，该脚本已对每个事件的
`my-alert`{.literal} 进行了配置，并将接收者 `some-address`{.literal}
作为环境变量传递。
``` literallayout
#  pcs alert recipient add my-alert value=my-alert-recipient id=my-recipient-id options value=some-address
```
:::
::: section
::: titlepage
# []{#assembly_configuring-pacemaker-alert-agents_configuring-and-managing-high-availability-clusters.html#cluster-alert-meta-options-configuring-pacemaker-alert-agents}警报 meta 选项 {.title}
:::
与资源代理一样，可以对报警代理配置 meta 选项来影响 Pacemaker
调用它们的方式。下表描述了警报 meta 选项。meta
选项可以为每个报警代理和每个接收者配置。
::: table
[]{#assembly_configuring-pacemaker-alert-agents_configuring-and-managing-high-availability-clusters.html#tb-alert-meta-HAAR}
**表 27.1. 报警 Meta 选项**
::: table-contents
  meta-Attribute                 默认值          描述
  ------------------------------ --------------- ----------------------------------------------------------------------------------------------
  `timestamp-format`{.literal}   %H:%M:%S.%06N   将事件时间戳发送到代理时，集群将使用的格式。这是与 `date`{.literal}(1)命令一起使用的字符串。
  `timeout`{.literal}            30s             如果报警代理没有在这段时间内完成，它将被终止。
:::
:::
以下示例配置了一个报警，其调用脚本 `myscript.sh`{.literal}
，然后为报警添加两个接收者。第一个接收者 ID 为
`my-alert-recipient1`{.literal}，第二个收件者的 ID 为
`my-alert-recipient2`{.literal}。这个脚本会为每个事件调用两次，每个调用都使用
15 秒超时。一个调用将被传递给接收者
`PI:EMAIL`{.literal}，时间戳格式为 %D
%H:%M，另一个调用将被传递给接收者
`PI:EMAIL`{.literal}，时间戳格式为 %c。
``` literallayout
# pcs alert create id=my-alert path=/path/to/myscript.sh meta timeout=15s
# pcs alert recipient add my-alert value=PI:EMAIL id=my-alert-recipient1 meta timestamp-format="%D %H:%M"
# pcs alert recipient add my-alert value=PI:EMAIL id=my-alert-recipient2 meta timestamp-format="%c"
```
:::
::: section
::: titlepage
# []{#assembly_configuring-pacemaker-alert-agents_configuring-and-managing-high-availability-clusters.html#cluster-alert-configuration-configuring-pacemaker-alert-agents}集群警报配置命令示例 {.title}
:::
以下连续示例展示了一些基本的报警配置命令，以显示用于创建报警、添加接收者和显示配置的报警的格式。
请注意，虽然您必须在集群中的每个节点上安装警报代理，但您需要只运行一次
`pcs`{.literal} 命令。
以下命令创建了一个简单的报警，为报警添加两个接收者，并显示配置的值。
::: itemizedlist
-   由于没有指定报警 ID 值，系统会创建 `alert`{.literal} 的报警 ID 值。
-   第一个接收者创建命令指定 `rec_value`{.literal}
    的接收者。由于这个命令没有指定接收者 ID，因此
    `alert-recipient`{.literal} 的值被用作接收者 ID。
-   第二个接收者创建命令指定了 `rec_value2`{.literal}
    的接收者。此命令为接收者指定 `my-recipient`{.literal} 的接收者 ID。
:::
``` literallayout
# pcs alert create path=/my/path
# pcs alert recipient add alert value=rec_value
# pcs alert recipient add alert value=rec_value2 id=my-recipient
# pcs alert config
Alerts:
 Alert: alert (path=/my/path)
  Recipients:
   Recipient: alert-recipient (value=rec_value)
   Recipient: my-recipient (value=rec_value2)
```
以下命令添加第二个报警，以及该报警的接收者。第二个报警的报警 ID 是
`my-alert`{.literal}，接收者的值是
`my-other-recipient`{.literal}。因为没有指定接收者 ID，系统会提供接收者
ID `my-alert-recipient`{.literal}。
``` literallayout
# pcs alert create id=my-alert path=/path/to/script description=alert_description options option1=value1 opt=val meta timeout=50s timestamp-format="%H%B%S"
# pcs alert recipient add my-alert value=my-other-recipient
# pcs alert
Alerts:
 Alert: alert (path=/my/path)
  Recipients:
   Recipient: alert-recipient (value=rec_value)
   Recipient: my-recipient (value=rec_value2)
 Alert: my-alert (path=/path/to/script)
  Description: alert_description
  Options: opt=val option1=value1