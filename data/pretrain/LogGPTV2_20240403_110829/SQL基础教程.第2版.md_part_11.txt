假 假 真 真 假 P AND (Q OR R)：商品种类为办公用品，并且，
登记日期是2009年9月11日或者2009年9月
假 假 假 假 假
20日
● 76 第2章 查询基础
代码清单2-36中的SELECT语句，查询出了唯一满足P AND(Q OR R)
为真的记录“打孔器”。
法则2-14
通过创建真值表，无论多复杂的条件，都会更容易理解。
专 栏
逻辑积与逻辑和
将表2-4的真值表中的真变为1、假变为0，意外地得到了下述规则。
表2-A 真为1、假为0的真值表
AND（逻辑积） OR（逻辑和） NOT
P Q 积 P AND Q P Q 和 P OR Q P 反转 NOT P
1 1 1×1 1 1 1 1+1 1 1 1→0 0
1 0 1×0 0 1 0 1+0 1 0 0→1 1
注A
0 1 0×1 0 0 1 0+1 1
严格来说，此处的1+1=1与通常
0 0 0×0 0 0 0 0+0 0
的整数运算并不相同。只是因为
真值中只存在0和1两种情况，所
以才有了这样的结果。 NOT运算符并没有什么特别的改变，但是AND运算的结果与乘法运算（积），
OR运算的结果与加法运算（和）的结果却是一样的A 。因此，使用AND运算符
KEYWORD
进行的逻辑运算称为逻辑积，使用OR运算符进行的逻辑运算称为逻辑和。
●逻辑积
●逻辑和
含有 时的真值
NULL
上一节我们介绍了查询NULL时不能使用比较运算符（=或者<>），
需要使用IS NULL运算符或者IS NOT NULL运算符。实际上，使用逻
辑运算符时也需要特别对待NULL。
我们来看一下Product（商品）表，商品“叉子”和“圆珠笔”的
进货单价（purchase_price）为NULL。那么，对这两条记录使用查
询条件purchase_price = 2800（进货单价为2800日元）会得到什
么样的真值呢？如果结果为真，则通过该条件表达式就可以选取出“叉子”
和“圆珠笔”这两条记录。但是在之前介绍“不能对NULL使用比较运
2-3 逻辑运算符 77 ●
算符”（2-2节）时，我们就知道结果并不是这样的，也就是说结果不为真。
那结果会为假吗？实际上结果也不是假。如果结果为假，那么对其进
行否定的条件NOT purchase_price = 2800（进货单价不是2800
日元）的结果应该为真，也就能选取出这两条记录了（因为假的对立面为
真），但实际结果却并不是这样。
既不是真也不是假，那结果到底是什么呢？其实这是SQL中特有的
KEYWORD 情况。这时真值是除真假之外的第三种值——不确定（UNKNOWN）。一
●不确定
般的逻辑运算并不存在这第三种值。SQL之外的语言也基本上只使用真
●二值逻辑
●三值逻辑 和假这两种真值。与通常的逻辑运算被称为二值逻辑相对，只有SQL中
的逻辑运算被称为三值逻辑。
因此，表2-4中的真值表并不完整，完整的真值表应该像表2-6这样
包含“不确定”这个值。
表2-6 三值逻辑中的AND和OR真值表
AND OR
P Q P AND Q P Q P OR Q
真 真 真 真 真 真
真 假 假 真 假 真
真 不确定 不确定 真 不确定 真
假 真 假 假 真 真
假 假 假 假 假 假
假 不确定 假 假 不确定 不确定
不确定 真 不确定 不确定 真 真
不确定 假 假 不确定 假 不确定
不确定 不确定 不确定 不确定 不确定 不确定
专 栏
表中设置 约束的原因
Product NOT NULL
原本只有4行的真值表，如果要考虑NULL的话就会像表2-6那样增加为
3×3=9行，看起来也变得更加繁琐，考虑NULL时的条件判断也会变得异常复杂，
这与我们希望的结果大相径庭。因此，数据库领域的有识之士们达成了“尽量不
使用NULL”的共识。
这就是为什么在创建Product表时要给某些列设置NOT NULL约束（禁
止录入NULL）的缘故。
● 78 第2章 查询基础
练习题
2.1 编写一条SQL语句，从Product（商品）表中选取出“登记日期（regist_
date）在2009年4月28日之后”的商品。查询结果要包含product_
name和regist_date两列。
2.2 请说出对Product表执行如下3条SELECT语句时的返回结果。
① SELECT *
FROM Product
WHERE purchase_price = NULL;
② SELECT *
FROM Product
WHERE purchase_price <> NULL;
③ SELECT *
FROM Product
WHERE product_name > NULL;
2.3 代码清单2-22（2-2节）中的SELECT语句能够从Product表中取出“销
售单价（sale_price）比进货单价（purchase_price）高出500
日元以上”的商品。请写出两条可以得到相同结果的SELECT语句。执行
结果如下所示。
执行结果
product_name | sale_price | purchase_price
---------------+-------------+----------------
T恤衫 | 1000 | 500
运动T恤 | 4000 | 2800
高压锅 | 6800 | 5000
2.4 请写出一条SELECT语句，从Product表中选取出满足“销售单价打九
折之后利润高于100日元的办公用品和厨房用具”条件的记录。查询结果
要包括product_name列、product_type列以及销售单价打九折之
后的利润（别名设定为profit）。
提示：销售单价打九折，可以通过sale_price列的值乘以0.9获得，利润可
以通过该值减去purchase_price列的值获得。
2-3 逻辑运算符 79 ●
第3章 聚合与排序
对表进行聚合查询
对表进行分组
为聚合结果指定条件
对查询结果进行排序
本章重点
随着表中记录（数据行）的不断积累，存储数据逐渐增加，有时我们可能
希望计算出这些数据的合计值或者平均值等。本章我们将学习使用SQL语句进
行汇总操作的方法。此外，我们还会学习在汇总操作时指定条件，以及对汇总
结果进行升序、降序的排序方法。
3-1 对表进行聚合查询
■聚合函数
■计算表中数据的行数
■计算NULL之外的数据的行数
■计算合计值
■计算平均值
■计算最大值和最小值
■使用聚合函数删除重复值（关键字DISTINCT）
3-2 对表进行分组
■GROUP BY子句
■聚合键中包含NULL的情况
■使用WHERE子句时GROUP BY的执行结果
■与聚合函数和GROUP BY子句有关的常见错误
3-3 为聚合结果指定条件
■HAVING子句
■HAVING子句的构成要素
■相对于HAVING子句，更适合写在WHERE子句中的条件
3-4 对查询结果进行排序
■ORDER BY子句
■指定升序或降序
■指定多个排序键
■NULL的顺序
■在排序键中使用显示用的别名
■ORDER BY子句中可以使用的列
■不要使用列编号
3-1 对表进行聚合查询 81 ●
第3章 聚合与排序
3-1
对表进行聚合查询
● 使用聚合函数对表中的列进行计算合计值或者平均值等的汇总操作。
学习重点
● 通常，聚合函数会对NULL以外的对象进行汇总。但是只有COUNT函数
例外，使用COUNT（*）可以查出包含NULL在内的全部数据的行数。
● 使用DISTINCT关键字删除重复值。
聚合函数
KEYWORD 通过SQL对数据进行某种操作或计算时需要使用函数。例如，计算表
●函数
中全部数据的行数时，可以使用COUNT函数。该函数就是使用COUNT
●COUNT函数
（计数）来命名的。除此之外，SQL中还有很多其他用于汇总的函数，请
大家先记住以下5个常用的函数。
COUNT： 计算表中的记录数（行数）
SUM： 计算表中数值列中数据的合计值
AVG： 计算表中数值列中数据的平均值
MAX： 求出表中任意列中数据的最大值
MIN： 求出表中任意列中数据的最小值
KEYWORD 如上所示，用于汇总的函数称为聚合函数或者聚集函数，本书中统称
●聚合函数
为聚合函数。所谓聚合，就是将多行汇总为一行。实际上，所有的聚合函
●聚集函数
●聚合 数都是这样，输入多行输出一行。
接下来，本章将继续使用在第1章中创建的Product表（图3-1）
来学习函数的使用方法。
图3-1 Product表的内容
product_id product_name product_type sale_price purchase_price regist_date
（商品编号）（商品名称） （商品种类） （销售单价） （进货单价） （登记日期）
0001 T恤衫 衣服 1000 500 2009-09-20
0002 打孔器 办公用品 500 320 2009-09-11
该列的最小值
● 82 第3章 聚合与排序
（续）
product_id product_name product_type sale_price purchase_price regist_date
（商品编号）（商品名称） （商品种类） （销售单价） （进货单价） （登记日期）
0003 运动T恤 衣服 4000 2800 NULL
0004 菜刀 厨房用具 3000 2800 2009-09-20
0005 高压锅 厨房用具 6800 5000 2009-01-15
0006 叉子 厨房用具 500 NULL 2009-09-20
该列的
0007 擦菜板 厨房用具 最大值 880 790 2008-04-28
0008 圆珠笔 办公用品 100 NULL 2009-11-11
该列的最小值 该列的最大值
计算表中数据的行数
首先，我们以COUNT函数为例让大家对函数形成一个初步印象。函
数这个词，与我们在学校数学课上学到的意思是一样的，就像是输入某个
注A 值就能输出相应结果的盒子一样A。
函数中的函就是盒子的意思。
使用COUNT函数时，输入表的列，就能够输出数据行数。如图3-2
所示，将表中的列放入名称为COUNT的盒子中，咔嗒咔嗒地进行计算，
咕咚一下行数就出来了……就像自动售货机那样，很容易理解吧。
图3-2 COUNT函数的操作演示图
输入：表 函数 输出：值
4
COUNT
接下来让我们看一下SQL中的具体书写方法。COUNT函数的语法本
身非常简单，像代码清单3-1那样写在SELECT子句中就可以得到表中
全部数据的行数了。
代码清单3-1 计算全部数据的行数
参数（parameter）
SELECT COUNT(*)
FROM Product;
3-1 对表进行聚合查询 83 ●
执行结果
count
-------
8 返回值
COUNT ( )中的星号，我们在2-1节中已经学过，代表全部列的意思。
COUNT函数的输入值就记述在其后的括号中。
KEYWORD 此处的输入值称为参数或者parameter，输出值称为返回值。这些称
●参数（parameter）
谓不仅本书中会使用，在多数编程语言中使用函数时都会频繁出现，请大
●返回值
家牢记。
计算 之外的数据的行数
NULL
想要计算表中全部数据的行数时，可以像SELECT COUNT(*)~这
样使用星号。如果想得到purchase_price列（进货单价）中非空行
数的话，可以像代码清单3-2那样，通过将对象列设定为参数来实现。
代码清单3-2 计算NULL之外的数据行数
SELECT COUNT(purchase_price)
FROM Product;
执行结果
count
-------
6
此时，如图3-1所示，purchase_price列中有两行数据是
NULL, 因此并不应该计算这两行。对于COUNT函数来说，参数列不同计
算的结果也会发生变化，这一点请大家特别注意。为了有助于大家理解，
请看如下这个只包含NULL的表的极端例子。
图3-3 只包含NULL的表
NullTbl表
列1（col_1）
NULL
● 84 第3章 聚合与排序
我们来看一下针对上述表，将星号（*）和列名作为参数传递给
COUNT函数时所得到的结果（代码清单3-3）。
代码清单3-3 将 包含NULL的列作为参数时，COUNT（*）和COUNT（）的
结果并不相同
SELECT COUNT(*), COUNT(col_1)
FROM NullTbl;
执行结果
count | count
-------+------ count (col_1) 的结果
3 | 0
count (*) 的结果
如上所示，即使对同一个表使用COUNT函数，输入的参数不同得到
的结果也会不同。由于将列名作为参数时会得到NULL之外的数据行数，
所以得到的结果是0行。
该特性是COUNT函数所特有的，其他函数并不能将星号作为参数（如
果使用星号会出错）。
法则3-1