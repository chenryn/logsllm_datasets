Time Range
hpHosts [17]
Conﬁcker [2]
Malware Domain Blocklist [20]
Malc0de Database [19]
PhishTank [26]
Ransomware Tracker [29]
ZeuS Tracker [36]
Malware Domains List [21]
Total # of Unique Domains
337,065
90,884
24,243
20,049
9,400
5,968
1,309
895
465,942
2009-05-05 – 2017-10-01
2017-10-31
2015-11-10 – 2017-10-02
2017-05-15 – 2017-10-31
2007-10-03 – 2017-10-31
2016-11-17 – 2017-09-29
2017-05-15 – 2017-10-31
2009-05-08 – 2017-09-28
TABLE II: The blacklists used to collect blacklisted domains DB
considered in our dataset.
and the list of blacklisted domains DB to form the ﬁnal list of
malicious domains DM . We ﬁltered out domains that belong
to: cloud services, dynamic IP services, bulk registration,
URL shortening services, and adNetworks. The total number
of unique domains in DM is 1,067,968. To identify taken-
down domains from DM (either by sinkholing or delisting)
and analyze their lifecycles, we collected the following data
sources for each domain in DM :
•PDNS. In order to study the lifecycle of taken-down do-
mains, we utilize the Passive DNS (PDNS) data provided by
Farsight [13]. This dataset includes passively gathered DNS
resolutions and zone ﬁles for some supported TLD zones. This
dataset contains historical successful resolutions for domains,
storing a variety of record types that include A, NS, CNAME,
SOA, PTR, etc. The data is provided in an aggregated format.
For each domain in DM we queried all A and NS records in
November 2017.
•WHOIS. When a hold is placed on a domain, the domain
will not be active in the DNS. As a result, it can no longer
be found from our PDNS data. To ﬁnd such a domain, we
resorted to the historical WHOIS data provided by our industry
collaborator [25]. This dataset covers around 55% of our
malicious domains DM .
B. Identifying Sinkholed Domains and their Durations
Here, we elaborate on how we used PDNS data collected
for domains in DM to identify taken-down domains through
sinkholing (i.e., sinkholed domains) and how to proﬁle their
sinkholing duration.
Identifying sinkholed domains. We utilized PDNS data col-
lected for domains in DM to identify sinkholed domains. Note
that as mentioned in Section III-A, the list of possible sink-
holed domains DS is contained in DM . Such apex domains
that appeared in DS may not necessarily be sinkholed but
instead their subdomains were. Therefore, we traversed the
resolution history of the PDNS records for each domain in
DM to look for indication of sinkholing by checking their
A and NS records. We considered a domain to be sinkholed
only if its apex domain or its nameserver are sinkholed. We
eliminated those records that were only seen within a very
short duration of time (a second)2.
We marked each domain’s PDNS record with one of
the following labels: sinkholed, possibleSinkholed, or notSink-
holed. We utilized the sinkhole list in Table I to label NS
and A records. If the nameserver/IPs of the record was found
on the sinkhole list, we labeled the record as sinkholed. Note
that we extended our sinkhole list to include IP ranges. More
speciﬁcally, given the existing IP sinkholes afﬁliated with
2This happens when the timestamp of first-seen ﬁeld in a PDNS record
is identical to its last-seen, indicating that the duration of the record is
too short to be useful for our study.
6
First-seen:2018-01-15
bailiwick: com.
rdata: ns.sinkhole.com.
Last-seen:2018-06-30
rrtype: NS
(a)
First-seen:2018-03-15
bailiwick: com.
rdata: ns.namseserver.com.
Last-seen:2018-03-30
rrtype: NS
(b)
Fig. 4: PDNS record aggregation, two overlapping observations with
different rdate values in (a) and (b) for malicious.com.
security organizations, we used IP WHOIS to recognize their
IP ranges and add them into the sinkhole list. Note that
this list is only used for labeling the records of malicious
domains and that no additional reverse lookups were performed
on these ranges. We believed it
is safe to assume that a
malicious domain is sinkholed if it resolves to an IP range
that belongs to a sinkhole operator. We labeled a record as
possiblySinkholed if the nameserver of the record included a
keyword such as sinkhole or seize (e.g., ns.seize.com), or
if it pointed to a reserved IP (e.g. localhost), or if it included
unconﬁrmed sinkholes (e.g., those for which we could not
identify their operators). Finally, the remainder were labeled as
notSinkholed. At this point, PDNS records were labeled and
we identiﬁed 608,557 sinkholed apex domains. So, the next
step was to analyze the sinkhole durations.
Identifying sinkholed domains’ durations. Once each record
was labeled, we tried to ﬁnd out the sinkhole duration for
each domain and its release timestamp, again based on its
related PDNS records. Here, we deﬁne the sinkhole duration as
the duration in which the domain was resolved by a sinkhole
nameserver or resolved to a sinkhole IP. We also deﬁne the
release timestamp as the one when the domain was released
from the sinkhole.
To determine these timestamps, ﬁrst we had to understand
how Farsight [13], the PDNS data provider, aggregates DNS
records, which presented a challenge in estimating the dura-
tions. PDNS data provided by Farsight are aggregated record
sets. It collects multiple DNS query records to generate a
single record if the following ﬁelds are identical: bailiwick,
record type (i.e., rrtype), and query answer (i.e., rdata).
However, calculating the sinkhole duration is not straightfor-
ward. Subtracting the last-seen ﬁeld from the ﬁrst-seen without
accounting for the existence of other overlapping records
may lead to inaccurate estimations of the sinkholing duration.
Figure 4 shows a hypothetical example of PDNS records for
a sinkholed domain, malicious.com. The domain was resolved
by a sinkhole nameserver ns.mySinkhole.com, as indi-
cated in Figure 4a. However, the domain was also resolved
by another nameserver (i.e., ns.namseserver.com) and
overlapped with the previous record, as shown in Figure 4b.
Therefore, when calculating the sinkhole duration, we had
to account for the occurrence of ns.namseserver.com
during March to break the sinkholing duration into two parts:
2018-01-15 to 2018-03-14, and 2018-03-31 to 2018-06-30.
Another challenge was that
the DNS query records in
the Farsight’s PDNS were independently collected from two
sources: TLD zone ﬁles (for some supported TLDs), and
Farsight’s DNS sensors. Further, the data received from the
sensors were also aggregated separately according to their
TLDs or second-level domains. So, for each sinkholed domain,
its sinkhole records came from the TLD zone ﬁles (for
supported TLDs), Farsight’s aggregated data based on TLD,
and the aggregated data based on the second-level domain.
Therefore, the data about duration is scattered across several
records from different resources. The question then became
how to leverage the records from all these sources to estimate
a domain’s sinkhole duration.
The records from all these sources are utilized to estimate
the domain’s sinkhole duration. We compared the different
records of the domain to break a long duration into shorter
ones or to merge two overlapping durations. Speciﬁcally,
we ﬁrst determined whether the domain’s sinkholed records
overlap with notSinkholed records in terms of their durations.
If so, we had to update the ﬁrst-seen and the last-seen ﬁelds
for the domain’s sinkhole timestamps to exclude the time
intervals of the notSinkholed records. We then looked at the
overlap between two sinkholed records, which allowed us to
extend the domain’s sinkhole duration to include the time
intervals for both records. In this way, we could get a more
accurate estimate of a given domain’s sinkhole duration and
accordingly its release timestamp. This information is used in
our measurement study reported in Section IV and Section V.
Note that the sinkhole lifecycle measured in our research
was based mainly on a domain’s visibility in the PDNS. Such
visibility could be limited, when Farsight’s sensors did not
observe resolution requests for the domain. Nevertheless, the
information allowed us to come up with a rough estimate
about the domain’s sinkhole duration, which was important
to understand the domain’s take-down process.
C. Identifying Delisted Domains
Compared with sinkholed domains, delisted domains are
more difﬁcult
to observe because they are not resolvable
through DNS. Therefore, they will not appear in the PDNS
data once delisted. To identify such domains we used WHOIS
data.
Domain WHOIS status identiﬁcation. To identify delisted
domains, we used the domains’ WHOIS records. As mentioned
in Section II, a domain’s WHOIS records include domain’s
registration status (i.e., EPP codes). Setting a domain’s status
to SERVERHOLD/CLIENTHOLD is an indicator of a possible
take-down performed by a take-down executor. In our research,
we utilized a set of historical WHOIS data provided by the
360 Netlab [25] to ﬁnd out when a domain was delisted. This
historical dataset covers around 55% of the domains in DM
and the earliest WHOIS record dates back to November 2014.
When a domain is taken down by the registry, its EPP
status code is set to SERVERHOLD. Similarly, when a domain
is taken down by the registrar, a hold will be placed using
a CLIENTHOLD EPP status code, essentially removing the
domain from the registry’s DNS zone ﬁle, and therefore it will
not be resolved. However, it is important to note that these two
EPP status codes are not exclusively used for domain seizure.
They are sometimes set by the registry or the registrar for other
purposes for example, after the WHOIS veriﬁcation duration
has passed, or when the domain is subject to deletion [12].
To identify delisted domains, we use a set of heuristics to
identify the occurrence of a take-down action, as illustrated in
Algorithm 1.
7
Speciﬁcally, we ﬁrst checked whether either REDEMPTION-
PERIOD or PENDINGDELETE appeared in the domain’s status
ﬁeld, which indicates deletion. We then looked for a sign for
auto renewal (i.e., AUTORENEWPERIOD). If any of these codes
were set along with a hold ﬂag, this strongly indicated that the
hold was not caused by the take-down action. One problem was
that not all the registries/registrars implemented the above EPP
status code. In other words, some domains may not have had
the aforementioned ﬂags after their expiration. Therefore, we
had to set additional heuristics to determine whether a domain
was about to be removed or was in the auto renewal stage.
Therefore, we ﬁrst checked whether the hold was placed
after the domain’s expiration date. If not, we still have to look
into the possibility that the hold was set due to auto renewal,
which extends the domain for one additional year by some
registries, even before the owner pays. Such a renewed domain
would be placed on CLIENTHOLD, pending for the payment
from the owner. We identiﬁed such records by looking at its
update date and expiration date. If the difference was one
year, we conservatively assumed that the hold was due to non-
payment and did not consider the domain to be delisted.
Further, the registry requires a newly created WHOIS record
to be veriﬁed by its registrant within 15 days. After that,
CLIENTHOLD is set for unveriﬁed ones. We checked whether
the hold was placed within 15 days of the creation of a domain.
If so, we did not consider it as a delisted domain.
The proposed algorithm identiﬁes a delisted domain based
only on one snapshot of its WHOIS data due to limited number
of snapshots available in our dataset. This method, however,
may cause some domains to be labeled inaccurately [46].
Speciﬁcally, it would mislabel a seized domain as a non-
seized one (i.e., introducing false negatives). For example,
it will mislabel a seized domain that has been intentionally
renewed on its auto renewal date as a non-seized domain.
Similarly, it will misconstrue a seized domain that is placed
on hold after its expiration date as a non-seized one (this case
observed in .org domains). To measure the prevalence of
such mislabeled cases, we evaluated our algorithm through
sampling and manual validation. In particular, we investigated
52 domains in which we had at least two snapshots (one before
the expiration, and the other after and placed on hold). For
this set, we counted the number of domains that were on hold
before the expiration and found only three cases (5.77%). In
general, the algorithm we used introduced less than 4% of
domains to our analysis. Therefore, the effect on our study is
minimal.
Note that some other EPP status codes have been ob-
served in take-down operations, such as TRANSFERPROHIB-
ITED, DELETEPROHIBITED, and UPDATEPROHIBITED. How-
ever, they are not strong take-down indicators and could be
used for additional protection. These EPP codes do not affect
the resolution of the domain; actually the take-down action that
set these records must be accompanied by DNS redirection
(i.e., a sinkholing). Therefore, we ignored these codes and
relied instead on the sinkhole detection, as mentioned earlier
in Section III-B, to capture these taken-down domains.
Take-down duration extension. We also studied the cases
in which malicious domains were ﬁrst sinkholed and then
delisted. These cases were identiﬁed using our approaches for
identifying sinkholed domains (see Section III-B) and delisted
domains. Once we identiﬁed a delisted domain, we looked it
Algorithm 1: EPP status analysis to identify take-down
actions thought delisting
1 delisted = False
// lastCheck is the date when WH O I S data were
crawled
2 dateToCompare = lastCheck
3 if ! lastCheck then
4
5 end if
dateT oCompare = recordDate
// satusList contains all EPP status codes found
in the current WH O I S record
6 if (pendingDelete (cid:54)∈ satusList) &
(redemptionP eriod (cid:54)∈ satusList) &
(autorenewP eriod (cid:54)∈ satusList) then
7
8
9
10
11
if Hold (cid:107) serverHold (cid:107) clientHold ∈ satusList
then
if dateT oCompare < expDate then
if clienthold ∈ statusList & (UpdateDate
is one year less than ExpirationDate (cid:107)
UpdateDate is within 15 days of
creationDate) then
delisted = F alse
note = “most likely due to auto
renewal, or WHOIS verif ication”
else
end if
delisted = T rue
12
13
14
15
16
17 end if
end if
end if
up in the set of sinkholed domains discovered using the PDNS.
If the domain was put on hold after being sinkholed, then its
taken-down duration was extended until the expiration date of
its WHOIS record.
IV. ANALYZING TAKE-DOWN OPERATIONS
In this section we discuss our new ﬁndings and understand-