1. sample an error term 𝑒 ∈ 𝜇 + 𝑝𝑅′ (from a distribution that should be a 𝑝 factor wider
than that of the secret key);
2. sample a uniformly random 𝑐1 ← 𝑅′
𝑞;
106
3. output the LSD-form ciphertext 𝑐(𝑆) = (𝑒 − 𝑐1 · 𝑠) + 𝑐1 · 𝑆 ∈ 𝑅′
𝑞[𝑆], with 𝑘 = 0, 𝑙 =
1 ∈ Z𝑝.
(Observe that 𝑐(𝑠) = 𝑒 (mod 𝑞𝑅′), as desired.)
This translates directly into just a few lines of Haskell code, which is monadic due to its use
of randomness:
encrypt :: (m ‘Divides‘ m’, MonadRandom rnd, ...)
=> SK (Cyc m’ z)
-> PT (Cyc m zp)
-> rnd (CT m zp (Cyc m’ zq))
encrypt (SK v s) mu = do
e
 SK (Cyc m’ z) -> CT m zp (Cyc m’ zq) -> Cyc m’ z
errorTerm (SK _ s) (CT LSD _ _ c) = liftDec (evaluate c (reduce s))
Following Equation (4.3.2), we then compute 𝑙· 𝑔−𝑘
of the message 𝜇 into 𝑅′
𝑝, so we ﬁnally take the twace to recover 𝜇 ∈ 𝑅𝑝 itself:
𝑚′ · 𝑒 mod 𝑝𝑅′. This yields the embedding
decrypt :: (Lift zq z, Reduce z zp, ...)
=> SK (Cyc m’ z) -> CT m zp (Cyc m’ zq) -> PT (Cyc m zp)
decrypt sk ct@(CT LSD k l _) =
let e = reduce (errorTerm sk ct)
in (scalarCyc l) * twace (iterate divG e !! k)
107
4.3.3 Homomorphic Addition and Multiplication
Homomorphic addition of ciphertexts with the same values of 𝑘 and 𝑙 is simple: convert the
ciphertexts to the same form (MSD or LSD), then add their polynomials. It is also possible
adjust the values of 𝑘, 𝑙 as needed by multiplying the polynomial by an appropriate factor,
which only slightly enlarges the error. Accordingly, we deﬁne CT m zp (Cyc m’ zq) to be
an instance of Additive, for appropriate argument types.
Now consider homomorphic multiplication: suppose ciphertexts 𝑐1(𝑆), 𝑐2(𝑆) encrypt
messages 𝜇1, 𝜇2 in LSD form, with auxiliary values 𝑘1, 𝑙1 and 𝑘2, 𝑙2 respectively. Then
𝑔𝑚′ · 𝑐1(𝑠) · 𝑐2(𝑠) = 𝑔𝑚′ · 𝑒1 · 𝑒2
𝑔𝑚′ · 𝑒1 · 𝑒2 = (𝑙1𝑙2)−1 · 𝑔𝑘1+𝑘2+1
𝑚′
(mod 𝑞𝑅′),
· (𝜇1𝜇2)
(mod 𝑝𝑅′),
and the error term 𝑒 = 𝑔𝑚′ · 𝑒1 · 𝑒2 satisﬁes Invariant 4.2.2, because 𝑒1, 𝑒2 do (see subsec-
tion 4.2.2). Therefore, the LSD-form ciphertext
𝑐(𝑆) := 𝑔𝑚′ · 𝑐1(𝑆) · 𝑐2(𝑆) ∈ 𝑅′
𝑞[𝑆]
encrypts 𝜇1𝜇2 ∈ 𝑅𝑝 with auxiliary values 𝑘 = 𝑘1 + 𝑘2 + 1 and 𝑙 = 𝑙1𝑙2 ∈ Z𝑝. Notice that
the degree of the output polynomial is the sum of the degrees of the input polynomials.
More generally, it turns out that we only need one of 𝑐1(𝑆), 𝑐2(𝑆) to be in LSD form; the
product 𝑐(𝑆) then has the same form as the other ciphertext.2 All this translates immediately
to an instance of Ring for CT m zp (Cyc m’ zq), with the interesting case of multiplication
having the one-line implementation
(CT LSD k1 l1 c1) * (CT d2 k2 l2 c2) =
CT d2 (k1+k2+1) (l1*l2) (mulG  c1 * c2)
2If both ciphertexts are in MSD form, then it is possible to use the “scale free” homomorphic multiplication
method of [Bra12], but we have not implemented it because it appears to be signiﬁcantly less efﬁcient than
just converting one ciphertext to LSD form.
108
(The other cases just swap the arguments or convert one ciphertext to LSD form, thus
reducing to the case above.)
4.3.4 Modulus Switching
Switching the ciphertext modulus is a form of rescaling typically used for decreasing
the modulus, which commensurately reduces the absolute magnitude of the error in a
ciphertext—though the error rate relative to the modulus stays essentially the same. Because
homomorphic multiplication implicitly multiplies the error terms, keeping their absolute
magnitudes small can yield major beneﬁts in controlling the error growth. Modulus switch-
ing is also sometimes useful to temporarily increase the modulus, as explained in the next
subsection.
Modulus switching is easiest to describe and implement for ciphertexts in MSD form
(Equation (4.3.3)) that have degree at most one. Suppose we have a ciphertext 𝑐(𝑆) =
𝑐0 + 𝑐1𝑆 under secret key 𝑠 ∈ 𝑅′, where
𝑐0 + 𝑐1𝑠 = 𝑑 ≈ 𝑞
𝑝 · 𝛾
(mod 𝑞𝑅′)
𝑚′ · 𝜇 ∈ 𝑅𝑝. Switching to a modulus 𝑞′ is just a suitable rescaling of each
for 𝛾 = 𝑙−1 · 𝑔𝑘
𝑖 ≈ (𝑞′/𝑞) · 𝑐𝑖; note that the right-hand sides here are
𝑐𝑖 ∈ 𝑅′
fractional, so they need to be discretized using an appropriate basis (see the next paragraph).
𝑞′ such that 𝑐′
𝑞 to some 𝑐′
𝑖 ∈ 𝑅′
Observe that
𝑐′
0 + 𝑐′
1𝑠 ≈ 𝑞′
𝑞 (𝑐0 + 𝑐1𝑠) = 𝑞′
𝑞 · 𝑑 ≈ 𝑞′
𝑝 · 𝛾
(mod 𝑞′𝑅′),
so the message is unchanged but the absolute error is essentially scaled by a 𝑞′/𝑞 factor.
Note that the ﬁrst approximation above hides the extra discretization error 𝑒0 + 𝑒1𝑠 where
𝑞 𝑐𝑖, so the main question is what bases of 𝑅′ to use for the discretization, to best
𝑒𝑖 = 𝑐′
maintain Invariant 4.2.2. We want both 𝑒0 and 𝑒1𝑠 to satisfy the invariant, which means
𝑖 − 𝑞′
109
we want the entries of 𝜎(𝑒0 · 𝑔𝑚′) and 𝜎(𝑒1𝑠 · 𝑔𝑚′) = 𝜎(𝑒1) ⊙ 𝜎(𝑠 · 𝑔𝑚′) to be essentially
independent and as small as possible; because 𝑠 ∈ 𝑅′ itself satisﬁes the invariant (i.e., the
entries of 𝜎(𝑠 · 𝑔𝑚′) are small), we want the entries of 𝜎(𝑒1) to be as small as possible. It
turns out that these goals are best achieved by rescaling 𝑐0 using the decoding basis ⃗𝑑, and 𝑐1
using the powerful basis ⃗𝑝. This is because 𝑔𝑚′ · ⃗𝑑 and ⃗𝑝 respectively have nearly optimal
spectral norms over all bases of 𝑔𝑚′𝑅′ and 𝑅′, as shown in [LPR13a].
Our Haskell implementation is therefore simply
rescaleLinearCT :: (Rescale zq zq’, ...)
=> CT m zp (Cyc m’ zq) -> CT m zp (Cyc m’ zq’)
rescaleLinearCT (CT MSD k l (Poly [c0,c1])) =
let c’0 = rescaleDec c0
c’1 = rescalePow c1
in CT MSD k l $ Poly [c’0, c’1]
4.3.5 Key Switching and Linearization
Recall that homomorphic multiplication causes the degree of the ciphertext polynomial to
increase. Key switching is a technique for reducing the degree, typically back to linear.
More generally, key switching is a mechanism for proxy re-encryption: given two secret
keys 𝑠in and 𝑠out (which may or may not be different), one can construct a “hint” that lets
an untrusted party convert an encryption under 𝑠in to one under 𝑠out, while preserving the
secrecy of the message and the keys.
Key switching uses a gadget ⃗𝑔 ∈ (𝑅′
𝑞 →
(𝑅′)ℓ (both typically promoted from Z𝑞; see sections 3.2.4 and 3.5.2). Recall that 𝑔−1(𝑐)
outputs a short vector over 𝑅′ such that ⃗𝑔𝑡 · 𝑔−1(𝑐) = 𝑐 (mod 𝑞𝑅′).
𝑞)ℓ and associated decomposition function 𝑔−1 : 𝑅′
The core operations. Let 𝑠in, 𝑠out ∈ 𝑅′ denote some arbitrary secret values. A key-
switching hint for 𝑠in under 𝑠out is a matrix 𝐻 ∈ (𝑅′
𝑞)2×ℓ, where each column can be seen as
110
a linear polynomial over 𝑅′
𝑞, such that
(1, 𝑠out) · 𝐻 ≈ 𝑠in · ⃗𝑔𝑡
(mod 𝑞𝑅′).
(4.3.4)
Such an 𝐻 is constructed simply by letting the columns be Ring-LWE samples with se-
cret 𝑠out, and adding 𝑠in · ⃗𝑔𝑡 to the top row. In essence, such an 𝐻 is pseudorandom by the
Ring-LWE assumption, and hence hides the secrets.
The core key-switching step takes a hint 𝐻 and some 𝑐 ∈ 𝑅′
𝑞, and simply outputs
𝑐′ = 𝐻 · 𝑔−1(𝑐) ∈ (𝑅′
𝑞)2,
(4.3.5)
which can be viewed as a linear polynomial 𝑐′(𝑆). Notice that by Equation (4.3.4),
𝑐′(𝑠out) = (1, 𝑠out)·𝑐′ = ((1, 𝑠out)·𝐻)·𝑔−1(𝑐) ≈ 𝑠in·⃗𝑔𝑡·𝑔−1(𝑐) = 𝑠in·𝑐
(mod 𝑞𝑅′), (4.3.6)
where the approximation holds because 𝑔−1(𝑐) is short. More precisely, because the error
terms in Equation (4.3.4) satisfy Invariant 4.2.2, we want all the elements of the decompo-
sition 𝑔−1(𝑐) to have small entries in the canonical embedding, so it is best to decompose
relative to the powerful basis.
Following Equation (4.3.5), our Haskell code for the core key-switching step is simply
as follows (here knapsack computes the inner product of a list of polynomials over 𝑅′
a list of 𝑅′
𝑞-elements):
𝑞 and
switch :: (Decompose gad zq z, r’q ~ Cyc m’ zq, ...)
=> Tagged gad [Polynomial r’q] -> r’q -> Polynomial r’q
switch hint c =
untag $ knapsack  hint  (fmap reduce  decompose c)
111
Switching ciphertexts. The above tools can be used to switch MSD-form ciphertexts of
degree up to 𝑑 under 𝑠in as follows: ﬁrst publish a hint 𝐻𝑖 for each power 𝑠𝑖
in, 𝑖 = 1, . . . , 𝑑,
all under the same 𝑠out. Then to switch a ciphertext 𝑐(𝑆):
• For each 𝑖 = 1, . . . , 𝑑, apply the core step to coefﬁcient 𝑐𝑖 ∈ 𝑅′
ing hint 𝐻𝑖, to get a linear polynomial 𝑐′
𝑖 = 𝐻𝑖 · 𝑔−1(𝑐𝑖). Also let 𝑐′
𝑞 using the correspond-
0 = 𝑐0.
• Sum the 𝑐′
𝑖 to get a linear polynomial 𝑐′(𝑆), which is the output.
Then 𝑐′(𝑠out) ≈ 𝑐(𝑠in) (mod 𝑞𝑅′) by Equation (4.3.6) above, so the two ciphertexts encrypt
the same message.
Notice that the error rate in 𝑐′(𝑆) is essentially the sum of two separate quantities: the
error rate in the original 𝑐(𝑆), and the error rate in 𝐻 times a factor corresponding to the
norm of the output of 𝑔−1. We typically set the latter error rate to be much smaller than
the former, so that key-switching incurs essentially no error growth. This can be done
by constructing 𝐻 over a modulus 𝑞′ ≫ 𝑞, and scaling up 𝑐(𝑆) to this modulus before
decomposing.
Haskell functions. Our implementation includes a variety of key-switching functions,
whose types all roughly follow this general form:
keySwitchFoo :: (MonadRandom rnd, ...) => SK r’ -> SK r’
-> Tagged (gad, zq’) (rnd (CT m zp r’q -> CT m zp r’q))
Unpacking this, the inputs are the two secret keys 𝑠out, 𝑠in ∈ 𝑅′, and the output is essentially
a re-encryption function that maps one ciphertext to another. The extra Tagged (gad,zq’)
context indicates what gadget and modulus are used to construct the hint, while the rnd
wrapper indicates that randomness is used in constructing (but not applying) the function;
this is because constructing the hint requires randomness.
Outputting a re-encryption function—rather than just a hint itself, which would need to
be fed into a separate function that actually does the switching—has advantages in terms
112
of simplicity and safety. First, it reﬂects the abstract re-encryption functionality provided
by key switching. Second, we implement a variety of key-switching functions that each
operate slightly differently, and may even involve different types of hints (e.g., see the
next subsection). With our approach, the hint is abstracted away entirely, and each style of
key-switching can be implemented by a single client-visible function, instead of requiring
two separate functions and a specialized data type.
A prototypical implementation of a key-switching function is as follows (here ksHint is
a function that constructs a key-switching hint for 𝑠in under 𝑠out, as described above):
-- switch a linear ciphertext from one key to another
keySwitchLinear sout sin = tag $ do -- rnd monad
hint :: Tagged gad [Polynomial (Cyc m’ zq’)] 
CT MSD k l $ Poly [c0] + switch hint c1
4.3.6 Ring Tunneling
We provide a simple implementation of ring tunneling in Λ∘𝜆, which to our knowledge is
the ﬁrst realization of ring-switching of any kind.
Linear functions. Since ring-tunneling induces a linear function on the plaintext, we
introduce a useful abstract data type to represent linear functions on cyclotomic rings:
newtype Linear z e r s = D [Cyc s z]
The parameters z represents the base type, while the parameters e, r, s represent the indices
of the cyclotomic rings 𝐸, 𝑅, 𝑆. For example, Cyc s z represents the ring 𝑆. An 𝐸-linear
function 𝐿 is internally represented by its list ⃗𝑦 = 𝐿(⃗𝑑𝑟,𝑒) of values on the relative decoding
basis ⃗𝑑𝑟,𝑒 of 𝑅/𝐸, hence the constructor named D. (We could also represent linear functions
via the relative powerful basis, but so far we have not needed to do so.) Using our interface
for cyclotomic rings (section 3.5), evaluating a linear function is straightforward:
113
evalLin :: (e ‘Divides‘ r, e ‘Divides‘ s, ...)
=> Linear z e r s -> Cyc r z -> Cyc s z
evalLin (D ys) r =
dotprod ys (fmap embed (coeffsCyc Dec r :: [Cyc e z]))
Lemma 4.2.1 leads to the following very simple Haskell function to extend a linear
function; notice that the constraints use the type-level arithmetic described in subsection 3.2.6
to enforce the hypotheses of Lemma 4.2.1.
extendLin :: (e ~ FGCD r e’, r’ ~ FLCM r e’, (FLCM s e’) ‘Divides‘ s’)
=> Linear z e r s -> Linear z e’ r’ s’
extendLin (Dec ys) = Dec (fmap embed ys)
Tunneling. Next we give our implementation of ring tunneling.
tunnel f sout sin (CT MSD 0 s c) = tag $ do -- rnd monad
hints :: [Tagged gad [Polynomial (Cyc t s’ zq)]] <-
tunnelHint f sout sin
let f’ = extendLin $ lift f :: Linear t z e’ r’ s’
f’q = reduce f’ :: Linear t zq’ e’ r’ s’
[c0,c1] = coeffs c