先放上一个图示 方便理解
然后放上目录结构
1
├─application 应用目录（可设置）
2
│ ├─common 公共模块目录（可更改）
3
│ ├─index 模块目录(可更改)
4
│ │ ├─config.php 模块配置文件
5
│ │ ├─common.php 模块函数文件
6
│ │ ├─controller 控制器目录
7
│ │ ├─model 模型目录
8
│ │ ├─view 视图目录
9
│ │ └─ ... 更多类库目录
10
│ ├─command.php 命令行工具配置文件
11
│ ├─common.php 应用公共（函数）文件
12
│ ├─config.php 应用（公共）配置文件
13
│ ├─database.php 数据库配置文件
14
│ ├─tags.php 应用行为扩展定义文件
15
│ └─route.php 路由配置文件
16
├─extend 扩展类库目录（可定义）
17
├─public WEB 部署目录（对外访问目录）
18
│ ├─static 静态资源存放目录(css,js,image)
19
│ ├─index.php 应用入口文件
20
│ ├─router.php 快速测试文件
21
│ └─.htaccess 用于 apache 的重写
22
├─runtime 应用的运行时目录（可写，可设置）
23
├─vendor 第三方类库目录（Composer）
24
├─thinkphp 框架系统目录
25
│ ├─lang 语言包目录
26
│ ├─library 框架核心类库目录
27
│ │ ├─think Think 类库包目录
28
│ │ └─traits 系统 Traits 目录
29
│ ├─tpl 系统模板目录
30
│ ├─.htaccess 用于 apache 的重写
31
│ ├─.travis.yml CI 定义文件
32
│ ├─base.php 基础定义文件
33
│ ├─composer.json composer 定义文件
34
│ ├─console.php 控制台入口文件
35
│ ├─convention.php 惯例配置文件
36
│ ├─helper.php 助手函数文件（可选）
37
│ ├─LICENSE.txt 授权说明文件
38
│ ├─phpunit.xml 单元测试配置文件
39
│ ├─README.md README 文件
40
│ └─start.php 框架引导文件
41
├─build.php 自动生成定义文件（参考）
42
├─composer.json composer 定义文件
43
├─LICENSE.txt 授权说明文件
44
├─README.md README 文件
45
├─think 命令行入口文件
入口文件为public目录下的index.php 程序或许有一个或者多个入口文件，入口文件 一般
首先会检测程序安装情况 定义一些环境变量，网站路径等，定义应用目录，最后一步为加
载框架引导文件
首先进入start.php
一进去就加载了base.php
base.php里面做的事情可就多了
1.载入Loader类 thinkPHP5.0真正实现了按需加载，所有类库采用自动加载机制，并且支
持类库映射和composer类库的自动加载。自动加载的实现由think\Loader类库完成，自动
加载规范符合PHP的PSR-4
关于Loader类有一个比较重要的方法，这里强调一下
2.注册环境变量
3.注册自动加载 以及错误异常处理机制
4.最后一点着重说一下，Config的初始化 base.php最后一句话，初始化了Config，调用了
config类的set方法，
其实是加载了convention.php文件 它返回了一个数组
到这里base.php文件执行完毕，我们回到start.php中 App::run()->send(); 执行应用，这
时候就可以跟进App类了，我们跟进run()方法 
run方法的默认参数是一个request对象 如果请求不为空 就处理这个请求 如果传入的参数
为空 则先进入Request instance 初始化出一个请求对象 
然后调用自身的initcCommon initCommon又调用了init 最后返回Config::get()又一次初
始化了config ,这里注意下，我们知道tp嘚每个模块，应用都有单独的配置文件，所以这里
实现的就是除了加载总的配置文件，还要把应用单独的配置文件初始化
接下来的流程我们看 源码嘚注释就可以了解大概了
接下来我们重点关注一个一个变量 $dispatch 它是关键的调度信息，用于路由到具体的模
块方法，router主要处理后的url就存储在这个变量中
这里先进行路由检测 如果没设置路由规则 就调用tp默认的访问方式 parseurl()返回解析出
来的dispatch
解析出url，将目前的dispatch值赋值到request对象中，request对象获取到当前请求的调
度信息
可以看到 requests类页游自己的dispatch变量 ？？？
然后看tp自己的注释就好，没什么可解释的了
然后，最终执行到核心了，注意下config和dispatch都传进来了
跟进去，整体是一个switch的逻辑，根据dispatch数组的type来选择进入哪段代码
先看放一张注释，解释的蛮清楚，着重说下 invokemethod，php的回调方法，还有var这
个变量，这里已经注册了处路由参数外所有post get进来的变量了 主要是request中的参数 
当然还有dispatch中参数
就算是先进入了module方法，也得再进入控制器方法处理
就算进入可控制器方法，最后还得调用具体的method
总结一下，exec就是执行了具体的分发了 最后返回data 
执行完exec后 app的run()方法会返回一个response对象
我们再回到start.php 调用response的send方法，将输出返回到客户端
流程执行完毕
                                                                                               --------------------Skay