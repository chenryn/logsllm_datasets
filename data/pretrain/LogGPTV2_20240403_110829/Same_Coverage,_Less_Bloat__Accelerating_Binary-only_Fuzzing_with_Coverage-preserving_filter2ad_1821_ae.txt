### Performance and Coverage Analysis of HeXcite

#### Mean Performance Relative to HeXcite
We computed the mean performance of each tracer relative to HeXcite across all benchmarks, as illustrated in the rightmost plot. For each benchmark, incompatible tracers (denoted by a colored ✗) were excluded. All comparisons with HeXcite showed statistically significant differences (Mann-Whitney U test, \( p < 0.05 \)).

#### Loop Coverage Analysis
**Table 8** reports the mean loop coverage of HeXcite for each binary, compared to UnTracer and AFL-Clang. **Figure 8** provides a heatmap of HeXcite’s per-loop coverage relative to UnTracer’s for several benchmarks.

**Versus UnTracer:**
- **Coverage Improvement:** As shown in Table 8, HeXcite's bucketed unrolling achieves 130% higher loop penetration coverage compared to UnTracer.
- **Loop Penetration:** While UnTracer outperforms HeXcite on a small number of loops per benchmark (as seen in Figure 8), this is expected due to its inability to track loop progress, which limits fuzzing to repeatedly exploring the same few loops.
- **Test Case Diversity:** HeXcite queues over twice as many test cases, indicating that its loop-progress-aware coverage leads to a more diverse exploration of loops within each binary.

**Versus Source-Level Always-On Tracing:**
- **Coverage Comparison:** On average, HeXcite attains 36% higher loop coverage than source-level always-on tracing with AFL-Clang.
- **Instrumentation Efficiency:** Despite the modest improvement, these results demonstrate that bucketed unrolling, which only instruments loop headers, outperforms conventional coverage tracing that tracks hit counts on every basic block.
- **Future Work:** We hypothesize that further optimization of bucketed unrolling (e.g., halving the number of buckets, selective insertion) could enhance performance, but we leave this exploration for future research.

### Q1: Jump Mistargeting and Bucketed Unrolling
Jump mistargeting and bucketed unrolling enable Coverage-preserving CGT to achieve the highest overall coverage compared to block-only CGT, as well as conventional binary and source-level tracing.

### Q2: Performance Evaluation
To assess the impact of finer-grained coverage on CGT performance, we conducted a piece-wise evaluation of the fuzzing test case throughput (mean total test cases processed in 24 hours) for HeXcite’s edge (via jump mistargeting) and full (jump mistargeting + bucketed unrolling) coverage, compared to UnTracer’s block-only coverage, as shown in **Table 9**. Additionally, we evaluated HeXcite’s best-case throughput alongside leading binary- and source-level coverage tracers (QEMU, Dyninst, RetroWrite, and AFL-Clang), as depicted in **Figure 9**.

**Versus UnTracer:**
- **Throughput Impact:** Incorporating edge coverage in CGT results in a mean throughput slowdown of 3%, while supporting full coverage (edges and counts) causes a slightly higher slowdown of 8%.
- **Performance Balance:** The experiments in § 5.2.1 and § 5.2.2 show that coverage-preserving CGT achieves the highest edge and loop coverage, offsetting the performance deficits associated with finer-grained coverage.
- **Best-Case Performance:** HeXcite’s best-case performance is nearly indistinguishable from UnTracer’s, with statistically improved or identical performance on all but two benchmarks.

**Versus Binary-Only Always-On Tracing:**
- **Throughput Comparison:** As shown in Figure 9, HeXcite averages 11.4×, 24.1×, and 3.6× the throughput of always-on binary-only tracers QEMU, Dyninst, and RetroWrite, respectively.
- **Statistical Significance:** All 23 comparisons to HeXcite yield statistically significant improvements in speed over these competing binary-only tracers.

**Versus Source-Level Always-On Tracing:**
- **Throughput Comparison:** HeXcite averages 2.8× the throughput of AFL’s main source-level coverage tracer, AFL-Clang.
- **Benchmark Results:** In only one case (nasm), HeXcite has a lower throughput of around 19%. However, in the remaining seven open-source benchmarks, HeXcite achieves statistically higher throughput.

**Conclusion:**
Coverage-preserving CGT trades off a negligible amount of speed to attain the highest binary-only code and loop coverage, outperforming conventional always-on binary- and source-level tracing with 2–24× higher test case throughput.

### Unique Bug Discovery Over Time
**Figure 10** shows HeXcite’s mean unique bugs over time relative to all supported tracing approaches for each benchmark. This figure highlights the consistent and superior bug discovery capabilities of HeXcite across various binaries.

### Summary
HeXcite demonstrates superior performance and coverage compared to both UnTracer and traditional always-on tracing methods. Its innovative techniques, such as jump mistargeting and bucketed unrolling, enable it to achieve high coverage with minimal performance trade-offs, making it a highly effective tool for fuzzing and bug finding.