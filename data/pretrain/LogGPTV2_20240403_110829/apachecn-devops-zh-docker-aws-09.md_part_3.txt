RUN chmod +x /usr/bin/entrypoint
ENTRYPOINT ["/usr/bin/entrypoint"]
# Set working directory and application user
WORKDIR /app
USER app
```
Add an Entrypoint Script to a Dockerfile
在前面的示例中，请注意，通过添加高亮显示的`pip3 --no-cache install awscli`命令，您修改了第一个`RUN`指令，以确保安装了 AWS 命令行界面。
最后，将入口点脚本复制到`/usr/bin/entrypoint`，确保脚本设置了可执行标志，并将脚本指定为映像的入口点。请注意，您必须以 exec 风格格式配置`ENTRYPOINT`指令，以确保您在容器中运行的命令作为参数传递给入口点脚本(参见[https://docs.docker.com/engine/reference/builder/#cmd](https://docs.docker.com/engine/reference/builder/#cmd)的第一条注释)。
随着 Docker 文件的更新，您需要提交更改、重建和发布 Docker 映像更改，如下例所示:
```
> git add -A
> git commit -a -m "Add entrypoint script"
[master 5fdbe62] Add entrypoint script
 4 files changed, 31 insertions(+), 7 deletions(-)
 create mode 100644 entrypoint.sh
> export AWS_PROFILE=docker-in-aws
> make login
$(aws ecr get-login --no-include-email)
Login Succeeded
> make test && make release docker-compose build --pull release
Building release
Step 1/28 : FROM alpine AS test
latest: Pulling from library/alpine...
...
docker-compose run app bats acceptance.bats
Starting todobackend_db_1 ... done
Processing secrets []...
1..4
ok 1 todobackend root
ok 2 todo items returns empty list
ok 3 create todo item
ok 4 delete todo item
App running at http://localhost:32784
> make publish docker-compose push release
Pushing release (385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend:latest)...
The push refers to repository [385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend]
fdc98d6948f6: Pushed
9f33f154b3fa: Pushed
d8aedb2407c9: Pushed
f778da37eed6: Pushed
05e5971d2995: Pushed
4932bb9f39a5: Pushed
fa63544c9f7e: Pushed
fd3b38ee8bd6: Pushed
cd7100a72410: Layer already exists
latest: digest: sha256:5d456c61dd23728ec79c281fe5a3c700370382812e75931b45f0f5dd1a8fc150 size: 2201
Pushing app (385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend:5fdbe62)...
The push refers to repository [385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend]
fdc98d6948f6: Layer already exists
9f33f154b3fa: Layer already exists
d8aedb2407c9: Layer already exists
f778da37eed6: Layer already exists
05e5971d2995: Layer already exists
4932bb9f39a5: Layer already exists
fa63544c9f7e: Layer already exists
fd3b38ee8bd6: Layer already exists
cd7100a72410: Layer already exists
34d86eb: digest: sha256:5d456c61dd23728ec79c281fe5a3c700370382812e75931b45f0f5dd1a8fc150 size: 2201
```
Publishing the Updated Docker Image
在前面的示例中，当 Docker 映像发布时，请注意应用服务的 Docker 标记(在我的示例中这是`5fdbe62`，实际的散列将因您而异)，您可以从第 1 章中回忆起，它指定了源代码存储库的 Git 提交散列。在本章的后面，您将需要这个标签，以确保您可以将您的更改部署到在 AWS 中运行的 todobackend 应用。
# 使用云信息提供机密
您已经在 AWS 机密管理器中创建了一个机密，并添加了使用入口点脚本将机密安全地注入容器的支持。回想一下，入口点脚本寻找一个名为`SECRETS`的环境变量，并且用于 todobackend 栈的云信息模板中的`ApplicationTaskDefinition`和`MigrateTaskDefinition`资源当前正在直接注入应用数据库。为了支持在您的栈中使用机密，您需要配置您的 ECS 任务定义以包括`SECRETS`环境变量，用您的机密的名称进行配置，并且您还需要确保您的容器具有适当的 IAM 权限来检索和解密您的机密。
另一个需要考虑的问题是`ApplicationDatabase`资源的密码是如何配置的——当前配置为使用通过栈参数输入的密码；然而，您的数据库现在需要能够以某种方式从您新创建的机密中获得它的密码。
# 配置 ECS 任务定义以使用机密
让我们首先处理重新配置 ECS 任务定义，以使用您新创建的机密。您的容器现在包含一个入口点脚本，该脚本将从 AWS 机密管理器中检索机密，在更新各种 ECS 任务定义以将机密的名称作为环境变量导入之前，您需要确保您的容器具有正确的权限来执行此操作。虽然您可以将此类权限添加到 ECS 容器实例角色(应用于 EC2 实例级别)，但更安全的方法是创建您可以分配给容器的特定 IAM 角色，因为您可能与多个应用共享您的 ECS 集群，并且不希望从集群上运行的任何容器授予对机密的访问权限。
ECS 包括一个名为任务 iam 角色的功能([https://docs . AWS . Amazon . com/Amazon ECS/latest/developer guide/task-IAM-roles . html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html)，它允许您在 ECS 任务定义级别授予 IAM 权限，在我们希望只将 todo back and 机密的访问权限授予 todo back and 应用的场景中非常有用。下面的示例演示了如何创建一个 IAM 角色来授予这些权限:
```
...
...
Resources:
  ...
  ...
  ApplicationTaskRole:
 Type: AWS::IAM::Role
 Properties:
 AssumeRolePolicyDocument:
 Version: "2012-10-17"
 Statement:
 - Effect: Allow
 Principal:
 Service: ecs-tasks.amazonaws.com
 Action:
 - sts:AssumeRole
 Policies:
 - PolicyName: SecretsManagerPermissions
 PolicyDocument:
 Version: "2012-10-17"
 Statement:
 - Sid: GetSecrets
 Effect: Allow
 Action:
 - secretsmanager:GetSecretValue
 Resource: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:todobackend/*
 - Sid: DecryptSecrets
 Effect: Allow
 Action:
 - kms:Decrypt
 Resource: !ImportValue secrets-key
  ApplicationTaskDefinition:
    Type: AWS::ECS::TaskDefinition
...
...
```
Creating an IAM Task Role
在前面的示例中，您创建了一个名为`ApplicationTaskRole`的新资源，该资源包含一个`AssumeRolePolicyDocument`属性，该属性定义了可以承担该角色的受信任实体。请注意，这里的主体是`ecs-tasks.amazonaws.com`服务，这是容器在尝试使用 IAM 角色授予的权限访问 AWS 资源时所采用的服务上下文。该角色包括一个授予权限`secretsmanager:GetSecretValue`的策略，正如您所料，该权限允许您检索机密值，并且该权限仅限于以前缀`todobackend/`命名的所有机密的 ARN。如果您在通过 AWS 命令行界面创建测试密码时参考前面的示例，您可以看到密码的 ARN 在 ARN 末尾包含一个随机值，因此您需要在您的 ARN 中使用通配符来确保您拥有权限，而不管这个随机后缀是什么。请注意，该角色还包括对`secrets-key` KMS 键的`Decrypt`权限，您可以使用`!ImportValue`或`Fn::ImportValue`固有功能导入您在第一个示例中导出的 KMS 键的 ARN。
当`ApplicationTaskRole`资源就位后，以下示例演示如何重新配置位于 todo back and-AWS 存储库中的`stack.yml`文件中的`ApplicationTaskDefinition`和`MigrateTaskDefinition`资源:
```
Parameters:
  ...
  ...
  ApplicationSubnets:
    Type: List
    Description: Target subnets for EC2 instances
 # The DatabasePassword parameter has been removed
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Target VPC
 ...
  ... 
Resources:
  ...
  ...
  MigrateTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: todobackend-migrate
 TaskRoleArn: !Sub ${ApplicationTaskRole.Arn}
      ContainerDefinitions:
        - Name: migrate
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/docker-in-aws/todobackend:${ApplicationImageTag}
          MemoryReservation: 5
          Cpu: 5
          Environment:
            - Name: DJANGO_SETTINGS_MODULE
              Value: todobackend.settings_release
            - Name: MYSQL_HOST
              Value: !Sub ${ApplicationDatabase.Endpoint.Address}
            - Name: MYSQL_USER
              Value: todobackend
            - Name: MYSQL_DATABASE
              Value: todobackend
            # The MYSQL_PASSWORD variable has been removed
 - Name: SECRETS
 Value: todobackend/credentials
            - Name: AWS_DEFAULT_REGION
              Value: !Ref AWS::Region  ...
  ...
  ApplicationTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: todobackend
 TaskRoleArn: !Sub ${ApplicationTaskRole.Arn}
      Volumes:
        - Name: public
      ContainerDefinitions:
        - Name: todobackend
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/docker-in-aws/todobackend:${ApplicationImageTag}
          MemoryReservation: 395
          Cpu: 245
          MountPoints:
            - SourceVolume: public
              ContainerPath: /public
          Environment:- Name: DJANGO_SETTINGS_MODULE
              Value: todobackend.settings_release
            - Name: MYSQL_HOST
              Value: !Sub ${ApplicationDatabase.Endpoint.Address}
            - Name: MYSQL_USER
              Value: todobackend
            - Name: MYSQL_DATABASE
              Value: todobackend
 # The MYSQL_PASSWORD and SECRET_KEY variables have been removed            - Name: SECRETS
 Value: todobackend/credentials
            - Name: AWS_DEFAULT_REGION
              Value: !Ref AWS::Region
...
...
```
Configuring ECS Task Definitions to use Secrets
在前面的示例中，您通过`TaskRoleArn`属性将每个任务定义配置为使用 IAM 任务角色，该属性引用您在前面的示例中创建的`ApplicationTaskRole`资源。接下来，添加 Docker 映像中新入口点脚本所期望的`SECRETS`环境变量，并移除之前的`MYSQL_PASSWORD`和`SECRET_KEY`变量，这些变量现在是从 AWS 机密管理器服务中检索的。请注意，您需要包含一个名为`AWS_DEFAULT_REGION`的环境变量，因为这是 AWS 命令行界面确定您所在区域所必需的。
因为您不再将数据库密码作为参数注入栈，所以您还需要更新 todobackend-aws 存储库中的`dev.cfg`文件，并指定您在前面的示例中发布回来的更新的 Docker 映像标记:
```
ApplicationDesiredCount=1
ApplicationImageId=ami-ec957491
ApplicationImageTag=5fdbe62
ApplicationSubnets=subnet-a5d3ecee,subnet-324e246f
VpcId=vpc-f8233a80
```
Updating input parameters