ecx, 32 
          rep movsd 
          pop  
edi 
          pop  
esi 
          ret  
0 
_memcpy_128 ENDP 
在复制 123 个字节的程序里，编译器首先通过MOVSD指令复制 30 个 32
①
① 应该为 4 个字节。 
字节（也就是 120 字节），然
后依次通过MOVSW指令和MOVSB指令复制 2 个字节和 1 个字节。 
指令清单 43.20  采用 MSVC 2010 优化指令 
_inbuf$ = 8  
; size = 4 
_outbuf$ = 12  
; size = 4 
_memcpy_123 PROC 
          push  
esi 
          mov  
esi, DWORD PTR _inbuf$[esp] 
          push  
edi 
          mov  
edi, DWORD PTR _outbuf$[esp+4] 
          add  
edi, 10 
          mov  
ecx, 30 
          rep movsd 
          movsw 
          movsb 
          pop  
edi 
          pop  
esi 
          ret  
0 
_memcpy_123 ENDP 
GCC 则分配了一个大型的通用的函数。这个函数适用于任意大小的内存块复制操作。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 43 章  内 联 函 数 
473 
指令清单 43.21  采用 GCC 4.8.1 优化 
memcpy_123: 
.LFB3: 
         push  
edi 
         mov  
eax, 123 
         push  
esi 
         mov  
edx, DWORD PTR [esp+16] 
         mov  
esi, DWORD PTR [esp+12] 
         lea  
edi, [edx+10] 
         test  
edi, 1 
         jne  
.L24 
         test  
edi, 2 
         jne  
.L25 
.L7: 
         mov  
ecx, eax 
         xor  
edx, edx 
         shr  
ecx, 2 
         test  
al, 2 
         rep movsd 
         je   
.L8 
         movzx  
edx, WORD PTR [esi] 
         mov  
WORD PTR [edi], dx 
         mov  
edx, 2 
.L8: 
         test  
al, 1 
         je   
.L5 
         movzx  
eax, BYTE PTR [esi+edx] 
         mov  
BYTE PTR [edi+edx], al 
.L5: 
         pop  
esi 
         pop  
edi 
         ret 
.L24: 
         movzx  
eax, BYTE PTR [esi] 
         lea  
edi, [edx+11] 
         add  
esi, 1 
         test  
edi, 2 
         mov  
BYTE PTR [edx+10], al 
         mov  
eax, 122 
         je   
.L7 
.L25: 
         movzx  
edx, WORD PTR [esi] 
         add  
edi, 2 
         add  
esi, 2 
         sub  
eax, 2 
         mov  
WORD PTR [edi-2], dx 
         jmp  
.L7 
.LFE3: 
通用内存复制函数通常的工作原理如下：首先计算块有多少个字（32 位），然后用 MOVSD 指令复制
这些内存块，然后逐一复制剩余的字节。 
更为复杂的内存复制函数则会利用 SIMD 指令集进行复制，这种复制还会涉及内存地址对齐的问题。有
兴趣的读者可以参阅本书第 25 章的第 2 节。 
43.1.6  内存对比函数 memcmp() 
指令清单 43.22  memcmp()函数的例子 
void memcpy_1235(char *inbuf, char *outbuf) 
{ 
          memcpy(outbuf+10, inbuf, 1235); 
}; 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
474 
逆向工程权威指南（上册） 
无论内存块的尺寸是多大，MSVC 2010 都会插入相同的通用比较函数。 
指令清单 43.23  MSVC 2010 优化程序 
_buf1$ = 8   
; size = 4 
_buf2$ = 12  
; size = 4 
_memcmp_1235 PROC 
          mov  
edx, DWORD PTR _buf2$[esp-4] 
          mov  
ecx, DWORD PTR _buf1$[esp-4] 
          push  
esi 
          push  
edi 
          mov  
esi, 1235 
          add  
edx, 10 
$LL4@memcmp_123: 
          mov  
eax, DWORD PTR [edx] 
          cmp  
eax, DWORD PTR [ecx] 
          jne  
SHORT $LN10@memcmp_123 
          sub  
esi, 4 
          add  
ecx, 4 
          add  
edx, 4 
          cmp  
esi, 4 
          jae  
SHORT $LL4@memcmp_123 
$LN10@memcmp_123: 
          movzx  edi, BYTE PTR [ecx] 
          movzx  eax, BYTE PTR [edx] 
          sub  
eax, edi 
          jne  
SHORT $LN7@memcmp_123 
          movzx  eax, BYTE PTR [edx+1] 
          movzx  edi, BYTE PTR [ecx+1] 
          sub  
eax, edi 
          jne  
SHORT $LN7@memcmp_123 
          movzx  eax, BYTE PTR [edx+2] 
          movzx  edi, BYTE PTR [ecx+2] 
          sub  
eax, edi 
          jne  
SHORT $LN7@memcmp_123 
          cmp  
esi, 3 
          jbe  
SHORT $LN6@memcmp_123 
          movzx  eax, BYTE PTR [edx+3] 
          movzx  ecx, BYTE PTR [ecx+3] 
          sub  
eax, ecx 
$LN7@memcmp_123: 
          sar  
eax, 31 
          pop  
edi 
          or  
eax, 1 
          pop  
esi 
          ret  
0 
$LN6@memcmp_123: 
          pop  
edi 
          xor  
eax, eax 
          pop  
esi 
          ret  
0 
_memcmp_1235 ENDP 
43.1.7  IDA 脚本 
笔者编写了一个检索、收缩（folding）常见内联函数的 IDA 脚本。有兴趣的读者请访问： 
https://github.com/yurichev/IDA_scripts 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 4444 章
章    CC9999 标
标准
准的
的受
受限
限指
指针
针  
在某些情况下，用 FORTRAN 系统编译出来的程序会比用 C/C++系统编译出来的程序运行得更快。例
如，下面这个例子就是如此： 
void f1 (int* x, int* y, int* sum, int* product, int* sum_product, int* update_me, size_t s) 
{ 
          for (int i=0; i<s; i++) 
          { 
                    sum[i]=x[i]+y[i]; 
                    product[i]=x[i]*y[i]; 
                    update_me[i]=i*123; // some dummy value 
                    sum_product[i]=sum[i]+product[i]; 
          }; 
}; 
这个程序的功能十分简单，但是里面的指针问题却发人深思：同一块内存可以由多个指针来访问，因
此同一个地址的数据可能会被多个指针轮番复写。至少现行标准并不禁止这种情况。 
C 语言编译器完全允许上述情况。因此，它分四个阶段处理每次迭代的各类数组： 
 制备 sum[i]; 
 制备 product[i]; 
 制备 update_me[i]; 
 制备 sum_product[i]。在这个阶段，计算机将从内存里重新加载 sum[i]和 product[i]。 
第四个阶段是否存在进一步优化的空间呢？既然前面已经计算好了 sum[i]和 product[i]，那么后面我们
应该就不必再从内存中读取它们的值了。 
答案是肯定的。 
只是编译器本身并不能在第三个阶段确定前两个阶段的赋值没有被其他指令覆盖。换而言之，因为编
译器不能判断该程序里是否存在指向相同内存区域的指针——即“指针别名（pointer aliasing）”，所以 编译
器不能确保该指针指向的内存没被改写。 
C99 标准中的受限指针［ISO07，6.7.3 节］（部分文献又称“严格别名”）的应运而生。编程人员可通
过受限指针的 strict 修饰符向编译器承诺：被该关键字标记的指针是操作相关内存区域的唯一指针，没有其
他指针重复指向这个指针所操作的内存区域。 
用更为确切、更为正式的语言来说，关键字“restrict”表示该指针是访问既定对象的唯一指针，其他
指针都不会重复操作既定对象。从另一个角度来看，一旦某个指针被标记为受限指针，那么编译器就认定
既定对象只会被指定的受限指针操作。 
下面我们将为每个指针都增加上 restrict 修饰符： 
void f2 (int* restrict x, int* restrict y, int* restrict sum, int* restrict product, int*  
     restrict sum_product, 
          int* restrict update_me, size_t s) 
{ 
          for (int i=0; i<s; i++) 
          { 
                    sum[i]=x[i]+y[i]; 
                    product[i]=x[i]*y[i]; 
                    update_me[i]=i*123; // some dummy value 
                    sum_product[i]=sum[i]+product[i]; 
          }; 
}; 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
476 
逆向工程权威指南（上册） 
我们看到的结果如下所示。 
指令清单 44.1  x64 下的 GCC 函数 f1() 
f1: 
          push  
r15 r14 r13 r12 rbp rdi rsi rbx 
          mov  
r13, QWORD PTR 120[rsp] 
          mov  
rbp, QWORD PTR 104[rsp] 
          mov  
r12, QWORD PTR 112[rsp] 
          test  
r13, r13 
          je  
.L1 
          add  
r13, 1 
          xor  
ebx, ebx 
          mov  
edi, 1 
          xor  
r11d, r11d 
          jmp  
.L4 
.L6: 
          mov  
r11, rdi 
          mov  
rdi, rax 