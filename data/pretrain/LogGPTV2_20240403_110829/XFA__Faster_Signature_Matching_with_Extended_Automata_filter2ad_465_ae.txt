13
14
15
16
17
18
19
20
21
22
23
24
25
(cid:2)
0
)};
, Eδ);
MapXFAtoEIDD((Q, D,Σ,δ,Uδ,(q0, d0), F), QD, EIDD):
, E,UE ,C,AC) ← EIDD;
(cid:2), d
(cid:2)
(D
Eδ ← /0;
0
← {((q0,d0),d
(cid:2)
D
QD
,Eδ) ←FindValidMapping (D
(cid:2)
(cid:2)
(D
QD
QD
(cid:2)
,Eδ) = (/0, /0) then return (/0, /0, /0) ;
if (D
QD
CQ ← /0;
foreach q ∈ Q do
ccorrect ← {c ∈ C|∀((q, d), d
(q, d) ∈ F}[0];
CQ ← CQ ∪{(q, ccorrect )};
, Eδ,CQ);
return (D
(cid:2)
, Eδ)
FindValidMapping(D
QD
while ∃(s,((qi,di), d
)) ∈ Σ× D
(cid:2)
(cid:2).((δ(qi, s),Uδ(qi, s)(di)), d
D
(cid:2)
f
D
QD
(cid:2)
D
QD
←
∪{((δ(qi,s),Uδ(qi,s)(di)),UE (Eδ(qi,s))(d
∈
∧Eδ(qi, s) ∈ E do
(cid:2) ∈ AC(c) ⇐⇒
(cid:2)
.(cid:1)d
QD
) ∈ D
(cid:2)
QD
(cid:2)) ∈ D
))};
(cid:2)
QD
(cid:2)
QD
.d
(cid:2)
f
(cid:2)
i
, Eδ) ;
, Eδ) then return (/0, /0);
(cid:2)
QD
(cid:2)
if FindInconsistency (D
QD
if |Eδ| = |Q|·|Σ| then return (D
trans ← {(qi,s)|(qi, s) ∈ Q× Σ∧ (cid:1)e ∈ E.((qi,s), e) ∈ Eδ}[0];
foreach e ∈ E do
, Eδ∪{(trans, e)});
Result ←FindValidMapping (D
(cid:2)
QD
if Result (cid:13)= (/0, /0) then return Result;
return (/0, /0) ;
,Eδ)
FindInconsistency(D
foreach (qi, s, di) ∈ Q×Σ× D do
if ∃d
) ∈
∈ D
∈ D
(cid:2)
(cid:2).((qi, di),d
(cid:2)
i
i
∧ ((δ(qi, s),Uδ(qi, s)(di)), d
(cid:2)
(cid:2)
D
if ∃e ∈ E.((qi,s), e) ∈ Eδ∧ (d
f
QD
(cid:2)
, d
i
return true ;
foreach q ∈ Q do
if ∀c ∈ C.∃((q, d), d
then return true ;
return false ;
) ∈ D
) /∈ UE (e) then
(cid:2)
f
(cid:2) ∈ AC(c) ⇐⇒ (q, d) ∈ F
(cid:2)
QD then
(cid:2)) ∈ D
.¬d
(cid:2)
QD
(cid:2)
QD
(cid:2), d
(cid:2)
f
:
26
Algorithm 4. Basic algorithm for ﬁnding a
mapping of an XFA to a given EIDD.
:
(cid:2)
i
time cost in general, and our experience suggests that
new XFAs can often be constructed and incorporated
within a matter of minutes.
Memory usage and performance.
In Section 5.3,
we compare the memory usage and performance of
our test-set XFA to DFAs and multiple DFA-based ap-
proaches. Despite inefﬁciencies in our prototype, our
results shows that the combined XFA was 20× faster
and 10× smaller than the next-best result.
5.1. Experimental methodology
We have implemented a fully-functional evaluation
prototype divided into two main applications: re2xfa
and trace apply.
re2xfa implements all of the XFA
construction algorithms described earlier and produces
XFAs for annotated regular expressions supplied as in-
put.
trace apply requires an XFA and a tcpdump-
formatted trace and applies the XFA to HTTP payloads
in the trace.
Instructions on edges and states are ex-
ecuted using an interpreter we implemented and built
into trace apply. Since our primary goal is to study
the feasibility of XFAs, standard NIDS operations such
as defragmentation and normalization are beyond the
scope of the experiments performed here.
We also compare against multiple-DFA (MDFA)
techniques using the combination heuristics proposed
by Yu, et al. [33]. MDFAs trade memory usage for
time by enforcing an upper limit on the available mem-
ory and producing as many groups of combined DFAs
as necessary to stay within that limit. To facilitate a
fair comparison, all automata use the same format and
evaluation environment (trace apply), except that only
XFAs have edge-based instructions. We model DFA ac-
cepting states with an instruction that unconditionally
accepts when the state is reached.
For our test set we used a Snort signature set ob-
tained in March 2007. We gathered traces of live trafﬁc
gathered at the edge of our department network and col-
lected at different times, with each trace containing be-
tween 17,000 and 86,000 HTTP packets. We measure
performance as the number of CPU cycles per payload,
scaled to seconds per gigabyte (s/GB). All experiments
were performed on a standard Pentium 4 Linux work-
station running at 3 GHz with 3 GB of memory.
5.2. Constructing XFAs
In this section we describe the steps used to con-
struct our test set. First, we used the Snort2Bro tool
(included in the Bro [18] software distribution) to do
an initial parsing and conversion of Snort’s HTTP sig-
natures into Bro format, which we then passed through
for combining the 213 signatures from our test set
that are the UNICODE equivalents of some of these
338 signatures. We then use the normal combination
procedure to combine these XFAs with those for the
rest of the signatures.
5. Feasibility study
We examined the feasibility of XFAs with a case
study that applied them to HTTP signatures used by the
Snort NIDS. We focus on two aspects of XFAs: feasibil-
ity of construction and memory usage and performance.
We brieﬂy summarize the results of this study:
Feasibility of construction. In Section 5.2 we describe
the process in which 1450 Snort HTTP signatures are
converted into efﬁcient XFAs. Construction of this test
set required one day of manual effort, but this is a one-
197
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:11:01 UTC from IEEE Xplore.  Restrictions apply. 
Examples (some simpliﬁed)
.*calendar(|[- ]admin)\.pl
.*cmd"#.*&
.*]*classid=11cf-9377
.*]\0)*c\0l\0s=\01\0c\0-\09\03\0
(.*[\\/]cgi60#.*auth)|(.*auth#.*[\\/]cgi60)
(.*/st\.cgi#.*\.\./)|(.*\.\./#.*/st\.cgi)
# Sigs
814
5
341
213
56
21
EIDD name
null
set-only bit
bit
bit plus parity
two set-only bits
2 bits plus overlap
Scratch mem.
nothing
1 bit
1 bit
2 bits
2 bits
3 bits
Table 2. Description of common kinds of signatures and their mappings to XFAs.
# Instrs
% Edges
% States
0
1.0
78.9
1
94.8
20.0
2
2.7
0.9
3
0.47
0.03
4
0.80
0.00
5
0.00
0.00
6
0.00
0.00
7
0.00
0.00
8
0.13
0.05
9
0.00
0.05
10
0.00
0.00
11
0.00
0.00
12
0
0.00
Table 3. Distribution of instructions on edges and states. Entries marked 0.00
contribute less than .01%.
scripts that created the individual regular expressions.
These scripts also inserted the parallel concatenation
operator into approximately 97% of the applicable sig-
natures. We indiscriminately gathered both client-side
and server-side signatures, yielding 1556 signatures in
total. We eliminated 106 signatures for reasons dis-
cussed below, giving us a signature set size of 1450.
In Step 2, we manually selected the appropriate in-
struction template (EIDD) and added the remaining par-
allel concatenation operators where necessary. In many
cases, this process required just a few seconds per signa-
ture and was aided by the fact that many signatures have
similar formats. Some signatures required the construc-
tion of a new EIDD when observed, which typically in-
duced a one-time cost of up to an hour.
In total, we
spent approximately one day on this phase, not includ-
ing EIDD creation time.
Next, we fed each
signature and its match-
ing EIDD to the re2xfa
application, which pro-
duced an XFA. XFA
construction time var-
ied by EIDD:
some
completed within sec-
onds whereas others re-
quire an hour or more,
as summarized by Table 4. In our test set, 85% of the
signatures completed within 10 seconds each.
< 1
1..10
10..100
100..1,000
1,000..10,000
Table 4. Distribution of
XFA construction times.
Run time
(seconds)
Number
of sig.
37.1%
48.1%
0.1%
1.2%
13.5%
Finally, Step 4 combines each of the XFAs pro-
duced in the previous step using the incremental combi-
nation algorithm outlined in Section 4.3. Combination
of all individual XFAs into a single equivalent XFA re-
quired just over 10 minutes. Table 3 characterizes the
number of instructions on edges and states in the com-
bined XFA. 95% of the transitions have exactly one in-
struction, and 98% of the states have at most one in-
198
struction. The ﬁnal XFA had 41,994 states (requiring
43 MB), used 193 bits (25 bytes) of scratch memory,
and required 3.5 MB of instruction memory.
In general, the most manual-labor-intensive aspect
of this process occurs when EIDDs are selected for
regular expressions. For existing signature sets this is
a one-time process, and our experience indicates that
when new signatures are produced, a security expert
(i.e., someone who writes the initial signatures) famil-
iar with our approach could easily annotate a regular
expression, produce an XFA, and add it to an existing
combined XFA within a matter of minutes, depending
on the XFA construction time in Step 3. Even if a novel
signature requires a new EIDD to be deﬁned,3 this is
also a one-time cost.
Signatures were removed from our test set for
two reasons. First, some complex signatures com-
pose bits and counters in ways that are prohibitively
time-consuming to map to EIDDs using our prototype.
Second, there are some signatures whose individual
DFAs consume exponential amounts of memory and for
which our construction algorithms also run out of mem-
ory, even though a compact XFA does exist. Signatures
of the form .*a.{n}b among others fall into this cat-
egory, for example. In both cases, the difﬁculties arise
from using signatures that are not necessarily designed
for deterministic automata. Thus, although many signa-
tures with counters are straightforward to compile and
map to EIDDs, for this experiment we eliminated all
counter-based signatures from our test set. We discuss
these difﬁculties and possible workarounds in more de-
tail in Section 6.
In summary, these results demonstrate that XFAs
can be readily constructed for large numbers of real-
3EIDDs are declarative and parsed by our prototype, so that they
can be supplied at runtime and do not require a recompile.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:11:01 UTC from IEEE Xplore.  Restrictions apply. 
Automata
Type
XFA