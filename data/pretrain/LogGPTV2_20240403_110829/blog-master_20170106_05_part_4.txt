        Connection con = null;  
        Statement st = null;  
        String url = "jdbc:postgresql://localhost/testdb";  
        String user = "user12";  
        String password = "34klq*";  
        try {  
            con = DriverManager.getConnection(url, user, password);  
            st = con.createStatement();  
            st.executeUpdate("UPDATE authors SET name = 'Leo Tolstoy' "  
                    + "WHERE Id = 1");  
            st.executeUpdate("UPDATE books SET title = 'War and Peace' "  
                    + "WHERE Id = 1");  
            st.executeUpdate("UPDATE books SET titl = 'Anna Karenina' "  
                    + "WHERE Id = 2");  
            con.close();  
        } catch (SQLException ex) {  
            Logger lgr = Logger.getLogger(NonTransaction.class.getName());  
            lgr.log(Level.SEVERE, ex.getMessage(), ex);  
        } finally {  
            try {  
                if (st != null) {  
                    st.close();  
                }  
                if (con != null) {  
                    con.close();  
                }  
            } catch (SQLException ex) {  
                Logger lgr = Logger.getLogger(NonTransaction.class.getName());  
                lgr.log(Level.WARNING, ex.getMessage(), ex);  
            }  
        }  
    }  
}  
```  
We have the same example. This time, without the transaction support.  
```  
$ javac zetcode/NonTransaction.java  
$ java -cp .:lib/postgresql.jdbc4.jar zetcode.NonTransaction   
Feb 03, 2012 1:59:04 PM zetcode.NonTransaction main  
SEVERE: ERROR: column "titl" of relation "books" does not exist  
  Position: 18  
...  
testdb=# SELECT name, title FROM authors, books WHERE authors.id=books.author_id;  
       name        |        title           
-------------------+----------------------  
 Leo Tolstoy       | Martin Eden  
 Honore de Balzac  | Old Goriot  
 Honore de Balzac  | Cousin Bette  
 Lion Feuchtwanger | Jew Suess  
 Emile Zola        | Nana  
 Emile Zola        | The Belly of Paris  
 Truman Capote     | In Cold blood  
 Truman Capote     | Breakfast at Tiffany  
 Leo Tolstoy       | War and Peace  
(9 rows)  
```  
An exception is thrown again. Leo Tolstoy did not write Martin Eden. The data is corrupted.  
### Batch updates  
When we need to update data with multiple statements, we can use batch updates. Batch updates are available for INSERT, UPDATE, and DELETE statements as well as for CREATE TABLE and DROP TABLE statements.  
```  
package zetcode;  
import java.sql.Connection;  
import java.sql.DriverManager;  
import java.sql.SQLException;  
import java.sql.Statement;  
import java.util.logging.Level;  
import java.util.logging.Logger;  
public class BatchUpdate {  
        public static void main(String[] args) {  
        Connection con = null;  
        Statement st = null;  
        String url = "jdbc:postgresql://localhost/testdb";  
        String user = "user12";  
        String password = "34klq*";  
        try {  
          con = DriverManager.getConnection(url, user, password);  
          st = con.createStatement();  
          con.setAutoCommit(false);  
          st.addBatch("DROP TABLE IF EXISTS friends");  
          st.addBatch("CREATE TABLE friends(id serial, name VARCHAR(10))");  
          st.addBatch("INSERT INTO friends(name) VALUES ('Jane')");  
          st.addBatch("INSERT INTO friends(name) VALUES ('Tom')");  
          st.addBatch("INSERT INTO friends(name) VALUES ('Rebecca')");  
          st.addBatch("INSERT INTO friends(name) VALUES ('Jim')");  
          st.addBatch("INSERT INTO friends(name) VALUES ('Robert')");                   
          int counts[] = st.executeBatch();  
          con.commit();  
          System.out.println("Committed " + counts.length + " updates");  
        } catch (SQLException ex) {  
            System.out.println(ex.getNextException());  
            if (con != null) {  
                try {  
                    con.rollback();  
                } catch (SQLException ex1) {  
                    Logger lgr = Logger.getLogger(BatchUpdate.class.getName());  
                    lgr.log(Level.WARNING, ex1.getMessage(), ex1);  
                }  
            }  
            Logger lgr = Logger.getLogger(BatchUpdate.class.getName());  
            lgr.log(Level.SEVERE, ex.getMessage(), ex);  
        } finally {  
            try {  
                if (st != null) {  
                    st.close();  
                }  
                if (con != null) {  
                    con.close();  
                }  
            } catch (SQLException ex) {  
                Logger lgr = Logger.getLogger(BatchUpdate.class.getName());  
                lgr.log(Level.WARNING, ex.getMessage(), ex);  
            }  
        }  
    }  
}  
```  
This is an example program for a batch update. We create a new table called friends and insert five rows into it.  
```  
con.setAutoCommit(false);  
```  
Autocommit should always be turned off when doing batch updates.  
```  
st.addBatch("DROP TABLE IF EXISTS friends");  
st.addBatch("CREATE TABLE friends(id serial, name VARCHAR(10))");  
st.addBatch("INSERT INTO friends(name) VALUES ('Jane')");  
st.addBatch("INSERT INTO friends(name) VALUES ('Tom')");  
...  
```  
We use teh addBatch() method to add a new command to the statement.  
```  
int counts[] = st.executeBatch();  
```  
After adding all commands, we call the executeBatch() to perform a batch update. The method returns an array of committed changes.  
```  
con.commit();  
```  
Batch updates are committed in a transaction.  
```  
$ javac zetcode/BatchUpdate.java  
$ java -cp .:lib/postgresql.jdbc4.jar zetcode.BatchUpdate   
Committed 7 updates  
testdb=# SELECT * FROM friends;  
 id |  name     
----+---------  
  1 | Jane  
  2 | Tom  
  3 | Rebecca  
  4 | Jim  
  5 | Robert  
(5 rows)  
```  
We execute the BatchUpdate program. We have created a new friends table and successfully inserted 5 rows.  
### Export and import of data  
PostgreSQL has a COPY statement which can be used to copy data between a table and a file. From the JDBC point of view, it is an extension to the standard.  
```  
package zetcode;  
import java.io.FileWriter;  
import java.io.IOException;  
import java.sql.PreparedStatement;  
import java.sql.Connection;  
import java.sql.DriverManager;  
import java.sql.ResultSet;  
import java.sql.SQLException;  
import java.util.logging.Level;  
import java.util.logging.Logger;  
import org.postgresql.copy.CopyManager;  
import org.postgresql.core.BaseConnection;  
public class CopyTo {  
    public static void main(String[] args) {  
        Connection con = null;  
        PreparedStatement pst = null;  
        ResultSet rs = null;  
        FileWriter fw = null;  
        String url = "jdbc:postgresql://localhost/testdb";  
        String user = "user12";  
        String password = "34klq*";  
        try {  
            con = DriverManager.getConnection(url, user, password);  
            CopyManager cm = new CopyManager((BaseConnection) con);  
            fw = new FileWriter("friends.txt");  
            cm.copyOut("COPY friends TO STDOUT WITH DELIMITER AS '|'", fw);  
        } catch (SQLException | IOException ex) {  
            Logger lgr = Logger.getLogger(CopyTo.class.getName());  
            lgr.log(Level.SEVERE, ex.getMessage(), ex);  
        } finally {  
            try {  
                if (rs != null) {  
                    rs.close();  
                }  
                if (pst != null) {  
                    pst.close();  
                }  
                if (con != null) {  
                    con.close();  
                }  
                if (fw != null) {  
                    fw.close();  
                }  
            } catch (SQLException | IOException ex) {  
                Logger lgr = Logger.getLogger(CopyTo.class.getName());  
                lgr.log(Level.WARNING, ex.getMessage(), ex);  
            }  
        }  
    }  
}  
```  
In the previous example a simple friends table was created. In the above code, we will copy the friends table to a file.  
```  
CopyManager cm = new CopyManager((BaseConnection) con);  
```  
Here we create an instance of the CopyManager. The CopyManager is the API for PostgreSQL COPY bulk data transfer.  
```  
fw = new FileWriter("friends.txt");  
```  
We will write the data to the friends.txt file.  
```  
cm.copyOut("COPY friends TO STDOUT WITH DELIMITER AS '|'", fw);  
```  
We pass the results of a COPY TO STDOUT query from database into a Writer using the copyOut() method. The columns will be delimited with the | character.  
```  
$ javac -cp .:lib/postgresql.jdbc4.jar zetcode/CopyTo.java  
$ java -cp .:lib/postgresql.jdbc4.jar zetcode.CopyTo  
$ cat friends.txt   
1|Jane  
2|Tom  
3|Rebecca  
4|Jim  
5|Robert  
```  
This is the file created.  
In the second example, we do the reverse operation. We copy the data from the file into the database table.  
```  
package zetcode;  
import java.io.FileReader;  
import java.io.IOException;  
import java.sql.PreparedStatement;  
import java.sql.Connection;  
import java.sql.DriverManager;  
import java.sql.ResultSet;  
import java.sql.SQLException;  
import java.util.logging.Level;  
import java.util.logging.Logger;  
import org.postgresql.copy.CopyManager;  
import org.postgresql.core.BaseConnection;  
public class CopyFrom {  
    public static void main(String[] args) {  
        Connection con = null;  
        PreparedStatement pst = null;  
        ResultSet rs = null;  
        FileReader fr = null;  
        String url = "jdbc:postgresql://localhost/testdb";  
        String user = "user12";  
        String password = "34klq*";  
        try {  
            con = DriverManager.getConnection(url, user, password);  
            CopyManager cm = new CopyManager((BaseConnection) con);  
            fr = new FileReader("friends.txt");  
            cm.copyIn("COPY friends FROM STDIN WITH DELIMITER '|'", fr);  
        } catch (SQLException | IOException ex) {  
            Logger lgr = Logger.getLogger(CopyFrom.class.getName());  
            lgr.log(Level.SEVERE, ex.getMessage(), ex);  
        } finally {  
            try {  
                if (rs != null) {  
                    rs.close();  
                }  
                if (pst != null) {  
                    pst.close();  
                }  
                if (con != null) {  
                    con.close();  
                }  
                if (fr != null) {  
                    fr.close();  
                }  
            } catch (SQLException | IOException ex) {  
                Logger lgr = Logger.getLogger(CopyFrom.class.getName());  
                lgr.log(Level.WARNING, ex.getMessage(), ex);  
            }  
        }  
    }  
}  
```  
The example uses the FileReader class to read the contents of the friends.txt table and the COPY statement to transfer the data to the friends class.  
```  
fr = new FileReader("friends.txt");  
```  
We will read from the friends.txt file.  
```  
cm.copyIn("COPY friends FROM STDIN WITH DELIMITER '|'", fr);  
```  
We copy the data from the file using the COPY statement.  
```  
testdb=# DELETE FROM friends;  
DELETE 5  
$ javac -cp .:lib/postgresql.jdbc4.jar zetcode/CopyFrom.java  
$ java -cp .:lib/postgresql.jdbc4.jar zetcode.CopyFrom  
testdb=# SELECT * FROM friends;  
 id |  name     
----+---------  
  1 | Jane  
  2 | Tom  
  3 | Rebecca  
  4 | Jim  
  5 | Robert  
(5 rows)  
```  
First we delete the rows from the friends table. Then we compile and run the CopyFrom application. Finally, we check the contents of the friends table.  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")