I 
A new thread that is injected or created in a context of a deep-frozen process will not
run even in case the CREATE_SUSPENDED flag is not used at creation time or in case the
NtResumeProcess API is called to start the thread.
I 
A new Freeze counter is implemented in the EPROCESS data structures. This means that a pro-
cess could be frozen multiple times. To allow a process to be thawed, the total number of thaw
requests must be equal to the number of freeze requests. Only in this case are all the nonsus-
pended threads allowed to run.
The State Repository
The Modern Application Model introduces a new way for storing packaged applications’ settings, 
package dependencies, and general application data. The State Repository is the new central store 
that contains all this kind of data and has an important central rule in the management of all modern 
applications: Every time an application is downloaded from the store, installed, activated, or removed, 
new data is read or written to the repository. The classical usage example of the State Repository is 
represented by the user clicking on a tile in the Start menu. The Start menu resolves the full path of 
the application’s activation file (which could be an EXE or a DLL, as already seen in Chapter 7 of Part 1), 
reading from the repository. (This is actually simplified, because the ShellExecutionHost process enu-
merates all the modern applications at initialization time.) 
The State Repository is implemented mainly in two libraries: Windows.StateRepository.dll and 
Windows.StateRepositoryCore.dll. Although the State Repository Service runs the server part of the 
repository, UWP applications talk with the repository using the Windows.StateRepositoryClient.dll 
library. (All the repository APIs are full trust, so WinRT clients need a Proxy to correctly communicate 
with the server. This is the rule of another DLL, named Windows.StateRepositoryPs.dll.) The root loca-
tion of the State Repository is stored in the HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\
Appx\ PackageRepositoryRoot registry value, which usually points to the C:\ProgramData\Microsoft\
Windows\ AppRepository path. 
The State Repository is implemented across multiple databases, called partitions. Tables in the data-
base are called entities. Partitions have different access and lifetime constraints:
I 
Machine This database includes package definitions, an application’s data and identities, and
primary and secondary tiles (used in the Start menu), and it is the master registry that defines
who can access which package. This data is read extensively by different components (like
the TileDataRepository library, which is used by Explorer and the Start menu to manage the
different tiles), but it’s written primarily by the AppX deployment (rarely by some other minor
components). The Machine partition is usually stored in a file called StateRepository-Machine.
srd located into the state repository root folder.
I 
eploent Stores machine-wide data mostly used only by the deployment service
(AppxSvc) when a new package is registered or removed from the system. It includes the
252 
CHAPTER 8 System mechanisms
applications file list and a copy of each modern application’s manifest file. The Deployment 
partition is usually stored in a file called StateRepository-Deployment.srd.
All partitions are stored as SQLite databases. Windows compiles its own version of SQLite into the 
StateRepository.Core.dll library. This library exposes the State Repository Data Access Layer (also known 
as DAL) APIs that are mainly wrappers to the internal database engine and are called by the State 
Repository service.
Sometimes various components need to know when some data in the State Repository is written 
or modified. In Windows 10 Anniversary update, the State Repository has been updated to support 
changes and events tracking. It can manage different scenarios:
I 
A component wants to subscribe for data changes for a certain entity. The component receives
a callback when the data is changed and implemented using a SQL transaction. Multiple SQL
transactions are part of a Deployment operation. At the end of each database transaction,
the State Repository determines if a Deployment operation is completed, and, if so, calls each
registered listener.
I 
A process is started or wakes from Suspend and needs to discover what data has changed since
it was last notified or looked at. State Repository could satisfy this request using the ChangeId
field, which, in the tables that supports this feature, represents a unique temporal identifier
of a record.
I 
A process retrieves data from the State Repository and needs to know if the data has changed
since it was last examined. Data changes are always recorded in compatible entities via a new
table called Changelog. The latter always records the time, the change ID of the event that cre-
ated the data, and, if applicable, the change ID of the event that deleted the data.
The modern Start menu uses the changes and events tracking feature of the State Repository to work 
properly. Every time the ShellExperienceHost process starts, it requests the State Repository to notify 
its controller (NotificationController.dll) every time a tile is modified, created, or removed. When the 
user installs or removes a modern application through the Store, the application deployment server 
executes a DB transaction for inserting or removing the tile. The State Repository, at the end of the 
transaction, signals an event that wakes up the controller. In this way, the Start menu can modify its ap-
pearance almost in real time.
Note In a similar way, the modern Start menu is automatically able to add or remove an 
entry for every new standard Win32 application installed. The application setup program 
usually creates one or more shortcuts in one of the classic Start menu folder locations 
(systemwide path: C:\ProgramData\Microsoft\ Windows\Start Menu, or per-user path: 
C:\Users\\AppData\Roaming\Microsoft\Windows\Start Menu). The modern 
Start menu uses the services provided by the AppResolver library to register file system 
notifications on all the Start menu folders (through the ReadDirectoryChangesW Win32 API). 
In this way, whenever a new shortcut is created in the monitored folders, the library can get 
a callback and signal the Start menu to redraw itself. 
CHAPTER 8 System mechanisms
253
EXPERIMENT: Witnessing the state repository
You can open each partition of the state repository fairly easily using your preferred SQLite 
browser application. For this experiment, you need to download and install an SQLite browser, 
like the open-source DB Browser for SQLite, which you can download from http://sqlitebrowser.
org/. The State Repository path is not accessible by standard users. Furthermore, each parti-
tion’s file could be in use in the exact moment that you will access it. Thus, you need to copy 
the database file in another folder before trying to open it with the SQLite browser. Open 
an administrative command prompt (by typing cmd in the Cortana search box and select-
ing Run As Administrator after right-clicking the Command Prompt label) and insert the 
following commands:
C:\WINDOWS\system32>cd “C:\ProgramData\Microsoft\Windows\AppRepository”  
C:\ProgramData\Microsoft\Windows\AppRepository>copy StateRepository-Machine.srd 
"%USERPROFILE%\Documents"
In this way, you have copied the State Repository machine partition into your Documents 
folder. The next stage is to open it. Start DB Browser for SQLite using the link created in the 
Start menu or the Cortana search box and click the Open Database button. Navigate to the 
Documents folder, select All Files (*) in the ile pe combo box (the state repository database 
doesn’t use a standard SQLite file extension), and open the copied StateRepository-machine.
EXPERIMENT: Witnessing the state repository
You can open each partition of the state repository fairly easily using your preferred SQLite 
browser application. For this experiment, you need to download and install an SQLite browser, 
like the open-source DB Browser for SQLite, which you can download from http://sqlitebrowser.
org/. The State Repository path is not accessible by standard users. Furthermore, each parti
org/. The State Repository path is not accessible by standard users. Furthermore, each parti
org/
-
tion’s file could be in use in the exact moment that you will access it. Thus, you need to copy 
the database file in another folder before trying to open it with the SQLite browser. Open 
an administrative command prompt (by typing cmd in the Cortana search box and select-
ing Run As Administrator after right-clicking the Command Prompt label) and insert the 
following commands:
C:\WINDOWS\system32>cd “C:\ProgramData\Microsoft\Windows\AppRepository” 
C:\ProgramData\Microsoft\Windows\AppRepository>copy StateRepository-Machine.srd 
"%USERPROFILE%\Documents"
In this way, you have copied the State Repository machine partition into your Documents 
folder. The next stage is to open it. Start DB Browser for SQLite using the link created in the 
Start menu or the Cortana search box and click the Open Database button. Navigate to the 
Documents folder, select All Files (*) in the ile pe combo box (the state repository database 
doesn’t use a standard SQLite file extension), and open the copied StateRepository-machine.
254 
CHAPTER 8 System mechanisms
srd file. The main view of DB Browser for SQLite is the database structure. For this experiment 
you need to choose the Browse Data sheet and navigate through the tables like Package, 
Application, PackageLocation, and PrimaryTile. 
The Application Activation Manager and many other components of the Modern Application 
Model use standard SQL queries to extract the needed data from the State Repository. For ex-
ample, to extract the package location and the executable name of a modern application, a SQL 
query like the following one could be used:
SELECT p.DisplayName, p.PackageFullName, pl.InstalledLocation, a.Executable, pm.Name 
FROM Package AS p 
INNER JOIN PackageLocation AS pl ON p._PackageID=pl.Package 
INNER JOIN PackageFamily AS pm ON p.PackageFamily=pm._PackageFamilyID 
INNER JOIN Application AS a ON a.Package=p._PackageID 
WHERE pm.PackageFamilyName=""
The DAL (Data Access Layer) uses similar queries to provide services to its clients.
You can annotate the total number of records in the table and then install a new application 
from the store. If, after the deployment process is completed, you again copy the database file, 
you will find that number of the records change. This happens in multiple tables. Especially if the 
new app installs a new tile, even the PrimaryTile table adds a record for the new tile shown in the 
Start menu.
srd file. The main view of DB Browser for SQLite is the database structure. For this experiment 
you need to choose the Browse Data sheet and navigate through the tables like Package, 
Application, PackageLocation, and PrimaryTile. 
The Application Activation Manager and many other components of the Modern Application 
Model use standard SQL queries to extract the needed data from the State Repository. For ex-
ample, to extract the package location and the executable name of a modern application, a SQL 
query like the following one could be used:
SELECT p.DisplayName, p.PackageFullName, pl.InstalledLocation, a.Executable, pm.Name
FROM Package AS p
INNER JOIN PackageLocation AS pl ON p._PackageID=pl.Package
INNER JOIN PackageFamily AS pm ON p.PackageFamily=pm._PackageFamilyID
INNER JOIN Application AS a ON a.Package=p._PackageID
WHERE pm.PackageFamilyName=""
The DAL (Data Access Layer) uses similar queries to provide services to its clients.
You can annotate the total number of records in the table and then install a new application 
from the store. If, after the deployment process is completed, you again copy the database file, 
you will find that number of the records change. This happens in multiple tables. Especially if the 
new app installs a new tile, even the PrimaryTile table adds a record for the new tile shown in the 
Start menu.
CHAPTER 8 System mechanisms
255
The Dependency Mini Repository
Opening an SQLite database and extracting the needed information through an SQL query could be 
an expensive operation. Furthermore, the current architecture requires some interprocess communica-
tion done through RPC. Those two constraints sometimes are too restrictive to be satisfied. A classic 
example is represented by a user launching a new application (maybe an Execution Alias) through the 
command-line console. Checking the State Repository every time the system spawns a process intro-
duces a big performance issue. To fix these problems, the Application Model has introduced another 
smaller store that contains Modern applications’ information: the Dependency Mini Repository (DMR). 
Unlike from the State Repository, the Dependency Mini Repository does not make use of any 
database but stores the data in a Microsoft-proprietary binary format that can be accessed by any file 
system in any security context (even a kernel-mode driver could possibly parse the DMR data). The 
System Metadata directory, which is represented by a folder named Packages in the State Repository 
root path, contains a list of subfolders, one for every installed package. The Dependency Mini Repository 
is represented by a .pckgdep file, named as the user’s SID. The DMR file is created by the Deployment 
service when a package is registered for a user (for further details, see the “Package registration” sec-
tion later in this chapter).
The Dependency Mini Repository is heavily used when the system creates a process that belongs to 
a packaged application (in the AppX Pre-CreateProcess extension). Thus, it’s entirely implemented in 
the Win32 kernelbase.dll (with some stub functions in kernel.appcore.dll). When a DMR file is opened 
at process creation time, it is read, parsed, and memory-mapped into the parent process. After the 
child process is created, the loader code maps it even in the child process. The DMR file contains vari-
ous information, including
I 
Package information, like the ID, full name, full path, and publisher
I 
Application information: application user model ID and relative ID, description, display name,
and graphical logos
I 
Security context: AppContainer SID and capabilities
I 
Target platform and the package dependencies graph (used in case a package depends on one
or more others)
The DMR file is designed to contain even additional data in future Windows versions, if required. 
Using the Dependency Mini Repository file, the process creation is fast enough and does not require a 
query into the State Repository. Noteworthy is that the DMR file is closed after the process creation. So, 
it is possible to rewrite the .pckgdep file, adding an optional package even when the Modern applica-
tion is executing. In this way, the user can add a feature to its modern application without restarting 
it. Some small parts of the package mini repository (mostly only the package full name and path) are 
replicated into different registry keys as cache for a faster access. The cache is often used for common 
operations (like understanding if a package exists).
256 
CHAPTER 8 System mechanisms
Background tasks and the Broker Infrastructure
UWP applications usually need a way to run part of their code in the background. This code doesn’t 
need to interact with the main foreground process. UWP supports background tasks, which provide 
functionality to the application even when the main process is suspended or not running. There are 
multiple reasons why an application may use background tasks: real-time communications, mails, IM, 
multimedia music, video player, and so on. A background task could be associated by triggers and 
conditions. A trigger is a global system asynchronous event that, when it happens, signals the starting 
of a background task. The background task at this point may or may be not started based on its applied 
conditions. For example, a background task used in an IM application could start only when the user 
logs on (a system event trigger) and only if the Internet connection is available (a condition).
In Windows 10, there are two types of background tasks:
I 
In-process background task The application code and its background task run in the same
process. From a developer’s point of view, this kind of background task is easier to implement, but
it has the big drawback that if a bug hits its code, the entire application crashes. The in-process
background task doesn’t support all triggers available for the out-of-process background tasks.
I 
Out-of-process background task The application code and its background task run in dif-
ferent processes (the process could run in a different job object, too). This type of background
task is more resilient, runs in the backgroundtaskhost.exe host process, and can use all the trig-
gers and the conditions. If a bug hits the background task, this will never kill the entire applica-
tion. The main drawback is originated from the performance of all the RPC code that needs to
be executed for the interprocess communication between different processes.
To provide the best user experience for the user, all background tasks have an execution time 
limit of 30 seconds total. After 25 seconds, the Background Broker Infrastructure service calls the 
task’s Cancellation handler (in WinRT, this is called OnCanceled event). When this event happens, 
the background task still has 5 seconds to completely clean up and exit. Otherwise, the process that 
contains the Background Task code (which could be BackgroundTaskHost.exe in case of out-of-pro-
cess tasks; otherwise, it’s the application process) is terminated. Developers of personal or business 
UWP applications can remove this limit, but such an application could not be published in the official 
Microsoft Store.
The Background Broker Infrastructure (BI) is the central component that manages all the 
Background tasks. The component is implemented mainly in bisrv.dll (the server side), which lives in 
the Broker Infrastructure service. Two types of clients can use the services provided by the Background 
Broker Infrastructure: Standard Win32 applications and services can import the bi.dll Background Broker 
Infrastructure client library; WinRT applications always link to biwinrt.dll, the library that provides WinRT 
APIs to modern applications. The Background Broker Infrastructure could not exist without the brokers. 
The brokers are the components that generate the events that are consumed by the Background Broker 
Server. There are multiple kinds of brokers. The most important are the following:
I 
ste Event roer Provides triggers for system events like network connections’ state
changes, user logon and logoff, system battery state changes, and so on
I 
Time Broker Provides repetitive or one-shot timer support
CHAPTER 8 System mechanisms
257
I 
Network Connection Broker Provides a way for the UWP applications to get an event when
a connection is established on certain ports
I 
Device Services Broker Provides device arrivals triggers (when a user connects or discon-
nects a device). Works by listening Pnp events originated from the kernel
I 
Mobile Broad Band Experience Broker Provides all the critical triggers for phones and SIMs
The server part of a broker is implemented as a windows service. The implementation is different 
for every broker. Most work by subscribing to WNF states (see the “Windows Notification Facility” sec-
tion earlier in this chapter for more details) that are published by the Windows kernel; others are built 
on top of standard Win32 APIs (like the Time Broker). Covering the implementation details of all the 
brokers is outside the scope of this book. A broker can simply forward events that are generated some-
where else (like in the Windows kernel) or can generates new events based on some other conditions 
and states. Brokers forward events that they managed through WNF: each broker creates a WNF state 
name that the background infrastructure subscribes to. In this way, when the broker publishes new 
state data, the Broker Infrastructure, which is listening, wakes up and forwards the event to its clients.
Each broker includes even the client infrastructure: a WinRT and a Win32 library. The Background 
Broker Infrastructure and its brokers expose three kinds of APIs to its clients:
I 
Non-trust APIs Usually used by WinRT components that run under AppContainer or in
a sandbox environment. Supplementary security checks are made. The callers of this kind
of API can’t specify a different package name or operate on behalf of another user (that is,
BiRtCreateEventForApp).
I 
Partial-trust APIs Used by Win32 components that live in a Medium-IL environment. Callers
of this kind of API can specify a Modern application’s package full name but can’t operate on
behalf of another user (that is, BiPtCreateEventForApp).
I 
Full-trust API Used only by high-privileged system or administrative Win32 services. Callers
of these APIs can operate on behalf of different users and on different packages (that is,
BiCreateEventForPackageName).
Clients of the brokers can decide whether to subscribe directly to an event provided by the 
specific broker or subscribe to the Background Broker Infrastructure. WinRT always uses the latter 
method. Figure 8-44 shows an example of initialization of a Time trigger for a Modern Application 
Background task.
UWP
Application
(Imports BiWinRt.dll)
Win32
KernelBase
(Imports BrokerLib.dll)
Notifies the app