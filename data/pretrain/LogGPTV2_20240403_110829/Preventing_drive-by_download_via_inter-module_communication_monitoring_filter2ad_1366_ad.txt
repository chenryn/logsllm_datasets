tection systems: they can only detect known attacks. There-
fore, our system cannot detect new, zero-day attacks, or at-
tacks aiming vulnerabilities not in our deﬁnitions. There is
no ideal solution for this limitation now. But we still could
audit the IMC and add some heuristic rules to detect sus-
picious behaviors (e.g. string argument that is too long).
After that, we can manually or automatically analyze these
suspicious samples to see if they’re false positives or new,
unknown attacks.
The third one is that the signatures we used now are man-
ually generated. This work is time consuming and error-
prone. However, since the symbolic constraint is general
and has widely used in vulnerability analysis and mining
systems, we plan to develop our automated signature gen-
erating system in the future. Besides, the vulnerabilities we
analyzed now are either collected from published database
(e.g. CVE) or from captured attack samples. Once we have
an automatic signature generating system, we can further
modify it to dig common vulnerabilities (e.g. buﬀer over-
ﬂows) in ActiveX controls.
7. CONCLUSION
Drive-by download attack is one of the most severe threats
to Internet users, and is now the number one source of in-
fecting malware. Most drive-by download attacks rely on
the success of the client-side exploits. Most of these exploits
are launched against the browser components that handle
the malicious content or other vulnerable browser plug-ins.
Therefore, in this paper, we proposed a novel approach to
detect and prevent such exploits by monitoring inter-module
communications between browser components and its plug-
ins. By using vulnerability-based signatures, our system is
able to detect the malicious exploitation of a vulnerable com-
ponent before the vulnerability is exploited.
To demonstrate the feasibility of our approach, we devel-
oped a prototype system that is integrated into Microsoft
Internet Explorer. Experiments on this prototype system
showed that, on our test set, our system has a detection rate
of 100% on exploit instances attacking vulnerabilities in our
deﬁnitions. And the false positive ratio is kept 0. And this
protection only introduced a performance overhead of 15%.
Because our solution is conceptually generic, it can also be
integrated into other browsers like Mozilla Firefox or even
new browser architectures like OP browser. By integrating
into low interaction client honeypot like PHoneyC, it also
can work like an intrusion detection system to identify ma-
licious web pages.
8. ACKNOWLEDGMENT
This work is supported by the Research Fund for the Doc-
toral Program of Higher Education of China under Grant
No.200800011019.
We would like to thank all the anonymous reviewers for
their insightful comments and feedback. We would like to
thank Tao Wei, Zhiyin Liang, Xiaorui Gong, Jinpeng Guo
and Jinhui Zhong for their comments on our research.
9. REFERENCES
[1] S. Bandhakavi, P. Bisht, P. Madhusudan, and V. N.
Venkatakrishnan. Candid: preventing sql injection
attacks using dynamic candidate evaluations. In CCS
’07: Proceedings of the 14th ACM conference on
Computer and communications security, pages 12–24,
New York, NY, USA, 2007. ACM.
[2] L. Beijing Rising International Software Co. Internet
security report for china mainland, 2009 h1.
http://it.rising.com.cn/new2008/News/NewsInfo/2009-
07-21/1248160663d53890.shtml, November
2008.
[3] P. Bisht and V. N. Venkatakrishnan. XSS-GUARD:
Precise dynamic prevention of cross-site scripting
attacks. In Detection of Intrusions and Malware, and
Vulnerability Assessment, volume 5137 of Lecture
Notes in Computer Science, pages 23–43. Springer
Berlin / Heidelberg, 2008.
[4] D. Brumley, J. Newsome, D. Song, H. Wang, and
S. Jha. Towards automatic generation of
Vulnerability-Based signatures. In Proceedings of the
2006 IEEE Symposium on Security and Privacy, pages
2–16. IEEE Computer Society, 2006.
[18] G. Inc. Google safe browsing api.
http://code.google.com/apis/safebrowsing/.
[5] M. Cruz. Most abused infection vector.
[19] C. Kanich, C. Kreibich, K. Levchenko, B. Enright,
http://blog.trendmicro.com/most-abused-infection-
vector/, December
2008.
[6] W. Cui, M. Peinado, H. J. Wang, and M. E. Locasto.
Shieldgen: Automatic data patch generation for
unknown vulnerabilities with informed probing. In SP
’07: Proceedings of the 2007 IEEE Symposium on
Security and Privacy, pages 252–266, Washington,
DC, USA, 2007. IEEE Computer Society.
[7] D. Dagon, G. Gu, C. P. Lee, and W. Lee. A taxonomy
of botnet structures. Computer Security Applications
Conference, Annual, 0:325–339, 2007.
[8] M. Daniel, J. Honoroﬀ, and C. Miller. Engineering
heap overﬂow exploits with javascript. In WOOT ’08:
Proceedings of the 2nd USENIX Workshop on
Oﬀensive Technologies, July 2008.
[9] O. Day, B. Palmen, and R. Greenstadt. Reinterpreting
the DisclosureDebate for web infections. In Managing
Information Risk and the Economics of Security,
pages 1–19. Springer US, 2009.
[10] W. Dormann and D. Plakosh. Vulnerability detection
in activex controls through automated fuzz test.
http://www.cert.org/archive/pdf/dranzer.pdf, 2008.
[11] J. R. Douceur, J. Elson, J. Howell, and J. R. Lorch.
Leveraging legacy code to deploy desktop applications
on the web. In OSDI ’08: Proceedings of the 8th
USENIX Symposium on Operating Systems Design
and Implementation, December 2008.
[12] B. Dutertre and L. D. Moura. The yices smt solver.
Technical report, SRI International, 2006.
[13] M. Egele, P. Wurzinger, C. Kruegel, and E. Kirda.
Defending browsers against drive-by downloads:
Mitigating heap-spraying code injection attacks. In
DIMVA ’09: Proceedings of the 6th international
conference on Detection of Intrusions and Malware,
and Vulnerability Assessment, July 2009.
[14] B. Feinstein and D. Peck. Caﬀeine monkey:
Automated collection, detection and analysis of
malicious javascript.
http://mirror.fpux.com/HackerCons/
BlackHat 2007/BlackHat/Presentations/
Feinstien and Peck/Whitepaper/
bh-usa-07-feinstien and peck-WP.pdf, 2007.
[15] C. Grier, S. Tang, and S. T. King. Secure web
browsing with the op web browser. Security and
Privacy, IEEE Symposium on, 0:402–416, 2008.
G. M. Voelker, V. Paxson, and S. Savage.
Spamalytics: an empirical analysis of spam marketing
conversion. In CCS ’08: Proceedings of the 15th ACM
conference on Computer and communications security,
pages 3–14, New York, NY, USA, 2008. ACM.
[20] U. C. S. Lab. Wepawet. http://wepawet.iseclab.org/.
[21] D. Moore, C. Shannon, D. J. Brown, G. M. Voelker,
and S. Savage. Inferring internet denial-of-service
activity. ACM Trans. Comput. Syst., 24(2):115–139,
2006.
[22] T. Moore and R. Clayton. An empirical analysis of the
current state of phishing attack and defence. In WEIS
’07: Proceedings of the Sixth Workshop on the
Economics of Information Security, 2007.
[23] Mozilla. Spidermonkey (javascript-c) engine.
http://www.mozilla.org/js/spidermonkey/, 2009.
[24] J. Nazario. Phoneyc: A virtual client honeypot. In
LEET ’09: Proceedings of the 1st Usenix Workshop on
Large-Scale Exploits and Emergent Threats. USENIX
Association, 2009.
[25] A. Nguyen-Tuong, S. Guarnieri, D. Greene, J. Shirley,
and D. Evans. Automatically hardening web
applications using precise tainting. In Security and
Privacy in the Age of Ubiquitous Computing, volume
181 of IFIP International Federation for Information
Processing, pages 295–307. Springer Boston, 2005.
[26] T. Pietraszek and C. V. Berghe. Defending against
injection attacks through context-sensitive string
evaluation. In Recent Advances in Intrusion Detection,
volume 3858 of Lecture Notes in Computer Science,
pages 124–145. Springer Berlin / Heidelberg, 2006.
[27] J. Pincus and B. Baker. Beyond stack smashing:
Recent advances in exploiting buﬀer overruns. IEEE
Security and Privacy, 2(4):20–27, 2004.
[28] M. Polychronakis, K. G. Anagnostakis, and E. P.
Markatos. Emulation-based detection of
non-self-contained polymorphic shellcode. In Recent
Advances in Intrusion Detection, volume 4637 of
Lecture Notes in Computer Science, pages 87–106.
Springer Berlin / Heidelberg, 2007.
[29] M. Polychronakis, K. G. Anagnostakis, and E. P.
Markatos. Network-level polymorphic shellcode
detection using emulation. Journal in Computer
Virology, 2(4):257–274, February 2007.
[30] T. H. Project. Know your enemy: Malicious web
servers, August 2007.
[16] W. G. J. Halfond and A. Orso. Amnesia: analysis and
[31] N. Provos, P. Mavrommatis, M. A. Rajab, and
monitoring for neutralizing sql-injection attacks. In
ASE ’05: Proceedings of the 20th IEEE/ACM
international Conference on Automated software
engineering, pages 174–183, New York, NY, USA,
2005. ACM.
[17] W. G. J. Halfond, A. Orso, and P. Manolios. Using
positive tainting and syntax-aware evaluation to
counter sql injection attacks. In SIGSOFT
’06/FSE-14: Proceedings of the 14th ACM SIGSOFT
international symposium on Foundations of software
engineering, pages 175–185, New York, NY, USA,
2006. ACM.
F. Monrose. All your iframes point to us. In Security
’08: Proceedings of the 17th Usenix Security
Symposium, pages 1–15, Berkeley, CA, USA, 2008.
USENIX Association.
[32] N. Provos, D. McNamee, P. Mavrommatis, K. Wang,
and N. Modadugu. The ghost in the browser analysis
of web-based malware. In HotBots’07: Proceedings of
the ﬁrst conference on First Workshop on Hot Topics
in Understanding Botnets, pages 4–4, Berkeley, CA,
USA, 2007. USENIX Association.
[33] P. Ratanaworabhan, B. Livshits, and B. Zorn. Nozzle:
A defense against heap-spraying code injection
attacks. In Security ’09: Proceedings of the 18th
USENIX Security Symposium, 2009.
Symposium on Security and Privacy, 2009.
[49] J. Zhuge, T. Holz, C. Song, J. Guo, X. Han, and
W. Zou. Studying malicious websites and the
underground economyon the chinese web. In Managing
Information Risk and the Economics of Security,
pages 1–20. Springer US, 2009.
APPENDIX
A. GENERATED SIGNATURES
For the evaluation, we generated 37 signatures from 19
vulnerability reports (listed in Table 3). These signatures
are manually generated by analyzing (e.g. debugging) the
vulnerable components and identifying the symbolic con-
straint required for an exploit. Note, consisting with the
signatures does not imply the attack will succeed. For ex-
ample, the local string buﬀer used by vulnerable method
Register from SSReader Pdg2 ActiveX control (CVE-2007-
5892) is 256 bytes long, and any string passed in longer than
this will be reported as an attack; but too overwrite the re-
turn address on stack, the string passed in should contain
least 264 characters.
Table 3: Signatures included in prototype imple-
mentation
Vulneratibility
Component Nam
CVE-2006-0003
MS MDAC RDS.Dataspace
CVE-2007-4105
Baidu Soba Search Bar
CVE-2007-4816
Storm Player MPS
CVE-2007-4943
Storm Player SPARSER
CVE-2007-5601
RealNetworks RealPlayer
CVE-2007-5807
SSReader
Thunder PPlayer
CVE-2007-6144
Ourgame HanGamePluginCn CVE-2008-0647
RealNetworks RealPlayer
CVE-2008-1309
MS Access Snapshot Viewer
CVE-2008-2463
MS Windows Media Encoder CVE-2008-3008
CVE-2008-4664
QVOD Player
CVE-2008-6442
Sina UC Dloader
UUSee Player
CVE-2008-7168
CVE-2009-1136
MS Oﬃce Spreadsheet
CVE-2009-1800
Chinagames iGame
SA29118
Ourgame GLWorld
Ourgame GLWEBAVT
SA29446
NO-CVE(LoadPage)
SSReader
[34] C. Reis, J. Dunagan, H. J. Wang, O. Dubrovsky, and
S. Esmeir. Browsershield: Vulnerability-driven ﬁltering
of dynamic html. ACM Trans. Web, 1(3):11, 2007.
[35] Secunia. 2008 report.
http://secunia.com/gfx/Secunia2008Report.pdf, 2008.
[36] R. Sekar. An eﬃcient black-box technique for defeating
web application attacks. In NDSS ’09: Proceedings of
the 16th Annual Network & Distributed System
Security Symposium, San Diego, CA, Februry 2009.
[37] M. Sharif, A. Lanzi, J. Giﬃn, and W. Lee. Automatic
reverse engineering of malware emulators. Security
and Privacy, IEEE Symposium on, 0:94–109, 2009.
[38] A. Sotirov. Heap feng shui in javascript.
http://www.phreedom.org/research/heap-feng-
shui/heap-feng-shui.html,
2008.
[39] R. Steenson and C. Seifert. Capture-hpc client
honeypot / honeyclient.
https://projects.honeynet.org/capture-hpc/.
[40] Z. Su and G. Wassermann. The essence of command
injection attacks in web applications. In POPL ’06:
Conference record of the 33rd ACM
SIGPLAN-SIGACT symposium on Principles of
programming languages, pages 372–382, New York,
NY, USA, 2006. ACM.
[41] T. Toth and C. Kruegel. Accurate buﬀer overﬂow
detection via abstract pay load execution. In Recent
Advances in Intrusion Detection, volume 2516 of
Lecture Notes in Computer Science, pages 274–291.
Springer Berlin / Heidelberg, 2002.
[42] W3Counter. Global web stats. 2009.
[43] H. J. Wang, C. Grier, A. Moshchuk, S. T. King,
P. Choudhury, and H. Venter. The multi-principal os
construction of the gazelle web browser. In Security
’09: 19th USENIX Security Symposium, August 2009.
[44] H. J. Wang, C. Guo, D. R. Simon, and A. Zugenmaier.
Shield: vulnerability-driven network ﬁlters for
preventing known vulnerability exploits. SIGCOMM
Comput. Commun. Rev., 34(4):193–204, 2004.
[45] Y.-M. Wang, D. Beck, X. Jiang, R. Roussev,
C. Verbowski, S. Chen, and S. T. King. Automated
web patrol with strider honeymonkeys: Finding web
sites that exploit browser vulnerabilities. In
Proceedings of the Network and Distributed System
Security Symposium, NDSS 2006, San Diego,
California, USA, 2006.
[46] Y.-M. Wang, R. Roussev, C. Verbowski, A. Johnson,
M.-W. Wu, Y. Huang, and S.-Y. Kuo. Gatekeeper:
Monitoring auto-start extensibility points (aseps) for
spyware management. In LISA ’04: Proceedings of the
18th USENIX conference on System administration,
pages 33–46, Berkeley, CA, USA, 2004. USENIX
Association.
[47] J. Wolf. Heap spraying with actionscript.
http://blog.ﬁreeye.com/research/2009/07/
actionscript heap spray.html, 2009.
[48] B. Yee, D. Sehr, G. Dardyk, J. B. Chen, R. Muth,
T. Ormandy, S. Okasaka, N. Narula, and N. Fullagar.
Native client: A sandbox for portable, untrusted x86
native code. In Proceedings of the 30th IEEE