### eBPF for Windows Service (ebpfsvc.dll)

The eBPF for Windows Service, contained in `ebpfsvc.dll`, integrates the PREVAIL and uBPF codebases and exposes an RPC-based API. The primary RPC service API is:

```c
ebpf_result_t verify_and_load_program(
    [in, ref] ebpf_program_load_info *info,
    [out, ref] uint32_t *logs_size,
    [out, size_is(, *logs_size), ref] char** logs
);
```

This API is called through the internal `ebpf_program_load_bytes` function, which is part of the `libbpf` API `bpf_prog_load`. It is also invoked by the `ebpf_object_load` function in `EbpfAPI`, used by `netsh` and `bpftool` to load programs via the service.

### PREVAIL Static Verifier

The PREVAIL Static Verifier is a "Polynomial-Runtime EBPF Verifier using an Abstract Interpretation Layer." It is designed to be faster and more precise than the Linux static verifier and is dual-licensed under MIT and Apache, allowing it to be used alongside uBPF. PREVAIL includes a simple standalone tool called `check`, which can be easily fuzzed using a file fuzzing approach.

### Fuzzing PREVAIL

Fuzzing efforts for PREVAIL were conducted, but initial attempts at cross-fuzzing using a collection of crashes from individual components led to early API crashes. We began with the WTF fuzzer, but this coincided with Microsoft's own libfuzzer harness for PREVAIL, which found many of the same bugs, resulting in no new findings.

### uBPF

uBPF (Userspace BPF) is an independent reimplementation of the eBPF bytecode interpreter and JIT engine, licensed under BSD. It can run in both user and kernel contexts. Similar to PREVAIL, uBPF provides a simple reference implementation of the VM, allowing the loading and running of eBPF programs. However, it lacks helper functions and maps, serving only as a virtual CPU and execution environment.

### Fuzzing uBPF and uBPF JIT

Fuzzing efforts for uBPF and its JIT engine were also conducted, but no unique vulnerabilities were discovered due to the thoroughness of the initial fuzzer design.

### eBPF4Win Kernel (ebpfcore.sys)

The eBPF for Windows kernel module, `ebpfcore.sys`, exposes a set of IOCTLs for manipulating programs and maps. Currently, the ACL on the Device Object requires Administrator privileges, limiting the impact. However, we will fuzz the IOCTL layer for proactive vulnerability analysis.

#### IOCTL Functions

- `0x0`: resolve_helper
- `0x10`: get_ec_function
- `0x1`: resolve_map
- `0x11`: get_program_info
- `0x2`: create_program
- `0x12`: get_pinned_map_info
- `0x3`: create_map
- `0x13`: get_link_handle_by_id
- `0x4`: load_code
- `0x14`: get_map_handle_by_id
- `0x5`: map_find_element
- `0x15`: get_program_handle_by_id
- `0x6`: map_update_element
- `0x16`: get_next_link_id
- `0x7`: map_update_element_with_handle
- `0x17`: get_next_map_id
- `0x8`: map_delete_element
- `0x18`: get_next_program_id
- `0x9`: map_get_next_key
- `0x1a`: get_next_pinned_program_path
- `0xa`: query_program_info
- `0x1b`: bind_map
- `0xb`: update_pinning
- `0x1c`: ring_buffer_map_query_buffer
- `0xc`: get_pinned_object
- `0x1d`: ring_buffer_map_async_query
- `0xd`: link_program
- `0x1e`: load_native_module
- `0xe`: unlink_program
- `0x1f`: load_native_programs
- `0xf`: close_handle

### Fuzzing ebpfcore.sys

The majority of the attack surface for `ebpfcore.sys` is available through fuzzing the IOCTL interface. To fuzz the kernel attack surface, we used emulation and snapshot-based fuzzing with the WTF fuzzer tool from Axel Souchet. This technique allows sending multiple IOCTL requests in sequence between memory restorations from snapshots.

### Snapshot Fuzzing

Snapshot fuzzing uses emulators to continue code execution from a snapshot of a live system, enabling researchers to fuzz specific areas of code. Benefits include:
- Creating small and quick fuzzing loops in complex programs.
- Setting up large amounts of complexity in the program before fuzzing.
- Fuzzing "hard to reach" areas of code.

### WTF Fuzzer

WTF Fuzzer is a distributed, code-coverage-guided, and customizable fuzzer that supports cross-platform fuzzing. However, it has limitations such as handling task switching and device I/O. To write a fuzzer with WTF, the following functions must be implemented:
- `Init()`: Sets up breakpoints in the emulator to handle events.
- `InsertTestcase()`: Called with fuzzed data.

Optional callbacks include custom data generators and snapshot restore events. For multi-packet or IOCTL requests, a serialization format is implemented.

### WTF vs. ebpfcore.sys

We created a harness based on the `tlv_server` harness included with WTF, modifying it to send IOCTL requests via `DeviceIOControlFile` calls. For multi-IOCTL requests, we created a JSON-based serialization format containing an array of requests, including data bytes, length, IOCTL operation ID, and expected reply length.

### Crashes Found

#### _ebpf_murmur3_32 Crash

- **Crash Type**: Read Access Violation
- **Cause**: By setting the length in the packet header to a value less than the offset to the path in the packet struct, the string length underflows. The loop inside the `ebpf_murmur` function then reads past the end of the string, causing a read access violation.

#### ubpf_destroy Crashes

- **Crash Type**: Null Pointer Dereference
- **Cause**: `ubpf_create` runs out of memory while trying to allocate space for structs, returning a null value for the VM. This null value is then passed into `ubpf_destroy`, causing null pointer dereferences depending on when the program ran out of memory.

#### trampoline_table Crash

- **Crash Type**: Null Pointer Dereference
- **Cause**: When a program is created, a callback is added. If a resolve helper call fails, the `trampoline_table` can become null. Attempting to load code after this failure results in a null dereference crash.

### AFL-NYX vs. ebpfcore.sys

In addition to WTF, we ported the same harness to the NYX hypervisor-based snapshot fuzzer. NYX had significantly faster execution speed but did not find unique bugs due to the thoroughness of the initial fuzzer design.

### eBPF4Win Kernel Extension Modules

eBPF for Windows is designed with a modular architecture on the kernel side, with instrumentation support added via "extension modules." The current implementation provides a network shimming interface for packet inspection and rewriting at multiple levels.

### eBPF4Win Network Shims (netebpfext.sys)

Microsoft is currently focused on observing and instrumenting network packets in the eBPF implementation. We manually reviewed the xdp, bind, and cgroup hooks and did not find any implementation errors.

### eBPF4Win Code Hooks

On Linux, eBPF integrates strongly with uprobe, kprobe, and tracepoint code hooking interfaces. Microsoft has libraries like Detours that provide similar capabilities, but code hooking is not yet supported in eBPF for Windows. An additional kernel extension module for code hooking can be added in the future.

### Concluding Thoughts

- eBPF is an exciting technology for telemetry and instrumentation on modern operating systems.
- Microsoft has adapted open-source projects uBPF and PREVAIL to provide the foundation for their eBPF implementation.
- We found one serious ACE vulnerability and several robustness bugs during our fuzzing of the driver and userland loader code.
- Microsoft has been quickly adding fuzz testing to their repo since May, fixing many of the bugs found in the open-source projects.
- With the creation of the eBPF foundation backed by major industry players, eBPF is positioned to become a core technology for desktop, server, and cloud.
- Trellix is committed to proactive vulnerability research to benefit the community.

### Thank You!

Richard Johnson, Trellix  
@richinseattle on Twitter