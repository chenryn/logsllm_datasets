title:Deciding security of protocols against off-line guessing attacks
author:Mathieu Baudet
Deciding Security of Protocols against Off-line Guessing
Attacks
Mathieu Baudet
LSV – CNRS & INRIA Futurs Projet SECSI & ENS Cachan
61, avenue du Pr´esident Wilson, 94235 Cachan Cedex, France
PI:EMAIL
ABSTRACT
We provide an eﬀective procedure for deciding the exis-
tence of oﬀ-line guessing attacks on security protocols, for a
bounded number of sessions.
The procedure consists of a constraint solving algorithm
for determining satisﬁability and equivalence of a class of
second-order E-uniﬁcation problems, where the equational
theory E is presented by a convergent subterm rewriting
system.
To the best of our knowledge, this is the ﬁrst decidability
result to use the generic deﬁnition of oﬀ-line guessing attacks
due to Corin et al. based on static equivalence in the applied
pi calculus.
Categories and Subject Descriptors: C.2.2 [Network
Protocol]: Protocol Veriﬁcation, D.2.4 [Software/Program
Veriﬁcation]: Formal Methods, F.4.2 [Grammars and Other
Rewriting Systems]: Decision Problems
General Terms: Security, Theory, Veriﬁcation
Keywords: Security Protocols, Formal Methods, Guessing
Attacks, Second-Order E-Uniﬁcation
1.
INTRODUCTION
Guessing attacks (a.k.a. dictionary attacks or brute-force
attacks) occur in cryptography when an attacker is able to
guess a secret by just trying every possible value for it. In
practice this is feasible only when the number of those values
(the “dictionary”) is small—say 232 for a (poor) password
or even less for a vote in an election protocol. In this case
the secret is called a weak secret.
Fortunately not all weak secrets can be broken. As pointed
out by Lowe [18] the attacker must still be able to test
whether one of his guesses is correct or not, typically by
exploiting redundancy between messages.
Among guessing attacks, by deﬁnition, oﬀ-line guessing
attacks are those for which the attacker does not need to
participate in any communication during the guessing phase
(but he may have interacted with the honest agents before).
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’05, November 7–11, 2005, Alexandria, Virginia, USA.
Copyright 2005 ACM 1-59593-226-7/05/0011 ...$5.00.
When the size of the dictionary becomes signiﬁcant, oﬀ-line
guessing attacks are more feasible in practice than on-line
ones and thus are more crucial to detect. On-line guessing
attacks may need to send as many requests to the network
as the size of the dictionary.
Several attempts have been made, based on the initial
work of Lowe [18], to characterize oﬀ-line guessing attacks
from a logical point of view and derive formal methods for
detecting them [9, 11, 13]. The attempts for a “good” deﬁ-
nition currently culminate with Corin et al. [10]. Using the
notion of static equivalence from the applied pi calculus [3],
they give a simple and intuitive deﬁnition of oﬀ-line guess-
ing attacks for an arbitrary set of primitives, modeled by an
equational theory. However no automatic procedure is given
in [10] and the mentioned examples only deal with passive
adversaries.
In this paper we address the question whether the general
deﬁnition of Corin et al. [10] is suitable for automatic reason-
ing. We show that the problem of ﬁnding oﬀ-line guessing
attacks is decidable in the case of a bounded number of ses-
sions, for protocols whose set of primitives is described by
a convergent subterm rewriting system (see Section 2 for a
deﬁnition). In particular our class of protocols encompasses
the initial Dolev-Yao model [14] and subsequent extensions
as in [19, 12, 3, 6, 1] with symmetric encryption, ciphers,
compound keys, signatures and hashes.
Our algorithm is based on a procedure for solving a class
of second-order E-uniﬁcation problems. We show that the
satisﬁability of those constraint systems is decidable, and
more remarkably, that the equivalence between two systems
(i.e. the equality of their sets of solutions) is decidable.
The purpose of our constraint systems is here to repre-
sent symbolic traces of protocols (see e.g. [19, 20, 8, 12]).
We use the equivalence of systems to specify the absence of
oﬀ-line guessing attacks, by expressing the fact that the in-
truder cannot distinguish between two versions of the same
symbolic trace: one corresponding to a good guess and the
other one to a bad guess of the secret.
To our knowledge, this is the ﬁrst decision procedure for
ﬁnding such oﬀ-line guessing attacks. It is fair to mention,
though, that recent releases of Blanchet’s tool Proverif [5]
do support oﬀ-line guessing attacks based on Corin et al.’s
deﬁnition. In case of success, Blanchet’s (non-terminating,
approximate) procedure for proving strong secrecy [6], later
reﬁned by [7], rules out the possibility of on-line/oﬀ-line
guessing attacks, for an unbounded number of sessions. Our
concern is diﬀerent here, as we look for an exact answer,
given by a terminating algorithm, to the security problem
for a bounded number of sessions.
Further related work. Delaune and Jacquemard [12]
give an NP procedure for verifying trace properties, for a
bounded number of sessions, on protocols with explicit de-
structors. Our algorithm deals with a more general class of
security properties, including resistance to oﬀ-line guessing
attacks. We also relax (and somewhat simplify) the syn-
tactic conditions on the equational theory, by considering
convergent subterm rewriting systems instead of convergent
public-collapsing rewriting ones (see Section 2).
Abadi and Cortier [1] present an algorithm for deciding
static equivalence between closed frames in polynomial time,
when the equational theory is given by a convergent subterm
rewriting system. Recently, this result has been extended to
a more general class of equational theories comprising asso-
ciative and commutative symbols [2]. This work corresponds
to passive adversaries, i.e. pure eavesdroppers. Our proce-
dure can be seen as an extension of [1] to the general case
of active adversaries.
Outline of the paper. Section 2 begins with prelim-
inary deﬁnitions. We describe our class of constraint sys-
tems, called (standard) intruder constraint systems. These
correspond to second-order E-uniﬁcation problems with a
number of regularity conditions. Compared to usual uniﬁ-
cation, though, we allow distinguishing between private and
public symbols. Private symbols typically account for secret
values not directly available to the intruder. Our main the-
orem is that:
if the equational theory E is presented by a
convergent subterm rewriting system and the signature con-
tains an inﬁnite number of public constants, the satisﬁabil-
ity of intruder constraint systems is decidable, and so is the
equivalence between standard intruder constraint systems.
We apply this result in Section 3 for deciding trace proper-
ties and, more remarkably, the existence of oﬀ-line guessing
attacks on cryptographic protocols, for a bounded number
of sessions.
Section 4 is devoted to the proof of the main theorem.
The heart of our decision procedure is a sound and com-
plete set of transformation rules together with a (nondeter-
ministic) terminating strategy, so as to bring any intruder
constraint system into a solved form. As such solved forms
are always satisﬁable, this gives a procedure to decide sat-
isﬁability.
In order to decide the equivalence of systems,
we provide an algorithm for testing whether the set of so-
lutions corresponding to a solved system is included in that
of a standard intruder constraint system. We conclude in
Section 5.
2. PRELIMINARIES
2.1 Syntax and Basic Deﬁnitions
A signature is a set of symbols F together with non-
negative arities. Given an additional set of variables X , we
write T (F ,X ) for the set of (usual ﬁrst-order) terms built
upon X using the symbols in F .
We assume a given set of symbols F , with elements de-
noted by f, g . . .Symbols of arity 0 are called constants. F
is partitioned into public symbols Fpub and private symbols
Fpriv. We also use an additional set of constants, called
parameters W = {w1, w2 . . . wk . . .}.
We ﬁx a set of variables X , partitioned into ﬁrst-order
variables X 1, with elements denoted by x, y . . . and second-
order variables X 2, written X, Y . . . Second-order variables
X are given with arities, denoted ar(X). In the following
we assume that an inﬁnite number of public constants, resp.
ﬁrst-order variables, second-order variables of each arity, is
available.
Elements of T (F ,X 1) are called ﬁrst-order terms, and
denoted by letters t, s . . . Elements of T (Fpub ∪ W,X 2) are
called second-order terms, and denoted by M, N . . . More
generally we use letters T, S . . . for terms in T (F ∪ W,X )
and letter v for variables in X .
We write var(T ), par(T ) for the sets of variables, resp.
parameters, occurring in T . A term is closed iﬀ it has no
variable, public iﬀ is uses no private symbol. Notice that
our second-order terms are always public. We extend the
notations var(.) and par(.) to tuples and sets of terms in the
obvious way.
Substitutions are written σ = {v1 7→ T1, . . . , vn 7→ Tn}
where we let dom(σ) = {v1 . . . vn} ⊆ X and ∀i, vi 6= Ti. We
write T σ = σ(T ) for the (usual ﬁrst-order) application of σ
to T , σµ = µ ◦ σ for the composition of substitutions. σ is
closed iﬀ all the Ti are closed terms, idempotent iﬀ σσ = σ
i.e. ∀i, var(Ti) ∩ dom(σ) = ∅. We let var(σ) = {v1 . . . vn} ∪
var(T1 . . . Tn). T|p denotes the subterm of T at position p,
whereas T [p := T 0] is the result of replacing the subterm
at position p in T with T 0. This notation is extended to
equations: e.g. (T = T 0)|p and (T = T 0)[p := T 00].
For each pair of terms (t1, t2), mgu(t1, t2) denotes a most
general uniﬁer of t1 and t2, that is an idempotent substi-
tution µ such that t1µ = t2µ and for every substitution µ0,
t1µ0 = t2µ0 implies µ0 = µµ0.
In the rest of this paper, unless stated otherwise, we only
consider well-formed substitutions, that is, substitutions σ
which assign ﬁrst-order variables to ﬁrst-order terms, and
second-order variables X to second-order terms of correct ar-
ity: ∀wi ∈ par(Xσ), i ≤ ar(X) and ∀Y ∈ var(Xσ), ar(Y ) ≤
ar(X). Thus, arity represents the maximal index of eligible
parameters for substituting a second-order variable.
A (closed public) context is a closed second-order term C
given with an arity n ≥ 0, such that par(C) ⊆ {w1 . . . wn}.
Each parameter may occur zero, one or several times. If C is
n-ary, C[T1 . . . Tn] denotes the result of replacing each wk by
Tk in C. We extend the notation to second-order terms and
may write M [T1 . . . Tn] provided that par(M ) ⊆ {w1 . . . wn}.
A term rewriting system, or simply rewriting system, is
a ﬁnite set R of rewriting rules l → r, where l, r are ﬁrst-
order terms. A term T reduces to S by R, written T →R
S, iﬀ there exists a rule l → r in R, a position p and a
non-necessarily well-formed substitution σ such that T|p =
lσ and S = T [p := rσ]. We write →∗
R for the reﬂexive
and transitive closure of the binary relation →R, =R for
its reﬂexive, symmetric and transitive closure. A term T is
R-reduced or equivalently is a R-normal form iﬀ there is no
T 0 such that T →R T 0.
A rewriting system R is terminating iﬀ it admits no inﬁ-
nite sequence of reductions; conﬂuent iﬀ for every T1, T2, T3
such that T1 →∗
R T3, there exists T4 such that
T2 →∗
R T4; convergent iﬀ it is conﬂuent and
terminating.
R T4, T3 →∗
R T2, T1 →∗
2.2
Intruder Constraint Systems
Constraint solving is by now a standard method for de-
ciding reachability properties in cryptographic protocols for
a ﬁnite number of sessions [19, 20, 8, 12]. Our purpose is to
extend this method to properties that compare the behavior
of two systems from the intruder’s point of view. This leads
8>>>>>><>>>>>>:
X1[t1 . . . ta1 ] =?
. . .
Xm[t1 . . . tam ] =?
x1
1
n
us to introduce the following constraint systems and the
corresponding notion of satisﬁability and equivalence. We
shall see in Section 3 how to use these notions to express the
security of protocols against oﬀ-line guessing attacks.
Deﬁnition 1. Let R be a rewriting system and Y a set of
m pairwise distinct second-order variables X1 . . . Xm. De-
ﬁne ai = ar(Xi) and assume 0 ≤ a1 ≤ a2 ≤ . . . ≤ am. An
(R,Y)-intruder constraint system is a system of equations
Σ of the form
∃x1 . . . xm,
xm
s1 =?R s0
sn =?R s0
such that the following regularity conditions hold:
(1) var(s1 . . . sn, s0
(2) for all 1 ≤ i ≤ m and 1 ≤ j ≤ ai, var(tj) ⊆ {x1 . . . xi−1}.
n) ⊆ {x1 . . . xm} and
1 . . . s0
. . .
As suggested by the notation above, a solution to Σ is a
closed (well-formed) substitution θ with domain dom(θ) =
{X1 . . . Xm} such that there exists a closed (well-formed)
substitution θ0 with dom(θ0) = {x1 . . . xm} satisfying the
two conditions
(i) for all 1 ≤ i ≤ m, (Xi θ)[t1θ0 . . . tai θ0] = xi θ0, and
(ii) for all 1 ≤ j ≤ n, sj θ0 =R s0
j θ0.
Notice that the regularity condition (2) implies that for
each closed substitution θ with dom(θ) = {X1 . . . Xm}, there