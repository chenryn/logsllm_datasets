```
2.  使`kubectl`二进制文件可执行:
```
        $ chmod +x ./kubectl  
```
3.  现在，在所有机器上安装`kubelet`和`kubeadm`。`kubelet`是在集群中的所有机器上运行的组件，并执行启动 Pod 和容器等操作。`kubeadm`是引导集群的命令:
    1.  以 root 用户身份登录:
```
        $ sudo -i  
```
2.  更新并安装软件包:
```
        $ apt-get update && apt-get install -y apt-transport-https
```
3.  添加包的身份验证密钥:
```
        $ curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg 
        | apt-key add -  
```
4.  将 Kubernetes 源添加到`apt`列表中:
```
        $ cat /etc/apt/sources.list.d/kubernetes.list
        deb http://apt.kubernetes.io/ kubernetes-xenial main
        EOF  
```
5.  更新并安装工具:
```
        $ apt-get update
        $ apt-get install -y kubelet kubeadm  
```
以下步骤演示了如何使用`kubeadm`设置安全的 Kubernetes 集群。我们还将在集群上创建一个 pod 网络，以便应用组件可以相互通信。最后，在集群上安装一个示例微服务应用来验证安装。
1.  初始化主节点。要初始化主机，选择您先前安装的机器之一`kubeadm`并运行以下命令。我们已经指定`pod-network-cidr`为 Pod 之间的通信提供网络:
```
          $ kubeadm init --pod-network-cidr=10.244.0.0/16  
```
请参考`kubeadm`参考文件，了解更多`kubeadm init`提供的标志。
这可能需要几分钟，因为`kubeadm init`将首先运行一系列预检查，以确保机器准备好运行 Kubernetes。根据预检查结果，它可能会显示警告并在出现错误时退出。然后，它将下载并安装控制平面组件和集群数据库。
前面命令的输出如下所示:
```
[kubeadm] WARNING: kubeadm is in beta, please do not use it for production clusters.
[init] Using Kubernetes version: v1.7.4
[init] Using Authorization modes: [Node RBAC]
[preflight] Running pre-flight checks
[preflight] WARNING: docker version is greater than the most recently validated version. Docker version: 17.06.1-ce. Max validated version: 1.12
[preflight] Starting the kubelet service
[kubeadm] WARNING: starting in 1.8, tokens expire after 24 hours by default (if you require a non-expiring token use --token-ttl 0)
[certificates] Generated CA certificate and key.
[certificates] Generated API server certificate and key.
[certificates] API Server serving cert is signed for DNS names [galvin kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 10.0.2.15]
[certificates] Generated API server kubelet client certificate and key.
[certificates] Generated service account token signing key and public key.
[certificates] Generated front-proxy CA certificate and key.
[certificates] Generated front-proxy client certificate and key.
[certificates] Valid certificates and keys now exist in "/etc/kubernetes/pki"
[kubeconfig] Wrote KubeConfig file to disk: "/etc/kubernetes/admin.conf"
[kubeconfig] Wrote KubeConfig file to disk: "/etc/kubernetes/kubelet.conf"
[kubeconfig] Wrote KubeConfig file to disk: "/etc/kubernetes/controller-manager.conf"
[kubeconfig] Wrote KubeConfig file to disk: "/etc/kubernetes/scheduler.conf"
[apiclient] Created API client, waiting for the control plane to become ready
[apiclient] All control plane components are healthy after 62.001439 seconds
[token] Using token: 07fb67.033bd701ad81236a
[apiconfig] Created RBAC rules
[addons] Applied essential addon: kube-proxy
[addons] Applied essential addon: kube-dns  
Your Kubernetes master has initialized successfully:
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config 
You should now deploy a pod network to the cluster.
Run kubectl apply -f [podnetwork].yaml with one of the options listed at: http://kubernetes.io/docs/admin/addons/.
You can now join any number of machines by running the following on each node as the root:
kubeadm join --token 07fb67.033bd701ad81236a 10.0.2.15:6443 
```
保存前面输出的`kubeadm join`命令。您将需要它来将节点加入您的 Kubernetes 集群。令牌用于主节点和节点之间的相互认证。
现在，要开始使用集群，请以普通用户身份运行以下命令:
```
$ mkdir -p $HOME/.kube
$ sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
$ sudo chown $(id -u):$(id -g) $HOME/.kube/config  
```
2.  安装 pod 网络。该网络用于集群中各单元之间的通信:
The network must be deployed before running any application. Also, services such as `kube-dns` will not start up before a network is installed. `kubeadm` only supports **Container Network Interface** (**CNI**) networks and does not support `kubenet`.
有多个网络附加项目可用于创建安全网络。要查看完整的列表，请访问 Kubernetes 文档以供参考。在本例中，我们将使用 Flannel 进行联网。Flannel 是覆盖网络提供商:
```
 $ sudo kubectl apply -f 
https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
 serviceaccount "flannel" created
 configmap "kube-flannel-cfg" created
 daemonset "kube-flannel-ds" created
 $ sudo kubectl apply -f 
https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel-rbac.yml
 clusterrole "flannel" created
 clusterrolebinding "flannel" created  
```
您可以通过检查输出中的`kube-dns`Pod 是否已启动并运行来确认其正在工作:
```
$ kubectl get pods --all-namespaces
NAMESPACE     NAME                             READY     STATUS    RESTARTS   AGE
kube-system   etcd-galvin                      1/1       Running   0          2m
kube-system   kube-apiserver-galvin            1/1       Running   0          2m
kube-system   kube-controller-manager-galvin   1/1       Running   0          2m
kube-system   kube-dns-2425271678-lz9fp        3/3       Running   0          2m
kube-system   kube-flannel-ds-f9nx8            2/2       Running   2          1m
kube-system   kube-proxy-wcmdg                 1/1       Running   0          2m
kube-system   kube-scheduler-galvin            1/1       Running   0          2m  
```
3.  将节点加入集群。要将节点添加到 Kubernetes 集群，并将 SSH 添加到节点，请运行以下命令:
```
$ sudo kubeadm join --token  :
[kubeadm] WARNING: kubeadm is in beta, please do not use it for production clusters.
[preflight] Running pre-flight checks
[discovery] Trying to connect to API Server "10.0.2.15:6443"
[discovery] Created cluster-info discovery client, requesting info from "https://10.0.2.15:6443"
[discovery] Cluster info signature and contents are valid, will use API Server "https://10.0.2.15:6443"
[discovery] Successfully established connection with API Server "10.0.2.15:6443"
[bootstrap] Detected server version: v1.7.4
[bootstrap] The server supports the Certificates API (certificates.k8s.io/v1beta1)
[csr] Created API client to obtain unique certificate for this node, generating keys and certificate signing request
[csr] Received signed certificate from the API server, generating KubeConfig...
[kubeconfig] Wrote KubeConfig file to disk: "/etc/kubernetes/kubelet.conf"  
Node join complete:
Certificate signing request sent to master and response
Received
Kubelet informed of new secure connection details
Run kubectl get nodes on the master to see this machine join.
```
现在，运行以下命令来验证节点的连接:
```
$ kubectl get nodes
NAME      STATUS    AGE       VERSION
brunno    Ready     14m       v1.7.4
```
通过创建一个 Nginx 样品盒来验证您的安装:
```
$ kubectl run my-nginx --image=nginx --replicas=2 --port=80
deployment "my-nginx" created
$ kubectl get pods 
NAME                        READY     STATUS    RESTARTS   AGE
my-nginx-4293833666-c4c5p   1/1       Running   0          22s
my-nginx-4293833666-czrnf   1/1       Running   0          22s  
```
# 双手合十
在上一节中，我们学习了如何安装 Kubernetes 集群。现在，让我们用 Kubernetes 创建一个更复杂的例子。在这个应用中，我们将使用官方 Docker 映像部署一个运行 WordPress 站点和 MySQL 数据库的应用。
1.  创建一个持久卷。WordPress 和 MySQL 都将使用这个卷来存储数据。我们将创建两个大小各为 5 GB 的本地持久卷。将以下内容复制到`volumes.yaml`文件中:
```
        apiVersion: v1
        kind: PersistentVolume
        metadata:
          name: pv-1
          labels:
            type: local
        spec:
          capacity:
            storage: 5Gi
          accessModes:
            - ReadWriteOnce
          hostPath:
            path: /tmp/data/pv-1
         storageClassName: slow 
        ---
        apiVersion: v1
        kind: PersistentVolume
        metadata:
          name: pv-2
          labels:
            type: local
        spec:
          capacity:
            storage: 5Gi
          accessModes:
            - ReadWriteOnce
          hostPath:
            path: /tmp/data/pv-2
        storageClassName: slow 
```
2.  现在，通过运行以下命令创建卷:
```
 $ kubectl create -f volumes.yaml 
 persistentvolume "pv-1" created
 persistentvolume "pv-2" created    
```
3.  检查卷是否已创建:
```
          $ kubectl get pv
          NAME      CAPACITY   ACCESSMODES   RECLAIMPOLICY   STATUS      
          CLAIM     STORAGECLASS   REASON    AGE
          pv-1      5Gi        RWO           Retain          Available                                     
          8s
          pv-2      5Gi        RWO           Retain          Available                                    
          8s  
```
4.  创建一个机密来存储 MySQL 密码。这个机密将被 MySQL 和 WordPress 容器引用，以便这些容器可以访问它:
```
        $ kubectl create secret generic mysql-pass -from-
        literal=password=admin
        secret "mysql-pass" created
```
5.  验证机密是否已创建:
```
        $ kubectl get secrets
        NAME                  TYPE                                  DATA    
        AGE
        default-token-1tb58   kubernetes.io/service-account-token   3      
        3m
        mysql-pass            Opaque                                1   
        9s
```
6.  创建 MySQL 部署。我们现在将创建一个服务，该服务公开一个 MySQL 容器、一个 5 GB 的持久卷声明以及一个使用 MySQL 容器运行 pod 的部署。将以下内容复制到`mysql-deployment.yaml`文件中:
```
        apiVersion: v1
        kind: Service
        metadata:
          name: wordpress-mysql
          labels:
            app: wordpress
        spec:
          ports:
            - port: 3306
          selector:
            app: wordpress
            tier: mysql
          clusterIP: None
        ---
        apiVersion: v1
        kind: PersistentVolumeClaim
        metadata: