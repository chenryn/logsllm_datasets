### Expected Behavior
I was attempting to write unit tests for my Flask RESTful API, which uses Basic HTTP Authentication for the initial request and returns a JWT token. Subsequent requests include this token in the `X-Access-Token` header until it expires after 15 minutes, at which point re-authentication is required. The code for this functionality can be found in the `anacropapi` repository on my profile, specifically in the `api/__init__.py` file. I encountered an error as noted in the template. I expected the test client to be fully compatible with the `requests` package. Is there a workaround for this, or can an `auth` keyword argument be added?

```python
import unittest

class ApiTest(unittest.TestCase):
    def setUp(self):
        # Create a test client
        self.app = app.test_client()
        # Add a user into the account (code goes here)

    def tearDown(self):
        db.drop_all()
        # Additional cleanup if needed

    def test_login(self):
        # Send an HTTP GET request to the application
        # on the specified path with an auth kwarg passed like in the requests package
        result = self.app.get('/login', auth=requests.auth.HTTPBasicAuth(username, password))
```

### Actual Behavior
The above code returns an error indicating that the `auth` argument is not found. I do not remember the specific error message, but it clearly indicates that the `auth` keyword argument is not supported.

### Environment
- Python version: 3.6
- Flask version: Latest
- Werkzeug version: Latest

### Additional Information
- The `app` and `db` objects are assumed to be properly initialized elsewhere in the code.
- The `username` and `password` variables should be defined before the `test_login` method is called.