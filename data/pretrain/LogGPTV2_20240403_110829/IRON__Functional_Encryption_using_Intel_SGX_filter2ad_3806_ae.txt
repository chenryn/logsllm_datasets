observe how HW responds. We need to ensure that anything
𝒜 observes in the real experiment can be simulated in the
ideal experiment.
(2) We use IND-CCA2 public key encryption to secure communi-
cation between enclaves that is intercepted by 𝒜. 𝒮 will need
to simulate this communication. Proving that 𝒜 cannot dis-
tinguish this involves a reduction to the IND-CCA2 security
game, showing that if 𝒜 can distinguish the real and sim-
ulated communication then it would break the IND-CCA2
security. The IND-CCA2 adversary will need to simulate
the entire FE system for 𝒜 without knowledge of the corre-
sponding secret keys for the public keys that the enclaves are
using to secure their communication. In particular, it must
see if 𝒜 tampers with messages in a way that would cause
the system to abort). This is what necessitates an extra layer
of authentication on the communication between enclaves
(3) The final challenge is that the adversary can also load modi-
fied programs of its choice into different enclaves and test
their behavior with honest or tampered inputs. This aspect
in particular makes the security proof challenging because
the FE simulator in the ideal world has to identify whether
honest attested programs are running inside the enclaves,
and produce simulated outputs only for those enclaves. This
gets tricky as there are three enclaves each with multiple
entry points.
7.1 Security proof
Theorem 7.1. If S is an EUF-CMA secure signature scheme, PKE
is an IND-CCA2 secure public key encryption scheme and HW is a
secure hardware scheme, then F E is a secure functional encryption
scheme according to Definition 5.2.
Proof. We will construct a simulator 𝒮 for the FE security game
in Definition 5.2. 𝒮 is given the length |msg∗| and an oracle access
to Umsg∗ (·) (such that Umsg∗ (P ) = P (msg∗)) after the adversary
provides its challenge message msg∗. 𝒮 can use this Umsg∗ oracle
on the programs queried by the adversary 𝒜 to FE.Keygen. 𝒮 has to
simulate the pre-processing phase and a ciphertext corresponding
Session D1:  Functional Encryption and ObfuscationCCS’17, October 30-November 3, 2017, Dallas, TX, USA774to the challenge message msg∗ along with answering the adver-
sary’s queries to the KeyGen, HW and the KM oracles.
Pre-processing phase: 𝒮 simulates the pre-processing phase simi-
lar to the real world. 𝒮 runs HW.Setup(1λ ) and records (skquote,
skreport) generated during the process.𝒮 measures and stores tagDE.
𝒮 also creates empty lists 𝒦,ℛ,𝒩 , LK M , LDE , LDE2, LF E which
will be used later.
FE.Keygen∗ (msk, P ). When 𝒜 makes a query to the FE.Keygen
oracle, 𝒮 responds the same way as in the real world except that 𝒮
now stores all the tagP corresponding to the P’s queried in a list 𝒦.
FE.Enc∗ (mpk, 1|msg∗| ). 𝒮 outputs ct∗ ← PKE.Enc(pk, 0|msg∗| )
and stores ct∗ in the list ℛ.
(cid:16)
(cid:16)
HW oracle. For 𝒜’s queries to the algorithms of the HW oracle,
𝒮 runs the corresponding HW algorithms honestly and outputs
their results except for the following oracle calls.
• HW.Run(hdlK ME , “provision”, quote, params): When a provision
(cid:17)
query is made to KME, 𝒮 parses quote =
mdhdl, tagQ , in, out,
and outputs ⊥ if out (cid:60) LDE2. Else, it honestly runs the HW
σ
algorithm and then replaces ctsk with PKE.Enc(pk, 0|skpke|
). 𝒮
also generates and replaces σsk for the modified ctsk. Finally, 𝒮
stores (sid, ctsk ) in LK M .
• HW.Load(params, Q ): When the load algorithm is run for a Q
corresponding to that of a DE, 𝒮 runs the load algorithm honestly
and outputs hdlDE. In addition, it stores hdlDE in the list 𝒟.
When the load algorithm is run for a Q of the form QF E (P ),
𝒮 adds the output handle hdlP to the list 𝒦 as follows. 𝒮 first
checks if the tagP corresponding to this has an entry in 𝒦, and if
it exists 𝒮 appends hdlP to its handle list. Else, 𝒮 adds the tuple
(0, tagP , hdlP ) to 𝒦.
• HW.Run(hdlDE , “init setup”, vksign): When an init setup query
is made to a hdlDE ∈ 𝒟, 𝒮 checks if vksign matches with the one
in mpk. Else, it removes hdlDE from 𝒟. 𝒟 will remain as the list
of handles for DEs with the correct vksign fed as input. Then, 𝒮
runs HW.Run honestly on the given input and outputs the result.
It also adds (sid, pkra) to the list LDE2.
• HW.Run(hdlDE , “complete setup”, sid, ctsk , σsk ): When a com-
plete setup query is made to a hdlDE ∈ 𝒟, 𝒮 outputs ⊥ if (sid,
ctsk ) (cid:60) LK M . Else, it honestly executes HW.Run. Similar changes
are made for HW.Run&Report and HW.Run&Quote on this set
of inputs.
• HW.Run(hdlDE , “provision”, report, sig): When a provision query
(cid:17)
is made to a hdlDE ∈ 𝒟, 𝒮 parses report =
mdhdl, tagQ , in, out,
and outputs ⊥ if out (cid:60) LF E. Else, it honestly executes
mac
HW.Run. At the end, 𝒮 adds the output (sid, ctkey ) to LDE.
• HW.Run(hdlP , “init”): When an init query is made to a hdlP ∈ 𝒦
whose tuple in 𝒦 has the honest bit set, 𝒮 runs HW.Run&Report
honestly and outputs the result. It also adds (sid, pkla) to the list
LF E.
• HW.Run(hdlP , “run”, reportsk , ctmsд ): When a run query is made
to hdlP ∈ 𝒦 whose tuple in 𝒦 has the honest bit set, 𝒮 first parses
and outputs ⊥ if out (cid:60)
reportsk =
LDE. Else, it runs HW.Run on the given inputs. If the output is
⊥, 𝒮 outputs ⊥. Else, it parses out as (sid, ctkey ) and retrieves
mdhdl, tagQ , in, out, mac
(cid:16)
(cid:17)
skpke from msk. If ctmsд (cid:60) ℛ, 𝒮 computes x ← PKE.dec(skpke,
ctmsд ), runs P on x and outputs out := P (x ). If ctmsд ∈ ℛ, 𝒮
queries its Umsg∗ oracle on P and outputs the response.
• For the HW.Run&Report and HW.Run&Quote queries, similar
changes are made as in the respective HW.Runs above. But,
report and quote are generated for unmodified tag’s of the un-
modified programs descriptions. (This is to prevent the adversary
from being able to distinguish the change in hybrids just by
looking at the report or quote.)
KM oracle. For 𝒜’s queries to the KM oracle with input quote,
𝒮 uses the provision queries to HW.Run for KME with the changes
mentioned above.
Now, for this polynomial time simulator 𝒮 described above, we
(msg, α )real
will show that for experiments in Definition 5.2,
c≈ (msg, α )ideal
(1)
We prove this by showing that the view of the adversary 𝒜 in the
real world is computationally indistinguishable from its view in the
ideal world. It can be easily checked that the algorithms KeyGen∗,
Enc∗ and oracle KM∗ simulated by S correspond to the ideal world
specifications of Definition 5.2 (because the only information that 𝒮
obtains about msg∗ is through the Umsg∗ (·) oracle which it queries
on the FE.Keygen queries made by 𝒜). We will prove through a
series of hybrids that 𝒜 cannot distinguish between the real and
the ideal world algorithms and oracles.
FE (1λ ) is run.
Hybrid 0 Expreal
Hybrid 1 As in Hybrid 0, except that FE.Keygen∗ run by 𝒮 is
used to generate secret keys instead of FE.Keygen. Also, the ct∗
returned by FE.Enc for the encryption of the challenge message
msg∗ is stored in the list ℛ. Also, when HW.Load(params, Q ) is
run for the Q of a DE, store the output in the list 𝒟, and when
HW.Run(hdlDE , “init setup”, vksign) is run with a vksign different
from that in mpk, remove hdlDE from 𝒟. Also, when HW.Load is
run for a Q of the form QF E (P ), the output handle hdlP is added to
the list 𝒦 in the tuple corresponding to tagP . If tagP does not have
an entry in 𝒦, the entire tuple (0, tagP , hdlP ) is added to 𝒦.
Here, FE.Keygen∗ and FE.Keygen are identical. And storing in
lists does not affect the view of 𝒜. Hence, Hybrid 1 is indistinguish-
able from Hybrid 0.
Hybrid 2 As in Hybrid 1, except that when the HW.Run&Report
is queried with (hdlDE , (“provision", report, sig)) for hdlDE ∈ 𝒟,
𝒮 outputs ⊥ if tagP that is part of report does not have an entry in
𝒦 with the honest bit set.
If sig is not a valid signature of tagP , then the S.Verify step
during the execution of HW.Run&Report(hdlDE ,·) would make
it output ⊥. Hence, Hybrid 2 differs from Hybrid 1 only when
a valid signature sig for tagP is part of the “provision” query to
HW.Run&Report(hdlDE ,·) with a hdlDE that has the correct vksign
in its state and with a P that 𝒜 has not queried to FE.Keygen∗. But,
if 𝒜 does make a query of this kind to HW.Run&Report with a
Session D1:  Functional Encryption and ObfuscationCCS’17, October 30-November 3, 2017, Dallas, TX, USA775valid sig, Lemma C.1 shows that this can be used to break the exis-
tential unforgeability of the signature scheme S.
Hybrid 3.0 As in Hybrid 2, except that 𝒮 maintains a list LK M
of all the “provision” query responses from KM i.e., the (sid, ctsk )
tuples. Then, on any call to HW.Run(hdlDE , “complete setup”, sid,
ctk , σk ) for hdlDE ∈ 𝒟, if (sid, ctsk ) (cid:60) LK M , 𝒮 outputs ⊥.
The proof at a high level will be similar to the previous one.
HW.Run(hdlDE , “complete setup”,·) already outputs⊥ in Hybrid 2
if σsk is not a valid signature of (sid, ctsk ) or if an entry for the
session ID sid is not in state. So, Hybrid 3.0 differs from Hybrid 2
only when 𝒜 can produce a valid signature σsk on a (sid, ctsk ) pair
for a sid which it has seen before in the communication between
KM and a DE whose handle is in 𝒟. This is proved in Lemma C.2.
Hybrid 3.1 As in Hybrid 3.0, except that 𝒮 maintains a list LDE
of all the “provision” query responses from hdlDE ∈ 𝒟 i.e., the
(mdhdl, tagQDE , (report, sig), (sid, ctkey )) tuples. And, on call to
HW.Run(hdlP , reportsk , ctmsд ) with hdlP having an entry in 𝒦
with its honest bit set, 𝒮 outputs ⊥ if reportsk =
mdhdl, tagQ , in,
with tagQ = tagDE, sid having an entry in state
(sid, ctkey ), mac
and (sid, ctkey ) (cid:60) LDE.
(cid:17)
(cid:16)
(cid:16)
(cid:17)
Local attestation helps in proving the indistinguishability of the
hybrids. For honest hdlP s, HW.Run(hdlP , reportsk , ctmsд ) already
outputs ⊥ in Hybrid 3.0 if for reportsk =
mdhdl, tagDE , (report,
, mac is not a valid MAC on (mdhdl, tagDE ,
sig), (sid, ctkey ), mac
(report, sig), (sid, ctkey )), or if sid does not have an entry in state.
So, the only change in Hybrid 3.1 is that HW.Run also outputs
⊥ if mac is a valid MAC but on a (sid, ctkey ) (cid:60) LDE. Hence, 𝒜
can distinguish between the hybrids only when it produces a valid
mac on a tuple with (sid, ctsk ) not in LDE. But this happens with
negligible probability due to the security of local attestation.
Hybrid 4 As in Hybrid 3.1, except that when HW.Run is queried
with (hdlP , “run", reportsk , ctmsд ) where reportsk is a valid MAC
of a tuple containing an entry in LDE and hdlP ∈ 𝒦 with the
honest bit set. If ctmsд ∈ ℛ, 𝒮 uses the Umsg∗ oracle to answer
the HW.Run query. If ctmsд (cid:60) ℛ, 𝒮 uses the skpke from FE.Setup
to decrypt ctmsд instead of the one got by decrypting ctkey i.e.,
• On input (“run", reportsk, ctmsд ):
(4) If ctmsд (cid:60) ℛ, retrieve skpke from msk. Compute
x ← PKE.dec(skpke, ctmsд ). Run P on x and record
the output out := P (x ). Output out.
(5) If ctmsд ∈ ℛ, query Umsg∗ (P ) and output the re-
sponse.
In Hybrid 3.1, the decryption of ctkey is used by 𝒮 to decrypt
ctmsд while running HW.Run(hdlP ,·). This ctkey is a valid encryp-
tion of skpke because Hybrid 3.0 and Hybrid 3.1 ensure that the
encryption of skpke sent from KME to DE and then the one from DE
to FE both reach FE unmodified. Hence, the skpke got by decrypting
ctmsд is same as the one from msk. Thus, Hybrid 4 is indistin-
guishable from Hybrid 3.1 for any ctmsд (cid:60) ℛ. Now, let us consider
the case of ctmsд ∈ ℛ. 𝒮 has the restriction that it can use the
Umsg∗ oracle only for a P for which tagP ∈ 𝒦. From Hybrid 3.1, we
(cid:16)
(cid:17)
know that HW.Run(hdlP ,·) does not output ⊥ only when run with
a valid reportsk =
mdhdl, tagDE , (report, sig), (sid, ctkey ), mac
which is output by a DE “provision” query. Hence, sig is a valid
signature of the tagP contained in report. Also, tagP ∈ 𝒦 with
the honest bit set, as ensured in Hybrid 2. So, when a HW.Run
“run” query is made for hdlP , 𝒮 is allowed use its Umsg∗ oracle to
output the FE.Dec result. Thus, Hybrid 4 is indistinguishable from
Hybrid 3.1 for any ctmsд.
The following set of hybrids will help 𝒮 replace an encryption
of skpke with an encryption of zeros. In order to prove the indistin-
guishability, we will argue that all the FE algorithms run indepen-
dent of the skpke encrypted in ctsk, and that 𝒜 does not get any
information about the value encrypted in ctsk.
Hybrid 5.0 As in Hybrid 4, except that 𝒮 maintains a list LDE2 of
all (sid, pkra) that are part of quote = (mdhdl, tagDE , “init setup”,
(sid, pkra), σ ) output by HW.Run&Quote(hdlDE , “init setup”,·) for
hdlDE ∈ 𝒟. And now, when HW.Run(hdlK ME , “provision”, quote,
params) is called 𝒮 outputs ⊥ when (sid, pkra) (cid:60) LDE2.
The Remote Attestation security ensures that 𝒜 can provide a
fake quote on a pkra not provided by DE only with negligible proba-
bility (Lemma C.4). Thus ensures that KME provides an encryption
of skpke only under a public key pkra generated inside QDE ∈ 𝒟
i.e., when HW.Run(hdlK ME , “ provision”, quote, params) is called
with a valid quote output by a valid instance of DE.
Hybrid 5.1 As in Hybrid 5.0, except that 𝒮 maintains a list LF E
of all (sid, pkla) that are part of report = (mdhdl, tagP , (“init”, sid,
pkla), mac) output by HW.Run&Report(hdlP , “init”,·) for hdlP ∈
𝒦 with the honest bit set. And when HW.Run&Report(hdlDE ,
“provision”, report, sig) is called for a hdlDE ∈ 𝒟, 𝒮 outputs ⊥
when report contains tagP ∈ 𝒦 but (sid, pkla) (cid:60) LF E.
This is ensured by the Local Attestation security (Lemma C.5).
And, this shows that QDE only outputs skpke encrypted under some
pkla that was generated by a QF E (hdlP ,·) running a program P
that has been queried to FE.Keygen.
Hybrid 5.2 As in Hybrid 5.1, except that when the KM oracle
calls HW.Run(hdlK ME , (“provision",·,·)), 𝒮 replaces ctsk in the
output with PKE.Enc(0|skpke|
).
Lemma C.4 and Lemma C.5 ensure that skpke is encrypted only
under pkra and pkla generated by valid enclaves and 𝒜 has no ac-
cess to the corresponding secret keys. Now, Lemma C.6 will use
the IND-CCA2 security gameto argue that 𝒜 cannot distinguish
whether ctsk has an encryption of zeros or skpke under pkra of the
DE, and whether ctkey is an encryption of zeros or skpke under
pkla of a valid FE.
Hybrid 6 As in Hybrid 5.2, except that FE.Enc∗ is used instead
of FE.Enc.
Session D1:  Functional Encryption and ObfuscationCCS’17, October 30-November 3, 2017, Dallas, TX, USA776We are now ready to use the IND-CCA2 security property of
PKE to replace ctmsд which was an encryption of msg) with an
encryption of zeros, as shown in Lemma C.7.
8 EXTENSIONS AND FUTURE WORK
Private Key MIFE. There is a private key variant of MIFE where
producing a valid ciphertext for the ith input to a function requires
a secret encryption key eki. Invoking the decryption algorithm on
inputs produced with an invalid key does not reveal any informa-