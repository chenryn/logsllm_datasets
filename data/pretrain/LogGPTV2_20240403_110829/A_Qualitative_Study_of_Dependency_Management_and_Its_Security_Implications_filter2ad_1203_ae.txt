wait for an “official” patch.
Developers #2 and #12 said that they could just roll back to a
previous unaffected version of a vulnerable dependency.
If developers decide to address the security issue without a fix
in the dependencies of their projects, then they are likely to check
the solutions suggested by other library users or maintainers (for
example, #4 and #15). In case they discover that the maintainers
are working on the problem and are going to release a fix soon,
the developers #4, #17, and #20 temporarily disable the project
functionality that is exposed to the vulnerability:
We had to change the configuration of [image] library to totally
disallow that particular attack vector. (#20)
Discussion.Bogart et el. [7] observed that developers act less proac-
tive about dealing with (functionality) bugs in their dependencies:
sometimes developers decide to do nothing with their own project
but wait for the fixed version of the dependency [29]. We observe
that in case of vulnerability disclosures, developers are more proac-
tive: they check the impact of the vulnerability on their projects
and provide immediate solutions by disabling affected functionality
of their projects.
Observation 20: Skilled developers fix vulnerabilities in their
dependencies and contribute to the dependency projects.
The skilled developers #4, #7, #8, #13, and #15 may decide to fix
security vulnerability by themselves. While developers #4, #8, #13,
and #15 said that they prefer to create an internal fork of a vulner-
able dependency and maintain it until an “official” vulnerability
fix is released, the developers #7 and #13 reported that develop-
ers of their companies actually fix discovered security issues and
contribute to third-party projects by opening pull requests in their
FOSS repositories:
If this vulnerability seriously impacts our work and if this is
an open source product, then we just fix it. For example, if it
is just in Github, we just fix it, creating Pull Request. And
we ask contributors or maintainers to merge this Pull Request
into the master branch. And we are pushing them to release a
new version faster. (#13)
Discussion.Several recent papers [7, 16, 29] reported that, depend-
ing on the expertise, developers might decide to contribute to the
dependency projects to fix some functionality issues. The inter-
viewed developers reported that they distinguish functionality and
security fixes, and think that security fixes require higher exper-
tise. We also observe that skilled developers also contribute to the
dependency projects by fixing their security issues.
Observation 21: As the last resort, developers may substitute vul-
nerable dependency of their project with another library that provides
similar functionality.
If the fix of a software library is too complicated and the library
is not well supported, then developers may decide just to stop using
it and switch to another library (for example, #3 and #23).
Session 5C: Forensics CCS '20, November 9–13, 2020, Virtual Event, USA1522Simply, we used another library, which more or less did the
same thing. [...] And that, of course, caused us to rewrite
some piece of software. At least we solved this memory leak
problem in [Library Name]. (#23)
Discussion.Several studies suggested that developers might decide
to update or downgrade a vulnerable dependency to fix bugs [29]
or even contribute to the dependency project [7, 29]. In this respect,
we contribute to this body of knowledge by showing that enterprise
developers sometimes decide to substitute a vulnerable library with
another one that provides similar functionality.
6 IMPLICATIONS
Implication 1: Considering security while selecting new dependen-
cies might be expensive for individual and SME developers.
While looking for libraries to include in their projects, develop-
ers have to seek and combine information from various sources,
like discussions present in developer forums or code metrics ex-
tracted from software repositories. This process requires time and
expertise, and therefore, is preferably performed by experienced
developers or software architects (O3). In large enterprises devel-
opers sometimes have a pull of preapproved FOSS and homegrown
libraries (O1). The developers of such companies could use these
libraries without further investigations as they are guaranteed to
be reliable. However, smaller software development companies or
individual developers (e.g., freelancers) do not have such a reliable
source. While hiring an experienced software architect might be
quite expensive for them.
Research ideas: To help SME and individual developers consider
security while selecting new dependencies for their projects, the
complex information could be combined, e.g., in the form of badges
or meta-metrics accessible and understandable by developers (O13).
Such meta-metrics are expected to facilitate the following tasks:
• demonstrate that library is well-supported and its issues are
• suggest that the library is not affected by known security
vulnerabilities (O13);
• demonstrate that the library is mature, so it does not bring
many undiscovered bugs and security vulnerabilities (O13);
• show licenses for the library and its dependencies (O6).
Implication 2: Both LE and SME developers are more likely to
resolved quickly (O2 and O9);
adopt a security fix not bundled with functionality improvements.
Since security fixes (at least for well-supported libraries) typ-
ically do not introduce breaking changes (O9), they should not
be bundled together with functionality improvements: if they are
mixed together, developers would have to spend efforts to cope with
breaking changes introduced by the latter. Under the constraints of
limited resources (O10), developers will most likely ignore such an
update and stay with the vulnerability. Instead, if a security fix is
well-indicated, well-documented, and it does not require significant
development effort, then it has more chances to be adopted.
Research ideas: To help library creators always keep functionality,
updates, and security fixes separate, researchers could design an
automatic approach capable of distinguishing functionality and
security changes. Then developers might decide to release two
independent library versions. For library users, researchers could
develop an automatic classifier capable of identifying if a specific
library version includes changes related to functionality or security.
So, developers could immediately adopt security fixes and schedule
adoption of functionality updates.
Implication 3: LE developers tend to adopt automated depen-
dency analysis tools, while SME and individual developers are not
encouraged to use them.
LE developers have policies to consider the security of their de-
pendencies, and therefore they are forced to use the dependency
analysis tools (O11). In contrast, SME and individual developers
lack procedures for considering security in their projects. Moreover,
they are more concerned about developing new functionality, and
therefore, they often prefer to ignore “annoying” alerts of depen-
dency analysis tools (O14) and fix security issues in dependencies
of their projects only if these issues are severe and widely-known.
Research ideas: To facilitate the adoption of dependency analysis
tools by SME and individual developers, tool creators could design
their tools to satisfy the following developers’ requirements:
• report only vulnerable dependencies that actually affect the
• identification of the part of the analyzed project affected by
• suggest both new and early safe versions of the dependency,
so developers could select the best mitigation strategy: to
adopt a new version or roll-back to an earlier one (O16);
• suggest if a fixed version introduces breaking changes (O16).
Implication 4: LE developers are more proactive in fixing vulnera-
bilities within dependencies of their projects, while SME and individual
developers tend to behave passively.
analyzed project (O14, O16, and O18);
the vulnerability (O18);
LE developers sometimes contribute to the projects they depend
on by fixing vulnerabilities and creating pull requests (O20). How-
ever, SME and individual developers might not have enough time,
skills, and development resources to support dependency projects.
Therefore, they tend to rely on community support of their depen-
dencies and would prefer to either stay with vulnerability (O18) or
temporarily disable some functionality of their projects11 (O19).
Research ideas: If there is no fixed version available for a vulnera-
ble dependency, the developers perform manual analysis to devise
the countermeasures for the discovered issue. Since this action is
critical, on top of the requirements presented in Implication 3, there
is a need to have support from the dependency analysis tools on
the following aspects (especially for LE developers):
• accessing the dependency source code, so the developers
• finding an alternative library with similar functionalities and
could directly check it and possibly fix the issue (O20);
estimating the cost of switching to this library (O21).
7 THREATS TO VALIDITY
We recruited developers for our study without using any material
rewards, only based on their interest in the topic. In our study, we
aimed to receive information from industrial specialists who have
good solid positions. Hence, we could not think of any better reward
for them than a possibility to improve the development practice
by sharing their experience and to tell us their opinions on their
problems. Moreover, very often, the developers were motivated
by the fact that we had already had a prototype of a tool that we
11Some LE developers also prefer to temporarily disable the feature within their
projects, when such an option is allowed by their company policy.
Session 5C: Forensics CCS '20, November 9–13, 2020, Virtual Event, USA1523Table 6: Summary of Results
RQ2
Analysis summary
RQ
RQ1 When selecting a new dependency, developers pay attention to security only if it is required
and enforced by the policy of their company. Otherwise, they mainly rely on popularity and
community support of libraries (e.g., number of stars, forks, project contributors).
As generally developers lack resources to cope with possible breaking changes, they prefer to
avoid updating dependencies for any reason. Security vulnerabilities motivate developers for
updating only if they are severe, widely known, and adoption of the fixed dependency version
does not require significant efforts.
Developers perform sensitive dependency management tasks (e.g., updates) manually. Current
dependency analysis tools (if used) only facilitate identification of vulnerabilities in the project
dependencies. Developers complain that dependency tools produce many false-positive and low-
priority alerts.
The interviewees suggested the following actions when a vulnerability is discovered in a depen-
dency but no newer version fixes it: (i) assess if this vulnerability impacts them since they may not
use that particular functionality; (ii) leave the vulnerability and wait for the fix or a community
workaround, (iii) adapt own project, i.e., disable vulnerable functionality or rollback to a previously
safe library version; (iv) maintain own fork (possibly fixing and making a pull request).
RQ3
RQ4
Implications
High level metrics, that allow developers to understand that the
library is well-supported, mature, and not affected by security vul-
nerabilities, could facilitate library selection.
To be adopted, library versions that fix vulnerabilities should (i)
be well-indicated, (ii) not introduce breaking changes, and (iii) not
contain functionality improvements (as they are likely to break
dependent projects).
Dependency analysis tools should (i) generate alerts only relevant to
the used fragments of the libraries; (ii) show the affected components
of the dependent projects; (iii) suggest if there exists a fixed version
and if its adoption introduces breaking changes.
Dependency tools should (i) primarily determine which part of the
dependent project is actually affected by the vulnerability in a depen-
dency; (ii) facilitate access to the dependency source code, so devel-
opers could assess and possibly fix the vulnerability by themselves;
(iii) suggest an alternative library that provides similar functionality.
could use to produce some dependency analysis reports for their
projects. We believe that this strategy allowed us to receive the
especially valuable feedback from the field specialists, who have
the appropriate level of knowledge of the topic.
We applied the snowballing approach to increase the number of
developers we could reach. This may potentially attract developers
from the same development communities who share common views.
To mitigate this bias, we selected developers to come from different
companies and different countries. The finally interviewed devel-
opers have various backgrounds and company positions. Hence,
we believe that this threat is minimal.
Our observations are based on facts as perceived by the intervie-
wees. They might not necessarily reflect the reality, hence, more
qualitative and quantitative studies are needed to validate the pre-
sented implications. Unfortunately, field observational studies are
hard to get. For example, de Souza and Redmiles [10] report two
case studies for a total of 23 interviews. In spite of de Souza being
embedded in the company for several weeks, only ‘some of the
team members agreed to be shadowed for a few days’. Similarly
[42] did a survey of 274 developers but, to observe developers, had
to recruit 44 of them and assigned them laboratory designed tasks.
Currently, we mostly asked developers about dependency manage-
ment practices within their companies, which may hide some issues
related to the development of FOSS projects. However, nowadays,
developers often have to consume, contribute to, or, at least, fol-
low the trends in FOSS community: several interviewees, although
being industrial employees, also told us about their contributions
to FOSS projects. Hence, we believe that the analysis and the im-
plications presented in this study provide valuable insights for
developers working in both FOSS and enterprise contexts.
We present our interpretations of the developers statements. To min-
imize confirmation bias, the two researchers individually extracted
their observations and implications from the interviews, while the
third researcher performed an additional validation of the analysis
results. Additionally, we performed a validation of the results with
the developers, by sharing the one-page summary of the findings
with the interviewees. Hence, we believe our results correspond to
the actual reported dependency management practices.
8 CONCLUSIONS AND FUTURE WORKS
This paper reports the results of a qualitative study of developers’
perception of software dependencies and the relative importance
of security and functionality issues. We run 25 semi-structured
interviews, each around 30’, with developers from both large and
small-medium enterprises located in nine different countries.
All interviews were transcribed and coded, along with the prin-
ciples of applied thematic analysis. We summarise the implications
of our qualitative findings as follows:
• Optimal selection of (FOSS) libraries could be facilitated with
high-level metrics that show that a library is well-supported,
mature, and not affected by security vulnerabilities.
• Dependency updates break dependent projects, so if ain’t
broken, don’t touch it rules the world. To be adopted, secu-
rity fixes should be well-indicated, not introduce breaking
changes, and not require significant efforts.
• To maximize utility, dependency analysis tools should gen-
erate alerts only relevant to the library fragments used by
dependent projects and suggest possible mitigation strategies
along with estimation if they introduce breaking changes.
• Given the strong forces against updates, general security
alerts are likely to end as unheeded ‘cries for wolf’. Action-
able tools should determine which part of the dependent
project is actually affected by the vulnerability in a depen-
dency and suggest alternative libraries that provide similar
functionality along with the estimation of the cost of switch-
ing to that library.
Several nuances are still unaddressed by our study, starting from
broadening our studies to more countries to correlating results
with different types of industries (e.g., financial companies, critical
infrastructures, or social media - as we cover all of them but with
too few samples each). The most challenging future work for us
and the community at large is to develop the dependencies and
security analysis tools required by our developers.
ACKNOWLEDGMENTS
We thank the interviewed developers for their time and wiliness to
share their perceptions on the dependency management process.
We are grateful to Prof. Achim D. Brucker, Dr. Leysan Nurgalieva,
Prof. Paolo Tonella, and the anonymous reviewers for their insight-
ful and actionable suggestions.
This research has been partly funded by the EU under the H2020
Programs H2020-EU.2.1.1-CyberSec4Europe (Grant No. 830929) and
the NeCS: European Network for Cyber Security (Grant No. 675320).
Session 5C: Forensics CCS '20, November 9–13, 2020, Virtual Event, USA1524REFERENCES
[1] B. Adams. 2018. Developers of popular software projects are overloaded by
the requests from academic researchers. (2018). Suggested during a personal
communication with the authors at ESEM’2018.
[2] Sultan S Alqahtani, Ellis E Eghan, and Juergen Rilling. 2016. Tracing known secu-
rity vulnerabilities in software repositories–A Semantic Web enabled modeling
approach. Sci. Comp. Program. 121 (2016), 153–175.
[3] Hala Assal and Sonia Chiasson. 2019. ’Think secure from the beginning’ A Survey
with Software Developers. In Proc. of CHI’19. 1–13.
[4] Earl T Barr, Christian Bird, Peter C Rigby, Abram Hindle, Daniel M German, and
Premkumar Devanbu. 2012. Cohesive and isolated development with branches.
In Proc. of ICFASE’12. Springer, 316–331.
[5] Andrew Begel, Yit Phang Khoo, and Thomas Zimmermann. 2010. Codebook:
discovering and exploiting relationships in software repositories. In Proc. of
ICSE’10, Vol. 1. IEEE, 125–134.
[6] Christopher Bogart, Christian Kästner, and James Herbsleb. 2015. When it breaks,
it breaks: How ecosystem developers reason about the stability of dependencies.
In Proc. of ASEW’15. IEEE, 86–89.
[7] Christopher Bogart, Christian Kästner, James Herbsleb, and Ferdian Thung. 2016.
How to break an API: cost negotiation and community values in three software
ecosystems. In Proc. of FSE’16. ACM, 109–120.
[8] Mircea Cadariu, Eric Bouwers, Joost Visser, and Arie van Deursen. 2015. Track-
ing known security vulnerabilities in proprietary software systems. In Proc. of
SANER’15. IEEE, 516–519.
[9] Joël Cox, Eric Bouwers, Marko van Eekelen, and Joost Visser. 2015. Measuring
Dependency Freshness in Software Systems. In Proc. of ICSE’15 (ICSE ’15). IEEE
Press, Piscataway, NJ, USA, 109–118. http://dl.acm.org/citation.cfm?id=2819009.
2819027
[10] Cleidson de Souza and David Redmiles. 2008. An empirical study of software
developers’ management of dependencies and changes. In Proc. of ICSE’08. IEEE,
241–250.
[11] Erik Derr, Sven Bugiel, Sascha Fahl, Yasemin Acar, and Michael Backes. 2017.
Keep me updated: An empirical study of third-party library updatability on
Android. In Proc. of CCS’17. ACM, 2187–2200.
[12] Leo A Goodman. 1961. Snowball sampling. AOMS (1961), 148–170.
[13] Robert Wayne Gregory, Mark Keil, Jan Muntermann, and Magnus Mähring. 2015.
Paradoxes and the nature of ambidexterity in IT transformation programs. ISR
26, 1 (2015), 57–80.
[14] Greg Guest, Kathleen M MacQueen, and Emily E Namey. 2011. Applied thematic
[15] Sarra Habchi, Xavier Blanc, and Romain Rouvoy. 2018. On adopting linters to
deal with performance concerns in android apps. In Proc. of ASE’18, Vol. 11. ACM
Press.
[16] Nicole Haenni, Mircea Lungu, Niko Schwarz, and Oscar Nierstrasz. 2013. Cate-
gorizing developer information needs in software ecosystems. In Proc. of WEA’13.
ACM, 1–5.
[17] Mohanad Halaweh. 2012. Using grounded theory as a method for system require-
ments analysis. JISTEM 9, 1 (2012), 23–38.
[18] Regina Hebig and Jesper Derehag. 2017. The changing balance of technology
and process: A case study on a combined setting of model-driven development
and classical C coding. Journal of Software: Evolution and Process 29, 11 (2017),
e1863.
[19] JI Hejderup. 2015. In dependencies we trust: How vulnerable are dependencies
analysis. Sage.
in software modules? (2015).