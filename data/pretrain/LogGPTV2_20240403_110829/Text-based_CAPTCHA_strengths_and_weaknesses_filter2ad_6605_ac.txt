its surroundings to decide whether or not to remove it. The main
reason behind Decaptcha’s relatively low precision ( 35% precision)
on Slashdot is the fact that Slashdot fonts have hollow characters
that end up oftentimes damaged beyond repair when the lines are
removed.
Recommendation. Based on our evaluation of captcha schemes we
believe that using lines is a secure anti-segmentation defense when
properly implemented. Overall, the goal of these principles is to
prevent the attacker from ﬁnding a discriminator that will allow him
to to tell apart character segments and lines. We recommend that
in addition to the general security principles discussed in section 6,
designers follow the following design principles when implementing
this defense:
• Use large lines: Using lines that are not as wide as the
character segments gives an attacker a robust discriminator
and makes the line anti-segmentation technique vulnerable
to many attack techniques including de-noising, projection-
based segmentation and, in some rare cases, even the simple
erode ﬁlter.
• Keep the line within the captchas: Line ﬁnding algorithms,
such as the Hough transform, are very efﬁcient at ﬁnding lines
so for a defense mechanism to be effective, lines must cross
only some of the captcha letters, so that it is impossible to tell
whether it is a line or a character segment.
• Don’t use a strange slope: Keep the angle of the line on par
with the character segments otherwise the line slope will be
used as a discriminator by the attacker. When using lines as
anti-segmentation waving the captcha and tilting the charac-
ters will help ensure that it is hard for the attacker to distin-
guish between the lines and the character segments.
• Match slopes: The slope of the anti-segmentation lines must
be roughly equivalent to the slope of a subset of the character
segments. Otherwise when projecting in a Hough space the
anti-segmentation lines will appear as outliners that are easily
spotted.
• Match color: Anti-segmentation lines must be in the same
color as the characters.
• Randomize the length: Make sure that the length of the line
is variable to prevent the attacker from using its size as a
discriminator.
5.3 Collapsing
Collapsing is considered by far to be the most secure anti-segmentation
technique. While this is generally true, in practice the security of
collapsing is often impeded by design ﬂaws at the core feature level
or at the anti-recognition level. That is why we distinguish two
cases: one where the attacker can exploit a design ﬂaw to predict
the characters’ segmentation despite the collapsing and the case
where there is no ﬂaw and the attacker is forced to “brute force" the
captcha.
Predictable collapsing. Having the characters collapsed either by
removing the space between characters ala Recaptcha or tilting them
sufﬁciently ala eBay (ﬁgure 11) is insufﬁcient to prevent the segmen-
tation because the attacker can still guess where the cuts are likely
to occur if the width of the letters is too regular and/or the number
of letters is known in advance. As visible in ﬁgure 11 this is the case
for eBay - we can’t ﬁgure out where to cut but we know that there
are 6 digits in their captchas and because the letter width is roughly
always the same, we can make an educated guess and segment with
reasonable success. We call this technique the opportunistic seg-
mentation because it relies on“side channel information" to work.
Overall, this segmentation works, as visible in ﬁgure 11, by ﬁrst
applying the standard CFS segmentation and then, based on the size
of each segmented block, deciding how many characters each block
contains using the fact that we either know the length of the captcha
or the average size of the letters. Using this technique Decaptcha is
able to achieve 43% precision on eBay captchas.
OriginalPre-processingSegmentationPost-segmentationOriginalPre-processingSegmentationPost-segmentation131Figure 8: Example of the Authorize pipeline
Figure 9: Example of the Digg pipeline using Gibbs
Figure 10: Example of the Slashdot pipeline
Figure 11: Example of the eBay pipeline
Figure 12: Example of the Baidu pipeline
Figure 13: Example of the CNN pipeline
OriginalPre-processingSegmentationPost-segmentationOriginalPre-processingSegmentationPost-segmentationOriginalPre-processingSegmentationPost-segmentationOriginalPre-processingSegmentationPost-segmentationOriginalPre-processingSegmentationPost-segmentationOriginalPre-processingSegmentationPost-segmentation132Even if it seems at ﬁrst sight that randomizing either the size of
the letters or the length would be sufﬁcient to prevent this kind of
attack, this is not the case. Take Baidu (ﬁgure 12) for example.
Even if Baidu performs heavy tilting and uses lines to prevent the
attacker from guessing where to cut, knowing that the captcha has
a length of 4 and using a projection based segmentation to get rid
of the trailing lines allows Decaptcha to have a 5% precision on
Baidu captchas. It works better on CNN (ﬁgure 13) where we get
50% recall and 16% accuracy.
Unpredictable collapsing. When the number of characters is un-
known and the average size of each character is unpredictable as in
the Google captcha case, then the only option is to try to recognize
each letter of the captcha directly without segmenting it. This kind
of approach is fairly common and one solution might be to train on
character templates segmented by hand and then use a space dis-
placement neural network [24] to recognize the characters without
segmenting ﬁrst.
Recommendation. We recommend to use collapsing as the main
anti-segmentation technique. Provided that all the other aspects of
the captcha are properly designed, this anti-segmentation technique
provides an efﬁcient defense against segmentation. It is also advised
to not use too aggressive collapsing, as after a certain threshold
(-5px) the human accuracy drops drastically [3].
6. DESIGN PRINCIPLES FOR CREATING
A SECURE CAPTCHA
In this section we brieﬂy summarize our results, on both our
synthetic corpus and on real-world captchas, to provide a compre-
hensive assessment of the state of the art. We then provide general
principles for how to design secure captchas based on the lessons
learned while doing this massive evaluation. We ﬁnish by discussing
future research directions that are likely to change the current state
of the art sooner or later.
6.1 Real World Captchas Evaluation Summary
Table 2 summarizes Decaptcha recall and precision on the 15
real-world schemes that we use as the basis of evaluation during the
course of this work. For all the results provided in this table, we
followed our recommended best practices and tested Decaptcha on
1,000 testing examples that were never used during the exploration
or training phase. We only report in this table the precision achieved
by KNN on 500 examples as SVM achieved very similar results.
Our results also support our proposal to use the 1% precision mark
to deem a scheme broken as we either clearly break a scheme or
we don’t, but we are never in the range of the 0.5% success rate.
This evaluation also supports our claim (Section 4) that the best
classiﬁers to evaluate image captcha security are those which are the
simplest to conﬁgure and fastest to run, as recognition was never the
bottleneck. Another thing we learned from this evaluation is that the
design ﬂaws introduced at the core feature and anti-recognition lev-
els make a huge difference in the captcha scheme’s overall security,
regardless of the anti-segmentation technique(s) used. For example,
because Slashdot used words we were able to bump Decaptcha accu-
racy from 24% to 35% by loosening the segmentation process and
relying heavily on the spellchecking process. Similarly, we wouldn’t
have been able to achieve 43% precision on eBay captchas without
exploiting the fact that they are using a ﬁxed number of digits and a
very regular font width.
Overall, while we were able to break every scheme except Google
and Recaptcha to a certain extent, it is clear that some schemes were
more broken than others. When compared to the anti-segmentation
technique used it is clear that relying on lines or collapsing is more
secure than relying on a confusion background.
The ﬁgure 14 depicts the learning rate of Decaptcha against the
various real-world schemes. The ﬁrst observation we can make is
that with 100 captchas we are already able to know if the scheme is
broken or not. The second thing that we can notice is that the anti-
segmentation techniques affect the learning rate: when these curves
are compared to the earlier ones that focused on anti-recognition
techniques only (Figures 4(a), 4(b)) it is apparent that the learning
rate is slower when anti-recognition techniques are solely used. The
shape of the real world scheme learning curves are very similar to
the shape of the distortion technique curve which also tampers with
letters integrity.
Scheme
Authorize
Baidu
Blizzard
Captcha.net
CNN
Digg
eBay
Google
Megaupload
NIH
Recaptcha
Reddit
Skyrock
Slashdot
Wikipedia
Recall Precision Anti-segmentation
84%
98%
75%
96%
50%
86%
95%
0%
n/a
87%
0%
71%
30%
52%
57%
background confusion
collapsing
background confusion
background confusion
line
line
collapsing
collapsing
collapsing
background confusion
collapsing
background confusion
background confusion
lines
n/a
66%
5%
70%
73%
16%
20%
43%
0%
93%
72%
0%
42%
2%
35%
25%
Table 2: Real world captchas summary
6.2 Design principles
Based on our evaluation results and experimentation with De-
captcha , we derived the following core set of design principles
that captcha designers need to follow to create schemes resilient to
state of the art attackers. Overall, captcha scheme security comes
from having a sound and coherent design at the core design, anti-
recognition and anti-segmentation levels. Anti-segmentation tech-
niques are only effective if the anti-recognition techniques and core
design are sound. For example, using collapsing is only effective
if the size and the number of characters are random. Failling to
randomize either of these leaves the scheme vulnerable to an op-
portunistic segmentation such as in the eBay scheme. The Google
scheme that implements all the design principles proposed in this
section remains unbroken even-though it is in use for more than 4
years.
Core feature principles. The following principles apply to the
design of the captcha core features:
1. Randomize the captcha length: Don’t use a ﬁxed length, it
gives too much information to the attacker.
2. Randomize the character size: Make sure the attacker can’t
make educated guesses by using several font sizes / several
fonts. As reported in section 4, using several fonts reduces
the classiﬁer accuracy and the scheme’s learnability.
133Figure 14: Real schemes learnability: Accuracy of Decaptcha using KNN vs the size of the training set. Logarithmic scale
3. Wave the captcha: Waving the captcha increases the difﬁ-
culty of ﬁnding cut points in case of collapsing and helps
mitigate the risk of the attacker ﬁnding the added line based
on its slope when using lines.
Anti-recognition.
1. Use anti-recognition techniques as a means of strengthen-
ing captcha security: Don’t rely on anti-recognition tech-
niques to protect your scheme, use them to strengthen the
overall captcha scheme security. Because most classiﬁer ef-
ﬁciency is sensitive to rotation, scaling and rotating some
characters and using various font sizes will reduce the recog-
nition efﬁciency and increase the anti-segmentation security
by making character width less predictable.
2. Don’t use a complex charset: Using a large charset does not
improve signiﬁcantly the captcha scheme’s security and really
hurts human accuracy, thus using a non-confusable charset is
the best option.
Anti-Segmentation.
1. Use collapsing or lines: Given the current state of the art, us-
ing any sort of complex background as an anti-segmentation
technique is considered to be insecure. Using lines or col-
lapsing correctly are the only two secure options currently.
Complex background can be used as a second line of defense
(e.g. the ellipses used in some Recaptcha’s captchas).
2. Be careful while implementing: To be effective, anti-segmentation
techniques must be implemented very carefully. When using
lines, follow all the recommendations provided in section 5.2
and when implementing collapsing, make sure to follow the
recommendations provided in section 5.3.
3. Create alternative schemes: As with cryptography algo-
rithms, it is good practice to have alternative captcha schemes
that can be rolled out in case of a break. Variations of the same
battle-hardened schemes with additional security features is
likely the easiest way to prepare alternative schemes. This
seems to be the strategy of Recaptcha, which has alternative
schemes that surface from time to time.
7. DECAPTCHA
In this section we present our captcha breaker, Decaptcha, which
is able to break many popular captchas including eBay, Wikipedia
and Digg. Then we discuss the rationale behind its ﬁve stage
pipeline, its beneﬁts, and its drawbacks, and conclude by deriv-
ing principles on how do build a successful solver.
Decaptcha implements a reﬁned version of the three stage ap-
proach in 15,000 lines of code in C#. We chose C# because it offers
a good tradeoff between speed, safety, robustness and the availability
of AI/Vision libraries. We also chose C# because of the visual studio
interface builder quality, as evaluating captcha security efﬁciently
requires designing a fairly complex UI for debugging and tweak-
ing purposes. Decaptcha uses the aForge framework [19] and the
Accord framework that provide easy access to image manipulation
ﬁlters, and standard machine learning algorithms such as SVM [11].