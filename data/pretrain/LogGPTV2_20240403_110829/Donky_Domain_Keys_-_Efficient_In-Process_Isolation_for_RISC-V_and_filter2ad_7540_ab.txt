the principle of least privilege [69] to reduce the attack surface
in case of corruption. For example, the application might be
subject to vulnerabilities and exploitation. It might also load
other modules (e.g., libc), which themselves are vulnerable or
malicious and cannot be securely sandboxed. The application
shields sensitive modules in a Donky in-process vault and
renounces all access rights to it. Donky enforces memory
isolation and call gate protection towards the vault.
We assume that the developer correctly uses Donky. Ill-
designed trust relationships, domain interfaces, or system call
ﬁlter rules [9,31] are out of scope.3 While DonkyLib carefully
validates all untrusted input, we consider confused deputy or
corruption attacks [12, 36, 52, 59] out of scope. We assume
a trusted code base consisting of DonkyLib, all code that is
executed before DonkyLib, and the operating system.
We consider side-channel and fault attacks out of scope,
and these types of attacks must be addressed by orthogonal
mechanisms [8, 17, 32, 38, 57, 75, 92]. However, Donky can,
just as process isolation [67], reduce the attack surface of
Spectre attacks [40], as we also show in Section 6.1.
Design Overview. While memory protection keys are a
powerful building block for in-process isolation, they do not
provide proper abstraction for securely shielding software
components. In particular, each memory page has exactly
one protection key. However, a software component might
require multiple protection keys to share memory with other
components. To capture this, we use the term “domain” to
denote a set of protection keys (and associated memory), their
precise usage rights, and their allowed entry points.
By assigning each domain a different set of protection keys,
depicted as circles in Figure 1, a variety of trust models can
be enforced, as we demonstrate in our use case studies in Sec-
tion 7. For example, Donky supports sandboxing of untrusted
or even malicious code (see domain C in Figure 1). In par-
ticular, strong sandboxing of runtime compilers for scripting
languages such as JavaScript is in great demand [16,80]. Also,
Donky, by design, supports the inverse trust model in which
sensitive data is safeguarded in a vault via privilege separation
3Note that this assumption has to be made for any shielding system.
Figure 1: Donky structures a user process into security
domains, orchestrating a set of memory regions. Each re-
gion is assigned a unique protection key, and access is con-
trolled via a policy register. Keys can be domain-private
to implement software vaults (Dom B), or shared across
domains. Limiting a domain’s keys allows to sandbox ma-
licious code (Dom C). The domain monitor manages pro-
tection keys, the policy register, and system call ﬁltering.
Call gates prevent control-ﬂow attacks across domains.
E.g., in V8, an Isolate is an independent copy of the entire
JavaScript runtime environment. Each Isolate has its own
code cache, heap, garbage collection, and call stack. Thus,
JavaScript code runs in parallel in a separate Isolate within
the same process. However, sandbox escapes are still possible
by exploiting vulnerabilities in both the JavaScript engine and
the sandbox [2,33,70]. An additional security enhancement is
to use process isolation, e.g., in the form of site isolation [67].
3 Donky System Design
In this section, we deﬁne our threat model and present Donky,
a hardware-software co-design for strong and efﬁcient mem-
ory isolation within a single user process. Donky provides
highly ﬂexible and lightweight domains atop of hardware-
backed memory protection keys, as visualized in Figure 1.
Threat model. Donky supports complex user programs
with multiple software modules and mixed trust assumptions
(cf. Figure 1). Modules can range from small components
like individual C++ classes over compounds like plugins or
browser tabs to entire binaries and libraries. For the sake of
demonstration, we discuss two common scenarios.
First, in a sandbox scenario, an application wants to execute
untrusted code modules without speciﬁc security assumptions.
They may contain vulnerabilities that are actively exploited
by an adversary, or even run malicious (e.g., user-provided
JavaScript) or arbitrary code, such that it issues adversary-
chosen system calls or accesses adversary-chosen memory
locations. The adversary may repeatedly inject arbitrary in-
structions at runtime, including WRPKRU. The application en-
1680    29th USENIX Security Symposium
USENIX Association
Table 1: Donky API handles protection keys and do-
mains (did), and wraps some standard library calls (ı).
Description
(De)Initialize DonkyLib
Create/destroy child domain
ı Allocate memory
ı Protect memory
ı Deallocate memory
ı Allocate protection key
Donky API function
dk_init(), dk_deinit()
dk_domain_create(), dk_domain_free(did)
dk_mmap([did], [key], addr, len, prot ...)
dk_mprotect([did], addr, len, prot)
dk_munmap([did], addr, length)
dk_pkey_alloc(ﬂags, access)
dk_pkey_mprotect([did], addr, len, prot, key) ı Assign memory a prot. key
dk_pkey_free(key)
dk_domain_default_key(did)
dk_domain_assign_key(did, key, ﬂags, acc)
dk_domain_release_child(did)
dk_domain_register_dcall([did], callid, entry)
dk_domain_allow_caller([did], caller_did)
dk_pthread_create(thread, attr, entry, arg) ı Create new thread
dk_pthread_exit(retval)
dk_signal(sig, handler), dk_sigaction(sig, ...) ı Register signal handler
ı Free an unused prot. key
Get domain’s default key
Assign prot. key to domain
Untie child dom. from parent
Register an dcall
Allow dcalls among domains
ı Exit thread
to, e.g., tackle programming errors and their exploitation [66]
(see domain B). The versatility of Donky’s design supports a
variety of intermediary trust models as well, including shared
memory (e.g., key K5 is shared between domain B and C)
and unprotected legacy code (key K0).
On the hardware side, Donky extends the concept of pro-
tection keys with a userspace call-gate mechanism for secure
in-userspace domain transitions. This subtle design change
solves the non-trivial challenge of combining userspace pro-
tection keys with pure userspace key management. Moreover,
the hardware call gate intercepts system calls, allowing for
efﬁcient in-userspace system call ﬁltering. On the software
side, a thin userspace layer called Donky Monitor leverages
the hardware call gate for self-protection. Hence, we can
safely entrust Donky Monitor with management of domains
and protection keys and the interposition of critical system
calls. Moreover, Donky Monitor enables fast and secure do-
main switches via software-deﬁned call gates without kernel
interaction (cf. the call into the vault in Figure 1).
In Section 5.1, we prototype Donky on RISC-V and im-
plement it on top of the Ariane RISC-V CPU running on an
FPGA, and also discuss lightweight adaptations making Intel
MPK fully beneﬁt from Donky. In the following, we show
how our Donky design meets the goals of secure and efﬁcient
in-process isolation and highlight all involved components.
4 Software Design of Donky
In this section, we present the software design of Donky. At
its core lies a small handler called Donky Monitor that com-
bines the beneﬁts of a secure hardware call gate with the
performance and convenience of pure userspace policy man-
agement. Donky Monitor offers a rich software abstraction
layer towards application developers via an intuitive Donky
API. Also, the monitor safeguards domain transitions via
= pkey_alloc(0, 0);
1 // Allocate domain-private memory
2 void* pmem = mmap(NULL, 4096, PROT_READ|PROT_WRITE...);
3 // Allocate (shared) protection key+memory
4 int key
5 void* smem = mmap(NULL, 4096, PROT_READ|PROT_WRITE...);
6 pkey_mprotect(smem, 4096, PROT_READ|PROT_WRITE, key);
7 // Create child domain & assign shared key
8 int child = dk_domain_create();
9 dk_domain_assign_key(child, key, DK_KEY_COPY, 0);
10 // Register a child dcall we can invoke
11 dk_domain_register_dcall(child, 1, child_function);
12 dk_domain_allow_caller(child, current_did);
13 // Decouple child for principle of least priv.
14 dk_domain_release_child(child);
15 // Do dcall
16 child_function(args);
Listing 1: The Donky API offers intuitive and secure-by-
default management of domains and protection keys.
secure in-userspace software call gates, supports traditional
multithreading, and dynamic system call ﬁltering.
Our software design is agnostic to the underlying ISA and
works both with our full RISC-V implementation, as well as
the x86 emulation mode based on Intel MPK. DonkyLib can
sandbox code without recompilation or transformations [15,
86], and be easily integrated into existing projects.
Donky Monitor
is our trusted handler in charge of man-
aging in-process access policies in userspace and securing
domains from each other. Unlike previous work [15,35,50,99],
Donky domains are a pure userspace concept upheld by
Donky Monitor without involvement of the kernel.4
Donky Monitor is invoked for any operation on domains or
protection keys. It also safeguards domain switches via dcalls.
To protect itself from tampering, Donky Monitor encapsu-
lates its memory in a separate domain, which has access to all
other domains. To achieve security, even in the presence of
malicious code, a hardware call-gate mechanism ensures that
the monitor can only be entered at its deﬁned entry point. Fur-
thermore, triggering the hardware call gate grants the Donky
Monitor permission to update the protection key policy reg-
ister. Outside the monitor, the register is protected, which
obviates the need for binary scanning, CFI, and W⊕X [82].
Software Abstraction Layer. The Donky API is our soft-
ware abstraction layer, which expands the POSIX interface
with Donky API calls. In particular, it allows to manage do-
mains, protection keys and associated memory, and share keys
with other domains. The API also manages software call gates
to allow for cross-domain calls denoted as dcalls. Table 1 lists
our API, of which we discuss the essentials in the following.
Donky API follows a secure-by-default principle, e.g., new
domains are isolated by default, and permissions (e.g., to reg-
ister dcalls to its memory) have to be explicitly granted to
other domains. Also, each domain is automatically assigned
a unique protection key used to protect its private memory,
e.g., stack and mmap’ed memory (see Listing 1, line 2). A
4Note that Donky reuses Linux MPK support “as is” for allocating and
assigning protection keys. The kernel is not aware of domains.
USENIX Association
29th USENIX Security Symposium    1681
Figure 2: Donky cross-domain dcalls are managed purely
in userspace by Donky Monitor, entered via a hardware
call gate. Donky Monitor switches domains by switching
stacks, updating the policy register (i.e., DKRU), and en-
tering the new domain at a software-registered call gate.
protection key is owned by a domain but can be shared with
other domains. Starting in the root domain, a program can
set up child domains (line 8) with different permissions, also
for cross-domain shared memory. A domain can request new
protection keys (line 4), tag memory areas with them (line 4),
and assign them to other domains for shared memory (line 9).
Domain switches require explicit switching permission and
well-deﬁned entry points (dcalls) that prevent cross-domain
control-ﬂow diversion attacks (lines 11 and 12). Parent do-
mains may drop permissions for child domains (line 14) to
reduce attack surface, or to implement a secure software vault
(cf. Figure 1). Furthermore, Donky API distinguishes protec-
tion key ownership (e.g., for memory mapping) from mere
access permission. In line 9, the child domain is only given a
copy of the protection key without ownership. E.g., DonkyLib
uses this to make its own dynamic string tables read-only vis-
ible to others (necessary for the dynamic loader). Finally,
DonkyLib ensures that protection keys can only be freed if
they are no longer in use, preventing use-after-free [64].
Domain Transitions. Previous work on memory protection
keys either requires kernel interaction [15, 99, 99] or Write-
XOR-Execute [82] for domain switches. DonkyLib provides
fast and secure domain switches without kernel interaction.
As shown in Figure 2, dcalls are used to call a function in a
different domain and return to the caller again. A dcall invokes
the hardware call-gate mechanism to securely trap to Donky
Monitor, which handles the domain transition. Automatically
generated wrapper code hides interaction with Donky Monitor
from the application developer. This is similar to the code
generation for SGX’s enclave entry points. Moreover, the
generated wrapper code has the same type signature as the
desired dcall, such that code can transparently invoke dcalls
without reordering arguments or return values. DonkyLib
also supports nested dcalls, even across an arbitrary number
of domains (only constrained by stack size).
DonkyLib registers dcall with unique IDs and their entry
addresses to ensure trusted and unforgeable dcalls. At runtime,
the monitor is provided with the ID and the information if it
is a call or return. It can then decide if the action is allowed
and perform the switch to the target domain, which securely
switches the protection key policy register and the stack.
As shown in Figure 2, wrappers exist for both the call-
ing and the target domain. They are responsible for interact-
ing with Donky Monitor, saving and restoring non-argument
registers before and after a dcall, as well as optionally wip-
ing registers. This ensures integrity and conﬁdentiality of
CPU registers across domain transitions. We currently pro-
vide macros to auto-generate wrapper code for C functions,
and a C++ template class for wrapping C++ member func-
tions in a dcall. The C++ template class furthermore catches
uncaught exceptions in the target domain, sanitizes them to
avoid information leakage, and re-throws them in the calling
domain. Our wrappers support efﬁcient argument passing via
CPU registers similar to the system call interface. Large data
structures can be passed across domains via shared memory.
Tools such as Intel SGX Edger8r [21] could be repurposed
for automated copying of such data structures across dcalls.
Multithreading. Donky natively supports POSIX threads.
DonkyLib assigns threads to the domain that creates them.
Each thread executes in exactly one domain at any point
in time. It can switch domains via dcalls. Domains have
private user stacks per thread, allocated lazily on ﬁrst use. For
example, in Figure 2, domain A has three threads, of which
the second does a dcall. Since domain B was never entered
before, Donky Monitor allocates a new stack for this thread.
Each thread gets assigned a separate exception stack, which
is protected by Donky Monitor (cf. Figure 2). When invoked,
DonkyLib immediately switches to the exception stack in
low-level assembler. This ensures that multiple threads can
call into DonkyLib. Donky Monitor stores critical thread data
in a protected thread-local storage (TLS) area, which we allo-
cate page-aligned in the static TLS and assign it the private
protection key of Donky Monitor.
Dynamic System Call Filtering. Controlling system calls
is essential for realizing sandboxed environments. Prior work
either deﬁnes system call protection as an orthogonal prob-
lem [35] or demands intrusive changes to the kernel [99].
We ﬁlter system calls entirely in userspace using per-
domain rules. Compared to kernel ﬁlters, our approach of-
fers key advantages: First, we allow fully dynamic ﬁlter rules
that can be expressed as normal program ﬂow, as opposed
to seccomp [47] and eBPF [25]. Appendix A gives an ex-
ample. Second, we interpose relevant library calls and, thus,
can ﬁlter at a higher abstraction level.5 For example, we in-
terpose pthread_create, while only blacklisting the under-
lying clone system call. Third, userspace ﬁltering reduces
complexity and, thus, also the attack surface of the kernel.
Library interposition is only a convenience, not a security
feature. If a malicious domain bypasses it (e.g., by issuing a
system call), an exception is raised. We discuss an appropriate
hardware and a software mechanism in Section 5.1.
5We interpose functions marked with ı in Table 1 via preloading (i.e.,
LD_PRELOAD, dlsym) or rewriting symbols with objcopy.
1682    29th USENIX Security Symposium
USENIX Association
0
48
V R W X U G A D RSW
Physical Page Number
10-bit Protection Key
54
15
63
64
63
M
WD
33
32
44
33