**伪随机数发生器（PRNG）**
获得这46个字节。实际上，这意味着使用操作系统提供的PRNG，例如`/dev/urandom`。然后，使用服务器的公共和共享对此Pre-Master密钥进行加密，以便服务器稍后可以使用它来创建 **主密钥** 。
但是，在Github的情况下，如上所述，Diffie-Hellman算法用于密钥交换。这里的情况略有不同。服务器立即生成一对DH私钥 -公钥。然后，与客户共享公钥。这是如上所述的"服务器密钥交换消息( Server Key
Exchange)"。作为响应，客户端还将创建DH密钥对，并通过客户端密钥交换消息与服务器共享公钥，如下所示。
您可以看到共享的客户端公钥。现在，如果您了解Diffie-Hellman算法的工作原理，您就知道客户端和服务器可以从这些共享公钥到达公共密钥。新生成的密钥称为Pre-Master密钥。
使用Diffie
Hellman算法进行TLS密钥交换具有优势。客户端和服务器都为每个新会话生成一个新密钥对。一旦计算出预主密钥，将立即删除客户端和服务器的私钥。这意味着私钥永远不会被窃取，确保[完美的前向保密](https://en.wikipedia.org/wiki/Perfect_forward_secrecy)。
## 客户端密钥交换
我们已经在上面讨论过，客户端的DH公钥通过客户端密钥交换消息共享给服务器。但是如果使用RSA，则客户端将如上所述通过其自己计算预主密钥，使用服务器的公钥（RSA公钥）对其进行加密，并通过客户端密钥交换消息将其发送回服务器。然后，服务器可以使用其私钥解密它。无论算法是什么，此时[客户端和服务器都达到了共同的Pre-Master Secert](https://security.stackexchange.com/questions/63971/how-is-the-premaster-secret-used-in-tls-generated) 。完成此操作后，客户端将发送Change Cipher Spec
消息，如下所示。
让我们往下走，看看如何在主密钥从预备主密钥来计算。
### 如何计算主秘钥
现在客户端和服务器都有哪些随机数据呢？根据[RFC
5346](https://tools.ietf.org/html/rfc5246#section-8.1)标准，在问候消息期间客户端和服务器共享的预主密钥和随机值（还记得吗？）都会使用PRF（伪随机函数）产生的值来计算主密钥。
    master_secret = PRF（pre_master_secret，“master secret”，ClientHello.random + ServerHello.random）[0..47];
这里，
    pre_master_secret - 双方计算的48字节Pre-Master密码。
    “master secret” - 它只是一个使用ASCII字节的字符串。
    ClientHello.random - 客户端hello中共享的随机值
    ServerHello.random - 服务器hello中共享的随机值。
主密钥的大小共48个字节，好吧，到目前为止还不是太乱。双方都可以使用主密钥加密数据并来回发送，确实如此，但程序还没结束。你认为[双方使用相同的秘钥](https://crypto.stackexchange.com/questions/2878/separate-read-and-write-keys-in-tls-key-material)是个好办法吗？当然不是！TLS为客户端和服务器分配了单独的密钥，它们都来自主密钥本身，换句话说，主密钥不直接用于加密数据，而是将单独的加密密钥用于客户端和服务器。由于双方都有两个密钥，服务器用其密钥加密的数据可以由客户端轻松解密，反之亦然。
还没完，TLS还具有用于对称密钥加密的附加安全机制。
### 消息验证代码（MAC）和TLS数据完整性
窃听者可以对传输中的加密数据进行两种可能的攻击：尝试解密数据或尝试修改数据。只要密钥安全，我们就可以认为解密基本上是不可能的，但如果是修改数据呢？客户端和服务器是怎么知道攻击者没有修改过数据呢？如上所述，TLS不仅仅是加密数据，还可以保护数据，使其免受未检测到的修改，换句话说，TLS可以检查数据的完整性。让我们看看它是怎么做到的。
当服务器或客户端使用主密钥加密数据时，它还会计算明文数据的校验和（哈希值），这个校验和称为 **消息验证代码（MAC）**
。然后在发送之前将MAC包含在加密数据中。密钥用于从数据中生成MAC，以确保传输过程中攻击者无法从数据中生成相同的MAC，故而MAC被称为HMAC（哈希消息认证码）。另一方面，在接收到消息时，解密器将MAC与明文分开，然后用它的密钥计算明文的校验和，并将其与接收到的MAC进行比较，如果匹配，那我们就可以得出结论：数据在传输过程中没有被篡改。
客户端和服务器必须使用相同的散列算法来创建以及验证MAC，还记得Github同意的密码套件的最后一部分吗？  
`TLS_ECDHE_ECDSA_WITH_AES_128_GCM_ SHA256`。即SHA256
是用于处理HMAC的哈希函数，为了提高安全性，客户端和服务器使用MAC密钥。让我们看看这些是什么。
### MAC密钥和IV密钥
根据要求，有4个密钥用于加密和验证每个消息的完整性，他们是：
>   * 客户端写入加密密钥：客户端用赖加密数据，服务器用来解密数据。
>   * 服务器写入加密密钥：服务器用来加密数据，客户端用来解密数据。
>   * 客户端写入MAC密钥：客户端用来创建MAC，服务器用来验证MAC。
>   * 服务器写入MAC密钥：服务器用来创建MAC，客户端用来验证MAC。
>
这些密钥块由主密钥上的相同的PRF反复地生成，直至密钥有了足够的字节。
    key_block = PRF（SecurityParameters.master_secret，“密钥扩展”，SecurityParameters.server_random + SecurityParameters.client_random）;
如您所见，除了客户端 -服务器随机值和字符串“密钥扩展”之外，主密钥还用来增加密钥的平均信息量。PRF可以生成任意长度的密钥，这点是很有用的，因为默认情况下不同的散列函数具有不同的长度。在我们的例子中用的是SHA256，它是256位，但MD5的默认长度为128位。
除此之外，我们知道我们使用的AES和GCM算法是一种分组密码，它需要一组比特来作为初始化向量（IV）。在讨论密码套件时，我们已经提到IV用于改善AES加密的平均信息量，换句话说，当多次加密同一文件时，IV能够生成不同的密文，这些随机的字节也由相同的PRF生成，并且被称为客户端写入IV
和服务器写入IV ，术语是自解释的。我不会对IV的细节再进行更多讲解，因为它是一个很大的主题，超出了本文的范围。
### 生成测试数据
现在双方都有了加密密钥，我们准备加密，但是在将TLS放到应用层之前，我们需要像每个进程一样来测试并验证客户端加密数据是否可以由服务器解密，反之亦然。为此，客户端将使用伪随机函数（PRF）计算12字节的[verify_data](https://crypto.stackexchange.com/questions/34754/what-does-the-tls-1-2-client-finished-message-contain/34792)，如下所示。
    verify_data = PRF(master_secret, "client finished", MD5(handshake_messages) + SHA-1(handshake_messages) ) [12]
其中handshake_messages
是所有握手消息的缓冲区，以上版本适用于版本1.2的TLS。版本1.2略有变化，即verify_data的长度取决于密码套件而不总是12字节，任何未明确指定verify_data_length的密码套件都等于12。此外，伪随机函数（PRF）中的MD5
/ SHA-1组合具有已被密码套件指定的PRF替换。所以根据最新规范，
    Verify_data = PRF(master_secret, finished_label, Hash(handshake_messages)) [0..verify_data_length-1];
因此我们有测试数据，用密钥和算法来加密测试数据。客户端所需要做的就是用客户端加密密钥（或简称客户端写入密钥）使用AES算法加密测试数据，如上所述还得计算HMAC，客户端获取结果并添加记录头字节“0x14”表明“已完成”，再通过客户端生成消息并且发送到服务器。这是由实体和客户端发送的最后一次握手消息之间协商的算法和密钥保护的第一条消息。由于消息是完全加密的，因此WireShark只会看到加密的内容，并通过名称为加密握手的消息来调用完成的握手信息，如下所示。
### 验证磋商
服务器处理过程也几乎相同。它发出一个Change Cipher Spec ，然后发送一条包含所有握手消息的 **已完成信息**
。更改标记在该服务器切换到新协商的加密套件和键点的密码SPEC消息，然后再加密后续客户端的记录。除此之外，服务器的 **完成消息** 将包含对客户端的
**完成消息**
进行解密的版本，一旦客户端收到此数据，它将使用服务器写入密钥对其进行解密。故而这就向客户证明了服务器能够成功解密我们的消息。KABOOM！我们完成了TLS握手。
所有的加密都是基于协商的算法。在我们的例子中，算法是AES_128_GCM，这里没有必要进行进一步的解释，因为当涉及到其他网站时，服务器指定的算法可能会有所不同。如果您有兴趣了解这些算法的工作原理，[维基百科有一个列表](https://en.wikipedia.org/wiki/Cipher_suite#Supported_algorithms)。我也是通过TLS基础知识来学习密码学。
## 加密应用程序数据
我们现在在[应用层](https://en.wikipedia.org/wiki/OSI_model#Layer_7:_Application_Layer)。如果你有一个中等速度的互联网连接，我们只是连接了几百毫秒。想象一下，在如此短的时间内会发生多少事情？
我要求的页面是homepade aka www.github.com
。所以在Mozilla Firefox的开发者工具中显示的纯文本请求是，
    GET https://github.com/
    Host: github.com
    User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:61.0) Gecko/20100101 Firefox/61.0
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
    Accept-Language: en-US,en;q=0.5
    Accept-Encoding: gzip, deflate, br
    Connection: keep-alive
    Upgrade-Insecure-Requests: 1
    Cache-Control: max-age=0
请参阅下图：
前3个字节17 03 03 表示内容的数据类型（应用程序数据）和TLS版本（TLS 1.2）。
### 尾声
对，就是这样。我们结束了。
在本系列的下一部分中，我会添加一些在本文中无法包含的别的内容。我还发布了结构化的参考链接，这对于学习TLS中的密码学还是很有用的。  
我想在这里再写点什么。整篇文章写的都是我对TLS的理解上的兴趣，就是说我所学到/理解的一切都在这里了，或许并不完整，或许会有错误，或许各位的看法和我有出入。总之，不管是什么，欢迎您在评论区中分享，我很高兴能和诸位一起学习更多的东西！