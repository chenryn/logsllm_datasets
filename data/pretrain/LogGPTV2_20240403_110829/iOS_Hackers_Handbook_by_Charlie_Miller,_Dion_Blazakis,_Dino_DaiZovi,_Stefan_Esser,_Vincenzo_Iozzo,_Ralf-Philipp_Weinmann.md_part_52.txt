inside, 79–80 Quick Look fuzzing, 153–154
environment variables, 191 fi le protection classes, 48–51
ETSI (European Telecommunications fi le transfer service, 305–306
Standards Institute), 329 FileFuzz, 145
bbiinnddeexx..iinndddd 337744 44//1166//22001122 55::4400::5577 PPMM
Index n F–G 375
fi lesystem Fuzzing for Software Security Testing and
application stashing, 307 Quality Assurance (Takanen, DeMott,
jailbreaking, 303–304 and Miller), 140
fi lter operations, 126–129 fuzzing iOS applications
fi ltering IOKit drivers, 268 fuzzing Safari, 144–148
fi rmware fuzzing with simulator, 155–158
exploitation, 348 how it works, 139–141
loading images in IDA Pro, 342–343 MobileSafari, 158–160
obtaining and extracting, 343–344 PDF fuzzing, 148–153
fl ags. see also variables PPT fuzzing fun, 160–162
CS_KILL, 87–88 Quick Look fuzzing, 153–154
csflags, 84 recipe for, 141–144
how kernel handles JIT, 91–94 SMS. see SMS fuzzing
jailbreaking fi lesystem, 304 specifi cation-guided fuzz testing,
MAP_JIT, 95–96 348
SANDBOX_NAMED, 110–111 summary, 184
sandboxing, 118–119
G
UDH information, 167
Flake, Halvar, 347 gadgets
Flash, 6 defi ned, 230–232
flush_dcache(), 324 JailBreakMe v3, 244
focus(), 214 garbage collector
exploiting object lifetime issues with
font vulnerabilities, 149–150
@font-face, 149 TCMalloc, 211
format, 171–172 predictable heap layout, 202–204
formats, fi le. see fi le formats Pwn2Own 2010, 214
four-digit passcodes. see passcodes gateway.push.apple.com, 28
fread(), 221 Gaussian Minimum Shift Keying (GMSK),
329
free lists
GDB (GNU debugger)
allocation, 189
alloc/dealloc basics, 193
exploiting kernel heap overfl ows, 295–
entitlements, 80
296
kernel debugging, 253–256
iOS system allocator, 188
generation-based fuzzing
kernel heap zone allocator, 290–291
defi ned, 142–143
FreeBSD, 70
with Sulley, 170–175
Frequency Division Multiple Access
(FDMA), 329 gen-NodeSpray(), 214
fromCharCode(), 213 get_service_check, 179
ftp-proxy.sb, 111–112 getrlimit(), 270
function pointers Ghemawat, Sanjay, 200
dyld, 98 GID key, 249–250
Github
fi nding vulnerabilities in kernel
kernel binary, 249
extensions, 261
kernel debugging, 254
FUSE fi lesystem
kernel patching, 312
building ramdisk, 58
Global System for Telecommunications
iPhone Data Protection Tools, 56
fuzz_buffer, 145, 158 (GSM) air interface. see GSM (Global
fuzzable, 171–172 System for Telecommunications) air
Fuzzing: Brute Force Discovery (Sutton, interface
GMSK (Gaussian Minimum Shift Keying),
Greene, and Amini), 140
329
bbiinnddeexx..iinndddd 337755 44//1166//22001122 55::4400::5577 PPMM
376 Index n G–I
GNU debugger (GDB) I
alloc/dealloc basics, 193 iBoot vulnerabilities, 300–301
entitlements, 80 IDA Pro
kernel debugging, 253–256 fi ltering IOKit drivers, 268
GSM (Global System for loading fi rmware images in, 342–343
Telecommunications) air interface UDH parsing, 182
baseband attacks, 329–330 user space library implementation, 117
defi ned, 328 idaiostoolkit
SMS messages, 163 attacking IOKit drivers through external
specifi cation-guided fuzz testing, traps and methods, 268
348 fi nding vulnerabilities in kernel
gzip, 308 extensions, 261
kernel debugging, 255
H
locating system call tables, 273
hardware
reversing IOKit driver object tree, 259
iOS security basics, 2
iDEP (iOS Developer Enterprise Program),
required for OpenBTS, 331–332
31
hashes, 86–87
IEDL (Information Element Data Length),
hdiutil, 65–66
168, 170
headers
IEI (Information Element Identifi er)
NU_Allocate_Memory(), 339
other types of UDH data, 169–170
Qualcomm, 341–342
UDH information, 168
sandboxing, 110
ifnet_demux_desc, 294–295
TrustedBSD, 121–122
Iguana, 337–338
UDH. see UDH (User Data Header)
Ikee worm, 10–11
heap exploitation. see also exploitation
images, loading fi rmware in IDA Pro,
defi ned, 185
342–343
heap layout, 192
IMG3 fi le format, 249–250
kernel. see kernel heap buffer overfl ows
IMG3 FUSE fi lesystem, 58
obtaining predictable layout, 202–204
implementation
regions, 188–189
heap, 338–342
ROP and, 224
sandboxing, 116–117
tools for debugging heap manipulation
TrustedBSD, 121–123
code, 204–206
user space library, 117–121
Heap Feng Shui
incorrect passcode guesses, 52
defi ned, 195
Information Element Data (IED), 167
exploiting arithmetic vulnerabilities
Information Element Data Length (IEDL),
with TCMalloc, 206–211
168, 170
kernel heap buffer overfl ows,
Information Element Identifi er (IEI), 168,
291–293
169–170
heap implementations, 338–342
infrastructure testing, 217–218
HFS legacy volume name stack buffer
initialization, sandboxing, 110–116
overfl ow, 279–285
injection, iOS, 175–176
hfs_to_utf8(), 280
injectord, 176
history of iOS attacks, 9–14
input fuzzing, 140
hooks, AMFI, 71
installation
host_zone_info(), 293–294
AFC2 service, 305–306
Hotz, George, 252
base utilities, 306
HTTP messages, 142–143
bundle, 307–308
HTTPS, 28
confi guration profi le, 20–24
bbiinnddeexx..iinndddd 337766 44//1166//22001122 55::4400::5577 PPMM
Index n I–I 377
iPhone Data Protection Tools confi guration profi le signing, 33–34
prerequisites, 55–58 encryption. see encryption
ldid, 55 hardware/device types, 2
OpenBTS, 332–335 history of iOS attacks, 9–14
post-installation process, 309 overview, 1
Trust Profi le, 40–42 summary, 14
untethering exploit, 304 understanding architecture, 5–8
instruction sequences, ROP, 230–232 understanding threats, 3–5
IntaStock, 104 iOS system allocator
integer overfl ow, 285–286 arithmetic vulnerabilities, 195–198
interfaces learning alloc/dealloc basics,
application/baseband processor 191–195
interface, 345 object lifetime issues, 198–200
CDMA, 328 taming, 190
choosing for fuzzing MobileSafari, 158 tools, 190–191
choosing for fuzzing Safari, 144 understanding, 188–190
GSM. see GSM (Global System for IOSurface property, 13
Telecommunications) air interface Iozzo, Vincenzo, 13
International Telecommunication Union iPad
(ITU), 329–330 baseband processors, 329
invalid properties, 265–266 iOS security basics, 2
invalidate_icache(), 324 kernel structure, 250
IOConnectCall, 243 iPhone
IOConnectSetCFProperty(), 265–266 ASLR, 212
IOCTL handlers baseband, 327
fi nding vulnerabilities in kernel baseband processors, 327–329
extensions, 261–262 IEI values, 169–170
uninitialized kernel variables, 274–278 iOS security basics, 2
IOKIT, 250 jailbreaking. see jailbreaking
IOKit drivers. see kernel extensions and KDP debugging, 253
IOKit drivers kernel. see kernel
iOS kernel structure, 249–250
calling convention, 220–221 processors, 163
fuzzing applications. see fuzzing iOS sandbox kernel extension, 121
applications sandboxing, 109–110
injection, 175–177 testing infrastructure, 217–218
iOS Developer Enterprise Program (iDEP), understanding security threats, 5
31 iPhone Confi guration Utility, 18–26
iOS Developer Program, 74 iPhone Data Protection Tools
iOS in the enterprise booting ramdisk, 61–62
iPhone confi guration utility, 18–26 brute-force passcode attacks, 62–63
mobile confi guration profi les, 16–17 building ramdisk, 58–61
Mobile Device Management (MDM), decrypting data partition, 66–68
27–28 dumping data partition, 65–66
overview, 15 dumping keychain, 64–65
Profi le Manager. see Profi le Manager installation prerequisites, 55–58
summary, 45 overview, 55
iOS security ITU (International Telecommunication
App Store, 2–3 Union), 329–330
bbiinnddeexx..iinndddd 337777 44//1166//22001122 55::4400::5588 PPMM
378 Index n J–K
J ROP on iOS, 232
jailbreaking sandboxing implementation, 116–117
app stashing, 307 sandboxing in, 121
attacking user passcodes, 52 structure, 249–250
booting ramdisk, 303 understanding sandboxing, 108–109
bundle installation, 307–308 user space library implementation,
code signing and, 7 119–121
code signing enforcement and, 89 kernel exploitation
exploiting bootrom, 302–303 arbitrary memory overwrite, 269–274
fi lesystem, 303–304 kernel heap buffer overfl ows. see kernel
Ikee worm and, 10–11 heap buffer overfl ows
installing AFC2 service, 305–306 kernel stack buffer overfl ows, 279–285
installing base utilities, 306 overview, 269
installing untethering exploit, 304 summary, 296
kernel binary, 269 uninitialized kernel variables, 274–278
kernel patching. see kernel patching kernel extensions and IOKit drivers
kernel state reparation, 309–310 fi nding vulnerabilities in extensions,
overview, 297 261–264
post-installation process, 309 fi nding vulnerabilities in IOKit drivers,
privilege escalation, 310–312 264–268
redsn0w, 59 overview, 256–257
summary, 325 reversing IOKit driver object tree,
taming iOS allocator, 190 257–261
testing infrastructure, 217–218 sandboxing, 121
types of, 298–301 kernel heap buffer overfl ows
understanding process, 301–302 detecting state of heap, 293–294
why?, 298 exploiting heap buffer overfl ow, 294–296
JailBreakMe v3, 242–247 Heap Feng Shui, 291–293
jailbreakme.com, 13–14 kernel state reparation, 309–310
Java overview, 285–286
obtaining predictable heap layout, zone allocator, 286–291
202–204 kernel patching
reduced attack surface and, 6 AMFI binary trust cache, 319–320
JBIG vulnerability, 148–149 clearing the caches, 324
JBME3, 301 cs_enforcement_disable (AMFI),
JerrySIM, 346 314–315
JIT (Just-In-Time) compiling cs_enforcement_disable (kernel),
dynamic code signing, 89–94 313–314
MAP_JIT bug, 95–96 PE_i_can_has_debugger, 315–316
vm_map_enter, 317 sandbox patches, 322–324
JSCells, 202 security.mac.proc_enforce,
312–313
K task_for_pid, 320–321
kalloc(), 287–289 vm_map_enter, 316–317
KDP debugging vm_map_protect, 318–319
kernel debugging, 252–253 kernel payloads
PE_i_can_has_debugger, 315–316 clean return, 324–325
kern_invalid(), 321 kernel patching. see kernel patching
kernel kernel state reparation, 309–310
debugging, 250–256 privilege escalation, 310–312
handling JIT, 91–94 kernel state reparation, 309–310
JailBreakMe v3, 242–247 kernel_patcher.py, 60
bbiinnddeexx..iinndddd 337788 44//1166//22001122 55::4400::5588 PPMM
Index n K–M 379
kernelcache using meterpeter on iOS, 101–103
kernel debugging, 252 libSystem
prelinked kernel extensions, 256–257 sandboxing, 108–109
kernelcache.release.*, 249 user space library implementation, 117
kext_start, 122 Libtiff, 9–10
keybag limera1n
brute-force passcode attacks, 62–63 exploiting bootrom, 300, 302–303
decrypting data partition, 66–67 kernel debugging, 252
keychain tethered jailbreaks, 298
brute-force passcode attacks, 62–63 link register (LR). see LR (link register)
data protection, 48 Lion Server Profi le Manager. see Profi le
decrypting data partition, 67 Manager
dumping, 64–65 LLB (Low-Level-Bootloader), 303
protection classes, 50 load_code_signature, 81–82
keys, device, 48–49 local stack buffer overfl ow, 348–350
kfree(), 287 local vulnerabilities, 327
kHFSMaxVolumeNameChars, 280 locationgate, 298
kMaxSize, 201 lockdownd, 305
Kornau, 230 login page, Profi le Manager, 35–36, 40
kSBXProfileNoInternet, 111 Long Term Evolution (LTE), 328
kSecAttrAccessible, 50 Low-Level-Bootloader (LLB), 303
kSecAttrAccessibleAlways, 67 LR (link register)