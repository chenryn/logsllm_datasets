[TOC]
# 引言
本篇文章具体从代码中做到如何进行ptrace注入，为实现将外挂模块注入到游戏进程中破解手游2048做准备
# 技术概述
主要通过系统调用函数ptrace的功能：
  1. 通过shellcode注入模块到远程进程中
  2. 利用ptrace远程调用dlopen/dlsym将动态链接库注入到远程进程中并执行相应操作。
下面也是主要实现dlopen/dlsym来进行so库的注入和函数的调用
# 代码实现
**头文件** ：声明函数
    /**********************************
     *  FileName:   ptraceInject.h
     *  Decription: ptrace注入
     * ********************************/
    #include 
    #include        
    #include  
    /* 功能1：通过ptrace远程调用dlopen/dlsym方式注入模块到远程进程 */
    int inject_remote_process(pid_t pid, char *LibPath, char *FunctionName, long *FuncParameter, long NumParameter);
    /* 功能2：通过shellcode方式注入模块到远程进程*/
    int inject_remote_process_shellcode(pid_t pid, char *LibPath, char *FunctionName, long *FuncParameter, long NumParameter);
**调试用到的日志工具** ：`PrintLog.h`
    #ifndef _ANDROID_LOG_PRINT_H_
    #define _ANDROID_LOG_PRINT_H_
    #define  MAX_PATH 0x100
    #include 
    //如果不想打印日志可以注释这行宏定义
    #define IS_DEBUG
    //如果宏定义了IS_DEBUG，那么下面就会宏定义下面这些日志打印函数
    #ifdef IS_DEBUG
    #define LOG_TAG ("INJECT")
    #define LOGV(...) ((void)__android_log_print(ANDROID_LOG_VERBOSE, LOG_TAG, __VA_ARGS__))
    #define LOGD(...) ((void)__android_log_print(ANDROID_LOG_DEBUG  , LOG_TAG, __VA_ARGS__))
    #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO   , LOG_TAG, __VA_ARGS__))
    #define LOGW(...) ((void)__android_log_print(ANDROID_LOG_WARN   , LOG_TAG, __VA_ARGS__))
    #define LOGE(...) ((void)__android_log_print(ANDROID_LOG_ERROR  , LOG_TAG, __VA_ARGS__))
    #else
    #define LOGV(LOG_TAG, ...) NULL
    #define LOGD(LOG_TAG, ...) NULL
    #define LOGI(LOG_TAG, ...) NULL
    #define LOGW(LOG_TAG, ...) NULL
    #define LOGE(LOG_TAG, ...) NULL
    #endif
    #endif
**源代码** :ptraceInject.c
    /*******************************
     *  FileName: ptraceInject.c
     *  Description:       ptrace注入
     * *****************************/
    #include     
    #include     
    #include     
    #include     
    #include     
    #include     
    #include     
    #include     
    #include     
    #include     
    #include     
    #include  
    #include  
    #include 
    #define CPSR_T_MASK     ( 1u ARM_r0;
    }
    /*************************************************
     *  Description:    获取当前执行代码的地址，ARM处理器下存放在ARM_pc中
     *  Input:          regs存储远程进程当前的寄存器值
     *  Return:         在ARM处理器下返回pc寄存器值
     * **********************************************/
    long ptrace_getpc(struct pt_regs * regs)    
    {       
        return regs->ARM_pc;    
    } 
    /*************************************************
     *   Description:    使用ptrace从远程进程内存中读取数据
     *   Input:          pid表示远程进程的ID，pSrcBuf表示从远程进程读取数据的内存地址
     *                   pDestBuf表示用于存储读取出数据的地址，size表示读取数据的大小
     *   Return:         返回0表示读取数据成功
     *   other:          这里的*_t类型是typedef定义一些基本类型的别名，用于跨平台。例如
     *                   uint8_t表示无符号8位也就是无符号的char类型
     * **********************************************/
    int ptrace_readdata(pid_t pid, uint8_t *pSrcBuf, uint8_t *pDestBuf, uint32_t size)
    {
        uint32_t nReadCount = 0;
        uint32_t nRemainCount = 0;
        uint8_t *pCurSrcBuf = pSrcBuf;
        uint8_t *pCurDestBuf = pDestBuf;
        long lTmpBuf = 0;
        uint32_t i = 0; 
        //每次读取4字节数据
        nReadCount = size / sizeof(long);
        nRemainCount = size % sizeof(long);
        for (i = 0; i  0 )
        {
            lTmpBuf = ptrace(PTRACE_PEEKTEXT, pid, pCurSrcBuf, 0);
            memcpy(pCurDestBuf, (char *)(&lTmpBuf), nRemainCount);
        }
        return 0;
    }
    /*************************************************
     *  Description:    使用ptrace将数据写入到远程进程空间中
     *  Input:          pid表示远程进程的ID，pWriteAddr表示写入数据到远程进程的内存地址
     *                  pWriteData用于存储写入数据的地址，size表示写入数据的大小
     *  Return:         返回0表示写入数据成功，返回-1表示写入数据失败 
     * ***********************************************/
    int ptrace_writedata(pid_t pid, uint8_t *pWriteAddr, uint8_t *pWriteData, uint32_t size)
    {
        uint32_t nWriteCount = 0;
        uint32_t nRemainCount = 0;
        uint8_t *pCurSrcBuf = pWriteData;
        uint8_t *pCurDestBuf = pWriteAddr;
        long lTmpBuf = 0;
        uint32_t i = 0;
        nWriteCount = size / sizeof(long);
        nRemainCount = size % sizeof(long);
        //数据以sizeof(long)字节大小为单位写入到远程进程内存空间中
        for (i = 0; i < nWriteCount; i ++)
        {
            memcpy((void *)(&lTmpBuf), pCurSrcBuf, sizeof(long));
            if (ptrace(PTRACE_POKETEXT, pid, pCurDestBuf, lTmpBuf) < 0)