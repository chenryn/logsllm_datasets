nary code. Static analysis is the process where the binary
assembly code is manually translated into pseudo-code writ-
ten in a high level programming language. In the dynamic
analysis phase the binary is run while a debugger is trac-
ing the actual commands which are run, and the values of
memory variables. The combined process of dynamic and
static analysis enables us to focus only on relevant functions
and better understand the meaning of variables and func-
tions. To verify our ﬁndings and demonstrate our attacks
we developed four tools:
• CaptureCryptGenRandom:
WRNG state into a ﬁle.
captures
the
current
• NextCryptGenOutputs: calculates future outputs of
the WRNG from a given state.
• PreviousCryptGenOutputs0: calculates previous out-
puts and states of the WRNG from a given state and
knowledge of the initial State and R variables (this at-
tack, and the roles of State and R, are described in
Section 3.2).
• PreviousCryptGenOutputs23: calculates previous out-
puts and states of the WRNG from a given state alone.
(This attack in described in Section 3.2. It has an over-
head of O(223).)
These tools validate our ﬁndings. We currently do not pub-
lish the tools online. They can be provided upon request.
2.2 The Structure of the Generator
The algorithm used by the generator is based on two com-
mon cryptographic primitives, the RC4 stream cipher (de-
scribed in Appendix A), and the SHA-1 hash function, which
maps arbitrary inputs to a 20 byte long output.
The main loop of the WRNG. The main loop, presented
in Figure 2.1, generates 20 bytes of output in each iteration.
The main state of the WRNG is composed of two registers, R
and State, which are updated in each iteration and are used
to calculate the output. The loop operates on data in chunks
of 20 bytes: each of the registers used in the main loop, R,
State and T, is 20 bytes long. This is also the length of the
result of the internal function call get_next_20_rc4_bytes
and of the output of SHA-1. The output is generated in
increments of 20 bytes.
1
2
3
4
5
6
7
8
9
10
11
12
13
C r y p t G e n R a n d o m ( Buffer , Len )
// output Len bytes to buffer
while ( Len >0) {
R := R ⊕ g e t _ n e x t _ 2 0 _ r c 4 _ b y t e s ()
State := State ⊕ R
T := SHA -1 ’( State )
Buffer := Buffer | T
// | denotes c o n c a t e n a t i o n
R[0..4] := T[0..4]
// copy 5 least s i g n i f i c a n t bytes
State := State + R + 1
Len := Len − 20
}
}
with new entropy gathered from the system, as is described
below.
The function is described in Figure 2.2 (this description
assumes a static variable i which is initialized to zero be-
fore the ﬁrst call). We can also imagine this function as
storing eight output streams from eight independent in-
vocations of RC4. The function holds a pointer i which
points to one of the streams, and for each stream (num-
bered i) it holds a counter ci which points to a location in
the stream (in the code of Figure 2.2 this counter is denoted
by RC4[i].accumulator). When the function is called it re-
turns the 20 bytes numbered ci to ci + 19 from the stream
pointed to by i. It then sets ci = ci + 20, and advances i in
a round-robin fashion.
g e t _ n e x t _ 2 0 _ r c 4 _ b y t e s ()
{
// if | output of RC4 stream | >= 16 Kbytes
// then refresh state
while ( RC4 [ i ]. a c c u m u l a t o r >= 16384) {
RC4 [ i ]. rekey ();
// refresh with system entropy
RC4 [ i ]. a c c u m u l a t o r = 0;
i = ( i +1) % 8;
}
result = RC4 [ i ]. p r n g _ o u t p u t (20);
// 20 byte output from i ’ th i n s t a n c e
RC4 [ i ]. a c c u m u l a t o r += 20;
i = ( i +1) % 8;
return ( result );
Figure 2.2: Function get_next_20_rc4_bytes().
Figure 2.1: The main loop of the WRNG. It has input
parameters Len, which is the number of bytes to be output,
and Buﬀer, which gets the output. All internal variables
are 20 bytes long and uninitialized. Buﬀer is assumed to be
empty and the WRNG output is concatenated to it in each
round of the loop. The function SHA-1’ is a variant of SHA-1
where the Initialization Vector (IV) is ordered diﬀerently.
It
calls an internal
The main loop uses the two variables, R and State,
to store a state.
function
get_next_20_rc4_bytes to obtain 20 bytes of pseudo-
random data, and uses them to update R and State.
It
generates 20 bytes of output by applying a variant of SHA-1
to State, and then updates State again using part of this
output and using R. (The only diﬀerence between the vari-
ant of SHA-1 used here and the standard implementation of
SHA-1 is a diﬀerent ordering of the IV vector. We therefore
use the notation SHA-1 in most of the discussion.)
The function get_next_20_rc4_bytes. The function
3 keeps a state which is composed
get_next_20_rc4_bytes
of eight instances of the RC4 stream cipher. (See Appen-
dix A for a description of RC4). In each call, the function
selects one RC4 state in a round-robin fashion, uses it to
generate 20 bytes of output, and returns this output to its
caller. In the next call it uses the next RC4 stream. After
an RC4 instance generates 16Kbytes of output it is refreshed
3This function is called NewGenRandom in Windows 2000.
We use instead the name get_next_20_rc4_bytes which de-
scribes the functionality of the function more clearly.
Initializing R and State. The WRNG does not explicitly
initialize R and State. However, as with any other stack pa-
rameter which is not initialized by the program, these vari-
ables are implicitly initialized with the latest values stored
in the memory address allocated to them. We describe in
Section 4 some analysis of the actual values with which these
variables are initialized, and note that they are highly cor-
related. We are not sure about the reason for this use of
uninitialized variables.
Initializing and refreshing each instance of RC4. All in-
stances of RC4 are initialized and refreshed by the same
mechanism, which collects system entropy and uses it to
rekey an RC4 instance. The collected system entropy is
composed of up to 3584 bytes of data from diﬀerent operat-
ing system sources. Entropy collection is synchronous and is
only done when an RC4 stream is initialized, or reaches the
16 Kbyte threshold. We list in Table 1 the diﬀerent operat-
ing system entropy sources. We were not able to see a way
to predict all 3584 bytes of these parameters by a practical
brute force attack.
The pseudocode for the state refreshment mechanism is
composed of the following stages:
• The entire 3584 bytes of collected entropy are hashed
(using a function called VeryLargeHash) to produce
an 80-byte digest. The function is implemented by a
series of SHA-1 operations, designed to ensure that a
change of a single input bit aﬀects all output bits. It
is described in the full version of this paper.
• The output of VeryLargeHash is
fed into the
RC4 algorithm as a key, and is used to encrypt
a cleartext which is read from a Windows reg-
istry key named seed (which is 80 bytes long).
This registry key is used by all
instances of the
WRNG run on the same machine and is stored at
SOFTWARE\Microsoft\Cryptography\RNG\Seed in the
HKEY_LOCAL_MACHINE directory.
• The result of the last encryption is 80 bytes long.
It is fed to another RC4 encryption as a key, and is
used to encrypt additional 256 bytes, which are read
from a Windows device driver called KSecDD. The
KSecDD device driver serves as just an additional en-
tropy source. The result is 256 bytes long.
• The result of the ﬁnal encryption is used as a key for
the RC4 instance that is used in the WRNG internal
state. This RC4 instance is initialized using the RC4
key scheduling algorithm (KSA), described in Appen-
dix A.
Initializing all RC4 instances. The WRNG uses eight in-
stances of RC4, all of which are initialized using the pro-
cedure described above. Initialization starts with the ﬁrst
call to read bytes from an instance. Note that the initializa-
tions of diﬀerent RC4 instances used by one instance of the
WRNG are run one right after the other, and therefore most
of the 3584 bytes of system parameters used for initialization
will be equal in two successive initializations.
Additional rekey calls of each of the eight RC4 instances
are made after it outputs 16 Kbytes of data. Since there are
eight RC4 instances the generator always outputs 8 × 16 =
128 KBytes of output between two rekey calls.
Scope. Windows is running one WRNG instance per
process. Therefore, two applications (e.g., Windows Word
and Internet Explorer) have two separate states. The RC4
states and auxiliary variables of a speciﬁc process reside in
DLL space which is allocated upon the ﬁrst invocation of the
Crypto API, and remains allocated until it is unloaded. The
state variables R and State, on the other hand, are stored
on the stack.
If a process has several threads, then they
all share the same RC4 states stored in the DLL space, but
each of them has its own stack, and therefore its own copy
of R and State. It is interesting to note that R and State
are never explicitly initialized, and instead are initialized
with the last values that are stored in the stack locations
allocated to them. We will describe in Section 4 an analy-
sis which shows that there is correlation between the states
used in diﬀerent instances of the WRNG.
Scoping is both good and bad. It separates between two
processes. Therefore breaking one WRNG, or learning its
state, does not aﬀect applications using another WRNG. On
the downside, the fact that there is only one consumer per
WRNG, together with the very long period between rekeys,
make it very likely that the WRNG state will rarely be re-
freshed.
Implementation in user mode. The WRNG is running in
user mode, rather than in the kernel. A kernel based imple-
mentation would have kept the internal state of the WRNG
hidden from applications, whereas a user mode implementa-
tion enables each process to access the state of the WRNG
instance assigned to it.
3. ANALYSIS I: CRYPTANALYTIC
ATTACKS
We demonstrate here attacks on the backward security
and forward security of the generator. Namely, show how
an adversary that obtains the state of the WRNG (i.e., the
values of the variables R and State and the states of the eight
RC4 registers) is able to compute future and past states and
outputs of the generator. Computing future states is easy,
as is computing past states if the adversary knows the initial
values of the variables State and R. We also show two attacks
which compute previous states without knowledge of the
initial values of State and R. The computational overhead
of these two attacks is 240 and 223, respectively.
The attacks we describe can be applied by an adversary
which learns the state of the generator. This is a very rel-
evant threat for several reasons. First, new buﬀer overﬂow
attacks are found each week. These attacks enable an ad-
versary to capture the memory space of a certain process or
of the entire computer system. Second, since the WRNG
runs in user mode a malicious user running an application
can learn the WRNG state without violating any security
privileges (this happens since the WRNG memory space is
not blocked from that user).
3.1 Attack on Backward Security
Suppose that an adversary learns the state of the WRNG
at a speciﬁc time. The next state of the WRNG, as well as
its output, are a deterministic function of this data. The
adversary can therefore easily compute the generator’s out-
put and its next state, using a simulation of the generator’s
algorithm (similar to the one we constructed). The adver-
sary can then compute the following output and state of the
simulator, as a function of the state it just computed.
It
can continue doing so until the next refresh of the generator
using system entropy.
3.2 Attacks on Forward Security
The WRNG depends on RC4 for generating streams of
pseudo-random output, which are then added to the state
of the generator. RC4 is a good stream cipher, but it does
not provide any forward security. Namely, given the current
state of an RC4 cipher it easy to compute its previous states
and previous outputs. (This process is described in Appen-
dix A. See also [4].) We use this fact to mount attacks
on the forward security of the WRNG. Suppose an adver-
sary learns the state of the generator at time t and wishes
to compute the state at time t − 1. We show here three
methods of computing this state, with an overhead of O(1),
O(240), and O(223), respectively, and where the ﬁrst attack
also assumes knowledge of the initial values of State and R.
The attack with O(223) overhead is based on observing that
State is updated using consecutive addition and exclusive-or
operations, which, up to the eﬀect of carry bits, cancel each
other.
An instant attack when the initial values of State and R
are known. Suppose that the attacker knows the initial val-
ues of the variables State and R. The attacker also knows
the current values of the eight RC4 registers. Since RC4
does not provide any forward security, the attacker can com-
pute all previous states and outputs of the RC4 registers,
until the ﬁrst invocation of the WRNG. (It can learn the
total number of invocations of the WRNG from a static
variable named stream_counter, found in a static oﬀset in
memory.) Since each state of the WRNG is a function of
the previous values of State and R and of the output of
the RC4 registers, the attacker can now compute the states
and outputs starting from the ﬁrst step and continuing until
the current time. We implemented this attack in the tool
PreviousCryptGenOutputs0.
An attack with an overhead of 240. Let us denote by Rt, St
the values of R and State just before the beginning of the
tth iteration of the main loop. (We refer here to the main
loop of the WRNG, as it is described in Figure 2.1.) Let
us denote by Rt,i, St,i the values just before the execution
of the ith line of code in the tth iteration of the main loop
(namely, Rt = Rt,4, St = St,4). Let RC t denote the out-
put of get_next_20_rc4_bytes in the tth iteration. Each of
these values is 160 bits long. Let us also denote by XL the
leftmost 120 bits of variable X, and by XR its 40 rightmost
bits.
Given Rt and St our goal is to compute Rt−1, St−1. We
also know the state of all eight RC4 registers, and since RC4
does not have any forward security we can easily compute
RC t−1. We do not assume any knowledge of the output of
the generator. We observe the following relations between
the values of R and S before and after code lines in which
they are changed:
St−1,11
Rt−1,9
= St − Rt − 1
= Rt
L | ∗40
(Where ∗40 is a 40-bit string which is unknown at this stage.)
Rt−1
St−1
= Rt−1,9 ⊕ RC t−1
= St−1,5
= (St − Rt − 1)
(cid:4)
(cid:2)(cid:3)
(cid:0)
= St−1,11 ⊕ Rt−1,9
⊕ (Rt
L | Rt−1,9
R
(cid:2)(cid:3)
Rt−1,9
(cid:0)
We also observe the following relation:
St−1,11
L and St−1
)R = SHA-1(St − Rt − 1)R