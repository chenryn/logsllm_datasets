and the recent work of Mazloom et al. on differentially-private large-
scale computation [41] are the results which are most related to ours.
They all focus on mass parallelization. These works demonstrate
experiments for functions which are different than the BFS and
MIS functions that we tested. Recall that for a dataset of 10 million
items our semi-honest and malicious protocols have a runtime of
about 91 and 200 seconds, respectively, for BFS with distance 4 and
using 16 threads.
GraphSC used two-party MPC based on Yao’s circuit and imple-
mented in Java, and therefore its performance is not competitive
with 3-party MPC. Mazloom et al. [41] use a testing environment
which is similar to ours, with 4 servers as required by their MPC
protocol. Their paper (Table 5) shows that their performance is
better by orders of magnitude compared to GraphSC and to Obliv-
Graph [40], and therefore we only compare our results to [41]. Their
method makes extensive use of parallelization, the reported run-
time results for a setting of 32 cores in parallel, with an input size
of 10 million elements is: 10 seconds for histogram computation;
and 163 seconds for computing matrix factorization.
Computing a histogram is essentially a one-step BFS on a bi-
partite graph, and is much simpler than running 4-step BFS on an
arbitrary graph. Computing matrix factorization is indeed more
complicated, and makes use of the arithmetic operations that are
supported in [41]. We can speculate that when testing the same
binary-circuit functions our results will be comparable or slightly
better than [41]. The advantage of our approach is that no infor-
mation at all is leaked, and therefore the system is more suitable
for cases with multiple invocations on the same data, or where
differentially-privacy of node degrees is insufficient. Our protocols
also require less trust, as they work with three, rather than four
parties. It should be noted that currently our protocols are lim-
ited to binary circuits and as such are not fully comparable with
arithmetice circuits.
A.4 Maximal Independent Set
The implementation of the maximal independent set protocol that is
described in Section 8 required implementing circuits for the scatter
and gather steps of that protocol, and running multiple rounds of
these steps. The basic functionalities that are computed by the
circuits are variants of the OR operation: for example, the MIS bit of
a node should be set to 1 if the OR of the “active” bits of all incoming
edges is 0 (and the node itself is still active). However, designing,
optimizing and testing the circuits was quite challenging (especially
since they had to be of log 𝑛 depth). We do not provide here the full
details of the circuits as their description is quite lengthy.
Regarding the number of rounds, the simulation we ran in Sec-
tion 8 always found the MIS in at most 6 rounds. To be on the safe
side, we ran our MPC protocol for 8 rounds for 𝑁 = 10, 000, and for
9 rounds for larger inputs. Recall that in each round of the protocol,
a node updates its MIS state based on information on all its incom-
ing edges, and also sends active/inactive messages on all outgoing
edges. This means that each protocol round is implemented using
two scatter/gather steps. The total number of these steps in our
experiments is either 16 or 18 (compared to 4 in the BFS protocol).
The results of our experiments are described in Table 5. The run
time of each phase is similar to that of the BFS protocol (Table 4).
This is quite impressive since the MIS algorithm is much more
complicated (but we managed to implement it using a small circuit).
The total runtime is larger than that of BFS, since the number of
rounds is much larger. The second from last column shows that each
round takes 10%-15% of the time it takes to initialize the protocol
(run the sort operations), as in BFS.
B LIMITS OF DIFFERENTIAL PRIVACY
The differential privacy guarantees in [40, 41] are between neigh-
boring graphs, namely graphs which have the same sets of nodes,
have the same degree in both graphs for all nodes except for one,
and for that node have degrees which differ by at most 1. (The
techniques of course satisfy the standard composition theorems for
differential privacy, and hide relations between graphs of distance
𝑑, but at the cost of scaling 𝜀 by a factor of 𝑑.)
This privacy assurance might be useful in some settings but is
less suitable if it is needed to hide more than a few local changes
between two input graphs.
Session 2D: Secure Multiparty Computation CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea626N
10,000
100,000
1,000,000
10,000,000
10,000
100,000
1,000,000
10,000,000
Init
98
625
6212
66400
574
2151
18474
136288
Round
Total
semi-honest
11
142
62
874
587
8561
6391
91963
malicious
872
2934
23928
202661
80
235
1760
21576
round
/ init
0.11
0.10
0.09
0.10
0.14
0.11
0.10
0.16
(gather
+scatter)
/ total
0.15
0.05
0.03
0.03
0.27
0.10
0.03
0.03
Table 4: The run time (msec) of the init phase and of a mes-
sage passing round for BFS with max degree 1023 and using
16 threads; the total run time; the fraction of time taken by
a round vs. the initialization phase; and the fraction of time
taken by all gather and scatter operations vs. total time.
N
Init
10,000
100,000
1,000,000
10,000,000
128
642
6016
65440
Round
Total
semi-honest
15
72
597
6345
376
1986
17150
186405
malicious
2317
6698
51453
102
257
1850
687
2127
18875
10,000
100,000
1,000,000
Table 5: Maximal Independent Set: The run time (msec) of
the init phase and of a message passing round for max degree
1023 and using 16 threads; the total run time; and the fraction
of time taken by a round vs. the initialization phase.
0.15
0.12
0.10
round
/ init
0.12
0.11
0.10
0.10
no.rounds
2 × 8
2 × 9
2 × 9
2 × 9
2 × 8
2 × 9
2 × 9
The cost of obtaining the differential privacy guarantee depends
on the topology of the graph. While it might be reasonable for
graphs with high degrees, it seems prohibitive if the average de-
gree of a node is small. The following analysis shows a reasonable
example where the number of edges is expanded by a factor of
more than 10: For a security parameter 𝛿 = 2−40, the number of
dummy edges is expected, based on [41] p.22, to be 𝛼|𝑉 |, where
𝛼 > −40−log(1/2−𝑝/4)−log(|𝑉 |)
and (1 − 𝑝) = 𝑒−𝜀. Setting 𝜀 = 0.3 re-
sults in 𝑝 = 0.26, and 𝛼 > −40+1.2−log(|𝑉 |)
. Therefore, for |𝑉 | = 212
−0.43
we have 𝛼 = 118, and for |𝑉 | = 223 we have 𝛼 = 143. When the
average degree is very high, adding this number of edges per node
does not increase the size of the graph by much. However, when the
average degree is small, say 10, then this addition of dummy edges
increases the graph by a large factor ((143|𝑉 |+|𝑉 |)/(10|𝑉 |+𝑉) ≈ 13
in this example). Even setting 𝛿 = 2−20 keeps this graph expansion
factor around 10.
log(1−𝑝)
C ANALYSIS OF THE SET EQUALITY
PROTOCOL
The analysis begins with the toy test which uses just a single addi-
tional column (𝜅 = 1).
To simplify the notation, define the table ˆ𝑇 ′ as a permutation
of the rows of 𝑇 ′, that moves the rows of 𝑇 ′ as much as possible
to be in the same locations as the corresponding rows in 𝑇 . More
accurately, for each row index 𝑖 ∈ [1, 𝑛] define a “match” as the
case where row 𝑖 in 𝑇 is equal to row 𝑖 in ˆ𝑇 ′. The table ˆ𝑇 ′ is a
permutation of the rows of 𝑇 ′ which maximizes the number of
matches. Use the notation 𝑇 ⊕ = 𝑇 ⊕ ˆ𝑇 ′. If 𝑇 ′ is a permutation of
the rows of 𝑇 , then 𝑇 = ˆ𝑇 ′, and 𝑇 ⊕ is the zero table. Otherwise
there are some locations in 𝑇 ⊕ which are equal to 1. (In the case of
a correct shuffle in our protocol, the permutation that maps 𝑇 ′ to
ˆ𝑇 ′ is exactly the inverse of the permutation that was applied to 𝑇 .)
𝑖,1 · (𝑚′
Claim 5. Let 𝑇 be different than ˆ𝑇 ′. Assume that there is no change
in the 𝑅 vector between 𝑇 and ˆ𝑇 ′, that the 𝑅 vector is a shared vector
and that 𝐶 is a public vector, and both are chosen uniformly at random
independently of 𝑇 and 𝑇 ′. Then the test identifies the difference (i.e.
succeeds) with probability of at least 1/4.
Proof: The test essentially computes𝑛
𝑖=1 𝑟′
𝑗=1 𝑇 ⊕
𝑖,𝑗 · 𝑐 𝑗)
and verifies that this result is equal to zero.
Assume that 𝑇 is different from ˆ𝑇 ′ and therefore 𝑇 ⊕ is not zero.
Consider any row of 𝑇 ⊕ which has a non zero value. Then the
inner product of that row with the 𝐶 vector is 1 with probability
1/2. Namely, with probability of at least 1/2, there is at least one
non-zero entry in the row-hash vector. Assume that this is the case,
and assume wlog that the last entry in the row-hash vector, i,e, the
entry corresponding to row 𝑛, is different than zero.
The 𝑅 vector is chosen at random independently of ˆ𝑇 ′. Assume
wlog that the bit 𝑟1,𝑛 is chosen last. If the inner product of the first
𝑛− 1 bits of the row-hash vector and the 𝑅 vector is 0, then the final
inner product is 1 (and the cheating is detected) if 𝑟1,𝑛 = 1, which
happens with probability 1/2. Otherwise (the inner product of the
first 𝑛 − 1 bits of the row-hash vector and the 𝑅 vector is 1) the final
inner product is 1 if 𝑟1,𝑛 = 0, which also happens with probability
1/2. Since this is conditioned on at least one entry of the row-hash
vector being 1, the total probability that the inner product is 1 is at
least 1/4. This concludes the proof of Claim 5.
The effect of flipping bits in the 𝑅 vector When we run the
semi-honest secure protocol, an adversary can flip any subset of
the bits in the table, including bits in the 𝑅 vector. Indeed, this is the
only attack that the adversary can do, as the semi-honest secure
protocol is known to be secure up to additive attacks (see Section 5
and [13]). The following claim shows that flipping the bits of the 𝑅
vector does not help the adversary.
Let 𝑇 be the original table (of size 𝑛 × 𝑚), and 𝑅 be the random
column added to it (of size 𝑛×1). When generating 𝑇 ′ the adversary
might have flipped bits in the inputs. Namely, the set of rows might
have changed from the rows of 𝑇 to a set 𝑇 + Δ (where Δ is a 𝑛 × 𝑚
table different than zero), and the corresponding 𝑅 vector might
have been changed to 𝑅 + 𝜀 (where 𝜀 is a 𝑛 × 1 table).
Session 2D: Secure Multiparty Computation CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea627Let 𝐶 = (𝑐1, . . . , 𝑐𝑚) be the 𝐶 vector. The test verifies (modulo 2)
that ∑︁
∑︁
∑︁
(𝑅𝑖 + 𝜀𝑖)∑︁