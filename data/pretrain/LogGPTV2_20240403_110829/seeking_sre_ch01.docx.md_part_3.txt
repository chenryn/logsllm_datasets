中唯一一个能够看到所有故障的团队，无论是外部、内部、CDN【内容交付网络】、网络等，因此有责任确定哪些团队要与另一些团队联系并一同解决这类问题。
**大卫：**将你的团队视为 Netflix
的神经系统，那么你们有什么流程在整个组织中传播信息，以便某一部分的人可以从其他部分学习（无论是做某事的好方法，还是避免重复不良实践）？
**Coburn：**基于我们想要解决的运维风险方面的具体缺陷，我们有几个渠道来应用最佳实践：不断实现运维工具（例如，Spinnaker、金丝雀分析）的必要增强，实现无缝将其推介给所有团队，或者通过每月发布的可用性新闻稿对建议的更改进行回应。在某些情况下，建议的最佳实践是通过（之前使用的工具的一个）扩展的发布来推送的。
这两种机制都是帮助以聚合方式提高可用性的方法。
我们纳入工具的一些更改可能应该算是"护栏"。一个具体示例是添加到 Spinnaker
的部署中的附加步骤，用于检测某人尝试删除所有群集容量（但同时仍存在很大服务流量）。此护栏有助于提醒人们注意一个可能危险的操作，而工程师没有意识到这种行动有风险。这是一种"及时"提供上下文的方法。
**David：**假如有人使用你们的工具（如
Hystrix），理论上算是一种完全有效的使用方式，但经验表明这种用法会产生负面结果，有没有出现过这样的情况呢？没有人想要更改工具的设计，因为该工具很好。一旦你吸取了这个教训，你如何通过组织传播这样的经验？听起来可用性报告就是其中一个例子？
**科本：**没错。可用性报告实际上很难解读。收到后，你需要在报表上单击三到四个关键（且往往很隐蔽的）位置，以便获取可操作的数据。这是一个相当困难的用户体验，因此我们创建了一个四分钟的视频，作为报表使用的入门教程。当人们收到报告时，其中会说请观看这个四分钟的视频，以了解如何使用这份报告。它并没有完全扫平一切障碍，但肯定提高了工程师花时间使用这份报告的可操作性。
**David：**让我们来谈谈上下文与控制的限制。你认为基于上下文的系统在产品和指标比
Netflix 更复杂的环境中工作吗？是 Netflix
产品的简单性导致上下文的模式更适合吗？
**Coburn：**首先，我要指出，总体而言，Netflix
服务（就其交互部分而言）与在其他地方可能找到的一样复杂。有许多因素使得上下文模式在
Netflix
与其他公司相比更为广泛有效。这直接关系到工程组织和我们服务结构的复杂性。以下是一些关键因素：
-   我们让所有的工程师坐在一个位置。因此共同的工程原则很容易被工程师群体接纳，对最佳实践的其他知识也有着同样的群体接纳度。
-   在给定时间，我们有一个在给定区域运行的软件主导版本。此外，我们还可以控制该软件堆栈，并且可以随时更改它（不必发送给客户，设备应用程序除外）。
-   我们有一个与生命安全无关的服务，即使崩溃了也不会有严重后果。
-   我们有一点点的自由承压空间，我们有一个 SRE
    团队谁愿意承担责任，如果可用性变得更糟，他们会说"我的工作就是修复它。"
对于最后一个要点，可靠性组织若不能完全控制影响可用性的因素，然他们负责也确实会很困难。很多人不愿意说，但其实他们不一定有绝对控制，而这就是他们无法负责的原因。
在需要将产品运送到现场的公司（例如，自动驾驶汽车软件）中，此模型可能不起作用。车子不能开的时候，你肯定不想等待，然后说"哇，看那辆车开到路外面去了。那是个错误。请问谁写的代码？好吧，让我们期望明年能开的更好。"相反，我们所处的市场为利用上下文控制留出了相当大的空间，因为我们不会危及生命，而且可以快速改变产品环境。话虽如此，我认为你可以看到的情况是，当公司开始从上下文开始扩展，但随着时间的推移和规模化的压力，根据客户需求和可靠性的需要，会更多的倾向于控制的管理模式。这类事情总是这样的，管理模式就这样一点一滴的从一个模式转到了另一个模式。
**David：**过去，我们从工程投资的角度讨论了上下文与控制模式。你能多说一点吗？
**Coburn：**我认为四个主要维度：创新速度、安全性、可靠性和效率（基础设施/运维）。根据你的组织结构，可以拥有一个或多个维度。即使您你有给定维度的自主权，在你自己的空间中做出的决策也会对其他人产生重大影响。我的处境是，我至少掌握两个维度：可靠性和效率，因为我也管理着容量规划。当我想到要多么努力地推动团队改进这些维度时，要同时尽量减少对其他维度的拖累（创新速度、安全性）。保持这种思维模式，使我们能够（作为一个
SRE 组织）在对其他工程团队提出建议时考虑更加周到。
在某种程度上，我们还做出明确的权衡，以改进一个维度，而代价是牺牲另一个方面。我们遇到这样的情况，为了提高创新率或可靠性，我们允许特定微服务以极低效率运行（通过超高资源配置来补足）。如果我们的服务（因为突发的流量高峰）需要两倍的配置余量才能正常运行，我也不会太计较这样的配置会导致每年多消耗几万美金的费用。因为这样的牺牲不会很长久，迟早会有一个大的故障来袭，并导致我们重新设计服务的可靠性。
**David：**好的，那么如何将其连接到上下文与控制？
**Coburn：**以控制为例，假设我确实夺走了某人发布代码的能力，因为我需要提高可靠性的这一维度。一方面，它避免了近期的故障，但也同时减缓了创新。其实应该尝试提供更多的上下文，以避免强行牺牲其他维度，并让服务的所有者来决定要优化的维度，同时照顾到他们当前的需求。相反，控制对其他维度具有更多的大是大非的影响。
**David：**上下文对其中任何一个维度有积极或消极的影响吗？控制显然可以做到这点，正如你刚才提到的，但上下文呢？
**Coburn：**上下文确实有强大的提升力，也可以观察到，至少在我们的案例中是这样。在过去五年中，我们的客户数量增长了六倍，我们的播放时间增长了六倍，我们的可用性每年都在提高，我们的团队数量每年都在增加，我们的创新速度每年都在提高。因为我们不是通过控制方面的改进来提高可用性，而是主要通过改进平台（且平台提供更多的上下文），这样工程师在运维方面花的时间就更少了，而这些本来不是他们的职责要求的（例如确定如何配置管道以跨区域交错推送）。
**David：**如果控制能对这些维度产生负面影响，上下文能有类似的负面影响吗？
**Coburn：**也可能会有，但是我还没有注意到，没有发现哪些提供给团队的上下文会导致不希望有的行为（并导致可用性的降低）。可能带来风险的一个领域是基础架构的效率。尽管我们为团队提供了详细的基础架构成本的上下文，但是我们没有（或没有强制）对团队实施云成本预算。举例来说，工程师只需部署所需的任何基础架构，并每月收到一份成本报告，即可为他们提供有关成本的信息。在这种上下文的推动下，一个团队可能选择使用较旧（且可靠性较差）的实例类型来尝试减低成本，而这种实例类型当然要便宜得多。然后，由于性能不佳和可靠性较差的实例（通常因为计算能力不足）而导致故障。在这种情况下，我们提供了关于成本的上下文，工程师决定要对效率展开过度追求，结果可靠性受到了打击。我们决定与团队进行互动，强调我们宁愿效率低下也不愿牺牲可靠性，这使我们在明确关注的领域优先次序方面保持一致。                              
# 编者介绍
Coburn Watson 目前是 Microsoft
生产基础结构工程组织的合作伙伴。他最近结束了在 Netflix
的六年冒险之旅，负责站点可靠性、性能工程和云基础设施的组织。他在技术领域拥有
20
多年的经验，涉及系统管理、应用程序开发、大规模站点可靠性工程和性能管理。