queue_not_found_error(QName);
{ok,#amqqueue{pid = QPid }}->
---
## Page 284
262
第12章聪明的Rabbit：扩展RabbitMQ
Cached = get_msgs_from_cache(xName),
②转换消息
Msgs =msgs_from_content(xName,Cached),
deliver_messages (QPid, Msgs)
end,
ok.
每当交换器添加一个绑定时，函数add_binding/3就会被RabbitMQ调用，
让你可以对绑定做些额外的操作。对于该示例来说，一个新的绑定意味着一个新的
客户端连接到该交换器上，因此，这时就该将Mnesia缓存的消息投递给客户端了。
从本质上来讲，之前所有的代码都是为了支持该函数。为了将消息投递给队列，你
需要队列的 Pid，即进程ID（processID）。Pid就像是队列的地址，你可以将消
息（是Erlang 消息，而非AMQP 消息）发送到该地址。你可以使用队列Pid，通
过将消息委托给队列模块来投递给消费者。记住在RabbitMQ中，消费者订阅的是
队列，因此在交换器层面是没有消费者的概念的。为了获取队列Pid，你调用帮
助函数rabbit_amqqueue：lookup/1，传人队列名称作为参数，并且要么返回
Pid，要么返回包含原子（error，not_found}的元组。如果RabbitMQ无法找到
你需要的队列的话，那么通过调用函数queue_not_found_error/1来返回一个
协议错误。如果你得到了QPid的话，那么获取缓存中的消息内容，并通过调用函
数msgs_from_content/2将内容转换成真正的AMQP消息，以AMQP消息列表
的形式返回。最后，你将这些消息传递给函数deliver_messages/2，由它来迭
代消息列表并将每一条消息投递到目的队列。在处理完消息投递之后，你将向服务
器返回原子ok，以表示绑定操作过程成功了。
让我们看一下之前代码中使用的帮助函数，以对整个实现有充分的了解。
清单 12.10 rabbit_exchange_type_recent_history.erl
queue_not_found_error(QName)->
---
## Page 285
12.3创建自定义交换器模块
263
lists:map(
创建一条3
②创建消
fun(Content）->
息属性
AMQP消息
{Props,Payload) =rabbit_basic:from_content(Content),
和内容
rabbit_basic:message(XName,>,Props,Payload)
end,Cached).
deliver_messages(Queue,Msgs)->
4将消息打包成
lists:map(
一条“投递
fun (Msg）->
(delivery)
Delivery = rabbit_basic:delivery(false,false,Msg, undefined),>表
示°。为了完成这个操作，你需要调用函数rabbit_basic：message/43，并传递
消息属性和载荷，以获得一条完整的AMQP消息。
最后一点同样重要，帮助函数deliver_messages/2接收队列Pid和消息列
表作为参数，并对列表做映射，将每条消息投递给队列。函数首先要做的是通过调
用函数rabbit_basic：delivery/4将消息包装为一条投递（delivery）4。该函
数接收四个参数：第一个参数说明了消息投递是否必须，这里设置为false；第二
个参数说明该消息是非紧急的；第三个参数就是实际的消息；最后一个参数是消息
序列ID，在这里未定义。在创建了消息投递之后，你最终通过调用函数rabbit
amqqueue：deliver/2将其发送给队列。该函数接收队列Pid和Delivery作为
参数5
6在Erlang中，二进制是展现字符串数据的一种高效的方式。更多有关二进制和其他Erlang数据类型的
信息，请参阅Learn You Some Erlang for Great Good—书：http://learnyousomeerlang.com/starting-out
for-real#bit-syntax:
---
## Page 286
264
第12章聪明的Rabbit：扩展RabbitMQ
12.3.3编译自定义交换器
以上代码实现了自定义交换器。如你所见，扩展RabbitMQ并添加新的交换器
类型是很容易的事。只需要遵循你想要实现的Erlangbehaviour强制的几条规则即可。
为了简化实现，你甚至可以基于fanout类型交换器来实现自己的交换器，事情变得
更简单了。让我们回顾一下你所做的一切：你重写了消息路由、队列绑定和交换器
删除，以便缓存并投递消息。为了让代码十净整洁并让函数简短，在需要写入缓存
或者从缓存中读取消息的时候，你编写了一些帮助函数来访问Mnesia。
现在让我们尝试编译代码，并让RabbitMQ与自定义交换器插件一同运行。幸
运的是，umbrella构建系统包含了一个命令，它通过自动安装插件的方式，允许你
将插件和服务器合并运行。在插件文件夹下运行下列命令：
$ make run-in-broker
当按下Enter键时，你将看到一大堆的输出。首先你的插件会被编译；并且，
如果一切正常的话，RabbitMQ就会启动。你应该能够看到如下这条消息，表示你
的插件已经启用：
Activating RabbitMQ plugins ...
2 plugins activated:
* amqp_client-0.0.0
* rabbitmq_recent_history_exchange-0.1.0-rmq
像往常一样，RabbitMQ的logo 会展现出来，并在rabbit registry启动之后，你
应该能看到如下输出：
external infrastructure ready
starting plugin registry
...done
starting auth mechanism cr-demo
...done
starting auth mechanism amqplain
...done
starting auth mechanism plain
...done
starting statistics event manager
...done
starting logging server
...done
starting exchange type direct
...done
starting exchange type fanout
...done
starting exchange type headers
...done
starting recent history exchange type: registry
...done
starting exchange type topic
...done
注意到这一行内容:starting recent history exchange type:registry...
done。这说明你的插件无缝集成到了服务器上。最后，你将留在Erlang命令行。暂
---
## Page 287
12.3创建自定义交换器模块
265
时先别输人任何东西。之后你会看到如何关闭并退出Erlang。在你编写消费者和发
布者之前，让我们来看看完整的自定义交换器模块的代码清单。
清单 12.11 rabbit_exchange_type_recent_history.erl
-module(rabbit_exchange_type_recent_history).
-include_lib("rabbit_common/include/rabbit.hrl").
-include_lib("rabbit_common/include/rabbit_exchange_type_spec.hrl").
-behaviour(rabbit_exchange_type).
-export([description/0,serialise_events/0,route/2]).
-export([validate/1,create/2,delete/3,add_binding/3,
remove_bindings/3, assert_args_equivalence/2]).
-export([setup_schema/0]).
-rabbit_boot_step({rabbit_exchange_type_rh_registry,
[{description,"recent history exchange type: registry"},
{mfa, {rabbit_registry, register,
[exchange,>,
?MODULE]}},
{requires,rabbit_registry}),
{enables,kernel_ready}]}).
-rabbit_boot_step({rabbit_exchange_type_rh_mnesia,
[{description, "recent history exchange type: mnesia"},
{mfa，{?MODULE, Setup_schema, []}},
{requires,database),
{enables,external_infrastructure}])).
-define(KEEP_NB, 20).
-define(RH_TABLE,rh_exchange_table).
-record(cached，{key,content}).
description() ->
[{name,>},
{description,>}].
serialise_events()-> false.
route(#exchange{name = XName),
#delivery{message = #basic_message{
content = Content
}）->
cache_msg(xName,Content);
rabbit_router:match_routing_key(xName,['_']).
validate(_x)-> ok.
create(_Tx,_x)-> ok.
delete(_Tx,#exchange{name=XName },_Bs)->
rabbit_misc:execute_mnesia_transaction(
fun(）->
mnesia:delete(?RH_TABLE,XName,write)
---
## Page 288
266
第12章聪明的Rabbit：扩展RabbitMQ
end),
ok.
add_binding(_Tx,#exchange{name=XName},
#binding{ destination = QName }）->
case rabbit_amqqueue:lookup(QName)of
{error,not_found}->
queue_not_found_error(QName);
{ok,#amqqueue{pid =QPid }}->
Cached = get_msgs_from_cache(xName),
Msgs = msgs_from_content(xName, Cached),
deliver_messages (QPid, Msgs)
end,
ok.
remove_bindings(_Tx,_X,_Bs）->ok.
assert_args_equivalence(x,Args)->
rabbit_exchange:assert_args_equivalence(x,Args).
setup_schema()->
case mnesia:create_table(?RH_TABLE,
[{attributes,record_info(fields,cached)},
{record_name,cached),
{type，set}l）of
{atomic，ok}->ok;
{aborted,{already_exists,?RH_TABLE}} ->ok
end.
%oprivate
cache_msg(xName,Content)->
rabbit_misc:execute_mnesia_transaction(
fun (）->
Cached =get_msgs_from_cache(xName),
store_msg(xName,Cached,Content)
end).
get_msgs_from_cache(xName)->
rabbit_misc:execute_mnesia_transaction(
fun(）->
case mnesia:read(?RH_TABLE,XName) of
[]->
[];
[#cached{key = XName,content=Cached}] ->
Cached
end
end).
store_msg(Key,Cached,Content) ->
mnesia:write(?RH_TABLE,
#cached{key
=Key;
content = [Content|lists:sublist(Cached, ?KEEP_NB-1)]},
write).
msgs_from_content(xName,Cached)->
lists:map(
---
## Page 289
12.3创建自定义交换器模块
267
fun(Content）->
(Props,Payload) = rabbit_basic:from_content(Content),
rabbit_basic:message(xName,>, Props,Payload)
end,Cached).
deliver_messages(Queue, Msgs) ->
lists:map(
fun(Msg）->
Delivery = rabbit_basic:delivery(false, false, Msg, undefined),
rabbit_amqqueue:deliver (Queue, Delivery)
end, lists:reverse(Msgs)).