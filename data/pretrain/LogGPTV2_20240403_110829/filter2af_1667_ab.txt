@RestController 不会进行View解析而是直接返回。所以这同样是修复方式。
#### 1.2.3、发现SSTI（模板注入）漏洞点
我们在审计模板注入（SSTI）漏洞时，主要查看所使用的模板引擎是否有接受用户输入的地方。主要关注xxxController层代码。  
在Controller层，我们关注两点： 1、URL路径可控。 ， 2、return内容可控。  
所谓可控，也就是接受输入。对应上面两个关注点，举例说明如下。  
**1、URL路径可控**
    @RequestMapping("/hello")
    public class HelloController {
      @RequestMapping("/whoami/{name}/{sex}")
      public String hello(@PathVariable("name") String name,
    @PathVariable("sex") String sex){
        return "Hello" + name + sex;
      }
    }
**2、return内容可控**
    @PostMapping("/getNames")
    public String getCacheNames(String fragment, ModelMap mmap)
    {
      mmap.put("cacheNames", cacheService.getCacheNames());
      return prefix + "/cache::" + fragment;
    }
视角转回到本项目。  
根据上面两个关注点，对 若依v4.2 进行了一番探索。并没有发现存在Thymeleaf模板注入漏洞点。  
但在若依v4.7.1 发现存在 return内容可控 的情况。为了学习该漏洞，下面以若依v4.7.1版本进Thymeleaf模板注入代码审计学习。  
在若依v4.7.1的
RuoYi-v4.7.1\ruoyiadmin\src\main\java\com\ruoyi\web\controller\monitor
下多了一个CacheController.java 文件。该文件下有多个地方 Return内容可控 ，如下图所示：  
简单理解：接收到 fragment 后，在return处进行了模板路径拼接。  
根据代码我们知道根路径为 /monitor/cache ，各个接口路径分别为 /getNames ， /getKeys ， /getValue 。请求方法为
POST ，请求参数均为fragment 。  
**漏洞验证：**  
Thymeleaf模板注入payload举例：
    return内容可控：
    __${new
    java.util.Scanner(T(java.lang.Runtime).getRuntime().exec("whoami").getI
    nputStream()).next()}__::.x
    URL路径可控：
    __${T(java.lang.Runtime).getRuntime().exec("touch test")}__::.x
本次漏洞验证我在Windows环境下进行的。  
注意： 若依v4.7.1 搭建部署与 若依v4.2 相同，数据库导入务必使用 sql 目录  
下的 ry_20210924.sql 和 quartz.sql 。先导入 ry_20210924.sql 。  
我们以 getKeys 接口为例，该漏洞点为 return内容可控 ，具体漏洞验证如下。  
①、正常启动项目，进入后台。我们发现在 系统监控下有个缓存监控 的功能，和代码审计发现的 CacheControlle
代码文件中功能注释一样。初步确定两者相同。  
②、访问缓存监控功能。进入后，分别点击 缓存列表 和 键名列表 旁的刷新按钮，会分别想 getNames ， getKeys 接口发送数据。如下图所示：  
访问，抓“刷新”按钮的数据包：  
③、将数据包发送到Repeater模块，在 fragment 参数后构造攻击payload为 **${new
java.util.Scanner(T(java.lang.Runtime).getRuntime().exec("calc.exe") }** ::.x
，对paylod进行URL编码后。发送数据包。响应报错，而且并没有弹出来计算 器。如下图所示：  
找了半天原因，发现 若依v4.7.1 版本使用的是 Thymeleaf3.0.12 版本。  
官方在这个版本进行了一些限制，比如使用new实例化，静态方法调用都被限制了。还有其他一些限制，详细可看
。下图为谷歌机翻，大致可以看一下  
因此，我们刚开始用的Payload是被限制了。  
经过一顿操作猛如虎，其实谷歌就能有。  
我们将Payload改造一下，如 ${T (java.lang.Runtime).getRuntime().exec("calc.exe")}
。在T和(之间多加几个空格即可。  
对Payload进行URL编码后，放入 fragment
参数中，可以看到弹出了计算器，如下图所示：(注意这里的cacheName不能为空，可以随便输入一个)  
**触发点二：/demo/form/localrefresh/task**  
在src/main/java/com/ruoyi/web/controller/demo/controller/DemoFormController.java文件中还有一个触发点：  
抓包改为POST，其实这里不编码也可以成功，${T (java.lang.Runtime).getRuntime().exec("calc.exe")}
至此，漏洞验证部分结束。  
希望大家在这基础上，进一步学习Thymeleaf模板注入漏洞。直接推荐一篇文章：  
### 1.3、 Fastjson组件漏洞
本项目使用了 Fastjson 1.2.60 ， Fastjson  ，可以理解为params字段中可以传任何类型的值在里面。如下图所示（为便于截图展示，删除了部分代码）：
③、回到 GenTaleServiceImpl.java ，查看谁调用了 validateEdit ，跳转到了IGenTaleService
第99行处，如下图所示：  
④、继续跟进 validateEdit ，跳转到了 GenController 层第142行，如下图所示：
至此，我们将这条链追踪完了。确定了功能点为代码生成处的 修改保存生成业务 ，我们主要关注 params 这个字段。
### 1.4、 SnakeYaml组件漏洞
SnakeYaml在Java中，是用于解析YAML格式的库。  
在第三方组件漏洞审计处，确定了SnakeYaml版本为1.23，被定为存在漏洞。  
事实上，SnakeYaml几乎全版本都可被反序列化漏洞利用。
#### 1.4.1、漏洞简述
SnakeYaml支持反序列化Java对象，所以当 Yaml.load()
函数的参数外部可控时，攻击者就可以传入一个恶意类的yaml格式序列化内容，当服务端进行yaml反序列化获取恶意类时就会触发SnakeYaml反序列化漏洞。全局搜索漏洞函数关键字，发现本项目并没有使用到
Yaml.load() 函数，  
如下图所示：
该漏洞可以和本项目定时任务配合打出RCE效果。在这之前，请可拓展学习下篇文章，补一下基础。  
#### 1.4.2 定时任务处漏洞
**审计定时任务**  
在项目简介中，我们了解到本项目中有使用到定时任务功能。 又根据官方文档的文件结构处，我们了解到本项目定时任务功能在 ruoyi-quartz 模
块下，使用的是 quartz 框架。如下图所示：
进入 ruoyi-quartz 模块 src\main\java\com.ruoyi.quartz 下，我们先关注controller 文件代码。我们知道
Controller 也是控制层，主要负责具体的业务模块流程的控制，简单说就是与前台互交，接受前台传来的参数后，再向 Service层 传输。  