.text:00401D9D call    ecx 
The called address does not contain executable instructions, the call fails with an exception of type 
“Access Violation”. Considering the malicious nature of the analyzed sample it is at hand to search for 
the according exception handler registration at the beginning of the main function. 
.text:00401C85 push    offset _WinMain@16_SEH 
.text:00401C8A mov     eax, large fs:0 
.text:00401C90 push    eax 
.text:00401C91 mov     large fs:0, esp 
The offset, which is pushed onto the stack before the registration process, is the last registered 
frame handler. It is actually the one to be invoked first, when the mentioned exception occurs.  
.text:00435080 _WinMain@16_SEH proc near                
.text:00435080 mov     eax, offset stru_43AC90 
.text:00435085 jmp     __CxxFrameHandler 
.text:00435085 _WinMain@16_SEH endp 
The offset of the exception record will be passed to the frame handler via eax. So what is left to do is 
to follow the exception record offset and find the address of the handler function. This is achieved by 
walking down the structure as shown in the following listing: Trymap -> HandlerArray -> offset 
toHandlerFunction_1. 
.rdata:0043AC90 stru_43AC90 dd 19930520h                            ; Magic 
.rdata:0043AC90 dd 2                                    ; Count  
.rdata:0043AC90 dd offset stru_43AC90.Info              ; unwindmap 
8 | P a g e  
.rdata:0043AC90 dd 1                                    ; trycount 
.rdata:0043AC90 dd offset stru_43ACC0                   ; Trymap 
.rdata:0043AC90 dd 3 dup(0)                             ; _unk 
.rdata:0043AC90 dd -1                                   ; Info.Id 
.rdata:0043AC90 dd 0                                    ; Info.Proc 
.rdata:0043AC90 dd -1                                   ; Info.Id 
.rdata:0043AC90 dd 0                                    ; Info.Proc 
.rdata:0043ACC0 stru_43ACC0 dd 0, 0, 1                              ; _unk 
.rdata:0043ACC0                                         ; DATA XREF: 
.rdata:stru_43AC90 
.rdata:0043ACC0 dd 1                                    ; Count 
.rdata:0043ACC0 dd offset stru_43ACD8                   ; HandlerArray 
.rdata:0043ACD4 dd 0 
.rdata:0043ACD8 stru_43ACD8 _msRttiDscr  
Actually, in this case the only operation the mentioned toHandlerFunction_1 performs is, to set the 
point of resumption after handling the exception. Execution is defined to continue at address 
401DBD, which is a code stub that invokes a function which will be titled IMPLICIT_MAIN throughout 
the analysis, as it controls startup and eventually shutdown of the malware functionality.  
Illustration 1 – Exception Handler Function 
2.2.2 Exception in IMPLICIT_MAIN 
The second intentional exception is invoked shortly after the beginning of the IMPLICIT_MAIN 
function, and actually resumes execution exactly after the instruction that caused the exception. The 
exception itself actually occurs, because a call is carried out on empty memory, which again causes 
an access violation.  
The exception record looks nearly as simple as with the first exception, the offset to the handler 
function can be found the same way as described above. The handler, identically to exception 
number one, only sets the offset to resume execution after the exception. And this offset, as 
mentioned before, points right to the instruction that follows the faulty one which caused the 
exception.  
9 | P a g e  
Illustration 2 – Exception Handler Function 2 
2.3 Simulation Check with GetHostByName 
At the beginning of IMPLICIT_MAIN the malware invokes a function which intends to resolve the 
hostname “…”. The function gethostbyname returns always null for this request, obviously the host 
… can’t be resolved to a valid address.  
Taking a closer look at what happens next it becomes clear that this call to gethostbyname, if 
successful, would lead execution directly to the end of IMPLICIT_MAIN function. This is equal to the 
end of execution, as after IMPLICIT_MAIN there is nothing more than program termination. The 
conclusion lies at hand, that this name resolution is a check for an automated simulation 
environment, which would eventually return a standard address to any name resolution.    
2.4 Obfuscation and Confusion Tricks 
2.4.1 Junk Code 
The analyzed sample contains a fair amount of junk code. The term junk code refers to executable 
instructions that either are executed but have no effect on the behavior of the application, or are 
never executed at all. In case of the analyzed sample most of the identified junk code is never 
executed. The following listing is meant to explain one case of obfuscation by use of junk code (some 
irrelevant instructions are omitted to shorten the listing). 
.text:0040F2E3 mov     [esp+7Ch+var_78], ecx 
.text:0040F2ED lea     eax, [esp+7Ch+var_78] 
.text:0040F2F1 lea     ecx, [esp+7Ch+var_78] 
.text:0040F2F5 imul    eax, ecx 
.text:0040F2F8 lea     edx, [esp+7Ch+var_78] 
.text:0040F2FC lea     ecx, [esp+7Ch+var_78] 
.text:0040F300 push    ebx 
.text:0040F301 sub     edx, ecx 
.text:0040F303 push    ebp 
.text:0040F304 push    esi 
10 | P a g e  
.text:0040F305 cmp     edx, eax 
.text:0040F307 push    edi 
.text:0040F312 jnz     short loc_40F35A 
The cmp instruction at 40f305 will never set the zero flag because the registers cannot contain the 
same value. The ecx register as the this pointer will most likely not be zero at the time Var_78 is 
initialized, hence multiplication and subtraction operation will produce different results. The jnz 
instruction (jump if not zero) will always be taken.  
This kind of obfuscation is used intensely, especially in the initialization phase of the malware. A lot 
of jump instructions, even if there is no useful branch to be taken, let the code appear non-linear and 
functions with few instructions look scarily huge. A graph mode as IDA Pro includes offers great help 
in understanding disassembly that’s bloated with junk code. 
The following screenshots show some of the functions that include code parts that are never being 
executed. The yellow areas mark executed code, the white areas are useless instructions.  
Illustration 3 – Junk Code in Simple Methods 
2.4.2 String Construction at Runtime 
To additionally complicate static analysis the sample at hand does not include strings, which could be 
easily found with the most basic tools. Any string that is used at runtime is built character by 
character and written to memory for later or immediate use.  
11 | P a g e  
The following screenshot shows how a part of the string CloseHandle is written to memory. For the 
resolution of API addresses all the names of the requested APIs are constructed similarly and written 
to the heap (see next section). Also names of events, temporary files, the domain of the command 
and control server or other keywords that are used at runtime are generated this way. This reveals 
two facts. First, no string is to be found via string scanning of the file; and second, all the strings are 
contained hardcoded in the executable, they just need proper extraction.  
Illustration 4 – String Construction 
2.4.3 API Address Resolution at Runtime 
The sparse import table of the sample tells the analyst at first glance already that most likely more 
API functions will be resolved at run time. From kernel32.dll just 4 functions are imported, two of 
which are needed for dynamic loading of libraries and API offsets. Said two functions are 
LoadLibraryA and GetProcAddress. These are invoked in a loop by the executable, feeding them all 
the names of the APIs which are constructed before. This way the addresses of the desired functions 
are retrieved and later stored in a separate memory region which will be the reference table for 
every API call in the future.  For invoking an API function the address of the API offset object is 
loaded into a register and the offset according to the desired function is added, like shown in the 
following example. 
0040F502 mov     edx, dword_43D190 
0040F51D call    dword ptr [edx+68h] ; createeventa in kernel32 7C83089D 
Dword_43D190 contains the pointer to the resolved API addresses throughout execution. The 
following graphic shows the memory region where the addresses are stored, marked 7C.. addresses 
belong to kernel32.dll on the used WinXP system.  
A table of resolved functions and their offsets can be found as attachment to this document (see 
attachment [1]). 
12 | P a g e  
Illustration 5 – API Call Jumptable 
This addressing method prevents IDA Pro from automatically naming the function and from listing 
the expected arguments for each call. The arguments had to be looked up via MSDN library and 
corresponding comments had to be added by hand, if needed. 
2.5 Indirect Function Calls 
Most core functionality of the malware is laid out in object oriented design with numerous virtual 
functions. Virtual functions are a concept of object oriented programming, to realize polymorphic 
design of classes and linking of virtual functions at runtime. The virtual functions of a class are listed 
in the virtual function table, short vftable. This table maps methods to according implementations of 
functions in memory. When deriving a class it derives the superclass’ virtual functions, which can be 
overloaded, if desired.  
As with polymorphic objects it is not always clear at compile time which offset is to be called when a 
virtual function is invoked. Therefore indirect addressing is used. When a virtual function is called at 
runtime, the vftable in the object is resolved to load the right offset. 
This is needed because in polymorphic programming an object is always of one or more types, as to 
say it is of its own class as well as its superclass, if there is any, and eventually other superclasses as 
well.  
The following code snippet shows an example, picked out of the analyzed sample. The call in line 6 
invokes a virtual function, of an object initially pointed to by esi. The references in the vftables are 
resolved, until the right offset is found. It is very hard to determine the offset to be called through 
static analysis, as the memory layout with all vftables of all classes derived from the same superclass 
to be considered. 
.text:0042238A mov     eax, esi 
.text:0042238C mov     esi, [esi] 
.text:0042238E mov     edi, [eax+8] 
.text:00422391 mov     ecx, edi 
.text:00422393 mov     eax, [edi] 
.text:00422395 call    dword ptr [eax+8] 
13 | P a g e  
As this is a design attribute of object oriented programming it is not considered an obfuscation 
method. But certainly, virtual function calls complicate analysis of malicious code significantly. 
2.6 Timing Attacks using GetTickCount 
In the executable there exist 7 calls to the GetTickCount function, which retrieves the number of 
milliseconds that have elapsed since system startup. It is a commonly known trick of malware, to 
detect the presence of debuggers by regularly checking the tick count, as to say by calculating the 
ticks that are passing in between the calls. If the number is too high, there is presumably a debugger 
halting the process in between two calls to GetTickCount.  
The malware at hand would run perfectly fine inside the debugger, after the initial anti-debugging 
trick of checking dwFlags. Just when single stepping inside one of the multiple threads it would not 
resume without catching an exception sooner or later, from which it could not recover.  
The calls to GetTickCount happen in different pieces of the code, the value checks are supposedly 
done somewhere later in the code. Anyway, it is not quite necessary to find and patch them all, as 
most debuggers are prepared for this trick. For IDA Pro there is a plugin called IDA Stealth, an 
equivalent for OllyDebug is PantOm Plugin. These plugins incorporate several stealth mechanisms, 
which aim to hide the debugger from the debuggee. 
Also they can fake return values for GetTickCount. For the analyzed sample a random delta of 30.000 
was found sufficient. 
The sample also uses WinMM library to create time callback events. This way the malware could also 
check for the right timing, but it is assumed that this is not the case as no behavior was noticed that 
would support this theory.  
14 | P a g e  
3. Malware Startup 
The analyzed sample is a non-polymorphic file infector that compromises executable files on the 
system. It replaces the original executable with its own image, barely altered, steals the icon to look 
genuine and stores the original file, hidden and without extension, in the same folder. When invoked, 
the malware checks if there is an original counterpart to its own filename, without extension. If so, 
this executable has to be started too.  
3.1 Synchronization Methods for Multiple Instances 
Also, the sample checks if the system has been compromised before by the same malware. This is 
indicated by the presence of two Windows system events, shortly named event2 and event3 (the 
hardcoded names of extracted events are listed in attachment [2]). These two events are used for 
synchronization of running instances of the malware, as can be seen at a call to 
WaitForMultipleObjects in START_MW function, followed by a switch statement (see illustration 6). 
A second check verifies if there is a fingerprint file present in the systems %TEMP% directory 
(extracted filenames are also hardcoded and listed in attachment [2]). The content of this file is 
checked against a value, generated by a hardcoded algorithm, without system specific values. 
Presumably all variants of the same version of the analyzed sample produce the same fingerprint file. 
This could change with later updates. 
The generation of said file happens after successful malware startup in the function START_MW. 
Also, creation of event2 and event3 happen at this time.  
The following graphic simplifies the malware initialization phase in IMPLICIT_MAIN function. When 
executing, the sample will either terminate or startup the malware functionality and run as multi-
threaded process in background.  The different checks before startup are marked in yellow. 
15 | P a g e  
Illustration 6 – Malware Startup Flowchart 
1. Initialization – The API object is created, the gethostbyname call is done to check for 
simulation and a named event is created, shortly termed event 1. If createevent fails, 
because event1 exists already, this information is saved for performing checks later but does 
not influence execution immediately.  
2. If an original counterpart can be found it is executed, if additionally a handle to event2 can 
be retrieved the sample performs some cleanup code and then terminates execution. 
3. If an original is found and executed, but the openevent call on event2 fails the sample 
initiates a normal startup procedure similar to point 6, which would be the initial infection 
routine on a clean system. 
4. If no original counterpart is found and a handle for event2 can be retrieved the malware 
enters one single function for checking if a handle for event3 can be retrieved. If so, the 
event is set to signaled state, the fingerprint file, if existent, is read, deleted, and the content 
is compared to the self-generated fingerprint value. So if event3 exists, the fingerprint file 
exists and the two fingerprints are not equal the malware takes course number 4: event2 is 
set to signaled state and usual startup procedure is initiated. Signaling of event2 presumably 
causes the former, running instance of the malware to terminate.  
5. If event3 does not exist, the fingerprint file cannot be found or the fingerprint values are 
equal the malware terminates execution. 
16 | P a g e  
6. In case no original executable can be found and event2 is not present the system is 
supposedly clean and initial infection routine is started. This includes creating a copy of the 
image of the own executable in memory and creation of the first thread, that will be the file 
infection routine.   
Having this flow in mind some conclusions can be drawn. The mentioned events are used to 
coordinate the malware, when multiple infected executables are started at the same time. The 
fingerprint file could be some sort of version management. When a malware instance is running, and 
a new infector starts up, which calculates a different fingerprint, the former instance is stopped and 
the new infector is started. As mentioned before, signaling event2 causes an instance which has 
reached the WaitForMultipleObjects statement in START_MW function to terminate gracefully. 
The same wait statement is waiting for signaling of event3. When this happens, the fingerprint file is 
generated anew. The following screenshot shows mentioned switch statement, case 0 or 3 belong to 
signaling of event2 (termination), case 1 belongs to signaling of event3. 
Illustration 7 – thread0 WaitForMultipleObject  
As the fingerprint checking is only done when no original counterpart can be found, it is believed that 
the possible update mechanism is just to be executed by the initial infector, not by its infected 
copies. 
It is important to mention that the malware incorporates a disinfection routine, that’s called only in 
case 3 of shown switch statement. Apparently one event causes the malware to clean the system and 
terminate afterwards. The disinfection routine is described in more detail in section 7.5. 
17 | P a g e  
4. Multi-Threading Model 
In a multi-threaded application different tasks are delegated to different threads, which can be 
virtually or physically parallelized, depending on the processor architecture. For management of the 
threads and interaction between the threads exist various ways of inter-thread communication. The 
malicious sample at hand starts, apart from thread 0, 8 more threads during startup, naturally with 
various purposes. There is one thread with the sole purpose of infecting files, which is coded pretty 
much straight forward. Other threads implement functionality for sending data to the command and 
control server (short C&C), receiving data from the C&C and dispatching of commands from the C&C. 
The multi-threading model and inter-thread communication was not reconstructed in full detail but 
just as far as needed for understanding the role of its components. 