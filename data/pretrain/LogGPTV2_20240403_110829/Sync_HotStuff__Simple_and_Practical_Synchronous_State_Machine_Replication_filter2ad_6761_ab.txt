2f + 1). If a block Bk has a quorum certiﬁcate from view v,
we say it is a certiﬁed block in view v, and write it as Cv(Bk).
Certiﬁed blocks are ranked ﬁrst by views and then by
heights, i.e., (i) blocks certiﬁed in a higher view has higher
rank, and (ii) for blocks certiﬁed in the same view, a higher
height gives a higher rank. During the protocol execution, each
replica keeps track of all certiﬁed blocks and keeps updating
the highest certiﬁed block to its knowledge.
In Sync HotStuff, replicas will lock on certiﬁed blocks at the
beginning of each view. Looking ahead, the notion of locked
blocks will be used to guard the safety of a commit.
Block chaining. Blocks across heights are chained by hashes
(cf. block format) and certiﬁcates (cf. Figure 1). This idea
originated from the Bitcoin white paper [10] and it was
incorporated into BFT by Casper [11] and HotStuff [12]. It
greatly simpliﬁes BFT protocols since now the voting step on
a block also serves as a voting step for all its ancestor blocks
that have not been committed. Hence, crucially, committing a
block commits all its ancestors.
A. Steady State Protocol
The steady state protocol runs in iterations. We explain each
step in a iteration.
Propose. The leader L proposes a block Bk = (bk, H(Bk−1))
by broadcasting (cid:104)propose, Bk, v,Cv(Bk−1)(cid:105)L. The proposal
contains a view-v certiﬁcate for its predecessor block Bk−1.
The ﬁrst view-v certiﬁcate will be obtained in the view-change
protocol in Section II-B. If any replica receives propose (or
new-view , cf. Section II-B) messages containing equivocating
blocks, we say the replica detects leader equivocation.
Vote. Each replica r, upon receiving the above proposal for
Bk, broadcasts a vote (cid:104)vote, Bk, v(cid:105)r for Bk (Step 2), if it has
not observed leader equivocation in the view. Note that r may
ﬁrst hear a proposal from a non-leader replica r(cid:48) because r(cid:48)
forwards the proposal when voting. The voting step can thus
be considered a re-proposal step.
Commit. Once replica r votes for a proposal for Bk, it starts
a timer denoted commit-timerv,k (Step 3). Bk is committed
if r is still in view-v after 2∆ time (i.e., if r does not detect
leader equivocation or a view change within 2∆ time). We note
again that blocks across heights form a chain, and committing
a block commits all its ancestors.
Note that the commit timers do not affect the critical path
of progress. A replica votes and starts timers for subsequent
heights without waiting for the previous height to be com-
mitted. In fact, a replica can potentially have many previous
heights whose commit timers are still running.
Why does the 2∆ time ensure safety? Consider an honest
replica r that votes for a block Bk at time t, does not observe
leader equivocation or a view change, and hence commits Bk
at time t + 2∆. We provide some intuition why this commit
is safe by showing that Bk will be the only certiﬁed block at
height k in the view. For that, we need to show that (i) Bk will
be certiﬁed, and (ii) no equivocating block can be certiﬁed.
Replica r votes at
time t. Its vote with the forwarded
proposal reaches all honest replicas before t + ∆. After that,
honest replicas would not vote for an equivocating block.
Thus, if any honest replica votes for an equivocating block,
it must do so before t + ∆; but then r would have detected
leader equivocation before t + 2∆. This contradicts with the
fact that r commits Bk. Hence, (ii) holds. The above also
means all honest replicas will vote for Bk by time t + ∆,
and a certiﬁcate for Bk will form at all honest replicas before
t + 2∆. Hence, (i) holds. Note that (i) holds even if the leader
did not propose Bk to all replicas.
Note that a commit by some honest replica at height k does
not imply a commit by all honest replicas at that height. This is
because a Byzantine leader can send equivocating proposals to
a subset of honest replicas before their commit timers expires,
causing them to not commit. Thus, to complete the safety
proof, we also need to show that no honest replica will vote for
equivocating blocks in subsequent views. This will be ensured
by the view-change protocol in the next subsection.
B. View-change Protocol
The view-change protocol maintains safety across views and
ensures liveness. The leader can prevent progress through two
mechanisms – stalling and equivocating. The two conditions
Let v be the current view number and replica L be the leader of the current view. While in view v, a replica r runs the
following protocol in the steady state.
If replica r is the leader L, upon receiving Cv(Bk−1), broadcast (cid:104)propose, Bk, v,Cv(Bk−1)(cid:105)L where Bk
1) Propose.
extends Bk−1.
2) Vote. Upon receiving a proposal (cid:104)propose, Bk, v,Cv(Bk−1)(cid:105)L (not necessarily from L) where Bk extends Bk−1, if no
leader equivocation is detected, forward the proposal to all other replicas, broadcast a vote in the form of (cid:104)vote, Bk, v(cid:105)r,
set commit-timerv,k to 2∆ and start counting down.
3) (Non-blocking) Commit. When commit-timerv,k reaches 0, commit Bk and all its ancestors.
Fig. 1: The steady state protocol under standard synchrony.
Let L and L(cid:48) be the leaders of views v and v + 1, respectively. Each replica r runs the following steps.
i Blame and quit view. If fewer than p proposals trigger r’s votes in (2p + 4)∆ time in view v, broadcast (cid:104)blame, v(cid:105)r.
Upon gathering f +1 (cid:104)blame, v(cid:105) messages, broadcast them, and quit view v. If leader equivocation is detected, broadcast
the two equivocating messages signed by L, and quit view.
ii Status. Wait for ∆ time. Pick a highest certiﬁed block Cv(cid:48)(Bk(cid:48)), lock on Cv(cid:48)(Bk(cid:48)), send Cv(cid:48)(Bk(cid:48)) to the new leader L(cid:48),
and enter view v + 1.
iii New-view. The new leader L(cid:48) waits for 2∆ time after entering view v + 1 and broadcasts (cid:104)new-view, v + 1,Cv(cid:48)(Bk(cid:48))(cid:105)L(cid:48)
where Cv(cid:48)(Bk(cid:48)) is a highest certiﬁed block known to L(cid:48).
iv First vote. Upon receiving (cid:104)new-view, v + 1,Cv(cid:48)(Bk(cid:48))(cid:105)L(cid:48), if Cv(cid:48)(Bk(cid:48)) has a rank equal to or higher than r’s locked
block, forward (cid:104)new-view, v + 1,Cv(cid:48)(Bk(cid:48))(cid:105)L(cid:48) to all other replicas and broadcast (cid:104)vote, Bk(cid:48), v + 1(cid:105)r.
Fig. 2: The view-change protocol under standard synchrony.
of quitting a view, based on no progress and equivocation,
defend against
these two attacks, respectively (Step i). A
leader is expected to propose a block every 2∆ time: one
∆ for its proposal to reach other replicas and one ∆ for other
replicas’ votes to arrive. This forces a Byzantine leader to
propose a block every 2∆ time to avoid being overthrown. If a
leader equivocates, i.e., sends propose or new-view messages
that contain equivocating blocks, the equivocating messages
serve as a proof of Byzantine behavior and, once received,
make an honest replica quit the view. Note that equivocating
messages may be received directly from L or forwarded by
other replicas.
Once a replica quits view v, it stops voting in that view and
aborts all commit-timers of that view. The replica then waits
for ∆ time, picks a highest certiﬁed block, locks on it, reports
the lock to L(cid:48), and enters the new view (Step ii).
The ∆ wait before locking ensures that every honest replica
learns all blocks committed by all honest replicas in previous
views before sending its lock status to the new leader. This
maintains the safety of all committed blocks by all honest
replicas up until this view (formalized in Lemma 1).
Once in the new view, the new leader L(cid:48) waits for 2∆
time to collect locked blocks from all honest replicas and
then broadcasts a new-view message containing a highest
certiﬁed block known to it (Step iii). When a replica receives
a new-view message, if the certiﬁed block it contains ranks
greater than or equal to its own locked block, it forwards
the new-view message and broadcasts a vote for the block
(Step iv).
C. Safety and Liveness
We say a block Bk is committed directly in view v if it
is committed as a result of its own commit-timerv,k expiring.
We say a block Bk is committed indirectly if it is a result of
directly committing a block B(cid:96) ((cid:96) > k) that extends Bk.
Lemma 1. If an honest replica directly commits B(cid:96) in view
v, then (i) no equivocating block is certiﬁed in view v, and
(ii) every honest replica locks on a certiﬁed block that ranks
equal to or higher than Cv(B(cid:96)) before entering view v + 1.
Proof. Suppose an honest replica r directly commits B(cid:96) in
view v at time t. Then, at time t − 2∆, replica r votes for
and forwards a proposal for B(cid:96). All honest replicas receive
the proposal for B(cid:96) by time t − ∆.
For part (i), observe that after time t− ∆, no honest replica
will vote for an equivocating block in the same view. If any
other honest replica had voted for an equivocating block B(cid:48)
(cid:96)(cid:48)
before t − ∆, replica r would have received the equivocating
propose or new-view message for B(cid:48)
(cid:96)(cid:48) before time t, which
contradicts the hypothesis of r committing B(cid:96) directly in view
v at time t. Therefore, an equivocating block will not get any
honest vote in view v and will not be certiﬁed in view v.
For part (ii), let us understand the situation of honest replicas
at time t − ∆. First, no honest replica has quit view v by
time t − ∆ because otherwise r would have quit view v by
time t and would not have committed B(cid:96) in view v at time
t. Second, since r entered view v before time t − 2∆, every
honest replica has entered view v before time t − ∆. Thus,
every honest replica will vote for B(cid:96) by time t − ∆ and all
honest replicas receive Cv(B(cid:96)) by time t. Due to the ∆ wait
before entering the next view, every honest replica enters view
v + 1 after time t. Hence, before entering view v + 1, they
will lock on Cv(B(cid:96)) or higher.
Lemma 2 (Unique Extensibility). If an honest replica directly
commits B(cid:96) in view v, then any certiﬁed block that ranks equal
to or higher than Cv(B(cid:96)) must extend B(cid:96).
Proof. Let S be the set of certiﬁed blocks that rank equal
to or higher than Cv(B(cid:96)) but do not extend B(cid:96). Suppose for
contradiction that S (cid:54)= ∅. Let Cv∗ (Bk∗ ) be a lowest ranked
block in S. It is easy to show that v∗ > v; otherwise, we have
v∗ = v, k∗ ≥ (cid:96), and it contradicts Lemma 1(i). Also note that
as Bk∗ does not extend B(cid:96), its predecessor Bk∗−1 does not
extend B(cid:96), either.
For Cv∗ (Bk∗ ) to exist, some honest node must vote for Bk∗
in view v∗ upon receiving (cid:104)new-view, v∗,Cv(cid:48)(Bk∗ )(cid:105) where
v(cid:48)  0).
All honest replicas will soon commit these proposed blocks
unless a view-change occurs. Due to the round-robin leader
order, eventually there will be an honest leader.
(cid:96)(cid:48) extends B(cid:96). Thus, B(cid:48)
Next, we will show that once the leader is honest, a view-
change will not occur and all honest replicas keep committing
new blocks. The leader may enter the view ∆ later than others
and need to wait for 2∆ time before proposing. Another ∆
is needed for others to receive the proposal. The 2∆ wait
ensures an honest leader receives locked blocks of all honest
replicas up until the beginning of that view. Hence, the block
it proposes will extend the locked blocks of all honest replicas
and receive votes from all honest replicas. After that, the
(cid:96)(cid:48) extends B(cid:48)
k = Bk.
honest leader is able to propose a block every 2∆ time: one
∆ for its proposed block to reach all honest replicas and
another ∆ for all honest replicas’ votes to arrive. Thus, an
honest leader is able to make every other honest replica vote
for p proposals in (2p + 4)∆ time. In addition, an honest
leader does not equivocate. So no honest replica will blame
the honest leader and all honest replicas keep committing new
blocks.
D. Efﬁciency Analysis
the actual network delay δ.) But for SMR,
Throughput. In steady state (Figure 1), the key step that uses
the synchrony bound ∆ is the commit step. But as we have
mentioned, the commit step is not on the critical path (non-
blocking). Thus, the choice of ∆, no matter how conservative,
does not affect the protocol’s throughput in steady state. Thus,
Sync HotStuff should have similar throughput as partially
synchronous protocols. Our experiments in Section V conﬁrm
this.
Latency. From an honest leader’s perspective, each block in-
curs a latency of 2∆+δ after being proposed. (Step 1 proceeds
at
is more
customary to calculate latency from a client’s perspective, that
is, the time difference between when a client sends a request
and when it receives a response. If a client’s request arrives