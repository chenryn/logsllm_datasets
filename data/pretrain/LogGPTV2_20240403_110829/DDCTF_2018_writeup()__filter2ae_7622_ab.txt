    0xa, 0xa, 0x425088, 0x8,  
    0x7ffffff8, 0x100, 0x413f38, 0x1,  
    0x413f38, 0x0, 0x2, 0x76fff0f8,  
    0x0, 0x0, 0x7fffffff, 0x76fff220,  
    0x405050, 0x550001, 0x0, 0x425000,  
    0x0, 0x0, 0x0, 0x0,  
    0x0, 0x0, 0x0, 0x76fff220,  
    0x404d84, 0x42d1f0, 0x0, 0x500,  
    0x5, 0x42d1f0, 0xb3b, 0x76fff224,  
    0x115, 0x1a131100, 0x76fff220, 0x76fff270,  
    0x76fff2ac, 0xffbecf88, 0xa, 0x405880]  
    j = 0  
    functions = 0  
    for i in range(0xb4, 0x410, 4):  
        fp[i] = table[j]  
        j += 1  
    input = [int(str(i)*3, 16) for i in range(16)]  
    try:  
        while(True):  
            code = f.readline()  
            if(code == ""):  
                print("finish")  
                break  
            if(code[:3] == "loc"):  
                # print("n[s]:t" + code[:-1])  
                continue  
            if(code.find("nop")!=-1):  
                continue  
            code = code.split("$")  
            # print(code)  
            c = code[0].strip()  
            if(c=="sw"):  
                n1 = code[1].split(",")[0]  
                n2 = 0x410 - int("0x" + code[1].split("_")[1].split("(")[0], 16)  
                code = ("fp[" + hex(n2) + "] = " + n1)  
            elif(c=="li"):  
                n1 = code[1].split(",")[0]  
                n2 = code[1].split(",")[1].strip()  
                code = (n1 + " = " + n2)  
            elif(c=="lw"):  
                n1 = code[1].split(",")[0]  
                if("".join(code).find("fp")!=-1):  
                    n2 = 0x410 - int("0x" + code[1].split("_")[1].split("(")[0], 16)  
                    code = (n1 + " = fp[" + hex(n2) + "]")  
                    # print("# " + hex(fp[n2]))  
                    #输出方程  
                    print("0x%x*"%fp[n2],end='')  
                else:  
                    # print("[c]:t" + "".join(code)[:-1], "v0=%x"%v0)  
                    n2 = ((v0) + int(code[1].split(",")[1].replace("(", "")))//4  
                    code = (n1 + " = input[" + str(n2) + "]")  
                    print("a[%d]"%n2)  
                    # print(code)  
                    # print(hex(v0))  
                    # break  
            elif(c=="sll"):  
                n1 = code[1].split(",")[0]  
                n2 = code[1].split(",")[1].strip()  
                code = (n1 + " = " + n1 + ">" + n2)  
            elif(c=="xori"):  
                n1 = code[1].split(",")[0]  
                n2 = code[1].split(",")[1].strip()  
                code = (n1 + " = " + n1 + "^" + n2)  
            elif(c=="addiu"):  
                n1 = code[1].split(",")[0]  
                n2 = code[1].split(",")[1].strip()  
                code = (n1 + " = " + n1 + "+" + n2)  
                # print("+")  
            elif(c=="mul"):  
                n1 = code[1].split(",")[0]  
                n2 = code[2].split(",")[0].strip()  
                n3 = code[3].strip()  
                code = (n1 + " = " + n2 + "*" + n3)  
            elif(c=="addu"):  
                n1 = code[1].split(",")[0]  
                n2 = code[2].split(",")[0].strip()  
                code = (n1 + " = " + n1 + "+" + n2)  
                print("+")  
            elif(c=="subu"):  
                n1 = code[1].split(",")[0]  
                n2 = code[2].split(",")[0].strip()  
                code = (n1 + " = " + n1 + "-" + n2)  
                print("-")  
            elif(c=="beq"):  
                print("=0x%x"%(v0))  
                print("================================================one function=====================================")  
                functions +=1  
                continue  
            elif(c=="negu"):  
                n1 = code[1].split(",")[0]  
                n2 = code[2].split(",")[0].strip()  
                code = (n1 + " = " + "-" + n2)  
                print("-")  
            elif(c=="nop"):  
                continue  
            elif(c=="lui"):  
                n1 = code[1].split(",")[0]  
                n2 = code[1].split(",")[1].strip()  
                code = (n1 + " = " + n2 + "<<32")  
            elif(c=="move" or c=="and"):  
                continue  
            elif(c in flower):  
                # print("[f]:t" + "".join(code)[:-1])  
                continue  
            else:  
                print("[x]:tFind unknown code | " + "".join(code))  
                break  
            # print("[-]:t" + code)  
            exec(code)  
    except Exception as e:  
        print(repr(e))  
        print(code)  
    print(functions)  
    # print(fp)  
**优雅反编译**
在某zhao师傅的提醒下想起来jeb的MIPS版本可以对汇编进行简单的反编译：
虽然数组全部是通过指针+偏移的方式来调用，不过可以全部复制下来再用正则来整理数据，将*(par00+x)替换为par00[x/4]的形式（可不要像某zhao师傅一样将参数一个个抄下来哟（不然就会像他一样把参数不慎抄错几个然后纠结若干小时XDDDDDD
上述两种方法得到方程以后就可以通过z3, numpy, matlab一类的数学工具求解方程组了，下面给出z3py的示例代码