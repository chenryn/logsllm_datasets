---
author: Thomas Claburn
category: 观点
comments_data: []
count:
  commentnum: 0
  favtimes: 2
  likes: 0
  sharetimes: 1
  viewnum: 11820
date: '2018-11-06 16:47:00'
editorchoice: true
excerpt: Bjarne Stroustrup 是 C++ 语言的创始人，他写了一封信，请那些关注编程语言进展的人去“想想瓦萨号！”
fromurl: https://www.theregister.co.uk/2018/06/18/bjarne_stroustrup_c_plus_plus/
id: 10202
islctt: true
largepic: /data/attachment/album/201811/06/164654t32a8b1rzdnt38a3.jpg
permalink: /article-10202-1.html
pic: /data/attachment/album/201811/06/164654t32a8b1rzdnt38a3.jpg.thumb.jpg
related: []
reviewer: thecyanbird, Northurland, pityonline
selector: lujun9972
summary: Bjarne Stroustrup 是 C++ 语言的创始人，他写了一封信，请那些关注编程语言进展的人去“想想瓦萨号！”
tags:
- 编程语言
thumb: false
title: 对 C++ 的忧虑？C++ 创始人警告：关于 C++ 的某些未来计划十分危险
titlepic: true
translator: qhwdw
updated: '2018-11-06 16:47:00'
---
![](/data/attachment/album/201811/06/164654t32a8b1rzdnt38a3.jpg)
今年早些时候，我们对 Bjarne Stroustrup 进行了采访。他是 C++ 语言的创始人，摩根士丹利技术部门的董事总经理，美国哥伦比亚大学计算机科学的客座教授。他写了[一封信](http://open-std.org/JTC1/SC22/WG21/docs/papers/2018/p0977r0.pdf)，请那些关注编程语言进展的人去“想想瓦萨号！”
这句话对于丹麦人来说，毫无疑问，很容易理解。而那些对于 17 世纪的斯堪的纳维亚历史了解不多的人，还需要详细说明一下。瓦萨号是一艘瑞典军舰，由国王 Gustavus Adolphus 定做。它是当时波罗的海国家中最强大的军舰，但在 1628 年 8 月 10 日首航没几分钟之后就沉没了。
![](/data/attachment/album/201811/06/164644atfrqo3hqf55wnyq.jpg)
巨大的瓦萨号有一个难以解决的设计缺陷：头重脚轻，以至于它被[一阵狂风刮翻了](https://www.vasamuseet.se/en/vasa-history/disaster)。通过援引这艘沉船的历史，Stroustrup 警示了 C++ 所面临的风险 —— 现在越来越多的特性被添加到了 C++ 中。
我们现在已经发现了好些能导致头重脚轻的特性。Stroustrup 在他的信中引用了 43 个提议。他认为那些参与 C++ 语言 ISO 标准演进的人（即所谓的 [WG21 小组](http://open-std.org/JTC1/SC22/WG21/)）正在努力推进语言发展，但成员们的努力方向却并不一致。
在他的信中，他写道：
> 
> 分开来看，许多提议都很有道理。但将它们综合到一起，这些提议是很愚蠢的，将危害 C++ 的未来。
> 
> 
> 
他明确表示，他用瓦萨号作为比喻并不是说他认为不断提升会带来毁灭。我们应该吸取瓦萨号的教训，构建一个坚实的基础，从错误中学习并对新版本做彻底的测试。
在瑞士 拉普斯威尔   Rapperswill 召开 C++ 标准化委员会会议之后，本月早些时候，Stroustrup 接受了 *The Register* 的采访，回答了有关 C++ 语言下一步发展方向的几个问题。（最新版是去年刚发布的 C++17；下一个版本是 C++20，预计于 2020 年发布。）
*Register：*在您的信件《想想瓦萨号！》中，您写道：
> 
> 在 C++11 开始的基础建设尚未完成，而 C++17 基本没有在使基础更加稳固、规范和完整方面做出改善。相反，却增加了重要接口的复杂度（原文为 surface complexity，直译“表面复杂度”），让人们需要学习的特性数量越来越多。C++ 可能在这种不成熟的提议的重压之下崩溃。我们不应该花费大量的时间为专家级用户们（比如我们自己）去创建越来越复杂的东西。~~（还要考虑普通用户的学习曲线，越复杂的东西越不易普及。）~~
> 
> 
> 
**对新人来说，C++ 过难了吗？如果是这样，您认为怎样的特性让新人更易理解？**
*Stroustrup：*C++ 的有些东西对于新人来说确实很具有挑战性。
另一方面而言，C++ 中有些东西对于新人来说，比起 C 或上世纪九十年代的 C++ 更容易理解了。而难点是让大型社区专注于这些部分，并且帮助新手和非专业的 C++ 用户去规避那些对高级库实现提供支持的部分。
我建议使用 [C++ 核心准则](https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md)作为实现上述目标的一个辅助。
此外，我的“C++ 教程”也可以帮助人们在使用现代 C++ 时走上正确的方向，而不会迷失在自上世纪九十年代以来的复杂性中，或困惑于只有专家级用户才能理解的东西中。这本即将出版的第二版的“C++ 教程”涵盖了 C++17 和部分 C++20 的内容。
我和其他人给没有编程经验的大一新生教过 C++，只要你不去深入编程语言的每个晦涩难懂的角落，把注意力集中到 C++ 中最主流的部分，就可以在三个月内学会 C++。
“让简单的东西保持简单”是我长期追求的目标。比如 C++11 的 `range-for` 循环：
```
for (int& x : v) ++x; // increment each element of the container v
```
`v` 的位置可以是任何容器。在 C 和 C 风格的 C++ 中，它可能看起来是这样：
```
for (int i=0; i 标准线程库   standard thread library 。它比起使用 POSIX 或直接使用 Windows 的 C API 来说更简单，并且更不易出错。
*Register：***您如何看待 C++ 现在的状况？**
*Stroustrup：*C++11 中作出了许多重大改进，并且我们在 C++14 上全面完成了改进工作。C++17 添加了相当多的新特性，但是没有提供对新技术的很多支持。C++20 目前看上去可能会成为一个重大改进版。编译器的状况非常好，标准库实现得也很优秀，非常接近最新的标准。C++17 现在已经可以使用，对于工具的支持正在逐步推进。已经有了许多第三方的库和好些新工具。然而，不幸的是，这些东西不太好找到。
我在《想想瓦萨号！》一文中所表达的担忧与标准化过程有关，对新东西的过度热情与完美主义的组合推迟了重大改进。“追求完美往往事与愿违”。在六月份拉普斯威尔的会议上有 160 人参与；在这样一个数量庞大且多样化的人群中很难取得一致意见。专家们也本来就有只为自己设计语言的倾向，这让他们不会时常在设计时考虑整个社区的需求。
*Register：***C++ 是否有一个理想的状态，或者与之相反，您只是为了程序员们的期望而努力，随时适应并且努力满足程序员们的需要？**