title:MIRAGE: Mitigating Conflict-Based Cache Attacks with a Practical
Fully-Associative Design
author:Gururaj Saileshwar and
Moinuddin K. Qureshi
MIRAGE: Mitigating Conflict-Based Cache Attacks 
with a Practical Fully-Associative Design
Gururaj Saileshwar and Moinuddin Qureshi, Georgia Institute of Technology
https://www.usenix.org/conference/usenixsecurity21/presentation/saileshwar
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.MIRAGE: Mitigating Conﬂict-Based Cache Attacks
with a Practical Fully-Associative Design
Gururaj Saileshwar
PI:EMAIL
Georgia Institute of Technology
Abstract
Shared caches in processors are vulnerable to conﬂict-
based side-channel attacks, whereby an attacker can monitor
the access pattern of a victim by evicting victim cache lines
using cache-set conﬂicts. Recent mitigations propose random-
ized mapping of addresses to cache lines, to obfuscate the
locations of set-conﬂicts. However, these are vulnerable to
newer attack algorithms that discover conﬂicting sets of ad-
dresses despite such mitigations, because these designs select
candidates for eviction from a small set of conﬂicting lines.
This paper presents Mirage, a practical design for a fully
associative cache, wherein eviction candidates are selected
randomly from among all the lines resident in the cache, to be
immune to set-conﬂicts. A key challenge in enabling such a
design for large shared caches (containing tens of thousands
of resident cache lines) is managing the complexity of cache-
lookup, as a naive design can require searching through all the
resident lines. Mirage achieves full-associativity while retain-
ing practical set-associative lookups by decoupling placement
and replacement, using pointer-based indirection from tag-
store to data-store to allow a newly installed address to glob-
ally evict the data of any random resident line. To eliminate
set-conﬂicts, Mirage provisions extra invalid tags in a skewed-
associative tag-store design where lines can be installed with-
out set-conﬂict, along with a load-aware skew-selection policy
that guarantees the availability of sets with invalid tags. Our
analysis shows Mirage provides the global eviction property
of a fully-associative cache throughout system lifetime (vio-
lations of full-associativity, i.e. set-conﬂicts, occur less than
once in 104 to 1017 years), thus offering a principled defense
against any eviction-set discovery and any potential conﬂict
based attacks. Mirage incurs limited slowdown (2%) and 17–
20% extra storage compared to a non-secure cache.
1 Introduction
Ensuring effective data security and privacy in the context of
hardware side channels is a challenge. Performance-critical
hardware components such as last-level caches (LLC) are
often designed as shared resources to maximize utilization.
When a sensitive application shares the LLC with a malicious
application running simultaneously on a different core, cache
side channels can leak sensitive information. Such cache at-
tacks have been shown to leak sensitive data like encryption
keys [5] and user data in the cloud [44]. Set-conﬂict based
cache attacks (e.g. Prime+Probe [35]) are particularly potent
as they do not require any shared memory between the victim
Moinuddin Qureshi
PI:EMAIL
Georgia Institute of Technology
and the spy and exploit the set-associative design of conven-
tional caches. Such designs map addresses to only a small
group of cache locations called a set, to enable efﬁcient cache
lookup. If the addresses of both the victim and the attacker
map to the same set, then they can evict each other from the
cache (such an episode is called a set-conﬂict) – the attacker
uses such evictions to monitor the access pattern of the victim.
Recent proposals for Randomized LLCs [39, 40, 51, 57] at-
tempt to mitigate set-conﬂict-based attacks by randomizing
the locations of cachelines, i.e. addresses resident in the cache.
By making the address-to-set mapping randomized and unpre-
dictable to an adversary, these designs attempt to obfuscate the
locations of the lines that are evicted. However, such defenses
continue to select cachelines for eviction from a small number
of locations in the cache (equal to the cache associativity), as
shown in Figure 1(a), and thus set-conﬂicts continue to occur
although their locations are obfuscated. Subsequent attacks
[38, 40, 52] have proposed efﬁcient algorithms to discover a
minimal eviction-set (lines mapping to the same set as a target
address, that can evict the target via set-conﬂicts) even in the
presence of such defenses, rendering them ineffective. In this
paper, we target the root cause of vulnerability to eviction-set
discovery in prior defenses – the limitation of selecting vic-
tims for eviction from a small subset of the cache (a few tens
of lines), which allows an adversary, that observes evictions,
to learn ﬁnite information about installed addresses.
Our goal is to eliminate set-conﬂicts and attacks that exploit
them, with a cache that has the property of global evictions, i.e
the victims for eviction are chosen (randomly) from among all
the lines in the cache. With global evictions, any line resident
in the cache can get evicted when a new address is installed
into the cache; all cachelines belong to a single set as shown
in Figure 1(b). Hence, an adversary observing an eviction of
its address gains no information about the installed address.
A fully associative cache design, where an address can
map to any location in the cache, naturally provides global
evictions. However, the main challenge in adopting such a
design for the LLC is ensuring practical cache lookup. As
a line can reside in any cache location, a cache lookup can
require searching through the entire LLC (containing tens of
thousands of lines) and be much slower than even a memory
access. Ideally, we want the security of a fully-associative
design, but the practical lookup of a set-associative design.
To this end, we propose Mirage (Multi-Index Randomized
Cache with Global Evictions). The key insight in Mirage is
the decoupling of placement of a new line in the tag-store
USENIX Association
30th USENIX Security Symposium    1379
Figure 1: (a) Traditional LLCs have set-associative evictions (SAE), which leaks information to a spy. (b) Desired abstraction:
Global Evictions (GLE) on misses that avoid set conﬂicts. (c) Our proposal, Mirage, enables global evictions practically with: (1)
Indirection from tag-store to the data-store, (2) Skewed-Associative tag-store with extra tags, and (3) Placement of lines with
load-balancing that guarantees the availability of sets with invalid tags and eliminates SAE.
(where the metadata is stored, that determines the complexity
of lookup), from the replacement decisions (which locations
should be evicted to free up capacity in the data-store). This
allows the placement of the tag of the line in a small number of
possible locations in the tag-store for efﬁcient lookup, while
selecting data victims globally from the entire data-store.
To enable global evictions, Mirage uses pointer-based in-
direction to associate tags with data-blocks and vice-versa
(inspired by V-way Cache [41]) as shown in Figure 1(c), un-
like traditional caches that have an implicit mapping between
the tag and data of a cacheline. Moreover, Mirage provisions
extra invalid tags in each set of the tag-store at a modest stor-
age cost (while retaining the same data-store capacity) and
guarantees the availability of such invalid tags in each set with
a high probability. Thus, when a new line is installed, an in-
valid tag can be allocated from the tag-store without requiring
an eviction of a line from the same set. An eviction of a line is
only required to free a data-block, which is selected randomly
from all the lines in the data-store, providing global eviction.
It is essential to prevent the adversary from mapping several
lines at a time to a speciﬁc set, to fully deplete the available
tags in that set. On an install to such a fully-occupied set, the
cache is forced to perform a Set Associative Eviction (SAE),
where a valid tag from the same set needs to be evicted to
accommodate the incoming line. By observing such an SAE,
an adversary can infer the address of the installed line causing
the eviction, and eventually launch a set-conﬂict based attack.
To eliminate set-conﬂicts and SAE, and ensure all evictions
are global evictions, Mirage ﬁrst splits the tag store into two
equal parts (skews), and uses a cryptographic hash function
to randomize the line-to-set mapping within each skew, like
prior skewed-associative designs for secure caches [40, 57].
This allows a line the ﬂexibility of mapping to two possible
sets (one in each skew), in a manner unpredictable to the ad-
versary. As both skews could have invalid tag-store entries, an
important consideration is the skew-selection policy on a line-
install. Using a random skew-selection policy, such as in prior
works [40,57], results in an unbalanced distribution of invalid
tags across sets, causing the episodes of SAE to continue to
occur every few microseconds (a few thousand line installs).
To promote a balanced distribution of invalid tags across sets,
Mirage employs a load-aware skew selection policy (inspired
by load-aware hashing [4, 43]), that chooses the skew with
the most invalid tag-entries in the given set. With this policy,
Mirage guarantees an invalid tag is always available for an
incoming line for system lifetime, thus eliminating SAE.
For an LLC with 2MB/core capacity and 16-ways in the
baseline, Mirage provisions 75% extra tags, and has two
skews, each containing 14-ways of tag-store entries. Our anal-
ysis shows that such a design encounters SAE once per 1017
years, providing the global eviction property and an illusion of
a fully associative cache virtually throughout system lifetime.
If Mirage is implemented with fewer than 75% extra tags,
the probability of an SAE increases as the likelihood that the
tag entries in both skews are all valid increases. To avoid an
SAE in such cases, we propose an optimization that relocates
an evicted tag to its alternative set that is likely to have invalid
tags with high probability (note that each address maps to two
sets, one in each skew). Mirage equipped with such Cuckoo
Relocation (inspired from cuckoo hashing [36]), ensures an
SAE occurs once every 22,000 years, with 50% extra tags.
Overall, this paper makes the following contributions:
1. We observe that conﬂict-based cache attacks can be mit-
igated by having global eviction that considers all the
lines for eviction. For practical adoption, our goal is pro-
vide such a global eviction property without incurring
signiﬁcant latency for cache-lookup or power overhead.
2. We propose Mirage, a practical way to get the global
eviction beneﬁts of a fully associative cache. Mirage uses
indirection from tag-store to data-store, an intelligent tag
store design, and a load balancing policy to ensure that
the cache provides global evictions for system lifetime
(set-associative evictions occur once in 1017 years).
3. We propose Mirage with Cuckoo Relocation, whereby
set-associative evictions in the tag store are mitigated by
relocating a conﬂicting entry to an alternative location.
As Mirage requires extra tags and indirection, it incurs a
modest storage overhead of 17% to 20% for a cache design
with 64-byte linesize compared to a non-secure design. Our
evaluations show that Mirage incurs a modest slowdown of
2%, compared to a non-secure set-associative baseline cache.
1380    30th USENIX Security Symposium
USENIX Association
(a) Set-Associative Eviction(b) Goal: Fully-Associative Global EvictionABC  X Line-InstallSet-Conﬂict Cache SetsAny line evicted(c) Our Proposal MirageLineInstallLoad-Balancing PlacementExtra Tags & IndirectionData-StoreAny line evicted}Global ReplacementTag-Storef1f2BCAll Cachelines Form a Single Set A  X Line-Install}2 Background and Motivation
2.1 Cache Design in Modern Processors
Processor caches are typically organized at the granularity
of 64-byte cache lines. A cache is typically divided into two
structures – the tag-store and the data-store. For each cache-
line, the metadata used for identiﬁcation (e.g. address, valid-
bit, dirty-bit) is called the tag and stored in the "tag-store",
and there is a one-to-one mapping of the tag with the data
of the line, which is stored in the "data-store". To enable efﬁ-
cient cache lookups, the tag-store is typically organized in a
set-associative manner, where each address maps to a set that
is a group of contiguous locations within the tag-store, and
each location within a set is called a way. Each set consists of
w ways, typically in the range of 8 - 32 for caches in modern
processors (w is also referred to as the cache associativity). As
last-level caches (LLCs) are shared among multiple processor
cores for performance, cachelines of different processes can
contend for the limited space within a set, and evict each other
from the cache – such episodes of "set-conﬂicts" are exploited
in side-channel attacks to evict victim cachelines.
2.2 Threat Model
We assume a threat model where the attacker and victim
execute simultaneously on different physical cores sharing
an LLC, that is inclusive of the L1/L2 caches private to each
core. We focus on conﬂict-based cache side-channel attacks
where the attacker causes set-conﬂicts to evict a victim’s line
and monitor the access pattern of the victim. Such attacks are
potent as they do not require victim and attacker to access any
shared memory. For simplicity, we assume no shared memory
between victim and attacker, as existing solutions [57] are
effective at mitigating possible attacks on shared lines.1
2.3 Problem: Conﬂict-Based Cache Attacks
Without loss of generality, we describe the Prime+Probe at-
tack [35] as an example of a conﬂict-based cache attack. As
shown in Figure 2, the attacker ﬁrst primes a set with its ad-
dresses, then allows the victim to execute and evict an attacker
line due to cache-conﬂicts. Later, the attacker probes the ad-
dresses to check if there is a miss, to infer that the victim
accessed that set. Prior attacks have monitored addresses ac-
cessed in AES T-table and RSA Square-Multiply Algorithms
to leak secret keys [29], addresses accessed in DNN computa-
tions to leak DNN model parameters [60], etc. To launch such
attacks, the attacker ﬁrst needs to generate an eviction-set for
a victim address, i.e. a minimal set of addresses mapping to
the same cache set as the victim address.
1If the attacker and the victim have shared-memory, attacks such as
Flush+Reload or Evict+Reload are possible. These can be mitigated by stor-
ing duplicate copies of shared-addresses, as proposed in Scatter-Cache [57].
We discuss how our design incorporates this mitigation in Section 5.
Figure 2: Example of Conﬂict-Based Attack (Prime+Probe).
2.4 Recent Advances in Attacks and Defenses
Given how critical eviction-set discovery is for such attacks,
recent defense works have proposed randomized caches to
obfuscate the address to set mapping and make it harder to
learn eviction sets. At the same time, recent attacks have con-
tinued to enable faster algorithms for eviction set discovery.
We describe the key related works in this spirit and discuss
the pitfalls of continuing with such an approach.
Move-1: Attack by Eviction Set Discovery in O(n2)
Typically, set-selection functions in caches are undocu-
mented. A key work by Liu et al. [29] proposed an algorithm
to discover eviction-sets without the knowledge of the address
to set mappings – it tests and eliminates addresses one at a
time, requiring O(n2) accesses to discover an eviction-set.
Move-2: Defense via Encryption and Remapping
CEASER [39] (shown in Figure 3(a)) proposed randomiz-
ing the address to set mapping by accessing the cache with
an encrypted line address. By enabling dynamic re-keying, it
ensures that the mapping changes before an eviction-set can
be discovered with an algorithm that requires O(n2) accesses.
Figure 3: Recent Works on Randomized Caches
Move-3: Attack by Eviction Set Discovery in O(n)
Subsequent works [40,52] developed a faster algorithm that
could discover eviction-sets in O(n) accesses, by eliminating
groups of lines from the set of potential candidates, rather than
one line at a time. CEASER is unable to prevent eviction-set
discovery with such faster algorithms.
Move-4: Defense via Skewed Associativity
Scatter-Cache [57] and CEASER-S [40] adopt skewed as-
sociativity in addition to randomized mapping of addresses
to sets, to further obfuscate the LLC evictions. As shown
in Figure 3(b), such designs partition the cache across ways
USENIX Association
30th USENIX Security Symposium    1381
Set-0Set-1ABAXAAttackerProbesMiss for B leaksvictim accessVictim Accesses  XAttacker PrimesInstalls A,BBEvicts BPrime+Probe AttackEvictionSet (X) = {A,B}Requires discovery ofLines that can evict X(a) CEASERScatter-Cache,CEASER-SSets(b)  fLineAddressSkewsf1waysS0f2S1LineAddressFigure 4: (a) Mirage provides the abstraction of a fully-associative design with globally random evictions. (b) It achieves this by
using extra tags and indirection between tags and data-blocks, skewed-indexing, and load-aware skew-selection.
into multiple skews, with each skew having a different set-
mapping and a new address is installed in a randomly selected
skew. Such a design provides greater obfuscation as evic-
tion sets get decided by the line to skew mapping as well.
These designs were shown to be immune to faster eviction set
discovery algorithms [40, 52] that require O(n) steps.
Move-5: Attack by Probabilistic Eviction Set Discovery
A recent work [38] showed that faster eviction-set discovery
in Scatter-Cache is possible with an intelligent choice of initial
conditions, that boosts the probability of observing conﬂicts.
This allows discovery of partial eviction-sets (lines that evict
a target in a subset of the ways) within 140K accesses in
Scatter-Cache, which can enable a conﬂict-based attack.
Pitfalls: There is an interplay between the robustness of de-
fenses and algorithms for eviction set discovery. The security
of past defenses has hinged on obfuscation of eviction-sets.
However, newer algorithms enabling faster eviction-set dis-
covery continue to break such defenses. Ideally, we seek a de-
fense that eliminates Set-Associative Evictions (SAE), which
are the root cause of the vulnerability, as they allow the adver-
sary to learn eviction-sets. Eliminating SAE would not only
safeguard against current algorithms for eviction set discov-
ery but also against a hypothetical oracular algorithm that can