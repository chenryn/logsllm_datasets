troduction of a third party, a cryptographic PRF Service,
which was formalized in [19]. The third party manages a
high entropy secret, which is used to compute high entropy
authentication tokens, stored by the server. The separation
of data and the secret used to compute the data introduces
an additional barrier a brute-force adversary has to overcome.
We describe the main functional and security properties that
should be provided. Subsequently, we show how to build
such a service based on a novel cryptographic primitive called
partially oblivious commitments (PO-COM’s).
Message Privacy. The cryptographic service should be
oblivious about the password m. This ensures that a cor-
rupted service provider does not leak any information about
the password.
Tweak Visibility. The username t must be visible to the
service to allow ﬁne-grained rate-limiting of requests.
Secure Key Rotation. On compromise of the service
master secret key there must a way to issue key updates to
all clients which allow migration of client data to a fresh,
uncompromised key. This key rotation should be secure in
the sense that an attacker who obtains a client and service
state of diﬀerent rotation levels should not be able to make
use of the client database.
In the subsequent sections, we propose our novel cryp-
tographic primitive, PO-COMs, and show how to build a
system as described above based on PO-COMs.
3. PO-COMMITMENTS
We introduce the notion of partially oblivious commitments
(PO-COM). Loosely speaking, a PO-COM is a two-party
protocol between a client C and a server S. The input of C
is a public key pk , a hidden message m, a public tweak t,
and a client secret csk . The server’s input is a secret key
sk (that corresponds to pk ). At the end of the protocol the
client outputs a commitment T and we call T the enrollment
record for t and m. Subsequently, the client can interact
with the server and check that (t, m) is stored in T . We call
this phase the validation phase and the client outputs either
accept or reject.
The security properties of PO-COM follow the ones of
commitment schemes. That is, the enrollment record T is
partially hiding, meaning that T and also the interactive
protocol to compute T hide all information about m, but t
may be leaked. Moreover, PO-COM is binding in the sense
that it is (computationally) hard to a ﬁnd a second pair
(t(cid:48), m(cid:48)) such that the client outputs accept in the validation
phase.
3.1 Deﬁnition of PO-COM
To deﬁne partially oblivious commitments formally, we
introduce the following notations for interactive executions
between algorithms X and Y. Let n ∈ N denote the security
parameter and X be a set. By x ←$ X we denote the uniform
drawing of a random element x from set X. Unless stated
otherwise, all algorithms run in probabilistic polynomial time
(PPT). For an algorithm A, let x ←$A(y) denote the event
that A on input y outputs x. If A is a deterministic algorithm
we write instead x ← A(y). For two PPT algorithms X ,Y
we denote by (a, b) ←$(cid:104)X (x),Y(y)(cid:105) the event that the joint
execution of X on input x and Y on input y produces local
output a for X and b for Y, respectively. If there is only one
output, then it is assumed to be for X . We denote with M
the space of messages and with T the space of tweaks. We
write Y(cid:104)X (x),·(cid:105)(y) if Y can invoke an unbounded number of
executions of the interactive protocol with X in arbitrarily
interleaved order.
Deﬁnition 1 (Partially Oblivious Commitments). A par-
tially oblivious commitment scheme consists of a tuple of
eﬃcient algorithms Π = (Setup,(cid:104)C,S(cid:105)enrl,(cid:104)C,S(cid:105)val), in three
phases:
Setup Phase. On input the security parameter, Setup(1n)
outputs a client secret csk as well as a pair (pk , sk ).
The client is provided with public key pk and client
secret csk , while the server gets secret key sk .
Enrollment Phase. The joint execution (cid:104)C(csk , pk , t, m),
S(sk )(cid:105)enrl for a message m ∈ M and tweak t ∈ T
generates an enrollment record T (the commitment)
for the client.
Validation Phase. The joint execution (cid:104)C(csk , pk , T, t, m),
S(sk )(cid:105)val for an enrollment record T , a message m ∈
M, and tweak t ∈ T generates a binary decision
{accept, reject} for the client.
A partially oblivious commitment scheme Π is correct if
for all n ∈ N, all keys (csk , pk , sk ) ←$ Setup(1n), all pairs of
messages and tweaks (t, m), and all T ←$(cid:104)C(csk , pk , t, m),
S(sk )(cid:105)enrl, the probability that (cid:104)C(csk , pk , T, t, m),S(sk )(cid:105)val
outputs accept is 1.
Deﬁnition 2 (Key Rotation). A PO-COM Π has key rota-
tion if there exists a key rotation protocol between client and
server such that the joint execution (cid:104)C(csk , pk , T ),S(sk )(cid:105)rot
for an enrollment record T generates an updated record T (cid:48),
a new public key pk(cid:48), and client secret csk(cid:48) for the client as
well as an updated secret key sk(cid:48) for the server.
Key rotation is correct, if for all (csk , pk , sk ) ←$ Setup(1n)
and tweak-message pairs (t, m) it holds that for an en-
rollment record T ←$(cid:104)C(csk , pk , t, m),S(sk )(cid:105)enrl after key
rotation ((csk(cid:48), pk(cid:48), T (cid:48)), sk(cid:48)) ←$(cid:104)C(csk , pk , T ),S(sk )(cid:105)rot the
updated T (cid:48) validates with the new key, i.e., accept ←$
(cid:104)C(csk(cid:48), pk(cid:48), T (cid:48), t, m),S(sk(cid:48))(cid:105)val.
3.2 Security of PO-COM
A partially oblivious commitment protocol allows to prove
that a tweak-message pair (t, m) is contained in a jointly
generated enrollment record T , which leaks no information
about m. The enrollment record T is veriﬁable, meaning
that there exists an interactive protocol to check whether
(t, m) is contained in T . Based on the applications we have
in mind, we derive the following security goals.
Hiding. In all interactions between both parties, the tweak is
revealed to the server, while the message should stay private
to the client.
Binding. The enrollment record must be binding, which
means that given some enrollment record T an attacker
should not be able to produce a diﬀerent, valid input pair
other than the originally enrolled pair.
Obliviousness. Given only an enrollment record, an at-
tacker should be oblivious about m, meaning that he should
not able to verify a guess for the input message that was
used to create the record.
In the following, we formalize these requirements in terms
of cryptographic games.
3.2.1 Partial Hiding
Our notion of partial hiding says that the enrollment record
T hides all information about the message m, but may leak
information about the tweak t. This security notion is useful
in settings like password-based authentication, where input
t, the username, is revealed to the server, while input m, the
password, should stay hidden.
Deﬁnition 3 (Partial Hiding). A partially oblivious com-
mitment protocol Π = (Setup,(cid:104)C,S(cid:105)enrl,(cid:104)C,S(cid:105)val) is partially
hiding if for any two-stage PPT adversary A = (A1,A2)
there exists a negligible function negl(n) such that
Π,A(1n) = 1(cid:3) − Pr(cid:2)Hiding1
Π,A(1n) = 1(cid:3)(cid:12)(cid:12) ≤ negl(n) ,
(cid:12)(cid:12)Pr(cid:2)Hiding0
where the randomness is taken over the random coins of the
experiments and the adversary. The two experiments are
deﬁned as follows:
Π,A(1n)
Hidingb
(csk , pk , sk , t, m0, m1, T, st) ←$ A1(1n)
b(cid:48) ←$ A(cid:104)C(csk ,pk ,t,mb),·(cid:105)enrl,(cid:104)C(csk ,pk ,T,t,mb),·(cid:105)val
return (b = b(cid:48))
2
(st)
3.2.2 Binding
A partially oblivious commitment protocol must be bind-
ing in the sense that it should be computationally hard to
ﬁnd two distinct pairs (t, m), (t(cid:48), m(cid:48)) for a record T , such that
the validation protocol outputs accept for both pairs. In
the context of password-based authentication, this property
ensures that the validation protocol will fail with overwhelm-
ing probability if the pair (t, m) does not have a matching
enrollment record T generated by the enrollment protocol
T ←$(cid:104)C(csk , pk , t, m),S(sk )(cid:105)enrl.
Deﬁnition 4 (Binding). A partially oblivious commitment
protocol Π = (Setup,(cid:104)C,S(cid:105)enrl,(cid:104)C,S(cid:105)val) is binding if for any
PPT adversary A there exists a negligible function negl(n)
such that
Pr(cid:2)BindingΠ,A(1n) = 1(cid:3) ≤ negl(n) ,
where the randomness is taken over the random coins of the
experiment and the adversary. The experiment is deﬁned as
follows:
BindingΠ,A(1n)
(csk , pk , sk ) ←$ Setup(1n)
((t0, m0), (t1, m1), T ) ←$ A(cid:104)·,S(sk )(cid:105)enrl,(cid:104)·,S(sk )(cid:105)val (csk , pk )
d0 ←$ (cid:104)C(csk , pk , T, t0, m0), S(sk )(cid:105)val
d1 ←$ (cid:104)C(csk , pk , T, t1, m1), S(sk )(cid:105)val
if (t0, m0) (cid:54)= (t1, m1) and d0 = d1 = accept
return 1
else return 0
3.2.3 Obliviousness
An enrollment record T is oblivious in the sense that the
adversary in unable to verify a guess for (t, m) without run-
ning the validation protocol with the server. We formalize
this intuition in a game where the adversary chooses two
messages, obtains an enrollment record T and can only guess
which of the two messages is stored in T . In our applica-
tion, this property prevents oﬄine brute-force attacks at
reproducing the values t and m from their enrollment record
T .
Deﬁnition 5 (Obliviousness). A partially oblivious commit-
ment protocol Π = (Setup,(cid:104)C,S(cid:105)enrl,(cid:104)C,S(cid:105)val) is oblivious if
for any two-stage PPT adversary A = (A1,A2) there exists
a negligible function negl(n) such that
Π,A(1n) = 1(cid:3) − Pr(cid:2)Obliv1
Π,A(1n) = 1(cid:3)(cid:12)(cid:12) ≤ negl(n) ,
(cid:12)(cid:12)Pr(cid:2)Obliv0
where the randomness is taken over the random coins of the
experiments and the adversary. The two experiments are
deﬁned as follows:
Π,A(1n)
Oblivb
(csk , pk , sk ) ←$ Setup(1n)
(t, m0, m1, st) ←$ A(cid:104)·,S(sk )(cid:105)enrl,(cid:104)·,S(sk )(cid:105)val
T ←$ (cid:104)C(csk , pk , t, mb), S(sk )(cid:105)enrl
b(cid:48) ←$ A(cid:104)·,S(sk )(cid:105)enrl
return (b = b(cid:48))
(st, T )
1
2
(csk , pk )
Secure Key Rotation
3.2.4
Key rotation should render an old client state useless to
the adversary and further an old server secret key should
not help in recovering information from an updated client
database. All security properties must hold in the presence
of key- rotations. Please refer to the full version of this paper
for a formal deﬁnition of secure key-rotation and further
discussions about hiding, binding, and obliviousness in the
presence of key-rotations.
Client C(csk , pk , t, m)
r ←$ Zq
v := mr·csk
parse c := (c1, c2, c3), π := (z, A, B)
(cid:48) ← H(g, pk , A, B, c2, c3/v)
h
if A = gz · ch(cid:48)
then return T := (c1, c2, c3/m(r−1)·csk )
else return ⊥
2 and B = pk z(c3/v)h(cid:48)
Server S(sk )
parse sk := (x, k)
y ←$ Zq; s ← Fk(t)
c = (c1, c2, c3) := (gy, gsy, gsxy · v)
−−−−−−−−−−−−−−−−−−−−−−−−→
(t, v)
T (cid:48) := (c, π)
←−−−−−−−−−−−−−−−−−−−−−−−−// Compute the proof of correctness
(cid:96) ←$ Zq; A := g(cid:96); B := Ax
h ← H(g, gx, A, B, gsy, gsxy)
z := (cid:96) − (hsy); π := (z, A, B)
Figure 1: The enrollment protocol.
4. CONSTRUCTION OF PO-COM
In this section we present our construction of partially
oblivious commitments. Due to space constraints, we omit
the deﬁnition of pseudorandom function, non-interactive
zero-knowledge proofs, and the deﬁnition of the decisional
Diﬃe-Hellman (DDH) problem.
4.1
Intuition
The core part of our construction can be seen as a “twin
key” variant of the Pedersen commitment scheme [36]. To
illustrate this idea, let x be a secret key, gx the corresponding
public key, and k the key of a pseudorandom function F .
To commit to a tweak t and a message m, the client sends
a blinded version (t, mr) to the server. The server derives
a twin-key via the PRF as s ←$ Fk(t) and computes the
enrollment record T (the commitment) choosing a random
value y and using both keys s and x. That is, it computes
T as T = (gy, gsy, gsxy · mr). Computing the twin key s
via a PRF ensures that the record depends deterministically
on the non-hidden tweak t and the PRF property ensures
that the output is computationally indistinguishable from
random. To enable client speciﬁc secure key rotation, each
client keeps its own client secret csk, which is used to shift