LABS
Back to the Future
Our journey back to the future of Windows vulnerabilities 
and the 0-days we brought back with us
●
15+ years in Cyber Security
●
Director of Security Research @ SafeBreach
●
Main focus in APT and vulnerability research
2
Tomer Bar
Director of Security Research
LABS
●
7+ years in Cyber Security
●
Security Researcher @ SafeBreach
●
Main focus in vulnerability research
3
Eran Segal
Security Researcher
LABS
4
In memory of my dad  
David
1951-2021
5
Research State of Mind
“Learn from the 
past if you want 
to predict the 
future”
Confucius
6
Agenda
●
Research background
●
Solution process and Infrastructure
●
The 4-step process from 0 to 0-day
●
E2E example
●
Discovered and reported on six vulnerabilities
●
Two post-exploitation
●
Deferred Patching
●
Closure and Q&A 
7
Research Goals
●
Rapid analysis of security 
patches in Windows
○
Root cause analysis
○
Prioritization of 
vulnerabilities
1
1 days 
Automatic 
exploitation poc’s 
2
0 days 
Semi-automatic 
approach
3
8
Research Assumptions
Microsoft will ﬁx (patch) the 
same vulnerability classes 
with similar patches 
techniques/logic
1
The code after the patch 
might be still vulnerable
2
3
A patched function is a 
good candidate for other 
vulnerabilities 
9
A Story Of One Function:
ETWpNotifyGuid - 5 vulnerabilities
10
A Story Of One Function: ETWpNotifyGuid - 5 vulnerabilities
Ntoskrnl function - WIN10 
CVE-2020-1033
LPE
Invalid check of the input
CVE-2021-1682
LPE
Heap Overﬂow due to assign in to 
offset 0x50
In any allocated buffer
CVE-2020-1034
Information Disclosure
Invalid check on boolean variable
(checks relevant for bit mask)
CVE-2021-1662
LPE
Wrong bound check leads 
to OOB write to kernel pool
11
Research Approach
●
Past approach
○
Manual patch diﬀ of a Single Vulnerability 
○
The goal is limited to understanding the root cause usually for constructing a 1-day POC
●
Our approach - an automated process that would gather all the insights 
from all the patches in a single, searchable db for 0-day hunting
We adopted a new approach, in terms of both the goal and how to get there.
12
Steps to reach our goal - 0 Day
1-day
Generate code 
to trigger the 
vulnerable function 
3
Find vulnerable 
functions via 
patch-diﬃng 
1
0-day
Find similar 
unpatched patterns 
4
Correlate CVEs 
to patches
2
13
Find vulnerable 
functions via 
patch-difﬁng
Step 1
14
Step 1 - Patch pipeline
Download all 
Windows 8.1 
security only 
updates
Extract 
patched
ﬁles
Binary
Diﬃng
Classify 
changes
Store 
Features 
into DB
15
Collecting 6 years of Windows Patch-Difﬁng
770,000  
Total changed functions
105,000 
Unique changed functions 
7,150 
 Patched PEs
970  
Unique PEs
54 
Security 
updates
16
Structure of KB
KB = msu File
Packages
Patched ﬁles
17
Recompilation challenges
●
Instruction reordering
●
Basic blocks reorder
●
Opcode changes 
●
Alignments
1st Compile                                                 Recompile
18
Step 1 - Features Types
Patch-related features
●
XREF - Added/remove/changed function calls
●
Changes amount of loops or conditions
●
Changes in deprecated functions
●
Etc.
Vulnerability-related features
●
Integer overﬂow 
●
Use after free 
●
Directory traversal 
●
Etc. 
19
2019
20
Step 1 - Num of Xrefs - Example - CVE-2019-1280
ReadPROPVARIANT function calls 10 times to 
IStream_Read vs 9 calls in unPatched version 
21
Step 1 - Num of Xrefs- Example - CVE-2019-1280
22
Step 1 - Num of Xrefs- Example - CVE-2019-1280
Type confusion - Reading DECIMAL from ﬁle 
without resetting vt to VT_DECIMAL type (0xE) 
23
2018
24
Step 1 - Number of Conditions - CVE-2018-8411
25
Step 1 - Number of Conditions - CVE-2018-8411
Incorrect Authorization -> 
NTFS list directory by sid with no conditions
Patch - Added 5 conditions 
26
Vulnerability 
category features
●
Integer Overﬂow
●
Use After Free 
●
Integrity Level
●
Race Condition
●
Directory Traversal
●
Symbolic link vulnerabilities
27
2020
28
29
Step 1 - Integer Overﬂow Example - CVE-2020-0796
SMB GHOST patch - usage of RTlULong functions
30
2016
31
Step 1 - Integer Overﬂow Example - ms16-098
As presented @ Defcon 25
This time UlongMult function was used  
MS16-098:Win32k!bFill Integer Overﬂow
32
Step 1 - Integer Overﬂow Example 
Our Integer Overﬂow feature returned with 200+ results 
PATCHED FILE
PATCHED FUNCTION
ADDED CALL (XREF)
33
34
Step 1 - Integer Overﬂow Example - NTDLL  - April 2020
The only function that was really changed was 
LdrpSearchResourceSection_U
35
Step 1 - Integer Overﬂow Example - NTDLL  - April 2020
Same pattern was used, this is a patch pattern at least since 2016
36
Step 1 - Integrity Level Examples
Search for added functions named “IntegrityLevel”
CVE-2019-1365
CVE-2017-0100
37
Correlate CVEs
to patches
Step 2
38
Step 2 - Correlation of CVE to patched ﬁle
Name
CVE Number
CVE Description
●
Microsoft provide an API for download CVE details
●
New API and tool were released recently
●
We have created an automated process that uses this API
39
Step 2 - Correlation process of CVE to patched ﬁles 
Extract patched 
ﬁles from 
package
Query CVE data
Extract vulnerable 
components name
(VCN) 
Correlation logic
Step 2 - Correlation logic
1
Correlation logic based on 4 methods
Example:
CVE-2020-1511
Connected User Experiences and Telemetry 
Service EoP Vulnerability (diagtrack.dll)
Service Name
41
Step 2 - Correlation logic
Example:
CVE-2019-1267
Microsoft Compatibility Appraiser 
EoP Vulnerability - (appraiser.dll)
Correlation logic based on 4 methods
Executable Description
2
42
Step 2 - Correlation logic
Internals Knowledge
Example:
CVE-2020-0783
Windows UPnP Service 
EoP Vulnerability (umpnpmgr.dll)
150 Executables were correlated using this method
Correlation logic based on 4 methods
3
43
Step 2 - Correlation logic
●
“Error reporting” was the VCN in 3 monthly patches
●
“Print spooler”    was the VCN in 4 monthly patches                                                        
VCN - NUMBER OF PATCH TUESDAY’S IN 2020
Which ﬁles were 
patched only
in those patch 
Tuesdays
ASSOCIATED PATCHED FILES
Past Associations
4
44
Trigger the 
vulnerable functions
Step 3
45
Step 3 -  Trigger the Vulnerable Functions
●
Extract all the executables that call the vulnerable function
○
Generate call graphs 
●
Generate a code that will trigger the vulnerability
○
Find examples in the internet
○
Support COM APIs
○
Support RPC APIs
46
Step 3 - Generating call graphs
Mapping all function calls across executables
47
Step 3 - Generating call graphs
“If you don't know where you are going any road will get you there” - Lewis Carroll
48
Step 3 - Enriching our graphs 
MSDN
GitHub 
49
Step 3 - Generate RPC clients 
50
Step 3 - Generate RPC clients
Got 127 working projects
Project ﬁles
51
Step 3 - Generate code to Trigger RPC server
CVE-2018-8440 - Sandbox Escaper ALPC LPE example
52
Step 3 - Generate code to Trigger RPC server
CVE-2018-8440 - Sandbox Escaper ALPC LPE example
53
Step 3 - Generate code to Trigger RPC server
CVE-2018-8440 - Sandbox Escaper ALPC LPE example
54
0-day hunt
Step 4
55
Vulnerability categories
56
Past XXE vulnerabilities
1.
CVE-2017-0170 - Windows Performance Monitor 
2.
CVE-2017-8557 - Windows System Information Console 
3.
CVE-2017-8710 - Windows System Information Console
4.
CVE-2018-0878 - Windows Remote Assistance
5.
CVE-2018-8527 - SQL Server Management Studio 
6.
CVE-2019-0948 - Windows Event Viewer
7.
CVE-2019-1079 - Visual Studio
8.
CVE-2020-0765 - Remote Desktop Connection Manager
We ran our CVE tool and found 8 past xxe vulnerabilities between 2017-2021:
57
Intro to XXE
58
How XXE works
Example how to trigger XXE
59
XXE - Root Cause Analysis - msra
Msra.exe - CVE-2018-0878 - function LoadRATicket - added 4 conditions (35->39) 
60
XXE - Root Cause Analysis - msra
LoadRATicket - the Unpatched version
61
XXE - Root Cause Analysis - msra
Patched version
The 4th condition
disable resolve externals
1
62
XXE - Root Cause Analysis - upnphost
We develop a feature to search for all added prohibitDTD patches and found 3 additional patches
63
XXE - Root Cause Analysis - upnphost
We develop a feature to search for all added prohibitDTD patches and found 3 additional patches
64
Conditions for XXE
Vulnerable functions:
●
Load
●
loadXML
●
set_xml
1
No restrictions for 
DTD were applied
2
Vulnerable CLSID 
(COM object)
3
4
Control over input 
XML
65
XXE - Detect vulnerable CLSIDs
●
Discover all Windows 10 CLSIDs
●
Enumerate all COM interfaces and functions
●
Call all the XML related functions  in order to trigger XXE vulnerability.
66
XXE - Detect vulnerable COM servers 
C2 server view - 16 vulnerable CLSIDs
Vuln function
Vuln interface
Vuln clsid
67
XXE feature - automatic 0-day 
Now, let's wrap it all in one feature using IDA python
68
XXE feature - automatic 0-day 
Msra patched function
loadRATicket
But other msra functions
Seems vulnerable
69
XXE - automatic 0-day - msra 
Msra LoadAndSortRAInvitationsHistory
Xref the 2nd vulnerable clsid
CVE-2018-0878 - patched LoadRATicket
But havent patched other use of the vulnerable
Com object
70
XXE - automatic 0-day - msra 
LoadAndSortRAInvitationsHistory function
71
XXE - automatic 0-day - msra 
GetInvitationManagerLoaded function
28 = appdata
72
XXE - automatic 0-day - msra 
Msra UI - invitation history usage = how to trigger the vulnerability  
73
XXE - automatic 0-day - msra - CVE-2021-34507 
Fully Patched Windows 10
C2 server
74
Automatic 0-days - SIX Discovered vulnerabilities
0 Day
CVE-2021-34507
MS Remote Assistance 
0 Day
unpatched
Windows
Help
Microsoft Management 
Console
Window Media
Player
MSIL
XML Schema Deﬁnition Tool
MSIL
 XSLT compiler
✓
0 Day
unpatched
0 Day
unpatched
0 Day
unpatched
0 Day
unpatched
75
XXE - Windows Help 0-day vulnerability
76
Microsoft Management Console 0-day vulnerability
77
XXE Windows Media Player
Call Stack - calling MSXML3!Document::Load  - vulnerable to XXE
WMP - Vulnerability triggering
78
Automatic 0-days in dotNet
For every executable in Windows 10 
we created a .Net project 
An example of a project 
79
.Net Windows SDK  - 2 XXE Vulnerabilities
●
The root cause of xsd.exe is XmlTextReader 
●
The root cause of xsltc.exe is a conﬁguration error in XmlReaderSettings. It explicitly 
enables the use of DTD.
80
Post Exploitation Technique - p2p.dll 
81
Generate call graph from UnwrapXMLInvitation
82
New Alternative to discover 0-days - CVE-2020-1300
83
New Alternative to discover 0-days - No patch at all
Windows 8.1 - August 2020 - Microsoft patched the vulnerability by adding a check that the 
path doesn’t contains ../ or ..\\. The patch was done on June to localspl,win32spl.dll 
but not to printbrmenigne.exe
The Directory traversal feature search for any function 
that get ../ or ..\\ as an argument.
are vulnerable to XXE using
84
New Alternative to discover 0-days - CVE-2020-1300 
Windows 8.1 - August 2020 - PrintBrmEngine.exe was ﬁnally patched by Microsoft using the same logic
85
New Alternative to discover 0-days - No patch at all
PrintBrmEngine.exe 
was not patched
localspl.dll 
was patched
86
New Alternative to discover 0-days - No patch at all
87
Microsoft Response
1.
The msra vulnerability was ﬁxed as part of July Patch Tuesday.
2.
Regarding the other 5 vulnerabilities we reported, no ﬁx is currently planned.
88
GitHub
1.
Download and extract patches scripts
2.
Auto binary diﬃng 
3.
Flow graph tool
4.
RPC - idl’s reordering and compiling
5.
XXE Com object triggering
6.
0-day XXE discoverer ( IDA python module)
https://github.com/SafeBreach-Labs/Back2TheFuture
All will be published with bsd 3-clause license
89
Credits
1.
https://cdmana.com/2021/02/20210212144254843t.html
2.
https://media.defcon.org/DEF%20CON%2025/DEF%20CON%2025%20presentations/DEF%20CON%2025%20-%205A1F-Demystif
ying-Kernel-Exploitation-By-Abusing-GDI-Objects.pdf
3.
https://www.zerodayinitiative.com/blog/2020/7/8/cve-2020-1300-remote-code-execution-through-microsoft-windows-cab-ﬁles
4.
https://krbtgt.pw/windows-remote-assistance-xxe-vulnerability
5.
https://github.com/VikasVarshney/CVE-2020-0753-and-CVE-2020-0754
6.
https://research.checkpoint.com/2019/microsoft-management-console-mmc-vulnerabilities/
7.
https://media.rootcon.org/ROOTCON%2013/Talks/Pilot%20Study%20on%20Semi-Automated%20Patch%20Diﬃng%20by%20Ap
plying%20Machine-Learning%20Techniques.pdf
8.
https://www.blackhat.com/html/webcast/11192015-exploiting-xml-entity-vulnerabilities-in-ﬁle-parsing-functionality.html
9.
https://defcon.org/images/defcon-21/dc-21-presentations/Kang-Cruz/DEFCON-21-Kang-Cruz-RESTing-On-Your-Laurels-Will-Get-
You-Pwned-Updated.pdf
10.
https://owasp.org/www-pdf-archive/XML_Exteral_Entity_Attack.pdf
11.
http://hyp3rlinx.altervista.org/advisories/MICROSOFT-INTERNET-EXPLORER-v11-XML-EXTERNAL-ENTITY-INJECTION-0DAY.txt
LABS
Thank you!
Tomer Bar
Eran Segal
91
Q&A