27:
28:
29:
30:
31: return 𝑆2
B Algorithm 9 (FindExtremePairs)
Let D be a database with 𝑅 records and let RS(D) be its response
set. Algorithm 9 (FindExtremePairs) returns all configurations of
extreme points (left, right, top, bottom) such that no points are dom-
inated by left and bottom, and no points dominate right and top.
if 𝑝 ∈ 𝑀 − 𝑆2 then
𝑃𝑝,top, 𝑆𝑝,top, 𝑃top,𝑝 = Boxes(top, 𝑝)
𝑆 = 𝑃𝑝,top ∪ 𝑆𝑝,top ∪ 𝑃top,𝑝
if left, right ∈ 𝑆 then
return 𝑆2 // 𝑎 and top are collinear
else if left ∈ 𝑆 then
return 𝑆2 // top dominates 𝑎
else if right ∈ 𝑆 then
// top anti-dominates 𝑎
𝐸 = Edges(𝑀 − {𝑎}, RS(D))
𝑆2 = 𝑆2 − 𝑀
Add all 𝑝 in an edge in 𝐸 not containing top or 𝑎′ ∈ 𝐴0 to 𝑆2.
return 𝑆2
else if 𝑝 ∈ 𝑀 − 𝑆1 then
𝑃𝑝,𝑎, 𝑆𝑎,𝑝, 𝑃𝑎,𝑝 Boxes(𝑎, 𝑝)
𝑆 = 𝑃𝑝,𝑎 ∪ 𝑆𝑎,𝑝 ∪ 𝑃𝑎,𝑝
if left, right ∈ 𝑆 then
return 𝑆2 // 𝑎 and top are collinear
else if right ∈ 𝑆 then
return 𝑆2 // top dominates 𝑎
else if left ∈ 𝑆 then
// top anti-dominates 𝑎
𝐸 = Edges(𝑀 − {𝑎}, RS(D))
𝑆2 = 𝑆2 − 𝑀
Add all 𝑝 in an edge in 𝐸 not containing top or 𝑎′ ∈ 𝐴0 to 𝑆2.
return 𝑆2
[48] Boyang Wang, Yantian Hou, Ming Li, Haitao Wang, and Hui Li. 2014. Maple:
Scalable Multi-Dimensional Range Search over Encrypted Cloud Data with Tree-
Based Index. In Proc. ACM Symp. on Information, Computer and Communications
Security (ASIA CCS).
[49] Zheguang Zhao, Seny Kamara, Tarik Moataz, and Stan Zdonik. 2021. Encrypted
Databases: From Theory to Systems. In Conf. on Innovative Data Systems Research
(CIDR).
A Algorithm 8 (DominanceID)
We describe how given the response set RS(D) and the ID 𝑎 of
a point with height 0, we compute the full set of IDs of points
that dominate D[𝑎]. Let 𝑎, 𝑏 ∈ [𝑅] be the IDs of two points in
D. Algorithm Boxes, takes as input a pair (𝑎, 𝑏) and returns the
following responses of RS(D) (see Figure 11):
• 𝑆𝑎,𝑏: minimal response containing 𝑎 and 𝑏.
• 𝑃𝑎,𝑏: D minus the maximal responses containing 𝑏 but not 𝑎;
i.e., set of points 𝑝 such that every response containing 𝑏
and 𝑝 contains also 𝑎.
• 𝑃𝑏,𝑎: D minus the maximal responses containing 𝑎 but not 𝑏;
i.e., set of points 𝑝 such that every response containing 𝑎
and 𝑝 contains also 𝑏.
Algorithm 6: Boxes(𝑎, 𝑏)
1: Let 𝑆𝑎,𝑏 be the smallest response in RS(D) containing 𝑎 and 𝑏,
2: Let 𝐿 = D and 𝑃𝑏,𝑎, 𝑃𝑎,𝑏 be empty lists
3: for 𝑝 ∈ 𝐿 do
4:
5:
6:
7:
8: return 𝑃𝑏,𝑎, 𝑆𝑎,𝑏 and 𝑃𝑎,𝑏
if (cid:154)𝑟 ∈ RS(D), s.t. 𝑝, 𝑏 ∈ 𝑟 and 𝑎 ∉ 𝑟 then
Add 𝑝 to 𝑃𝑎,𝑏
if (cid:154)𝑟 ∈ RS(D), s.t. 𝑝, 𝑎 ∈ 𝑟 and 𝑏 ∉ 𝑟 then
Add 𝑝 to 𝑃𝑏,𝑎
Figure 11: Sets output by Algorithm 6 for 𝑎, 𝑏 ∈ D, when 𝑏
strictly anti-dominates 𝑎 (left) and they are co-linear (right).
Given a pair of IDs (𝑎, 𝑏), there are at most two distinct maximal
responses containing 𝑎 but not 𝑏 (or 𝑏 but not 𝑎). These responses
comprise the points in the maximal horizontal and vertical strips
of the domain that contain 𝑎 but not 𝑏 (or 𝑏 but not 𝑎). If 𝑎 and
𝑏 share the same horizontal or vertical coordinate, only one of
the above strips is nonempty. Algorithm 8 (DominanceID) uses
Boxes to determine if top dominates 𝑎. If yes, then we return the
minimal response containing 𝑎, top and right. Else top must strictly
antidominate 𝑎. Let 𝑆 be the smallest response containing 𝑎, top
and right and let 𝑀 be the smallest response containing 𝑎 and top.
It is clear that 𝑆 − 𝑀 contains all IDs of points that strictly dominate
𝑎. To find the IDs of points that are colinear with 𝑎, we run Edges
with 𝑀 − {𝑎} as input; the IDs of points that are colinear with 𝑎
must be one of the edges in the output. In particular, the colinear
points must be 𝑝 ∈ 𝐸 such that 𝐸 is the edge not containing top, left,
or any element of 𝐴0. And so the algorithm outputs (𝑆 − 𝑀) ∪ 𝐸.
bPa,bSa,bPb,aabPa,bSa,bPb,aaSession 7C: Database and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2257Algorithm 9: FindExtremePairs(RS(D))
Input: Response set RS(D) of database D
1: 𝐸1, 𝐸2, 𝐸3, 𝐸4 = Edges(D, RS(D))
2: Let PossibleConfigs be all possible combinations of 𝐸1, 𝐸2, 𝐸3 and 𝐸4
into LeftE, RightE, TopE, BottomE.
3: Initialize empty dictionary config.
4: for LeftE, RightE, TopE, BottomE in PossibleConfigs do
5:
6:
7:
for 𝐸1, 𝐸2 ∈ {LeftE, BottomE}, {RightE, TopE} do
for 𝑎, 𝑏 ∈ 𝐸1 × 𝐸2 do
if the smallest response in RS(D) that contains 𝑎 and 𝑏 does not
contain any other element of 𝐸1 or 𝐸2 then
Add 𝑎, 𝑏 to config under their corresponding key left, right,
top, or bottom.
Return to line 5.
8:
Add config to PosExtremes.
9:
10:
11: Return PosExtremes
C Proofs
C.1 Proof of Proposition 2
Proof. Let D[𝑖] = 𝑝, D[ 𝑗] = 𝑞, D′[𝑖] = 𝑝′, and D′[ 𝑗] = 𝑞′.
We first show that RS(D) ⊆ RS(D′). Consider a response 𝐴 in
RS(D) that contains 𝑖 and not 𝑗. We will exemplify a query to
D′ with response 𝐴. Consider the set 𝐵 = (𝐴 − {𝑖}). Since D[𝑖]
has a unique maximal value in the second coordinate the set 𝐵
must be an element of RS(𝐷). By assumption, RS(D − {𝑝, 𝑞}) =
RS(D′−{𝑝′, 𝑞′}) and so we have that 𝐵 ∈ RS(D′). Let (𝑐, 𝑑) ∈ D2 be
a query that generates the response 𝐵 in D′. Now consider the query
((𝑚𝑖𝑛0, 1), (𝑚𝑎𝑥0, 𝑑1)) where 𝑚𝑖𝑛0 = min(𝑐0, 𝑝0, 𝑝′
0) and 𝑚𝑎𝑥0 =
max(𝑑0, 𝑝0, 𝑝′
0). Since the only additional identifier contained in this
region is 𝑖, then the response generated by this query is 𝐴 = 𝐵 ∪{𝑖}
which implies 𝐴 ∈ RS(D′). A similar argument holds for queries
that contain 𝑗 and not 𝑖, as well as queries that contain both 𝑖 and 𝑗,
which concludes the forward direction of the proof. One can also
extend this reasoning to show that RS(D′) ⊆ RS(D).
□
C.2 Proof of Proposition 3
Proof. Let D[𝑖] = 𝑞 and D′[𝑖] = 𝑞′. By assumption RS(D −
{𝑞}) = RS(D′ − {𝑞′}). We first show that RS(D) ⊆ RS(D′). We
claim that for any response 𝐴∪{𝑖} in RS(D) there exists a response
𝐴 ∪ {𝑖} ∈ RS(D′). Let 𝐴 ∪ {𝑖} be a response in RS(D) and let
(𝑐, 𝑑) ∈ D2 be a query to D that produces such a response. We will
consider two possible cases and in each case explicitly give a query
to D′ that must result in the response 𝐴 ∪ {𝑖}.
Case 1: 𝑝0 < 𝑐0. Consider the query ((𝑐0, 𝑚𝑖𝑛1), 𝑑) issued to D′ such
that 𝑚𝑖𝑛1 = min(𝑞′
since all points 𝑟 ∈ 𝐴 are identical in both D and D′ and 𝑞′ is
contained in this query. Else if 𝑚𝑖𝑛1 = 𝑞′
1 then by definition of
close pair, 𝑞, 𝑞′ must minimally dominate 𝑝. So no additional points
beside 𝑞′ are contained in the response generated by ((𝑐0, 𝑚𝑖𝑛1), 𝑑)
thus Resp(D′, ((𝑐0, 𝑚𝑖𝑛1), 𝑑)) = 𝐴 ∪ {𝑖}.
Case 2: 𝑐0 ≤ 𝑝0. Since the query (𝑐, 𝑑) contains 𝑞 then we have 𝑐 ⪯ 𝑝
and 𝑞 ⪯ 𝑑. Moreover 𝑝 ⪯ 𝑞′ ⪯ 𝑞 and so Resp(D′, (𝑐, 𝑑)) = 𝐴 ∪ {𝑖}.
That proves the forward direction of the proof. A similar ar-
gument holds for the backward direction and we conclude that
RS(D) = RS(D′).
□
Resp(D′, ((𝑐0, 𝑚𝑖𝑛1), 𝑑)) = Resp(D′, (𝑐, 𝑑)) = 𝐴 ∪ {𝑖}
1, 𝑐1). If 𝑚𝑖𝑛1 = 𝑐1 then
C.3 Proof of Lemma 5.1
Proof. We first show that Algorithm 7 returns the correct edges
i.e. the sets 𝐸𝑖 for 𝑖 ≤ 4 contain IDs of all points with an extreme
coordinate value. Note that the second largest response in RS(D)
must exclude the ID of some extreme point 𝑝. For a contradiction,
suppose 𝑝 is not extreme. Then we could minimally extend the
query to include 𝑝 and the resulting query would have a response
strictly larger than the original query and strictly smaller than [𝑅]
since it is not extreme, hence a contradiction. Now consider the
second largest response containing the ID of 𝑝. The remaining ID(s)
must correspond to points with an extreme coordinate value in
another direction, else we could minimally extend the query to
include the non-extreme point(s). By extending this reasoning, we
recover the IDs of all points with an extreme coordinate.
In Algorithm 9, line 2 stores the at most 4! assignments of the
𝐸𝑖 to LeftE, RightE, TopE, and BottomE. The for loop on line 4 then
iterates through each possible assignment to identify the correct
IDs within each edge set. We want to find the IDs for the left-
most point, 𝑎, and bottom-most point, 𝑏, such that no points are
dominated by D[𝑎] or D[𝑏]. This corresponds to finding 𝑎 ∈ LeftE
and 𝑏 ∈ BottomE such that the minimal response containing them
contains no other extreme points. Suppose for a contradiction that
some edge point 𝑐 was dominated by either 𝑎 or 𝑏, then the minimal
query must also contain 𝑐. A similar argument holds for the top-
most and right-most points.
The algorithm terminates in 𝑂(𝑅|RS(D)|) time. It takes 𝑂(𝑅2 ·
|RS(D)|) time to find the edges. Then, we iterate through pairs of
edges and look through RS(D) to find a smallest response.
□
C.4 Proof of Lemma 5.2
Proof. Let left, right, top and bottom be the points defined by
config. Without loss of generality, assume that right dominates left
and bottom. We first show that lines 2 to 7 find a set of IDs of points
that are not dominating any point in D (i.e. a minimal antichain
𝐴0 of D up to rotation/reflection). By Algorithm 9, no point is
dominated by either left or bottom. Let 𝑆 be the smallest response
in RS(D) containing left and bottom. All points not dominated by
left and bottom must be in 𝑆, and thus 𝐴0 = 𝑆.
By assumption, right must dominate all points with IDs in 𝑆. Let
𝑝 be a point with ID in 𝑆 and consider the response 𝑇 of query
(𝑝, right). If there is a point 𝑞 with ID in 𝑆 such that 𝑝 ⪯ 𝑞, then
its ID must also be in response 𝑇 . In line 6 we find the set 𝑄 of all
such IDs and delete 𝑄 from 𝐴0. Since the for loop on line 4 iterates
through all IDs in 𝑆, and deletes the IDs of all points that must
dominate at least one other point in 𝑆, then at the end of the loop
𝐴0 must be the set of all points not dominating any other point.
On lines 10 to 18, we construct the dominance graph. Let 𝑆 be the
IDs output by DominanceID(RS(D), 𝑎) for some 𝑎 ∈ 𝐴0. Note that
𝑆 − {𝑎} corresponds to the IDs of all records that dominate D[𝑎].
The for loop starting on line 14 correctly builds the dominance
subgraph on all IDs in 𝑆. We show that the following loop invariant
is maintained: at the end of iteration ℓ (1) no point with ID in
𝑆 \ 𝑉 (𝐺𝑎) is dominated by a point with a vertex in 𝐺𝑎 and (2) if 𝑖
and 𝑗 are in 𝑉 (𝐺𝑎) and D[ 𝑗] minimally dominates D[ 𝑗], then edge
(𝑖, 𝑗) is in 𝐺𝑎. At the start 𝐺𝑎 = {𝑎}; this is correct since 𝑎 ∈ 𝐴0 and
𝐴0 is the set of IDs of points that do not dominate any other point.
Assume that at iteration ℓ the invariant holds. Find the next smallest
Session 7C: Database and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2258response 𝑇 that contains 𝑎 and only other IDs in 𝑆. If 𝑇 contains 𝑣
not in 𝐺𝑎 then add it to 𝐺𝑎. (1) holds since no point in 𝑆 \ 𝑉 (𝐺𝑎)
dominates D[𝑣], otherwise it would be contained in 𝑇 and we could
form a strictly smaller response contradicting the minimality of 𝑇 .
For each sink 𝑡 ∈ 𝐺𝑎 such that 𝑡 ∈ 𝑇 we add (𝑡, 𝑣) to 𝐺𝑎. (2) holds
since D[𝑣] must dominate all points with IDs in 𝑇 ∩ 𝑉 (𝐺𝑎) and
must minimally dominate all sinks 𝑡 in 𝐺𝑎 that are contained in 𝑇 .
Suppose there is some ID 𝑗 in 𝑉 (𝐺𝑎) that is minimally dominated
by 𝑣 but is not a sink. Then this would violate the correctness of
𝐺𝑎 at the end of iteration ℓ and hence this cannot happen.
Putting it all together, we want to show that taking the union of
all 𝐺𝑎 gives us the complete dominance graph 𝐺. Let 𝑝, 𝑞 ∈ D be
any points such that 𝑝 ⪯ 𝑞. By correctness of 𝐴0, there exists some
𝑎 ∈ 𝐴0 such that D[𝑎] ⪯ 𝑝, 𝑞, and thus 𝑝 and 𝑞 are contained in the
minimal query of 𝑎, right, and top. By the correctness of 𝐺𝑎, then
an edge from the IDs of 𝑝 to 𝑞 must be added when constructing 𝐺𝑎.
Since every dominance edge is added to a graph 𝐺𝑎 of some 𝑎, then
taking the union over all 𝐺𝑎 gives the complete dominance graph
of D. The Algorithm terminates in 𝑂(𝑅3|RS(D)|) time. It takes
𝑂(𝑅 · |RS(D)|) time to find the first antichain. Then, Algorithm 8
takes 𝑂(𝑅2 · |RS(D)|) and may be run 𝑅 times.