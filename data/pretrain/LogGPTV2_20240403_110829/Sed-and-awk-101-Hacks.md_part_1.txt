![](media/image1.jpeg)[]{#_bookmark1 .anchor}Knowledge is not one man\'s
Entity
Book Hacked by VELOCIRAPTOR
### Sed and Awk 101 Hacks
> **Table of Contents**
Book Hacked by VELOCIRAPTOR
### [[Introduction]{.underline} [6]{.underline}](#_bookmark2)
> [BOOK HACKED BY VELOCIRAPTOR](#_bookmark1)
### [[Chapter 1: Sed Syntax and Basic Commands]{.underline} [9]{.underline}](#chapter-1-sed-syntax-and-basic-commands)
1.  ##### [[Sed Command Syntax]{.underline} [10]{.underline}](#sed-command-syntax)
2.  ##### [[Sed Scripting Flow]{.underline} [12]{.underline}](#sed-scripting-flow)
3.  ##### [[Print Pattern Space (p command)]{.underline} [13]{.underline}](#print-pattern-space-p-command)
4.  ##### [[Delete Lines (d command)]{.underline} [17]{.underline}](#delete-lines-d-command)
5.  ##### [[Write Pattern Space to File (w command)]{.underline} [19]{.underline}](#write-pattern-space-to-file-w-command)
### [[Chapter 2. Sed Substitute Command]{.underline} [23]{.underline}](#chapter-2.-sed-substitute-command)
6.  ##### [[Sed Substitute Command Syntax]{.underline} [23]{.underline}](#sed-substitute-command-syntax)
7.  ##### [[Global Flag (g flag)]{.underline} [24]{.underline}](#global-flag-g-flag)
##### [[8. Number Flag (1,2,3.. flag)]{.underline} [25]{.underline}](#number-flag-123..-flag)
9.  ##### [[Print Flag (p flag)]{.underline} [26]{.underline}](#print-flag-p-flag)
10. ##### [[Write Flag (w flag)]{.underline} [26]{.underline}](#write-flag-w-flag)
11. ##### [[Ignore Case Flag (i flag)]{.underline} [27]{.underline}](#ignore-case-flag-i-flag)
12. ##### [[Execute Flag (e flag)]{.underline} [28]{.underline}](#execute-flag-e-flag)
13. ##### [[Combine Sed Substitution Flags]{.underline} [29]{.underline}](#combine-sed-substitution-flags)
14. ##### [[Sed Substitution Delimiter]{.underline} [29]{.underline}](#sed-substitution-delimiter)
15. ##### [[Multiple Substitute Commands Affecting the Same]{.underline}](#multiple-substitute-commands-affecting-the-same-line) [[Line]{.underline} [30]{.underline}](#multiple-substitute-commands-affecting-the-same-line)
16. ##### [[Power of & - Get Matched Pattern]{.underline} [32]{.underline}](#power-of---get-matched-pattern)
17. ##### [[Substitution Grouping (Single Group)]{.underline} [32]{.underline}](#substitution-grouping-single-group)
18. ##### [[Substitution Grouping (Multiple Group)]{.underline} [34]{.underline}](#substitution-grouping-multiple-group)
19. ##### [[Gnu Sed Only Replacement String Flags]{.underline} [36]{.underline}](#gnu-sed-only-replacement-string-flags)
### [[Chapter 3. Regular Expressions]{.underline} [39]{.underline}](#chapter-3.-regular-expressions)
20. ##### [[Regular Expression Fundamentals]{.underline} [39]{.underline}](#regular-expression-fundamentals)
21. ##### [[Additional Regular Expressions]{.underline} [42]{.underline}](#additional-regular-expressions)
22. ##### [[Sed Substitution Using Regular Expression]{.underline} [45]{.underline}](#sed-substitution-using-regular-expression)
[[Chapter 4. Sed Execution]{.underline}
[47]{.underline}](#chapter-4.-sed-execution)
23. [[Multiple Sed Commands in Command Line]{.underline}
    [47]{.underline}](#multiple-sed-commands-in-command-line)
24. [[Sed Script Files]{.underline} [48]{.underline}](#sed-script-files)
25. [[Sed Comments]{.underline} [49]{.underline}](#sed-comments)
26. [[Sed as an Interpreter]{.underline}
    [49]{.underline}](#sed-as-an-interpreter)
27. [[Modifying the Input File Directly]{.underline}
    [51]{.underline}](#modifying-the-input-file-directly)
[[Chapter 5. Additional Sed Commands]{.underline}
[53]{.underline}](#chapter-5.-additional-sed-commands)
28. [[Append Line After (a command)]{.underline}
    [53]{.underline}](#append-line-after-a-command)
29. [[Insert Line Before (i command)]{.underline}
    [54]{.underline}](#insert-line-before-i-command)
30. [[Change Line (c command)]{.underline}
    [55]{.underline}](#change-line-c-command)
31. [[Combine a, i, and c Commands]{.underline}
    [56]{.underline}](#combine-a-i-and-c-commands)
32. [[Print Hidden Characters (l command)]{.underline}
    [57]{.underline}](#print-hidden-characters-l-command)
33. [[Print Line Numbers (= command)]{.underline}
    [58]{.underline}](#print-line-numbers-command)
34. [[Change Case (using the y \'transform\' command)]{.underline}
    [59]{.underline}](#change-case-using-the-y-transform-command)
35. [[Multiple Files in Command Line]{.underline}
    [60]{.underline}](#multiple-files-in-command-line)
36. [[Quit Sed (q command)]{.underline}
    [61]{.underline}](#quit-sed-q-command)
37. [[Read from File (r command)]{.underline}
    [62]{.underline}](#read-from-file-r-command)
38. [[Simulating Unix commands in sed (cat, grep, head)]{.underline}
    [62]{.underline}](#simulating-unix-commands-in-sed-cat-grep-head)
39. [[Sed Command Line Options]{.underline}
    [64]{.underline}](#sed-command-line-options)
40. [[Print Pattern Space (n command)]{.underline}
    [66]{.underline}](#print-pattern-space-n-command)
[[Chapter 6. Sed Hold and Pattern Space
Commands]{.underline}](#chapter-6.-sed-hold-and-pattern-space-commands)
[[\...\...\...\...\...\...\...\...\...\...\...\...\...\...\...\...\...\...\...\...\...\...\...\....]{.underline}
[68]{.underline}](#chapter-6.-sed-hold-and-pattern-space-commands)
41. [[Swap Pattern Space with Hold Space (x command).
    .69]{.underline}](#swap-pattern-space-with-hold-space-x-command)
    [[42. Copy Pattern Space to Hold Space (h command)]{.underline}
    [70]{.underline}](#copy-pattern-space-to-hold-space-h-command)
[[43. Append Pattern Space to Hold Space (H command) .
71]{.underline}](#append-pattern-space-to-hold-space-h-command) [[44.
Copy Hold Space to Pattern Space (g command)]{.underline}
[74]{.underline}](#copy-hold-space-to-pattern-space-g-command)
[[45. Append Hold Space to Pattern Space (G command).]{.underline}
[.75]{.underline}](#append-hold-space-to-pattern-space-g-command)
[[Chapter 7. Sed Multi-Line Commands and loops .
.77]{.underline}](#chapter-7.-sed-multi-line-commands-and-loops) [[46.
Append Next Line to Pattern Space (N command) . .
.77]{.underline}](#append-next-line-to-pattern-space-n-command) [[47.
Print 1st Line in MultiLine (P command)]{.underline}
[79]{.underline}](#print-1st-line-in-multiline-p-command)
48. [[Delete 1st Line in MultiLine (D command)]{.underline}
    [80]{.underline}](#delete-1st-line-in-multiline-d-command)
49. [[Loop and Branch (b command and :label)]{.underline}
    [82]{.underline}](#loop-and-branch-b-command-and-label)
50. [[Loop Using t command]{.underline}
    [84]{.underline}](#loop-using-t-command)
[[Chapter 8. Awk Syntax and Basic Commands]{.underline}
[86]{.underline}](#chapter-8.-awk-syntax-and-basic-commands)
51. [[Awk Command Syntax]{.underline}
    [88]{.underline}](#awk-command-syntax)
52. [[Awk Program Structure (BEGIN, body, END block) .]{.underline}
    [.]{.underline}
    [.90]{.underline}](#awk-program-structure-begin-body-end-block)
    [[53. Print Command]{.underline} [95]{.underline}](#print-command)
```{=html}
```
54. [[Pattern Matching]{.underline}
    [97]{.underline}](#pattern-matching-1)
[[Chapter 9. Awk Built-in Variables]{.underline}
[98]{.underline}](#chapter-9.-awk-built-in-variables)
55. [[FS - Input Field Separator]{.underline}
    [98]{.underline}](#fs---input-field-separator)
56. [[OFS - Output Field Separator]{.underline}
    [99]{.underline}](#ofs---output-field-separator)
57. [[RS - Record Separator]{.underline}
    [101]{.underline}](#rs---record-separator)
58. [[ORS - Output Record Separator]{.underline}
    [103]{.underline}](#ors---output-record-separator)
59. [[NR - Number of Records]{.underline}
    [105]{.underline}](#nr---number-of-records)
60. [[FILENAME -- Current File Name]{.underline}
    [105]{.underline}](#filename-current-file-name)
61. [[FNR - File \"Number of Record\"]{.underline}
    [107]{.underline}](#fnr---file-number-of-record)
[[Chapter 10. Awk Variables and Operators]{.underline}
[110]{.underline}](#chapter-10.-awk-variables-and-operators)
62. [[Variables]{.underline} [110]{.underline}](#variables)
63. [[Unary Operators]{.underline} [111]{.underline}](#unary-operators)
64. [[Arithmetic Operators]{.underline}
    [115]{.underline}](#arithmetic-operators)
65. [[String Operator]{.underline} [116]{.underline}](#string-operator)
66. [[Assignment Operators]{.underline}
    [117]{.underline}](#assignment-operators)
67. [[Comparison Operators]{.underline}
    [119]{.underline}](#comparison-operators)
68. [[Regular Expression Operators]{.underline}
    [123]{.underline}](#regular-expression-operators)
[[Chapter 11. Awk Conditional Statements and
Loops]{.underline}](#chapter-11.-awk-conditional-statements-and-loops)
[[\...\...\...\...\...\...\...\...\...\...\...\...\...\...\...\...\...\...\...\...\...\...\.....]{.underline}
[124]{.underline}](#chapter-11.-awk-conditional-statements-and-loops)
69. [[Simple If Statement]{.underline}
    [124]{.underline}](#simple-if-statement)
70. [[If Else Statement]{.underline}
    [125]{.underline}](#if-else-statement)
71. [[While Loop]{.underline} [127]{.underline}](#while-loop)
72. [[Do-While Loop]{.underline} [129]{.underline}](#do-while-loop)
73. [[For Loop Statement]{.underline}
    [130]{.underline}](#for-loop-statement)
74. [[Break Statement]{.underline} [132]{.underline}](#break-statement)
75. [[Continue Statement]{.underline}
    [134]{.underline}](#continue-statement)
76. [[Exit Statement]{.underline} [136]{.underline}](#exit-statement)
[[Chapter 12. Awk Associative Arrays]{.underline}
[138]{.underline}](#chapter-12.-awk-associative-arrays)
77. [[Assigning Array Elements]{.underline}
    [138]{.underline}](#assigning-array-elements)
78. [[Referring to Array Elements]{.underline}
    [140]{.underline}](#referring-to-array-elements)
79. [[Browse the Array using For Loop]{.underline}
    [141]{.underline}](#browse-the-array-using-for-loop)
80. [[Delete Array Element]{.underline}
    [143]{.underline}](#delete-array-element)
81. [[Multi Dimensional Array]{.underline}
    [144]{.underline}](#multi-dimensional-array)
82. [[SUBSEP - Subscript Separator]{.underline}
    [147]{.underline}](#subsep---subscript-separator)
83. [[Sort Array Values using asort]{.underline}
    [148]{.underline}](#sort-array-values-using-asort)
84. [[Sort Array Indexes using asorti]{.underline}
    [151]{.underline}](#sort-array-indexes-using-asorti)
[[Chapter 13. Additional Awk Commands]{.underline}
[153]{.underline}](#chapter-13.-additional-awk-commands)
85. [[Pretty Printing Using printf]{.underline}
    [153]{.underline}](#pretty-printing-using-printf)
86. [[Built-in Numeric Functions]{.underline}
    [165]{.underline}](#built-in-numeric-functions)
87. [[Random Number Generator]{.underline}
    [168]{.underline}](#random-number-generator)
88. [[Generic String Functions]{.underline}
    [171]{.underline}](#generic-string-functions)
89. [[GAWK/NAWK String Functions]{.underline}
    [174]{.underline}](#gawknawk-string-functions)
90. [[GAWK String Functions]{.underline}
    [178]{.underline}](#gawk-string-functions)
91. [[Argument Processing (ARGC, ARGV, ARGIND)]{.underline}
    [178]{.underline}](#argument-processing-argc-argv-argind)
[[92. OFMT]{.underline} [182]{.underline}](#ofmt)
93. [[GAWK Built-in Environment Variables]{.underline}
    [184]{.underline}](#gawk-built-in-environment-variables)
94. [[Awk Profiler - pgawk]{.underline}
    [187]{.underline}](#awk-profiler---pgawk)
95. [[Bit Manipulation]{.underline}
    [189]{.underline}](#bit-manipulation)
96. [[User Defined Functions]{.underline}
    [192]{.underline}](#user-defined-functions)
97. [[Language Independent Output
    (Internationalization)]{.underline}](#language-independent-output-internationalization)
[[\...\...\...\...\...\...\...\...\...\...\...\...\...\...\...\...\...\...\...\...\...\...\...\...\...\...\...]{.underline}
[195]{.underline}](#language-independent-output-internationalization)
98. [[Two Way Communication]{.underline}
    [199]{.underline}](#two-way-communication)
99. [[System Function]{.underline} [201]{.underline}](#system-function)
100. [[Timestamp Functions]{.underline}
     [202]{.underline}](#timestamp-functions)
101. [[getline Command]{.underline} [206]{.underline}](#getline-command)
> []{#_bookmark2 .anchor}**Introduction**
>
> *"Enhance Your UNIX and Linux Life with Sed and Awk"*
If you are a developer, or system administrator, or database
administrator, or IT manager, or just someone who spends a significant
amount of time on UNIX / Linux, you should become proficient in Sed and
Awk.
Sed and Awk are two great utilities that can solve a lot of complex
tasks quickly with only a few lines of code\--in most cases, with just a
single line of code.
This book explains the following:
-   Chapters 1 -- 7 cover sed. Chapters 8 -- 13 cover awk.
-   Chapters 1 - 5 explain various sed commands, including the powerful
    > sed substitute command, regular expressions, and different methods
    > to execute sed commands.
-   Chapters 6 and 7 describe sed hold space and pattern space, sed
    > multi-line commands, and sed loops. Clear examples are included.
-   Chapters 8 -- 11 cover various awk programming language components,
    > with examples and built-in variables.
-   Chapters 12 and 13 explain the powerful awk associative array, plus
    > additional built-in awk functions and commands with clear
    > examples.
A note on the examples: Most examples are identified in the following
way.
> **Example Description**
Lines of code for you to type, with the result you will see on screen.
Any additional clarification or discussion will appear below the code
section in plain text.
Also please note that commands should be typed on one line. If you copy
and paste, be sure that command is pasted as a single line.
# Chapter 1: Sed Syntax and Basic Commands
For all sed examples, we\'ll be using the following employee.txt file.
Please create this text file to try out the commands given in this book.
\$ vi employee.txt 101,John Doe,CEO
102,Jason Smith,IT Manager 103,Raj Reddy,Sysadmin 104,Anand
Ram,Developer 105,Jane Miller,Sales Manager
The above employee database contains the following fields for every
record:
-   Employee Id
-   Employee Name
-   Title
Sed stands for Stream Editor. It is very powerful tool to manipulate,
filter, and transform text. Sed can take input from a file, or from a
pipe. You might even have several sed one line commands in your bash
startup file that you use for various scenarios without exactly
understanding the sed scripts.
For beginners, sed script might look cryptic. Once you understand the
sed commands in detail, you\'ll be able to solve a lot of complex text
manipulation problems by writing a quick sed script.
In this book, I\'ve explained all sed commands and provided easy-to-
understand examples.
## Sed Command Syntax
The purpose of this section is to get you familiarized with sed syntax
and command structure. This is not meant to explain the individual sed
commands, which are covered in detail later.
> **Basic sed syntax:**
sed \[options\] {sed-commands} {input-file}
Sed reads one line at a time from the {input-file} and executes the
{sed-commands} on that particular line.
It reads the 1st line from the {input-file} and executes the {sed-
commands} on the 1st line. Then it reads the 2nd line from the
{input-file} and executes the {sed-commands} on the 2nd line. Sed
repeats this process until it reaches the end of the {input-file}.
There are also a few optional command line options that can be passed to
sed as indicated by \[options\].
The following example demonstrates the basic sed syntax. This simple sed
example prints all the lines from the /etc/passwd file.
sed -n \'p\' /etc/passwd
The main focus here is on the {sed-commands}, which can be either a
single sed command or multiple sed commands. You can also combine
multiple sed-commands in a file and call the sed script file using the
-f option as shown below.
> **Basic sed syntax for use with sed-command file:**
sed \[options\] -f {sed-commands-in-a-file} {input-file}
The following example demonstrates the basic syntax. This example prints
lines beginning with root and nobody from the /etc/passwd file.
\$ vi test-script.sed
/\^root/ p
/\^nobody/ p
\$ sed -n -f test-script.sed /etc/passwd
While executing multiple sed commands, you can also directly specify
them in the command line using -e as shown below.
**Basic sed syntax using -e:**
sed \[options\] -e {sed-command-1} -e {sed-command-2}
{input-file}
The following example demonstrates the basic syntax. This prints lines
beginning with root and nobody from /etc/passwd file:
sed -n -e \'/\^root/ p\' -e \'/\^nobody/ p\' /etc/passwd
If you are executing a lot of commands in a single line using several
-e arguments, you can split them into multiple lines using a back slash
as shown below.
sed -n \\
-e \'/\^root/ p\' \\
-e \'/\^nobody/ p\' \\
/etc/passwd
You can also execute multiple sed commands in the command line by
grouping them together using { }:
> **Basic sed syntax using { }:**
sed \[options\] \'{ sed-command-1 sed-command-2
}\' input-file
The following example demonstrates this version of the basic syntax.
This also prints lines beginning with root and nobody from
/etc/passwd file.
sed -n \'{
/\^root/ p
/\^nobody/ p
}\' /etc/passwd
Note: Sed never modifies the original file. It always prints the output
to stdout. If you want to save the changes, you should redirect the
output to a file by explicitly specifying \> filename.txt.
## Sed Scripting Flow
Sed scripting follows the easily remembered sequence Read, Execute,
Print, Repeat. Use the simple REPR acronym to remember sed execution
flow.
We look at the steps in this sequence. Sed will:
-   **Read** a line into the pattern space (an internal temporary sed
    > buffer, where it places the line it reads from the input file).
-   **Execute** the sed command on the line in the sed pattern space. If
    > there are more than one sed commands available, either via a sed
    > script, -e options, or { }, it executes all the sed commands one
    > by one in sequence on the line that is currently in the pattern
    > space.
-   **Print** the line from the pattern space. After printing this line,
    > the sed pattern space will be empty.