    doEndTag:43, ComponentTagSupport (org.apache.struts2.views.jsp)
    _jspx_meth_s_005ftextfield_005f1:16, index_jsp (org.apache.jsp)
    _jspx_meth_s_005fform_005f0:16, index_jsp (org.apache.jsp)
    _jspService:14, index_jsp (org.apache.jsp)
    service:70, HttpJspBase (org.apache.jasper.runtime)
    service:742, HttpServlet (javax.servlet.http)
    ...
发送请求，FilterDispatcher.doFilter被触发，这其中调用FilterDispatcher.serviceAction，
invokeAction调用了action（LoginAction）的method（execute），
继续运行，断在LoginAction.execute()，
显然，username不为admin，表单验证失败，此时Strust2默认会调用translateVariables方法对标签中表单名进行OGNL表达式递归解析返回ValueStack值栈中同名属性的值。
中间有若干底层流程，略过，我们直接在doStartTag()下断，
本函数的功能是开始解析标签，
继续向下，开始加载第一个TextField，
接下来如果配置正确（我反正没有配置正确😥，只能看到下图），应该会进入jsp页面中，便可以清晰的看到jsp页面被逐标签解析。
当加载到`/>`时，会进入doEndTag()函数，从名字可以判断，此函数的功能大概是完成对一个标签的解析，因为调试时payload放在了password里面，因而此处对于username的解析不过展示。
此时前面的tag已经被展示出来，未进入doStartTag的password字段没有显示。
接下来我们快进到第二个TextField（password）的doEndTag()。
跟进this.component.end()，进入了`org.apache.struts2.components.UIBean#end`，
跟进this.evaluateParams();，
快进到this.altSyntax()处，
前面提到，altSyntax默认是开启的，接下来的expr显而易见为%{password}，
跟进this.findValue(expr, valueClazz)，
由前面可知，TextField 的valueClassType为class java.lang.String，且altSyntax默认开启，
因此将会进入TextParseUtil.translateVariables(‘%’, expr, this.stack);，
步入，进入translateVariables，
二级步入，将进入调试的主体部分`translateVariables(char open, String expression, ValueStack
stack, Class asType, TextParseUtil.ParsedValueEvaluator evaluator)`，
此处传入的expression为%{password}，
接下来的while循环的目的是确定start和end的位置，
此处显然不会进入if，
接下来，取出%{}表达式中的值，赋值给var，
然后调用`stack.findValue(var,
asType)`，由前面可知，此处的stack为`OgnlValueStack`，`OgnlValueStack`是[ValueStack](https://blog.csdn.net/qq_44757034/article/details/106838688)的实现类。
valueStack是struts2的值栈空间，是struts2存储数据的空间，是一个接口，struts2使用OGNL表达式实际上是使用实现了ValueStack接口的类OgnlValueStack（它是ValueStack的默认实现类）。
客户端发起一个请求时，struts2会创建一个Action实例同时创建一个OgnlValueStack值栈实例，OgnlValueStack贯穿整个Action的生命周期。Struts2中使用OGNL将请求Action的参数封装为对象存储到值栈中，并通过OGNL表达式读取值栈中的对象属性值。
ValueStack中有两个主要区域
  * CompoundRoot 区域：是一个ArrayList，存储了Action实例，它作为OgnlContext的Root对象。获取root数据不需要加`#`
  * context 区域：即OgnlContext上下文，是一个Map，放置web开发常用的对象数据的引用。request、session、parameters、application等。获取context数据需要加#
操作值栈，通常指的是操作ValueStack中的root区域。
ValueStack类的setValue和findValue方法可以设置和获得Action对象的属性值。OgnlValueStack的findValue方法可以在CompoundRoot中从栈顶向栈底找查找对象的属性值。
跟进findValue()，
由函数名可以推测， 这一函数的功能是查找expr对应的值，且此函数最终要`return
value`，我们可以大胆设想，value变量是本函数的重点，如此，则需要重点关注对value进行操作的函数OgnlUtil.getValue，
跟进，
compile对’password’进行解析，返回了适用的结果。
接下来跟进Ognl.getValue，看起来此函数会结合root和context进行value的获取。
显然，这里我们要关注的是result变量，这就需要跟进((Node)tree).getValue(ognlContext, root)。
显然会进入下面的else分支，
跟进之，
看起来，经历了若干级的调用，最终有效的是this.getValueBody(context, source)，
跟进，可以看到再向下跟进最终是将password字段的值加载了进来。
不再深入跟进了，感觉好像没什么意义了😤，此时单单getValue的调用栈已经有几层了。
    getProperty:1643, OgnlRuntime (ognl)getValueBody:92, ASTProperty (ognl)evaluateGetValueBody:170, SimpleNode (ognl)getValue:210, SimpleNode (ognl)getValue:333, Ognl (ognl)getValue:194, OgnlUtil (com.opensymphony.xwork2.util)findValue:238, OgnlValueStack (com.opensymphony.xwork2.util)
接下来步出几层，回到translateVariables:122, TextParseUtil
(com.opensymphony.xwork2.util)，
接下来经过拼接操作，expression被赋值，
**2.递归解析部分**
我们观察到，此while循环只有一个出口，那就是if (start == -1 || end == -1 || count !=
0)，因此这里进行完expression的赋值后，会开启新的一轮while。
这里我们可以看出，translateVariables无意之间递归解析了表达式，我们的password字段放置了`%{"tomcatBinDir{"+[@java](https://github.com/java
"@java").lang.System[@getProperty](https://github.com/getProperty
"@getProperty")("user.dir")+"}"}`这样一个包含`%{expression}`的字符串，%{password}的结果将再次被当作expression解析，就可能造成恶意ognl表达式的执行。
此次循环中，进入findValue的var是去掉前两个字符的expression，也就是`tomcatBinDir{"+[@java](https://github.com/java
"@java").lang.System[@getProperty](https://github.com/getProperty
"@getProperty")("user.dir")+"}`。
接下来跟进findValue()，这里的流程和上面是一样的，重点应该还是跟进OgnlUtil.getValue，
和刚才相同的流程，深入跟进至evaluateGetValueBody:170, SimpleNode (ognl)  
getValue:210, SimpleNode (ognl)，
跟进，
在对于第一行的getValue()进行跟进几层之后，经过了一些表达式执行的操作，得到了result的第一部分。
接下来的for循环，会继续执行完整表达式`%{"tomcatBinDir{"+[@java](https://github.com/java
"@java").lang.System[@getProperty](https://github.com/getProperty
"@getProperty")("user.dir")+"}"}`的其他部分。
深入跟进时，发生了一些有趣的事情，
这里调用了System.getProperty()，实际上实现了代码执行。
回到getValueBody，此时result已经被add上了新的一部分，
各部分add之后，最终的result如下。
逐级步出，回到TextParseUtil.translateVariables，expression被拼接为tomcatBinDir{/usr/local/tomcat}，开启一个新的循环。
但是此时，open为%，expression.indexOf(open + “{“)为-1，而start为-1时，将会return。
简单跟进一下，
可以猜测，这里是将Object类型的o转化为普通的字符串。
接下来简单步出，可将流程结束。
## 三、收获与启示
借助学习和调试，了解了Struts2的运转流程，简单学习了OGNL表达式，增强了分析能力。
参考链接