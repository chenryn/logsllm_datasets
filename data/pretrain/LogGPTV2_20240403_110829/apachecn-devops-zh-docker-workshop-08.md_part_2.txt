6.  Add all the content in the current path:
    ```
    $ git add .
    ```
    您也可以通过键入以下命令来添加特定文件，而不是所有文件:
    ```
    $ git add .
    ```
7.  Specify a `commit` message:
    ```
    $ git commit -m "first commit"
    ```
    这将产生类似如下的输出:
    ```
    On branch master
    Your branch is up to date with 'origin/master'.
    nothing to commit, working tree clean
    ```
8.  Push the code to your GitHub account:
    ```
    $ git push -u destination master
    ```
    它会询问您的用户名和密码。登录后，文件将上传到您的 GitHub 存储库中:
    ![Figure 8.10: Pushing the code to GitHub  ](img/B15021_08_10.jpg)
    图 8.10:将代码推送到 GitHub
9.  检查您的 GitHub 帐户。你会发现文件都上传到那里了。
现在我们已经完成了 CI/CD 管道的第一步，并将代码上传到 GitHub，我们将把 GitHub 与 Jenkins 集成在一起。
注意
从这一点开始，接下来，用您的用户名替换 GitHub 用户名`efoda`。
## 练习 8.03:整合 GitHub 和 Jenkins
您在*练习 8.01* 、*将詹金斯安装为容器*中将詹金斯安装为容器。在本练习中，您将在 Jenkins 中创建一个作业，并用 GitHub 对其进行配置。您将检查詹金斯的`Output Console`以验证它是否成功构建了映像。然后，您将在 GitHub 上修改`Dockerfile`，并确保 Jenkins 已经检测到`Dockerfile`中的变化，并自动重建映像:
1.  Go back to Jenkins in the browser. Click on `Create a job`:
    ![Figure 8.11: Creating a job in Jenkins ](img/B15021_08_07.jpg)
    图 8.11:在詹金斯创建工作
2.  Fill in the `Enter an item name` textbox by providing the name of the project. Click `Freestyle project` and then click `OK`:
    ![Figure 8.12: Selecting Freestyle project  ](img/B15021_08_12.jpg)
    图 8.12:选择自由式项目
    您将看到六个选项卡:`General`、`Source Code Management`、`Build Triggers`、`Build Environment`、`Build`和`Post-build Actions`，如图 8.13 所示。
3.  In the `General` tab, select the `Discard old builds` option so that the old builds do not eat up your disk space. Jenkins will do the housekeeping for you as well:
    ![Figure 8.13: Selecting the Discard old builds option ](img/B15021_08_13.jpg)
    图 8.13:选择放弃旧版本选项
4.  In the `Source Code Management` tab, select `Git`. In `Repository URL`, enter `https://github.com//hit_counter`, as in *Figure 8.14*. If you do not have Git, check your plugins and download the Git plugin. We will talk about managing plugins in *Exercise 8.04*, *Integrating Jenkins and Docker Hub*:
    ![Figure 8.14: Entering the GitHub repository URL ](img/B15021_08_14.jpg)
    图 8.14:输入 GitHub 存储库网址
5.  In the `Build Triggers` tab, select `Poll SCM`. This is where you specify how often you want Jenkins to perform the tests. If you enter `H/5` with four asterisks and spaces in between each asterisk, this means that you want Jenkins to perform the test every minute, as in *Figure 8.16*. If you enter it as `H * * * *`, this means the polling will be done every hour. If you do it as `H/15 * * * *`, the polling will be done every 15 minutes. Click your mouse outside the textbox. If you entered the code correctly, Jenkins will show the message stating when it will execute the next job. Otherwise, it will display an error in red.
    ![Figure 8.15: Building triggers ](img/B15021_08_15.jpg)
    图 8.15:构建触发器
6.  Click the `Build` tab. Click `Add build step`. Select `Execute shell`, as in *Figure 8.17*:
    ![Figure 8.16: Selecting Execute shell ](img/B15021_08_16.jpg)
    图 8.16:选择执行外壳
7.  A textbox will be displayed. Write the following command:
    ```
    docker build -t hit_counter .
    ```
    然后点击`Save`，如图*图 8.17* :
    ![Figure 8.17: Entering the docker build command in the Execute shell command box ](img/B15021_08_17.jpg)
    图 8.17:在执行外壳命令框中输入 docker 构建命令
    应该会出现类似以下屏幕截图的屏幕:
    ![Figure 8.18: Successful creation of the hit_count project ](img/B15021_08_18.jpg)
    图 8.18:成功创建命中计数项目
8.  Before doing anything further in Jenkins, check the images that you currently have in your host. In a terminal, run the `docker images` command to list the images:
    ```
    $docker images
    ```
    如果您在本章之前清洁了实验室，您将只有`jenkinsci/blueocean`映像:
    ```
    REPOSITORY           TAG     IMAGE ID      CREATED
           SIZE
    jenkinsci/blueocean  latest  e287a467e019  Less than a second ago
           562MB
    ```
9.  Go back to Jenkins. Click on `Build Now` from the menu on the left.
    注意
    如果在连接到 Docker 守护程序时出现“权限被拒绝”错误，请执行以下步骤:
    1.如果尚不存在，请向 docker 主机添加一个 Jenkins 用户:
    `$ sudo useradd jenkins`
    2.将詹金斯用户添加到 docker 组:
    `$ sudo usermod -aG docker jenkins`
    3.从`/etc/group`即`998`获取 Docker 组标识:
    `$ sudo cat /etc/group | grep docker`
    4.使用`docker exec`命令在运行的 Jenkins 容器中创建一个 bash shell:
    `$ docker container ls`
    `$ docker exec -it -u root  /bin/bash`
    5.编辑詹金斯容器内的`/etc/group`文件:
    `# vi /etc/group`
    6.用从主机获得的标识替换 docker 组标识，并将 Jenkins 用户添加到 docker 组:
    `docker:x:998:jenkins`
    7.保存`/etc/group`文件并关闭编辑器:
    `:wq`
    8.詹金斯容器的出口:
    `# exit`
    9.停止詹金斯容器:
    `$ docker container ls`
    `$ docker container stop `
    注意
    10.重新启动詹金斯容器:
    `$ docker container ls`
    `$ docker container start `
    现在，作业将成功构建。
10.  Click on `Back to Dashboard`. The following screen will appear. In the bottom-left corner, you will see the `Build Queue` and `Build Executor Status` fields. You can see that one build has started with `#1` beside it, as in *Figure 8.19*:
    ![Figure 8.19: Checking the Build Queue  ](img/B15021_08_19.jpg)
    图 8.19:检查构建队列
    构建还没有成功或失败。构建完成后，其状态将显示在屏幕上。一段时间后，您会发现已经完成了两个构建。
11.  Click on the small arrow beside `#2` under the `Last Success` field. A drop-down menu will appear, as shown in the following figure. Select `Console Output` to check what Jenkins did automatically for us, as in *Figure 8.20*:
    ![Figure 8.20: Selecting Console Output  ](img/B15021_08_20.jpg)
    图 8.20:选择控制台输出
    在`Console Output`中，您会发现 Jenkins 在项目配置期间执行了您在`Build`步骤中输入的`docker build` 命令:
    向下滚动至`Console Output`底部，查看执行结果。您将看到映像已成功构建。您还会发现映像标识和标签:
    ![Figure 8.21: Verifying that the image is built successfully ](img/B15021_08_21.jpg)
    图 8.21:验证映像构建成功
12.  Verify the image ID and tag from the terminal. Re-run the `docker images` command.
    ```
    $docker images
    ```
    你会发现`hit_counter`映像已经为你创建好了。您还会发现`python:3.7-alpine`映像，因为这是`Dockerfile`中的基础映像，詹金斯已经自动提取了它:
    ```
    REPOSITORY           TAG           IMAGE ID
      CREATED                      SIZE
    jenkinsci/blueocean  latest        e287a467e019
      Less than a second ago       562MB
    hit_counter          latest        bdaf6486f2ce
      3 minutes ago                227MB
    python               3.7-alpine    6a5ca85ed89b
      2 weeks ago                  72.5MB
    ```
    通过这一步，您可以确认 Jenkins 能够成功地从您的 GitHub 中提取文件。
13.  Now, you will make the desired changes in the GitHub code. But first, verify that you did not commit any changes to the code yet. Return to Jenkins, scroll up and click `Back to Project` in the left-hand menu at the top. Then click on `Recent Changes`, as in *Figure 8.22*:
    ![Figure 8.22: Selecting Recent Changes ](img/B15021_08_22.jpg)
    图 8.22:选择最近的更改
    Jenkins 将显示任何版本都没有变化，如下图所示:
    ![Figure 8.23: Verifying changes in the code ](img/B15021_08_23.jpg)
    图 8.23:验证代码中的更改
14.  Go to GitHub and edit the `Dockerfile` by changing the base image's tag from `3.7-alpine` to `alpine` only.
    您也可以通过使用任何文本编辑器编辑文件，在终端上执行与以前相同的操作。然后运行`git add`和`git push`命令: