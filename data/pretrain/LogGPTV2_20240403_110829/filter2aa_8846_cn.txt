 Keys. A key dictates how encryption is applied through an algorithm. A key should remain secret; otherwise,
the security of the encrypted data is at risk. Key length is an important consideration. To defend against
quick brute-force attacks, you need a long key. Today, a 256-bit key is typically the minimum recommended
for symmetric encryption, and a 2048-bit key is typically the minimum recommended for asymmetric
encryption. However, the length should be based on your requirements and the sensitivity of the data being
handled.
33
 Algorithms. There are many algorithms (or ciphers) to choose from. It is a good practice to use an algorithm
with a large key space (a key space represents all possible permutations of a key) and a large random key
value (a key value is a random value used by an algorithm for the encryption process). Algorithms are not
secret, but instead well known.
 Protocols. There are different protocols for performing cryptographic functions. Transport Layer Security
(TLS) is a very popular protocol used across the internet, such as for banking sites or sites that require
encryption. Today, most sites (even Google) use encryption. Other protocols include Kerberos and IPsec.
 Industrial Control Systems (ICS). Supervisory control and data acquisition (SCADA) systems are used to control
physical devices such as those found in an electrical power plant or factory. SCADA systems are well suited for
distributed environments, such as those spread out across continents. Some SCADA systems still rely on legacy or
proprietary communications. These communications are at risk, especially as attackers are gaining knowledge of
such systems and their vulnerabilities.
 Cloud-based systems. Unlike systems on-premises, cloud-based systems are mainly controlled by cloud vendors.
You often will not have access to or control of the hardware, software or supporting systems. When working with
cloud-based systems, you need to focus your efforts on areas that you can control, such as the network entry and
exit points (use firewalls and similar security solutions), encryption (use for all network communication and data at
rest), and access control (use a centralized identity access and management system with multi-factor
authentication). You should also gather diagnostic and security data from the cloud-based systems and store that
information in your security information and event management system. With some cloud vendors, you might be
able to configure aspects of the service, such as networking or access. In such scenarios, ensure that your cloud
configuration matches or exceeds your on-premises security requirements. In high-security environments, your
organization should have a dedicated cloud approach. Last, don't forget to look at the cloud vendors and
understand their security strategy and tactics. You should be comfortable with the vendor's approach before you
use their cloud services.
 Distributed systems. Distributed systems are systems that work together to perform a common task, such as
storing and sharing data, computing, or providing a web service. Often, there isn’t centralized management
(especially with peer-to-peer implementations). In distributed systems, integrity is sometimes a concern because
data and software are spread across various systems, often in different locations. To add to the trouble, there is
often replication that is duplicating data across many systems.
 Internet of Things (IoT). Like cloud-based systems, you will have limited control over IoT devices. Mostly, you will
have control of the configuration and updating. And you should spend extra time understanding both. Keeping IoT
devices up to date on software patches is critically important. Without the latest updates, devices are often
vulnerable to remote attacks from the internet. This is riskier than internal-only devices. On the configuration side,
you should disable remote management and enable secure communication only (such as over HTTPS), at a
minimum. As with cloud-based systems, review the IoT vendor to understand their history with reported
vulnerabilities, response time to vulnerabilities and overall approach to security. Not all IoT devices are suitable for
enterprise networks!
34
3.6 Assess and mitigate vulnerabilities in web-based systems
Web-based systems are systems you reach through the internet, often (but not always) through a web browser. Web-based
systems are often meant to be public-facing, so they are exposed to the entire internet. This makes them vulnerable to
attackers looking for easy targets, such as older and unpatched versions of web server software. There are several areas to
review when you assess and mitigate vulnerabilities in web-based systems:
 Web server software. The web server software must be running the latest security patches. Running the latest
version of the software can provide enhanced (and optional) security features. You need to have logging, auditing
and monitoring for your web servers. The goal of these isn’t to prevent attacks but instead to recognize warning
signs early, before an attack or as early in the attack as possible. After an attack, the logs can provide critical
information about the vulnerability, the date of compromise and sometimes even the identity of the attacker.
 Endpoint security. You also need to manage the client side. Clients that visit a compromised web server could
become compromised. To minimize the risk of compromise, you need a multi-layered approach that includes a
standardized browser configured for high security, web proxy servers to blacklist known bad web servers and track
web traffic, host-based firewalls to block suspicious traffic, and anti-malware/anti-spyware/anti-virus software to
watch for suspicious activity.
 OWASP Top 10. The Open Web Application Security Project (OWASP) publishes a list of the top 10 critical web
application security risks. You should read through it and be familiar with these risks. See
https://www.owasp.org/images/7/72/OWASP_Top_10-2017_%28en%29.pdf.pdf for more information. Here are
two of the most important:
 Injection flaws (OWASP Top 10, #1). Injection flaws have been around a long time. Two of the most
common are SQL injection attacks and cross-site scripting (XSS) attacks. In an injection attack, an attacker
provides invalid input to a web application, which is then processed by an interpreter. For example, an
attacker might use special characters in a web-based form to alter how the form is processed (for example,
comment out the password check). Input validation can help minimize the chances of an injection attack.
But you need more than that. You need to properly test these types of scenarios prior to going live. One
common mitigation strategy for SQL injection attacks is using prepared statements and parameterized
queries; this enables the database to differentiate between code and data.
 XML External Entities / XXE (OWASP Top 10, #4). In this type of attack, the goal is to pass invalid input
(containing a reference to an external entity) to an XML parsing application. To minimize the potential for
this attack, you can disable document type definitions (DTDs).
3.7 Assess and mitigate vulnerabilities in mobile systems
Today, mobile systems such as smartphones and tablets are full-blown computers. You can use them to connect to
corporate networks and to produce, consume and share content. Therefore, these devices need to be treated like
computers. You need to deploy and maintain security software, such as anti-malware and anti-virus software. You need to
use encryption for storing data on the devices and for sending and receiving data, especially with the corporate network.
You need to apply your organization’s standards and security policies, when applicable. For example, you need to ensure
that the devices are running the latest version of the software and have the latest patches. To deploy and maintain the
35
devices with a secure configuration, you need centralized management software so you can report on vulnerabilities and
risk, and manage devices in bulk or with automation. At the device level, you need to require screen locks, strong
authentication and encryption. You need to be able to remotely lock and wipe devices in the event a device is lost or stolen.
Even with these things in place, you should restrict mobile systems to non-sensitive data, so they can’t read or store PII or
other confidential information.
3.8 Assess and mitigate vulnerabilities in embedded devices
In addition to managing security for your computing infrastructure and computers, you also should think about other
systems that interact with your computing infrastructure. Today, that includes everything from coffee makers to smart
white boards to copiers. These devices are becoming more and more connected, and some of them are even IoT devices.
While these devices have had computers embedded in them for some time, they used to be standalone devices, not
connected to your network, so a compromise was extremely limited and quite rare. Today, you need to consider the
following information when managing your embedded devices:
 Some devices are configured by default to contact the manufacturer to report health information or diagnostic
data. You need to be aware of such communication. Disable it when possible. At a minimum, ensure that the
configuration is such that additional information cannot be sent out alongside the expected information.
 Some devices, by default, accept remote connections from anywhere. Sometimes the connections are for remote
management. You should eliminate remote connectivity options for devices that do not need to be managed
remotely.
 Many embedded systems and IoT systems are built for convenience, functionality and compatibility — security is
often last on the list, so authentication and authorization are sometimes non-existent. Additionally, many systems
are small and have limited battery life, so encryption is often not used because it drains the batteries too fast and
requires ample CPU power. And your existing systems for managing device security and managing patches are not
likely to be compatible with IoT devices, which makes managing software versions and patches difficult. Attackers
have already exploited flaws in IoT devices; for example, one company was infected with malware that originated
from a coffeemaker. As the number and sophistication of the devices increases, hackers will likely explore this
attack vector even more.
3.9 Apply cryptography
Cryptography is present in several technologies. Applying cryptography is a big topic that covers several independent
technologies. For the exam, be familiar with the high-level concepts around applying cryptography and its related
technologies more so than understanding the details of implementing or supporting them. The subtopics below are the key
topics outlined for this section. If you are new to cryptography or have limited exposure to it, consider additional sources
to dive deeper.
 Cryptographic lifecycle (e.g., cryptographic limitations, algorithm/protocol governance). When we think
about the lifecycle of technologies, we often think about the hardware and software support, performance and
reliability. When it comes to cryptography, things are a bit different: The lifecycle is focused squarely around
security. As computing power goes up, the strength of cryptographic algorithms goes down. It is only a matter of
36
time before there is enough computing power to brute-force through existing algorithms with common key sizes.
You must think through the effective life of a certificate or certificate template, and of cryptographic systems.
Beyond brute force, you have other issues to think through, such as the discovery of a bug or an issue with an
algorithm or system. NIST defines the following terms that are commonly used to describe algorithms and key
lengths: approved (a specific algorithm is specified as a NIST recommendation or FIPS recommendation),
acceptable (algorithm + key length is safe today), deprecated (algorithm and key length is OK to use, but brings
some risk), restricted (use of the algorithm and/or key length is deprecated and should be avoided), legacy (the
algorithm and/or key length is outdated and should be avoided when possible), and disallowed (algorithm and/or
key length is no longer allowed for the indicated use).
 Cryptographic methods. This subtopic covers the following three types of encryption. Be sure you know the
differences.
 Symmetric. Symmetric encryption uses the same key for encryption and decryption. Symmetric encryption
is faster than asymmetric encryption because you can use smaller keys for the same level of protection.
The downside is that users or systems must find a way to securely share the key and then hope that the
key is used only for the specified communication.
 Asymmetric. Asymmetric encryption uses different keys for encryption and decryption. Since one is a
public key that is available to anybody, this method is sometimes referred to as “public key encryption.”
Besides the public key, there is a private key that should remain private and protected. Asymmetric
encryption doesn’t have any issues with distributing public keys. While asymmetric encryption is slower, it
is best suited for sharing between two or more parties. RSA is one common asymmetric encryption
standard.
 Elliptic curves. Elliptic Curve Cryptography (ECC) is a newer implementation of asymmetric encryption. The
primary benefit is that you can use smaller keys, which enhances performance.
 Public key infrastructure (PKI). A PKI is a foundational technology for applying cryptography. A PKI issues
certificates to computing devices and users, enabling them to apply cryptography (for example, send encrypted
email messages, encrypt web sites, or use IPsec to encrypt data communications). There are multiple vendors
providing PKI services. You can run a PKI privately and solely for your own organization, you can acquire certificates
from a trusted third-party provider, or you can do both, which is very common. A PKI is made up of certification
authorities (CAs) (servers that provide one or more PKI functions, such as providing policies or issuing certificates),
certificates (issued to other certification authorities or to devices and users), policies and procedures (such as how
the PKI is secured), and templates (a predefined configuration for specific uses, such as a web server template).
There are other components and concepts you should know for the exam:
 A PKI can have multiple tiers. Having a single tier means you have one or more servers that perform all the
functions of a PKI. When you have two tiers, you often have an offline root CA (a server that issues
certificates to the issuing CAs but remains offline most of the time) in one tier, and issuing CAs (the servers
that issue certificates to computing devices and users) in the other tier. The servers in the second tier are
often referred to as intermediate CAs or subordinate CAs. Adding a third tier means you can have CAs that
are only responsible for issuing policies (and they represent the second tier in a three-tier hierarchy). In
such a scenario, the policy CAs should also remain offline and brought online only as needed. In general,
37
the more tiers, the more security (but proper configuration is critical). The more tiers you have, the more
complex and costly the PKI is to build and maintain.
 A PKI should have a certificate policy and a certificate practice statement (CSP). A certificate policy
documents how your company handles items like requestor identities, the uses of certificates and storage
of private keys. A CSP documents the security configuration of your PKI and is usually available to the public.
 Besides issuing certificates, a PKI has other duties. For example, your PKI needs to be able to provide
certificate revocation information to clients. If an administrator revokes a certificate that has been issued,
clients must be able to get that information from your PKI. Another example is the storage of private keys
and information about issued certificates. You can store these in a database or a directory.
 Key management practices. Remember, key management can be difficult with symmetric encryption but is much
simpler with asymmetric encryption. There are several tasks related to key management:
 Key creation and distribution. Key creation is self-explanatory. Key distribution is the process of sending
a key to a user or system. It must be secure and it must be stored in a secure way on the computing device;
often, it is stored in a secured store, such as the Windows certificate store.
 Key protection and custody. Keys must be protected. You can use a method called split custody which
enables two or more people to share access to a key — for example, with two people, each person can hold