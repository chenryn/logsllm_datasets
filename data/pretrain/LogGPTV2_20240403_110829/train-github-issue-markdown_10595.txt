As of today interacting with input and outputs of dynamically loaded
components requires access to potentially "private" fields of a component. To
illustrate it with a concrete example let's say that I want to load, using
`DynamicComponentLoader`, a following component:
    @Component({
        selector: 'my-modal-content'
        template: `...`
    })
    export class MyModalContent {
        @Output() close = new EventEmitter();    
        ..    
    }
After loading, I would like to subscribe to the **close** event which sounds
like an easy task:
    dcl.loadIntoLocation(content, this._elRef, 'content').then((componentRef) => {
        componentRef.instance.close.subscribe((closeEvent) => {
            ...
        });
    });
Unfortunately **this method requires me to use`EventEmmiter`â€™s instance name
instead of event name**. Why this could be a problem? Well, nothing stops
people from implementing `MyModalContent` like so:
    @Component({
        selector: 'my-modal-content'
        template: `...`
    })
    export class MyModalContent {
        @Output('close') _close = new EventEmitter();    
        ..    
    }
**In this case the contract is broken as the only thing I should be knowing of
is event name.**. Instead I need to subscribe using a private field name
(`_close`).
cc: @mhevery @adamdbradley as discussed yesterday