let ˆs ← Verify(PK∗, i∗, s∗, π∗
to win the game if ˆs (cid:54)= ⊥ and ˆs (cid:54)= s[i∗].
s∗ ) and
s∗ ). The adversary is said
We deﬁne AdvosA to be the probability that the adversary A
wins in the above game.
Deﬁnition 2. A veriﬁable data streaming protocol is se-
cure if for any eﬃcient adversary A the probability AdvosA
is negligible (as a function of λ).
3. PRELIMINARIES
Before describing our construction formally, we introduce
the following basic notations for binary trees (c.f. consider
the tree depicted in Figure 1). The algorithms using this
tree will be described in the subsequent sections. Let CAT
be a binary tree consisting of a root node ρ, a set of in-
ner nodes υ, and some leaf nodes (cid:96). The depth of the
tree is deﬁned by D = poly(λ) and the level of a node
in the tree is denoted by h = 0, . . . , D − 1, where leaf
nodes have level h = 0 and the root node in turn has level
h = D − 1. At each level h the nodes are deﬁned by υh,i,
where i = 0, . . . , 2D−h is the position of the node in the
Ch(vh−1,(cid:98)i/2h−1(cid:99)||vh−1,(cid:98)i/2h−1−2(cid:99); rh,(cid:98)i/2h+1(cid:99)), if (cid:4)i/2h(cid:5) ≡
tree counted from left to right. Furthermore, inner nodes of
the tree are computed according the following rule: vh,i ←
if (cid:4)i/2h(cid:5) ≡ 0 mod 2. Notice that H is a hash function,
1 mod 2 and vh,i ← H(vh−1,(cid:98)i/2h−1(cid:99)−2||vh−1,(cid:98)i/2h−1−1(cid:99)),
Ch a chameleon hash function, and r some randomness. By
(cid:96)i we denote the ith leaf counted from left to right. The
authentication path aPath of a leaf (cid:96) consists of all siblings
of the nodes on the path from (cid:96) to ρ.
If a parent node
is computed by a chameleon hash, then it also stores the
corresponding randomness in a list R. E.g., the authen-
tication path aPath(cid:96)15 of the leaf (cid:96)15 is aPath(cid:96)15 = ((cid:96)14,
v1,6, r2,3, v2,2, r3,1, v3,0) and R(cid:96)15 = (r1,7, r2,3, r3,1, rρ).
3.1 Chameleon Hash Functions and their Se-
curity
A chameleon hash function is a randomized hash function
that is collision-resistant but provides a trapdoor [KR00].
955ρ
h=4
υ3,0
0
υ2,0
0
υ2,1
1
υ2,2
2
υ1,3
υ1,4
υ1,5
υ3,1
h=3
1
υ2,3
h=2
3
υ1,6
. . .
υ1,7
h=1
7
υ1,0
0
υ1,1
1
υ1,2
. . .
(cid:96)0
0
(cid:96)1
1
(cid:96)2
2
(cid:96)3
3
(cid:96)4
. . .
(cid:96)5
(cid:96)6
(cid:96)7
(cid:96)8
(cid:96)9
(cid:96)10
(cid:96)11
(cid:96)12
(cid:96)13
(cid:96)14
. . .
(cid:96)15
h=0
15
Figure 1: Given a binary tree CAT which consists of a root node ρ, a set of inner nodes υ, and some leaf nodes
(cid:96). The blue nodes deﬁne the authentication path of leaf (cid:96)4. The gray nodes right-handed of (cid:96)5 do not exist
at this stage.
Given the trapdoor csk, a message x with some randomness
r, and any additional message x(cid:48), it is possible to eﬃciently
compute a value r(cid:48) such that the chameleon hash algorithm
Ch maps to the same y, i.e., Ch(x; r) = Ch(x(cid:48); r(cid:48)) = y.
Deﬁnition 3. A chameleon hash function is a tuple of PPT
algorithms CH = (Gen, Ch, Col):
Gen(1λ): The key generation algorithm returns a key pair
(csk, cpk) and we set Ch(·) := Ch(cpk,·).
Ch(x; r): The input of the hash algorithm is a message x ∈
{0, 1}in and some randomness r ∈ {0, 1}λ (which is
eﬃciently sampable from some range Rcpk). It outputs
a hash value h = Ch(x; r) ∈ {0, 1}out.
Col(csk, x, r, x(cid:48)): The collision-ﬁnding algorithm returns a
value r(cid:48) such that Ch(x; r) = y = Ch(x(cid:48); r(cid:48)).
Uniform Distribution: The output of Ch is uniformly dis-
tributed, i.e., it also holds that for any cpk, x, r, x(cid:48) the
distribution of Col(csk, x, r, x(cid:48)) (over the choice of r)
is the same as the distribution of r itself, also imply-
ing that a hash value Ch(x; r) (over the choice of r) is
distributed independently of x.
A chameleon hash function must be collision-resistant. This
means that any malicious party should not be able to ﬁnd
two pairs (x0, r0) and (x1, r1) that map to the same image.
More precisely is the following deﬁnition.
Deﬁnition 4. A chameleon hash function CH = (Gen, Ch,
Col) is collision-resistant if the advantage function Advch-col
CH,A
(cid:21)
is a negligible function in λ for all PPT adversaries A, where
(cid:20) Ch(x; r) = Ch(x(cid:48); r(cid:48))
(csk, cpk) ← Gen(1λ);
(x, x(cid:48), r, r(cid:48)) ← A(Ch)
.
Advch-col
CH,A := Pr
and (x, r) (cid:54)= (x(cid:48), r(cid:48))
:
Observe that collision-resistance only holds as long as the ad-
versary has not learned a collision. Indeed, some chameleon
hash functions allow to recover the private key if a collision
is known, such as, e.g., [KR00]. A comprehensive discussion
about this problem is given in [Ad04]. Collision-resistance
of hash functions is deﬁned analogously and omitted here.
4. CATS
The central building block that we use in our VDS pro-
tocol is a technique that we call chameleon authentication
tree (CAT). A CAT is an authentication tree that has the
ability to authenticate an exponential number of 2D leaves
that are not ﬁxed in advanced, where D = poly(λ). Instead,
the owner of a trapdoor can authenticate a new element on
demand without pre- or re-computing all other leaves.
4.1 Formal Deﬁnition of CATs
We formalize CATs as a triple of eﬃcient algorithms: A
CAT generation algorithm catGen, a path generation algo-
rithm addLeaf that adds a leaf to the tree and returns the
corresponding authentication path, and a path veriﬁcation
algorithm catVrfy that checks if a certain leaf is part of the
tree.
Deﬁnition 5. A chameleon authentication tree is a tuple of
PPT algorithms CAT = (catGen, addLeaf, catVrfy):
catGen(1λ, D): The CAT generation algorithm takes as in-
put a security parameter λ and an integer D that de-
ﬁnes the depth of the tree. It returns a private key sp
and veriﬁcation key vp.
addLeaf(sp, (cid:96)): The path generation algorithm takes as in-
put a private key sp and a leaf (cid:96) ∈ L from some leaf
space L. It outputs a key sp(cid:48), the index i of (cid:96) in the
tree, and the authentication path aPath.
catVrfy(vp, i, (cid:96), aPath): The veriﬁcation algorithm takes as
input a public key vp, an index i, a leaf (cid:96) ∈ L, and a
path aPath. It outputs 1 iﬀ (cid:96) is the ith leaf in the tree,
otherwise 0.
A CAT must fulﬁll the usual completeness requirements.
4.2 Security of CATs
We identify two security properties that a CAT should
support. Loosely speaking, an adversary A should not be
able to change the structure of the CAT. In particular, chang-
ing the sequence of the leaves, or substitute any leaf should
956be a successful attack. We call this property structure-
preserving. Furthermore, an adversary should not be able
to add further leaves to a CAT. We refer to this property as
one-wayness.
Structure-Preserving. We formalize the ﬁrst property
by an interactive game between the challenger and an ad-
versary A. The challenger generates a key pair (sp, vp) and
hands the veriﬁcation key vp over to the adversary A. The
attacker may then send q leaves (cid:96)1, . . . , (cid:96)q(λ) (adaptively) to
the challenger who returns the corresponding authentication
paths (aPath1, . . . , aPathq(λ)). Afterwards, the adversary A
tries to break the structure of the CAT by outputting a leaf
that has not been added to the tree at a particular position.
More formally:
Setup: The challenger runs the algorithm catGen(1λ, D) to
compute a private key sp and a veriﬁcation key vp. It
gives vp to the adversary A.
Streaming: Proceeding adaptively, the attacker A sends a
leaf (cid:96) ∈ L to the challenger. The challenger computes
(sp(cid:48), i, aPath) ← addLeaf(sp, (cid:96)) and returns (i, aPath)
to A. Denote by Q := {((cid:96)1, 1, aPath1), . . . , ((cid:96)q(λ), q(λ),
aPathq(λ))} the ordered sequence of query-answer pairs.
Output: Eventually, A outputs ((cid:96)∗, i∗, aPath∗). The at-
tacker A is said to win the game if: 1 ≤ i∗ ≤ q(λ) and
((cid:96)∗, i∗, aPath∗) (cid:54)∈ Q and catVrfy(vp, i∗, (cid:96)∗, aPath∗) = 1.
We deﬁne AdvspA to be the probability that the adversary A
wins in the above game.
Deﬁnition 6. A chameleon authentication tree CAT, de-
ﬁned by the eﬃcient algorithms (catGen, addLeaf, catVrfy)
with n leaves, is structure-preserving if for any q ∈ N, and for
any PPT algorithm A, the probability AdvspA is negligible
(as a function of λ).
One-Wayness. We model the second property in a game
between a challenger and an adversary as follows:
Setup: The challenger runs the algorithm catGen(1λ, D) to
compute a private key sp and a veriﬁcation key vp. It
gives vp to the adversary A.
Streaming: Proceeding adaptively, the attacker A streams
a leaf (cid:96) ∈ L to the challenger. The challenger computes
(sp(cid:48), i, aPath) ← addLeaf(sp, (cid:96)) and returns (i, aPath)
to A.
Output: Eventually, A outputs ((cid:96)∗, i∗, aPath∗). The at-
tacker A is said to win the game if: q(λ) < i∗ ≤ n and
catVrfy(vp, i∗, (cid:96)∗, aPath∗) = 1.
We deﬁne AdvowA to be the probability that the attacker A
wins in the above game.
Deﬁnition 7. A chameleon authentication tree CAT, de-
ﬁned by the PPT algorithms (catGen, addLeaf, catVrfy) with
n leaves, is one-way if for any q ∈ N, and for any PPT algo-
rithm A, the probability AdvowA is negligible (as a function
of λ).
5. OUR SCHEME
Recall that in a chameleon hash function the owner of the
trapdoor can easily ﬁnd collisions, i.e., for a given string x
(and randomness r) there exists an eﬃcient algorithm that
computes a value r(cid:48) such that Ch(x; r) = y = Ch(x(cid:48); r(cid:48)). We
ﬁrst discuss why obvious approaches do not seem to work.
After explaining the main ideas of our construction, we de-
ﬁne them formally and give a proof of security.
5.1 Naïve Approaches do not Work
The ﬁrst idea would be to build a Merkle tree, where the
server stores the entire tree and the client keeps the last au-
thentication path in its state. This idea, however, does not
work, because all leaves are necessary to compute the root.
Using dummy nodes does not solve the problem, because
the root would change whenever a new leaf is authenticated.
Thus, the second approach might be to store the outputs of
chameleon hash functions as the leaves with the idea that
whenever the client wishes to authenticate a new value, it
simply applies the trapdoor such that the new leaf authen-
ticates under the same root. This idea, however, does still
not work. One reason is that the client would have to store
all leaves (together with the corresponding randomness) in
order to compute a collision. One might be temped to let
the server store these values, but this does not work for sev-
eral reasons: First of all, the data are streamed. This means
that there is no communication from the server to the client
at this stage. But even if we would allow bi-directional in-
teraction, it would immediately lead to an attack: Suppose
that the client wishes to append the leaf ˆ(cid:96). To do so, C asks
the server to send the dummy leaf (cid:96) with the correspond-
ing randomness r. Then, the client applies the trapdoor
to compute the matching randomness ˆr and sends the up-
dated values ˆ(cid:96), ˆr to the server. The problem is that the ma-
licious server would learn a colluding pair ((cid:96), r), (ˆ(cid:96), ˆr) such
that Ch((cid:96); r) = Ch(ˆ(cid:96); ˆr). In many schemes, this knowledge
would allow the server to compute another pair ((cid:96)∗, r∗) such
that Ch((cid:96); r) = Ch(ˆ(cid:96); ˆr) = Ch((cid:96)∗; r∗) (some schemes even al-
low to recover the trapdoor csk if one knows a collision, such
as, e.g., [KR00]).
5.2 Intuition of our Construction
ρ
v2,0 ← H(v1,0(cid:107)v1,1)
v2,1 ← Ch(x2,1; r2,1)
v1,1 ← Ch(x1,1; r1,1)
(cid:96)0
(cid:96)1
Figure 2: A CAT of depth 3 that authenticates the
leaves (cid:96)0 and (cid:96)1. The root and the right nodes are
computed by a chameleon hash and the left nodes
by a collision-resistant hash function. The leaves
(cid:96)2, . . . , (cid:96)7 are unknown.
The basic idea of our construction is a careful combina-
tion of hash functions H and chameleon hash functions Ch.
As a warm up, we ﬁrst illustrate the high-level idea of
our instantiation with the tree shown in Figure 2. We stress
957that our actual construction is slightly diﬀerent, because the
catGen algorithm does not know the leaves (cid:96)0 and (cid:96)1.
We set up the tree such that the root and every right-
handed node of the tree are computed by a chameleon hash
function and all left-handed nodes with a collision-resistant
hash function. The ﬁrst step is to set up the tree by com-
puting the hash value of the leaves (cid:96)0 and (cid:96)1 as v1,0 ←
H((cid:96)0(cid:107)(cid:96)1). Then, the algorithm picks two random values
x1,1, r1,1 to compute the dummy right-handed node v1,1 ←
Ch(x1,1; r1,1). The next step is to compute the parent node
v2,0 ← H(v1,0(cid:107)v1,1) and to pick two additional random val-
ues x2,1, r2,1. The algorithm then sets v2,1 ← Ch(x2;1; r2,1)
and ρ ← Ch(v2,0(cid:107)v2,1; rρ) using some randomness rρ. The
authentication path of the leaves (cid:96)0 and (cid:96)1 only consists of
the nodes v1,1, v2,1 and the randomness rρ. It does not con-
tain the pre-images x1,1, r1,1 (resp. x2,1, r2,1). We stress that
this is crucial for the security proof.
To add the elements (cid:96)2 and (cid:96)3 to the tree, the algorithm