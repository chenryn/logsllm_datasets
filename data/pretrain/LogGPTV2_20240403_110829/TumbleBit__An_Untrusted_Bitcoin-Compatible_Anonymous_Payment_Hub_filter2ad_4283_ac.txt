address Addr B chosen freshly for the epoch.
A. Anonymity Properties
As a classic tumbler, TumbleBit has the same bal-
ance property, but stronger anonymity: k-anonymity
within an epoch [21],
[9]. Speciﬁcally, while the
blockchain reveals which payers and payees participated
in an epoch, no one (not even the Tumbler T ) can
tell which payer paid which payee during that speciﬁc
epoch. Thus,
if k payments successfully completed
during an epoch, the anonymity set is of size k. (This
stronger property follows directly from our unlinkability
deﬁnition (Section III-C): there are k compatible inter-
action graphs because the interaction graph is bijection.)
Recovery from anonymity failures.
It’s not always the
case that k = ℵ. The exact anonymity level achieved
in an epoch can be established only after its Cash-Out
Phase. For instance, anonymity is reduced to k = ℵ− 1
if T aborts an payment made by payer Aj. We deal with
this by requiring B to uses an ephemeral Bitcoin address
Fig. 2.
compatible interaction multi-graph.
Our unlinkability deﬁnition: The Tumblers view and a
only two on-blockchain transactions sufﬁce for Bob
B to receive an arbitrary number of off-blockchain
payments. Details are in the full version [20]. Given
that each party uses two on-blockchain transactions
to make multiple off-blockchain playments, Tumblebit
helps Bitcoin scale.
C. TumbleBit’s Security Properties
Unlinkability. We assume that the Tumbler T does not
collude with other users. The view of T consists of (1)
the set of escrow transactions established between (a)
each payer Aj and the Tumbler (Aj
escrow,ai−→ T ) of value
ai and (b) the Tumbler and each payee Bi (T escrow,bi−→ Bi),
(2) the set of puzzle-solver protocols completed with
each payer Aj at time t during the Payment Phase, and
(3) the set of cashout transactions made by each payer
Aj and each payee Bi during the Cash-Out Phase.
An interaction multi-graph is a mapping of pay-
ments from payers to payees (Figure 2). For each
successful puzzle-solver protocol completed by payer
Aj at time t, this graph has an edge, labeled with time
t, from Aj to some payee Bi. An interaction graph is
compatible if it explains the view of the Tumbler T ,
i.e., the number of edges incident on Bi is equal to the
total number of bitcoins cashed out by Bi. Unlinkability
requires all compatible interaction graphs to be equally
likely. Anonymity therefore depends on the number of
compatible interaction graphs.
Notice that payees Bi have better anonymity than
payers Aj. (This follows because the Tumbler T knows
the time t at which payer Aj makes each payment.
Meanwhile, the Tumbler T only knows the aggregate
amount of bitcoins cashed-out by each payee Bi.)
A high-level proof of TumbleBit’s unlinkability is
in Section VII, and the limitations of unlinkability are
discussed in Section VII-C.
Balance. The system should not be exploited to print
new money or steal money, even when parties collude.
As in [18], we call this property balance, which estab-
lishes that no party should be able to cash-out more
bitcoins than what is dictated by the payments that
were successfully completed in the Payment Phase. We
discuss how TumbleBit satisﬁes balance in Section VII.
6
𝓐1𝓐2t5𝓐3𝓐4𝓑1𝓑2𝓑3A compatiable interaction grapht6t1t3t5t2t3t4Payer puzzle-solver payments2 BTCPayee cashouts3 BTC3 BTC????????{{Tumbler's ViewAddr B in each epoch. As in [21], Bob B discards
Addr B if (1) the Tumbler T maliciously aborts Aj’s
payment in order to infer that Aj was attempting to
pay B (see Section VIII-C); or (2) k-anonymity was
too small. (In case (2), B can alternatively re-tumble
the bitcoin in Addr B in a future epoch.)
Remark: Intersection attacks. While this notion of k-
anonymity is commonly used in Bitcoin tumblers (e.g.,
[9], [21]), it does suffer from the following weakness.
Any adversary that observes the transactions posted to
the blockchain within one epoch can learn which payers
and payees participated in that epoch. Then, this infor-
mation can be correlated to de-anonymize users across
epochs (e.g., using frequency analysis or techniques
used to break k-anonymity [15]). See also [9], [32].
DoS and Sybil Attacks. We use fees to resist DoS
and Sybil attacks. Alice again pays for both the Q
escrowed in transaction Tescr(A,T ) and for its transaction
fees. However, we run into a problem if we want Bob
B to pay the fee on the escrow transaction Tescr(T ,B).
Because Bob B uses a freshly-chosen Bitcoin address
Addr B, that is not linked to any prior transaction on
the blockchain, Addr B cannot hold any bitcoins. Thus,
Bob B will have to pay the Tumbler T out of band.
The anonymous fee vouchers described in [21] provide
one way to address this, which also has the additional
feature that payers A cover all fees.
V. A FAIR EXCHANGE FOR RSA PUZZLE SOLVING
We now explain how to realize a Bitcoin-compatible
fair-exchange where Alice A pays Tumbler T one
bitcoin iff the T provides a valid solution to an RSA
puzzle. The Tumbler T has an RSA secret key d and the
corresponding public key (e, N). The RSA puzzle y is
provided by Alice, and its solution is an RSA secret-key
exponentiation
 = f−1
RSA(y, d , N ) = yd mod N
(4)
The puzzle solution is essentially an RSA decryption or
RSA signing operation.
This protocol is at the heart of TumbleBit’s Payment
Phase. However, we also think that this protocol is
of independent interest, since there is also a growing
interest in techniques that can fairly exchange a bitcoin
for the solution to a computational “puzzle”. (The full
version [20] reviews the related work [27], [30], [24],
[6].) Section V-A presents our RSA-puzzle-solver proto-
col as a stand-alone protocol that requires two blocks to
be conﬁrmed on the blockchain. Our protocol is fast—
solving 2048-bit RSA puzzles faster than [30]’s protocol
for solving 16x16 Sudoku puzzles (Section VIII)). Also,
the use of RSA means that our protocol supports solving
blinded puzzles (see equation (2)), and thus can be used
to create an unlinkable payment scheme. Section V-C
shows how our protocol is integrated into TumbleBit’s
Payment Phase. Implementation results are in Table II
of Section VIII-B.
7
Alice A
Input: Puzzle y
π proves validity of (e, N) in a one-time-only setup phase.
Public input: (e, N).
Tumbler T
Secret input: d
1. Prepare Real Puzzles R
For j ∈ [m], pick rj ∈ Z∗
dj ← y · (rj)e mod N
N
2. Prepare Fake Values F
For i ∈ [n], pick ρi ∈ Z∗
δi ← (ρi)e mod N
N
{d1 . . . dm, δ1 . . . δn}
3. Mix Sets.
Randomly permute
to {β1 . . . βm+n}
Let R be the indices of the di
Let F be the indices of the δi
5. Identify Fake Set F
β1...βm+n
−−−−−−→
4. Evaluation
For i = 1 . . . m + n
i mod N
Evaluate βi: si = βd
Encrypt the result si:
– Choose random ki ∈ {0, 1}λ1
– ci = H prg(ki) ⊕ si
Commit to the keys: hi = H(ki)
c1,...,cm+n
←−−−−−−−
←−−−−−−−
h1,...,hm+n
F,ρi ∀i∈F
−−−−−−→ 6. Check Fake Set F
Verify βi = (ρi)e mod N,
For all i ∈ F :
If yes, reveal ki ∀i ∈ [F ].
Else abort.
7. Check Fake Set F
For all i ∈ F ,
Verify that hi = H(ki)
Decrypt si = H prg(ki) ⊕ ci
Verify (si)e = (ρi) mod N
Abort if any check fails.
ki ∀i∈F←−−−−−
8. Post transaction Tpuzzle
Tpuzzle offers 1 bitcoin within timewindow tw 1
under condition “the fulﬁlling transaction is
signed by T and has preimages of hj ∀j ∈ R”.
y, rj∀j∈R
−−−−−−−→ For all j ∈ R
9. Check βj unblind to y ∀j ∈ R
Verify βj = y · (rj)e mod N
If not, abort.
10. Post transaction Tsolve
Tsolve contains kj∀j ∈ R
11. Obtain Puzzle Solution
For j ∈ R:
Learn kj from Tsolve
Decrypt cj to sj = H prg(kj) ⊕ cj
If sj is s.t. (sj)e = βj mod N,
Obtain solution sj/rj mod N
which is yd mod N.
Fig. 3. RSA puzzle solving protocol. H and H prg are modeled as
random oracles. In our implementation, H is RIPEMD-160, and H prg
is ChaCha20 with a 128-bit key, so that λ1 = 128.
A. Our (Stand-Alone) RSA-Puzzle-Solver Protocol
The following stand-alone protocol description as-
sumes Alice A wants to transfer 1 bitcoin in exchange
for one puzzle solution. Section V-C shows how to
support the transfer of up to Q bitcoins for Q puzzle
solutions (where each solution is worth 1 bitcoin).
The core idea is similar to that of contingent pay-
ments [27]: Tumbler T solves Alice’s A’s puzzle y by
computing the solution yd mod N, then encrypts the
solution under a randomly chosen key k to obtain a
ciphertext c, hashes the key k under bitcoin’s hash as
h = H(k) and ﬁnally, provides (c, h) to Alice. Alice A
prepares Tpuzzle offering one bitcoin in exchange for the
preimage of h. Tumbler T earns the bitcoin by posting
a transaction Tsolve that contains k, the preimage of h,
and thus fulﬁlls the condition in Tpuzzle and claims a
bitcoin for T . Alice A learns k from Tsolve, and uses k
to decrypt c and obtain the solution to her puzzle.
Our challenge is to ﬁnd a mechanism that allows A
to validate that c is the encryption of the correct value,
without using ZK proofs. Thus, instead of asking T to
provide just one (c, h) pair, T will be asked to provide
m + n pairs (Step 3). Then, we use cut and choose:
A asks T to “open” n of these pairs, by revealing the
randomly-chosen keys ki’s used to create each of the n
pairs (Step 7). For a malicious T to successfully cheat
A, it would have to correctly guess all the n “challenge”
pairs and form them properly (so it does not get caught),
while at the same time malforming all the m unopened
pairs (so it can claim a bitcoin from A without actually
solving the puzzle). Since T cannot predict which pairs
A asks it to open, T can only cheat with very low
probability 1/(cid:0)m+n
(cid:1).
n
However, we have a problem. Why should T agree
to open any of the (c, h) values that it produced? If A
received the opening of a correctly formed (c, h) pair,
she would be able to obtain a puzzle solution without
paying a bitcoin. As such, we introduce the notion of
“fake values”. Speciﬁcally, the n (c, h)-pairs that A asks
T to open will open to “fake values” rather than “real”
puzzles. Before T agrees to open them (Step 7), A must
prove that these n values are indeed fake (Step 6).
We must also ensure that T cannot distinguish “real
puzzles” from “fake values”. We do this with RSA
blinding. The real puzzle y is blinded m times with
different RSA-blinding factors (Step 1), while the n
fake values are RSA-blinded as well (Step 2). Finally,
A randomly permutes the real and fake values (Step 3).
Once Alice conﬁrms the correctness of the opened
“fake” (c, h) values (Step 7), she signs a transaction
Tpuzzle offering one bitcoin for the keys k that open all
of the m “real” (c, h) values (Step 8). But what if Alice
cheated, so that each of the “real” (c, h) values opened
to the solution to a different puzzle? This would not be
fair to T , since A has only paid for the solution to a
single puzzle, but has tricked T into solving multiple
puzzles. We solve this problem in Step 9: once A posts
Tpuzzle, she proves to T that all m “real” values open to
the same puzzle y. This is done by revealing the RSA-
blinding factors blinding puzzle y. Once T veriﬁes this,
T agrees to post Tsolve which reveals m of the k values
that open “real” (c, h) pairs (Step 10).
B. Fair Exchange
Fair exchange exchange entails the following: (1)
Fairness for T : After one execution of the protocol A
will learn the correct solution yd mod N to at most
one puzzle y of her choice. (2) Fairness for A: T will
earn 1 bitcoin iff A obtains a correct solution.
We prove this using the real-ideal paradigm [16].
We call the ideal functionality Ffair-RSA and present
it the full version [20]. Ffair-RSA acts like a trusted
8
party between A and T . Ffair-RSA gets a puzzle-solving
request (y, 1 bitcoin) from A, and forwards the request
to T . If T agrees to solve puzzle y for A, then T gets
1 bitcoin and A gets the puzzle solution. Otherwise, if
T refuses, A gets 1 bitcoin back, and T gets nothing.
Fairness for T is captured because A can request a
puzzle solution only if she sends 1 bitcoin to Ffair-RSA.
Fairness for B is captured because T receives 1 bitcoin
only if he agrees to solve the puzzle. The following
theorem is proved in the full version [20]:
Theorem 1: Let λ be the security parameter, m, n
be statistical security parameters, let N > 2λ. Let π be a
publicly veriﬁable zero-knowledge proof of knowledge
in the random oracle model. If the RSA assumption
holds in Z∗
N , and if functions H prg, H are independent
random oracles, there exists a negligible function ν,
such that protocol in Figure 3 securely realizes Ffair-RSA
in the random oracle model with the following security
guarantees. The security for T is 1−ν(λ) while security
for A is 1 − 1
(m+n
n )
− ν(λ).
C. Solving Many Puzzles and Moving Off-Blockchain
To integrate the protocol in Figure 3 into TumbleBit,
we have to deal with three issues. First, if TumbleBit
is to scale Bitcoin (Section III-B), then Alice A must
be able to use only two on-blockchain transactions
Tescr(A,T ) and Tcash(A,T ) to pay for the an arbitrary
number of Q puzzle solutions (each worth 1 bitcoin)
during the Payment Phase; the protocol in Figure 3
only allows for the solution to a single puzzle. Second,
per Section III-B, the puzzle-solving protocol should
occur entirely off-blockchain; the protocol in Figure 3
uses two on-blockchain transactions Tpuzzle and Tsolve.
Third, the Tsolve transactions are longer than typical
transactions (since they contain m hash preimages), and
thus require higher transaction fees.
To deal with these issues, we now present a fair-
exchange protocol that uses only two on-blockchain
transactions to solve an arbitrary number of RSA
puzzles.
Before puzzle solving begins, Alice
Escrow Phase.
posts a 2-of-2 escrow transaction Tescr(A,T )
to the
blockchain that escrows Q bitcoins, (per Section III-B).
is timelocked to time window tw 1, and
Tescr(A,T )
stipulates that the escrowed bitcoins can be transferred
to a transaction signed by both A and T .
Payment Phase. Alice A can buy solutions for up to
Q puzzles, paying 1 bitcoin for each. Tumbler T keeps
a counter of how many puzzles it has solved for A,
making sure that the counter does not exceed Q. When
A wants her ith puzzle solved, she runs the protocol in
Figure 3 with the following modiﬁcations after Step 8
(so that it runs entirely off-blockchain):