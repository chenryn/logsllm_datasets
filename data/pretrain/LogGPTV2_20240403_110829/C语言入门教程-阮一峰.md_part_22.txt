函数会将⽂件内部指示器的当前位置，存储在指针变量 。该函数接受两个参数，第⼀个是
fgetpos() pos
⽂件指针，第⼆个存储指示器位置的变量。
函数会将⽂件内部指示器的位置，移动到指针变量 指定的地址。注意，变量 必须是通
fsetpos() pos pos
过调⽤ ⽅法获得的。 的两个参数与 必须是⼀样的。
fgetpos() fsetpos() fgetpos()
记录⽂件内部指示器位置的指针变量 ，类型为 （file position type 的缩写，意为⽂件定位类
pos fpos_t*
型）。它不⼀定是整数，也可能是⼀个 Struct 结构。
下⾯是⽤法示例。
fpos_t file_pos;
fgetpos(fp, &file_pos);
fsetpos(fp, &file_pos);
上⾯示例中，先⽤ 获取内部指针的位置，后⾯再⽤ 恢复指针的位置。
fgetpos() fsetpos()
执⾏成功时， 和 都会返回 ，否则返回⾮零值。
fgetpos() fsetpos() 0
ferror()，clearerr() #
所有的⽂件操作函数如果执⾏失败，都会在⽂件指针⾥⾯记录错误状态。后⾯的操作只要读取错误指示
器，就知道前⾯的操作出错了。
函数⽤来返回错误指示器的状态。可以通过这个函数，判断前⾯的⽂件操作是否成功。它的原型
ferror()
定义在头⽂件 。
stdio.h
int ferror(FILE *stream);
它接受⼀个⽂件指针作为参数。如果前⾯的操作出现错误， 就会返回⼀个⾮零整数（表示
ferror()
true），否则返回 。
0
函数⽤来重置出错指示器。它的原型定义在头⽂件 。
clearerr() stdio.h
void clearerr(FILE* fp);
它接受⼀个⽂件指针作为参数，没有返回值。
下⾯是⼀个例⼦。
FILE* fp = fopen("file.txt", "w");
char c = fgetc(fp);
if (ferror(fp)) {
printf("读取⽂件：file.txt 时发⽣错误\n");
}
clearerr(fp);
上⾯示例中， 尝试读取⼀个以” 写模式 “打开的⽂件，读取失败就会返回 EOF。这时调⽤
fgetc()
就可以知道上⼀步操作出错了。处理完以后，再⽤ 清除出错状态。
ferror() clearerr()
⽂件操作函数如果正常执⾏， 和 都会返回零。如果执⾏不正常，就要判断到底是哪⾥出
ferror() feof()
了问题。
if (fscanf(fp, "%d", &n) != 1) {
if (ferror(fp)) {
printf("io error\n");
}
if (feof(fp)) {
printf("end of file\n");
}
clearerr(fp);
fclose(fp);
}
上⾯示例中，当 函数报错时，通过检查 和 ，确定到底发⽣什么问题。这两个指
fscanf() ferror() feof()
示器改变状态后，会保持不变，所以要⽤ 清除它们， 可以同时清除两个指示器。
clearerr() clearerr()
remove() #
函数⽤于删除指定⽂件。它的原型定义在头⽂件 。
remove() stdio.h
int remove(const char* filename);
它接受⽂件名作为参数。如果删除成功， 返回 ，否则返回⾮零值。
remove() 0
remove("foo.txt");
上⾯示例删除了 ⽂件。
foo.txt
注意，删除⽂件必须是在⽂件关闭的状态下。如果是⽤ 打开的⽂件，必须先⽤ 关闭后再
fopen() fclose()
删除。
rename() #
函数⽤于⽂件改名，也⽤于移动⽂件。它的原型定义在头⽂件 。
rename() stdio.h
int rename(const char* old_filename, const char* new_filename);
它接受两个参数，第⼀个参数是现在的⽂件名，第⼆个参数是新的⽂件名。如果改名成功， 返
rename()
回 ，否则返回⾮零值。
0
rename("foo.txt", "bar.txt");
上⾯示例将 改名为 。
foo.txt bar.txt
注意，改名后的⽂件不能与现有⽂件同名。另外，如果要改名的⽂件已经打开了，必须先关闭，然后再改
名，对打开的⽂件进⾏改名会失败。
下⾯是移动⽂件的例⼦。
rename("/tmp/evidence.txt", "/home/beej/nothing.txt");
全⽂完
本⽂由 简悦 SimpRead 转码，⽤以提升阅读体验，原⽂地址
变量说明符 语⾔教程 ⽹道
- C -
⽹道（WangDoc.com），互联⽹⽂档计划
“
⽹道（WangDoc.com），互联⽹⽂档计划
C 语⾔允许声明变量的时候，加上⼀些特定的说明符（specifier），为编译器提供变量⾏为的额外信息。
它的主要作⽤是帮助编译器优化代码，有时会对程序⾏为产⽣影响。
const #
说明符表示变量是只读的，不得被修改。
const
const double PI = 3.14159;
PI = 3;
上⾯示例⾥⾯的 ，表示变量 的值不应改变。如果改变的话，编译器会报错。
const PI
对于数组， 表示数组成员不能修改。
const
const int arr[] = {1, 2, 3, 4};
arr[0] = 5;
上⾯示例中， 使得数组 的成员⽆法修改。
const arr
对于指针变量， 有两种写法，含义是不⼀样的。如果 在 前⾯，表示指针指向的值不可修
const const *
改。
int const * x
# 或者
const int * x
下⾯示例中，对 指向的值进⾏修改导致报错。
x
int p = 1
const int* x = &p;
(*x)++;
如果 在 后⾯，表示指针包含的地址不可修改。
const *
int* const x
下⾯示例中，对 进⾏修改导致报错。
x
int p = 1
int* const x = &p;
x++;
这两者可以结合起来。
const char* const x;
上⾯示例中，指针变量 指向⼀个字符串。两个 意味着， 包含的内存地址以及 指向的字符
x const x x
串，都不能修改。
的⼀个⽤途，就是防⽌函数体内修改函数参数。如果某个参数在函数体内不会被修改，可以在函数
const
声明时，对该参数添加 说明符。这样的话，使⽤这个函数的⼈看到原型⾥⾯的 ，就知道调⽤
const const
函数前后，参数数组保持不变。
void find(const int* arr, int n);
上⾯示例中，函数 的参数数组 有 说明符，就说明该数组在函数内部将保持不变。
find arr const
有⼀种情况需要注意，如果⼀个指针变量指向 变量，那么该指针变量也不应该被修改。
const
const int i = 1;
int* j = &i;
*j = 2;
上⾯示例中， 是⼀个指针变量，指向变量 ，即 和 指向同⼀个地址。 本身没有 说明
j i j i j const
符，但是 有。这种情况下， 指向的值也不能被修改。
i j
static #
说明符对于全局变量和局部变量有不同的含义。
static
（1）⽤于局部变量（位于块作⽤域内部）。
⽤于函数内部声明的局部变量时，表示该变量的值会在函数每次执⾏后得到保留，下次执⾏时不会
static
进⾏初始化，就类似于⼀个只⽤于函数内部的全局变量。由于不必每次执⾏函数时，都对该变量进⾏初始
化，这样可以提⾼函数的执⾏速度，详⻅《函数》⼀章。
（2）⽤于全局变量（位于块作⽤域外部）。
⽤于函数外部声明的全局变量时，表示该变量只⽤于当前⽂件，其他源码⽂件不可以引⽤该变量，
static
即该变量不会被链接（link）。
修饰的变量，初始化时，值不能等于变量，必须是常量。
static
int n = 10;
static m = n;
上⾯示例中，变量 有 修饰，它的值如果等于变量 ，就会报错，必须等于常量。
m static n
只在当前⽂件⾥⾯使⽤的函数，也可以声明为 ，表明该函数只在当前⽂件使⽤，其他⽂件可以定义
static
同名函数。
static int g(int i);
auto #
说明符表示该变量的存储，由编译器⾃主分配内存空间，且只存在于定义时所在的作⽤域，退出作⽤
auto
域时会⾃动释放。
由于只要不是 的变量（外部变量），都是由编译器⾃主分配内存空间的，这属于默认⾏为，所以该
extern
说明符没有实际作⽤，⼀般都省略不写。
auto int a;
int a;
extern #
说明符表示，该变量在其他⽂件⾥⾯声明，没有必要在当前⽂件⾥⾯为它分配空间。通常⽤来表
extern
示，该变量是多个⽂件共享的。
extern int a;
上⾯代码中， 是 变量，表示该变量在其他⽂件⾥⾯定义和初始化，当前⽂件不必为它分配存储
a extern
空间。
但是，变量声明时，同时进⾏初始化， 就会⽆效。
extern
extern int i = 0;
int i = 0;
上⾯代码中， 对变量初始化的声明是⽆效的。这是为了防⽌多个 对同⼀个变量进⾏多次初
extern extern
始化。
函数内部使⽤ 声明变量，就相当于该变量是静态存储，每次执⾏时都要从外部获取它的值。
extern
函数本身默认是 ，即该函数可以被外部⽂件共享，通常省略 不写。如果只希望函数在当前
extern extern
⽂件可⽤，那就需要在函数前⾯加上 。
static
extern int f(int i);
int f(int i);
register #
说明符向编译器表示，该变量是经常使⽤的，应该提供最快的读取速度，所以应该放进寄存器。
register
但是，编译器可以忽略这个说明符，不⼀定按照这个指示⾏事。
register int a;
上⾯示例中， 提示编译器，变量 会经常⽤到，要为它提供最快的读取速度。
register a
只对声明在代码块内部的变量有效。
register
设为 的变量，不能获取它的地址。
register
register int a;
int *p = &a;
上⾯示例中， 会报错，因为变量 可能放在寄存器⾥⾯，⽆法获取内存地址。
&a a
如果数组设为 ，也不能获取整个数组或任⼀个数组成员的地址。
register
register int a[] = {11, 22, 33, 44, 55};
int p = a;
int a = *(a + 2);
历史上，CPU 内部的缓存，称为寄存器（register）。与内存相⽐，寄存器的访问速度快得多，所以使⽤
它们可以提⾼速度。但是它们不在内存之中，所以没有内存地址，这就是为什么不能获取指向它们的指针
地址。现代编译器已经有巨⼤的进步，不管是否使⽤ 关键字，都会尽可能使⽤寄存器，所以不保
register
证⼀定会把这些变量放到寄存器。
volatile #
说明符表示所声明的变量，可能会预想不到地发⽣变化（即其他程序可能会更改它的值），不受
volatile
当前程序控制，因此编译器不要对这类变量进⾏优化，每次使⽤时都应该查询⼀下它的值。硬件设备的编
程中，这个说明符很常⽤。
volatile int foo;
volatile int* bar;
的⽬的是阻⽌编译器对变量⾏为进⾏优化，请看下⾯的例⼦。
volatile
int foo = x;
int bar = x;
上⾯代码中，由于变量 和 都等于 ，⽽且 的值也没有发⽣变化，所以编译器可能会把 放
foo bar x x x
⼊缓存，直接从缓存读取值（⽽不是从 x 的原始内存位置读取），然后对 和 进⾏赋值。如果
foo bar x
被设定为 ，编译器就不会把它放⼊缓存，每次都从原始位置去取 的值，因为在两次读取之
volatile x
间，其他程序可能会改变 。
x
restrict #
说明符允许编译器优化某些代码。它只能⽤于指针，表明该指针是访问数据的唯⼀⽅式。
restrict
int* restrict pt = (int*) malloc(10 * sizeof(int));
上⾯示例中， 表示变量 是访问 malloc 所分配内存的唯⼀⽅式。