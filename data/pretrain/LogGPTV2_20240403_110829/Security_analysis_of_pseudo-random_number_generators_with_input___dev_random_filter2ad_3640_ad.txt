for j = 1, . . . , d. If b = 0, A is given (S∗, R) = next(Sd)
and if b = 1, A is given (S∗, R) ← {0, 1}n+(cid:96).
• A outputs a bit b∗.
We deﬁne the advantage of the attacker A in the above game
as |2 Pr[b∗ = b] − 1|.
Definition (Preserving Security ) A PRNG with input
has (t, ε)-preserving security if the advantage of any attacker
A running in time t in the above game is at most ε.
We now show that, taken together, recovering and pre-
serving security notions imply the full notion of strong ro-
bustness (see Appendix A for proof).
Theorem 2. If a PRNG with input has both (t, qD, γ∗, εr)-
recovering security and (t, εp)-preserving security, then it is
((t(cid:48), qD, qR, qS), γ∗, qR(εr + εp))-robust where t(cid:48) ≈ t.
4. PROVABLY SECURE CONSTRUCTION
Let G : {0, 1}m → {0, 1}n+(cid:96) be a (deterministic) pseu-
dorandom generator where m  m, (cid:96), γ∗ be integers. Assume that G :
{0, 1}m → {0, 1}n+(cid:96) is a deterministic (t, εprg)-pseudorandom
generator. Let G = (setup, refresh, next) be deﬁned as above.
Then G is a ((t(cid:48), qD, qR, qS), γ∗, ε)-robust PRNG with input
where t(cid:48) ≈ t, ε = qR(2εprg + q2Dεext + 2−n+1) as long as
γ∗ ≥ m+2 log(1/εext)+1, n ≥ m+2 log(1/εext)+log(qD)+1.
The proof is deferred to Appendix A.
Benchmarks. Benchmarks between our contruction and
Linux PRNGs are detailled in the full version. They are
based on an optimistic hypothesis for Linux PRNGs, and
even with this hypothesis, our construction appears to be
more eﬃcient: a full internal state recovery is two times
faster and a 2048-bits key generation is ten times faster.
5. ANALYSIS OF THE LINUX PRNGS
The Linux operating system contains two PRNGs with in-
put, /dev/random and /dev/urandom. They are part of the
kernel and used in the OS security services or some crypto-
graphic libraries. We give a precise description7 of them in
our model as a triple LINUX = (setup, refresh, next) and we
prove the following theorem:
Theorem 5. The Linux PRNGs /dev/random and /dev/u-
random are not robust.
Since the actual generator LINUX does not deﬁne any seed
(i.e. the algorithm setup always outputs ∅), as mentioned
above, it cannot achieve the notion of robustness. However,
in Sections 5.4 and 5.6, we additionally mount concrete at-
tacks that would work even if LINUX had used a seed. The
attacks exploit two independent weaknesses, in the entropy
estimator and the mixing functions, which would need both
to be ﬁxed in order to expect the PRNGs to be secure.
7All descriptions were done by source code analysis. We
refer to version 3.7.8 of the Linux kernel.
5.1 General Overview
Security Parameters. The LINUX PRNG uses parame-
ters n = 6144, (cid:96) = 80, p = 96. The parameter n can be mod-
iﬁed (but requires kernel compilation), and the parameters
(cid:96) (size of the output) and p (size of the input) are ﬁxed. The
PRNG outputs the requested random numbers by blocks of
(cid:96) = 80 bits and truncates the last block if needed.
Internal State. The internal state of LINUX PRNG is
a triple S = (Si, Su, Sr) where |Si| = 4096 bits, |Su| =
1024 bits and |Sr| = 1024 bits. New data is collected in Si,
which is named the input pool. Output is generated from Su
and Sr which are named the output pools. When a call to
/dev/urandom is made, data is generated from the pool Su
and when a call to /dev/random is made, data is generated
from the pool Sr.
Functions refresh and next. There are two refresh func-
tions, refreshi that initializes the internal state and refreshc
that updates it continuously. There are two next functions,
nextu for /dev/urandom and nextr for /dev/random.
Mixing Function. The PRNG uses a mixing function M,
described in Section 5.5, to mix new data in the input pool
and to transfer data between the pools.
Entropy Estimator. The PRNG uses an entropy esti-
mator, described in Section 5.3, that estimates the entropy
of new inputs and the entropy of the pools. The PRNG
uses these estimations to control the transfers between the
pools and how new input is collected. This is illustrated in
Figure 3 and described in details in Section 5.2. The estima-
tions are named Ei (entropy estimation of Si), Eu (of Su),
Er (of Sr).
5.2 Detailled Description
As illustrated in Figure 3, functions refresh and next are
controlled by Ei, Eu, Er. All functions rely on the same
built-in function extract buf that calls the mixing function
M, a hash function H (the SHA1 function) and a folding
function F deﬁned with F(w0,··· , w4) = (w0 ⊕ w3, w1 ⊕
w4, w2[0···15] ⊕ w2[16···31] ).
Initial refreshi. refreshi(0, I) = M(0, I).
Continuous refreshc. For all I, if Ei ≥ 3584 input I is
ignored (except 1 byte over 4096). When I is used Ei is in-
creased with the estimated entropy of I and refreshc(S, I) =
M(Si, I).
If Er ≥ 8t, then the output
PRNG Output with nextr.
is generated directly from Sr: LINUX ﬁrst calculates a hash
across Sr, then mixes this hash back with Sr, hashes again
the output of the mixing function and folds the result in half,
giving R = F◦H◦M(Sr, H(Sr)) and S(cid:48)
r = M(Sr, H(Sr)). This
decreases Er by 8t and the new value is Er − 8t. If Er  8t
yes