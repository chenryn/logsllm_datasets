删除压缩列表在给定索引上的连续多个
返回给定节点的下一个节点
在压缩列表中查找并返回包含了给定值
返回压缩列表给定索引上的节点
将包含给定值的新节点插人到给定节点
从压缩列表中删除给定的节点
获取给定节点所保存的值
创建一个包含给定值的新节点，并将这
返
创建一个新的压缩列表
回给定节点的前一个节点
表7-4
作用
压缩列表 API
65535时为O(M)
则为 O(N)
杂度为 O(M)．而查找整个列表的复杂度
所以检查节点值和给定值是否相同的复
节点数量小于65535时为0(1)，大于
0(1)
平均 O(M),最坏 O(N)
平均O(N)，最坏 O(N)
(1)0
0(1)
0(1)
因为节点的值可能是一个字节数组，
ON
平均 O(M),，最坏 O(N)
平均 O(M)，最坏 O(N)
0(1)
算法复杂度
第7章压缩列表59
---
## Page 64
的对象：
包含了字符串值“msg"的对象，而键值对的值则是一个包含了字符串值"hello world"
作键值对的值（值对象）。
8.1
务器删除。
长，在服务器启用了maxmemory功能的情况下，空转时长较大的那些键可能会优先被服
个对象来节约内存。
数技术实现了对象共享机制，这一机制可以在适当的条件下，通过让多个数据库键共享同一
使用某个对象的时候，这个对象所占用的内存就会被自动释放；另外，Redis 还通过引用计
为对象设置多种不同的数据结构实现，从而优化对象在不同场景下的使用效率。
对象是否可以执行给定的命令。使用对象的另一个好处是，我们可以针对不同的使用场景
象这五种类型的对象，每种对象都用到了至少一种我们前面所介绍的数据结构。
了一个对象系统，这个系统包含字符串对象、列表对象、哈希对象、集合对象和有序集合对
字符申（SDS）、双端链表、字典、压缩列表、整数集合等等。
举个例子，以下SET命令在数据库中创建了一个新的键值对，其中键值对的键是一个
Redis 使用对象来表示数据库中的键和值，每次当我们在 Redis 的数据库中新创建一个
最后，Redis 的对象带有访问时间记录信息，
除此之外，Redis 的对象系统还实现了基于引l用计数技术的内存回收机制，当程序不再
通过这五种不同类型的对象，Redis 可以在执行命令之前，根据对象的类型来判断一个
本章接下来将逐一介绍以上提到的 Redis 对象系统的各个特性。
Redis 并没有直接使用这些数据结构来实现键值对数据库，而是基于这些数据结构创建
在前面的数个章节里，我们陆续介绍了Redis 用到的所有主要数据结构，比如简单动态
对象的类型与编码
对
第8章
象
该信息可以用于计算数据库键的空转时
---
## Page 65
回的结果为数据库键对应的值对象的类型，
一种，因此：
象、哈希对象、
个字符串对象，
的值可以是表8-1 列出的常量的其中一个。
8.1.1
个属性分别是type 属性、encoding 属性和 ptr 属性：
对于Redis 数据库保存的键值对来说，键总是一
TYPE 命令的实现方式也与此类似，当我们对一个数据库键执行TYPE 命令时，命令返
当我们称呼一
对象的 type 属性记录了对象的类型，这个属性
 Redis 中的每个对象都由一个 redisObject 结构表示，该结构中和保存数据有关的三
redis> TYPE numbers
(integer)  6
redis> RPUSH numbers 1 3 5
#键为字符串对象，值为列表对象
redis> TYPE msg
redis> SET msg "hello world"
#键为字符串对象，值为字符串对象
口当我们称呼一个键为“列表键”时，我们指的是“这个数据库键所对应的值为列表
string
:qo
typedef struct redisobject 
redis> SET msg "hello world"
对象”。
符串对象”;
我们指的是“这个数据库键所对应的值为字
类型
!..
void *ptr;
11 指向底层实现数据结构的指针
unsigned encoding:4;
//编码
unsigned type:4:
11类型
、集合对象或者有序集合对象的其中
而值则可以是字符串对象、列表对
一个数据库键为“字符串键”时，
，而不是键对象的类型：
REDIS_ZSET
REDIS_SET
 REDIS_HASH
REDIS_LIST
REDIS_STRING
类型常量
表 8-1 对象的类型
第8章 对 
有序集合对象
集合对象
哈希对象
列表对象
字符串对象
对象的名称
尊·61
---
## Page 66
62·第一部分数据结构与对象
的编码。
对象的底层实现，这个属性的值可以是表8-3列出的常量的其中一个。
属性决定。
8.1.2
同类型的值对象时所产生的输出。
 REDIS_ENCODING_SKIPLIST
 REDIS_ENCODING_INTSET
REDIS_ENCODING_ZIPLIST
 REDIS_ENCODING_LINKEDLIST
 REDIS_ENCODING_HT
 REDIS_ENCODING_RAW
REDIS_ENCODING_EMBSTR
 REDIS_ENCODING_INT
每种类型的对象都至少使用了两种不同的编码，表8-4列出了每种类型的对象可以使用
 encoding 属性记录了对象所使用的编码，也即是说这个对象使用了什么数据结构作为
对象的 ptr 指针指向对象的底层实现数据结构，而这些数据结构由对象的encoding
表8-2列出了TYPE命令在面对不
zset
redis> TYPE price
(integer) 3
redis> ZADD price 8.5 apple 5.0
#键为字符串对象，值为有序集合对象
redis> TYPE fruits
redis> SADD fruits apple banana cherry
#键为字符串对象，值为集合对象
hash
redis> TYPE profile
#键为字符串对象，值为哈希对象
list
编码和底层实现
banana 6.0 cherry
编码常量
表 8-3 对象的编码
有序集合对象
集合对象
哈希对象
列表对象
字符串对象
对象
简单动态字符申
表8-2
跳跃表和字典
整数集合
压缩列表
双端链表
字典
embstr 编码的简单动态字符申
long 类型的整数
不同类型值对象的 TYPE 命令输出 
编码所对应的底层数据结构
REDIS_ZSET
对象 type 属性的值
REDIS_SET
REDIS_HASH
REDIS_STRING
TYPE 命令的输出
"zset"
"set"
"hash"
"list"
"string"
---
## Page 67
串（SDS）
REDIS_ZSET
REDIS_ZSET
REDIS_SET
REDIS_SET
 REDIS_HASH
REDIS_HASH
REDIS_LIST
REDIS_LIST
REDIS_STRING
REDIS_STRING
REDIS_STRING
字典
简单动态字符串
embstr 编码的简单动态字符
整数
对象所使用的底层数据结构
表 8-5 列出了不同编码的对象所对应的 OBJECT ENCODING 命令输出。
"hashtable"
redis> OBJECT ENCODING numbers
redis> SADD numbers "seven"
"intset"
redis> OBJECT ENCODING numbers
(integer)
redis> SADD
"MeI.
redis>
"""· obe 6uot buo1 buo1 buo1 buoT buol. Arons LaS  OBJECT ENCODING msg
(integer) 1
redis> SET msg "hello wrold"
类
用OBJECTENCODING命令可以查看一个数据库键的值对象的编码
 OBJECT ENCODING StorY
 numbers
 REDIS_ENCODING_SKIPLIST
 REDIS_ENCODING_ZIPLIST
REDIS_ENCODING_HT
 REDIS_ENCODING_INTSET
 REDIS_ENCODING_HT
REDIS_ENCODING_ZIPLIST
REDIS_ENCODING_ZIPLIST
REDIS_ENCODING_RAW
REDIS_ENCODING_EMBSTR
REDIS_ENCODING_LINKEDLIST
REDIS_ENCODING_INT
表8-5
135
编
REDIS_ENCODING_HT
 REDIS_ENCODING_RAW
REDIS_ENCODING_EMBSTR
 REDIS_ENCODING_INT
OBJECT ENCODING 对不同编码的输出
表 8-4
不同类型和编码的对象
编码常置
使用跳跃表和字典实现的有序集合对象
使用压缩列表实现的有序集合对象
使用字典实现的集合对象
使用整数集合实现的集合对象
使用字典实现的哈希对象
使用压缩列表实现的哈希对象
使用双端链表实现的列表对象
使用压缩列表实现的列表对象
使用简单动态字符串实现的字符串对象
使用 embstr 编码的简单动态字符串实现的字符申对象
使用整数值实现的字符串对象
"hashtable"
OBJECT ENCODING 命令输出
"raw"
"embstr"
"int"
对
第
8章
对
9
---
## Page 68
64·第一部分数据结构与对象
为raw。
字符串对象将使用一个简单动态字符串（SDS）来保存这个字符串值，并将对象的编码设置
number 键的值：
器将创建一个如图 8-1所示的 int 编码的字符申对象作为
并将字符串对象的编码设置为int。
字符串对象会将整数值保存在字符串对象结构的ptr 属性里面（将void*转换成1ong），
8.2
在多种不同编码上的实现方法。
层所使用的编码方式，列出对象从一种编码转换成另一种编码所需的条件，以及同一个命令
一个对象设置不同的编码，从而优化对象在某一场景下的效率。
定的编码，极大地提升了 Redis 的灵活性和效率，因为 Redis 可以根据不同的使用场景来为
举个例子，如果我们执行以下 SET命令，那么服务
跳联表和字典
整数集合
压缩列表
双端链表
对象所使用的底层数据结构
举个例子，如果我们执行以下命令，那么服务器将创建一个如图 8-2 所示的raw 编码
如果字符串对象保存的是一个字符串值，并且这个字符串值的长度大于32字节，那么
如果一个字符串对象保存的是整数值，并且这个整数值可以用 1ong 类型来表示，那么
字符串对象的编码可以是int、raw或者embstr。
在接下来的内容中，我们将分别介绍Redis 中的五种不同类型的对象，说明这些对象底
通过encoding 属性来设定对象所使用的编码，而不是为特定类型的对象关联一种固
redis> OBJECT ENCODING number
redis> SET number 10086
其他类型的对象也会通过使用多种不同的编码来进行类似的优化。
口随着列表对象包含的元素越来越多，使用压缩列表来保存元素的优势逐渐消失时，对
口因为压缩列表比双端链表更节约内存，并且在元素数量较少时，在内存中以连续块
举个例子，在列表对象包含的元素比较少时，Redis使用压缩列表作为列表对象的底层实现：
"int"
字符串对象
象就会将底层实现从压缩列表转向功能更强、也更适合保存大量元素的双端链表上面；
方式保存的压缩列表比起双端链表可以更快被载人到缓存中；
REDIS_ENCODING_SKIPLIST
 REDIS_ENCODING_INTSET
 REDIS_ENCODING_ZIPLIST
编码常量
图 8-1int 编码的字符串对象
REDIS_ENCODING_INT
"skiplist"
"intset"
"ziplist"
"linkedlist"
OBJECTENCODING命令输出
 REDIS_STRING
redisobject
encoding