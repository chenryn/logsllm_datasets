### Two-Step Procedure for Constraint Consistency

In a two-step procedure, if \( \text{step}i\Gamma(c) \) is consistent in \(\Gamma\), then \(c\) is consistent in \(\Gamma\). It suffices to check the consistency of the constraint \( \text{step2}\Gamma(\text{step1}\Gamma(c)) \) in \(\Gamma\). Assuming that \(\text{step3}\Gamma\) holds, we demonstrate that this constraint is saturated. This means any message obtained by the attacker through term decomposition already appears in the constraint, and the constraint only includes messages that cannot be reconstructed by the attacker from the rest of the constraint. Using this property, we finally prove that the simple unification tests performed in \(\text{step4}\) are sufficient to ensure static equivalence of each side of the constraint for any well-typed instantiation of the variables.

### Trace Equivalence without Replication

As a direct consequence of Theorems 6.1 and 6.4, we have a procedure to prove trace equivalence of processes without replication.

### Trace Equivalence with Replication

For proving trace equivalence of processes with replication, we need to check the consistency of an infinite family of constraint sets, as prescribed by Theorem 6.2. Not only is the number of constraints unbounded, but the size of the type of some (replicated) variables is also unbounded (e.g., of the form \(\bigoplus_{j=1}^n \tau l,1\)). We show that it is sufficient to apply our procedure to just two constraints. Additionally, we demonstrate that our procedure applied to variables with replicated types, i.e., nonce types of the form \(\tau l,\infty\), implies consistency of the corresponding constraints with types of unbounded size.

### Two Constraints Suffice

Consistency of a constraint set \(C\) does not guarantee the consistency of \(\bigcup_{i=1}^n [C]_i^n\). For example, consider:
\[ C = \{ (h(m) \sim h(p)), [m : \tau HH,\infty_m, p : \tau HH,1_p] \} \]
which can be obtained when typing:
\[ \text{new } m : \tau HH,\infty_m . \text{new } p : \tau HH,1_p . \text{out}(h(m)) \sim \text{out}(h(p)) \]

\(C\) is consistent because \(m\) and \(p\) are secret, and the attacker cannot distinguish between their hashes. However, \(\bigcup_{i=1}^n [C]_i^n\) contains:
\[ \{ h(m_1) \sim h(p), h(m_2) \sim h(p), \ldots, h(m_n) \sim h(p) \} \]
which is inconsistent, as the attacker can notice that the value on the right is always the same, while the value on the left varies.

The inconsistency of \(\bigcup_{i=1}^n [C]_i^n\) would have been discovered when checking the consistency of two copies of the constraint set only. Indeed, \([C]_1^n \cup [C]_2^n\) contains:
\[ \{ h(m_1) \sim h(p), h(m_2) \sim h(p) \} \]
which is already inconsistent for the same reason.

Checking the consistency of two constraints \([C]_1^n\) and \([C]_2^n\) using our procedure ensures the consistency of \(\bigcup_{i=1}^n [C]_i^n\). Note that this does not mean that the consistency of \([C]_1^n\) and \([C]_2^n\) implies the consistency of \(\bigcup_{i=1}^n [C]_i^n\). Instead, our procedure ensures a stronger property, for which two constraints suffice.

**Theorem 6.5.** Let \(C\) and \(C'\) be two constraint sets without any common variables. For all \(n \in \mathbb{N}\),
\[ \text{check\_const}([C]_1^n \cup [C]_2^n \cup [C']_1^n) = \text{true} \Rightarrow \text{check\_const}(\bigcup_{i=1}^n [C]_i^n \cup [C']_1^n) = \text{true} \]

To prove Theorem 6.5, we first show that if \(\text{check\_const}([C]_1^n) = \text{true}\), then the first three steps of the procedure \(\text{check\_const}\) can be successfully applied to each element of \(\bigcup_{i=1}^n [C]_i^n \cup [C']_1^n\). The case of the fourth step is more intricate. If \(\text{step4}\) fails, the constraint contains an inconsistency, i.e., elements \(M \sim M'\) and \(N \sim N'\) for which the unification condition from \(\text{step4}\) does not hold. We show that a similar inconsistency can be found when considering only the first two constraint sets, i.e., in \([C]_1^n \cup [C]_2^n \cup [C']_1^n\), by reindexing the nonces and variables.

### Reducing the Size of Types

The procedure \(\text{check\_const}\) applied to replicated types implies the consistency of corresponding constraints with unbounded types.

**Theorem 6.6.** Let \(C\) be a constraint set. Then for all \(i\),
\[ \text{check\_const}([C]_i) = \text{true} \Rightarrow \forall n \geq 1. \text{check\_const}([C]_i^n) = \text{true} \]

It is relatively easy to show that if \(\text{check\_const}([C]_i) = \text{true}\), then the first three steps of the procedure \(\text{check\_const}\) can be successfully applied to each element of \([C]_i^n\). The case of \(\text{step4}\) is more involved. The property holds due to the condition on the most general unifier expressed in \(\text{step4}\). Intuitively, this condition ensures that if, when applying \(\text{step4}\) to an element of \([C]_i^n\), two messages can be unified, then the corresponding messages (with replicated types) in \([C]_i\) can be unified with a most general unifier \(\mu\) satisfying the condition.

### Checking the Consistency of the Infinite Constraint

Theorems 6.2, 6.5, and 6.6 provide a sound procedure for checking trace equivalence of processes with and without replication.

**Theorem 6.7.** Let \(C\) and \(C'\) be two constraint sets without any common variable.
\[ \text{check\_const}([C]_1 \cup [C]_2 \cup [C']_1) = \text{true} \Rightarrow \forall n. [C']_1^n \cup \bigcup_{i=1}^n [C]_i^n \text{ is consistent.} \]

All detailed proofs are available online [38].

### Experimental Results

We implemented a prototype type-checker, TypeEq, and applied it to various examples, including symmetric key protocols, asymmetric key protocols, and the Helios protocol. The results are reported in Figures 9 and 10. Our tool outperforms existing tools by orders of magnitude in both bounded and unbounded session scenarios.

### Bounded Number of Sessions

We compared our tool with SPEC, APTE, APTE-POR, Akiss, and SAT-Equiv. The results show that TypeEq is almost instantaneous and significantly outperforms the competitors.

### Unbounded Numbers of Sessions

We compared TypeEq with ProVerif for an unbounded number of sessions on three examples: Helios, Denning-Sacco, and NSL. ProVerif could not prove Helios secure due to its inability to express that voters vote only once. The execution times for Denning-Sacco and NSL were very similar for both tools.