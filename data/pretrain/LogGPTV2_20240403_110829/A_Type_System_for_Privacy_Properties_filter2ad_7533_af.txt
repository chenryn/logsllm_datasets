two steps of the procedure, if stepiΓ(c) is consistent in Γ, then c
is consistent in Γ. It then suffices to check the consistency of the
constraint step2Γ(step1Γ(c)) in Γ. Provided that step3Γ holds, we
show that this constraint is saturated in the sense that any message
obtained by the attacker by decomposing terms in the constraint
already occurs in the constraint; and the constraint only contains
messages which cannot be reconstructed by the attacker from the
rest of the constraint. Using this property, we finally prove that the
simple unification tests performed in step4 are sufficient to ensure
static equivalence of each side of the constraint for any well-typed
instantiation of the variables.
As a direct consequence of Theorems 6.1 and 6.4, we now have
a procedure to prove trace equivalence of processes without repli-
cation.
For proving trace equivalence of processes with replication,
we need to check consistency of an infinite family of constraint
sets, as prescribed by Theorem 6.2. As mentioned earlier, not only
the number of constraints is unbounded, but the size of the type
of some (replicated) variables is also unbounded (i.e. of the form
n
j=1(cid:74)τ l,1
it is sufficient to apply our procedure to two constraints only. Sec-
ond, we show that our procedure applied to variables with repli-
cated types, i.e. nonce types of the form τ l,∞
implies consistency
of the corresponding constraints with types of unbounded size.
pj (cid:75)). We use here two ingredients: we first show that
; τ l′,1
mj
n
6.4 Two constraints suffice
Consistency of a constraint set C does not guarantee consistency
of ∪×1≤i ≤n[ C ]n
i
. For example, consider
C = {({h(m) ∼ h(p)},[m : τ HH,∞
m , p : τ HH,1
p
])}
which can be obtained when typing
new m : τ HH,∞
new m : τ HH,∞
m . new p : τ HH,1
m . new p : τ HH,1
p
p
. out(h(m)) ∼
. out(h(p)).
C is consistent: since m, p are secret, the attacker cannot distinguish
between their hashes. However ∪×1≤i ≤n[ C ]n
contains (together
with some environment):
i
{h(m1) ∼ h(p), h(m2) ∼ h(p), . . . , h(mn) ∼ h(p)}
which is not, since the attacker can notice that the value on the
right is always the same, while the value on the left is not.
Note however that the inconsistency of ∪×1≤i ≤n[ C ]n
would
have been discovered when checking the consistency of two copies
of the constraint set only. Indeed, [ C ]n1∪×[ C ]n2 contains (together
with some environment):
i
{h(m1) ∼ h(p), h(m2) ∼ h(p)}
which is already inconsistent, for the same reason.
Actually, checking consistency (with our procedure) of two con-
straints [ C ]n1 and [ C ]n2 entails consistency of ∪×1≤i ≤n[ C ]n
. Note
that this does not mean that consistency of [ C ]n1 and [ C ]n2 implies
consistency of ∪×1≤i ≤n[ C ]n
. Instead, our procedure ensures a
stronger property, for which two constraints suffice.
i
i
Theorem 6.5. Let C and C′ be two constraint sets, which do not
contain any common variables. For all n ∈ N,
check_const([ C ]n1∪×[ C ]n2∪×[ C′ ]n1) = true ⇒
i )∪×[ C′ ]n1) = true.
check_const((∪×1≤i ≤n[ C ]n
check_const([ C ]n1∪×[ C ]n2∪×(cid:2) C
′(cid:3)n
To prove Theorem 6.5, we first (easily) show that if
1) = true,
then the first three steps of the procedure check_const can be
i )∪×[ C′ ]n1 .
successfully applied to each element of (∪×1≤i ≤n[ C ]n
However the case of the fourth step is more intricate. When apply-
ing the procedure check_const to an element of the constraint set
i )∪×[ C′ ]n1 , if step4 fails, then the constraint con-
(∪×1≤i ≤n[ C ]n
tains an inconsistency, i.e. elements M ∼ M′ and N ∼ N ′ for which
the unification condition from step4 does not hold. Then we show
that we can find a similar inconsistency when considering only
the first two constraint sets, i.e. in [ C ]n1∪×[ C ]n2∪×[ C′ ]n1 . This is
done by reindexing the nonces and variables. The proof actually
requires a careful examination of the structure of the constraint set
(∪×1≤i ≤n[ C ]n
6.5 Reducing the size of types
The procedure check_const applied to replicated types implies
consistency of corresponding constraints with unbounded types.
i )∪×[ C′ ]n1 , to establish this reindexing.
Theorem 6.6. Let C be a constraint set. Then for all i,
check_const([ C ]i) = true ⇒
∀n ≥ 1.check_const([ C ]n
i ) = true
Session B4:  Privacy PoliciesCCS’17, October 30-November 3, 2017, Dallas, TX, USA420Again here, it is rather easy to show that if check_const([ C ]i) =
true then the first three steps of the procedure check_const can
successfully be applied to each element of [ C ]n
. The case of step4
i
is more involved. The property holds thanks to the condition on the
most general unifier expressed in step4. Intuitively, this condition
is written in such a way that if, when applying step4 to an element
of [ C ]n
, two messages can be unified, then the corresponding mes-
i
sages (with replicated types) in [ C ]i can be unified with a most
general unifier µ satisfying the condition. The proof uses this idea
to show that if step4 succeeds on all elements of [ C ]i, then it also
succeeds on the elements of [ C ]n
i
6.6 Checking the consistency of the infinite
.
constraint
Theorems 6.2, 6.5, and 6.6 provide a sound procedure for checking
trace equivalence of processes with and without replication.
Theorem 6.7. Let C, and C′ be two constraint sets without any
common variable.
check_const([ C ]1∪×[ C ]2∪×[ C′ ]1) = true ⇒
∀n. [ C′ ]n1∪×(∪×1≤i ≤n[ C ]n
i ) is consistent.
All detailed proofs are available online [38].
7 EXPERIMENTAL RESULTS
We have implemented a prototype type-checker TypeEq and applied
it on various examples briefly described below.
Symmetric key protocols. For the sake of comparison, we
consider 5 symmetric key protocols taken from the benchmark
of [35], and described in [33]: Denning-Sacco, Wide Mouth Frog,
Needham-Schroeder, Yahalom-Lowe, and Otway-Rees. All these
protocols aim at exchanging a key k. We prove strong secrecy of the
key, as defined in [1], i.e., P(k1) ≈t P(k2) where k1 and k2 are public
names. Intuitively, an attacker should not be able to tell which key
is used even if he knows the two possible values in advance. For
some of the protocols, we truncated the last step, when it consists
in using the exchanged key for encryption, since our framework
currently covers only encryption with long-term (fixed) keys.
Asymmetric key protocols. In addition to the symmetric key
protocols, we consider the well-known Needham-Schroeder-Lowe
(NSL) protocol [49] and we again prove strong secrecy of the nonce
sent by the receiver (Bob).
Helios. We model the Helios protocol for two honest voters and
infinitely many dishonest ones, as informally described in Section 2.
The corresponding process includes a non trivial else branch, used
to express the weeding phase [41], where dishonest ballots equal to
some honest one are discarded. As emphasised in Section 2, Helios
is secure only if honest voters vote at most once. Therefore the
protocol includes non replicated processes (for voters) as well as a
replicated process (to handle dishonest ballots).
All our experiments have been run on a single Intel Xeon E5-
2687Wv3 3.10GHz core, with 378GB of RAM (shared with the 19
other cores). All corresponding files can be found online at [39].
7.1 Bounded number of sessions
We first compare our tool with tools designed for a bounded number
of sessions: SPEC [43], APTE (and its APTE-POR variant) [13, 31],
Akiss [30], or SAT-Equiv [35]. The protocol models may slightly
differ due to the subtleties of each tool. For example, several of
these tools require simple processes where each sub-process emits
on a distinct channel. We do not need such an assumption. In addi-
tion, SAT-Equiv only covers symmetric encryption and therefore
could not be applied to Helios or NSL. SAT-Equiv further assumes
protocols to be well-typed, which sometimes requires to tag pro-
tocols. Since we consider only untagged versions (following the
original description of each protocol), SAT-Equiv failed to prove the
Otway-Rees protocol. Moreover, Helios involves non-trivial else
branches, which are only supported by APTE.
The number of sessions we consider denotes the number of
processes in parallel in each scenario. For symmetric key protocols,
we start with a simple scenario with only two honest participants
A, B and a honest server S (3 sessions). We consider increasingly
more complex scenarios (6, 7, 10, 12, and 14 sessions) featuring a
dishonest agent C. In the complete scenario (14 sessions) each agent
among A, B (and C) runs the protocol once as the initiator, and
once as the responder with each other agent (A, B, C). In the case
of NSL, we similarly consider a scenario with two honest agents
A, B running the protocol once (2 sessions), and two scenarios
with an additional dishonest agent C, up to the complete scenario
(8 sessions) where each agent runs NSL once as initiator, once
as responder, with each agent. For Helios, we consider 2 honest
voters, and one dishonest voter only, as well as a ballot box. The
corresponding results are reported in Figure 9. We write TO for
Time Out (12 hours), MO for Memory Out (more than 64 GB of
RAM), SO for Stack Overflow, BUG in the case of APTE, when the
proof failed due to bugs in the tool, and x when the tool could
not handle the protocol for the reasons discussed previously. In all
cases, our tool is almost instantaneous and outperforms by orders
of magnitude the competitors.
7.2 Unbounded numbers of sessions
We then compare our type-checker with ProVerif [21], for an un-
bounded number of sessions, on three examples: Helios, Denning-
Sacco, and NSL. As expected, ProVerif cannot prove Helios secure
since it cannot express that voters vote only once. This may sound
surprising, since proofs of Helios in ProVerif already exist (e.g.
[9, 41]). Interestingly, these models actually implicitly assume a
reliable channel between honest voters and the voting server: when-
ever a voter votes, she first sends her vote to the voting server on a
secure channel, before letting the attacker see it. This model pre-
vents an attacker from reading and blocking a message, while this
can be easily done in practice (by breaking the connection). We also
failed to prove (automatically) Helios in Tamarin [16]. The reason
is that the weeding procedure makes Tamarin enter a loop where
it cannot detect that, as soon as a ballot is not weed, it has been
forged by the adversary.
For the sake of comparison, we run both tools (ProVerif and
TypeEq) on a symmetric protocol (Denning-Sacco) and an asym-
metric protocol (Needham-Schroeder-Lowe). The execution times
are very similar. The corresponding results are reported in Figure 10.
Session B4:  Privacy PoliciesCCS’17, October 30-November 3, 2017, Dallas, TX, USA421Protocols (# sessions) Akiss APTE APTE-POR Spec
9s
191m
TO
Denning -
0.32s
TO
0.08s
3.9s
29s
SO
0.02s
1.6s
3.6s
12m
TO
3
6
7
10
12
14
3
6
7
10
12
14
3
6
7
10
12
14
3
6
7
10
12
14
3
6
7
10
12
14
2
4
8
3
Sacco
Wide Mouth
Frog
Needham -
Schroeder
Yahalom -
Lowe
Otway-Rees
Needham-
Schroeder-
Lowe
Helios
Sat-Eq TypeEq
0.002s
0.09s
0.003s
0.3s
0.004s
0.8s
0.004s
1.8s
3.4s
0.005s
0.006s
5s
0.002s
0.06s
0.003s
0.2s
0.003s
2.3s
0.004s
5s
1m
0.005s
0.006s
4m20s
0.003s
0.5s
0.003s
4s
0.003s
36s
0.005s
1m50s
4m47s
0.005s
0.007s
11m
0.003s
1.4s
0.004s
1m