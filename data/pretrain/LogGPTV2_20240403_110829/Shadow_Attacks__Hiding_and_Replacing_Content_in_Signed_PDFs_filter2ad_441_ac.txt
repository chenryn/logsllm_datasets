original text US90 5628 3174 5628 3174 to US01 2345 6789
2345 6789. Since the deﬁnition of new fonts is considered
harmless, the applications verifying the signature do not warn
of the changes made. A popular software to create a malicious
font description is FontForge.4
C. Shadow Attack: Hide-and-Replace
In this shadow attack class, the attackers create a shadow
PDF document which is sent to the signers. The PDF docu-
ment contains a hidden description of another document with
different content. Since the signers cannot detect the hidden
(malicious) content, they sign the document. After signing,
the attackers receive the document and solely append a new
Xref table and Trailer that enables the hidden objects.
We identiﬁed two variants of this attack class. Both variants
differ in the way the attackers enable the hidden content after
the document had been signed. For each attack variant, we
created one exploit.
1) Variant 1: Change Object References: The idea of this
attack variant is to use the Xref table for changing the reference
to the document’s Catalog (or any other hidden object) to point
to the shadow document. In Figure 6, an example of the attack
is depicted and will be explained further.
a) Step 1 – Injecting the shadow content: The attackers
create a PDF ﬁle containing two objects with the same object
ID (e.g., 4 0 obj) but different content: “Sign the document
4https://fontforge.org/en-US/
7
Figure 6. The attackers successfully manipulate a signed document and force different views on the signers and the victims by using the Hide-and-Replace
attack variant.
to get a reward!” and “You are ﬁred. Get out immediately”. As
shown on the left side in Figure 6, within the Xref table section,
the seemingly harmless content is referenced. The signers only
see this content and sign the PDF ﬁle.
b) Step 2 – Making shadow content visible: After
receiving the signed PDF, the attackers append a new Xref table
and exchange the reference to the object (e.g., 4 0 obj) with
the malicious content “You are ﬁred. Get out immediately”. A
new Trailer is also appended. Since the inclusion of an Xref
table pointing to an already deﬁned object within the signed
area is considered harmless, there is no warning of the changes
made. The signature veriﬁcation is successful. Nevertheless,
the victims see different content than what the signers see.
2) Variant 2: Change Objects Usage: The idea of this
attack variant is again to use the Xref table. However, instead
of changing the reference to the objects, the attackers specify
which objects are “in use” and which are not used (i.e., “free”).
Using this Xref
table feature enables attackers to modify
the visibility of previously included objects. By this means,
attackers can hide “in use” objects and show “free” objects.
This is possible without changing the objects themselves. The
attackers only touch the Xref table, but the signed document’s
presentation can be changed entirely.
a) Step 1 – Injecting the shadow content: Similar to the
ﬁrst attack variant, the attackers insert the malicious content
which is correctly referenced but marked in the Xref table as
not in use. Thus, only the content of the original document is
shown to the signers.
1 %%% Xref table in the document sent to the signers. %%%
2 % Original Xref table
3 xref
4 1 8
5 0000000010 00000 n
6 0000000099 00000 n
7 ...
8
9 % Injection point: new malicious but hidden objects
10 9 1
11 0000006666 00000 f
% start of the Xref table
% 8 objects starting with the object Id 1
% Object 1 at offset 10 is in use
% Object 2 at offset 99 is in use
% Further object references
% 1 object starting with the object Id 9
% Object 9 at offset 6666 is free
Listing 1. The attackers manipulate the original document by injecting new
objects. In the given example, this is the 9 0 obj. The attackers hide this
object by disabling its usage via the Xref table.
b) Step 2 – Making shadow content visible: Once,
the attackers receive the signed manipulated document, they
append a new Xref table. The new Xref table enables the hidden
content and disables the original one.
1 %%% Xref table in the document sent to the signers. %%%
2 % Original Xref table
3 xref
4 1 8
5 0000000010 00000 n
6 0000000099 00000 f
7 ...
8
9 9 1
10 0000006666 00000 n
% start of the Xref table
% 8 objects starting with the object Id 1
% Object 1 at offset 10 is in use
% Object 2 at offset 99 is free
% Further object references
% 1 object starting with the object Id 9
% Object 9 at offset 6666 is in use
Listing 2. The attackers manipulate the signed document by appending the
following Xref table. In the given example, the object with Id 2 deﬁning the
content of a page is disabled and the object with Id 9 is enabled and thus
visible.
D. Stealthiness of Shadow Attacks
Shadow attacks require interactions with the signers and
the victims. Thus, the attackers must create the document so
that neither of the two entities becomes suspicious by merely
opening and reviewing the document. This is truly the case for
all attack variants. However, further actions like text selection,
copy-pasting text, or searching within the document might
expose the attack’s stealthiness.
For all attack classes, we require that the victim cannot
detect the shadow content in any way. Thus, we concentrate
on cases in which the signers might detect the attacks.
The Hide-and-replace class is entirely concealed from the
signers. From the signers’ perspective, there is no possibility
of detecting the shadow content. Variant 2 of the attack
is restricted only to form ﬁelds since its disappearance is
considered harmless by many viewers.
8
Hide Variant 1 (Hide via Referenced Object) might be
detected by searching for a speciﬁc text behind the overlay or
selecting the overlayed content. With respect to this restriction,
the overlayed content can be only a number or a text area that
makes the attack hard to detect. Considering Variant 2 (Hide
via Object’s Order) the attack is entirely concealed for form
ﬁelds since we can hide previously shown ﬁelds.
Concerning Replace Variant 1 (Replace via Overlay), the
attack can be detected only if a form ﬁeld is editable and the
user clicks into the ﬁeld. Noteworthy is that the attackers deﬁne
the capabilities of the form ﬁelds and can always deactivate the
editability. The Replace Variant 2 (Replace via Object’s Order)
can be detected by searching for the original content or copy-
pasting the manipulated content. The copied text contains the
original value.
E. Shadow Attack vs. Incremental Saving Attack
In this section, we highlight the differences between our
Shadow attack and the attacks known as ISA [6] to avoid
confusion between both attack concepts. First, we provide
details regarding the ISA by analyzing all known and publicly
available ISA attack vectors plus their corresponding counter-
measures. Second, we explain why these countermeasures are
insufﬁcient to mitigate the Shadow attack.
a) Attack Vectors: ISA overwrites content objects di-
rectly or by using a malformed Incremental Update to bypass
the protection mechanisms. We analyzed all available ISA
attack vectors [8] and classiﬁed them into four categories:
forbidden objects, invalid objects, missing Xref table, and miss-
ing Trailer. We estimated that none of the four categories is
generic. Every category depends on the corresponding viewer
and even on its version. Additionally, each of them inter-
prets malformed objects and Incremental Updates differently.
Finally, one can say that ISA is less generic and software-
dependent.
In contrast, the shadow attack relies on a well-formed
Incremental Update and thus does not depend on each viewer’s
speciﬁc interpretation, but on standard-compliant features.
Considering the creation of malicious PDF documents, ISA
scales better than the shadow attacks. To carry out ISA, the
attackers possess one signed ﬁle by a trusted authority, and
they can create malicious PDF documents with any content.
The attackers can display only content, which was hidden
during the signing process and which is already part of the
signed document. As a result, the amount of malicious PDF
documents, which the attackers can create, is limited.
b) Attacker Model: Both attacks rely on different at-
tacker models: ISA relies on an attacker possessing a digi-
tally signed PDF document. The shadow attack additionally
assumes that the attackers inject malicious content before the
PDF is signed.
c) Countermeasures: We summarized the implemented
ISA countermeasures in Table I.
The ﬁrst countermeasure is the deﬁnition of forbidden
objects within an Incremental Update, i.e., blacklisting the
objects /Pages, /Page, /Contents. This is reasonable because
each of these objects directly inﬂuences the presented content
Forbidden
Objects
ISA Countermeasures
Missing
Invalid
Xref table
Objects
Missing
Trailer
(cid:32)
(cid:71)(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
Shadow Attacks
Hide
Replace
Hide-and-Replace
(cid:32) Countermeasure insufﬁcient (cid:71)(cid:35) Countermeasure partially successful
(cid:35) Countermeasure sufﬁcient
EVALUATING THE ISA COUNTERMEASURES REVEALS THEIR
Table I.
INEFFECTIVENESS AGAINST THE shadow ATTACKS. NO CURRENTLY
IMPLEMENTED COUNTERMEASURE IS SUFFICIENT.
(cid:32)
(cid:32)
(cid:32)
by opening a PDF. All other countermeasures target malformed
Incremental Update.
Shadow attacks are not affected by any of these counter-
measures since they do not rely on malformed Incremental
Update. Only the Replace via Overwrite variant is restricted
since the deﬁnition of a new font could be detected by extend-
ing the current lists with forbidden objects. Nevertheless, the
Replace via Overlay is not affected. The Hide and Hide-and-
Replace variants are always applicable as long as the viewers
allow Incremental Update.
To summarize, PDF viewers have to choose between be-
ing standard-compliant (by allowing Incremental Update) and
vulnerable, or being secure and not standard-compliant.
VI. PDF-ATTACKER
In this section, we present PDF-Attacker, a toolset that
automatically creates shadow attack exploits.
a) Design of PDF-Attacker: PDF-Attacker is written in
Python using Jupyter Notebooks. This design enables the high
ﬂexibility that is necessary to resemble the shadow attacks.
For each attack variant of each shadow attack class, we
created a separate Jupyter Notebook, so that all exploits can
be investigated and extended independently.
Initially, our goal was to use a single Python PDF library
for all attacks. It turned out that this is not ideal since every
attack addresses different PDF features. For example, for
attacks using forms, the reportlab library provides many useful
features. In contrast, the hide-and-replace attacks require low
level access to PDF objects, which is possible with pypdf4.
In the end, we used different libraries for different attacks in
order to maximize the functionality of the tool.
b) Conﬁguration of PDF-Attacker: Before starting to
work with PDF-Attacker some conﬁguration steps need to
be executed. The conﬁguration steps can be summarized as
follows:
• Content to manipulate: Independent of the attack variant,
PDF-Attacker needs to know which content is in the
attack scope. This could be an entire page, a ﬁeld value,
or a font description.
• Shadow content: Depending on the attack variant, the
shadow content also needs to be prepared. This content
could be an image overlapping some content, a malicious
font, a malicious value, or an entire document with a
speciﬁc content.
• Key material: Many PDF applications offer the ability
to digitally sign a PDF only in the commercial version.
Since we do not want to rely on an external software, we
9
decided to implement a signing module. The correspond-
ing key material can also be speciﬁed by using different
keys than those provided.
c) Exploit Generation with PDF-Attacker: The exploit
generation with PDF-Attacker is separated in three phases, as
depicted in Figure 7. In the ﬁrst phase “Generate Shadow
q PDF
p PDF
PDF-Attacker
PDF-Detector
Phase 1: Generate Shadow PDF
Phase 2: Sign Shadow PDF
Phase 3: Enable Shadow Content
p
p
p Shadow Document
true
is signed? false
Module 1: Prevention
Execute Module 1,
if no active Shadow
elements found
Module 2: Detection
result
result
Figure 7. The PDF-Attacker takes an arbitrary PDF as input, builds-in the
shadow objects (Phase 1), signs the document (Phase 2), and ﬁnalizes the
attack by enabling the shadow content (Phase 3). The PDF-Detector is a tool
to detect malicious documents generated in Phase 1 and Phase 3. It can also
take an arbitrary PDF as input and is described in section VIII.
PDF”, PDF-Attacker takes an arbitrary PDF as input and
inserts the shadow elements according to the chosen attack
variant. This phase is the most complex part of the attack. The
reason is the complexity and ﬂexibility of the PDF standard.
The tool should be able to process different PDF versions,
new features, and interactive elements. The tool should be ﬁnd
the relevant content within complex structures and place the
attack vector in a usable way. We were able to reduce this
complexity by using multiple libraries that parse the PDF ﬁles
for us, and ﬁnd the relevant content. The relevant libraries can
be summarized as follows:
• Hide: The wand library allows the conversion of an
arbitrary PDF to an image, which can be used as an
overlay.
• Replace: The python libraries reportlab and ﬁtz provide
interfaces to work with forms and change their values.
Some attack variants require low-level access to PDF
source code to manipulate the appearance or exchange the
existing fonts. For such cases, we use the pypdf4 library
in addition.
• Hide-and-Replace: The preparation of this attack requires
creating a complete shadow document and the corre-
sponding Xref table. Only the pypdf4 library provides
such a low-level interface allowing us to automate these
steps. Some of the attack steps, however, are not sup-
ported by any library. Thus, we directly manipulated the
PDF.
The “Sign Shadow PDF” phase. This step prepares the PDF
that will be signed. We decided to simulate the signing process
in Python, using the endesive library. This decision allows
simulating both the preparation and the modiﬁcation phase
easily. Generally, this step could also be executed externally,
for example, by using Adobe Acrobat to sign the prepared
PDF. The “making shadow content visible” phase. In this step,
the signed PDF is manipulated, so that the shadow content is
shown.
d) Running PDF-Attacker: The deployment of PDF-
Attacker is challenging because many Python libraries rely on
external tools. For example, to convert an arbitrary PDF into a
PNG, a dedicated imagemagic package must be installed, and a
proper policy.xml must be conﬁgured. To minimize the ef-
fort of using or extending PDF-Attacker, we used VSCode with
remote docker containers as deployment. By this means, using
PDF-Attacker only requires VSCode and Docker. Everything
else, including downloading all relevant packages and setting
up the execution environment, is automatically conﬁgured.
e) Limitations: We are aware of the limitations con-
cerning the PDF documents used as an input. Manipulations
on encrypted documents are not supported. Also, documents
having one or multiple Incremental Updates have not yet
been tested. This limitation also includes documents that have
already been signed and is a natural limitation due to the 1300-
pages PDF speciﬁcation’s complexity.
Considering the Replace via Overwrite attack, we created
one malicious font. Thus, only ﬁles having this font, can be
attacked. This limitation can be circumvented by automatically
extracting the fonts contained in a PDF ﬁle and using tools
like FontForge 5 to generate malicious fonts on the ﬂy. Due to
the high complexity and variants of fonts, we considered this
functionality out-of-scope.
Concerning the shadow content, we prepared proofs-of-
concept for each attack variant. We allow variations regarding
this content. However, more complex changes, including ma-
nipulations on multiple forms or pages, are not or only partially
supported.
VII. EVALUATION
In this section we present the results of our evaluation. The
manipulated PDF documents created during the research were
tested as black box procedures under all viewing applications
listed in Table II.
A. Test Environment
Three computer systems were used for the simulation of
the three entities attackers, signers, and victims. While the
attackers’ and signers’ systems are based on Windows 10,
we divided the victims’ systems into Windows 10, macOS
Catalina, and Ubuntu 18.04.3 LTS as a Linux distribution.
Thus, we could test the effects of the manipulations on all
standard operating systems. As part of a digital ID created