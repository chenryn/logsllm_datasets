### 目录结构与文件修改

以下是当前目录的文件和文件夹列表：

```plaintext
drwxr-xr-x 16 hack hack 4096 1月 16 11:55 .
drwxr-xr-x 4 hack hack 4096 1月 16 11:55 ..
drwxrwxr-x 2 hack hack 4096 1月 16 11:55 bin
drwxrwxr-x 3 hack hack 4096 1月 16 11:55 dev
drwxrwxr-x 2 hack hack 4096 1月 16 11:55 etc
drwxrwxr-x 9 hack hack 4096 1月 16 11:55 etc_ro
drwxrwxr-x 2 hack hack 4096 1月 16 11:55 home
lrwxrwxrwx 1 hack hack 11 1月 16 11:55 init -> bin/busybox
drwxr-xr-x 4 hack hack 4096 1月 16 11:55 lib
drwxrwxr-x 2 hack hack 4096 8月 24 19:30 media
drwxrwxr-x 2 hack hack 4096 8月 24 19:30 mnt
drwxrwxr-x 2 hack hack 4096 8月 24 19:30 proc
drwxrwxr-x 2 hack hack 4096 1月 16 11:55 sbin
```

在这个目录中，您可以对原始文件进行任意修改或添加新文件。需要注意的是，DIR-816 A2路由器的闪存容量为4MB，而原始镜像几乎占满了所有空间，因此很难再添加大文件。

### 重打包Linux Kernel Image

#### 步骤

1. **进入rootfs目录**：
   ```bash
   cd rootfs
   ```

2. **归档rootfs下的所有文件**：
   ```bash
   find . | cpio -H newc -o > ../root_fs.cpio
   ```

3. **查看归档结果**：
   ```bash
   cpio -tv -F ../root_fs.cpio | more
   ```
   输出示例：
   ```plaintext
   drwxr-xr-x  16 hack     hack            0 Jan 16 11:55 .
   drwxrwxr-x   2 hack     hack            0 Jan 16 11:55 sbin
   -rwxr-xr-x   1 hack     hack        29541 Aug 24 19:29 sbin/internet.sh
   -rwxr-xr-x   1 hack     hack         3073 Aug 24 19:29 sbin/config-powersave.sh
   lrwxrwxrwx   1 hack     hack           14 Jan 16 11:55 sbin/poweroff -> ../bin/busybox
   -rwxr-xr-x   1 hack     hack         7356 Aug 24 19:29 sbin/lan.sh
   -rwxr-xr-x   1 hack     hack         8981 Aug 24 19:29 sbin/virtual_server_dmz_s
   ```

4. **使用pax命令行工具进行路径替换**：
   ```bash
   pax -w -x sv4cpio -s '/rootfs//' rootfs > root_fs.cpio
   ```

5. **查看归档结果**：
   ```bash
   cpio -tv -F root_fs.cpio | more
   ```
   输出示例：
   ```plaintext
   drwxrwxr-x 2 hack hack 0 Jan 16 11:55 /sbin
   -rwxr-xr-x 1 hack hack 29541 Aug 24 19:29 /sbin/internet.sh
   -rwxr-xr-x 1 hack hack 3073 Aug 24 19:29 /sbin/config-powersave.sh
   lrwxrwxrwx 1 hack hack 14 Jan 16 11:55 /sbin/poweroff -> ../bin/busybox
   -rwxr-xr-x 1 hack hack 7356 Aug 24 19:29 /sbin/lan.sh
   -rwxr-xr-x 1 hack hack 8981 Aug 24 19:29 /sbin/virtual_server_dmz_set2.sh
   -rwxr-xr-x 1 hack hack 5120 Aug 24 19:29 /sbin/lan_web_filter.sh
   -rwxr-xr-x 1 hack hack 1840 Aug 24 19:29 /sbin/portal_manage.sh
   -rwxr-xr-x 1 hack hack 1143 Aug 24 19:29 /sbin/automount.sh
   -rwxrwxr-x 1 hack hack 238 Aug 24 19:29 /sbin/pt_hotplug
   ```

#### Python脚本进行重打包

```python
#!/usr/bin/env python2
# coding=utf-8
import sys
import os

original_image_file = open("kernel_image", 'rb')
original_image_data = original_image_file.read()
original_xz_root_fs_start_offset = 0x48b000
original_root_fs_end_offset = 0x6d138c
original_root_fs_size = original_root_fs_end_offset - original_xz_root_fs_start_offset
working_folder = '/home/hack/IoT/D-Link_image'
root_fs_folder_name = 'rootfs'
xz_path = '/home/hack/IoT/tool/bin/xz'
lzma_path = '/home/hack/IoT/tool/bin/lzma'

# Archive rootfs with cpio
cpio_archive_cmd = "cd %s ; pax -w -x sv4cpio -s '/%s//' %s > root_fs.cpio" % (working_folder, root_fs_folder_name, root_fs_folder_name)
print("execute: %s" % cpio_archive_cmd)
os.popen(cpio_archive_cmd)

# Compress rootfs with xz
xz_cmd = "cd %s ; %s --check=crc32 -z -c root_fs.cpio > root_fs.cpio.xz" % (working_folder, xz_path)
print("execute: %s" % xz_cmd)
os.popen(xz_cmd)

# Repack image
new_image_name = 'kernel_image_hacked.img'
new_image = open(new_image_name, 'wb')
new_xz_root_fs_path = 'root_fs.cpio.xz'
new_xz_root = open(new_xz_root_fs_path, 'rb')
new_xz_root_data = new_xz_root.read()

if len(new_xz_root_data) > original_root_fs_size:
    print("new image is too big, exit")
    sys.exit()

new_image_data = original_image_data[:original_xz_root_fs_start_offset]
new_image_data += new_xz_root_data + ('\x00' * (original_root_fs_size - len(new_xz_root_data)))
new_image_data += original_image_data[original_root_fs_end_offset:]
new_image.write(new_image_data)

# Compress image with lzma
lzma_cmd = "cd %s ; rm kernel_image_hacked.img.lzma; %s -z kernel_image_hacked.img" % (working_folder, lzma_path)
print("execute: %s" % lzma_cmd)
os.popen(lzma_cmd)

# Make uimage
mkimg_cmd = 'cd %s; mkimage -A MIPS -O Linux -T kernel -C lzma -n "Linux Kernel Image" -a 80000000 -e 8000C2F0 -d kernel_image_hacked.img.lzma kernel_image_hacked.uimg' % (working_folder)
os.popen(mkimg_cmd)
```

至此，重新打包过的Linux内核镜像已经完成。您可以使用U-Boot中的刷写功能或将文件上传到服务器后结合命令执行漏洞调用`mtd_write`命令来覆写Linux内核镜像。

### 实验

作为实验，我改写了`hw_nat.sh`文件，添加了从远端下载并自动执行shell脚本的功能。这样，在路由器启动时会从TFTP服务器中下载并执行shell脚本，从而不再需要每次手动上传`gdbserver`和`busybox`。

### 总结

本文主要分享了我在研究D-Link DIR-816 A2路由器过程中遇到的一些问题及解决方法。希望这篇文章能够帮助那些对IoT安全研究感兴趣或无从下手的同学们。这款路由器存在多个安全问题，我们已于今年1月将发现的安全漏洞提交给了D-Link厂商。

附注：设备中还存在疑似开启telnet服务的特殊代码。