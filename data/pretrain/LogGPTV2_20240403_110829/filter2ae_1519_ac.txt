    drwxr-xr-x 16 hack hack 4096 1月 16 11:55 .
    drwxr-xr-x 4 hack hack 4096 1月 16 11:55 ..
    drwxrwxr-x 2 hack hack 4096 1月 16 11:55 bin
    drwxrwxr-x 3 hack hack 4096 1月 16 11:55 dev
    drwxrwxr-x 2 hack hack 4096 1月 16 11:55 etc
    drwxrwxr-x 9 hack hack 4096 1月 16 11:55 etc_ro
    drwxrwxr-x 2 hack hack 4096 1月 16 11:55 home
    lrwxrwxrwx 1 hack hack 11 1月 16 11:55 init -> bin/busybox
    drwxr-xr-x 4 hack hack 4096 1月 16 11:55 lib
    drwxrwxr-x 2 hack hack 4096 8月 24 19:30 media
    drwxrwxr-x 2 hack hack 4096 8月 24 19:30 mnt
    drwxrwxr-x 2 hack hack 4096 8月 24 19:30 proc
    drwxrwxr-x 2 hack hack 4096 1月 16 11:55 sbin
    \------------------------------------------
此时我们就可以在这个目录里对原始的文件进行任意的修改，或增加新的文件进去。不过需要注意的是DIR-816
A2路由器所使用的flash容量一共是4M,原始镜像已经几乎占满了所有的空间，因此很难在追加什么新大文件进去。
#### 5.3 重打包linux kernel image
重打包的方法其实就是把解开分析rootfs的方法反着做一遍即可，此处会在进行cpio归档时遇到一个小问题，cpio归档时无法修改归档文件的路径信息，也就是说我们无法将
**rootfs** 目录下的文件路径信息修改为 **/** 。
    # 进入rootfs目录
    cd rootfs
    # 归档rootfs下的所有文件
    find . |cpio -H newc -o > ../root_fs.cpio
    # 查看归档的结果,可以发现文件归档的路径是相对路径。
    cpio -tv -F ../root_fs.cpio|more
    ------------------output------------------    drwxr-xr-x  16 hack     hack            0 Jan 16 11:55 .
    drwxrwxr-x   2 hack     hack            0 Jan 16 11:55 sbin
    -rwxr-xr-x   1 hack     hack        29541 Aug 24 19:29 sbin/internet.sh
    -rwxr-xr-x   1 hack     hack         3073 Aug 24 19:29 sbin/config-powersave.sh
    lrwxrwxrwx   1 hack     hack           14 Jan 16 11:55 sbin/poweroff -> ../bin/busybox
    -rwxr-xr-x   1 hack     hack         7356 Aug 24 19:29 sbin/lan.sh
    -rwxr-xr-x   1 hack     hack         8981 Aug 24 19:29 sbin/virtual_server_dmz_s
    ------------------------------------------
此时有个小技巧，可以使用pax命令行工具进行重打包, 利用pax工具的-s参数将路径名进行替换操作。
    使用pax打包rootfs目录，并对文件路径使用-s参数替换，替换语法和sed命令的替换方法相同。
    pax -w -x sv4cpio -s '/rootfs//' rootfs > root_fs.cpio
    \# 查看归档的结果,可以发现文件归档的路径已被改写为/目录。
    cpio -tv -F root_fs.cpio|more
    ------------------output------------------    drwxrwxr-x 2 hack hack 0 Jan 16 11:55 /sbin
    -rwxr-xr-x 1 hack hack 29541 Aug 24 19:29 /sbin/internet.sh
    -rwxr-xr-x 1 hack hack 3073 Aug 24 19:29 /sbin/config-powersave.sh
    lrwxrwxrwx 1 hack hack 14 Jan 16 11:55 /sbin/poweroff -> ../bin/busybox
    -rwxr-xr-x 1 hack hack 7356 Aug 24 19:29 /sbin/lan.sh
    -rwxr-xr-x 1 hack hack 8981 Aug 24 19:29 /sbin/virtual_server_dmz_set2.sh
    -rwxr-xr-x 1 hack hack 5120 Aug 24 19:29 /sbin/lan_web_filter.sh
    -rwxr-xr-x 1 hack hack 1840 Aug 24 19:29 /sbin/portal_manage.sh
    -rwxr-xr-x 1 hack hack 1143 Aug 24 19:29 /sbin/automount.sh
    -rwxrwxr-x 1 hack hack 238 Aug 24 19:29 /sbin/pt_hotplug
    \------------------------------------------
在完成了上述准备工作后即可使用如下python脚本进行重打包。
    \# !/usr/bin/env python2
    \# coding=utf-8
    import sys
    import os
    original_image_file = open("kernel_image", 'rb')
    original_image_data = original_image_file.read()
    original_xz_root_fs_start_offset = 0x48b000
    original_root_fs_end_offset = 0x6d138c
    original_root_fs_size = original_root_fs_end_offset - original_xz_root_fs_start_offset
    working_folder = '/home/hack/IoT/D-Link_image'
    root_fs_folder_name = 'rootfs'
    xz_path = '/home/hack/IoT/tool/bin/xz'
    lzma_path = '/home/hack/IoT/tool/bin/lzma'
    \# archive rootfs with cpio
    cpio_archive_cmd = "cd %s ;pax -w -x sv4cpio -s '/%s//' %s > root_fs.cpio" % (working_folder, root_fs_folder_name, root_fs_folder_name)
    print("execute: %s" % cpio_archive_cmd)
    os.popen(cpio_archive_cmd)
    \# compress rootfs with xz
    xz_cmd = "cd %s ;%s --check=crc32 -z -c root_fs.cpio > root_fs.cpio.xz" % (working_folder, xz_path)
    print("execute: %s" % xz_cmd)
    os.popen(xz_cmd)
    \# repack_image
    new_image_name = 'kernel_image_hacked.img'
    new_image = open(new_image_name, 'wb')
    new_xz_root_fs_path = 'root_fs.cpio.xz'
    new_xz_root = open(new_xz_root_fs_path, 'rb')
    new_xz_root_data = new_xz_root.read()
    if len(new_xz_root_data) > original_root_fs_size:
    print("new image is too big, exit")
    sys.exit()
    new_image_data = original_image_data[:original_xz_root_fs_start_offset]
    new_image_data += new_xz_root_data + ('\x00' * (original_root_fs_size - len(new_xz_root_data)))
    new_image_data += original_image_data[original_root_fs_end_offset:]
    new_image.write(new_image_data)
    \# compress image with lzma
    lzma_cmd = "cd %s ;rm kernel_image_hacked.img.lzma; %s -z kernel_image_hacked.img" % (working_folder, lzma_path)
    print("execute: %s" % lzma_cmd)
    os.popen(lzma_cmd)
    \# make uimage
    mkimg_cmd = 'cd %s; mkimage -A MIPS -O Linux -T kernel -C lzma -n "Linux Kernel Image" -a 80000000 -e 8000C2F0 -d kernel_image_hacked.img.lzma kernel_image_hacked.uimg' % (working_folder)
    os.popen(mkimg_cmd)
至此一个重新打包过的linux kernel image就制作完成了，我们可以直接使用uboot中刷写Linux
Kernel的功能或是利用漏洞将文件上传到服务器后结合命令执行漏洞直接调用mtd_write命令进行linux kernel image的覆写操作。
作为实验，我改写了hw_nat.sh文件，添加了从远端下载shell脚本自动执行的功能。
这样在路由器启动时就会从tftp服务器中下载shell脚本并执行了。终于不用每次都手工上传gdbserver和busybox了@_@。
### 6\. 总结
这篇文章主要分享的是我研究D-Link DIR-816
A2路由器的过程以及遇到的一些坑，希望这篇文章能够帮助到那些对IoT安全研究感兴趣或是苦于无从下手的同学们。这款路由器的安全问题还是比较多的，针对发现的安全漏洞我们也已于今年1月提交给了D-Link厂商。
PS: 设备中还存在疑似后门的开启telnet服务的特殊代码 ^ ^。
* * *