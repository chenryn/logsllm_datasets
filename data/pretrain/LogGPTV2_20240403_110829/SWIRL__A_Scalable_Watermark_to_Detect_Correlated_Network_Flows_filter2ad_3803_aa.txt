title:SWIRL: A Scalable Watermark to Detect Correlated Network Flows
author:Amir Houmansadr and
Nikita Borisov
SWIRL: A Scalable Watermark to Detect Correlated Network Flows
Amir Houmansadr
Nikita Borisov
Department of Electrical and Computer Engineering
E-mail: {ahouman2,nikita}@illinois.edu
University of Illinois at Urbana-Champaign
Abstract
Flow watermarks are active trafﬁc analysis techniques
that help establish a causal connection between two net-
work ﬂows by content-independent manipulations, e.g., al-
tering packet timings. Watermarks provide a much more
scalable approach for ﬂow correlation than passive trafﬁc
analysis. Previous designs of scalable watermarks, how-
ever, were subject to multi-ﬂow attacks. They also intro-
duced delays too large to be used in most environments.
We design SWIRL, a Scalable Watermark that is Invisi-
ble and Resilient to packet Losses. SWIRL is the ﬁrst water-
mark that is practical to use for large-scale trafﬁc analysis.
SWIRL uses a ﬂow-dependent approach to resist multi-ﬂow
attacks, marking each ﬂow with a different pattern. SWIRL
is robust to packet losses and network jitter, yet it intro-
duces only small delays that are invisible to both benign
users and determined adversaries. We analyze the perfor-
mance of SWIRL both analytically and on the PlanetLab
testbed, demonstrating very low error rates. We consider
applications of SWIRL to stepping stone detection and link-
ing anonymous communication. We also propose a novel
application of watermarks to defend against congestion at-
tacks on Tor.
1
Introduction
Network intruders usually try to hide their real location
by relaying their trafﬁc through a number of intermediate
hosts, called stepping stones [25]. The trafﬁc is encrypted,
preventing simple identiﬁcation of stepping stones; instead,
trafﬁc analysis techniques are used to ﬁnd ﬂows that have
similar characteristics, based on features such as packet tim-
ings, counts, and sizes [3, 6, 17, 20, 23, 25]. Trafﬁc analysis
can also be used to attack anonymous communication sys-
tems by ﬁnding relationships between two ﬂows that would
otherwise be unlinkable [1, 4, 16].
Traditionally, trafﬁc analysis is performed as a passive
attack, by observing the candidate ﬂows and trying to
ﬁnd the ﬂow relations through different statistical analy-
sis [1,3,4,6,16,17,20,23,25]. More recently, network ﬂow
watermarks have been proposed as an active alternative to
perform trafﬁc analysis more efﬁciently. Watermarks are
more scalable, as they require asymptotically less commu-
nication and computation; they also can operate on shorter
ﬂows and provide lower error rates than passive analysis.
Previous watermark designs can be divided into two
categories: packet-based watermarks that operate on in-
dividual delays between packets [21], and interval-based
watermarks that perform an operation on an entire inter-
val [15, 19, 24]. The former category is not robust to packet
losses, reorderings, and insertions; the latter are subject to a
multi-ﬂow attack [10] that can recover and remove the wa-
termark. In addition, these watermarks introduce large de-
lays, making them not suitable for practical applications.1
We introduce SWIRL, a Scalable Watermark that is
Invisible and Resilient to packet Losses. SWIRL is an
interval-based watermark, but it uses a novel approach to
resist multi-ﬂow attacks. The watermark pattern is chosen
based on the characteristics of the ﬂow being marked; as a
result, each ﬂow is marked with a different pattern. SWIRL
watermarks introduce small delays to the network ﬂows,
and thus are practical to deploy in real-world scenarios. The
small amount of distortion also makes SWIRL invisible to
state-of-the-art information-theoretic tools for covert chan-
nel detection [8].
We perform a mathematical analysis of the error rates
of SWIRL, showing that it can achieve very low false er-
ror rates on short ﬂows. We validate our analysis against
simulations and an implementation running on the Planet-
Lab testbed [2]. We show experimentally that SWIRL is
resistant to the multi-ﬂow attacks.
SWIRL provides the ﬁrst practical approach to large
scale trafﬁc analysis; it therefore extends the reach of trafﬁc
analysis attacks in both anonymous systems and network
attack attribution. We also consider a novel application
1RAINBOW [9] is a packet-based watermark that is robust to packet
losses; however, it is designed to supplement, rather than replace, passive
trafﬁc analysis and thus does not scale to large scenarios.
of watermarks to defend against a congestion attack in the
Tor anonymizing network [5]. We show that a watermark,
normally a privacy-invasive tool used to link anonymous
ﬂows, can actually help protect users’ privacy by prevent-
ing attackers from creating routing loops. The properties of
SWIRL provide a practical defense where previous trafﬁc
analysis approaches would not be appropriate.
The rest of this paper is organized as follows. We review
some background on network ﬂow watermarking in Sec-
tion 2. In Section 3 we describe the design of the SWIRL
watermarking scheme. We analyze SWIRL by modeling the
network ﬂow behavior in Section 4 to provide false errors
analysis of the scheme. We evaluate SWIRL with simula-
tions as well as implementation in Section 5. We discuss
watermark invisibility and resilience to multi-ﬂow attacks
in Section 6. In Section 7 we provide a novel application of
SWIRL to Tor congestion attacks . Finally, we conclude in
Section 8.
2 Background
We ﬁrst review the watermarking setting. Watermarks
provide a content-independent way to tag trafﬁc so that cor-
related ﬂows can later be recognized. Figure 1 shows the
general model of a network ﬂow watermarking scheme. A
network ﬂow passing through a watermarker gets water-
marked by changing the timing information of packets, i.e.,
applying speciﬁc delays on the packets. The ﬂow then trav-
els along a noisy channel, which may include various net-
works, stepping stones, and anonymizing systems. This
channel introduces further delays, and might also drop, re-
order, or duplicate packets or repacketize the ﬂow. Af-
ter the channel, the ﬂow arrives at the watermark detec-
tor, which inspects it for the inserted watermark pattern.
The pattern encoding is based upon a secret watermark key,
In a blind
shared between the watermarker and detector.
scheme, this is the only information the watermarker and
detector exchange; in a non-blind scheme, the watermarker
also sends information about the watermarked ﬂow to the
detector through an out-of-band channel.
Watermarking has several advantages over passive trafﬁc
analysis schemes. First, watermarks can be used to achieve
lower error rates with shorter ﬂows than passive schemes.
Second, when multiple observation points are needed to de-
tect relayed ﬂows, passive trafﬁc analysis schemes require
continuous communication between these points to transmit
ﬂow statistics (O(n) in the number of ﬂows). Further, the
detector must match each candidate ﬂow against all of the
candidates that must be correlated, requiring O(n2) com-
putation. A blind watermark, however, requires no commu-
nication other than the shared key (i.e., O(1)) and can de-
tect watermarks using O(n) computation, since each ﬂow is
processed individually. This makes blind watermarks useful
for large-scale trafﬁc analysis.
2.1 Applications
Two particular applications of watermarks are stepping
stone detection and linking of anonymized ﬂows.
In the
former case, a watermark is inserted by border routers of an
organization onto incoming ﬂows, and checked for in out-
going ﬂows (see Figure 2). The low false-positive rate pro-
vided by watermarks is paramount for large installations,
since the volume of ﬂows can make even a 10−3 false pos-
itive rate difﬁcult to deal with. Scalability features are also
important to large installations, especially ones with mul-
tiple border routers, since watermarks obviate the need for
separate high-bandwidth channels between them.
With anonymous communication, the approach is sim-
ilar: a malicious website or router can insert a watermark
on a ﬂow entering the network, and a cooperating router or
observer can search for the watermark in outgoing ﬂows,
in an attempt to link the two. Modern anonymizing net-
works, such as Tor [5], require a large number of compro-
mised routers in order to effectively attack anonymity, since
for a fraction of f compromised routers, only about f 2 tun-
nels can be linked. Thus, an adversary would need to insert
several high-bandwidth nodes or make use of a botnet [12];
in both cases, a scalable approach is needed. Furthermore,
low error rates can make the results of such trafﬁc analy-
sis more useful; for example, a false-positive rate of 10−6
should erase any reasonable doubt that the identiﬁcation of
a user was a mistake, should it be used in a legal proceeding.
2.2 Previous work
Although there have been numerous previous proposals
for watermark designs, an important feature gap remains.
Many past watermark designs used large delays to achieve
robustness to network noise. Such large delays present a
barrier to practical deployment in stepping stone detection,
as watermarks are applied to all ﬂows, including benign
ones, thus signiﬁcantly impacting usability. The delays also
make it easy to detect the presence of the watermark even
without the shared key; thus, anonymizing networks can
refuse to forward watermarked trafﬁc as a countermeasure
to the attack.
Many recent watermark designs used an interval-based
design [15,19,24], which made them susceptible to a multi-
ﬂow attack [10]. By aggregating several ﬂows, the interval-
based transformations, applied at the same position, become
easy to spot, and an attacker can even remove the watermark
at a low cost. Other approaches that use packet-based ap-
proach have other problems. Wang et al.’s IPD-based water-
marks [21] require tight synchronization between the water-
marker and detector that can be destroyed by packet losses,
Figure 1. General model of network ﬂow watermarking.
Figure 2. Stepping stone detection using ﬂow watermarking.
reordering, etc. This watermark has also been shown to be
susceptible to detection and removal [13]. RAINBOW [9]
is a packet-based watermark that is robust to lost or re-
ordered packets; however, RAINBOW takes a non-blind
detection approach to achieve high detection accuracy over
short ﬂows while using very small delays. Our goal is to
build a blind and therefore scalable watermark, at the cost
of potentially requiring longer watermarked ﬂows. Table 1
summarizes the properties of previous work.
3 SWIRL watermarking scheme
SWIRL is an interval-based watermark; therefore, it con-
siders the ﬂow as a collection of intervals of length T , with
an initial offset o; i.e., the ith interval includes packets dur-
ing time period [o + iT, o + (i + 1)T ). We ﬁrst describe
our approach to ﬂow-dependent marking and then describe
the overall SWIRL scheme.
3.1 Flow-dependent marking
To perform ﬂow-dependent marking, we select two in-
tervals: a base and a mark interval. The positions of these
intervals will be ﬁxed for all ﬂows, but is otherwise arbi-
trary, with the restriction that the base interval must come
earlier. During watermarking, we will use the base interval
to decide which pattern to insert on the mark interval; the
detector will correspondingly look for the pattern it com-
putes using its version of the base interval.
The property of the base interval that we use is the in-
terval centroid, which is the average distance of the packets
from the start of the interval. I.e., if the interval i contains
packets arriving at times t1, . . . , tn, the centroid is:
n(cid:88)
j=1
C =
1
n
(tj − (o + iT ))
(1)
To decide on the pattern to be used on the mark interval,
we quantize the centroid to a symbol s in the range [0, m)
for some m ∈ Z+. Since the range of the centroid is [0, T ),
a simple approach would be to set s = (cid:98)mC/T(cid:99). How-
ever, this would result in a non-uniform distribution for s,
since a centroid is more likely to be in the center than at the
interval. The actual distribution of centroids is heavily de-
pendent on the rate of the ﬂow as well as the distribution of
packet delays. In order to approximate a uniform distribu-
tion for s, we take the approach of using ﬁner partitioning.
Namely, we set:
s = (cid:98)qmC/T(cid:99) mod m
(2)
WatermarkerDetectorNoisyNetworkDecisionFlowInformation(onlynon-blindwatermarking)NetworkFlowWatermarkKeyWatermarkerSteppingStoneDetectorNetworkWWWWWScheme
Table 1. Watermark Scheme Comparison
Invisible? Robust to losses? Resilient to MFA?
IPD-based watermark [21]
Interval-based watermarks [15, 19, 24]
RAINBOW [9]
SWIRL
no
no
yes
yes
no
yes
yes
yes
yes
no
yes
yes
Scalable?
yes
yes
no
yes
for q > 1. The quantization multiplier q helps smooth out
the distribution; it is easy to see that as q → ∞, s tends to
a uniform distribution. We will discuss the choice of q in
more detail in Section 5.1.
The value s is then used to transform the mark inter-
val. We ﬁrst subdivide the mark interval into r subinter-
vals of length T /r each. The subintervals are then fur-
ther subdivided into m slots each, with the slots numbered
0, . . . , m − 1, see Figure 3. We select a slot in each subin-
terval i by applying a permutation pi(i) to s; each packet is
then delayed such that it falls within a selected slot, possibly
moving into the next subinterval. (Any packets at the end of
the interval past the last selected slot are not delayed.) This
produces a distinct pattern in the mark interval; see Figure 4
for an illustration. Note that we must use distinct permuta-
tion for each subinterval; otherwise we risk creating a peri-
odic pattern that can easily be observed. The permutations
π(0), . . . , π(r−1) are part of the secret watermark key.
3.2 Detection
To detect the watermark presence, the detector analyzes
packets in the base interval to compute the centroid ˆC. It
then derives ˆs from ˆC using (2). It then counts the fraction
of packets in the mark interval that are in the correct slot
(π(i)(ˆs)). If this ratio, ρ, is greater than a packet threshold
τ, then the watermark is considered to be detected success-
fully.
Note that the centroid of the interval may have shifted
due to network noise. We therefore consider an alternate
quantization of it, ˆs(cid:48), to be the next nearest quantization to
ˆC:
(cid:40)(cid:100)mq ˆC/T(cid:101) mod m
(cid:48)
ˆs
=
Table 2. Watermark Parameters
r
m
τ
η
n
T
q
o
bj
mj
j ∈ Sm
π(i)
System parameters
Number of subintervals
Number of slots per subinterval
Packet detection threshold
Mark detection threshold
Number of base and mark intervals
Interval length
Quantization multiplier
Secret Parameters
Initial offset
Location of base intervals,
j = 0, . . . , n − 1
Location of mark intervals,
j = 0, . . . , n − 1
Permutations for each mark subinter-
val, j = 0, . . . , n − 1, i = 0, . . . , r
intervals where the watermark was detected; then the en-
tire watermark is considered to be detected if d > η for
some threshold η. The full list of parameters for SWIRL is
summarized in Table 2. These parameters must be shared
between the watermarker and detector. The system param-
eters are chosen to achieve a particular performance based
on the properties of the original ﬂows and the noisy chan-
nel. The secret parameters are chosen randomly and can be
thought of as a secret key shared between the watermarker
and the detector. In Section 6.1 we analyze the security of
the SWIRL watermark by deriving the entropy of its water-
mark key.
(cid:98)mq ˆC/T(cid:99) − 1 mod m otherwise
if {mq ˆC/T} ≥ 0.5
4 System analysis
(3)
where {x} = x − (cid:98)x(cid:99) denotes the fractional part of x. We
then repeat the detection using ˆs(cid:48) to compute ρ(cid:48). If ρ(cid:48) > τ,
the watermark is also considered to be detected.
3.3 SWIRL design
A single watermark instance is likely to produce too high
a rate of false errors. To improve detection, SWIRL uses
n base and mark interval pairs. Let d be the number of
4.1 False-positive errors
The false-positive error rate is the probability of detect-
ing a non-watermarked ﬂow as watermarked. To calculate
this, ﬁrst consider the probability that a single packet in
some mark interval is in the “correct” slot. If we assume
a Poisson distribution for the ﬂows, it is easy to see that:
F Pp =
1
m
(4)
Figure 3. Slot numbering (m = 3, r = 4)
(a) Original ﬂow
(b) Watermarked ﬂow
Figure 4. Delaying packets to insert a watermark (m = 3, r = 4).
Of course, actual ﬂows might have different distributions;
however, unless the trafﬁc patterns in a ﬂow are correlated
with the distances between slots (randomized by π(i)
j ), this
will remain a good approximation.
Given a mark interval with P packets, the number of
packets in “correct” slots will follow a Binomial distribution
of P trials with probability of success P Fp, B(P, F Pp).
The cumulative distribution function of a Binomial distri-
bution with v trials and success probability h, B(v, h) is
given by the regularized incomplete beta function I(·) as:
(5)
P (X ≤ k) = I1−h(v − k, k + 1)
It follows that the odds of getting at least τ fraction of pack-
Interval (T)Subinterval (T/r)Slot(T/mr)Slot #012012012012π(1)(s)=0π(0)(s)=1π(2)(s)=1π(3)(s)=0synchronization described in Section 5.4, we can ensure that
the distribution has mean 0. We thus model delay as i.i.d.
Gaussian: δj ∼ N (0, σ2). Then:
F Ns ≤ P
| ˆC − C| >
T
ˆC − C ∼ N (0, σ2/Q)