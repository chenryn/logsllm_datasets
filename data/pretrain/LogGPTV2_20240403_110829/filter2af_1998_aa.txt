# IoT固件分析入门
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
把前段时间GitHub 上 star
了的一个项目学一遍，地址：[IoT_Sec_Tutorial](https://github.com/G4rb3n/IoT_Sec_Tutorial/)  
访问慢的话，gitee上也有镜像可看
_Update：感觉算是一个很不错的IoT固件分析入门教程，今天收到《路由器0day》后在路上粗略地看了下目录，除了没有涉及到硬件外，这个教程差不多把固件分析的起始工作都涉及到了（至于是不是
a bit out of date 就另当别论，不过总的来说也还好⑧）_
## 0x0准备
因为kali是刚上大学的时候装的，现在都出到2021了，我的版本还是2019，所以先升级一波
    echo "deb http://http.kali.org/kali kali-rolling main non-free contrib" | sudo tee /etc/apt/sources.list
    sudo apt update && sudo apt -y full-upgrade
    [ -f /var/run/reboot-required ] && sudo reboot -f
  * 更新完后可以查看一下系统版本：
    grep VERSION /etc/os-release
  * 更新系统时间（我的时间好像之前一直都不对orz）
    apt-get install -y ntpdate
    rm -rf etc/localtime
    cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
    ntpdate -u ntp.api.bz
  * 切换shell（为啥升级后zsh没有直接变成默认orzz）  
先查看系统中有几种shell：
    cat /etc/shells
kali自带了zsh，直接切换就行了：
    cp -i /etc/skel/.zshrc ~/
    chsh -s /bin/zsh
zsh配合oh-my-zsh比较好用，安装：
    wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh
添加全路径显示：
    gedit ~/.oh-my-zsh/themes/robbyrussell.zsh-theme
    #然后把%{$fg[cyan]%}%c%{$reset_color%}的%c改为[$PWD]
如果想用别的桌面系统：
    update-alternatives --config x-session-manager
## 0x1提取固件
    之前用过binwalk，但大多都是在misc题目里处理压缩文件、图片啥的，没有仔细看过binwalk的命令
    其实除了binwalk之外，还有其他的固件分析/提取工具，在GitHub上用“firmware analysis”之类的关键词能查到
给了个华硕RT-N300路由器的固件，binwalk直接提取即可。
提取出来发现没有进行加密（…16年，这也太不安全了吧orz，不过现在基本都有了
可以看到这个路由器用的是squashfs文件系统
其中squashfs-root可用于分析了
    文件系统是操作系统的重要组成部分，是操作运行的基础。不同的路由器使用的文件系统格式不尽相同。根文件系统会被打包成当前路由器所使用的文件系统格式，然后组装到固件中。路由器希望文件系统越小越好，所以这些文件系统中各种压缩格式随处可见。
    Squashfs是一个只读格式的文件系统，具有超高压缩率，其压缩率最高可达34%。当系统启动后，会将文件系统保存在一个压缩过的文件系统文件中，这个文件可以使用换回的形式挂载并对其中的文件进行访问，当进程需要某些文件时，仅将对应部分的压缩文件解压缩。
    Squashfs文件系统常用的压缩格式有GZIP、LZMA、LZO、XZ（LZMA2）。路由器的根文件系统通常会按照Squashfs文件系统常用压缩格式中的一种进行打包，形成一个完整的Squashfs文件系统，然后与路由器操作系统的内核一起形成更新固件。
    由于squashFS可以在不需要解压的情况下直接挂载，因此有许多应用场景，例如：
    1、安装Linux时用的live cd
    2、小型嵌入式设备中的rootfs。rootfs一般以压缩好的形式存放在ROM中，如果开机时把整个rootfs都解压到内存里再读取，对于ROM和RAM容量一般都很小的小型嵌入式设备来说性价比太低。
###  Binwalk命令选项
常规选项：
提取选项：
Diff：
文件签名：
熵值：
Raw Compression：
###  如何手动提取固件
squashfs文件系统头部特征较多，有sqsh、hsqs、qshs、shsq、hsqt、tqsh、sqlz。我们用hexdump搜索特征在文件中的地址
  * hexdump：一个二进制文件的查看工具，可转为OCT、DEC、HEX进制查看
得到如下搜索结果
hsqs位于文件的0xe20c0，用dd命令截取出固件：
  * 注：dd命令中skip指定的值只能为十进制。用shell转换进制可以使用：$((BASE#NUM))
  * 
得到了一个squashfs格式的文件
用unsquashfs解压得到squashfs-root，即用binwalk提取出的同名文件。
如果遇到binwalk之类的工具无法提取的情况，大多都是经过混淆，需要进一步处理
###  Binwalk如何进行提取：
通过maigc特征集与文件进行比对，但识别效率比file命令高多了  
特征集：
识别过程主要使用libmagic库的4个函数：
    magic_t magic_open(int flags);//创建并返回一个magic cookie指针。
    void magic_close(magic_t cookie);//关闭magic签名数据库并释放所有使用过的资源。
    const char *magic_buffer(magic_t cookie,const void *buffer,size_t len);//读取buffer中指定长度的数据并与magic签名数据库进行对比，返回对比结果描述。
    Int magic_load(magic_t cookie,const char *filename);//从filename指定文件加载magic签名数据库，Binwalk把多个magic签名文件组合到一个临时文件中用于加载
## 0x2 静态分析
给了个从Dlink固件里提取的样本，打开发现被加密了，得爆破。
kali自带了一些关于压缩文件的工具，比如生成字典用的crunch、rsmangler，爆破用的frackzip等，这些工具用法都不难
  * crunch:[Kali使用crunch生成密码字典 – 青檬小栈 ](https://bystart.cn/index.php/17/linux/07)
直接用frackzip破解，（根据教程的提示）得到密码beUT9Z
解压得到以下文件
  * .mbn：高通的一套用于加载网络环境的文件（modem software configuration）
  * .yaffs2：针对NAND芯片设计的嵌入式文件系统，可用unyaffs提取
unyaffs提取yaffs2
核心应该是2K-mdm-image-mdm9625.yaffs2，不确定的话可以把三个.yaffs2都提取了（然后就该复习一下嵌入式系统的目录结构了）
接下来查看配置文件，有可能从配置文件中发现敏感信息
> 其中的inadyn-mt.conf文件引起了我们注意，这是no-ip应用的配置文件，no-ip就是一个相当于花生壳的东西，可以申请动态域名
cat 一看，果然no-ip的用户名和密码都出现了（这么明显真的难以置信）
接下来使用firmwalker来自动化遍历
> Firmwalker:
>
> A simple bash script for searching the extracted or mounted firmware file
> system.
>
> It will search through the extracted or mounted firmware file system for
> things of interest such as:
>
>   * etc/shadow and etc/passwd
>   * list out the etc/ssl directory
>   * search for SSL related files such as .pem, .crt, etc.
>   * search for configuration files
>   * look for script files
>   * search for other .bin files
>   * look for keywords such as admin, password, remote, etc.
>   * search for common web servers used on IoT devices
>   * search for common binaries such as ssh, tftp, dropbear, etc.
>   * search for URLs, email addresses and IP addresses
>   * Experimental support for making calls to the Shodan API using the Shodan
> CLI
>
>
> （其实就相当于一个遍历查找后缀、内容的批处理脚本）
使用脚本获得所有可能可以利用的文件（建议进入脚本目录执行）
除了配置文件外，分析存在风险的二进制程序也很重要。
在etc/init.d目录下存放启动时运行的程序和脚本，其中有一个叫start_appmgr，mgr一般指固件的主控。查看脚本：
把appmgr拖到ida
凭借一点点pwn的经验，我们发现了一个backdoor
这个漏洞被收录到CVE-2016-10178：[Multiple vulnerabilities found in the Dlink DWR-932B
(backdoor, backdoor accounts, weak WPS, RCE …) – IT Security Research by
Pierre
(pierrekim.github.io)](https://pierrekim.github.io/blog/2016-09-28-dlink-dwr-932b-lte-routers-vulnerabilities.html)
即向192.168.1.1:39889发送HELODBG可以直接getshell（不太清楚为啥是39889端口，静态看了好久没看出来，
~~猜测是跟下图和label_66有关~~ ）
update:用Ghidra搜到了
这个漏洞确实明显2333
这个固件还有好几个漏洞，太拉了吧Orz…
## 0x3 动态分析
###  QEMU和Firmadyne
QEMU这个模拟器想必都不陌生，一个近乎能够模拟所有硬件设备的软件；倒是第一次听说Firmadyne这个工具，查了一下是一个基于QEMU的分析平台，包含模拟、固件提取、调试等功能，但似乎支持的硬件设备较少？orz
###  部署Firmadyne
    Tutorial里用的是attifyti提供的Ubuntu 14（因为作者说部署这玩意太麻烦了），但Firmadyne的作者在项目的某个issue里说了句“Ubuntu 14 也太早了”之类的话，于是打算自己部署一下
    Also，如果想用直接用attifyti的AttifyOS，https://github.com/adi0x90/attifyos，目前的系统基于Ubuntu18.04，官方的下载地址在谷歌网盘
**准备**
因为涉及到GitHub上一些项目的下载，网络不太好的话可能需要一些帮助：
    clash on kali:
    下载clash并运行：https://github.com/Dreamacro/clash/releases
    导入节点：wget -O ~/.config/clash/config.yaml  clash_url
    配置代理：
    gsettings set org.gnome.system.proxy mode 'manual'
    gsettings set org.gnome.system.proxy.http port 7890
    gsettings set org.gnome.system.proxy.http host '127.0.0.1'
    gsettings set org.gnome.system.proxy.socks port 7891
    gsettings set org.gnome.system.proxy.socks host '127.0.0.1'
    gsettings set org.gnome.system.proxy ignore-hosts "['localhost', '127.0.0.0/8', '::1']"\
    进行配置，访问：
    http://clash.razord.top/
** 注：以下绕了好多弯，最后也没成功，用了AttifyOS 😅😅😅😅😅
**【方案1】安装Firmadyne**
    apt-get install qemu-system-arm qemu-system-mips qemu-system-x86 qemu-utils
    apt-get install busybox-static fakeroot git dmsetup kpartx netcat-openbsd nmap python-psycopg2 python3-psycopg2 snmp uml-utilities util-linux vlan
    git clone --recursive https://github.com/firmadyne/firmadyne.git
    cd ./firmadyne
    ./download.sh
配置Postgresql：
    # 安装数据库
    sudo apt-get install postgresql
    # 创建用户,注意要设置密码为 firmadyne
    sudo -u postgres createuser -P firmadyne
    # 创建数据库
    sudo -u postgres createdb -O firmadyne firmware
    # 初始化数据库
    sudo -u postgres psql -d firmware  could not connect to database template1: could not connect to server: No
> such file or directory.
>
> Is the server running locally and accepting
>
> connections on Unix domain socket “var/run/postgresql/.s.PGSQL.5432”?
有可能是没有初始化数据库（至少我是因为这个），用如下方法解决：
    # 设置postgres用户的密码
    passwd postgres
    # 创建postgresql的文件夹
    sudo mkdir /data