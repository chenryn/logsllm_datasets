1 (cid:88) H Nmap
-
- (cid:88) (cid:140) Online SEO Tools
12 (cid:88) H OpenVAS
H OWASP ZAP
-
13 (cid:88) (cid:140) Pentest-Tools
-
(cid:140) Port Checker
-
(cid:140) Redirect Check
-
(cid:140) Redirect Detective
12 (cid:88) (cid:140) ReqBin
(cid:140) Resplace
-
-
(cid:140) RexSwain.com
(cid:140) Search Engine Reports
-
(cid:140) Nmap Online
T
2
11
-
-
-
2
13
13
2
11
12
11
2
14
12
12
3
4
2
10
11
2
13
12
13
1
Name
(cid:140) SeoBook
(cid:140) SERP-Eye
(cid:140) Server Headers
(cid:140) Site 24x7
V M
1 (cid:88) (cid:140) Security Headers
1 (cid:88) (cid:140) SEO Review Tools
-
-
-
-
13 (cid:88) (cid:140) SQLMap Scanner
13 (cid:88) (cid:140) SSL Certiﬁcate Tools
1 (cid:88) (cid:140) StepForth
3 (cid:88) (cid:140) StraightNorth
-
(cid:140) SubnetOnline
-
(cid:140) Sucuri Site Check
2 (cid:88) (cid:140) SureOak
-
(cid:140) TheSEOTools
1 (cid:88) (cid:140) Tutorialspots
12 (cid:88) (cid:140) Url X-Ray
-
(cid:140) Urlcheckr
-
(cid:140) Urlex
1 (cid:88) (cid:140) w-e-b.site
-
(cid:140) W3dt.Net
10 (cid:88) (cid:140) Web Port Scanner
- (cid:88) (cid:140) Web Sniffer
-
(cid:140) WebConfs
-
H WebMap
1 (cid:88) (cid:140) What Is My IP
1 (cid:88) H WMap
T
13
-
12
-
13
13
1
12
12
-
14
3
9
1
13
1
10
-
13
12
-
14
13
14
12
12
V M
-
-
11 (cid:88)
-
12 (cid:88)
13 (cid:88)
1 (cid:88)
-
11 (cid:88)
-
13 (cid:88)
-
8 (cid:88)
1 (cid:88)
13 (cid:88)
-
-
-
13 (cid:88)
11 (cid:88)
-
-
12 (cid:88)
1 (cid:88)
-
10 (cid:88)
Also the Location ﬁeld is weakly correlated with the other
ﬁelds. This is due to the behavior of redirect checkers. As
a matter of fact, this category of scanning systems focus on
Location, and, in most cases, ignore the other ﬁelds. An in-
depth evaluation of the behavior of redirect checkers is given
in the application scenario of Section 6.3.
An argument similar to the previous one for Location also
applies to Status Message. The Status Message is typically
used by scanning systems that carry out availability checks,
e.g., to verify that a web site is up and running.
Finally, for what concerns all the other ﬁelds, we observe
an extremely strong correlation. The conﬁrms the proposition
of [20] about the security relevance of the headers that we are
considering. Indeed, most of the scanning systems included in
our experiments report them all. This also highlights that the
exposure of the scanning systems is not ﬁeld-dependent, e.g.,
when a scanning system is vulnerable via one these ﬁelds,
most likely it is also vulnerable via the others.
6 Application Scenarios
In this section, we present three application scenarios for
our methodology. For each scenario, we highlight the sub-
class of vulnerable scanning systems, the vulnerability and
Figure 8: Correlation between vulnerable ﬁelds.
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    23
can be obtained with a single XSS payload. A hooked browser
becomes the client in a command and control (C2) infrastruc-
ture, thus actively querying the C2 server for instructions. This
allows the attacker to submit arbitrary commands afterward
even when no other scans occur.
An effective way to achieve browser hooking is
In particular, the BeEF C2 client
through BeEF [2].
injected via the script hook.js. For instance, we
is
can deploy hook.js by setting the Server header to
where [C2] is the IP address of the C2 server.
Fingerprinting The BeEF framework includes modules6
for ﬁngerprinting the victim host. For instance, the browser
module allows us to get the browser name, version, visited do-
mains, and even starting a video streaming from the webcam.
Similarly, the host module allows us to retrieve data such
as physical location and operating system details. Some of
these operations, e.g., browser ﬁngerprinting, require no vic-
tim interaction. Instead, others need the victim to take some
actions, e.g., explicitly grant permission to use the webcam.
To overcome these hurdles, attackers usually employ auxil-
iary techniques, e.g., credential theft, implemented by some
BeEF modules, e.g., social engineering. Finally, the overall
ﬁngerprinting process can be automated through the BeEF
autorun rule engine [1].
6.2 Scanning host takeover
On-premise scanning systems, which run on the analyst’s host,
may have privileged, unrestricted access to the underlying
platform. In some cases, on-premise systems are provided
with a user interface that includes both the reporting system
and a control panel. When such a user interface is browser-
based, a malicious scan target can inject commands in the
reporting system and perform lateral movements by triggering
the scanning system controls.
The attack strategy abstractly described above must be
implemented through concrete steps that are speciﬁc to the
scanning system. In this section, we show an implementa-
tion of this attack strategy for the popular scanning system
Metasploit Pro. In particular, we show how to perform lat-
eral movements leading to a complete scanning host takeover
through remote code execution (RCE). Finally, we carry out
an impact evaluation.
CVE-2020-7354 and CVE-2020-7355 Metasploit Pro is a
full-ﬂedged penetration testing framework. It has a browser-
based UI that integrates both a scan reporting system and
many controls for running the most common tasks, including
host scanning. Each command is executed by the Metasploit
back-end, which is stimulated through a REST API.
Figure 9: XSS PoC on Nmap Online.
its impact if an attacker were to use it in the wild. For each
subclass of scanning systems, we chose a representative that
we present as a concrete case study: Nmap Online for as-a-
service scanning systems, Metasploit Pro for on-premise ones,
and CheckShortURL [5] for redirect checkers.
6.1 Scan Attribution
Attack attribution is a hot topic since it is often difﬁcult or
even impossible to achieve. The main reasons are the struc-
ture of the network and some state-of-the-art technologies
that enable clients anonymity. For instance, analysts can use
proxies, virtual private networks, and onion routing to hide
the actual source of the requests from the recipient. How-
ever, an injected browser may be forced to send identifying
data directly inside the HTTP requests, so making network-
level anonymization techniques ineffective. In this section, we
show how to attribute scans using our attacker model through
an application scenario based on Nmap Online [15].
Nmap Online vulnerability Nmap Online is a web appli-
cation providing some of the functionalities of Nmap. Users
can scan a target with Nmap without having to install it on
their machine. Furthermore, since requests originate from the
Nmap Online server, users can stay anonymous w.r.t. the scan
target. When users start a scan, they select the target IP and
the scan type. The Nmap Online website scans its target and
displays the retrieved information to the user, e.g., server type
and version.
Nmap Online reports suffered from an XSS vulnerability.5
Figure 9 shows an injected report. The injection occurs on the
Server response header. In this case, the Server ﬁeld was set
to .
Browser hooking Since there is no guarantee that more
than one scan will occur, we recur to browser hooking, which
5The vulnerability was ﬁxed on March 24, 2020.
6https://github.com/beefproject/beef/wiki/BeEF-modules
24    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association
the most impactful is to establish a reverse shell. The reasons
are twofold. First, opening a shell on the scanning host allows
the attacker to execute commands directly on the operating
system of the victim. Thus, attacks are no longer tunneled
through the initial vulnerability, which might become unavail-
able, e.g., if Metasploit Pro is terminated. Second, a reverse
shell works well even when certain network facilities, such as
ﬁrewalls and NATs, are in place. Indeed, although these facil-
ities may prevent incoming connections, usually they allow
outgoing ones. Once a reverse shell is established, the attacker
can access a permanent, privileged shell on the victim host.
6.3 Enhanced phishing
The goal of a phishing attack is to induce the victim to commit
a dangerous action, e.g., clicking an untrusted URL or opening
an attachment. In this section, we show how our attacker
model changes phishing attacks, using CheckShortURL as an
application scenario.
Traditional Phishing A common phishing scenario is that
of an unsolicited email with a link pointing to a malicious
web page, e.g., http://ev.il. The phishing site mimics a
reputable, trusted web page. For instance, the attacker may
clone a bank’s web site so that unaware users submit their
access credentials. Another technique is to provoke a reaction
to an emotion, such as fear. This happens, for instance, with
menacing alerts about imminent account locking and malware
infections. Again, if victims believe that urgent action must
be taken, they could overlook common precautions and, e.g.,
download dangerous ﬁles.
Defense mechanisms Most of the examples given above
require the victim to open a phishing URL. Common, un-
skilled users typically evaluate the trustworthiness of a URL
by applying their common sense.10 Nevertheless, techniques
such as URL shortening and open redirects [27] masquerade
the phishing URL to resemble a trusted domain.
Some online services may help the user to detect phishing
attacks. For instance, reputation systems and black/white lists,
e.g., Web of Trust11, can be queried for a suspect URL. How-
ever, phishing URLs often point to temporary websites that
are unknown to these systems.
Since browsers automatically redirect without asking for
conﬁrmation, in [27] the authors highlight that victims can
defend themselves by checking where the URL redirects with-
out browsing it. To this aim, several online services, e.g.,
CheckShortURL, do redirect checking to establish the ﬁnal
destination of a redirect chain. Typically, the chain is printed
in a report that the user inspects before deciding whether to
proceed or not.
10E.g., see https://phishingquiz.withgoogle.com/
11https://www.mywot.com
Figure 10: Stored XSS PoC on Metasploit Pro.
The vulnerability we found affects versions 4.17.0 and
below. It was remediated on May 14, 2020, with patch 4.17.1.7
A malicious scan target can inject a Stored XSS payload in
the UI. Multiple pages are vulnerable, e.g., /hosts/:id and
/workspaces/:id/services.
Metasploit Pro fetches the Server header and displays
it inside the INFO column with no sanitization. Fig-
ure 10 shows the effect of setting the Server header to
 (as described in
Section 4.3).
Remote code execution We use the XSS vulnerability de-
scribed above to gain a foothold in the browser on the scan-
ning host. For instance, we can inject a BeEF hook to remotely
interact with the browser (as in Section 6.1). The hooked
browser is the steppingstone to interact with the Metasploit
Pro UI and trigger its controls. Interestingly, Metasploit Pro
includes a diagnostic console, i.e., an embedded terminal that
allows the analyst to run arbitrary commands on the under-
lying operating system.8 Although the diagnostic console
is disabled by default, the attacker can activate it through
BeEF. In particular, the hooked browser is forced to perform a
POST HTTP request to /settings/update_profile with
the parameter allow_console_access=1. Since the diag-
nostic console is a browser-embedded Metasploit terminal
emulator, the attacker can submit commands from the BeEF
interface.
Takeover impact The Metasploit Pro documentation9
clearly states that “Metasploit Pro Users Run as Root. If
you log in to the Metasploit Pro Web UI, you can effectively
run any command on the host machine as root”. This opens
a wide range of opportunities for the attacker. Among them,
7https://help.rapid7.com/metasploit/release-notes/
archive/2020/05/#20200514
8https://www.exploit-db.com/exploits/40415
9https://metasploit.help.rapid7.com/docs/
metasploit-web-interface-overview
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    25
Djanali et al. [9] deﬁne a low-interaction honeypot that
simulates vulnerabilities to lure the attackers to open a ma-
licious website. When this happens, the malicious website
delivers a browser exploitation kit. The exploitation relies
on a LikeJacking [29] attack to obtain information about the
attacker’s social media proﬁle. Unlike our approach, their
proposal substantially relies on social engineering and does
not consider vulnerabilities in the attacker’s equipment.
Also, Sintov [28] relies on a honeypot to implement a re-
verse penetration process. In particular, his honeypot attempts
to collect data such as the IP address and the user agent of the
attacker. Again, this proposal amounts to retaliating against
the attackers after identifying them.