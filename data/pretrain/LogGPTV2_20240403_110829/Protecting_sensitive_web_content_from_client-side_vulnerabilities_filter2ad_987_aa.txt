# Protecting Sensitive Web Content from Client-side Vulnerabilities with CRYPTONs

**Authors:**
- Xinshu Dong, Department of Computer Science, National University of Singapore
- Zhaofeng Chen, Institute of Computer Science and Technology, Peking University
- Hossein Siadati, Department of Computer Science and Engineering, Polytechnic Institute of New York University
- Shruti Tople, Department of Computer Science, National University of Singapore
- Prateek Saxena, Department of Computer Science, National University of Singapore
- Zhenkai Liang, Department of Computer Science, National University of Singapore

**Abstract:**
Web browsers isolate web origins but lack direct abstractions to protect sensitive data within the same origin. This requires trusting all code in the browser and client-side applications to be free of vulnerabilities. In this paper, we introduce CRYPTON, a new abstraction that supports intra-origin control over sensitive data throughout its lifecycle. To enforce the security of CRYPTONs, we develop a standalone component called CRYPTON-KERNEL, which leverages existing web browser functionalities without relying on their large Trusted Computing Base (TCB). Our evaluation shows that CRYPTONs, supported by CRYPTON-KERNEL, are widely applicable to popular real-world applications, including webmail, chat, blog applications, and Alexa Top 50 websites, with minimal performance overhead.

**Categories and Subject Descriptors:**
- D.4.6 [Operating Systems]: Security and Protection
- K.6.5 [Management of Computing and Information Systems]: Security and Protection

**Keywords:**
- Web security, browser security, data protection

## 1. Introduction
Web browsers are designed to isolate content between different web origins, preventing one origin from accessing another's data. However, within a single origin, data often has varying levels of sensitivity. Examples of sensitive data include social security numbers, medical reports, financial emails, tax information, bank transactions, and user passwords. Web application owners often need to strongly isolate such sensitive data to protect it from vulnerabilities in the code that processes non-sensitive information.

Under the origin-based model, web applications processing sensitive data must trust the client-side browser's isolation mechanisms and the correctness of the client-side application code. This is problematic because both the client-side web application and the underlying browser consist of millions of lines of code and have historically been prone to security vulnerabilities. Given the scope of these vulnerabilities, protecting sensitive data within the browser environment is a significant practical concern.

### Problem
The core issue is that the web lacks abstractions for information owners to specify what data is sensitive and how it should be processed in the client-side browser environment. To address this, we propose new abstractions that give owners control over sensitive data throughout its lifecycle in the client-side browser, termed as intra-origin data control abstractions. We advocate that web browsers provide these controls as first-class abstractions, independent of strengthening the browser’s origin-based isolation.

Although there has been extensive prior work on browser design, principled mechanisms for intra-origin data control have not received much direct attention. Recent browser designs have improved privilege separation between code components, but these techniques do not directly allow web applications to enforce control over their data. A compromised component with access to sensitive data can still exfiltrate it through its export interfaces. Language-based enforcement mechanisms and piecemeal techniques (such as Software Fault Isolation, Just-In-Time hardening, and Content Security Policy) could be used for sensitive data protection, but we argue for more direct information control primitives on the present web.

### Our Solution
We design and implement a data abstraction and browser primitive called CRYPTON, which enables the protection of sensitive data throughout its lifetime in the browser. CRYPTONs are programmed directly in existing web languages (HTML/JavaScript) without requiring major re-engineering of existing application logic. A CRYPTON explicitly marks a unit of sensitive data in a web page, ensuring that sensitive data and information computed from it are tightly isolated at the lowest level (in raw program memory).

To support rich web applications that need to execute flexible operations on sensitive data, CRYPTONs tie sensitive data with functions that are allowed to compute over it. These select CRYPTON functions are trusted to be statically verified by web developers and are the only channels for releasing information about sensitive web content. Additionally, CRYPTONs provide capabilities for guaranteed rendering (with a proof-of-impression) and certified delivery of user inputs to CRYPTON functions in the browser.

Building trustworthy implementations of these abstractions is challenging due to the monolithic trust model of today’s web, where application servers must completely trust the client-side code in web browsers, add-ons, and applications. To address this, we rethink the monolithic trust model. In our design, the web server trusts a small piece of client-side code called CRYPTON-KERNEL, a small, trusted standalone engine that acts as a root-of-trust for the server on the client device. The CRYPTON-KERNEL runs in a separate OS process and sandboxes the untrusted browser, which invokes the CRYPTON-KERNEL on-demand to securely interpret CRYPTONs. A compromised browser can deny access to sensitive information (denial-of-service) by refusing to invoke the CRYPTON-KERNEL, but it cannot subvert the integrity and confidentiality of sensitive data.

Unlike prior research on origin-based isolation in browsers, we do not isolate code components or memory regions; instead, we isolate sensitive data within a web application’s origin using authenticated encryption. CRYPTONs use memory encryption, ensuring that data computed from sensitive data remains encrypted throughout its lifetime inside the untrusted browser’s memory. This ensures that any unintended malicious or compromised code, whether part of the browser or the application logic, can only access sensitive data in its encrypted form.

The CRYPTON-KERNEL enforces its security guarantees while reusing browser functionality. It does not rely on the browser’s same-origin policy enforcement, HTML parser, JavaScript/CSS engine, or network engine to ensure its security properties. The CRYPTON-KERNEL has a TCB about 30-40 times smaller than a full web browser, consisting of roughly 27K lines of code. Through manual analysis, we find that this design can prevent more than 92.5% of known security vulnerabilities from exfiltrating or tampering with sensitive information in a web browser like Firefox.

### Evaluation on Real-World Applications
First, we manually modify three popular web applications to selectively use CRYPTONs to protect sensitive web content, including a webmail, a web messenger, and a web forum. The results show that the CRYPTON-KERNEL strengthens their security against a broad range of client-side vulnerabilities with a small (around 3-5 days) adoption effort. Next, we conduct an extensive macro evaluation of the applicability of CRYPTONs on real-world websites, including Alexa Top 50 websites like Gmail, Facebook, Bank of America, and eBay. We treat all user inputs and other manually marked content in these applications as sensitive information. Our study shows the effectiveness of our solution in these real-world web applications. Although not a “turn-key” mechanism, our solution requires only moderate adoption effort in the order of a few days for each application. Web developers can “opt-in” by selectively converting part of their application logic to secure specific sensitive data or for specific users without breaking the rest of the application. Finally, we evaluate the performance of our prototype. Although our WebKit-based prototype implementation is still an unoptimized proof-of-concept, we do not perceive noticeable slowdown when running it over real-world applications. Further evaluation also shows that performance overhead from encryption/decryption operations is modest, less than 8% when 100% of the texts on five test pages from the Dromaeo web benchmarks are marked as sensitive.

### Contributions
In summary, we make the following contributions in this work:
- We propose a data-centric abstraction for end-to-end data protection in web browsers, employing memory encryption to protect sensitive data at a low overhead.
- We introduce a novel solution for protecting sensitive web content with a small trusted computing base (TCB), roughly 30-40 times smaller than a full browser in our prototype. Our design advocates rethinking the monolithic trust model between servers and clients on the present web.
- We perform a large-scale evaluation of the applicability of intra-origin abstractions like CRYPTONs in existing popular applications, demonstrating their adoptability into a large number of real-world websites with a small developer effort.

## 2. Problem & Overview
To illustrate the need for new abstractions for sensitive data, consider the example of a webmail application like Gmail. Currently, all code and data in client-side web applications are treated equally in terms of protection. However, this does not match the security requirements in practical settings. Users may use a webmail account to access both leisure emails and corporate emails. Corporate emails may contain sensitive information, and for corporate security, a user Alice may want to instruct the webmail application to mark her corporate emails as sensitive and strongly protect them from being leaked or tampered with. Unfortunately, even if her webmail service provider is willing, it is difficult to guarantee the privacy of sensitive emails when they are processed and displayed in the client’s web browser. The current web provides no abstractions for webmail applications to isolate corporate emails and specify controlled (but rich) computation on them at the client side.

### 2.1 Threat Model
In web applications like the above webmail example, sensitive data is exposed to a large threat landscape due to vulnerabilities in the client-side web stack. Below we discuss some of the in-scope threats:

- **Browser Components:** Vulnerabilities in browser components can lead to violations of the confidentiality and integrity of sensitive information. For example, in Mozilla Firefox, out of 360 vulnerabilities accessible to us, at least 288 (80%) could expose sensitive information to arbitrary malicious script or binary code running in the browser’s chrome privilege.
- **Browser Add-ons:** Browser add-ons and extensions may access sensitive data processed in browsers. Although web browsers may prompt users to approve the permissions requested by add-ons during installation, many users may "click-through" to grant them. In a survey of the Top 30 Chrome extensions, 23 request access to Gmail. If these are installed and have vulnerabilities, they can be compromised by attackers to access sensitive email. 15 out of these 23 have been confirmed to contain code-injection vulnerabilities.
- **Application Components:** Web application components can also access sensitive data in web applications. For example, the Gmail Inbox page contains 171.1 KB of code (including HTML, CSS, JS), while only 1.7 KB of it needs to access email content. However, client-side web application vulnerabilities are pervasive, including mixed content, unsafe evals, capability leaks, DOM-XSS, and insufficient origin validation.