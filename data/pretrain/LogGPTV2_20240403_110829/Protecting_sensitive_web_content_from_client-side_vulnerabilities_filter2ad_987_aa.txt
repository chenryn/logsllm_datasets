title:Protecting sensitive web content from client-side vulnerabilities
with CRYPTONS
author:Xinshu Dong and
Zhaofeng Chen and
Hossein Siadati and
Shruti Tople and
Prateek Saxena and
Zhenkai Liang
Protecting Sensitive Web Content from
Client-side Vulnerabilities with CRYPTONs
Xinshu Dong
Dept. of Computer Science,
National Univ. of Singapore
PI:EMAIL
Zhaofeng Chen∗
Inst. of Computer Science and
Technology, Peking Univ.
PI:EMAIL
Hossein Siadati∗
Dept. of Computer Science
and Engineering, Polytechnic
Inst. of New York Univ.
PI:EMAIL
Shruti Tople
Dept. of Computer Science,
National Univ. of Singapore
PI:EMAIL
Prateek Saxena
Dept. of Computer Science,
National Univ. of Singapore
PI:EMAIL
Zhenkai Liang
Dept. of Computer Science,
National Univ. of Singapore
PI:EMAIL
ABSTRACT
Web browsers isolate web origins, but do not provide direct abstrac-
tions to isolate sensitive data and control computation over it within
the same origin. As a result, guaranteeing security of sensitive web
content requires trusting all code in the browser and client-side ap-
plications to be vulnerability-free. In this paper, we propose a new
abstraction, called CRYPTON, which supports intra-origin control
over sensitive data throughout its life cycle. To securely enforce
the semantics of CRYPTONs, we develop a standalone component
called CRYPTON-KERNEL, which extensively leverages the func-
tionality of existing web browsers without relying on their large
TCB. Our evaluation demonstrates that the CRYPTON abstraction
supported by the CRYPTON-KERNEL is widely applicable to pop-
ular real-world applications with millions of users, including web-
mail, chat, blog applications, and Alexa Top 50 websites, with low
performance overhead.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection;
K.6.5 [Management of Computing and Information Systems]:
Security and Protection
Keywords
Web security, browser security, data protection
1.
INTRODUCTION
Presently, web browsers are designed to isolate content between
web origins [38], preventing data owned by one origin from being
accessed by other origins. However, in practice, information pro-
cessed within a web origin’s protection domain often has different
∗Research done when visiting National University of Singapore.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’13, November 4–8, 2013, Berlin, Germany.
Copyright 2013 ACM 978-1-4503-2477-9/13/11 ...$15.00.
http://dx.doi.org/10.1145/2508859.2516743.
levels of sensitivity. Some application data — which we refer to as
sensitive data in this paper — is critically sensitive and more im-
portant than the rest of application data. Social security numbers,
medical reports, enterprise emails with ﬁnancial data, tax-related
information, bank transactions, and user passwords are all exam-
ples of such sensitive data. Web application owners often wish to
strongly isolate sensitive data within their applications, to protect it
from vulnerabilities in the code that processes non-sensitive infor-
mation.
Under the origin-based model, web applications processing sen-
sitive data, such as password managers [43] and encrypted chat or
email clients [41], have to completely trust the client-side browser’s
origin-based isolation mechanisms and the correctness of the client-
side application code [2, 67]. Information belonging to one origin
is accessible to all the application code running within the protec-
tion domain of that origin, as well as the browser code (including
add-ons), even if they do not need to access such information. The
client-side web application and the underlying browsers consist of
millions of lines of code and have had their steady share of secu-
rity vulnerabilities historically; client-side application vulnerabili-
ties (like DOM-XSS [62]) are pervasive in client-side application
code and browser add-ons [14]. Given the scope of client-side vul-
nerabilities, protecting sensitive data within the browser environ-
ment is a serious practical concern.
Problem. The crux of the problem is that the web lacks abstrac-
tions for information owners to specify what information is sensi-
tive and how it must be processed in the client-side web browser en-
vironment. To address this problem, we envision new abstractions
that give owners control of select sensitive data over its lifetime in
the client-side browser. We term these as intra-origin data control
abstractions. In particular, we advocate that web browsers provide
these controls as ﬁrst-class abstractions on the web, independently
of strengthening the browser’s origin-based isolation.
Although there has been extensive prior work on browser design,
principled mechanisms for intra-origin data control have not re-
ceived much direct attention. For instance, recent browser designs
have signiﬁcantly improved privilege separation between code com-
ponents [4, 5, 16, 21, 25, 33, 46, 63, 69]. However, these techniques
do not directly allow web applications to enforce control on their
data; a compromised component with access to sensitive data can
still launder it through its export interfaces. For example, the sand-
boxed renderer process in Google Chrome [5], if compromised, can
1311still exploit legitimate network interfaces provided by the Chrome
kernel to leak data to attacker-controlled domains (say via an img
load) [17]. Although information control has been investigated
through language-based enforcements [22, 34, 50, 67], these mech-
anisms fail to extend the protection to the lowest level (e.g. against
attacks targeting low-level memory access). Piecemeal techniques
(such as SFI [68], JIT hardening [59], and CSP [67]) could be a
plausible basis for sensitive data protection. However, we argue
to build more direct information control primitives on the present
web.
Our solution. We design and implement a data abstraction and
browser primitive, called CRYPTON, which enables protecting sen-
sitive data throughout its lifetime in the browser. CRYPTONs are
programmed directly in existing web languages (HTML/JavaScript),
without requiring major re-engineering of existing application logic.
A CRYPTON explicitly marks a unit of sensitive data in a web page;
its semantics enforce that sensitive data and information computed
from them are tightly isolated at the lowest level (in the raw pro-
gram memory). To support rich web applications that need to ex-
ecute ﬂexible operations on sensitive data, CRYPTONs tie sensitive
data with functions that are allowed to compute over it. These few
select CRYPTON functions are trusted to be statically veriﬁed by
web developers and are the only channels for releasing informa-
tion about sensitive web content. In addition, a CRYPTON provides
other important capabilities for protecting sensitive data in web ap-
plications — guaranteed rendering (with a proof-of-impression),
and certiﬁed delivery of user inputs to CRYPTON functions in the
browser.
Building trustworthy implementations of these abstractions is an
important, but challenging goal. The main challenge stems from
the monolithic trust model of today’s web — application servers
have to completely trust the client-side code in web browsers, add-
ons and applications.
To address this practical concern, we rethink the monolithic trust
model that web applications have on client-side code. In our de-
sign, the web server trusts a small piece of client-side code called
CRYPTON-KERNEL— a small, trusted standalone engine, which
acts as a root-of-trust for the server on the client device. The
CRYPTON-KERNEL runs in a separate OS process and sandboxes
the untrusted browser, which invokes the CRYPTON-KERNEL on-
demand to securely interpret CRYPTONs. A compromised browser
can deny access to sensitive information (denial-of-service) by re-
fusing to invoke the CRYPTON-KERNEL, but it cannot subvert the
integrity and conﬁdentiality of sensitive data. In effect, our design
of the CRYPTON-KERNEL allows web applications to specify con-
trol on sensitive information, bootstrap rich computation on it and
build trusted paths between the user and the sensitive application
code [53].
Unlike prior research on origin-based isolation in browsers, we
do not isolate code components or memory regions; instead we
isolate sensitive data within a web application’s origin using au-
thenticated encryption. CRYPTONs make use of memory encryp-
tion [45], wherein data computed from sensitive data remains en-
crypted throughout its lifetime inside the untrusted browser’s mem-
ory. This ensures that any unintended malicious or compromised
code, whether part of the browser or the application logic, can
only access sensitive data in its encrypted form. Memory encryp-
tion allows sensitive data to be opaquely accessed by an untrusted
browser functionality (such as the network stack, data stores, lan-
guage parsers, rendering logic, and so on) as well as application
logic, without risking its conﬁdentiality and integrity.
Therefore, the CRYPTON-KERNEL enforces its security guaran-
tees while reusing browser functionality — it does not rely on the
browser’s same-origin policy enforcement, its components such as
the HTML parser, the JavaScript/CSS engine, and the network en-
gine to ensure its security properties. The CRYPTON-KERNEL has
a TCB about 30× - 40× smaller than that of a real web browser,
such as Firefox and Google Chrome, consisting of roughly 27K
lines of code. Through manual analysis, we ﬁnd that this design
can prevent more than 92.5% of known security vulnerabilities
from exﬁltrating or tampering with sensitive information, in a web
browser such as Firefox (Section 4).
Evaluation on real-world applications. First, we manually mod-
ify three popular web applications to selectively use CRYPTONs to
protect sensitive web content within them, including a webmail,
a web messenger and a web forum. The results show that the
CRYPTON-KERNEL strengthens their security against a broad range
of client-side vulnerabilities, with a small (around 3-5 days of)
adoption effort. Next, we conduct an extensive macro evaluation of
the applicability of CRYPTONs on real-world web sites including
Alexa Top 50 websites, such as account signup pages like Gmail,
social networking sites like Facebook, banking sites like Bank of
America, e-commerce applications like eBay, and several others.
We treat all user inputs (form ﬁelds, text-boxes, selections, etc.)
and other manually marked content in these applications as sen-
sitive information. Our macro study shows the effectiveness of
our solution in these real-world web applications. Although not a
“turn-key” mechanism, our solution requires only moderate adop-
tion effort in the order of a few days for each application. More-
over, web developers can “opt-in” by selectively converting part
of their application logic to secure speciﬁc sensitive data or for
speciﬁc users, without breaking the rest of the application. Fi-
nally, we evaluate the performance of our prototype. Although
our WebKit-based prototype implementation is still an unoptimized
proof-of-concept, we do not perceive noticeable slowdown when
running it over real-world applications. Further evaluation also
shows that performance overhead from encryption/decryption op-
erations is also modest, less than 8% when 100% of the texts on
ﬁve test pages from the Dromaeo web benchmarks are marked as
sensitive.
Contributions. In summary, we make the following contributions
in this work.
• To the best of our knowledge, we are the ﬁrst to propose a
data-centric abstraction for end-to-end data protection in web
browsers. We employ memory encryption to protect sensi-
tive data in web browsers, offering strong protection at a low
overhead.
• With the new abstraction, we propose a novel solution for
protecting sensitive web content with a small trusted com-
puting base (TCB), roughly 30× - 40× smaller than a full
browser in our prototype. Our design advocates rethinking
the monolithic (all-or-nothing) trust model between servers
and clients on the present web.
• We perform a large-scale evaluation of the applicability of
intra-origin abstractions like CRYPTONs in existing popular
applications. We demonstrate the adoptability of these ab-
stractions into a large number of real-world web sites today
with a small developer effort.
2. PROBLEM & OVERVIEW
To illustrate the need for new abstractions for sensitive data, con-
sider the example of a webmail application, such as Gmail. Cur-
rently, all code and data in client-side web applications are treated
1312equally in protection. However, this does not match the security
requirements in practical settings. Users may use a webmail ac-
count to access both leisure emails and corporate emails. As cor-
porate emails may contain sensitive information pertaining to trade
secrets or ﬁnancial information, for corporate security, a user Al-
ice may be willing to instruct the webmail application to mark her
corporate emails as sensitive and strongly protect them from being
leaked or tampered with. Unfortunately, even if her webmail ser-
vice provider is willing, it is difﬁcult for it to guarantee the privacy
of sensitive emails when they are processed and displayed in the
client’s web browser. The current web provides no abstractions for
webmail applications to isolate corporate emails and specify con-
trolled (but rich) computation on them at the client side.
2.1 Threat Model
In web applications like the above webmail example, sensitive
data is exposed to a large threat landscape due to vulnerabilities in
the client-side web stack. Below we discuss some of the in-scope
threats.
• Browser components. Vulnerabilities in browser components
can lead to violation of the conﬁdentiality and integrity of
sensitive information. We measure the number of such vul-
nerabilities in Mozilla Firefox. As part of a larger study [24],
we manually examine security vulnerabilities of Firefox over
the past seven years from its bug database [29]. We ﬁnd
that out of the 360 vulnerabilities accessible to us, at least
288 (80%) ones could expose sensitive information to arbi-
trary malicious script or binary code running in the browser’s
chrome privilege.
• Browser add-ons. Browser add-ons and extensions may ac-
cess sensitive data processed in browsers. Although web
browsers may prompt users to approve the permissions re-
quested by add-ons during their install time, many users may
“click-through” to grant them to the add-ons. We surveyed
the Top 30 Chrome extensions, and ﬁnd that 23 request ac-
cess to Gmail; if these are installed and have vulnerabili-
ties, they can be compromised by attackers to access sen-
sitive email. 15 out of these 23 have been conﬁrmed to
contain code-injection vulnerabilities in Carlini et al.’s recent
work [14].
• Application components. Web application components can
also access sensitive data in web applications. The Gmail In-
box page contains 171.1 KB code (including HTML, CSS,
JS), while only 1.7 KB of it needs to access email content.
However, client-side web application vulnerabilities are per-
vasive, including mixed content, unsafe evals, capability
leaks, DOM-XSS, and insufﬁcient origin validation.1