accessing  a  computer  and  checking  e-mail, and 
require  a  third  task  of  faxing  documents.    The 
two  tasks  making  a  phone  call  and  faxing 
documents  do  not  require  special  permissions.   
Workpatterns  A  and  B  map 
the  same 
permissions,  even  though  they  contain  slightly 
different  tasks;  consequently,  workpatterns  A 
and B are permission equivalent workpatterns. 
The  minimization  property  eliminates 
equivalent elements within a layer. Minimization 
can  be  performed  on  jobs,  workpatterns,  and 
tasks.  As  stated  earlier,  minimization  is  a  goal 
but not a requirement.  Equivalent elements can 
be merged into one element to eliminate the need 
to maintain multiple copies that contain the same 
accesses  and  information. 
  In  the  previous 
paragraph,  minimization  was  performed  on  the 
workpattern 
that  contained  equivalent 
workpatterns A & B by eliminating workpattern 
B.  
layer 
Instead  of  inefficiently  creating  a  new 
element every time the domain element maps to 
the  same  range  value,  we  can  reuse  the  range 
element  in  the  target  layer.  The  reuse  property 
permits two elements from one layer to reuse the 
same element from an adjacent layer.  Using the 
previous  example  the  Information  Technology 
Department has already defined its workpatterns 
  When 
to  administer  student  records. 
the 
Psychology  Departments  wants 
to  create  a 
to 
workpattern,  they  find  that  a  pre-existing  task 
has  been  defined  to  access  student  records.  
Instead  of  creating  a  new  task,  they  reuse  the 
task  that  has  been  defined  by  the  Information 
Technology  Department.    Reuse  of  elements 
occurs for workpatterns, tasks, permissions, and 
jobs, except for the aggregation of workpatterns 
to  jobs.  (Note:  recall  that  the  mapping  from 
workpatterns to jobs is a many-to-one relation.) 
the  permissions 
A final term to define is completeness.  
This concept is important when we validate that 
all the elements of the domain are mapped to an 
element  in  the  range.    If  an  element  is  not 
mapped to the range, then it will not be part of 
the aggregation or decomposition approaches.  In 
that  case,  either  all  permissions  will  not  be 
assigned or the element is not required to assign 
all  of 
to  a  role  (e.g.,  a 
permission-free task or equivalent jobs).  There 
is completeness of roles, jobs, workpatterns, and 
jobs; but they are all subservient to completeness 
of permissions.  If a permission is not mapped to 
at least one role, then a portion of the application 
cannot  be  accessed;  and,  thus,  it  cannot  be 
executed.  For  example,  the  human  resource 
application  has  an  access  to  backup  its  data;  if 
that the backup access is not granted to a role, a 
backup  can  not  be  performed  on  the  resource 
application.    Analogously, if there exists a role 
that is not assigned to a permission, the role will 
not  perform  any  work  because  it  will  not  have 
any accesses to any applications. 
to 
In  summary, 
minimization, 
reuse, 
that  apply 
there  are  equivalence, 
and 
uniqueness, 
completeness  properties 
the 
permission-assignment  model.  Uniqueness, 
equivalence,  and  minimization  apply  to  the 
elements  within  a  layer;  whereas,  reuse  and 
completeness apply to elements that are mapped 
between layers. Not all of the properties apply to 
each 
the  applicable 
property by an “X” in the relevant layer for the 
decomposition  approach,  and  Table  2  for  the 
aggregation 
completeness 
verification  starts  from  the  reverse  direction;  in 
the case of decomposition, the verification starts 
at permissions while for aggregation it begins at 
roles.  
layer.  Table  1  depicts 
approach.  The 
The  only  difference  between  the  two 
tables is that the aggregation table does not show 
that a workpattern cannot reuse jobs.   Recall that 
the workpattern to jobs is a many-to-one relation.  
If one workpattern can reuse more than one job, 
than there can be many workpatterns mapping to 
the same job, which is a violation of the initial 
definition  of  the  job  to  workpattern  mapping.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:10:54 UTC from IEEE Xplore.  Restrictions apply. 
Role 
Job 
Workpattern 
Task 
Permission 
Role 
Job 
Workpattern 
Task 
Permission 
Uniqueness 
Equivalence  
Minimization 
Reuse 
Completeness 
X 
X 
X 
X 
X 
X 
X 
X 
Permission 
X 
X 
X 
X 
X 
Table 1: Decomposition Table of Properties 
X 
X 
X 
X 
X 
X 
X 
X 
X 
Uniqueness 
Equivalence  
Minimization 
Reuse 
Completeness 
X 
X 
X 
X 
X 
X 
X 
X 
Permission 
X 
X 
X 
X 
X 
X 
X 
X 
X 
X 
X 
X 
X 
Table 2: Aggregation Table of Properties
Let us consider the following design example: 
Mary,  in  the  role  of  a  doctor,  is  caring  for  her 
patient at the hospital.  She needs to be able to 
perform the jobs: 1) Gathering information about 
her patients, 2) Operating medical equipment, 3) 
Researching nationally to diagnose ailments, and 
4)  Annotating  the  patient’s  hospital  record.    To 
perform 
job  of  gathering  patient 
information,  Mary  needs  to  review  hospital 
records,  her  own  office  records,  the  referring 
doctor’s  records,  and  the  patient’s  long-term 
history. 
the  first 
The  role  “R”  is  a  Doctor.    The  doctor 
role  can  perform  four  jobs:  Job  J1  -  Gathers 
information about her patients; Job J2 - Operates 
medical  equipment;  Job  J3  –  Researches 
nationally  to  diagnose  ailments;  and  Job  J4  - 
Annotates the patient’s hospital record. 
For  Job  J1,  the  Workpattern  WA  is the 
following sequence of tasks: Task T1 is to review 
hospital  records;  Task  T2  is  to  review  the 
doctor’s  (Mary’s)  office  records;  Task  T3 is to 
refer  doctor’s  records;  and  Task  T4 is to review 
the patient’s long-term history.   
Task T1 requires a permission to review 
the hospitals database (Application A1).  Task T2 
requires  a  permission  to  review  the  doctor’s 
office record (Application A2).  Task T3 requires 
permissions 
three  referring  doctors’ 
records (Applications A3, A4, and A5); and Task 
to 
the 
from 
record 
T4 requires a permission to review the patient’s 
own 
the  general  practitioner 
(Application  A6).    Task  T4  also  requires  two 
permissions: the doctor’s and the patient’s.  
5. Summary 
In this paper, we have introduced the layering of 
roles, jobs, workpatterns, tasks, and permissions 
to logically show an approach to decompose or 
aggregate roles and permissions.  This led to the 
need for concepts that could be used to engineer 
the  model’s  layer  and  define  the  relationship 
between each of these layers. 
To strategically guide the role engineer 
in consistently defining the model, we presented 
a  concept  of  “Focus.” 
  Focus  provides 
information about a foundation component (i.e., 
roles, applications, or permissions) that we use to 
engineer the approach. 
Another concept to aid in engineering is 
the ability to define the jobs of a role.  We began 
by  categorizing  the  roles  into:  Documented, 
Existing, or Undefined. We use a process flow to 
decompose  the  job  into  a  set  of  steps.    We 
realized that not all accesses that are required by 
a job might be part of a process, so we added an 
ad-hoc category for disjoint steps. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:10:54 UTC from IEEE Xplore.  Restrictions apply. 
We also found that we needed a concept 
to  aid  in  the  aggregation  of  permissions.    We 
combined aggregated permissions from one layer 
to the next layer by using buckets.  Buckets were 
used  to  group  permissions  into  tasks  and  tasks 
into workpatterns.   
Finally, we considered the economy of 
re-using 
eliminating 
redundancy,  and  the  ability  to  perform  all 
necessary  work. 
  We  found  that  we  could 
enhance  mapping  of  elements  between  layers.   
These properties were accomplished by:  
1.  Reusing previous work;  
2.  Minimizing  the  number  of  elements  by 
for 
there  was  a  need 
efficiency  of 
terms, 
determining 
if 
uniqueness ; and 
3.  Performing all the necessary work to ensure 
that there is a complete mapping of elements 
between layers. 
References 
[C99]  
for 
Chandramouli 
Ramaswamy 
(NIST),  “A  Framework 
for 
defining  an  Access  Control 
Healthcare 
Service 
Information 
System  Using 
Roles”,  A  Presentations  for  4th 
ACM Workshop on Role-Based 
Access  Control,  Fairfax  VA, 
October 28-29, 1999 
D. Thomsen, R. O’Brien, and C. 
“Napoleon  Network 
Payne, 
Application 
Policy 
Environment”,  In  Proceedings 
of 4th ACM Workshop on Role-
Based  Access  Control,  pages 
145-152,  Fairfax  VA,  October 
28-29, 1999 
Huang, 
Wei-Kuang 
Vijayalakshmi 
Alturi, 
“Secureflow:  A  Secure  Web-
enabled Workflow Management 
System”,  In  Proceedings  of  4th 
ACM Workshop on Role-Based 
Access  Control,  pages  83-94, 
Fairfax,  VA  October  28-29, 
1999 
Dan  Thomsen,  Dick  O’Brien, 
Jessica  Bogle.  Role  Based 
Access  Control  Framework  for 
Network 
In 
Proceedings  of  14th  Annual 
Enterprises, 
[TOP99]  
[HA99]  
[TOB98] 
[C95] 
[SCFY96] 
[BRJ99] 
[S98] 
[B95] 
[ES99] 
[RSW00] 
pages 
Booch, 
Coyne. 
Sandhu, 
30-December 
29,  Number 
Computer  Security  Application 
Conference, 
50-58, 
Phoenix,  AZ,  December  7-11, 
1998 
Edward 
Role 
Engineering,  In  Proceedings  of 
First  ACM  Workshop  on  Role-
Based  Access  Control,  pages  I-
15  –  I-16,  Gaithersburg,  MD, 
November 
1, 
1995. 
Ravi  Sandhu,  Edward  Coyne, 
Hal  Feinstein,  CharlesYouman, 
Role-Based  Access  Control 
Models,  In  IEEE  Computer, 
Volume 
2, 
February 1996, pages 38-47. 
Grady 
James 
Rumbaugh,  Ivar  Jacobson,  The 
Unified  Modeling  Language 
User  Guide.  Addison  Wesley 
Longman, Massachusetts, 1999 
Ravi 
Role-Based 
Access  Control,  In  Advances in 
Computers,  Vol.  46,  Academic 
Press , 1998. 
John  Barkley.    Implementing 
Role-Based  Access  Control 
Using  Object  Technology,  In 
Proceedings  of  First  ACM 
Workshop 
Role-Based 
Access  Control,  pages  II-93  – 
Gaithersburg,  MD, 
II-98, 
November 
1, 
1995. 
Pete  Epstein,  Ravi  Sandhu, 
Towards 
a  UML  Based 
Approach  to  Role  Engineering, 
In Proceedings of Fourth ACM 
Workshop 
Role-Based 
Access  Control,  pages  145-152, 
October 28-29, 1999 
Haio 
Gerhard 
Schimpf,  Rupert  Weidinger, 
Process-Oriented  Approach  for 
Implement 
Role-Finding 
Security 
Role-Based 
a  Large 
Administration 
Industrial  Organization, 
In 
Proceedings  of  Fifth  ACM 
Workshop 
Role-Based 
Access  Control,  pages  103-116, 
July 
2000.
30-December 
Roeckle, 
to 
in 
on 
26-27, 
on 
on 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:10:54 UTC from IEEE Xplore.  Restrictions apply.