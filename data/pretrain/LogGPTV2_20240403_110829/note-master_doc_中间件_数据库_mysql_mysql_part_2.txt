SHOW VARIABLES LIKE 'AUTOCOMMIT';
```
但对于不支持事务的引擎，如MyISAM或者内存表，或者执行DDL等操作，默认也会自动提交。
MySQL设置隔离级别：
```sql
SET SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED;
```
### 问题
#### Lock wait timeout exceeded
该问题是由于某个事务执行时间过长，而导致其他事务无法获取相对应的锁，其他事务在等待一定时间后，则会出现这个问题。
可通过调高 innodb_lock_wait_timeout 变量来增加超时时间。
但为了解决根本问题，还是要避免长事务的出现，可以考虑通过缩小事务的粒度以及减少事务的执行时间来解决，尽量避免在事务里执行耗时的操作，如大量调用远程接口。
一个远程接口调用过长导致的长事务超时案例：
预警在落库时，会经过一连串数据处理流程，这个流程就包括调用其他系统的资源对数据进行清洗完善，大部分接口返回响应很快，但唯独有一个接口等待响应的时长要几十秒，由于外部系统的不稳定，这就可能导致一下子出现大量事务超时的线程，为了能让流程正常地走下去，我们对外部接口做了发生超时时自动熔断并降级的功能，也就是这个接口不去调用了，当然是会影响数据的清洗，但相比实时的预警没法被民警处理，这种信息的缺失是可以接受的。同时后台也会开个异步的任务去刷这个数据。
#### Spring的事务与MySQL的事务
Spring所表达的含义就是根据规则来决定要不要事务，怎么创建事务。
1、spring里面，方法嵌套调用外层读取数据和内层读取数据效果与数据库隔离级别的关系。
#### 可重复读是默认，可不一定是常用的。乐观锁必不可少。
#### 实现
常用代理方式实现，代理服务器根据传进来的请求，决定将请求转发到哪台服务器
![202031020242](/assets/202031020242.png)
## 高可用性
### 影响可用性的原因
- 运行环境
  - 磁盘耗尽..
- 开发问题
  - 糟糕的SQL、Schema、索引
- 主备复制不一致
- 人工对数据的变更
### 实现高可用
- 规范、监控人为的错误
- 快速恢复
### 复制
- 共享存储设备([SAN](https://zh.wikipedia.org/wiki/%E5%AD%98%E5%82%A8%E5%8C%BA%E5%9F%9F%E7%BD%91%E7%BB%9C))
- 磁盘复制技术
- MySQL自带的同步复制
### 故障转移与恢复
- 提升备库为主库
- 虚拟IP转移
- 引入新的中间件，但又同时引入了单点隐患
- 在客户端进行转移
### 健康检测
- select 1：这种只能探测数据库实例是否正常，当 InnoDB 并发线程数过多导致的系统不可用，这种方式没法判断
- 为了检测存储引擎可用状况，可以放入一张表，定时往这张表写数据来判断健康状态，为了避免主从同时更新数据造成冲突，一台数据库实例独占自己的一行
- 第三种方式是使用 performance_schema 库，通过里面的指标来判断
## 相关文件说明
文件名                | 类型  | 说明
------------------ | --- | --------------------------------------------------------------------
performance_schema | 文件夹 | 数据库， MySQL 的数据字典
mysql              | 文件夹 | 数据库，MySQL 的数据字典
sys                | 文件夹 | 数据库， SQL 数据字典
my.cnf             | 文件  | 参数文件，默认是从/etc/my.cnf中读取 也可自定义
auto.cnf           | 文件  | MySQL 启动时如果没有UUID就会生成这个文件
binlog.00000x      | 文件  | 二进制日志，即binlog ，数据变化都会在里面记录。如果是在从库，还会有相应的relay log
binlog.index       | 文件  | binlog的索引文件，里面记录相应的bin log名称
mysqld.pid         | 文件  | MySQL服务的进程号
mysqld.log         | 文件  | MySQL日志，记录数据库启动日志、服务端日志，有的公司会将其命名为error.log
Ibtmpx             | 文件  | 临时表的表空间，由innodb_temp_data_file_path变量控制
ibdata1            | 文件  | 系统表空间，由innodb_data_file_path变量控制
undo_00x           | 文件  | undo表空间
mysql.ibd          | 文件  | mysql库中系统表与数据字典的表空间
ib_logfilex        | 文件  | InnoDB特有，redo文件
ib_buffer_pool     | 文件  | 关闭MySQL时，会把内存中的热数据保存在该文件中，从而提高使用率和性能
slow.log           | 文件  | 慢查询日志
xxx.pem            | 文件  | SSL相关文件
mysql.sock         | 文件  | 本地服务器的套接字文件使用UNIX domain socket作为通讯协议的载体，比TCP更快 用于从客户端到本地服务器来进行交换数据。
ib_16384_x.dblwr   | 文件  | doublewrite 文件，格式为#ib_page_size_file_number.dblwr
## 内存结构
[MySQL内存结构](https://www.cnblogs.com/kissdb/p/4009614.html)
## 参数设置
### general
- datadir=/var/lib/mysql
	- 数据文件存放的目录
- socket=/var/lib/mysql/mysql.sock
	- mysql.socket表示server和client在同一台服务器，并且使用localhost进行连接，就会使用socket进行连接
- pid_file=/var/lib/mysql/mysql.pid
	- 存储mysql的pid
- port=3306
	- mysql服务的端口号
- default_storage_engine=InnoDB
	- mysql存储引擎
- skip-grant-tables
	- 当忘记mysql的用户名密码的时候，可以在mysql配置文件中配置该参数，跳过权限表验证，不需要密码即可登录mysql
### character
- character_set_client
	- 客户端数据的字符集
- character_set_connection
	- mysql处理客户端发来的信息时，会把这些数据转换成连接的字符集格式
- character_set_results
	- mysql发送给客户端的结果集所用的字符集
- character_set_database
	- 数据库默认的字符集
- character_set_server
	- mysql server的默认字符集
### connection
- max_connections
	- mysql的最大连接数，如果数据库的并发连接请求比较大，应该调高该值
- max_user_connections
	- 限制每个用户的连接个数
- back_log
	- mysql能够暂存的连接数量，当mysql的线程在一个很短时间内得到非常多的连接请求时，就会起作用，如果mysql的连接数量达到max_connections时，新的请求会被存储在堆栈中，以等待某一个连接释放资源，如果等待连接的数量超过back_log,则不再接受连接资源
- wait_timeout
	- mysql在关闭一个非交互的连接之前需要等待的时长
- interactive_timeout
	- 关闭一个交互连接之前需要等待的秒数
### log
- log_error
	指定错误日志文件名称，用于记录当mysqld启动和停止时，以及服务器在运行中发生任何严重错误时的相关信息
- log_bin
	指定二进制日志文件名称，用于记录对数据造成更改的所有查询语句
- binlog_do_db
	指定将更新记录到二进制日志的数据库，其他所有没有显式指定的数据库更新将忽略，不记录在日志中
- binlog_ignore_db
	指定不将更新记录到二进制日志的数据库
- sync_binlog
	指定多少次写日志后同步磁盘
- general_log
	是否开启查询日志记录
- general_log_file
	指定查询日志文件名，用于记录所有的查询语句
- slow_query_log
	是否开启慢查询日志记录
- slow_query_log_file
	指定慢查询日志文件名称，用于记录耗时比较长的查询语句
- long_query_time
	设置慢查询的时间，超过这个时间的查询语句才会记录日志
- log_slow_admin_statements
	是否将管理语句写入慢查询日志
### cache
- key_buffer_size
	索引缓存区的大小（只对myisam表起作用）
- sort_buffer_size
	每个需要排序的线程分派该大小的缓冲区
- max_allowed_packet=32M
	限制server接受的数据包大小
- join_buffer_size=2M
	表示关联缓存的大小
- thread_cache_size
	- Threads_cached：代表当前此时此刻线程缓存中有多少空闲线程
	- Threads_connected：代表当前已建立连接的数量
	- Threads_created：代表最近一次服务启动，已创建现成的数量，如果该值比较大，那么服务器会一直再创建线程
	- Threads_running：代表当前激活的线程数
### innodb
- innodb_buffer_pool_size=
	该参数指定大小的内存来缓冲数据和索引，最大可以设置为物理内存的80%
- innodb_flush_log_at_trx_commit
	主要控制innodb将log buffer中的数据写入日志文件并flush磁盘的时间点，值分别为0，1，2
- innodb_thread_concurrency
	设置innodb线程的并发数，默认为0表示不受限制，如果要设置建议跟服务器的cpu核心数一致或者是cpu核心数的两倍
- innodb_log_buffer_size
	此参数确定日志文件所用的内存大小，以M为单位
- innodb_log_file_size
	此参数确定数据日志文件的大小，以M为单位
- innodb_log_files_in_group
	以循环方式将日志文件写到多个文件中
- read_buffer_size
	mysql读入缓冲区大小，对表进行顺序扫描的请求将分配到一个读入缓冲区
- read_rnd_buffer_size
	mysql随机读的缓冲区大小
- innodb_file_per_table
	此参数确定为每张表分配一个新的文件