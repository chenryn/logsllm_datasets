-   [扩展的验证模块](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html-single/managing_monitoring_and_updating_the_kernel/index#extended-verification-module_enhancing-security-with-the-kernel-integrity-subsystem){.link}
-   [完整性测量架构](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html-single/managing_monitoring_and_updating_the_kernel/index#integrity-measurement-architecture_enhancing-security-with-the-kernel-integrity-subsystem){.link}
-   [内核完整性子系统](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html-single/managing_monitoring_and_updating_the_kernel/index#the-kernel-integrity-subsystem_enhancing-security-with-the-kernel-integrity-subsystem){.link}
-   [可信和加密的密钥](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html-single/managing_monitoring_and_updating_the_kernel/index#trusted-and-encrypted-keys_enhancing-security-with-the-kernel-integrity-subsystem){.link}。
:::
:::
::: section
::: titlepage
# []{#enhancing-security-with-the-kernel-integrity-subsystem_managing-monitoring-and-updating-the-kernel.html#collecting-file-hashes-with-integrity-measurement-architecture_enhancing-security-with-the-kernel-integrity-subsystem}使用完整性测量架构收集文件哈希 {.title}
:::
完整性测量架构 (IMA)
的第一级操作是[*测量*]{.emphasis}阶段，它允许创建文件哈希并将其存储为这些文件的扩展属性
(xattrs)。下面的部分论述了如何创建和检查文件的哈希。
::: itemizedlist
**先决条件**
-   启用完整性测量架构(IMA)和扩展的验证模块(EVM)，如
    [启用完整性测量架构和扩展的验证模块](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html-single/managing_monitoring_and_updating_the_kernel/index#enabling-integrity-measurement-architecture-and-extended-verification-module_enhancing-security-with-the-kernel-integrity-subsystem){.link}
    中所述。
-   验证是否已安装 `ima-evm-utils`{.literal}、`attr`{.literal} 和
    `keyutils`{.literal} 软件包：
    ``` literallayout
    # dnf install ima-evm-utils attr keyutils
    Updating Subscription Management repositories.
    This system is registered to Red Hat Subscription Management, but is not receiving updates. You can use subscription-manager to assign subscriptions.
    Last metadata expiration check: 0:58:22 ago on Fri 14 Feb 2020 09:58:23 AM CET.
    Package ima-evm-utils-1.1-5.el8.x86_64 is already installed.
    Package attr-2.4.48-3.el8.x86_64 is already installed.
    Package keyutils-1.5.10-7.el8.x86_64 is already installed.
    Dependencies resolved.
    Nothing to do.
    Complete!
    ```
:::
::: orderedlist
**步骤**
1.  创建测试文件：
    ``` literallayout
    # echo  > test_file
    ```
    IMA 和 EVM 确保分配了示例文件
    `test_file`{.literal}，哈希值存储为其扩展属性。
2.  检查文件的扩展属性：
    ``` literallayout
    # getfattr -m . -d test_file
    # file: test_file
    security.evm=0sAnDIy4VPA0HArpPO/EqiutnNyBql
    security.ima=0sAQOEDeuUnWzwwKYk+n66h/vby3eD
    security.selinux="unconfined_u:object_r:admin_home_t:s0"
    ```
    前面的输出显示了与 SELinux 以及 IMA 和 EVM 哈希值相关的扩展属性。EVM
    主动添加 `security.evm`{.literal} 扩展属性，并检测对其他文件（如
    `security.ima`{.literal} ）的 xattrs
    的任何脱机篡改，它们与文件的内容完整性直接相关。`security.evm`{.literal}
    字段的值位于基于 Hash 的消息身份验证代码 (HMAC-SHA1)
    中，该身份验证代码由 `evm-key`{.literal} 用户密钥生成。
:::
::: itemizedlist
**其他资源**
-   [安全强化](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html-single/security_hardening/index){.link}
-   [扩展的验证模块](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html-single/managing_monitoring_and_updating_the_kernel/index#extended-verification-module_enhancing-security-with-the-kernel-integrity-subsystem){.link}
-   [完整性测量架构](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html-single/managing_monitoring_and_updating_the_kernel/index#integrity-measurement-architecture_enhancing-security-with-the-kernel-integrity-subsystem){.link}
:::
:::
:::
[]{#using-ansible-roles-to-permanently-configure-kernel-parameters_managing-monitoring-and-updating-the-kernel.html}
::: chapter
::: titlepage
# []{#using-ansible-roles-to-permanently-configure-kernel-parameters_managing-monitoring-and-updating-the-kernel.html#using-ansible-roles-to-permanently-configure-kernel-parameters_managing-monitoring-and-updating-the-kernel}第 23 章 使用 Ansible 角色永久配置内核参数 {.title}
:::
您可以使用 kernel Settings
角色一次在多个客户端上配置内核参数。这个解决方案：
::: itemizedlist
-   提供带有有效输入设置的友好接口。
-   保留所有预期的内核参数。
:::
从控制机器运行 Kernel Settings
角色后，内核参数会立即应用于受管系统，并在重启后保留。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
请注意，通过 RHEL 频道提供的 {RHELSystemRoles} 可以作为默认 AppStream
存储库中的 RPM 软件包提供给 RHEL。{RHELSystemRoles} 也可作为 Ansible
Automation Hub 使用 Ansible 订阅的客户提供集合。
:::
::: section
::: titlepage
# []{#using-ansible-roles-to-permanently-configure-kernel-parameters_managing-monitoring-and-updating-the-kernel.html#introduction-to-the-kernel-settings-role_using-ansible-roles-to-permanently-configure-kernel-parameters}内核设置角色简介 {.title}
:::
{RHELSystemRoles}s 是一组角色，为远程管理多个系统提供一致的配置接口。
为使用内核设置系统角色的内核自动配置引入了
{RHELSystemRoles}。`rhel-system-roles`{.literal}
软件包包含这个系统角色以及参考文档。
要以自动化的方式在一个或多个系统上应用内核参数，请在 playbook
中使用内核设置角色以及您选择的一个或多个角色变量。playbook
是一个或多个人类可读的 play 的列表，采用 YAML 格式编写。
使用您可以配置的内核设置角色：
::: itemizedlist
-   使用 `kernel_settings_sysctl`{.literal} 角色变量的内核参数
-   使用 `kernel_settings_sysfs`{.literal}
    角色变量的各种内核子系统、硬件设备和设备驱动程序
-   `systemd`{.literal} 服务管理器的 CPU 相关性，并使用
    `kernel_settings_systemd_cpu_affinity`{.literal} 角色变量处理其分叉
-   内核内存子系统使用 `kernel_settings_transparent_hugepages`{.literal}
    和 `kernel_settings_transparent_hugepages_defrag`{.literal}
    角色变量透明巨页
:::
::: itemizedlist
**其他资源**
-   `/usr/share/doc/rhel-system-roles/kernel_settings/kernel_settings/`{.literal}
    目录中的 `README.md`{.literal} 和 `README.html`{.literal} 文件
-   [使用
    playbook](https://docs.ansible.com/ansible/latest/user_guide/playbooks.html){.link}
-   [如何构建清单](https://docs.ansible.com/ansible/latest/user_guide/intro_inventory.html){.link}
:::
:::
::: section
::: titlepage
# []{#using-ansible-roles-to-permanently-configure-kernel-parameters_managing-monitoring-and-updating-the-kernel.html#applying-selected-kernel-parameters-using-the-kernel-settings-role_using-ansible-roles-to-permanently-configure-kernel-parameters}使用 kernel Settings 角色应用所选内核参数 {.title}
:::
按照以下步骤准备并应用 Ansible playbook
来远程配置内核参数，从而对多个受管操作系统产生持久性。
::: itemizedlist
**先决条件**
-   有 `root`{.literal} 权限。
-   RHEL 订阅授权，您将在控制机器上安装 `ansible-core`{.literal} 和
    `rhel-system-roles`{.literal} 软件包。
-   受管主机清单存在于控制计算机上，Ansible 能够连接它们。
:::
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
RHEL 8.0 - 8.5 提供对基于 Ansible 的自动化需要 Ansible Engine 2.9 的独立
Ansible 存储库的访问权限。Ansible Engine 包含命令行实用程序，如
`ansible`{.literal}、`ansible-playbook`{.literal}; 连接器，如
`docker`{.literal} 和 `podman`{.literal};
以及插件和模块的整个环境。有关如何获取并安装 Ansible Engine
的信息，请参阅[如何下载和安装 Red Hat Ansible
Engine?](https://access.redhat.com/articles/3174981){.link}。
RHEL 8.6 和 9.0 引入了 Ansible Core（以 `ansible-core`{.literal} RPM
提供），其中包含 Ansible 命令行工具、命令以及小型内置 Ansible
插件。AppStream 存储库提供
`ansible-core`{.literal}，它的范围有限。如需更多信息，请参阅 [RHEL 9
AppStream 中包含的 ansible-core
软件包的范围](https://access.redhat.com/articles/6325611){.link}。
:::
::: orderedlist
**步骤**
1.  另外，还可查看 `清单（inventory）`{.literal}文件 ：
    ``` literallayout
    #  cat /home/jdoe//inventory
    [testingservers]
    PI:EMAIL
    PI:EMAIL
    [db-servers]
    db1.example.com
    db2.example.com
    [webservers]
    web1.example.com
    web2.example.com
    192.0.2.42
    ```
    该文件定义 `[testingservers]`{.literal}
    组和其他组。它允许您对特定的系统集合更有效地运行 Ansible。
2.  创建配置文件来为 Ansible 操作设置默认值和特权升级。
    ::: orderedlist
    1.  创建新 YAML 文件，并在文本编辑器中打开，例如：
        ``` literallayout
        #  vi /home/jdoe//ansible.cfg
        ```
    2.  将以下内容插入到文件中：
        ``` literallayout
        [defaults]
        inventory = ./inventory
        [privilege_escalation]
        become = true
        become_method = sudo
        become_user = root
        become_ask_pass = true
        ```
        `[defaults]`{.literal}
        部分指定受管主机清单文件的路径。`[privilege_escalation]`{.literal}
        部分定义用户特权转移到指定受管主机上的
        `root`{.literal}。这对成功配置内核参数是必需的。运行 Ansible
        playbook 时，会提示您输入用户密码。用户在连接到受管主机后，通过
        `sudo`{.literal} 自动切换为 `root`{.literal}。
    :::
3.  创建使用 Kernel Settings 角色的 Ansible playbook。
    ::: orderedlist
    1.  创建新 YAML 文件，并在文本编辑器中打开，例如：
        ``` literallayout
        #  vi /home/jdoe//kernel-roles.yml
        ```
        此文件代表一个 playbook，通常包含了一组有特定顺序的任务（也称为
        [*play*]{.emphasis} ）列表。这些任何会根据 `inventory`{.literal}
        文件中选择的特定管理主机进行。
    2.  将以下内容插入到文件中：
        ``` literallayout
        ---
        -
          hosts: testingservers
          name: "Configure kernel settings"
          roles:
            - rhel-system-roles.kernel_settings
          vars:
            kernel_settings_sysctl:
              - name: fs.file-max
                value: 400000
              - name: kernel.threads-max
                value: 65536
            kernel_settings_sysfs:
              - name: /sys/class/net/lo/mtu
                value: 65000
            kernel_settings_transparent_hugepages: madvise
        ```
        `name`{.literal} 键是可选的。它将一个任意字符串作为标签与该 play
        关联，并确定该 play 的用途。Play 中的 `hosts`{.literal}
        键指定对其运行 play
        的主机。此键的值或值可以作为被管理的主机的单独名称提供，也可以作为
        `inventory`{.literal} 文件中定义的一组主机提供。
        `vars`{.literal} 部分代表包含所选内核参数名称和值的变量列表。
        `roles`{.literal} 键指定系统角色将配置 `vars`{.literal}
        部分中提到的参数和值。
        ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
        ### 注意 {.title}
        您可以修改 playbook 中的内核参数及其值以符合您的需要。
        :::
    :::
4.  （可选）验证 play 中的语法是否正确。
    ``` literallayout
    #  ansible-playbook --syntax-check kernel-roles.yml
    playbook: kernel-roles.yml
    ```
    本例演示了对 playbook 的成功验证。
5.  执行 playbook。
    ``` screen
    #  ansible-playbook kernel-roles.yml
    ...
    BECOME password:
    PLAY [Configure kernel settings] **********************************************************************************
    PLAY RECAP ********************************************************************************************************
    PI:EMAIL       : ok=10   changed=4    unreachable=0    failed=0    skipped=6    rescued=0    ignored=0
    PI:EMAIL        : ok=10   changed=4    unreachable=0    failed=0    skipped=6    rescued=0    ignored=0
    ```
    在 Ansible 运行 playbook
    之前，会提示您输入密码，以便受管主机上的用户可以切换到
    `root`{.literal}，这在配置内核参数时是必需的。
    recap 部分显示 play 成功完成所有受管主机
    (`failed=0`{.literal})，并且已应用了 4 个内核参数
    (`changed=4)。`{.literal}
6.  重启您的受管主机并检查受影响的内核参数,以验证是否应用了更改并在重启后保留。
:::
::: itemizedlist
**其他资源**
-   [RHEL
    系统角色入门](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html-single/configuring_basic_system_settings/index#getting-started-with-rhel-system-roles_configuring-basic-system-settings){.link}
-   `/usr/share/doc/rhel-system-roles/kernel_settings/kernel_settings/`{.literal}
    目录中的 `README.html`{.literal} 和 `README.md`{.literal} 文件
-   [构建您的清单](https://docs.ansible.com/ansible/latest/network/getting_started/first_inventory.html){.link}
-   [配置
    Ansible](https://docs.ansible.com/ansible/latest/installation_guide/intro_configuration.html){.link}
-   [使用
    Playbook](https://docs.ansible.com/ansible/latest/user_guide/playbooks.html){.link}
-   [使用变量](https://docs.ansible.com/ansible/latest/user_guide/playbooks_variables.html){.link}
-   [角色](https://docs.ansible.com/ansible/latest/user_guide/playbooks_reuse_roles.html){.link}
:::
:::
:::