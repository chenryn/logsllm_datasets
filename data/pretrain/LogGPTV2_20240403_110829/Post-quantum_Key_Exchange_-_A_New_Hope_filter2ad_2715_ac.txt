tion of this sampling algorithm is much easier to pro-
tect against timing attacks as no large tables or data-
dependent branches are required (cf. to the issues caused
by the table-based approach used in [20]).
5
Improved error-recovery mechanism
In most of the literature, Ring-LWE encryption allows to
encrypt one bit per coordinate of the ciphertext. It is also
well known how to encrypt multiple bits per coordinate
by using a larger modulus-to-error ratio (and therefore
decreasing the security for a ﬁxed dimension n). How-
ever, in the context of exchanging a symmetric key (of,
say, 256 bits), we end up having a message space larger
(0, 1)
(1, 1)
( 1
2
,
1
2 )
(0, 0)
(1, 0)
Figure 1: The lattice ˜D2 with Voronoi cells
than necessary and thus want to encrypt one bit in multi-
ple coordinates.
In [79] Pöppelmann and Güneysu introduced a tech-
nique to encode one bit into two coordinates, and veriﬁed
experimentally that it led to a better error tolerance. This
allows to either increase the error and therefore improve
the security of the resulting scheme or to decrease the
probability of decryption failures. In this section we pro-
pose a generalization of this technique in dimension 4.
We start with an intuitive description of the approach in
2 dimensions and then explain what changes in 4 dimen-
sions. Appendices C and D in the full version of this
paper give a thorough mathematical description together
with a rigorous analysis.
Let us ﬁrst assume that both client and server have the
same vector x ∈ [0,1)2 ⊂ R2 and want to map this vector
to a single bit. Mapping polynomial coefﬁcients from
{0, . . . ,q − 1} to [0,1) is easily accomplished through a
division by q.
Now consider the lattice ˜D2 with basis {(0,1), ( 1
2 , 1
2 )}.
This lattice is a scaled version of the root lattice D2,
speciﬁcally, ˜D2 = 1
2 · D2. Part of ˜D2 is depicted in Fig-
ure 1; lattice points are shown together with their Voronoi
cells and the possible range of the vector x is marked
with dashed lines. Mapping x to one bit is done by
ﬁnding the closest-vector v ∈ ˜D2.
2 ) (i.e.,
x is in the grey Voronoi cell), then the output bit is 1;
if v ∈ {(0,0), (0,1), (1,0), (1,1)} (i.e., x is in a white
Voronoi cell) then the output bit is 0.
This map may seem like a fairly complex way to map
from a vector to a bit. However, recall that client and
server only have a noisy version of x, i.e., the client has
a vector xc and the server has a vector xs. Those two
vectors are close, but they are not the same and can be on
different sides of a Voronoi cell border.
If v = ( 1
2 , 1
Error reconciliation. The approach described above
now allows for an efﬁcient solution to solve this
agreement-from-noisy-data problem. The idea is that
one of the two participants (in our case the client) sends
as a reconciliation vector the difference of his vector xc
6
332  25th USENIX Security Symposium 
USENIX Association
( 1
2
,
1
2 )
Figure 2: Splitting of the Voronoi cell of ( 1
2 ) into 2rd =
16 sub-cells, some with their corresponding difference
vector to the center
2 , 1
and the center of its Voronoi cell (i.e., the point in the
lattice). The server adds this difference vector to xs and
thus moves away from the border towards the center of
the correct Voronoi cell. Note that an eavesdropper does
not learn anything from the reconciliation information:
the client tells the difference to a lattice point, but not
whether this is a lattice point producing a zero bit or a
one bit.
This approach would require sending a full additional
vector; we can reduce the amount of reconciliation in-
formation through r-bit discretization. The idea is to
split each Voronoi cell into 2dr sub-cells and only send
in which of those sub-cells the vector xc is. Both partici-
pants then add the difference of the center of the sub-cell
and the lattice point. This is illustrated for r = 2 and
d = 2 in Figure 2.
q , . . . , q−1
Blurring the edges. Figure 1 may suggest that the prob-
ability of x being in a white Voronoi cell is the same as
for x being in the grey Voronoi cell. This would be the
case if x actually followed a continuous uniform distri-
bution. However, the coefﬁcients of x are discrete values
in {0, 1
q } and with the protocol described so far,
the bits of ν would have a small bias. The solution is to
add, with probability 1
2q ) to x before
running the error reconciliation. This has close to no ef-
fect for most values of x, but, with probability 1
2 moves x
to another Voronoi cell if it is very close to one side of a
border. Appendix E in the full version of this paper gives
a graphical intuition for this trick in two dimensions and
with q = 9. The proof that it indeed removes all biases in
the key is given in Lemma C.2. in the full version of this
paper.
2, the vector ( 1
2q , 1
2 , 1
2 , 1
2 , 1
Z4 and gt =(cid:31) 1
2(cid:30). The lattice ˜D4 is a rotated and
scaled version of the root lattice D4. The Voronoi cells
of this lattice are no longer 2-dimensional “diamonds”,
but 4-dimensional objects called icositetrachoron or 24-
cells [61]. Determining in which cell a target point lies
in is done using the closest vector algorithm CVP ˜D4, and
a simpliﬁed version of it, which we call Decode, gives
the result modulo Z4.
As in the 2-dimensional illustration in Figure 2, we are
using 2-bit discretization; we are thus sending r · d = 8
bits of reconciliation information per key bit.
Putting all of this together, we obtain the HelpRec
function to compute the r-bit reconciliation information
as
(x + bg)(cid:28) mod 2r,
HelpRec(x;b) =CVP ˜D4(cid:29)2r
where b ∈ {0,1} is a uniformly chosen random bit. The
qx− 1
corresponding function Rec(x,r) =Decode( 1
2r Br)
computes one key bit from a vector x with 4 coefﬁcients
in Zq and a reconciliation vector r ∈ {0,1,2,3}4. The
algorithms CVP ˜D4 and Decode are listed as Algorithm 1
and Algorithm 2, respectively.
q
Algorithm 1 CVP ˜D4(x ∈ R4)
Ensure: An integer vector z such that Bz is a closest
vector to x: x− Bz ∈ V
1: v0←(cid:25)x(cid:24)
2: v1←(cid:25)x− g(cid:24)
3: k←((cid:23)x− v0(cid:23)1 < 1) ? 0 : 1
4: (v0,v1,v2,v3)t←vk
5: return (v0,v1,v2,k)t + v3 · (−1,−1,−1,2)t
Algorithm 2 Decode(x ∈ R4/Z4)
Ensure: A bit k such that kg is a closest vector to x+Z4:
x− kg ∈ V + Z4
1: v = x−(cid:25)x(cid:24)
2: return 0 if (cid:23)v(cid:23)1 ≤ 1 and 1 otherwise
Finally it remains to remark that even with this rec-
onciliation mechanism client and server do not always
agree on the same key. Lemma D in the full version
of this paper. provides a detailed analysis of the fail-
ure probability of the key agreement and shows that it is
smaller than 2−60.
From 2 to 4 dimensions. When moving from the 2-
dimensional case considered above to the 4-dimensional
case used in our protocol, not very much needs to change.
The lattice ˜D2 becomes the lattice ˜D4 with basis B =
(u0,u1,u2,g), where ui are the canonical basis vectors of
6 Post-quantum security analysis
In [20] the authors chose Ring-LWE for a ring of rank
n = 1024, while most previous instantiations of the Ring-
LWE encryption scheme, like the ones in [29,42,63,79],
USENIX Association  
25th USENIX Security Symposium  333
7
chose substantially smaller rank n = 256 or n = 512. It
is argued that it is unclear if dimension 512 can offer
post-quantum security. Yet, the concrete post-quantum
security of LWE-based schemes has not been thoroughly
studied, as far as we know. In this section we propose
such a (very pessimistic) concrete analysis. In particu-
lar, our analysis reminds us that the security depends as
much on q and its ratio with the error standard deviation
ς as it does on the dimension n. That means that our ef-
fort of optimizing the error recovery and its analysis not
only improves efﬁciency but also offers superior security.
Security level over-shoot? With all our improvements,
it would be possible to build a scheme with n = 512
(and k = 24, q = 12289) and to obtain security some-
what similar to the one of [20, 42], and therefore fur-
ther improve efﬁciency. We call this variant JARJAR and
details are provided in Appendix A of the full version
of this paper. Nevertheless, as history showed us with
RSA-512 [28], the standardization and deployment of a
scheme awakens further cryptanalytic effort. In particu-
lar, NEWHOPE could withstand a dimension-halving at-
tack in the line of [36, Sec 8.8.1] based on the Gentry-
Szydlo algorithm [40,60] or the subﬁeld approach of [2].
Note that so far, such attacks are only known for princi-
pal ideal lattices or NTRU lattices, and there are serious
obstructions to extend them to Ring-LWE, but such pre-
caution seems reasonable until lattice cryptanalysis sta-
bilizes.
We provide the security and performance analysis of
JARJAR in Appendix A of the full version of this paper
mostly for comparison with other lower-security propos-
als. We strongly recommend NEWHOPE for any imme-
diate applications, and advise against using JARJAR un-
til concrete cryptanalysis of lattice-based cryptography is
better understood.
6.1 Methodology: the core SVP hardness
We analyze the hardness of Ring-LWE as an LWE prob-
lem, since, so far, the best known attacks do not make use
of the ring structure. There are many algorithms to con-
sider in general (see the survey [3]), yet many of those
are irrelevant for our parameter set. In particular, because
there are only m = n samples available one may rule out
BKW types of attacks [53] and linearization attacks [6].
This essentially leaves us with two BKZ [26,82] attacks,
usually referred to as primal and dual attacks that we will
brieﬂy recall below.
The algorithm BKZ proceeds by reducing a lattice ba-
sis using an SVP oracle in a smaller dimension b. It is
known [47] that the number of calls to that oracle re-
mains polynomial, yet concretely evaluating the number
of calls is rather painful, and this is subject to new heuris-
tic ideas [25, 26]. We choose to ignore this polynomial
factor, and rather evaluate only the core SVP hardness,
that is the cost of one call to an SVP oracle in dimension
b, which is clearly a pessimistic estimation (from the de-
fender’s point of view).
6.2 Enumeration versus quantum sieve
Typical implementations [23, 26, 35] use an enumeration
algorithm as this SVP oracle, yet this algorithm runs in
super-exponential time. On the other hand, the sieve al-
gorithms are known to run in exponential time, but are so
far slower in practice for accessible dimensions b ≈ 130.
We choose the latter to predict the core hardness and will
argue that for the targeted dimension, enumerations are
expected to be greatly slower than sieving.
Quantum sieve. A lot of recent work has pushed the ef-
ﬁciency of the original lattice sieve algorithms [69, 75],
improving the heuristic complexity from (4/3)b+o(b) ≈
20.415b down to (cid:31)3/2b+o(b)
≈ 20.292b (see [10, 55]).
The hidden sub-exponential factor is known to be much
greater than one in practice, so again, estimating the
cost ignoring this factor leaves us with a signiﬁcant pes-
simistic margin.
Most of those algorithms have been shown [54, 56] to
beneﬁt from Grover’s quantum search algorithm, bring-
ing the complexity down to 20.265b. It is unclear if fur-
ther improvements are to be expected, yet, because all
those algorithms require classically building lists of size
≈ 20.2075b, it is very plausible that the best
quantum SVP algorithm would run in time greater than
20.2075b.
(cid:31)4/3b+o(b)
Irrelevance of enumeration for our analysis. In [26],
predictions of the cost of solving SVP classically us-
ing the most sophisticated heuristic enumeration algo-
rithms are given. For example, solving SVP in dimension
100 requires visiting about 239 nodes, and 2134 nodes
in dimension 250. Because this enumeration is a back-
tracking algorithm, it does beneﬁt from the recent quasi-
quadratic speedup [70], decreasing the quantum cost to
about at least 220 to 267 operations as the dimension in-
creases from 100 to 250.
On the other hand, our best-known attack bound
20.265b gives a cost of 266 in dimension 250, and the best
plausible attack bound 20.2075b ≈ 239. Because enumera-
tion is super-exponential (both in theory and practice), its
cost will be worse than our bounds in dimension larger
than 250 and we may safely ignore this kind of algo-
rithm.5
5The numbers are taken from the latest full version of [26] available