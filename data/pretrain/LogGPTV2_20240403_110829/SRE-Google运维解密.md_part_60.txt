Wikipedia：解析、
变形、
参见http://en.wikipedia.org/wiki/Big_data
加载，
参见http://en.wikipedia.org/wiki/Extract,_transform，load
注2
---
## Page 327
再进行下一阶段的计算，而“排序”需要等待全部数据就位才能继续。这样有可能会极
序流式传输的数据”。这种类型的用户程序通常需要等待某个阶段的计算全部完成之后
致的。这个问题也可能是由于某些实时操作在流式数据上实现的困难性导致的，例如“排
间就至少等于处理最大的客户的工作分块所需的时间。
会比其他的都大，由于单个客户已经是系统的最小分块单元，整个数据流水线的运行时
有的时候工作分块所需要的处理资源是不等的，而且理解为什么这一块工作需要更多的
（参见文献[Mol86]）将巨大的工作集切割为一个个可以装载在单独的物理机器上的小块。
某些分块处理卡住导致整体运维压力上升等。
对整个系统造成压力，导致各种各样的问题出现。这种问题包括任务运行超时、资源耗尽
细调校过后，整个流水线的性能可能很稳定。但是随着数据量的自然增长等种种变化会
一次安装周期性流水线时，工作进程数量、运行周期、分块处理技术，以及其他参数仔
然而，SRE运维经验证明，周期性的数据流水线模型是非常脆弱易坏的。我们发现当第
如MapReduce（参见文献[Dea04]）和Flume（参见文献[Cha10]）等。
周期性的数据流水线非常实用，Google也经常使用，为此还编写了一系列程序框架，例
之间的吞吐量基本一致的方法来排除整个流水线中的瓶颈及其他不稳定因素。
相对比较稳定。而且，我们可以通过保证在流水线中串联的程序数量相对固定以及程序
周期性流水线在工作进程数量可以满足数据量的要求，以及计算容量足够执行需要时，
周期性流水线模式的挑战
甚至几百个程序。
一个数据流水线中串联的程序数量多少称为该流水线的深度（depth）。因此，一个很“浅”
个程序都是一个独立的数据处理单元。
我们将这样构建的程序称为多相流水线（multiphase pipeline），因为整个链条中的每一
原因是，这样设计有助于理解系统的逻辑，但是这在系统效率方面并不一定是最优方案。
一个程序的输出作为另外一个程序的输入。这种编排方式有很多种原因，但是最常见的
由于大数据与生俱来的海量级别和处理的高复杂度，这种程序通常会被串联起来执行，
“卡住的工作分块”问题可能是由于资源在集群中分配不均衡，或者是资源分配过量导
资源是很困难的。举例来说，在一个按客户分块的工作集中，
工作分发不均造成的问题
工作分发不均造成的问题
，某些客户的工作分块可能
|285
329
---
## Page 328
286
大约20分钟完成的任务的执行周期降低到40分钟以下时可能会造成重叠执行，这可能
请注意图25-1所示的下滑的执行时间线与调度延迟的交叉。在这个场景中，将这个需要
被杀掉，加速运行的操作反而会造成整个流水线完全停滞。
更糟糕的是，正在执行的、马上就要结束的运行可能会由于下一次执行马上就要开始而
策略有关。例如，新的执行可能会在集群调度器上累积，因为前一次运行还没有结束。
只会造成更多的问题而不能让任务执行得更快。实际造成的问题和所使用的批处理调度
期性数据流水线的执行延迟有了一个下限。超过这个值继续减少任务执行的间隔周期
着执行频率的增高，每次执行之间的最小时间很快会与平均启动延迟持平，这就使得周
对于一个每天运行一次的流水线来说，几个小时的启动延迟可能是可以接受的。但是随
的周期性数据流水线实际上是在资源成本与挤占风险中的一个微妙平衡。
（preemption）（见文献[Verl5]的第2.5节）。在这种妥协作用下，运行一个良好调校过
大的时候，超量使用批处理调度器（参见第24章）容易使任务经常被其他任务所挤走
资源成正比。虽然实践中这种批处理调度方式工作得还可以，但是如果在集群压力很
的资源、价格、稳定性以及可用性都没有保障。执行成本与启动延迟成反比，与消耗的
例如，这些任务依赖那些大型面向用户的高优先级任务之间的资源缝隙运行，低优先级
利用这种机制运行的任务面临着一系列天然的限制，这使得它们和普通任务截然不同。
低优先级可能会造成任务启动很慢。
的集群管理系统，参见文献[Ver15]）将批处理任务指派给可用的机器处理。但是，这种
户业务那样对延迟敏感。而且，为了降低成本、最大化机器负载，Borg系统（Google
是很有必要的。将这种任务定位为低优先级是合理的，因为流水线任务通常不像面向用
的流水线任务那样，它们经常以低优先级批处理任务方式运行，针对它们单独进行调度
方案里包括了针对这种数据流水线的另外一套调度机制。由于周期性任务不像持续运行
处理大数据的周期性数据流水线在Google使用非常广泛，所以Google的集群管理解决
分布式环境中周期性数据流水线的缺点
算，这样前一次运行消耗的时间、CPU以及人力成本就全都浪费了。
然而因为整个流水线的实现中并没有包含状态记录，所有的工作分块都需要重新进行计
整个任务杀掉，使整个任务重启，因为可能是某种非决定性的意外因素导致的任务卡住。
如果这个问题被工程师或者集群监控系统发现了，那么他们采取的措施可能会使得事情
最差的分块的完成。
大地拖慢整个数据流水线的完成时间，因为完成整个流水线要依赖于整个流水线中性能
第25章
数据处理流水线
---
## Page 329
载，网络基础设施等也会出现问题。
误的方法重试等，可能会导致所运行的物理服务器过载，甚至于分布式集群服务也会过
程立即启动。如果一个服务器上有太多工作进程，或者这些工作进程配置错误，并用错
论过这个问题。对一个足够大的周期性流水线来说，每一次运行，可能有几千个工作进
在执行问题和监控问题之外，还有分布式系统常见的“惊群效应”，我们在第24章中讨
惊群效应
发现两者强烈相关。
被设计为一直可用。周期性的流水线并不一定都具有监控难度问题，但是我们在实践中
持久性的流水线不存在这样的问题，因为它们的任务是一直运行的，而它们的指标信息
成时才一次性提交。如果任务在执行过程中失败，就不会有统计信息。
下的响应帮助。在实践中，标准的监控模型在任务执行过程中不停地收集指标，仅在完
实时监控都很重要。这是因为，实时监控可以提供更多的运维支持，包括提供紧急情况
对那些有充裕时间运行的流水线来说，整个流水线的全局运行指标与运行时性能指标的
监控周期性流水线的问题
资源和生产系统调度资源必须有所区分，以便更好地区分资源的获取成本。
愿意费力获取资源，再将其贡献给一个公共池中共享。为了解决这个问题，批处理调度
的环境中资源的获取要依赖供需关系的变化。正如我们所预计的那样，开发团队一般不
这个问题的解决方案是为正常运行提供足够的服务容量。然而，在一个共享的、分布式
图25-1：周期性流水线执行间隔时间与等待时间（对数级Y轴）
会造成异常情况。
1000
1440720
360
300
240
1801209060
执行间隔
分布式环境中周期性数据流水线的缺点
50
40
总执行时间
调度延迟
|287
331
---
## Page 330
332
288
图25-2：不同的基础设施中的摩尔负载模式
当聚合负载接近1.2M的时候将会给on-call工程师造成麻烦。
个周期性流水线对资源的使用图。在图25-3中，将之前的图表转化为层叠方式可以看出
摩尔负载模式在流水线共享资源使用图表中表现得非常明显。例如，图25-2标记出了三
现，但是在负载比较平衡的时候就很少出现了。
些执行过程重叠，导致它们同时消耗某个共享资源。这个问题也会在持续性流水线中出
载模式”（MoireLoadPattern）。该问题是指两个或者更多的流水线任务同时运行时，某
有的时候这种“惊群效应”不那么容易发现。另外一个相关问题，我们称之为“摩尔负
摩尔负载模式
的流水线任务对集群内的服务造成的压力更大的了。
不管“惊群效应”的根源在哪里，没有什么比一个问题不断、由10.000个工作进程组成
经常会向其中添加更多的工作进程，使得整个问题变得更糟。
人工干预也有可能使问题变得更严重。经验不足的工程师在流水线无法按时完成的时候
细调优，在重试的时候可能会放大问题。
能会丢失，造成正确性问题。如果实现了重试逻辑，
使这个情况变得更糟的是，如果没有实现重试逻辑，
第25章
applycount
200.0k
400.0k
600.0k
800.0k
1.0M
1.2M
0.0
数据处理流水线
，但是重试逻辑过于简单，没有被仔
，在任务失败时，之前所做的工作可
---
## Page 331
注3
续数据处理成为可能。Workflow使用领头人-追随者（工作进程）分布式系统设计模式（参
针对这些需求，Google在2003年开发了一个名为“Workflow”的系统，使得大规模持
少，预计需要多少额外资源，以及预计业务的延迟性需求。
的时候必须要注意以下几个细节：首先要规划出预期的增长轨迹，
可改变的最后期限之前完成。为了战胜这些挑战，在系统设计阶段提议一个数据流水线
团队面临着严峻的扩展性问题的时候经常还要增加新的功能，并且要求这些需求都在不
式上。不幸的是，业务需求常常在最不适合重构的时间出现。更新、更大的客户在开发
组要么考虑将原始设计重构以满足目前的需求，或者将业务迁移到一个持续性流水线模
当一个一次性批处理流水线由于业务需要而持续不断地需要更新结果时，流水线开发小
GoogleWorkflow简介
图25-3：在共享基础设施中的摩尔负载模式
JefDean的讲座“构建大型分布式系统的软件工程建议”是一个非常好的资源（参见文献[Dea07])。
applycount
200.0k
400.0k
600.0k
800.0k
1.0M
1.2M
0.0
W
GoogleWorkflow简介
、注3预计对设计更改多
289
<334
333
---
## Page 332
335
管理，回滚流水线的状态，甚至是在紧急时刻负责停止一切系统行为。图25-5描述了这
图25-4：用户界面设计中常见的MVC模式
相连的组件，来分隔内部信息、信息的展示和信息的输入部分。注6
MVC模式相同的一种模式。
根据流式系统的工作原理，