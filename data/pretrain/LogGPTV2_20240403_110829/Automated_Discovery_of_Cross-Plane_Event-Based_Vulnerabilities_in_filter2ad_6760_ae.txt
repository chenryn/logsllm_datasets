−−−−−−→
−−−−−−→ hostDetected() HOST ADDED
−−−−−−−−→
−−−−−−→ forward() DP OUT
−−−−−→ DPOut
DPIn DP IN−−−→ inPacket() API READ
hostDetected() HOST ADDED
applyFlowRules() DP OUT
−−−−−→ DPOut
−−−−−−→ provider.host.InternalHostProvider API WRITE
−−−−−−→
−−−−−−−−→ p4tutorial.InternalHostListener API WRITE
−−−−−−→
TABLE I: Event Listener Vulnerabilities Based on Event Flow Graph Analysis and Event Use Filtering (τ = 0.90).
CVE ID
App
Unhandled type
Example event ﬂow graph path showing potential data plane input to data plane
effect
10 CVE-2019-16302
11 CVE-2019-16302
evpnopenﬂow HOST MOVED
evpnopenﬂow HOST UPDATED
12 CVE-2019-16297
13 CVE-2019-16297
14 CVE-2019-16297
p4tutorial
p4tutorial
p4tutorial
HOST MOVED
HOST REMOVED
HOST UPDATED
∗ We note that we originally discovered CVE-2018-12691 manually, which led us to investigate event-based vulnerabilities and to create the EVENTSCOPE tool.
We include CVE-2018-12691 here for completeness.
In the analysis of acl, EVENTSCOPE produces an absent
context set, c−, that includes fwd. The absent context set
represents other event
listeners and packet processors that
might also respond to the same set of data plane input and
produce data plane effects. A practitioner would discover that
an app in the absent context set is producing undesirable effects
via ﬂow rule installation by fwd.
B. Data Plane Access Control Bypass with acl, mobility, and
fwd (CVE-2019-11189)
1) Summary: We found that an attacker could bypass the
data plane access control policies by spooﬁng another host
using ARP reply packets. Such a spurious location change can
allow the host mobility app, mobility, to remove acl’s ﬂow
deny rules. Since acl does not reinstall such ﬂow deny rules
after a location change, the attacker can subvert network policy
with increased access.
We assume a topology of at least three hosts: h1, h2, and
h3. The attacker controls h1 and h3 and desires access to h2.
Hosts h1 and h3 have different data plane connection points.
An access control policy prevents communication between h1
and h2 as well as between h3 and h2.
2) Method: The attack occurs in two stages.
First, the attacker host h1 attempts to connect to the target
host h2, but the connection is denied by acl’s ﬂow deny rules
that were created when the hosts were detected or when a
new access control policy was installed. The other attacker-
controlled host, h3, sends into the data plane an ARP reply that
spoofs the identity of host h1. The host provider determines
11
Fig. 8: Partial event ﬂow graph showing vulnerable code paths
used in CVE-2018-12691. Blue rectangles represent event
listeners and packet processors, gray ellipses represent API
methods, bold edges represent event dispatches, and dashed
edges represent API calls. (Dotted gray edges represent un-
handled event types, which are shown for reference.)
acl.implAclManagerInternalHostListenerFlowRuleServiceapplyFlowRules(…)Data Plane OutHostProviderServicehostDetected(…)HOSTREMOVEDHOSTMOVEDHOSTADDEDHOSTUPDATEDData Plane InPacketContextinPacket(…)provider.host.implHostLocationProviderInternalHostProviderfwdReactiveForwardingReactivePacketProcessorFlowObjectiveServiceforward(…)responds to the HOST MOVED event
type and removes
ﬂow rules. The access control app, acl, does not handle the
HOST MOVED event, and thus the app does not install new
ﬂow rules. The attack’s second stage succeeds as shown by
the path on the right side of the ﬁgure.
In the analysis of acl, EVENTSCOPE produces a present
context set, c+, that includes mobility. The present context set
indicates how the unhandled event type (i.e., HOST MOVED)
is handled by other event handlers of the same event kind
(i.e., the HostEvent event kind). A practitioner would deter-
mine that mobility uses ﬂow removal to produce undesirable
effects. The absent context set, c−, includes the forwarding
app, fwd. A practitioner would determine that fwd uses ﬂow
rule installation to produce undesirable effects.
C. Other Vulnerabilities
In Table I, we summarize the remaining vulnerabilities that
EVENTSCOPE discovered, grouped by app.
Vulnerabilities 3–5 (virtualbng): The virtual broadband
network gateway app, virtualbng, maintains a relationship
between a network’s set of private IP addresses and public-
facing IP addresses on the Internet [49]. The app also installs
network intents, which get translated to new ﬂow rules, to
allow the network’s hosts with private IP addresses to connect
to the Internet. The app’s host event
listener handles the
HOST ADDED event type but does not handle the remain-
ing three host event types. As a result, the app does not
handle any state updates about the virtual gateways it has
previously created if a host changes its information (e.g., new
location). A malicious host could spoof that host’s identity,
via a process similar to that described in Section VII-B2, to
cause HOST UPDATED or HOST MOVED event types to
be triggered. Furthermore, when a host is removed, the app
does not asynchronously remove its intents (or, by extension,
its ﬂow rules) that it previously installed because it does not
handle HOST REMOVED event types.
Vulnerabilities 6–8 (mobility): The host mobility app,
mobility, listens for host-related events and cleans up any
related ﬂow rules if a host has moved. Related work [20] has
shown how the host mobility app in ONOS can be abused
by hosts to force ONOS to reinstall ﬂow rules and cause a
control plane denial-of-service attack. Instead, we focus here
on the absence of what event types mobility handles. The
app’s host event listener handles the HOST MOVED event
type (as expected) but does not handle the remaining three
host event types. If mobility is expected by other apps to
be responsible for cleaning up ﬂow rules, then a host whose
information has been updated (where updating would trigger
a HOST UPDATED event type), would not cause a ﬂow
removal and might lead to stale ﬂow rules. If there is sufﬁcient
time between a moved host’s removal from and addition back
into the network, it may trigger a HOST REMOVED event
followed by a HOST ADDED event. As mobility does not
handle either event type, the expected ﬂow removal by mobility
would not occur.
Fig. 9: Partial event ﬂow graph showing vulnerable code paths
used in CVE-2019-11189. Blue rectangles represent event
listeners and packet processors, gray ellipses represent API
methods, bold edges represent event dispatches, and dashed
edges represent API calls. (Dotted gray edges represent un-
handled event types, which are shown for reference.)
that host h1 has “moved” to the same connection point as
host h3 and generates a HOST MOVED event type. On the
HOST MOVED event type, mobility performs a network-
wide cleanup that removes “old” ﬂow rules whose source or
destination MAC addresses match the respective host’s MAC
address. Thus, mobility removes acl’s ﬂow deny rules related
to host h2.
Next, the attacker host h1 attempts again to connect to the
target host h2, and that causes the host provider to assume
that host h1 has moved to its original
location and thus
triggers a HOST MOVED event type. Prior to patching the
vulnerability, acl did not check for the HOST MOVED event
type and took no action to reinstall the former ﬂow deny rules.
Another app, such as fwd, then installs ﬂow allow rules from
the attacker host h1 to the target host h2.
3) Results and implications: We wrote an exploit
that
performed the attack and were able to demonstrate that mes-
sages could be sent from the attacker to the target. Although
the attack assumed that the attacker controlled two hosts on
different connection points, an attacker who initially controls
only one host could use the previous exploit in Section VII-A
to compromise a second host so as to perform the attack in this
section. Much like the exploit in Section VII-A, the increased
access has signiﬁcant consequences if our assumptions about
the security of data plane access control are incorrect. For
instance, if hosts h1 and h2 were segmented and isolated by
policy (e.g., to satisfy regulatory compliance requirements),
then clever manipulation of host events can effectively bypass
such protections.
4) Event ﬂow graph: Figure 9 shows the partial event ﬂow
graph with the relevant code paths used by the attacker. The
attack’s ﬁrst stage follows the path through the host mobility
app, mobility, in the ﬁgure’s center. The host mobility app
Vulnerability 9 (vtn): The virtual
tenant network app,
vtn, provisions virtual networks as overlays over physical
networks [50]. The app handles all of the host event types
except for HOST MOVED. For the host event types that
12
acl.implAclManagerInternalHostListenerFlowRuleServiceapplyFlowRules(…)Data Plane OutHostProviderServicehostDetected(…)HOSTREMOVEDHOSTMOVEDHOSTADDEDHOSTUPDATEDmobilityHostMobilityInternalHostListenerHOSTREMOVEDHOSTMOVEDHOSTADDEDHOSTUPDATEDData Plane InPacketContextinPacket(…)provider.host.implHostLocationProviderInternalHostProviderfwdReactiveForwardingReactivePacketProcessorFlowObjectiveServiceforward(…)FlowRuleServiceremoveFlowRules(…)removes ﬂow rules for
the app installs ﬂow rules for added hosts
are handled,
(i.e., HOST ADDED),
removed
hosts (i.e., HOST REMOVED), and installs and removes
ﬂow rules for any host that has changed its properties but
not moved (i.e., HOST UPDATED). A host
that moves
(i.e., HOST MOVED) would not have any actions taken by
the app; as a result, ﬂow rules would not be reinstalled, and
denial of service could occur.
Vulnerabilities 10–11 (evpnopenﬂow): The Ethernet
VPN app, evpnopenﬂow, uses OpenFlow to install MPLS-
labeled overlay routes for virtual private networks [47]. The
listener handles the HOST ADDED and
app’s host event
HOST REMOVED event
types, which call functions that
are responsible for ﬁnding routable paths,
installing ﬂow
rules, and removing ﬂow rules. The app does not han-
dle hosts moving (i.e., HOST MOVED) or being updated
(i.e., HOST UPDATED), and that could cause denial of
service to such hosts if old ﬂow rules are not removed and
new ﬂow rules are installed.
Vulnerabilities 12–14 (p4tutorial): The P4 tutorial app,
p4tutorial, is a proof-of-concept app that demonstrates P4’s
programmable data plane capabilities. The app’s host event
listener handles the HOST ADDED event type only. Like
virtualbng, p4tutorial’s lack of handling of other host event
types leaves it susceptible to denial-of-service vulnerabilities
and failure to remove ﬂow rules.
VIII. DISCUSSION
A. SDN Design Concerns
1) App composability: We found that some apps, which we
term “helper apps,” were designed to perform functionality
on behalf of other apps currently running. One helper app,
mobility, removes ﬂow rules when hosts move within the
network. However, as we noted with respect to our exploit in
Section VII-B, if an app’s design does not account for helper
apps that are taking actions on its behalf, then the combination
of apps may introduce vulnerabilities that arise from a lack of
coordinated responsibility. That suggests a need for stronger
integration testing among apps; EVENTSCOPE is useful in
identifying the subsets of apps that may interact.
types,
2) Update semantics: We found that ONOS event kinds
often had representations in their event
types for updates
(i.e., * UPDATED, * CHANGED, or * MOVED). While
some apps handled the respective “addition” or “removal”
event
they did not handle the respective “updated”
event type (e.g., the odtn app for LINK UPDATED). Apps
that did handle update event
types often did so by ﬁrst
calling a removal method, followed by an addition method; for
instance, the vtn app handles HOST UPDATED by calling its
onHostVanished() and onHostDetected() methods
consecutively. The lack of uniform update event-type handling
across apps suggests that update handling is a useful place to
identify vulnerabilities.
3) Host migration: Although host migration hijacking is a
known problem [14], [22], [57], [26], we found that ONOS
v1.14.0 and earlier versions do not provide any protections
against the broader class of adversarial host-generated data
plane input. That suggests a strong cross-plane attack vector,
and EVENTSCOPE’s event ﬂow graph can show the extent to
which the control plane’s control ﬂow can be altered.
4) Event abstraction: While EVENTSCOPE’s discovered
vulnerabilities do relate to host movement, such vulnerabilities
differ from the host migration vulnerabilities discovered in
related work [14], [22], [57], [26]. Those previously known
vulnerabilities speciﬁcally use incoming data plane packets to
target the host migration service. In contrast, EVENTSCOPE’s
discovered vulnerabilities occur one abstraction layer higher:
the host migration service declares that a host has moved,
and other apps attempt to update their own states to account
for such movement. EVENTSCOPE’s discovered vulnerabili-
ties could occur as a result of benign host migration. For
example, the acl app relies on a host migration service event
(i.e., HostEvent) instead of relying directly on data plane
packets because the semantic notion of host migration is a
useful abstraction for other apps, too. We believe that future
apps will likely follow a similar trend of using abstracted
events. One of our goals is to make event propagation more
understandable for practitioners and developers. In that con-
text, we believe that EVENTSCOPE’s discovered vulnerabilities
are distinct from and complementary to the host migration
vulnerabilities found in related work.
5) Other controllers: Much like ONOS’s packet processor,
Floodlight’s [17] processing chains allow for speciﬁc execution
ordering. ONOS contains a more sophisticated, extensive, and
distributed event-driven architecture than Floodlight, and we
opted to evaluate the more sophisticated architecture. ONOS
also contains event processing that does not specify ordering,
which is the case for the majority of ONOS event kinds
(i.e., all non-packet events). Although the event ﬂow graph
captures the ordering of different events (e.g., a packet event
that subsequently triggers a host event), the graph does not
capture the processing order within an event (e.g., the packet
event goes to app X, then app Y).
B. Limitations
EVENTSCOPE cannot establish the absence of vulnera-
bilities. NICE [11] shows that a large state space search is
needed to reason about the absence of vulnerabilities, but
such state does not scale beyond simple apps and controllers.
EVENTSCOPE lets developers and practitioners understand
complex app interactions using a scalable approach.
To help practitioners identify unsafe operating conditions,
EVENTSCOPE can generate contexts under which certain
combinations of apps may manifest a vulnerability; however,
EVENTSCOPE does not generate exploits. Automated exploit
generation [3] is an ongoing research area, and we consider
automated SDN exploit generation to be future work.
We believe that the event ﬂow graph data structure has
applicability beyond the identiﬁcation of missing event vul-
nerabilities. For instance, concurrent event processing can be
represented in an event ﬂow graph by two paths with the same
start and end nodes. Such path structures may indicate race
conditions, and the event ﬂow graph could be well-suited to
identifying where these occur. However, we believe that that,
and other possible applications, are complex research questions
in their own right, and we leave them as future work.
13
IX. RELATED WORK
SDN security: Cross-plane attacks have been studied in
speciﬁc contexts. Yoon et al. [70] refer to these attacks as
control plane remote attacks for network-view manipulation.
SPHINX [14], TOPOGUARD [22], TOPOGUARD+ [57], and