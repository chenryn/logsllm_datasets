ment frames and dropping invalid requests. How-
ever, the standardization of such capabilities is still
some ways oﬀ and it is clear that legacy MAC de-
signs do not have suﬃcient CPU capacity to im-
plement this functionality as a software upgrade.
Therefore, system-level defenses with low-overhead
can still oﬀer signiﬁcant value.
In particular, by
delaying the eﬀects of deauthentication or disasso-
ciation requests (e.g., by queuing such requests for
5-10 seconds) an AP has the opportunity to observe
subsequent packets from the client. If a data packet
arrives after a deauthentication or disassociation re-
USENIX Association
12th USENIX Security Symposium 
21
Attacker
WinXP
Linux Thinkpad
Linux iPaq
MacOS X
s
t
e
k
c
a
p
800
700
600
500
400
300
200
100
0
1
9
17 25 33 41 49 57 65 73 81 89 97 105 113 121 129 137 145 153
time (s)
Figure 5: Packets sent by each of the 4 client nodes during the deauthentication attack. The ﬁrst attack,
against the MacOS client, started at second 15 and lasted 8 seconds. The second attack against all the clients
started at 101 and lasted for 26 seconds. The attacking node consumes a negligible amount of bandwidth
due to the rate limiting.
quest is queued, that request is discarded – since a le-
gitimate client would never generate packets in that
order. The same approach can be used in reverse
to mitigate forged deauthentication packets sent to
the client on behalf of the AP. This approach has
the advantage that it can be implemented with a
simple ﬁrmware modiﬁcation to existing NICs and
access points, without requiring a new management
structure.
To test this defense we modiﬁed the access point
used in our experiments as described above, using a
timeout value of 10 seconds for each management
request. We then executed the previous experiment
again using the “hardened” access point. The equiv-
alent results can be seen in Figure 6. From this
graph it is diﬃcult to tell that the attack is active,
and the client nodes continue their activity oblivious
to the misdirection being sent to the access point.
However, our proposed solution is not without
drawbacks. In particular, it opens up a new vulner-
ability at the moment in which mobile clients roam
between access points. The association message is
used to determine which AP should receive packets
destined for the mobile client.
In certain circum-
stances leaving the old association established for
an additional period of time may prevent the rout-
ing updates necessary to deliver packets through the
new access point. Or, in the case of an adversary, the
association could be kept open indeﬁnitely by spoof-
ing packets from the mobile client to the spoofed AP
– keeping the association current. While both these
situations are possible, we will argue that they are
unlikely to represent a new threat in practice.
There are two main infrastructure conﬁgura-
tions that support roaming. For lack of a better
name we refer to these as “intelligent” and “dumb”.
In the “intelligent” conﬁguration the access points
have an explicit means of coordination. This coordi-
nation can be used to, among other things, update
routes for and transfer buﬀered packets between ac-
cess points when a mobile node changes associations.
Since there is not currently a standard for this co-
ordination function, AP’s oﬀering such capabilities
typically use proprietary protocols that work only
between homogenous devices.
In contrast “dumb”
access points have no explicit means of coordination
and instead rely on the underlying layer-two distri-
bution network (typically Ethernet) to reroute pack-
ets as a mobile client’s MAC address appears at a
new AP (and hence a new Ethernet switch port).
Intelligent infrastructures, due to their preexist-
ing coordination, are easily modiﬁed to avoid the
aforementioned problems caused by the deassocia-
tion timeout. Since the mobile node must associate
with the new access point before it can transmit
data, and since the access points are coordinated
(either directly or through a third party), the old
access point can be informed when the mobile node
makes a new association. Based on this informa-
tion the old access point can immediately honor the
clients deauthentication request. While an attacker
can spoof packets from the mobile host to create
22
12th USENIX Security Symposium 
USENIX Association
Attacker
WinXP
Linux Thinkpad
Linux iPaq
MacOS X
s
t
e
k
c
a
p
700
600
500
400
300
200
100
0
1
4
7
10 13 16 19 22 25 28 31 34 37 40 43 46
time (s)
Figure 6: Packets sent by each of the 4 client nodes during the deauthentication attack with an access point
modiﬁed to defend against this attack. The ﬁrst attack, against the MacOS client, started at second 10 and
lasted 12 seconds. The second attack against all the clients started at 30 and lasted through the end of the
trace. The attacking node consumes a negligible amount of bandwidth due to the rate limiting.
confusion, this vulnerability exists without the ad-
dition of the deferred deassociation mechanisms we
have described.
Dumb infrastructures are slightly more problem-
atic because of their lack of coordination and reliance
on the underlying network topology. If that under-
lying topology is a broadcast medium, which is a
rarity these days, there is no problem because all
packets are already delivered to all access points. If
the underlying topology is switched, then a proto-
col is used (typically a spanning tree distribution
protocol) to distribute which MAC addresses are
served by which ports. Existing switches already
gracefully support moving a MAC address from one
port to another, but have problems when one MAC
address is present across multiple ports. In the non-
adversarial case the mobile node will switch access
points, proceed to send data using the new access
point, and cease sending data through the old access
point. From the switches perspective this is equiv-
alent to a MAC switching ports. The mobile node
may not receive data packets until it has sent one –
allowing the switch to learn its new port – but that
limitation applies regardless of the deauthentication
timeout. In the adversarial case the attacking node
could generate spoofed traﬃc designed to confuse
the switch. However, this does not represent a sig-
niﬁcant new vulnerability – even without the delay
on deauthentication/disassociation an attacker can
spoof a packet from an mobile client in order to cre-
ate this conﬂict (including a WEP protected packet
after key recovery).
4.3 Virtual carrier-sense attack
Motivated by the success of the previous attack,
we built an implementation exploiting the NAV vul-
nerability. We generated a variety of packet streams
with a range of large duration values – including con-
tinuous runs of RTS frames, CTS frames, and ACK
frames destined for APs, hosts and unallocated ad-
dresses. We veriﬁed that packets were being sent as
expected using a separate machine to monitor the
channel being targeted. To our surprise, while our
implementation carried out the attacks faithfully,
they did not have the expected impact. We repeated
these experiments using both Lucent WavePoint II
and Apple Airport Extreme access points and with a
variety of host NIC cards, all with the same results.
After careful examination of traces collected during
these attacks we have come to the conclusion that
most of the devices available to us do not properly
implement the 802.11 MAC speciﬁcation and are im-
properly resetting their NAV. In particular, we have
witnessed APs and NICs alike emit packets within
a millisecond after the broadcast of a CTS frame
with a duration of 32767. Figure 7 shows a trace
excerpt illustrating this behavior – the initial CTS
frame should keep the channel idle for 32ms, and
yet after scarcely a millisecond has passed the chan-
nel is in use by another host. Such activity should
be impossible under the 802.11 standard since nodes
USENIX Association
12th USENIX Security Symposium 
23
Time
Src
Dest
1.294020
1.295192
1.296540
1.297869
1.299084
1.300275
1.300439
1.302538
1.306110
1.309543
1.309810
1.312237
1.313452
.10.2
.1.2
.1.2
.10.2
.1.2
:00:15:01
.1.2
:ea:e7:0f
.10.2
:ea:e7:0f
.10.2
:ea:e7:0f
:00:15:01
:00:15:01
.1.2
:ea:e7:0f
.10.2
:ea:e7:0f
Duration Type
(ms)
32767
258
0
258
0
258
0
32767
32767
258
0
258
0
802.11 CTS
TCP Data
802.11 Ack
TCP Data
802.11 Ack
TCP Data
802.11 Ack
802.11 CTS
802.11 CTS
TCP Ack
802.11 Ack
TCP Data
802.11 Ack
Figure 7: Excerpt from a typical virtual carrer-sense
attack trace using CTS frames. The addresses have
been shortened for brevity. MAC address :ea:e7:0f
is the access point, and :00:15:01 is an unallocated
MAC address. .1.2 is the uploading client, and .10.2
is the receiving machine. The ﬁrst TCP data frame
is sent 1.1 ms after a CTS that reserved the medium
for > 32 ms. In the second CTS sequence the data
frame is sent after 3.4 ms.
receiving the CTS cannot assume that they will be
able to sense the carrier (or even signiﬁcant radio
energy) since the transmitter may be a hidden ter-
minal. We have not conducted a thorough survey of
802.11 gear, so these deﬁciencies may be unique to
the hardware in our environment. However, given
the prevalence of the Choice design we would not be
surprised if this bug is prevalent.
Under the assumption that these bugs will be
removed in future 802.11 products (since they eﬀec-
tively prevent RTS/CTS from working as well as the
802.11 Point Coordinator Function and all related
Quality-of-Service services based on 802.11) the re-
mainder of this section explores the NAV vulnerabil-
ity in the context of the popular ns simulator (which
implements the protocol faithfully).
We implemented the virtual carrier-sense attack
by modifying the ns [NS] 802.11 MAC layer imple-
mentation to allow arbitrary duration values to be
sent periodically, 30 times a second, by the attacker.
The attacker’s frames were sent using the normal
802.11 access timing restrictions, which was neces-
sary to prevent the attacker from excessively collid-
ing with other in-ﬂight frames (and thereby increase
the amount of work required of the attacker).
In
addition the attacker was modiﬁed to ignore all du-
ration values transmitted from any other node. The
network topology was chosen to mimic many existing
802.11 infrastructure deployments: a single access
point node, through who all traﬃc was being sent,
18 static client nodes and 1 static attacker node, all
within radio distance of the access point. As with
the previous experiments, ftp was used to generate
the long-lived network traﬃc. We simulated attacks
using ACK frames with large duration values, as well
as the RTS/CTS sequence described earlier. Figure
8 shows the ACK ﬂavor of the virtual carrier-sense
attack in action, but both provided similar results:
the channel is completely blocked for the duration
of the attack.
The virtual carrier-sense attack is much harder
to defend against in practice than the deauthentica-
tion attack.
One approach to mitigate its eﬀects is to place a
limit on the duration values accepted by nodes. Any
packet containing a larger duration value is simply
truncated to the maximum value allowable. Strict
adherence to the required use of the NAV feature
indicates two diﬀerent limits: a low cap and a high
cap. The low cap has a value equal to the amount
of time required to send an ACK frame, plus media
access backoﬀs for that frame. The low cap is usable
when the only packet that can follow the observed
packet is an ACK or CTS. This includes RTS and
all management (association, etc) frames. The high
cap, on the other hand, is used when it is valid for a
data packet to follow the observed frame. The limit
in this case needs to include the time required to
send the largest data frame, plus the media access
backoﬀs for that frame. The high cap must be used