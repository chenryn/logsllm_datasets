### Frame Management and Invalid Request Handling

While the standardization of capabilities for managing frames and dropping invalid requests is still in progress, it is evident that legacy MAC designs lack the necessary CPU capacity to implement these functionalities as a software upgrade. Therefore, system-level defenses with low overhead can offer significant value.

One such defense involves delaying the effects of deauthentication or disassociation requests (e.g., by queuing such requests for 5-10 seconds). This allows the Access Point (AP) to observe subsequent packets from the client. If a data packet arrives after a deauthentication or disassociation request is queued, the request is discarded, as a legitimate client would not generate packets in that order. This approach can also be used to mitigate forged deauthentication packets sent to the client on behalf of the AP. The advantage of this method is that it can be implemented with a simple firmware modification to existing Network Interface Cards (NICs) and access points, without requiring a new management structure.

### Testing the Defense

To test this defense, we modified the access point used in our experiments to use a timeout value of 10 seconds for each management request. We then repeated the previous experiment using the "hardened" access point. The results are shown in Figure 6. From this graph, it is difficult to tell that the attack is active, and the client nodes continue their activity, oblivious to the misdirection being sent to the access point.

However, this solution is not without drawbacks. It opens up a new vulnerability when mobile clients roam between access points. The association message is used to determine which AP should receive packets destined for the mobile client. In certain circumstances, leaving the old association established for an additional period of time may prevent the routing updates necessary to deliver packets through the new access point. An adversary could also keep the association open indefinitely by spoofing packets from the mobile client to the spoofed AP, maintaining the current association. While these situations are possible, they are unlikely to represent a new threat in practice.

### Roaming Configurations

There are two main infrastructure configurations that support roaming: "intelligent" and "dumb."

- **Intelligent Configuration**: In this setup, access points have an explicit means of coordination. This coordination can be used to update routes and transfer buffered packets between access points when a mobile node changes associations. Since there is no current standard for this coordination function, APs offering such capabilities typically use proprietary protocols that work only between homogenous devices.
  
- **Dumb Configuration**: In contrast, "dumb" access points have no explicit means of coordination and rely on the underlying layer-two distribution network (typically Ethernet) to reroute packets as a mobile client's MAC address appears at a new AP (and hence a new Ethernet switch port).

**Intelligent Infrastructures**: Due to their preexisting coordination, intelligent infrastructures can easily be modified to avoid the problems caused by the deassociation timeout. The old access point can be informed when the mobile node makes a new association and can immediately honor the client's deauthentication request. While an attacker can spoof packets from the mobile host to create confusion, this vulnerability exists even without the addition of the deferred deassociation mechanisms.

**Dumb Infrastructures**: Dumb infrastructures are more problematic due to their lack of coordination and reliance on the underlying network topology. If the underlying topology is a broadcast medium, all packets are already delivered to all access points. If the topology is switched, a protocol (typically a spanning tree distribution protocol) is used to distribute which MAC addresses are served by which ports. Existing switches already support moving a MAC address from one port to another but have issues when one MAC address is present across multiple ports. In the non-adversarial case, the mobile node will switch access points, proceed to send data using the new access point, and cease sending data through the old access point. In the adversarial case, the attacking node could generate spoofed traffic designed to confuse the switch. However, this does not represent a significant new vulnerability, as an attacker can spoof a packet from a mobile client even without the delay on deauthentication.

### Virtual Carrier-Sense Attack

Motivated by the success of the previous attack, we built an implementation exploiting the Network Allocation Vector (NAV) vulnerability. We generated various packet streams with large duration values, including continuous runs of Request to Send (RTS), Clear to Send (CTS), and Acknowledgment (ACK) frames. To our surprise, while our implementation carried out the attacks faithfully, they did not have the expected impact. We repeated these experiments using both Lucent WavePoint II and Apple Airport Extreme access points and various host NIC cards, all with the same results.

After careful examination of traces collected during these attacks, we concluded that most of the devices available to us do not properly implement the 802.11 MAC specification and are improperly resetting their NAV. For example, we observed APs and NICs emitting packets within a millisecond after the broadcast of a CTS frame with a duration of 32767. Figure 7 illustrates this behavior, where the initial CTS frame should keep the channel idle for 32ms, yet after scarcely a millisecond, the channel is in use by another host. Such activity should be impossible under the 802.11 standard, as nodes receiving the CTS cannot assume they will be able to sense the carrier (or even significant radio energy) since the transmitter may be a hidden terminal.

Assuming these bugs will be removed in future 802.11 products, the remainder of this section explores the NAV vulnerability in the context of the popular ns simulator, which implements the protocol faithfully.

We implemented the virtual carrier-sense attack by modifying the ns 802.11 MAC layer implementation to allow arbitrary duration values to be sent periodically, 30 times a second, by the attacker. The attacker's frames were sent using the normal 802.11 access timing restrictions to prevent excessive collisions with other in-flight frames. Additionally, the attacker was modified to ignore all duration values transmitted from any other node. The network topology mimicked many existing 802.11 infrastructure deployments, with a single access point node, 18 static client nodes, and 1 static attacker node, all within radio distance of the access point. FTP was used to generate long-lived network traffic. We simulated attacks using ACK frames with large duration values and the RTS/CTS sequence. Both provided similar results: the channel was completely blocked for the duration of the attack.

The virtual carrier-sense attack is much harder to defend against in practice than the deauthentication attack. One approach to mitigate its effects is to place a limit on the duration values accepted by nodes. Any packet containing a larger duration value is truncated to the maximum allowable value. Strict adherence to the required use of the NAV feature indicates two different limits: a low cap and a high cap. The low cap has a value equal to the time required to send an ACK frame, plus media access backoffs for that frame. The low cap is usable when the only packet that can follow the observed packet is an ACK or CTS. The high cap, on the other hand, is used when it is valid for a data packet to follow the observed frame. The limit in this case needs to include the time required to send the largest data frame, plus the media access backoffs for that frame. The high cap must be used when the following packet can be a data frame.