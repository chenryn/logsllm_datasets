### Fork Server 主要逻辑优化

在fork server中，当子进程创建完成后，将执行以下操作：

```assembly
call close
pushl $FORKSRV_FD + 1
call close
addl $8, %esp
popl %edx
popl %ecx
popl %eax
jmp __afl_store
```

父进程则继续作为fork server运行。它会通过状态管道将子进程的PID发送给fuzzer，并等待子进程完成。一旦子进程结束，父进程会将其退出状态通过状态管道再次发送给fuzzer，然后进入等待循环`__afl_fork_wait_loop`。

```assembly
/* 在父进程中: 将PID写入管道，然后等待子进程 */
movl %eax, __afl_fork_pid
pushl $4 /* 长度 */
pushl $__afl_fork_pid /* 数据 */
pushl $FORKSRV_FD + 1 /* 文件描述符 */
call write
addl $12, %esp

pushl $0 /* 无标志 */
pushl $__afl_temp /* 状态 */
pushl __afl_fork_pid /* PID */
call waitpid
addl $12, %esp

cmpl $0, %eax
jle __afl_die

/* 通过管道传递等待状态，然后循环回退 */
pushl $4 /* 长度 */
pushl $__afl_temp /* 数据 */
pushl $FORKSRV_FD + 1 /* 文件描述符 */
call write
addl $12, %esp

jmp __afl_fork_wait_loop
```

### Fuzzer 与 Fork Server 交互

在fork server启动后，每当需要执行一个测试用例时，fuzzer调用`run_target()`方法。在此方法中，fuzzer通过命令管道通知fork server准备创建新进程，并通过状态管道获取子进程的PID。

```c
s32 res;
if ((res = write(fsrv_ctl_fd, &prev_timed_out, 4)) != 4) {
    // 处理错误
}
if ((res = read(fsrv_st_fd, &child_pid, 4)) != 4) {
    // 处理错误
}
```

随后，fuzzer再次读取状态管道以获取子进程的退出状态，并根据该状态判断子进程是正常退出、超时还是崩溃等，从而进行相应的记录。

```c
if ((res = read(fsrv_st_fd, &status, 4)) != 4) {
    // 处理错误
}

/* 向调用者报告结果 */
if (WIFSIGNALED(status) && !stop_soon) {
    kill_signal = WTERMSIG(status);
    if (child_timed_out && kill_signal == SIGKILL) return FAULT_TMOUT;
    return FAULT_CRASH;
}
```

### 共享内存机制

AFL使用共享内存来在fuzzer和target之间传递分支信息。具体步骤如下：

1. **分配共享内存**：fuzzer在启动时调用`setup_shm()`方法，首先通过`shmget()`分配一块大小为64KB的共享内存。
    ```c
    shm_id = shmget(IPC_PRIVATE, MAP_SIZE, IPC_CREAT | IPC_EXCL | 0600);
    ```

2. **设置环境变量**：分配成功后，将共享内存的标识符设置到环境变量中，以便后续通过fork()得到的子进程可以访问这块共享内存。
    ```c
    shm_str = alloc_printf("%d", shm_id);
    if (!dumb_mode) setenv(SHM_ENV_VAR, shm_str, 1);
    ```

3. **映射共享内存**：fuzzer使用`shmat()`将共享内存映射到自己的地址空间，并保存其地址。
    ```c
    trace_bits = shmat(shm_id, NULL, 0);
    ```

4. **初始化共享内存**：每次target执行前，fuzzer将共享内存内容清零。
    ```c
    memset(trace_bits, 0, MAP_SIZE);
    ```

### Target 获取并使用共享内存

在target端，代码会检查是否已经映射了共享内存。如果没有映射，则跳转到`__afl_setup`进行映射。

```assembly
/* 检查SHM区域是否已经映射 */
movl __afl_area_ptr, %edx
testl %edx, %edx
je __afl_setup
```

在`__afl_setup`中，首先进行错误检查，然后从环境变量`AFL_SHM_ENV`中获取共享内存标识符，并将其转换为整数。最后，通过`shmat()`将共享内存映射到target的地址空间，并保存其地址。

```assembly
__afl_setup:
cmpb $0, __afl_setup_failure
jne __afl_return

/* 映射SHM */
pushl %eax
pushl %ecx
pushl $.AFL_SHM_ENV
call getenv
addl $4, %esp
testl %eax, %eax
je __afl_setup_abort

pushl %eax
call atoi
addl $4, %esp

pushl $0 /* shmat flags */
pushl $0 /* 请求的地址 */
pushl %eax /* SHM ID */
call shmat
addl $12, %esp

cmpl $-1, %eax
je __afl_setup_abort

/* 存储SHM区域的地址 */
movl %eax, __afl_area_ptr
movl %eax, %edx

popl %ecx
popl %eax
```

如果使用了fork server模式，上述获取共享内存的操作将在fork server中进行。随后，通过fork创建的子进程可以直接使用这块共享内存。

### 分支信息记录

现在，用于通信的共享内存已准备完毕，接下来我们看看具体通信的内容。