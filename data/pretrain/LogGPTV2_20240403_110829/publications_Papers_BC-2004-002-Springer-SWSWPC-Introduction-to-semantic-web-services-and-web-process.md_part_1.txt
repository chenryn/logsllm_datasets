Cardoso, J. and Amit P. Sheth, "Introduction to Semantic Web Services and Web Process Composition", Semantic Web Process:
powering next generation of processes with Semantics and Web services, LNCS, Springer-Verlag Heidelberg, Vol. 3387, pp.1-
13, 2005. ISBN: 3-540-24328-3.
Introduction to Semantic Web Services and Web
Process Composition
Jorge Cardoso1 and Amit Sheth2
1 Departement of Mathematics and Engineering,
University of Madeira, Funchal, Portugal
PI:EMAIL
2 Large Scale Distributed Information Systems (LSDIS) Lab,
Department of Computer Science,
University of Georgia, GA, USA
PI:EMAIL
Abstract. Systems and infrastructures are currently being developed to support
Web services. The main idea is to encapsulate an organization’s functionality
within an appropriate interface and advertise it as Web services. While in some
cases Web services may be utilized in an isolated form, it is normal to expect
Web services to be integrated as part of Web processes. There is a growing con-
sensus that Web services alone will not be sufficient to develop valuable Web
processes due the degree of heterogeneity, autonomy, and distribution of the
Web. Several researchers agree that it is essential for Web services to be ma-
chine understandable in order to support all the phases of the lifecycle of Web
processes. This paper deals with two of the hottest R&D and technology areas
currently associated with the Web — Web services and the Semantic Web. It
presents how applying semantics to each of the steps in the Semantic Web
Process lifecycle can help address critical issues in reuse, integration and scal-
ability.
1 Introduction
E-commerce and e-services have been growing at a very fast pace. The Web coupled
with e-commerce and e-services is enabling a new networked economy [1]. The scope
of activities that processes span has moved from intra-enterprise workflows, prede-
fined inter-enterprise and business-to-business processes, to dynamically defined Web
processes among cooperating organizations.
There is a remarkable range for growth in trade through electronic interactions,
simply because it can eliminate geographical distances in bringing buyers and sellers
together. With the Internet dissemination and the e-commerce growth there is a shift
from the traditional off-line distribution process based on organization’s catalogs to
on-line services. A shift that is marked by isolated initiatives guided by the business-
to-customer and business-to-business promise of increased profit margins and reduced
commission values. This leads us to the present situation where we can find diverse
and numerous groups of on-line systems, most of them focused in one or in a few
types of products. Therefore, organizations are increasingly faced with the challenge
of managing e-business systems and e-commerce applications managing Web ser-
vices, Web processes, and semantics. Web services promise universal interoperability
and integration. The key to achieving this relies on the efficiency of discovering ap-
propriate Web services and composing them to build complex processes. We will start
this section by explaining what semantics are and their role and relationships with
ontologies. We then explain the purpose of each of the Web process lifecycle phases.
2 Semantic Web Process Lifecycle
Semantic Web services will allow the semi-automatic and automatic annotation, ad-
vertisement, discovery, selection, composition, and execution of inter-organization
business logic, making the Internet become a global common platform where organi-
zations and individuals communicate among each other to carry out various commer-
cial activities and to provide value-added services.
In order to fully harness the power of Web services, their functionality must be
combined to create Web processes. Web processes allow representing complex inter-
actions among organizations, representing the evolution of workflow technology.
Semantics can play an important role in all stages of Web process lifecycle. The main
stages of the Web process lifecycle are illustrated in Figure 1.
Fig. 1. Web process lifecycle and semantics.
The lifecycle of semantic Web processes includes the description/annotation, the
advertisement, the discovery, the selection, the composition of Web services that
makeup Web processes, and the execution of Web processes. All these stages are
significant for the Web process lifecycle and their success.
2.1 Semantics and Ontologies
There is a growing consensus that Web services alone will not be sufficient to develop
valuable and sophisticated Web processes due the degree of heterogeneity, autonomy,
and distribution of the Web. Several researchers agree that it is essential for Web
services to be machine understandable in order to allow the full deployment of effi-
cient solutions supporting all the phases of the lifecycle of Web processes.
The idea and vision of the “Semantic Web” [2] catches on and researchers as well
as companies have already realized the benefits of this great vision. Ontologies [3] are
considered the basic building block of the Semantic Web as they allow machine sup-
ported data interpretation reducing human involvement in data and process integra-
tion.
An ontology “is a formal, explicit specification of a shared conceptualization. Con-
ceptualization refers to an abstract model of phenomena in the world by having identi-
fied the relevant concepts of those phenomena. Explicit means that the type of con-
cepts used, and the constraints on their use are explicitly defined. Formal refers to the
fact that the ontology should be machine readable. Shared reflects that ontology
should capture consensual knowledge accepted by the communities” [4].
When the knowledge about a domain is represented in a declarative language, the
set of objects that can be represented is called the universe of discourse. We can de-
scribe the ontology of a program by defining a set of representational terms. Defini-
tions associate the names of entities in the universe of discourse (e.g. classes, rela-
tions, functions or other objects) with human-readable text describing what the names
mean and formal axioms that constrain the interpretation and well-formed use of these
terms.
A set of Web services that share the same ontology will be able to communicate
about a domain of discourse. We say that a Web service commits to an ontology if its
observable actions are consistent with the definitions in the ontology.
Example: Benefits of ontologies for the travel industry. The Web has permanently
changed the manner travel packages can be created. Consumers can now acquire
packages from a diversity of Web sites including online agencies and airlines. With
the spread of Web travel, a new technology has surfaced for the leisure travel industry:
dynamic packaging. For the development of dynamic packaging solutions it is
necessary to look in detailed at the technology components needed to enhance the
online vacation planning experience. By transitioning from a third-party service in
most markets, dynamic packaging engines can better tailor its package offerings,
pricing and merchandising to consumer demand.
Currently, the travel industry has concentrated their efforts on developing open
specifications messages, based on eXtensible Markup Language (XML), to ensure that
messages can flow between industry segments as easily as within. For example, the
OpenTravel Alliance (OTA) [5] is an organization pioneering the development and
use of specifications that support e-business among all segments of the travel industry.
The cumulative effort of various teams, individuals, associations, companies, and
international organizations, including air, car, cruise, rail, hotel, travel agencies, tour
operators and technology providers, has produced a fairly complete set of XML-based
specifications for the travel industry (more than 140 XML specification files exist).
The current development of open specifications messages based on XML, such as
the OTA schema, to ensure the interoperability between trading partners and working
groups is not sufficiently expressive to guaranty an automatic exchange and process-
ing of information. The development of a suitable ontology for the tourism industry is
indispensable and will serve as a common language for travel-related terminology and
a mechanism for promoting the seamless exchange of information across all travel
industry segments.
The development of such an ontology can be used to bring together autonomous
and heterogeneous Web services, Web processes, applications, data, and components
residing in distributed environments. Semantics allow rich descriptions of Web ser-
vices and Web processes that can be used by computers for automatic processing in
various tourism related applications. The deployment of ontologies help articulate a
well-defined set of common data elements or vocabulary that can support communica-
tion across multiple channels, expedite the flow of information, and meet travel indus-
try and customer needs.
For the travel industry, the simplest form to construct an ontology is to retrieve rich
semantic interrelationships from the data and terminology present in the XML-based
OTA specifications already implemented [5] and available to organizations. This
procedure is illustrated in Figure 2.
SScchheemmaa --OOTTAA 22000044AA
11 OOTTAA__AAiirrAAvvaaiillRRQQ..xxssdd
22 OOTTAA__AAiirrAAvvaaiillRRSS..xxssdd Travel Ontology
33 OOTTAA__AAiirrBBooookkRRQQ..xxssdd Schema
44 OOTTAA__AAiirrBBooookkRRSS..xxssdd Integration Travel Industry
Using
55 OOTTAA__AAiirrCCoommmmoonnTTyyppeess..xxssdd
Ontologies
66 OOTTAA__AAiirrDDeettaaiillssRRQQ..xxssdd
77 OOTTAA__AAiirrDDeettaaiillssRRSS..xxssdd
...... ........
114444 OOTTAA__VVeehhMMooddiiffyyRRSS..xxssdd
114455 OOTTAA__VVeehhRReessRRQQ..xxssdd
114466 OOTTAA__VVeehhRReessRRSS..xxssdd
114477 OOTTAA__VVeehhRReettRReessRRQQ..xxssdd Web OntologyLanguage(OWL)
114488 OOTTAA__VVeehhRReettRReessRRSS..xxssdd
Fig. 2. Ontology for the travel industry.
One possible language to construct such an ontology is using the Web Ontology
Language (OWL) [6] designed by the World Wide Web Consortium (W3C). The
OWL is designed for use by applications that need to process the content of informa-
tion instead of just presenting information to humans. OWL facilitates greater machine
interpretability of Web content by providing additional vocabulary along with a for-
mal semantics. It can be used to explicitly represent the meaning of terms in vocabu-
laries and the relationships between those terms.
OWL is appropriate to develop an ontology for the travel industry since it is in-
tended to be used when the information used by Web services needs to be processed
by applications, as opposed to situations where the content only needs to be presented
to humans.
The development of such an ontology lead to the spearhead and foster the cross-
industry consensus needed to establish and maintain the most effective and widely
used specifications designed to electronically exchange business data and information
among all sectors of the travel industry.
This effort represents what can be achieved by the symbiotic synthesis of two of the
hottest R&D and technology application areas: Web services and the semantic Web,
as recognized at the Thirteenth International World Wide Conference (2004) and in
the industry press. The intelligent combination of Web services and the semantic Web
can start off a technological revolution with the development of semantic Web proc-
esses [7]. These technological advances can ultimately lead to a new breed of Web-
based applications for the travel industry.
2.2 Semantics for Web Services
In Web services domain, semantics can be classified into the following types [8] illus-
trated in Figure 1:
• Functional Semantics
• Data Semantics
• QoS Semantics and
• Execution Semantics
These different types of semantics can be used to represent the capabilities, re-
quirements, effects and execution of a Web service. In this section we describe the
nature of Web services and the need for different kind of semantics for them.
Functional Semantics. The power of Web services can be realized only when appro-
priate services are discovered based on the functional requirements. It has been as-
sumed in several semantic Web service discovery algorithms [9] that the functionality
of the services is characterized by their inputs and outputs. Hence these algorithms
look for semantic matching between inputs and outputs of the services and the inputs
and outputs of the requirements. This kind of semantic matching may not always re-
trieve an appropriate set of services that satisfy functional requirements. Though se-
mantic matching of inputs and outputs are required, they are not sufficient for discov-
ering relevant services. For example, two services can have the same input/output
signature even if they perform entirely different functions. A simple mathematical
service that performs addition of two numbers taking the numbers as input and pro-
duce the sum as output will have the same semantic signature as that of another ser-
vice that performs subtraction of two numbers that are provided as input and gives out
their difference value as output. Hence matching the semantics of the service signature
may result in high recall and low precision. As a step towards representing the func-
tionality of the service for better discovery and selection, the Web services can be
annotated with functional semantics. It can be done by having an ontology called
Functional Ontology in which each concept/class represents a well-defined functional-
ity. The intended functionality of each service can be represented as annotations using
this ontology.
Data Semantics. All the Web services take a set of inputs and produce a set of out-
puts. These are represented in the signature of the operations in a specification file.
However the signature of an operation provides only the syntactic and structural de-
tails of the input/output data. These details (like data types, schema of a XML com-
plex type) are used for service invocation. To effectively perform discovery of ser-
vices, semantics of the input/output data has to be taken into account. Hence, if the
data involved in Web service operation is annotated using an ontology, then the added
data semantics can be used in matching the semantics of the input/output data of the
Web service with the semantics of the input/output data of the requirements. Semantic
discovery algorithm proposed in [9] uses the semantics of the operational data.
QoS Semantics: After discovering Web services whose semantics match the seman-
tics of the requirements, the next step is to select the most suitable service. Each ser-
vice can have different quality aspect and hence service selection involves locating the
service that provides the best quality criteria match. Service selection is also an impor-
tant activity in web service composition [10]. This demands management of QoS
metrics for Web services. Web services in different domains can have different quality
aspects. For organizations, being able to characterize Web processes based on QoS
has several advantages: a) it allows organizations to translate their vision into their
business processes more efficiently, since Web processes can be designed according
to QoS metrics, b) it allows for the selection and execution of Web processes based on
their QoS, to better fulfill customer expectations, c) it makes possible the monitoring
of Web processes based on QoS, and d) it allows for the evaluation of alternative
strategies when Web process adaptation becomes necessary.
Execution Semantics. Execution semantics of a Web service encompasses the ideas
of message sequence, conversation pattern of Web service execution, flow of actions,
preconditions and effects of Web service invocation, etc. Some of these details may
not be meant for sharing and some may be, depending on the organization and the
application that is exposed as a Web service. In any case, the execution semantics of
these services are not the same for all services and hence before executing or invoking
a service, the execution semantics or requirements of the service should be verified.
Some of the issues and solutions with regard to execution semantics are inherited
from traditional workflow technologies. However, the globalization of Web services
and processes result in additional issues. In e-commerce, using execution semantics
can help in dynamically finding partners that will match not only the functional re-
quirements, but also the operational requirements like long running interactions and
complex conversations. Also, a proper model for execution semantics will help in
coordinating activities in transactions that involve multiple parties.
3 Phases of the Web Process Lifecycle
As stated previously, the lifecycle of semantic Web processes includes the descrip-
tion/annotation, the advertisement, the discovery, and the selection of Web services,
the composition of Web services that makeup Web processes, and the execution of
Web processes. In this section, we discuss the characteristics of each of these stages.
3.1 Semantic Web Service Annotation
Today, Web service specifications are based on standards that only define syntactic
characteristics. Unfortunately, it is insufficient, since the interoperation of Web ser-
vices/processes cannot be successfully achieved. One of the most recognized solutions
to solve interoperability problems is to enable applications to understand methods and
data by adding meaning to them.
Many tools are available to create Web services. Primarily programs written in
Java or any object oriented language can be made into Web services. In technical
terms any program that can communicate with other remote entities using SOAP [11]
can be called a Web service. Since the development of Web services is the first stage
in the creation of Web services, it is very important to use semantics at this stage.
During Web service development data, functional and QoS semantics of the service
needs to be specified.
All the Web services (operations in WSDL file [12]) take a set of inputs and pro-
duce a set of outputs. These are represented in the signature of the operations in a
WSDL file. However the signature of an operation provides only the syntactic and
structural details of the input/output data.
To effectively perform operations such as the discovery of services, semantics of
the input/output data has to be taken into account. Hence, if the data involved in Web