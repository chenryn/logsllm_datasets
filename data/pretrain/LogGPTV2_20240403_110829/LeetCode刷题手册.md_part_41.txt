 alphabet[tBytes[i]-'a'］--
 alphabet[sBytes[i]-'a']++
 return false
return false
---
## Page 395
func quicksortByte(a []byte, lo, hi int)
func partitionByte(a []byte, lo, hi int) int {
func isAnagraml(s string, t string) bool 
//解法二
quicksortByte(a, p+l, hi)
quicksortByte(a,lo, p-1)
if lo >= hi { 
return i + 1 
a[i+l], a[hi] = a[hi], a[i+l]
i := lo - 1 
pivot := a[hi]
return true
for i:= O;ipivot {
if sBytes[i] != tBytes[i]{
return false
 return false
return 
return true 
a[j], a[i] = a[i], a[j]
i++ 
return false 
0，
，len(tBytes)-1)
len(sBytes)-1)
~
---
## Page 396
代码
解题思路
给定一个二叉树，返回所有从根节点到叶子节点的路径。说明：叶子节点是指没有子节点的节点。
题目大意
Example:
Note: A leaf is a node with no children.
Given a binary tree, return all root-to-leaf paths.
题目
257. Binary Tree Paths
·Google 的面试题，考察递归
package leetcode 
Explanation: All root-to-leaf paths are: 1->2->5, 1->3
[""+tmpRight[i])
res = append(res, strconv.Itoa(root.val)+"->"+tmpLeft[i])
res := []string{}
 return []string{strconv.Itoa(root.val)}
 return []string{}
 Since 2 has only one digit, return it.
反复将各个位上的数字相加，直到结果为一位数。
---
## Page 398
解题思路
次的那两个元素。
给定一个整数数组 nums，其中恰好有两个元素只出现一次，其余所有元素均出现两次。找出只出现一
题目大意
Note:
Example:
 Given an array of numbers nums, in which exactly two elements appear only once and allthe 
260. Single Number Ill
注
题目
·解题思路还是利用异或，把出现2次的数先消除。最后我们要找的2个数肯定也是不同的，所以
·这一题是第136 题的加强版。第136 题里面只有一个数出现一次，其他数都出现2次。而这一次
·结果输出的顺序并不重要，对于上面的例子，[5,3]也是正确答案。
Kuo uisn a yuawaldw no pino ixaldwon awunu eau!l u unu pinous wyole ino 7
1. The order of the result is not important. So in the above example, [5, 3] is also correct.
Output:[3,5]
+
意：
Input: 
func addDigits(num int) int {
有 2个数字出现一次，其他数出现2次。
要求算法时间复杂度是线性的，并且不使用额外的辅助空间。
 constant space complexity?
return num
for num > 9 { 
Y
num = cur
for num != O{
cur := 0 
num /= 10 
cur += num % 10
[1,2,1,3,2,5]
---
## Page 399
Example 2: 
Example 1: 
 Ugly numbers are positive numbers whose prime factors only include 2, 3, 5. 
Write a program to check whether a given number is an ugly number.
题目
263. Ugly Number
代码
Explanation: 6 = 2 × 3 
Output: true 
Input: 6 
func singleNumberIII(nums []int) []int {
·于是整个数组会被分为 2 部分，异或Isb 为 0 的和异或 Isb 为 1 的，在这 2 部分中，用异或操作 
package leetcode
把出现2 次的数都消除，那么剩下的2个数分别就在这2部分中。
return res
res := []int{o, O} // this array stores the two numbers we will return
diff &= -diff 
// Get its last set bit (lsb)
for.
diff := 0 
for
取，不如就取 Isb 最低位为 1 的数吧 
最后2个数对一个数进行异或，答案肯定是不同的。那么我们找哪个数为参照物呢？可以随便
if (num & diff) == O { // the bit is not set
wnu =V Jp 
} else { // the bit is set
 res[o] ^= num 
res[1] ^= num
, num := range nums {
. num := range nums {
---
## Page 400
题目
268. Missing Number
代码
依照题意要求做即可。
解题思路
题目大意
Note:
 Example 3: 
● Input is within the 32-bit signed integer range: [-2^31, 2^31 - 1].
· 1 is typically treated as an ugly number.
func isUgly(num int) bool {
package leetcode
Explanation: 14 is not ugly since it includes another prime factor 7.
Output: false
Input: 14 
Explanation: 8 = 2 × 2 × 2 
Output: true
Input: 8 
return num == 1 
Y
for i := 2; i  0; i++ { 
for num%i == 0 { 
num /= i 
5。
---
## Page 401
题目
274. H-lndex
代码
解题思路
线性时间复杂度。你能否仅使用额外常数空间来实现？
题目大意
constant extra space complexity?
 Note:Your algorithm should run in linear runtime complexity. Could you implement it using only 
Example 2: 
Example 1:
missing from the array.
Given an array containing n distinct numbers taken from O, 1, 2, ..., n, find the one that is 
给
●要求找出0，1，2，·
定一个包含 0,1,2，., n中n个数的序列，找出O .. n中没有出现在序列中的那个数。算法应该具有
Output: 8
Input: [9,6,4,2,3,5,7,0,1]
Output:2
func missingNumber(nums []int) int {
package leetcode
Input: [3,0,1]
return xor ^i
for i = O; i=n{
} else{ 
buckets[n]++
buckets[c]++
-, C := range citations {
 two with no more than 3 citations each, her h-index is 3.
 Since the researcher has 3 papers with at least 3 citations each
received 3, 0, 6, 1, 5 citations respectively.
---
## Page 403
Example:
each."
papers have at least h citations each, and the other N - h papers have no more than h citations 
According to the definition of h-index on Wikipedia: "A scientist has index h if h of his/her N
 a researcher, write a function to compute the researcher's h-index.
Given an array of citations sorted in ascending order (each citation is a non-negative integer) of 
题目
275. H-lndex Il
and the remaining 
of them had 
Explanation: [0,1,3,5,6] means the researcher has 5 papers in total and each
Output:3
Input: citations = [0,1,3,5,6]
func hIndexl(citations []int) int { 
//解法二
return hIndex
for i := len(citations) - l; i >= O; i-- {
hIndex := 0 
quicksortl64(citations, 0, len(citations)-1)
return 0
for i := n; i >= O; i--
count :=
if citations[i] >= len(citations)-i {
if count >= i { 
count += buckets[i]
else{
break
hIndex++ 
return i
0
 two with no more than 3 citations each, her h-index is 3.
 Since the researcher has 3 papers with at least 3 citations each
received 0, 1, 3, 5, 6 citations respectively.
了
---
## Page 404
代码
解题思路
次。）
论文中）至多有h 篇论文分别被引用了至少h 次。
h 指数的定义:"h 代表"高引用次数”(high citations），
方法，计算出研究者的 h 指数。
给定一位研究者论文被引用次数的数组（被引用次数是非负整数），
进阶：
说明：
题目大意
Follow up:
If there are several possible values for h, the maximum one is taken as the h-index.
● This is a follow up problem to H-lndex, where citations is now guaranteed to be sorted in 
Note:
·给出一个数组，
·如果h 有多有种可能的值，h 指数是其中最大的那个。
func hIndex275(citations []int) int 
package leetcode
● Could you solve it in logarithmic time complexity?
你可以优化你的算法到对数时间复杂度吗？
ascending order.
for low  citations[mid] 时，说明 h 指数的边界一定在右边,
（high citations），一名科研人员的h 指数是指他（她）的（N 篇论文中）至多有h 篇论文
if len(citations)-mid > citations[mid] { 
mid := low + (high-low)>>1 
，代表该作者论文被引用次数，要求这个作者的 h 指数。h 指数定义："高引用次数"
(其余的 N-h 篇论文每篇被引用次数不多于h 
：一名科研人员的h指数是指他（她）的（N 篇
，数组已经按照升序排列。编写一个
---
## Page 405
代码
的。与这一题相近的题目有第 26 题，第27题，第80题。
这一题可以只扫描数组一遍，不断的用i，j标记〇和非〇的元素，然后相互交换，最终到达题目的目
解题思路
对位置。
题目要求不能采用额外的辅助空间，将数组中0元素都移动到数组的末尾，并且维持所有非0元素的相
题目大意
Note:
Example 1: 
relative order of the non-zero elements.
Given an array nums, write a function to move all O's to the end of it while maintaining the
题目
283. Move Zeroes
package leetcode
·Minimize the total number of operations. 
● You must do this in-place without making a copy of the array.
func movezeroes(nums []int) {
Output: [1,3,12,0,0]
Input: [0,1,0,3,12]
if len(nums) == 0 { 
return len(citations) - low
return
} else { 
 high = mid - 1 
low = mid + 1 
---
## Page 406
字。时间复杂度最好低于 O(n^2)，空间复杂度为 O(1)。
给出 n+1 个数，
题目大意
Note:
Example 2: 
Example 1:
number, find the duplicate one.
prove that at least one duplicate number must exist. Assume that there is only one duplicate 
Given an array nums containing n + 1 integers where each integer is between 1 and n (inclusive),
题目
287. Find the Duplicate Number
● There is only one duplicate number in the array, but it could be repeated more than once.
● You must not modify the array (assume the array is read only).
Output:3