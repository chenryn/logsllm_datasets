# Phishing Attacks on Modern Android

## Authors
Simone Aonzo, Alessio Merlo, Giulio Tavella, and Yanick Fratantonio

## Affiliations
- **DIBRIS - University of Genoa, Italy**
  - Simone Aonzo: simone.aonzo@dibris.unige.it
  - Alessio Merlo: alessio@dibris.unige.it
- **EURECOM, France**
  - Yanick Fratantonio: yanick.fratantonio@eurecom.fr

## Abstract
Modern versions of Android have introduced several features to enhance user convenience. This paper examines how two of these features—mobile password managers and Instant Apps—can be exploited to facilitate more practical phishing attacks. We conducted an in-depth analysis of leading mobile password managers and identified design flaws that leave them vulnerable to attacks. For instance, we demonstrate that it is possible to deceive password managers into auto-suggesting credentials for arbitrary attacker-chosen websites. Additionally, we show how the recently introduced Instant Apps technology can be abused to grant a remote attacker full UI control, enabling an end-to-end phishing attack with minimal user interaction. Our findings also reveal that mobile password managers are susceptible to "hidden fields" attacks, further exacerbating the security risks. To address these issues, we propose a new secure-by-design API that avoids common vulnerabilities. We conclude that implementing secure autofill functionality will require a community-wide effort, which we hope this work will inspire.

## Keywords
Mobile Security, Phishing, Password Managers, Instant Apps

## ACM Reference Format
Simone Aonzo, Alessio Merlo, Giulio Tavella, and Yanick Fratantonio. 2018. Phishing Attacks on Modern Android. In Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security (CCS '18). ACM, New York, NY, USA, 14 pages. https://doi.org/10.1145/3243734.3243778

## 1. Introduction
The role of mobile devices in our daily lives has grown exponentially over the past decade. Recent reports indicate that more than half of global web traffic now originates from mobile devices [41]. Users not only browse websites but also access social networks and online services, such as online banking, through their mobile devices. To enhance the user experience, developers often create native Android apps, making mobile devices key portals to their web backends. For example, a significant portion of Facebook access in the US is via mobile devices [14].

This trend is expected to continue, and users will increasingly perform security-sensitive actions, such as entering credentials to authenticate to mobile app backends. While this shift has prompted Google and platform developers to introduce new technologies to reduce friction in user interactions, it also creates new opportunities for attackers to exploit these features for phishing attacks.

In this paper, we examine new features in modern Android versions and demonstrate that, while they simplify user and developer experiences, their weak design and implementation make them vulnerable to abuse. Specifically, we focus on mobile password managers and Instant Apps.

### Mobile Password Managers
Password managers, initially developed for the web, have been praised for their security benefits, such as encouraging the use of strong, unique passwords for each service. They store and auto-fill credentials based on the domain name of the website. As mobile usage has increased, password managers have been adapted for mobile devices, offering advanced sync features and the ability to suggest and fill credentials for associated apps.

From a technical standpoint, mobile password managers rely on three mechanisms: the Accessibility Service (a11y), the Autofill Framework, and OpenYOLO. These mechanisms allow password managers to interact with other apps and suggest credentials. However, we found that these mechanisms are vulnerable to design and implementation issues, allowing malicious apps to trick password managers into suggesting credentials for arbitrary websites.

### Instant Apps
Instant Apps, a feature introduced by Google, allows users to try Android apps without fully installing them. This is achieved by downloading small portions of the app and associating them with specific URL patterns. The system verifies the developer's control over the domain name using the App Link Verification process, which relies on the Digital Asset Links protocol.

While Instant Apps offer a convenient way to try apps, they also provide attackers with the ability to gain full control over the device's UI. This makes phishing attacks more practical, as attackers can create full-screen login views or simulate browser-like interfaces, deceiving users into believing they are interacting with legitimate services.

### End-to-End Attack
Combining the vulnerabilities in mobile password managers and Instant Apps, attackers can launch highly effective phishing attacks. For example, an attacker can create a fake Facebook login view, and the password manager will auto-fill the victim's credentials. Additionally, we found that password managers fill hidden fields, allowing attackers to silently steal passwords even when users think they are only filling in usernames.

### Future Directions
The current ecosystem is not ready to support secure autofill on mobile devices. We propose a new API, `getVerifiedDomainNames()`, which uses domain names as the primary abstraction level and enforces the necessary security steps to verify an app's authority over requested credentials. This API relies on the Digital Asset Links verification mechanism, but its adoption requires collaboration from website owners.

We conclude that addressing these issues will require a community-wide effort, and we hope this work will inspire such an initiative.

## 2. Background
Android mobile apps are compiled and distributed as APK files, typically through app stores like the Google Play Store. Third-party markets, while popular in some regions, are generally considered less secure. To install apps from these sources, users must enable side-loading, a security option that is off by default.