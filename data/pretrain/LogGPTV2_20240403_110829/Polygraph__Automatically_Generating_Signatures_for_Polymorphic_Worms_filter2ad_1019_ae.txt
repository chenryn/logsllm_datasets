Token Subsequence
Bayes
1
0
1
0
.
0
0
4
7
1
0
0
.
0
6
7
8
0
0
.
0
6
1
1
0
0
.
0
0
0
0
0
0
0
0
4
0
1
.
0
7
1
1
0
.
0
4
2
1
0
.
0
1
e
t
a
R
e
v
i
t
i
s
o
P
e
s
l
a
F
l
a
n
o
i
t
i
d
d
A
0.8
0.6
0.4
0.2
Conjunction
Token Subsequence
Bayes
0
0
0
0
0
0
0
0
0
0
0
5
3
3
0
0
.
0
2
9
9
0
.
0
0
0
1
e
t
a
R
e
v
i
t
i
s
o
P
e
s
l
a
F
l
a
n
o
i
t
i
d
d
A
0.8
0.6
0.4
0.2
Conjunction
Token Subsequence
Bayes
1
0
1
0
.
0
0
4
7
1
0
0
.
0
0
0
0
0
0
0
0
0
0
7
9
1
.
0
7
1
1
0
.
0
4
2
1
0
.
0
00 0 0
00 0 0
00 0 0
0
00 0 0
00 0 0
00 0 0
0
10 (67%)
0
50 (91%)
Number (Fraction) of Noise Samples in Suspicious Pool
20 (80%)
30 (86%)
40 (89%)
0 (0%)
10 (67%)
50 (91%)
Number (Fraction) of Noise Samples in Suspicious Pool
30 (86%)
20 (80%)
40 (89%)
00 0 0
00 0 0
00 0 0
0
10 (50%)
0
50 (83%)
Number (Fraction) of Noise Samples in Suspicious Pool
40 (80%)
20 (67%)
30 (75%)
(a) Apache-Knacker exploit
(b) BIND TSIG exploit
(c) Mixed HTTP exploits
Figure 5. False positives due to noise in suspicious pool.
ﬂows, resulting in false positives.
5.2.3. Multiple Polymorphic Worms Plus Noise
Finally, we examine the fully general case: that in which
there are ﬂows from more than one polymorphic worm, and
misclassiﬁed innocuous ﬂows in the suspicious ﬂow pool.
We evaluate Polygraph on a suspicious ﬂow pool contain-
ing 5 ﬂows from the Apache-Knacker polymorphic worm; 5
from the ATPhttpd polymorphic worm, and a varying quan-
tity of noise ﬂows.
Ideally, Polygraph should generate a
signature that covers each polymorphic worm, and not gen-
erate any signatures that cover the innocuous ﬂows.
False Negatives. Our results in this case are similar to those
with one HTTP worm plus noise. We observe that Poly-
graph generates conjunction and token-subsequence signa-
tures for each of the two polymorphic worms. Bayes gen-
erates a single signature that matches both worms. The sig-
natures generated by each algorithm generate 0% false neg-
atives, except for Bayes once the fraction of noise ﬂows in-
creases beyond 80%, at which point it has 100% false neg-
atives.
False Positives. Figure 5(c) shows that the false positive
behavior is very similar to when there is only one type of
worm in the suspicious pool. Once again, the signatures
generated by each algorithm have no false positives until
there are a large number of noise samples in the suspicious
pool.
5.2.4. Runtime Performance Overhead
Without clustering, all of our signature generation tech-
niques generate a signature very quickly. For example,
when training on 100 samples in our Apache-Knacker eval-
uation, the conjunction signature, the token subsequence
signature, and the Bayes signature are each computed in
under 10 seconds. The cost of signature generation grows
with the square of the number of samples when using hier-
archical clustering. However, we still ﬁnd that the run-times
are reasonable, even with our unoptimized implementation.
When training on 25 samples, the conjunction and subse-
quence signatures with hierarchical clustering are generated
in under ten minutes.
The performance of our signature generation algorithms
can be improved with optimizations. Additionally, some of
our algorithms can be parallelized (especially hierarchical
clustering), allowing the signature generation time to be re-
duced signiﬁcantly by using multiple processors.
6. Attack Analysis
In this section, we analyze potential attacks on Poly-
graph, and propose countermeasures. Note that some at-
tacks are not unique to Polygraph. For example, resource
utilization attacks are common to all stateful IDSes, and
previous work addresses these issues.
In addition, eva-
sion attacks are common to network-based IDSes, and tech-
niques such as normalization have been proposed to defend
against them. We do not discuss these more general attacks
here; We focus on Polygraph-speciﬁc attacks.
Overtraining Attacks:
The conjunction and token-
subsequence algorithms are designed to extract the most
speciﬁc signature possible from a worm. An attacker may
attempt to exploit this property to prevent the generated sig-
nature from being sufﬁciently general.
We call one such attack the coincidental-pattern attack.
Rather than ﬁlling in wildcard bytes with values chosen uni-
formly at random, the attacker selects from a smaller distri-
bution. The result is that there tend to be many substrings
coincidentally in common in the suspicious pool that do not
actually occur in every sample of the worm.
We evaluate Polygraph’s resilience to this attack by mod-
ifying the Apache-Knacker exploit to set each of the ap-
proximately 900 wildcard bytes to one of only two values.
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
1
0.8
0.6
0.4
0.2
e
t
a
R
e
v
i
t
a
g
e
N
e
s
l
a
F
0
0
Conjunction
Token Subsequence
Bayes