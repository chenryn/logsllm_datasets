登录直接采用的第三方登录，当前只支持 **Gitee** 和 **QQ** 登录，如果想了解这个第三方登录是怎么实现的，初次最好接入 **Gitee** 的第三方登录。
**Gitee** 限制是最少的，直接可以在本地申请应用，并且回调接口直接可以填写本地 **localhost**，非常方便。而 **QQ**和微博是很麻烦的，接入他们的功能必须有一个备案好的域名，并且需要审核，很麻烦（微博到现在都没有审核通过( ╯□╰ ) ）。接入第三方登录整体流程大概如下（交互方式仿掘金）：
- 点击登录后会弹出一个请求第三方应用 **code** 的新窗口
- 然后第三方会用这个 **code** 去调用你申请应用时填写的回调接口
- 在自己回调接口这儿，通过拿到的 **code** 和申请的密钥，向第三方服务器发送请求，拿到 **access_code**
- 通过 **access_code** 和密钥再去请求第三方接口，去拿到对应平台的用户信息
- 把用户信息存储到自己数据库中，返回给前台一个 **token**
- 弹出的窗口会接收到这个 **token**，通过跨窗口通信的方式将 **token** 传递给自己的主页
- 前台保存 **token**，刷新页面，通过 **token** 向后台拿到用户信息，这样就完成了第三方登录功能
> tip：整体的流程大致是上面几步，略微会有些差异，不过影响不大。
>
> 登录模块的UI风格模仿的[掘金](https://juejin.cn/)登录框，只不过把手机登录给去掉了，没办法，要钱( ╯□╰ )。
![登录页](http://cdn.qiniu.bnbiye.cn/img/202110291644335.png)
### 重写个人中心
> （功能尚未完成，当前只是静态页面）
整体页面UI也是仿照的[掘金](https://juejin.cn/)的个人中心，不过感觉现在没人会用，就先放一放了，效果如下：
![个人中心页](http://cdn.qiniu.bnbiye.cn/img/202110291646738.png)
### 后台管理端重写专题分组样式
因为专题的逻辑更改，所以后台重写一了专题的添加方式，效果如下：
![新增专题分组](http://cdn.qiniu.bnbiye.cn/img/202110291629897.png)
### 后台管理端重写图片管理样式
上传图片按照时间呈列表状排列，效果如下：
![图片管理样式](http://cdn.qiniu.bnbiye.cn/img/202110291634468.png)
### 评论增加了后台审核
因为有交互，所以最好还是将留言审核一下再发布出来，未审核的留言只能发布人自己看到。目前审核的方式是人工审核，比较麻烦。后期有时间会改为自动审核，并且留言现在没有增加邮件通知，都是自己随缘上去看，很不方便，邮件通知后期有时间也会加上。整体效果如下：
![新增后端审核](http://cdn.qiniu.bnbiye.cn/img/202110291637303.png)
### 重构推荐拖拽组件
在蘑菇博客的设计中，总共设计了四个推荐板块：一级推荐（首页轮播图）、二级推荐（轮播图的右侧的两篇文章）、三级推荐（主页右侧的特别推荐专栏）、四级推荐（主页右侧的推荐文章专栏）。
在改变推荐等级排列顺序的功能里，对原本的功能做了一个简单的优化。博客原本的交互方式就特别好，使用拖拽组件[vuedraggable](https://github.com/SortableJS/Vue.Draggable) 包裹的，同一级别的博客可以拖动着修改排列顺序，但是目前不支持跨级别拖动。然后我研究了一下这个拖拽组件，改为了可以跨级别拖动，实现效果如下：
![重写推荐拖拽组件](http://cdn.qiniu.bnbiye.cn/img/202110291659757.png)
### 重构关注我们
联系方式单独做成了一个管理，这样就可以自定义的扩展不同的联系的方式，并且颜色和图标可以高度自定义。
![关注我们](images/image-20211031192833586.png)
实现后的效果如下，在蘑菇原来的基础上添加了掘金和B站，与之前对比毫无违和感。
![关注我效果图](images/image-20211031193040037.png)
## 开发中遇到了哪些困难，有没有想过放弃
不知不觉，小半年已经过去了，想想整体的开发流程还是比较顺利的，但是也有一些困难（可能有挺多困难，我给忘了😂），有一回也差点放弃了，这里简单回顾一下。
说起最艰难的岁月，莫过于刚开始（果然是万事开头难😫）。因为自己也是在学习阶段，很多都是摸黑瞎弄，想完全重构蘑菇博客，谈何容易。那么就不想那么多，一个功能一个功能去实现，该写页面写页面，该写接口写接口，逢山开路、见招拆招，闷着头干就完事。
从零开始写，首先就需要构建项目脚手架，蘑菇博客用的是 **vue2** 带 **webpack** 目录版本的脚手架（其实我想学的就是这版本，顺带还能学学 **webpack** ），所以就去[官网](https://cn.vuejs.org/)看了一下怎么构建老版本的脚手架，果然找到了
![升级版本](http://cdn.qiniu.bnbiye.cn/img/202110291714190.png)全局安装个桥接工具 **@vue/cli-init** ，然后使用 **vue init xxx* 就可以初始化一个带 **webpack** 目录的脚手架，但是下载下来的项目 **webpack** 的版本是 **3**，而蘑菇博客的版本是 **4**，然后就网上各种找帖子，升级 **webpack**，最后好在是成功了。
然后就是写页面，这个过程就比较顺手，因为有了蘑菇博客做参照，不用纠结颜色布局之类的，特意修改的布局也是参照别的网站，剩下的就是写页面、封组件，不会的语法查 [vue官网文档](https://cn.vuejs.org/v2/guide/)，[element-ui](https://element.eleme.cn/#/zh-CN/component/installation)上能复用的组件直接拿来用。但是仿写的 **评论组件**、**贡献度组件**，前前后后也花了很多时间。
最想放弃的时候是写业务接口，增删改查逻辑。代码都是重复的，每建一个新表，都需要写一套增删改查逻辑，并在后台管理端写一套对应的页面，配一遍路由，很是麻烦。
这里面除了重复性的粘贴工作外，最头疼的是替换变量参数。数据库里的字段我使用的是下划线的格式，比如表名使用  **t_blog** ，里面的字段为 **blog_title** 等等这样的形式。然后写接口时，参数我是以小驼峰的格式接收的，比如 **blogTitle**。
然后还有接口的命名方式 **saveBlog** 、 **queryBlog** 、 **updateBlog** 、 **deleteBlog**，等等这些需要替换的地方真是太多了，稍微不注意就少了那块多了那块。当我写完两个模块的时候，就想放弃了，简直是不要太麻烦了┑(￣Д ￣)┍
后来想了一想，其实重复性的工作，是完全可以用代码解决的。
所有的业务接口都是在操作数据库表，业务代码实则都是对数据库表中字段执行增删改查操作。那么我只要在建表时，遵循一定规范，然后根据规范去生成代码不就好了嘛，别的就是文件读取正则替换的事了，所以难点就是制定规则和解析 **sql** 文件。后来观察了一下导出的sql文件，其实也是有规律的，只要有规律，那么就都不复杂，说干就干，首先制定建表规则：
- 所有表都需要有`uid`，`sort`、`create_time`、`update_time`字段，即主键、排列方式、创建时间、修改时间
- 所有需要后端接口校验的字段，都设置为必填
- 所有有默认值的字段，都可以作为条件查询时的筛选条件
- 所有字段都必须有注释，并且注释的方式以`xxx：xxxxx`的格式，冒号是中文冒号，注释里只有一个中文冒号，冒号前注释就是字段的中文注释，这样在生成后台管理端代码时，也可以直接把中文注释给生成出来，比如，input框里的placeholder，直接可以生成`请输入xxx`
基于上面的建表规则，每次只需将表创建好，把导出的 **sql** 文件逐行解析成 **json** 对象，提前定义好代码模板和占位符，最后读取模板，替换占位符为相应的字段名，最后将替换后的文件写入对应的目录下，这不就成了嘛，分析好思路后其实也不难。执行起来大概分为下面几步：
- 按照自定义的规则建立数据表
- 导出数据库为sql文件
- 解析sql文件，将建表语句转换为 **json** 对象，如
```js
[
   {
       name: 't_blog',
       comment: 'string',
       columns: [
           {
               label: 'string',
               comment: 'string',
               type: 'string',
               isRequire: true|false,
               defaultValue: '',
           },
       ],
   },
]
```
- 定义模板代码，需要替换的地方提前定义好占位符
- 读取模板代码，通过解析好的数据表的 **json** 对象，逐个替换占位符为对应结果
```js
//小驼峰格式占位符
const smallHumpPlaceholder = /\$VAR_SMALL_HUMP\$/g
//大驼峰格式占位符