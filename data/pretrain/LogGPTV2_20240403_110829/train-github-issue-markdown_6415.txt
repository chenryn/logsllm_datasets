With PANDAS 1.5.3 (and Seaborn 0.11.2, Matplotlib 3.7.1), the following code
works fine:
    import seaborn as sns
    sns.jointplot(x=[1,3,2], y=[1,2,3])
But with PANDAS 2.0.0 the identical code raises an exception:
    OptionError: No such keys(s): 'mode.use_inf_as_null'
Here's the full output:
    File ~/.../venv/lib/python3.10/site-packages/seaborn/_decorators.py:46, in _deprecate_positional_args..inner_f(*args, **kwargs)
         36     warnings.warn(
         37         "Pass the following variable{} as {}keyword arg{}: {}. "
         38         "From version 0.12, the only valid positional argument "
       (...)
         43         FutureWarning
         44     )
         45 kwargs.update({k: arg for k, arg in zip(sig.parameters, args)})
    ---> 46 return f(**kwargs)
    File ~/.../venv/lib/python3.10/site-packages/seaborn/axisgrid.py:2254, in jointplot(x, y, data, kind, color, height, ratio, space, dropna, xlim, ylim, marginal_ticks, joint_kws, marginal_kws, hue, palette, hue_order, hue_norm, **kwargs)
       2251         marginal_kws.setdefault("fill", True)
       2253     marginal_kws.setdefault("color", color)
    -> 2254     grid.plot_marginals(marg_func, **marginal_kws)
       2256 elif kind.startswith("hist"):
       2257 
       2258     # TODO process pair parameters for bins, etc. and pass
       2259     # to both jount and marginal plots
       2261     joint_kws.setdefault("color", color)
    File ~/.../venv/lib/python3.10/site-packages/seaborn/axisgrid.py:1857, in JointGrid.plot_marginals(self, func, **kwargs)
       1854     orient_kw_y = {"vertical": True}
       1856 if seaborn_func:
    -> 1857     func(x=self.x, ax=self.ax_marg_x, **kwargs)
       1858 else:
       1859     plt.sca(self.ax_marg_x)
    File ~/.../venv/lib/python3.10/site-packages/seaborn/distributions.py:1462, in histplot(data, x, y, hue, weights, stat, bins, binwidth, binrange, discrete, cumulative, common_bins, common_norm, multiple, element, fill, shrink, kde, kde_kws, line_kws, thresh, pthresh, pmax, cbar, cbar_ax, cbar_kws, palette, hue_order, hue_norm, color, log_scale, legend, ax, **kwargs)
       1451 estimate_kws = dict(
       1452     stat=stat,
       1453     bins=bins,
       (...)
       1457     cumulative=cumulative,
       1458 )
       1460 if p.univariate:
    -> 1462     p.plot_univariate_histogram(
       1463         multiple=multiple,
       1464         element=element,
       1465         fill=fill,
       1466         shrink=shrink,
       1467         common_norm=common_norm,
       1468         common_bins=common_bins,
       1469         kde=kde,
       1470         kde_kws=kde_kws,
       1471         color=color,
       1472         legend=legend,
       1473         estimate_kws=estimate_kws,
       1474         line_kws=line_kws,
       1475         **kwargs,
       1476     )
       1478 else:
       1480     p.plot_bivariate_histogram(
       1481         common_bins=common_bins,
       1482         common_norm=common_norm,
       (...)
       1492         **kwargs,
       1493     )
    File ~/.../venv/lib/python3.10/site-packages/seaborn/distributions.py:428, in _DistributionPlotter.plot_univariate_histogram(self, multiple, element, fill, common_norm, common_bins, shrink, kde, kde_kws, color, legend, line_kws, estimate_kws, **plot_kws)
        418     densities = self._compute_univariate_density(
        419         self.data_variable,
        420         common_norm,
       (...)
        424         warn_singular=False,
        425     )
        427 # First pass through the data to compute the histograms
    --> 428 for sub_vars, sub_data in self.iter_data("hue", from_comp_data=True):
        429 
        430     # Prepare the relevant data
        431     key = tuple(sub_vars.items())
        432     sub_data = sub_data.dropna()
    File ~/.../venv/lib/python3.10/site-packages/seaborn/_core.py:983, in VectorPlotter.iter_data(self, grouping_vars, reverse, from_comp_data)
        978 grouping_vars = [
        979     var for var in grouping_vars if var in self.variables
        980 ]
        982 if from_comp_data:
    --> 983     data = self.comp_data
        984 else:
        985     data = self.plot_data
    File ~/.../venv/lib/python3.10/site-packages/seaborn/_core.py:1054, in VectorPlotter.comp_data(self)
       1050 axis = getattr(ax, f"{var}axis")
       1052 # Use the converter assigned to the axis to get a float representation
       1053 # of the data, passing np.nan or pd.NA through (pd.NA becomes np.nan)
    -> 1054 with pd.option_context('mode.use_inf_as_null', True):
       1055     orig = self.plot_data[var].dropna()
       1056 comp_col = pd.Series(index=orig.index, dtype=float, name=var)
    File ~/.../venv/lib/python3.10/site-packages/pandas/_config/config.py:441, in option_context.__enter__(self)
        440 def __enter__(self) -> None:
    --> 441     self.undo = [(pat, _get_option(pat, silent=True)) for pat, val in self.ops]
        443     for pat, val in self.ops:
        444         _set_option(pat, val, silent=True)
    File ~/.../venv/lib/python3.10/site-packages/pandas/_config/config.py:441, in (.0)
        440 def __enter__(self) -> None:
    --> 441     self.undo = [(pat, _get_option(pat, silent=True)) for pat, val in self.ops]
        443     for pat, val in self.ops:
        444         _set_option(pat, val, silent=True)
    File ~/.../venv/lib/python3.10/site-packages/pandas/_config/config.py:135, in _get_option(pat, silent)
        134 def _get_option(pat: str, silent: bool = False) -> Any:
    --> 135     key = _get_single_key(pat, silent)
        137     # walk the nested dict
        138     root, k = _get_root(key)
    File ~/.../venv/lib/python3.10/site-packages/pandas/_config/config.py:121, in _get_single_key(pat, silent)
        119     if not silent:
        120         _warn_if_deprecated(pat)
    --> 121     raise OptionError(f"No such keys(s): {repr(pat)}")
        122 if len(keys) > 1:
        123     raise OptionError("Pattern matched multiple keys")
    OptionError: No such keys(s): 'mode.use_inf_as_null'