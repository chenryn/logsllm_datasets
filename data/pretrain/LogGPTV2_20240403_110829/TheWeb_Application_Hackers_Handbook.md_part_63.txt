476 Chapter 12 n Attacking Users: Cross-Site Scripting
In some situations, the XSS vulnerability is triggered only if the Referer header
contains a URL on the same domain as the vulnerable application. Here, you
may be able to leverage any on-site redirector functions within the application
to deliver your attack. To do this, you need to construct a URL to the redirector
function that both contains a valid XSS exploit and causes a redirection to the
vulnerable URL. The success of this attack depends on the redirection method
the function uses and on whether current browsers update the Referer header
when following redirections of that type.
Exploiting XSS in Nonstandard Request and Response Content
Today’s complex applications increasingly employ Ajax requests that do not
contain traditional request parameters. Instead, requests often contain data in
formats such as XML and JSON, or employing various serialization schemes.
Correspondingly, the responses to these requests frequently contain data in the
same or another format, rather than HTML.
The server-side functionality involved in these requests and responses often
exhibits XSS-like behavior. Request payloads that normally would indicate the
presence of a vulnerability are returned unmodifi ed by the application.
In this situation, it is still possible that the behavior can be exploited to deliver
an XSS attack. To do so, you need to meet two distinct challenges:
n You need to fi nd a means of causing a victim user to make the necessary
request cross-domain.
n You need to fi nd a way of manipulating the response so that it executes
your script when consumed by the browser.
Neither of these challenges is trivial. First, the requests in question typically
are made from JavaScript using XMLHttpRequest (see Chapter 3). By default,
this cannot be used to make cross-domain requests. Although XMLHttpRequest
is being modifi ed in HTML5 to allow sites to specify other domains that may
interact with them, if you fi nd a target that allows third-party interaction, there
are probably simpler ways for you to compromise it (see Chapter 13).
Second, in any attack, the response returned by the application would be con-
sumed directly by the victim’s browser, not by the custom script that processes
it in its original context. The response will contain data in whatever non-HTML
format is being used, usually with the corresponding Content-Type header. In
this situation, the browser processes the response in the normal way for this
data type (if recognized), and normal methods for introducing script code via
HTML may be irrelevant.
Although nontrivial, in some situations both of these challenges can be
met, allowing the XSS-like behavior to be exploited to deliver a working
attack. We will examine how this can be done using the XML data format
as an example.
cc1122..iinndddd 447766 88//1199//22001111 1122::1122::3322 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 477
Chapter 12 n Attacking Users: Cross-Site Scripting 477
Sending XML Requests Cross-Domain
It is possible to send near-arbitrary data cross-domain within the HTTP request
body by using an HTML form with the enctype attribute set to text/plain. This
tells the browser to handle the form parameters in the following way:
n Send each parameter on a separate line within the request.
n Use an equals sign to separate the name and value of each parameter (as
normal).
n Do not perform any URL encoding of parameter names or values.
Although some browsers do not honor this specifi cation, it is properly honored
by current versions of Internet Explorer, Firefox, and Opera.
The behavior described means that you can send arbitrary data in the message
body, provided that there is at least one equals sign anywhere within the data. To
do this, you split the data into two chunks, before and after the equals sign. You
place the fi rst chunk into a parameter name and the second chunk into a parameter
value. When the browser constructs the request, it sends the two chunks separated
by an equals sign, thereby exactly constructing the required data.
Since XML always contains at least one equals sign, in the version attribute of
the opening XML tag, we can use this technique to send arbitrary XML data cross-
domain in the message body. For example, if the required XML were as follows:
foo
we could send this using the following form:
foo’>
To include common attack characters within the value of the param parameter,
such as tag angle brackets, these would need to be HTML-encoded within the
XML request. Therefore, they would need to be double HTML-encoded within
the HTML form that generates that request.
TIP You can use this technique to submit cross-domain requests containing
virtually any type of content, such as JSON-encoded data and serialized binary
objects, provided you can incorporate the equals character somewhere within
the request. This is normally possible by modifying a free-form text fi eld within
the request that can contain an equals character. For example in the following
JSON data, the comment fi eld is used to introduce the required equals character:
{ “name”: “John”, “email”: “PI:EMAIL”, “comment”: “=” }
cc1122..iinndddd 447777 88//1199//22001111 1122::1122::3322 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 478
478 Chapter 12 n Attacking Users: Cross-Site Scripting
The only signifi cant caveat to using this technique is that the resulting request
will contain the following header:
Content-Type: text/plain
The original request normally would have contained a different Content-Type
header, depending on exactly how it was generated. If the application tolerates
the supplied Content-Type header and processes the message body in the normal
way, the technique can be used successfully when trying to develop a working
XSS exploit. If the application fails to process the request in the normal way, on
account of the modifi ed Content-Type header, there may be no way to send a
suitable cross-domain request to trigger the XSS-like behavior.
TIP If you identify XSS-like behavior in a request that contains nonstandard
content, the fi rst thing you should do is quickly verify whether the behavior
remains when you change the Content-Type header to text/plain. If it
does not, it may not be worth investing any further effort in trying to develop
a working XSS exploit.
Executing JavaScript from Within XML Responses
The second challenge to overcome when attempting to exploit XSS-like behav-
ior in nonstandard content is to fi nd a way of manipulating the response so
that it executes your script when consumed directly by the browser. If the
response contains an inaccurate Content-Type header, or none at all, or if your
input is being refl ected right at the start of the response body, this task may be
straightforward.
Usually, however, the response includes a Content-Type header that accu-
rately describes the type of data that the application returns. Furthermore, your
input typically is refl ected partway through the response, and the bulk of the
response before and after this point will contain data that complies with the
relevant specifi cations for the stated content type. Different browsers take differ-
ent approaches to parsing content. Some simply trust the Content-Type header,
and others inspect the content itself and are willing to override the stated type
if the actual type appears different. In this situation, however, either approach
makes it highly unlikely that the browser will process the response as HTML.
If it is possible to construct a response that does succeed in executing a script, this
normally involves exploiting some particular syntactic feature of the type of content
that is being injected into. Fortunately, in the case of XML, this can be achieved by
using XML markup to defi ne a new namespace that is mapped to XHTML, causing
the browser to parse uses of that namespace as HTML. For example, when Firefox
processes the following response, the injected script is executed:
HTTP/1.1 200 Ok
Content-Type: text/xml
cc1122..iinndddd 447788 88//1199//22001111 1122::1122::3322 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 479
Chapter 12 n Attacking Users: Cross-Site Scripting 479
Content-Length: 1098
...
...
As mentioned, this exploit succeeds when the response is consumed directly
by the browser, and not by the original application component that would ordi-
narily process the response.
Attacking Browser XSS Filters
One obstacle to the practical exploitation of virtually any refl ected XSS vulner-
ability arises from various browser features that attempt to protect users from
precisely these attacks. Current versions of the Internet Explorer browser include
an XSS fi lter by default, and similar features are available as plug-ins to several
other browsers. These fi lters all work in a similar way: they passively monitor
requests and responses, use various rules to identify possible XSS attacks in
progress, and, when a possible attack is identifi ed, modify parts of the response
to neutralize the possible attack.
Now, as we have discussed, XSS conditions should be considered vulner-
abilities if they can be exploited via any browser in widespread usage, and the
presence of XSS fi lters in some browsers does not mean that XSS vulnerabilities
do not need to be fi xed. Nevertheless, in some practical situations, an attacker
may specifi cally need to exploit a vulnerability via a browser that implements an
XSS fi lter. Furthermore, the ways in which XSS fi lters can be circumvented are
interesting in their own right. In some cases they can be leveraged to facilitate
the delivery of other attacks that otherwise would be impossible.
This section examines Internet Explorer’s XSS fi lter. Currently it is the most
mature and widely adopted fi lter available.
The core operation of the IE XSS fi lter is as follows:
n In cross-domain requests, each parameter value is inspected to identify
possible attempts to inject JavaScript. This is done by checking the value
against a regex-based blacklist of common attack strings.
n If a potentially malicious parameter value is found, the response is checked
to see whether it contains this same value.
n If the value appears in the response, the response is sanitized to prevent
any script from executing. For example,  is modifi ed to become
.
cc1122..iinndddd 447799 88//1199//22001111 1122::1122::3322 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 480
480 Chapter 12 n Attacking Users: Cross-Site Scripting
The fi rst thing to say about the IE XSS fi lter is that it is generally highly effec-
tive in blocking standard exploitation of XSS bugs, considerably raising the bar
for any attacker who is attempting to perform these attacks. That said, the fi lter
can be bypassed in some important ways. You can also exploit how the fi lter
operates to deliver attacks that otherwise would be impossible.
First, some ways of bypassing the fi lter arise from core features of its design:
n Only parameter values are considered, not parameter names. Some appli-
cations are vulnerable to trivial attacks via parameter names, such as if
the whole of the requested URL or query string is echoed in the response.
These attacks are not prevented by the fi lter.
n Because each parameter value is considered separately, if more than one
parameter is refl ected in the same response, it may be possible to span an
attack between the two parameters, as was described as a technique for
beating length limits. If the XSS payload can be split into chunks, none
of which individually matches the blacklist of blocked expressions, the
fi lter does not block the attack.
n Only cross-domain requests are included, for performance reasons. Hence,
if an attacker can cause a user to make an “on-site” request for an XSS URL,
the attack is not blocked. This can generally be achieved if the application
contains any behavior that allows an attacker to inject arbitrary links into a
page viewed by another user (even if this is itself a refl ected attack; the XSS
fi lter seeks to block only injected scripts, not injected links). In this scenario,
the attack requires two steps: the injection of the malicious link into a user’s
page, and the user’s clicking the link and receiving the XSS payload.
Second, some implementation details regarding browser and server behavior
allow the XSS fi lter to be bypassed in some cases:
n As you have seen, browsers tolerate various kinds of unexpected char-
acters and syntax when processing HTML, such as IE’s own tolerance of
NULL bytes. The quirks in IE’s behavior can sometimes be leveraged to
bypass its own XSS fi lter.
n As discussed in Chapter 10, application servers behave in various ways
when a request contains multiple request parameters with the same name.
In some cases they concatenate all the received values. For example, in
ASP.NET, if a query string contains:
p1=foo&p1=bar
the value of the p1 parameter that is passed to the application is:
p1=foo,bar
In contrast, the IE XSS fi lter still processes each parameter separately, even
if they share the same name. This difference in behavior can make it easy
cc1122..iinndddd 448800 88//1199//22001111 1122::1122::3322 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 481
Chapter 12 n Attacking Users: Cross-Site Scripting 481
to span an XSS payload across several “different” request parameters with
the same name, bypassing the blacklist with each separate value, all of
which the server recombines.
TRY IT!
Currently the following XSS exploit succeeds in bypassing the IE XSS fi lter:
http://mdsec.net/error/5/Error.ashx?message= alert(‘xss’)
Third, the way in which the fi lter sanitizes script code in application responses
can actually be leveraged to deliver attacks that otherwise would be impossible. The
core reason for this is that the fi lter operates passively, looking only for correlations
between script-like inputs and script-like outputs. It cannot interactively probe
the application to confi rm whether a given piece of input actually causes a given
piece of output. As a result, an attacker can actually leverage the fi lter to selectively
neutralize the application’s own script code that appears within responses. If the
attacker includes part of an existing script within the value of a request param-
eter, the IE XSS fi lter sees that the same script code appears in the request and
the response and modifi es the script in the response to prevent it from executing.
Some situations have been identifi ed where neutralizing an existing script
changes the syntactic context of a subsequent part of the response that contains
a refl ection of user input. This change in context may mean that the application’s
own fi ltering of the refl ected input is no longer suffi cient. Therefore, the refl ec-
tion can be used to deliver an XSS attack in a way that was impossible without
the changes made by the IE XSS fi lter. However, the situations in which this
has arisen generally have involved edge cases with unusual features or have
revealed defects in earlier versions of the IE XSS fi lter that have since been fi xed.
More signifi cantly, an attacker’s ability to selectively neutralize an application’s
own script code could be leveraged to deliver entirely different attacks by interfering
with an application’s security-relevant control mechanisms. One generic example
of this relates to the removal of defensive framebusting code (see Chapter 13), but
numerous other examples may arise in connection with application-specifi c code
that performs key defensive security tasks on the client side.
Finding and Exploiting Stored XSS Vulnerabilities
The process of identifying stored XSS vulnerabilities overlaps substantially
with that described for refl ected XSS. It includes submitting a unique string in
every entry point within the application. However, you must keep in mind some
important differences to maximize the number of vulnerabilities identifi ed.
cc1122..iinndddd 448811 88//1199//22001111 1122::1122::3333 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 482
482 Chapter 12 n Attacking Users: Cross-Site Scripting
HACK STEPS
1. Having submitted a unique string to every possible location within the
application, you must review all of the application’s content and function-
ality once more to identify any instances where this string is displayed
back to the browser. User-controllable data entered in one location (for
example, a name field on a personal information page) may be displayed
in numerous places throughout the application. (For example, it could
be on the user’s home page, in a listing of registered users, in work flow
items such as tasks, on other users’ contact lists, in messages or ques-
tions posted by the user, or in application logs.) Each appearance of the
string may be subject to different protective filters and therefore needs to
be investigated separately.
2. If possible, all areas of the application accessible by administrators
should be reviewed to identify the appearance of any data controllable by
non-administrative users. For example, the application may allow admin-
istrators to review log files in-browser. It is extremely common for this
type of functionality to contain XSS vulnerabilities that an attacker can
exploit by generating log entries containing malicious HTML.
3. When submitting a test string to each location within the application, it is
sometimes insufficient simply to post it as each parameter to each page.
Many application functions need to be followed through several stages
before the submitted data is actually stored. For example, actions such
as registering a new user, placing a shopping order, and making a funds
transfer often involve submitting several different requests in a defined
sequence. To avoid missing any vulnerabilities, it is necessary to see each
test case through to completion.
4. When probing for reflected XSS, you are interested in every aspect of a
victim’s request that you can control. This includes all parameters to the
request, every HTTP header, and so on. In the case of stored XSS, you
should also investigate any out-of-band channels through which the
application receives and processes input you can control. Any such chan-
nels are suitable attack vectors for introducing stored XSS attacks. Review
the results of your application mapping exercises (see Chapter 4) to iden-
tify every possible area of attack surface.
5. If the application allows files to be uploaded and downloaded, always
probe this functionality for stored XSS attacks. Detailed techniques for
testing this type of functionality are discussed later in this chapter.
6. Think imaginatively about any other possible means by which data you
control may be stored by the application and displayed to other users. For
example, if the application search function shows a list of popular search
items, you may be able to introduce a stored XSS payload by searching
for it numerous times, even though the primary search functionality itself
handles your input safely.
cc1122..iinndddd 448822 88//1199//22001111 1122::1122::3333 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 483
Chapter 12 n Attacking Users: Cross-Site Scripting 483
When you have identifi ed every instance in which user-controllable data is
stored by the application and later displayed back to the browser, you should