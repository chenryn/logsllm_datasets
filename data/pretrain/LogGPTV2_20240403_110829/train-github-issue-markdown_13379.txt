Sometimes we want to use aggregations to understand the details of how certain
entities are connected:
  * When did these IP addresses talk to each other?
  * How much money was sent per day between a selection of bank accounts?
Right now we can structure this with an agg tree as follows:
  * query terms [A,B,C] with `min_should_match:2`
  * terms agg 1 with `include: [A,B,C]`
    * terms agg 2 with `include [A,B,C]`
      * detail aggs eg `date_histogram` or `sum`...
This will generate leaf aggregations for all of the possible connections but
_will generate too many of them._ If the number of terms is N the number of
leaf buckets created in a worst-case scenario is N² when it need only be
(N²-N)/2. We don't want duplicate results for both A->B and B->A buckets.
Similarly, we don't want A->A buckets. This trimming can be achieved if `terms
agg 2` only collects terms that are less than the parent bucket's term in
`terms agg 1`. (We could use "greater than" as the filter but the choice is
immaterial).
We could implement this by either:
  1. Adding extra parameters to existing `terms` aggs or
  2. Creating a new dedicated `adjacency` aggregation
Option 1 feels clumsy and introduces a need for changes in the agg framework
to allow a child to see the keys used by the parent bucket.  
The advantage of option 2 is that clients would only need to specify the list
of terms once as a parameter and it could provide a more compact results
format.
Would appreciate your thoughts @colings86 and @jpountz