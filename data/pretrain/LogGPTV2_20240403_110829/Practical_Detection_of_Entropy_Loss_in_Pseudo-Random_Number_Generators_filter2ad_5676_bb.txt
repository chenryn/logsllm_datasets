the robustness of the generator /dev/random, and thus in the game ROB(γ∗), that makes the
following oracle queries: one get-state, several next-ror, several D-refresh, several next-ror, several
refresh and one ﬁnal next-ror.
Then the state (Si, Sr, Su), the parameters k, d, Ei, Eu, Er and the counter c deﬁned in ROB(γ∗)
evolve the following way:
— 123 —
Chapter 7. Security Analysis
• get-state: After a state compromise, A knows all parameters (but needs Si, Sr, Ei, Er)
and c = 0.
• next-ror: After bEi/10c + bEr/10c queries to next-ror, Ei = Er = 0, A knows Si and Sr
and c = 0.
• D-refresh: A refreshes LINUX with input from D0. After 300 queries, Ei = 3584 and
Er = 0. A knows Si and Sr and c = 0.
• next-ror with t = 1: Since Er = 0, a transfer is necessary between Si and Sr before
generating R. Then αr = min(min(max(t, 8), 128),bEi/8c) = 8, Ei = Ei − 8αr = 3534 −
64 = 3520, Er = Er + 8αr − 8t = 56.
• next-ror with t = 7: Since Er = 56, no transfer is necessary, and Er = Er − 8t = 0.
• Repeat the two previous queries until Ei = 0, and do only the ﬁrst next-ror query (with
t = 1) for the last.
• refresh with input J
• next-ror, with t = 7: Since Er = 56, no transfer is necessary between Si and Sr before
$← U128. After 10 queries, A knows Sr and c = 1280.
generating R. But as A knows Sr, then A knows R.
Therefore, in the game ROB(γ∗) with b = 0, A obtains a 7-bytes string in the last next-ror-oracle
that is predictable, whereas when b = 1, this event occurs only with probability 2−56.
It is
therefore straightforward for A to distinguish the real and the ideal world.
Attack based on the Mixing Function. In [LRSV12], a proof of state entropy preservation is
given for one iteration of the mixing function M, assuming that the input and the internal state
are independent, that is: H∞(M(S, I)) ≥ H∞(S) and H∞(M(S, I)) ≥ H∞(I). We show that
without that independence assumption and with more than one iteration of M, the generator
LINUX does not recover from state compromise. This contradicts the backward security and
therefore the robustness property.
LINUX is not backward secure. As shown in Section 7.2, with Lemma 13, it is possible to
build an input distribution D2 with arbitrary high entropy such that, after several D-refresh,
H∞(S) = 1. Let us consider an adversary A that generates an input data of distribution D2, and
that makes the following oracle queries: set-refresh, and γ∗ calls to D-refresh followed by many
calls to next-ror. Then the state (Si, Sr, Su), the parameters k, d, Ei, Eu, Er and the counter c of
BWD(γ∗) evolve the following way:
• set-refresh: A sets Si = 0, Sr = Su = 0, d = 0 and k = 127, and c = 0.
• D-refresh: A refreshes LINUX with D2. After γ∗ oracle queries, until c ≥ γ∗, the new state
still satisﬁes H∞(S) = 1.
• next-ror: Since H∞(S) = 1, H∞(R) = 1.
Therefore, in the game BWD(γ∗) with b = 0, A always obtains an output in the last next-ror
query with H∞(R) = 1, whereas in b = 1, this event occurs only with negligible probability. It
is therefore straightforward for A to distinguish the real and the ideal world.
— 124 —
7.3. Analysis of OpenSSL Generator
7.3 Analysis of OpenSSL Generator
The OpenSSL cryptographic library contains a pseudo-random number generator with input
OPENSSL which collects entropy from system calls. Is has been ﬁrst analyzed by Gutmann in
1998 [Gut98] and since then no new analysis has been made. It is implemented in the source
ﬁle /crypto/rand/md_rand.c, as part of the OpenSSL library. The generator takes inputs of
any size and generates outputs of size 10 bytes. The generator is diﬀerent depending on a
choice made when building the library. This choice depends on an internal parameter named
MD_DIGEST_LENGTH, which depends on the underlying hash function used. The choice of the
hash function is made using with a dedicated ﬂag (USE_MD5_RAND for the MD5 function, or
USE_SHA1_RAND for the SHA1 function), which is by default USE_SHA1_RAND. Hence depending
on the environment, the size of S3 is equal to 16 bytes or 20 bytes. We assume that the SHA1
function is used in our descriptions, hence we will refer to the hash functions family HK described
in Section 7.1. We veriﬁed that our attack can be easily adapted if USE_MD5_RAND is chosen.
Internal State Decomposition. The internal state of OPENSSL is implemented with ﬁve
ﬁelds: state_index, of size 32 bits, state, of size 1043 bytes, md, of size 20 bytes, md_count_0,
md_count_1, each of size 64 bits. The decomposition of the internal state is given by S =
(S1, S2, S3, S4, S5), where S1, S2, S3, S4, S5 stand for state_index, state, md, md_count_0,
md_count_1, respectively. The total size of the internal state is 8576 bits and the generator
uses this decomposition as follows: ﬁeld S1 is used as an index to select bytes in S2; S2 and S3
are used to collect entropy; S4 and S5 are counters used during the generator operations.
The refresh Algorithm. This algorithm is implemented with the instruction ssleay_rand_add,
and fully described in Algorithm 12. It takes as input the current internal state (S1, S2, S3, S4, S5)
and an input I of any size that is processed by blocks of 20 bytes. Starting with a 20-bytes
block of S2 that is indexed by S1, consecutive blocks of S2 are mixed with consecutive blocks
of I. The mixing operation involves the hash functions family HK. This mixing operation also
involves S3, S4 and S5, where S5 is incremented for each block. When this mixing is ﬁnished,
the ﬁeld S3 is xor-ed with the last calculated hash. Hence after a refresh operation, |I| bits of
S2 are modiﬁed, S3 is modiﬁed, S1 and S5 are incremented and S4 is not modiﬁed.
I
S1
S2 = [···|S∗
2|··· ]
S3
S4
S5
U = HK(S3||S∗
2||I||S4||S5)
S1 ← S1 + 20 mod 1023
S2 ← ···|S∗
2 ⊕ U|···
S3 ← S3 ⊕ U S4 ← S4
S5 ← S5 + 1
Figure 7.3 – OPENSSL refresh Algorithm
The next Algorithm. This algorithm is implemented in ssleay_rand_bytes, and described in
Algorithm 13. It takes as input the current internal state (S1, S2, S3, S4, S5), mixes S2, S3, S4
and S5 together to produce the 10-byte output R and updates S3. Only 10 bytes from S2 are
modiﬁed, that are selected using ﬁeld S1, which behaves as an index for this operation. A second
mixing operation involves S3, S4 and S5 to update S3. Hence S2 is modiﬁed sequentially by
blocks of 10 bytes with successive next calls, while S3 is completely modiﬁed, S1 and S4 are
incremented and S5 is not changed. As for the refresh algorithm, the two mixing operations
involve the hash function family HK.
Note that directive ssleay_rand_bytes takes as input an array named buf which is ﬁlled with
the generated output, but whose content is also used as input (referenced as I in the description
below). In addition, the next algorithm uses as input the current system PID and the system
— 125 —
Chapter 7. Security Analysis
Algorithm 12 OPENSSL refresh algorithm
Require: S = (S1, S2, S3, S4, S5), I
Ensure: S0
1: while |I| > 0 do
S∗
2 = S2[S1 mod 1023, . . . , S1 + 20 mod 1023]
2:
U = HK([S3||S∗
3:
2 ⊕ U
S∗
2 = S∗
4:
S1 = S1 + 20 mod 1023
5:
S5 = S5 + 1
6:
I = I \ [I]19
7:
0
8: end while
9: S3 = S3 ⊕ U
10: return S0 = (S1, S2, S3, S4, S5)
2||I||S4||S5])
time. The system PID is obtained with a call to directive getpid, system time is obtained from a
call to directive time, and from a call to directive gettimeofday (for simplicity, we refer to these
two calls as “Time" in the description of the generator). These inputs during the next algorithm
are not explicitly compliant with the security model that requests a strict separation between
the input collection and the generation, but we mention it for completeness of the description.
These calls have been explicitly set by OpenSSL community to prevent a vulnerability related
to a call to the fork function that uses a common PID for two next calls. This vulnerability is
described in [Ope13].
I, PID, Time
S1
S2 = [···|S∗
2|··· ]
S3
S4
S5
V = HK(PID||Time||S3||S4||S5||I||S∗
2)
[V ]9
0
[V ]19
10 = R
S1 ← S1 + 10 mod 1023 S2 ← [···|S∗
2 ⊕ [V ]9
0|··· ] S3 ← HK(S4||S5||V ||S3) S4 ← S4 + 1 S5 ← S5
Figure 7.4 – OPENSSL next Algorithm
2 = S2[S1 mod 1023, · · · S1 + 10 mod 1023]
2 = S∗
Algorithm 13 OPENSSL next algorithm
Require: S = (S1, S2, S3, S4, S5)
Ensure: S0, R
1: S∗
2: V = HK([PID||Time||S3||S4||S5||I||S∗
2])
3: S∗
4: R = V [10, · · · , 19]
5: S3 = HK([S4||S5||V ||S3])
6: S1 = S1 + 10 mod 1023
7: S4 = S4 + 1
8: return S0 = (S1, S2, S3, S4, S5), R
2 ⊕ V [0, · · · , 9]
Attack. We mount a memory attack against the pseudo-random number generator with input
OPENSSL, that is based on the internal state decomposition and the fact that this state is only
partially updated refresh and next algorithms. This attack uses the ﬁeld S3, which is implemented
with md and the ﬁeld S2– which is implemented with state. As described in Algorithms 12 and
13, when the generator is refreshed, the ﬁeld S3 is updated with the last calculated hash, whereas
it is used as the entropy source for the output of the generator with 10 bytes of S2. Suppose
now that one uses an input of size 1023 bytes (which is the size of S2 – or state) where the ﬁrst
20 bytes and the last 3 bytes are 0, to refresh the generator. Clearly this input is independent of
— 126 —
7.4. Analysis of Android SHA1PRNG
the parameter seed and it is therefore legitimate to use it to refresh the generator in our security
model. Suppose now that one asks for an output. This output, which only relies on the ﬁrst
10 bytes of S2 and on S3, is predictable. Theorem 22 gives the technical details of the attack.
This attack is related to the refresh function that mixes new entropy sequentially by blocks of
20 bytes in the internal state, and to the next function that also reads sequentially the internal
state by blocks to produce new outputs. If a block is compromised and if the adversary controls
the exact block of the input that will be mixed with the compromised block of the internal state,
the output is predictable. Hence the attack points a design error of the generator, because this
behavior should not be possible.
Theorem 22. The pseudo-random number generator with input OPENSSL is not backward
secure against memory attacks. To mount an attack against the generator, A needs to corrupt
40 bytes of the internal state.
Proof. Deﬁne the 1023-byte distribution D. On input a state i, D updates its state to i + 1
and outputs a 1023-byte input I i: (i + 1; [I i0,··· , I i1022]) ← D(i); where I0
19 = 0,
1019 = ··· = I0
1022 = 0 and all other bytes are random (i.e. D is legitimate with γi = 8000). Let
I0
us deﬁne the mask M = [M1, M2, M3, M4, M5], where M1 = 0, [M2]19
0 = 0, M3 = 0, M4 = 0,
M5 = 0 and J = {2, 3} (i.e.
this mask will be used to set the ﬁrst 20 bytes of S2 and S3
to 0). Let us consider an adversary A against the security of the generator that chooses the
distribution D, and that makes the following oracle queries in the security game MBWD: one
M-set-state with S, J and M, one D-refresh with I0, one next-ror. Then (following refresh and
next algorithm notations):
0 = ··· = I0
• After M-set-state, S1 = 0, [S2]19
• After D-refresh,
0 = 019, [S2]1023
20
– S1 = 0, [S2]19
– S4 = 0, S5 = 51.
0 = HK([0||0||0||0||0]), [S2]1023
20
• After next-ror,
is random, S3 = 0, S4 = 0, S5 = 0.
is random, S3 = HK([0||0||0||0||51]),
– V = HK(PID||Time||S3||0||51||[S2]19
– S1 = 10, S4 = 1.
0 ), R = V 19
10 , S3 = HK(0||51||V ||HK(0||0||0||0||51)),
In this last next-ror-oracle query, A obtains a 10-bytes string that is predictable as it only relies
on PID and Time, whereas this event should occur with probability 2−80. Therefore A can
distinguish an output of OPENSSL from random in the game BWD(γ∗, 320), for all γ∗ ≤ 8000
and this pseudo-random number generator with input is not backward secure.
7.4 Analysis of Android SHA1PRNG
In the Android system, a full Java implementation of a pseudo-random number generator with
nput is provided, as part of the package security.provider.crypto, named SHA1PRNG. It has
been analyzed by Michaelis et al. in [MMS13], where the authors identiﬁed an implementation
weakness that causes the internal state to be overwritten by predictable values, decreasing its
entropy to 64 bits. This generator was also debated intensively recently, due to a weakness
in its initial seeding that caused a ﬂaw in Bitcoin wallets. This weakness caused the Android
community to propose a ﬁx to the generator, that simply consists in replacing it by the one from
OpenSSL, analyzed in Section 7.3. Full details about the vulnerability and the proposed ﬁx are
given in [And13]. The generator is implemented with the class SHA1PRNG_SecureRandomImpl
— 127 —
Chapter 7. Security Analysis
and is an inheritance from the one included in the library Apache Harmony from the package
org.apache.harmony. It follows the method named "expansion of source bits" of IEEE standard
P.1363 [BK96].
Internal State Decomposition. The internal state of the generator is implemented with the
ﬁelds seed, of size 384 bytes, and counter, of size 8 bytes (many other ﬁelds are used, but they
are not useful to understand the operations). Hence the decomposition of the internal state is
S = (S1, S2), where S1, S2 stand for seed and counter and the total size of the internal state is
392 bytes. The generator uses this decomposition as follows: S1 contains the collected entropy
and a hash of the collected entropy; S2 contains a counter which is incremented at each output.
The refresh Algorithm. This algorithm is described in Algorithm 14. It takes as input the
current internal state (S1, S2), an input I of any size and updates the internal state with I.
It is implemented with method engineSetSeed as follows: the ﬁrst 64 bytes of S1 collect the
consecutive inputs and the last 20 bytes of S1 contains a hash value. Two sub-functions are
used, implemented with SHA1Impl.updateHash and SHA1Impl.computeHash. Note that these
two functions correspond respectively to the update of the internal state of HK and a function
that compress the input of HK to a ﬁxed length output as is deﬁned in the speciﬁcation [SHA95].
As the generator uses (wrongly, as we will see) the compression function for its operation, we
will use it for its description and will refer to this function as hK. When the collected input ﬁlls
a block of hK (of size 64 bytes), the last 20 bytes of S1 are ﬁlled with hK, and then the block
is set to 0 and ﬁlled again. For clarity, we denote s the current collected input, h the current
calculated hash in S1 and I∗ = [I]64−|S||I|
Algorithm 14 Android SHA1PRNG refresh
Require: S = (S1, S2) = ([s, · · · , h], S2), I
Ensure: S0
1: if |s||I| < 64 then S1[0, · · · , 63] = [s||I] end if