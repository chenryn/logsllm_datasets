~]# firewall-cmd --list-lockdown-whitelist-uids
```
:::
::: para
增加一个用户 ID *uid* 到白名单，以 `root`{.systemitem}
身份输入以下命令：
``` screen
~]# firewall-cmd --add-lockdown-whitelist-uid=uid
```
要使这个命令持续，增加 `--permanent`{.option} 选项。
:::
::: para
从白名单上移除一个用户 ID *uid* ，以`root`{.systemitem}
身份输入以下命令：
``` screen
~]# firewall-cmd --remove-lockdown-whitelist-uid=uid
```
要使这个命令持续，增加 `--permanent`{.option} 选项。
:::
::: para
查询用户 ID *uid* 是否在白名单上，输入以下命令：
``` screen
~]$ firewall-cmd --query-lockdown-whitelist-uid=uid
```
如果存在，显示退出状态为 `0`{.literal} 的 `yes`{.literal}
，否则，显示退出状态为 `1`{.literal} 的 `no`{.literal} 。
:::
::: para
列出白名单上所有用户名，以 `root`{.systemitem} 身份输入以下命令：
``` screen
~]# firewall-cmd --list-lockdown-whitelist-users
```
:::
::: para
增加一个用户名 *user* 到白名单，以 `root`{.systemitem}
身份输入以下命令：
``` screen
~]# firewall-cmd --add-lockdown-whitelist-user=user
```
要使这个命令持续，增加 `--permanent`{.option} 选项。
:::
::: para
从白名单移除一个用户名 *user* ，以 `root`{.systemitem}
身份输入以下命令：
``` screen
~]# firewall-cmd --remove-lockdown-whitelist-user=user
```
要使这个命令持续，增加 `--permanent`{.option} 选项。
:::
::: para
查询用户名 *user* 是否在白名单上，输入以下命令：
``` screen
~]$ firewall-cmd --query-lockdown-whitelist-user=user
```
如果存在，显示退出状态为 `0`{.literal} 的 `yes`{.literal}
，否则，显示退出状态为 `1`{.literal} 的 `no`{.literal} 。
:::
:::
::: section
::: titlepage
### [⁠]{#chap-Hardening_Your_System_with_Tools_and_Services.html#Configure_Lockdown_Whitelist_Options_with_Configuration_Files}4.5.16.4. 用配置文件来配置锁定白名单选项 {.title}
:::
::: para
默认的白名单配置文件包括 [**NetworkManager**]{.application} 环境和
[**libvirt**]{.application} 的默认环境。列表里也有用户 ID 0。
``` screen
```
:::
::: para
这里跟随了一个示例白名单配置文件，它启动用于 `firewall-cmd`{.command}
功能的所有命令，为名为 *user*、用户 ID 为 `815`{.literal} 的用户：
``` screen
```
在这个范例里，我们出示了 `user id`{.option} 和 `user name`{.option}
两样，但只需要一个即可。Python
是一个解释器，所以写在命令行的最前面。您也可以使用一个非常特别的命令，比如：
``` synopsis
/usr/bin/python /bin/firewall-cmd --lockdown-on
```
在这例子里，只有 `--lockdown-on`{.command} 命令会被允许。
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
在 Red Hat Enterprise Linux 7 中，所有功能现在都放在
`/usr/bin/`{.filename} 中，而且 `/bin/`{.filename} 目录被系统链接到
`/usr/bin/`{.filename} 目录。换言之，尽管以 `root`{.systemitem}
身份运行的 `firewall-cmd`{.command} 路径可能解析到
`/bin/firewall-cmd`{.command}，但是现在会使用
`/usr/bin/firewall-cmd`{.command}
。所有新的脚本可以使用新的地址，但要意识到，如果以 `root`{.systemitem}
身份运行的脚本被写入使用 `/bin/firewall-cmd`{.command}
路径，那么，命令路径除了是传统意义上仅用于非 `root`{.systemitem} 用户的
`/usr/bin/firewall-cmd`{.command} 路径以外，还必须被加入白名单。
:::
::: para
在一个命令的名字属性结尾的 ["[\*]{.quote}"]{.quote}
意味着所有以此行开头的命令都匹配。如果没有 ["[\*]{.quote}"]{.quote}
，那么包括参数的绝对命令必须匹配。
:::
:::
:::
:::
:::
:::
::: section
::: titlepage
## [⁠]{#chap-Hardening_Your_System_with_Tools_and_Services.html#sec-firewalld-additional_resources}4.5.17. 附加资源 {.title}
:::
::: para
下列信息的来源提供了关于 `firewalld`{.systemitem} 的附加资源。
:::
::: section
::: titlepage
### [⁠]{#chap-Hardening_Your_System_with_Tools_and_Services.html#sec-firewalld-docs-inst}4.5.17.1. 已安装的文档 {.title}
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    `firewalld(1)`{.filename} 说明页------描述 `firewalld`{.systemitem}
    的命令选项。
    :::
-   ::: para
    `firewalld.conf(5)`{.filename} 说明页------包括配置
    `firewalld`{.systemitem} 的信息。
    :::
-   ::: para
    `firewall-cmd(1)`{.filename} 说明页------描述
    `firewalld`{.systemitem} 命令行客户端的命令选项。
    :::
-   ::: para
    `firewalld.icmptype(5)`{.filename} 操作手册 --- 描述了
    `ICMP`{.systemitem} 过滤的 XML 配置文件。
    :::
-   ::: para
    `firewalld.service(5)`{.filename} 操作手册 --- 描述了 [**firewalld
    service**]{.application} 的 XML 配置文件。
    :::
-   ::: para
    `firewalld.zone(5)`{.filename} 操作手册 --- 描述了配置
    `firewalld`{.systemitem} 区域的 XML 配置文件。
    :::
-   ::: para
    `firewalld.direct(5)`{.filename} 说明页------描述
    `firewalld`{.systemitem} 直接接口配置文件。
    :::
-   ::: para
    `firewalld.lockdown-whitelist(5)`{.filename} 说明页------描述
    `firewalld`{.systemitem} 白名单锁定配置文件。
    :::
-   ::: para
    `firewall.richlanguage(5)`{.filename} 说明页------描述
    `firewalld`{.systemitem} 多语言规则语法。
    :::
-   ::: para
    `firewalld.zones(5)`{.filename}
    说明页------概述分区情况以及如何配置它们。
    :::
:::
:::
:::
:::
::: section
::: titlepage
# [⁠]{#chap-Hardening_Your_System_with_Tools_and_Services.html#sec-Securing_DNS_Traffic_with_DNSSEC}4.6. 用 DNSSEC 保护 DNS 流量 {.title}
:::
::: section
::: titlepage
## [⁠]{#chap-Hardening_Your_System_with_Tools_and_Services.html#sec-Security_Guide-Introduction-to-DNSSEC}4.6.1. 介绍 DNSSEC {.title}
:::
::: para
DNSSEC是一套" *域名系统安全扩展*
"(``{=html}DNSSEC，Domain Name System Security
Extensions``{=html}) ，能让" `域名系统`{.systemitem}
"（DNS，Domain Name System）客户端进行身份验证以及检查来自
`DNS`{.systemitem}
域名服务器响应的完整性，以此鉴定它们的来源，并判断它们是否在传输过程中被篡改过。
:::
:::
::: section
::: titlepage
## [⁠]{#chap-Hardening_Your_System_with_Tools_and_Services.html#sec-Security_Guide-Understanding-DNSSEC}4.6.2. 了解 DNSSEC {.title}
:::
::: para
对于通过互联网连接，现在有越来越多的网站使用
`超文本传输协议安全（HTTPS，Hyper Test Transfer Protocol Security）`{.systemitem}
来提供安全的链接。然而，除非您直接输入 IP 地址，在连接到
`HTTPS`{.systemitem} 网络服务器之前，必须执行 `DNS`{.systemitem}
查询。由于缺少身份验证，执行这些 `DNS`{.systemitem}
查询是不安全的，且会遭到" *中间人* "攻击（ MITM , man-in-the-middle
attacks）。换句话说， `DNS`{.systemitem} 客户端无法确信疑似来自特定的
`DNS`{.systemitem}
域名服务器的应答是否可信，以及是否被篡改过。更重要的是，递归服务器无法确定从其他域名服务器获取的记录是真实的。
`DNS`{.systemitem} 协议无法提供客户端可确保不遭受中间人攻击的机制。
DNSSEC 的引入解决了在使用 `DNS`{.systemitem}
解析域名时，缺少身份验证和完整性检查的问题。但它不能解决机密性的问题。
:::
::: para
DNSSEC 所发布的信息包括 `DNS`{.systemitem}
资源记录的数字签字和公用加密密钥的分配，以这样的方式让
`DNS`{.systemitem} 解析器建立起多层次的信息链。因所有 `DNS`{.systemitem}
资源记录而生成的数字签名，添加到此 DNS
区域作为资源记录签名（``{=html}RRSIG``{=html}）。此区域所添加的公用加密密钥作为资源记录的域名系统密钥（
DNSKEY ）。要建立起多层次的信息链，则须将 DNSKEY
的散列值发布到父区域作为" *代理签名*
"（``{=html}DS，Delegation of
Signing``{=html}）资源记录。要验证不存在性，则须使用
*NextSECure*
（``{=html}NSEC，下一代安全``{=html}）和
NSEC3 （NSEC的替换或备用方案）资源记录。在 DNSSEC 区域签名中，每一个"
*资源记录集* "（``{=html}RRset，resource record
set``{=html}） 都有其对应的 RRSIG 资源记录。请注意，
用作子区域代理的记录（域名服务器粘附记录，NS and glue
records）并没有进行签名；这些记录要显示在子区域，并在此区域进行签名。
:::
::: para
运用 root 区域公用加密密钥进行配置的解析器会完成处理 DNSSEC
的信息。使用这种密钥，解析器可以验证用于 root 区域的签名。例如， root
区域对 `.com`{.literal} 的 DS 记录进行签名。 root 区域也为
`.com`{.literal}
域名服务器提供域名服务器粘附记录。解析器会跟踪代理和查询使用代理域名服务器
`.com`{.literal} 的DNSKEY 记录。所获取的 DNSKEY 记录散列值应当与 root
区域的 DS 记录相匹配。如果匹配，则解析器将会信任所获取的
`.com`{.literal} DNSKEY 。在 `.com`{.literal} 区域内， RRSIG 记录是由
`.com`{.literal} DNSKEY 所创建。同样地，在 `.com`{.literal}
中的代理也是重复此程序，例如 `redhat.com`{.literal}。用这种方法，尽管
`DNS`{.systemitem} 验证解析器在其正常操作期间收集了很多 DNSKEY
，但只需用一个 root 密钥对其进行配置。如果密码检查失败了，则解析器将
SERVFAIL 会返回给应用程序。
:::
::: para
DNSSEC 的设计是根据以下这种方式：对于不支持 DNSSEC
的应用程序完全不可见。如果非 DNSSEC 应用程序查询支持 DNSSEC的解析器
，则它所接收的答复没有任何新资源记录类型，如 RRSIG 。然而， 支持 DNSSEC
的解析器仍将执行所有密码检查，若探测到恶意 `DNS`{.systemitem}
答复，它仍会将 SERVFAIL 错误返回给应用程序。 DNSSEC 会保护
`DNS`{.systemitem}
服务器（权威服务器和递归服务器）数据的完整性，但却不为应用程序和解析器提供的安全保护。因此，予以一个从应用程序到其解析器的安全传输方式十分重要。实现这一目的最容易的方法就是运行
`localhost`{.systemitem} （本地主机）上支持 DNSSEC 的解析器，使用
`/etc/resolv.conf`{.filename}下的 `127.0.0.1`{.systemitem}
。或者可以使用虚拟专用网络（ VPN ，Virtual Private Network）连接到远程
`DNS`{.systemitem} 服务器。
:::
#### [⁠]{#chap-Hardening_Your_System_with_Tools_and_Services.html#bh-Understanding_the_Hotspot_Problem}了解热点问题
::: para
使用无线网络热点（ Wi-Fi Hotspot ，Wireless Fidelity Hotspot）或 VPN
时，就会依赖 ["[DNS 欺骗]{.quote}"]{.quote} （DNS
lies）。所获取的端口往往会发生 `DNS`{.systemitem}
劫持，以便重定向用户跳转到需要身份验证（或支付）的 Wi-Fi 服务网页。连接
VPN 的用户常常需使用 ["[内部专用]{.quote}"]{.quote} `DNS`{.systemitem}
服务器，以便定位那些在公司网络外不存在的资源。这需要软件进行额外处理。例如，
[**dnssec-trigger**]{.application} 可用于探测一个无线热点（ Hotspot
）是否劫持 `DNS`{.systemitem} 查询，或 `unbound`{.systemitem}
是否充当代理域名服务器处理 DNSSEC 查询。
:::
#### [⁠]{#chap-Hardening_Your_System_with_Tools_and_Services.html#bh-Choosing_a_DNSSEC_Capable_Recursive_Resolver}选择支持 DNSSEC 的递归解析器
::: para
要部署支持 DNSSEC 的递归解析器，则可使用 [**BIND**]{.application} 或