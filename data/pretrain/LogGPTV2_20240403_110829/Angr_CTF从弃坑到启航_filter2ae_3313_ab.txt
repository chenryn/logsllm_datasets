            for i in simulation.found:
                solution_state = i
                solution = solution_state.posix.dumps(0)
                print("[+] Success! Solution is: {0}".format(solution))
                #print(scanf0_solution, scanf1_solution)
        else:
            raise Exception('Could not find the solution')
    if __name__ == "__main__":
        Go()
运行一下查看结果：
这题解题真正需要用的函数也就`printf`，`scnaf`，`puts`，即完成了angr需要的输出、输入、路径选择的功能，我们手动找到这几个函数的地址
这里比较容易忽略的一个函数就是`__libc_start_main`
让我们回忆一下在linux下一个c程序是如何启动的：
  1. execve 开始执行
  2. execve 内部会把bin程序加载后，就把.interp指定的 动态加载器加载
  3. 动态加载器把需要加载的so都加载起来，特别的把 libc.so.6 加载
  4. 调用到libc.so.6里的__libc_start_main函数，真正开始执行程序
  5. libc_start_main做了一些事后，调用到main()函数
所以程序是一定需要用到`__libc_start_main`，分析后得到地址：0x8048D10，于是得到代码：
    project.hook(0x804ed40, angr.SIM_PROCEDURES['libc']['printf']())
    project.hook(0x804ed80, angr.SIM_PROCEDURES['libc']['scanf']())
    project.hook(0x804f350, angr.SIM_PROCEDURES['libc']['puts']())
    project.hook(0x8048d10, angr.SIM_PROCEDURES['glibc']['__libc_start_main']())
其它的部分和之前做过的`02_angr_find_condition`一致，不再赘述
## 14_angr_shared_library
这题如题主要是学习如何使用angr求解函数是外部导入在动态库(.so)里的题目，这题我们有了两个文件，一个是主程序`14_angr_shared_library`，另一个就是库文件`lib14_angr_shared_library.so`
我们先来检查一下这两个文件：
    syc@ubuntu:~/Desktop/TEMP$ checksec 14_angr_shared_library
    [*] '/home/syc/Desktop/TEMP/14_angr_shared_library'
        Arch:     i386-32-little
        RELRO:    Partial RELRO
        Stack:    Canary found
        NX:       NX enabled
        PIE:      No PIE (0x8048000)
    syc@ubuntu:~/Desktop/TEMP$ checksec lib14_angr_shared_library.so
    [*] '/home/syc/Desktop/TEMP/lib14_angr_shared_library.so'
        Arch:     i386-32-little
        RELRO:    Partial RELRO
        Stack:    No canary found
        NX:       NX enabled
        PIE:      PIE enabled
我们用IDA打开这个文件，看一看函数：
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      char s; // [esp+1Ch] [ebp-1Ch]
      unsigned int v5; // [esp+2Ch] [ebp-Ch]
      v5 = __readgsdword(0x14u);
      memset(&s, 0, 0x10u);
      print_msg();
      printf("Enter the password: ");
      __isoc99_scanf("%8s", &s);
      if ( validate(&s, 8) )
        puts("Good Job.");
      else
        puts("Try again.");
      return 0;
    }
这题特殊就特殊在这个关键的`validate`函数，我们在IDA分析`14_angr_shared_library`时点击进去看发现无法查看源代码：
    int __cdecl validate(int a1, int a2)
    {
      return validate(a1, a2);
    }
原因很简单，`validate`是一个外部导入函数，其真正的二进制代码不在源程序里，在它所处的库文件`lib14_angr_shared_library.so`里面
我们用IDA打开并分析库文件`lib14_angr_shared_library.so`，找到了`validate`函数的具体实现
    _BOOL4 __cdecl validate(char *s1, int a2)
    {
      char *v3; // esi
      char s2[4]; // [esp+4h] [ebp-24h]
      int v5; // [esp+8h] [ebp-20h]
      int j; // [esp+18h] [ebp-10h]
      int i; // [esp+1Ch] [ebp-Ch]
      if ( a2  90 )
      {
        puts("Try again.");
        exit(1);
      }
      return (41 * a2 + a1 - 65) % 26 + 65;
    }
其实和之前的题目并没有什么太大的不同，关键在于如果让angr处理这个外部导入函数
###  动态链接
要详细了解，这里推荐阅读《程序员的自我修养——链接、装载与库》
在Linux下使用GCC将源码编译成可执行文件的过程可以分解为4个步骤，分别是预处理（Prepressing）、编译（Compilation）、汇编（Assembly）和链接（Linking）。一个简单的hello
word程序编译过程如下：
动态链接的基本思想是把程序按照模块拆分成相对独立的部分，在程序运行时才将它们链接在一起形成一个完整的程序，而不是像静态链接一样把所有的程序模块都连接成一个单独的可执行文件。ELF动态链接文件被称为动态共享对象（DSO，Dynamic
Shared
Object），简称共享对象，它们一般都是.so为扩展名的文件。相比静态链接，动态链接有两个优势，一是共享对象在磁盘和内存只有一份，节省了空间；二是升级某个共享模块时，只需要将目标文件替换，而无须将所有的程序重新链接
共享对象的最终装载地址在编译时是不确定的，而是在装载时，装载器根据当前地址空间的空闲情况，动态分配一块足够大小的虚拟地址空间给相应的共享对象。为了能够使共享对象在任意地址装载，在连接时对所有绝对地址的引用不作重定位，而把这一步推迟到装载时再完成，即装载时重定位
这题我们简单理解共享库都是是用位置无关的代码编译的，我们需要指定基址。共享库中的所有地址都是base +
offset，其中offset是它们在文件中的偏移地址
我们现在先上EXP，然后再逐步分析：
    import angr
    import claripy
    import sys
    def Go():
        path_to_binary = "./lib14_angr_shared_library.so" 
        base = 0x4000000
        project = angr.Project(path_to_binary, load_options={ 
            'main_opts' : { 
            'custom_base_addr' : base 
            } 
        })
        buffer_pointer = claripy.BVV(0x3000000, 32)
        validate_function_address = base + 0x6d7
        initial_state = project.factory.call_state(validate_function_address, buffer_pointer, claripy.BVV(8, 32))
        password = claripy.BVS('password', 8*8)
        initial_state.memory.store(buffer_pointer, password)
        simulation = project.factory.simgr(initial_state)
        success_address = base + 0x783
        simulation.explore(find=success_address)
        if simulation.found:
            for i in simulation.found:
                solution_state = i
                solution_state.add_constraints(solution_state.regs.eax != 0)
                solution = solution_state.solver.eval(password,cast_to=bytes)
                print("[+] Success! Solution is: {0}".format(solution))
                #print(scanf0_solution, scanf1_solution)
        else:
            raise Exception('Could not find the solution')
    if __name__ == "__main__":
        Go()
运行一下查看：
这题直接对库文件`lib14_angr_shared_library.so`进行符号执行求解,但问题在于库文件是需要装载才能运行的，无法单独运行，于是我们需要指定基地址
还记得我们查看的程序信息嘛
    syc@ubuntu:~/Desktop/TEMP$ checksec 14_angr_shared_library
    [*] '/home/syc/Desktop/TEMP/14_angr_shared_library'
        Arch:     i386-32-little
        RELRO:    Partial RELRO
        Stack:    Canary found
        NX:       NX enabled
        PIE:      No PIE (0x8048000)
这题是没有开启PIE，所以加载基地址是不会变化的，我们可以直接设定0x8048000
###  pre-binary 选项
如果你想要对一个特定的二进制对象设置一些选项，CLE也能满足你的需求在加载二进制文件时可以设置特定的参数，使用 `main_opts` 和
`lib_opts` 参数进行设置。
  * `backend` – 指定 backend
  * `base_addr` – 指定基址
  * `entry_point` – 指定入口点
  * `arch` – 指定架构
示例如下：
    >>> angr.Project('examples/fauxware/fauxware', main_opts={'backend': 'blob', 'arch': 'i386'}, lib_opts={'libc.so.6': {'backend': 'elf'}})
参数`main_opts`和`lib_opts`接收一个以python字典形式存储的选项组。`main_opts`接收一个形如{选项名1：选项值1，选项名2：选项值2……}的字典，而`lib_opts`接收一个库名到形如{选项名1:选项值1，选项名2:选项值2……}的字典的映射。
> lib_opts是二级字典，原因是一个二进制文件可能加载多个库，而main_opts指定的是主程序加载参数，而主程序一般只有一个，因此是一级字典。
这些选项的内容因不同的后台而异，下面是一些通用的选项：
  * backend —— 使用哪个后台，可以是一个对象，也可以是一个名字(字符串)
  * custom_base_addr —— 使用的基地址
  * custom_entry_point —— 使用的入口点
  * custom_arch —— 使用的处理器体系结构的名字
所以我们可以得到脚本的第一部分
    path_to_binary = "./lib14_angr_shared_library.so" 
    base = 0x8048000
    project = angr.Project(path_to_binary, load_options={ 
            'main_opts' : { 
            'custom_base_addr' : base 
        } 
    })
我们这里调用的是使用`.call_state`创建 state
对象，构造一个已经准备好执行`validate`函数的状态，所以我们需要设定好需要传入的参数。先回顾一下`validate`函数的原型
    validate(char *s1, int a2)
我们可以通过 `BVV(value,size)` 和 `BVS( name, size)` 接口创建位向量，先创建一个缓冲区buffer作为参数`char
*s1`，因为设定的缓冲区地址在0x3000000，又因为32位程序里int类型为4字节，即32比特，故得
    buffer_pointer = claripy.BVV(0x3000000, 32)
然后从IDA中不难得出`validate`的偏移量为0x6D7，然后因为需要比较的字符串长度为8，故利用BVV传入参数`int a2`，最后得到
    buffer_pointer = claripy.BVV(0x3000000, 32)
    validate_function_address = base + 0x6d7
    initial_state = project.factory.call_state(validate_function_address, buffer_pointer, claripy.BVV(8, 32))
然后利用BVS创建一个符号位向量，作为符号化的传入字符串传入我们之前设定好的缓冲区地址中，这里继续利用`memory.store`接口
    password = claripy.BVS('password', 8*8)
    initial_state.memory.store(buffer_pointer, password)
这里判断我们路径正确的方法有两种
  * 同我们之前Hook部分一样，Hook判断部分
  * 搜索函数执行完的返回地址，然后根据诺正确则EAX的值不为0，添加约束条件求解
这里我们选用了第二种方式
    success_address = base + 0x783
    simulation.explore(find=success_address)
之后的部分同之前的题目类似，不再赘述
## 15_angr_arbitrary_read
这题如题主要是学习如何利用Angr实现内存地址的任意读，和CTF中的PWN题很像，这里的例子也都是很简单的漏洞利用
首先检测一下文件：
    syc@ubuntu:~/Desktop/TEMP$ checksec 15_angr_arbitrary_read
    [*] '/home/syc/Desktop/TEMP/15_angr_arbitrary_read'
        Arch:     i386-32-little
        RELRO:    Partial RELRO
        Stack:    No canary found
        NX:       NX enabled
        PIE:      No PIE (0x8048000)
我们用IDA打开这个文件，看一看函数：
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      char v4; // [esp+Ch] [ebp-1Ch]
      char *s; // [esp+1Ch] [ebp-Ch]
      s = try_again;
      print_msg();
      printf("Enter the password: ");
      __isoc99_scanf("%u %20s", &key, &v4);
      if ( key == 19511649 )
        puts(s);
      else
        puts(try_again);
      return 0;
    }
刚开始拿到这题我们是有点懵逼的，因为太简单了，不懂利用点在哪里，其实我们只要铭记所有题目的核心关键是输出“Godd Job”
我们看一下puts函数的用法
    int puts(const char *string);
传入的是一个字符串指针，我们所有题目的目标都是最后获得输出Good
Job，这题单单看反汇编代码无法发现如何获得正确输出，回想一下标题任意读，我们可以发现这题的关键是修改s处内存的指针地址，然后搜索一下程序的字符串表
发现程序中存在”Good Job.”字符串验证了我们之前的想法，我们目前需要做的事情就是把s存储的地址修改为Good Job所在的地址即
**0x594e4257**
那我们如何修改呢，视线回到充满着漏洞和内存泄漏的scanf函数，观察一下v4的栈结构
可以发现v4和s在内存上是相邻的，且只相差20地址，回到scanf函数
    __isoc99_scanf("%u %20s", &key, &v4);
允许我们输入20个字符，存在越界写的问题，可输入的字符串刚刚好可以让我们覆盖到 `s`，这就给了我们可以修改s字符的机会