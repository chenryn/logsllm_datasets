# ZeroLogon的利用以及分析
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
作者：daiker & wfox [@360Linton](https://github.com/360Linton "@360Linton")-Lab
在今年9月份，国外披露了CVE-2020-1472(又被叫做ZeroLogon)的漏洞详情，网上也随即公开了Exp。是近几年windows上比较重量级别的一个漏洞。通过该漏洞，攻击者只需能够访问域控的445端口，在无需任何凭据的情况下能拿到域管的权限。该漏洞的产生来源于Netlogon协议认证的加密模块存在缺陷，导致攻击者可以在没有凭证的情况情况下通过认证。该漏洞的最稳定利用是调用netlogon中RPC函数NetrServerPasswordSet2来重置域控的密码，从而以域控的身份进行Dcsync获取域管权限。
## 0x00 漏洞的基本利用
首先来谈谈漏洞的利用。
###  1\. 定位域控
在我们进入内网之后，首先就是快速定位到域控所在的位置。下面提供几种方法
1、批量扫描389端口。
如果该机器同时开放着135,445,53有很大概率就是域控了，接下来可以通过nbtscan，smbverion，oxid，ldap来佐证
2、如果知道域名的话，可以尝试通过dns查询
当然这种也有很大的偶然性，需要跟域共享一套DNS，在实战中有些企业内网会这样部署，可以试试。
Linux下命令有
    dig 域名  ns 
    dig _ldap._tcp.域名  srv
Windows下命令有
    nslookup –qt=ns 域名
    Nslookup -type=SRV _ldap._tcp.域名
3、如果我们控制了一台域成员机器，可以直接查询。
​ 以下是一些常见的查询命令
    net time /domain
    net group "Domain controllers" /domain 
    dsquery server -o rdn
    adfind -sc dclist
    Nltest /dclist:域名
###  2\. 重置域控密码
这里利用[CVE-2020-1472](https://github.com/dirkjanm/CVE-2020-1472)来重置域控密码。注意，这里是域控密码，不是域管的密码。是域控这个机器用户的密码。可能对域不是很熟悉的人对这点不是很了解。在域内，机器用户跟域用户一样，是域内的成员，他在域内的用户名是机器用户+$(如DC2016\$)，在本地的用户名是SYSTEM。
机器用户也是有密码的，只不过这个密码我们正常无感，他是随机生成的，密码强度是120个字符，高到无法爆破，而且会定时更新。
我们通过`sekurlsa::logonPasswords`就可以看到机器用户的密码
在注册表`HKLM\SYSTEM\CurrentControlSet\Services\Netlogon\Parameters`
`DisablePasswordChange`决定机器用户是否定时更新密码，默认是0，定时更新
`MaximumPasswordAge`决定机器用户更新的时间，默认是30天。
接下来开始利用
命令在`python cve-2020-1472-exploit.py 机器名 域控IP`
这一步会把域控DC2016(即DC2016\$用户)的密码置为空，即hash为`31d6cfe0d16ae931b73c59d7e0c089c0`
接下来使用空密码就可以进行Dcsync(直接登录不行吗？在拥有域控的机器用户密码的情况下，并不能直接使用该密码登录域控，因为机器用户是不可以登录的，但是因为域控的机器用户具备Dcsync特权，我们就可以滥用该特权来进行Dcsync)
这里面我们使用impacket套件里面的`secretsdump`来进行Dcsync。
    python secretsdump.py   test.local/DC2016\$@DC2016    -dc-ip  192.168.110.16   -just-dc-user test\\administrator -hashes 31d6cfe0d16ae931b73c59d7e0c089c0:31d6cfe0d16ae931b73c59d7e0c089c0
###  3\. 恢复脱域的域控
在攻击过程中，我们将机器的密码置为空，这一步是会导致域控脱域的，具体原因后面会分析。其本质原因是由于机器用户在AD中的密码(存储在ntds.dic)与本地的注册表/lsass里面的密码不一致导致的。所以要将其恢复，我们将AD中的密码与注册表/lsass里面的密码保持一致就行。这里主要有三种方法
1、从注册表/lsass里面读取机器用户原先的密码，恢复AD里面的密码
我们直接通过`reg save`命令 将注册表里面的信息拿回本地，通过secretsdump提取出里面的hash。
或者使用mimikatz的`sekurlsa::logonpassword`从lsass里面进行抓取
可以使用[CVE-2020-1472](https://github.com/dirkjanm/CVE-2020-1472)底下的restorepassword.py来恢复
也可使用[zerologon](https://github.com/risksense/zerologon)底下的reinstall_original_pw.py来恢复，这个比较暴力，再打一次，计算密码的时候使用了空密码的hash去计算session_key。
可以发现AD里面的密码已经恢复如初了
2、从ntds.dict里面读取AD历史密码，然后恢复AD里面的密码
只需要加 secretsdump里面加`-history`参数就行
这个不太稳定，我本地并没有抓到历史密码
3、一次性重置计算机的机器帐户密码。(包括AD，注册表，lsass里面的密码)。
这里使用一个powershell 的cmdlet`Reset-ComputerMachinePassword`,他是微软在计算机脱域的情况下给出的一种解决方案。
可以一次性重置计算机的机器帐户密码。(包括AD，注册表，lsass里面的密码)。
我们用之前dcsync获取的域管权限登录域控。
执行`powershell Reset-ComputerMachinePassword`
可以看到三者的hash已经保持一致了
## 0x01 漏洞分析
###  1、netlogon 用途
Netlogon是Windows
Server进程，用于对域中的用户和其他服务进行身份验证。由于Netlogon是服务而不是应用程序，因此除非手动或由于运行时错误而停止，否则Netlogon会在后台连续运行。Netlogon可以从命令行终端停止或重新启动。其他机器与域控的netlogon通讯使用RPC协议MS-NRPC。
MS-NRPC指定了Netlogon远程协议，主要功能有基于域的网络上的用户和计算机身份验证；为早于Windows
2000备份域控制器的操作系统复制用户帐户数据库；维护从域成员到域控制器，域的域控制器之间以及跨域的域控制器之间的域关系；并发现和管理这些关系。
我们在MS-NRPC的文档里面可以看到为了维护这些功能所提供的RPC函数。机器用户访问这些RPC函数之前会利用本身的hash进行校验，这次的问题就出现在认证协议的校验上。
###  3、IV全为0导致的AES_CFB8安全问题
来看下AES_CFB8算法的一个安全问题。
首先说下CFB模式的加解密
CFB是一种分组密码，可以将块密码变为自同步的流密码。
其加解密公式如下
既将明文拆分为N份，C1，C2，C3。
每一轮的密文的计算是，先将上一轮的密文进行加密(在AES_CFB里面是使用AES进行加密)，然后异或明文，得到新一轮的密文。
这里需要用到上一轮的密文，由于第一轮没有上一轮。所以就需要一个初始向量参与运算，这个初始向量我们成为IV。
下面用一张图来具体讲解下。
这里的IV是`fab3c65326caafb0cacb21c3f8c19f68`
明文是`0102030405060708`
第一轮没有上一轮，需要IV参与运算。那么第一轮的运算就是。
E(`fab3c65326caafb0cacb21c3f8c19f68`) = `e2xxxxxxxxxxxxxxxxxxxxxxxxxxxxx`
然后e2与明文01异得到密文e3。
第二轮的密文计算是，先将第一轮的密文进行AES加密，然后异或明文，密文。
第一轮的密文就是`(没有fa了)b3c65326caafb0cacb21c3f8c19f68`+`e2`=`b3c65326caafb0cacb21c3f8c19f68e2`
E(`b3c65326caafb0cacb21c3f8c19f68e2`=`9axxxxxxxxxxxxxxxxxxxxxxxxxxxxx`
然后91与明文异或得到密文98
我们用一个表格来表示这个过程(为什么E(fab3c65326caafb0cacb21c3f8c19f68)=`e2xxxxxxxxxxxxxxxxxxxxxxxxxxxxx？这点大家不用关心，AES
key不一定，计算的结果也不一定，这里是假设刚好存在某个key使得这个结果成立)
明文内容 | 参与AES运算的上一轮密文 | E(参与AES运算的上一轮密文) | 加密后的密文 |  
---|---|---|---|---  
`01` | `fab3c65326caafb0cacb21c3f8c19f68` | `e2xxxxxxxxxxxxxxxxxxxxxxxxxxxxx`
| `01^e2=e3` |  
`02` | `b3c65326caafb0cacb21c3f8c19f68e3` | `9axxxxxxxxxxxxxxxxxxxxxxxxxxxxx`
| `02^9a=98` |  
`03` | `c65326caafb0cacb21c3f8c19f68e398` | `f6xxxxxxxxxxxxxxxxxxxxxxxxxxxxx`
| `03^f6=f5`  
最后就是明文是`0102030405060708`经过八轮运算之后得到`e39855xxxxxxxxxxxxxxxxxxxxxxxxx`
这里有个绕的点是，每一轮计算的值是8位，既0x01,0x02。(每个16进制数4位)。因为是AES_CFB8。
而每轮AES运算的是128位(既16字节),因为这里是AES128。
我们观察每轮`参与AES运算的上一轮密文`。
第一轮是``fab3c65326caafb0cacb21c3f8c19f68`。第二轮的时候是往后移八位，既减去`fa`得到`b3c65326caafb0cacb21c3f8c19f68`，再加上第一轮加密后的密码`e3`得到`b3c65326caafb0cacb21c3f8c19f68`。
这个时候我们考虑一种极端的情况。
当IV为8个字节的0的时候，既IV=`000000000000000000000000000000`
那么新的运算就变成
明文内容 | 参与AES运算的上一轮密文 | E(参与AES运算的上一轮密文) | 加密后的密文 |  
---|---|---|---|---  
`01` | `000000000000000000000000000000` | `a5xxxxxxxxxxxxxxxxxxxxxxxxxxxxx` |
`01^a5=a4` |  
`02` | `0000000000000000000000000000a4` | `8bxxxxxxxxxxxxxxxxxxxxxxxxxxxxx` |
`02^8b=89` |  
`03` | `00000000000000000000000000a489` | `11xxxxxxxxxxxxxxxxxxxxxxxxxxxxx` |
`03^11=12`  
大家可以看到`参与AES运算的上一轮密文`的值是不断减去最前面的00，不断加入密文。
只要key固定，那么E(X)的值一定是固定的。
那么是不是在key固定的情况下，只要我保证`参与AES运算的上一轮密文`是固定的，那么`E(参与AES运算的上一轮密文)`一定是固定的。
`参与AES运算的上一轮密文`每轮是怎么变化的。
`000000000000000000000000000000` -> `0000000000000000000000000000a4` ->
`00000000000000000000000000a489`。
前面的00不断减少，后面不断加进密文。
那么我是不是只需要保证不断加进来的值是00,`参与AES运算的上一轮密文`就一直是`000000000000000000000000000000`。也就是说现在只要保证每一轮`加密后的密文`是`00`,那么整个表格就不会变化。最后得到的密文就是`000000000000000000000000000000`.。
要保证每一轮`加密后的密文`是`00`,只需要每一轮的`明文内容`和`E(参与AES运算的上一轮密文)的前面8位`一样就行。(两个一样的的数异或为0)
我们来看下这个表格。
明文内容 | 参与AES运算的上一轮密文 | E(参与AES运算的上一轮密文) | 加密后的密文 |  
---|---|---|---|---  
`XY` | `000000000000000000000000000000` | `XYxxxxxxxxxxxxxxxxxxxxxxxxxxxxx` |
`XY^XY=00` |  
`XY` | `000000000000000000000000000000` | `XYxxxxxxxxxxxxxxxxxxxxxxxxxxxxx` |
`XY^XY=00` |  