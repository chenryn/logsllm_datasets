title:Secure text processing with applications to private DNA matching
author:Jonathan Katz and
Lior Malka
Secure Text Processing with Applications to
Private DNA Matching∗
Jonathan Katz
University of Maryland
College Park, MD
PI:EMAIL
ABSTRACT
Motivated by the problem of private DNA matching, we
consider the design of eﬃcient protocols for secure text pro-
cessing. Here, informally, a party P1 holds a text T and a
party P2 holds a pattern p and some additional information
y, and P2 wants to learn {f (T, j, y)} for all locations j where
p is found as a substring in T . (In particular, this generalizes
the basic pattern matching problem.) We aim for protocols
with full security against a malicious P2 that also preserve
privacy against a malicious P1 (i.e., one-sided security). We
show how to modify Yao’s garbled circuit approach to obtain
a protocol where the size of the garbled circuit is linear in the
number of occurrences of p in T (rather than linear in |T|).
Along the way we show a new keyword search protocol that
may be of independent interest.
Categories and Subject Descriptors
C.2.0 [Computer-Communication Networks]: General—
security and protection
General Terms
Security, Theory
1.
INTRODUCTION
Text-processing algorithms are fundamental to computer
science. They are used on the Internet to classify web pages,
monitor traﬃc, and support search engines. In the ﬁeld of
bio-informatics they play a critical role in DNA matching
and analysis. This paper studies text processing in the set-
ting of secure two-party computation. We consider the sce-
nario where a party P1 holds a text T and a party P2 holds a
pattern p and possibly some additional information y. The
goal is to process T based on p and y, with P2 learning
∗Research supported by NSF CAREER award #0447075
and DARPA. The contents of this paper do not necessarily
reﬂect the position or the policy of the US Government, and
no oﬃcial endorsement should be inferred.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’10, October 4–8, 2010, Chicago, Illinois, USA.
Copyright 2010 ACM 978-1-4503-0244-9/10/10 ...$10.00.
Lior Malka
University of Maryland
College Park, MD
PI:EMAIL
nothing more than the agreed-upon result (and P1 learning
nothing about p or y).
In recent years, several eﬃcient two-party protocols for
various tasks related to text-processing have been given; we
provide a more complete discussion further below. None
of the existing solutions, however, appears to be ﬂexible or
general enough to encompass natural problems that arise,
e.g., in private DNA matching (which was the motivation
for this work). By way of illustration, let Σ = {A,C,T,G}
and T, p ∈ Σ∗ (where T represents a DNA sequence and p
represents a nucleotide pattern). Let (cid:96)max(T, p) ≥ 0 denote
the largest integer (cid:96)(cid:48) for which p(cid:96)(cid:48)
appears as a substring
in T . For integers , (cid:96), deﬁne
(cid:189)
M (T, p, , (cid:96)) =
1 |(cid:96)max(T, p) − (cid:96)| ≤ 
0 otherwise
.
(1)
Say P1 holds T , while P2 holds a pattern p and y = (cid:104), (cid:96)(cid:105) as
additional information; P2 wants to compute M (T, p, , (cid:96)).
This sort of computation is exactly what is used in the
Combined DNA Index System1 (CODIS), run by the FBI
for DNA identity testing. Existing protocols for secure text
processing do not appear to readily yield solutions for this
sort of problem.
Faced with any problem in secure two-party computation,
the ﬁrst thing to check is whether a generic approach based
on Yao’s garbled circuit [21] might be applicable. Indeed, in
recent years it has been demonstrated [16, 15, 19, 18] that
secure two-party protocols based on Yao’s garbled circuit ap-
proach may be practical when the function being computed
can be expressed as a small boolean circuit. Unfortunately,
that is not the case here, at least for the applications we are
interested in where |T| can be large.
To see why, consider one natural circuit for computing M .
Let m = |p| denote the length of the pattern, and assume m
is known. Fixing T , let Ti denote the m-character substring
of T beginning at position i. For i ∈ {1, . . . ,|T| − m + 1},
deﬁne (cid:96)i ≥ 1 to be the largest integer such that T (cid:96)i
i occurs
as a substring of T beginning at position i. (Observe that
P1 can pre-compute (cid:96)i for all i without any interaction with
P2.) Deﬁne next the basic circuit Bi that takes inputs from
both parties and returns 1 iﬀ both |(cid:96)i − (cid:96)| ≤  and Ti = p
(cf. Figure 1(a)). Finally, M can be expressed as the OR of
the outputs of all the Bi (cf. Figure 1(b)).
The conclusion of the exercise is this: even if the circuit Bi
for computing the “basic” functionality is small, the circuit
for computing the “actual” functionality (M in this case) is
1http://www.fbi.gov/hq/lab/codis.
4850/1
0/1
∧
∆((cid:96)i, (cid:96), )
=
Ti
(cid:96)

(cid:96)i
p
(a) The basic circuit B
·
B
∨
B
∨
·
0/1
·
·
∨
·
·
B
B
(b) The combined circuit C
Figure 1: A circuit computing M (cf. Equation (1)).
large, and in particular has size O(|T|−m+1) (since it is the
OR of |T| − m + 1 smaller circuits). In applications where
|T| is large, then, applying generic approaches will lead to
ineﬃcient protocols.
Let n = |T| be the length of T . Our main observation is
that in many cases there is no pattern that appears in the
text T more than some bounded number of times, and this
bound may be much smaller than n. This gives hope that
instead of duplicating the basic circuit O(n) times, we can
use only as many copies as necessary. The question then
is how to achieve this without having P1 learn something
about the pattern p held by P2. We explain next how this
is possible.
Assume now, for simplicity, that each m-character pattern
appears at most once in T . Our idea is to de-couple the “pat-
tern matching” portion of the computation (e.g., the search
for a location i such that Ti = p) from the subsequent com-
putation of the “basic” circuit. In a bit more detail (though
still somewhat informally), P1 prepares a garbled version of
the basic circuit and sends it to P2. Recall, this basic circuit
takes inputs p, (cid:96),  from P2, and inputs Ti, (cid:96)i from P1. Note
that we only need to evaluate this circuit for the position i
(if one exists) for which Ti = p. To exploit this, we have
P1 prepare appropriate input-wire labels corresponding to
every possible match; i.e., it prepares input-wire labels for
each pair (Ti, (cid:96)i), for i = 1 to n − m + 1. The parties then
use a variant of keyword search that allows P2 to learn the
appropriate input-wire labels only for i such that Ti = p.
(If no such i exists, then P2 learns this fact and simply out-
puts 0.) The parties also use oblivious transfer, as usual,
to enable P2 to learn the input-wire labels corresponding to
its own inputs p, (cid:96), . The net result is that P2 is able to
evaluate the garbled circuit for the “right” set of inputs and
thereby obtain the desired result of the computation. Note
that, besides the keyword search sub-routine, the rest of the
protocol has complexity proportional the size |B| of the ba-
sic circuit, rather than proportional to n·|B|) as in the naive
approach. (In general the rest of the protocol would have
complexity proportional to rmax · |B|, where rmax ≤ n is an
upper bound on the number of repetitions of any pattern,
as opposed to n · |B|.)
1.1 Organization of the Paper
In Section 2 we introduce some functionalities we will
rely on, and brieﬂy review the (standard) deﬁnition of one-
sided security. We describe protocols for some basic text-
processing tasks in Section 3. In that section, which serves
as a warm-up to our main results, we ﬁrst (re-)consider the
task of keyword search [4] and show an immediate appli-
cation to the problem of pattern matching. Our resulting
pattern-matching protocol improves in some respects on the
protocol of Hazay and Lindell [9]; we defer further discus-
sion to that section. We also observe that our approach
extends to yield protocols for a wide class of text-processing
problems; speciﬁcally, it enables computation of any func-
tionality where a party P1 holds a text T and a party P2
party has a pattern p, and P2 should learn {f (T, i) | Ti = p}
for some arbitrary function f . We give a few applications
where the desired functionality can be written in this way.
Our main result is described in Section 4. There, we give
a protocol that can securely compute any functionality of
the form described with complexity (excepting the keyword-
search sub-routine) linear in an upper bound on the number
of occurrences of p in T (rather than linear in |T|). We
then discuss how to apply this protocol to text-processing
problems such as approximate tandem repeats (motivated
by DNA matching, as described previously).
1.2 Related Work
Broadly speaking, there are two approaches to construct-
ing protocols for secure computation. Generic protocols can
be used to evaluate arbitrary functions, given a descrip-
tion of the function as a circuit; special-purpose protocols
are tailored to speciﬁc functions of interest. Yao’s “garbled
circuit” approach [21] (extended in [8] to handle malicious
adversaries) gives a generic protocol for secure two-party
computation. In recent years several implementations and
improvements of Yao’s garbled circuit protocol have been
shown [16, 10, 14, 15, 19, 18]. Regardless of any improve-
ments, however, a fundamental limitation of this approach
is that the garbled circuit has size linear in the size of the
circuit being computed.
More eﬃcient, special-purpose protocols have been devel-
oped for several functionalities of interest. Several eﬃcient
protocols for keyword search are known [4, 12, 9, 3]; there
also exist eﬃcient protocols for pattern matching [20, 9, 6]
but, as discussed previously, these protocols do not seem
to extend to more complex functionalities such as the ones
we consider here. While several researchers have also inves-
tigated speciﬁc problems related to DNA matching [2, 20,
11, 5], none of these works seem to apply to our speciﬁc
problem. Finally, we also mention recent work on oblivious
evaluation of ﬁnite automata [20, 5, 6]. Applying such pro-
tocols directly to our setting seems to yield less eﬃcient pro-
tocols. Moreover, our approach allows for the computation
of functions that cannot be computed by ﬁnite automata.
4862. PRELIMINARIES
Throughout, we use k to denote the security parameter.
We rely on secure protocols for several functionalities that
we brieﬂy describe here. In all cases, we use these functional-
ities in a black-box manner, and so can use any of the known
protocols for securely computing these functionalities. For
concreteness, we note that eﬃcient constructions of all the
necessary protocols (with varying security guarantees) exist
based on the decisional Diﬃe-Hellman assumption (e.g., [1,
17, 4, 13]).
Oblivious transfer (OT). In a 1-out-of-2 (string) OT pro-
tocol, one party holds two equal-length strings m0, m1 and
the second party holds a bit b; the second party learns mb
and the ﬁrst party learns nothing. For one of our protocols
we use a parallel variant of the OT functionality, where one
party holds k pairs of strings ((m1