``` literallayout
# pcs resource create VirtualIP ocf:heartbeat:IPaddr2 ip=192.168.0.99 cidr_netmask=24 nic=eth2
```
默认情况下，这个命令会创建这些操作。
``` literallayout
Operations: start interval=0s timeout=20s (VirtualIP-start-timeout-20s)
            stop interval=0s timeout=20s (VirtualIP-stop-timeout-20s)
            monitor interval=10s timeout=20s (VirtualIP-monitor-interval-10s)
```
要改变停止超时操作，请执行以下命令。
``` literallayout
# pcs resource update VirtualIP op stop interval=0s timeout=40s
# pcs resource config VirtualIP
 Resource: VirtualIP (class=ocf provider=heartbeat type=IPaddr2)
  Attributes: ip=192.168.0.99 cidr_netmask=24 nic=eth2
  Operations: start interval=0s timeout=20s (VirtualIP-start-timeout-20s)
              monitor interval=10s timeout=20s (VirtualIP-monitor-interval-10s)
              stop interval=0s timeout=40s (VirtualIP-name-stop-interval-0s-timeout-40s)
```
:::
::: section
::: titlepage
# []{#assembly_resource-monitoring-operations-configuring-and-managing-high-availability-clusters.html#proc_configuring-global-resource-operation-defaults-resource-monitoring-operations}配置全局资源操作默认 {.title}
:::
从 Red Hat Enterprise Linux 8.3 开始，您可以使用
`pcs resource op defaults update`{.literal} 命令为所有资源更改默认值。
以下命令为所有监控操作设置 `超时`{.literal} 值 240 秒的全局默认值。
``` literallayout
# pcs resource op defaults update timeout=240s
```
原始 `pcs resource op defaults name=value`{.literal}
命令，它为之前版本中所有资源设置资源操作默认值，除非配置了多个默认值。但是，`pcs resource op defaults update`{.literal}
现在是 命令的首选版本。
::: section
::: titlepage
## []{#assembly_resource-monitoring-operations-configuring-and-managing-high-availability-clusters.html#_overriding_resource_specific_operation_values}覆盖特定于资源的操作值 {.title}
:::
请注意，只有在集群资源定义中没有指定该选项时，集群资源才会使用全局默认值。默认情况下，资源代理为所有操作定义
`timeout`{.literal} 选项。要接受全局操作超时值，您必须明确地创建没有
`timeout`{.literal} 选项的集群资源，或者您必须通过更新集群资源来删除
`timeout`{.literal} 选项，如以下命令所示。
``` literallayout
# pcs resource update VirtualIP op monitor interval=10s
```
例如，在为所有监控操作设置了一个 240 秒的 `timeout`{.literal}
值，并更新集群资源 `VirtualIP`{.literal} 来删除 `monitor`{.literal}
操作的超时值后，资源 `VirtualIP`{.literal} 的
`start`{.literal}、`stop`{.literal} 和 `monitor`{.literal}
操作的超时值将分别为 20s、40s 和
240s。这里，超时操作的全局默认值仅应用于 `monitor`{.literal}
操作，其中默认的 `timeout`{.literal} 选项已被上一条命令删除。
``` literallayout
# pcs resource config VirtualIP
 Resource: VirtualIP (class=ocf provider=heartbeat type=IPaddr2)
   Attributes: ip=192.168.0.99 cidr_netmask=24 nic=eth2
   Operations: start interval=0s timeout=20s (VirtualIP-start-timeout-20s)
               monitor interval=10s (VirtualIP-monitor-interval-10s)
               stop interval=0s timeout=40s (VirtualIP-name-stop-interval-0s-timeout-40s)
```
:::
::: section
::: titlepage
## []{#assembly_resource-monitoring-operations-configuring-and-managing-high-availability-clusters.html#_changing_the_default_value_of_a_resource_operation_for_sets_of_resources}更改一组资源操作的默认值 {.title}
:::
从 Red Hat Enterprise Linux 8.3 开始，您可以使用
`pcs resource op defaults set create 命令创建`{.literal}
多个资源操作默认值集合，该命令允许您指定包含 `资源和`{.literal}
操作表达式的规则。在 RHEL 8.3
`中`{.literal}，您使用这个命令指定的规则只允许资源和操作表达式，包括
`和`{.literal} `和`{.literal} 括号。在 RHEL 8.4 及更高版本中，Pacemaker
支持所有其他规则表达式也被允许。
使用这个命令，您可以为特定类型的所有资源配置默认资源操作值。例如，在使用捆绑包时，可以配置
Pacemaker 创建的隐式 `podman`{.literal} 资源。
以下命令为所有 `podman`{.literal} 资源的所有操作设置默认的超时值
90s。在本例中，`::podman`{.literal} 表示类型为 `podman`{.literal}
的任何类（任何供应商）的资源。
`id`{.literal}
选项命名资源操作默认值，不强制使用。如果您没有设置这个选项，pc
`s`{.literal} 将自动生成 ID。设置这个值可让您提供更描述性的名称。
``` literallayout
# pcs resource op defaults set create id=podman-timeout meta timeout=90s rule resource ::podman
```
以下命令为所有资源为 `stop`{.literal} 操作设置默认的超时值 120s。
``` literallayout
# pcs resource op defaults set create id=stop-timeout meta timeout=120s rule op stop
```
对于特定类型的所有资源，可以为特定的操作设置默认值。以下示例为所有
`podman`{.literal} 资源为 `stop`{.literal} 操作设置了一个默认的超时值
120s。
``` literallayout
# pcs resource op defaults set create id=podman-stop-timeout meta timeout=120s rule resource ::podman and op stop
```
:::
::: section
::: titlepage
## []{#assembly_resource-monitoring-operations-configuring-and-managing-high-availability-clusters.html#_displaying_currently_configured_resource_operation_default_values}显示当前配置的资源操作默认值 {.title}
:::
`pcs resource op defaults`{.literal}
命令显示目前配置的资源操作默认值的列表，包括您指定的任何规则。
以下命令显示集群的默认操作值，为所有 `podman`{.literal}
资源的所有操作都设置了默认的超时值 90s，并为一组资源操作默认值设置为
`podman-timeout`{.literal}。
``` literallayout
# pcs resource op defaults
Meta Attrs: podman-timeout
  timeout=90s
  Rule: boolean-op=and score=INFINITY
    Expression: resource ::podman
```
以下命令显示集群的默认操作值，为所有 `podman`{.literal} 资源的
`stop`{.literal} 操作设置了默认超时值 120s，并为一组资源操作默认设置为
`podman-stop-timeout`{.literal}。
``` literallayout
# pcs resource op defaults
Meta Attrs: podman-stop-timeout
  timeout=120s
  Rule: boolean-op=and score=INFINITY
    Expression: resource ::podman
    Expression: op stop
```
:::
:::
::: section
::: titlepage
# []{#assembly_resource-monitoring-operations-configuring-and-managing-high-availability-clusters.html#proc_configuring-multiple-monitoring-operations-resource-monitoring-operations}配置多个监控操作 {.title}
:::
您可以根据资源代理支持，使用多个监控操作配置单个资源。这样，您可以每分钟执行一次一般的健康检查，而以更高的间隔执行其他更大型的健康检查。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
当配置多个监控器操作时，您必须确保不会同时执行两个操作。
:::
要为支持在不同级别上更深入检查的资源配置额外的监控操作，您需要添加一个
`OCF_CHECK_LEVEL=n`{.literal} 选项。
例如，如果您配置了以下 `IPaddr2`{.literal}
资源，默认情况下，这会创建一个监控操作，间隔为 10 秒，超时值为 20 秒。
``` literallayout
# pcs resource create VirtualIP ocf:heartbeat:IPaddr2 ip=192.168.0.99 cidr_netmask=24 nic=eth2
```
如果虚拟 IP 支持不同的检查，且深度为 10 秒，以下命令可让 Pacemaker 每 10
秒执行一次常规的虚拟 IP 检查，每 60
秒执行更高级的监控检查。（如前所述，您不应该配置额外的监控操作，间隔为
10 秒。）
``` literallayout
# pcs resource op add VirtualIP monitor interval=60s OCF_CHECK_LEVEL=10
```
:::
:::
[]{#assembly_controlling-cluster-behavior-configuring-and-managing-high-availability-clusters.html}
::: chapter
::: titlepage
# []{#assembly_controlling-cluster-behavior-configuring-and-managing-high-availability-clusters.html#assembly_controlling-cluster-behavior-configuring-and-managing-high-availability-clusters}第 21 章 Pacemaker 集群属性 {.title}
:::
集群属性用于控制，当遇到在操作时可能会发生的情况时，集群会如何处理。
::: section
::: titlepage
# []{#assembly_controlling-cluster-behavior-configuring-and-managing-high-availability-clusters.html#ref_cluster-properties-options-controlling-cluster-behavior}集群属性和选项概述 {.title}
:::
下表总结了 Pacemaker
集群属性，显示了属性的默认值以及您可以为这些属性设置的可能值。
另外，还有额外的用于隔离功能的集群属性。有关这些属性的详情，请查看决定隔离设备
[常规属性中的隔离行为的集群属性表。](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_high_availability_clusters/assembly_configuring-fencing-configuring-and-managing-high-availability-clusters#ref_general-fence-device-properties-configuring-fencing){.link}
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
除了本表格中描述的属性外，还有一些由集群软件公开的集群属性。对于这些属性，建议您不要修改其默认值。
:::
::: table
[]{#assembly_controlling-cluster-behavior-configuring-and-managing-high-availability-clusters.html#tb-clusterprops-HAAR}
**表 21.1. 集群属性**
::: table-contents
+----------------------+---------------------+----------------------+
| 选项                 | 默认值              | 描述                 |
+:=====================+:====================+:=====================+
| `ba                  | 0                   | 集群可               |
| tch-limit`{.literal} |                     | 以并行执行的资源操作 |
|                      |                     | 数量。\"正确的\"值取 |
|                      |                     | 决于网络和集群节点的 |
|                      |                     | 速度和负载。默认值为 |
|                      |                     | 0                    |
|                      |                     | ，表示当任何节点有高 |
|                      |                     | CPU                  |
|                      |                     | 负载时，             |
|                      |                     | 集群会动态强制限制。 |
+----------------------+---------------------+----------------------+
| `migrat              | -1（无限）          | 集群允许在节点上并行 |
| ion-limit`{.literal} |                     | 执行的迁移作业数量。 |
+----------------------+---------------------+----------------------+
| `no-quor             | stop                | 当集群               |
| um-policy`{.literal} |                     | 没有仲裁（quorum）时 |
|                      |                     | 该做什么。允许的值： |
|                      |                     |                      |
|                      |                     | \* ignore -          |
|                      |                     | 继续所有资源管理     |
|                      |                     |                      |
|                      |                     | \* freeze -          |
|                      |                     | 继续管理资源         |
|                      |                     | ，但不会从受影响分区 |
|                      |                     | 以外的节点中恢复资源 |
|                      |                     |                      |
|                      |                     | \* stop -            |
|                      |                     | 停止受影响           |
|                      |                     | 集群分区中的所有资源 |
|                      |                     |                      |
|                      |                     | \* suicide -         |
|                      |                     | 隔离受影响           |
|                      |                     | 集群分区中的所有节点 |
|                      |                     |                      |
|                      |                     | \* demote -          |
|                      |                     | 如果集群分区缺少仲   |
|                      |                     | 裁，降级任何提升的资 |
|                      |                     | 源并停止所有其他资源 |
+----------------------+---------------------+----------------------+
| `symmetri            | true                | 指明资源是否可以默   |
| c-cluster`{.literal} |                     | 认在任何节点上运行。 |
+----------------------+---------------------+----------------------+
| `clus                | 60s                 | 在网络               |
| ter-delay`{.literal} |                     | 间进行往返延时（不包 |
|                      |                     | 括操作执行）。\"正确 |
|                      |                     | 的\"值取决于网络和集 |
|                      |                     | 群节点的速度和负载。 |
+----------------------+---------------------+----------------------+
| `stop-orphan-        | true                | 指明是否             |
| resources`{.literal} |                     | 应该停止删除的资源。 |
+----------------------+---------------------+----------------------+
| `stop-orpha          | true                | 指明是否             |
| n-actions`{.literal} |                     | 应该取消删除的动作。 |
+----------------------+---------------------+----------------------+
| `start-failure       | true                | 指明某个节           |
| -is-fatal`{.literal} |                     | 点上启动资源失败是否 |
|                      |                     | 防止了在该节点上进一 |