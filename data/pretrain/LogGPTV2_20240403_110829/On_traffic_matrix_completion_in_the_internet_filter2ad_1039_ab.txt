ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
Ƶ
Ƶ
Ƶ
Ƶ
h
s
h
s
h
s
h
s
ǀ
ǀ
ǀ
ǀ
Ƶ
Ƶ
Ƶ
Ƶ
ǀ
ǀ
ǀ
ǀ
Ƶ
Ƶ
Ƶ
Ƶ
ǀ
ǀ
ǀ
ǀ
Ƶ
Ƶ
Ƶ
Ƶ
ǀ
ǀ
ǀ
ǀ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
DĂƚƌŝǆDďĞĨŽƌĞ/D
;ϭͿ
;ϮͿ
;ϯͿ
;ϰͿ
DĂƚƌŝǆDĂĨƚĞƌ/D
Figure 1: AICMC Example: T is a 4 ×4 data matrix (not shown) of rank k = 1. T’s known elements correspond to the
positions of the 1s in its visibility matrix M (left side of the ﬁgure). The steps of AICMC are: (1) L = {u1}, (2) R = {v2,v4},
(3) L = {u1,u2,u4}, (4) R = {v1,v2,v4}. The algorithm stops at the end of (4). The completed elements are (1,1), (2,1), (2,4),
and (4,2) - 1s shown in bold in M (right side of the ﬁgure).
(b) For every row of M such that there are at least k 1s
in columns from set R, add the row to L. If there
are no such rows, stop.
3. Go to 2.
At completion, an element (i, j) can be recovered if row i is in
L and column j is in R. Thus AICMC allows us to examine an
AS’s visibility matrix, and identify, for each invisible element,
whether it can be recovered at a given rank (or approximate
rank) k. In Figure 1 the recoverable elements are shown on the
right side of the ﬁgure. Note that if an AS can complete its
TM at rank k, it can complete it at any rank r ≤ k.
2.5 Interdomain Topology
A central aspect of our work is establishing a connection
between the AS-level topology of the Internet, and the ability
of individual ASes to do trafﬁc matrix completion. Hence we
rely on the considerable body of work that has characterized
the AS level topology, of which we can only review a portion
here.
At the highest level, the AS graph is usually characterized
as having roughly three distinguishable parts [6, 15, 16, 24].
Forming the center of the graph is a mesh-like core that is a
clique or ‘almost’ a clique. This core is fed by a collection
of ASes in provider-customer relationships that are ‘tree-like’
but not strictly trees. Finally the vast majority of ASes are
stubs, ASes at the edge of the network having no customers
themselves. A number of methods have been proposed for
organizing ASes into a small number of tiers [15, 24].
In our work we seek a ﬁner-grained and less arbitrary mea-
sure of centrality in the AS graph than tiers, and so we turn to
a tool for graph analysis called k-core decomposition 1 [1]. K-
core decomposition separates the vertices of a graph into suc-
cessive sets called “shells”. These are operationally deﬁned:
the 1-shell consists of all nodes of degree 1, plus all nodes that
become degree-1 when degree-1 nodes are removed. Remov-
ing all such nodes leaves only nodes of degree-2 and higher,
and the process repeats. As described in [6], this is a parameter-
free way of characterizing the AS graph, and it naturally iden-
tiﬁes a ‘nucleus’ (innermost shell) of the graph which is ob-
served to consist of major provider ISPs, major IXPs, CDNs
and content providers. In our data the nucleus is shell 58, con-
taining 120 ASes. Each node in the nucleus is connected to
about 70% of the other nodes.
1Note that parameter k used in k-core decomposition repre-
sents degree order It is unrelated to rank parameter k we use
throughout the paper.
Our knowledge of the AS level graph is derived from mea-
surements, and is generally understood to be imperfect. A
good review of the issues is presented in [10], but a persistent
concern is that maps of the AS graph miss links, in particular
peering links [7]. Missing links may result in some inaccuracy
in certain graph metrics we use: k-core decomposition, degree,
number of peers and number of customers. For that reason
we do not base results on precise values of these metrics, but
rather focus on the trends seen as these metrics vary. However
missing links do not cause inaccuracies for our key metrics:
completion ability and expected rank (deﬁned below). This is
because (as explained in Section 4.1) we select a subset of all
AS paths in such a way that these metrics are known with high
conﬁdence.
Finally, a portion of our results relies on the classiﬁcation
of AS-AS links as customer-provider or peer-peer (we do not
consider sibling-sibling links). For this we rely on the body
of knowledge that has been built up on how to do this classiﬁ-
cation since [14], and in particular rely on the comprehensive
approach used in [11].
3. ANALYSIS
Our ﬁrst step is to develop high-level insight about the re-
lationship between graph topologies and the opportunity for
trafﬁc inference. We do that by establishing provable lower
bounds on trafﬁc matrix completion in various idealized net-
works. These models necessarily ignore important aspects of
the AS level Internet (e.g., they assume shortest-path, sym-
metric routing) but our goal here is to build intuition. Later, in
Sections 4 and 5, we will examine real AS level graphs.
Each of our idealized models starts with a particular graph
G = (V,E), with |V | = n. Each node vi ∈ V sends one traf-
ﬁc ﬂow to every node vj ∈ V (including vi itself). All ﬂows
travel over shortest paths, assuming edges have unit weight.
In each graph we designate an observer node, denoted vo; we
will analyze the observer’s ability to do trafﬁc inference.
The information available to the observer node is summa-
rized in a visibility matrix M of size n ×n. We set Mij = 1 if
the ﬂow from vi to vj passes through vo and so is measurable
by vo; otherwise we set Mij = 0. By convention we assign vo
to matrix index 1. Thus the ﬁrst row and the ﬁrst column of M
are always fully populated with 1s, since all trafﬁc that origi-
nates or terminates at vo is visible to vo. Furthermore, because
of our assumptions about ﬂow routing, M is symmetric.
To ﬁnd a lower bound on the trafﬁc inference capabilities of
vo, we apply Abstract ICMC (AICMC) to M as described in
402ǀ
Ž
ǀ
ŶͲϭ
ǀ
ϭ
ǀ
ϭ
ϭ
ϭ
ǀ
ŶͲϭ
ϭ
ϭ
ϭ
ϭ
Ϭ
ǀ
Ž
ϭ
ϭ
ϭ
ϭ
ϭ
ϭϭ
ǀ
Ž
ǀ
ϭ
ǀ
ŶͲϭ
ŽƚŚĞƌƐ
sŽ
ƌŝŐŚƚ ůĞĨƚ ŽƚŚĞƌƐ
sŽ
ϭϭ
ϭ
ϭ
ƌŝŐŚƚ
ůĞĨƚ
ŽƚŚĞƌƐ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
Ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
Ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
Ϭ
ϭ
ǀŽ
ůĞĨƚ
ƌŝŐŚƚ
ĐŚŝůĚƌĞŶ
Figure 2: Full mesh network.
Figure 3: Example tree.
Section 2.4. Using AICMC we can identify invisible elements
of the network-wide trafﬁc matrix that can be recovered by vo,
assuming the trafﬁc matrix is rank k. For simplicity, we ask
the following question in each case: For what values of k can
vo recover the entire TM? Larger values of k imply a greater
ability to do TM completion.
We study a progression of idealized networks, starting with
highly decentralized networks, then moving to trees and tree-
like networks, and ﬁnally considering some more specialized
topologies that are inspired by the connection pattern of ASes
in the Internet.
3.1
We study three idealized networks: a clique, and two trees
that differ in terms of size and degree.
Clique: In a clique (a full mesh), there is a direct link be-
tween every pair of nodes (Figure 2). As a result, the observer
node vo can only measure ﬂows having itself as either source
or destination, resulting in the visibility matrix shown in the
Figure.
Idealized Networks
PROPOSITION 3.1. Given a full mesh with n nodes, (a) the
observer can complete its TM for k = 1; and (b) the observer
cannot complete its TM at any rank k > 1.
PROOF. For (a): in the initial step we choose the ﬁrst row
of M and set L to that row, i.e. L = {1}. Next, all columns are
added to R, i.e. R = {1, . . . ,n}, since they all have 1s in the
ﬁrst row of M. Finally, all the rest of the rows are added to L,
i.e. L = {1, . . . ,n}, since they all have 1s in the ﬁrst column of
M.
For (b): when k > 1, the initial step chooses k rows of M
and sets L to those rows. However, no choice of k rows yields
more than one column with k 1s, so completion is impossible
at rank k > 1.
Trees: Figure 3 shows an example tree and the visibility ma-
trix of an arbitrary observer node, vo. Node vo has two chil-
dren, which form the roots of its left and right subtrees (ex-
tension to the case where vo has more than two children is
straightforward). Nodes besides vo and its children are re-
ferred to as others. The visibility matrix reﬂects the fact that
the observer can measure trafﬁc between nodes in its subtrees
and others, and trafﬁc between nodes in its right and left sub-
trees. The observer cannot measure trafﬁc ﬂowing only within
the right subtree, or within the left subtree, or among others.
PROPOSITION 3.2. Given a tree containing an observer
node vo with (at least) two children, as in Figure 3, let nr be
the number of nodes in the right subtree, nl be the number of
nodes in the left subtree, and no be the number of other nodes.
ǀ
Ž
ǀ
ŶͲϭ
ǀ
ϭ
ǀ
ϭ
ϭ
ϭ
ǀ
ŶͲϭ
ϭ
ϭ
ϭ
ϭ
Ϭ
ǀ
Ž
ϭ
ϭ
ϭ
ϭ
ϭ
ϭϭ
ǀ
Ž
ǀ
ϭ
ǀ
ŶͲϭ
Figure 4: Mesh-of-Trees
If nr ≥ k − 1, nl ≥ k − 1, and no ≥ k − 1, the observer can
complete its TM at rank k.
PROOF. Let Nl be the indices of the left children, Nr be
the indices of the right children, and No be the indices of the