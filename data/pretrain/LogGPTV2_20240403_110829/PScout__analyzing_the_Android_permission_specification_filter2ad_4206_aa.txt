# PScout: Analyzing the Android Permission Specification

## Authors
- Kathy Wain Yee Au
- Yi Fan Zhou
- Zhen Huang
- David Lie

### Abstract
Modern smartphone operating systems (OSs) have placed a greater emphasis on security and privacy protection. One of the key mechanisms used to protect users is a permission system, which requires developers to declare the sensitive resources their applications will use. Users must agree to these permissions during installation, and the application is constrained to the requested resources at runtime. As these permission systems become more prevalent, questions have arisen about their design and implementation.

In this paper, we analyze the permission system of the Android OS to address some of these questions. Due to incomplete documentation and the need to analyze multiple versions of Android, we developed PScout, a tool that extracts the permission specification from the Android source code using static analysis. PScout overcomes several challenges, including scalability (Android has 3.4 million lines of code), inter-process communication (IPC) for permission enforcement, and abstraction of diverse permission checking mechanisms into a single primitive for analysis.

We used PScout to analyze four versions of Android, from version 2.2 to 4.0. Our main findings are:
- While Android has over 75 permissions, there is little redundancy in the permission specification.
- If applications were restricted to documented APIs, about 22% of non-system permissions would be unnecessary.
- A trade-off exists between enabling least-privilege security with fine-grained permissions and maintaining the stability of the permission specification as the Android OS evolves.

### Categories and Subject Descriptors
D.4.6 [Security and Protection]: Access controls, Information flow controls

### General Terms
Design, Security

### Keywords
Android, Permissions, Smartphone

## 1. Introduction
One of the distinguishing and desirable characteristics of smartphones is their ability to run third-party applications. This capability, combined with their highly personal nature, has raised concerns about the threat they pose to user privacy and security. To address these concerns, many smartphone OSs implement a permission system to control access to sensitive resources.

In this paper, we take initial steps to answer key questions about the Android permission system, the most widely deployed smartphone OS at the time of writing. Specifically, we address:
- The utility of the numerous permissions offered by Android (79 permissions as of Android 4.0) versus a smaller set of coarser permissions.
- The extent to which undocumented APIs require permissions and how commonly they are used by third-party applications.
- The complexity and interconnectedness of the permission specification and API calls.
- The evolution of the Android permission system and its implications for newer OSs like Windows Phone 7 and Boot to Gecko (B2G).

To perform this study, we needed a complete permission specification for multiple Android versions. Unfortunately, Google's documentation is incomplete. The Stowaway project provides some specifications but requires manual effort and is not scalable across versions. Therefore, we developed PScout, a static analysis tool that extracts the permission specification from the Android source code.

Our contributions include:
- Design and implementation of PScout, a version-independent tool that extracts a more complete permission specification than existing methods.
- Measurement of the imprecision introduced by PScout's static analysis using an extensive evaluation methodology.
- Analysis of the Android 4.0 permission system and its evolution across four versions, revealing little redundancy in the specification and the potential to hide about 22% of non-system permissions if only documented APIs are used.

## 2. Background
Android is a middleware OS built on a customized Linux kernel. Applications and system services are implemented in Java and make cross-domain calls via documented APIs. However, third-party developers may also use undocumented APIs. Android heavily uses Inter-Process Communication (IPC) mechanisms, including Intents and Binder, and enforces permissions through the Package Manager Service.

## 3. PScout Design and Implementation
PScout faces the challenge of the large scale of the Android framework. It is designed for scalability, using selective detailed analysis to minimize loss of precision. PScout produces a permission specification that maps API calls to the permissions they may require. The tool leverages the Soot Java bytecode analysis framework and performs three phases of analysis:
1. **Permission Check Identification**: Identifies all permission checks in the Android framework and labels them.
2. **Call Graph Generation**: Builds a call graph over the entire framework, including IPC and RPC.
3. **Backward Reachability Analysis**: Traverses the graph to identify all API calls that could reach a particular permission check.

PScout can extract a permission specification from the Android 4.0 Framework in 33 hours on a typical machine. It focuses on non-system permissions and handles the vast majority of permissions checked in Java, though it cannot capture permissions enforced in native C/C++ code or by the kernel.

### 3.1 Permission Check Identification
Android has three types of operations that depend on permissions:
- **Explicit Functions**: Calls to `checkPermission` function.
- **Intents**: Sending and receiving Intents.
- **Content Providers**: Accessing content providers.

PScout abstracts these into permission checks and uses Soot's def-use analysis to track the usage of permission strings.

## 4. Evaluation
We evaluate the completeness and soundness of PScout's extracted permission specification using an extensive methodology, including comparisons with application developers and automated UI fuzzing.

## 5. Analysis
We analyze the permission specifications of four Android versions, showing little redundancy in the specification and the potential to hide about 22% of non-system permissions if only documented APIs are used. We also find that the Android permission specification is broad but not heavily interconnected.

## 6. Related Work
We discuss related work in the field of Android permission analysis and the limitations of existing tools.

## 7. Conclusion
We conclude with a summary of our findings and the implications for future research and development in Android security.