EDR Is Coming; Hide yo 
Sh!t
@TTimzen
@r00tkillah
Who are we?
Michael “@r00tkillah” Leibowitz
     Topher Timzen (@TTimzen)
NSA Playset
      C# Malware is 
Likelihood of Detection
Initial shell popped
Persistence phase starts
Result of EDR
Analyst
You
The Other Risk Curve (Modified)
Time ->
Likelihood of Detection
Initial shell popped
Persistence phase starts
UEFI
Unified Extensible Firmware Interface (UEFI)
Trusted Platforms UEFI, PI and TCG-based firmware (Zimmer, Dasari, & Brogan, 2009, p. 16)
But Why UEFI Firmware Variables?
Hides payload from AV, and EDR, and requires memory forensics 
to investigate
EDR platform getting your reader binary doesn’t mean anything
Tons of places to hide there! 
●
Test0 E660597E-B94D-4209-9C80-1805B5D19B69 NV+BS+RT
●
Test1 E660597E-B94D-4209-9C80-1805B5D19B69 NV+BS+RT
UEFI Firmware Variables
Authenticated 
●
Secure boot nonsense (PK, KEK, db/dbx)
●
Performs a certificate check when writing variable
Unauthenticated
●
No verification on write 
●
Majority of variables are unauthenticated
UEFI Firmware Variable Attributes
UEFI specification defines variable attributes can be 
●
Non-volatile (NV)
●
Boot services access (BS)
●
Runtime access (RT)
●
Hardware error record (HR)
●
Count based authenticated write access
●
Time based authenticated write access (AT)
Windows Platform
UEFI On Windows 
“Starting with Windows 10, version 1803, Universal Windows apps can use 
GetFirmwareEnvironmentVariable and SetFirmwareEnvironmentVariable (and 
their 'ex' variants) to access UEFI firmware variables”
SE_SYSTEM_ENVIRONMENT_NAME privilege Is required to Read/Write
Administration account with Universal Windows App “required”
https://docs.microsoft.com/en-us/windows/desktop/sysinfo/access-uefi-firmware-variables-from-a-universal-windows-app
Read/Write UEFI Firmware Variable API
dwAttributes
Value
Meaning
VARIABLE_ATTRIBUTE_NON_VOLATILE
0x00000001
The firmware environment variable is stored in 
non-volatile memory (e.g. NVRAM).
VARIABLE_ATTRIBUTE_BOOTSERVICE_ACCE
SS 0x00000002
The firmware environment variable can be 
accessed during boot service.
VARIABLE_ATTRIBUTE_RUNTIME_ACCESS
0x00000004
The firmware environment variable can be 
accessed at runtime.
Note: Variables with this attribute set, must also 
have 
VARIABLE_ATTRIBUTE_BOOTSERVICE_ACCE
SS set.
C++ [&& or ||] C#
C++ is a viable option and was the initial language used, however
●
Too many API calls to Virtual* 
○
Requires RWX memory to be present for execution
○
EDR and AV see these API calls
○
C# can do everything needed with Reflection
●
More difficult to bypass WDAC 
●
C# Allows for easy use of Cobalt Strike + Powerpick
●
Reference code available in repo for both
Steps for Writing UEFI variable
1. Obtain SE_SYSTEM_ENVIRONMENT_NAME 
with SetPriv()
2. Get address of a pinned buffer in C# (payload)
3. Write to UEFI variable with 
SetFirmwareEnvironmentVariableEx()
Steps for Writing UEFI variable
1. Obtain SE_SYSTEM_ENVIRONMENT_NAME with 
SetPriv()
Steps for Writing UEFI variable
2. Get address of a pinned buffer in C# (payload)
Steps for Writing UEFI variable
3. Write to UEFI variable with 
SetFirmwareEnvironmentVariableEx()
Steps for Executing UEFI variable
1. Obtain SE_SYSTEM_ENVIRONMENT_NAME 
with SetPriv()
2. P/Invoke with Virtual(Alloc, Protect) to obtain 
RWX Memory 
3. Obtain UEFI variable payload with 
GetFirmwareEnvironmentVariableEx()
Steps for Reading UEFI variable
1. Obtain SE_SYSTEM_ENVIRONMENT_NAME with 
SetPriv()
Steps for Executing UEFI variable
2. P/Invoke with Virtual(Alloc, Protect) to obtain 
RWX Memory 
C# and P/Invoke Virtual(Alloc, Protect) API Calls
https://www.hybrid-analysis.com/sample/5aba178a512ae2c1c5afccf113c6dc0f80c
47fdeee294781483b8aa07002cf39/5c74860b028838095154dad0
C# and P/Invoke, No No
Steps for Executing UEFI variable
1. Obtain SE_SYSTEM_ENVIRONMENT_NAME 
with SetPriv()
2. P/Invoke RWX Memory 
3. Obtain UEFI variable payload with 
GetFirmwareEnvironmentVariableEx()
Steps for Executing UEFI variable to Evade EDR and AV
1. Obtain SE_SYSTEM_ENVIRONMENT_NAME 
with SetPriv()
2. Reflectively obtain RWX JIT memory page to 
read UEFI variable into
3. Write UEFI variable payload to method ptr with 
GetFirmwareEnvironmentVariableEx()
4. Execute method 
C# with Reflection for Method Ptr Overwrite to Execute 
https://www.tophertimzen.com/blog/dotNetMachineCodeManipulation/
Method Table contains address of JIT stub for a class’s 
methods.
During JIT the Method Table is referenced
Grab Method Ptr as RWX memory location and overwrite it!
C# with Reflection for Method Ptr Overwrite to Execute 
https://www.tophertimzen.com/blog/dotNetMachineCodeManipulation/
2. Reflectively obtain RWX JIT memory page to read UEFI 
variable into
A. Define a method to overwrite
B. JIT the method
C. Obtain ptr to method
C# with Reflection for Method Ptr Overwrite to Execute 
https://www.tophertimzen.com/blog/dotNetMachineCodeManipulation/
A. Define a method to overwrite
C# with Reflection for Method Ptr Overwrite to Execute 
https://www.tophertimzen.com/blog/dotNetMachineCodeManipulation/
B. JIT the method
C. Obtain ptr to method
C# with Reflection for Method Ptr Overwrite to Execute 
https://www.tophertimzen.com/blog/dotNetMachineCodeManipulation/
3. Write UEFI variable payload to method ptr with 
GetFirmwareEnvironmentVariableEx()
4. Execute method
Steps for Infection (Demo)
1. Obtain shell on target
2. Run WriteUEFICSharp
3. Set persistence for ReadUEFICSharp
4. Run ReadUEFICSharp 
Windows Demo
Persistence? 
Exercise up to the reader
WDAC Bypasses are a good means to persist with unsigned 
code
Your payload is in a UEFI variable, GLHF Analyst! 
What About Windows EDR Products?
We saw no relevant information in EDR pertaining to the usage of 
UEFI variables
Startup events are seen without rootkit, but no malicious activity 
reported 
●
AV is clean
●
No Virtual* API Calls
Sinkhole your EDR
https://gist.github.com/tophertimzen/235fbfdf6b2e3cdf255dccb763fdd805
WDAC Bypasses
There has been a lot of research on bypassing WDAC and 
Windows Universal Apps
-
https://posts.specterops.io/arbitrary-unsigned-code-execution-v
ector-in-microsoft-workflow-compiler-exe-3d9294bc5efb
-
https://bohops.com/2019/01/10/com-xsl-transformation-bypassi
ng-microsoft-application-control-solutions-cve-2018-8492/
Singed Code is not a proper mitigation currently in Windows 10
Linux Platform
The Problem Space
The Kernel
Your Sample
EDR
Envisioning The Solution
The Kernel
Your Payload
EDR
Linux Boot Flow
UEFI
      Signed by OEM
Linux Boot Flow
UEFI
shim
      Signed by MSFT
      Signed by OEM
Linux Boot Flow
UEFI
shim
grub
     Signed by distro
      Signed by MSFT
      Signed by OEM
Linux Boot Flow
UEFI
shim
grub
linux
     Signed by distro
      Signed by MSFT
      Signed by OEM
Linux Boot Flow
UEFI
shim
grub
linux
     Signed by distro
      Signed by MSFT
      Signed by OEM
Unsigned and generated on 
system
ramdisk
Linux Boot Flow
UEFI
shim
grub
linux
     Signed by distro
      Signed by MSFT
      Signed by OEM
Unsigned and generated on 
system
ramdisk
EDR
ptrace, Man! man (2) ptrace
+ PTRACE_SETREGS
+ PTRACE_PEEKTEXT, PTRACE_PEEKDATA
+ PTRACE_POKETEXT, PTRACE_POKEDATA
- YAMA
- SELinux/AppArmor/SMACK/TOMOYO/etc
+ Policy applied in userspace!!
Boot Flow, Continued
1
Ramdisk land
Boot Flow, Continued
1
1
exec
Ramdisk land
Rootfs land
Boot Flow, Continued
1
1
exec
Ramdisk land
Rootfs land
EDR
Policy 
load
fanotify, man! man (7) fanotify
DESCRIPTION