title:Introducing Reference Flow Control for Detecting Intrusion Symptoms
at the OS Level
author:Jacob Zimmermann and
Ludovic M&apos;e and
Christophe Bidan
Introducing Reference Flow Control for
Detecting Intrusion Symptoms at the OS Level
Jacob Zimmermann, Ludovic M´e, and Christophe Bidan
{jacob.zimmermann, ludovic.me, christophe.bidan}@supelec.fr
Sup´elec, France
Abstract. This paper presents a novel approach to policy-based detec-
tion of “attacks by delegation”. By exploiting unpredictable behaviour
such as unknown side-eﬀects, race-conditions, buﬀer overﬂows, confused
deputies etc., these attacks aim at achieving their goals (i.e. executing
some illegal operation) as legal consequences of other legitimate opera-
tions. The proposed approach enforces restrictions on whether an opera-
tion can be executed as a consequence of another, in order to detect that
kind of attacks. We propose a proof-of-concept application to a Unix
system and show its ability to detect novel attack scenarii that seek the
same intrusion goals.
1 Introduction
To enforce a given security policy, one has to address two separate problems.
First, the policy has to be implemented using existing mechanisms: access con-
trol, ﬁrewall, authentication system, etc. Then, it is necessary to detect policy
violations, i.e. intrusions, and eventually apply appropriate counter-measures.
Current intrusion detection technology relies mostly on two approaches: signa-
ture based detection and anomaly based detection. These methods have proven
to be fairly eﬀective and are widely used. However, they suﬀer also from sev-
eral problems. A signature-based Intrusion Detection System requires an active
maintenance of its attack database. Novel attacks are generally not detected. An
anomaly-based IDS may generate a high amount of false positives, even if the ob-
served actions are perfectly legitimate [1,2]. In any case, dealing with legitimate
but unplanned behaviour is problematic.
These problems can be addressed in multiple ways. Sophisticated knowledge-
based systems involving multiple IDSes and advanced alarm interpretation mod-
els have been proposed [3,4,5,6,7]. Nevertheless this is a complex, expensive ap-
proach.
Another possible way to deal with these problems is policy-based detection
[8]. A policy-based IDS detects anomalies that violate policy rules rather than a
learned behaviour considered to be “normal”. For instance, a policy could state
that telnet should not be used at all, or that ftp should be used only at certain
hours and on speciﬁc sites. The IDS should then rely on a ﬁrewall-like module
to verify if these constraints are respected and raise an alarm when a violation
occurs.
A. Wespi, G. Vigna, and L. Deri (Eds.): RAID 2002, LNCS 2516, pp. 292–306, 2002.
c(cid:1) Springer-Verlag Berlin Heidelberg 2002
Introducing Reference Flow Control
293
The problem is that in many cases, it is actually hard to tell whether a speciﬁc
action violates the security policy or not. For instance, the OS access-control
primitives actually provide some form of policy-based intrusion detection, in the
sense that they can forbid operations that violate a given policy (in Unix, “users
other than root cannot read /etc/shadow”). Still, experience shows that attacks
are possible: for instance, by exploiting side-eﬀects such as buﬀer overﬂows or
coordination between multiple subject identities, one can gain supplementary
privileges to perform operations that should theoretically be forbidden to him.
Thus, a policy that states which operations are forbidden can be defeated by
performing series of operations that are not illegal per se, but which ultimately
lead to the same goals.
We believe that to overcome these problems, a security policy should be
implemented in terms of what goals should not be achieved, no matter how.
We propose to detect intrusion symptoms, rather than intrusions themselves.
We focus on intrusions where the attacker attempts to achieve some forbidden
goal, as opposed to denial-of-service attacks which are out of scope of our work.
Such attacks include buﬀer overﬂow exploits, side-eﬀects exploits, and race con-
ditions exploits. We propose a policy-based intrusion detection model suitable
for runtime detection of such attack symptoms. Our proposed approach is able
to deal with novel attack scenarii and requires no empirical proﬁle of “normal
behaviour”.
It is a known fact that the current weakness of intrusion detection techniques
is partly due to their lack of coherent theoretical foundations [2]. Research eﬀorts
to build well-deﬁned intrusion detection models started to appear only recently
[9]. We think that this kind of model is needed, and we propose one in this paper.
The model itself is described in section 2. In section 3, we discuss an appli-
cation of this model to intrusion detection in an usual Unix system. Section 4
presents our prototype implementation and practical examples.
2 Model
In this section, we describe the proposed approach to intrusion symptom detec-
tion.
To implement a given security policy in current operating systems, access
control mechanisms bind precise access rights to each subject. As long as the
subject executes operations speciﬁcally allowed by his rights, the security policy
is enforced. However, existing security ﬂaws may allow an attacker to modify
(and, most certainly, extend) his rights in an unpredictable way. For this very
reason, existing access control mechanisms alone are not able to prevent such
attacks.
To detect symptoms of these, we propose to deﬁne operation domains that
match a given security policy, i.e. sets of operations that can be executed and
combined in any way without the security policy being harmed. Any legal op-
eration (in the sense of the security policy) is thus permitted in at least one
operation domain. For instance, the operation “read /home/user/document.txt”
would be allowed in the domain deﬁned by user’s rights, whereas “write
294
J. Zimmermann, L. M´e, and C. Bidan
/etc/shadow” would be possible only in a domain that allows the password
to be changed. However, none of these two domains allows the operation “cp
/home/user/document.txt /etc/shadow”, executing this operation would involve
more than one domain, and thus is illegal.
More precisely, a computer system is modeled as a set of objects, each object
having a set of methods that allow to read or update the object’s state1. Thus any
possible system operation (for example, in the Unix system call sense) has precise
semantics in terms of elementary object methods. Bounding the capability to
perform an object method call to a conﬁned domain as described above restricts
in eﬀect the possible use of system operations: if all required privileges to perform
an operation exist but belong to diﬀerent operation domains, such operation is
by deﬁnition illegal. If attempted, it is the symptom of an intrusion.
We propose the “reference ﬂow control” model as a practical way to imple-
ment this approach.
2.1 References
A reference represents the capability to execute an elementary object method
call in some operation domain. Much like hidden capabilities [10], references
exist on their own and can be associated to processes, but their existence is not
tied to the execution of a process. Unlike a capability, a reference is not bound
to a subject or an executing processes but to a reference bag that represents the
operations allowed in a domain.
Deﬁnition: Given an object o, a method m and a reference bag S, the reference
RS(o.m) is the capability to call method m on o from within the domain
represented by S.
Thus, any possible system operation requires one or several references to be
authorized: for example, let us consider a Unix access control analogy, where
ﬁle opening is done through the ﬁle methods openread and openwrite. To be
authorized in a domain associated to the reference bag S, the operation
open(/etc/shadow, O RDWR)
a
a
and
reference RS(/etc/shadow.openread)
requires
reference
RS(/etc/shadow.openwrite). It also requires a reference RS(/etc.openread) in
order to access the shadow ﬁle in the /etc directory, a reference RS(/.openread),
and so on. All these requirements are met within the same reference bag S for
the operation to be legal. However, unlike the Chinese Wall model [11], where
operation callers are bound explicitly to exclusive operation domains according
to their behaviour, in our approach, any reference bag S is a priori usable
to perform the operation. This allows the caller to execute a potentially wide
1 The notion of state is used as an abstraction here. A real system object carries
actually more than one state: for example, a ﬁle object has a “contents” state, a
“permissions” state, a “last write date” state and so on. In the model, these would
be considered as separate objects.
Introducing Reference Flow Control
295
range of possible operations, but restrictions are set on whether an operation
is allowed to be combined with another - in other words, whether the latter
operation can exploit some eﬀect of the former.
A security policy deﬁnition consists then in the deﬁnition of reference bags. Of
course, the precise reference requirements of operations are also subject to the se-
curity policy. For instance, it is natural that reading the contents of /etc/shadow
requires appropriate references that should appear only in very speciﬁc reference
bags; however, reading the screen coordinates of the mouse cursor will probably
not be considered as a security-critical operation, so it will not have any par-
ticular requirement and, most certainly, references related to the mouse cursor
object will not even exist at all in the system. In section 4.2, we will see that a
very straightforward reference bags deﬁnition actually allows attacks to be de-
tected; however the problem of implementing any possible security policy using
reference bags remains an open issue.
In addition to requiring references, operations can create new objects or de-
stroy existing ones, along with the corresponding references. The open operation
above, if successful, creates a “ﬁle descriptor” object (fd) with (among others)
read and write methods deﬁned for it that allow the ﬁle contents to be accessed.
By deﬁnition, if an operation is executed in some domain, its consequences
must be allowed to be executed in the same domain. For this reason, it is re-
quired that newly created references are inserted into the same reference bag
that allowed the operation execution2. Thus, any operation depends on a ref-
erence bag to be legal and potentially modiﬁes this bag, by creating references
(as in the open example) and/or by deleting references (for example, when a ﬁle
descriptor is closed). This is expressed using the following notation:
Deﬁnition: Ω being an operation and S a reference bag such that Ω is legal in
S, we note ΩS its execution allowed by references from S. We note Ref(ΩS)
the reference bag that results from ΩS.
Reference requirements of operations and this Ref relation actually specify an
operating system’s model. In the example above:
(cid:1)
close(fd)S
(cid:2)
Ref
= S \ {RS(f d.read), RS(f d.write)}
If close(fd) is executed using references from bag S, then its execution will
remove references RSf d.read and RSf d.write from this bag.
2.2 Reference Flow
As stated above, our focus is on dealing with situations where the attacker aims
at extending his rights to perform operations that raise illegal consequences.
Thus, if an operation Ω2 is a consequence of an operation Ω1(we note Ω1 ⇒ Ω2),
it must obey the same security restrictions as Ω1. The decision whether Ω1 ⇒ Ω2
can rely on the system’s internals knowledge (when such knowledge exists; it is
2 In this paper, we further denote system operation executions simply as “operations”
296
J. Zimmermann, L. M´e, and C. Bidan
known for instance that accessing a special ﬁle under the /dev hierarchy on a
Linux system can involve loading a device driver from /lib/modules), a logical
dependency between these operations (some information ﬂows from Ω1 to Ω2,
i.e. Ω1 has set an object state that is accessed by Ω2) or a combination of both.
In practice, this means that an operation Ω1 transmits the reference bag
that made it possible to its consequence Ω2. If Ω2 is executed by another pro-
cess, references ﬂow to that process, thus allowing it to execute new operations
as consequences of Ω2. This mechanism actually enforces access control rules
throughout sequences of causally dependent operations, which play here the role
of “subjects”.
To be able to enforce security policies against attacks by delegation, one
needs thus to deﬁne Ref rules for such causal dependencies. These rules im-
plement the operation semantics. Let us consider an operation ΩS
2 executing
2 ::fd2=open(File,O RDONLY), S being
fd2=open(File,O RDONLY), noted ΩS
an appropriate reference bag. If the ﬁle writing was created by some operation
ΩQ
1 , then
Ref(ΩS
2 ) = Ref(ΩQ
1 ) ∪ {RQf d2.read}
If File can be opened for reading, then its actual content must be read
within the same domain it was written in (here denoted by the reference bag
Q), to preserve security restrictions across causal dependency.
On the other hand, opening the ﬁle for overwriting is not the consequence of
any previous operation except the opening (as it erases the contents), thus for
ΩS
3 ::fd2=open(File,O WRONLY|O TRUNC), the rule is
3 ) = S ∪ {RS(cid:1)f d2.write}
Ref(ΩS
In most cases, an operation involves actually more than one method call.
Appending to a ﬁle (using O APPEND) means that both reading and writing
are consequences of the latest ﬁle write, while opening in a read-write mode
(O RDWR) is a special case: reading is a consequence of the operation that
wrote the ﬁle (here ΩQ
1 ) while writing is a consequence of the opening. This
requires reference creation in two separate reference bags. Thus, in this case,
open represents actually two independent operations (opening for reading and
opening for writing) that both create references to the same object fd2.
Such rules must be deﬁned for any considered operation. In most cases, they
are trivial (as in the close case). For operations that involve object state access,
they have the form above. This is also true for object creation : for instance in
Unix, this means actually writing into a directory whereas accessing the created
object involves reading the directory.
Implementation on Existing Systems