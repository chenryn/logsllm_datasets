db1=> close cur;  
CLOSE CURSOR  
db1=> select * from pg_cursors ;  
 name | statement | is_holdable | is_binary | is_scrollable | creation_time   
------+-----------+-------------+-----------+---------------+---------------  
(0 rows)  
```  
函数返回游标, 获取游标数据  
```  
CREATE TABLE test1 (col text);  
INSERT INTO test1 VALUES ('123');  
CREATE or replace FUNCTION reffunc(refcursor) RETURNS refcursor AS $$  
BEGIN  
    OPEN $1 FOR SELECT * FROM test1;  
    RETURN $1;  
END;  
$$ LANGUAGE plpgsql strict;  
BEGIN;  
SELECT reffunc('funccursor');  
FETCH ALL IN funccursor;  
COMMIT;  
```  
分页  
```    
create table t_off (id serial primary key, info text, c int, ts timestamp);    
create index on t_off (c, ts);    
insert into t_off (info,c,ts) select md5(random()::text), random()*100, now() from generate_series(1,1000);    
insert into t_off (info,c,ts) select md5(random()::text), random()*100, now() from generate_series(1,1000);    
insert into t_off (info,c,ts) select md5(random()::text), random()*100, now() from generate_series(1,1000);    
insert into t_off (info,c,ts) select md5(random()::text), random()*100, now() from generate_series(1,1000);    
select * from t_off where c=1 order by ts limit 10 offset 0;  
 id  |               info               | c |             ts               
-----+----------------------------------+---+----------------------------  
  16 | ce70259b8c0b5e83dca5f20cef93d1ee | 1 | 2023-11-11 00:31:57.304588  
  79 | 3a08bcf762a062e86318f516fddea793 | 1 | 2023-11-11 00:31:57.304588  
 230 | 01bc9f9c59b70311369aaa33c3cca3a7 | 1 | 2023-11-11 00:31:57.304588  
 257 | bb22ec8f00de73c19017479fdf981116 | 1 | 2023-11-11 00:31:57.304588  
 286 | 70bfb092ab95cc8c8f5aef9e2762af0c | 1 | 2023-11-11 00:31:57.304588  
 311 | c3b8f1eab66fe88cfd59e92d039fbaa6 | 1 | 2023-11-11 00:31:57.304588  
 452 | f1c000b8a200207c52b6c3f9a8babe72 | 1 | 2023-11-11 00:31:57.304588  
 470 | 7b4702f5a4ff75ef237cbf7af5b8d082 | 1 | 2023-11-11 00:31:57.304588  
 642 | 82d641bcf235eba92a9368f0ac553dca | 1 | 2023-11-11 00:31:57.304588  
 749 | 669488263cfcec928ac2693995309eea | 1 | 2023-11-11 00:31:57.304588  
(10 rows)  
select * from t_off where c=1 order by ts limit 10 offset 10;  
  id  |               info               | c |             ts               
------+----------------------------------+---+----------------------------  
  816 | 9a92daa3c8ceb90e023d127485c4a053 | 1 | 2023-11-11 00:31:57.304588  
  827 | 82abd37368d66eb03347429ff4b28e9e | 1 | 2023-11-11 00:31:57.304588  
  846 | 48f9737b18bf3e8dae7531a1b7fa4d45 | 1 | 2023-11-11 00:31:57.304588  
  990 | f7885a8e585ae7fa0c4b73dd356f260b | 1 | 2023-11-11 00:31:57.304588  
 1017 | e12d1088e80136e869cf82816b28ab51 | 1 | 2023-11-11 00:31:57.313518  
 1058 | 39dc148d9223bcaddcdb2096750e513b | 1 | 2023-11-11 00:31:57.313518  
 1070 | 31c83c561119140721f94e8b28669914 | 1 | 2023-11-11 00:31:57.313518  
 1102 | ee8f076e2e29299ace4c5fb71ddf9dda | 1 | 2023-11-11 00:31:57.313518  
 1148 | 37232358c5995513c19545b8232aced1 | 1 | 2023-11-11 00:31:57.313518  
 1425 | df4ff8d17227012f240b5ecee69d5758 | 1 | 2023-11-11 00:31:57.313518  
(10 rows)  
```    
前面的翻页性能  
```  
create unlogged table t_off1 (id serial primary key, info text, c int, ts timestamp);    
create index on t_off1 (c, ts);    
insert into t_off1 (info,c,ts) select md5(random()::text), 1, now() from generate_series(1,10000000);    
explain analyze select * from t_off1 where c=1 order by id limit 10 offset 0;  
                                                             QUERY PLAN                                                                
-------------------------------------------------------------------------------------------------------------------------------------  
 Limit  (cost=0.43..61.46 rows=10 width=48) (actual time=0.049..0.054 rows=10 loops=1)  
   ->  Index Scan using t_off1_pkey on t_off1  (cost=0.43..336607.48 rows=55155 width=48) (actual time=0.047..0.050 rows=10 loops=1)  
         Filter: (c = 1)  
 Planning Time: 0.223 ms  
 Execution Time: 0.076 ms  
(5 rows)  
```  
翻到很后面的性能  
```  
explain analyze select * from t_off1 where c=1 order by id limit 10 offset 8000000;  
db1=> explain analyze select * from t_off1 where c=1 order by id limit 10 offset 8000000;  
                                                                     QUERY PLAN                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------  
 Limit  (cost=50682.38..50682.38 rows=1 width=48) (actual time=8768.796..8768.799 rows=10 loops=1)  
   ->  Sort  (cost=50544.49..50682.38 rows=55155 width=48) (actual time=7566.445..8490.762 rows=8000010 loops=1)  
         Sort Key: id  
         Sort Method: external merge  Disk: 645840kB  
         ->  Bitmap Heap Scan on t_off1  (cost=471.89..46200.71 rows=55155 width=48) (actual time=235.466..1599.145 rows=10000000 loops=1)  
               Recheck Cond: (c = 1)  
               Heap Blocks: exact=37171 lossy=65922  
               ->  Bitmap Index Scan on t_off1_c_ts_idx  (cost=0.00..458.10 rows=55155 width=0) (actual time=229.873..229.873 rows=10000000 loops=1)  
                     Index Cond: (c = 1)  
 Planning Time: 0.091 ms  
 Execution Time: 8853.684 ms  
(11 rows)  
```  
使用游标优化分页  
```  
begin;  
declare cur cursor without hold for select * from t_off1 where c=1 order by id;  
fetch 10 from cur;  
move 100000 from cur;  
fetch 10 from cur;  
db1=> begin;  
BEGIN  
Time: 0.314 ms  
db1=*> declare cur cursor without hold for select * from t_off1 where c=1 order by id;  
DECLARE CURSOR  
Time: 0.929 ms  
db1=*> fetch 10 from cur;  
 id |               info               | c |             ts               
----+----------------------------------+---+----------------------------  
  1 | f96ccebfe03bd3c679e0e0b280e87952 | 1 | 2023-11-11 01:30:43.259266  
  2 | 7126ea60b4fc7faeb82468747a34f0b9 | 1 | 2023-11-11 01:30:43.259266  
  3 | f8e732db3f7677ea8299f3db99d32881 | 1 | 2023-11-11 01:30:43.259266  
  4 | 98c10c35f9d196fe0450a0f4afac75ca | 1 | 2023-11-11 01:30:43.259266  
  5 | c4e9a794b882587a7c1b20a354fa2673 | 1 | 2023-11-11 01:30:43.259266  
  6 | 55a19d82dd3fd14b0e3e3b2dd5679fb6 | 1 | 2023-11-11 01:30:43.259266  
  7 | 0a4deb53b4c6572d37241f5533cf5848 | 1 | 2023-11-11 01:30:43.259266  
  8 | 7c259c1954a63f2b2c3adea891a5d083 | 1 | 2023-11-11 01:30:43.259266  
  9 | 69575ed37909e47f8a92cfd1ee6d6a4e | 1 | 2023-11-11 01:30:43.259266  
 10 | f324bd9e6dfb2e55f1e8623972a72741 | 1 | 2023-11-11 01:30:43.259266  
(10 rows)  
Time: 3.144 ms  
db1=*> move 100000 from cur;  
MOVE 100000  
Time: 22.601 ms  
db1=*> fetch 10 from cur;  
   id   |               info               | c |             ts               
--------+----------------------------------+---+----------------------------  
 100011 | 82cb637e758a3abaeeba0a465b682b53 | 1 | 2023-11-11 01:30:43.259266  
 100012 | b0834a9a9c2e5d6b301188d0c396e8c4 | 1 | 2023-11-11 01:30:43.259266  
 100013 | e29ecf6fed4cb8b240f4e1c75e204f3b | 1 | 2023-11-11 01:30:43.259266  
 100014 | 0f4df3e409ca8da378329af894f78041 | 1 | 2023-11-11 01:30:43.259266  
 100015 | d65020687d58be83e23f92a7f3f0f35b | 1 | 2023-11-11 01:30:43.259266  
 100016 | 53eb0f02b73c4207333a3fd9d7834c3a | 1 | 2023-11-11 01:30:43.259266  
 100017 | 2ad6721dc2aec3022db47e3b99d3b57f | 1 | 2023-11-11 01:30:43.259266  
 100018 | 76806ef4b636a6e8b717ed2c7922d53a | 1 | 2023-11-11 01:30:43.259266  
 100019 | 95c3725a3f42c087166027775c737c18 | 1 | 2023-11-11 01:30:43.259266  
 100020 | 60ae040228267d2017c7f6189fa8935e | 1 | 2023-11-11 01:30:43.259266  
(10 rows)  
Time: 0.467 ms  
```  
推荐使用位置偏移变化优化分页  
[《PostgreSQL fetch with ties 代替 limit offset 解决分页性能优化gap问题》](../202311/20231111_02.md)    
fetch with ties   返回可以根据需要超过Limit数, 把最后一条相同的ts都返回. 避免了翻页优化带来的gap. 老标准(limit)比较麻烦, 需要引入pk或uk来解决.      
限制10条, 但是实际上有14条ts一样的都返回了.    
```    
db1=> select * from t_off where c=1 order by ts fetch first 10 row with ties;      
 id  |               info               | c |             ts                 
-----+----------------------------------+---+----------------------------    
  16 | ce70259b8c0b5e83dca5f20cef93d1ee | 1 | 2023-11-11 00:31:57.304588    
  79 | 3a08bcf762a062e86318f516fddea793 | 1 | 2023-11-11 00:31:57.304588    
 230 | 01bc9f9c59b70311369aaa33c3cca3a7 | 1 | 2023-11-11 00:31:57.304588    
 257 | bb22ec8f00de73c19017479fdf981116 | 1 | 2023-11-11 00:31:57.304588    
 286 | 70bfb092ab95cc8c8f5aef9e2762af0c | 1 | 2023-11-11 00:31:57.304588    
 311 | c3b8f1eab66fe88cfd59e92d039fbaa6 | 1 | 2023-11-11 00:31:57.304588    
 452 | f1c000b8a200207c52b6c3f9a8babe72 | 1 | 2023-11-11 00:31:57.304588    
 470 | 7b4702f5a4ff75ef237cbf7af5b8d082 | 1 | 2023-11-11 00:31:57.304588    
 642 | 82d641bcf235eba92a9368f0ac553dca | 1 | 2023-11-11 00:31:57.304588    
 749 | 669488263cfcec928ac2693995309eea | 1 | 2023-11-11 00:31:57.304588    
 816 | 9a92daa3c8ceb90e023d127485c4a053 | 1 | 2023-11-11 00:31:57.304588    
 827 | 82abd37368d66eb03347429ff4b28e9e | 1 | 2023-11-11 00:31:57.304588    
 846 | 48f9737b18bf3e8dae7531a1b7fa4d45 | 1 | 2023-11-11 00:31:57.304588    
 990 | f7885a8e585ae7fa0c4b73dd356f260b | 1 | 2023-11-11 00:31:57.304588    
(14 rows)    
```    
此时gap就没有了.    
```    
db1=> select * from t_off where c=1 and ts>'2023-11-11 00:31:57.304588' order by ts fetch first 10 row with ties;      
  id  |               info               | c |             ts                 
------+----------------------------------+---+----------------------------    
 1017 | e12d1088e80136e869cf82816b28ab51 | 1 | 2023-11-11 00:31:57.313518    
 1058 | 39dc148d9223bcaddcdb2096750e513b | 1 | 2023-11-11 00:31:57.313518    
 1070 | 31c83c561119140721f94e8b28669914 | 1 | 2023-11-11 00:31:57.313518    
 1102 | ee8f076e2e29299ace4c5fb71ddf9dda | 1 | 2023-11-11 00:31:57.313518    
 1148 | 37232358c5995513c19545b8232aced1 | 1 | 2023-11-11 00:31:57.313518    
 1425 | df4ff8d17227012f240b5ecee69d5758 | 1 | 2023-11-11 00:31:57.313518    
 1654 | c0bb3ebf9eda3a3a0228dd7784eccbfe | 1 | 2023-11-11 00:31:57.313518    
 1704 | 70283bbc87968f25aed18524030e1a21 | 1 | 2023-11-11 00:31:57.313518    
 1737 | 7c1b782104144f3cbc97e247e5572165 | 1 | 2023-11-11 00:31:57.313518    
 1779 | 8af082c81acc99fa2f8afdffd58f4d11 | 1 | 2023-11-11 00:31:57.313518    
 1861 | 0c9ecc39655bf834d1cdc07cf09ed362 | 1 | 2023-11-11 00:31:57.313518    
(11 rows)    
```    
新标准非常适合翻页优化    
```    
db1=> explain select * from t_off where c=1 order by ts fetch first 10 row with ties;      
                                     QUERY PLAN                                          
-------------------------------------------------------------------------------------    
 Limit  (cost=0.28..7.64 rows=10 width=49)    
   ->  Index Scan using t_off_c_ts_idx on t_off  (cost=0.28..36.34 rows=49 width=49)    
         Index Cond: (c = 1)    
(3 rows)    
db1=> explain select * from t_off where c=1 and ts>'2023-11-11 00:31:57.304588' order by ts fetch first 10 row with ties;      
                                             QUERY PLAN                                                 
----------------------------------------------------------------------------------------------------    
 Limit  (cost=0.28..8.51 rows=10 width=49)    
   ->  Index Scan using t_off_c_ts_idx on t_off  (cost=0.28..30.72 rows=37 width=49)    
         Index Cond: ((c = 1) AND (ts > '2023-11-11 00:31:57.304588'::timestamp without time zone))    
(3 rows)    
```    
排序字段重复值过多, 数据倾斜可能导致一次fetch行数很多, 可能打卦程序内存, 怎么办?  
如果担心数据倾斜(例如某个ts重复值非常非常多), 怕把程序内存打爆, 可以考虑2种解决方案.  
- [《PostgreSQL fetch with ties 代替 limit offset 解决分页性能优化gap问题》](../202311/20231111_02.md)  
数据采样, 高速返回随机数据   
[《PostgreSQL 随机查询采样 - 既要真随机、又要高性能 - table sample方法》](../202105/20210527_01.md)       
[《PostgreSQL 随机采样应用 - table sample, tsm_system_rows, tsm_system_time》](../202005/20200509_01.md)     
扩展采样方法:  
- 按时间采样, 随机扫描并且只扫描指定的时间, 例如最多扫描1毫秒, 返回这1毫秒扫描到的记录.            
- 同时还支持按行数返回, 例如最多采样100行.       
```  
create unlogged table tbl (id int, loc int, beginid int, endid int);  
insert into tbl select id,c1,c2,c2+1000 from   
  (select generate_series(1,10000000) id, (random()*10000)::int c1, (random()*2000000000)::int c2) t;  
db1=> create extension tsm_system_time ;  
CREATE EXTENSION  
db1=> create extension tsm_system_rows ;  
CREATE EXTENSION  
-- 最多5毫秒        
db1=> select ctid,* from tbl TABLESAMPLE system_time (5) where random() select ctid,* from tbl TABLESAMPLE system_rows(1000) where random() select * from gen_ints(10);  
 gen_ints   
----------  
       64  
       46  
       48  
       97  
       66  
       90  
       21  