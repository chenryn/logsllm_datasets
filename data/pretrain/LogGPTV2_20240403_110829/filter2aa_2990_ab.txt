se that woul
ule violations. 
ance, Teardrop
or these signa
criteria for filte
are mostly eff
] are best 
me simple 
with rate 
r Netflow 
right-hand 
d behavior 
cation log 
n required 
c source IP 
c policing 
ld require 
p Attack’s 
atures may 
ering. It is 
fective for 
Modern application-level attacks do their dirty works at upper layers, exhibiting no 
abnormal behavior at the lower layers. Detection therefore would have to work on 
application-level behaviors, via syslog or application log analysis methods. 
Traffic statistics and behavior big data analysis aims at building a baseline profile 
of traffic such that significant deviation at runtime can trigger a red flag. Generally 
data-mining can work on profiling protocol parameters, traffic behaviors, and client 
demographics. 
3 
Authentication Bypass 
In response to mitigation techniques that excel at filtering out malformed traffic, 
blended attacks gained popularity. They strive to evade filtering by mimicking 
legitimate traffic, such as for HTTP requests to bear believable real-world User-Agent 
string, and have variable lengths. 
3.1 
TCP SYN Authentication 
With this method, the authenticity of the client’s TCP stack is validated through 
testing for correct response to exceptional conditions, such that spoofed source IPs 
and most raw-socket-based DDoS clients can be detected. Common tactics include 
sending back a RST packet on the first SYN expecting the client to retry, as well as 
deliberately sending back a SYN-ACK with wrong sequence number expecting the 
client to send back as RST and then retry. 
The best approach to defeating this method is to have the OS networking stack 
handle such tests. There are essentially two methods: 
Figure 4. TCP reset 
TCP Reset —Anti-DDoS gateway will send a reset (RST) flags to forcefully reset the 
backend’s established TCP connections (those having successfully completed three-
way handshaking) as shown in Figure 4. It is the most common method for TCP 
connection verification, as purpose-built DDoS bots may not have the retry logic 
server 
client 
mitigation 
device 
SYN 
SYN ACK 
ACK 
RST 
SYN 
SYN ACK 
ACK 
coded, unlike a real browser. However, a drawback of this method is that an error 
page will show up on the browser, confusing the user to no end, who has to manually 
reload the web page. 
Figure 5. TCP out-of-sequence 
TCP Out-of-sequence — Unlike TCP Reset, the anti-DDoS gateway can deliberately 
pose a challenge to the client by sending SYN-ACK replies with an out-of-sequence 
sequence number as shown in Figure 5. Since the sequence number is incorrect, the 
client is supposed to reset the TCP connection and re-establishes the connection 
again. Again a purpose-built bot would likely not be so smart. Compare with TCP 
Reset, this method has the added advantage that it would not introduce strange user 
experience. 
3.2 
HTTP Redirect Authentication 
The basic idea is that a legitimate browser will honor HTTP 302 redirects. As such, 
by inserting artificial redirects, it would be safe to block non-compliant clients. 
Figure 6. HTTP redirect authentication 
Clearly, it is not particularly difficult to implement just enough support for HTTP 
redirects to fool HTTP Redirect Authentication. +The purpose of this authentication is 
to distinguish botnet and HTTP compliant applications. 
server 
client 
mitigation 
device 
SYN 
SYN ACK (with wrong seq. no.) 
RST 
SYN 
SYN ACK 
ACK 
server 
client 
mitigation 
device 
GET  /index.html 
HTTP 302 redir to  
/foo/index.html
GET  
/foo/index.html
HTTP 302 redir to  /index.html
GET  /index.html 
3.3 
HTTP Cookie Authentication 
For similar purpose, this method as shown in Figure 7 works like, and is usually used 
together with, HTTP Redirect Authentication. Essentially, browser’s cookie handling 
is tested. Clients that do not carry cookies in subsequent HTTP requests are clearly 
suspect and can be safely blocked. 
Figure 7. HTTP cookie authentication 
Some mitigation devices may allow administrator to configure custom field name 
for the HTTP cookie instead of standard one as shown in Figure 8. However, not all 
browsers will support this feature and thus it is not widely used. 
Figure 8. HTTP cookie authentication with header token 
As in adding support for HTTP Redirect Authentication, cookie support does add 
additional complexity and reduces raw firepower in DDoS attacks, but is nevertheless 
easily to implement. 
3.4 
JavaScript Authentication 
With JavaScript Authentication, a piece of JavaScript code embedded in the HTML is 
sent to clients as a challenge as shown in Figure 9. Obviously, only clients equipped 
with a full-fledged JavaScript engine can perform the computation. It would not be 
economical for DDoS attack tools to hijack or otherwise make use of a real 
server 
client 
mitigation 
device 
GET  /index.html 
HTTP 302 redir to  
/foo/index.html (with cookie)
GET  
/foo/index.html (with cookie)
HTTP 302 redir to  /index.html
GET  /index.html (with cookie) 
GET  /index.html (with X-header)
server 
client 
mitigation 
device 
GET  /index.html 
HTTP 302 redir to  
/foo/index.html (with X-header)
GET  
/foo/index.html (with X-header)
HTTP 302 redir to  /index.html
GET  /index.html (with X-header)
heavyweight browser to carry out attacks. The purpose of Javascript authentication is 
to identify whether the HTTP request is send from a real browser or not. 
Figure 9. Javascript authentication 
An extended implementation would make use of UI elements such as JavaScript 
dialog boxes or detecting mouse movements in order to solicit human inputs. Going 
this far would impede otherwise legitimate automated queries, making this 
mechanism only suitable for a subset of web sites designed for human usages, but not 
those web APIs such as REST web services. 
3.5 
CAPTCHA Authentication 
A very heavy-handed approach that involves human intervention whereby CAPTCHA 
challenges are inserted into suspicious traffic as shown in Figure 10. If the client end 
is successful in solving the CAPTCHA, it will be whitelisted for a certain period of 
time or for certain amount of subsequent traffic, after which it will need to 
authenticate itself again. The purpose of this authentication is to distinguish whether 
the request is initiated by a real human or a bot. 
Figure 10. CAPTCHA authentication 
This method is, in itself, rather intrusive and in practice used only sparingly. While 
far from easy, automated means to solve CAPTCHA do exist and is a topic of 
ongoing research. 
server 
client 
mitigation 
device 
GET  /index.html 
HTTP 200 /js.htm 
POST  /auth.php 
HTTP 302 redir to  /index.html
GET  /index.html
server 
client 
mitigation 
device 
GET  /index.html 
HTTP 200 /captcha.htm 
POST  /auth.php
HTTP 302 redir to  /index.html
GET  /index.html 
4 
Po
Through 
bypassing
verificatio
attack tra
All” deve
11. 
In prac
work in u
each of th
After 
been plac
in the int
over the c
As des
Therefore
every 5 m
authentic
Nevert
attack dis
when the 
“Kill ‘
OS netwo
if the ant
redirect 
authentic
oC Tool Desig
extensive tes
g all commerc
on (authentic
affics staying j
eloped to dem
F
ctice, an entir
unison to chal
hem below. 
successful au
ce on to the w
terest of perfo
cleared netwo
scribed in [2]
e, the authent
minutes.  All
ation code. 
theless we fou
scovery mech
source is whi
em All” was 
orking library
ti-DDoS devi
or some Jav
ity, by relegat
gn and Imple
sting we have
cial mitigation
ation) so as 
just below tra
monstrate the e
Figure 11. Proof
re suite of auth
llenge traffic s
uthentication, 
whitelist, mean
ormance. This
ork path. 
]. IP addresse
tication proce
l attack reque
und that certai
anisms such a
itelisted. Tacti
designed to u
, it can fully s
ce attempt so
vaScript test, 
ting the task to
ementation 
e developed 
n solutions. T
to be cleared
affic threshold
effectiveness 
of-of-Concept To
hentications m
sources. We e
oftentimes th
ning a number
 affords the a
es would just 
ess will repea
ests sent after
in traffic rules
as rate measur
ics against thi
use the OS stac
simulate as a b
ource host ver
our program
o a real web b
a sure-fire m
The key idea i
d of further s
d. A proof-of-
of this approa
Tool "Kill 'em Al
mechanisms c
examine the ap
he source IP 
r of expensive
attacker a certa
be whiteliste
at after certain
r re-authentica
s must be obs
rement are us
is is outlined b
ck to handle u
bona fide web
rification, like
m still is cap
browser. 
methodology c
is to satisfy so
crutiny, and 
f-concept tool 
ach, is shown
ll" 
covering multi
pproach taken
addresses wo
 checks will b
ain period of 
d for a period
n time interva
ation will use
erved still, as 
ually not disa
below as well.
user requests. 
b client. Moreo
e TCP SYN a
pable of “pro
capable of 
ource host 
then send 
“Kill ‘em 
n in Figure 
iple layers 
n to defeat 
ould have 
be skipped 
free reign 
d of time.  
al, say for 
e the new 
low-level 
abled even 
. 
Using the 
over, even 
auth, TCP 
oving” its 
“Kill ‘em All” will attempt bypass 3 times for each HTTP redirect challenge, this 
way TCP Reset and the TCP Out-of-Sequence auth can be properly defeated. Indeed 
this is how a real client will handle retries and redirects. 
4.1 
Cookie Authentication 
For HTTP cookie authentication, our tools will spawn a web browser to process the 
cookie request. Cookie is attached to all subsequent attack requests we sent. 
4.2 
JavaScript Authentication 
“Kill ‘em All” can fully handle JavsScript thanks to embedded JavaScript engine. 
This JavaScript capability makes it look like a real browser, because JavaScript 
capability is very uncommon in DDoS bots. 
For proper handling of Javascript, we have incorporated the V8 JavaScript engine. 
Ideally a full DOM should be implemented but for the purpose of passing 
authentication a subset of DOM was sufficient. 
Attack tools however, can incorporate standalone JavaScript engines such as 
Spidermonkey or V8 which are relatively lightweight and would not bog down 
attacks too much. As of this writing, the major challenge with this bypass method lies 
with adequate DOM implementation. 
4.3 
CAPTCHA Authentication 
Widely considered the final frontier for source host verification, CAPTCHAs are not 
completely unbreakable by automated means. In “Kill ‘em All” we have implemented 
CAPTCHA capability whereby CAPTCHA challenges are automatically processed 
and answered. Given sufficient baseline training, the success rate can be near prefect. 
We couldn’t find a light-weight cross-platform CAPTCHA library, so we’ve 
implemented our own. The algorithm first convert the CAPTCHA image to black-
and-white to enhance contrast. Then a 3 by 3 median filter is applied to remove 
background noises such as dots and thin lines.  Afterwards words are segmented into 
individual characters and their boundaries detected. Finally, characters are compared 
against trained baseline based on simple pixel differences. Against NSFocus ADS, 
success rate of nearly 50% was achieved. 
Some CAPTCHA might have rotated or curved characters. This will require a 
more complex algorithm such as vector quantization or neural network for 
recognition. As for re-CAPTCHA, their audio CAPTCHA functionality which is 
much weaker than their standard visual counterpart—simple voice recognition 
algorithm will be sufficient for breaking it. 
4.4 
TC
“Kill ‘em
different 
connectio
timeout a
values, d
defeated 
however,
On the
quick an
complian
from legi
With 
internet, s
proliferat
attacks re
layer atta
Applicati
stacks. O
being abl
As des
volume-b
the trigge
reduction
CP Traffic M
m All” provide
kinds of DD
ons interval, 
after last requ
different comb
with specific 
 a combinatio
e TCP/IP laye
d dirty way 
nt TCP/IP beh
itimate ones. 
web sites an
so are contem
tion of botnet
elying on raw
acks are just as
ion layer attac
Other than easi
le to pass any 
scribed in pre
based, request
ering threshold
n in firepower 
Model 
es tunable TCP
DoS attacks 
connection h
uest are expos
binations can 
parameter pr
on of art and sc
Figure 1
er, historically
using raw so
aviors that ca
nd web servi
mporary attack
ts together se
w sockets, a st
s devastating, 
cks have the 
ier to implem
RFC conform
evious section
t-based or oth
d and control 
can be more t
P traffic param
can be exec
hold time be
sed to the use