more rigorous semantics-based approaches (e.g., using sym-
bolic execution and constraint solving for code similarity)
generally suffer from scalability issues and are mostly limited
to analyze execution traces or basic blocks (e.g., [53], [78]).
To the best of our knowledge, ncc represents the latest out-of-
the-box solution offered by the LLVM community to deliver
well-performing and scalable analysis of code similarity.
Also, explaining DNN predication is still challenging (espe-
cially for human), which could depend on subtle embedding
representations and model design. We leave it as a future work
to leverage recent advances in explainable AI (XAI) [57] to
further interpret the predictions of ncc.
D. Decompilation Analysis
With the prosperous development of automated analysis and
retroﬁtting utilities on compiled IR code, C code decompila-
tion retains its importance by supporting (layman) users for
code comprehension and reuse. Software decompilation, in
general, is to generate high-level source code for the (human-
based) process of analysis and comprehension, not for (auto-
mated) recompilation. Given that structured code is shown as
easier for human to understand [42], [83]. decompiler outputs
with fewer “unstructured” control ﬂow statements, i.e., goto
statements, deem better quality [28]. We measure structured-
ness of decompiled C code by reusing the metrics in [28] to
count #goto. We also measure the average LOC. Lengthy
C code implies relatively low readability for even experts.
Since McSema and McSema0 contain many utility functions
to emulate machine instructions, we count average LOC per
user-deﬁned function instead of the entire decompiled code.
We also clarify that these metrics are not applicable to assess
quality of lifted IR, since #goto and LOC likely won’t affect
automated static analysis and comprehension on LLVM IR.
AVERAGE STRUCTUREDNESS AND LOC PER USER-DEFINED FUNCTION OF
TABLE IX
SPEC PROGRAMS.
RetDec
1709.6
168.7
McSema0
BinRec
clang
3188.4
44.3
McSema
6026.5
247.6
70947.1
6926.8
325.5
6344.1 (27894.4)
#goto
LOC
Table IX reports the structuredness evaluation results. As
discussed in Sec. VI-B, mctoll failed lifting all SPEC pro-
grams. Therefore, mctoll is omitted in Table IX. In addition,
llvmir2hll cannot ﬁnish decompiling LLVM IR code of
403.gcc and 400.perlbench lifted by BinRec within
two weeks. Decompiling 403.gcc IR code lifted by RetDec
has similar timeout issue. 403.gcc and 400.perlbench
are two largest SPEC C programs. Therefore, we exclude these
two programs when reporting Table IX.
Among all the lifted C code, RetDec shows even fewer
goto statements compared with clang (see Findings for
discussions). In contrast, McSema and McSema0 retained
almost double amount of goto statements. As aforemen-
tioned, BinRec covers on average 23.0% functions for each
SPEC program, inducing on average 6344.1 goto statements
per program. As a result, we estimate that BinRec would
generate about 27894.4 goto statements if full coverage was
achieved. We also obtained consistent results for the LOC per
function evaluation: compiled IR exhibits best performance for
this criterion, followed by RetDec and McSema. BinRec
maintains the entire lifted IR code into a huge “wrapper”
function, thus manifesting relatively higher LOC.
Fig. 4 presents a case study by comparing decompiled
C code of function global opt in 429.mcf. A goto
statement appears within the loop in Fig. 5(a), corresponding
to a control transfer in the IR code. Accordingly, our manual
study shows that RetDec has already optimized away that
seemingly useless control transfer. This indicates the impor-
tance of code optimization. McSema (and McSema0) shows
likely sloppy code patterns, where a (useless) goto is placed
right before its targeted label. This code pattern might partially
explain that McSema has almost double remaining #goto.
While such special goto patterns might be easy to pinpoint
and elide, Fig. 4 has also revealed the low readability of
C code decompiled from McSema generated IR. C code in
Fig. 4 has been largely simpliﬁed: the global opt function
decompiled from McSema generated IR has 298 LOC, and the
same function decompiled from McSema0 generated IR has
234 LOC; both functions are verbose and hard to read.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:56:18 UTC from IEEE Xplore.  Restrictions apply. 
1109
Fig. 4. Decompilation case study of 429.mcf. The decompiled code, in particular the McSema case, is extensively simpliﬁed for readability. Indeed,
global opt decompiled from clang and RetDec generated IR has 32 and 45 LOC, respectively. In contrast, global opt decompiled from McSema
and McSema0 generated IR are obscure and verbose (298 and 234 LOC).
Findings. To date, decompiled C code is mostly used by
experts for code comprehension. Although we have extensively
simpliﬁed the sample code in Fig. 4, it should be accurate to
assume that any users with elementary C programming back-
ground can spot the (syntactic) difference between Fig. 4(a)
and Fig. 4(c). In contrast, Fig. 4(a) and Fig. 4(b) are closely
correlated. In addition to good support for discriminability
analysis, this section has reported ﬁndings that compact IR
code recovered by RetDec largely improves the readability
and structuredness of its decompiled C code. Soon we will
show that decompilation evaluation over cross-compiler, cross-
optimization, and cross-architecture settings also report con-
sistently encouraging ﬁndings (see Sec. VII and Sec. VIII).
In addition to (commercial) decompilers which can generate
relatively more structured C code (see Sec. IX), show that there
are free and highly extensible lifter-based solutions with decent
performance. Consistent with ﬁndings in discriminability anal-
ysis, we interpret that: 1) code optimization plays a critical role
in supporting decompilation and generating C code of better
quality, and 2) recovering local variables helps to eliminate
the emulation-style lifting, enabling the generation of succinct
C code with higher readability.
Possible Enhancements. Overall, our ﬁndings show that the
high-level lifting promotes both discriminability analysis and
C decompilation. Hence, we envision that Possible Enhance-
ments elaborated in Sec. VI-C can also be leveraged to
enhance support of decompilation. Moreover, Fig. 4 has shed
lights on conducting user survey as a future direction to
summarize more ﬁndings on the (un)structuredness of C code
decompiled from lifted IR code. Those ﬁndings can provide
practical feedback to ﬁne tune lifters.
E. Functionality Correctness of Lifted IR Programs
Existing research has laid a solid foundation on testing
or formally verifying binary lifters [66], [38], [37]. Hence,
measuring the functionality correctness is not our primary
focus. Nevertheless, we still recompile the lifted IR code and
check their execution results to compare with other metrics.
SVF programs are relatively simple with no execution
outputs. Hence, we omit SVF programs in this evaluation.
We select one POJ-104 program from each class (in total
of 104 programs). Since no documents are shipped by POJ-
104, we manually write test inputs by reading the source
code. We successfully wrote non-trivial inputs and acquired
the corresponding outputs for 86 programs. These input/output
pairs are used to check the correctness of the lifted IR code.
For nine SPEC programs, we use their shipped scripts for
testing. The results are reported as follows:
POJ-104
SPEC
McSema
94.2%
44.4%
McSema0
94.2%
44.4%
RetDec
20.3%
0
mctoll
22.1%
0
BinRec
100.0%
100.0%
Most IR programs lifted by McSema (and McSema0) can
pass the test cases. RetDec and mctoll show lower success
rates; we ﬁnd that their successful cases are largely overlapped
(i.e., 16 simple POJ-104 programs), indicating that they show
reasonable correctness for relatively simple cases. A few IR
programs lifted by RetDec have reverse engineering failures
(annotated with “undeﬁned function” in its outputs), imped-
ing recompilation. We use the test, ref, and train input
9 ≈ 44.4%)
sets of SPEC to check the correctness. Four ( 4
SPEC programs lifted by McSema and McSema0 can pass
the functionality check. Given that SPEC test cases have been
evaluated in the BinRec paper [18], we run POJ-104 cases.
As suggested by the BinRec authors, we conﬁgure S2E with
concrete inputs to lift POJ-104 cases. The evaluation is highly
encouraging: all test cases can be correctly lifted into IR and
then recompiled into another piece of executable.
Findings. McSema shows highly promising results for gen-
erating functionality-preserving IR code. In Sec. IX and
Appx. A, we further show that by generating functional
code, McSema exhibits good support for sanitization [101]
(as sanitized code needs to be executed instead of statically
analyzed). Nonetheless, as reported in this section, McSema’s
output is of low expressiveness. It does not sufﬁce supporting
security analysis as good as compiled IR code, nor is it
comparable to that of other lifters, such as RetDec and
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:56:18 UTC from IEEE Xplore.  Restrictions apply. 
1110
(a)CCodeDecompiledfromClangGeneratedIRint64_tglobal_opt(void) {int64_tv1=5;while(v1 != 0) {printf("active arcs : %ld\n", g1.e5);primal_net_simplex(&g1);if(v1==0)gotolabel_pc_unknown;int64_tv2 = price_out_impl(&g1);if(v2e6.e13.e0.e0;while(v1 != 0) {Mem*mem1= printf(s, mem);Mem*mem2= price_out_impl(s, pc+0x324f, mem1);v1 = v1-16;if(v1==0)gotolab_block_400ad4;int64_t v29 = (&s->e6.e1.e0).e0;if(v29<0){Mem*mem3= printf(s, mem2);exit(-1);}}gotolab_block_400ad4;lab_block_400ad4:returnmem4;}(c)CCodeDecompiledfromMcsemaLiftedIREVALUATION RESULTS FOR EXECUTABLES ON THE ARM64 PLATFORM.
TABLE X
Lifter
RetDec
McSema
MustAlias
Pointer Analysis
MayAlias
0.0%
0.0%
0.0%
0.0%
NoAlias
16.9%
0.0%
Discriminability
Classiﬁcation Accuracy
74.8%
53.5%
C Decompilation
LOC
#goto
97.5
1364.6
12184.2
252.6
Functionality
POJ-104
18.2%
0.0%
SPEC
0.0%
0.0%
mctoll. Overall, we summarize that modern binary lifters
are seen to have distinct design focus,
inducing different
levels of support for downstream tasks. This aspect, despite its
importance, is generally ignored by the community and could
cause great confusions in various security usage scenarios.
Lessons.
It might be accurate to summarize inspiring meta-
lessons from the functionality evaluation: emulation lifting
adopted by McSema and BinRec generates LLVM IR code
that can be smoothly recompiled and executed. Its output,
however,
is not analysis-
friendly. Hence, users aiming to recompile the lifted LLVM IR
code can opt for emulation-style lifters for better functionality
correctness guarantee. In contrast, high-level lifting with more
aggressive optimizations could be used in case users opt
for more “expressive” LLVM IR code to support analysis.
Also, LLVM IR is platform independent; hence, emulation
lifting can support cross-platform proﬁling and recompila-
tion [18], while existing functionality-preserving disassem-
bling (e.g., [110], [108], [49], [43]) can only support assembly
code reuse on the same platform.
is likely to be low-level
that
it
VII. CROSS-PLATFORM EVALUATION
Existing research has been using (customized) binary lifters
to convert ﬁrmware samples into LLVM IR for security analy-
sis (e.g., [37], [40]). In this section, we further explore lifting
binary code compiled on the ARM architecture. RetDec and
McSema support lifting binary code compiled on the 64-bit
ARM platform. Appx. D reports the binary lifting results; only
McSema made a few (less than 1%) lifting failures.
We report evaluation results in Table X. We interpret that
de facto lifters show comparable support on 64-bit x86 and
ARM64 platforms. In particular, discriminability analysis re-
ports mostly consistent results compared with Table VIII. Both
RetDec and McSema show low support for pointer analysis.
This is intuitive: key ﬁndings that impedes pointer analysis of
RetDec and McSema in Sec. VI-B are platform independent.
Table X shows that C code decompiled from McSema-
generated IR code contains more goto. Recall llvmir2hll
cannot decompile the LLVM IR code of 403.gcc in our
decompilation evaluation on x86 platforms (Sec. VI-D). We
report that the LLVM IR code of 403.gcc can be success-
fully decompiled, and therefore, #goto in the 403.gcc case
is taken into account when computing the average results in
Table X. This case contributes over 70K goto statements,
thus largely increasing the average results.
McSema also shows surprisingly low support for func-
tionality correctness. Our manual study shows that McSema
generates an incorrect wrapper for the main function. That is,
the LLVM IR program entry point of all lifted cases are mal-
functional due to bugs. We show this erroneous code pattern
at [11]. We have reported this issue to the McSema developers.
EVALUATION FOR CROSS-COMPILER AND CROSS-OPTIMIZATION
SETTINGS. “ C L A N G -O0” HAVE BEEN REPORTED IN SEC. VI.
TABLE XI
C Decompilation
Lifter
RetDec
mctoll
McSema
BinRec
RetDec
mctoll
McSema
BinRec
RetDec
mctoll
McSema
BinRec
RetDec
mctoll
McSema
BinRec
NA
gcc -O0
gcc -O3
clang -O0
clang -O3
clang -O0
Discriminability
Avg. Accuracy
78.8%
55.2%
15.4%
22.3%
78.3%
41.2%
10.8%
11.0%
81.9%
77.4%
46.0%
11.6%
79.6%