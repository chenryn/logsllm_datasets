---
author: Dave Cheney
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 1
  likes: 0
  sharetimes: 0
  viewnum: 5430
date: '2018-10-11 15:06:40'
editorchoice: false
excerpt: 在今天的演讲中，我想讨论五个有助于提高 Go 性能的特性。我还将与大家分享 Go 如何实现这些特性的细节。
fromurl: https://dave.cheney.net/2014/06/07/five-things-that-make-go-fast
id: 10101
islctt: true
largepic: /data/attachment/album/201810/11/150643u292532u4e21lsi2.jpg
permalink: /article-10101-1.html
pic: /data/attachment/album/201810/11/150643u292532u4e21lsi2.jpg.thumb.jpg
related: []
reviewer: wxy
selector: ''
summary: 在今天的演讲中，我想讨论五个有助于提高 Go 性能的特性。我还将与大家分享 Go 如何实现这些特性的细节。
tags:
- Go
- 性能
thumb: false
title: 五种加速 Go 的特性
titlepic: true
translator: houbaron
updated: '2018-10-11 15:06:40'
---
*Anthony Starks 使用他出色的 Deck 演示工具重构了我原来的基于 Google Slides 的幻灯片。你可以在他的博客上查看他重构后的幻灯片,*   
 *[mindchunk.blogspot.com.au/2014/06/remixing-with-deck](http://mindchunk.blogspot.com.au/2014/06/remixing-with-deck.html)。*
我最近被邀请在 Gocon 发表演讲，这是一个每半年在日本东京举行的 Go 的精彩大会。[Gocon 2014](http://ymotongpoo.hatenablog.com/entry/2014/06/01/124350) 是一个完全由社区驱动的为期一天的活动，由培训和一整个下午的围绕着生产环境中的 Go 这个主题的演讲组成.（LCTT 译注：本文发表于 2014 年）
以下是我的讲义。原文的结构能让我缓慢而清晰的演讲，因此我已经编辑了它使其更可读。
我要感谢 [Bill Kennedy](http://www.goinggo.net/) 和 Minux Ma，特别是 [Josh Bleecher Snyder](https://twitter.com/offbymany)，感谢他们在我准备这次演讲中的帮助。
---
大家下午好。
我叫 David.
我很高兴今天能来到 Gocon。我想参加这个会议已经两年了，我很感谢主办方能提供给我向你们演讲的机会。
[![Gocon 2014](/data/attachment/album/201810/11/150643u292532u4e21lsi2.jpg)](https://dave.cheney.net/wp-content/uploads/2014/06/Gocon-2014-1.jpg)
我想以一个问题开始我的演讲。
为什么选择 Go？
当大家讨论学习或在生产环境中使用 Go 的原因时，答案不一而足，但因为以下三个原因的最多。
[![Gocon 2014 ](/data/attachment/album/201810/11/150644vpkzbkq2nbt8da8z.jpg)](https://dave.cheney.net/2014/06/07/five-things-that-make-go-fast/gocon-2014-2)
这就是 TOP3 的原因。
第一，并发。
Go 的  并发原语   Concurrency Primitives  对于来自 Nodejs，Ruby 或 Python 等单线程脚本语言的程序员，或者来自 C++ 或 Java 等重量级线程模型的语言都很有吸引力。
易于部署。
我们今天从经验丰富的 Gophers 那里听说过，他们非常欣赏部署 Go 应用的简单性。
[![Gocon 2014](/data/attachment/album/201810/11/150644diqsprjzahlqrshn.jpg)](https://dave.cheney.net/wp-content/uploads/2014/06/Gocon-2014-3.jpg)
然后是性能。
我相信人们选择 Go 的一个重要原因是它 快。
[![Gocon 2014 (4)](/data/attachment/album/201810/11/150645gvuegpv2i5iqgg2w.jpg)](https://dave.cheney.net/wp-content/uploads/2014/06/Gocon-2014-4.jpg)
在今天的演讲中，我想讨论五个有助于提高 Go 性能的特性。
我还将与大家分享 Go 如何实现这些特性的细节。
[![Gocon 2014 (5)](/data/attachment/album/201810/11/150645amzs7276a4sfczfz.jpg)](https://dave.cheney.net/wp-content/uploads/2014/06/Gocon-2014-5.jpg)
我要谈的第一个特性是 Go 对于值的高效处理和存储。
[![Gocon 2014 (6)](/data/attachment/album/201810/11/150646bo3sz2uukl93xyq2.jpg)](https://dave.cheney.net/wp-content/uploads/2014/06/Gocon-2014-6.jpg)
这是 Go 中一个值的例子。编译时，`gocon` 正好消耗四个字节的内存。
让我们将 Go 与其他一些语言进行比较
[![Gocon 2014 (7)](/data/attachment/album/201810/11/150646r3dahhd4wbmdidwc.jpg)](https://dave.cheney.net/wp-content/uploads/2014/06/Gocon-2014-7.jpg)
由于 Python 表示变量的方式的开销，使用 Python 存储相同的值会消耗六倍的内存。
Python 使用额外的内存来跟踪类型信息，进行  引用计数   Reference Counting  等。
让我们看另一个例子：
[![Gocon 2014 (8)](/data/attachment/album/201810/11/150646o45jxvihlb0wbhej.jpg)](https://dave.cheney.net/wp-content/uploads/2014/06/Gocon-2014-8.jpg)
与 Go 类似，Java 消耗 4 个字节的内存来存储 `int` 型。
但是，要在像 `List` 或 `Map` 这样的集合中使用此值，编译器必须将其转换为 `Integer` 对象。
[![Gocon 2014 (9)](/data/attachment/album/201810/11/150647fgm8ks8slseez5v2.jpg)](https://dave.cheney.net/wp-content/uploads/2014/06/Gocon-2014-9.jpg)
因此，Java 中的整数通常消耗 16 到 24 个字节的内存。
为什么这很重要？ 内存便宜且充足，为什么这个开销很重要？
[![Gocon 2014 (10)](/data/attachment/album/201810/11/150648hpfvr7f8171gd2vz.jpg)](https://dave.cheney.net/wp-content/uploads/2014/06/Gocon-2014-10.jpg)
这是一张显示 CPU 时钟速度与内存总线速度的图表。
请注意 CPU 时钟速度和内存总线速度之间的差距如何继续扩大。
两者之间的差异实际上是 CPU 花费多少时间等待内存。
[![Gocon 2014 (11)](/data/attachment/album/201810/11/150649ylzan0eoykrky27n.jpg)](https://dave.cheney.net/wp-content/uploads/2014/06/Gocon-2014-11.jpg)
自 1960 年代后期以来，CPU 设计师已经意识到了这个问题。
他们的解决方案是一个缓存，一个更小、更快的内存区域，介入 CPU 和主存之间。
[![Gocon 2014 (12)](/data/attachment/album/201810/11/150649izqnonw1n1h1wm1i.jpg)](https://dave.cheney.net/wp-content/uploads/2014/06/Gocon-2014-12.jpg)
这是一个 `Location` 类型，它保存物体在三维空间中的位置。它是用 Go 编写的，因此每个 `Location` 只消耗 24 个字节的存储空间。
我们可以使用这种类型来构造一个容纳 1000 个 `Location` 的数组类型，它只消耗 24000 字节的内存。
在数组内部，`Location` 结构体是顺序存储的，而不是随机存储的 1000 个 `Location` 结构体的指针。
这很重要，因为现在所有 1000 个 `Location` 结构体都按顺序放在缓存中，紧密排列在一起。
[![Gocon 2014 (13)](/data/attachment/album/201810/11/150650c66jf939e393f6qr.jpg)](https://dave.cheney.net/wp-content/uploads/2014/06/Gocon-2014-13.jpg)
Go 允许您创建紧凑的数据结构，避免不必要的填充字节。
紧凑的数据结构能更好地利用缓存。
更好的缓存利用率可带来更好的性能。
[![Gocon 2014 (14)](/data/attachment/album/201810/11/150650glq4l7j17thd7jvj.jpg)](https://dave.cheney.net/wp-content/uploads/2014/06/Gocon-2014-14.jpg)
函数调用不是无开销的。
[![Gocon 2014 (15)](/data/attachment/album/201810/11/150651gr506rjrovm54u5p.jpg)](https://dave.cheney.net/wp-content/uploads/2014/06/Gocon-2014-15.jpg)
调用函数时会发生三件事。
创建一个新的  栈帧   Stack Frame ，并记录调用者的详细信息。
在函数调用期间可能被覆盖的任何寄存器都将保存到栈中。
处理器计算函数的地址并执行到该新地址的分支。
[![Gocon 2014 (16)](/data/attachment/album/201810/11/150651izdou9rxzkvdoxmh.jpg)](https://dave.cheney.net/wp-content/uploads/2014/06/Gocon-2014-16.jpg)