---
author: Dave Cheney
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 1
  likes: 0
  sharetimes: 0
  viewnum: 5430
date: '2018-10-11 15:06:40'
editorchoice: false
excerpt: 在今天的演讲中，我将探讨五个有助于提高 Go 性能的特性，并分享这些特性的实现细节。
fromurl: https://dave.cheney.net/2014/06/07/five-things-that-make-go-fast
id: 10101
islctt: true
largepic: /data/attachment/album/201810/11/150643u292532u4e21lsi2.jpg
permalink: /article-10101-1.html
pic: /data/attachment/album/201810/11/150643u292532u4e21lsi2.jpg.thumb.jpg
related: []
reviewer: wxy
selector: ''
summary: 本文将讨论五个提升 Go 语言性能的关键特性，并深入解析这些特性的实现机制。
tags:
- Go
- 性能
thumb: false
title: 提升 Go 性能的五种特性
titlepic: true
translator: houbaron
updated: '2018-10-11 15:06:40'
---

**注：Anthony Starks 使用他出色的 Deck 演示工具重构了我原来的基于 Google Slides 的幻灯片。你可以在他的博客上查看重构后的幻灯片:** *[mindchunk.blogspot.com.au/2014/06/remixing-with-deck](http://mindchunk.blogspot.com.au/2014/06/remixing-with-deck.html)*

我最近受邀在 Gocon 上发表演讲，这是一个每半年在日本东京举行的 Go 开发者大会。[Gocon 2014](http://ymotongpoo.hatenablog.com/entry/2014/06/01/124350) 是一个完全由社区驱动的一日活动，包括培训和一系列关于生产环境中使用 Go 的主题演讲。（LCTT 译注：本文发表于 2014 年）

以下是我的讲义。为了便于阅读，我已经对原文进行了编辑。

特别感谢 [Bill Kennedy](http://www.goinggo.net/)、Minux Ma 和 [Josh Bleecher Snyder](https://twitter.com/offbymany)，他们在准备这次演讲过程中给予了极大的帮助。

---

大家下午好，

我是 David。我很高兴今天能在 Gocon 发表演讲。我一直希望能参加这个会议已经两年了，非常感谢主办方给我这个机会与大家分享我的想法。

![Gocon 2014](/data/attachment/album/201810/11/150643u292532u4e21lsi2.jpg)

我想以一个问题开始我的演讲：

为什么选择 Go？

当人们讨论学习或在生产环境中使用 Go 的原因时，答案各不相同，但最常见的三个原因是并发性、易于部署和性能。

![Gocon 2014 ](/data/attachment/album/201810/11/150644vpkzbkq2nbt8da8z.jpg)

### 三大原因

1. **并发性**：
   - Go 的并发原语对于来自 Node.js、Ruby 或 Python 等单线程脚本语言的程序员来说非常吸引人，同时也适用于 C++ 或 Java 等具有重量级线程模型的语言。

2. **易于部署**：
   - 经验丰富的 Gophers（Go 开发者）高度评价 Go 应用程序的简单部署过程。

   ![Gocon 2014](/data/attachment/album/201810/11/150644diqsprjzahlqrshn.jpg)

3. **性能**：
   - 我相信人们选择 Go 的一个重要原因是它非常快。

   ![Gocon 2014 (4)](/data/attachment/album/201810/11/150645gvuegpv2i5iqgg2w.jpg)

在今天的演讲中，我将讨论五个有助于提高 Go 性能的特性，并分享这些特性的实现细节。

![Gocon 2014 (5)](/data/attachment/album/201810/11/150645amzs7276a4sfczfz.jpg)

### 特性一：高效的值处理和存储

这是 Go 中的一个值示例。编译时，`gocon` 恰好消耗四个字节的内存。

让我们将 Go 与其他一些语言进行比较：

- **Python**：由于 Python 表示变量的方式开销较大，存储相同的值会消耗六倍的内存。Python 使用额外的内存来跟踪类型信息和引用计数等。

- **Java**：与 Go 类似，Java 消耗 4 个字节的内存来存储 `int` 型。但在集合如 `List` 或 `Map` 中使用此值时，编译器必须将其转换为 `Integer` 对象，因此 Java 中的整数通常消耗 16 到 24 个字节的内存。

为什么这很重要？虽然内存便宜且充足，但这种开销会导致 CPU 花费更多时间等待内存访问。

![Gocon 2014 (10)](/data/attachment/album/201810/11/150648hpfvr7f8171gd2vz.jpg)

自 1960 年代后期以来，CPU 设计师已经意识到这个问题。他们的解决方案是引入缓存，即更小、更快的内存区域，位于 CPU 和主存之间。

![Gocon 2014 (12)](/data/attachment/album/201810/11/150649izqnonw1n1h1wm1i.jpg)

### 示例：紧凑的数据结构

这是一个 `Location` 类型，用于保存物体在三维空间中的位置。它是用 Go 编写的，每个 `Location` 只消耗 24 个字节的存储空间。我们可以创建一个容纳 1000 个 `Location` 的数组，它只消耗 24000 字节的内存。在数组内部，`Location` 结构体是顺序存储的，而不是随机存储的 1000 个 `Location` 结构体的指针。这使得所有 1000 个 `Location` 结构体都能紧密地排列在一起，从而更好地利用缓存，进而带来更好的性能。

![Gocon 2014 (14)](/data/attachment/album/201810/11/150650glq4l7j17thd7jvj.jpg)

### 函数调用的开销

函数调用不是无开销的。调用函数时会发生以下三件事：

1. 创建一个新的栈帧并记录调用者的详细信息。
2. 在函数调用期间可能被覆盖的任何寄存器都将保存到栈中。
3. 处理器计算函数的地址并执行到该新地址的分支。

![Gocon 2014 (16)](/data/attachment/album/201810/11/150651izdou9rxzkvdoxmh.jpg)

通过理解这些底层机制，我们可以编写出更加高效和高性能的 Go 代码。