### Key Lengths for Root and Leaf Certificates

- **Bad Signature Hashing Algorithms**: Three leaf certificates were signed using either MD4, MD5, or SHA1.

Before using these faulty certificates, we tested them against the latest version of Firefox (v53.0 at the time of testing) to verify that Firefox terminates all TLS connections involving these certificates.

As part of our analysis of the certificate validation mechanisms, we ensured that the TLS proxies do not cache TLS certificates by checking the 'Organization Name' field in the subject parameter of the server certificates. Each leaf certificate in the crafted chains contains a unique 'Organization Name' value, allowing us to identify exactly which TLS certificate is being proxied.

### 4.8 Private Key Protection, Self-Issued, and Pre-Generated Certificates

We attempted to locate the private key corresponding to the root certificate of the TLS proxy and assess whether it is adequately protected, such as being inaccessible to non-root processes or encrypted with an admin password. We then used the located private keys to sign leaf certificates and checked if the TLS proxy accepts its own certificates as the issuing authority for externally delivered content.

To locate the private keys on non-Windows systems, we required access to the network appliances' disks and their file systems. If we gained access to an appliance's file system (as described in Section 4.2), we searched for files with known private key extensions: ".pem", ".key", ".pfx", and ".p12". We compared the modulus of the located RSA private keys with the proxy's public key certificate to find the correct corresponding key. If the file system was inaccessible, we parsed the raw disks for keys using the Linux command `strings` on the virtual hard disk file and searched for private keys. We also used memory analysis tools, such as Volatility [23] and Heartleech [9], to extract the private keys in some cases; for more details, see Appendix B. Even if we acquired the private key using this methodology, we did not obtain information about the key's location within the appliance's file system, storage method (e.g., encrypted, obfuscated), and the privileges required to access the key. For Windows-based appliances, we used Mimikatz [15] to extract the private key (cf. [32]). Key storage on Windows is typically handled using two APIs: Cryptography API (CAPI) or Cryptography API: Next Generation (CNG [24]). When executed with Administrator privileges, Mimikatz exports private keys stored using CAPI and CNG. We checked the location of the private keys, the privileges required to access them, and whether any encryption or obfuscation was applied.

We also checked if appliance vendors rely on pre-generated certificates for their proxies, which could be very damaging. We installed two instances of the same product and compared the certificates along with their corresponding private keys (if located). If we found the same key, we concluded that the appliance uses a pre-generated certificate instead of per-installation keys/certificates.

### 5 Results

#### 5.1 TLS Parameters

See Table 2 for an overview.

- **TLS Versions and Mapping**: Four appliances support TLS versions 1.2, 1.1, and 1.0; pfSense does not support TLS 1.0. Microsoft Threat Management Gateway (TMG) supports only TLS 1.0 and (more worryingly) SSLv3. As many web servers no longer support these versions (specifically SSLv3), clients behind TMG may be unable to visit these websites. Except for TMG, other appliances map all the proxy-to-server TLS versions to TLS 1.2 for the client-to-proxy connection (i.e., artificial version upgrade, misleading browsers/users).

- **Certificate Parameters and Mapping**: No appliance mirrors the RSA key sizes; instead, they use hard-coded key lengths for all generated certificates. Two use non-recommended RSA-1024 certificates, while the remaining four artificially upgrade/downgrade the external key length, potentially misleading clients/users. Regarding hashing algorithms used for signing certificates, five appliances use SHA256, making external SHA1-based certificates (considered insecure) invisible to browsers; only Microsoft TMG mirrors the hash algorithm. All appliances intercept TLS connections with EV certificates, downgrading any EV certificate to DV (as the proxies cannot generate EV certificates).

- **Cipher Suites**: We used the Qualys Client Test [18] to determine the list of cipher suites used by the TLS proxies. No proxy mirrors the cipher suites and instead uses a hard-coded list. Cisco Ironport WSA and pfSense exclude any weak or insecure ciphers from their cipher suites. Untangle, WebTitan Gateway, Microsoft TMG, and UserGate offer 3DES, which is now considered weak due to its relatively small block size [28]. UserGate offers the insecure DES cipher [47]. Microsoft TMG and WebTitan include RC4, which has been shown to have biases [48] and is no longer supported by modern browsers. Microsoft TMG additionally includes the deprecated MD5 hash algorithm [49] and insecure SSLv3 ciphers. WebTitan Gateway includes an IDEA cipher [29] with a 64-bit block length. When relying on DHE ciphers, a reasonably secure modulus value should be used, e.g., 2048 or higher [26]. All tested appliances accepted a modulus size of 1024-bit; UserGate even accepted a 512-bit modulus.

- **Known TLS Attacks**:
  - **BEAST**: pfSense does not support TLS 1.0 by default, so it is considered safe against BEAST. For a system to be vulnerable to BEAST, it must support TLS 1.0 and use the CBC mode. After the BEAST attack was uncovered, a patch was released for CBC but was identically named. Therefore, there is no easy way to distinguish between the unpatched and patched CBC (implementing the 1/(n âˆ’ 1) split patch [1], initially pushed by Firefox). Untangle, WebTitan Gateway, UserGate, and Cisco Ironport WSA are possibly vulnerable to BEAST. However, Microsoft TMG is vulnerable to the BEAST attack, as its CBC cipher was recognized by howsmyssl.com. Combined with a Java applet to bypass the same origin policy, the BEAST attack could leak authentication cookies.
  - **CRIME**: Only WebTitan Gateway is vulnerable to the CRIME attack due to its support for TLS compression [34].
  - **FREAK and Logjam**: All appliances are patched against the FREAK and Logjam attacks and use a secure renegotiation.

#### 5.2 Certificate Validation Results

In this section, we discuss the vulnerabilities found in the certificate validation mechanism of the tested TLS proxies; for a summary, see Tables 3, 4, and 5.

- **WebTitan and UserGate**: These appliances do not perform any certificate validation; their TLS proxies allowed all the faulty TLS certificates. This can enable a trivial MITM attack, as attackers can use a self-signed certificate for any desired domain, fooling even the most secure and up-to-date browsers behind WebTitan and UserGate. Additionally, UserGate caches certificates and does not reconsider changes in the server-side certificate. Both appliances, however, block access to web pages that utilize RSA-512 server certificates, possibly triggered by the TLS libraries used by the TLS proxies, not the TLS interception certificate validation code (as evident from the error messages observed). Therefore, we omit WebTitan Gateway and UserGate from the remaining discussion.

- **All Six Appliances**: Accept certificate chains with intermediates that have a bad name constraint. Untangled forwards the wrong CN. See Table 3 for detailed results.

- **Table 4**: Shows the results for certificate validation, part II. For the legend, see Table 3; N/A means not tested as the appliance disallows adding the corresponding faulty CA certificate to its trusted store.

### Conclusion

This section summarizes the findings and provides a comprehensive overview of the TLS parameters, certificate validation, and known vulnerabilities in the tested TLS proxies.