key lengths for root and leaf certificates.
- Bad Signature Hashing Algorithms: Three leaf certificates signed
using either MD4, MD5, or SHA1.
Before using these faulty certificates, we assess them against the
latest version of Firefox (v53.0, at the time of testing), and verify that
Firefox terminates all TLS connections involving these certificates.
As part of the analysis of the certificate validation mechanisms,
we ensure that the TLS proxies do not cache TLS certificates, by
checking the ‘Organization Name’ field of the subject parameter in
the server certificates. Each leaf certificate of the crafted chains con-
tains a unique ‘Organization Name’ value, allowing us to identify
exactly which TLS certificate is being proxied.
4.8 Private Key Protection, Self-issued, and
Pre-Generated Certificates
We attempt to locate a TLS proxy’s private key (corresponding
to its root certificate), and learn if it is protected adequately, e.g.,
inaccessible to non-root processes, encrypted under an admin pass-
word. Subsequently, we use the located private keys to sign leaf
certificates, and check if the TLS proxy accepts its own certificates
as the issuing authority for externally delivered content.
To locate the private keys on the non-Windows systems, access
to the network appliances’ disks content and their filesystems is
required. If we get access to an appliance’s filesystem (following
Section 4.2), we search for files with the following known private
key file extensions: “.pem”, “.key”, “.pfx”, and “.p12”, and then com-
pare the modulus of located RSA private keys with the proxy’s
public key certificate to locate the correct corresponding key. If
the filesystem is inaccessible, we parse the raw disks for keys, us-
ing the Linux command strings on the virtual hard disk file and
search for private keys. We also use memory analysis tools, such
as Volatility [23] and Heartleech [9], to extract the private keys in
some cases; for more, see Appendix B. If we acquire the private
key using this methodology, we still get no information on the
key’s location within the appliance’s file system, storage method
(e.g. encrypted, obfuscated), and privileges required to access the
key. For Windows-based appliances, we utilize Mimikatz [15] to
extract the private key (cf. [32]). Key storage is usually handled
on Windows using two APIs: Cryptography API (CAPI), or Cryp-
tography API: Next Generation (CNG [24]). When executed with
Administrator privileges, Mimikatz exports private keys that are
stored using CAPI and CNG. We check the location of the private
keys, the privilege required to access them and if any encryption
or obfuscation is applied.
We also check if appliance vendors rely on pre-generated certifi-
cates for their proxies, which could be very damaging. We install
two instances of the same product, and compare the certificates
ASIA CCS ’18, June 4–8, 2018, Incheon, Republic of Korea
Louis Waked, Mohammad Mannan, and Amr Youssef
Table 2: Results for TLS parameter mapping/mirroring and vulnerabilities to known attacks. For TLS version mapping, we
display the TLS versions seen by the client when the web server uses TLS 1.2, 1.1, 1.0 and SSL 3.0 (‘–’ means unsupported).
Under “Problematic Ciphers”: Weak means deprecated; Insecure means broken; blank means good ciphers. Under “Patched
Against Attacks”: ✗ means vulnerable; ✗* means potentially vulnerable (unknown if CBC is patched with 1/(n− 1) split); blank
means patched.
TLS Version Mapping
SSL
TLS
1.2
3.0
–
1.2
Untangle
–
1.2
pfSense
–
1.2
WebTitan Gateway
3.0
–
Microsoft TMG
–
1.2
UserGate Web Filter
Cisco Ironport WSA 1.2
–
TLS
1.1
1.2
1.2
1.2
–
1.2
1.2
TLS
1.0
1.2
–
1.2
1.0
1.2
1.2
Cipher Suites
Problematic
Ciphers
Weak
Weak + Insecure
Weak + Insecure
Weak + Insecure
Cipher
Suites
Mirroring
✗
✗
✗
✗
✗
✗
along with their correspondent private keys (if located). If we find
the same key, we conclude that the appliance uses a pre-generated
certificate, instead of per-installation keys/certificates.
5 RESULTS
In this section, we present the results of our analysis.
5.1 TLS Parameters
See Table 2 for an overview.
TLS versions and mapping. Four appliances support TLS ver-
sions 1.2, 1.1, and 1.0; pfSense does not support TLS 1.0. Microsoft
Threat Management Gateway (TMG) supports only TLS 1.0 and
(more worryingly) SSLv3; as many web servers nowadays do not
support these versions (specifically SSLv3), we suspect that clients
behind TMG will be unable to visit these websites. Except TMG,
other appliances map all the proxy-to-server TLS versions to TLS
1.2 for the client-to-proxy connection (i.e., artificial version upgrade,
misleading browsers/users).
Certificate parameters and mapping. No appliance mirrors the
RSA key sizes; instead, they use hard-coded key lengths for all
generated certificates. Two use non-recommended RSA-1024 certifi-
cates, while the remaining four artificially upgrade/downgrade the
external key-length, and thus may mislead clients/users. Regarding
hashing algorithms used for signing certificates, five appliances
use SHA256 and thus will make external SHA1-based certificates
(considered insecure) invisible to browsers; only Microsoft TMG
mirrors the hash algorithm. All appliances intercept TLS connec-
tions with EV certificates, and thus, inevitably downgrade any EV
certificate to DV (as the proxies cannot generate EV certificates).
Cipher suites. We use the Qualys Client Test [18] to determine
the list of cipher suites used by the TLS proxies; no proxy mirrors
the cipher suites and use a hard-coded list instead.
The Cisco Ironport WSA and pfSense exclude any weak or inse-
cure ciphers from their cipher suites. Untangle, WebTitan Gateway,
Microsoft TMG, and UserGate offer 3DES, which is now considered
weak due its relatively small block size [28]. UserGate offers the
insecure DES cipher [47]. Microsoft TMG and WebTitan include
RC4, which has been shown to have biases [48], and is no longer
supported by any modern browsers. Microsoft TMG additionally in-
cludes the deprecated MD5 hash algorithm [49], and insecure SSLv3
Key
Length
Mapping
Certificate Parameter Mapping
EV
Certi-
ficates
DV
DV
DV
DV
DV
DV
Signature
Algorithm
Mapping
SHA256
SHA256
SHA256
Mirrored
SHA256
SHA256
2048
4096
1024
2048
1024
2048
Insecure
Renego-
tiation
Patched Against Attacks
BEAST FREAK Logjam CRIME
✗*
✗*
✗
✗*
✗*
✗
ciphers. WebTitan Gateway includes an IDEA cipher [29] with a
64-bit block length. When relying on the DHE ciphers, a reasonably
secure modulus value should be used, e.g., 2048 or higher [26]. All of
the tested appliances accepted a modulus size of 1024-bit; UserGate
even accepted a 512-bit modulus.
Known TLS attacks. pfSense does not support TLS 1.0 by default,
so it is considered as safe against BEAST. For a system to be vul-
nerable to BEAST, it has to support TLS 1.0, and use the CBC mode.
However, after the BEAST attack was uncovered, a patch was re-
leased for CBC, but was identically named as CBC. Because of that,
there is no easy way to distinguish between the unpatched CBC and
patched CBC (implementing the 1/(n − 1) split patch [1], initially
pushed by Firefox). Untangle, WebTitan Gateway, UserGate, and
Cisco Ironport WSA are possibly vulnerable to BEAST. However,
Microsoft TMG is vulnerable to the BEAST attack, as its CBC cipher
was recognized by howsmyssl.com. When combined with a Java
applet to bypass the same origin policy, the BEAST attack could
leak authentication cookies. Only WebTitan Gateway is vulnerable
to the CRIME attack due to its support for TLS compression [34].
All appliances are patched against the FREAK and Logjam attacks,
and use a secure renegotiation.
5.2 Certificate Validation Results
In this section, we discuss the vulnerabilities found in the certificate
validation mechanism of the tested TLS proxies; for summary, see
Tables 3, 4 and 5.
WebTitan and UserGate do not perform any certificate validation;
their TLS proxies allowed all the faulty TLS certificates. This can
cause a trivial MITM attack; attackers can simply use a self-signed
certificate for any desired domain, fooling even the most secure and
up-to-date browsers behind WebTitan and UserGate. In addition,
UserGate caches certificates and does not reconsider changes in
the server-side certificate. Both appliances however block access
to the web pages that utilize RSA-512 server certificates, possibly
triggered by the TLS libraries utilized by the TLS proxies, and not
the TLS interception certificate validation code (as apparent from
the error messages we observed). Therefore, we omit WebTitan
Gateway and UserGate from the remaining discussion here.
All six appliances accept certificate chains with intermediates
that have a bad name constraint. Untangled forwards the wrong CN
Analyzing TLS Interception in Network Appliances
ASIA CCS ’18, June 4–8, 2018, Incheon, Republic of Korea
Table 3: Results for certificate validation, part I. ✓ means a faulty certificate is accepted and converted to a valid certificate by
the TLS proxy; ➙ means a faulty certificate is passed to the client as-is but not blocked; and blank means certificate blocked.
Self
Signed
Signature
Mismatch
Fake
Geo-
Trust
Wrong
CN
Unkn-
own
Issuer
Non-CA
Interm-
ediate
X509v1
Interm-
ediate
Invalid
pathLen-
Constraint
Untangle
pfSense
WebTitan Gateway
Microsoft TMG
UserGate Web Filter
Cisco Ironport WSA
✓
✓
✓
✓
✓
✓
➙
➙
➙
✓
✓
✓
✓
✓
✓
✓
✓
Bad
Name
Constraint
Intermediate
Unknown
Critical
X509v3
Extension
Malformed
Extension
Values
✓
✓
✓
✓
✓
✓
✓
✓
✓
➙
➙
✓
➙
➙
Table 4: Results for certificate validation, part II. For legend, see Table 3; N/A means not tested as the appliance disallows
adding the corresponding faulty CA certificate to its trusted store.
Revoked Expired
Leaf
Expired
Interm-
ediate
Expired
Root
Not Yet
Valid
Leaf
Not Yet
Valid
Interm-
ediate
Not Yet
Valid
Root
Leaf
keyUsage
w/out Key
Enciph-
erment
Leaf
extKey-
Usage w/
clientAuth
Root
extKey-
Usage
w/ Code
Signing
keyUsage
w/out
KeyCert-
Root
Sign
✓
Untangle
pfSense
WebTitan Gateway
Microsoft TMG
UserGate Web Filter
Cisco Ironport WSA
✓
✓
✓
✓
➙
✓
➙
✓
✓
✓
✓