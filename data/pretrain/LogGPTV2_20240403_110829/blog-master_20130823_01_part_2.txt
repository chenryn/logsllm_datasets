 numerictypmodin   
-----------------  
          655366  
(1 row)  
digoal=# select * from pg_attribute where attrelid ='t1'::regclass and attname='id';  
-[ RECORD 1 ]-+-------  
attrelid      | 16481  
attname       | id  
atttypid      | 1700  
attstattarget | -1  
attlen        | -1  
attnum        | 1  
attndims      | 0  
attcacheoff   | -1  
atttypmod     | 655367  
attbyval      | f  
attstorage    | m  
attalign      | i  
attnotnull    | f  
atthasdef     | f  
attisdropped  | f  
attislocal    | t  
attinhcount   | 0  
attcollation  | 0  
attacl        |   
attoptions    |   
attfdwoptions |   
```  
调整catalog后, 精度修改了.  
```  
digoal=# update pg_attribute set atttypmod=655366 where attrelid ='t1'::regclass and attname='id';  
UPDATE 1  
digoal=# select * from t1;  
-[ RECORD 1 ]  
id | 123.556  
digoal=# \d t1  
         Table "public.t1"  
 Column |     Type      | Modifiers   
--------+---------------+-----------  
 id     | numeric(10,2) |   
```  
因为是通过修改catalog达到调整精度的目的, 所以原值不变, 从numeric的物理存储结构来看已经包含了typmod的存储, 见本文末尾, 所以原始值输出的时候numeric_in, 得到的值是123.556, 而不是123.56.  
```  
digoal=# insert into t1 values (123.5555);  
INSERT 0 1  
digoal=# select * from t1;  
-[ RECORD 1 ]  
id | 123.556  
-[ RECORD 2 ]  
id | 123.56  
```  
对于扩长度是很有效的, 不会破坏逻辑规则(如上面缩小精度带来的输出原始值123.556的问题), 同时规避了rewrite table的问题.  
```  
digoal=# select numerictypmodin(_cstring '{10,4}');  
-[ RECORD 1 ]---+-------  
numerictypmodin | 655368  
digoal=# update pg_attribute set atttypmod=655368 where attrelid ='t1'::regclass and attname='id';  
UPDATE 1  
digoal=# \d t1  
         Table "public.t1"  
 Column |     Type      | Modifiers   
--------+---------------+-----------  
 id     | numeric(10,4) |   
digoal=# select * from t1;  
-[ RECORD 1 ]  
id | 123.556  
-[ RECORD 2 ]  
id | 123.56  
digoal=# insert into t1 values (123.55555);  
INSERT 0 1  
digoal=# select * from t1;  
-[ RECORD 1 ]  
id | 123.556  
-[ RECORD 2 ]  
id | 123.56  
-[ RECORD 3 ]  
id | 123.5556  
```  
## 小结  
1\. 在精度调整方面, PostgreSQL目前还是需要改进的, 因为扩展精度不会造成数据变更. 所以可以不rewrite table.   
当然如果对PG熟悉的话, 可以通过调整catalog定义来绕过rewrite table, 对普通用户不太实用.   
2\. oracle不允许表有数据的情况下降低精度, 原因是降低精度会带来数据的变更,   
例如 :   
```  
digoal=# select numeric_in('100.1550',1700,655366);  
 numeric_in   
------------  
     100.16  
(1 row)  
```  
显然数据已经不一样了.  
但是PostgreSQL允许你降低精度,并且没有提示, 这个确实有待改进,  
```  
digoal=# create table t1 (id numeric(10,5));  
CREATE TABLE  
digoal=# insert  into t1 values (123.5555);  
INSERT 0 1  
digoal=# select * from t1;  
    id       
-----------  
 123.55550  
(1 row)  
digoal=# alter table t1 alter column id type numeric(10,3);  
ALTER TABLE  
digoal=# select * from t1;  
   id      
---------  
 123.556  
(1 row)  
```  
修改精度后, 数据实际上变更了.  
3\. 另一方面, oracle扩展精度时, 底层存储的数据并未修改, 在输出时输出也未包含末尾的0, 也就是说oracle没有严格按照字段定义的有效位数来输出. 这也要批评一下oracle耍流氓了.   
## 参考  
1\. http://blog.163.com/digoal@126/blog/static/163877040201371763839672/  
2\. src/backend/utils/adt/numeric.c  
物理存储.  
```  
struct NumericShort  
{  
        uint16          n_header;               /* Sign + display scale + weight */  
        NumericDigit n_data[1];         /* Digits */  
};  
struct NumericLong  
{  
        uint16          n_sign_dscale;  /* Sign + display scale */  
        int16           n_weight;               /* Weight of 1st digit  */  
        NumericDigit n_data[1];         /* Digits */  
};  
union NumericChoice  
{  
        uint16          n_header;               /* Header word */  
        struct NumericLong n_long;      /* Long form (4-byte header) */  
        struct NumericShort n_short;    /* Short form (2-byte header) */  
};  
struct NumericData  
{  
        int32           vl_len_;                /* varlena header (do not touch directly!) */  
        union NumericChoice choice; /* choice of format */  
};  
```  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")