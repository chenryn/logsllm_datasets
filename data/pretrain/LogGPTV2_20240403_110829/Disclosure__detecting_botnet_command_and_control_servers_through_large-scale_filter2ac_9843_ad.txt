### 3. (Optional) Applying and Tuning the False Positive Reduction Module Using RepThresh

To reduce the number of false positives in large networks, Disclosure can be integrated with other detection or verification techniques. In this paper, we propose the use of an Autonomous System (AS) reputation-based score to filter out servers hosted in benign networks. The weights for the constituent reputation systems can be adjusted to achieve a more aggressive or a more lightweight filtering contribution. The overall reputation score filtering strength can be fine-tuned by setting the RepThresh parameter.

### 5.7 Evasion Resilience

The detection approach presented in this paper is based on the assumption that existing botnets often exhibit a regular, detectable pattern in their communication with the Command and Control (C&C) server. However, we have not yet discussed the robustness of this requirement and the potential for attackers to evade detection by disrupting this regularity.

To address this, we designed two botnet families (hereinafter B1 and B2) that attempt to evade our system by introducing random delays between consecutive connections and random padding in each flow. We implemented two different randomization functions: 

1. **Uniform Distribution**: This function generates uniformly distributed values within a fixed range, simulating a botnet where the programmer uses a random number generator to select values from a fixed range.
2. **Poisson Distribution**: This function generates random numbers from a Poisson distribution, modeling a more sophisticated scenario where the botmaster tries to mimic the inter-arrival times of benign services, which are known to follow a Poisson process [22].

In our experiment, we generated 300 C&C servers for both B1 and B2. We randomly specified the size of each botnet and the duration of its activity, then created synthetic NetFlow data for each server using one of the randomization functions to generate random flow sizes and intervals between consecutive flows. The parameters for each botnet were as follows:

- **Botnet Lifetime**: 1 to 33 days
- **Number of Bots**: 1,000 to 100,000
- **Flow Sizes**: 4 to 3,076 bytes
- **Delay Between Flows**: 1 minute to 1 hour

The key difference between the two botnet families was the delay distribution:
- **B1**: Uniformly-distributed random value between 1 minute and 1 hour.
- **B2**: Drawn from a Poisson distribution with a mean randomly chosen between 1 minute and 1 hour.

We set the upper bound at 1 hour to ensure the botmaster can maintain reasonable control over the botnet, as commands must be sent with a delay no longer than an hour or two.

Finally, we added the synthetically-generated NetFlows to our labeled dataset and re-ran the classification evaluation using 10-fold cross-validation. In both cases, Disclosure successfully detected all the experimental C&C servers belonging to B1 and B2. Additionally, adding these synthetic botnets to the training set increased the overall detection rate, indicating that some real botnets that were not detected in our normal experiments were now identified. This suggests that our initial detection models were not fully trained to handle such variability in C&C channel behavior. By supplementing the training set with many new samples exhibiting randomized behavior, Disclosure was able to detect real botnets with similar access patterns.

### 6. RELATED WORK

In recent years, significant research has been conducted to investigate botnet topologies, understand their operations, and develop novel detection methods. This section reviews the state-of-the-art in network-based botnet detection and previous work on NetFlow-based anomaly detection.

#### 6.1 Network-based Botnet Detection

Botnet-related research can be categorized into two main areas: measuring botnets [11, 15, 20, 27] and detecting them [6, 16–19, 21, 29, 32].

- **Horizontal Correlation**: Initial detection proposals relied on protocol-specific knowledge about the C&C channel [19, 21], but subsequent techniques overcame this limitation [17, 29]. The main drawback of horizontal correlation is the need to observe multiple bots from the same botnet to identify behavioral similarities. As botnets decrease in size [11], it becomes more challenging to protect small networks, and botmasters can deliberately split infected machines into different botnets.

- **Vertical Correlation**: This line of research aims to detect individual bot-infected machines. Some systems focus on specific protocols like IRC [6, 16, 32], while others provide generic solutions. For example, BotHunter [18] correlates the output of three IDS sensors and a scan detection engine to identify different phases in the lifecycle of bots. Wurzinger et al. [35] automatically generate detection models to identify single bot-infected machines without prior knowledge of the C&C protocol. However, this approach can only detect known instances of botnets.

#### 6.2 Anomaly Detection Through NetFlow Analysis

There has been extensive research on anomaly detection using NetFlow analysis. Some works focus on specific types of malware, such as worms [34] or spamming botnets [28], while others propose more general approaches to distinguish malicious traffic from benign traffic [8, 13, 30].

- **Entropy-Based Approach**: Wagner et al. [34] present an entropy-based method to identify fast worms in real-time network traffic.
- **Gamma Laws**: Dewaele et al. [13] extract sub-traces from randomly chosen traffic traces, model them using Gamma laws, and identify anomalous traces by tuning the deviations in the model parameters.
- **Histogram-Based Anomaly Detector**: Brauckhoff et al. [8] combine various information extracted from multiple histogram-based anomaly detectors to identify anomalous flows.
- **Time Series Analysis**: Sperotto et al. [30] analyze time series constructed from flow and packet sizes to detect general intrusions.

Another area of research focuses on the impact of sampling methods on NetFlow traffic. Mai et al. [25] and another study [9] analyzed the effects of packet sampling on anomaly detection metrics, concluding that entropy-based anomaly detection systems are more resilient to packet sampling because the sampling preserves the distributional structure.

#### 6.3 Botnet Detection with NetFlow Analysis

Only a few papers propose using NetFlow analysis specifically for botnet detection. Livadas et al. [24] use machine learning-based classification methods to identify C&C traffic of IRC-based botnets. Francois et al. [14] use the PageRank algorithm to detect peer-to-peer botnets, creating synthetic bot traces to simulate NetFlow behavior. Both studies successfully identified specific types of botnet traffic, but Disclosure can detect C&C servers without prior knowledge of the C&C protocol and can perform real-time detection on large datasets.

### 7. CONCLUSIONS

Botnets remain a significant threat on the Internet, and much research has focused on their detection and mitigation. While the ideal data source for large-scale botnet detection does not currently exist, NetFlow data [10] is widely available. Although attractive due to its ubiquity, NetFlow data presents several challenges for accurate botnet detection, such as the absence of packet payloads and potential sampling.

In this paper, we introduce Disclosure, a large-scale, wide-area botnet detection system that combines novel techniques to overcome the challenges posed by NetFlow data. We identify several groups of features that allow Disclosure to reliably distinguish C&C channels from benign traffic using NetFlow records: (i) flow sizes, (ii) client access patterns, and (iii) temporal behavior. Our experiments demonstrate that these features are effective in detecting current C&C channels and are relatively robust against expected countermeasures future botnets might deploy. Furthermore, our technique is independent of the specific structure of known botnet C&C protocols.

We provide an extensive evaluation of Disclosure over two real-world networks: a university network spanning a small country with no NetFlow sampling and a Tier 1 ISP where NetFlow data was sampled at a rate of one in ten thousand flows. Our evaluation shows that Disclosure can perform real-time detection of botnet C&C channels over datasets on the order of billions of flows per day.

### 8. ACKNOWLEDGEMENTS

This research was funded by the European Union Seventh Framework Programme (FP7/2007-2013) under grant agreement no. 257007, the National Science Foundation (NSF) under grant CNS-1116777, and Secure Business Austria. Engin Kirda also thanks Sy and Laurie Sternberg for their generous support.

### 9. REFERENCES

[1] Alexa Web Information Company. http://www.alexa.com/topsites/, 2009.
[2] EXPOSURE: Exposing Malicious Domains. http://exposure.iseclab.org/, 2011.
[3] FIRE: FInding RoguE Networks. http://www.maliciousnetworks.org/, 2011.
[4] Google Safe Browsing. http://www.google.com/safebrowsing/diagnostic?site=AS:as_number, 2011.
[5] L. Bilge, E. Kirda, C. Kruegel, and M. Balduzzi. Exposure: Finding malicious domains using passive DNS analysis. In 18th Annual Network and Distributed System Security Symposium (NDSS’11), 2011.
[6] J. Binkley and S. Singh. An Algorithm for Anomaly-based Botnet Detection. In Usenix Steps to Reduce Unwanted Traffic on the Internet (SRUTI), 2006.
[7] G. E. P. Box, G. M. Jenkins, and G. Reinsel. Time Series Analysis: Forecasting and Control. 3rd ed. Upper Saddle River, NJ: Prentice Hall, 1994.
[8] D. Brauckhoff, X. Dimitropoulos, A. Wagner, and K. Salamatian. Anomaly extraction in backbone networks using association rules. In ACM Internet Measurement Conference (IMC’09), 2009.
[9] D. Brauckhoff, B. Tellenbach, A. Wagner, M. May, and A. Lakhina. Impact of packet sampling on anomaly detection metrics. In Proceedings of the 6th ACM SIGCOMM conference on Internet measurement, IMC ’06, 2006.
[10] B. Claise. Cisco Systems NetFlow Services Export Version 9, 2004.
[11] E. Cooke, F. Jahanian, and D. McPherson. The Zombie Roundup: Understanding, Detecting, and Disrupting Botnets. In 1st Workshop on Steps to Reducing Unwanted Traffic on the Internet, pages 39–44, 2005.
[12] N. Cristianini and J. Shawe-Taylor. An Introduction to Support Vector Machines and Other Kernel-Based Learning Methods. Cambridge University Press, 2000.
[13] G. Dewaele, K. Fukuda, P. Borgnat, P. Abry, and K. Cho. Extracting hidden anomalies using sketch and non-Gaussian multiresolution statistical detection procedures. In Proceedings of the 2007 workshop on Large scale attack defense (LSAD’07), 2007.
[14] J. Francois, S. Wang, R. State, and T. Engel. BotTrack: Tracking botnets using NetFlow and PageRank. In IFIP Networking 2011, 2011.
[15] F. Freiling, T. Holz, and G. Wicherski. Botnet Tracking: Exploring a Root-Cause Methodology to Prevent Distributed Denial-of-Service Attacks. In 10th European Symposium On Research In Computer Security, 2005.
[16] J. Goebel and T. Holz. Rishi: Identify bot-contaminated hosts by IRC nickname evaluation. In Workshop on Hot Topics in Understanding Botnets, 2007.
[17] G. Gu, R. Perdisci, J. Zhang, and W. Lee. BotMiner: Clustering Analysis of Network Traffic for Protocol- and Structure-Independent Botnet Detection. In Usenix Security Symposium, 2008.
[18] G. Gu, P. Porras, V. Yegneswaran, M. Fong, and W. Lee. BotHunter: Detecting Malware Infection Through IDS-Driven Dialog Correlation. In 16th Usenix Security Symposium, 2007.
[19] G. Gu, J. Zhang, and W. Lee. BotSniffer: Detecting Botnet Command and Control Channels in Network Traffic. In 15th Annual Network and Distributed System Security Symposium (NDSS), 2008.
[20] J. John, A. Moshchuk, S. Gribble, and A. Krishnamurthy. Studying Spamming Botnets Using Botlab. In 6th Usenix Symposium on Networked Systems Design and Implementation (NSDI), 2009.
[21] A. Karasaridis, B. Rexroad, and D. Hoeflin. Wide-Scale Botnet Detection and Characterization. In Usenix Workshop on Hot Topics in Understanding Botnets, 2007.
[22] D. E. Knuth. Seminumerical Algorithms. In The Art of Computer Programming, Volume 2, Addison Wesley, 1969.
[23] A. Liaw and M. Wiener. Classification and regression by randomForest. In R News, volume 2/3, page 18, 2002.
[24] C. Livadas, R. Walsh, D. Lapsley, and W. T. Strayer. Using machine learning techniques to identify botnet traffic. In the 2nd IEEE LCN Workshop on Network Security (WoNS’2006), 2006.
[25] J. Mai, C.-N. Chuah, A. Sridharan, T. Ye, and H. Zang. Is sampled data sufficient for anomaly detection? In Proceedings of the 6th ACM SIGCOMM conference on Internet measurement, IMC ’06, 2006.
[26] J. Quinlan. C4.5: Programs for Machine Learning. Morgan Kaufmann Publishers, 1993.
[27] M. A. Rajab, J. Zarfoss, F. Monrose, and A. Terzis. A Multi-faceted Approach to Understanding the Botnet Phenomenon. In Internet Measurement Conference (IMC), 2006.
[28] A. Ramachandran and N. Feamster. Understanding the network-level behavior of spammers. In SIGCOMM Comput. Commun., 2006.
[29] M. Reiter and T. Yen. Traffic Aggregation for Malware Detection. In DIMVA, 2008.
[30] A. Sperotto, R. Sadre, and A. Pras. Anomaly characterization in flow-based traffic time series. In Proceedings of the 8th IEEE international workshop on IP Operations and Management, IPOM ’08, pages 15–27, 2008.
[31] B. Stone-Gross, C. Kruegel, K. Almeroth, A. Moser, and E. Kirda. FIRE: Finding Rogue Networks. In 2009 Annual Computer Security Applications Conference (ACSAC’09), 2009.
[32] W. Strayer, R. Walsh, C. Livadas, and D. Lapsley. Detecting Botnets with Tight Command and Control. In 31st IEEE Conference on Local Computer Networks (LCN), 2006.
[33] S. Theodoridis and K. Koutroumbas. Pattern Recognition. Academic Press, 2009.
[34] A. Wagner and B. Plattner. Entropy-based worm and anomaly detection in fast IP networks. In SIG SIDAR Graduierten-Workshop über Reaktive Sicherheit (SPRING’06), 2006.
[35] P. Wurzinger, L. Bilge, T. Holz, J. Goebel, C. Kruegel, and E. Kirda. Automatically generating models for botnet detection. In ESORICS 2009 : 14th European Symposium on Research in Computer Security, 2009.