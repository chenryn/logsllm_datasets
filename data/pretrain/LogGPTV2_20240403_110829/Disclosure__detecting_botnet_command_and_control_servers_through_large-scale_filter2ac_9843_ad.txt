the C&C servers, but it will also generate too many FPs. On
the other end of the scale, the system will miss many C&C
servers, but the results will be much more precise.
3. (Optional) Apply and tune the FP reduction module using
RepThresh.
To reduce the number of alerts in large networks, Disclosure
can be coupled with other detection or verification techniques.
In this paper, we propose the use of an AS reputation-based
score to filter the servers hosted in benign networks. The
weights for the constituent reputation systems can be mod-
ified to have a more aggressive or a more lightweight filtering
contribution, and the overall reputation score filtering strength
can be adjusted by setting RepThresh.
5.7 Evasion Resilience
The detection approach presented in this paper is predicated
on the assumption that existing botnets often exhibit a regular,
detectable pattern in their communication with the C&C server.
However, we have not discussed how strong this requirement
is and how difficult it might be for an attacker to perturb this
regularity to avoid detection.
To answer this question, we designed two botnet families (here-
inafter B1 and B2) that attempt to evade our system by inserting
a random delay between consecutive connections and a random
136
length padding in each flow. In our implementation, we employed
two different randomization functions. The first randomization
function produces uniformly distributed values on a fixed range.
This is intended to model a botnet in which the programmer uses
a random number generator to select a value from a fixed range.
The second family adopts a more sophisticated approach and
generates random numbers from a Poisson distribution. In this
case, we model a more complex scenario in which the botmaster
tries to mimic the flow inter-arrival times of benign services, which
are known to be well-approximated as a Poisson process [22].
In our experiment, we generated 300 C&C servers for both
B1 and B2. First, we randomly specified the size of each botnet
and the duration of its activity. Afterward, we created synthetic
NetFlow data for each server, using one of the aforementioned ran-
domization functions to generate random flow sizes and intervals
between consecutive flows.
Each botnet was created according to the following parameters:
Botnet lifetime
Number of bots
Flow sizes
Delay between flows
1 - 33 days
1,000 - 100,000
4 - 3076 bytes
1 min - 1 hr
The only significant difference between the two botnet fami-
lies is that for B1, the delay between consecutive flows between
each bot and the the C&C server was a uniformly-distributed
random value between 1 minute and 1 hour. For B2, the delay
was, instead, drawn from a Poisson distribution whose mean was
randomly chosen in the 1 minute to 1 hour range. We decided
to set 1 hour as an upper bound since, in order to maintain a
reasonable flexibility and control over the botnet, a botmaster
must be able to to send commands to the infected machines with
a delay that is no longer than an hour or two.
Finally, we added the synthetically-generated NetFlows to our
labeled data set and re-ran the classification evaluation using a
10-fold cross-validation. In both cases, Disclosure was able to
detect all the experimental C&C servers belonging to B1 and
B2. In addition, the addition of these synthetic botnets to the
training set had the side effect of actually increasing the overall
detection rate. In other words, some of the real botnets that were
not detected by Disclosure in our normal experiments were
detected after we added the synthetic data. This implies that our
detection models were not properly trained to detect this kind
of variability in the C&C channel behavior. However, by adding
many new samples with a randomized behavior to supplement
the training set, Disclosure was able to subsequently detect real
botnets that present similar access patterns.
6. RELATED WORK
In the last couple of years, much work has been done to investi-
gate the topologies of botnets, understand how they operate, and
create novel approaches to detect them. In this section, we analyze
and discuss the state-of-the-art in network-based botnet detection,
as well as the previous work on NetFlow-based anomaly detection.
6.1 Network-based Botnet Detection
Botnet-related research can be divided to two groups: work
that focuses on the measuring botnets [11, 15, 20, 27] and work
that focuses on detecting them [6, 16â€“19, 21, 29, 32].
A number of botnet detection systems perform horizontal
correlation. While initial detection proposals relied on some
protocol-specific knowledge about the C&C channel [19, 21], sub-
sequent techniques overcame this shortcoming [17, 29]. The main
limitation of systems that perform horizontal correlation is that
they need to observe multiple bots of the same botnet to spot
behavioral similarities. This is significant because as botnets
decrease in size [11], it becomes more difficult to protect small
networks, and a botmaster can deliberately split infected machines
within the same network range into different botnets.
A second line of research explored vertical correlation to be able
detect individual bot-infected machines. A number of systems
focus on specific protocols such as IRC [6, 16, 32]. More advanced
systems in this category provide generic solutions. For example,
BotHunter [18] correlates the output of three IDS sensors and
a scan detection engine to identify different phases in the lifecyle
of bots. Wurzinger et al. [35] automatically generates detection
models to identify single bot infected machines without any a
priori knowledge on the C&C protocol. The problem with the
approach, however, is that the system is only able to detect known
instances of botnets.
6.2 Anomaly Detection Through NetFlow Anal-
ysis
To date, there has been a considerable amount of research on
anomaly detection using NetFlow analysis. While some of the
works proposed anomaly detection methods to detect specific
kinds of malware such as worms [34] or spamming botnets [28],
others tried to propose more general approaches to distinguish
malicious traffic from benign traffic [8, 13, 30].
Wagner et al. [34] present an entropy-based approach to iden-
tify fast worms in real-time network traffic. Dewaele et al. [13]
extract sub-traces from randomly chosen traffic traces, model
them using Gamma laws, and identify the anomalous traces by
tuning the deviations in the parameters of the models. Brauck-
hoff et al. [8] present a histogram-based anomaly detector that
identifies anomalous flows by combining various information
extracted from multiple histogram-based anomaly detectors. Sper-
otto et al. [30] analyzed the time series constructed from both
flow and packet sizes, and tested them to find whether they were
sufficient for detecting general intrusions.
Another line of research focuses on the analysis of the impact
of sampling methods applied on NetFlow traffic. Mai et al. [25]
analyze a set of sampling techniques experimented with two classes
of anomalies. The results show that all types of sampling tech-
niques introduce a significant bias on anomaly detection. Another
work [9] as well studied the impact of packet sampling on anomaly
detection metrics. Their analysis concludes that entropy-based
anomaly detection systems are more resilient to packet sampling
because the sampling still preserves the distributional structure.
6.3 Botnet Detection with NetFlow Analysis
Only a few papers exist that propose to use NetFlow analysis
to specifically detect botnets. For example, Livadas et al. [24]
propose a system that identifies the C&C traffic of IRC-based
botnets by using machine learning-based classification methods.
Francois et al. [14] present instead a NetFlow-based method
that uses the PageRank algorithm to detect peer-to-peer botnets.
In their experiments, the authors created synthetic bot traces
that simulate the NetFlow behavior of three P2P botnet families.
Both works succeeded in the identification of a specific type of
botnet traffic, IRC in the first case and peer-to-peer in the second.
Disclosure, on the other hand, can successfully detect C&C
servers without any prior knowledge about the internals of the
C&C protocol. Moreover, our experiments shows how Disclo-
sure can be used to perform real-time detection on large datasets.
7. CONCLUSIONS
Botnets continue to be a significant problem on the Internet.
Accordingly, a great deal of research has focused on methods for
detecting and mitigating the effects of botnets. While the ideal
data source for large-scale botnet detection does not currently exist,
there is, however, an alternative data source that is widely available
today: NetFlow data [10]. Though it is attractive due to its
ubiquity, NetFlow data imposes several challenges for performing
accurate botnet detection. In particular, packet payloads are not
included, and the collected data might be sampled.
In this paper, we present Disclosure, a large-scale, wide-area
botnet detection system that incorporates a combination of novel
techniques to overcome the challenges imposed by the use of
NetFlow data. In particular, we identify several groups of features
137
that allow Disclosure to reliably distinguish C&C channels from
benign traffic using NetFlow records: (i) flow sizes, (ii) client
access patterns, and (iii) temporal behavior. Our experiments
demonstrate that these features are not only effective in detecting
current C&C channels, but that these features are relatively robust
against expected countermeasures future botnets might deploy
against our system. Furthermore, our technique is oblivious to
the specific structure of known botnet C&C protocols.
We provide an extensive evaluation of Disclosure over two
real-world networks: a university network spanning a small coun-
try where no NetFlow sampling occurred, and a Tier 1 ISP where
NetFlow data was sampled at a rate of one out of every ten
thousand flows. Our evaluation demonstrates that Disclosure
is able to perform real-time detection of botnet C&C channels
over data sets on the order of billions of flows per day.
8. ACKNOWLEDGEMENTS
The research leading to these results has received funding from
the European Union Seventh Framework Programme (FP7/2007-
2013) under grant agreement no 257007, the National Science
Foundation (NSF) under grant CNS-1116777, and Secure Business
Austria. Engin Kirda also thanks Sy and Laurie Sternberg for
their generous support.
9. REFERENCES
[1] Alexa Web Information Company.
http://www.alexa.com/topsites/, 2009.
[2] EXPOSURE: Exposing Malicious Domains.
http://exposure.iseclab.org/, 2011.
[3] FIRE: FInding RoguE Networks.
http://www.maliciousnetworks.org/, 2011.
[4] Google Safe Browsing. http://www.google.com/
safebrowsing/diagnostic?site=AS:as_number, 2011.
[5] L. Bilge, E. Kirda, C. Kruegel,
and M. Balduzzi. Exposure: Finding malicious domains
using passive dns analysis. In 18th Annual Network and
Distributed System Security Symposium (NDSSâ€™11), 2011.
[6] J. Binkley and S. Singh. An Algorithm
for Anomaly-based Botnet Detection. In Usenix Steps
to Reduce Unwanted Traffic on the Internet (SRUTI), 2006.
[7] G. E. P. Box, G. M. Jenkins, and G. Reinsel.
Time Series Analysis: Forecasting and Control. In 3rd
eddition Upper Saddle River, NJ: PrenticeË†a Ë˜AÂ¸SHall, 1994.
[8] D. Brauckhoff,
X. Dimitropoulos, A. Wagner, and K.Salamatian. Anomaly
extraction in backbone networks using association rules.
In ACM Internet Measurement Conference (IMCâ€™09), 2009.
[9] D. Brauckhoff, B. Tellenbach, A. Wagner, M. May, and
A. Lakhina. Impact of packet sampling on anomaly detection
metrics. In Proceedings of the 6th ACM SIGCOMM
conference on Internet measurement, IMC â€™06, 2006.
[10] B. Claise.
Cisco systems netflow services export version 9, 2004.
[11] E. Cooke, F. Jahanian, and D. McPherson.
The Zombie Roundup: Understanding, Detecting, and
Disrupting Botnets. In 1st Workshop on Steps to Reducing
Unwanted Traffic on the Internet, pages 39â€“44, 2005.
[12] N. Cristianini and J. Shawe-Taylor. An introduction
to support vector machines and other kernel-based
learning methods. In Cambridge University Press, 2000.
[13] G. Dewaele, K. Fukuda,
P. Borgnat, P. Abry, and K. Cho. Extracting hidden
anomalies using sketch and non gaussian multiresolution
statistical detection procedures. In Proceedings of the 2007
workshop on Large scale attack defense (LSADâ€™07), 2007.
[14] J. Francois, S. Wang,
R. State, and T. Engel. Bottrack: Tracking botnets
using netflow and pagerank. In IFIP Networking 2011, 2011.
[15] F. Freiling, T. Holz, and G. Wicherski. Botnet
Tracking: Exploring a Root-Cause Methodology to Prevent
Distributed Denial-of-Service Attacks. In 10th European
Symposium On Research In Computer Security, 2005.
[16] J. Goebel and T. Holz. Rishi: Identify
bot contaminated hosts by IRC nickname evaluation. In
Workshop on Hot Topics in Understanding Botnets, 2007.
[17] G. Gu, R. Perdisci,
J. Zhang, and W. Lee. BotMiner: Clustering Analysis
of Network Traffic for Protocol- and Structure-Independent
Botnet Detection. In Usenix Security Symposium, 2008.
[18] G. Gu, P. Porras,
V. Yegneswaran, M. Fong, and W. Lee. BotHunter:
Detecting Malware Infection Through IDS-Driven Dialog
Correlation. In 16th Usenix Security Symposium, 2007.
[19] G. Gu, J. Zhang, and W. Lee.
BotSniffer: Detecting Botnet Command and Control
Channels in Network Traffic. In 15th Annual Network
and Distributed System Security Symposium (NDSS), 2008.
[20] J. John, A. Moshchuk, S. Gribble,
and A. Krishnamurthy. Studying Spamming Botnets
Using Botlab. In 6th Usenix Symposium on Networked
Systems Design and Implementation (NSDI), 2009.
[21] A. Karasaridis, B. Rexroad, and D. Hoeflin. Wide-scale
Botnet Detection and Characterization. In Usenix
Workshop on Hot Topics in Understanding Botnets, 2007.
[22] D. E. Knuth. Seminumerical algorithms. In The Art of
Computer Programming, Volume 2, Addison Wesley, 1969.
[23] A. Liaw and M. Wiener. Classification and regression
by randomforest. In R News, volume 2/3, page 18, 2002.
[24] C. Livadas, R. Walsh,
D. Lapsley, and W. T. Strayer. Using machine learning
techniques to identify botnet traffic. In the 2nd IEEE
LCN Workshop on Network Security (WoNSâ€™2006), 2006.
[25] J. Mai, C.-N. Chuah, A. Sridharan,
T. Ye, and H. Zang. Is sampled data sufficient for anomaly
detection? In Proceedings of the 6th ACM SIGCOMM
conference on Internet measurement, IMC â€™06, 2006.
[26] J. Quinlan. C4.5: Programs for
machine learning. In Morgan Kaufmann Publishers, 1993.
[27] M. A. Rajab, J. Zarfoss, F. Monrose, and A. Terzis. A Multi-
faceted Approach to Understanding the Botnet Phenomenon.
In Internet Measurement Conference (IMC), 2006.
[28] A. Ramachandran
and N. Feamster. Understanding the network-level behavior
of spammers. In SIGCOMM Comput. Commun., 2006.
[29] M. Reiter and T. Yen.
Traffic aggregation for malware detection. In DIMVA, 2008.
[30] A. Sperotto, R. Sadre, and A. Pras.
Anomaly characterization in flow-based traffic time series. In
Proceedings of the 8th IEEE international workshop on IP
Operations and Management, IPOM â€™08, pages 15â€“27, 2008.
[31] B. Stone-Gross, C. Kruegel, K. Almeroth, A. Moser, and
E. Kirda. Fire: Finding rogue networks. In 2009 Annual Com-
puter Security Applications Conference (ACSACâ€™09), 2009.
[32] W. Strayer, R. Walsh, C. Livadas, and D. Lapsley. Detecting
Botnets with Tight Command and Control. In 31st IEEE
Conference on Local Computer Networks (LCN), 2006.
[33] S. Theodoridis and K. Koutroumbas.
Pattern Recognition. Academic Press, 2009.
[34] A. Wagner and
B. Plattner. Entropy based worm and anomaly detection
in fast ip networks. In SIG SIDAR Graduierten-Workshop
uber Reaktive Sicherheit (SPRINGâ€™06), 2006.
[35] P. Wurzinger, L. Bilge, T. Holz, J. Goebel,
C. Kruegel, and E. Kirda. Automatically generating models
for botnet detection. In ESORICS 2009 : 14th European
Symposium on Research in Computer Security, 2009.
138