instantaneous.
Session 2: Authentication ASIA CCS '20, October 5–9, 2020, Taipei, Taiwan91Communications inside Π
real have durations, measured in units
of time (e.g., seconds or fractions thereof). All messages travel at
the same speed, irrespective of their length. Next, we further define
these durations.
4.2.2 Communication Within Couplings. Within couplings
that involve T (i.e., [C, PC,T ] and [R, PC,T ]), we assume that com-
munication happens at a constant speed. Synonymously, we con-
sider that to exchange a message inside a T coupling takes a time-
bound ∆: i.e., to send/receive something between (PC,T ) and C,
or to send/receive something between (PC,T ) and R takes exactly
∆ units of time.
With respect to couplings that involve W (i.e., [R,W ] and [C,W ]
and [X ,W ]), we are not interested in communication times. How-
ever, we assume that these take at most a given, finite amount of
time; notably, in a [R,W ] and [C,W ] and [X ,W ] session, if this
given amount of time elapses and the last response to W is not
received, then OutW is set to 0.
4.2.3 Communication Across Couplings. This means commu-
nications between card parties, reader parties, the X machine(s), as
well as between these and adversarial parties. In fact, we will not
be interested in the communication times with the X machine(s).
To this end, we consider that card, reader and adversary parties
are positioned in a Euclidean space. The X machine is not part of
this positioning.
We say that two (card, reader or adversary) parties Y1 and Y2 are
close if the Euclidean distance d (Y1, Y2) between them is at most
B: i.e., d (Y1, Y2) ≤ B. Otherwise, the two parties are said to be far
apart.
All messages exchanged between (card, reader or adversary) par-
ties are broadcast over insecure channels and travel at a constant
speed. In particular, there exists a time-bound tB such that a mes-
sage from a party Y1 reaches a party Y2 (across couplings) within
the time t B if and only if party Y1 is close to party Y2.
There also exists another timing-out time-bound in which if PC
inside [PC,T ] does not receive a response to a challenge, then it
terminates unsuccessfully, i.e., Out[PC,T ]=1.
The communication with machine X is done via unicast messages
and on secure channels. To partially re-iterate, we are not interested
in the physics of the channel (e.g., communication speed/time) or
durations of computation7 .
4.3 Threat Model.
Adversarial Capabilities – Informal. We now present the ca-
pabilities of our adversary, informally. This informal presentation
helps with the presentation in the rest of the section, whereby
finally we also conclude with a formalisation of the adversary.
Let Π be a v-DB protocol.
(1). The adversary has a number of instances, at most polynomial
in the security parameter, all located in the Euclidean space consid-
ered. Each instance (or adversarial device) implements an arbitrary
ppt. algorithm.
(2). A can interfere with the setup of Π into Πr eal . In this case, the
7By this we mean that we will not look at how long a message computation takes inside
the machine X . However, we do not mean that we allow X to be in any complexity
class; in fact, from a complexity viewpoint, the X machine runs a ppt. algorithm
adversary can corrupt the C and/or R and/or PC parts of the devices,
but it cannot corrupt the T , W and X algorithms. The adversary
cannot change the coupling created by the setup. For the corrupted
parts, A can read all their material (i.e., a white-box access), but the
adversary cannot modify it. Also, if a part of the coupling/device is
corrupt, then then the other part does not become corrupt, yet all
communications between the two parts are compromised.
(3). As usual, corruption is immutable: once corrupted, all sessions
of that device are visible and can be manipulated to the attacker; we
will be more specific w.r.t. coupling, in the formal parts to follow.
(4). A interacts with non-adversary parties by sending them mes-
sages: opening sessions with them, interfering in sessions that these
parties had already started. These parties reply honestly as per Π.
(5). A can move card-parties from one location in the metric space
to another. Any such move takes as much time as a message would
take to travel between the two points in the Euclidean space.
(6). Adversarial instances operate as ITMs: they collaborate and
communicate.
(7). The messages between adversarial devices and corrupted de-
vices are subject to the same intra/inter-coupling communication
laws as per the above in Subsection 4.2. Notably, the adversary
cannot change the speed of communication of messages (i.e., make
them go faster).
(8). The adversary cannot modify the global clock, except for with
a negligible amount.
(9). A can send unicast messages, which can only be read by their
intended target, e.д., using directional antennas.
(10). A can block any message from being received by a party of
his choice, irrespective of their position.
(11). A can modify messages on the fly, i.e., read and flip bits with-
out introducing a delay to the communication.
(12). Messages sent by A have priority, i.e., if a bit b sent by A
arrives to an honest party B at the same time as another bit b′
sent by an honest party C, then B ignores the bit b′ sent by C in
preference of the bit b sent by A.
Remarks on Our Adversarial Model. Note that our adversary
is generally much aligned with “standard” distance-bounding (DB)
adversary [14]. The new aspects compared to this model are as
follows:
• the adversary can move parties (see point (5) above).
• the adversary can do fined grained corruption by only con-
trolling part of a device (see control of couplings in point
(2) above); this is a mix between whitebox and blackbox
corruption in distance-bounding (DB) [4], and allows for the
definition of new DB security properties, as we will see in
Section 4.4.
Let us discuss the main restrictions of this adversary. Firstly,
the adversary cannot change the coupling created by the setup of
Πr eal (see point (2) above), and that even if he corrupts one part
of a coupling (say PC inside [PC,T ]), then he cannot change the
communication laws within the coupling (see point (7) above). In
practice, this implies that the attacker cannot overclock the host of
the trusted device T , i.e., the reading/writing speed of the interface
to/from T stays as prescribed by the specifier of T . Secondly, as per
point (8) above, the adversary cannot control the global clock; this
Session 2: Authentication ASIA CCS '20, October 5–9, 2020, Taipei, Taiwan92is in line with “standard” distance-bounding (DB) models [14], but it
also captures the fact that there is root of trust in the presence of T ;
implicitly, we consider that T provides this trusted, tamper-resistant
clock8.
Challenger. To simulate the honest executions of a v-DB system
Πr eal as well as its interactions with the adversary we introduce,
as usual, a challenger.
(1). The challenger Ch is aware of the global clock.
(2). The challenger Ch keeps a list P of all parties in the system,
indexed by their id. Each entry in P also contains their corruption
status (corrupt/honest), and –for card and reader parties– the entry
also contains their location9. If parties/devices are coupled (as in
[C, PC,T ]), then –in the list– they appear with the entire coupling.
This is because it is the challenger Ch who ran the setup in Πr eal .
Also, Ch deals with all adversarial actions via a set of oracles pre-
sented later; as such, challenger Ch knows if a given party has been
corrupted by A and his list P is kept up-to-date accordingly.
(3). The challenger Ch keeps track of every session, opened by
every party in a list called Sess. This list is index by the unique
session identifier, and it registers the time the session started, if it
is a card session, a reader session, etc., as well as the up-to-date
status of a session: i.e., finished or running, and a transcript of the
session.
(4). The challenger Ch keeps a list Sends of timed, sent messages.
This contains: the id of the session (of the sender party) to which
this is message belongs to, the sender party, the aimed receiver party
(which is optional), the message, and the time of send. Recall that
most messages are sent in broadcast mode, and only the adversary
can send messages in unicast mode; so, the latter is the only case
in which is there is an aimed receiver.
(5). The challenger Ch keeps a list Reads of read messages at given
times. This contains: the id of the session (of the reading party)
in which this message is being read, the (apparent) sender party,
the (real) sender party, the receiver party, the message, the time
of the receipt. We will formalise this later. However, we men-
tion the following two important time-keeping aspects here.
Firstly, if the “read” is from/to a sender and receiver across dif-
ferent couplings, then an entry in this list is possible only if the
message appears in the sent-messages list Sends and if the mes-
sage had the time to travel from the sender to the receiver. I.e.,
d (sender , receiver ) ≤ (tsent − current_time) × c, where the chal-
lenger Ch finds the locations of sender, receiver in the P list , the
time tsent in the Sends list, the current_time by using the global
clock, and c is the speed of messages. If this inequality holds, then
the time of receipt inside Reads is recorded as the current_time.
Second, if the “read” is from/to a sender and receiver inside the
same coupling, then an entry in this list is possible only if the mes-
sage appears in the sent-messages list Sends and the fixed amount
of time passed since the message was sent. I.e., the challenger Ch
finds the locations of sender and receiver in the P list , the time
8This is in line with the specification for Trusted Platform Modules (TPMs) by their
standardisation body – TCG (Trusted Computing Group).
9We can also trade space-complexity for time efficiency and also keep dedicated lists
of corrupted parties, dedicated lists for locations, etc. This type of trade-off can be
considered on all Ch’s lists; when implementing a mechanisation of this model in
a cryptographic prover, such multiple lists with redundancy are beneficial for faster
proofs.
tsent in the Sends list, the current_time by using the global clock,
and current_time − tsent = δ .
The points above show that the challenger Ch is an arbiter for
the setup of the system, honest and corrupt behaviours, and the
communication rules in our model. Specifically, w.r.t. point (5)
above, the challenger Ch uses his “communication log” kept in the
lists P, Sess, Sends and Reads, so that he does not allow the commu-
nication rules expressed in our model to be broken: communication
across couplings is proportional to distance, and communication
inside couplings takes a fixed amount of time.
Oracle-based Security Model. As we will see now, the adver-
sary and the challenger’s aforementioned behaviours are formalised
(as per the usual) through an interaction modelled via oracles. In
this sense, the adversary will call oracles to the challenger in order
to simulate real executions between honest and corrupted parties.
Note that some parties can be corrupted (see oracle corrupt (. . .)
The set of oracles below is denoted as v-DB-Orcls.
• init([C,R, T , PC,W,X, A])
This oracle allows the adversary to initiate a session be-
tween a meaningful subset of the parties listed as potential
inputs. The challenger Ch checks the format of the call, and
only meaningful calls are allowed. E.g., On the one hand, if
a card-party Ci is not coupled, then the adversary can call
init (Ci ). On the other hand, if a card-party Ci is coupled,
then the adversary can only call init (Ci , PC, T ), where PC
and T are the parties coupled with Ci.
The adversary can also call init (C,R, T , PC) with the
correct coupling included in the call (i.e., init ([C, PC, T ],R)
or init ([R, PC, T ], C), otherwise the call is rejected). In this
case, it means that the parties in the call will start sessions
in which they communicate together. To this end, the chal-
lenger Ch records in the Sess list different times for differ-
ent parties depending on their location. I.e., the initiator of
the session is logged inside Sess to have started the session
at the current time t, the responder in the session at time
t + distance (initiator , responder ). Note that the challenger
Ch has the location of all parties in P and knows the proto-
cols, so it can determine if e.g., a card party or a reader party
is the initiator or responder of the sessions, respectively. If
W is used inside the call, then the time of the recorded open
session for W is the same as the party coupled with PC, T .
later on) and, as such, this session-creating is also over cor-
rupt cards and PC parties.
If A is used inside the call, then the adversary “starts” a
The challenger Ch will record the opened session(s) ac-
cordingly in the Sess list. If all parties in a Πr eal are given
at input, then different session ids are created for each, and
a macro-session id mid is created for the set. The mids and
macro-session are also recorded in Sess (i.e., each sid can be
linked to a mid and its details) inside Sess.
as output (to A).
• send([sid, S, R, m])
This oracle generally denotes the sending of a message m
inside session sid from sender S aimed to the receiver R. As
The ID sid of the opened session(s) per each party is given
session with one/some of the other parties in the call.
Session 2: Authentication ASIA CCS '20, October 5–9, 2020, Taipei, Taiwan93All checks mentioned below are done by the challenger
we explain next, only S is required, the rest of the parameters
are optional.
Ch via the lists P and Sess.
If no sid is specified, then the message is sent to all ses-
sions of the party passed under the R parameter. If S is equal
to A, then m must be specified, meaning that the adversary
is sending a message m. If a sid is specified, then this session
id sid must exist in Sess. If S is equal to A, plus the receiver
R and sid are specified, then R must have a session sid open
(which the challenger Ch checks in Sess), and only the party
R can read this message (i.e., A is sending a message in
unicast mode). Contrarily, if send ([S,·, m]) with S (cid:44) A is
called, then this messaging emulates broadcast, i.e., all pos-
sible parties who as per Π can receive m will be forwarded
this message.
The adversary can call this oracle with non-adversarial
parties as parameters, in to order get a simulation of com-
munications between honest or corrupt devices. I.e., in the
template of the oracle send ([sid, S, R, m]), we have that S, R ∈
{C,R, (PC, T ), (W,Y) | Y ∈ {}} in such a way that compli-
ance with the protocol specification, the coupling and the
session ids is maintained. That is to say, the Ch makes the
necessary checks: e.g., if both an S and an R are passed in
the oracle, then they communicate as per the protocol, if the
sid is specified then the sender S has such a session in Sess,
etc.
If all checks pass, then the message will become part of this
session’s transcript (inside the list Sess) and the sending will
be recorded in the Sends list (which was described above). If
the checks do not pass, the challenger discards the call.
• read([sid, S, R, m])
This oracle has two inputs that are obligatory: R, and either
sid or m. This means that party R should read a message in
session sid, or read the message m. If all are specified, then
clearly it means that party R should read message m in sid
and consider it as coming from party S. Any subset of inputs
is implicitly explained by this. The challenger Ch makes the
necessary checks by looking in Sends: i.e., (1 )seeing if S
or A have sent the message m; (2) if in session sid, R is at
the step to read m; (3) if the difference between the time
tsent when m was sent by (the honest or adversarial) S , and
the current time t is large enough for the message to have
travelled from the sender to the receiver R (i.e., (t−tsent )∗c ≥
distance (S, R), where c is the speed of messages).
If all checks pass, the message will become part of this
session’s transcript (inside the list Sess) and the reading will
be recorded in the Reads list (which was described above). If
the checks do not pass, the challenger discards the call.
Note. In this formalisation, no two messages can be sent at
the same time. Yet, read ([sid, S, R, m1]) and read ([sid, S, R, m2])
could be enabled at the same time for a receiver R. In this
case, if one of the two messages are sent by the adversary or
a corrupt party, and the other message by an honest party,
then the one sent by the adversary has priority, i.e., the chal-
lenger will record the read of the adversarial message first10.
• corrupt(E)
The adversary calls this oracle to corrupt parties/algorithms;
E can be a party of type card, type reader, or the PC algo-