5.4.11 (allyes)
8814
8512
302
108
11
4
5
261
13
17
11
Table 6: Potential speculative polymorph data confusion in Linux.
• Finally, we discard some cases because there is a function
call between the dereference and the array access, so we
assume that the processor’s speculation window in insufﬁ-
cient for the value to reach the array access.
Note that we may be over-conservative in rejecting cases.
The reason that we do not invest in exploring each case in
detail is because we are looking at an analysis of all indirect
calls, most of which are currently protected with retpolines.
The takeaway here is that were a conditional branch-based
mitigation used instead of retpolines, the kernel’s security
would be on shaky ground.
6.4 Case study of potential vulnerability
To get a taste for the difﬁculty of reasoning about this type
of speculative type confusion, consider the example in List-
ing 13. The functions in question belong the USB type C
driver and to the devfreq driver. They implement the show
method of the driver’s attributes, which is used to display the
attributes in a human-readable way. Both functions extract a
derived object from the ﬁrst argument using container_of.
The attacker trains the call site to invoke the USB driver’s
method (Listing 13a) by repeatedly displaying the attributes of
that device. Next, the attacker attempts to display the devfreq
driver’s attributes. Due to the prior training, instead of the
devfreq method (Listing 13b) being executed, the USB’s
method is initially speculatively executed. Consequently, the
USB method’s derived object actually points to devfreq’s
object, so when the USB method dereferences its cap ﬁeld
it is actually dereferencing the value stored in the devfreq’s
structure max_freq ﬁeld. However, as shown in Listing 13c,
the attacker can only get max_freq to contain one of a ﬁxed
set of values. A similar scenario, in which max_freq would be
some 64-bit value written by the user, would be exploitable.
7 Discussion & mitigations
Here, we discuss possible mitigations against speculative type
confusion attacks. We distinguish mitigations for the general
problem (§ 7.1) from the speciﬁc case of eBPF (§ 7.2). We
focus on immediately deployable mitigations, i.e., mainly
software mitigations. Long term defenses are discussed in § 8.
USENIX Association
30th USENIX Security Symposium    2411
ssize_t port_type_show(struct device *dev,
struct device_attribute *attr,
char *buf) {
// container_of use
struct typec_port *port = to_typec_port(dev);
if (port-> cap ->type == TYPEC_PORT_DRP)
return ...;
return sprintf(buf, "[%s]\n",
typec_port_power_roles[port-> cap ->type]);
}
(a) Mispredicted target.
ssize_t max_freq_show(struct device *dev,
struct device_attribute *attr,
char *buf) {
// container_of use
struct devfreq *df = to_devfreq(dev);
return sprintf(buf, "%lu\n", min(df->scaling_max_freq,
df->max_freq));
}
(b) Actual target.
ssize_t max_freq_store(struct device *dev,
struct device_attribute *attr,
const char *buf, size_t count) {
...
if (freq_table[0] profile->max_state - 1])
value = freq_table[df->profile->max_state - 1];
else
value = freq_table[0];
... value is stored into max_freq ...
}
(c) Value of max_freq is constrained.
Listing 13: Speculative polymorphic type confusion case study.
7.1 General mitigations
Unlike bounds check bypass gadgets, speculative type con-
fusion gadgets do not have a well-understood, easy to spot
structure, and are difﬁcult if not impossible for programmers
to reason about. Mitigating them thus requires either complete
Spectre protection or statically identifying every gadget and
manually protecting it.
Complete mitigations Every Spectre attack, including
speculative type confusion, can be fully mitigated by plac-
ing speculation barriers or serializing instructions after every
branch. This mitigation essentially disables speculative execu-
tion, leading to huge performance loss [18]. Speculative load
hardening (SLH) [21] (implemented in Clang/LLVM [48] and
ICC [38]) is a more efﬁcient complete mitigation. SLH does
not disable speculative execution, but only blocks results of
speculative loads from being forwarded down the pipeline
until the speculative execution proves to be correct. To this
Figure 3: Slowdown of Linux 5.4.119 kernel operations due to SLH.
Figure 4: Slowdown of SPEC CPU 2017 applications due to SLH.
end, SLH masks the output of every load with a mask that has
a data dependency on the outcome of all prior branches in
the program, which is obtained by emitting conditional move
instructions that maintain the mask after every branch.
Unfortunately, we ﬁnd that SLH imposes signiﬁcant over-
head on both kernel operations and computational workloads,
far worse than previously reported results on a Google mi-
crobenchmark suite [21]. To evaluate SLH’s overhead on the
Linux kernel, we use LEBench [65], a microbenchmark suite
that measures the performance of the most important system
calls for a range of application workloads.8 To evaluate SLH’s
overhead on computational userspace workloads, we use the
SPEC CPU2017 benchmark suite [17].
We evaluate the above benchmarks on a system with a
2.6 GHz Intel Xeon Gold 6132 (Skylake) CPU running Linux
5.4.119. Figure 3 shows the relative slowdown of system call
execution time with an SLH-enabled kernel, compared to a
vanilla kernel (which includes Linux’s standard Spectre mit-
igations but is compiled without SLH). Figure 4 shows the
relative execution time slowdown of a subset of the CPU2017
C/C++ benchmarks when compiled with SLH enabled, com-
8We modify Clang/LLVM’s SLH implementation to support kernel-mode
execution, which is not supported out of the box. SLH assumes that the high
bits of addresses are zeroes, and relies on this property to encode information
in the stack pointer on function calls/returns [21]. This technique breaks
kernel execution, because the high bits of kernel virtual addresses are ones.
Our modiﬁcation simply ﬂips the bit values that SLH encodes in the stack
pointer, so that non-transient kernel executions maintain a valid stack pointer.
2412    30th USENIX Security Symposium
USENIX Association
getpid context switchforkfork-childthr createthr create-childbig forkbig fork-childhuge forkhuge fork-childsmall writesmall readsmall mmapsmall munmapsmall page faultmid writemid readmid mmapmid munmapmid page fault big writebig readbig mmapbig munmapbig page faulthuge writehuge readhuge mmaphuge munmaphuge page faultmean0.00.51.01.52.02.5normalized execution timebaselineSLHperlbench_sgcc_smcf_somnetpp_sxalancbmk_sx264_sdeepsjeng_sleela_sxz_smean0.00.51.01.52.02.53.03.5normalized execution timebaselineClang SLHpared to with standard compilation. In both settings, SLH
imposes signiﬁcant slowdowns. SLH causes an average sys-
tem call slowdown of 1.65× (up to 2.7×) and an average
CPU2017 program slowdown of 2× (up to almost 3.5×).
Other proposed software mitigations [62, 87] use similar
principles to SLH, but were evaluated on protecting array
bounds checking. It is not clear what their overhead would be
if used for complete mitigation.
Spot mitigations We contend that manual Spectre mitiga-
tion, as advocated in Linux and GCC, is not practical against
speculative type confusion. Similarly to how transient exe-
cution attacks break the security contract between hardware
and software, speculative type confusion breaks the contract
between the compiler and programs, with correct programs
possibly being compiled into vulnerable native code. Worse,
any conclusion reached about security of code can be invali-
dated by an unrelated code change somewhere in the program
or an update of the compiler. Overall, human-only manual
mitigation seems difﬁcult if not infeasible.
As a result, a manual mitigation approach must be guided
by a complete static analysis, which would detect every spec-
ulative type confusion gadget in the kernel. It is notoriously
difﬁcult, however, to prove safety of C/C++ code, e.g., due
to pointer aliasing and arithmetic [12]. Here, the problem
is compounded by the need to analyze all possible paths,
which invalidates many static analysis optimizations. Indeed,
current analyses that reason about speculative execution vul-
nerabilities have limited scalability [31], restrict themselves
to constant-time code [22], or search for speciﬁc syntactic
code patterns [88]. Scaling an analysis to verify that every
pointer dereference in Linux is safe from speculative type
confusion is a major research challenge.
Hardware workarounds Using different BPUs for user
and kernel context may be a non-intrusive hardware change
that vendors can quickly roll out. However, this mitigation
would still allow attackers to perform mistraining by invoking
in-kernel shadow branches (e.g., in eBPF programs) whose
PHT entries collide with the victim’s.
7.2 Securing eBPF
In addition to the generic mitigations, eBPF can defend from
speculative type confusion in eBPF-speciﬁc ways. The veri-
ﬁer can reason about all execution ﬂows, not just semantically
correct ones. However, this approach would increase veriﬁ-
cation time and render some programs infeasible to verify.
An alternative approach is for the veriﬁer to inject masking
instructions to ensure that the operand of every load instruc-
tion is constrained to the object it is supposed to be accessing,
generalizing the sandboxing approaches of Native Client x86-
64 [73] and Swivel-SFI [61].
8 Related work
Attacks Blindside [30] and SpecROP [13] employ Spectre-
PHT attacks that do not involve a bounds check bypass. Both
attacks also involve indirect branching to an illegal target,
whereas our exploitation of indirect branches does not. Blind-
side leverages a non-speculative pointer corruption (e.g., via
a buffer overﬂow) to speculatively hijack control ﬂow in the
shadow of a mispredicted branch. SpecROP poisons the BTB
to chain multiple Spectre gadgets with indirect calls. With
recent mitigations, SpecROP is therefore limited to intra-
address space attacks and cannot target the kernel.
Defenses Non-speculative type confusion [33, 40, 49, 60]
and control-ﬂow integrity (CFI) [6,25,28,78,96] have received
signiﬁcant attention. These works generally consider non-
speculative memory corruption and control-ﬂow hijacking,
not memory disclosure over covert channels. The defenses
proposed are based on the architectural semantics, and so do
not straightforwardly apply to speculative execution attacks.
There are many proposals for hardware defenses against
transient execution attacks. Some designs require program-
mer or software support [27, 42, 69, 77, 93] but many are
software-transparent. Transparent designs differ in the protec-
tion approach. Some block only cache-based attacks [7, 41,
50, 66, 67, 91], whereas others comprehensively block data
from reaching transient covert channels [10,89,94,95]. These
works all report drastically lower overhead than what we ob-
serve for SLH, but their results are based on simulations.
Combining the above two lines of work, SpecCFI [47]
is a hardware mitigation for Spectre-BTB (v2) attacks that
restricts branch target speculation to legal targets, obtained
by CFI analysis. SpecCFI also assumes hardware Spectre-
PHT (v1) mitigations, and thus should not be vulnerable to
speculative type confusion.
In principle, speculative type confusion can be detected
by static [22, 31, 88] or dynamic [63] analysis that reasons
about speculative execution. To our knowledge, only SPEC-
TECTOR [31] performs a sound analysis targeting general-
purpose code, but it has challenges scaling to large code bases,
such as Linux. Other static analyses target only constant-time
code [22] or search for speciﬁc code patterns [88]. Spec-
Fuzz [63] dynamically executes misspeculated ﬂows, making
them observable to conventional memory safety checkers,
such as AddressSanitizer [74]. Thus, SpecFuzz is not guaran-
teed to ﬁnd all vulnerabilities.
eBPF Gershuni et al. [29] leverage abstract interpretation
to design an eBPF veriﬁer with improved precision (fewer
incorrectly rejected programs) and scope (verifying eBPF pro-
grams with loops). Their analysis still is based on architectural
semantics, and thus does not block our described speculative
type confusion attack.
USENIX Association
30th USENIX Security Symposium    2413
9 Conclusion
We have shown that speculative type confusion vulnerabilities
exist in the wild. Speculative type confusion puts into question
“spot” Spectre mitigations. The relevant gadgets do not have a
speciﬁc structure and can insidiously materialize as a result of
benign compiler optimizations and code changes, making it
hard if not impossible for programmers to reason about code
and manually apply Spectre mitigations.
Speculative type confusion vulnerabilities also slip through
the cracks of non-comprehensive Spectre mitigations such
as prevention of bounds check bypasses and restriction of
indirect branch targets to legal (but possibly wrong) targets.
Consequently, the Spectre mitigation approach in the Linux
kernel—and possibly other systems—requires rethinking and
further research.
Disclosure
We disclosed our ﬁndings to the Linux kernel security team,
the eBPF maintainers, as well as Google’s Android and
Chromium teams in June 2020. Following our report, Google
awarded us a Vulnerability Reward. The eBPF vulnerability
(CVE-2021-33624) was ﬁxed in the mainline Linux devel-
opment tree in June 2021, by extending the eBPF veriﬁer to
explore speculative paths [16]. Subsequently, we issued an
advisory [44] to alert the various Linux distributions to the
vulnerability and its mitigation.
Acknowledgements
We thank Alla Lenchner for extending LLVM’s SLH to sup-
port kernel-mode mitigation. We thank the reviewers and our
shepherd, Deian Stefan, for their insightful feedback. This
work was funded in part by an Intel Strategic Research Al-
liance (ISRA) grant and by the Blavatnik ICRC at TAU.
References
[1] Triton: A Dynamic Symbolic Execution Framework, 2015.
[2] eXpress Data Path.
io/en/latest/networking/XDP/index.html, 2018.
https://prototype-kernel.readthedocs.
[3] IO Visor Project.
2018.
https://www.iovisor.org/technology/bcc,
[4] A seccomp overview. https://lwn.net/Articles/656307/, 2018.
[5] Linux kernel virtual memory map. https://www.kernel.org/doc/
Documentation/x86/x86_64/mm.txt, 2020.
[6] Martín Abadi, Mihai Budiu, Úlfar Erlingsson, and Jay Ligatti. Control-
Flow Integrity. In CCS, 2005.
[7] Sam Ainsworth and Timothy M. Jones. MuonTrap: Preventing Cross-
Domain Spectre-Like Attacks by Capturing Speculative State. In ISCA,
2019.
[8] AMD.
An Update on AMD Processor Security.
https:
//www.amd.com/en/corporate/speculative-execution-
previous-updates#paragraph-337801, 2018.
[9] Nadav Amit, Fred Jacobs, and Michael Wei. JumpSwitches: Restoring
the Performance of Indirect Branches In the Era of Spectre. In USENIX
ATC, 2019.
[10] Kristin Barber, Anys Bacha, Li Zhou, Yinqian Zhang, and Radu Teodor-
escu. SpecShield: Shielding Speculative Data from Microarchitectural
Covert Channels. In PACT, 2019.
[11] Andrew Begel, Steven McCanne, and Susan L. Graham. BPF+: Ex-