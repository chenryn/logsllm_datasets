Certainly! Here is a more polished and professional version of your text:

---

**Issue Description:**

The issue is difficult to reproduce, but I have attached an array where the problem occurs. Below is the code that demonstrates the issue, along with the results.

**Code:**

```python
import numpy as np

# Set NumPy to raise exceptions for all floating-point errors
np.seterr(all='raise')

# Load the problematic array
a = np.load('weird_array.npy')

# Print the shape and data type of the array
print(a.shape, a.dtype)

# Iterate through the array to identify the problematic element
for i, val in enumerate(a):
    try:
        # Check if the value is finite
        np.isfinite(np.array(val, ndmin=1))
    except:
        # If an exception is raised, capture the index and details of the problematic value
        strange_index = i
        print(f"Type: {type(val)}")
        print(f"Class: {val.__class__.__name__}")
        print(f"Index: {i}")
        print(f"Value: {val}")

# Attempt to check if the identified value is finite
print(np.isfinite(a[strange_index]))
```

**Results:**

- Data type of the array: `float64`
- Index of the problematic value: `1023450`
- Problematic value: `nan`

**Error Traceback:**

```
Traceback (most recent call last):
  File "test.py", line 15, in <module>
    print(np.isfinite(a[strange_index]))
FloatingPointError: invalid value encountered in isfinite
```

**Attached Files:**

- `weird_array.zip` (Contains the problematic array `weird_array.npy`)

---

This version is more structured and provides a clear, step-by-step explanation of the issue, the code, and the results.