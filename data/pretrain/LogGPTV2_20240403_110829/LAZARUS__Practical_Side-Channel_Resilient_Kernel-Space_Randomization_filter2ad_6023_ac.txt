248
D. Gens et al.
system call. We added a second assembly routine shortly before the return of
the system call handler to remove the kernel page tables from the page table
hierarchy of the process and insert our predeﬁned user page tables.
However, contrary to its single entry, there are multiple exit points for the
system call handler. For instance, there is a dedicated error path, and fast and
slow paths for regular execution. We instrument all of these exit points to ensure
that the kernel page tables are not used during user execution.
4.3
Interrupts
Just like the system call handler, we need to modify the interrupt handler to
restore the kernel page tables. However, unlike system calls, interrupts can occur
when the processor is in privileged execution mode as well. Thus, to handle inter-
rupts, we need to distinguish both cases. Basically we could look up the current
privilege level easily by querying a register. However, this approach provides
information about the current execution context, whereas to distinguish the two
cases we require the privilege level of the interrupted context.
Fortunately, the processor saves some hardware context information, such
as the instruction pointer, stack pointer, and the code segment register before
invoking the interrupt handler routine. This means that we can utilize the stored
privilege level associated with the previous code segment selector to test the
privilege level of the interrupted execution context. We then only restore the
kernel page tables if it was a user context.
We still have to handle one exceptional case however: the non-maskable inter-
rupt (NMI). Because NMIs are never maskable, they are handled by a dedicated
interrupt handler. Hence, we modify this dedicated NMI handler in the kernel
to include our mechanism as well.
4.4 Fine-Grained Page Table Switching
As a software-only defense technique, one of the main goals of LAZARUS is
to oﬀer practical performance. While separating the entire page table hierarchy
between kernel and user mode is tempting, this approach is impractical.
In particular, switching the entire page table hierarchy invalidates all of the
cached TLB entries. This means, that the caches are reset every time and can
never be utilized after a context switch. For this reason, we only replace those
parts of the page table hierarchy, which deﬁne virtual memory mappings for ran-
domized addresses. In the case of KASLR, this corresponds to the code section
of the kernel. More speciﬁcally, the kernel code section is managed by the last
of the 512 level 4 entries.
Thus, we replace only this entry during a context switch between privileged
and unprivileged execution. As a result, the caches can still be shared between
diﬀerent privilege levels for non-randomized addresses. As we will discuss in
Sect. 5, this does not impact our security guarantees in any way.
LAZARUS: Practical Side-Channel Resilient
249
5 Evaluation
In this section we evaluate our prototypical implementation for the Linux ker-
nel. First, we show that LAZARUS successfully prevents all of the previously
published side-channel attacks. Second, we demonstrate that our defense only
incurs negligible performance impact for standard computational workloads.
5.1 Security
Our main goal is to prevent the leakage of the randomization secret in the kernel
to an unprivileged process through paging-based side-channel attacks. For this,
we separate the page tables for privileged parts of the address space from the
unprivileged parts. We ensure that this separation is enforced for randomized
addresses to achieve practical performance.
Because all paging-based exploits rely on the timing diﬀerence between
cached and uncached entries for privileged virtual addresses, we ﬁrst conduct
a series of timing experiments to measure the remaining side channel in the
presence of LAZARUS.
In a second step, we execute all previously presented side-channel attacks on
a system hardened with LAZARUS to verify the eﬀectiveness of our approach.
Eﬀect of LAZARUS on the Timing Side-Channel. To estimate the
remaining timing side-channel information we measure the timing diﬀerence for
privileged virtual addresses. We access each page in the kernel code section at
least once and measure the timing using the rdtscp instruction. By probing the
privileged address space in this way, we collect a timing series of execution cycles
for each kernel code page. The results are shown in Fig. 3.1
The timing side channel is clearly visible for the vanilla KASLR implemen-
tation: the start of the actual code section mapping is located around the ﬁrst
visible jump from 160 cycles up to 180 cycles. Given a reference timing for a
corresponding kernel image, the attacker can easily calculate the random oﬀset
by subtracting the address of the peak from the address in the reference timing.
In contrast to this, the timing of LAZARUS shows a straight line, with a
maximum cycle distance of two cycles. In particular, there is no correlation
between any addresses and peaks in the timing signal of the hardened kernel.
This indicates that our defense approach indeed closes the paging-induced timing
channel successfully. We note, that the average number of cycles depicted for
LAZARUS are also in line with the timings for cached page table entries reported
by related work [8,13]. To further evaluate the security of our approach, we
additionally test it against all previous side-channel attacks.
1 For brevity, we display the addresses on the x-axis as oﬀsets to the start of the
code section (i.e., 0xffffffff80000000). We further corrected the addresses by their
random oﬀset, so that both data series can be shown on top of each other.
250
D. Gens et al.
Fig. 3. Timing side-channel measurements.
Real-World Side-Channel Attacks. We implemented and ran all of the pre-
vious side-channel attacks against a system hardened with LAZARUS, to exper-
imentally assess the eﬀectiveness of our approach against real-world attacks.
Page-fault handler. The ﬁrst real-world side-channel attack against KASLR was
published by Hund et al. [10]. They noted that the execution time of the page
fault handler in the OS kernel depends on the state of the paging caches. More
speciﬁcally, they access kernel addresses from user space which results in a page
fault. While this would usually terminate the process causing the access viola-
tion, the POSIX standard allows for processes to handle such events via signals.
By installing a signal handler for the segmentation violation (SIGSEGV), the user
process can recover from the fault and measure the timing diﬀerence from the
initial memory access to the delivery of the signal back to user space. In this way,
the entire virtual kernel code section can be scanned and each address associ-
ated with its corresponding timing measurement, allowing a user space process
to reconstruct the start address of the kernel code section. We implemented
and successfully tested the attack against a vanilla Linux kernel with KASLR.
In particular, we found that page fault handler exhibits a timing diﬀerence of
around 30 cycles for mapped and unmapped pages, with an average time of
around 2200 cycles. While this represents a rather small diﬀerence compared to
the other attacks, this is due to the high amount of noise that is caused by the
execution path of the page fault handler code in the kernel.2 When we applied
LAZARUS to the kernel the attack no longer succeeded.
Prefetch. Recently, the prefetch instruction featured on many Intel x86 proces-
sors was shown to enable side-channel attacks against KASLR [8]. It is intended
to provide a benign way of instrumenting the caches: the programmer (or the
compiler) can use the instruction to provide a hint to the processor to cache a
given virtual address.
2 This was also noted in the original exploit [10].
LAZARUS: Practical Side-Channel Resilient
251
Although there is no guarantee that this hint will inﬂuence the caches in
any way, the instruction can be used with arbitrary addresses in principle. This
means that a user mode program can prefetch a kernel virtual address, and
execution of the instruction will fail siltently, i.e., the page fault handler in the
kernel will not be executed, and no exception will be raised.
However, the MMU still has to perform a privilege check on the provided
virtual address, hence the execution time of the prefetch instruction depends
directly on the state of the TLBs.
We implemented the prefetch attack against KASLR for Linux, and succes-
fully executed it against a vanilla system to disclose the random oﬀset. Executing
the attack against a system hardened with LAZARUS we found the attack to
be unsuccessful.
TSX. Rafal Wojtczuk originally proposed an attack to bypass KASLR using the
Transactional Synchronization Extension (TSX) present in Intel x86 CPUs [23],
and the attack gained popularity in the academic community through a paper
by Jang et al. [13]. TSX provides a hardware mechanism that aims to simplify
the implementation of multi-threaded applications through lock elision. Initially
released in Haswell processors, TSX-enabled processors are capable of dynami-
cally determining to serialize threads through lock-protected critical sections if
necessary. The processor may abort a TSX transaction if an atomic view from
the software’s perspective is not guaranteed, e.g., due to conﬂicting accesses
between two logical processors on one core.
TSX will suppress any faults that must be exposed to software if they occur
within a transactional region. Memory accesses that cause a page walk may abort
a transaction, and according to the speciﬁcation will not be made architecturally
visible through the behavior of structures such as TLBs [12]. The timing charac-
teristics of the abort, however, can be exploited to reveal the current state of the
TLBs. By causing a page walk inside a transactional block, timing information
on the aborted transaction discloses the position of kernel pages that are mapped
into a process: ﬁrst, the attacker initiates a memory access to kernel pages inside
a transactional block, which causes (1) a page walk, and (2) a segmentation fault.
Since TSX masks the segmentation fault in hardware, the kernel is never made
aware of the event and the CPU executes the abort handler provided by the
attacker-controlled application that initiated the malicious transaction. Second,
the attacker records timing information about the abort-handler execution. A
transaction abort takes about 175 cycles if the probed page is mapped, whereas
it aborts in about 200 cycles or more if unmapped [23]. By probing all possible
locations for the start of the kernel code section, this side channel exposes the
KASLR oﬀset to the unprivileged attacker in user space.
Probing pages in this way under LAZARUS reveals no information, since we
unmap all kernel code pages from the process, rendering the timing side channel
useless as any probes to kernel addresses show as unmapped. Only the switching
code and the surrounding dummy entries are mapped. However, these show
identical timing information, and hence, are indistinguishable for an adversary.
252
D. Gens et al.
5.2 Performance
We evaluated LAZARUS on a machine with an Intel Core i7-6820HQ CPU
clocked at 2.70 GHz and 16 GB of memory. The machine runs a current release
of Arch Linux with kernel version 4.8.14. For our testing, we enabled KASLR
in the Linux kernel that Arch Linux ships. We also compiled a secondary kernel
with the same conﬁguration and LAZARUS applied.
We ﬁrst examine the performance overhead with respect to the industry
standard SPEC2006 benchmark [9]. We ran both the integer and ﬂoating point
benchmarks in our test platform under the stock kernel with KASLR enabled.
We collected these results and performed the test again under the LAZARUS
kernel. Our results are shown in Fig. 4.
The observed performance overhead can be attributed to measurement inac-
curacies. Our computed worst case overhead is of 0.943%. We should note that
SPEC2006 is meant to test computational workloads and performs little in terms
of context switching.
To better gauge the eﬀects of LAZARUS on the system, we ran the system
benchmarks provided by LMBench3 [22]. LMBench3 improves on the context
switching benchmarks by eliminating some of the issues present in previous ver-
sions of the benchmark, albeit it still suﬀers issues with multiprocessor machines.
For this reason, we disabled SMP during our testing. Our results are presented
in Fig. 5.
We can see how a system call intensive application is aﬀected the most under
LAZARUS. This is to be expected, as the page tables belonging to the ker-
nel must be remapped upon entering kernel execution. In general, we show a
47% performance overhead when running these benchmarks. We would like to
remind the reader, however, that these benchmarks are meant to stress test the
performance of the operating system when handling interrupts and do not reﬂect
normal system operation.
In order to get a more realistic estimate of LAZARUS, we ran the Phoronix
Test Suite [15], which is widely used to compare the performance of operating
systems. The Phoronix benchmarking suite features a large number of tests
which cover diﬀerent aspects of a system, and are grouped according to the
targeted subsystem of the machine. Speciﬁcally, we ran the system and disk
benchmarks to test application performance. Our results are shown in Fig. 6.
We show an average performance overhead of 2.1% on this benchmark, which
is in line with our results provided by the SPEC and LMBench benchmarks.
The worst performers were benchmarks that are bound to read operations. We
speculate that this is due to the amount of context switches that happen while
the read operation is taking place, as a buﬀer in kernel memory needs to be
copied into a buﬀer from user space or remapped there.
Lastly, we ran the pgbench benchmark on a test PostgreSQL database and
measured a performance overhead of 2.386%.
LAZARUS: Practical Side-Channel Resilient
253
Fig. 4. SPEC2006 benchmark results
Fig. 5. LMBench3 benchmark results
Fig. 6. Phoronix benchmark suite
254