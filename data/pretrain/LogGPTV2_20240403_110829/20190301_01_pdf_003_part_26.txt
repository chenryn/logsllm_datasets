7521 WARD, SALESMAN
Salary: $1250.00 Commission: $500.00
7566 JONES, MANAGER
Salary: $2975.00 Commission: $0
7654 MARTIN, SALESMAN
Salary: $1250.00 Commission: $1400.00
7698 BLAKE, MANAGER
Salary: $2850.00 Commission: $0
7782 CLARK, MANAGER
Salary: $2450.00 Commission: $0
7788 SCOTT, ANALYST
Salary: $3000.00 Commission: $0
7839 KING, PRESIDENT
Salary: $5000.00 Commission: $0
7844 TURNER, SALESMAN
Salary: $1500.00 Commission: $0.00
7876 ADAMS, CLERK
Salary: $1100.00 Commission: $0
7900 JAMES, CLERK
Salary: $950.00 Commission: $0
7902 FORD, ANALYST
Salary: $3000.00 Commission: $0
7934 MILLER, CLERK
Salary: $1300.00 Commission: $0
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 286
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.21 UTL_HTTP
The UTL_HTTP package provides a way to use the HTTP or HTTPS protocol to retrieve
information found at an URL. Advanced Server supports the following functions and
procedures:
Function/Procedure Return Type Description
BEGIN_REQUEST(url, method,
UTL_HTTP.REQ Initiates a new HTTP request.
http_version)
Ends an HTTP request before allowing it to
END_REQUEST(r IN OUT) n/a
complete.
END_RESPONSE(r IN OUT) n/a Ends the HTTP response.
Returns the default character set of the body
GET_BODY_CHARSET VARCHAR2
of future HTTP requests.
Returns the default character set of the body
GET_BODY_CHARSET(charset OUT) n/a
of future HTTP requests.
GET_FOLLOW_REDIRECT(max_redirects Current setting for the maximum number of
n/a
OUT) redirections allowed.
GET_HEADER(r IN OUT, n, name OUT, Returns the nth header of the HTTP
n/a
value OUT) response.
GET_HEADER_BY_NAME(r IN OUT, Returns the HTTP response header for the
n/a
name, value OUT, n) specified name.
Returns the number of HTTP response
GET_HEADER_COUNT(r IN OUT) INTEGER
headers.
GET_RESPONSE(r IN OUT) UTL_HTTP.RESP Returns the HTTP response.
GET_RESPONSE_ERROR_CHECK(enable Returns whether or not response error check
n/a
OUT) is set.
Returns the transfer timeout setting for
GET_TRANSFER_TIMEOUT(timeout OUT) n/a
HTTP requests.
READ_LINE(r IN OUT, data OUT, Returns the HTTP response body in text
n/a
remove_crlf) form until the end of line.
Returns the HTTP response body in binary
READ_RAW(r IN OUT, data OUT, len) n/a
form for a specified number of bytes.
READ_TEXT(r IN OUT, data OUT, Returns the HTTP response body in text
n/a
len) form for a specified number of characters.
REQUEST(url) VARCHAR2 Returns the content of a web page.
UTL_HTTP. Returns a table of 2000-byte segments
REQUEST_PIECES(url, max_pieces)
HTML_PIECES retrieved from an URL.
Sets the default character set of the body of
SET_BODY_CHARSET(charset) n/a
future HTTP requests.
SET_FOLLOW_REDIRECT(max_redirects Sets the maximum number of times to
n/a
) follow the redirect instruction.
Sets the maximum number of times to
SET_FOLLOW_REDIRECT(r IN OUT,
n/a follow the redirect instruction for an
max_redirects)
individual request.
SET_HEADER(r IN OUT, name, value) n/a Sets the HTTP request header.
Determines whether or not HTTP 4xx and
SET_RESPONSE_ERROR_CHECK(enable) n/a
5xx status codes are to be treated as errors.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 287
Database Compatibility for Oracle® Developers
Built-in Package Guide
Function/Procedure Return Type Description
Sets the default, transfer timeout value for
SET_TRANSFER_TIMEOUT(timeout) n/a
HTTP requests.
SET_TRANSFER_TIMEOUT(r IN OUT, Sets the transfer timeout value for an
n/a
timeout) individual HTTP request.
Writes CRLF terminated data to the HTTP
WRITE_LINE(r IN OUT, data) n/a
request body in TEXT form.
Writes data to the HTTP request body in
WRITE_RAW(r IN OUT, data) n/a
BINARY form.
Writes data to the HTTP request body in
WRITE_TEXT(r IN OUT, data) n/a
TEXT form.
Advanced Server's implementation of UTL_HTTP is a partial implementation when
compared to Oracle's version. Only those functions and procedures listed in the table
above are supported.
Please Note:
In Advanced Server, an HTTP 4xx or HTTP 5xx response produces a database error; in
Oracle, this is configurable but FALSE by default.
In Advanced Server, the UTL_HTTP text interfaces expect the downloaded data to be in
the database encoding. All currently-available interfaces are text interfaces. In Oracle,
the encoding is detected from HTTP headers; in the absence of the header, the default is
configurable and defaults to ISO-8859-1.
Advanced Server ignores all cookies it receives.
The UTL_HTTP exceptions that can be raised in Oracle are not recognized by Advanced
Server. In addition, the error codes returned by Advanced Server are not the same as
those returned by Oracle.
There are various public constants available with UTL_HTTP. These are listed in the
following tables.
The following table contains UTL_HTTP public constants defining HTTP versions and
port assignments.
HTTP VERSIONS
HTTP_VERSION_1_0 CONSTANT VARCHAR2(64) := 'HTTP/1.0';
HTTP_VERSION_1_1 CONSTANT VARCHAR2(64) := 'HTTP/1.1';
STANDARD PORT ASSIGNMENTS
DEFAULT_HTTP_PORT CONSTANT INTEGER := 80;
DEFAULT_HTTPS_PORT CONSTANT INTEGER := 443;
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 288
Database Compatibility for Oracle® Developers
Built-in Package Guide
The following table contains UTL_HTTP public status code constants.
1XX INFORMATIONAL
HTTP_CONTINUE CONSTANT INTEGER := 100;
HTTP_SWITCHING_PROTOCOLS CONSTANT INTEGER := 101;
HTTP_PROCESSING CONSTANT INTEGER := 102;
2XX SUCCESS
HTTP_OK CONSTANT INTEGER := 200;
HTTP_CREATED CONSTANT INTEGER := 201;
HTTP_ACCEPTED CONSTANT INTEGER := 202;
HTTP_NON_AUTHORITATIVE_INFO CONSTANT INTEGER := 203;
HTTP_NO_CONTENT CONSTANT INTEGER := 204;
HTTP_RESET_CONTENT CONSTANT INTEGER := 205;
HTTP_PARTIAL_CONTENT CONSTANT INTEGER := 206;
HTTP_MULTI_STATUS CONSTANT INTEGER := 207;
HTTP_ALREADY_REPORTED CONSTANT INTEGER := 208;
HTTP_IM_USED CONSTANT INTEGER := 226;
3XX REDIRECTION
HTTP_MULTIPLE_CHOICES CONSTANT INTEGER := 300;
HTTP_MOVED_PERMANENTLY CONSTANT INTEGER := 301;
HTTP_FOUND CONSTANT INTEGER := 302;
HTTP_SEE_OTHER CONSTANT INTEGER := 303;
HTTP_NOT_MODIFIED CONSTANT INTEGER := 304;
HTTP_USE_PROXY CONSTANT INTEGER := 305;
HTTP_SWITCH_PROXY CONSTANT INTEGER := 306;
HTTP_TEMPORARY_REDIRECT CONSTANT INTEGER := 307;
HTTP_PERMANENT_REDIRECT CONSTANT INTEGER := 308;
4XX CLIENT ERROR
HTTP_BAD_REQUEST CONSTANT INTEGER := 400;
HTTP_UNAUTHORIZED CONSTANT INTEGER := 401;
HTTP_PAYMENT_REQUIRED CONSTANT INTEGER := 402;
HTTP_FORBIDDEN CONSTANT INTEGER := 403;
HTTP_NOT_FOUND CONSTANT INTEGER := 404;
HTTP_METHOD_NOT_ALLOWED CONSTANT INTEGER := 405;
HTTP_NOT_ACCEPTABLE CONSTANT INTEGER := 406;
HTTP_PROXY_AUTH_REQUIRED CONSTANT INTEGER := 407;
HTTP_REQUEST_TIME_OUT CONSTANT INTEGER := 408;
HTTP_CONFLICT CONSTANT INTEGER := 409;
HTTP_GONE CONSTANT INTEGER := 410;
HTTP_LENGTH_REQUIRED CONSTANT INTEGER := 411;
HTTP_PRECONDITION_FAILED CONSTANT INTEGER := 412;
HTTP_REQUEST_ENTITY_TOO_LARGE CONSTANT INTEGER := 413;
HTTP_REQUEST_URI_TOO_LARGE CONSTANT INTEGER := 414;
HTTP_UNSUPPORTED_MEDIA_TYPE CONSTANT INTEGER := 415;
HTTP_REQ_RANGE_NOT_SATISFIABLE CONSTANT INTEGER := 416;
HTTP_EXPECTATION_FAILED CONSTANT INTEGER := 417;
HTTP_I_AM_A_TEAPOT CONSTANT INTEGER := 418;
HTTP_AUTHENTICATION_TIME_OUT CONSTANT INTEGER := 419;
HTTP_ENHANCE_YOUR_CALM CONSTANT INTEGER := 420;
HTTP_UNPROCESSABLE_ENTITY CONSTANT INTEGER := 422;
HTTP_LOCKED CONSTANT INTEGER := 423;
HTTP_FAILED_DEPENDENCY CONSTANT INTEGER := 424;
HTTP_UNORDERED_COLLECTION CONSTANT INTEGER := 425;
HTTP_UPGRADE_REQUIRED CONSTANT INTEGER := 426;
HTTP_PRECONDITION_REQUIRED CONSTANT INTEGER := 428;
HTTP_TOO_MANY_REQUESTS CONSTANT INTEGER := 429;
HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE CONSTANT INTEGER := 431;
HTTP_NO_RESPONSE CONSTANT INTEGER := 444;
HTTP_RETRY_WITH CONSTANT INTEGER := 449;
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 289
Database Compatibility for Oracle® Developers
Built-in Package Guide
HTTP_BLOCKED_BY_WINDOWS_PARENTAL_CONTROLS CONSTANT INTEGER := 450;
HTTP_REDIRECT CONSTANT INTEGER := 451;
HTTP_REQUEST_HEADER_TOO_LARGE CONSTANT INTEGER := 494;
HTTP_CERT_ERROR CONSTANT INTEGER := 495;
HTTP_NO_CERT CONSTANT INTEGER := 496;
HTTP_HTTP_TO_HTTPS CONSTANT INTEGER := 497;
HTTP_CLIENT_CLOSED_REQUEST CONSTANT INTEGER := 499;
5XX SERVER ERROR
HTTP_INTERNAL_SERVER_ERROR CONSTANT INTEGER := 500;
HTTP_NOT_IMPLEMENTED CONSTANT INTEGER := 501;
HTTP_BAD_GATEWAY CONSTANT INTEGER := 502;
HTTP_SERVICE_UNAVAILABLE CONSTANT INTEGER := 503;
HTTP_GATEWAY_TIME_OUT CONSTANT INTEGER := 504;
HTTP_VERSION_NOT_SUPPORTED CONSTANT INTEGER := 505;
HTTP_VARIANT_ALSO_NEGOTIATES CONSTANT INTEGER := 506;
HTTP_INSUFFICIENT_STORAGE CONSTANT INTEGER := 507;
HTTP_LOOP_DETECTED CONSTANT INTEGER := 508;
HTTP_BANDWIDTH_LIMIT_EXCEEDED CONSTANT INTEGER := 509;
HTTP_NOT_EXTENDED CONSTANT INTEGER := 510;
HTTP_NETWORK_AUTHENTICATION_REQUIRED CONSTANT INTEGER := 511;
HTTP_NETWORK_READ_TIME_OUT_ERROR CONSTANT INTEGER := 598;
HTTP_NETWORK_CONNECT_TIME_OUT_ERROR CONSTANT INTEGER := 599;
3.21.1 HTML_PIECES
The UTL_HTTP package declares a type named HTML_PIECES, which is a table of type
VARCHAR2 (2000) indexed by BINARY INTEGER. A value of this type is returned by
the REQUEST_PIECES function.
TYPE html_pieces IS TABLE OF VARCHAR2(2000) INDEX BY BINARY_INTEGER;
3.21.2 REQ
The REQ record type holds information about each HTTP request.
TYPE req IS RECORD (
url VARCHAR2(32767), -- URL to be accessed
method VARCHAR2(64), -- HTTP method
http_version VARCHAR2(64), -- HTTP version
private_hndl INTEGER -- Holds handle for this request
);
3.21.3 RESP
The RESP record type holds information about the response from each HTTP request.
TYPE resp IS RECORD (
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 290
Database Compatibility for Oracle® Developers
Built-in Package Guide
status_code INTEGER, -- HTTP status code
reason_phrase VARCHAR2(256), -- HTTP response reason phrase
http_version VARCHAR2(64), -- HTTP version
private_hndl INTEGER -- Holds handle for this response
);
3.21.4 BEGIN_REQUEST
The BEGIN_REQUEST function initiates a new HTTP request. A network connection is
established to the web server with the specified URL. The signature is:
BEGIN_REQUEST(url IN VARCHAR2, method IN VARCHAR2 DEFAULT
'GET ', http_version IN VARCHAR2 DEFAULT NULL) RETURN
UTL_HTTP.REQ
The BEGIN_REQUEST function returns a record of type UTL_HTTP.REQ.
Parameters
url
url is the Uniform Resource Locator from which UTL_HTTP will return content.
method
method is the HTTP method to be used. The default is GET.
http_version
http_version is the HTTP protocol version sending the request. The specified
values should be either HTTP/1.0 or HTTP/1.1. The default is null in which
case the latest HTTP protocol version supported by the UTL_HTTP package is
used which is 1.1.
3.21.5 END_REQUEST
The END_REQUEST procedure terminates an HTTP request. Use the END_REQUEST
procedure to terminate an HTTP request without completing it and waiting for the
response. The normal process is to begin the request, get the response, then close the
response. The signature is:
END_REQUEST(r IN OUT UTL_HTTP.REQ)
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 291
Database Compatibility for Oracle® Developers
Built-in Package Guide
Parameters
r
r is the HTTP request record.
3.21.6 END_RESPONSE
The END_RESPONSE procedure terminates the HTTP response. The END_RESPONSE
procedure completes the HTTP request and response. This is the normal method to end
the request and response process. The signature is:
END_RESPONSE(r IN OUT UTL_HTTP.RESP)
Parameters
r
r is the HTTP response record.
3.21.7 GET_BODY_CHARSET
The GET_BODY_CHARSET program is available in the form of both a procedure and a
function. A call to GET_BODY_CHARSET returns the default character set of the body of
future HTTP requests.
The procedure signature is:
GET_BODY_CHARSET(charset OUT VARCHAR2)
The function signature is:
GET_BODY_CHARSET() RETURN VARCHAR2
This function returns a VARCHAR2 value.
Parameters
charset
charset is the character set of the body.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 292
Database Compatibility for Oracle® Developers
Built-in Package Guide
Examples
The following is an example of the GET_BODY_CHARSET function.
edb=# SELECT UTL_HTTP.GET_BODY_CHARSET() FROM DUAL;
get_body_charset
------------------
ISO-8859-1
(1 row)
3.21.8 GET_FOLLOW_REDIRECT
The GET_FOLLOW_REDIRECT procedure returns the current setting for the maximum
number of redirections allowed. The signature is:
GET_FOLLOW_REDIRECT(max_redirects OUT INTEGER)
Parameters
max_redirects
max_redirects is maximum number of redirections allowed.
3.21.9 GET_HEADER
The GET_HEADER procedure returns the nth header of the HTTP response. The signature
is:
GET_HEADER(r IN OUT UTL_HTTP.RESP, n INTEGER, name OUT
VARCHAR2, value OUT VARCHAR2)
Parameters
r
r is the HTTP response record.
n
n is the nth header of the HTTP response record to retrieve.
name
name is the name of the response header.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 293
Database Compatibility for Oracle® Developers
Built-in Package Guide
value
value is the value of the response header.
Examples
The following example retrieves the header count, then the headers.
DECLARE
v_req UTL_HTTP.REQ;
v_resp UTL_HTTP.RESP;
v_name VARCHAR2(30);
v_value VARCHAR2(200);
v_header_cnt INTEGER;
BEGIN
-- Initiate request and get response
v_req := UTL_HTTP.BEGIN_REQUEST('www.enterprisedb.com');
v_resp := UTL_HTTP.GET_RESPONSE(v_req);
-- Get header count
v_header_cnt := UTL_HTTP.GET_HEADER_COUNT(v_resp);
DBMS_OUTPUT.PUT_LINE('Header Count: ' || v_header_cnt);
-- Get all headers
FOR i IN 1 .. v_header_cnt LOOP
UTL_HTTP.GET_HEADER(v_resp, i, v_name, v_value);
DBMS_OUTPUT.PUT_LINE(v_name || ': ' || v_value);
END LOOP;
-- Terminate request
UTL_HTTP.END_RESPONSE(v_resp);
END;
The following is the output from the example.
Header Count: 23
Age: 570
Cache-Control: must-revalidate
Content-Type: text/html; charset=utf-8
Date: Wed, 30 Apr 2015 14:57:52 GMT
ETag: "aab02f2bd2d696eed817ca89ef411dda"
Expires: Sun, 19 Nov 1978 05:00:00 GMT
Last-Modified: Wed, 30 Apr 2015 14:15:49 GMT
RTSS: 1-1307-3
Server: Apache/2.2.3 (Red Hat)
Set-Cookie: SESS2771d0952de2a1a84d322a262e0c173c=jn1u1j1etmdi5gg4lh8hakvs01;
expires=Fri, 23-May-2015 18:21:43 GMT; path=/; domain=.enterprisedb.com
Vary: Accept-Encoding
Via: 1.1 varnish
X-EDB-Backend: ec
X-EDB-Cache: HIT
X-EDB-Cache-Address: 10.31.162.212
X-EDB-Cache-Server: ip-10-31-162-212
X-EDB-Cache-TTL: 600.000
X-EDB-Cacheable: MAYBE: The user has a cookie of some sort. Maybe it's double
choc-chip!
X-EDB-Do-GZIP: false
X-Powered-By: PHP/5.2.17
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 294
Database Compatibility for Oracle® Developers
Built-in Package Guide
X-Varnish: 484508634 484506789
transfer-encoding: chunked
Connection: keep-alive
3.21.10 GET_HEADER_BY_NAME
The GET_HEADER_BY_NAME procedure returns the header of the HTTP response
according to the specified name. The signature is:
GET_HEADER_BY_NAME(r IN OUT UTL_HTTP.RESP, name VARCHAR2,
value OUT VARCHAR2, n INTEGER DEFAULT 1)
Parameters
r
r is the HTTP response record.
name
name is the name of the response header to retrieve.
value
value is the value of the response header.
n
n is the nth header of the HTTP response record to retrieve according to the
values specified by name. The default is 1.
Examples
The following example retrieves the header for Content-Type.
DECLARE
v_req UTL_HTTP.REQ;
v_resp UTL_HTTP.RESP;
v_name VARCHAR2(30) := 'Content-Type';
v_value VARCHAR2(200);
BEGIN
v_req := UTL_HTTP.BEGIN_REQUEST('www.enterprisedb.com');