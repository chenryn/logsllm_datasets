### Employee Salary and Commission Details

| Employee ID | Name        | Position   | Salary  | Commission |
|-------------|-------------|------------|---------|------------|
| 7521        | WARD, SALESMAN | $1250.00   | $500.00 |
| 7566        | JONES, MANAGER | $2975.00   | $0.00   |
| 7654        | MARTIN, SALESMAN | $1250.00  | $1400.00 |
| 7698        | BLAKE, MANAGER | $2850.00   | $0.00   |
| 7782        | CLARK, MANAGER | $2450.00   | $0.00   |
| 7788        | SCOTT, ANALYST | $3000.00   | $0.00   |
| 7839        | KING, PRESIDENT | $5000.00  | $0.00   |
| 7844        | TURNER, SALESMAN | $1500.00  | $0.00   |
| 7876        | ADAMS, CLERK | $1100.00    | $0.00   |
| 7900        | JAMES, CLERK | $950.00     | $0.00   |
| 7902        | FORD, ANALYST | $3000.00   | $0.00   |
| 7934        | MILLER, CLERK | $1300.00   | $0.00   |

---

## UTL_HTTP Package

The `UTL_HTTP` package provides a way to use the HTTP or HTTPS protocol to retrieve information from a URL. The following functions and procedures are supported in Advanced Server:

### Functions and Procedures

| Function/Procedure                     | Return Type  | Description                                                                 |
|----------------------------------------|--------------|-----------------------------------------------------------------------------|
| `BEGIN_REQUEST(url, method, http_version)` | `UTL_HTTP.REQ` | Initiates a new HTTP request.                                               |
| `END_REQUEST(r IN OUT)`                | `n/a`        | Ends an HTTP request before allowing it to complete.                        |
| `END_RESPONSE(r IN OUT)`               | `n/a`        | Ends the HTTP response.                                                     |
| `GET_BODY_CHARSET`                      | `VARCHAR2`   | Returns the default character set of the body of future HTTP requests.      |
| `GET_BODY_CHARSET(charset OUT)`        | `n/a`        | Sets the default character set of the body of future HTTP requests.         |
| `GET_FOLLOW_REDIRECT(max_redirects OUT)` | `n/a`        | Returns the current setting for the maximum number of redirections allowed. |
| `GET_HEADER(r IN OUT, n, name OUT, value OUT)` | `n/a` | Returns the nth header of the HTTP response.                                |
| `GET_HEADER_BY_NAME(r IN OUT, name, value OUT, n)` | `n/a` | Returns the HTTP response header for the specified name.                    |
| `GET_HEADER_COUNT(r IN OUT)`           | `INTEGER`    | Returns the number of HTTP response headers.                                |
| `GET_RESPONSE(r IN OUT)`               | `UTL_HTTP.RESP` | Returns the HTTP response.                                                  |
| `GET_RESPONSE_ERROR_CHECK(enable OUT)` | `n/a`        | Returns whether or not response error check is set.                         |
| `GET_TRANSFER_TIMEOUT(timeout OUT)`    | `n/a`        | Returns the transfer timeout setting for HTTP requests.                     |
| `READ_LINE(r IN OUT, data OUT, remove_crlf)` | `n/a` | Returns the HTTP response body in text form until the end of line.          |
| `READ_RAW(r IN OUT, data OUT, len)`    | `n/a`        | Returns the HTTP response body in binary form for a specified number of bytes. |
| `READ_TEXT(r IN OUT, data OUT, len)`   | `n/a`        | Returns the HTTP response body in text form for a specified number of characters. |
| `REQUEST(url)`                         | `VARCHAR2`   | Returns the content of a web page.                                          |
| `REQUEST_PIECES(url, max_pieces)`      | `UTL_HTTP.HTML_PIECES` | Returns a table of 2000-byte segments retrieved from an URL.              |
| `SET_BODY_CHARSET(charset)`            | `n/a`        | Sets the default character set of the body of future HTTP requests.         |
| `SET_FOLLOW_REDIRECT(max_redirects)`   | `n/a`        | Sets the maximum number of times to follow the redirect instruction.         |
| `SET_FOLLOW_REDIRECT(r IN OUT, max_redirects)` | `n/a` | Sets the maximum number of times to follow the redirect instruction for an individual request. |
| `SET_HEADER(r IN OUT, name, value)`    | `n/a`        | Sets the HTTP request header.                                               |
| `SET_RESPONSE_ERROR_CHECK(enable)`     | `n/a`        | Determines whether or not HTTP 4xx and 5xx status codes are to be treated as errors. |
| `SET_TRANSFER_TIMEOUT(timeout)`        | `n/a`        | Sets the default transfer timeout value for HTTP requests.                  |
| `SET_TRANSFER_TIMEOUT(r IN OUT, timeout)` | `n/a` | Sets the transfer timeout value for an individual HTTP request.             |
| `WRITE_LINE(r IN OUT, data)`           | `n/a`        | Writes CRLF terminated data to the HTTP request body in TEXT form.          |
| `WRITE_RAW(r IN OUT, data)`            | `n/a`        | Writes data to the HTTP request body in BINARY form.                        |
| `WRITE_TEXT(r IN OUT, data)`           | `n/a`        | Writes data to the HTTP request body in TEXT form.                          |

### Notes on Implementation

- **HTTP Response Handling**: In Advanced Server, an HTTP 4xx or HTTP 5xx response produces a database error. In Oracle, this is configurable but defaults to `FALSE`.
- **Text Interfaces**: In Advanced Server, the UTL_HTTP text interfaces expect the downloaded data to be in the database encoding. All currently-available interfaces are text interfaces. In Oracle, the encoding is detected from HTTP headers; in the absence of the header, the default is configurable and defaults to ISO-8859-1.
- **Cookies**: Advanced Server ignores all cookies it receives.
- **Exceptions and Error Codes**: The UTL_HTTP exceptions that can be raised in Oracle are not recognized by Advanced Server. Additionally, the error codes returned by Advanced Server differ from those returned by Oracle.

### Public Constants

#### HTTP Versions and Port Assignments

- `HTTP_VERSION_1_0`: `VARCHAR2(64) := 'HTTP/1.0'`
- `HTTP_VERSION_1_1`: `VARCHAR2(64) := 'HTTP/1.1'`
- `DEFAULT_HTTP_PORT`: `INTEGER := 80`
- `DEFAULT_HTTPS_PORT`: `INTEGER := 443`

#### HTTP Status Code Constants

- **1XX Informational**
  - `HTTP_CONTINUE`: `INTEGER := 100`
  - `HTTP_SWITCHING_PROTOCOLS`: `INTEGER := 101`
  - `HTTP_PROCESSING`: `INTEGER := 102`

- **2XX Success**
  - `HTTP_OK`: `INTEGER := 200`
  - `HTTP_CREATED`: `INTEGER := 201`
  - `HTTP_ACCEPTED`: `INTEGER := 202`
  - `HTTP_NON_AUTHORITATIVE_INFO`: `INTEGER := 203`
  - `HTTP_NO_CONTENT`: `INTEGER := 204`
  - `HTTP_RESET_CONTENT`: `INTEGER := 205`
  - `HTTP_PARTIAL_CONTENT`: `INTEGER := 206`
  - `HTTP_MULTI_STATUS`: `INTEGER := 207`
  - `HTTP_ALREADY_REPORTED`: `INTEGER := 208`
  - `HTTP_IM_USED`: `INTEGER := 226`

- **3XX Redirection**
  - `HTTP_MULTIPLE_CHOICES`: `INTEGER := 300`
  - `HTTP_MOVED_PERMANENTLY`: `INTEGER := 301`
  - `HTTP_FOUND`: `INTEGER := 302`
  - `HTTP_SEE_OTHER`: `INTEGER := 303`
  - `HTTP_NOT_MODIFIED`: `INTEGER := 304`
  - `HTTP_USE_PROXY`: `INTEGER := 305`
  - `HTTP_SWITCH_PROXY`: `INTEGER := 306`
  - `HTTP_TEMPORARY_REDIRECT`: `INTEGER := 307`
  - `HTTP_PERMANENT_REDIRECT`: `INTEGER := 308`

- **4XX Client Error**
  - `HTTP_BAD_REQUEST`: `INTEGER := 400`
  - `HTTP_UNAUTHORIZED`: `INTEGER := 401`
  - `HTTP_PAYMENT_REQUIRED`: `INTEGER := 402`
  - `HTTP_FORBIDDEN`: `INTEGER := 403`
  - `HTTP_NOT_FOUND`: `INTEGER := 404`
  - `HTTP_METHOD_NOT_ALLOWED`: `INTEGER := 405`
  - `HTTP_NOT_ACCEPTABLE`: `INTEGER := 406`
  - `HTTP_PROXY_AUTH_REQUIRED`: `INTEGER := 407`
  - `HTTP_REQUEST_TIME_OUT`: `INTEGER := 408`
  - `HTTP_CONFLICT`: `INTEGER := 409`
  - `HTTP_GONE`: `INTEGER := 410`
  - `HTTP_LENGTH_REQUIRED`: `INTEGER := 411`
  - `HTTP_PRECONDITION_FAILED`: `INTEGER := 412`
  - `HTTP_REQUEST_ENTITY_TOO_LARGE`: `INTEGER := 413`
  - `HTTP_REQUEST_URI_TOO_LARGE`: `INTEGER := 414`
  - `HTTP_UNSUPPORTED_MEDIA_TYPE`: `INTEGER := 415`
  - `HTTP_REQ_RANGE_NOT_SATISFIABLE`: `INTEGER := 416`
  - `HTTP_EXPECTATION_FAILED`: `INTEGER := 417`
  - `HTTP_I_AM_A_TEAPOT`: `INTEGER := 418`
  - `HTTP_AUTHENTICATION_TIME_OUT`: `INTEGER := 419`
  - `HTTP_ENHANCE_YOUR_CALM`: `INTEGER := 420`
  - `HTTP_UNPROCESSABLE_ENTITY`: `INTEGER := 422`
  - `HTTP_LOCKED`: `INTEGER := 423`
  - `HTTP_FAILED_DEPENDENCY`: `INTEGER := 424`
  - `HTTP_UNORDERED_COLLECTION`: `INTEGER := 425`
  - `HTTP_UPGRADE_REQUIRED`: `INTEGER := 426`
  - `HTTP_PRECONDITION_REQUIRED`: `INTEGER := 428`
  - `HTTP_TOO_MANY_REQUESTS`: `INTEGER := 429`
  - `HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE`: `INTEGER := 431`
  - `HTTP_NO_RESPONSE`: `INTEGER := 444`
  - `HTTP_RETRY_WITH`: `INTEGER := 449`
  - `HTTP_BLOCKED_BY_WINDOWS_PARENTAL_CONTROLS`: `INTEGER := 450`
  - `HTTP_REDIRECT`: `INTEGER := 451`
  - `HTTP_REQUEST_HEADER_TOO_LARGE`: `INTEGER := 494`
  - `HTTP_CERT_ERROR`: `INTEGER := 495`
  - `HTTP_NO_CERT`: `INTEGER := 496`
  - `HTTP_HTTP_TO_HTTPS`: `INTEGER := 497`
  - `HTTP_CLIENT_CLOSED_REQUEST`: `INTEGER := 499`

- **5XX Server Error**
  - `HTTP_INTERNAL_SERVER_ERROR`: `INTEGER := 500`
  - `HTTP_NOT_IMPLEMENTED`: `INTEGER := 501`
  - `HTTP_BAD_GATEWAY`: `INTEGER := 502`
  - `HTTP_SERVICE_UNAVAILABLE`: `INTEGER := 503`
  - `HTTP_GATEWAY_TIME_OUT`: `INTEGER := 504`
  - `HTTP_VERSION_NOT_SUPPORTED`: `INTEGER := 505`
  - `HTTP_VARIANT_ALSO_NEGOTIATES`: `INTEGER := 506`
  - `HTTP_INSUFFICIENT_STORAGE`: `INTEGER := 507`
  - `HTTP_LOOP_DETECTED`: `INTEGER := 508`
  - `HTTP_BANDWIDTH_LIMIT_EXCEEDED`: `INTEGER := 509`
  - `HTTP_NOT_EXTENDED`: `INTEGER := 510`
  - `HTTP_NETWORK_AUTHENTICATION_REQUIRED`: `INTEGER := 511`
  - `HTTP_NETWORK_READ_TIME_OUT_ERROR`: `INTEGER := 598`
  - `HTTP_NETWORK_CONNECT_TIME_OUT_ERROR`: `INTEGER := 599`

### Record Types

#### HTML_PIECES
- **Type Definition**:
  ```sql
  TYPE html_pieces IS TABLE OF VARCHAR2(2000) INDEX BY BINARY_INTEGER;
  ```

#### REQ
- **Record Type**:
  ```sql
  TYPE req IS RECORD (
    url VARCHAR2(32767), -- URL to be accessed
    method VARCHAR2(64), -- HTTP method
    http_version VARCHAR2(64), -- HTTP version
    private_hndl INTEGER -- Holds handle for this request
  );
  ```

#### RESP
- **Record Type**:
  ```sql
  TYPE resp IS RECORD (
    status_code INTEGER, -- HTTP status code
    reason_phrase VARCHAR2(256), -- HTTP response reason phrase
    http_version VARCHAR2(64), -- HTTP version
    private_hndl INTEGER -- Holds handle for this response
  );
  ```

### Example Usage

#### GET_BODY_CHARSET
```sql
SELECT UTL_HTTP.GET_BODY_CHARSET() FROM DUAL;
```

#### GET_HEADER
```sql
DECLARE
  v_req UTL_HTTP.REQ;
  v_resp UTL_HTTP.RESP;
  v_name VARCHAR2(30);
  v_value VARCHAR2(200);
  v_header_cnt INTEGER;
BEGIN
  -- Initiate request and get response
  v_req := UTL_HTTP.BEGIN_REQUEST('www.enterprisedb.com');
  v_resp := UTL_HTTP.GET_RESPONSE(v_req);

  -- Get header count
  v_header_cnt := UTL_HTTP.GET_HEADER_COUNT(v_resp);
  DBMS_OUTPUT.PUT_LINE('Header Count: ' || v_header_cnt);

  -- Get all headers
  FOR i IN 1 .. v_header_cnt LOOP
    UTL_HTTP.GET_HEADER(v_resp, i, v_name, v_value);
    DBMS_OUTPUT.PUT_LINE(v_name || ': ' || v_value);
  END LOOP;

  -- Terminate request
  UTL_HTTP.END_RESPONSE(v_resp);
END;
```

#### GET_HEADER_BY_NAME
```sql
DECLARE
  v_req UTL_HTTP.REQ;
  v_resp UTL_HTTP.RESP;
  v_name VARCHAR2(30) := 'Content-Type';
  v_value VARCHAR2(200);
BEGIN
  v_req := UTL_HTTP.BEGIN_REQUEST('www.enterprisedb.com');
  v_resp := UTL_HTTP.GET_RESPONSE(v_req);

  UTL_HTTP.GET_HEADER_BY_NAME(v_resp, v_name, v_value);
  DBMS_OUTPUT.PUT_LINE(v_name || ': ' || v_value);

  UTL_HTTP.END_RESPONSE(v_resp);
END;
```

---

Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved.