malicious ﬁle from the server and its follow-up logic may depend
on the download success. However, if the malware execution does
not capture the malware using such ﬁle in the limited monitoring
time, AUTOPROBE may directly treat any server hosting this ﬁle
as malicious. The root cause of such false positive/negative is a
fundamental limitation of dynamic analysis:
it can only observe
behaviors executed. To improve and provide more accurate result,
we should provide longer analysis time and improve code coverage.
Malware checks on responses. Our classiﬁcation function
construction assumes that the malware will behave differently when
receiving valid and invalid responses from remote servers. If the
malware violates this assumption, i.e., performs no checks or only
cursory checks on the responses, the generated ﬁngerprints may
produce false positives when probing benign servers. However, this
situation does not arise in our examples and we believe it is unlikely
as it would be extremely easy to inﬁltrate such C&C protocol.
Classiﬁcation function through code reuse. The classiﬁcation
function produced by AUTOPROBE is a logic expression applied
on the response or the output of a parser on the response. Those
expressions are difﬁcult to extract if the variables follow non-
linear relations.
In those cases we could apply binary code
reuse techniques [5, 20] to directly (re)use the malware’s reponse
handling code. In the extreme case, AUTOPROBE could rerun the
malware in the controlled environment on the responses received
from target servers. Obviously, such approaches are expensive,
so they are better used only when our current approach cannot
determine a symbolic expression.
Semantics-guided fuzzing. The ﬁngerprints produced by AU-
TOPROBE use valid probes that satisfy the C&C protocol grammar
because the probe construction functions that generate them have
been extracted from the malware’s request generation logic. How-
ever, for some families it may be possible to generate additional
ﬁngerprints using invalid probes that do not satisfy the C&C
grammar but still trigger a distinctive response from the C&C
servers. Invalid probes are easier to be identiﬁed by the C&C server
managers but may be useful when the C&C masks as a benign
protocol. When a live C&C server is known, AUTOPROBE could be
enhanced with a semantics-guided fuzzing approach that uses the
semantic information extracted during probe generation to modify
valid probes into invalid and test them against the C&C server.
Dynamic analysis limitations. The dynamic analysis tech-
niques used by AUTOPROBE are known to have some limita-
tions.
For example, dynamic taint analysis is known to be
vulnerable to over-tainting and under-tainting [33], which may
introduce inaccuracies in our detection of variable parts during
probe generation. Similarly, symbolic execution is challenging in
the presence of complex loops [32] and implicit ﬂows [18], and
may explore unreachable paths [33]. We admit all these issues can
affect the performance of AUTOPROBE. However, these issues
are not speciﬁc to AUTOPROBE and affect in some degree all
dynamic analysis solutions. More importantly, AUTOPROBE takes
steps to minimize the effect of those challenges. For example,
AUTOPROBE does not need to analyze the complete malware logic
but only its request generation and response handlig logic.
It
can conﬁrm that paths build requests by monitoring that indeed a
request is observed on the network. Furthermore, even if dynamic
analysis marks some request parts as variable, AUTOPROBE still
does backward slicing on those bytes verifying that they are indeed
generated from the output of system/API calls. Clearly, any future
advances in dynamic binary analysis will also beneﬁt our approach.
Handling encrypted trafﬁc. In the evaluation, we ﬁnd around
30% malware samples use encoded packets to communicate with
their remote servers. While in current AUTOPROBE we do no
decode these encrypted trafﬁc (a common research challenge in
this area, and out of the scope of this paper), AUTOPROBE can
observe malware’s logic of handling correctly-encoded response
and incorrectly-encoded response. In particular, we can generate
some random response packet and record the malware execution
path, which represents malware’s logic of handling invalid packet.
If any response packet deviates malware’s execution from this path,
we think the source of the packet is likely suspicious.
Other possible evasions. Among possible evasions, one is to
use some existing exploits as the client request. AUTOPROBE needs
to ﬁlter out all the requests that exploit remote servers and malware
authors could use that to prevent being tampered by AUTOPROBE.
However, using exploits for remote communication increases the
probability of being detected by existing IDS systems. Another
possible evasion is to use coordinated servers since AUTOPROBE
ID
AP-1
AP-2
AP-3
AP-4
AP-5
Scan Date
2013-11-06
2013-11-06
2013-11-08
2014-02-23
2014-02-23
Port
Fingerprint
80
Sality
80
Taidoor
80
Bamital
80 Vidgrab
80 Horst
SC
5
5
5
5
5
Time
12.1h
13.2h
12.6h
13.4h
13.9h
Resp.
90%
91%
92%
94%
94%
Found Known New
20
10
10
15
11
66
23
14
11
21
13
82
3
4
1
6
2
16
VT MD UQ
0
1
0
2
2
0
0
3
0
2
8
0
0
1
0
1
1
3
AUTOPROBE TOTALS:
Table 6: Additional 5 scanning results of AUTOPROBE for NoResponse cases.
does not correlate trafﬁc to different servers. Malware authors
may allow one server to receive a request, forward it to another
server, and allow the other server to issue commands. This scheme
deﬁnitely increases the maintenance cost for botmasters. Some
existing IDS systems such as BotHunter [15] could complement
AUTOPROBE in some situations.
8. RELATED WORK
Research on Internet-wide probing. Scanning the internet is
one way to ﬁnd large-scale network-level vulnerabilities. Provos et
al. scanned Internet to identify vulnerable SSH servers through
vulnerability signatures [29]. Dagon et al.
[11] scanned DNS
servers on Internet to ﬁnd those providing incorrect resolutions.
Heninger et al.
[16] scanned the Internet to ﬁnd network devices
with weak cryptographic keys. All these studies apply some
widely-known signatures to achieve the purpose.
Different from them, active probing to detect network-based
malware has been proposed in several previous work [3, 14, 25, 28,
41]. In [14], Gu et al. proposed to actively send probing packets
through IRC channels. Zmap [12] is another internet-wide scanner
which is efﬁcient enough to scan the whole internet in less than 45
minutes. However, it targets to test the aliveness of remote hosts
instead of detecting possible malicious servers.
PeerPress [41] is one related work that also adopts dynamic
malware analysis to ﬁnd P2P malware’s network ﬁngerprints.
Nevertheless, as we have stated the difference earlier, the target
of such probing is on the malware samples that actively open the
port for communication, such as P2P malware and Trojan Horse.
AUTOPROBE targets at remote malicious servers and we assume
the server-side logic is not available for analysis in collected
binaries, a different assumption from PeerPress.
Research on network ﬁngerprint generation. Fingerprinting
network applications is a widely studied topic. Botzilla [31] is a
method for detecting malware communication through repetitively
recording network trafﬁc of malware in a controlled environment
and generating network signatures from invariant content pat-
terns. AUTOPROBE has a different goal of ﬁngerprinting malicious
servers and adopts binary-level analysis to ﬁnd the invariant part in
packets.
FiG [7] proposed a framework for automatic ﬁngerprint genera-
tion that produces OS and DNS ﬁngerprints from network trafﬁc.
In contrast, AUTOPROBE applies a different approach for automatic
ﬁngerprint generation that takes as input a malware sample and
applies dynamic binary analysis on the malware’s execution.
Research on malware binary analysis. There are multiple
existing studies that discuss effective and efﬁcient techniques for
malware analysis. Such techniques include taint analysis [19, 26],
enforced execution [38], path exploration [24], program slicing [5],
symbolic execution [37] and trace alignment [17]. AUTOPROBE
applies many of these techniques in our new problem domain in a
novel way to automatically generate network ﬁngerprints.
Among all studies on binary analysis, protocol reverse engi-
neering work, such as [8–10, 21, 39], is also closely related to
AUTOPROBE. We adopt similar approach as in [6] to ﬁgure
out the semantics meanings of malware’s request. However,
one difference between AUTOPROBE and existing work is that
AUTOPROBE does not attempt to understand the complete protocol
of malware’s communication, and AUTOPROBE uses many other
different techniques to aid the generation of ﬁngerprints.
In short, the above studies are complementary to our work.
AUTOPROBE will greatly beneﬁt from the advances in these ﬁelds.
9. CONCLUSION
In this paper, we present AUTOPROBE, a novel tool to gener-
ate active probing ﬁngerprints for Internet-wide malicious server
detection. AUTOPROBE implements a novel dynamic analysis
approach to improve the effectiveness and efﬁciency of existing
work. The dynamic analysis can help expose more requests,
build a classiﬁcation function on a server’s response based on
the malware validation checks, and assist in efﬁcient detection.
Furthermore, AUTOPROBE proposes new solutions for some real-
world challenges such as generating ﬁngeprints when no live C&C
server is known. We also show that AUTOPROBE can generate
more accurate network ﬁngerprints for malicious servers probing.
In our extensive Internet-scale scanning, AUTOPROBE outperforms
the existing state-of-the-art system in discovering more malicious
servers.
10. ACKNOWLEDGMENTS
The authors would like to especially thank the system admin-
istrators at their respective institutions. We also thank Zakir
Durumeric and J. Alex Halderman, as well as VirusTotal, Malware
Domain List, and URLQuery. This material is based upon work
supported in part by the National Science Foundation under Grant
CNS-0954096 and the Air Force Ofﬁce of Scientiﬁc Research
under Grant FA9550-13-1-0077. This research is also partially sup-
ported by the Spanish Government through Grant TIN2012-39391-
C04-01 and a Juan de la Cierva Fellowship for Juan Caballero. Any
opinions, ﬁndings, and conclusions or recommendations expressed
in this material are those of the authors and do not necessarily
reﬂect the views of the sponsors.
11. REFERENCES
[1] Dirtjumper. http:
//www.infonomics-society.org/IJICR/DirtJumper.
[2] Alexa Top Domains. http://www.alexa.com/.
[3] Oﬁr Arkin. A remote active os ﬁngerprinting tool using icmp. ;login:
The USENIX Magazine, 27(2), November 2008.
[4] Bamital Malware.
https://now-static.norton.com/now/en/pu/
images/Promotions/2013/Bamital/bamital.html.
[5] Juan Caballero, Noah M. Johnson, Stephen McCamant, and Dawn
Song. Binary code extraction and interface identiﬁcation for security
applications. In Network and Distributed System Security
Symposium, San Diego, CA, February 2010.
[6] Juan Caballero, Pongsin Poosankam, Christian Kreibich, and Dawn
Song. Dispatcher: Enabling active botnet inﬁltration using automatic
protocol reverse-engineering. In ACM Conference on Computer and
Communications Security, Chicago, IL, November 2009.
[7] Juan Caballero, Shobha Venkataraman, Pongsin Poosankam, Min G.
Kang, Dawn Song, and Avrim Blum. ﬁg: Automatic ﬁngerprint
generation. In Network and Distributed System Security Symposium,
San Diego, CA, February 2007.
[8] Juan Caballero, Heng Yin, Zhenkai Liang, and Dawn Song. Polyglot:
Automatic extraction of protocol message format using dynamic
binary analysis. In ACM Conference on Computer and
Communications Security, Alexandria, VA, October 2007.
[9] Paolo Milani Comparetti, Gilbert Wondracek, Christopher Kruegel,
and Engin Kirda. Prospex: Protocol speciﬁcation extraction. In IEEE
Symposium on Security and Privacy, Oakland, CA, May 2009.
[10] Weidong Cui, Jayanthkumar Kannan, and Helen J. Wang.
Discoverer: Automatic protocol description generation from network
traces. In USENIX Security Symposium, Boston, MA, August 2007.
[11] David Dagon, Chris Lee, Wenke Lee, and Niels Provos. Corrupted
dns resolution paths: The rise of a malicious resolution authority. In
Network and Distributed System Security Symposium, San Diego,
CA, February 2008.
[12] Zakir Durumeric, Eric Wustrow, and J. Alex Halderman. Zmap: Fast
internet-wide scanning and its security applications. In Usenix
Security Symposium, August 2013.
[13] Nicolas Falliere. Sality: Story of a peer-to-peer viral network.
Technical report, 2011.
[14] Guofei Gu, Vinod Yegneswaran, Phillip Porras, Jennifer Stoll, and
Wenke Lee. Active botnet probing to identify obscure command and
control channels. In Proceedings of 2009 Annual Computer Security
Applications Conference (ACSAC’09), December 2009.
[15] Guofei Gu, Junjie Zhang, and Wenke Lee. BotHunter: Detecting
Malware Infection Through IDS-Driven Dialog Correlation. In
Proceedings of USENIX Security’07, 2007.
[16] Nadia Heninger, Zagir Durumeric, Eric Wustrow, and J.Alex
Halderman. Mining your ps and qs: Detection of widespread weak
keys in network devices. In USENIX Security Symposium, 2012.
[17] Noah M. Johnson, Juan Caballero, Kevin Zhijie Chen, Stephen
McCamant, Pongsin Poosankam, Daniel Reynaud, and Dawn Song.
Differential slicing: Identifying causal execution differences for
security applications. In Proceedings of the 2011 IEEE Symposium
on Security and Privacy, 2011.
[18] Min Gyung Kang, Stephen McCamant, Pongsin Poosankam, and
Dawn Song. DTA++: Dynamic taint analysis with targeted
control-ﬂow propagation. In Proceedings of the 18th Annual Network
and Distributed System Security Symposium, San Diego, CA,
February 2011.
[19] Clemens Kolbitsch, Paolo Milani Comparetti, Christopher Kruegel,
Engin Kirda, Xiaoyong Zhou, and Xiaofeng Wang. Effective and
efﬁcient malware detection at the end host. In USENIX Security
Symposium, Montréal, Canada, August 2009.
[20] Clemens Kolbitsch, Thorsten Holz, Christopher Kruegel, and Engin
Kirda. Inspector gadget: Automated extraction of proprietary gadgets
from malware binaries. In IEEE Symposium on Security and Privacy,
Oakland, CA, May 2010.
[21] Zhiqiang Lin, Xuxian Jiang, Dongyan Xu, and Xiangyu Zhang.
Automatic protocol format reverse engineering through
context-aware monitored execution. In Network and Distributed
System Security Symposium, San Diego, CA, February 2008.
[22] Malicia. http://malicia-project.com/.
http://malicia-project.com/.
[23] Malware domain list. http://malwaredomainlist.com/.
[24] Andreas Moser, Christopher Kruegel, and Engin Kirda. Exploring
Multiple Execution Paths for Malware Analysis. In Proceedings of
IEEE Symposium on Security and Privacy, 2007.
[25] Antonio Nappa, Zhaoyan Xu, M. Zubair Raﬁque, Juan Caballero,
and Guofei Gu. Cyberprobe: Towards internet-scale active detection
of malicious servers. In Network and Distributed System Security
Symposium, 2014.
[26] James Newsome and Dawn Song. Dynamic taint analysis for
automatic detection, analysis, and signature generation of exploits on
commodity software. In Network and Distributed System Security
Symposium, San Diego, CA, February 2005.
[27] Offensive Computing. http://www.offensivecomputing.net/.
http://www.offensivecomputing.net/.
[28] Jitendra Padhye and Sally Floyd. Identifying the tcp behavior of web
servers. In SIGCOMM Conference, San Diego, CA, August 2001.
[29] Niels Provos and Peter Honeyman. Scanssh - scanning the internet
for ssh servers. In Technical Report CITI TR 01-13, University of
Michigan, October 2001.
[30] Ramnit Malware.
http://en.wikipedia.org/wiki/Ramnit.
[31] Konrad Rieck, Guido Schwenk, Tobias Limmer, Thorsten Holz, and
Pavel Laskov. Botzilla: Detecting the phoning home of malicious
software. In ACM Symposium on Applied Computing, 2010.
[32] Prateek Saxena, Pongsin Poosankam, Stephen McCamant, and Dawn
Song. Loop-extended symbolic execution on binary programs. In
Proceedings of the ACM/SIGSOFT International Symposium on
Software Testing and Analysis (ISSTA), 2009.
[33] Edward J. Schwartz, Thanassis Avgerinos, and David Brumley. All
you ever wanted to know about dynamic taint analysis and forward
symbolic execution (but might have been afraid to ask). In
Proceedings of IEEE Symposium on Security and Privacy, 2010.
[34] Taidoor Malware. Xpaj.b malware.
http://www.trendmicro.com/cloud-content/us/
pdfs/security-intelligence/white-papers/wp_
the_taidoor_campaign.pdf.
[35] Urlquery. http://urlquery.net/.
[36] Virustotal. http://www.virustotal.com/.
[37] Tielei Wang, Tao Wei, Guofei Gu, and Wei Zou. Taintscope: A
checksum-aware directed fuzzing tool for automatic software
vulnerability detection. In Proc. of IEEE S&P’10, 2010.
[38] Jeffrey Wilhelm and Tzi cker Chiueh. A forced sampled execution
approach to kernel rootkit identiﬁcation. In Proceedings of the 10th
international conference on Recent advances in intrusion detection,
2007.
[39] Gilbert Wondracek, Paolo Milani Comparetti, Christopher Kruegel,
and Engin Kirda. Automatic network protocol analysis. In
Proceedings of the 15th Annual Network and Distributed System
Security Symposium (NDSS), 2008.
[40] James Wyke. The zeroaccess botnet: Mining and fraud for massive
ﬁnancial gain, September 2012. http:
//www.sophos.com/en-us/why-sophos/our-people/
technical-papers/zeroaccess-botnet.asp:x.
[41] Zhaoyan Xu, Lingfeng Chen, Guofei Gu, and Christopher Kruegel.
Peerpress: Utilizing enemies’ p2p strength against them. In ACM
Conference on Computer and Communications Security, Raleigh,
NC, October 2012.