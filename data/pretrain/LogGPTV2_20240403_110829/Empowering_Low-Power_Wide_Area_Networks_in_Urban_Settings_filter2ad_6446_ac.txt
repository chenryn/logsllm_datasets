lem. This method estimates and extracts signals of the strongest
transmitter from the collision, and repeats this process for the sec-
ond strongest transmitter, and so on, until no transmitters remain.
However, this approach fails to eliminate leakage between a set of
transmitters of similar power levels. In contrast, our approach to
model and eliminate leakage as in Sec. 5.1 above gets rid of inter-
ference between transmitters, but is susceptible to missing weak
clients altogether.
Our approach therefore strives to strike a balance between mod-
eling leakage and recovering weak clients to get the best of both
worlds. We rely on the fact that while interference from strong
transmitters to weaker ones (and to each other) is likely to be high,
the opposite is unlikely to be true. This leads us to apply successive
interference cancellation in phases, as opposed to one transmitter
at a time. Specifically, our approach first measures frequency offset
and channels of all the strong transmitters whose peaks are dis-
cernible simultaneously, as explained in Sec. 5.1 above. We then
subtract the signals of these transmitters from our received signal
to eliminate interference to any weaker clients whose peaks were
overwhelmed by these transmitters.
We note that our approach, like traditional outdoor networks, is
always limited by the resolution of the analog-to-digital converter.
As a result, extremely weak transmitters are likely to be missed
if they are not registered by the analog components. We discuss
extending communication range for such transmitters in Sec. 7.
Decoding Data from Collisions: Next, we note that once the
wireless channels and frequency offsets are estimated, decoding
data is extremely simple. Specifically, consider collisions of two
transmitters synchronized in time whose data as well as preamble
symbols collide. We first estimate the peak locations, i.e. frequency
offsets, ˜f1 and ˜f2 averaged across each symbol of the preamble. We
then repeat this process for the data symbol, where peak locations
are given by d1 + ˜f1 and d2 + ˜f2, a sum of both the frequency offsets
and the data (d1, d2). One can then subtract the known frequency
offset from these values to obtain the data. Further, one can use the
fractional part of the frequency offset (see Sec. 4) to infer which of
these data bits maps to which user across symbols. In Sec. 6 below,
we elaborate how timing and phase offsets can further be used to
achieve this mapping accurately.
Finally, five additional points are worth noting: (1) Our system re-
lies on frequency offsets of LP-WAN radios to remain stable within
a packet (∼ 10 ms) but diverse across clients, owing to hardware
differences. Our results in Sec. 9.1 show that this is indeed the case
across a large number of LoRaWAN boards. While LoRaWAN is
the only available LP-WAN platform in the U.S. today, we expect
competing technologies to have similar characteristics, given that
they use similar inexpensive components [31]. (2) While the above
approach is tied to LoRaWAN’s chirp-based PHY, the notion of
using frequency offsets to separate transmissions broadly applies
to other LP-WAN technologies such as NB-IoT [34] and SigFox [31].
Indeed, given that these technologies use an ultra-narrowband PHY,
Figure 4: Residual Function: Depicts the residual function for a represen-
tative trace with two colliding clients. The function is locally convex.
form as shown below:
[˜h1 ˜h2] = (ET E)
−1ET yC−1 ,where, E = [ej2π ˜f1t ej2π ˜f2t]
(2)
We can then estimate the goodness of fit of the estimated fre-
quency offset from the observed values by capturing how well the
above channels fit the received signal. Specifically, we measure the
difference between the received signal and the reconstructed signal
based on ˜f1, ˜f2 as
R( ˜f1, ˜f2) = ||yC−1 − ( ˜h1ej2π ˜f1t + ˜h2ej2π ˜f2t )||2
(3)
Clearly, from Eqn. 1 and Eqn. 3 above, the residual R( ˜f1, ˜f2) will
be minimized when ˜f1 = f1 and ˜f2 = f2. Our solution therefore
re-estimates the above residual for frequency offsets in the neigh-
borhood of ˜f1 and ˜f2, and identifies the offsets at which the residual
is minimized. Namely, we compute the updated frequency offsets
¯f1 and ¯f2 via
(¯f1, ¯f2) = arg
min
(f1∈( ˜f1−∆, ˜f1+∆),f2∈( ˜f1−∆,˜f2+∆))
R(f1, f2)
(4)
where ∆ is the bin-size of the FFT. Repeating the above steps exhaus-
tively over all frequency offsets can be computationally expensive.
However, in practice, the residual function R(f1, f2) is locally convex,
allowing for more efficient search strategies. Intuitively, the local
convexity stems from the fact that wireless channels themselves
are physical phenomena and therefore tend to be continuous and
differentiable. To illustrate, Fig. 4 plots a representative example of
the residual function for a collision of two LoRaWAN transmitters
from our experiments in Sec. 9. This allows us to apply stochas-
tic gradient-descent algorithms [29] on the residual function with
randomly chosen initial points that are likely to converge to the
global minimum. Algm. 1 provides the pseudo-code of our approach.
We note that while the discussion above focuses on two colliding
transmitters, it can be readily generalized to multiple collisions.
5.2 Accounting for the Near-Far Effect
While the previous discussion assumes that one can obtain a coarse
estimate of the frequency offset by detecting peaks in the Fourier
transform, this is often not the case. Consider teams of colliding
clients where some are physically closer to the base station com-
pared to others. The nearby users will have clear peaks that are
readily discernible from the Fourier transform. The further away
users, however, may have significantly weaker peaks that are com-
parable to the side-lobes of the nearby transmitters. Indeed, it is
314
Empowering Low-Power Wide Area Networks in Urban Settings
SIGCOMM ’17, August 21–25, 2017, Los Angeles, CA, USA
we expect their bandwidth to be far lower than frequency offset
that allows filtering their transmissions based on hardware offsets
significantly simpler. It is worth noting, however, that timing offsets
do no necessarily map to frequency offsets in these technologies,
thus Choir would have to be modified in accordance. (3) While our
system allows collisions from multiple transmitters to be decoded,
its gains are not unbounded. Gains are limited by noise and the
possibility of overlapping frequency offsets that increases with col-
lisions from a larger number of transmitters. Our results in Sec. 9.2
measures the scaling limits of Choir. (4) The current implementa-
tion of LoRaWAN allows simultaneous decoding of collided data
packets that were transmitted across different orthogonal spreading
factors. Such a feature is made possible due to the orthogonality
of the chirps associated with the different spreading factors. In
particular, a packet transmitted at a given spreading factor can only
be demodulated with a unique chirp associated with this spreading
factor. This form of diversity improves the overall data rate as it
allows parallel decoding of collided data packets. Choir considers
the extreme case of a congested network utilizing a single spreading
factor, and a single antenna. However, Choir can indeed benefit
from i) a base station utilizing multiple antennas (see Sec. 9.5), or ii)
a network employing different spreading factors. In particular, con-
sider 5 LP-WAN sensors simultaneously transmitting data packets
with spreading factors 7, 7, 8, 8, and 9, respectively. The base station
demodulates the received data stream using the unique chirps asso-
ciated with each spreading factor. In particular, let C7, C8, and C9
be the chirps associated with spreading factors 7, 8, and 9 respec-
tively, and let y denote the received signal. Consider y7 = yC−1
7 ,
y8 = yC−1
9 . By the orthogonality of C7, C8, and C9,
it is clear that y7, y8, and y9 would only contain the part of the data
transmitted with spreading factors 7, 8, and 9, respectively4. At this
point, the base station can run Choir to the three independent data
streams y7, y8, and y9 to disentangle possible collisions occurring at
each of these different spreading factors. Clearly, the orthogonality
of the chirps resulting from utilizing different spreading factors
alleviates the collisions, and avoids the complexity and scalability
issues associated with having all collisions occurring on a single
spreading factor. (5) The objective of Choir is to handle unintended
collisions among LoRaWAN nodes. As for potential collisions be-
tween LoRa and other technologies, we rely on the fact that LoRa
utilizes CSS as a form of spread spectrum that makes it robust to
cross-technology interference similar to CDMA systems.
8 , and y9 = yC−1
6 MITIGATING TIMING OFFSETS
Our discussion so far assumes that clients transmit their packets
coherently in time. In this section, we describe our approach to
estimate and actively exploit the natural timing offsets between
transmissions. We then use timing and frequency offset estimates,
along with wireless channels to map which bits belong to which
users within a packet.
6.1 Exploiting Timing Offsets
We exploit timing offsets by leveraging the properties of the chirp
spread spectrum used by LoRaWAN radios. In particular, we use
4This is similar to how LoRaWAN currently demodulates collided data transmitted
with multiple spreading factors.
315
Algorithm 1 Decoding collisions using Choir
PreambleLen = ℓ, SpreadingFactor = SF
SymSize = 2SF
FFTLen = 10 × SymSize
while SymCount < ℓ do
DemodSym = Symbols(SymCount). ∗ DownChirp
n = NumPeaks(FFT (DemodSym, FFTLen))
[˜f1, . . . , ˜fn] = FindPeaks(FFT (DemodSym, FFTLen))
[˜h1, . . . , ˜hn] = LeastSqares([˜f1, . . . , ˜fn])
(cid:17),. . .,fn∈(cid:16)˜fn−∆,˜fn+∆
[f 1, . . . , f n] = arg min(cid:16)
f1∈(cid:16)˜f1−∆,˜f1+∆
SymCount = SymCount + 1
end while
(cid:17)(cid:17) R([˜f1, . . . , ˜fn])
(cid:16)
(cid:17)
(cid:16)
(cid:17)
the fact that chirps, by definition, are signals whose frequency in-
creases linearly with time. This means that any offset in time of
a received signal chirp can be equivalently interpreted as a corre-
sponding offset in frequency. Given that our approach corrects for
and exploits frequency offsets, it remains immune to timing offsets
as well.
Analysis. To demonstrate why this is the case, let us consider
chirps (symbols) from two different clients that collide in time. Let
us assume the two symbols in Eqn. 1 are off by a shift in time of ∆t1
and ∆t2, respectively. Then a shift in time of ∆t is akin to a shift in
frequency of B∆t/T. This means that, in the presence of frequency
offset, the received wireless signal can be re-written as:
tC + h2ej2π
f2+B ∆t2
T
tC
f1+B ∆t1
T
y(t) = h1ej2π
(5)
In other words, the timing offset is simply absorbed into our fre-
quency offset estimates in Sec. 5. More importantly, the timing
offset between any two transmitters, just like the frequency offset,
remains consistent across symbols over the duration of a packet
(we validate this in Sec. 9.1).
Dealing with Inter-Symbol Interference. While the approach
described above accurately accounts for timing offset within a
symbol, it fails to capture the effect of inter-symbol interference. To
illustrate, consider Fig. 5 where transmissions of two users collide,
each sending different data symbols and each encoded by a chirp. In
this case, it is quite possible that over the duration T of a chirp, one
can observe as many as four distinct symbols colliding as shown.
Failure to account for these collisions would lead to access points
dropping or re-ordering symbols between users.
Our solution to account for inter-symbol interference explicitly
tracks the peaks that result from this interference. Specifically,
a collision of two shifted symbols produces at most four peaks
in the Fourier Transform – two belonging to the first client and
two to the second. Fig. 5 shows such a Fourier transform for two
adjacent time windows, each of length T. One can then extract the
locations of these peaks to obtain four distinct data values per time
window. However, given that two symbols participate in both the
first and second collision, the two collisions are guaranteed to share
two common data values (see Fig. 5). Indeed, any pair of adjacent
collisions will share at least two common data values. By ensuring
that any such common values are reported only once (for e.g., the
first time they appear), one can eliminate half of the observed peaks.
This enables the data from all transmitters to be correctly reported
in-sequence, despite inter-symbol interference.
SIGCOMM ’17, August 21–25, 2017, Los Angeles, CA, USA
R. Eletreby, D. Zhang, S. Kumar, and O. Yağan
Figure 5: Inter-Symbol Interference: Spectrogram of two collided chirps,
and the corresponding Fourier transform peaks.
6.2 Mapping Symbols to Users within a Packet
In this section, we use both time and frequency offsets to map which
symbols (i.e., chirps) correspond to which user within a packet
(See Sec. 5.2) along with one other metric – wireless channels.
Like hardware offsets, wireless channels are expected to remain
consistent for a given client over a packet and vary between clients.
For instance, in Fig. 5, we observe that peaks of the same user over
two symbols are not only identical in frequency offset, but also in
relative height. This means that channel magnitude and phase, after
correcting for any phase offsets between symbols introduced by
frequency offsets, serves as a feature to identify users. This allows
us to build a semi-supervised clustering model (we use the HMRF-
based approach in [10]) using the fractional part of peak location,
channel magnitude, and phase. We give the clustering algorithm
known prior relationships, e.g. multiple peaks in the same symbol
map to distinct users. We then run the clustering algorithm to
recover the sequence of bits corresponding to each user.
7 EXPLOITING CORRELATED
TRANSMISSIONS
So far, we have explained our approach to disentangle and decode
colliding transmissions from clients who are all within communi-
cation range of the base station. We now argue how this approach
also provides a unique opportunity to retrieve data from clients
beyond communication range. The data transmitted by an LP-WAN
sensor can not be decoded by the base station if the received SINR
falls below a particular threshold. Indeed, a message modulated by
CSS can be recovered even if it is deeply buried in noise, but there
is a particular minimum SINR below which a transmitted message
will not even be detected by the base station.
Although one would expect that all LP-WAN sensors were ini-
tially deployed in the vicinity of an LP-WAN base station (and thus
should always be reachable), their transmissions may not reach the
base station because of the randomness of the wireless channel,
interference with other technologies sharing the same bandwidth,
or a change in the surrounding urban environment itself.
While individual sensors may be beyond communication range,
collisions of teams of such sensors can be detected by base stations.
One can then decode these collisions to recover bits transmitted by
these sensors that overlap. Indeed, given that sensors geographically