tea
donna
secretbox
ssl3-digest
mee-cbc
Total
NoSpec
Explicit
Haunted
NoSpec
Explicit
Haunted
NoSpec
Explicit
Haunted
NoSpec
Explicit
Haunted
NoSpec
Explicit
Haunted
NoSpec
Explicit
Haunted
NoSpec
Explicit
Haunted
NoPHT
Explicit
Haunted
733
761
761
911
950
950
326
326
326
22k
21k
21k
2721
769
3583
1809
808
2502
6383
696
2549
35k
25k
32k
P
48
703
188
48
843
182
5
172
172
5
1.0M
1.0M
1
15k
2.2M
1
9k
428k
T (s)
3
10331
7
5
169
8
.56
.62
.62
2948
6153
6162
5
21600
2421
4
21600
4694
448
1
74k
21600
22M 21600
109
3415
1.1M 81453
25.7M 34892
-
21
22
-
-
-
-
-
-
-
-
-
-
13
17
-
13
13
-
17
17
0
64
69
0
2
0
0
0
0
0
0
0
0
1
1
0
1
0
0
1
0
0
1
1
0
6
2


Programs
16/16
-
-
16/16
16/16
16/16
5/5
5/5
5/5
5/5
4/5
4/5
1/1
-
-
1/1
-
-
1/1
-
-
-
16/16
16/16
-
-
-
-
-
-
-
-
-
-
1/1
1/1
-
1/1
1/1
-
1/1
1/1
litmus-stl
tea
donna
secretbox
ssl3-digest
mee-cbc
Total
STL
NoSpec
Explicit
Haunted
NoSpec
Explicit
Haunted
NoSpec
Explicit
Haunted
NoSpec
Explicit
Haunted
NoSpec
Explicit
Haunted
NoSpec
Explicit
Haunted
NoSpec
Explicit
Haunted
Ix86
328
316
328
326
278
326
22k
704
12k
2721
225
408
1809
200
1763
6383
200
1627
34k
2k
17k
P
14
37M
14
5
12M
18
5
12M
5
1
13M
2
1
4k
2
1
19M
1
T (s)
.5
7205
2.3
.5
18000
5276
2948
18000
18000
5
21600
21600
4
21600
21600
448
21600
21600
27
3407
93M 108004
88078
42


14/14
3/4
4/4
-
10/10
10/10
5/5
-
-
5/5
-
-
1
-
-
1/1
-
-
1/1
-
-
27
3/4
4/4
-
1/5
5/5
-
0/5
5/5
-
1/1
1/1
-
1/1
1/1
-
0/1
1/1
-
13/23
23/23
-
13
13
-
2
26
-
0
73
-
4
26
-
3
8
-
0
2
0
2
0
0
5
0
0
5
5
0
1
1
0
1
1
0
1
1
-
22
148
0
15
8
45/45
25/25
25/25
-
19/19
19/19
Table III: Experiments for Spectre-STL with support for
Spectre-PHT disabled.
Table II: Experiments for Spectre-PHT with Spectre-STL
disabled and speculation bound computed dynamically.
two other paths being unsatisﬁable) which makes it equivalent
to Haunted RelSE.
Finally, for Libsodium and OpenSSL, Explicit RelSE gets
stuck exploring complex code introduced by stack protectors
and spends most of its time checking satisﬁability of the path
constraint before timing out. Haunted RelSE circumvents this
issue by delaying the update of the path constraint, thus it
can fully explore secretbox and ssl3-digest without
timing-out, with a noticeable speedup (8.9× and 4.6×), cov-
ering more code (4.6× and 3×), and ﬁnding 4 more violations.
While Haunted RelSE times out on the more complex primitive
mee-cbc, it still explores 3.5× more code than Explicit.
Conclusion. While the Explicit strategy already allows to
ﬁnd Spectre-PHT violations in realistic codes, Haunted RelSE
strongly improves the performance in terms of speed (2.3×
faster in total, up to 1437×),
timeouts (-66%) and cov-
ered code (1.28× in total, up to 4.6×). Actually, we can
see that Haunted RelSE does not
improve performance
over Explicit RelSE in 3/7 benchmark families, but make
a noticeable difference on the other 4/7 benchmark fami-
lies (litmus-pht, litmus-pht masked, secretbox,
ssl3-digest), where the performance gains become sig-
niﬁcant (from 4.6× faster to 1437×).
C. Performance for Spectre-STL (RQ1-RQ2)
In order to focus on Spectre-STL only, we disable support
for Spectre-PHT. Results are presented in Table III.
Results. The explosion of the number of paths for Explicit
RelSE shows that the number of behaviors to consider for
Spectre-STL grows exponentially. The performance of Explicit
RelSE on litmus tests shows that encoding transient paths
explicitly is not tractable—even though our implementation
discards redundant paths. Overall, Haunted RelSE:
• scales better on litmus-stl tests and tea, achieving
better analysis time (speed up of 3152× and 3.4×),
producing less timeouts (0 vs. 7), and ﬁnding more
violations (+24);
• while it times out on more complex code, it explores much
more instruction than Explicit (8.6× more unique instruc-
tions in total), ﬁnds 126 more violations and reports 10
more insecure programs.
Conclusion. While the state-of-the-art Explicit strategy shows
low performance for Spectre-STL even on small programs