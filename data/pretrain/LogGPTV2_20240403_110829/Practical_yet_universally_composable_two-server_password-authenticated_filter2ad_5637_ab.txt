We recall that in the UC framework, parties are modeled as in-
teractive Turing machines with two ways of communicating with
other machines: reliable, authentic communication via the input
and subroutine output tapes, and unreliable communication via the
incoming and outgoing communication tapes. The former models
local communication between processes and their subroutines; we
say that one machine provides/obtains input/output to/from another
machine. The latter models network communication; we say that
Functionality F2PASS – Setup
Setup Request: Upon input (Stp, sid, qid, p, K ) from U, check that
sid = (u, S1, S2) for some u ∈ {0, 1}∗ and for some server
identities S1, S2. Also check that query identiﬁer qid is unique.
Create a record (AStp, qid, U , p, K ).
If S1 and S2 are corrupt
then send (Stp, sid, qid, U , p, K ) to the adversary. Otherwise, send
(Stp, sid, qid, U ) to the adversary and record nothing.
Setup Hijack: Upon input (SHjk, sid, qid, ˆp, ˆK ) from the adversary
A for sid = (u, S1, S2), check that a record (AStp, qid, U , p, K )
exists and that query qid has not been marked for any of {S1, S2, A}.
Mark query qid as hjkd for A and replace record (AStp, qid, U , p, K )
with (AStp, qid, U , ˆp, ˆK ).
Setup Result Server: When receiving (Stp, sid, qid, S, s) from the
adversary for sid = (u, S1, S2), for an honest server S ∈ {S1, S2},
and for s ∈ {succ, fail}, check that a record (AStp, qid, ·, ·, ·) ex-
ists. If query qid is already marked succ or fail for S, or if some
other setup query is already marked succ for S, then do nothing. Else,
mark query qid as s for S and output (Stp, sid, qid, s) to S. If now
query qid is marked succ for all honest servers among S1 and S2, then
record (Stp, p, K ).
Setup Result User: When receiving (Stp, sid, qid, U , s) from the
adversary for sid = (u, S1, S2), for an honest user U, and for
s ∈ {succ, fail}, check that a record (AStp, qid, U , ·, ·) exists that
is not yet marked for U. If it is marked succ for all honest servers and
not marked for A, then mark it s for U and output (Stp, sid, qid, s) to
U; else, mark it fail for U and output (Stp, sid, qid, fail) to U.
Figure 1: Ideal functionality for setup of 2PASS protocols.
one machine sends/receives a message to/from another machine.
The environment provides input to and obtains output from the ad-
versary and regular protocol machines, while protocol machines
can provide input to and receive output from their local subroutines.
The adversary can send and receive messages to and from all pro-
tocol machines, modeling that it controls all network trafﬁc. Ideal
functionalities are special protocol machines that are local to all
parties except the adversary, so they interact with regular protocol
machines through their input/output tapes and with the adversary
through their communication tapes.
The ideal functionality maintains state by creating “records” and
by “marking” these records. The state is local to a single instance of
F, i.e., for a single session identiﬁer sid = (u,S1,S2) deﬁning a
single user account. The multi-session functionality keeps separate
state for each user account. The functionality also keeps a two-
dimensional associative array mark [·,·]. When we say that query
qid is marked X for party P, we mean that entry mark [qid ,P] is
assigned the value X.
Clariﬁcation.
Through the Setup Request interface, a user U can initiate the
creation of an account u with servers S1 and S2 to store a secret K
protected with password p. If at least one server is honest, p and
K remain hidden from the adversary; if both servers are corrupt,
F sends K and p to the adversary. Since the environment instructs
users to create accounts and since the adversary controls the net-
work, multiple setup queries may be going on concurrently. The
different queries are distinguished by means of a query identiﬁer
qid that U, S1, and S2 agree on upfront. (See further discussion
below.)
Since agreeing on a query identiﬁer does not mean that a secure
channel has been established, in the real world, the adversary can
always “hijack” the user’s query by intercepting the user’s network
trafﬁc and substituting it with its own. This is modeled by the Setup
Hijack interface, using which the adversary can replace the pass-
527Functionality F2PASS – Retrieve
Retrieve Request: Upon input (Rtr, sid, qid(cid:48), p(cid:48)) from U(cid:48), check
that sid = (u, S1, S2) and that query identiﬁer qid(cid:48) is unique. Create
a record (ARtr, qid(cid:48), U(cid:48), p(cid:48)). If S1 and S2 are both corrupt then send
(Rtr, sid, qid(cid:48), U(cid:48), p(cid:48)) to the adversary, else send (Rtr, sid, qid(cid:48), U(cid:48))
to the adversary.
Retrieve Hijack: Upon input (RHjk, sid, qid(cid:48), ˆp(cid:48)) from the adver-
sary A for sid = (u, S1, S2), check that a record (ARtr, qid(cid:48), U(cid:48), p(cid:48))
exists and that query qid(cid:48) has not been marked for any of {S1, S2, A}.
Mark query qid(cid:48) as hjkd for A and replace record (ARtr, qid(cid:48), U(cid:48), p(cid:48))
with (ARtr, qid(cid:48), U(cid:48), ˆp(cid:48)).
Retrieve Notiﬁcation: When receiving (RNot, sid, qid(cid:48), Si) from
the adversary for sid = (u, S1, S2) and for an honest server
Si ∈ {S1, S2}, check that a record (ARtr, qid(cid:48), ·, ·) exists.
If
there exists a setup query that is marked succ for Si then output
(RNot, sid, qid(cid:48)) to Si. Else, create a record (Perm, qid(cid:48), Si, deny),
output (Rtr, sid, qid(cid:48), fail) to Si, and mark qid(cid:48) as fail for Si.
Retrieve Permission: Upon input (Perm, sid, qid(cid:48), a) from Si ∈
{S1, S2}, where sid = (u, S1, S2) and a ∈ {allow, deny},
check that a record (ARtr, qid(cid:48), ·, ·) exists and that no record
(Perm, qid(cid:48), Si, ·) exists.
Record (Perm, qid(cid:48), Si, a) and send
(Perm, sid, qid(cid:48), Si, a) to the adversary.
If now a record (Perm, qid(cid:48), Si, allow) exists for all honest Si ∈
{S1, S2} and U(cid:48) is honest, then send (Rtr, sid, qid(cid:48), c, K (cid:48)(cid:48)) to the
adversary, where (c, K (cid:48)(cid:48)) ← (correct, K ) if a record (Stp, p, K )
exists, p(cid:48) = p, and either U(cid:48) is corrupt or qid(cid:48) is marked hjkd for
A; where (c, K (cid:48)(cid:48)) ← (correct, ⊥) if a record (Stp, p, ·) exists,
p(cid:48) = p, U(cid:48) is honest, and qid(cid:48) is not marked for A; and where
(c, K (cid:48)(cid:48)) ← (wrong, ⊥) otherwise. If records (Perm, qid(cid:48), Si, allow)
exist for all honest Si ∈ {S1, S2} and U(cid:48) is corrupt, then send
(Rtr, sid, qid(cid:48), c) to the adversary.
Retrieve Result Server: Upon receiving (Rtr, sid, qid(cid:48), Si, a) from
the adversary for sid = (u, S1, S2), for an honest server Si ∈
{S1, S2}, and for a ∈ {allow, deny}, check that records (ARtr,
qid(cid:48), ·, p(cid:48)) and (Perm, qid(cid:48), Si, ai) exist, and that query qid(cid:48) is not
yet marked for Si.
Output (Rtr, sid, qid(cid:48), s) to Si and mark query qid(cid:48) as s for Si,
where s ← succ if a = allow, a record (Stp, p, ·) exists, records
(Perm, qid(cid:48), Sj , allow) exist for all honest Sj ∈ {S1, S2}, and
p(cid:48) = p. Otherwise, s ← fail.
Retrieve Result User: Upon receiving (Rtr, sid, qid(cid:48), U(cid:48), a, K (cid:48))
from the adversary for honest user U(cid:48), where sid = (u, S1, S2),
a ∈ {allow, deny}, and Si ∈ {S1, S2}, check that record (ARtr,
qid(cid:48), U(cid:48), p(cid:48)) exists and that query qid(cid:48) is not yet marked for U(cid:48). Out-
put (Rtr, sid, qid(cid:48), K (cid:48)(cid:48), s(cid:48)(cid:48)) to U(cid:48) and mark query qid(cid:48) as s(cid:48)(cid:48) for U(cid:48)
where (K (cid:48)(cid:48), s(cid:48)(cid:48)) is
• (⊥, fail) if a = deny; else,
• (K (cid:48), succ) if S1 and S2 are corrupt; else,
• (K , succ) if a record (Stp, p, K ) exists, p = p(cid:48), and qid(cid:48) is
marked succ for S1 and S2 and is not marked for A; else,
• (⊥, fail).
Figure 2: Ideal functionality for retrieve of 2PASS protocols.
Functionality FCA
Registration: Upon receiving the ﬁrst message (Register, sid, v)
from party P, send (Registered, sid, v) to the adversary; upon re-
ceiving ok from the adversary, and if sid = P and this is the ﬁrst
request from P, then record the pair (P, v).
Retrieve: Upon receiving a message (Retrieve, sid) from party
P(cid:48), send (Retrieve, sid, P(cid:48)) to the adversary, and wait for an ok
from the adversary. Then, if there is a recorded pair (sid, v) output
(Retrieve, sid, v) to P(cid:48). Otherwise output (Retrieve, sid, ⊥) to
P(cid:48).
Figure 3: Ideal certiﬁcation functionality.
word and key with its own. The user will always output fail after
a query was hijacked, but the servers do not notice the difference
with a regular setup.
The adversary controls when a server or user learns whether the
setup succeeded or failed through the Setup Result Server and Setup
Result User interfaces. Once the adversary lets a setup succeed
for an honest server, this server will refuse all further setups. The
adversary can always make setup transactions fail for a subset of
the participants, but the user will only output that setup succeeded
if all honest servers did so as well and the query was not hijacked.
A user U(cid:48) (possibly different from U) can recover the secret key
K by calling the Retrieve Request interface with a password at-
tempt p(cid:48). If at least one server is honest, then no party learns p(cid:48);
if both are corrupt, then p(cid:48) is sent to the adversary. Similarly to
setup queries, the adversary can hijack the retrieve query through
the Retrieve Hijack interface and replace p(cid:48) with its own ˆp(cid:48).
When the adversary notiﬁes a server of a retrieve request via
the Retrieve Notiﬁcation interface, the server outputs a (RNot, . . .)
message. At this point, the server can apply any external throttling
mechanism to decide whether to participate in this retrieval, e.g.,
by not participating after too many failed attempts. The servers in-
dicate whether they will proceed with the retrieval through the Re-
trieve Permission interface. Only after both servers have allowed
the transaction to proceed does the adversary learn whether the
password was correct and, if the password is correct and either the
user U(cid:48) is corrupt or the query was hijacked, also the key K .
The adversary decides at which moment the results of the re-
trieval are delivered to the parties by invoking the Retrieve Result
Server and Retrieve Result User interfaces. The adversary can al-
ways make a party fail by setting a = deny, even if p(cid:48) = p, but
cannot make the retrieval appear successful if p(cid:48) (cid:54)= p. This reﬂects
the fact that in the real world, the adversary can always tamper
with communication to make a party fail, but cannot force an hon-
est party to succeed, unless he knows the password.
If both servers are corrupt, then the adversary can force the user
to succeed with any key K (cid:48) of the adversary’s choice. If at least one
server is honest, however, then F either sends the real recorded key
K to U(cid:48), or sends it a fail message. The adversary doesn’t learn
anything about p(cid:48) or K , and the user can only obtain K if all honest
servers participated in the retrieval and the password was correct.
2.2 Discussion
On session and query identiﬁers. The UC framework imposes that
the session identiﬁer sid be globally unique. The security proof
considers a single instance of the protocol in isolation, meaning
that in the security proof, all calls to the ideal functionality have the
same sid. For 2PASS protocols, the sid must be (1) the same for
setup and retrieval, so that the ideal functionality can keep state be-
tween these phases, and (2) human-memorizable, so that a human
user can recover her secret key K based solely on information she
can remember. We therefore model sid to consist of a user name u
and the two server identities S1,S2. Together, these uniquely de-
ﬁne a “user account”. To ensure that sid is unique, servers reject
setups for accounts that are taken.
Within a single user account (i.e., a single sid), multiple setup
and retrieve protocol executions may be going on concurrently. To
distinguish the different protocol executions, we let the environ-
ment specify a unique (within this sid) query identiﬁer qid when
the execution is ﬁrst initialized by the user. The qid need not be
human-memorizable, so it can be agreed upon like any session
identiﬁer in the UC framework, e.g., by running an initialization
protocol that implements Finit as deﬁned by Barak et al. [2].
As mentioned above, security for multiple user accounts is ob-
528tained through the JUC theorem [15]. In the multi-session func-
tionality ˆF2PASS, the tuple (u,S1,S2) becomes the sub-session
identiﬁer ssid, whereas the session identiﬁer sid is a unique string
that speciﬁes the “universe” in which the multi-session protocol op-
erates, describing for example which CRS to use and which PKI to
trust. In practice, the sid of the multi-session functionality can be
thought of as hardcoded in the software that users use to set up and
retrieve their accounts, so that human users need not remember it.
Strengthening the deﬁnition. If both servers are corrupt, our ideal
functionality hands the password p, the key K , and all password
attempts p(cid:48) to the adversary. Giving away the passwords and key
“for free” is a somewhat conservative model for the fact that two
corrupt servers can always perform an ofﬂine dictionary attack on
p—a model that, given the low entropy in human-memorizable
passwords and the efﬁciency of brute-force attacks, is actually quite
close to reality. At the same time, it allows for efﬁcient instantia-
tions such as ours that let passwords do what they do best, namely
protect against online attacks. One could further strengthen the
deﬁnition in the spirit of Canetti et al. [14] by merely giving the ad-
versary access to an ofﬂine password testing interface that returns
K only when called with the correct password p. Protocols satis-
fying this stronger notion will have to use a very different and most
likely less efﬁcient approach than ours, but would have the bene-
ﬁt of offering some protection when both servers are corrupt but a
very strong password is used.
Relation to existing notions. The only existing security notion for
2PASS is due to Bagherzandi et al. [1]. In the static corruption case,
if we bear in mind that an adversarial environment will necessarily
learn whether the retrieval succeeded or failed, our ideal function-
ality meets the existing security deﬁnition, so our notion implies
it. The notion of Bagherzandi et al. does not imply ours, however,
because it fails to capture related-password attacks.
To see why this is true, consider the following (contrived) scheme
that satisﬁes Bagerzandi et al.’s deﬁnition but is insecure against a
related-password attack. Take a scheme that is secure under the ex-
isting notion [1]. Consider a modiﬁed scheme where, if the user’s
input password starts with 1, the user sends the password in the
clear to both servers; else, follow the normal protocol. This scheme
still satisﬁes their deﬁnition for the dictionary of passwords start-
ing with 0:
their deﬁnition does not consider the case when the
honest user inputs an incorrect password. It does not satisfy our
deﬁnition, however: suppose the environment directs a user whose
correct password is 0(cid:107)p to perform a retrieve with password 1(cid:107)p.
In the real protocol, a dishonest server involved in the protocol will
see the string 1(cid:107)p. In the ideal world, the ideal functionality hides
an incorrect password from the servers, and so no simulator will be
able to correctly simulate this scenario.
2.3 Setup Assumptions
Our protocol requires two setup assumptions. The ﬁrst is the
availability of a public common reference string (CRS), modeled
by an ideal functionality F D
CRS parameterized with a distribution
D. Upon receiving input (CRS, sid ) from party P, if no value
r is recorded, it chooses and records r ←R D.
It then sends
(CRS, sid , r) to P.
The second is the existence of some form of public-key infras-
tructure where servers can register their public keys and the user
can look up these public keys. The user can thus authenticate the
servers so that she can be sure that she runs the retrieve protocol
with the same servers that she previously ran the setup protocol
with. In other words, we assume the availability of the functional-
ity FCA by Canetti [13] depicted in Figure 3. We will design our
protocol in a hybrid world where parties can make calls to FCA.
3. OUR PROTOCOL
Let GGen be a probabilistic polynomial-time algorithm that on
input security parameter 1k outputs the description of a cyclic group
G, its prime order q, and a generator g.
Let (keyg, enc, dec) be a semantically secure public-key encryp-
tion scheme with message space G; we write c = encpk (m; r)
to denote that c is an encryption of m with public key pk us-
ing randomness r. Our protocol will require this cryptosystem to
(1) have committing ciphertexts, so that it can serve as a commit-
ment scheme; (2) have appropriate homomorphic properties (that
will become clear in the sequel); (3) have an efﬁcient simulation-
sound zero-knowledge proof of knowledge system for proving cer-
tain relations among ciphertexts (which properties are needed will
be clear in the sequel) and for proving correctness of decryption.
The ElGamal cryptosystem satisﬁes all the properties we need.
Let (keygsig, sig, ver) be a signature scheme with message space
{0, 1}∗ secure against adaptive message attacks and let (keyg2,
enc2, dec2) be a CCA2 secure public key encryption scheme with
message space {0, 1}∗ that supports labels. To denote an encryp-
tion of m with public key pk using randomness r with label l ∈
{0, 1}∗ we write c = enc2pk (m; r; l) (if we do not need to refer
to the randomness, we simply write c = enc2pk (m;∗; l)). When
employing these schemes, we assume suitable (implicit) mappings