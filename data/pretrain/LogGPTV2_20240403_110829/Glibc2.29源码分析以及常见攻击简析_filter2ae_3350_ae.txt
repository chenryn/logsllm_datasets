           allocated again.  */
        if (have_lock && old != NULL
        && __builtin_expect (fastbin_index (chunksize (old)) != idx, 0))
          malloc_printerr ("invalid fastbin entry (free)");
      }
      /*
        Consolidate other non-mmapped chunks as they arrive.
      */
      else if (!chunk_is_mmapped(p)) {
        /* If we're single-threaded, don't lock the arena.  */
        if (SINGLE_THREAD_P)  
          have_lock = true;
        if (!have_lock)
          __libc_lock_lock (av->mutex);
        nextchunk = chunk_at_offset(p, size);   //得到nextchunk的位置
        /* Lightweight tests: check whether the block is already the
           top block.  */
        if (__glibc_unlikely (p == av->top))     //如果p是top头，报错退出
          malloc_printerr ("double free or corruption (top)");
        /* Or whether the next chunk is beyond the boundaries of the arena.  */
        if (__builtin_expect (contiguous (av)   //判断nextchunk是否超过分配区，如果是的话，退出报错
                  && (char *) nextchunk
                  >= ((char *) av->top + chunksize(av->top)), 0))
        malloc_printerr ("double free or corruption (out)");
        /* Or whether the block is actually not marked used.  */
        if (__glibc_unlikely (!prev_inuse(nextchunk)))   //如果nextchunk的prev_inuse位是0，说明p已经被释放过了，再释放属于double free
          malloc_printerr ("double free or corruption (!prev)");
        nextsize = chunksize(nextchunk);   //得到nextchunk的size
        if (__builtin_expect (chunksize_nomask (nextchunk) = av->system_mem, 0))   //判断nextchunk size的合法性
           malloc_printerr ("free(): invalid next size (normal)");
        free_perturb (chunk2mem(p), size - 2 * SIZE_SZ);   //清楚要被释放的chunk的内容，即置0
        /* consolidate backward */
        if (!prev_inuse(p)) {       //若p的inuse位为0，则代表p的前一个chunk属于释放状态，进入循环
          prevsize = prev_size (p);  //获得前一个chunk的size
          size += prevsize;    //重置一下size
          p = chunk_at_offset(p, -((long) prevsize));  //更新p的位置，包含前一个chunk和p
          if (__glibc_unlikely (chunksize(p) != prevsize))   //因为现在更新后p的size位还没有更新，所以现在p的size还是没有更新p之前的size(即p的上一个chunk的size大小)
            malloc_printerr ("corrupted size vs. prev_size while consolidating");
          unlink_chunk (av, p);  //执行解链，这是向后合并
        }
        if (nextchunk != av->top) {
          /* get and clear inuse bit */
          nextinuse = inuse_bit_at_offset(nextchunk, nextsize);  //nextchunk的prev_inuse位归0
          /* consolidate forward */
          if (!nextinuse) {  //向前合并
        unlink_chunk (av, nextchunk);
        size += nextsize;
          } else
        clear_inuse_bit_at_offset(nextchunk, 0);  //如果nextchunk在使用，就讲其prev_inuse位置0
          /*
        Place the chunk in unsorted chunk list. Chunks are
        not placed into regular bins until after they have
        been given one chance to be used in malloc.
          */
          bck = unsorted_chunks(av);    //获得unsortedbin的头
          fwd = bck->fd;  //获得unsortedbin的第一个chunk                
          if (__glibc_unlikely (fwd->bk != bck))
        malloc_printerr ("free(): corrupted unsorted chunks");
          p->fd = fwd;  
          p->bk = bck;   //插入unsortedbin中
          if (!in_smallbin_range(size))  
        {
          p->fd_nextsize = NULL;
          p->bk_nextsize = NULL;
        }
          bck->fd = p;  
          fwd->bk = p;  //重置bck和fwd
          set_head(p, size | PREV_INUSE);
          set_foot(p, size);
          check_free_chunk(av, p);   //检查是否free掉了
        }
        /*
          If the chunk borders the current high end of memory,
          consolidate into top
        */
        else {     //如果nextchunk是top chunk的话，对top chunk进行更新
          size += nextsize;    
          set_head(p, size | PREV_INUSE);
          av->top = p;
          check_chunk(av, p);  
        }
        /*
          If freeing a large space, consolidate possibly-surrounding
          chunks. Then, if the total unused topmost memory exceeds trim
          threshold, ask malloc_trim to reduce top.
          Unless max_fast is 0, we don't know if there are fastbins
          bordering top, so we cannot tell for sure whether threshold
          has been reached unless fastbins are consolidated.  But we
          don't want to consolidate on each free.  As a compromise,
          consolidation is performed if FASTBIN_CONSOLIDATION_THRESHOLD
          is reached.
        */
        if ((unsigned long)(size) >= FASTBIN_CONSOLIDATION_THRESHOLD) { 
          if (atomic_load_relaxed (&av->have_fastchunks))
        malloc_consolidate(av);
          if (av == &main_arena) {
    #ifndef MORECORE_CANNOT_TRIM
        if ((unsigned long)(chunksize(av->top)) >=
            (unsigned long)(mp_.trim_threshold))
          systrim(mp_.top_pad, av);
    #endif
          } else {
        /* Always try heap_trim(), even if the top chunk is not
           large, because the corresponding heap might go away.  */
        heap_info *heap = heap_for_ptr(top(av));
        assert(heap->ar_ptr == av);
        heap_trim(heap, mp_.top_pad);
          }
        }
        if (!have_lock)
          __libc_lock_unlock (av->mutex);
      }
      /*
        If the chunk was allocated via mmap, release via munmap().
      */
      else {
        munmap_chunk (p);
      }
    }
只要属于fastbin大小，free掉都不会与top chunk合并
###  5.unlink
    /* Take a chunk off a bin list.  */
    static void
    unlink_chunk (mstate av, mchunkptr p)   //unlink顾名思义，就是将一个chunk从bin中解链出来，p是将要释放的chunk
    {
      if (chunksize (p) != prev_size (next_chunk (p)))      //第一个检查
        malloc_printerr ("corrupted size vs. prev_size");
      mchunkptr fd = p->fd;
      mchunkptr bk = p->bk;
      if (__builtin_expect (fd->bk != p || bk->fd != p, 0))   //第二个检查
        malloc_printerr ("corrupted double-linked list");
      fd->bk = bk;
      bk->fd = fd;
      if (!in_smallbin_range (chunksize_nomask (p)) && p->fd_nextsize != NULL)
        {
          if (p->fd_nextsize->bk_nextsize != p
          || p->bk_nextsize->fd_nextsize != p)
        malloc_printerr ("corrupted double-linked list (not small)");
          if (fd->fd_nextsize == NULL)
        {
          if (p->fd_nextsize == p)
            fd->fd_nextsize = fd->bk_nextsize = fd;
          else
            {
              fd->fd_nextsize = p->fd_nextsize;
              fd->bk_nextsize = p->bk_nextsize;
              p->fd_nextsize->bk_nextsize = fd;
              p->bk_nextsize->fd_nextsize = fd;
            }
        }
          else
        {
          p->fd_nextsize->bk_nextsize = p->bk_nextsize;
          p->bk_nextsize->fd_nextsize = p->fd_nextsize;
        }
        }
    }
在free(p)的时候(大小不是fastbin就行)，如果p的前后是释放状态的话会发生向前合并或者向后合并，其中 **向后合并**
的时(即unlink_chunk (av, **p** )
)，有一项检查，就是检查p的size和nextchunk的prevsize是否一致，这个检查与unlink_chunk中第一个检查一致。然后就要通过伪造来过掉第二个检查。
首先伪造p的prev_inuse和prev_size，然后在prev_chunk中伪造一个假的chunk，使其能通过第一个检查，再伪造prev_chunk的fd和bk指针通过第二个检查。
如果p的下一个chunk属于释放状态，执行向前合并( 即unlink_chunk (av, **nextchunk** )
)，向前合并没有单独的检查，就只有在unlink_chunk中的两个检查，可以先修改nextchunk的nextchunk的prev_inuse为0，然后改nextchunk的nextchunk的prev_size为nextchunk的size，最后再修改nextchunk的fd和bk指针就好。
这里多说一点，向前合并不需要伪造一个假chunk是因为在_int_free的源代码中对p的nextchunk做了定义(nextchunk =
chunk_at_offset(p, size))，如果我们要伪造一个假chunk也是可以的，就是比较麻烦了。总之，多去看源码就能明白啦！！！
在此之后的分析，就是一些攻击手法了，不过我写的很简略(供自己复习一下)
## 五：常用的攻击手法
###  1.fastbin dup into consolidate
就是利用malloc_consolidate函数将已经放入fastbin中的p送入unsortedbin，然后再释放p，就可以达到p即在fastbin中，又在unsortedbin中
###  2.fastbin dup into stack
比较简单，就是利用绕过double free来实现可以分配到栈的内存
###  3.fastbin reverse into tcache
注：我们设最先进入bin或者tcache的chunk为最后一个chunk，最后进入的是第一个chunk，这样比较好描述一点(比较符合从左到右的思想)
因为在_int_malloc中的fastbin的stash机制，在malloc从fastbin中取出一个chunk之后，只要在fastbin中还有相同大小的chunk且tcache的个数不足7的话，就会将fastbin中的chunk送入tcache。我们假设有这么一种情况，0x50大小的tcache数量为0，有7个0x50大小的fastbin，能通过溢出或者其他方式使fastbin的最后的chunk的fd为一个栈地址，然后malloc(0x50)，那个栈地址就会进入到tcache的第一的位置。
###  4.tcache poisoning
直接修改tcache中bin的fd指针
###  5.tcache house of spirit
在栈上伪造一个chunk，只伪造size位即可，并且将其user空间的首地址赋值给一个变量，然后释放这个变量，最后再malloc回来，就可以控制这块区域
###  6.tcache stashing unlink(至少要有一次calloc的机会，因为calloc不从tcache中拿chunk)
能达到向任意地址+0x10写一个libc地址和申请一个chunk在任何位置
###  7.house of force(mutex);
          locked = 1;
          chunk_at_offset (p, size)->size = av->system_mem;  //过这个检查哦！！！
          }))
      {
        errstr = "free(): invalid next size (fast)";
        goto errout;
###  9.house of orange(程序没有free时可以考虑这种攻击)
需要泄露libc和heap地址，需要将*_IO_list_all伪造成unsortedbin的头(main_arena+0x58)，然后再伪造
_IO_list_all的chain和mode，write_ptr,write_base，最重要的是伪造vtable[3]为system的地址，”/bin/sh\x00”在头部(因为
_IO_OVERFLOW(fp,EOF))
###  10.largebin attack
_int_malloc在对largebin的操作在2.30之后多加入了两项检查。
####  1.glibc2.29及一下的largebin attack
     else
                {
                  victim_index = largebin_index (size);
                  bck = bin_at (av, victim_index);  //bck为largebin的头
                  fwd = bck->fd;   //fwd为largebin中第一个chunk
                  /* maintain large bins in sorted order */
                  if (fwd != bck)   //如果该下标的bin中不为空
                    {
                      /* Or with inuse bit to speed comparisons */
                      size |= PREV_INUSE;
                      /* if smaller than smallest, bypass loop below */
                      assert (chunk_main_arena (bck->bk));
                      if ((unsigned long) (size)  
                  bk))       //并且从unsortedbin中来的chunk大小小于该下标中chunk中最小的，进入vuln函数
                        {
                          fwd = bck;      //更新fwd为largebin头
                          bck = bck->bk;  //更新bck为largebin中最小的chunk
                          victim->fd_nextsize = fwd->fd;  //victim就是即将插入的chunk，设置fd_nextsize为该下标中最大chunk
                          victim->bk_nextsize = fwd->fd->bk_nextsize;  //设置bk_nextsize为最大chunk的bk_nextsize
                          fwd->fd->bk_nextsize = victim->bk_nextsize->fd_nextsize = victim;   //漏洞点，如果我们能够伪造第一个chunk的bk_nextsize为我们想要写入数据的地方-0x20，就可以赋值为victim
                        }
####  2.glibc2.30之后的largebin attack
      /*  if ((unsigned long) (size)bk))不成立的话，进入下面的循环 */       
                        else
                        {
                          assert (chunk_main_arena (fwd));
                          while ((unsigned long) size =chunksize_nomask（fwd），我们需要绕过这个循环
                            {
                              fwd = fwd->fd_nextsize;
                  assert (chunk_main_arena (fwd));
                            }
                          if ((unsigned long) size
                  == (unsigned long) chunksize_nomask (fwd))
                            /* Always insert in the second position.  */
                            fwd = fwd->fd;    
                          else          //主要的利用在这里，当size>chunksize_nomask（fwd）
                            {
                              victim->fd_nextsize = fwd; //
                              victim->bk_nextsize = fwd->bk_nextsize;
                              if (__glibc_unlikely (fwd->bk_nextsize->fd_nextsize != fwd))
                                malloc_printerr ("malloc(): largebin double linked list corrupted (nextsize)");
                              fwd->bk_nextsize = victim;  
                              victim->bk_nextsize->fd_nextsize = victim;
                            }
                          bck = fwd->bk;             
                          if (bck->fd != fwd)
                            malloc_printerr ("malloc(): largebin double linked list corrupted (bk)");
                        }
                    }
                  else   //空
                    victim->fd_nextsize = victim->bk_nextsize = victim;
                }    
              mark_bin (av, victim_index);
              victim->bk = bck;
              victim->fd = fwd;
              fwd->bk = victim;
              bck->fd = victim;
堆部分就先写这些吧，为了过面试呜呜，还要去复习栈