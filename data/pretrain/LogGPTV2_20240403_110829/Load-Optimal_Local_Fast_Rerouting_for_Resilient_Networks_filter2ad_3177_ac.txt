i∈T Pw(i)∪ F = F . Observe
that |T| = φ. Partition T in two subsets: T1 for ﬂows whose
preﬁx for w is shorter than k, |Pw(i)| ≤ k, T2 for all other ﬂows
|, t1 +t2 = φ. All the links to vn
and let t1 = |T1
| and t2 = |T2
Hence, it holds that |F| ≥ |(cid:8)
tion into T1 and T2 we have |(cid:8)
i∈T Pw(i)| ≥ |(cid:8)
i∈T Pw(i)| − φ. Using the parti-
i∈T2 Pw(i)| ≥ |(cid:8)
i∈T1 Pw(i) ∪ (cid:8)
(cid:8)
i∈T1 Pw(i) ∪
i∈T2 M k(i)| , where the
that M k(i) ⊆ Pw(i)
for all i ∈ T2. Leveraging the inclusion-exclusion prin-
inequality is due to the fact
(cid:8)
last
349
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:03:05 UTC from IEEE Xplore.  Restrictions apply. 
i∈T1
i k ≥ 2. A (v, k, λ)-balanced
incomplete block design is a design (X, A) such that the
following properties are satisﬁed:
1) X is a set of v elements called points, |X| = v.
2) A is a collection (i.e., multiset) of b non-empty subsets
of X called blocks, where each block contains exactly k
points.
3) Every pair of distinct elements is contained in exactly λ
blocks.
1, 4, 13
12, 3, 4
...
9, 1, 2
8, 6, 12
1
2
...
12
13
1
3 12 4
4 13 9
5
3
6
5
8
...
...
2
1
12 8
9
6
7
8
3 13
...
1
10
k
n-k
Fig. 4. Construction of BIBD failover matrix M for n = 13, k = 3. Given
the blocks of the BIBD, a regular bipartite graph is constructed with edges
(dashed) between the ith
block (left). As a next
step, a matching on this graph is computed (bold black edges) which deﬁnes
the ﬁrst column of M (right). After removing the edges of this matching, the
procedure is repeated on the remaining graph (k times). When no more edges
are left, the procedure is repeated for the complement of the graph computed
ﬁrst, to ﬁll the n − k last columns of the matrix.
block and j if j is in the ith
A BIBD where b = v is called symmetric.
Symmetric BIBDs feature a useful intersection property.
Fact 1 (Thm 2.2 in [26]). Given a symmetric (v, k, λ)-BIBD,
it holds for all 1 ≤ i, j ≤ v, where i (cid:6)= j, that |Ai ∩ Aj| = λ.
The only remaining problem is that blocks are not rows: even
once we have generated our n blocks of size k, we need to order
the failover routes within each block such that the resulting
matrix M k
is a k-block of a latin square. The following
procedure will be used to construct the ﬁrst k elements of
row i using the elements of Ai. It leverages k sequential
perfect matchings in the bipartite graph, associating to each
row its set of backup nodes from the block Ai.
Algorithm 2 Transforming Blocks into Latin Rows
: n rows of size k
and (i, j) ∈ E iff xj ∈ Ai
1: input : a (n, k, λ)-BIBD (X, A)
2: output: M k
3: Let G = (U, V, E) a bipartite graph s.t., |U| = |V | = n
4: for j ∈ {1, . . . , k} do
Let P : U → V a perfect matching of G
for i ∈ {1, . . . , n} do
G = (U, V, E \ {(i, mi,j)|1 ≤ i ≤ n})
mij ← P (i)
5:
6:
7:
8:
9: return M k = [mij]1≤i≤n,1≤j≤k
The transformation of blocks into rows is illustrated in
Figure 4.
Theorem 2. Algorithm 2 returns a latin block with |M k(i) ∩
M k(j)| = λ for all 1 ≤ i < j ≤ n.
Proof. Let us ﬁrst show that Algorithm 2 always terminates.
This will happen iff a perfect matching P is always found.
Observe that at Line 3, by deﬁnition of a BIBD, G is a k-
regular bipartite graph (with |U| = |V | ). It therefore contains
a perfect matching (due to Hall’s Theorem). Observe that after
350
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:03:05 UTC from IEEE Xplore.  Restrictions apply. 
the ﬁrst execution of Line 8, G is now a k − 1 regular graph
(since a perfect matching was removed). This will be repeated
until j = k, where G is merely a matching.
Regarding correctness, we observe that because the blocks
are sets, no node is ever repeated in a row. Since P is a perfect
matching, no node is repeated on a column. Consequently, M
is a latin submatrix.
The construction of Algorithm 2 will be very useful to
transform blocks into failover matrixes that provide the
guarantees of Theorem 1.
D. Failover Matrix Creation
With the above we now construct a failover matrix M
(summarized in Algorithm 3 and illustrated in Figure 4) given
a symmetric BIBD. As a ﬁrst step, Algorithm 3 exploits a
symmetric (n, k, 1)-BIBD (X, A) to create the ﬁrst k-submatrix
of M . The remaining submatrix is constructed such that each
row and column of the complete matrix is a permutation, and
thus we have a latin square. Together with the theorems from
previous sections, this is sufﬁcient for a constant approximation.
Algorithm 3 Construction of Failover Matrix
1: input: (n, k, 1)-BIBD (X, A)
2: output: latin square failover matrix M
3: Let M k = [mij]1≤i≤n,1≤j≤k = Alg2(X, A)
4: Let M C = Alg2(X,{Bi, Bi = X \ Ai, 1 ≤ i ≤ n})
5: return M = M k ⊕ M C
, where ⊕ concatenates columns
Theorem 3. Algorithm 3 returns a latin failover matrix M
with intersection properties representing a failover scheme that
is optimal up to a constant factor.
Proof. We prove ﬁrst termination and then correctness.
Termination: Since M k
is a latin submatrix, all the n values
appear exactly once on the ﬁrst column, and once on the last
column. Observe that in Line 4, (X,{Bi, 1 ≤ i ≤ n}) is a
BIBD (regardless of its intersection size), as the complement
of a BIBD is also a BIBD ([26] Thm 1.32).
Correctness: Observe that M k
are latin submatrices.
To show that the resulting matrix M is a latin square, we need
to show that no row contains twice the same id. By deﬁnition
of Bi ∩ Ai = ∅. So M is a latin square, and therefore the
and M C
Theorem 1, we conclude that for a load up to φ ≤ k ≤ √
corresponding failover scheme is correct, i.e., no loops can
occur as each node appears at most once per row of the matrix.
Since M is a latin square satisfying the conditions of
n, the
number of failed links is θ(φ2), which implies asymptotical
optimality.
In order to construct the corresponding BIBDs (for k − 1
being a prime tower), we can leverage the following theorem.
Theorem 4 (Thm 2.10 in [26]). For every prime power q ≥ 2,
there exists a symmetric (q2 +q+1, q+1, 1)-BIBD (a projective
plane of order q).
351
Using these BIBDs, we can thus construct failover matrices
for n = q2 + q + 1 directly. If there exists no prime power q
for which n = q2 + q + 1, we can construct a failover matrix as
follows. Choose r such that 22r+2r+1 ≤ n < 22r+2+2r+1+1.
Construct the failover matrix M with a (q2 + q + 1, q + 1, 1)-
BIBD for q = 2r
. Assign each row of this failover matrix to
at most 4 nodes. The remaining n − 22r + 2r + 1 elements
of each sequence can be chosen among the permutations of
the nodes that have not been used yet to guarantee a loop-free
behavior. Using this construction, the load deteriorates by at
most a factor of 4, since every preﬁx is used in at most three
other rows.
E. Resilient Permutation Routing
Having discussed the All-to-One model, we now turn to the
permutation routing problem. Permutation routing is a classic
and well-studied scenario (e.g., in the context of oblivious
routing and Valiant’s trick [23], [29]) where given a (worst-
case) permutation π : V → V , each node v communicates
with its image π(v). This corresponds to a set of n ﬂows with
source vi and destination π(vi). Hence, in a resilient setting,
each ﬂow needs a backup sequence to reach its destination π(vi)
for a permutation π. Again, for each ﬂow, we set the conditional
failover rules according to the rows of a matrix M .
Note that the permutation routing problem has a fundamen-
tally different structure from all-to-one routing and adversarial
link failure strategies have to take all links into account, while
for all-to-one routing the adversary can focus on the nodes to
induce a high load. Nevertheless, we can apply the BIBD
construction presented above to generate efﬁcient failover
matrices for this problem as well. We can even re-use the
proof structure for the failure set size necessary for a certain
load. Since every ﬂow has a different destination it is more
difﬁcult for an adversary to reuse link failures and thus we can
prove a higher bound than for all-to-one routing.
is a latin submatrix such
that the size of the intersection of two rows is at most 1,
Theorem 5. Let k ≤ √
i.e., ∀i, j ≤ n, i (cid:6)= j it holds that |M k(i) ∩ M k(j)| ≤ λ.
Let F ∈ Fo(φ). If φ ≤ k then |F| = Ω(φ·√
n) for permutation
n and M k
routing.
Proof. Let (w, u) be a link that carries a load of φ due
to F . Consider the set of affected failover sequences that
contribute to this load, denoted by the set of ﬂow T . Observe
that |T| = φ. The node w can be the source of at most one
ﬂow. Analogously, u is the destination of at most one ﬂow,
thus there are at least φ− 2 affected rows in the BIBD failover
matrix M with w in the preﬁx of u and a link failure for
each element of those preﬁxes of u (note that w cannot be the
destination of the ﬂows of these rows, as then they would not
contribute to a load exiting w). We now need to show that the
n).
Due to the preﬁx intersection properties of the matrix structure
we use (Theorem 1), it must thus hold that the preﬁx length
of u exceeds
size of the set F of these link failures is at least Ω(φ · √
n for these φ − 2 rows.
√
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:03:05 UTC from IEEE Xplore.  Restrictions apply. 
To have reached v in such a preﬁx it must hold that either
the link (vi, v) or a link (v(cid:4), v) failed, for an element v(cid:4)
in
the preﬁx of v on row i. To reuse a failure of the ﬁrst type in
ﬂows, vi must occur in the preﬁx of w in other rows. Again
due to the matrix structure (Theorem 1), a multiple reuse of