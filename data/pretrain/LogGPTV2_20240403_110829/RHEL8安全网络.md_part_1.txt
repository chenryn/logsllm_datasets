[]{#index.html}
::: book
::: titlepage
::: producttitle
[Red Hat Enterprise Linux]{.productname} [8]{.productnumber}
:::
# []{#index.html#idm140091689750976}安全网络 {.title}
## 配置安全网络和网络通信 {.subtitle}
::: abstract
**摘要**
本标题帮助管理员保护网络、连接的计算机和网络通信免受各种攻击。
:::
------------------------------------------------------------------------
:::
:::
[]{#making-open-source-more-inclusive.html}
::: preface
::: titlepage
# []{#making-open-source-more-inclusive.html#making-open-source-more-inclusive}使开源包含更多 {.title}
:::
红帽承诺替换我们的代码、文档和网页属性中存在问题的语言。我们从这四个术语开始：
master、slave、blacklist 和
whitelist。这些更改将在即将发行的几个发行本中逐渐实施。如需了解更多详细信息，请参阅
[CTO Chris Wright
信息](https://www.redhat.com/en/blog/making-open-source-more-inclusive-eradicating-problematic-language){.link}。
:::
[]{#proc_providing-feedback-on-red-hat-documentation_securing-networks.html}
::: preface
::: titlepage
# []{#proc_providing-feedback-on-red-hat-documentation_securing-networks.html#proc_providing-feedback-on-red-hat-documentation_securing-networks}对红帽文档提供反馈 {.title}
:::
我们感谢您对文档提供反馈信息。请让我们了解如何改进文档。要做到这一点：
::: itemizedlist
-   关于特定内容的简单评论：
    ::: orderedlist
    1.  请确定您使用 [*Multi-page HTML*]{.emphasis}
        格式查看文档。另外，确定 [**Feedback**]{.strong}
        按钮出现在文档页的右上方。
    2.  用鼠标指针高亮显示您想评论的文本部分。
    3.  点在高亮文本上弹出的 [**Add Feedback**]{.strong}。
    4.  按照显示的步骤操作。
    :::
-   要提交更复杂的反馈，请创建一个 Bugzilla ticket：
    ::: orderedlist
    1.  进入
        [Bugzilla](https://bugzilla.redhat.com/enter_bug.cgi?product=Red%20Hat%20Enterprise%20Linux%208){.link}
        网站。
    2.  在 Component 中选择 [**Documentation**]{.strong}。
    3.  在 [**Description**]{.strong}
        中输入您要提供的信息。包括文档相关部分的链接。
    4.  点 [**Submit Bug**]{.strong}。
    :::
:::
:::
[]{#using-secure-communications-between-two-systems-with-openssh_securing-networks.html}
::: chapter
::: titlepage
# []{#using-secure-communications-between-two-systems-with-openssh_securing-networks.html#using-secure-communications-between-two-systems-with-openssh_securing-networks}第 1 章 使用 OpenSSH 的两个系统间使用安全通讯 {.title}
:::
SSH(Secure
Shell)是一种协议，它使用客户端-服务器架构在两个系统之间提供安全通信，并允许用户远程登录服务器主机系统。和其它远程沟通协议，如
FTP 或 Telnet 不同，SSH
会加密登录会话，它会阻止入侵者从连接中收集未加密的密码。
Red Hat Enterprise Linux 8 包括基本的 `OpenSSH`{.literal} 软件包：常规
`openssh`{.literal} 软件包、open `ssh-server`{.literal} 软件包和
`openssh-clients`{.literal} 软件包。请注意，`OpenSSH`{.literal}
软件包需要 `OpenSSL`{.literal} 软件包
`openssl-libs`{.literal}，它会安装几个重要的加密库来启用
`OpenSSH`{.literal} 对通讯进行加密。
::: section
::: titlepage
# []{#using-secure-communications-between-two-systems-with-openssh_securing-networks.html#ssh-and-openssh_using-secure-communications-between-two-systems-with-openssh}SSH 和 OpenSSH {.title}
:::
SSH（安全 Shell）是一个登录远程机器并在该机器上执行命令的程序。SSH
协议通过不安全的网络在两个不可信主机间提供安全加密的通讯。您还可以通过安全频道转发
X11 连接和任意 TCP/IP 端口。
当 SSH 协议用于远程 shell 登录或文件复制时，SSH
协议可缓解拦截两个系统之间的通信和特定主机模仿等安全威胁。这是因为 SSH
客户端和服务器使用数字签名来验证其身份。另外，所有客户端和服务器系统之间的沟通都是加密的。
主机密钥验证使用 SSH 协议的主机。主机密钥是首次安装 `OpenSSH`{.literal}
时或主机第一次引导时自动生成的加密密钥。
`OpenSSH`{.literal} 是很多 Linux、UNIX 和类似操作系统支持的 SSH
协议的实现。它包括 OpenSSH 客户端和服务器需要的核心文件。OpenSSH
组件由以下用户空间工具组成：
::: itemizedlist
-   `ssh`{.literal} 是一个远程登录程序（SSH 客户端）
-   `sshd`{.literal} 是一个 `OpenSSH`{.literal} SSH 守护进程
-   `scp`{.literal} 是一个安全的远程文件复制程序
-   `sftp`{.literal} 是一个安全的文件传输程序
-   `ssh-agent`{.literal} 是用于缓存私钥的身份验证代理
-   `ssh-add`{.literal} 为 `ssh-agent`{.literal}添加私钥身份
-   `ssh-keygen`{.literal} 生成、管理并转换 `ssh`{.literal} 验证密钥
-   `ssh-copy-id`{.literal} 是一个在远程 SSH 服务器的
    `authorized_keys`{.literal} 文件中添加本地公钥的脚本
-   `ssh-keyscan`{.literal} - 收集 SSH 公共主机密钥
:::
现有两个 SSH 版本： 版本 1 和较新的版本 2。Red Hat Enterprise Linux 8
中的 `OpenSSH`{.literal} 套件只支持 SSH 版本
2，其增强的密钥交换算法不会受到版本 1 中已知漏洞的影响。
`OpenSSH`{.literal}，作为 RHEL
核心加密子系统之一使用系统范围的加密策略。这样可确保在默认配置中禁用弱密码套件和加密算法。要调整策略，管理员必须使用
`update-crypto-policies`{.literal}
命令更严格或者更松一些设置，或者手动选择不使用系统范围的加密策略。
`OpenSSH`{.literal} 套件使用两组不同的配置文件：用于客户端程序（即
`ssh`{.literal}、`scp`{.literal} 和
`sftp`{.literal}）的配置文件，和用于服务器（`sshd`{.literal}
守护进程）的配置文件。系统范围的 SSH 配置信息保存在
`/etc/ssh/`{.literal} 目录中。用户特定的 SSH
配置信息保存在用户主目录中的 `~/.ssh/`{.literal} 中。有关 OpenSSH
配置文件的详细列表，请查看 `sshd(8)`{.literal} man page 中的
`FILES`{.literal} 部分。
::: itemizedlist
**其它资源**
-   使用 man `-k ssh 命令列出 man page`{.literal}。
-   [使用系统范围的加密策略](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/security_hardening/using-the-system-wide-cryptographic-policies_security-hardening){.link}。
:::
:::
::: section
::: titlepage
# []{#using-secure-communications-between-two-systems-with-openssh_securing-networks.html#configuring-and-starting-an-openssh-server_using-secure-communications-between-two-systems-with-openssh}配置并启动 OpenSSH 服务器 {.title}
:::
使用以下步骤进行您的环境以及启动 `OpenSSH`{.literal}
服务器所需的基本配置。请注意，在默认 RHEL 安装后，`sshd`{.literal}
守护进程已经启动，服务器主机密钥会自动被创建。
::: itemizedlist
**先决条件**
-   已安装 `openssh-server`{.literal} 软件包。
:::
::: orderedlist
**流程**
1.  在当前会话中启动 `sshd`{.literal} 守护进程，并在引导时自动启动：
    ``` screen
    # systemctl start sshd
    # systemctl enable sshd
    ```
2.  要为 `/etc/ssh/sshd_config`{.literal} 配置文件中的
    `ListenAddress`{.literal} 指令指定默认地址
    `0.0.0.0`{.literal}（IPv4）或 `::`{.literal}
    （IPv6），并使用较慢的动态网络配置，将
    `network-online.target`{.literal} 目标单元的依赖关系添加到
    `sshd.service`{.literal} 单元文件中。要做到这一点，使用以下内容创建
    `/etc/systemd/system/sshd.service.d/local.conf`{.literal} 文件：
    ``` screen
    [Unit]
    Wants=network-online.target
    After=network-online.target
    ```
3.  查看 `/etc/ssh/sshd_config`{.literal} 配置文件中的
    `OpenSSH`{.literal} 服务器设置是否满足您的情况要求。
4.  另外，还可通过编辑 `/etc/issue`{.literal} 文件来更改您的
    `OpenSSH`{.literal} 服务器在客户端验证前显示的欢迎信息，例如：
    ``` screen
    Welcome to ssh-server.example.com
    Warning: By accessing this server, you agree to the referenced terms and conditions.
    ```
    确保 `/etc/ssh/sshd_config`{.literal} 中未注释掉 `Banner`{.literal}
    选项，其值包含 `/etc/issue`{.literal} ：
    ``` screen
    # less /etc/ssh/sshd_config | grep Banner
    Banner /etc/issue
    ```
    请注意：要在成功登录后改变显示的信息，您必须编辑服务器上的
    `/etc/motd`{.literal} 文件。详情请查看 `pam_motd`{.literal} man
    page。
5.  重新载入 `systemd`{.literal} 配置并重启 `sshd`{.literal}
    以应用更改：
    ``` screen
    # systemctl daemon-reload
    # systemctl restart sshd
    ```
:::
::: orderedlist
**验证**
1.  检查 `sshd`{.literal} 守护进程是否正在运行：
    ``` screen
    # systemctl status sshd
    ● sshd.service - OpenSSH server daemon
       Loaded: loaded (/usr/lib/systemd/system/sshd.service; enabled; vendor preset: enabled)
       Active: active (running) since Mon 2019-11-18 14:59:58 CET; 6min ago
         Docs: man:sshd(8)
               man:sshd_config(5)
     Main PID: 1149 (sshd)
        Tasks: 1 (limit: 11491)
       Memory: 1.9M
       CGroup: /system.slice/sshd.service
               └─1149 /usr/sbin/sshd -D -oCiphers=aes128-ctr,aes256-ctr,aes128-cbc,aes256-cbc -oMACs=hmac-sha2-256,>
    Nov 18 14:59:58 ssh-server-example.com systemd[1]: Starting OpenSSH server daemon...
    Nov 18 14:59:58 ssh-server-example.com sshd[1149]: Server listening on 0.0.0.0 port 22.
    Nov 18 14:59:58 ssh-server-example.com sshd[1149]: Server listening on :: port 22.
    Nov 18 14:59:58 ssh-server-example.com systemd[1]: Started OpenSSH server daemon.
    ```
2.  使用 SSH 客户端连接到 SSH 服务器。
    ``` screen
    # ssh PI:EMAIL
    ECDSA key fingerprint is SHA256:dXbaS0RG/UzlTTku8GtXSz0S1++lPegSy31v3L/FAEc.
    Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
    Warning: Permanently added 'ssh-server-example.com' (ECDSA) to the list of known hosts.
    PI:EMAIL's password:
    ```
:::
::: itemizedlist
**其它资源**
-   `sshd(8)`{.literal} 和 `sshd_config(5)`{.literal} 手册页。
:::
:::
::: section
::: titlepage
# []{#using-secure-communications-between-two-systems-with-openssh_securing-networks.html#setting-an-openssh-server-for-key-based-authentication_using-secure-communications-between-two-systems-with-openssh}为基于密钥的身份验证设置 OpenSSH 服务器 {.title}
:::
要提高系统安全性，请通过在 OpenSSH
服务器上禁用密码身份验证来强制进行基于密钥的身份验证。
::: itemizedlist
**先决条件**
-   已安装 `openssh-server`{.literal} 软件包。
-   `sshd`{.literal} 守护进程正在服务器中运行。
:::
::: orderedlist
**流程**
1.  在文本编辑器中打开 `/etc/ssh/sshd_config`{.literal} 配置，例如：
    ``` screen
    # vi /etc/ssh/sshd_config
    ```
2.  将 `PasswordAuthentication`{.literal} 选项改为 `no`{.literal}:
    ``` screen
    PasswordAuthentication no
    ```
    在新默认安装以外的系统中，检查 `PubkeyAuthentication`{.literal}
    没有被设置，并且将 `ChallengeResponseAuthentication`{.literal}
    指令设为
    `no`{.literal}。如果您要进行远程连接，而不使用控制台或带外访问，在禁用密码验证前测试基于密钥的登录过程。
3.  要在 NFS 挂载的主目录中使用基于密钥的验证，启用
    `use_nfs_home_dirs`{.literal} SELinux 布尔值：
    ``` screen
    # setsebool -P use_nfs_home_dirs 1
    ```
4.  重新载入 `sshd`{.literal} 守护进程以应用更改：
    ``` screen
    # systemctl reload sshd
    ```
:::
::: itemizedlist
**其它资源**
-   `sshd(8)`{.literal}, `sshd_config(5)`{.literal} 和
    `setsebool(8)`{.literal} 手册页。
:::
:::
::: section
::: titlepage
# []{#using-secure-communications-between-two-systems-with-openssh_securing-networks.html#generating-ssh-key-pairs_using-secure-communications-between-two-systems-with-openssh}生成 SSH 密钥对 {.title}
:::
使用这个流程在本地系统中生成 SSH 密钥对，并将生成的公钥复制到
`OpenSSH`{.literal}
服务器中。如果正确配置了服务器，您可以在不提供任何密码的情况下登录到
`OpenSSH`{.literal} 服务器。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
如果以 `root`{.literal} 用户身份完成以下步骤，则只有 `root`{.literal}
用户可以使用密钥。
:::