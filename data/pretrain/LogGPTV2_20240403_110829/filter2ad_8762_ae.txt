  * 检查是否设置了 `x_set`， 如果有添加 `-x none`；
  * 检查是否设置了宏 `__ANDORID__` ，如果没有，判断 `bit_mode` 的值：
    * 如果为0，即没有`-m32`和`-m64`，添加 `obj_path/afl-llvm-rt.o` ；
    * 如果为32，添加 `obj_path/afl-llvm-rt-32.o` ；
    * 如果为64，添加 `obj_path/afl-llvm-rt-64.o` 。
##### 2\. afl-llvm-pass.so.cc
`afl-llvm-pass.so.cc` 文件实现了 LLVM-mode 下的一个插桩 LLVM Pass。
本文不过多关心如何实现一个LLVM Pass，重点分析该pass的实现逻辑。
该文件只有一个Transform pass：`AFLCoverage`，继承自 `ModulePass`，实现了一个 `runOnModule`
函数，这也是我们需要重点分析的函数。
    namespace {  class AFLCoverage : public ModulePass {    public:      static char ID;      AFLCoverage() : ModulePass(ID) { }      bool runOnModule(Module &M) override;      // StringRef getPassName() const override {      //  return "American Fuzzy Lop Instrumentation";      // }  };}
###### 1\. pass注册
对pass进行注册的部分源码如下：
    static void registerAFLPass(const PassManagerBuilder &,                            legacy::PassManagerBase &PM) {  PM.add(new AFLCoverage());}static RegisterStandardPasses RegisterAFLPass(    PassManagerBuilder::EP_ModuleOptimizerEarly, registerAFLPass);static RegisterStandardPasses RegisterAFLPass0(    PassManagerBuilder::EP_EnabledOnOptLevel0, registerAFLPass);
其核心功能为向PassManager注册新的pass，每个pass相互独立。
对于pass注册的细节部分请读者自行研究llvm的相关内容。
###### 2\. runOnModule 函数
该函数为该文件中的关键函数，其控制流程图如下：
  * 首先，通过 `getContext()` 来获取 `LLVMContext` ，获取进程上下文：
        LLVMContext &C = M.getContext();IntegerType *Int8Ty  = IntegerType::getInt8Ty(C);IntegerType *Int32Ty = IntegerType::getInt32Ty(C);
  * 设置插桩密度：读取环境变量 `AFL_INST_RATIO` ，并赋值给 `inst_ratio`，其值默认为100，范围为 1～100，该值表示插桩概率；
  * 获取只想共享内存shm的指针以及上一个基本块的随机ID：
        GlobalVariable *AFLMapPtr =  new GlobalVariable(M, PointerType::get(Int8Ty, 0), false,                     GlobalValue::ExternalLinkage, 0, "__afl_area_ptr");GlobalVariable *AFLPrevLoc = new GlobalVariable(  M, Int32Ty, false, GlobalValue::ExternalLinkage, 0, "__afl_prev_loc",  0, GlobalVariable::GeneralDynamicTLSModel, 0, false);
  * 进入插桩过程：
    * 通过 `for` 循环遍历每个BB（基本块），寻找BB中适合插入桩代码的位置，然后通过初始化 `IRBuilder` 实例执行插入；
                BasicBlock::iterator IP = BB.getFirstInsertionPt();      IRBuilder<> IRB(&(*IP));
    * 随机创建当前BB的ID，然后插入load指令，获取前一个BB的ID；
                if (AFL_R(100) >= inst_ratio) continue; // 如果大于插桩密度，进行随机插桩/* Make up cur_loc */unsigned int cur_loc = AFL_R(MAP_SIZE);ConstantInt *CurLoc = ConstantInt::get(Int32Ty, cur_loc);  // 随机创建当前基本块ID/* Load prev_loc */LoadInst *PrevLoc = IRB.CreateLoad(AFLPrevLoc);PrevLoc->setMetadata(M.getMDKindID("nosanitize"), MDNode::get(C, None));Value *PrevLocCasted = IRB.CreateZExt(PrevLoc, IRB.getInt32Ty()); // 获取上一个基本块的随机ID
    * 插入load指令，获取共享内存的地址，并调用 `CreateGEP` 函数获取共享内存中指定index的地址；
                /* Load SHM pointer */LoadInst *MapPtr = IRB.CreateLoad(AFLMapPtr);MapPtr->setMetadata(M.getMDKindID("nosanitize"), MDNode::get(C, None));Value *MapPtrIdx =  IRB.CreateGEP(MapPtr, IRB.CreateXor(PrevLocCasted, CurLoc));
    * 插入load指令，获取对应index地址的值；插入add指令加一，然后创建store指令写入新值，并更新共享内存；
                /* Update bitmap */LoadInst *Counter = IRB.CreateLoad(MapPtrIdx);Counter->setMetadata(M.getMDKindID("nosanitize"), MDNode::get(C, None));Value *Incr = IRB.CreateAdd(Counter, ConstantInt::get(Int8Ty, 1));IRB.CreateStore(Incr, MapPtrIdx)        ->setMetadata(M.getMDKindID("nosanitize"), MDNode::get(C, None));
    * 右移 `cur_loc` ，插入store指令，更新 `__afl_prev_loc`；
                /* Set prev_loc to cur_loc >> 1 */StoreInst *Store =  IRB.CreateStore(ConstantInt::get(Int32Ty, cur_loc >> 1), AFLPrevLoc);Store->setMetadata(M.getMDKindID("nosanitize"), MDNode::get(C, None));
    * 最后对插桩计数加1；
    * 扫描下一个BB，根据设置是否为quiet模式等，并判断 `inst_blocks` 是否为0，如果为0则说明没有进行插桩；
                if (!be_quiet) {    if (!inst_blocks) WARNF("No instrumentation targets found.");    else OKF("Instrumented %u locations (%s mode, ratio %u%%).",             inst_blocks, getenv("AFL_HARDEN") ? "hardened" :             ((getenv("AFL_USE_ASAN") || getenv("AFL_USE_MSAN")) ?              "ASAN/MSAN" : "non-hardened"), inst_ratio);  }
整个插桩过程较为清晰，没有冗余动作和代码。
##### 3\. afl-llvm-rt.o.c
该文件主要实现了llvm_mode的3个特殊功能：`deferred instrumentation, persistent mode,trace-pc-guard mode`。
###### 1\. deferred instrumentation
AFL会尝试通过只执行一次目标二进制文件来提升性能，在 `main()`
之前暂停程序，然后克隆“主”进程获得一个稳定的可进行持续fuzz的目标。简言之，避免目标二进制文件的多次、重复的完整运行，而是采取了一种类似快照的机制。
虽然这种机制可以减少程序运行在操作系统、链接器和libc级别的消耗，但是在面对大型配置文件的解析时，优势并不明显。
在这种情况下，可以将 `forkserver`
的初始化放在大部分初始化工作完成之后、二进制文件解析之前来进行，这在某些情况下可以提升10倍以上的性能。我们把这种方式称为LLVM模式下的
`deferred instrumentation`。
首先，在代码中寻找可以进行延迟克隆的合适的、不会破坏原二进制文件的位置，然后添加如下代码：
    #ifdef __AFL_HAVE_MANUAL_CONTROL    __AFL_INIT();#endif
以上代码插入，在 `afl-clang-fast.c` 文件中有说明：
    cc_params[cc_par_cnt++] = "-D__AFL_INIT()="    "do { static volatile char *_A __attribute__((used)); "    " _A = (char*)\"" DEFER_SIG "\"; "#ifdef __APPLE__    "__attribute__((visibility(\"default\"))) "    "void _I(void) __asm__(\"___afl_manual_init\"); "#else    "__attribute__((visibility(\"default\"))) "    "void _I(void) __asm__(\"__afl_manual_init\"); "#endif /* ^__APPLE__ */
`__afl_manual_init()` 函数实现如下：
    /* This one can be called from user code when deferred forkserver mode    is enabled. */void __afl_manual_init(void) {  static u8 init_done;  if (!init_done) {    __afl_map_shm();    __afl_start_forkserver();    init_done = 1;  }}
首先，判断是否进行了初始化，没有则调用 `__afl_map_shm()` 函数进行共享内存初始化。 `__afl_map_shm()` 函数如下：
    /* SHM setup. */static void __afl_map_shm(void) {  u8 *id_str = getenv(SHM_ENV_VAR); // 读取环境变量 SHM_ENV_VAR 获取id  if (id_str) { // 成功读取id    u32 shm_id = atoi(id_str);    __afl_area_ptr = shmat(shm_id, NULL, 0); // 获取shm地址，赋给 __afl_area_ptr    /* Whooooops. */    if (__afl_area_ptr == (void *)-1) _exit(1);  // 异常则退出    /* Write something into the bitmap so that even with low AFL_INST_RATIO,       our parent doesn't give up on us. */    __afl_area_ptr[0] = 1; // 进行设置  }}
然后，调用 `__afl_start_forkserver()` 函数开始执行forkserver：
    /* Fork server logic. */static void __afl_start_forkserver(void) {  static u8 tmp[4];  s32 child_pid;  u8  child_stopped = 0;  /* Phone home and tell the parent that we're OK. If parent isn't there,     assume we're not running in forkserver mode and just execute program. */  if (write(FORKSRV_FD + 1, tmp, 4) != 4) return; // 写入4字节到状态管道，通知 fuzzer已准备完成  while (1) {    u32 was_killed;    int status;    /* Wait for parent by reading from the pipe. Abort if read fails. */    if (read(FORKSRV_FD, &was_killed, 4) != 4) _exit(1);     /* If we stopped the child in persistent mode, but there was a race       condition and afl-fuzz already issued SIGKILL, write off the old       process. */         // 处于persistent mode且子进程已被killed    if (child_stopped && was_killed) {      child_stopped = 0;      if (waitpid(child_pid, &status, 0) #include #include #include #include /* Main entry point. */int main(int argc, char** argv) {  char buf[100]; /* Example-only buffer, you'd replace it with other global or                    local variables appropriate for your use case. */  while (__AFL_LOOP(1000)) {    /*** PLACEHOLDER CODE ***/    /* STEP 1: 初始化所有变量 */    memset(buf, 0, 100);    /* STEP 2: 读取输入数据，从文件读入时需要先关闭旧的fd然后重新打开文件*/    read(0, buf, 100);    /* STEP 3: 调用待fuzz的code*/    if (buf[0] == 'f') {      printf("one\n");      if (buf[1] == 'o') {        printf("two\n");        if (buf[2] == 'o') {          printf("three\n");          if (buf[3] == '!') {            printf("four\n");            abort();          }        }      }    }    /*** END PLACEHOLDER CODE ***/  }  /* 循环结束，正常结束。AFL会重启进程，并清理内存、剩余fd等 */  return 0;}
宏定义 `__AFL_LOOP` 内部调用 `__afl_persistent_loop` 函数：
    cc_params[cc_par_cnt++] = "-D__AFL_LOOP(_A)="    "({ static volatile char *_B __attribute__((used)); "    " _B = (char*)\"" PERSIST_SIG "\"; "#ifdef __APPLE__    "__attribute__((visibility(\"default\"))) "    "int _L(unsigned int) __asm__(\"___afl_persistent_loop\"); "#else    "__attribute__((visibility(\"default\"))) "    "int _L(unsigned int) __asm__(\"__afl_persistent_loop\"); "#endif /* ^__APPLE__ */    "_L(_A); })";
`__afl_persistent_loop(unsigned int max_cnt)` 的逻辑如下：
结合源码梳理一下其逻辑：
    /* A simplified persistent mode handler, used as explained in README.llvm. */int __afl_persistent_loop(unsigned int max_cnt) {  static u8  first_pass = 1;  static u32 cycle_cnt;  if (first_pass) {    if (is_persistent) {      memset(__afl_area_ptr, 0, MAP_SIZE);      __afl_area_ptr[0] = 1;      __afl_prev_loc = 0;    }    cycle_cnt  = max_cnt;    first_pass = 0;    return 1;  }  if (is_persistent) {    if (--cycle_cnt) {      raise(SIGSTOP);      __afl_area_ptr[0] = 1;      __afl_prev_loc = 0;      return 1;    } else {      __afl_area_ptr = __afl_area_initial;    }  }  return 0;}
  * 首先判读是否为第一次执行循环，如果是第一次：
    * 如果 `is_persistent` 为1，清空 `__afl_area_ptr`，设置 `__afl_area_ptr[0]` 为1，`__afl_prev_loc` 为0；
    * 设置 `cycle_cnt` 的值为传入的 `max_cnt` 参数，然后设置 `first_pass=0` 表示初次循环结束，返回1；
  * 如果不是第一次执行循环，在 persistent mode 下，且 `--cycle_cnt` 大于1：
    * 发出信号 `SIGSTOP` 让当前进程暂停
    * 设置 `__afl_area_ptr[0]` 为1，`__afl_prev_loc` 为0，然后直接返回1
    * 如果 `cycle_cnt` 为0，设置`__afl_area_ptr`指向数组 `__afl_area_initial`。
  * 最后返回0
重新总结一下上面的逻辑：
  * 第一次执行loop循环，进行初始化，然后返回1，此时满足 `while(__AFL_LOOP(1000)`， 于是执行一次fuzz，计数器cnt减1，抛出SIGSTOP信号暂停子进程；
  * 第二次执行loop循环，恢复之前暂停的子进程继续执行，并设置 `child_stopped` 为0。此时相当于重新执行了一次程序，重新对 `__afl_prev_loc` 进行设置，随后返回1，再次进入 `while(_AFL_LOOP(1000))` ，执行一次fuzz，计数器cnt减1，抛出SIGSTOP信号暂停子进程；
  * 第1000次执行，计数器cnt此时为0，不再暂停子进程，令 `__afl_area_ptr` 指向无关数组 `__afl_area_initial` ，随后子进程结束。
###### 3\. trace-pc-guard mode
该功能的使用需要设置宏 `AFL_TRACE_PC=1` ，然后再执行 `afl-clang-fast` 时传入参数 `-fsanitize-coverage=trace-pc-guard` 。
该功能的主要特点是会在每个edge插入桩代码，函数 `__sanitizer_cov_trace_pc_guard`
会在每个edge进行调用，该函数利用函数参数 `guard` 指针所指向的 `uint32` 值来确定共享内存上所对应的地址：
    void __sanitizer_cov_trace_pc_guard(uint32_t* guard) {  __afl_area_ptr[*guard]++;}
`guard` 的初始化位于函数 `__sanitizer_cov_trace_pc_guard_init` 中：
    void __sanitizer_cov_trace_pc_guard_init(uint32_t* start, uint32_t* stop) {  u32 inst_ratio = 100;  u8* x;  if (start == stop || *start) return;  x = getenv("AFL_INST_RATIO");  if (x) inst_ratio = atoi(x);  if (!inst_ratio || inst_ratio > 100) {    fprintf(stderr, "[-] ERROR: Invalid AFL_INST_RATIO (must be 1-100).\n");    abort();  }  *(start++) = R(MAP_SIZE - 1) + 1;  while (start 
  2. 
  3. 
  4. 