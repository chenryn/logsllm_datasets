AD
中获取服务甚至端口的大部分信息，那为什么我们还需要扫描网络？我们可能马上攻击的东西是什么？Jenkins？
Tomcat？ ColdFusion？
### 查询 Active Directory {#4_the_drive_compromising_the_network.html#查询-active-directory .calibre15}
我不知道曾经有多少次，好不容易找到了一个域用户帐户和密码，却被告知它只是一个没有其他特权的域用户帐户，但不用担心。我们通常可以在打印机，共享信息工作站，带有服务密码的文本文件，配置文件、iPad、包含密码的
Web
应用程序的页面源代码中中找到这些类型的帐户，但是，对于这些没有其他组成员资格的基本域用户帐户，你可以用来做什么？
**获取有关 AD 中用户的详细信息**
我们可以使用 \@harmj0y 创建的名为
[PowerView](http://bit.ly/2JKTg5d){.pcalibre2 .calibre9 .pcalibre
.pcalibre1 target="_blank"}
的工具来帮我们完成所有的复杂的查询操作。PowerView 是一个 PowerShell
脚本，用于在 Windows 域上获得网络拓扑信息。它包含一组纯 PowerShell
命令替换项，用于各种 Windows 系统中的 `net`{.calibre14 .pcalibre4
.pcalibre3} 命令，这些命令使用 PowerShell AD hooks 和基础的 Win32 API
函数来执行有用的 Windows
域功能\[[http://bit.ly/2r9lYnH](http://bit.ly/2r9lYnH){.pcalibre2
.calibre9 .pcalibre .pcalibre1 target="_blank"}\]
。作为攻击者，我们可以使用 AD 中低权限用户`普通的域用户`{.calibre14
.pcalibre4 .pcalibre3}来利用 PowerView 和 PowerShell 查询
AD（活动目录），甚至不需要本地管理员权限。
让我们通过一个例子来说明我们可以从这个低权限用户那里获得多少数据。在一开始，我们已经在运行
Empire（你可以在 Metasploit、Cobalt Strike
或类似软件都可以），并在受害者系统上执行了 payload。如果你以前从未建立过
Empire，请查看有关建立 Empire 和 Empire payload
的设置章节。一旦我们的代理（agent）与我们的命令和控制服务器通信，我们就可以键入
`info`{.calibre14 .pcalibre4 .pcalibre3}
以查找有关受害者的信息。在本例中，我们已经攻陷了运行完整补丁的 Windows
10系统的主机，该系统的用户名为 neil.pawstrong，位于 CyberspaceKitten
的域中。
![](4-25.png){.calibre11}
接下来，我们希望在不引起太多怀疑和注意的情况下从域中查询信息，我们可以使用
Empire 内部的 PowerView 工具来获取信息。PowerView
查询域控制器（DC）以获取有关用户、用户组、计算机等的信息。我们此次使用
PowerView 将只用来查询域控制器，并且使它看起来像正常通信。
Empire 下有哪些模块可用于信息收集呢？
![](4-26.png){.calibre11}
我们可以从 PowerView 脚本的 get_user
的函数名开始。获取指定域中指定查询用户的信息。通过使用默认设置，我们可以获取有关
AD 中用户的所有信息以及相关信息的转储。
``` calibre21
Module: situational_awareness/network/powerview/get_user
```
![](4-27.png){.calibre11}
在上面的转储文件中，我们可以看到关于其中一个用户
`purri gagarin`{.calibre14 .pcalibre4 .pcalibre3}
的信息。我们得到了什么类型的信息？我们可以看到他们的 sAMAccountName
或用户名，当他们的密码被更改时，看到他们的对象类别是什么，他们是什么权限组的成员，最后登录的时间是什么，等等。使用这个基本的用户转储，我们可以从目录服务中获得大量的信息。我们还能得到什么样的信息呢？
``` calibre21
Module: situational_awareness/network/powerview/get_group_member
```
get-group-member
返回给特定组的成员，并选择"recurse"以查找所有有效的组内成员。我们可以使用
AD 来查找特定组的特定用户。例如，使用以下 Empire
的设置，我们可以搜索属于域管理组的所有域管理员和组：
-   info
-   set Identity "Domain Admins"
-   set Recurse True
-   set FullData True
-   execute
![](4-28.png){.calibre11}
现在，我们有一个用户、组、服务器和服务的收集列表。这将帮助我们了解哪些用户拥有哪些特权。但是，我们仍然需要有关工作站和系统的详细信息。这可能包括版本、创建日期、用途、主机名等。我们可以用一个叫做
get_computer 的模块来获得这些信息。
``` calibre21
Module: situational_awareness/network/powerview/get_computer
```
描述：get_computer 模块可以查询域中当前的计算机对象。
![](4-29.png){.calibre11}
get_computer
查询域控制器可以获得什么信息呢？好吧，我们看到我们可以获得关于机器的信息，比如当它被创建时的
DNS
主机名，自定义名称等等。作为攻击者，最有用的侦察细节之一是获取操作系统类型和操作系统版本。在这种情况下，我们可以看到这个系统是
Windows 10 Build
16299版本。我们可以通过获取这些信息，了解操作系统的最新版本以及它们是否在
Microsoft
的发布信息页上存在修补的补丁：[https://technet.microsoft.com/en-us/windows/release-info.aspx](https://technet.microsoft.com/en-us/windows/release-info.aspx){.pcalibre2
.calibre9 .pcalibre .pcalibre1 target="_blank"} 。
### Bloodhound/Sharphound {#4_the_drive_compromising_the_network.html#bloodhoundsharphound .calibre15}
我们如何利用在侦察阶段收集的所有信息来创建一条攻击线路呢？我们如何能够轻松、快速地得知谁有权限去调用那些功能？回想一下，我们总是试图直接攻击，让一切都达到我们想要的目的，但这总是会增加被抓住的可能性。
Andrew Robbins，Rohan Vazarkar 和 Will Schroeder
已经创造了一种最好的工具，那就是 Bloodhound/Sharphound。在他们的 Github
页面上显示。"Bloodhound/Sharphound 使用图表理论来揭示 Active Directory
环境中隐藏的、出乎意料的关系。攻击者红队可以使用 Bloodhound
轻松识别高度复杂的攻击路径，否则的话将无法快速识别。防御者蓝队可以使用
Sharphound
来识别和消除对应的的攻击路径。"\[[https://github.com/BloodHoundAD/BloodHound](https://github.com/BloodHoundAD/BloodHound){.pcalibre2
.calibre9 .pcalibre .pcalibre1 target="_blank"}\] 。
Bloodhound/Sharphound 的工作原理是在受害者系统上运行一个
Ingestor，然后为用户、组和主机查询
AD（类似于我们以前手工做的）。然后，Ingestor
将尝试连接到每个系统以枚举登录的用户、会话和权限。当然，这个动静会很大。对于采用默认设置（可以修改）的中型企业网站，连接到每个主机系统和使用
Sharphound
查询信息的时间可能不到10分钟。注意，因为这会接触到网络上每个加入域的系统，所以它可能会让你被发现。Bloodhound/Sharphound
中有一个秘密选项，它只查询 Active
Directory，不连接到每个主机系统，但是输出结果非常有限。
目前有两种不同的版本（我相信旧版本很快就会被移除）：
-   在 Empire，你可以使用模块：
    -   usemodule situational_awareness/network/bloodhound
    -   这仍然是查询非常慢的旧的 PowerShell 版本
-   最好的选择是 Sharphound，Sharphound 是最原始的 C# 版本 Bloodhound
    Ingester。这是个更快更稳定的版本。可以用作独立二进制文件，也可以作为
    PowerShell 脚本导入。Sharphound PowerShell 脚本将使用反射和
    assembly.load 加载已编译 BloodHound C# 版本的 ingestor 并将其捕获。
    -   [https://github.com/BloodHoundAD/BloodHound/tree/master/Ingestors](https://github.com/BloodHoundAD/BloodHound/tree/master/Ingestors){.pcalibre2
        .calibre9 .pcalibre .pcalibre1 target="_blank"}
要运行 Bloodhound/Sharphound Ingestor，你可能需要指定多个集合方法：
-   Group - Collect group membership information
    -   收集组成员身份信息
-   LocalGroup - Collect local admin information for computers
    -   收集计算机的本地管理信息
-   Session - Collect session information for computers
    -   收集计算机的会话信息
-   SessionLoop - Continuously collect session information until killed
    -   持续收集会话信息直到结束
-   Trusts - Enumerate domain trust data
    -   列举域内信任数据
-   ACL - Collect ACL (Access Control List) data
    -   收集ACL（访问控制列表）数据
-   ComputerOnly - Collects Local Admin and Session data
    -   收集本地管理和会话数据
-   GPOLocalGroup - Collects Local Admin information using GPO (Group
    Policy Objects)
    -   使用GPO（组策略对象）收集本地管理信息
-   LoggedOn - Collects session information using privileged methods
    (needs admin!)
    -   使用特权方法收集会话信息（需要管理员权限！）
-   ObjectProps - Collects node property information for users and
    computers
    -   为用户和计算机收集节点属性信息
-   Default - Collects Group Membership， Local Admin， Sessions， and
    Domain Trusts
    -   收集组成员、本地管理员、会话和域信任关系
在目标系统上运行 Blood/Sharphound:
-   运行 PowerShell，然后导入 Bloodhound.ps1 或者 SharpHound.ps1：
    -   Invoke-Bloodhound -CollectionMethod Default
    -   Invoke-Bloodhound -CollectionMethod
        ACL，ObjectProps，Default-CompressData -RemoveCSV -NoSaveCache
-   运行可执行文件:
    -   SharpHound.exe -c Default，ACL，Session，LoggedOn，Trusts，Group
一旦完成了
Bloundhound/Sharphound，这四个文件将被保存到受害者机器上。下载并处理这些文件，并将它们复制到你的
kali 上。接下来，我们需要启动 Neo4j
服务器并导入这些数据来构建相关关系图。
打开 Bloodhound
1.  apt-get install bloodhound
2.  neo4j console
3.  打开浏览器访问
    [http://localhost:7474](http://localhost:7474){.pcalibre2 .calibre9
    .pcalibre .pcalibre1 target="_blank"}
    1.  连接到 bolt://localhost:7687
    2.  用户名: neo4j
    3.  密码: neo4j
    4.  修改密码
4.  在一个终端中运行 Bloodhound：
    1.  bloodhound
    2.  数据库 URL: bolt://127.0.0.1:7687
    3.  用户名: neo4j
    4.  密码：新的密码
5.  加载数据
    1.  在右侧，有一个 `Upload Data`{.calibre14 .pcalibre4 .pcalibre3}
        的按钮
    2.  上传 `acls.csv`{.calibre14 .pcalibre4
        .pcalibre3}，`group_membership.csv`{.calibre14 .pcalibre4