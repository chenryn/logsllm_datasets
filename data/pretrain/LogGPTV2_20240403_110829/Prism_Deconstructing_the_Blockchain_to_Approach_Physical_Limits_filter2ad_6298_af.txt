Certainly! Here is the optimized and refined version of your text:

---

### Voting Bounds and Fast Confirmation in Blockchain Protocols

#### Voting Bounds
The voting bounds for a proposer block \( p_n \) at round \( r \), denoted as \([V_{\text{min}}(r), V_{\text{max}}(r)]\), determine the maximum number of votes that the block can lose or gain from uncast votes and votes reversed by the adversary. We also consider a potential private proposer block, with an upper bound on the maximum number of votes it can accumulate in the future. A set of proposal blocks can be fast-confirmed whenever the upper confidence bound of the private block is below the lower confidence bound of the public proposal block with the largest lower confidence bound.

Formally, let \( P_\ell(r) = \{p_1, p_2, \ldots\} \) be the set of proposer blocks at level \(\ell\) at round \( r \). Let \( V_d^{n}(r) \) be the number of votes at depth \( d \) or greater for proposer block \( p_n \) at round \( r \). Define:
\[
\delta_d := \max \left( \frac{1}{8 \log m}, \frac{\varepsilon}{4 \bar{f} v_d} \right)
\]
\[
V_{\text{max}}^n(r) := \max_{d \geq 0} \left( V_d^n(r) + 2 \delta_d m \right)
\]
\[
V_{\text{min}}^n(r) := V_d^n(r) - 2 \delta_d m
\]
\[
V_{\text{private}}^{\text{max}}(r) := m - \max_{p_n' \in P_\ell(r) \setminus \{p_n\}} V_{\text{min}}^{n'}(r)
\]
\[
V_{\text{private}}^{\text{min}}(r) := 0
\]

**Definition 4.5. Proposer Set Confirmation Policy:**
If
\[
\max_n V_{\text{min}}^n(r) > V_{\text{private}}^{\text{max}}(r),
\]
then the set of proposer blocks can be confirmed.

#### Fast Confirmation of Honest Transactions
In the previous section, we showed that one can fast-confirm a set of proposer block sequences that are guaranteed to contain the prefix of the final totally ordered leader sequence. Each proposer block sequence creates an ordered ledger of transactions using reference links to transaction blocks. In each ledger, double-spends are removed to sanitize the ledger. If a transaction appears in all sanitized ledgers, it is guaranteed to be in the final total ordered sanitized ledger, and the transaction can be fast-confirmed. All honest transactions without double-spends eventually have this list-liveness property; when only a single honest proposer block appears in a level and becomes the leader, it adds any honest transactions that have not already appeared in at least one ledger in the list.

Due to the positive chain quality of the leader sequence (Theorem 4.2), an isolated honest level eventually occurs. The latency of confirming honest transactions is bounded by the sum of the latency of list confirmation (Theorem 4.6) and the latency of waiting for this event to occur (Figure 10).

**Theorem 4.7 (List-Liveness):** Assume \( \beta < 0.5 \). If an honest transaction without double-spends is mined in a transaction block in round \( r \), then with probability \( 1 - \frac{r}{m^{16 \log m}} \), it will appear in all ledgers corresponding to proposer block sequences after an expected latency of no more than
\[
\frac{2592}{(1 - 2\beta)^3 \bar{f} v} \log \left( \frac{50}{1 - 2\beta} \right)
\]
rounds.

**Proof:** See Appendix F.
\(\blacksquare\)

Figure 10 shows the various components of the overall latency we analyzed. The confirmation latency from the time an honest transaction enters a block to the time it is confirmed is bounded by the sum of the latencies in Theorems 4.6 and 4.7.

Repeating the analysis of Theorem 4.3, we get the following:

**Theorem 4.8 (Latency):** Theorems 4.6 and 4.7 guarantee that the expected \(\varepsilon\)-latency for all honest transactions (Definition 8) is at most \( r(\beta) \) rounds for \( \beta < 0.5 \), where
\[
r(\beta) := \max \left( c_1(\beta), c_2(\beta) \right) \frac{B_v}{C} \log \left( \frac{1}{\varepsilon} \right)
\]
where
\[
c_1(\beta) := \frac{5400 (1 - \beta)}{(1 - 2\beta)^3 \log \left( \frac{1 - \beta}{50 (1 - 2\beta)} \right)}
\]
\[
c_2(\beta) := \frac{54000}{(1 - 2\beta)^3 \log \left( \frac{\beta}{1 - 2\beta} \right)}
\]

Therefore, the honest transactions are confirmed in
\[
\max \left( c_1(\beta) D, c_2(\beta) \frac{B_v}{C} \right) \log \left( \frac{1}{\varepsilon} \right)
\]
seconds.

### Simulations
Theorem 4.8 provides a theoretical upper bound on the expected latency, which matches the physical limit of propagation time up to constant factors. Characterizing the exact constants is an interesting research direction but is outside the scope of this paper. One can empirically estimate the average latency values by simulating the Prism protocol and its confirmation rule. The purpose of this section is to conduct such a simulation in the honest setting as well as a variety of adversarial settings.

**Setup:**
We simulate a network with \( m = 1,000 \) voter chains, where \( D \approx \Delta = 1 \) second. We run our proposer tree and each voter tree at a rate of \( \bar{f} = 1 \) block/10 seconds. Our simulations measure the latency for transaction confirmation under three scenarios: no attack, a balancing attack, and a censorship attack. By design, our confirmation rule is robust against the common private Nakamoto attack [16], where the adversary withholds a proposer block and corresponding forked voter blocks to reverse a confirmed proposal block. In this section, we show figures for an adversary deploying \( \tilde{\beta} = 0.25 \) fraction of total hash power, where \( \tilde{\beta} \) denotes the fraction of hash power being actually used for the attack (while \( \beta \) is the maximum tolerable fraction of adversarial hash power, without losing consistency and liveness). We set the confirmation reliability conservatively at \( \varepsilon = e^{-20} \). Experiments for additional parameter settings can be found in Appendix J. We compare against the longest-chain protocol, for the same block generation rate of 1 block per 10 seconds.

**No Attack:**
We start by considering a setting where Prism’s parameters are chosen to withstand an attacker of hash power \( \beta \), but the adversary is not actively conducting any attack. Since the confirmation rule must still defend against \( \beta \) adversarial hash power, latency depends on \( \beta \). Honest nodes vote on the earliest-seen proposer block, with results shown in Figure 11(a). In Bitcoin, a confirmed transaction has to be deeper in the chain for larger \( \beta \); in Prism, the voter blocks have to be deeper. We see that Prism’s latency is significantly smaller than that of Nakamoto’s longest chain protocol, and much closer to the physical limit. Note that since there is no active adversary, double-spend transactions can be resolved with the same latency as honest transactions.

**Balancing Attack:**
In a balancing attack, the goal of the adversary is to prevent confirmation by casting all of its votes so as to compete with the current proposer leader block. We begin this attack with two competing proposer blocks at the same level (say level 0), \( A \) and \( B \). Consider an honest (non-double-spent) transaction that is referred by at least one of the two proposer blocks. The adversary’s goal is to prevent the system from confirming this transaction by balancing votes on the two proposer blocks. That is, if block \( A \) currently has the majority of votes and the adversary mines a voter block in the \( i \)-th voter tree:
1. If voter tree \( i \) has not yet voted on level 0, the adversary votes on the minority block, \( B \).
2. If voter tree \( i \) voted on level 0 for block \( B \), the adversary appends its block to the longest chain, thereby reinforcing the vote for the losing proposer block.
3. If voter tree \( i \) voted on level 0 for block \( A \), the adversary tries to fork the \( i \)-th voter tree to vote for \( B \) instead. If there is no vote for \( B \) in the voter tree, the adversary creates one. If there is already a fork voting for \( B \), the adversary appends to this fork.

The balancing attack is one of the most severe and natural attacks on Prism. The results of this simulation are shown in Figure 11(b). Notice that the latency of honest transaction confirmation increases by a factor of about 2x under a balancing attack, but does not affect the longest-chain protocol. Despite this, Prism’s latency is still far lower than that of the longest-chain protocol.

Next, we consider double-spent transactions. The latency for double-spent transactions is the same as honest transactions in the longest-chain protocol, so the blue curve does not change. However, the double-spent transaction latency for Prism grows substantially, approaching that of the longest-chain protocol. Indeed, as the active \( \tilde{\beta} \) fraction approaches 0.5, Prism’s latency on double-spent transactions in the presence of attacks on the confirmation process actually exceeds that of the longest-chain protocol, as discussed in Section 4.1 and seen in Figures 20 and 21.

**Censorship Attack:**
Finally, we consider an attacker whose goal is simply to slow down the confirmation of blocks by proposing empty proposer and voter blocks. This has two effects:
1. It delays the creation of a proposer block referencing the transaction block containing the transaction.
2. It delays the confirmation of such a proposer block by delaying the creation of votes on the proposer tree.

The results of this attack are shown in Figure 11(c). The censorship attack adds a delay of between 15-20 seconds to Prism’s confirmation delay compared to the non-adversarial setting. The effect is smaller for the longest-chain protocol, since the only delay comes from delaying the insertion of a transaction into a block. Under a censorship attack, double-spent transactions have the same latency as honest ones.

### Acknowledgements
We thank the Distributed Technologies Research Foundation, the Army Research Office under grant W911NF-18-1-0332-(73198-NS), the National Science Foundation under grants 1705007 and 1651236 for supporting their research program on blockchain technologies. We also thank Applied Protocol Research Inc. for support and for providing a conducive environment that fostered this collaborative research. We also thank Andrew Miller and Mohammad Alizadeh for their comments on an earlier draft. We also thank Soubhik Deb for helping us with the simulations.

### References
[1] Ittai Abraham, Dahlia Malkhi, Kartik Nayak, Ling Ren, and Alexander Spiegelman. Solida: A blockchain protocol based on reconfigurable Byzantine consensus. arXiv preprint arXiv:1612.02916, 2016.
[2] David Aldous and Jim Fill. Reversible Markov Chains and Random Walks on Graphs, 2002.
[3] Gavin Andresen. Weak block thoughts. bitcoin-dev. https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-September/011157.html.
[4] Vitalik Buterin. On slow and fast block times, 2015. https://blog.ethereum.org/2015/09/14/on-slow-and-fast-block-times/.

---

This version aims to improve clarity, coherence, and professionalism while maintaining the technical accuracy of the original text.