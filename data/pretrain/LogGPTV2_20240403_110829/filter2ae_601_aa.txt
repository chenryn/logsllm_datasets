最近准备用开源的反汇编引擎做个项目，研究了OllyDebug的ODDisasm，disasm与assembl部分代码的思想都很值得学习，但毕竟是2000年的产物，指令集只支持x86，也没有对语义的深度分析，于是转向了对Capstone的研究。
Capstone反汇编引擎可以说是如今世界上最优秀的反汇编引擎，IDA，Radare2，Qemu等著名项目都使用了Capstone
Engine，所以选择它来开发是一个不错的选择。  
但在开发时发现官方并未给出详细API文档，网上也没有类似的分析，因此想到自己阅读源码和试验，由此写出了一个简单的非官方版本的API手册，希望能与大家分享。
个人博客： kabeor.cn
## 0x0 开发准备
Capstone官网： 
### 自行编译lib和dll方法
源码： 
下载后解压  
文件结构如下：
> .   ├── arch   │ ├── AArch64   │ ├── ARM   │ ├── EVM   │ ├── M680X   │ ├── M68K   │ ├── Mips   │ ├── PowerPC   │ ├── Sparc   │ ├── SystemZ   │ ├── TMS320C64x   │ ├── X86   │ └── XCore   ├── bindings   │ ├── java   │ ├── ocaml   │ └── python   ├── contrib   ├── cstool   ├── docs   ├── include   ├── msvc   ├── packages   ├── windows   ├── suite   ├── tests   └── xcode 属性->配置属性 如下
生成选项中勾选你需要的支持项即可  
编译后会在当前文件夹Debug目录下生成capstone.lib静态编译库和capstone.dll动态库这样就可以开始使用Capstone进行开发了
如果不想自己编译，官方也提供了官方编译版本  
Win32：
Win64：
选x32或x64将影响后面开发的位数
### 引擎调用测试
新建一个VS项目，将..\capstone-4.0.1\include\capstone中的头文件以及编译好的lib和dll文件全部拷贝到新建项目的主目录下
在VS解决方案中，头文件添加现有项capstone.h，资源文件中添加capstone.lib，重新生成解决方案
那么现在来测试一下我们自己的capstone引擎吧
主文件写入如下代码
    #include 
    #include 
    #include   
    #include "capstone.h"
    using namespace std;
    #define CODE "\x55\x48\x8b\x05\xb8\x13\x00\x00"
    int main(void)
    {
        csh handle;
        cs_insn* insn;
        size_t count;
        if (cs_open(CS_ARCH_X86, CS_MODE_64, &handle)) {
            printf("ERROR: Failed to initialize engine!\n");
            return -1;
        }
        count = cs_disasm(handle, (unsigned char*)CODE, sizeof(CODE) - 1, 0x1000, 0, &insn);
        if (count) {
            size_t j;
            for (j = 0; j  用法： `csh handle;`
#### cs_arch
架构选择
    enum cs_arch {
        CS_ARCH_ARM = 0,    /// 用法：API中cs_arch参数填入枚举内容，如API中cs_open(cs_arch arch, cs_mode mode, csh
> *handle);第一个参数填CS_ARCH_X86则支持X86 架构
#### cs_mode
模式选择
    enum cs_mode {
        CS_MODE_LITTLE_ENDIAN = 0,  /// 用法：API中cs_mode参数填入枚举内容，如API中cs_open(cs_arch arch, cs_mode mode, csh
> *handle);第二个参数填CS_MODE_64则支持X64模式
#### cs_opt_mem
内存操作
    struct cs_opt_mem {
        cs_malloc_t malloc;
        cs_calloc_t calloc;
        cs_realloc_t realloc;
        cs_free_t free;
        cs_vsnprintf_t vsnprintf;
    } cs_opt_mem;
> 用法：可使用用户自定义的malloc/calloc/realloc/free/vsnprintf()函数，默认使用系统自带malloc(),
> calloc(), realloc(), free() & vsnprintf()
#### cs_opt_mnem
自定义助记符
    struct cs_opt_mnem {