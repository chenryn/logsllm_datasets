The various React addons express a peer dependency on their matching React
version. You can write a React component library that runs with multiple
versions of React but depends on some specific addons as an implementation
detail:
    {
      "name": "my-awesome-library",
      ...
      "dependencies": {
        "react-addons-update": "^0.14.0 || ^15.0.0"
      },
      "peerDependencies": {
        "react": "^0.14.0 || ^15.0.0"
      }
    }
If you consume this library in a host environment that uses react@14, npm will
still helpfully install the latest version of react-addons-update, which of
course peer-depends on react@15, causing rather confusing UNMET PEER
DEPENDENCY warnings since I, the consumer, am only looking around the
`peerDependencies` block for version issues.
So my question is this: what are best practices for a library in this
situation? Should I declare react-addons-update as a peer dependency, meaning
that my consumer has to personally install not just React itself but also
every react-addons-* that any of their dependents use? Seems annoying to my
consumer and also a sort of an abstraction break for the sake of version
matching.
Perhaps react-addons-* should be more independently versioned so they accept
multiple versions? Or maybe not declare a peer dependency on React if they
don't actually need it (like for react-addons-update, which only uses a couple
of the small, non-React-core utilities)?