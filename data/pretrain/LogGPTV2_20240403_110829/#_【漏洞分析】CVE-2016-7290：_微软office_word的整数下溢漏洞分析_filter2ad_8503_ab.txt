        - Processing modules
        - Done. Let's rock 'n roll.
    >> Object at 0x002513c4 (0xcc bytes):
    Offset  Address      Contents    Info
    ------  -------      --------    -----    +00     0x002513c4 | 0x00000000  
    +04     0x002513c8 | 0x000bd62f  
    +08     0x002513cc | 0x00002001  
    +0c     0x002513d0 | 0x0000ff00  
    +10     0x002513d4 | 0xd63b0000  
    +14     0x002513d8 | 0x8001000c  
    +18     0x002513dc | 0xff000000  
    +1c     0x002513e0 | 0x0100ffff  
    +20     0x002513e4 | 0x00000000  
    +24     0x002513e8 | 0x00000000  
    +28     0x002513ec | 0xffffffff  
    +2c     0x002513f0 | 0x00000000  
    +30     0x002513f4 | 0x00000000  
    +34     0x002513f8 | 0x00000000  
    +38     0x002513fc | 0x00000000  
    +3c     0x00251400 | 0x00000000  
    +40     0x00251404 | 0xff000000  
    +44     0x00251408 | 0x00000000  
    +48     0x0025140c | 0xff000000  
    +4c     0x00251410 | 0x00000000  
    +50     0x00251414 | 0xff000000  
    +54     0x00251418 | 0x00000c48  
    +58     0x0025141c | 0xffffffff  
    +5c     0x00251420 | 0x00000000  
    +60     0x00251424 | 0xff000000  
    +64     0x00251428 | 0x00000000  
    +68     0x0025142c | 0xff000000  
    +6c     0x00251430 | 0x00000000  
    +70     0x00251434 | 0x1b132948  ptr to 0x5e52ee80 : wwlib!GetAllocCounters+0x128118
    +74     0x00251438 | 0xff000000  
    +78     0x0025143c | 0x00000000  
    +7c     0x00251440 | 0x00000000  
    +80     0x00251444 | 0x00000000  
    +84     0x00251448 | 0x00000000  
    +88     0x0025144c | 0x00000000  
    +8c     0x00251450 | 0xff000000  
    +90     0x00251454 | 0x00000000  
    +94     0x00251458 | 0x00000000  
    +98     0x0025145c | 0x00000000  
    +9c     0x00251460 | 0x00000000  
    +a0     0x00251464 | 0x00000000  
    +a4     0x00251468 | 0x00000000  
    +a8     0x0025146c | 0x00000000  
    +ac     0x00251470 | 0x00000000  
    +b0     0x00251474 | 0x00000000  
    +b4     0x00251478 | 0x00000000  
    +b8     0x0025147c | 0x00000000  
    +bc     0x00251480 | 0x00000000  
    +c0     0x00251484 | 0x00000000  
    +c4     0x00251488 | 0x00000000  
    +c8     0x0025148c | 0x00000000
使用mona插件，能够将拷贝剩余大小的栈地址转储，可以看见有个指针指向.text
(wwlib!GetAllocCounters+0x128118)。如果没猜错，我们不应该覆写这个值。
因此，我们可能溢出了一个栈缓冲区（可能性不大）。如果我们想命中返回地址，需要知道目的地址+0x1e8处才能出现。好奇之下能够定位到这里：
    ...
    +cc     0x00251490 | 0xff700000  
    +d0     0x00251494 | 0x00ffffff  
    +d4     0x00251498 | 0x00000000  
    +d8     0x0025149c | 0x00000000  
    ... 
    +1dc    0x002515a0 | 0x1b132be0  
    +1e0    0x002515a4 | 0x0000005e  
    +1e4    0x002515a8 | 0x002515c4  ptr to self+0x00000200
    +1e8    0x002515ac | 0x5e415bc1  wwlib!GetAllocCounters+0xee59
    [+] This mona.py action took 0:00:01.669000
    0:000> ub 0x5e415bc1  
    wwlib!GetAllocCounters+0xee41:
    5e415ba9 5e              pop     esi
    5e415baa 81fbffffff7f    cmp     ebx,7FFFFFFFh
    5e415bb0 0f873e393c00    ja      wwlib!DllGetLCID+0x1d316e (5e7d94f4)
    5e415bb6 8b5508          mov     edx,dword ptr [ebp+8]
    5e415bb9 53              push    ebx
    5e415bba 50              push    eax
    5e415bbb 52              push    edx
    5e415bbc e8b9e9fdff      call    wwlib+0x457a (5e3f457a)
我们无法看见调用栈，因为栈向上伸展失败了：
    0:000> ?0x002515ac-@esp
    Evaluate expression: 20248 = 00004f18
接下来的问题是，怎么模拟继续执行？
[Bannedit](https://twitter.com/bannedit0)编写了一个很好的插件[counterfeit](https://github.com/bannedit/windbg)，可以在windbg中看到用VirtualAlloc分配的块并且用标记的数据填充它。我们能继续并替换esi的值，继续复制操作。
    0:000> !py cf -a 2000 -f
                               __                 _____      .__  __   
      ____  ____  __ __  _____/  |_  ____________/ ________ |__|/  |_ 
    _/ ___/  _ |  |  /       __/ __ _  __    __/ __ |     __
      __(   )  |  /   |    |   ___/|  | /|  |   ___/|  ||  |  
     ___  >____/|____/|___|  /__|  ___  >__|   |__|  ___  >__||__|  
         /                 /          /                 /
                version 1.0 - bannedit
    Allocated memory @ 0x14130000 with RWX permissions.
    Filling memory...
    Finished filling memory.
    0:000> dd 0x14130000
    14130000  41414141 41414142 41414143 41414144
    14130010  41414145 41414146 41414147 41414148
    14130020  41414149 4141414a 4141414b 4141414c
    14130030  4141414d 4141414e 4141414f 41414150
    14130040  41414151 41414152 41414153 41414154
    14130050  41414155 41414156 41414157 41414158
    14130060  41414159 4141415a 4141415b 4141415c
    14130070  4141415d 4141415e 4141415f 41414160
现在我们看到esi位于0x14130000：
    0:000> g
    (880.ac4): Access violation - code c0000005 (!!! second chance !!!)
    eax=00000000 ebx=00000000 ecx=00000033 edx=00000002 esi=22870ffd edi=002513c4
    eip=744fb40c esp=0024c694 ebp=0024c69c iopl=0         nv up ei pl nz ac po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00210212
    MSVCR90!memmove+0xfc:
    744fb40c f3a5            rep movs dword ptr es:[edi],dword ptr [esi]
    0:000> r @esi=0x14130000
    ...
    0:000> t
    eax=00000000 ebx=00000000 ecx=00000017 edx=00000002 esi=14130070 edi=00251434
    eip=744fb40c esp=0024c694 ebp=0024c69c iopl=0         nv up ei pl nz ac po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00210212
    MSVCR90!memmove+0xfc:
    744fb40c f3a5            rep movs dword ptr es:[edi],dword ptr [esi]
    0:000> dd @edi L1
    00251434  1b132948
    0:000> dds poi(@edi) L1
    1b132948  5e52ee80 wwlib!GetAllocCounters+0x128118
    0:000> u poi(poi(@edi))
    wwlib!GetAllocCounters+0x6e3b0:
    5e475118 55              push    ebp
    5e475119 8bec            mov     ebp,esp
    5e47511b 56              push    esi
    5e47511c 8bf1            mov     esi,ecx
    5e47511e e814000000      call    wwlib!GetAllocCounters+0x6e3cf (5e475137)
    5e475123 f6450801        test    byte ptr [ebp+8],1
    5e475127 7407            je      wwlib!GetAllocCounters+0x6e3c8 (5e475130)
    5e475129 56              push    esi
    0:000> t
    eax=00000000 ebx=00000000 ecx=00000016 edx=00000002 esi=14130074 edi=00251438