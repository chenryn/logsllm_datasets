Since there is no public cryptomining traffic dataset, we construct
a mixed dataset by ourselves to evaluate the algorithm. The mixed
dataset includes two parts: background and cryptomining traffic.
In real scenarios, cryptomining traffic volumes are much smaller
than benign traffic volumes. To make the environment conform to
the real scene, we use large-scale background traffic and a small
amount of cryptomining traffic.
4.1.1 Background Traffic. To verify the performance of our algo-
rithm in actual scenarios, we collect background traffic from the
entrance gateway of a large office building in a campus network
by using port mirroring. The simple statistics of background traffic
are shown in Table 2. The total volumes exceed 28 TeraBytes, and
the number of total packets reaches about 30 billion. The number
of flows is relatively stable within a month, which fluctuates at 4.7
million per day. Since the scale of background traffic is enormous,
determining that all flows are truly benign is impossible. We remove
the cryptomining flow in the background traffic based on plaintext
load filtering method (details in Appendix C). Despite this, some
encrypted cryptomining sessions may still in the background traffic.
We further discuss the possible biases after showing the evaluation
results.
1056MineHunter: A Practical Cryptomining Traffic Detection Algorithm Based on Time Series Tracking
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Figure 8: Overall evaluation results of MineHunter
Figure 9: Evaluation results of MineHunter-Naive
4.1.2 Cryptomining Traffic. Previous measurements indicated that
the most popular cryptocurrency used for cryptojacking is Mon-
ero since it has no special requirements for hardware [18], hence
our main evaluation experiment is for Monero. We evaluate the
scalability of other cryptocurrencies in Section 4.7. We mainly col-
lect cryptomining traffic from popular mining pools of Monero.
We follow two principles for the selection of mining pools. One is
to select the mining pool with high computing power according
to [20]. The other is to select the mining pool that supports TLS
communication to verify the algorithm’s ability to detect encrypted
traffic. According to these two principles, we selected a total of
21 mining pool nodes, covering nearly 70% of the total comput-
ing power of Monero from the statistic in [20]. The specific list of
mining pool nodes is shown in Appendix D. We collect the crypto-
mining traffic from all 21 mining pool nodes through TLS protocol
and XMRig, one of the most used tools by cryptojacking malware
[37][25]. The duration time is the same as background traffic. The
IP address of the mining pool nodes is fixed, hence we collected
21 two-tuple (source-destination address) flows from 21 mining
pool nodes respectively. Since the average number of flows is 4.7
million per day in background traffic, the average data imbalance
ratio is 21 : 4, 700, 000 ≈ 1 : 200, 000 in one day. We merge the
cryptomining traffic and background traffic in chronological order
through mergecap[30] and replay the merged dataset for detection.
4.1.3 Ethical Considerations. Since background traffic used in this
paper comes from a real network environment, to protect the pri-
vate information of users in the campus network, we anonymize
the IP addresses belonging to the campus network in the traffic
through Crypto-PAn, a public IP address anonymization tool [38].
Furthermore, we remove the payload of packets in the background
traffic and leave only the packet header. Therefore, all background
traffic used in our experiments is in accordance with the policies
defined by our institution.
4.2 Evaluation Metric
Since we use an extremely unbalanced dataset, TPR (true positive
rate) and FPR (false positive rate) cannot effectively evaluate the
performance of our algorithm. For example, in our scenario, the
average imbalance ratio of the data set is 1 : 200, 000. A seemingly
excellent algorithm that the TPR reaches 100% and the FPR reaches
0.1% will generate 200, 000∗0.1% = 200 false positives, which is 200
times the real cryptomining samples. Hence, TPR and FPR may be
misleading in the scenario of extremely unbalanced dataset. Instead,
we choose precision, recall, and f1-score as evaluation metrics.
4.3 Overall Evaluation Results
According to the previous introduction, our algorithm faces four
core challenges, which we will evaluate separately. First, we evalu-
ate the algorithm detection performance under extremely unbal-
anced data scenarios (Challenge 1). According to the description
in Section 3.2, our algorithm needs to set a detection time range
ti, we choose ti = 0.5h, 1h, 2h, 6h, 12h respectively. Meanwhile, we
segment the original data in the time dimension according to the
detection time range to obtain more detection cases. For example, if
ti is set to 0.5h, we will obtain a total of 21 (nodes) ∗ 2∗ 24 (hours)∗
32 (days) ≈ 30, 000 detection cases. Besides, we evaluate the im-
pact of different alarm threshold selections. The overall evaluation
0.00.20.40.60.81.0Threshold0.00.20.40.60.81.0Precision0.5 h1.0 h2.0 h4.0 h6.0 h12.0 h0.00.20.40.60.81.0Threshold0.00.20.40.60.81.0Recall0.5 h1.0 h2.0 h4.0 h6.0 h12.0 h0.00.20.40.60.81.0Threshold0.00.20.40.60.81.0F1_score0.5 h1.0 h2.0 h4.0 h6.0 h12.0 h0.00.20.40.60.81.0Threshold0.000.020.040.060.080.10Precision0.5 h1.0 h2.0 h4.0 h6.0 h12.0 h0.00.20.40.60.81.0Threshold0.00.20.40.60.81.0Recall0.5 h1.0 h2.0 h4.0 h6.0 h12.0 h0.00.20.40.60.81.0Threshold0.000.040.080.120.160.20F1_score0.5 h1.0 h2.0 h4.0 h6.0 h12.0 h1057ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Shize Zhang, Zhiliang Wang, Jiahai Yang, Xin Cheng, Xiaoqian Ma, Hui Zhang, Bo Wang, Zimu Li, and Jianping Wu
Figure 10: Case study
Figure 11: Performance evaluation of [4]
Figure 12: Recall under only one false
positive alarm method
results of the algorithm are shown in Fig. 8. As the threshold in-
creases, the precision of the algorithm gradually increases, and the
recall gradually decreases. It can be seen from the f1-score sub-plot
that the threshold setting between [0.6, 0.8] is appropriate. In ad-
dition, as the detection time increases, the overall performance of
the algorithm gradually improves. However, the longer detection
time is set, the longer detection delay, and the longer duration of
cryptomining is required. The detection time of 2h is relatively
suitable, which is trade-off between the performance of algorithm
and the detection delay. And when the threshold is set to 0.6, the
precision of the algorithm is 97.0%; recall is 99.7%; f1-score is 0.983.
Since there may be some encrypted cryptomining sessions in
the background traffic, the overall evaluation performance of Mine-
Hunter may have biases, including two parts. One is that the pre-
cision may be underestimated since some false positives may be
the encrypted cryptomining in the background traffic. The other
is that the recall may be overrated since there may be still some
cryptomining in the background traffic not found. To further ex-
plain the rationality of the recall, we use MineHunter to detect the
cryptomining flows in the background traffic labeled by plaintext
load filtering method. The evaluation results show that MineHunter
can find all these cryptomining flows (details in Appendix C).
The performance evaluation results of MineHunter-naive are
shown in Fig. 9. It can be seen from the recall plot that both the
We use a specific case to illustrate the effectiveness of the al-
gorithm intuitively. We set the detection time to 2h and select the
case of 2020-10-24 16:00:00-18:00:00, which is the peak period of
network usage. We select the top 10, 000 from the global similarity
table, and the result is shown in Fig. 10. Each point in the figure
represents a flow detection result. It can be seen that there is a clear
dividing line between cryptomining flows and benign flows. The
similarities of cryptomining flows are above 0.8, and the results of
benign flows are below 0.6. Moreover, most of the detection results
of benign flows are below 0.3, which shows that the detection algo-
rithm effectively filters noise. Therefore, it can be seen that when
the threshold is set between [0.6, 0.8], the algorithm can effectively
achieve high-precision detection performance under unbalanced
datasets.
To further indicate the effectiveness of the algorithm, we com-
pare two different algorithms. The first is MineHunter-naive, which
uses the naive distance detection algorithm introduced in Section
3.2.1. The second is a state-of-art algorithm based on machine learn-
ing [4].
naive distance algorithm and the improved algorithm can effectively
identify the cryptomining traffic. However, it can be seen from the
precision plot that the precision of the naive algorithm is less than
10%, which shows that there are many false positives. It can also be
seen that MineHunter based on the probability model effectively
filters the noise signal by adding the credibility coefficient α.
Maurantonio C et al. tries to use machine learning algorithms
to detect cryptomining traffic and convert cryptomining detection
into a binary classification problem [4]. Since the ratio of positive
and negative samples in the dataset has a great influence on the
performance of the machine learning algorithm, we evaluate the
performance of algorithm under different ratios, as shown in Fig.
11. With a data ratio of 1 : 1, the machine learning algorithm has
good performance. However, as the proportion of data imbalance
increases, the performance of the machine learning algorithm de-
creases significantly. When the imbalance ratio reaches 1 : 1000, the
precision of the algorithm is even less than 1%. Therefore, the ma-
chine learning algorithm may be only suitable for scenarios where
the ratio of cryptomining traffic to benign traffic is comparable,
which cannot meet the requirements of Challenge 1.
4.4 Alarm Condition Evaluation
In this section, we evaluate the ability of MineHunter to solve
uncontrollable alarms (Challenge 2). According to the previous
description, the output of our algorithm is a ranked table. Therefore,
in addition to using the threshold as an alarm judgment condition
(evaluated in Section 4.3), network administrators can also check
from the beginning of the ranked table and stop until a false alarm
is discovered. In this way, network administrators only need to deal
with one false positive for each algorithm result. For example, if
the algorithm’s detection time is set to 2h, network administrator
only needs to deal with 24 (hours)/2 = 12 false positives every
day. Under this controllable false alarm setting, the recall of the
algorithm is a core performance evaluation metric, as shown in
Fig. 12. Under different detection time settings, the recall of the
algorithm is higher than 90%, which shows that the cryptomining
flows are in the top position in ranked table. In addition, when
the detection time is set to 2h, the algorithm’s recall of 99.8% is
slightly better than the result of 99.7% in Section 4.3. Therefore,
MineHunter can still achieve high detection performance under
the controllable alarm setting.
246810Flow index mod 100.00.20.40.60.81.0SimilarityBenignAnomaly1:11:101:1001:1000Data ratio0.00.20.40.60.81.01.20.9940.2350.0110.0020.9380.9681.00.7960.9650.3780.0220.004PrecisionRecallF1-score0.5 h1.0 h2.0 h4.0 h6.0 h12.0 hDetection time0.00.20.40.60.81.0Recall0.9260.9820.9981.01.01.01058MineHunter: A Practical Cryptomining Traffic Detection Algorithm Based on Time Series Tracking
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Figure 13: Loss evaluation
Figure 14: Latency evaluation
Figure 15: Amplification evaluation
4.5 Anti-adversarial Evaluation
In this section, we evaluate the ability of MineHunter to solve the
traffic confusion (Challenge 3). At present, common traffic obfus-
cation methods used by adversaries include adding proxy, load
encryption, port replacement, and packet padding. MineHunter
only uses the characteristics of timestamp and number of pack-
ets and is not interfered by these common obfuscation methods,
hence MineHunter can obviously resist those. We evaluate the coun-
termeasures used by adversaries specially against our detection
algorithm under the "white box" condition, which means that ad-
versaries know all details of the algorithm, including the internal
structure, design, parameters, etc.
4.5.1 Packet Delay. Our algorithm is constructed by using the
correlation between task packets and the time series of block cre-
ation. Therefore, adversaries can resist our detection algorithm
by delaying the delivery time of task packets. However, delaying
task packets will reduce the effective computing time of victim
hosts, which will lead to a decline in adversaries’ profit. We eval-
uate the impact of different delay times on the loss of Monero
mining profit, as shown in Fig. 13. In addition, we evaluate the
impact of packet delay on our algorithm detection performance
(ti = 2h, threshold = 0.6), as shown in Fig. 14. It can be seen from
Fig. 14 that when the delay time is less than 10s, the overall per-
formance of the algorithm is less affected. When the delay time
is higher than 10s, the algorithm performance begins to decrease
significantly. Therefore, our algorithm can effectively resist packet
delays under 10s. It can be seen from Fig. 13 that when the delay
time is 10s, adversaries will reduce the profit by 24.1%. However,
adversaries can bypass our detection algorithm by setting a larger
delay, which will also lose a larger profit.
4.5.2 Packet Amplification. Our algorithm uses the number of pack-