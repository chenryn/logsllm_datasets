together and assemble their key shares, they will never be able to
completely restore the original secret key.
In the presence of k evil nodes, MD has to initially choose k + 1
random nodes, see section 5.5 on how to do this. A new node i
will split its new key into k + 1 shares K1, . . . , Kk+1 distributing
them to the initial nodes. Initial nodes will again split their received
share further into k + 1 new shares K 1
k+1 using the
algorithm above. Each of them has to ﬁnd k + 1 predecessors with
a shared key to the destination node. As described above, this can
be done gradually: If an initial node x ﬁnds a predecessor y claim-
ing to possess a key, x will not only send one share to y but also
different shares to all k predecessors of y.
1 , . . . , K k+1
1 , K 2
Consequently, k nodes working together can only assemble k
key shares. Because the secret is split into k + 1 shares and dis-
tributed, there will however always be one non-compromised node
ensuring security for the whole key.
5.5 Finding Multiple Initial Random Nodes
As described above, a new node i going to join the network ini-
tially needs tickets and keys for at least two (or k + 1) random
nodes already residing in the network. Finding these nodes is not
easy for the user or his MD as the current network conﬁguration
is never known, i.e., the user is not aware which nodes are present
in the network. However, there is a quite intuitive solution to this
problem.
During pairing, nodes could get IDs in a sequence, i.e., a new
node entering the network has a higher ID than the node that joined
before. MD or the user would only need to store the total number
of nodes or the ID of the last joining node. The current network
conﬁguration would still remain unknown to MD. If k malicious
nodes are to be expected in the network, k + 1 initial random nodes
are required, e.g., two. To pair a new node i with ID IDi entering
the network, MD could determine k + 1 initial nodes by selecting
k + 1 random numbers r1, . . . , rk ∈ {1, . . . , IDi − 1}. The initial
nodes for i would therefore be IDr1 , . . . , IDrk .
For simplicity reasons, key establishment protocols such as [7]
often implicitly assume immortal network hardware, where nodes
will never leave the network they once joined. They are always
reachable and can thereby assist in security protocol steps. In such
an idealistic world, the proposed key establishment scheme would
function perfectly. However, assuming static network conﬁgura-
tions is quite unrealistic: In a real world scenario, nodes will ex-
haust their batteries, fail, are vandalized, and so on. Consequently,
randomly choosing IDs could result in IDs of nodes that already
left the network. In such a more dynamic sensor network, all re-
quired k + 1 nodes are present only with a certain probability. If at
least one of the nodes is missing, a secure key establishment is not
possible.
It is therefore a good idea for MD to generally select more than
k + 1 nodes. The probability of randomly selecting at least k + 1
nodes, which are still present in the network, rises by choosing
j > k +1 nodes. Assume a network with a total number of n nodes
that ever joined, i.e., n different nodes have ever been connected to
the network. At the time node i is going to join, m out of these n
nodes have already left, leaving (n − m) nodes still present. The
goal is to ﬁnd, with a high probability, at least k + 1 alive nodes
by a random selection of j nodes. This is a combinatorial problem
equivalent to the following question: Choosing randomly j ≥ k+1
balls from an urn with n balls, m red and (n − m) green, what is
the likelihood of selecting at least k + 1 green balls and (j − k− 1)
red balls? This probability P can be computed as:
j−k′ ”
j
P =
X
k′ =k+1
` n−m
k′ ´“ m
“ n
j ”
P is a function which rises quickly with j as demonstrated in Fig-
ure 4. Three different scenarios are shown with the total number n
of nodes ever joined being 100, 1000, and 10000. Every scenario
0
 1
 0.8
 0.6
P
 0.4
 0.2
 0
 1
n=100,k=1,m=1
n=100,k=1,m=30
n=1000,k=10,m=10
n=1000,k=10,m=300
n=10000,k=100,m=100
n=10000,k=100,m=3000
 4
 11
j
 22
 101
 202
Figure 4: Probabilities of ﬁnding at least k + 1 nodes alive in
different network conﬁgurations
has a more powerful attacker: The number of malicious nodes k
is 1, 10 or 100. For every scenario m depicts the number of nodes
which are non-reachable for a new node i, e.g., because of a wasted
battery or failures. m is shown being 1% or 30% of n to represent a
low and a high number of node failures. Note that the k malicious
nodes are always part of the (n − m) living nodes. In Figure 4,
the y axis represents the probability of ﬁnding at least k + 1 living
nodes if m out of n are already dead and MD selects j out of n
nodes randomly. The x axis is scaled logarithmically.
As a result, you can see P reaching high values of more than
99% as soon as j gets close to 2(k + 1). For the three different
scenarios with k = 1, 10 or 100 malicious nodes, 2(k + 1) would
be 4, 22, and 202 accordingly. It is important to notice that 2(k +1)
is an upper bound regardless of n: If the user or MD assumes only
k = 1 malicious node in n = 1000 sensors, the likelihood of
ﬁnding 2(k + 1) = 4 living nodes within 1000 is far greater than
ﬁnding 4 nodes in n = 100. If k malicious nodes are assumed to
be in the network at a given time and node failure is possible, MD
will select not only k + 1 but 2(k + 1) nodes from the network
randomly. 2(k + 1) is constant and does not depend on the total
number n of sensor nodes. It therefore scales perfectly.
5.6 Finding Key Paths to the Sink
Before a new node i can establish secure keys with all nodes
on its aggregation path IP = {f, b, a, ..}, i has to know for sure
that these are actually future communications partners and i needs
keys for them. i has to know IP. From a security perspective, this
is again delicate: If i simply broadcasts and asks for its path, an
attacker might intercept and provide i with a fake path consisting
only of malicious nodes. This is not a particular problem for a
key establishment protocol and one could argue about this being
application dependent in general. A clever and secure middleware
mechanism might provide i with the aggregation path setup, this
information might be distributed to i by out-of-band mechanisms,
e.g., i could ask a secure distributed service directory for this [8].
Also the user knows that i is a new heartbeat sensor and simply
knows the ﬁrst aggregation point for heartbeat sensors in the net-
work.
On the other hand, if all nodes on the aggregation path IP for
heartbeat sensors are aware of their actual function, they will know
that a new heartbeat sensor i has to share secret keys with them.
Therefore you could again use the technique of initial random nodes
and secret distribution to learn about f, b, and a. As i has intro-
duced itself to at least e and d, it could ask both of them to look for
the heartbeat-aggregation path IP. e would gradually and securely
ask its predecessors in the tree, i.e., b ﬁrst, about the aggregation
path for a new heartbeat sensor. Node b would answer with the
path f, b, a and so on. As b already knows the path, a would go on
and further ask k predecessors of b. Only if all received answers do
not differ, e will respond to i with the path IP. If d would do the
same and answer to i with the same aggregation path IP′, i can be
sure even in the presence of k malicious nodes.
5.7 Aggregation Changes
A sensor node like b may fail or die unexpectedly. In this case,
all of b’s keys are lost. This is not a signiﬁcant problem, because
communication between all predecessors and successors of b will
continue securely, as they have secure keys with each other. All
nodes along b’s aggregation path will even quite likely notice b’s
failure, if b is not responding to encrypted messages. So, node
failure will not impose more problems than node failure without
using the key establishment protocol would do.
On the other hand, nodes may leave the network voluntarily. The
user, application or software component responsible for all aggre-
gation setups may decide a change of a small part or the whole
aggregation tree. Assume node b has to be replaced by node c,
as of Figure 2, and node b and c are aware of the conﬁguration
change. As both nodes do not have a shared secret key with each
other, the idea is again to gradually ﬁnd k + 1 common prede-
cessors. In the presence of k malicious nodes, b and c can then
securely exchange a key. As described above, b would generate a
random key Kb and split it into k + 1 parts K 1
dis-
tributing them to the predecessors. The predecessors will forward
all key shares securely to c. c itself would do the same with its own
generated key Kc and K 1
. Both nodes will receive all
key shares from their counterpart and compute Kbc = Kb ⊕ Kc =
b ⊕ . . . ⊕ K k+1
K 1
5.8 Comparison and Beneﬁts of the Protocol
The performance of this protocol depends on the conﬁguration of
the aggregation tree. Typically, an aggregation tree will not be a de-
generated tree, i.e., nodes will have more than one child. Therefore,
it is fair to assume d, the mean degree of nodes in an aggregation
tree, to be d > 1. The height h of the tree will be h = ⌈ logd n⌉.
Therefore about logd n keys are necessary for a new node entering
the network.
c ⊕ . . . ⊕ K k+1
b ⊕ K 1
b , . . . , K k+1
.
b
c , . . . , K k+1
c
c
Every aggregation node needs pairwise keys with every node in
its d subtrees. To prevent nodes higher up in the aggregation tree
from storing a lot of keys for all nodes in their subtree, for exam-
ple, the sink would have to store n keys, the following technique
offers further memory savings: similar to MD, each node knows a
unique secret hard-coded key KID, e.g., node b knows Kb. These
hard-coded keys may be generated during nodes’ fabrication time.
Assume node i enters the network and needs to establish a key with
node b, residing higher up in the aggregation tree. As mentioned
before, they establish key Ki,b. However, now both nodes do not
store Ki,b as their pairwise secret key, but use it as temporary key
to establish a permanent Key K ′
i,b as follows: the node higher up in
the aggregation tree, in this case b, computes K ′
i,b = EKb (i). Us-
ing the already established temporary Ki,b, node b securely sends
EKi,b (K ′
and stores it. From now on, both nodes will use K ′
i,b as their pair-
wise secret key. If i wants to communicate with b later on, b can
i,b = EKb (i), just like MD
easily restore K ′
in Section 5.1. Consequently, this helps to drastically reduce the
i,b. Node i is able to decrypt K ′
i,b) to i and discards K ′
i,b by re-computing K ′
i,b
amount of required memory. Nodes on the lth-layer of aggrega-
tion need only to store l keys, i.e., l − 1 keys of their predecessors
in the aggregation tree plus their own hard-coded key. For example,
the sink only needs to store 1 key, leaves, i.e., nodes on the lowest
layer of the aggregation tree, need to store at most h = ⌈ logd n⌉
keys.
In conclusion, the total number of keys each node has to store in
its valuable main memory scales with d logd n = O(logd n). This
is far superior compared with the O(n) pairwise keys necessary in
related work.
If k malicious nodes are assumed a priori, the establishment of a
key needs 2(k + 1) initial random nodes. Each random node will
again split its share into k + 1 further shares and ﬁnd predecessors.
So about 2(k + 1)2 logd n = O(logd n) communications steps are
necessary to securely establish a new key. Again this scales far
better than the O(n) communication steps of related work, espe-
cially [7], which can not even guarantee secure multi-path commu-
nication. The agreement on a shared key is also quite simple in this
paper, as it simply needs the generation of a random number on
k + 1 XOR-operations. In [7] a lot of symmetric encryptions and
decryptions up to the poolsize (can grow to O(n)) are mandatory
per key establishment.
Furthermore, if nodes fail, the probability of ﬁnding a path for a
shared key can degrade rapidly – this is not covered at all in [7]. If
2(k + 1) initial random nodes are chosen, this protocol guarantees
a probability of > 99% for a secure key establishment, even in the
case of 30% failed nodes.
Finally, in [7], the user must discover all compromised nodes for
the protocol to function properly and securely, which is very un-
realistic and doubtful to assume. Our protocol can deal with com-
promised nodes knowing all secret keys they are supposed to know
anyway due to normal operation and it even copes with malicious
nodes not revealing themselves to the user.
The proposed scheme utilizes only symmetric cryptography, like
encryption or decryption. This is very time and memory efﬁcient
[10], so the use on a variety of different sensor platforms is possi-
ble.
6. CONCLUSION
This work presents a new efﬁcient key establishment scheme for
wireless sensor networks. Communication ﬂow in sensor networks
typically forms a hierarchical, tree-like aggregation. Within such a
tree, an efﬁcient, memory and radio transmission saving key estab-
lishment is proposed, which scales only with logarithmic behavior
compared to the more expensive linear behavior of related work.
Every node establishes and stores only those keys it would need
because of its task anyhow. Even in the presence of k malicious
nodes, the scheme allows secure and autonomous key exchange
without relying on any online central server or base station. The
user does not need to know the exact network conﬁguration at any
time. Finally, the scheme is able to support dynamic network be-
havior, not only joining nodes, but also node failure, voluntary node
leave, and changes of aggregation.
An efﬁcient establishment of keys however only provides the ba-
sis for a secure and authentic data transport, which is taking aggre-
gation into account. It is an open question, how data origin veriﬁ-
cation and authentication can be protected efﬁciently in an aggre-
gating sensor network.
7. ACKNOWLEDGMENTS
The authors wish to thank Roland Bless, Artur Hecker, Michael
Conrad, Curt Cramer, and Andr´e Huttel for their support.
0
8. REFERENCES
[1] R. Anderson, H. Chan, and A. Perrig. Key infection – smart
trust for smart dust. In ICNP, 2004.
[2] D. Balfanz, D. Smetters, P. Stewart, and H. Wong. Talking to
strangers: Authentication in ad-hoc wireless networks. In
Symposium on Network and Distributed Systems Security,
2002.
[3] E.-O. Blaß, M. Conrad, and M. Zitterbart. A tree-based
approach for secure key distribution in wireless sensor
networks. In Real World Sensor Networks, June 2005.
[4] H. Chan and A. Perrig. PIKE: Peer intermediaries for key
establishment in sensor networks. In INFOCOM, 2005.
[5] H. Chan, A. Perrig, and D. Song. Random key
predistribution schemes for sensor networks. In IEEE
Security and Privacy Symposium, 2003.
[6] Dallas Semiconductor Corp. The iButton, 2005.
http://www.ibutton.com.
[7] L. Eschenauer and V. Gligor. A key management scheme for
distributed sensor networks. In ACM CCS, 2002.
[8] H.-J. Hof, E.-O. Blaß, T. Fuhrmann, and M. Zitterbart.
Design of a secure distributed service directory for wireless
sensornetworks. In European Workshop on Wireless Sensor
Networks, 2004.
[9] Y. Law, R. Corin, S. Etalle, and P. Hartel. A formally veriﬁed
decentralized key management architecture for wireless
sensor networks. In Personal Wireless Communication, 2003.
[10] Y. Law, J. Doumen, and P. Hartel. Benchmarking block
ciphers for wireless sensor network. In IEEE Mobile Ad-hoc
and Sensor Systems, 2004.
[11] S. Miller, B. C. Neuman, J. I. Schiller, and J. Saltzer.
Kerberos authentication and authorization system. Project
Athena Technical Plan, MIT Project Athena, 1998.
[12] A. Perrig, R. Szewczyk, V. Wen, D. E. Culler, and J. D.
Tygar. SPINS: security protocols for sensor netowrks. In
Mobile Computing and Networking, 2001.
[13] G. J. Simmons. An introduction to shared secret and/or
shared control schemes and their application. Contemporary
Cryptology. IEEE Press, 1992.
[14] F. Stajano. Security for Ubiquitous Computing. John Wiley
and Sons, 2002.
[15] F. Stajano and R. Anderson. The resurrecting duckling:
Security issues for ad-hoc wireless networks. In 7th
International Workshop on Security Protocols, 1999.
0