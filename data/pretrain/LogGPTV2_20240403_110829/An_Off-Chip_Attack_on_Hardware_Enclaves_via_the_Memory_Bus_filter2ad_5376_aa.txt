title:An Off-Chip Attack on Hardware Enclaves via the Memory Bus
author:Dayeol Lee and
Dongha Jung and
Ian T. Fang and
Chia-che Tsai and
Raluca Ada Popa
An Off-Chip Attack on Hardware Enclaves via the Memory Bus
Dayeol Lee
UC Berkeley
Dongha Jung
SK Hynix
Ian T. Fang
UC Berkeley
Chia-Che Tsai
Texas A&M University
Raluca Ada Popa
UC Berkeley
Abstract
This paper shows how an attacker can break the conﬁden-
tiality of a hardware enclave with MEMBUSTER, an off-chip
attack based on snooping the memory bus. An attacker with
physical access can observe an unencrypted address bus and
extract ﬁne-grained memory access patterns of the victim.
MEMBUSTER is qualitatively different from prior on-chip
attacks to enclaves and is more difﬁcult to thwart.
We highlight several challenges for MEMBUSTER. First,
DRAM requests are only visible on the memory bus at last-
level cache misses. Second, the attack needs to incur minimal
interference or overhead to the victim to prevent the detection
of the attack. Lastly, the attacker needs to reverse-engineer the
translation between virtual, physical, and DRAM addresses
to perform a robust attack. We introduce three techniques,
critical page whitelisting, cache squeezing, and oracle-based
fuzzy matching algorithm to increase cache misses for mem-
ory accesses that are useful for the attack, with no detectable
interference to the victim, and to convert memory accesses
to sensitive data. We demonstrate MEMBUSTER on an Intel
SGX CPU to leak conﬁdential data from two applications:
Hunspell and Memcached. We show that a single uninter-
rupted run of the victim can leak most of the sensitive data
with high accuracy.
1 Introduction
Hardware enclaves [1–5] provide secure execution environ-
ments to protect sensitive code and data. A hardware en-
clave has a small trusted computing base (TCB) including the
trusted hardware and program and assumes a strong threat
model where even a privileged attacker (e.g., hypervisor, OS)
cannot break the conﬁdentiality and integrity of the execu-
tion. In such a threat model, the attacker cannot physically
attack the internals of the processor package, but can attempt
to tamper with or observe the externals of the processor (e.g.,
Cold-Boot attacks [6]). As a result, hardware enclaves are
attractive for protecting privacy-sensitive workloads such as
database [7], big data [8–10], blockchains [11–15], and ma-
chine learning [16, 17].
Figure 1: On-chip side channels compared to MEMBUSTER.
The cache side-channel attack leaks addresses through a
shared cache, whereas the controlled-channel attack uses ad-
versarial memory management. MEMBUSTER leaks addresses
directly through the off-chip memory bus. The photo shows
an example hardware setup for the attack.
Along with the proliferation of hardware enclaves, many
side-channel attacks against them have been discovered [18–
23]. Side-channel attacks leak sensitive information from
enclaves via architectural or microarchitectural states. For
instance, controlled-channel attacks [24] use the OS privilege
to trigger page faults for memory access on different pages,
to reconstruct secrets from page-granularity access patterns
inside the victim program. We categorize these attacks as on-
chip side-channel attacks, where the attacker uses adversarial
or shared on-chip components to reveal memory addresses
accessed by the victim (Figure 1).
An attacker who can physically access the machine can
perform an off-chip side-channel attack that directly observes
the memory addresses on the memory bus. The memory bus,
which consists of a data bus and an address bus, delivers mem-
ory requests from a CPU to an off-chip DRAM. Although
the CPU encrypts the data of an enclave, all the addresses
still leave the CPU unencrypted, allowing the attacker to infer
program secrets from the access patterns. Since off-the-shelf
DRAM interfaces do not support address bus encryption, no
AttackerVictimMMUCacheDRAMAttackerVictimMMUCacheDRAMVictimMMUCacheDRAMCache Side ChannelControlled ChannelMembusterAttackerDRAMInterposerVictim Machine Signal Analyzerexisting hardware enclave can prevent physical attackers from
observing the memory address bus.
Several studies have hinted at the possibility of attacks
based on the memory address bus [25–27]. Costan et al. [26]
suggest the possibility of tapping the address bus, but ac-
knowledge that they are not aware of any successful example
of the attack. Maas et al. [25] suggest that an attacker who
can collect physical memory traces of a database server can
distinguish two different SQL queries operating on the same
dataset. However, to the best of our knowledge, no work has
shown how such a side channel can be exploited to break the
conﬁdentiality of an enclave.
In this paper, we present MEMBUSTER, an off-chip side-
channel attack on the memory address bus. We show that
MEMBUSTER can be a substantial threat to hardware enclaves
because of its unique traits compared to the existing on-chip
attacks (§2.2). The need for off-chip access, despite being
a disadvantage, advantages the attacker as it makes MEM-
BUSTER much harder to mitigate with protected-access solu-
tions (Table 1). Recently, a wide range of tools [28–32] have
been developed for mitigating on-chip side-channel attacks
for enclaves with a reasonable overhead. These tools either
partition the resources (e.g., cache) to prevent an attacker from
learning information via shared resources or intercept actions
(e.g., page faults) to prevent an attacker from observing the
side channels. At their core, these solutions attempt to protect
the memory accesses from an attacker’s sight.
However, these protected-access solutions do not prevent
MEMBUSTER, which observes the memory addresses off-chip
and thus can bypass the protection of any on-chip solutions.
To prevent MEMBUSTER on the current hardware enclave
design, one must hide the accessed memory addresses, by
making the enclave execution oblivious to the secret data.
This requires either using oblivious algorithms [33] inside the
enclave or running the enclave atop an ORAM [34, 35]. Both
mechanisms bring signiﬁcant performance overhead to the en-
clave. An alternative is to change the CPU and DRAM design
to encrypt the address bus, but implementing a decryption
module in DRAM can be expensive [36, 37].
We describe the challenges to perform a robust off-chip at-
tack as follows: (1) Address Translation. The attacker needs
to translate the DRAM requests into the physical addresses
by reverse-engineering the mapping and to further translate
them into virtual addresses of the victim enclave; (2) Lossy
Channel. The attacker only sees DRAM requests when cache
misses or write-back occurs. Since most modern CPUs have
a large last-level cache (LLC), a signiﬁcant portion of mem-
ory accesses do not issue any DRAM requests. We show
why simple methods such as priming the cache does not incur
sufﬁcient cache misses needed for the attack; (3) Unusual Be-
haviors in SGX. SGX has unique memory behaviors which
increase the difﬁculty of the attack. For example, we show that
common architectural features such as disabling the cache
do not work in SGX. We also ﬁnd that paging in SGX hides
most of the memory accesses.
We ﬁrst show how an attacker can translate the DRAM
requests, and can ﬁlter out irrelevant addresses to leave only
the critical addresses that are useful for the attack. Then, we
introduce two techniques, critical page whitelisting (§5.2) and
cache squeezing (§5.4.1), to increase useful cache misses by
thwarting page swaps and shrinking the effective cache for the
critical addresses. With more cache misses, the attacker can
observe more DRAM requests. These techniques do not cause
detectible interference to the victim, and can be combined
with cache priming to make more memory accesses visible
to the attacker. Our oracle-based fuzzy matching algorithm
(§6) can create an “oracle” of the secret-to-access-pattern
mapping, to identify the sensitive accesses from a sizable
memory bus trace. We then extract the sensitive data from
the noisy memory accesses by fuzzy-matching the accesses
against the oracle. We further show that hardware prefetching
can increase the efﬁciency of this algorithm in MEMBUSTER.
We demonstrate the attack by attaching Dual In-line Mem-
ory Module (DIMM) interposer to a production system with
an SGX-enabled Intel processor and a commodity DDR4
DRAM. We capture the memory bus signals to perform an
off-line analysis. We use two applications, Hunspell and Mem-
cached, to demonstrate the attack. Finally, we show the scala-
bility of our techniques by simulating the attack in modiﬁed
QEMU [38].
lows:
To summarize, the contributions of this paper are as fol-
• The setup of an off-chip side-channel attack on hard-
ware enclaves and identiﬁcation of the challenges for
launching the attack robustly.
• Effective techniques for maximizing the side-channel
information with no detectible interference nor order-of-
magnitude performance overhead to the victim program.
• A fuzzy comparison algorithm for converting the address
trace collected on the memory bus to program secrets.
• Demonstration and experimentation of the attack on an
actual Intel SGX CPU. To our best knowledge, it is the
ﬁrst work that shows the practicality of the attack.
The security implications of the off-chip side-channel at-
tacks can be pervasive because such a channel exists on almost
every secure processor with untrusted memory. We hope to
motivate further research by alarming the community about
the practicality and severity of such attacks.
2 Background and Related Work
In this section, we discuss the background, including hardware
enclaves, known on-chip side-channel attacks on SGX, and
the related defenses.
2.1
Intel SGX
We choose Intel SGX [39] as the primary attack target be-
cause Intel SGX has the most mature implementation and
the strongest threat model against untrusted DRAM. SGX is
Schwarzetal.[21]
Brasseretal.[20]
FLUSH-based[23]
CacheZoom[22]
M
Controlled[24]
E
M
BUSTER
Software-Only
Protected-Access Fix [28–32]
Root Adversary
Noiseless
Lossless
Fine-Grained (64B vs. 4KB)
No Interference (e.g., AEX)
Low Overhead
















































Table 1: This work (MEMBUSTER) compared to previous side-
channel attacks on SGX. The two boldface rows illustrate
what we perceive to be the most important distinctions. The
colored cell indicates the attacker has the advantage.
a set of instructions for supporting hardware enclaves intro-
duced in the Intel 6th generation processors. SGX assumes
that only the processor package is trusted; all the off-chip
hardware devices, including the DRAM and peripheral de-
vices, are considered potentially vulnerable or compromised.
The threat model of SGX also includes physical attacks such
as Cold-Boot Attacks [6], which can observe sensitive data
from residuals inside DRAM.
An Intel CPU with SGX contains a memory encryption en-
gine (MEE), which encrypts and authenticates the data stored
in a dedicated physical memory range called the enclave page
cache (EPC). The MEE encrypts data blocks and generates
authentication tags when sending the data outside the CPU
package to be stored inside the DRAM. To prevent roll-back
attacks, the MEE also stores a version tree of the protected
data blocks, with the top level of the tree stored inside the
CPU. For Intel SGX, EPC is a limited resource; the largest
EPC size currently available on an existing Intel CPU is 93.5
MB, out of 128 MB Processor’s Reserved Memory (PRM).
The physical pages in EPC, or EPC pages, are mapped to
virtual pages in enclave linear address ranges (ELRANGEs)
by the untrusted OS. If all concurrent enclaves require more
virtual memory than the EPC size, the OS needs to swap the
encrypted EPC pages into regular pages.
However, even with MEE, Intel SGX does not encrypt the
addresses on the memory bus. As previously discussed, chang-
ing the CPU to encrypt the addresses requires implementing
the encryption logic on DRAM, and thus requires new tech-
nologies such as Hybrid Memory Cube (HMC) [36, 37].
The unencrypted address bus opens up a universal threat
to hardware enclaves with external encrypted memory. Ko-
modo [40], ARM CryptoIsland [41], Sanctum [5], and Key-
stone [4] do not encrypt data for an external memory by de-
fault. AMD SEV [42] allows hypervisor-level memory en-
cryption, but also does not encrypt addresses.
2.2 Comparison with Existing Attacks
In this section, we discuss how MEMBUSTER can be a sub-
stantial threat to hardware enclaves because of its unique traits.
We compare MEMBUSTER with various on-chip side-channel
attacks on SGX [20–24] in Table 1.
2.2.1 Side Channel Attacks on SGX
PRIME+PROBE. A shared cache hierarchy allows an adver-
sary to infer memory access patterns of the victim using
known techniques such as PRIME+PROBE [43, 44]. How-
ever, in PRIME+PROBE, the attacker usually cannot reliably
distinguish the victim’s accesses from noises of other pro-
cesses. The PRIME+PROBE channels are also lossy, as the
attacker may miss some of victim’s accesses while probing.
Brasser et al. [20] demonstrate PRIME+PROBE on Intel
SGX without interfering with the enclave, but the attack re-
quires running the victim program repeatedly to compensate
for its noise and signal loss. Schwarz et al. [21] show that