timestamp are again encoded in the identiﬁer and sequence number to detect
modiﬁcations.
Many implementation behaviors in Sect. 3 can be inferred from the ﬁrst,
standard probe. For instance, the standard timestamp request can determine
a normal, lazy, non-UTC and little-endian implementation. In order to clas-
sify a device as stuck, both the standard and duplicate timestamp requests are
required. Two requests are needed in order to determine that the receive and
transmit timestamps remain ﬁxed over time, and the inclusion of the duplicate
timestamp request ensures that the remote device is not simply echoing the
values in the receive and transmit timestamp ﬁelds of the request. Similarly,
timestamp reﬂectors can be detected using the standard and duplicate request
responses.
The checksum-lazy behavior is detected via responses to the bad checksum
request type. The Linux htons() bug behavior can be detected using the stan-
dard request and ﬁltering for reply timestamps with the two lower bytes set to
zero. In order to minimize the chance of false positives (i.e., the correct time
in ms from UTC midnight is represented with the two lower bytes zeroed), we
count only destinations that match this behavior in responses from both the
standard and bad clock timestamp request types.
To detect the unit precision of the timestamp reply ﬁelds, we leverage the
multiple requests sent to each target. Because we know the time at which requests
are transmitted, we compare the time diﬀerence between the successive requests
to a host and classify them based on the inferred time diﬀerence from the replies.
Finally, we classify responsive devices by the reference by which they main-
tain time. We ﬁnd many remote machines that observe nonstandard reference
times, but do not set the high order timestamp ﬁeld bit. A common alterna-
tive timekeeping methodology is to track the number of ms elapsed since mid-
night local time. We detect local timezone timekeepers by comparing the receive
and transmit timestamps to the originate timestamp in replies to the standard
request. Receive and transmit timestamps that diﬀer from our correct originate
88
E. C. Rye and R. Beverly
Table 2. Ground truth classiﬁcation of ICMP timestamp behaviors
OS
Behavior
Notes
Windows 7–10
Oﬀ by default With Windows ﬁrewall oﬀ, lazy LE
Linux
Lazy
Linux 3.18 (incl Android) Lazy
htons() bug
Android kernel 3.10, 4.4+ Lazy
BSD
OSX
iOS
Lazy
Unresponsive
Oﬀ by default
Cisco IOS/IOS-XE
JunOS
Lazy
Lazy
MSB set if NTP disabled, unset if enabled
timestamp by the number of ms for an existing timezone (within an allowable
error discussed in Sect. 5.2) are determined to be keeping track of their local
time.
Last, a small number of devices we encountered measured time relative to
the Unix epoch. Epoch-relative timestamps are detected in two steps: ﬁrst, we
compare the epoch timestamp’s date to the date in which we sent the request;
if they match, we determine whether the number of seconds elapsed since UTC
midnight in the reply is suitably close to the correct UTC time.
4.2 Ground Truth
To validate our inferences and understand the more general behavior of popu-
lar operating systems and devices, we run sundial against a variety of known
systems; Table 2 lists their ICMP timestamp reply behavior.
Apple desktop and mobile operating systems, macOS and iOS, both do not
respond to ICMP timestamp messages by default. Initially, we could not elicit
any response from Microsoft Windows devices, until we disabled Windows Fire-
wall. Once disabled, the Windows device responds with correct timestamps in
little-endian byte order. This suggests that not only are timestamp-responsive
devices with little-endian timestamp replies Windows, but it also worryingly
indicates that its built-in ﬁrewall has been turned oﬀ by the administrator.
BSD and Linux devices respond with lazy timestamp replies, as their source
code indicates they should. JunOS and Android respond like FreeBSD and Linux,
on which they are based, respectively. Of note, we built the Linux 3.18 kernel,
which has the htons() bug described in Sect. 6; it responded with the lower two
bytes zeroed, as expected. This bug has made its way into Android, where we
ﬁnd devices running the 3.18 kernel exhibiting the same signature.
Cisco devices respond diﬀerently depending on whether they have enabled
NTP. NTP is not enabled by default on IOS; the administrator must manu-
ally enable the protocol and conﬁgure the NTP servers to use. If NTP has not
been enabled, we observe devices setting the most signiﬁcant bit, presumably
Sundials in the Shade
89
Fig. 2. Incidence of ﬁngerprints for
most common telnet banner manufac-
turers
Fig. 3. Incidence of ﬁngerprints for
most common CWMP scan manufac-
turers
to indicate that it is unsure whether the timestamp is accurate, and ﬁlling in a
UTC-based timestamp with the remaining bits, according to its internal clock.
Telnet Banner and CWMP GET Ground Truth. To augment the ground truth
we obtained from devices we were able to procure locally, we leveraged IPv4
Internet-wide Telnet banner- and CPE WAN Management Protocol (CWMP)
parameter-grabbing scans from scans.io [23]. From October 3, 2018 scans, we
search banners (Telnet) and GET requests (CWMP) for IP addresses associated
with known manufacturer strings. We then probe these addresses with sundial.
Figure 2 displays the most common ﬁngerprints for a subset of the manufac-
turers probed from scans.io’s Telnet banner-grab dataset, while Fig. 3 is the
analogous CWMP plot. We note that non-homogeneous behavior within a man-
ufacturer’s plot may be due to several factors: diﬀerent behaviors among devices
of the same manufacturer, banner spooﬁng, IP address changes, and middle-
boxes between the source and destination. We provide further details regarding
our use of the scans.io datasets in Appendix B.
4.3 Ethical Considerations
Internet-wide probing invariably raises ethical concerns. We therefore follow the
recommended guidelines for good Internet citizenship provided in [8] to mitigate
the potential impact of our probing. At a high-level, we only send ICMP packets,
which are generally considered less abusive than e.g., TCP or UDP probes that
may reach active application services. Further, our pseudo-random probing order
is designed to distribute probes among networks in time so that they do not
appear as attack traﬃc. Finally, we make an informative web page accessible
via the IP address of our prober, along with instructions for opting-out. In this
work, we did not receive any abuse reports or opt-out requests.
90
E. C. Rye and R. Beverly
5 Results
On October 6, 2018, we sent four ICMP timestamp request messages as described
in Sect. 4.1 from both of our vantage points to each of the 14.5 million target
IPv4 addresses in the ISI hitlist. We obtained at least one ICMP timestamp
reply message from 2,221,021 unique IP addresses in 42, 656 distinct autonomous
systems as mapped by Team Cymru’s IP-to-ASN lookup service [5]. Our probing
results are publicly available [22].
We classify the responses according to the implementation taxonomy outlined
in Sect. 3 and Table 1, the timekeeping behavior detailed in Sect. 3.2, and the cor-
rectness of the timestamp reply according to Sect. 5.2. Tables 3 and 4 summarize
our results in tabular form; note that the implementation behavior categories
are not mutually exclusive, and the individual columns will sum to more than
the total column, which is the number of unique responding IP addresses. We
received replies from approximately 11,000 IP addresses whose computed MD5
hashes as described in Sect. 4.1 indicated tampering of the source IP address,
originate timestamp, or id and sequence number ﬁelds; we discard these replies.
5.1 Macro Behavior
Lazy replies outnumber normal timestamp replies by a margin of over 50 to 1.
Because we had assumed the normal reply type would be the most common, we
investigated open-source operating systems’ implementations of ICMP. In both
the Linux and BSD implementations, the receive timestamp is ﬁlled in via a call
to retrieve the current kernel time, after which this value is simply copied into
the transmit timestamp ﬁeld. Therefore, all BSD and Linux systems, and their
derivatives, exhibit the lazy timestamp reply behavior.
Normal hosts can appear lazy if the receive and transmit timestamps are set
within the same millisecond. This ambiguity can be resolved in part via multiple
probes. For instance, Table 3 shows that only ∼50% of responders classiﬁed as
normal by one vantage are also marked normal by the other.
The majority (61%) of responding devices do not reply with timestamps
within 200 ms of our NTP-synchronized reference clock, our empirically-derived
correctness bound discussed in Sect. 5.2. Only ∼40% of responding IP addresses
fall into this category; notably, we detect smaller numbers devices with cor-
rect clocks incorrectly implementing the timestamp reply message standard. For
example, across both vantage points we detect thousands of devices whose times-
tamps are correct when interpreted as a little-endian integer, rather than in net-
work byte order. We discover one operating system that implements little-endian
timestamps in Sect. 4.2. In another incorrect behavior that nevertheless indicates
a correct clock, some devices respond with the correct timestamp and the most
signiﬁcant bit set – a behavior at odds with the speciﬁcation [21] where the
most signiﬁcant bit indicates a timestamp either not in ms, or the host cannot
provide a timestamp referenced to UTC midnight. In Sect. 4.2, we discuss an
operating system that sets the most signiﬁcant bit when its clock has not been
synchronized with NTP.
Table 3. Timestamp reply implementation behaviors (values do not sum to total)
Category
Boston
Both
San Diego Category
Boston
Both
San Diego
Sundials in the Shade
91
Normal
Lazy
40,491
19,819
40,363
Stuck
2,111,344 1,899,297 2,112,386 Constant 0
Checksum-Lazy 28,074
23,365
28,805
Constant 1
855
547
200
Non-UTC
Reﬂection
Correct
249,454
211,755
249,932
Constant LE 1 22
2,325
2,304
2,364
htons() Bug
1,499
850,787
803,314
850,133
Timezone
849
546
199
19
665
873
555
207
23
1,536
33,762
32,956
33,317
38,495
23,464
11,865
Correct LE
11,127
5,244
11,290
Unknown
Correct - MSB 1,048
386
973
Total
2,194,180 1,934,172 2,189,524
Over 200,000 unique IPs (>10% of each vantage point’s total) respond with
the most signiﬁcant bit set in the receive and transmit timestamps; those times-
tamps that are otherwise correct are but a small population of those we term
Non-UTC due to the prescribed meaning of this bit in [21]. Some hosts and
routers fall into this category due to the nature of their timestamp reply imple-
mentation – devices that mark the receive and transmit timestamps with little-
endian timestamps will be classiﬁed as Non-UTC if the most signiﬁcant bit of
the lowest order byte is on, when the timestamp is viewed in network byte order.
Others, as described above, turn on the Non-UTC bit if they have not synchro-
nized with NTP.
Another major category of non-standard implementation behavior of ICMP
timestamp replies are devices that report their timestamp relative to their local
timezone. Whether devices are programmatically reporting their local time with-
out human intervention, or whether administrator action is required to change
the system time (from UTC to local time) in order to eﬀect this classiﬁcation is
unclear. In either case, timezone timestamp replies allow us to coarsely geolocate
the responding device. We delve deeper into this possibility in Sect. 5.4.
Finally, while most responding IP addresses are unsurprisingly classiﬁed
as using milliseconds as their unit of measure, approximately 14–16% of IP
addresses are not (see Table 4). In order to determine what units are being used
in the timestamp, we subtract the time elapsed between the standard times-
tamp request and duplicate timestamp request, both of which contain correct
originate timestamp ﬁelds. We then subtract the time elapsed according to the
receive and transmit timestamps in the timestamp reply messages. If the diﬀer-
ence of diﬀerences is less than 400 ms (two times 200 ms, the error margin for
one reply) we conclude that the remote IP is counting in milliseconds. A similar
calculation is done to ﬁnd devices counting in seconds. Several of the behavioral
categories outlined in Sect. 3.1 are included among the hosts with undeﬁned
timekeeping behavior – those whose clocks are stuck at a particular value and
those that reﬂect the request’s receive and transmit timestamps into the corre-
sponding ﬁelds are two examples. Others may be ﬁlling the reply timestamps
with random values.
92
E. C. Rye and R. Beverly
Table 4. Timestamp reply timekeeping behaviors
Category
Millisecond
Second
Epoch
Boston
Both
San Diego
1,826,696 1,722,176 1,866,529
47
1
37
1
68
1
Unknown timekeeping 367,436
211,958
322,926
Total
2,194,180 1,934,172 2,189,524
5.2 Timestamp Correctness
In order to make a ﬁnal classiﬁcation – whether the remote host’s clock is correct
or incorrect – as well as to assist in making many of the classiﬁcations within our
implementation and timekeeping taxonomies that require a correctness determi-
nation, we describe in this section our methodology for determining whether or
not a receive or transmit timestamp is correct.
To account for clock drift and network delays, we aim to establish a margin
of error relative to a correctly marked originate timestamp, and consider receive
and transmit timestamps within that margin from the originate timestamp to be
correct. To that end, we plot the probability density of the diﬀerences between
the receive and originate timestamps from 2.2 million timestamp replies gener-
ated by sending a single standard timestamp request to each of 14.5 million IP
addresses from the ISI hitlist [9] in Fig. 4.
Figure 4 clearly depicts a trough in the diﬀerence probability values around
200 ms, indicating that receive timestamps greater than 200 ms than the originate
timestamp are less likely than those between zero and 200 ms. We reﬂect this
margin about the y-axis, despite the trough occurring somewhat closer to the
origin on the negative side. Therefore, we declare a timestamp correct if it is
within our error margin of 200 ms of the originate timestamp.
5.3 Middlebox Inﬂuence
To investigate the origin of some of the behaviors observed in Sect. 3 for which
we have no ground truth implementations, we use tracebox [7] to detect middle-
boxes. In particular, we chose for investigation hosts implementing the reﬂection,
lazy with MSB set (but not counting milliseconds), and constant 0 behaviors,
as we do not observe any of these ﬁngerprints in our ground truth dataset, yet
there exist nontrivial numbers of them in our Internet-wide dataset.
In order to determine whether a middlebox may be responsible for these
behaviors for which we have no ground truth, we tracebox to a subset of 500 ran-
dom IP addresses exhibiting them. For our purposes, we consider an IP address
to be behind a middlebox if the last hop modiﬁes ﬁelds beyond the standard
IP TTL and checksum modiﬁcations, and DSCP and MPLS ﬁeld alterations
and extensions. Of 500 reﬂection IP addresses, only 44 showed evidence of being
Sundials in the Shade
93