### Abusing Webhooks for Command and Control
**Speaker: Dimitry Snezhkov (@Op_nomad)**

#### Overview
**Subject:** Safer bidirectional delivery of content and communication across network boundaries using Webhook technology.

**From:**
- Hostile networks
- Monitored networks
- Censored networks
- Restricted networks

**To:**
- External hosts under your control (C&C servers)

**Purpose:**
- External content retrieval
- Internal content exfiltration
- Shell execution on external and internal hosts

**Audience:**
- **Offense:**
  - Red Teamers
  - Pen Testers
- **Defense:**
  - DF/IR professionals
  - System Administrators
  - Developers
  - Privacy Advocates
  - Anyone interested in covert communication

**Disclaimer:**
"Opinions expressed are solely my own and do not express the views or opinions of my employer or its products."

**About Me:**
- Offensive Testing
- Code Hacking
- Tool Hacking
- Other security work

#### Context and Goals
**Strategic Goals:**
- Achieve asynchronous or real-time-asynchronous communication between hostile networks and external servers under your control.
- Attempt to achieve reverse connectivity to hostile networks from external servers under your control.
- Avoid existing detection mechanisms, elevating operational security (OpSec) capability.
- Attempt to avoid censorship in communicating with safe external servers under your control.

**Tactical Goals:**
- Discover HTTP Webhooks concept.
- Use Webhooks to achieve unidirectional or bidirectional connectivity with the external world.
- Develop a tool to shuttle communication over Webhooks.

#### The Players
- **Offense (RED)**
- **Defense (BLUE)**
- **Content Proxy**
- **Command and Control Server (C2)**
- **C2 Broker**
- **Internal Agent, Client**
- **External Agent, Server**

**A Game of Six Blind Blue Men and the Red Elephant**

#### The Problem
**Communication from restricted networks can be challenging.**

- **Blue Perspective:**
  - Wait until the unknown entity moves.
  - Place a monitor and watch passively.
  - Determine the unknown environment, defenses, and capabilities without revealing monitoring mechanisms.
  
- **Red Perspective:**
  - Wish: If I don’t move, maybe they will go away.
  - Reality: Must move to gather information.
  - Possible outcomes:
    - Unsafe negative outcome
    - Safe negative outcome
    - Safe positive outcome

**Unsafe Negative Outcome:**
- Red: My probes indicate a hostile environment (e.g., IDS sensors, prohibited tunneling, tight content proxy, no domain fronting).
- Blue: My sensors classify the unknown as safe, assuming it is an approved tool or protocol.

**Safe Positive Outcome:**
- Both sides build static maps based on previous assumptions.
- No map is completely true; both may use only "known" methods for classification, be overly paranoid, or dismissive of each other’s capabilities.
- Red needs to consistently break its static map, adapt, and meet Blue at their map, pacing and then leading them.

#### Mimicry and Adaptation
**Levels of Mimicry for Red:**
- Blue known and approved business need/role/process
- Blue approved traffic/protocol
- Blue “good” tools and “valid” rules

**On the Path to Mimicry:**
- Trust Detection Mechanisms: Draconian content proxy, whitelist, and inspection for “known bad.”
- Pace: Mimic and follow the developer's process, tools, and protocols.
- Lead: Make Blue believe you are “known good.”

#### Webhooks for the Red Elephants
**Webhooks:**
- New technology for asynchronous web responses.
- Built for notification services.
- Likely to be adopted in enterprises.
- Easy to implement and maintain.
- Collaborative and social coding friendly.
- Operates over HTTP with all security mechanisms (TLS).

**Server Request/Response Polling Loop:**
1. Submit a request for processing to the web server.
2. Server begins executing the request.
3. Client keeps polling the server for a response.
4. When the server has the result, the client retrieves it.

**Webhooks: Response Subscription:**
0. Client provides a URL for the response (a hook) to the server.
1. Client submits a request for processing to the server.
2. Server executes the request while the client sleeps.
3. Server notifies the client by sending the response back.
4. Client processes the response.

**Who Uses Webhooks?**
- Continuous Integration (CI) services (e.g., Heroku)
- Code management repositories (GitHub, etc.)
- Team communication services (Slack, etc.)
- Notifications and alerting (e.g., DataDog, PagerDuty, etc.)

#### Safe Negative Outcome Revisited
- Direct connection to C2 site is not ranked.
- Red: Environment classified as hostile (e.g., IDS sensors, prohibited tunneling, tight content proxy, no domain fronting).

**C2 Broker:**
- Find a policy-allowed site to communicate with.
- Turn it into a content broker (C2 Broker) with Webhooks.
- Drive data and communication over the broker site to C2.

**C2 Broker Site Operation:**
- Needs to be public and have a decent set of Webhook APIs.
- Should blend into expected traffic and be on the “VIP list” with content proxies.

**GitHub as a C2 Broker Site:**
- Extensively used and popular.
- Developer-friendly with full-featured Webhook API.
- Mostly allowed.
- OpSec features: TLS, tokens, HMAC on requests.

**OctoHook – a GitHub C2 Broker Toolkit:**
- Register OctoHook Server Webhook with GitHub.
- Use OctoHook Client to send requests to the OctoHook Server over GitHub.
- GitHub drives the Webhook to the OctoHook Server.
- The Webhook reaches the C2 OctoHook Server and executes a command.
- The C2 stores the response on GitHub.
- Fetch the response locally from GitHub to the OctoHook Client.

**OctoHook Agent Request Delivery Mechanisms:**
- Every client is an agent with a unique identifier.
- Command delivery over Git issues, YAML/JSON, and templates.
- Initial logon and Git app tokens.

**OctoHook Agent Response Delivery Mechanisms:**
- Issue states: Client opens, server closes.
- Responses over comments to issues.
- Large responses split across multiple comments, reassembled by the client.

**OctoHook Content Response Delivery Mechanisms:**
- Over Git uploads per agent directory.
- Issue states and status updated over issue comments.

**Scenario: Need Tools Infiltrated.**
- GitHub Server Request/Response Polling Loop.
- Avoid asking "Are we there yet?" through throttling and manual polling.

**OctoHook: Bidirectional Asynchronous Comms:**
- Before: A poll from the client (OK).
- Now: Asynchronous broadcast (Better).

**OctoHook: Multi-hook C2 Broker:**
- GitHub OctoHook Swarm: IPs, ports, resources.
- GitHub allows up to 20 Webhooks.

**OctoHook: Roles:**
- Web Role (Parallel)
- Command Role (Exclusive)

**Demo:**
1. Asynchronous Command Execution (Polling)
2. Asynchronous Bidirectional Command Response Delivery
3. Asynchronous Content Delivery
4. Auxiliary Features

**OctoHook C2 Broker Now:**
- Cross-platform (Command Role only for now)
- Real-time/asynchronous notification
- On-demand response monitoring (Git Issue polling)
- Execute on server, find content, and upload to GitHub for retrieval
- Single process embedded command server and web server
- Extensible with command plugins
- Request throttling aware
- Can be coded for exfiltration and infiltration

**OctoHook C2 Broker: What’s Next:**
- Broadcast across all agents (swarming capability)
- Send/receive commands from specific agents
- Role (re-)assignment
- Requests to specific agents
- Simultaneous execution on multiple agents
- Flip C2 direction (e.g., to the inside)

#### Defense and Mitigation
- Webhooks are here to stay.
- Behavioral rules are best to see what is “normal” for your organization.
- Allow specific developer workstations access to GitHub.
- Review who and why is using GitHub in your organization.
- Allow access to specific repo paths if possible.
- Survey public cloud portals with Webhooks being used internally (e.g., Slack, CI tools, video and meeting software).

**Thank You!**
- Code: [https://github.com/dsnezhkov/octohook](https://github.com/dsnezhkov/octohook)
- Questions?
- Follow updates / Stay in touch: @Op_nomad