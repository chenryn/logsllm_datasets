explore these issues in a later chapter.
在Go 中没有像字节流那样专门处理字符流的工具。如何处理字符集和字符编码是非常重要的，我们
将会在下一章专门讨论这些问题。
If we just pretend everything is ASCII, like it was once upon a time, then character
formats are quite straightforward to deal with. The principal complication at this
level is the varying status of "newline" across different operating systems. Unix
uses the single character '\n'. Windows and others (more correctly) use the pair
"\r\n". On the internet, the pair "\r\n" is most common - Unix systems just need
to take care that they don't assume '\n'.
如果和以前一样，处理的所有字符都是ASCII 码，那么我们能直接又简单地处理这些字符。但是实
际上，字符处理复杂的原因是不同的操作系统上有各种不统一的“换行符”。Unix 使用简单的'\n' 来
表示换行，Windows 和其他的系统（这种方法更正确）使用“\r\n”来表示。在实际的网络传输中，
使用一对“\r\n”是更通用的方案 -- 因为Unix 系统只需要注意不要设定换行符只有“\n”就可以满
足这个方案。
5.6 Simple Example 简单的例子
This example deals with a directory browsing protocol - basically a stripped down
version of FTP, but without even the file transfer part. We only consider listing
a directory name, listing the contents of a directory and changing the current
directory - all on the server side, of course. This is a complete worked example
of creating all components of a client-server application. It is a simple program
which includes messages in both directions, as well as design of messaging protocol.
这个例子展示的是一个文件夹浏览协议 -- 基本上就是一个简单的 FTP 协议，只是连FTP 的文件传
输都没有实现。我们考虑这个例子包含的功能有：展示文件夹名称，列出文件夹内包含的文件，改变
当前文件夹路径 -- 当然所有这些文件都是在服务器的。这是一个完整的包含客户端和服务器的例子。
这个简单的程序既需要两个方向的消息交互，也需要消息的具体协议设计。
Look at a simple non-client-server program that allows you to list files in a
directory and change and print the directory on the server. We omit copying files,
as that adds to the length of the program without really introducing important
concepts. For simplicity, all filenames will be assumed to be in 7-bit ASCII. If
we just looked at a standalone application first, then the pseudo-code would be
在开始例子之前，我们先看一个简单的程序，这个程序不是客户端和服务器交互的程序，它实现的功
能包括：展示文件夹中的文件，打印出文件夹在服务器上的路径。在这里我们忽略正在拷贝中的文件，
因为考虑这些细节会增加代码长度，却对我们要介绍的重要概念没有什么帮助。简单假设：所有的文
件名都是7 位的ASCII 码。先考虑这个独立的程序，它的伪代码应该是：
read line from user
while not eof do
if line == dir
list directory
else
if line == cd 
change directory
else
if line == pwd
print directory
else
if line == quit
quit
else
complain
read line from user
A non-distributed application would just link the UI and file access code
一个非分布式的应用是将UI 和文件存储代码连接起来
In a client-server situation, the client would be at the user end, talking to a server
somewhere else. Aspects of this program belong solely at the presentation end, such
as getting the commands from the user. Some are messages from the client to the server,
some are solely at the server end.
在包含有客户端和服务器的情况下，客户端就代表用户终端，用来和服务器交互。这个程序最独立的
部分就是表现层，比如如何获取用户的命令等。这个程序的消息有的是从客户端到服务器，有的只是
在服务器。
For a simple directory browser, assume that all directories and files are at the
server end, and we are only transferring file information from the server to the
client. The client side (including presentation aspects) will become
对于简单的文件夹浏览器来说，假设所有的文件夹和文件都是在服务器端，我们也只需要从服务器传
递文件消息给客户端。客户端的伪代码（包括表现层）应该如下：
read line from user
while not eof do
if line == dir
list directory
else
if line == cd 
change directory
else
if line == pwd
print directory
else
if line == quit
quit
else
complain
read line from user
where the italicised lines involve communication with the server.
上面斜体字的部分是代表需要与服务器进行交互的命令。
Alternative presentation aspects
改变表现层
A GUI program would allow directory contents to be displayed as lists, for files
to be selected and actions such as change directory to be be performed on them. The
client would be controlled by actions associated with various events that take place
in graphical objects. The pseudo-code might look like
GUI 程序可以很方便展示文件夹内容，选择文件，做一些诸如改变文件夹路径的操作。客户端被图形
化对象中的各种定义好的事件所驱动从而实现功能。伪代码如下：
change dir button:
if there is a selected file
change directory
if successful
update directory label
list directory
update directory list
The functions called from the different UI's should be the same - changing the
presentation should not change the networking code
不同的UI 实现的功能都是一样的 -- 改变表现层并不需要改变网络传输的代码
Protocol - informal
协议 -- 概述
client request server response
dir send list of files
change dir
cd  send error if failed
send ok if succeed
pwd send current directory
quit quit
Text protocol
文本传输协议
This is a simple protocol. The most complicated data structure that we need to send
is an array of strings for a directory listing. In this case we don't need the heavy
duty serialisation techniques of the last chapter. In this case we can use a simple
text format.
这是一个简单的协议，最复杂的部分就是我们需要使用字符串数组来列出文件夹中内容。所以，我们
就不使用最后一章讲到的繁琐复杂的序列化技术了，仅仅使用一种简单的文本格式就好了。
But even if we make the protocol simple, we still have to specify it in detail. We
choose the following message format:
但是实际上，即使我们想尽量使得协议简单，在细节上也需要考虑清楚。我们使用下面的消息格式约
定：
 All messages are in 7-bit US-ASCII
 The messages are case-sensitive
 Each message consists of a sequence of lines
 The first word on the first line of each message describes the message type.
All other words are message data
 All words are separated by exactly one space character
 Each line is terminated by CR-LF
 所有的消息都是7 位的US-ASCII 码
 所有的消息都是大小写敏感
 每条消息都是由一系列的行组成
 第一行的第一个单词是用来说明消息类型，其他单词都是具体的消息数据
 相邻的单词应该只有一个空格符分隔
 每一行以CR-LF 作为结束符
Some of the choices made above are weaker in real-life protocols. For example
实际上，上面的一些考虑在真实的协议中是远远不够的。比如
 Message types could be case-insensitive. This just requires mapping message
type strings down to lower-case before decoding
 An arbitrary amount of white space could be left between words. This just adds
a little more complication, compressing white space
 Continuation characters such as '\' can be used to break long lines over several
lines. This starts to make processing more complex
 Just a '\n' could be used as line terminator, as well as '\r\n'. This makes
recognising end of line a bit harder
 消息类型类型应该是大小不写敏感的。 对于表示消息类型的字符串，我们就需要在解码前将
它小写化
 单词与单词间的多余空白字符应该被丢弃掉。当然这会增加一些代码的复杂度，去处理压缩空
白符
 像“\”这样的续行符应该被使用，它能将一个大的长句子分隔成几行。从这里开始，程序渐渐
变得更复杂了
 像“\n”这样的字符也应该能被解析为换行符，就和“\r\n”一样。这个就让辨识解析程序的结
束符更为复杂了
All of these variations exist in real protocols. Cumulatively, they make the string
processing just more complex than in our case.
所有以上的变化和考虑都会在真实使用的协议中出现。渐渐地，这些会导致实际的字符处理程序比我
们的这个例子复杂。
client request server response
send list of files, one per line
send "DIR"
terminated by a blank line
change dir
send "CD " send "ERROR" if failed
send "OK"
send "PWD" send current working directory
Server code
服务器代码
/* FTP Server
*/
package main
import (
"fmt"
"net"
"os"
)
const (
DIR = "DIR"
CD = "CD"
PWD = "PWD"
)
func main() {
service := "0.0.0.0:1202"
tcpAddr, err := net.ResolveTCPAddr("tcp", service)
checkError(err)
listener, err := net.ListenTCP("tcp", tcpAddr)
checkError(err)
for {
conn, err := listener.Accept()
if err != nil {
continue
}
go handleClient(conn)
}
}
func handleClient(conn net.Conn) {
defer conn.Close()
var buf [512]byte
for {
n, err := conn.Read(buf[0:])
if err != nil {
conn.Close()
return
}
s := string(buf[0:n])
// decode request
if s[0:2] == CD {
chdir(conn, s[3:])
} else if s[0:3] == DIR {
dirList(conn)
} else if s[0:3] == PWD {
pwd(conn)
}
}
}
func chdir(conn net.Conn, s string) {
if os.Chdir(s) == nil {
conn.Write([]byte("OK"))
} else {
conn.Write([]byte("ERROR"))
}
}
func pwd(conn net.Conn) {
s, err := os.Getwd()
if err != nil {
conn.Write([]byte(""))
return
}
conn.Write([]byte(s))
}
func dirList(conn net.Conn) {
defer conn.Write([]byte("\r\n"))
dir, err := os.Open(".")
if err != nil {
return
}
names, err := dir.Readdirnames(-1)
if err != nil {
return
}
for _, nm := range names {
conn.Write([]byte(nm + "\r\n"))
}
}
func checkError(err error) {
if err != nil {
fmt.Println("Fatal error ", err.Error())
os.Exit(1)
}
}
Client code
客户端代码
/* FTPClient
*/
package main
import (
"fmt"
"net"
"os"
"bufio"
"strings"
"bytes"
)
// strings used by the user interface
const (
uiDir = "dir"
uiCd = "cd"
uiPwd = "pwd"
uiQuit = "quit"
)
// strings used across the network
const (
DIR = "DIR"
CD = "CD"
PWD = "PWD"
)
func main() {
if len(os.Args) != 2 {
fmt.Println("Usage: ", os.Args[0], "host")
os.Exit(1)
}
host := os.Args[1]
conn, err := net.Dial("tcp", host+":1202")
checkError(err)
reader := bufio.NewReader(os.Stdin)
for {
line, err := reader.ReadString('\n')
// lose trailing whitespace
line = strings.TrimRight(line, " \t\r\n")
if err != nil {
break
}
// split into command + arg
strs := strings.SplitN(line, " ", 2)
// decode user request
switch strs[0] {
case uiDir:
dirRequest(conn)
case uiCd:
if len(strs) != 2 {
fmt.Println("cd ")
continue
}
fmt.Println("CD \"", strs[1], "\"")
cdRequest(conn, strs[1])
case uiPwd:
pwdRequest(conn)
case uiQuit:
conn.Close()
os.Exit(0)
default:
fmt.Println("Unknown command")
}
}
}
func dirRequest(conn net.Conn) {
conn.Write([]byte(DIR + " "))
var buf [512]byte
result := bytes.NewBuffer(nil)
for {
// read till we hit a blank line
n, _ := conn.Read(buf[0:])
result.Write(buf[0:n])
length := result.Len()
contents := result.Bytes()
if string(contents[length-4:]) == "\r\n\r\n" {
fmt.Println(string(contents[0 : length-4]))
return
}
}