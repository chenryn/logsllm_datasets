# SecureSwitch: BIOS-Assisted Isolation and Switch between Trusted and Untrusted Commodity OSes

## Authors
- Kun Sun
- Jiang Wang
- Fengwei Zhang
- Angelos Stavrou

## Abstract
SecureSwitch is a BIOS-assisted system that provides secure isolation and switching between trusted and untrusted operating systems. This solution ensures that sensitive data and operations are protected from potential threats in an untrusted environment, while enabling users to switch between environments with low latency.

## Outline
1. Introduction
2. Related Works
3. Background Knowledge
4. System Architecture
5. Experimental Results
6. Discussion
7. Summary

## 1. Introduction
SecureSwitch aims to segregate personal communication and entertainment activities from business and government operations. In an untrusted environment, activities such as web browsing, online gaming, and social media usage are common. Conversely, in a trusted environment, activities like online banking, shopping, and accessing business web portals are performed. The primary goals of SecureSwitch are:
- To create a trusted computing environment.
- To isolate the trusted environment from the untrusted environment.
- To prevent data leakage even if the host has been previously infected with malware in the untrusted environment.
- To enable secure transactions on demand with low context switching latency.

## 2. Related Works
### Lampson Red/Green System Separation
- **Red/Green System**: Policy + Isolation + Accountability + Freedom
- **Butler Lampson (2005)**: Accountability and Freedom Slides, Microsoft
- Our work focuses on isolation between two environments, not on how users decide which applications go into each OS or on controlling data exchanges between the environments.

### Software-based Isolation Solutions
- **VMM-based**: Xen, VMware, QEMU, UML
- **OS-based**: FreeBSD Jail, Linux OpenVZ, Solaris Container
- **Browser-based**: Adobe Flash, Java applets, Silverlight
- **Security Concerns**:
  - VMM vulnerabilities
  - Covert channels
  - OS vulnerabilities
  - Privilege escalation
  - Browser vulnerabilities
  - From 1999 to 2009, 373 vulnerabilities affected virtualization solutions (IBM X-Force 2010 Mid-year trend and risk report).

### Hardware-based Isolation Solutions
- **Multiple Computers**
- **Whole Physical Computer**: Multi-boot, VT-x/SVM (DRTM)
- **Isolation Level**: OS level, Instruction level
- **Examples**: Bootloader (LILO, Grub), Flicker, TrustVisor
- **Problems**: Cost, inflexibility, long switching time, software compatibility
- **Our Solution**: Provides BIOS-assisted OS-level isolation without using mutable software layers (e.g., hypervisor), no changes to OS source code, no data leak between environments, and fast switching time (around 6 seconds).

## 3. Background Knowledge
### ACPI Sleeping States
- **Advanced Configuration and Power Interface (ACPI)**: OS-directed configuration, power/thermal management, widely supported industrial standard.
- **Global System States**:
  - G0: Working (System Operational)
  - G1: Sleeping (CPU stopped)
  - G2: Soft Off
  - G3: Mechanical off (Physical off switch)
- **Sleeping States in G1**:
  - S3: Standby, Suspend to RAM (DRAM maintained)
  - S4: Hibernation, Suspend to Disk (DRAM not maintained)
- **Device Power States**:
  - D0: Fully-On
  - D3: Power off to device

### BIOS, UEFI, and Coreboot
- **Basic Input/Output System (BIOS)**: Initializes hardware, stored in non-volatile ROM chips.
- **Unified Extensible Firmware Interface (UEFI)**: New software interface between OS and firmware, eases development, partially open source.
- **Coreboot (formerly LinuxBIOS)**: Similar functionality to UEFI, open source. We use Coreboot V4.

### DIMM Mask and DQS Setting
- A motherboard may have multiple Dual In-line Memory Module (DIMM) slots.
- Each OS is assigned one DIMM.
- BIOS uses "DIMM_MASK" to control enabled DIMMs and sets corresponding "data strobes" (DQS) parameters for DDR RAM memory access.
- Two sets of DQS settings are required to support the two DIMMs used by the two OSes.

## 4. System Architecture
### Attack Model
- **Assumptions**:
  - BIOS and option ROM on devices can be trusted.
  - No physical access to the protected machine.
  - Attacks from the untrusted OS.
- **Types of Attacks**:
  - Data exfiltration: Stealing sensitive data from the trusted OS.
  - Spoofing Trusted OS: Deceiving the user into a fake trusted OS.
  - Cache-based side channel attacks: Extracting sensitive information.
  - Out of scope: Denial of Service, network attacks, malicious device firmware.

### Secure Switching State Machine
- **Trusted Path**: Ensures users are working with the intended OS.
- **Prevent Spoofing Trusted OS Attacks**:
  - Untrusted OS should be truly suspended.
  - **OS Flag**: Indicates which OS should be woken next.
  - **Boot Flag**: Indicates if the untrusted OS has been loaded.
  - **Storage**:
    - Boot Flag: in CMOS
    - OS Flag: physical jumper (e.g., pins in Parallel port connector)
  - **Power LED**: Lights up when powered on, blinks in sleep mode.
  - **BIOS Entry**: Press the power button.
  - **Protecting System Flags/Variables**.

### Secure Switching Process
- **System Isolation**:
  - **CPU Isolation**: Two OSes never run concurrently.
  - **Memory Isolation**: Physical-level isolation.
  - **Hard Disk Isolation**: Encrypted hard disk + RAM disk.
  - **Other I/O Isolation**: Clean buffers and states in devices.
  - **Isolation Mechanisms**:
    - OS with ACPI S3
    - BIOS
    - CPU, Memory, Hard Disk, VGA, NIC

### Physical-level Memory Isolation
- **Separate DIMMs**: Each OS runs in separate DIMMs.
- **BIOS Control**: Enables and reports one DIMM for each OS.
- **DQS Settings**: Two DQS settings for two OSes.
- **DIMM_MASK**: Controlled by the physical jumper.
- **System Crash**: If DIMM_MASK conflicts with DQS setting.
- **BIOS Initialization**: Only BIOS can initialize and enable DIMMs after boot.

### Hard Drive Isolation
- **Encryption**: Hard disk encryption.
- **Two Hard Disks**: One for each OS.
- **Disk Lock**: ATA specification.
- **BIOS Control**: Enables only one hard disk.
- **SMM-based Detection**: Checks channel enable registers.
- **RAM Disk**: Saves temporary data for browser-based applications.

## 5. Experimental Results
### Prototype
- **Hardware**:
  - Motherboard: ASUS M2V-MX_SE
  - CPU: AMD Sempron 64 LE-1300
  - DDR2: Kingston HyperX 1GB
  - HDD: Seagate 500GB
- **Software**:
  - BIOS: Coreboot + SeaBIOS
  - Trusted OS: Linux (Centos 5.5)
  - Untrusted OS: Windows XP

### Performance Analysis
- **Linux Suspend Time Breakdown**:
  - User Space: 1517.33 ms
  - Kernel Space: 1590.14 ms
- **Linux Wakeup Time Breakdown**:
  - User Space: 621.04 ms
  - Kernel Space: 1537.22 ms

## 6. Discussion
### Comparison with Other Systems
- **Flicker**: Execution infrastructure for TCB minimization.
- **TrustVisor**: Efficient TCB reduction and attestation.

## 7. Summary
- **Developed a BIOS-based secure isolation and switching system**.
- **Prevents data leakage**.
- **Does not use a hypervisor**.
- **No changes to OS source code**.
- **Low switching time**.

## References
1. J. McCune, B. Parno, A. Perrig, M. Reiter, and H. Isozaki. Flicker: An execution infrastructure for TCB minimization. In Proceedings of the 3rd ACM SIGOPS/EuroSys European Conference on Computer Systems 2008, pages 315â€“328. ACM, 2008.
2. J. M. McCune, Y. Li, N. Qu, Z. Zhou, A. Datta, V. Gligor, and A. Perrig. TrustVisor: Efficient TCB reduction and attestation. In Proceedings of the IEEE Symposium on Security and Privacy, 2010.

## Thank You
Questions?