tion of different attack vectors – considering changes in
the Ids of the newly created elements and the positions
of the Signature elements – are created. For complete-
ness, test cases for signature exclusion and untrusted sig-
natures are provided. With these attack vectors, develop-
Figure 12: A successful XSW attack performed against
the patched Salesforce SAML interface.
ers can systematically test the security of their (newly)
developed SAML libraries.
6.2 Salesforce SAML Interface Revisited
After reporting the XSW vulnerability to Salesforce, the
security response team developed a simple and promis-
ing countermeasure: the SAML interface solely accepted
messages containing one Assertion element6. On re-
quest of the Salesforce security team, we investigated
the ﬁxed SAML interface with handcrafted messages
containing wrapped contents in different elements. Our
manual analysis did not reveal any new attack vectors.
Every message containing more than one Assertion el-
ement was automatically rejected. Therefore, we ﬁrst
considered this interface to be secure.
A few months later, after ﬁnishing the development of
our penetration test tool, we decided to retest the Sales-
force SAML interface and prove the feasibility of our ap-
proach. Surprisingly, the automated penetration test tool
revealed a new successful attack variant by inserting the
wrapped content into the Audience element – a descen-
dant of the Conditions element. This element typically
contains a URI constraining the parties that can consume
the issued assertion. The wrapped message is depicted in
Figure 12. As can be seen in the ﬁgure, both Assertion
elements needed to contain the same Id attribute.
This scientiﬁcally interesting attack vector stayed un-
analyzed as the Salesforce security team did not expose
any concrete information about their SAML interface.
However, this ﬁnding shows how complex the develop-
ment of secure signature wrapping countermeasures is.
This motivates for further development of automatic pen-
etration test tools for XSW.
Salesforce security team afterwards implemented a
countermeasure, which could successfully mitigate all
our attack types. Its details were not revealed.
6This countermeasure is not standard-conform as one message can
generally contain several assertions. Therefore, we do not consider this
remedy in our countermeasure analysis in Section 7.
SignedProcessedResponseAssertionAssertionSignatureSignedInfoReferenceURI=“#123“ID=“123“ID=“123“Audiencesaml.salesforce.com7.3 Relying Party Model
We assume that processing of documents containing
SAML assertions is split into two parts: (1) XML Sig-
nature veriﬁcation RPsig, and (2) SAML security claims
processing RPclaims (see Figure 13). This assumption is
justiﬁed since both parts differ in their algorithmic base,
and because this separation was found in all frameworks.
If RPclaims accepts, then the application logic RPwork of
the Relying Party will deliver the requested resource to
the requestor.
The XML Signature veriﬁcation module RPsig is con-
ﬁgured to trust several Identity Provider public keys
{pk1, . . . , pkr}. Each public key deﬁnes a trusted do-
main within RP. After receiving a signed XML document
D, RPsig searches for a Signature element. It applies
the referencing method described in Reference to re-
trieve the signed parts of the document, applies the trans-
forms described in Transforms to these parts, and com-
pares the computed hash values with the values stored in
DigestValue. If all these values match, signature ver-
iﬁcation is performed over the whole SignedInfo ele-
ment, with one of the trusted keys from {pk1, . . . , pkr}.
RPsig then communicates the result of the signature veri-
ﬁcation (eventually alongside D) to RPclaims.
The SAML security claims processing module
RPclaims may operate a customer database dbRP, and may
validate SAML assertions against this database. In this
case if the claimed identity is contained in dbRP, the asso-
ciated rights are granted to the requestor. As an alterna-
tive, RPclaims may rely on authorization data contained in
dbIdP. In this case, the associated rights will be contained
in the SAML assertion, and RPclaims will grant these.
Please note that the deﬁnition of the winning event
given below does not depend on the output of the sig-
nature veriﬁcation part RPsig, but on the SAML asser-
tion processing RPclaims. This is necessary since in all
cases described in this paper, signature veriﬁcation was
done correctly (as is always the case with XML Signa-
ture wrapping). Therefore, to be able to formulate mean-
ingful statements about the security of a SAML frame-
work, we must make some assumptions on the behavior
of RPclaims.
There are many possible strategies for RPclaims to pro-
cess SAML assertions: E.g. use the claims from the ﬁrst
assertion which is opened during parsing, from the ﬁrst
that is closed during parsing (analogously for the last as-
sertion opened or closed), or issue an error message if
more than one Assertion element is read.
7.4 Adversarial Model
Please recall
types of adversaries
we have mentioned in our threat model in Section 4.
Advintc is the stronger of the two: He has the ability to
the two different
Figure 13: Overview of the components in our formal
model.
7 Analysis and Countermeasures
In order to deﬁne what a successful attack on a SAML
implementation is, we have to deﬁne the possibilities of
the adversary, and the event that characterizes a success-
ful attack. We do this in form of a game played between
the adversary on one side, and IdP and RP on the other
side. Additionally, we derive two different countermea-
sures. Their practical application is described in Sec-
tion 8.
7.1 Data Model
A SAML assertion A can be sent to a Relying Party RP
either as a stand-alone XML document, or as part of a
larger document D. (D may be a complete SOAP mes-
sage, or a SAML Authentication response.) To process
the SAML assertion(s), the Relying Party (more speciﬁ-
cally, RPclaims) searches for the Assertion element and
parses it. We assume that A is signed, either stand-alone,
or as part of D.
7.2
Identity Provider Model
We deﬁne an Identity Provider IdP to be an entity that is-
sues signed SAML assertions, and that has control over
a single private key for signing. Thus, companies like
Salesforce may operate several IdPs, one for each do-
main of customers.
An Identity Provider IdP operates a customer database
dbIdP and is able to perform a secure authentication
protocol with any customer contained in this database.
Furthermore, he has control over a private signing key,
where the corresponding public key is trusted by a set of
Relying Parties RP := {RP1, . . . ,RPn}, either directly,
or through means of a Public Key Infrastructure. After
receiving a request from one of the customers registered
in dbIdP, and after successful authentication, he may is-
sue a signed XML document D, where the signed part
contains the requested SAML assertion A.
IdP1IdP2IdP3AdvaccAdvintcRPsigRPclaimsRPworkpartially intercept network trafﬁc, e.g. by snifﬁng HTTP
trafﬁc on an unprotected WLAN, by reading past mes-
sages from an unprotected log ﬁle, or by a chosen ci-
phertext attack on TLS 1.0 along the lines of [5]. Please
note that already this adversary is strictly weaker than the
classical network based attacker known from cryptogra-
phy. Advacc, our weaker adversary, only has access to
the IdP and RP, i.e. he may register as a customer with
IdP and receive SAML assertions issued about himself,
and he may send requests to RP.
We deﬁne preconditions and success conditions of an
attacker in the form of a game G. If Adv mounts a suc-
cessful attack under these conditions, we say that Adv
wins the game. This facilitates some deﬁnitions.
During the game G, the adversary has access to a
validly signed document D containing a SAML assertion
A issued by IdP. He then generates his own (evil) asser-
tion EA, and combines it arbitrarily with D into an XML
document D(cid:48). This document is then sent to RP.
Deﬁnition 1. We say that the adversary (either Advintc or
Advacc) wins game G if RP, after receiving document D(cid:48),
with non-negligible probability Pr(WinAdv) bases its au-
thentication and authorization decisions on the security
claims contained in EA.
Remark: For all researched frameworks, the winning
probability was either negligible or equal to 1. Within the
term ”negligible” we include the possibility that Adv is-
sues a forged cryptographic signature, which we assume
to be impossible in practice.
If an adversary wins the
game against a speciﬁc Relying Party RP, he takes over
the trust domain for a speciﬁc public key pk within RP.
Advacc may do this for all pk where he is allowed to reg-
ister as a customer with the corresponding IdP who con-
trols (sk, pk). Advintc can achieve this for all pk where he
is able to ﬁnd single signed SAML assertion A where the
signature can (could in the past) be veriﬁed with pk.
7.5 Countermeasure 1:
what-is-hashed
Only-process-
We can derive the ﬁrst countermeasure if we assume that
RPsig acts as a ﬁlter and only forwards the hashed parts
of an XML document to RPclaims. The hashed parts of
an XML document are those parts that are serialized as
an input to a hash function, and where the hash value is
stored in a Reference element. This excludes all parts
of the document that are removed before hash calculation
by applying a transformation, especially the enveloped
signature transform.
Claim 1. If RPsig only forwards the hashed parts of D to
RPclaims, then Pr(WinAdv) is negligible.
It is straightforward to see that EA is only forwarded
to RPclaims if a valid signature for EA is available.
Please note that although this approach is simple and
effective, it is rarely used in practice due to a number of
subtle implementation problems. A variant of this ap-
proach is implemented by SimpleSAMLphp, where the
RP imposes special requirements on the SAML authen-
tication response, thus limiting interoperability. We dis-
cuss these problems in Section 8.
7.6 Countermeasure 2: Mark signed ele-
ments
In practice, RPsig only returns a Boolean value, and
the whole document D is forwarded to RPclaims. Since
IdPhas to serve many different Relying Parties, we as-
sume knowledge about the strategy of RPclaims only for
RPsig. One possibility to mark signed elements is to hand
over the complete document D from RPsig to RPclaims,
plus a description where the validly signed assertions can
be found.
A second possibility that
is more appropriate for
SAML is that RPsig chooses a random value r, marks
the validly signed elements with an attribute containing
r, and forwards r together with the marked document.
RPclaims can then check if the assertion processed con-
tains r.
Let us therefore consider the second approach in more
detail. For sake of simplicity we assume that only one
complete element (i.e. a complete subtree of the XML
document tree) is signed.
Claim 2. Let Dsig be the signed subtree of D, and
let r ∈ {0,1}l be the random value chosen by RPsig
and attached to Dsig. Then Pr(WinAdv) is bounded by
max{breaksig,2−l}.
RPclaims (regardless of its strategy to choose an asser-
tion) will only process EA if r is attached to this element.
An adversary can achieve this by either generating a valid
signature for EA (then r will be attached by RPsig), or by
guessing r and attaching it to EA.
8 Practical Countermeasures
In Section 5.5 we analyzed message processing of Sim-
pleSAMLphp. This framework was resistant against all
XSW attacks. One could therefore ask a legitimate ques-
tion: Why do we need further countermeasures and why
is it not appropriate to apply the security algorithm of
SimpleSAMLphp in every system?
We want to make clear that SimpleSAMLphp offers
both critical functionalities in one framework: signa-
ture validation (RPsig) and SAML assertion evaluation
Figure 14: The see-what-is-signed approach applied in
HTTP POST binding: After successful signature valida-
tion the security module RPsig excludes all the unsigned
elements and forwards the message to the module pro-
cessing security claims RPclaims and the business logic.
(RPclaims). These two methods are implemented using
the same libraries and processing modules. After pars-
ing a document, the elements are stored within a docu-
ment tree and can be accessed directly. This allows the
security developers to conveniently access the same el-
ements used in signature validation and assertion evalu-
ation steps. However, especially in SOA environments
there exist scenarios, which force the developers to sep-
arate these two steps into different modules or even dif-
ferent systems, e.g.:
• Using a signature validation library: Before eval-
uating the incoming assertion elements, the devel-
oper uses a DOM-based signature library, which
returns true or false according to the message
validity. However, the developer does not exactly
know which elements were validated.
If the as-
sertion evaluation uses a different parsing approach
(e.g.
streaming-based SAX or StAX approach)
or another DOM-library, the message processing
could become error-prone.
• XML Security gateways: XML Security gateways
can validate XML Signatures and are conﬁgured to
forward only validated XML documents. If the de-
veloper evaluates a validated document in his appli-
cation, he again has no explicit information about
the position of the signed element. Synchronization
of signature and assertion processing components in
this scenario becomes even more complicated, if the
developer has no information about the implemen-
tation of the security gateway (e.g. IBM XS40).
These two examples show that a convenient access to
the same XML elements is not always given. Subse-
quently, we present two practical feasible countermea-
sures, which can be applied in complex and distributed
real-world implementations. Both countermeasures re-
sult from our formal analysis in Section 7.
8.1 See-what-is-signed
The core idea of this countermeasure is to forward only
those elements to the business logic module (RPclaims)
that were validated by the signature veriﬁcation module
(RPsig). This is not trivial as extracting the unsigned el-
ements from the message context could make the fur-
ther message processing in some scenarios impossible.
Therefore, we propose a solution that excludes only the
unsigned elements which do not contain any signed de-
scendants. We give an example of such a message pro-
cessing in Figure 14. This way, the claims and message
processing logic would get the whole message context:
in case of SOAP it would see the whole Envelope ele-
ment, by application of HTTP POST binding it would be
able to process the entire Response element. The main
advantage of this approach is that the message process-
ing logic does not have to search for validated elements
because all forwarded elements are validated.
We want to stress the fact that by application of this ap-
proach all unsigned character nodes have to be extracted.
Otherwise, the attacker could create an evil assertion EA
and insert the signed original assertion into each element
of EA. If RPsig would not extract the character contents
from EA, RPclaims could process its claims. However, by
extracting the unsigned character nodes, the attacker has
no possibility to insert his evil content, since it was ex-
cluded in RPsig. Nevertheless, the subsequent XML mod-
ules can still access the whole XML tree.
This idea has already been discussed by Gajek et
al. [17]. However, until now no XML Signature
framework implements this countermeasure.
It could
be applied especially in the context of SAML HTTP
POST bindings because the unsigned elements within
the SAML response do not contain any data needed
in RPclaims. We consider this countermeasure in these
scenarios as appropriate because the SAML standard
only allows the usage of Id-based referencing, exclusive
canonicalization, and enveloped transformation. The au-
thors explicitly state that this countermeasure would not
work if XML Signature uses speciﬁc XSLT or XPath
transformations.
8.2 Unique Identiﬁcation (Tainting) of
Signed Data
The second countermeasure represents another form of
the see-what-is-signed approach. The basic idea is to
uniquely identify the signed data in the RPsig module
and forward this information to the following modules.
As described in our formal analysis, this could be done
by generating a random value r, sending it to the next
processing module (or as an attribute in the document
root element), and attaching it to all the signed elements.
We give an example of this countermeasure applied to a
SOAP message in Figure 15.
The main drawback of this countermeasure is that the
SAML XML Schema does not allow the inclusion of
ResponseAssertionID=“123“SignatureURI=“#123“RPsigRPclaimsStatusResponseAssertionID=“123“contains partial information about the structure of the
SOAP message and the neighborhood of the signed el-