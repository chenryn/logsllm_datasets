# 第四届“安洵杯”网络安全挑战赛 re部分详细题解
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## signin
一个字：麻烦
先打开程序 发现好像是贪吃蛇
ida跟进`sub_40100F`，发现有个花指令和SMC，先不管这么多，先把SMC解出来。
用od动态调试，断在`0x419054`，此为加密完成的位置。然后到`0x401d10`，重新分析代码后，将整个函数选中右键复制到可执行文件-选择，然后保存到新的文件即可看到逻辑。
解出来发现这是flag的逻辑，这里程序先进行了异或，矩阵变换，然后就是一个魔改的类似TEA思想的算法。
这里的`dword_42CA44` 未知，但是其 小于256
    v5 = dword_42CA44 + 1144219440;
可以注意到加密函数这里`sub_401055((int)v5, (int)v4, 32);`
v5 虽然是一个int 数组，但是他是从char 赋值来的。所以我们可以爆破`dword_42CA44`，尝试`dword_42CA44`解出来是否
    #include 
    #include 
    #include 
    unsigned char Enc[] = { 0xA5, 0xD8, 0x8E, 0xBF, 0xF9, 0xA9, 0x15, 0xE1, 0x8A, 0xF0,
      0xD3, 0xFC, 0x46, 0x89, 0xBF, 0x8B, 0x62, 0xB1, 0x08, 0xC3,
      0x29, 0xCF, 0x19, 0x2B, 0x56, 0x06, 0x77, 0x7A, 0xBA, 0xE4,
      0xBA, 0xA4, 0xE4, 0x8C, 0x3E, 0x4E, 0xD9, 0xE1, 0xA7, 0x01,
      0x04, 0xCE, 0xE9, 0x75, 0xB9, 0x93, 0xB5, 0x22, 0xB4, 0x42,
      0x77, 0x49, 0xF6, 0x15, 0xEB, 0x24, 0x0E, 0xFF, 0xC2, 0xF2,
      0x39, 0x30, 0x97, 0x47, 0x0D, 0xCA, 0x01, 0xC8, 0x61, 0x58,
      0x12, 0x6A, 0xE8, 0x0B, 0x32, 0x80, 0x47, 0xBD, 0x85, 0x03,
      0xDD, 0x6D, 0xF9, 0x69, 0xD1, 0x90, 0x64, 0xE5, 0x4B, 0xAD,
      0x3C, 0x2D, 0xBE, 0x00, 0x42, 0x2D, 0x79, 0x69, 0xEF, 0x89,
      0x5D, 0x88, 0x91, 0x4A, 0xC7, 0xEB, 0x9D, 0x01, 0x96, 0xFD,
      0xF8, 0x3B, 0x57, 0x25, 0xDD, 0x1B, 0xDD, 0x5F, 0x68, 0xB8,
      0x14, 0x66, 0x22, 0x57, 0x28, 0x5C, 0x58, 0x9F };
    DWORD GetMagic1(int time,int x)
    {
        DWORD magic = 0x44336730 + x;
        DWORD v8 = 0;
        for(int i = 0 ; i> 2) & 3;
    }
    DWORD GetMagic2(int time,int x)
    {
        DWORD magic = 0x44336730 + x;
        DWORD v8 = 0;
        for (int i = 0; i  0; j--) {
                DWORD v8 = GetMagic2(j,x);
                DWORD v6 = GetMagic1(j,x);
                DWORD v9 = a1[30];
                a1[31] -= ((v9 ^ (know[(v6 ^ 31) & 3])) + (*a1 ^ v8)) ^ (((16 * v9) ^ (*a1 >> 3))
                    + ((4 * *a1) ^ (v9 >> 5)));
                for (int i = 30; i >= 0; i--) {
                    if (i == 0) {
                        v9 = a1[31];
                    }
                    else {
                        v9 = a1[i - 1];
                    }
                    a1[i] -= ((v9 ^ (know[(v6 ^ i) & 3])) + (a1[i + 1] ^ v8)) ^ (((16 * v9) ^ (a1[i + 1] >> 3))
                        + ((4 * a1[i + 1]) ^ (v9 >> 5)));
                }
            }
            if(ENC[0] = 3)
            v1[32 * (3 - j % 3) + i] = table[i];
        else
            v1[32 * (j % 3) + i] = table[i];
        ++i;
        ++j;
    }
    char result[32] = { 0 };
    int v7 = 0;
    for (i = 0; i =0;i--){
        // printf("%d", i);
        sb[i] ^= sb[(i + 1) % 32];
    }
    printf("%s", sb);
    Th4_1mp0rtant_th2n9_is_t0_le@rn!
## virus
主体程序是一个`process hollowing`
`sub_40132C`是一个资源提取的函数，这里用`0x41`解密资源
用`resource hacker` 把 资源节的`LOCALIZATION`的`UNICODE`数据提取，然后异或65 即可拿到真正的exe
`sub_4010EA` 是`process hollowing` 没有修改释放的程序内容，因此我们可以直接把提取的exe解包。
解包分析：
首先要输入一个key
这里key经过`KeyExpand`函数生成了128位key，程序验证最后32位是否位`Lroo`，由于key只有4位，这里我们可以直接爆破。
    void __cdecl sub_401790(char* a1, char* a2)
    {
        DWORD v2[56]; // [esp+4Ch] [ebp-FCh] BYREF
        int v3; // [esp+12Ch] [ebp-1Ch]
        int v4; // [esp+130h] [ebp-18h]
        int v5; // [esp+134h] [ebp-14h]
        int j; // [esp+138h] [ebp-10h]
        int v7; // [esp+13Ch] [ebp-Ch]
        int v8; // [esp+140h] [ebp-8h]
        int i; // [esp+144h] [ebp-4h]
        for (i = 0; i = 0; --j)
            {
                v2[7 * i + 28 + j] = v8 % 2;
                v8 /= 2;
                v2[7 * i + j] = v2[7 * i + 28 + j];
            }
        }
        v5 = 0;
        v4 = 0;
        for (i = 0; i < 4; ++i)
        {
            for (j = 0; j < 7; ++j)
            {
                v3 = v2[7 * v5 + v4];
                v2[7 * i + 28 + j] = v3;
                v5 = (v5 + 1) % 4;
                v4 = (v4 + 2) % 7;
            }
        }
        for (i = 0; i < 4; ++i)
        {
            v7 = 0;
            for (j = 0; j < 6; ++j)
            {
                v7 = 2 * (v7 + v2[7 * i + 28 + j]);
                if (v2[7 * i + 29 + j] == 1 && j == 5)
                    ++v7;
            }
            *(BYTE*)(i + a2) = v7;
        }
    }
    void baopo()
    {
        char table[] = { "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                "abcdefghijklmnopqrstuvwxyz"
                "0123456789+/_-" };
        char key[5] = { "" };