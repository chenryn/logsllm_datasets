容器的其他端点可以在[docs . docker . com/reference/API/docker _ remote _ API _ v 1.13/# 21-containers](http://docs.docker.com/reference/api/docker_remote_api_v1.13/#21-containers)上阅读。
## 远程映像应用编程接口
类似于容器，也有构建和管理映像的 API。
### 列出本地 Docker 映像
以下命令列出了本地映像:
```
$ curl $DOCKER_DAEMimg/json
[{"Created":1406791831,"Id":"7e03264fbb7608346959378f270b32bf31daca14d15e9979a5803ee32e9d2221","ParentId":"623cd16a51a7fb4ecd539eb1e5d9778 c90df5b96368522b8ff2aafcf9543bbf2","RepoTags":["shrikrishna/apt- moo:latest"],"Size":0,"VirtualSize":281018623} ,{"Created":1406791813,"Id":"c5f4f852c7f37edcb75a0b712a16820bb8c729a6 a5093292e5f269a19e9813f2","ParentId":"ebe887219248235baa0998323342f7f 5641cf5bff7c43e2b802384c1cb0dd498","RepoTags":["shrikrishna/onbuild:l atest"],"Size":0,"VirtualSize":281018623} ,{"Created":1406789491,"Id":"0f0dd3deae656e50a78840e58f63a5808ac53cb4 dc87d416fc56aaf3ab90c937","ParentId":"061732a839ad1ae11e9c7dcaa183105 138e2785954ea9e51f894f4a8e0dc146c","RepoTags":["shrikrishna/optimus:g it_url"],"Size":0,"VirtualSize":670857276}
```
这个是一个 `GET`请求 API。img/json`的请求将返回一个`JSON`响应，其中包含符合标准的映像的详细信息。
请求类型:获取
| 
参数
 | 
类型
 | 
说明
 |
| --- | --- | --- |
| 
```
all
```
 | 1/ `True` / `true`或 0/ `False` / `false` | 这个告诉是否应该显示中间容器。默认情况下为 False。 |
| 
```
filters
```
 | `JSON` | 这些用于提供过滤后的映像列表。 |
映像的其他端点可在[docs . docker . com/reference/API/docker _ remote _ API _ v 1.13/# 22-images](http://docs.docker.com/reference/api/docker_remote_api_v1.13/#22-images)上阅读。
## 其他操作
还有其他的 API 也有，比如我们在本节开头检查的 ping API。其中一些将在下一节中探讨。
### 获取全系统信息
以下命令获取 Docker 上的全系统信息。这是处理`docker info`命令的端点:
```
$ curl $DOCKER_DAEMON/info
{"Containers":41,"Debug":1,"Driver":"aufs","DriverStatus":[["Root Dir","/mnt/sda1/var/lib/docker/aufs"],["Dirs","225"]],"ExecutionDrive r":"native- 0.2","IPv4Forwarding":1,"Images":142,"IndexServerAddress":"https://in dex.docker.io/v1/","InitPath":"/usr/local/bin/docker","InitSha1":""," KernelVersion":"3.15.3- tinycore64","MemoryLimit":1,"NEventsListener":0,"NFd":15,"NGoroutines ":15,"Sockets":["unix:///var/run/docker.sock","tcp://0.0.0.0:2375"]," SwapLimit":1}
```
### 从容器提交映像
以下命令提交一个来自容器的映像:
```
$ curl \
> -H "Content-Type: application/json" \
> -d '{"Image":"ubuntu:14.04",\
> "Cmd":["echo", "I was started with the API"]}' \
> -X POST $DOCKER_DAEMON/commit?\
> container=96bdce149371\
> \&m=Created%20with%20remote%20api\&repo=shrikrishna/api_image;
{"Id":"5b84985879a84d693f9f7aa9bbcf8ee8080430bb782463e340b241ea760a5a 6b"}
```
提交是对`/commit`参数的`POST`请求，该参数包含其所基于的映像的数据以及与将在提交时创建的映像相关联的命令。关键信息包括要提交的`container` `ID`参数、提交消息及其所属的存储库，所有这些都作为查询参数传递。
请求类型:开机自检
随着`POST`请求一起发送的`JSON`数据:
| 
参数
 | 
类型
 | 
说明
 |
| --- | --- | --- |
| 
```
config
```
 | `JSON` | 这个描述了要提交的容器的配置 |
下表显示了`POST`请求的查询参数:
| 
参数
 | 
类型
 | 
说明
 |
| --- | --- | --- |
| 
```
container
```
 | `Container ID` | 您打算提交的容器的`ID` |
| 
```
repo
```
 | `String` | 要在其中创建映像的存储库 |
| 
```
tag
```
 | `String` | 新映像的标签 |
| 
```
m
```
 | `String` | 提交消息 |
| 
```
author
```
 | `String` | 作者信息 |
下表显示了响应的状态代码:
| 
状态代码
 | 
意义
 |
| --- | --- |
| 
```
201
```
 | 没有错误 |
| 
```
404
```
 | 没有这样的容器 |
| 
```
500
```
 | 内部服务器错误 |
### 保存映像
从以下命令获取存储库的所有映像和元数据的 tarball 备份:
```
$ curl $DOCKER_DAEMimg/shrikrishna/code.it/get > \
> code.it.backup.tar.gz
```
这将需要一些时间，因为映像必须首先被压缩成一个 tarball，然后进行流式传输，但之后它将被保存在 tar 档案中。
其他端点可以在[docs . docker . com/reference/API/docker _ remote _ API _ v 1.13/# 23-misc](http://docs.docker.com/reference/api/docker_remote_api_v1.13/#23-misc)上阅读。
## Docker 的工作方式
现在我们已经意识到我们运行的每个 Docker 命令只不过是客户端执行的一系列 RESTful 操作，让我们进一步了解当您运行一个`docker run`命令时会发生什么:
1.  要创建一个应用编程接口，需要调用`/containers/` `create`参数。
2.  如果响应的状态代码是 404，则表示映像不存在。尝试使 img/create`参数拉取映像，返回步骤 1。
3.  获取创建的容器的`ID`，并使用`/containers/(id)/start`参数启动它。
这些应用编程接口调用的查询参数将取决于传递给`docker run`命令的标志和参数。
# 使用 Docker 执行命令将进程注入容器
在您探索 Docker 的过程中，您可能想知道 Docker 实施的每个容器一个命令规则是否限制了它的功能。事实上，假设 Docker 容器只运行一个进程是可以原谅的。但是没有！一个容器可以运行任意数量的进程，但只能从一个命令开始，并且只要与该命令相关联的进程运行，该容器就会一直存在。这个限制已经被强制执行，因为 Docker 相信每个容器一个应用的理念。典型的依赖于 Docker 的应用架构将由多个容器组成，每个容器运行一个专门的服务，所有容器都链接在一起，而不是将所有内容加载到一个容器中。这有助于保持容器的轻便，使调试更容易，减少攻击媒介，并确保如果一个服务出现故障，其他服务不会受到影响。
但是，有时您可能需要在容器运行时查看它。随着时间的推移，Docker 社区已经采用了许多方法来调试正在运行的容器。一些成员将 SSH 加载到容器中，并运行一个流程管理解决方案，如 **主管**来运行 SSH +应用服务器。然后出现了诸如**和**这样的工具，它们帮助在容器运行的命名空间中生成一个外壳。然而，所有这些解决方案都是黑客攻击。因此，对于 v1.3，Docker 决定提供`docker exec`命令，这是一个可以调试正在运行的容器的安全替代方法。****
 **`docker exec`命令允许用户通过 Docker API 和 CLI 在 Docker 容器中生成一个进程，例如:
```
$ docker run -dit --name exec_example -v $(pwd):/data -p 8000:8000 dockerfile/python python -m SimpleHTTPServer
$ docker exec -it exec_example bash
```
第一个命令启动一个简单的文件服务器容器。容器通过`-d`选项发送到后台。在第二个命令中，使用`docker` `exec`，我们通过在容器内部创建一个 bash 进程来登录容器。现在，我们将能够检查容器、读取日志(如果我们已经登录到一个文件中)、运行诊断(如果由于一个错误而需要检查)等等。
### 注
Docker 仍然没有改变其每个容器一个应用的理念。`docker exec`命令的存在只是为了给我们提供一种检查容器的方法，否则就需要变通办法或黑客攻击。
# 服务发现
Docker 从可用地址池中动态地为容器分配一个 IP。虽然这在某些方面是好的，但是当您运行需要相互通信的容器时，它会产生一个问题。你只是不知道当建立一个映像时它的 IP 地址会是什么。你的第一反应可能是启动容器，然后登录它们(通过`docker` `exec`)，并手动设置其他容器的 IP 地址。但是请记住，当容器重新启动时，该 IP 地址可能会改变，因此您必须手动登录到每个容器并输入新的 IP 地址。有没有更好的方法？是的，有。
服务发现是为了让服务知道如何找到其他服务并与之通信而需要做的一切的集合。在服务发现下，容器在刚启动时并不知道它们的对等体。相反，他们动态地发现它们。当容器在同一个主机中时，以及当它们在集群中时，这都应该起作用。
有两种技术可以实现服务发现:
*   使用默认的 Docker 功能，如名称和链接
*   使用专用服务，如`Etcd`或`Consul`
## 使用 Docker 名称、链接和大使容器
我们在[第 3 章](3.html "Chapter 3. Configuring Docker Containers")*配置 Docker 容器*的*链接容器*一节中学习了如何链接 Docker。为了刷新你的记忆，这就是它的工作原理。
### 使用链接使容器彼此可见
链接的使用如下图所示:
![Using links to make containers visible to each other](img/4787OS_04_05.jpg)
链接允许一个容器连接到另一个容器，而不需要硬编码它的 IP 地址。在启动第二个容器时，通过在`/etc/hosts`中插入第一个容器的 IP 地址来实现。
使用`--link`选项启动容器时，可以指定一个链接:
```
$ docker run --link CONTAINER_IDENTIFIER:ALIAS . . .
```