# StoryDroid：为安卓应用程序自动生成故事板
##### 译文声明
本文是翻译文章，文章原作者 Sen Chen, Lingling Fan, Chunyang Chen, Ting Su, Wenhe Li, Yang
Liu, Lihua Xu，文章来源：ieeexplore.ieee.org
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
最近对Android的自动化测试工具开发感兴趣，故最近在考研期间可能会带来一些我认为有趣的关于Android自动化测试工具的论文翻译，啊，考研太累了啊 >
## 0x0 思维导图
这里是我自己整理的一个大概的思维导图，各位师傅可以先看看
## 0x1 摘要
​
移动应用程序现在无处不在。在开发一个新的应用程序之前，开发团队通常会花很大的精力来评估许多具有类似目的的现有应用程序。审查过程非常重要，因为它能够降低市场风险，并为应用开发提供灵感。然而，在开发团队中，通过不同的角色(如产品经理、UI/UX设计师、开发人员)手动探索数百个现有的应用程序可能是无效的。例如，很难在短时间内完全探索应用程序的所有功能。受电影制作中的故事板概念的启发，我们提出了一个StoryDroid系统，用于自动生成Android应用的故事板，并协助不同角色高效地审核应用。具体来说，StoryDroid提取活动转换图，并利用静态分析技术来呈现UI页面，以可视化呈现的页面中的故事板。UI页面和相应实现代码(如布局代码、活动代码、方法层次结构)之间的映射关系也提供给用户。我们的综合实验证明了StoryDroid是有效的，确实有助于应用程序开发。StoryDroid的输出支持一些潜在的应用方向，比如推荐UI设计和布局代码。
**关键词：Android app，Storyboard，Competitive analysis，App review**
## 0x2 介绍
​
现在，移动应用已经成为访问互联网以及执行日常任务（如阅读、购物、银行和聊天）的最流行方式。与传统的桌面应用不同，移动应用通常是在上市压力下开发的，并面临着激烈的竞争——超过380万个安卓应用和200万个iPhone应用正在努力争取在Google
Play和苹果应用商店这两个主要的移动应用市场上获得用户。
​
因此，对于应用开发者和公司来说，对具有类似目的的现有应用进行广泛的竞争分析至关重要。这种分析有助于了解竞争对手的优势和劣势，在开发前降低市场风险。具体来说，它确定了常见的应用功能、设计选择和潜在客户。此外，研究类似的应用程序还有助于开发人员更深入地了解实际的实现，因为交付商业应用程序可能是耗时和昂贵的。
​
通常情况下，为了完成上述分析，科技公司的自由开发者或产品经理（PM）必须从市场下载应用，安装在移动设备上，反复使用它们来获得自己感兴趣的部分。然而，这种人工探索可能是艰苦的和无效的。例如，如果一家科技公司计划开发社交媒体应用程序，谷歌Play上的245个类似应用程序将受到审查。手动分析它们是非常困难的——注册账户，在需要时输入特定信息，并记录必要的信息（例如，主要功能是什么，应用页面是如何连接的）。此外，商业应用程序可能过于复杂，无法在合理的时间内手动揭示所有功能。对于UI/UX设计师来说，同样的探索问题仍然存在，当他们想从类似的应用设计中获得灵感时。此外，应用程序中大量的用户界面（UI）屏幕也让设计师很难理解页面之间的关系和导航。对于想要从类似应用中获得灵感的开发人员来说，很难将UI屏幕与相应的实现代码链接起来——代码可以在静态布局文件中提取，也可以在一大块功能代码中提取。
​
受电影行业中的故事板概念的启发，我们打算生成一个应用程序的故事板来可视化它的关键应用行为。具体来说，我们使用活动（即UI屏幕）来描述故事板中的“场景”，因为活动代表了应用在全屏窗口中的直观印象，是用户交互最常用的组件。图1为Facebook（最受欢迎的社交媒体应用之一）的故事板图，其中包括带有UI页面的活动转换图(A
TG)、详细的布局代码（例如，静态和动态）、每个活动的功能代码(（ctivity code）和每个活动内的方法调用关系（method
Hierarchy）。基于这个故事板,
pm可以在短时间内审核大量的app，并在自己的app中提出更有竞争力的功能。UI设计师可以获得最相关的UI页面作为参考。开发人员可以直接参考相关代码，提高开发效率。
​
然而，生成故事板是有挑战性的。首先，由于静态分析工具的限制，ATG通常是不完整的。其次，为了识别所有的UI页面，纯静态方法可能会错过动态呈现的部分UI（见第三节），而纯动态方法可能无法到达应用中的所有页面，特别是那些需要登录的页面。第三，混淆的活动名称缺乏相应功能的语义，使故事板难以理解。
​ 为了克服这些挑战，我们提出了一个STORYDROID系统，它可以自动生成应用的故事板，主要分为三个阶段：(1)Activity transition
extraction，从apks中提取ATG，特别是片段和内部类中的转换关系，使ATG更加完整。(2)
UI页面呈现，首先提取每个UI页面的动态组件（如果有的话），并将其嵌入到相应的静态布局中。然后它会基于静态布局文件静态地呈现每个UI页面。(3)语义名推断，通过将布局层次结构与我们数据库中构建的4426个开源应用程序进行比较，推断混淆活动名称的语义名。通过这些分析，STORYDROID为从不同的角度探索和理解一个应用提供了一个系统的解决方案。
​
我们从以下两个方面共100个应用（50个开源应用和50个闭源应用）对STORYDROID进行评估：（1）每个阶段的有效性评估；（2）可视化输出的有用性评价。实验结果表明，STORYDROID在提取活动转换，特别是片段和内部类的活动转换方面是有效的。在开源应用和闭源应用上，STORYDROID提取的活动转换几乎是目前最先进的ATG提取工具（即IC3）的2倍。此外，STORYDROID在开源应用（平均87%）和闭源应用（平均74%）的活动覆盖率上显著优于最先进的动态测试工具（即STOAT）。平均而言，我们渲染的图像与STOAT动态获得的图像相比，相似度达到84%。STORYDROID可以推断出语义名，准确率高达92%。此外，用户研究表明，在STORYDROID的帮助下，与没有STORYDROID的探索相比，活动覆盖率有了显著的提高，用户可以更准确、高效地找到给定UI页面的布局代码。
​ 除了基本的有用性，我们还讨论了几个额外的基于STORYDROID的输出的实际应用。例如，推荐UI设计和布局代码和指导应用程序的回归测试。
​ 综上所述，我们做出了以下贡：
  * 这是第一个自动生成Android应用故事板的研究工作。它帮助包括PMs、设计师和开发人员在内的应用程序开发团队快速对其他类似应用程序有一个清晰的概述
  * 我们提出了一种新的算法来提取相对完整的ATG，静态渲染UI页面，并推断混淆后应用的活动名称。这些技术贡献对于开源和闭源的Android应用程序都是通用的
  * 我们的实验不仅证明了生成的故事板的准确性，而且还证明了我们的故事板在帮助应用程序开发方面的有用性
  * 这是构建大规模应用故事板数据库的基础工作，因为整体方法是基于静态程序分析的。这样的数据库可以扩大当前移动应用研究的视野，使许多未来的工作，如提取应用的共性，推荐UI代码，设计，并指导应用测试
## 0x3 动机场景
​
我们使用针对Android应用的STORYDROID，根据开发团队中的不同角色，详细描述了典型的应用审查过程。Eve是一家IT公司的项目经理。她的团队计划开发一款Android社交应用。为了提高所设计应用的竞争力，她从谷歌Play
Store中输入关键词(如social, chat)，搜索数百个类似应用(如Facebook, Instagram,
Twitter)。然后她将这些应用的所有URL输入到STORYDROID, STORYDROID会自动下载所有这些应用，使用谷歌Play
API。STORYDROID进一步生成所有这些应用的故事板（如图1），并将其呈现给Eve。通过观察这些故事板，她很容易了解这些应用程序的故事情节，并发现这些应用程序的共同特点，如注册、搜索、设置、用户资料、发帖等。基于这些共同功能，Eve想出了一些独特的功能，将自己的应用与现有应用区分开来。
​ Alice作为一名UI/UX设计师，需要根据Eve的要求设计UI页面。通过我们的STORYDROID,
Alice不仅可以很容易地了解到相关应用的UI设计风格，还可以很容易地了解到应用内部不同屏幕之间的交互关系。然后，Alice就可以根据别人的应用开发自己的应用的UI和用户交互。
​
Bob是一名Android开发者，他需要基于Alice的UI设计开发相应的应用。基于Alice在现有应用中引用的UI设计，他也可以在STORYDROID的帮助下引用该应用。通过点击故事板中每个活动的UI屏幕，STORYDROID返回相应的UI实现代码，无论它是用纯静态代码、动态代码还是混合代码实现的。要实现自己的UI设计，可以参考实现代码并根据他们的需求定制它。这种开发过程比从头开始要快得多。此外，Bob还可能对某个应用程序中的某些功能感兴趣。通过使用STORYDROID，他可以轻松地定位逻辑代码。
## 0x4 前言
​ 在本节中，我们简要介绍Android UI的概念，UI的布局类型和填充数据的特殊视图。
###  4.1 Android Activity和Fragment
​
Android应用中有四种类型的组件(即活动、服务、广播和接收器)。具体来说，Activity和Fragment渲染用户界面，是Android应用程序的可见部分。Activity是绘制用户可以交互的屏幕的基本组件。Fragment表示活动中UI的一部分，它将自己的UI贡献给某些活动。片段总是依赖于一个活动，不能独立存在。一个Fragment也可以在多个活动中重用，一个活动可能包含多个Fragment，基于屏幕大小，我们可以创建多面板UI，以适应不同屏幕大小的移动设备。
###  4.2 UI Layout
​
一个由Activity和Fragment呈现的用户界面需要一个UI布局文件来为用户绘制一个窗口。我们从更高的角度来看一下Android应用中的三种布局类型。图2显示了著名社交应用Twitter的登录UI页面，其中组件（如TextView）可以用三种不同的布局类型实现。
​ **静态布局**
，依赖于apk中的静态布局文件（即XML）。应用程序的UI页面由这些XML文件呈现。ViewGroup和View是UI布局文件中用户界面的基本元素。ViewGroup是一个包含其他ViewGroup和view的容器。GUI代码必须包含带有ViewGroup的根节点（例如，RelativeLayout和LinearLayout）。定义ViewGroup后，开发人员可以添加额外的视图（例如，EditText,
TextView）作为子元素，逐步构建定义页面布局的层次结构。GUI组件包含多个属性（例如，id，文本，宽度），如图2所示（第2-5行）。
​ **动态布局** ，它允许开发者在运行时使用Android
API实例化布局组件（例如，`addView()`）。开发人员可以在Java代码中创建组件并操作它们的属性，例如TextView。Java代码中的`TextView.setText(“Password”)`等效于布局文件中的`android:text=“Password”`，如图2（行7-11）所示。
​ **混合布局**
，它在静态布局文件中定义了一些默认组件。这些布局可以通过调用`LayoutInflater.inflate`来动态重用。如图2所示充气(第14-15行)。开发人员还可以操作已定义组件的属性。例如，他们可以在Java代码中修改`TextView`的内容。
​ 为了调查Android应用中使用的动态和混合布局的比例，我们从下载量最高的1万款谷歌Play应用中随机选择了1000款应用。我们使用特定的Android
api（例如，`addView()`和`inflate()`）来区分应用程序是否包含动态/混合布局类型来绘制UI页面。我们的研究结果显示，62.3%的应用程序使用动态/混合布局。如此频繁使用动态/混合布局的原因是，在它们的帮助下，视图从XML文件中的视图模型中分离出来，开发人员可以改变布局，而无需重新编译以适应应用程序的运行时状态。
###  4.3 Data Population
​ 适配器是AdapterView和视图的底层数据之间的桥梁。它还提供布局（例如ListView, GridView,
ViewPager）和数据，这些数据通常是从本地数据库或远程服务器加载的。适配器允许这些UI组件（例如ListView）提供可滚动项的列表以供选择。图3显示了适配器的示例。它实例化带有布局（ListView）的适配器，并将其与数据关联起来。然后通过适配器将数据显示在ListView中。AdapterView是用户界面布局的一部分，应该从源代码中提取，以便进行静态呈现。
## 0x5 我们的方法
​ STORYDROID将一个apk作为输入，并输出该应用程序的可视化故事板（S）。图5显示了STORYDROID的三个主要阶段。(1)
过渡提取，它增强了ATG的提取能力。它增强了IC3的ATG提取能力，特别是对片段和内部类的提取。STORYDROID利用控制和数据流分析来获得相对完整的ATG。(2)
UI页面渲染，它将动态和混合布局转换为静态布局（如果需要），以渲染用户交互的UI页面。(3)
语义名称推断，它推断出混淆的语义名称，它通过布局比较为被混淆的活动名称推断出语义名称。