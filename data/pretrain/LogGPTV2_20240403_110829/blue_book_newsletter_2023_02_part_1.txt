# Life Management
## Task Management
### [Org Mode](orgmode.md)
* New: Introduce Nvim Org Mode.
    [`nvim-orgmode`](https://github.com/nvim-orgmode/orgmode#agenda) is a Orgmode clone written in Lua for Neovim. Org-mode is a flexible note-taking system that was originally created for Emacs. It has gained wide-spread acclaim and was eventually ported to Neovim.
    The article includes:
    * [Installation](orgmode.md#installation)
      * [Key bindings](orgmode.md#key-bindings)
    * [Usage](orgmode.md#usage)
      * [Org File](orgmode.md#org-file)
      * [Headings](orgmode.md#headings)
        * [Toogle line to headline](orgmode.md#toogle-line-to-headline)
        * [Change heading level](orgmode.md#change-heading-level)
        * [Moving headings](orgmode.md#moving-headings)
        * [Folding headings](orgmode.md#folding-headings)
        * [Navigate through headings](orgmode.md#navigate-through-headings)
      * [TODO items](orgmode.md#todo-items)
        * [TODO state customization](orgmode.md#todo-state-customization)
      * [Priority](orgmode.md#priority)
      * [Dates](orgmode.md#dates)
        * [Appointments](orgmode.md#appointments)
        * [Recurring tasks](orgmode.md#recurring-tasks)
        * [Scheduled](orgmode.md#scheduled)
        * [Deadline](orgmode.md#deadline)
        * [Date management](orgmode.md#date-management)
      * [Tags](orgmode.md#tags)
      * [Lists](orgmode.md#lists)
      * [Checkboxes](orgmode.md#checkboxes)
      * [Links](orgmode.md#links)
      * [Archiving](orgmode.md#archiving)
      * [Refiling](orgmode.md#refiling)
      * [Agenda](orgmode.md#agend)
        * [Move around the agenda](orgmode.md#moving-around-the-agenda)
        * [Act on the agenda elements](orgmode.md#act-on-the-agenda-elements)
        * [Agenda views](orgmode.md#agenda-views)
## [Computer configuration management](configuration_management.md)
* New: Introduce configuration management.
    Configuring your devices is boring, disgusting and complex. Specially when your
    device dies and you need to reinstall. You usually don't have the time or energy
    to deal with it, you just want it to work.
    To have a system that allows you to recover from a disaster it's expensive in
    both time and knowledge, and many people have different solutions.
    This article shows the latest step of how I'm doing it.
# Coding
## Languages
### [Python](python.md)
* New: [Move a file.](python.md#move-a-file)
    Use one of the following
    ```python
    import os
    import shutil
    os.rename("path/to/current/file.foo", "path/to/new/destination/for/file.foo")
    os.replace("path/to/current/file.foo", "path/to/new/destination/for/file.foo")
    shutil.move("path/to/current/file.foo", "path/to/new/destination/for/file.foo")
    ```
### [PDM](pdm.md)
* New: [Custom file generation.](pdm.md#custom-file-generation)
    During the build, you may want to generate other files or download resources from the internet. You can achieve this by the setup-script build configuration:
    ```toml`
    [tool.pdm.build]
    setup-script = "build.py"
    ```
    In the `build.py` script, pdm-pep517 looks for a build function and calls it with two arguments:
    * `src`: the path to the source directory
    * `dst`: the path to the distribution directory
    Example:
    ```python
    def build(src, dst):
        target_file = os.path.join(dst, "mypackage/myfile.txt")
        os.makedirs(os.path.dirname(target_file), exist_ok=True)
        download_file_to(dst)
    ```
    The generated file will be copied to the resulted wheel with the same hierarchy, you need to create the parent directories if necessary.
### [Libraries](python_gnupg.md)
* New: How to encrypt a file.
    ```python
    gpg.encrypt_file('path/to/file', recipients)
    ```
    Where `recipients` is a `List[str]` of gpg Key IDs.
* New: [List the recipients that can decrypt a file.](python_gnupg.md#list-the-recipients-that-can-decrypt-a-file)
    ```python
    def list_recipients(self, path: Path) -> List['GPGKey']:
        """List the keys that can decrypt a file.
        Args:
           path: Path to the file to check.
        """
        keys = []
        for short_key in self.gpg.get_recipients_file(str(path)):
            keys.append(self.gpg.list_keys(keys=[short_key])[0]['fingerprint'])
        return keys
    ```
    feat(requests#Use a proxy): Use a proxy
    ```python
    http_proxy  = "http://10.10.1.10:3128"
    https_proxy = "https://10.10.1.11:1080"
    ftp_proxy   = "ftp://10.10.1.10:3128"
    proxies = {
      "http"  : http_proxy,
      "https" : https_proxy,
      "ftp"   : ftp_proxy
    }
    r = requests.get(url, headers=headers, proxies=proxies)
    ```
### [Configure Docker to host the application](docker.md)
* New: [Troubleshoot Docker python not showning prints.](python_docker.md#docker-python-not-showning-prints)
    Use `CMD ["python","-u","main.py"]` instead of `CMD ["python","main.py"]`.
* New: [Get the difference of two lists.](python_docker.md#prevent-pip-install--r-requirements.txt-to-run-on-each-docker-build:-prevent-`pip-install--r-requirements.txt`-to-run-on-each-`docker-build`
i'm-assuming-that-at-some-point-in-your-build-process,-you're-copying-your-entire-application-into-the-docker-image-with-copy-or-add:
```dockerfile
copy-.-/opt/app
workdir-/opt/app
run-pip-install--r-requirements.txt
```
the-problem-is-that-you're-invalidating-the-docker-build-cache-every-time-you're-copying-the-entire-application-into-the-image.-this-will-also-invalidate-the-cache-for-all-subsequent-build-steps.
to-prevent-this,-i'd-suggest-copying-only-the-requirements.txt-file-in-a-separate-build-step-before-adding-the-entire-application-into-the-image:
```dockerfile
copy-requirements.txt-/opt/app/requirements.txt
workdir-/opt/app
run-pip-install--r-requirements.txt
copy-.-/opt/app
```
feat(python_snippets)
    If we want to substract the elements of one list from the other you can use:
    ```python
    for x in b:
      if x in a:
        a.remove(x)
    ```
* New: [Override entrypoint.](docker.md#override-entrypoint)
    ```bash
    sudo docker run -it --entrypoint /bin/bash [docker_image]
    ```
### [Click](click.md)
* New: Split stdout from stderr in tests.
    By default the `runner` is configured to mix `stdout` and `stderr`, if you wish to tell apart both sources use:
    ```python
    def test(runner: CliRunner):
      ...
      runner.mix_stderr = False
    ```
### [Promql](promql.md)
* New: [Add basic operations.](promql.md#usage)
    Selecting series:
    * Select latest sample for series with a given metric name:
      ```promql
      node_cpu_seconds_total
      ```
    * Select 5-minute range of samples for series with a given metric name:
      ```promql
      node_cpu_seconds_total[5m]
      ```
    * Only series with given label values:
      ```promql
      node_cpu_seconds_total{cpu="0",mode="idle"}
      ```
    * Complex label matchers (`=`: equality, `!=`: non-equality, `=~`: regex match, `!~`: negative regex match):
      ```promql
      node_cpu_seconds_total{cpu!="0",mode=~"user|system"}
      ```
    * Select data from one day ago and shift it to the current time:
      ```promql
      process_resident_memory_bytes offset 1d
      ```
    Rates of increase for counters:
    * Per-second rate of increase, averaged over last 5 minutes:
      ```promql
      rate(demo_api_request_duration_seconds_count[5m])
      ```
    * Per-second rate of increase, calculated over last two samples in a 1-minute time window:
      ```promql
      irate(demo_api_request_duration_seconds_count[1m])
      ```
    * Absolute increase over last hour:
      ```promql
      increase(demo_api_request_duration_seconds_count[1h])
      ```
    Aggregating over multiple series:
    * Sum over all series:
      ```promql
      sum(node_filesystem_size_bytes)
      ```
    * Preserve the instance and job label dimensions:
      ```promql
      sum by(job, instance) (node_filesystem_size_bytes)
      ```
    * Aggregate away the instance and job label dimensions:
      ```promql
      sum without(instance, job) (node_filesystem_size_bytes)
      ```
      Available aggregation operators: `sum()`, `min()`, `max()`, `avg()`, `stddev()`, `stdvar()`, `count()`, `count_values()`, `group()`, `bottomk()`, `topk()`, `quantile()`.
    Time:
    * Get the Unix time in seconds at each resolution step:
      ```promql
      time()
      ```
    * Get the age of the last successful batch job run:
      ```promql
      time() - demo_batch_last_success_timestamp_seconds
      ```
    * Find batch jobs which haven't succeeded in an hour:
      ```promql
      time() - demo_batch_last_success_timestamp_seconds > 3600
      ```
### [rich](rich.md)
* New: [Tree console view.](rich.md#tree)
    Rich has a [`Tree`](https://rich.readthedocs.io/en/latest/reference/tree.html#rich.tree.Tree) class which can generate a tree view in the terminal. A tree view is a great way of presenting the contents of a filesystem or any other hierarchical data. Each branch of the tree can have a label which may be text or any other Rich renderable.
    The following code creates and prints a tree with a simple text label:
    ```python
    from rich.tree import Tree
    from rich import print
    tree = Tree("Rich Tree")
    print(tree)
    ```
    With only a single `Tree` instance this will output nothing more than the text “Rich Tree”. Things get more interesting when we call `add()` to add more branches to the `Tree`. The following code adds two more branches:
    ```python
    tree.add("foo")
    tree.add("bar")
    print(tree)
    ```
    The `tree` will now have two branches connected to the original tree with guide lines.
    When you call `add()` a new `Tree` instance is returned. You can use this instance to add more branches to, and build up a more complex tree. Let’s add a few more levels to the tree:
    ```python
    baz_tree = tree.add("baz")
    baz_tree.add("[red]Red").add("[green]Green").add("[blue]Blue")
    print(tree)
    ```
### [Selenium](selenium.md)
* New: [Solve element isn't clickable in headless mode.](selenium.md#solve-element-isn't-clickable-in-headless-mode)
    There are many things you can try to fix this issue. Being the first to configure the `driver` to use the full screen. Assuming you're using the [undetectedchromedriver](#use-undetected-chromedriver):
    ```python
    import undetected_chromedriver.v2 as uc
    options = uc.ChromeOptions()
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--no-sandbox")
    options.add_argument("--headless")
    options.add_argument("--start-maximized")
    options.add_argument("--window-size=1920,1080")
    driver = uc.Chrome(options=options)
    ```
    If that doesn't solve the issue use the next function:
    ```python
    def click(driver: uc.Chrome, xpath: str, mode: Optional[str] = None) -> None:
        """Click the element marked by the XPATH.
        Args:
            driver: Object to interact with selenium.
            xpath: Identifier of the element to click.
            mode: Type of click. It needs to be one of [None, position, wait]