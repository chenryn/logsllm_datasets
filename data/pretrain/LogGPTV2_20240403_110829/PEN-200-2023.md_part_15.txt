y
k
s
o
n
Figure 8: Obsidian Welcome Screen
i
Obsidian stores information in a Vault, which is a folder on our system. We can create both
z
markdown files and folders within the Vault. Obsidian’s features include a live preview of
markdown text, in-line image placement, code blocks, and a multitude of add-ons such as a
D
community-built CSS extension.
An example of directly entering notes in markdown is shown below:
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 96
Made in Morocco
Penetration Testing with Kali Linux
Figure 9: Taking Notes in Obsidian
Then, it’s can be previewed live by Obsidian.
y
k
s
Figure 10: Live Prevoiew of Markdown
An Obsidian vault can be relocated to another computer and opened from the Welcome menu.
Markdown files can simply be dropped ninto the Vault folders, which will automatically be
recognized by Obsidian.
i
The use of markdown means that we can provide syntax and formatting that is easily copied to
z
most report generation tools, and a PDF can be generated straight from Obsidian itself.
Tool selection is a personal and situational preference. Some tools are better in certain scenarios
D
than others, but there isn’t a perfect tool. It is recommended to take time and try out the tools
we’ve covered, read the documentation, get familiar with them, and then decide which tool works
for you. Some additional tools can be found referenced on nil0x42’s204 website.
5.1.5 Taking Screenshots
Screenshots are an important part of note-taking and technical reporting. A good screenshot can
explain the issue being discussed at a glance and in more detail than a textual description.
Screenshots are particularly useful to help present a technically complex or detail-heavy section
of a report. As the saying goes, a picture is worth 1000 words. Conversely, a bad screenshot can
obfuscate and draw attention away from what the issue is.
Screenshots are an important way to communicate the visual impact of a finding, and can be far
more effective than mere text. For example, it’s more effective to show a screenshot of an alert
box popping up from an XSS payload than to describe it in words. However, it’s more difficult to
use a screenshot to describe exactly what’s happening when we use something like a buffer
overflow payload. Just like we want to use the right tool to perform certain attacks, so we also
want to use the right tool to show certain results (such as text vs images).
204 (nil0x42, 2022), https://github.com/nil0x42/awesome-hacker-note-taking
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 97
Made in Morocco
Penetration Testing with Kali Linux
We can use screenshots to supplement our note-taking or to include them in our report to
illustrate the steps we took, which will help another tester reproduce the issues. However, we
need to be conscious of the audience. While a penetration tester may consider an alert window to
demonstrate XSS as perfectly self-explanatory, developers unfamiliar with the vulnerability may
not understand its true cause or impact. It’s good practice to always support a screenshot with
text.
Screenshots have a specific goal, which is to convey information that would take several
sentences to describe or to make an impact. With this in mind, the screenshot should contain
exactly enough information to justify not using text, but there shouldn’t be too much information
to make the screenshot confusing.
To return to the example given above in the notes section, we have found reflected XSS in the
username field of the application login. We will properly explain the effects of XSS in the actual
report. However, the impact of XSS is far easier to show rather tyhan explain without a visual
reference as a base. We must include evidence of arbitrary JavaScript execution, as well as visual
components of the site (i.e. the URL in the browser window). If necessary, secondary or lead-up
k
steps can be captured as well.
A well-constructed screenshot is easy to parse visualsly. Readers should be able to intuitively
understand the picture and its caption without any questions. If there is a greater need for
surrounding context, that can be added in a paragoraph above or below the image, but the image
itself should be understood.
Once again, using the example of XSS in ounr login form, we will include the following components
in the screenshot, resizing the window if necessary. Ideally, we would include the URL as well as
some company-specific branding and logos on the form. This lets them know the exact webpage
i
and ties the vulnerability to their corporate image.
z
The actual pop-up executed in the proof-of-concept is necessary as well, substituted for any more
advanced payload as the pDroof of concept is slowly taken further. Finally, we want to ensure that
it is all legible. A screenshot that needs to be zoomed in to be properly viewed disrupts the
reader’s flow. A good screenshot is immediately legible, as shown below.
Figure 11: Good Screenshot
There are several pitfalls we should avoid when using screenshots. We have already discussed
making sure the screenshots are legible. We must also ensure there isn’t more than one concept
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 98
Made in Morocco
Penetration Testing with Kali Linux
illustrated in each screenshot. A screenshot that contains two pieces of pertinent information
does not lend itself to being easily understood at a glance. We must also ensure the impact is
framed properly in the screenshot. Having the target of the screenshot off-center at the side
obfuscates the intent as well. Finally, the caption for the screenshot shouldn’t be overly long.
y
k
s
Figure 12: Bad Screenshot
o
The screenshot above covers the important information with an irrelevant piece of information,
which prevents the full impact of the screenshot from being understood by the reader.
n
To recap, a good screenshot has the following characteristics:
• is legible i
z
• contains some visual indication that it applies to the client
• contains the material that is being described
D
• supports the description of the material
• properly frames the material being described
On the other hand, a bad screenshot is one that:
• is illegible
• is generic rather than client-specific
• contains obfuscated or irrelevant information
• is improperly framed
Under the screenshot, we include a caption. A caption is not meant to provide additional context
for the picture. A caption is there to describe the picture in a few words. Any additional context
that is necessary can be provided in a separate paragraph. In most cases, eight to ten words is an
appropriate maximum for a caption.
5.1.6 Tools to Take Screenshots
We can take screenshots using native operating system capabilities. Windows, Linux, and macOS
all provide tools to take screenshots. We can also use special-purpose tools.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 99
Made in Morocco
Penetration Testing with Kali Linux
For Windows, the PrintScreen key allows us to take a copy of the full screen, and Alt/PrtSc takes a
screenshot of the currently active window. This can then be pasted into a Paint, Word, or
PowerPoint document and manipulated as required. We’ll often want to crop the image to remove
any unwanted material, and we can do that in these applications.
We can also invoke the Windows Snipping Tool205 by pressing the Windows key together with
Shift/S.
y
k
s
o
n
i
zFigure 13: Snipping Tool
The Snipping tool allows us to highlight and take a screenshot of any area of the screen we
D
choose.
MacOS provides the capability to take a screenshot using the keyboard Shift/Command
F B 3
combination with the numeric keys 3, 4, or 5 key. To select and save the entire screen, we can use
F B 4 F B 5
+ + . To highlight and select a specific area on the screen, we can simply use
+ + or + + .
B
We can take a screenshot in Linux using the PrintScreen key. This will capture and save the entire
screen to the user’s Images/ directory. +PrintScreen will allow for area highlighting and
selection. In Kali Linux, we can also use the Screenshot tool which is installed by default and
comes with many options such as choosing the active window, selecting a region, adding a delay
before taking the actual screenshot, etc.
Flameshot206 is an OS-agnostic, open-source, feature-rich screen-capturing tool. It comes with
both a command-line and GUI interface and has integrated drawing tools to add highlights,
pixelation, text, and other modifications to the captured image.
205 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Snipping_Tool
206 (Flameshot, Github, 2022), https://github.com/flameshot-org/flameshot
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 100
Made in Morocco
Penetration Testing with Kali Linux
5.2 Writing Effective Technical Penetration Testing Reports
In this Learning Unit we’ll cover the following Learning Objectives:
• Identify the purpose of a technical report
• Understand how to specifically tailor content
• Construct an Executive Summary
• Account for specific test environment considerations
• Create a technical summary
• Describe technical findings and recommendations
• Recognize when to use appendices, resources, and references
y
5.2.1 Purpose of a Technical Report
k
As vendors of a penetration testing service, we want to provide our clients with as much value as
possible. Reports are the mechanism by which value is delivered and the main artifact that
s
enables the client to take forward action. Our ability to find twenty vulnerabilities in a web
application won’t make a business impact if we can’t provide a presentation of both the
vulnerabilities and our recommendations on pootential remediation. Without a clear direction
forward, the client is not getting full value for their time and money.
n
To properly prepare a report for the client, we must understand two things:
1. The purpose of the report.
i
2. How we can deliver the inforzmation we’ve collected in a way that the audience can
understand.
D
When a client pays for a penetration testing engagement, it is often (mis)understood that they are
“just” paying for an ethical hacker to legally attack their infrastructure to find and exploit
weaknesses. While that may be technically necessary to deliver the required results, it is not the
fundamental purpose of the engagement. There are even some cases in which clients would
prefer not to have their infrastructure attacked at all!
So, what is the point of a company engaging a penetration tester? The end goal is for the client to
be presented with a path forward that outlines and highlights all the flaws that are currently
present in their systems within the scope of the engagement, ways to fix those flaws in an
immediate sense, and strategic goals that will prevent those vulnerabilities from appearing in the
future. This output is often provided in the form of a penetration testing report. As far as the client
is concerned, the report is (usually) the only deliverable of the engagement that truly matters.
We might wonder how we ought to report on the parts of our engagement where we haven’t
found any vulnerabilities. In many cases where we don’t find vulnerabilities, we should avoid
including too many technical details on what we did in the report. A simple statement that no
vulnerabilities have been found is often sufficient. We should ensure that we don’t confuse the
client with the technical details of our attempts, as this will undermine the value of the issues we
did actually find It’s the tester’s job to present that information in a way that is easy to understand
and act upon. That said, some clients may prefer verbose and deep technical reports even on
non-issues, which leads to another consideration: the audience.
Copyright © 2023 OffSec Services Limited. All rights reserved. 101
Made in Morocco
Penetration Testing with Kali Linux
The client receiving the report is an expert in their own specific industry. They will often (though
not always) be aware of the security concerns of that industry and will expect us to have done our
homework to also be aware of them. In practice, this means having a deep understanding of what
would cause concern to the client in the event of an attack. In other words, understanding their
key business goals and objectives. This is another reason why being clear on the Rules of
Engagement is so important, because it gives us a window into the client’s core concerns.
All issues discovered in the course of testing should be documented but we will want to highlight
any issues we find that would affect these key areas. Examples of client-specific key areas of
concern could include HIPAA,207 which is a framework that governs medical data in the US, and
PCI,208 which is a framework that governs credit card and payment processing.
Let’s consider the following scenario. Assume that Client A is a hospital and Client B is a bank,
and we are contracted to perform a test on each of their internal infrastructure. We may come up
with similar results for both, and while they may have the same teychnical severity, we may not
necessarily document the findings with the same levels of risk and priority for remediation.
k
Because Client A is a hospital with medical devices connected to their network, doctors and
patients who need action to be taken quickly in response to monitoring alerts are very likely to be
worried about network up-time and machine readinesss. Medical devices connected to the
network are often running on old machines with obsolete versions of embedded software. The
need for continuous operations may have resuolted in these devices missing upgrades and
patches. While reporting, the vulnerabilities we find should be highlighted, and then we might
make a suggestion to isolate the machines on their own logical subnet given that upgrades or
n
patching cannot be applied promptly.
On the other hand, this exact same scenario on Client B’s network could be catastrophic. If a
i
server or device in a bank is missing a patch, that could very well be a foothold into the network.
z
Because systems will need to communicate with other systems on the network, complete
segmentation may not be feasible. Therefore, a missing patch is of far greater concern and may
need to be reported as a criDtical issue.
As we begin to record our findings, we’ll need to keep in mind the situation under which the
vulnerability may be exploited and its potential impact. A clear text HTTP login on the internet is
considered extremely unsafe. On an internal network, while still unsafe, it is less concerning given
that more steps must be accomplished to properly exploit it. In much the same way, a hospital
may not care that their Internet-facing login portal accepts TLS 1.0 ciphers. An eCommerce site is
likely to be much more concerned, given the PCI violation that accepting TLS 1.0 creates.
As report writers, we must present useful, accurate, and actionable information to the client
without inserting our own biases.
5.2.2 Tailor the Content
We must deliver skill-appropriate content for all the readers of our report. It may be read by
executives, the heads of security, and by technical members of the security team. This means we
want to not only provide a simple overview of the issues for the executives, but we will also want
to provide sufficient technical detail for the more technical readers.
207 (HIPAA Guidelines, 2022) https://www.hhs.gov/hipaa/for-professionals/security/laws-regulations/index.html
208 (PCI Guidelines, 2022), https://www.pcisecuritystandards.org/
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 102
Made in Morocco
Penetration Testing with Kali Linux
We can do this by splitting up content into an appropriate structure of sections and subsections.
The number of audiences we have for a particular engagement depends heavily on our
relationship with the client, their size, budget, and maturity. For the sake of this Module, we’ll
consider an engagement for which we have only two target audiences. The first, and arguably the
more important, is the management level. This is often the level at which many external
engagement contracts are signed and where the value of investing in the testing needs to be
highlighted. Depending on the business, this may be C-level functions (CISO, CSO, CFO, etc), or
department heads of IT or security.
However, most executives and upper-level directors will not necessarily have the technical ability
to follow a detailed technical explanation. We should provide them with a section that highlights
the outcome and impact of the engagement in a way that accurately reports on the vulnerabilities
found while not being overloaded with technical details.
The second audience we will consider is made up of the technical ystaff who have the technical
knowledge to understand the report and implement the remediations outlined for the
vulnerabilities that have been identified. This audience must be provided with enough technical
k
detail to enable them to understand what is wrong, what the impact of each finding is, and how
they can be fixed. In addition, this audience greatly benefits when we can provide advice on how
s
to prevent similar types of issues from occurring in the future.
5.2.3 Executive Summary o
The first section of the report should be an Executive Summary. This enables senior management
n
to understand the scope and outcomes of the testing at a sufficient level to understand the value
of the test, and to approve remediation. We start with the quick bite-sized pieces of information
that provide the big picture, and follow that up with the full Executive Summary.
i
z
The Executive Summary should start with outlining the scope of the engagement. Having a clear
scope agreed upon in advance of the testing defines the bounds of what will be covered. We then
want to be very clear as to Dwhat exactly was tested and whether anything was dropped from the
scope. Timing issues, such as insufficient testing time due to finding too many vulnerabilities to
adequately report on, should be included to ensure that the scope statement for any subsequent
test is appropriate. Including the scope statement in the report protects the penetration tester
from any suggestion of not having completed the required testing. It also gives the client a more
accurate model of what is practical given the budget and time constraints that were initially set.
Second, we want to include the time frame of the test. This includes the length of time spent on
testing, the dates, and potentially the testing hours as well.
Third, we should refer to the Rules of Engagement and reference the referee report if a referee
was part of the testing team. If denial of service testing was allowed, or social engineering was
encouraged, that should be noted here. If we followed a specific testing methodology, we should
also indicate that here.
Finally, we can include supporting infrastructure and accounts. Using the example of a web