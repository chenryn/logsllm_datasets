title:Remote Side-Channel Attacks on Anonymous Transactions
author:Florian Tramèr and
Dan Boneh and
Kenny Paterson
Remote Side-Channel Attacks on 
Anonymous Transactions
Florian Tramer and Dan Boneh, Stanford University; 
Kenny Paterson, ETH Zurich
https://www.usenix.org/conference/usenixsecurity20/presentation/tramer
This paper is included in the Proceedings of the 29th USENIX Security Symposium.August 12–14, 2020978-1-939133-17-5Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX.Remote Side-Channel Attacks on Anonymous Transactions
Florian Tramèr∗
Stanford University
Dan Boneh
Stanford University
Kenneth G. Paterson
ETH Zürich
Abstract
Privacy-focused crypto-currencies, such as Zcash or Monero,
aim to provide strong cryptographic guarantees for transaction
conﬁdentiality and unlinkability. In this paper, we describe
side-channel attacks that let remote adversaries bypass these
protections.
We present a general class of timing side-channel and
trafﬁc-analysis attacks on receiver privacy. These attacks en-
able an active remote adversary to identify the (secret) payee
of any transaction in Zcash or Monero. The attacks violate
the privacy goals of these crypto-currencies by exploiting
side-channel information leaked by the implementation of
different system components. Speciﬁcally, we show that a
remote party can link all transactions that send funds to a
user, by measuring the response time of that user’s P2P node
to certain requests. The timing differences are large enough
that the attacks can be mounted remotely over a WAN. We
responsibly disclosed the issues to the affected projects, and
they have patched the vulnerabilities.
We further study the impact of timing side-channels on
the zero-knowledge proof systems used in these crypto-
currencies. We observe that in Zcash’s implementation, the
time to generate a zero-knowledge proof depends on secret
transaction data, and in particular on the amount of transacted
funds. Hence, an adversary capable of measuring proof gen-
eration time could break transaction conﬁdentiality, despite
the proof system’s zero-knowledge property.
Our attacks highlight the dangers of side-channel leakage in
anonymous crypto-currencies, and the need to systematically
protect them against such attacks.
1 Introduction
Bitcoin, the largest crypto-currency, is not private: several aca-
demic studies [2,24,34,42,44] and multiple commercial prod-
ucts [11, 12, 23] show that one can effectively de-anonymize
∗Part of this work was performed while the ﬁrst author was visiting ETH
Zürich.
Bitcoin’s transaction graph. The same holds for many other
crypto-currencies.
For those who want transaction privacy on a public
blockchain, systems like Zcash [45], Monero [47], and several
others offer differing degrees of unlinkability against a party
who records all the transactions in the network. We focus
in this paper on Zcash and Monero, since they are the two
largest anonymous crypto-currencies by market capitaliza-
tion. However our approach is more generally applicable, and
we expect other anonymous crypto-currencies to suffer from
similar vulnerabilities.
Zcash and Monero use fairly advanced cryptographic
primitives such as succinct zero-knowledge arguments (zk-
SNARKs) [5] and ring signatures [43]. Despite these strong
cryptographic protections, some protocol-level attacks on
transaction privacy have been found [4, 28, 37] and corrected
(we discuss these attacks in the related work in Section 7).
In this paper we take a different approach to analyzing the
privacy guarantees for anonymous transactions. Rather than
attacking the abstract protocols, we look at side-channel in-
formation that is leaked by the implementation of different
components in the system. Speciﬁcally, we look at timing side-
channels and trafﬁc patterns, as measured by a remote network
attacker. We show that, while the abstract zero-knowledge
protocols used in these systems can hide information from
an observer, these protocols are vulnerable to side-channel
leakage. Any information leakage can invalidate the zero-
knowledge property, and weaken or break the privacy guaran-
tees of anonymous transactions.
1.1 Our results
We describe multiple attacks on transaction privacy in Zcash
and Monero that exploit communication patterns or timing
information leaked by different parts of the system. We take
a systematic approach, looking at the life cycle of an anony-
mous transaction as it traverses the system. At every step, we
look for side-channels and asses their impact on user privacy.
The life-cycle of an anonymous transaction is shown in
USENIX Association
29th USENIX Security Symposium    2739
Figure 1: Side-channels in the anonymous transaction life cycle. (1) A user’s wallet creates a transaction, which involves
generating a cryptographic proof. This computation might be performed locally or outsourced to a remote service. (2) The wallet
sends the new transaction to a P2P node which propagates it into the network. (3) A P2P node shares a received transaction with a
connected wallet; the connection may be local or remote. During transaction creation, Adversary 1a can time an outsourced proof
generation to leak some transaction secrets (Section 3.3). When processing a new transaction, a wallet’s behavior may change
when it is the transaction’s payee. If the wallet connects to a remote node, this can be inferred by Adversary 1b that observes
trafﬁc patterns between the wallet and node, or by Adversary 3 that controls the node. If the wallet and node are co-located,
changes in the wallet behavior can be inferred by Adversary 2 that interacts with the user’s P2P node (Section 3.2).
Figure 1. First, the transaction is created in the payer’s wal-
let, possibly with the help of a remote server to generate the
necessary zero-knowledge proof to prove transaction validity.
Then the transaction is transmitted through the P2P network.
Finally, the transaction is received by the payee wallet, pos-
sibly with the help of a remote P2P node that records all
transactions in the P2P network. The payee’s wallet must
scan through all anonymous transactions in the network to
ﬁnd those transactions of which it is the recipient.
An attacker can observe side-channel information at each
of these steps and attempt to learn information about the
transaction, such as: the identity of the intended payee (e.g.,
their public key, or the IP address of their P2P node), the
amount of funds transferred in the transaction, or the source
of the funds. We next summarize our results.
Zcash.
In Zcash, a user’s wallet and P2P node are run in a
single process. The wallet checks if it is the payee of every in-
coming transaction by attempting to decrypt it using its secret
key. This results in two sources of side-channel leakage: (1)
if decryption succeeds and the decrypted transaction (called a
Note plaintext) is well-formed, the wallet performs an extra
Pedersen commitment check; (2) if decryption succeeds, but
the decrypted transaction is malformed, the wallet throws an
exception that is propagated to the node’s P2P layer.
In the ﬁrst case, the time taken to perform the extra Ped-
ersen commitment check causes a delay in the P2P node’s
response to subsequent network messages. Consequently, we
show an attack, termed PING, which sends a transaction to a
node followed immediately by a “ping” message (a standard
keep-alive message in Zcash’s P2P network). The attacker
can use the delay in the ping response to infer whether the
node was the transaction’s payee or not. This constitutes a
break of transaction unlinkability.
In the second case, we propose the REJECT attack wherein
an attacker carefully crafts a malformed transaction, encrypts
it under a known (but anonymous) public key, and sends it to
a target P2P node. If decryption succeeds, then the exception
is triggered, and the target node sends an explicit “reject”
message back to the attacker. Receipt of this message then
tells the attacker that the selected public key belongs to the
owner of the target P2P node — a breach of anonymity.
Details of the PING and REJECT attacks are in Section 4.
Monero. For Monero, where wallets and nodes are run in
separate processes, we show that receipt of a payment alters
the communication pattern between a wallet and its node. If
the wallet is connected to a remote node (as is common for
mobile wallets or when ﬁrst syncing with the network), we
show in Section 5 that a passive network adversary can infer
if the wallet is the payee of a recent transaction. Furthermore,
even if the user’s wallet and node are co-located, we show
that a remote adversary can infer the wallet-to-node commu-
nication pattern by causing and observing lock contention
over the node’s resources. We validate this timing attack in a
WAN, where an attacker (located in London) infers if a victim
(running a node and wallet in Zürich) receives a payment.
For both Zcash and Monero, our attacks enable a remote
adversary to link anonymous transactions by identifying the
P2P node of each transaction payee. As described in Sec-
tion 3.2, the attacks can be further exploited to: (1) identify
the IP address of a user’s P2P node, given her public key; (2)
break the unlinkability of diversiﬁed addresses belonging to
2740    29th USENIX Security Symposium
USENIX Association
Wallet with remote nodeWallet with remote proverWallet with local proverWallet with local nodeππ①User creates Tx②Tx is sent into P2P network③Wallets process new TxswalletP2P nodeAdversary 2Adversary 1aAdversary 1bAdversary 3the same user. For Zcash, the attacks further enable to: (3) re-
motely crash a Zcash node, given the user’s public key, and (4)
create a remote timing side-channel on an (non constant-time)
ECDH key-exchange involving the user’s long-term secret
viewing key, which potentially results in leakage of that key.
These attacks can put privacy-conscious crypto-currency
users (e.g., whistle-blowers or activists) at risk. For example,
an adversary that links a user’s anonymous public key to her
P2P node could uncover the user’s physical identity or loca-
tion. An adversary that breaks unlinkability — and monitors
transactions as they enter the P2P network — can infer which
P2P nodes belong to users that are transacting with each other.
The vulnerabilities we uncover and exploit run deeper than
the cryptographic timing side-channels exploited in prior
work (e.g., Kocher’s attack [29] and subsequent remote timing
attacks on TLS [8, 9]). Indeed, even if all the cryptographic
primitives in Zcash or Monero were constant-time, the attacks
described above would still apply (except for the timing at-
tack on the ECDH key exchange). This is because our main
attacks exploit a lack of constant-timeness at the protocol
level, whereas prior literature mainly studies cryptographic
constant-time guarantees at a lower-level algorithmic level.
Side-channels in zkSNARK generation.
In Section 6 we
look at timing side-channels at transaction creation time,
where the payer generates a zkSNARK to prove that the trans-
action is valid. We observe that in Zcash, the time to generate
a zkSNARK is not constant, but depends on secret information
such as the Hamming weight of the transaction amount. Our
experiments show that the current implementation is therefore
not zero-knowledge in practice: the information gleaned from
timing leakage invalidates the zero-knowledge property. An
adversary can extract this information if it can measure the
running time of the zkSNARK generation procedure. How-
ever, as we explain in Section 3.3, it may be difﬁcult to exploit
this leakage in the current Zcash system.
1.2 Disclosure and remediation.
All the vulnerabilities discussed in this paper were disclosed
to Zcash and Monero, and have subsequently been ﬁxed in
recent versions of both projects [17, 20, 22, 35].
We hope that this work will help inform other privacy-
oriented blockchain projects about the dangers of side-
channel leakage in anonymous payment systems. It should
also motivate the development of constant-time implementa-
tions of cryptographic primitives such as zkSNARK provers.
2 Architecture of an Anonymous Payment
System
This section introduces some core design concepts of privacy-
focused crypto-currencies such as Zcash and Monero.
These crypto-currencies build on top of Bitcoin’s so-called
UTXO model. Each transaction spends outputs from prior
transactions and produces new outputs. The set of “unspent
transaction outputs” (UTXOs) is recorded in a blockchain,
and represents the total currency in circulation.
Each user of the currency possesses one or more public keys
(also known as addresses), and connects to a P2P network to
send and receive transactions.
Privacy goals.
In Bitcoin, a UTXO is a tuple of the form
(amount, pk), where pk is the recipient’s public key. To later
spend this UTXO, the recipient produces a signature under
the corresponding secret key. A transaction thus reveals the
amount of spent currency, the origin of funds (i.e., which
UTXOs are spent), and their destination (i.e., the public key
of the owner of the new UTXOs). Moreover, a user’s public
key can be linked to the P2P node that she connects to when
sending transactions into the network.
Currencies such as Zcash and Monero aim to provide the
following stronger privacy guarantees:
• Conﬁdentiality: A transaction does not reveal the trans-
acted amount.
• Untraceability: When a transaction spends a UTXO, it is
hard to identify the transaction that produced that UTXO.
• Unlinkability: Given two transactions sent into the net-
work (at most one of which is sent by the adversary), the
adversary cannot tell whether they pay the same address.
Moreover, given two addresses, an adversary cannot de-
termine whether they belong to the same user.1
• User anonymity: Given a user’s address (i.e., a public
key), an adversary cannot determine how the owner of
that address is connected to the P2P network.
Privacy techniques. These privacy guarantees are achieved
via a combination of cryptographic techniques, which we
informally describe next.
Conﬁdential transactions [33] hide the amount of trans-
acted funds. A conﬁdential transaction’s UTXOs are of the
form (Commit(amount), pk), i.e., they only reveal a crypto-
graphic commitment to the transacted amount. The transac-
tion further includes a proof that its total balance is zero.
UTXO anonymity sets provide untraceability by concealing
the identity of a transaction’s inputs. Speciﬁcally, an anony-
mous transaction does not reveal the UTXOs it spends, but
only a super-set of UTXOs along with a zero-knowledge proof
of ownership of some UTXOs in this set.
Obfuscated and diversiﬁed addresses guarantee unlinka-
bility. To prevent linkability of transactions sent to the same
1The latter property enables a user to receive payments from different
entities without those entities knowing that they are paying the same user.
This can be trivially done if the user maintains multiple public-key pairs. A
more efﬁcient solution is given by diversiﬁed addresses, described hereafter.
USENIX Association
29th USENIX Security Symposium    2741
address, the UTXOs of anonymous transactions contain an
“obfuscated” public key (e.g., a commitment to the key in
Zcash). Diversiﬁed addresses (or sub-addresses in Monero)
enable a user to anonymously transact with multiple entities,
without managing multiple secret keys. From a single secret
key sk, users can create multiple public keys pk1, . . . , pkn.
These keys are unlinkable: it is hard to determine whether
two public keys pk, pk(cid:48) are derived from the same secret key.
Blockchain scanning is a technical consequence of unlinka-
bility. Since an anonymous transaction’s UTXOs do not reveal