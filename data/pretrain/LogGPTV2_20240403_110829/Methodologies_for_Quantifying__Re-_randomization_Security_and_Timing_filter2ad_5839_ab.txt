ing the number of various gadget types and their quality.
Acknowledgment. This work is supported by ONR Grant
N00014-17-1-2498 and DARPA/ONR N66001-17-C-4052.
REFERENCES
[1] M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti, “Control-ﬂow
integrity,” in Proceedings of the 12th ACM conference on Computer
and communications security. ACM, 2005, pp. 340–353.
[2] M. Backes, T. Holz, B. Kollenda, P. Koppe, S. N¨urnberger, and J. Pewny,
“You can run but you can’t read: Preventing disclosure exploits in
executable code,” in Proceedings of the 2014 ACM SIGSAC Conference
on Computer and Communications Security. ACM, 2014, p. 1342.
[3] A. Bittau, A. Belay, A. Mashtizadeh, D. Mazi`eres, and D. Boneh,
“Hacking blind,” in Security and Privacy (SP), 2014 IEEE Symposium
on.
IEEE, 2014, pp. 227–242.
[4] N. Carlini and D. Wagner, “Rop is still dangerous: Breaking modern
defenses.” in USENIX Security Symposium, 2014, pp. 385–399.
[5] M. Conti, S. Crane, T. Frassetto, A. Homescu, G. Koppen, P. Larsen,
C. Liebchen, M. Perry, and A.-R. Sadeghi, “Selfrando: Securing the tor
browser against de-anonymization exploits,” Proceedings on Privacy
Enhancing Technologies, vol. 2016, no. 4, pp. 454–469, 2016.
[6] S. Crane, C. Liebchen, A. Homescu, L. Davi, P. Larsen, A.-R. Sadeghi,
S. Brunthaler, and M. Franz, “Readactor: Practical code randomization
resilient to memory disclosure,” in Security and Privacy (SP), 2015
IEEE Symposium on.
IEEE, 2015, pp. 763–780.
[7] A. Haas, A. Rossberg, D. L. Schuff, B. L. Titzer, M. Holman,
D. Gohman, L. Wagner, A. Zakai, and J. Bastien, “Bringing the web
up to speed with webassembly,” in ACM SIGPLAN Notices, vol. 52,
no. 6. ACM, 2017, pp. 185–200.
[8] W. H. Hawkins, J. D. Hiser, M. Co, A. Nguyen-Tuong, and J. W.
Davidson, “Zipr: Efﬁcient static binary rewriting for security,” in
2017 47th Annual IEEE/IFIP International Conference on Dependable
Systems and Networks (DSN).
IEEE, 2017, pp. 559–566.
[9] A. Homescu, S. Neisius, P. Larsen, S. Brunthaler, and M. Franz,
“Proﬁle-guided automated software diversity,” in Proceedings of the
2013 IEEE/ACM International Symposium on Code Generation and
Optimization (CGO).
IEEE Computer Society, 2013, pp. 1–11.
[10] H. Koo, Y. Chen, L. Lu, V. P. Kemerlis, and M. Polychronakis,
“Compiler-assisted code randomization,” in 2018 IEEE Symposium on
Security and Privacy (SP).
IEEE, 2018, pp. 461–477.
[11] V. Kuznetsov, L. Szekeres, M. Payer, G. Candea, R. Sekar, and D. Song,
“Code-pointer integrity.” in OSDI, vol. 14, 2014, p. 00000.
[12] D. Lie, C. Thekkath, M. Mitchell, P. Lincoln, D. Boneh, J. Mitchell,
and M. Horowitz, “Architectural support for copy and tamper resistant
software,” Acm Sigplan Notices, vol. 35, no. 11, pp. 168–177, 2000.
[13] K. Lu and H. Hu, “Where does it go? reﬁning indirect-call targets with
multi-layer type analysis,” in Proceedings of the 2019 ACM SIGSAC
Conference on Computer and Communications Security, 2019, pp.
1867–1881.
[14] R. Roemer, E. Buchanan, H. Shacham, and S. Savage, “Return-oriented
programming: Systems, languages, and applications,” ACM Transac-
tions on Information and System Security (TISSEC), vol. 15, no. 1,
p. 2, 2012.
[15] K. Z. Snow, F. Monrose, L. Davi, A. Dmitrienko, C. Liebchen, and
A.-R. Sadeghi, “Just-in-time code reuse: On the effectiveness of ﬁne-
grained address space layout randomization,” in Security and Privacy
(SP), 2013 IEEE Symposium on.
IEEE, 2013, pp. 574–588.
[16] D. Williams-King, G. Gobieski, K. Williams-King, J. P. Blake, X. Yuan,
P. Colp, M. Zheng, V. P. Kemerlis, J. Yang, and W. Aiello, “Shufﬂer:
Fast and deployable continuous code re-randomization.” in OSDI, 2016,
pp. 367–382.
Poster: Methodologies for Quantifying (Re-)Randomization Security 
and Timing under JIT-ROP
1Computer Science, Virginia Tech, 2Computer Science & Eng., Penn State, 3Zeropoint Dynamics, LLC, 4Computer Science, UNC at Chapel Hill
Md Salman Ahmed1, Ya Xiao1, Gang Tan2, Kevin Snow3, Fabian Monrose4, Danfeng (Daphne) Yao1
{ahmedms, yax99, danfeng}@vt.edu, PI:EMAIL, PI:EMAIL, PI:EMAIL
1. Motivation
qFrom defense-in-depth perspective, deployment of multiple defenses is necessary.
qFeasibility analysis and quantitative evaluation of these defenses are also necessary.
qDespite the strong security of other defenses such CFI [1], CPI [2], XoM [3]/XnR[4] 
style defenses, investigations on ASLR are extremely necessary.
qGeneral methodologies for measuring ASLR security and timing using various 
metrics are necessary.
qASLR security and timing metrics can include the following:
§ interval choices
§ gadget availability
§ speed of convergence
§ code pointer leakage
§ gadget convergence
§ gadget chain formation
2. Challenges
q How to quantify the impact of fine-grained ASLR or code randomization or re-
randomization schemes.
q How to quantify the quality of a gadget chain.
4. Evaluation Results
q We found that re-randomization upper bound varies from 0.89 to 5 seconds
in our test applications and browsers on our machine. 
Figure 2 shows the re-
randomization upper 
bounds and intervals 
along with the 
trajectory lines.
Figure 2: Gadget convergence with trajectory lines. Each ▲ and ● represent 
a re-randomization upper bound and re-randomization interval, respectively.
q For all applications, we observe that the pointer’s location does not have any 
impact on gadget availability. However, the times needed to harvest the TC 
gadget set vary from one pointer to another (Figure 3).
We report our experimental findings on various aspects of code (re-)randomization 
that impact code reuse attacks: (i) upper bound for re-randomization interval choices,  
(ii) code pointer locations,  (iii) gadget availability, (iv) gadget convergence,  (v) 
speed of convergence, and (vi) gadget chain formation.
3. Approach and Experimental Design
q We identify 21 JIT-ROP gadgets including the Turing-complete (TC) gadget set.
qWe measure gadgets and re-randomization timing with (re-)randomization schemes 
enforced by 5 tools for 20 applications and 25 libraries utilizing a native JIT-ROP 
implementation. Figure 1 shows JIT-ROP’s recursive code harvest process.
qTo measure the upper bound, we record the time for a JIT-ROP attacker to harvest 
the TC gadget set.
qTo measure the impact of code pointer locations, we run code harvest process 
starting from different code pointer locations and track gadget convergence and 
convergence time.
qWe measure the impact of single-round randomization by comparing the number of  
TC gadgets available in randomized and non-randomized versions of an application.
qWe measure the gadget quality using register corruption rate.
Figure 1: An illustration of the recursive code harvest process of JIT-ROP
Figure 2: Min, max, and average time needed to harvest the TC gadget set.
q Instruction-level randomization does not preserves TC expressiveness of JIT-
ROP payloads. Our findings suggest that current fine-grained randomization 
solutions do not impose significant gadget corruption. In addition, a stack 
has a higher risk of revealing dynamic libraries than a heap or data segment 
due to the higher number of libc pointers, on average more than 16 in stack 
than heaps or data segments.
5. Conclusion
We presented multiple general methodologies for quantitatively measuring the ASLR security 
under the JIT-ROP threat model and conducted a comprehensive measurement study. One 
method is for computing the number of various gadget types and their quality. Another method 
is for experimentally determining the upper bound of re-randomization intervals. The upper 
bound helps guide re-randomization adopters to make more informed configuration decisions.
[1]. Abadi, Martín, et al. "Control-flow integrity principles, implementations, and applications." ACM Transactions on 
Information and System Security (TISSEC) 13.1 (2009): 1-40.
[2]. Kuznetzov, Volodymyr, et al. "Code-pointer integrity." The Continuing Arms Race: Code-Reuse Attacks and Defenses. 
2018. 81-116.
[3]. Lie, David, et al. "Architectural support for copy and tamper resistant software." Acm Sigplan Notices 35.11 (2000): 
168-177.
[4]. Backes, Michael, et al. "You can run but you can't read: Preventing disclosure exploits in executable code." 
Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security. 2014.
[5]. Snow, Kevin Z., et al. "Just-in-time code reuse: On the effectiveness of fine-grained address space layout 
randomization." 2013 IEEE Symposium on Security and Privacy. IEEE, 2013..
This work is supported by ONR Grant N00014-17-1-2498 and DARPA/ONR N66001-17-C-4052.
Yao Group on Cyber Security
http://yaogroup.cs.vt.edu/
2020