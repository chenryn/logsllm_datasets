It seems like the issue you're encountering is related to setting state on an unmounted component, which can happen if the `setState` call is made after the component has been unmounted. This is a common issue when dealing with asynchronous operations in React.

To address this, you can add a check to ensure that the component is still mounted before calling `setState`. Here's an optimized version of your code:

```javascript
import React, { Component } from "react";
import axios from "axios";
import axios_config from "./axios_config";
import "react-sortable-tree/style.css";
import SortableTree from "react-sortable-tree";

class Tree extends Component {
  constructor(props) {
    super(props);
    this.state = {
      treeData: [],
      selectedNode: null,
    };
    this.isMounted = false;
  }

  componentDidMount() {
    this.isMounted = true;
    (async () => {
      try {
        axios_config.url = this.props.treeLink;
        axios_config.data = {};
        const result = await axios(axios_config);
        console.log("Response from server:", result);

        if (result.data.done === true && this.isMounted) {
          this.setState({
            treeData: result.data.tree,
            selectedNode: result.data.tree[0],
          }, this.props.disableLoading);
        } else {
          console.error("Error from server:", result.err);
          this.props.disableLoading();
        }
      } catch (err) {
        console.error("Axios error:", err);
        this.props.disableLoading();
      }
    })();
  }

  componentWillUnmount() {
    this.isMounted = false;
  }

  render() {
    return (
      <SortableTree
        treeData={this.state.treeData}
        onChange={(treeData) => this.setState({ treeData })}
      />
    );
  }
}

export default Tree;
```

### Key Changes:
1. **Added `isMounted` Flag**: A flag `isMounted` is used to track whether the component is still mounted. This flag is set to `true` in `componentDidMount` and set to `false` in `componentWillUnmount`.

2. **Check `isMounted` Before `setState`**: Before calling `setState`, we check if `isMounted` is `true`. This ensures that `setState` is only called if the component is still mounted.

3. **Error Handling**: Improved error handling by logging errors more clearly and ensuring `disableLoading` is called even if there is an error.

4. **Code Formatting**: Improved code formatting for better readability.

This should resolve the issue of setting state on an unmounted component and make your code more robust.