## PostgreSQL pg_upgrade 9.3 improve and example
### 作者                           
digoal                         
### 日期                                                                                                                                           
2013-05-20                                                                      
### 标签                                                                        
PostgreSQL , pg_upgrade , 跨版本升级 , 原地升级 , 快速跨版本升级     
----                                                                                                                                        
## 背景         
```  
E.1.3.10.1. pg_upgrade  
Allow pg_upgrade --jobs to do parallelism (Bruce Momjian)  
This allows parallel schema dump/restore of databases, as well as parallel copy/link of data files per tablespace.  
Have pg_upgrade create unix-domain sockets in the current directory (Bruce Momjian, Tom Lane)  
This reduces the possibility that someone will accidentally connect during the upgrade.  
Have pg_upgrade --check mode properly detect the location of non-default socket directories (Bruce Momjian, Tom Lane)  
Improve performance of pg_upgrade for databases with many tables (Bruce Momjian)  
Increase pg_upgrade logging content by showing executed command (?lvaro Herrera)  
Improve pg_upgrade's status display during copy/link (Bruce Momjian)  
```  
## pg_upgrade使用介绍  
测试环境 :   
```  
CentOS 5.x 64bit  
PostgreSQL 9.0 beta2  
postgis  
```  
升级到 PostgreSQL 9.3 beta1  
## 一. 安装PostgreSQL 9.0 beta2测试环境  
```  
[root@db-172-16-3-33 soft_bak]# useradd uptest  
su - uptest  
vi .bash_profile  
# add by digoal  
export PS1="$USER@`/bin/hostname -s`-> "  
export PGPORT=1099  
export PGDATA=/pgdata1099  
export LANG=en_US.utf8  
export PGHOME=/opt/pgsql9.0beta2  
export LD_LIBRARY_PATH=$PGHOME/lib:/lib64:/usr/lib64:/usr/local/lib64:/lib:/usr/lib:/usr/local/lib:$LD_LIBRARY_PATH  
export DATE=`date +"%Y%m%d%H%M"`  
export PATH=$PGHOME/bin:$PATH:.  
export MANPATH=$PGHOME/share/man:$MANPATH  
export PGUSER=postgres  
export PGHOST=$PGDATA  
alias rm='rm -i'  
alias ll='ls -lh'  
vi /etc/sysctl.conf  
# add by digoal  
# Controls the maximum size of a message, in bytes  
kernel.msgmnb = 65536  
# Controls the default maxmimum size of a mesage queue  
kernel.msgmax = 65536  
# Controls the maximum shared segment size, in bytes  
kernel.shmmax = 68719476736  
# Controls the maximum number of shared memory segments, in pages  
kernel.shmall = 4294967296  
kernel.shmmni = 4096  
kernel.sem = 50100 64128000 50100 1280  
fs.file-max = 7672460  
net.ipv4.ip_local_port_range = 9000 65000  
net.core.rmem_default = 1048576  
net.core.rmem_max = 4194304  
net.core.wmem_default = 262144  
net.core.wmem_max = 1048576  
net.ipv4.tcp_tw_recycle = 1  
net.ipv4.tcp_max_syn_backlog = 4096  
net.core.netdev_max_backlog = 10000  
net.ipv4.ip_conntrack_max = 655360  
fs.aio-max-nr = 1048576  
net.ipv4.tcp_timestamps = 0  
vm.overcommit_memory = 0  
sysctl -p  
vi /etc/security/limits.conf  
* soft    nofile  131072  
* hard    nofile  131072  
* soft    nproc   131072  
* hard    nproc   131072  
* soft    core    unlimited  
* hard    core    unlimited  
* soft    memlock 50000000  
* hard    memlock 50000000  
[root@db-172-16-3-33 soft_bak]# cd flex-2.5.35  
./configure  
make  
make install  
[root@db-172-16-3-33 soft_bak]# tar -jxvf postgresql-9.0beta2.tar.bz2  
[root@db-172-16-3-33 soft_bak]# cd postgresql-9.0beta2  
./configure --prefix=/opt/pgsql9.0beta2 --with-pgport=1099 --with-segsize=8 --with-wal-segsize=64 --with-wal-blocksize=64 --with-perl --with-python --with-openssl --with-pam --with-ldap --with-libxml --with-libxslt --enable-thread-safety  
gmake world  
gmake install-world  
```  
初始化数据库 :   
```  
[root@db-172-16-3-33 postgresql-9.0beta2]# mkdir /pgdata1099  
[root@db-172-16-3-33 postgresql-9.0beta2]# chown uptest:uptest /pgdata1099  
[root@db-172-16-3-33 postgresql-9.0beta2]# su - uptest  
uptest@db-172-16-3-33-> initdb -D $PGDATA -E UTF8 --locale=C -W -U postgres  
```  
配置postgresql.conf  
```  
listen_addresses = '0.0.0.0'            # what IP address(es) to listen on;  
port = 1099                             # (change requires restart)  
max_connections = 100                   # (change requires restart)  
superuser_reserved_connections = 13     # (change requires restart)  
unix_socket_directory = '.'             # (change requires restart)  
unix_socket_permissions = 0700          # begin with 0 to use octal notation  
shared_buffers = 1024MB                 # min 128kB  
maintenance_work_mem = 512MB            # min 1MB  
max_stack_depth = 8MB                   # min 100kB  
shared_preload_libraries = 'pg_stat_statements'         # (change requires restart)  
wal_level = hot_standby                 # minimal, archive, or hot_standby  
synchronous_commit = off                # immediate fsync at commit  
wal_sync_method = fsync                 # the default is the first option   
full_page_writes = on                   # recover from partial page writes  
wal_buffers = 16384kB                   # min 32kB  
wal_writer_delay = 10ms                 # 1-10000 milliseconds  
checkpoint_segments = 128               # in logfile segments, min 1, 16MB each  
archive_mode = on                       # allows archiving to be done  
archive_command = '/bin/date'           # command to use to archive a logfile segment  
hot_standby = on                # allows queries during recovery  
max_wal_senders = 16            # max number of walsender processes  
wal_sender_delay = 10ms         # 1-10000 milliseconds  
wal_keep_segments = 256         # in logfile segments, 16MB each; 0 disables  
random_page_cost = 2.0                  # same scale as above  
effective_cache_size = 8192MB  
log_destination = 'csvlog'              # Valid values are combinations of  
logging_collector = on                  # Enable capturing of stderr and csvlog  
log_directory = 'pg_log'                # directory where log files are written,  
log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log' # log file name pattern,  
log_truncate_on_rotation = on           # If on, an existing log file of the  
log_rotation_age = 1d                   # Automatic rotation of logfiles will  
log_rotation_size = 10MB                # Automatic rotation of logfiles will   
log_checkpoints = on  
log_connections = on  
log_disconnections = on  
log_error_verbosity = verbose           # terse, default, or verbose messages  
log_lock_waits = on                     # log lock waits >= deadlock_timeout  
log_statement = 'ddl'                   # none, ddl, mod, all  
autovacuum = on                         # Enable autovacuum subprocess?  'on'   
log_autovacuum_min_duration = 0         # -1 disables, 0 logs all actions and  
datestyle = 'iso, mdy'  
lc_messages = 'C'                       # locale for system error message  
lc_monetary = 'C'                       # locale for monetary formatting  
lc_numeric = 'C'                        # locale for number formatting  
lc_time = 'C'                           # locale for time formatting  
default_text_search_config = 'pg_catalog.english'  
custom_variable_classes = 'pg_stat_statements'  
pg_stat_statements.max = 1000  
pg_stat_statements.track = all  
```  
启动数据库 :   
```  
uptest@db-172-16-3-33-> pg_ctl start  
server starting  
uptest@db-172-16-3-33-> LOG:  00000: loaded library "pg_stat_statements"  
LOCATION:  load_libraries, miscinit.c:1201  
Not safe to send CSV data  
```  
安装模块 :   
```  
pgfincore  
[root@db-172-16-3-33 soft_bak]# tar -zxvf pgfincore-v1.1.1.tar.gz  
[root@db-172-16-3-33 soft_bak]# mv pgfincore-1.1.1 postgresql-9.0beta2/contrib/  
[root@db-172-16-3-33 soft_bak]# cd postgresql-9.0beta2/contrib/pgfincore-1.1.1/  
[root@db-172-16-3-33 pgfincore-1.1.1]# export PATH=/opt/pgsql9.0beta2/bin:$PATH  
[root@db-172-16-3-33 pgfincore-1.1.1]# which pg_config  
/opt/pgsql9.0beta2/bin/pg_config  
[root@db-172-16-3-33 pgfincore-1.1.1]# gmake clean  
[root@db-172-16-3-33 pgfincore-1.1.1]# gmake  
[root@db-172-16-3-33 pgfincore-1.1.1]# gmake install  
uptest@db-172-16-3-33-> psql -f /opt/pgsql9.0beta2/share/contrib/pgfincore.sql   
CREATE FUNCTION  
CREATE FUNCTION  
CREATE FUNCTION  
CREATE FUNCTION  
CREATE FUNCTION  
CREATE FUNCTION  
CREATE FUNCTION  
CREATE FUNCTION  
CREATE FUNCTION  
CREATE FUNCTION  
CREATE FUNCTION  
CREATE FUNCTION  
CREATE FUNCTION  
pg_stat_statements  
uptest@db-172-16-3-33-> psql   
psql (9.0beta2)  
Type "help" for help.  
postgres=# \q  
uptest@db-172-16-3-33-> psql -f /opt/pgsql9.0beta2/share/contrib/pg_stat_statements.sql   
SET  
CREATE FUNCTION  
CREATE FUNCTION  
CREATE VIEW  
GRANT  
REVOKE  
```  
安装模块 postgis：  
安装参考 :   
[《PostGIS 2.0 Install》](../201206/20120601_01.md)    
下载安装包 :   
```  
http://download.osgeo.org/gdal/1.10.0/gdal-1.10.0.tar.gz  
http://download.osgeo.org/geos/geos-3.3.8.tar.bz2  
http://download.osgeo.org/proj/proj-4.8.0.tar.gz  
https://github.com/json-c/json-c  
http://download.osgeo.org/postgis/source/postgis-2.0.3.tar.gz  
tar -zxvf gdal-1.10.0.tar.gz  
cd gdal-1.10.0  
./configure --prefix=/opt/gdal-1.10.0  
make  
make install  
tar -jxvf geos-3.3.8.tar.bz2  
cd geos-3.3.8  
./configure --prefix=/opt/geos-3.3.8  
make  
make install  
tar -zxvf proj-4.8.0.tar.gz  
cd proj-4.8.0  
./configure --prefix=/opt/proj-4.8.0  
make  
make install  
tar -zxvf unzip json-c-master.zip  
cd json-c-master  
./autogen.sh  
./configure --prefix=/opt/json-c-git20130520  
make  
make install  
```  
使用, add to Makefile  
```  
JSON_C_DIR=/opt/json-c-git20130520  
CFLAGS += -I$(JSON_C_DIR)/include/json-c  
LDFLAGS+= -L$(JSON_C_DIR)/lib -ljson-c  
su - uptest  
vi .bash_profile  
export LD_LIBRARY_PATH=/opt/gdal-1.10.0/lib:/opt/geos-3.3.8/lib:/opt/json-c-git20130520/lib:/opt/proj-4.8.0/lib:$PGHOME/lib:/lib64:/usr/lib64:/usr/local/lib64:/lib:/usr/lib:/usr/local/lib:$LD_LIBRARY_PATH  
tar -zxvf postgis-2.0.3.tar.gz  
cd postgis-2.0.3  
./configure --prefix=/opt/postgis-2.0.3 --with-pgconfig=/opt/pgsql9.0beta2/bin/pg_config --with-gdalconfig=/opt/gdal-1.10.0/bin/gdal-config --with-geosconfig=/opt/geos-3.3.8/bin/geos-config --with-xml2config=/usr/bin/xml2-config --with-projdir=/opt/proj-4.8.0 --with-libiconv=/usr/bin --with-jsondir=/opt/json-c-git20130520 --with-gui --with-raster --with-topology --with-gettext=no  
gmake  
gmake install  
```  
重启数据库.  
```  
pg_ctl restart -m fast  
psql -f /opt/pgsql9.0beta2/share/contrib/postgis-2.0/postgis.sql   
psql -f /opt/pgsql9.0beta2/share/contrib/postgis-2.0/spatial_ref_sys.sql   
psql -f /opt/pgsql9.0beta2/share/contrib/postgis-2.0/postgis_comments.sql   
psql -f /opt/pgsql9.0beta2/share/contrib/postgis-2.0/rtpostgis.sql   
psql -f /opt/pgsql9.0beta2/share/contrib/postgis-2.0/raster_comments.sql   
psql -f /opt/pgsql9.0beta2/share/contrib/postgis-2.0/topology.sql   
psql -f /opt/pgsql9.0beta2/share/contrib/postgis-2.0/topology_comments.sql   
psql -f /opt/pgsql9.0beta2/share/contrib/postgis-2.0/legacy.sql  
```  
测试数据 :   