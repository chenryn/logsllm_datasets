¬b µ =⇒ (if b then P else Q, µ) −→1 (Q, µ)
b µ =⇒ (while b do P, µ) −→1 (P;; while b do P, µ)
¬b µ =⇒ (while b do P, µ) −→1 (skip, µ)
(skip k Q, µ) −→1 (Q, µ)
(P, µ) −→1 (P0, µ0) =⇒ (P k Q, µ) −→1 (P0 k Q, µ0)
(P k skip, µ) −→1 (P, µ)
(Q, µ) −→1 (Q0, µ0) =⇒ (P k Q, µ) −→1 (P k Q0, µ0)
Figure 1: Operational semantics for concurrent programs.
Skip:
Assign:
Seq:
Cond:
While:
Par:
‘ skip . [t, s]
[[ seca a v getlevel x; t v getlevel x ]] =⇒ ‘ x:==a . [t, s]
[[ ‘ P . [t, s]; ‘ Q . [t0, s0]; s v t0; t00 v t; t00 v t0; s v s00; s0 v s00 ]]
=⇒ ‘ P;; Q . [t00, s00]
[[ ‘ P . [t, s]; ‘ Q . [t, s]; secb b v t; secb b v s0; s v s0; t0 v t ]]
=⇒ ‘ if b then P else Q . [t0, s0]
[[ ‘ P . [t, s]; secb b v t; s v t; secb b v s0; s v s0; t0 v t ]]
=⇒ ‘ while b do P . [t0, s0]
[[ ‘ P . [t, s]; ‘ Q . [t, s] ]] =⇒ ‘ P k Q . [t, s]
Figure 2: Type system for concurrent programs.
constdefs bis :: (((par × memory) × (par × memory)) set) ⇒ bool
bis R ≡ sym R∧ (∀ P µ Q ν. ((P, µ), (Q, ν)) ∈ R −→ µ ’ ν
∧ (∀ P0 µ0. (P, µ) −→1 (P0, µ0) −→ (∃ Q0 ν 0. (Q, ν) →→ (Q0, ν 0) ∧ ((P0, µ0), (Q0, ν 0)) ∈ R)))
Figure 3: Bisimulation for concurrent programs.
lemma notbounded-ship: ¬ bounded P =⇒ ship P
However, a high program is not necessarily not bounded (see
the counterexample in [4]). The next lemma characterizes
the behaviour of guarded programs.
lemma behaviour-of-guarded-programs:
[[guarded P ; µ ’ ν; (P , µ) −→1 (P 0, µ0)]]
=⇒ ∃ ν 0. (P , ν) −→1 (P 0, ν 0) ∧ µ0 ’ ν 0
We now deﬁne a relation S 2 on parallel programs which will
be the key to the proof of non-interference for concurrent
programs. It is inductively deﬁned by the rules of ﬁgure 4.
We added clause4s, clause5, clause5s, clause6 and clause6s
to the original deﬁnition of [4] in order to do the proof for
our enriched semantics.
The following three properties are used in the proof of
non-interference:
lemma S 2-sym: P S 2 Q =⇒ Q S 2 P
lemma S 2-reﬂ: typable P =⇒ P S 2 P
lemma S 2-skip-ship: skip S 2 P =⇒ ship P
We now prove the non-interference result for programs of
type par.
theorem Concurrent-Non-interference: typable P =⇒ secure P
By instantiating with the relation S 2 we obtain the following
subgoals:
1. typable P =⇒ P S 2 P
2. typable P =⇒ bis {((P , µ), Q, ν). P S 2 Q ∧ µ ’ ν}
The ﬁrst subgoal is solved using lemma S 2-reﬂ. It remains
to prove that the relation R2 (the extended relation of S 2
for conﬁgurations) is a bisimulation.
lemma R2-is-bis: bis R2
This follows from the following auxiliary lemma on which
we apply induction on the derivation of S 2:
lemma R2-is-bis-aux : P S 2 P 0 =⇒
∀ µ µ0 Q ν. µ ’ µ0 −→ (P , µ) −→1 (Q, ν)
−→ (∃ Q 0 ν 0. (P 0, µ0) →→ (Q 0, ν 0) ∧ (Q, ν) R2 (Q 0, ν 0))
The proof for the case concerning the rule clause2 had a
minor ﬂaw in [4]. This could be solved by adding two new
clauses to the deﬁnition of S 2: P S 2 Q =⇒ (skip;; P ) S 2 Q
(and P S 2 Q =⇒ P S 2 (skip;; Q) to preserve symmetry).
However, by modifying the rule Seq1 of the semantics as
explained above this problem is solved more elegantly.
4. NON-INTERFERENCE FOR
SCHEDULING PROGRAMS
4.1 The Language and Type System
We consider parallel execution of sequential threads con-
trolled by a scheduler: Sched [[T 1,. . . , T n]]. The scheduler is
a parallel program of type par and each thread is a program
of the following type:
datatype thread = When bexp seq
(when - do -)
The type seq of sequential programs is deﬁned like parallel
programs in the previous section without the parallel con-
struct. A thread T is thus a sequential program S with a
guard b and concrete syntax when b do S. The execution
of S is allowed to proceed, for one step, when the condition
b holds, i.e. execution can be triggered and suspended by
the scheduler. A controlled thread system has the following
type:
datatype control = Control par (thread list)
(-[[-]])
A controlled thread system P [[T ]] is legal iﬀ the variables
written in P are disjoint from the variables written in T.
In [4], parallelism of threads is deﬁned via a binary opera-
tor (k), which allows us to express parallelism of a concrete
number of threads. Using lists we can also reason about
parameterized parallel composition of threads. This is not
relevant for the formalization of [4] but it is useful for reason-
ing about concrete programs. Given a thread T (i) depend-
ing on a parameter i that varies between 0 and n we can
formally express the list [T (0), . . .
, T (n)] using the HOL
function map and the construct [0..n], which represents the
list of natural numbers from 0 to n, i.e.
map (λi. T (i)) [0..n]
Consequently, our formalization proves non-interference also
for parameterized systems of threads.
The semantics of When-instructions is described by the
two rules of ﬁgure 5, where −→s is the transition relation
for sequential programs. The ﬁrst rule allows the sequen-
tial program S to proceed from µ, for one step, when the
condition b holds in µ. The rule When-op2 is technically
convenient but harmless. It simply allows to ignore a termi-
nated thread.
To deﬁne the operational semantics rules for Control we
need functions that calculate the set of variables that are
written by a thread or by the scheduler. The function wpar
calculates this set for parallel programs.
wpar (skip) = {}
wpar (x :== a) = {x}
wpar (P ;; Q) = wpar P ∪ wpar Q
wpar (if b then P else Q) = wpar P ∪ wpar Q
wpar (while b do P ) = wpar P
wpar (P k Q) = wpar P ∪ wpar Q
The function wseq for sequential programs is analogous to
wpar for the sequential subset. Finally, writable variables of
a thread are those of the sequential body:
wthread (when b do S ) = wseq S
The semantics of Control -instructions is deﬁned via the two
rules shown in ﬁgure 5. The execution of Control-op1 re-
turns the memory µ with the conjunction of the updates
operated by P and T. This is expressed using the existing
Isabelle function overwrite deﬁned as
f (g|A) ≡ λa. if a ∈ A then g a else f a
We could also write it in the opposite order, i.e.
µ0 (µ00 | (wthread T !i))
Both are equivalent under the restriction that the writable
variables of P and T be disjoint.
The typing rules for the new operators are shown in ﬁg-
ure 6. They also include the subtyping relations in the
premises. The rule for When has the premise
‘s S . [t, s]
clause1:
clause2:
clause3:
clause4:
clause4s:
clause5:
clause5s:
clause6:
clause6s:
[[ ship P; ship Q; typable P; typable Q ]] =⇒ P S2 Q
[[ bounded P; typable P ]] =⇒ P S2 P
[[ P S2 Q; ¬ bounded R; typable (P;; R); typable (Q;; R) ]]=⇒ (P;; R) S2 (Q;; R)
[[ P1 S2 P2; Q1 S2 Q2; typable (P1 k Q1); typable (P2 k Q2) ]]=⇒ (P1 k Q1) S2 (P2 k Q2)
[[ P1 S2 Q2; Q1 S2 P2; typable (P1 k Q1); typable (P2 k Q2)]]=⇒ (P1 k Q1) S2 (P2 k Q2)
[[ ship P; Q1 S2 Q2; typable Q1; typable (P k Q2) ]]=⇒ Q1 S2 (P k Q2)
[[ ship P; Q1 S2 Q2; typable Q1; typable (P k Q2) ]]=⇒ Q1 S2 (Q2 k P)
[[ ship P; Q1 S2 Q2; typable Q2; typable (P k Q1) ]]=⇒ (P k Q1) S2 Q2
[[ ship P; Q1 S2 Q2; typable Q2; typable (P k Q1) ]]=⇒ (Q1 k P) S2 Q2
Figure 4: Relation S2.
When-op1:
[[ b µ; (S, µ) −→s (S0, µ0) ]] =⇒ (when b do S, µ) −→t (when b do S0, µ0)
[[ b µ; ¬ (∃ s. (S, µ) −→s s) ]] =⇒ (when b do S, µ) −→t (when b do S, µ)
When-op2:
Control-op1: [[ (P, µ) −→1 (P0, µ0); i<length T; (T!i, µ) −→t (t0, µ00) ]]
=⇒ (P[[T]], µ) −→c (P0[[T[i:=t0]]], µ00 (µ0 | (wpar P)))
Control-op2: [[ (P, µ) −→1 (P0, µ0); ∀ i<length T. ¬(∃ s. (T!i, µ) −→t s) ]]
=⇒ (P[[T]], µ) −→c (P0[[T]], µ0)
Figure 5: Operational semantics for When and Control.
When:
Control:
[[ ‘s S . [t, s]; secb b v s0; secb b v t; t0 v t ]] =⇒ ‘t (when b do S) . [t0, s0]
[[ ‘ P . [t, s]; ∀ i<length T. ‘t T!i . [t, s]; s v t; s v s0; t0 v t]] =⇒ ‘c P[[T]] . [t0, s0]
Figure 6: Typing rules for When and Control.
that corresponds to the typing judgement for the sequential
program.
We conclude this section by brieﬂy remarking that the
language features a combination of constructs that is pow-
erful enough to encode a large variety of schedulers. For
instance, we can deﬁne a round robin scheduler with time
slice t for a system with n threads running the programs
as follows, or if a suitable random function is aggregated
to the language, a uniform scheduler, see [4]. Such exam-
ples demonstrate that the approach followed in this paper
has the ability to capture realistic scenarios, but we do not
claim that it is the sole appropriate approach for securing
concurrent programs.
4.2 Properties of Typed Programs
All deﬁnitions introduced in section 3.2 are also deﬁned
for the new types seq, thread and control with their names
preceded by s, t and c, respectively. For instance, ship is
named sship for sequential programs, tship for threads and
cship for controlled systems.
The proof of non-interference for controlled thread sys-
tems requires two stronger notions of bisimulation: strong
and quasi-strong bisimulation. The latter is deﬁned both on
sequential programs and controlled thread systems.
A relation R between conﬁgurations of sequential pro-
grams is a quasi-strong bisimulation if the predicate qsbis
R, shown in ﬁgure 7, holds.
In order to prove our ﬁnal result, one needs to exhibit a
quasi-strong bisimulation R such that P R P for all typable
sequential programs P . To this end, we deﬁne a relation
S 1 between sequential programs. It is inductively deﬁned
by three rules analogous to clause1, clause2 and clause3 of
the relation S 2 in the previous section. We then prove that
the corresponding relation between conﬁgurations R1 is a
quasi-strong bisimulation.
lemma R1-is-qsbis: qsbis R1
A relation R is a strong bisimulation if it satisﬁes the con-
ditions of a bisimulation where →→ is replaced by −→. The
formal deﬁnition for the case of programs of type control,
called csbis is shown in ﬁgure 8.
The predicate cqsbis deﬁnes quasi-strong bisimulations for
controlled thread systems. (The deﬁnition is analogous to
the deﬁnition of quasi-strong bisimulation for sequential pro-
grams shown in ﬁgure 7.) It is easy to prove that a strong
bisimulation is also a quasi-strong bisimulation.
lemma csbis-is-cqsbis: csbis R =⇒ cqsbis R
In order to prove our ﬁnal result, we shall exhibit a strong
bisimulation R such that P R P for all typable controlled
thread systems P .
We proceed as follows: ﬁrst, we exhibit a strong bisimu-
lation S 3 on controlled thread systems. Since this relation
does not have the expected property, one deﬁnes a quasi-
strong bisimulation S 4 that extends S 3 and enjoys the prop-
erty that P S 4 P for all typable controlled thread systems
P . Finally, we show that S 4 is a strong bisimulation, by pro-
viding a suﬃcient condition for a quasi-strong bisimulation
to be a strong bisimulation, and by showing that S 4 enjoys
this property.
Figure 9 shows the deﬁnition of a relation S 3 on con-
trolled thread systems. For clarity we use two functions,
guard-of-when and seq-of-when, which given a thread return
the boolean expression and sequential program, respectively.
Then, two typable controlled thread systems U and V sat-
isfy the relation S 3 if they have the same number of threads,
the same scheduler P, which must be a guarded program,
the same (low) guards for each thread and all the sequen-
tial threads satisfy one-to-one a relation, say S, that is a
quasi-strong bisimulation. We prove that the corresponding
relation on conﬁgurations R3 is a strong bisimulation.