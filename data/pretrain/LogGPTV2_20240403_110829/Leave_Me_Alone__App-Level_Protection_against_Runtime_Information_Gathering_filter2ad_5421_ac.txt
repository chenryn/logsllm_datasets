1For example, compared with other IoT systems, Nest includes carefully-
designed protocols to ensure security during the communication among different
sensors and between sensors and the server.
918919
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:04:07 UTC from IEEE Xplore.  Restrictions apply. 
3ULQFLSDODSS
3ULQFLSDOILQLVKHVLWMRE
6HFXULW\5HTXLUHPHQWV
*XDUGLDQ$SS
0RQLWRU
,QIRUPDWLRQ
*DWKHULQJ
$SSV¬∂
,QVWDOOWLPHIHDWXUHV
5XQWLPHIHDWXUHV
'HWHFWRU
5HSRUW6XVSLFLRXV
DSSV
&RQWUROOHU
3HUPLVVLRQV
6LGHFKDQQHOV
3HUPLVVLRQV
6LGHFKDQQHOV
.LOOVXVSLFLRXVDSS
 .LOO
.LOOVXVSLFLRXVDSS
$QDO\VLVUHVXOW
XOW
$QDO\VLV
6XVSLFLRXV$SSV
5HVXPHVXVSLFLRXVDSS

6HFXULW\SROLFLHV
*XDUGLDQ6HUYHU
Fig. 2: Architecture of App Guardian
itself from other apps. Also such protection should not rely on
any change to the Android OS or the app being protected (i.e.,
the principal). This is important for practical adoption of the
new technique. Finally, the overhead of the protection, in terms
of its impact on system performance and other apps‚Äô utility,
should be minimized, which can be achieved through analyzing
the behaviors of apps to close only those indeed suspicious.
This idea has been applied to build our App Guardian, an
app with only normal and dangerous permissions. Its design
is illustrated in Figure 2. SpeciÔ¨Åcally, the app includes three
key components, an app monitor, a suspicious app detector
and an app controller. The monitor collects the features (e.g.,
permissions) of all third-party apps installed on the devices
and during their runtime, keeps a close eye on their behaviors
through periodically sampling those apps‚Äô CPU consumption
and other observable behavior patterns from their side channels.
Such behavior information, together with individual apps‚Äô
features, is passed to the detector for identifying those that
act dangerously according to the security requirements of the
protected app (the principal) and a set of security policies. The
suspicious apps reported are then suspended by the controller
before and throughout the Ward mode, and resumed afterwards.
The controller is also responsible for the safety of Guardian
itself. These components can stand on their own, providing
protection to the mobile user, and in the meantime, they can
also be supported by a server that maintains security policies
for protecting different principals against various threats, and
also analyzes the apps with strong evidence to be illicit under
the device user‚Äôs consent.
For example, consider a hypothetical medical app that
connects to a health device through Bluetooth to collect health
data from a user, and also provides her information about
disease conditions according to the data. Here the principal
(the medical app) needs to be protected on two fronts: the
Bluetooth channel it uses to download data from the device
and its network-data usage that can be exploited to infer the
conditions the user checks. To this end, the Guardian app
monitors all other third-party apps running in the background.
Once the principal is activated, Guardian closes the third-party
processes that look dangerous to the principal (Section III-B),
particularly, those being scheduled in the background with a
high frequency. This is because if such a process was actually
sampling the principal‚Äôs network-data usage at this rate, it
would be able to infer the condition the user is looking
at (Section III-C). Particularly, the apps that change their
scheduling rates, apparently based upon whether the principal
is running are considered to be highly suspicious.
Further, whenever a background app with the Bluetooth
permission is found to consume CPU resources, Guardian
checks whether the Bluetooth service is also active (using
CPU): in this case, the app needs to be stopped too, to protect
the principal‚Äôs data on its Bluetooth device (Section III-C).
Once the principal is switched to the background or other exit
(from the Ward mode) conditions are met, the Guardian app
terminates the principal‚Äôs process and cleans up the cache. After
that, it restores closed third-party apps that need to be resumed
(Section III-B).
In this way, our approach ensures that a RIG app does not
get a chance to collect information from the principal when it
is running in the Ward mode.
Adversary model. The Guardian app can be downloaded
from an app store to provide the device user
immedi-
ate protection of her security-critical apps. To make this
happen,
the user needs to grant Guardian a set of per-
missions, including KILL_BACKGROUND_PROCESSES for
closing other third-party apps, SYSTEM_ALERT_WINDOW
for popping up an alert
to the user, INTERNET for In-
ternet access, GET_TASK for getting top activity and
BIND_NOTIFICATION_LISTENER_SERVICE for control-
ling notiÔ¨Åcations. Also, we only consider the malicious apps
running in the user mode, without any system privileges, as
most real-world Android malware does. Such apps have to
utilize Android shared resources to steal or infer sensitive
information within the protected app. For those with system
privileges, however, they could break Android‚Äôs application
sandbox and circumvent an app-level protection.
B. Safeguarding App at Runtime
At the center of our App Guardian system is suspension and
resumption of suspicious apps, which protects the principal in
the Ward mode. Simple as it appears to be, the approach actually
needs to be carefully designed to address a few technical
challenges, e.g., when to enter the Ward (i.e, to start protection)
and when to leave, how to protect the Guardian app itself, etc.
Here we elaborate how our technique works, and its impact on
the utility of legitimate third-party apps.
Fig. 3: Non-clearable notiÔ¨Åcation of App Guardian
Self protection. Running as an ordinary third-party app, App
Guardian works against the malicious apps that operate on the
same OS level. Most important here is how to protect itself
against the malware‚Äôs attempt to terminate it. For this purpose,
919920
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:04:07 UTC from IEEE Xplore.  Restrictions apply. 
we built Guardian in a way that it cannot be killed by any
third-party app. SpeciÔ¨Åcally, the service of our app is invoked
through startForeground, the API that puts the service
in the perceptible state, though all the user can see is just a
notiÔ¨Åcation posted on the NotiÔ¨Åcation Center of her device
(Figure 3). In this state, the app cannot be stopped by another
app using the KILL_BACKGROUND_PROCESSES permission.
Also, it will not be killed when the system is low on memory,
unless under the extreme condition where the system kills
all apps except system processes and those running in the
foreground to free off memory [25]. Note that in practice, it
is very difÔ¨Åcult for a single app to deplete the memory on
an Android device even in the foreground. SpeciÔ¨Åcally, each
device has a limit on how much memory a foreground app
can use. The baseline speciÔ¨Åed by Android is just 16 MB [26].
In our research, we analyzed Nexus 5 (with 2 GB memory)
and found that this limit has been raised to 192 MB. In a very
rare case, an app could specify largeHeap = "true" in
its manifest Ô¨Åle to ask for maximal 512 MB, still well below
what the OS can offer. Also, this unusual requirement from
an untrusted third party app could raise suspicion. Even in the
case when the Guardian app is indeed about to be killed, its
controller will automatically generate a restart intent, so it is
immediately revived after being stopped.
A malicious app may try to play the same trick to prevent
itself from being stopped. The problem is that this attempt is
highly prominent and extremely rare among legitimate apps
except those with special needs (like Guardian). In our research,
we inspected 475 most popular apps collected from Google
Play and found that only 7, about 1.5%, have this capability.
Among them are 3 launchers (home apps), 2 weather apps
and 2 social-networking apps. If these ‚Äúuntouchable‚Äù apps are
not trusted and also found to behave suspiciously, Guardian
will report it to the user, asking her to stop the service before
running her protected apps.
Monitoring. Once installed, Guardian‚Äôs monitor module Ô¨Årst
scans all existing third-party apps, collecting their information
(e.g., package names, permissions, etc.), to Ô¨Ånd out who those
apps are and what they are capable of. This also happens
whenever a new app is installed, which Guardian is notiÔ¨Åed
(by registering a broadcast receiver and using the Intent
Ô¨Ålter action.PACKAGE_ADDED) and acts on to check the
new app‚Äôs features. Using such information, together with
the security requirements from the principal (Section III-C),
Guardian determines the way each app should be treated.
For example, those on a whitelist are trusted and will not
be tracked while the others, particularly the ones with the
privileges that potentially can do harm to user privacy (e.g.,
the RECORD_AUDIO permission), will be monitored closely
during their execution. The whitelist here includes a set of
popular apps that pass a vetting process the server performs to
detect malicious content or behaviors. In our implementation,
we built the list using the top apps from Google Play, in all
27 categories.
During its operation, Guardian keeps a close eye on
other running apps and continuously assesses their potential
threats to the principal before and during the app‚Äôs execution.
SpeciÔ¨Åcally, we implemented Guardian as a hybrid app, with its
monitor component built with C++ to achieve a high runtime
performance. The monitor continuously inspects untrusted apps‚Äô
proc Ô¨Åles (once per second in our experiment). For this purpose,
the processes of these apps need to be identiÔ¨Åed, which is
achieved as follows. We convert the process identiÔ¨Åers (PID)
of all running processes into their user identiÔ¨Åers (UID) using
stat(), and then remove all system processes (with UIDs
below 10000). Those system apps are only examined by our
app when they operate together with a third-party app under
surveillance: for example, running an audio recording thread
on behalf of the app (Section III-C). Further, the app name of
each process is found from /proc//cmdline and
for the non-system apps, their names are used to check against
the whitelist to Ô¨Ånd out those untrusted. After that, Guardian
works concurrently on all untrusted processes, generating a
thread for each of them.
Entering the Ward. Besides untrusted apps, Guardian also
continuously monitors other system activities related to the app
it protects (the principal) and initiates the whole protection
procedure once an ‚Äúentry‚Äù condition is met for the Ward mode,
where the principal is isolated from untrusted processes. A
typical entry condition is when the principal starts running
in the foreground. This event is detected by the monitor
that keeps track of all newly created processes through
periodically running getRunningTasks. As soon as this
happens, Guardian immediately utilizes its controller to pause
all suspicious background apps. Those apps are identiÔ¨Åed by
the detector according to their behaviors observed from their
side channels and other conditions, which are elaborated in
Section III-C. The idea here is to temporarily stop them to
create a safe environment for the principal to run, and restore
them afterwards. The life cycle of this protection procedure is
illustrated in Figure 4.
g
Fig. 4: The lifecycle of Guardian protection
Suspension and restoration can be easily done on a rooted
phone, when Guardian has a root privilege. In this case, simple
commands kill -STOP  for pausing a process, and
kill -CONT  for resuming the process, will do the
trick. However, most devices are not rooted and the Guardian
app will have nothing but ordinary app‚Äôs privilege to support its
mission. In this case, all we can do is just to close the whole app
package (which may include multiple processes). This is done
through killBackgroundProcesses(PackageName),
when the caller of the function has the KILL_BACKGROUND
_PROCESSES permission (at the dangerous level). This op-
eration is unique since on Linux, a user can only close
her own process, not other users‚Äô. On Android, however,
once an app is switched to the background, oftentimes, it
920921
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:04:07 UTC from IEEE Xplore.  Restrictions apply. 
is considered disposable, and can be terminated anytime when
the system‚Äôs memory runs low. Also, Android provides a
mechanism to let the app to be stopped save its runtime state
(onSaveInstanceState) and restore the state once it is
launched again (onRestoreInstanceState). Therefore,
the impact of this approach on legitimate apps is small, as
demonstrated by a study elaborated later in this section.
SpeciÔ¨Åcally, Android assigns each background process an
oom_adj score, which is used to determine which background
process to kill when the memory runs low. The score ranges
from -17 to 15. The higher the score, more likely the process
having the score is to be terminated. An app, once switched
to the background, its processes typically get 9, which is
given by Android to the programs that ‚Äúcan be killed without
disruption‚Äù [27]. For the third-party app that provides a
persistent background service, its oom_adj score should be 5
or less. We found that almost all such background processes can
be terminated, and all of them keep their states. An exception
is those given a score 2, the privilege level Guardian itself gets.
The apps running at this level are considered perceptible to the
user2, and therefore, can only be terminated by the user. Only a
few legitimate apps acquire this score, 4.42% as we found in our
research (Section IV-B), and many of them need to be trusted
by the user, e.g., keyboards (otherwise, the app can log all the
user‚Äôs inputs). The rest are the 7 apps using foreground services,
as discussed before, and media players that only operate with
this score when music is on. For such an app, Guardian Ô¨Årst
pauses the music and waits for the player‚Äôs score to go up
(and its privilege to go down). Then, if the app still looks
suspicious (Section III-C), it can be suspended just like other
background processes. SpeciÔ¨Åcally, our approach simulates a
user click on the media button: it Ô¨Årst broadcasts an Intent
ACTION_MEDIA_BUTTON with action ACTION_DOWN and
key code KEYCODE_MEDIA_PLAY_PAUSE, and then sends
another one in 50 ms with action ACTION_UP. At this point,
music stops, the player loses its privilege and can be terminated
at anytime.
As discussed before, a typical condition for entering this
Ward is just the launch of the principal. Actually, the user
of Guardian can also specify other conditions to trigger the
whole protection procedure before or after the principal runs
in the foreground. For example, our app can also monitor
the GCM process. Whenever a message comes, apparently
related to the principal according to its feature (i.e., the sizes
of the increments for tcp_snd and tcp_rcv), Guardian can
immediately stop untrusted processes to prevent them from
observing the invocation of the principal. This could make the
adversary difÔ¨Åcult to determine the arrival of an event (a Ô¨Åre
alarm), simply because it cannot conÔ¨Årm that this happens from
the principal‚Äôs operation (Section II-B). Alternatively, Guardian
can register with the principal‚Äôs notiÔ¨Åcation event, using the
BIND_NOTIFICATION_LISTENER_SERVICE permission,
to Ô¨Ånd out when the protected app posts a notiÔ¨Åcation. Once this
happens, our app pauses untrusted processes, checks whether
speaker is mute and if so, re-posts the notiÔ¨Åcation after turning
it on to inform the user of the event (Section IV-A).
Within the Ward, our Guardian app continues to monitor
any new process invoked in the background and any behavior
2An app with a lower score is either system or foreground app.
changes that happen to existing processes. Whenever a process
is found to become suspicious by the monitor and the detector