issue a call to make(chan int) ❸ to create the integer channel. You
then issue multiple concurrent calls to the strlen() function by
using the go keyword ❹, which spins up multiple goroutines.
You pass to the strlen() function two string values, as well as the
channel into which you want the results placed. Lastly, you
read data from the channel by using the child"`
Baz string `xml:"parent>child"`
}
The string values, wrapped in backticks and following the
struct fields, are field tags. Field tags always begin with the
tag name (xml in this case), followed by a colon and the
directive enclosed in double quotes. The directive defines how
the fields should be handled. In this case, you are supplying
directives that declare that Bar should be treated as an attribute
named id, not an element, and that Baz should be found in a
subelement of parent, named child. If you modify the previous
JSON example to now encode the structure as XML, you
would see the following result:
Hello Shabado
The XML encoder reflectively determines the names of
elements, using the tag directives, so each field is handled
according to your needs.
Throughout this book, you’ll see these field tags used for
dealing with other data serialization formats, including ASN.1
and MessagePack. We’ll also discuss some relevant examples
of defining your own custom tags, specifically when you learn
how to handle the Server Message Block (SMB) Protocol.
SUMMARY
In this chapter, you set up your Go environment and learned
about the fundamental aspects of the Go language. This is not
an exhaustive list of all Go’s characteristics; the language is
far too nuanced and large for us to cram it all into a single
chapter. Instead, we included the aspects that will be most
useful in the chapters that follow. We’ll now turn our attention
to practical applications of the language for security
practitioners and hackers. Here we Go!
2
TCP, SCANNERS, AND PROXIES
Let’s begin our practical application of Go with the
Transmission Control Protocol (TCP), the predominant
standard for connection-oriented, reliable communications and
the foundation of modern networking. TCP is everywhere, and
it has well-documented libraries, code samples, and generally
easy-to-understand packet flows. You must understand TCP to
fully evaluate, analyze, query, and manipulate network traffic.
As an attacker, you should understand how TCP works and
be able to develop usable TCP constructs so that you can
identify open/closed ports, recognize potentially errant results
such as false-positives—for example, syn-flood protections—
and bypass egress restrictions through port forwarding. In this
chapter, you’ll learn basic TCP communications in Go; build a
concurrent, properly throttled port scanner; create a TCP proxy
that can be used for port forwarding; and re-create Netcat’s
“gaping security hole” feature.
Entire textbooks have been written to discuss every nuance
of TCP, including packet structure and flow, reliability,
communication reassembly, and more. This level of detail is
beyond the scope of this book. For more details, you should
read The TCP/IP Guide by Charles M. Kozierok (No Starch
Press, 2005).
UNDERSTANDING THE TCP
HANDSHAKE
For those who need a refresher, let’s review the basics. Figure
2-1 shows how TCP uses a handshake process when querying
a port to determine whether the port is open, closed, or
filtered.
Figure 2-1: TCP handshake fundamentals
If the port is open, a three-way handshake takes place.
First, the client sends a syn packet, which signals the
beginning of a communication. The server then responds with
a syn-ack, or acknowledgment of the syn packet it received,
prompting the client to finish with an ack, or acknowledgment
of the server’s response. The transfer of data can then occur. If
the port is closed, the server responds with a rst packet instead
of a syn-ack. If the traffic is being filtered by a firewall, the
client will typically receive no response from the server.
These responses are important to understand when writing
network-based tools. Correlating the output of your tools to
these low-level packet flows will help you validate that you’ve
properly established a network connection and troubleshoot
potential problems. As you’ll see later in this chapter, you can
easily introduce bugs into your code if you fail to allow full
client-server TCP connection handshakes to complete,
resulting in inaccurate or misleading results.
BYPASSING FIREWALLS WITH
PORT FORWARDING
People can configure firewalls to prevent a client from
connecting to certain servers and ports, while allowing access
to others. In some cases, you can circumvent these restrictions
by using an intermediary system to proxy the connection
around or through a firewall, a technique known as port
forwarding.
Many enterprise networks restrict internal assets from
establishing HTTP connections to malicious sites. For this
example, imagine a nefarious site called evil.com. If an
employee attempts to browse evil.com directly, a firewall
blocks the request. However, should an employee own an
external system that’s allowed through the firewall (for
example, stacktitan.com), that employee can leverage the
allowed domain to bounce connections to evil.com. Figure 2-2
illustrates this concept.
Figure 2-1: A TCP proxy
A client connects, through a firewall, to the destination host
stacktitan.com. This host is configured to forward connections
to the host evil.com. While a firewall forbids direct
connections to evil.com, a configuration such as the one shown
here could allow a client to circumvent this protection
mechanism and access evil.com.
You can use port forwarding to exploit several restrictive
network configurations. For example, you could forward
traffic through a jump box to access a segmented network or
access ports bound to restrictive interfaces.
WRITING A TCP SCANNER
One effective way to conceptualize the interaction of TCP
ports is by implementing a port scanner. By writing one, you’ll
observe the steps that occur in a TCP handshake, along with
the effects of encountered state changes, which allow you to
determine whether a TCP port is available or whether it
responds with a closed or filtered state.
Once you’ve written a basic scanner, you’ll write one that’s
faster. A port scanner may scan several ports by using a single
contiguous method; however, this can become time-
consuming when your goal is to scan all 65,535 ports. You’ll
explore how to use concurrency to make an inefficient port
scanner more suitable for larger port-scanning tasks.
You’ll also be able to apply the concurrency patterns that
you’ll learn in this section in many other scenarios, both in this
book and beyond.
Testing for Port Availability
The first step in creating the port scanner is understanding how
to initiate a connection from a client to a server. Throughout
this example, you’ll be connecting to and scanning
scanme.nmap.org, a service run by the Nmap project.1 To do
this, you’ll use Go’s net package: net.Dial(network, address string).
The first argument is a string that identifies the kind of
connection to initiate. This is because Dial isn’t just for TCP; it
can be used for creating connections that use Unix sockets,
UDP, and Layer 4 protocols that exist only in your head (the
authors have been down this road, and suffice it to say, TCP is
very good). There are a few strings you can provide, but for
the sake of brevity, you’ll use the string tcp.
The second argument tells Dial(network, address string) the host
to which you wish to connect. Notice it’s a single string, not a
string and an int. For IPv4/TCP connections, this string will take
the form of host:port. For example, if you wanted to connect to
scanme.nmap.org on TCP port 80, you would supply
scanme.nmap.org:80.
Now you know how to create a connection, but how will
you know if the connection is successful? You’ll do this
through error checking: Dial(network, address string) returns Conn and
error, and error will be nil if the connection is successful. So, to
verify your connection, you just check whether error equals nil.
You now have all the pieces needed to build a single port
scanner, albeit an impolite one. Listing 2-1 shows how to put it
together. (All the code listings at the root location of / exist
under the provided github repo https://github.com/blackhat-
go/bhg/.)
package main
import (
"fmt"
"net"
)
func main() {
_, err := net.Dial("tcp", "scanme.nmap.org:80")
if err == nil {
fmt.Println("Connection successful")
}
}
Listing 2-1: A basic port scanner that scans only one port (/ch-2/dial/main.go)
Run this code. You should see Connection successful, provided
you have access to the great information superhighway.
Performing Nonconcurrent Scanning
Scanning a single port at a time isn’t useful, and it certainly
isn’t efficient. TCP ports range from 1 to 65535; but for
testing, let’s scan ports 1 to 1024. To do this, you can use a for
loop:
for i:=1; i <= 1024; i++ {
for i:=1; i <= 1024; i++ {
}
Now you have an int, but remember, you need a string as
the second argument to Dial(network, address string). There are at
least two ways to convert the integer into a string. One way is
to use the string conversion package, strconv. The other way is
to use Sprintf(format string, a ...interface{}) from the fmt package,
which (similar to its C sibling) returns a string generated from a
format string.
Create a new file with the code in Listing 2-2 and ensure
that both your loop and string generation work. Running this
code should print 1024 lines, but don’t feel obligated to count
them.
package main
import (
"fmt"
)
func main() {
for i := 1; i <= 1024; i++ {
address := fmt.Sprintf("scanme.nmap.org:%d", i)
fmt.Println(address)
}
}
Listing 2-2: Scanning 1024 ports of scanme.nmap.org (/ch-2/tcp-scanner-
slow/main.go)
All that’s left is to plug the address variable from the
previous code example into Dial(network, address string), and
implement the same error checking from the previous section
to test port availability. You should also add some logic to
close the connection if it was successful; that way, connections
aren’t left open. FINishing your connections is just polite. To
do that, you’ll call Close() on Conn. Listing 2-3 shows the
completed port scanner.
package main
import (
"fmt"
"net"
)
func main() {
for i := 1; i <= 1024; i++ {
address := fmt.Sprintf("scanme.nmap.org:%d", i)
conn, err := net.Dial("tcp", address)
if err != nil {
// port is closed or filtered.
continue
}
conn.Close()
fmt.Printf("%d open\n", i)
}
}
Listing 2-3: The completed port scanner (/ch-2/tcp-scanner-slow/main.go)
Compile and execute this code to conduct a light scan
against the target. You should see a couple of open ports.
Performing Concurrent Scanning
The previous scanner scanned multiple ports in a single go
(pun intended). But your goal now is to scan multiple ports
concurrently, which will make your port scanner faster. To do
this, you’ll harness the power of goroutines. Go will let you
create as many goroutines as your system can handle, bound
only by available memory.
The “Too Fast” Scanner Version
The most naive way to create a port scanner that runs
concurrently is to wrap the call to Dial(network, address string) in a
goroutine. In the interest of learning from natural
consequences, create a new file called scan-too-fast.go with
the code in Listing 2-4 and execute it.
package main
import (
"fmt"
"net"
)
func main() {
for i := 1; i <= 1024; i++ {
go func(j int) {
address := fmt.Sprintf("scanme.nmap.org:%d", j)
conn, err := net.Dial("tcp", address)
if err != nil {
return
}
conn.Close()
fmt.Printf("%d open\n", j)
}(i)
}
}
Listing 2-4: A scanner that works too fast (/ch-2/tcp-scanner-too-fast/main.go)
Upon running this code, you should observe the program
exiting almost immediately:
$ time ./tcp-scanner-too-fast
./tcp-scanner-too-fast 0.00s user 0.00s system 90% cpu 0.004 total
The code you just ran launches a single goroutine per
connection, and the main goroutine doesn’t know to wait for
the connection to take place. Therefore, the code completes
and exits as soon as the for loop finishes its iterations, which
may be faster than the network exchange of packets between
your code and the target ports. You may not get accurate
results for ports whose packets were still in-flight.
There are a few ways to fix this. One is to use WaitGroup
from the sync package, which is a thread-safe way to control