但如果yacc文件本身被修改呢？在此状况下，当ui的makefile在运行时，一个正确的
makefile应该知道，编译ui.c之前必须先运行yacc，以便产生解析器和标头。经过递归
式make的分解之后，并不会发生此事，因为用来运行yacc的规则和依存关系被存放
在db的makefile中，而不是放在ui的makefile里。
在此状况下，我们所能做的只是在ui的makefile运行之前，总是先运行db的makefile。
这个较高级的依存关系必须以手动编码。尽管我们的能力足以在makefile的第一个版本
中手动完成此事，但是一般而言，这会存在非常难以维护的问题。当该代码被编写和修
改之后，顶层的makefile将无法正确记录模块间的依存关系。
继续这个例子，如果db中的yacc语法被更新，而且ui的makefile在db的makefile之
前被运行（因为你并非通过顶层的makefile而是直接运行它），那么ui的makefile根本
不可能知道db的makefile中有依存关系尚未被满足（必须运行yacc以便更新头文件）。
在此状况下，ui的makefile将会以旧版的yacc标头来编译它的程序。如果源文件中定
义并引用了新的符号，那么就会发生编译错误的状态。因此，递归式make本来就比单
一makefile还容易出错。
并且在db中引用了标头。现在我们遇到了交互引用的问题。要解决此问题，make可能
需要先进入db以产生yacc标头，然后进入ui以产生RPCstub，接着进人db来编译文
件，最后进人ui以完成编译的程序。为了完成项目中源文件的建立和编译而反复进入各
组件的次数，取决于程序代码的结构以及用来创建它的工具。这类相互引用的问题常见
于复杂的系统中。
在真实世界中的makefile通常没有那么复杂。为了确保所有文件都会被更新，当顶层的
makefile中有命令被执行时，所有下层的makefile都应该被执行。请注意，这正好就是
条件被运行。在比较复杂的状况下，makefile会被反复运行以便在编译之前先完成所有
程序代码的产生动作。通常这种反复运行的做法完全是在浪费时间，不过偶尔还是有此
需要。
---
## Page 137
大型项目的管理
127
避免重复的代码
这个应用程序的目录结构包含了三个程序库，这些程序库的makefile都非常类似。这是
合理的，因为尽管这三个程序库在应用程序中的功能各不相同，但是它们皆产生自类似
的命令。这种将大型项目分解成各个组件的典型做法，将会导致许多类似的makefile以
及大量的重复代码。
跟重复的程序代码-·样，出现重复的makefile代码也是很糟糕的。这会增加软件的维护
成本而且会引发更多缺陷，也会让人更难了解其中的算法以及找到其中的细微变动。所
以我们会尽量避免重复的代码出现在我们的makefile中。达到此目标的最简单的方法就
是将makefile里共同的部分移到一个共同的引l人文件中。
例如，codec的makefile中包含如下的内容：
lib_codec:=libcodec.a
sources
:=codec.c
objects
=$（subst.c,.o,S（sources))
dependencies:= $（subst.c,.d,S（sources))
include_dirs:=..../../include
CPPFLAGS
+=S（addprefix-I，$（include_dirs）)
vpath $.h S(include_dirs)
all:$(lib_codec)
$(lib_codec):$(objects）
.PHONY:clean
clean:
$（RM）s(lib_codec)s（objects)$（dependencies）
ifneq“$（MAKECMDGOALS)"*clean"
include $(dependencies)
endif
.d：&.c
sed's，\(s*\.o\）*:\1$@:，>s@.tmp
mv $@.tmp s@
你可以在db和ui的makefile中看到几乎重复的代码，只有程序库本身的名称以及程序
库所包含的源文件不同而已。当重复的代码被移往common.mk之后，我们就可以把codec
的makefile缩减成下面这样：
library := libcodec.a
sources:= codec.c
include../../common.mk
---
## Page 138
128
第六章
下面就是我们移往common.mk这个共享引l入文件的内容：
MV
:=mv-f
RM
:=rm-f
SED
:= sed
objects
:=$（subst.c,.o,$（sources）)
dependencies:=$（subst .C,.d,S（sources）)
include_dirs:=..../../include
CPPFLAGS
+=$（addprefix-I,S（include_dirs))
vpath &.h $(include_dirs)
.PHONY:1ibrary
1ibrary:S(1ibrary)
$(library):$（objects)
S(AR)S(ARFLAGS)S@ S^
.PHONY:clean
clean:
$（RM）S（objects）S（program）$（1ibrary）$（dependencies)
s(extra_clean)
ifneq*S(MAKECMDGOALS)""clean"
-include $(dependencies)
endif
.c.h：8.y
S(YACC.y)--defines $$@.tmp
S（MV）$θ.tmp $@
include_dirs变量的值，原本在每个makefile中皆不同，现在在每个makefile中都一
样了。这是因为我们对路径做了变更，让所有的程序库使用相同的引入路径。
common.mk文件甚至为程序库的引I入文件使用了默认目标（defaultgoal）。原本的
makefile使用的是al1这个默认目标。对那些需要为它们的默认目标指定不同必要条件
的非程序库的makefile来说，这将会引发某些问题。所以common.mk会使用library
这个默认目标。
请注意，因为common.mk包含了工作目标，所以在非程序库的makefile中，它必须在默
认目标之后被引人。还请注意，clean的脚本引用了program、library和extra_clean
等变量。在程序库的makefile中，program变量是空的；在程序的makefile中，1ibrary
变量是空的。至于extra_clean变量则是为db的makefile特别加进来的：
---
## Page 139
大型项目的管理
129
library
:=1ibdb.a
sources
:=scanner.cplaylist.c
extra_clean := S(sources) playlist.h
.SECONDARY:playlist.C playlist.h scanner.C
include../../common.mk
使用以上所提到的技术，将可让重复的代码减到最少。当有更多的makefile代码被移到
共同的makefile中时，它将会逐渐成为整个项目通用的makefile。当你要针对每个目录
修改这个通用的makefile时，make变量以及用户自定义函数可作为你的自定义点
(customization point)。
非递归式make
就算不使用递归式make的技术也可以管理具有多个目录的项目。此处的差别在于
makefile所操作的源文件存放在多个目录中。为了适应这样的布局方式，当引用到子目
录里的文件时，文件名称中必须包含（绝对或相对）路径。
通常，用来管理大型项目的makefile具有许多工作目标，项目中的每个模块各一个。以
我们的mp3player为例，每个程序库以及每个应用程序都需要一个工作目标。对于模块
的集合，比如所有程序库的集合，使用假想工作目标也很有用。makefile的默认目标通
常就是建立所有的工作目标，以及建立说明文件与运行测试程序。
非递归式（nonrecursive）make的最直接用法，就是在单一的makefile中包含工作目标、
目标文件引用以及依存关系。这么做通常无法满足熟悉递归式make的开发者，因为目
录里文件的相关信息被集中放在单一文件中，然而源文件本身却分布在文件系统各处。
为了解决这个问题，Miller的文章对非递归式make提供了以下建议：为每个目录使用
一个内含文件列表和模块专属规则的make引人文件，并在顶层makefile中引l人这些下
层的makefile。
在例6-1中可以看到mp3player的makefile从每个子目录引入模块层的makefile。在例
6-2中可以看到一个模块层的引人文件。
例6-1：一个非递归的makefile
到每个模块收集这四个变量的信息
#初始设定这四个变量为简单变量
swexbod
sources
1=
libraries
：=
extra_clean:=
objects
=S(subst .c,.o,S（sources))
dependencies =S（subst.c,.d,$（sources))
---
## Page 140
130
第六章
include_dirs :=lib include
CPPFLAGS
+=S（addprefix -I.S（include_dirs))
vpath &.h $（include_dirs)
MV：=mv-f
RM
=rm-f
SED := sed
all:
include 1ib/codec/module.mk
include1ib/db/module.mk
include 1ib/ui/module.mk
include app/player/module.mk
.PHONY: a11
all:$(programs)
.PHONY:1ibraries
libraries:$(libraries)
.PHONY:clean
clean:
$（RM）S（objects)$(programs)s（libraries）\
S（dependencies）$（extra_clean)
ifneg *S（MAKECMDGOALS)""clean"
include S(dependencies)
endif
8.c8.h：8.y
$（YACC.y)--defines $$@.tmp
$（MV）$@.tmp $@
例6-2：非递归的makefile的lib/codec引入文件
local_dir:=1ib/codec
local_lib:=$（local_dir)/libcodec.a
1ocal_src:=$（addprefix $(1ocal_dir)/,codec.c)
local_objs := $（subst .c,.o,S(local_src))
1ibraries+= $（local_lib)
sources
+=$（1ocal_src)
$(local_1ib):$（1ocal_objs)
S(AR)S（ARFLAGS)$@ $
因此，模块特有的信息会被包含在模块目录中的引人文件里。顶层的makefile只会包含
模块列表以及include指令。让我们进一步研究makefile和module.mk。
---
## Page 141
大型项目的管理
131
每个module.mk引l人文件会将本地的程序库名称添加到libraries变量中，以及将本地
的源文件添加到sources变量中。具local_前缀的变量用来保存常数或用来避免重复
求值动作。请注意，每个引人文件都会重复使用具1oca1_前缀的相同变量名称，因此，
它会使用简单变量（以：=赋值的变量）而不会使用递归变量。这样，当这些makefile被
组合在一起时，才不会对同名的变量造成影响。程序库名称以及源文件会使用相对路径，
正如稍早所说的。最后，引人文件定义了一个用来更薪本地程序库的规则。在这个规则
中使用具1oca1_前缀的变量一点问题也没有，因为规则中的工作目标部分以及必要条
件部分都会立即进行求值动作。
在顶层的makefile中，前四行所定义的变量是用来收集每个模块专属的文件信息。这些
变量必须是简单变量，因为每个模块将会以相同的本地变量名称对它们进行添加的动作：
1ocal_src：= $（addprefix S(local_dir)/,codec.c）
sources+= s(local_src)
如果有一个递归变量被用于sources，那么它最终的值只会是local_src反复出现的
最后的值。请注意，即使要将这些简单变量初始化为空值，也要明确地进行赋值动作，
因为任何未赋值的变量在默认情况下会被视为递归的形式。
下一个部分，是从sources变量中找出自标文件列表objects以及依存文件列表。请
注意，这两个变量是递归的形式。因为当make读到该处时，sources变量是空的，直
到稍后make读进引l人文件后sources变量才会有值。在这个makefile中，虽然把这
些变量的定义移到引入文件的后面并且变为简单变量是绝对可行的，不过若能集中存放
这些基本的文件列表（例如sources、libraries、objects），可让makefile变得易于
了解以及符合实际需要。然而，变量之间的交互引用则需要使用递归变量。
接下来，为了处理C语言的引人文件，我们会设定CPPFLAGS。这让编译器能够找到头
文件。设定CPPFLAGS的时候我们会使用附加运算符，因为我们并不知道变量的值是否
真的是空的，它可能会被设定成命令行选项、环境变量或是其他的make结构。Vpath
指令可让make找到放在其他目录里的头文件。include_dirs变量可用来避免引l人文
件列表中出现重复的项目。
为mv、rm和sed定义变量可避免将程序的路径名称固定在makefile里。注意变量的大
小写。我们将会依照make在线手册所建议的惯例：在makefile内部设定的变量使用小
写：能够由命令行来设定的变量使用大写。
事情越来越有趣了。接着，我们想要以具体规则al1作为默认目标。麻烦的是，al1的
在读取模块引人文件的时候设定的。所以，我们必须在make读取引人文件之前先定义
---
## Page 142
132
第六章
a11工作自标。可惜，被引入的模块包含了工作目标，其中第一个工作目标将会被视为
值的自标。解决此问题的方法是先不要为a11工作目标指定必要条件，等到取得引入文
件之后，再为a11指定必要条件。
这个makefile的其余部分就是你在前一个例子所看到的内容，不过你现在应该注意