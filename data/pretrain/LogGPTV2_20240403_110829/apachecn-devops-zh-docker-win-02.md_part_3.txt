Dockerfile 语法非常简单。您已经看到了`FROM`、`COPY`、`USER`、`RUN`和`CMD`，这些都足以打包一个基本的应用作为容器运行。对于真实世界的映像，你需要做的不仅仅是这些，还有三个关键的说明需要理解。
这里有一个简单静态网站的 Dockerfile 它使用**互联网信息服务** ( **IIS** )并在默认网站上提供一个 HTML 页面，其中显示了一些基本细节:
```
# escape=`
FROM mcr.microsoft.com/windows/servercore/iis:windowsservercore-ltsc2019
SHELL ["powershell"]
ARG ENV_NAME=DEV
EXPOSE 80
COPY template.html C:\template.html
RUN (Get-Content -Raw -Path C:\template.html) `
 -replace '{hostname}', [Environment]::MachineName `
 -replace '{environment}', [Environment]::GetEnvironmentVariable('ENV_NAME') `
 | Set-Content -Path C:\inetpub\wwwroot\index.html
```
这个 Dockerfile 以不同的方式开始，使用`escape`指令。这告诉 Docker 对转义字符使用倒勾```选项，将命令拆分到多行，而不是默认的反斜杠`\`选项。有了这个转义指令，我可以在文件路径中使用反斜杠，使用倒勾来拆分长的 PowerShell 命令，这对于 Windows 用户来说更自然。
基础镜像为`microsoft/iis`，是已经设置了 IIS 的微软 Windows Server Core 镜像。我将一个 HTML 模板文件从 Docker 构建上下文复制到根文件夹中。然后我运行一个 PowerShell 命令来更新模板文件的内容，并将其保存在 IIS 的默认网站位置。
在这个 Dockerfile 中，我使用了三个新指令:
*   `SHELL`指定在`RUN`命令中使用的命令行。默认为`cmd`，切换到`powershell`。
*   `ARG`使用默认值指定要在映像中使用的构建参数。
*   `EXPOSE`将在映像中提供一个端口，这样映像中的容器就可以从主机发送流量。
这个静态网站有一个单独的主页，它告诉你发送响应的服务器的名称，以及页面标题中的环境名称。HTML 模板文件中有主机名和环境名的占位符。`RUN`命令执行 PowerShell 脚本读取文件内容，用实际主机名和环境值替换占位符，然后将内容写出。
容器在一个隔离的空间中运行，只有当映像明确地使端口可供使用时，主机才能将网络流量发送到容器中。那是`EXPOSE`指令，就像一个很简单的防火墙；您使用它来公开您的应用正在监听的端口。当您从该映像运行一个容器时，端口`80`可用于发布，因此 Docker 可以从该容器服务网络流量。
我可以用通常的方式构建这个映像，并使用 Dockerfile 中指定的`ARG`命令在构建时用`--build-arg`选项覆盖默认值:
```
docker image build --build-arg ENV_NAME=TEST --tag dockeronwindows/ch02-static-website:2e .
```
Docker 处理新指令的方式与您已经看到的相同:它从栈中的前一个映像创建一个新的中间容器，执行指令，并从容器中提取一个新的映像层。构建完成后，我有了一个新的映像，可以运行它来启动静态 web 服务器:
```
> docker container run --detach --publish 8081:80 dockeronwindows/ch02-static-website:2e
6e3df776cb0c644d0a8965eaef86e377f8ebe036e99961a0621dcb7912d96980
```
这是一个分离的容器，因此它在后台运行，并且`--publish`选项使容器中的端口`80`可供主机使用。已发布的端口意味着进入主机的流量可以被 Docker 定向到容器中。我已经指定主机上的港口`8081`应该映射到容器上的港口`80`。
您也可以让 Docker 在主机上选择一个随机端口，并使用`port`命令列出容器公开了哪些端口，以及它们在主机上的发布位置:
```
> docker container port 6e
80/tcp -> 0.0.0.0:8081
```
现在我可以浏览到我机器上的端口`8081`，看到容器内部运行的 IIS 的响应，显示出主机名，实际上是容器 ID，标题栏中是环境的名称:
![](img/76a58414-9209-4783-a22d-ef44c904ef3b.png)
环境名称只是一个文本描述，但是来自参数的值被传递给`docker image build`命令，该命令覆盖 Dockerfile 中`ARG`指令的默认值。主机名应该显示容器标识，但是当前的实现有问题。
在网页上，主机名以`bf37`开头，但我的容器 ID 实际上以`6e3d`开头。为了理解为什么显示的 ID 不是运行容器的实际 ID，我将再次查看在映像构建期间使用的临时容器。
# 了解临时容器和映像状态
我的网站容器有一个以`6e3d`开头的 ID，这是容器内部的应用应该看到的主机名，但这不是网站宣称的。那么，哪里出了问题？请记住，Docker 在临时的中间容器中执行每个构建指令。
生成 HTML 的`RUN`指令运行在一个临时容器中，所以 PowerShell 脚本在 HTML 文件中写了*那个*容器的 ID 作为主机名；这就是以`bf37`开头的容器 ID 的来源。Docker 移除了中间容器，但是它创建的 HTML 文件仍然保留在映像中。
这是一个重要的概念:当您构建 Docker 映像时，指令在临时容器中执行。容器会被移除，但是它们所写的状态会保留在最终的映像中，并且会出现在您从该映像运行的任何容器中。如果我从我的网站映像中运行多个容器，它们都将显示 HTML 文件中相同的主机名，因为它保存在映像中，由所有容器共享。
当然，您也可以将状态存储在单独的容器中，这不是映像的一部分，因此它不会在容器之间共享。我现在将看看如何在 Docker 中处理数据，然后用一个真实的 Dockerfile 示例来结束这一章。
# 使用 Docker 映像和容器中的数据
在 Docker 容器中运行的应用会看到一个文件系统，它们可以按照操作系统通常的方式读写该文件系统。容器看到的是一个文件系统驱动器，但它实际上是一个虚拟文件系统，底层数据可能位于许多不同的物理位置。
容器可以在其`C`驱动器上访问的文件实际上可以存储在映像层、容器自己的存储层或映射到主机上某个位置的卷中。Docker 将所有这些位置合并到一个虚拟文件系统中。
# 分层数据和虚拟 c 盘
虚拟文件系统是 Docker 如何获取一组物理映像层并将它们视为一个逻辑容器映像。映像层作为文件系统的只读部分安装在一个容器中，因此它们不能被更改，这就是它们可以被许多容器安全共享的方式。
每个容器在所有只读层之上都有自己的可写层，因此每个容器都可以修改自己的数据，而不会影响任何其他容器:
![](img/e5203dc0-e4fa-4e26-a79f-6665788e9d60.png)
该图显示了从同一映像运行的两个容器。映像(1)在物理上由许多层组成:一层由 Dockerfile 中的每个指令构建而成。这两个容器(2 和 3)在运行时使用映像中的相同层，但是它们都有自己独立的可写层。
Docker 向容器呈现一个文件系统。图层和只读基础图层的概念是隐藏的，您的容器只是读取和写入数据，就好像它有一个完整的本机文件系统，只有一个驱动器。如果在构建 Docker 映像时创建文件，然后在容器内编辑该文件，Docker 实际上会在容器的可写层中创建已更改文件的副本，并隐藏原始只读文件。所以容器有一个文件的编辑副本，但是映像中的原始文件没有改变。
您可以通过创建一些简单的映像来看到这一点，这些映像包含不同层中的数据。`dockeronwindows/ch02-fs-1:2e`映像的 Dockerfile 使用 Nano Server 作为基础映像，创建一个目录，并向其中写入一个文件:
```
# escape=`
FROM mcr.microsoft.com/windows/nanoserver:1809
RUN md c:\data & `
    echo 'from image 1' > c:\data\file1.txt 
```
`dockeronwindows/ch02-fs-2:2e`映像的 Dockerfile 基于该映像创建一个映像，并向数据目录添加第二个文件:
```
FROM dockeronwindows/ch02-fs-1:2e
RUN echo 'from image 2' > c:\data\file2.txt 
```
There's nothing special about *base* images; any image can be used in the `FROM` instruction for a new image. It can be an official image curated on Docker Hub, a commercial image from a private registry, a local image built from scratch, or an image that is many levels deep in a hierarchy.
我将构建这两个映像并从`dockeronwindows/ch02-fs-2:2e`运行一个交互式容器，这样我就可以查看`C`驱动器上的文件。这个命令启动一个容器，并给它一个显式名称，`c1`，这样我就可以在不使用随机容器标识的情况下使用它:
```
docker container run -it --name c1 dockeronwindows/ch02-fs-2:2e 
```
Many options in the Docker commands have short and long forms. The long form starts with two dashes, like `--interactive`. The short form is a single letter and starts with a single dash, like `-i`. Short tags can be combined, so `-it` is equivalent to `-i -t`, which is equivalent to `--interactive --tty`. Run `docker --help` to navigate the commands and their options.
Nano Server 是一个最小的操作系统，是为在容器中运行应用而构建的。它不是 Windows 的完整版本，不能在虚拟机或物理机上运行 Nano Server 作为操作系统，也不能在 Nano Server 容器中运行所有 Windows 应用。基本映像故意很小，甚至没有包含 PowerShell 来保持表面区域向下，这意味着您需要的更新更少，潜在的攻击向量也更少。
您需要刷掉旧的 DOS 命令来使用纳米服务器容器。`dir`列出容器内的目录内容:
```
C:\>dir C:\data
 Volume in drive C has no label.
 Volume Serial Number is BC8F-B36C
 Directory of C:\data
02/06/2019  11:00 AM              .
02/06/2019  11:00 AM              ..
02/06/2019  11:00 AM                17 file1.txt
02/06/2019  11:00 AM                17 file2.txt 
```
这两个文件都在`C:\data`目录下，供容器使用；第一个文件位于`ch02-fs-1:2e`映像的图层中，第二个文件位于`ch02-fs-2:2e`映像的图层中。`dir`可执行文件可从基础 Nano Server 映像中的另一层获得，容器以相同的方式查看它们。
我将在一个现有文件中添加更多的文本，并在`c1`容器中创建新文件:
```
C:\>echo ' * ADDITIONAL * ' >> c:\data\file2.txt
C:\>echo 'New!' > c:\data\file3.txt
C:\>dir C:\data
 Volume in drive C has no label.
 Volume Serial Number is BC8F-B36C
 Directory of C:\data
02/06/2019  01:10 PM              .
02/06/2019  01:10 PM              ..
02/06/2019  11:00 AM                17 file1.txt
02/06/2019  01:10 PM                38 file2.txt
02/06/2019  01:10 PM                 9 file3.txt 
```
从文件列表中可以看到映像层的`file2.txt`已经被修改，并且有一个新的文件`file3.txt`。现在我将退出这个容器，并使用相同的映像创建一个新的容器:
```
C:\> exit
PS> docker container run -it --name c2 dockeronwindows/ch02-fs-2:2e 
```
你期望在这个新容器的`C:\data`目录中看到什么？让我们来看看:
```
C:\>dir C:\data