buffer overflows [31, 35, 74], memory leaks [13, 60], uninitialized
variables [41, 75], information leaks [12, 22, 38], SQL injection and
XSS errors [25, 27, 63, 67], and format string vulnerabilities [55], on
top of various program representations, such as inter-procedural
SSA form [37, 60] abstract syntax tree [72], code property graph [71,
73], and value-flow graph [17, 59], to capture the syntax and/or
semantic properties of a program. Tac, developed on top of SVF [59],
inherits the strengths of traditional static analysis but also addresses
its limitations (e.g., imprecision in handling path-sensitivity, loops,
recursion cycles, arrays and lists) by learning and predicting the
UAF-related aliases using machine learning techniques.
Machine Learning for Bug Detection. In recent years, machine
learning techniques have been shown to be effective in guiding
program analysis for bug detection, such as fault invariant clas-
sification [8] for reflecting important aspects of fault-revealing
properties in a program, dynamic memory leak detection by classi-
fying staleness values of objects [33], defect prediction (e.g., [66]),
detection of malicious Java applets [51], source and sink classifica-
tion for information flow analysis for Android apps [49], automatic
program repair [39, 40], and abstract interpretation [24, 45]. This
paper introduces machine learning techniques to typestate analysis
for detecting temporal memory safety errors, such as UAF.
6 CONCLUSION
We present Tac, a machine-learning-guided static UAF detection
framework that bridges the gap between typestate and pointer
analyses by capturing the correlations between program features
and UAF-related aliases that are often imprecisely answered by the
state-of-the-art pointer analysis. Tac is effective (in terms of finding
5 known CVE vulnerabilities, 1 known bug, and 8 new bugs with
a low false alarm rate) and scalable (in terms of analyzing a large
real-world codebase with 2,098 KLOC in just over 4 hours).
Tac relies on pointer analysis and machine learning. Its accuracy
can be further improved in several ways. First, path-sensitivity can
be strengthened by solving path feasibility more soundly and pre-
cisely. Currently, non-singleton objects are over-approximated to
contain as ⊥ and path conditions are interpreted as non-satisfiable
when the underlying satisfiability solver returns unknown results
(causing infeasible paths to be considered conservatively as feasi-
ble). Second, a more advanced pointer analysis can itself enable
more UAF pairs to be ruled out as UAF bugs. Finally, a better SVM
classifier can be developed by adding more UAF training samples in
real-world programs and extending the set of features introduced.
ACKNOWLEDGMENTS
The authors would like to thank the anonymous reviewers for
their valuable comments. The work is supported by ARC Grants
(DP150102109 and DE170101081) and a CSIRO scholarship.
Figure 9: CVE-2015-1351 and two new bugs in php.
where the object pointed by source is freed at line 350 and then
used inside a function called at line 352. In addition, Tac also finds
two new UAF bugs in zend_persist.c. One is a UAF, where the
object pointed to by source (and also by ast) is freed at line 350
and then accessed at line 154. The other is a double-free bug, as
the same object (pointed by source and ast) is freed at line 350
and then again at line 160. CVE-2015-1351 was fixed in the latest
version by simply moving line 352 to just before line 349. However,
the two new ones remain unfixed.
5 RELATED WORK
UAF Detection. Most of the existing UAF detection techniques
rely on dynamic analysis. CETS [42] enforces full memory safety
by inserting metadata-manipulation instrumentations to perform
runtime checking at pointer dereferences for detecting temporal
memory errors, such as UAF. Undangle [9] applies dynamic taint
analysis on binary code to track and detect UAF bugs based on the
staleness of a pointer. Valgrind [43], as a memory-error debugging
tool, can detect UAF bugs in binary code, at high time and space
overheads. AddresSanitizer [52] performs a lightweight source level
instrumentation by leveraging compiler optimizations, but may
miss UAF bugs due to memory reallocation and unavailable (third-
party) library code during instrumentation.
Static UAF detectors exist but are rare. Model checking (as in, e.g.,
coccinelle [46]) and abstract interpretation (as in, e.g., Clang [4] and
Frama-C [16]) can be configured for UAF detection with user speci-
fied checking rules. However, they suffer from either the scalability
issue or high false negative rates due to the lack of interprocedural
analysis [4] and/or imprecision in handling aliases [46].
UAF Mitigation. Instead of detecting UAF bugs, some efforts
are made on protecting against their exploitation. Cling [3] and
Diehard [6] represent safe memory allocators that restrict memory
reallocation by checking type consistency or approximating infi-
nite heap. In these cases, dereferenced dangling pointers cannot
access memory reallocated to other objects. Thus, UAF exploits
are made harder. Alternatively, FreeSentry [32] and DangNull [32]
track pointer propagation to invalidate all aliased pointers immedi-
ately their pointed-to object is freed, at the expense of high runtime
and memory overheads. Control-flow integrity [2, 20, 44, 62, 64, 80]
//ext/opcache/zend_shared_alloc.c338 void *_zend_shared_memdup(void *source, size_t s){349 if (free_source) {350 free(source);351 }352 zend_shared_alloc_register_xlat_en(source, r);353 return retval;354 }//ext/opcache/zend_persist.c143 zend_ast *zend_persist_ast(zend_ast *ast){153 node =_zend_shared_memdup(ast, size);154 for (i = 0; i children; i++) {155 if ((&node->u.child)[i]) {156 (&node->u.child)[i] = ...;157 }158 }160 free(ast);161 return node;162 }step1step2step3step4step5ACSAC 2017, December 4–8, 2017, San Juan, PR, USA
Hua Yan, Yulei Sui, Shiping Chen, and Jingling Xue
REFERENCES
[1] Juliet Test Suite 1.2. https://samate.nist.gov/SRD/testsuite.php.
[2] Martín Abadi, Mihai Budiu, Ulfar Erlingsson, and Jay Ligatti. 2005. Control-flow
integrity. In CCS’05. 340–353.
In Security’10. 177–192.
[3] Periklis Akritidis. 2010. Cling: a memory allocator to mitigate dangling pointers.
[4] Clang Static Analyzer. http://clang-analyzer.llvm.org/.
[5] Lars Ole Andersen. 1994. Program analysis and specialization for the C program-
ming language. Ph.D. Dissertation. DIKU, University of Copenhagen.
[6] Emery D. Berger and Benjamin G. Zorn. 2006. DieHard: probabilistic memory
safety for unsafe languages. In PLDI’06. 158–168.
[7] Hans-Juergen Boehm. 1993. Space efficient conservative garbage collection. In
PLDI’93. 197–206.
[8] Yuriy Brun and Michael D. Ernst. 2004. Finding latent code errors via machine
learning over program executions. In ICSE’04. 480–490.
[9] Juan Caballero, Gustavo Grieco, Mark Marron, and Antonio Nappa. 2012. Un-
dangle: early detection of dangling pointers in use-after-free and double-free
vulnerabilities. In ISSTA’12. 133–143.
[10] Chih-Chung Chang and Chih-Jen Lin. 2011. LIBSVM: a library for support vector
machines. ACM Transactions on Intelligent Systems and Technology (TIST) 2, 3
(2011), 27.
[11] Haogang Chen, Yandong Mao, Xi Wang, Dong Zhou, Nickolai Zeldovich, and
M Frans Kaashoek. 2011. Linux kernel vulnerabilities: State-of-the-art defenses
and open problems. In APSYS’11. Article No.5.
[12] Qi Alfred Chen, Zhiyun Qian, Yunhan Jack Jia, Yuru Shao, and Zhuoqing Mor-
ley Mao. 2015. Static detection of packet injection vulnerabilities: a case for
identifying attacker-controlled implicit information leaks. In CCS’15. 388–400.
[13] Sigmund Cherem, Lonnie Princehouse, and Radu Rugina. 2007. Practical memory
leak detection using guarded value-flow analysis. In PLDI’07. 480–491.
[14] Mauro Conti, Stephen Crane, Lucas Davi, Michael Franz, Per Larsen, Marco
Negro, Christopher Liebchen, Mohaned Qunaibit, and Ahmad-Reza Sadeghi.
2015. Losing control: on the effectiveness of control-flow integrity under stack
attacks. In CCS’15. 952–963.
[15] Corinna Cortes and Vladimir Vapnik. 1995. Support-vector networks. Machine
learning 20, 3 (1995), 273–297.
[16] Pascal Cuoq, Florent Kirchner, Nikolai Kosmatov, Virgile Prevosto, Julien Signoles,
and Boris Yakobowski. Frama-C. In SEFM’12. 233–247.
[17] Manuvir Das, Sorin Lerner, and Mark Seigle. 2002. ESP: path-sensitive program
verification in polynomial time. In PLDI’02. 57–68.
TACAS’08. 337–340.
[18] Leonardo De Moura and Nikolaj Bjørner. 2008. Z3: an efficient SMT solver. In
[19] Nelson Elhage. 2011. Virtunoid: a KVM guest → host privilege, escalation exploit.
[20] Xiaokang Fan, Yulei Sui, Xiangke Liao, and Jingling Xue. 2017. Boosting the
Precision of Virtual Call Integrity Protection with Partial Pointer Analysis for
C++. In ISSTA’17. 329–340.
Black Hat USA 2011 (2011).
[21] Stephen J Fink, Eran Yahav, Nurit Dor, G Ramalingam, and Emmanuel Geay. 2008.
Effective typestate verification in the presence of aliasing. ACM Transactions on
Software Engineering and Methodology (TOSEM) 17, 2 (2008), 9.
[22] Michael Gordon, Deokhwan Kim, Jeff Perkins, Limei Gilham, Nguyen Nguyen,
and Martin Rinard. 2015. Information Flow Analysis of Android Applications in
DroidSafe. In NDSS’15.
[23] Ben Hardekopf and Calvin Lin. 2011. Flow-sensitive pointer analysis for millions
of lines of code. In CGO’11. 289–298.
[24] Kihong Heo, Hakjoo Oh, and Kwangkeun Yi. 2017. Machine-Learning-Guided
Selectively Unsound Static Analysis. In ICSE’17. 519–529.
[25] Nenad Jovanovic, Christopher Kruegel, and Engin Kirda. 2006. Pixy: a static
analysis tool for detecting web application vulnerabilities. In SP’06. 258–263.
[26] S Sathiya Keerthi and Chih-Jen Lin. 2003. Asymptotic behaviors of support vector
machines with Gaussian kernel. Neural computation 15, 7 (2003), 1667–1689.
[27] Adam Kieyzun, Philip J Guo, Karthick Jayaraman, and Michael D Ernst. 2009.
Automatic creation of SQL injection and cross-site scripting attacks. In ICSE’09.
199–209.
[28] William Landi. 1992. Undecidability of static analysis. ACM Letters on Program-
ming Languages and Systems (LOPLAS) 1, 4 (1992), 323–337.
[29] William Landi and Barbara G Ryder. 1992. A safe approximate algorithm for
interprocedural aliasing. In PLDI’92. 235–248.
[30] Chris Lattner and Vikram Adve. 2004. LLVM: a compilation framework for
lifelong program analysis & transformation. In CGO’04.
[31] Wei Le and Mary Lou Soffa. 2008. Marple: a demand-driven path-sensitive buffer
overflow detector. In FSE’08. 272–282.
[32] Byoungyoung Lee, Chengyu Song, Yeongjin Jang, Tielei Wang, Taesoo Kim,
Long Lu, and Wenke Lee. 2015. Preventing use-after-free with dangling pointers
nullification.. In NDSS’15.
[33] Sangho Lee, Changhee Jung, and Santosh Pande. 2014. Detecting memory leaks
through introspective dynamic behavior modelling using machine learning. In
ICSE’14. 814–824.
[34] Ondrej Lhoták and Kwok-Chiang Andrew Chung. 2011. Points-to analysis with
efficient strong updates. In POPL’11. 3–16.
[35] Lian Li, Cristina Cifuentes, and Nathan Keynes. 2010. Practical and effective
symbolic analysis for buffer overflow detection. In FSE’10. 317–326.
[36] Hsuan-Tien Lin and Chih-Jen Lin. 2003. A study on sigmoid kernels for SVM
and the training of non-PSD kernels by SMO-type methods. Technical Report.
Department of Computer Science, National Taiwan University.
[37] Benjamin Livshits and Monica S Lam. 2003. Tracking pointers with path and
context sensitivity for bug detection in C programs. In FSE’03. 317–326.
[38] Benjamin Livshits, Aditya V Nori, Sriram K Rajamani, and Anindya Banerjee.
2009. Merlin: specification inference for explicit information flow problems. In
PLDI’09. 75–86.
[39] Fan Long and Martin Rinard. 2016. An analysis of the search spaces for generate
and validate patch generation systems. In ICSE’16. 702–713.
[40] Fan Long and Martin Rinard. 2016. Automatic patch generation by learning
correct code. In POPL’16. 298–312.
[41] Kangjie Lu, Chengyu Song, Taesoo Kim, and Wenke Lee. 2016. UniSan: Proactive
kernel memory initialization to eliminate data leakages. In CCS’16. 920–932.
[42] Santosh Nagarakatte, Jianzhou Zhao, Milo MK Martin, and Steve Zdancewic.
2010. CETS: compiler enforced temporal safety for C. In ISMM’10. 31–40.
[43] Nicholas Nethercote and Julian Seward. 2007. Valgrind: a framework for heavy-
weight dynamic binary instrumentation. In PLDI’07. 89–100.
[44] Ben Niu and Gang Tan. 2015. Per-input control-flow integrity. In CCS’15. 914–926.
[45] Hakjoo Oh, Hongseok Yang, and Kwangkeun Yi. 2015. Learning a strategy for
adapting a program analysis via bayesian optimisation. In OOPSLA’15. 572–588.
[46] Mads Chr Olesen, René Rydhof Hansen, Julia L Lawall, and Nicolas Palix. 2014.
Coccinelle: tool support for automated CERT C secure coding standard certifica-
tion. Science of Computer Programming 91 (2014), 141–160.
[47] Jannik Pewny and Thorsten Holz. 2016. EvilCoder: automated bug insertion. In
ACSAC’16. 214–225.
[48] Ganesan Ramalingam. 1994. The undecidability of aliasing. ACM Transactions
on Programming Languages and Systems (TOPLAS) 16, 5 (1994), 1467–1471.
[49] Siegfried Rasthofer, Steven Arzt, and Eric Bodden. 2014. A machine-learning
approach for classifying and categorizing android sources and sinks.. In NDSS’14.
[50] Thomas Reps, Susan Horwitz, and Mooly Sagiv. 1995. Precise interprocedural
dataflow analysis via graph reachability. In POPL’95. 49–61.
[51] Johannes Schlumberger, Christopher Kruegel, and Giovanni Vigna. 2012. Jarhead:
analysis and detection of malicious java applets. In ACSAC’12. 249–257.
[52] Konstantin Serebryany, Derek Bruening, Alexander Potapenko, and Dmitriy
Vyukov. 2012. AddressSanitizer: a fast address sanity checker. In ATC’12. 309–
318.
[53] Fermin J Serna. 2012. The info leak era on software exploitation. Black Hat USA
[54] Lei Shang, Xinwei Xie, and Jingling Xue. 2012. On-demand dynamic summary-
based points-to analysis. In CGO’12. 264–274.
[55] Umesh Shankar, Kunal Talwar, Jeffrey S Foster, and David Wagner. 2001. Detecting
format string vulnerabilities with type qualifiers.. In Security’01. 201–220.
[56] Johannes Späth, Lisa Nguyen Quang Do, Karim Ali, and Eric Bodden. 2016.
Boomerang: demand-driven flow-and context-sensitive pointer analysis for Java.
In ECOOP’16. 22:1–22:26.
[57] Robert E Strom and Shaula Yemini. 1986. Typestate: A programming language
concept for enhancing software reliability. IEEE Transactions on Software Engi-
neering (TSE) 1 (1986), 157–171.
[58] Yulei Sui and Jingling Xue. 2016. On-Demand Strong Update Analysis Via Value-
Flow Refinement. In FSE’16. 460–473.
[59] Yulei Sui and Jingling Xue. 2016. SVF: Interprocedural Static Value-Flow Analysis
in LLVM. https://github.com/unsw-corg/SVF. In CC’16. 265–266.
[60] Yulei Sui, Ding Ye, and Jingling Xue. 2012. Static memory leak detection using
full-sparse value-flow analysis. In ISSTA’12. 254–264.
[61] Laszlo Szekeres, Mathias Payer, Tao Wei, and Dawn Song. 2013. Sok: eternal war
in memory. In SP’13. 48–62.
[62] Caroline Tice, Tom Roeder, Peter Collingbourne, Stephen Checkoway, Úlfar
Erlingsson, Luis Lozano, and Geoff Pike. 2014. Enforcing forward-edge control-
flow integrity in GCC & LLVM. In Security’14. 941–955.
[63] Omer Tripp, Marco Pistoia, Stephen J Fink, Manu Sridharan, and Omri Weisman.
2009. TAJ: effective taint analysis of web applications. In PLDI’09. 87–97.
[64] Victor van der Veen, Dennis Andriesse, Enes Göktaş, Ben Gras, Lionel Sambuc,
Asia Slowinska, Herbert Bos, and Cristiano Giuffrida. 2015. Practical context-
sensitive CFI. In CCS’15. 927–940.
[65] Vladimir Vapnik. 2013. The nature of statistical learning theory. Springer science
& business media.
[66] Song Wang, Taiyue Liu, and Lin Tan. 2016. Automatically learning semantic
features for defect prediction. In ICSE’16. 297–308.
[67] Gary Wassermann and Zhendong Su. 2008. Static detection of cross-site scripting
[68] Westley Weimer and George C Necula. 2005. Mining temporal specifications for
vulnerabilities. In ICSE’08. 171–180.
error detection. In TACAS’05. 461–476.
(2012).
Machine-Learning-Guided Typestate Analysis for Static Use-After-Free Detection ACSAC 2017, December 4–8, 2017, San Juan, PR, USA
[69] Wei Xu, Daniel C DuVarney, and R Sekar. 2004. An efficient and backwards-
compatible transformation to ensure memory safety of C programs. In FSE’12.
117–126.
[70] Wen Xu, Juanru Li, Junliang Shu, Wenbo Yang, Tianyi Xie, Yuanyuan Zhang,
and Dawu Gu. 2015. From collision to exploitation: Unleashing use-after-free
vulnerabilities in linux kernel. In CCS’15. 414–425.
[71] Fabian Yamaguchi, Nico Golde, Daniel Arp, and Konrad Rieck. 2014. Modeling
and discovering vulnerabilities with code property graphs. In SP’14. 590–604.
[72] Fabian Yamaguchi, Markus Lottmann, and Konrad Rieck. 2012. Generalized
vulnerability extrapolation using abstract syntax trees. In ACSAC’12. 359–368.
[73] Fabian Yamaguchi, Alwin Maier, Hugo Gascon, and Konrad Rieck. 2015. Auto-
matic inference of search patterns for taint-style vulnerabilities. In SP’15. 797–812.
[74] D. Ye, Y. Su, Y. Sui, and J. Xue. 2014. WPBOUND: Enforcing Spatial Memory
Safety Efficiently at Runtime with Weakest Preconditions. In ISSRE’14. 88–99.
[75] Ding Ye, Yulei Sui, and Jingling Xue. 2014. Accelerating dynamic detection of
uses of undefined values with static value-flow analysis. In CGO’14. 154–164.
[76] Sen Ye, Yulei Sui, and Jingling Xue. 2014. Region-based selective flow-sensitive
[77] Yves Younan. 2015. FreeSentry: protecting against use-after-free vulnerabilities
pointer analysis. In SAS’14. 319–336.
due to dangling pointers. In NDSS’15.
[78] Yves Younan, Wouter Joosen, and Frank Piessens. 2012. Runtime countermeasures
for code injection attacks against C and C++ programs. ACM Computing Surveys
(CSUR) 44, 3 (2012), 17.
[79] Hongtao Yu, Jingling Xue, Wei Huo, Xiaobing Feng, and Zhaoqing Zhang. 2010.
Level by level: making flow-and context-sensitive pointer analysis scalable for
millions of lines of code. In CGO’10. 218–229.
[80] Chao Zhang, Tao Wei, Zhaofeng Chen, Lei Duan, Laszlo Szekeres, Stephen Mc-
Camant, Dong Song, and Wei Zou. 2013. Practical control flow integrity and
randomization for binary executables. In SP’13. 559–573.