m/regex pattern/simx;
108
第3章
www.TopSage.com
---
## Page 125
Python
reobj = re.compile("regex pattern",
re.VERBOSE I re.IGNORECASE 1
re.DOTALL Ire.MULTILINE)
Ruby
代码中的字面正则表达式：
myregexp =/regex pattern/mix;
从用户输人获取的正则表达式（作为一个字符串userinput）：
myregexp = Regexp.new(userinput,
Regexp::EXTENDED or Regexp::IGNORECASE or
Regexp::MULTILINE) ;
讨论
本书中的许多正则表达式，以及你在其他地方看到的正则表达式，都需要使用特定的
正则匹配模式。几乎所有现代正则流派都会支持这4种基本模式。不幸的是，对于实
现这些模式的选项，有一些流派使用了不一致的和让人容易混淆的名称。使用错误的
模式通常会被坏一个正则表达式。
在这个实例中的所有解答会使用编程语言或者正则表达式类所提供的标志或选项
来设置不同的模式。设置模式的另外一种方式是在正则表达式之内使用模式修饰
符。在正则表达式之内的模式修饰符总是会覆盖在正则表达式之外设置的选项或
标志。
.NET
RegexO构造函数会接受一个可选的第二个参数，用来指定正则表达式选项。你可以在
RegexOptions枚举体中找到可用的选项。
宽松排列：RegexOptions.IgnorePatternwhitespace
不区分大小写：RegexOptions.IgnoreCase
点号匹配换行符：RegexOptions.Singleline
脱字符和美元符号匹配换行处：RegexOptions.Multiline
Java
Pattem.compileO类厂会接受一个可选的第二个参数，用来指定正则表达式选项。Pattern
类中定义了几个用来设置不同选项的常量。把它们使用按位或（bitwiseinclusiveor）操
作符组合起来，就可以设置多种不同选项。
宽松排列：Pattern.COMMENTS
不区分大小写：Pattern.CASE_INSENSITIVE |Pattern.UNICODE_CASE
使用正则表达式编程
109
www.TopSage.com
---
## Page 126
点号匹配换行符：Pattern.DOTALL
脱字符和美元符号匹配换行处：Pattern.MULTILINE
对于不区分大小写来说，实际上存在两个选项，而且必须全部设置才能做到完全不区
分大小写。如果只设置了Patterm.CASE_INSENSITIVE，那么只有英语字母A～Z才会
按照不区分大小写进行匹配。如果你两个都设置了，那么所有字母表中的所有字符都会
按照不区分大小写来匹配。不使用Pattermn.UNICODE_CASE的唯一理由可能就是性能，
前提是事先知道你只会处理ASCⅡI文本。当在你的正则表达式内使用模式修饰符的时
候，使用?i)来表示只对ASCⅡI不区分大小写，而用?iu)来表示完全不区分大小写。
JavaScript
在JavaScript中，你可以通过在RegExp字面量之后，也就是在正则表达式结束的正斜
杠之后，添加一个或者多个单字母的标志，以指定正则选项。虽然标志本身只含有一
个字母，但是当在文档中探讨这些标志的时候，它们通常会被写作是/i和/m。在指定正
则表达式模式标志时，则不需要额外的斜杠。
在使用RegExpO构造函数来把字符串编译成正则表达式的时候，你可以传递一个包含
标志的可选的第二个参数给构造函数。这第二个参数应当是一个字符串，其中包含了
你想要设置的选项的字母。不要在该字符事中添加任何斜杠。
宽松排列：JavaScript不支持
不区分大小写：/i
点号匹配换行符：JavaScript不支持
脱字符和美元符号匹配换行处：/m
PHP
实例3.1中讲解了PHP的preg函数类要求字面正则表达式使用两个标点字符来进行
分隔，通常是使用正斜杠，而所有内容都加起来会被格式化为一个字符串字面量。
可以通过在该字符串末尾添加一个或者多个单字符的修饰符指定正则表达式选项。
也就是说，修饰符字母会在终止的正则分隔符之后，但是依然位于字符串的单引号
或双引号之内。虽然标志本身只含有一个字母，而且在正则式和修饰符之间的分隔
符也不一定非要是一个正斜杠，但是当在文档中探讨这些标志的时候，它们通常还
是会被写作x。
宽松排列：/x
不区分大小写：/i
点号匹配换行符：/s
脱字符和美元符号匹配换行处：/m
Perl
你可以通过在模式匹配或替换操作符末尾添加一个或者多个单字符的修饰符来指定正
110第3章
www.TopSage.com
---
## Page 127
则表达式选项。虽然标志本身只含有一个字母，而且在正则式和修饰符之间的分隔符
也不一定非要是一个正斜杠，但是当在文档中探讨这些标志的时候，它们通常还是会
被写作/x。
宽松排列：/x
不区分大小写：/1
点号匹配换行符：/s
脱字符和美元符号匹配换行处：/m
Python
表达式选项。可以通过使用|操作符把在re模块中定义的常量组合起来，构造这个参
数的值。在re模块中的许多其他接受字面正则表达式作为参数的函数同样也会接受正
则表达式选项作为最后一个可选的参数。
正则表达式选项的常量是成对出现的。每个选项都可以使用一个完整名称的常量或者
只是用单个字符来表示。它们的功能则是完全等价的。唯一的区别是，完整名称会使
你的代码对于那些不是非常熟悉正则表达式选项字母的开发者来说更加容易阅读。在
这个小节中列出的基本单字母选项同在Perl中是完全一样的。
宽松排列：re.VERBOSE或re.X
不区分大小写：re.IGNORECASE或re.I
点号匹配换行符：re.DOTALL或re.S
脱字符和美元符号匹配换行处：re.MULTILINE或re.M
Ruby
在Ruby中，你可以通过在Regexp字面量之后，也就是在正则表达式结束的正斜杠之
后，添加一个或者多个单字母的标志，以指定正则选项。虽然标志本身只含有一个字
母，但是当在文档中探讨这些标志的时候，它们通常会被写作是/和/m。在指定正则表
达式模式标志时，则不需要额外的斜杠。
在使用Regexp.newO类厂把字符串编译成正则表达式的时候，你可以传递一个包含标志
的可选的第二个参数给构造函数。这第二个参数应当是：使用nil来关闭所有选项，或
者是由or操作符结合起来的Regexp类中的常量组合。
宽松排列：/r或Regexp：:EXTENDED
不区分大小写：/i或Regexp：：IGNORECASE
点号匹配换行符：/m或Regexp::MULTILINE.Ruby实际上在这里使用“m”和“multi
脱字符和美元符号匹配换行处：在Ruby中，脱字符和美元符号总是会在换行处产生匹配、你无
法关闭这个选项.使用和来匹配目标字符串的开始或结尾。
使用正则表达式编程111
www.TopSage.com
---
## Page 128
语言相关的其他选项
.NET
RegexOptions.ExplicitCapture会把除了命名分组之外的所有分组都变成非捕获分组。使
用这个选项之后，《(group)就与当作点号、脱字符和美元符号的换行符
号。默认来说，所有Unicode换行都会被当作换行符号。
JavaScript
如果想要把一个正则表达式反复应用到同一个字符串之上，例如，遍历所有匹配，或
者查找和替换所有的匹配，而不只是处理第一个匹配，那么你应该使用/g或称“全局
(global)”标志。
PHP
/u选项会告知PCRE把正则表达式和目标字符串都解释为UTF-8字符串。这个修饰符
还会支持Unicode正则标记，例如和\p{L}>。这些在实例2.7中进行了讲解。
如果没有使用这个修饰符，PCRE会把每个字节当作单独的字符，因此Unicode正则标
112第3章
www.TopSage.com
---
## Page 129
记就会产生错误。
U会切换向一个量词添加问号所产生的“贪心”和“懒情”行为表现。通常来说，（.*
是贪心的，而*?>是懒情的。但如果使用了/U之后，<.*是懒情的，而（.*？）是贪心的。
作者强烈建议永远也不要使用这个标志，因为它会让阅读你的代码的程序员感到混淆，
因为/U这个修饰符只有PHP才有，所以很容易被人忽视。另外，如果你在别人的代码
中看到它的话，不要对/U和产生混淆。记住正则修饰符是要区分大小写的。
Perl
如果想要把一个正则表达式反复应用到同一个字符事之上（例如，遍历所有匹配，或
者查找和替换所有的匹配，而不只是处理第一个匹配），那么你应该使用/g（“global"）
标志。
如果要在正则表达式中插入一个变量（例如，m/IamSname/），那么Perl会在每次使用
该正则表达式的时候都重新进行编译，因为Sname的内容可能会发生改变。你可以使
用/o修饰符来避免这种情形。使用m/Iam$name/o，Perl就会只在第一次需要它的时
候编译，而在随后会重复使用前面的编译结果。如果Sname的内容发生改变，那么这
个正则表达式就无法反映它的改变。如果想要知道如何控制正则表达式董新编译的时
机，请参考实例3.3。
Python
Python拥有两个其他的选项，会改变单词边界的含义（参见实例2.6），并改变简写字
符类<w)、（ld）与<s)，以及它们的否定形式（参见实例2.3）的含义。默认来说，这
些记号只能处理ASCII字母、数字和空白。
选项re.LOCALE或re.L会使这些记号依赖于当前的本地设置。然后本地设置会决定哪
些字符会被这些正则记号当作字母、数字和空白。当目标字符串不是一个Unicode字符
串，而且想要让含有读音符号的字母按照本地设置来处理的时候，你就应当使用这个
选项。
选项re.UNICODE或re.U会使这些记号依赖于Unicode标准。上面的这些正则记号会
按照Unicode标准所定义的字母、数字和空白来进行处理。当你要应用正则表达式的目
标字符串是一个Unicode字符事的时候，应当使用这个选项。
Ruby
Regexp.newO类厂会接受一个可选的第3个参数，让你选择正则表达式所支持的字符串
编码。如果不为正则表达式指定一个编码的话，那么它就会使用同你的源代码一样的
编码。在绝大多数情况下，都应当使用源代码的编码。
要想明确地选择一种编码，就可以向这个参数传递一个字符。该参数是不区分大小写
使用正则表达式编程
113
www.TopSage.com
---
## Page 130
的。可选的取值如下。
n
它表示“None（无）”。在字符串中的每个字节都会被当作一个字符。你应当为ASCII
文本使用这个选项。
e
为远东语言采用“EUC”编码。
S
支持日语的“Shift-JIS”编码。
u
支持UTF-8，它支持每个字符使用1～4个字节，并且支持Unicode标准中的所有
语言（其中包括了所有稍微重要的“活”语言）。
当使用一个字面正则表达式的时候，你可以使用修饰符n、/e、/s和u来设置编码格式。
对于单个正则表达式来说，只能使用其中的一个修饰符。它们可以同任意或者所有的x、
/i和/m修饰符一起来使用。
别把Ruby中的/s和Perl、Java或.NET中的/s搞混。在Ruby中，/s
会强制加载Shift-JIS编码。在Perl和大多数其他正则流派中，这个选项
会打开“点号匹配换行符”模式，在Ruby中，后者是用/m来实现的。
参见
在第2章中，我们已经详细讲解了匹配模式的效果。下面这些小节还会讲解在正则表
达式之内如何使用模式修饰符。
宽松排列：实例2.18
不区分大小写：实例2.1的“不区分大小写匹配”小节