out of 53 UB-related CVEs requires tracing 4 or less hops.
Fig. 5: A sanity check which eliminate the overﬂow after it happens
callchain length reaches a limit. We took an empirical approach
to ﬁnd a proper hop limit that allows KUBO to quickly exit from
unfruitful callchain upwalks while not missing real UBs. As
shown in Figure 4, 98% of the UBs in Ssurvey (excluding the
six not triggered by untrusted source) can be triggered on a
callchain involving four or fewer calls. As a result, we use four
as the max number of hops to trace during incremental call
chain upwalk.
G. Post-bug analysis
After ﬁnding a code path through which some userspace
input controls the UB condition (R1), KUBO performs the
post-bug analysis, which ﬁrst checks R2 (the path and UB
conditions are satisﬁable) and then conﬁrms the consequences
of the UB before reporting it as a valid bug. The check on R2
uses standard path-based symbolic execution and SMT-based
constraint solving techniques. The UB consequence check is
described below.
Some UBs, such as divide by zero, can cause imme-
diate consequences, while other UBs might not exhibit the
impact until a later use site of the corrupted value, such as
integer overflow and out-of-bound shift. KUBO
keeps analyzing these consequence-delayed UBs beyond the
value corruption site. This check is needed because we found
many UBs are patched via code inserted after a UB instruction
and before any consequence may occur. Figure 5 shows an
example of a patched UB, where an integer overﬂow can happen
on Line 4, and a patch is added at Line 6. Without the post-bug
analysis, many patched or inconsequential UBs could be falsely
reported as bugs.
For each valid UB (i.e., R1 and R2 are met at the UB
6
1intioctl_preallocate(structfile*filp,void__user*argp),→2{3structspace_resvsr;4...5if(copy_from_user(&sr,argp,sizeof(sr)))6return-EFAULT;7...8sr.l_start+=filp->f_pos;18151081102468101214161820012345Number of CVEsNumber Of HopsSurveyedCVEs1intblk_ioctl_zeroout(structblock_device*bdev,fmode_tmode,unsignedlongarg){,→2uint64_tstart=/*fromuserspace*/3uint64_tlen=/*fromuserspace*/4end=start+len-1;5...6if(endit.cpu.incr;2...3for(i=0;incr=0;incr>>=1,i--){6if(deltait.cpu.expires+=incr;9-timer->it_overrun+=1it_overrun+=1LL<<i;11delta-=incr;12}/*CheckSource*/if(!access_ok(source+dest_offset,count)){IVTVFB_WARN("Invaliduserspacepointer%p\n",source);,→...return-EINVAL;}attack vector
count
ioctl
26
fetch
20
syscall
7
sysctl
3
disk
3
timer
2
network
6
global variable
4
loop
7
TABLE IV: Attack vectors of the collected benchmark. The ﬁrst four vectors directly introduce userspace inputs.
modules
Function
Status
hops
implication
acknowledged
will not ﬁx
OOB Write
User Pointer Overﬂow
#
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
error
u+
u×
enum
u+
u+
array
u+
u+-
s-
trunc
trunc
s+
s+
s+
s+