     push    eax 
     call    DWORD PTR __imp__GetSystemTime@4 
     movzx   ecx, WORD PTR _t$[ebp+12] ; wSecond 
     push    ecx 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 21 章  结  构  体 
311 
     movzx   edx, WORD PTR _t$[ebp+10] ; wMinute 
     push    edx 
     movzx   eax, WORD PTR _t$[ebp+8] ; wHour 
     push    eax 
     movzx   ecx, WORD PTR _t$[ebp+6] ; wDay 
     push    ecx 
     movzx   edx, WORD PTR _t$[ebp+2] ; wMonth 
     push    edx 
     movzx   eax, WORD PTR _t$[ebp] ; wYear 
     push    eax 
     push    OFFSET $SG78811 ; ’%04d-%02d-%02d %02d:%02d:%02d’, 0aH, 00H 
     call    _printf 
     add     esp, 28 
     xor     eax, eax 
     mov     esp, ebp 
     pop     ebp 
     ret     0 
_main   
ENDP 
函数在栈里为这个结构体申请了 16 字节空间。这个结构体由 8 个 WORD 型数据构成，每个 WORD
型数据占用 2 字节，所以整个结构体正好需要 16 字节的存储空间。 
这个结构体的第一个字段是wYear。根据MSDN有关SYSTEMTIME结构体的相关声明
①
21.1.1 OllyDbg 
，在使用
GetSystemTime()函数时，传递给函数的是SYSTEMTIME结构体的指针。但是换个角度看，这也是wYear字
段的指针。GetSystemTime()函数首先会在结构体的首地址写入年份信息，然后再把指针调整 2 个字节并写
入月份信息，如此类推写入全部信息。 
我们使用 MSVC 2010（指定/GS- /MD 选项）编译上述程序，并用 OllyDbg 打开 MSVC 生成的可执行文件。
找到传递给 GetSystemTime()函数的指针地址，然后在数据观察窗口里观察这部分数据。此时数据如图 21.1 所示。 
图 21.1  OllyDbg：执行 GetSystemTime() 
在执行函数时精确的系统时间是“9 december 2014, 22:29:52”
如图 21.2 所示。 
我们在数据窗口看到这个地址开始的 16 字节空间的值是： 
DE 07 0C 00 02 00 09 00 16 00 1D 00 34 00 D4 03 
这段空间的每 2 个字节代表结构体的一个字段。由于采用了小端字节序，所以就同一个 WORD 型数
据而言，数权较小的一个字节在前，数权较大的字节在后。我们将其整理一下，看看它们的实际涵义： 
十六进制数 
十进制含义 
字段名 
0x07DE 
2014 
wYear 
0x000C 
12 
wMonth 
① https://msdn.microsoft.com/en-us/library/ee488017.aspx。 
图 21.2  OllyDbg：printf()函数的输出结果 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
312 
逆向工程权威指南（上册） 
                                        续表 
十六进制数 
十进制含义 
字段名 
0x0002 
2 
wDayOfWeek 
0x0009 
9 
wDay 
0x0016 
22 
wHour 
0x001D 
29 
wMinute 
0x0034 
52 
wSecond 
0x03D4 
980 
wMilliSeconds 
在栈窗口里看到的值与此相同，不过栈窗口以 32 位数据的格式组织数据。 
而后 printf()函数从结构体中获取所需数据，并在屏幕上进行相应输出。 
printf()函数并没有将所有的字段都打印出来。wDayOfWeek 和 wMilliSeconds 都未被输出，但是内存
中确实有它们对应的值。 
21.1.2 以数组替代结构体 
结构体中的各个元素，在内存里依次排列。为了验证它在内存中的存储状况和数组相同，我用数组替
代了 SYSTEMTIME 结构体： 
#include  
#include  
void main()  
{ 
    WORD array[8]; 
    GetSystemTime (array); 
    printf ("%04d-%02d-%02d %02d:%02d:%02d\n", 
        array[0] /* wYear */, array[1] /* wMonth */, array[3] /* wDay */,  
        array[4] /* wHour */, array[5] /* wMinute */, array[6] /* wSecond */); 
    return;  
}; 
编译器会提示警告信息： 
systemtime2.c(7) : warning C4133: ’function’ : incompatible types - from ’WORD [8]’ to ’LPSYSTEMTIME’  
即使如此，MSVC 2010 仍能够进行编译。它生成的代码如下所示。 
指令清单 21.3  Non-optimizing MSVC 2010 
$SG78573 DB      '%04d-%02d-%02d %02d:%02d:%02d', 0aH, 00H 
_array$ = -16;size=16 
_main   PROC 
  push     ebp 
  mov  
ebp, esp 
  sub   
esp, 16 
  lea  
eax, DWORD PTR _array$[ebp] 
  push     eax 
  call     DWORD PTR __imp__GetSystemTime@4 
  movzx    ecx, WORD PTR _array$[ebp+12] ; wSecond 
  push     ecx 
  movzx    edx, WORD PTR _array$[ebp+10] ; wMinute 
  push     edx 
  movzx    eax, WORD PTR _array$[ebp+8] ; wHoure 
  push     eax 
  movzx    ecx, WORD PTR _array$[ebp+6] ; wDay 
  push     ecx 
  movzx    edx, WORD PTR _array$[ebp+2] ; wMonth 
  push     edx 
  movzx    eax, WORD PTR _array$[ebp] ; wYear 
  push     eax 
  push     OFFSET $SG78573 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 21 章  结  构  体 
313 
  call     _printf 
  add      esp, 28 
  xor      eax, eax 
  mov      esp, ebp 
  pop      ebp 
  ret      0 
_main   ENDP 
即使调整了数据类型，编译器生成的程序仍然没有什么变化。 
这个现象说明，即使我们使用数组替代了原有结构体，编译器生成的汇编指令依旧完全相同。仅仅从
汇编指令分析，很难判断出到底源程序使用的是多变量的结构体还是数组。 
好在正常人不会做这种别扭的替换。毕竟结构体的可读性、易用性都比数组强，也方便编程人员替换
结构体中的字段。 
因为这个程序和前面的程序完全相同，本书就不再演示 OllyDbg 的调试过程了。 
21.2 用 malloc()分配结构体的空间 
在某些情况下，使用堆（heap）来存储结构体要比栈（stack）容易一些： 
#include  
#include  
void main()  
{ 
    SYSTEMTIME *t; 
    t=(SYSTEMTIME *)malloc (sizeof (SYSTEMTIME)); 
    GetSystemTime (t); 
    printf ("%04d-%02d-%02d %02d:%02d:%02d\n", 
        t->wYear, t->wMonth, t->wDay, 
        t->wHour, t->wMinute, t->wSecond); 
    free (t); 
    return;  
}; 
现在启用 MSVC 的优化选项/Ox，编译上述程序，得到的代码如下所示。 
指令清单 21.4  Optimizing MSVC 
_main       PROC 
    push   esi 
    push   16 
    call   _malloc 
    add    esp, 4 
    mov    esi, eax 
    push   esi 
    call   DWORD PTR __imp__GetSystemTime@4 
    movzx  eax, WORD PTR [esi+12] ; wSecond 
    movzx  ecx, WORD PTR [esi+10] ; wMinute 
    movzx  edx, WORD PTR [esi+8] ; wHour 
    push   eax 
    movzx  eax, WORD PTR [esi+6] ; wDay 
    push   ecx 
    movzx  ecx, WORD PTR [esi+2] ; wMonth 
    push   edx 
    movzx  edx, WORD PTR [esi] ; wYear 
    push   eax 
    push   ecx 
    push   edx 
    push   OFFSET $SG78833 
    call   _printf 
    push   esi 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
314 
逆向工程权威指南（上册） 
    call   _free 
    add    esp, 32 
    xor    eax, eax 
    pop    esi 
    ret    0 
_main      ENDP 
16 就是 sizeof(SYSTEMTIME)，即 malloc()分配空间的确切大小。malloc()函数根据参数指定的大小分
配一块空间，并把空间的指针传递给 EAX 寄存器。而后 ESI 寄存器获取了这个指针。Win32 的
GetSystemTime()函数把返回值的各个项存储到 esi 指针指向的对应空间里，接下来几个寄存器依次读取这
些返回值并将之依次推送入栈、给 printf()函数调用。 
此处的“MOVZX(Move with Zero eXtent)”是前文没有介绍过的指令。这个指令的作用和 MOVSX（参
见第 14 章）的相似。与 MOVSX 的不同之处是，MOVZX 在进行格式转换的时候会将其他 bit 位清零。因
为 printf()函数需要的数据类型是 32 位整型数据，而我们的结构体 SYSTEMTIME 里对应的字段是 WORD
型数据，所以此处要转换数据类型。WORD 型数据是 16 位无符号数据，因而要把 WORD 型数据照抄到 int
型数据空间的低地址位，并把高地址位（第 16 位到第 31 位）清零。高地址位必须要清零，否则转换的 int
型数据很可能会受到脏数据问题的不良影响。 
本例中，我们可以使用 8 个 WORD 型数组重新构造上述结构体： 
#include  
#include  
void main()  
{ 
    WORD *t; 
    t=(WORD *)malloc (16); 
    GetSystemTime (t); 
    printf ("%04d-%02d-%02d %02d:%02d:%02d\n", 
        t[0] /* wYear */, t[1] /* wMonth */, t[3] /* wDay */, 
        t[4] /* wHour */, t[5] /* wMinute */, t[6] /* wSecond */); 
    free (t); 
    return;  
}; 
使用 MSVC（启用优化选项）编译上述程序，可得到如下所示的代码。 
指令清单 21.5  Optimizing MSVC 
$SG78594 DB  
'%04d-%02d-%02d %02d:%02d:%02d’, 0aH, 00H 
_main   PROC 
  push 
esi 
  push    16 
  call    _malloc 
  add     esp, 4 
  mov     esi, eax 
  push    esi 
  call    DWORD PTR __imp__GetSystemTime@4 
  movzx   eax, WORD PTR [esi+12] 
  movzx   ecx, WORD PTR [esi+10] 
  movzx   edx, WORD PTR [esi+8] 
  push    eax 
  movzx   eax, WORD PTR [esi+6] 
  push    ecx 
  movzx   ecx, WORD PTR [esi+2] 
  push    edx 
  movzx   edx, WORD PTR [esi] 
  push    eax 
  push    ecx 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 21 章  结  构  体 
315 
  push    edx 
  push    OFFSET $SG78594 
  call    _printf 
  push    esi 
  call    _free 
  add     esp, 32 
  xor     eax, eax 
  pop     esi 
  ret     0 
_main   ENDP 
这个代码和结构体生成的代码完全相同。我再次强调，这种“用数组替代结构体”的做法没有什么实
际意义。除非有必要，否则不必做这种替换。 
21.3 UNIX: struct tm 
21.3.1 Linux 
我们研究一下 Linux 源文件 time.h 里的 tm 结构体。 
#include  
#include  
void main() 
{ 
    struct tm t; 
    time_t unix_time; 
    unix_time=time(NULL); 
    localtime_r (&unix_time, &t); 
    printf ("Year: %d\n", t.tm_year+1900); 
    printf ("Month: %d\n", t.tm_mon); 
    printf ("Day: %d\n", t.tm_mday); 
    printf ("Hour: %d\n", t.tm_hour); 
    printf ("Minutes: %d\n", t.tm_min); 
    printf ("Seconds: %d\n", t.tm_sec); 
}; 
使用 GCC 4.4.1 编译，可得如下所示的代码。 
指令清单 21.6  GCC 4.4.1 
main proc  near 
     push     ebp 
     mov      ebp, esp 
     and      esp, 0FFFFFFF0h 
     sub      esp, 40h 
     mov      dword ptr [esp], 0 ; first argument for time() 
     call     time 
     mov      [esp+3Ch], eax 
     lea      eax, [esp+3Ch]  ; take pointer to what time() returned 
     lea      edx, [esp+10h]  ; at ESP+10h struct tm will begin 
     mov      [esp+4], edx    ; pass pointer to the structure begin 
     mov      [esp], eax      ; pass pointer to result of time() 
     call     localtime_r 
     mov      eax, [esp+24h]  ; tm_year 
     lea      edx, [eax+76Ch] ; edx=eax+1900 
     mov      eax, offset format ; "Year: %d\n" 
     mov      [esp+4], edx 
     mov      [esp], eax 
     call     printf 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
316 
逆向工程权威指南（上册） 
     mov      edx, [esp+20h]      ; tm_mon 
     mov      eax, offset aMonthD ; "Month: %d\n" 
     mov      [esp+4], edx 
     mov      [esp], eax 
     call     printf 
     mov      edx, [esp+1Ch]     ; tm_mday 
     mov      eax, offset aDayD  ; "Day: %d\n" 
     mov      [esp+4], edx 
     mov      [esp], eax 
     call     printf 
     mov      edx, [esp+18h]     ; tm_hour 
     mov      eax, offset aHourD ; "Hour: %d\n" 
     mov      [esp+4], edx 
     mov      [esp], eax 
     call     printf 
     mov      edx, [esp+14h]        ; tm_min 
     mov      eax, offset aMinutesD ; "Minutes: %d\n" 
     mov      [esp+4], edx 
     mov      [esp], eax 
     call     printf 
     mov      edx, [esp+10h] 
     mov      eax, offset aSecondsD ; "Seconds: %d\n" 