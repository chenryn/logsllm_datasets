Switch-Port mapped to the VM’s MAC-IP), and no violations
would be reported. Note that migrations themselves cannot
be maliciously orchestrated from one host to another, as that
would entail compromising the network administrator. Further,
while a malicious network entity might attempt to fake a VM
migration, it would be unable to generate a valid sequence
of messages from both source and destination switches in the
absence of an accomplice.
3) Load balancer: Load balancers distribute incoming client
requests across a set of replicated servers to maximize through-
put, minimize response time, and optimize resources. Typi-
cally, clients access the service through a single public IP
address reachable via a gateway, and the load balancer rewrites
the destination IP of the incoming client packets to the
address of the assigned replica server. Similarly, the source
IP of all outgoing response packets are also rewritten to
the public IP address visible to the client. In SDNs, where
load balancing is implemented as a controller module, packet
routing is achieved by installing rules with write actions at
the gateway—OFPAT_SET_NW_DST (for incoming request packets)
and OFPAT_SET_NW_SRC (for outgoing response packets)—before
forwarding. A load-balanced SDN requires no additional pro-
cessing on SPHINX’s end, which treats the load-balanced ﬂows
as unicast ﬂows between the client and the assigned replica.
4) Multicast: Controller applications/modules maintain mul-
ticast groups as multicast trees. Each group has a unique
multicast IP that is used by members to send/receive messages.
Receivers interested in joining/leaving a particular group must
send IGMP messages to the controller, which are forwarded as
PACKET_IN messages for maintenance of multicast groups. Ma-
licious hosts can forge IGMP join/leave requests to multicast
groups leading to DoS for legitimate members. For example, a
malicious host can repeatedly send forged IGMP leave requests
13
on behalf of an unsuspecting host A for multicast group M.
This would result
in the controller accordingly modifying
its multicast
trees by removing A from group M, which
effectively results in DoS, wherein host A can never listen
to communication from M. Similarly, a malicious host B can
send forged IGMP join requests to make the unsuspecting host
A a member of all available multicast groups, which could lead
to DDoS by choking the downlink to A.
We built a multicast module for ODL to control and
manage multicast trees for multicast groups, and subsequently
implemented the attacks described above on vanilla ODL.
SPHINX enhanced ODL is immune to such attacks, since
it veriﬁes each IGMP PACKET_IN on a particular switch by
leveraging its view of the topology to extract the switch-port on
which the request was received. SPHINX then validates if the
host is connected to the particular switch. If the validation fails,
SPHINX raises an alert. SPHINX leverages FLOW_MOD messages
to identify source-based multicast routing trees for different
groups and maintains the corresponding multicast ﬂow graphs.
SPHINX also performs path consistency checks, and periodic
ﬂow consistency checks on the multicast ﬂow graph.
X. DISCUSSION AND FUTURE WORK
LIMITATIONS. SPHINX’s has a few limitations, as it can only
detect tangible side-effects arising from network updates.
(1) SPHINX cannot
identify a malicious ingress or egress
switch in a ﬂow path that adds/drops packets to inﬂuence
the Σ. This limitation is inherent to SPHINX, since it relies
on STATS_REPLY from untrusted switches along the ﬂow path
to generate Σ and detect ﬂow inconsistencies. Speciﬁcally,
SPHINX cannot validate the Σs reported by the ingress or
egress switches in the ﬂow path. However, SPHINX can lever-
age supplementary data from other standard trafﬁc monitoring
techniques such as sFlow or NetFlow to perform validation at
the ingress and egress switches.
(2) SPHINX might miss some transient attacks. A major
challenge in detecting ﬂow inconsistencies arises from the
granularity at which metadata statistics are updated, which
spans a few seconds and is controller dependent. Fixing this
limitation may require changes to the controller to report
ﬂow statistics at ﬁne grained intervals, or require SPHINX to
augment its analysis with ﬁner granularity data from sFlow
or NetFlow to achieve more precision. Alternatively, SPHINX
can also be augmented by making use of network monitoring
frameworks such as Planck [39] and PayLess [23] for greater
accuracy in link utilization measurements.
(3) The accuracy and effectiveness of ﬂow graphs to detect se-
curity violations as described is limited by the lack of realistic
networks available to us for large scale experimentation.
(4) A high value of τ may cause SPHINX to under report
violations, which can be ﬁxed by using ﬂow-speciﬁc τ.
(5) SPHINX cannot detect compromise in packet
However, cryptographic mechanisms can ﬁx this limitation.
FUTURE WORK. SPHINX in its present form does not con-
sider the cases described below.
(1) Flow rule aggregation: Controller modules often ag-
gregate ﬂow rules to conserve switch TCAM. SPHINX, as
integrity.
implemented, requires installation of source/destination based
rules that hamper aggregation. However, SPHINX can easily
be modiﬁed to support aggregated ﬂow rules.
(2) Mixed networks: Real enterprise deployments may have
OpenFlow switches interacting seamlessly with other non-
OpenFlow network entities. We plan to enhance SPHINX to
detect security attacks in such mixed settings as well.
(3) Proactive OpenFlow environment: The attacks as de-
scribed in § III and § VIII assume a reactive OpenFlow setup,
where untrusted switches and hosts may generate malicious
control trafﬁc to elicit detrimental responses from the con-
troller that further poison its view of the network. In a proactive
OpenFlow environment, a malicious controller or applications
can initiate attacks on the SDN. We leave detection of such
proactive attacks for future work.
XI. RELATED WORK
Recent advances in SDN security have primarily focused
on security enforcement frameworks [38], [41], [42], and
realtime veriﬁcation of network constraints [22], [27]–[30],
[34], [37], [44]. To our knowledge, SPHINX is the ﬁrst system
to detect a broad class of attacks in SDNs in realtime, with a
threat model that does not require trusted switches or hosts.
(1) Security enforcement: FORTNOX [38] extends the SDN
controller with a live rule conﬂict detection engine, while
FRESCO [41] provides a security application development
framework to enable modular development of security monitor-
ing and threat detection applications. Both these systems focus
exclusively on threats arising from malicious applications that
may result in the installation of conﬂicting rules. In contrast,
SPHINX’s threat model is different, and can detect a much
broader class of attacks on SDNs.
Avant-guard [42] alters ﬂow management at switch level to
make SDN security applications more scalable and responsive
to dynamic network threats. However, unlike SPHINX, it fo-
cuses mostly on DoS attacks, and requires modiﬁcations to the
OpenFlow protocol. In contrast, SPHINX uses succinct meta-
data to detect a wide array of attacks while being controller
agnostic, and requires no changes to the OpenFlow protocol.
(2) Network veriﬁcation: Concurrent with our work, To-
poGuard [27] is a security extension to SDN controllers that
detects attacks targeted to poison the controllers’ view of
the network topology, by ﬁxing security omissions in the
controllers. In contrast, SPHINX uniﬁes detection of attacks on
network topology and data plane forwarding using ﬂow graphs.
However, SPHINX currently detects attacks within OpenFlow-
based SDNs, while TopoGuard targets mixed networks also.
Natarajan et al. [37] present algorithms to detect conﬂicting
rules in a virtualized OpenFlow network. Xie et al. [44] stati-
cally analyze reachability properties of networks. Anteater [34]
can provably verify the network’s forwarding behavior and thus
determine certain classes of bugs. Like Anteater, Header Space
Analysis (HSA) [29] also leverages static analysis to detect
forwarding and conﬁguration errors. In contrast, SPHINX is
a dynamic system that sits closer to the actual network
operations. SPHINX analyzes OpenFlow control messages in
realtime to build ﬂow graphs, and detects a broad class of
threats arising from untrusted hosts and switches in SDNs.
14
VeriFlow [30] segregates the entire network into classes
with the same forwarding behavior using a multi-dimensional
preﬁx tree. Any network update affecting the forwarding
rules and speciﬁed policies can then be veriﬁed in realtime.
NetPlumber [28] uses HSA incrementally to maintain a de-
pendency graph of update rules to enforce runtime policy
checking. NetPlumber can also verify arbitrary header mod-
iﬁcations, including rewriting and encapsulation. SPHINX is
similar in spirit to both VeriFlow and NetPlumber in that it
leverages packet metadata to construct and analyze the for-
warding state of the network on each update. Like NetPlumber,
SPHINX also provides a policy framework for expressing
constraints on ﬂows. However, both these tools verify network-
wide invariants by examining the ﬂow rules installed by the
controller, and assume the data plane to be free of adversaries.
In contrast, Sphinx makes no such assumptions and analyzes
various switch-controller messages to ensure that the actual
behavior of the network conforms to the desired behavior.
XII. CONCLUSION
We describe SPHINX, a controller agnostic tool that lever-
ages ﬂow graphs to detect security threats on network topology
and data plane forwarding originating within SDNs. We show
that existing controllers are vulnerable to such attacks, and
SPHINX can effectively detect
them in realtime. SPHINX
incrementally builds and updates ﬂow graphs with succinct
metadata for each network ﬂow and uses both deterministic
and probabilistic checks to identify deviant behavior. Our
evaluation shows that SPHINX imposes minimal overheads.
ACKNOWLEDGEMENT
We thank our shepherd, Guofei Gu, and the anonymous
reviewers for their valuable comments. We are also grateful to
Anil Vishnoi, Dhruv Sharma, and Vinod Ganapathy for their
feedback on an earlier draft of the paper.
REFERENCES
[1]
[2]
[3]
[4]
[5]
[6]
[7]
[8]
[9]
[10]
[11]
[12]
[13]
[14]
[15]
[16]
[17]
“ARP poisoning attack,” http://goo.gl/p4AVhf.
“Cbench,” http://www.openﬂowhub.org/display/ﬂoodlightcontroller/
Cbench+(New).
“CRATE datasets,” ftp://download.iwlab.foi.se/dataset.
“Data Set for IMC 2010 Data Center Measurement,”
http://pages.cs.wisc.edu/∼tbenson/IMC10 Data.html.
“Dynamic ARP Inspection,”
http://www.cisco.com/c/en/us/td/docs/switches/lan/catalyst6500/ios/12-
2SX/conﬁguration/guide/book/dynarp.html.
“Fake topology attack,” http://goo.gl/zRG8bz.
“LBNL/ICSI Enterprise Tracing Project,”
http://www.icir.org/enterprise-tracing/.
“Maestro,” https://code.google.com/p/maestro-platform/.
“Mausezahn,” http://www.perihel.at/sec/mz/.
“Mininet,” http://mininet.org/.
“Netty,” http://netty.io/.
“Open DOVE,” https://wiki.opendaylight.org/view/Open DOVE:Main.
“Open vSwitch,” http://openvswitch.org/.
“OpenDaylight,” http://www.opendaylight.org/.
“OpenFlow switch speciﬁcation,”
http://openﬂow.org/documents/openﬂow-spec-v1.1.0.pdf.
“POX,” http://www.noxrepo.org/pox/about-pox/.
“Project Floodlight,” http://www.projectﬂoodlight.org/ﬂoodlight/.
[18]
[19]
“Tcpreplay,” http://tcpreplay.synﬁn.net/.
“VXLAN: A Framework for Overlaying Virtualized Layer 2 Networks
over Layer 3 Networks,”
http://tools.ietf.org/html/draft-mahalingam-dutt-dcops-vxlan-05.
[20] E. Al-Shaer and S. Al-Haj, “FlowChecker: Conﬁguration Analysis and
Veriﬁcation of Federated Openﬂow Infrastructures,” in SafeConﬁg’10.
[21] E. Al-Shaer, W. Marrero, A. El-Atawy, and K. Elbadawi, “Network
Conﬁguration in A Box: Towards End-to-End Veriﬁcation of Network
Reachability and Security,” in ICNP’09.
[22] M. Canini, D. Venzano, P. Pereˇs´ıni, D. Kosti´c, and J. Rexford, “A
NICE Way to Test Openﬂow Applications,” in NSDI’12.
[23] S. Chowdhury, M. Bari, R. Ahmed, and R. Boutaba, “PayLess: A
Low Cost Network Monitoring Framework for Software Deﬁned
Networks,” in IEEE NOMS’14.
[24] N. Feamster and H. Balakrishnan, “Detecting BGP Conﬁguration
Faults with Static Analysis,” in NSDI’05.
[25] N. Foster, R. Harrison, M. J. Freedman, C. Monsanto, J. Rexford,
A. Story, and D. Walker, “Frenetic: A Network Programming
Language,” in ICFP’11.
[26] A. Guha, M. Reitblatt, and N. Foster, “Machine-Veriﬁed Network
Controllers,” in PLDI’13.
[27] S. Hong, L. Xu, H. Wang, and G. Gu, “Poisoning Network Visibility
in Software-Deﬁned Networks: New Attacks and Countermeasures,”
in NDSS’15.
[28] P. Kazemian, M. Chang, H. Zeng, G. Varghese, N. McKeown, and
S. Whyte, “Real Time Network Policy Checking Using Header Space
Analysis,” in NSDI’13.
[29] P. Kazemian, G. Varghese, and N. McKeown, “Header Space
Analysis: Static Checking for Networks,” in NSDI’12.
[30] A. Khurshid, X. Zou, W. Zhou, M. Caesar, and P. B. Godfrey,
“VeriFlow: Verifying Network-wide Invariants in Real Time,” in
NSDI’13.
[31] R. Kloti, “OpenFlow: A Security Analysis,” Master’s thesis, ETH,
Zurich, 2012.
[32] D. Kreutz, F. M. Ramos, and P. Verissimo, “Towards Secure and
Dependable Software-Deﬁned Networks,” in HotSDN’13.
[33] LBNL, “arpwatch,” http://ee.lbl.gov/.
[34] H. Mai, A. Khurshid, R. Agarwal, M. Caesar, P. B. Godfrey, and S. T.
King, “Debugging the Data Plane with Anteater,” in SIGCOMM’11.
[35] N. McKeown, T. Anderson, H. Balakrishnan, G. Parulkar, L. Peterson,
J. Rexford, S. Shenker, and J. Turner, “OpenFlow: Enabling
Innovation in Campus Networks,” SIGCOMM Comput. Commun. Rev.,
April 2008.
[36] C. Monsanto, N. Foster, R. Harrison, and D. Walker, “A Compiler and
Run-time System for Network Programming Languages,” in POPL’12.
[37] S. Natarajan, X. Huang, and T. Wolf, “Efﬁcient Conﬂict Detection in
Flow-Based Virtualized Networks,” ICNC’12.
[38] P. Porras, S. Shin, V. Yegneswaran, M. Fong, M. Tyson, and G. Gu,
[39]
“A Security Enforcement Kernel for OpenFlow Networks,” in
HotSDN’12.
J. Rasley, B. Stephens, C. Dixon, E. Rozner, W. Felter, K. Agarwal,
J. Carter, and R. Fonseca, “Planck: Millisecond-scale Monitoring and
Control for Commodity Networks,” in SIGCOMM’14.
[40] G. P. Reyes, “Security assessment on a VXLAN-based network,”
Master’s thesis, University of Amsterdam, Amsterdam, 2014.
[41] S. Shin, P. Porras, V. Yegneswaran, M. Fong, G. Gu, and M. Tyson,
“FRESCO: Modular Composable Security Services for
Software-Deﬁned Networks,” in NDSS’13.
[42] S. Shin, V. Yegneswaran, P. Porras, and G. Gu, “AVANT-GUARD:
Scalable and Vigilant Switch Flow Management in Software-Deﬁned
Networks,” in CCS’13.
[43] A. Voellmy and P. Hudak, “Nettle: Taking the Sting out of
Programming Network Routers,” in PADL’11.
[44] G. G. Xie, J. Zhan, D. A. Maltz, H. Zhang, A. Greenberg,
G. Hjalmtysson, and J. Rexford, “On Static Reachability Analysis of
IP Networks,” in INFOCOM’05.
15