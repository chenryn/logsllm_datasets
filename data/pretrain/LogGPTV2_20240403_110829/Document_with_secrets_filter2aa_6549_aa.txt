# Document with secrets
Category: Web
## Description
> Part 6 of Imperva's challenge
> 
> To be a good web application penetration tester, you need to notice the small things? What can go wrong when a file is uploaded?
> 
## Solution
The [previous challenge](Bleeding_cloud.md)'s flag has left us with a hint: `docx_are_xml_too_flag6_in_passwd`.
The bug bounty management system offers the ability to upload a report:
![](images/bug_bounty.png)
After clicking the button, a form pops up and allows uploading a file. According to the UI, only `*.docx` files are allowed.
When the report is displayed in the UI, the author name is displayed next to the document name:
```javascript
function populateTable(data) {
    // $('#bugsTable').bootstrapTable({
    //     data: datadata
    // });
    for (var i = 0; i ${docName} by ${creator}`
        }
        var row = $('' + data[i].category + '' + data[i].company + '' + bugDetails + '');
        $('#bugsTable').append(row);
    }
}
```
This information is retrieved from the server side:
```console
root@kali:/media/sf_CTFs/technion/Document_with_secrets# curl 'http://www.vulnet.zone/api/bugs/getBugs.php'   -H 'Connection: keep-alive'   -H 'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36'   -H 'Content-Type: text/plain;charset=UTF-8'   -H 'Accept: */*'   -H 'Origin: http://www.vulnet.zone'   -H 'Referer: http://www.vulnet.zone/welcome.php'   -H 'Accept-Language: en-US,en;q=0.9,he;q=0.8'   -H 'Cookie: cookies_here'   --data-binary '{"id":"320"}'   --compressed   --insecure
{"status":"succeeded","data":[{"category":"Open this select menu","company":"document.getElementById(\"bugsTable\").rows[1].cells[1].innerHTML = document.cookie; ","details":""},{"category":"Open this select menu","company":"Fake Company","details":"http:\/\/www.vulnet.zone:80\/uploads\/test.docx|Fake Author"}]}
```
The hint says that `*.docx` files essentially contain XML files (a `docx` file is just a `zip` file with a different extension and some predefined internal files, some of them are XMLs). It also says that the flag is in `/etc/passwd`. So, it sounds like we should perform some kind of XXE injection to retrieve the flag. Fortunately, [Payload all the Things](https://github.com/swisskyrepo/PayloadsAllTheThings) has some [recipes](https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/XXE%20Injection#xxe-inside-docx-file) for that too.
Let's take a random `docx` file:
```console
root@kali:/media/sf_CTFs/technion/Document_with_secrets/attack# file xxe.docx
xxe.docx: Microsoft Word 2007+
root@kali:/media/sf_CTFs/technion/Document_with_secrets/attack# exiftool xxe.docx | grep Creator
Creator                         : Fake Author
```
This document was created by "Fake Author". Now lets see if we can find out where this data is stored within the `docx` file:
```console
root@kali:/media/sf_CTFs/technion/Document_with_secrets/attack# unzip xxe.docx
Archive:  xxe.docx
  inflating: [Content_Types].xml
  inflating: _rels/.rels
  inflating: word/document.xml
  inflating: word/_rels/document.xml.rels
  inflating: word/theme/theme1.xml
  inflating: docProps/thumbnail.emf
  inflating: word/settings.xml
  inflating: word/styles.xml
  inflating: word/webSettings.xml
  inflating: word/fontTable.xml
  inflating: docProps/core.xml
  inflating: docProps/app.xml
root@kali:/media/sf_CTFs/technion/Document_with_secrets/attack# grep -rnw "Fake Author"