复制继续运行的目的，但其实就是掩耳盗铃，因为此时slave数据已经不一致了。
令“set global sql_slave_skip_counter=1;”跳过并忽略错误，这种方法虽然可以达到让同步
而数据丢失。
接下来要介绍的这3种故障是在HA集群切换时产生的，由于是异步复制，且 sync_
另一种方法就是在主库上MySQLdump导出数据，然后在slave上恢复，当数据很小
笔者曾碰到过这种问题，在master上删除一条记录后，slave上因找不到该记录而报错，
异步的劣势是：当master上写操作繁忙时，当前POS点，例如，是10，而slave上
口半同步复制：简单地说就是master把binlog发送过去，slave确认接收完，但不管
口异步复制：简单地说就是master 把binlog 发送过去，不管 slave 是否接收完，也不
在说明最常见的3种故障之前，先来看一下异步复制和半同步复制的区别：
在发生故障进行切换后，经常遇到的问题就是同步报错，我见过很多DBA都是执行命
管是否执行完，这一动作就结束了。
patch谷歌写的代码，MySQL5.5上正式应用。）
它是否执行完，给master一个信号我这边收到了，这一动作就结束了。（半同步复制
同步复制报错故障处理
第4章
---
## Page 127
Seconds_Behind_master/(print$2))
自己的东西，使其不是无论什么错误都一律跳过)，脚本如下：
参考makit工具包的mk-slave-restart 原理用 shell写的，由于mk-slave-restart 脚本是不管
什么错误一律跳过，这样会造成主从数据不一致，因此我在该脚本的功能方面定义了一些
10个错误（只会针对这种情况跳，其他情况还是会输出错误结果，等待处理），这个脚本是
命令如下：
报错信息如下：
出现这种情况是因为主机上已将其删除了，对此，可采取从机直接跳过的方式解决，
对于这种情况，我写了一个脚本 skip_error_replication.sh 来帮助处理，该脚本默认跳过
Last_SQL_Error:Could not execute Delete_rows event on table hcy.t1;Can't find record in't1',Error_code:1032;
#!/bin/bash
stopslave;setglobalsql_slave_skip_counter=1;start slave;
op
echo">${v_log)/slave_status_error.log
echo">${v_log)/siave_status.log
if [-d"${v_log}"];then
exportLANG=zh_CN
##byhechunyang
#这种情况才跳过，其他情况，需要自行处理，以免丢失数据。
#只有Last_SQL_Eror:Could not execute Delete_rows event on table hcy.t1;Can't find record # in't1',Error_code:
whiletrue
count=1
v_times=10
#
#此脚本是用来自动处理同步报错的，默认跳过10次。
else
#
Seconds_Behind_master=S(S(v_dir}MysQL-us(v_user}-pS{v_passwd}-e"show slave status\G;"|awk-F":"/
mkdir S(v_log}
if[${Seconds_Behind_master}!="NULL"];then
/root/.bash_profile
echo"S(v_log)hasexisted before.
log=/home/logs
passwd=123456
dir=/usr/local/MySQL/bin/
user=root
第4章同步复制报错故障处理·113
---
## Page 128
114·第二部分故障诊断与性能优化篇
4.1.2
此时就会报错，报错信息如下：
主从数据不一致时，slave上已经有该条记录，但我们又在master上插入了同一条记录，
接着删除重复的主键，命令如下：
查看该表字段信息，得到主键的字段名。
2 rows in set (0.03 sec)
MySQL>deschcy.t1;
the event'smasterlogMysQL-bin.000006,end_log_pos924
Error_code:1062;handlererrorHA_ERR_FOUND_DUPP_KEY;
Last_SQL_Error:Could notexecute Write_rows event on tablehcy.t1;
done
Field|Type|Null|Key|Default|Extra
id
else
fi
continue
sleep2
${_dir}MySQL-us{v_user}-pS{v_passwd}-e"show slave status\G">>${v_log)/slave_status_eror.log
${v_dir}MysQL-u${v_user}-p${v_passwd}-e"show slave status\G"|egrep'Delete_rows'>/dev/null 2>&1
${v_dir})MysQL-u${v_user}-p${v_passwd}-e"show slave status\G">>${v_log}/slave_status_error.log
date>>S{v_log)/slave_status_error.log
break
S{v_dir}MysQL-u${v_user}-p${v_passwd}-e"show slave status\G;">>${v_log)/slave_status.log
|int(11)|NO|PRI|0
主键重复
else
if[S?=0];then
echo"slave is ok!"
break
${v_dir}MySQL-uS{v_user}-p${v_passwd}-e"stop slave;SET GLOBALsq|_slave_skip_counter=1;start slave;"
break
NULL
---
## Page 129
所示：
master上又更新了这条记录，此时就会报错，报错信息如下：
4.1.3
解决方法：在master上，用MySQLbinlog 分析一下出错的binlog日志在干什么，如下
主从数据不一致时，master上已经有该条记录，但slave上没有这条记录，之后若在
接着，在 slave上查找一下更新后的那条记录，应该是不存在的。命令如下：
[root@vm01data]#/usr/local/MySQL/bin/MySQLbinlog
event'smasterlogMysQL-bin.000010,end_log_pos794
完成上述操作后，还要在master上和slave上再分别确认一下，确保执行成功。
slave_SQL_Running:Yes
Query OK,0rows affected (0.00 sec)
然后开启同步复制功能，命令如下：
从上面的信息来看，是在更新一条记录。
##@2="BTV/*STRING(4)meta=65028nullable=1is_nul=0*/
MySQL-bin.000010|grep-A'10'794
Last_SQL_Error:CouldnotexecuteUpdate_rowseventon tablehcy.t1;Can'tfind
MySQL>select*fromt1whereid=2;
slave_IO_Running:Yes
MySQL>showslave status\G;
MySQL>startslave;
Query OK,1row affected (0.00 sec)
[root@vm01data]#
#120302 12:08:36 serverid 22 end_log_pos 821 Xid = 60
###WHERE
###UPDATEhcy.t1
#12030212:08:36serverid 22end_log_pos794Update_rows: table id 33flags:STMT_END_F
MySQL>deletefromt1whereid=2;
*150003SETCOMPLETION_TYPE=@OLD_COMPLETION_TYPE*/;
ROLLBACK/*addedbyMySQLbinlog*/;
Endoflogfile
DELIMITER;
COMMIT/*1*/;
#at794
##
-no-defaults-v-V--base64-output=DECODE-ROWS
@1=2/*INTmeta=0nullable=0is_null=0*/
@2="bbc'/*STRING(4)meta=65028 nullable=1is_null=0*/
在master上更新一条记录，而 slave 上却找不到
第4章
同步复制报错故障处理·115
---
## Page 130
116·第二部分故障诊断与性能优化篇
息如下：
4.2
当 slave 意外宕机时，有可能会损坏中继日志relay-log，再次开启同步复制时，报错信
解决方法：找到同步的binlog日志和POS点，然后重新进行同步，这样就可以有新的
It'snotabinarylogfilethatcanbeusedbythisversionofMysQL
Last_SQL_Error:Errorinitializingrelaylogposition:Binloghasbadmagicnumber
Last_SQL_Error:Errorinitializingrelaylogposition:I/Oerrorreadingtheheader
fromthebinarylog
MySQL>stopslave;setglobal sql_slave_skip_counter=1;start slave;
完成上述操作后，跳过报错即可，命令如下：
1row in set(0.00 sec)
Query OK,1rowaffected (0.00 sec)
最后把丢失的数据填补到在slave上，命令如下：
可以看到，这里已经找到了这条记录。
然后再到master查看，命令如下：
slave_SQL_Running:Yes
MySQL>showslavestatus\G;
QueryOK,0rows affected（0.00sec）
QueryOK,0rows affected(0.00sec）
QueryOK,0rows affected(0.01sec)
MySQL>select*fromt1whereid=2;
MySQL>insert into t1values(2,BTV');
1rowinset(0.00sec)
MySQL>select*fromt1whereid=2;
Empty set(0.00 sec)
MySQL>select*fromt1whereid=2;
特殊情况：slave 的中继日志 relay-log 损坏
slave_IO_Running:Yes
-.-+--
2|BTV
id|name
2|BTV
id|name
+
---
## Page 131
中继日志了。
 slave_SQL_Running：执行写操作。
 slave_IO_Running：接收master的binlog信息
下面来看个例子，这里模拟了中继日志损坏的情况，查看到的信息如下：
重新建立完主从复制以后，就可以查看一下状态信息了，如下所示：
Query OK,0rows affected (0.01 sec)
接下来可以重置主从复制了，操作如下：
Exec_master_Log_Pos:821
Relay_master_Log_File: MySQL-bin.000010
MySQL>stop slave;
其中，涉及几个重要参数：
Query OK,0rowsaffected(0.00 sec)
master_LOG_POS=821;
QueryOK,0rowsaffected(0.01sec)
MySQL>show slavestatus\G;
MySQL>startslave;
MySQL>CHANGEmasterTOmaster_LOG_FILE='MySQL-bin.000010',
OExec_master_Log_Pos：正在同步当前binlog日志的POS 点。
ORead_master_Log_Pos：正在读取 master上当前binlog日志POS 点。
Omaster_Log_File：正在读取master上binlog 日志名。
Replicate_Wild_Ignore_Table:
Replicate_Wild_Do_Table:
master_Log_File:MySQL-bin.000010
Replicate_Ignore_Table:
Relay_master_Log_File:MysQL-bin.000010
Exec_master_Log_Pos:821
Replicate_Ignore_DB:
Read_master_Log_Pos:1191
Replicate_Do_Table:
slave_SQL_Running:No
Replicate_Do_DB:
slave_IO_Running:Yes
Relay_Log_File:vm02-relay-bin.000005
Relay_Log_Pos:253
Skip_Counter:1
Last_Errno:1593
第4章
同步复制报错故障处理·117
---
## Page 132
118·第二部分故障诊断与性能优化篇
4.3
了，这里不再阐述。
slave的配置文件my.cnf里要增加一个参数relay_log_recovery=1就可以了，前面已经介绍
1章的新特性，会发现MySQL5.5已经考虑到siave岩机中继日志损坏这一问题了，即在
这种情况在生产环境中并不常见，下面记录了一次 server-id重复导致的主从同步复制
通过这种方法我们已经修复了中继日志。是不是有些麻烦？其实如果你有仔细看完第
master_SSL_Verify_Server_Cert:No
MySQL>show slave status\G;
Replicate_Wild_lgnore_Table:
人为失误
Replicate_Wild_Do_Table:
Replicate_lgnore_Table:
Replicate_Do_Table:
Relay_master_Log_File:MySQL-bin.000010
Replicate_Ignore_DB:
Seconds_Behind_master:0
Read_master_Log_Pos:1191
Exec_master_Log_Pos:1191
slave_Io_Running:Yes
master_Log_File:MySQL-bin.000010
master_SSL_CA_Path:
master_SSL_CA_File:
master_SSL_Allowed:
Replicate_Do_DB:
Relay_Log_Pos:623
slave_Io_State:Waitingformastertosendevent
master_SSL_Cipher:
Relay_Log_File:vm02-relay-bin.000002
Skip_Counter:0
Connect_Retry:10
master_SSL_Cert:
master_SSL_Key:
Relay_Log_Space:778
Last_Error:
master_Port:3306
Last_SQL_Error:
Last_SQL_Errno:0
master_User:repl
master_Host:192.168.8.22
Last_Errno:0
Last_io_Error:
Last_IO_Errno:0
No
---
## Page 133
cnf复制到 slave上，却忘记了修改 slave上的 server-id，报错信息如下：
毕。经过优化，行锁的范围变小了，性能也就变好了。相
但Seconds_Behind_master的值却越来越大，致使同步落后越来越多。
当时的现象是执行“show slave status\G;”时，Exec_master_Log_Pos值一直不发生变化，
于删除的ID关联的数据太多，该删除操作变成了一个大事务，一下子就把 slave给卡死了
两行信息。解决方法就是把 slave 机器上的 server-id改成不一致，然后重启 MySQL 即可。
报错。
关代码如下：
程
4.4
这是一个真实的案例，一张大表大约有70GB，因为业务需要，要删除一些数据，由
在这种情况下，同步会一直延时，永远也同步不完，error错误日志里会一直出现上面
这个错误一般是初级DBA 经常遇到的，他们在进行主从配置时，直接把 master 的 my、
多台slave存在server-id重复
每删除1000条事务就提交一次，循环操作直至删除完
END LOOP del_1k;
del_1k:LOOP
BEGIN
DELIMITERS$
碰到这个问题后，我想出的解决办法是改为用存储过
表数据如图4-1所示。
当时的SQL语句是：
reconnectingtoretry,log'MysQL-bin.000012'atposition106
DELIMITER;
ENDSS
deletefrom bigtable where Userld=v_userid;
slaveI/Othread:Failedreadinglogevent,
slave:receivedendpacketfromserver,apparentmastershutdown：
避免在master上执行大事务
select row_count() into @count;
deletefromBIGDB.BIGTABLEwhere Userld=v_Userld limit1000;
CREATE PROCEDURE BIG_table_delete_1k(IN v_Userld INT)
IF@count=OTHEN
DROP PROCEDUREIF EXISTS BIG_table_delete_1kSS
USE BIGDBS$
ENDIF;
LEAVE del_1k;
select sleep(1);
selectCONCAT(BIGDB.BIGTABLEUserld='，v_Userld,'is'@count,'rows.)as BIGTABLE_delete_finish;
品口
L
第4章同步复制报错故障处理·119
200034797
00034797
34797
图4-1数据
20003480
200034803
200034799
11
---
## Page 134
120·第二部分故障诊断与性能优化篇
exec_mode参数可以动态设置。
的，只不过 slave_skip_errors 参数必须加到配置文件 my.cnf 里然后重启 MySQL，而 slave_
mode参数和 slave_skip_errors参数的作用是一样
错误，并且记录到错误日志里。其实，slave_exec_
到）和1062错误（主键重复）时，就会自动跳过该
步复制，这样才可以。
制进程，
注意
没找到自己刚才发的帖子，投诉的电话就得在老板的耳旁响起了。
是不会自动跳过这个错误的)，尤其是开启了读写分离功能后—用户发了一个帖子，半天
同步复制会因报错而中断，这样就会对业务产生影响（如果你没有做特殊的设置，MySQL
信——主从同步报错，会让你原本很好的心情一下子沉人谷底。因为如果你处理不及时，
4.5
设置完毕后，并不能立即生效，需要重启下复
大家有没有遇到这种情况，假日里，你正在外面享受生活，突然手机收到一条短
另外，你还可以在Nagios 主机上做个监控，当出现同步报错时，执行相应的命令：
设置完毕后，
其默认值是STRICT(严格模式)，如图4-2所示。
setglobal slave_exec_mode='DEMPOTENT';
那么该如何解决呢？slave_exec_mode这个参数可以帮助你。
存储过程上线后，观察一段时间，同步复制时，slave 复制正常，问题解决。
for hostip in'cat slaveip.txt'
MySQLpath=/usr/local/MysQL/bin
port=3306
#!/bin/bash
下面是我实现的一个脚本skip_slave_error.sh;
passwd=123456
MySQL-uroot-p123456-h(yourIP)-e"setglobalslave_exec_mode='IDEMPOTENT';"
你可以动态设置，如下所示：
user=admin
slave_exec_mode参数可自动处理同步复制错误
，第一步：关闭同步复制；第二步：开启同
当出现的1023错误（记录没找
图4-2设置global slave_exec_mode为
Variable_nane