## IMPORTANT: DevOps Kit (AzSK) is being sunset by the end of FY21. For more details, please refer to [this document](../../../ReleaseNotes/AzSKSunsetNotice.md).

---

### Storage Security Controls and Rationale

| **Control** | **Description & Rationale** | **Severity** | **Automated Fix Script** | **Additional Notes** |
|-------------|-----------------------------|--------------|--------------------------|----------------------|
| **Access Type for Containers** | Data in containers with anonymous access can be downloaded by anyone on the internet without authentication, leading to a potential compromise of corporate data. | **High** | Yes | Yes |
| **Alert Rules for Anonymous Activity** | Configuring alert rules for anonymous authentication requests allows early detection of suspicious and malicious activities, enabling timely response. | **High** | Yes | Yes |
| **Logging and Monitoring Authentication Requests** | Logging and monitoring authentication request data helps detect suspicious and malicious activities early, allowing for a timely response. | **Medium** | Yes | Yes |
| **Use of HTTPS Protocol** | Using HTTPS ensures server/service authentication and protects data in transit from man-in-the-middle, eavesdropping, and session-hijacking attacks. Ensure that plain HTTP access is disabled to prevent data compromise over unsecured connections. | **High** | Yes | Yes |
| **IP-Restrictions in SAS Tokens** | Implementing appropriate IP-based ACLs ensures that data in storage is protected and accessible only from expected endpoints. | **Medium** | No | No |
| **SAS Token Access for End-User/Client Apps** | Use shared access signatures (SAS) to grant limited access to objects in your Storage Account without exposing the account key. This aligns with the principle of least privilege. | **High** | No | No |
| **Periodic Rotation of Storage Account Keys** | Regularly rotating keys minimizes the risk of data loss or compromise due to key theft, brute forcing, or recovery attacks. | **Medium** | No | No |
| **Stored Access Policies with Least Privileges** | Granting minimum access ensures that users are given just enough permissions to perform their tasks, minimizing the impact of a compromised access policy key. | **High** | No | No |
| **CORS Access Control** | Restrict CORS access to a minimal set of trusted origins and required verbs. Allowing all origins ('*') means any application can access your resources, which violates the principle of least privilege. | **Medium** | Yes | No |
| **Firewall and Virtual Network Access** | Limit access using firewall and virtual network configurations to reduce the network exposure of a storage account. This depends on the overall service architecture and may not be feasible in all scenarios. | **Medium** | Yes | No |
| **Soft Delete for Blob Recovery** | Enabling soft delete allows recovery of inadvertently or maliciously deleted blobs or blob snapshots, providing a valuable BC/DR mechanism. | **Medium** | Yes | No |
| **Role-Based Access Control (RBAC)** | Granting minimum required permissions using RBAC ensures that users have just enough access to perform their tasks, minimizing the risk of resource exposure in case of a user or service account compromise. | **Medium** | Yes | No |
| **AAD-Based Access for Storage Accounts** | Where possible, use Azure Active Directory (AAD) identities (SPNs, groups, users) to grant access to storage accounts using minimum RBAC roles. Managed Service Identities (MSIs) should be used wherever supported, as they eliminate the need to manage secrets, reducing overall risk. | **Medium** | Yes | No |

This table provides a comprehensive overview of the security controls for storage accounts, along with their descriptions, severities, and whether automated fix scripts are available. Additional notes provide further context and guidance for each control.