Regarding meta-formulas, quantiﬁcations over index and
timestamp variables do not have a direct counterpart in the
base logic. They are translated to ﬁnite boolean expressions
through nested conditionals relying on .∧ and .∨ introduced
previously:
(∀i.φ)
T
(∀τ.φ)
T
def
=
def
=
.∧k∈DI (φ)
.∧v∈DT (φ)
T{i(cid:55)→k}
T{τ(cid:55)→v}
and similarly for existential quantiﬁcations.
(cid:40)(minit)
Finally, we also have to give a meaning to the macros
input, output, frame, cond, and exec used in the meta-logic.
We deﬁne in Fig. 2 the terms minit and {ma[(cid:126)i ]
| a[(cid:126)i ] ∈ PA}
for each of these macro symbols, and then have:
T
T
T
T{(cid:126)i(cid:55)→(cid:126)k}
)
if (T )
if (T )
T def
=
(m@T )
(ma[(cid:126)i ]
= init
= a[(cid:126)k ] and a[(cid:126)i ] ∈ PA
Roughly, an output macro is replaced by the meta-term
as speciﬁed by the protocol and it is then interpreted in the
trace model to get a base term. The cond macro has a similar
treatment and produces a base formula corresponding to the
conditional of the action. The exec macro simply corresponds
to the conjunction of all past conditions.
The translation of the frame gathers (using nested pairs)
all the information available to the attacker at some execution
point: for each past action, the attacker observes if the execu-
tion continues and, if that is the case, they obtain the output.
Finally, in order to model the attacker’s capabilities, the input
macro is interpreted using the attacker symbol att, to which
we pass the current frame.
Example 12. Considering the trace model T given in Ex-
ample 11 with σI(i) = σI(j) = 1, we give below the
interpretation of several meta-terms:
= (cid:104)n1,1, H(n1,1, key1)(cid:105) def
T
(output@aT [i, j])
T
(fst(output@aT [i, j]))
T
(input@aR[j, i])
att((cid:104)true,(cid:104)if true then tout else empty, empty(cid:105)(cid:105))
= fst(tout)
= tout
=
def
= tin
.⇒
Therefore the meta-formula expressing an authentication
property in Listing 2 translates as follows in T:
snd(tin) .= H(fst(tin), key1)
.∧ snd(tin) .= snd(tout)(cid:1)
.∧ fst(tin) .= fst(tout)
(cid:0)true
Note that the atom aT [i, j(cid:48)] ≤ aR[j, i] has been replaced by
true because it holds in T when i, j and j(cid:48) are (necessarily)
interpreted as 1. If we had had aT [1, 1] > aR[1, 1] in T
we would have obtained false, making the conclusion of the
implication unsatisﬁable.
The base formula of the previous example corresponds to
the translation of the meta-formula expressing authentication
considering a single and very simple trace model. To provide
a proof of our authentication property, we have to verify the
validity of the base formula obtained with any trace model.
C. Validity
We say that a meta-formula φ is satisﬁed in T, M, written
T, M |=P φ, or simply T, M |= φ when P is clear from the
T ∼ true. Intuitively, it means
context, whenever M |= (φ)
that the formula φ is true with overwhelming probability on the
trace T. Then, we say that φ is valid if it is satisﬁed in every T
and M: intuitively, the formula φ is true with overwhelming
probability for every executions of the associated protocol P.
In practice, this notion of validity is too strong: for instance,
the authentication property of the Basic Hash protocol only
holds if the hash satisﬁes some unforgeability assumption.
Thus, we are interested in verifying the validity of meta-
formulas for restricted classes C of models. We will con-
sider two types of restrictions. First, we may make some
security assumptions on the interpretation of cryptographic
primitives in M: e.g., when a hash function is declared in
our prover, we assume that its interpretation satisﬁes the PRF
assumption. Second, further assumptions can be made by
adding axioms expressed as meta-formulas. An axiom φ will
restrict the considered class C to those T and M such that
M, σ |= (φ)
T ∼ true for all semantic assignments σ mapping
free message variables occurring in φ to probabilistic PTIME
machines. Axioms are used, for example, to express properties
of message lengths: len((cid:104)x, y(cid:105)) = plus(len(x), len(y)).
Note that our notion of validity differs from standard notion
of security in the computational model. In our logic, if a
formula φ is valid, it means that for any given trace and for any
attacker interacting with the protocol along this trace, φ is false
with negligible probability. In the computational model, one
would rather expect that for any attacker interacting with the
protocol and choosing a polynomial number of actions to exe-
cute, φ is false with negligible probability. In the former case,
the advantage of the attacker may grow super-polynomially
w.r.t. to the number of sessions, but not in the latter. We
provide a contrived example showing the difference between
the two notions in Appendix D. While weaker than concrete
security bounds, we stress that this guarantee is stronger than
symbolic guarantees for unbounded sessions. Furthermore, this
limitation can be lifted using the composition result of [27],
as done in some of our case studies (cf. Section VII).
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:10:06 UTC from IEEE Xplore.  Restrictions apply. 
544
NAMEINDEP
n (cid:54)= m
Γ, n[(cid:126)i ] = m[(cid:126)j ] (cid:96) φ
Γ, i1 = j1, . . . , ik = jk (cid:96) φ
NAMEEQ
Γ, n[i1, . . . , ik] = n[j1, . . . , jk] (cid:96) φ
ACTDEP
when a[(cid:126)j] < b[(cid:126)i ]
Γ, b[(cid:126)i ] ≤ a[(cid:126)j] (cid:96) φ
when a (cid:54)= b
ACTINDEP
Γ, a[(cid:126)i ] = b[(cid:126)j ] (cid:96) φ
Γ, i1 = j1, . . . , ik = jk (cid:96) φ
ACTEQ
Γ, a[i1, . . . , ik] = b[j1, . . . , jk] (cid:96) φ
INIT
Γ, τ (cid:54)= init ∧ τ ≤ pred(τ ) (cid:96) φ
EXEC
Γ,∀τ
(cid:48) ≤ τ.cond@τ
Γ, exec@τ (cid:96) φ
(cid:48) (cid:96) φ
= pred(τ ) ∨ τ
PRED
(cid:48)
Γ, τ
Γ, pred(τ ) ≤ τ
(cid:48)
= τ (cid:96) φ
(cid:48) ≤ τ (cid:96) φ
Fig. 3. Some rules of our sequent calculus for reachability.
Meta-formulas express properties of all execution traces
of a protocol. Some security properties (e.g. strong secrecy,
unlinkability) are better expressed as equivalences between
two protocols. We accomodate such notions naturally in our
framework since it is based on an indistinguishability predi-
cate: this is presented in Section VI. Before that, we design
in the next section a proof system that allows to derive valid
meta-formulas (relatively to some classes of models).
V. REACHABILITY RULES
We now present our reachability sequent calculus, for some
protocol P = (PA, <) ﬁxed throughout the section.
Deﬁnition 8. A sequent Γ (cid:96) φ is formed from a set of meta-
formulas Γ and a meta-formula φ, both without message vari-
ables. The sequent Γ (cid:96) φ is valid w.r.t. a class of models C if
(∧Γ) ⇒ φ is valid w.r.t. C.
Deﬁnition 9. An inference rule
is
sound w.r.t. a class C when the conclusion is valid w.r.t. C
whenever the premises are valid w.r.t. C.
Γ (cid:96) φ
Γ1 (cid:96) φ1 . . . Γn (cid:96) φn
We now give our meta-logic reachability sequent calculus
rules, and prove their soundness. We talk of validity (resp.
soundness) without specifying the class C when it holds w.r.t.
all models.
A. Basic Rules
Although our sequents have a probabilistic semantics, all
rules of classical ﬁrst-order sequent calculus are sound.
We give in Fig. 3 the rules we designed which are speciﬁc
to security protocol analysis, and describe them below. Two
different names are almost never equal (i.e. they are not equal
except for a negligible number of samplings). This can be
the case either because they have different head symbols (rule
NAMEINDEP) or because they have the same head symbols
but different indices (rule NAMEEQ). The rule ACTDEP states
that actions must occur in the order imposed by the protocol,
and ACTINDEP and ACTEQ express that two different actions
cannot occur at the same instant. The PRED rule states that
⊕-NIL
Γ (cid:96) t ⊕ t = 0
⊕-ASSOC
Γ (cid:96) t ⊕ (t
⊕-SYM
Γ (cid:96) t ⊕ t
(cid:48)
(cid:48) ⊕ t
= t
(cid:48) ⊕ t
(cid:48)(cid:48)
) = (t ⊕ t
(cid:48)
) ⊕ t
(cid:48)(cid:48)
Fig. 4. Some XOR rules of our sequent calculus for reachability.
there is no timestamp between pred(τ ) and τ, and EXEC
states that if the trace is executable up to τ then the protocol
conditions hold for any instant before τ. INIT says that if τ
is not the initial timestamp, then τ cannot occur before the
action preceding it.
We also have rules for expanding macros into their meaning.
For instance, if PA contains the action a[(cid:126)i ].(φ, o), we can
derive Γ (cid:96) output@a[(cid:126)i ] = o and Γ (cid:96) cond@a[(cid:126)i ] ⇔ φ. All
these rules are sound.
Some of our rules are sound only under some computational
assumptions. These assumptions can either be cryptographic
assumptions (we give examples in the next section), or func-
the rules ⊕-NIL,
tional properties of the primitives. E.g,
⊕-SYM and ⊕-ASSOC of Fig. 4 state functional properties
that ⊕ satisﬁes whenever it is interpreted as the XOR operator:
these rules are obviously sound in any computational model
where ⊕ is interpreted as XOR.
B. Advanced Rules
We now describe how we designed the most advanced
rules of our reachability sequent calculus, which deal with
cryptographic assumptions and probabilistic independence. We
present here the rule for the EUF-CMA axiom.
a) Base logic rule: We recall the base logic EUF-CMA
rule from [41]. Before starting, we introduce notations we use
to describe syntactic side-conditions of rules.
Deﬁnition 10. A template C[[]1, . . . , []n,•]
is a syntactic
expression built using the hole variables ([]i)1≤i≤n, the special
variable •, and applications of function symbols f ∈ FB (with
the correct arity) such that • occurs exactly once in C.
For any base terms t1, . . . , tn, t, we let C[t1, . . . , tn, t] be
the base term obtained by substituting the hole variables and •
by the terms t1, . . . , tn, t.
When possible, we omit the hole variables and write C[_,•].
Deﬁnition 11. Let C[_,•] be a template, u a ground base
term and n a name. Then n (cid:118)C u holds whenever n appears
in u only in subterms of the form C[ (cid:126)w , n] for some (cid:126)w .
Example 13. We give two examples:
• n (cid:54)(cid:118)• u states that n does not appear in u.
• k (cid:118)H(_,•) u states that k appears only as a hash key in u.
Roughly, the EUF-CMA rule states that if s is a valid hash
of m, then m must be equal to some honestly hashed message
appearing in s or m. We formally deﬁne it next, as a simple
elaboration of the rule EUF-MAC of [41] (a base logic sequent
Γ (cid:96) φ is valid when ((
.∧ Γ) .⇒ φ) ∼ true is valid).
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:10:06 UTC from IEEE Xplore.  Restrictions apply. 
545
.(cid:87)
Γ,
Deﬁnition 12. For any ground base terms s, u, m and name k,
we let EUF-CMA be the rule:
H(u,k)∈st(s,m) m .= u (cid:96) φ
Γ, s .= H(m, k) (cid:96) φ
when k (cid:118)H(_,•) s, m
Example 14. If u is the term (cid:104)H(t1, k),(cid:104)H(t2, k), H(t3, k(cid:48)
)(cid:105)(cid:105)
where k, k(cid:48) are names and s, t0, t1 and t2 are ground terms
that do not use k and k(cid:48), then we have an EUF-CMA instance:
Γ, (att(u) .= t1)
.∨ (att(u) .= t2) (cid:96) φ
Γ, s .= H(att(u), k) (cid:96) φ
Indeed, k appears only in hash positions in s and att(u), hence
k (cid:118)H(_,•) s, att(u). Moreover, t1 and t2 are the only messages
hashed by k (note that t3 is hashed by a different key k(cid:48)).
b) Meta-logic rule: We now explain how to lift the base
logic rule EUF-CMA to the meta-logic. We need to ﬁnd a
rule such that
its translation in any trace model yields a
valid instance of the base logic EUF-CMA rule. There are
two obstacles to this. Assume our meta-logic rule is of the
following form:
H(u,k[(cid:126)i ])∈ST(s,m) m .= u (cid:96) φ
Γ, s .= H(m, k[(cid:126)i ]) (cid:96) φ
when SSCk[(cid:126)i ](s, m)
(1)
.(cid:87)
Γ,
Soundness requires that:
• if the meta-logic side-condition SSCk[(cid:126)i ](s, m) holds,
then all translations of s and m must satisfy the base
logic side-condition:
∀T, (k[(cid:126)i ])
T (cid:118)H(_,•) (s)
T
(2)
• the set of meta-terms ST(s, m) must be such that its
translation in any trace model contains all hashes of the
translation of s and m. That is, for every T:
T
, (m)
)(cid:9) ⊆ (ST(s, m))
T
(3)
(cid:8)H(u, (k[(cid:126)i ])
T
) ∈ st((s)
T