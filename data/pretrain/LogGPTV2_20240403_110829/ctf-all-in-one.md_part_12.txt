Section Headers:
[Nr] Name Type Addr Off Size
ES Flg Lk Inf Al
[ 0] NULL 00000000 000000 000000
00 0 0 0
[ 1] .group GROUP 00000000 000034 000008
04 12 16 4
[ 2] .text PROGBITS 00000000 00003c 000078
00 AX 0 0 1
[ 3] .rel.text REL 00000000 000338 000048
08 I 12 2 4
[ 4] .data PROGBITS 00000000 0000b4 000008
00 WA 0 0 4
[ 5] .bss NOBITS 00000000 0000bc 000004
00 WA 0 0 4
[ 6] .rodata PROGBITS 00000000 0000bc 000004
00 A 0 0 1
[ 7] .text.__x86.get_p PROGBITS 00000000 0000c0 000004
00 AXG 0 0 1
[ 8] .comment PROGBITS 00000000 0000c4 000012
01 MS 0 0 1
[ 9] .note.GNU-stack PROGBITS 00000000 0000d6 000000
00 0 0 1
[10] .eh_frame PROGBITS 00000000 0000d8 00007c
00 A 0 0 4
[11] .rel.eh_frame REL 00000000 000380 000018
08 I 12 10 4
[12] .symtab SYMTAB 00000000 000154 000140
10 13 13 4
[13] .strtab STRTAB 00000000 000294 0000a2
00 0 0 1
[14] .shstrtab STRTAB 00000000 000398 000082
00 0 0 1
Key to Flags:
W (write), A (alloc), X (execute), M (merge), S (strings), I (
info),
L (link order), O (extra OS processing required), G (group), T
(TLS),
128
1.5.3 Linux ELF
C (compressed), x (unknown), o (OS specific), E (exclude),
p (processor specific)
注意，ELF 段表的第一个元素是被保留的，类型为 NULL。
字符串表
字符串表以段的形式存在，包含了以 null 结尾的字符序列。对象文件使用这些字
符串来表示符号和段名称，引用字符串时只需给出在表中的偏移即可。字符串表的
第一个字符和最后一个字符为空字符，以确保所有字符串的开始和终止。通常段名
为 .strtab 的字符串表是 字符串表（Strings Table），段名为 .shstrtab 的
是段表字符串表（Section Header String Table）。
偏移 +0 +1 +2 +3 +4 +5 +6 +7 +8 +9
+0 \0 h e l l o \0 w o r
+10 l d \0 h e l l o w o
+20 r l d \0
偏移 字符串
0 空字符串
1 hello
7 world
13 helloworld
18 world
可以使用 readelf 读取这两个表：
$ readelf -x .strtab elfDemo.o
Hex dump of section '.strtab':
0x00000000 00656c66 44656d6f 2e63006c 6f63616c .elfDemo.c.loca
l
0x00000010 5f737461 7469635f 696e6974 5f766172 _static_init_va
r
0x00000020 2e323139 35006c6f 63616c5f 73746174 .2195.local_sta
t
129
1.5.3 Linux ELF
0x00000030 69635f75 6e696e69 745f7661 722e3231 ic_uninit_var.2
1
0x00000040 39360067 6c6f6261 6c5f696e 69745f76 96.global_init_
v
0x00000050 61720067 6c6f6261 6c5f756e 696e6974 ar.global_unini
t
0x00000060 5f766172 0066756e 63005f5f 7838362e _var.func.__x86
.
0x00000070 6765745f 70635f74 68756e6b 2e617800 get_pc_thunk.ax
.
0x00000080 5f474c4f 42414c5f 4f464653 45545f54 _GLOBAL_OFFSET_
T
0x00000090 41424c45 5f007072 696e7466 006d6169 ABLE_.printf.ma
i
0x000000a0 6e00
$ readelf -x .shstrtab elfDemo.o
Hex dump of section '.shstrtab':
0x00000000 002e7379 6d746162 002e7374 72746162 ..symtab..strta
b
0x00000010 002e7368 73747274 6162002e 72656c2e ..shstrtab..rel
.
0x00000020 74657874 002e6461 7461002e 62737300 text..data..bss
.
0x00000030 2e726f64 61746100 2e746578 742e5f5f .rodata..text._
_
0x00000040 7838362e 6765745f 70635f74 68756e6b x86.get_pc_thun
k
0x00000050 2e617800 2e636f6d 6d656e74 002e6e6f .ax..comment..n
o
0x00000060 74652e47 4e552d73 7461636b 002e7265 te.GNU-stack..r
e
0x00000070 6c2e6568 5f667261 6d65002e 67726f75 l.eh_frame..gro
u
0x00000080 7000
符号表
130
1.5.3 Linux ELF
目标文件的符号表保存了定位和重定位程序的符号定义和引用所需的信息。符号表
索引是这个数组的下标。索引０指向表中的第一个条目，作为未定义的符号索引。
typedef struct
{
Elf32_Word st_name; /* Symbol name (string tbl index
) */
Elf32_Addr st_value; /* Symbol value */
Elf32_Word st_size; /* Symbol size */
unsigned char st_info; /* Symbol type and binding */
unsigned char st_other; /* Symbol visibility */
Elf32_Section st_shndx; /* Section index */
} Elf32_Sym;
typedef struct
{
Elf64_Word st_name; /* Symbol name (string tbl index
) */
unsigned char st_info; /* Symbol type and binding */
unsigned char st_other; /* Symbol visibility */
Elf64_Section st_shndx; /* Section index */
Elf64_Addr st_value; /* Symbol value */
Elf64_Xword st_size; /* Symbol size */
} Elf64_Sym;
查看符号表：
131
1.5.3 Linux ELF
$ readelf -s elfDemo.o
Symbol table '.symtab' contains 20 entries:
Num: Value Size Type Bind Vis Ndx Name
0: 00000000 0 NOTYPE LOCAL DEFAULT UND
1: 00000000 0 FILE LOCAL DEFAULT ABS elfDemo.c
2: 00000000 0 SECTION LOCAL DEFAULT 2
3: 00000000 0 SECTION LOCAL DEFAULT 4
4: 00000000 0 SECTION LOCAL DEFAULT 5
5: 00000000 0 SECTION LOCAL DEFAULT 6
6: 00000004 4 OBJECT LOCAL DEFAULT 4 local_static_
init_var.219
7: 00000000 4 OBJECT LOCAL DEFAULT 5 local_static_
uninit_var.2
8: 00000000 0 SECTION LOCAL DEFAULT 7
9: 00000000 0 SECTION LOCAL DEFAULT 9
10: 00000000 0 SECTION LOCAL DEFAULT 10
11: 00000000 0 SECTION LOCAL DEFAULT 8
12: 00000000 0 SECTION LOCAL DEFAULT 1
13: 00000000 4 OBJECT GLOBAL DEFAULT 4 global_init_v
ar
14: 00000004 4 OBJECT GLOBAL DEFAULT COM global_uninit
_var
15: 00000000 46 FUNC GLOBAL DEFAULT 2 func
16: 00000000 0 FUNC GLOBAL HIDDEN 7 __x86.get_pc_
thunk.ax
17: 00000000 0 NOTYPE GLOBAL DEFAULT UND _GLOBAL_OFFSE
T_TABLE_
18: 00000000 0 NOTYPE GLOBAL DEFAULT UND printf
19: 0000002e 74 FUNC GLOBAL DEFAULT 2 main
重定位
重定位是连接符号定义与符号引用的过程。可重定位文件必须具有描述如何修改段
内容的信息，从而运行可执行文件和共享对象文件保存进程程序映像的正确信息。
132
1.5.3 Linux ELF
typedef struct
{
Elf32_Addr r_offset; /* Address */
Elf32_Word r_info; /* Relocation type and symbol in
dex */
} Elf32_Rel;
typedef struct
{
Elf64_Addr r_offset; /* Address */
Elf64_Xword r_info; /* Relocation type and symbol in
dex */
Elf64_Sxword r_addend; /* Addend */
} Elf64_Rela;
查看重定位表：
133
1.5.3 Linux ELF
$ readelf -r elfDemo.o
Relocation section '.rel.text' at offset 0x338 contains 9 entrie
s:
Offset Info Type Sym.Value Sym. Name
00000008 00001002 R_386_PC32 00000000 __x86.get_pc_thu
nk.ax
0000000d 0000110a R_386_GOTPC 00000000 _GLOBAL_OFFSET_T
ABLE_
00000019 00000509 R_386_GOTOFF 00000000 .rodata
00000021 00001204 R_386_PLT32 00000000 printf
00000040 00001002 R_386_PC32 00000000 __x86.get_pc_thu
nk.ax
00000045 0000110a R_386_GOTPC 00000000 _GLOBAL_OFFSET_T
ABLE_
00000052 00000d09 R_386_GOTOFF 00000000 global_init_var
0000005d 00000309 R_386_GOTOFF 00000000 .data
00000068 00000f02 R_386_PC32 00000000 func
Relocation section '.rel.eh_frame' at offset 0x380 contains 3 en
tries:
Offset Info Type Sym.Value Sym. Name
00000020 00000202 R_386_PC32 00000000 .text
00000044 00000202 R_386_PC32 00000000 .text
00000070 00000802 R_386_PC32 00000000 .text.__x86.get_
pc_thu
参考资料
$ man elf
Acronyms relevant to Executable and Linkable Format (ELF)
134
1.5.4 Windows PE
1.5.4 Windows PE
135
1.5.5 静态链接
1.5.5 静态链接
136
1.5.6 动态链接
1.5.6 动态链接
动态链接相关的环境变量
动态链接相关的环境变量
LD_PRELOAD
LD_PRELOAD 环境变量可以定义在程序运行前优先加载的动态链接库。这使得我
们可以有选择性地加载不同动态链接库中的相同函数，即通过设置该变量，在主程
序和其动态链接库中间加载别的动态链接库，甚至覆盖原本的库。这就有可能出现
劫持程序执行的安全问题。
#include
#include
void main() {
char passwd[] = "password";
char str[128];
scanf("%s", &str);
if (!strcmp(passwd, str)) {
printf("correct\n");
return;
}
printf("invalid\n");
}
下面我们构造一个恶意的动态链接库来重载 strcmp() 函数，编译为动态链接
库，并设置 LD_PRELOAD 环境变量：
137
1.5.6 动态链接
$ cat hack.c
#include
#include
int strcmp(const char *s1, const char *s2) {
printf("hacked\n");
return 0;
}
$ gcc -shared -o hack.so hack.c
$ gcc ldpreload.c
$ ./a.out
asdf
invalid
$ LD_PRELOAD="./hack.so" ./a.out
asdf
hacked
correct
LD_SHOW_AUXV
AUXV 是内核在执行 ELF 文件时传递给用户空间的信息，设置该环境变量可以显示
这些信息。如：
138
1.5.6 动态链接
$ LD_SHOW_AUXV=1 ls
AT_SYSINFO_EHDR: 0x7fff41fbc000
AT_HWCAP: bfebfbff
AT_PAGESZ: 4096
AT_CLKTCK: 100
AT_PHDR: 0x55f1f623e040
AT_PHENT: 56
AT_PHNUM: 9
AT_BASE: 0x7f277e1ec000
AT_FLAGS: 0x0
AT_ENTRY: 0x55f1f6243060
AT_UID: 1000
AT_EUID: 1000
AT_GID: 1000
AT_EGID: 1000
AT_SECURE: 0
AT_RANDOM: 0x7fff41effbb9
AT_EXECFN: /usr/bin/ls
AT_PLATFORM: x86_64
139
1.5.7 内存管理
1.5.7 内存管理
什么是内存
栈与调用约定
堆与内存管理
什么是内存
为了使用户程序在运行时具有一个私有的地址空间、有自己的 CPU，就像独占了整