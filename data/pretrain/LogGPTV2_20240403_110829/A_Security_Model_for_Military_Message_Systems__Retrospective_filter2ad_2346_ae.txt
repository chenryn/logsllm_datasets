message  systems  in  the  family  make  the  same  choices.  If 
two  message  systems 
that  make  different  choices 
communicate,  some  method  of  mapping  between  those 
entities  that  are  objects  in  one  system  and  containers  in 
the other must be defined. 
(6) How are entities created? 
For each type of entity that users can create, there will 
be  an  operation  that,  when  invoked,  creates  a  new 
instance  of  that  type.  As  with  all  other  operations,  only 
users  who  are  authorized  for  it  can  invoke  it.  Thus,  it  is 
not  necessarily  the  case  that  any  particular  user  will  be 
able  to  create  any  particular  kind  of  entity;  he  must  be 
authorized  to  do  so.  In  particular,  only  users  authorized 
for certain roles may be allowed to create certain kinds of 
entities. 
(7) How does a user refer to an object or a container? 
Some  entities  have  identifers  (IDs)  that  allow  them  to 
be named directly. A given entity may have zero, one, or 
more IDs. An entity may also be referred to indirectly by 
a qualified name (see the example under the definition of 
indirect reference). A user (or a program he invokes) can 
refer  to  an  entity  using  any  valid  ID  or  qualified  name. 
The  former  is  called  a  direct  reference  and  the  latter  an 
indirect reference. 
(8)  What  policy  governs  access  to  an  entity  in  a 
container?  Is  the  classification  of  the  container  or  of  the 
contents tested and with what is it compared? 
The  answer  to  this  question  depends  on  the  type  of 
access  (the  operation  invoked)  and  whether  the  reference 
is direct or indirect. If the entity is referred to directly for 
viewing,  assertion  4  (viewing)  gives  the  appropriate 
restriction. If the reference is indirect, there are two cases 
depending  on  whether  or  not  the  entity  is  within  a 
container  marked  CCR.  If  it  is,  both  assertions  4  and  5 
(access  to  CCR  entities)  have  an  effect;  otherwise,  only 
assertion 4 is relevant. Note that a user may be permitted 
to view a particular entity in a CCR container if he refers 
to  it  directly,  but  be  denied  access  if  he  refers  to  it 
indirectly.  This  provides  a  means  for  dealing  with  the 
aggregation problem without requiring duplicate copies of 
protected  information:  a  collection  of  CONFIDENTIAL 
aggregation-sensitive  objects  might  be  stored 
in  a 
container  marked  SECRET-CCR.  A  user  with  a 
CONFIDENTIAL  clearance  who  had  been  given  the  ID 
of an individual object could refer to it directly, but would 
be unable to view the same item via an indirect reference 
that  identified  it  as  a  member  of  the  SECRET-CCR 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:07:55 UTC from IEEE Xplore.  Restrictions apply. 
container. Assertion 1 (authorization) always requires that 
the  user  (or  his  role)  be  in  the  access  set  for  the  entity-
operation pair specified. 
(9) Is there anything in the system that is not (or is not 
part of or a name for) an entity or a user? 
From  the  user's  point  of  view,  no.  There  may  be 
structures  in  the  implementation  that  the  user  is  unaware 
of  and  would  be  difficult 
legitimate 
classification 
internal  operating  system 
queues, perhaps). Anything the user can create, display, or 
modify, however, must be (or be part of or a name for) an 
entity or a user. 
to  assign  a 
to  (such  as 
(10)  What  are  the  relationships  among  a  user,  an 
operation  he  invokes,  and  programs  that  the  operation 
may  invoke  on  his  behalf?.  For  example,  what  privileges 
do  the  programs  inherit,  how  is  it  determined  whether  a 
given invocation is allowed under the security policy? 
A user has a clearance recorded in the system. When a 
user  invokes  an  operation  on  an  entity,  his  clearance  and 
role,  the  appropriate  device  classifications,  and  the 
classification,  CCR  mark,  and  access  set  for  that  entity 
determine  whether  the  operation  is  permitted.  The  user's 
ID  or  current  role  must  be  paired  with  the  specified 
operation  in  the  access  set  of  the  entity  in  question 
(assertion  1,  authorization).  If  the  operation  allows 
information  to  be  viewed  via  a  given  device,  then  the 
user's clearance and the classification of the output device 
must equal or exceed the classification of the information 
(assertion 4, viewing). Similarly, other security assertions 
must  not  be  violated  by  the  programs  invoked  as  part  of 
the requested operation. 
(11) There are no integrity levels or controls defined in 
accidental/malicious 
prevents 
the  model.  What 
modification of sensitive data? 
The  reasons  for  omitting  integrity  levels  have  been 
discussed  separately  [15].  Modifications  of  clearances, 
classifications,  and  role  sets  are  covered  in  the  given  set 
of  assertions.  To  alter  data,  a  user  must  invoke  an 
operation; assertion 1 (authorization) requires that the user 
be  authorized  to  invoke  that  operation.  In  the  future, 
specific  cases  may  be  treated  in  additional  assertions 
similar to assertion 10 (releasing). 
5  Formalizing the MMS Security Model 
system 
To  provide  a  firm  foundation  for  proofs  about  the 
security  properties  of  a 
specification  or 
implementation,  a  formal  statement  of  its  security  model 
is  needed.  This  section  presents  a  formal  model  that 
corresponds  to  the  informal  MMS  security  model.  It 
serves  three  purposes:  (1)  it  is  an  example  of  how  an 
informal model of a system's security requirements can be 
made  formal;  (2)  being  abstract,  it  can  be  interpreted  by 
others for different but related applications; and (3) it is a 
for  proofs  about  particular  message  system 
basis 
specifications and implementations. 
security  model 
The  MMS 
comprises 
that  hold  for 
fifteen 
definitions,  a  one-paragraph  description  of  MMS 
operation,  four  assumptions  about  user  behavior,  and  ten 
assertions 
the  MMS.  We  focus  on 
formalizing  the  ten  assertions  only,  although  in  doing  so, 
some  notation  is  required  to  define  formal  entities  that 
correspond  to  those  discussed  informally  in  the  fifteen 
definitions.  Below,  the  assertions  are  explicated  formally 
in  definition  (2)  concerning  system  states  and  definitions 
(5) 
transform. 
Although  the  correctness  of  the  explication  cannot  be 
proven,  we  discuss  the  correspondence  between  the 
formalism  and  the  informal  model  briefly  following  the 
explication. 
through  (11)  concerning 
the  system 
the  message 
system--messages,  message 
Each  MMS  family  member  can  be  modeled  as  an 
automaton with inputs, an internal state, and outputs. The 
inputs  correspond  to  the  commands  users  give  to  the 
system.  Because 
this  is  a  security  model,  we  are 
principally  concerned  with  modeling  the  categories  of 
inputs that affect system security. The internal state of the 
automaton corresponds to the information currently stored 
in 
files, 
classifications,  access  sets,  and  so  on.  Output  from  the 
automaton consists of command responses--the things that 
users  view  or  obtain  in  response  to  particular  requests. 
These may include entities, classification labels, IDs, and 
so on. We model output as a set of distinguished entities; 
although  output  is  treated  as  part  of  the  internal  state,  it 
represents  that  part  that  is  directly  visible  to  users.  Some 
commands cause a state change that affects the output set, 
others  may  cause  a  change  of  state  without  changing  the 
output set, and still others {particularly commands that do 
not satisfy the security assertions) cause no state change at 
all.  A  history  of  the  system  is  a  particular  sequence  of 
inputs and states. 
5.1  Formal Model 
We assume the existence of a set of possible users and 
a  set  of  possible  entities.  Given  these  sets  we  define 
system  state  and  the  notion  of  a  secure  state.  Next,  we 
define system and history and introduce constraints on the 
transform  that  moves  a  system  from  one  state  to  another. 
A  system  whose  transform  meets  all  these  constraints  is 
said to be transform secure. Finally, the notions of secure 
history and secure system are defined. 
The  structure  of  the  formal  model  is  intended  to 
simplify  its  application  to  defining  preconditions  and 
postconditions  for  system  operations.  To  make  explicit 
the  entities  that  a  given operation may change, we define 
the concept of potential modification based, in part, on the 
work  of  Popek  and  Farber  [20].  Potential  modification  is 
similar to strong dependency, developed by Cohen [6]. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:07:55 UTC from IEEE Xplore.  Restrictions apply. 
5.1.1 
System State 
In this section we define what it is to be a system state and 
what  it  is  for  a  system  state  to be secure. We assume the 
existence of the following sets. 
OP is a set of operations. 
L is a set of security levels. ≥ is a partial order on L such 
that (L, ≥) is a lattice. 
UI is a set of userID's. 
RL is a set of user roles. 
US  is  a  set  of  users.  For  all  u    US,  CU(u)    L  is  the 
clearance  of u, R(u)⊆RL is the set of authorized roles 
for u, and RO(u) ⊆ RL is the current role set for user u. 
the  exact  nature  of 
RF is a set of references. This set is partitioned into a set, 
DR,  of  direct  references  and  a  set,  IR,  of  indirect 
references.  Although 
these 
references  is  unimportant,  we  assume  that  the  direct 
references  can  be  ordered  by  the  integers.  In  this 
model  we  treat  each  direct  reference  as  a  unary 
sequence  consisting  of  a  single  integer,  for  example, 
.  Each  indirect  reference  is  treated  as  a  finite 
sequence  of  two  or  more  integers,  for  example,  , where is a direct reference. 
 VS  is  a  set  of  strings  (bit  or  character).  These  strings 
serve  primarily  as  entity  values  (e.g.,  file  or  message 
contents). 
TY  is  a  set  of  message  system  data  types  that  includes 
"DM"  for  draft  messages  and  "RM"  for  released 
messages. 
ES  is  a  set  of  entities.  For  all  e  ∈  ES  CE(e)  ∈  L  is  the 
classification of e. AS(e) ⊆ (UI ∪ RL) × OP × N is a 
set of triples that compose the access set of e. (u, op, k) 
∈  AS(e)  iff  u  is  a  userID  or  user  role  authorized  to 
perform operation op with a reference to e as op's kth 
parameter. T (e) ∈ TY is the type of entity e. V(e) ∈ VS 
is  the  value  of  entity  e.  If  T(e)  =  DM  or  T(e)  =  RM, 
then  V(e)  includes  a  releaser  field  RE(e),  which  if 
nonempty,  contains  a  userID.  ES  contains  as  a  subset 
the  set  of  entities  that  are  containers.  For  any  entity  e 
in this set H(e) =  where entity ei is the ith 
entity  contained  in  e.  CCR(e)  is  true  iff  e  is  marked 
CCR, else false. If T(e1) = T(e2) then e1 and e2 are both 
containers or both objects. The set O of output devices 
8
. 
information 
  CD(o)  gives 
the  classification  of 
is  a  subset  of  the  set  of  containers6.  Elements  o  ∈  0 
serve as the domain of two further functions. D(o) is a 
set  of  ordered  pairs  {(x1,  y1),  (x2,  y2)  ....  ,  (xn,  yn)} 
where each yi is displayed on o. Each xi is either a user 
or  an  entity,  and  the  corresponding  yi  is  either  a 
reference, a userID, or the result of applying one of the 
7
above functions to xi.
  We require that (x,V(x)) ∈ D(o) 
the  maximum 
(cid:6) x  ∈  H(o)
classification  of  information  that may be displayed on 
o.  This  allows  CE(o)  to  be  used  as  the  current  upper 
limit  of 
to  be 
displayed  by  the  output  device,  so  that  users  can 
restrict  the  classification  of  output  to  be  less  than  the 
maximum level permitted. 
A  state  maps  a  subset  of  userIDs  and  references 
(intuitively,  those  that  exist  in  the  state  in  question)  to 
elements of US and ES that represent their corresponding 
properties.  A  state  also  maps  a  subset  of  userIDs  that 