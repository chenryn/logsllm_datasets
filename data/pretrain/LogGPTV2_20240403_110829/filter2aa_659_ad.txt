                    jmpname = asm_text.split(' ')[0]
                    real_insns.append("%x: %s" % (ea, jmpname + ' loc_' + 
is_obf_branch(int(target, 16))))
                    ea = idc.next_head(ea)
                    continue
        if 'call' in asm_text and 'sub_' in asm_text:
            print(asm_text)
            real_insns.append("call _%x" % get_real_caller(int(asm_text.split("sub_")
[1], 16)))
            ea = idc.next_head(ea)
            continue
        if 'retn' in asm_text:
            real_insns = []
        real_insns.append("%x: %s" % (ea, asm_text))
        ea = idc.next_head(ea)
def analysis_handler_range(start_ea, end_ea):
    sub_handlers = {}
    ea = start_ea
    while ea < end_ea:
        code = is_subhanlder_start(ea)
        print("test %x" % ea)
        if code != None:
            print("start ea %x" % ea)
            sub_handlers[code] = parser_handler(ea + 7)
        ea = idc.next_head(ea)
    return sub_handlers
def is_call_handler(ea):
    kl = ['pushf', "pusha", "mov", "call", "pop"]
    cmd = ''
    call_handler = ''
    for k in kl:
        asm = disasm_filter(ea)
        if 'ds:(dword_8C000' in asm:
            return None, None
        if '[' in asm:
            return None, None
        if 'l,' in asm:
            if 'h' in asm:
                asm = asm.replace("h", "")
            cmd = int(asm.split(', ')[1], 16)
        if 'call' in asm:
            if 'sub_' not in asm:
                return None, None
            call_handler = int(asm.split('sub_')[1], 16)
        if k not in asm:
            return None, None
        ea = idc.next_head(ea)
    return cmd, call_handler
def get_real_caller(ea):
    f = disasm_filter(ea)
    if 'jmp' in f:
        return int(get_jmp_target(f), 16)
    return ea
def fuck_func(ea, out_asm):
    func = ida_funcs.get_func(ea)
    ea = func.start_ea
    out_asm.append("sub_%x:" % ea)
    while ea < func.end_ea:
        cmd, handler = is_call_handler(ea)
        if cmd != None and handler != None:
            if handler not in handler_map:
                print("handler not found: %x", handler)
            if cmd not in handler_map[handler]:
                print("sub handler not found: %x, %x" % (handler, cmd))
            out_asm.append("loc_%x:" % ea)
            out_asm += handler_map[handler][cmd]
            ea += 10
        else:
            asm = disasm_filter(ea)
            out_asm.append("_%x: %s" % (ea, asm))
            ea = idc.next_head(ea)
def fuck_block(start, end, out_asm):
    locs = scan_sym()
    ea = start
    while ea < end:
        cmd, handler = is_call_handler(ea)
        #if "_%x:" % ea in locs:
        out_asm.append("%x:" % ea)
        if cmd != None and handler != None:
            if handler not in handler_map:
                print("handler not found: %x", handler)
            if cmd not in handler_map[handler]:
                print("sub handler not found: %x, %x" % (handler, cmd))
            out_asm += handler_map[handler][cmd]
            ea += 10
        else:
            asm = disasm_filter(ea)
            out_asm.append("%x: %s" % (ea, asm))
            ea = idc.next_head(ea)
def remove_unused(asm_out):
    used = []
    for i in range(len(asm_out)):
        t = asm_out[i] # _46d0: jmp     short _46D7
        if ('jmp' in t or 'call' in t ) and '_' in t and ': ' in t:
            t = t.split(': ')[1]
            if '_' in t:
                t = t.split("_")[1]
            used.append("_" + t.lower())
    print(used)
    for i in range(len(asm_out)):
        t = asm_out[i]
        if ':' in t:
            addr = t[0: t.index(":")]
            if addr.lower() not in used:
                asm_out[i] = t[t.index(":") + 1: ]
def process_list(out_asm):
    for i in range(len(out_asm)):
        out_asm[i] = out_asm[i].replace('loc_', "_")
        out_asm[i] = out_asm[i].replace('loc_', "_")
        out_asm[i] = out_asm[i].replace('short', "")
        out_asm[i] = out_asm[i].replace('ptr', "")
    for idx,i in enumerate(out_asm):
        if 'getnextinsn_0' in i:
            out_asm[idx] = 'call 0x435C'
            out_asm[idx + 1] = "mov   eax, 0x8C000"
        elif 'getnextinsn' in i:
            out_asm[idx]  = 'call 0x900'
            out_asm[idx + 1] = "mov   eax, 0x8C000" 
        if 'jmp     _' in i:
            name = i.split('jmp     _')[1]
            if name in elf.plt:
                out_asm[idx] = "jmp 0x%x" % elf.plt[name]
    rr = "\n".join(out_asm)
    rr = re.sub("[0-9a-fA-F]+h", lambda f: "0x" + f.group()[:-1], rr)
    rr = re.sub("_[A-F0-9]+", lambda f: f.group().lower(), rr)
    print(rr)
def scan_sym():
    locs = []
    for k in handler_map:
        for c in handler_map[k]:
            for asm_text in handler_map[k][c]:
                r = re.search("_[A-Fa-f0-9]+[^f-zF-Z]", asm_text)
                if r : 
                    locs.append(r.group())
    return locs
对提取的代码重建后使⽤ angr 分析
ranges = []
handler_map = {}
for ref in idautils.XrefsTo(0x47D6):
    ranges.append(ref.frm - 3)
ranges.append(0x5C59B)
ranges = sorted(ranges)
for idx, addr in enumerate(ranges):
    if idx == len(ranges) - 1:
        break
    next_addr = ranges[idx + 1]
    print("analysis: %x - %x" % (addr, next_addr))
    handler_map[addr] = analysis_handler_range(addr, next_addr)
print(handler_map)
aaa = []
fuck_block(0x317B, 0x435C, aaa)
fuck_block(0x4814, 0x61B7, aaa)
fuck_block(0x750A9, 0x7CB31, aaa)
fuck_block(0xA30, 0xA75, aaa)
process_list(aaa)
import angr
import claripy
base = 0x400000
proj = angr.Project("./hello")
bvs = claripy.BVS("flag", 64 * 8)
state = proj.factory.blank_state(addr=base + 0x11BC)
state.memory.store(0xA00000, bvs)
state.regs.ecx = 0xA00000
@proj.hook(base + 0x3276, length=0)
def skip_check_equals_(state):
    state.add_constraints(state.regs.eax == 0)
simgr = proj.factory.simgr(state)
found = simgr.explore(find=base+0x3275)
state = found.found[0]
print(state.regs.al)
easyre
利⽤调试器上的解密算法修补好释放出来的真正可执⾏⽂件后，如果没检测到gdb，则会修正下⾯两个数组line和
col。百度了⼀下，这是⼀个叫数织的⼩游戏，25×25最快5分10秒。
state.add_constraints(state.regs.al == 1)
print(state.solver.eval(bvs, cast_to=bytes))
unsigned char line[25][25] = {
    0x06, 0x05, 0x01, 0x03, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x08, 0x01, 0x01, 0x01, 0x01, 0x01,  0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x07, 0x03, 0x01, 0x03, 0x01, 0x04,  0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x01, 0x01, 0x01, 0x02, 0x01,  0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x07, 0x01, 0x04, 0x01, 0x03,  0x02, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,//
    0x06, 0x04,0x04, 0x04,0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x01, 0x02, 0x02, 0x01, 0x02,0x01,0x02,0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x01, 0x01,0x01, 0x01, 0x03, 0x04, 0x03,0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0A, 0x01, 0x01, 0x01, 0x01, 0x01,0x01, 0x01, 0x01,0x01,    0x01, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x07, 0x03, 0x01, 0x03, 0x01, 0x04,   0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x06, 0x01, 0x01,  0x04,0x01,0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00,
    0x07, 0x08,0x01, 0x01,  0x01,0x01,0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x01,0x01, 0x01,0x01, 0x01,0x01, 0x01,0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x0A, 0x02, 0x02, 0x01, 0x02, 0x01, 0x01,0x01, 0x01, 0x01,  0x01, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x05, 0x02, 0x05,0x01, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,// 
  0x06, 0x0C,0x02, 0x01,0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x09, 0x02, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,0x01,0x01, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x07, 0x04, 0x07,0x02,0x01, 0x01,0x01,0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x09, 0x01, 0x01, 0x02, 0x01,0x01,  0x01,0x01,0x01,0x01, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x02, 0x0C, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x04, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x04, 0x04, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00,
};
unsigned char col[25][25] = {
    0x05, 0x05, 0x05,  0x03,  0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,//01
    0x0A, 0x01, 0x01, 0x01, 0x01,  0x01, 0x01,0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x07, 0x01, 0x01, 0x05, 0x01, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x05, 0x01, 0x02,0x04,0x05, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x07, 0x05,0x02, 0x01,0x01,0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x05, 0x01,0x01,0x01,0x01,  0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,//06
    0x05, 0x01,0x02, 0x06, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x07, 0x02, 0x02,0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x06, 0x02, 0x05,0x01,0x03, 0x01, 0x01, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00,
    0x09, 0x01, 0x01, 0x01, 0x01,0x01,0x01,   0x01, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x07, 0x02, 0x01,0x01,0x01, 0x01,0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00,//11 
    0x04, 0x02,  0x05, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x05, 0x03,  0x05,0x01,  0x01, 0x01,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00,
  0x08, 0x01, 0x01,0x01, 0x01, 0x01, 0x01,  0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x06, 0x01,0x01, 0x01, 0x03, 0x05,  0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
花了5个半⼩时拼出下⾯的图案。
  0x06, 0x01, 0x03,  0x05,0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,//16
    0x03, 0x01,0x01,0x03,0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 