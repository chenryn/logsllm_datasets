SwitchStatement exercise, 109–112
syntax, 107–108, 113
when to use, 107
syntax of, 35–36
throw
catch handler, 151–153
example of, 149–153, 156
throw exceptions, 153–154
try/catch blocks
example of, 156
multiple catch handlers, 136–137
multiple exceptions, catching, 137–138
syntax, 134–135
Download from finelybook PI:EMAIL
1178
when keyword, 138–142
try/finally blocks, 318, 322
using, 15, 17, 335
garbage collection, 323–324
static, 176–178
while
blocks, 118
example of, 132
nesting, 117
sentinel variable, 117
syntax, 117
terminating, 117
writing, 118–121
static fields
accessing, 181
creating, 175, 181
shared, 174–175
static keyword, 522
static methods, 173–174, 181
static operators, 505
static properties, 344
static using statements, 176–178
StaticResource keyword, 647
stdarg.h file, 258
stepping through
methods, 78–81, 94
statements, 127–131
StopEngine method, 279
StopFolding method, 464
StopWatch object, 534
StorageFile class, 581
String class, 184
Download from finelybook PI:EMAIL
1179
string data type, 40
string keyword, 184, 215
String.IsNullOrEmpty method, 376
strings, 184
concatenating, 47–48
converting to integers, 47, 59
converting values to, 365, 368
determining if empty, 376
determining if null, 376
interpolation, 48
splitting, 589, 693
struct keyword, 216, 227
StructsAndEnums project, 212–214, 220–223, 224–225
structure variables
copying, 223
declaring, 218, 227
initializing, 227
nullable, 218
Structured Query Language (SQL), 480, 710
structures, 214
classes compared to, 217–218
common types, 214–215
comparing operators in, 509–510
Date, 220–221
declaring, 216, 227
indexers in, 379
initializing, 219–223
IntBits, 367–368
Name, 373
operators and, 216
PhoneNumber, 373–375
quick reference, 227
Download from finelybook PI:EMAIL
1180
ScreenPosition, 340–341, 342
property accessibility, 346
read-only properties, 345
write-only properties, 345
StructsAndEnums project, 224–225
structure variables
copying, 223
declaring, 227
initializing, 227
nullable, 218
System.Int32, 398
Time
declaring, 216
initializing, 219–220
structure variables, declaring, 218
variable declarations, 218
Windows Runtime compatibility, 226
Wrapper, 370–371
styles, applying to user interfaces, 646–654, 655
subscribing to events, 466–467, 476
subtraction (-) operator, 47
subtractValues method, 52
subtrees, binary, 388
Sum method, 260–263, 264
sumTotal variable, 262
SuppressFinalize method, 331
Swap method, 399
switch statement, 203–204
rules for, 108–109
SwitchStatement exercise, 109–112
syntax, 107–108, 113
when to use, 107
Download from finelybook PI:EMAIL
1181
SwitchStatement project, 109–112
symmetric operators, 506–507, 519
synchronization primitives for coordinating tasks, 593–594
synchronizing
concurrent access to data
concurrent collection classes, 597
locked data, 593–594
overview, 590–593
synchronization primitives for coordinating tasks, 593–594, 596–597
thread-safe data access, implementing, 598–607
tasks, 531
threads, 594, 609
Synchronous I/O anti-pattern, 568
System.Array class. See arrays
System.Collections namespace, 412
System.Collections.Concurrent namespace, 412
System.Collections.Generic namespace, 386–387, 411
System.Collections.IEnumerable interface, 435, 441–443
System.Collections.IEnumerator interface, 436
System.IComparable interface, 391–393
System.IComparable interface, 391–393
System.Int32 structure, 214, 398
System.Int64 structure, 214
System.Linq namespace, 489
System.Numerics namespace, 511
System.Object class, 199, 270, 383. See also objects
System.Random class, 231
System.Single structure, 214
System.String class, 184
System.Threading namespace, 528, 594
System.Threading.Tasks namespace, 527
System.ValueTuple structure, 214
Download from finelybook PI:EMAIL
1182
System.ValueType abstract class, 269
System.ValueType package, 173
T
Take method, 491
TakeOff method, 279
Task class, 528–529. See also Task objects
Task Manager
CPU utilization, monitoring, 536–538
launching, 536
Task objects. See tasks
Task class, 578
TaskContinuationOptions enumeration, 530–531
TaskCreationOptions object, 530
tasks
abstracting, 545–549
asynchronous methods and, 582–583
canceling
cancellation tokens, 551–552
cooperative cancellation, 551–561, 566
continuations, 530–531, 563–564, 565
CPU bottlenecks, identifying, 533–545
creating, 529, 564
exception handling, 562–563, 565
faulted
continuations with, 563–564
Faulted task status, 557
Parallel class
abstracting classes with, 545–549
ForEach method, 546, 565
Invoke method, 546, 565
Download from finelybook PI:EMAIL
1183
For method, 545–546, 565
when to use, 549–551
parallelism
implementing, 531–538, 565
Parallel class, 545–551
quick reference, 564–566
running, 530, 564
synchronization primitives for coordinating tasks, 593–594
synchronizing, 531
Task class, 528–529
threads, 528–529
waiting for, 531, 564–565
Tasks namespace, 527
TemperatureMonitor class, 466–467
templates
ASP.NET Web API, 722
Blank App, 615–617, 655
terminating while statements, 117
TestHello project, 3–14
building and running, 11–14
files, 7–8
IntelliSense icons, 11
Main method, 8–10
namespaces
assemblies and, 17
bringing into scope, 15
defining classes in, 14–15
longhand names, 16
TestIfTrue method, 586
testing
Cortana searches, 695–696
for null values, 190–191
Download from finelybook PI:EMAIL
1184
Tree396–399
UWP (Universal Windows Platform) applications, 628–630
TestReader class, 321–322
TextBlock control, 21–24
in scalable user interface, 620–622, 625–626
styles applied to, 649–651
TextBox control, 622–624, 625–626, 661, 664–665
TextReader class, 119
ThenBy method, 486
ThenByDescending method, 486
this keyword, 284, 288, 368, 378
Thread class, 528
thread safety
Dispose method and, 332–333
thread-safe data access, 598–607
Threading namespace, 528, 594
ThreadPool class, 528–529
threads, 525. See also tasks
concurrent, 605
defined, 572
single-threaded applications, 525
suspending execution of, 531
synchronizing, 594, 609
Thread class, 528
thread safety
Dispose method and, 332–333
thread-safe data access, 598–607
Threading namespace, 528, 594
ThreadPool class, 528–529
Thread.Sleep method, 551
throw exceptions, 153–154
throw statement
Download from finelybook PI:EMAIL
1185
catch handler, 151–153
example of, 149–153, 156
throw exceptions, 153–154
ThrowIfCancellationRequested method, 559, 560
throwing exceptions
catch handler, 151–153
example of, 156
finally blocks, 154–155
throw exceptions, 153–154
throw statement, 149–153
tilde (~)
destructor declarations, 317, 335
NOT (~) operator, 365
Time structure
declaring, 216
initializing, 219–220
structure variables, declaring, 218
ToArray method, 427, 497, 500, 502
ToChar method, 127
TODO comments, 167
tokens, cancellation, 551–552, 590
ToList method, 497, 500, 502
ToString method, 45, 59, 67, 210–211, 214, 221, 245, 274, 365, 378, 512
Tree class
creating, 392–396
enumerator, defining, 445–447
querying data in, 491–497
testing, 396–399
TreeEnumerator class, 437–439
trees, binary. See binary trees
TResult parameter (Select method), 483
Triangle class, 356–357
Download from finelybook PI:EMAIL
1186
troubleshooting. See exceptions
try statement, 134–135
try/catch blocks
multiple catch handlers, 136–137
multiple exceptions, catching, 137–138
syntax, 134–135
when keyword, 138–142
try/finally blocks, 318, 322
TSource parameter (Select method), 483
tuples, 173, 214
defined, 68
returning from methods, 68–70, 93
two-way data binding, 664–665, 700
types. See value types
type-safe classes. See generics
typeSelectionChanged method, 43
U
uint data type, 364
uint keyword, 215
ulong keyword, 215
unary operators, 56, 98, 504
unassigned local variables, 40
unboxing, 200–201
unchecked integer arithmetic, 144–145
unchecked keyword, 144–145
expressions, 146–148
statements, 145
underscore (_), 38, 364
unhandled exceptions, 135–136
Union method, 491
Download from finelybook PI:EMAIL
1187
UnionWith method, 421
Universal Windows Platform applications. See UWP (Universal Windows
Platform) applications
unsafe code, pointers and, 204–206
unsafe keyword, 205–206
unsigned int (uint) data type, 364
unsubscribing from events, 467, 476
updating
databases, 733–741
user interfaces, 746–749
user experience (UX), 612
user interfaces, 611–612. See also data binding
adapting with Visual State Manager, 639–645
displaying data in, 658–664
events, 468–469
modifying data with, 664–669
INotifyPropertyChanged interface, 665–668, 700
nameof operator, 668–669
two-way data binding, 664–665, 700
quick reference, 655
scalable, 618–627, 655
ComboBox control, 624–625
Grid control, 619–620
TextBlock control, 620–622, 625–626
TextBox control, 622–624, 625–626
styles applied to, 646–654, 655
tabular layout, 630–639
updating with REST web services, 746–749, 751
user-defined conversion operators, 518
ushort keyword, 215
using statements, 15, 17
garbage collection, 323–324, 335
Download from finelybook PI:EMAIL
1188
static, 176–178
Util class, 285
Min method, 256–257
Sum method, 260–263, 264
UWP (Universal Windows Platform) applications, 50, 226. See also
asynchronous methods
building with Blank App template, 615–617, 655
Cortana searches
quick reference, 701
registration of voice commands, 690–691
testing, 695–696
VCD (voice-command definition) files, 687–690
voice activation, 691–695
creating in Visual Studio 2017, 18–27, 34
adding code to, 30–32
App.xaml.cs file, 28–30
building and running, 25–26, 34
Button control, 24–25
MainPage.xaml.cs file, 27–28
pages in, 21
TextBlock control, 21–24
views of, 18
data binding
with ComboBox control, 669–671
displaying data with, 658–664
INotifyPropertyChanged interface, 665–668, 700
modifying data with, 664–669
nameof operator, 668–669
quick reference, 700–701
two-way, 664–665, 700
features of, 612–615
life cycle of, 613
Download from finelybook PI:EMAIL
1189
multitasking
advantages of, 525–526
multicore processors, 526–527
.NET Framework and, 527
MVVM (Model-View-ViewModel) pattern, 657–658
online resources, 612, 615
remote databases, accessing, 703
data retrieval, 703–709
Entity Framework, 704
entity model, creating, 709–717, 750
error reporting, 742–746
quick reference, 750–751
REST web services
adding/editing data with, 733–741, 751
Azure API app security, 729–730
creating, 718–724, 750
deploying to Azure, 724–726, 750
idempotency, 733
PostCustomerWithHttpMessagesAsync method, 742
retrieving data with, 726–732, 750
UI updates, 746–749, 751
tasks
abstracting, 545–549
cancel, 545–549
continuations, 530–531, 563–564, 565
CPU bottlenecks, identifying, 533–545
creating, 529, 564
exception handling, 562–563, 565
faulted, 557, 563–564
Parallel class, 545–551
parallelism, 531–538, 545–551, 565
quick reference, 564–566
Download from finelybook PI:EMAIL
1190
running, 530, 564
synchronizing, 531
Task class, 528–529
threads, 528–529
waiting for, 531, 564–565
testing, 628–630
user interfaces, 611–612
adapting with Visual State Manager, 639–645