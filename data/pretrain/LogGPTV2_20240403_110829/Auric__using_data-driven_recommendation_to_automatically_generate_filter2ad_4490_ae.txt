our internal teams to enhance our controller software to speed up
execution for a large number of parameter changes.
Improvements to operational efficiency. Auric significantly re-
duced the time and effort to tune the configuration parameters for
the carriers newly added to the cellular networks. Before Auric, the
engineers would manually determine the parameter values based
on experience, or tune them iteratively using trial-and-error ap-
proach to observe service performance improvements. The manual
approach would take them several hours or days to converge to
the near optimal configuration. Because Auric automatically learns
and recommends configuration parameter values for the new car-
riers using dependency models derived from similar carriers in
geographical proximity with matching attribute, we can converge
to the near optimal parameter values faster. This resulted in signifi-
cant improvements in operational efficiency.
Lessons learned. Interpretation of the configuration recommenda-
tion results and their simple explanation for engineers is extremely
important for adoption and eventually aim for complete automation.
Trust and interpretability are major challenges in adoption. Initially,
the engineers were carefully validating the recommendations from
Auric, and the performance impacts of the configuration changes.
Through positive experience and increased confidence over time,
Auric got integrated into an automated launch process when adding
new carriers.
6 LIMITATIONS AND NEW OPPORTUNITIES
In this section, we discuss limitations of Auric and highlight new
research opportunities for configuration management in networks.
Performance feedback for recommended configuration. Cur-
rently, Auric does not model the dynamic aspects of configuration,
and performance feedback. This is because, for a new carrier which
is in locked state and not yet carrying traffic, we could only leverage
the static attributes of the carrier for recommending the configu-
ration parameters. However, once it is unlocked and carrying live
traffic, we could observe the traffic patterns on the new carrier and
its neighbors, congestion scenarios, handovers due to user mobil-
ity, radio channel interference, and service performance impacts,
and then determine if we need to further tune the configuration
parameters. It would be a very interesting research opportunity
to explore the dependency model between configuration parame-
ter values and their impacts on service performance and then use
the learnings to enhance the configuration recommendations for
newly added carriers as well as existing neighboring carriers. As
an example, for the similar carriers with matching attributes and
different distribution of parameter values, we can provide higher
weights (in our voting approach) to configuration changes that
have improved service performance in the past. The performance
impacts for historical configuration changes can also potentially
help us to address the inconclusive mismatches (67%) and guide
the engineers in improving the configuration tuning process. Static
attributes fit nicely into two-dimensional modeling as incorporated
in Auric. With both static and dynamic attributes, the problem
becomes multi-dimensional with configuration parameters and ser-
vice performance modeled as a time-series. Sophistical learning
algorithms such as convolutional neural networks or recurrent neu-
ral networks could potentially help in improvising configuration
recommendations.
Bootstrapping configuration for the unobserved. Since Auric
uses a classification approach for data-driven configuration recom-
mendation, it can only recommend parameter values associated
with carrier attributes that have been historically observed in oper-
ational network data. Thus, if carriers are added with new attribute
values (e.g., new carrier frequency, or hardware version), then Au-
ric cannot make recommendations because it would not be able
to identify similar carriers with matching attribute values. In such
scenarios, we currently stick with the default configuration set-
tings which may not be optimal. The engineers then take a manual
approach for tuning the configuration parameter values on these
carriers. In the future, one could explore automated reinforcement
learning based approaches to systematically trial new parameter
values with performance feedback on the carriers.
7 CONCLUSIONS
Configuration management is a very important task for cellular
network operations. In this paper, we proposed a new data-driven
recommendation approach Auric to automatically generate configu-
ration parameters for carriers added in the cellular networks. Auric
uses geographical proximity and collaborative filtering to learn the
dependency model between configuration and carrier attributes.
Evaluation of Auric using real-world LTE network data shows a
significantly high accuracy (96%). After verification of our results by
the network engineers, we implemented changes that improved net-
work configuration. Our deployment of Auric in production setup
over two months and successful use by the engineering teams to
update configuration for newly added carriers demonstrates its
ability to effectively generate network configurations.
Acknowledgement
We thank our shepherd Kun Tan, ACM SIGCOMM anonymous
reviewers, Jennifer Yates, Xuan Liu, and Chris Hristov for their in-
sightful feedback on our paper. We appreciate the collaboration and
continuous support from the Network Engineering and Operations
teams in the application of Auric in production setup.
818
Auric: Using Data-driven Recommendation to
Automatically Generate Cellular Configuration
SIGCOMM ’21, August 23–28, 2021, Virtual Event, USA
com/
REFERENCES
[1] 2015. 3GPP LTE TS 32.450. Telecommunication management; Key
Performance Indicators (KPI) for Evolved Universal Terrestrial Radio
Access Network (E-UTRAN): Definitions.
[2] 2015. 3GPP LTE TS 32.500. Telecommunication management; Self-
Organizing Networks (SON); Concepts and requirements.
[3] 2015. 3GPP LTE TS 36.300. Evolved Universal Terrestrial Radio Access
(E-UTRA) and Evolved Universal Terrestrial Radio Access Network
(E-UTRAN); Overall description.
[4] 2021. Firsnet. Retrieved January 26, 2021 from https://www.firstnet.
[5] 2021. Narrowband Internet of Things (NB-IoT). Retrieved January 26,
2021 from https://en.wikipedia.org/wiki/Narrowband_IoT
[6] 2021. Symmetry, Skewness and Kurtosis. Retrieved June 14, 2021
from https://www.real-statistics.com/descriptive-statistics/symmetry-
skewness-kurtosis/
[7] Anubhavnidhi Abhashkumar, Aaron Gember-Jacobson, and Aditya
Akella. 2020. AED: Incrementally Synthesizing Policy-Compliant and
Manageable Configurations. In Proceedings of the 16th International
Conference on Emerging Networking EXperiments and Technologies.
Association for Computing Machinery, New York, NY, USA, 482–495.
https://doi.org/10.1145/3386367.3431304
[8] Deepak Agarwal and Bee-Chung Chen. 2009. Regression-Based Latent
Factor Models. In Proceedings of the 15th ACM SIGKDD International
Conference on Knowledge Discovery and Data Mining (Paris, France)
(KDD ’09). Association for Computing Machinery, New York, NY, USA,
19–28. https://doi.org/10.1145/1557019.1557029
[9] Ryan Beckett, Aarti Gupta, Ratul Mahajan, and David Walker. 2017.
A General Approach to Network Configuration Verification. In Pro-
ceedings of the Conference of the ACM Special Interest Group on Data
Communication (Los Angeles, CA, USA) (SIGCOMM ’17). Associa-
tion for Computing Machinery, New York, NY, USA, 155–168. https:
//doi.org/10.1145/3098822.3098834
[10] Ryan Beckett, Ratul Mahajan, Todd Millstein, Jitendra Padhye, and
David Walker. 2016. Don’t Mind the Gap: Bridging Network-Wide
Objectives and Device-Level Configurations. In Proceedings of the 2016
ACM SIGCOMM Conference (Florianopolis, Brazil) (SIGCOMM ’16).
Association for Computing Machinery, New York, NY, USA, 328–341.
https://doi.org/10.1145/2934872.2934909
[11] Ryan Beckett, Ratul Mahajan, Todd Millstein, Jitendra Padhye, and
David Walker. 2017. Network Configuration Synthesis with Abstract
Topologies. In Proceedings of the 38th ACM SIGPLAN Conference on
Programming Language Design and Implementation (Barcelona, Spain)
(PLDI 2017). Association for Computing Machinery, New York, NY,
USA, 437–451. https://doi.org/10.1145/3062341.3062367
[12] Rüdiger Birkner, Dana Drachsler-Cohen, Laurent Vanbever, and Mar-
tin Vechev. 2020. Config2Spec: Mining Network Specifications from
Network Configurations. In 17th USENIX Symposium on Networked
Systems Design and Implementation (NSDI 20). USENIX Association,
Santa Clara, CA.
[13] Ahmed El-Hassany, Petar Tsankov, Laurent Vanbever, and Martin
Vechev. 2018. Netcomplete: Practical Network-Wide Configuration
Synthesis with Autocompletion. In Proceedings of the 15th USENIX
Conference on Networked Systems Design and Implementation (Renton,
WA, USA) (NSDI’18). USENIX Association, USA, 579–594.
[14] Seyed K. Fayaz, Tushar Sharma, Ari Fogel, Ratul Mahajan, Todd Mill-
stein, Vyas Sekar, and George Varghese. 2016. Efficient Network Reach-
ability Analysis Using a Succinct Control Plane Representation. In
Proceedings of the 12th USENIX Conference on Operating Systems Design
and Implementation (Savannah, GA, USA) (OSDI’16). USENIX Associa-
tion, USA.
[15] Ari Fogel, Stanley Fung, Luis Pedrosa, Meg Walraed-Sullivan, Ramesh
Govindan, Ratul Mahajan, and Todd Millstein. 2015. A General Ap-
proach to Network Configuration Analysis. In Proceedings of the 12th
USENIX Conference on Networked Systems Design and Implementation
(Oakland, CA) (NSDI’15). USENIX Association, USA, 469–483.
[16] Aaron Gember-Jacobson, Aditya Akella, Ratul Mahajan, and
Hongqiang Harry Liu. 2017. Automatically Repairing Network Con-
trol Planes Using an Abstract Representation. In Proceedings of the
26th Symposium on Operating Systems Principles (Shanghai, China)
(SOSP ’17). Association for Computing Machinery, New York, NY, USA,
359–373. https://doi.org/10.1145/3132747.3132753
[17] Aaron Gember-Jacobson, Raajay Viswanathan, Aditya Akella, and
Ratul Mahajan. 2016. Fast Control Plane Analysis Using an Abstract
Representation. In Proceedings of the 2016 ACM SIGCOMM Conference
(Florianopolis, Brazil) (SIGCOMM ’16). Association for Computing
Machinery, New York, NY, USA, 300–313. https://doi.org/10.1145/
2934872.2934876
[18] Ian Goodfellow, Yoshua Bengio, and Aaron Courville. 2016. Deep
Learning. The MIT Press.
[19] Ramesh Govindan, Ina Minei, Mahesh Kallahalla, Bikash Koley, and
Amin Vahdat. 2016. Evolve or Die: High-Availability Design Principles
Drawn from Googles Network Infrastructure. In Proceedings of the
2016 ACM SIGCOMM Conference (Florianopolis, Brazil) (SIGCOMM ’16).
ACM, New York, NY, USA, 58–72. https://doi.org/10.1145/2934872.
2934891
[20] T. Hastie, R. Tibshirani, and J.H. Friedman. 2009. The Elements of
Statistical Learning: Data Mining, Inference, and Prediction. Springer.
https://books.google.com/books?id=eBSgoAEACAAJ
[21] Yigong Hu, Gongqi Huang, and Peng Huang. 2020. Automated Reason-
ing and Detection of Specious Configuration in Large Systems with
Symbolic Execution. In 14th USENIX Symposium on Operating Systems
Design and Implementation (OSDI 20). USENIX Association, 719–734.
https://www.usenix.org/conference/osdi20/presentation/hu
[22] Siva Kesava Reddy Kakarla, Ryan Beckett, Behnaz Arzani,
GRoot: Proac-
In SIGCOMM 2020.
Todd Millstein, and George Varghese. 2020.
tive Verification of DNS Configurations.
https://www.microsoft.com/en-us/research/publication/groot-
proactive-verification-of-dns-configurations/ Best Paper Award.
[23] Siva Kesava Reddy Kakarla, Alan Tang, Ryan Beckett, Karthick Ja-
yaraman, Todd Millstein, Yuval Tamir, and George Varghese. 2020.
Finding Network Misconfigurations by Automatic Template Infer-
ence. In 17th USENIX Symposium on Networked Systems Design and
Implementation (NSDI 20). USENIX Association, Santa Clara, CA.
https://www.usenix.org/conference/nsdi20/presentation/kakarla
[24] Peyman Kazemian, George Varghese, and Nick McKeown. 2012.
Header Space Analysis: Static Checking for Networks. In Proceed-
ings of the 9th USENIX Conference on Networked Systems Design and
Implementation (San Jose, CA) (NSDI’12). USENIX Association, USA.
[25] Blerina Lika, Kostas Kolomvatsos, and Stathes Hadjiefthymiades. 2014.
Facing the cold start problem in recommender systems. Expert Systems
with Applications 41, 4, Part 2 (2014), 2065 – 2073. https://doi.org/10.
1016/j.eswa.2013.09.005
[26] Hongqiang Harry Liu, Xin Wu, Wei Zhou, Weiguo Chen, Tao Wang,
Hui Xu, Lei Zhou, Qing Ma, and Ming Zhang. 2018. Automatic Life
Cycle Management of Network Configurations. In Proceedings of the
Afternoon Workshop on Self-Driving Networks (Budapest, Hungary)
(SelfDN 2018). Association for Computing Machinery, New York, NY,
USA, 29–35. https://doi.org/10.1145/3229584.3229585
[27] Ajay Mahimkar, Zihui Ge, Jia Wang, Jennifer Yates, Yin Zhang, Joanne
Emmons, Brian Huntley, and Mark Stockert. 2011. Rapid detection
of maintenance induced changes in service performance. In ACM
CoNEXT.
819
SIGCOMM ’21, August 23–28, 2021, Virtual Event, USA
Ajay Mahimkar, Ashiwan Sivakumar, Zihui Ge, Shomik Pathak, Karunasish Biswas
[28] Ajay Mahimkar, Zihui Ge, Jennifer Yates, Chris Hristov, Vincent Cor-
daro, Shane Smith, Jing Xu, and Mark Stockert. 2013. Robust Assess-
ment of Changes in Cellular Networks. In ACM CoNEXT.
[29] Ajay Mahimkar, Han Hee Song, Zihui Ge, Aman Shaikh, Jia Wang,
Jennifer Yates, Yin Zhang, and Joanne Emmons. 2010. Detecting the
Performance Impact of Upgrades in Large Operational Networks. In
ACM SIGCOMM.
[30] Haohui Mai, Ahmed Khurshid, Rachit Agarwal, Matthew Caesar,
P. Brighten Godfrey, and Samuel Talmadge King. 2011. Debugging
the Data Plane with Anteater. SIGCOMM Comput. Commun. Rev. 41, 4
(Aug. 2011), 290–301.
[31] Santhosh Prabhu, Kuan-Yen Chou, Ali Kheradmand, P. Brighten God-
frey, and Matthew Caesar. 2020. Plankton: Scalable network configura-
tion verification through model checking. In 17th USENIX Symposium
on Networked Systems Design and Implementation (NSDI 20). USENIX
Association, Santa Clara, CA.
[32] Chaithan Prakash, Jeongkeun Lee, Yoshio Turner, Joon-Myung Kang,
Aditya Akella, Sujata Banerjee, Charles Clark, Yadi Ma, Puneet Sharma,
and Ying Zhang. 2015. PGA: Using Graphs to Express and Automat-
ically Reconcile Network Policies. In Proceedings of the 2015 ACM
Conference on Special Interest Group on Data Communication (London,
United Kingdom) (SIGCOMM ’15). Association for Computing Ma-
chinery, New York, NY, USA, 29–42. https://doi.org/10.1145/2785956.
2787506
[33] Juan Ramiro and Khalid Hamied. 2011. Self-Organizing Networks
(SON): Self-Planning, Self-Optimization and Self-Healing for GSM,
UMTS and LTE. (2011).
[34] Al Mamunur Rashid, George Karypis, and John Riedl. 2008. Learning
Preferences of New Users in Recommender Systems: An Information
Theoretic Approach. SIGKDD Explor. Newsl. 10, 2, 90–100. https:
//doi.org/10.1145/1540276.1540302
[35] Shambwaditya Saha, Santhosh Prabhu, and P. Madhusudan. 2015. Net-
Gen: Synthesizing Data-Plane Configurations for Network Policies. In
Proceedings of the 1st ACM SIGCOMM Symposium on Software Defined
Networking Research (Santa Clara, California) (SOSR ’15). Association
for Computing Machinery, New York, NY, USA, Article 17, 6 pages.
https://doi.org/10.1145/2774993.2775006
[36] Jesus Bobadilla Sancho, Fernando Ortega Requena, Antonio Hernando
Esteban, and Jesús Bernal Bermúdez. 2012. A collaborative filtering
approach to mitigate the new user cold start problem. Knowledge-Based
Systems 26 (February 2012), 225–238. http://oa.upm.es/15302/
[37] Samuel Steffen, Timon Gehr, Petar Tsankov, Laurent Vanbever, and
Martin Vechev. 2020. Probabilistic Verification of Network Configu-
rations. In Proceedings of the Annual Conference of the ACM Special
Interest Group on Data Communication on the Applications, Technolo-
gies, Architectures, and Protocols for Computer Communication (Virtual
Event, USA) (SIGCOMM ’20). Association for Computing Machinery,
New York, NY, USA, 750–764. https://doi.org/10.1145/3387514.3405900
[38] Xudong Sun, Runxiang Cheng, Jianyan Chen, Elaine Ang, Owolabi
Legunsen, and Tianyin Xu. 2020. Testing Configuration Changes in
Context to Prevent Production Failures. In 14th USENIX Symposium
on Operating Systems Design and Implementation (OSDI 20). USENIX
Association, 735–751. https://www.usenix.org/conference/osdi20/
presentation/sun
[39] Yu-Wei Eric Sung, Xiaozheng Tie, Starsky H.Y. Wong, and Hongyi Zeng.
2016. Robotron: Top-down Network Management at Facebook Scale.
In Proceedings of the 2016 ACM SIGCOMM Conference (Florianopolis,
Brazil) (SIGCOMM ’16). Association for Computing Machinery, New
York, NY, USA, 426–439. https://doi.org/10.1145/2934872.2934874
[40] Chunqiang Tang, Thawan Kooburat, Pradeep Venkatachalam, Akshay
Chander, Zhe Wen, Aravind Narayanan, Patrick Dowell, and Robert
Karl. 2015. Holistic Configuration Management at Facebook. In Pro-
ceedings of the 25th Symposium on Operating Systems Principles (Mon-
terey, California) (SOSP ’15). Association for Computing Machinery,
New York, NY, USA, 328–343. https://doi.org/10.1145/2815400.2815401
[41] Bingchuan Tian, Xinyi Zhang, Ennan Zhai, Hongqiang Harry Liu,
Qiaobo Ye, Chunsheng Wang, Xin Wu, Zhiming Ji, Yihong Sang, Ming
Zhang, Da Yu, Chen Tian, Haitao Zheng, and Ben Y. Zhao. 2019. Safely
and Automatically Updating In-Network ACL Configurations with
Intent Language. In Proceedings of the ACM Special Interest Group on
Data Communication (Beijing, China) (SIGCOMM ’19). Association for
Computing Machinery, New York, NY, USA, 214–226. https://doi.org/
10.1145/3341302.3342088
820