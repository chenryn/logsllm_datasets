(https://github.com/kubernetes/heapster),Zabbix(https://www.zabbix.com/)等工具采集,用于识别出韧性风险后对
韧性风险与服务降级的因果关系分析.
4.2.2 实验结果分析
案例分析中,对目标系统分别以混沌实验次数10次、20次、50次、100次进行了韧性风险识别.由于每次
引入的系统环境扰动都是随机生成的,为了观察随机性对识别出的韧性风险数量的影响,各混沌实验次数的韧
性识别过程均实行了3次.表6展示了不同混沌实验次数下所识别出的韧性风险数量.
Table 6 Number of identified resilience risks in different chaos experiments
表6 不同混沌实验次数下识别的韧性风险数量
混沌实验次数 第1次识别数量 第2次识别数量 第3次识别数量
10 0 2 0
20 2 5 3
50 5 10 18
100 20 12 24
从表 6 的验证结果可以看出,本文提出的微服务韧性需求识别方法能够识别出一定数量的目标微服务架
构系统的韧性风险.虽然在相同混沌实验次数下识别到的韧性风险数量有一定差异,但是低混沌实验次数识别
到的韧性风险数量均低于高次数混沌实验识别到的数量,说明识别过程中混沌实验的次数越多,通过混沌实验
发现的韧性风险越多.从相同混沌实验次数的风险识别结果比较中可以看出:系统扰动生成的随机性对识别出
的韧性风险数量有着较大影响,在混沌实验次数较少的情况下,有着没有识别出任何韧性风险的可能性.
由于混沌实验中的系统环境扰动是随机生成的,为了验证韧性风险识别过程中重复进行相同混沌实验的
可能性,我们对每一次识别过程中生成的系统环境扰动以及韧性风险进行了统计,统计结果见表 7.从表 7 中可
以看出:虽然在混沌实验次数较大的情况下出现了重复的系统环境扰动,重复生成的系统环境扰动数量相对整
个识别过程中生成的系统环境扰动数量可以忽略不计.
Table 7 Number of duplicate system disruptions and resilience risks in different chaos experiments
表7 混沌实验中重复的系统环境扰动和韧性风险数量统计
混沌实验次数 重复生成的系统环境扰动数量(3次识别过程总和) 重复识别的韧性风险数量(3次识别过程总和)
10 0 0
20 0 0
50 1 0
100 3 0
4.3 Sock-Shop系统的韧性风险分析
限于文章篇幅,本文将以一个实际的韧性风险为例,展示对Sock Shop系统韧性风险的分析过程.图11为一
次混沌实验中订单服务每秒成功交易量的性能曲线,在混沌实验中引入的系统环境扰动为对 carts 服务的容器
的CPU占用率提升至100%.图11中,蓝色曲线为混沌实验中收集到的性能曲线,红色曲线为通过Holt Winters
算法以正常压力场景下的历史数据为输入得到的性能基线曲线.可以看出,图11中一段时间内订单服务的实际
性能明显低于其性能基线,说明订单服务由于环境扰动进入了服务降级状态,且通过计算可得知该次服务降级
的性能损失高于其性能损失阈值(500个交易).因此,本次混沌实验中引入的系统环境扰动被认定为韧性风险.
在混沌实验的过程中,通过 Prometheus 组件实际采集到的各服务的性能指标包括服务的每秒请求数量
(qps,其中包括成功的请求量qps(2xx)以及失败的请求量qps(4xx))以及服务请求延时这两项性能指标.在韧性风
险识别阶段中的设立服务性能指标(表1)将通过以上指标换算得到.如,
响应成功率=qps(2xx)/(qps(2xx)+qps(4xx))).
除了收集服务性能的监控数据外,同时会收集容器以及节点的性能数据,具体收集的性能数据见表8.
1246 Journal of Software 软件学报 Vol.32, No.5, May 2021
Fig.11 A service degradation occurred in a chaos experiment
图11 一次混沌实验中发生的服务降级
Table 8 Collected performance data in chaos experiments
表8 混沌实验过程中收集的性能数据
系统资源类型 性能指标 说明
qps(2xx) 每秒成功请求量(requests/s)
服务 qps(4xx) 每秒失败请求量(requests/s)
Latency 服务响应延时(s)
CPU usage CPU使用率(%)
MEM usage 内存使用率(%)
FS reads bytes 每秒文件系统读入字节数(bytes/s)
容器
FS write bytes 每秒文件系统写入字节数(bytes/s)
Network input packets 每秒网络传入包数(pakcets/s)
Network output packets 每秒网络传输包数(pakcets/s)
CPU usage CPU使用率(%)
MEM usage 内存使用率(%)
Disk reads bytes 每秒磁盘读入字节数(bytes/s)
节点
Disk write bytes 每秒磁盘写入字节数(bytes/s)
Network input packets 每秒网络传入包数(pakcets/s)
Network output packets 每秒网络传输包数(pakcets/s)
在性能指标的因果关系图构建过程中,需要保证每个时间戳下各性能指标均存在有效值,但是表 3 中各项
通过换算得到的服务性能指标并不能保证这一点(如在qps(2xx)和qps(4xx)均为0的情况下,相应的成功率是无
效值),因此在韧性风险的分析过程中,直接使用了实际收集的服务性能指标进行韧性风险分析,构建韧性风险
影响链路时的目标节点将使用与违反服务韧性目标的性能指标直接相关的服务性能指标(如订单服务的每秒
成功交易量与其每秒成功请求数直接相关).通过因果搜索算法得到各项性能指标之间的因果关系图如图12所
示(电子版文档中,可以放大该图查看细节).其中,蓝色节点为服务的性能指标,红色节点为容器的性能指标,绿色
节点为kubernetes集群的工作节点的性能指标.
图 13 为图 12 中所有服务每秒请求数量(qps)的因果关系图,在与图 9 的比较后可以看出:仅通过性能数据
所构建的因果关系图基本与 sock-shop 的系统架构图一致,并且能够反映出各微服务在业务场景上的先后关系
(如浏览商品(catalogue 服务)→添加购物车(carts服务)→用户下单(orders服务)).说明通过因果搜索算法生成的
因果关系图在实际物理关系上具有一定程度的准确性.
以图 12 的因果关系图为输入,计算图中所有因果关系边的权重,并以服务降级的性能指标(每秒成功交易
量)直接相关的服务性能指标(service/orders/qps(2xx))为终点,按照深度优先遍历的方式寻找所有直接或间接指
向该节点的性能指标.最终得到的影响服务降级的性能指标以及对应的因果关系边的权重如图14所示.
殷康璘 等:基于混沌工程的微服务韧性风险识别和分析 1247
Fig.12 Causality graph of performance indicators of all performance indicators
图12 所有性能指标之间的因果关系图
Fig.13 Causality relations among service QPS
图13 服务QPS之间的因果关系
(a) 图为部分性能指标之间的因果关系及权重
(b) 图为全部性能指标之间的因果关系及权重
Fig.14 Performance indicators that influence the service degradation and corresponding causality edges
图14 影响服务降级的性能指标以及对应的因果关系边
1248 Journal of Software 软件学报 Vol.32, No.5, May 2021
将图 14中的因果链路根据因果关系边的权重进行排序,最终输出的韧性风险影响链路如图 15所示.图 15
中标注为红色的性能指标(container/carts/CPU Usage)被混沌实验中引入的环境扰动直接产生影响的性能指标,
可以看出,优先输出的韧性风险影响链路均命中了引入的系统环境扰动.
1. container/carts-db/FS Reads Bytes→container/carts/CPU Usage→service/carts/qps(2xx)→service/carts/latency→
service/front-end/latency→service/front-end/qps(2xx)→service/f ront-end/qps(4xx/5xx)→service/orders/latency→
service/catalogue/qps(2xx)→service/orders/qps(2xx)→container/orders/CPU Usage→container/orders/Network Output Packets→
container/orders/Network Input Bytes→container/orders-db/Network Input Packets→container/orders/Network Output Bytes→
container/orders/Network Input Packets→container/orders/MEM Usage→service/orders/qps(2xx)
2. container/carts-db/FS Reads Bytes→container/carts/FS Reads Bytes→container/carts/CPU Usage→service/carts/qps(2xx)→
service/carts/latency→service/front-end/latency→service/front-end/qps(2xx)→service/front-end/qps(4xx/5xx)→
service/orders/latency→service/catalogue/qps(2xx)→service/orde rs/qps(2xx)→container/orders/CPU Usage→
container/orders/Network Output Packets→container/orders/Network Input Bytes→container/orders-db/Network Input Packets→
container/orders/Network Output Bytes→container/orders/Netwo rk Input Packets→
container/orders/MEM Usage→service/orders/qps(2xx)
…
Fig.15 Resilience risk influence chain
图15 韧性风险影响链路
通过观察图15韧性风险影响链路中各性能指标的变化,发现对cart容器进行CPU加压(container/cart/cpu)
提高了 cart 服务的延时(service/cart/latency),并减少了其他服务的请求量(service/服务/qps(200)),因此减少了