### 4. 时间线时间线，主要用来展示 HTTP、HTTPS、WebSocket加载的状态和时间的一个关系，用于直观感受页面的加载过程。如果是多条竖线堆叠在一起，那说明这些资源被同时被加载。至于具体到每个文件的加载信息，还需要用到下面要讲的详细列表。
### 5. 详细列表这个区域是最重要的，它详细记录了每个资源从发起请求到完成请求这中间所有过程的状态，以及最终请求完成的数据信息。通过该列表，你就能很容易地去诊断一些网络问题。详细列表是我们本篇文章介绍的重点，不过内容比较多，所以放到最后去专门介绍了。
### 6. 下载信息概要下载信息概要中，你要重点关注下 DOMContentLoaded 和 Load两个事件，以及这两个事件的完成时间。-   DOMContentLoaded，这个事件发生后，说明页面已经构建好 DOM    了，这意味着构建 DOM 所需要的 HTML 文件、JavaScript 文件、CSS    文件都已经下载完成了。-   Load，说明浏览器已经加载了所有的资源（图像、样式表等）。通过下载信息概要面板，你可以查看触发这两个事件所花费的时间。
## 网络面板中的详细列表下面我们就来重点介绍网络面板中的详细列表，这里面包含了大量有用的信息。
### 1. 列表的属性列表的属性比较多，比如 Name、Status、Type、Initiator等等，这个不难理解。当然，你还可以通过点击右键的下拉菜单来添加其他属性，这里我就不再赘述了，你可以自己上手实操一下。另外，你也可以按照列表的属性来给列表排序，默认情况下，列表是按请求发起的时间来排序的，最早发起请求的资源在顶部。当然也可以按照返回状态码、请求类型、请求时长、内容大小等基础属性排序，只需点击相应属性即可。![](Images/436638023e144d1d29e545ca8980b84d.png){savepage-src="https://static001.geekbang.org/resource/image/7b/81/7b296e168a4900d3b5cb8e57cc3f6181.png"}```{=html}```根据属性排序]{.reference}```{=html}```
### 2. 详细信息如果你选中详细列表中的一项，右边就会出现该项的详细信息，如下所示：![](Images/4d7be49f46f6dd9d8e968220f00b7e14.png){savepage-src="https://static001.geekbang.org/resource/image/f7/e6/f76ee3b6b2e6e9629efdd01e6ded57e6.png"}```{=html}```详细请求信息]{.reference}```{=html}```你可以在此查看请求列表中任意一项的请求行和请求头信息，还可以查看响应行、响应头和响应体。然后你可以根据这些查看的信息来判断你的业务逻辑是否正确，或者有时候也可以用来逆向推导别人网站的业务逻辑。
### 3. 单个资源的时间线了解了每个资源的详细请求信息之后，我们再来分析单个资源请求时间线，这就涉及具体的HTTP 请求流程了。![](Images/b8927d59514b66a4a81b0cb4d6251181.png){savepage-src="https://static001.geekbang.org/resource/image/1f/e0/1f4f8c194b02975f6d2848b7b73175e0.png"}```{=html}```浏览器中 HTTP 请求流程]{.reference}```{=html}```我们再回顾下在[《03 \| HTTP请求流程：为什么很多站点第二次打开速度会很快？》](https://time.geekbang.org/column/article/116588)这篇文章，我们介绍过发起一个HTTP 请求之后，浏览器首先查找缓存，如果缓存没有命中，那么继续发起 DNS请求获取 IP 地址，然后利用 IP 地址和服务器端建立 TCP 连接，再发送 HTTP请求，等待服务器响应；不过，如果服务器响应头中包含了重定向的信息，那么整个流程就需要重新再走一遍。这就是在浏览器中一个HTTP 请求的基础流程。那详细列表中是如何表示出这个流程的呢？这就要重点看下时间线面板了：![](Images/24f084886be690184282c2ff1a56350e.png){savepage-src="https://static001.geekbang.org/resource/image/ba/af/ba91f06503bda4b4dc4a54901bd7a8af.png"}```{=html}```单个文件的时间线]{.reference}```{=html}```那面板中这各项到底是什么含义呢？**第一个是Queuing**，也就是排队的意思，当浏览器发起一个请求的时候，会有很多原因导致该请求不能被立即执行，而是需要排队等待。导致请求处于排队状态的原因有很多。-   首先，页面中的资源是有优先级的，比如 CSS、HTML、JavaScript    等都是页面中的核心文件，所以优先级最高；而图片、视频、音频这类资源就不是核心资源，优先级就比较低。通常当后者遇到前者时，就需要"让路"，进入待排队状态。-   其次，我们前面也提到过，浏览器会为每个域名最多维护 6 个 TCP    连接，如果发起一个 HTTP 请求时，这 6 个 TCP    连接都处于忙碌状态，那么这个请求就会处于排队状态。-   最后，网络进程在为数据分配磁盘空间时，新的 HTTP    请求也需要短暂地等待磁盘分配结束。等待排队完成之后，就要进入发起连接的状态了。不过在发起连接之前，还有一些原因可能导致连接过程被推迟，这个推迟就表现在面板中的**Stalled**上，它表示停滞的意思。这里需要额外说明的是，如果你使用了代理服务器，还会增加一个**ProxyNegotiation**阶段，也就是代理协商阶段，它表示代理服务器连接协商所用的时间，不过在上图中没有体现出来，因为这里我们没有使用代理服务器。接下来，就到了**Initial connection/SSL阶段**了，也就是和服务器建立连接的阶段，这包括了建立 TCP连接所花费的时间；不过如果你使用了 HTTPS 协议，那么还需要一个额外的 SSL握手时间，这个过程主要是用来协商一些加密信息的。（关于 SSL协商的详细过程，我们会在 Web 安全模块中介绍。）和服务器建立好连接之后，网络进程会准备请求数据，并将其发送给网络，这就是**Requestsent阶段**。通常这个阶段非常快，因为只需要把浏览器缓冲区的数据发送出去就结束了，并不需要判断服务器是否接收到了，所以这个时间通常不到1 毫秒。数据发送出去了，接下来就是等待接收服务器第一个字节的数据，这个阶段称为Waiting (TTFB)，通常也称为"**第一字节时间**"。 TTFB是反映服务端响应速度的重要指标，对服务器来说，TTFB时间越短，就说明服务器响应越快。接收到第一个字节之后，进入陆续接收完整数据的阶段，也就是**ContentDownload 阶段**，这意味着从第一字节时间到接收到全部响应数据所用的时间。
## 优化时间线上耗时项了解了时间线面板上的各项含义之后，我们就可以根据这个请求的时间线来实现相关的优化操作了。