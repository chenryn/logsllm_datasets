title:HEALERS: A Toolkit for Enhancing the Robustness and Security of
Existing Applications
author:Christof Fetzer and
Zhen Xiao
HEALERS: A Toolkit for Enhancing the Robustness and Security of
Existing Applications
Christof Fetzer, Zhen Xiao
AT&T Labs – Research
180 Park Avenue
Florham Park, N.J. 07932
(cid:0)christof, xiao(cid:1)@research.att.com
Abstract
HEALERS is a practical, high-performance toolkit
that can enhance the robustness and security of existing
applications. For any shared library, it can ﬁnd all func-
tions deﬁned in that library and automatically derives
properties for those functions. Through automated fault-
injection experiments, it can detect arguments that cause
the library to crash and derive safe argument types for
each function. The toolkit can prevent heap and stack
buffer overﬂows that are a common cause of security
breaches. The nice feature of the HEALERS approach
is that it can protect existing applications without ac-
cess to the source code.
Keywords: reliability, robustness, security, wrapper, fault tol-
erance
1 Introduction
Software reliability is becoming increasingly impor-
tant as our daily lives become more and more comput-
erized. Many ﬁnancial transactions nowadays are con-
ducted using computers through the Internet. Big com-
panies (such as AT&T) employ on-line billing to reduce
their operational costs. Both ACM and IEEE offer free
on-line courses as a ﬂexible way to let people acquire
new knowledge during their spare time. Virtual ofﬁce
environment allows people to work comfortably at their
homes. We expect this trend to continue in the years to
come.
At the same time, there is a growing concern on the
correct functioning of computer software under excep-
tional or stressful settings. If a computer crashes, hangs,
or gives erroneous output, it may lead to severe disrup-
tion of service or loss of productivity. The consequences
may be costly due to the increasing reliance on computer
technology in our society.
Unfortunately, previous studies have found that many
existing softwares are not very reliable. The Ballista
project, for example, found that many implementations
of operating systems and C libraries are brittle with re-
spect to invalid inputs [6]. The authors of [2] studied
the bug reports of three open source softwares (Apache,
Gnome, and MySQL) and found that many determinis-
tic bugs exist long after their initial releases. One rea-
son for this is that new features are constantly added to
these softwares without thorough testing. We believe
that such phenomena are common for commercial soft-
wares as well: while many applications desire reliability,
they cannot afford to sacriﬁce functionalities in the cur-
rent competitive market. Given the limited development
budget in today’s economy, it may be prohibitively ex-
pensive to test all boundary conditions before the ofﬁcial
release of the software.
A good protection method for Commercial Off-the-
shelf software should satisfy the following require-
ments:
(cid:0) transparency: The method should provide trans-
parent protection for existing software without re-
quiring recompilation or relinking.
Since the
source code of commercial software is generally
not available, any method that requires modiﬁca-
tion of the source code is undesirable.
(cid:0) adaptivity: Due to the fast software update cycle
in today’s society, the protection method should be
able to adapt quickly to new software releases.
(cid:0) cost-effectiveness: The method should be able to
eliminate a large class of software failures in a cost-
effective manner. Note that a signiﬁcant portion
of the cost involved in hardening software is op-
erational cost: the cost of a computer programmer
is usually much higher than the cost of a group of
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
high-end PCs. Any method that is labor-intensive
will not scale well in a production environment
where many pieces of software need to be pro-
tected.
(cid:0) ﬂexibility: Different applications may have differ-
ent reliability and security requirements and need
different levels of protection. An “one size ﬁts all”
approach would not work. Hence, a good protec-
tion method should be ﬂexible so that it can be con-
ﬁgured to provide only the speciﬁc features an ap-
plication needs.
(cid:0) low overhead: The method should have low over-
head during normal operations. In addition, an ap-
plication should only pay the overhead for the pro-
tection it actually needs. Any method that provides
excessive or overly restrictive protection may not
work well in practice.
In this paper, we describe a software toolkit called
HEALERS (HEALers Enhanced Robustness and Secu-
rity) that demonstrably satisﬁes the above requirements.
HEALERS can provide effective protection for existing
software without source code access. It has a ﬂexible
architecture and can be conﬁgured to suit the needs of
individual applications. It is highly-automated and can
easily adapt to new software releases. Its run time over-
head is small for most applications. The rest of the paper
is organized as follows. Section 2 describes the technol-
ogy used in HEALERS. Section 3 gives an outline of our
software demonstration. Section 4 concludes this paper.
2 Technology
HEALERS is designed to protect applications from a
large class of software errors related to C library func-
tions. Its protection method has the following key com-
ponents:
(cid:0) interception: Our software intercepts function
calls into the C library. This allows it to provide
transparent protection for software that is dynam-
ically linked. Previous studies indicate that a ma-
jor category of software failures related to C library
functions are API failures: function calls with in-
valid arguments may cause the calling process to
terminate abnormally [6]. Intercepting such func-
tion calls gives us a convenient way to check the
validity of their arguments and hence avoid such
failures.
(cid:0) automation: HEALERS uses automated fault-
injection experiments to discover robustness and
security problems in software from third-party ven-
dors [4]. Based on the knowledge gathered from
these experiments, it automatically generates a set
of fault-containment wrappers to correct a large set
of such problems. This proves to be a cost-effective
approach for protecting a wide variety of software
products and for adapting to new software releases.
(cid:0) ﬂexible generation: The HEALERS toolkit is
highly conﬁgurable and can be tuned to satisfy
the individual needs of different applications.
It
generates a variety of fault-containment wrappers
through a set of micro-generators. Such an archi-
tecture facilitates code reuse and makes it easy to
introduce new functionalities into the existing sys-
tem [5].
In the rest of the section, we will describe each of
these components in detail.
2.1 Interception
Our software is implemented as a dynamically load-
able C library wrapper. The wrapper sits between an
application and the C library. It intercepts every C li-
brary function call from the application. On most Unix
systems a user interested in using a wrapper can preload
it by deﬁning the LD PRELOAD environment variable.
This is useful for protecting certain network services. In
addition, a system administrator can enable a wrapper
on a system wide basis through a dynamic link loader.
Since different applications may have different secu-
rity or reliability requirements, they can use different
types of wrappers to satisfy their needs. This is illus-
trated in Figure 1. For example, a process with root
privilege may use a security wrapper that can prevent
buffer overﬂow attacks [3]. Previous studies indicate
that such kind of attacks are a major cause of security
breaches in operating systems [1]. A user application
that desires high availability can use a robustness wrap-
per that prevents a large class of software failures (e.g.
crashes, hangs, or aborts). Some application may want
to log the errors that occurred during its operation for
later failure diagnosis. In this case, they can use a proﬁl-
ing wrapper that gives a detailed report on what kind of
errors occurred, how frequently they occurred, and what
were the causes of errors (based on errno). The ﬁg-
ure also shows that different applications may share the
same wrapper, or may use different wrappers.
A nice feature of wrapping dynamic link libraries is
that it can protect existing software without source code
access. Note that it only works for applications that are
dynamically linked. In practice, we found that this is not
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
root process
user
application
user
application
user
application
security
wrapper
robustness
wrapper
profiling
wrapper
Shared                    Libraries
Figure 1. A wrapper sits between an application and its shared libraries. Different applications
can use different wrappers, or can share wrappers.
a problem because the overwhelming majority of appli-
cations are dynamically linked. Another limitation of
our approach is that it can only protect errors due to C
library function calls. However, such errors consist of a
large percentage of software errors observed in deployed
applications. Hence, we believe it is important to reduce
such errors.
modate the source string. Our system searches for the
weakest robust argument types for a function by repeat-