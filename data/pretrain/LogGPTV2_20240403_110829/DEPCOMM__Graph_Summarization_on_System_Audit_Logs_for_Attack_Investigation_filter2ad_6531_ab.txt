summary of a community based on their needs.
Evaluation. We evaluate DEPCOMM on 6 real attacks per-
formed in our lab setting and 8 attacks from the DARPA TC
dataset [40]. In total, there are ∼150 million system audit
events and the generated dependency graphs consist of 1, 302.1
nodes and 7, 553.4 edges on average. In our evaluations,
DEPCOMM generates 18.4 communities on average for a
dependency graph, which is ∼ 70× smaller than the original
graph. These communities contain 43.1 nodes and 248.5 edges
on average. Compared with the 9 state-of-the-art community
detection algorithms [36, 38, 41–47], the F1-score achieved by
DEPCOMM (94.1%) is averagely 2.29 times better than those
achieved by the algorithms. Next, DEPCOMM compresses
the communities based on the detected process-based and
resource-based patterns, and achieves a compression rate of
44.7% on average. The compressed communities have 15.7
nodes and 32.1 edges on average, which are reduced by 63.6%
and 87.1%, respectively. Moreover, all
the attacks can be
effectively investigated by using the top-2 InfoPaths, i.e., 2 out
of the 15.7 found InfoPaths on average (12.7%). These results
show that these summary graphs require much less manual
effort for attack investigation. Furthermore, the evaluation of
cooperating with HOLMES [32] shows that all the attack-
related communities except two ones are mapped to the steps
in Kill Chain [48] (achieving a recall of 96.2%), and these
two unrevealed communities can be easily recognized by con-
sidering the adjacent attack communities. Our implementation
of DEPCOMM and the evaluation datasets are available at our
project website [49].
II. BACKGROUND AND MOTIVATION
A. System Event and Causality Analysis
System Audit Event: Monitoring and analyzing kernel-
level audit events are crucial for attack investigation and
detection. System auditing events describe the interactions
between two system entities, which are represented as 3-
tuple (cid:3)subject, operation, object(cid:4). According to the previous
work [8, 9, 12, 13, 16–19], subjects represent process entities,
and objects represent process, ﬁle, or network entities. System
audit events are categorized based on the types of their objects:
process events, ﬁle events, and network events. Process events
record the operations of processes, such as fork and clone. File
events record the operations on ﬁles, such as ﬁles read, write,
and rename. Network events record the operations of network
accesses, such as send and receive messages from sockets.
Causality Analysis: Causality analysis has been widely
applied to attack investigation and detection [8–15]. It infers
the causal dependencies among system audit events, and
organizes them as a dependency graph. A dependency graph
is a directed graph, where nodes represent system entities (i.e.,
processes, ﬁles, and network connections) and edges represent
system audit events. In a dependency graph G(E, V ), a system
is denoted as a directed edge e(u, v), where
audit event
u ∈ V, v ∈ V , e ∈ E, and the direction of the edge represents
the direction of data ﬂow (i.e., ﬂowing from u to v). In
addition, the edge records the start time (e.st) and the end
time of the event (e.et). Given two nodes n1 and n2, n2 has
a causal dependency on n1 if there exist two edges e1(n1, v1)
and e2(v2, n2) such that v1 = v2 and e1.st ≤ e2.et.
B. Motivating Example
We use a data exﬁltration attack as an example to motivate
DEPCOMM. In this attack, the attacker downloads and exe-
cutes a backdoor program bdoor in a target system through an
Apache Sever, and opens a terminal (i.e., bash) via exploiting
the opened backdoor at
the port 9999. The attacker then
downloads an executable script leak.sh, and exploits the root
access to run the script to collect sensitive ﬁles, which are
sent to a suspicious remote host. All these activities among
processes and OS resources are captured in the system audit
logs. We construct the dependency graph by applying causality
analysis from the suspicious event
that sends the ﬁles to
the remote IP (i.e., the POI event). Fig. 1 shows a part of
the dependency graph. The complete dependency graph has
1,038 nodes and 4,039 edges, including attack-related and
benign events. As we can see, it requires non-trivial efforts
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:12:11 UTC from IEEE Xplore.  Restrictions apply. 
542
C1
env.cgi
5677
bdoor
5678
apache2
3549
env.cgi
5673
/tmp/bdoor
bash
5679
sudo
5693
xxx->xxx:9999
. . .
xxx->xxx
curl
5674
../loginuid
su
5694
leak
5753
. . .
../loginuid
#29
cron
. . .
sshd
26438
../analysis.
txt
../analysis.
txt
leak
5753
bzip2
5767
sshd
26442
vim
26561
tar
5766
../upload.t
ar
gpg
5768
cron
644
bash
26451
/dev/null
../result_ja
va
../result_p
ython
../userlist
../upload
C5
C6
../sys.log
C4
../result_ja
va
. . .
C7
/dev/null
../result_p
ython
scp
26177
java
26186
sshd
25427
bash
25435
vim
25735
../userlist
/dev/null
tar
26390
../statistics
.tar.bz2
bash
26068
/dev/null
../track.jar
vim
25525
python
25724
vim
25537
bash
. . .
26307
scp
26382
. . .
sshd
26442
wget
26182
../feature.c
sv
../data.csv
../process.
py
#12
python
#13
vim
../adjust.p
y
../feature.c
sv
C9
../data.csv
../process.
py
bash
24591
python
24747
../data.csv
tar
24747
../program
.tar
/dev/null
sshd
24583
/dev/null
mv
24684
. . .
wget
25055
bash
24970
sshd
24963
mesg
5724
id
5725
. . .
bash
5716
../leak.sh
curl
5750
../upload.t
ar.bz2
curl
5769
C2
C3
xxx->xxx
POI
xxx->xxx
sshd
26295
vim
25094
. . .
C8
C10
(cid:51)(cid:85)(cid:82)(cid:70)(cid:72)(cid:86)(cid:86)(cid:3)
(cid:49)(cid:82)(cid:71)(cid:72)
(cid:41)(cid:76)(cid:79)(cid:72)(cid:3)
(cid:49)(cid:82)(cid:71)(cid:72)
(cid:49)(cid:72)(cid:87)(cid:90)(cid:82)(cid:85)(cid:78)(cid:3)
(cid:49)(cid:82)(cid:71)(cid:72)
(cid:39)(cid:72)(cid:83)(cid:72)(cid:81)(cid:71)(cid:72)(cid:81)(cid:70)(cid:92)
(cid:36)(cid:87)(cid:87)(cid:68)(cid:70)(cid:78)(cid:16)(cid:53)(cid:72)(cid:79)(cid:68)(cid:87)(cid:72)(cid:71)(cid:3)
(cid:40)(cid:89)(cid:72)(cid:81)(cid:87)(cid:86)
(cid:53)(cid:72)(cid:83)(cid:72)(cid:68)(cid:87)(cid:72)(cid:71)(cid:3)
(cid:49)(cid:82)(cid:71)(cid:72)(cid:86)
(cid:53)(cid:72)(cid:83)(cid:72)(cid:68)(cid:87)(cid:72)(cid:71)(cid:3)
(cid:40)(cid:71)(cid:74)(cid:72)(cid:86)
(cid:53)(cid:72)(cid:83)(cid:79)(cid:76)(cid:70)(cid:68)(cid:3)
(cid:82)(cid:73)(cid:3)(cid:68)(cid:3)(cid:49)(cid:82)(cid:71)(cid:72)
(cid:44)(cid:81)(cid:73)(cid:82)(cid:85)(cid:80)(cid:68)(cid:87)(cid:76)(cid:82)(cid:81)(cid:3)(cid:41)(cid:79)(cid:82)(cid:90)(cid:3)
(cid:68)(cid:80)(cid:82)(cid:81)(cid:74)(cid:3)(cid:53)(cid:72)(cid:83)(cid:79)(cid:76)(cid:70)(cid:68)(cid:86)
Fig. 1: Partial dependency graph for a data exﬁltration attack. The complete dependency graph has 1,038 nodes and
4,039 edges. DEPCOMM partitions the dependency graph into 10 process-centric communities, where the red dashed
frames are the communities with attack-related events (bold red edges), and the blue dashed frames are the communities
with only normal events. For the nodes that represent the inputs and the outputs of communities, we create replicas
of such nodes (blue nodes) and assign each copy to a community. These replicas are connected with directed edges
(dashed blue arrows), where the direction indicates the direction of the information ﬂow across communities.
C1
Master: apache2
Time: 2020-06-01 04:09:26 
~ 2020-06-01 04:09:26
InfoPaths:  xxx->xxx→
curl→/tmp/bdoor→bdoor 
[0.5705]
bdoor→bash
C2
Master: bash
Time: 2020-06-01 04:09:26 ~
2020-06-01 04:10:01
InfoPaths: bash→sudo→su 
→ bash→xxx->xxx: 9999→
curl→../leak.sh→leak [0.7366]
C5
Master: cron
Time: 2020-06-01 04:05:01 
~ 2020-06-01 04:10:01
InfoPaths: cron→../loginuid 
[0.6248]
C4
Master: sshd
Time: 2020-05-31 18:12:33 ~
2020-05-31 18:13:35
InfoPaths: xxx->xxx→ sshd 
→bash→vim→../analysis.txt 
[0.4957]
/dev/null
C6
Master: sshd
Time: 2020-05-31 18:06:28 ~
2020-05-31 18:07:47
InfoPaths: xxx->xxx→sshd 
→bash→scp →../sys.log→
java→../result_java [0.4854]
/dev/null
leak
C3
Master: leak
Time: 2020-06-01 04:11:06 ~
2020-06-01 04:11:07
InfoPaths: leak→tar →../ 
upload.tar→bzip2→../upload.t
ar.bz2→gpg→../upload→curl
→ xxx ->xxx [0.8234]
POI
t
s
i
l
r
e
s
u
/
.
.
C8
Master: sshd
Time: 2020-05-30 18:09:52 
~ 2020-05-30 18:10:42
InfoPaths: xxx->xxx→sshd 
→ ba s h→ s cp → ../s ta tis ti 
cs.tar.bz2→tar→../userlist 
[0.4914]
C7
Master: sshd
Time: 2020-05-31 10:00:54 
~ 2020-05-31 10:02:30
I nfoP aths : xxx->xxx→
s s h d → b a s h → p y t h o n 
→../result_python [0.4597]
/
d
e
v
/
n
u
l
l
C9
Master: sshd
Time: 2020-05-30 08:43:29 ~
2020-05-30 08:47:38
InfoPaths: xxx->xxx→ss hd 
bash→wget →.. /data.csv→mv 
→bash→ python →../feature.csv 
[0.4912]
/dev/null
C10
Master: sshd
Time: 2020-05-30 08:54:00 
~2020-05-30 08:55:15
InfoPaths: xxx->xxx→sshd 
→ b a s h → w g e t   → . . / 