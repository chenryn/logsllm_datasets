## 大型全球化电商网站的 GUI 自动化测试脚本管理

原有的方案无法有效解决端到端 (E2E) 的 GUI 自动化测试中复用各个模块的页面对象和业务流程脚本的问题。通过不断的实践，我总结出了一种新的脚本组织结构（如图1所示），以应对这一挑战。

![](https://static001.geekbang.org/resource/image/bf/49/bf72fc0dc07739f21c3ea3de30b01049.png)

**图 1：大型全球化电商网站的 GUI 自动化测试脚本管理**

这种方法的核心是将各个模块的页面对象和业务流程脚本存储在各自的代码库中，并引入版本管理机制。通常情况下，页面对象和业务流程脚本的版本号会与相应的开发版本保持一致。例如，如果模块 A 的版本号为 V1.0.0，则对应的页面对象库和业务流程脚本也应使用 V1.0.0 版本。这样，在 E2E 测试脚本中引用正确版本的页面对象和业务流程脚本时，可以确保测试用例直接调用最新且正确的模块实现。

具体来说，在测试项目中，可以通过 Maven 或 Gradle 等构建工具配置 POM 文件来管理这些依赖关系。图 2 展示了一个典型的 POM 文件中的依赖设置例子，其中包括两个模块：`appcommon` 和 `app.buy`。前者代表了公共组件库，后者则指代特定的前端功能模块。虽然这个例子只展示了两个依赖项，但实际的 E2E 测试项目可能包含更多。

![](https://static001.geekbang.org/resource/image/c6/e2/c6caeaafc81a517ddbe976e6d3db6de2.png)

**图 2：典型测试项目的 POM 文件中的版本依赖关系**

采用这种管理方式后，E2E 团队无需重复开发任何页面对象或业务逻辑脚本，同时还能确保始终与各模块的最新版本同步。这不仅提高了测试脚本的稳定性，减少了因模块变更导致的频繁修改需求，还使得团队能够投入更多时间和精力进行探索性测试，从而发现潜在问题并形成良性循环。

## 总结

从实践经验出发，针对大型全球化电商平台 GUI 测试策略及脚本管理进行了探讨。首先强调了从前端组件级别保证质量的重要性，推荐使用 Jest 进行严格的单元测试。其次指出每个前端模块都应建立自己的页面对象库，并基于此封装业务流程脚本。最后，在组合所有前端模块后，从用户角度出发执行黑盒式的 E2E 测试，尽可能多地重用已有的页面对象库和业务流程脚本。为了支持这一点，建议对前端业务模块的相关资源实施版本化管理。

## 思考题

你的公司或项目组是否正在进行或计划开展 E2E GUI 测试？过程中遇到了哪些难题？又是如何解决的呢？欢迎留言分享经验！

---

# 与时俱进：浅谈移动应用测试方法与思路

大家好，我是茹炳晟。今天我想谈谈“与时俱进：浅谈移动应用测试方法与思路”。尽管之前讨论了许多基于浏览器的自动化测试内容，但在当前移动互联网快速发展的背景下，移动应用程序测试显得尤为重要。根据最近的数据统计显示，亚洲地区近三分之二的网络流量来自于手机端，其余主要来自传统PC端，仅有少量来自平板电脑（也可视为移动端的一部分）。

![](https://static001.geekbang.org/resource/image/59/31/59e6df9d206104e69d94736997509a31.png)

**图 1：Mobile 端和 PC 端流量统计数据**

无论是移动端还是桌面端的应用程序测试，其基本原理都是相通的，比如页面对象模型、业务流程封装等概念同样适用。然而，移动应用因其独特属性而具有一些特有的测试方法和技术。接下来我们将深入探讨 Web App、Native App 和 Hybrid App 三类移动应用的特点及其对应的测试策略。

### 三类移动应用的特点

- **Web App**：本质上就是运行在移动设备上的网页，采用HTML、JavaScript、CSS等技术栈开发，具有天然的跨平台优势。
- **Native App**：针对特定操作系统（iOS或Android）编写的原生应用程序，能提供最佳用户体验和性能表现。
- **Hybrid App**：结合了Web App与Native App的优点，通过嵌入WebView展示HTML5页面，实现了维护简便、体验良好以及良好的跨平台特性。

![](https://static001.geekbang.org/resource/image/1c/67/1c3526428800a068d56dc8e194645867.png)

**图 2：三类移动应用的架构原理**

### 不同类型移动应用的测试方法

- 对于 **Web App**，可沿用之前介绍的所有GUI自动化测试技术，包括数据驱动、页面对象封装等。如果遵循响应式设计原则，则同一套测试用例可在不同分辨率下无缝切换执行。
  
- **Native App** 的测试需要根据不同平台选择合适的自动化框架（如iOS下的XCUITest Driver或Android下的UiAutomator2），但仍可借鉴通用的设计思想。
  
- **Hybrid App** 则需处理更复杂的上下文切换问题，即在原生容器和WebView之间转换，以便准确操作目标元素。

![](https://static001.geekbang.org/resource/image/35/18/35549fade212214212730ab91de83518.png)

**图 4：Hybrid App 中切换 Context 的代码示例**

综上所述，虽然移动应用测试在某些方面与传统GUI测试相似，但也存在许多独特的挑战和解决方案。希望上述内容对你有所帮助！