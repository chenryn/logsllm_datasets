## 大型全球化电商网站的 GUI 自动化测试脚本管理原有的方案，不能解决端到端的 GUI自动化测试复用各个模块的页面对象和业务流程脚本的问题，在不断的实践中，我总结了一个如图1 所示的脚本组织结构来解决这个问题。![](Images/b70cc71d5e686cd39fda9a867ffb4002.png){savepage-src="https://static001.geekbang.org/resource/image/bf/49/bf72fc0dc07739f21c3ea3de30b01049.png"}```{=html}```图 1 大型全球化电商网站的 GUI 自动化测试脚本管理```{=html}```也就是说，将各个模块的页面对象和业务流程脚本放在各自的代码库中，并引入页面对象和业务流程脚本的版本管理机制，通常采用页面对象和业务流程脚本的版本号和开发版本号保持一致的方案。比如模块 A 的版本号是V1.0.0，那么对应的页面对象库和业务流程脚本的版本号也应该是 V1.0.0。在端到端的 GUI自动化测试脚本中，引用各个模块正确的页面对象和业务流程脚本的版本号，测试用例代码就可以直接调用模块的页面对象和业务流程脚本了。具体在测试项目中，模块版本的依赖往往是用 POM 来配置的，如图 2展示了一个典型测试项目的 POM文件中的版本依赖关系，其中引用了两个模块，appcommon模块对应的就是上文提到的"公共组件库"，而 app.buy对应的就是具体依赖的前端模块。由于这只是一个示例，所以我只保留了两个依赖模块，实际的端到端 GUI测试项目往往会包含大量的模块依赖。![](Images/20ee1431b453d46d2cf942885ebadf96.png){savepage-src="https://static001.geekbang.org/resource/image/c6/e2/c6caeaafc81a517ddbe976e6d3db6de2.png"}```{=html}```图 2 典型测试项目的 POM 文件中的版本依赖关系```{=html}```在这种管理机制下，E2E团队不需要重复开发任何的页面对象和业务流程脚本，而且可以始终保证与各个模块的最新实现同步，同时端到端的GUI 测试用例脚本也会比较稳定，不会因为各个模块的改动而频繁地修改。这样一来，E2E团队就会有更多的时间和精力去设计并执行探索式测试，发现更多的潜在缺陷，形成良性循环。
## 总结我从实战的角度，介绍了大型全球化电商网站 GUI测试的策略设计以及测试脚本管理的问题：首先，要从前端组件的级别来保证质量，也就是需要对那些自定义开发的组件进行完整全面的测试。通常前端组件会基于Jest 做比较严格的单元测试。其次，每一个前端模块，都会构建自己的页面对象库，并且在此基础上封装开发自己的业务流程脚本。这些业务流程的脚本，可以组装成每个前端模块的测试用例。最后，把各个前端模块组合在一起之后，站在终端用户的视角以黑盒的方式使用网站的端到端的测试。端到端的测试应该尽可能多地重用各个模块的页面对象库和业务流程脚本来完成。而为了能够在端到端的 GUI自动化测试中，复用各个模块的页面对象和业务流程脚本，我建议的方案是：对各个前端业务模块的页面对象库和业务流程脚本，实施版本化管理机制。
## 思考题你所在的公司或者项目团队，是否已经或者正计划开展 E2E GUI测试？开展过程中，遇到过什么难题，你们又是如何解决的？欢迎你给我留言。![](Images/a0e54ef1f60458fb3ea5596970806f13.png){savepage-src="https://static001.geekbang.org/resource/image/0f/c2/0ffe4c8cc7f61280f42c57db2ccc90c2.jpg"}
# 20 \| 与时俱进：浅谈移动应用测试方法与思路你好，我是茹炳晟。我今天分享的主题是"与时俱进：浅谈移动应用测试方法与思路"。在 GUI自动化测试这个系列，我讲了很多基于浏览器的业务测试的内容，你可能会说，现在移动App 大行其道，对移动应用测试的方法和思路才更重要。确实，现今移动互联网蓬勃发展，很多互联网应用的流量大部分已经不是来自于传统PC 端的 Web 浏览器，而是来自于移动端。图 1 展示了最近 12个月来亚洲地区的流量分布统计，可见，现如今将近三分之二的流量是来自于手机端的，剩下的三分之一来自于传统PC 端，还有很少一部分流量来自于平板电脑（其实这部分也可以归为移动端）。![](Images/bafdd5336a36e084c84a1d761877943d.png){savepage-src="https://static001.geekbang.org/resource/image/59/31/59e6df9d206104e69d94736997509a31.png"}```{=html}```图 1 Mobile 端和 PC 端流量统计数据```{=html}```但是，在我看来无论是移动端测试还是 PC 端测试，都属于 GUI测试的范畴，所以基本的测试思路，比如基于页面对象封装和基于业务流程封装的思想是相通的，之前介绍的那些脚本分层的实现方法也都同样适用于移动端的GUI 测试。与此同时，移动端应用的测试也会因为其自身特点，有一些独特的测试方法与思路。严格来讲，移动端应用又可以进一步细分为三大类：WebApp、Native App 和 HybridApp。所以，我今天分享的内容重点就是，这三类移动应用的测试方法，以及移动专项测试的思路与方法。``{=html}
## 三类移动应用的特点**Web App 指的是移动端的 Web 浏览器，** 其实和 PC 端的 Web浏览器没有任何区别，只不过 Web 浏览器所依附的操作系统不再是 Windows 和Linux 了，而是 iOS 和 Android 了。Web App 采用的技术主要是，传统的 HTML、JavaScript、CSS 等 Web技术栈，当然现在 HTML5 也得到了广泛的应用。另外，Web App所访问的页面内容都是放在服务器端的，本质上就是 Web网页，所以天生就是跨平台的。**Native App 指的是移动端的原生应用，** 对于 Android 是 apk，对于 iOS就是 ipa。Native App 是一种基于手机操作系统（iOS 和Android），并使用原生程序编写运行的第三方应用程序。Native App 的开发，Android 使用的语言通常是 Java，iOS 使用的语言是Objective-C。通常来说，Native App可以提供比较好的用户体验以及性能，而且可以方便地操作手机本地资源。**Hybrid App（俗称：混血应用），是介于 Web App 和 Native App两者之间的一种 App 形式。**Hybrid App 利用了 Web App 和 Native App 的优点，通过一个原生实现的Native Container 展示 HTML5的页面。更通俗的讲法可以归结为，在原生移动应用中嵌入了Webview，然后通过该 Webview 来访问网页。Hybrid App具有维护更新简单，用户体验优异以及较好的跨平台特性，是目前主流的移动应用开发模式。![](Images/5c8efb38ac1f2896b50b232e05b373c5.png){savepage-src="https://static001.geekbang.org/resource/image/1c/67/1c3526428800a068d56dc8e194645867.png"}```{=html}```图 2 三类移动应用的架构原理```{=html}```
## 三类不同移动应用的测试方法了解了 Web App、Native App 和 Hybrid App这三类应用的特性，接下来，我就跟你说说它们的测试方法。好了，我们已经知道了移动应用的三个主要种类，接下来我们从测试的角度再来看看这三类不同的移动应用。对于 Web App，显然其本质就是 Web 浏览器的测试，我在前面文章中介绍的所有GUI自动化测试的方法和技术，比如数据驱动、页面对象模型、业务流程封装等，都适用于Web App 的测试。如果你的 Web 页面是基于自适应网页设计（即符合 Responsive Web设计的规范），而且你的测试框架如果支持 ResponsivePage，那么原则上你之前开发的运行在 PC Web 端的 GUI自动化测试用例，不做任何修改就可以直接在移动端的浏览器上直接执行，当然运行的前提是你的移动端浏览器必须支持Web Driver。其中，自适应网页设计（Responsive WebDesign）是指，同一个网页能够自动识别屏幕分辨率、并做出相应调整的网页设计技术。比如，图3 所示的例子就是同一个网页在不同分辨率下的不同展示效果。![](Images/afd1bde13a4b81632f0c49b6c0778a9b.png){savepage-src="https://static001.geekbang.org/resource/image/cf/b3/cf8b774a44899110d2ba2dfbaa9a4db3.png"}```{=html}```图 3 自适应网页设计实例```{=html}```对 Native App的测试，虽然不同的平台会使用不同的自动化测试方案（比如，iOS 一般采用XCUITest Driver，而 Android 一般采用 UiAutomator2 或者 Espresso等），但是数据驱动、页面对象以及业务流程封装的思想依旧适用，你完全可以把这些方法应用到测试用例设计中。对 Hybrid App 的测试，情况会稍微复杂一点，对 Native Container的测试，可能需要用到 XCUITest 或者 UiAutomator2 这样的原生测试框架，而对Container 中 HTML5 的测试，基本和传统的网页测试没什么区别，所以原本基于GUI 的测试思想和方法都能继续适用。唯一需要注意的是，Native Container 和 Webview分别属于两个不同的上下文（Context），Native Container 默认的 Context为"NATIVE APP\"，而 Webview 默认的 Context 为"WEBVIEW\_+ 被测进程名称"。所以，当需要操作 Webview 中的网页元素时，需要先切换到 Webview 的 Context下，如图 4 所示代码就完成了这一切换操作。![](Images/cbae1e0d361565f3034e7d49a8740d8c.png){savepage-src="https://static001.geekbang.org/resource/image/35/18/35549fade212214212730ab91de83518.png"}```{=html}```图 4 Hybrid App 中切换 Context 的代码示例```{=html}```如此看来，移动端的测试除了使用的测试框架不同以外，测试设计本身和 GUI测试有异曲同工之妙，似乎并没有什么新的内容，那真的是这样吗？答案显然是否定的。