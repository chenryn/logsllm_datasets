    上面的示例输出显示所需应用的进程在 `Example`{.literal}
    控制组中运行，它将 CPU 限制应用到应用的进程。
8.  确定节流应用程序的当前 CPU 消耗：
    ``` literallayout
    # top
    top - 12:28:42 up  1:06,  1 user,  load average: 1.02, 1.02, 1.00
    Tasks: 266 total,   6 running, 260 sleeping,   0 stopped,   0 zombie
    %Cpu(s): 11.0 us,  1.2 sy,  0.0 ni, 87.5 id,  0.0 wa,  0.2 hi,  0.0 si,  0.2 st
    MiB Mem :   1826.8 total,    287.1 free,   1054.4 used,    485.3 buff/cache
    MiB Swap:   1536.0 total,   1396.7 free,    139.2 used.    608.3 avail Mem
      PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND
     6955 root      20   0  228440   1752   1472 R  20.6   0.1  47:11.43 sha1sum
     5760 jdoe      20   0 3604956 208832  65316 R   2.3  11.2   0:43.50 gnome-shell
     6448 jdoe      20   0  743836  31736  19488 S   0.7   1.7   0:08.25 gnome-terminal-
      505 root      20   0       0      0      0 I   0.3   0.0   0:03.39 kworker/u4:4-events_unbound
     4217 root      20   0   74192   1612   1320 S   0.3   0.1   0:01.19 spice-vdagentd
    ...
    ```
    请注意，`PID 6955`{.literal} 的 CPU 消耗从 99% 降至 20%。
:::
::: itemizedlist
**其他资源**
-   [了解控制组群](#setting-limits-for-applications_managing-monitoring-and-updating-the-kernel.html#understanding-control-groups_setting-limits-for-applications "了解控制组群"){.link}
-   [内核资源控制器](#setting-limits-for-applications_managing-monitoring-and-updating-the-kernel.html#what-kernel-resource-controllers-are_setting-limits-for-applications "内核资源控制器"){.link}
-   `cgroups(7)`{.literal}、`sysfs(5)`{.literal} 手册页
:::
:::
::: footnotes
\
------------------------------------------------------------------------
::: {#setting-limits-for-applications_managing-monitoring-and-updating-the-kernel.html#ftn.idm140150694375120 .footnote}
[^\[1\]^](#setting-limits-for-applications_managing-monitoring-and-updating-the-kernel.html#idm140150694375120){.simpara}
Linux Control Group v2 - An Introduction, Devconf.cz 2019 presentation
by Waiman Long
:::
:::
:::
[]{#using-cgroups-v2-to-control-distribution-of-cpu-time-for-applications_managing-monitoring-and-updating-the-kernel.html}
::: chapter
::: titlepage
# []{#using-cgroups-v2-to-control-distribution-of-cpu-time-for-applications_managing-monitoring-and-updating-the-kernel.html#using-cgroups-v2-to-control-distribution-of-cpu-time-for-applications_managing-monitoring-and-updating-the-kernel}第 17 章 使用 cgroups-v2 为应用程序分配可用的 CPU 时间 {.title}
:::
有些应用程序使用太多 CPU
时间，这可能会给您的环境的整体健康状况造成负面影响。您可以将应用程序置于[*控制组版本
2*]{.emphasis} 中(`cgroups-v2`{.literal})，并为这些控制组配置 CPU
限值。因此，您可以在 CPU 消耗中分离应用程序。
用户有两种方法可以规范分配给控制组群的 CPU 时间：
::: itemizedlist
-   设置 [CPU
    带宽](#using-cgroups-v2-to-control-distribution-of-cpu-time-for-applications_managing-monitoring-and-updating-the-kernel.html#proc_controlling-distribution-of-cpu-time-for-applications-by-adjusting-cpu-bandwidth_using-cgroups-v2-to-control-distribution-of-cpu-time-for-applications "通过调整 CPU 带宽来控制应用程序的 CPU 时间"){.link}
    （编辑 `cpu.max`{.literal} 控制器文件）
-   设置 [CPU
    权重](#using-cgroups-v2-to-control-distribution-of-cpu-time-for-applications_managing-monitoring-and-updating-the-kernel.html#proc_controlling-distribution-of-cpu-time-for-applications-by-adjusting-cpu-weight_using-cgroups-v2-to-control-distribution-of-cpu-time-for-applications "通过调整 CPU 权重来控制应用程序的 CPU 时间"){.link}
    （编辑 `cpu.weight`{.literal} 控制器文件）
:::
::: section
::: titlepage
# []{#using-cgroups-v2-to-control-distribution-of-cpu-time-for-applications_managing-monitoring-and-updating-the-kernel.html#mounting-cgroups-v2_using-cgroups-v2-to-control-distribution-of-cpu-time-for-applications}挂载 cgroups-v2 {.title}
:::
在引导过程中，RHEL 9 默认挂载 `cgroup-v2`{.literal}
虚拟文件系统。要在限制应用程序的资源中使用 `cgroup-v1`{.literal}
功能，请手动配置系统。
::: itemizedlist
**先决条件**
-   有 root 权限。
:::
::: orderedlist
**验证步骤**
1.  （可选）验证 `cgroups-v2`{.literal} 文件系统已被挂载：
    ``` literallayout
    # mount -l | grep cgroup
    cgroup2 on /sys/fs/cgroup type cgroup2 (rw,nosuid,nodev,noexec,relatime,seclabel,nsdelegate)
    ```
    `cgroups-v2`{.literal} 文件系统已成功挂载到
    `/sys/fs/cgroup/`{.literal} 目录中。
2.  （可选）检查 `/sys/fs/cgroup/`{.literal} 目录的内容：
    ``` literallayout
    # ll /sys/fs/cgroup/
    -r—​r—​r--.  1 root root 0 Apr 29 12:03 cgroup.controllers
    -rw-r—​r--.  1 root root 0 Apr 29 12:03 cgroup.max.depth
    -rw-r—​r--.  1 root root 0 Apr 29 12:03 cgroup.max.descendants
    -rw-r—​r--.  1 root root 0 Apr 29 12:03 cgroup.procs
    -r—​r—​r--.  1 root root 0 Apr 29 12:03 cgroup.stat
    -rw-r—​r--.  1 root root 0 Apr 29 12:18 cgroup.subtree_control
    -rw-r—​r--.  1 root root 0 Apr 29 12:03 cgroup.threads
    -rw-r—​r--.  1 root root 0 Apr 29 12:03 cpu.pressure
    -r—​r—​r--.  1 root root 0 Apr 29 12:03 cpuset.cpus.effective
    -r—​r—​r--.  1 root root 0 Apr 29 12:03 cpuset.mems.effective
    -r—​r—​r--.  1 root root 0 Apr 29 12:03 cpu.stat
    drwxr-xr-x.  2 root root 0 Apr 29 12:03 init.scope
    -rw-r—​r--.  1 root root 0 Apr 29 12:03 io.pressure
    -r—​r—​r--.  1 root root 0 Apr 29 12:03 io.stat
    -rw-r—​r--.  1 root root 0 Apr 29 12:03 memory.pressure
    -r—​r—​r--.  1 root root 0 Apr 29 12:03 memory.stat
    drwxr-xr-x. 69 root root 0 Apr 29 12:03 system.slice
    drwxr-xr-x.  3 root root 0 Apr 29 12:18 user.slice
    ```
    默认情况下，`/sys/fs/cgroup/`{.literal} 目录（也称为 [*root
    控制组*]{.emphasis} ）包含接口文件（通过
    `cgroup`{.literal}启动）和特定于控制器的文件（如
    `cpuset.cpus.effective`{.literal} ）。此外，还有一些与
    `systemd`{.literal} 相关的目录，如
    `/sys/fs/cgroup/init.scope`{.literal}、`/sys/fs/cgroup/system.slice`{.literal}
    和 `/sys/fs/cgroup/user.slice`{.literal}。
:::
::: itemizedlist
**其他资源**
-   [了解控制组群](#setting-limits-for-applications_managing-monitoring-and-updating-the-kernel.html#understanding-control-groups_setting-limits-for-applications "了解控制组群"){.link}
-   [内核资源控制器](#setting-limits-for-applications_managing-monitoring-and-updating-the-kernel.html#what-kernel-resource-controllers-are_setting-limits-for-applications "内核资源控制器"){.link}
-   `cgroups(7)`{.literal}、`sysfs(5)`{.literal} 手册页
:::
:::
::: section
::: titlepage
# []{#using-cgroups-v2-to-control-distribution-of-cpu-time-for-applications_managing-monitoring-and-updating-the-kernel.html#preparing-the-cgroup-for-distribution-of-cpu-time_using-cgroups-v2-to-control-distribution-of-cpu-time-for-applications}为 CPU 时间的发布准备 cgroup {.title}
:::
要控制应用程序的 CPU 消耗，您需要启用特定的 CPU 控制器，并在
`/sys/fs/cgroup/`{.literal} root 控制组群内创建两个子控制组。root
控制组默认已包含一些资源控制器。因此，建议使用两个级别的子控制组来确保组织清晰
cgroup 文件。
::: itemizedlist
**先决条件**
-   您至少有两个需要修改 CPU 消耗的应用程序。
-   有 root 权限。
-   您已挂载了 `cgroups-v2`{.literal} 文件系统。
:::
::: orderedlist
**步骤**
1.  识别您要限制 CPU 消耗的应用程序的进程 ID(PID)：
    ``` literallayout
    # top
    Tasks: 104 total,   3 running, 101 sleeping,   0 stopped,   0 zombie
    %Cpu(s): 17.6 us, 81.6 sy,  0.0 ni,  0.0 id,  0.0 wa,  0.8 hi,  0.0 si,  0.0 st
    MiB Mem :   3737.4 total,   3312.7 free,    133.3 used,    291.4 buff/cache
    MiB Swap:   4060.0 total,   4060.0 free,      0.0 used.   3376.1 avail Mem
        PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND
      34578 root      20   0   18720   1756   1468 R  99.0   0.0   0:31.09 sha1sum
      34579 root      20   0   18720   1772   1480 R  99.0   0.0   0:30.54 sha1sum
          1 root      20   0  186192  13940   9500 S   0.0   0.4   0:01.60 systemd
          2 root      20   0       0      0      0 S   0.0   0.0   0:00.01 kthreadd
          3 root       0 -20       0      0      0 I   0.0   0.0   0:00.00 rcu_gp
          4 root       0 -20       0      0      0 I   0.0   0.0   0:00.00 rcu_par_gp
    ...
    ```
    示例输出显示，`PID 34578`{.literal} 和 `34579`{.literal} （
    `sha1sum`{.literal}的两个应用程序）消耗大量资源，即
    CPU。这两者都是用于演示 `cgroups-v2`{.literal}
    功能管理的应用程序示例。
2.  验证 `cpu`{.literal} 和 `cpuset`{.literal} 控制器是否在
    `/sys/fs/cgroup/cgroup.controllers`{.literal} 文件中可用：
    ``` literallayout
    # cat /sys/fs/cgroup/cgroup.controllers
    cpuset cpu io memory hugetlb pids rdma
    ```
3.  启用与 CPU 相关的控制器：
    ``` literallayout
    # echo "+cpu" >> /sys/fs/cgroup/cgroup.subtree_control
    # echo "+cpuset" >> /sys/fs/cgroup/cgroup.subtree_control
    ```
    这些命令为 `/sys/fs/cgroup/`{.literal} root 控制组的直接子组启用
    `cpu`{.literal} 和 `cpuset`{.literal} 控制器。[*子组*]{.emphasis}
    是可以指定进程，并根据标准对每个进程应用控制检查的位置。
    用户可以在任何级别上读取 `cgroup.subtree_control`{.literal}
    文件的内容，以了解哪些控制器将在直接子组中启用。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    默认情况下，root 控制组群中的
    `/sys/fs/cgroup/cgroup.subtree_control`{.literal} 文件包含
    `内存`{.literal}和 `pids`{.literal} 控制器。
    :::
4.  创建 `/sys/fs/cgroup/Example/`{.literal} 目录：
    ``` literallayout
    # mkdir /sys/fs/cgroup/Example/
    ```
    `/sys/fs/cgroup/Example/`{.literal}
    目录定义一个子组。另外，上一步为这个子组启用了 `cpu`{.literal} 和
    `cpuset`{.literal} 控制器。
    当您创建 `/sys/fs/cgroup/Example/`{.literal}
    目录时，目录中会自动创建某些 `cgroups-v2`{.literal} 接口文件和
    `cpu`{.literal} 和 `cpuset`{.literal}
    控制器特定文件。`/sys/fs/cgroup/Example/`{.literal} 目录还包含针对
    `内存`{.literal}和 `pids`{.literal} 控制器的特定于控制器的文件。
5.  （可选）检查新创建的子组：
    ``` literallayout
    # ll /sys/fs/cgroup/Example/
    -r—​r—​r--. 1 root root 0 Jun  1 10:33 cgroup.controllers
    -r—​r—​r--. 1 root root 0 Jun  1 10:33 cgroup.events
    -rw-r—​r--. 1 root root 0 Jun  1 10:33 cgroup.freeze
    -rw-r—​r--. 1 root root 0 Jun  1 10:33 cgroup.max.depth
    -rw-r—​r--. 1 root root 0 Jun  1 10:33 cgroup.max.descendants
    -rw-r—​r--. 1 root root 0 Jun  1 10:33 cgroup.procs
    -r—​r—​r--. 1 root root 0 Jun  1 10:33 cgroup.stat
    -rw-r—​r--. 1 root root 0 Jun  1 10:33 cgroup.subtree_control
    …​
    -rw-r—​r--. 1 root root 0 Jun  1 10:33 cpuset.cpus
    -r—​r—​r--. 1 root root 0 Jun  1 10:33 cpuset.cpus.effective
    -rw-r—​r--. 1 root root 0 Jun  1 10:33 cpuset.cpus.partition
    -rw-r—​r--. 1 root root 0 Jun  1 10:33 cpuset.mems
    -r—​r—​r--. 1 root root 0 Jun  1 10:33 cpuset.mems.effective
    -r—​r—​r--. 1 root root 0 Jun  1 10:33 cpu.stat
    -rw-r—​r--. 1 root root 0 Jun  1 10:33 cpu.weight
    -rw-r—​r--. 1 root root 0 Jun  1 10:33 cpu.weight.nice
    …​
    -r—​r—​r--. 1 root root 0 Jun  1 10:33 memory.events.local
    -rw-r—​r--. 1 root root 0 Jun  1 10:33 memory.high
    -rw-r—​r--. 1 root root 0 Jun  1 10:33 memory.low
    …​
    -r—​r—​r--. 1 root root 0 Jun  1 10:33 pids.current
    -r—​r—​r--. 1 root root 0 Jun  1 10:33 pids.events
    -rw-r—​r--. 1 root root 0 Jun  1 10:33 pids.max
    ```
    示例输出包括了文件，如 `cpuset.cpus`{.literal} 和
    `cpu.max`{.literal} 等文件。这些文件特定于 `cpuset`{.literal} 和
    `cpu`{.literal} 控制器。使用
    `/sys/fs/cgroup/cgroup.subtree_control`{.literal}
    文件手动为根的（`/sys/fs/cgroup/`{.literal}）[*直接子控制组*]{.emphasis}启用
    `cpuset`{.literal} 和 `cpu`{.literal} 控制器。
    该目录还包括通用的 `cgroup`{.literal} 控制接口文件，如
    `cgroup.procs`{.literal} 或
    `cgroup.controllers`{.literal}，它们对所有控制组都是通用的，不论启用的控制器是什么。
    `memory.high`{.literal} 和 `pids.max`{.literal} 等文件与
    `内存`{.literal}和 `pids`{.literal} 控制器有关，它们是 root
    控制组(`/sys/fs/cgroup/`{.literal})，且始终默认启用。
    默认情况下，新创建的子组会继承对所有系统的 CPU
    和内存资源的访问权限，而没有任何限制。
6.  在 `/sys/fs/cgroup/Example/`{.literal} 中启用与 CPU
    相关的控制器，以获取只与 CPU 相关的控制器：
    ``` literallayout
    # echo "+cpu" >> /sys/fs/cgroup/Example/cgroup.subtree_control
    # echo "+cpuset" >> /sys/fs/cgroup/Example/cgroup.subtree_control
    ```
    这些命令可确保，直接的子组[*仅*]{.emphasis}具有与 CPU
    时间分发相关的控制器，而不是`内存`{.literal}或 `pids`{.literal}
    控制器。
7.  创建 `/sys/fs/cgroup/Example/tasks/`{.literal} 目录：
    ``` literallayout
    # mkdir /sys/fs/cgroup/Example/tasks/
    ```
    `/sys/fs/cgroup/Example/tasks/`{.literal}
    目录定义了一个子组，它带有只与 `cpu`{.literal} 和 `cpuset`{.literal}
    控制器相关的文件。
8.  （可选）检查另一个子组：
    ``` literallayout
    # ll /sys/fs/cgroup/Example/tasks
    -r—​r—​r--. 1 root root 0 Jun  1 11:45 cgroup.controllers
    -r—​r—​r--. 1 root root 0 Jun  1 11:45 cgroup.events
    -rw-r—​r--. 1 root root 0 Jun  1 11:45 cgroup.freeze
    -rw-r—​r--. 1 root root 0 Jun  1 11:45 cgroup.max.depth
    -rw-r—​r--. 1 root root 0 Jun  1 11:45 cgroup.max.descendants
    -rw-r—​r--. 1 root root 0 Jun  1 11:45 cgroup.procs
    -r—​r—​r--. 1 root root 0 Jun  1 11:45 cgroup.stat
    -rw-r—​r--. 1 root root 0 Jun  1 11:45 cgroup.subtree_control
    -rw-r—​r--. 1 root root 0 Jun  1 11:45 cgroup.threads
    -rw-r—​r--. 1 root root 0 Jun  1 11:45 cgroup.type
    -rw-r—​r--. 1 root root 0 Jun  1 11:45 cpu.max
    -rw-r—​r--. 1 root root 0 Jun  1 11:45 cpu.pressure
    -rw-r—​r--. 1 root root 0 Jun  1 11:45 cpuset.cpus
    -r—​r—​r--. 1 root root 0 Jun  1 11:45 cpuset.cpus.effective
    -rw-r—​r--. 1 root root 0 Jun  1 11:45 cpuset.cpus.partition
    -rw-r—​r--. 1 root root 0 Jun  1 11:45 cpuset.mems
    -r—​r—​r--. 1 root root 0 Jun  1 11:45 cpuset.mems.effective
    -r—​r—​r--. 1 root root 0 Jun  1 11:45 cpu.stat
    -rw-r—​r--. 1 root root 0 Jun  1 11:45 cpu.weight
    -rw-r—​r--. 1 root root 0 Jun  1 11:45 cpu.weight.nice
    -rw-r—​r--. 1 root root 0 Jun  1 11:45 io.pressure
    -rw-r—​r--. 1 root root 0 Jun  1 11:45 memory.pressure
    ```