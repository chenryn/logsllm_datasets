title:Where Do You Want to Go Today? Escalating Privileges by Pathname Manipulation
author:Suresh Chari and
Shai Halevi and
Wietse Z. Venema
Where Do You Want to Go Today?
Escalating Privileges by Pathname Manipulation(cid:3)
Suresh Chari
Shai Halevi Wietse Venema
IBM T.J. Watson Research Center,
Hawthorne, New York, USA
Abstract
1. Introduction
We analyze (cid:2)lename-based privilege escalation attacks,
where an attacker creates (cid:2)lesystem links, thereby (cid:147)trick-
ing(cid:148) a victim program into opening unintended (cid:2)les.
We develop primitives for a POSIX environment, provid-
ing assurance that (cid:2)les in (cid:147)safe directories(cid:148) (such as
/etc/passwd) cannot be opened by looking up a (cid:2)le by
an (cid:147)unsafe pathname(cid:148) (such as a pathname that resolves
through a symbolic link in a world-writable directory). In
today’s UNIX systems, solutions to this problem are typ-
ically built into (some) applications and use application-
speci(cid:2)c knowledge about (un)safety of certain directories.
In contrast, we seek solutions that can be implemented in
the (cid:2)lesystem itself (or a library on top of it), thus providing
protection to all applications.
Our solution is built around the concept of pathname
manipulators, which are roughly the users that can in(cid:3)u-
ence the result of a (cid:2)le lookup operation. For each user, we
distinguish unsafe pathnames from safe pathnames accord-
ing to whether or not the pathname has any manipulators
other than that user or root. We propose a safe-open
procedure that keeps track of the safety of the current path-
name as it resolves it, and that takes extra precautions while
opening (cid:2)les with unsafe pathnames. We prove that our so-
lution can prevent a common class of (cid:2)lename-based privi-
lege escalation attacks, and describe our implementation of
the safe-open procedure as a library function over the
POSIX (cid:2)lesystem interface. We tested our implementation
on several UNIX variants to evaluate its implications for
systems and applications. Our experiments suggest that this
solution can be deployed in a portable way without break-
ing existing systems, and that it is effective against this class
of pathname resolution attacks.
(cid:3)This work was supported in part by the Department of Homeland Se-
curity under grant FA8750-08-2-0091.
In this work we take another look at the problem of
privilege escalation via manipulation of (cid:2)lesystem names.
Historically, attention has focused on attacks against priv-
ileged processes that open (cid:2)les in directories that are
writable by an attacker. One classical example is email
delivery in the UNIX environment (e.g., [9]). Here,
the mail-delivery directory (e.g., /var/mail) is often
group or world writable. An adversarial user may use
its write permission to create a hard link or symlink at
/var/mail/root that resolves to /etc/passwd. A
simple-minded mail-delivery program that appends mail to
the (cid:2)le /var/mail/root can have disastrous implica-
tions for system security. Other historical examples involve
privileged programs that manipulate (cid:2)les under the world-
writable /tmp directory [11], or even in a directory of the
attacker’s choice [10].
Over time, privileged programs have implemented safety
mechanisms to prevent pathname resolution attacks. These
mechanisms, however, are tailored speci(cid:2)cally to the pro-
gram’s purpose, are typically implemented in the program
itself, and rely on application-speci(cid:2)c knowledge about the
directories where (cid:2)les reside. We believe, however, that the
application is fundamentally the wrong place to implement
these safety mechanisms.
Recent vulnerability statistics support our position. The
US National Vulnerability Database [16] lists at least 177
entries, since the start of 2008, for symlink-related vulnera-
bilities that allow an attacker to either create or delete (cid:2)les,
or to modify the content or permissions of (cid:2)les. No doubt,
the vast majority of these entries are due to application writ-
ers who simply were not aware of the problem. However,
there are even vulnerabilities in system programs, which
are typically better scrutinized. For example, an unsafe
(cid:2)le open vulnerability was reported in the inetd daemon
in Solaris 10 [12] when debug logging is enabled. This
daemon runs with root privileges and logs debug mes-
sages to the (cid:2)le /var/tmp/inetd.log if that (cid:2)le ex-
ists. The (cid:2)le is opened using fopen(DEBUG LOG FILE,
"r+"). Since /var/tmp is a world writable directory
a local unprivileged user can create a link to any (cid:2)le on
the system, and overwrite that (cid:2)le as root with inetd
debug messages. A similar example, related to unsafe
unlink operation, is a reported vulnerability in the Linux
rc.sysinit script [13] in the initscripts package
before version 8.76.3-1. That vulnerability could be used
by unprivileged users to delete arbitrary (cid:2)les by creating
symbolic links from speci(cid:2)c user-writable directories.
In addition to these examples, experiments that we run
in the course of this work uncovered a number of (latent)
privilege escalation vulnerabilities, where system processes
write or create (cid:2)les as root in directories that are writable
by unprivileged system process.
In these cases, a com-
promise of the unprivileged system process could result in
further privilege escalation. These vulnerabilities are de-
scribed in Section 5.3.
These examples demonstrate that it is unrealistic to ex-
pect every application (or even every (cid:147)important applica-
tion(cid:148)) to implement defenses against these attacks. We con-
tend that a system-level safety net would be more effective
at stopping these problems than trying to (cid:2)x every affected
application, or trying to educate current and future gener-
ations of application writers.
In a world where applica-
tions (and their fragments) are used in environments that
are vastly different from what the application designers had
in mind, it is unreasonable to expect that the applications
themselves will distinguish between (cid:2)les that are safe to
open and ones that are not.
In this work we seek a general-purpose mechanism that
can be implemented in the (cid:2)le system or in a system library,
that allows programs to open (cid:2)les that exist in an (cid:147)unsafe(cid:148)
environment, knowing that they will not be (cid:147)tricked(cid:148) into
opening (cid:2)les that exist in a (cid:147)safe(cid:148) environment. Speci(cid:2)-
cally, we show how such a mechanism can be implemented
over POSIX (cid:2)lesystems.
In a nutshell, our solution can be viewed as identifying
(cid:147)unsafe subtrees(cid:148) of the (cid:2)lesystem directory tree, and tak-
ing extra precautions whenever we visit any of them during
the resolution of a pathname. Roughly, a directory is unsafe
for a certain user if anyone other than that user (or root)
can write in it. Our basic solution consists of resolving a
pathname component by component, enforcing the condi-
tions that once we visit an unsafe node, in the remainder
of the path we will no longer follow symbolic links or al-
low pathname elements of ‘..’, nor will we open a (cid:2)le that
has multiple hardlinks. Thus, once we resolve through an
unsafe node, we will not visit nodes that exist outside the
subtree rooted at that node.1
In contrast with many prior works on (cid:2)lename-based at-
tacks, our work is not primarily focused on race conditions
1We describe in Section 6.1 a more permissive variant that still provides
the same protection against privilege-escalation attacks.
(such as access/open races [20, 4]). Rather, we directly ad-
dresses the privilege-escalation threat, which is the main
motivation for many of these attacks. Here we focus on the
pathname resolution mechanism, identify a simple security
property that can be met even in the presence of race con-
ditions, and show that this property can be used to prevent
privilege-escalation attacks.
1.1. Our contribution
We focus on tightening the connection between (cid:2)les and
their names. In most (cid:2)lesystems, programs access (cid:2)les by
providing names (the pathnames), and rely on the (cid:2)lesys-
tem to resolve these names into pointers to the actual (cid:2)les
(the (cid:2)le handles). Unfortunately, the relation between (cid:2)les
and their names in POSIX (cid:2)lesystems is murky: Files can
have more than one name (e.g., due to hard or symbolic
links), these names can be changed dynamically (e.g., by
renaming a directory), (cid:2)lename resolution may depend on
the current context (e.g., the current working directory), etc.
This murky relation obscures the semantics of the name-to-
(cid:2)le translation, and provides system administrators and ap-
plications writers with ample opportunities to introduce se-
curity vulnerabilities. Our solution builds on the following
concepts:
(cid:15) Ignoring the partition to directories and subdirectories,
we view the entire path as just one name and examine
its properties. We introduce the concept of the ma-
nipulators of a name, which roughly captures (cid:147)anyone
who can change the outcome of resolving that name.(cid:148)
In POSIX (cid:2)lesystems, the manipulators of a path are
roughly the users and groups that have write permis-
sion in any directory along this path. More precisely,
U belongs to the manipulators of a name if the reso-
lution of that name visits any directory that is either
owned by U or that U has write permissions for.
(cid:15) Using the concept of manipulators, we distinguish be-
tween safe names and unsafe names. Roughly, a name
is safe for some user if only that user can manipu-
late it. Specializing this concept to UNIX systems,
we call a name (cid:147)system safe(cid:148) if its only manipula-
tor is root, and call it (cid:147)safe for U(cid:148) if the only ma-
nipulators of it are root and U. For example, typi-
cally the name /etc/passwd is (cid:147)system safe(cid:148), the
name /home/joe/mbox is safe for user joe, and
the name /var/mail/jane is not safe for anyone
(as /var/mail is group or world writable).
(cid:15) Once we have safe and unsafe pathnames, we can state
our main security guarantee. We provide a procedure
safe-open that ensures the following property:
If a (cid:2)le has safe names for user U, then
safe-open will not open it for U using
an unsafe name.
As we show in the paper, this property can be used to
ensure that no privilege escalation via (cid:2)lesystem links
occurs. For example, if /etc/passwd is system-
safe, then no process running as root will safe-open
this (cid:2)le due to a hard link or symbolic link that could
have been created by a non-root process. In particu-
lar, a (cid:147)simple minded(cid:148) mail delivery program that uses
our safe-open will be protected against the attack
in the example from above. Also, we veri(cid:2)ed that
this guarantee is suf(cid:2)cient to protect against the doc-
umented vulnerabilities in CVE.
We implemented our safe-open procedure as a li-
brary function over POSIX (cid:2)le systems, and also general-
ized it to other POSIX interfaces that resolve pathnames
such as safe-unlink, safe-chmod, etc.
(cf. Sec-
tion 4). We performed whole-system measurements with
several UNIX (cid:3)avors, and (cid:2)nd that system-wide safe path-
name resolution can be used without (cid:148)breaking(cid:148) real soft-
ware. During these measurements we also uncovered a
number of new (latent) vulnerabilities (cf. Section 5.3), that
would be (cid:2)xed using our safe-open.
We mention that our work on safe pathname resolution
was done in the context of a more general framework. In
a companion paper [6] we describe an abstract (cid:2)lesystem
interface where (cid:2)le operations are permitted only on the
names with which the (cid:2)le was created. We then describe
an implementation that uses the safe resolution procedure
described in this paper, and formally prove that it realizes
the abstract (cid:2)lesystem interface. (That formal proof is car-
ried out in the framework of (cid:147)universal composability(cid:148) [5],
which is used in cryptography to prove that a system real-
izes its speci(cid:2)cations in all adversarial settings.)
1.2. Related Work
Much of the prior work on pathname safety has focused
on time-of-check/time-of-use race vulnerabilities (TOCT-
TOU) in privileged programs [1, 2, 8, 3, 20, 4]. Our work
is not focused on this problem, instead it directly addresses
the privilege-escalation issue that underlies many of these
race-condition vulnerabilities: Rather than trying to prevent
race conditions, we modify the name-resolution procedure
to ensure that privilege-escalation cannot happen even if an
attacker is able to induce race conditions.
In early analysis of (cid:2)lesystem race vulnerabilities in
privileged programs, Bishop discusses safe and unsafe path-
names, and introduces a can-trust library function that
determines whether an untrusted user could change the
name-to-object binding for a given pathname [1]. Later,
a more formal analysis with experimental validation was
done by Bishop and Dilger [2].
Our safe-open function implements a user-level
pathname resolver that examines pathname elements one
by one;
its structure is therefore similar to that of the
access-open function by Tsafrir et al. [20, 21]. While
their user-level name resolver applies access checks to each
path element in a manner that defeats race attacks, our
safe-open function is not primarily concerned with ac-
cess checks. Instead, we apply a (cid:147)path safety(cid:148) check to each
path element.2
In the context of system call introspection monitors for
TOCTTOU vulnerabilities, Gar(cid:2)nkel [14] considered reme-
dies which could also potentially apply to the problem of
unsafe pathname resolution. These remedies include dis-
allowing the creation of symlinks to (cid:2)les which the call-
ing process does not have write permissions to, as well as
denying access to (cid:2)les through symlinks. As noted in his
paper, these solutions can mitigate the problem but they do
not solve it. For instance, they do not address pre-existing
symlinks, and fail in the face of symlinks in intermediate
components of the pathnames. In contrast, our solution di-
rectly addresses the underlying problem of unsafe pathname
resolution.
Another approach to system call introspection is imple-
mented in the Plash sandboxing system [18]. Here, a re-
placement C library delegates (cid:2)le-system operations to a
(cid:2)xed-privilege, user-level, process that opens (cid:2)les on behalf
of monitored applications and that enforces a con(cid:2)nement
policy. While this approach provides great expressiveness,
it would not be suitable for system-wide deployment as en-
visaged with our safe-open function. (For example it
is not clear how to address privilege changes by the call-
ing process, or how this solution scales with the number of
processes.)
Addressing (cid:2)lename manipulations is in some ways
complementary to dealing with the (cid:147)confused deputy(cid:148) prob-
lem: Both problems are used as a vehicle for privilege esca-
lation, and some aspects of the solution are common, but
the problems themselves appear to be different: For ex-
ample, the (cid:147)simple minded(cid:148) mail-delivery program from
above knows that it uses its root privileges for writing
/var/mail/root, so in this sense it is not a confused
deputy (since it is not being tricked into using some extra
privilege that it happens to hold). The problems with UNIX
privilege-managing functions were systematically analyzed
by Chen, Wagner and Dean; these authors also provide a
more rational API for privilege management [7]. Their ap-
proach was later extended by Tsafrir, Da Silva and Wagner
2Our solution could have been implemented using a variant of the gen-
eral framework from [21, Sec. 7], but that variant would have to be con-
siderably more complex to deal with issues such as change of privileges or
permissions, thread safety, etc.
to include also group privileges [19].
Mazieres and Kaashoek advocate a better system call
API that among others allows processes to specify the cre-
dentials with each system call [15]. Our safe-open
function could bene(cid:2)t from such features (especially when
opening (cid:2)les on behalf of setgid programs, cf. Sec-
tion 6.3).
2. Names, Manipulators, and Safe-Open
For presentation simplicity, we initially consider only a
simpli(cid:2)ed setting where (a) all (cid:2)lenames are absolute paths,
(b) every (cid:2)lesystem is mounted only once in the global
name tree, and (c) no concurrency issues are present. (The
last item means that we simply assume that no permission
changes occur concurrently with our name resolution pro-
cedure.) We discuss relative pathnames at the end of this
section, multiple mount points and dynamic permissions are
discussed in Section 3.
2.1. Names and Their Manipulators
Roughly speaking, a manipulator of a name is any entity
that has (cid:2)lesystem permissions that can be used to in(cid:3)u-
ence the resolution of that name. A manipulator can create a
name (i.e., cause the (cid:2)lesystem to resolve that name to some
(cid:2)le), delete it (causing name resolution to fail) or modify it
(causing the name to be resolved to a different (cid:2)le). In the
context of POSIX systems, a manipulator of a path in a
POSIX (cid:2)lesystem is any uid that has write permission in
(cid:151) or ownership of (cid:151) any directory that is visited during
resolution of that path.3
consider
For example,
the (cid:2)les /etc/passwd,
/home/joe/mbox, and /tmp/amanda/foo from a