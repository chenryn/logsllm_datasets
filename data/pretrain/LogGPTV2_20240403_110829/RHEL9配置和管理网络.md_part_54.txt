|         |         |       |        | -and-ma |         |         |
|         |         |       |        | naging- |         |         |
|         |         |       |        | network |         |         |
|         |         |       |        | ing.htm |         |         |
|         |         |       |        | l#ftn.r |         |         |
|         |         |       |        | equires |         |         |
|         |         |       |        | -queues |         |         |
|         |         |       |        | -ge-cpu |         |         |
|         |         |       |        | -index) |         |         |
|         |         |       |        | {.footn |         |         |
|         |         |       |        | oteref} |         |         |
+---------+---------+-------+--------+---------+---------+---------+
| :       |         |       |        |         |         |         |
| :: {#as |         |       |        |         |         |         |
| sembly_ |         |       |        |         |         |         |
| underst |         |       |        |         |         |         |
| anding- |         |       |        |         |         |         |
| the-ebp |         |       |        |         |         |         |
| f-featu |         |       |        |         |         |         |
| res-in- |         |       |        |         |         |         |
| rhel_co |         |       |        |         |         |         |
| nfiguri |         |       |        |         |         |         |
| ng-and- |         |       |        |         |         |         |
| managin |         |       |        |         |         |         |
| g-netwo |         |       |        |         |         |         |
| rking.h |         |       |        |         |         |         |
| tml#ftn |         |       |        |         |         |         |
| .xdp-on |         |       |        |         |         |         |
| -interf |         |       |        |         |         |         |
| ace .fo |         |       |        |         |         |         |
| otnote} |         |       |        |         |         |         |
| [^      |         |       |        |         |         |         |
| \[a\]^] |         |       |        |         |         |         |
| (#assem |         |       |        |         |         |         |
| bly_und |         |       |        |         |         |         |
| erstand |         |       |        |         |         |         |
| ing-the |         |       |        |         |         |         |
| -ebpf-f |         |       |        |         |         |         |
| eatures |         |       |        |         |         |         |
| -in-rhe |         |       |        |         |         |         |
| l_confi |         |       |        |         |         |         |
| guring- |         |       |        |         |         |         |
| and-man |         |       |        |         |         |         |
| aging-n |         |       |        |         |         |         |
| etworki |         |       |        |         |         |         |
| ng.html |         |       |        |         |         |         |
| #xdp-on |         |       |        |         |         |         |
| -interf |         |       |        |         |         |         |
| ace){.s |         |       |        |         |         |         |
| impara} |         |       |        |         |         |         |
| 只      |         |       |        |         |         |         |
| 有在接  |         |       |        |         |         |         |
| 口载入  |         |       |        |         |         |         |
| XDP     |         |       |        |         |         |         |
| 程      |         |       |        |         |         |         |
| 序时。  |         |       |        |         |         |         |
| :::     |         |       |        |         |         |         |
|         |         |       |        |         |         |         |
| ::: {#  |         |       |        |         |         |         |
| assembl |         |       |        |         |         |         |
| y_under |         |       |        |         |         |         |
| standin |         |       |        |         |         |         |
| g-the-e |         |       |        |         |         |         |
| bpf-fea |         |       |        |         |         |         |
| tures-i |         |       |        |         |         |         |
| n-rhel_ |         |       |        |         |         |         |
| configu |         |       |        |         |         |         |
| ring-an |         |       |        |         |         |         |
| d-manag |         |       |        |         |         |         |
| ing-net |         |       |        |         |         |         |
| working |         |       |        |         |         |         |
| .html#f |         |       |        |         |         |         |
| tn.requ |         |       |        |         |         |         |
| ires-qu |         |       |        |         |         |         |
| eues-ge |         |       |        |         |         |         |
| -cpu-in |         |       |        |         |         |         |
| dex .fo |         |       |        |         |         |         |
| otnote} |         |       |        |         |         |         |
| [^\[b\] |         |       |        |         |         |         |
| ^](#ass |         |       |        |         |         |         |
| embly_u |         |       |        |         |         |         |
| ndersta |         |       |        |         |         |         |
| nding-t |         |       |        |         |         |         |
| he-ebpf |         |       |        |         |         |         |
| -featur |         |       |        |         |         |         |
| es-in-r |         |       |        |         |         |         |
| hel_con |         |       |        |         |         |         |
| figurin |         |       |        |         |         |         |
| g-and-m |         |       |        |         |         |         |
| anaging |         |       |        |         |         |         |
| -networ |         |       |        |         |         |         |
| king.ht |         |       |        |         |         |         |
| ml#requ |         |       |        |         |         |         |
| ires-qu |         |       |        |         |         |         |
| eues-ge |         |       |        |         |         |         |
| -cpu-in |         |       |        |         |         |         |
| dex){.s |         |       |        |         |         |         |
| impara} |         |       |        |         |         |         |
| 需      |         |       |        |         |         |         |
| 要分配  |         |       |        |         |         |         |
| 多个大  |         |       |        |         |         |         |
| 于或等  |         |       |        |         |         |         |
| 于最大  |         |       |        |         |         |         |
| CPU     |         |       |        |         |         |         |
| 索引的  |         |       |        |         |         |         |
| XDP TX  |         |       |        |         |         |         |
| 队列。  |         |       |        |         |         |         |
| :::     |         |       |        |         |         |         |
+---------+---------+-------+--------+---------+---------+---------+
:::
图例：
::: itemizedlist
-   基本：支持基本返回代码：
    `DROP`{.literal}、`PASS`{.literal}、`ABORTED`{.literal} 和
    `TX`{.literal}。
-   重定向：支持 `REDIRECT`{.literal} 返回代码。
-   target：可以是 `REDIRECT`{.literal} 返回代码的目标。
-   HW offload：支持 XDP 硬件卸载。
-   zero-copy：支持 `AF_XDP`{.literal} 协议系列的零副本模式。
:::
:::
:::
[]{#network-tracing-using-the-bpf-compiler-collection_configuring-and-managing-networking.html}
::: chapter
::: titlepage
# []{#network-tracing-using-the-bpf-compiler-collection_configuring-and-managing-networking.html#network-tracing-using-the-bpf-compiler-collection_configuring-and-managing-networking}第 52 章 使用 BPF 编译器集合进行网络追踪 {.title}
:::
本节介绍 BPF Compiler Collection（BCC）是什么，如何安装
BCC，以及如何使用 `bcc-tools`{.literal}
软件包提供的预创建脚本执行不同的网络追踪操作。所有这些脚本都支持
`--ebpf`{.literal} 参数显示实用程序上传到内核的 eBPF
代码。您可以使用这些代码了解更多有关编写 eBPF 脚本的信息。
::: section
::: titlepage
# []{#network-tracing-using-the-bpf-compiler-collection_configuring-and-managing-networking.html#bcc_network-tracing-using-the-bpf-compiler-collection}BCC 介绍 {.title}
:::
BPF Compiler Collection（BCC）是一个库，可帮助创建扩展的 Berkeley Packet
Filter（eBPF）程序。eBPF
程序的主要工具是在不需要额外的开销或存在安全问题的情况下，分析操作系统性能和网络性能。
BCC 不再需要用户了解 eBPF
的技术详情，并提供了许多开箱即用的起点，如带有预先创建的 eBPF 程序的
`bcc-tools`{.literal} 软件包。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
eBPF 程序在事件中触发，如磁盘 I/O、TCP
连接以及进程创建。程序不太可能导致内核崩溃、循环或者变得无响应，因为它们在内核的安全性虚拟机中运行。
:::
:::
::: section
::: titlepage
# []{#network-tracing-using-the-bpf-compiler-collection_configuring-and-managing-networking.html#installing-the-bcc-tools-package_network-tracing-using-the-bpf-compiler-collection}安装 bcc-tools 软件包 {.title}
:::
本节论述了如何安装 `bcc-tools`{.literal} 软件包，该软件包还会将 BPF
Compiler Collection (BCC) 库作为依赖项安装。
::: itemizedlist
**先决条件**
-   有效的 [Red Hat Enterprise Linux
    订阅](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/configuring_basic_system_settings/assembly_registering-the-system-and-managing-subscriptions_configuring-basic-system-settings){.link}
-   包含 `bcc-tools`{.literal} 软件包的
    [启用软件仓库](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/managing_software_with_the_dnf_tool/assembly_managing-custom-software-repositories_managing-software-with-the-dnf-tool){.link}
-   [更新的内核](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/managing_monitoring_and_updating_the_kernel/updating-kernel-with-yum_managing-monitoring-and-updating-the-kernel#updating-the-kernel_updating-kernel-with-yum){.link}
-   根权限
:::
::: orderedlist
**步骤**
1.  安装 `bcc-tools`{.literal} ：
    ``` literallayout
    # dnf install bcc-tools
    ```
    BCC 工具安装在 `/usr/share/bcc/tools/`{.literal} 目录中。
2.  （可选）检查工具：
    ``` literallayout
    # ll /usr/share/bcc/tools/
    ...
    -rwxr-xr-x. 1 root root  4198 Dec 14 17:53 dcsnoop
    -rwxr-xr-x. 1 root root  3931 Dec 14 17:53 dcstat
    -rwxr-xr-x. 1 root root 20040 Dec 14 17:53 deadlock_detector
    -rw-r--r--. 1 root root  7105 Dec 14 17:53 deadlock_detector.c
    drwxr-xr-x. 3 root root  8192 Mar 11 10:28 doc
    -rwxr-xr-x. 1 root root  7588 Dec 14 17:53 execsnoop
    -rwxr-xr-x. 1 root root  6373 Dec 14 17:53 ext4dist
    -rwxr-xr-x. 1 root root 10401 Dec 14 17:53 ext4slower
    ...
    ```
    上表中的 `doc`{.literal} 目录包含每个工具的文档。
:::
:::
::: section
::: titlepage
# []{#network-tracing-using-the-bpf-compiler-collection_configuring-and-managing-networking.html#displaying-tcp-connections-added-to-the-kernels-accept-queue_network-tracing-using-the-bpf-compiler-collection}显示添加到内核的接受队列中的 TCP 连接 {.title}
:::
内核在 TCP 3 路握手中接收 `ACK`{.literal} 数据包后，内核会将连接从
`SYN`{.literal} 队列移到 `接受`{.literal} 队列，直到连接的状态更改为
`ESTABLISHED`{.literal}。因此，只有成功的 TCP 连接才能在此队列中看到。
`tcpaccept`{.literal} 实用程序使用 eBPF 功能显示所有内核添加到
`接受`{.literal} 队列的连接。该工具是轻量级的，因为它跟踪了内核的
`accept（）`{.literal} 功能，而不是捕获数据包并过滤它们。例如，使用
`tcpaccept`{.literal} 用于常规故障排除，以显示服务器已接受的新连接。
::: orderedlist
**步骤**
1.  输入以下命令启动追踪内核 `接受`{.literal} 队列：
    ``` literallayout
    # /usr/share/bcc/tools/tcpaccept
    PID   COMM      IP RADDR         RPORT  LADDR    LPORT
    843   sshd      4  192.0.2.17    50598  192.0.2.1  22
    1107  ns-slapd  4  198.51.100.6  38772  192.0.2.1  389
    1107  ns-slapd  4  203.0.113.85  38774  192.0.2.1  389
    ...
    ```
    每次内核接受连接时，`tcpaccept`{.literal} 会显示连接详情。
2.  按 [**Ctrl**]{.keycap}+[**C**]{.keycap} 停止追踪过程。
:::
::: itemizedlist
**其他资源**
-   `tcpaccept(8)`{.literal} man page
-   `/usr/share/bcc/tools/doc/tcpaccept_example.txt`{.literal}
:::
:::
::: section
::: titlepage
# []{#network-tracing-using-the-bpf-compiler-collection_configuring-and-managing-networking.html#tracing-outgoing-tcp-connection-attempts_network-tracing-using-the-bpf-compiler-collection}追踪传出 TCP 连接尝试 {.title}
:::
`tcpconnect`{.literal} 程序使用 eBPF 功能跟踪 TCP
连接尝试。该工具的输出还包括失败的连接。
`tcpconnect`{.literal} 程序是轻量级的，因为它跟踪了内核的
`connect（）`{.literal} 函数，而不是捕获数据包并过滤它们。
::: orderedlist
**步骤**
1.  输入以下命令启动显示所有传出连接的追踪过程：
    ``` literallayout
    # /usr/share/bcc/tools/tcpconnect
    PID    COMM         IP SADDR      DADDR          DPORT
    31346  curl         4  192.0.2.1  198.51.100.16  80
    31348  telnet       4  192.0.2.1  203.0.113.231  23
    31361  isc-worker00 4  192.0.2.1  192.0.2.254    53
    ...
    ```
    每次内核处理传出连接时，`tcpconnect`{.literal} 会显示连接详情。
2.  按 [**Ctrl**]{.keycap}+[**C**]{.keycap} 停止追踪过程。
:::
::: itemizedlist
**其他资源**
-   `TCPConnect(8)`{.literal} 手册页
-   `/usr/share/bcc/tools/doc/tcpconnect_example.txt`{.literal}
:::
:::
::: section
::: titlepage
# []{#network-tracing-using-the-bpf-compiler-collection_configuring-and-managing-networking.html#measuring-the-latency-of-outgoing-tcp-connections_network-tracing-using-the-bpf-compiler-collection}测量出站 TCP 连接的延迟 {.title}
:::
TCP 连接延迟是建立连接所需的时间。这通常涉及内核 TCP/IP
处理和网络往返时间，而不是应用程序运行时。
`tcpconnlat`{.literal} 实用程序使用 eBPF 功能来测量发送的
`SYN`{.literal} 数据包和接收的响应数据包之间的时间。
::: orderedlist
**步骤**
1.  开始测量出站连接的延迟：
    ``` literallayout
    # /usr/share/bcc/tools/tcpconnlat
    PID    COMM         IP SADDR      DADDR          DPORT LAT(ms)
    32151  isc-worker00 4  192.0.2.1  192.0.2.254    53    0.60
    32155  ssh          4  192.0.2.1  203.0.113.190  22    26.34
    32319  curl         4  192.0.2.1  198.51.100.59  443   188.96
    ...
    ```
    每次内核处理传出连接时，`tcpconnlat`{.literal}
    都会在内核接收响应数据包后显示连接的详细信息。
2.  按 [**Ctrl**]{.keycap}+[**C**]{.keycap} 停止追踪过程。
:::
::: itemizedlist
**其他资源**
-   `tcpconnlat(8)`{.literal} man page
-   `/usr/share/bcc/tools/doc/tcpconnlat_example.txt`{.literal}
:::
:::
::: section
::: titlepage
# []{#network-tracing-using-the-bpf-compiler-collection_configuring-and-managing-networking.html#displaying-details-about-tcp-packets-and-segments-that-were-dropped-by-the-kernel_network-tracing-using-the-bpf-compiler-collection}显示被内核丢弃的 TCP 数据包和片段详情 {.title}
:::
通过 `tcpdrop`{.literal} 程序，管理员可以显示内核丢弃的 TCP
数据包和片段详情。使用这个实用程序调试丢弃数据包的高速率，以便远程系统发送基于计时器的重新传输。释放数据包和片段的高速率可能会影响服务器的性能。
`tcpdrop`{.literal} 程序使用 eBPF
功能直接从内核检索信息，而不是捕获和过滤数据包。
::: orderedlist
**步骤**
1.  输入以下命令来显示丢弃 TCP 数据包和片段详情：
    ``` literallayout
    # /usr/share/bcc/tools/tcpdrop
    TIME     PID    IP SADDR:SPORT       > DADDR:DPORT   STATE (FLAGS)
    13:28:39 32253  4  192.0.2.85:51616  > 192.0.2.1:22  CLOSE_WAIT (FIN|ACK)