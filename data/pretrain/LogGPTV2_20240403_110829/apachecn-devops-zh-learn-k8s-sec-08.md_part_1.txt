# 八、保护 Kubernetes PODS
尽管 pod 是作为运行微服务的占位符的最细粒度的单元，但是保护 Kubernetes pods 是一个巨大的主题，因为它应该覆盖整个 DevOps 流程:构建、部署和运行时。
在本章中，我们选择将重点缩小到构建和运行阶段。为了在构建阶段保护 Kubernetes pods，我们将讨论如何硬化容器映像并配置 pods(或 pods 模板)的安全属性以减少攻击面。虽然工作负载的一些安全属性，例如 AppArmor 和 SELinux 标签，在运行时阶段生效，但是已经为工作负载定义了安全控制。为了进一步澄清问题，我们试图通过在构建阶段配置运行时效果安全属性来保护 Kubernetes 工作负载。为了在运行时阶段保护 Kubernetes pods，我们将引入一个 PodSecurityPolicy，并附带示例和辅助工具`kube-psp-advisor`。
后面的章节将详细介绍运行时安全性和响应。还要注意，利用该应用可能会导致 pods 受到损害。但是，我们不打算在本章中介绍应用。
在本章中，我们将涵盖以下主题:
*   强化容器映像
*   配置 Pod 的安全属性
*   公共安全政策的力量
# 强化容器映像
容器映像强化是指遵循安全最佳实践或基线来配置容器映像，以减少攻击面。映像扫描工具只专注于查找捆绑在映像中的应用中公开披露的问题。但是，在构建映像时遵循最佳实践和安全配置可以确保应用具有最小的攻击面。
在我们开始讨论安全配置基线之前，让我们看看什么是容器映像，以及 Dockerfile，以及它是如何用于构建映像的。
## 容器映像和 Docker 文件
一个**容器映像**是一个文件，它捆绑了微服务二进制文件、它的依赖关系以及微服务的配置等等。容器是映像的运行实例。如今，应用开发人员不仅编写代码来构建微服务；他们还需要构建 Dockerfile 来容器化微服务。为了帮助构建容器映像，Docker 提供了一种标准化的方法，称为 Dockerfile。一个 **Dockerfile** 包含一系列的指令，比如复制文件、配置环境变量、配置开放端口、容器入口点，可以被 Docker 守护进程理解来构造镜像文件。然后，映像文件将被推送到映像注册表，然后从那里将映像部署在 Kubernetes 集群中。每个 Dockerfile 指令将在映像中创建一个文件层。
在我们看 Dockerfile 的例子之前，让我们先了解一些基本的 Dockerfile 指令:
*   **FROM** :从基础映像或父映像初始化一个新的构建阶段。两者都是指基础或文件层，您将自己的映像捆绑在其上。
*   **运行**:执行命令，并将结果提交到上一个文件层。
*   **ENV** :为正在运行的容器设置环境变量。
*   **CMD** :指定容器将运行的默认命令。
*   **复制/添加**:这两个命令都将文件或目录从本地(或远程)网址复制到映像的文件系统中。
*   **EXPOSE** :指定容器运行时微服务将监听的端口。
*   **ENTRYPOINT** :和`CMD`类似，唯一的区别就是`ENTRYPOINT`做了一个容器，将作为可执行文件运行。
*   **工作目录**:为后面的指令设置工作目录。
*   **用户**:设置任意`CMD` / `ENTRYPOINT`容器的用户和组标识。
现在，让我们看一下 Dockerfile 的一个示例:
```
FROM ubuntu
# install dependencies
RUN apt-get install -y software-properties-common python
RUN add-apt-repository ppa:chris-lea/node.js
RUN echo "deb http://us.archive.ubuntu.com/ubuntu/ precise universe" >> /etc/apt/sources.list
RUN apt-get update
RUN apt-get install -y nodejs
# make directory
RUN mkdir /var/www
# copy app.js
ADD app.js /var/www/app.js
# set the default command to run
CMD ["/usr/bin/node", "/var/www/app.js"]
```
从前面的 Dockerfile 中，我们可以看出映像是建立在`ubuntu`之上的。然后，它运行了一堆`apt-get`命令来安装依赖项，并创建了一个名为`/var/www`的目录。接下来，将当前目录中的`app.js`文件复制到映像文件系统中的`/var/www/app.js`中。最后，配置默认命令运行这个`Node.js` 应用。我相信你会看到 Dockerfile 在帮助你建立形象方面是多么直接和强大。
下一个问题是任何安全问题，因为看起来您可以构建任何类型的映像。接下来，我们来谈谈 CIS Docker Benchmark。
## CIS Docker 基准
**互联网安全中心** ( **CIS** )制定了关于 Docker 容器管理的指南。现在，让我们看看 CIS Docker 基准测试关于容器映像的安全建议:
*   **为容器映像创建一个用户来运行微服务**:以非根用户身份运行容器是一个很好的做法。虽然用户命名空间映射可用，但默认情况下并未启用。以 root 身份运行意味着，如果攻击者成功逃离容器，他们将获得对主机的 root 访问权限。使用`USER`指令在 Dockerfile 中创建用户。
*   **使用可信基础映像构建自己的映像**:从公共存储库下载的映像不能完全可信。众所周知，来自公共存储库的映像可能包含恶意软件或加密矿工。因此，建议您从头开始构建映像，或者使用最少的可信映像，例如 Alpine。此外，在构建映像后执行映像扫描。映像扫描将在下一章中介绍。
*   **不要在你的镜像中安装不必要的包**:安装不必要的包会增加攻击面。建议你保持身材苗条。有时，您可能需要在构建映像的过程中安装一些工具。一定要记得在文件末尾删除它们。
*   **扫描并重建映像以应用安全补丁**:很有可能在您的基本映像或您在映像中安装的软件包中发现新的漏洞。经常扫描你的映像是一个很好的做法。一旦发现任何漏洞，请尝试通过重建映像来修补安全修复。映像扫描是在构建阶段识别漏洞的关键机制。我们将在下一章更详细地介绍映像扫描。
*   **为 Docker** 启用内容信任:内容信任使用数字签名来确保客户端和 Docker 注册表之间的数据完整性。它确保了容器映像的来源。但是，默认情况下不会启用。您可以通过将环境变量`DOCKER_CONTENT_TRUST`设置为`1`来打开它。
*   **在容器映像中添加一个 HEALTHCHECK 指令**:一个`HEALTHCHECK`指令定义了一个命令，要求 Docker Engine 定期检查容器的健康状态。基于健康状态检查结果，Docker 引擎然后退出不健康的容器并启动新的容器。
*   **确保更新不缓存在 Dockerfile** 中:根据您选择的基础映像，您可能需要在安装新软件包之前更新软件包存储库。但是，如果您在 Dockerfile 中单行指定`RUN apt-get update` `(Debian)`，Docker Engine 将缓存该文件层，因此，当您再次构建映像时，它仍将使用缓存的旧包存储库信息。这将阻止您在映像中使用最新的软件包。因此，要么在单个 Dockerfile 指令中同时使用`update`和`install`，要么在 Docker `build`命令中使用`--no-cache`标志。
*   **从映像**中的文件中移除 setuid 和 setgid 权限:`setuid`和`setgid`权限可用于权限升级，因为具有此类权限的文件被允许以所有者权限而不是启动器权限执行。您应该仔细检查具有`setuid`和`setgid`权限的文件，并删除不需要这些权限的文件。
*   **在 Dockerfile** 中使用 COPY 代替 ADD:`COPY`指令只能将文件从本地机器复制到映像的文件系统中，而`ADD`指令不仅可以从本地机器复制文件，还可以从远程网址检索文件到映像的文件系统中。使用`ADD`可能会带来将来自互联网的恶意文件添加到映像中的风险。
*   **不要在 Dockerfile** 中存储机密:有很多工具可以提取映像文件图层。如果映像中存储了任何机密，则机密不再是机密。将机密存储在 Dockerfile 中会使容器具有潜在的可利用性。一个常见的错误是使用`ENV`指令在环境变量中存储机密。
*   **仅安装经过验证的软件包**:这类似于仅使用可信基础映像。请注意您要在映像中安装的软件包。确保它们来自受信任的包存储库。
如果您遵循前面 CIS Docker 基准中的安全建议，您将成功强化您的容器映像。这是在构建阶段保护 Pod 的第一步。现在，让我们来看看为了保护 Pod ，我们需要注意的安全属性。
# 配置 Pod 的安全属性
正如我们在上一章中提到的，应用开发人员应该知道微服务必须拥有什么样的权限才能执行任务。理想情况下，应用开发人员和安全工程师通过配置 Kubernetes 提供的安全上下文，共同努力在 pod 和容器级别强化微服务。
我们将主要的安全属性分为四类:
*   为 pods 设置主机命名空间
*   容器级别的安全上下文
*   pod 级别的安全上下文
*   表观轮廓
通过采用这样的分类方式，你会发现它们很容易管理。
## 为 pods 设置主机级名称空间
pod 规范中的以下属性用于配置主机名称空间的使用:
*   **主机**:默认为`false`。将其设置为`true`可以让 pod 看到工作节点中的所有进程。
*   **主机网**:默认为`false`。将其设置为`true`可以让 pod 看到工作节点中的所有网络栈。
*   **hostIPC** :默认为`false`。将其设置为`true`可以让 pod 看到工作节点中的所有 IPC 资源。
以下是如何在`ubuntu-1` pod `YAML`文件中的 pod 级别配置主机命名空间使用的示例:
```
apiVersion: v1
kind: Pod
metadata:
  name: ubuntu-1
  labels:
    app: util
spec:
  containers:
  - name: ubuntu
    image: ubuntu
    imagePullPolicy: Always
  hostPID: true
  hostNetwork: true
  hostIPC: true
```
前面的工作负载 YAML 将`ubuntu-1` pod 配置为使用主机级的 PID 命名空间、网络命名空间和 IPC 命名空间。请记住，除非必要，否则不应将这些属性设置为`true`。将这些属性设置为`true`也解除了同一工作节点中其他工作负载的安全边界，正如第 5 章[](05.html#_idTextAnchor144)**中已经提到的配置 Kubernetes Se 安全边界*。*
 *## 容器的安全上下文
多个容器可以组合在同一个容器中。每个容器都可以有自己的安全上下文，它定义了权限和访问控制。容器级安全上下文的设计为 Kubernetes 工作负载提供了更细粒度的安全控制。例如，您可能有三个容器在同一个容器内运行，其中一个必须在权限模式下运行，而其他容器在非权限模式下运行。这可以通过为单个容器配置安全上下文来实现。
以下是容器安全上下文的主要属性:
*   **权限**:默认为`false`。将其设置为`true`本质上使容器内的进程等同于工作节点上的根用户。
*   **capabilities**: There is a default set of capabilities granted to the container by the container runtime. The default capabilities granted are as follows: `CAP_SETPCAP`, `CAP_MKNOD`, `CAP_AUDIT_WRITE`, `CAP_CHOWN`, `CAP_NET_RAW`, `CAP_DAC_OVERRIDE`, `CAP_FOWNER`, `CAP_FSETID`, `CAP_KILL`, `CAP_SETGID`, `CAP_SETUID`, `CAP_NET_BIND_SERVICE`, `CAP_SYS_CHROOT`, and `CAP_SETFCAP`.
    您可以通过配置此属性来添加额外的功能或删除一些默认值。应谨慎添加`CAP_SYS_ADMIN`、`CAP_NETWORK_ADMIN`等功能。对于默认功能，您还应该删除那些不必要的功能。
*   **允许权限升级**:默认为`true`。设置它直接控制`no_new_privs`标志，该标志将被设置到容器中的进程。基本上，该属性控制进程是否可以获得比其父进程更多的权限。请注意，如果容器在权限模式下运行，或者添加了`CAP_SYS_ADMN`功能，该属性将自动设置为`true`。设置为`false`是一个很好的做法。
*   **只读文件系统**:默认为`false`。将其设置为`true`使容器的根文件系统为只读，这意味着库文件、配置文件和等都是只读的，不能被篡改。将其设置为`true`是一种良好的安全做法。
*   **runAsNonRoot** :默认为`false`。将其设置为`true`可以验证容器中的进程不能作为根用户运行(UID=0)。验证由`kubelet`完成。当`runAsNonRoot`设置为`true`时，`kubelet`将阻止容器以 root 用户身份运行。将其设置为`true`是一个很好的安全做法。该属性在`PodSecurityContext`中也可用，在 pod 级别生效。如果在`SecurityContext`和`PodSecurityContext`中都设置了该属性，则在容器级别指定的值优先。
*   **运行用户**:这是为了指定 UID 来运行容器映像的入口点过程。默认设置是映像元数据中指定的用户(例如 Dockerfile 中的`USER`指令)。该属性在`PodSecurityContext`中也可用，在 pod 级别生效。如果在`SecurityContext`和`PodSecurityContext`中设置了该属性，则在容器级别指定的值优先。
*   **runAsGroup** :类似于`runAsUser`，这是为了指定**组 ID** 或者 **GID** 来运行容器的入口点流程。该属性在`PodSecurityContext`中也可用，在 pod 级别生效。如果在`SecurityContext`和`PodSecurityContext`中设置了该属性，则在容器级别指定的值优先。
*   **seLinuxOptions** :这是设计用于指定容器的 SELinux 上下文。默认情况下，容器运行时会为容器分配一个随机的 SELinux 上下文，如果没有指定的话。该属性在`PodSecurityContex`中也可用，在 pod 级别生效。如果在`SecurityContext`和`PodSecurityContext`中设置了该属性，则在容器级别指定的值优先。
既然您现在已经了解了这些安全属性是什么，那么您可以根据您的业务需求提出自己的强化策略。一般来说，安全最佳实践如下:
*   除非必要，否则不要在权限模式下运行。
*   除非必要，否则不要添加额外功能。
*   删除未使用的默认功能。
*   以非根用户身份运行容器。
*   启用`runAsNonRoot`检查。
*   将容器根文件系统设置为只读。
现在，让我们看一个为容器配置`SecurityContext`的例子:
```
apiVersion: v1
kind: Pod
metadata:
  name: nginx-pod
  labels:
    app: web
spec:
  hostNetwork: false
  hostIPC: false
  hostPID: false
  containers:
  - name: nginx
    image: kaizheh/nginx 
    securityContext:
      privileged: false
      capabilities:
        add:
        - NETWORK_ADMIN
      readOnlyRootFilesystem: true 