We now establish the LR-security of our MAC1 construction.
Theorem 1. Let F : {0, 1}n × {0, 1}n → {0, 1}n be an
(s, t, prf ) PRF having (sS , tS , s, t, 2-sim) 2-simulatable leak-
ages. Then, the instantiation of MAC1 with F is an (q, s(cid:48), t(cid:48),
(cid:48))-strongly-unforgeable LR-MAC on messages of length (cid:96)
with n-bit blocks, where:
(cid:48) ≤ prf + (q + 1)(cid:96)(prf + 2-sim) + negl(n),

with s(cid:48) ≈ s−q·(cid:96)·sS and t(cid:48) ≈ t−˜t, where ˜t is the time required
by the challenger to simulate the experiment Forgeeuf−cma
AL,MAC(n)
for the construction MAC1, which essentially consists of (q +
1)· ((cid:96) + 1) evaluations of F and q· (cid:96) calls to the simulator S L.
Here, negl(n) refers to a negligible function of n assuming
that q and (cid:96) are polynomially bounded in n.
Proof. The proof of strongly-unforgeable LR-MAC se-
curity for our MAC1 construction is available in Appendix
A. It proceeds by a sequence of hybrid games, which essen-
tially follows the strategy introduced in [36, Theorem 1].
Remark 5. A glance at Figure 2 might suggest that only
the 1-simulatability leakage assumption would suﬃce for the
security of the MAC1 construction, but this does not seem
to be the case. Indeed, for most parts of the security reduc-
tion, the 1-simulatability leakage assumption is enough. But
because we allow the adversary to possibly output a forgery
on a previously used IV, we need the second output pair of
the leakage simulator to enable us to verify the attempted
forgery by the adversary (on this particular IV). Note that
this issue only relates to the reduction and has nothing to
do with the MAC construction itself (for which we anyway
exclude the leakage during veriﬁcation).
Remark 6. From a performance point-of-view, the con-
struction is essentially as fast as one can hope since it has
an amortized cost of one (weakly protected) block cipher
execution per message block – see the table in [23] for an
overview. However, strict comparisons with these previous
works is not possible due to their diﬀerent leakage models.
In particular, as recently discussed in [10], simulatable leak-
age and bounded leakage are not implied by each other.
1002.4 Variation: the hash then MAC paradigm
To conclude this section, we note that in view of how the
message in Figure 2 is processed, an alternative (and in fact
even simpler) solution to build a leakage-resilient MAC is
to rely on the hash then MAC paradigm. Such a proposal
is intuitively depicted in Figure 3, where we can see that
the leakage-resilience of the scheme now really boils down
to the execution of the leak-free block cipher on a random
IV, which comes at the cost of an additional building block
(namely a collision-resistant hash function). This essentially
results from the fact that the hash function is only executed
on public inputs. Interestingly, this construction also sug-
gests that a standard solution like HMAC could be slightly
tweaked in order to become leakage-resilient (which is in
contrast with the previously mentioned CBC-MAC).
Figure 3: Hash then MAC.
More precisely, our construction MAC2 = (KeyGen2, Mac2,
Vrfy2), can be viewed as a special instantiation of MAC1
where the messages of arbitrary length are ﬁrst hashed to
a single n-bit block using the hash function H : {0, 1}∗ →
{0, 1}n. Then a tag is generated for this hashed block using
MAC1, which makes its analysis straightforward.
Description of MAC2:
• KeyGen2(1n): Choose a hash function H : {0, 1}∗ →
{0, 1}n, and a shared symmetric-key k $← {0, 1}n.
• Mac2 (m, k): Choose IV $← {0, 1}n. Compute k(cid:48) =
k(IV ), h = H (m), and r = Fk(cid:48) (h). Return
• Vrfy2 (m, τ, k): Parse τ = (IV, tg). Compute τ(cid:48) ←
– If τ(cid:48) ?= τ , then return 1 (correct), else return
F∗
τ = (IV, r).
Mac2 (m, k, IV ).
0 (incorrect).
Our proof requires the deﬁnition of a collision resistant hash
function (sampled from a family) which only operates on
public values. Hence, we do not consider any leakage here.
Deﬁnition 4. [Collision Resistance]. A hash function H :
{0, 1}∗ → {0, 1}n sampled from a family of functions H is
(t, cr) collision-resistant if for any adversary A running for
time at most t, its advantage in outputting m, m(cid:48) ∈ {0, 1}∗
such that m (cid:54)= m(cid:48) and H(m) = H(m(cid:48)), is at most cr.
Based on this deﬁnition, the following theorem establishes
the leakage-resilience of our MAC2 construction.
Theorem 2. Let F : {0, 1}n × {0, 1}n → {0, 1}n be an
(s, t, prf ) PRF having (sS , tS , s, t, 2-sim) 2-simulatable leak-
ages, and let H : {0, 1}∗ → {0, 1}n be a (t, cr) collision-
resistant hash function. Then, the instantiation of MAC2
with F and H is an (q, s(cid:48), t(cid:48), (cid:48))-strongly-unforgeable LR-MAC
on messages of arbitrary length, where:
(cid:48) ≤ cr + prf + (q + 1)(prf + 2-sim) + negl(n),

with s(cid:48) ≈ s− q· sS and t(cid:48) ≈ t− ˜t, where ˜t is the time required
by the challenger to simulate the experiment Forgeeuf−cma
AL,MAC(n)
for the construction MAC2, which essentially consists of 2 ·
(q+1) evaluations of F and q calls to the simulator S L. Here,
negl(n) again refers to a negligible function of n assuming
that q and (cid:96) are polynomially bounded in n.
Proof sketch. We just observe that if the adversary is un-
able to break the collision resistance of H, then it has to
output a valid forgery on a new hash output (correspond-
ing to some message) for a previously queried IV, or on an
old hash output but for a new IV. By treating the n-bit
hash outputs as the message space of MAC1, we obtain the
above bound on the advantage of A from Theorem 1 (with
(cid:96) = 1). Note that the adversary’s advantage in breaking the
collision-resistance of H is cr.
Remark 7. For a 128-bit block cipher such as the AES-
128, we will have cr = 2−64 (because the hash function
outputs n bits) and prf = 2−64 (because of the PRP to PRF
conversion that we use for simplicity in our proof). However,
beyond birthday security could potentially be obtained by
hashing on 2n-bit values and replacing the block cipher by
a tweakable block cipher, e.g. as done in the context of
authenticated encryption [20], which we leave as an open
problem. Besides, note that this variant allows gaining a
factor (cid:96) compared to the bound of Theorem 1, which comes
at the cost of an additional primitive to implement.
3. LEAKAGE-RESILIENT ENCRYPTION
3.1 Security deﬁnition
We now turn to the construction of a leakage-resilient sym-
metric encryption scheme ENC with key generation algo-
rithm Gen, encryption algorithm Enc and decryption algo-
rithm Dec. The Enc algorithm proceeds on messages made
of a variable number of blocks, i.e., messages from the set
({0, 1}n)∗ where n is the block size. For this scheme, we
deﬁne a PrivKlmcpa,b
AL,ENC game, analogue to the traditional IND-
CPA security game, but in a physical setting where all en-
cryption operations, including the test query, return to the
adversary a leakage together with a ciphertext.
PrivKlmcpa,b
AL,ENC is the output of the following experiment:
1. A key k is generated by running Gen.
2. ALgets access to a leaking encryption oracle that,
on messages of arbitrary block length, returns an
encryption of these messages together with the leak-
age resulting from the encryption process.
3. AL submits two messages m0 and m1 of identical
4. A ciphertext c ← Enck(mb) is computed, resulting
5. AL can keep accessing the leaking encryption oracle.
6. AL outputs a bit b(cid:48).
block length
in a leakage l. Both c and l are given to AL.
101Naturally, we will be interested in the diﬀerence
AL,ENC − PrivKlmcpa,1
AL,ENC|, which we would like to be min-
|PrivKlmcpa,0
imal. However, and as discussed in the introduction, since
we consider leakages even during the test query, we cannot
expect this diﬀerence to be negligible. For that reason, we
rather focus on establishing bounds that are derived from
the security of a considerably simpler encryption scheme,
that encrypts only one message made of a single block per
key. That is, we want to show that any security guarantee
that can be ensured for this simple (single-block, one-time)
encryption scheme (next denoted by ENCs) extends to our
full construction ENC. This is eventually what we achieve
in Theorems 3 and 4, which relate the CPA security of the
multi-block ENC scheme to the eavesdropper security of the
single-block ENCs scheme. We believe that such a result
concretely helps the task of secure implementation and se-
curity evaluation in two ways:
1. The eavesdropper security game gives a unique leak-
age for a single-block message to the adversary, which
is a most limited input to run a side-channel attack
(in practice such attacks usually rely on a few hun-
dred leakages). This means that a cheap and relatively
weakly protected implementation could be used even
in a setting where long messages are encrypted [3].
2. Security evaluations can also focus on the (compara-
tively) simpler task of assessing the security of a single
encryption round, without needing to care about the
combination of leakages from the encryption of multi-
ple blocks of message. (For instance, leaking one bit of
a key per encryption block is probably not a problem
when encrypting a single block, but could become a
problem if the encryption of each block leaks a new
bit. Our proof guarantees that there is no such risk.)
The rest of this section is organized as follows. We start
in Section 3.2 by deﬁning our leakage-resilient encryption
scheme ENC and its leakage model. Next, in Section 3.3, we
deﬁne our one-time and one-block encryption scheme ENCs,
together with its leakage model. Based on these deﬁnitions,
we build our security analysis as follows. In Section 3.4, we
deﬁne an idealized version ENCsI of ENCs that has perfectly
random outputs and simulated leakages for the PRFs. We
also deﬁne a one-time (but multiple block) version of the
ENC scheme, which we call ENC(cid:96) (the (cid:96) referring to the (cid:96)
blocks), as well as an ideal version ENC(cid:96)I of it. We conclude
this section by bounding the probability that an adversary
distinguishes between real and ideal versions of the schemes.
In Section 3.5, we push our analysis one step further, bound-
ing the probability that an adversary breaks eavesdropper
security for the ENC(cid:96)I scheme as a function of the proba-
bility of breaking that same property on the ENCsI scheme.
The result from Section 3.4 can then be used to move back
to the real encryption schemes. Eventually, in Section 3.6,
we conclude by relating the CPA security of the ENC scheme
to the eavesdropper security of the ENC(cid:96) scheme.
3.2 Leakage-resilient encryption scheme
The ENC scheme. Our starting point is the leakage-resilient
stream cipher from [36], which we transform into an encryp-
tion scheme by XORing its output with the message to be
encrypted. CPA security is obtained by adding an initial-
ization round, which generates the stream-cipher seed by
Figure 4: Leakage-resilient encryption scheme.
applying a leak-free PRF, keyed with the encryption key, to
an initialization vector IV, as represented in Figure 4. As
for the previous MAC constructions, we require the initial-
ization step be leak-free in order to make sure that, despite
the fact that it will be executed many times with the same
key, that key will remain safe. And here as well, this use of
leak-free component is minimal (a single execution per mes-
sage) and independent of the message size (so that the fresh
key k(cid:48) can possibly be pre-computed.) The ENC encryption
scheme is deﬁned more formally in Table 1.
• Gen picks a random key k ← {0, 1}n.
• Enc picks a random IV ← {0, 1}n, then computes
k0 = F∗
k(IV ) using the leak-free PRF. The encryp-
tion of the (cid:96)-block message m = (cid:104)m1, . . . , m(cid:96)(cid:105) is
then computed as IV, c1, . . . , c(cid:96), where ci = yi⊕mi,
yi = Fki−1 (pB) and ki = Fki−1 (pA) (pA and pB are
public constants, where pA (cid:54)= pB).
• Dec proceeds in the natural way.
Table 1: The ENC encryption scheme
Leakage model and assumptions. We capture the leak-
ages of an implementation of this encryption scheme through
two leakage functions: LF(p, k) that deﬁnes the leakage of
each PRF running on plaintext p with key k, and L⊕(m, y)
that deﬁnes the leakage of computing the XOR of m and
(When the adversary AL has the single L superscript,
y.
we mean that it can query both these leakage functions.)
So, the encryption of each message block mi causes the fol-
lowing leakages: LF(pA, ki−1), LF(pB, ki−1) and L⊕(mi, yi).
Here and later, we precede an algorithm with the L letter
(e.g. LEnck(m)) to refer to both the output of an encryp-
tion and the resulting leakage. As in the previous section
about MACs, we require the leakages of the PRF F to be
2-simulatable, but no more. As a consequence, leakage func-
tions do not need to be eﬃcient, and can possibly leak sev-
eral bits of information on their inputs. In particular, they
can provide several bits of information on yi and mi, which
makes traditional security notions based on indistinguisha-
bility impossible to achieve. We believe that, without addi-
tional leak-free component, this is just unavoidable: at some
point, messages need to be used during the encryption pro-
cess, and this use must be expected to leak information that
is suﬃcient to win any indistinguishability game.
3.3 Single-block one-time encryption scheme
We deﬁne, in the left part of Table 2, the ENCs single-block
one-time encryption scheme, from the security of which we
will infer the PrivKlmcpa,
AL,ENC security of our ENC multi-block
102Description of ENCs:
• Gen picks k0 ← {0, 1}n.
• Encsk0 (m) returns (k1, c1), where c1 =
y1 ⊕ m, y1 = Fk0 (pB) and k1 =
Fk0 (pA).
• Dec proceeds in the natural way.
resulting
leakage
deﬁned
The
LEncs(k0, m)
is
(LF(pA, k0), LF(pB, k0), L⊕(m, y1),
SL(k−, pA, k0), k−) with k− ← {0, 1}n.
from Encsk0 (m)
:=
as
Description of ENCsI:
• EncsI
returns
k0 (m)
(k1, c1), where
c1 = y1 ⊕ m, y1 ← {0, 1}n and k1 ←
{0, 1}n.