year, weeknumber and weekday in respective order for the given date instance.
# [Get the monday of a week number](https://stackoverflow.com/questions/17087314/get-date-from-week-number)
A week number is not enough to generate a date; you need a day of the week as
well. Add a default:
```python
import datetime
d = "2013-W26"
r = datetime.datetime.strptime(d + "-1", "%Y-W%W-%w")
```
The `-1` and `-%w` pattern tells the parser to pick the Monday in that week.
# [Get the month name from a number](https://stackoverflow.com/questions/6557553/get-month-name-from-number)
```python
import calendar
>> calendar.month_name[3]
'March'
```
# [Get ordinal from number](https://stackoverflow.com/questions/9647202/ordinal-numbers-replacement)
```python
def int_to_ordinal(number: int) -> str:
    """Convert an integer into its ordinal representation.
    make_ordinal(0)   => '0th'
    make_ordinal(3)   => '3rd'
    make_ordinal(122) => '122nd'
    make_ordinal(213) => '213th'
    Args:
        number: Number to convert
    Returns:
        ordinal representation of the number
    """
    suffix = ["th", "st", "nd", "rd", "th"][min(number % 10, 4)]
    if 11 >> sorted([5, 2, 3, 1, 4])
[1, 2, 3, 4, 5]
```
## [Key functions](https://docs.python.org/3/howto/sorting.html#key-functions)
Both `list.sort()` and `sorted()` have a `key` parameter to specify a function
(or other callable) to be called on each list element prior to making
comparisons.
For example, here’s a case-insensitive string comparison:
```python
>>> sorted("This is a test string from Andrew".split(), key=str.lower)
['a', 'Andrew', 'from', 'is', 'string', 'test', 'This']
```
The value of the `key` parameter should be a function (or other callable) that
takes a single argument and returns a key to use for sorting purposes. This
technique is fast because the key function is called exactly once for each input
record.
A common pattern is to sort complex objects using some of the object’s indices
as keys. For example:
```python
>>> from operator import itemgetter
>>> student_tuples = [
    ('john', 'A', 15),
    ('jane', 'B', 12),
    ('dave', 'B', 10),
]
>>> sorted(student_tuples, key=itemgetter(2))   # sort by age
[('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]
```
The same technique works for objects with named attributes. For example:
```python
>>> from operator import attrgetter
>>> class Student:
    def __init__(self, name, grade, age):
        self.name = name
        self.grade = grade
        self.age = age
    def __repr__(self):
        return repr((self.name, self.grade, self.age))
>>> student_objects = [
    Student('john', 'A', 15),
    Student('jane', 'B', 12),
    Student('dave', 'B', 10),
]
>>> sorted(student_objects, key=attrgetter('age'))   # sort by age
[('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]
```
The operator module functions allow multiple levels of sorting. For example, to
sort by grade then by age:
```python
>>> sorted(student_tuples, key=itemgetter(1,2))
[('john', 'A', 15), ('dave', 'B', 10), ('jane', 'B', 12)]
>>> sorted(student_objects, key=attrgetter('grade', 'age'))
[('john', 'A', 15), ('dave', 'B', 10), ('jane', 'B', 12)]
```
## [Sorts stability and complex sorts](https://docs.python.org/3/howto/sorting.html#sort-stability-and-complex-sorts)
Sorts are guaranteed to be stable. That means that when multiple records have
the same key, their original order is preserved.
```python
>>> data = [('red', 1), ('blue', 1), ('red', 2), ('blue', 2)]
>>> sorted(data, key=itemgetter(0))
[('blue', 1), ('blue', 2), ('red', 1), ('red', 2)]
```
Notice how the two records for blue retain their original order so that
`('blue', 1)` is guaranteed to precede `('blue', 2)`.
This wonderful property lets you build complex sorts in a series of sorting
steps. For example, to sort the student data by descending grade and then
ascending age, do the age sort first and then sort again using grade:
```python
>>> s = sorted(student_objects, key=attrgetter('age'))     # sort on secondary key
>>> sorted(s, key=attrgetter('grade'), reverse=True)       # now sort on primary key, descending
[('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]
```
This can be abstracted out into a wrapper function that can take a list and
tuples of field and order to sort them on multiple passes.
```python
>>> def multisort(xs, specs):
    for key, reverse in reversed(specs):
        xs.sort(key=attrgetter(key), reverse=reverse)
    return xs
>>> multisort(list(student_objects), (('grade', True), ('age', False)))
[('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]
```
## [Get the attribute of an attribute](https://stackoverflow.com/questions/403421/how-to-sort-a-list-of-objects-based-on-an-attribute-of-the-objects)
To sort the list in place:
```python
ut.sort(key=lambda x: x.count, reverse=True)
```
To return a new list, use the `sorted()` built-in function:
```python
newlist = sorted(ut, key=lambda x: x.body.id_, reverse=True)
```
# [Iterate over an instance object's data attributes in Python](https://www.saltycrane.com/blog/2008/09/how-iterate-over-instance-objects-data-attributes-python/)
```python
@dataclass(frozen=True)
class Search:
    center: str
    distance: str
se = Search("a", "b")
for key, value in se.__dict__.items():
    print(key, value)
```
# [Generate ssh key](https://stackoverflow.com/questions/2466401/how-to-generate-ssh-key-pairs-with-python)
```bash
pip install cryptography
```
```python
from os import chmod
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.backends import default_backend as crypto_default_backend
private_key = rsa.generate_private_key(
    backend=crypto_default_backend(), public_exponent=65537, key_size=4096
)
pem = private_key.private_bytes(
    encoding=serialization.Encoding.PEM,
    format=serialization.PrivateFormat.TraditionalOpenSSL,
    encryption_algorithm=serialization.NoEncryption(),
)
with open("/tmp/private.key", "wb") as content_file:
    chmod("/tmp/private.key", 0600)
    content_file.write(pem)
public_key = (
    private_key.public_key().public_bytes(
        encoding=serialization.Encoding.OpenSSH,
        format=serialization.PublicFormat.OpenSSH,
    )
    + b" PI:EMAIL"
)
with open("/tmp/public.key", "wb") as content_file:
    content_file.write(public_key)
```
# Make multiline code look clean
If you need variables that contain multiline strings inside functions or methods
you need to remove the indentation
```python
def test():
    # end first line with \ to avoid the empty line!
    s = """\
hello
  world
"""
```
Which is inconvenient as it breaks some editor source code folding and it's ugly
for the eye.
The solution is to use
[`textwrap.dedent()`](https://docs.python.org/3/library/textwrap.html)
```python
import textwrap
def test():
    # end first line with \ to avoid the empty line!
    s = """\
    hello
      world
    """
    print(repr(s))  # prints '    hello\n      world\n    '
    print(repr(textwrap.dedent(s)))  # prints 'hello\n  world\n'
```
If you forget to add the trailing `\` character of `s = '''\` or use
`s = '''hello`, you're going to have a bad time with [black](black.md).
# [Play a sound](https://linuxhint.com/play_sound_python/)
```bash
pip install playsound
```
```python
from playsound import playsound
playsound("path/to/file.wav")
```
# [Deep copy a dictionary](https://stackoverflow.com/questions/5105517/deep-copy-of-a-dict-in-python)
```python
import copy
d = {...}
d2 = copy.deepcopy(d)
```
# [Find the root directory of a package](https://github.com/chendaniely/pyprojroot)
`pyprojroot` finds the root working directory for your project as a `pathlib`
object. You can now use the here function to pass in a relative path from the
project root directory (no matter what working directory you are in the
project), and you will get a full path to the specified file.
## Installation
```bash
pip install pyprojroot
```
## Usage
```python
from pyprojroot import here
here()
```
# [Check if an object has an attribute](https://stackoverflow.com/questions/610883/how-to-know-if-an-object-has-an-attribute-in-python)
```python
if hasattr(a, "property"):
    a.property
```
# [Check if a loop ends completely](https://stackoverflow.com/questions/38381850/how-to-check-whether-for-loop-ends-completely-in-python/38381893)
`for` loops can take an `else` block which is not run if the loop has ended with
a `break` statement.
```python
for i in [1, 2, 3]:
    print(i)
    if i == 3:
        break
else:
    print("for loop was not broken")
```
## [Merge two lists](https://stackoverflow.com/questions/1720421/how-do-i-concatenate-two-lists-in-python)
```python
z = x + y
```
## [Merge two dictionaries](https://stackoverflow.com/questions/38987/how-to-merge-two-dictionaries-in-a-single-expression)
```python
z = {**x, **y}
```
## [Create user defined exceptions](https://docs.python.org/3/tutorial/errors.html#user-defined-exceptions)
Programs may name their own exceptions by creating a new exception class.
Exceptions should typically be derived from the `Exception` class, either
directly or indirectly.
Exception classes are meant to be kept simple, only offering a number of
attributes that allow information about the error to be extracted by handlers
for the exception. When creating a module that can raise several distinct
errors, a common practice is to create a base class for exceptions defined by
that module, and subclass that to create specific exception classes for
different error conditions:
```python
class Error(Exception):
    """Base class for exceptions in this module."""
class ConceptNotFoundError(Error):
    """Transactions with unmatched concept."""
    def __init__(self, message: str, transactions: List[Transaction]) -> None:
        """Initialize the exception."""
        self.message = message
        self.transactions = transactions
        super().__init__(self.message)
```
Most exceptions are defined with names that end in “Error”, similar to the
naming of the standard exceptions.
## [Import a module or it's objects from within a python program](https://docs.python.org/3/library/importlib.html)
```python
import importlib
module = importlib.import_module("os")
module_class = module.getcwd
relative_module = importlib.import_module(".model", package="mypackage")
class_to_extract = "MyModel"
extracted_class = geattr(relative_module, class_to_extract)
```
The first argument specifies what module to import in absolute or relative terms
(e.g. either `pkg.mod` or `..mod`). If the name is specified in relative terms,
then the package argument must be set to the name of the package which is to act
as the anchor for resolving the package name (e.g.
`import_module('..mod', 'pkg.subpkg')` will `import pkg.mod`).
# [Get system's timezone and use it in datetime](https://stackoverflow.com/a/61124241)
To obtain timezone information in the form of a `datetime.tzinfo` object, use
`dateutil.tz.tzlocal()`:
```python
from dateutil import tz
myTimeZone = tz.tzlocal()
```
This object can be used in the `tz` parameter of `datetime.datetime.now()`:
```python
from datetime import datetime
from dateutil import tz
localisedDatetime = datetime.now(tz=tz.tzlocal())
```
# [Capitalize a sentence](https://stackoverflow.com/questions/53898070/capitalize-only-the-first-letter-of-sentences-in-python-using-split-function)
To change the caps of the first letter of the first word of a sentence use:
```python
>> sentence = "add funny Emojis"
>> sentence[0].upper() + sentence[1:]
Add funny Emojis
```
The `.capitalize` method transforms the rest of words to lowercase. The `.title`
transforms all sentence words to capitalize.
# [Get the last monday datetime](https://www.pythonprogramming.in/find-the-previous-and-coming-monday-s-date-based-on-current-date.html)
```python
import datetime
today = datetime.date.today()
last_monday = today - datetime.timedelta(days=today.weekday())
```
# Issues
- [Pypi won't allow you to upload packages with direct dependencies](https://github.com/BaderLab/saber/issues/35):
  update the section above.