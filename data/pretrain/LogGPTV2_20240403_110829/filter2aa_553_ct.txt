址。
具有静态存储期的变量可以具有外部链接、内部链接或无链接。在同一
个文件所有函数的外部声明的变量是外部变量，具有文件作用域、外部链接
和静态存储期。如果在这种声明前面加上关键字static，那么其声明的变量
具有文件作用域、内部链接和静态存储期。如果在函数中用 static 声明一个
变量，则该变量具有块作用域、无链接、静态存储期。
具有自动存储期的变量，程序在进入该变量的声明所在块时才为其分配
内存，在退出该块时释放之前分配的内存。如果未初始化，自动变量中是垃
圾值。程序在编译时为具有静态存储期的变量分配内存，并在程序的运行过
程中一直保留这块内存。如果未初始化，这样的变量会被设置为0。
具有块作用域的变量是局部的，属于包含该声明的块私有。具有文件作
用域的变量对文件（或翻译单元）中位于其声明后面的所有函数可见。具有
外部链接的文件作用域变量，可用于该程序的其他翻译单元。具有内部链接
的文件作用域变量，只能用于其声明所在的文件内。
下面用一个简短的程序使用了5种存储类别。该程序包含两个文件（程
序清单12.5和程序清单12.6），所以必须使用多文件编译（参见第9章或参看
888
编译器的指导手册）。该示例仅为了让读者熟悉5种存储类别的用法，并不
是提供设计模型，好的设计可以不需要使用文件作用域变量。
程序清单12.5 parta.c程序
// parta.c --- 不同的存储类别
// 与 partb.c 一起编译
#include 
void report_count();
void accumulate(int k);
int count = 0;     // 文件作用域，外部链接
int main(void)
{
int value;     // 自动变量
register int i;  // 寄存器变量
printf("Enter a positive integer (0 to quit): ");
while (scanf("%d", &value) == 1 && value > 0)
{
++count;    // 使用文件作用域变量
for (i = value; i >= 0; i--)
accumulate(i);
889
printf("Enter a positive integer (0 to quit): ");
}
report_count();
return 0;
}
void report_count()
{
printf("Loop executed %d times\n", count);
}
程序清单12.6 partb.c程序
// partb.c -- 程序的其余部分
// 与 parta.c 一起编译
#include 
extern int count;      // 引用式声明，外部链接
static int total = 0;    // 静态定义，内部链接
void accumulate(int k);   // 函数原型
void accumulate(int k)// k 具有块作用域，无链接
{
static int subtotal = 0;  // 静态，无链接
890
if (k 
extern unsigned int rand0(void);
int main(void)
{
int count;
for (count = 0; count 
#include 
extern void srand1(unsigned int x);
extern int rand1(void);
897
int main(void)
{
int count;
unsigned seed;
printf("Please enter your choice for seed.\n");
while (scanf("%u", &seed) == 1)
{
srand1(seed);  /* 重置种子 */
for (count = 0; count  /* 提供time()的ANSI原型*/
srand1((unsigned int) time(0)); /* 初始化种子 */