SODBASECEP 入门与进阶教程
目录（零）：阅读指引 ............................................................................................. 3（一）：SODBASE CEP 简介 .......................................................................... 3（二）：运行第一个 EPL 例子 ......................................................................... 5（三）：GUI 建模工具 SODBASE Studio 和 CEP 服务器 ........................... 11（四）：类 SQL 语言 EPL 与 Storm 或 jStorm 集成 ................................... 13（四）续：类 SQL 语言 EPL 与 Storm 或 jStorm 集成-滑动窗口 ............ 21（五）：流式计算中的类 SQL 语言 EPL ....................................................... 24（六）：流式计算中的存储和 ETL ................................................................. 38（七）：Fail retry 机制、去重只执行一次机制、事件乱序处理机制 ......... 47（八）：高可用性 HA..................................................................................... 48（九）：SODBASE View 实时图表显示和移动端消息 ............................... 54（十）：在线动态修改 EPL 规则 ................................................................... 59（十一）：分布式集群 ................................................................................... 61（十二）：规则模板、阈值和用户界面......................................................... 63 进阶篇（一）：除了 Java 还有 C++ ............................................................. 63 进阶篇（二）：日志采集 ................................................................................ 65 进阶篇（二）续：日志采集之外的 APM 探针方法 .................................... 73 进阶篇（三）：自己写输入输出适配器......................................................... 76 进阶篇（四）：自己控制时钟和时间戳......................................................... 80北京速德贝斯科技有限公司 WWW.SODBASE.COM
 SODBASECEP 入门与进阶教程
北京速德贝斯科技有限公司 WWW.SODBASE.COM
 SODBASECEP 入门与进阶教程 本教程在 SODBASE 技术支持中心工程师参与维护的博客上发布，可访问以
下链接了解最新内容。。
（零）：阅读指引
建议所有读者都阅读第（二）、（三）、（五）章，熟悉 EPL 的基本知识。其它
几章可粗略浏览，了解即可。以下章节许多读者可跳过
	第（四）章是为 Storm/jStorm with SQL 用户写的，许多读者可能用不到，请 跳过。
进阶篇（二）是为日志分析这一类应用写的，大多数读者可能用不到，请跳
过。
开发实时数据处理、事件处理、数据监测预警应用时，往往苦于没有好的工具，
一个功能花费数天甚至个把月的时间，还不稳定。为大家推荐一下 SODBASE CEP工具，专门为这类需求服务的，能快速搭建此类系统，达到商业项目应用的要求，
同时保证系统高效稳定。从今天起准备写一些 SODBASE CEP 基本用法的文章，
希望能帮助到大家。
对于不熟悉流数据处理、CEP 领域的同学，首先给大家介绍一下什么是实时流
数据处理、EPL，熟悉的同学请直接略过。
实时流数据处理，概念就不专门定义了，上几个例子大家可以自己体会
(1)金融风控，可以监测某个账号是否有异常的动作。
(2)交通监测，监测违法车辆，进行预警。
(3)股票市场，监测行情数据，指定策略，进行程序化交易，减少人为决定的偏差。
(4)船舶监测，监测监测船只的位置，看其是否偏离了日常或规定的活动区域。
北京速德贝斯科技有限公司 WWW.SODBASE.COM
 SODBASECEP 入门与进阶教程
(5)变电站监测，监测电压并保存历史数据。
(6)振动故障监测，监测工业设备的故障。(6)振动故障监测，监测工业设备的故障。
(7)RFID 应用，监测进入通道、离开通道。
(8)运维监控，检测系统服务质量好不好，有没有超时响应慢的情况。
(9)经营分析监测，实时监测业务的 KPI 指标。
(10)实时广告竞价，根据实时用户数据和竞价规则进行竞价决策。
(11)推荐系统，根据实时数据进行信息推荐。
另外，几乎所有的信息系统也会用到定时、超时任务功能、数据监测功能，只
靠数据库的 job 机制或简单的轮询程序基本难以支撑大型应用，建议也升级到 EPL
和事件图形拓扑架构上来。这对于建设实时数据处理系统包括（系统重构、升级、
维护）才是更好的架构选择。
EPL: 
大家用传统关系数据库之所以很方便，很大的功劳归功于有既通俗又严谨的 SQL 语
句。实时流数据处理，如果给用户实施项目，也最好有类 SQL 语句，这便是流数据
北京速德贝斯科技有限公司 WWW.SODBASE.COM北京速德贝斯科技有限公司 WWW.SODBASE.COM
 SODBASECEP 入门与进阶教程
处理中的 EPL。例如：SELECT event.id FROM event:stockstream WHERE event.price>50 
GUI 模型设计和 HA 
商业项目或一些关键项目的特点，要求工具使用一定要简单，功能表达能力一定要 强，能让现场实施人员快速上手，建立原型，并稳定运行、易于维护。因为本身和 客户交流需求，测试、培训、维护，就一大堆的事，没有好的工具，项目进度和质 量没法保障。这要求流数据处理系统要有建模工具，拖拖拽拽就能把模型画出来，能做单元测试，具备提供任务监控和 HA 等能力。SODBASE CEP 这些要素基本都 具备。
系统集成能力系统集成能力
监测领域用 C++写程序的同学也不少，SODBASE CEP 既有 Java 接口，也有 C++ 接口，可供选择。如果已经使用其它流式计算技术的同学，也可以和 SODBASE CEP 集成，以提高对复杂事件监测的能力和对类 SQL 语言的支持。
SODBASE CEP 用于轻松、高效实施数据监测、监控类项目 。EPL 语法见
。图形化建模请使用 。
读完此系列文章的读者，应该会对实施大部分的监测预警类、实时交易类项目 感到非常容易了。
为了让大家理解 SODBASE CEP 的工作原理，直接写一个 CEP 模型的 XML，以 API 调用的方式运行。不想写 XML，直接使用图形工具的同学，请直接跳过 本文。不想用 API 写程序，直接用 GUI 操作服务器的同学，也请直接跳过本文。用得到的时候可以再返回过来看。
北京速德贝斯科技有限公司 WWW.SODBASE.COM北京速德贝斯科技有限公司 WWW.SODBASE.COM
 SODBASECEP 入门与进阶教程
1.示例操作步骤
（1）下载 ，解压导入 Eclipse 中。只需将
lib 下的 jar 包添加到 build path 中，不用依赖其它工程（projects）。
（2）运行 Example.java，筛选价格大于 50 的数据
（3）结果输出如下
[plain] view plaincopy 
1.'start cep model CEPModelPrimaryKey [modelname=example, modelspacena
me=, version=1.0, serveraddress=]','','2015-04-29 04:48:21 
2.
3.Wed Apr 29 16:48:21 CST 2015  price: 73.5247091124538, Wed Apr 29 16:48:21 CST 2015 
4.
5.Wed Apr 29 16:48:22 CST 2015  price: 71.22182321052489, Wed Apr 29 1
6:48:22 CST 2015 
6.
7.Wed Apr 29 16:48:23 CST 2015  price: 72.81982202535718, Wed Apr 29 1
6:48:23 CST 2015 
8.
9.Wed Apr 29 16:48:24 CST 2015  price: 98.18584015152344, Wed Apr 29 1
6:48:24 CST 2015 
10.'stop cep model CEPModelPrimaryKey [modelname=example, modelspacenam
e=, version=1.0, serveraddress=]','','2015-04-29 04:48:272.工作原理
2.1 模型文件和 EPL 语句
CEP 模型 XML 文件 example.xml 
[html] view plaincopy 
京速德贝斯科技有限公司 WWW.SODBASE.COM
 SODBASECEP 入门与进阶教程
1.
2.
3.2
4.
5.com.sodbase.inputadaptor.StubInputAda
ptor
6.stock
7.false7.false
8.
9.CREATE QUERY example SELECT T1.price AS price FROM T1:s
tock PATTERN T1 WHERE T1.price>50  WITHIN 0 
10.
11.true
12.com.example.PrintEventOutputAdaptor
13.false
14.example14.example
15.
16.example
17.1.0
18.
19.
其核心是 EPL 语句，也即 SODSQL 语句
[sql] view plaincopy 
1.CREATE QUERY example 
3.FROM T1:stock 
4.PATTERN T1 
5.WHERE T1.price>50 
6.WITHIN 0 
T1 是事件名称，从 stock 流中取数据。这儿有两个地方与传统 SQL 不同，也是流
数据处理的关键点。数据处理的关键点。
第一个地方是 PATTERN T1 用来表示复杂事件模式，这里是一个很简单的 filter 操
作，没有什么模式，就只用一个事件名称表达就可以了。模式的写法，后文还会介
绍。
北京速德贝斯科技有限公司 WWW.SODBASE.COM
 SODBASECEP 入门与进阶教程
第二个地方是 WITHIN 0 滑动窗口的大小，是指要检测的复合事件的结束时间和开
始时间的差不大于窗口的长度。这里的 Filter 不需要窗口。
2.2 输入适配器
inputAdaptorClassName 用的是 StubInputAdaptor 输入适配器，这种适配器表示数
据是从此 CEP 单元模型的外部得到的，本例中我们是编程写入的，参见下文
Example.java 源代码，另外 StubInputAdaptor 输入还可以作为由其它单元模型级联
输入，后文有机会将介绍。输入，后文有机会将介绍。
所有输入适配器的第一个参数默认都是流的名称，这里 stock 就是我们数据流的名
称了。注意流名称和事件名 T1 区别，T1 是指 stock 上的一个个数据或称为事件。
2.3 输出适配器
outputAdaptorClassName 设置的是 com.example.PrintEventOutputAdaptor 输出
适配器，屏幕打印输出。是自己写的代码，即 com.example.PrintEventOutputAdaptor
类，实现中 output 方法即可，如下面代码所示。
[java] view plaincopy 
1.publicvoid output(List eventlist) 
2.    { 
3.
4.        PrintStream out = System.out; 
5.while (eventlist.size() > 0)5.while (eventlist.size() > 0) 
6.        { 
7.            Event e = eventlist.remove(0); 
8.            out.flush(); 
9.            out.println(); 
10.
11.if (e instanceof ComplexEvent) 
12.            { 
13.                outputComplexEvent( 
14.                        (ComplexEvent) e, out); 
15.                out.flush(); 
北京速德贝斯科技有限公司 WWW.SODBASE.COM
 SODBASECEP 入门与进阶教程
17.            {SODBASECEP 入门与进阶教程
17.            { 
18.                outputPrimitiveEvent((PrimitiveEvent)e, out); 
19.                out.flush(); 
20.            } else
21.            { 
22.                out.println("error"); 
23.            } 
24.        } 
25.    } 
2.4. 运行模型
运行模型有三种方式，第一种，以 XML 文件来运行，通过 GraphModelExecutorUtil
类的 runXML 来运行。
[java] view plaincopy 
1.publicclass Example 
2.{ 
3.    /**1.publicclass Example 
2.{ 
3.    /** 
4.     * @param args 
5.     */ 
6.publicstaticvoid main(String[] args) 
7.    { 
8.        //执行 CEP 语句和模型
9.        GraphModelExecutorUtil gme = new GraphModelExecutorUtil(); 
10.        gme.runXML("files/example.xml"); 
11.        /* 
12.        GraphModelData cepmodel = GraphModelExecutorUtil.convertXmlT
oObject("files/example.xml"); 
13.        gme.runObject(cepmodel);13.        gme.runObject(cepmodel); 
14.        */ 
15.try
16.        { // simulate the data 
17.            StubInputAdaptor inputAdaptor = new StubInputAdaptor(); 
18.
19.            // 数据输入
20.            inputAdaptor.setStreamName("stock"); 
北京速德贝斯科技有限公司 WWW.SODBASE.COM
 SODBASECEP 入门与进阶教程
21.            Random r = new Random(); 
22.int count = 0; 
23.while (count<=10) 
24.            {23.while (count<=10) 
24.            { 
25.                PrimitiveEvent p = new PrimitiveEvent(); 
26.long time = new Date().getTime(); 
27.                p.setStart_ts(time); 
28.                p.setEnd_ts(time); 
29.                p.getAttributeMap().put("name", 
30.new ValueType("Google", "string")); 
31.                p.getAttributeMap().put( 
32.                        "price",32.                        "price", 
33.new ValueType(String.valueOf(r.nextDouble() 
* 100), 
34.                                "double")); 
35.                p.getAttributeMap() 
36.                        .put("volumn", new ValueType("20", "double")
); 
37.                inputAdaptor.putEventToStream(p); 
38.                Thread.sleep(500); 
39.                count++; 
40.            }40.            } 
41.
42.        } catch (InterruptedException e) 
43.        { 
44.            // TODO Auto-generated catch block 
45.            e.printStackTrace(); 
46.        } 