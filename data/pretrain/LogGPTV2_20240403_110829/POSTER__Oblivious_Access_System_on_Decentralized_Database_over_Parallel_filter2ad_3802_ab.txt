(cid:101)𝐶∗
𝑒𝑣𝑎𝑙 and a garbled circuit(cid:101)𝐶∗
𝑟𝑒𝑝𝑙𝑎𝑐𝑒) : It takes as input a garbled circuit
𝑟𝑒𝑝𝑙𝑎𝑐𝑒, then outputs a transac-
and a updated oblivious database ODB∗.
next round.
𝑖
,(cid:101)𝐶∗
𝑒𝑣𝑎𝑙
𝑖
tion 𝑇𝑈 .
3.1.4 User-side. The specific algorithms on the local-side are for-
mal described as follows:
• DB-KeyGen(1𝛿) : It takes as input a security parameter 1𝛿,
then outputs a secret key k.
• DataRec(k, {𝐵𝑛} , 𝑡𝑖𝑑): It takes as input a secret key k, a set
of cipher-text data blocks {𝐵𝑛} and target data’s ID 𝑡𝑖𝑑, then
outputs a set of the user’s personal data and corresponding
IDs {(𝑖𝑑𝑛, 𝑏𝑛)}
• DataEnc(k, {(𝑖𝑑𝑛, 𝑏𝑛)}): It takes as input a secret key k, a set
of plain-text data blocks and corresponding IDs {(𝑖𝑑𝑛, 𝑏𝑛)},
then outputs a set of cipher-text data blocks {𝐵𝑛}.
• CreateGC(1𝜆, 𝐶): It takes as input a security parameter 𝜆
and a circuit 𝐶, then outputs a garbled circuit(cid:101)𝐶 and(cid:101)𝑤, which
• IDGarble(𝑡𝑖𝑑,(cid:101)𝑤): It takes as input the target data’s ID 𝑡𝑖𝑑
and a set of labels(cid:101)𝑤, then outputs a garbled ID(cid:101)𝑤𝑖𝑑.
is a set of input labels for each input wire of 𝐶.
• PosRefresh(1𝛾 , 𝑛) : It takes as input a security parameter 𝛾
and the number 𝑛 of path, then outputs a set of random path
{𝑝𝑛}.
• PosCreate({𝑖𝑑𝑛} , {𝑝𝑛}) : It takes as input the IDs of the
user’s data {𝑖𝑑𝑛} and a set of random path {𝑝𝑛}, then outputs
a position map 𝑝𝑜𝑠.
• PosGarble(𝑝𝑜𝑠,(cid:101)𝑤) : It takes as input the position map 𝑝𝑜𝑠
and a set of labels(cid:101)𝑤, then outputs the garbled position map
(cid:103)𝑝𝑜𝑠.
Poster Session ASIA CCS '20, October 5–9, 2020, Taipei, Taiwan8963.2 Full Construction
Combining the technology above, we propose the oblivious ac-
cess system. First of all, the user creates an Ethereum account by
SC-KeyGen, then generates the key pair 𝑠𝑘𝑈 and 𝑝𝑘𝑈 for signing
and verifying. Moreover, the user generates the secret key k for
encryption and decryption of data blocks by DB-KeyGen. In this
system, the user must sign on every transaction by SC-Sign, and it
will generate the digital signature 𝜎 of the transaction. After the
transaction is sent to Ethereum blockchain, miners have to verify it
by SC-Vrfy, and it will generate the verification 𝑣. If the verification
is legal, the transaction will be automatic executed. Besides, each
transaction on the blockchain will be compiled with PSC model. It
invokes TransSplit to generate the transaction sets 𝑇𝑆𝑒𝑡1
, . . . ,𝑇𝑆𝑒𝑡𝑝
and generates the threads 𝑡ℎ1, . . . , 𝑡ℎ𝑝 to execute 𝑇𝑆𝑒𝑡1
, . . . ,𝑇𝑆𝑒𝑡𝑝
parallelly by MultiProcess. In a nutshell, the oblivious access sys-
tem consists of three main functions:Initialization,DataAccess and
DataUpload. The specific steps of the functions are described as
follows:
• Initialization : The user encrypts the user’s data and the
corresponding IDs {(𝑖𝑑𝑛, 𝑏𝑛)} by DataEnc and generates
the cipher-text data blocks {𝐵𝑛}. Besides, the user has to
build the position map by PosRefresh and PosCreate. In or-
der to use the garbled circuit scheme on SC, the user has
to do some preprocessing locally. The user generates the
garbled circuit(cid:101)𝐶𝑒𝑣𝑎𝑙 for evaluation and the corresponding
garbled labels(cid:101)𝑤𝑒𝑣𝑎𝑙 by CreateGC. After generating(cid:101)𝑤𝑒𝑣𝑎𝑙,
𝑝𝑜𝑠 will be replaced by(cid:101)𝑤𝑒𝑣𝑎𝑙 and 𝑝𝑜𝑠 will become garbled
position map(cid:103)𝑝𝑜𝑠. Thus, the data’s ID will not be learned
the user has to update the labels on(cid:103)𝑝𝑜𝑠. The user needs
(cid:101)𝐶𝑟𝑒𝑝𝑙𝑎𝑐𝑒 which is generated by CreateGC for replacing la-
𝑝𝑜𝑠, and uploads(cid:103)𝑝𝑜𝑠,(cid:101)𝐶𝑒𝑣𝑎𝑙,(cid:101)𝐶𝑟𝑒𝑝𝑙𝑎𝑐𝑒 to SC. Therefore, the
bels. Finally, the user builds the oblivious structure which
is show in Fig. 1 on SCand stores {𝐵𝑛} in it according to
by SC. Since the garbled circuit can only be used one time,
the user invokes PosGarble to garble 𝑝𝑜𝑠. The ID field of
𝑡𝑖𝑑 will not be learned by SC. The user evaluates the target
user deploys SCto Ethereum blockchain by 𝑇𝑖𝑛𝑖𝑡𝑖𝑎𝑙𝑖𝑧𝑒, and
SCprovide the service-side algorithm mentioned in section
3.1.3 to the user. Next, it will generate the corresponding
transaction 𝑇𝐼 and the oblivious database ODB.
• DataAccess : Before accessing the data on SC, the user gar-
the corresponding transaction 𝑇𝐸. After that, the user gets
a set of cipher-text data blocks {𝐵𝑖} which contains the tar-
get data by 𝑇𝑟𝑒𝑎𝑑, and it will generates the corresponding
bles the target data’s ID 𝑡𝑖𝑑 into(cid:101)𝑤𝑖𝑑 by IDGarble. Therefore,
data’s location 𝑙𝑜𝑐𝑖𝑑 on(cid:103)𝑝𝑜𝑠 by 𝑇𝑒𝑣𝑎𝑙, and it will generates
transaction 𝑇𝑅. After the labels on(cid:103)𝑝𝑜𝑠 is used, the user has
(cid:103)𝑝𝑜𝑠∗ which is generated by 𝑇𝑟𝑒𝑝𝑙𝑎𝑐𝑒, and it will generate
(cid:9). In
encrypts {(𝑖𝑑𝑖, 𝑏𝑖)} by DataEnc, and it will generate(cid:8)𝐵∗
to update the labels by the updated garbled position map
the corresponding transaction 𝑇𝑅𝑃. After getting {𝐵𝑖}, the
user recovers the data blocks by DataRec and gets {(𝑖𝑑𝑖, 𝑏𝑖)}.
Next, the user obtains a target data according to 𝑡𝑖𝑑.
• DataUpload : Before uploading the data on SC, the user re-
order to hide the data access pattern, the user has to refresh
𝑖
𝑖
will generate the corresponding transaction 𝑇𝑊 . Because
the path on the position map. Therefore, the user gener-
ates the random path 𝑝∗ by PosRefresh. After re-encrypting
the data and generating the random path, the user uploads
(cid:8)𝐵∗
(cid:9) and 𝑝∗ by 𝑇𝑤𝑟𝑖𝑡𝑒, and ODB becomes ODB∗. Next, it
(cid:101)𝐶𝑒𝑣𝑎𝑙 and(cid:101)𝐶𝑟𝑒𝑝𝑙𝑎𝑐𝑒 which on SChave been used by the user,
invokes CreateGC to generate(cid:101)𝐶∗
uploads(cid:101)𝐶∗
the user has to re-generate them for the next round and
𝑟𝑒𝑝𝑙𝑎𝑐𝑒. After re-
generating the garbled circuits for the next round, the user
𝑟𝑒𝑝𝑙𝑎𝑐𝑒 by 𝑇𝑢𝑝𝑑𝑎𝑡𝑒. Next, it will generate the
𝑒𝑣𝑎𝑙 and(cid:101)𝐶∗
,(cid:101)𝐶∗
𝑒𝑣𝑎𝑙
corresponding transaction 𝑇𝑈 .
4 IMPLEMENTATIONS
We implement our system on Ethereum Blockchain through Ganache
and the costs of transactions in this system are show in Table 1. As
can be seen from the table, 𝑇𝑖𝑛𝑖𝑡𝑖𝑎𝑙𝑖𝑧𝑒 which is the deployment of
the smart contract is the most expensive, but it is one-off which
differs from other transactions.
Table 1: Costs of transactions in this system
𝑇𝑒𝑣𝑎𝑙
Transaction Gas Used
4607129
𝑇𝑖𝑛𝑖𝑡𝑖𝑎𝑙𝑖𝑧𝑒
483250
483250
295445
295445
2877953
𝑇𝑟𝑒𝑝𝑙𝑎𝑐𝑒
𝑇𝑟𝑒𝑎𝑑
𝑇𝑤𝑟𝑖𝑡𝑒
𝑇𝑢𝑝𝑑𝑎𝑡𝑒
Fee(ETH)
0.0741
0.0077
0.0077
0.0047
0.0047
0.0463
Time(ms)
125
329
79
69
70
518
ACKNOWLEDGEMENTS
This work was supported in part by Ministry of Science and Tech-
nology of Taiwan, under grants 106-2218-E-115-008-MY3 and 109-
2628-E-155-001-MY3.
REFERENCES
[1] Nimar S Arora, Robert D Blumofe, and C Greg Plaxton. 2001. Thread scheduling
for multiprogrammed multiprocessors. Theory of computing systems 34, 2 (2001),
115–144.
[2] Oded Goldreich and Rafail Ostrovsky. 1996. Software protection and simulation
on oblivious RAMs. Journal of the ACM (JACM) 43, 3 (1996), 431–473.
[3] Eyal Kushilevitz, Steve Lu, and Rafail Ostrovsky. 2012. On the (in) security
of hash-based oblivious RAM and a new balancing scheme. In Proceedings of
the twenty-third annual ACM-SIAM symposium on Discrete Algorithms. SIAM,
143–156.
[4] Steve Lu and Rafail Ostrovsky. 2013. Distributed oblivious RAM for secure two-
party computation. In Theory of Cryptography Conference. Springer, 377–396.
[5] Satoshi Nakamoto and A Bitcoin. 2008. A peer-to-peer electronic cash system.
Bitcoin.–URL: https://bitcoin. org/bitcoin. pdf (2008).
[6] Emil Stefanov, Marten Van Dijk, Elaine Shi, Christopher Fletcher, Ling Ren,
Xiangyao Yu, and Srinivas Devadas. 2013. Path ORAM: an extremely simple
oblivious RAM protocol. In Proceedings of the 2013 ACM SIGSAC conference on
Computer & communications security. ACM, 299–310.
[7] Nick Szabo. 1997. Formalizing and securing relationships on public networks.
First Monday 2, 9 (1997).
[8] Xiao Wang, Hubert Chan, and Elaine Shi. 2015. Circuit oram: On tightness of
the goldreich-ostrovsky lower bound. In Proceedings of the 22nd ACM SIGSAC
Conference on Computer and Communications Security. ACM, 850–861.
[9] Andrew C Yao. 1982. Protocols for secure computations. In 23rd annual sympo-
sium on foundations of computer science (sfcs 1982). IEEE, 160–164.
[10] Wei Yu, Kan Luo, Yi Ding, Guang You, and Kai Hu. 2018. A Parallel Smart Contract
Model. In Proceedings of the 2018 International Conference on Machine Learning
and Machine Intelligence. ACM, 72–77.
Poster Session ASIA CCS '20, October 5–9, 2020, Taipei, Taiwan897