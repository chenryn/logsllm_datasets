**出处：2017 IEEE Symposium on Security and Privacy (SP)  
作者：Najmeh Miramirkhani, Mahathi Priya Appini, Nick Nikiforakis, Michalis
Polychronakis  
单位：Stony Brook University  
资料：[Paper](https://ieeexplore.ieee.org/abstract/document/7958622)  
译者：Z3R0YU  
译者博客：http://zeroyu.xyz/**
## 1.Abstract & INTRODUCTION
动态恶意代码分析系统通过将每个样本加载到称为沙箱的大量仪器环境中来操作，并以不同的粒度级别（例如，I/O活动，系统调用，机器指令）监视其操作。
恶意软件沙箱通常使用API hooking机制、CPU仿真器、虚拟机、甚至是专用的裸机主机来构建。
攻击者角度:
  1. 使用打包、多态以及其他代码混淆技术规避基于静态代码分析的恶意软件扫描技术；
  2. 在恶意软件中加入一定的“环境感知能力”来规避恶意软件沙箱环境的分析(在发现身处沙箱环境后采用直接崩溃或者展示“良性”行为)。
防御者角度:
  1. 一般而言用实际值替换分析环境的特有属性并隐藏检测工具，来尝试避免被恶意软件感知；
  2. 针对使用仿真或者虚拟技术的产品而言，使用清除特定的驱动程序、进程以及其它虚拟技术指示器来实现防规避；
  3. 使用裸机(在进行一定的隔离后，直接使用物理计算机)。
防御者角度的问题缺陷:
  1. 用于分析的操作系统几乎是原始状态的；
  2. 每次进行过二进制分析之后就会将系统回滚至最初状态(浏览器记录、系统日志等信息均被回滚)。
PS:以上内容之所以说是缺陷，是因为真实环境中用户不可能主动去将”缓存”(广义缓存，泛指日志、注册表等)的记录进行回滚或者初始化。
因此在本文中作者提出了一种利用操作系统“wear and
tear”(使用痕迹的含义，后文简称为磨损)和“aging”(使用年份的含义，后文简称为老化)的特征来规避sandbox(恶意软件沙箱环境)的方法。
本文的两项研究成果:
  1. 构建决策树模型，使恶意软件稳定地避免所有经过测试的沙箱的准确率提升至92.86％；
  2. 构建的统计模型可以根据系统使用指标预测系统的年龄，并可用于将现有的人造沙箱“老化”到所需的年限范围。
## BACKGROUND AND RELATED WORK
### A. Virtualization and Instrumentation Artifacts
  1. 防御者D: 使用系统仿真器和虚拟机构建恶意软件沙箱十分方便
  2. 攻击者A: 使用静态启发式检查某些系统属性，例如特定于VM的设备驱动程序和硬件配置，固定标识符（包括MAC地址），IMEI（用于移动恶意软件分析系统），用户/主机名，VM特定加载的模块和流程（例如VMware的VMware Tools）和注册表项等
  3. 防御者D: 配置动态分析系统时以避免出现期望值和配置
  4. 攻击者A: 这对虚拟化指令的时序属性、运行时使用小代码片段等底层属性作用不大
### B. Environmental and User Interaction Artifacts
防御者D: 我的两种方案:
  1. 在多个不同的分析系统上运行每个样本来检测恶意软件的“分裂个性”；
  2. 避免完全使用仿真或虚拟化，并选择“裸机”系统来保持分析环境的真实性。
攻击者A: 目前虚拟化技术的广泛使用，应当认为VM和非VM是具有同样的感染价值的，从而减少对VM检测技巧的使用，转而采取如下几种启发式方法:
  1. 检查鼠标光标是否在屏幕中央保持静止；
  2. 是否存在“最近打开文件”；
  3. 异常低数量的进程；
  4. 不受限制的互联网连接，并尝试解析已知的不存在的域名(比如WannaCry)。
防御者D: 我的两种对策:
  1. 模拟用户行为；
  2. 暴露更真实的网络环境
防御者D对策的缺陷: 系统正常使用而预计会发生磨损和老化特征未被考虑。
### C. Sandbox Fingerprinting
SandFinger: 使用移动设备属性来作为沙箱指纹来规避Google的Bouncer沙箱。
AVLeak: 使用侧信道的方式捕获AV引擎中的指纹。
SandPrint: 提取Windows沙箱中的硬件配置参数，恶意软件样本调用机制的特征，可执行文件的文件名等特征进行聚类分析，进而识别沙箱。
如果沙箱操作员将沙箱的特征值进行多样化处理，致使是指纹失效。那么攻击者下一步会考虑怎么方法进行规避?
这种方式就是本文中所提到的真实系统才具有的“磨损”和“老化”特征。
## III. WEAR AND TEAR ARTIFACTS
文中选用的artifact的特点: 恶意软件可以轻松探测
artifact的选择策略: 哪些在系统的正常使用中会被影响
### A. Probing for Artifacts while Preserving User Privacy
从artifact地选择上来看可以分为两种:一种是直接源于用户活动；另一种是来自系统活动(用户活动的间接表现)。
直接来源是针对用户行为的定性指标：
  1. 文档文件夹是否包含具有预期文件扩展名的合理数量的文件；
  2. 检查流行文档查看应用程序中最近打开的文档；
  3. 最近键入的在线搜索引擎查询；
  4. 系统范围的搜索查询
  5. 即时消息；
  6. 电子邮件消息内容 但是这些将会对用户的隐私造成侵犯，所以本文的方案将使用间接来源(比如:统计cookie、访问的URL数量等方式)
### B. Artifact Categories
本文主要针对Windows操作系统进行研究，所以采用的artifact类别集合如下表所示:
## IV. DATA COLLECTION
### A. Probe Tool Implementation
为了从真实用户系统和恶意软件沙箱中收集以上类别的artifact数据集，作者实现了一个只使用系统API、不需要安装并且兼容Windows
XP到Windows 10的探针程序。这个程序主要有以下几个特点:
  1. 使用HTTPS信道传输收集到的artifact数据防止沙箱拦截请求；
  2. 收集一些BIOS供应商等其他信息用于VM启发式检测，来去除用户集中可能存在的VM结果集；
  3. 唯一的嵌入式ID来识别同一供应商的多次提交(一些砂箱会将程序放在多个不同的环境中进行动态分析，进而检测其行为)；
  4. 基于操作系统安装日期，Windows版本，BIOS供应商等信息的组合来区分不同的操作系统。
### B. IRB Approval and User Involvement
这部分主要讲述作者在申请IRB批准，从而让真实用户参与进这个项目中。
### C. Data Collection
**第一个数据集（Dreal）- >** 270个真实用户机器，其中有89.4％是Amazon Mechanical Turk
workers。国家分布为美国（44％），印度（18％），GB（10％），CA（8％），NL（1％），PK
（1％），RU（1％）和其他28个频率低于1％的国家/地区(这种国家分析代表了从发达国家到发展中国家的计算机使用磨损特性)。表II中显示了用户系统的BIOS供应商分布。
PS:后面作者发现Amazon Mechanical Turk
workers是一种跟搜索引擎相结合的沙箱，因此将这一部分的数据标记为“crawlers”并合并到后面的沙箱数据集中。
**第二个数据集（Dsand）- >** 来自15个可以收集到信息的恶意软件沙箱，表III是沙箱与对应探针回收的信息。
PS:有的沙箱环境会在底层使用不同版本的操作系统来分别进行分析。
**第三个数据集（Dbase）- >** 基准数据集，数据来自多个全新安装的Microsoft
Windows版本(包括Azure和AWS提供的云Windows服务器)。
### D. Dataset Statistics