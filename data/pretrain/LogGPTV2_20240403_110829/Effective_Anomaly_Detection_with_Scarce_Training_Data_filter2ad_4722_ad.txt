With this metric, an appropriate value for κ can now
be chosen as
samples values observed during training are included to
give an idea of the parameter’s “type.” As κ increases,
proﬁles are clustered more accurately.
As the ﬁgure indicates, the resulting clusters in C
are accurately grouped by parameter type. For instance,
date parameters from different web applications belong
a single hierarchy, while unstructured text strings are
grouped into a separate hierarchy.
(3.8)
4.2 Proﬁle mapping robustness
κmin = min
κ +ρ+CI
κ, ≥ ρmin, ,
where ρmin is a minimum robustness threshold.
4 Evaluation
The goal of this evaluation is three-fold. First, we in-
vestigate the effects of proﬁle clustering, and support the
notion of parameter types by examining global knowl-
edge base clusters. Then, we study how the quality
of the mapping between undertrained proﬁles and well-
trained proﬁles improves as the training slice length κ
is increased. Finally, we present results regarding the
accuracy of a web application anomaly detection system
incorporating the application of a global knowledge base
to address training data scarcity.
The experiments that follow were conducted using
a data set drawn from real-world web applications de-
ployed on both academic and industry web servers. Ex-
amples of representative applications include payroll
processors, client management, and online commerce
sites. For each application, the full content of each
HTTP connection observed over a period of approxi-
mately three months was recorded. A portion of the
resulting ﬂows were then ﬁltered using Snort to remove
known attacks. In total, the data set contains 823 distinct
web applications, 36,392 unique components, 16,671
unique parameters, and 58,734,624 HTTP requests.4
4.1 Proﬁle clustering quality
To evaluate the accuracy of the clustering phase, we
ﬁrst built a global knowledge base C from a collection
of well-trained proﬁles. The proﬁles were trained on a
subset of the aforementioned data, containing trafﬁc in-
volving a wide variety of web applications. This subset
was composed of 603 web applications, 27,990 unique
resource paths, 9,023 unique parameters, and 3,444,092
HTTP requests. The clustering algorithm described in
Section 3.2.2 was then applied to group proﬁles. Sample
results from this clustering are shown in Figure 7b. Each
leaf represents a proﬁle. The name of the parameter and
4Unfortunately, due to contractual agreements, we are unable to
disclose speciﬁc information identifying the web applications them-
selves.
Recall that in order to balance the robustness of the
mapping f between undertrained proﬁles and global
proﬁles against the speed with which undertraining can
be addressed,
it is necessary to select an appropri-
ate value for κ. To this end, we generated under-
trained knowledge bases for increasing values of κ =
1, 2, 4, 8, 16, 32, 64 from the same data set used to gener-
ate C, following the procedure outlined in Section 3.2.1.
The resulting hierarchical clusters for various κ are pre-
sented in Figure 7c, 7d, 7a.
At low values of κ (e.g., Figure 7c), the clustering
process exhibits non-negligible systemic errors. For in-
stance, the parameter stat should be clustered as a to-
ken set of states, but instead is grouped with unstruc-
tured strings such as cities and addresses. A more ac-
curate clustering would have dissociated the token and
string proﬁles into well-separated sub-hierarchies.
As shown in Figure 7d, larger values of κ lead to
more semantically meaningful groupings. Some inac-
curacies are still noticeable, but the clustering is signif-
icantly better that the one obtained at κ = 8. A further
improvement in the clusters is shown in Figure 7a. At
κ = 64, the separation between dates and unstructured
strings is sharper; except for one outlier, the two types
are recognized as similar and grouped together in the
early stages of the clustering process.
Figure 8 plots the proﬁle mapping robustness ρ
against κ for different cuts of the clustering hierarchy,
indicated by Dmax. Dmax is a threshold representing the
maximum distance between two clusters. For low Dmax,
the “cut” will generate many clusters with a few ele-
ments. On the other hand, for high values of Dmax, the
algorithm will tend to form less clusters, each having a
larger number of elements.
In general, Dmax can in-
ﬂuence the result of a clustering algorithm signiﬁcantly.
Figure 8, however, shows two important properties of
our technique. First, it demonstrates that the robust-
ness is fairly insensitive to Dmax. Second, the robust-
ness of the mapping increases with κ until saturation at
32 ≤ κ ≤ 64. This not only conﬁrms the soundness
of the mapping function, but it also provides insights on
the appropriate choice of κmin to minimize the delay to
global proﬁle lookup while maximizing the robustness
notes: {1/29/07 - email, 10/26/06 thru, spoke}
notes: {1/29/07 - email, 10/26/06 thru, spoke} 
notes: {1/29/07 - email, 10/26/06 thru, spoke} 
notes: {1/29/07 - email, 10/26/06 thru, spoke}
type: {health care, wholesale}
notes: {1/29/07 - email, 10/26/06 thru, spoke}
name: {Foo LLC, Bar Inc.}
type: {General Auto, Painters, unknown}
(a) κ = 64
city: {OUR CITY, OTHER CITY, San Diego}
stat: {GA}
code: {OD}
w: {Ineligible, Old}
cd: {XX}
type: {Payment, Sales}
code: {OD}
w: {Eligible, New}
w: {Ineligible, New}
stat: {CA, TX}
stat: {CA, TX}
addr: {15 ROOF AVE, 373 W SMITH, 49 N Ave}
(c) κ = 8
stdate: {01/01/1900, 04/01/2007, 05/01/2007}
stdate: {01/01/1900, 04/01/2007, 05/01/2007}
ref: {01/29/2007, 01/30/2007, 01/31/2007}
stdate: {02/19/2004, 09/15/2005, 12/07/2005}
stdate: {01/01/1900, 05/08/2006}
stdate: {01/31/2006, 11/01/2006}
stdate: {01/30/2007, 02/10/2007}
indate: {01/29/2007, 12/29/2006}
exp: {01/01/2008, 05/22/2007}
exp: {02/09/2007, 09/30/2006}
exp: {02/01/2007, 08/01/2006, 09/01/2006}
date: {1/29/07, 12/31/2006}
date: {1/29/07, 12/31/2006}
note: {10-5, no ans, called and emailed, no client resp}
note: {10-5, no ans, called and emailed, no client resp}
(b) κstable " 103
thepage: {TKGGeneral, TKGGeneral, KZDA.pdf} 
updateTask: {TKGGeneral, KZDA.pdf, Chan.cfm?taskna} 
code: {CK-1006, NES}
thepage: {TKGGeneral, TKGGeneral, KZDA.pdf}
code: {CK-1006, NES} 
thepage: {TKGGeneral, TKGGeneral, KZDA.pdf}
accode: {r94, xzy}
code: {CK-1006, NZS}
code: {CK-1006, NZS}
code: {02-286, BE2}
thepage: {TKGGeneral, TKGGeneral, KZDA.pdf}
(d) κ = 32
Figure 7: Graphical representation of the various steps of the hierarchical clustering of C, (a-b), and CI, (c-d), at various κ. Each
leaf represents a proﬁle. The name of the parameter and samples values observed during training are included to give an
idea of the parameter’s “type.” We note that these sample values are shown for visualization purposes only, and are never
taken into account by the clustering algorithm. As κ increases, proﬁles are clustered more accurately.
of the mapping.
4.3 Detection accuracy
Having studied the effects of proﬁle clustering and
varying κ upon the robustness of the proﬁle mapping
f, a separate experiment was conducted to evaluate the
detection accuracy of an anomaly detector incorporat-
ing the knowledge bases C and CI constructed in the
previous experiments.
In particular, the goal of this
experiment is to demonstrate that an anomaly detector
equipped with a global knowledge base exhibits an im-
proved detection accuracy in the presence of training
data scarcity. As detailed in the following, we measured
the baseline accuracy, on the same system and under the
same conditions, with all the models undertrained.
The data used in this experiment was a subset of the
full data set described above, containing trafﬁc from
one related set of web applications implementing on-
line commerce sites. This data set was completely dis-
joint from the one used to construct the global knowl-
edge base and its indices, to prevent any potential for the
substitution of proﬁles from the same application. Ad-
ditionally, the use of a global knowledge base generated
from many types of web applications to address a lack
of training data for a speciﬁc web application mirrors
the intended usage of the technique. In total, this data
set consisted of 220 unique real-world web applications,
8,402 unique resource paths, 7,648 distinct parameters,
and 55,290,532 HTTP requests.
The threat model we assume is that of an attacker at-
tempting to compromise the conﬁdentiality or integrity
of data exposed by a web application by tampering with
request parameters.5 Therefore, a set of 100,000 at-
tacks was introduced into the data set. These attacks
were real-world examples and variations upon cross-site
scripting (XSS), SQL injection, command execution ex-
ploits, and other attacks that manifest themselves in re-
quest parameter values.6 Examples of these attacks in-
clude:
code
inclusion:
;
• malicious
• bypassing login authentication: ’ OR ’x’=’x’--;
5Although the anomaly detector used in this study is capable of
detecting more complex session-level anomalies, we restrict the threat
model to request parameter manipulation because we do not address
session proﬁle clustering in this work.
6These attacks remain the most common attacks against web ap-
plications. However, both the anomaly detector and the improvement
we designed apply to any malicious activity caused by modiﬁcations
to HTTP requests, and therefore we by no means limit our scope to
these classes of attacks.
s
s
e
n
t
s
u
b
o
r
i
g
n
p
p
a
M
 0.5
 0.45
 0.4
 0.35
 0.3
 0.25
 0.2
 0
Dmax = 0.10
Dmax = 0.125
Dmax = 0.15
Dmax = 0.175
Dmax = 0.20
Dmax = 0.225
Dmax = 0.25
Dmax = 0.30
Dmax = 0.35
Dmax = 0.375
Dmax = 0.40
Dmax = 0.425
Dmax = 0.45
Dmax = 0.475
Dmax = 0.50
 10
 20
 30
 40
 50
 60
 70
Figure 8: Plot of proﬁle mapping robustness for varying κ.
κ
• command injection: ; cat /etc/passwd | mail
PI:EMAIL #.
To establish a worst-case bound on the detection ac-
curacy of the system, proﬁles for each observed request
parameter were deliberately undertrained to artiﬁcially
induce a scarcity of training data for all parameters.
That is, for each value of κ = 1, 2, 4, 8, 16, 32, 64, the
anomaly detector prematurely terminated proﬁle train-
ing after κ samples, and then used the undertrained pro-
ﬁles to query C. The resulting global proﬁles were then
substituted for the undertrained proﬁles and evaluated
against the rest of the data set. The sensitivity of the
system was varied over the interval [0, 1], and the result-
ing ROC curves for each κ are plotted in Figure 9.
It must be noted that, as shown in Section 4.2, with
κ = 1 our system cannot reliably ﬁnd semantically sim-
ilar well-trained models. As κ increases, so does the
quality of the global proﬁles returned by the querying
process.
In particular, this increase in quality closely
follows the mapping robustness plot presented in Fig-
ure 8. As predicted, setting κ = 32, 64 leads to fairly
accurate global proﬁle selection, with the resulting ROC
curves approaching that of fully-trained proﬁles. This
means that even if the component or, in general, a pa-
rameter of a web application has received only a few re-
quests (i.e., 64), by leveraging a global knowledge base,
it is possible to achieve effective attack detection. As a
consequence, our approach can improve the effective-
ness of real-world web application anomaly detection
systems. Clearly, the detection accuracy will improve
as more training samples (e.g., 128, 256) become avail-
able. However, the goal of this experiment was to eval-
uate such an improvement with a very limited training
set, rather than showing the detection maximum accu-
racy achievable.
One concern regarding the substitution of global pro-
ﬁles for local request parameters is that a global proﬁle
that was trained on another web application might not
detect valid attacks against the undertrained parameter.
Without this technique, however, recall that a learning-
based web application anomaly detector would other-
wise have no effective model whatsoever, and, there-
fore, the undertrained parameter would be unprotected
by the detection system. Furthermore, the ROC curves
demonstrate that while global proﬁles are in general not
as precise as locally-trained models, they do provide a
signiﬁcant level of detection accuracy.7 More precisely,
with κ = 1, undertraining condition and system off, only
67.5% of the attacks are detected, overall, with around
5% of false positives. On the other hand, with κ = 64
(undertraining and system on), more than 91% of the at-
tacks are detected with less than 0.2% of false positives
(vs., 0.1% of false positives in the case of no under-
training and system off). Therefore, we conclude that,
assuming no mistrust among the parties that share the
7Note that if global proﬁles were found to be as accurate as local
proﬁles, this would constitute an argument against site-speciﬁc learn-
ing of models, since in that case, models could be trained for one web
application and applied directly to other web applications.
e
t
a
r
e
v
i
t
i
s
o
p
e
u
r
T
 1
 0.9
 0.8
 0.7
 0.6
 0.5
 0
k=1
k=2
k=4
k=8
k=16
k=32
k=64
k-stable
 0.01
 0.02
 0.03
 0.04
 0.05
False positive rate
Figure 9: Global proﬁle ROC curves for varying κ. In the presence of severe undertraining (κ ! κstable), the system is not able