需要通过html 模板函数，那么 Go 语言方法 Escape(t *template.Template)就能获取模板而后将
html 函数添加到模板中不存在该函数的每个节点中。用于HTML 文档的模板是非常有用的，并能在
其他使用场合生成相似的方法模式。
9.5 Defining functions 定义方法
The templates use the string representation of an object to insert values, using
the fmt package to convert the object to a string. Sometimes this isn't what is needed.
For example, to avoid spammers getting hold of email addresses it is quite common
to see the symbol '@' replaced by the word " at ", as in "jan at newmarch.name".
If we want to use a template to display email addresses in that form, then we have
to build a custom function to do this transformation.
模板使用对象化的字符串表示形式插入值，使用fmt包将对象转换为字符串。有时候，这并不是必需。
例如，为了避免被垃圾邮件发送者掌握电子邮件地址，常见的方式是把字符号“@”替换为“at”，如“jan
at newmarch.name”。如果我们要使用一个模板，显示在该表单中的电子邮件地址，那么我们就必
须建立一个自定义的功能做这种转变。
Each template function has a name that is used in the templates themselves, and an
associated Go function. These are linked by the type
每个模板函数中使用的模板本身有的一个名称，以及相关联的函数。他们用下面方式进行关联如下
type FuncMap map[string]interface{}
For example, if we want our template function to be "emailExpand" which is linked
to the Go function EmailExpander then we add this to the functions in a template by
例如，如果我们希望我们的模板函数是“emailExpand”，用来关联到Go 函数EmailExpander，然后，
我们像这样添加函数到到模板中
t = t.Funcs(template.FuncMap{"emailExpand": EmailExpander})
The signature for EmailExpander is typically
EmailExpander通常像这样标记：
func EmailExpander(args ...interface{}) string
In the use we are interested in, there should only be one argument to the function
which will be a string. Existing functions in the Go template library have some
initial code to handle non-conforming cases, so we just copy that. Then it is just
simple string manipulation to change the format of the email address. A program is
我们感兴趣的是在使用过程中，那是一个只有一个参数的函数，并且是个字符串。在Go 模板库的现
有功能有初步的代码来处理不符合要求的情况，所以我们只需要复制。然后，它就能通过简单的字符
串操作来改变格式的电子邮件地址。程序如
/**
* PrintEmails
*/
package main
import (
"fmt"
"os"
"strings"
"text/template"
)
type Person struct {
Name string
Emails []string
}
const templ = `The name is {{.Name}}.
{{range .Emails}}
An email is "{{. | emailExpand}}"
{{end}}
`
func EmailExpander(args ...interface{}) string {
ok := false
var s string
if len(args) == 1 {
s, ok = args[0].(string)
}
if !ok {
s = fmt.Sprint(args...)
}
// find the @ symbol
substrs := strings.Split(s, "@")
if len(substrs) != 2 {
return s
}
// replace the @ by " at "
return (substrs[0] + " at " + substrs[1])
}
func main() {
person := Person{
Name: "jan",
Emails: []string{"PI:EMAIL", "PI:EMAIL"},
}
t := template.New("Person template")
// add our function
t = t.Funcs(template.FuncMap{"emailExpand": EmailExpander})
t, err := t.Parse(templ)
checkError(err)
err = t.Execute(os.Stdout, person)
checkError(err)
}
func checkError(err error) {
if err != nil {
fmt.Println("Fatal error ", err.Error())
os.Exit(1)
}
}
The output is
输出为：
The name is jan.
An email is "jan at newmarch.name"
An email is "jan.newmarch at gmail.com"
9.6 Variables 变量
The template package allows you to define and use variables. As motivation for this,
consider how we might print each person's email address prefixed by their name. The
type we use is again
template 包，允许您定义和使用变量。这样做的动机，可能我们会考虑通过把他们的名字当做电子
邮件地址前缀打印出来。我们又使用这个类型
type Person struct {
Name string
Emails []string
}
To access the email strings, we use a range statement such as
为了访问email 的所有字符串, 可以用 range，如下
{{range .Emails}}
{{.}}
{{end}}
But at that point we cannot access the Name field as '.' is now traversing the array
elements and the Name is outside of this scope. The solution is to save the value
of the Name field in a variable that can be accessed anywhere in its scope. Variables
in templates are prefixed by '$'. So we write
但是需要指出的是，我们无法用'.' 的形式来访问字段 Name，因为当他被转化成数组元素时，字段
Name并不包括其中。解决方法是，将字段Name 存储为一个变量，那么它就能在任意范围内被访问。
变量在模板中用法是加前缀'$'。所以可以这样
{{$name := .Name}}
{{range .Emails}}
Name is {{$name}}, email is {{.}}
{{end}}
The program is
程序如下：
/**
* PrintNameEmails
*/
package main
import (
"html/template"
"os"
"fmt"
)
type Person struct {
Name string
Emails []string
}
const templ = `{{$name := .Name}}
{{range .Emails}}
Name is {{$name}}, email is {{.}}
{{end}}
`
func main() {
person := Person{
Name: "jan",
Emails: []string{"PI:EMAIL", "PI:EMAIL"},
}
t := template.New("Person template")
t, err := t.Parse(templ)
checkError(err)
err = t.Execute(os.Stdout, person)
checkError(err)
}
func checkError(err error) {
if err != nil {
fmt.Println("Fatal error ", err.Error())
os.Exit(1)
}
}
with output
输出为
Name is jan, email is PI:EMAIL
Name is jan, email is PI:EMAIL
9.7 Conditional statements 条件语句
Continuing with our Person example, supposing we just want to print out the list
of emails, without digging into it. We can do that with a template
继续我们那个Person的例子，假设我们只是想打印出来的邮件列表，而不关心其中的字段。我们可
以用模板这么干
Name is {{.Name}}
Emails are {{.Emails}}
This will print
Name is jan
Emails are [PI:EMAIL PI:EMAIL]
because that is how the fmt package will display a list.
因为这个fmt包会显示一个列表。
In many circumstances that may be fine, if that is what you want. Let's consider
a case where it is almost right but not quite. There is a JSON package to serialise
objects, which we looked at in Chapter 4. This would produce
在许多情况下，这样做也没有问题，如果那是你想要的。让我们考虑下一种情况，它 几乎是对的但
不是必须的。有一个JSON 序列化对象的包，让我们看看第4 章。它是这样的
{"Name": "jan",
"Emails": ["PI:EMAIL", "PI:EMAIL"]
}
The JSON package is the one you would use in practice, but let's see if we can produce
JSON output using templates. We can do something similar just by the templates we
have. This is almost right as a JSON serialiser:
JSON 包是一个你会在实践中使用，但是让我们看看我们是否能够使用 JSON 输出模板。我们可以做
一些我们有的类似的模板。这几乎就是一个JSON 串行器：
{"Name": "{{.Name}}",
"Emails": {{.Emails}}
}
It will produce
像这样组装
{"Name": "jan",
"Emails": [PI:EMAIL PI:EMAIL]
}
which has two problems: the addresses aren't in quotes, and the list elements should
be ',' separated.
其中有两个问题：地址没有在引号中，列表中的元素应该是'，'分隔。
How about this: looking at the array elements, putting them in quotes and adding
commas?
这样如何：在数组中的元素，把它们放在引号中并用逗号分隔？
{"Name": {{.Name}},
"Emails": [
{{range .Emails}}
"{{.}}",
{{end}}
]
}
It will produce
像这样组装
{"Name": "jan",
"Emails": ["PI:EMAIL", "PI:EMAIL",]
}
(plus some white space.).
(再加上一些空白)。
Again, almost correct, but if you look carefully, you will see a trailing ',' after
the last list element. According to the JSON syntax (see http://www.json.org/, this
trailing ',' is not allowed. Implementations may vary in how they deal with this.
同样，这样貌似几乎是正确的，但如果你仔细看，你会看到尾有“，”在最后的列表元素。根据JSON
的语法（请参阅 http://www.json.org/，这个结尾的'，'是不允许的。这样实现结果可能会有所
不同。
What we want is "print every element followed by a ',' except for the last one."
This is actually a bit hard to do, so a better way is "print every element preceded by
a ',' except for the first one." (I got this tip from "brianb" at Stack Overflow.).
This is easier, because the first element has index zero and many programming
languages, including the Go template language, treat zero as Boolean false.
我们想要打印所有在后面带','的元素除了最后一个。"这个确实有点难搞, 一个好方法"在',' 之前
打印所有元素除了第一个。" (我在 "brianb"的 Stack Overflow 上提了建议)。这样更易于实现，
因为第一个元素索引为0，很多编程语言包括GO 模板都将0 当做布尔型的false。
One form of the conditional statement is {{if pipeline}} T1 {{else}} T0 {{end}}. We
need the pipeline to be the index into the array of emails. Fortunately, a variation
on the range statement gives us this. There are two forms which introduce variables
条件语句的一种形式是{{if pipeline}} T1 {{else}} T0 {{end}}。我们需要通过pipeline来获取
电子邮件到数组的索引。幸运的是， range的变化语句为我们提供了这一点。有两种形式，引进变
量
{{range $elmt := array}}
{{range $index, $elmt := array}}
So we set up a loop through the array, and if the index is false (0) we just print
the element, otherwise print it preceded by a ','. The template is
所以我们遍历数组，如果该索引是false（0），我们只是打印的这个索引的元素，否则打印它前面
是','的元素。模板是这样的
{"Name": "{{.Name}}",
"Emails": [
{{range $index, $elmt := .Emails}}
{{if $index}}
, "{{$elmt}}"
{{else}}
"{{$elmt}}"
{{end}}
{{end}}
]
}
and the full program is
完整的程序如下
/**
* PrintJSONEmails
*/
package main
import (
"html/template"
"os"
"fmt"
)
type Person struct {
Name string
Emails []string
}
const templ = `{"Name": "{{.Name}}",
"Emails": [
{{range $index, $elmt := .Emails}}
{{if $index}}
, "{{$elmt}}"
{{else}}
"{{$elmt}}"
{{end}}
{{end}}
]
}
`
func main() {
person := Person{
Name: "jan",
Emails: []string{"PI:EMAIL", "PI:EMAIL"},
}
t := template.New("Person template")
t, err := t.Parse(templ)
checkError(err)
err = t.Execute(os.Stdout, person)
checkError(err)
}
func checkError(err error) {
if err != nil {
fmt.Println("Fatal error ", err.Error())
os.Exit(1)
}
}
This gives the correct JSON output.
上面给出的是正确的JSON 输出
Before leaving this section, we note that the problem of formatting a list with comma
separators can be approached by defining suitable functions in Go that are made
available as template functions. To re-use a well known saying, "There's more than
one way to do it!". The following program was sent to me by Roger Peppe:
在结束本节之前，我们强调了用逗号分隔的列表格式的问题，解决方式是可以在模板函数中定义适当
的函数。正如俗话说的，“道路不止一条！”下面的程序是 Roger Peppe 给我的：
/**
* Sequence.go
* Copyright Roger Peppe
*/
package main
import (
"errors"
"fmt"
"os"
"text/template"
)
var tmpl = `{{$comma := sequence "" ", "}}
{{range $}}{{$comma.Next}}{{.}}{{end}}
{{$comma := sequence "" ", "}}
{{$colour := cycle "black" "white" "red"}}
{{range $}}{{$comma.Next}}{{.}} in {{$colour.Next}}{{end}}
`
var fmap = template.FuncMap{
"sequence": sequenceFunc,
"cycle": cycleFunc,
}
func main() {
t, err := template.New("").Funcs(fmap).Parse(tmpl)
if err != nil {
fmt.Printf("parse error: %v\n", err)