### Case Study 2: Real-World Application Using Wi-Fi Direct

In this second case study, we focus on a real-world application, Wi-Fi Direct +, which is available on the Google Play market. This file-sharing app has over 500,000 downloads, is regularly updated, and offers a paid version, Wi-Fi Direct + Pro. These factors indicate that the app is relevant for our analysis.

#### App Functionalities
Wi-Fi Direct + allows users to share files between two Android devices using the Wi-Fi Direct protocol. After establishing a Wi-Fi Direct connection, one device selects the option to receive files, entering a listening mode for incoming connections. The user on the other device then selects the option to send a file. Upon successful pairing, a confirmation dialog is displayed on the receiving device, and the file transfer begins.

#### Security Vulnerability: Data Injection Attack
Our analysis reveals that Wi-Fi Direct + does not implement app-to-app authentication, making it susceptible to data injection attacks. Specifically, after pairing, the receiving device opens a `ServerSocket` and accepts incoming connections. If a malicious app on the sending device attempts to connect to this socket, the receiving app cannot distinguish between legitimate and malicious data, leading to a CATCH (Connection Authentication Threat in Communication) scenario.

For a successful attack, the attacker must:
1. Study the Wi-Fi Direct + protocol to replicate it accurately.
2. Develop a malicious app to send files using this protocol.
3. Time the file transfer from the malicious app to coincide with the legitimate file transfer.

The window of opportunity for data injection is narrower compared to BluetoothChat, as Wi-Fi Direct + on the receiving device will only accept one file before closing the communication channel. This introduces a race condition: if the benign app sends its file first, the malicious file will be rejected, and vice versa. If the benign file is rejected, the sending user may receive an error message, potentially alerting them to the suspicious activity. However, if the receiving user confirms receipt of the file (which would be the malicious file), the sending user might attribute the error to a bug in the app.

In our experiments, we successfully performed the attack by running the malicious app and sending a malicious file without triggering any alarms on the target device.

### Discussion

#### 7.1 Impact of the Problem
Our research indicates that high-level, app-to-app authentication is almost non-existent in Android apps that use channels like Bluetooth. This lack of authentication can be attributed to developers relying on official Android documentation and resources like Stack Overflow, which often do not address the need for such security measures. Reusing code snippets from these sources without proper adaptation propagates the issue, making any app using these technologies potentially vulnerable.

The actual impact of these vulnerabilities varies depending on the specific app's functionalities and needs to be evaluated on a case-by-case basis. Generally, vulnerabilities based on accepting unauthenticated content could lead to medium-impact issues such as phishing or denial-of-service (DoS) attacks. However, more severe effects, such as arbitrary code execution, are possible in certain applications.

#### 7.2 Limitations of Our Analysis
While our system performs well in detecting CATCH vulnerabilities, it has limitations typical of static analysis. For instance, Argus-SAF, the tool we used, struggles with handling intra-component and inter-component transitions, especially those involving reflection and concurrency. Concurrency is common in peer-to-peer apps, where separate threads handle read/write operations to avoid blocking. In our model, we expect authentication controls to be applied immediately after a read operation. Our manual analysis of 20 Android apps from a dataset of 662 confirmed that none of the analyzed thread functions included any authentication scheme.

### Related Work

To our knowledge, we are the first to explore the potential dangers associated with the lack of app-to-app authentication in Android apps. Previous research has highlighted issues in Android device-to-device communications and proposed solutions for securing such channels. For example, SEACAT [11] enforces fine-grained protection on various communication resources, while Shen et al. [26] discuss best practices for secure Wi-Fi Direct protocols.

### Conclusion

This paper presents the extension and potential impact of CATCH vulnerabilities in Android apps, providing a threat model and both manual and automated analysis methods. Our main contribution is an automated system for APK analysis, which serves as a first line of defense against human error. However, the problem can only be effectively addressed by raising awareness among Android developers and providing them with appropriate documentation and tools for implementing high-level app-to-app authentication on peer-to-peer communication channels.

### Acknowledgments

This project was funded by the Italian Ministry of Foreign Affairs and International Cooperation (grant number: PGR00814) and the US Army Research Office (grant number: W911NF-17-1-0039).

### References
[References listed as in the original text]