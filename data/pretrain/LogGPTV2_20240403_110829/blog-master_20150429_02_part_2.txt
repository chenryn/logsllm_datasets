tuples: 0 removed, 490 remain, 15 are dead but not yet removable  
```  
索引和表也明显膨胀了：  
```  
postgres=# \dt+ tbl  
                    List of relations  
 Schema | Name | Type  |  Owner   |  Size  | Description   
--------+------+-------+----------+--------+-------------  
 public | tbl  | table | postgres | 781 MB |   
(1 row)  
postgres=# \di+ tbl_pkey   
                          List of relations  
 Schema |   Name   | Type  |  Owner   | Table |  Size  | Description   
--------+----------+-------+----------+-------+--------+-------------  
 public | tbl_pkey | index | postgres | tbl   | 308 MB |   
(1 row)  
```  
关闭这个事务后：这个事务期间没有被回收的垃圾可以正常回收  
停314030959这个事务之前，另外再开一个  
```  
postgres=# begin;  
BEGIN  
postgres=# select txid_current();  
 txid_current   
--------------  
    314031042  
(1 row)  
```  
然后停前面那个  
```  
postgres=# end;  
COMMIT  
```  
这里主要为了说明，这样的连续事务，不会影响上一个事务过程造成影响的未回收的垃圾。  
```  
tuples: 0 removed, 481 remain, 6 are dead but not yet removable  
tuples: 13629196 removed, 2515757 remain, 500001 are dead but not yet removable  
tuples: 0 removed, 4845701 remain, 1000002 are dead but not yet removable  
tuples: 0 removed, 7146782 remain, 1500003 are dead but not yet removable  
```  
后面启动的那个也停掉，垃圾完全回收了：  
```  
postgres=# end;  
COMMIT  
tuples: 7183691 removed, 11252550 remain, 0 are dead but not yet removable  
tuples: 500001 removed, 6234858 remain, 0 are dead but not yet removable  
```  
再来一个例子：  
打开一个游标，backend_xmin会持续到事务结束前，在backend_xmin未释放的过程中，产生的垃圾是无法被回收的。  
```  
postgres=# begin;  
BEGIN  
postgres=# declare c1 cursor for select 1 from pg_class;  
DECLARE CURSOR  
postgres=# select pg_backend_pid();  
 pg_backend_pid   
----------------  
           3823  
(1 row)  
```  
在另一个会话查询  
```  
postgres=# select backend_xid,backend_xmin from pg_stat_activity where pid=3823;  
 backend_xid | backend_xmin   
-------------+--------------  
             |      5517228  
(1 row)  
```  
从游标获取数据  
```  
postgres=# fetch all from c1;  
 ?column?   
----------  
......  
```  
关闭游标前，backend_xmin还有值。  
```  
postgres=# select backend_xid,backend_xmin from pg_stat_activity where pid=3823;  
 backend_xid | backend_xmin   
-------------+--------------  
             |      5517228  
(1 row)  
```  
所以在事务号大于backend_xmin的事务中产生的垃圾无法回收。  
```  
postgres=# insert into t values (1);  
INSERT 0 1  
postgres=# delete from t;  
DELETE 1  
postgres=# vacuum verbose t;  
INFO:  vacuuming "public.t"  
INFO:  index "t_pkey" now contains 1 row versions in 30 pages  
DETAIL:  0 index row versions were removed.  
27 index pages have been deleted, 27 are currently reusable.  
CPU 0.00s/0.00u sec elapsed 0.00 sec.  
INFO:  "t": found 0 removable, 1 nonremovable row versions in 1 out of 1 pages  
DETAIL:  1 dead row versions cannot be removed yet.  
There were 0 unused item pointers.  
0 pages are entirely empty.  
CPU 0.00s/0.00u sec elapsed 0.00 sec.  
VACUUM  
postgres=# delete from tt;  
DELETE 1  
postgres=# vacuum verbose t;  
INFO:  vacuuming "public.t"  
INFO:  index "t_pkey" now contains 1 row versions in 30 pages  
DETAIL:  0 index row versions were removed.  
27 index pages have been deleted, 27 are currently reusable.  
CPU 0.00s/0.00u sec elapsed 0.00 sec.  
INFO:  "t": found 0 removable, 1 nonremovable row versions in 1 out of 1 pages  
DETAIL:  1 dead row versions cannot be removed yet.  
There were 0 unused item pointers.  
0 pages are entirely empty.  
CPU 0.00s/0.00u sec elapsed 0.00 sec.  
VACUUM  
```  
关闭游标  
```  
postgres=# close c1;   
CLOSE CURSOR  
backend_xmin释放  
postgres=# select backend_xid,backend_xmin from pg_stat_activity where pid=3823;  
 backend_xid | backend_xmin   
-------------+--------------  
             |               
(1 row)  
```  
垃圾得以回收  
```  
postgres=# vacuum verbose t;  
INFO:  vacuuming "public.t"  
INFO:  scanned index "t_pkey" to remove 1 row versions  
DETAIL:  CPU 0.00s/0.00u sec elapsed 0.00 sec.  
INFO:  "t": removed 1 row versions in 1 pages  
DETAIL:  CPU 0.00s/0.00u sec elapsed 0.00 sec.  
INFO:  index "t_pkey" now contains 0 row versions in 30 pages  
DETAIL:  1 index row versions were removed.  
27 index pages have been deleted, 27 are currently reusable.  
CPU 0.00s/0.00u sec elapsed 0.00 sec.  
INFO:  "t": found 1 removable, 0 nonremovable row versions in 1 out of 1 pages  
DETAIL:  0 dead row versions cannot be removed yet.  
There were 0 unused item pointers.  
0 pages are entirely empty.  
CPU 0.00s/0.00u sec elapsed 0.00 sec.  
INFO:  "t": truncated 1 to 0 pages  
DETAIL:  CPU 0.00s/0.00u sec elapsed 0.00 sec.  
VACUUM  
postgres=# vacuum verbose tt;  
INFO:  vacuuming "public.tt"  
INFO:  "tt": removed 1 row versions in 1 pages  
INFO:  "tt": found 1 removable, 0 nonremovable row versions in 1 out of 1 pages  
DETAIL:  0 dead row versions cannot be removed yet.  
There were 0 unused item pointers.  
0 pages are entirely empty.  
CPU 0.00s/0.00u sec elapsed 0.01 sec.  
INFO:  "tt": truncated 1 to 0 pages  
DETAIL:  CPU 0.00s/0.00u sec elapsed 0.00 sec.  
VACUUM  
```  
再来一个例子：  
长查询，backend_xmin会持续到SQL结束时，在backend_xmin未释放的过程中，产生的垃圾是无法被回收的。  
```  
postgres=# begin;  
BEGIN  
postgres=# select pg_sleep(1000);  
postgres=# select backend_xid,backend_xmin from pg_stat_activity where pid=3823;  
 backend_xid | backend_xmin   
-------------+--------------  
             |      5517233  
(1 row)  
```  
持续到语句执行结束  
```  
^CCancel request sent  
ERROR:  canceling statement due to user request  
```  
语句结束后，backend_xmin释放  
```  
postgres=# select backend_xid,backend_xmin from pg_stat_activity where pid=3823;  
 backend_xid | backend_xmin   
-------------+--------------  
             |               
(1 row)  
```  
再来一个例子：  
```  
repeatable read或serializable隔离级别的事务，backend_xmin会持续到事务结束前，在backend_xmin未释放的过程中，产生的垃圾是无法被回收的。  
postgres=# begin work isolation level repeatable read;  
BEGIN  
postgres=# select 1;  
 ?column?   
----------  
        1  
(1 row)  
```  
持续到事务结束  
```  
postgres=# select backend_xid,backend_xmin from pg_stat_activity where pid=3823;  
 backend_xid | backend_xmin   
-------------+--------------  
             |      5517233  
(1 row)  
postgres=# end;  
COMMIT  
postgres=# select backend_xid,backend_xmin from pg_stat_activity where pid=3823;  
 backend_xid | backend_xmin   
-------------+--------------  
             |               
(1 row)  
```  
所以我们监控长事务应该包含backend_xmin和backend_xid。  
```  
select datname,usename,query,xact_start,now()-xact_start,state from pg_stat_activity where state<>'idle' and (backend_xid is not null or backend_xmin is not null) order by 4;  
```  
如果表和索引已经膨胀了，无法收缩，除非使用rewrite table（vacuum full, cluster）或者pg_reorg,pg_repack这样的工具。  
我再举一个实际可能存在的例子，例如持续的并发批量更新，也可能导致膨胀：  
例如我有一个表包含100万条记录，分成10个进程，每个进程批量更新其中的10万条，并且持续不断的更新。  
为什么说这样操作会引起膨胀呢，因为worker process 最小粒度是表级别的，同一张表同一时间只有一个进程在回收垃圾。这种场景会产生三个问题：  
1\. 瞬时产生垃圾的速度可能超过回收的速度，  
2\. 产生新TUPLE版本的需求超过FSM的剩余空间，  
3\. 回收过程中（其他进程可能会启动并发的更新，持有事务排他锁）会遇到不可回收的问题，就是前面这个例子提到的问题。  
这几种原因会导致扩展新的数据块可能性变大，即膨胀。  
测试例子：  
```  
postgres=# truncate tbl;  
TRUNCATE TABLE  
postgres=# insert into tbl select generate_series(1,1000000),md5(random()::text),clock_timestamp();  
INSERT 0 1000000  
postgres=# \dt+ tbl  
List of relations  
-[ RECORD 1 ]---------  
Schema      | public  
Name        | tbl  
Type        | table  
Owner       | postgres  
Size        | 73 MB  
Description |   
postgres=# \di+ tbl_pkey   
List of relations  
-[ RECORD 1 ]---------  
Schema      | public  
Name        | tbl_pkey  
Type        | index  
Owner       | postgres  
Table       | tbl  
Size        | 21 MB  
Description |   
$ vi t1.sql  
update tbl set info=info,crt_time=clock_timestamp() where id >=1 and id=100001 and id=200001 and id=300001 and id=400001 and id=500001 and id=600001 and id=700001 and id=800001 and id=900001 and id<=1000000;  
pgbench -M prepared -n -r -f ./t1.sql -c 1 -j 1 -T 500000 &  
pgbench -M prepared -n -r -f ./t2.sql -c 1 -j 1 -T 500000 &  
pgbench -M prepared -n -r -f ./t3.sql -c 1 -j 1 -T 500000 &  
pgbench -M prepared -n -r -f ./t4.sql -c 1 -j 1 -T 500000 &  
pgbench -M prepared -n -r -f ./t5.sql -c 1 -j 1 -T 500000 &  
pgbench -M prepared -n -r -f ./t6.sql -c 1 -j 1 -T 500000 &  
pgbench -M prepared -n -r -f ./t7.sql -c 1 -j 1 -T 500000 &  
pgbench -M prepared -n -r -f ./t8.sql -c 1 -j 1 -T 500000 &  
pgbench -M prepared -n -r -f ./t9.sql -c 1 -j 1 -T 500000 &  
pgbench -M prepared -n -r -f ./t10.sql -c 1 -j 1 -T 500000 &  
```  
观察到出现了不可回收的垃圾  
```  
tuples: 0 removed, 2049809 remain, 999991 are dead but not yet removable  
tuples: 501373 removed, 2176172 remain, 999991 are dead but not yet removable  
tuples: 1603158 removed, 2517367 remain, 899562 are dead but not yet removable  
tuples: 405093 removed, 2647780 remain, 899992 are dead but not yet removable  
tuples: 1100546 removed, 2724724 remain, 899562 are dead but not yet removable  
tuples: 528200 removed, 2864735 remain, 1141307 are dead but not yet removable  
tuples: 981628 removed, 2757909 remain, 933307 are dead but not yet removable  
```  
膨胀  
```  
postgres=# \dt+ tbl  
List of relations  
-[ RECORD 1 ]---------  
Schema      | public  
Name        | tbl  
Type        | table  
Owner       | postgres  
Size        | 554 MB  
Description |   
postgres=# \di+ tbl_pkey   
List of relations  
-[ RECORD 1 ]---------  
Schema      | public  
Name        | tbl_pkey  
Type        | index  