单，对吧！^_^！ 但是，上面那两种情况的模块编译行为是不太一样的，不过，都是需要 make, gcc 以及核心所提供的 include 头文件与函数库
等等。
硬硬件件开开发发商商提提供供的的额额外外模模块块
很多时候，可能由于核心默认的核心驱动模块所提供的功能你不满意，或者是硬件开发商所提供的核心模块具有更强大的功能， 又或者
该硬件是新的，所以默认的核心并没有该硬件的驱动模块时，那你只好自行由硬件开发商处取得驱动模块，然后自行编译啰！
如果你的硬件开发商有提供驱动程序的话，那么真的很好解决，直接下载该源代码，重新编译， 将他放置到核心模块该放置的地方后就
能够使用了！举个例子来说，鸟哥在 2014 年底帮厂商制作一个服务器的环境时， 发现对方喜欢使用的磁盘阵列卡 （RAID） 当时并没有被
Linux 核心所支持，所以就得要帮厂商针对该磁盘阵列卡来编译成为模块啰！ 处理的方式，当然就是使用磁盘阵列卡官网提供的驱动程序来编
译啰！
Highpoint 的 RocketRAID RR640L 驱动程序：
http://www.highpoint-tech.com/USA_new/series_rr600-download.htm
虽然你可以选择“RHEL/CentOS 7 x86_64”这个已编译的版本来处理，不过因为我们的核心已经做成自订的版本， 变成 3.10.89vbird 这
样，忘记加上 x86_64 的版本名，会导致该版本的自动安装脚本失败！所以，算了！我们自己来重新编译吧！ 因此，请下载“Open Source
Driver”的版本喔！同时，鸟哥假设你将下载的文件放置到 /root/raidcard 目录内喔！
# 1. 将文件解压缩并且开始编译：
[root@study ~]# cd /root/raidcard
[root@study raidcard]# ll
-rw-r--r--. 1 root root 501477 Apr 23 07:42 RR64xl_Linux_Src_v1.3.9_15_03_07.tar.gz
[root@study raidcard]# tar -zxvf RR64xl_Linux_Src_v1.3.9_15_03_07.tar.gz
[root@study raidcard]# cd rr64xl-linux-src-v1.3.9/product/rr64xl/linux/
[root@study linux]# ll
-rw-r--r--. 1 dmtsai dmtsai 1043 Mar 7 2015 config.c
-rwxr-xr-x. 1 dmtsai dmtsai 395 Dec 27 2013 Makefile # 要有这家伙存在才行！
[root@study linux]# make
make[1]: Entering directory `/usr/src/kernels/linux-3.10.89'
CC [M] /root/raidcard/rr64xl-linux-src-v1.3.9/product/rr64xl/linux/.build/os_linux.o
CC [M] /root/raidcard/rr64xl-linux-src-v1.3.9/product/rr64xl/linux/.build/osm_linux.o
.....（中间省略）.....
LD [M] /root/raidcard/rr64xl-linux-src-v1.3.9/product/rr64xl/linux/.build/rr640l.ko
make[1]: Leaving directory `/usr/src/kernels/linux-3.10.89'
[root@study linux]# ll
-rw-r--r--. 1 dmtsai dmtsai 1043 Mar 7 2015 config.c
-rwxr-xr-x. 1 dmtsai dmtsai 395 Dec 27 2013 Makefile
-rw-r--r--. 1 root root 1399896 Oct 21 00:59 rr640l.ko # 就是产生这家伙！
# 2. 将模块放置到正确的位置去！
[root@study linux]# cp rr640l.ko /lib/modules/3.10.89vbird/kernel/drivers/scsi/
[root@study linux]# depmod -a # 产生模块相依性文件！
[root@study linux]# grep rr640 /lib/modules/3.10.89vbird/modules.dep
kernel/drivers/scsi/rr640l.ko: # 确定模块有在相依性的配置文件中！
[root@study linux]# modprobe rr640l
modprobe: ERROR: could not insert 'rr640l': No such device
# 要测试载入一下才行，不过，我们实际上虚拟机没有这张 RAID card，所以出现错误是正常的啦！
# 3. 若开机过程中就得要载入此模块，则需要将模块放入 initramfs 才行喔！
[root@study linux]# dracut --force -v --add-drivers rr640l \
> /boot/initramfs-3.10.89vbird.img 3.10.89vbird
[root@study linux]# lsinitrd /boot/initramfs-3.10.89vbird.img | grep rr640
通过这样的动作，我们就可以轻易的将模块编译起来，并且还可以将他直接放置到核心模块目录中， 同时以 depmod 将模块创建相关
性，未来就能够利用 modprobe 来直接取用啦！ 但是需要提醒你的是，当自行编译模块时， 若你的核心有更新 （例如利用自动更新机制进行
线上更新） 时，则你必须要重新编译该模块一次， 重复上面的步骤才行！因为这个模块仅针对目前的核心来编译的啊！对吧！
利利用用旧旧有有的的核核心心源源代代码码进进行行编编译译
如果你后来发现忘记加入某个模块功能了，那该如何是好？其实如果仅是重新编译模块的话， 那么整个过程就会变的非常简单！我们先
到目前的核心源代码所在目录下达 make menuconfig ， 然后将 NTFS 的选项设置成为模块，之后直接下达：
make fs/ntfs/
那么 ntfs 的模块 （ntfs.ko） 就会自动的被编译出来了！ 然后将该模块复制到 /lib/modules/3.10.89vbird/kernel/fs/ntsf/ 目录下， 再执行
depmod -a ，呵呵～就可以在原来的核心下面新增某个想要加入的模块功能啰～ ^_^
核心与核心模块是分不开的，至于驱动程序模块在编译的时候，更与核心的源代码功能分不开～ 因此，你必须要先了解到：核心、核心
模块、驱动程序模块、核心源代码与头文件案的相关性， 然后才有办法了解到为何编译驱动程序的时候老是需要找到核心的源代码才能够顺利
编译！ 然后也才会知道，为何当核心更新之后，自己之前所编译的核心模块会失效～
此外，与核心模块有相关的，还有那个很常被使用的 modprobe 指令， 以及开机的时候会读取到的模块定义数据文件
/etc/modprobe.conf ， 这些数据你也必须要了解才行～相关的指令说明我们已经在第十九章内谈过了， 你应该要自行前往了解喔！ ^_^
如果你跟鸟哥一样，曾经为了某些缘故需要最新的 4.x.y 的核心版本来实作某些特定的功能时，那该如何是好？没办法，只好使用最新
的核心版本来编译啊！ 你可以依照上面的程序来一个一个处理，没有问题～不过，你也可以根据 ELRepo 网站提供的 SRPM 来重新编译打包
喔！ 当然你可以直接使用 ELRepo 提供的 CentOS 7.x 专属的核心来直接安装。
下面我们使用 ELRepo 网站提供的 SRPM 文件来实作核心编译。而要这么重新编译的原因是，鸟哥需要将 VFIO 的 VGA 直接支持的核
心功能打开！ 因此整个程序会变成类似这样：
1. 先从 ELRepo 网站下载不含源代码的 SRPM 文件，并且安装该文件
2. 从 www.kernel.org 网站下载满足 ELRepo 网站所需要的核心版本来处理
3. 修改核心功能
4. 通过 SRPM 的 rpmbuild 重新编译打包核心
就让我们来测试一下啰！（注意，鸟哥使用的是 2015/10/20 当下最新的 4.2.3 这一版的核心。由于核心版本的升级太快，因此在你实作
的时间， 可能已经有更新的核心版本了。此时你应该要前往 ELRepo 查阅最新的 SRPM 之后，再决定你想使用的版本喔！）
1. 先下载 ELRepo 上面的 SRPM 文件！同时安装它：
[root@study ~]# wget http://elrepo.org/linux/kernel/el7/SRPMS/kernel-ml-4.2.3-1.el7.elrepo.nosrc.rpm
[root@study ~]# rpm -ivh kernel-ml-4.2.3-1.el7.elrepo.nosrc.rpm
2. 根据上述的文件，下载正确的核心源代码：
[root@study ~]# cd rpmbuild/SOURCES
[root@study SOURCES]# wget https://cdn.kernel.org/pub/linux/kernel/v4.x/linux-4.2.3.tar.xz
[root@study SOURCES]# ll -tr
.....（前面省略）.....
-rw-r--r--. 1 root root 85523884 Oct 3 19:58 linux-4.2.3.tar.xz # 核心源代码
-rw-rw-r--. 1 root root 294 Oct 3 22:04 cpupower.service
-rw-rw-r--. 1 root root 150 Oct 3 22:04 cpupower.config
-rw-rw-r--. 1 root root 162752 Oct 3 22:04 config-4.2.3-x86_64 # 主要的核心功能
3. 修改核心功能设置：
[root@study SOURCES]# vim config-4.2.3-x86_64
# 大约在 5623 行找到下面这一行，并在下面新增一行设置值！
# CONFIG_VFIO_PCI_VGA is not set
CONFIG_VFIO_PCI_VGA=y
[root@study SOURCES]# cd ../SPECS
[root@study SPECS]# vim kernel-ml-4.2.spec
# 大概在 145 左右找到下面这一行：
Source0: ftp://ftp.kernel.org/pub/linux/kernel/v4.x/linux-%{LKAver}.tar.xz
# 将它改成如下的模样：
Source0: linux-%{LKAver}.tar.xz
4. 开始编译并打包：
[root@study SPECS]# rpmbuild -bb kernel-ml-4.2.spec
# 接下来会有很长的一段时间在进行编译行为，鸟哥的机器曾经跑过两个小时左右才编译完！
# 所以，请耐心等候啊！
Wrote: /root/rpmbuild/RPMS/x86_64/kernel-ml-4.2.3-1.el7.centos.x86_64.rpm
Wrote: /root/rpmbuild/RPMS/x86_64/kernel-ml-devel-4.2.3-1.el7.centos.x86_64.rpm
Wrote: /root/rpmbuild/RPMS/x86_64/kernel-ml-headers-4.2.3-1.el7.centos.x86_64.rpm
Wrote: /root/rpmbuild/RPMS/x86_64/perf-4.2.3-1.el7.centos.x86_64.rpm
Wrote: /root/rpmbuild/RPMS/x86_64/python-perf-4.2.3-1.el7.centos.x86_64.rpm
Wrote: /root/rpmbuild/RPMS/x86_64/kernel-ml-tools-4.2.3-1.el7.centos.x86_64.rpm
Wrote: /root/rpmbuild/RPMS/x86_64/kernel-ml-tools-libs-4.2.3-1.el7.centos.x86_64.rpm
Wrote: /root/rpmbuild/RPMS/x86_64/kernel-ml-tools-libs-devel-4.2.3-1.el7.centos.x86_64.rpm
如上表最后的状态，你会发现竟然已经有 kernel-ml 的软件包产生了！接下来你也不需要像手动安装核心一样，得要一个一个项目移动
到正确的位置去， 只要使用 yum install 新的核心版本，就会有 4.2.3 版的核心在你的 CentOS 7.x 当中了耶！相当神奇！
[root@study ~]# yum install /root/rpmbuild/RPMS/x86_64/kernel-ml-4.2.3-1.el7.centos.x86_64.rpm
[root@study ~]# reboot
[root@study ~]# uname -a
Linux study.centos.vbird 4.2.3-1.el7.centos.x86_64 #1 SMP Wed Oct 21 02:31:18 CST 2015 x86_64
x86_64 x86_64 GNU/Linux
这样就让我们的 CentOS 7.x 具有最新的核心啰！与核心官网相同版本咧～够帅气吧！
其实核心就是系统上面的一个文件而已，这个文件包含了驱动主机各项硬件的侦测程序与驱动模块；
上述的核心模块放置于：/lib/modules/$（uname -r）/kernel/
“驱动程序开发”的工作上面来说，应该是属于硬件发展厂商的问题
一般的使用者，由于系统已经将核心编译的相当的适合一般使用者使用了，因此一般入门的使用者，基本上，不太需要编译核心
编译核心的一般目的：新功能的需求、原本的核心太过臃肿、与硬件搭配的稳定性、其他需求（如嵌入式系统）
编译核心前，最好先了解到您主机的硬件，以及主机的用途，才能选择好核心功能；
编译前若想要保持核心源代码的干净，可使用 make mrproper 来清除暂存盘与配置文件；
挑选核心功能与模块可用 make 配合：menuconfig, oldconfig, xconfig, gconfig 等等
核心功能挑选完毕后，一般常见的编译过程为：make bzImage, make modules
模块编译成功后的安装方式为： make modules_install
核心的安装过程中，需要移动 bzImage 文件、创建 initramfs 文件、重建 grub.cfg 等动作；
我们可以自行由硬件开发商之官网下载驱动程序来自行编译核心模块！
（ 要看答案请将鼠标移动到“答：”下面的空白处，按下左键圈选空白处即可察看）
简单说明核心编译的步骤为何？
1. 先下载核心源代码，可以从 http://www.kernel.org 或者是 distributions 的 SRPM 来着手；
2. 以下以 Tarball 来处理，解开源代码到 /usr/src/kernels 目录下；
3. 先进行旧数据删除的动作：“make mrproper”；
4. 开始挑选核心功能，可以利用“make menuconfig”、“make oldconfig”、“make gconfig”等等；
5. 清除过去的中间暂存盘数据：“make clean”
6. 开始核心文件与核心模块的编译：“make bzImage”、“make modules”
7. 开始核心模块的安装：“make modules_install”
8. 开始核心文件的安装，可以使用的方式有：“make install”或者是通过手动的方式复制核心文件到 /boot/ 当中；
9. 创建 initramfs 文件；
10. 使用 grub2-mkconfig 修改 /boot/grub2/grub.cfg 文件；
如果你利用新编译的核心来操作系统，发现系统并不稳定，你想要移除这个自行编译的核心该如何处理？
1. 重新开机，并使用旧的稳定的核心开机！
2. 此时才可以将新版核心模块删除： rm -rf /lib/modules/3.10.89vbird
3. 删除掉 /boot 里面的新核心： rm /boot/vmlinuz-3.10.89vbird /boot/initramfs-3.10.89vbird.img ...
4. 重建 grub.cfg： grub2-mkconfig -o /boot/grub2/grub.cfg
[1]通过在 /usr/src/kernels/linux-3.10.89 下面的 README 以及“ make help ”可以得到相当多的解释
核心编译的功能：可以用来测试 CPU 性能喔！因为 compile 非常耗系统资源！
2002/05/29：第一次完成
2003/02/11：重新编排与加入 FAQ
2004/06/11：原本的 2.4.xx 版本核心被移动到 此处
2005/11/15：原本的模块管理已经先移动到开机流程管理那一篇啰！
2005/12/05：经过将近一个月，呵呵！终于给他整理出来这一篇了～真难得～
2007/06/27：增加了 initrd 的简单说明，详细还是得看 loader 那一章。
2009/07/21：将基于 FC4 所撰写的文章移动到此处
2009/08/03：原本的 KDE/GNOME 使用的发动机写错了！ KDE 用 Qt ，而 GNOME 是用 Gtk ！非常感谢 Chua Tze An 兄提供的指正！
2009/09/18：加入两个简单的题目，给大家思考一下而已。
2015/09/23：将基于 CentOS 5 的旧的版本移动到这里。