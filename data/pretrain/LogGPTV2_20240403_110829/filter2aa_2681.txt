# Securing Our Cyberspace

**Copyright © 2011 CyberSecurity Malaysia**

**Ministry of Science, Technology & Innovation**

**Presented by: Mahmud Ab Rahman (MyCERT, CyberSecurity Malaysia)**

## Reversing Android Malware

### Introduction to Dalvik Bytecode

**Dalvik Bytecode Resources:**

- **Official Android SDK Documentation:**
  - Accessible via git: [http://android.git.kernel.org/?p=platform/dalvik.git;a=tree](http://android.git.kernel.org/?p=platform/dalvik.git;a=tree)

- **Gabor's Research on .dex Bytecode:**
  - [http://pallergabor.uw.hu/androidblog/dalvik_opcodes.html](http://pallergabor.uw.hu/androidblog/dalvik_opcodes.html)

- **Dalvik Bytecode Documentation:**
  - [http://www.netmite.com/android/mydroid/dalvik/docs/dalvik-bytecode.html](http://www.netmite.com/android/mydroid/dalvik/docs/dalvik-bytecode.html)

- **Android SDK API Reference:**
  - [http://developer.android.com/reference/packages.html](http://developer.android.com/reference/packages.html)

### Dalvik Bytecode Overview

- **.class public final com/xxxx/xxxx/** 
  - A class file.
  
- **.super java/lang/Object**
  - A super object.

- **.source DataHelper.java**
  - A source file.

- **.field public static final a Ljava/lang/String**
  - A field with a "string" attribute.

- **.method static ()V**
  - A static method with a VOID return type.

- **new-array vA, vB, type@CCCC**
  - Constructs a new array of the specified type and size. The type must be an array type.

- **const/*(4,16) vA, #+B**
  - Moves the given literal value (sign-extended to 32 bits) into the specified register.

- **invoke-* (direct, static, super, interface, virtual)**
  - Calls the indicated method. The result (if any) can be stored using an appropriate move-result* variant as the immediately subsequent instruction.

- **s-(get|put)-*(wide, float, object, byte, char)**
  - Performs the identified object static field operation with the identified static field, loading or storing into the value register. These opcodes are reasonable candidates for static linking, altering the field argument to be a more direct offset.

- **move-result-*(wide, object)**
  - Moves the single-word/double/object (non-object) result of the most recent invoke-kind into the indicated register.

- **move v0, v11**
  - Moves the value in v11 to v0.

- **goto l78a**
  - Branches to line 78a.

- **a-(get|put)-*(wide, float, object, byte, char)**
  - Performs the identified array operation at the identified index of the given array, loading or storing into the value register.

- **i-(get|put)-*(wide, float, object, byte, char)**
  - Performs the identified object instance field operation with the identified field, loading or storing into the value register. These opcodes are also reasonable candidates for static linking, altering the field argument to be a more direct offset.

- **if-(eq, ne, gt, lt, ge, le) vA, vB, +CCCC**
  - Branches to the given destination if the values in the two registers compare as specified. The branch offset may not be 0.

- **if-(eq, ne, gt, lt, ge, le) vA, +CCCC**
  - Branches to the given destination if the value in the given register compares with 0 as specified. The branch offset may not be 0.

## Android Malware

### Introduction

- **Malicious Code:**
  - Malware is a malicious piece of code that can infect legitimate apps, exploit Android bugs, or pose as fake apps.

- **Infection Methods:**
  - **Infecting Legitimate Apps:**
    - Modifying apps with malicious code (e.g., Geinimi, DreamDroid, ADDR).
    - Uploading to the "Market" or third-party hosting sites.
  - **Exploiting Android Bugs:**
    - Exploiting vulnerabilities in the Android core or apps.
  - **Fake Apps:**
    - Creating fake apps, such as DreamDroid’s removal tool.
  - **Remote Installation:**
    - Requires the victim’s Gmail credentials.
    - Browses the "Market" and passes the Gmail info, allowing the "Market" to install the app remotely.
    - [Reference: http://www.net-security.org/article.php?id=1556](http://www.net-security.org/article.php?id=1556)

### DreamDroid Malware

- **Overview:**
  - Latest addition to the Android malware family.
  - Infects legitimate software and is hosted on the "Market."
  - 53 software applications were infected.
  - Bundled with exploits to root the Android device (e.g., Exploid, Rageagainstthecage).

- **Stage 1 Payload:**
  - **Lifecycle (Entry Point):**
    - Launches itself via INTENT (Launcher) in `AndroidManifest.xml`.
    - Checks the "profile" file (Init on Setting->Init on Setting$1).
      - If the file exists, it stops itself.
      - If the file does not exist, it checks if the “.downloadsmanager” is installed.
        - If installed, it stops itself.
        - If not installed, it starts copying `sqlite.db` to `DownloadProvidersManager.apk` (using `cpFile()`).
  - **Lifecycle (Rooting the Device):**
    - Checks the "profile" file.
      - If the file exists, it destroys and stops itself.
      - If the file does not exist, it prepares for UdevRoot.
        - Runs Exploit.
        - If the exploit fails, it prepares for AdbRoot and runs "rageagaintsthecage."
        - Finally, it destroys and copies the file or stops itself.
  - **Lifecycle (Calling Home):**
    - Uses an XOR-ed URL.
    - OnCreate()->Setting$2.run().

- **Stage 2 Payload:**
  - **DownloadProvidersManager.apk:**
    - Silently installed/copied into `/system/app`.
    - Starts via `AndroidManifest.xml`.
    - Manages communication with the C&C server, receives instructions, and sends information back.
    - Installs itself silently by copying to the `/system/app` directory.

- **Features:**
  - Encrypted communication (XOR).
  - Encrypted data.
  - Bot capability.
  - Two-stage payloads:
    - **First Stage:**
      - Infected app roots the device and installs the second payload (DownloadProviderManager).
    - **Second Stage:**
      - Receives instructions from the C&C server.
      - Sends information to the C&C server.
      - Silently installs itself by copying to the `/system/app` directory.

- **Encryption:**
  - Uses XOR operation with a specific key.
  - Revealed C&C server: [http://184.105.245.17:8080/GMServer/GMServlet](http://184.105.245.17:8080/GMServer/GMServlet)
  - Sends IMEI, IMSI, Device Model, and SDK Version to the C&C server.

### Challenges and Issues

- **Reverse Engineering Challenges:**
  - **Code Obfuscation:**
    - Obfuscation on data.
  - **Encryption:**
    - Makes reverse engineering harder but can eventually be broken.
  - **Code Optimization:**
    - Optimized code for devices, which is painful for reverse engineers.

- **Tools:**
  - Current tools are not yet mature.
  - Need for IDA Pro-like RE suites and XREF.

- **Spotting Malicious Apps:**
  - Not a reverse engineering problem, but how to spot malicious apps.
  - Remote installation via the "Market" is an interesting area to observe.

### Conclusion

- **Android Malware:**
  - An interesting and evolving topic.
  - Expect more complex malware and exploits on the Android platform.
  - More powerful hardware will change the landscape.

- **Reverse Engineering:**
  - It is possible to reverse engineer Android malware.
  - Many free tools are available for reverse engineering Android apps and malware.
  - Solving a puzzle, but the tools are still maturing.

### Q&A

### Contact Information

- **Email:** [PI:EMAIL]
- **Web:**
  - [http://www.cybersecurity.my](http://www.cybersecurity.my)
  - [http://www.mycert.org.my](http://www.mycert.org.my)
  - [http://www.cybersafe.my](http://www.cybersafe.my)
- **Report Incident:** [PI:EMAIL]

**Thank you!**