Securing Our Cyberspace 
Copyright © 2011 CyberSecurity Malaysia 
Ministry of Science, 
Technology & Innovation 
MAHMUD AB RAHMAN  
(MyCERT, CyberSecurity Malaysia) 
Reversing Android Malware 
Copyright © 2011 CyberSecurity Malaysia                                                                                 2 
Securing Our Cyberspace 
Ministry of Science, 
Technology & Innovation 
MYSELF 
!  Mahmud Ab Rahman 
!  MyCERT, CyberSecurity Malaysia 
!  Lebahnet(honeynet), Botnet, Malware 
Copyright © 2011 CyberSecurity Malaysia                                                                                 3 
Securing Our Cyberspace 
Ministry of Science, 
Technology & Innovation 
INTRO : Dalvik Bytercode 
!  Below are list of websites for studying and 
understanding Dalvik’s opcode.  
o Official Android SDK Documentation accessible via 
git 
- http://android.git.kernel.org/?p=platform/
dalvik.git;a=tree 
o http://pallergabor.uw.hu/androidblog/
dalvik_opcodes.html 
- Based on Gabor’s RE on .dex bytecode 
o http://www.netmite.com/android/mydroid/dalvik/
docs/dalvik-bytecode.html 
o http://developer.android.com/reference/
packages.html - Android SDK API 
Copyright © 2011 CyberSecurity Malaysia                                                                                 4 
Securing Our Cyberspace 
Ministry of Science, 
Technology & Innovation 
INTRO : Dalvik Bytercode 
!  .class public final com/xxxx/xxxx/ 
o  A class file 
!  .super java/lang/Object 
o  A super object 
!  .source DataHelper.java 
o  A source file 
!  .field public static final a Ljava/lang/String 
o  A ‘field’ with “string” attribute 
!  .method static ()V 
o  A static method with a VOID return 
!  new-array vA, vB, type@CCCC 
o  Construct a new array of the indicated type and size. The type must be an array type. 
Copyright © 2011 CyberSecurity Malaysia                                                                                 5 
Securing Our Cyberspace 
Ministry of Science, 
Technology & Innovation 
INTRO : Dalvik Bytercode 
!  const/*(4,16) vA, #+B 
o  Move the given literal value (sign-extended to 32 bits) into the specified register 
!  invoke-* (direct,static,super,interface,virtual) 
o  Call the indicated method. The result (if any) may be stored with an appropriate move-
result* variant as the immediately subsequent instruction. 
!  s-(get|put)-*(wide,float,object,byte,char) 
o  Perform the identified object static field operation with the identified static field, 
loading or storing into the value register.Note: These opcodes are reasonable 
candidates for static linking, altering the field argument to be a more direct offset. 
!  move-result-*(wide,object) 
o  Move the single-word/double/object (non-object) result of the most recent invoke-kind 
into the indicated register. 
!  new-array vA, vB, type@CCCC 
o  Construct a new array of the indicated type and size. The type must be an array type. 
Copyright © 2011 CyberSecurity Malaysia                                                                                 6 
Securing Our Cyberspace 
Ministry of Science, 
Technology & Innovation 
INTRO : Dalvik Bytercode 
!  move 
v0,v11  
o  Move v11 to v0 
!  Goto l78a 
o  GOTO line 78a 
!  a-(get|put)-*(wide,float,object,byte,char) 
o  Perform the identified array operation at the identified index of the given array, 
loading or storing into the value register. 
!  i-(get|put)-*(wide,float,object,byte,char) 
o  Perform the identified object instance field operation with the identified field, loading 
or storing into the value register. 
o  Note: These opcodes are reasonable candidates for static linking, altering the field 
argument to be a more direct offset. 
Copyright © 2011 CyberSecurity Malaysia                                                                                 7 
Securing Our Cyberspace 
Ministry of Science, 
Technology & Innovation 
INTRO : Dalvik Bytercode 
!  if-(eq,ne,gt,lt,ge,le) vA, vB, +CCCC 
o  Branch to the given destination if the given two registers' values compare as specified. 
o  Note: The branch offset may not be 0. (A spin loop may be legally constructed either 
by branching around a backward goto or by including a nop as a target before the 
branch.) 
!  If-(eq,ne,gt,lt,ge,le) vA, +CCCC 
o  Branch to the given destination if the given register's value compares with 0 as 
specified. 
o  Note: The branch offset may not be 0. (A spin loop may be legally constructed either 
by branching around a backward goto or by including a nop as a target before the 
branch.) 
Securing Our Cyberspace 
Copyright © 2011 CyberSecurity Malaysia 
Ministry of Science, 
Technology & Innovation 
ANDROID MALWARE 
Intro 
Reversing 
Android 
Cases Study 
Issues 
Conclusion 
Android 
malware 
Copyright © 2011 CyberSecurity Malaysia                                                                                 9 
Securing Our Cyberspace 
Ministry of Science, 
Technology & Innovation 
Android Malware 
Copyright © 2011 CyberSecurity Malaysia                                                                                 10 
Securing Our Cyberspace 
Ministry of Science, 
Technology & Innovation 
Android Malware 
!  Malicious piece of codes. 
!  Infection methods: 
o Infecting legitimate apps 
- Mod app with malicious codes (Geinimi, 
DreamDroid,ADDR) 
- Upload to “Market” or 3rd party hosting   
o Exploiting Android’s (core/apps) bugs 
o Fake apps 
- DreamDroid’s removal tool 
Copyright © 2011 CyberSecurity Malaysia                                                                                 11 
Securing Our Cyberspace 
Ministry of Science, 
Technology & Innovation 
Android Malware 
!  Infection methods (cont): 
o Remote install?. 
- Victim’s gmail credential is required 
- Browse “Market” and pass gmail info 
- “Market” will install app into victim’s phone REMOTELY 
http://www.net-security.org/article.php?id=1556 
Copyright © 2011 CyberSecurity Malaysia                                                                                 12 
Securing Our Cyberspace 
Ministry of Science, 
Technology & Innovation 
DreamDroid Malware 
Copyright © 2011 CyberSecurity Malaysia                                                                                 13 
Securing Our Cyberspace 
Ministry of Science, 
Technology & Innovation 
RE #3: DreamDroid 
!  Latest addition to android malware family 
!  Modus Operandi 
o Infecting legitimate software 
o Hosted at “Market” 
o 53 software infected  
!  Bundled with exploits to “root” the Android 
o Exploid (CVE-2009-1185)  
o Rageagaintsthecage (CVE-2010-EASY) 
!  Bot capability 
Copyright © 2011 CyberSecurity Malaysia                                                                                 14 
Securing Our Cyberspace 
Ministry of Science, 
Technology & Innovation 
RE #3: DreamDroid (stage1 payload) 
!  Life Circle (entry point) 
o Launch Itself via INTENT (Launcher) 
- AndroidManifest.XML 
o Checking “profile” file (Init on Setting->Init on 
Setting$1) 
- If exist, stopSelf() 
- Else 
–  Check if the “.downloadsmanager” is installed 
–  If installed, stopSelf() 
–  Else 
-  start copying sqlite.db to DownloadProvidersManager.apk 
(cpFile()) 
Copyright © 2011 CyberSecurity Malaysia                                                                                 15 
Securing Our Cyberspace 
Ministry of Science, 
Technology & Innovation 
RE #3: DreamDroid (stage1 payload) 
Copyright © 2011 CyberSecurity Malaysia                                                                                 16 
Securing Our Cyberspace 
Ministry of Science, 
Technology & Innovation 
RE #3: DreamDroid (stage1 payload) 
!  Life Circle (r00ting the b0x) 
o Check the “profile” file 
- If exist, destroy() ->stopSelf() 
- Else 
–  Prepare for UdevRoot 
-  Run Exploid 
–  If Failed 
-  Prepare for AdbRoot 
-  Run “rageagaintsthecage” 
–  destroy() -> cpFile() | stopSelf() 
Copyright © 2011 CyberSecurity Malaysia                                                                                 17 
Securing Our Cyberspace 
Ministry of Science, 
Technology & Innovation 
RE #3: DreamDroid (stage1 payload) 
Copyright © 2011 CyberSecurity Malaysia                                                                                 18 
Securing Our Cyberspace 
Ministry of Science, 
Technology & Innovation 
RE #3: DreamDroid (stage1 payload) 
!"#$%&&'(
Copyright © 2011 CyberSecurity Malaysia                                                                                 19 
Securing Our Cyberspace 
Ministry of Science, 
Technology & Innovation 
RE #3: DreamDroid (stage1 payload) 
)"*%&&'()+)(,)-#)-)./'0'1#2)-#(
Copyright © 2011 CyberSecurity Malaysia                                                                                 20 
Securing Our Cyberspace 
Ministry of Science, 
Technology & Innovation 
RE #3: DreamDroid (stage1 payload) 
!  Life Circle (calling home) 
o XOR-ed URL 
Copyright © 2011 CyberSecurity Malaysia                                                                                 21 
Securing Our Cyberspace 
Ministry of Science, 
Technology & Innovation 
RE #3: DreamDroid (stage1 payload) 
!  Life Circle (calling home) 
o OnCreate()->Setting$2.run() 
Copyright © 2011 CyberSecurity Malaysia                                                                                 22 
Securing Our Cyberspace 
Ministry of Science, 
Technology & Innovation 
RE #3: DreamDroid (stage1 payload) 
!  Life Circle (calling home) 
o XOR-ed URL 
http://184.105.245.17:8080/GMServer/GMServlet 
34567($#,0.&/89:;?@A94B(
3%#C!#0'B3D,&'&2&7B:;<3ED,&'&2&7B3F&66)/"B<3EF&66)/"B3F7.#/'G/H&B3D),'/#,BI03ED),'/#,B(
3D,&"!2'G"BI03ED,&"!2'G"B3GJKGBI03EGJKGB3GJLGBI03EGJLGB3J&"7#BI03EJ&"7#B3EF7.#/'G/H&B(
3E%#C!#0'9(
Copyright © 2011 CyberSecurity Malaysia                                                                                 23 
Securing Our Cyberspace 
Ministry of Science, 
Technology & Innovation 
RE #3: DreamDroid (stage2 payload) 
!  DownloadProvidersManager.apk 
o Silently installed/copied into /system/app 
Copyright © 2011 CyberSecurity Malaysia                                                                                 24 
Securing Our Cyberspace 
Ministry of Science, 
Technology & Innovation 
RE #3: DreamDroid (stage2 payload) 
!  What it does? 
o RE  DownloadProvidersManager.apk 
o Start via AndroidManifest.xml too : ) 
Copyright © 2011 CyberSecurity Malaysia                                                                                 25 
Securing Our Cyberspace 
Ministry of Science, 
Technology & Innovation 
RE #3: DreamDroid (cont) 
!  Features: 
o Encrypted communication (XOR) 
o Encrypted data 
o Bot capability 
o Two stage payloads 
- 1st Payload - Infected app 
–  Rooted device 
–  Install 2nd payload (DownloadProviderManager) 
- 2nd Payload - DownloadProviderManager 
–  Sqllite.db (original filename) 
–  Receive instructions from C&C 
–  Send info to C&C 
–  Silently install itself (copy to /system/app directory) 
Copyright © 2011 CyberSecurity Malaysia                                                                                 26 
Securing Our Cyberspace 
Ministry of Science, 
Technology & Innovation 
RE #3: DreamDroid (cont) 
!  Encryption 
o XOR operation 
- KEY=“6^)(9-p35a%3#4S!4S0)$Yt%^&5(j.g^&o(*0)$Yv!#O@6GpG@=+3j.&6^)(0-
=1”.getBytes() 
- DATA= 
“9442938832952138511219112519102302419997621102222611139125244801090511910
011960487794252” 
o Revealed C&C server 
- http://184.105.245.17:8080/GMServer/GMServlet 
!  Send IMEI,IMSI, Device Model, SDK Version to 
C&C server 
Securing Our Cyberspace 
Copyright © 2011 CyberSecurity Malaysia 
Ministry of Science, 
Technology & Innovation 
CHALLENGES AND ISSUES 
Intro 
Reversing 
Android 
Cases Study 
Issues 
Conclusion 
Android 
malware 
Copyright © 2011 CyberSecurity Malaysia                                                                                 28 
Securing Our Cyberspace 
Ministry of Science, 
Technology & Innovation 
Challenges and Issues 
!  Typical Reverse engineering challenges 
o Code obfuscation 
- Obfuscation on data 
o Encryption 
- Make it harder 
- Eventually will be broken (as for current sample) 
o Code optimizing 
- Code for device, painful for RE 
!  Tools is not yet mature  
o IDA PRO like RE suite 
o XREF 
Copyright © 2011 CyberSecurity Malaysia                                                                                 29 
Securing Our Cyberspace 
Ministry of Science, 
Technology & Innovation 
Challenges and Issues 
!  Spotting the malicious apps 
o Not RE problem but how do you spot the 
malicious app?. 
!  Remote Install via “Market” would be interesting 
to observe 
Securing Our Cyberspace 
Copyright © 2011 CyberSecurity Malaysia 
Ministry of Science, 
Technology & Innovation 
CONCLUSION 
Intro 
Reversing 
Android 
Cases Study 
Issues 
Conclusion 
Android 
malware 
Copyright © 2011 CyberSecurity Malaysia                                                                                 31 
Securing Our Cyberspace 
Ministry of Science, 
Technology & Innovation 
Conclusion 
!  Android malware is interesting topic 
o More complex android malware are expected 
o More exploits on Android platform are expected 
o More powerful hardware will change the 
landscape! 
!  It is possible to reverse engineering Android 
malware 
o A lot of free tools to reverse engineering android 
apps/malware 
o Solving a puzzle. PERIOD 
!  Reversing tools are there, but yet to mature  
Securing Our Cyberspace 
Copyright © 2011 CyberSecurity Malaysia 
Ministry of Science, 
Technology & Innovation 
Q&A 
Securing Our Cyberspace 
Copyright © 2011 CyberSecurity Malaysia 
Ministry of Science, 
Technology & Innovation 
THANKS 
Email: PI:EMAIL 
Web: http://www.cybersecurity.my 
Web: http://www.mycert.org.my 
Web: www.cybersafe.my 
Report Incident: PI:EMAIL