96 98 93 99 97 98
The scores read in are as follows:
99 95 109 105 100 96 98 93 99 97
Sum of scores = 991, average = 99.10
That's a handicap of 27.
程序运行没问题，我们来仔细分析一下。首先，注意程序示例虽然打印
了11个数字，但是只读入了10个数字，因为循环只读了10个值。由于scanf()
会跳过空白字符，所以可以在一行输入10个数字，也可以每行只输入一个数
字，或者像本例这样混合使用空格和换行符隔开每个数字（因为输入是缓冲
的，只有当用户键入Enter键后数字才会被发送给程序）。
然后，程序使用数组和循环处理数据，这比使用10个单独的scanf()语句
和10个单独的printf()语句读取10个分数方便得多。for循环提供了一个简单直
接的方法来使用数组下标。注意，int类型数组元素的用法与int类型变量的用
法类似。要读取int类型变量fue，应这样写
。程序
清单6.19中要读取int类型的元素
，所以这样写
。
该程序示例演示了一些较好的编程风格。第一，用#define 
指令创建的
明示常量（SIZE）来指定数组的大小。这样就可以在定义数组和设置循环边
界时使用该明示常量。如果以后要扩展程序处理20个分数，只需简单地把
SIZE重新定义为20即可，不用逐一修改程序中使用了数组大小的每一处。
第二，下面的代码可以很方便地处理一个大小为SIZE的数组：
for (index = 0; index 
double power(double n, int p); // ANSI函数原型
int main(void)
{
double x, xpow;
int exp;
printf("Enter a number and the positive integer power");
printf(" to which\nthe number will be raised. Enter q");
printf(" to quit.\n");
while (scanf("%lf%d", &x, &exp) == 2)
{
xpow = power(x, exp); // 函数调用
printf("%.3g to the power %d is %.5g\n", x, exp, xpow);
printf("Enter next pair of numbers or q to quit.\n");
}
printf("Hope you enjoyed this power trip -- bye!\n");
return 0;
}
385
double power(double n, int p)  // 函数定义
{
double pow = 1;
int i;
for (i = 1; i  0; value /= 2)
printf("%3d", value);
如果value是double类型，会出现什么问题？
3.用代码表示以下测试条件：
a.大于5
b.
读取一个名为 的
类型值且失败
c.X的值等于
4.用代码表示以下测试条件：
392
a.
成功读入一个整数
b.