title:Marionette: A Programmable Network Traffic Obfuscation System
author:Kevin P. Dyer and
Scott E. Coull and
Thomas Shrimpton
Marionette: A Programmable Network Traffic 
Obfuscation System
Kevin P. Dyer, Portland State University; Scott E. Coull, RedJack LLC.; 
Thomas Shrimpton, Portland State University
https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/dyer
This paper is included in the Proceedings of the 
24th USENIX Security Symposium
August 12–14, 2015 • Washington, D.C.
ISBN  978-1-939133-11-3
Open access to the Proceedings of  the 24th USENIX Security Symposium is sponsored by USENIXMarionette: A Programmable Network-Trafﬁc Obfuscation System
Kevin P. Dyer
Portland State University
PI:EMAIL
Scott E. Coull
RedJack, LLC.
PI:EMAIL
Thomas Shrimpton
Portland State University
PI:EMAIL
Abstract
Recently, a number of obfuscation systems have been
developed to aid in censorship circumvention scenarios
where encrypted network trafﬁc is ﬁltered.
In this pa-
per, we present Marionette, the ﬁrst programmable net-
work trafﬁc obfuscation system capable of simultane-
ously controlling encrypted trafﬁc features at a variety
of levels, including ciphertext formats, stateful protocol
semantics, and statistical properties. The behavior of the
system is directed by a powerful type of probabilistic au-
tomata and speciﬁed in a user-friendly domain-speciﬁc
language, which allows the user to easily adjust their ob-
fuscation strategy to meet the unique needs of their net-
work environment. In fact, the Marionette system is ca-
pable of emulating many existing obfuscation systems,
and enables developers to explore a breadth of proto-
cols and depth of trafﬁc features that have, so far, been
unattainable. We evaluate Marionette through a series
of case studies inspired by censor capabilities demon-
strated in the real-world and research literature, includ-
ing passive network monitors, stateful proxies, and active
probing. The results of our experiments not only show
that Marionette provides outstanding ﬂexibility and con-
trol over trafﬁc features, but it is also capable of achiev-
ing throughput of up to 6.7Mbps when generating RFC-
compliant cover trafﬁc.
1
Introduction
Many countries have begun to view encrypted network
services as a threat to the enforcement of information
control and security policies. China [41] and Iran [7] are
well-known for their efforts to block encrypted services
like Tor [14], while other countries, such as the United
Kingdom [18], have begun to express interest in block-
ing VPNs and anonymity systems. These discriminatory
routing policies are empowered by analyzing trafﬁc at
both the network layer (e.g. TCP/IP headers) and, more
recently, the application layer. The latter looks for spe-
ciﬁc features of packet payloads that act as a signature
for the application-layer protocol being transported.
To combat application-layer ﬁltering, several sys-
tems have been proposed to obfuscate packet payloads,
and generally hide the true protocol being transported.
Broadly speaking, these methods fall into one of three
categories:
those that use encryption to fully random-
ize the messages sent (e.g., obfs4 [34], ScrambleSuit
[42], Dust [40]); those that tunnel trafﬁc using exist-
ing software artifacts (e.g., FreeWave [21], Facet [24]);
and those that use encryption in combination with some
lightweight ciphertext formatting to make the trafﬁc
mimic an allowed protocol (e.g., FTE [15], Stego-
Torus [38]). A few of these systems have been deployed
and are currently used by more comprehensive circum-
vention systems, such as Lantern [1], uProxy [5], and
Tor [14].
Despite the progress these obfuscation systems repre-
sent, each of them suffers from one or more shortcom-
ings that severely limit their ability to adapt to new net-
work environments or censorship strategies. Lightweight
obfuscation methods based on randomization fail in sit-
uations where protocol whitelisting is applied, as in the
recent Iranian elections [13]. Tunneling systems are in-
timately tied to a speciﬁc protocol that may not always
be permitted within the restrictive network environment,
such as the case of Skype in Ethiopia [27]. Protocol-
mimicry systems really only aim to mimic individual
protocol messages, and therefore fail to traverse proxies
that enforce stateful protocol semantics (e.g., Squid [39])
. Moreover, these systems can be quite brittle in the face
of proxies that alter protocol messages in transit (e.g., al-
tering message headers can render FTE [15] inoperable).
In any case, all of the systems are incapable of changing
their target protocol or trafﬁc features without heavy sys-
tem re-engineering and redeployment of code. This is a
huge undertaking in censored networks.
USENIX Association  
24th USENIX Security Symposium  367
Stateful Multi-layer
Behavior
Control
Case Study
Regex-Based DPI
Proxy Traversal
Protocol Compliance
Trafﬁc Analysis
Active Probing
Message
Content





-




Trafﬁc
Statistics
-
-
-

-
Active
Probing
-
-
-
-

Protocol(s)
HTTP, SSH, SMB
HTTP
FTP, POP3
HTTP
HTTP, FTP, SSH
Goodput
(Down/Up)
68.2 / 68.2 Mbps
5.8 / 0.41 Mbps
6.6 / 6.7 Mbps
0.45 / 0.32 Mbps
6.6 / 6.7 Mbps
-
-



Figure 1: Summary of Marionette case studies illustrating breadth of protocols and depth of feature control.
The Marionette System. To address these shortcom-
ings, we develop the Marionette system. Marionette is a
network-trafﬁc obfuscation system that empowers users
to rapidly explore a rich design space, without the need
to deploy new code or re-design the underlying system.
The conceptual foundation of Marionette is a power-
ful kind of probabilistic automaton, loosely inspired by
probabilistic input/output automata [45]. We use these to
enforce (probabilistic) sequencing of individual cipher-
text message types. Each transition between automata
states has an associated block of actions to perform,
such as encrypting and formatting a message, sampling
from a distribution, or spawning other automata to sup-
port hierarchical composition. By composing automata,
we achieve even more comprehensive control over mim-
icked protocol behaviors (e.g., multiple dependent chan-
nels) and statistical features of trafﬁc. In addition, the
automata admit distinguished error states, thereby pro-
viding an explicit mechanism for handling active attacks,
such as censor-initiated “probing attacks.”
At the level of individual ciphertext formats, we intro-
duce another novel abstraction that supports ﬁne-grained
control. These template grammars are probabilistic
context-free grammars (CFG) that compactly describes
a language of templates for ciphertexts. Templates are
strings that contain placeholder tokens, marking the po-
sitions where information (e.g., encrypted data bytes,
dates, content-length values) may be embedded by user-
speciﬁed routines. Adopting a CFG to describe templates
has several beneﬁts, including ease of deployment due to
their compact representation, ability to directly translate
grammars from available RFCs, and use of the grammar
in receiver-side parsing tasks.
Everything is speciﬁed in a user-friendly domain-
speciﬁc language (DSL), which enables rapid develop-
ment and testing of new obfuscation strategies that are
robust and responsive to future network monitoring tools.
To encourage adoption and use of Marionette it has been
made available as free and open source software1.
Case studies.
To display what is possible with Mari-
onette, we provide several case studies that are inspired
by recent research literature and real-world censor capa-
1https://github.com/kpdyer/marionette/
bilities. These are summarized in Figure 1. For one ex-
ample, we show that Marionette can implement passive-
mode FTP by spawning multiple models that control in-
terdependent TCP connections. For another, we use Mar-
ionette to mimic HTTP with enforced protocol semantics
and resilience to message alteration, thereby successfully
traversing HTTP proxies.
Our studies show that Marionette is capable of im-
plementing a range of application-layer protocols, from
HTTP to POP3, while also providing great depth in the
range of trafﬁc features it controls. Most importantly, it
maintains this ﬂexibility without unduly sacriﬁcing per-
formance – achieving up to 6.7Mbps while still main-
taining fully RFC-compliant protocol semantics. We also
show that the system performance is network-bound, and
directly related to the constraints of the Marionette for-
mat being used.
Security Considerations. While our case studies are
motivated by well-known types of adversaries, we avoid
a formal security analysis of our framework for two rea-
sons. First, the security of the system is intimately tied
to the automata and template grammars speciﬁed by the
user, as well as how the chosen protocols and features
interact with the adversary. Second, any principled se-
curity analysis requires a generally accepted adversarial
model. At the moment, the capabilities of adversaries in
this space are poorly understood, and there are no formal-
ized security goals to target. With that said, we believe
our case studies represent a diverse sample of adversaries
known to exist in practice, and hope that the ﬂexibility of
our system allows it to adapt to new adversaries faced in
deployment. More fully understanding the limits of our
system, and the adversaries it may face, is left for future
work.
2 Related Work
In this section, we discuss previous work in the area of
obfuscation and mimicry of application-layer protocols,
as well as their common ancestry with network trafﬁc
generation research. The majority of systems aiming to
avoid application-layer ﬁltering are non-programmable,
in the sense that they adopt one strategy at design-time
368  24th USENIX Security Symposium 
USENIX Association
Blacklist Whitelist
Statistical-test
Protocol-enforcing Multi-layer
DPI
DPI
Proxy
Control
System
obfs2/3 [34]
ScrambleSuit [42]
obfs4 [34]
Dust [40]
SkypeMorph [26]
StegoTorus [38]
Freewave [21]
Facet [24]
SWEET [47]
JumpBox [25]
CensorSpoofer [36]
CloudTransport [8]
FTE [15]
Marionette
Randomization
Mimicry
Tunneling
Programmable
DPI














-
-
-
-










-




-
-

-
-
-
-
-

-
-
-
-
-
-
-
-
-
-
-

-

High
Throughput




-
-
-
-
-

-



-
-
-
-
-
-
-
-
-
-
-
-
-

Figure 2: A comparison of features across randomization, mimicry, tunneling, and programmable obfuscation systems. A “" in
the ﬁrst four columns mean the system is appropriate for the indicated type of monitoring device; in the last two, it means that the
system has the listed property. Multi-layer control is the ability to control features beyond single, independent connections. High-
throughput systems are deﬁned as any system capable of > 1Mbps throughput. Both FTE and Marionette can trade throughput for
control over ciphertext trafﬁc features.
and it cannot be changed without a major overhaul of
the system and subsequent re-deployment. The non-
programmable systems can be further subdivided into
three categories based on their strategy: randomization,
mimicry, or tunneling. A programmable system, how-
ever, allows for a variety of dynamically applied strate-
gies, both randomization and mimicry-based, without the
need for changes to the underlying software. Figure 2
presents a comparison of the available systems in each
category, and we discuss each of them below. For those
interested in a broader survey of circumvention and ob-
fuscation technologies, we suggest recent work by Khat-
tak et al. that discusses the space in greater detail [23].