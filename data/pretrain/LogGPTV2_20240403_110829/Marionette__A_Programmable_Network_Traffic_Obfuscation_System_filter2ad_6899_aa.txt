# Marionette: A Programmable Network Traffic Obfuscation System

## Authors
- Kevin P. Dyer, Portland State University
- Scott E. Coull, RedJack LLC
- Thomas Shrimpton, Portland State University

## Publication Information
- **Conference**: 24th USENIX Security Symposium
- **Date**: August 12â€“14, 2015
- **Location**: Washington, D.C.
- **Proceedings ISBN**: 978-1-939133-11-3
- **Access**: Open access to the Proceedings of the 24th USENIX Security Symposium is sponsored by USENIX
- **Link**: [https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/dyer](https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/dyer)

## Abstract
Recent developments in network traffic obfuscation systems have focused on aiding censorship circumvention by masking encrypted traffic. In this paper, we introduce Marionette, a programmable network traffic obfuscation system that can simultaneously control various aspects of encrypted traffic, including ciphertext formats, stateful protocol semantics, and statistical properties. Marionette's behavior is directed by a powerful type of probabilistic automata and specified using a user-friendly domain-specific language (DSL). This allows users to easily adapt their obfuscation strategies to meet the unique needs of their network environments. Marionette can emulate many existing obfuscation systems and enables developers to explore a wide range of protocols and traffic features. We evaluate Marionette through case studies inspired by real-world and research literature, including passive network monitors, stateful proxies, and active probing. Our experiments show that Marionette provides exceptional flexibility and control over traffic features, with throughput up to 6.7 Mbps when generating RFC-compliant cover traffic.

## 1. Introduction
Several countries view encrypted network services as a threat to information control and security policies. For example, China and Iran are known for blocking services like Tor, while the United Kingdom has expressed interest in blocking VPNs and anonymity systems. These policies are enforced by analyzing traffic at both the network layer (e.g., TCP/IP headers) and the application layer, where specific packet payload features act as signatures for the transported protocol.

To counter application-layer filtering, several systems have been proposed to obfuscate packet payloads and hide the true protocol being used. These methods can be categorized into three types:
1. **Encryption-based randomization** (e.g., obfs4, ScrambleSuit, Dust)
2. **Tunneling using existing software artifacts** (e.g., FreeWave, Facet)
3. **Encryption combined with lightweight ciphertext formatting** (e.g., FTE, StegoTorus)

Despite their effectiveness, these systems have limitations. Randomization methods fail under protocol whitelisting, tunneling systems are tied to specific protocols that may not be allowed, and protocol-mimicry systems struggle with stateful proxies and message alterations. Moreover, these systems require significant re-engineering to change their target protocols or traffic features, which is impractical in censored networks.

### The Marionette System
To address these shortcomings, we developed Marionette, a network traffic obfuscation system that allows users to explore a rich design space without redeploying new code. Marionette uses a powerful type of probabilistic automaton, inspired by probabilistic input/output automata, to enforce the sequencing of ciphertext message types. Each transition between states performs actions such as encrypting and formatting messages, sampling from distributions, or spawning other automata for hierarchical composition. This provides comprehensive control over mimicked protocol behaviors and traffic statistics. Additionally, Marionette includes error states to handle active attacks, such as censor-initiated probing.

At the level of individual ciphertext formats, Marionette introduces template grammars, which are probabilistic context-free grammars (CFGs) that describe templates for ciphertexts. These templates contain placeholder tokens for embedding information, and using CFGs offers benefits such as compact representation, direct translation from RFCs, and use in receiver-side parsing tasks.

Marionette is specified using a user-friendly DSL, enabling rapid development and testing of robust obfuscation strategies. To encourage adoption, Marionette is available as free and open-source software [1].

### Case Studies
We demonstrate Marionette's capabilities through case studies inspired by recent research and real-world censor capabilities. For example, Marionette can implement passive-mode FTP by controlling interdependent TCP connections and mimic HTTP with enforced protocol semantics, successfully traversing HTTP proxies. Our studies show that Marionette can implement a range of application-layer protocols, from HTTP to POP3, while maintaining performance up to 6.7 Mbps with fully RFC-compliant protocol semantics.

### Security Considerations
While our case studies are motivated by well-known adversaries, we avoid a formal security analysis due to the complexity of the system and the evolving nature of adversary capabilities. However, we believe our case studies represent a diverse sample of real-world adversaries, and the flexibility of Marionette allows it to adapt to new threats. Future work will focus on better understanding the limits of the system and the adversaries it may face.

## 2. Related Work
Previous work in obfuscation and mimicry of application-layer protocols, as well as network traffic generation, has primarily focused on non-programmable systems. These systems adopt a fixed strategy at design-time and cannot be changed without significant re-engineering. Non-programmable systems can be categorized into randomization, mimicry, and tunneling. In contrast, programmable systems like Marionette allow for dynamic application of various strategies without changing the underlying software. Figure 2 compares the features of different obfuscation systems, highlighting Marionette's advantages in terms of flexibility and high throughput.

For a broader survey of circumvention and obfuscation technologies, we recommend recent work by Khattak et al. [23].

[1] [https://github.com/kpdyer/marionette/](https://github.com/kpdyer/marionette/)