# Anomalous Taint Detection
**Authors:**
- Lorenzo Cavallaro<sup>1</sup>
- R. Sekar<sup>2</sup>

<sup>1</sup>Department of Computer Science, University of California at Santa Barbara, USA  
<sup>2</sup>Department of Computer Science, Stony Brook University, USA

**Contact:**
- PI: EMAIL
- PI: EMAIL

## Abstract
We introduce a novel approach called *anomalous taint detection* that integrates fine-grained taint tracking with learning-based anomaly detection. This method leverages anomaly detection to identify behavioral deviations indicative of exploited vulnerabilities, while fine-grained taint tracking focuses the anomaly detector on aspects of program behavior that an attacker can control. Our preliminary results suggest that this combination improves detection accuracy and enhances resistance to mimicry attacks.

## 1. Introduction
Various methods have been developed to mitigate software vulnerabilities. Among these, learning-based anomaly detection has gained popularity due to its ability to detect new and unknown attacks. However, while anomalies often indicate attacks, not all unusual behaviors are malicious. Consequently, anomaly detection techniques frequently suffer from high false positive rates, limiting their practical application.

Recently, fine-grained taint-tracking has emerged as a robust defense against software vulnerabilities. This technique excels in identifying the extent of an attacker's control over data values within a vulnerable program's memory space. It enables the creation of security policies that can reliably detect the misuse of "tainted" data in critical operations, effectively countering a wide range of attacks, including code injection, command injection, and cross-site scripting. The primary drawback is the need for manual policy development, which can be challenging for certain types of attacks, such as non-control data attacks and directory traversals.

In this paper, we propose a taint-based approach that eliminates the need for manual policies by integrating an anomaly detector. By focusing the anomaly detector on tainted data and events, our method can significantly reduce false positives caused by benign anomalies, i.e., deviations not under the attacker's control.

## 2. Anomalous Taint Detection
Our approach builds upon a system-call-based program behavior model, similar to the one used by Forrest et al. (IEEE Security and Privacy '96). We enhance this model with information about system call arguments and taint. As in Bhatkar et al. (IEEE Security and Privacy '06), our technique leverages the control-flow context provided by system-call models.

The technique learns information about system calls (or other relevant functions) and their arguments at multiple levels of granularity. At a coarse level, it determines whether an event's argument is tainted. At a finer level, it identifies whether specific structure fields or array elements are tainted. Additionally, we generate application-specific taint-enhanced profiles, such as expected maximum and minimum argument lengths, structural inference with character class mapping, and longest common prefix models.

### Example: Format-String Vulnerability in WU-FTPD
To illustrate, consider a format-string vulnerability in the WU-FTPD program. The program temporarily elevates its privileges and then uses the following code snippet to revert to a normal user:

```c
FILE *getdatasock(...) {
    ...
    seteuid(0);
    setsockopt(...);
    ...
    seteuid(pw->pw_uid);
    ...
}
```

Chen et al. demonstrated a non-control data attack that overwrites `pw->pw_uid` with zero, preventing the server from reverting to normal user privileges. Our approach can detect this attack in two ways:
1. The attack taints the argument to `seteuid`, whereas it remains untainted under normal operation.
2. The attack causes deviations in the structure of a (tainted) argument to a `printf`-like function.

While the second method is specific to the vulnerability, the first method can detect corruptions caused by other vulnerabilities as well.

### Resistance to Mimicry Attacks
By incorporating taint information, our approach is more resilient to mimicry attacks compared to purely learning-based anomaly detection. For example, if a limited number of authenticated users were observed during training, a mimicry attack could impersonate any of these users. Our method, however, reduces this risk by focusing on tainted data.

### Future Work
We have successfully detected other non-control data attacks described by Chen et al. using models that analyze the structure and lengths of tainted arguments. Our future work aims to:
1. Extend the technique to handle other attack types requiring application-specific taint policies, such as directory traversals.
2. Derive taint policies from taint-enhanced behavioral models to prevent, rather than just detect, exploits.

For more details, see CAVALLARO AND SEKAR, “Anomalous Taint Detection,” Tech Report SECLAB08-06, available at http://seclab.cs.sunysb.edu/pubs.html.

---

**Acknowledgments:**
This research was supported in part by an NSF grant CNS-0627687 and was conducted while the first author was a PhD student from Università degli Studi di Milano, Italy, visiting Stony Brook University.

**References:**
- XU, BHATKAR, and SEKAR, “Taint-enhanced Policy Enforcement: a Practical Approach to Defeat a Wide Range of Attacks,” USENIX Security Symposium, 2006.
- Chen et al., “Non-Control-Data Attacks Are Realistic Threats,” USENIX Security Symposium, 2005.
- Mutz et al., “Anomalous System Call Detection,” ACM TISSEC, 2006.