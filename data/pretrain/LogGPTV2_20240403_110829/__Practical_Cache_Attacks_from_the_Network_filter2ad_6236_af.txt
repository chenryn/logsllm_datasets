34
(NSDI 14), 2014, pp. 401–414.
[35] X. Lu, M. W. U. Rahman, N. Islam, D. Shankar, and
D. K. Panda, “Accelerating spark with RDMA for big
data processing: Early experiences,” in 2014 IEEE 22nd
Annual Symposium on High-Performance Interconnects.
IEEE, 2014, pp. 9–16.
[36] A. Bhat, N. S. Islam, X. Lu, M. Wasi-ur Rahman,
D. Shankar, and D. K. D. Panda, “A Plugin-Based
Approach to Exploit RDMA Beneﬁts for Apache and
Enterprise HDFS,” in BPOE. Springer, 2015, pp. 119–
132.
[37] M. Abadi, P. Barham, J. Chen, Z. Chen, A. Davis,
J. Dean, M. Devin, S. Ghemawat, G. Irving, M. Isard
et al., “Tensorﬂow: A system for large-scale machine
learning,” in 12th USENIX Symposium on Operating
Systems Design and Implementation (OSDI 16), 2016,
pp. 265–283.
[38] Mellanox,
“Accelerate Microsoft
Server
http://www.mellanox.com/related-
[Accessed:
SQL
Performance,”
docs/solutions/SB_MFSFT_SQL.PDF,
24.03.2019].
[39] ——, “Mellanox Mitigates Meltdown Mess, Stops
Spectre Security Slowdown,” http://www.mellanox.com/
blog/2018/02/spectre-meltdown-restore-security-
performance-patches-mellanox-ofﬂoad-technologies/,
[Accessed: 24.03.2019].
[40] M. Lipp, M. Schwarz, D. Gruss, T. Prescher, W. Haas,
A. Fogh, J. Horn, S. Mangard, P. Kocher, D. Genkin
et al., “Meltdown: Reading kernel memory from user
space,” in 27th USENIX Security Symposium (USENIX
Security 18), 2018, pp. 973–990.
[41] C. Maurice, N. Le Scouarnec, C. Neumann, O. Heen,
and A. Francillon, “Reverse Engineering Intel Last-Level
Cache Complex Addressing Using Performance Coun-
ters,” in International Workshop on Recent Advances in
Intrusion Detection. Springer, 2015, pp. 48–65.
[42] P. Vila, B. Köpf, and J. F. Morales, “Theory and practice
of ﬁnding eviction sets,” in IEEE Symposium on Security
and Privacy, 2019.
[43] H. Bal, D. Epema, C. de Laat, R. van Nieuwpoort,
J. Romein, F. Seinstra, C. Snoek, and H. Wijshoff, “A
Medium-Scale Distributed System for Computer Science
Research: Infrastructure for the Long Term,” Computer,
vol. 49, no. 5, pp. 54–63, 2016.
[44] C. Maurice, C. Neumann, O. Heen, and A. Francillon,
“C5: Cross-Cores Cache Covert Channel,” in Interna-
tional Conference on Detection of Intrusions and Mal-
ware, and Vulnerability Assessment. Springer, 2015, pp.
46–64.
[45] C. Maurice, M. Weber, M. Schwarz, L. Giner, D. Gruss,
C. A. Boano, S. Mangard, and K. Römer, “Hello from
the Other Side: SSH over Robust Cache Covert Channels
in the Cloud.” in NDSS, vol. 17, 2017, pp. 8–11.
[46] J. Jose, H. Subramoni, M. Luo, M. Zhang, J. Huang,
M. Wasi-ur Rahman, N. S. Islam, X. Ouyang, H. Wang,
S. Sur et al., “Memcached design on high performance
rdma capable interconnects,” in 2011 International Con-
ference on Parallel Processing.
IEEE, 2011, pp. 743–
752.
[47] D. X. Song, D. A. Wagner, and X. Tian, “Timing
Analysis of Keystrokes and Timing Attacks on SSH,”
in USENIX Security Symposium, vol. 2001, 2001.
[48] K. Zhang and X. Wang, “Peeping Tom in the Neighbor-
hood: Keystroke Eavesdropping on Multi-User Systems,”
in USENIX Security Symposium, vol. 20, 2009, p. 23.
[49] K. S. Killourhy and R. A. Maxion, “Free vs. Tran-
scribed Text for Keystroke-Dynamics Evaluations,” in
Proceedings of the 2012 Workshop on Learning from
Authoritative Security Experiment Results. ACM, 2012,
pp. 1–8.
[50] W. Chen and W. Chang, “Applying hidden Markov
models to keystroke pattern analysis for password veri-
ﬁcation,” in Proceedings of the 2004 IEEE International
Conference on Information Reuse and Integration, 2004.
IRI 2004.
IEEE, 2004, pp. 467–474.
[51] V. Shanmugapriya and G. Padmavathi, “Keystroke dy-
namics authentication using neural network approaches,”
in International Conference on Advances in Information
and Communication Technologies. Springer, 2010, pp.
686–690.
[52] S. Z. S. Idrus, E. Cherrier, C. Rosenberger, and P. Bours,
“Soft Biometrics for Keystroke Dynamics: Proﬁling Indi-
viduals while typing Passwords,” Computers & Security,
vol. 45, pp. 147–155, 2014.
[53] P. Kobojek and K. Saeed, “Application of recurrent neural
networks for user veriﬁcation based on keystroke dy-
namics,” Journal of telecommunications and information
technology, no. 3, pp. 80–90, 2016.
[54] Redis, “Redis,” https://redis.io/, [Accessed: 24.03.2019].
[55] S. Van Schaik, K. Razavi, B. Gras, H. Bos, and C. Giuf-
frida, “RevAnC: A framework for reverse engineering
hardware page table caches,” in Proceedings of the 10th
European Workshop on Systems Security. ACM, 2017,
p. 3.
[56] F. Liu, Q. Ge, Y. Yarom, F. Mckeen, C. Rozas, G. Heiser,
and R. B. Lee, “Catalyst: Defeating last-level cache
side channel attacks in cloud computing,” in High Per-
formance Computer Architecture (HPCA), 2016 IEEE
International Symposium on.
IEEE, 2016, pp. 406–418.
[57] Z. Zhou, M. K. Reiter, and Y. Zhang, “A software
approach to defeating side channels in last-level caches,”
in Proceedings of the 2016 ACM SIGSAC Conference on
Computer and Communications Security. ACM, 2016,
pp. 871–882.
[58] D. Gruss, J. Lettner, F. Schuster, O. Ohrimenko, I. Haller,
and M. Costa, “Strong and efﬁcient cache side-channel
protection using hardware transactional memory,” in 26th
USENIX Security Symposium (USENIX Security 17),
2017, pp. 217–233.
[59] H. Raj, R. Nathuji, A. Singh, and P. England, “Resource
management for isolation enhanced cloud services,” in
Proceedings of the 2009 ACM workshop on Cloud com-
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:37:59 UTC from IEEE Xplore.  Restrictions apply. 
35
Recognition Using WiFi Signals,” in Proceedings of
the 21st Annual International Conference on Mobile
Computing and Networking. ACM, 2015, pp. 90–102.
[73] W. Diao, X. Liu, Z. Li, and K. Zhang, “No Pardon for the
Interruption: New Inference Attacks on Android Through
Interrupt Timing Analysis,” in 2016 IEEE Symposium on
IEEE, 2016, pp. 414–432.
Security and Privacy (SP).
[74] D. Wang, A. Neupane, Z. Qian, N. B. Abu-Ghazaleh,
S. V. Krishnamurthy, E. J. Colbert, and P. Yu, “Unveiling
your keystrokes: A Cache-based Side-channel Attack on
Graphics Libraries.” in NDSS, 2019.
[75] M. A. Hogye, C. T. Hughes, J. M. Sarfaty, and J. D. Wolf,
“Analysis of the Feasibility of Keystroke Timing Attacks
Over SSH Connections,” Research Project at University
of Virginia, 2001.
APPENDIX A
FORWARD SELECTION ALGORITHM
Algorithm 1 Forward Selection
//Let M be a pool of page-aligned addresses
while No Eviction Detected do
//Select n addresses from address pool M
S ← selectFromAddressPoolM(n)
//Write S and do a timed access on all elements of S
rdmaWrite(S)
for i in S.size() do
latencies[i] ← rdmaTimedRead(S[i])
//Take address with highest time as potential x
x ← argmax(latencies)
//Cache hit time for x
rdmaWrite(x)
t1 ← rdmaTimedRead(x)
//Potential read from main memory for x
rdmaWrite(S \ x)
t2 ← rdmaTimedRead(x)
//Determine if x got evicted from S \ x
if t2 − t1 > threshold then
S ← S \ x
break
n ← n + 1
else
puting security. ACM, 2009, pp. 77–84.
[60] R. Sprabery, K. Evchenko, A. Raj, R. B. Bobba,
S. Mohan, and R. H. Campbell, “A Novel Schedul-
ing Framework Leveraging Hardware Cache Partitioning
for Cache-Side-Channel Elimination in Clouds,” arXiv
preprint arXiv:1708.09538, 2017.
[61] M. T. Aga, Z. B. Aweke, and T. Austin, “When good
protections go bad: Exploiting anti-DoS measures to
accelerate Rowhammer attacks,” in 2017 IEEE Interna-
tional Symposium on Hardware Oriented Security and
Trust (HOST).
IEEE, 2017, pp. 8–13.
[62] D. Cock, Q. Ge, T. Murray, and G. Heiser, “The Last
Mile: An Empirical Study of Timing Channels on seL4,”
in Proceedings of the 2014 ACM SIGSAC Conference on
Computer and Communications Security. ACM, 2014,
pp. 570–581.
[63] Y. Kim, R. Daly, J. Kim, C. Fallin, J. H. Lee, D. Lee,
C. Wilkerson, K. Lai, and O. Mutlu, “Flipping bits
in memory without accessing them: An experimental
study of DRAM disturbance errors,” in ACM SIGARCH
Computer Architecture News, vol. 42, no. 3.
IEEE Press,
2014, pp. 361–372.
[64] M. Seaborn and T. Dullien, “Exploiting the DRAM
rowhammer bug to gain kernel privileges,” Black Hat,
vol. 15, 2015.
[65] E. Bosman, K. Razavi, H. Bos, and C. Giuffrida, “Dedup
est machina: Memory deduplication as an advanced ex-
ploitation vector,” in 2016 IEEE symposium on security
and privacy (SP).
IEEE, 2016, pp. 987–1004.
[66] K. Razavi, B. Gras, E. Bosman, B. Preneel, C. Giuffrida,
and H. Bos, “Flip feng shui: Hammering a needle in
the software stack,” in 25th USENIX Security Symposium
(USENIX Security 16), 2016, pp. 1–18.
[67] V. Van Der Veen, Y. Fratantonio, M. Lindorfer, D. Gruss,
C. Maurice, G. Vigna, H. Bos, K. Razavi, and C. Giuf-
frida, “Drammer: Deterministic rowhammer attacks on
mobile platforms,” in Proceedings of
the 2016 ACM
SIGSAC conference on computer and communications
security. ACM, 2016, pp. 1675–1689.
[68] A. Tatar, R. K. Konoth, E. Athanasopoulos, C. Giuffrida,
H. Bos, and K. Razavi, “Throwhammer: Rowhammer
attacks over the network and defenses,” in 2018 USENIX
Annual Technical Conference (USENIX ATC 18), 2018,
pp. 213–226.
[69] M. Lipp, M. T. Aga, M. Schwarz, D. Gruss, C. Mau-
rice, L. Raab, and L. Lamster, “Nethammer: Induc-
ing rowhammer faults through network requests,” arXiv
preprint arXiv:1805.04956, 2018.
[70] D. Foo Kune and Y. Kim, “Timing attacks on pin input
devices,” in Proceedings of the 17th ACM conference on
Computer and communications security. ACM, 2010,
pp. 678–680.
[71] S. Jana and V. Shmatikov, “Memento: Learning Secrets
from Process Footprints,” in 2012 IEEE Symposium on
Security and Privacy.
IEEE, 2012, pp. 143–157.
[72] K. Ali, A. X. Liu, W. Wang, and M. Shahzad, “Keystroke
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:37:59 UTC from IEEE Xplore.  Restrictions apply. 
36
APPENDIX B
BACKWARD SELECTION ALGORITHM
APPENDIX C
ONLINE TRACKING ALGORITHM
Algorithm 2 Backward Selection
Algorithm 3 Online Tracking
//Let S be the set of address from the forward selection
which evict address x
for k do
//Select n addresses to be potentially removed from S
n ← min(n, S.size()/2)
Srm ← selectFromS(n)
//Let pos be the start position of the ring buffer pointer
while Measurement do
//Eviction sets around pos with window size w
es ← getEvictionSets(pos, w)
Prime(es)
while True do
//Cache hit time for x
rdmaWrite(x)
t1 ← rdmaTimedRead(x)
//Potential read from main memory for x
rdmaWrite(S \ Srm)
t2 ← rdmaTimedRead(x)
//Determine if x got evicted from S \ Srm
if t2 − t1 > threshold then
S ← S \ Srm
n ← n + 10
n ← n − 1
else
//Send network packet if many unsynchronized
//measurements or if synchronization point failed
if unsynced > 2 || send == 1 then
SendPacketToServer()
injected = 1
latencies ← Probe(es)
if latencies[pos] > threshold || injected == 1 then
break
if latencies[pos] > threshold || injected == 1 then
//Reached Synchronization state
pos ← ExtractNextPos(latencies)
unsynced ← 0
send ← 0
syncStatus ← 1
else
if injected == 1 then
//Missed Synchronization State
pos ← RecoverPos(latencies)
send ← 1
syncStatus ← 2
else
//Unsynchronized Measurement
unsynced ← unsynced + 1
send ← 0
syncStatus ← 0
//Export current measurements
Save(latencies, syncStatus)
APPENDIX D
FULL EVALUATION RESULTS
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:37:59 UTC from IEEE Xplore.  Restrictions apply. 
37
TABLE III: Full end-to-end evaluations of the word classiﬁcation for the keyboard data, the network data from tcpdump and from the cache
measurement.
Keyboard
tcpdump
DDIO
Subject
s019
s021
s027
s033
s039
s040
s043
s046
s062
s063
s067
s070
s071
s085
s087
s089
s091
s092
s093
s094
Average
Traces
Training
Set
420
298
314
509
363
319
364
474
344
369
309
313
616
386
366
377
315
301
352