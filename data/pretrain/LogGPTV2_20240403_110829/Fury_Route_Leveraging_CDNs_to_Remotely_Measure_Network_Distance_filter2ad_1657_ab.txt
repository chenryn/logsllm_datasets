91
of ECS [12]. Fury Route builds on this notion, and constructs chains of near-by
responses to estimate distance.
Fury Route begins with an origin host O and a destination host D. It fur-
ther has a set of providers P = {p1, . . . , pk}, where each pi is represented by a
hostname which belongs to a provider. While, as we saw in Sect. 2, a provider
may span multiple hostnames, we take provider to mean an entity which can
be queried by a look-up for a speciﬁc name. We therefore treat hostnames and
providers as interchangeable.
To begin construction of a chain, Fury Route issues an ECS query to each
provider in P , using D’s address as the client subnet. It then takes the responses
to each of these queries and pools them into a target set, which we denote T =
{t1, . . . , tn}, n ≥ k.2 These hosts represent CDN replicas which are likely close
to the destination D, and therefore are indicators of its location. We use such
a target set since the destination D may not be itself a CDN replica, but an
arbitrary host. The target set therefore gives us a set of CDN replicas for which
the algorithm is explicitly searching.
Next, Fury Route issues a set of ECS requests to the provider set P , using
the origin host O’s IP address as the client subnet. It then records the set of
returned CDN replicas, noting their scope netmask values and the corresponding
provider. It then considers each of such obtained CDN replicas, and selects one
using the voting process described below. The voting procedure encourages the
selection of hosts, i.e., CDN replicas, which are closer to the target set T , and
therefore closer to D. Fury Route then issues a new set of requests, using the
previously selected CDN replica as its client subnet. This process is repeated
until at least one provider returns a host which is in the target set T , or it
exceeds a ﬁxed number of scans. If it successfully encounters a replica from T ,
the resulting sequence of hosts is then taken as the chain of replicas connecting
O and D.
Figure 2 shows a visual representation of these steps. Part (a) shows Fury
Route’s view after establishing the target set T (shown as shaded triangles within
the dashed circle), and issuing the ﬁrst set of ECS queries to the providers on
behalf of the origin host. Non-shaded triangles show hosts returned as a result
of those queries. Next, part (b) shows when it then selects one of these hosts,
and issues another set of queries, oﬀering a further set of CDN replicas. Finally,
in part (c), the chain is complete, as the ﬁnal round of queries to the providers
returned results which land within the target set.
Voting. Fury Route employs a voting mechanism to select the next CDN
replica host which is likely to provide forward-progress towards the destination
host D. The mechanism is built on the heuristic that the best choice for the
next hop is the one which brings the next hop closest to the target. To this end,
we use the following mechanism: when considering a set of potential candidate
CDN replicas, C = {c1, . . . , cl}, Fury Route attempts to determine which will
have the greatest overlap in ECS-enabled responses with the target set T .
2 The target set can contain more CDN replicas than the number of providers, because
a provider may return more than a single replica for a host.
92
M. Flores et al.
In order to measure this overlap, Fury Route performs the following operation
for each candidate CDN replica ci. It issues an ECS query to the ﬁrst provider,
p1, with ci as the client subnet. We denote the set of responses as R1,i. Next, it
issues ECS queries to p1 using each of the target CDN replicas in T . We combine
all of the target set responses into a single collection which we denote R1,T .
Using these sets we will determine which candidate is given the closest match-
ing set of replicas to the target set. Formally, we measure the overlap seen by p1
for candidate ci, denoted B1,i, as:
B1,i = R1,i ∩ R1,T .
If B1,i is non-empty, we say that this candidate has overlap with the target set as
seen by provider p1, and provider p1 grants a single vote for ci. If B1,i is empty,
no vote is granted.
This process is repeated for each provider in P , and the votes are summed for
the candidate. The entire process is further repeated for each potential candidate
in C. It is important to note that a single provider may vote for many candidates.
Fury Route then selects the candidate with the most votes, as it features the
most overlap with the target set across providers, making it likely to oﬀer the
most forward progress, choosing randomly in the case of ties.
Fig. 3. An example of the voting mechanism. Providers p1 and p2 have overlap with
the target set for c1, but only p1 for c2. Therefore the system selects c1.
Figure 3 presents an example of this process. In this example, we have 2
potential candidates, and 3 providers. We ﬁrst query each of the providers and
store the responses. Next, each CDN replica host is scanned for each provider,
also noting the results. In the example, providers p1 and p2 see overlap with c1,
while only p2 sees overlap with c2. Therefore Fury Route selects c1.
In the event that Fury Route ﬁnds itself with a set of candidates which have
lower vote totals than the previous round, Fury Route “backtracks”, abandoning
the current chain branch, and returning to the candidate with the previous
highest number of votes. If there is no such candidate, it then settles for the
candidate with the next highest number of votes. In this way, it is able to pursue
a path with the highest indication of progress, while avoiding moving further
away from the target.
Chain Length. Once a chain has been constructed between the source and
destination hosts as outlined above, the length is used as a relative compari-
son tool against other chains for estimating network distances. To compute the
Fury Route: Leveraging CDNs to Remotely Measure Network Distance
93
length, we use the response scope netmask ﬁeld. While this is largely intended
for caching purposes, Fury Route makes use of the value to estimate the quality
of a particular response, which we take to represent the accuracy of the chosen
replica. If a chain includes a link between two CDN replicas in a chain, A and B,
and s is the scope netmask of the response which included B, we take the cost
of traversing such a link to be cost = max(8, 32 − s). The higher the precision
of the response, the smaller the cost of the corresponding link. In rare cases, we
obtain a scope larger than the ECS speciﬁcation’s maximum length recommen-
dation of 24. These responses are inconsistent and do not occur reliably across
our providers. We “downgrade” such responses to 24, setting the minimal cost in
the system to 8. Finally, responses which oﬀer no scope information are ignored.
4 Implementation
Queries are issued to Google DNS with a modiﬁed version of the dnspython
DNS library [4] to issue our queries. As in [28], we are able to achieve up to 50
queries per second, depending on the providers. All of our queries are sent with
a full/32 client subnet. If a chain fails to reach the target set after a threshold of
candidate selection rounds, Fury Route abandons the current chain and starts
over, attempting to build the chain from the destination to the origin.
Fury Route builds a response graph to minimize the number of queries it per-
forms. The response graph stores all observed replicas as nodes. Edges are used
to encode the response scope from the perspective of diﬀerent replicas. Nodes
are further annotated with the set of providers which have been queried with
that replica as a client subnet. Nodes within the same/24 subnet are combined,
to avoid repeating queries with nearly identical client addresses.
4.1 Provider Selection
We divide our set of providers into two categories. The ﬁrst, voting-only
providers, are excluded from candidate selection in the chain building proce-
dure as they lack suﬃcient accuracy. Nonetheless, they are very useful in voting
due to their coarse-grained nature. The second, are called candidate providers,
which participate in both voting and chain construction. Based on our ﬁndings in
Sect. 2, we take Alibaba, Edgecast, and ADNXS to be voting-only providers, due
to their broader scope. The remaining CDNs, are taken as candidate providers.
“Unmapped” Replica Blacklisting. In examining pathological cases, we
observe that they arise from variation in CDN policy or behavior in either ECS
response scope or replica selection policy. A common signature for a “poor”
CDN decision is that in most cases, in absence of an informed response, CDNs
practice directing such queries to “unmapped” CDN replicas. Such CDN replicas
are typically recommended when a request is conducted from an address with
no suitable mapping. The “unmapped” CDN replicas are easy to detect in the
context of Fury Route, since the number of such CDN responses typically out-
weigh a regular CDN replica by up to an order of magnitude. We demonstrate
94
M. Flores et al.
that avoiding chains through such “unmapped” replicas enables our system to
retain high path completion rate while avoiding extremely erronous results.
5 Evaluation
In this section we evaluate Fury Rotue with two diﬀerent platforms that pro-
vide ground truth round-trip time measurements. First, we use 8,964 globally-
distributed nodes from a publicly available RIPE Atlas platform [25]. Second,
we consider a full mesh of chains provided by a set of 60 globally-distributed
Planet Lab nodes. To establish a ground truth network distance for each pair,
we perform a ping measurement (consisting of three pings) immediately prior
to generating the Fury Route chain, granting an up-to-date view of the network
delay between origin and destination.
Fig. 4. The fraction of destinations for
which Fury Route was able to complete
a chain in diﬀerent scenarios.
Fig. 5. The ranked ordering perfor-
mance of Fury Route and iPlane on
RIPE Atlas for completed chains.
5.1 Completion Rate
First, we consider the completion rate of Fury Route chains in each platform.
For each pair of tested nodes, we attempt to construct a Fury Route chain. Each
chain is given 25 candidate selection rounds before it is marked incomplete.
Larger values provided no detectable increase in completion rate, so 25 provided
a balance between exploratory freedom and run time.
Figure 4 shows the fraction of destinations for each origin server for which
Fury Route was able to construct a chain as a CCDF over the set of origins. First,
we focus on “raw” results, marked as “RIPE” and “Planet Lab.” We see that in
the median case for Planet Lab, 90% of chains are successfully completed, and
in over 40% of cases, all chains were completed successfully. The results are even
better for the RIPE data set, where 100% of chains are successfully completed in
the median case. We found that pairs unable to complete their chains featured
destinations with potentially sparse CDN deployments from our providers.
The other two curves, “RIPE ﬁltered” and “PL ﬁltered,” show the chain
completion rates for the ﬁltered scenarios, i.e., when “unmapped” replica black-
listing, explained in Sect. 4.1 above, was applied. Such ﬁltering decreases the
completion rate, such that it becomes almost identical for the two platforms.
Here, most of the “bad” paths, particularly in the RIPE data set, which com-
pleted but were of poor quality, are ﬁltered in this step. Nonetheless, Fig. 4 shows
that the median Fury Route chain completion rate remains above 80%.
Fury Route: Leveraging CDNs to Remotely Measure Network Distance
95
5.2 Comparison to iPlane
Here, we compare Fury Route’s performance to the performance of an
infrastructure-dependent system, iPlane [19] using RIPE Atlas. iPlane is a sys-
tem for analyzing and predicting Internet path performance. It uses a distributed
infrastructure to compile traceroutes from various vantage points in order to pre-
dict network paths and path attributes [19]. We show, given a ﬁxed origin point,
how well Fury Route and iPlane are able to correctly determine which of a pair
of destinations is closest and which is further away. For each pair, we check if the
comparison of the corresponding Fury Route chain lengths and iPlane’s latency