Lemma 37 shows that ¬Awinstrace and Lemma 38 shows that ¬Awinsoverspend. Hence ¬Awins.
For all of the following lemmas, we are in the setting of Lemma 36, i.e. we assume that ¬error
happens and L is consistent.
Lemma 37. ¬Awinstrace holds (i.e. DB contains no (upk, dslink) with VrfyDs(ispp, dslink, upk) 6= 1
or upk /∈ U)
Proof. First, note that any output (upk, dslink) of Link by deﬁnition fulﬁlls the VrfyDs check. The
“upk ∈ U” part remains to be shown. Assume that at some point, (upk, dslink) was associated with
dsid in DB. Lemma 46 states there exists a node ~A = (usk, dsid, dsrnd,·) in G with usk = dslink.
Lemma 42 implies that ~A is reachable from some Issue node. Let upk0 be the public key added
to U by the Issue oracle call. Let ~A0 = (usk0, dsid0, dsrnd0, 0) be the successor to that Issue node.
Since ~A is reachable from ~A0, we have usk0 = usk (no update function ever changes the user secret).
Because the Issue update function checks ComputePKenc(pp, usk0) != upk0, and upk = ComputePK(pp,
dslink) = ComputePK(pp, usk) by deﬁnition of DBsync we have upk = upk0. So it holds that upk was
added to U.
Lemma 38. ¬Awinsoverspend holds (i.e. vspent − vinvalid ≤ vearned).
of G, we ﬁrst deﬁne vspent(H) =P
Proof. Assume that DBsync(s) has been queried for all spend handles s. For any subgraph H
P
(i,Credit)∈H ki, and vinvalid(H) =
(i,Credit)∈H;i invalid ki. Note that these are consistent with vspent, vearned, vinvalid in the incentive
(i,Deduct)∈H ki, vearned(H) =P
system soundness game, i.e. vspent = vspent(G), vearned = vearned(G), and vinvalid = vinvalid(G).
Every weakly connected component of G contains a simple path starting at an Issue node that
contains all valid Deduct nodes within that component and no invalid Deduct nodes (Lemma 39).
We obtain the subgraph G0 of G as the (disjoint) union of these paths (one for each weakly connected
component). As we have removed all invalid Deduct nodes but preserved all valid ones, we have
vspent(G0) = vspent(G) − vinvalid(G). Because every weakly connected component G00 in G0 is a path
starting at an Issue node, we have that vspent(G00) ≤ vearned(G00) (Lemma 47). Because this holds
for every weakly connected component G00 of G0, we have vspent(G0) ≤ vearned(G0). Also, obviously
vearned(G0) ≤ vearned(G) by the subgraph property.
Figure 8: Example explanation graph G as in Lemma 36 (but with only one user).
The bold graph elements form the “canonical” path (Lemma 39) containing all valid deduct
operations; all other nodes are removed in Lemma 38, ensuring vspent(G0) = vspent(G) − vinvalid(G)
and vearned(G0) ≤ vearned(G).
39
0:Issue(usk0,dsid0,dsrnd0,0)1:Credit(usk0,dsid0,dsrnd0,v1)4:Credit(usk0,dsid0,dsrnd0,v4)2:Deduct(usk0,dsid2,dsrnd2,v2)(usk0,dsid3,dsrnd3,v3)3:Deduct(invalidinDB)Overall, vspent(G) − vinvalid(G) = vspent(G0) ≤ vearned(G0) ≤ vearned(G)
Lemma 39. Every weakly connected component of G contains a simple path containing all valid
Deduct nodes within that component and no invalid Deduct nodes.
Proof. Let G0 be a weakly connected component in G. G0 contains a single Issue node by Lemma 42.
Let j be the numerically largest index such that j ∈ G0 is a valid Deduct node (if no such j exists,
the lemma’s statement holds trivially). Because of Lemma 42, there exists a path P from the Issue
node to j. We show that P contains all valid Deduct nodes and no invalid nodes.
Assume for contradiction that P contains an invalid node. Then j would be invalid as well
(Lemma 43), as it is reachable from that invalid node. Hence P does not contain invalid nodes.
Assume for contradiction that some Deduct node j0 is valid but not on P. j0 is reachable from
the Issue node (Lemma 42) via some path P 0. P and P 0 start at the same node but j is not on P 0
(because j0 < j by maximal choice of j and operation indices are monotonously increasing on any
path (Lemma 40). Because j0 is not on P and j is not on P 0, neither path is a preﬁx of the other,
so there exists a node that diﬀers on the two paths. Let ~A be the last node on P and P 0 before
the ﬁrst node that diﬀers (note that this must be an attribute vector node as the operation nodes
have out-degree 1 by deﬁnition). Let i be the ﬁrst Deduct node after ~A on P and let i0 be the
ﬁrst Deduct node after ~A on P 0. Because i and i0 are the ﬁrst Deduct operation on each path (i.e.
only Credit operations happen between ~A and i or i0), we have that dsid i = dsid i0 (where dsid ‘ is
the dsid that was revealed during the ‘th query). From the deﬁnition of DBsync, it is easy to see
that i or i0 must have been marked invalid (at most one transaction per dsid is valid). Since i is on
P, it is valid. Hence i0 must be invalid. Because j0 is reachable from i0 (via P 0), j0 must be invalid
(Lemma 43)
Lemma 40. For any path in G, the indices of Issue and Deduct nodes on the path are strictly
monotonously increasing.
Proof. Let P be a path and let j and i be Deduct nodes on the path in that order (in the following,
j could also be an Issue node) so that there are no other Deduct nodes between them on the path.
Assume for contradiction that i ≤ j. Let ψi, ~Ai = (uski, dsid i, dsrnd i, vi), αi be the “input” values
for query i (as deﬁned by L). Because L is consistent, there is some Issue or Deduct node i0 < i
that creates attribute vectors with dsid i. However, there is a path from j to i that involves only
Credit and attribute vector nodes. This implies that the dsid in j’s successor node is dsid i. This
means that j 6= i0 are associated with the same dsid, contradicting ¬error (cf. Lemma 36).
Lemma 41. G is acyclic.
Proof. Assume there exists a cycle C. C cannot contain Issue nodes as they have in-degree 0.
Because of Lemma 40, C cannot not contain any Deduct nodes. This means that the only oracle
nodes on the cycle are Credit nodes. In turn, this implies that all ~A = (usk, dsid, dsrnd, v) nodes
on the cycle share the same usk, dsid, dsrnd (as those are not changed by Credit). Credit strictly
increases v, but on a cycle we would have to see a Credit node that decreases v or leaves it unchanged.
Hence there are also no Credit on the cycle. Overall, there are only attribute vector nodes on the
cycle, but there are no edges between attribute vector nodes, contradicting the existence of the
cycle.
Lemma 42. Every weakly connected component of G contains exactly one Issue node. Furthermore,
every node in G is reachable from (exactly one) Issue node.
Proof. Let v be a node in G. Because G is acyclic (Lemma 41), the process of walking edges
backwards from v eventually stops. It cannot stop at an attribute vector node (since every attribute
40
vector node has in-degree at least 1 by consistency of L) and it cannot stop at a Credit or Deduct
node (as those have in-degree 1), hence it must stop at an Issue node. So v can be reached from
some Issue node.
Assume for contradiction that some weakly connected component contains two Issue nodes v0, v1.
By choice of our update functions, all attribute vector nodes ~A = (usk, dsid, dsrnd, v) reachable
from a Issue node have the same usk (because no update ever changes usk). Furthermore, there
are no two Issue nodes with the same usk (since Issue(upk) can only be called once per upk and
ComputePK is injective). As a consequence, every node is reachable from exactly one Issue node.
If we partition the attribute vector nodes in the weakly connected component into those that
are reachable from v0 and those that are reachable from v1, there must be some path (of the form
~A0 → i → ~A1) from some ~A0 reachable from v0 to some ~A1 reachable from v1 or vice versa (otherwise
the graph cannot be weakly connected). However, then ~A1 (or ~A0) is reachable from v0 and from v1,
contradicting our previous result. This implies that every weakly connected component contains at
most one Issue node. Furthermore, every weakly connected component contains at least one node,
which is reachable from some Issue, meaning that it also contains at least one Issue node.
Lemma 43. If DBsync(s) has been queried for all spend handles s, then every Deduct node that
is reachable from an invalid Deduct node is invalid.
Proof. Let i, j be Deduct nodes such that i is invalid and j is reachable from i with no further
Deduct nodes on the path P between i and j. If we can show that j is invalid, transitivity implies
the statement for all j0 reachable from i.
Because P does not contain (intermediate) Deduct nodes, all attribute vector nodes on P have
the same usk, dsid, dsrnd. dsid is input to j’s oracle query. Let dstagi = (c, γ, ctrace) be the double-
spend tag output by Deduct in query i. Because of the update function used in query i, it holds
that Decryptenc(pp, usk, ctrace) = dsid.
We distinguish two cases: ti is marked invalid before tj was added to DB or vice versa. Assume ti
was marked invalid before tj was added to the graph. When ti was marked invalid, the successor
node dsid is added to DB (Lemma 44). When tj is added to the database afterwards, its input dsid
is already in the database, hence tj is immediately marked invalid. Assume that ti was marked
invalid after tj was added to DB. When tj is added, dsid and an edge (dsid, tj) is added to DB.
Afterwards, at some point ti is marked invalid. During this process, the edge (ti, dsid) is added to
DB (Lemma 44) and because (dsid, tj) is in the graph, tj is marked invalid.
Hence in both cases, tj is marked invalid at some point.
Lemma 44. Let ti be some transaction node in DB and let i be the corresponding Deduct node
in G with successor ~A∗ = (usk∗, dsid∗, dsrnd∗,·). After ti is marked invalid, the successor of ti in
DB is dsid∗.
Proof. Since ti is marked invalid, ti’s predecessor dsid in DB is correctly associated with some
(upk, dslink) (Lemma 46). In particular, i’s predecessor ~A = (usk, dsid, dsrnd, v) in G must have
dslink = usk. Let ~A∗ = (usk∗, dsid∗, dsrnd∗, v∗) be i’s successor. Let dstag = (c, γ, ctrace) be the
dstag associated with i’s oracle query. Because of consistency of L, we have Decryptenc(pp, usk,
ctrace) = dsid∗. When ti is marked invalid, DBsync computes dsid∗ = Trace(pp, dslink, dstag) =
Decryptenc(pp, usk, ctrace) = dsid∗ and makes dsid∗ the successor to ti.
Lemma 45. For any two attribute vectors ~A0 = (usk0, dsid0, dsrnd0, v0) and ~A1 = (usk1, dsid1,
dsrnd1, v1) in G, it holds that if dsid0 = dsid1, then usk0 = usk1 and dsrnd0 = dsrnd1.
Proof. Because of ¬error, there is a unique Issue or Deduct node i whose successor ~A∗ = (usk∗,
dsid∗, dsrnd∗, v0) contains dsid∗ = dsid0 = dsid1. Because i is unique in this regard, both ~A0 and ~A1
are reachable from i on paths P0, P1 that contains only Credit and attribute vector nodes. Since
41
Credit does not change usk or dsrnd, we get that usk0 = usk1 = usk∗ and dsrnd0 = dsrnd1 =
dsrnd∗.
Lemma 46. We say that a node dsid in DB is “correctly associated” with (upk, dslink) if there
exists (usk0, dsid0, dsrnd0,·) in G with dsid0 and dslink = usk0 and for all (usk0, dsid0, dsrnd0,·) in G
with dsid0, we have that dslink = usk0. All nodes dsid in DB that have some value associated with
them are correctly associated.
Proof. Let dsid be some node in DB that has been associated with some value (upk, dslink). We
prove the claim essentially via induction: We ﬁrst show that if (upk, dslink) was computed when
adding a second transaction to dsid to DB, then it is correctly associated. We then show that if dsid
has been correctly associated with (upk, dslink), then copying the value to some dsid∗ in the “when
ti is marked invalid” trigger correctly associated (upk, dslink) to dsid∗. In each case, it suﬃces to
show that dslink = usk for some (usk, dsid, dsrnd,·) in G, as Lemma 45 then implies that this holds
for all attribute vector nodes with dsid.
To show the ﬁrst statement, let ti be a transaction node in DB with predecessor dsid and assume tj
with the same predecessor is added to DB by DBsync. Let dstagi, dstagj be their dstags. Let i, j be the
Deduct nodes in G corresponding to ti and tj, respectively3. Let ~Ai = (uski, dsid i, dsrnd i, vi) and
~Aj = (uskj, dsid j, dsrnd j, vj) be the predecessors of i and j in G, respectively. It holds that dsid i =
dsid j = dsid by consistency of L (since equality with dsid is checked by the update function). Because
dsid i = dsid j, we get uski = uskj and dsrnd i = dsrnd j (Lemma 45). Because of consistency of L,
necessarily dstagi = (ci = uski·γi +dsrnd i, γi, ctrace) and dstagj = (cj = uskj ·γj +dsrnd j, γj, ctrace)
(as enforced by the update function). Since uski = uskj and dsrnd i = dsrnd j and γi 6= γj (as implied
by ¬error), we get dslink = (ci − cj)/(γi − γj) = uski. Hence dslink = uski for our attribute vector
(uski, dsid i, dsrnd i, vi) in G.
To show the second statement, let ti be a transaction that is marked invalid. Let dsid be its
predecessor (which is by assumption correctly associated with (upk, dslink)). Let dstag = (c, γ, ctrace)
be the associated dstag for ti. Let dsid∗ = Trace(ispp, dslink, dstag) = Decryptenc(pp, dslink, ctrace)
be ti’s successor. We show that dsid∗ is correctly associated with (upk∗, dslink∗). Let (usk, dsid,
dsrnd,·) be the predecessor of i in G. By assumption it dsid is correctly associated, hence usk = dslink.
Let (usk0, dsid0, dsrnd0,·) be the successor of i in G. By consistency of L, Decryptenc(pp, usk =
dslink, ctrace) = dsid0 as guaranteed by the update function ψ. Hence dsid0 = dsid∗. Because
usk = usk0 = dslink, we have that (usk, dsid∗, dsrnd0,·) in G contains dsid∗ and dslink = usk,
implying that dsid∗ is correctly associated with (upk, dslink).
Lemma 47. On every path P in G starting at some Issue node, it holds that vspent(P) ≤ vearned(P).
Proof. Let (usk, dsid, dsrnd, v) be the successor (in G) of the last Deduct node on P. By design
j∈P is Deduct node kj =
vearned(P) − vspent(P). (the inequality is usually an equality, assuming that there is no Credit
operation where adding k to the current v exceeds vmax = p − 1. If the latter happens, the integers
will wrap around and result in the smaller v0 = v + k mod p) Also by design of the update functions,
it holds that v ≥ 0. Hence vearned(P) − vspent(P) ≥ 0.
of our update functions, it is easy to see that v ≤P
i∈P is Credit node ki −P
F.4 Incentive System Framing Resistance
Theorem 16. Let A be a ppt adversary against framing resistance of our incentive system. Without
loss of generality, we assume that A always outputs some actual user’s handle u in the challenge
3This is a slight abuse of notation as the index i of ti does not necessarily correspond to node i in G, which is
associated with the ith oracle query.
42
phase. Let k be a (polynomial in λ) upper bound for the number of Keygen calls that A may make.
We construct B against CPA-security of Πenc.
• B gets pp, pk∗ from its challenger. It ﬁnishes the incentive system setup by simulating the
UACS setup cpp ← SSetup(pp) and computing pkcmt as usual. It hands ispp = (pp, cpp, pkcmt)
to A.
• B randomly chooses an index j ≤ k. For the jth Keygen query, B responds with upk = pk∗
and some handle u∗.
• Any queries involving u∗ are run honestly by B except that it uses the UACS simulators to
simulate the Receive and Update protocols without usk.
• Eventually, A enters the challenge phase and outputs some dslink and a user handle u.
• If u 6= u∗, B aborts.
• If upk∗ 6= ComputePKenc(pp, dslink), B aborts.
• Otherwise, B uses dslink as the secret key to pk∗ to break its CPA challenge with probability
1.
The view of A in the framing resistance game is simulated perfectly and independently of j. We have
that Pr[B wins the CPA game] = Pr[Expfram-res(Π,A, λ) = 1] · Pr[u = u∗]. By assumption, Πenc is
CPA-secure. It holds that Pr[u = u∗] is non-negligible, hence Pr[Expfram-res(Π,A, λ) = 1] must be
negligible.
43