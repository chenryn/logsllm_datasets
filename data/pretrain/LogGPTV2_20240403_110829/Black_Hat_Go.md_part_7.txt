concurrency. WaitGroup is a struct type and can be created like
so:
var wg sync.WaitGroup
Once you’ve created WaitGroup, you can call a few methods
on the struct. The first is Add(int), which increases an internal
counter by the number provided. Next, Done() decrements the
counter by one. Finally, Wait() blocks the execution of the
goroutine in which it’s called, and will not allow further
execution until the internal counter reaches zero. You can
combine these calls to ensure that the main goroutine waits for
all connections to finish.
Synchronized Scanning Using WaitGroup
Listing 2-5 shows the same port-scanning program with a
different implementation of the goroutines.
package main
import (
"fmt"
"net"
"sync"
)
func main() {
❶ var wg sync.WaitGroup
for i := 1; i  ")
return os.Stdin.Read(b)❸
}
// FooWriter defines an io.Writer to write to Stdout.
❹ type FooWriter struct{}
// Write writes data to Stdout.
❺ func (fooWriter *FooWriter) Write(b []byte) (int, error) {
fmt.Print("out> ")
return os.Stdout.Write(b)❻
}
func main() {
// Instantiate reader and writer.
var (
reader FooReader
writer FooWriter
)
// Create buffer to hold input/output.
❼ input := make([]byte, 4096)
// Use reader to read input.
s, err := reader.Read(input)❽
if err != nil {
log.Fatalln("Unable to read data")
}
fmt.Printf("Read %d bytes from stdin\n", s)
// Use writer to write output.
s, err = writer.Write(input)❾
if err != nil {
log.Fatalln("Unable to write data")
}
fmt.Printf("Wrote %d bytes to stdout\n", s)
}
Listing 2-9: A reader and writer demonstration (/ch-2/io-example/main.go)
The code defines two custom types: FooReader ❶ and
FooWriter ❹. On each type, you define a concrete
implementation of the Read([]byte) function ❷ for FooReader and
the Write([]byte) function ❺ for FooWriter. In this case, both
functions are reading from stdin ❸ and writing to stdout ❻.
Note that the Read functions on both FooReader and os.Stdin
return the length of data and any errors. The data itself is
copied into the byte slice passed to the function. This is
consistent with the Reader interface prototype definition
provided earlier in this section. The main() function creates that
slice (named input) ❼ and then proceeds to use it in calls to
FooReader.Read([]byte) ❽ and FooReader.Write([]byte) ❾.
A sample run of the program produces the following:
$ go run main.go
in > hello world!!!
Read 15 bytes from stdin
out> hello world!!!
Wrote 4096 bytes to stdout
Copying data from a Reader to a Writer is a fairly common
pattern—so much so that Go’s io package contains a Copy()
function that can be used to simplify the main() function. The
function prototype is as follows:
func Copy(dst io.Writer, src io.Reader) (written int64, error)
This convenience function allows you to achieve the same
programmatic behavior as before, replacing your main()
function with the code in Listing 2-10.
func main() {
var (
reader FooReader
writer FooWriter
)
if _, err := io.Copy(&writer, &reader)❶; err != nil {
log.Fatalln("Unable to read/write data")
}
}
Listing 2-10: Using io.Copy (/ch-2/copy-example/main.go)
Notice that the explicit calls to reader.Read([]byte) and
writer.Write([]byte) have been replaced with a single call to
io.Copy(writer, reader) ❶. Under the covers, io.Copy(writer, reader) calls
the Read([]byte) function on the provided reader, triggering the
FooReader to read from stdin. Subsequently, io.Copy(writer, reader)
calls the Write([]byte) function on the provided writer, resulting
in a call to your FooWriter, which writes the data to stdout.
Essentially, io.Copy(writer, reader) handles the sequential read-then-
write process without all the petty details.
This introductory section is by no means a comprehensive
look at Go’s I/O and interfaces. Many convenience functions
and custom readers and writers exist as part of the standard Go
packages. In most cases, Go’s standard packages contain all
the basic implementations to achieve the most common tasks.
In the next section, let’s explore how to apply these
fundamentals to TCP communications, eventually using the
power vested in you to develop real-life, usable tools.
Creating the Echo Server
As is customary for most languages, you’ll start by building an
echo server to learn how to read and write data to and from a
socket. To do this, you’ll use net.Conn, Go’s stream-oriented
network connection, which we introduced when you built a
port scanner. Based on Go’s documentation for the data type,
Conn implements the Read([]byte) and Write([]byte) functions as
defined for the Reader and Writer interfaces. Therefore, Conn is
both a Reader and a Writer (yes, this is possible). This makes
sense logically, as TCP connections are bidirectional and can
be used to send (write) or receive (read) data.
After creating an instance of Conn, you’ll be able to send
and receive data over a TCP socket. However, a TCP server
can’t simply manufacture a connection; a client must establish
a connection. In Go, you can use net.Listen(network, address string) to