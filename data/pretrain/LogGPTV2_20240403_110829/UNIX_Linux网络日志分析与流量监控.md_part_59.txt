再用下面的命令解密数据：
-r：表示加密用户的标识名，表示想要加密的文件名。
#gpg --detach-sign --armor
#gpg-d message-to-gerhard.asc
<>p-ad#
#gpg--export--armor>Public-key.asx
：杨芳（安全顾问）
“神秘”的加密指纹
---
## Page 340
密和存储：
的，SHA1输出是160位的，MD5比SHA1快，SHA1比MD5强度高。
手”，以便确认对方身份。这一过程从她把自己的GPG公钥发给开发组领导开始。
专家在通信时有一套完整的规范协议，任何工作开始之前必须先进行一次复杂的密码“握
们交换了GPG公开密钥的指纹信息，以便以后通过网络识别每个人的真实身份。这些安全
这样高水平的学术会议。很快她就收拾好行囊准备参加会议。不久，她来到参会现场。
编程，外人看似复杂的编程工作，在她眼里变得非常有趣。
欢和代码打交道。她为了谋生而写代码，为了生活更有质量，不得不拼命工作。由于她酷爱
在会议室大家交流心得，展示着各自带来的研究成果。当会议结束后，大家辞行时，他
某日，杨芳接到ACNS（国际上著名的网络安全组织）参会邀请，这将是她第二次参加
随后，她收到了应答，这是经过加密和签名的ASCII 码块，它可以用下面的命令行来解
这里需了解MD5和 SHA1的区别。MD5与 SHA1 都是Hash算法，MD5 输出是128位
注意：
这时，杨芳输入口令，然后程序继续执行。
以下是她操作过程中的一段指令：
$gpg
Smail -s *My pgp key, signed" PI:EMAIL "
gpg:pleaseseehttp://www.gnupg.org/faq.htmlformore information
Warning:using insecure memory!
gpg:Warning:using insecurememory!
*加密过程，其中-armor是将输出内容经ASCII 封装*/
$gpg -armor --export PI:EMAIL | gpg -clearsign > yangfang.gpg.asc
---BEGINPGPSIGNATURE.
.-ENDPGPPUBLICKEYBLOCK..
Youneedapassphrasetounlockthesecretkeyfor
-decryptblender.asc
第12章数据加密与解密案例317
*这是解密过程*/
FTOOA2V
---
## Page 341
的公开密钥是不可能的，于是她决定继续CVS的检查，然后又检查了源代码目录树。
318UNIX/Linux网络日志分析与流量监控
目录下载下来。
8C1
为什么会验证失败？杨芳心想一定是由于公钥被改变了，所以导致无法登录，提示
杨芳迅速检查了加密和签名的电子邮件，确认服务器是否正常。产生一个具有相同指纹
从结果显示看，杨芳感觉有些不对劲。她决定马上停止进程，并且把服务器上的源代码
Hostkeyverificationfailed.
RSA host key for consion.org has changed and you have requested strict checking.
Offending key in/home/yangfang/.ssh/known_hosts:4
Add correct host key in /home/yangfang/ssh/known_hosts to get rid of this message,
Itis alsopossiblethat theRSA host keyhasjustbeen changed.
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
$cvs checkinmemorial
Are you sure you want to continue connecting (yes/no)?
[marchday@search]$ export CVSROOT=:ext:PI:EMAIL:/opt/cvs
CVSROOT=:ext:PI:EMAIL:/opt/cvslmnl.pk
gpg: encrypted with 2048-bit ELG-E key, ID 9454F587, created 2010-07-22
You need a passphrase to unlock the secret key for
Please contact your system administrator.
Someone couldbe eavesdropping on you right now(man-in-the-middle attack)！
ITISPOSSIBLETHATSOMEONEISDOINGSOMETHINGNASTY!
RSAkeyfingerprint isb6:a7:ac:46:70:52:cb:75:52:7a:1c:d8:72:5d:f8:36.
[marchday@search]$cvscheckoutmemorial
[marchday@search]$ export CVS_RSH=ssh
RSAkeyfingerprint isb5:a7:ac:46:70:52:cb:75:52:7a:1c:d8:72:5d:f8:36.
Password=
CVS_RSH=ssh
ProjectName=memorial
UserName=yangfang
project:
Belowyouwill findtheinformationrequiredforyou tobeginworkonthe
Content-Transfer-Encoding:quoted-printable
Content-Disposition:inline
WARNING:REMOTEHOSTIDENTIFICATIONHASCHANGED
A
E
出IAHE
00
会主
4899
@
---
## Page 342
构中安全的漏洞出在哪里，她画出如图12-2所示的网络结构图。
了大量发送到广播地址255.255.255.255的数据和 DHCP request 请求信息。为了说明网络结
“中间人”（Man-In-The-Middl，MITM）攻击。在本实例中杨芳利用抓包工具在网络中捕获
志并没有显示任何异常，就连在SSH服务日志中也没有发现一点线索。
对商业版的SSH的主机密钥重新产生了双重格式的指纹。
围的世界。她决定再检查Solaris服务器，看看它是否也报告了类似的攻击信息。
来到她那台OpenBSD 前面，聚精会神地盯着显示器上的SSH提示符的输出信息，忘记了周
连接的主机相关的行，或者直接删除known_hosts这个文件。不过为了搞清事情真相，杨芳
KEY验证失败，通常情况下，遇到这种问题可以编辑/.ssh/known_hosts 文件，并删除与想要
，而实际上，攻击者会进入它们，分配一个地址，把自己作为局部路由器而发起大量的
这时杨芳感到有点困惑，她立刻想起了安装在Solaris计算机上的OpenSSH服务。她又
现在，杨芳断定这肯定是个错误的密钥，可让她感到奇怪的是Solaris系统中的HIDS日
138.19.80
1024xikef-vamoc-lolaz-bylaf-gurom-birym-cusyn-kokof-tyniv-korub-taxux consion.org.10.0.0.80
1024 xuhbv-gelcd-fygit-didyg-dasog-myloc-tolin-rody1-dyken-mogab-soxoxclod.net.10.2.1.5
$ssh-keygen -B -f known_hosts
Youcan get apublickeysfingerprintbyrunning%ssh-keygenFpublickypubonthekeyfl.
xikef-vamoc-lolez-bylaf-gurom-birym-cusyn-kokof-tyniv-korub-taxuxx
Keyfingerprint:
Hostkeynotfoundfromdatabase.
PI:EMAIL
图12-2网络结构图
Solaris
Route
第12章数据加密与解密案例319
Linux Server
启用了DNS和DHCP服务
HIDS
HUB
新击真人回中
出文人间电
---
## Page 343
常情况下建立起一个双向数据通信信道。
间的通信来解释，如图12-3 所示。比如两个人是客户机和服务器。他们想在两台计算机正
中间人攻击
新的手段，而不是简单地利用操作系统的漏洞。中间人攻击就是其中的一种方法。
受到攻击时一般会很警觉，就像本案例中的杨芳一样。要攻破他们的计算机系统需要一些创
研究网络安全的人经常会成为攻击目标，不过有经验的黑客和程序员在他们电脑或网络
案情解码
疑难问题
子邮件（加密后的邮件是以“.asc”结尾）。
320UNIX/Linux网络日志分析与流量监控
最后的检查使她确信没有任何错误，她马上给blender用户发了一封完全加密的测试电
中间人攻击这种技术用于窃听经过密码加密的数据流。这种攻击可以通过分析两个人之
2
很快，她便收到了系统响应：
$mail-sPlease answer quickly”PI:EMAIL<msg.gpg.asc
如何防止非法DHCP服务器？
如果你遇到了这种情况，你将怎样来证实你的网络是否受到了攻击？
杨芳的网络出现了什么问题？
Content-Transfer-Encoding:quoted-printable
Content-Type:text/plain;charset=us-ascii
Yangfang, everything is the same on this end, we are still using the following
Content-Disposition:inline
gPg: encrypted with ELG-Ekey,ID 7B4B8A92
2048-bitELG-Ekey,ID9454F587,created2010-07-22（mainkeyID30C4BB2G)
$gpg --decrypt blender.asc
客户机
图12-3MITM原理
*这是解密过程*/
中间人链接
攻击者
服务器
801.881
50
---
## Page 344
钥来加密信息，这个密钥对每一个人都是公开的。另一个称为私有密钥，是需要绝对保密的
上产生一组密钥，其中一个称为公开密钥。其他希望和服务器通信的人用服务器上的公开密
客户机需要通过一定的方式来识别通信方的身份。这就是公开密钥密码产生的原因。服务器
使得TLS/SSL协议不再安全，由于中间人攻击使得SSH不再安全。为了防范中间人攻击，
协商后，需要在 SSH支持的密钥协商算法列表中新增一种算法，即Diffie-Hellman-Group14
是使用上面那组大素数组的256倍，这样安全性大大提高。使用2048位的大素数组进行密钥
GPG密码对），这个大素数按照十六进制表示为：
法本身的分析、随机密钥产生的随机性不够等因素，使得这种算法现在并不是很安全。
率小得多，可以说这种算法的安全性已经很高了。但是随着计算机性能的提高，加之一些对算
到其随机生成的私钥，进而去计算双方的共享私钥。这一概率比两颗子弹在空中直接相撞的概
交换，使用的大素数长度为256位，按照十六进制表示为：货题
要采用增大素数模数的方法。例如，实现中按照Diffe-Hellman-Group1-Shal算法进行密钥
依赖于对大素数的猜测，素数越大，密钥交换的安全性也就越高。所以在实际应用中我们主
协议的安全依赖于密钥交换的安全。而密钥交换的安全性是基于计算离散对数难度，也就是
SSH协议是通过密钥交换算法，安全地在通信的双方之间交互加密密钥。可以说SSH
的困难性，也就是说攻击者必须穷举密钥空间中所有的值来猜测真正的密钥。出签
Diffie-Hellman是一种公钥密码协议，它的安全性来自抽象代数有限域中离散对数计算
会话会被劫持而遭到中间人攻击。资
基于如此难以破解的算法，网络安全是否可以高枕无忧了？由于出现了浏览器漏洞劫持
现在对这种密钥交换算法进行改进，将大素数由原来的256位增加到2048位（例如
）如果不对传输的信息进行适当的加密，那么攻击者随时会监听客户机和服务器，他们的
使用这组大素数组进行密钥交换，通过双方交换的公钥反方向获取私钥的难度在理论上
其素根为 2。
FFFFFFFFFFFFFFFF
F1746C08 CA18217C32905E462E36CE3B E39E772C 180E8603 9B2783A2EC07A28F B5C55DF0
6D51C245E485B576 625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5
攻击者平均需要计算2256次（等于6.4×1076），才能从密钥交换双方交换的公钥中还原得
FD24CF5F83655D23
AE9F24117C4B1FE649286651CCE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8
其素根是2。
7C4BIFE649286651CCE65381FFFFFFFFFFFFFFFF
E485B576625E7EC6F44C42E9A637ED6BOBFF5CB6F406B7EDEE386BFB5A899FA5AE9F2411
FFFFFFFFFFFFFFFFC9DFDAA22168C234C4C6628B80AC1CD129024E088A67CC74
DCA3AD961C62F356208552BB9ED52907 7096966D 670C354E4ABC9804
第12章数据加密与解密案例321
T
---
## Page 345
击，IETF 制定了一种DNS 安全协议（DNSSEC，DNS Security Extensions）。开发DNSSEC
所有进来的流量重定向到自己，然后作为中间人转发给正确的主机。为有效地防范这种攻
请求，并伪造一个DNS响应，在响应中返回自已的IP地址。这样，这个恶意的节点可以把
完成的。发起请求的客户端会收到一个应答，包含所访问的域名对应的IP地址。
也可以手工指定。在UNIX 系统中，手动配置通常是通过对/etc/resolv.conf 文件进行修改来
要向本地的DNS服务器发起一个域名服务请求。DNS服务器可以通过DHCP服务来分配，
映射。例如，一个用户通过给计算机发送命令来建立一条与 sina.com之间的安全通道，一般
然使用加密的方式同样可以防范。另外用Arpwatch这个工具也可以预警。
入ARP列表中。然后，从这台主机发送到目的IP地址的包将被全部转发到攻击计算机上，
地址的包都用这个MAC地址来封装。
一数据（IP地址和MAC地址的对应关系）被放到请求主机的ARP表中，以后发往这个IP
址。被指定该IP地址的主机返回一个ARP包，含有网卡的MAC地址和指定的IP地址。这
路由信息，节点发出一个ARP的广播包询问哪台计算机的以太网卡被指定了所访问的IP 地
首先检查一下路由列表，看看这个包应该发给网关还是直接发给本地局域网段。基于查到的
接口，这样我们就可以获得IP地址和以太网地址。当一个节点想要产生一个数据包时，它
MITM通常采用的手段
实际的网络结构也许并不相同。
所有这些技术都要求控制受害者眼中的网络拓扑结构，也就是说，受害者看到的网络结构与
密钥的破坏通常不屑一顾，这些人在使用 SSH 时很容易成为中间人的攻击目标。
在连接服务器时通常会默认地接受主机的公开密钥。一般情况下，合法的系统管理员对主机
攻击。
性。因为其他人没有服务器的私有密钥，所以无法伪造服务器的签名，这样就防止了中间人
有密钥签名。客户机用经过验证的服务器的证书中服务器的公钥来验证服务器签名的合法
息计算散列值得到的，这些信息包括由Diffiee-Hellman协议计算出来的数据，并用用户的私
的签名，比如Verisign。在密钥交换过程中，服务器创建了一个密钥，这个密钥是用一些信
十当需要认证时，客户机首先需要得到一份服务器的公钥证书，该证书经过可信的第三方
一个密钥不可能推断出另外一个密钥，这是公钥密码的安全性所在。回中院而
密钥，服务器用它来解密所有自己的公开密钥加密的信息。这两个密钥有些神奇，知道其中
322UNIX/Linux网络日志分析与流量监控
攻击者可以像ARP欺骗一样伪造DNS请求的响应。恶意的用户可以监听网段内的DNS
攻击的计算机可以伪造ARP应答。发出请求的客户主机将把这个伪造的MAC地址写
中间人攻击可以通过多种形式来实现，但现实中的中间人攻击通常使用以下几种技术。
域名服务（DomainNameService，DNS）提供了容易记忆的网络名称和IP地址之间的
防治方法：在企业网中必须捆绑MAC+IP 来限制欺骗，以及采用认证方式的连接。当
刚才我们只是通过一个假设的例子来说明如何防止中间人攻击。但在实际操作中，人们
地址解析协议（Address ResolutionProtocol，ARP）提供了链路层协议和网络层协议的
1.ARP欺骗
---
## Page 346
她的IP在68.81.0.0/16网段内，所以她希望能够从中得到一些信息去分析网络。
息是多么有用呀！不过，她还是决定运行traceroute 命令看看她的网络结构是否出现过异常。
息、DHCP服务器和ISP提供的服务器名。她埋怨自己为什么这么粗心，特别是现在，这些信
为了解答这几个疑点我们再回到案例中来。杨芳从来没有记录过网关处的网络统计信
分析攻击过程