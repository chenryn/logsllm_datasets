### 4.4 Request Handling and Authorization
When a service provider receives a request, it first verifies the requester's role by checking the membership list. If the requester's role is valid and the authorization policies permit, the service provider grants the necessary permissions to use the service. 

To further enhance security, if the service provider has sufficient device capabilities, it may re-verify the user's role assignment. This additional step helps protect against malicious or compromised coordinators who might have admitted unauthorized users into the community. In the event of a detected violation, other participants are notified, and if necessary, the community can be reconstructed (see Section 4.6).

### 4.5 Leaving the Community
There are two scenarios for a user leaving the community: 
1. The user notifies the coordinator of their intention to leave.
2. The user's unexpected absence is detected by other participants.

If a user is temporarily absent (e.g., moves out of range) but their absence is not detected, no changes are required. 

In the first scenario, the coordinator simply removes the user from the membership list and resends the updated list to all participants. In the second scenario, other participants detect the user's absence, typically through a communication failure. When a communication failure occurs, the user will retry up to \( \tau \) times. If the failure is confirmed, the user sends a signed "FAILURE NOTIFICATION" to the coordinator.

Upon receiving this notification, the coordinator checks if the user (uleave) is a member of the community and attempts to reach them up to \( \tau \) times. If uleave remains unreachable, the coordinator removes them from the membership list, ensures that the community establishment constraints are still satisfied, and broadcasts the revised membership list. If the constraints are not met, the community can be dissolved.

### 4.6 Coordinator Unavailability
The coordinator can also become unexpectedly disconnected. Once the disconnection is confirmed, an "UNAVAILABILITY" message is broadcast to all participants. The community enters a static state until a new coordinator is elected. During this static state, no new users can join, and participants ignore membership updates.

Upon receiving the "UNAVAILABILITY" message, each participant checks if they have the resources and capability to serve as the new coordinator. Among the eligible participants, one is arbitrarily selected, such as the participant with the lowest node ID, which indicates the oldest participant among the eligible ones. The selected user (ulowid) then broadcasts a "RECONSTRUCTION" message, and other participants re-join the community by sending "REJOIN" to ulowid. Ulowid then checks all URA policies and community constraints. If these are satisfied, ulowid re-establishes the community. If no participant can take over the role of coordinator, the community remains in a static state until it is dissolved.

### 5. Architecture
Figure 1 illustrates the overall architecture of the proposed framework, which consists of five components: profile management, membership management, protocol management, policy enforcement, and an event service. The framework runs on every user's device.

#### 5.1 Profile Management
This component maintains the user's credentials, such as public-key certificates, private-key stores, and attribute certificates. Users can manage their credentials and device settings through the community management interface. Additionally, this component maintains the user's preferences for automatically joining specific communities.

#### 5.2 Membership Management
This component provides the community management interface at the application level, allowing applications to initiate the establishment of new communities, search for existing communities, and join specific communities. It also allows users to register the services they provide to other participants. The membership management component is responsible for verifying the authenticity of doctrines and enforcing them by extracting and distributing policy instances to various enforcement components. An optional coordination service can be dynamically loaded based on the user's device capability to enable the device to act as the coordinator. In this case, the membership management component also manages the community's membership, including the enforcement of URA policies and community constraints.

#### 5.3 Protocol Management
This component executes various security protocols for the establishment, evolution, and management of communities, as discussed in Section 4.

#### 5.4 Policy Enforcement
This component enforces both authorization and obligation policies. Access requests are intercepted and checked against the policies to determine if they are permitted. Obligation policies are enforced by subscribing to specified events and executing the actions defined in the policies when these events occur.

#### 5.5 Event Service
The event service collects and aggregates events and forwards them to the policy enforcement component, triggering the execution of obligation policies. System events are forwarded to the protocol management component to perform appropriate protocols. Events related to the discovery of new communities are forwarded to the membership management component.

### 5.1 Emulations and Preliminary Results
We designed and implemented an emulation of a mobile environment to investigate the robustness of the protocols against node mobility and to determine the impact of various pause times on the proposed protocol. The architecture was implemented as a Java prototype and tested using the MobiEmu [34] emulation tool. MobiEmu was chosen because it can emulate the mobility encountered in wireless networks and supports ad-hoc routing.

A testbed was set up to emulate the establishment and evolution of an ad-hoc community. For simplicity, all machines were configured to act as coordinators and were loaded with attribute certificates. A doctrine corresponding to the scenario described in Section 3 was also created. Mobility scenarios were generated using setdest version two, found in ns-2 [7]. Table 1 summarizes the parameters used in our emulations.

When running the emulation over a period, the community could end up in either a static or established state. We are interested in the probability that a community will end up in a static state, meaning the community can no longer be reconstructed. This occurs when participants are out of range and cannot receive reconstruction messages even if a coordinator has been identified. Conversely, a community remains in an established state if it has been reconstructed or never needed reconstruction. From Figure 2, we observe that the probability of a community ending up in a static state is between 0.1 and 0.2, indicating that the proposed protocol is relatively robust to device mobility. Most of the time, the community remains in the established state. Specifically, the probability that a community remains established without being reconstructed for various pause times ranges from 0.3 to 0.7.

### 6. Related Work
**Law Governed Interaction (LGI) [23]:** LGI proposes a framework where interactions between distributed agents are subject to communication rules (the law) specified using a simple Prolog notation. The underlying assumption is that all interactions must occur through trusted agents present at each site to enforce the law. Our framework does not rely on trusted agents but requires participants to monitor each other's behavior.

**Zhou and Haas [35]:** They proposed the use of threshold cryptography to address the single point of failure problem in ad-hoc networks. Multiple nodes can act as CAs, and each network has a certificate signing key divided into \( n \) shares and distributed to all CA nodes.