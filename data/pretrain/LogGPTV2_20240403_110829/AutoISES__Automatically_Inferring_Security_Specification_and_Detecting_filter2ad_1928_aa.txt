# AutoISES: Automatically Inferring Security Specifications and Detecting Violations

**Authors:**
- Lin Tan
- Xiaolan Zhang
- Xiao Ma
- Weiwei Xiong
- Yuanyuan Zhou

**Affiliations:**
- University of Illinois, Urbana-Champaign
- IBM T.J. Watson Research Center
- Pattern Insight Inc.

**Contact:**
- Xiaolan Zhang: [EMAIL]
- Lin Tan: [EMAIL]
- Xiao Ma, Weiwei Xiong, Yuanyuan Zhou: {xiaoma2, wxiong2, yyzhou}@cs.uiuc.edu

## Abstract

The critical importance of software security cannot be overstated. In the past, researchers have applied program analysis techniques to automatically detect security vulnerabilities and verify security properties. However, these techniques have had limited success in practice because they require manually provided code-level security specifications. Manually writing and generating these specifications is tedious and error-prone, and such specifications are often absent in production software.

In this paper, we propose a novel method and tool called AutoISES, which automatically infers security specifications by statically analyzing source code and then uses these specifications to detect security violations. Our experiments with the Linux kernel and Xen demonstrate the effectiveness of this approach. AutoISES generated 84 security specifications and detected 8 vulnerabilities, 7 of which have been confirmed by the corresponding developers.

## 1. Introduction

### 1.1 Motivation

The critical importance of software security has driven the design and implementation of secure software systems. For example, Security-Enhanced Linux (SELinux) [23, 28], developed as a research prototype to incorporate Mandatory Access Control (MAC) into the Linux kernel, imposes constraints on its existing Discretionary Access Control (DAC) for stronger security. SELinux has since been adopted by the mainline Linux 2.6 series and incorporated into many commercial distributions, including Redhat, Fedora, and Ubuntu. Recently, Xen also adopted a similar MAC security architecture to enable system-wide security policies [7].

A core part of such access control systems is a set of security check functions, which determine whether a subject (e.g., a process) can perform a certain operation (e.g., read or write) on an object (e.g., a file, an inode, or a socket). These protected operations are called security-sensitive operations. For example, the `security_file_permission(file, ...)` function in Linux checks if the current process is authorized to read or write a file, while the `security_file_mmap(file, ...)` function checks if the current process is authorized to map a file into memory.

To ensure that only authorized users can read or write a file, developers must add the `security_file_permission()` function before each file read/write operation. Similarly, developers must add `security_file_mmap()` before mapping a file to memory to ensure that only authorized users can perform the memory-mapping operation.

### 1.2 Challenges

A major challenge in supporting such a secure architecture is ensuring that all sensitive operations on all objects are consistently protected by the appropriate security check functions. If a security check function is missing before a sensitive operation, an attacker with insufficient privileges could perform the operation, leading to potential damage. For example, the file read/write operation is performed in many functions throughout the Linux kernel, such as `read()`, `write()`, `readv()`, `writev()`, `readdir()`, and `sendfile()`. Despite the different names, these functions all perform the same conceptual file read/write operation and must be checked for authorization by calling the `security_file_permission()` function.

Most of these functions, such as `read()`, `write()`, and `readdir()`, are protected by the `security_file_permission()` function. However, in some cases, the security check function is not invoked, as shown in Figure 1(d), where the `security_file_permission()` function is missing before the file read/write operation performed by `readv()`. This violates the implicit security specification that every file read/write operation must be protected by the `security_file_permission()` function.

Due to this real-world security vulnerability in Linux 2.6.11 (CVE-2006-1856 [1]), unauthorized users can read and write files they are not allowed to access, potentially providing unauthorized user account access. Additional damages might include partial confidentiality, integrity, and availability violations, unauthorized disclosure of information, and disruption of service.

### 1.3 Previous Work and Limitations

There have been significant advances in applying program analysis techniques [2, 4, 5, 12, 16] to automatically detect security vulnerabilities and verify security properties [6, 9, 18, 30]. Generally, these tools take a specification that describes the security properties to verify as input. For example, in earlier efforts [9, 30], the authors manually identified the data types (e.g., `struct file`, `struct inode`, etc.) that might be accessed to perform security-sensitive operations and automatically verified that any access to these data types was protected by a security check function.

Although these previous studies detected some vulnerabilities and made significant progress toward automatic verification of security properties, they are limited in two ways:

1. **Manual Specification Requirement**: All these tools require developers or their tool users to provide code-level security specifications, which greatly limits their practicality. Writing and maintaining accurate and correct specifications across different versions of software is notoriously difficult. Such specifications seldom exist in production software.
2. **Imprecision in Human-Generated Specifications**: Human-generated specifications can be imprecise, leading to false positives and potentially false negatives in violation detection. For example, a specification used in one of the earlier works [30] introduced false positives by treating any access to specified data structures as security-sensitive operations. In reality, a security-sensitive operation typically involves accessing multiple data structures. Simply requiring accesses to every field of these data structures to be protected led to false positives [30]. The specification may also introduce false negatives because it does not specify which security check is required for which operation.

### 1.4 Requirements for Specification Generation

To design tools that are truly usable for ordinary programmers, it is highly desirable for these tools to meet the following three requirements for specification generation:

1. **Code-Level Specifications**: To automatically check against source code for security violations, the security specifications must be at the code level. A conceptual specification like "file read/write operation must be protected by the `security_file_permission()` function" cannot be checked against source code without knowing its corresponding code-level representation.
2. **Automatic Generation**: As it is tedious and error-prone for developers to write these security rules, the tool should automatically generate security specifications with minimal user/developer involvement.
3. **Precision**: The generated specification must be precise to avoid too many false positives and/or false negatives.

### 1.5 Our Contributions

This paper makes two key contributions:

1. **AutoISES Approach and Tool**: We propose an approach and a tool, AutoISES, to automatically extract concrete code-level security specifications from source code and automatically detect security violations to these specifications. Our key observation is that although the same security-sensitive operation can be performed in different functions, the structure fields and global variables these functions access are the same. We call these structure field and global variable accesses together as data structure accesses. For example, all functions performing the file read/write operation share the 22 data structure accesses listed in Figure 2(a), which were automatically generated by AutoISES.

   Based on this observation, AutoISES infers that if a code-level security-sensitive operation is frequently protected by a security check function in the source code, the security check function should be used to protect that particular operation. Our rationale is that for released software, the majority of the code should be correct, so we can use the code to infer security specifications or rules observed in most places but possibly missing in a few others. This rationale is similar to that of prior work in specification mining [10, 11, 20, 22], but our approach is unique in its ability to learn specifications that contain both functions and multiple variable accesses that satisfy certain constraints.

2. **Quantitative Evaluation**: We quantitatively evaluate the impact of rule granularity on the accuracy of rule inference and violation detection. Security specifications can vary in granularity, and our evaluation provides insights into the optimal granularity for effective security property checking and verification.

We evaluated AutoISES on the latest versions of two large software systems, the Linux kernel and Xen, to demonstrate the effectiveness of our approach. AutoISES automatically extracted 84 rules and detected 8 true violations, 7 of which have been confirmed and fixed by the corresponding developers. Figure 2 shows (a) the code-level security specification learned by AutoISES, (b) a security violation automatically detected by AutoISES, and (c) the unprotected sensitive operation that performs all the accesses shown in (a) in different functions located in various source files.

These results demonstrate that AutoISES is effective at automatically inferring security rules and detecting violations, which greatly improves the practicality of security property checking and verification tools. Additionally, the automatically generated specifications can be used by other analysis tools for vulnerability detection and can assist in software understanding and maintenance.