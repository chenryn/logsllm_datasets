title:A Second Look at Detecting Third-Party Addresses in Traceroute Traces
with the IP Timestamp Option
author:Matthew J. Luckie and
kc claffy
A Second Look at Detecting Third-Party
Addresses in Traceroute Traces
with the IP Timestamp Option
Matthew Luckie and kc claﬀy
CAIDA, UC San Diego, USA
{mjl,kc}@caida.org
Abstract. Artifacts in traceroute measurement output can lead to false
inferences of AS-level links and paths when used to deduce AS topology.
One traceroute artifact is caused by routers that respond to traceroute
probes with a source address not in the path towards the destination,
i.e. an oﬀ-path address. The most well-known traceroute artifact, the
third-party address, is caused by oﬀ-path addresses that map to ASes
not in the corresponding BGP path. In PAM 2013, Marchetta et al. pro-
posed a technique to detect oﬀ-path addresses in traceroute paths [14].
Their technique assumed that a router IP address reported in a tracer-
oute path towards a destination was oﬀ-path if, in a subsequent probe
towards the same destination, the router did not insert a timestamp into
a pre-speciﬁed timestamp option in the probe’s IP header. However, no
standard precisely deﬁnes how routers should handle the pre-speciﬁed
timestamp option, and implementations are inconsistent. Marchetta et
al. claimed that most IP addresses in a traceroute path are oﬀ-path,
and that consecutive oﬀ-path addresses are common. They reported no
validation of their results. We cross-validate their approach with a ﬁrst-
principles approach, rooted in the assumption that subnets between con-
nected routers are often /30 or /31 because routers are often connected
with point-to-point links. We infer if an address in a traceroute path
corresponds to the interface on a router that received the packet (the in-
bound interface) by attempting to infer if its /30 or /31 subnet mate is
an alias of the previous hop. We traceroute from 8 Ark monitors to 80K
randomly chosen destinations, and ﬁnd that most observed addresses are
conﬁgured on the in-bound interface on a point-to-point link connecting
two routers, i.e. are on-path. Because the technique from [14] reports
70.9%–74.9% of these addresses as being oﬀ-path, we conclude it is not
reliable at inferring which addresses are oﬀ-path or third-party.
1
Introduction
The AS-level view of the Internet aﬀorded by public BGP data is severely lim-
ited by a well-known visibility issue: peer-to-peer links between ASes are ob-
servable only if one of the ASes or their downstream customer provides a public
view [15], which few ASes do. Traﬃc data collected at IXPs [2], although typi-
cally proprietary, can reveal many AS peering links established at the IXP. IXP
M. Faloutsos and A. Kuzmanovic (Eds.): PAM 2014, LNCS 8362, pp. 46–55, 2014.
c(cid:2) Springer International Publishing Switzerland 2014
A Second Look at Detecting Third-Party Addresses in Traceroute Traces
47
route-servers used to establish multilateral peering [6] may also support a query
interface that reveals peering activity at the IXP. But many important peerings
are established bilaterally using the IXP fabric, or at private exchange points,
so traceroute retains an important role in uncovering AS-level topology [4].
Using traceroute to infer AS links and paths involves many recognized chal-
lenges [9,16,20]. Inferring AS paths from traceroute IP paths relies on an accurate
AS inference for each IP address in traceroute, i.e. an IP2AS mapping. The most
widely used IP2AS mapping technique is to associate each IP address in a path
with the origin AS in a BGP path for the longest matching preﬁx. However,
real-world practices such as (1) operators not announcing IP preﬁxes used to
number their routers, (2) multiple ASes announcing the same preﬁx, and (3)
organizations which own multiple ASes announcing diﬀerent preﬁxes with dif-
ferent ASNs, all complicate IP2AS mapping. A further complication is routers
which respond to traceroute probes using an oﬀ-path address; i.e. an address
that does not represent the path through the router that the packet would have
taken towards the destination. Oﬀ-path addresses are derived when (1) a router
sets the source address of ICMP response packets to the outgoing interface used
to send the response packet, and (2) that interface is not the in-bound or out-
bound interface the router would have used to receive or transmit the packet if
the router had forwarded the packet. A third-party address is an oﬀ-path address
that resolves to a third-party AS that is not in the corresponding BGP path.
There has been considerable debate about the prevalence of third-party ad-
dresses. In PAM 2003, Hyun et al. [9] reported that third-party addresses were
rare, often observed close to the destination probed, and caused by multi-homing
and stale conﬁgurations. In PAM 2010, Zhang et al. [20] reported that the ma-
jority of false links in AS topology data derived from traceroute were due to
third-party addresses. In PAM 2013, Marchetta et al. [14] proposed a technique
to detect third-party addresses in traceroute paths using the pre-speciﬁed IP
timestamp option. This option allows a host to request a timestamped response
from a speciﬁc IP address (i.e., the associated router) in the path. RFC 791 [17]
does not describe precisely how to implement this option, in particular whether
the IP packet must actually traverse the IP interface conﬁgured with the pre-
speciﬁed IP address in order to trigger the timestamp recording.
Figure 1 illustrates the technique from [14]. Using the same notation as Sherry
et al. [18], a probe to destination G that requests B, C, D, and E include times-
tamps is denoted as G|BCDE. The technique from [14] assumes the behavior
of a router with address B can be inferred from the response to an ICMP echo
probe B|BBBB. If B embeds between one and three timestamps in the ICMP
echo packet, [14] infers that the router embeds timestamps as the packet ar-
rives or departs on the interface with address B; if B embeds four timestamps,
[14] infers the router with B will insert timestamps regardless of the interface
it arrived or departed from and therefore B cannot be classiﬁed as an on-path
or oﬀ-path address. The technique from [14] also cannot classify routers that
embed zero timestamps, remove the option, or do not reply to the ICMP probe.
Because only destinations that quote the IP options in ICMP responses can be
48
M. Luckie and k. claﬀy
A
B
C
R1
R3
E
R2
D
F
G
1. UDP Timestamp G|GGGG
Port unreach w/ IP timestamp option quoted
2. UDP Traceroute G
B
E
G
3. ICMP Timestamp B|BBBB
ICMP response w/ 1−3 timestamps from B
4. ICMP Timestamp E|EEEE
ICMP response w/ 1−3 timestamps from E
5. UDP Timestamp G|BBBB
Port unreach w/ 1−3 timestamps from B
6. UDP Timestamp G|EEEE
Port unreach w/ 0 timestamps from E
Fig. 1. Using pre-speciﬁed IP timestamps to infer third party addresses with the tech-
nique described in [14]. If G returns probes with the IP timestamp option quoted (1),
then [14] evaluates the traceroute path B-E-G (2) for third-party addresses. First, [14]
determines if routers will set timestamps for their IP address when a packet is sent
directly to them (3, 4). For the routers that set 1-3 timestamps (i.e. set timestamps
when the packet arrives and/or departs), [14] sends probes to the destination which
also request those interfaces to embed a timestamp. [14] infers interface B is on-path
because it does embed a timestamp (5), and infers E is a third-party address because
it does not (6). However, RFC791 [17] is under-speciﬁed and it is not safe to assume
E is a third-party address because it did not insert a timestamp.
evaluated for third-party addresses, the ﬁrst step shown in ﬁgure 1 is to ensure
a destination will respond to probes containing IP options and also quote the
IP option in responses. The technique from [14] uses UDP probes for traceroute
(step 2) and determining whether or not an address is on-path or oﬀ-path (steps
5, 6) because G quotes the timestamp option as the option was when G received
the packet. Therefore, if B is observed in a traceroute path to G, and B embeds
1-3 timestamps to a probe G|BBBB, then the technique from [14] infers the in-
terface with B is on-path toward G; if no timestamps are embedded by B then
B is inferred by [14] to be oﬀ-path and could lead to a third-party address.
Marchetta et al. used their technique to estimate the prevalence of third-party
IP addresses in traceroute paths. They used 53 PlanetLab nodes to obtain 12M
traces towards 327K destinations among 14K ASes. They reported that most
classiﬁed IP addresses in their data are oﬀ-path, and that consecutive oﬀ-path
addresses are common [14]; Hyun et al. considered this to be a remote possibility.
Further, they inferred that 17% of AS links in their dataset were inferred using
third-party addresses. However, they reported no validation of their results. We
revisit the eﬀectiveness of their technique by attempting to determine which
addresses in a traceroute path are likely to be the in-bound interface and thus on-
path, and then examining the classiﬁcation made using the technique from [14]
A Second Look at Detecting Third-Party Addresses in Traceroute Traces
49
for these in-bound interfaces. We ﬁnd most in-bound interfaces are incorrectly
classiﬁed by the technique from [14] to be oﬀ-path. Further, most addresses
observed in our traceroute paths are assigned by operators to the in-bound
interface. We believe that the results reported in [14] are not robust because
their technique is unreliable; RFC791 under-speciﬁes how the option should be
implemented and there is considerable heterogeneity in how it is implemented.
2 Method and Data
In this section we describe the method and data collected to evaluate the utility of
pre-speciﬁed timestamps for inferring third party addresses. Our cross-validation
of [14] involves two steps. First, we infer which addresses in a traceroute path
represent the in-bound interface on the router receiving the packet, and therefore
are not oﬀ-path addresses. Then, we evaluate the classiﬁcation made by the
technique from [14] using the pre-speciﬁed timestamp IP option for the interfaces
we infer to be in-bound interfaces.
(cid:3)
of the address A returned for the previous hop and A
We use the preﬁxscan method implemented in scamper and described in [12] to
infer which addresses in a traceroute path are the in-bound address on a router.
An address B is the in-bound interface of a router in a traceroute path if we ﬁnd
(cid:3)
is a /31 or /30
an alias A
mate of B, i.e. the link between A and B is a point-to-point (pt2pt) link. The
are aliases if (1) the IPIDs in responses to ﬁve
preﬁxscan method infers A and A
alternating probes sent one second apart monotonically increase and diﬀer by no
(cid:3)
elicit responses with a common source
more than 5,000, or (2) probes to A and A
address. The ﬁrst technique is a pairwise comparison similar to Ally [19], and
the second is the Mercator technique [7]. A threshold of 5,000 allows aliases to
be inferred for routers with fast moving IPID counters and has a 7.6% chance of
falsely inferring aliases, in the worst case, between two routers with fast moving
but overlapping counters.
(cid:3)
Because we may falsely infer aliases when two independent counters happen
to overlap when we probe them [5], or when two routers randomly generated
(cid:3)
six
IPID values that happened to fall within the threshold, we probe A and A
further times approximately ten minutes apart, with ﬁve probes per round. We
do not classify a link as pt2pt if any of these subsequent probes do not solicit
a monotonically increasing sequence or if the IPID distance falls outside of the
threshold. For each hop in a traceroute path, we preﬁxscan with ICMP-echo,