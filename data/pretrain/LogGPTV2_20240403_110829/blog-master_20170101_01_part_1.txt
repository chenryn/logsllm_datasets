## PostgreSQL 10.0 preview - 截至2017元旦装备了哪些核武器
##### [TAG 13](../class/13.md)
### 作者                                                                                                     
digoal                                                                                                      
### 日期                                                                                                    
2017-01-01              
### 标签                                                                                                    
PostgreSQL , 10.0 , 金秋 , 元旦 , 大礼包 , commitfest                                           
----                                                                                                    
## 背景    
早上送给大家的新年大礼包，一年一个大版本是PostgreSQL社区的传统，虽然发布时间通常为秋天，还有一段时间，但是已经迫不及待地想看看2017金秋将要发布的10.0版本已经装备了哪些核武器。     
放心，还会有一波又一波的feature和增强搭上开往2017金秋的列车，本文提到的可能只是其中的某一节车厢沃，PGer是不是开始有一点振奋人心的感觉啦。    
## 1. 并行计算专属动态共享内存区，（加速索引扫描\外部表并行的支持步伐）  
https://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=e13029a5ce353574516c64fd1ec9c50201e705fd  
```  
Provide a DSA area for all parallel queries.  
This will allow future parallel query code to dynamically allocate  
storage shared by all participants.  
Thomas Munro, with assorted changes by me.  
```  
Parallel tuplesort (for parallel B-Tree index creation)  
https://commitfest.postgresql.org/12/690/  
Parallel bitmap heap scan  
https://commitfest.postgresql.org/12/812/  
Parallel Index Scans  
https://commitfest.postgresql.org/12/849/  
Parallel Merge Join  
https://commitfest.postgresql.org/12/918/  
Parallel Append implementation  
https://commitfest.postgresql.org/12/929/  
parallelize queries containing subplans  
https://commitfest.postgresql.org/12/941/  
## 2. 多副本新增 "任意节点、顺序" 两种模式自由选择  
https://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=3901fd70cc7ccacef1b0549a6835bb7d8dcaae43  
```  
Support quorum-based synchronous replication.  
This feature is also known as "quorum commit" especially in discussion  
on pgsql-hackers.  
This commit adds the following new syntaxes into synchronous_standby_names  
GUC. By using FIRST and ANY keywords, users can specify the method to  
choose synchronous standbys from the listed servers.  
  FIRST num_sync (standby_name [, ...])  
  ANY num_sync (standby_name [, ...])  
The keyword FIRST specifies a priority-based synchronous replication  
which was available also in 9.6 or before. This method makes transaction  
commits wait until their WAL records are replicated to num_sync  
synchronous standbys chosen based on their priorities.  
The keyword ANY specifies a quorum-based synchronous replication  
and makes transaction commits wait until their WAL records are  
replicated to *at least* num_sync listed standbys. In this method,  
the values of sync_state.pg_stat_replication for the listed standbys  
are reported as "quorum". The priority is still assigned to each standby,  
but not used in this method.  
The existing syntaxes having neither FIRST nor ANY keyword are still  
supported. They are the same as new syntax with FIRST keyword, i.e.,  
a priorirty-based synchronous replication.  
Author: Masahiko Sawada  
Reviewed-By: Michael Paquier, Amit Kapila and me  
Discussion:   
Many thanks to the various individuals who were involved in  
discussing and developing this feature.  
```  
## 3. 添加会话级临时replication slots支持  
（原来slot是为长时间使用设计，如STANDBY。 对于一些测试、针对性复制场景，不再需要担心忘记删除slot带来的问题了）  
https://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=a924c327e2793d2025b19e18de7917110dc8afd8  
```  
Add support for temporary replication slots  
This allows creating temporary replication slots that are removed  
automatically at the end of the session or on error.  
From: Petr Jelinek   
```  
## 4. 认证协议会更加安全(SCRAM)  
https://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=e7f051b8f9a6341f6d3bf80b29c1dbc1837be9ab  
```  
Refactor the code for verifying user's password.  
Split md5_crypt_verify() into three functions:  
* get_role_password() to fetch user's password from pg_authid, and check  
  its expiration.  
* md5_crypt_verify() to check an MD5 authentication challenge  
* plain_crypt_verify() to check a plaintext password.  
get_role_password() will be needed as a separate function by the upcoming  
SCRAM authentication patch set. Most of the remaining functionality in  
md5_crypt_verify() was different for MD5 and plaintext authentication, so  
split that for readability.  
While we're at it, simplify the *_crypt_verify functions by using  
stack-allocated buffers to hold the temporary MD5 hashes, instead of  
pallocing.  
Reviewed by Michael Paquier.  
```  
https://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=babe05bc2b781eb3eb84a18d7010d08277e2e399  
```  
Turn password_encryption GUC into an enum.  
This makes the parameter easier to extend, to support other password-based  
authentication protocols than MD5. (SCRAM is being worked on.)  
The GUC still accepts on/off as aliases for "md5" and "plain", although  
we may want to remove those once we actually add support for another  
password hash type.  
Michael Paquier, reviewed by David Steele, with some further edits by me.  
Discussion:   
```  
https://postgrespro.com/docs/postgresproee/9.6/auth-methods.html#auth-password  
```  
21.3.2. Password Authentication  
The password-based authentication methods are md5, scram, and password. These methods operate similarly except for the way that the password is sent across the connection, namely MD5-hashed, SCRAM-SHA-256 and clear-text respectively.  
If you are at all concerned about password “sniffing” attacks then md5 is preferred. Plain password should always be avoided if possible. However, md5 cannot be used with the db_user_namespace feature. If the connection is protected by SSL encryption then password can be used safely (though SSL certificate authentication might be a better choice if one is depending on using SSL).  
scram has more advantages than md5 as it protects from cases where the hashed password is taken directly from pg_authid in which case a connection using only the stolen hash is possible without knowing the password behind it. It protects as well from password interception and data sniffing where the password data could be directly obtained from the network as well as man-in-the-middle (MITM) attacks. So it is strongly encouraged to use it over md5 for password-based deployments.  
Postgres Pro Enterprise database passwords are separate from operating system user passwords. The password for each database user is stored in the pg_authid system catalog. Passwords can be managed with the SQL commands CREATE USER and ALTER ROLE, e.g., CREATE USER foo WITH PASSWORD 'secret'. If no password has been set up for a user, the stored password is null and password authentication will always fail for that user.  
```  
## 5. Support for SCRAM-SHA-256  
https://commitfest.postgresql.org/12/829/  
## 6. 分区、多级分区支持  
[《PostgreSQL 10.0 内置分区表》](../201612/20161215_01.md)    
此前，我们可以使用pg_pathman插件来实现高性能多级分区  
[《PostgreSQL 9.5+ 高效分区表实现 - pg_pathman》](../201610/20161024_01.md)    
[《PostgreSQL 9.6 sharding based on FDW & pg_pathman》](../201610/20161027_01.md)   
https://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=f0e44751d7175fa3394da2c8f85e3ceb3cdbfe63  
```  
Implement table partitioning.  
Table partitioning is like table inheritance and reuses much of the  
existing infrastructure, but there are some important differences.  
The parent is called a partitioned table and is always empty; it may  
not have indexes or non-inherited constraints, since those make no  
sense for a relation with no data of its own.  The children are called  
partitions and contain all of the actual data.  Each partition has an  
implicit partitioning constraint.  Multiple inheritance is not  
allowed, and partitioning and inheritance can't be mixed.  Partitions  
can't have extra columns and may not allow nulls unless the parent  
does.  Tuples inserted into the parent are automatically routed to the  
correct partition, so tuple-routing ON INSERT triggers are not needed.  
Tuple routing isn't yet supported for partitions which are foreign  
tables, and it doesn't handle updates that cross partition boundaries.  
Currently, tables can be range-partitioned or list-partitioned.  List  
partitioning is limited to a single column, but range partitioning can  
involve multiple columns.  A partitioning "column" can be an  
expression.  
Because table partitioning is less general than table inheritance, it  
is hoped that it will be easier to reason about properties of  
partitions, and therefore that this will serve as a better foundation  
for a variety of possible optimizations, including query planner  
optimizations.  The tuple routing based which this patch does based on  
the implicit partitioning constraints is an example of this, but it  
seems likely that many other useful optimizations are also possible.  
Amit Langote, reviewed and tested by Robert Haas, Ashutosh Bapat,  
Amit Kapila, Rajkumar Raghuwanshi, Corey Huinker, Jaime Casanova,  
Rushabh Lathia, Erik Rijkers, among others.  Minor revisions by me.  
Discussion: https://www.postgresql.org/message-id/PI:EMAIL  
```  
## 7. 聚合运算减少context切换  
https://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=8ed3f11bb045ad7a3607690be668dbd5b3cc31d7  
```  
Perform one only projection to compute agg arguments.  
Previously we did a ExecProject() for each individual aggregate  
argument. That turned out to be a performance bottleneck in queries with  
multiple aggregates.  
Doing all the argument computations in one ExecProject() is quite a bit  
cheaper because ExecProject's fastpath can do the work at once in a  
relatively tight loop, and because it can get all the required columns  
with a single slot_getsomeattr and save some other redundant setup  
costs.  
Author: Andres Freund  
Reviewed-By: Heikki Linnakangas  
Discussion: https://postgr.es/m/PI:EMAIL  
```  
## 8. hash index增强  
https://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=6d46f4783efe457f74816a75173eb23ed8930020  
```  
Improve hash index bucket split behavior.  
Previously, the right to split a bucket was represented by a  
heavyweight lock on the page number of the primary bucket page.  