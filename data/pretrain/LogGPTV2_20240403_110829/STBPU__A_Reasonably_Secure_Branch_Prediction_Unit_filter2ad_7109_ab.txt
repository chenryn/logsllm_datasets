and Perceptron [29].
The BPU consists of the following main structures: shift
registers such as the global history register (GHR) and branch
history buffer (BHB), branch target buffer (BTB), pattern
history table (PHT), and return stack buffer (RSB). Figure 1
depicts how these structures are utilized during a BPU lookup
with highlighted components that are modiﬁed by STBPU.
The ﬁgure also shows several important functions which are
referenced later.
Shift registers such as GHR and BHB are used in the BPU
as a low-cost way of retaining complex branch history. GHR
stores the global history of taken/not-taken branches and is
used in the prediction of conditional branches. BHB is used by
the indirect branch predictor. Its purpose is to accumulate the
branch context. When a direct branch (or a call) is executed, its
virtual address is folded using XOR and mixed with the current
state of BHB [32]. This context is used as part of BTB lookup,
enabling BPU to predict the target of an indirect branch when
it depends on the sequence of previously executed branches.
BTB serves the purpose of caching target addresses of branch
instructions. It is implemented as an 8-way, 4096-entry table.
Each entry stores a truncated address of the 32 least signiﬁcant
address bits of the target. Function 5 is then utilized to convert
a 32-bit entry into a 48-bit virtual address during prediction by
combining 16 higher bits from the branch instruction pointer
with 32 lower bits from BTB. While the BTB is used to store
targets for all branch types, it has two addressing modes. In
mode one, the virtual address of a branch instruction is used to
compute an index and tag. In mode two, in addition to virtual
address, the BHB is used to perform a lookup. Mode two is
only used when predicting indirect branches, and serves as a
fall-back mechanism for predicting returns. This addressing
enables storing multiple targets for a single indirect branch
depending on the context [19, 32, 78].
PHT is a large (16k entry) table consisting of n-bit (e.g. 2-
bit) saturating counters; each counter implements a simple
ﬁnite-state machine with states ranging from strongly non-
taken to strongly-taken. This structure is used as a base
predictor to predict
the direction of conditional branches.
Previous studies [7, 21, 26, 78] indicated the presence of a
mechanism similar to gshare [76] with two distinct modes of
addressing: i) a simple 1-level mode where the virtual memory
address of a branch is used to ﬁnd a PHT entry, and ii) a
more complex 2-level mode where the branch virtual memory
address is hashed with global history register (GHR), enabling
the accurate prediction of complex patterns.
RSB is used to predict return instructions. The RSB is im-
plemented as a ﬁxed size (16-entry) hardware stack [34, 43].
A call instruction pushes a return address on the RSB and a
return instruction pops it. Similarly to the BTB, RSB stores
only 32 bits of the target. Due to limited capacity, the RSB can
underﬂow. In this case, returns are treated as indirect branches,
and the indirect predictor is utilized for prediction.
Microcode BPU Protections. Intel has proposed a set of
microcode-based protections which aim to mitigate specu-
lative execution attacks on legacy CPUs by limiting BPU
structure sharing. These protections include Indirect Branch
Restricted Speculation (IBRS), Indirect Branch Prediction Bar-
rier (IBPB), and Single Threaded Indirect Branch Prediction
(STIBP) [28]. IBRS prevents higher privilege processes from
speculating with BPU data placed by lower privilege pro-
cesses. This is done by ﬂushing BPU structures when entering
the kernel. IBPB provides protection by ﬂushing the contents
of the BPU on context switches. While effectively stopping
BPU interference, ﬂushing BPU structures results in a loss of
useful history, causing signiﬁcant performance reduction [56,
68]. Additionally, recent research demonstrated exploitable
branch collisions within same address space [63, 78]. Thus
enforcing security only during context and mode switch is not
complete. STIBP logically segments the BPU such that the
threads on the same physical core become isolated.
B. BPU Attacks
BPU can be manipulated to enable attacks of different types.
For example, an attacker can attempt to passively observe
and recover branch instruction patterns. This happens during
side and covert channel attacks. On the other hand, an active
attacker can manipulate the BPU state by executing branch
instructions. Such a state triggers a malicious speculative
execution causing data leakage. Moreover, attacks range based
on what BPU property they utilize. First, there are attacks
that exploit the most fundamental principle of BPU to make
predictions based on the previous behavior of a branch. E.g.,
if a conditional branch was taken 100 times in a row, it is
likely to be taken the next time. An example of such an
attack is Spectre-v1 [32]. Second, there are attacks that ex-
ploit branch collisions (aliasing). Collisions appear when two
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:28:07 UTC from IEEE Xplore.  Restrictions apply. 
110
Reuse-based (RB)
Home effect (HE)
BTB:
1. V: jmp s → d; BTB ← (s, d)
2. A: jmp s → d(cid:2); (s, d) reused
3. A sees misprediction
PHT:
1. V: jt s → d; PHT ← (s, t)
2. A: jnt s → s + 1; (s, t) reused
3. A sees misprediction
RSB:
1. V: call s → d; RSB ← (s + 1)
2. A: ret → s(cid:2); (s + 1) reused
3. A sees misprediction
Visible source and target of branch/call
addresses, taken/nontaken
patterns [3, 19, 21, 34, 37]
Away effect(AE)
BTB:
1. A: jmp s→d
2. V: jmp s→d’
3. V speculatively executes d
PHT:
1. A: jnt s → d; PHT ← (s, t)
2. V: jt s → d; (s, nt) reused
3. V speculatively executes s + 1
RSB:
1. A: call s → d; RSB ← (s + 1)
2. V: ret → s(cid:2); (s + 1) reused
3. V speculatively executes s + 1
Timing channel due to A
controlling predictions in V [3],
speculative execution attacks
[15, 32, 34, 43, 66, 78]
Eviction-based (EB)
Home effect (HE)
BTB:
1. A: jmp s→d; BTB ← (s, d)
2. V: jmp s’→d’; BTB← (s(cid:2), d(cid:2))
|H(s) =H (s(cid:2)), (s, d) is evicted
3. A sees s mispredicted
PHT:
PHT entries are not evicted
RSB:
1. A: call s → d;
RSB ← (s + 1) then ﬁlls RSB
2. V: call s(cid:2) → d(cid:2)
RSB ← (s(cid:2) + 1) evicting (s + 1)
3. A sees misprediction
V’s jmp taken/nontaken [3] and
call pattens, branch
instruction virtual address [32]
;
Away effect (AE)
BTB:
1. V: jmp s → d; BTB ← (s, d)
2. A: jmp s(cid:2) → d(cid:2)
|H(s) =H (s(cid:2))
; BTB← (s(cid:2), d(cid:2))
3. V: CPU uses static prediction
PHT:
PHT entries are not evicted
RSB:
1. V: call s → d; RSB ← (s + 1)
2. A: overﬂows RSB by
looping call s(cid:2) → d(cid:2)
3. V: CPU uses static prediction
Timing channel due to A forcing
static default predictions [3],
speculatively execute gadget
at static prediction address [14]
Attack steps
Adversarial
effects
A: attacker; V: victim; jmp s → d: jump from s to d; call s → d: call function d from callsite s; BTB/PHT/RSB← (s, d): store target d for branch s in BTB/PHT/RSB;
TABLE I: Attack surface classiﬁcation for BPU collision-based attacks by event and adversarial effect types
H(): BTB/PHT hash function; s + 1: next instruction after s
different branch instructions map into the same BPU entry and
affect one another’s behavior. In this work, we focus only on
collision-based attacks. We believe that mitigating them is an
important task on its own for a number of responses. i) There
exist a large number of well-documented collision attacks that
have truly devastating effects on security [5, 14, 15, 51, 78]. ii)
Protecting from non-collision attacks requires different prin-
ciples, such as delaying speculative execution [64] or limiting
its observability [77]. iii) Even in systems that implement safe
speculation, branch collisions can still happen, causing side
channel attacks. Because of that, we believe protecting from
collision and non-collision attacks are two orthogonal tasks.
There are two BPU features that are present in nearly all
CPUs that make collision-based attacks possible. First, the
BPU data structures are shared among all software executed
on a CPU core, enabling branch collisions between different
processes. Second, the BPU operates with compressed virtual
addresses. For instance, out of 48 bits of branch virtual
address, only 30 are utilized. Then, these bits are further
compressed [32]. This allows collisions to appear within the
same virtual address space, e.g., collisions between branches
in kernel and user process [19]. The deterministic nature of
the BPU makes it possible for an attacker to trigger collisions
in a controlled way. Our proposed solution aims at eliminating
such determinism.
We detail the entire collision-based attack surface in Table I.
First, we classify attacks by where adversarial effect takes
place, either within the attacker’s code (home effect) or in
the victim’s code (away effect). Secondly, we classify by the
kind of the effect. A collision in BPU structures results in
either data placed by another software entity being reused, or
such data evicted and replaced. We refer to these as reuse-
based and eviction-based attacks correspondingly. Please note
that there can be different adversarial effects enabled by same
type of collision. For instance, a collision in BTB between two
different branches can result in i) BTB-data reuse, ii) BTB-
eviction and iii) activating malicious speculative execution.
While i) and ii) results in side channel leakage of branch-
related information iii) is used as part of speculative execution
attack to reveal victim’s memory contents. As can be seen from
the table, there is a diverse range of dangerous collision-based
attacks. By eliminating collision-based BPU attacks STBPU
can stop many practical exploits and substantially improve
security of microprocessors.
III. THREAT MODEL
We assume a powerful attacker that has a complete un-
derstanding of all hardware components and structures in the
STBPU. The attacker has access to normal reverse engineer-
ing resources, such as time measurements and performance
counters, and has access to a wide variety of hardware covert
channels. The STBPU design calls for new special purpose
registers as detailed in Section IV; the adversary is assumed
to be unable to read/modify the contents of these registers.
Such a role is delegated to a privileged software entity (OS,
hypervisor) which attacker does not control.
We assume the attacker cannot gain access to ST for the
victim process neither when it is in the special purpose register,
nor when system software stores it. Former is impossible
because the register can only be accessed from the privileged
mode. Later happens only in the event of system software
compromise. The ST can be considered as part of processes’s
context that is saved and restored on context switches. The
event of attacker gaining access to context data would be
equal to a full compromise. In such case, there is no point
for attacker to use side channels.
We consider attacks presented in Table I including both side
channel attacks in which victim executes a sensitive data
dependent branch branch as well as speculative execution
attacks where victim is forced to speculatively execute leakage
gadget code. We assume the following two attack scenarios:
Sensitive Process as Victim. In this scenario, an attacker tries
to learn sensitive data from a victim process by manipulating
the BPU state and recording observations. The attacker has
control over user-level process co-located on the same CPU
core and is capable of performing activities that are normally
allowed to untrusted process such as accessing ﬁne grain
hardware timers via rdtscp instructions. We assume the
victim and attacker can either execute on two logical cores
within the same physical core or share the same logical
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:28:07 UTC from IEEE Xplore.  Restrictions apply. 
111
core with time-slicing. This scenario also includes recently
introduced transient trojans [78] where collisions occurring
within the same memory segments are exploited.
Kernel/VMM as Victim. The attacker takes a form of a
software entity with lower privilege level, i.e. untrusted user
process. The attacker tries to learn sensitive data owned by a
higher privileged entity (OS kernel or VMM) by manipulating
with BPU state and recording observations. Here, victim
and attacker share a same contiguous virtual address space.
Attacker is restricted from executing privilege instructions.
IV. STBPU DESIGN
As discussed in Section II, BPU attacks are possible due
to deterministic mapping mechanisms, allowing attackers to
create branch collisions. STBPU aims to stop these attacks by
replacing these deterministic mechanisms with keyed remap-
ping mechanisms which prevent branch collision construction.
The design philosophy of STBPU is to create different data
representations for separate software entities inside the BPU
data structures. Each software entity requiring isolation is
assigned a unique ST, which is a random integer that controls
how branch virtual addresses are mapped into BPU structures.
This ST is also used to encrypt/decrypt stored data. Compared
to na¨ıve protections based on ﬂushing or partitioning, our
approach has a number of beneﬁts.
Consider a protection scheme where branch target poisoning
is prevented by ﬂushing the BTB on context switches. Invali-
dating the entire branch target history will negatively affect
performance in cases where context switches are frequent.
Similarly, to protect from target collisions between kernel
and user branches, BTB must be ﬂushed on mode switches
(e.g. all syscalls). Partitioning hardware resources reduces the
effective capacity of BPU structures resulting in a higher
miss rate and lower prediction accuracy. Instead, a customized
mapping approach allows separate software entities to co-exist
in the BPU with minimal performance overhead; performance
evaluated in Section VII. STBPU utilizes two key approaches
to enable safe resource sharing.
• We make collision creation difﬁcult by ensuring all
remapping functions are dependent upon both branch
address and ST.
• STBPU detects when a potential attacker process has re-
covered sufﬁcient information that enables deterministic
collision creation by monitoring hardware events.
A. ST re-randomization
The ST of the current process in the BPU is re-randomized
once certain (OS controlled) thresholds are reached. Note
that in STBPU design, the OS is trusted and is responsible
for setting parameters such as the re-randomization threshold.
This is a common assumption for systems protecting against
microarchitectural attacks since compromising OS gives the
attacker full control over the system, making such attacks non-
necessary. On the other hand, such a design choice makes
our mechanism more ﬂexible and permits the OS to adjust
the strength of enforcement based on factors such as whether
a certain process is considered sensitive or the attacker’s
capabilities. For instance, if a more effective side channel
attack is discovered after STBPU is deployed, the underlying
hardware mechanism will still remain effective and will only
require the OS to readjust the thresholds. Moreover, for the
extreme cases of sensitive processes the OS may opt to set
the threshold as low as 1, forcing re-randomization after every
branch instruction, effectively disabling the BPU mechanism.
STBPU can be also adapted for systems with OS not
trusted (e.g. SGX), then another system component needs to be
responsible for managing tokens and thresholds. For instance,
in the case of SGX, the enclave entering routine can serve
this purpose. Alternatively, simple logic of ST management
in STBPU should also enable hardware only implementation.