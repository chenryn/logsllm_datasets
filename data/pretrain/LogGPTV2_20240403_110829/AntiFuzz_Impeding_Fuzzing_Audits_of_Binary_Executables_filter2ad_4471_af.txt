with the SPEC benchmark suite and can, therefore, be easily
and efﬁciently integrated into projects with negligible impact
to the performance.
In summary, we conclude that the techniques presented in
this paper are well applicable to deter automated, dragnet-
style hunting for bugs. In combination with common program
obfuscation techniques, they will also hinder a targeted attack,
as manual work is needed to reverse engineer and remove the
anti-fuzzing measures before a more cost-efﬁcient, automated
fuzzing campaign can be started.
Acknowledgments
We would like to thank our shepherd Mathias Payer and the
anonymous reviewers for their valuable comments and sugges-
tions. This work was supported by the German Federal Min-
istry of Education and Research (BMBF Grant 16KIS0592K
HWSec) and the German Research Foundation (DFG) within
the framework of the Excellence Strategy of the Federal Gov-
ernment and the States - EXC 2092 CASA. In addition, this
project has received funding from the European Union’s Hori-
zon 2020 research and innovation programme under grant
agreement No 786669 (ReAct). This paper reﬂects only the
authors’ view. The Research Executive Agency is not respon-
sible for any use that may be made of the information it
contains.
References
[1] Announcing oss-fuzz: Continuous fuzzing for open
source software. https://testing.googleblog.com/
2016/12/announcing-oss-fuzz-continuous-
fuzzing.html. Accessed: 2019-02-18.
[2] Circumventing fuzzing roadblocks with compiler trans-
formations. https://lafintel.wordpress.com/. Ac-
cessed: 2019-02-18.
[3] Peach. http://www.peachfuzzer.com/. Accessed:
2019-02-18.
[4] Security oriented fuzzer with powerful analysis op-
tions. https://github.com/google/honggfuzz. Ac-
cessed: 2019-02-18.
[5] zzuf. https://github.com/samhocevar/zzuf. Ac-
cessed: 2019-02-18.
[6] Ali Abbasi, Thorsten Holz, Emmanuele Zambon, and
Sandro Etalle. ECFI: Asynchronous Control Flow In-
tegrity for Programmable Logic Controllers. In Annual
Computer Security Applications Conference (ACSAC),
2017.
[7] Andrew W. Appel. Deobfuscation is in NP, 2002.
[8] Cornelius Aschermann, Sergej Schumilo, Tim Blazytko,
Robert Gawlik, and Thorsten Holz. Redqueen: Fuzzing
with input-to-state correspondence. In Symposium on
Network and Distributed System Security (NDSS), 2019.
[9] Osbert Bastani, Rahul Sharma, Alex Aiken, and Percy
Liang. Synthesizing program input grammars. In ACM
SIGPLAN Conference on Programming Language De-
sign and Implementation (PLDI), 2017.
[10] Marcel Böhme, Van-Thuan Pham, Manh-Dung Nguyen,
and Abhik Roychoudhury. Directed greybox fuzzing.
In ACM Conference on Computer and Communications
Security (CCS), 2017.
[11] Marcel Böhme, Van-Thuan Pham, and Abhik Roychoud-
hury. Coverage-based greybox fuzzing as markov chain.
In ACM Conference on Computer and Communications
Security (CCS), 2016.
[12] Cristian Cadar, Daniel Dunbar, and Dawson R Engler.
Klee: Unassisted and automatic generation of high-
coverage tests for complex systems programs. In Sympo-
sium on Operating Systems Design and Implementation
(OSDI), 2008.
[13] Sang Kil Cha, Maverick Woo, and David Brumley.
In IEEE Sym-
Program-adaptive mutational fuzzing.
posium on Security and Privacy, 2015.
[14] Peng Chen and Hao Chen. Angora: Efﬁcient fuzzing by
principled search. In IEEE Symposium on Security and
Privacy, 2018.
[15] Christian Collberg. The Tigress C Diversiﬁer/Obfus-
cator. http://tigress.cs.arizona.edu/. Accessed:
2019-02-18.
[16] Christian Collberg, Clark Thomborson, and Douglas
Low. A taxonomy of obfuscating transformations. Tech-
nical Report 148, Department of Computer Science, The
University of Auckland, New Zealand, 1997.
[17] Christian Collberg, Clark Thomborson, and Douglas
Low. Manufacturing cheap, resilient, and stealthy
opaque constructs. In ACM Symposium on Principles of
Programming Languages (POPL), 1998.
USENIX Association
28th USENIX Security Symposium    1945
[18] Brendan Dolan, Patrick Hulin, Engin Kirda, Tim Leek,
Andrea Mambretti, William Robertson, Frederick Ul-
rich, and Ryan Whelan. LAVA: large-scale automated
vulnerability addition. In IEEE Symposium on Security
and Privacy, 2016.
[19] Christopher Domas.
into
a
Movfuscator: Turning
nightmare.
soul-crushing RE
’mov’
https://recon.cx/2015/slides/recon2015-
14-christopher-domas-The-movfuscator.pdf.
Accessed: 2019-02-18.
[20] Joe W. Duran and Simeon Ntafos. A report on ran-
dom testing. In International Conference on Software
Engineering (ICSE), 1981.
[21] Hui Fang, Yongdong Wu, Shuhong Wang, and Yin
Huang. Multi-stage binary code obfuscation using im-
proved virtual machine. In International Conference on
Information Security (ISC), 2011.
[22] Shuitao Gan, Chao Zhang, Xiaojun Qin, Xuwen Tu,
Kang Li, Zhongyu Pei, and Zuoning Chen. Collaﬂ:
Path sensitive fuzzing. In IEEE Symposium on Security
and Privacy, 2018.
[23] Vijay Ganesh, Tim Leek, and Martin Rinard. Taint-
based directed whitebox fuzzing. In International Con-
ference on Software Engineering (ICSE), 2009.
[24] Jun Ge, Soma Chaudhuri, and Akhilesh Tyagi. Control
ﬂow based obfuscation. In ACM Workshop on Digital
Rights Management (DRM), 2005.
[25] Patrice Godefroid, Adam Kiezun, and Michael Y Levin.
Grammar-based whitebox fuzzing. In ACM SIGPLAN
Conference on Programming Language Design and Im-
plementation (PLDI), 2008.
[26] Patrice Godefroid, Nils Klarlund, and Koushik Sen.
DART: Directed Automated Random Testing. In ACM
SIGPLAN Conference on Programming Language De-
sign and Implementation (PLDI), 2005.
[27] Patrice Godefroid, Michael Y Levin, David A Molnar,
et al. Automated whitebox fuzz testing. In Symposium
on Network and Distributed System Security (NDSS),
2008.
[28] Patrice Godefroid, Hila Peleg, and Rishabh Singh.
Learn&fuzz: Machine learning for input fuzzing. In
ACM International Conference on Automated Software
Engineering (ASE), 2017.
[29] Peter Goodman.
Shin GRR: Make Fuzzing Fast
Again. https://blog.trailofbits.com/2016/11/
02/shin-grr-make-fuzzing-fast-again/.
Ac-
cessed: 2019-02-18.
[30] David Göransson and Emil Edholm. Escaping the Fuzz.
Master’s thesis, Chalmers University of Technology,
Gothenburg, Sweden, 2016.
[31] Istvan Haller, Asia Slowinska, Matthias Neugschwandt-
ner, and Herbert Bos. Dowsing for overﬂows: A guided
fuzzer to ﬁnd buffer boundary violations. In USENIX
Security Symposium, 2013.
[32] HyungSeok Han and Sang Kil Cha. Imf: Inferred model-
based fuzzer. In ACM Conference on Computer and
Communications Security (CCS), 2017.
[33] Aki Helin. A general-purpose fuzzer.
https://
gitlab.com/akihe/radamsa. Accessed: 2019-02-18.
[34] Thorsten Holz and Frédéric Raynal. Detecting honey-
pots and other suspicious environments. IEEE Informa-
tion Assurance Workshop, 2005.
[35] Zhenghao Hu, Yu Hu, and Brendan Dolan-Gavitt. Chaff
bugs: Deterring attackers by making software buggier.
[36] Richard Johnson.
Go speed tracer.
https:
//talos-intelligence-site.s3.amazonaws.com/
production/document_files/files/000/000/
048/original/Go_Speed_Tracer.pdf.
2019-02-18.
Accessed:
[37] Anastasis Keliris and Michail Maniatakos. Icsref: A
framework for automated reverse engineering of indus-
trial control systems binaries. In Symposium on Network
and Distributed System Security (NDSS), 2019.
[38] Kang Li, Yue Yin, and Guodong Zhu. Aﬂ’s blindspot
and how to resist aﬂ fuzzing for arbitrary elf binaries.
https://www.blackhat.com/us-18/briefings/
schedule/index.html#afls-blindspot-and-how-
to-resist-afl-fuzzing-for-arbitrary-elf-
binaries-11048. Accessed: 2019-02-18.
[39] Yuekang Li, Bihuan Chen, Mahinthan Chandramohan,
Shang-Wei Lin, Yang Liu, and Alwen Tiu. Steelix:
Program-state Based Binary Fuzzing. In Joint Meet-
ing on Foundations of Software Engineering, 2017.
[40] Chi-Keung Luk, Robert Cohn, Robert Muth, Harish
Patil, Artur Klauser, Geoff Lowney, Steven Wallace, Vi-
jay Janapa Reddi, and Kim Hazelwood. Pin: building
customized program analysis tools with dynamic instru-
mentation. In ACM SIGPLAN Conference on Program-
ming Language Design and Implementation (PLDI),
2005.
[41] Matias Madou, Bertrand Anckaert, Patrick Moseley,
Saumya Debray, Bjorn De Sutter, and Koen De Boss-
chere. Software protection through dynamic code muta-
tion. In International Workshop on Information Security
Applications (WISA), 2005.
1946    28th USENIX Security Symposium
USENIX Association
[53] Gregory Wroblewski. General method of program code
obfuscation. PhD thesis, Wroclaw University of Tech-
nology, 2002.
[54] Insu Yun, Sangho Lee, Meng Xu, Yeongjin Jang, and
Taesoo Kim. QSYM: A Practical Concolic Execution
Engine Tailored for Hybrid Fuzzing. In USENIX Secu-
rity Symposium, 2018.
[55] Michael Zalewski.
"technical whitepaper" for
http://lcamtuf.coredump.cx/afl/
aﬂ-fuzz.
technical_details.txt. Accessed: 2019-02-18.
[56] Michał Zalewski.
http://
lcamtuf.coredump.cx/afl/. Accessed: 2019-02-18.
american fuzzy lop.
A TIGRESS Conﬁguration
Table 1: Tigress conﬁguration for ANTIFUZZ evaluation. Asterisk means:
"apply to all functions".
Transform
Virtualize
Flatten
Split
InitOpaque
EncodeLiterals
EncodeArithmetic
AddOpaque
AntiTaintAnalysis
UpdateOpaque
Ident
InitEntropy
AntiAliasAnalysis
InitBranchFuns
RandomFuns
InitImplicitFlow
Functions
check
check
main
*
*
*
*
*
*
*
*
*
main
check
check
[42] David Molnar, Xue Cong Li, and David Wagner. Dy-
namic Test Generation to Find Integer Bugs in x86 Bi-
nary Linux Programs. In USENIX Security Symposium,
2009.
[43] Andre Pawlowski, Moritz Contag, and Thorsten Holz.
Probfuscation: an obfuscation approach using proba-
bilistic control ﬂows. In Detection of Intrusions and
Malware, and Vulnerability Assessment (DIMVA), 2016.
[44] Hui Peng, Yan Shoshitaishvili, and Mathias Payer. T-
fuzz: fuzzing by program transformation. In IEEE Sym-
posium on Security and Privacy, 2018.
[45] Sanjay Rawat, Vivek Jain, Ashish Kumar, Lucian Co-
jocar, Cristiano Giuffrida, and Herbert Bos. VUzzer:
Application-aware Evolutionary Fuzzing. In Symposium
on Network and Distributed System Security (NDSS),
2017.
[46] Alexandre Rebert, Sang Kil Cha, Thanassis Avgerinos,
Jonathan M Foote, David Warren, Gustavo Grieco, and
David Brumley. Optimizing seed selection for fuzzing.
In USENIX Security Symposium, 2014.
[47] Sergej Schumilo, Cornelius Aschermann, Robert Gaw-
lik, Sebastian Schinzel, and Thorsten Holz.
kaﬂ:
Hardware-assisted feedback fuzzing for os kernels. In
USENIX Security Symposium, 2017.
[48] Nick Stephens, John Grosen, Christopher Salls, Andrew
Dutcher, Ruoyu Wang, Jacopo Corbetta, Yan Shoshi-
taishvili, Christopher Kruegel, and Giovanni Vigna.
Driller: Augmenting fuzzing through selective symbolic
execution. In Symposium on Network and Distributed
System Security (NDSS), 2016.
[49] Vincent Ulitzsch, Bhargava Shastry, and Dominik
Maier. Follow the white rabbit simplifying fuzz testing
using fuzzexmachina.
https://i.blackhat.com/
us-18/Thu-August-9/us-18-Ulitzsch-Follow-
The-White-Rabbit-Simplifying-Fuzz-Testing-
Using-FuzzExMachina.pdf/. Accessed: 2019-02-18.
[50] Tielei Wang, Tao Wei, Guofei Gu, and Wei Zou.
TaintScope: A checksum-aware directed fuzzing tool
for automatic software vulnerability detection. In IEEE
Symposium on Security and Privacy, 2010.
[51] Zhi Wang, Jiang Ming, Chunfu Jia, and Debin Gao. Lin-
ear obfuscation to combat symbolic execution. In Eu-
ropean Symposium on Research in Computer Security
(ESORICS), 2011.
[52] Maverick Woo, Sang Kil Cha, Samantha Gottlieb, and
David Brumley.
Scheduling black-box mutational
fuzzing. In ACM Conference on Computer and Commu-
nications Security (CCS), 2013.
USENIX Association
28th USENIX Security Symposium    1947