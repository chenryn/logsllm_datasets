System.Data.OleDb
带问号占位符（？）的位置参数
System.Data.Odbc
带间号占位符（？）的位置参数
下面展示了一个易受攻击的示例查询，我们使用SqlClient数据提供程序将其重写为.NET
格式的参数化语句：
string Sql = "SELECT * FROM users WHERE username=@username" +
_pxonssedg=pzonssed cNV
cmd = nev Sq1Command (Sql, con) ;
//将参数添加到SQL查询中
cmd. Parameters . Add ("gusername*,
//参数名
Sq1DbType.NVarChar,
16) ;
//数据类型
//长度
299
---
## Page 314
SQL注入攻击与防御（第2版）
cmd. Parameters .Add (*@passxord*,
Sq1DbType.NVarChar,
16) ;
cmd. Parameters , Value [*@username*] = username}
//设置参数
cmd. Parameters,Value[*@password*] = password;
//提供参数值
reader - cmd.ExecuteReader () 
接下来的例子展示了使用OracleClient数据提供程序重写的同一.NET格式的参数化语句。
请注意，是在命令文本（SQL字符串）中的参数前面添加了旨号，而不是在代码的其他位置：
OracleConnection con = ne OracleConnection (ConnectionString) :
"AND password=:password*;
cmd = new OracleCommand(Sql, con):
//将参数添加到SQL查询中
cmd. Parameters ,Add (*username*,
//参数名
OracleType.VarChar,
//数据类型
1 6) :
//长度
cnd. Parameters ,Add ("passvord",
OracleType.VarChar,
16) ;
cmd. Parameters Value[“username*] = username;
//设置参数
cmd. Parameters . Value[*password*]
fpaonssed=
//提供参数值
reader - cmd.ExecuteReader () 
最后这个例子展示了使用OleDbClient数据提供程序重写的同一.NET格式的参数化语句。
使用OleDbClient或OleDb数据提供程序时，必须按照正确的问号占位符顺序来添加参数：
OleDbConnection con = new OleDbConnection (ConnectionString) :
//将参数添加到 SQL查询中
cmd. Parameters .Add (*@username*,
//参数名
OraDbType , VarChar,
//数据类型
1 6) ;
//长度
cmd. Parameters .Add (*@passvord*,
OraDbType. VarChar,
1 6) ;
cmd. Parameters , Value [“@username*]
= username;
//设置参数
fpxoxssed  [pzoxssede。lonteA*szoqouexeg*puo
//提供参数值
reader = cmd.ExecuteReadez () ;
提示：
以ADO.NET方式使用参数化语句时，指定的关于语句的细节信息可以比在上述例子中指
定的更少或更多，例如，可以在参数构造器中只指定名称和值，一般来说，像上述例子中那样
指定参数（包括数据大小和类型）是一种良好的安全行为，因为这样可以在传递给数据库的数据
之上提供一种额外的、粗粒度的验证级别。
8.3.3PHP中的参数化语句
PHP同样包含很多用于访问数据库的框架。本节介绍三种最常见的框架：访问MySQL数
据库的mysqli包，PEAR:MDB2包（它替代了流行的PEAR:：DB包)以及新的PHP数据对象(PHP
300
---
## Page 315
第8章代码层防御
DataObject，PDO）框架，它们均为使用参数化语句提供了便利。
mysqli包适用于PHP5.x，可以访间MySQL4.1及之后的版本。它是最常用的数据库接口
之一，通过使用问号占位符来支持参数化语句。下面的例子展示了一条使用mysqli包的参数化
语句：
(qppxonssed'_aweuzasn'asouteoot) TtbsAu nau = uoos
=pxonseed aNV prepare ($sq1) =
//将参数添加到SQL查询中
Scmd->bind_param（ss"，Susername，$password)：//将参数作为字符串绑定
$cmd->execute () 
当在PHP中使用PostgreSQL数据库时，PHP5.1.0引入了一个简单的方法以便使用参数化
的查询语句。该方法名为pg_query_params)，它允许开发人员在同一行代码内提供SQL查询
和参数，比如下面的例子：
CNV ts=oweuzosn e3HM sxoen noda . Lo3T3s) swexedAzonb 6d - atnsoxs
password=$2", Array($username, Spassword)):
PEAR:：MDB2包是一种被广泛使用且独立于供应商的数据库访间框架。MDB2支持使用冒
号字符的命名参数和间号占位符两种方式来定义参数。下面的例子展示了如何使用带问号占位
符的MDB2来构造参数化语句。请注意以数组方式传递并映射到查询中的占位符的数据和类型：
Smdb2 = & MDB2::factory (Sdsn) ;
Stypes = array(*text', 'text');
//设置数据类型
$cmd - $mdb2->prepare ($sq1, $types, MDS2_PREPARE_MANIP) ;
Sdata = array($username, $password) :
//要传运的参数
Sresult = $cmd->execute (Sdata):
PDO包含在PHP5.1及之后的版本中。它是一个面向对象且独立于供应商的数据层，用于
访问数据库。PDO既支持使用冒号字符的命名参数，也支持使用问号占位符定义的参数。下面
的例子展示了如何使用带命名参数的PDO来构造参数化语句：
f(tbes) oxedoxdbindParam(*:username′, Susername, PDO::PARAM_STR, 12) /
Sstmt->bindParam(*:passeord′, Spassvord, PDO::PARAM_STR, 12) ;
() oqnoexe<-w8s
8.3.4PL/SQL中的参数化语句
OraclePL/SQL同样支持在数据库层代码中使用参数化查询.PL/SQL支持使用带编号的冒
号字符（例如：I)来绑定参数。下面的例子展示了如何使用带绑定参数的PL/SQL在匿名的
PL/SQL块中构造参数化语句：
DECLARE username varchar2 (32) /
passvord varchar2 (32) :
301
---
## Page 316
SQL注入攻击与防御（第2版）
result integer;
and passvord=:2' into result using username, password;
 username=: 1
END,
8.4移动应用中的参数化语句
在移动应用程序中，既可以从远程服务器加载数据，也可以将数据存储在本地数据库中。
当从远程加载数据时，必须将SQL注入保护构建在提供数据的服务中。如果应用程序使用的
是本地数据库，就必须在应用程序代码中实现SQL注入保护。基于iOS 和Android的设备都
具有内建于设备（in-device）的数据库支持，并提供了创建、更新和查询这些数据库的API。
8.4.1iOS应用程序中的参数化语句
对于iOS系统，用于开发应用的API通过SQLite库libsqlite3.dylib支持SQLite。如果直接
使用 SQLite(而不是通过 Apple 框架 Core Data)，那么最流行的框架是 FMDB。使用FMDB 框
架时，可以使用executeUpdateO方法构建参数化的insert 语句：
[db executeUpdate:@*INSERT INTO artists (name) VALUES (?)*,
@"Sinead O'Connoz*]:
与之类似，如果想查询数据库，可以使用exccuteQueryO方法：
3a3HM s5uos Wo8a . o3TaSe1A1en0eqnoaxe qp] = sa. 1egatnse8
artist=?", @"sinead o*Connor"];
8.4.2Android应用程序中的参数化语句
Android设备也包含了用于访间SQLite数据库子系统的API。该API支持参数化语句，开
发人员可以分别提供查询和数据。
对于insert语句，可以使用SQLiteStatement类：
statement - db.compileStatement (*INSERT INTO artists (name) VALUES (?) *) ;
statement,bind(1, "sinead O'Connor") ;
statement,executeInsert ():
当查询数据库时，只须在SQLite-Database对象上直接使用queryO方法即可。该方法接收
一个较长的参数列表，其中的两个参数允许我们构建查询模板并绑定参数：
db . query ("songs*, 
*/ u2nqaz 0q suumoo ▪/ (ata。 1 [ jbutxas nau
"artist = ?" /* where clause */,
nu11 /* group by */,
nul1 /* having */,
nul1 /* order by */
) ;
302
---
## Page 317
第8章代码层防御
8.4.3HTML5浏览器存储中的参数化语句
在HTML5 标准中可以使用两种类型的存储—WebSQL Database 规范和WebStorage 规
范。W3C已经不再活跃地维护Web SQLDatabase规范。该规范允许开发人员构建客户端 SQL
数据库，在浏览器中通常使用SQLite来实现，可以使用JavaScript米创建和查询这种数据库。
该规范中包含了一个简单的方法用于创建参数化查询，即使用executeSqlO方法：
t.executeSql (*SELECT * FROM songs WHERE artist=? AND song=?′, [artist,
songName], function (t, data)(
//对数据执行某些操作
}) ;
在上面的代码中，t代表事务（transaction)，SQL语句将在该事务中执行。在SQL语句中使
用问号作为占位符，并提供了一个参数数组，该数组中元素的顺序就是这些参数应用于SQL
语句的顺序。最后一个参数是回调函数，用于处理从数据库返回的数据。
WebStorage规范则使用setItemO、getltemO和removeltemO等方法，提供了一种简单的键/
值对的存储方式。在该规范中并没有通过字符串连接来构建语句的查询语言，因此类似于SQL
注入这样的攻击对Web Storage无效。
8.5输入验证
输入验证是指测试应用程序接收到的输入，以保证其符合应用程序中标准定义的过程，它
可以简单到将参数限制成某种类型，也可以复杂到使用正则表达式或业务逻辑来验证输入。有
两种不同类型的输入验证方法：白名单验证（有时称为包含验证或正验证）和黑名单验证（有时称
为排除验证或负验证）。接下来将会详细介绍这两种验证以及如何使用Java、C#和PHP格式的
验证输入来防止SQL注入。
提示：
执行输入验证时，在做输入验证决策之前，应始终保证输入处于规范（最简单的）格式，这
可能包括将输入编码成更简单的格式或者在期望出现规范输入的位置拒绝那些非规范格式的
输入，我们将在本章后面的单独解决方案中介绍规范化。
8.5.1白名单
白名单验证是只接收已记录在案的良好输入的操作。它在接收输入并做进一步处理之前验
证输入是否符合所期望的类型、长度或大小、数字范围或其他格式标准。例如，要验证输入值
是个信用卡编号，则可能包括验证输入值只包含数字、总长度在13和16之间并且准确通过了
Luhn公式（一种根据卡号最后一位校验位来计算数字有效性的公式）的业务逻辑校验。
使用白名单验证时，应考虑下列要点：
·已知的值：对于输入的数据是否存在一个已知的有效值的列表？输入的值是否提供了
某种特征，可以查找这种特征以确定输入的值是否正确？
·数据类型：数据类型正确么？如果输入值应该是数字类型，它是否恰好为数字？如果
输入值应该是正数，它是否相反是个负数？
---
## Page 318
SQL注入攻击与防御（第2版）
·数据大小：如果数据是个字符串，其长度是否正确，是否小于期望的最大长度？如果
数据是个二进制大对象，它是否小于期望的最大大小？如果数据是个数字，它的大小
或精度是否是正确？（例如，如果期望的是个整数，传递的数字是否过大，是否超出了
整数的范围？）
·数据范围：如果数据是数字类型，它是否位于该数据类型期望的数值范围内？
·数据内容：数据看起来是否属于期望的数据类型？例如，如果应该是个邮政编码（ZIP
Code)，它是否满足邮政编码期望的属性，是否只包含期望的数据类型所期望的字符
集？如果提交一个名称值，通常只期望出现某些标点符号（单引号和字符重音），而其他
字符，比如小于号（)，则不期望出现。
实现内容验证的常用方法是使用正则表达式。下面是一个简单的正则表达式，它验证字符
串中是否包含美国邮政编码：
^\d(5) (1d{4)) 7$
在本例中，该正则表达式按下列规则匹配5位和5位加4位的邮政编码：
·d（5}：准确匹配字符串开头的5位数字。