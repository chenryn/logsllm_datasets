标识，显示连接正在被创建，并返回指向带有唯一标识的dbConnection类型值的指针。唯一
标识是通过 atomic.AddInt32 函数生成的。这个函数可以安全地增加包级变量 idCounter
的值。现在有了资源以及工厂函数，我们可以配合使用pool包了。
接下来让我们看一下main函数的代码，如代码清单7-24所示。
代码清单7-24 pool/main/main.go：第48行到第55行
48 var wg sync.WaitGroup
49 wg.Add(maxGoroutines)
50
51 // 创建用来管理连接的池
52 p, err := pool.New(createConnection, pooledResources)
53 if err != nil {
54 log.Println(err)
55 }
在第48行，main函数一开始就声明了一个WaitGroup值，并将WaitGroup的值设置为
要创建的goroutine的数量。之后使用pool包里的New函数创建了一个新的Pool类型。工厂
函数和要管理的资源的数量会传入 New 函数。这个函数会返回一个指向 Pool 值的指针，并检
查可能的错误。现在我们有了一个Pool类型的资源池实例，就可以创建goroutine，并使用这个
资源池在goroutine之间共享资源，如代码清单7-25所示。
代码清单7-25 pool/main/main.go：第57行到第66行
57 // 使用池里的连接来完成查询
58 for query := 0; query < maxGoroutines; query++ {
59 // 每个goroutine需要自己复制一份要
60 // 查询值的副本，不然所有的查询会共享
61 // 同一个查询变量
62 go func(q int) {
63 performQueries(q, p)
64 wg.Done()
65 }(query)
66 }
代码清单 7-25 中用一个 for 循环创建要使用池的 goroutine。每个 goroutine 调用一次
performQueries函数然后退出。performQueries函数需要传入一个唯一的ID值用于做日
志以及一个指向Pool的指针。一旦所有的goroutine都创建完成，main函数就等待所有goroutine
执行完毕，如代码清单7-26所示。
代码清单7-26 pool/main/main.go：第68行到第73行
68 // 等待goroutine结束
69 wg.Wait()
70
71 // 关闭池
72 log.Println("Shutdown Program.")
73 p.Close()
在代码清单7-26中，main函数等待WaitGroup实例的Wait方法执行完成。一旦所有goroutine
都报告其执行完成，就关闭Pool，并且终止程序。接下来，让我们看一下performQueries函数。
这个函数使用了池的Acquire方法和Release方法，如代码清单7-27所示。
代码清单7-27 pool/main/main.go：第76行到第91行
76 // performQueries用来测试连接的资源池
77 func performQueries(query int, p *pool.Pool) {
78 // 从池里请求一个连接
79 conn, err := p.Acquire()
80 if err != nil {
81 log.Println(err)
82 return
83 }
84
85 // 将该连接释放回池里
86 defer p.Release(conn)
87
88 // 用等待来模拟查询响应
89 time.Sleep(time.Duration(rand.Intn(1000)) * time.Millisecond)
90 log.Printf("QID[%d] CID[%d]\n", query, conn.(*dbConnection).ID)
91 }
代码清单7-27展示了performQueries的实现。这个实现使用了pool的Acquire方法
和Release方法。这个函数首先调用了Acquire方法，从池里获得dbConnection。之后会
检查返回的 error 接口值，在第 86 行，再使用 defer 语句在函数退出时将 dbConnection
释放回池里。在第89行和第90行，随机休眠一段时间，以此来模拟使用dbConnection工作
时间。
7.3 work
work 包的目的是展示如何使用无缓冲的通道来创建一个 goroutine 池，这些 goroutine 执行
并控制一组工作，让其并发执行。在这种情况下，使用无缓冲的通道要比随意指定一个缓冲区大
小的有缓冲的通道好，因为这个情况下既不需要一个工作队列，也不需要一组 goroutine 配合执
7.3 work 169
行。无缓冲的通道保证两个 goroutine 之间的数据交换。这种使用无缓冲的通道的方法允许使用
者知道什么时候goroutine池正在执行工作，而且如果池里的所有goroutine都忙，无法接受新的
工作的时候，也能及时通过通道来通知调用者。使用无缓冲的通道不会有工作在队列里丢失或者
卡住，所有工作都会被处理。
让我们来看一下work包里的work.go代码文件，如代码清单7-28所示。
代码清单7-28 work/work.go
01 // Jason Waldrip协助完成了这个示例
02 // work包管理一个goroutine池来完成工作
03 package work
04
05 import "sync"
06
07 // Worker必须满足接口类型，
08 // 才能使用工作池
09 type Worker interface {
10 Task()
11 }
12
13 // Pool提供一个goroutine池，这个池可以完成
14 // 任何已提交的Worker任务
15 type Pool struct {
16 work chan Worker
17 wg sync.WaitGroup
18 }
19
20 // New创建一个新工作池
21 func New(maxGoroutines int) *Pool {
22 p := Pool{
23 work: make(chan Worker),
24 }
25
26 p.wg.Add(maxGoroutines)
27 for i := 0; i < maxGoroutines; i++ {
28 go func() {
29 for w := range p.work {
30 w.Task()
31 }
32 p.wg.Done()
33 }()
34 }
35
36 return &p
37 }
38
39 // Run提交工作到工作池
40 func (p *Pool) Run(w Worker) {
41 p.work <- w
42 }
43
170 第7章 并发模式
44 // Shutdown等待所有goroutine停止工作
45 func (p *Pool) Shutdown() {
46 close(p.work)
47 p.wg.Wait()
48 }
代码清单 7-28 中展示的 work 包一开始声明了名为 Worker 的接口和名为 Pool 的结构，
如代码清单7-29所示。
代码清单7-29 work/work.go：第07行到第18行
07 // Worker必须满足接口类型，
08 // 才能使用工作池
09 type Worker interface {
10 Task()
11 }
12
13 // Pool提供一个goroutine池，这个池可以完成
14 // 任何已提交的Worker任务
15 type Pool struct {
16 work chan Worker
17 wg sync.WaitGroup
18 }
代码清单7-29的第09行中的Worker接口声明了一个名为Task的方法。在第15行，声
明了名为 Pool 的结构，这个结构类型实现了 goroutine 池，并实现了一些处理工作的方法。这
个结构类型声明了两个字段，一个名为work（一个Worker接口类型的通道），另一个名为wg
的sync.WaitGroup类型。
接下来，让我们来看一下work包的工厂函数，如代码清单7-30所示。
代码清单7-30 work/work.go：第20行到第37行
20 // New创建一个新工作池
21 func New(maxGoroutines int) *Pool {
22 p := Pool{
23 work: make(chan Worker),
24 }
25
26 p.wg.Add(maxGoroutines)
27 for i := 0; i < maxGoroutines; i++ {
28 go func() {
29 for w := range p.work {
30 w.Task()
31 }
32 p.wg.Done()
33 }()
34 }
35
36 return &p
37 }
代码清单 7-30 展示了 New 函数，这个函数使用固定数量的 goroutine 来创建一个工作池。
goroutine的数量作为参数传给New函数。在第22行，创建了一个Pool类型的值，并使用无缓
冲的通道来初始化work字段。
之后，在第26行，初始化WaitGroup需要等待的数量，并在第27行到第34行，创建了
同样数量的goroutine。这些goroutine只接收Worker类型的接口值，并调用这个值的Task方
法，如代码清单7-31所示。
代码清单7-31 work/work.go：第28行到第33行
28 go func() {
29 for w := range p.work {
30 w.Task()
31 }
32 p.wg.Done()
33 }()
代码清单7-31 里的for range 循环会一直阻塞，直到从work 通道收到一个Worker 接
口值。如果收到一个值，就会执行这个值的 Task 方法。一旦 work 通道被关闭，for range
循环就会结束，并调用WaitGroup的Done方法。然后goroutine终止。
现在我们可以创建一个等待并执行工作的 goroutine 池了。让我们看一下如何向池里提交工
作，如代码清单7-32所示。
代码清单7-32 work/work.go：第39行到第42行
39 // Run提交工作到工作池
40 func (p *Pool) Run(w Worker) {
41 p.work <- w
42 }
代码清单7-32展示了Run 方法。这个方法可以向池里提交工作。该方法接受一个Worker
类型的接口值作为参数，并将这个值通过work通道发送。由于 work通道是一个无缓冲的通道，
调用者必须等待工作池里的某个 goroutine 接收到这个值才会返回。这正是我们想要的，这样可
以保证调用的Run返回时，提交的工作已经开始执行。
在某个时间点，需要关闭工作池。这是Shutdown方法所做的事情，如代码清单7-33所示。
代码清单7-33 work/work.go：第44行到第48行
44 // Shutdown等待所有goroutine停止工作
45 func (p *Pool) Shutdown() {
46 close(p.work)
47 p.wg.Wait()
48 }
代码清单7-33中的Shutdown方法做了两件事，首先，它关闭了work通道，这会导致所
有池里的 goroutine 停止工作，并调用 WaitGroup 的 Done 方法；然后，Shutdown 方法调用
WaitGroup的Wait方法，这会让Shutdown方法等待所有goroutine终止。
我们看了work包的代码，并了解了它是如何工作的，接下来让我们看一下main.go源代码
文件中的测试程序，如代码清单7-34所示。
代码清单7-34 work/main/main.go
01 // 这个示例程序展示如何使用work包
02 // 创建一个goroutine池并完成工作
03 package main
04
05 import (
06 "log"
07 "sync"
08 "time"
09
10 "github.com/goinaction/code/chapter7/patterns/work"
11 )
12
13 // names提供了一组用来显示的名字
14 var names = []string{
15 "steve",
16 "bob",
17 "mary",
18 "therese",
19 "jason",
20 }
21
22 // namePrinter使用特定方式打印名字
23 type namePrinter struct {
24 name string
25 }
26
27 // Task实现Worker接口
28 func (m *namePrinter) Task() {
29 log.Println(m.name)
30 time.Sleep(time.Second)
31 }
32
33 // main是所有Go程序的入口
34 func main() {
35 // 使用两个goroutine来创建工作池
36 p := work.New(2)
37