            3: High risk
    ​
    Sub-tag: 
        In which clause the payload can work. 这个字段表明  对应的测试 Payload 适用于哪种类型的 SQL 语句。一般来说，很多语句并不一定非要特定 WHERE 位置的。
    ​
        NOTE: for instance, there are some payload that do not have to be
        tested as soon as it has been identified whether or not the
        injection is within a WHERE clause condition.
    ​
        Valid values:
            0: Always
            1: WHERE / HAVING
            2: GROUP BY
            3: ORDER BY
            4: LIMIT
            5: OFFSET
            6: TOP
            7: Table name
            8: Column name
            9: Pre-WHERE (non-query)
    ​
        A comma separated list of these values is also possible.
在上面几个子标签中，我们经常见的就是 level/risk 一般来说，默认的 sqlmap 配置跑不出漏洞的时候，我们通常会启动更高级别
(level=5/risk=3) 的配置项来启动更多的 payload。
接下来我们再分析下面的标签
    Sub-tag: 
        Where to add our '  ' string.
    ​
        Valid values:
            1: Append the string to the parameter original value
            2: Replace the parameter original value with a negative random
                integer value and append our string
            3: Replace the parameter original value with our string
    ​
    Sub-tag: 
        The payload that will be used to exploit the injection point.
        这个标签只是大致说明 Payload 长什么样子，其实实际请求的 Payload 或者变形之前的 Payload 可能并不是这个 Payload，以 request 子标签中的 payload 为准。
    ​
    Sub-tag:  
        What to inject for this test.
        关于发起请求的设置与配置。在这些配置中，有一些是特有的，但是有一些是必须的，例如 payload 是肯定存在的，但是 comment 是不一定有的，char 和 columns 是只有 UNION 才存在
    ​
        Sub-tag: 
            The payload to test for. 实际测试使用的 Payload
    ​
        Sub-tag: 
            Comment to append to the payload, before the suffix.
    ​
        Sub-tag:  只有 UNION 注入存在的字段
            Character to use to bruteforce number of columns in UNION
            query SQL injection tests.
    ​
        Sub-tag:  只有 UNION 注入存在的字段
            Range of columns to test for in UNION query SQL injection
            tests.
    ​
    Sub-tag: 
        How to identify if the injected payload succeeded.
        由于 payload 的目的不一定是相同的，所以，实际上处理请求的方法也并不是相同的，具体的处理方法步骤，在我们后续的章节中有详细的分析。
    ​
        Sub-tag:  
            针对布尔盲注的特有字段，表示对比和 request 中请求的结果。
            Perform a request with this string as the payload and compare
            the response with the  response. Apply the comparison
            algorithm.
    ​
            NOTE: useful to test for boolean-based blind SQL injections.
    ​
        Sub-tag:  
            针对报错型注入的特有字段，使用正则表达式去匹配结果。
            Regular expression to grep for in the response body.
    ​
            NOTE: useful to test for error-based SQL injection.
    ​
        Sub-tag: 
            针对时间盲注
            Time in seconds to wait before the response is returned.
    ​
            NOTE: useful to test for time-based blind and stacked queries
            SQL injections.
    ​
        Sub-tag: 
            处理 UNION •注入的办法。
            Calls unionTest() function.
    ​
            NOTE: useful to test for UNION query (inband) SQL injection.
    ​
    Sub-tag: 
        Which details can be infered if the payload succeed.
        如果 response 标签中的检测结果成功了，可以推断出什么结论？
    ​
        Sub-tags: 
            What is the database management system (e.g. MySQL).
    ​
        Sub-tags: 
            What is the database management system version (e.g. 5.0.51).
    ​
        Sub-tags: 
            What is the database management system underlying operating
            system.
在初步了解了基本的 Payload 测试数据模型之后，我们接下来进行详细的检测逻辑的细节分析，因为篇幅的原因，我们暂且只针对布尔盲注和时间盲注进行分析，
### 真正的 Payload
我们在前面的介绍中发现了几个疑似 Payload 的字段，但是遗憾的是，上面的每一个 Payload 都不是真正的 Payload。实际 sqlmap
在处理的过程中，只要是从 *.xml 中加载的 Payload，都是需要经过一些随机化和预处理，这些预处理涉及到的概念如下：
  1. Boundary：需要为原始 Payload 的前后添加“边界”。边界是一个神奇的东西，主要取决于当前“拼接”的 SQL 语句的上下文，常见上下文：注入位置是一个“整形”；注入位置需要单引号/双引号(‘/”)闭合边界；注入位置在一个括号语句中。
  2. –tamper：Tamper 是 sqlmap 中最重要的概念之一，也是 Bypass 各种防火墙的有力的武器。在 sqlmap 中，Tamper 的处理位于我们上一篇文章中的 agent.queryPage() 中，具体位于其对 Payload 的处理。
  3. “Render”：当然这一个步骤在 sqlmap 中没有明显的概念进行对应，其主要是针对 Payload 中随机化的标签进行渲染和替换，例如：[INFERENCE] 这个标签通常被替换成一个等式，这个等式用于判断结果的正负`Positive/Negative`  
[RANDSTR] 会被替换成随机字符串  
[RANDNUM] 与 [RANDNUMn] •会被替换成不同的数字  
[SLEEPTIME] 在时间盲注中会被替换为 SLEEP 的时间
所以，实际上从 *.xml 中加载出来的 Payload 需要经过上面的处理才能真的算是处理完成。这个 Payload 才会在
agent.queryPage 的日志中输出出来，也就是我们 sqlmap -v3 选项看到的最终 Payload。
在上面的介绍中，我们又提到了一个陌生的概念，Boundary，并且做了相对简单的介绍，具体的 Boundary，我们在
{sqlmap_dir}/xml/boundaries.xml 中可以找到：
在具体的定义中，我们发现没见过的子标签如下：
        Sub-tag: 
            What is the parameter value type. 参数•类型（参数边界上下文类型）
    ​
            Valid values:
                1: Unescaped numeric
                2: Single quoted string
                3: LIKE single quoted string
                4: Double quoted string
                5: LIKE double quoted string
    ​