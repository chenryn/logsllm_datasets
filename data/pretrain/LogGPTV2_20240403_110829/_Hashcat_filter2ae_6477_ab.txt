比如说，在“–hex-charset”模式下，你将“-1”参数的值设置成了“ABBBBC”。那么Hashcat将会把“AB”、“BB”和“BC”分别当作三个字符，然后对这些十六进制数值所代表的明文数据进行暴力破解。如果此时将“-2”参数设置成了“808182”，那么在仅有“-1”和“-2”参数的情况下，Hashcat首先会比较“AB
80”的计算结果是否与待破解密码相匹配，如果不匹配，则比较“AB 81”、“AB 82”、“BB 80”、“BB
81”…以此类推，对所有可能的情况进行排列组合。
当然了，UTF-8编码是可变长度的。在俄语和阿拉伯语中，其每一个字符的UTF-8编码长度为两个字节，此时我们就需要使用到“-2”参数。还记得我们之前所说的基础码和字符码么？此时“-1”的值就是基础码，而“2”的值就是字符码。但是，在中文、韩文和日文之中，每一个字符的UTF-8编码需要占用三个字节，这也就意味着，我们需要使用到“-3”参数。原理其实是一样的，待会儿我会给大家演示。
接下来，我们还要使用到“-i”参数。比如说在破解俄语密码的情况下，因为我们已经设置好了“-1”和“-2”参数，那么在“-i”参数中，我们就要设置需要破解的密码长度。比如说，我们要破解的俄文单词由三个字母组成，那么“-i”参数就应该设置为“?1?2?1?2?1?2”。每个“?1?2”代表一个西里尔字母，我们假设密码由三个字母组成，所有就需要三个“?1?2”。而在单个字符由三字节UTF-8编码组成的情况下（例如中文），我们假设待破解的密码由两个汉字组成，那么“-i”参数应该为“?1?2?3?1?2?3”，因为每个“?1?2?3”代表一个汉字。
**  
**
**测试前的准备工作**
首先，我们要计算出待破解密码的md5值。在此给大家提供两种方法，一种是使用终端的md5命令，另外一种是通过HashMaker。
**方法一** ：md5 –s [密码字符串]
比如说，设置的密码为“安全”，那么我现在就要计算“安全”这个字符串的md5值：
**方法二**
：HashMaker［[下载地址](https://itunes.apple.com/us/app/hashmaker/id509733654?mt=12)］
为了方便进行测试，我们还要生成一些其他没有实际作用的md5值。除了第三行的md5值之外，其他都是一些其他字符的md5。
其他语言的md5生成方法是相同的，在此不再进行赘述。
**  
**
**中文密码破解**
相信大家最感兴趣的应该是中文密码的破解了，所以在此先演示中文密码的破解方法。实际上，破解原理和方法在文章中已经介绍到了，各种语言的破解过程其实也大同小异。
汉字的UTF-8编码占三个字节，例如汉字“一”的UTF-8编码为“E4 B8
80”。根据常用汉字的UTF-8编码［[编码表传送门](http://memory.loc.gov/diglib/codetables/9.1.html)］，“-1”参数应该设置成“e4e5e6e7e8e9”，“-2”和“-3”参数均为“808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebf”，这个编码范围足够覆盖常用的汉字了，其中还包括常用繁体字。
为了测试繁体字密码是否能够正常破解，于是我们还要在zh_cypher.txt中添加繁体字符串“数据”的md5：
除此之外，还有一些其他的设置参数需要简单介绍一下：
–pot-disable：禁止Hashcat将已破解的哈希添加到potfile中，添加该参数可以避免测试过程中出现某些问题。
–outfile-autohex-disable：将破解出的密码结果以明文形式显示出来，如果不输入这个参数的话，密码破解的结果将以十六进制的形式输出。如果密码结果输出为乱码的话，可以去掉该参数，以便得到密码的原始十六进制数值。
-m 0：设置待破解数据的哈希类型，“0”即为MD5。
-a 3：设置攻击模式，“模式3”代表暴力破解。
**_cypher.txt：存放待破解密码哈希的文件。
在破解中文的示例中，我们的参数命令应该如下所示（假设待破解密码为两个汉字）：
    ./hashcat --potfile-disable --outfile-autohex-disable -m 0 -a 3 ../zh_cypher.txt --hex-charset -1 e3e4e5e6e7e8e9 -2 808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebf -3 808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebf -i ?1?2?3?1?2?3
运行结果如下图所示：
我们可以看到，Hashcat已经将“安全”和“数据”这两个密码成功破解出来了。接下来，给大家演示韩语和俄语密码的破解。
**  
**
**韩语密码破解**
假设待破解密码为“”，中文即“安全”的意思。该字符串由两个韩语字组成，每个韩语字的UTF-8编码占三个字节［[编码表传送门](http://memory.loc.gov/diglib/codetables/9.3.html)］。korean_cypher.txt文件内容如下图所示：
参数命令如下：
    ./hashcat --potfile-disable --outfile-autohex-disable -m 0 -a 3 ../korean_cypher.txt --hex-charset -1 eaebecedee -2 808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebf -3 808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebf -i ?1?2?3?1?2?3
运行结果如下图所示：
**  
**
**俄语密码破解**
虽然俄语字母是西里尔字母的变体….［[西里尔字符UTF-8编码表](http://www.utf8-chartable.de/unicode-utf8-table.pl?start=1024&number=512)］
假设待破解密码为“сеть”，中文即“网络”的意思。该字符串由四个西里尔字母组成，cyrillic_cypher.txt文件内容如下图所示：
参数命令如下：
    ./hashcat --potfile-disable --outfile-autohex-disable -m 0 -a 3 ../cyrillic_cypher.txt --hex-charset -1 d0d1d2d3d4 -2 808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebf -i ?1?2?1?2?1?2?1?2
破解结果如下：
**  
**
**注意事项**
如果Hashcat无法输出正确的明文密码时，可以去掉命令中的“–outfile-autohex-disable”参数。比如说，以韩文密码的破解为例，去掉该参数之后，运行结果如下图所示：
那么破解结果即为“ec 95 88”和“ec a0 84”这两个字。有python基础的同学可以直接用python将其进行转码：
结果一目了然。为了方便大家查询各种语言文字的UTF-8编码，我给大家推荐一个网站［[传送门](http://www.utf8-chartable.de/)］。
**  
**
**总结**
暴力破解的基本思想就是对所有可能出现的情况进行一一确认，直到所有的情况都验证完毕。所以如果密码破译者可以利用社会工程学等技巧获取到有关密码的更多信息，那么将会极大地提高密码破译的速度。不过大家也清楚，任何密码的破解都只是时间问题…
无论是阿拉伯语也好，日语也罢，我们都可以利用这样的方法来破解这些非英文字符的密码。那么，阿拉伯语密码和日语密码的破解就留给各位同学当作家庭作业啦！