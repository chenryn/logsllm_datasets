   0x8048469  
eflags 
    0x282    ［ SF IF ］ 
cs 
    0x73    115 
ss 
    0x7b    123 
ds 
    0x7b    123 
es 
    0x7b    123 
fs 
    0x00     0 
gs 
    0x33    51  
(gdb) c 
Continuing. 
Breakpoint 1, 0x08048469 in comp () 
(gdb) info registers 
eax   
    0xffffff9e    -98 
ecx   
    0xbffff100    -1073745664 
edx   
    0xc8    200 
ebx   
    0xb7fc0000    -1208221696 
esp   
    0xbfffeeb8    0xbfffeeb8 
ebp   
    0xbfffeec8    0xbfffeec8 
esi   
    0xbffff104    -1073745660 
edi   
    0xbffff010    -1073745904 
eip   
    0x8048469 
   0x8048469  
eflags 
    0x286    [ PF SF IF ] 
cs 
    0x73    115 
ss 
    0x7b    123 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 23 章 函 数 指 针 
361 
ds 
    0x7b    123 
es 
    0x7b    123 
fs 
    0x0 
   0 
gs 
    0x33    51 
(gdb) bt 
#0  0x08048469 in comp () 
#1  0xb7e42872 in msort_with_tmp (p=p@entry=0xbffff07c, b=b@entry=0xbffff0f8, n=n@entry=2) 
    at msort.c:65 
#2  0xb7e4273e in msort_with_tmp (n=2, b=0xbffff0f8, p=0xbffff07c) at msort.c:45 
#3  msort_with_tmp (p=p@entry=0xbffff07c, b=b@entry=0xbffff0f8, n=n@entry=5) at msort.c:53 
#4  0xb7e4273e in msort_with_tmp (n=5, b=0xbffff0f8, p=0xbffff07c) at msort.c:45 
#5  msort_with_tmp (p=p@entry=0xbffff07c, b=b@entry=0xbffff0f8, n=n@entry=10) at msort.c:53 
#6  0xb7e42cef in msort_with_tmp (n=10, b=0xbffff0f8, p=0xbffff07c) at msort.c:45 
#7  __GI_qsort_r (b=b@entry=0xbffff0f8, n=n@entry=10, s=s@entry=4, cmp=cmp@entry=0x804844d , 
    arg=arg@entry=0x0) at msort.c:297 
#8  0xb7e42dcf in __GI_qsort (b=0xbffff0f8, n=10, s=4, cmp=0x804844d ) at msort.c:307 
#9  0x0804850d in main () 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 2244 章
章    3322 位
位系
系统
统处
处理
理 6644 位
位数
数据
据  
32 位系统的通用寄存器GPR都只能容纳 32 位数据，所以这种平台必须把 64 位数据转换为一对 32 位
数据才能进行运算。
①
24.1  64 位返回值 
本节围绕下述程序进行演示。 
#include  
uint64_t f () 
{ 
       return 0x1234567890ABCDEF; 
}; 
24.1.1  x86 
32 位系统用寄存器组合 EDX:EAX 来回传 64 位值。 
指令清单 24.1  Optimizing MSVC 2010 
_f 
PROC 
mov      eax, -1867788817  
; 90abcdefH 
mov      edx, 305419896 
; 12345678H 
ret      0 
_f 
ENDP 
24.1.2  ARM 
ARM 系统用寄存器组合 R0-R1 来回传 64 位值。其中，返回值的高 32 位存储在 R1 寄存器中，低 32
位存储于 R0 寄存器中。 
指令清单 24.2  Optimizing Keil 6/2013 (ARM mode) 
||f|| PROC 
  LDR  
r0,|L0.12| 
  LDR  
r1,|L0.16| 
  BX  
lr 
  ENDP 
|L0.12| 
  DCD  
0x90abcdef 
|L0.16| 
  DCD  
0x12345678 
24.1.3  MIPS 
MIPS 系统使用 V0-V1($2-$3)寄存器对来回传 64 位值。其中，返回值的高 32 位存储在 V0($2)寄存器
中，低 32 位存储于$V1($3)寄存器中。 
① 16 位系统处理 32 位数据时同样采取了这种拆分数据的处理方法，详情请参见本书 53.4 节。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 24 章 32 位系统处理 64 位数据 
363 
指令清单 24.3  Optimizing GCC 4.4.5 (assembly listing) 
        li   
$3,-1867841536  
# 0xffffffff90ab0000 
        li   
$2,305397760 
# 0x12340000 
        ori  
$3,$3,0xcdef 
        j   
$31 
        ori  
$2,$2,0x5678 
指令清单 24.4  Optimizing GCC 4.4.5 (IDA) 
                lui     $v1, 0x90AB 
                lui     $v0, 0x1234 
                li      $v1, 0x90ABCDEF 
                jr      $ra 
                li      $v0, 0x12345678 
24.2  参数传递及加减运算 
本节围绕下列程序进行演示。 
#include  
uint64_t f_add (uint64_t a, uint64_t b) 
{ 
        return a+b; 
}; 
void f_add_test () 
{ 
#ifdef __GNUC__ 
        printf ("%lld\n", f_add(12345678901234, 23456789012345)); 
#else 
        printf ("%I64d\n", f_add(12345678901234, 23456789012345)); 
#endif 
}; 
uint64_t f_sub (uint64_t a, uint64_t b) 
{ 
        return a-b; 
}; 
24.2.1  x86 
使用 MSVC 2012（启用选项/Ox/Ob1）编译上述程序，可得到如下所示的代码。 
指令清单 24.5  Optimizing MSVC 2012 /Ob1 
_a$ = 8 
; size = 8 
_b$ = 16 
; size = 8 
_f_add   PROC 
          mov 
eax, DWORD PTR _a$[esp-4] 
          add 
eax, DWORD PTR _b$[esp-4] 
          mov 
edx, DWORD PTR _a$[esp] 
          adc 
edx, DWORD PTR _b$[esp] 
          ret     0 
_f_add ENDP 
_f_add_test PROC 
         push 
5461  
; 00001555H 
         push 
1972608889  
; 75939f79H 
         push 
2874  
; 00000b3aH 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
364 
逆向工程权威指南（上册） 
         push 
1942892530  
; 73ce2ff_subH 
         call 
_f_add 
         push 
edx 
         push 
eax 
         push 
OFFSET $SG1436 ; ’%I64d’, 0aH, 00H 
         call 
_printf 
         add  
esp, 28 
         ret  
0 
_f_add_test ENDP 
_f_sub  PROC 
         mov  
eax, DWORD PTR _a$[esp-4] 
         sub  
eax, DWORD PTR _b$[esp-4] 
         mov  
edx, DWORD PTR _a$[esp] 
         sbb  
edx, DWORD PTR _b$[esp] 
         ret  
0 
_f_sub ENDP 
在 f1_test()函数中，每个 64 位数据都被拆分为了 2 个 32 位数据。在内存中，高 32 位数据在前（高地
址位），低 32 位在后。 
加减法运算的处理方法也完全相同。 
在进行加法运算时，先对低 32 位相加。如果产生了进位，则设置 CF 标识位。然后 ADC 指令对高 32
位进行运算。如果此时 CF 标识位的值为 1，则再把高 32 位的运算结果加上 1。 
减法运算也是分步进行的。第一次的减法运算可能影响 CF 标识位。第二次减法运算会根据 CF 标识位
把借位代入计算结果。 
在 32 位系统中，函数在返回 64 位数据时都使用 EDX:EAX 寄存器对。当 f_add()函数的返回值传递给
printf()函数时，就可以清楚地观测到这一现象。 
使用 GCC 4.8.1（启用选项–O1–fno–inline）编译上述程序，可得到如下所示的代码。 
指令清单 24.6  GCC 4.8.1 -O1 -fno-inline 
_f_add: 
         mov     eax, DWORD PTR [esp+12] 
         mov     edx, DWORD PTR [esp+16] 
         add     eax, DWORD PTR [esp+4] 
         adc     edx, DWORD PTR [esp+8] 
         ret 
_f_add_test: 
         sub     esp, 28 
         mov     DWORD PTR [esp+8], 1972608889 
; 75939f79H 
         mov     DWORD PTR [esp+12], 5461 
; 00001555H 
         mov     DWORD PTR [esp], 1942892530  
; 73ce2ff_subH 
         mov     DWORD PTR [esp+4], 2874 
; 00000b3aH 
         call    _f_add 
         mov     DWORD PTR [esp+4], eax 
         mov     DWORD PTR [esp+8], edx 
         mov     DWORD PTR [esp], OFFSET FLAT:LC0 ; "%lld\12\0" 
         call    _printf 
         add     esp, 28 
         ret 
_f_sub: 
         mov     eax, DWORD PTR [esp+4] 
         mov     edx, DWORD PTR [esp+8] 
         sub     eax, DWORD PTR [esp+12] 
         sbb     edx, DWORD PTR [esp+16] 
         ret 
GCC 的编译结果和 MSVC 的编译结果相同。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 24 章 32 位系统处理 64 位数据 
365 
24.2.2  ARM 
指令清单 24.7  Optimizing Keil 6/2013 (ARM mode) 
f_add PROC 
         ADDS     r0,r0,r2 
         ADC      r1,r1,r3 
         BX       lr 
         ENDP 
f_sub PROC 
         SUBS     r0,r0,r2 
         SBC      r1,r1,r3 
         BX       lr 
         ENDP 
f_add_test PROC 
         PUSH     {r4,lr} 
         LDR      r2,|L0.68| ; 0x75939f79 
         LDR      r3,|L0.72| ; 0x00001555 
         LDR      r0,|L0.76| ; 0x73ce2ff2 
         LDR      r1,|L0.80| ; 0x00000b3a 
         BL       f_add 
         POP      {r4,lr} 
         MOV      r2,r0 
         MOV      r3,r1 
         ADR      r0,|L0.84| ; "%I64d\n" 
         B         __2printf 
         ENDP 
|L0.68| 
         DCD      0x75939f79 
|L0.72| 
         DCD      0x00001555 
|L0.76| 
         DCD      0x73ce2ff2 
|L0.80| 
         DCD      0x00000b3a 
|L0.84| 
         DCB      "%I64d\n",0 
首个 64 位值被拆分存储到 R0 和 R1 寄存器里，第二个 64 位值则存储于 R2 和 R3 寄存器对。ARM 平
台的指令集里有可进行进位加法运算的 ADC 指令和借位减法运算的 SBC 指令。 
需要注意的是：在对 64 位数据的低 32 位数据进行加减运算时，需要使用 ADDS 和 SUBS 指令。指令
名词中的-S 后缀代表该指令会设置进（借）位标识（Carry Flag）。它们设置过的进借位标识将被高 32 位运
算的 ADC/SBC 指令读取并纳入运算结果之中。 
没有-S 后缀的 ADD 和 SUB 指令则不会设置借/进位标识位。 
24.2.3  MIPS 
指令清单 24.8  Optimizing GCC 4.4.5 (IDA) 
f_add: 
; $a0 - high part of a 
; $a1 - low part of a 
; $a2 - high part of b 
; $a3 - low part of b 