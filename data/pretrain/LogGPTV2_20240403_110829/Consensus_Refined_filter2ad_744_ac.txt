quorum may ever vote for any other value. To anticipate
the unreliability of the distributed setting, we always allow
a process not to vote, modeled as a vote for ⊥. We formalize
this as the following predicate, where v_hist : N → (Π (cid:2) V )
is a voting history:
no_defection(v_hist, r_votes, r) (cid:3)
∀r
(cid:2)
 2N
7:
3
8:
9:
10:
decisionp := w
then
(cid:2)HOr
p
last_votep := smallest most often received vote
times then
(cid:2) > 2N
3
if
(cid:2)
(cid:2)
Figure 4. The HO model of OneThirdRule
B. Implementations: Fast Consensus
The optimized model abstracts several variants of consen-
sus algorithms found in the literature. We prove that it is
reﬁned by OneThirdRule from [12] and its generalization AT,E
from [4] (assuming no Byzantine processes). Moreover, it also
describes the algorithms used in the ﬁrst round of the protocol
from [7] and in the fast rounds of Fast Paxos [24]. As an
example, Figure 4 shows the HO model of the OneThirdRule
algorithm, presented in pseudocode for simplicity.
In OneThirdRule, quorums are sets of more than 2N
3
processes. Hence,
the decision rule in lines 7–8 ensures
the d_guard from the (optimized) Voting model, where the
reﬁnement relation relates the state variables of each process
p to the p-values of the ﬁelds with same names in the abstract
model. Given the new quorum size, deﬁning guaranteed visible
sets to also be of size greater than 2N
3 ensures conditions (Q2)
and (Q3). As OneThirdRule is a concrete, fully distributed
algorithm, we replace guaranteed visible sets by guaranteed
HO sets, reﬂected in the communication predicate required
for termination:
∃r. Punif (r) ∧ ∃r
(cid:2)(cid:2) ∈ {r, r
> r.∀r
(cid:2)}.∀p.
(cid:2)
(cid:2)
(cid:2)HO
(cid:2)
(cid:2)
(cid:2) >
r(cid:2)(cid:2)
p
(cid:2)
2N
3
The most interesting part of the algorithm is lines 9–10,
which guarantees no defection and at the same time directs the
votes such that they eventually converge to a common value.
By (Q2) and the HO set condition in line 9, we know that only
one received value could have been voted for by a quorum; the
greater than 2N
3 requirement on quorums and HO sets ensures
that it is the one that received the most votes. If there is a tie
in the number of votes, no value could have received a quorum
of votes, and processes may switch their votes freely. Either
way, no process will defect by choosing a value that received
the most votes. Choosing the smallest such value provides
the required vote convergence. The communication predicate
ensures the existence of a round in which all processes adopt
the same vote, and of a later round in which the processes
receive enough votes to decide and terminate.
In OneThirdRule, a round of voting requires one round
of communication. This also applies to the other algorithms
of this type, earning them the name Fast Consensus. If all
the processes start with the same value v,
the algorithm
can terminate within a single failure-free round. Otherwise,
the algorithm still terminates within two rounds that satisfy
the above communication predicate. The speed comes at a
price though. From the communication predicate, we see that
OneThirdRule requires the HO sets to contain more than
2N
3 processes. Hence f < N
3 , where f is, as before, the
number of tolerated failures. It is not difﬁcult to see that this
is optimal, given conditions (Q2) and (Q3). It is, however,
possible to implement the Voting model without the additional
requirements on quorum sets; this will only require f < N
2 .
We will show how to do this in the next section. The price paid
is that the algorithms become more complicated and require
multiple communication steps to perform one round of voting.
VI. SAME VOTE
Fast Consensus resolved the situation from Figure 3 by
disambiguating the vote split. In this section, we take the other
approach, corresponding to the other branch from Figure 1:
we prevent the split from ever happening, thus eliminating the
problematic example completely. For this, all the votes cast
within a round must be the same. We allow the possibility that
some processes do not cast a vote. Formally, we will replace
the Voting round event v_round(r, r_votes, r_decisions) by
a Same Vote round sv_round(r, S, v, r_decisions), where the
processes in S vote for a value v ∈ V , and the others vote ⊥.
This requires vote agreement: all processes must agree on
the value of v. But this seems like a paradoxical, circular way
to solve consensus: having all processes agree on a single
value is exactly what consensus is about! There is, however,
a subtle difference between vote agreement and consensus.
Because we allow processes to vote ⊥, unlike for consensus,
it is not necessary that every process gets an (non-⊥) output
from vote agreement. Thus, vote agreement does not share
the termination requirement of consensus. However, to make
progress, we cannot drop this requirement completely, but we
instead relax it: we require that enough processes get an output
in some round. The relaxed termination requirement is now
collective. Each voting round contains one instance of vote
agreement; it is not necessary that all instances terminate, but
at least one must do so. Moreover, the outcomes of the different