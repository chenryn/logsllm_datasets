Calling kxvsn().
String 3
Sring 4
Calling spinli), nrtsvs().
String 5
Calling lxves().
Oracle按照上述次序依次调用相应函数，从而获取各个模块的版本信息。
81.2
X$KSMLRU表
官方文件《DiagnosingandResolving ErrorORA-04031》特别提到了这个数据表：
Oracle能够记录内存池内发生的、强制释放其他对象的内存占用情况，负责记录这种情况的数据表
是固定表xSksmlru，它可用来诊断内存异需消耗的其体原因，
如果内存池里发生了大量对象周期性释放的情况，那么这种问题会增加数据库的响应时间。而且当
这些对象再次被加载到内存池时，这一现象还会增加库缓存（library cache）互锁的概率。
固定表xSksmlru具有一个特性：只要出现了检索表的人为操作，那么这个表内的数据就会被立刻清
空，此外，该数据表只会存储内存占用最大的前几项记录，“查询后立刻清空”的设定，是为了凸显那些
先前并不那么耗费资源的内存分配情况，也就是说。每次检索所对应的时间段都是不同的，正因如此，数
据库用户应当妥善保管该表的查询结果，
换句话说，查询这个表不是问题，问题是查询后它会被立即清空。那么，清空表的具体原因是什么？
既然kqftab表和kqftap表含有XS-表的全部信息，我们可以继续使用前文介绍的oracle_tables 进行分析。
在oracle_tables 的返回结果里，我们看到：在制备XSKSMLRU 表的元素时，oracle 调用了ksmlrsO 函数。
指令清单 81.10Result of oracle tables
kgftab_element.name: [xsKsmLa0] 7: [kan1r]0x4 0x54 0x11 0xc 0xffffe0bb 0x5
0x00x000x00x00x0c6x010]*3d
0x00xx00x00x00x02ox12[xx1]ouruwedbx
0x0xxx00x00x2[xx]
kgftap_param,name=[KSML8Dus] 7: 0xb02 0x0 0x0 0x0 0x4 0x4 0x0
kqftap_param.nate=[KSML8S8RPO0L] ?: 0xb02 0x0 0x0 0x0 0x4 0x8 0x0
kgftap_param.name=[KsML8Cox] 7: 0x501 0x0 0x0 0x0 0x14 0xc 0x0
kgftap_paran.name*[KSMLRs12] 7: 0x2 0x0 0x0 0x0 0x4 0x20 0x0
0x0x 0 0x00x00x02x[]bx
kqft.ap_paran,name= [KSMLR3c&]
kqftap.paran.nane= [KSMLRO8v] 7: 0xb02 0x0 0x0 0x0 0x4 0x48 0x0
7: 0x501 0×0 0×0 0x9 0x20 0×28 0x0
① http:/www.oralab.net/METANOTES/DIAGNOSING%20AND%20RESOLVING%20ORA-04031%20ERROR.htm,
---
## Page 330
806
逆向工程权威指南（下册）
xo opxo bxo 0xo oxg 0x0 L[x0 1& [saErmesx]=oueu*uexed dengbx
kqftap_param,nane=[KseMLBADU] 7: 0x2 0x0 0x0 0x0 0x4 0x50 0x0
kqftap_paran,nane[KSMEa8sD] 7: 0x2 0x0 Dx0 0x0 0x4 0x58 0x0
kqftap.param.nane=[KsemaxID] ?: 0x2 0x0 0x0 0x0 0x4 0x54 0x0
kqftap_param,name=[KaE,xg0] 7: 0x2 0x0 0x0 0x0 0x4 0x60 0x0
kqftap_param,nase=[Kse58scD] ?: 0x2 0x0 Dx0 0x0 0x4 0x5c 0x0
kqftap_eLement. . fn1ksm1rs
kqgftap_element - fn2-SULL
tracer程序可以印证这个结果：每次查询XSKSMLRU表时，Oracle都会调用这个函数。
另外，我们还看到ksmsplu_spO函数和 ksmsplu_jpO函数都引用了ksmspluO 函数。即，无论是执行
ksmsplu_spO 函数、还是执行ksmsplu_jpO函数，最后都会调用ksmspluO函数。在ksmspluO结束之前，它
调用了memsetO函数。
指令清单81.11ksm.o
text:00434c50 1oc_434c50:
mo
edx, [ebp-4]
1 DATA XREF: -rdata:off_5E50EAf
-text:00434c50
text: 00434c53
mov
[esx], esi
text: 00434C57
nov
esi, [edi]
-text:00434C5A
[eax+4], es]
ad
nov
[edi], eax
edx, 1
text:00434062
Jnz
nov
[ebp-4], edx
1oc_434B7D
text: 00434c68
nov
[ebp+14h]
 text: 00434C68
text: 00434c6E
noV
nov
ebx,
esi,
[uot-dqe]
[ebp-0ch]
-text:00434C71
text: 00434C74
nov
le8
edi,
[ebp-8]
.cext: 00434C7A
Push
370h
esx,
[ecx+8Ch]
-text100434C7F
push
7SLze
push
0
: Va1
text:00434c82
 text: 00434C81
ca11
_intel_fast_menset
eax
;Dst
.text: 00434C87
add
esp, och
text: 00434c8A
nov
text: 00434C8c
pop
dqa *ds>
text: 00434C8D
retn
dqa
-text:00434C8D _ksmap1u
endp
含有memsct（block，0，size）的构造函数通常用于清空内存区域，如果我们阻i止它调用这个memset0函数，
那么将发生什么情况？
为此，我们在程序向memsetO函数传递参数的0x434C7A处设置断点、令调试程序tracer在此刻将程
序计数器（PC，即EIP）调整为0x434C8A，从面使程序“跳过”清除内存的memsetO函数。可以说，这
种“调试”相当于令程序在0x434C7A处无条件转移到0x434C8A。相关的tracer指令如下：
tracer -a:oracle.exe bpx=oracle,exe10x00434C7A,set (e1p, 0x00434c8A)
请注意：上述地址仅对Win32版本的Oracle RDBMS11.2有效。
经上述调试指令启动Oracle以后，无论查询XSKSMLRU表多少次，这个表都不会被清空了，当然，
不要在投入实用的业务服务器上进行这种测试，
或许这种调试的用处不大，或许这种修改有悼实用性原则。不过，当我们要查找特定的指令时，我们
可以采用这样的调试步骤！
81.3V$TIMER表
固定视图VSTIMER算得上是更新最频繁的视图之一了。
---
## Page 331
第81章Oracle RDBMS
807
VSTIME以百分之一秒为单位、记录实际运行时间，这个值以计时原点开始测算，因此具体数值与
操作系统相关，它会在4字节溢出时（大约历经497天后）循环，重新变为0.
上述内容摘自官方文档。
比较有趣的是：Win32版本的Oracle程序和Linux版本的程序，返回的时间截竞然是不同的。我们能
否找到生成返回值的函数呢？
下述操作表明，时间信息最终取自XSKSUTM表：
SQL> select * fron VSFIXED_VIEW_oEFINITION wbere viev_nanes*VSTIMER*;
VIEX_NAME
VIEX_DBFINITION
select HS8CS froe GVeTIMEx xbere Inst_id = USERBawv(*Instance*)
VFTIMER
SQL> select * fron V$FIXED_VIEW_0SFINITION where viev_nane=GV/TIMER*:
VIEX_SAME
VIEX_DBFINITION
GVFTIMER
select inst_id, ksutntim from x$ksutn
不过kqftab/kqftap表没有引用生成这项数值的函数。
指令清单 81.12Result of oracle tables
kqftab_element.nane:[x$Ksutx]?: [ksutm]0x1 0x4 0x4 0x0 0xffffc09b 0x3
kqftap_pazam.nase=[AD08] 7: 0x10917 0x0 0x0 0x0 0x4 0x0 0x0
kgftap_param,name=[IxDx] 7: 0x20b02 0x0 0x0 0x0 0x4 0x0 0x0
kgftap_param,name=[IxSt_1D] 7: 0xb02 0x0 0x0 0x0 0x4 0x0 0x0
kqftap_param.name=[KSUtrrI8] ?: 0x1302 0x0 0x0 0x0 0x4 0x0 0x1e
kqftap_element fn1=NULL
kqftap_element , fn2=NULL
当我们搜索字符串KSUTMTIM时，我们看到了下述函数：
kqfd_pes_ksuta_c proc near
J DATA X3EF: .rodata:080584E8
arg_0
• drord ptr
arg.8
8
▪ dvord ptr
= drord ptr
10h
arg_C
14h
push
nov
dqa
pash
dsa *dqa
[etp+arg_C]
Push
offset _2_STRING_1263_0 ; *KSUTMTIM*
offset ksugtm
push
push
posh
[ebp+arg_8]
ca11
kgfd_cfui_drain
[0"bx++dqa]
ppe
esp, 14h
nov
esp,
ebp
pop
retn
dga
① htp:/docs.oracle.oom/od/B28359_01/server.11/b28320/dynviews_3104.htm
---
## Page 332
808
逆向工程权威指南（下册）
kqfd_pRs_ksutn_c endp
面数据表 kqfd_tab_registry_0 引1用了 kqfd_DRN_ksutm_c 函数：
dd offset kqfd_oPs_ksutn_c
dd offset kqfd_tab1_fetch
dd 0
dd offset kqfd_pRs_ksutn_c
dd 0
打开Linuxx86版本的这个文件，可看到如下所示的代码。
指令清单81.13
ksuO
ksogtn
Froc near
var_1c
= byte ptr
arg_4
dvord ptr
-1Ch
0Ch
push
ebp
nov
sub
ebp,
ich
1ea
esp,
eaX:
push
[t"res+dqa]
ca11
s1gcs
eax
PoP
no9
edx, [ebp+arg_4]
ecx
nov
[edx], eax
eax,4
Pop
mo9
esp,
ebp
ebp
ksugtm
retn
dpua
在Win32版本的程序里，相应文件的有关指令几乎相同。
这是我们寻找的函数吗？我们通过下述指令验证一下：
tracer -a:oracle,exe bpf=oracle,exe1_ksugtm,args:2, dunp_args:0x4
然后在SQL*Pus里执行以下指令：
SQL> select • fron VSTIMER;
HSECS
27294929
HS8CS
27295006
SQL> select * fron VSTIMER;
HSECS
27295167
指令清单 81.14tracer output
TID=2428l (0) oracle.exe!_ksugtm (0x0, 0xd76c5f0) (ca1led fzom
+0xfad(0x56bb6d5))
Argument 2/2
TID24281(0) otacle.exe1_kaugtm () -> 0x4 (0x4)
0076C5F0: 38 C9
---
## Page 333
第81章
Oracle RDBMS
809
Argunent 2/2 dLfference
0D000000:D1 7C A0 01
*.1..
TID24281(0)oracle.exe1_ksogtm (0x0, 0xd76c5f0) (ca11ed fron
oracle,exe!_VInfreq_qerfxFetch/
+0xfad (0x56bb6d5))
Argunent 2/2
TID-24281 (0) oracle.exe1_ksogtm () => 0x4 (0x4)
0D76C5F0: 38 C9
*8.
Argunent 2/2 difference
0000000:1E7D A0 01
TID-2428i(0) oracle.exe1_ksogtx (0x0, 0xd76c5f0) (called Eron oracle,exe1_VInfreq_qerfxFetch/
Argunent 2/2
 +0xfad (0x56bb6d5))
TID=24281 (0) oracle.exe1_ksogt= () -> 0x4 (0x4)
0076c5F0: 38 C9
"8.
Argunent 2/2 difference
000
00: BF 7D A0 01
".)..
上述数据和我们在SQL*Plus看到的数据完全一样.它是函数的第二个参数，
然后我们再来分析Linuxx86程序里的 slgcs0函数：
slgcs
proc near
var_4
= dvord ptr -4
arg_.0
B 11d pzoxp =
push
ebp
push
mov
'dga
esp
A00
[ebp+rar_4], ebx
ca11
mov
$+5
eax,
[0"6xe+dqa]
pop
ebx
dou
/ PIC node
A0E
ebx,
offset
_GLOBAL_OFTSET_TABLE_
ca11
mov
Svord ptr [eax], 0 
push
sltrgatime64
; PIC node
push
DAh
push
edx
ca11
push
eax
_udivd13
: PIC aode
mOV
ebx,
esp,
[ebp+var_4]
add
10h
M0V
esp.
ebp
pop
ebP
81gca
endp
retn
这个函数调用了sltrgatime640，然后把返回值除以10.
在Win32版本的程序里，这个函数则是：
_s1gcs
proc near
1 _dbgerRunAct ions+1528
: CooE xXREF: _dbgefgHtE1ResetCount+15
db
nop
66h
push
mov
ebp,esp
ebp
eax, [ebp+8]
ca11
nov
dord ptr leax], 0
ds:_imp_GetTickCounte0 : GetTickCount ()
AO8
AOW
eax,
edx,
occcccccDh
eax
①有关除法运算的有关细节，请参见本书第41章。
---
## Page 334
810
逆向工程权威指南（下册）
shr
edx
edx, 3
T0V
esp，ebp
eax,
edx
pop
retn
ebp
_s1gcs
endp
Win32的结果就是GerTickCountO函数返回值的十分之一。
这就是Oracle在Win32下和 Linux x86下返回不同结果的根本原因—它调用了完全不同的操作系统
的数。
前面介绍过的oracle_tables工具能够处理kqfd_tab_registry_0.因此，我们可以用它分析“列”的值与
特定函数之间的关联关系：
[XSKsusGIF] [kqfd_oPs_xsusg_c]  [kqfd_tab1_fetch] [NuLL] [NUsL] [kqfd_oRN_ksuag_c]
[x$KsuTM] [kqfd_oPk_ksuta_c] [kqfd_tab1_fetch] [NULL] [NULL] [kqfd_ceN_ksutm_c]
①有关 GetTickCountO 函数,请参见 MSDN;https:/)
xdse(cRsA-A)gotFZsudopysapys
---
## Page 335
第82章
汇编指令与屏显字符
82.1EICAR
多数反病毒软件都用EICAR进行自检。EICAR是一个可以在MS-DOS平台上运行的应用程序。它仅
在屏幕上显示“EICAR-STANDARD-ANTIVIRUS-TEST-FILE!这样一个字符串。
EICAR最重要的特点是：它的每个字节都是可以在屏幕上显示出来的ASCII字符串。我们在文本编译
器里粘贴下列字符串，即可生成EICAR文件：
XS01PIeAP [4,PZX54 (P^) 7CC]7]SEICAR-STANDARD-ANTTVIRCS-TESTFTL&1$H+B*
EICAR文件的汇编指令如下：
 initial conditions: SP=0FrrEh, Ss:[SP]=0
 AX-0, SP=0
0100 58
pop
ax
0101 35 4F 21
ax, 214Fh
; AX = 214Fh and SP = 0
: Ax - 2147h, SP - FFrEh and S5: [FF] = 214Fh
0104 50
push
ax
 AX = 140h, SP = FFPEh
0105 25 40 41
and
and SS: [FFr8] = 214Fh
ax, 4140h
0108 50
 AX = 140h, SP =
FFrch,