the system needs the integration of a PKI, which is respon-
sible for the distribution of PKCs that are used for signa-
ture validation. We believe that the use of appropriate data 
structures  and  algorithms  can  compensate  many  of  the 
drawbacks mentioned above. 
3.2 Push model vs. pull model 
to 
In  the  so-called  “push”  model,  client,  server,  and  the 
certificate  management  infrastructure  are  all  involved  to 
varying degree in the authorization process. A client must 
maintain  (e.g.,  download  and  store)  its  certificates  and 
present  them  to  the  targeted  server  (verifier)  by  inserting 
them in its request message. The verifier must make access 
control  decisions  on  the  basis  of  this  information.  Natu-
rally, the verifier must check the correctness as well as the 
validity  of  the  presented  information.  The  infrastructure 
must implement mechanisms to provide all clients with the 
last  updated  ACs.  This  is  a  very  expensive  task  in  envi-
ronments where user rights can change dynamically. Addi-
tionally,  users  having  more  than  one  AC  could  not  know 
which certificate(s) they should send to a verifier to use a 
particular service. As mentioned before, ACs often should 
be kept secret, and there is no guarantee for the issuer that 
(probably  unsecured)  client  machines  can  protect  ACs 
properly. As a result, all clients would need to communi-
cate  over  an  encrypted  (and  authenticated)  channel  with 
the database very frequently which would lead to perform-
ance problems in the system. 
In contrast to the push architectures, in systems built on 
the  “pull”  model,  verifiers  pull  ACs  from  some  online 
network service. This approach simplifies clients, because 
they  must  no  longer  care  about  the  management  of  ACs. 
Additionally,  users  are  not  involved  in  the  authorization 
process  and  they  need  not  even  to  know  which  privilege 
sets they have. Since there are usually fewer verifiers than 
clients in a system, this model leads to reduced communi-
cation costs in comparison to the push model. Only verifi-
ers have to pay a higher price, they must not just check the 
validity of certificates but also download them. The main 
disadvantage  of  this  approach  is  that verifiers totally rely 
on  the  availability  of  the  infrastructure  storing  the  ACs. 
Moreover, the database must decide which particular ACs 
a given verifier may download. 
PAMINA  was  primarily  developed  to  support  the  pull 
model.  All  certificates  managed  by  the  system  are  stored 
in a central database, which can be replicated to get higher 
availability  and  better  performance.  This  database  pro-
vides  only  authenticated  verifiers  with  those  certificates 
that are needed to check a given user’s rights. 
3.3 Revocation mechanisms vs. freshness 
guaranties 
Certificate  revocation  is  the  mechanism  with  which  an 
issuing authority can revoke a stated association before its 
documented  expiration.  An  authority  may  wish  to  revoke 
an  authorization  certificate, for example, in response to a 
change in the owner’s access rights or because of the com-
promise  of  its  own  private  key.  There  are  many  ap-
proaches to solve this important problem, here we analyze 
the most important ones of them. 
Certificate  Revocation  List  (CRL)  is  the  most  com-
monly  used  revocation  mechanism  in  certificate  manage-
ment  systems  today  (e.g.,  see  [3]  and  [4]).  A  CRL  is  a 
continuously  growing,  digitally  signed  list  of  revoked 
certificates,  which  is  published  periodically.  In  order  to 
keep the CRL size manageable, certificates are denoted by 
some  unique  identifier  (id),  such  as  a  serial  number  or  a 
fingerprint.  When  a  revoked  certificate’s  validity  period 
ends it can be deleted from the CRL. Communication costs 
can  be  reduced  by  publishing  periodically  a  delta-CRL, 
which is a differential list to the last CRL update. In order 
to verify the status of a certificate, a verifier first needs to 
obtain  the  latest  CRL  (delta-CRL),  then  verify  the  signa-
ture on it and search for the ID of the certificate in ques-
tion.  CRL-management  can  be  very  expensive  for  both 
issuing  authorities  as  well  as  verifiers  in  access  control 
systems  since  user  rights  change  frequently  and  verifiers 
should obtain and check many certificates in order to ver-
ify  delegation  chains.  In  addition,  to  provide  long-term 
non-repudiation issuers (verifiers) would have to store not 
only every AC but also every CRL they have ever issued 
(received). Another disadvantage of CRLs is given by the 
fact  that  they  do  not  provide  non-existence  proofs  for 
certificates. 
The  concept  of  Certificate  Revocation  Trees  (CRTs) 
was proposed by Paul C. Kocher [5]. A CRT enables veri-
fiers  to  get  a  proof  that  a  certificate  has  not  yet  been  re-
voked. Basically, a CRT is a binary hash tree [6], in which 
each leaf consists of the ID of a single revoked certificate 
and a range of valid IDs all greater than the revoked one. 
During  verification  the  verifier  obtains  the  hash  path  be-
longing  to  the  ID  of  the  certificate  in  question,  then  it 
checks  the  signature  on  the  root  and  verifies  that  the 
hashes correctly bind the leaf to the root. Finally, it checks 
whether the ID is the lowest in the leaf.  
CRTs reduce the communication cost between the veri-
fier and the directory, but increase the authority’s compu-
tational cost, which is straight proportional to the number 
of  revoked  certificates.  This  fact  makes  CRTs  not  very 
attractive for an access control management system. CRTs 
do  as  CRLs  not  support  non-existence  proofs  for  certifi-
cates.  However,  the  main drawback of this system is that 
the insertion (deletion) of a new revoked (expired) certifi-
cate might result in the re-computation of the entire tree. 
Naor and Nissim eliminated this problem by replacing 
the  suggested  binary  tree  with  a  more  effective  B2,3-tree 
[7].  In  this  case,  it  is  no  longer  required  to  change  the 
whole tree when inserting or deleting a certificate but just 
one path. 
All  the  schemes  above  are  constructed  to  maintain 
revocation  information  only.  Table  1  shows  an  overview 
of  the  average  computational  and  communication  costs 
that  verifiers and the certificate management system have 
to  take  into  account.  In  addition  to  the  listed  costs  for 
managing revoked certificates, there are of course the costs 
for generation and management of valid certificates. Using 
revocation  mechanisms  the  verification  process  is  rather 
complicated,  especially  when  more  than  one  AC  need  to 
be checked, for example for delegation path construction. 
The  Online  Certificate  Status  Protocol  (OCSP)  was 
specified  to  support  the  communication  between  verifiers 
and  a  trusted  entity  referred  to  as  an  OCSP  responder, 
which  supports  verifiers  with information about the revo-
cation status of certificates [8]. The main aim of OCSP is 
to reduce the communicational and computational costs of 
the verification process: Instead of checking the revocation 
status of certificates in question, a verifier sends a simple 
request to the responder containing one or more certificate  
n: avg. total number of certificates per authority 
r: avg. number of revoked certificates per authority 
u: avg. number of revoked certs since last update per authority 
Revocation scheme  Authority computational 
Verifier computational 
costs per query 
Delta CRL 
CRL 
CRT 
Naor/Nissim 
costs 
O(u) 
O(u) 
worst case O(u·r) 
O(u·log(r)) 
O(r) 
O(r+u) 
O(log(r)) 
O(log(r)) 
lid : length of a certificate identifier (bits) 
lstat : length of a revocation status number (bits) 
lsig : total length of a signature (bits) 
Directory update com-
munication costs per 
authority 
r·lid+lsig 
u·lsn+lsig 
u·lid+2·lsig 
u·lid+2·lsig 
Communication costs 
per verifier,  
per directory query 
r·lid+lsig 
u·lid+lsig 
log(r)+lsig 
log(r)·lhash+lsig 
Table 1: Cost analysis of different certificate revocation schemes 
Freshness scheme  Authority computational 
Verifier computational 
CRS 
CRS2 
CVT 
costs 
O(n) 
O(u·log(n)) 
O(u·log(n)) 
costs per query 
O(#updates) 
O(log(n)) 
O(log(n)) 
Directory update com-
munication costs per 
authority 
n·(lid+lstat) 
u·lid+2·lsig 
u·lid+2·lsig 
Communication costs 
per verifier,  
per directory query 
lstat 
log(n)·lhash+lsig 
log(n)·lhash+lsig 
Table 2: Cost analysis of different schemes providing freshness information 
identifiers.  In  its  response  the  OCSP  responder  sends  the 
revocation status of those certificates back to the verifier. 
Naturally, to generate such a response the OCSP responder 
has  to  gather  revocation  information  from  some  backend 
system that has to maintain revocation status information, 
for example with the use of a CRL or a CRT. OCSP does 
not specify or enhance a particular revocation scheme but 
it  just  defines  a  protocol  for  retrieving  revocation  status 
information. The main problem with this approach is that 
the verifier must trust the responder, he must believe that 
the revocation status information he gets is correct and up-
to-date. A signed and time-stamped OCSP response might 
be  a  real-time  generated  message,  but  the  verifier  cannot 
check  when  the  included  information  was  actually  gener-
ated  by  the  issuing  authority.  Furthermore,  since  OCSP 
responses have to be signed, there must be also a public-
key  certificate  issued  for  the  responder  itself  which  must 
be  known  to  the  verifier.  The  verifier  should  be  able  to 
check the current status of this certificate, too. This can of 
course not be done with the help of the OCSP responder, 
therefore  some  additional  mechanism  is  needed.  Since 
online  responders  (not  only  OCSP  responders)  do  not 
improve  the  underlying  revocation  scheme  and  would 
raise additional problems, they seem not to be qualified for 
our purposes. 
Fortunately, 
there  are  also  certificate  management 
schemes that can provide the revocation status of a certifi-
cate  and  freshness  information  at  once.  This combination 
reduces data maintaining costs, since there is no more need 
to manage two separate databases.  
The Certificate Revocation System (CRS), which was 
the first system maintaining freshness information for both 
valid  and  revoked  certificates  at  once,  was  invented  by 
Silvio Micali [9]. In the CRS the issuing authority periodi-
cally sends a signed (and time-stamped) message for every 
certificate  stating  whether  the  certificate  was  revoked  or 
not  since  the  last update. For this purpose an off-line/on-
line signature scheme is used which reduces computational 
costs. CRS uses a one-way hash-function h. Before storing 
a  certificate  in  the  directory  the  authority  chooses  two 
random  values  R0  and  R1  and  then  it  computes  and  pub-
lishes the hash-values h(R1) and h(…(h(h(R0))…) or more 
precisely hk(R0), where k is the expected number of update 
periods.  When  the  freshness  of  a  still  valid  certificate 
should  be  stated  the  authority  must  compute  hi(R0)  and 
send it to the directory, where i is the total number of pos-
sible  future  updates.  If  a  certificate  must  be  revoked  the 
authority simply sends R1. In order to verify that a certifi-
cate is valid, a verifier has to query the directory for a copy 
of the most recent update value. As one can see in Table 2 
the  authority-to-directory  communication  costs  are  high 
because  a  new  hash  value  for  every  certificate  must  be 
sent. An improvement (CRS2) that solves this problem is 
based  on  binary  hash  trees.  In  this  scheme  the  current 
status of a given certificate is indicated by two bits. These 
bits,  typically  128  are  stored  in  the  leaves  of  the  tree. 
Nodes  of  the  tree  are  computed  from  the  hash  of  their 
children.  Only  the  root  of  the  tree  must  be signed by the 
authority.  This  modification  speeds  up  the  system,  verifi-
cation  becomes  cheaper  and  also  communication  costs 
decrease,  as shown in Table 2. In addition, if the Merkle 
tree is constructed carefully, CRS2 can also provide proofs 
for  non-existence  of  certificates.  Unfortunately,  this  sys-
tem  provides  information  about  the  current  status  and 
existence of many neighboring certificates, which conflicts 
with confidentiality requirements.  
Alternatively,  revocation  could  be  accomplished  by 
simply  removing  revoked  authorization  certificates  from 
the directory. This approach would allow authorizations to 
be  changed  in  a  very  responsive  manner,  without  estab-
lishing any kind of revocation infrastructure. The problems 
to  solve  are  how  verifiers  can  be  sure  that  the  directory 
contains all valid certificates and that all certificates in the 
directory are still valid.  
Certification Verification Trees (CVTs) recently pro-
posed in [1] can solve these problems elegantly. The basic 
idea is that it is not necessary to sign every single certifi-
cate issued by an authority. Instead, the authors suggest to 
store the unsigned certificates (certificate statements) plus 
a hash value in the leaves of a hash-tree [6]. Only the root 
of  the  tree  must  be  signed  and  time-stamped.  In  order  to 
check  the  validity  of a given certificate, the verifier must 
obtain  the  certificate  and  the  certification  path  belonging 
to this certificate. The certification path is given by the set 
of  hash values of all siblings of the nodes along the path 
from the leaf containing the certificate statement in ques-
tion  to  the  root.  This  scheme  allows  very  frequent  fresh-
ness updates of all certificates at once. The authority does 
not need to maintain any extra information about revoked 
certificates. It can just delete a revoked certificate from the 
tree and then sign the root of the new tree. There are many 
other  advantages of CVTs; but the most important one is 
the  enhanced  security:  The  exchange  of  the  root  key  is 
easier  and  in  the  case  of  key  compromise  an  adversary 
cannot  manipulate  single  certificates,  he  always  changes 