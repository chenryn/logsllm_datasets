echo "Generating recon report from output files..."
TODAY=$(date)
echo "This scan was created on $TODAY" > $DIRECTORY/report 1
echo "Results for Nmap:" >> $DIRECTORY/report
grep -E "^\s*\S+\s+\S+\s+\S+\s*$" $DIRECTORY/nmap >> $DIRECTORY/report 2
echo "Results for Dirsearch:" >> $DIRECTORY/report
cat $DIRECTORY/dirsearch >> $DIRECTORY/report 3
echo "Results for crt.sh:" >> $DIRECTORY/report
jq -r ".[] | .name_value" $DIRECTORY/crt >> $DIRECTORY/report 4
    First, we create a new file named
     report
    and write today’s date into it
     1
    to keep track of when the report was generated. We then append the results of the
     nmap
    and
     dirsearch
    commands into the report file
     2
    . The
     cat
    command prints the contents of a file to standard output, but we can also use it to redirect the content of the file into another file
     3
    . Finally, we extract domain names from the crt.sh report and append it to the end of the report file
     4
    .
    首先，我们创建一个名为 report 的新文件，并将今天的日期写入其中 1，以跟踪报告生成的时间。然后，将 nmap 和 dirsearch 命令的结果追加到报告文件中 2。cat 命令可以将文件内容打印到标准输出，但我们也可以使用它将文件内容重定向到另一个文件 3。最后，我们从 crt.sh 报告中提取域名，并将其追加到报告文件的末尾 4。
    Scanning Multiple Domains
    What if we want to scan multiple domains at once? When reconning a target, we might start with several of the organization’s domain names. For example, we know that Facebook owns both
     facebook.com
    and
     fbcdn.net
    . But our current script allows us to scan only one domain at a time. We need to write a tool that can scan multiple domains with a single command, like this:
    如果我们想要一次扫描多个域名怎么办？在对目标进行侦察时，我们可能会从组织的几个域名开始。例如，我们知道Facebook拥有facebook.com和fbcdn.net。但是我们当前的脚本只允许我们一次只扫描一个域名。我们需要编写一个工具，可以用一个命令扫描多个域名，就像这样：
./recon.sh facebook.com fbcdn.net nmap-only
    When we scan multiple domains like this, we need a way to distinguish which arguments specify the scan
     MODE
    and which specify target domains. As you’ve already seen from the tools I introduced, most tools allow users to modify the behavior of a tool by using command line
     option
     s
    or
     flags
    , such as
     -u
    and
     --simple-report
    .
    当我们像这样扫描多个域时，我们需要一种方法来区分哪些参数指定扫描模式，哪些参数指定目标域。正如我介绍的工具已经表明的那样，大多数工具允许用户使用命令行选项或标志（例如 -u 和--简单报告）来修改工具的行为。
    The
     getopts
    tool parses options from the command line by using single-character flags. Its syntax is as follows, where
     OPTSTRING
    specifies the option letters that
     getopts
    should recognize. For example, if it should recognize the options
     -m
    and
     -i
    , you should specify
     mi
    . If you want an option to contain argument values, the letter should be followed by a colon, like this:
     m:i
    . The
     NAME
    argument specifies the variable name that stores the option letter.
    getopts工具使用单字母标志从命令行解析选项。它的语法如下，其中OPTSTRING指定getopts应该识别的选项字母。例如，如果它应该识别选项-m和-i，则应该指定mi。如果您希望选项包含参数值，则字母后面应跟冒号，如此m：i。NAME参数指定存储选项字母的变量名称。
getopts OPTSTRING NAME
    To implement our multiple-domain scan functionality, we can let users use an
     -m
    flag to specify the scan mode and assume that all other arguments are domains. Here, we tell
     getopts
    to recognize an option if the option flag is
     -m
    and that this option should contain an input value. The
     getopts
    tool also automatically stores the value of any options into the
     $OPTARG
    variable. We can store that value into a variable named
     MODE:
    为实现多域名扫描功能，我们可以让用户使用“-m”标志指定扫描模式，并假设所有其他参数都是域名。这里，我们告诉getopts，如果选项标志为“-m”，则应识别该选项，并且该选项应包含一个输入值。 getopts工具还会自动将任何选项的值存储到$OPTARG变量中。我们可以将该值存储到名为MODE的变量中：
getopts "m:" OPTION
MODE=$OPTARG
    Now if you run the shell script with an
     -m
    flag, the script will know that you’re specifying a scan
     MODE
    ! Note that
     getopts
    stops parsing arguments when it encounters an argument that doesn’t start with the
     -
    character, so you’ll need to place the scan mode before the domain arguments when you run the script:
    现在，如果你在运行shell脚本时使用-m标志，脚本将会知道你要指定扫描模式！请注意，当getopts遇到一个不以-字符开头的参数时，它会停止解析参数，因此在运行脚本时，你需要将扫描模式放在域参数之前：
./recon.sh -m nmap-only facebook.com fbcdn.net
    Next, we’ll need a way to read every domain argument and perform scans on them. Let’s use loops! Bash has two types of loops: the
     for
    loop and the
     while
    loop. The
     for
    loop works better for our purposes, as we already know the number of values we are looping through. In general, you should use
     for
    loops when you already have a list of values to iterate through. You should use
     while
    loops when you’re not sure how many values to loop through but want to specify the condition in which the execution should stop.
    接下来，我们需要一种方法来读取每个域参数并对它们进行扫描。让我们使用循环！Bash有两种类型的循环：for循环和while循环。为了我们的目的，for循环更加适用，因为我们已经知道了要循环遍历的值的数量。通常情况下，当你已经拥有一个值列表时，应该使用for循环进行迭代。如果您不确定要循环遍历多少个值，但想要指定执行应该停止的条件，则应该使用while循环。
    Here’s the syntax of a
     for
    loop in bash. For every item in
     LIST_OF_VALUES
    , bash will execute the code between
     do
    and
     done
    once:
    以下是bash中for循环的语法。对于LIST_OF_VALUES 中的每个项，bash将执行do和done之间的代码一次：
for i in LIST_OF_VALUES
do
  DO SOMETHING
done
    Now let’s implement our functionality by using a
     for
    loop:
    现在，让我们使用for循环来实现我们的功能：
1 for i in "${@:$OPTIND:$#}"
do
  # Do the scans for $i
done
    We create an array
     1
    that contains every command line argument, besides the ones that are already parsed by
     getopts
    , which stores the index of the first argument after the options it parses into a variable named
     $OPTIND
    . The characters
     $@
    represent the array containing all input arguments, while
     $#
    is the number of command line arguments passed in.
     "${@:OPTIND:}"
    slices the array so that it removes the
     MODE
    argument, like
     nmap-only
    , making sure that we iterate through only the domains part of our input. Array slicing is a way of extracting a subset of items from an array. In bash, you can slice arrays by using this syntax (note that the quotes around the command are necessary):
    我们创建一个数组1，其中包含每个命令行参数，除了那些已经被getopts解析的参数。getopts将解析选项后的第一个参数的索引存储在一个名为$ OPTIND的变量中。$@代表包含所有输入参数的数组，而$＃是传递的命令行参数的数量。“$ { @: OPTIND：}”对数组进行切片，以便删除MODE参数（如nmap-only），确保我们只迭代输入的域部分。数组切片是一种从数组中提取子集的方法。在bash中，可以使用以下语法切片数组（注意，必须使用命令周围的引号）：
"${INPUT_ARRAY:START_INDEX:END_INDEX}"
    The
     $i
    variable represents the current item in the argument array. We can then wrap the loop around the code:
    $i变量代表参数数组中的当前项。然后我们可以在代码周围包装循环:
#!/bin/bash
PATH_TO_DIRSEARCH="/Users/vickieli/tools/dirsearch"
nmap_scan()
{
  nmap $DOMAIN > $DIRECTORY/nmap
  echo "The results of nmap scan are stored in $DIRECTORY/nmap."
}
dirsearch_scan()
{
  $PATH_TO_DIRSEARCH/dirsearch.py -u $DOMAIN -e php --simple-report=$DIRECTORY/dirsearch
  echo "The results of dirsearch scan are stored in $DIRECTORY/dirsearch."
}
crt_scan()
{
  curl "https://crt.sh/?q=$DOMAIN&output=json" -o $DIRECTORY/crt
  echo "The results of cert parsing is stored in $DIRECTORY/crt."
}
getopts "m:" OPTION
MODE=$OPTARG
for i in "${@:$OPTIND:$#}" 1
do
  DOMAIN=$i
  DIRECTORY=${DOMAIN}_recon
  echo "Creating directory $DIRECTORY."
  mkdir $DIRECTORY
  case $MODE in
    nmap-only)
      nmap_scan
      ;;
    dirsearch-only)
      dirsearch_scan
      ;;
    crt-only)
      crt_scan
      ;;
    *)
      nmap_scan
      dirsearch_scan
      crt_scan
      ;;     
  esac
  echo "Generating recon report for $DOMAIN..."
  TODAY=$(date)