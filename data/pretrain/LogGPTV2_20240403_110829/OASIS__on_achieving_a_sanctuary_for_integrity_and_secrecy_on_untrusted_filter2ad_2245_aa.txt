title:OASIS: on achieving a sanctuary for integrity and secrecy on untrusted
platforms
author:Emmanuel Owusu and
Jorge Guajardo and
Jonathan M. McCune and
James Newsome and
Adrian Perrig and
Amit Vasudevan
OASIS: On Achieving a Sanctuary for Integrity and Secrecy
on Untrusted Platforms∗
Emmanuel Owusu†
Jorge Guajardo‡
Adrian Perrig†
Jonathan McCune†
Jim Newsome†
Amit Vasudevan†
†CyLab, Carnegie Mellon University – {eowusu, jonmccune, jnewsome, perrig, amitvasudevan}@cmu.edu
‡Bosch Research and Technology Center, Robert Bosch LLC – PI:EMAIL
ABSTRACT
We present OASIS, a CPU instruction set extension for ex-
ternally veriﬁable initiation, execution, and termination of
an isolated execution environment with a trusted computing
base consisting solely of the CPU. OASIS leverages the hard-
ware components available on commodity CPUs to achieve
a low-cost, low-overhead design.
Categories and Subject Descriptors
C.0 [General]: Miscellaneous—Hardware/Software Inter-
faces, Instruction Set Design; K.6.5 [Management of Com-
puting and Information Systems]: Security and Protec-
tion—Physical Security, Unauthorized Access
General Terms
Design, Security
Keywords
Secure Execution, Remote Attestation,
Instruction Set Extension
1.
INTRODUCTION
Despite numerous attacks against a wide spectrum of or-
ganizations [6, 29], secure execution environments protected
by TCG have not seen widespread application – even in
cloud computing, where customers want to verify execu-
tion [2, 41]. Perhaps this lack of application is due, in part,
to the lack of end-to-end application software that beneﬁt
from TCG properties, lack of trust in the TPM vendors,
∗This research was supported in part by CyLab at Carnegie
Mellon under grants DAAD19-02-1-0389 from the Army Re-
search Oﬃce, and by a gift from Robert Bosch LLC. The
views and conclusions contained here are those of the au-
thors and should not be interpreted as necessarily represent-
ing the oﬃcial policies or endorsements, either expressed or
implied, of ARO, Robert Bosch LLC, CMU, CyLab, or the
U.S. Government or any of its agencies.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’13, November 4–8, 2013, Berlin, Germany.
Copyright is held by the owner/author(s). Publication rights licensed to ACM.
ACM 978-1-4503-2477-9/13/11 ...$15.00..
lack of protection against local adversaries, and concerns
over poor performance.
Many designs for an isolated execution environment (IEE)
have been proposed, but an interesting question remains:
What minimal additions do we need to add to a modern
CPU to achieve a highly eﬃcient isolated execution envi-
ronment with remote attestation properties? This work in-
vestigates what minimal architectural changes are required
to obtain the essential Trusted Computing Base (TCB) – an
isolated execution environment completely contained inside
a modern CPU – providing resilience against several classes
of hardware attacks. In addition, we design this architecture
such that minimal changes to a modern commodity CPU are
required for deployment. In keeping with minimalist design,
we provide a simple programming interface consisting of few
instructions.
Contributions
• We present an instruction set for remotely veriﬁable,
eﬃcient code execution requiring a minimal TCB.
• We propose an API where the CPU provides unique
cryptographic keys to security-sensitive applications.
• Our deployment model precludes the need for a dis-
tributor or manufacturer to protect platform secrets
on behalf of the end-user or their customers.
• Our system is designed for deployment on existing
commodity CPUs with minimal modiﬁcations.
• Contrary to prior approaches, our solution does not
require on-chip non-volatile memory to store secrets.
Thus, in addition to avoiding the strong assumption
of secure non-volatile memory, our solution is cheaper
to implement in practice as it leverages semiconductor
processes already used in modern CPUs.
2. PROBLEM DEFINITION
2.1 Model and Assumptions
Deployment Model. Our use case deﬁnes outsourced
computation in the sense advocated by public cloud comput-
ing. Thus, we identify three key parties; and their diﬀerent
roles and levels of trust as a device moves from production
to use:
(i) The processor hardware manufacturer (HWM). The
HWM is trusted to manufacture the CPU to initialize a cryp-
tographic device key with a Physically Unclonable Function.
(ii) The service provider (or device owner) that oﬀers the
device as a platform to customers who wish to lease them
for a certain amount of time or computation.
13Finally, (iii) the user (or cloud customer) who wishes to
lease computing resources. Users are interested in verifying
the trustworthiness of devices leased to them, guaranteeing
the integrity and conﬁdentiality of their computations and
data.
In the remainder of this paper, we refer to the service
provider’s device simply as the platform or P and to the
user’s device as the veriﬁer or V .
P 2 Economical. We would like the following economic
objectives to be satisﬁed:
P 2.1 Low-cost. No substantial increase of manufactur-
ing cost or complexity (e.g., by requiring non-volatile
memory within the CPU).
P 2.2 Self-contained. No requirement for additional hard-
ware support such as secure co-processors or TPMs.
Adversary Model. We assume a sophisticated adversary
with physical access to the computing platform. In particu-
lar, the adversary can introduce malware into the comput-
ing platform (e.g., to compromise an application, the OS, or
ﬁrmware), has access to the external ports of the platform to
physically attach malicious peripherals to P . Similarly, the
adversary can probe and tamper with low-speed and high-
speed buses (e.g., to eavesdrop on a memory or PCI bus),
and/or inject code and/or modify data. However, the adver-
sary cannot perform attacks that require complete unscru-
tinized access to the CPU for extended periods of time. In
particular, this implies that the service provider has organi-
zational procedures in place to prevent attacks, but cannot
guarantee the absence of a small set of rogue employees.1
We consider denial-of-service, side-channel, and fault injec-
tion attacks beyond the scope of this paper.
Assumptions. With respect to the service provider, we
assume that the CPU on the untrusted platform P is not
malicious (i.e., we trust the processor). We assume that
this CPU contains a Physically Unclonable Function that
can only be accessed through the speciﬁed APIs. Addition-
ally, we assume that the CPU has a true random number
generator. We assume that the CPU is tamper-resistant.
Thus, physical security is not a requirement. Finally, we
assume that the veriﬁer V has the correct public key of the
provider’s platform P .
2.2 Desired Properties
The following list contains the desired properties for OASIS.
P 1 Secure. We would like the following security objec-
tives to be satisﬁed:
P 1.1 Externally Veriﬁable. Attestable code execution
that guarantees platform integrity, code integrity,
launch point integrity, and unmodiﬁed code exe-
cution on the untrusted platform.
P 1.2 Key Code Binding. Ensure that a unique crypto-
graphic key is available to each distinct code mod-
ule that executes in the isolated environment.
P 1.3 Program State Binding. The ability to bind data
to code.
P 1.4 Device Transferability. The ability to transfer own-
ership of a chip without exposing the secrets of the
previous owner.
P 1.5 Limited Trust. The HWM should not have access
to any device secrets.
P 3 Essential. We aim for a balanced and simple design:
P 3.1 Minimal TCB. On-die isolated execution environ-
ment with trustworthy computing primitives en-
tirely within the CPU package.
P 3.2 Minimal Interface. Minimal interface with min-
imal controls, which presents a usable program-
ming abstraction.
P 3.3 Minimal Setup. Eﬃcient environment setup where
expensive operations are bypassed during repeated
invocation.
3. HARDWARE BUILDING BLOCKS
3.1 PUFs, Fuzzy Extractors, and TRNGs
Pappu et al. introduce the concept of Physical Unclon-
able Functions (PUFs), which are functions where the re-
lationship between input (or challenge) C and output (or
response) pe is deﬁned via a physical system [15, 35]. The
physical system has the additional properties of being ran-
dom and unclonable. The system’s unclonability originates
from random variations in a device’s manufacturing process,
which even the manufacturer cannot control. In their most
general form, PUFs can accept a large number challenge-
response pairs. Examples of PUF constructions include:
optical PUFs [35], silicon PUFs [15, 14], coating PUFs [45],
SRAM PUFs [16, 17], reconﬁgurable PUFs [23], and Flash
memory-based PUFs [48].
Because of PUF variability across diﬀerent environmental
conditions (voltage, temperature, humidity, etc.), when a
PUF is challenged with Ci, a response p′
e (a noisy version of
pe) is obtained. In applications where the PUF response is
used as a cryptographic key this noisy response p′
e is not ac-
ceptable. To solve this problem, algorithms known as fuzzy
extractors leverage non-secret helper data to work around
the noisy nature of physical measurements typical of PUF
applications [21, 27, 10]. We assume that the fuzzy extractor
is implemented in a silicon block and is accessible as a func-
tion that is used (in combination with the PUF interface)
to realize our instructions.
While stability is fundamental for PUFs, variation in un-
stable bits can be leveraged for random number genera-
tion [17, 44, 48]. For the purposes of this paper, we focus on
PUFs based on memory arrays, such as SRAM commonly
used in CPU caches. SRAM memory can be used as the raw
source for a PUF as well as the entropy source for a True
Random Number Generator (TRNG).2
1For example, a cloud service provider may unintentionally
grant datacenter access to malicious [20] or negligent [43]
employees.
2The new Intel random number generator is based on the
instability of a couple of cross-coupled inverters, which are
the basic building block of an SRAM cell [44].
143.2 Cache-as-RAM (CAR) Mode
Cache memory is ubiquitous across CPU architectures.
Traditionally, SRAM is used to implement a cache. Mod-
ern CPUs often include several megabytes of memory on-die
which can be leveraged to create a Cache-as-RAM (CAR)
execution environment [28]. Typically, CAR mode is used
to perform system boot-up tasks while DRAM (external to
the CPU) is initialized. Prior work has demonstrated that
the CPU cache subsystem can be repurposed as a general-
purpose memory area for isolated code execution and data
read/write operations [46]. The CPU CAR environment of-
fers an isolated execution environment using exclusively on-
die hardware.
4. OASIS CPU INSTRUCTION SET
We ﬁrst provide a high-level overview of the design, de-
scribing the requirements, execution model, and implemen-
tation rationale for the instruction set extension (ISE) pro-
posed in the paper. The notation used in the remainder of
the paper is summarized in Table 1.
Requirements. OASIS is a set of new CPU instructions
that aim to enable an isolated execution environment con-
tained entirely on chip by leveraging CAR mode execution,
and by creating a secret key only available to the CPU (e.g.,
derived from an SRAM PUF). OASIS is designed for ease of
adoption and deployment with respect to existing comput-
ing systems.
A central feature of OASIS is the PUF-derived secret key
Kp only available within the CPU and which is used as the
root of trust of the whole environment. OASIS is based
on SRAM-PUFs [16, 17]. This has several advantages: (i)
SRAM is already available on modern CPUs in the form
of the cache, (ii) SRAM PUFs need to be powered to cre-
ate the secret key material, thus, they cannot be read of-
ﬂine making them resistant against scanning electron micro-
scope based attacks, (iii) because of their properties, PUFs
are tamper-evident (and in some cases tamper-resistant), a
property which other technologies do not oﬀer [16], and (iv)
SRAM is manufactured using the standard semiconductor
process, which leads to decreased costs when compared to
non-volatile memory.
OASIS assumes the availability of external non-secure non-
volatile memory. This memory is used to store public helper
data as well as state and/or programs. External storage is
plentiful and does not further complicate the OASIS design
since no special security guarantees are assumed.
In par-
ticular, alterations to the public helper data can be easily
detected through the use of robust fuzzy extractors [5, 9].
Root-of-Trust Instantiation. The SRAM-PUF response,
pe, serves as a unique cryptographic secret which is used to
bootstrap a unique device identity, per-application encryp-
tion and authentication keys, and random number gener-
ation. The resulting key material is unique not just per
physical device, but per device owner. The SRAM-PUF re-
sponse is used to derive the secret root key, Kp, which never
leaves the processor and is never directly accessible by any
party (including any software running on the processor).
The PUF-derived secret root key, Kp, enables the deriva-
tion of a key hierarchy as follows. The device owner de-
rives a key (Kpo) unique to themselves and the device via a
Table 1: Notation used in Instruction Set and Protocol
Notation
hw_inst[]
f_hw_func[]
hardware instructions that make up the OA-
SIS programming interface are denoted using
a ﬁxed-width font
hardware functions are only accessible by OA-
SIS hardware instructions and are denoted us-
ing a ﬁxed-width font identiﬁer starting with
the letter f
y ← x
the value of x is assigned to variable y
⊥ this symbol is used to denote a failed platform
operation
x||y
concatenation of x and y
x.param returns parameter param of variable x
x.∗
data element formed by concatenating all pa-
rameters of variable x
A → B : hmi A sends message hmi to B
R
←−{0, 1}ℓ
r
assigns a random integer of ℓ bits to r
KX
X , K−1
X
K+
party X’s symmetric key
party X’s public and private asymmetric key
pair
{P }K
the resulting ciphertext of plaintext P en-
crypted using key K
H (x)
cryptographic hash function with input x
EncK(P )
encrypt plaintext P using key K
DecK(C)
decrypt ciphertext C using key K
KDFK(x)
key derivation function of key K and non-
secret parameter x
MACK(x) message authentication code of x under key K
Sign
K
(m)
−1
X
(m, σ)
Verify
K