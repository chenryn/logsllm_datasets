and the manager of one contract instance cannot affect the
security of another contract instance. Similarly, the manager
also need not be trusted to retain the security of the crypto-
currency as a whole. Therefore, the only thing we trust the
manager for is posterior privacy.
As mentioned in Section IV-C we note that one can possi-
bly rely on secure multi-party computation (MPC) to avoid
having to trust
the manager even for posterier privacy –
however such a solution is unlikely to be practical in the
near future, especially when a large number of parties are
involved. The thereotical formulation of this full-generality
MPC-based approach is detailed in the online version [37].
In our implementation, we made a conscious design choice
and opted for the approach with a minimally trusted manager
(rather than MPC), since we believe that this is a desirable
sweet-spot that simultaneously attains practical efﬁciency and
strong enough security for realistic applications. We stress that
practical efﬁciency is an important goal of Hawk’s design.
In Section IV-C, we also discuss practical considerations
for instantiating this manager. For the reader’s convenience,
we iterate: we think that a particularly promising choice is to
rely on trusted hardware such as Intel SGX to obtain higher
assurance of posterior privacy. We stress again that even when
we use the SGX to realize the manager, the SGX should not
have to be trusted for retaining the global security of the
cryptocurrency. In particular, it is a very strong assumption to
require all participants to globally trust a single or a handful
of SGX prcessor(s). With Hawk’s design, the SGX is only
very minimally trusted, and is only trusted within the scope
of the current contract instance.
APPENDIX B
FORMAL TREATMENT OF PROTOCOLS IN THE
BLOCKCHAIN MODEL
We are the ﬁrst to propose a UC model for the blockchain
model of cryptography. First, our model allows us to easily
capture the time and pseudonym features of cryptocurrencies.
In cryptocurrencies such as Bitcoin and Ethereum, time pro-
gresses in block intervals, and the blockchain can query the
current time, and make decisions accordingly, e.g., make a
855855
refund operation after a timeout. Second, our model captures
the role of a blockchain as a party trusted for correctness and
availability but not for privacy. Third, our formalism modular-
izes our notations by factoring out common speciﬁcs related
to the smart contract execution model, and implementing these
in central wrappers.
For simplicity, we assume that there can be any number
of identities in the system, and that they are ﬁxed a priori.
It is easy to extend our model to capture registration of new
identities dynamically. We allow each identity to generate an
arbitrary (polynomial) number of pseudonyms as in Bitcoin
and Ethereum.
A. Programs, Functionalities, and Wrappers
To make notations simple for writing ideal functionalities
and smart contracts, we make a conscious notational choice of
introducing wrappers. Wrappers implement in a central place
a set of common features (e.g., timer, ledger, pseudonyms) that
are applicable to all ideal functionalities and contracts in our
blockchain model of execution. In this way, we can modularize
our notational system such that these common and tedious
details need not be repeated in writing ideal, blockchain and
user/manager programs.
Blockchain functionality wrapper G: A blockchain function-
ality wrapper G(B) takes in a blockchain program denoted B,
and produces a blockchain functionality. Our real world proto-
cols will be deﬁned in the G(B)-hybrid world. Our blockchain
functionality wrapper is formally presented in Figure 11. We
point out the following important facts about the G(·) wrapper:
• Trusted for correctness and availability but not privacy.
The bloc kchain functionality wrapper G(·) stipulates that a
blockchain program is trusted for correctness and availabil-
ity but not for privacy. In particular, the blockchain wrapper
exposes the blockchain program’s internal state to any party
that makes a query.
• Time and batched processing of messages. In popular de-
centralized cryptocurrencies such as Bitcoin and Ethereum,
time progresses in block intervals marked by the creation
of each new block. Intuitively, our G(·) wrapper captures
the following fact. In each round (i.e., block interval), the
blockchain program may receive multiple messages (also
referred to as transactions in the cryptocurrency literature).
The order of processing these transactions is determined
by the miner who mines the next block. In our model, we
allow the adversary to specify an ordering of the messages
collected in a round, and our blockchain program will then
process the messages in this adversary-speciﬁed ordering.
• Rushing adversary. The blockchain wrapper G(·) naturally
captures a rushing adversary. Speciﬁcally, the adversary
can ﬁrst see all messages sent to the blockchain program
by honest parties, and then decide its own messages for
this round, as well as an ordering in which the blockchain
program should process the messages in the next round.
Modeling a rushing adversary is important, since it captures
a class of well-known front-running attacks, e.g., those that
exploit transaction malleability [11], [27]. For example, in
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:41 UTC from IEEE Xplore.  Restrictions apply. 
F(idealP) functionality
Given an ideal program denoted idealP, the F(idealP) functionality is deﬁned as below:
Init: Upon initialization, perform the following:
Time. Set current time T := 0. Set the receive queue rqueue := ∅.
Pseudonyms. Set nyms := {(P1, P1), . . . , (PN , PN )}, i.e., initially every party’s true identity is recorded as a default
pseudonym for the party.
Ledger. A ledger dictionary structure ledger[P ] stores the endowed account balance for each identity P ∈ {P1, . . . , PN}.
Before any new pseudonyms are generated, only true identities have endowed account balances. Send the array ledger[]
to the ideal adversary S.
idealP.Init. Run the Init procedure of the idealP program.
Tick: Upon receiving tick from an honest party P : notify S of (tick, P ). If the functionality has collected tick
conﬁrmations from all honest parties since the last clock tick, then
Call the Timer procedure of the idealP program.
Apply the adversarial permutation perm to the rqueue to reorder the messages received in the previous round.
For each (m, ¯P ) ∈ rqueue in the permuted order, invoke the delayed actions (in gray background) deﬁned by ideal
program idealP at the activation point named “Upon receiving message m from pseudonym ¯P ”. Notice that the program
idealP speaks of pseudonyms instead of party identiﬁers. Set rqueue := ∅.
Set T := T + 1
Assert that ( ¯P , P ) ∈ nyms.
Invoke the immediate actions deﬁned by ideal program idealP at the activation point named “Upon receiving message
m from pseudonym ¯P ”.
Queue the message by calling rqueue.add(m, ¯P ).
Other activations: Upon receiving a message of the form (m, ¯P ) from a party P :
Permute: Upon receiving (permute, perm) from the adversary S, record perm.
GetTime: On receiving gettime from a party P , notify the adversary S of (gettime, P ), and return the current time T
to party P .
GenNym: Upon receiving gennym from an honest party P : Notify the adversary S of gennym. Wait for S to respond with
a new nym ¯P such that ¯P /∈ nyms. Now, let nyms := nyms ∪ {(P, ¯P )}, and send ¯P to P . Upon receiving (gennym, ¯P )
from a corrupted party P : if ¯P /∈ nyms, let ¯P := nyms ∪ {(P, ¯P )}.
Ledger operations: // inner activation
Transfer: Upon receiving (transfer, amount, ¯Pr) from some pseudonym ¯Ps:
Notify (transfer, amount, ¯Pr, ¯Ps) to the ideal adversary S.
Assert that ledger[ ¯Ps] ≥ amount.
ledger[ ¯Ps] := ledger[ ¯Ps] − amount
ledger[ ¯Pr] := ledger[ ¯Pr] + amount
/* ¯Ps, ¯Pr can be pseudonyms or true identities. Note that each party’s identity is a default pseudonym for the party. */
Expose: On receiving exposeledger from a party P , return ledger to the party P .
Fig. 10. The F (idealP) functionality is parameterized by an ideal program denoted idealP. An ideal program idealP can specify two types of activation points,
immediate activations and delayed activations. Activation points are invoked upon recipient of messages. Immediate activations are processed immediately,
whereas delayed activations are collected and batch processed in the next round. The F (·) wrapper allows the ideal adversary S to specify an order perm in
which the messages should be processed in the next round. For each delayed activation, we use the leak notation in an ideal program idealP to deﬁne the
leakage which is immediately exposed to the ideal adversary S upon recipient of the message.
a “rock, paper, scissors” game, if inputs are sent in the
clear, an adversary can decide its input based on the other
party’s input. An adversary can also try to maul transactions
submitted by honest parties to potentially redirect payments
to itself. Since our model captures a rushing adversary,
we can write ideal functionalities that preclude such front-
running attacks.
functionality wrapper F: An ideal
Ideal
functionality
F(idealP) takes in an ideal program denoted idealP. Specif-
ically, the wrapper F(·) part deﬁnes standard features such
as time, pseudonyms, a public ledger, and money transfers
between parties. Our ideal functionality wrapper is formally
presented in Figure 10.
Protocol wrapper Π: Our protocol wrapper allows us to
modularize the presentation of user protocols. Our protocol
wrapper is formally presented in Figure 12.
Terminology. For disambiguation, we always refer to the
user-deﬁned portions as programs. Programs alone do not
have complete formal meanings. However, when programs
are wrapped with functionality wrappers (including F(·)
856856
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:41 UTC from IEEE Xplore.  Restrictions apply. 
G(B) functionality
Given a blockchain program denoted B, the G(B) functionality is deﬁned as below:
Init: Upon initialization, perform the following:
A ledger data structure ledger[ ¯P ] stores the account balance of party ¯P . Send the entire balance ledger to A.
Set current time T := 0. Set the receive queue rqueue := ∅.
Run the Init procedure of the B program.
Send the B program’s internal state to the adversary A.
Tick: Upon receiving tick from an honest party, if the functionality has collected tick conﬁrmations from all honest
parties since the last clock tick, then
Apply the adversarial permutation perm to the rqueue to reorder the messages received in the previous round.
Call the Timer procedure of the B program.
Pass the reordered messages to the B program to be processed. Set rqueue := ∅.
Set T := T + 1
Other activations:
• Authenticated receive: Upon receiving a message (authenticated, m) from party P :
• Pseudonymous receive: Upon receiving a message of the form (pseudonymous, m, ¯P , σ) from any party:
Send (m, P ) to the adversary A
Queue the message by calling rqueue.add(m, P ).
Send (m, ¯P , σ) to the adversary A
Parse σ := (nonce, σ(cid:3)), and assert Verify( ¯P .spk, (nonce, T, ¯P .epk, m), σ(cid:3)) = 1
If message (pseudonymous, m, ¯P , σ) has not been received earlier in this round, queue the message by calling
rqueue.add(m, ¯P ).
Send m to the adversary A
If m has not been seen before in this round, queue the message by calling rqueue.add(m).
• Anonymous receive: Upon receiving a message (anonymous, m) from party P :
Permute: Upon receiving (permute, perm) from the adversary A, record perm.
Expose: On receiving exposestate from a party P , return the functionality’s internal state to the party P . Note that this
also implies that a party can query the functionality for the current time T .
Ledger operations: // inner activation
Transfer: Upon recipient of (transfer, amount, ¯Pr) from some pseudonym ¯Ps:
Assert ledger[ ¯Ps] ≥ amount
ledger[ ¯Ps] := ledger[ ¯Ps] − amount
ledger[ ¯Pr] := ledger[ ¯Pr] + amount
Fig. 11. The G(B) functionality is parameterized by a blockchain program denoted B. The G(·) wrapper mainly performs the following: i) exposes all of
its internal states and messages received to the adversary; ii) makes the functionality time-aware: messages received in one round and queued and processed
in the next round. The G(·) wrapper allows the adversary to specify an ordering to the messages received by the blockchain program in one round.
and G(·)), we obtain functionalities with well-deﬁned formal
meanings. Programs can also be wrapped by a protocol
wrapper Π to obtain a full protocol with formal meanings.
B. Modeling Time
At a high level, we express time in a way that conforms
to the Universal Composability framework [21]. In the ideal
world execution,
time is explicitly encoded by a variable
T in an ideal functionality F(idealP). In the real world
execution, time is explicitly encoded by a variable T in our
blockchain functionality G(B). Time progresses in rounds. The
environment E has the choice of when to advance the timer.
We assume the following convention: to advance the timer,
the environment E sends a “tick” message to all honest parties.
Honest parties’ protocols would then forward this message
to F(idealP) in the ideal-world execution,
or to the G(B)
functionality in the real-world execution. On collecting “tick”
messages from all honeset parties, the F(idealP) or G(B)
functionality would then advance the time T := T + 1. The
functionality also allows parties to query the current time T .
When multiple messages arrive at the blockchain in a time
interval, we allow the adversary to choose a permutation
to specify the order in which the blockchain will process
the messages. This captures potential network attacks such
as delaying message propagation, and front-running attacks
(a.k.a. rushing attacks) where an adversary determines its own
message after seeing what other parties send in a round.
C. Modeling Pseudonyms
We model a notion of “pseudonymity” that provides a form
of privacy, similar to that provided by typical cryptocurren-
cies such as Bitcoin. Any user can generate an arbitrary
857857
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:41 UTC from IEEE Xplore.  Restrictions apply. 
Pseudonym related:
Π(UserP) protocol wrapper in the G(B)-hybrid world
Given a party’s local program denoted prot, the Π(prot) functionality is deﬁned as below:
GenNym: Upon receiving input gennym from the environment E, generate (epk, esk) ← Keygenenc(1λ), and (spk, ssk) ←
Keygensign(1λ). Call payload := prot.GenNym(1λ, (epk, spk)). Store nyms := nyms ∪ {(epk, spk, payload)}, and output
(epk, spk, payload) as a new pseudonym.
Send: Upon receiving internal call (send, m, ¯P ):
If ¯P == P : send (authenticated, m) to G(B).
Else,
Assert that pseudonym ¯P has been recorded in nyms;
Query current time T from G(B). Compute σ(cid:3) := Sign(ssk, (nonce, T, epk, m)) where ssk is the recorded secret signing
key corresponding to ¯P , nonce is a freshly generated random string, and epk is the recorded public encryption key
corresponding to ¯P . Let σ := (nonce, σ(cid:3)).
Send (pseudonymous, m, ¯P , σ) to G(B).
// this is an authenticated send
// this is a pseudonymous send
AnonSend: Upon receiving internal call (anonsend, m, ¯P ): send (anonymous, m) to G(B).
Transfer: Upon receiving input (transfer, $amount, ¯Pr, ¯P ) from the environment E:
Assert that ¯P is a previously generated pseudonym.
Send
Tick: Upon receiving tick from the environment E, forward the message to G(B).
Act as pseudonym: Upon receiving any input of the form (m, ¯P ) from the environment E:
to G(B) as pseudonym ¯P .
Timer and ledger transfers:
transfer, $amount, ¯Pr
Other activations:
(cid:2)
(cid:3)
Assert that ¯P was a previously generated pseudonym.
Pass (m, ¯P ) the party’s local program to process.
Others: Upon receiving any other input from the environment E, or any other message from a party: Pass the input/message
to the party’s local program to process.
Fig. 12. Protocol wrapper.
of their pseudonyms, as described above. Additionally, “anon-
send” allows a user to publish a message without reference to
any pseudonym at all.
In spite of pseudonymity, it is sometimes desirable to assign
a particular user to a speciﬁc role in a blockchain program
(e.g., “auction manager”). The alternative is to assign roles
on a “ﬁrst-come ﬁrst-served” basis (e.g., as the bidders in an
auction). To this end, we allow each party to deﬁne generate
a single “default” pseudonym which is publicly-bound to
their real identity. We allow applications to make use of this
through a convenient abuse of notation, by simply using a
party identiﬁer as a parameter or hardcoded string. Strictly
speaking, the pseudonym string is not determined until the
“gennym” subroutine is executed; the formal interpretation is
that whenever such an identity is used, the default pseudonym
associated with the identity is fetched from the blockchain
program. (This approach is effectively the same as taken by
Canetti [22], where a functionality FCA allows each party to
bind their real identity to a single public key of their choice).
Additional appendices are supplied in the online full ver-
sion [37].
(polynomially-bounded) number of pseudonyms, and each
pseudonym is “owned” by the party who generated it. The
correspondence of pseudonyms to real identities is hidden
from the adversary.
Effectively, a pseudonym is a public key for a digital
signature scheme, and the corresponding private key is known
by the party who “owns” the pseudonym. The blockchain
functionality allows parties to publish authenticated messages
that are bound to a pseudonym of their choice. Thus each inter-
action with the blockchain program is, in general, associated
with a pseudonym but not to a user’s real identity.
We abstract away the details of pseudonym management
by implementing them in our wrappers. This allows user-
deﬁned applications to be written very simply, as though
using ordinary identities, while enjoying the privacy beneﬁts
of pseudonymity.
Our wrapper provides a user-deﬁned hook, “gennym”, that
is invoked each time a party creates a pseudonym. This
allows the application to deﬁne an additional per-pseudonym
payload, such as application-speciﬁc public keys. From the
point-of-view of the application, this is simply an initialization
subroutine invoked once for each participant.
Our wrapper provides several means for users to communi-
cate with a blockchain program. The most common way is for
a user to publish an authenticated message associated with one
858858
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:41 UTC from IEEE Xplore.  Restrictions apply.