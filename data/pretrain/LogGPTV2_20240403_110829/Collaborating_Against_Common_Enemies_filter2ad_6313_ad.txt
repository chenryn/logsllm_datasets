H(X) = −X
P (xi)log(P (xi)).
(2)
xi
This analysis is repeated for each IDS and the diﬀer-
ence in entropies are computed for each IDS. Figure 10
shows the CDF of these entropy diﬀerences. The ﬁg-
ure shows that the set of IDSs with which an IDS is
correlated is far from random. It shows that the empir-
ical distribution has, on average, 7.2 bits less entropy
than the one generated by random targeting. Note that
number of IDSs in our system is 1700, hence the max-
imum entropy is 10.73 bits. The diﬀerence in entropy
is also bounded by the same value. Thus, an entropy
diﬀerence of 7.2 bits is very high, which shows that the
set of correlated IDSs in our data is far from random.
4.5 Origin of IDS Attack Correlation
So why two IDSs share correlated attacks? We investi-
gate two possible reasons: 1) closeness in the protected
IP space, 2) similarity in the software and services run
on the two sites. Our results show that the latter is the
likely reason of attack correlation between two IDSs.
(a) Closeness in IP space: Some attackers employ
scanning techniques to discover vulnerabilities. They
start from a randomly selected IP and then scan se-
quentially. If the scanned address spaces belong to dif-
ferent sites, the IDS at the respective sites are likely
to show attack correlation. Thus, closeness in the IP
space could be a reason for attack correlation.
We compute the distance between two preﬁxes P1
and P2 of equal length as the decimal value of the bit-
string produced by taking XOR of P1 and P2. If the
preﬁxes are of unequal length, the shorter preﬁx is bit-
shifted to the left to equalize the lengths. The distance
in IP space between two IDSs i and j, Dij, is deﬁned
as the IP distance between their protected address pre-
ﬁxes. Also for each IDS pair we generate the vector of
correlation ~Cij, where cij is the percentage of attack
at i which are correlated with some attacks at j.
If
proximity in the IP space is a reason for attack corre-
lation, then the more the distance between IDSs i and
j is, the less likely they share correlated attacks–i.e.,
372
Internet Measurement Conference 2005 
USENIX Association
~Dij and ~Cij should be inversely correlated. Thus, we
compute the cross correlation between these two vec-
tors.2 Note that a cross correlation around zero means
independence. Figure 11 plots the cross correlation be-
tween attack correlation and distance in IP space. The
x-axis is the IDS id. Note that the correlation with IP
space hovers around zero, indicating that attack cor-
relation is independent from the distance in IP space.
Thus, having nearby IP preﬁxes does not have a visible
impact on sharing correlated attacks.
(b) Similarity in Software and Services: Small
correlation groups may be due to recent attack trends.
In particular, two IDSs may share correlated attacks
because they are on a single hit list, or they run soft-
ware or a service that is targeted by the common at-
tacker. For example, the Santy worm uses a vulner-
ability in popular phpBB discussion forum software
to spread and uses a search engine to ﬁnd vulnerable
servers [6].
Unfortunately, except for the university logs (U1), we
do not know the identity of the protected networks, the
type of software they run, or the services they provide,
and hence cannot check attack correlation against that
information. Instead we perform two indirect tests.
First, we have examined the correlated attacks in
each group for the case of the ISP data where full attack
details are available. Indeed, except for one correlation
group, each group seems to focus on a speciﬁc shared
attack, i.e., more than 60% of the correlated alerts in
that group are of a particular type. There are SMTP
groups, NT groups, IIS groups, etc. This should not
be surprising as recent attacks obtain a list of networks
that run a software with the targeted vulnerability via
a search engine or other ways and send only to those
sites [6].
Second, we try to indirectly infer the software and
services run on the correlated networks by compar-
ing the type of alerts they generate. We compute
the distribution of alert types generated by each net-
work and compare them against each other. We divide
alerts into 13 broad categories: alerts due to attacks
on DNS servers, web servers, ftp, RPC services, Win-
dows Server 2003, servers running RPC, mail servers,
servers using SQL (both MS and MySQL), telnet and
ssh servers, attacks on routers, IRC servers, CIFS (SMB)
servers and miscellaneous. We compute the fraction of
alerts of each type in the IDS log. We consider this
distribution to be characteristic of the network itself,
and check whether attack correlation is correlated with
correlation in this distribution.
We express the alert distribution in a vector ~Vi with
13 elements. For example, ~Vi = (0.03, 0.2, ...) means
that 0.03% of the alerts generated by IDS i are of cat-
 1
 0.5
 0
-0.5
l
n
o
i
t
a
e
r
r
o
C
s
s
o
r
C
-1
 0
IP Space distance
Distance in site correlation
 5
 10
 15
 20
IDS ID
 25
 30
 35
 40
Figure 11: Cross correlation between attack cor-
relation and: 1) distance in IP space, 2) an indi-
rect measure of site’s software and services. Fig-
ure shows that attack correlation is independent of
closeness in IP space.
In contrast, attack corre-
lation seems to decrease with decreasing similar-
ity between the software run on the protected net-
works. The ﬁgure is for the ISP and U1 datasets
for which we have detailed alert logs.
egory 1, etc. We measure the distance between the
alert distributions at IDS i and j by the diﬀerence
~Dij = ||~Vi − ~Vj||, where ||.|| is the Euclidean norm.
Similarly to the analysis in §4.5(a), we compare ~Dij
with ~Cij, where cij is the percentage of attack at i
which are correlated with some attacks at j. If sim-
ilar software and services are reasons for attack cor-
relation, then ~Dij and ~Cij should be inversely corre-
lated. We compute the cross correlation between these
two vectors. Note that a cross correlation around zero
means independence. whereas a negative cross corre-
lation means that an increase in the distance, ~Dij, is
correlated with a decrease in attack correlation ~Cij.
Figure 11 plots the cross correlation between attack
correlation and our indirect measurement of the sim-
ilarity of the software and services on the protected
networks. Note that attack correlation is negatively
correlated with our measure of the distance between
the software and services on the protected networks–
i.e., an increase in this distance results in a decrease
in correlation. Thus, it seems that one origin of attack
correlation across diﬀerent networks is the similarity in
the software and services they run.
5 SUMMARY OF EMPIRICAL RESULTS
The results of our study of attack correlation can be
summarized as follows:
• Correlated attacks mounted by common attack-
ers against multiple networks happen quite often.
20% of the unique sources in our dataset generate
attacks at multiple IDSs, and common/correlated
attacks account for an average of 40% of all at-
tacks observed at an IDS.
• A network experiences attacks correlated with only
a few other networks. On average an IDS shares
USENIX Association
Internet Measurement Conference 2005  
373
attacks with 4-6 other IDSs which is just 0.4% of
the total number of IDSs, and 96% of the IDSs
share attacks with less than 10 other IDSs.
• Attack correlation persists over time–i.e., the sets
of IDSs that experience correlated attacks did not
change for the duration of our study (1-3 months).
• Though we do not know all origins of attack corre-
lation, our data shows that similarity in the soft-
ware and services run on the protected networks
plays an important role in making them endure
correlated attacks.
• Common attackers tend to attack diﬀerent net-
works within a few minutes of each other. Thus,
there are considerable advantages for realtime shar-
ing of alerts.
• Discovering the correlation group of an IDS (i.e.,
who shares with whom) requires minimal IDS-
related information, namely attack time and of-
fending source IPs.
• Our study of the correlation for connection-oriented
attacks shows that the correlation groups and their
member IDSs are robust to IP spooﬁng.
6 EFFICIENT COLLABORATION WITH
TRUSTED PARTNERS
The major impediments to having independently ad-
ministrated IDSs collaborate on detecting common at-
tackers are: overhead and trust. Since common at-
tackers attack diﬀerent networks within a few minutes
from each other, the IDSs need to exchange their alerts
in realtime. But exchanging alerts with thousands of
IDSs in realtime is impractical because of the resulting
overhead, and the potential of having malicious IDSs
incriminating innocent hosts or using the alert data to
discover the vulnerabilities of other networks.
We exploit the structure of attack correlation to solve
the above two problems.3 We propose a correlation-
based method for picking collaborators. By exchang-
ing alert data with only those IDSs in its correlation
group, an IDS minimizes the overhead of the collabora-
tion while maximizing its chances of detecting common
attackers. Furthermore, since the size of a correlation
group is small and its membership is stable, an IDS
can check using out-of-band mechanisms the reputabil-
ity of each of the IDSs in its correlation group. It can
use this information to decide whether to collaborate.
If needed, the IDS can use legal contracts to enforce
trust and privacy. If the IDSs choose to collaborate,
they use a secure channel to exchange information so
that eavesdroppers cannot snoop.
IDSs need to know which other IDSs are in their cor-
relation group. We envision a number of non-proﬁt or-
ganizations (like CERT and DSHIELD) and commer-
cial entities that discover attack correlation across IDSs
and report to each network the identity of the other
networks in its correlation group. We call these entities
Attack Correlation Detectors (ACD). A network may
participate in one or more ACDs. The choice of ACD
may depend on the number and types of networks par-
ticipating in the ACD, its reputation, etc. The ACD
occasionally collects logs from participant IDSs. The
logs cover a particular period that can be as small as a
single day randomly chosen by the ACD. The logs have
minimal sensitive information. Each record in the log
provides the following ﬁelds: (Time, Source IP, Packet
Count). Our analysis in §2.2.3 shows that these ﬁelds
are enough for detecting attack correlation. The ACD
performs the correlation analysis and informs each net-
work of its correlation group, expressed as a list of the
following records: (correlated IDSs, level of correla-
tion). The correlation analysis is not intensive, the
average time taken to analyze a days worth of logs is
just 4 hours on an Intel Itanium 1.5 GHz SMP ma-
chine with 2 GB of memory. Further since IDS corre-
lation is persistent over atleast a month, the analysis
is repeated only after such long periods of time. Once
organizations know their correlation group, they can
independently decide with whom to collaborate, bas-
ing their decisions on the level of correlation and the
identity of the peer network.
Integrating new IDSs and updating participant IDSs
about changes in their correlation can be performed
incrementally. A new IDS provides logs from the same
collection point so that its correlation group can be
found. Updates are incremental, since IDSs need to be
informed only if their correlation group changes. Due
to the persistence of membership in these correlation
groups (a month or more), the update process can be
performed in a lazy fashion with the cost amortized
over long periods of time.
It should be noted that acting as an ACD is relatively
simple. Indeed, DSHIELD already has the means to
provide this service to its participant networks.
6.1 Discussion
(a) Scalability: Correlation-based collaboration en-
sures scalability by the small size of the groups and
the persistence of correlation among IDSs across long
timescales. In particular, over 96% of the IDSs in our
dataset are correlated with less than 10 other IDSs.
The overhead of setting up peering and exchanging in-
formation is therefore relatively small. Additionally,
the persistence of correlation over months ensures the
scalability of ACDs. The ACDs analyze correlation at
these timescales, amortizing the cost of the analysis.
(b) Privacy: Recall that for discovering its correlation
group an IDS provides the ACD with logs of attack-
374
Internet Measurement Conference 2005 
USENIX Association
ing IP addresses, alert time, and packet count. Thus,
none of the sensitive alert ﬁelds such as the attack type,
the destination, and the destination port, are needed.
Also the data is revealed only to the ACD and does not
get published. On the other hand, privacy of the data
exchanged with one’s collaborators is provided largely
because IDSs have the ability to independently decide
which IDSs to collaborate with, and what to reveal.
Further, the persistence of correlation allows the col-
laborators to use legal contracts to protect their data,
if necessary.
(c) Protecting against spreading lies: An IDS
that lies about its attackers to the ACD does not harm
the system. Such lies are unlikely to be correlated with
any of the attacks seen at other IDSs, even if they do,
each IDS checks independently the credential of each
of its collaborators before sharing any alert data with
them. Lying to one’s collaborators is unlikely as their
reputations are carefully checked and information ex-
change is protected by legal contracts.
7 PICKING THE RIGHT COLLABORATORS
We present a rough evaluation of the overhead and
the enhancement in detection capability obtained via
various choices of collaborating IDSs for detecting cor-
related attacks. We compare the following 4 schemes
for picking collaborators:
• Collaborate With ALL IDS: An IDS collabo-
• Correlation-Based Collaboration (CBC):
rates with all other IDSs in our dataset.
Each IDS collaborates with only those IDSs in its
correlation group.
• Random Collaboration: An IDS picks a ran-
dom set of IDSs to collaborate with. To ensure
the comparison with CBC is fair, each IDS col-
laborates with as many IDSs as there are in its
correlation group.
• Local Detection:
in this scheme, detection is
based on local alerts with no collaboration with
other IDSs.
7.1 Blacklisting Malicious Sources
In order to compare the above schemes, we need to
specify a protocol for exchanging alerts and processing
the acquired information. We use the simple approach
described below. This approach is not necessarily op-
timal, but it suﬃces to evaluate the relative beneﬁts of
the diﬀerent methods of picking collaborators.
The IDSs collaborate to detect low rate attackers
and speed up the detection of moderate rate attackers.
Each IDS maintains a Blacklisting Threshold and
a Querying Threshold. A source IP address is black-
listed when the number of suspicious packets from it
crosses a Blacklisting Threshold. An IDS queries
its collaborators when the number of malicious packets
from a source IP address crosses the Querying Threshold.
If the aggregate rate of the oﬀending source at all col-
laborators exceeds the Blacklisting Threshold the
source is blacklisted. Once a source is blacklisted it
is set apart for further investigation and an alarm is
triggered to all collaborators.
The time taken to blacklist a source depends on two
factors; the rate at which the source is attacking as
well as the chosen Blacklisting Threshold. In pick-
ing a particular threshold, there is an inherent tradeoﬀ
between false positive ratio and false negative ratio.
A low Blacklisting Threshold will result in a high
false positive ratio while a high threshold will miss
many moderate rate attacks resulting in a high false
negative ratio. The right value for the Blacklisting
Threshold is site speciﬁc and should be picked to op-
timize the false negative and false positive ratios.
We use the ISP and U1 datasets to ﬁnd a good value
for the thresholds because these logs contain enough
information to distinguish many cases of false posi-
tives. We set the Blacklisting Threshold to 1000
malicious packets/day because in our dataset, this rate
results in a false positive ratio less than 1%. We set
the Querying Threshold to 50 malicious packets/day.
The Querying Threshold has to be substantially lower
than the Blacklisting Threshold, but there is noth-
ing special about the value of 50 packets/day. In real-
ity, these thresholds will vary depending on the local
sites conﬁguration as well as the nature of the alert
itself. The above thresholds seem reasonable for those
IDSs in our dataset for which we have detailed attack
information.
To simulate the attacks, we replay the traces in our
datasets. We divide one month worth of traces into two
equal parts, corresponding to 15 days each. The corre-
lation groups are generated from one set (the training
set), while the various schemes for picking collabora-
tors are tested on the other set (the test set).
7.2 Detection Speedup
Figure 12 plots the time it takes to blacklist a source
in each of the four approaches: CBC, Local Detec-
tion, Random Collaboration and Collaboration with
All IDSs. The time to blacklist a source is deﬁned