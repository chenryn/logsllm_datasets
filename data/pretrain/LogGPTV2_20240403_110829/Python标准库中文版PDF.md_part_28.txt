31
30 31
注意这里的日历是按照欧洲习惯打印的, 也就是说星期一是一个星期的第一天,
其他情况需要请参考模块中的几个类. (和咱们一样, 不用管了)
该模块中的其他类或函数可以帮助你输出自己需要的格式.
14.11. sched 模块
sched 模块为非线程环境提供了一个简单的计划任务模式. 如 Example 14-14
所示.
14.11.0.1. Example 14-14. 使用 sched 模块
File: sched-example-1.py
import sched
import time, sys
scheduler = sched.scheduler(time.time, time.sleep)
# add a few operations to the queue
scheduler.enter(0.5, 100, sys.stdout.write, ("one\n",))
scheduler.enter(1.0, 300, sys.stdout.write, ("three\n",))
scheduler.enter(1.0, 200, sys.stdout.write, ("two\n",))
scheduler.run()
one
two
three
14.12. statcache 模块
statcache 模块提供了访问文件相关信息的相关函数. 它是 os.stat 的扩展模
块, 而且它会缓存收集到的信息. 如 Example 14-15 所示.
2.2 后该模块被废弃, 请使用 os.stat() 函数代替, 原因很简单, 它导致了更
复杂的缓存管理, 反而降低了性能.
14.12.0.1. Example 14-15. 使用 statcache 模块
File: statcache-example-1.py
import statcache
import os, stat, time
now = time.time()
for i in range(1000):
st = os.stat("samples/sample.txt")
print "os.stat", "=>", time.time() - now
now = time.time()
for i in range(1000):
st = statcache.stat("samples/sample.txt")
print "statcache.stat", "=>", time.time() - now
print "mode", "=>", oct(stat.S_IMODE(st[stat.ST_MODE]))
print "size", "=>", st[stat.ST_SIZE]
print "last modified", "=>", time.ctime(st[stat.ST_MTIME])
os.stat => 0.371000051498
statcache.stat => 0.0199999809265
mode => 0666
size => 305
last modified => Sun Oct 10 18:39:37 1999
14.13. grep 模块
grep 模块提供了在文本文件中搜索字符串的另种方法, 如 Example 14-16 所
示.
版本 2.1 时被声明不支持, 及就是说, 当前版本已经无法使用该模块.
14.13.0.1. Example 14-16. 使用 grep 模块
File: grep-example-1.py
import grep
import glob
grep.grep("\", glob.glob("samples/*.txt"))
# 4: indentation, rather than delimiters, might become
14.14. dircache 模块
(已经废弃) 与 statcache 类似, 该模块是 os.listdir 函数的一个扩展, 提
供了缓存支持, 可能因为同样的原因被废弃吧~ MUHAHAHAHAHA~~~~ . 请使用
os.listdir 代替. 如 Example 14-17 所示.
14.14.0.1. Example 14-17. 使用 dircache 模块
File: dircache-example-1.py
import dircache
import os, time
#
# test cached version
t0 = time.clock()
for i in range(100):
dircache.listdir(os.sep)
print "cached", time.clock() - t0
#
# test standard version
t0 = time.clock()
for i in range(100):
os.listdir(os.sep)
print "standard", time.clock() - t0
cached 0.0664509964968
standard 0.5560845807
14.15. dircmp 模块
(已废弃, 只用于 1.5.2) dircmp 模块用于比较两个目录的内容, 如 Example
14-18 所示.
14.15.0.1. Example 14-18. 使用 dircmp 模块
File: dircmp-example-1.py
import dircmp
d = dircmp.dircmp()
d.new("samples", "oldsamples")
d.run()
d.report()
diff samples oldsamples
Only in samples : ['sample.aiff', 'sample.au', 'sample.wav']
Identical files : ['sample.gif', 'sample.gz', 'sample.jpg', ...]
Python 2.0 后, 该模块被 filecmp 替换.
14.16. cmp 模块
(已废弃, 只用于 1.5.2) cmp 模块用于比较两个文件, 如 Example 14-19 所
示.
14.16.0.1. Example 14-19. 使用 cmp 模块
File: cmp-example-1.py
import cmp
if cmp.cmp("samples/sample.au", "samples/sample.wav"):
print "files are identical"
else:
print "files differ!"
files differ!
Python 2.0 后, 该模块被 filecmp 替换.
14.17. cmpcache 模块
(已废弃, 只用于 1.5.2) cmpcache 模块用于比较两个文件. 它是 cmp 模块的
扩展, 提供了缓存支持. 如 Example 14-20 所示.
14.17.0.1. Example 14-20. 使用 cmpcache 模块
File: cmpcache-example-1.py
import cmpcache
if cmpcache.cmp("samples/sample.au", "samples/sample.wav"):
print "files are identical"
else:
print "files differ!"
files differ!
Python 2.0 后, 该模块被 filecmp 替换.
但 filecmp 已经不提供缓存支持.
14.18. util 模块
(已废弃, 只用于 1.5.2) util 模块提供了常见操作的封装函数. 新代码可以
使用如 Examples 14-21 到 14-23 的实现方法.
Example 14-21 展示了 remove(sequence, item) 函数.
14.18.0.1. Example 14-21. 实现 util 模块的 remove 函数
File: util-example-1.py
def remove(sequence, item):
if item in sequence:
sequence.remove(item)
Example 14-22 展示了 readfile(filename) => string 函数.
14.18.0.2. Example 14-22. 实现 util 模块的 readfile 函数
File: util-example-2.py
def readfile(filename):
file = open(filename, "r")
return file.read()
Example 14-23 展示了 `readopenfile(file) => string 函数.
14.18.0.3. Example 14-23. 实现 util 模块的 readopenfile 函数
File: util-example-3.py
def readopenfile(file):
return file.read()
14.19. soundex 模块
(已废弃, 只用于 1.5.2) soundex 实现了一个简单的 hash 算法, 基于英文发
音将单词转换为 6 个字符的字符串.
版本 2.0 后, 该模块已从标准库中删除.
get_soundex(word) 返回给定单词的 soundex 字符串. sound_similar(word1,
word2) 判断两个单词的 soundex 是否相同. 一般说来发音相似的单词有相同
的 soundex . 如 Example 14-24 所示.
14.19.0.1. Example 14-24. 使用 soundex 模块
File: soundex-example-1.py
import soundex
a = "fredrik"
b = "friedrich"
print soundex.get_soundex(a), soundex.get_soundex(b)
print soundex.sound_similar(a, b)
F63620 F63620
1
14.20. timing 模块
(已废弃, 只用于 Unix ) timing 用于监控 Python 程序的执行时间. 如
Example 14-25 所示.
14.20.0.1. Example 14-25. 使用 timing 模块
File: timing-example-1.py
import timing
import time
def procedure():
time.sleep(1.234)
timing.start()
procedure()
timing.finish()
print "seconds:", timing.seconds()
print "milliseconds:", timing.milli()
print "microseconds:", timing.micro()
seconds: 1
milliseconds: 1239
microseconds: 1239999
你可以按照 Example 14-26 中的方法用 time 模块实现 timing 模块的功能.
14.20.0.2. Example 14-26. 模拟 timing 模块
File: timing-example-2.py
import time
t0 = t1 = 0
def start():
global t0
t0 = time.time()
def finish():
global t1
t1 = time.time()
def seconds():
return int(t1 - t0)
def milli():
return int((t1 - t0) * 1000)
def micro():
return int((t1 - t0) * 1000000)
time.clock() 可以替换 time.time() 获得 CPU 时间.
14.21. posixfile 模块
(已废弃, 只用于 Unix ) posixfile 提供了一个类文件的对象( file-like
object ), 实现了文件锁定的支持. 如 Example 14-27 所示. 新程序请使用
fcntl 模块代替.
14.21.0.1. Example 14-27. 使用 posixfile 模块
File: posixfile-example-1.py
import posixfile
import string
filename = "counter.txt"
try:
# open for update
file = posixfile.open(filename, "r+")
counter = int(file.read(6)) + 1
except IOError:
# create it
file = posixfile.open(filename, "w")
counter = 0
file.lock("w|", 6)
file.seek(0) # rewind
file.write("%06d" % counter)
file.close() # releases lock
14.22. bisect 模块
bisect 模块用于向排序后的序列插入对象.
insort(sequence, item) 将条目插入到序列中, 并且保证序列的排序. 序列可
以是任意实现了 _ _getitem_ _ 和 insert 方法的序列对象. 如 Example
14-28 所示.
14.22.0.1. Example 14-28. 使用 bisect 模块向列表插入条目
File: bisect-example-1.py
import bisect
list = [10, 20, 30]
bisect.insort(list, 25)
bisect.insort(list, 15)
print list
[10, 15, 20, 25, 30]
bisect(sequence, item) => index 返回条目插入后的索引值, 不对序列做任何
修改. 如 Example 14-29 所示.
14.22.0.2. Example 14-29. 使用 bisect 模块获得插入点位置
File: bisect-example-2.py
import bisect
list = [10, 20, 30]
print list
print bisect.bisect(list, 25)
print bisect.bisect(list, 15)
[10, 20, 30]
2
1
14.23. knee 模块
knee 模块用于 Python 1.5 中导入包( package import )的实现. 当然 Python
解释器已经支持了这个, 所以这个模块几乎没有什么作用, 不过你可以看看它
的代码, 明白这一切是怎么完成的.
代码请参见 Python-X.tgz\Python-2.4.4\Demo\imputil\knee.py
当然, 你可以导入该模块,如 Example 14-30 所示.
14.23.0.1. Example 14-30. 使用 knee 模块
File: knee-example-1.py
import knee
# that's all, folks!
14.24. tzparse 模块
(已废弃) tzparse 模块用于解析时区标志( time zone specification ). 导入
时它会自动分析 TZ 环境变量. 如 Example 14-31 所示.
14.24.0.1. Example 14-31. 使用 tzparse 模块
File: tzparse-example-1.py
import os
if not os.environ.has_key("TZ"):
# set it to something...
os.environ["TZ"] = "EST+5EDT;100/2,300/2"
# importing this module will parse the TZ variable
import tzparse
print "tzparams", "=>", tzparse.tzparams
print "timezone", "=>", tzparse.timezone
print "altzone", "=>", tzparse.altzone
print "daylight", "=>", tzparse.daylight
print "tzname", "=>", tzparse.tzname
tzparams => ('EST', 5, 'EDT', 100, 2, 300, 2)
timezone => 18000
altzone => 14400
daylight => 1
tzname => ('EST', 'EDT')
除了这些变量之外, 该模块还提供了一些用于时间计算的函数.
14.25. regex 模块
(已废弃) regex 模块是旧版本的(1.5 前)正则表达式模块, 用法如 Example
14-32 所示. 新代码请使用 re 模块实现.
注意在 Python 1.5.2 中 regex 比 re 模块要快. 但在新版本中 re 模块更
快.
14.25.0.1. Example 14-32. 使用 regex 模块
File: regex-example-1.py
import regex
text = "Man's crisis of identity in the latter half of the 20th century"
p = regex.compile("latter") # literal
print p.match(text)
print p.search(text), repr(p.group(0))
p = regex.compile("[0-9]+") # number
print p.search(text), repr(p.group(0))
p = regex.compile("\") # two-letter word
print p.search(text), repr(p.group(0))
p = regex.compile("\w+$") # word at the end
print p.search(text), repr(p.group(0))
-1
32 'latter'
51 '20'
13 'of'
56 'century'
14.26. regsub 模块
(已废弃) regsub 模块提供了基于正则表达式的字符串替换操作. 用法如
Example 14-33 所示. 新代码请使用 re 模块中的 replace 函数代替.
14.26.0.1. Example 14-33. 使用 regsub 模块
File: regsub-example-1.py
import regsub
text = "Well, there's spam, egg, sausage, and spam."
print regsub.sub("spam", "ham", text) # just the first
print regsub.gsub("spam", "bacon", text) # all of them
Well, there's ham, egg, sausage, and spam.
Well, there's bacon, egg, sausage, and bacon.
14.27. reconvert 模块
(已废弃) reconvert 提供了旧样式正则表达式( regex 模块中使用)到新样式
( re 模块)的转换工具. 如 Example 14-34 所示. 它也可以作为一个命令行工
具.
14.27.0.1. Example 14-34. 使用 reconvert 模块
File: reconvert-example-1.py
import reconvert
for pattern in "abcd", "a\(b*c\)d", "\":
print pattern, "=>", reconvert.convert(pattern)
abcd => abcd
a\(b*c\)d => a(b*c)d
\ => \b\w+\b
14.28. regex_syntax 模块
(已废弃) regex_syntax 模块用于改变正则表达式的模式, 如 Example 14-35
所示.
14.28.0.1. Example 14-35. 使用 regex_syntax 模块
File: regex-syntax-example-1.py
import regex_syntax
import regex
def compile(pattern, syntax):
syntax = regex.set_syntax(syntax)
try:
pattern = regex.compile(pattern)
finally:
# restore original syntax
regex.set_syntax(syntax)
return pattern
def compile_awk(pattern):
return compile(pattern, regex_syntax.RE_SYNTAX_AWK)
def compile_grep(pattern):
return compile(pattern, regex_syntax.RE_SYNTAX_GREP)
def compile_emacs(pattern):
return compile(pattern, regex_syntax.RE_SYNTAX_EMACS)
14.29. find 模块
(已废弃, 只用于 1.5.2) find 模块用于在给定目录及其子目录中查找符合给
定匹配模式的文件, 如 Example 14-36 所示.
匹配模式的语法与 fnmatch 中相同.
14.29.0.1. Example 14-36. 使用 find 模块
File: find-example-1.py
import find
# find all JPEG files in or beneath the current directory
for file in find.find("*.jpg", "."):
print file
.\samples\sample.jpg
15. Py 2.0 后新增模块
本章将在以后的时间里慢慢完成, 更新.
16. 后记