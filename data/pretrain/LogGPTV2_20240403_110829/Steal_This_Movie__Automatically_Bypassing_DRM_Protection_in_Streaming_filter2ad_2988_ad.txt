structing them is straightforward.
4.2 Optimization
A basic implementation of our approach is able to de-
tect and duplicate decrypted data in a program, but is not
yet performant enough to analyze media players. To rem-
edy this, we developed several optimizations. There are
three stages that can be optimized: the selection of loops
to analyze, the instrumentation and analysis of the loops
themselves, and general performance optimizations.
Admittedly, some of the optimizations presented here
are not automated. Speciﬁcally, limiting code coverage
requires some domain knowledge to determine which code
should be instrumented. However, MovieStealer can still
function, albeit at a reduced speed, without this optimiza-
tion.
4.2.1 Intelligent Loop Selection
Due to the overhead involved in instrumenting the mem-
ory operations of a loop and keeping track of the data that
a loop is accessing, MovieStealer instruments a limited
number of loops at a time. While a loop is instrumented,
data from its buffers is saved and passed to our analyses.
When a loop is determined by the randomness test to not
be the decryption loop, or it is eliminated by one of the
optimizations mentioned below, we discard the tracked
state and instrument the next loop. To minimize the time
necessary for MovieStealer to ﬁnd the decryption routine,
we need to select these loops in the most optimal matter.
Limit code coverage. Code coverage greatly inﬂu-
ences the execution speed of MovieStealer. In most cases
it is not necessary to instrument every module of the target
process. For example, only the core libraries of Silverlight
need to be instrumented to bypass PlayReady DRM, rather
than the whole set of libraries of the browser. To reduce
the number of loops that need to be analyzed, we only
select the ones in the suspected DRM code, cutting out a
signiﬁcant amount of overhead.
On-demand instrumentation. Although we limit
code coverage, there are still many instructions that are
executed only once during initialization, which have noth-
ing to do with decryption. Instrumenting and analyzing
such loops would be a waste of resources. Inspired by
PrivacyScope [50], we have designed MovieStealer to start
after the program has initially loaded. After we load the
authorized media player, we start MovieStealer and begin
the media playback process. Thus, the initialization code
will not be analyzed and MovieStealer will immediately
begin zeroing in on the actual decryption functionality. We
have observed that this signiﬁcantly reduces the amount of
loops that MovieStealer has to instrument and analyze.
Loop execution frequency. Additionally, we have ob-
served that, in a streaming media player, the decryption
routine is usually one of the most frequently-executed
loops. This is because additional media is constantly being
loaded over the network and must be constantly decrypted.
On the other hand, loops pertaining to other functionality
(for example, UI processing), are executed comparatively
less frequently. To take advantage of this, we prioritize
these loops for analysis ahead of less-frequently executed
loops.
Static instruction analysis. As described in prior
works [20, 46], code that carries out cryptographic func-
tionality tends to utilize a large amount of certain types of
operations. To optimize our analysis, we statically analyze
the amount of arithmetic and bitwise operations in every
loop and de-prioritize loops that lack such operations.
Additionally, we have observed that decryption routines
often contain unrolled loops for increased performance. As
such, we assign a higher priority to loops that are unrolled.
We statically detect unrolled loops by detecting a repeating
pattern of instructions before or after a loop body. While
this is a very simplistic approach to unrolling detection,
we feel that it is adequate. It works for the code that we
have observed in our analyses, and if it fails to detect an
unrolled loop, such a loop would still be analyzed later.
Loop hashing. In order to allow MovieStealer to func-
tion over several executions of a program, we save the
results of our analyses for analyzed loops. We identify
loops using a tuple consisting of the offsets of the basic
blocks comprising the loop from the base address of their
module, and the name of the module. When the analysis
of a loop is ﬁnished, the results are saved before the state
for the loop is discarded. This allows us to keep results
over multiple executions of MovieStealer in case it takes
an exceptionally long time to identify the decryption point.
While this optimization can be useful, we did not run into
any cases where we had to rely on it.
The astute reader will note that the relocating loops of
DRM schemes such as Microsoft PlayReady will not be
successfully recorded by this approach. However, this
optimization would still allow us to avoid reanalyzing the
majority of loops in a program, and being able to thus
focus on just the relocating ones will greatly reduce the
time required for MovieStealer to identify the decryption
loop.
Improved Instrumentation
4.2.2
Intelligently selecting loops to instrument greatly im-
proves MovieStealer’s performance, but lots of time is
11
USENIX Association  
22nd USENIX Security Symposium  697
Stage
Download
Decrypt
Decode
Input bandwidth Output bandwidth
roughly S
roughly S
greater than S
roughly S
roughly S
roughly S
Table 8: The bandwidth of data paths when playing a
protected media ﬁle of size S.
still spent analyzing loops that turn out to be unrelated to
decryption. For loops that handle a lot of data, this data
needs to be analyzed in a performant fashion. However,
when instrumenting loops that do not handle much data,
much time is spent waiting to acquire enough data for the
statistical tests. To further optimize this, we created several
approaches to increase the performance of loop instrumen-
tations and to decrease the time necessary to arrive at a
classiﬁcation.
Bandwidth ﬁltering. Since protected media needs to
be decrypted before being played, we should be able to
ﬁnd the decryption loop more efﬁciently by examining its
data throughput. We deﬁne the input bandwidth of a data
path as the amount of data in the aggregated input buffer
and the output bandwidth of a data path as the amount
of data in the aggregated output buffer. In Table 8, we
detail the steps that an authorized media player takes when
playing protected content, along with the expected input
and output bandwidth of these functions. Intuitively, a loop
that is decrypting the network trafﬁc should have a similar
bandwidth to the network trafﬁc itself.
We carry out a bandwidth check on each instrumented
loop every two seconds and compare it against the network
trafﬁc (for streaming media players) or the disk trafﬁc (for
GPG). Empirically, we determined that it’s safe to discard
a loop after 20 seconds if it fails the bandwidth test at least
60% of the time. A loop is considered to have failed a
bandwidth test if its bandwidth is not within 60% of the
expected bandwidth.
Avoiding unnecessary data copying. For the random-
ness test, the entropy test and the data dumping, we must
record data chunks that are read or written during the loop
execution, as described before. Since memory operations
happen very frequently, performance is critical in tracking
these reads and writes. Our approach must fulﬁll these
basic requirements:
1. Moving, copying and modifying data as little as possi-
ble.
2. Imposing as little overhead as possible for addressing
the buffer.
We did not include thread safety as one of the basic
requirements, as in real-world media players few buffers
are accessed simultaneously by multiple threads. We as-
sume that programs that do access buffers concurrently
will handle their own synchronization.
We have different strategies for reading and writing. For
written data, rather than logging what is written, two vari-
ables holding the starting address and the ending address
are maintained for every buffer. Each time a buffer write
occurs, we update the starting address and ending address
so that they correctly reﬂect the start and end positions that
are written. As we expect these buffers to be consecutive,
there is no problem with expanding the margins over bytes
that are not read yet. For the randomness and entropy tests,
MovieStealer analyzes every byte in the buffers between
the start and end positions.
For content that is read out of buffers, we have a differ-
ent strategy. As data being read during a loop might be
overwritten inside the same loop, our write-buffer strategy
does not always work. Hence it is necessary for Movi-
eStealer to not only record the memory ranges, but also
record the data located at the memory ranges at the time
that reading happens. It is important to note that memory
reading is not always consecutive nor always starts from
the beginning of the buffer. Thus, through the single run of
a loop, only parts of a buffer might be updated. To achieve
better performance, we try to avoid re-copying unchanged
data. This is done by treating each buffer as a concatena-
tion of 4,096-byte blocks. As a loop executes, we mark
the blocks that it modiﬁes, and copy only the modiﬁed
blocks when it exits. Our copied-off buffer is an array of
pointers to these blocks. Any unchanged blocks on a new
run are stored as pointers to previously-copied versions of
that data.
4.2.3 Other Optimizations
Call stack optimization. To improve performance, a
call stack key is maintained for each thread, and is updated
each time a call or ret instruction is executed. When a
new function is called, its start address is XORed onto the
call stack key when the function is added to the call stack.
When the program is about to return from a function, we
pop the function from the call stack and wipe it from the
call stack key by XORing its start address again. This way,
we can use the call stack key instead of the whole call
stack to identify a given loop. A dword comparison has
considerably less overhead than a list comparison and, in
practice, we have not seen any call stack key collisions due
to this in our experiments.
This optimization is especially useful in loop selection,
loop analysis, and data dumping.
5 Evaluation
In the course of our evaluation, we strived to demon-
strate two things:
that our optimizations work and are
effective at improving performance, and that MovieStealer
is an effective tool for bypassing the DRM of streaming
media services. Since most of the streaming media ser-
vices do not function at all without our optimizations, we
698  22nd USENIX Security Symposium 
USENIX Association
12
ran the optimization evaluation on GPG, an open source
cryptography suite. GPG has fewer real-time processing
requirements than real-world media players and as such
works despite high overhead from unoptimized analyses.
We evaluated MovieStealer’s effectiveness on a series of
online streaming services, including Netﬂix, Hulu, Ama-
zon Video, and Spotify. Our experiments consisted of
loading the streaming application (in all cases except for
Spotify, this was done by visiting the appropriate web-
page in the browser. Spotify is a stand-alone application),
starting MovieStealer, and playing a video or a song. Movi-
eStealer would then pinpoint the decryption location and,
on future runs, would begin dumping the media ﬁle. The
reconstructor would then be run to create a playable media
ﬁle. We veriﬁed that the media ﬁle was playable by playing
it in a different, unauthorized player.
We carried out three experiments for each DRM plat-
form, treating Hulu and Amazon Video as a single platform.
For each experiment, we started MovieStealer from scratch.
We recorded the number of loops identiﬁed, the loops ana-
lyzed before MovieStealer zeroed in on the sensitive loop,
the total amount of analyzed loops that contain detected
buffers, the total number of buffers identiﬁed, the total
number of decryption loops that MovieStealer identiﬁed,
and the total time until data could start being dumped. In
all of the experiments, the loop responsible for decrypting
the encrypted content was partially unrolled as a perfor-
mance optimization.
To the best of our knowledge, MovieStealer is the ﬁrst
publicly described approach with the ability to successfully
copy content protected by Microsoft PlayReady DRM with-
out screen scraping techniques, as well as the ﬁrst imple-
mentation to do cryptographic identiﬁcation and copying
of content at runtime.
MovieStealer was able to function on all DRM ap-
proaches that we evaluated.
Effect of optimizations. We carried our our optimiza-
tion evaluations by executing MovieStealer against GPG
as it decrypted a video ﬁle. First, we measured the per-
formance of MovieStealer with all optimizations enabled,
then measured the performance of ﬁrst the callstack key
optimization and then the code coverage limit optimiza-
tion by running MovieStealer with all other optimizations
enabled, and ﬁnally enabled some of our optimizations
one-by-one to demonstrate their effects. The results can be
seen in Table 9.
Necessary optimizations. Some of our optimizations
were necessary to get the media players to function at
all. As described in Section 2.3, these media players are
high-performance pieces of software with some real-time
requirements. For example, Netﬂix implements content
expiration and has minimum performance requirements
below which it will not play videos, and an unoptimized
approach fails to meet such requirements. We have found
Optimizations enabled
All
All but callstack key
All but limit code coverage
Only limit code coverage
Only static instruction analysis
Only bandwidth ﬁltering
Only execution frequency
LT
7
6
10
9
10
35
40
S
31
47
34
65
49
180
3,480
Table 9: Results for GPG. LT = loops traced, S = total
seconds before the decryption loop was identiﬁed.
Experiment no.
Loops identiﬁed
Buffers identiﬁed
Loops traced
Seconds elapsed
1
1,529
14
46
281
2
1,258
6
35
146
3
1,647
1
62
175
Table 10: Results for Amazon Video and Hulu
Experiment no.
Loops identiﬁed
Buffers identiﬁed
Loops traced
Seconds elapsed
1
2,876
88
8
86
2
2,274
80
58
110
3
2,950
152
54
191
Table 11: Results for Netﬂix
Experiment no.
Loops identiﬁed
Buffers identiﬁed
Loops traced
Seconds elapsed
1
2,305
60
224
536
2
1,845
69
204
739
3
1,667
63
138
578
Table 12: Results for Spotify
that it is possible to analyze the streaming media players
by enabling, at minimum, all of the loop selection opti-
mizations.
Non-determinism. Non-determinism is introduced
into the results from several sources. To begin with, the
programs in question are complex and multi-threaded, and
rely on external resources to function. This means that
the sequence that code is executed (and that MovieStealer
analyzes it) in varies between runs.
Additionally, MovieStealer starts on demand, so it might
begin analyzing different parts of the program in different
runs. This will also make it analyze code in different order.