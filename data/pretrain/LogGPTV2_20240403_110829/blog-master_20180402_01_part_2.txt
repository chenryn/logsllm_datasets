 Planning time: 0.147 ms  
 Execution time: 2758.621 ms  
(10 rows)  
```  
但是大家请注意BITMAP SCAN会引入一个recheck的过程，因为按BLOCK顺序扫描时，只有BLOCK ID，并不知道这个BLOCK里面哪条记录是匹配的。所以必须要recheck。  
因此BITMAP SCAN降低了IO放大，但是引入了recheck。  
在成本评估时，起作用的两个成本因子：  
1、random_page_cost，离散扫描成本，乘以要扫描的块数。  
2、cpu_operator_cost，函数或操作符的基本成本，评估的记录数乘以这个值再乘以函数或操作符的基本成本系数(```pg_proc.procost```)。  
PostgreSQL还提供了一个cluster接口，允许用户强制数据按索引顺序分布，支持btree,gist索引。   
```
postgres=# cluster corr_test using idx_corr_test_2 ;
```
按c2字段索引重组数据后，在C2字段的线性相关性变成了1，而C1字段就乱序了。   
```
postgres=# select correlation from pg_stats where tablename='corr_test' and attname='c2';
-[ RECORD 1 ]--
correlation | 1
postgres=# select correlation from pg_stats where tablename='corr_test' and attname='c1';
-[ RECORD 1 ]------------
correlation | -0.00256875
```
```
postgres=# select ctid,c1,c2 from corr_test limit 10;
  ctid  |   c1    | c2 
--------+---------+----
 (0,1)  | 4088697 |  2
 (0,2)  |   51611 |  3
 (0,3)  | 2990090 |  3
 (0,4)  | 5416221 |  3
 (0,5)  | 7579331 |  4
 (0,6)  | 2370036 |  6
 (0,7)  | 1473765 | 10
 (0,8)  | 1190875 | 13
 (0,9)  | 5966135 | 13
 (0,10) | 7936308 | 13
(10 rows)
```
## 小结
PostgreSQL使用索引扫描时，如果索引顺序与数据存储顺序的相关性很差，会导致HEAP BLOCK扫描的放大（由于乱序导致一个BLOCK被多次读取）。   
使用bitmap scan，可以消除HEAP BLOCK扫描的放大问题（按BLOCK ID排序后扫描一遍），但是会引入一个问题，需要rechek。   
所以仅仅当评估满足条件的记录数与BLOCK内实际含的记录数相比，比例较大时，使用bitmap scan带来的效果非常好，如果比例较小，那么就当operator带来的消耗比扫描IO带来的消耗小时更划算。  
(例如评估出来满足条件的有1000条，扫描100个BLOCK每个BLOCK有50条记录，那么实际上比例就是0.2=1000/(100*50))    
除了考虑数据存储的离散性，索引页本身的组织也是离散的，详见：     
[《深入浅出PostgreSQL B-Tree索引结构》](../201605/20160528_01.md)    
[《PostgreSQL 黑科技 - 空间聚集存储, 内窥GIN, GiST, SP-GiST索引》](../201709/20170905_01.md)  
https://www.postgresql.org/docs/10/static/pageinspect.html  
## 参考  
[《PostgreSQL pg_stats used to estimate top N freps values and explain rows》](../201308/20130811_01.md)    
[《PostgreSQL 统计信息pg_statistic格式及导入导出dump_stat - 兼容Oracle》](../201710/20171030_02.md)    
[《PostgreSQL pg_stat_ pg_statio_ 统计信息(scan,read,fetch,hit)源码解读》](../201610/20161018_03.md)    
[《PostgreSQL 计算 任意类型 字段之间的线性相关性》](../201604/20160403_01.md)    
[《PostgreSQL 统计信息之 - 逻辑与物理存储的线性相关性》](../201502/20150228_01.md)    
[《索引顺序扫描引发的堆扫描IO放大背后的统计学原理与解决办法 - PostgreSQL index scan enlarge heap page scans when index and column correlation small.》](../201404/20140426_01.md)    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")