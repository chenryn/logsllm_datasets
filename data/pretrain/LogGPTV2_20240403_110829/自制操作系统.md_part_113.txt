### 优化后的文本

---

#### 轻巧操作系统开发的成就

如果能够编写一个轻巧的操作系统，这无疑是一种非常优秀的特殊技能。经过这30天的学习和实践，大家应该已经体验到了这一点。这意味着你们已经超越了一般的初学者，甚至可能比一些普通的程序员更加出色（笑）。如果这是真的，那么这本书或许会成为一本经典之作，大受欢迎。

---

#### 程序优化的重要性

如果你曾经无意中编写了一些较为臃肿的程序，从喜欢简洁程序的角度来看，基于本书的经验进行改进将是非常有益的。不过，这一点与本书的主要目标——编写自己的操作系统——并无直接关系。无论你的操作系统或应用程序有多大，都欢迎将其推荐到我们的支持网页上。

---

#### 操作系统开发的诀窍

在本节中，我们将介绍一些操作系统开发的诀窍。正如在0.3节中提到的，不要一开始就想着做一个完整而完美的操作系统，这一点非常重要。遇到不满意的地方，可以随时修改，甚至完全推翻重来也是可行的。追求完美可能会导致寸步难行。多次重做是正常的，反正我们有30天的时间（习惯后两周就足够了，因为我们不会每次都从头开始）。

在这个过程中，你的能力也会逐步提升。例如，OSASK的应用程序之所以更小，是因为我们在API设计上下了功夫。比如，OSASK的invader.bin只有1108字节（invader.hrb为1590字节）。

---

#### 明确的目标

为你的操作系统设定一个明确且易于理解的目标也非常重要。例如，“纸娃娃系统”是为了教学目的而编写的，其主要目标是让初学者容易理解。为了实现这一目标，我们可以牺牲一些性能和功能。虽然有些部分可以用汇编语言大幅提升速度，但作者还是放弃了这个想法。明确了优先级和可放弃的部分后，操作系统的开发会变得更加顺利。

如果一开始没有明确的目标就开始开发，最终可能会让人难以理解开发者的目的。如果是出于娱乐目的，那也没有问题，或者你可以将“娱乐”设定为目标。这样你只需享受开发过程即可，不必过于担心性能。当别人抱怨“这个不好用”时，你可以坦然回答：“是啊，但它已经很好了。”

以提高编程技巧为目的来开发操作系统也不错。如果以此为目标，尽量不要从其他操作系统中挪用代码，而是自己编写。刚开始不必太在意目标，随着开发的深入，你会自然而然地发现各种目标。重新做过几次之后（大约第三次开始），就应该仔细考虑目标了。

---

#### 分享给他人使用

完成了一个操作系统后，想要使用它是很自然的想法。实际使用会激发你进一步改良的动力，并加深对系统的理解。更进一步，你可能会想分享给他人使用。然而，要做到这一点，必须找到你的系统优于其他系统的地方。无论多么微小的优势，如果没有，别人可能会选择Windows或Linux。

笔者开发的OSASK因为运行速度极快，因此宣传重点是“在老旧电脑上也能流畅运行，启动时间短”，并找到了一些愿意使用的用户。即使操作系统本身没有特别亮点，如果能开发出有趣的应用程序（如游戏）也不错。“如果要用这个应用程序，就必须使用我的操作系统！”尽管这种方法有些不太厚道，但从历史来看，这确实是常见的推销手段（笑）。

一旦找到愿意使用你操作系统的用户，他们很可能会通过邮件鼓励你。如果是商业销售，收益也会随之增加。

---

#### 光盘中的软件许可协议

光盘中project/目录中的文件是教材用的操作系统，按照0.7节中的声明，大家可以随意使用。这种使用方法同样适用于tolset/目录中的大多数文件。在这里列出不适用于KL-01许可协议的软件，未列出的软件均适用KL-01协议。

| 文件名 | 许可协议 | 发布地址 |
| --- | --- | --- |
| cc1.exe | GPL | http://wiki.osask.jp/?downloads/dev (go_0020) |
| cpp0.exe | GPL | http://wiki.osask.jp/?downloads/dev (go_0020) |
| ld.exe | GPL | ftp://ftp.gnu.org/gnu/binutils/ (2.13) |
| make.exe | GPL | ftp://ftp.gnu.org/gnu/make/ (3.79.1) |
| upx.exe | GPL | http://upx.sourceforge.net/ (1.25w) |
| t5lzma.exe | LGPL | http://k.hideyosi.com/tk5lgpl1.lzh |
| qemu/qemu.exe | LGPL | http://fabrice.bellard.free.fr/qemu/ (0.6.1) |
| qemu/bios.bin | LGPL | http://fabrice.bellard.free.fr/qemu/ (0.6.1) |
| qemu/SDL.dll | LGPL | http://fabrice.bellard.free.fr/qemu/ (0.6.1) |

GPL是“The GNU General Public License”的缩写，中文翻译版本可在以下链接查看：
http://wiki.linux.org.hk/w/GPLv3

简单来说，如果对GPL协议发布的软件进行了修改，修改后的产物也必须以GPL协议发布，并公开源代码。如果只是单纯转载，则必须明示原始发布地址。如果将GPL软件的一部分用于自己的程序中，该程序也必须以GPL协议发布并公开源代码。不过，私人行为的修改和引用，如果不公开可执行文件，则不必公开源代码。GPL软件无保障，因使用造成的损失不能向作者索赔。

LGPL是“The GNU Lesser General Public License”的缩写，中文翻译版本可在以下链接查看：
http://www.thebigfly.com/gnu/lgpl/lgpl-v3.php

LGPL相较于GPL只有一点不同：将LGPL软件的一部分用于自己程序中时，不强制要求发布协议和公开源代码。LGPL主要用于库，仅引用库不需要强制发布协议。但如果对库本身进行了修改，则修改后的库必须以LGPL或GPL协议发布。

对于KL-01协议发布的文件，无论怎么修改都没有限制，也不必公开源代码或以KL-01协议发布，大家可以随意使用。当然，它们同样是无保障的。

---

#### 开源的建议

在顺利完成操作系统和应用程序开发后，有三种发布方式：

1. **商业软件**：做成软件包或共享软件出售。如果顺利，可能会带来可观的收入，甚至可以维持生计或雇佣开发人员。一般来说，开发操作系统成本不高，例如“纸娃娃系统”除了生活费和电费外几乎没有其他成本。

2. **自由软件**：建立网站供人下载，或发布到软件下载门户网站。这种方式基本上赚不到钱，因为目的不是盈利。用户可以免费下载使用。

3. **开源软件**：不仅仅是公开源代码，还必须允许对源代码进行修改并作为自己的作品发布。开源软件必须认可再次发布的自由，不能限制只能从某个特定网站下载。KL-01、GPL和LGPL都是为开源软件制定的许可协议。

开源软件的好处在于，当用户提出功能请求或抱怨时，你可以让他们自己修改（笑）。此外，开源软件可能会带来意想不到的好处，比如结交朋友、获得尊敬等。当然，开源也可能导致无法转为付费模式，因为其他人可能会基于你的代码开发更好的版本并免费发布。

总之，无论是选择商业销售、自由软件还是开源软件，都有各自的优劣。请大家深思熟虑，选择最符合自己目标的方式发布软件。无论如何，笔者都会支持大家。

---

#### 后记

这本书的封面是漂亮的绿色，代表鲜嫩的叶子，象征初学者的成长。封面中间有一只双尾猫又，它是OSASK和“纸娃娃系统”的吉祥物，名字叫“卡奥斯”，昵称“小卡”。

笔者努力将这本书写成初中生也能看懂的书。书中尽量避免使用晦涩的语言，并适度解释英语单词。编写操作系统并不需要高深的知识，即使是初中生也可以毫无障碍地学习。同时，笔者也努力让大学生和成人读者不至于觉得内容幼稚。

关于价格，笔者希望这本书能让初中生也买得起，因此拜托出版社定一个较低的价格。如果这个价格仍然让你觉得贵，可以考虑去图书馆借阅。感谢出版社和相关人士的努力。

这本书的内容属于先苦后甜类型，合并成一册出版是为了方便读者。读完这本书大约需要30天，平均每天花费约为3.3元，性价比很高。虽然不如RPG好玩，但相信你会从中受益匪浅。

---

希望这些优化后的文本能够更好地传达信息，并使阅读体验更加流畅和专业。