0.35
0
0.14 0.07 0.14 0.18
0.21 -0.14
0
-0.07
0
0.04
-0.07 -0.42 -0.28 -0.35 -0.28 -0.24
-0.28 -0.63 -0.49 -0.56 -0.49 -0.45
5
4
3
2
1
0
-0.6
-0.4
-0.2
0
0.2
0.4
0
1
2
3
4
5
0
1
2
3
4
5
5
4
3
2
1
0
0.23 -0.12 0.02 -0.05 0.02 0.06
0.37 0.02 0.16 0.1 0.16 0.2
0.37 0.02 0.16 0.1 0.16 0.2
0.3 -0.05 0.1 0.02 0.1 0.13
0.3 -0.05 0.1 0.02 0.1
0.13
-0.23 -0.58 -0.44 -0.51 -0.44 -0.4
0
1
2
4
4
5
-0.4
-0.2
0
0.2
(d) RAT transition from 3G level-𝑖 to 4G level-𝑗 .
(e) RAT transition from 3G level-𝑖 to 5G level-𝑗 .
(f) RAT transition from 4G level-𝑖 to 5G level-𝑗 .
Figure 17: Increase of normalized prevalence of cellular failures for different RAT transitions (e.g., from 4G level-𝑖 to 5G level-𝑗 ).
Deeper color represents larger increase. For example, the dark cell in Figure 17f (𝑖 = 4, 𝑗 = 0) means that when a cell phone switches
from 4G level-4 signal access to 5G level-0 signal access, the normalized prevalence of cellular failures will sharply increase by 0.37,
implying that this RAT transition will signiﬁcantly increase the likelihood of cellular failures.
For mobile ISPs, we unravel in §3.3 that due to less workload
and radio resource contention from user devices, 3G BSes are less
subject to cellular failures than 2G and 4G BSes. Thereby, ISPs may
consider making better use of these relatively “idle” infrastructure
components to alleviate the burdens on busy 2G/4G BSes. Further,
our in-depth investigation into the correlation between signal level
(or RSS) and cellular failures uncovers that due to ISPs’ dense BS
deployment around public transport hubs, cellular failures can be
rather severe despite very high signal levels, for reasons of intensive
signal interferences and highly complex mobility management re-
quirements. Therefore, we advise ISPs to carefully control their BS
deployment density in such areas. Finally, we advocate the recent
campaign of cross-ISP infrastructure sharing [11], which aims to
coordinate the BS deployment among different ISPs for more efﬁ-
cient utilization of radio infrastructure resources and thus can help
mitigate cellular failures.
4.2 Real-World Practices
Apart from the above heuristic guidelines for the broad commu-
nity, by collaborating with Xiaomi, we have practically explored
optimization opportunities with respect to the aggressive 5G us-
age policy (cf. §3.2) during RAT transition and the conservative
Data_Stall recovery mechanism (cf. §3.2) in vanilla Android. Based
on critical insights obtained from our measurement study, below
we ﬁrst devise a stability-compatible RAT transition mechanism
to make cellular connections more reliable, and then leverage the
time-inhomogeneous Markov process (TIMP) model to accelerate
the Data_Stall recovery. Both efforts have been put into practice and
produced promising results.
Stability-Compatible RAT Transition. As introduced in §3.2,
we observe that Android 10 adopts a quite aggressive strategy to
prioritize the usage of 5G connections during RAT transition, which
pays little attention to the cellular network status (e.g., signal level)
and thus leads to a large number of cellular failures. In fact, as shown
in Figure 16, the normalized prevalence (or simply likelihood) of
cellular failures varies signiﬁcantly across different signal levels
under 4G/5G networks. More speciﬁcally, as depicted in Figure 17f,
four cases of RAT transitions (including 4G level-1 → 5G level-0,
4G level-2 → 5G level-0, 4G level-3 → 5G level-0, and 4G level-4
→ 5G level-0) drastically increase the likelihood of cellular failures,
and thus should be avoided if no side effect is incurred.
Here the side effect mainly lies in the potential data rate increase
if we allow such 4G→5G RAT transitions. Nonetheless, given that
in all the four cases the 5G access is coupled with level-0 signal
strength (and thus can hardly provide a high data rate), the “potential”
increase in data rate brought by these RAT transitions can scarcely
happen in principle. To check this practically, we conduct small-scale
benchmark experiments using four different 5G phones as listed in
Table 1, ﬁnding that these RAT transitions almost always (>95%)
decrease the data rate. Consequently, we conclude that in general
the four undesirable cases of RAT transitions can be safely avoided
to preserve the stability of cellular connections.
In addition, to achieve more smooth RAT transition, we inte-
grate the novel 4G/5G dual connectivity mechanism advocated by
3GPP [47] on compatible devices (including all the four 5G models
in Table 1). It allows a device to establish and maintain control-plane
cellular connections with a 4G BS and a 5G BS simultaneously,
where the master connection is also responsible for data-plane packet
transfer while the slave connection is not. Then, when a RAT transi-
tion is decided, the transition process can be effectively shortened
and thus would incur less disturbance to user experience.
Apart from the major case of 4G→5G transition, Figure 17 also
depicts the increase of normalized prevalence of cellular failures for
the other RAT transition cases. Similar as in the 4G→5G transition,
for all the RATs we can observe “undesirable” transition cases where
the prevalence of cellular failures is largely increased. A common
pattern of such cases is that failures tend to occur when there is
level-0 RSS after transition. This can be intuitively explained by
the highest prevalence of cellular failures with regard to level-0
RSS, as shown in Figure 15. Therefore, we suggest OS developers
to carefully avoid these cases so as to improve cellular reliability.
Meanwhile, avoiding these problematic cases should not negatively
impact the devices’ data rates, as the RSS is extremely weak after
transition and thus can hardly provide better cellular performance.
TIMP-based Flexible Data_Stall Recovery. Recall in §3.2 that
to address Data_Stall failures, Android has implemented a three-
stage progressive recovery mechanism that attempts to repair the
user device’s cellular connection with three operations: (1) cleaning
up current connections, (2) re-registering into the network, and (3)
restarting the device’s radio component. Before entering each stage
(including the ﬁrst stage), Android would passively monitor the exis-
tence of Data_Stall for one minute (which we call the “probation”) in
case that the previous (more lightweight) operation has already ﬁxed
the problem. Although the three recovery operations can be quite
effective when executed, as discussed in §3.2, in practice we no-
tice that the ﬁxed-time (i.e., one-minute) recovery trigger is usually
lagging and not user-friendly.
To ﬁgure out an appropriate trigger, our key insight is that the
conceptual three-stage progressive recovery in Android is essentially
a state transition process. As depicted in Figure 18, the process
includes ﬁve states: 𝑆0, 𝑆1, 𝑆2, 𝑆3, and 𝑆𝑒 = 𝑆4. Here 𝑆0 denotes
the start point (when Data_Stall is detected by Android), 𝑆1, 𝑆2, 𝑆3
respectively represent starting the execution of the aforementioned
three recovery operations, and 𝑆𝑒 marks the end of the process.
According to our measurement, the state transition from 𝑆𝑖 to the
next state is basically only dependent on 𝑆𝑖 and other stochastic
events, and thus can be modeled by a Markov process [49].
Figure 18: The time-inhomogeneous Markov process (TIMP)
that models the Data_Stall recovery process in Android, where
the transition probabilities among the ﬁve states are also im-
pacted by the elapsed time (𝑡 ).
With the above understanding, we can then formalize the expected
overall recovery time (denoted as 𝑇recovery) so as to calculate more
suitable triggers that are able to minimize 𝑇recovery. However, the
traditional Markov process can only model a stationary process
where the state transition probability is not affected by the elapsed
time 𝑡 , and thus is not applicable to our scenario where the state
transition probability also depends on 𝑡 , as indicated in Figure 10
(the user device can automatically ﬁx the problem as time goes by).
Thus, using our dataset we build a time-inhomogeneous Markov
process [49] (TIMP) to model the complex state transitions during
the Data_Stall recovery process in a time-sensitive manner, by in-
corporating recovery probabilities within different time windows.
Speciﬁcally, after entering 𝑆𝑖 , the user device either automatically
recovers from Data_Stall within the time window [𝑆𝑖, 𝑆𝑖+1] (referred
to as Case-1), or enters the next state after 𝑃𝑟𝑜𝑖 seconds (referred
to as Case-2), where 𝑃𝑟𝑜𝑖 denotes the probation time for leaving
𝑆𝑖 . For any elapsed time 𝑡 within the time window, we denote the
probability of the device’s recovering from Data_Stall as P𝑖→𝑒 (𝑡 ).
Thereby, the probability of its not recovering (thus entering 𝑆𝑖+1) is
𝑘 =0 𝑃𝑟𝑜𝑘 is the elapsed
P𝑖→𝑖+1 = 1− P𝑖→𝑒 (𝜎𝑃𝑟𝑜𝑖 ), where 𝜎𝑃𝑟𝑜𝑖 = 𝑖
time from 𝑆0 to 𝑆𝑖+1.
At this point, we can formalize the expected recovery time after
entering state 𝑆𝑖 (denoted as 𝑇𝑖 ) as the sum of three parts:
𝑇𝑖 = ∫ 𝜎𝑃𝑟𝑜𝑖
𝜎𝑃𝑟𝑜𝑖−1
P𝑖→𝑒 (𝑡 )𝑑𝑡 + P𝑖→𝑖+1 · 𝑇𝑖+1 + 𝑂𝑖 .
(1)
The ﬁrst part is the integral of P𝑖→𝑒 (𝑡 ) over the time window [𝑆𝑖, 𝑆𝑖+1],
i.e.,∫ 𝜎𝑃𝑟𝑜𝑖
𝜎𝑃𝑟𝑜𝑖−1
P𝑖→𝑒 (𝑡 )𝑑𝑡, representing that Case-1 occurs. The second
part is the probability of the device’s entering the next state (P𝑖→𝑖+1)
multiplying the expected recovery time (𝑇𝑖+1) after entering the next
state, i.e., P𝑖→𝑖+1 · 𝑇𝑖+1, representing that Case-2 occurs. Finally, the
third part is the time overhead for executing each recovery opera-
tion, denoted as 𝑂1, 𝑂2, and 𝑂3, where 𝑂1 < 𝑂2 < 𝑂3 given the
progressive nature of the three recovery operations.
In detail, we can obtain the approximate values of P𝑖→𝑒 and 𝑂𝑖
using our duration measurement data of Data_Stall failures. Spe-
cially, when 𝑖 = 0, 𝑂𝑖 = 0 since no recovery operation is executed
P3→𝑒 (𝑡 )𝑑𝑡 + 𝑂3, where 𝑡𝑚
is the maximum duration of Data_Stall failures. Thus, we know
that the expected overall recovery time 𝑇recovery = 𝑇0 is essentially
determined by the three probations 𝑃𝑟𝑜0, 𝑃𝑟𝑜1, and 𝑃𝑟𝑜2.
at this stage; when 𝑖 = 3, 𝑇3 = ∫ 𝑡𝑚
𝜎𝑃𝑟𝑜 2
S0S0S1S1S2S2S3S3SeSeP0→e(t)P1→e(t)P2→e(t)P3→e(t)P0→1P1→2P2→3Figure 19: Prevalence of cellular failures
with the RAT transition policy of vanilla
Android and our Stability-Compatible
RAT Transition.
Figure 20: Frequency of cellular failures
with the RAT transition policy of vanilla
Android and our Stability-Compatible
RAT Transition.
Figure 21: Duration of cellular failures
with the Data_Stall recovery mechanism
in vanilla Android and our TIMP-based
Flexible Recovery.
Our optimization objective is then to minimize 𝑇recovery for dif-
ferent possible values of 𝑃𝑟𝑜0, 𝑃𝑟𝑜1, and 𝑃𝑟𝑜2. To this end, we use
the annealing algorithm [42] to search for the global minimum,
thus knowing that 𝑇recovery is minimized when 𝑃𝑟𝑜0 = 21 seconds,
𝑃𝑟𝑜1 = 6 seconds, and 𝑃𝑟𝑜2 = 16 seconds. Consequently, the desired
𝑇recovery = 27.8 seconds, which is smaller than a normal user’s tol-
erance of Data_Stall duration (∼30 seconds, cf. §3.2). In contrast,
using the default probations (𝑃𝑟𝑜 ′
2 = 60 seconds) in
the original recovery mechanism of Android, the expected recov-
ery time is 38 seconds, indicating that our designed trigger clearly
outperforms the original one in Android.
0 = 𝑃𝑟𝑜 ′
1 = 𝑃𝑟𝑜 ′
4.3 Deployment and Evaluation
In order to validate the real-world effect of our design, we patched
the above two-fold mechanisms to Android-MOD and invited the
original 70M opt-in users in late Oct. 2020 to participate in our
evaluation of the optimization mechanisms (§4.2). This time, 40%
of the 70M users opted-in and upgraded to our patched system. The
evaluation has been conducted for two months (Nov.–Dec. 2020).
As shown in Figure 19 and Figure 20, thanks to our Stability-
Compatible RAT Transition mechanism, cellular failures occur 10%
less prevalently and 40.3% less frequently on the participant 5G
phones, without sacriﬁcing the data rate (as explained in §4.2). In de-
tail, for Data_Setup_Error, Data_Stall, and Out_of_Service failures,
the decrease of prevalence (frequency) is -7% (25.72%), 13.45%
(42.4%), and 5% (50.26%), respectively. Here the only exception
lies in the prevalence of Data_Setup_Error failures, which slightly
increases after our optimization is applied; however, given the oc-
currence frequency is signiﬁcantly reduced by 25.72% by our opti-
mization, we feel that the exception is most probably due to normal
statistical ﬂuctuation during the evaluation—after all, the measure-
ment study and the evaluation study are conducted in two disjoint
time periods.
Further, as shown in Figure 21, after our designed TIMP-based
Flexible Data_Stall Recovery mechanism is put into practice, 38%
reduction on the duration of Data_Stall failures is achieved on av-
erage, corresponding to 36% reduction on the total duration of all
types of failures. More notably, the median duration of all failures is
remarkably reduced by 67% (from 6 seconds to 2 seconds). Most im-
portantly, our TIMP-based recover mechanism works in a principled
and ﬂexible manner, so it will automatically adapt to the possible
pattern changes of Android system behaviors and cellular reliability
in the future.
At the same time, to evaluate the overhead of our patched Android-
MOD, we perform small-scale benchmark experiments using 34
different phones as described in Table 1. The results demonstrate
that our optimizations incur little overhead to a low-end Android
phone: <3% CPU utilization, ∼60 KB of memory usage, and <100
KB of storage space; the network usage is <100 KB per month.
Even in the worst case where the monthly number of failures reaches
24,000+ on a single phone (as shown in Figure 3), the incurred
CPU, memory, and storage overheads are still acceptable: <9% CPU
utilization, ∼3 MB of memory usage, and <20 MB of storage space;
the network usage is ∼20 MB per month.
5 RELATED WORK
With the fast and wide penetration of wireless cellular networks
across the globe, the quality of cellular service is becoming more
and more important to a person’s everyday life, an organization’s
collaborative work, and even a nation’s industrial information ecosys-
tem. In the past ten years or so, there has been a plethora of work
studying the characteristics of cellular networks, from the perspec-
tives of mobile ISPs/base stations [17, 19, 56, 57], user devices [12,
21, 26, 27, 34, 37, 39, 48], user-to-device interactions [15, 32, 51],