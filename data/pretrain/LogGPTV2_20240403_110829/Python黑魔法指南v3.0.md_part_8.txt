如果你使用 Python 2，可以这样：
>>> body="hello\\nworld"
>>>
>>> body
'hello\\nworld'
>>>
>>> body.decode('string_escape')
'hello\nworld'
>>>
如果你使用 Python 3 ，可以这样：
>>> body="hello\\nworld"
>>>
>>> body
'hello\\nworld'
>>>
>>> bytes(body, "utf-8").decode("unicode_escape")
'hello\nworld'
>>>
什么？还要区分 Python 2 和 Python 3？太麻烦了吧。
明哥教你用一种可以兼容 Python 2 和 Python 3 的写法。
首先是在 Python 2 中的输出
>>> import codecs
>>> body="hello\\nworld"
>>>
>>> codecs.decode(body, 'unicode_escape')
u'hello\nworld'
>>>
然后再看看 Python 3 中的输出
>>> import codecs
>>> body="hello\\nworld"
>>>
>>> codecs.decode(body, 'unicode_escape')
'hello\nworld'
>>>
可以看到 Pyhton 2 中的输出 有一个 u ，而 Python 3 的输出没有了 u ，但无论如何 ，他们都取
消了转义。
以上，就是我为大家整理的关于 Python 中转义的全部内容了，整理的过程，不断的发现新知识，
帮助到大家的同时，自己也对转义的一些内容有了更深的理解。
如果本文对你有些许帮助，不如给明哥 来个四连 ~ 比心
3.9 Python 装包的八种方法
1. 使用 easy_install
easy_install 这应该是最古老的包安装方式了，目前基本没有人使用了。下面是 easy_install
的一些安装示例
## PyPI
$ easy_install pkg_name
## 
$ easy_install -f http://pythonpaste.org/package_index.html
## 
$ easy_install http://example.com/path/to/MyPackage-1.2.3.tgz
##  .egg 
$ easy_install xxx.egg
2. 使用 pip install
pip 是最主流的包管理方案，使用 pip install xxx 就可以从 PYPI 上搜索并安装 xxx （如果该
包存在的话）。
下面仅列出一些常用的 pip install 的安装示例
$ pip install requests
##  pkg  /local/wheels 
$ pip install --no-index --find-links=/local/wheels pkg
##  2.1.2
$ pip install pkg==2.1.2
##  2.1.2
$ pip install pkg>=2.1.2
##  2.1.2
$ pip install pkg>> add #  add  Delay 
>>>
>>> add(3,5) #  __call__
Wait for 2 seconds...
8
>>>
>>> add.func # 
6. 第六种：能装饰类的装饰器
用 Python 写单例模式的时候，常用的有三种写法。其中一种，是用装饰器来实现的。
以下便是我自己写的装饰器版的单例写法。
instances = {}
def singleton(cls):
def get_instance(*args, **kw):
cls_name = cls.__name__
print('===== 1 ====')
if not cls_name in instances:
print('===== 2 ====')
instance = cls(*args, **kw)
instances[cls_name] = instance
return instances[cls_name]
return get_instance
@singleton
class User:
_instance = None
def __init__(self, name):
print('===== 3 ====')