### Service Traceroute: Tracing Paths of Application Flows

#### Introduction
Service traceroute differs from traditional traceroute methods in that it traces the paths taken by actual application flows, rather than using synthetic probes. Our work is based on the assumption that the paths taken by classic traceroute probes may not be the same as those taken by the packets of the target application flows. To evaluate this, we use Service traceroute to trace the paths of target application flows for two popular Internet services: Web and video. We then compare our results with those obtained using Paris traceroute [2] and 0Trace [5].

#### Experimental Setup
**Web:**
- **Target Selection:** We selected the top-1000 Alexa webpages on April 14, 2018, as the target web flows.

**Video:**
- **Target Selection:** We focused on two popular video streaming services: Twitch and YouTube.
  - **Twitch:** We selected videos from the homepage, where Twitch dynamically shows a popular live streaming video.
  - **YouTube:** We randomly selected 20 videos from the catalogue after searching with the keyword "4K UHD." We evaluated both TCP and QUIC protocols for YouTube.

**Calibration:**
- **Probing Algorithm and Parameters:** We conducted extensive experiments to calibrate Service traceroute for these applications, varying the probing algorithm and the number of probes per hop [9]. The optimal settings differ between video and web:
  - **Video:** HopByHop probing algorithm with a 2-second timeout for ICMP replies.
  - **Web:** Concurrent probing algorithm.
  - **Common Settings:** Maximum distance set to 32 hops, and 3 probes per hop.

#### Comparison with Paris Traceroute
- **Selection Rationale:** We chose Paris traceroute because its Multipath Detection Algorithm (MDA) [16] can discover all paths between the source and destination with high probability, even in the presence of load balancers. This allows us to determine if differences are due to load balancing or other factors.
- **Evaluation Versions:** We evaluated four versions of Paris traceroute with MDA enabled, using ICMP, UDP, and TCP protocols, as well as a version that traces a single path with the same 5-tuple as the target application flow.

#### Comparison with 0Trace
- **Selection Rationale:** 0Trace embeds probes within the target application flow and has a working implementation. However, it requires the flow to be probed as input, which is difficult to determine in advance.
- **Challenges:** Using Service traceroute's DNS resolution to detect the flow, we found that the download time for web pages was too short for our script to detect the target flows and run 0Trace. Therefore, we focused only on Twitch and YouTube for this comparison.

#### Experiment Execution
- **Duration and Nodes:** We ran our tests over 30 days in July 2018 from 27 PlanetLab nodes in Europe.
- **Process:**
  1. Launch Service traceroute.
  2. Stream a video or download a webpage.
  3. Run the four versions of Paris traceroute and 0Trace back-to-back.
  4. Repeat the process without Service traceroute.
- **Data Collected:** We conducted 459 video experiments (153 for Twitch and 306 for YouTube, split equally between TCP and QUIC) and 1000 web experiments. All datasets are available [1].

#### Data Representativeness
- **Webpages:** The top-1000 Alexa list often includes CDNs, ensuring coverage of major CDN providers but potentially missing smaller webpages.
- **PlanetLab Nodes:** These nodes are primarily connected via academic networks, which may not fully represent commercial ISPs. Despite these limitations, our European-scale evaluation provides useful insights into the impact of Service traceroute on popular services and the differences in discovered paths.

### Side Effects of Service Traceroute

#### Evaluation of Impact on Target Application Flows
- **Potential Issues:** Firewalls or servers might interpret duplicated packets as attacks or losses, leading to blocked flows or reduced throughput.
- **Prior Work:** While the concept of piggybacking traceroute probes within application flows has been around for a decade, there has been no prior evaluation of its potential negative effects on target application flows.

#### Metrics
- **Flow Duration:** Time between the first and last packet of a flow.
- **Throughput:** Total application bytes divided by flow duration.
- **TCP-Specific Metrics:**
  - **Number of Resets:** Number of flows closed by resets.
  - **Window Size:** Difference between the minimum and maximum TCP window size.
  - **Retransmissions:** Number of retransmissions from the server per flow.

#### Aborted Flows
- **Results:** No video sessions ended with resets, and no aborted flows were observed for webpage downloads. Preliminary experiments showed resets for three top-1000 websites, likely due to firewalls or web servers resetting flows due to duplicate packets.

#### Flow Performance
- **Results:** The cumulative distribution function of flow duration, average throughput, TCP window size, and retransmissions showed no significant differences with and without Service traceroute. We conclude that Service traceroute does not affect the performance of target application flows.

### Comparison with Traceroute Tools

#### Motivation
- **Key Idea:** Probes must be sent within the target application flow to discover its path. Previous work [8] has shown different paths depending on the traceroute method, but no study has examined how often piggybacking probes within application flows will discover different paths.

#### Metrics
- **Path Length:** Distance from the source to the last hop that replies to probes.
- **Path Edit Distance:** Minimum number of operations (insertion, deletion, substitution) needed to transform one path into another. For Paris traceroute, we select the path with the smallest edit distance.

#### Path Lengths
- **Results:** Service traceroute discovers longer paths for all three services compared to TCP and UDP. ICMP and 0Trace discover paths almost as long as those discovered by Service traceroute.

#### Path Differences
- **Results:** The path edit distance between Service traceroute and Paris traceroute MDA showed that paths matched in about 55% of webpage downloads, 50% of Twitch sessions, and almost 75% of YouTube streaming sessions. When paths differed, the edit distance was relatively high, especially for Twitch, which has longer paths (up to 30 hops), compared to YouTube (up to 20 hops).

This comprehensive evaluation highlights the effectiveness and accuracy of Service traceroute in tracing the paths of application flows and provides valuable insights into the differences with traditional traceroute methods.