with Service traceroute diﬀer from those discovered by other traceroute methods?
One assumption of our work is that paths taken by classic traceroute probes
may not follow the same paths as the packets of the target application ﬂows.
We present a preliminary evaluation to help answer these questions, where we
use Service traceroute to trace paths of target application ﬂows corresponding to
the two most popular Internet services: Web and video. We compare our results
with that of Paris traceroute [2] and 0Trace [5].
Web. We select the top-1000 Alexa webpages on April 14 2018 as target web
ﬂows.
Video. We focus on two popular video streaming services: Twitch and YouTube.
We select Twitch videos on their homepage where Twitch shows dynamically a
popular live streaming video. While for YouTube, we select 20 random videos
from the catalogue obtained after arbitrarily searching with the keyword “4K
UHD”. With YouTube, we evaluate both TCP and QUIC.
Calibration. We run extensive experiments to calibrate Service traceroute for
these two applications varying the probing algorithm and the number of probes
per hops [9]. Our results (not shown for conciseness) indicate that the best
settings to maximize the fraction of completed traceroutes while minimizing the
probing overhead is diﬀerent for video and Web. For video, we use the HopByHop
probing algorithm with a timeout of 2 seconds to wait for ICMP replies, whereas
for web we use the Concurrent probing algorithm. For both, we set the maximum
distance to 32 and the number of probes per hop to 3.
Comparison with Paris Traceroute. We select Paris traceroute because its
Multipath Detection Algorithm (MDA) [16] can discover with high probability
all paths between the source and the destination in case there is a load balancer
in the path. This allows us to disambiguate whether the diﬀerences we may
encounter between Paris traceroute and Service traceroute are because of load
balancing or some other type of diﬀerential treatment. We evaluate four versions
of Paris traceroute with MDA enabled using the three protocols ICMP, UDP,
and TCP as well as Paris traceroute to trace a single path with the same 5-tuple
as the target application ﬂow.
Service Traceroute: Tracing Paths of Application Flows
121
Comparison with 0Trace. We select 0Trace as it implements the idea of
embedding probes in a target application ﬂow and it has a working implementa-
tion.2 0Trace, however, requires as input the ﬂow to probe, which is hard to know
in advance. We used Service traceroute’s DNS resolution to detect the ﬂow to
probe and then launch 0Trace. Unfortunately, the download time for web pages
is extremely short and our script was too slow to detect the target application
ﬂows and then run 0Trace. Hence, for this comparison we focus only on Twitch
and Youtube. This experience illustrates the challenge of running 0Trace in prac-
tice and highlights the importance of integrating ﬂow identiﬁcation in Service
traceroute.
Experiment Setup. We run our tests during 30 days in July 2018 from 27
PlanetLab nodes in Europe.3 Experiments for video and Web are similar. We
ﬁrst launch Service traceroute, then we start streaming a video or downloading
a webpage, once that is done we run the four versions of Paris traceroute and
0Trace back-to-back. Then, we stream again the same video or download the
same webpage without Service traceroute. We have run a total of 459 videos,
153 for Twitch and 306 equally split between YouTube with TCP and with
QUIC, and 1000 Web experiments. All datasets collected in our experiments are
available [1].
Data Representativeness. Webpages in the Alexa top-1000 list are often
hosted on CDNs [12]. This choice guarantees that we cover the large major-
ity of locations hosting web content (i.e., all major CDN providers), but we may
fail to capture the behavior of smaller webpages. Another bias comes from our
choice of PlanetLab nodes as it is well known that they are mostly connected via
academic networks [3,14] and hence may fail to capture the behavior of commer-
cial ISPs. Even with these limitations, our European-scale evaluation is useful
to determine whether or not Service traceroute aﬀects the application ﬂows of
popular services (top-1000 Alexa as well as Twitch/Youtube). It is also useful to
shed some light on whether there are diﬀerences between paths discovered with
Service traceroute and more traditional traceroute paths. The generalization of
these results to vantage points located in other areas of the Internet and to other
services would require larger scale experiments.
4 Side Eﬀects of Service Traceroute
This section evaluates whether Service traceroute aﬀects target application ﬂows.
Firewalls or servers may mistakenly interpret too many duplicated packets within
a ﬂow as an attack or losses, which in turn may cause application ﬂows to be
2 To make 0Trace work on PlanetLab nodes, we had to replace the library to issue
probes from dnet to scapy.
3 Service traceroute failed to run on PlanetLab US nodes due to compatibility issues.
PlanetLab US nodes use an old Linux distribution (Fedora 2), which lacks many
required tools and libraries necessary to run our program.
122
I. Morandi et al.
blocked or achieve lower throughput. Although the idea of piggybacking tracer-
oute probes within application ﬂows has been around for approximately a decade,
there has been no prior evaluation of whether it can hurt target application ﬂows.
TCP sidecar evaluates the intrusiveness of their method, but only by measuring
the number of abuse reports [13].
4.1 Metrics
We select diﬀerent metrics to measure properties of target application ﬂows.
Flow duration refers to the time between the ﬁrst and the last packet of a ﬂow.
For TCP, we measure the time from the server SYN to the ﬁrst FIN or RST.
For UDP, we measure the time from the ﬁrst and the last packet coming from
the server. We compute the average throughput of a target application ﬂow as
the total application bytes divided by the ﬂow duration. In addition to these
metrics, which we can compute for both TCP and UDP ﬂows, we have three
other TCP speciﬁc metrics: the number of resets, which capture the number of
target application ﬂows closed by resets; window size is the diﬀerence between
the minimum and the maximum TCP window size of the server for an application
ﬂow; and the number of retransmissions is the number of retransmission from
the server per application ﬂow.
4.2 Aborted Flows
We ﬁrst study whether Service traceroute causes ﬂows to be aborted. We have
seen no video sessions that ended with resets in our experiments. Even though
our analysis is only from PlanetLab vantage points in Europe, we believe that
this result will hold more generally for both Twitch and Youtube as these type
of large video providers deploy multiple versions of the same software across
servers/caches [10,17]. Any diﬀerences will depend on middleboxes placed either
close to the clients or in the path towards the service. Our results for webpage
downloads are also encouraging, we see no aborted ﬂows. In some preliminary
experiments we observe resets for three of the top-1000 websites only with Service
traceroute. Our manual analysis suggests that either some ﬁrewall close to the
website or the web server itself is resetting the ﬂows due to the duplicate packets.
4.3 Flow Performance
We next evaluate whether Service traceroute aﬀects ﬂow performance. Figure 1
presents the cumulative distribution function of the ﬂow duration in seconds with
and without Service traceroute. We present eight curves: two for video sessions
over TCP both for Twitch and Youtube, two for Youtube sessions over UDP,
and two for all web page downloads. We see that the distributions with and
without Service traceroute are mostly the same. Similarly, our analysis (omitted
due to space constraints) shows that the distributions of average throughput,
TCP window size, and retransmissions are similar with and without Service
traceroute. We conclude that Service traceroute has no eﬀect on the performance
of target application ﬂows.
Service Traceroute: Tracing Paths of Application Flows
123
Fig. 1. Flow duration of target application ﬂows with and without Service traceroute
5 Comparison with Traceroute Tools
The key motivation for building Service traceroute is that we must send probes
within the target application ﬂow to discover its path. Although Luckie et al. [8]
have observed diﬀerent paths depending on the traceroute method (UDP, ICMP,
or TCP), no prior work has studied how often piggybacking traceroute probes
within application ﬂows will discover diﬀerent paths. This section compares Ser-
vice traceroute with diﬀerent traceroute probing methods using Paris traceroute,
which discover all paths between a source and destination in the presence of load
balancing, and 0Trace, which also piggybacks probes inside an application ﬂow.
5.1 Metrics
We select two metrics to compare the discovered paths. The path length captures
the distance from the source to the last hop that replies to probes. For Paris
traceroute, we take the length of the longest path in case of multiple paths. The
path edit distance captures the edit distance between the path discovered with
Service traceroute and that discovered with another traceroute (0Trace or Paris
traceroute). The edit distance is the minimum number of operations (insertion,
deletion, and substitution) needed to transform one string (in our case, one path)
into the other. In case Paris traceroute returns multiple paths, we select the one
with the smallest edit distance. This allows us to focus on the best case. We
treat empty hops (marked with a ∗) as any other character. When we observe
diﬀerences between paths, we analyze where the diﬀerences are in the path:
origin AS, middle of the path, or destination AS. We map IPs to ASes using
the RIPEstat Data API [11]. The location where the two paths diverge help us
understand the placement of middleboxes.
5.2 Path Lengths
We study the length of paths discovered with Service traceroute, Paris traceroute
MDA (TCP, ICMP, and UDP), and 0Trace. The comparison of path lengths
helps capture which versions of traceroute discover more hops. For application
124
I. Morandi et al.
diagnosis it is important that the tool reveals most (hopefully all) of the path,
so that we can identify issues in any parts of the path. Figure 2 presents the
cumulative distribution functions of path length for each service: Web, Twitch,
and Youtube (UDP and TCP). We see that for all three services, probing with
TCP and UDP discovers less hops. The Web results conﬁrm Luckie et al. [8]’s
analysis from ten years ago, which showed that UDP probes cannot reach the
top Alexa web sites as probes correspond to no active ﬂow. Service traceroute
discovers longer paths for all three services. ICMP and 0Trace discover paths
that are almost as long as those discovered by Service traceroute. The next
sections characterize the path edit distance and the location of path diﬀerences
to shed light on the causes of the diﬀerences we observe in path length.
(a) Web pages (TCP)
(b) Twitch (TCP)
(c) Youtube (UDP&TCP)
Fig. 2. Length of paths discovered with diﬀerent versions of traceroute.
5.3 Path Diﬀerences When Tracing with Diﬀerent Flow IDs
This section studies the diﬀerences in paths discovered by Service traceroute
versus by other traceroutes in the most typical case, i.e., when traceroute starts a
new ﬂow and picks the port numbers with no knowledge of the target application
ﬂow ID. We compare with Paris traceroute MDA using TCP, UDP, and ICMP.
Figure 3 presents the cumulative distribution functions of path edit distance
between Service traceroute and Paris traceroute for Web, Twitch, and Youtube
(UDP and TCP). A path edit distance of zero corresponds to the case when
the Paris traceroute output contains the path discovered by Service traceroute.
We see that even though we select the closest path in Paris traceroute’s output
to compute the edit distance, the path discovered with Service traceroute only
matches that discovered by Paris traceroute MDA in about 55% of the web-
page downloads, 50% of the Twitch sessions, and almost 75% of the Youtube
streaming sessions. When paths discovered by Service traceroute diﬀer from
paths discovered by Paris traceroute, the edit distance is relatively high as the
vast majority of paths towards these services is less than 15 hops long. In gen-
eral, Twitch has longer paths (up to 30 hops) and Youtube shorter (up to 20
hops), which explains the diﬀerences in the values of edit distance we observe.
For Twitch, UDP discovers paths that are the most similar to Service tracer-
oute’s paths, whereas for both Web and Youtube, ICMP leads to the most similar
paths.
Service Traceroute: Tracing Paths of Application Flows
125
(a) Web pages (TCP)