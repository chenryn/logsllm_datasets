### Certificate and Driver Information
- **Certificate Issuer:** Microsoft Windows Production PCA 2011
- **Certificate Thumbprint Algorithm:** SHA256 (0x0000800c)
- **Certificate Thumbprint:** a22f7e7385255df6c06954ef155b5a3f28c54eec85b6912aaaf4711f7676a073

### ELAM Driver Initialization
- **Driver Initialization Event:**
  - The following boot start driver is about to be initialized.
  - **Suspected Malicious Driver:** \SystemRoot\system32\drivers\mimidrv.sys
  - **Classification:** Marked as malicious.

- **Driver Initialization Event:**
  - **Image Name:** \SystemRoot\system32\drivers\iorate.sys
  - **Registry Path:** \Registry\Machine\System\CurrentControlSet\Services\iorate
  - **Image Hash Algorithm:** SHA256 (0x0000800c)
  - **Image Hash:** 07478daeebc544a8664adb00704d71decbc61931f9a7112f9cc527497faf6566
  - **Signer:** Microsoft Windows
  - **Certificate Issuer:** Microsoft Windows Production PCA 2011
  - **Certificate Thumbprint Algorithm:** SHA256 (0x0000800c)
  - **Certificate Thumbprint:** 3cd79dfbdc76f39ab4855ddfaeff846f240810e8ec3c037146b88cb5052efc08

### Example of ELAM Driver Output
- **Listing 11-6:** ELAM driver output showing the detection of Mimidrv
- **Context:** This example illustrates how the ELAM driver allows other boot-start drivers, such as the native Universal Naming Convention driver (mup.sys) and the Disk I/O Rate Filter driver (iorate.sys), both signed by Microsoft, to load. It detects the malicious driver (Mimidrv) using its known cryptographic hash and prevents it from loading before the operating system is fully initialized, without requiring user or EDR component interaction.

### Loading an ELAM Driver
- **Preparatory Steps:**
  - **Signing the Driver:**
    - Ensure the digital signature meets Microsoft's requirements.
    - Use `makecert.exe` to create a self-signed certificate with the required Extended Key Usages (EKUs).
    - Use `signtool.exe` to sign the compiled ELAM driver.
  - **Assigning Load Order:**
    - Specify the load order group for the driver to ensure it loads early in the boot process.

#### Signing the Driver
- **Microsoft's Requirements:**
  - Early Launch drivers must be signed with a code-signing certificate containing the EKU "1.3.6.1.4.1.311.61.4.1" and "1.3.6.1.5.5.7.3.3".
  - Use `makecert.exe` to generate the certificate:
    ```powershell
    PS > & 'C:\Program Files (x86)\Windows Kits\10\bin\10.0.19042.0\x64\makecert.exe' -a SHA256 -r -pe -ss PrivateCertStore -n "CN=DevElamCert" -sr localmachine -eku 1.3.6.1.4.1.311.61.4.1,1.3.6.1.5.5.7.3.3 C:\Users\dev\Desktop\DevElamCert.cer
    ```
  - Use `signtool.exe` to sign the driver:
    ```powershell
    PS > & 'C:\Program Files (x86)\Windows Kits\10\bin\10.0.19041.0\x64\signtool.exe' sign /fd SHA256 /a /ph /s "PrivateCertStore" /n "MyElamCert" /tr http://sha256timestamp.ws.symantec.com/sha256/timestamp .\elamdriver.sys
    ```

#### Setting the Load Order
- **Service Group Order:**
  - Retrieve the list of available load-order groups from the registry:
    ```powershell
    PS> (Get-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Control\ServiceGroupOrder).List
    ```
  - Use the `Early-Launch` load-order group for ELAM drivers.
  - Example of inspecting Defender’s WdBoot ELAM driver:
    ```powershell
    PS C:\> Get-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Services\WdBoot | select PSChildName, Group, ImagePath | fl
    ```

### Boot Process and ELAM Drivers
- **Loading Process:**
  - The Windows bootloader (`winload.efi`) searches for boot-start drivers in the `Early-Launch` group.
  - Loads core drivers like System Guard Runtime Monitor (sgrmagent.sys) and Security Events Component Minifilter (mssecflt.sys).
  - Performs integrity checks and loads the ELAM drivers.

### Evading ELAM Drivers
- **Methods:**
  - Change static indicators (e.g., hashes, signatures).
  - Use Bring Your Own Vulnerable Driver (BYOVD) approach.
  - Deploy firmware rootkits or bootkits (e.g., ESPecter).

### Measured Boot
- **Protection:**
  - Validates the integrity of the boot process from UEFI firmware through ELAM.
  - Generates cryptographic hashes and stores them in the TPM.
  - Uses TPM to generate a cryptographically signed statement (quote) for attestation.

### Reality of ELAM Vendors
- **Observation:**
  - Most ELAM vendors do not meet Microsoft’s recommendations.
  - Many use ELAM drivers primarily for creating protected processes and accessing the Microsoft-Windows-Threat-Intelligence ETW provider.

### Conclusion
- **Benefits:**
  - ELAM drivers provide insight into the boot process, allowing EDRs to detect and potentially stop attackers.
  - However, most vendors use ELAM only for auxiliary functions, such as accessing the ETW provider.

---

### Chapter 12: Microsoft-Windows-Threat-Intelligence

#### Overview
- **ETW Provider:**
  - Provides powerful detection sources on Windows.
  - Reports events previously unavailable to EDRs, such as memory allocations, driver loads, and syscall policy violations.

#### Reverse Engineering the Provider
- **Case Study:**
  - Example of EtwTi’s source: changing the protection level of a memory allocation.
  - **API Call Flow:**
    - `kernel32!VirtualProtect()` -> `ntdll!NtProtectVirtualMemory()` -> `nt!MmProtectVirtualMemory()`.
    - If the protection change succeeds, `nt!EtwTiLogProtectExecVm()` is called to log the event.

#### Checking Provider and Event Enablement
- **Function Calls:**
  - `nt!EtwProviderEnabled()` verifies if the ETW provider is enabled.
  - `nt!EtwRegister()` registers the ThreatIntProviderGuid during the boot process.
  - `nt!EtwEventEnabled()` checks if the specific event is enabled for the provider.

---

This optimized text provides a clear, coherent, and professional overview of the ELAM driver and related concepts, ensuring that the information is presented in a structured and easy-to-understand manner.