        }
    }
Tips:
可以知道这里没有过滤键值
####  0x3.2 系统外部变量获取函数
**I方法(tp框架):**
    /**
     * 获取输入参数 支持过滤和默认值
     * 使用方法:
     * 
     * I('id',0); 获取id参数 自动判断get或者post
     * I('post.name','','htmlspecialchars'); 获取$_POST['name']
     * I('get.'); 获取$_GET
     * 
     * @param string $name 变量的名称 支持指定类型
     * @param mixed $default 不存在的时候默认值
     * @param mixed $filter 参数过滤方法
     * @param mixed $datas 要获取的额外数据源
     * @return mixed
     */
简单分析下代码:
        static $_PUT = null;
        if (strpos($name, '/')) {
            // 指定修饰符
            list($name, $type) = explode('/', $name, 2);
        } elseif (C('VAR_AUTO_STRING')) {
            // 默认强制转换为字符串
            $type = 's';
        }
        if (strpos($name, '.')) {
            // 指定参数来源
            list($method, $name) = explode('.', $name, 2); //post.id -> $method=post $name=id
        } else {
            // 默认为自动判断
        ........................
                    if (is_array($filters)) {
                    foreach ($filters as $filter) {
                        $filter = trim($filter);
                        if (function_exists($filter)) {
                            $data = is_array($data) ? array_map_recursive($filter, $data) : $filter($data); // 参数过滤
                        } else {
                            $data = filter_var($data, is_int($filter) ? $filter : filter_id($filter));
                            if (false === $data) {
                                return isset($default) ? $default : null;
                            }
                        }
                    }
                }
            }
           ..................
    function array_map_recursive($filter, $data)
    {
        $result = array();
        foreach ($data as $key => $val) {
            $result[$key] = is_array($val)
                ? array_map_recursive($filter, $val)
                : call_user_func($filter, $val); //调用传递进来的函数过滤 默认是htmlspecialchars
        }
        return $result;
    }
tips:
前面已经的得知原生已经被过滤,所以这个肯定被过滤了,但是如果调用`stripslashes` 函数来获取的话,
就有可能存在注入
Ex:
`$c = I('POST.','','stripslashes');`
###  0x3.3 查看系统DB类,了解数据库底层运行方式
由:`include/apps/common/BaseController.class.php`
            //创建 ECSHOP 对象
            self::$ecs = new EcsEcshop(C('DB_NAME'), C('DB_PREFIX'));
            //初始化数据库类
            self::$db = new EcsMysql(C('DB_HOST'), C('DB_USER'), C('DB_PWD'), C('DB_NAME'));
确定了`EcsMysql`类是系统的DB类
跟进`include/base/drivers/db/EcsMysql.class.php`
这里简单分析下运行原理:
    private function _connect($is_master = true) {
              ...............................
            foreach ($db_all as $db) {
                $mysqli = @new mysqli($db['DB_HOST'], $db['DB_USER'], $db['DB_PWD'], $db['DB_NAME'], $db['DB_PORT']); //这里是生成原生的mysqli数据库对象
                if ($mysqli->connect_errno == 0) {
                    break;
                }
            }
            if ($mysqli->connect_errno) {
                $this->error('无法连接到数据库服务器', $mysqli->connect_error, $mysqli->connect_errno);
            }
            //设置编码
            $mysqli->query("SET NAMES {$db['DB_CHARSET']}"); //设置了utf-8编码
            $mysqli->query("SET sql_mode=''");
            return $mysqli;
        }
这个`_connect`方法用于连接数据库然后返回数据库类对象
        //获取从服务器连接
        private function _getReadLink() {
            if (isset($this->_readLink)) { //$this->_readLink)初始为空 
                return $this->_readLink;
            } else {
                if (!$this->_replication) { 
                    return $this->_getWriteLink();
                } else {
                    $this->_readLink = $this->_connect(false); //这里获取了对象
                    return $this->_readLink;//返回对象
                }
            }
        }
        //获取主服务器连接
        private function _getWriteLink() {
            if (isset($this->_writeLink)) {
                return $this->_writeLink;
            } else {
                $this->_writeLink = $this->_connect(true);//同理
                return $this->_writeLink; 
            }
        }
`_getReadLink()` `_getWriteLink` 我没仔细去读,涉及到多个数据库调度的问题,但是他们的功能
都是获取$this->_connect(true) 返回的数据库对象
了解了上面的方法,那么就可以分析下面封装的函数了。
这里主要看几种查询方法:
分析下query方法,其他都差不多了
      //执行sql查询   
        public function query($sql, $params = array()) {
            foreach ($params as $k => $v) {
                $sql = str_replace(':' . $k, $this->escape($v), $sql);//跟进下当前类下的escape
            } //这里做了个替换:id->id 
            $this->sql = $sql;
            if ($query = $this->_getReadLink()->query($sql)) //这里进入了底层查询
                return $query;
            else
                $this->error('MySQL Query Error', $this->_getReadLink()->error, $this->_getReadLink()->errno); //获取错误信息
        }
        public function escape($value) {
            if (isset($this->_readLink)) {
                $mysqli = $this->_readLink;
            } elseif (isset($this->_writeLink)) {
                $mysqli = $this->_writeLink;
            } else {
                $mysqli = $this->_getReadLink();
            }
            //以上都是为了生成$mysqli对象
            if (is_array($value)) { //如果是数组
                return array_map(array($this, 'escape'), $value); //对数组键值进行递归调用当前函数
            } else {
                if (get_magic_quotes_gpc()) {
                    $value = stripslashes($value); //php5.4 gpc废除
                }
                return "'" . $mysqli->real_escape_string($value) . "'";//过滤掉sql的特殊字符'"等
            }
        }
然后分析下返回的结果:
        public function fetchArray($query, $result_type = MYSQLI_ASSOC) {
            return $this->unEscape($query->fetch_array($result_type));
        }
这里调用了`unEscape`->`stripslashes`去除了转义
`public function getFields($table)`
`public function count($table, $where)`
这两个函数参数都直接拼接了sql语句
这里在分析下解析`添加数据和where`的方法
        //解析待添加或修改的数据
        public function parseData($options, $type) {
            //如果数据是字符串，直接返回
            if (is_string($options['data'])) {
                return $options['data'];
            } 
            if (is_array($options) && !empty($options)) {//对数组进行处理
                switch ($type) {
                    case 'add':
                        $data = array(); //新建一个数组
                        $data['fields'] = array_keys($options['data']);//获取键名
                        $data['values'] = $this->escape(array_values($options['data']));//获取过滤的键值
                        return " (`" . implode("`,`", $data['fields']) . "`) VALUES (" . implode(",", $data['values']) . ") "; //拼接update语句
                    case 'save':
                        $data = array();
                        foreach ($options['data'] as $key => $value) {
                            $data[] = " `$key` = " . $this->escape($value);
                        }
                        return implode(',', $data);
                    default:return false;
                }
            }
            return false;
        }
这里可以知道没有对键值进行处理,所以如果可以控制`insert` and `update` 键值就可以进行注入。
        public function parseCondition($options) {
            $condition = "";
            if (!empty($options['where'])) {
                $condition = " WHERE ";
                if (is_string($options['where'])) {
                    $condition .= $options['where']; //如果是字符串直接拼接
                } else if (is_array($options['where'])) {
                    foreach ($options['where'] as $key => $value) {
                        $condition .= " `$key` = " . $this->escape($value) . " AND ";
                    }
                    $condition = substr($condition, 0, -4);
                } else {
                    $condition = "";
                }
            }
            if (!empty($options['group']) && is_string($options['group'])) {
                $condition .= " GROUP BY " . $options['group'];
            }
            if (!empty($options['having']) && is_string($options['having'])) {
                $condition .= " HAVING " . $options['having']; //直接拼接
            }
            if (!empty($options['order']) && is_string($options['order'])) {
                $condition .= " ORDER BY " . $options['order'];//直接拼接
            }
            if (!empty($options['limit']) && (is_string($options['limit']) || is_numeric($options['limit']))) {
                $condition .= " LIMIT " . $options['limit'];
            }
            if (empty($condition))
                return "";
            return $condition;
        }
这里可以看出来 `group having order limit where` 内容如果可控,那么就会产生注入
后面单独写了model类继承数据库驱动类来简化操作,所以分析几个点来了解
首先是控制器的基类实例化了model类:
`upload/mobile/include/apps/common/controllers/Controller.class.php`
    class Controller {
        protected $model = NULL; // 数据库模型
        protected $layout = NULL; // 布局视图
        private $_data = array();
        public function __construct() {
            $this->model = model('Base')->model; //实例话model类
            $this->cloud = Cloud::getInstance();
然后跟进model的定义和声明:
`EcModel.class.php`
        public function __construct($config = array()) {
            $this->config = array_merge(C('DB'), $config); //参数配置    
            $this->options['field'] = '*'; //默认查询字段
            $this->pre = $this->config['DB_PREFIX']; //数据表前缀
            $this->connect();
        }
        /**
         * 连接数据库
         */
        public function connect() {
            $dbDriver = 'Ec' . ucfirst($this->config['DB_TYPE']);
            require_once( dirname(__FILE__) . '/drivers/db/' . $dbDriver . '.class.php' );
            $this->db = new $dbDriver($this->config); //实例化数据库驱动类      
        }
这里可以看到实例化了数据库驱动类->$this->db
`Model.class.php`
    class Model {
        public $model = NULL;
        protected $db = NULL;
        protected $pre = NULL;
        protected $table = "";
        protected $ignoreTablePrefix = false;
        public function __construct($database = 'DB', $force = false) {
            $this->model = self::connect(C($database), $force);
            $this->db = $this->model->db; //数据库驱动类的实例
            $this->pre = $this->model->pre;
        }
        static public function connect($config, $force = false) {
            static $model = NULL;
            if ($force == true || empty($model)) {
                $model = new EcModel($config);
            }
            return $model;
        }
`$model = new EcModel($config);`->`$this->model`
model的调用方式了解下就可以分析下如何进行sql操作的了:
        public function query($sql, $params = array(), $is_query = false) {
            if (empty($sql))
                return false;
            $sql = str_replace('{pre}', $this->pre, $sql); //表前缀替换
            $this->sql = $sql;
            if ($this->queryCount++ queryLog[] = $sql;
            }
            if ($this->queryTime == '') {
                if (PHP_VERSION >= '5.0.0') {
                    $this->queryTime = microtime(true);
                } else {
                    $this->queryTime = microtime();
                }
            }
            //判断当前的sql是否是查询语句
            if ($is_query || stripos(trim($sql), 'select') === 0) {
                $data = $this->_readCache();