347
Oebug applicotlon setup:LInux
WOTE: all paths wust be valid on the renote coeputer
Boplioaticn/tng/siapleCrackne
Input file
/tng/siapleCrackne
Riretery
/tnp/
Lurneters
1inus-vorkspace
Pogt
23946
Fassyord
Sare setvork settings as defuolt
Help
Fig, 5.66 Debug application setup
confirn
PLese be corefuc. the debuo poth Laoks ooot
Do vou reolbv uant IDR to occess thls poth (possiblv o renote server>?
"/tnp/sinpLeCrackne"
Ies
Fig, 5.67 Pop-up diulog
IDA provides debugging servers for all major desktop systems from Windows,
Linux, Mac to mobile Android. Users can choose the corresponding server
The 2-simpleCrackme file is an x86-64 architecture program running on Linux,
so you should choose the linux_server64 debug server. If you run the debug server in
a Linux virtual machine without parameters, the debug server will listen at 0.0.0.0:
23946.
Select Remote Linux debugger as the debugging backend in IDA, and then set the
Process options. All paths must be on the remote host, such as the /tmp directory
where the debugged executable is located. The address of the virtual machine is
linux-workspace (see Fig. 5.66). Set the parameters and click the "OK" button to
save.
All the rest is basically the same as the local debugging, IDA will load the file
with a pop-up dialog (see Fig. 5.67), wait for the user to confirm access to the remote
file. Click the “Yes" button.
---
## Page 362
348
5 Reverse Engineering
] [7] [-1]
Fig, 5.68 IDA set a breakpoint
Listenlng on0.0.0.0:23046..
[1]Acc+ptiog con
nnection fron 192.168.112.1...
Fig, 5.69 Linux run a remote debug server
The IDA has successfully set a breakpoint and is ready to debug, see Fig. 5.68.
The remote server will also display a log, see Fig. 5.69, from which you can
determine if the IDA has successfully connected to the remote host.
Note that the program nunning through remote debugging shares the same
console with the debugging server. Users can interact with the debugged program
by entering directly into the server's console.
The remote debugging server for Windows is used in a similar way, so we do not
stress its usage here again.
5.4Common Algorithm Identification
In CTF's reverse engineering challenges, certain mature algorithms appear very
frequently. If we can identify these algorithms, we can analyze them much more
efficiently. This section introduces some common algorithm identification
techniques.
5.4.1Identifyvia Special Constants
Many common algorithms, such as AES, DES, etc., use constants in their calcula-
tions, and these constants are often hard-coded into the program in order to improve
efficiency. By identifying these constants, one can make a rough and quick judgment
of the algorithm possibly used. Table 5.5 shows the constants that common algo-
rithms often use.
---
## Page 363
5.4Coe
onAlror
Identification
349
百
品
/70/3096 ee0e612c 990951b2
fe 103254
24207
2 19
qQ
05
Table 5.5 The constants that common 2
u)≤
qf.
64
106
e377
tl
C
wuuoSry
 s
---
## Page 364
350
5  Reverse Engineering
Fig, 5.70 The results of the analysis using the FindCrypt plugin
With this simple identification method, many people have developed constant
lookup plugins for various analysis tools, such as IDA's FindCrypt, PEiD’s
KANAL, etc., which are very handy when analyzing executable files. Figure 5.70
shows the results of the analysis of a program using AES (Rijndael) and MD5
algorithms using the FindCrypt plugin.
Obviously, the confrontation with this analysis method is very simple, i.e.,
deliberate modification of these constants. Therefore, constant recognition can
only be used as a means to make quick judgments. After making a judgment,
reproduction (i.e. to re-implement the algorithm using another language like C and
st uu8pnf au 1eu Ayua on paunbau s! Sugsnqap sjueup 1o (ndno st isa1
5.4.2IdentifyviaFeatured Operations
When the constants are not sufficient to identify an algorithm, we can go deeper
inside the binary file and infer whether the program uses certain algorithms by
analyzing whether the program uses certain featured operations or not. Table 5.6
gives the operations of some commonly used algorithms in CTF reverse engineering
challenges.
Featured operation identification is also a fast judgment method. It requires
dynamic debugging or algorithm reproduction before a conclusion can be made.
5.4.3Third-PartyLibraryIdentijfication
In order to improve programming efficiency, many people choose to use off-the-
shelf libraries, such as system libraries or third-party libraries, for commonly used
algorithms. For dynamically linked libraries, the symbolic information of the func-
tion names can be easily recognized. However, for statically linked third-party
libraries, it is more difficult to recognize this information. This section describes
how to identify third-party libraries in IDA.
---
## Page 365
5.4 Common Algorithm Identification
351
Table 5.6 The operatis
os of commonly algorithms
Algorithm
Featured operations (pseudo-code)
Description
RC4
i = (i + 1) % 256;
Keystream generation
j = (j + s[i]) % 256;
 （s[] + s[j]) % 256:
swap(s[i], s[i];
j = (j + s[i] + k[j]) % 256;
S-box transformations
256 cycles
swap(s[i], s[i];
Base64
> 4);
8-bit to 6-bit
b3 = (c2 & 0xF) > 6);
TEA Series
b4 = c3 &: 0x3F;
(x > 5) + ky)
(X& Y)1((~X)& Z)
F Function
Round functions
MD5
(X & Z)1( Y & (~Z))
G Function
X  Y  Z
H Functien
Y  ( X 1 (~Z))
1Function
AES
[ % (t+0][]s  [①]x
ShiftRows
4 cycles
s{i]j] = x[j]
Overall 4 cycles
4 cycles
DES
L = R
R = F(R, K) ^ L
Feistel structure
data:004**00000014
Bo sodulus defiseda
dats:004---
00000012
Illegal nodulus a
. dats:004-*00000015
Ylash to deoble eommersien failureln
I/0 buffer orerflwln
 data:004*00000024
C
Fig, 5.71 The key sring of MIRACL library
1. String Identification
Many third-party libraries come together with copyright information and other
strings used by the library (such as error messages). At static compilation time,
these strings are put into the binary file. By looking for these strings, you can quickly
determine which third-party libraries are used for further analysis. Figure 5.71 shows
an example of using string information to determine if a program uses the MIRACL
library.
2. Function Signature Identification
Sometimes it is necessary to identify a specific function after identifying the library
used by the program. In the previous chapters of this book, we have briefly described
how to use IDA's signature matching functionality to identify C library functions. In
fact, this functionality not only identifies C libraries. Each binary function can have
---
## Page 366
352
5  Reverse Engineering
seppow Xieqg aqeve po +en 
X
Fle
Optie Library name
32vel
Ait 3.204
45130sf
Drlud Visusl Conpmant Lilruy d Fathsges
516ep
BCC +4.5/v5.x Csde9uerd 16 bit
rld 5.0x JrC 4dotati40
532ep
e95bid
BCC +4. 5/vd. x C+4e9ve4 32 bit
el5e2
BCC+* [r 05/2 elslib
itox
BCC+* fer 0S/2 runtise
31el
BCC+* fr 05/2 OVL
BCC** v3.1 on,
C/TCC*/C* 6  G
BCC++ v3.1 vindvs ratint
Childr 5ratia
CC/cCTvisien
BS 2006-2007 a4 Delghi6-7 Vivual Co
Fig, 5.72 List of available library modules
its own signature. For third-party library functions that also consist of binary
machine code, IDA can also quickly match function names, parameters, and other
information with the coresponding signature library. IDA comes with signature files
for many common libraries other than the C runtime library, such as the Visual C++
MFC library.
The reader can load the function signature in the way described above, or by
selecting “Load File  FLIRT Signature file" in the IDA File menu, as shown in
Figs. 5.72 and 5.73.
If IDA doesn’t have a pre-built library function signature to recognize, you can
find the appropriate signature libraries on the Intemet at https:// github.com/
push0ebp/sig-database or https:/github.com/Maktm/FLIRTDB. Or you can make
use of the FLAIR tool provided within the IDA SDK, create your own signature
based on existing static library files like .a, .lib, etc., put it in sig folder, and then load
it in IDA. For the use of the FLAIR tool, please refer to the Internet for information.
3. Binary Similarity
Due to differences in various ways, such as compilation flags or environments,
signatures may not match the provided library exactly. However, even if the
compilation environment is different, there are similarities between compiled library
functions in binaries that use the same library. If we know that the programmer used
a certain library, and if we can get a statically compiled binary file that contains the
debug symbols and also uses the library, we can use the binary similarity approach to
identify each library function.
A popular tool for binary comparison is BinDiff (https:/www.zynamics.com/
bindiff.html), which was originally developed by Zynamics, but was acquired later
by Google and made freeware. This tool can be used either as a standalone or as a
plugin for IDA and is very powerful.
---
## Page 367
5.5 Binary Code Protection and Obfuscation
353
团
unknown_libname_53
.tex
团
std::ios_base::copyfmt(std::ios_base o"
.tex
std::locale::operator=(std::locale con
.tex
f
std::ios_base::exceptions(int)
tex
std::ios_base::iword（int)
.tex
f
std::ios_base::pword(int)
.tex
std::ios_base::inbue(std::locale const"
.tex
std::ios_base::register_callback(void *
.tex
std::ios_base::_Fnarray::_Fnarray(int,**
.tex
std::ios_base::~ios_base(void)
tex
f
std::ios_base::_Callfns(std::ios_base:*.
.tex
std::ios_base::_Findarr(int)
tex
std::ios_base::_Iosarray::_Iosarray(in"*
.tex
std::ios_base::_Addstd(void)
tex
+
std::ios_base::_Init(void)
.tex
std::ios_base::_Tidy(void)
.tex
Fig, 5.73 List of available library modules
When we have prepared the file to be reversed and our own compiled file (with
debug symbols), we can load BinDiffin IDA, and then load the IDBs of the two files
separately, and wait a moment to see the comparison results, see Fig. 5.74.
The results of the comparison will show the similarity between the two functions, 
their changes, and their respective function names, which can be double-clicked to
jump to a specific function. If you can manually determine that two functions are
indeed the same, you can rename the function using the shortcut menu. In general, if
the comparison shows that the two functions are almost unchanged (Similarity is
extremely high, Change has no or only I and they are not empty functions, there is a
high probability that they are the same function. If there are a few changes (Simi-
larity is around 0.9, 2-3 Changes), you need to look at them manually to make
judgments.
5.5 Binary Code Protection and Obfuscation
In real life, the game of attack and defense is everywhere. In order to prevent your
binary programs from being reverse engineered, many software programs use a
variety of methods to put up barriers to the program. The protection of binary code is
extremely diverse and flexible, e.g., a certain degree of obfuscation of assembly
---
## Page 368
354
5  Reverse Engineering
340
0
S1ACO
3
Fig, 5.74 The comparison results by the BinDiff
instructions can interfere with the disassembling process in static analysis; various
1 puaap aagooo o ueloud ou u pesuadsiau oq ueo sonbuqa ugnqap-ue
against dynamic analysis. Virtualization of key algorithms in the program can cause
a great deal of resistance to the reverse engineer. In this section, we will discuss
binary code protection and obfuscation, combining CTFs and common protection
methods in real production environments.
5.5.1Anti Static Analysis
After loading a binary program, tools such as IDA Pro, commonly used in reverse
engineering, or newer tools such as Ghidra, first disassemble the program:
converting the machine code into assembly instructions and performing further
analysis based on the results of the disassembly. Obviously, if the results of
disassembly are disturbed, then static analysis becomes very difficult. In addition,
the correctness of disassembly results will directly affect the correctness of
decompilation tools such as Hex-Rays Decompiler. As a result, many developers
choose to do something to the assembly instructions to prevent the decompiler from
generating pseudo-code with clear logic, thus increasing the workload of the
reverser.
The easiest way to interfere with a disassembler is to add junk instructions to the
code. Junk instructions are instructions that are completely redundant in a program
and do not affect the program’s functionality but interfere with the reverse
---
## Page 369
5.5 Binary Code Protection and Obfuscation
355
engineering process. Junk instructions do not have a fixed form. The following is an
example of some junk instructions (unless otherwise noted, the assembly code in this
section is x86 32-bit assembly). Consider the following assembly code.
pushebp
mov
sub
esp.0x100
ebp, esp
This fragment is a common function header and is often used by disassemblers to
determine the start address of a function and to calculate stack pointer. If you add
some operations that offset each other, such as:
pushebp
add esp, Oxd
pushfd
nop
#ub
esp, 0xd
popfd
moV
ebp, esp
sub
esp,0x100
, then the complexity of the code increases significantly, but the effect of the
snd se qons suononnsu uope u auuo pou saop paad uoeado ene
and popfd cause errors in some reverse tools during parsing stack pointers.
Another common method of interfering with static analysis is to insert a specific
byte among normal instructions and precede that byte with a jump statement to the
end of the byte to ensure that the effect of the actually executed instruction remains
the same. For this particular byte, it is required that it be the first byte of a longer
instruction (e.g., OxE8 is the first byte of a call instruction), and the inserted byte is
called a dirty byte. Since x86 is a variable-length instruction set, if the disassembler
does not properly parse from the beginning of each instruction, it can result in
parsing errors or even complete failure to perform subsequent analysis.
Two of the most representative disassembly algorithms, linear scan, and recursive
descent, have been introduced before. For the linear sweep disassembling tools such
as OllyDBG and WinDBG, we can simply use an unconditional jump instruction to
insert the dirty byte since they only parse down linearly one by one from the starting
address. For the preceding code fragment, we insert a jump instruction between the
first and second instructions and add a byte OxE8, as follows.
pushebp
jmpaddr1
db
0xE8
addr1 :
moV
ebp, esp