details. The Yosys-ABC toolchain works by structuring the
Boolean circuit network into a speciﬁc type of Directed
Acyclic Graph (DAG) consisting of 2-input, 1-output nodes,
and then maps this graph into δ-input LUTs by computing
δ-feasible cuts for each graph node. A cut of a node n is a
set of nodes (called leaves of the respective cut), such that
each path from the circuit primary inputs to node n passes
through at least one of these leaves. A cut is δ-feasible if the
number of leaves in it does not exceed δ. FPGA mapping either
enumerates all or some selected cuts of each node according
to the optimization metric. Then, depth-optimized mapping is
performed to select the optimal cuts, followed by area recovery
heuristics, after which the cuts are mapped to LUTs according
to their sizes. Additional details on the DAG-based delay-
optimized technology mapping using δ-feasible cuts can be
found in [RME+12], [MCCB07], [MCB07].
For the generation of our netlists, we limit the maximum
number of LUT inputs to δmax = 4 for OP-LUT and δmax = 8
for SP-LUT, since it provides a good performance trade-off as
we describe later in §VI-A. We optimize for depth, followed by
area recovery, and ensure that the circuits remain topologically
ordered.
C. Generating Multi-Output LUTs
Extending hardware synthesis tools beyond their original
purposes and tailoring their output
to serve the purposes
of secure computation requires radical engineering and cus-
tomizations. As discussed in §IV-E, our LUT protocols are
signiﬁcantly optimized by combining LUTs with overlapping
inputs and hence multiple output bits. However, ABC does
not support mapping to multi-output LUTs by default (and
neither do commercial hardware synthesis tools except for 2-
output LUTs). This remains largely an open and unsolved
research area, without efﬁcient tools. Some research efforts
such as the work in [MMRR10] propose δσ-feasible cuts
mapping to control both the number of inputs δ and the
number of outputs σ in mapping circuit cuts. However, their
implementation is not available and their approach focuses on
contributing to AIG-based mapping algorithms in general and
is not speciﬁcally focused on mapping to multi-output LUTs.
We handle this by post-processing the ABC-generated single-
output LUT circuits to map them to multi-output LUT circuits.
As already mentioned, we map circuit descriptions to variable-
input LUT-based netlists with an allowed maximum of 4 or 8
inputs per LUT using ABC. The generated circuits are then
post-processed and layered from input to output according to
the input-output dependencies. Each LUT is allocated to its
layer according to its topological depth in the circuit. LUTs
within the same circuit layer which share one or more common
inputs are grouped together into a single multi-output LUT
incrementally. Each ﬁnal multi-output LUT is deﬁned by a set
of a maximum of 4 or 8 inputs, and the number of grouped
LUTs, their truth-table values, and the subset of inputs on
which the output of the included LUT depends. In a second
optimization round, LUTs which have no shared inputs but can
be combined together while still having a union of a maximum
of 4 or 8 inputs are grouped together. It is important to only
group LUTs within the same layer to avoid grouping across
layers that may increase the circuit depth.
Furthermore, ABC maps circuit descriptions into LUTs only,
whereas our protocols allow function representations with both
LUTs and XORs. In the post-processing, we map 2-input
LUTs that represent the XOR function into explicit XOR gates.
Extracting all XORs to reduce the overall number and inputs
sizes to LUTs is an interesting direction for future research.
VI. EVALUATION
In this section we theoretically compare the performance of
our LUT-based approaches to Boolean circuits (§VI-A). Since
it is not possible to give generic statements about the efﬁciency
comparison between our LUT protocols and Boolean circuits,
we then give an empirical performance comparison on typical
basic operations (§VI-B). All protocols are evaluated for 128-
bit symmetric security, i.e., κ = 128.
A. Comparison to Boolean Circuits
In the following, we theoretically compare our LUT repre-
sentation with a 2-input Boolean circuits representation. We
ﬁrst discuss the advantages of ﬁnding an efﬁcient function
representation as interconnected LUTs compared to a Boolean
circuit. Then, we compare the communication and round
complexity of a single δ-input LUT with σ = 1 output bit
to a Boolean circuit equivalent. Finally, we discuss both rep-
resentations when realizing functionalities with σ > 1 output
bits. We stress that, even though we discuss and compare them
separately, our LUT protocols can be easily combined with
Boolean circuits using GMW at no cost, achieving the best of
both worlds.
Efﬁcient Function Representations. Finding an efﬁcient
Boolean circuit representation with low number of AND gates
and small multiplicative depth has been subject to extensive
research. E.g., [BP05] have shown a lower bound on the
number of AND gates for the Hamming weight functionality
and [ARS+15] have developed a block-cipher with a small
number of AND gates and a small AND depth. Such efﬁcient
Boolean representations, however, are non-trivial to identify
for more complex functions. Representing the function as
a LUT would reduce the complexity of ﬁnding an efﬁcient
representation to some extent, since the costs for securely
evaluating a LUT only depend on the number of inputs
and outputs and not on its internal functionality. Hence, the
optimization process can be stopped after the functionality has
been separated into connected LUTs and does not need to
identify an efﬁcient representation of the functionality as it is
the case for Boolean circuits. As an example, consider the AES
9
# Inputs δ
N-MT [bits]
OP-LUT [bits]
OP-LUT / N-MT
SP-LUT [bits]
SP-LUT / N-MT
2
138
210
0.66
196
0.70
3
276
291
0.95
232
1.19
4
414
500
0.85
256
1.62
5
552
1,277
0.43
280
1.97
7
6
690
828
4,354 ≈ 214
0.05
0.16
372
326
2.23
2.12
8
966
≈ 216
0.01
511
1.89
9
10
1,242
≈ 220
11
1,518
1,104
≈ 222
≈ 218
< 0.01 < 0.01 < 0.01
2,316
0.66
768
1.44
COMMUNICATION OF OP-LUT (§IV-B) WITH(cid:0)N
(cid:1) OT AND SP-LUT (§IV-D) COMPARED TO A BOOLEAN CIRCUIT EVALUATED WITH
1,288
0.96
N -MT FOR A δ-INPUT TO σ = 1 OUTPUT BIT FUNCTION WITH δ − 1 AND GATES AND 138 BIT COMMUNICATION PER AND GATE (§III). THE RESULTS FOR
1
TABLE V.
OP-LUT AND SP-LUT THAT ACHIEVE THE BEST PERFORMANCE COMPARED TO N -MT ARE MARKED IN BOLD.
S-box, which has 8 input bits and 8 output bits. While [BP12]
have used a special Greedy-approach to identify a small
Boolean circuit, a LUT representation could be obtained by
simply evaluating the S-box on all 28 possible inputs.
Single-Output Functionalities. The communication complex-
ity of a Boolean circuit component with δ inputs depends
on the number of AND gates in its function representation,
which we bounded by δ − 1 (cf. §II-F). The communication
complexity of a δ-input LUT, on the other hand, only depends
on δ. Building on these observations, we outline the best
achievable communication ratio for a δ-input functionality of
our OP-LUT and SP-LUT protocols to a Boolean circuit,
evaluated using N-MT, in Tab. V. We observe that the best
communication ratio for OP-LUT is factor 0.95 for δ = 3
and for SP-LUT is factor 2.2 for δ = 7. Hence, we limit the
possible LUT sizes for OP-LUT to δ ∈ [2, 4] and for SP-LUT
to δ ∈ [2, 8]. Note, however, that using LUTs with more inputs
can result in better overall performance due to improved round
complexity.
The round complexity when evaluating a Boolean circuit
using GMW depends on the AND depth, which we bounded
by log2 δ (cf. §II-F). A δ-input LUT, on the other hand, always
requires one communication round, independently of δ (plus
one global communication round for the whole circuit with
SP-LUT). Hence, for basic operations, we expect a signiﬁcant
decrease in rounds by factor log2 δ.
Multi-Output Functionalities. For functionalities with multi-
ple outputs, we assume that an optimal circuit is constructed
for each output bit separately, resulting in a Boolean circuit
with σ(δ− 1) AND gates (cf. §II-F). However, many functions
can be optimized and computed more efﬁciently. In contrast,
our LUT protocols can easily be extended to handle function-
alities with multiple outputs without requiring an additional
logic optimization step (cf. §IV-E) but at the cost of at least
σ2δ bits communication, which cannot be reduced via logic
optimization. Hence, a Boolean representation can achieve
better communication for multi-output bit functionalities where
the number of AND gates can be highly optimized (e.g., ripple-
carry addition), while our LUT representation achieves better
communication for functionalities with many AND gates per
input and output bits (e.g., the AES S-box). Nevertheless,
our LUT representation needs fewer communication rounds,
independently of the number of outputs.
B. Basic Operations
A general comparison between our LUT protocols and
2-input gate Boolean circuit-based techniques is difﬁcult to
perform, since the performance of both is very function-
dependent. To highlight the improvements, we compare the
efﬁciency of several basic operations: addition (ripple-carry
Add-RC, Brent-Kung Add-BK, and Ladner-Fischer Add-
LF) [SZ13], multiplication (ripple-carry Mul-RC and Ladner-
Fischer Mul-LF) [SZ13], equality (EQ), greater-than (sequen-
tial GT-Seq and tree-based GT-Tree) [SZ13], ﬂoating point
operations [DDK+15], and the AES S-Box [BP12]. For each
functionality, we give the total communication (setup + online)
in bytes and the online round complexity (the setup round
complexity is constant). We compare Yao’s garbled circuits
(256 bits per AND gate, cf. [ZRE15]) and the 2-MT multipli-
cation triple generation (260 bits per AND gate, cf. [ALSZ13],
decreased to 256 to match Yao’s communication), the N-MT
triple generation (138 bits per AND gate, cf. §III-E), our OP-
LUT protocol (using δ ∈ [2, 4] input LUTs, cf. §IV-C) and our
SP-LUT approach (using δ ∈ [2, 8] input LUTs, cf. §IV-D).
Note that for SP-LUT we omit the extra round that is added due
to the role-switching optimization (cf. §IV-E), since it amor-
tizes over the whole protocol execution. Also, we omit Yao’s
garbled circuits in the round complexity comparison, since it
has constant rounds for every functionality. We generate the
LUT representations of the basic operations using optimized
circuit descriptions fed into our automated toolchain (cf. §V).
We present the results for 32-bit operations in Fig. 3.
From the results we can observe that our SP-LUT protocol
nearly always has the lowest communication, achieving up to
factor 2 less communication than the N-MT generation, which
is the next best. Our OP-LUT protocol always performs worse
than the N-MT generation but most of the times achieves lower
communication than Yao’s garbled circuits and the regular 2-
MT generation. The only operations where our LUT protocols
perform worse than the Boolean circuit-based protocols are the
ripple-carry adder (Add-RC), the multiplication circuits (Mul-
RC and Mul-LF), and the sequential greater-than (GT-Seq),
where our SP-LUT approach performs similar to Yao and 2-
MT. As discussed in §VI-A, this is probably due to the low
multiplicative complexity of the ripple-carry addition as well
as the high number of outputs per LUT. Also notably, our
LUT protocols require less communication for the tree-based
greater-than (GT-Tree) than for the sequential greater-than
(GT-Seq), even though the GT-Tree circuit has around three
times more ANDs than the GT-Seq circuit. Hence, building on
certain circuit structures results in more efﬁcient LUT circuits
and there is still potential for further optimizations.
Regarding the round complexity, we emphasize that our
LUT approaches are almost always better than 2-input gate
Boolean circuits, except for the ripple-carry adder (Add-RC)
evaluated with OP-LUT. On average, OP-LUT reduces the
number of communication rounds by factor 2x while SP-LUT
even reduces them much further by factor 3-4x.
10
(a) Communication Small Operations
(b) Communication Large Operations
(c) Rounds Small Operations
(d) Rounds Large Operations
Fig. 3. Total Communication (a,b) using Yao’s garbled circuits (§II-D) and 2-MT (§II-E), our N-MT (§III), our OP-LUT (δ ≤ 4 inputs, cf.
§IV-C) and our SP-LUT (δ ≤ 8 inputs, cf. §IV-D) and round complexity in the online phase (c,d) for a Boolean circuits evaluation using GMW
(MT), OP-LUT, and SP-LUT for 32-bit operations and the 8-bit AES S-box. Yao’s round complexity is constant and therefore not included.
VII. APPLICATIONS
In this section we evaluate the concrete beneﬁts of our LUT
protocols on two practical examples: privacy-preserving AES
(§VII-A) and private set intersection (§VII-B). We compare
our OP-LUT and SP-LUT protocols to a Boolean 2-input gate
circuit, evaluated using Yao’s garbled circuits and GMW using
the 2-MT and N-MT pre-computation in a LAN and WAN
setting and summarize our results in Tab. VI.
(cid:1) OT pre-computation and SP-LUT protocols in the ABY
Benchmark environment. We implement our OP-LUT with
(cid:0)N
1
framework of [DSZ15], written in C++. We benchmark the
protocols in two settings: a LAN setting, consisting of two
Intel i7 Haswell PCs connected by a Gigabit network, and a
WAN setting, consisting of a Google n1-standard-4 instance
with 4 vCPUs and an Amazon m3Xlarge instance with 4
vCPUs which are connected by a network with 28 MBit
bandwidth and 122 ms ping latency on average. We argue
that the WAN setting presents a practical MPC setting, since
the machines are controlled by two different cloud providers
and located at two different continents in the US and Europe.
We run the experiments using 4 threads on each machine,
average the results over 10 executions, and dismiss outliers
with more than twice the runtime. For Yao’s garbled circuits,
we perform multi-threading by splitting the original circuit into
four separate parts that are evaluated in parallel. The variance
in the LAN setting was ≈ 1% and in the WAN setting ≈ 5%.
Implementation features. Our LUT protocols work in the pre-
processing model, where setup and online phase are executed
separately. Both phases can be combined in case of an ad-hoc
execution, resulting in a lower total time. To process a shared
value, our LUT protocols need to read, process, and store a ta-
ble entry, in contrast to Boolean circuit-based protocols, which
can process multiple shares at once. Thereby, the amortization
that happens when the same circuit is evaluated a large number
of times in parallel is less compared to a Boolean circuit-based
evaluation. Finally, our LUT protocols pre-compute and store
tables, which results in a larger memory footprint compared
to GMW, which only stores single bits. However, the storage
requirement is still much lower than for pre-computed Yao’s
garbled circuits and the table generation and evaluation can be
pipelined, similar to garbled circuits [HEKM11].
11
01,0002,0003,0004,0005,0006,0007,0008,000Add−RCAdd−BKAdd−LFGT−SeqGT−TreeFP−GTEQS−BoxCommunication [Bytes]Yao/2−MTN−MTOP−LUTSP−LUT050,000100,000150,000200,000250,000300,000350,000Mul−RCMul−LFFP−AddFP−MulFP−Exp2FP−Log2FP−DivFP−SqrtCommunication [Bytes]Yao/2−MTN−MTOP−LUTSP−LUT 0 5 10 15 20 25 30 35Add−RCAdd−BKAdd−LFGT−SeqGT−TreeFP−GTEQS−Box#Rounds2/N−MTOP−LUTSP−LUT 0 50 100 150 200 250 300 350Mul−RCMul−LFFP−AddFP−MulFP−Exp2FP−Log2FP−DivFP−Sqrt#Rounds2/N−MTOP−LUTSP−LUTLAN
WAN
1
1,000
1
1,000
Yao 2-MT N-MT OP-LUT SP-LUT Yao 2-MT N-MT OP-LUT SP-LUT Yao 2-MT N-MT OP-LUT SP-LUT Yao
0.007 0.003
0.688
0.396
0.004
0.003
0.005
0.008
0.127
0.003 1.395 0.822
0.006 0.137
0.009 1.561 0.850
0.055
169