# Using Content Security Policy (CSP) to Prevent XSS Attacks
## Presenter: Ken Lee
### Date: Friday, August 2, 2013

**About the Speaker:**
- **Role:** Product Security Engineer at Etsy
- **Previous Experience:** Financial software company
- **Contact:** @kennysan, [Email](mailto:ken.lee@example.com)

### Overview of CSP
- **Content Security Policy (CSP):** A browser-based defense mechanism against Cross-Site Scripting (XSS) attacks.
- **Specification:** [W3C CSP Specification](http://www.w3.org/TR/CSP/)

### How CSP Works
- **Default Behavior:** Browsers adhering to a CSP do not execute inline JavaScript on the page.
- **Additional Restrictions:** Disallows the use of `eval` and similar functions like `window.setTimeout`.

### Example CSP Header
```http
Content-Security-Policy-Report-Only: default-src *; style-src * 'unsafe-inline'; script-src 'unsafe-inline' 'unsafe-eval' *.googleapis.com *.pinterest.com *.etsystatic.com lognormal.net *.google.com *.google-analytics.com *.etsy.com *.etsysecure.com *.truste.com *.thinglink.me *.thebrighttag.com *.facebook.net *.facebook.com *.thinglink.com *.tumblr.com *.btstatic.com *.google-analytics.com *.twitter.com *.atdmt.com *.googleadservices.com *.doubleclick.net *.flickr.com *.iesnare.com *.gstatic.com nxtck.com *.akamaihd.net; report-uri /beacon/csp.php
```

### CSP Directives
- **connect-src**
- **font-src**
- **frame-src**
- **img-src**
- **media-src**
- **object-src**
- **style-src**
- **none**
- **self**
- **unsafe-inline**
- **unsafe-eval**

### Report-Only Mode
- **report-uri:** Specifies the URI to which CSP violations are POSTed.
- **Behavior:** Does not block content from loading but reports issues.

### CSP Evolution
- **Current State:** Most modern browsers are compliant with CSP 1.0.
- **Future Enhancements:** CSP 1.1 and beyond will address more complex scenarios.

### Handling Inline JavaScript
- **CSP 1.0 Recommendation:** Move inline JavaScript to external scripts.
- **Alternative:** Use `unsafe-inline` directive.
- **Async Libraries:** Challenges with libraries like Require.js.
- **Future Improvements:** CSP 1.1 aims to address these issues.

### Deploying CSP
- **Approach:** Gradually deploy CSP to specific functionality.
- **Rationale:** Minimizes disruption and allows for thorough testing.

### Monitoring and Mixed Content
- **Monitoring:** CSP endpoints can help detect mixed content issues.
- **HSTS:** Helps mitigate mixed content by enforcing HTTPS.
- **Common Issues:** Often arise from third-party resources rather than subdomains.

### Considerations
- **Unsafe Directives:** Adding `unsafe-inline` and `unsafe-eval` undermines CSP's effectiveness.
- **Header Size:** CSP headers can become large.
- **Testing:** Thoroughly test your policy before deployment.

### Implementing CSP
- **Browser Support:** Firefox 23, Chrome 25, and later versions.
- **Reporting Mode:** Append `Report-Only` to the header for monitoring without enforcement.
- **Violation Reporting:** Use `report-uri` to log violations.
- **Steps:**
  1. Add `Content-Security-Policy` header.
  2. Set `Report-Only` mode for initial testing.
  3. Fix reported violations.
  4. Enable full CSP.

### CSP Tools
- **Purpose:** Test and deploy CSP policies in a development environment.
- **Features:**
  - **Proxy:** Intercepts HTTP/HTTPS traffic, inserts CSP headers, and logs violations.
  - **Browser:** Automates browsing sections of your site with the proxy.
  - **Parser:** Generates CSP policies based on intercepted traffic.

### Demo
- **Live Demonstration:** Showcasing the capabilities of CSP Tools.

### Get CSP Tools
- **GitHub Repository:** [CSPTools](http://kennysan.github.io/CSPTools)
- **Contributions:** Submit pull requests for bug fixes.
- **Contact:** @Kennysan on Twitter
- **Acknowledgments:** Thanks to Kai Zhong for assistance with Python development.

---

This optimized version provides a clear, professional, and structured presentation of the information.