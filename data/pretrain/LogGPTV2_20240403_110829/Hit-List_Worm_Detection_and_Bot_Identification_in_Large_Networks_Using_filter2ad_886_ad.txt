# Hit-List Worm Detection and Bot Identification in Large Networks

## 6. Attacker Identification Accuracy

### Figure 6: Attacker Identification Accuracy
Figure 6 illustrates the accuracy of bot identification for different values of `hitListPerc` (25%, 50%, 75%) with a fixed set size of highest-degree vertices (`|hidegree| = 10`) and a fixed number of bots (`|bots| = 5`). Each point on the curve represents the true positive rate (TPR) and false positive rate (FPR) for a particular setting of the threshold parameter θ.

- **True Positive Rate (TPR)**: The proportion of actual bots correctly identified as such.
  \[
  \text{TPR} = \frac{\sum_{v \in \text{hidegreebots}} \text{isbot}_{\Lambda, \theta}(v)}{|\text{hidegreebots}|}
  \]

- **False Positive Rate (FPR)**: The proportion of non-bots incorrectly identified as bots.
  \[
  \text{FPR} = \frac{\sum_{v \in \text{hidegree} \setminus \text{hidegreebots}} \text{isbot}_{\Lambda, \theta}(v)}{|\text{hidegree} \setminus \text{hidegreebots}|}
  \]

As shown in Figure 6, more aggressive worms (higher `hitListPerc`) are more accurately detected. The detection accuracy is notably high for HTTP, SMTP, and FTP. Additionally, the accuracy remains robust even when increasing `|hidegree|` up to 100, indicating that precise estimation of the number of bots is not crucial for accurate detection.

### Figure 7: Comparison of Detection Methods
Figure 7 compares the accuracy of our proposed method (4) with an alternative method (5) based on vertex degree alone. The alternative method is defined as:
\[
\text{isbot}_{\Lambda, \theta}(v) = 
\begin{cases} 
1 & \text{if } \text{degree}_{\Lambda}(v) > \theta \\
0 & \text{otherwise}
\end{cases}
\]
where `degreeΛ(v)` is the degree of vertex `v` in graph `G(Λ)`.

The results in Figure 7 show that our proposed method (4) outperforms the degree-based method (5) in some cases, supporting the effectiveness of our approach.

## 7. Implementation

### Efficient Implementation Using Union-Find Algorithms
A worm detection system must be efficient to handle the high volume of network flows. Our detection approach, based on conditions (1) and (2), can be efficiently implemented using union-find algorithms [7].

**Union-Find Operations:**
- **MakeSet**: Creates a new singleton set containing its argument.
- **Find**: Locates the set containing its argument.
- **Union**: Merges two sets into one.

**Efficiency:**
- **Time Complexity**: Processing a log file `Λ` takes \( O(|\Lambda| \alpha(|V(\Lambda)|)) \) time, where \(\alpha(·)\) is the inverse Ackermann function. For practical values, \(\alpha(n) \leq 5\).
- **Space Complexity**: The algorithm requires \( O(|V(\Lambda)|) \) space, which is significantly more efficient than other methods that require \( \Omega(|E(\Lambda)|) \) space.

### Bot Identification
Once an alarm is raised, identifying the bots involves finding high-degree vertices in `V(Λ)`. The most efficient method currently known is to explicitly build the graph and count each vertex's neighbors, requiring \( O(|E(\Lambda)|) \) space and \( O(|\Lambda| \log(|E(\Lambda)|)) \) time. This additional cost is incurred only after detection and can be processed in parallel with other reactive measures.

## 8. Conclusion
In this paper, we introduced a novel network monitoring technique based on protocol graphs. We demonstrated the stability of these graphs over time and used this to develop effective tests for detecting hit-list worms. We also showed that our method can accurately identify bots, outperforming degree-based methods. The implementation of our approach is highly efficient, making it practical for large networks.

### Future Work
Future work could extend our techniques to detect worms that propagate across multiple protocols by considering multi-protocol graphs.

### Acknowledgements
We thank Dawn Song for initial discussions and the anonymous reviewers for their valuable feedback. This work was supported in part by NSF grant CNS-0433540.

### References
[References listed here as per the original text.]

---

This optimized version aims to make the text more coherent, clear, and professional, while maintaining the technical details and structure of the original content.