NTFS recovery support
Design
Metadata logging
Log file service
Log record types
Recovery
Analysis pass
Redo pass
Undo pass
NTFS bad-cluster recovery
Self-healing
Online check-disk and fast repair
Encrypted file system
Encrypting a file for the first time
The decryption process
Backing up encrypted files
Copying encrypted files
BitLocker encryption offload
Online encryption support
Direct Access (DAX) disks
DAX driver model
DAX volumes
Cached and noncached I/O in DAX volumes
Mapping of executable images
Block volumes
File system filter drivers and DAX
Flushing DAX mode I/Os
Large and huge pages support
Virtual PM disks and storages spaces support
Resilient File System (ReFS)
Minstore architecture
B+ tree physical layout
Allocators
Page table
Minstore I/O
ReFS architecture
ReFS on-disk structure
Object IDs
Security and change journal
ReFS advanced features
File’s block cloning (snapshot support) and sparse VDL
ReFS write-through
ReFS recovery support
Leak detection
Shingled magnetic recording (SMR) volumes
ReFS support for tiered volumes and SMR
Container compaction
Compression and ghosting
Storage Spaces
Spaces internal architecture
Services provided by Spaces
Conclusion
Chapter 12  Startup and shutdown
Boot process
The UEFI boot
The BIOS boot process
Secure Boot
The Windows Boot Manager
The Boot menu
Launching a boot application
Measured Boot
Trusted execution
The Windows OS Loader
Booting from iSCSI
The hypervisor loader
VSM startup policy
The Secure Launch
Initializing the kernel and executive subsystems
Kernel initialization phase 1
Smss, Csrss, and Wininit
ReadyBoot
Images that start automatically
Shutdown
Hibernation and Fast Startup
Windows Recovery Environment (WinRE)
Safe mode
Driver loading in safe mode
Safe-mode-aware user programs
Boot status file
Conclusion
Contents of Windows Internals, Seventh Edition, Part 1
Index
About the Authors
ANDREA ALLIEVI is a system-level developer and security research engineer
with more than 15 years of experience. He graduated from the University of
Milano-Bicocca in 2010 with a bachelor’s degree in computer science. For
his thesis, he developed a Master Boot Record (MBR) Bootkit entirely in 64-
bits, capable of defeating all the Windows 7 kernel-protections (PatchGuard
and Driver Signing enforcement). Andrea is also a reverse engineer who
specializes in operating systems internals, from kernel-level code all the way
to user-mode code. He is the original designer of the first UEFI Bootkit
(developed for research purposes and published in 2012), multiple
PatchGuard bypasses, and many other research papers and articles. He is the
author of multiple system tools and software used for removing malware and
advanced persistent threads. In his career, he has worked in various computer
security companies—Italian TgSoft, Saferbytes (now MalwareBytes), and
Talos group of Cisco Systems Inc. He originally joined Microsoft in 2016 as
a security research engineer in the Microsoft Threat Intelligence Center
(MSTIC) group. Since January 2018, Andrea has been a senior core OS
engineer in the Kernel Security Core team of Microsoft, where he mainly
maintains and develops new features (like Retpoline or the Speculation
Mitigations) for the NT and Secure Kernel.
Andrea continues to be active in the security research community, authoring
technical articles on new kernel features of Windows in the Microsoft
Windows Internals blog, and speaking at multiple technical conferences, such
as Recon and Microsoft BlueHat. Follow Andrea on Twitter at @aall86.
ALEX IONESCU is the vice president of endpoint engineering at CrowdStrike,
Inc., where he started as its founding chief architect. Alex is a world-class
security architect and consultant expert in low-level system software, kernel
development, security training, and reverse engineering. Over more than two
decades, his security research work has led to the repair of dozens of critical
security vulnerabilities in the Windows kernel and its related components, as
well as multiple behavioral bugs.
Previously, Alex was the lead kernel developer for ReactOS, an open-source
Windows clone written from scratch, for which he wrote most of the
Windows NT-based subsystems. During his studies in computer science,
Alex worked at Apple on the iOS kernel, boot loader, and drivers on the
original core platform team behind the iPhone, iPad, and AppleTV. Alex is
also the founder of Winsider Seminars & Solutions, Inc., a company that
specializes in low-level system software, reverse engineering, and security
training for various institutions.
Alex continues to be active in the community and has spoken at more than
two dozen events around the world. He offers Windows Internals training,
support, and resources to organizations and individuals worldwide. Follow
Alex on Twitter at @aionescu and his blogs at www.alex-ionescu.com and
www.windows-internals.com/blog.
Foreword
Having used and explored the internals of the wildly successful Windows 3.1
operating system, I immediately recognized the world-changing nature of
Windows NT 3.1 when Microsoft released it in 1993. David Cutler, the
architect and engineering leader for Windows NT, had created a version of
Windows that was secure, reliable, and scalable, but with the same user
interface and ability to run the same software as its older yet more immature
sibling. Helen Custer’s book Inside Windows NT was a fantastic guide to its
design and architecture, but I believed that there was a need for and interest
in a book that went deeper into its working details. VAX/VMS Internals and
Data Structures, the definitive guide to David Cutler’s previous creation, was
a book as close to source code as you could get with text, and I decided that I
was going to write the Windows NT version of that book.
Progress was slow. I was busy finishing my PhD and starting a career at a
small software company. To learn about Windows NT, I read documentation,
reverse-engineered its code, and wrote systems monitoring tools like Regmon
and Filemon that helped me understand the design by coding them and using
them to observe the under-the-hood views they gave me of Windows NT’s
operation. As I learned, I shared my newfound knowledge in a monthly “NT
Internals” column in Windows NT Magazine, the magazine for Windows NT
administrators. Those columns would serve as the basis for the chapter-
length versions that I’d publish in Windows Internals, the book I’d contracted
to write with IDG Press.
My book deadlines came and went because my book writing was further
slowed by my full-time job and time I spent writing Sysinternals (then
NTInternals) freeware and commercial software for Winternals Software, my
startup. Then, in 1996, I had a shock when Dave Solomon published Inside
Windows NT, 2nd Edition. I found the book both impressive and depressing.
A complete rewrite of the Helen’s book, it went deeper and broader into the
internals of Windows NT like I was planning on doing, and it incorporated
novel labs that used built-in tools and diagnostic utilities from the Windows
NT Resource Kit and Device Driver Development Kit (DDK) to demonstrate
key concepts and behaviors. He’d raised the bar so high that I knew that
writing a book that matched the quality and depth he’d achieved was even
more monumental than what I had planned.
As the saying goes, if you can’t beat them, join them. I knew Dave from
the Windows conference speaking circuit, so within a couple of weeks of the
book’s publication I sent him an email proposing that I join him to coauthor
the next edition, which would document what was then called Windows NT
5 and would eventually be renamed as Windows 2000. My contribution
would be new chapters based on my NT Internals column about topics Dave
hadn’t included, and I’d also write about new labs that used my Sysinternals
tools. To sweeten the deal, I suggested including the entire collection of
Sysinternals tools on a CD that would accompany the book—a common way
to distribute software with books and magazines.
Dave was game. First, though, he had to get approval from Microsoft. I
had caused Microsoft some public relations complications with my public
revelations that Windows NT Workstation and Windows NT Server were the
same exact code with different behaviors based on a Registry setting. And
while Dave had full Windows NT source access, I didn’t, and I wanted to
keep it that way so as not to create intellectual property issues with the
software I was writing for Sysinternals or Winternals, which relied on
undocumented APIs. The timing was fortuitous because by the time Dave
asked Microsoft, I’d been repairing my relationship with key Windows
engineers, and Microsoft tacitly approved.
Writing Inside Windows 2000 with Dave was incredibly fun. Improbably
and completely coincidentally, he lived about 20 minutes from me (I lived in
Danbury, Connecticut and he lived in Sherman, Connecticut). We’d visit
each other’s houses for marathon writing sessions where we’d explore the
internals of Windows together, laugh at geeky jokes and puns, and pose
technical questions that would pit him and me in races to find the answer
with him scouring source code while I used a disassembler, debugger, and
Sysinternals tools. (Don’t rub it in if you talk to him, but I always won.)
Thus, I became a coauthor to the definitive book describing the inner
workings of one of the most commercially successful operating systems of
all time. We brought in Alex Ionescu to contribute to the fifth edition, which
covered Windows XP and Windows Vista. Alex is among the best reverse
engineers and operating systems experts in the world, and he added both
breadth and depth to the book, matching or exceeding our high standards for
legibility and detail. The increasing scope of the book, combined with
Windows itself growing with new capabilities and subsystems, resulted in the
6th Edition exceeding the single-spine publishing limit we’d run up against
with the 5th Edition, so we split it into two volumes.
I had already moved to Azure when writing for the sixth edition got
underway, and by the time we were ready for the seventh edition, I no longer
had time to contribute to the book. Dave Solomon had retired, and the task of
updating the book became even more challenging when Windows went from
shipping every few years with a major release and version number to just
being called Windows 10 and releasing constantly with feature and
functionality upgrades. Pavel Yosifovitch stepped in to help Alex with Part 1,
but he too became busy with other projects and couldn’t contribute to Part 2.
Alex was also busy with his startup CrowdStrike, so we were unsure if there
would even be a Part 2.
Fortunately, Andrea came to the rescue. He and Alex have updated a broad
swath of the system in Part 2, including the startup and shutdown process,
Registry subsystem, and UWP. Not just content to provide a refresh, they’ve
also added three new chapters that detail Hyper-V, caching and file systems,
and diagnostics and tracing. The legacy of the Windows Internals book series
being the most technically deep and accurate word on the inner workings on
Windows, one of the most important software releases in history, is secure,
and I’m proud to have my name still listed on the byline.
A memorable moment in my career came when we asked David Cutler to
write the foreword for Inside Windows 2000. Dave Solomon and I had visited
Microsoft a few times to meet with the Windows engineers and had met
David on a few of the trips. However, we had no idea if he’d agree, so were
thrilled when he did. It’s a bit surreal to now be on the other side, in a similar
position to his when we asked David, and I’m honored to be given the
opportunity. I hope the endorsement my foreword represents gives you the
same confidence that this book is authoritative, clear, and comprehensive as
David Cutler’s did for buyers of Inside Windows 2000.
Mark Russinovich
Azure Chief Technology Officer and Technical Fellow
Microsoft
March 2021
Bellevue, Washington
Introduction
Windows Internals, Seventh Edition, Part 2 is intended for advanced
computer professionals (developers, security researchers, and system
administrators) who want to understand how the core components of the
Microsoft Windows 10 (up to and including the May 2021 Update, a.k.a.
21H1) and Windows Server (from Server 2016 up to Server 2022) operating
systems work internally, including many components that are shared with
Windows 11X and the Xbox Operating System.
With this knowledge, developers can better comprehend the rationale
behind design choices when building applications specific to the Windows
platform and make better decisions to create more powerful, scalable, and
secure software. They will also improve their skills at debugging complex
problems rooted deep in the heart of the system, all while learning about
tools they can use for their benefit.
System administrators can leverage this information as well because
understanding how the operating system works “under the hood” facilitates
an understanding of the expected performance behavior of the system. This
makes troubleshooting system problems much easier when things go wrong
and empowers the triage of critical issues from the mundane.
Finally, security researchers can figure out how software applications and
the operating system can misbehave and be misused, causing undesirable
behavior, while also understanding the mitigations and security features
offered by modern Windows systems against such scenarios. Forensic
experts can learn which data structures and mechanisms can be used to find
signs of tampering, and how Windows itself detects such behavior.
Whoever the reader might be, after reading this book, they will have a
better understanding of how Windows works and why it behaves the way it
does.
History of the book
This is the seventh edition of a book that was originally called Inside
Windows NT (Microsoft Press, 1992), written by Helen Custer (prior to the
initial release of Microsoft Windows NT 3.1). Inside Windows NT was the
first book ever published about Windows NT and provided key insights into
the architecture and design of the system. Inside Windows NT, Second
Edition (Microsoft Press, 1998) was written by David Solomon. It updated
the original book to cover Windows NT 4.0 and had a greatly increased level
of technical depth.
Inside Windows 2000, Third Edition (Microsoft Press, 2000) was authored
by David Solomon and Mark Russinovich. It added many new topics, such as
startup and shutdown, service internals, registry internals, file-system drivers,
and networking. It also covered kernel changes in Windows 2000, such as the
Windows Driver Model (WDM), Plug and Play, power management,
Windows Management Instrumentation (WMI), encryption, the job object,
and Terminal Services. Windows Internals, Fourth Edition (Microsoft Press,
2004) was the Windows XP and Windows Server 2003 update and added
more content focused on helping IT professionals make use of their
knowledge of Windows internals, such as using key tools from Windows
SysInternals and analyzing crash dumps.
Windows Internals, Fifth Edition (Microsoft Press, 2009) was the update
for Windows Vista and Windows Server 2008. It saw Mark Russinovich
move on to a full-time job at Microsoft (where he is now the Azure CTO)
and the addition of a new co-author, Alex Ionescu. New content included the
image loader, user-mode debugging facility, Advanced Local Procedure Call
(ALPC), and Hyper-V. The next release, Windows Internals, Sixth Edition
(Microsoft Press, 2012), was fully updated to address the many kernel
changes in Windows 7 and Windows Server 2008 R2, with many new hands-
on experiments to reflect changes in the tools as well.
Seventh edition changes
The sixth edition was also the first to split the book into two parts, due to the
length of the manuscript having exceeded modern printing press limits. This
also had the benefit of allowing the authors to publish parts of the book more
quickly than others (March 2012 for Part 1, and September 2012 for Part 2).
At the time, however, this split was purely based on page counts, with the
same overall chapters returning in the same order as prior editions.
After the sixth edition, Microsoft began a process of OS convergence,
which first brought together the Windows 8 and Windows Phone 8 kernels,
and eventually incorporated the modern application environment in Windows
8.1, Windows RT, and Windows Phone 8.1. The convergence story was
complete with Windows 10, which runs on desktops, laptops, cell phones,
servers, Xbox One, HoloLens, and various Internet of Things (IoT) devices.
With this grand unification completed, the time was right for a new edition of
the series, which could now finally catch up with almost half a decade of
changes.
With the seventh edition (Microsoft Press, 2017), the authors did just that,
joined for the first time by Pavel Yosifovich, who took over David
Solomon’s role as the “Microsoft insider” and overall book manager.
Working alongside Alex Ionescu, who like Mark, had moved on to his own
full-time job at CrowdStrike (where is now the VP of endpoint engineering),
Pavel made the decision to refactor the book’s chapters so that the two parts
could be more meaningfully cohesive manuscripts instead of forcing readers
to wait for Part 2 to understand concepts introduced in Part 1. This allowed
Part 1 to stand fully on its own, introducing readers to the key concepts of
Windows 10’s system architecture, process management, thread scheduling,
memory management, I/O handling, plus user, data, and platform security.
Part 1 covered aspects of Windows 10 up to and including Version 1703, the
May 2017 Update, as well as Windows Server 2016.
Changes in Part 2
With Alex Ionescu and Mark Russinovich consumed by their full-time jobs,
and Pavel moving on to other projects, Part 2 of this edition struggled for
many years to find a champion. The authors are grateful to Andrea Allievi for
having eventually stepped up to carry on the mantle and complete the series.
Working with advice and guidance from Alex, but with full access to
Microsoft source code as past coauthors had and, for the first time, being a
full-fledged developer in the Windows Core OS team, Andrea turned the
book around and brought his own vision to the series.
Realizing that chapters on topics such as networking and crash dump
analysis were beyond today’s readers’ interests, Andrea instead added
exciting new content around Hyper-V, which is now a key part of the
Windows platform strategy, both on Azure and on client systems. This
complements fully rewritten chapters on the boot process, on new storage
technologies such as ReFS and DAX, and expansive updates on both system
and management mechanisms, alongside the usual hands-on experiments,
which have been fully updated to take advantage of new debugger
technologies and tooling.
The long delay between Parts 1 and 2 made it possible to make sure the
book was fully updated to cover the latest public build of Windows 10,
Version 2103 (May 2021 Update / 21H1), including Windows Server 2019
and 2022, such that readers would not be “behind” after such a long gap long
gap. As Windows 11 builds upon the foundation of the same operating
system kernel, readers will be adequately prepared for this upcoming version
as well.
Hands-on experiments
Even without access to the Windows source code, you can glean much about
Windows internals from the kernel debugger, tools from SysInternals, and the
tools developed specifically for this book. When a tool can be used to expose
or demonstrate some aspect of the internal behavior of Windows, the steps
for trying the tool yourself are listed in special “EXPERIMENT” sections.
These appear throughout the book, and we encourage you to try them as
you’re reading. Seeing visible proof of how Windows works internally will
make much more of an impression on you than just reading about it will.
Topics not covered
Windows is a large and complex operating system. This book doesn’t cover
everything relevant to Windows internals but instead focuses on the base
system components. For example, this book doesn’t describe COM+, the
Windows distributed object-oriented programming infrastructure, or the
Microsoft .NET Framework, the foundation of managed code applications.
Because this is an “internals” book and not a user, programming, or system
administration book, it doesn’t describe how to use, program, or configure
Windows.
A warning and a caveat
Because this book describes undocumented behavior of the internal