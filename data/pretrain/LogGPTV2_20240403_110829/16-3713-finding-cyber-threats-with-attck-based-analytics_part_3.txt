Regsvcs /
Instrumentation
Regasm
Event
Subscription Regsvr32
Winlogon Helper
Rootkit
DLL
Rundll32
Scripting
Software Packing
Timestomp
Figure 3. The MITRE ATT&CK Matrix™ [16]
11
©2017 The MITRE Corporation. All rights reserved.
Approved for Public Release; Distribution Unlimited. Case Number 16-3713.
3.3 Techniques
The techniques in the ATT&CK model describe the actions adversaries take to achieve their
tactical objectives. Within each tactic category there are a finite number of actions that will
accomplish that tactic’s goal. Throughout the course of their post-compromise operations, an
adversary constantly makes decisions about which technique to use based on knowledge,
information obtained about the target environment, information needed for future actions, and
capabilities currently available. Techniques describe actions in a way that is independent of
specific adversary malware and tools. The benefit from this approach is that it covers behavior
exhibited by an adversary through remote access tools, scripts, or interaction at a command-line
interface without tying defenses to specific adversary malware and tools that are likely to change
over time.
An important distinction between a technique in ATT&CK and an IOC is that many of the
ATT&CK techniques are legitimate system functions that can be used for malicious purposes,
whereas an IOC deployed as an intrusion detection mechanism is typically an indication of an
action known to be caused by or under the influence of an adversary. For example, a scheduled
task using the Microsoft Windows schtasks.exe utility30 is a technique that can be used for
persistence or for executing a binary file remotely as part of lateral movement. The appearance
or invocation of schtasks.exe on a system is not inherently a malicious act because it is a
legitimate administrative feature of the operating system. Adversaries are aware of this and other
legitimate system functions and how to use those features to their advantage.
Individual occurrences of techniques are not performed in a vacuum, but normally follow sets of
behavior or sequences of events. In addition to the steps called out in the aforementioned
example, the adversary may have gathered credentials used to execute schtasks.exe from a
credential dumper on the local system, or he may have used a keylogger. Likewise, the remote
file executed by schtasks.exe may also have its own behavioral indicators that result after
execution, such as an unknown process using the network to call back to a C2 server or another
credential dumper. Being able to link these kinds of events together is an important part of
defense, and is a feature of the ATT&CK model.
The techniques described in the ATT&CK model should, therefore, not be viewed in isolation or
as singular APT actions but as parts of an adversary’s playbook that maps malicious behavior
that defensive systems can be built to detect. Data from each step in an adversary’s sequence of
events can be used to build a more accurate case for whether or not a set of activities constitutes
malicious or benign behavior.
30 ATT&CK: S0111 – Scheduled Tasks
12
©2017 The MITRE Corporation. All rights reserved.
Approved for Public Release; Distribution Unlimited. Case Number 16-3713.
ATT&CK does not claim to enumerate all possible techniques in a given tactic category, but it is
based on a community of knowledge about actions that adversaries have used for a particular
purpose and about how those actions relate to one another to form identifiable sequences of
behavior. To further expand on the schtasks.exe example, when using an occurrence of
schtasks.exe as an indicator of suspicious activity, the ATT&CK modeling approach emphasizes
the importance of understanding the context under which the schtasks.exe was used, along with
the resulting effects as described in the following example. This contextual way of viewing
indicators provides the best way to gather effective information about the use of adversary
techniques and how to relate them to other data points to form useful analytics.
Example ATT&CK Technique
Behavior: Remote execution via scheduled tasks using schtasks.exe.
Requirements:
1. Credentials or existing domain permissions providing SMB (Server Message Block – the
Windows file sharing mechanism) access to the remote system.
2. Ability to move a file to the remote system for execution by the scheduled task.
3. Permission to run schtasks.exe on the local system. Any user can run schtasks.exe by
default.
4. Administrative access to the remote system to schedule the task over Remote Procedure
Calls (RPCs).
Cause:
1. Invocation of schtasks.exe at a command-line interface with arguments to execute a file
on a remote system.
Effects:
1. The schtasks.exe process starts on the local system.
2. An RPC connection is established from the local system to the destination system.
3. An entry for the task is made under the remote system’s "%SystemRoot%\Tasks\"
directory.
4. The file on the remote system is executed at a specified time as a child process of
taskeng.exe.
5. Subsequent system changes are caused by execution of the binary or script. For example,
if the program is a remote access tool, the resulting process may attempt to open a
network connection.
3.4 Operational Use Cases
The ATT&CK model has shown the potential for multiple applications across the offensive and
defensive spectrums. For instance, in MITRE’s cyber game exercises (described in Section 5.1),
ATT&CK served as a model for adversary emulation. We introduced a White Team which was
used for developing threat scenarios for testing defenses. The White Team constructed scenarios
13
©2017 The MITRE Corporation. All rights reserved.
Approved for Public Release; Distribution Unlimited. Case Number 16-3713.
that emulated APT use cases (described in Section 4.4) that were based on behaviors and actions
described in the ATT&CK model to test specific sensors and analytics. The model provided a
common language among Red and Blue Team members to discuss actions within the network
environment and how these actions were detected or not detected during a simulated adversary
operation. ATT&CK’s robust threat model of post-compromise behavior also made it possible to
perform a defensive gap analysis (Section 4.2.1) and measure the effectiveness of existing and
new defensive tools and services. We assessed these tools using ATT&CK-based operational use
cases to determine how well tools detected or prevented a known set of adversary techniques that
were chosen and prioritized based on their frequency of known adversary usage.
ATT&CK-Based Analytics Development Method
MITRE used the ATT&CK-based analytics development method to create, evaluate, and revise
analytics with the intent of more accurately detecting cyber adversary behavior. Since the cyber
games began in 2012, this process has been refined using experience investigating adversary
behaviors, building sensors to acquire data, and analyzing data to detect adversary behavior. In
describing this development method, the terms White Team, Red Team, and Blue Team
performed the following roles:
• White Team – Developed threat scenarios for testing defenses. Worked across Red and Blue
Teams to address issues that arose during the cyber game and ensured the testing objectives
were met. This team interfaced with network administrators to ensure network equities were
maintained.
• Red Team – Played the adversary for this cyber game. Executed the planned scenario with a
focus on adversary behavior emulation and interfaced with White Team as needed. Any
system or network vulnerabilities that were discovered were reported to the White Team.
• Blue Team – Acted as network defenders that used analytics to detect Red Team activity.
They were also thought of as a hunting team.
The ATT&CK-based analytics development method contains seven steps that are shown in
Figure 3 and described here as they were applied to the MITRE cyber games:
1. Identify Behaviors – Identify and prioritize adversary behaviors from the threat model to
detect.
2. Acquire Data – Identify the data that is necessary to detect a desired adversary behavior.
If the capability to acquire the data does not exist, a sensor must be created to collect this
data.
3. Develop Analytics – Create analytics from collected data to detect identified behaviors. It
is also important to ensure that analytics do not have an unacceptable false positive rate
on benign environmental events.
4. Develop an Adversary Emulation Scenario – The White Team develops an adversary
emulation scenario, based on ATT&CK, that includes behaviors identified in Step 1
14
©2017 The MITRE Corporation. All rights reserved.
Approved for Public Release; Distribution Unlimited. Case Number 16-3713.
(Identify Behaviors). The scenario includes specific techniques that should be used by the
Red Team.
5. Emulate Threat – The Red Team attempts to achieve the objectives outlined by the
White Team by exercising behaviors and techniques described in the ATT&CK model.
6. Investigate Attack – The Blue Team attempts to recreate the timeline of Red Team
activity using analytics and data developed in Step 3 (Develop Analytics).
7. Evaluate Performance – White, Red, and Blue Teams review the engagement to evaluate
to what extent the Blue Team was able to use the analytics and sensor data to successfully
detect the simulated APT behaviors. After this evaluation, the cycle repeats and returns to
Step 1.
Asynchronous Blue/Red Assessments
It is important to note that the Blue and Red
Teams of the cyber game exercises were held
1. Identify
asynchronously from each other for the duration Behaviors
of MITRE’s research. This typically meant
performing Blue Team evaluations several weeks
7. Evaluate
after Red Team events. There were several Performance 2. Acquire Data
reasons for taking this approach over the more
traditional synchronous method. The first was
that the research was focused on detecting the
adversary, not remediating or attempting to 6. Investigate 3. Develop
Attack Analytics
hinder it. In fact, detecting Red Team activity
and stopping their behavior in real time would
have prevented using the engagement to
ascertain multiple ways of detecting the 4. Develop
5. Emulate Threat
Scenario
emulated threat. Secondly, asynchronous
exercises more accurately emulate the all-too-
common real-world situation of defenders not Figure 4. ATT&CK-Based Analytics Development Method
being notified of adversary activity until after the
fact. This is often the more challenging case, as defenders usually have little indication of the
time ranges on which to focus their search.
Although MITRE chose not to use a synchronous methodology, exercises held synchronously
can aid in developing and refining other necessary skills of defenders, like being able to react to
an adversary in real time. Correctly applied, these skills can potentially prevent extensive
damage to the enterprise. Synchronous engagements can also drive attackers and defenders to
push the limits of their respective talents as they try to outdo each other. Ultimately, it is up to
the organizers of the exercise to determine which method best suits their needs.
15
©2017 The MITRE Corporation. All rights reserved.
Approved for Public Release; Distribution Unlimited. Case Number 16-3713.
4.1 Step 1: Identify Behaviors
The analytic development process starts by identifying the adversary behaviors to detect. Several
factors need to be considered when deciding how to prioritize adversary behaviors:
• Which behaviors are most common?
Prioritizing TTPs that are most commonly used by adversaries of interest will have the
broadest impact on an organization’s security posture by addressing threat techniques that
are most prevalent and therefore most likely to be encountered. A robust threat
intelligence capability can inform an organization on the ATT&CK tactics and
techniques on which to focus.
• Which behaviors have the most adverse impact?
Organizations must consider which adversary TTPs have the greatest potential adverse
impact to the organization. These impacts may take the form of physical destruction, loss
of information, system compromise, or other negative consequences.
• For which behaviors is data readily available?
Behaviors for which requisite data is already available will make it easier to create related
analytics than those that require new sensors or data sources to be developed and
deployed.
• Which behaviors are most likely to indicate malicious behavior?
Behaviors that usually result only from adversaries and not from legitimate users are the
most useful to defenders because they result in few false positives.
4.2 Step 2: Acquire Data
In preparation for creating analytics, organizations must identify, collect, and store the data
needed for developing the analytics. To identify which data an analyst needs to collect to create
analytics, it is important to understand what data is already being collected by existing sensors
and logging mechanisms. In some cases, this data may fulfill the data requirements for a given
set of analytics. In many instances, however, settings or rules for existing sensors and tools may
need to be modified to begin collecting required data. In other cases, new tools or capabilities
may need to be installed to collect the required data. For a list of sensors used in the MITRE
implementation, refer to Appendix 6A.2.
After the data required to create a given set of analytics has been identified, it must be collected
and stored on the platform where the analytics will be written. The MITRE implementation
currently relies primarily on a Splunk [17]-based architecture that uses Splunk Universal
Forwarders installed on all of its endpoints to send the collected data to a Splunk Heavy
Forwarder. To facilitate analytic development on other platforms, MITRE was able to store
selected data sources in additional storage technologies by configuring its Splunk Heavy
Forwarder to send data to a Hadoop [18] cluster and to Elasticsearch [19] in addition to the
Splunk Indexers.
16
©2017 The MITRE Corporation. All rights reserved.
Approved for Public Release; Distribution Unlimited. Case Number 16-3713.
4.2.1 Endpoint Sensing
Many enterprises rely on network sensing at the perimeter due to the ease of sensor deployment
at network ingress and egress points. However, this limits visibility to only network traffic that
enters or exits the network and does not help defenders gain a view of what occurs within their
network and between their systems. Defenders under this perimeter-based sensing paradigm
typically rely on netflow, packet capture, firewalls, proxies, network-based intrusion detection
system, and other network packet analysis or blocking systems. If an adversary is able to
successfully gain access to a system within a monitored perimeter and establish a command and
control presence that circumvents network protections, a defender may be blind to the
adversary’s activity within its own network. As with the frame of reference example in Section
1.1, an adversary’s use of legitimate web services and encrypted communications that are
commonly allowed to traverse network perimeters makes it difficult for defenders to identify
malicious activity within their network.
Our research was driven by the hypothesis that endpoint sensing is necessary to reliably identify
post-compromise operations by detecting ATT&CK behaviors that cannot typically be detected
using perimeter-based methods. This is due to the higher fidelity of information that can be
gathered about adversary actions and effects on endpoint systems, inside the network perimeter.
Figure 5 shows an ATT&CK Matrix representing ATT&CK coverage with only perimeter-based
network sensors on a notional enterprise network. Red highlighted cells represent no capability
to detect a behavior, and yellow cells represent partial ability. Without sensors on endpoints
detecting network events, such as process starts and new network connections, it is difficult to
detect many of the behaviors described by the ATT&CK model at a high enough confidence
level to identify an intrusion without certain a priori knowledge of an adversary (infrastructure
and/or C2 protocols) and without certain established defender capabilities (ability to rapidly
identify malicious network traffic, decode it, and process it) to determine adversary actions.
Other approaches to intrusion detection that rely on endpoint data gathered through scanning
endpoints for IOCs or to acquire snapshots of data may also fail to detect an adversary who has
breached the network perimeter and is operating inside the network. Data being collected
intermittently could lead to missed opportunities to detect behaviors that occur between
snapshots. For example, an adversary may use techniques to reflectively31 load an unknown RAT
into a legitimate process32 (such as explorer.exe) that then proceeds to interact with the system
through a remote shell using the cmd.exe command-line interface33. The adversary’s sequence of
actions will likely occur over a short period of time and leave very little in the way of artifacts
for a network defender to discover after the fact. Snapshots collecting information such as
running processes, process trees, loaded DLLs, Autoruns locations, open network connections,
and known malware signatures within files may only see a reflectively loaded DLL running
31 Reflective DLL Injection is a method of injecting a DLL into a process without writing anything to disk. This makes detecting
this forensically more challenging.
32 ATT&CK: T1055 – Defense Evasion/DLL Injection
33 ATT&CK: T1059 – Execution/Command-Line Interface
17
©2017 The MITRE Corporation. All rights reserved.
Approved for Public Release; Distribution Unlimited. Case Number 16-3713.
within explorer.exe, if the scan is executed while the RAT is loaded. However, the snapshot will
miss the actual injecting of the RAT into explorer.exe, the cmd.exe launching, the resulting
process tree, and additional behaviors performed by the adversary through the command shell
because the data was not collected in a persistent manner.
18
©2017 The MITRE Corporation. All rights reserved.
Approved for Public Release; Distribution Unlimited. Case Number 16-3713.
Privilege Credential Lateral Command and
Persistence Defense Evasion Discovery Execution Collection Exfiltration
Escalation Access Movement Control
Account Automated Automated Commonly Used
DLL Search Order Hijacking Brute Force Windows Remote Management
Discovery Collection Exfiltration Port
Data Communication
Legitimate Credentials Application Third-party Software Clipboard Data
Credential Compressed Through
Window
Dumping Removable
Accessibility Features Binary Padding Discovery Application Command-Line Data Staged Data Encrypted
Media
Deployment
Execution Data from Local Data Transfer
AppInit DLLs Code Signing File and Software Custom
Credential through API System Size Limits