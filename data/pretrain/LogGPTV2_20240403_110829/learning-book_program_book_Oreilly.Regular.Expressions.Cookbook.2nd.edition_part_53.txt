Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
1 to 31 (day of the month):
^(3[01]∣[12][0-9][1-9]]$
386 | Chapter 6: Numbers
---
## Page 403
Regex options: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
1 to 53 (week of the year):
^(5[0-3]][1-4][0-9]∣[1-9]]$
Regex options: None
Regexflarer: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
0 to 59 (minute or second):
[1-5]?[0-9]$
Regex options: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
0 to 100 (percentage):
s([6-0][6-]00t]
Regex options: None
Regexflavers: NET, Java, JavaScript, PCRE, Perl, Python, Ruby
1 to 100:
^(100|[1-9][0-9]?)$
Regex options: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
32 to 126 (printable ASCII codes):
^(12[0-6]|1[01][0-9]][4-9][0-9]|3[2-9]]$
Regex options: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
0 to 127 (nonnegative signed byte):
^(12[0-7]|1[01][0-9]][1-9]?[0-9]]$
Regexoptions: None
Regexflavers: NET, Java, JavaScript, PCRE, Perl, Python, Ruby
128 to 127 (signed byte):
(12[0-7]|1[01][0-9]][1-9]?[0-9]|-(12[0-8]]1[01][0-9]][1-9][0-9]]]$
Regex options: None
Regexflarer: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
0 to 255 (unsigned byte):
(25[0-5]—2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]]$
Regex options: None
Regexflarer: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
1 to 366 (day of the year):
(36[0-6]|3[0-5][0-9]][12][0-9]{2}|[1-9][0-9]?]$
Regex options: None
6.7 Numbers Within a Certain Range | 387
---
## Page 404
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
1900 to 2099 (year):
${}[6-0](0z|6t)
Regex options: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
0 to 32767 (nonnegative signed word):
(3276[0-7]327[0-5][0-9]32[0-6][0-9]{2}|3[0][0-9]{3}|[12][0-9]{4}∣
[1-9][0-9]{1,3}1[0-9]]s
Regex options: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
32768 to 32767 (signed word):
(3276[0-7]|327[0-5][0-9]]32[0-6][0-9]{2}|3[01][0-9]{3}[12][0-9]{4}∣
[1-9][0-9]{1,3}][0-9]1-{3276[0-8]|327[0-5][0-9]32[0-6][0-9]{2}|
3[01][0-9]{3}[12][0-9]{4}|[1-9][0-9]{1,3}[0-9]))$
Regex options: None
Regexflarer: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
0 to 65535 (unsigned word):
^(6553[0-5]|655[0-2][0-9]65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}| 
[1-9][0-9]{1,3}1[0-9]])$
Regex options: None
Regexflarer: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Discussion
The previous recipes matched integers with any number of digits, or with a certain
number of digits. They allowed the full range of digits for all the digits in the number.
Such regular expressions are very straightforward.
Matching a number in a specific range (e.g., a number between 0 and 255) is not a
it wouldn't match a number berween O and 255. This character class, which is equiv-
simple task with regular expressions. You can’t write  might offer a *better" solution.
Some Regex Engines Are Not Eager
POSIX-compliant regex engines and DFA regex engines do not follow this rule. They
try all alternatives, and return the one that finds the longest match. All the flavors
discussed in this book, however, are NFA engines, which don’t do the extra work
required by POSIX. They will all tell you that [19] I[0-2] matches  in 12.
In practice, you’ll usually use anchors or word boundaries around your list of alterna-
tives. Then the order of alternatives doesn’t really matter. (^{[1-9]|a[o-2])$) and
^(±[0-2][19])$> both match 12 in 12 with all regex flavors in this book, as well as
POSIX °extended” regularexpressions and DFA engines. The anchors require the regex
to match either the whole string or nothing at all. DFA and NFA are defined in the
sidebar *History of the Term *Regular Expression*" on page 2 in Chapter 1.
The range 85 to 117 includes numbers of two different lengths. The range 85 to 99 has
rwo positions, and the range 100 to 117 has three positions. The positions in these
uaq 9 deu 106E
---
## Page 407
ranges are interdependent, and so we have to split them up further. For the rwo-digit
range, if the first digit is 8, the second must be between 5 and 9. If the first digit is 9,
the second digit can be any digit. For the three-digit range, the first position allows only
the digit 1. If the second position has the digit O, the third position allows any digit.
But if the second digit is 1, then the third digit must be berween O and 7. This gives us
four ranges total: 85 to 89, 90 to 99, 100 to 109, and 110 to 117. Though things are
getting long-winded, the regular expression remains as sraightforward as the previous
ones:
[4-0]|[6-0]0t1[6-0]61[6-5]8
Regex options: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Adus suossaadxa ieqnlau upm sueu suaunu Suqpieu o1 sl Ajeau auaq e s,1eq
split up the range until you have ranges with a fixed number of positions with inde-
pendent digits. This way, you’ll always get a correct regular expression that is easy to
read and maintain, even if it may get a bit long-winded.
There are some extra techniques that allow for shorter regular expressions. For exam-
ple, using the previous system, the range 0 to 65535 would require this regex:
*1[6-0][6-0][6-0][-0]91[6-0][6-0][-0]591[6-0][-0]559[5-0]55g
[1-5][0-9][0-9][0-9][0-9]][1-9][0-9][0-9][0-9]][1-9][0-9][0-9]|
[1-9][0-9]|[0-9]
Regex options: None
Regexflarer: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
This regular expression works perfectly, and you won’t be able to come up with a regex
that runs measurably faster. Any optimizations that could be made (e.g., there are
various alternatives starting with a 6) are already made by the regular expression engine
when it compiles your regular expression. There’s no need to waste your time to make
your regex more complicated in the hopes of getting it faster. But you can make your
regex shorter, to reduce the amount of typing you need to do, while still keeping it
readable.
Several of the alternatives have identical character classes next to each other. You can
eliminate the duplication by using quantifiers. Recipe 2.12 tells you all about those.
6553[0-5]|655[0-2][0-9]65[0-4][0-9]{2}|6[0-4][0-9]{3}][1-5][0-9]{4}∣
[1-9][0-9]{3}I[1-9][0-9]{2}|[1-9][0-9]|[0-9]
Regex options: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
The <[1-9][0-9]{3}[1-9][o9]{2}|[1-9][0-9] part of the regex has three very similar
altermatives, and they all have the same pair of character classes. The only difference is
the number of times the second class is repeated. We can easily combine that into
[1-9][0-9]{1,3}).
6.7 Numbers Within a Certain Range | 391
---
## Page 408
6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}][1-5][0-9]{4}|
[1-9][0-9]{1,3}1[0-9]
Regex options: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Any further tricks willhurt readability. For example, you could isolate the leading 6
from the first four alternatives:
6{?:553[0-5]|55[0-2][0-9]]5[0-4][0-9]{2]][0-4][0-9]{3}) [1-5][0-9]{4}|
[1-9][0-9]{1,3}I[0-9]
Regex options: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
But this regex is actually one character longer because we had to add a noncapturing
group to isolate the altermatives with the leading 6 from the other altermatives. You
won’t get a performance benefit with any of the regex flavors discussed in this book.
They all make this optimization intermally.
See Also
All the other recipes in this chapter show more ways of matching different kinds of
numbers with a regular expression. Recipe .8 shows how to match ranges of hexa-
decimal numbers.
Recipe 4.12 shows how to remove specific numbers from a valid range, using negative
lookahead.
Techniques used in the regular expressions in this recipe are discussed in Chapter 2.
Recipe 2.3 explains character classes. Recipe 2. 5 explains anchors. Recipe 2.8 explains
altermation. Recipe 2.9 explains grouping. Recipe 2.12 explains repetition.
6.8HexadecimalNumbersWithina Certain Range
Problem
You want to match a hexadecimal number within a certain range of numbers. You want
the regular expression to specify the range accurately, rather than just limiting the
number of digits.
Solution
1 to C (1 to 12: hour or month):
[1-9a-c]$
Regex options: Case insensitive
Regexflarer: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
1 to 18 (1 to 24: hour):
 gde 1266
---
## Page 409
^(1[0-8]][1-9a-f]])$
Regex options: Case insensitive
Regexflaver: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
1 to 1F (1 to 31: day of the month):
(1[0-9a-f]|[1-9a-f])$
Regex options: Case insensitive
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
1 to 35 (1 to 53: week of the year):
^(3[0-5][12][0-9a-f]∣[1-9a-f]$
Regex options: Case insensitive
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
0 to 3B (0 to 59: minute or second) :
^(3[0-9a-b]][12]?[0-9a-f]]$
Regex options: Case insensitive
Regexflarer: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
0 to 64 (0 to 100: percentage):
^(6[0-4]][1-5]?[0-9a-f]]$
Regex options: Case insensitive
Regexflaver: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
1 to 64 (1 to 100):
(6[0-4]][1-5][0-9a-f]∣[1-ga-f]]$
Regex options: Case insensitive
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
20 to 7E (32 to 126: printable ASCII codes):
^(7[0-9a-e]—[2-6][0-9a-f]]$
Regex options: Case insensitive
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
0 to 7F (0 to 127: 7-bit number): 
[1-7]?[0-9a-f]$
Regexoptions: Case insensitive
Regexflavers: NET, Java, JavaScript, PCRE, Perl, Python, Ruby
0 to FF (0 to 255: 8-bit number):
[1-9a-f]?[0-9a-f]$
Regexoptions: Case insensitive
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
1 to 16E (1 to 366: day of the year):
^(16[0-ga-e]|1[0-5][0-ga-f]|[1-9a-f][0-ga-f]]$
6.8 Hexadecimal Numbers Within a Certain Range I 393
---
## Page 410
Regex options: Case insensitive
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
76C to 833 (1900 to 2099: year):
^{83[0-3]—8[0-2][0-9a-f]7[7-9a-f][0-9a-f]]76[c-f]]$
Regex options: Case insensitive
Regexflarer: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
0 to 7FFF: (0 to 32767: 15-bit number):
^([1-7][0-9a-f]{3}|[1-9a-f][0-9a-f]{1,2}l[0-9a-f])$
Regexoptions: Case insensitive
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
0 to FFFF: (0 to 65535: 16-bit number):
([1-9a-f][0-9a-f]{1,3}[0-ga-f]]$
Regex options: Case insensitive
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Discussion
There’s no difference between matching decimal numeric ranges and hexadecimal nu-
aueu au ands ~suedxa adioau snotaaud aui sy uoisssudxs reqnau e qm soueu suau
into multiple ranges, until each range has a fixed number of positions with independent
hexadecimal digits. Then it’s just a matter of using a character class for each position,