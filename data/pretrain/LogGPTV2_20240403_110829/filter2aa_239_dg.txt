Parallel类是对线程的一个很好的抽象。该类位于System.Threading.Tasks名称空间中，
提供了数据和任务并行性。
Parallel类定义了并行的for和foreach的静态方法。对于C#的for和foreach语句而言，循
环从一个线程中运行。Parallel类使用多个任务，因此使用多个线程来完成这个作业。
Parallel.For（）和Parallel.ForEach（）方法在每次迭代中调用相同的代码，而
Parallel.Invoke（）方法允许同时调用不同的方法。Parallel.Invoke用于任务并行性，而
Parallel.ForEach用于数据并行性。
21.2.1 使用Parallel.For（）方法循环
Parallel.For（）方法类似于C#的for循环语句，也是多次执行一个任务。使用
Parallel.For（）方法，可以并行运行迭代。迭代的顺序没有定义。
ParallelSamples的示例代码使用了如下依赖项和名称空间：
依赖项：
    NETStandard.Library
    System.Threading.Tasks.Parallel
    System.Threading.Thread
名称空间：
    System.Threading
    System.Threading.Tasks
    static System.Console
  注意： 这个示例使用命令行参数。为了了解不同的特性，应在启动示例应用
程序时传递不同的参数，如下所示，或检查Main（）方法。在Visual Studio中，可以在
项目属性的Debug选项中传递命令行参数。使用dotnet命令行，传递命令行参数-pf，则
可以启动命令dotnet run -- - pf。
有关线程和任务的信息，下面的Log方法把线程和任务标识符写到控制台（代码文件
ParallelSamples / Program.cs）：
    public static void Log(string prefix)
    {
      WriteLine($"{prefix}, task: {Task.CurrentId}, " +
        $"thread: {Thread.CurrentThread.ManagedThreadId}");
    }
下面看看在Parallel.For（）方法中，前两个参数定义了循环的开头和结束。示例从0
迭代到9。第3个参数是一个Action委托。整数参数是循环的迭代次数，该参数被传递
给委托引用的方法。Parallel.For（）方法的返回类型是ParallelLoopResult结构，它提供了
循环是否结束的信息。
    public static void ParallelFor()
    {
      ParallelLoopResult result =
        Parallel.For(0, 10, i =>
        {
        Log($"S {i}");
        Task.Delay(10).Wait();
        Log($"E {i}");
        });
      WriteLine($"Is completed: {result.IsCompleted}");
    }
在Parallel.For（）的方法体中，把索引、任务标识符和线程标识符写入控制台中。从
输出可以看出，顺序是不能保证的。如果再次运行这个程序，可以看到不同的结果。程序
这次的运行顺序是0-4-6-2-8…，有9个任务和6个线程。任务不一定映射到一个线程上。线
程也可以被不同的任务重用。
    S 0, task: 5, thread: 1
    S 4, task: 7, thread: 6
    S 6, task: 8, thread: 7
    S 2, task: 6, thread: 5
    S 8, task: 9, thread: 8
    E 8, task: 9, thread: 8
    S 9, task: 14, thread: 8
    E 4, task: 7, thread: 6
    S 5, task: 17, thread: 6
    E 6, task: 8, thread: 7
    S 7, task: 18, thread: 7
    E 0, task: 5, thread: 1
    S 3, task: 5, thread: 1
    E 2, task: 6, thread: 5
    S 1, task: 16, thread: 10
    E 7, task: 18, thread: 7
    E 5, task: 17, thread: 6
    E 9, task: 14, thread: 8
    E 1, task: 16, thread: 10
    E 3, task: 5, thread: 1
    Is completed: True
并行体内的延迟等待10毫秒，会有更好的机会来创建新线程。如果删除这行代码，就
会使用更少的线程和任务。
在结果中还可以看到，循环的每个end-log使用与start-log相同的线程和任务。使用
Task.Delay（）和Wait（）方法会阻塞当前线程，直到延迟结束。
修改前面的示例，现在使用await关键字和Task.Delay（）方法：
    public static void ParallelForWithAsync()
    {
        ParallelLoopResult result =
            Parallel.For(0, 10, async
 i =>
            {
              Log($"S {i}");
              await Task.Delay(10);
              Log($"E {i}");
            });
        WriteLine($"is completed: {result.IsCompleted}");
    }
其结果如以下代码片段所示。在输出中可以看到，调用Thread.Delay（）方法后，线
程发生了变化。例如，循环迭代8在延迟前的线程ID为7，在延迟后的线程ID为5。在输出
中还可以看到，任务不再存在，只有线程留下了，而且这里重用了前面的线程。另外一个
重要的方面是，Parallel类的For（）方法并没有等待延迟，而是直接完成。Parallel类只等
待它创建的任务，而不等待其他后台活动。在延迟后，也有可能完全看不到方法的输出，
出现这种情况的原因是主线程（是一个前台线程）结束，所有的后台线程被终止。本章后
面将讨论前台线程和后台线程。
    S 0, task: 5, thread: 1
    S 8, task: 8, thread: 7
    S 6, task: 7, thread: 8
    S 4, task: 9, thread: 6
    S 2, task: 6, thread: 5
    S 7, task: 7, thread: 8
    S 1, task: 5, thread: 1
    S 5, task: 9, thread: 6
    S 9, task: 8, thread: 7
    S 3, task: 6, thread: 5
    Is completed: True
    E 2, task: , thread: 8
    E 0, task: , thread: 8
    E 8, task: , thread: 5
    E 6, task: , thread: 7
    E 4, task: , thread: 6
    E 5, task: , thread: 7
    E 7, task: , thread: 7
    E 1, task: , thread: 6
    E 3, task: , thread: 5
    E 9, task: , thread: 8
  注意： 从这里可以看到，虽然使用.NET 4.5和C# 5.0的异步功能十分方便，
但是知道后台发生了什么仍然很重要，而且必须留意一些问题。
21.2.2 提前停止Parallel.For
也可以提前中断Parallel.For（）方法，而不是完成所有迭代。For（）方法的一个重
载版本接受Action类型的第3个参数。使用这些参数定义一个方
法，就可以调用ParallelLoopState的Break（）或Stop（）方法，以影响循环的结果。
注意，迭代的顺序没有定义（代码文件ParallelSamples/Program.cs）。
    public static void StopParallelForEarly()
    {
      ParallelLoopResult result =
        Parallel.For(10, 40, (int i, ParallelLoopState pls)
 =>
        {
        Log($"S {i}");
        if (i > 12)
        {
          pls.Break();
          Log($"break now... {i}");
        }
        Task.Delay(10).Wait();
        Log($"E {i}");
        });
      WriteLine($"Is completed: {result.IsCompleted}");
      WriteLine($"lowest break iteration: {result.LowestBreakIteration}");
    }
应用程序的这次运行说明，迭代在值大于12时中断，但其他任务可以同时运行，有其
他值的任务也可以运行。在中断前开始的所有任务都可以继续运行，直到结束。利用
LowestBreakIteration属性，可以忽略其他你不需要的任务的结果。
    S 31, task: 6, thread: 8
    S 17, task: 7, thread: 5
    S 10, task: 5, thread: 1
    S 24, task: 8, thread: 6
    break now 24, task: 8, thread: 6
    S 38, task: 9, thread: 7
    break now 38, task: 9, thread: 7
    break now 31, task: 6, thread: 8
    break now 17, task: 7, thread: 5
    E 17, task: 7, thread: 5
    E 10, task: 5, thread: 1
    S 11, task: 5, thread: 1
    E 38, task: 9, thread: 7
    E 24, task: 8, thread: 6
    E 31, task: 6, thread: 8
    E 11, task: 5, thread: 1
    S 12, task: 5, thread: 1
    E 12, task: 5, thread: 1
    S 13, task: 5, thread: 1
    break now 13, task: 5, thread: 1
    E 13, task: 5, thread: 1
    Is completed: False
    lowest break iteration: 13
21.2.3 Parallel.For（）的初始化
Parallel.For（）方法使用几个线程来执行循环。如果需要对每个线程进行初始化，就
可以使用Parallel.For（）方法。除了from和to对应的值之外，For（）方法的泛型
版本还接受3个委托参数。第一个参数的类型是Func，因为这里的例子对于
TLocal使用字符串，所以该方法需要定义为Func，即返回string的方法。这个方法
仅对用于执行迭代的每个线程调用一次。
第二个委托参数为循环体定义了委托。在示例中，该参数的类型是Func。其中第一个参数是循环迭代，第二个参数
ParallelLoopState允许停止循环，如前所述。循环体方法通过第3个参数接收从init方法返回
的值，循环体方法还需要返回一个值，其类型是用泛型For参数定义的。
For（）方法的最后一个参数指定一个委托Action；在该示例中，接收一个
字符串。这个方法仅对于每个线程调用一次，这是一个线程退出方法（代码文件
ParallelSamples/Program.cs）。
    public static void ParallelForWithInit()
    {
      Parallel.For(0, 10, () =>
      {
        // invoked once for each thread
        Log($"init thread");
        return $"t{Thread.CurrentThread.ManagedThreadId}";
      },
      (i, pls, str1) =>
      {
        // invoked for each member
        Log($"body i {i} str1 {str1}");
        Task.Delay(10).Wait();
        return $"i {i}";
      },
      (str1) =>
      {
        // final action on each thread
        Log($"finally {str1}");
      });
    }
运行一次这个程序的结果如下：
    init thread task: 7, thread: 6
    init thread task: 6, thread: 5
    body i: 4 str1: t6 task: 7, thread: 6
    body i: 2 str1: t5 task: 6, thread: 5
    init thread task: 5, thread: 1
    body i: 0 str1: t1 task: 5, thread: 1
    init thread task: 9, thread: 8
    body i: 8 str1: t8 task: 9, thread: 8
    init thread task: 8, thread: 7
    body i: 6 str1: t7 task: 8, thread: 7
    body i: 1 str1: i 0 task: 5, thread: 1
    finally i 2 task: 6, thread: 5
    init thread task: 16, thread: 5
    finally i 8 task: 9, thread: 8
    init thread task: 17, thread: 8
    body i: 9 str1: t8 task: 17, thread: 8
    finally i 6 task: 8, thread: 7
    init thread task: 18, thread: 7
    body i: 7 str1: t7 task: 18, thread: 7
    finally i 4 task: 7, thread: 6
    init thread task: 15, thread: 10
    body i: 3 str1: t10 task: 15, thread: 10
    body i: 5 str1: t5 task: 16, thread: 5
    finally i 1 task: 5, thread: 1
    finally i 5 task: 16, thread: 5
    finally i 3 task: 15, thread: 10
    finally i 7 task: 18, thread: 7
    finally i 9 task: 17, thread: 8
输出显示，为每个线程只调用一次init（）方法；循环体从初始化中接收第一个字符
串，并用相同的线程将这个字符串传递到下一个迭代体。最后，为每个线程调用一次最后
一个动作，从每个体中接收最后的结果。
通过这个功能，这个方法完美地累加了大量数据集合的结果。
21.2.4 使用Parallel.ForEach（）方法循环
Parallel.ForEach（）方法遍历实现了IEnumerable的集合，其方式类似于foreach语句，
但以异步方式遍历。这里也没有确定遍历顺序（代码文件ParallelSamples/Program.cs）。
    public static void ParallelForEach()
    {
      string[] data = {"zero", "one", "two", "three", "four", "five",
        "six", "seven", "eight", "nine", "ten", "eleven", "twelve"};
      ParallelLoopResult result =
        Parallel.ForEach(data, s =>
        {
        WriteLine(s);
        });
    }
如果需要中断循环，就可以使用ForEach（）方法的重载版本和ParallelLoopState参
数。其方式与前面的For（）方法相同。ForEach（）方法的一个重载版本也可以用于访问
索引器，从而获得迭代次数，如下所示：
    Parallel.ForEach(data, (s, pls, l) =>
    {
      WriteLine($"{s} {l}");
    });
21.2.5 通过Parallel.Invoke（）方法调用多个
方法
如果多个任务将并行运行，就可以使用Parallel.Invoke（）方法，它提供了任务并行
性模式。Parallel.Invoke（）方法允许传递一个Action委托的数组，在其中可以指定将运行
的方法。示例代码传递了要并行调用的Foo（）和Bar（）方法（代码文件
ParallelSamples/Program.cs）：
    public static void ParallelInvoke()
    {
      Parallel.Invoke(Foo, Bar);
    }
    public static void Foo()
    {
      WriteLine("foo");
    }
    public static  void Bar()
    {
      WriteLine("bar");
    }
Parallel类使用起来十分方便，而且既可以用于任务，又可以用于数据并行性。如果
需要更细致的控制，并且不想等到Parallel类结束后再开始动作，就可以使用Task类。当
然，结合使用Task类和Parallel类也是可以的。
21.3 任务
为了更好地控制并行操作，可以使用System.Threading.Tasks名称空间中的Task类。任
务表示将完成的某个工作单元。这个工作单元可以在单独的线程中运行，也可以以同步方
式启动一个任务，这需要等待主调线程。使用任务不仅可以获得一个抽象层，还可以对底
层线程进行很多控制。
在安排需要完成的工作时，任务提供了非常大的灵活性。例如，可以定义连续的工作
——在一个任务完成后该执行什么工作。这可以根据任务成功与否来区分。另外，还可以
在层次结构中安排任务。例如，父任务可以创建新的子任务。这可以创建一种依赖关系，
这样，取消父任务，也会取消其子任务。