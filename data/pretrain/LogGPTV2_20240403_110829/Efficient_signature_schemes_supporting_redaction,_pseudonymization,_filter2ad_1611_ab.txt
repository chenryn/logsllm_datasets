1Which deidentiﬁcation method is appropriate in a given
situation is often a diﬃcult problem itself. Solutions needs
to balance the utiltiy of the deidentiﬁed data with an as-
sessment of which data are publicly known and with which
the released data could be cross-linked, and they should
take into account that the very fact that data have been
removed from a speciﬁc record could leak information about
that record.
2.3.1 Model
There are three sorts of players in our model: signers,
redactors, and users.
The signer prepares and authenticates a document or data
set once, producing an ordinary digital signature along with
some auxiliary information; we will call the signature to-
gether with the auxiliary information an extended signature
for the original document. The signature depends on the
original data, on a list of operations to be allowed on parts
of the data, and on the signer’s private signing key.
The data and extended signature may be given to a redac-
tor. The redactor may modify the data, according to the
signer’s list of operations allowed. Among the modiﬁcations
that we treat in this paper are the redaction of parts of the
data, marking certain parts of the data as nonredactable,
and the replacement of parts of the data by pseudonyms
or deidentifying generalizations. We will refer to a set of
any of these allowed modiﬁcations as a (generalized) redac-
tion operation. The redactor makes certain changes to the
auxiliary information, and combines it with the original sig-
nature value to form a modiﬁed extended signature, which,
together with the modiﬁed data, may then be “published”,
sent to another redactor, or sent to a user.
There may be more than one redaction operation, per-
formed by more than one redactor, where subsequent op-
erations will only be veriﬁable if they are performed ac-
cording to the current modiﬁed form of the data and its
extended signature (so that, for example, a pseudonym can-
not be changed back to the subdocument that it replaced in
a previous redaction operation).
A user is able to verify the correctness of the modiﬁed data
using the (modiﬁed) extended signature, capturing the prop-
erty that the data should only be modiﬁed by the redactor
according to the speciﬁcations of the signer. Unlike the sit-
uation with ordinary signature schemes, where any change
to the data should cause the signature veriﬁcation to fail,
here we want to allow a carefully speciﬁed set of changes to
the data, while disallowing all other changes. We give a for-
mal deﬁnition of security for redactable-signature schemes
in §5.1, and prove that our algorithms satisfy the deﬁnition
in §5.2.
All of the algorithms discussed in this paper can be stated
in terms of any proofs of integrity that begin by hashing their
inputs with a one-way hash function, including both digital
signatures and time-stamp certiﬁcates. Precise deﬁnitions
of the security of time-stamping schemes are not yet clear in
the cryptographic literature (see [8, 3, 4]), and therefore we
state all our security results in terms of digital signatures.
We describe our cryptographic algorithms in terms of how
they apply to simple documents, viewed as strings of char-
acters over an alphabet. Let m denote a document to be
signed, segmented into a sequence of subdocuments m1, m2,
. . ., mn. In the case of ordinary text documents, these might
correspond to words, sentences, or paragraphs, depending on
the level of granularity desired. We will use ⊥ as a standard
symbol denoting a redacted subdocument, agreed upon by
convention by users of the system. In §4.1 below, we sketch
an application where the “document” consists of a snapshot
of the contents of a database, and subdocuments are records
or ﬁelds of records in the database.
As a practical consideration, in any implementation the
rendering algorithm that displays the document would have
to decide how to display modiﬁed versions. For example, in
Name
Frank Miller
Mary Ross
Howard Wu
Frank Miller
Cathy Dunne
June 2, 1970 male
Race Birth Date Gender ZIP Medical Diagnosis
white
white Apr 10, 1964
Asian
white
black
45873
45875
45875
45873 HIV-related symptoms
45874
Jan 17, 1958 male
June 2, 1970 male
Sep 20, 1975
chest pain
obesity
hypertension
female
female
short of breath
(a) unredacted
Name
Patient 1 white
Patient 2 white
Patient 3 Asian
Patient 1
Patient 4
Race Birth Date Gender ZIP Medical Diagnosis
1970
1964
1958
1970
1975
female
male
female
(b) redacted
chest pain
obesity
hypertension
4587*
45875
4587*
4587* HIV-related symptoms
45874
short of breath
Table 1: Example healthcare data.
our algorithm redacted subdocuments may be represented
in our data structure as, say, 160-bit apparently random
bit-strings.
In the simplest case, the rendering algorithm
could display each one with 27 base-64 encoded charac-
ters. A slightly more complicated rendering algorithm might
display them with more user-friendly values (e.g. “pseudo-
nym1”, “pseudonym2”, etc.), and give the user the options
of clicking on that value or hovering over it to reveal the
actual value.
2.3.2 Cryptographic building blocks
The security of our algorithms relies on several crypto-
graphic assumptions.
Let H denote a particular choice of collision-free hash
function. (See [13], Chapter 9, for more details).
Let S be a digital signature scheme that is secure against
existential forgery attacks by an adaptive chosen-message
adversary [7]. (Strictly speaking, we assume—and in prac-
tice this is completely without loss of generality—that the
signature scheme starts by hashing its input, and we use S
to denote the operations after the computation of a hash
value.)
Let C(·,·) be a secure randomized commitment scheme,
as can be constructed based on the existence of collision-
free hash functions [9]. (In practice, one might implement
C by simply taking C(m, r) = H(0, m, r) with a collision-
free hash function H, with 0 serving as a tag indicating input
for the commitment scheme.) The output x = C(m, r) of
any invocation of the commitment function does not leak
any information about the particular committed value m.
Let G be a secure length-doubling pseudorandom gener-
ator, as used in the GGM construction of pseudorandom
functions [5]. Since we use it repeatedly throughout this
paper, we sketch the construction here. Beginning with a
single random seed s, the construction computes a list of
pseudorandom values, by building a binary tree from the
root to the leaves. Speciﬁcally, suppose that s is k bits long.
The signer uses the pseudorandom generator to expand s to
a 2k-bit string, and lets the ﬁrst and second k bits form, re-
spectively, the left and the right children of s. (In practice,
this could be implemented by computing H(1, s) for the left
child and H(2, s) for the right child.) Continuing in this
manner, we obtain n leaves.
2.3.3 A redactable signature algorithm
In this section we describe in some detail a particular re-
dactable signature algorithm, due to [12]. In this algorithm,
the additional data added to form the extended signature for
the original document is of constant size, and only grows log-
arithmically with the number of sequences of consecutively
redacted subdocuments.
The algorithm is as follows:
Setup: Given a security parameter, the signer chooses a
collision-free hash function H, a secure pseudorandom gen-
erator G, a secure commitment scheme C, and a secure
signature scheme S. The signer then generates a public-
private key pair (P K, SK), publishes the public parameters
(P K, H, C, S), and keeps the private key secret.
Sign: Given a document m = (m1, . . . , mn), the signer
chooses a random seed s, and computes an n-leaf GGM tree,
using G. Let (r1, . . . , rn) denote the list of these leaves. For
each subdocument mi, the signer computes xi = C(mi, ri).
Next, the signer builds a Merkle hash tree from the list of
leaves (x1, . . . , xn) to form the root h, and signs it with
the private key SK, to get a signature σ. The extended
signature for m is (s, σ). The signer sends the following
information to the redactor in a secure channel: (m, s, σ).
We assume that an adversary cannot obtain the information
transmitted in the secure channel.
Redact: Given the document m, the redactor chooses
L, the set of subdocument in m to redact, and proceeds as
follows.
The redactor constructs the GGM tree from random seed
s, and obtains n pseudorandom values r1, . . . , rn. Let m(cid:48) =
(m(cid:48)
1, . . . , m(cid:48)
n) where
(cid:26) mi
(cid:48)
i =
m
i /∈ L
⊥ i ∈ L
and let
R = {ri | i /∈ L} , and
M = {xi | i ∈ L} ,
so that R is the set of GGM leaves corresponding to non-
redacted subdocuments and M is the set of commitment
values corresponding to redacted subdocuments.
Let SG be the minimum set of subroots of the GGM tree
that covers R. Let SM be the minimum set of subroots of
the Merkle tree that covers M .
The extended signature for m(cid:48) is (SG, SM , σ). The redac-
tor then sends the following information to the user over a
secure channel: (m(cid:48), SG, SM , σ).
The communication overhead of this algorithm can be
compared to the baseline case where the redactor simply
redacts subdocuments and re-signs the resulting document
(with resulting signature σ(cid:48), say). In such a case, the redac-
tor would have to send to the user the following information:
(m(cid:48), σ(cid:48)). Thus, the communication overhead from the redac-
tor to the user of this algorithm is due to SG and SM , whose
size we can bound as follows.
In general, this cost can be as large as O(n). (For example,
if L consists of exactly the set of even-numbered subdocu-
ments, then SG and SM are each of size n/2.) However, in
practice, especially for text documents and images, it is often
the case that redactions consist of sequences of consecutive
subdocuments; when this occurs, there will be considerable
savings.
Consider ﬁrst the case where L consists of a single se-
quence of j consecutive subdocuments to be redacted (j ≤
n). The total number of tree nodes required—pseudorandom
tree nodes included in SG plus hash values included in SM —
is at most O(lg j + lg(n − j)) = O(lg n).
If L contains s
sequences of consecutive subdocuments, then the total cost
is O(s lg n) tree nodes (each of length depending on the se-
curity parameter governing the lengths of the outputs of the
pseudorandom generator and the hash function).
Verify: From the location of the ⊥ symbols in m(cid:48), the
user can determine the indices that each root in SG and
SM cover. The user expands each of the subroots in SG to
reconstruct R. From these values, the user can compute the
set of commitments {C(mi, ri) | i /∈ L}. The user combines
these commitments with the subroots in SM to compute the
root of the Merkle tree, and veriﬁes the correctness of σ as
a signature on that root with respect to the public key P K
of the signer.
3. NEW ALGORITHM: PROHIBITING RE-
DACTION EFFICIENTLY
In this section we show how to extend the algorithm of
§2.3.3 above in order to be able specify that any subdocu-
ment is nonredactable. This implements the capability ﬁrst
introduced by the authors of [18], while improving the eﬃ-
ciency of their algorithm.
The Setup operation is as before.
Once again, the Sign operation begins with the random
choice of a seed value s. Instead of using s to build a GGM
tree with n leaves, we now build a tree with 2n leaves,
(r1, . . . , r2n). Now each subdocument mi is associated with
a pair of pseudorandom values, ri and rn+i. We use ri as
before, to compute the commitment value xi = C(mi, ri);
and we use the second value, rn+i, to compute a hash value
yi = H(3, rn+i), where 3 (or any standard constant) is a tag
to indicate input to computations of H for use in exactly
this place in the overall signature scheme. Finally, we build a
Merkle tree from the list of 2n values (x1, . . . , xn, y1, . . . , yn),
and sign the root of this tree, with resulting signature σ. As
before, the extended signature for m is (s, σ).
We use the second set of n leaves to extend the Redact
operation to allow for the marking of subdocuments as non-
redactable. As before, let L be the set of indices of subdocu-
ments to be redacted, and now let L(cid:48) be the set of indices of
subdocuments that are nonredactable. Note that L and L(cid:48)
must be disjoint, as a subdocument cannot be both redacted
and nonredactable. The interpretation of the status of mi
is summarized as follows.
i /∈ L i /∈ L(cid:48)
i ∈ L i /∈ L(cid:48)
i /∈ L i ∈ L(cid:48)
i ∈ L i ∈ L(cid:48)
semantics
ith subdocument can be redacted
ith subdocument is redacted
ith subdocument is nonredactable
invalid
Figure 1: Semantics of veriﬁcation algorithm.
We deﬁne m(cid:48) as before, but now deﬁne R and M as fol-
lows: