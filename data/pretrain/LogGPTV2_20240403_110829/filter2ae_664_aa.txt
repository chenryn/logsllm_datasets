**作者：天融信阿尔法实验室**  
**原文链接：**  
**相关文章：[Java 反序列化系列 ysoserial Hibernate1](https://paper.seebug.org/1187/ "Java
反序列化系列 ysoserial Hibernate1")**
## 1.Hibernate简介
Hibernate是一个开放源代码的对象关系映射框架，它对JDBC进行了非常轻量级的对象封装，它将POJO与数据库表建立映射关系，是一个全自动的ORM框架，hibernate可以自动生成SQL语句，自动执行，使得Java程序员可以随心所欲的使用对象编程思维来操纵数据库。
Hibernate可以应用在任何使用JDBC的场合，既可以在Java的客户端程序使用，也可以在Servlet/JSP的Web应用中使用，最具革命意义的是，Hibernate可以在应用EJB的JaveEE架构中取代CMP，完成数据持久化的重任。
## 2.RPC简介
RPC(Remote Procedure Call)远程过程调用。允许一台计算机程序远程调用另外一台计算机的子程序，不用关心底层网络通信。
很多人对RPC的概念很模糊，其实RPC是建立在Socket的基础上的。通过Socket将对另一台计算机中的某个类的某个方法的请求同时包含该方法所需要传输的参数序列化传输过去，然后在另一台计算机接收后判断具体调用的哪个类的哪一个方法，然后通过反射调用该方法并传入参数，最终将方法的返回值序列化并通过Socket传输回发送方法调用请求的那台计算机上，这样的一个过程就是所谓的远程方法调用
一次RPC调用的过程大概有10步：
1.执行客户端调用语句，传送参数
2.调用本地系统发送网络消息
3.消息传送到远程主机
4.服务器得到消息并取得参数
5.根据调用请求以及参数执行远程过程（服务）
6.执行过程完毕，将结果返回服务器句柄
7.服务器句柄返回结果，调用远程主机的系统网络服务发送结果
8.消息传回本地主机
9.客户端句柄由本地主机的网络服务接收消息
10.客户端接收到调用语句返回的结果数据
以下是一张截取自网上的RPC执行流程图
接下来通过java代码来实现一个最简化的RPC Demo
先看一下文件结构首先是client端也就是发起远程方法请求的一方
然后是server端也就是处理远程方法请求的一方
首先看RpcPrincipleTestInterface接口，此接口是公开的，也就是这个接口文件是client端和server端中都存在的，接下来是RpcPrincipleTestInterface的代码
    import java.io.Serializable;
    public interface RpcPrincipleTestInterface extends Serializable {
        public int myAdd(int firstNum, int SecondNum);
        public int mySub(int firstNum, int SecondNum);
        public String sayHello(String name);
    }
然后我们观察client端的RpcPrincipleClientTestimpl.java
    public class RpcPrincipleClientTestimpl {
        public static void main(String[] args)throws Exception {
            RpcPrincipleTestInterface rpcPrincipleTestInterface = (RpcPrincipleTestInterface)Stub.getStub();
            int resultOne = rpcPrincipleTestInterface.myAdd(2,3);
            System.out.println(resultOne+"\n");
            int resultTwo = rpcPrincipleTestInterface.mySub(5,4);
            System.out.println(resultTwo+"\n");
            String resultThree = rpcPrincipleTestInterface.sayHello("张三");
            System.out.println(resultThree+"\n");
        }
    }
下面是执行结果
可以看到我们执行了RpcPrincipleTestInterface接口中的方法但是我们在本地并未有任何RpcPrincipleTestInterface接口的具体实现？那这些个执行结果究竟是谁给出的呢？
我们通过观察代码不难发现，为rpcPrincipleTestInterface变量赋值的是`Stub.getStub()`方法，该方法的返回值被我们强转成了`RpcPrincipleTestInterface`类型。那`Stub.getStub()`方法的返回值究竟是什么我们继续深入来看
下面是Stub.java的代码
    public class Stub {
        public static Object getStub(){
            InvocationHandler h = new InvocationHandler() {
                @Override
                public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
                    Socket socket = new Socket("127.0.0.1",8888);
                    String methodName = method.getName();
                    if(methodName.equals("myAdd")||methodName.equals("mySub")){
                        Class[] parameterType = method.getParameterTypes();
                        ObjectOutputStream outputStream = new ObjectOutputStream(socket.getOutputStream());
                        outputStream.writeUTF(methodName);
                        outputStream.writeObject(parameterType);
                        outputStream.writeObject(args);
                        outputStream.flush();
                        //outputStream.close();
                        DataInputStream inputStream = new DataInputStream(socket.getInputStream());
                        int result = inputStream.readInt();
                        inputStream.close();
                        return result;
                    }else if (methodName.equals("sayHello")){
                        Class[] parameterType = method.getParameterTypes();
                        ObjectOutputStream outputStream = new ObjectOutputStream(socket.getOutputStream());
                        outputStream.writeUTF(methodName);
                        outputStream.writeObject(parameterType);
                        outputStream.writeObject(args);
                        outputStream.flush();
                        DataInputStream inputStream = new DataInputStream(socket.getInputStream());
                        String result = inputStream.readUTF();
                        return result;
                    }else {
                        System.out.println("请确认你调用的方法是否存在");
                        return null;
                    }
                }
            };
            Object object = Proxy.newProxyInstance(RpcPrincipleTestInterface.class.getClassLoader(),new Class[]{RpcPrincipleTestInterface.class},h);
            return object;
        }
    }
不难看出最终返回的结果是一个实现了RpcPrincipleTestInterface接口的动态生成的Proxy对象，传入的handler参数中包含了调用远程方法的核心操作。
首先熟悉java动态代理的同学都清楚，当我们调用动态代理对象的某个方法时，其实都是在调用InvocationHandler对象中被重写的invoke方法。所以当我们在`RpcPrincipleClientTestimpl中调用rpcPrincipleTestInterface.myAdd()`方法时本质调用的是`InvocationHandler.invoke`方法。同时方法名“myAdd”作为参数传入invoke中，我们首先创建一个socket对象将请求的地址和端口作为参数传入。然后获取方法名，接下来判断当前调用的方法是哪一个，判断完成后，将方法名，参数类型，还有参数的值序列化发送给server端，然后通过DataInputStream读取socket接收到的数据并反序列化，然后进行返回。
讲完了client端，我们再来看看server端，首先来看RpcPrincipleTestImpl.java的代码
    public class RpcPrincipleTestImpl implements RpcPrincipleTestInterface {
        private static final long serialVersionUID = 8084422270826068537L;
        @Override
        public int myAdd(int firstNum,int SecondNum) {
            return firstNum + SecondNum;
        }
        @Override
        public int mySub(int firstNum,int SecondNum) {
            return firstNum - SecondNum;
        }
        @Override
        public String sayHello(String name) {
            return name+"Say Hello";
        }
    }
我们看到RpcPrincipleTestInterface接口真正的实现类是RpcPrincipleTestImpl，那刚才我们究竟是怎么做到在client端调用了server端的RpcPrincipleTestImpl的呢？关键在于RpcPrincipleServerSkeleton这个类，我们观察下他的源码
    public class RpcPrincipleServerSkeleton {
        private static boolean running = true;
        public static void main(String[] args) throws Exception {
            ServerSocket serverSocket = new ServerSocket(8888);
            while (running){
                Socket s = serverSocket.accept();
                process(s);
                s.close();
            }
            serverSocket.close();
        }
        private static void process(Socket s)throws Exception{
            InputStream in = s.getInputStream();
            OutputStream out = s.getOutputStream();
            ObjectInputStream ois= new ObjectInputStream(in);
            String methodName = ois.readUTF();
            Class[] parameterType = (Class[])ois.readObject();
            Object[] args =(Object[]) ois.readObject();
            RpcPrincipleTestInterface rpcPrincipleTestInterface = new RpcPrincipleTestImpl();
            Method method = rpcPrincipleTestInterface.getClass().getMethod(methodName,parameterType);
            Type t = method.getAnnotatedReturnType().getType();
            if(t.getTypeName().equals("int")){
                int result = (int)method.invoke(rpcPrincipleTestInterface,args);
                DataOutputStream output = new DataOutputStream(out);
                output.writeInt(result);
                output.flush();
            }else if(t.getTypeName().equals("java.lang.String")){
                String result = (String) method.invoke(rpcPrincipleTestInterface,args);
                DataOutputStream output = new DataOutputStream(out);
                output.writeUTF(result);
                output.flush();
            }
        }
    }
在RpcPrincipleServerSkeleton中我们首先监听了8888端口，然后将Socket对象传入process方法中。process方法中接收客户端传的，调用方法的方法名，参数类型，以及参数值。按顺序将其反序列化出来然后通过反射调用RpcPrincipleTestImpl对象中的对应方法，然后将得到的返回值进行类型的判断，紧接着就将其进行序列化然后通过socket返回给client端，至此就是一个RPC的基础流程，我在这里演示的RPC
demo可以说是简陋，真实的RPC框架背后的实现要比这复杂n倍，但是复杂归复杂，原理都是一样的。
## 3.RMI简介
介绍完了RPC，接下来就介绍一下RPC框架的一种实现，也就是RMI，直接通过代码来进行演示
先看一下远程方法调用方，也就是client端的目录结构
然后是远程方法服务提供方，也就是server端