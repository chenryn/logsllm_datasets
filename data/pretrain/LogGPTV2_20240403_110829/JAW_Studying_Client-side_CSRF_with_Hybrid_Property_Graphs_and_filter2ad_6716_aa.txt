title:JAW: Studying Client-side CSRF with Hybrid Property Graphs and
Declarative Traversals
author:Soheil Khodayari and
Giancarlo Pellegrino
JAW: Studying Client-side CSRF with 
Hybrid Property Graphs and Declarative Traversals
Soheil Khodayari and Giancarlo Pellegrino, 
CISPA Helmholtz Center for Information Security
https://www.usenix.org/conference/usenixsecurity21/presentation/khodayari
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.JAW: Studying Client-side CSRF with Hybrid Property Graphs
and Declarative Traversals
Soheil Khodayari
CISPA Helmholtz Center
for Information Security
Giancarlo Pellegrino
CISPA Helmholtz Center
for Information Security
Abstract
Client-side CSRF is a new type of CSRF vulnerability
where the adversary can trick the client-side JavaScript pro-
gram to send a forged HTTP request to a vulnerable target site
by modifying the program’s input parameters. We have little-
to-no knowledge of this new vulnerability, and exploratory
security evaluations of JavaScript-based web applications are
impeded by the scarcity of reliable and scalable testing tech-
niques. This paper presents JAW, a framework that enables the
analysis of modern web applications against client-side CSRF
leveraging declarative traversals on hybrid property graphs, a
canonical, hybrid model for JavaScript programs. We use JAW
to evaluate the prevalence of client-side CSRF vulnerabili-
ties among all (i.e., 106) web applications from the Bitnami
catalog, covering over 228M lines of JavaScript code. Our ap-
proach uncovers 12,701 forgeable client-side requests affect-
ing 87 web applications in total. For 203 forgeable requests,
we successfully created client-side CSRF exploits against
seven web applications that can execute arbitrary server-side
state-changing operations or enable cross-site scripting and
SQL injection, that are not reachable via the classical attack
vectors. Finally, we analyzed the forgeable requests and iden-
tiﬁed 25 request templates, highlighting the ﬁelds that can be
manipulated and the type of manipulation.
1 Introduction
Client-side Cross-Site Request Forgery (client-side CSRF) is
a new breed of CSRF vulnerabilities affecting modern web ap-
plications. Like the more traditional CSRF, with a brief visit to
a malicious URL, an adversary can trick the victim’s browser
into sending an authenticated security-sensitive HTTP request
on the user’s behalf towards a target web site without user’s
consent or awareness. In the traditional CSRF, the vulnerable
component is the server-side program, which cannot distin-
guish whether the incoming authenticated request was per-
formed intentionally, also known as the confused deputy prob-
lem [45, 55]. CSRF is typically solved by adding a pseudo-
random unpredictable request parameter, preventing forgery
(see, e.g., [34]), or by changing the default browsers’ behav-
ior and avoiding the inclusion of HTTP cookies in cross-site
requests (see, e.g., [28, 29]). In the client-side CSRF, the vul-
nerable component is the JavaScript program instead, which
allows an attacker to generate arbitrary requests by modifying
the input parameters of the JavaScript program. As opposed
to the traditional CSRF, existing anti-CSRF countermeasures
(see, e.g., [28, 29, 34]) are not sufﬁcient to protect web appli-
cations from client-side CSRF attacks.
Client-side CSRF is very new—with the ﬁrst instance af-
fecting Facebook in 2018 [24]—and we have little-to-no
knowledge of the vulnerable behaviors, the severity of this
new ﬂaw, and the exploitation landscape. Studying new vul-
nerabilities is not an easy task, as it requires the collection and
analysis of hundreds of web pages per real web applications.
Unfortunately, such analyses are primarily impeded by the
scarcity of reliable and scalable tools suitable for the detection
and analysis of vulnerable JavaScript behaviors.
In general, studying client-side CSRF vulnerabilities in
JavaScript-based web applications is not an easy task. First,
there is no canonical representation for JavaScript code. Sec-
ond, JavaScript programs are event-driven, and we need mod-
els that capture and incorporate this aspect into the canonical
representation. Third, pure static analysis is typically not suf-
ﬁciently accurate due to the dynamic nature of JavaScript
programs [43, 46, 72], and their execution environment [47],
calling for hybrid static-dynamic analysis techniques. Finally,
JavaScript libraries constitute a noteworthy fraction of code
across web pages, and analyzing them repeatedly leads to in-
efﬁcient models poorly suitable for detecting vulnerabilities.
In this paper, we address these challenges by proposing
hybrid property graphs (HPGs), a coherent, graph-based
representation for client-side JavaScript programs, captur-
ing both static and dynamic program behaviors. Inspired
by prior work [91], we use property graphs for the model
representation and declarative graph traversals to identify
security-sensitive HTTP requests that consume data values
from attacker-controllable sources. Also, we present JAW, a
framework for the detection of client-side CSRF that, start-
ing from a seed URL, instantiates HPGs by automatically
USENIX Association
30th USENIX Security Symposium    2525
collecting web resources and monitoring program execution.
Finally, we instantiated JAW against all (i.e., 106) web ap-
plications of the Bitnami catalog [2] to detect and study client-
side CSRF, covering, in total, over 228M lines of JavaScript
code over 4,836 web pages. Overall, our approach uncovers
12,701 forgeable client-side requests affecting 87 web appli-
cations. For 203 forgeable requests, we successfully created
client-side CSRF exploits against seven web applications that
can execute arbitrary server-side state-changing operations
or enable cross-site scripting and SQL injection, that are not
reachable via the classical attack vectors. Finally, we analyzed
forgeable requests and identiﬁed 25 distinct request templates,
highlighting the ﬁelds that can be manipulated and the type
of manipulation.
To summarize, we make the following main contributions:
• We perform the ﬁrst systematic study of client-side
CSRF, a new variant of CSRF affecting the client-side
JavaScript program, and present a taxonomy of forgeable
requests considering two features, i.e., request ﬁelds, and
the type of manipulation.
• We present hybrid property graphs, a single and coherent
representation for the client-side of web applications,
capturing both static and dynamic program behaviors.
• We present JAW, a framework that detects client-side
CSRF by instantiating a HPG for each web page, starting
from a single seed URL.
• We evaluate JAW with over 228M lines of JavaScript
code in 106 popular applications from the Bitnami cata-
log, identifying 12,701 forgeable requests affecting 87
applications, out of which we created working exploits
for 203 requests of seven applications.
• We release the source code of JAW1 to support the fu-
ture research effort to study vulnerable behaviors of
JavaScript programs.
2 Background
Before presenting JAW, we introduce the client-side CSRF
vulnerability and a running example (§2.1). Then, we present
the challenges to analyze client-side CSRF vulnerabilities
(§2.2). Finally, we give an overview of our approach (§2.3).
2.1 Client-side CSRF
Client-side CSRF is a new category of CSRF vulnerability
where the adversary can trick the client-side JavaScript pro-
gram to send a forged HTTP request to a vulnerable target
site by manipulating the program’s input parameters. In a
client-side CSRF attack, the attacker lures a victim into click-
ing a malicious URL that belongs to an attacker-controlled
web page or an honest but vulnerable web site, which in turn
causes a security-relevant state change of the target site.
Impact. Similarly to the classical CSRF, client-side CSRF
can be exploited to perform security-sensitive actions on the
1https://github.com/SoheilKhodayari/JAW
server-side and compromise the database integrity. Successful
CSRF attacks can lead to remote code execution [51, 69],
illicit money transfers [69, 93], or impersonation and identity
riding [23, 24, 25, 26, 27, 37], to name only a few instances.
Root Causes. Client-side CSRF vulnerabilities originate
when the JavaScript program uses attacker-controlled in-
puts, such as the URL, for the generation of outgoing HTTP
requests. The capabilities required to manipulate different
JavaScript input sources (e.g., see [60]) are discussed next.
Threat Model. The overall goal of an attacker is forging
client-side HTTP requests by manipulating various JavaScript
input sources. In this paper, we consider the URL, window
name, document referrer, postMessages, web storage, HTML
attributes, and cookies, each requiring different attacker capa-
bilities. Manipulating the URL, window name, referrer and
postMessages require an attacker able to forge a URL or con-
trol a malicious web page. For example, a web attacker can
craft a malicious URL, belonging to the origin of the honest
but vulnerable web site, that when visited by a victim leads to
automatic submission of an HTTP request by the JavaScript
program of the target site. Alternatively, a web attacker can
control a malicious page and use browser APIs to trick the vul-
nerable JavaScript of the target page to send HTTP requests.
For example, a web attacker can use window.open() [21]
to open the target URL in a new window, send postMes-
sages [81] to the opened window, or set the window name
through window.name API [20]. Furthermore, a web attacker
can manipulate document.referrer leveraging the URL of
the attacker-controlled web page.
For web storage and HTML attributes, the attacker needs
to add ad-hoc data items in the web storage or DOM tree. A
web attacker could achieve that assuming the web application
offers such functionalities (e.g., by HTTP requests). Similarly,
a web attacker with a knowledge of an XSS exploit can ma-
nipulate the web storage or DOM tree. Finally, modifying
cookies may require a powerful attacker such as a network
attacker. This attacker can implant a persistent client-side
CSRF payload in the victim’s browser by modifying cookies
(e.g., see [78, 84, 94]), which can lie dormant, and exploited
later on to attack a victim. We observe that all attacks per-
formed by the web attacker can be performed by a network
attacker too.
Vulnerability. Listing 1 exempliﬁes a vulnerable script–
based on a real vulnerability that we discovered in SuiteCRM–
that fetches a shopping invoice with an HTTP request during
the page load. First, the program fetches an HTML input
ﬁeld with id input (line 1), and then deﬁnes an event han-
dler h that is responsible for retrieving the price of the in-
voice with an asynchronous request and populating the input
with the price (lines 2-9). For asynchronous requests, the
function h uses YUI library [22], that provides a wrapper
asyncRequest for the low-level XMLHttpRequest browser
API. Then, the function h is registered as a handler for a cus-
2526    30th USENIX Security Symposium
USENIX Association
Listing 1: Example client-side CSRF vulnerability derived from SuiteCRM.
Figure 1: Example of client-side CSRF attack.
1
2
3
4
5
6
7
8
9
10
...
14
15
var i = document.querySelector ('input');
async function h(e){
var uri = window.location.hash.substr (1) ;
if ( uri.length > 0) {
let req = new asyncRequest (" POST " , uri );
// Add Synchronizer Token
req.initHeader ('X-CSRF-TOKEN', token );
var price = await req.send () ;
i.value = price; }}
i.addEventListener ('loadInvoice', h);
function showInvoicePrice ( input_id ) {
document.getElementById ( input_id ). dispatchEvent (new
CustomEvent ('loadInvoice', {}) ) ;}
16
showInvoicePrice ('input');
tom event called loadInvoice. This event is dispatched by
the function showInvoicePrice (lines 14-16). The vulnera-
bility occurs (in lines 3-5) when the JavaScript program uses
URL fragments to store the server-side endpoint for the HTTP
request, an input that can be modiﬁed by the attacker.
Attack. Figure 1 shows an example of attack exploiting the
client-side CSRF vulnerabilities of Listing 1. First, the at-
tacker prepares a URL of the vulnerable site, by inserting the
URL of the target site as URL fragment (step 1). Then, the
victim is lured into visiting the vulnerable URL (step 2), as it
belongs to an application that the user trusts. Upon comple-
tion of the page load (step 3), the JavaScript code will extract
a URL from the URL fragment, and send an asynchronous
HTTP request towards the target site, which in turn causes a
security-relevant state change on the target server.
Existing Defenses are Ineffective. Over the past years,
the community proposed several defenses against CSRF
(e.g., [34, 39, 52, 53, 63, 74]). Recently, browser ven-
dors proposed to introduce a stricter same-site cookies pol-
icy [28, 29, 30], by marking all cookies as SameSite=Lax by
default [90]. Unfortunately, existing mechanisms cannot offer
a complete protection against client-side CSRF attacks, e.g.,
when synchronizer tokens [34, 39] or custom HTTP head-
ers [34, 86] are used, the JavaScript program will include
them in the outgoing requests as shown in line 7 of Listing 1.
Also, if the browser or the web site is using the same-site
policy for cookies, JavaScript web pages, once loaded, can
perform preliminar same-site requests to determine whether a
pre-established user session exists, circumventing the same-
site policy.
2.2 Challenges
In this work, we intend to study the new client-side CSRF
vulnerability in the client-side JavaScript code of a web appli-
cation. Before presenting our solution, we show the challenges
we need to address to achieve our objective.
(C1) Static Representational Models. JavaScript programs
are incredibly challenging to be analyzed via static analysis.
For example, prior work have proposed inter-procedural con-
trol ﬂow graphs [50, 67], data ﬂow dependency graphs [62,
82], type analyzers [38, 44, 49], and points-to analysis [61,
83]. Unfortunately, these approaches provide ad-hoc represen-
tation of programs, each focusing on an individual aspect that
is alone not sufﬁcient to study client-side CSRF. Recently,
we have seen new ideas unifying static representations with
code property graphs (CPGs) [33, 91]. However, these new
ideas are not tailored to JavaScript’s nuances, such as the
asynchronous events [82], or the execution environment [47].
To date, there are no models for JavaScript that can provide
a canonical representation to conduct both detection and ex-
ploratory analysis of the code.
(C2) Vulnerability-speciﬁc Analysis Tools. Over the past
years, there have been a plethora of approaches to detect vul-
nerabilities in client-side JavaScript programs. To date, these
approaches have been mainly applied to XSS [60, 64, 75,
81, 84], or logic and validation vulnerabilities [35, 36, 66,
76, 79, 80, 87, 89], resulting in tools that are rather tightly
coupled with the speciﬁc analysis of the vulnerability. Thus,
researchers seeking to study new client-side vulnerabilities
like client-side CSRF are forced to reimplement those ap-
proaches rediscovering tweaks and pitfalls.
(C3) Event-based Transfer of Control. Existing uniﬁed rep-
resentations such as CPGs [33, 91] assume that the transfer
of control happens only via function calls, an assumption
no longer valid for JavaScript. In JavaScript, the transfer of
control happens also via events which either originate from
the environment, e.g., mouse events, or are user-deﬁned, as
shown in Listing 1. When an event is dispatched, one or more
registered functions are executed, which can change the state
of the program, register new handlers, and ﬁre new events.
Representing the transfer of control via event handlers is fun-
damental for the analysis of JavaScript programs.
(C4) Dynamic Web Execution Environment. JavaScript
programs rely on many dynamic behaviors that make it chal-
lenging to study them via pure static analysis. A typical exam-
ple is the dynamic code loading [46]. In essence, JavaScript
programs can be streamed to the user’s web browser, just like
other resources. Thus, contrary to the assumption in most
static analysis approaches, the entire JavaScript code may
not be available for the analysis [43]. Another example is
the interaction between JavaScript and the DOM tree. Con-
sider, for example, two variables containing the same DOM
tree node; however, the content of one variable is fetched
via document.querySelector("input") and the other by
document.form[0].input. In such a case, it is often impor-
tant to determine whether the two variables point to the same
USENIX Association
30th USENIX Security Symposium    2527
object (i.e., point-to analysis). However, it can be consider-
ably hard to determine this by looking at the source code, as
DOM trees are often generated by the same program.
(C5) Shared Third-party Code. Most modern web applica-