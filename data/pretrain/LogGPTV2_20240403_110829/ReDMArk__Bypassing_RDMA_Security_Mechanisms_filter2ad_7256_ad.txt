but might eventually lead to disruption of service access. In-
terestingly, due to the one-sided nature of RDMA reads and
writes, resource exhaustion attacks can be executed "silently",
i.e., with minor detection possibilities on the victim host. We
refer to performance degradation attacks based on resource
exhaustion as A5 .
Experiments. We analyze the inﬂuence of resource ex-
haustion using a varying number of attackers on the latency
and bandwidth of RDMA read or write operations. Each at-
tacker is located on a dedicated machine equipped with a
Mellanox ConnectX-3 RNIC and connected to the victim ser-
vice through a switch. Each attacker ﬂoods the victim service
with RDMA write requests of maximum transmission unit
size, (4 KB in the testing environment) with the intention of
exhausting packet processing resources of the victim’s RNIC.
Since RDMA write are enabled by default, but RDMA read
operations must be explicitly enabled during connection es-
tablishment, exhaustion attacks based on RDMA writes are
more likely to occur.
To observe the effect of this attack, we measure the latency
and available bandwidth as observed by a client of the vic-
USENIX Association
30th USENIX Security Symposium    4285
Figure 5: Effect of an exhaustion attack using RDMA write
on latency and bandwidth of RDMA read.
Figure 6: Effect of an exhaustion attack using RDMA write
on latency and bandwidth of RDMA write.
tim service. Figures 5 and 6 illustrate the results of these
experiments. During normal operation, the latencies for both
RDMA read and write operations as observed by the client
remain largely unaffected by the size of the requests as the
requests ﬁt in a single packet. However, given the presence of
only two attackers that ﬂood the victim service with requests,
the latency for regular RDMA requests increases by factor
3. For each additional attacker the latency further increases
by 4.20 µs. In terms of throughput, the resource exhaustion
attack is even more severe. For two or more attackers, the
throughput of a victim reduces by factor 8 – 10 for RDMA
read requests. For RDMA writes, the attack should be per-
formed by at least ﬁve attackers to notably affect the write
throughput of legitimate applications.
Practicality. This resource exhaustion attack does not re-
quire any special capabilities and is achievable under the
assumption of the T1 model. However, collusion of several
attackers is required to effectively disrupt a public service.
Mitigation. Due to the nature of one-sided RDMA opera-
tions, the misuse of RDMA for performance degradation is
almost undetectable. However, modern RNICs (e.g., based
on mlx5) support hardware counters on the device which are
accessible by the host. Thus, a host would be able to detect
resource exhaustion attacks based on excessive issuance of
requests. Using this detection based on HW counters would
allow a host to mitigate these attacks.
5.6 A6: Facilitating Attacks using RDMA
In addition to attacks that use RDMA as an attack vector,
RDMA can also facilitate attacks (e.g., for data extraction).
As RDMA read and write operations do not require any inter-
action by a remote host’s CPU V7 , they allow an attacker to
“silently” read and write data.
For example, if an attacker has the privilege to preload a
library to a victim’s application, the attacker can misuse this
ability to inject code that establishes an RDMA connection
to the attacker’s application. This RDMA connection can
then be used by the attacker to read memory from the victim
without involvement of the victim CPU or intervention with
applications executed by the victim.
Since the memory registered by an application must also
be readable by the RNIC, the attacker can either preregis-
ter a large chunk of memory or enable ODP access which
grants access to any valid virtual address without memory
registration V10 . Then, by continuously sweeping the read-
able memory, the attacker can eavesdrop on sensitive data of
applications.
Experiments. To illustrate the feasibility of using RDMA
as an attack vector, we implemented a proof-of-concept appli-
cation that preloads a malware library to a binary and allows
an attacker to intercept a secret passphrase entered by the
victim by reading memory using RDMA read operations. The
malware (see Listing 1) preallocates a memory space and
register it for RDMA Read access. Then it sends the rkey and
the memory address of the memory region to the attacker,
and deallocates the memory. Freed memory is still RDMA
4286    30th USENIX Security Symposium
USENIX Association
163264128256512102420484096Packetsize(byte)0510152025303540Latency(us)10x163264128256512102420484096Packetsize(byte)010002000300040005000Throughput(req/sec)10xorig.1att.2att.3att.4att.5att.6att.7att.8att.163264128256512102420484096Packetsize(byte)0510152025303540Latency(us)163264128256512102420484096Packetsize(byte)010002000300040005000Throughput(req/sec)orig.1att.2att.3att.4att.5att.6att.7att.8att.//Initialization
rdma_connection* con = connect("Attacker's IP and PORT")
//Size of adversarial memory
const uint32_t length = 4096;
//Pre-allocate the adversarial memory
void* buf = malloc(length);
//Register the pre-allocated buffer
// with RDMA READ access
ibv_mr * mr = ibv_reg_mr(PD,buf,size,RDMA_READ);
//Send the memory region to the attacker
con->send(mr->address,mr->rkey,mr->length);
//Free the buffer so that
// the victim can use it.
free(buf);
Listing 1: Pseudocode of RDMA malware library
accessible, as it is not deregistered. Since the memory is deal-
located, the victim is able to use it for storing its passphrase.
The remote attacker can continuously read the memory using
RDMA to gain the passphrase. ODP strengthens the attack by
allowing the attacker to read the whole memory space, and
not just the pre-registered region.
Practicality. The attack is achievable under T4 model.
Both attacker and the victim needs to be in the same network
and be equipped with RDMA-capable NICs. In addition, the
attacker should be capable of replacing or modifying the ex-
ecution binaries of the victim. Note that this attack can not
only be applied to RDMA applications, but can also be used
to obtain sensitive data from other applications.
Mitigation. A mitigation mechanism that prevents an ad-
versary from misusing RDMA as an attack vector would be
check to what libraries are preloaded with a binary. How-
ever, to more generally prevent attacks that include RDMA
operations in code, the system should rely on remote code
attestation (e.g., based on Intel SGX [6]).
6 Vulnerability Assessment of Open-Source
RDMA Systems
We analyse whether recent open-source applications and sys-
tems that use RDMA as a communication mechanism are
vulnerable to the aforementioned attacks. Table 5 lists the
analyzed systems and their security issues.
Inﬁniswap [11] is a remote memory paging system that uses
remote memory as a swap block device and is speciﬁcally
designed to be used in an RDMA network. To “swap out”
memory pages a local block is sent over RDMA to a remote
block using an RDMA write operation. Similarly, to “swap in”
memory pages RDMA read operations are used. Using A1 , an
attacker can inject a packet and modify the content of swapped
pages. Inﬁniswap is also vulnerable to DoS attacks using
A2 which breaks connections of other clients. Furthermore,
the Inﬁniswap daemon uses posix_memalign in a loop to
allocate and register buffers of 1 GB, allowing an attacker
to predict the position and rkey of newly allocated buffers
Table 5: Summary on vulnerabilities of open-source RDMA-
enabled systems, and how they establish connections: using
native interface or connection manager.
Connection
System
Inﬁniswap [11] Manager
Native
Octopus [22]
HERD [13]
Native
RamCloud [28] Native
Dare [31]
Native
Crail [34, 35]
Manager
a if deployed over RoCE
 vulnerable to attack
A1
a
a
a
a
a
a
A2
a
a
a
a
a
a
A3
A4
A5


















 resilient to attack
(difference of 0x40002000 bytes). Using A3 , an attacker
can connect to the Inﬁniswap service and get access to the
memory of other clients in the same PD. Since Inﬁniswap
does not limit the number of connections and resources per
client, a single client can occupy all connections using A4 or
execute performance degradation attacks using A5 .
Octopus [22] is an RDMA-enabled distributed persistent
memory ﬁle system. As Octopus uses a hard-coded ﬁxed start-
ing PSN, an attacker can trivially predict subsequent PSNs
and a perform packet injection attack A1 and A2 . Further-
more, all clients share a single buffer that can be accessed
using a single rkey A3 . Thus, the Octopus system relies on
strict trust in all participating parties, i.e., clients must write
remote procedure call (RPC) requests to predeﬁned offsets,
as otherwise the system would fail. Additionally, even though
Octopus does not use RDMA reads, all buffers are registered
with read permissions enabled. Thus, a misbehaving client
can read and change RPCs of all other clients and force the
system to execute a wrong RPC. Finally, Octopus also does
not limit the number connections and resources per client
A4 , and clients are able to obtain RDMA writable memory
regions after establishing a connection A5 .
The HERD [13] system implements an RDMA-enabled
key-value store. Similar to Octopus, HERD uses a single
memory buffer with a single registration for all RPC requests
by clients, does not limit the number of connections and re-
sources per client and is thus vulnerable to A3 , A4 , and
A5 . However, unlike Octopus HERD generates PSNs ran-
domly. Unfortunately, systems such as Hermes [14] and cc-
NUMA [10] that are implemented using HERD inherit all its
vulnerabilities.
RamCloud [28] is a distributed key-value store based on
two-sided RDMA. As one-sided RDMA operations are not
enabled, performance degradation using A5 is not possible.
However, unauthorized memory access A3 is still possible
because RamCloud registers memory with enabled remote
USENIX Association
30th USENIX Security Symposium    4287
accesses and the memory allocation is static. RamCloud starts
memory allocation at address 0x40000000 and all subsequent
allocations are offset by adding 1 GB to the previous address.
Furthermore, the number of clients is also not limited, and a
single client can exhaust all QP resources A5 .
Dare [31] speciﬁes an RDMA-accelerated consensus pro-
tocol that is based on trust in all participating entities. Un-
fortunately, a static initial PSN is used and all control data
is registered using a single registration. Thus, a misbehav-
ing participant can forge the votes of other participants using
packet injection A1 or unauthorized memory access A3 , and
manipulate the consensus decision to his beneﬁt. However,
A4 is not possible as the the number of clients is ﬁxed and
deﬁned by the consensus quorum size.
Crail [34, 35] is a high-performance distributed data store
designed for fast sharing of ephemeral data in distributed
data processing workloads. Crail has similar vulnerabilities as
Inﬁniswap as it maps and registers 1 GB ﬁxed-size ﬁles in a
loop, making the memory addresses and corresponding rkeys
highly predictable. Finally, the number of connections is not
limited and all memory buffers are accessible using RDMA.
7 Mitigation Mechanisms
7.1 Software-based Security Mechanisms
In the following, we propose two mitigation mechanisms
that are readily deployable by RDMA applications without
requiring changes to hardware or the IB protocol. While these
mechanisms introduce some computational overhead on the
application, they could be deployed until other mitigations
mechanisms become available.
M1 Randomization of QPNs. We propose the following
mechanism for randomization of QPNs (see Listing 2). An
RDMA application creates a pool of unconnected QP de-
scriptors with random QPNs. As soon as QP connection is
required, one of the QP descriptors is fetched and registered.
This measure will introduce some overhead on the RDMA
host, but can be deployed without modiﬁcation of existing
RDMA protocols and will increase the number of packets that
an adversary needs to inject to 224. Given that modern RNICs
provide hardware counters that are accessible by applications,
such bruteforce attempts could be detected.
M2 Randomization of rkeys. In addition to randomizing
QPNs, we propose a mechanism to randomize memory pro-
tection keys rkeys. Similar to the ﬁrst mitigation mechanism,
the application preregisters a pool of empty memory regions
with different rkeys (see Listing 3). When a new buffer needs
to be registered, the application can randomly get a mem-
ory descriptor and remap it to the speciﬁed buffer using an
ibv_rereg_mr call.
//Initialization
RandomPool pool;
//Create a pool of QP connections
// by skipping a random number of QP connections
for(int i=0; i<POOL_SIZE; i++){
int random_value = secure_prng();
//Create and destroy QPs to get a random QP number
for(int j=0; j<random_value; j++){
//Each new QP has a predictable QPN
ibv_qp * qp = ibv_create_qp(params);
ibv_destroy_qp(qp);
}
// Only random QPs are stored
pool.add(qp);
}
//On connection request, a random QP is taken
ibv_qp * create_qp( ){
//Take random QP, which has a random QP number
struct ibv_qp * qp = Pool.get_random();
return qp;
}
Listing 2: Algorithm for randomization of QP numbers
7.2 Leveraging Existing IB Security Mecha-
nisms
M3 Hardware Counters in RNICs. Recent RNICs from
Mellanox (based on the mlx5 driver) support port and hard-
ware counters that are accessible by RDMA applications [26].
These counters enable precise monitoring of requests for de-
bugging, load estimation and error detection. For example,
resp_remote_access_errors could be used to monitor in-
valid requests that resulted in access errors. Attacks based on
ﬂooding a victim with malicious RDMA trafﬁc could be de-
tected using these counters. Even though attack detection does
not directly prevent attacks, it is an important countermeasure
to A3 , A5 , and A6 .
M4 Type 2 Memory Windows. IBA offers type 2 mem-
ory windows which bind a memory region to a speciﬁed QP
and prevent unauthorized memory access by other QPs. How-
ever, since IBA has no means of source authentication, an
attacker can mimic any RDMA request initiator and inject
RDMA write packets to corrupt memory of the victim host
by spooﬁng an RDMA packet which contains the memory
address and its rkey. Additionally, type 2 memory windows
have the disadvantage that the RNIC is required to store the
QP number and the corresponding rkey for each QP which is
allowed to access the window.
M5 Protection Domains. Memory regions can also be
protected using PDs, which prevents accesses to the mem-
ory across different memory domains by enforcing that each
memory region must be part of a single PD and that all QPs
can be only member of a single PD. Thus, only QPs within
the same PDs can access these memory regions. However,
in practice many RDMA applications use only a single PD
4288    30th USENIX Security Symposium
USENIX Association
//Initialization
RandomPool pool;
//Allocate an anchor buffer
void *anchor=mmap(0, PAGESIZE, PROT_READ|PROT_WRITE,
MAP_PRIVATE|MAP_ANONYMOUS, -1, 0);
//Create a pool of memory registration
// register the anchor buffer many times.
for(int i=0; i<POOL_SIZE; i++){
//Register a buffer
//Each registration can have a predictable rkey
ibv_mr * mr = ibv_reg_mr(PD,anchor,PAGESIZE,0);
pool.add(mr);
}
//On registration, a random registration is taken
// and reregistered to the requested address
// with requested length and access permissions.
ibv_mr * reg_mr(void* addr, size_t len, int access){
//Take random mr, which has a random rkey
struct ibv_mr * mr = Pool.get_random();
int flags = IBV_REREG_MR_CHANGE_TRANSLATION |
IBV_REREG_MR_CHANGE_ACCESS;
//After reregistration rkey will not change.
ibv_rereg_mr(mr,flags,PD,addr,len,access);
return mr;
}
Listing 3: Algorithm for randomization of rkey
for all connections and memory regions to reduce memory
overhead on the RNIC. For example, the RDMA connection
manager (librdmacm) by default uses a single PD for all
RDMA related operations such as connection establishment
and memory registration within a process.
7.3 Encryption and Authentication in RDMA
Protocols
Since the existing IBA security mechanism can be circum-
vented due to the lack of endpoint and packet authentication,
IBA could make use of encryption and authentication at any
layer in the protocol stack M6 . In the following, we discuss
the most relevant options.
RDMA-over-IPsec. RDMA protocols based on IP (e.g.,
RoCE) would allow the use of IPsec [7] for packet encryption
and authentication of end points. Recent NICs support IPsec
for RoCE trafﬁc (e.g., Mellanox ConnectX-6 DX [25]) by pro-
viding IPsec tunnels as a transport and simply encapsulating