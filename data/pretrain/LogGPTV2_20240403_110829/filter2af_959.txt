### SOP Bypass and UXSS on Internet Explorer: Further Adventures in a Domainless World

**Original Article:** [SOP Bypass/ UXSS on IE – More Adventures in a Domainless World](https://www.brokenbrowser.com/uxss-ie-domainless-world/)  
**Author:** [Manuel Caballero](https://twitter.com/magicmac2000)  
**Translator:** **Holic (知道创宇404安全实验室)**

Several months ago, we explored the issue of a domainless `about:blank` page in Microsoft Edge. This powerful `about:blank` document could essentially access any domain without restrictions. The vulnerability was recently fixed (CVE-2017-0002), and it is no longer exploitable. A similar issue occurred with `ActiveXObject/htmlFile` (now known as `htmlFile`), which was also recently patched (CVE-2017-0154).

**Note:** For more details, refer to the translated articles:
- [UXSS on Microsoft Edge – Adventures in a Domainless World](http://paper.seebug.org/143/)
- [SOP Bypass / UXSS on IE11 htmlFile](http://paper.seebug.org/211/)

If you are unfamiliar with these methods for achieving UXSS/SOP bypass, I recommend reading the previous articles, as the following content builds on that knowledge.

Today, our goal is to port the original Edge vulnerability to Internet Explorer (IE). Given Microsoft's historical lack of urgency in addressing IE vulnerabilities, this should be relatively straightforward. Let's start by examining the status of these vulnerabilities in IE.

### Creating a Domainless `about:blank` in IE

In the original vulnerability, we used a `data:url` to create a domainless blank page. How can we achieve this in IE? Once again, `htmlFile` comes to the rescue. Although the patch prevents us from setting arbitrary domains, we can still set it to an empty or domainless state.

To create a domainless `htmlFile`, we need a document that has been destroyed, meaning it no longer exists. How do we achieve this? While this might be a profound question for Neil deGrasse Tyson, I will try to provide a simple answer.

The idea is straightforward. We need to ensure the following steps occur in sequence:

1. Save a reference to the `iframe`'s `ActiveXObject`.
2. Instantiate `htmlFile` at least once (so IE does not destroy it).
3. Block the `iframe` thread (so IE does not get a chance to destroy our object).
4. Destroy the `iframe`'s document (using `document.open`).
5. Instantiate `htmlFile` again. It will now be domainless.

Steps 2 and 3 are crucial. Skipping step 2 means we won't have a usable reference, and skipping step 3 allows IE to destroy the object.

We've seen this thread-blocking technique before in the context of `htmlFile` (refer to the bottom of the previous article). It can be used to discover many vulnerabilities. The thread-blocking technique here is a highly visible `alert`. This way, we don't directly provide attackers with a tool, or at least they would need to find a way to make the PoC completely invisible. Let's look at the code.

### Domainless `htmlFile`

```javascript
// We will attack the iframe below
// 
// Render an iframe (we will destroy its document later)
document.body.insertAdjacentHTML('beforeEnd', '<iframe id="ifr" src="about:blank"></iframe>');
// Save a reference to its ActiveXObject
var ifr_ActiveXObject = ifr.contentWindow.ActiveXObject;
// Make sure IE does not invalidate our reference
new ifr_ActiveXObject("htmlFile"); // We don't even need to save this instance
// Block the iFrame so the ActiveXObject object is never destroyed
ifr.contentWindow.setTimeout('alert("Do not close me until the PoC finishes, please.");');
```

Notice how we use `setTimeout` to execute the blocking `alert`. This is because we still need to continue processing. If we directly `alert` in the `iframe`, it will block the UI and prevent further execution. Our goal is to destroy the `iframe`'s document while the blocking `alert` is still present. The `alert` prevents IE from destroying the `ActiveXObject`.

Now, we will destroy the `iframe`'s document and create a domainless `htmlFile`. If you are unfamiliar with `document.open`, think of this PoC as a `document.write`.

```javascript
// Destroy the iframe document
ifr.contentWindow.document.open();
// Instantiate a domainless htmlFile
var domainlessDoc = new ifr_ActiveXObject("htmlFile");
```

Great! Now we have a domainless `htmlFile`. Next, we need to load the URL we want to access into the `iframe`. For more details, refer to the [original adventures in a domainless world](https://www.brokenbrowser.com/uxss-edge-domainless-world/) (translated version available [here](http://paper.seebug.org/143/)). Essentially, we are loading any site into the `iframe` and then changing it to `about:blank` (which belongs to the `iframe`'s domain). From the domainless `htmlFile`, we can freely access this blank page, bypassing the Same-Origin Policy (SOP).

```javascript
// Inject the code in the victim's inner iframe
domainlessDoc.parentWindow.setTimeout("victim_iframe[0].location = 'javascript:alert(parent.document.domain);'");
```

Would you like to see a live demonstration? This example works directly in IE10 and IE11, but with minor adjustments, it should work in IE6 through IE11. I won't make those adjustments here, but feel free to reach out if you're interested.

**[Live PoC for IE10 or IE11](http://www.cracking.com.ar/demos/ieuxssdomainless)**

Bug hunters, I must remind you that there is still much to explore with `htmlFile`. I believe it is worth spending a rainy afternoon investigating! In my opinion, the best solution to fix all `htmlFile`-related bugs is to completely disable its instantiation from `iexplorer.exe`. Unfortunately, I don't have the full picture, but I suspect there must be a reason it still exists. Frankly, I'm not sure how developers would handle this. Once this object is instantiated, too many things go beyond IE's control.

```javascript
// If this code returns ACCESS_DENIED, attackers will lose an amazing weapon
new ActiveXObject("htmlFile");  // Do not allow this anymore!
```

---

This optimized version aims to make the text more clear, coherent, and professional while maintaining the technical details and the author's intent.