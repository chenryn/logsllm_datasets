title:Client Behavior and Feed Characteristics of RSS, a Publish-Subscribe
System for Web Micronews
author:Hongzhou Liu and
Venugopalan Ramasubramanian and
Emin G&quot;un Sirer
Client Behavior and Feed Characteristics of RSS, a Publish-Subscribe
System for Web Micronews
Hongzhou Liu Venugopalan Ramasubramanian
Emin G¨un Sirer
Department of Computer Science, Cornell University, Ithaca, NY 14853
{liuhz, ramasv, egs}@cs.cornell.edu
Abstract
While publish-subscribe systems have attracted much re-
search interest since the last decade, few established bench-
marks have emerged, and there has been little characteri-
zation of how publish-subscribe systems are used in prac-
tice. This paper examines RSS, a newly emerging, widely
used publish-subscribe system for Web micronews. Based
on a trace study spanning 45 days at a medium-size aca-
demic department and periodic polling of approximately
100,000 RSS feeds, we extract characteristics of RSS con-
tent and usage. We ﬁnd that RSS workload resembles the
Web in content size and popularity; feeds are typically
small (less than 10KB), albeit with a heavy tail, and feed
popularity follows a power law distribution. The update
rate of RSS feeds is widely distributed; 55% of RSS feeds
are updated hourly, while 25% show no updates for sev-
eral days. And, only small portions of RSS content typ-
ically change during an update; 64% of updates involve
less than three lines of the RSS content. Overall, this pa-
per presents an analysis of RSS, the ﬁrst widely deployed
publish-subscribe system, and provides insights for the de-
sign of next generation publish-subscribe systems.
1 Introduction
Publish-subscribe or pub-sub systems [1, 5, 6, 8, 9, 12, 13,
15] are gaining wide acceptance with applications spanning
information delivery, sensor monitoring, auction systems,
and air trafﬁc control. Previous research in this area has
focused on aspects, such as system architecture, event no-
tiﬁcation, and content ﬁltering algorithms, but has left a
fundamental issue untackled, namely what does the work-
load of a pub-sub system look like and how do clients use
pub-sub systems in practice?
This paper answers these questions by examining RSS,
the ﬁrst widely deployed pub-sub system, which is used for
disseminating Web micronews. The architecture of RSS
is quite simple: clients subscribe to a feed that they are
interested in and poll the feed periodically to receive up-
dates. RSS content is encoded in XML and displayed by a
feed-reader or an RSS-integrated Web browser on the client
host. Most news media support RSS feeds, and information
such as announcements on Web sites and updates to we-
blogs, is typically disseminated through RSS. Integration
into Web browsers has recently made RSS accessible to In-
ternet users and greatly increased the popularity of RSS.
In this paper, we study the feed characteristics and client
behavior in the RSS system using data collected through a
combination of passive logging and active polling. First,
we recorded a 45-day trace from the Department of Com-
puter Science at Cornell University. The trace consists of
158 different RSS users, who subscribe to 667 feeds in to-
tal. We use this trace to examine the characteristics of RSS
workload, such as the popularity of RSS feeds, and user
behavior, including polling rate and subscription patterns.
Second, we collected snapshots of RSS content by actively
polling every hour 99,714 feeds listed in the feed directory
syndic8.com. We use the feed snapshots to distill content
properties, such as feed size and format, and to analyze up-
dates in terms of update rate and amount of change.
Our study provides several insights, some expected and
a few surprising, into the characteristics of the RSS system.
First, we ﬁnd that the RSS workload bears resemblance to
the Web workload. The popularity of RSS feeds is heavy-
tailed and follows a Zipf distribution similar to Web ob-
jects [3]. The typical sizes of RSS feeds are comparable
to Web objects, although extremely large RSS documents
are rare; most RSS feeds range from 1KB to 10KB, with
a median of 5.8 KB, compared to a median of about 4 KB
for the Web [7].
Second, RSS content changes more often than Web ob-
jects, albeit with a wide distribution of update rates. Our
periodic snapshots show that 55% of RSS feeds update
within an hour, while 25% do not change at all during 84
hours of polling. Even though RSS content may change
rapidly, the update, surprisingly, affects only a tiny fraction
of the content; 64% of updates involve no more than three
lines of the XML. RSS clients can save a tremendous 93%
of bandwidth by fetching the “delta”s instead of the entire
feed during polling.
Finally, our study reveals interesting behaviors of RSS
users. We ﬁnd that over a third of the clients fetch feeds
manually and do not use automated RSS tools that poll and
check for updates periodically. Among the rest, over a half
of clients poll feeds hourly, which is the default setting of
USENIX Association
Internet Measurement Conference 2005  
29
Trace length
Number of clients
Number of feeds
Number of requests
45 days
158
667
61935
Table 1: Summary of User Traces: Clients are identiﬁed by a secure
cryptographic hash of their IPs.
most RSS readers. These behaviors indicate that enabling
RSS content servers to provide feed speciﬁc polling rates
to RSS readers is a more efﬁcient way to customize RSS
polling than expecting clients to conﬁgure their readers.
The rest of this paper is organized as follows: The next
section provides some background on pub-sub systems and
RSS. Section 3 describes our methods for studying the RSS
system, and Section 4 details the results of our study. Fi-
nally, we discuss the implications of our study and con-
clude in Section 5.
2 Background and Related Work
Publish-subscribe systems have raised considerable interest
in the research community over the years. In this section,
we provide some background on pub-sub systems, a brief
overview of RSS, and then summarize related research in
this area.
Publish-Subscribe Systems
Publish-subscribe is a distributed computing paradigm that
consists of three principal components: subscribers, pub-
lishers, and an infrastructure for event delivery. Subscribers
express their interest in an event or a pattern of events. Pub-
lishers generate events. The infrastructure is responsible
for matching events with the interests and sending them
to the subscribers that registered the interests. Based on
the way the subscribers specify their interest, pub-sub sys-
tems can be classiﬁed into two categories: topic-based and
content-based. In topic-based pub-sub systems, subscribers
specify their interest by subscribing to a feed, also known
as topic, channel, subject, or group. Each event produced
by the publisher is labeled with a topic and sent to all the
subscribers that subscribed to this topic. In other words,
publishers and subscribers are connected together by a pre-
deﬁned topic. The major disadvantage of topic-based sys-
tems is their expressiveness: all the topics are deﬁned by
the publisher and subscribers cannot further distinguish be-
tween events on a given topic. Content-based systems ﬁx
this problem.
In such systems, subscribers specify their
interest through event ﬁlters, which are functions of event
contents. Published events are matched against the ﬁlters
and sent to the subscribers if they match the speciﬁed ﬁl-
ters.
2.1 RSS
RSS is a Web content syndication system [14] concerned
with the propagation of XML documents containing short
descriptions of Web news. The XML documents are ac-
cessed via HTTP through URLs, and the URL for a partic-
Polling period
Number of feeds
Number of snapshots
Bytes received
84 hours
99714
3682043
57GB
Table 2: Summary of Active Polling: Feeds were polled in hourly
intervals.
ular XML document identiﬁes the RSS feed. Client appli-
cations called RSS readers check the contents of RSS feeds
periodically and automatically on the user’s behalf and dis-
play the returned results. Most feed readers poll RSS feeds
once per hour by default. Newer versions of RSS support
features such as TTL, SkipDay, and SkipHour, which help
RSS readers to decide when and how often to poll the feeds.
Nevertheless, most RSS providers post a rate limit to pre-
vent aggressive readers from overloading their servers.
The RSS system is a simple topic-based pub-sub system.
Publishers publish their news by putting it into an RSS feed
and providing the URL for the feed on their website. RSS
users subscribe to a RSS feed by specifying its URL to their
RSS readers. Thereafter, the RSS readers will poll the feed
periodically and display the updates to the users.
2.2 Related work
Previous work on pub-sub systems has focused on the de-
sign and implementation of efﬁcient event delivery mecha-
nisms. Isis [8], Linda spaces [5], T-space [9], SIENA [6],
Gryphon [12], TIBCO [13], Astrolabe [15], and Herald [4]
are examples of pub-sub systems proposed in the past. The
Joint Battlespace Infosphere project [1] is a similar effort
by the Air Force to provide a pub-sub based event notiﬁ-
cation and data repository system for very large scale de-
ployment. FeedTree [11] and CorONA [10] are recently
proposed systems designed to alleviate the load on RSS
feed providers by cooperative polling using a distributed
hash table for coordination. While a vast amount research
material on pub-sub systems are available, this is the ﬁrst
measurement study of a widely-deployed pub-sub system.
3 Measurement Methodology
We investigate the characteristics of the RSS system from
data collected through two techniques: passively logging
a 45-day user activity at the Department of Computer
Science, Cornell University and actively polling nearly
100,000 feeds every hour for 84 hours. The rest of this
section describes how we gathered the RSS data.
Passive Logging
We built a software tool for tracing RSS trafﬁc and installed
it at the network border of our department. Our depart-
ment is a medium-size academic organization with about
600 graduate students, faculty, and staff. The network is
topologically separated from transient users, such as un-
dergraduates in computer labs, who do not have dedicated
computers for long-running programs. We traced user ac-
tivity over a 45 day period, spanning from 22 March to 3
30
Internet Measurement Conference 2005
USENIX Association
s
t
s
e
u
q
e
R
f
o
r
e
b
m
u
N
100000
10000
1000
100
10
1
1
1000
s
t
n
e
i
l
C
f
o
r
e
b
m
u
N
100
10
α=0.50
α=1.37
10
100
1000
1
1
10
100
1000
Figure 1: Feeds Ranked by the Number of Requests: RSS popular-
ity follows a Zipf distribution.
Channel Rank
Figure 2: Feeds Ranked by the Number of Subscribers: RSS popu-
larity based on subscriptions also follows a Zipf distribution.
Channel Rank
May 2005, and recorded all RSS related trafﬁc. Table 1
provides a summary of the trace.
Our tracer software operates by capturing every TCP
packet, reassembling full TCP ﬂows, and logging the ﬂows
that contain an RSS request or response. For anonymity, we
obfuscate client IP addresses using a one-way hash salted
with a secret; this enables us to identify unique IP addresses
without being able to map them back onto hosts. Although
DHCP is used in our department, the assignment of IP ad-
dresses is decided by the physical network port used, and
is therefore quite static. Laptop users that connect to pub-
lic network ports may have different IPs over time, but we
estimate the number of laptop users to be low compared to
users with ﬁxed IPs. The tracer tool ran on a Dell dual pro-
cessor 4650 workstation, which was able to keep up with
packet capture at Gigabit line speed on the link from our
department to the campus backbone. We made ﬂow assem-
bly non-performance critical by performing it ofﬂine on the
captured packet stream and observed no packet drops dur-
ing the whole trace period.
Active Polling
We obtained a list of 99,714 RSS feeds from syndic8.com,
a directory that acts as a vast repository of RSS feeds. We
actively polled these feeds every hour for 84 hours and
recorded the results. While fetching the feeds, download
timeout was set to 20 seconds and a request was retried 4
times if the response was not received within the timeout
period. A successful download of the RSS content gives
a snapshot of the RSS feed at that time. A download may
fail due to high instantaneous load on the server, network
congestion, or stringent polling limits imposed by servers.
We fetched 3,682,043 snapshots in total; that is, about 36.9
snapshots per feed on average. The results of active polling
are summarized in Table 2.
4 Survey Results
We report on three broad aspects of the RSS system us-
ing the trace data and periodic snapshots. First, we ana-
lyze the characteristics of RSS feeds, such as the popular-
ity distribution, content size, format, and version of RSS
used. Second, we investigate how RSS feeds are updated;
in particular, we focus on the update intervals of RSS feeds,
the amount of change involved in updates, and correlations
between updates and feed size. Finally, we examine how
clients use RSS by studying their polling behavior and sub-
scription patterns. This section describes our ﬁndings in
detail.
4.1 Feed Characteristics
We ﬁrst present statistics on RSS workload and content.
We compute the popularity of RSS feeds based on the user
activity traces and derive content characteristics from the
snapshots of RSS feeds. We measure popularity in two
ways: based on the number of requests received for each
RSS feed and based on the number of clients who sub-
scribed to each RSS feed.
Feed Popularity
Figure 1 shows the popularity of RSS feeds ranked by
the number of requests received. The popularity follows
roughly a Zipf (power law) distribution with α parameter
1.37. The most popular feed (BBC news) receives 12,203
requests, while there is a long tail of many feeds that re-
ceive only a single request. Figure 2 plots the popularity of
RSS feeds based on number of subscribers observed in the
trace. The distribution of subscribers also follows a Zipf
distribution (α = 0.5). The small number of clients in our
trace makes the log-log plot diverge a little from the Zipf
line. Overall, RSS workload has characteristics similar to
Web workload, which is also known to follow heavy-tailed
power-law distributions [3].
Feed Format and Version
We ﬁnd that RSS is the widely-used format with more
than 98% (97720 feeds) of the feeds in RSS; a small 2%
(1994) of the feeds, however, use Atom [2], another XML
based format for disseminating Web micronews. We fur-
ther breakdown the RSS feeds according to their versions
and show the results in Figure 3. Version 2.0 is the most
popular format; more than 60% of RSS feeds published on
syndic8.com are in this format. Version 0.91 and 1.0 count
for about 17% each. Other versions(0.90, 0.93 and 0.94)
USENIX Association
Internet Measurement Conference 2005  
31
)
%
(
t
n
e
c
r
e
P
60
50
40
30
20
10
0
100
10
1
0.1
)
%
(
t
n
e
c
r
e
P
2.0
0.91
1.0
0.92
0.01
0
10
20
Figure 3: Distribution of RSS Version. Version 2.0 is the most pop-
ular version of RSS.
RSS Version
100
80
60
40
20
)
%
(
F
D
C
0
0
20
Figure 4: CDF of Feed Size: RSS feeds are typically small (less than
10 KB) with a median of about 5.8 KB.
40
60
Feed Size (KBs)
80
100