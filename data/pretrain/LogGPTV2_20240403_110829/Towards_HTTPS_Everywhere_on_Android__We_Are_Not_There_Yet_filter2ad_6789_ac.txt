### Adopting This Configuration

Among the applications analyzed, 1,038 allow their SSL/TLS traffic to be potentially intercepted. Another peculiar configuration involves apps using the domain `example.com` within their policy. We identified this configuration in a cluster of 41 apps. However, there is no need for an app to protect this domain, as `example.com` is clearly not relevant. Upon further investigation, we found that a total of 58 other apps use this domain, with 48 of them coming from 7 different clusters. These policies are often copied verbatim from the Android Developer website and StackOverflow. 

The original policies combine both the domain name and unique digests defined in some of the policies. Specifically, these policies define certificate pinning on `example.com` or with invalid digests formed by the character "B" repeated 44 times (see the Appendix for complete policies). There are two possible explanations for the adoption of these (useless) policies:
1. The developer wants to define a specific feature of the policy and copies an existing policy that contains both the requested feature and the unique configuration of certificate pinning.
2. The developer is looking for a certificate pinning implementation and copies the first available policy.

While copying security policies that contain "dummy" domain names such as `example.com` is not a security problem per se, it may create a false sense of security. The developer may wrongly believe that certificate pinning is correctly implemented, when in fact, it is not.

### Certificate Pinning

Certificate pinning enhances the security of communication by ensuring integrity, confidentiality, and authenticity. Implementing certificate pinning via the Network Security Policy (NSP) is now much simpler than it was in the past. However, only 102 applications enforce it through the policy. Among these, an interesting cluster consists of apps that implement pinning but then mistakenly override it. We identified 9 apps that specify one or more pin-sets but set the `overridePins` attribute to `true`, making the various pin-sets useless. It is likely that the developer is unaware of this, as they would not have specified any pin-set entry otherwise. We suggest that Android Studio (or other IDEs) should flag this kind of policy as potentially misconfigured.

### Invalid Attributes

We identified a group of apps defining attributes not specified in the official documentation. For example, two apps define the `usesCleartextTraffic` attribute in the policy, even though it is only valid in the old version of the NSP. Two other apps define the `cleartextTrafficPermitted` attribute within a wrong node. Additionally, one app declares the `hstsEnforced` attribute, which is not mentioned in the official documentation. However, the source code of the policy parser recognizes this attribute as valid, allowing developers to define HSTS for the WebView component. The concept of HSTS significantly overlaps with the cleartext aspect of the NSP. We investigated why this attribute is still available and found that older versions of WebView did not enforce the `cleartextTrafficPermitted` attribute but enforced HSTS instead.

### TrustKit

The cluster of policies defined using TrustKit consists of 53 apps. Among these, 10 define a reporting-endpoint for pinning failures, while 16 explicitly disable this feature. In total, 46 apps define certificate pinning within the policy.

### Remaining Apps

Our methodology based on clustering and targeted queries allowed us to systematically group a large portion of our dataset. However, 311 apps did not fit into any cluster. Manual inspection revealed:
- 98 apps with very unique policies in terms of domain nodes.
- 46 apps sharing a specific policy that does not use "wrapper nodes" like `pin-set` or `domain-config`.
- 44 apps specifying more than one custom certificate.
- 32 applications specifying a default "allow cleartext" for the entire app and a detailed list of domains and subdomains with the same policy.
- 21 applications with additional text (like comments) that is removed during parsing.
- The remaining apps defined very unique and complex policies, but from a security perspective, they do not represent anything special.

### Dataset Evolution

Starting from November 1, 2019, all apps must target at least API level 28, which means new apps will, by default, forbid cleartext. Our initial dataset was crawled before November, so we re-crawled the same 125,419 package names from April to June 2020. We were able to download 86.5% of the initial dataset, totaling 108,542 apps. Of the remaining apps, 15,749 were removed from the Google Play Store, and 1,128 moved from free to paid or introduced in-app purchases not available in our region.

The re-crawled apps are distributed as follows:
- 14.3% (15,531) target API level 29.
- 46.2% (50,191) target API level 28.
- 9.5% (10,351) target API level 27.
- 12.7% (13,795) target API level 26.
- 17.2% (18,674) target API level 25 or lower.

Unsurprisingly, the number of apps defining an NSP increased: 33.3% (36,165) now specify one of the two types of NSP. Among these, 65.5% (23,718) use the first version of the NSP through the `AndroidManifest`, while the remaining 15,492 opted for the newer version. Interestingly, 8.4% (3,045) use both versions of the policies.

Approximately 33% of the entire dataset (35,789 out of 108,542) enforced a default configuration that does not permit cleartext protocols. Out of these, 419 used the first version of the policy. The remaining 67% of the apps still configure an NSP that permits cleartext traffic. From this 67%, 32% (23,229) use the first version of the policy, while 58% (42,353) allow cleartext due to the default configuration dictated by the API level. Only 0.4% (349) of apps allow cleartext as a base configuration and also define a set of domains for encrypted connections.

These results highlight an ecosystem-wide problem: despite Google providing a simple and easy way to configure SSL/TLS for apps (the NSP) and changing defaults to force the use of cleartext protocols, a significant portion of apps still opt for plain and unencrypted networking protocols.

### Android Networking Libraries Adoption

We explored how Android apps and network libraries enforce these policies. The NSP is an XML configuration file, and it is up to the network libraries to properly honor and enforce what is specified. The official Android documentation states that third-party libraries are "strongly encouraged" to honor the cleartext setting. However, we believe that since the policy relates to security, network libraries should be forced to honor the policy, and failure to do so should be considered a vulnerability.

Next, we checked the official API, implemented by the `NetworkSecurityPolicy` class. This API appears limited, with only the `isCleartextTrafficPermitted()` method available. There is no API to query the remaining fields of the policy, making it unclear how network libraries are supposed to enforce them.

To explore how popular network libraries honor the policy, we built a dataset of the most used networking libraries, including `URLConnection`, `Robospice`, `HttpClientAndroid`, `AndroidAsync`, `Retrofit`, `BasicHttpClient`, `OkHttp`, `AndroidAsyncHTTP`, `Volley`, and `FastAndroidNetworking`. Except for `URLConnection`, which is the default HTTP library on Android, all others are external dependencies used by almost 30% of all apps published on the Google Play Store.

We developed an automatic framework to check whether a given networking library honors the policy defined in an app. The framework generates all possible combinations of a policy, combining all possible nodes, attributes, and representative values. It then creates an app that attempts to connect to an endpoint via HTTP and HTTPS using the library under test. The app is tested in three different environments: without MITM, with an attacker performing MITM, and with an attacker's custom CA added to the User KeyStore.

Our findings:
- `HttpClientAndroid`, `AndroidAsync`, and `AndroidAsyncHTTP` do not enforce the cleartext attribute, allowing HTTP even though the policy prohibits it.
- Nine of the ten libraries correctly honor certificate pinning and trusted anchors.
- `AndroidAsync` does not support NSP at all; the presence of a `domain-config` node breaks the network library, leading to an exception.

### Disclosure

We disclosed our findings to Google, emphasizing the misconfiguration of SSL pinning, which may give a false sense of security to inexperienced app developers. We proposed extending the Android Studio IDE with a linter for the NSP that checks for these misconfigurations and informs developers about potential risks. Google acknowledged the odd configuration and is considering the proposed changes.