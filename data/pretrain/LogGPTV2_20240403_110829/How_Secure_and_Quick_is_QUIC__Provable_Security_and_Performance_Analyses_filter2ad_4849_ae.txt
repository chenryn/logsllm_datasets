s,i
the key used to answer any encrypt(πq
and encrypt(πr
respectively;
c,j, ∗, ∗, ∗, ∗) queries
or
) queries returned
s,i, ∗, ∗, ∗, ∗)
for any ∗
and if p = c, then let πr
s,j be peer of πq
c,i. The following
conditions must be satisﬁed.
1) if Sj was corrupted, then no encrypt(πq
c,i, ∗, ∗, ∗, 1)
and encrypt(πr
s,j , ∗, ∗, ∗, 1) queries were made for
any ∗ after or during the same time period τt that Sj
was corrupted,
2) if Sj was corrupted, then no encrypt(πq
c,i, ∗, ∗, ∗, ∗)
s,j , ∗, ∗, ∗, ∗) queries were made for
and encrypt(πr
any ∗ after Sj was corrupted, and
3) no revealik(πq
c,i
)
and revealik(πr
s,j
)
) and revealk(πr
s,j
revealk(πq
c,i
the key used to answer any encrypt(πq
and encrypt(πr
respectively.
s,j, ∗, ∗, ∗, ∗) queries
or
) queries returned
c,i, ∗, ∗, ∗, ∗)
for any ∗
The above captures the attacks in which information
about groups of messages exchanged between the client and
the server is leaked without the adversary corrupting the
server party (1) before or (2) during the same time period
as attempting the breach as well as without (3) revealing
the initial and session keys ik and k. Thus, we capture a
slightly weaker notion of forward secrecy by restricting the
adversary to corrupt the appropriate server only after the
time period when the adversary attempts the breach. We
explain this subtlety further in Section VI-B.
• The IP spooﬁng of A Advips
Π (A) is the probability that
there exist oracles πq
c,i and πr
s,j such that at some time
period τt A makes a send(πr
s,j , m(cid:3)) query, πr
s,j does
not reject this query, Sj was not corrupted, m(cid:3) is not
an output resulting from any previous connection request
query (done via connect or resume queries), and the
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:06:38 UTC from IEEE Xplore.  Restrictions apply. 
c,i, πr
s,j
) query.
only other query A is allowed to make concerning πq
c,i
during τt is the connprivate(πq
This goal captures attacks in which the adversary wins if it
succeeds in having the server accept a connection request on
behalf of a client who either did not request connection to
that server or previously requested only an initial connection
but did not request any further connections in the same time
period. The adversary issues a connection query hoping it
gets accepted by the server, possibly preceded by the only
other allowed query in that time period: connection request
(connprivate) whose output it cannot see.
SECURITY DEFINITION. We say that a QC protocol Π is
(A), deﬁned as
QACCE-secure if its advantage AdvQACCE
Π (A)+Advch-corr
(A), is negligible
Advs-imp
(A)+Advips
Π
Π
Π
(in λ) for any polynomial-time adversary A.
B. Security Model Discussion
COMPARISON TO THE EXISTING MODELS. Existing models
do not ﬁt QUIC. Namely, we could not simply compose
key exchange [28] and authenticated encryption deﬁnitions
because QUIC has additional initial key and data exchange
stages. The work [11] extended the key exchange deﬁnition
of [28] to treat multiple stages of key exchange, but QUIC
does not achieve their deﬁnition. Moreover, even with their
ﬁx, the full security of QUIC will not follow from their
results because QUIC’s secure channel implementation is
not independent from the key exchange phases.
Therefore, similarly to recent analyses of protocols such
as TLS [8], [9] and EMV [29], [30] we chose to work with a
dedicated deﬁnition that assess the security of a protocol as
a whole. We followed the ACCE model for TLS but had to
modify it to accommodate for dealing with setting and using
the initial key, which was not present in TLS. Moreover,
QUIC handles novel security goals that TLS did not address,
such as some cryptographic protection for network packet
handling and protection against IP spooﬁng. We comment
on these in more detail below.
ON SECURING PACKETS. Any communication protocol that
does not run on top of TCP risks having its packets be
misordered and/or not delivered at all. QUIC, unlike TLS,
does not run on top of TCP but instead runs on top of
UDP, which does not provide any delivery guarantees. Since
QUIC adds cryptographic protection to some tasks usually
handled by TCP, it makes sense to capture this in our model.
Thus, in our security deﬁnition we allow the adversary to
intercept, delay, misorder, modify, and selectively drop any
communication between a client and a server. Our model
captures the fact that data in real
life is transmitted in
packets and that the adversary could in principle modify
such packet ﬁelds as source and destination IP addresses
and port numbers. Speciﬁcally, we give the adversary the
ability to specify the precise oracles associated with certain
parties as subjects of its queries to send and/or receive
messages of the adversary’s choice. Our security model does
not, however, capture adversaries that simply drop (or delay
for an unreasonably long time) all possible trafﬁc because
mitigating such attacks would require more sophisticated
protocols than those captured by our QC protocol model
that could detect and avoid failures.
ON SERVER IMPERSONATION. The server impersonation
goal in our model captures attacks in which the adversary
attempts to convince the client to set a session key that
is in any way inconsistent with the key set by the server.
That is, when using a secure protocol, a client knows that
the ﬁnal session key is shared only with the server the
client talked to and no one else. We do not capture attacks
of the same type with respect to initial keys in this goal.
This is because it may not be possible in general, since
the client may have to derive the initial key from the
semi-permanent scfg that could be used for many client
connection requests while it persists. This would allow, for
example, the adversary to replay the values of scfg to
clients that have not yet contacted the corresponding server,
which could lead to some clients establishing an initial key
without the server being aware of their connection request.
This weakness may also be relevant to TLS variants that
allow for stateless connection resumption, and we discuss it
in more detail in Section VIII. Although for simplicity we do
not to address this directly in our analysis, the requirement of
having a matching conversation captures the basic mandate
that
the communicating parties may need to agree not
only on the session key, but also on any other important
communication parameters such as congestion control, key
generation, encryption algorithms, etc. Thus, in principle,
this goal not only captures the traditional man-in-the-middle
attacks, but also more subtle attacks where the adversary
may be interested in degrading the communication security
and performance due to parties having inconsistent views
of session parameters. For example, when the two parties
disagree on congestion-avoidance parameters, a server may
end up sending content at much lower or higher rates than
requested by the client.
ON CHANNEL SECURITY. The channel corruption goal in
our model captures the expected goals of data authenticity
and conﬁdentiality with forward secrecy,
in a way that
is similar to the models used to analyze TLS but with
a few crucial additions that we detail below. The goal
of authenticity implicitly captures attacker’s misordering,
selectively delaying, and dropping certain content as well
as positive ACK attacks, all of which involve the adversary
sending something on behalf of a participating party. The
content of any packet that is dropped or delayed beyond a
certain time threshold (possibly dictated by the congestion-
avoidance parameters that may be optionally negotiated by
the communicating parties that we discuss below) could be
retransmitted unless its receipt is positively acknowledged by
the receiver. Thus, to prevent content delivery an adversary
224224
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:06:38 UTC from IEEE Xplore.  Restrictions apply. 
could in principle positively acknowledge the receipt of
packets on behalf of the receiver, which is captured by
the authenticity goal in our model. This security goal also
captures positive ACK attacks, which involve the adversary
or a rogue receiver sending acknowledgments for content
that was not actually received to cause the sender to send too
much content and overwhelm the resources of intermediate
and/or receiving network(s).
ON FORWARD SECRECY. A QACCE-secure protocol guar-
antees that the ﬁnal session keys are forward secure, i.e.
obtaining a server’s long-term secrets does not leak any
information about the data that was previously exchanged
and encrypted under these keys. However, the guarantees
with respect to the initial keys are weaker because, for
them, forward secrecy holds only if the server does not get
corrupted during the time period when the scfg that was
used to derive those keys is valid. This is because, in QUIC,
servers use the same scfg to derive initial keys with all
clients for the duration of that scfg’s validity.
Unlike in previous models used to study TLS, we also
impose some additional restrictions on the adversary that
prevent it from revealing the initial key and corrupting the
server during the same time period as its encryption queries.
This restriction is imposed on the adversary because initial
keys are not forward secure, as they could be derived using
semi-permanent values stored by the server in its corre-
sponding scfg, which is changed only once per time period,
during which it could be used for all client connection
requests in that period. Thus, to account for this weakness, it
is important that the adversary does not learn of any semi-
permanent state captured in the server’s scfg that could
be used for establishing initial keys during its lifetime. This
weakness may also be relevant to TLS variants that allow
for stateless connection resumption [14].
ON RE-ORDERING ATTACKS. As we mentioned before,
strong security for secure channel, in addition to data privacy
and authenticity, must guarantee security against re-ordering
attacks. In the ACCE model for TLS [8], [9] this is captured
by requiring the authenticated encryption scheme satisfy the
notion of stateful decryption [31]. That deﬁnition requires
each ciphertext delivered out of order to be rejected.
This notion is not suitable for QUIC analysis. In TLS,
if the adversary tampers with the packet order at the TCP
level, all re-ordered packets will be rejected as the receiver
will detect re-ordering by comparing the order with the one
indicated by the TLS-layer sequence numbers. Hence, the
notion of stateful decryption can be met. In QUIC, this is
impossible, because it does not run on top of TCP. The
receiver gets all information about the packet order from
the sequence numbers. The receiver in QUIC cannot reject
any packet, even if it “looks” out of order, until the end,
when the messages could be sorted and the proper order
could be determined. Thus, re-ordering the existing packets
is prevented in TLS but cannot be prevented in QUIC. Yet,
the ﬁnal order of the messages should still be correctly
determined by the receiver in QUIC. This difference calls
for different treatment in the security model.
For simplicity, we chose to capture re-ordering attacks
somewhat
implicitly. Note that for any protocol which
authenticates the sequence numbers (in QUIC the sequence
number is part of the authenticated header H), re-ordering
is enforced by the authentication security which is part of
encryption breach security. Namely, changing the legitimate
order of the packets will require the adversary to create
a valid ciphertext with a new sequence number, and this
constitutes a “forgery” of encryption in the current security
deﬁnition. It is possible to treat re-ordering attacks more
explicitly, but this would require making the model less
general and more involved as we will have to ﬁt the sequence
numbers into the syntax and security deﬁnition.
ON IP SPOOFING. Since it may not be possible to au-
thenticate a client, attacks where the adversary initiates
multiple connections to a server on behalf of honest clients
by spooﬁng its IP address are possible. Such DoS attacks
can lead to exhaustion of a server’s resources resulting from
prohibitively high rates of superﬂuous derivations of session
keys. Because TCP provides protection against such attacks
with its three-way handshake, they are not considered when
analyzing protocols that rely on TCP, such as TLS. However,
such attacks must be addressed for protocols that do not run
on top of TCP, such as QUIC, and the third goal in our
security model captures them. In the IP spooﬁng goal, the
adversary wins if it can trick the server into establishing a
session key with a client that did not request it.
VII. QUIC SECURITY ANALYSIS
the
cryptographic
core
associated-data
We state our main result about the security of QUIC.
Theorem 7.1: Consider
of
QU IC, as deﬁned in Section V, associated with the
base signature scheme SS = (Kgs, Sign, Ver), and an
authenticated-encryption with
scheme
AEAD = ({0, 1}λ, {0, 1}n, E, D). Then QUIC is QACCE
if SS is suf-cma and AEAD is ind-cpa- and auth-secure and
the SCDH problem is hard, in the random oracle model.
REMARK. We treat HMAC as the random oracle. This is a
very common assumption for security analyses. While it may
not be appropriate in every case, as cautioned in [32], the
standard use of HMAC with ﬁxed keys for the key derivation
function here seems ﬁne. There are two uses of HMAC in the
key derivation function, and it is important for the analysis
that the ﬁrst occurrence is the random oracle. The second one
may satisfy a weaker notion, but we treat it as the random
oracle for simplicity. It does not seem possible to get rid of
the reliance on the random oracle in the ﬁrst case though.
The Theorem follows from the following three lemmas.
Let (cid:10) be the number of servers (and clients), let d be
the maximum number of oracles corresponding to any party
225225
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:06:38 UTC from IEEE Xplore.  Restrictions apply. 
(i.e. the maximum number of connection sessions a party
can initiate), let T be the number of time periods and let Q
be the maximum number of decryption queries the adversary
does in ExpQACCE
.
Π
Lemma 7.2: For any efﬁcient adversary A there exist
efﬁcient adversaries B, C, D, E such that
Advch-corr
QU IC
(A) ≤ (cid:10)Advsuf
2
SS (B) + 2d(cid:10)
(D)
(E) .
+ 4(cid:10)dT QAdvauth
+ 4(cid:10)dT Advind-cpa
AEAD
AEAD
T Adv
(C)
SCDH
Lemma 7.3: For any efﬁcient adversary A there exist
efﬁcient adversaries B, C, D such that
Advs-imp
QU IC
(A) ≤ (cid:10)Advsuf
SS (B) + 2d(cid:10)
2
T Adv
(C)
SCDH
+ 7(cid:10)dT QAdvauth
AEAD
(D) .