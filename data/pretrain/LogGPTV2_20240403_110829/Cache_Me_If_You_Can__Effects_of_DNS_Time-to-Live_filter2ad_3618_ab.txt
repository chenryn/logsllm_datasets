### 1. Resolver Centricity Experiments

**Table 2: Resolver’s Centricity Experiments. Datasets available at [43].**

We observe three distinct TTLs in our experiments:
- **172800 s (48 hours)** for NS and address records at the root.
- **3600 s (1 hour) and 43200 s (12 hours)** at the .cl authoritative servers.
- **43200 s** when explicitly querying the name server for its own address record.

The choice of which TTL to use depends on the recursive resolver's implementation. According to RFC2181 [15], the client's TTL should take precedence, but this is not a strict requirement. Recursive resolvers may not always fetch the client's TTL value.

Response components are returned in different sections of the DNS message [33]:
- **Authoritative Section**: e.g., .cl’s NS record at the root.
- **Answer Section**: e.g., .cl’s NS record at .cl.
- **Additional Section**: e.g., A records attached to the NS response at .cl.

When the Authoritative Answer (AA) flag is set, answers from the child have higher priority. However, a server resolving a domain like `example.cl` may choose to use the authority and additional records provided by the parent, rather than contacting the child. For instance, a resolver can use the A record of `a.nic.cl` as provided by the Roots in Table 1.

This behavior is known as **resolver centricity** [13, 17, 18, 42]:
- **Parent-centric resolvers** use the TTL provided by the parent authoritative server (e.g., the Roots for .cl).
- **Child-centric resolvers** use the TTL provided by the child authoritative server.

RFC2181 clarified that child records (and their TTLs) should be prioritized, but did not mandate that resolvers query for them. DNSSEC validation requires fetching records from the child zone, but DNSSEC deployment is still incomplete today.

Resolvers using technologies like RFC7706 [29] or LocalRoot [20], or serving stale content [30], exhibit different caching behaviors. For example, resolvers implementing RFC7706 or LocalRoot transfer entire zones into a pseudo-authoritative server, reducing external queries. Resolvers serving stale content continue to send outgoing requests but serve expired answers if the NS records are unresponsive.

### 2. TTLs in the Wild with Uruguay’s .uy Top-Level Domain

We selected Uruguay’s ccTLD, .uy, due to its two very different TTL values:
- **172800 s (48 hours)** at the root.
- **300 s** in their own authoritative server (as of 2019-02-14).
- **120 s** for the server’s A record.

These differences allow us to study their effects on caching. We used RIPE Atlas [44, 45] to measure each unique resolver from ~10k probes distributed globally. Atlas Probes are spread across 3.3k ASes, with about one-third hosting multiple vantage points (VPs). Each combination of probe and unique recursive resolver is treated as a VP, resulting in approximately 15k VPs from about 9k Atlas Probes.

We queried the NS record of .uy and the A records of its authoritative server `a.nic.uy`, every 10 minutes for 2-3 hours. We obtained about 190k and 280k valid responses, respectively. Table 2 summarizes these experiments.

**Figure 1** shows the CDF of valid TTLs from all VPs for .uy. Despite some studies suggesting DNS TTL manipulation [48], we found it rare for TTLs shorter than 1 hour. The majority of responses follow the child's value:
- **90% of .uy-NS** are less than 300 s.
- **88% of a.nic.uy-A** are less than 120 s.

Thus, most resolvers are child-centric, preferring the TTL of the authoritative server (following RFC2181 §5.4.1 [15]). About 10% of resolvers appear parent-centric, following the 2-day TTL of the root zone. Some of these include OpenDNS public resolvers [39].

### 3. Second-Level Domain in the Wild

To confirm that client-centric TTL preferences extend beyond TLDs, we repeated the experiment for `google.co`, a popular second-level domain (SLD). The domain has two TTL values for its NS records:
- **900 s** from the parent servers (.co).
- **345600 s** from the actual authoritative servers `ns[1-4].google.com` (as of 2019-03-05).

**Figure 2** shows the CDF of observed TTLs for 16k VPs. About 70% of answers have TTLs longer than 900 s, indicating they come from the child authoritative server. About 15% of answers, many using Google public DNS, have TTLs of 21,599 s, suggesting TTL capping. About 9% of answers have a TTL of exactly 900 s, suggesting a fresh value from the parent authoritative server.

### 4. Confirming Client-Centricity with Passive Observations of .nl TLD

We studied passive data for the Netherlands zone, .nl, which has about 5.8 million domain names. The .nl ccTLD had four authoritative servers, each with multiple IP anycast sites. The A records in the parent zone (the root zone) have a TTL of 172800 s (2 days), while the children’s authoritative servers have a TTL of 3600 s (1 hour) for the same A records.

We examined query interarrivals for each resolver to classify them as parent- or child-centric. We found about 205k unique resolver IP addresses, providing 13× more VPs than our previous experiments. **Figure 3** shows the CDF of the number of queries for each group. More than half of the groups appear child-centric, sending more than one query over the two days, suggesting they follow the shorter child TTL. About 48% sent only one query during observation, possibly due to rotating between authoritative servers or not needing to handle multiple queries for names under .nl.

### 5. Effective TTLs for Servers Inside the Served Zone

We configured `ns1.subcachetest.net` as an authoritative server for the subzone `sub.cachetest.net`. We set the TTL of its NS record to 3600 s and its A record TTL to 7200 s. At t = 9 min, we renumbered `ns3.subcachetest.net`, changing its IP address to a different EC2 VM. This new VM also serves the zone but with changes to the records, allowing us to determine how caching works in between.

We queried the AAAA record of `PROBEID.sub.cachetest.net` from all RIPE Atlas VPs every 600 s, watching for the returned answer to change. The results show that most recursives require both fresh NS and A records, refetching even valid A records when the NS record expires.

### 6. Conclusion

Our experiments demonstrate the complexity of TTLs in different DNS implementations. Most resolvers are child-centric, preferring the TTL of the authoritative server. Parent-centric resolvers, while present, are less common. Understanding these behaviors is crucial for optimizing DNS performance and ensuring accurate and timely resolution of domain names.