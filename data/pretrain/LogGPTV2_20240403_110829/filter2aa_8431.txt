# shabaKernel
Category: Reversing, 350 points
## Description
> This binary is not an elf. So what is it?
> 
> Load the .ko file and find out...
> 
> Use the image:
> 
> http://uec-images.ubuntu.com/releases/focal/release-20201210/
> 
> Good luck!
Two binary files were attached.
## Solution:
Let's check the binary files we've received:
```console
root@kali:/media/sf_CTFs/shabak/shabaKernel# file app.magen
app.magen: data
root@kali:/media/sf_CTFs/shabak/shabaKernel# file loader.ko
loader.ko: ELF 64-bit LSB relocatable, x86-64, version 1 (SYSV), BuildID[sha1]=dd09ff411b9362d587cf727385d072f0f3a03565, not stripped
```
So we have at least one ELF - let's check it in Ghidra:
```c
undefined8 init_module(void)
{
  __fentry__();
  __register_binfmt(magen_fmt,0);
  return 0;
}
void cleanup_module(void)
{
  unregister_binfmt(magen_fmt);
  return;
}
// ...
undefined8 load_magen_binary(long param_1)
{
  long lVar1;
  long lVar2;
  ulong uVar3;
  long lVar4;
  undefined8 *puVar5;
  undefined8 uVar6;
  ulong uVar7;
  uint uVar8;
  long in_GS_OFFSET;
  uint local_44;
  long local_40;
  long local_38;
  __fentry__();
  local_38 = *(long *)(in_GS_OFFSET + 0x28);
  local_40 = 0;
  if (8  0xFFFFFFFFFFFF:
                        continue
                    end = int(m.group(2), 16)
                    sys.stderr.write( "start = " + str(start) + "\n")
                    mem_file.seek(start)  # seek to region start
                    chunk = mem_file.read(end - start)  # read region contents
                    output.write(chunk)
                else:
                    sys.stderr.write("\nPASS : \n" + line+"\n")
if __name__ == '__main__': # Execute this code when run from the commandline.
    try:
        assert len(sys.argv) == 2, "Provide exactly 1 PID (process ID)"
        pid = int(sys.argv[1])
        print_memory_of_pid(pid)
    except (AssertionError, ValueError) as e:
        print ("Please provide 1 PID as a command-line argument.")
        print ("You entered: %s" % ' '.join(sys.argv))
        raise e
```
We copy what we need to the virtual machine:
```console
root@kali:/media/sf_CTFs/shabak/shabaKernel# scp loader.ko app.magen PI:EMAIL:/home/ubuntu/magen
loader.ko                                                                                                                           100% 8272     3.7MB/s   00:00
app.magen                                                                                                                           100% 1561     1.0MB/s   00:00
```
Run it:
```console
ubuntu@cloudhost:~/magen$ sudo python3 dump_mem.py 1280
PID = 1280
OK :
7ffff7ffa000-7ffff7ffc000 rw-p 00000000 00:00 0
start = 140737354113024
OK :
7ffff7ffc000-7ffff7ffd000 rwxp 00000000 00:00 0                          [stack]
start = 140737354121216
OK :
7ffff7ffd000-7ffff7fff000 rw-p 00000000 00:00 0                          [stack]
start = 140737354125312
OK :
7ffffffde000-7ffffffff000 rw-p 00000000 00:00 0
start = 140737488216064
PASS :
ffffffffff600000-ffffffffff601000 --xp 00000000 00:00 0                  [vsyscall]
```
And we got the flag:
```console
ubuntu@cloudhost:~/magen$ strings memory.bin | grep -i flag
FLAG{magen_velo_yeraELF}
This is not the right flag, Buddy
Good work my friend, go submit the flag
```