> Author:jkgh006@敏信安全审计
## DWR框架简介
DWR是一个远程web调用框架，利用该框架使得Ajax开发变得简单。利用DWR可以在客户端使用JavaScript直接调用服务器端的Java方法，并返回值给JavaScript；就好像直接在本地客户端调用一样(DWR根据Java类来动态生成JavaScript代码)
参考链接：
## 前言
很多人私下问过我，如果现实审计中碰到dwr框架，应该怎么去构造payload，怎么根据流程分析出结果，所以这次我们只讲dwr在实际应用场景的审计和防御思路
## 默认配置&&安全
根据官网给出来的默认配置如下web.xml
        DWR (Direct Web Remoting)
        A Simple Demo DWR
            org.directwebremoting.servlet.DwrListener
            dwr-invoker
            DWR Servlet
            Direct Web Remoter Servlet
            org.directwebremoting.servlet.DwrServlet
                fileUploadMaxBytes
                25000
                debug
                true
                accessLogLevel
                runtimeexception
                activeReverseAjaxEnabled
                true
                initApplicationScopeCreatorsAtStartup
                true
                jsonRpcEnabled
                true
                jsonpEnabled
                true
                preferDataUrlSchema
                false
            1
            dwr-invoker
            /dwr/*
            index.jsp
            index.html
上面的配置效果，再加上程序开发者的拿来主义习惯，可能会产生两个大问题
  1. 没有关闭debug
  2. dwr的访问目录可被猜测，这里给出的/dwr/ (如果是给用户展示的部分本身就是一个dwr应用，那么就没有必要改写次路径，如果是给第三方调用类似webservice那种，就很有必要修改)，官方默认配置还有一个/exec/
以上两个组合访问效果如下：
里面的每一个接口都可以通过浏览器抓包获取，常规意识下这些第三方调用未授权的概率几乎可以达到百分之百
## DWR框架讲解
为了方便对dwr的每一种类型进行测试，我们简单的编写了一些测试类
#### 简单类型参数
首先看commontest目录下，这里我们主要对int和string参数进行测试
    package com.example.dwr.commontest;
    public class CommonParams {
        public static String stringTest(String data) {
            return data;
        }
        public static int inTest(int data) {
            return data;
        }
    }
在dwr.xml中加入
这样在js调用层我们可以通过/dwr/interface/commonparams.js的commonparams变量调用java层编写的函数
例如index.jsp:
      dwr common test
访问效果和http包如下
根据上下文判断dwr框架写法其实有一定的规律
上面调用的stringTest方法，如果我们调用的是inTest，只需要改这几个地方，数据类型定义成为int即可
    POST /dwr/call/plaincall/commonparams.inTest.dwr HTTP/1.1
    Host: localhost:8080
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:56.0) Gecko/20100101 Firefox/56.0
    Accept: */*
    Accept-Language: en-US,en;q=0.5
    Content-Type: text/plain
    Referer: http://localhost:8080/
    Content-Length: 212
    Cookie: UM_distinctid=160cb8347c532e-02170ecaf6aeb-4c322f7c-1fa400-160cb8347c662d; CNZZDATA1261218610=1741751127-1515241945-%7C1515241945; JSESSIONID=DBEB32C68B89CE0D8815DB6ADF207376; DWRSESSIONID=J2YAzcntFgQYepoW~g!fuZdxeAR6Qy4ho9m
    X-Forwarded-For: 127.0.0.1
    Connection: close
    callCount=1
    nextReverseAjaxIndex=0
    c0-scriptName=commonparams
    c0-methodName=inTest
    c0-id=0
    c0-param0=int:1234
    batchId=0
    instanceId=0
    page=%2F
    scriptSessionId=J2YAzcntFgQYepoW~g!fuZdxeAR6Qy4ho9m/JZRRo9m-dCmbaYdn5
#### 数组类型参数
对array参数进行测试
    package com.example.dwr.arraytest;
    import org.apache.commons.lang.StringUtils;
    public class ArrayParams {
        public ArrayParams() {
        }
        public String iniArrayTest(int[] data) {
            String template = "";
            String tmp = "";
            for(int i=0;i
例如arrtest.jsp:
        dwr arr test
访问和请求包如下：
post包的结构相对于普通类型是有所变化的，照猫画虎修改为strArrayTest函数
    POST /dwr/call/plaincall/arrayparams.strArrayTest.dwr HTTP/1.1
    Host: localhost:8080
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:56.0) Gecko/20100101 Firefox/56.0
    Accept: */*
    Accept-Language: en-US,en;q=0.5
    Content-Type: text/plain
    Referer: http://localhost:8080/arrtest.jsp
    Content-Length: 351
    Cookie: UM_distinctid=160cb8347c532e-02170ecaf6aeb-4c322f7c-1fa400-160cb8347c662d; CNZZDATA1261218610=1741751127-1515241945-%7C1515241945; JSESSIONID=6B9103592284CBB4A787F99E8C21DE4A; DWRSESSIONID=J2YAzcntFgQYepoW~g!fuZdxeAR6Qy4ho9m
    X-Forwarded-For: 127.0.0.1
    Connection: close
    callCount=1
    nextReverseAjaxIndex=0
    c0-scriptName=arrayparams
    c0-methodName=strArrayTest
    c0-id=0
    c0-e1=string:a
    c0-e2=string:b
    c0-e3=string:c
    c0-e4=string:d
    c0-param0=array:[reference:c0-e1,reference:c0-e2,reference:c0-e3,reference:c0-e4]
    batchId=1
    instanceId=0
    page=%2Farrtest.jsp
    scriptSessionId=J2YAzcntFgQYepoW~g!fuZdxeAR6Qy4ho9m/WNnUo9m-uxKcm4x0i
#### 对象类型参数
    package com.example.dwr.objecttest;
    public class ObjectTest {
        public ObjectTest() {
        }
        public String addUser(UserBean user){
            return "Name:"+user.getName();
        }
    }
上面可以看出来传递的是一个java的bean对象，代码简单编写如下
    package com.example.dwr.objecttest;
    public class UserBean {
        public String getName() { return name; }
        public void setName(String name) { this.name = name; }
        private String name;
    }
此时我们就要用到dwr中的convert，作用就是通过Bean Converter将javascript变量user转变成java的UserBean类型
dwr.xml添加如下配置：