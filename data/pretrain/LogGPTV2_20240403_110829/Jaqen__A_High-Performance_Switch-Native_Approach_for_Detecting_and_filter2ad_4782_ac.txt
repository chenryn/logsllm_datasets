tion module to be as compact as possible while having good
coverage of attacks. Achieving both requirements is challeng-
ing as ﬁtting many detection algorithms (e.g., [15, 21–27])
for coverage in the switch is infeasible. Instead, we observe
that recent advances in universal sketching [19, 20, 55] for
network monitoring can play a crucial role in designing a
general DDoS detector. Conceptually, universal sketches are
a class of approximation algorithms that can simultaneously
estimate a range of network statistics supported by custom
algorithms, e.g., heavy hitters [20, 27, 53, 56, 57], distinct
ﬂows [20, 58, 59], and entropy [60–62]. More precisely, a uni-
versal sketch is able to estimate any aggregated functions from
a data stream that are asymptotically bounded by the L2 norm
of the data [19], while recent switch-based approaches only
support counting/aggregating ﬂow sizes based on Count-Min
sketch [30]. We summarize the major differences between
Poseidon’s monitor [3] and Jaqen’s detector in Table 2.
To bring universal sketching into ISP-centric detection,
we design an approach that has data plane and control plane
components:
Switch layer: “Future-proof” universal sketches. As
shown in Figure 3, the switch layer contains multiple uni-
versal sketches, complemented by a signature-based detector.
Together, Jaqen has the ability to estimate a variety of current
and possibly unforeseen metrics that are relevant to the attacks
(i.e., future-proof), laying the foundation for accurate attack
detection. For instance, the entropy value changes in terms of
the srcIP and dstIP are a strong indicator of an ongoing attack;
the difference between the numbers of DNS requests and
responses hints a DNS-related attack. It is worth noting that
some attack-related metrics that require cryptography data
(e.g., Malformed SSL Flood) or require complete payload
parsing (e.g., Zorro attack [63]) are outside our scope due to
USENIX Association
30th USENIX Security Symposium    3833
Mitigation API
RateLimit(identity,rate)
ExactBlockList(identity,size)
ExactAllowList(identity,size)
ApproxBlockList(identity,config)
ApproxAllowList(identity,config)
ActionAndTest(action,List(predicate))
HeaderHashAndTest(identity,action)
UnmatchAndAction(action,List(predicate))
KVStore(key,value,size)
ReportCtr(identity,type)
Recirculate(identity,type)
Switch Design
SRAM + meters
SRAM + TCAM
SRAM + TCAM
LRU lossy hash table
Blocked Bloom ﬁlters
Description
Rate limiter for ﬂows that match certain rules
Blocklist to drop packets that match certain rules
Allowlist to allow packets that match certain rules
Approximate block list to drop packets
Approximate allow list to pass packets
Perform a packet action and test later w/ predicates BF + action/control
Perform header ﬁeld hash and test w/ action
Find unmatched predicates and perform an action
A high-performance small key-value store
Update a ﬁltering list via controller
Update a ﬁltering list via packet recirculation
Cookie + action/control
CBF + action/control
Hash-based KV store
Mirror to CPU
Mirror and recirculate
Table 3: Jaqen’s Mitigation API.
Figure 3: Switch detection design w/ universal sketches.
hardware limitations and the ISP-centric view.
While a canonical implementation of universal sketch is al-
ready more resource-efﬁcient than a combination of multiple
custom algorithms [20], we further reduce the resource foot-
print when there are multiple instances of universal sketches.
In particular, our implementation follows the same trajectory
of parallel efforts in optimizing universal sketching for other
hardware domains [27, 64–66]. The full discussion is outside
the scope of this paper; but at a high-level, we include the fol-
lowing three optimizations: (1) Reducing hash computations
by consolidating short hashes into long hashes and reusing
hashes across universal sketch instances [65]. (2) Reducing
memory accesses by updating only one instance of Count
Sketch (CS) [31] in universal sketch [64]. We reduce these
hashes and memory accesses by updating only one CS per
packet. (3) Reducing ﬂow key storage space by using a two-
way hash table as a cache, similarly as [66]. The ﬂow keys
are used to identify elephant ﬂows or heavily changed ﬂows.
By applying these optimizations, the resource usage of the
universal sketching component has been signiﬁcantly reduced
by more than 50% as shown in the evaluation Table 5.
Control layer: Detection API and logic. Now we have the
ability to obtain attack-related sketch counters from the switch
Figure 4: Simpliﬁed detection API and logic examples.
layer. These counters are reported to the control layer for
ofﬂine metric estimation and running detection logic, as de-
picted in Figure 3. In the control layer, we need to ﬁgure
out how to use these metrics for detection, e.g., what is the
reporting mode (controller pulling or self reporting), what are
the needed metrics, and how to realize a detection logic with
supplied metrics.
To that end, we design an API with Query(proto,func,mode
,freq) to precisely obtain the metrics for detection, where
proto deﬁnes the queried protocol, func deﬁnes the func-
tion of the metric, mode deﬁnes the reporting mode (e.g.,
self-triggering with a threshold), and freq is the reporting fre-
quency. For example, we can query the UDP srcIP heavy ﬂows
above a 0.5% threshold every 5 seconds in a self-reporting
mode. After conﬁguring the way to obtain metrics, we need
to implement a detection logic to make detection decisions,
such as detection for UDP ﬂood and DNS ﬂood (Figure 4).
5 Performant and Flexible Mitigation
We demonstrate the ﬂexibility of Jaqen by providing a ﬂexible
P4-based mitigation API to construct switch-native mitiga-
tion strategies. In particular, in an ISP-scale, directly adopting
standard server-based mitigation methods will not work. In-
stead, we need to convert a mitigation strategy into a switch-
optimized one. To achieve this, we observe that mitigation
strategies can be abstracted with three components that are
interacting with each other, as shown in Figure 5. For each
component, we design a set of mitigation functions that are
3834    30th USENIX Security Symposium
USENIX Association
Programmable ParserSYNFINDNSNTP…Special counters +Signature  Detector Volume estimation UniversalSketch+++++Sketch  Instances SrcIPSketchDstIPSketchSrcPortSketch DstPortSketch1KB metadata = threshold:report_to_ctr( )def DNSFlood(threshold):try:while1: // unmatched DNS repliesdiff=Query ( udp, dns, 0, 5 )if diff >= threshold:report_to_ctr( )defQuery( proto, func, mode, freq):try: // connect to switchreceived = conn_mgr.init( )sleep ( freq)ifmode == 0:  // pulling modep = read_registers( proto )metric= offline ( p, func)elifreceived == 1:r = buffer_triggers( proto )metric = offline( p,func)reset ( )return metric exceptError:print( “Switch access failed!” )dices is a common practice, it may bring additional errors.
• RateLimit(identity,rate) maintains a rate limiter table
with ﬂow identities and user-deﬁned rates. We use the built-
in meter primitive in P4 to mark the ﬂows with different col-
ors and perform different rate controls based on the colors;
e.g., green→no action, yellow→user rate, and red→drop.
2. Analysis: In the ﬁltering step, some trafﬁc has been marked
as “allowed” or “blocked” and will bypass other functions
in the switch for forwarding or dropping. For the unmarked
trafﬁc, we need to analyze whether the trafﬁc is benign or not
using designed four analysis functions.
• ActionAndTest(action,List(predicate)) is a method to
perform an action on a packet and analyze if succeeding
packets match a list of pre-deﬁned predicates. The sup-
ported actions here are switch embedded actions such as
drop and forward. For instance, we use this API call to im-
plement a best-practice mitigation function of intentional
SYN drop (DropFirstSYN) [28]. This function is to ﬁlter
out the malicious SYN trafﬁc and prevent the switch being
directly exploited as a reﬂector/ampliﬁer using spoofed sr-
cIPs. Speciﬁcally, for every SYN packet, the switch checks
if it is a ﬁrst-time SYN or a retransmitted SYN within 5
seconds (predicates). If the SYN is a ﬁrst-timer, a drop ac-
tion will be performed; the packet will be allowed to pass
otherwise.
• HeaderHashAndTest(identity,action) deﬁnes a method to
compute hashing on the ﬂow identify (e.g., 5-tuple) of a
packet and perform a test action with the hash. For example,
the switch can produce a “cookie or nonce” by hashing the
5-tuple header ﬁelds and constructing a reply packet with
the nonce. As a case study, we will use this primitive to
design two types of switch-optimized SYN proxy/cookie
mechanisms in the later “Case study” section.
• UnmatchAndAction(List(predicate),action) implements a
function to test if a list of predicates are matched and
then perform a packet action based on the matching
result. Besides drop and forward, two additional ac-
tions are supported: insert to/delete from a probabilis-
tic structure—counting bloom ﬁlter (CBF) [32]. In par-
ticular, we can use this function to realize an effec-
tive mechanism [23] to mitigate ampliﬁcation attacks
following speciﬁc protocols (e.g., DNS, NTP, SNMP).
When some predicates are matched — protocol matches
, packet type matches
, error ﬁeld matches , the packet iden-
tity will be inserted to the CBF as a valid DNS request. If
a DNS reply matches 
and  in the CBF, the packet identity will be deleted
from the CBF. Any succeeding unmatched DNS replies
(above a threshold) will perform action drop.
• KVStore(key,value,size) provides a small efﬁcient key-
value store using hash-based exact-match tables [67, 68].
Figure 5: Abstraction of mitigation strategies.
optimized for switch resources based on state-of-the-art ap-
proaches. In total, we provide 11 building blocks to construct
a broad range of mitigation strategies for the switches in ISPs.
1. Filtering: In a mitigation strategy, we ﬁrst need to pro-
vide functions to block, rate limit, or allow packets that meet
certain rules. For instance, a blocklist can drop packets from
some malicious source IPs while an allowlist can directly pass
the trafﬁc from certain users (e.g., VIPs). In this component,
we provide ﬁve functions as the following:
• ExactBlockList/ExactAllowList(identity,size) are two
types of lists to drop or allow packets that exactly match a
ﬂow identify (e.g., srcIP, 5-tuple, or subnet). For example,
blocking any trafﬁc from srcIP 10.0.0.1. We encapsulate
the exact match tables provided by the switch hardware to
construct these two functions. Due to the switch memory
constraint, the size of rules is usually limited to O(10K) per
processing stage in switch pipelines. These exact lists are
particularly useful when a small set of “VIPs” or “malicious
clients” are known.
• ApproxAllowList/ApproxBlockList(identity,config) pro-
vide approximate allow- and blocklists. They offer the same
functionality as ExactAllowList/ExactBlockList(identity,
size) but can scale to O(10M) rules (depends on the conﬁg)
if some approximation errors are acceptable. While errors
are unavoidable, our design goal is not to let the errors af-
fect legitimate ISP users. We achieve so by leveraging the
features of the approximate data structures: (1) In the ap-
proximate allowlist, we use blocked bloom ﬁlters (w/ one
hash function per block) to save switch resources. Bloom
ﬁlers will only create false positives that may allow a small
portion of attack trafﬁc to pass through, while the legiti-
mate connections are always allowed. (2) Similarly for the
approximate blocklist, we design an LRU-alike lossy hash
table in the switch, leading to only false negatives from the
structure. The false negatives in a blocklist mean that some
attack trafﬁc might not be blocked while legitimate trafﬁc
(not on the list) remains unaffected.
Hardware constraints: To implement the above struc-
tures, we need to store ﬂow identities in register arrays us-
ing switch SRAM. The size of a register is upper bounded
by a certain limit (e.g., 64-bit). To store ﬂow identities
that are larger than this limit (e.g., 5-tuple), we need to use
multiple register arrays to store them, or replace the actual
identities with hash values. While using hashed ﬂow in-
USENIX Association
30th USENIX Security Symposium    3835
Switch PipelineActionAndTestHeaderHashAndTestUnmatchAndActionBlockListAllowListRateLimitReportCtrRecirculateFilteringAnalysisUpdateCase study: Design switch-native SYN proxy using the
API. SYN Proxy/Cookie is a best-practice method to miti-
gate SYN ﬂood attack using a server as a proxy for shielding
malicious SYN trafﬁc. The typical workﬂow of a SYN proxy
can be described as: (1) When a SYN is received, the proxy
server generates a unique cookie [69] with 5-tuple and adds
it to the sequence number (seq. no.) header ﬁeld of the
corresponding SYN-ACK reply. (2) When a legitimate client
receives the SYN-ACK it will acknowledge back an ACK
packet with cookie+1 in its seq. no.; Otherwise, an attacker
would not send the cookie back. (3) Once the proxy veriﬁes
the correctness of the cookie, it will record session informa-
tion (e.g., seq. no. difference) and construct a new SYN to
the designated destination to establish the connection. The
succeeding packets will go through the proxy to translate the
seq. no. in order to continue the original TCP handshake.
Unfortunately, the current switch-based SYN proxy that
directly implements the above server-based design (e.g., Po-
seidon [3]) has scalability issues when there is a large number
of legitimate connections. They maintain seq. no. transla-
tion data for each legitimate connection using a single hash
table (e.g., size 65536). Inevitably, using a single hash ta-
ble for per-connection state storage would break the cor-
rectness of many legitimate connections due to hash colli-
sions. For instance, keeping 65536 legitimate connections on
a hash table of size 65536 has expected 24109 collisions.4
To address this issue, we design two SYN proxy modes with
HeaderHashAndTest(identity,action) to perform a “cookie”
operation on designated header ﬁelds with hashing and send
back a response packet (e.g., SYN-ACK) to “test” if the
client is legitimate. Note that in our design, one can use
ApproxAllowList(identity,config) to record a large number
of legitimate identities that have passed the tests. The approx-
imation errors will not affect legitimate trafﬁc since Bloom
ﬁlters do not create false negatives.
• SYNProxyMode1 as depicted in Figure 6(a): (a) When the
switch receives a SYN, it will generate a cookie to be added