all regex operators, we have to put the list of keywords inside a group. Here we used a
noncapturing group for efficiency. When using this regex as part of a larger regular
auaap ueo nos os pras dnou Suundeo t asn on suem Keu no. uoissudxa
whether the regex matched a keyword or something else.
We can optimize this regular expression when using regular expression flavors that
support atomic grouping. When the first regex from the Solution section encounters
the word interesting, the in> alternative will match. After that, the word boundary at
the end of the regex will fail to match. The regex engine will then backtrack, fruitlessly
attempting the remaining altermatives.
By puting the alternatives inside an atomic group, we prevent the regex from back-
tracking after the second \b fails to match. This allows the regex to fail faster.
Because the regex won’t backtrack, we have to make sure no backtracking is required
to match any of our keywords. When the first regex encounters inline, it will first
match in. The second word boundary then fails. The regex engine backtracks to match
inline, at which point the word boundary, and thus the whole regex, can find their
up paueup am dnou ooe au um xuom 1uom uoeaxpeq stu asneag qeu
inline| inherited) from the first regex into in(? :1ine |herited) ?> in the second regex.
The first regex attempts to match in, inline, and inherited in that order, because
altermation is eager. The second regex matches inline or inihexited if it can because
the quantifier is greedy, and matches in otherwise. Only after inline, inherited, or
In has been matched will the second regex proceed with the word boundary. If the
word boundary cannot be matched, there is no point in trying any of the other alter-
natives, which we expressed with the atomic group.
Variations
Matching just the keywords may not be sufficient. The form file format won’t treat
these words as reserved keywords when they appear in single-quoted strings. If the
form contains a control that has a caption with the text *The end is near,” that will be
stored in the file this way:
410 | Chapter 7: Source Code and Log Files
---
## Page 427
object Button1: TButton
Caption = *The end 1s near*
end
In this snippet, the second occurrence of end is a keyword, but the first occurrence is
not. We need a more complex solution if we only want to treat the second occurrence
of end as a keyword.
There is no easy way to make our regex match keywords only when they appear outside
of strings. But we can easily make our regex match both keywords and strings.
b(end|in|inline|1nherited|item|object)\b|′[^′\r\n]*(?:**[^’\r^n]*)*
Regex options: Case insensitive
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
When this regex encounters a single quote, it will match the whole string up to the next
single quote. The next match attempt then begins after the string. This way, the regex
does not separately match keywords when they appear inside strings. The whole string
will be matched instead. In the previous sample, this regular expression will first match
object, then The end Is near', and finally end at the end of the sample.
To be able to determine whether the regex matched a keyword or a string, we're now
using a capruring group rather than a noncapruring group for the list of keywords.
When the regex matches a keyword, it will be held by the first (and only) capturing
group. When the regex matches a string, the first capuring group will be blank, as it
didn’t participate in the match.
If you'll be constructing a parser as explained in Recipe 3.22, then you will always
combine thekeyword regex with the stringregex and theregexesfor all theothertokens
in the file format you're dealing with. You will use the same technique as we used for
keywords and strings here. Your regex will simply have many more altermatives to cover
the whole syntax of your fle format. That willautomatically deal with keywords ap-
pearing inside of strings.
When matching keywords in other file formats or programming languages, the word
boundaries may not be sufficient. In many languages, $end is a variable, even when
end is a keyword. In that case, the word boundaries are not sufficient to make sure that
you're not matching keywords that aren’t keywords.  matches berween the dollar
sign and a letter.
You can solve this with lookaround.  if
you want a regex that does not depend on the case insensitivity option.
The two word boundaries cb) make sure that we do not match part of a sequence of
alphanumeric characters that is more than 32 characters long.
See Also
Techniques used in the regular expressions in this recipe are discussed in Chapter 2.
Recipe 2.3 explains character classes. Recipe 2.6 explains word boundaries.
412 I Chapter 7: Source Code and Log Files
---
## Page 429
7.3NumericConstants
Problem
You need a regular expression that matches a decimal integer without a leading zero,
an octal integer with a leading zero, a hexadecimal integer prefixed with ox, or a binary
integer prefixed with ob. The integer may have the suffix L to denote it is a long rather
than an int.
The regular expression should have separate (named) capturing groups for decimal
octal, hexadecimal, and binary numbers without any prefix or suffix, so the procedural
the text into an actual number. The suffx I should also have its own capruring group,
code that will use this regex can easily determine the base of the number and convert
so the type of the integer can be easily identified.
Solution
\b(?:(?[1-9][0-9]*)
1(?o[0-7]*)
1ob(?[01]+)
10x(?[0-9A-F]+)
)(?L)\b
Regex options: Free-spacing, case insensitive
Regexflaver: .NET, Java 7, XRegExp, PCRE 7, Perl 5.10, Ruby 1.9
\b(?: (?P[1-9][0-9]*)
1(?P0[0-7]*)
10x(?P[0-9A-F]+)
ob(?P[01]+)
)(?PL)?\b
Regex options: Free-spacing, case insensitive
Regexflarer: PCRE 4, Perl 5.10, Python
b(?: ([1-9][0-9]*)1(o[0-7]*)|0x([0-9A-F]+)|0b([01]+))(L)?\b
Regex options: Case insensitive
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Discussion
This regular expression is essentially the combination of the solutions presented in
Recipe 6.5 (decimal), Recipe 6.4 (octal), Recipe 6.2 (hexadecimal), and Recipe 6.3 (bi-
nary). The digit zero all by itself can be either a decimal or an octal number. This makes
no difference, as it is number zero either way. So we removed the alternative for the
number zero from the part of the regex that matches decimal numbers.
We used a noncapturing group around each of the four altematives to make sure that
the word boundaries and the suffix L are applied to the regex as a whole, rather than
to just the first and last alternative. Named capturing groups make the regex easier to
7.3 NumericCenstants | 413
---
## Page 430
read and make it easier to converr the matched number from text into an actual number
in procedural code. JavaScript and Ruby 1.8 do not support named capture. For these
languages, you can use the alternative solution with five numbered capruring groups.
See Also
Chapter 6 has all the details on matching integer and floating-point numbers with
regular expressions. In addition to the techniques explained there, this recipe uses
named capture (Recipe 2.11) and free-spacing (Recipe 2.18).
7.4 0perators
Problem
You are developing a syntax coloring scheme for your favorite text editor. You need a
regular expression that matches any of the characters that can be used as operators in
the programming language for which you're creating the scheme: , +, *, /, =, , %,
3, ^, I, I, *, and ?. The regex doesn't need to check whether the combination of char-
acters forms a valid operator. That is not a job for a syntax coloring scheme; instead,
it should simply highlight all operator characters as such.
Solution
[~i|g%<>=/x+-]
Regex options: None
Regexflaver: .NET, Java, JavaScripr, PCRE, Perl, Python, Ruby
Discussion
If you read Recipe 2.3, the solution is obvious. You may wonder why we included this
as a separate recipe.
The focus of this chapter is on regular expressions that will be used in larger systems,
such as syntax coloring schemes. Such systems will often combine regular expressions
using alternation. That can lead to unexpected pitfalls that may not be obvious when
you see a regular expression in isolation.
engan saqo aaeq sax mm uossaudxa entau su Sussn tuaiss e 1eq s! ted su
expressions that match the same characters. Many programming languages use / as the
division operator and // to start a comment. If you combine the regular expression
from this recipe with the one from Recipe 7.5 into [+*/=<>%&^|!~?])|(?
// *), then you will find that your system never matches any comments. Al1
forward slashes will be matched as operators.
The solution is to reverse the altermatives: // *)|(?[-+*/=// *)|(?[*/=<>%&~|~>]+). This regex will
correctly highlight operators and single-line comments, unless the single-line comment
a “Bueq//i sianumooua xaau au uau aoseuado ue Aq papaaud Xpanepau s!
“comment” alternative will fail to match the *. The regex then tries the “operator*
after the character class makes it match asmany operator characters as it can. Afterthis
altermative. This will match not just I; instead, it will match all of I// because the +)
match has been found, the regex will be attempted again on bang. The regex fails to
match because the characters that started the comment have already been consumed
by the previous match.
If we leave off the quantifier and use // ,*)1(?[-+*/=<>%&|!
?]), the operator part of the regex will only match ↓ when encountering 1/bang. The
next match attempt will then see /bang, which will be matched by the °comment*
altermative in the regex.
7.5Single-LineComments
Problem
You want to match a comment that starts with // and runs until the end of the line.
Solution
//.*
Regex options: None
Regexflaver: .NET, Java, JavaScripr, PCRE, Perl, Python, Ruby
Discussion
The forward slash has no special meaning in regular expressions, so we can easily match
the start of the comment with //> Some programming languages use forward slashes
no°apo mo u uossadxo amoa stq sn nof uoAs suossaudxa 1enau uap o1
may need to escape the forward slashes as explained in Recipe 3.1.
7.5 Single-Line Comments | 415
---
## Page 432
 ** simply matches everything up to the end of the line. We don't need to add anything
to the regular expression to make it stop at the end of a line. Just make sure the option
"dot matches line breaks* is rurned off when using this regular expression.
See Also
Recipe 2.4 explains that the dot matches any character
7.6MultilineComments
Problem
You want to match a comment that starts with /* and ends with */. Nested comments
are not permited. Any /* berween /* and */ is simply part of the comment. Comments
can span across lines.
Solution
/\ to match 
 and */ Backslashes and/or forward slashes may get other special meanings when you
add literal regular expressions to your source code, so you may need to escape the
forward slashes as explained in Recipe 3.1.
We use  ,*?> to match anything between the rwo delimiters of the comment. The option
"dot matches line breaks* that most regex engines have allows this to span multiple
lines. We need to use a lazy quantifier to make sure that the comment stops at the first
*/ after the /*, rather than at the last */ in the file.
JavaScript is the only regex flavor in this book that does not have an option to make
the dot match line breaks. If you’re using JavaScript without the XRegExp library, you
can use \*/)
Regex options: None
Regexflavers: Ruby
/\/|[u\x\]//
Regexaptions: Dot matches line breaks
Regexflavers: .NET, Java, XRegExp, PCRE, Perl, Python, Ruby
7.7 AI Comments | 417
---
## Page 434
/\<+[S\5\]\/| ° /
Regex options: None
Regexflaver: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Discussion
You might think that you could just use alternation to combine the solutions from the
previous rwo recipes: / *I/\*, *?\*/. That won’t work, because the first alternative
should have *dot matches line breaks* turmed off, whereas the second alternative
should have it turned on. If you want to combine the rwo regular expressions using the
dot, you need to use mode modifiers to turn on the option *dot matches line breaks"
for the second half of the regular expression. The solutions shown here also explicitly
tum off the option for the first half of the regular expression. Strictly speaking, this isn't
necessary, but it makes things more obvious and prevents mistakes with the *dot
matches line breaks" option if this regex were combined into an even longer regex.