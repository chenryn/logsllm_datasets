✗
✗
✓ ✓
✓
✗
✗
✗
✓
✓
✓
✗
✗
✓
✗
✗
✓
✗
✗
✓
✗
✗
✗
✗
✓
✗
✗
✗
✗
✗
✓
✗
✓
✗
✗
✗
✗
✗
Table 2: Comparison of DoH resolver features. Column
names refer to markers in Table 1.
might lead to configuration errors. Of the remaining eight providers
four also support the JSON format on the same path as the DNS
wireformat.
DoH was designed as a secure service with transport encryption
via TLS. TLS support is thus a strict requirement. There has been
significant change on the TLS front recently, with TLS 1.3 becoming
an official RFC and security vulnerabilities POODLE and BEAST
rendering TLS 1.0 and lower standards insecure. All DoH servers
support TLS 1.2, and seven of the nine providers also support TLS
1.3. This is a positive sign towards broader acceptance of DoH, since
when we assessed these features in October 2018 only Cloudflare
and SecureDNS supported TLS 1.3. On the other hand, we also see
that some servers still support the deprecated TLS versions 1.0 and
1.1. We suspect the reason is that some operators are concerned
about compatibility issues with older client libraries and thus also
support older TLS versions. While the client can always insist on
negotiating a connection with TLS 1.2 or higher, it would make
sense that operators also use this opportunity to provide secure
DNS and simultaneously put pressure on dropping TLS versions
1.1 or lower.
Four of the servers surveyed (Google, Cloudflare, IBM, and Pow-
erDNS) also support DNS-over-TLS [11], the previous RFC for en-
crypting DNS requests using TLS. Despite having a three-year
headstart over DoH, DoT has failed to gain significant traction com-
pared to the previous specification. We will further explore both
protocols in the next section.
Finally, DNS-over-HTTPS relies on the PKI-certificate system to
ascertain the identity of the DNS resolver. To compensate known
weaknesses and flaws of this system, techniques such as Certifi-
cate Transparency (CT)2, Certification Authority Authorization
(CAA) [9] records and Online Certificate Status Protocol (OCSP) [22]
have been proposed. We check for support of CT, DNS CAA records
and OCSP in the Must-Staple (MS) configuration. While all certifi-
cates used for the DoH-servers are registered in the CT system,
2https://www.certificate-transparency.org
16
An Empirical Study of the Cost of DNS-over-HTTPS
IMC ’19, October 21–23, 2019, Amsterdam, Netherlands
Figure 2: Impact of head-of-line-blocking on resolution times for DNS over different transport protocols. The upper charts
depict the baseline and the lower ones the effect of a delay (1000ms for one in 25 queries).
only Google offers DNS CAA records and no server demands OCSP
MS. Again, we argue that the introduction of a new secure DNS
protocol would be an ideal opportunity to establish and require
support for all techniques that can further improve the security of
DoH.
3 TRANSPORTS FOR SECURE DNS
In this section, we investigate the impact of different (secure) trans-
port choices for DNS messages. We compare DNS-over-TLS with
DoH using both HTTP/1.1 and HTTP/2.0.3
We compare the effect of these different choices of transport
via a controlled experiment. We set up a local CoreDNS resolver,
and use it to resolve 100 domain names via UDP, TLS, HTTP/1.1
and HTTP/2.0. As we are evaluating the impact of the transport
protocol, we instruct our resolver to always return the same IP
address independently of the domain name. Using unique domain
names for each query rules out any impact of caching while still
being able to attribute differences in resolution time to the transport
protocol instead of the resolved domain name. We construct the
queried domain names with a random prefix of constant length five
followed by a fixed base domain. This construction ensures that
effects of compression of query names are uniformly distributed
across all queries, hence ensuring that differences in compress-
ability of domain names do not impact our results. To introduce
workload variability, we use non-deterministic query arrival time,
where query arrival times follow a Poisson distribution with an
average arrival rate of 10 queries per second. Experiments were
carried out on a machine running CentOS 7 on a 4-core Intel Core
i5-2500K CPU (3.30 GHz) and 8GB of RAM. Python 3.6 and CoreDNS
1.2.2 were used. Experiments were isolated with Docker containers.
Python’s standard packages for sockets, TLS and HTTP/1.1 were
used, DNS handling was done with the dnspython package, for
HTTP/2.0 support Facebook’s doh-proxy package was used.
We carry out two measurement runs. In the first run, we obtain
a baseline of the achievable performance by answering queries as
3We do not consider DNScrypt here since it takes an orthogonal approach. Whereas
DoT and DoH encapsulate the original DNS UDP wireformat with TLS and HTTP
headers respectively, DNScrypt uses a redesigned wireformat combining all these
features into a single message.
fast as possible. We then instruct our resolver to delay one in every
25 queries by 1000ms, to observe whether delays in resolution time
affect subsequent answers.
Figure 2 provides the results in both scenarios for each transport
protocol. Resolution time is the time it takes the application to re-
ceive and fully parse a reply, not just the time it takes the network to
transmit the message. The upper row shows baseline performance
without delay. The second row shows per query resolution times
with the introduced delay. The HTTP/1.1 scenario employs HTTP
request pipelining, as we are assessing the resilience against slow or
delayed queries of the individual transports (so HTTP/1.1 without
pipelining would be an unfair comparison).
For the baseline case without delay, we observe that both UDP
and TLS deliver responses to queries in less than one millisecond.
These values are expected for a controlled experiment setup run-
ning on the localhost.4 HTTP/2.0 consistently delivers results in
less than ten milliseconds. Only for HTTP/1.1, the baseline perfor-
mance fluctuates significantly, which we attribute to issues in the
pipelining support. Most major browsers tried to support HTTP/1.1
pipelining, but have ceased to support it due to too many interop-
erability issues negatively affecting performance [16, 21].
In the bottom row experiments, we observe that DNS via UDP
is hardly affected by the delay. We clearly see four outliers for the
four delayed queries, without any visible impact on subsequent
queries. Indeed, DNS via UDP can utilize different connections via
multiple port numbers to effectively multiplex queries and thus
make them independent.
For TLS as transport protocol, we see that the delayed queries
have a knock-on effect on subsequent queries; the serialization of
the TLS connection implies that a reply to a subsequent query is
only sent after the reply to the delayed query. Out-of-order delivery
of replies via TLS is also possible since every request/reply pair
can be identified by their unique ID. The DNS-over-TLS (DoT)
RFC states that this feature should be supported, although it is not
mandatory. In practice, out-of-order delivery greatly complicates
the server implementation compared to standard UDP, as it requires
state management on the server side to handle these requests. From
4The first query is slower than the following ones due to additional packet round-trips
by TCP and TLS handshakes during connection setup.
17
 0.001 0.01 0.1 1UDPResolution time (s)TLSHTTP/1.1HTTP/2.0Baseline 0.001 0.01 0.1 1 0 2 4 6 8 10UDPQuery sent (s) 0 2 4 6 8 10TLSQuery sent (s) 0 2 4 6 8 10HTTP/1.1Query sent (s) 0 2 4 6 8 10HTTP/2.0DelayedQuery sent (s)IMC ’19, October 21–23, 2019, Amsterdam, Netherlands
Timm Böttger et al.
Figure 3: Total bytes per resolution. Domain names were re-
solved via UDP-DNS (U), DNS-over-HTTPS without persis-
tent connection (H) and with a persistent connection (HP).
The DNS servers of Cloudflare (CF) and Google (GO) were
used. Whiskers span the full range of values.
Figure 4: Total packets per resolution. Domain names were
resolved via UDP-DNS (U), DNS-over-HTTPS without persis-
tent connection (H) and with a persistent connection (HP).
The DNS servers of Cloudflare (CF) and Google (GO) were
used. Whiskers span the full range of values.
the only three existing DoT servers in the wild (as per Wikipedia at
the time of writing this paper), we have verified that only Cloudflare
supports out-of-order delivery. Implementing out-of-order delivery
via TLS is akin to (re-)implementing the stream multiplexing part
of SCTP, QUIC or HTTP/2.0. We believe that this is one of the main
reasons why DoT failed to gain significant traction. Surprisingly,
we are not aware of any other work explicitly demonstrating the
potential performance impact of simple TLS transport on DNS.
For HTTP/1.1, we observe similar knock-on effects as for TLS.
In the case of HTTP/1.1, there is no way to circumvent these as the
in-order-delivery of requests is demanded by the RFC [18]. It is only
when we turn to HTTP/2.0 that we observe a similar insensitivity
to delayed queries as with UDP. Indeed, the DoH RFC states that
HTTP/2.0 is the minimum recommended version of HTTP to be
used.
In this section we have seen that DNS-over-TLS and DNS-over-
HTTPS/1 suffer from head-of-line-blocking. Only with HTTP/2.0
DoH manages to provide similar results to UDP DNS with respect
to head-of-line blocking. This difference in behavior might (at least
in part) explain why it was easier for DNS-over-HTTPS/2.0 to gain
traction than for DNS-over-TLS.
4 OVERHEAD
In the previous section, we have seen that DNS-over-HTTPS/2
offers significant advantages over DNS-over-TLS and DNS-over-
HTTPS/1. However, the requirement for HTTP/2 introduces addi-
tional layers and thus more headers and overhead. In this section,
we compare the overhead incurred by DNS-over-HTTPS/2 and
regular UDP-based DNS.
To obtain a set of domain names that is representative of the real-
world, we fetch the top 100,000 webpages as per global Alexa rank-
ing and gather all domains that were resolved during these fetches.
We instruct the local stub resolver to log all queries. The Alexa
list was retrieved on 15 September 2018. In contrast to browser-
generated HTTP Archive (HAR) files, this allows us to obtain the
domains that are not part of the actual webpage but are contacted
by common web browsers during page load, e.g., OCSP records for
secure TLS connection establishment. While fetching these 100,000
webpages, 2,178,235 DNS queries were sent. As domain names can
18
be embedded in more than one page, these 100,000 page fetches
resolved 281,414 unique domain names. Notably, almost 25% of
all DNS queries can be attributed to the fifteen most frequently
queried domain names. We then resolve these domain names from
a university vantage point via regular UDP-based DNS and DNS-
over-HTTPS, using the respective resolvers of both Google and
Cloudflare.
Figure 3 shows the distribution of request sizes for all six sce-
narios. Figure 4 depicts the number of packets. When comparing
UDP-based DNS with DoH, we see that the UDP transport system-
atically leads to fewer bytes and fewer packets exchanged, with the
median DNS exchange consuming only 182 bytes bytes and 2 pack-
ets. A single DoH resolution in the median case on the other hand
requires 5737 bytes and 27 packets to be sent for Cloudflare and
6941 bytes and 31 packets for Google. A single DoH exchange thus
consumes more than 30 times as many bytes and roughly 15 times
as many packets than in the UDP case. Persistent connections allow
to amortize one-off overheads over many requests sent. In this case,
the median Cloudflare resolution consumes 864 bytes in 8 packets,
the median Google resolution 1203 bytes in 11 packets. While this
is significantly smaller compared to the case of a non-persistent
connection, DoH resolution still consumes roughly more than four
times as many bytes and packets than UDP-based DNS does.
While in the legacy case there is no significant difference, in the
DoH case Google’s server leads to larger transactions than Cloud-
flare’s. This is caused by Google needing more bytes to establish
and maintain the TLS connection than Cloudflare. The reason is
Google’s usage of a certificate larger than Cloudflare’s: in our spe-
cific setup, Cloudflare transmits two certificates worth 1,960 bytes
and Google transmits two certificates worth 3,101 bytes. When
using a persistent TLS connection, the overheads get amortized
over the many requests made.
We now break down the overhead for DoH. As a by-product,
we showcase some of the new features of HTTP/2 in compari-
son to HTTP/1. Next to header compression using HPACK [20],
HTTP/2 also supports a differential transmission mechanism that
only transmits the changed headers during the subsequent ex-
changes. HTTP/2 also defines new message frames to manage the
connection. Figure 5 shows a breakdown of overheads into indi-