| unbound                          | DNS 规范要求 DNSSEC 解析器在     |
|                                  | DNSKEY 记录中使用基于            |
|                                  | SHA-1-based 算法进行验证。       |
+----------------------------------+----------------------------------+
| Valgrind                         | AES、SHA                         |
|                                  | 哈希.                            |
|                                  | [^\[a\]^](#using-the-system-wide |
|                                  | -cryptographic-policies_security |
|                                  | -hardening.html#ftn.idm139911322 |
|                                  | 789040){#using-the-system-wide-c |
|                                  | ryptographic-policies_security-h |
|                                  | ardening.html#idm139911322789040 |
|                                  | .footnote}                       |
+----------------------------------+----------------------------------+
| ::: {#using-                     |                                  |
| the-system-wide-cryptographic-po |                                  |
| licies_security-hardening.html#f |                                  |
| tn.idm139911322789040 .footnote} |                                  |
| [^\[a\]^](#us                    |                                  |
| ing-the-system-wide-cryptographi |                                  |
| c-policies_security-hardening.ht |                                  |
| ml#idm139911322789040){.simpara} |                                  |
| 重新实施软件硬件加载操作，如 ARM |                                  |
| 上的 AES-NI 或 SHA-1 和 SHA-2。  |                                  |
| :::                              |                                  |
+----------------------------------+----------------------------------+
:::
:::
:::
::: section
::: titlepage
# []{#using-the-system-wide-cryptographic-policies_security-hardening.html#excluding-an-application-from-following-the-system-wide-crypto-policies_using-the-system-wide-cryptographic-policies}将应用程序从下列系统范围的加密策略中排除 {.title}
:::
您可以通过在应用程序中直接配置受支持的密码套件和协议来自定义应用程序所使用的加密设置。
您还可以从 `/etc/crypto-policies/back-ends`{.literal}
目录中删除与应用程序相关的符号链接，并使用您自定义的加密设置来替换它。此配置可防止对使用排除后端的应用程序使用系统范围的加密策略。此外，红帽不支持此修改。
::: section
::: titlepage
## []{#using-the-system-wide-cryptographic-policies_security-hardening.html#examples-of-opting-out-of-system-wide-crypto-policies_using-the-system-wide-cryptographic-policies}选择不使用系统范围的加密策略的示例 {.title}
:::
::: title
**wget**
:::
要自定义 `wget`{.literal} 网络下载器所使用的加密设置，请使用
`--secure-protocol`{.literal} 和 `--ciphers`{.literal} 选项。例如：
``` screen
$ wget --secure-protocol=TLSv1_1 --ciphers="SECURE128" https://example.com
```
如需更多信息，请参阅 `wget(1)`{.literal} 手册页中的
HTTPS(SSL/TLS)选项部分。
::: title
**curl**
:::
要指定 `curl`{.literal} 工具使用的密码，请使用 `--ciphers`{.literal}
选项，并提供以冒号分隔的密码列表作为值。例如：
``` screen
$ curl https://example.com --ciphers '@SECLEVEL=0:DES-CBC3-SHA:RSA-DES-CBC3-SHA'
```
如需更多信息，请参阅 `curl(1)`{.literal} 手册页。
::: title
**Firefox**
:::
尽管您无法在 `Firefox`{.literal} Web
浏览器中选择不使用系统范围的加密策略，但您可以在 Firefox
的配置编辑器中进一步限制受支持的密码和 TLS 版本。在地址栏中输入
`about:config`{.literal} ，并根据需要修改
`security.tls.version.min`{.literal} 选项的值。将
`security.tls.version.min`{.literal} 设置为 `1`{.literal}，允许将 TLS
1.0 作为最低要求，`security.tls.version.min 2`{.literal} 启用 TLS
1.1，如此等等。
::: title
**OpenSSH**
:::
要为您的 `OpenSSH`{.literal}
客户端选择不使用系统范围的加密策略，请执行以下一个任务：
::: itemizedlist
-   对于给定的用户，使用 `~/.ssh/config`{.literal}
    文件中特定于用户的配置覆盖全局 `ssh_config`{.literal}。
-   对于整个系统，使用小于 50 的两位数字前缀指定
    `/etc/ssh/ssh_config.d/`{.literal}
    目录中的置入配置文件中加密策略，因此按字典顺序，它在
    `50-redhat.conf`{.literal} 文件之前，并带有 `.conf`{.literal}
    后缀，如 `49-crypto-policy-override.conf`{.literal}。
:::
详情请查看 `ssh_config(5)`{.literal} 手册页。
::: title
**Libreswan**
:::
有关详细信息，请参阅
[安全网络](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/securing_networks/){.link}
文档中的 [配置不使用系统范围加密策略的 IPsec
连接](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/securing_networks/configuring-a-vpn-with-ipsec_securing-networks#configuring-ipsec-connections-that-opt-out-of-the-system-wide-crypto-policies_configuring-a-vpn-with-ipsec){.link}
。
::: itemizedlist
**其他资源**
-   `update-crypto-policies(8)`{.literal} 手册页
:::
:::
:::
::: section
::: titlepage
# []{#using-the-system-wide-cryptographic-policies_security-hardening.html#customizing-system-wide-cryptographic-policies-with-subpolicies_using-the-system-wide-cryptographic-policies}使用子策略自定义系统范围的加密策略 {.title}
:::
使用这个流程来调整启用的加密算法或协议集。
您可以在现有系统范围的加密策略之上应用自定义子策略，也可以从头开始定义此类策略。
有作用域策略的概念允许为不同的后端启用不同的算法集合。您可以将每个配置指令限制到特定的协议、库或服务。
此外，指令可以使用星号来利用通配符来指定多个值。
::: orderedlist
**步骤**
1.  签出到 `/etc/crypto-policies/policies/modules/`{.literal} 目录：
    ``` screen
    # cd /etc/crypto-policies/policies/modules/
    ```
2.  为您的调整创建子策略，例如：
    ``` screen
    # touch MYCRYPTO-1.pmod
    # touch SCOPES-AND-WILDCARDS.pmod
    ```
    ::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 重要 {.title}
    在策略模块的文件名中使用大写字母。
    :::
3.  在您选择的文本编辑器中打开策略模块并插入修改系统范围加密策略的选项，例如：
    ``` screen
    # vi MYCRYPTO-1.pmod
    ```
    ``` screen
    min_rsa_size = 3072
    hash = SHA2-384 SHA2-512 SHA3-384 SHA3-512
    ```
    ``` screen
    # vi SCOPES-AND-WILDCARDS.pmod
    ```
    ``` screen
    # Disable the AES-128 cipher, all modes
    cipher = -AES-128-*
    # Disable CHACHA20-POLY1305 for the TLS protocol (OpenSSL, GnuTLS, NSS, and OpenJDK)
    cipher@TLS = -CHACHA20-POLY1305
    # Allow using the FFDHE-1024 group with the SSH protocol (libssh and OpenSSH)
    group@SSH = FFDHE-1024+
    # Disable all CBC mode ciphers for the SSH protocol (libssh and OpenSSH)
    cipher@SSH = -*-CBC
    # Allow the AES-256-CBC cipher in applications using libssh
    cipher@libssh = AES-256-CBC+
    ```
4.  将更改保存到模块文件中。
5.  将您的策略调整应用到 `DEFAULT`{.literal} 系统范围加密策略级别：
    ``` screen
    # update-crypto-policies --set DEFAULT:MYCRYPTO-1:SCOPES-AND-WILDCARDS
    ```
6.  要使您的加密设置对已经运行的服务和应用程序有效，请重启系统：
    ``` screen
    # reboot
    ```
:::
::: itemizedlist
**其他资源**
-   `update-crypto-policies(8)`{.literal} 手册页中的
    `自定义策略`{.literal} 部分
-   `crypto-policies(7)`{.literal} 手册页中的
    `加密策略定义格式`{.literal} 部分
-   红帽博客文章 [在 RHEL 8.2
    中如何自定义加密策略](https://www.redhat.com/en/blog/how-customize-crypto-policies-rhel-82){.link}
:::
:::
::: section
::: titlepage
# []{#using-the-system-wide-cryptographic-policies_security-hardening.html#proc_re-enabling-sha-1_using-the-system-wide-cryptographic-policies}重新启用 SHA-1 {.title}
:::
使用 SHA-1 算法创建和验证签名在 `DEFAULT`{.literal}
加密策略中受到限制。如果您的场景需要使用 SHA-1
来验证现有或第三方加密签名，您可以通过应用 `SHA1`{.literal}
子策略来启用该签名，RHEL 9 默认提供它。请注意，它较弱了系统的安全性。
::: itemizedlist
**先决条件**
-   系统使用 `DEFAULT`{.literal} 系统范围的加密策略。
:::
::: orderedlist
**步骤**
1.  将 `SHA1`{.literal} 子策略应用到 `DEFAULT`{.literal} 加密策略：
    ``` screen
    # update-crypto-policies --set DEFAULT:SHA1
    Setting system policy to DEFAULT:SHA1
    Note: System-wide crypto policies are applied on application start-up.
    It is recommended to restart the system for the change of policies
    to fully take place.
    ```
2.  重启系统：
    ``` screen
    # reboot
    ```
:::
::: itemizedlist
**验证**
-   显示当前加密策略：
    ``` screen
    # update-crypto-policies --show
    DEFAULT:SHA1
    ```
:::
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
使用
`update-crypto-policies --set LEGACY 切换到 `{.literal}LEGACY``{=html}
加密策略命令也会启用 SHA-1 进行签名。但是，`LEGACY`{.literal}
加密策略还启用了其他弱加密算法，使您的系统变得更加容易受到攻击。这个临时解决方案只适用于需要启用其他传统加密算法比
SHA-1 签名的情况。
:::
::: itemizedlist
**其他资源**
-   [从 RHEL 9 到 RHEL 6 系统的 SSH
    无法正常工作](https://access.redhat.com/solutions/6816771){.link}
    KCS 文章
-   [使用 SHA-1
    签名的软件包无法安装或升级](https://access.redhat.com/solutions/6868611){.link}
    KCS 文章
:::
:::
::: section
::: titlepage
# []{#using-the-system-wide-cryptographic-policies_security-hardening.html#creating-and-setting-a-custom-system-wide-cryptographic-policy_using-the-system-wide-cryptographic-policies}创建并设置自定义系统范围的加密策略 {.title}
:::
以下步骤演示了通过完整的策略文件来自定义系统范围的加密策略。
::: orderedlist
**步骤**
1.  为自定义创建一个策略文件：
    ``` screen
    # cd /etc/crypto-policies/policies/
    # touch MYPOLICY.pol
    ```
    或者，从复制四个预定义策略级别中的一个开始：
    ``` screen
    # cp /usr/share/crypto-policies/policies/DEFAULT.pol /etc/crypto-policies/policies/MYPOLICY.pol
    ```
2.  在您选择的文本编辑器中编辑带有自定义加密策略的文件以满足您的要求，例如：
    ``` screen
    # vi /etc/crypto-policies/policies/MYPOLICY.pol
    ```
3.  将系统范围的加密策略切换到自定义级别：
    ``` screen
    # update-crypto-policies --set MYPOLICY
    ```
4.  要使您的加密设置对已经运行的服务和应用程序有效，请重启系统：
    ``` screen
    # reboot
    ```
:::