define get-file
$(strip
S($1)
s（if s(call file-exists-eval,$l),,
$（warning The file referenced by variable
's1·（S（$1)）cannot be found)1）
endef
#S(call file-exists-eval,variable-name)
define file-exists-eval
$(strip
$（if $（$1),,S（warning‘s1·has no value))
$(wildcard S($1)))
#$（call brief-help,makefile)
define brief-help
$(AWK)
'$$1
/:[6-0z-2--][]/
(print substr（$S1,1,length（$s1)-1））$1
sort1
pr-T-w80-4
endef
#$（call file-exists,wildcard-pattern)
file-exists = S（wildcard $1)
#$（call check-file,file-list)
define check-file
S（foreach f，$1,
S（if $(call file-exists,$（$f)),,
S（warning Sf （S（$f)） is missing)）)
endef
##(call make-temp-dir,root-opt)
define make-temp-dir
mktemp -t $（if $1,$1,make).xxxxxxxxxx
endef
#MANIFEST_TEMPLATE-
-去处理器的manifest输人
MANIFEST_TEMPLATE := src/manifest/manifest.mf
TMP_JAR_DIR
:=$（call make-temp-dir)
TMP_MANIFEST
:=S（TMP_JAR_DIR)/manifest.mf
#S(cal1 add-manifest, jar,jar-name,manifest-file-opt)
define add-manifest
S（RM）S（dir $（TMP_MANIFEST）)
---
## Page 188
178
第九章
$(MKDIR)S(dir S（TMP_MANIFEST）)
m4--define=NAME=*$（notdir $2)"
--define=IMPL_VERSION=$(VERSION_NUMBER)
--define=SPEC_VERSION=$(VERSION_NUMBER)
S（if $3,$3,S(MANIFEST_TEMPLATE))
>$（TMP_MANIFEST)
$（JAR）-ufm S1 S（TMP_MANIFEST)
$（RM)$（dir S（TMP_MANIFEST）)
endef
#S(call make-jar,jar-variable-prefix)
define make-jar
.PHONY:S1 $S(S1_name)
S1:$($1_name)
S$（$1_name):
Cd$（OUTPUT_DIR）;
$（JAR) s(JARFLAGS） $S(notdir S$@) SS（S1_packages)
$$(call add-manifest,ss@,s$（$1_name).sS（$1_manifest))
endef
设定CLASSPATH
export CLASSPATH := $（cal1 bui1d-classpath,$（class_path))
#make-directories-
一确定输出日录的存在
make-directories := $(shel1 s(MKDIR) $(OUrPUT_DIR))
#help
默认目标
.PHONY:help
help:
@$（cal1 brief-help,S(CURDIR)/Makefile)
#all-
一为整个编译过程完成所有任务
.PHONY:a11
all:compile jars javadoc
#all_javas-
一用来保存源文件列表的临时文件
all_javas :=$(OUTPUT_DIR)/all.javas
#compile-
编译源文件
.PHONY:compile
compile:$(all_javas)
$(JAVAC） S(JFLAGS） @S$@
#jar_list-
jar文件列表
jar_list := server_jar ui_jar
jars-
-创建所有的jar文件
.PHONY:jars
jars:$(jar_list)
---
## Page 189
Java
179
server_jar——创建S（server_jar）
server_jar_name
:=$(OUTPUT_DIR)/1ib/a.jar
server_jar_manifest:= src/com/company/manifest/foo.mf
server_jar_packages:= com/company/m com/company/n
ui_jar-创建S（ui_jar)
ui_jar_name
:=$(OUTPUT_DIR)/1ib/b.jar
ui_jar_manifest:= src/com/company/manifest/bar.mf
ui_jar_packages:=com/company/o com/company/p
为每个jar文件自定义一个规则
#$（foreach j.s（jar_list).S（eval $（call make-jar,Sj)))
$（eval S(call make-jar,server_jar))
$（eval S(call make-jar,ui_jar))
#javadoc--从源文件产生Javadoc
.PHONY:javadoc
javadoc:$(all_javas)
$（JAVADOC）$（JDFLAGS）@SS@
假想工作目标compile将会对项目中的所有源文件调用一次javac。
S（a11_javas）必要条件是一个文件，这个文件名为alljavas，内容为一份Java文件列
表，每行一个文件名。尽管不需要每个文件名自成一行，但是这么做之后，如果需要使
用grep-v的话，文件的过滤会容易许多。用来创建all.javas文件的规则被声明为
.INTERMEDIATE，所以每次运行之后make便会移除all.javas文件，也因此在每次编译
之前make就会创建一个新的all.javas文件。用来创建all.javas文件的命令脚本相当简
单。为了获得最高的可维护性，我们会使用find命令在源文件树中取出所有的java文
件。虽然这个命令执行起来有点慢，不过当源文件树有所变动时，保证几乎不用修改就
能正常工作。
如果你的makefile中已经准备了一份源文件目录列表，就可以使用运行速度较快的命令
脚本来创建all.javas文件。如果这是一份中等长度的源文件目录列表，那么命令行的长
度应该不会超过操作系统的限制，下面就是这个运行速度较快的脚本：
S(all_javas):
shopt-snullglob;\
printf*&s\n*$(addsuffix/*.java,$(PACKAGE_DIRS)）>$@
这个脚本将会使用shell通配符来确定每个目录里的java文件列表。然而，如果某个目
录并未包含任何java文件，我们会想让通配符产生空字符串，而不是原本的文件名匹配
模式（这是许多shell默认的行为）。为了产生此结果，我们会使用bash选项-S
nullglob，其他的shell大部分都会提供类似的选项。最后，我们会使用文件名匹配
（globbing）和printf（而不会使用ls-1），因为它们都是bash内置的功能，所以
我们的命令脚本只会运行一个程序，不论包有多少个目录。
此外，如果不想使用shell的文件名匹配功能，那么可以使用wildcard：
$(all_javas):
print"gs\n"S（wildcard\
$（addsuffix/*.java,S(PACKAGE_DIRS))）>$@
如果你有非常多的源文件目录（或相当长的路径），如上的脚本可能会超过操作系统的
命令行长度限制。这个时候，使用下面的脚本可能会比较好：
---
## Page 191
Java
181
.INTERMEDIATE:S(all_jaVas)
$(all_javas):
shopt-snullglob:
for f in S（PACKAGE_DIRS);
do
printf "&s\n"ssf/*.java;
1
done>$@
请注意，compile工作目标与相关的支持规则所依照的是非递归的编译方法，不管有多
少子目录，我们只会有一个makefile，而且只运行一次编译器。如果你想要编译所有的
源文件，这是最快的方式。
此外，我们完全没有用到任何依存信息。因为我们所自定义的这些规则中，make既不
知道也不在乎哪个文件的时间戳在哪个文件（的时间）之后，它只会在每次被调用时
编译所有源文件。这么做有个好处，我们可以从源文件树来运行makefile，而不必从二
进制文件树来运行。如果考虑到make管理依存关系的能力，这看起来是个没有什么用
的编写这个makefile的方法，但是考虑以下儿点：
有一个替代方案（稍后将会讨论到）就是采用标准的依存关系做法。它会为每个文
件调用一个新的javac进程，因此增加了许多开销。但是，如果项目规模小，编
译所有源文件所花的时间与编译少数几个文件所花的时间并不会相差太多，因为
javac编译器的运行速度很快而进程的建立通常很慢。任何编译工作所花的时间
如果少于15秒，基本上说明了跟它做多少工作无关。例如，在我的机器（CPU为
1.8-GHzPentium4、RAM为512MB）上，编译500个左右的源文件（来自Ant
发行包）需要14秒的时间，编译一个文件需要5秒的时间。
多数开发人员都将会使用可以为个别文件提供快速编译功能的某种开发环境。不
过，如果变动的范围较大、需要进行全面的重编译工作或是需要进行自动的编译工
作，他们最可能想要使用的就是makefile。
正如我们所看到的，实现和维护依存关系所获得的成果，如同我们为C/C++项目进
行分离源文件树和二进制文件树的编译工作（参见第八章）一样，没有任何一项工
作应该被轻视。
正如我们在前面最后几个例子所看到的，它们使用的是PACKAGE_DIRS变量而不是去创
建all.javas文件。但是这个变量的维护，可能是一个劳动密集并具有潜在困难的工作。
对于较小型的项目来说，以手动方式维护makefile里的目录列表不会有什么问题，但是
当目录的数量增长到超过100个的时候，手动维护将会变得容易出错而且令人厌烦。这
个时候，应该使用find来扫描这些目录：
#$(call find-compilation-dirs,root-directory)
find-compilation-dirs =
---
## Page 192
182
第九章
$(patsubst&/,8,
$(sort
s(dir
PACKAGE_DIRS :=S(cal1 find-compilation-dirs,$(SOURCE_DIR))
find命令会返回一份文件列表，air函数会丢掉文件只留下目录，sort函数会从列表
中移除重复的部分，而patsubst会删除结尾的斜线。请注意，find-compilation-dirs
函数将会找出需要编译的源文件列表，只不过它会去掉文件名部分，然后由all_javas规
则以通配符取回文件名。这似乎是在浪费时间，不过我发现能够准备好包（内含源代码）
列表，这对编译过程的其他部分来说通常很有用，例如EJIB配置文件的扫描。如果你的
情况不需要包列表，那么你就可以使用先前所提到的较简单的方法来建立all.javas文件。
编译时考虑依存关系
编译时若要进行完整的依存关系检查，你首先需要使用一个工具从Java源文件中取出依
存信息，这有点类似cc-M。Jikes（http:/jikes.sourceforge.net/）是-个开放源代码
的Java编译器，它针对此功能提供了--makefile或+M选项。Jikes不太适合在源文件
与二进制文件分开的状态下进行编译的工作，因为它总是会将依存文件写人源文件所在
的目录，不过要这么做也行。从好的方面来看，它会在编译的同时产生依存文件，不用
分成两个阶段。
下面是一个依存关系处理函数以及一个使用此函数的规则：
8.class:.java
$(JAVAC）S(JFLAGS)+M$<
s(call java-process-depend,S<,s8)
#$（call java-process-depend,source-file,object-file)