title:POSTER: Detection of CPS Program Anomalies by Enforcing Cyber-Physical
Execution Semantics
author:Long Cheng and
Ke Tian and
Danfeng (Daphne) Yao
POSTER: Detection of CPS Program Anomalies by Enforcing
Cyber-Physical Execution Semantics∗
Department of Computer Science
Department of Computer Science
Long Cheng
Virginia Tech, USA
PI:EMAIL
Ke Tian
Virginia Tech, USA
PI:EMAIL
Danfeng (Daphne) Yao
Department of Computer Science
Virginia Tech, USA
PI:EMAIL
ABSTRACT
In this work, we present a new program behavior model, i.e., the
event-aware finite-state automaton (eFSA), which takes advantage
of the event-driven nature of control programs in cyber-physical
systems (CPS) and incorporates event checking in anomaly detec-
tion. eFSA provides new detection capabilities to detect data-oriented
attacks in CPS control programs, including attacks on control inten-
sity (i.e., hijacked for/while-loops) and attacks on control branch (i.e.,
conditional branches). We implement a prototype of our approach
on Raspberry Pi and evaluate eFSA’s performance by conducting
CPS case studies. Results show that it is able to effectively detect
different CPS attacks in our experiments.
KEYWORDS
Anomaly detection; Cyber-physical systems; Data-oriented attacks
1 INTRODUCTION
Control programs are critical to the proper operations of cyber-
physical systems (CPS), as anomalous program behaviors can have
serious consequence, or even cause devastating damages to physical
systems [1]. Recent studies [1, 3] have shown that control programs
suffer from a variety of runtime software exploits. These attacks can
be broadly classified into two categories: control-oriented attacks
and data-oriented attacks. The former exploits memory corrup-
tion vulnerabilities to divert a program’s control flows. The latter
manipulates data variables without violating the program’s con-
trol flow integrity (CFI). Because existing CFI-based solutions are
rendered defenseless under data-oriented attacks, such threats are
particularly alarming in CPS.
We focus on two types of runtime data-oriented attacks against
control programs. i) Attacks on control branch, which corrupt crit-
ical decision making variables at runtime to execute a valid-yet-
unexpected control-flow path (e.g., allowing liquid to flow into a
tank despite it is full or preventing a blast furnace from being
shut down properly). ii) Attacks on control intensity, which corrupt
∗This work has been supported in part by Security and Software Engineering Research
Center (S2ERC), a NSF sponsored multi-university Industry/University Cooperative
Research Center (I/UCRC). The full version of this work can be found in [2].
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
CCS ’17, October 30-November 3, 2017, Dallas, TX, USA
© 2017 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-4946-8/17/10.
https://doi.org/10.1145/3133956.3138839
sensor data variables to manipulate the amount of control opera-
tions, e.g., affecting the number of loop iterations to dispense too
much drug [1]). These data-oriented attacks result in inconsisten-
cies between the physical context and program execution, where
executed control-flow paths do not correspond to the observations
in the physical environment. Unfortunately, there exist very few
defences [1, 6] and they are ineffective to prevent both attack types
due to the lack of runtime execution semantics checking.
In many instances, CPS can be modeled as event-driven control
systems. We refer to events as occurrences of interest that come
through the cyber-physical observation process or emitted by other
entities, and trigger the execution of corresponding control actions.
We present an event-aware finite-state automaton (eFSA) model to
detect anomalous control program behaviors particularly caused by
data-oriented attacks. By enforcing runtime cyber-physical execu-
tion semantics (i.e., the physical context that triggers corresponding
CPS program behaviors), eFSA detects subtle data-oriented exploits
when a specific physical event is missing (i.e., not observed) along
with the corresponding event dependent state transition.
We implement a proof-of-concept prototype on Raspberry Pi
platform. Our prototype features: i) A gray-box FSA model that
examines the return addresses on the stack when system calls are
made. ii) An LLVM-based event dependence analysis tool to ex-
tract event properties from programs and correlate the physical
context with runtime program behaviors, which we refer to as
cyber-physical execution semantics. iii) A near-real-time anomaly
detector, with both local and distributed event verifiers to assess the
physical context. We evaluate eFSA’s performance by conducting
CPS case studies. Our results show that eFSA is able to successfully
detect different data-oriented attacks. The runtime anomaly detec-
tor takes ∼0.0001s to check each state transition in eFSA model,
∼0.063s for the local event verification, and ∼0.211s for the dis-
tributed event verification.
2 THE PROPOSED APPROACH
2.1 Attack Model
We assume that the adversary is able to launch runtime software
exploits which may be unknown or known but unpatched at the
time of intrusion. We are not concerned how attackers gained entry
into the devices and launch different attacks, but focus on uncover-
ing abnormal program execution behaviors after that. We mainly
focus on runtime software exploits, and thus sensor data spoofing
attacks in the physical domain are out of the scope of this work. We
assume the initial state (i.e., the training stage) of the application
is trustworthy, which is a general requirement of most behavior-
based intrusion detection systems. We also assume the runtime
PosterCCS’17, October 30-November 3, 2017, Dallas, TX, USA2483monitoring module is trusted and cannot be disabled or modified.
This assumption is reasonable because it can be achieved by iso-
lating the monitoring module from the untrusted target program
with hardware security support such as ARM’s TrustZone [1].
2.2 Design Overview
Fig. 1: eFSA model construction in the training phase. This
workflow can be generalized to non-FSA anomaly detection
frameworks (i.e., augmenting an existing program behavior
model with contextual integrity).
Fig. 1 shows the workflow of constructing the eFSA program
behavior model in our design. There are four main steps in the
training phase. We first identify CPS events involved in the control
program (❶). After that, we perform the event dependence analysis
to generate an event-annotated control flow graph (❷), which iden-
tifies event triggered instructions/statements of the program. Then,
we construct the basic finite-state automaton (FSA) model based on
dynamic profiling (❸). Given an event-annotated CFG, we are able
to identify the event-driven system call sequences. By augmenting
the event-driven information on top of the basic FSA, we generate
our event-aware FSA (i.e., eFSA) for CPS control program behavior
modeling (❹).
The basic FSA model aims at detecting control-oriented attacks.
Our main contribution lies in the event awareness enhancement
based on the FSA model, which checks the consistency between
runtime behavior and program execution semantics. In the testing
phase, an anomaly is marked if there exists a state transition de-
viated from the automaton, or a mismatch between the physical
context and program control-flow path.
2.3 Construction of eFSA Model
Event Identification and Dependence Analysis: In order to dis-
cover the triggering relationship between external events and in-
ternal program control flows, we first identify what events are
involved in a CPS program. Without loss of generality, we define
two types of events in control programs: i) binary events and ii) non-
binary events. Binary events return either True or False, which are
defined in terms of pre-specified status changes of physical environ-
ments and provide notifications to the control program. Non-binary
events correspond to the sensor-driven control actions within a
for/while loop, e.g., sensor values affect the amount of control oper-
ations. We present an LLVM-based method for reasoning triggering
relationship between external events and internal program control
flows. Our key idea is to search for an LLVM branch instruction
that is data-dependent on any sensor-reading API, and at least an
actuation API is control-dependent on this branch instruction. The
search is performed through backward data dependence analysis
and forward control dependence analysis.