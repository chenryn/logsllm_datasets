    [    0.000000] SMPCMP: CPU0: cmp_smp_setup
    [    0.000000] VPE topology {2,2} total 4
    [    0.000000] Detected 3 available secondary CPU(s)
    [    0.000000] Primary instruction cache 32kB, VIPT, 4-way, linesize 32 bytes.
    [    0.000000] Primary data cache 32kB, 4-way, PIPT, no aliases, linesize 32 bytes
    [    0.000000] MIPS secondary cache 256kB, 8-way, linesize 32 bytes.
    [    0.000000] Zone ranges:
    [    0.000000]   DMA      [mem 0x0000000020000000-0x0000000027ffffff]
    [    0.000000]   Normal   empty
    [    0.000000] Movable zone start for each node
    [    0.000000] Early memory node ranges
    [    0.000000]   node   0: [mem 0x0000000020000000-0x0000000027ffffff]
    [    0.000000] Initmem setup node 0 [mem 0x0000000020000000-0x0000000027ffffff]
    [    0.000000] percpu: Embedded 12 pages/cpu s17488 r8192 d23472 u49152
    [    0.000000] Built 1 zonelists in Zone order, mobility grouping on.  Total pages: 32480
    [    0.000000] Kernel command line: earlycon=lantiq,0x16600000 nr_cpus=4 nocoherentio clk_ignore_unused root=/dev/mtdblock6 rw rootfstype=squashfs do_overlay console=ttyLTQ0,115200 ethaddr=CC:2D:21:EE:D9:F0 panic=1 mtdparts=spi32766.1:512k(uboot),128k(ubootconfigA),128k(ubootconfigB),256k(calibration),2m(kernel),12m(rootfs),-(res) init=/etc/preinit active_bank= update_chk= maxcpus=4 pci=pcie_bus_perf ethwan= ubootver= mem=128M@512M 
    [    0.000000] PID hash table entries: 512 (order: -1, 2048 bytes)
    [    0.000000] Dentry cache hash table entries: 16384 (order: 4, 65536 bytes)
    [    0.000000] Inode-cache hash table entries: 8192 (order: 3, 32768 bytes)
    [    0.000000] Writing ErrCtl register=00000000
    [    0.000000] Readback ErrCtl register=00000000
    [    0.000000] Memory: 87656K/131072K available (5087K kernel code, 294K rwdata, 1264K rodata, 1276K init, 961K bss, 10648K reserved, 32768K cma-reserved)
    [    0.000000] SLUB: HWalign=32, Order=0-3, MinObjects=0, CPUs=4, Nodes=1
    [    0.000000] Hierarchical RCU implementation.
    [    0.000000] NR_IRQS:527
    [    0.000000] EIC is off
    [    0.000000] VINT is on
    [    0.000000] CPU Clock: 800000000Hz  mips_hpt_frequency 400000000Hz
    [    0.000000] clocksource: gptc: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 9556302233 ns
    [    0.000010] sched_clock: 32 bits at 200MHz, resolution 5ns, wraps every 10737418237ns
    [    0.008266] Calibrating delay loop... 531.66 BogoMIPS (lpj=2658304)
    [    0.069297] pid_max: default: 32768 minimum: 301
    [    0.074090] Mount-cache hash table entries: 1024 (order: 0, 4096 bytes)
    [    0.080515] Mountpoint-cache hash table entries: 1024 (order: 0, 4096 bytes)
    [    0.089026] CCA is coherent, multi-core is fine
    [    0.098050] [vmb_cpu_alloc]:[645] CPU vpet.cpu_status = 11
    ...
    [    2.636153] 7 cmdlinepart partitions found on MTD device spi32766.1
    [    2.641030] Creating 7 MTD partitions on "spi32766.1":
    [    2.646216] 0x000000000000-0x000000080000 : "uboot"
    [    2.652273] 0x000000080000-0x0000000a0000 : "ubootconfigA"
    [    2.657866] 0x0000000a0000-0x0000000c0000 : "ubootconfigB"
    [    2.663350] 0x0000000c0000-0x000000100000 : "calibration"
    [    2.668827] 0x000000100000-0x000000300000 : "kernel"
    [    2.673587] 0x000000300000-0x000000f00000 : "rootfs"
    [    2.678642] mtd: device 6 (rootfs) set to be root filesystem
    [    2.683251] 1 squashfs-split partitions found on MTD device rootfs
    [    2.689144] 0x000000d00000-0x000001000000 : "rootfs_data"
    [    2.695934] 0x000000f00000-0x000001000000 : "res"
    [    2.700477] Lantiq SoC SPI controller rev 9 (TXFS 32, RXFS 32, DMA 1)
    [    2.717456] libphy: Fixed MDIO Bus: probed
    [    2.726334] libphy: gswitch_mdio: probed
    [    2.732619] libphy: gswitch_mdio: probed
    [    2.736683] lro_sram_membase_res0 from DT: a2013000
当设备完全启动后，很遗憾的是设备UART
接入设置了登录口令，并且尝试了一众弱口令都没有成功，不得不说，tenda设备的安全性还是很到位的，我分析的其他tenda设备UART 串口都有登录设置。
## 0x04 设备固件获取
由于无法获取到设备的UART
shell，我开始考虑从芯片中获取固件，这里我犯了一个经验性的失误，因为以前分析过一些Tenda的设备，比较新的固件是识别不出来，解不开，并且以前提取Tenda
F6设备flash 芯片中的固件时，使用飞线来提取，但是芯片有过电保护，无法正常提取固件，于是这一款设备我直接没有考虑从官网下载固件，而是把flash
芯片拆卸下来读取固件。
由于手头上没有热风枪，所以没办法直接把flash 芯片直接吹下来，所以采用电洛铁滴锡的方法来拆解Flash芯片进行固件读取。
1、将电烙铁加热加上锡，对准芯片一侧上锡，此时使用镊子将上锡的一侧轻轻翘起。  
2、对准芯片另一侧上锡，此时使用镊子将上锡的另一侧轻轻翘起，使用镊子轻轻夹出。
然后把芯片焊到底座上，方便编程器提取。
到这里，我并没有继续往下提取，因为我突然想起来在UART log信息中显示的squashfs
信息，我联想起来，这个设备的固件是squashfs文件系统类型的，那么就可以直接用binwalk -Me直接提取。
如果要继续往下提取，那就是根据flash芯片datasheet 中的信息确定芯片的1号引脚，和编程器一一对应，直接就可以提取了，另外winbond
的芯片，现在物美价廉的土豪金CHA341A编程器就可以提取出来。
这里我在Tenda官网中下载了最新固件进行提取，不出所料，这一款设备的固件很成功的就提取出来。
## 0x05 UART 密码获取
我把固件解开之后，首先在/etc/shadow 看到用户名和加密后的hash。一般来说，这一块是设备的UART 登录口令。但是很遗憾被MD5加密了。
> hash值存储方式为：以MD5哈希算法为例，存储为$1$salt$encrypted；以SHA哈希算法为例，存储为$6$salt$encrypted
接了来使用hashcat 对shadow进行爆破
    hashcat -m 500 -a 0  ./test_shadow.txt ./500_passwords.txt --force
尝试使用hashcat爆破的方式，解开密码，但是换了许多个密码字典一直都没有成功，于是我想到了Tenda设备AC15的历史漏洞
**CVE-2020–10988** ，密码为root/ Fireitup ,于是加入到设备的爆破词典里面，如下图所示，密码正确。
使用获取到的登录口令，成功获取到设备的shell 中。
另外，设备的telnet 服务在UART提供的串口进行开启，远程连接，也是使用和UART 接入的登录口令是一样的。
## 0x06 总结
本片文章主要是对设备的硬件进行分析，如何来辨别设备上的芯片，从设备上的芯片获取有用的信息，还有对UART如何进行接入，并且根据Tenda的历史漏洞信息，获取到了设备的登录口令和密码。
后续会再出一篇文章，也是以Tenda AX12
路由器为起点，讲解如何分析路由器的固件，在对固件分析的过程中，着重关注那些点，那些文件内容容易产生漏洞。以及分享在Tenda AX12
设备上挖到的一些漏洞，希望能帮助一些小伙伴一起学习参考。