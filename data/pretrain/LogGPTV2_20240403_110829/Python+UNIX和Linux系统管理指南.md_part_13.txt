Out[8]: SList (-p, .n, .1,
In [8]: element_tree_list
In [7]: apache_list
In [6]: tests = _3
2:apache_log_parser_split.py
In [5]: element _tree_list = _2
In [4]: apache_list = _1
In [3]: !!ls t*py
1: elementtree_tomcat_users.py
Out[2]: SList (.p, .n, .l, .s, ·grep(), .fields() available). Value:
In [2]: I!!ls e*py
Out[1]: SList (.p,
In [1]: !!ls apa*py
：
0：
apache_conf_docroot_replace.py
apache_log_parser_split.py
.n，
.1.
.1,
S, -grep(), .fields() available). Value:
.5,·grep(), .fields() available). Value:
.S, ·grep(), .fields() available). Value:
-grep(), .fields() available). Value:
www.TopSage.com
X
E | uourdl
PDG
---
## Page 88
在某种意义上说，与当前代码运行的环境密切相关。如果有一个频繁在所有文件中执行
macro（宏）函数允许你定义一个代码块，这段代码块可以在之后编写的程序中被内联
调重谈。但是在这里特别指出的是，别名不仅能帮助你直接在IPython中使用*nix shell
首先说一说alias（别名）。在这一章的前面已经对别名进行了介绍，因此这里不再老
alias
IPython任务和使用的自动化。
即使IPython没能提高你的工作效率，它还是提供了一系列函数和特征来帮助你实现
自动和快捷方式
字的方式，
但是，所有这些的关键全部在于，在IPython中，可以使用_加指定的变量或是使用_加数
件中发挥作用的，请看下面的示例：
的公共处理步骤，
(inline）执行，无论你正在编写什么代码都可以使用。这不同于创建函数或方法。宏，
macro
命令，而且可以帮助你将任务自动化。
1:. test_apache_log_parser_split.py
0:test_apache_log_parser_regex.py
Out[9]: SList(.p, .n, .1,
In[9]:tests
In[2]: for f in dirlist:
for f in dirlist:
In [1]:dirlist=[]
Macr
第2章
print
6
print
print
，来访问之前输出的结果。
procdir`
"working on", f
print “moving %s to %s.done" % (f, f)
print "working on", f
print
，你就可以在文件中创建一个宏。为了更好地理解宏是如何在一系列文
created. To execute, type its name (without quotes).
40
*40
.S, -grep(), .fields() available). Value:
+
www.TopSage.com
---
## Page 89
们已经被删除：
量，再使用whos来检测它们的设置，之后reset命名空间，最后再次使用whos来验证它
reset函数用来从交互命名空间中删除所有变量。在下面的示例中，我们先定义了3个变
reset
储的变量；-r函数能够从持久存储包中重新加载所有变量。
函数能够从持久存储包（persistence store）中删除指定的变量；-z函数能够删除所有存
法就是storevariable。然而，store函数也可以包含一些非常有用的参数：-dvariable
通过store魔力函数可以一直使用你的宏和一些普通的Python变量。store函数的标准用
store
并确定它是否正确是非常必要的。
一旦定义了一个宏，就可以打开文本编辑器编辑它。在继续使用它之前，对其进行调试
procdir宏，遍历dirlist中的所有文件名：
在这个示例中，我们创建一个系统文件名，
rangeoflines是行的列表，来自想要合并到宏中的历史。宏列表的行应该用以空格为分
我们希望将来使用循环时再将循环列表项加人到变量dirlist中。我们创建了一个名为
在In[2]中创建了一个循环，而在变量dirlist中没有循环需要的宏列表项，这是因为
In[2]:b=2
In[1]:a=1
done with c.txt
working on c.txt
moving b.txt to b.txt.done
done with b.txt
working on b.txt
In[5]:procdir
In[4]: dirlist=['a.txt','b.txt','c.txt']
working on a.txt
----->procdir()
txt
*************************
******************
www.TopSage.com
，并将其保存到dirlist变量中。通过执行
IPython|75
---
## Page 90
rep可以取回最近处理的结果，并在下一行输出时设置一个字符串进行表示。例如：
rep是自动启用函数。rep函数有一些你或许觉得会非常有用的参数。使用不带参数的
的输人而不是经过转换的内容进行保存。在标准Python中，对输入进行转换是默认的。
filename lines。行可以使用与宏相同的范围格式。save仅有的选项是-r。-r表示将原始
save函数会保存指定的输人行到指定的输出文件中。使用save的语法为save options
save
-p选项在Python配置下运行指定的模块。
-d选项使得指定的模块运行在Python调试器（pdb）中。
-t选项使IPython输出模块运行的时间信息。
生，IPython继续执行。
-e选项使得IPython忽略对sys.exit()的调用和SystemExit异常。如果两者都没有发
的变量。
-i选项在IPython的当前命名空间中运行模块，因此，使用运行的模块可以访问所有定义
运行与简单地载人十分相像。
将会返回到IPython shell。使用run的语法是run options specified_file args。
修改一个Python模块，并在Ipython中交互式地测试这些修改。在执行指定的程序之后，
run函数可以在IPython中执行指定的文件。在其他应用中，它允许使用外部文本编辑器
rep
run
Interactive namespace is empty.
In [6]:whos
Once deleted, variables cannot be recovered. Proceed (y/[n])? y
In [5]: reset
Variable
In [4]: whos
In[3]:c=3
第2章
Type
int
Data/Info
N
www.TopSage.com
XC
---
## Page 91
码来说非常有帮助。例如：
下一行中，然后将光标在放置行的末尾。这对于执行、编辑和再执行单行甚至一小段代
当把一个数字作为参数传递给rep时，IPython获得从历史记录得来的指定行，并且放到
键盘，而去使用鼠标？现在可以根据包来使用一个新的标识_a，作为任何需要进行操作
的确，我们可以用鼠标进行复制和粘贴，但是使用起来比较麻烦。为什么不使用舒适的
现在已经有一个包含字符串的变量，该字符串是包的基目录名。
的基目录。
个新变量名，之后是一个等号和前引号，最后加一个后引号即可：
如果想去保存包的基目录，而不是bin目录，只需要删除路径最后的bin，在路径前加一
待我们进行编辑：
如果输入rep，可以看到在新输入行中/opt/local/squiggly/bin之后出现闪烁的光标等
定的安装包返回到bin目录。我们将bin目录保存将在变量a中：
包含一些值的变量，可以直接编辑这个值。作为一个示例，假设正在使用的函数对于指
普通的不带参数使用re p的方法是比较懒散、没有鼠标支持的编辑方式。如果你有一个
IPython需要处理的输入。尤其是当你混合使用generators和宏的时候，这非常方便。
rep在In[3]被调用，这样你看到的文本被放到了In[4]中。这使得通过编程能够产生
In [1]: map = (('a', '1'), ('b', '2'), ('c', '3'))
In [5]: new_a = '/opt/local/squiggly'
In [5]: /opt/local/squiggly/bin
In [4]:rep
 Out[3]:'/opt/local/squiggly/bin'
In[3]:a
In [2]: a = some_blackbox_function('squiggly')
In [4]:str(1)
In [3]:rep
Out[2]:'str(1)'
In [2]: format_str(1)
.：
www.TopSage.com
IPython ”  77
8
---
## Page 92
这在本章的前面已经讨论过了。当你为rep指定一个范围时，行被立即执行。下面是rep
rep函数也可以使用数字范围作为参数。数字范围的语法与宏中的数字范围语法相同，
既可以再次输入for循环，也可以使用rep：
这里，我们编辑In[2]，并打印输出数字值乘以2的结果，而不是一个非计算的值。我们 
引用搜索字符串到rep”非常相似。下面是一个示例：
rep的最后一个选项是传递一个字符串。这与“将一个词传递给rep”或是“传递一个非
行，因此被错过了。
In[4]和In[7]中告诉rep重复第2行和第3行。注意，由于第5和第6两行在In[4]之后执
8
我们定义了一个递增计数器和在In[1]到In[3]之间打印输出当前计数值的代码，在
的一个示例：
In[3]:rep2
In [2]: for alph, num in map:
In [3]: print i
In [2]:i += 1 
In[1]:i=1
a2
In [7]: rep 2-3
n
In[2]:b=2
In [1]: a = 1 
lines [u'i += 1\nprint i\n']
lines [u'i += 1\nprint i\n']
In[4]:rep2-3
9
·...
..：
第2章
www.TopSage.com
---
## Page 93
绝不会因为花费时间学习IPython而感到后悔的。
了解的特性，也是IPython最重要的优点。我们强烈建议你进一步深人学习IPython，你
一步发展，变得更为强大了。grep函数和对字符串的处理功能是学习IPython时首先需要
开始使用IPython的时候，就发现了这个工具了不起的强大功能。现在，Ipython得到进
神奇的文本编辑器：你越精通它，就可以越快速地完成单调乏味的工作。我们在几年前
IPython是工具包中最常使用的一个工具。掌握了这个神奇的shell，就相当于掌握了一个
本章小结
编辑和重新执行。
我们定义了一些变量，并且告诉rep重复包含字母“a”的行。它将In[1]返回给我们来
In [5]: a = 1
In [4]: rep a
In [3]:c=3
www.TopSage.com
6 | uoudl
---
## Page 94
行操作处理的数据类型。本节将演示如创建一个字符串，以及创建之后如何使用。
或是一系列字符串对象。字符串类型（str）是一个强大而灵活的、能够对字符串数据进
HTML、配置文件或是某些命令的输出结果。通常，你会使用诸如grep、awk这样的工
几乎所有的系统管理员都需要处理文本，无论其形式是日志、应用程序数据、XML、
本
要利用从其他文件中提取的数据来创建新文件时，经常使用重定向文本处理工具（grep
具，但有时候可能需要一个更富表现力、更完美的工具来处理更为复杂的问题。在你需
第3章
最普通的创建字符串的方法是在文本前后加上引号：
字符串由一系列字符组成。如果需要处理文本数据，则很可能需要使用一个字符串对象
str
Python的内建功能及模块
创建字符串
库和内建组件来实现文本处理。
需要处理XML时，ElementTree非常有用。在这一章中，我们将学习如何有效地使用标准
型和正则表达式模块进行文本处理。标准库中最近新增了一个功能，即ElementTree，在
Python及其标准库包含了大量灵活、功能强大的函数，适用于利用字符串类型、文件类
型，对于读取文本文件、操作文本或是从文本文件中提取信息而言，都是非常强大的。
或awk创建应用程序）更高，请参见第1章的内容。Python的标准库，语言特征和内建类
易于扩展的特点。关于为什么我们对Python的评价要比Perl或Bash（你同样可以使用sed
经验表明，相对Perl、bash或是其他语言而言，Python具有更富表现力，更完美，且更
或awk）的输出到一个文件方法。实际上，一个易于扩展的工具可能更适合此项工作。
www.TopSage.com
---
## Page 95
t ur usahonb, uarm Sutias e st stul, = s :[s] u1
Out[4]:
In[2]:s
" ur ,sanonb, yam Sutis e 5T sul = s :[t] u1
Out[2]:.
例3-1：Python中单/双引号的比较
如果需要在字符串中嵌入一个单引号，并且不想对其进行转义，则该字符串应使用双引
在单引号的字符串中嵌入双引号，并且不使用反斜线（“”）进行字符转义。相反地，
在Python中则不存在这样的差别。Python将差别留给了编程人员进行处理。例如，可以
下面是一个简单的Perl脚本的输出结果：
Perl在创建字符串时也使用单、双引号。下面是一个Perl脚本写的对比示例:
号，如例3-1。
同。在UNIX中两者是不可以替换使用的，例如：
双引号在创建字符串时是相同的，可以替换使用。这与UNIX shel1中引号的使用略有不
单引号、双引号、三引号可以完成相同的事：去掉创建一个str类型的对象。单引号和
-- $Foo --\njmjones@dinkgutsy:codes
jmjones@dinkgutsy:code$ ./quotes.pl
print "-- $FOo --\n";
$FO0 = "some_text";
#!/usr/bin/perl
jmjones@dink:~$ echo "Here is $FO0"
jmjones@dink:~$ Fo0=sometext
In [2]: string2 = "This is another string"
In [1]: string1 = ‘This is a string'
some_text
www.TopSage.com
文本丨81
PDG
---
## Page 96
对于复杂的处理，在Python中有另一种被称为“原始”字符串的字符串表示方法。在
In [6]: s = 'this is
例3-2：三引号
创建多行字符串。例3-2中先演示了在多行字符串中单引号的使用，之后演示了三引号的
决，但是这种方法略显笨拙。另外一种更为简洁的替换方法是使用三引号。三引号允许
在希望一个字符串能够跨越多行时，可以在字符串中你希望分行的地方嵌入“\n”来解
注意，在In[3]和In[7]中分别嵌入了一对相同类型的转义引号。
In [8]: s
In [7]: s = "This is a string with \"quotes\" in it"
讲，创建一个原始字符串与创建一个非原始字符串的区别在于，Python不对原始字符串
SyntaxError: EOL while scanning single-quoted string
1 uT usazonb, 4rm Surias e sT stul. :[9]ano
表3-1：Python的转义序列