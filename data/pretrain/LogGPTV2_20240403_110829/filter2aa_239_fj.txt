            r.NextBytes(colorBytes);
            var rect = new Rectangle
            {
              Height = r.Next(40, 150),
              Width = r.Next(40, 150),
              Fill = new SolidColorBrush(new Color
              {
                R = colorBytes[0],
                G = colorBytes[1],
                B = colorBytes[2],
                A = 255
              })
            };
            var textBlock = new TextBlock
            {
              Text = (i + 1).ToString(),
              HorizontalAlignment =HorizontalAlignment.Center,
              VerticalAlignment = VerticalAlignment.Center
            };
            Grid grid = new Grid();
            grid.Children.Add(rect);
            grid.Children.Add(textBlock);
            return grid;
            }).ToArray();
            foreach (var item in items)
            {
            grid1.Children.Add(item);
            Rectangle rect = item.Children.First() as Rectangle;
            if (rect.Width > 50)
            {
              int columnSpan = ((int)rect.Width / 50) + 1;
              VariableSizedWrapGrid.SetColumnSpan(item, columnSpan);
              int rowSpan = ((int)rect.Height / 50) + 1;
              VariableSizedWrapGrid.SetRowSpan(item, rowSpan);
            }
            }
运行应用程序时，可以看到矩形，它们占用了不同的窗口，如图32-15和图32-16所
示。
图32-15
图32-16
32.3.2 RelativePanel
RelativePanel是UWP的一个新面板，允许一个元素相对于另一个元素定位。如果使用
的Grid控件定义了行和列，且需要插入一行，就必须修改插入行下面的所有元素。原因是
所有行和列都按数字索引。使用RelativePanel就没有这个问题，它允许根据元素的相对关
系放置它们。
  注意： 与RelativePanel相比，Grid控件仍然有它的自动、星形和固定大小的
优势。第34章将详细解释Grid控件。这个控件在WPF中介绍，但在UWP中可以以类似
的方式使用它。
下面的代码片段在RelativePanel内对齐数个TextBlock和TextBox控件、一个按钮和一
个矩形。TextBox元素定位在相应TextBlock元素的右边；按钮相对于面板的底部定位，矩
形与第一个TextBlock的顶部对齐，与第一个TextBox的右边对齐（代码文件LayoutSamples
/ Views/RelativePanel-Sample.xaml）：
图32-17显示了运行应用程序时对齐控件。
图32-17
32.3.3 自适应触发器
RelativePanel是用于对齐的一个好控件。但是，为了支持多个屏幕大小，根据屏幕大
小重新排列控件，可以使用自适应触发器与RelativePanel控件。例如，在小屏幕上，
TextBox控件应该安排在TextBlock控件的下方，但在更大的屏幕上，TextBox控件应该在
TextBlock控件的右边。
在以下代码中，之前的RelativePanel改为删除RelativePanel中不应用于所有屏幕尺寸
的所有附加属性，添加一个可选的图片（代码文件LayoutSamples 
/ 
Views/
AdaptiveRelativePanelSample.xaml）：
使用自适应触发器（当启动触发器时，可以使用自适应触发器设置
MinWindowWidth），设置不同的属性值，根据应用程序可用的空间安排元素。随着屏幕
尺寸越来越小，这个应用程序所需的宽度也会变小。向下移动元素，而不是向旁边移动，
可以减少所需的宽度。另外，用户可以向下滚动。对于最小的窗口宽度，可选图像设置为
收缩（代码文件LayoutSamples/Views/AdaptiveRelativePanel-Sample.xaml）：
通过ApplicationView类设置SetPreferredMinSize，可以建立应用程序所需的最小窗口
宽度（代码文件LayoutSamples / App.xaml.cs）：
    protected override void OnLaunched
      (LaunchActivatedEventArgs e)
    {
      ApplicationView.GetForCurrentView().
        SetPreferredMinSize(
        new Size { Width = 320, Height = 300 });
      // etc.
    }
运行应用程序时，可以看到最小宽度的布局安排（见图32-18）、中等宽度的布局安
排（见图32-19）和最大宽度的布局安排（见图32-20）。
图32-18
图32-19
图32-20
自适应触发器还可以用于把SplitView的外观改为CompactInline或Overlay模式（代码
文件AppShellSample / AppShell.xaml）：
32.3.4 XAML视图
自适应触发器可以帮助支持很多不同的窗口大小，支持应用程序的布局，以便在手机
和桌面上运行。如果应用程序的用户界面应该有比使用RelativePanel更多的差异，最好的
选择是使用不同的XAML视图。XAML视图只包含XAML代码，并使用与相应页面相同的
后台代码。可以为每个设备系列创建同一个页面的不同XAML视图。
通过创建一个文件夹DeviceFamily-Mobile，可以为移动设备定义XAML视图。设备专
用的文件夹总是以DeviceFamily名称开头。支持的其他设备系列有Team、Desktop和IoT。
可以使用这个设备系列的名字作为后缀，指定相应设备系列的XAML视图。使用XAML
View Visual Studio项模板创建一个XAML视图。这个模板创建XAML代码，但没有后台代
码文件。这个视图需要与应该更换视图的页面同名。
除了为移动XAML视图创建另一个文件夹之外，还可以在页面所在的文件夹中创建视
图，但视图文件使用DeviceFamily-Mobile命名。
32.3.5 延迟加载
为了使UI更快，可以把控件的创建延迟到需要它们时再创建。在小型设备上，可能
根本不需要一些控件，但如果系统使用较大的屏幕，也比较快，就需要这些控件。在
XAML应用程序的先前版本中，添加到XAML代码中的元素也被实例化。Windows 10不再
是这种情况，而可以把控件的加载延迟到需要它们时加载。
可以使用延迟加载和自适应触发器，只在稍后的时间加载一些控件。一个样本场景
是，用户可以把小窗口调整得更大。在小窗口中，有些控件不应该是可见的，但它们应该
在更大的窗口中可见。延迟加载可能有用的另一个场景是，布局的某些部分可能需要更多
时间来加载。不是让用户等待，直到显示出完整加载的布局，而可以使用延迟加载。
要使用延迟加载，需要给控件添加x:DeferLoadingStrategy特性，如下面带有Grid控件
的代码片段所示。这个控件也需要分配一个名字（代码文件LayoutSamples 
/ 
Views/
DelayLoadingSample. xaml）:
为了使这个延迟的控件可见，只需要调用FindName方法访问控件的标识符。这不仅
使控件可见，而且会在控件可见前加载控件的XAML树（代码文件
LayoutSamples/Views/DelayLoadingSample. xaml.cs）：
    private void OnDeferLoad(object sender, RoutedEventArgs e)
    {
      FindName(nameof(deferGrid));
    }
运行应用程序时，可以用Life Visual Tree窗口验证，包含deferGrid元素的树不可用
（见图32-21），但在调用FindName方法找到deferGrid元素后，deferGrid元素就添加到树
中（参见图32-22）。
图32-21
图32-22
32.4 命令
本章前面介绍了如何为用户处理导航，讨论了用于导航到不同页面的汉堡按钮和正常
按钮。在应用程序中，需要更多的控件，允许用户开始一些操作。Windows 8有一些有趣
的方面，当用户自上而下地刷过屏幕时，它就启动命令栏；隐藏的命令可以使屏幕不太拥
挤。一些很重要的命令控件仍允许直接放在屏幕上。微软的OneNote有一个有趣的控件，
它只使用一个小圈；当用户单击小圈里面时，控件就变大，提供更多的选项。这种设计的
问题在于它不够直观。用户很难找出哪些应用程序允许自上而下地刷过，而且常常不知道
他们可以这样做。在Windows 10中，Windows应用程序可以运行在小窗口中，而不是全屏
运行，这甚至会带来更多的问题。在Windows 
10中，可以让命令栏总是保持打开——微
软OneNote的新版本有一个命令控件看起来像Ribbon控件。
  注意： 第34章讨论了Ribbon控件。
为了创建可以由用户激活的一列控件，一个简单的方法是使用CommandBar和AppBar
类。CommandBar更容易使用，但没有AppBar的灵活性。使用CommandBar，可以只添加
特定类型的控件，而AppBar允许使用任何元素。
下面的代码示例创建一个放在页面顶部的CommandBar。这个CommandBar包含3个
AppBarButton控件（代码文件ControlsSample / Views / InkSample.xaml）：
Page类包含TopAppBar和BottomAppBar属性，把应用栏定位在顶部或底部。这些属性
对Windows 8而言是必要的，但现在使用它们只是为了方便。可以把应用程序栏定位在页
面内喜欢的地方。
AppBarButton控件定义为CommandBar的子控件。AppBar按钮的符号可以用几种方式
定义。使用Icon属性，可以指定BitmapIcon、FontIcon、PathIcon或SymbolIcon。（如何使
用Path元素定义矢量图形参见第29章。）使用Icon属性，可以直接分配一个预定义的符
号，进而设置SymbolIcon。预定义的图标例子有Save、OpenFile和Clear。图32-23显示了
扩展模式下带3个AppBar按钮控件的CommandBar。在收缩模式下（单击省略号按钮可以
切换），不显示Label属性的值。
图32-23
AppBarSeparator和AppBarToggleButton是可以包含在CommandBar中的另外两个控件
——换句话说，就是实现接口ICommandBarElement的任何控件。这个接口定义了
IsCompact属性，使按钮更大或更小，以显示或不显示标签部分。
下面的示例添加AddBarToggleButton控件。AppBarToggleButton类派生自
ToggleButton，添加了ICommandBarElement和IAppBarToggleButton接口。这个按钮像基类
ToggleButton一样，支持3个状态：checked、unchecked和indeterminate，但默认只使用