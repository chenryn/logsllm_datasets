gram state that was not explicitly provided to it.
Purity also limits the untrusted code’s ability to leak sensitive
information to others through overt channels. It can communicate
to others only through its return value (or thrown exceptions) and
its resource consumption. However, it can transmit over a timing-
or resource-based covert channel to a receiver that is not pure. For
instance, we might download an untrusted tax calculator and verify
that it is pure before executing it. Then even if we type our salary
into it, it cannot leak our salary to others directly, though it may be
able to leak our salary through a covert channel.
Purity may also be useful for application extensions and plugins.
For example, consider an image viewer that, out of the box, sup-
ports only a handful of image formats. It might allow installation
of a plugin for viewing images in a different format only if that plu-
gin is written as a veriﬁably pure function that, given the contents of
an image ﬁle, returns a bitmap to be displayed by the image viewer.
Once veriﬁed as pure, any such plug-in could be downloaded and
executed safely; it cannot gain any information about other private
information stored on the system, nor can it corrupt the state of any
other part of the program.3
2.4 Building robust systems
Pure methods are also helpful for writing trustworthy security-
critical code that mediates between untrusted components.
For the purposes of preserving application integrity, pure meth-
ods are always safe to expose to untrusted code. Their functionality
could always be duplicated by the untrusted code itself, so they can-
not pose an additional threat. Pure methods may still be part of the
TCB, but only if their behavior is trusted for semantic correctness,
not because the method is granted privileged access to program in-
ternal state. This is a consequence of the lack of side effects. It
3It should be noted that purity does not eliminate all threats that
the plugin could pose to the program. The invoker of a pure plugin
method must still ensure that only appropriate data is passed to
the plugin and defend against unexpected return values from the
plugin.
is possible, however, that speciﬁc instances of immutable objects,
and thus their associated pure methods, might convey conﬁdential
or malicious information. One must still be careful about data ﬂow.
A pure method is automatically “defensively consistent” [18,
§ 5.6], provided that in the absence of malice it provides correct
service to individual clients and provided that each invocation of
the pure method processes information from only a single client.
(An object that serves multiple clients with independent interests
is defensively consistent if, even when one client violates its pre-
conditions, it continues to comply with its speciﬁcation for other
clients that satisfy its preconditions.) Defensive consistency en-
sures that one malicious client cannot attack other clients who may
rely upon the same pure method.
Bernstein presents an example in which a pure jpegtopnm con-
verter receives a JPEG image from the network, decompresses it,
and outputs a raw bitmap of the image to a user [4]. The “client”
here is the sender of the image, who as an arbitrary remote party, is
untrustworthy and may wish to corrupt or disrupt processing of im-
ages from other sources. A defensively consistent implementation
would thwart such attacks by continuing to provide correct conver-
sion of all images originating from other senders, even if one sender
sends malformed data with the intent to exploit the converter. The
purity of the converter ensures defensive consistency because it al-
lows one to know that each image is converted independently from
any others, preventing a malformed image from affecting the pro-
cessing of other images.
2.5 Bug reduction
Pure functions can help us eliminate certain classes of bugs. Of
course, anything that reduces the number of bugs in security-critical
code helps security.
A pure computation is automatically thread-safe, requiring no
locks, and can always be run in parallel with other computations
without risk of interference. Determinism guarantees that concur-
rent operations cannot disrupt its correct execution, and the lack of
side effects means that it cannot disrupt other computations.
Reproducibility is particularly useful when debugging and test-
ing applications. It is often the case with modern applications that
bugs are discovered in the wild rather than during testing, due to
novel conﬁgurations that were not considered during testing.
In
many cases, it can be difﬁcult to reproduce the bug as there are a
number of hidden variables that cause the behavior of a program to
differ between runs. If a method is pure, any failure of the method
will be reproducible given the same well-deﬁned, bounded set of
inputs. This known set of data can be collected and used to repro-
duce the bug for the developer, who can then ﬁx the program.
Deterministic functions can also make testing more effective. If
the computation is deterministic, we only need to cover any par-
ticular input once; on the other hand, if the computation is nonde-
terministic, it may conceal bugs that trigger nondeterministically,
so it is difﬁcult to know whether we have tested all possible be-
haviors. For instance, Bernstein cites dealing with nondeterminis-
tically triggered error cases as one challenge in testing qmail, and
proposes that testing would have been easier if the code had been
structured as a purely functional computation plus a simple wrap-
per that interacts with the environment (so that the wrapper can be
easily mocked in testing) [4]. Veriﬁable purity would enable de-
velopers to check that this discipline was followed correctly and
preserve it under maintenance.
2.6 Assertions and Speciﬁcations
It is widely accepted that assertions should be side-effect free.
If evaluating the assertion condition causes no side effects, a pro-
gram that always satisﬁes the assertion will behave the same way
whether the assertion is enabled or disabled. This restriction could
be checked by a lint-type tool that would warn about potentially
impure assertions.
In applications where assertions are used for debugging, it is also
helpful to know that the assertion condition is deterministic. If a
deterministic assertion succeeds, we know that it will not fail on
another run of the program due to dependence on seemingly unre-
lated state or nondeterministic behavior of the underlying platform.
Sometimes, programmers use assertions speciﬁcally to check for
and abort in the face of incompatible platform conﬁgurations. In
deterministic languages like Joe-E, however, platform-speciﬁc be-
havior is mostly hidden from the program, which would reduce the
need for this pattern.
Some speciﬁcation languages allow methods to have pre- and
post-conditions that are deﬁned using the same language as the
code, and these conditions may call other methods. For instance,
in JML, a speciﬁcation language for Java, speciﬁcations are only
supposed to call methods that are “pure.” JML’s notion of purity
forbids side effects but does not require determinism and places
no restrictions on what state the method’s behavior may depend
upon [15]. Since JML speciﬁcations can be compiled to assertions
and checked at runtime [8], the purity requirement is intended to
ensure that these assertions do not change the program’s semantics.
We argue that pre-conditions, post-conditions, and object invari-
ants should be deterministic as well as side-effect free. When meth-
ods are used in speciﬁcations, the speciﬁcation cannot be consid-
ered fully deﬁned unless the method is deterministic. In particular,
if the requirements on the method are predicated on external state
whose value changes from invocation to invocation, it will not be
possible to statically verify that the method satisﬁes its contract.
While JML’s restrictions on side effects in speciﬁcations may suf-
ﬁce to prevent runtime enforcement from changing the semantics
of the program, static checking is more difﬁcult than it would be if
speciﬁcations were functionally pure.
We have not implemented a tool for checking the purity of as-
sertions, but verifying the purity of some assertions would be a
straightforward extension of our techniques for methods. There are
some common patterns for assertions and speciﬁcations (such as
those that require executing methods on non-immutable objects)
for which our approach may not be applicable.
3. DEFINITIONS
Our deﬁnition of functional purity derives from the concept of
a mathematical function, a well-deﬁned one-to-one mapping from
inputs to outputs. We consider a method in a program to be func-
tionally pure if and only if it is both side-effect free and determin-
istic.
3.1 Side-effect freeness
A method is side-effect free if the only objects that the method
ever modiﬁes are created as part of the execution of the method.
This deﬁnition permits the method to create and modify new ob-
jects, any subset of which may be reachable from its return value,
but does not permit it to make any change that would be observable
from outside the method.
In addition to this linguistic notion of side-effect freeness, we
also require that a pure method not cause any side effects outside
the language environment, with the exception of resource consump-
tion (memory and CPU cycles). For example, it must not write to
ﬁles, communicate over the network, or print to the console. This
is necessary to soundly constrain the effects of untrusted code.
3.2 Determinism
A mathematical relation is considered a function if each distinct
input is associated with a single speciﬁc output. Any two evalua-
tions of a mathematical function with the same inputs will give the
same result. This result depends deterministically on the inputs,
and nothing else. Our determinism requirement for functions in a
program is analogous. We want any two calls with equivalent ar-
guments to a pure function to give the same result. The result must
depend only on the arguments and not on other global or thread-
local state such as the current time or the stack trace.
For numbers and other mathematical constructs, there is a well-
accepted canonical deﬁnition of what it means for two sets of func-
tion inputs to be the same, namely mathematical equality for each
argument. We need a similarly precise deﬁnition for equivalence
of arguments in programs. Element-by-element equality works for
value types, but pointers and references raise questions. Should two
calls of a method be equivalent if their arguments have the same nu-
meric values but different aliasing relationships? If they have the
same aliasing but reside at different addresses in memory?
There is not a single obviously right answer to these questions.
Determinism is thus a parameterized property: given a deﬁnition
of what it means for arguments to be equivalent, a method is de-
terministic if all calls with equivalent arguments return results that
are indistinguishable from within the language. The determinism
guarantee is only useful for calls whose arguments are equivalent
according to the deﬁnition of equivalence. The deﬁnition should
make semantically equivalent invocations (those that look equiva-
lent to the programmer or auditor) have equivalent arguments.
If the criteria for equivalence include memory layout informa-
tion such as the concrete addresses of pointers, invocations will
essentially never be equivalent, and the determinism guarantee will
be meaningless. For types that serve purely as collections of im-
mutable data, we can avoid addresses completely by comparing
purely by value, not by reference. This prevents pointer aliasing
from causing seemingly equivalent invocations to be distinct. For
example, consider a Java method that concatenates two strings. If
aliasing information is included, concat(str, str) will not be
equivalent to concat(str, str.clone()) because in the ﬁrst
case both arguments refer to the same object, and in the second
case they refer to different objects. For other types (e.g., graph
nodes) that are generally compared by reference, aliasing informa-
tion may be important to include. Our equality deﬁnition (§4.1)
excludes memory layout details but includes aliasing relationships
for types where identity provides the semantic notion of equality.
4. APPROACH
Our approach to purity is based on leveraging the properties of a
deterministic object-capability language, i.e., an object-capability
language that (a) has no nondeterministic language primitives and
(b) requires a restricted capability for any access to nondetermin-
ism.
An object-capability language [18] is one with the following
properties:
in objects
• all state that can be communicated between methods is stored
• all objects can only be accessed by references
• references can only propagate by being passed as arguments
• references are unforgeable (for instance, the language must
• access to references is strictly limited by lexical scoping of
be memory-safe, and it must not permit unsafe casts)
or being stored in a shared object
variables and transitive reachability of references
In a deterministic object-capability language,
In such a language, references serve as capabilities, and capabili-
ties can be granted only by explicitly passing references. For these
properties to be effective in restricting code’s effects, the global
scope must not contain any capabilities to affect program state or
the outside world. In other words, using methods and objects in the
global scope it must not be possible to have any effect on mutable
program state or external effects aside from resource consumption.
the observable
global state must never change and must be the same on every ex-
ecution. Any data returned from global methods is considered to
be part of the observable global state. This means, for example,
that no globally accessible methods can provide the time of day or
state of the ﬁlesystem, even though this data is not explicitly stored
anywhere in the global scope. A method’s view of global state will
thus be the same every time it is invoked, so globals can effectively
hold only compile-time constants. Then, since the only variables
in a method’s scope are globals and arguments, any variation in
the method’s behavior can always be attributed to differences in its
arguments.
From §3.2, we must specify when function arguments are equiv-
alent. We do so in the following section, in which the concrete
arguments to a method invocation are considered a set of named
references. For an instance method, the implicit reference to the
target object is treated as an argument named “this”.
4.1 Equivalence of reference lists
At a high level, we consider two sets of named references equiv-
alent if their reachable object graphs (including values, types, and
aliasing relationships) are isomorphic. Figure 1 gives an example;
the rules for its construction follow.
Many object-oriented languages include both reference types and
value types. Objects of reference type have an identity distinct from
their value. The language distinguishes between references that
point to the same object and those pointing to different objects with
identical contents. Any type with mutable ﬁelds is by necessity a
reference type, as changes to one instance will not affect another,
but immutable objects can also be reference types if the language
provides a way to test for object identity (such as Java’s == opera-
tor). In contrast, value types can be compared only by value; there
is no other notion of identity for these types. In Java, the primitive
types (boolean, char, and the integer and ﬂoating point types) are
value types, whereas Object and all its subtypes (including arrays)
are reference types.
For simplicity in the following formal deﬁnition, values are rep-
resented in the object graph as references to canonical instances.
One such instance exists for each distinct value of each value type.
Similarly, we treat null pointers as references to a single canonical
null object that belongs to every non-primitive type.
Let G be the set of named global (static) variables in the pro-
gram. Let A be a set of named object references (such as the ar-
guments to a method). We then deﬁne the reachable object set A∗
corresponding to the set A as the transitive closure of objects reach-
able by following references from all ﬁelds of the objects pointed to
by A∪ G. (The global state of the program will be the same across
all executions, so the set of objects reachable from G won’t change.
This portion of the graph is only included in order to represent all
observable aliasing relationships.)
The object graph for the reference set A is then constructed as
follows: We create special nodes labeled Global and Local. We
construct a canonical node for each primitive value in the program,
in addition to a canonical node for null. For each reference-type
object in A∗, we construct a node labeled with its concrete type.
For variables in G or A, we add edges originating in Global and
public class Foo {
public static byte b;
public static IntPair p;
private long myLong;
private byte myByte;
public void foo(Bar bar, Baz baz) {
// ...
}
}
public class Bar {
private IntPair myPair;
// ...
}
public class IntPair {
public int first, second;
}
Figure 1: An example of an object graph and corresponding Java class deﬁnitions.
Local respectively. These edges point to the node representing the
object pointed to by the variable and are labeled with the variable’s
name. For each ﬁeld of each object in A∗, we draw a directed edge
from the node holding the reference to the node representing the
referenced object (or canonical value), labeled with the ﬁeld name.
Two sets of object references are considered equivalent if they
result in identical object graphs (nodes and edges with the same
labels). Note that the object graph reﬂects all aliasing relation-
ships between non-value objects reachable from the set A and from
global variables.
4.2
Immutability
We also need the language to provide support for types that are