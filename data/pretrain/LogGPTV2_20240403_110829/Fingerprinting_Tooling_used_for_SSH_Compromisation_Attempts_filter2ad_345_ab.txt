fore, it is uneconomical for an attacker to perform this task
manually, and he or she will likely resort to a tool in order to
automate the login attempts. Depending on the knowledge of
the attacker, he or she will utilize an existing tool or develop
a new one.
If the attacker opts to use known tools, there is no shortage
of available material. A quick search on any search engine
yields an extensive list of SSH brute forcing tools. Most of
these programs are advertised as penetration testing tools,
used to assess the security of a network, for example to ﬁnd
servers that use weak login credentials. More so, entire articles
and tutorials are dedicated to the usage of those tools, such as
Hydra [8], Medusa [13], and Ncrack [12].
When writing an SSH brute forcing tool, one could create
an implementation of the SSH protocol, or use a pre-built
library that handles the SSH connection. The aforementioned
brute forcing tools utilize different libraries implementing the
SSH protocol, and only add the logic to perform the attack.
Although the libraries are likely to adhere to the standards
speciﬁed in the RFC describing the SSH protocol, minor
differences in connection establishment can be witnessed.
One of those difference is the announcement of the SSH
version. Libraries such as libssh [1] and libssh2 [17] use a
different version string to announce compatibility with the
same version of SSH protocol. Both libraries add their name
and release version into the SSH version string; libssh version
0.7.1 announces SSH-2.0-libssh-0.7.1, whereas libssh2
version 1.8.0 identiﬁes itself as SSH-2.0-libssh2_1.8.0.
While this provides a ﬁrst, trivial angle to identify the tools
used by attackers, we only use this information as a reference
and later combine it with the capabilities implemented by
a speciﬁc library. Thus, if an adversary is spooﬁng the
version string, the announced version will not match the
ﬁngerprint of the advertised key exchange, encryption, MAC
and compression algorithms anymore, which in combination
yields an even more distinctive ﬁngerprint for a speciﬁc brute
forcing tool implementation.
Similarly to the announced version string, the information
exchanged during the key exchange initialization varies be-
tween libraries. As discussed in the previous section, during
the session establishment, different algorithm suites are an-
nounced in order of preference. Not all libraries support all
key exchange, encryption, MAC, or compression algorithms.
More so, not all libraries supporting identical algorithms will
order them according to the same preference. This multitude
of possible variation of the initialization message increases the
likelihood of libraries implementing them differently, which
can be leveraged to identify the tool and/or underlying library
in an incoming SSH connection request.
In order to compare different key exchange initialization
messages, the four exchanged capabilities as discussed in
Section 3 are used. The advertised
1. key exchange algorithms (kex),
2. symmetric encryption algorithms (enc),
3. message authentication code algorithms (mac), and
4. compression algorithms (comp)
are concatenated into a single capabilities string. Since we
only care about exact matches in capabilities, we hash the con-
catenated string as a ﬁngerprint for a speciﬁc tool. Consider
the case of an out-of-the-box SSH server install on Ubuntu
16.04 Desktop, which comes preconﬁgured with the following
conﬁguration:
• KEX algorithms: PI:EMAIL,ecdh-
sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-
nistp521,difﬁe-hellman-group-exchange-sha256,difﬁe-
hellman-group14-sha1
• Ciphers:
PI:EMAIL,aes128-
ctr,aes192-ctr,aes256-ctr,aes128-
PI:EMAIL,PI:EMAIL
• MAC algorithms: PI:EMAIL,umac-
PI:EMAIL,hmac-sha2-
PI:EMAIL,hmac-sha2-
PI:EMAIL,hmac-sha1-
PI:EMAIL,PI:EMAIL,umac-
PI:EMAIL,hmac-sha2-256,hmac-sha2-
512,hmac-sha1
• Compression algorithms: none,PI:EMAIL
Thus, we obtain the ﬁngerprint through the MD5 hash of
PI:EMAIL,ecdh-sha2-nistp256,ecdh
-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-gro
up-exchange-sha256,diffie-hellman-group14-sha1;chach
PI:EMAIL,aes128-ctr,aes192-ctr,aes25
6-ctr,PI:EMAIL,PI:EMAIL;
PI:EMAIL,PI:EMAIL,hma
PI:EMAIL,hmac-sha2-512-etm@openssh
.com,PI:EMAIL,PI:EMAIL,u
PI:EMAIL,hmac-sha2-256,hmac-sha2-512,hmac
-sha1;none,PI:EMAIL
resulting in 9f735e5485614bcf6e88b9b848582965.
Finding or building a tool for SSH brute forcing is only the
ﬁrst step for an attacker towards compromise - next the ad-
versary needs to choose which login credentials to use during
authentication. Here the attacker has three main choices:
64          22nd International Symposium on Research in Attacks, Intrusions and DefensesUSENIX AssociationFirst, an attacker can opt to incrementally, pseudo randomly,
or randomly generate the username and password from a pre-
deﬁned set of characters. Given enough time, and assuming
the attacker is not blocked after some attempts, this method is
bound to provide access to the targeted machine. Second, an
attacker can decide to generate the login credentials using a
dictionary attack. In a dictionary attack, words are combined
to form the password and or username. Third, an attacker can
choose to use predeﬁned login credentials and available pass-
word lists. As with SSH brute forcing tools, a quick search
on any search engine reveals a plethora of hits advertising
password list for download. These lists often contain known
default passwords and usernames such as admin and root.
Here, again, the different options available for the attack-
ers to generate the login credentials offers an opportunity to
detect brute forcing campaigns, and we put forth the assump-
tion that the same adversaries will most likely use the same
or similar login credentials when trying to exploit systems.
Under the premise that an attacker will use the same tool to
attack multiple targets, the same ﬁngerprints for a single IP
address should be witnessed at different honeypots. While
the combination of algorithms provides already a distinctive
ﬁngerprint for a speciﬁc tool, in the later part of our evaluation
we further investigate the relationship between identical tools
and password generation algorithms. If an attacker uses multi-
ple machines or IP addresses with the same brute forcing tool
and password generation algorithm, the previously described
ﬁngerprints can be used to cluster IP addresses belonging to
the same attacker.
5 Data Collection
This section describes the setup of our honeypot infrastructure
and the data acquisition strategy used in this paper. As the goal
of our study is to demonstrate the possibility of ﬁngerprinting
the tools and techniques used by adversaries in SSH break-in
attempts, we have designed a distributed honeypot system
and exposed approximately 4,500 honeypots distributed over
three /16 subnets to the open Internet.
5.1 Honeypot design
As you recall from section 3, the SSH protocol goes through
three main phases in connection establishment: ﬁrst, client
and server announce their protocol versions to each other,
second, the endpoints exchange their ciphering, MAC and
compression capabilities and agree on a key, and ﬁnally, the
tunnel is authenticated by a public key or password before an
SSH session is established. While we would clearly expect to
see differences in the behavior of adversaries after they have
gained access to a particular machine, the SSH protocol is
complex enough and contains several conﬁguration options
so that the tooling used by attacker may contain implemen-
tation differences, that will – as we show in the following –
allow recognition of a particular tooling even before the SSH
protocol advances to the password prompt and an interactive
session. The distributed infrastructure was therefore imple-
mented as a honeypot that would negotiate a key exchange
and an SSH session with the connecting client, display a lo-
gin prompt and collect usernames and passwords, but never
let any user in. While this simpliﬁes containment and thus
reduces the risk of operating such a system, to the connecting
user it basically appears like a regular server and an incorrect
password guess.
In order to pose as yet another open SSH server, it is essen-
tial that the honeypot itself blends in with existing installations
found on the Internet, otherwise knowledgeable adversaries
could soon identify instances running some honeypot software
and avoid individual IPs or even subnets where honeypots
were detected. Thus, it would be a major failure if a system
meant to identify adversaries based on handshake ﬁngerprints
could be ﬁngerprinted itself, which has been found to be an
issue for existing common open source honeypots such as
Kippo or Cowrie [19]. To avoid this problem, we connect
the incoming session to an actual OpenSSH implementation
running inside a container, which matched in terms of version
strings, list of available algorithms and options and ordering
a default Ubuntu 16.04 LTS installation. This way, an ad-
versary probing the system for implementation deviations to
unexpected inputs will observe no difference from a typical
server, and to an adversary scanning the Internet for banners
and key exchanges our honeypots will blend in with what
one would expect when connecting to a popular deployed
operating system.
5.2 Organizational Placement
Aside from being identiﬁable based on speciﬁc implemen-
tation characteristics, it would also be conceivable that ad-
versaries could spot honeypots based on the way they are
deployed and subsequently avoid them. For example, an ap-
parently open SCADA system hosted on an Amazon EC2
cloud IP address should trigger some suspicion in a knowl-
edgeable adversary. In our case, an entire block of consecutive
IP addresses running SSH servers where otherwise nothing
else is open in the network could similarly bias the results,
and adversaries be motivated to evade such networks.
In order to create a believable posture and collect repre-
sentative results, we deployed the honeypot in the enterprise
network of an organization. This organization is connected
with three /16 networks to the Internet, on these networks
approximately 60,000 devices are active and incoming SSH
trafﬁc is not ﬁltered by the ﬁrewall. These 60,000 ofﬁcial
network hosts were of various types and origin, with a mix
of servers, workstations, laptops and other mobile devices.
While the foremost category would be constantly powered
on and accessible, personal workstations, laptops or phones
would only be powered on at select times.
USENIX Association        22nd International Symposium on Research in Attacks, Intrusions and Defenses 65Figure 3: Number of active honeypots aggregated by hour over the course of one week in the study.
In this study, we spread the 4,500 honeypots randomly
throughout the network ranges of the organization, so that
they would be assigned IP addresses belonging to server,
workstation or mobile host subnets. This meant that IP ad-
dresses belonging to our honeypot system were located in
between sets of servers or regular user machines, thus an ad-
versary exploring the network could not evade the honeypots
by skipping select parts of the network ranges, and after scan-
ning several “ofﬁcial” servers our honeypot would appear to
the adversary as just another server in the same group. The
routing rules of the organization were set up in such a way
that IP addresses that were allocated to a host but also chosen
for the honeypot were forwarded to the ofﬁcial host whenever
powered on, and forwarded to the decoy as soon as the ofﬁcial
host left the network. This way, adversaries interacting with
the organization’s hosts would experience an instantaneous
seamless handover to our honeypot infrastructure.
Figure 3 depicts the number of active honeypots in our
deployment over the course of one week. The graph clearly
shows a diurnal pattern stemming from a base population of
approximately 1,500 active systems in server and workstation
ranges, as well as an additional 3,000 decoys which only be-
come activated when the mobile and temporary devices leave
the network. Both components of our honeypot deployment
strategy make it thus very challenging for an adversary to
locate and evade our infrastructure.
6 Evaluation
This section evaluates the results of applying the ﬁngerprint-
ing methods on the dataset. Both the SSH versions string and
the ﬁngerprint based on the session negotiation are analyzed.
In addition, we use time and password correlation to evaluate
the hypothesis that attackers leverage multiple hosts to brute
force SSH servers.
6.1 Available ﬁngerprints
During the data collection period, a total of 107,793 hosts tried
to brute force the login credentials of one or more honeypots
in our network. We only considered source IPs that completed
at least one completed SSH key exchange towards our 4,500
honeypots during the entire month, thus excluding mere TCP
SYN scans. Within this entire dataset, we observed a total
of 123 SSH version strings, and identiﬁed 49 distinct MD5
hashes for different libraries and library versions in use.
While the analysis yielded a substantial count of different
ﬁngerprints and version strings, we also ﬁnd that these in-
stances are also surprisingly well spread across source hosts.
The distribution of source IPs that use a particular ﬁngerprint
follows an exponential decay; while the most commonly used
library ﬁngerprint is used by 58% of the sources, already the
bottom half of the top 10 ﬁngerprints account only for frac-
tions of a percent. Fingerprints thus have large amounts of
variations, and are distinctively correlated to sources: more
than 89% are only associated with one ﬁngerprint over the
entire observation period. Similar results apply to the version
strings; the top 3 version strings are used by more than 75%
of all source IPs, also here 90% of all sources only advertise
one version string to our honeypot during the entire period.
The large body of ﬁngerprints compared to the number
of available tools, as well as the larger number of version
strings compared to the amount of ﬁngerprints matches our
expectations how brute forcing tools are developed and used.
First, as commonly used tools build on system libraries such
as libssh or OpenSSH, major updates to the underlying sys-
tem library implementing the SSH protocol will result in a
new ﬁngerprint, even though the adversary uses the same
toolchain.
Second, tools (or their users) actively change the version
string and conﬁguration advertised by their toolchain, possi-
bly in an attempt to evade detection by signatures. Examples
of this are invalid encryption and mac algorithms such as
hmac-sha\x11 and "lowfIsh in some of the key exchange