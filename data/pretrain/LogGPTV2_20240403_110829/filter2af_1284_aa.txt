# 前言
Android逆向，最近一次写android逆向相关的文章已经是一年前了。。
> 难受
本题虽然简单，但是也值得深挖一下。在做题的时候我较为详细的记录了，在此我也会比较详细的讲讲，主要面向像我这样的小白，同大家分享。
# 工具
需要使用到的工具：
    IDA7.0
    JEB.android.decompiler.3.0.0.201808031948Pro
    jni.h
    BDOpener.apk 或者 mprop
调试环境:
    已经Root的Google Nexues 6p （android 8.0）
    安装Xposed框架
    我的环境是在mac下
当然有些工具不是必须的。可以使用类似的工具替换。搞android的话，手机最好是买个原生的吧。
# 步骤
大体介绍一下做此题的流程。
  1. 找到主要判断逻辑
  2. 找到关键的`eq`函数
  3. 分析、识别算法
  4. 写出解密脚本
步骤并不难，每一步都有许多方法可以达到目的，同时需要处理一些细节的地方。
## 寻找判断逻辑
### 方法一
`Android`逆向较为常用的工具，应该是`jeb`了，我这用的最近泄漏的版本。
疑难解决：
用`jeb`时非常容易运行不了，主要是因为`JDK`的版本问题，这里使用`JEB.android.decompiler.3.0.0.201808031948Pro`需要JDK11+
通过结果可以比较清楚的看到程序的逻辑，看起来似乎只要将用户名逆序即可！？
这部分代码比较简单。但是当我尝试使用`34567890931`进行输入，提示`error`
??答案明显不对，而且从逻辑上来看没有看到提示`error`的代码。因此这里肯定是有猫腻。
因此猜想程序执行的应该不是此`Activity`。  
如果做过android开发，并且眼神比较好，也比较细心的话，肯定能看出问题。
此 `MainActivity` 继承自
`AppCompiatActivity`，而`Activity`的基类应该是`AppCompatActivity`，在`jeb`中直接双击`AppCompiatActivity`便可查看该类的定义，发现原来这里才是程序开始执行的位置。
此时再来看一下代码逻辑。
获取用户输入，调用native函数`eq`进行判断，然后判断长度是否24位，不足则补齐，并且对输入进行AES解密，最后打印结果。
整个的关键便在于native层的`eq`函数。
### 方法二
主要思路就是根据报错信息进行字符串搜索。当然最后也需要用到`jeb`。
我用`apktool`，当然使用`jeb`直接搜索来的更方便一些，只是我在做的时候尝试了，也就记录了。
命令`apktool d Transformers.apk`，之后在本地生成该apk的文件夹，在`vscode`下全局搜索字符串`error`
之后便可以在`jeb`中进行定位了。
`jeb`下直接搜索时，使用`ctrl + f`,更加方便快捷。
## 2\. 找到关键的`eq`函数
通过`jeb`脱出so文件，IDA打开，发现没有找到想要的`eq`函数
### Native函数注册
[参考文章](https://www.jianshu.com/p/5f1167734299)
在`Android`中通过jni调用本地方法（c/c++），通常使用javah生成规范的头文件，定义一个函数实现本地方法，函数名必须使用本地方法的全类名的规范来写。
> Java_ + 包名 + 类名+ 接口名
示例如下：
    JNIEXPORT jstring Java_com_example_test_MainActivity_helloworld(JNIEnv *, jclass );
`jni`还提供`RegisterNatives`方法进行注册`Native`函数。
    jclass clazz;
        clazz = env->FindClass("com/example/test/MainActivity");
        if (clazz == NULL) {
            return JNI_FALSE;
        }
        if (env->RegisterNatives(clazz, gMethods, sizeof(gMethods) / sizeof(gMethods[0]))  题外话，其实不需要调试也完全可以解决，只要照着加密过程，自己将RC4改改，同样能得到子密钥序列，我感觉应该只有初始化S-> Box不同其他应该没有变动。我做的时候是动调的。
### 动态调试
[参考WIKI](https://ctf-wiki.github.io/ctf-wiki/android/basic_reverse/dynamic/ida_native_debug/)
调试是逆向中不可少的。不过有时总会因为各种环境问题导致无法调试。我觉得如果打算做android逆向的话，最好还是准备只Google手机，能少遇点坑。
调试手机apk有几种方法，我大致总结了下。
#### 1\. 动态调试Java层APK
这里通常使用`jeb`进行动调，动调`java`主要是调试`smail`，当然这里也可以用AS进行动调，不过太麻烦了。JEB比较简单。  
将需要调试的APK拖入jeb打开，在smail下断点，确保手机打开了开发者模式。  
这里我用的手机是Google Nexues 6P，不知道为啥我用小米8，JEB没显示。  