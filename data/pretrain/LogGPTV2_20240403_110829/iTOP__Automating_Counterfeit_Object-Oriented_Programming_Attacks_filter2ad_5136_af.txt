### Possible Reasons for Failure
There are several potential reasons for the observed failures:
1. **Invalid Dispatcher Blocks**: The dispatcher blocks necessary for the operation are not valid.
2. **Unavailable Gadgets**: The required gadgets to build the payload are not available to the dispatcher.
3. **Unsatisfiable Payload Constraints**: The constraints imposed on the payload are unsatisfiable.

For a more detailed understanding of the failing attempts, Table 8 lists the exact reasons for each failure. In most cases, the failure was due to a missing required gadget, such as an arbitrary memory write gadget. In other instances, when generating the complex mprt payload, the search timed out, as seen in column 13 (from left to right) in Table 8 for the programs Nginx, Apache Httpd, and Redis.

### 7. Discussion

#### Symbolic Execution
Symbolic execution is a powerful technique for payload generation, as it allows for automated exploration of the program control flow graph, precise reasoning about the program state, and automatic payload generation. However, its effectiveness is significantly limited by the size of the target binary. Using basic block constraint summaries, similar to BOPC [24], could improve the analysis of gadget combinations but at the cost of increased runtime performance, making it infeasible for large binaries. An alternative approach based on pattern recognition, while faster, would sacrifice the ability to identify complex, branching, yet still usable gadgets.

#### iTOP’s Analysis Generality
In this work, we focus on COOP-like attacks, similar to [48]. We envision iTOP being used to craft other types of attacks as well. Unlike Newton, iTOP is currently limited to static CFI defenses but can be extended to work with dynamic CFI defenses. Our primary focus in this work was to enhance the expressiveness of our attack specification language (ESL), hence we concentrated on static CFI defenses. To enable iTOP to craft other attack types, the call targets (i.e., gadgets) used within an attack need to be reconsidered so that consecutive instructions (i.e., gadgets) can be targeted by indirect control flow transfers to assemble the gadget chain. The first step is to use an analysis that classifies these gadgets and creates a map of their locations in memory.

#### Tool Potential
Contrary to the common belief that high success rates in automated attack construction indicate tool potential, we argue that this is not the most essential indicator. Attack success depends on the types of gadgets used, and it is less significant to have, for example, 1000 possible attack variations for a single target program than to have one successful attack. In real-world attack creation scenarios, all available tools are used, and only one needs to be successful.

#### Gadget Evaluation
Due to the intrinsic limitations of symbolic execution, reads from, writes to, and jumps to unconstrained addresses cannot be reliably evaluated, as they lead to state explosion issues. Within iTOP, we address this by constraining reads and writes to predefined addresses, though this solution is imperfect and may miss some usable gadgets. Additionally, reads and writes to symbolic file descriptors and I/O in general are challenging to model using symbolic execution, as there is no way to predict which files are present and what they contain during the actual execution of the target program. iTOP addresses this by skipping all functions containing I/O, potentially missing some gadgets. Large gadgets (size > 1k bytes), gadgets containing many calls to other functions, and gadgets requiring symbolic objects larger than 128 bytes to be simulated are also skipped to avoid increased runtime overhead.

#### COOP Attacks
iTOP generates COOP and COOP-like attacks, which do not violate the program stack discipline, thus eliminating the need to bypass shadow stack techniques. We demonstrated that COOP attacks are flexible enough to work around CFI constraints and powerful enough to implement complex control flows. As long as no fully precise class hierarchy-based CFI policy is enforced, our attacks are feasible in most cases.

### 8. Limitations and Future Work

#### Gadget Discovery Time
For large binaries like web browsers, iTOP requires a significant amount of time to generate a payload due to the number of gadgets that need to be evaluated. Future work could involve developing a more precise gadget discovery framework for COOP, COOP-like, or arbitrary attacks, which can pre-calculate the set of usable gadgets for a target binary, providing significant help for attack building frameworks and reducing their domain purely to finding gadget chains.

#### Gadget Search Granularity
iTOP analyzes one function at a time and maps one ESL statement to one gadget. In some cases, multiple ESL statements can be mapped using only one gadget, or multiple gadgets could be combined to fulfill the requirements defined by one ESL statement. While both issues can be mitigated by our gadget chaining algorithm, an analyst must manually specify all alternatives, requiring precise knowledge of iTOP’s limitations. Future work could make iTOP inherently aware of such shortcuts, improving its gadget generation and analysis capabilities, allowing for the construction of more attacks.

#### Attack Probabilities Formula
To carry out an attack, a suitable gadget of each type is needed. These types of gadgets do not necessarily have the same frequencies. For example, 5% of the functions might be suitable as a dispatcher, 20% to write %rdi, and 1% to execute a function. Equation 2 might be too simple, as it does not consider the differences in probabilities. Moreover, a CFI defense does not remove different gadget types at the same rate. A target of an indirect call is relatively likely to be a callback or virtual function, and we cannot assume that this is independent of the gadget types. In future work, we can improve Equation 2 by modeling the frequency distribution of gadgets. In the updated formula, the gadget probabilities will be averaged more accurately, leading to more precise results.

#### Different Attack Types
ESL provides a Python-like API for crafting COOP-like attacks. Future work could extend our DSL-based ESL to implement new attacks, allowing the specification of other attack types. This would make the implementation of other types of attacks (e.g., ROP) relatively easy, enhancing iTOP’s target binary analysis of the assessed CFI policy.

### 9. Related Work

#### Automatic Exploit Generation (AEG)
AEG [6] automatically searches for vulnerabilities in the target binary and generates exploits. Assuming no defenses are in place, AEG is an end-to-end attack crafting tool that first discovers a vulnerability and then tries to generate exploits for both source code and binary programs. Unlike iTOP, AEG finds the vulnerability first and is not designed to operate under strong defenses. AEG has no attack specification language, whereas iTOP is not dependent on the provided vulnerability type and focuses on various attack types, including stack overflows and format string vulnerabilities.

#### Revery
Revery [49] is a dynamic attack crafting tool that analyzes a vulnerable program and collects runtime information on the crashing path, such as taint attributes of variables. Revery is an extension of AEG but focuses on other challenges. Unlike iTOP, Revery analyzes crashing paths and does not require a provided vulnerability. Revery sometimes fails to generate an attack due to complicated defense mechanisms and dynamic decisions during exploitation. Revery does not come with an attack specification language, unlike iTOP.

#### Newton
Newton [48] is a runtime attack crafting tool, while iTOP is a static attack crafting tool. Both provide an attack specification language. Unlike iTOP, which focuses on COOP-like attacks, Newton focuses on other types of attacks as well. Newton uses a more general black-box approach based on dynamic taint analysis and is not limited to COOP attacks. iTOP covers both black-box (i.e., no CFI policy deployed) and white-box (i.e., CFI policy deployed) scenarios during attack construction.

#### BOPC
BOPC [24] is a framework for automatically building data-only attacks that do not violate the control flow of the program. BOPC assesses whether an attacker can perform arbitrary code execution attacks within a binary hardened with CFI and/or shadow stack defenses. Unlike BOPC, iTOP does not address data-only attacks but rather control-flow violating attacks. BOPC searches inside the legitimate CFG of the program for machine code basic blocks, while iTOP searches inside and outside the program CFG for targets that may or may not be protected by a CFI policy, using them as gadgets for constructing COOP-like attacks.

#### Other Tools
Tools such as PSHAPE [15], Kepler [51], ropc [38], ROPGadget [42], Q [44], and work by Wollgast et al. [50] aim to automate the full attack construction process. Unlike iTOP, these tools rely on finding hard-coded sequences of instructions to identify gadgets and can only build pre-determined gadget chains.

### 10. Conclusion
We have presented iTOP, a framework for fully automated construction of control-flow hijacking attacks that can bypass state-of-the-art deployed CFI and shadow stack defenses. iTOP automates the analysis of the target binary, the identification of useful gadgets and gadget dispatch mechanisms, and can build payloads under consideration of state-of-the-art CFI policies. We evaluated iTOP by testing it on seven real-world programs, successfully creating payloads ranging from spawning a shell to loops and conditionals. These payloads have spawned a shell (no CFI policy deployed) for all evaluated binaries and demonstrated that many state-of-the-art CFI policies are too permissive, allowing an attacker with in-depth knowledge of the vulnerable program to construct attacks that bypass these deployed fine-grained CFI defenses.

### Acknowledgments
We are grateful to the anonymous reviewers and our shepherd Erik van der Kouwe, VU Amsterdam, Netherlands, for their help in improving this work. We also thank Chao Zhang, Tsinghua University, P. R. China, and Haohuang Wen, The Ohio State University, USA, for providing insightful feedback on earlier versions of this paper.

### References
[References listed here as in the original text]

This optimized version aims to enhance clarity, coherence, and professionalism in the presentation of the content.