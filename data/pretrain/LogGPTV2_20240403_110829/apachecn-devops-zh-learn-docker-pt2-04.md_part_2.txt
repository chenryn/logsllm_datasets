```
`mynewdir`中的这段文字确认了新映像是用新目录和新文件正确构建的。
在 Docker Hub 中重复登录过程，并推送这个新创建的映像:
```
$ sudo docker login
Login with your Docker ID to push and pull images from Docker Hub. If you don't have a Docker ID, head over to https://hub.docker.com to create one.
Username (vinoddandy): vinoddandy
Password: 
Login Succeeded
$ sudo docker push vinoddandy/dockerfileimageforhub1
The push refers to a repository [docker.io/vinoddandy/dockerfileimageforhub1]
92e394693590: Pushed 
821a2be25576: Pushed 
dca059944a2e: Pushed 
ffb6ddc7582a: Mounted from library/ubuntu 
344f56a35ff9: Mounted from library/ubuntu 
530d731d21e1: Mounted from library/ubuntu 
24fe29584c04: Mounted from library/ubuntu 
102fca64f924: Mounted from library/ubuntu 
latest: digest: sha256:c418c88f260526ec51ccb6422e2c90d0f6fc16f1ab81da9c300160d0e0f7bd87 size: 1979
```
最后，我们可以在 Docker Hub 上验证映像的可用性:
![](img/image_04_007.jpg)
## 自动化映像的构建过程
您学习了如何在本地构建映像并将这些映像推送到 Docker Hub。Docker Hub 还具有从 GitHub 或 Bitbucket 的存储库中保存的`Dockerfile`自动构建映像的能力。GitHub 和 Bitbucket 的私有和公共存储库都支持自动化构建。Docker 中心注册表保存了所有的自动构建映像。Docker Hub 注册表是开源的，可以从[https://github.com/docker/docker-registry](https://github.com/docker/docker-registry)访问。
我们将讨论实现自动化构建过程所需的步骤:
1.  我们首先将 Docker Hub 连接到我们的 GitHub 帐户。
2.  从[https://hub.docker.com/login/](https://hub.docker.com/login/)登录 Docker Hub，点击创建，然后导航至创建自动构建，如下图截图所示:
![](img/image_04_008.jpg)
3.  我们现在将选择链接帐户:
![](img/image_04_009.jpg)
4.  选择 GitHub 后，我们将选择公共和私有(推荐)，如下所示:
![](img/image_04_010.jpg)
点击选择后，您的 GitHub 存储库将会显示出来。
5.  现在，提供 GitHub 凭据，将您的 GitHub 帐户与 Docker Hub 链接起来，并选择登录:
![](img/image_04_011.jpg)
6.  成功登录后，“链接帐户和服务”屏幕如下图所示:
![](img/image_04_012.jpg)
因此，每当在 GitHub 中更新`Dockerfile`时，自动构建就会被触发，一个新的映像将被存储在 Docker Hub 注册表中。我们可以随时检查构建历史。我们可以在本地机器上更改`Dockerfile`并推送到 GitHub。现在，我们可以在[看到 Docker Hub 的自动构建链接:](https://hub.docker.com/r/vinoddandy/dockerautomatedbuild/builds/)
![](img/image_04_013.jpg)
## Docker 集线器上的私有存储库
Docker Hub 提供公共和私有存储库。公共存储库对用户是免费的，私有存储库是付费服务。拥有私有存储库的计划有不同的规模，如微型、小型、中型或大型订阅。
Docker 已经在 https://github.com/docker/docker-registry 向开源发布了其公共存储库代码。
通常，企业不喜欢将其 Docker 映像保存在 Docker 公共或私有存储库中。他们更喜欢保留、维护和支持他们自己的存储库。因此，Docker 还为企业提供了创建和安装自己的存储库的选项。
让我们使用 Docker 提供的`registry`映像在本地机器中创建一个存储库。我们将在本地机器上运行注册表容器，使用来自 Docker 的`registry`映像:
```
$ sudo docker run -p 5000:5000 -d registry 
768fb5bcbe3a5a774f4996f0758151b1e9917dec21aedf386c5742d44beafa41
```
在自动化构建部分，我们构建了`vinoddandy/dockerfileimageforhub1`映像。让我们将`224affbf9a65`映像标识标记到本地创建的注册表映像中。本地存储库中的唯一标识需要对映像进行标记。此映像注册表在存储库中可能有多个变体，因此此标签将帮助您识别特定的映像:
```
$ sudo docker tag 224affbf9a65 \ localhost:5000/vinoddandy/dockerfileimageforhub1  
```
标记完成后，使用`docker push`命令将该映像推送到新的注册表:
```
$ sudo docker push localhost:5000/vinoddandy/dockerfile
imageforhub1
The push refers to a repository [localhost:5000/vinoddandy/dockerfileimageforhub1
] (len: 1)
Sending image list
Pushing repository localhost:5000/vinoddandy/dockerfileimageforhub1 (1 tags)
511136ea3c5a: Image successfully pushed
d497ad3926c8: Image successfully pushed
----------------------------------------------------
224affbf9a65: Image successfully pushed
Pushing tag for rev [224affbf9a65] on {http://localhost:5000/v1/repositories/vinoddandy/dockerfileimageforhub1/tags/latest}  
```
现在，本地存储库中有了新的映像。您可以从本地注册表中检索此映像并运行容器。这个任务留给你去完成。
## Docker 中心的组织和团队
私有存储库的一个有用的方面是，您只能与您的组织或团队成员共享它们。Docker Hub 允许您创建组织，您可以在其中与同事协作并管理私有存储库。接下来，您将学习如何创建和管理组织。
第一步是在[https://hub.docker.com/organizations/add/](https://hub.docker.com/organizations/add/)的 Docker Hub 上创建一个组织，如下图截图所示:
![](img/image_04_014.jpg)
在组织内部，您可以添加更多组织，然后向其中添加成员:
![](img/image_04_015.jpg)
您的组织和组的成员可以与组织和团队协作。这个特性在私有存储库的情况下会更有用。
## Docker 中心的休息应用编程接口
Docker Hub 提供了一个 REST API，通过程序来集成 Hub 的功能。用户和存储库管理都支持 REST 应用编程接口。
用户管理支持以下功能:
*   **用户登录**:用于用户登录 Docker Hub:
```
 GET /v1/users 
 $ curl --raw -L --user vinoddandy:password 
 https://index.docker.io/v1/users 
 4 
 "OK" 
 0 
```
*   **用户注册**:用于注册新用户:
```
 POST /v1/users 
```
*   **更新用户**:用于更新用户密码和电子邮件:
```
 PUT /v1/users/(username)/ 
```
存储库管理支持以下功能:
*   **创建用户存储库**:这将创建用户存储库:
```
 PUT /v1/repositories/(namespace)/(repo_name)/ 
 $ curl --raw -L -X POST --post301 -H 
 "Accept:application/json" -H "Content-Type: 
 application/json" --data-ascii '{"email": 
 "PI:EMAIL", "password": "password", 
 "username": "singhvinod494" }' 
 https://index.docker.io/v1/users 
 e 
 "User created" 
 0 
```
创建存储库后，您的存储库将在此列出，如下图所示:
*   **删除用户库**:删除用户库:
```
 DELETE /v1/repositories/(namespace)/(repo_name)/ 
```
*   **创建库存储库**:这将创建一个库存储库，并且只对 Docker 管理员可用:
```
 PUT /v1/repositories/(repo_name)/ 
```
*   **删除库库**:删除库库，只对 Docker 管理员可用:
```
 DELETE /v1/repositories/(repo_name)/ 
```
*   **更新用户存储库映像**:这将更新用户存储库的映像:
```
 PUT /v1/repositories/(namespace)/(repo_name)/images 
```
*   **列出用户存储库映像**:这列出了用户存储库中的映像:
```
 GET /v1/repositories/(namespace)/(repo_name)/images 
```
*   **更新库存储库映像**:这将更新库存储库中的映像:
```
 PUT /v1/repositories/(repo_name)/images 
```
*   **列出库存储库映像**:这列出了库存储库中的映像:
```
 GET /v1/repositories/(repo_name)/images 
```
*   **授权库存储库的令牌**:这授权库存储库的令牌:
```
 PUT /v1/repositories/(repo_name)/auth 
```
*   **授权用户存储库的令牌**:授权用户存储库的令牌:
```
 PUT /v1/repositories/(namespace)/(repo_name)/auth 
```
## 摘要
Docker 映像是用于导出真实世界 Docker 容器的最突出的构建块，这些容器可以作为服务通过任何网络公开。开发人员可以查找和检查映像的独特功能，并根据自己的目的使用它们来创建高度可用、可公开发现、可通过网络访问和可认知组合的容器。所有精心制作的映像都需要放在公共注册表存储库中。在本章中，我们清楚地解释了如何在存储库中发布映像。我们还讨论了可信存储库及其独特的特性。最后，我们演示了如何利用存储库的 REST API，以编程方式推进和处理 Docker 映像和用户管理。
Docker 映像需要存储在一个公共的、可控的、可通过网络访问的位置，以便全球软件工程师和系统管理员能够轻松找到和利用。Docker Hub 被吹捧为集中聚合、策划和管理 Docker 映像的同类最佳方法，源自 Docker 爱好者(内部和外部)。然而，企业负担不起将其 Docker 映像保存在公共域中的费用，因此下一章将专门解释在私有 IT 基础架构中部署和管理映像所需的步骤。