Certificates are used for doing comparisons against other applications claiming to be written by the same author
in order to establish trust relationships as well as for accepting application updates. This security model depends
highly on the operating system’s ability to compare these application certificates and deny forged applications
the associated privilege of a certain certificate. This chapter provides more concrete examples later when the
permission model is introduced and protection levels are discussed. As noted by Nikolay Elenkov in a blog post
at http://nelenkov.blogspot.com/2013/05/code-signing-in-androids-security-model.html, the certificate
check is a literal binary comparison of the two certificates being compared. The function that handles this check
is in /core/java/android/content/pm/Signature.java of the Android source tree, and the specific check is
highlighted in the code:
@Override
public boolean equals(Object obj) {
try {
if (obj != null) {
Signature other = (Signature)obj;
return this == otherǁ Arrays.equals(mSignature,
other.mSignature
}
} catch (ClassCastException e) {
}
return false;
}
This means that issuing an update for your application is only possible if it has been signed with exactly the
same certificate. If a developer loses his signing certificate, he can no longer issue updates to his users. Instead,
he would have to publish their latest application update as a new application that has been signed with their
new certificate. This means that users would have to re-download the newly published application as if it were a
new application altogether. This speaks to the importance of keeping your signing certificate safe and backed up
appropriately.
For the official Android Developer documentation from which some of this information has been taken, please
visit http://developer.android.com/tools/publishing/app-signing.html.
Discovered Vulnerabilities
A number of vulnerabilities have been discovered in the way that the validation of signatures is performed on
APK files. The presented vulnerabilities affect devices up to and including Android 4.3.
Google Bug #8219321—”Master Key” Vulnerability
In February 2013, Bluebox Security discovered the first vulnerability in the way that Android application
contents are cryptographically verified. This is commonly known as the “Master Key” vulnerability. The
discovered bug allowed for the arbitrary modification of an APK file without invalidating the cryptographic
signature.
The vulnerability was that if a duplicate filename occurred in the zip archive, only the first file entry’s hash was
checked. The MANIFEST.MF file included in each APK contains all the hashes of each file present in the rest of the
archive. Here is an example:
$ cat META-INF/MANIFEST.MF
Manifest-Version: 1.0
Created-By: 1.0 (Android SignApk)
Name: res/layout-land/activity_main.xml
SHA1-Digest: tHBSzedjV31QNPH6RbNFbk5BW0g=
Name: res/drawable-xhdpi/ic_launcher.png
SHA1-Digest: itzF8BBhIB+iXXF/RtrTdHKjd0A=
...
Name: AndroidManifest.xml
SHA1-Digest: HoN6bMMe9RH6KHGajGz3Bn/fWWQ=
...
Name: classes.dex
SHA1-Digest: 6R7zbiNfV8Uxty8bvi4VHpB7A8I=
...
However, it is possible in the zip format to include two files with the same name. This bug exploits the fact that
the hash of the first file is checked in Java code, but then the second file with the same name ends up being
used by the C++ implementation when deployed to the device. This means that the second file can contain
completely new contents and the validation of the APK still passes all checks. This vulnerability makes taking a
legitimate application and including malicious code without breaking the signature possible. This vulnerability
can also be used to gain system (and sometimes root) access on a device by modifying and reinstalling a system
application. This use case is explained later in this chapter in “Root Explained”.
A basic proof of concept was created by Pau Oliva to demonstrate how simple the process is to repackage an APK
with modified code without breaking the signature. You can find it at
https://gist.github.com/poliva/36b0795ab79ad6f14fd8. A more comprehensive tool that exploits this issue
and other discovered code signing vulnerabilities was written by Ryan Welton and is at
https://github.com/Fuzion24/AndroidZipArbitrage/.
Google Bug #9695860
Just two days after bug #8219321 was revealed, a patch was committed (see
https://android.googlesource.com/platform/libcore/+/9edf43dfcc35c761d97eb9156ac4254152ddbc55%5E%21/)
that revealed another way that could be used to manipulate an APK to the same effect as the Master Key bug.
This time, the vulnerability existed in the way that the length of the “extra” field in the local file headers of an
entry in the zip archive was calculated in code. Figure 6.8 shows a simplified view of a zip archive containing a
single file.
Figure 6.8 The simplified structure of a zip file containing a single file entry.
The format provides for a 16-bit length “extra” field, but in the Java code the length was read as a signed 16-bit
number. This meant that overflowing this value into a negative length was possible. Exploitation techniques
presented by the community were quite involved but putting it simply, the discrepancy between how the Java
and C++ implementation parsed these values allowed for the injection of altered files that passed the signature
validation. Jay Freeman covers various exploitation techniques in detail at http://www.saurik.com/id/18.
Google Bug #9950697
In July 2013, another vulnerability affecting signature verification of packages was patched by Google. To find
the exact commit go to
https://android.googlesource.com/platform/libcore/+/2da1bf57a6631f1cbd47cdd7692ba8743c993ad9%5E%21/.
The length of the “name” field in the local file headers of an entry in the zip file was found to not be checked by
the Java verification code. Rather, this length was calculated from another place in the zip file, known as the
“central directory.” This can be exploited by setting a large “name” value in the local file header, which is not
checked by the Java implementation, and putting the correct “name” in the “central directory.” The C++ code
checks the local file header and executes code that is appended. However, the Java code verifies the signature of
the entry according to the length of the “name” in the “central directory.” Building an archive with entries that
satisfy both conditions and allow for the execution of arbitrary code while maintaining the signatures of the files
in the package is therefore possible. Once again, Jay Freeman provides an excellent in-depth write-up of this
issue at http://www.saurik.com/id/19.
Understanding Permissions
Imagine if every application you have installed on your device could access your contacts, SMS messages, GPS
location, or any other information. This would be a scary prospect in a world where the average Android user
has 26 or more applications installed (according to http://www.statista.com/topics/1002/mobile-app-
usage/chart/1435/top-10-countries-by-app-usage/). This section will discuss how Android implements its
permission model and assigns applications the rights to request access to device resources.
Inspecting the Android Permission Model
Android employs a fine-grained privilege model for applications. Applications have to request “permission” to
access certain information and resources on a device. A user who installs an application from the Play Store is
presented with an activity displaying the types of information and hardware that the application can access on
your device. However, this information is abstracted away from the technical details in newer versions of the
Play Store and does not display the details of the actual permission requested. Figure 6.9 shows an example of
clicking the “Permission details” option in the Play Store on the Twitter (https://twitter.com/) application.
Figure 6.9 The required permissions displayed when looking at the permission details on the Twitter
application.
Each defined permission has a unique name that is used when referring to it in code as well as a friendly label
and a more verbose description about what it is for. This means that when an application permission activity
shows “Read your text messages (SMS or MMS)” that it actually translates back to the permission with the
name android.permission.READ_SMS. If you examine the AndroidManifest .xml file associated with an
application, notice the XML describing the defined and requested permissions respectively as  and
 tags.
In drozer, to find the permissions that have been requested and defined by a certain application, run the
app.package.info module with the package name as the argument (in this case the Android browser):
dz> run app.package.info -a com.android.browser
Package: com.android.browser
Application Label: Browser
Process Name: com.android.browser
Version: 4.4.2-938007
Data Directory: /data/data/com.android.browser
APK Path: /system/app/Browser.apk
UID: 10014
GID: [3003, 1028, 1015]
Shared Libraries: null
Shared User ID: null
Uses Permissions:
- android.permission.ACCESS_COARSE_LOCATION
- android.permission.ACCESS_DOWNLOAD_MANAGER
- android.permission.ACCESS_FINE_LOCATION
- android.permission.ACCESS_NETWORK_STATE
- android.permission.ACCESS_WIFI_STATE
- android.permission.GET_ACCOUNTS
- android.permission.USE_CREDENTIALS
- android.permission.INTERNET
- android.permission.NFC
- android.permission.SEND_DOWNLOAD_COMPLETED_INTENTS
- android.permission.SET_WALLPAPER
- android.permission.WAKE_LOCK
- android.permission.WRITE_EXTERNAL_STORAGE
- android.permission.WRITE_SETTINGS
- android.permission.READ_SYNC_SETTINGS
- android.permission.WRITE_SYNC_SETTINGS
- android.permission.MANAGE_ACCOUNTS
- android.permission.READ_PROFILE
- android.permission.READ_CONTACTS
- com.android.browser.permission.READ_HISTORY_BOOKMARKS
- com.android.browser.permission.WRITE_HISTORY_BOOKMARKS
- com.android.launcher.permission.INSTALL_SHORTCUT
- android.permission.READ_EXTERNAL_STORAGE
Defines Permissions:
- com.android.browser.permission.PRELOAD
Searching for applications that have requested a particular permission using the permission filter is also
possible. For verbose package information, make use of the app.package.info module or for a short list, use
app.package.list in the following manner, providing the permission of interest as a parameter:
dz> run app.package.list -p android.permission.READ_SMS
com.android.phone (Phone)
com.android.mms (Messaging)
com.android.gallery (Camera)
com.android.camera (Camera)
Requesting certain permissions may cause the application’s user identifier to be added to a Linux group. For
instance, requesting the permission android.permission.INTERNET puts the application in the inet group. This
mapping is shown here:
These mappings are defined in /system/etc/permissions/platform.xml. Other permissions may not equate to
any group amendments being made and are simply a form of access control. For instance, the READ_SMS
permission does not allow the application to read the SMS database directly, but rather allows it to query
content://sms and other related content providers. The following drozer command allows a user to query which
content providers require the READ_SMS permission:
dz> run app.provider.info -p android.permission.READ_SMS
Package: com.android.mms
Authority: com.android.mms.SuggestionsProvider
Read Permission: android.permission.READ_SMS
Write Permission: null
Content Provider: com.android.mms.SuggestionsProvider
Multiprocess Allowed: False
Grant Uri Permissions: False
Path Permissions:
Path: /search_suggest_query
Type: PATTERN_PREFIX
Read Permission: android.permission.GLOBAL_SEARCH
Write Permission: null
Path: /search_suggest_shortcut
Type: PATTERN_PREFIX
Read Permission: android.permission.GLOBAL_SEARCH
Write Permission: null
Package: com.android.providers.telephony
Authority: mms
Read Permission: android.permission.READ_SMS
Write Permission: android.permission.WRITE_SMS
Content Provider: com.android.providers.telephony.MmsProvider
Multiprocess Allowed: False
Grant Uri Permissions: True
Uri Permission Patterns:
Path: /part/
Type: PATTERN_PREFIX
Path: /drm/
Type: PATTERN_PREFIX
Authority: sms
Read Permission: android.permission.READ_SMS
Write Permission: android.permission.WRITE_SMS
Content Provider: com.android.providers.telephony.SmsProvider
Multiprocess Allowed: False
Grant Uri Permissions: False
Authority: mms-sms
Read Permission: android.permission.READ_SMS
Write Permission: android.permission.WRITE_SMS
Content Provider: com.android.providers.telephony.MmsSmsProvider
Multiprocess Allowed: False
Grant Uri Permissions: False
...
When an application attempts to access one of the content providers listed previously, the operating system will
check that the calling application holds the required permission. If it does not hold the appropriate permission,
a permission denial results. An example of querying content://sms from drozer, which does not hold the
READ_SMS permission by default, is shown here:
dz> run app.provider.query content://sms
Permission Denial: opening provider
com.android.providers.telephony.SmsProvider from ProcessRecord{b1ff0638
1312:com.mwr.dz:remote/u0a56} (pid=1312, uid=10056) requires
android.permission.READ_SMS or android.permission.WRITE_SMS
Protection Levels
Each permission that is defined has an associated attribute known as its protection level. Protection levels
control the conditions under which other applications can request the permission. Naturally, some permissions
are more dangerous than others and this should reflect in the assigned protection level. For instance, third-party
applications should never be granted the ability to install new applications (using the
android.permission.INSTALL_PACKAGES permission) and the system should not allow it. An author of a number
of applications may want to share information or invoke functionality between her applications at runtime in a
secure manner. Both of these scenarios can be achieved by selecting the correct protection level on defined
permissions. Table 6.2 describes all the available protection levels that can be set on a newly defined permission.
Table 6.2 Permission Protection Levels
PROTECTION INTEGER DESCRIPTION
LEVEL VALUE
normal 0x0 The default value for a permission. Any application may request a permission
with this protection level.
dangerous 0x1 Indicates that this permission has the ability to access some potentially
sensitive information or perform actions on the device. Any application may
request a permission with this protection level.
signature 0x2 Indicates that this permission can only be granted to another application that
was signed with the same certificate as the application that defined the
permission.
signatureOrSystem 0x3 This is the same as the signature protection level, except that the permission
can also be granted to an application that came with the Android system image
or any other application that is installed on the /system partition.
system 0x10 This permission can only be granted to an application that came with the
Android system image or any other application that is installed in particular
folders on the /system partition.
development 0x20 This permission can be granted from a privileged context to an application at
runtime. This scarcely documented feature was discussed at
https://code.google.com/p/android/issues/detail?id=34785.
As a practical example of protection levels in action, take a look at what happens when you compile a new drozer
agent with the INSTALL_PACKAGES permission and attempt to install it.
$ drozer agent build --permission android.permission.INSTALL_PACKAGES
Done: /tmp/tmp2RdLTd/agent.apk
$ adb install /tmp/tmp2RdLTd/agent.apk
2312 KB/s (653054 bytes in 0.275s)
pkg: /data/local/tmp/agent.apk
Success
The package installs successfully but logcat shows a log entry from the Package Manager saying the following:
W/PackageManager( 373): Not granting permission
android.permission.INSTALL_PACKAGES to package com.mwr.dz
(protectionLevel=18 flags=0x83e46)
It refused to grant the INSTALL_PACKAGES permission. This can be confirmed in drozer by displaying the
permissions held by the agent:
dz> permissions
Has ApplicationContext: YES
Available Permissions:
- android.permission.INTERNET
It is quite obvious that this happened because of the protection level set on the INSTALL_PACKAGES permission,