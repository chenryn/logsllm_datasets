### Certificates and Trust Relationships

Certificates play a crucial role in establishing trust relationships and facilitating application updates. They are used to verify the authenticity of applications, ensuring that updates come from the same author. This security model relies heavily on the operating system's ability to compare these certificates and deny privileges to any forged applications.

#### Certificate Comparison

As noted by Nikolay Elenkov in his blog post [here](http://nelenkov.blogspot.com/2013/05/code-signing-in-androids-security-model.html), the certificate check is a binary comparison of the two certificates. The function responsible for this comparison is found in `/core/java/android/content/pm/Signature.java` of the Android source tree. Here is the relevant code snippet:

```java
@Override
public boolean equals(Object obj) {
    try {
        if (obj != null) {
            Signature other = (Signature)obj;
            return this == other || Arrays.equals(mSignature, other.mSignature);
        }
    } catch (ClassCastException e) {
        // Handle exception
    }
    return false;
}
```

This means that an application update can only be issued if it is signed with the exact same certificate as the original. If a developer loses their signing certificate, they will no longer be able to issue updates. Instead, they would need to publish the update as a new application, signed with a new certificate, requiring users to re-download the application. This underscores the importance of securely storing and backing up the signing certificate.

For more information, refer to the official Android Developer documentation [here](http://developer.android.com/tools/publishing/app-signing.html).

### Discovered Vulnerabilities

Several vulnerabilities have been discovered in the way APK files are validated. These vulnerabilities affect devices up to and including Android 4.3.

#### Google Bug #8219321: "Master Key" Vulnerability

In February 2013, Bluebox Security discovered a vulnerability in the cryptographic verification of Android application contents, known as the "Master Key" vulnerability. This bug allowed for the arbitrary modification of an APK file without invalidating its cryptographic signature.

The vulnerability exploited the fact that if a duplicate filename occurred in the zip archive, only the first file entry's hash was checked. The `MANIFEST.MF` file in each APK contains the hashes of all files. However, the zip format allows for two files with the same name. The Java code checks the hash of the first file, but the C++ implementation uses the second file when deployed, allowing for the inclusion of malicious code without breaking the signature.

A proof of concept by Pau Oliva demonstrates the simplicity of repackaging an APK with modified code. You can find it [here](https://gist.github.com/poliva/36b0795ab79ad6f14fd8). A more comprehensive tool exploiting this and other vulnerabilities was written by Ryan Welton and is available [here](https://github.com/Fuzion24/AndroidZipArbitrage/).

#### Google Bug #9695860

Just two days after the "Master Key" bug was revealed, another patch was committed, revealing a similar vulnerability. This time, the issue was in the way the length of the "extra" field in the local file headers of a zip entry was calculated. The Java code read this length as a signed 16-bit number, allowing for overflow into a negative length. This discrepancy between the Java and C++ implementations allowed for the injection of altered files that passed signature validation. Jay Freeman provides a detailed explanation [here](http://www.saurik.com/id/18).

#### Google Bug #9950697

In July 2013, another vulnerability affecting signature verification was patched. The issue was that the length of the "name" field in the local file headers was not checked by the Java verification code. Instead, this length was calculated from the "central directory." Exploiting this, one could set a large "name" value in the local file header and a correct "name" in the "central directory," allowing for the execution of arbitrary code while maintaining the signatures. Jay Freeman also covers this issue in detail [here](http://www.saurik.com/id/19).

### Understanding Permissions

Imagine if every application on your device could access your contacts, SMS messages, GPS location, or any other sensitive information. This would be a significant security risk, especially given that the average Android user has 26 or more applications installed. This section discusses how Android implements its permission model to control access to device resources.

#### Inspecting the Android Permission Model

Android employs a fine-grained privilege model where applications must request permissions to access specific information and resources. When a user installs an application, they are presented with a list of permissions the application requires. For example, the Twitter application might request permissions such as "Read your text messages (SMS or MMS)," which translates to the permission `android.permission.READ_SMS`.

To view the permissions requested and defined by an application, you can use the `app.package.info` module in drozer. For instance, running `dz> run app.package.info -a com.android.browser` will display the permissions for the Android browser.

You can also search for applications that have requested a particular permission using the `app.package.list` module. For example, `dz> run app.package.list -p android.permission.READ_SMS` will list all applications that require the `READ_SMS` permission.

#### Requesting Permissions and Linux Groups

Requesting certain permissions may add the application's user identifier to a Linux group. For example, requesting `android.permission.INTERNET` adds the application to the `inet` group. These mappings are defined in `/system/etc/permissions/platform.xml`.

Other permissions, like `READ_SMS`, do not directly allow the application to read the SMS database but instead grant access to content providers like `content://sms`. To query which content providers require a specific permission, you can use the `app.provider.info` module. For example, `dz> run app.provider.info -p android.permission.READ_SMS` will show the relevant content providers.

#### Protection Levels

Each permission has an associated protection level that controls the conditions under which other applications can request the permission. Table 6.2 summarizes the available protection levels:

| PROTECTION LEVEL | INTEGER VALUE | DESCRIPTION |
|------------------|---------------|-------------|
| normal           | 0x0           | Any application may request this permission. |
| dangerous        | 0x1           | This permission can access potentially sensitive information. Any application may request this permission. |
| signature        | 0x2           | This permission can only be granted to an application signed with the same certificate as the defining application. |
| signatureOrSystem | 0x3          | This is the same as the signature protection level, except the permission can also be granted to applications on the /system partition. |
| system           | 0x10          | This permission can only be granted to applications that came with the Android system image or are installed in specific /system folders. |
| development      | 0x20          | This permission can be granted from a privileged context at runtime. |

As an example, attempting to compile a new drozer agent with the `INSTALL_PACKAGES` permission and install it will result in the Package Manager refusing to grant the permission due to its protection level. This can be confirmed by checking the permissions held by the agent in drozer.

```bash
$ drozer agent build --permission android.permission.INSTALL_PACKAGES
Done: /tmp/tmp2RdLTd/agent.apk
$ adb install /tmp/tmp2RdLTd/agent.apk
2312 KB/s (653054 bytes in 0.275s)
pkg: /data/local/tmp/agent.apk
Success
W/PackageManager( 373): Not granting permission android.permission.INSTALL_PACKAGES to package com.mwr.dz (protectionLevel=18 flags=0x83e46)
```

Running `dz> permissions` in drozer will confirm that the `INSTALL_PACKAGES` permission was not granted.

This highlights the importance of understanding and correctly setting protection levels for permissions in Android applications.