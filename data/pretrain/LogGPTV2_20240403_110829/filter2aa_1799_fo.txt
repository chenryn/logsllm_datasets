+0x908 DbgUtcBootTime   : 0y0
+0x908 DbgRtcBootTime   : 0y1
+0x908 DbgNoLegacyServices : 0y0
822 
CHAPTER 12 Startup and shutdown
executed by the boot processor, pnleeue relies on the function responsible for orchestrat-
ing phase 0, nressr, while subsequent processors call only nOerressrs.
Note Return-oriented programming (ROP) is an exploitation techniue in which an attacker 
gains control of the call stack of a program with the goal of hijacking its control flow and 
executes carefully chosen machine instruction sequences, called “gadgets,” that are already 
present in the machine’s memory. Chained together, multiple gadgets allow an attacker to 
perform arbitrary operations on a machine.
nressr starts by validating the boot loader. If the boot loader version used to launch 
Windows doesn’t correspond to the right Windows kernel, the function crashes the system with a 
OO bugcheck code (0x100). Otherwise, it initializes the pool look-aside point-
ers for the initial CPU and checks for and honors the BCD urnery boot option, where it discards 
the amount of physical memory the value specifies. It then performs enough initialization of the NLS 
files that were loaded by Winload (described earlier) to allow Unicode to ANSI and OEM translation 
to work. Next, it continues by initializing Windows ardware Error Architecture (WEA) and calling 
the AL function lnyse, which gives the AL a chance to gain system control before Windows 
performs significant further initialization. lnyse is responsible for initializing and starting vari-
ous components of the AL, like ACPI tables, debugger descriptors, DMA, firmware, I/O MMU, System 
Timers, CPU topology, performance counters, and the PCI bus. One important duty of lnyse is 
to prepare each CPU interrupt controller to receive interrupts and to configure the interval clock timer 
interrupt, which is used for CPU time accounting. (See the section Quantum in Chapter 4, Threads, 
in Part 1 for more on CPU time accounting.)
When lnyse exits, nressr proceeds by computing the reciprocal for clock timer 
expiration. Reciprocals are used for optimizing divisions on most modern processors. They can perform 
multiplications faster, and because Windows must divide the current 64-bit time value in order to find 
out which timers need to expire, this static calculation reduces interrupt latency when the clock interval 
fires. nressr uses a helper routine, nyse, to fetch registry values from the control 
vector of the SSTEM hive. This data structure contains more than 150 kernel-tuning options that are 
part of the KLMSSTEMCurrentControlSetControl registry key, including information such as the 
licensing data and version information for the installation. All the settings are preloaded and stored 
in global variables. nressr then continues by setting up the system root path and search-
ing into the kernel image to find the crash message strings it displays on blue screens, caching their 
location to avoid looking them up during a crash, which could be dangerous and unreliable. Next, 
nressr initializes the timer subsystem and the shared user data page.
nressr is now ready to call the phase 0 initialization routines for the executive, Driver 
Verifier, and the memory manager. These components perform the following initialization tasks
1.
The executive initializes various internal locks, resources, lists, and variables and validates that
the product suite type in the registry is valid, discouraging casual modification of the registry to
upgrade to an SKU of Windows that was not actually purchased. This is only one of the many
such checks in the kernel.
CHAPTER 12 Startup and shutdown
823
2.
Driver Verifier, if enabled, initializes various settings and behaviors based on the current state of
the system (such as whether safe mode is enabled) and verification options. It also picks which
drivers to target for tests that target randomly chosen drivers.
3.
The memory manager constructs the page tables, PFN database, and internal data structures
that are necessary to provide basic memory services. It also enforces the limit of the maximum
supported amount of physical memory and builds and reserves an area for the system file
cache. It then creates memory areas for the paged and nonpaged pools (described in Chapter
5 in Part 1). Other executive subsystems, the kernel, and device drivers use these two memory
pools for allocating their data structures. It finally creates the UltraSpace, a 16 TB region that
provides support for fast and inexpensive page mapping that doesn’t reuire TLB flushing.
Next, nressr enables the hypervisor CPU dynamic partitioning (if enabled and correctly 
licensed), and calls lnles to set up the old BIOS emulation code part of the AL. This code is 
used to allow access (or to emulate access) to 16-bit real mode interrupts and memory, which are used 
mainly by Bootvid (this driver has been replaced by BGFX but still exists for compatibility reasons). 
At this point, nressr enumerates the boot-start drivers that were loaded by Winload 
and calls eyls to inform the kernel debugger (if attached) to load symbols for 
each of these drivers. If the host debugger has configured the break on symbol load option, this will 
be the earliest point for a kernel debugger to gain control of the system. nressr now calls 
lsenle, which performs the remaining VL initialization that hasn’t been possible to com-
plete in previous phases. When the function returns, it calls elessn to initialize the serial console if 
the machine was configured for Emergency Management Services (EMS).
Next, nressr builds the versioning information that will be used later in the boot process, 
such as the build number, service pack version, and beta version status. Then it copies the NLS tables 
that Winload previously loaded into the paged pool, reinitializes them, and creates the kernel stack 
trace database if the global flags specify creating one. (For more information on the global flags, see 
Chapter 6, I/O system, in Part 1.)
Finally, nressr calls the object manager, security reference monitor, process manager, 
user-mode debugging framework, and Plug and Play manager. These components perform the follow-
ing initialization steps
1.
During the object manager initialization, the objects that are necessary to construct the object
manager namespace are defined so that other subsystems can insert objects into it. The system
process and the global kernel handle tables are created so that resource tracking can begin.
The value used to encrypt the object header is calculated, and the Directory and SymbolicLink
object types are created.
2.
The security reference monitor initializes security global variables (like the system SIDs and
Privilege LUIDs) and the in-memory database, and it creates the token type object. It then cre-
ates and prepares the first local system account token for assignment to the initial process. (See
Chapter 7 in Part 1 for a description of the local system account.)
3.
The process manager performs most of its initialization in phase 0, defining the process, thread,
job, and partition object types and setting up lists to track active processes and threads. The
824 
CHAPTER 12 Startup and shutdown
systemwide process mitigation options are initialized and merged with the options specified 
in the KLMSSTEMCurrentControlSetControlSession ManagerKernelMitigationOptions 
registry value. The process manager then creates the executive system partition object, which 
is called MemoryPartition0. The name is a little misleading because the object is actually an 
executive partition object, a new Windows object type that encapsulates a memory partition 
and a cache manager partition (for supporting the new application containers). 
4.
The process manager also creates a process object for the initial process and names it idle. As
its last step, the process manager creates the System protected process and a system thread to
execute the routine senln. This thread doesn’t start running right away because
interrupts are still disabled. The System process is created as protected to get protection from
user mode attacks, because its virtual address space is used to map sensitive data used by the
system and by the Code Integrity driver. Furthermore, kernel handles are maintained in the system 
process’s handle table.
5.
The user-mode debugging framework creates the definition of the debug object type that is
used for attaching a debugger to a process and receiving debugger events. For more informa-
tion on user-mode debugging, see Chapter 8, System mechanisms.
6.
The Plug and Play manager’s phase 0 initialization then takes place, which involves initializing
an executive resource used to synchronize access to bus resources.
When control returns to nleernel, the last step is to allocate the DPC stack for the current 
processor, raise the IRQL to dispatch level, and enable the interrupts. Then control proceeds to the Idle 
loop, which causes the system thread created in step 4 to begin executing phase 1. (Secondary proces-
sors wait to begin their initialization until step 11 of phase 1, which is described in the following list.)
Kernel initialization phase 1
As soon as the Idle thread has a chance to execute, phase 1 of kernel initialization begins. Phase 1 
consists of the following steps
1.
senlnsr, as the name implies, discards the code that is part of the INIT sec-
tion of the kernel image in order to preserve memory.
2.
The initialization thread sets its priority to 31, the highest possible, to prevent preemption.
3.
The BCD option that specifies the maximum number of virtual processors (hypervisorrootproc)
is evaluated.
4.
The NUMA/group topology relationships are created, in which the system tries to come up with
the most optimized mapping between logical processors and processor groups, taking into
account NUMA localities and distances, unless overridden by the relevant BCD settings.
5.
lnyse performs phase 1 of its initialization. It prepares the system to accept interrupts
from external peripherals.
6.
The system clock interrupt is initialized, and the system clock tick generation is enabled.
CHAPTER 12 Startup and shutdown
825
7. 
The old boot video driver (bootvid) is initialized. It’s used only for printing debug messages and
messages generated by native applications launched by SMSS, such as the NT chkdsk.
8.
The kernel builds various strings and version information, which are displayed on the boot
screen through Bootvid if the sos boot option was enabled. This includes the full version infor-
mation, number of processors supported, and amount of memory supported.
9.
The power manager’s initialization is called.
10. The system time is initialized (by calling lueryelel) and then stored as the time
the system booted.
11. On a multiprocessor system, the remaining processors are initialized by erllressrs
and HalAllProcessorsStarted. The number of processors that will be initialized and supported
depends on a combination of the actual physical count, the licensing information for the
installed SKU of Windows, boot options such as nupr and bootproc, and whether dynamic
partitioning is enabled (server systems only). After all the available processors have initialized,
the affinity of the system process is updated to include all processors.
12. The object manager initializes the global system silo, the per-processor nonpaged lookaside
lists and descriptors, and base auditing (if enabled by the system control vector). It then cre-
ates the namespace root directory (), KernelObjects directory, ObjectTypes directory, and
the DOS device name mapping directory (Global), with the Global and GLOBALROOT links
created in it. The object manager then creates the silo device map that will control the DOS
device name mapping and attach it to the system process. It creates the old DosDevices sym-
bolic link (maintained for compatibility reasons) that points to the Windows subsystem device
name mapping directory. The object manager finally inserts each registered object type in the
ObjectTypes directory object.
13. The executive is called to create the executive object types, including semaphore, mutex, event,
timer, keyed event, push lock, and thread pool worker.
14. The I/O manager is called to create the I/O manager object types, including device, driver, con-
troller, adapter, I/O completion, wait completion, and file objects.
15. The kernel initializes the system watchdogs. There are two main types of watchdog the DPC
watchdog, which checks that a DPC routine will not execute more than a specified amount of
time, and the CPU Keep Alive watchdog, which verifies that each CPU is always responsive. The
watchdogs aren’t initialized if the system is executed by a hypervisor.
16. The kernel initializes each CPU processor control block (KPRCB) data structure, calculates the
Numa cost array, and finally calculates the System Tick and Quantum duration.
17. The kernel debugger library finalizes the initialization of debugging settings and parameters,
regardless of whether the debugger has not been triggered prior to this point.
18. The transaction manager also creates its object types, such as the enlistment, resource man-
ager, and transaction manager types.
19. The user-mode debugging library (Dbgk) data structures are initialized for the global system silo.
826 
CHAPTER 12 Startup and shutdown
20. If driver verifier is enabled and, depending on verification options, pool verification is enabled,
object handle tracing is started for the system process.
21. The security reference monitor creates the Security directory in the object manager namespace,
protecting it with a security descriptor in which only the SYSTEM account has full access, and
initializes auditing data structures if auditing is enabled. Furthermore, the security reference
monitor initializes the kernel-mode SDDL library and creates the event that will be signaled
after the LSA has initialized (SecurityLSAAUTENTICATIONINITIALIED).
Finally, the Security Reference Monitor initializes the Kernel Code Integrity component (Ci.dll)
for the first time by calling the internal nle routine, which initializes all the Code Integrity
Callbacks and saves the list of boot drivers for further auditing and verification.
22. The process manager creates a system handle for the executive system partition. The handle
will never be dereferenced, so as a result the system partition cannot be destroyed. The Process
Manager then initializes the support for kernel optional extension (more details are in step 26).
It registers host callouts for various OS services, like the Background Activity Moderator (BAM),
Desktop Activity Moderator (DAM), Multimedia Class Scheduler Service (MMCSS), Kernel
ardware Tracing, and Windows Defender System Guard.
Finally, if VSM is enabled, it creates the first minimal process, the IUM System Process, and
assigns it the name Secure System.
23. The SystemRoot symbolic link is created.
24. The memory manager is called to perform phase 1 of its initialization. This phase creates the
Section object type, initializes all its associated data structures (like the control area), and
creates the DevicePhysicalMemory section object. It then initializes the kernel Control Flow
Guard support and creates the pagefile-backed sections that will be used to describe the user
mode CFG bitmap(s). (Read more about Control Flow Guard in Chapter 7, Part 1.) The memory
manager initializes the Memory Enclave support (for SGX compatible systems), the hot-patch
support, the page-combining data structures, and the system memory events. Finally, it spawns
three memory manager system worker threads (Balance Set Manager, Process Swapper, and
ero Page Thread, which are explained in Chapter 5 of Part 1) and creates a section object used
to map the API Set schema memory buffer in the system space (which has been previously al-
located by the Windows Loader). The just-created system threads have the chance to execute
later, at the end of phase 1.
25. NLS tables are mapped into system space so that they can be mapped easily by user-mode
processes.
26. The cache manager initializes the file system cache data structures and creates its worker threads.
27. The configuration manager creates the Registry key object in the object manager namespace
and opens the in-memory SSTEM hive as a proper hive file. It then copies the initial hardware
tree data passed by Winload into the volatile ARDWARE hive.
28. The system initializes Kernel Optional Extensions. This functionality has been introduced in
Windows 8.1 with the goal of exporting private system components and Windows loader data
CHAPTER 12 Startup and shutdown
827
(like memory caching reuirements, UEFI runtime services pointers, UEFI memory map, SMBIOS 
data, secure boot policies, and Code Integrity data) to different kernel components (like the 
Secure Kernel) without using the standard PE (portable executable) exports.
29. The errata manager initializes and scans the registry for errata information, as well as the
INF (driver installation file, described in Chapter 6 of Part 1) database containing errata for
various drivers.
30. The manufacturing-related settings are processed. The manufacturing mode is a special
operating system mode that can be used for manufacturing-related tasks, such as compo-
nents and support testing. This feature is used especially in mobile systems and is provided by
the UEFI subsystem. If the firmware indicates to the OS (through a specific UEFI protocol) that
this special mode is enabled, Windows reads and writes all the needed information from the
KLMSystemCurrentControlSetControlManufacturingMode registry key.
31. Superfetch and the prefetcher are initialized.
32. The Kernel Virtual Store Manager is initialized. The component is part of memory compression.
33. The VM Component is initialized. This component is a kernel optional extension used to com-
municate with the hypervisor.
34. The current time zone information is initialized and set.
35. Global file system driver data structures are initialized.
36. The NT Rtl compression engine is initialized.
37. The support for the hypervisor debugger, if needed, is set up, so that the rest of the system
does not use its own device.
38. Phase 1 of debugger-transport-specific information is performed by calling the
euernle routine in the registered transport, such as Kdcom.dll.
39. The advanced local procedure call (ALPC) subsystem initializes the ALPC port type and ALPC
waitable port type objects. The older LPC objects are set as aliases.
40. If the system was booted with boot logging (with the BCD l option), the boot log file
is initialized. If the system was booted in safe mode, it finds out if an alternate shell must be
launched (as in the case of a safe mode with command prompt boot).
41. The executive is called to execute its second initialization phase, where it configures part of the
Windows licensing functionality in the kernel, such as validating the registry settings that hold
license data. Also, if persistent data from boot applications is present (such as memory diagnos-
tic results or resume from hibernation information), the relevant log files and information are
written to disk or to the registry.
42. The MiniNT/WinPE registry keys are created if this is such a boot, and the NLS object directory
is created in the namespace, which will be used later to host the section objects for the various
memory-mapped NLS files.
828 
CHAPTER 12 Startup and shutdown
43. The Windows kernel Code Integrity policies (like the list of trusted signers and certificate
hashes) and debugging options are initialized, and all the related settings are copied from
the Loader Block to the kernel CI module (Ci.dll).
44. The power manager is called to initialize again. This time it sets up support for power requests,
the power watchdogs, the ALPC channel for brightness notifications, and profile callback support.
45. The I/O manager initialization now takes place. This stage is a complex phase of system startup
that accounts for most of the boot time.
The I/O manager first initializes various internal structures and creates the driver and de-
vice object types as well as its root directories Driver, FileSystem, FileSystemFilters, and
UMDFCommunication Ports (for the UMDF driver framework). It then initializes the Kernel
Shim Engine, and calls the Plug and Play manager, power manager, and AL to begin the
various stages of dynamic device enumeration and initialization. (We covered all the details
of this complex and specific process in Chapter 6 of Part 1.) Then the Windows Management
Instrumentation (WMI) subsystem is initialized, which provides WMI support for device drivers.
(See the section “Windows Management Instrumentation” in Chapter 10 for more information.)
This also initializes Event Tracing for Windows (ETW) and writes all the boot persistent data
ETW events, if any.
The I/O manager starts the platform-specific error driver and initializes the global table of
hardware error sources. These two are vital components of the Windows ardware Error
infrastructure. Then it performs the first Secure Kernel call, asking the Secure Kernel to per-
form the last stage of its initialization in VTL 1. Also, the encrypted secure dump driver is
initialized, reading part of its configuration from the Windows Registry (KLMSystem
CurrentControlSet\Control\CrashControl).
All the boot-start drivers are enumerated and ordered while respecting their dependencies and
load-ordering. (Details on the processing of the driver load control information on the registry
are also covered in Chapter 6 of Part 1.) All the linked kernel mode DLLs are initialized with the
built-in RAW file system driver.
At this stage, the I/O manager maps Ntdll.dll, Vertdll.dll, and the WOW64 version of Ntdll into
the system address space. Finally, all the boot-start drivers are called to perform their driver-
specific initialization, and then the system-start device drivers are started. The Windows sub-
system device names are created as symbolic links in the object manager’s namespace.
46. The configuration manager registers and starts its Windows registry’s ETW Trace Logging
Provider. This allows the tracing of the entire configuration manager.
47. The transaction manager sets up the Windows software trace preprocessor (WPP) and registers