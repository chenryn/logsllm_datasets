原文：
**摘要：**
* * *
攻击者可以利用Open
Graph协议在Facebook留言板上嵌入外部视频来植入存储型XSS代码。当用户点击播放视频时，XSS代码就会在facebook.com的上下文中执行。
**简介**
* * *
2017年4月，我在Facebook留言板中发现了多个存储型XSS漏洞，并立即向Facebook提交了漏洞报告。但是，由于WordPress中也存在这些漏洞，所以，我一直在等WordPress修补些漏洞，现在这篇文章终于可以跟读者们见面了：这些漏洞现已在WordPress上得到了修复！
说起来，这些XSS多少有点复杂，因为它们需要多个步骤才能完成，不过，就每一步本身来说，还是很容易理解的。
**Open Graph协议**
* * *
在Facebook帖子中添加URL时，Facebook将通过[Open Graph协议](http://ogp.me/ "Open Graph协议")（FB
doc）来显示富内容，如音频、视频等。下面简单介绍攻击者是如何使用OG协议在FB帖子中嵌入外部内容的：
  1. 攻击者在一个FB帖子中发布URL
  2. FB服务器读取URL（服务器端），然后读取OG元标签，提取与URL内容有关的信息（例如，内容是一段带有标题、封面图像、视频编码类型和视频文件URL的视频）
  3. 受害者通过封面图像和播放按钮查看了这个FB帖子
  4. 当受害者点击播放按钮时，视频会利用从OG元标签中提取的视频信息进行加载，这时，XSS代码就会执行 
这个OG工作流程还被许多网站所采用，包括Twitter和WordPress等。  
第2步很关键：服务器端读取用户提供的URL，这通常会导致SSRF。  
如果托管网站在关键网页上使用X-Frame-Options：SAMEORIGIN，并允许攻击者在同一子域中注入任意iframe的话，则可能出现的另一种漏洞是Clickjacking。
FB上没有发现这两种漏洞。
在受害者点击播放按钮后，FB加载视频时，我们就要密切关注第4步了。首先，FB会发送一个XHR请求，来获取视频类型和视频文件URL——两者都是从攻击者发布的URL中的og:video:type（我们称之为ogVideoType）和og:video:secure_url（ogVideoUrl）标签内读取的。下面给出一个OG元标签的例子：
    (...)
    (...)
如果ogVideoType为“iframe”或“swf
player”，那么FB会加载一个外部iframe，但是不会在自己的上下文中播放该视频。否则的话，FB就会使用[MediaElement.js](http://www.mediaelementjs.com/
"MediaElement.js")直接在facebook.com上处理视频加载。我已经将ME.js的Flash组件上的这些[漏洞](https://opnsec.com/2017/10/flashme-wordpress-vulnerability-disclosure-cve-2016-9263/
"漏洞")的相关报告提交给了Facebook和WordPress。
**1.基于FlashMediaElement.swf的存储型XSS**
* * *
根据ogVideoType取值的不同，MediaElements.js会采用不同的视频播放方式。
如果ogVideoType的值为“video/flv”（Flash视频），Facebook就会在facebook.com的上下文中加载Flash文件FlashMediaElement.swf（使用标签），并将ogVideoUrl传递给FlashME.swf来播放视频。然后，FlashME.swf把日志信息发送到facebook.com（使用Flash-to-javascript），当然，这些信息都是关于“视频播放”或“视频结束”方面的事件。FlashME.swf需要正确处理Flash-to-javascript的通信，特别是要把\正确转义为\，以避免XSS攻击。
但是，发送的JavaScript代码却是：
    setTimeout('log("[VIDEO_URL]")', 0)
对于javascript来说，setTimeout函数的作用与eval类似，它能够把字符串转换为指令，所以说，这是一个相当危险的函数。
[[VIDEO_URL]为ogVideoUrl的值，注意，由于它处于攻击者的控制之下，所以，如果它包含了“的话，如：
[http://evil.com/video.flv?"[payload](http://evil.com/video.flv?)]
Flash就会将以下指令发送给javascript：
    setTimeout("log(\"http://evil.com/video.flv?\"payload\")", 0);
如您所见，有效载荷“in video.flv？”已被正确转义，所以，攻击者无法利用setTimeout函数本身兴风作浪。
然而，当JavaScript执行setTimeout函数时，实际上执行的是以下JavaScript指令：
    log("http://evil.com/video.flv?"[payload]")
而这次，“并没有进行转义处理，换句话说，攻击者可以注入XSS！
现在的问题是，Facebook在将它传递给FlashME.swf之前，是否会对ogVideoUrl进行正确的转义处理。
首先，Facebook
JavaScript向Facebook服务器发送XHR请求，以获取ogVideoType和ogVideoUrl的值。虽然ogVideoUrl的值是经过了正确编码的，但它仍然可以包含任意的特殊字符
    https://evil.com?"'x';
    return tempDiv.firstChild.href;
    }
    flashDiv.innerHTML ='';
absolutizeUrl(ogVideoUrl)的返回结果为URL，该URL需要先进行编码，然后再发送到Flash，当Flash接收到数据时，会自动对URL进行解码，因此，我们可以忽略encodeURI指令。
absolutizeUrl使用当前协议和javascript上下文的域把相对URL转换为绝对URL（如果提供了绝对URL，则返回的内容基本不变）。这虽然看上去有点“怪异”，但它似乎足够安全；同时也很简单，因为最繁重的工作都让浏览器代劳了。不过，特殊字符编码却并不是一件简单的事情！
刚开始分析这段代码时，我使用的工具是Firefox，因为它提供了许多很棒的扩展，比如Hackbar、Tamper Data和Firebug！
在Firefox中，如果执行
    absolutizeUrl('http://evil.com/video.flv#"payload')
它会返回
    http://evil.com/video.flv#%22payload
所以，我被卡住了，因为在Facebook中，Flash发送的JavaScript指令是
    setTimeout("log(\"http://evil.com/video.flv?%22payload\")", 0);
这将生成
    log("http://evil.com/video.flv?%22[payload]")
这可不是一个XSS漏洞。
然后，我开始尝试Chrome：
    absolutizeUrl('http://evil.com/video.flv#"payload')
返回：
    http://evil.com/video.flv#"payload