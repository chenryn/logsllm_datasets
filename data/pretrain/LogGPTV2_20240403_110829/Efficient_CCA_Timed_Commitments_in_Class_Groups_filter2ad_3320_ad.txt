CGGen(1𝜆, 𝑞): On input the security parameter 1𝜆, and a 𝜆
bits prime 𝑞 do the following:
• Let 𝜇 be the bit size of 𝑞. Pick 𝑝 a 𝜂(𝜆) − 𝜇 bits prime such
• Δ𝐾 := −𝑝𝑞, Δ𝑞 := 𝑞2Δ𝐾
• Compute 𝐵 an upper bound on the order of 𝐶𝑙(Δ𝐾)
• Pick a random prime ˜𝑞 ∈ [2𝜆𝐵, 2𝜆+1𝐵]
• Generate a random square 𝐺 ∈ 𝐶𝑙(Δ𝐾)
• Compute 𝛾𝑞 = 𝜓𝑞(𝐺)
• Set 𝐹 the class (𝑞2, 𝑞) in 𝐶𝑙(Δ𝑞)
• Set 𝛾 := 𝛾𝑞 · 𝐹 and G = ⟨𝐺⟩
• Output pp := (G, 𝐺, 𝐹, 𝛾, 𝛾𝑞, ˜𝑞)
Figure 1: Class Group Generator
Analysis. Intuitively, from the structure of 𝑍2, the puzzle hides 𝑚
under the HSM𝐶𝐿 assumption for adversaries that cannot distin-
guish 𝜓𝑞((𝑍1)2T) from random. In the following we thus recall a
definition of a strong sequential squaring assumption, which states
that knowing of the group structure does not help to break the
sequentially of the squaring operation, and analyse it in the context
of class groups.
Session 10C: Foundations CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2668PSetup(1𝜆, 1T, 𝑞): On input the security parameter 1𝜆, the
time parameter 1T, and a 𝜆 bits prime 𝑞 do the following:
• Run CGGen(1𝜆, 𝑞) to get (G, 𝐺, 𝐹, 𝛾, 𝛾𝑞, ˜𝑞)
• Set 𝐻 := 𝐺2T
• Output pp := (𝐺, 𝐻, 𝐹, ˜𝑞)
PGen(pp, 𝑚): On input public parameters pp = (𝐺, 𝐻, 𝐹, ˜𝑞)
and a message 𝑚, do the following:
• Sample 𝑟 ← Z ˜𝑞
• Output 𝑍 := (𝐺𝑟 ,𝜓𝑞(𝐻𝑟) · 𝐹𝑚)
PEval({𝑍1, . . . , 𝑍𝑛}): On input 𝑍𝑖 = (𝑈𝑖, 𝑉𝑖) for all 𝑖, do the
following:
• Compute ˜𝑈 :=𝑛
𝑖=1 𝑈𝑖 and ˜𝑉 =𝑛
𝑖=1 𝑉𝑖
• Output 𝑍∗ := ( ˜𝑈 , ˜𝑉)
Solve(𝑍): On input 𝑍 = (𝑈 , 𝑉), do the following:
• Compute 𝜔 := 𝑈 2T
• Output SolveDL(𝑉 · 𝜓𝑞(𝜔)−1)
Figure 2: Homomorphic Time-Lock Puzzle from Class
Group
Definition 4.1 (Strong Seqential Sqaring Assumption
([55])). Let 𝜆 ∈ N, 𝑞 be a 𝜆-bit prime, and (G, 𝐺, 𝐹, 𝛾, 𝛾𝑞, ˜𝑞) the output
of CGGen(1𝜆, 𝑞) and T(·) be a polynomial. Then there exists some
0 < 𝜀 < 1 such that for every polynomial-size adversary (S1,S2) =
{(S1,S2)𝜆}𝜆∈N where the depth of S2 is bounded from above by
T𝜀(𝜆), there exists a negligible function negl(·) such that
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
Pr
𝑏′ = 𝑏
𝜏 ← S1(G, 𝐺, 𝐹, 𝛾, 𝛾𝑞, ˜𝑞, T(𝜆))
𝑥 ← Z ˜𝑞; 𝑋 := 𝐺𝑥
𝑦 ← Z ˜𝑞; 𝐻1 := 𝐺 𝑦;
𝑏′ ← S2(𝑋, 𝐻𝑏, 𝜏)
𝐻0 := 𝑋 2T(𝜆)
𝑏 ← {0, 1}
≤ 1
2 + negl(𝜆)
Computational versions of the sequential squaring assumption
have been used within class groups in the context of VDF [74]. In
such a setting, the factorization of the discriminant Δ𝐾 is usually
public. As a consequence one can efficiently compute square roots
in G ⊂ 𝐶𝑙(Δ𝐾) using an algorithm from Lagarias [49], while it
is not possible in Z/𝑛Z when 𝑛 is an RSA modulus of unknown
factorization. From [34, Prop. 3.11], there are two elements of order
dividing 2 in 𝐶𝑙(Δ𝐾), one is the neutral element, and the other one,
𝜖 has order exactly 2 and it is not a square in our setting where the
subgroup of squares has odd order. As the order 𝑠 of G is odd, each
element of G has at least a square root 𝑆 ∈ G. The other one, 𝑆 · 𝜖
is not a square so is not in G. In other word, each element of G as a
unique square root in G.
For our decisional problem, we can use these facts to implement
a meet in the middle attack. Namely, from a challenge, 𝑋, 𝐻𝑏, we
can iteratively compute 𝑋0 := 𝑋, 𝑋1 := 𝑋 2, 𝑋2 := 𝑋 4, . . . , and in
parallel 𝑋𝑡
:= 𝐻𝑏, 𝑋𝑡−1 the unique square root of 𝑋𝑡 in G, and
so on. If both ends meet, it means that 𝐻𝑏 is equal to 𝑋 2T(𝜆). In
practice, this is not a huge improvement, because of the complexity
of the square root algorithm, which involves computations of square
roots modulo the prime factors of the discriminant and a reduction
procedure of ternary quadratic forms due to Gauss. This is far more
expensive than squaring in G, and in practice our implementation
using the setting of Section 8 suggests that we gain only a 5% time
improvement using this strategy, we means that one has to increase
T by 5%.
Recent improvements have been obtained to partially parallelize
squarings in class groups with dedicated hardware in [75], which
result in a speedup by a factor 2 compared to a standard CPU. Again,
computing square roots in class group is far more intricate, but
similar techniques might apply to a certain extent.
To conclude, the fact that one can compute square roots only
affects marginally the time parameter of the scheme. We now state
the theorem that ensures the security of our HTLP.
Theorem 4.2. If the strong sequential squaring and HSM𝐶𝐿 as-
sumption hold for the output of the CGGen generator, then the ho-
momorphic time-lock puzzle from Figure 2 is secure.
Proof. Let’s consider a sequence of hybrid games.
1 , 𝑍 ★
1 , 𝑍 ★
2 ) is modified. It is computed as 𝑍 ★
Hyb0 It is the original game.
Hyb1 In this hybrid game, the only change is the second component
of the time-lock puzzle challenge 𝑍 ★ = (𝑍 ★
2 ) which is replaced
2 = 𝜓𝑞(𝐻★) · 𝐹 𝑠𝑏 where 𝐻★ = 𝐺 𝑦 for 𝑦 picked uniformly at
by 𝑍 ★
random in Z ˜𝑞.
Hyb2 Again, the second component of the time-lock puzzle chal-
lenge 𝑍 ★ = (𝑍 ★
2 := 𝛾𝑟 · 𝐹 𝑠𝑏
for 𝑟 uniformly at random in Z𝑞 ˜𝑞.
We now analyse the transitions:
Hyb0 ≈𝑐 Hyb1 A distinguisher between the two hybrids breaks
the strong sequential squaring assumption. Indeed, let’s construct
(S1,S2) as follows: S1 receives (G, 𝐺, 𝐹, 𝛾, 𝛾𝑞, ˜𝑞, T(𝜆)) and com-
putes 𝐻 = 𝐺2T(𝜆) (which he can do since he is not bounded by T),
feeds A1 with (𝐺, 𝐻, 𝐹, ˜𝑞) and waits for its output (𝜏, 𝑠0, 𝑠1), which
he forwards as his output for his own challenger. Then S2 receives
(𝑋 ★, 𝐻★, 𝜏). Now S2 runs A2 with 𝑍 ★ = (𝑋 ★,𝜓𝑞(𝐻★) · 𝐹 𝑠𝑏) for
a random bit 𝑏. When A2 outputs his bit 𝑏′, S2 outputs the bit
𝑏 == 𝑏′. Let us now analyse the situation:
• Either 𝐻★ equals to 𝑋 ★2T(𝜆) and in this case the challenge 𝑍 ★ =
• or 𝐻★ is random in G and in this case, 𝑍 ★ is distributed as in
(𝐺𝑥,𝜓𝑞(𝐻 𝑥) · 𝐹 𝑠𝑏) is distributed as in Hyb0;
Hyb1.
It means that any distinguisher between Hyb0 and Hyb1 will trans-
late into an adversary against the strong sequential squaring as-
sumption.
Hyb1 ≈𝑐 Hyb2 A distinguisher between Hyb1 and Hyb2 can be
turned into an attacker against HSM𝐶𝐿. Let us construct such an
attacker D: he takes as input (G, 𝐺, 𝐹, 𝛾, 𝛾𝑞, ˜𝑞) and 𝛿. He computes
𝐻 = 𝐺2T(𝜆) and feeds A1 with (𝐺, 𝐻, 𝐹, ˜𝑞) and waits for its output
(𝜏, 𝑠0, 𝑠1). Now D runs A2 with 𝑍 ★ = (𝐺𝑟 , 𝛿 · 𝐹 𝑠𝑏) for a random bit
𝑏 and a random 𝑟 in Z ˜𝑞. When A2 outputs his bit 𝑏′, S2 outputs
the bit 𝑏 == 𝑏′. We now have:
Session 10C: Foundations CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2669𝑞 with 𝑥 ← Z ˜𝑞. In this case, 𝛿 = 𝜓𝑞(𝐺𝑥) so 𝑍 ★ is
• Either 𝛿 = 𝛾𝑥
distributed as in Hyb1;
• Or 𝛿 = 𝛾 𝑦 with 𝑦 ← Z𝑞 ˜𝑞 so Z★ is distributed as in Hyb2.
It means that any distinguisher between Hyb1 and Hyb2 will trans-
late into an attacker against the HSM𝐶𝐿 assumption, which con-
cludes the proof.
□
Expanding Message Space. Our HTLP can be generalized into a
scheme with message space Z𝑞𝑡 using Damgård-Jurik’s ideas [35]
for Paillier’s encryption. This generalization was shown in [72]
to be useful in constructing efficient verifiable timed signatures
which has applications in privacy preserving timed payments in
cryptocurrencies.
Indeed, starting from a discriminant Δ𝑞 = 𝑞2𝛿𝐾, it is possible to
extend the parameters into a scheme with message space Z𝑞𝑡 by
considering the new discriminant Δ𝑞𝑡 = 𝑞2𝑡 Δ𝑘, and 𝐹𝑡 := (𝑞2𝑡 , 𝑞)
in 𝐶𝑙(Δ𝑞𝑡) which is now of order 𝑞𝑡. The puzzle becomes 𝑍 :=
(𝐺𝑟 ,𝜓𝑞𝑡 (𝐻𝑟) · 𝐹𝑡
𝑚) (using the appropriate mappings between class
groups) and it remains to adapt the SolveDL à la Pohlig-Hellman as
suggested in [27] and analysed in [36]. In this setting, a message is
of size 𝑡 log(𝑞) bits whereas the ciphertext is of size 2 log(𝑝) + (2𝑡 +
2) log(𝑞) so that the expansion factor tends to 2 when 𝑡 grows to
infinity.
5 CCA TIMED COMMITMENTS
In the following we introduce the notion of CCA timed commit-
ments and we propose a new construction.
5.1 Definitions
We recall the definition of CCA timed commitment, an object re-
cently introduced by Katz et al. [47]. Our syntax heavily borrows
from their definitional framework.
Definition 5.1 (Timed Commitments). A timed commitment
scheme consists of PPT algorithms (TSetup, TCom, TVfy, TForceOp)
that are defined below:
TSetup(1𝜆, 1T): the setup algorithm on input the security parameter
1𝜆 and the time parameter 1T returns a common reference string crs.
TCom(crs, 𝑚): the commitment algorithm takes as input a common
reference string crs and a message 𝑚 and returns a commitment 𝑐 and
a proof 𝜋.
TVfy(crs, 𝑐, 𝜋): the verification algorithm takes as input a common
reference string crs, a commitment 𝑐, and a proof 𝜋, and returns a bit
𝑏 ∈ {0, 1}.
TForceOp(crs, 𝑐): the force opening algorithm on input a common
reference string crs and a commitment 𝑐, returns a message 𝑚.
As a note on efficiency, all algorithms should run in time poly-
nomial in the security parameter and poly-logarithmic in T, except
for the TForceOp and (possibly) the TSetup algorithms. For correct-
ness, we require that for all 𝜆 ∈ N, all time parameters T ∈ N, and
all messages 𝑚 it holds that
Pr[TForceOp(crs, 𝑐) = 𝑚] = 1 and Pr[TVfy(crs, 𝑐, 𝜋) = 1] = 1
where crs ← TSetup(1𝜆, 1T) and (𝑐, 𝜋) ← TCom(crs, 𝑚). We
define the properties perfect binding, verifiability and CCA security
in the following.
Definition 5.2 (Perfect Binding). A timed commitment
(TSetup, TCom, TVfy, TForceOp) is perfectly binding if for all 𝜆 ∈ N,
all time parameters T ∈ N, all (𝑚0, 𝑚1) such that 𝑚0 ≠ 𝑚1, and all
(𝑟0, 𝑟1) ∈ {0, 1}2𝜆 it holds that
TCom(crs, 𝑚0; 𝑟0) ≠ TCom(crs, 𝑚1; 𝑟1)
where crs ← TSetup(1𝜆, 1T).
Definition 5.3 (Verifiability). A timed commitment
(TSetup, TCom, TVfy, TForceOp) is verifiable if there exists a negli-
gible function negl(·) such that for all 𝜆 ∈ N, all time parameters
T ∈ N, and all PPT algorithms A, it holds that
 1 = TVfy(crs, 𝑐, 𝜋)
∧ 𝑐 ∉ TCom(crs, 𝑚)
Pr
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12) crs ← TSetup(1𝜆, 1T)
(𝑐, 𝜋) ← A(crs)
𝑚 ← TForceOp(crs, 𝑐)
≤ negl(𝜆)
Definition 5.4 (CCA Security). A timed commitment