modes of operation and attack scenarios are not of practical
relevance, and the additional theoretical contribution over
the attack from Section 2.2.2 is limited because the attack
principle is always the same, we do not describe all possible
attacks in detail.
We note only that different modes of operation have very
different properties and characteristics w.r.t. backwards
compatibility attacks. For example:
1. Some modes use the encryption algorithm Enc(k,·) of
the block-cipher for encryption, and the decryption al-
gorithm Dec(k,·) for decryption. Examples for such
modes are ECB and CBC.
2. Some modes use the encryption algorithm Enc(k,·) of
the block-cipher for both encryption and decryption.
Examples of this type are OFB and “counter”-modes,
like CTR and GCM, where the block-cipher is turned
into a stream cipher by encrypting an incrementing
counter value.
The type of oracle provided by an attack on a mode of
operation depends strongly on such characteristics. For in-
stance, a CBC decryption attack provides a block-cipher de-
cryption oracle that allows an attacker to compute the block-
cipher decryption function Dec(k,·). In contrast, a decryp-
tion attack on OFB mode would provide a block-cipher en-
cryption oracle Enc(k,·).
In Section 2.2.2 we have shown that the block-cipher de-
cryption oracle Dec(k,·) provided by the attack on CBC
is sufﬁcient to mount a distinguishing attack on GCM. In
turn, this allows the decryption of low-entropy ciphertexts
by exhaustive search over all possible plaintexts. If instead
an encryption oracle was given, then this would even allow
the decryption of high-entropy GCM ciphertexts, since this
oracle essentially computes the block-cipher operation per-
formed in the GCM-decryption algorithm.
In a different application scenario, with a different com-
bination of algorithms, a block-cipher decryption oracle
may also lead to a full-ﬂedged decryption attack. For ex-
ample, AES Key Wrap [54] is a NIST-speciﬁed symmetric
key transport mechanism designed to encapsulate crypto-
graphic keys. AES Key Wrap is used, for instance, in XML
Encryption. Indeed, the block-cipher decryption oracle pro-
vided by known attacks [38] on XML Encryption allows
to decrypt even high-entropy keys encrypted with the AES
Key Wrap scheme.
3.2 Generic Countermeasures
There are a number of obvious countermeasures which
would prevent our symmetric BC attacks. The cleanest ap-
proach is to fully embrace the principle of key separation,
which dictates that different keys should be used for dif-
ferent purposes. Extending this principle would mean us-
ing completely different keys for different algorithms serv-
ing the same purpose. Of course, the required keys may
not be readily available, and making them available might
require signiﬁcant re-engineering of other system compo-
nents. This approach does not sit well with maintaining
backwards compatibility.
A compromise position would be to take the existing key
and ensure that distinct, algorithm-speciﬁc keys are derived
from it using suitable algorithm identiﬁers. For example,
we could set k(cid:48) = PRF(k, ”Algorithm Identiﬁer”) where
now the original key k is used as a key to a pseudo-random
function supporting key derivation. Suitable pseudorandom
functions can be implemented based on block-ciphers or
hash functions, which are readily available in most cryp-
tographic libraries.
4 BC Attacks on Public-Key Cryptography
In this section, we recall the well-known attack of Ble-
ichenbacher [13] on RSA-PKCS#1 v1.5 encryption [43].
We discuss its applicability to RSA-OAEP encryption [10]
(as standardized in RSA-PKCS#1 v2.0 [44] and v2.1 [42])
and to RSA-PKCS#1 v1.5 signatures [42].
Essentially, Bleichenbacher’s attack allows to invert the
RSA-function m (cid:55)→ me mod N without knowing the fac-
torization of N. This fact gives rise to obvious attacks on
RSA-based encryption and signature schemes. Therefore
the fact that Bleichenbacher’s attack may in certain appli-
cations give rise to backwards compatibility attacks is not
very surprising. We stress that we consider the contribu-
tion of this part of the paper therefore not in demonstrating
this relatively obvious fact, but rather in showing that such
attacks are indeed applicable in practice.
4.1 PKCS#1 v1.5 Padding and Encryption
In the sequel let (N, e) be an RSA public key, with cor-
responding secret key d. We denote with (cid:96) the byte-length
of N, thus, we have 28((cid:96)−1) < N < 28(cid:96).
The basic idea of PKCS#1 v1.5 [43] is to take a mes-
sage k (a bit string), concatenate this message with a ran-
dom padding string P S, and then apply the RSA encryption
function m (cid:55)→ me mod N. More precisely, a message k of
byte-length |k| ≤ (cid:96) − 11 is encrypted as follows.
1. Choose a random padding string P S of byte-length (cid:96)−
3 − |k|, such that P S contains no zero byte. Note that
the byte-length of P S, denoted |P S|, is at least 8.
2. Set m := 0x00||0x02||P S||0x00||k. Interpret m as
an integer such that 0 < m < N.
3. Compute the ciphertext as c = me mod N.
The decryption algorithm computes m(cid:48) = cd mod N and
interprets integer m(cid:48) as a bit string. It tests whether m(cid:48) has
the correct format, i.e. whether m(cid:48) can be parsed as m(cid:48) =
0x00||0x02||P S||0x00||k where P S consists of at least 8
non-zero bytes. If this holds, then it returns k, otherwise it
rejects the ciphertext.
4.2 Bleichenbacher’s Attack
The only necessary prerequisite to execute Bleichen-
bacher’s attack [13] is that an oracle OBB is given which
tells whether a given ciphertext is valid (that is, PKCS#1
v1.5 conformant) with respect to the target public key
(N, e). This oracle takes as input a ciphertext c and re-
sponds as follows.
(cid:40)
OBB(c) =
1 if c is valid w.r.t. PKCS#1 v1.5 and (N, e),
0 otherwise.
Such an oracle may be given in many practical scenarios, for
instance by a web server responding with appropriate error
messages. The applicability of Bleichenbacher’s attack to
XML Encryption – not only due to implementational issues,
but also due to inherent properties of XML Encryption itself
– was noticed in [37]. However, we stress that [37] con-
sidered only attacks on the legacy version v1.5 of PKCS#1
encryption. In this paper, we show that this weakness can
also be used to break the security of current versions v2.0
and v2.1 of PKCS#1 (aka. RSA-OAEP) and to forge XML
Signatures.
We give only a high-level description of the attack, and
refer to the original paper [13] for details. Suppose a
PKCS#1 v1.5 conformant ciphertext c = me mod N is
given. Thus, m = cd mod N lies in the interval [2B, 3B),
where B = 28((cid:96)−2). Bleichenbacher’s algorithm proceeds
as follows. It chooses a small integer s, computes
c(cid:48) = (c · se) mod N = (ms)e mod N,
and queries the oracle with c(cid:48). If OBB(c(cid:48)) = 1, then the
algorithm learns that 2B ≤ ms− rN < 3B for some small
integer r which is equivalent to
2B + rN
s
≤ m <
3B + rN
s
.
By iteratively choosing new s, the adversary reduces the
number of possible values of m, until only one is left.
For a 1024-bit modulus and a random ciphertext, the
original analysis in [13] shows that the attack requires about
one million oracle queries to recover a plaintext. Therefore,
Bleichenbachers attack became also known as the “Mil-
lion Message Attack”. Recent improvements in cryptanaly-
sis [7] show, however, that this number can be signiﬁcantly
improved. In particular, in certain (realistic) scenarios the
improved attack of [7] performs only about 3800 oracle
queries, depending on which ciphertext validity checks are
performed by the oracle.
4.3 The Power of Bleichenbacher’s Attack
As already noted in [13], the attack of Bleichenbacher
allows not only to decrypt PKCS#1 v1.5 ciphertexts.
In-
stead, it uses the PKCS#1 validity oracle to invert the RSA
function m (cid:55)→ me mod N on an arbitrary value (not nec-
essarily a PKCS#1 v1.5-conformant ciphertext).
Therefore Bleichenbacher’s attack can potentially also
be used to decrypt RSA-OAEP ciphertexts, or to forge
RSA-based signatures, whenever the following two require-
ments are met.
1. The PKCS#1 v1.5 encryption scheme and the attacked
cryptosystem (like RSA-OAEP encryption or RSA-
signatures) use the same RSA-key (N, e).
2. A PKCS#1 v1.5-validity oracle is given, in order to
mount Bleichenbacher’s attack.
We will show that these two requirements are indeed met in
certain practical applications, where PKCS#1 v1.5 encryp-
tion is available due to backwards compatibility reasons.
4.3.1 Attacking RSA-OAEP
The basic idea of RSA-OAEP (aka. PKCS#1 v2.0 [44] or
2.1 [42]) is very similar to PKCS#1 v1.5, except that a much
more complex padding scheme is used.
Let us describe the padding in more detail. In the sequel
let (cid:96)G, (cid:96)H , (cid:96)k, (cid:96)0 ∈ N be integers such that (cid:96) = 2 + (cid:96)G +
(cid:96)H and (cid:96)0 = (cid:96)G − (cid:96)k. Moreover, let G : {0, 1}(cid:96)H →
{0, 1}(cid:96)G and H : {0, 1}(cid:96)G → {0, 1}(cid:96)H be cryptographic
hash functions.
A message k of bit-length (cid:96)k is encrypted as follows.
1. Choose a random padding string r ∈ {0, 1}(cid:96)H .
2. Compute values s ∈ {0, 1}(cid:96)G and t ∈ {0, 1}(cid:96)H as
t := r ⊕ H(s).
s := k||0(cid:96)0 ⊕ G(r)
and
3. Set m := 02||s||t. Interpret m as an integer such that
0 < m < N.
4. Compute the ciphertext as c = me mod N.
Note that in order to decrypt an OAEP-ciphertext it
sufﬁces to be able to invert the RSA encryption function
m (cid:55)→ me mod N, since the message encoding and decod-
ing steps are unkeyed. Thus, if the RSA public key (N, e)
is used for OAEP-encryption and an oracle OBB is available
which tells whether a given ciphertext is PKCS#1 v1.5 con-
formant w.r.t. (N, e), then one can use this oracle to decrypt
OAEP-ciphertexts by mounting Bleichenbacher’s attack.
4.3.2 Attacking RSA-PKCS#1 v1.5 Signatures
In the sequel let H : {0, 1}∗ → {0, 1}8(cid:96)H be a cryp-
tographic hash function (e.g. SHA-1) with (cid:96)H-byte out-
put length. Let (N, e) be an RSA public key, where
N has byte-length (cid:96), with corresponding secret key d =
1/e mod φ(N ). A digital signature over message m ac-
cording to RSA-PKCS#1 v1.5 is computed in three steps.
1. Compute the hash value H(m).
2. Prepend H(m) (from right to left) with
function H,
• a 15-byte string ASN.1, which identiﬁes the hash
• one 0x00-byte,
• (cid:96) − (cid:96)H − 17 copies of the 0xFF-byte, and
• the 0x01-byte,
to obtain a padded message string M of the form
M = 0x01||0xFF|| . . .||0xFF||0x00||ASN.1||H(m).
3. Compute the signature σ as
σ := M d mod N.
Note that in order to forge an RSA-PKCS#1 v1.5 sig-
nature it sufﬁces to be able to invert the RSA encryption
function. Thus, if the RSA public key (N, e) is used for
RSA-PKCS#1 v1.5 signatures and an oracle OBB is avail-
able that tells whether a given ciphertext is PKCS#1 v1.5
conformant w.r.t. (N, e), then one can use this oracle to
forge RSA-PKCS#1 v1.5 signatures by mounting Bleichen-
bacher’s attack on a suitably randomized version of the en-
coded message M.
This attack possibility is mentioned in Bleichenbacher’s
original paper [13]. A variant of the attack was recently
explored in [21] in the context of EMV signatures (where
the same RSA key pair may be used for both signature and
encryption functions).
4.4 Countermeasures and the Difﬁculty of Key
Separation with X.509 Certiﬁcates
Key separation means to use different (independent)
keys for different algorithms. In theory this principle pro-
vides a simple solution to prevent backwards compatibility
attacks. As described in Section 3.2, key separation is very
easy to enforce in the symmetric setting, for instance by a
suitable application of a pseudorandom function before us-
ing the symmetric key.
In principle, key separation in the public-key setting is
almost as easy to enforce as in the symmetric setting. One
could simply generate different keys for different purposes.
For instance, one RSA-key (N0, e0) is generated exclu-
sively for PKCS#1 v1.5 encryption, another independent
RSA-key (N1, e1) exclusively for PKCS#1 v1.5 signature,
and yet another independent RSA-key (N2, e2) only for
RSA-OAEP encryption. Each public-key should then be
published together with some information (included in the
certiﬁcate, for instance) that speciﬁes for which algorithm
this key can be used. Accordingly, each secret key should
be stored together with this additional information. Cryp-
tographic implementations should check whether the pro-
vided key is suitable for the executed algorithm.
Unfortunately this theoretically sound solution is not
easy to implement in practice. This is because common
data formats for public keys do not provide this additional
information as part of the basic standard. For example, the
X.509 standard for public-key certiﬁcates deﬁnes a popu-
lar data format for public keys. While an X.509 certiﬁcate
does include algorithm identiﬁers for the signing algorithm
used to create the certiﬁcate itself, these certiﬁcates do not
necessarily include any information about with which algo-
rithms the certiﬁed public key can be used. It is possible to
extend X.509 certiﬁcates with such a ﬁeld, the Subject Pub-
lic Key Info ﬁeld (see RFC 5280 [19] and more speciﬁcally
RFC 4055 [65] for naming conventions for RSA-based al-
gorithms), but supporting this ﬁeld is not mandatory and
would require major changes to implementations and li-
braries. In view of BC attacks, we consider this to be a big
handicap of X.509 certiﬁcates. We suggest that algorithm
identiﬁers for certiﬁed keys be included by default in future
revisions of X.509.
The importance of key separation still seems to be not
very well understood in practice. For instance, a large cloud
identity security provider even suggests the use of RSA keys
for both digital signatures and encryption [60], while RFC
4055 [65] permits the same RSA key pair to be used for
more than one purpose (see speciﬁcally Section 1.2 of RFC
4055). There is limited theoretical support for this kind of
key reuse (see [58] and the references therein), but in gen-
eral, as our attacks show, it is a dangerous practice.
5 Practical BC attacks on XML Encryption
and JSON Web Encryption
In this section we demonstrate the vulnerability of cur-
rent versions of XML Encryption [28] and JSON Web En-
cryption [41] to BC attacks. We ﬁrst give a brief overview
of these standards. Then we describe optimized versions of
the BC attacks illustrated in previous sections. Finally we
discuss practical countermeasures, their applicability, and
propose changes to the algorithms and security considera-
tions in the analyzed standards.
5.1 Technical Background
XML Encryption [28] and JSON Web Encryption [41]
are two standards that specify a way to apply cryptographic
algorithms to data transported over a network. Both stan-
dards provide security at the message-level. In this section
we describe their main properties, as far as they are relevant
to our attacks.
5.1.1 XML Encryption and XML Signature
The Extensible Markup Language (XML) [14] deﬁnes a
structure for ﬂexible storage and transmission of tree-based
data. It is widely used for instance in Single Sign-On [15]
scenarios and in Web Services [50]. The wide adoption of
XML has raised the demand for security standards enabling
the application of encryption and digital signatures to XML
documents. This lead to the introduction of XML Encryp-
tion [28] and XML Signature [29].
The increasing adoption of XML Signature and XML
Encryption in enterprise applications is conﬁrmed by a large
number of commercially available XML gateways [35, 49,
57] and enterprise software [39, 64] supporting these stan-