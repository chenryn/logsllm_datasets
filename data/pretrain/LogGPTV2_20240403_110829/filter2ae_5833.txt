# 【漏洞分析】对YouTube中高级Flash漏洞的深入解析

## 译文声明
本文为翻译文章，原文来源：opnsec.com
原文地址：[链接]
译文仅供参考，具体内容及含义以原文为准。
译者：[兴趣使然的小胃](http://bobao.360.cn/member/contribute?uid=2819002922)
预估稿费：180RMB
投稿方式：发送邮件至linwei#360.cn，或通过网页版在线投稿。

## 一、引言
尽管Flash技术已逐渐被JavaScript/HTML5取代，但其仍然是一个活跃的安全威胁源。自2017年以来，我向Facebook、YouTube、WordPress、Yahoo、Paypal和Stripe等平台提交了多个Flash漏洞报告，并在过去三年内共提交超过50个相关漏洞，累计获得了超过8万美元的奖励。由于时间和精力有限，尚有许多未提交或未修复的漏洞存在。

与此同时，随着新技术如JavaScript/HTML5的引入，也带来了新的安全挑战，包括错误的CORS实现、利用`postMessage`或`XHR`请求触发DOM XSS攻击以及数据混淆等问题。从这些Flash漏洞中吸取的经验教训可以帮助我们构建更安全的JavaScript应用程序。新推出的YouTube HTML5 API在很多方面类似于旧版Flash API，因此是一个非常有价值的研究对象。实际上，基于我在Flash API方面的经验积累，确实在YouTube HTML5 API中发现了若干XSS漏洞。

本文将详细介绍我在YouTube Flash API中发现的一些高级漏洞，并简要讨论与HTML/JavaScript相关的安全性问题。鉴于涉及的技术细节较多，欢迎随时通过Twitter（[@opnsec](https://twitter.com/opnsec)）联系我提供反馈或建议。更多关于Flash安全模型的信息，请参阅[此链接](http://www.senocular.com/flash/tutorials/contentdomains/)。

## 二、逆向工程分析YouTube Flash API
YouTube Flash API允许开发者在其网站上嵌入YouTube视频。API的工作流程如下图所示：

- **入口点**：YouTube Wrapper作为一个Flash文件位于`youtube.com/v/[VIDEO_ID]`路径下，充当HTML页面与主应用之间的中介。
- **主应用**：这是一个大型Flash文件，大约包含10万行代码，托管于`s.ytimg.com`域名下的沙箱环境中。
- **模块**：用于处理字幕显示或广告播放等功能，这些模块不是独立的Flash文件，而是由主应用动态加载。
- **Flash-to-JavaScript API**：HTML页面可通过该接口向YouTube API发送命令，例如`play()`、`pause()`等。此外，Flash文件还会发起类似AJAX的跨站请求来获取配置文件和视频数据。

## 三、用户信息泄露漏洞案例研究
首先让我们来看一个相对简单的漏洞实例。以下是一段简化后的YouTube Wrapper ActionScript 3 (AS3) 代码示例：
```actionscript
// 示例代码省略
```
这段代码生成了一个YouTube Wrapper实例，其中`username`属性包含了用户的Google用户名（前提是用户已登录），而`userpicture`则指向用户的个人资料图片URL。在此漏洞场景下，攻击者能够窃取上述属性值。

### 漏洞原理
当开发者从自己的Flash文件（假设称为Evil Wrapper）中加载YouTube Wrapper时，两者会在同一个Flash安全沙箱中执行。虽然默认情况下不同来源的Flash文件之间受到同源策略限制无法互相访问对方的属性，但由于YouTube Wrapper中包含了`Security.allowDomain("*")`语句，使得任何外部Flash文件都能够访问其公开属性。然而，对于私有属性，这种访问权限依然受限。

进一步地，Flash提供了一种机制——`loaderInfo.sharedEvents` API，允许加载器与其加载的内容之间进行通信。YouTube Wrapper正是利用这一特性与主应用交互。每当主应用向`sharedEvents` API发送事件时，YouTube Wrapper会接收并使用`event.data`属性返回用户信息。值得注意的是，除了直接参与通信的双方外，其他任何引用了`loaderInfo`对象的Flash文件也能监听到这些事件。

### 攻击手段
如果恶意加载器能够获得对`loaderInfo`对象的引用，则可以通过向YouTube Wrapper发送特定事件来窃取敏感信息。尽管`appLoader`属性本身是私有的，但由于YouTube Wrapper将其子节点添加到了显示列表中，攻击者可以利用公共方法`getChildAt(0)`获取到实际的Loader实例，从而绕过隐私保护措施。

### PoC演示
以下是用于证明概念的Evil Wrapper代码片段：
```actionscript
// Evil Wrapper AS3 代码示例
```

#### 工作流程
![PoC工作流程图](url)

#### 攻击条件
- 用户必须处于已登录状态；
- 用户设备上安装了Flash Player插件。

#### 攻击步骤
1. 受害者访问恶意站点（如evil.com/evil.html），该页面内嵌有一个恶意Flash对象（evil.com/evil.swf）。
2. evil.swf 加载YouTube wrapper (https://www.youtube.com/v/[VIDEO_ID]) 并尝试读取用户的Google用户名和个人头像链接。
3. 成功后，攻击者即可获取到受害者的身份标识信息。

#### 安全影响
任何第三方网站只要能诱导目标用户访问，都有可能利用此漏洞非法获取其Google账户相关信息。设想一下，在某个陌生网站上突然看到自己名字和照片的情景是多么令人不安！

#### 缓解措施
为了防止此类攻击，YouTube现已停止通过`event.data`传递用户信息，改为直接传递给主应用处理。这样即使恶意方试图监听事件也无法获取到有效数据。

#### 时间线
- 2015年8月27日 - 向Google VRP提交漏洞报告
- 2015年9月9日 - 漏洞得到修复，获得奖励（1星，满分4星）

## 四、结语
以上介绍了一个较为基础但极具教育意义的漏洞案例。如果您希望了解更多复杂的技术细节，请继续阅读系列文章之二《高级Flash漏洞在YouTube中的应用——第二部分》，在那里我们将探讨如何在youtube.com上执行任意Flash代码。