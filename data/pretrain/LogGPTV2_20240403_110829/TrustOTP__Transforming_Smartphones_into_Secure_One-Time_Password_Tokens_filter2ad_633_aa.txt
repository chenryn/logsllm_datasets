title:TrustOTP: Transforming Smartphones into Secure One-Time Password Tokens
author:He Sun and
Kun Sun and
Yuewu Wang and
Jiwu Jing
TrustOTP: Transforming Smartphones into Secure
One-Time Password Tokens
He Sun1,2,3, Kun Sun1, Yuewu Wang2, and Jiwu Jing2
1Department of Computer Science, College of William and Mary
{hsun01,ksun}@wm.edu
2Data Assurance and Communication Security Research Center, Chinese Academy of Sciences
State Key Laboratory of Information Security, Institute of Information Engineering of CAS
3University of Chinese Academy of Sciences
{sunhe, wangyuewu, jingjiwu}@iie.ac.cn
ABSTRACT
Two-factor authentication has been widely used due to the
vulnerabilities associated with traditional text-based pass-
word. One-time password (OTP) plays an indispensable role
on authenticating mobile users to critical web services that
demand a high level of security. As the smartphones are
increasingly gaining popularity nowadays, software-based
OTP generators have been developed and installed into
smartphones as software apps, which bring great conve-
nience to the users without introducing extra burden. How-
ever, software-based OTP solutions cannot guarantee the
conﬁdentiality of the generated passwords or even the seeds
when the mobile OS is compromised. Moreover, they also
suﬀer from denial-of-service attacks when the mobile OS
crashes. Hardware-based OTP tokens can solve these secu-
rity problems in the software-based OTP solutions; however,
it is inconvenient for the users to carry physical tokens with
them, particularly, when there are more than one token to be
carried. In this paper, we present TrustOTP, a secure one-
time password solution that can achieve both the ﬂexibility
of software tokens and the security of hardware tokens by
using ARM TrustZone technology. TrustOTP can not only
protect the conﬁdentiality of the OTPs against a malicious
mobile OS, but also guarantee reliable OTP generation and
trusted OTP display when the mobile OS is compromised
or even crashes. It is ﬂexible to integrate multiple OTP al-
gorithms and instances for diﬀerent application scenarios on
the same smartphone platform without modifying the mo-
bile OS. We develop a prototype of TrustOTP on Freescale
i.MX53 QSB. The experimental results show that TrustOTP
has small impacts on the mobile OS and its power consump-
tion is low.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from Permissions@acm.org.
CCS’15, October 12–16, 2015, Denver, Colorado, USA.
© 2015 ACM. ISBN 978-1-4503-3832-5/15/10 ...$15.00.
DOI: http://dx.doi.org/10.1145/2810103.2813692.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection
General Terms
Security
Keywords
One-Time Password; ARM TrustZone; Secure GUI
1.
INTRODUCTION
There is an ever increasing number of enterprise employ-
ees who need to remotely access the corporate networks. By
the end of 2015, more than 1.3 billion workers worldwide
will routinely work beyond the traditional oﬃce environ-
ment [35]. Around the same time, more mobile devices are
being widely used to perform business transactions by mo-
bile workers. Enterprises have traditionally used two-factor
authentication to secure employee’s remote access to corpo-
rate resources. Due to its ease of use, one-time password
(OTP) is widely adopted by enterprises in their two-factor
authentication solutions [24, 44, 52].
An OTP is an automatically generated numeric or al-
phanumeric string of characters that authenticates the user
for a single transaction or session to an authentication server.
OTP enhances the traditional user ID and password au-
thentication by adding an extra level of dynamic password
that changes each authentication. Two most popular types
of OTP solutions are the time-based OTP (TOTP) and
HMAC-based OTP (HOTP) that is event-based. OTP mech-
anism consists of a token - either hardware-based (e.g., pocket-
size fobs) or software-based (e.g., a soft token) - that can
generate an OTP using a built-in clock (or counter) and a
factory-encoded secret key. The secret key is known as the
“seed”, which is diﬀerent for each token and also stored in
the related authentication server.
As the smartphone gains its popularity nowadays, software-
based OTP generators have been developed and installed on
smartphones as software apps [2]. Due to the popularity of
smartphone usages, the software-based OTP solutions bring
no extra burden to the users and are economical to use.
However, they may suﬀer from a couple of security prob-
lems. First, when the mobile operating system is compro-
976mised, it cannot guarantee the conﬁdentiality of the gener-
ated OTPs or even the seeds. For instance, the attacker may
steal the OTP by taking screenshots that contain the OTP
displayed on the screen [42]. If the OTP app has been instru-
mented [16], the instrumented code can stealthily send the
OTP out to the attacker. Moreover, rootkits [57] in mobile
operating system can steal the OTP seed through inspecting
system memory and easily duplicate the soft token. Second,
the mobile OS may face denial-of-service attacks, so there
is no guarantee of the OTP availability when the OTP is
required. A malicious OS can tamper with or simply delete
the OTP code in the memory or the permanent storage, so
that the OTP generator cannot successfully run. Also, when
the OS crashes, the OTP is not accessible either.
Since hardware OTP tokens can solve all the security
problems of the software OTP tokens, they have been widely
used in the scenarios that demand a higher level of secu-
rity [24, 44, 52]. A small piece of self-contained software runs
in a tamper-resistant environment, which makes it diﬃcult
to compromise the seeds in the physical token for duplica-
tion. The battery in the hardware tokens can commonly
last for 5 years. However, compared to software token, the
hardware tokens also have some limitations. First, it is not
easy to upgrade the software in the physical tokens. Second,
a physical token usually costs tens of dollars [26], which is
much more expensive than a software token that is usually
free. Third, it is inconvenient for the users to carry physical
tokens with them, particularly, when there are more than
one fob to be carried all the time.
In this paper, we present TrustOTP, a secure one-time
password solution that can achieve both the ﬂexibility of
software tokens and the security of hardware tokens by us-
ing ARM TrustZone technology [15]. TrustOTP can not
only protect the conﬁdentiality of the OTPs against a mali-
cious mobile OS, but also guarantee reliable OTP generation
and trusted OTP display to the users when the mobile OS
is compromised or even crashes. Our solution can accom-
modate various OTP algorithms and support multiple OTP
instances on the same smartphone platform. TrustOTP tar-
gets at combining the beneﬁts of both hardware tokens and
software tokens.
First, TrustOTP can achieve a secure OTP token that
ensures conﬁdentiality,
integrity, and availability of the
OTPs generated on smartphones. All the code and data
of TrustOTP in both volatile and non-volatile memory stor-
age are securely isolated from the mobile OS (called Rich
OS) running in the normal domain. TrustZone ensures that
the Rich OS cannot compromise the conﬁdentiality and in-
tegrity of the generated OTPs or the seeds, which are only
accessible in the secure domain. Moreover, TrustOTP can
ensure the availability of the OTPs even if the Rich OS is
compromised or totally crashes. The static code image of
TrustOTP is stored on a secure permanent storage that can
only be accessed in the secure domain, so the Rich OS can-
not delete or modify the code image. Users can trigger a
non-maskable interrupt (NMI) to guarantee that the system
will be switched into the secure domain when the OTP is
required.
Second, TrustOTP is ﬂexible to integrate various OTP
algorithms and able to support multiple OTP instances on
the same smartphone. It can support both event-based and
time-based OTP. For the time-based OTP, a secure real-
time clock is used by the OTP and protected from the Rich
OS. For the event-based OTP, a secure counter, which in-
crements as the OTP is updated, can only be accessed by
the secure domain. Given an OTP algorithm on the smart-
phone, users can easily add new OTP instances by copying
the new OTP seeds into the system.
Third, we provide a trusted user input/output for users to
input new seeds, select needed OTP instances, and display
the OTPs. Since the Rich OS and the trusted OTP ap-
plication share the same touchscreen, we must ensure that
no sensitive information will be leaked into the Rich OS
through the shared display device. When the input (e.g.,
OTP seed) can be mediated by the Rich OS, it can be ma-
nipulated by malware. We solve this problem by integrating
a self-contained touchscreen driver in the secure domain for
users to register new OTP instances. Also, we achieve a
trusted output by isolating a secure framebuﬀer that cannot
be accessed by the Rich OS and providing a secure display
controller in the secure domain. When the selected OTP
instance is displayed on one corner of the screen, the users
can still see the screen contents of the Rich OS and continue
their operations in the Rich OS.
In summary, we make the following contributions in this
paper.● We propose a new design of secure OTP Tokens using
smartphones. Our design can achieve the same level of
security as the hardware token and the ﬂexibility of the
software token. It can prevent all types of attacks from
the malicious Rich OS and is capable of showing the OTP
even if the mobile OS crashes.
It is ﬂexible to support
various OTP algorithms and multiple OTP instances on
one smartphone.
● We provide a trusted graphical user interface that
displays the OTP on the same screen shared with the
Rich OS. Our user-friendly display allows users to read
the OTP and input it into an app in the Rich OS simulta-
neously. We ensure that the Rich OS cannot directly read
the OTPs and seeds from the framebuﬀer memory or ob-
tain the current OTP by capturing the screenshots. More-
over, we provide a trusted touchscreen driver for users to
input new OTP seeds and choose the OTP instances to
display.
● We implement a TrustOTP prototype and the eval-
uation results show that TrustOTP can work eﬃciently
with small power consumption. TrustOTP requires no
modiﬁcation of the Rich OS and has small impacts on
user experience of using the Rich OS. In our prototype,
after the user presses a physical button, the password can
be shown on the screen in less than 80 ms.
The remainder of the paper is organized as follows. Sec-
tion 2 introduces background knowledge. Section 3 describes
the threat model and assumptions. We present the TrustOTP
framework in Section 4. A prototype implementation is de-
tailed in Section 5. Section 6 discusses the experimental re-
sults. We discuss the limitation of our system in Section 7.
We describe the related work in Section 8 and conclude the
paper in Section 9.
9772. BACKGROUND
2.1 One-Time Password
One-time password (OTP) is the kind of password that is
only valid for one transaction. Diﬀerent from the traditional
passwords, OTP is resistant to replay attacks. The OTPs
can be generated in three ways: the time-synchronization
OTP is calculated based on current time, the previous-
password-based OTP is calculated using the previous OTP,
and the challenge-based OTP is calculated with a challenge
from the server. The OTP can be generated respectively
by the client and an authentication server with shared se-
cret key, or it can be generated on the server side and
then sent to the client through SMS or Email. A number
of OTP-related standards have been developed, including
RFC 1760 (S/KEY) [10], RFC 2289 (OTP) [11], RFC 4226
(HOTP) [12] and RFC 6238 (TOTP) [13].
2.2 ARM TrustZone
ARM TrustZone technology [4] is a system-wide secu-
rity approach to provide hardware-level isolation between
two execution domains: normal domain and secure domain,
which share the CPU in a time-sliced fashion. The secure do-
main has a higher access privilege than the normal domain,
so it can access the resources of the normal domain such as
memory, CPU registers, and peripherals, but not vice versa.
TrustZone includes an NS bit in the CPU processor to con-
trol and indicate the state of the CPU. The memory address
is partitioned into a number of memory regions, which are
marked as either secure or non-secure, by the TrustZone
Address Space Controller (TZASC). TrustZone supports se-
cure and non-secure interrupts. The normal domain cannot
access the interrupt source of the secure domain. Each in-
terrupt is marked either secure or non-secure, and a Generic
Interrupt Controller (GIC) only signals an IRQ interrupt for
the non-secure interrupt and signals either IRQ or FIQ for
the secure interrupt. The device privilege is conﬁgured in
the TrustZone Protection Controller (TZPC) that dedicates
one bit to each independent device.
A system supporting TrustZone is always shipped with
additional supportive hardware security modules to better
work with TrustZone, such as secure non-volatile keys [30],
secure storage [18, 28], secure real-time clock [30, 28] and
cryptographic accelerators [30, 18, 28]. These security mod-
ules work together with TrustZone to enhance system se-
curity and performance. For instance, to prevent rollback
attacks in time-sensitive protocols such as DRM and PKI,
secure real-time clock (SRTC) is introduced. The SRTC is
usually powered by a coin-cell to keep running even when
the platform is powered oﬀ.
3. THREAT MODEL AND ASSUMPTIONS
We assume the Rich OS running in the normal domain
may be compromised by malicious code, and further the
compromised OS may be manipulated to attack the one-time
password generator. First, it may attempt to read (steal)
the OTPs directly from the memory or the display device.
Second, it may target at obtaining the seeds that are used
to generate the OTPs by searching both volatile and non-
volatile storage. Third, it may tamper with either the static
code image or the control ﬂow of TrustOTP to steal the gen-
erated OTPs. Lastly, the malicious OS can launch denial-of-
service attacks to prevent the user from successfully obtain-
ing the OTPs. The Rich OS may suspend TrustOTP from
being either executed or displayed correctly.
It can even
make the system crash or unbootable, though this does not
happen frequently.
Our OTP solution aims at achieving the same level of
security as the traditional hardware OTP token. The attacks
against the hardware tokens are out of the scope of this
paper; however, we discuss those limitations in Section 7.
We assume the attacker may have physical access to the
mobile devices. We trust the TrustZone hardware security
supports on the ARM processors and assume the code in the
ROM and the secure domain can be trusted. We assume the
cell battery that powers the real-time clock on the board can
last for a long time.