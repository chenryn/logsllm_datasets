If it was valid, then add 
the link preview to the 
links list in the message.
360
CHAPTER 10
Microservice APIs in Kubernetes
You can now rebuild the Docker image by running the following command in a termi-
nal in the root folder of the project (make sure to set up the Docker environment
again if this is a new terminal window):
mvn clean compile jib:dockerBuild
Because the image is not versioned, Minikube won’t automatically pick up the new
image. The simplest way to use the new image is to restart Minikube, which will reload
all the images from the Docker daemon:1
minikube stop
and then
minikube start
You can now try out the link-preview service. Use the minikube ip command to get the
IP address to use to connect to the service. First create a user:
curl http://$(minikube ip):30567/users \
  -H 'Content-Type: application/json' \
  -d '{"username":"test","password":"password"}'
Next, create a social space and extract the message read-write capability URI into a
variable:
MSGS_URI=$(curl http://$(minikube ip):30567/spaces \
  -H 'Content-Type: application/json' \
  -d '{"owner":"test","name":"test space"}' \
  -u test:password | jq -r '."messages-rw"')
You can now create a message with a link to a HTML story in it:
MSG_LINK=$(curl http://$(minikube ip):30567$MSGS_URI \
  -u test:password \
  -H 'Content-Type: application/json' \
  -d '{"author":"test", "message":"Check out this link:
➥  http://www.bbc.co.uk/news/uk-scotland-50435811"}' | jq -r .uri)
Finally, you can retrieve the message to see the link preview:
curl -u test:password http://$(minikube ip):30567$MSG_LINK | jq
The output will look like the following:
{
  "author": "test",
  "links": [
1 Restarting Minikube will also delete the contents of the database as it is still purely in-memory. See
http://mng.bz/5pZ1 for details on how to enable persistent disk volumes that survive restarts.
361
Deploying Natter on Kubernetes
    {
      "image": 
➥ "https://ichef.bbci.co.uk/news/1024/branded_news/128FC/
➥ production/_109682067_brash_tracks_on_fire_dyke_2019.
➥ creditpaulturner.jpg",
      "description": "The massive fire in the Flow Country in May 
➥ doubled Scotland's greenhouse gas emissions while it burnt.",
      "title": "Huge Flow Country wildfire 'doubled Scotland's
➥ emissions' - BBC News",
      "url": "https://www.bbc.co.uk/news/uk-scotland-50435811"
    }
  ],
  "time": "2019-11-18T10:11:24.944Z",
  "message": "Check out this link: 
➥ http://www.bbc.co.uk/news/uk-scotland-50435811"
}
10.2.7 Preventing SSRF attacks
The link-preview service currently has a large security flaw, because it allows anybody
to submit a message with a link that will then be loaded from inside the Kubernetes
network. This opens the application up to a server-side request forgery (SSRF) attack,
where an attacker crafts a link that refers to an internal service that isn’t accessible
from outside the network, as shown in figure 10.4.
DEFINITION
A server-side request forgery attack occurs when an attacker can sub-
mit URLs to an API that are then loaded from inside a trusted network. By
submitting URLs that refer to internal IP addresses the attacker may be able
to discover what services are running inside the network or even to cause
side effects.
SSRF attacks can be devastating in some cases. For example, in July 2019, Capital One,
a large financial services company, announced a data breach that compromised user
details, Social Security numbers, and bank account numbers (http://mng.bz/6AmD).
Analysis of the attack (https://ejj.io/blog/capital-one) showed that the attacker
exploited a SSRF vulnerability in a Web Application Firewall to extract credentials
from the AWS metadata service, which is exposed as a simple HTTP server available
on the local network. These credentials were then used to access secure storage buck-
ets containing the user data.
 Although the AWS metadata service was attacked in this case, it is far from the first
service to assume that requests from within an internal network are safe. This used to
be a common assumption for applications installed inside a corporate firewall, and
you can still find applications that will respond with sensitive data to completely unau-
thenticated HTTP requests. Even critical elements of the Kubernetes control plane,
such as the etcd database used to store cluster configuration and service credentials,
can sometimes be accessed via unauthenticated HTTP requests (although this is usu-
ally disabled). The best defense against SSRF attacks is to require authentication for
362
CHAPTER 10
Microservice APIs in Kubernetes
access to any internal services, regardless of whether the request originated from an
internal network: an approach known as zero trust networking.
DEFINITION
A zero trust network architecture is one in which requests to ser-
vices are not trusted purely because they come from an internal network.
Instead, all API requests should be actively authenticated using techniques
such as those described in this book. The term originated with Forrester
Research and was popularized by Google’s BeyondCorp enterprise architec-
ture (https://cloud.google.com/beyondcorp/). The term has now become a
marketing buzzword, with many products promising a zero-trust approach,
but the core idea is still valuable.
Although implementing a zero-trust approach throughout an organization is ideal,
this can’t always be relied upon, and a service such as the link-preview microservice
shouldn’t assume that all requests are safe. To prevent the link-preview service being
Link-preview API
Target service
IP: 192.168.0.1
Firewall
url=http://192.168.0.1/admin
GET/admin
In an SSRF attack, an attacker
outside the ﬁrewall makes a request
with a URL of an internal service.
The API doesn’t validate the
URL and so makes a request
to the internal service.
SSRF can be used to steal
credentials, scan internal networks,
or even directly call APIs.
Figure 10.4
In an SSRF attack, the attacker sends a URL to a vulnerable API 
that refers to an internal service. If the API doesn’t validate the URL, it will make 
a request to the internal service that the attacker couldn’t make themselves. 
This may allow the attacker to probe internal services for vulnerabilities, steal 
credentials returned from these endpoints, or directly cause actions via 
vulnerable APIs.
363
Deploying Natter on Kubernetes
abused for SSRF attacks, you should validate URLs passed to the service before mak-
ing a HTTP request. This validation can be done in two ways:
 You can check the URLs against a set of allowed hostnames, domain names, or
(ideally) strictly match the entire URL. Only URLs that match the allowlist are
allowed. This approach is the most secure but is not always feasible. 
 You can block URLs that are likely to be internal services that should be pro-
tected. This is less secure than allowlisting for several reasons. First, you may for-
get to blocklist some services. Second, new services may be added later without
the blocklist being updated. Blocklisting should only be used when allowlisting
is not an option.
For the link-preview microservice, there are too many legitimate websites to have a
hope of listing them all, so you’ll fall back on a form of blocklisting: extract the host-
name from the URL and then check that the IP address does not resolve to a private
IP address. There are several classes of IP addresses that are never valid targets for a
link-preview service:
 Any loopback address, such as 127.0.0.1, which always refers to the local machine.
Allowing requests to these addresses might allow access to other containers run-
ning in the same pod.
 Any link-local IP address, which are those starting 169.254 in IPv4 or fe80 in
IPv6. These addresses are reserved for communicating with hosts on the same
network segment.
 Private-use IP address ranges, such as 10.x.x.x or 169.198.x.x in IPv4, or site-local
IPv6 addresses (starting fec0 but now deprecated), or IPv6 unique local addresses
(starting fd00). Nodes and pods within a Kubernetes network will normally
have a private-use IPv4 address, but this can be changed.
 Addresses that are not valid for use with HTTP, such as multicast addresses or
the wildcard address 0.0.0.0.
Listing 10.15 shows how to check for URLs that resolve to local or private IP addresses
using Java’s java.net.InetAddress class. This class can handle both IPv4 and IPv6
addresses and provides helper methods to check for most of the types of IP address
listed previously. The only check it doesn’t do is for the newer unique local addresses
that were a late addition to the IPv6 standards. It is easy to check for these yourself
though, by checking if the address is an instance of the Inet6Address class and if the
first two bytes of the raw address are the values 0xFD and 0x00. Because the hostname
in a URL may resolve to more than one IP address, you should check each address
using InetAddress.getAllByName(). If any address is private-use, then the code rejects
the request. Open the LinkPreviewService.java file and add the two new methods
from listing 10.15 to the file.
364
CHAPTER 10
Microservice APIs in Kubernetes
private static boolean isBlockedAddress(String uri)
        throws UnknownHostException {
    var host = URI.create(uri).getHost();           
    for (var ipAddr : InetAddress.getAllByName(host)) {    
        if (ipAddr.isLoopbackAddress() ||         
                ipAddr.isLinkLocalAddress() ||    
                ipAddr.isSiteLocalAddress() ||    
                ipAddr.isMulticastAddress() ||    
                ipAddr.isAnyLocalAddress() ||     
                isUniqueLocalAddress(ipAddr)) {   
            return true;                          
        }
    }
    return false;    
}
private static boolean isUniqueLocalAddress(InetAddress ipAddr) {
    return ipAddr instanceof Inet6Address &&               
            (ipAddr.getAddress()[0] & 0xFF) == 0xFD &&     
            (ipAddr.getAddress()[1] & 0xFF) == 0X00;       
}
You can now update the link-preview operation to reject requests using a URL that
resolves to a local address by changing the implementation of the GET request han-
dler to reject requests for which isBlockedAddress returns true. Find the definition
of the GET handler in the LinkPreviewService.java file and add the check as shown
below in bold:
get("/preview", (request, response) -> {
    var url = request.queryParams("url");
    if (isBlockedAddress(url)) {
        throw new IllegalArgumentException(
                "URL refers to local/private address");
    }
Although this change prevents the most obvious SSRF attacks, it has some limitations:
 You’re checking only the original URL that was provided to the service, but
jsoup by default will follow redirects. An attacker can set up a public website
such as http:/ /evil.example.com, which returns a HTTP redirect to an internal
address inside your cluster. Because only the original URL is validated (and
appears to be a genuine site), jsoup will end up following the redirect and fetch-
ing the internal site.
 Even if you allowlist a set of known good websites, an attacker may be able to
find an open redirect vulnerability on one of those sites that allows them to pull off
the same trick and redirect jsoup to an internal address.
Listing 10.15
Checking for local IP addresses
Extract the hostname 
from the URI.
Check all IP 
addresses for 
this hostname.
Check if the
IP address is
any local- or
private-use type.
Otherwise, 
return false.
To check for IPv6 unique local addresses,
check the first two bytes of the raw address.
365
Deploying Natter on Kubernetes
DEFINITION
An open redirect vulnerability occurs when a legitimate website can
be tricked into issuing a HTTP redirect to a URL supplied by the attacker. For
example, many login services (including OAuth2) accept a URL as a query
parameter and redirect the user to that URL after authentication. Such
parameters should always be strictly validated against a list of allowed URLs.
You can ensure that redirect URLs are validated for SSRF attacks by disabling the
automatic redirect handling behavior in jsoup and implementing it yourself, as shown
in listing 10.16. By calling followRedirects(false) the built-in behavior is pre-
vented, and jsoup will return a response with a 3xx HTTP status code when a redirect
occurs. You can then retrieve the redirected URL from the Location header on the
response. By performing the URL validation inside a loop, you can ensure that all
redirects are validated, not just the first URL. Make sure you define a limit on the num-
ber of redirects to prevent an infinite loop. When the request returns a non-redirect
response, you can parse the document and process it as before. Open the Link-
Previewer.java file and add the method from listing 10.16. 
private static Document fetch(String url) throws IOException {
    Document doc = null;
    int retries = 0;
    while (doc == null && retries++  {                           
    if (!expectedHostNames.contains(request.host())) {    