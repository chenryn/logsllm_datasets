# 通过CTF例题完整学习格式化字符串漏洞
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言：
该漏洞本身已经非常古老了，同时也因为其容易被检测，因此在实际的生产环境中已经不怎么能遇到了，但其原理还是很值得学习的。笔者将在本篇用尽可能便于理解的方式来将该漏洞解释明白。  
如果文章存在纰漏，也欢迎各位师傅纠错。  
 **注：笔者挑选的例题均可在BUUOJ中直接启动远程靶机**
## 引题：
直接讲解其原理或许有些晦涩，不妨先通过一道例题来看看该漏洞造成的问题  
 **例题来源：wdb_2018_2nd_easyfmt**
本题第14行中，printf函数中的参数可由攻击者控制。
    int __cdecl __noreturn main(int argc, const char **argv, const char **envp)
    {
      char buf[100]; // [esp+8h] [ebp-70h] BYREF
      unsigned int v4; // [esp+6Ch] [ebp-Ch]
      v4 = __readgsdword(0x14u);
      setbuf(stdin, 0);
      setbuf(stdout, 0);
      setbuf(stderr, 0);
      puts("Do you know repeater?");
      while ( 1 )
      {
        read(0, buf, 0x64u);
        printf(buf);
        putchar(10);
      }
    }
一般来说，printf应该由程序设计者先将打印格式设定好，然后再交由用户提交内容，就像这样：
    printf("%s",buf)
那么，这和例题中的写法的不同在哪呢？
这里涉及到了“变长参数”的知识，但这并不在本文的讨论范围内。
不过，我们能够这样理解：  
“类似于printf这类函数，它们的参数是不定的(或者说参数没有固定个数)。这样一来，内核只能通过“%s“这样的字符格式来按照顺序将参数一一对应”
我们知道，在32位系统中，函数的传参是通过栈Stack实现的，所以机器也不知道栈里的东西究竟是作为参数被Push进来的，还是作为其他变量、返回地址等等被Push进来的。
所以如果我们这样使用printf：
    printf("%p")
显然，我们没有指定%p应该对应的参数；但计算机可不这么认为，它会将当前ESP+4的内容当作参数打印出来。如果这些值是比较特别的数，那么它就已经泄露的重要信息了  
(当然，因为我们能够控制格式化字符串，所以大可用很多很多%p%s%d等标识，强行泄露整个栈的内容)
在了解上述内容之后，我们回到题目，并试着这样输入：
于是，我们就这样轻松泄露出栈的地址， **甚至知道了我们的参数会被放在哪里**
观察输出就会发现，有一个指针为”0x41414141“，这显然就是我们输入的”AAAA”
那么我们就会这样想：用某个got表地址替换”AAAA“，然后用”%s“将这个地址读出来
    printf("%s",buf)
这个buf实际上是一个地址，就是上述的”AAAA“，如果我们用got[“puts”]替代”AAAA“，那printf就会从”got[“puts”]“这个地址出取出库函数地址，然后把它当作字符串打印出来
栈结构大致如下：
地址 | 内容  
---|---  
ESP+8 | AAAA  
ESP+12 | BBBB  
地址 | 内容 | 内容指向  
---|---|---  
ESP+8 | got.puts | ->libc.puts  
ESP+12 | BBBB  
**%p会将”内容“打印出来，而%s则会将”内容指向“打印出来**  
不过，如果内容是一个非法地址(或没有读的权限)，那%s就会导致段错误而退出
## 漏洞利用：
到目前为止，似乎还只能用来泄露信息，但格式化字符串中还存在一个不怎么常用的”%n“，该占位符不用于输出，而是将
**”当前已打印的字符数写入%n所对应的地址参数中“**
同时，还可以用 **”%?$p“来指示该占位符使用第?个参数**
有了上述两个占位符，我们就能达成”任意地址读写“这一严重的结果
因为我们只需要将”期望写入的地址+填充+%?$n“传入，就能往任何地方写入任意数了
类比例题，如果我们将printf的got表修改为system，再传入”/bin/sh“，就变相执行了
    system("/bin/sh")
回到题目：
我们注意到，我们的输入对应着第6个%p，因此能够这样构造payload：
    puts_got=elf.got["puts"]
    payload=p32(puts_got)+"%6$s"
那么在试图找到占位符”%6$s“时，就会将puts_got视作参数，从而能够得到libc的加载地址，计算出system的地址
那么接下来就是复写got表了。网上或许有很多wp是使用pwntools提供的fmtstr_payload完成操作，但笔者建议初学者应该先尝试自行构造payload。过度依赖工具，容易忽略最基本的东西。
## 构造流程：
我们应该确保地址是符合4字节对齐的(64位中为8字节对齐)，这样才能正确地将其视作一个参数
**同时，使用”%hn“或”%hhn“要优于”%n“**
两者分别写入两字节与单字节，而不像”%n“那样写入4字节。
因为”写入“ 意味着
”打印出“。如果我们试图一次性写入四字节，那么就意味着我们需要程序打印出大致0xf7dbb000(笔者用一个libc_base指代该值)个符号(在64位系统中，这个值将拓展到8字节数)，这通常是难以实现的。
本题笔者给出的payload：
    payload=(p32(printf_got)+"%"+str(padding1)+"c"+"%6$hn")+p32(printf_got+2)+"%"+str(padding2-4)+"c"+"%10$hn"
我们使用”%c“并增加合适的字宽(padding)来让程序打印出足够多的字符，并分别写入printf_got的前两个字节和后两个字节
我们注意到，这个payload正好能够让地址符合对齐规则
实际的构造过程自然是需要读者自行根据gdb的调试来适当添加空字符，但本文我们只需要理解这个payload的合理性——为什么能够正常覆盖？
  * 0000：0xffe8ca28 对应printf_got #指向低字节
  * 0016：0xffe8ca38 对应printf_got+2 #标识高字节
而在printf中，padding是叠加的，不会因为写入过一次就将”已打印字符数清零“
因此我们往往需要 **从小到大** 来构造写入链，否则先打印了过多字符之后，就没办法写入一个更小的数了(也可以通过溢出来刷新，但这往往非常麻烦)
    system1=system&0xffff
    system2=(system&0xffff0000)/0x10000
    padding1=system1-4
    padding2=system2-(padding1+4)
我们先分别取system的低字节和高字节为system1和system2
padding1作为第一次需要写入的值，由于我们先写入了地址，因此需要减去地址的字符数
padding2则是因为我们先让程序打印了(padding1+4)个字符，因此我们减去这个数作为第二次填充的值(最后再减去第二个地址的字符数，这在payload里有体现)
最后只需要确定参数的位置即可：  
第一个地址对应第六个%p，而第二个地址对应第十个%p(这个我们也可以通过gdb数出来)
    from pwn import *
    context.log_level = 'debug'
    elf = ELF("./wdb_2018_2nd_easyfmt")
    p = process("./wdb_2018_2nd_easyfmt")
    libc=elf.libc
    #p=remote("node4.buuoj.cn",29237)
    #libc=ELF("libc_32.so.6")
    puts_got=elf.got["puts"]
    printf_got=elf.got["printf"]
    payload=p32(puts_got)+"%6$s"
    p.send(payload)
    puts_addr = u32(p.recvuntil("\xf7")[-4:])
    libc_base=puts_addr-libc.symbols["puts"]
    log.success(hex(libc_base))
    system=libc_base+libc.symbols["system"]