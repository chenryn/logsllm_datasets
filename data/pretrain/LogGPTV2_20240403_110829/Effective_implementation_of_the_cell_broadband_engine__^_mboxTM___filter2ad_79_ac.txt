3.5 Staging in the SPE Isolation Loader
In contrast to staging implemented in a boot loader like
GRUB [12], our staging method does not seek to expand the
functions of the boot loader. Instead, our staging method
compacts the SPE isolation loader and allocates large work-
ing areas for SPE secure applications.
Figure 7 depicts the staging technique implemented in the
SPE isolation loader. There are three stages in our loader:
stage0, stage1, and stage2. Unlike the boot loader, those
three stages are concatenated into a single image. After this
image is loaded into the isolated LS, stage0 relocates both
stage1 and stage2 from the end of stage0 to the top of the
reserved area to be in application stack space (Figure 7(ii)).
Afterward, stage0 jumps to stage1, and then stage1 fetches
an SPE secure application and overwrites the SPE isolation
loader image initially loaded by the hardware, as Figure 7
308Figure 6: XOR countermeasure against the substituted-ciphertext attack
illustrates. Stage1 validates and decrypts the SPE secure
application as previously described. If the SPE secure appli-
cation is not compromised, stage1 jumps to stage2. Stage2
is a cleanup process to clear the LS and the registers or
other hardware resources that are used by the SPE isolation
loader. In particular, the SPE isolation loader should never
divulge its secrets such as an RSA private key to decrypt
the application encryption key. We need to ﬁll such areas
with zeros. Stage2 ﬁnally allocates the application stack and
jumps to the entry point of the SPE secure application. Note
that stage2 has no secrets and it is erased as the application
stack grows. We implemented both the SPE isolation loader
compaction and contiguous working area allocation in this
way.
Figure 7: Staging technique to compact the loader
and allocate the contiguous working area
4. EXPERIMENT
We evaluated the performance of the application load pro-
cess on a 2.8 GHz isolation-enabled IBM PowerXCell 8i
processor [2]. Although this processor improves the perfor-
mance of double-precision ﬂoating-point calculation at the
hardware level in comparison with the Cell/B.E. processor,
we did not use this new high-performance feature in this
experiment. The instruction sets and hardware block dia-
grams are compatible with the Cell/B.E. processor. This ex-
periment seeks to evaluate the feasibility and the eﬃciency
of our SPE isolation loader implementation.
In these ex-
periments, we measured the performance of three types of
applications:
signed-only, signed/partially-encrypted, and
signed/full-encrypted.
The application loading time of the SPE isolation loader
was evaluated by varying the application executable size
(text segment and data segment) from 20 KB to 80 KB.
Figure 8 gives details of the time consumed by the SPE iso-
lation loader during the application load. The values are
average of 1000 times application load, and all standard de-
viations were less than 0.077% of the mean. The light gray
bars are the load times of the signed-only SPE secure ap-
plications. The dark gray bars are the load times of the
signed/partially-encrypted SPE secure applications. In this
experiment, we encrypted 50% of the application executable
in the partial-encryption. The black bars are the load times
of the signed/full-encrypted SPE secure applications. For
the signed-only application execution, it just takes less than
6.5 milliseconds to load the SPE secure application. This
means that the SPE isolation loader with the encrypt-then-
sign policy can detect tampering in 6.5 milliseconds. Users
can re-allocate the isolated SPE core owned by this process
to another process with minimal overhead comparing to the
sign-then-encrypt policy. Note that the vulnerability in the
encrypt-then-sign policy was ﬁxed in Section 3.4. We have
achieved both resource-eﬃciency and security in the imple-
mentation of the SPE isolation loader. Overall, the load
overhead, about 50 milliseconds consumed by the SPE ap-
plication fetch, RSA-2048/SHA-1 validation, and RSA-2048
and AES-128/CBC mode decryption processes is reasonable.
It takes 500 milliseconds for the 2048-bit RSA sign process
with the existing Trusted Platform Module (TPM) hardware
[3].
According to the graph in Figure 8, the decryption pro-
cess is much more expensive than the validation process.
Comparing the load performance of the partially-encrypted
applications to that of the full-encrypted application, there
is not much of a performance diﬀerence. This indicates that
the RSA decryption to retrieve an application decryption
309key is a more time-consuming task than the AES decryp-
tion of the application image, since there is no relationship
between the encrypted size and the load time. If we could
gain more performance in the RSA decryption part, using
the sign-then-encrypt policy would be feasible.
and extract the expected hash values from the de-
crypted digital signature.
6. V: calculate the current hash values in a streaming
manner: the target ﬁle is divided into several blocks
and the code veriﬁcation service calculates the hash
value for each block. This operation is iterated until
reaching the end of the ﬁle.
7. V: compare the current hash values and expected val-
ues
8. V→R: return the results
The streaming hash calculation enables the code veriﬁcation
service to obtain hash values for an application image that
is larger than an isolated LS.
Figure 8: The performance of the SPE isolation
loader on the 2.8 GHz IBM PowerXCell 8i processor
5. APPLICATION: CODE VERIFICATION
SERVICE
Since not all applications can be ported to SPE executa-
bles, this paper also introduces a general solution. We have
extended the code validation part of the SPE isolation loader
and prototyped the code veriﬁcation service as an SPE se-
cure application. The code veriﬁcation service validates a
program residing on the system memory and returns the
validation results to users. A 2048-bit RSA public key used
to decrypt the digital signature of the target ﬁle is embed-
ded in our code veriﬁcation service and the code veriﬁca-
tion service itself is encrypted with AES-128/CBC mode
by spu-isolated-app. Since the SPE isolation loader veriﬁes
and decrypts the code veriﬁcation service including the RSA
public key at the SPE secure application load time, we can
trust that RSA public key without the need for a PKI-based
digital certiﬁcate for that RSA public key. Figure 9 depicts
the validation processes by the code veriﬁcation service after
the SPE isolation loader passes control to it. In the case of
the SPE isolation loader, the loader only validates the SPE
secure application to be loaded in the isolated LS. In con-
trast, the code veriﬁcation service running in the isolated
LS validates the integrity of user-speciﬁed ﬁles. The code
veriﬁcation service has 8 steps, where V denotes the code
veriﬁcation service and R is the requester running on the
PPE:
1. V: wait for the request
2. R: load a target ﬁle into the system memory
3. R→V: pass the initial address and size of the ﬁle
4. V: copy the digital signature into the isolated LS
5. V: decrypt the digital signature with the 2048-bit RSA
public key embedded in the code veriﬁcation service
Figure 9: Steps of the code veriﬁcation service
We prototyped this code veriﬁcation service on top of the
SPE isolation runtime. Since this service is based on the
SPE isolation loader, RSA-2048 and SHA-1 are used for the
validation process. Table 5 details the performance of our
code veriﬁcation service on the 2.8 GHz IBM PowerXCell
processor. We chose several applications which are generally
used on Linux systems. Note that shared libraries dynami-
cally linked to executables are excluded in the footprint. As
for the experiment of Firefox, we signed the primary exe-
cutable (61 KB image size) which is directly invoked by a
script, /usr/bin/firefox , but didn’t sign Firefox plugins.
The time shown in the table is consumed from Step 3 to
Step 8 in Figure 9. The values are averages of 1,000 veri-
ﬁcation requests and all standard deviations were less than
0.57% of the mean. In all applications, the time consumed
by the validation failure case is longer than that consumed
by the validation success case. This is because we optimized
the code veriﬁcation service for validation success by adding
branch hints in the source.
In the current prototype, the veriﬁcation service only re-
turns the results of the ﬁle veriﬁcation, but it is possible to
implement other security features such as attestation and
secure storage implemented in secure hardware like TPM.
It is noteworthy that such services can be protected from
tampering, behavior eavesdropping, and hijacking by the
hardware isolation facility.
Implementing such services in
software provides beneﬁts for users in terms of not only ﬂex-
ibility, but also security, because they are upgradable if the
310Table 1: The performance of the code veriﬁcation service for each application
Signed Application Validation Time Validation Time
Application Original Application
Footprint (bytes)
Footprint (bytes)
(milliseconds)
success case
ls
ssh
xterm
Xorg
firefox
127,736
404,932
373,996
2,062,188
62,328
128,192
405,376
374,464
2,062,656
62,784
1.4766
2.513
2.3974
8.7097
1.232
(milliseconds)
failure case
2.7367
6.5108
6.09
29.074
1.846
cryptographic algorithms or cryptographic keys are compro-
mised.
6. RELATED WORK
In this section, we compare and clarify the diﬀerences be-
tween our SPE isolation loader and existing secure loaders.
6.1 Software Veriﬁer
Tripwire [15] is a ﬁle validation program that can collabo-
rate with the application loader at application load time.
A user should register the hash values of the target ap-
plications into the database of Tripwire in advance. Trip-
wire compares the current hash values of the target appli-
cations and the values stored in its database as the system
is running. If Tripwire detects a compromised application,
it alerts the user that the system may be compromised. To
protect Tripwire’s database, Tripwire encrypts its database
with a passphrase speciﬁed by the user, which reduces the
risk of using a bad database. However, when users install
new security-sensitive applications or apply patches, they
must update their database with new hash values. In con-
trast, the SPE isolation loader does not use a database to
store the expected application hash values. The expected
hash values are signed with keys and the signed values are
attached to each application as digital signatures. The SPE
isolation loader can validate the integrity of the SPE secure
applications by using the digital signatures.
6.2 Secure Co-Processors
The Trusted Computing Group (TCG) deﬁnes the speci-
ﬁcation of a TPM chip [23], which is a secure co-processor.
One of the security functions in TPM is direct anonymous
attestation (DAA). Tripwire authenticates a client machine
locally, while DAA is based on remote authentication. The
reason is that expected hash values as well as installed pro-
grams in a machine can be compromised at the same time.
Thus, the client machine to be veriﬁed only measures the
hash values of the current system. The remote validation
server compares the expected hash values with the hash val-
ues of the current status as sent from the client, and sends
the validation results back to the client. The measured
hash values are stored in Platform Conﬁguration Registers
(PCRs) that are only accessible from the TPM hardware.
The TPM hardware signs the values in PCRs with its pri-
vate key called the attestation key. On the server side, the
validation program veriﬁes the signed hash values and checks
each hash value. In contrast, our approach is self-contained
and there is no need for a validation server. Although ap-
plication programmers should attach the certiﬁcate and the
digital signature to the SPE secure applications, from the
end-users’ point of view, the users do not need to set up any
databases or remote validation servers to run their secure
applications.
Similar to our work, Flicker [17] provides isolated execu-
tion for security-sensitive applications by using hardware se-
curity features, namely, late launch and attestation. When a
user requests the late launch, the current execution environ-
ment is paused by a processor supporting the late launch. In-
tel and AMD oﬀer such capabilities in their Trusted Execu-
tion Technology and Secure Virtual Machine extensions re-
spectively. Then the late launch allows us to load a security-
sensitive application at an arbitrary time with hardware
protection against software-based attacks.
It disables any
access from other software including supervisory software to
the memory space used by the security-sensitive application.
During this load process, the processor causes the TPM to
reset the speciﬁc PCRs and to store the hash values for the
security-sensitive application into PCR 17. A trusted third
party can validate the integrity of this application by veri-
fying the signed hash values obtained from PCR 17. After
the termination of the security-sensitive application, Flicker
erases all of the secret data existing in the system memory
and resumes the previous execution environment. The main
diﬀerence between Flicker and our work is the application
boot mechanism. Flicker supports the trusted boot, in con-
trast, we support the secure boot. Note that Flicker does
not support encrypted application execution.
NGSCB [18] is also based on the TPM chip, and Dyad [26]