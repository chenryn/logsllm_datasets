              std::__cxx11::basic_string,std::allocator>::basic_string(
                v3,
                "66666\n",
                &v11);
              std::allocator::~allocator(&v11);
              v7 = _cxa_get_exception_ptr(v3);
              std::__cxx11::basic_string,std::allocator>::basic_string(&temp_2, v7);
              _cxa_begin_catch(v3);
              for ( i = 0; i ,std::allocator>::~basic_string(&temp_2);
              _cxa_end_catch();
            }
          }
          else if ( !cnt )
          {
            *(_BYTE *)_cxa_allocate_exception(1ui64) = '6';
            temp = *(_BYTE *)_cxa_begin_catch(v3);
            for ( i = 0; i 
    #include 
    #include 
    typedef unsigned char uint8_t;
    unsigned char S[256] = { 99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118, 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22 };
    unsigned char INV_S[256] = {82, 9, 106, 213, 48, 54, 165, 56, 191, 64, 163, 158, 129, 243, 215, 251, 124, 227, 57, 130, 155, 47, 255, 135, 52, 142, 67, 68, 196, 222, 233, 203, 84, 123, 148, 50, 166, 194, 35, 61, 238, 76, 149, 11, 66, 250, 195, 78, 8, 46, 161, 102, 40, 217, 36, 178, 118, 91, 162, 73, 109, 139, 209, 37, 114, 248, 246, 100, 134, 104, 152, 22, 212, 164, 92, 204, 93, 101, 182, 146, 108, 112, 72, 80, 253, 237, 185, 218, 94, 21, 70, 87, 167, 141, 157, 132, 144, 216, 171, 0, 140, 188, 211, 10, 247, 228, 88, 5, 184, 179, 69, 6, 208, 44, 30, 143, 202, 63, 15, 2, 193, 175, 189, 3, 1, 19, 138, 107, 58, 145, 17, 65, 79, 103, 220, 234, 151, 242, 207, 206, 240, 180, 230, 115, 150, 172, 116, 34, 231, 173, 53, 133, 226, 249, 55, 232, 28, 117, 223, 110, 71, 241, 26, 113, 29, 41, 197, 137, 111, 183, 98, 14, 170, 24, 190, 27, 252, 86, 62, 75, 198, 210, 121, 32, 154, 219, 192, 254, 120, 205, 90, 244, 31, 221, 168, 51, 136, 7, 199, 49, 177, 18, 16, 89, 39, 128, 236, 95, 96, 81, 127, 169, 25, 181, 74, 13, 45, 229, 122, 159, 147, 201, 156, 239, 160, 224, 59, 77, 174, 42, 245, 176, 200, 235, 187, 60, 131, 83, 153, 97, 23, 43, 4, 126, 186, 119, 214, 38, 225, 105, 20, 99, 85, 33, 12, 125};
    unsigned char RC[10] = {1, 2, 4, 8, 16, 32, 64, 128, 27, 54};
    void shift_rows(uint8_t *state) {
        uint8_t temp; // [rsp+Fh] [rbp-1h]
        uint8_t tempa; // [rsp+Fh] [rbp-1h]
        uint8_t tempb; // [rsp+Fh] [rbp-1h]
        uint8_t tempc; // [rsp+Fh] [rbp-1h]
        temp = state[1];
        state[1] = state[5];
        state[5] = state[9];
        state[9] = state[13];
        state[13] = temp;
        tempa = state[2];
        state[2] = state[10];
        state[10] = tempa;
        tempb = state[6];
        state[6] = state[14];
        state[14] = tempb;
        tempc = state[15];
        state[15] = state[11];
        state[11] = state[7];
        state[7] = state[3];
        state[3] = tempc;
    }
    void inv_shift_rows(uint8_t *state) {
        uint8_t temp; // [rsp+Fh] [rbp-1h]
        uint8_t tempa; // [rsp+Fh] [rbp-1h]
        uint8_t tempb; // [rsp+Fh] [rbp-1h]
        uint8_t tempc; // [rsp+Fh] [rbp-1h]
        temp = state[13];
        state[13] = state[9];
        state[9] = state[5];
        state[5] = state[1];
        state[1] = temp;
        tempa = state[14];
        state[14] = state[6];
        state[6] = tempa;
        tempb = state[10];
        state[10] = state[2];
        state[2] = tempb;
        tempc = state[3];
        state[3] = state[7];
        state[7] = state[11];
        state[11] = state[15];
        state[15] = tempc;
    }
    uint8_t mul2(uint8_t a) {
        uint8_t result; // al
        if ( (a & 0x80u) == 0 )
            result = 2 * a;
        else
            result = (2 * a) ^ 0x1B;
        return result;
    }
    uint8_t muln(uint8_t a, uint8_t n) {
        uint8_t result = 0;
        while (n) {
            if (n & 1) result ^= a;
            if (a & 0x80) a = (a >= 1;
        }
        return result;
    }
    void enc_next_ready(uint8_t *key, uint8_t *roundkeys) {
        uint8_t *v2; // rdx
        uint8_t *v3; // rax
        char *v4; // rax
        char v5; // r8
        char v6; // cl
        uint8_t *v7; // rax
        uint8_t temp_1; // [rsp+5h] [rbp-1Bh]
        uint8_t temp_2; // [rsp+6h] [rbp-1Ah]
        uint8_t temp_3; // [rsp+7h] [rbp-19h]
        uint8_t i; // [rsp+17h] [rbp-9h]
        uint8_t ia; // [rsp+17h] [rbp-9h]
        uint8_t *last4bytes; // [rsp+18h] [rbp-8h]
        for ( i = 0; i = 0; i-- ) {
            v5 = roundkeys--;
            ciphertext[i] ^= *v5;
        }
        inv_shift_rows(ciphertext);
        for ( i = 15; i >= 0; i-- )
            ciphertext[i] = INV_S[ciphertext[i]];
        for ( j = 1; j = 0; i-- ) {
                v8 = roundkeys--;
                ciphertext[i] ^= *v8;
            }
            for ( i = 0; i = 0; i-- )
                ciphertext[i] = S[tmp[i]];