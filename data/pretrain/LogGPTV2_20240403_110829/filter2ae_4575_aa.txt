**作者：Joey@天玄安全实验室  
原文链接：**
## 漏洞概述
该漏洞为2021年天府杯中使用的Adobe Reader越界写漏洞，漏洞位于字体解析模块：CoolType.dll中，对应的Adobe
Reader版本为：21.007.20099。
## 原理分析
开启page heap后打开POC，Adobe崩溃于`CoolType + 2013E`处：
    First chance exceptions are reported before any exception handling.
    This exception may be expected and handled.
    eax=00000046 ebx=00000002 ecx=a54d102f edx=5ab2f001 esi=34adeb2c edi=5ab2efd0
    eip=6cf9013e esp=34ade848 ebp=34adea70 iopl=0         nv up ei ng nz ac po cy
    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010293
    CoolType!CTInit+0x1cb4e:
    6cf9013e 807aff00        cmp     byte ptr [edx-1],0         ds:002b:5ab2f000=??
    0:005> dd edx -31
    5ab2efd0  0000d0c0 00000000 00000000 00000000
    5ab2efe0  00000000 00000000 00000000 00000000
    5ab2eff0  00000000 00000000 00000000 d0c00000
    5ab2f000  ???????? ???????? ???????? ????????
    5ab2f010  ???????? ???????? ???????? ????????
    5ab2f020  ???????? ???????? ???????? ????????
    5ab2f030  ???????? ???????? ???????? ????????
    5ab2f040  ???????? ???????? ???????? ????????
从崩溃处可以明显看出越界访问了`0x5ab2f000`处的内存，崩溃函数为：`CoolType +1FCB0`，下断于该函数查看参数：
    0:011> g
    Breakpoint 0 hit
    eax=0000002e ebx=34fff0e4 ecx=34fff310 edx=73006500 esi=59e06fd0 edi=00000001
    eip=6cf8fcb0 esp=34ffef0c ebp=34fff0a8 iopl=0         nv up ei ng nz ac pe cy
    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000297
    CoolType!CTInit+0x1c6c0:
    6cf8fcb0 55              push    ebp
    0:011> dps esp+4 L7
    34ffef10  59e06fd0
    34ffef14  0000002e
    34ffef18  34ffefc4
    34ffef1c  00000001
    34ffef20  00000000
    34ffef24  00000001
    34ffef28  00000000
    0:011> dd 59e06fd0
    59e06fd0  d6000800 50015001 51015101 61016101
    59e06fe0  62016201 31000100 7a540f51 01521d18
    59e06ff0  73006e18 74002000 73006500 d0c07400
    59e07000  ???????? ???????? ???????? ????????
    59e07010  ???????? ???????? ???????? ????????
    59e07020  ???????? ???????? ???????? ????????
    59e07030  ???????? ???????? ???????? ????????
    59e07040  ???????? ???????? ???????? ????????
传入的参数1为POC中构造的字符串，参数2则为字符串的长度，调试后发现调用了函数`MultiToWide`后，传入的字符串变成了崩溃时的内存布局：
    if ( !a9 || a10_ff || a5 )
        {
          v49 = size;
          MultiToWide(a5, v12, *(unsigned __int16 *)a3, (void *)v12, (int)&v49);// 内部调用MultiByteToWideCharStub
          LOWORD(result) = v49;
          *(_WORD *)a3 = v49;
          result = (unsigned __int16)result;
          goto LABEL_83;
        }
    ......
    LABEL_83:
        if ( (_WORD)result )
        {
          v44 = (_BYTE *)(v12 + 1);
          v45 = ~v12;
          v51 = ~v12;
          do
          {
            if ( *(v44 - 1) || *v44 )               // crash
深入分析`MultiToWide`函数，内部调用了`MultiByteToWideCharStub`函数，将字符串转化为宽字节字符串：
    bool __cdecl MultiToWide(int a1, int lpMultiByteStr, int cbMultiByte, void *MultByte, int MultByteSize)
    {
      _BYTE *v5; // edx
      size_t size; // eax
      int v7; // edx
      int v8; // ecx
      char v9; // al
      bool v10; // zf
      unsigned __int16 CodePage; // ax
      int WideCharSize; // eax
      int v14; // esi
      int v15; // [esp+10h] [ebp-210h]
      size_t MultByteSize_1; // [esp+18h] [ebp-208h]
      char lpWideCharStr[512]; // [esp+1Ch] [ebp-204h] BYREF
      v5 = (_BYTE *)lpMultiByteStr;
      v15 = 0;
      size = *(_DWORD *)MultByteSize;
      *(_DWORD *)MultByteSize = 0;
      MultByteSize_1 = size;
      if ( !cbMultiByte )
      {
    LABEL_4:
        v7 = cbMultiByte + lpMultiByteStr;
        v8 = 2 * cbMultiByte;
        *(_DWORD *)MultByteSize = 2 * cbMultiByte;
        if ( 2 * cbMultiByte )
        {
          do
          {
            v9 = *(_BYTE *)--v7;
            *((char *)MultByte + v8 - 1) = 0;
            v10 = v8 == 2;
            v8 -= 2;
            *((_BYTE *)MultByte + v8) = v9;
          }
          while ( !v10 );
        }
        return 1;
      }
      while ( (unsigned __int8)(*v5 - 0x20) = (unsigned int)cbMultiByte )
          goto LABEL_4;
      }
      CodePage = GetCodePage(a1);
      WideCharSize = off_82FF304(CodePage, 0, lpMultiByteStr, cbMultiByte, lpWideCharStr, 0x100);// 该函数为MultiByteToWideCharStub
      if ( WideCharSize && WideCharSize = WideCharSize_double )
          {
            memcpy(MultByte, WideChar, WideCharSize_double);
            return 0;
          }
          else
          {
            memset(MultByte, 0, MultByteSize);
            if ( WideChar )
            {
              if ( MultByteSize >= WideCharSize_double )
                return 0x16;
              v5 = errno();
              v7 = 0x22;
            }
            else
            {
              v5 = errno();
              v7 = 0x16;
            }
            v4 = v7;
            *v5 = v7;
            invalid_parameter_noinfo();
          }
        }
        else
        {
          v4 = 0x16;
          *errno() = 0x16;
          invalid_parameter_noinfo();
        }
      }
      return v4;
    }
调试至`MultiByteToWideCharStub`函数，转化后WideChar字符串的字符数为0x23个：
    0:008> g
    Breakpoint 2 hit
    eax=000003a8 ebx=1306e8a8 ecx=0b9aea08 edx=1306e8a8 esi=00000024 edi=0b9aec3c
    eip=724040e9 esp=0b9ae9d8 ebp=0b9aec0c iopl=0         nv up ei ng nz na po nc
    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000282
    CoolType!CTGetVersion+0x58ab9:
    724040e9 ff1504f35b72    call    dword ptr [CoolType!CTGetVersion+0x213cd4 (725bf304)] ds:002b:725bf304={KERNEL32!MultiByteToWideCharStub (75603da0)}
    0:008> dps esp L6
    0b9ae9d8  000003a8  //CodePage
    0b9ae9dc  00000000  //dwFlags
    0b9ae9e0  1306e8a8  //lpMultiByteStr
    0b9ae9e4  00000024  //cbMultiByte
    0b9ae9e8  0b9aea08  //lpWideCharStr
    0b9ae9ec  00000100  //cchWideChar
    0:008> dd 1306e8a8 Lc
    1306e8a8  5001d608 51015001 61015101 62016101
    1306e8b8  31016201 7a540f51 01521d18 20736e18
    1306e8c8  74736574 74747474 74747474 00007474
    0:008> dd 0b9aea08 Lc
    0b9aea08  0c4ef818 0c4ef810 0b9aea4c 6f6c53a8
    0b9aea18  1306ded0 0c4c5588 00000000 00000000
    0b9aea28  0b9aea50 6dc1901f 6dc19024 1fbe9e77
    0:008> p
    eax=00000023 ebx=1306e8a8 ecx=c7dacb9e edx=0b9aea08 esi=00000024 edi=0b9aec3c
    eip=724040ef esp=0b9ae9f0 ebp=0b9aec0c iopl=0         nv up ei pl zr na pe nc
    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000246
    CoolType!CTGetVersion+0x58abf:
    724040ef 85c0            test    eax,eax
    0:008> dd 0b9aea08 L23*2/4  //转换后0x23个字符的WideChar字符串
    0b9aea08  003f0008 00010050 00010050 00010051
    0b9aea18  00010051 00010061 00010061 00010062
    0b9aea28  00010062 00510031 0054000f 0018007a
    0b9aea38  0052001d 00180001 0073006e 00740020
    0b9aea48  00730065