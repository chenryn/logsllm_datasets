# Hash Table Performance and Vulnerabilities in Microsoft IIS

## Big O Notations
- **Delete**: 
  - Average: \( \mathcal{O}(1) \)
  - Worst: \( \mathcal{O}(n) \)
- **Search**: 
  - Average: \( \mathcal{O}(1) \)
  - Worst: \( \mathcal{O}(n) \)
- **Insert n elements**:
  - Average: \( \mathcal{O}(1) \)
  - Worst: \( \mathcal{O}(n^2) \)

## Hash Table Usage in Microsoft IIS
Microsoft IIS (Internet Information Services) uses hash tables to store a large amount of data, including HTTP headers, server variables, caches, and configurations. This section discusses the two primary hash table implementations used by Microsoft IIS.

### Microsoft's Two Hash Table Implementations
1. **TREE_HASH_TABLE**
   - **Description**: This is a standard implementation often seen in textbooks.
   - **Collision Resolution**: Uses chaining through linked lists.
   - **Rehashing**: Rehashes all records at once when the table becomes unhealthy.
   - **Hash Function**: Combines DJB-Hash with Linear Congruential Generators (LCGs).

2. **LKRHash Table**
   - **Description**: A successor of Linear Hashing, designed for high-concurrency environments.
   - **Invention**: Invented at Microsoft in 1997 (US Patent 6578131).
   - **Contributors**:
     - Paul Larson (Microsoft Research)
     - Murali Krishnan (IIS Team)
     - George Reilly (IIS Team)
   - **Customization**: Allows applications to customize key-extractor, hash-calc, and key-compare operations.

## Outline
1. **Introduction**
2. **Our Research**
   - a) Hash Table Implementation
   - b) Hash Table Usage
   - c) IIS Cache Mechanism
3. **Vulnerabilities**
4. **Recommendations**

## Hash Table Implementation
### Common Vulnerabilities
- **Memory Corruption Bugs**
- **Logic Bugs**
  - **Example**: CVE-2006-3017 discovered by Stefan Esser, where PHP did not distinguish the type of hash-key, leading to the incorrect element being unset.
- **Algorithmic Complexity Attacks**
  - **Hash Flooding Attack**: An attacker can exploit poor hash functions to cause denial of service (DoS).

## Hash Table Usage
### Customizability and Configuration
- **LKRHash**: Designed to be highly customizable, allowing applications to configure their own table-related functions during initialization.
- **Key Considerations**:
  - Is the particular function good?
  - Is the logic of the key-calculation good?
  - Is the logic of the record selection good?

## IIS Components
### Architecture
- **HTTP.SYS**
- **Windows Process Activation Service (WAS)**
- **World Wide Web Publishing Service (W3SVC)**
- **IISSvcs (svchost.exe)**
- **Worker (w3wp.exe)**
- **Initialization DLLs**:
  - iisutil.dll
  - w3tp.dll
  - w3dt.dll
  - iiscore.dll
- **Modules**:
  - static.dll
  - filter.dll
  - isapi.dll
  - iislog.dll
  - cachuri
- **Native IIS Modules**:
  - CustomErrorModule
  - StaticCompression
  - HttpRedirection
  - CgiModule
  - ProtocolSupport
  - DefaultDocument
  - CustomLogging
  - DirectoryListing
  - WindowsAuthModule
  - RequestFiltering
  - FileCacheModule
  - HttpLoggingModule
  - TokenCacheModule
  - AnonymousAuthModule
  - HTTPCacheModule
  - StaticFileModule
  - IsapiModule
  - BasicAuthModule
  - UriCacheModule
  - DynamicCompression

## Request-Level and Global-Level Notify Events
### Request-Level Notify Events
- PreExecuteRequestHandler
- ExecuteRequestHandler
- ReleaseRequestState
- UpdateRequestCache
- EndRequest
- LogRequest
- BeginRequest
- AuthenticateRequest
- AuthorizeRequest
- ResolveRequestCache
- AcquireRequestState
- MapRequestHandler

### Global-Level Notify Events
- TraceEvent
- ThreadCleanup
- CacheCleanup
- CacheOperation
- CustomNotification
- StopListening
- ApplicationStart
- ApplicationStop
- HealthCheck
- FileChange
- ConfigurationChange

## Request-Level and Global-Level Cache
### Request-Level Cache
- BeginRequest
- AuthenticateRequest
- AuthorizeRequest
- ExecuteRequest
- MapRequest
- LogRequest
- EndRequest

### Global-Level Cache
- BeginRequest
- AuthorizeRequest
- ResolveRequestCache
- ExecuteRequest
- MapRequest
- UpdateRequestCache
- LogRequest
- EndRequest
- AuthenticateRequest

## Vulnerabilities
### CVE-2022-22025 - IIS Hash Flooding Attack
- **Description**: Hash Flooding DoS attack on IIS.
- **Affected Components**:
  - **TREE_HASH_TABLE**: Vulnerable by default.
  - **LKRHash**: Vulnerable only if a poor hash function is configured.
- **UriCacheModule**:
  - Caches URI information and configuration.
  - Accessible by default.
  - Every URL access triggers a hash table lookup/insert/delete.
  - Uses TREE_HASH_TABLE.

### Performance Impact
- **Jitter Analysis**:
  - Time of every 1000 new records.
  - Random and collision scenarios.

## Code Snippets
### Insert Record in TREE_HASH_TABLE
```c
bool TREE_HASH_TABLE::InsertRecord(TREE_HASH_TABLE *this, void *record) {
    /* Omitting */
    hashKey = this->vt->GetHashKey(this, record);
    sig = TREE_HASH_TABLE::CalcHash(this, hashKey);
    bucket = this->_ppBuckets[sig % this->_nBuckets];

    /* Check for duplicates */
    while (bucket->_pNext) {
        /* Traverse the linked-list */
    }

    /* Add to the table */
    ret = TREE_HASH_TABLE::AddNodeInternal(this, key, sig, keylen, bucket, &bucket);
    if (ret >= 0) {
        TREE_HASH_TABLE::RehashTableIfNeeded(this);
    }
}
```

### Rehash Table If Needed
```c
void TREE_HASH_TABLE::RehashTableIfNeeded(TREE_HASH_TABLE *this) {
    if (this->_nItems > TREE_HASH_TABLE::GetPrime(2 * this->_nBuckets)) {
        CReaderWriterLock3::WriteLock(&this->locker);
        Prime = TREE_HASH_TABLE::GetPrime(2 * this->_nBuckets);

        if (this->_nItems > Prime && Prime > this->_nBuckets) {
            newBuckets = new Bucket*[Prime];
            for (i = 0; i < Prime; i++) {
                newBuckets[i] = NULL;
            }

            for (i = 0; i < this->_nBuckets; i++) {
                /* Move all records to new table */
            }

            this->_ppBuckets = newBuckets;
            this->_nBuckets = Prime;
        }
    }
    /* Omitting */
}
```

### Questions to Be Solved
1. How much of the hash-key can we control?
2. How easily is the hash function collidable?

### Cache-Key Calculation
- **For the given URL**: `http://server/foobar`
- **MACHINE/WEBROOT/APPHOST/DEFAULT WEB SITE/FOOBAR**
  - **Site Name**: Config Path
  - **Absolute Path**: Absolute Path

```c
DWORD TREE_HASH_TABLE::CalcHash(wchar_t *pwsz) {
    DWORD dwHash = 0;

    for (; *pwsz; ++pwsz)
        dwHash = dwHash * 101 + *pwsz;

    return ((dwHash * 1103515245 + 12345) >> 16) | ((dwHash * 69069 + 1) & 0xffff0000);
}
```

This document provides a comprehensive overview of the hash table usage, vulnerabilities, and performance considerations in Microsoft IIS.