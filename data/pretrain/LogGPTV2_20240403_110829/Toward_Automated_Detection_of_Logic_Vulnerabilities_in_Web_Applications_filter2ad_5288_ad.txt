However, the system also inspects the path where in-
dex.jsp is called ﬁrst, which reﬂects the normal,
in-
tended ﬂow of the application. This servlet, shown on
the right of Figure 3, contains a check on Line 5 that
adds the fact session.User.isAdmin == true to
the PC (assuming that the user is authenticated as an
In this case, when Add.jsp is invoked
administrator).
after index.jsp, the system determines that the invari-
ant session.User.isAdmin == true holds and is
supported. Thus, Waler ﬁnds a supporting path for this
invariant. As a result, the fact that one can execute the
main method of Add.jsp directly, violating its exit invari-
ant session.User.isAdmin == true, is correctly
recognized as an unauthorized access vulnerability.
We found that checking for supported invariants works
well in practice. However, it can produce false posi-
tives and is not capable of capturing all possible logic
ﬂaws. The main source of false positives stems from the
problem that the violation of an invariant, even when it
is supported by a program check on some paths, does
not necessarily result in a security vulnerability. For ex-
ample, access to a normally protected page does not al-
ways result in a vulnerability because either (1) a sensi-
tive operation performed by the page fails if a set of pre-
10
HttpServletResponse res) {
+ " action=\"edituser.jsp\">");
out.println("");
...
out.println("");
1 public void _jspService(HttpServletRequest req,
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23 }
stmt.setString(1, req.getParameter("password"));
stmt.setString(2, req.getParameter("name"));
stmt.setString(3, req.getParameter("username"));
stmt.executeUpdate();
...
stmt = conn.prepareStatement("UPDATE users SET"
}
if(req.getMethod() == "POST") {
+ " password = ?, name = ? WHERE username = ?");
}
edituser.jsp
Figure 4: Simpliﬁed user proﬁle editing vulnerability
(Jebbo-6).
HttpServletResponse res) {
s = conn.prepareStatement("UPDATE posts SET"
...
sess = request.getSession(true);
if(action.equals("/editpost")){
1 public void doPost(HttpServletRequest req,
2
3
4
5
6
7
8
9
10
11
12
13
14
15 }
s.setString(1, (String)sess.getAttribute("auth"));
s.setString(2, req.getParameter("title"));
s.setString(3, req.getParameter("entry"));
s.setString(4, req.getParameter("id"));
s.executeUpdate();
+ " author= ?, title = ?, entry = ?"
+ " WHERE id = ?");
}
PostController.java
Figure 5: Simpliﬁed post editing vulnerability (Jebbo-5).
conditions, uncontrolled by an attacker, is not satisﬁed,
or (2) there is no sensitive operation on the path executed
during the access. Reasoning about these cases is ex-
tremely hard for any automated tool. However, we found
that such false positives often indicate non-security bugs
in the code, and, thus, they are still useful for a developer.
This technique also fails to identify logic vulnerabilities
when the programmer does not introduce any checks for
a security-relevant invariant at all.
In such cases, Wa-
ler incorrectly concludes that an invariant is spurious be-
cause it cannot ﬁnd any support in the code. To improve
this limitation, we introduce an additional technique in
the following section.
4.3.2 Internal Consistency
As mentioned previously, Waler will discard invariants
as spurious when they are not supported by at least one
check along a program path. This can lead to missed
11
vulnerabilities when the invariant is actually security-
relevant. To address this problem, we leverage general
domain knowledge about web applications and identify
a class of invariants that we always consider signiﬁcant,
regardless of the presence of checks in the program.
We consider a likely invariant to be signiﬁcant when
it relates data stored in the user session with data that
is used to query a database. Capturing this type of re-
lationships is important because both the user session
object and the database are the primary mechanism to
store (persistent) information related to the logical state
of the application. Moreover, we do not allow any arbi-
trary relationships: instead, we require that the invariant
be an equality relationship. Such relationships are rarely
coincidental because, by design, session objects and the
database often replicate the same data.
Whenever Waler ﬁnds a path through the application
that violates a signiﬁcant invariant, it reports a logic
vulnerability. To implement this technique, the system
needed to be extended in two ways. First, we instru-
mented database queries so that the variables used in cre-
ating SQL queries are captured by Daikon and included
into the invariant generation process. To this end, for
each SQL query in the web application, we introduced a
“dummy” function. The parameters of each function rep-
resent the variables used in the corresponding database
query, and the function body is empty. The purpose of
introducing this function is to force Daikon to consider
the parameters for invariant generation at the function’s
exit point. Second, we require a mechanism to iden-
tify signiﬁcant invariants. This was done in a straight-
forward fashion by inspecting equality invariants for the
presence of variables that are related to the session object
and database queries.
To see how the internal consistency technique can be
used to identify a vulnerability, consider the code shown
in Figure 4. This ﬁgure shows a snippet of code taken
from the edituser.jsp servlet in one of the Jebbo applica-
tions (see Section 5)5. The purpose of this servlet is to
allow users to edit and update their proﬁles. When the
user invokes the servlet with a GET request, the applica-
tion outputs a form, pre-ﬁlled with the user’s current in-
formation. As part of this form, the application includes
the user’s name in the hidden ﬁeld username, which is
retrieved from the session object (shown in the upper half
of Figure 4). When the user has ﬁnished updating her in-
formation, the form is submitted to the same servlet via a
POST request. When this request is received, the appli-
cation extracts the name of the user from the username
parameter and performs a database query (lower half of
Figure 4).
For this servlet,
the dynamic analysis step (Dai-
kon) generates the invariant session.username ==
db query.parameter3, which expresses the fact
that a user can only update her own proﬁle. Unfortu-
nately, it is possible that a malicious client tampers with
the hidden ﬁeld username before submitting the form.
In this case, the proﬁle of an arbitrary user can be mod-
iﬁed. Waler detects this vulnerability because it deter-
mines that there exists a path in the program where the
aforementioned invariant is violated (as the parameter
username is not checked by the code that handles the
POST request). Since this invariant is considered signif-
icant, a logic ﬂaw is reported.
The idea of checking the consistency of parameters to
database queries can be further extended to also take into
account the ﬁelds of the database that are affected by a
query, but that do not appear explicitly in the query’s pa-
rameters. Consider, for example, a message board ap-
plication that allows users to update their own entries.
It is possible that the corresponding database query uses
only the identiﬁer of the message entry to perform the
update. However, when looking at the rows that are af-
fected by legitimate updates, one can see that the name of
the owner of a posting is always identical to the user who
performs the update. To capture such consistency invari-
ants, we extended the parameters of the “dummy” func-
tion to not only consider the inputs to the database query
but to also include the values of all database ﬁelds that
the query affects (before the query is executed). When
multiple database rows are affected, the “dummy” func-
tion is invoked for each row, allowing Daikon to capture
aggregated values of ﬁelds.
By extending the “dummy” function as outlined pre-
viously, Daikon can directly generate invariants that in-
clude ﬁelds stored in the database, even when these ﬁelds
are not directly speciﬁed in the query parameters. Again,
we consider invariants as signiﬁcant if they introduce an
equality relationship between database contents and ses-
sion variables. The intuition is that these invariants im-
ply a constraint on the database contents that can be ac-
cessed/modiﬁed by the query. If it was possible to violate
such invariants, an attacker could modify records of the
database that should not be affected by the query.
For example, this allows us to detect vulnerabilities
where an attacker can modify the messages of other users
in the Jebbo application. Consider the doPost func-
tion shown in Figure 5. The problem is that an au-
thenticated user is able to edit the message of any other
user by simply providing the application with a valid
message id. During the dynamic analysis, the invari-
ant db.posts author == session.auth is gener-
ated, even though the posts author ﬁeld is not used
as part of the update query. During model checking, we
determine that this invariant can be violated (and report
an alert) because there is no check on the id parameter
that would enforce that only the messages written by the
current user can be modiﬁed.
4.3.3 Vulnerability Reporting
For each detected bug, Waler generates a vulnerability
report. This report contains the likely invariant that was
violated, the program point where this invariant belongs
to, and the path on which the invariant was violated
(given as a sequence of servlets and corresponding meth-
ods that were invoked). This information makes it quite
easy for a developer or analyst to verify vulnerabilities.
Currently, vulnerabilities are simply grouped by program
points. Given the low number of false positives, this al-
lows for an effective analysis of all reports. However, not
every alert generated by Waler currently maps directly
to a vulnerability or a false positive. We found several
situations where several invariant violations referred to
the same vulnerabilities (or a false positives) in applica-
tion code. For example, Waler generated several alerts in
situations when (conceptually) the same invariant is vi-
olated at different program points or when two distinct
invariants refer to the same application’s concept. Find-
ing better techniques to aggregate and triage reports in
such situations is an interesting topic of research, which
we plan to investigate in the future.
4.3.4 Limitations
Our approach aims at detecting logic vulnerabilities in
a general, application-independent way. However, the
current prototype version of Waler has a number of lim-
itations, many of which, we believe, can be solved with
more engineering. First, the types of vulnerabilities that
can be identiﬁed by Waler are limited by the set of
currently-implemented heuristics. For example, if an ap-
plication allows the user to include a negative number of
items in the shopping cart, we would be able to identify
this issue only if the developer checked for that number
to be non-negative on at least one program path leading
to that program point. In addition, this check needs to be
in a direct if -comparison6 between variables. Conditions
deriving from switch instructions or resulting from com-
plex operations (such as regular expression matching) are
not currently implemented.
Another limitation stems from the fact that we need a
tool to derive approximations of program speciﬁcations.
As a result, the detection rate of Waler is bounded by the
capabilities of such a tool. In the current implementation,
we chose to use Daikon. While Daikon is able to derive a
wide variety of complex relationships between program
variables, it has a limited support for some complex data
structures. For example, if the isAdmin ﬂag value is
stored in a hash table, and it is not passed as an argument
to any application function, Daikon will not be able to
generate invariants based on that value. This limitation
could be improved by implementing a smarter explo-
ration technique for complex objects and/or by tracing
12
local and temporary variables for the purpose of likely
invariant generation. However, care needs to be exer-
cised in this case to avoid an explosion in the number of
invariants generated.
Another issue that we faced when working with Dai-
kon was scalability: in its current implementation, Dai-
kon creates a huge data structure in main memory when
processing an execution trace. As a result, using Daikon
on a larger application requires a large amount of RAM.
We worked around this limitation by partitioning the ap-
plication into subsets of classes and by performing the
likely invariant generation on each subset separately.
A more import limitation of Daikon is that invariants
generated by the tool cannot capture all possible rela-
tions. For example, the currently supported by Daikon
invariants do not directly capture such temporal relations,
as “operation A has to precede operation B.” To address
these limitations, different “intended behavior” capturing
tools (such as [1]) could be employed by Waler in the
ﬁrst step of the analysis, although we leave this research
direction for future work.
Another, more general, limitation of the ﬁrst step of
our analysis is the fact that we need to exercise the ap-
plication in a “normal” way (i.e., not deviating from the
developer’s intended behavior). This part cannot be fully
automated and needs human assistance. Nevertheless,
many tools exist to ease the task of recording and script-
ing browsing user activity, such as Selenium [31].
Finally, the state explosion problem is one of the main
limitations of the chosen model checking approach. We
have already described several heuristics that help Waler
limiting the state space of an application, and currently,
we are working on implementing a combination of con-
crete and symbolic execution techniques to further im-
prove scalability.
5 Evaluation
We evaluated the effectiveness of our system in detecting
logic vulnerabilities on twelve applications: four real-
world applications, (namely, Easy JSP Forum, JspCart7,
GIMS and JaCoB), which we download from the Source-
Forge repository [28], and eight servlet-based applica-
tions written by senior-level undergraduate students as
part of a class project, named Jebbo. When choosing
the applications, we were looking for the ones that could
potentially contain interesting logic vulnerabilities, were
small-enough to scale with the current prototype of Wa-
ler, and did not use any additional frameworks (such as
Struts or Faces). While we show that it is possible to
scale Waler to real-world applications, its scalability is
still a work in progress as it is based on two tools, JPF
and Daikon, that were not designed to work on large ap-
plications.
13
All chosen applications were analyzed following the
techniques introduced in Section 4. During the model
checking phase, we explored paths until a depth of 6 (that
is, the limit for the depth-ﬁrst search of JPF was set to 6).
Note that all vulnerabilities reported below were found at
depth of three or less; we then doubled the search depth
to let Waler check for deeper bugs. All tests were per-