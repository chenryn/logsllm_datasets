𝑚, 𝑚, 𝑟′) :
if ¬Vf(pk, 𝜎′, (𝑐′
return (𝑚, fd′)
𝑚, 𝑠𝑟𝑐′)) :
return ⊥ //verify platform signature
//𝑚𝑠𝑔 = (𝑚, 𝑓 𝑑′) will be used to forward the message
Figure 3: Tree-linkable construction.
Session 5C: Messaging and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1491S = (KGen𝑠𝑖𝑔 → (vk𝑠, sk𝑠), Sig(sk𝑠, 𝑚) → 𝜎,
Vf(vk𝑠, 𝜎, 𝑚) → {0, 1}.
• A commitment scheme
• A signature scheme
C = (Commit(𝑚) → (𝑐𝑚, 𝑟), Open(𝑐𝑚, 𝑚, 𝑟) → {0, 1}).
One of the merits of the scheme in Figure 3 is that it is non-
interactive. The communication for each protocol only consists of
a single message sent from the user to the platform in the case of
a send, or from the platform to the user in the case of a receipt,
though optional status messages could be added to let a platform
or user know if an operation succeeds.
We prove the following security theorems in Appendix B. Defi-
nitions of CPA- and AE-security can be found in [2].
Theorem 4.1. Assuming that the platform encryption scheme P
is CPA-secure, the commitment scheme C is hiding, and that the
messaging encryption scheme E is AE-secure, then Scheme 1 is tree-
linkably confidential (Definition 3.4).
Theorem 4.2. Assuming that the platform’s signature scheme S
is secure against any efficient adversary A, then Scheme 1 satisfies
accountability (Definition 3.5).
Theorem 4.3. Assuming that the signature scheme S is unforge-
able and the commitment scheme C is binding against any efficient
adversary A, then Scheme 1 is unforgeable (Definition 3.6).
Theorem 4.4.
If for any efficient adversary, the messaging sys-
tem’s encryption scheme E satisfies deniability1 and the platform’s
encryption scheme P is CPA-secure, then the scheme is deniable (Def-
inition 3.8).
5 TREE-UNLINKABLE SOURCE-TRACKING
Intuitively, we could achieve tree-unlinkability in the scheme de-
scribed in Section 4 if there was a way to re-randomize the for-
warding data fd each time a message is forwarded. However, such
a re-randomization is not easily achieved because re-randomizing
the platform’s signature is not sufficient to make forwarding data
unlinkable. Both the signature and the signed contents need to be
re-randomized without revealing the contents to the platform.
Our tree-unlinkable construction preserves the basic framework
of the tree-linkable scheme in that forwarding data consists of a
“signature” (in this case a MAC) on a commitment to the message
and an encryption of the source user and optional metadata. Users
re-randomize this forwarding data by re-randomizing the contents
of the signature and proving the validity of the re-randomized
values in zero-knowledge to the platform, which then issues the
user a fresh signature on those values.
Our scheme can be thought of as similar to a keyed-verification
anonymous credential scheme [4–6] that we modify to allow for
anonymous and unlinkable credential delegation via forwarding.
The attributes included in each credential are an encryption of
the source identity and metadata as well as a hash of the mes-
sage content. Since our attributes are a mix of group elements and
scalars and we need users to efficiently prove properties about these
1See Appendix A.2 for a formal definition of deniability for encrypted messaging
schemes.
attributes to the platform in zero-knowledge, we use the keyed-
verification anonymous credential scheme presented in [5]. This
construction relies on an algebraic MAC rather than a signature
for the credential. This is fine for us because only the platform will
need to distribute and verify forwarding credentials.
5.1 Tools
Zero Knowledge Proofs. We use zero knowledge proofs, denoted
with the standard Camenisch-Stadler notation ( [3]), i.e.,
𝜋 ← 𝑃𝐾{(secrets) : expressions with secret and public vals}
When verifying a proof 𝜋, we use the notation Vf(𝜋, [optional: 𝑃1,
𝑃2, ...]), where 𝑃1, 𝑃2, ... are any public values used in the proof.
Algebraic MAC. The main building block of our scheme is an
algebraic MAC construction from Chase et al. [5]. Our particular
instantiation requires a MAC on three attributes, two of which are
group elements encoding the source information about a message
(𝐸1 and 𝐸2), and the other a scalar corresponding to a hash of the
message plaintext 𝑚, which we refer to by 𝑑 ← 𝐻(𝑚).
This MAC requires a group G of prime order 𝑞 where the discrete
log problem is hard and 10 (public) fixed group elements. Because
we use most of the MAC functionality as a black-box in our scheme,
we will only deal with five of these parameters explicitly, and refer
to them as 𝐺, 𝐺𝑑, 𝐺𝑦1, 𝐺𝑦2, 𝐺𝑦3. These parameters correspond to
the parameters of the same name described in Section 3.1 of [5].
In an effort to reduce redundancy and keep our scheme simple,
we use this MAC as a black-box via the following functions:
• KGen𝑀𝐴𝐶(𝑝𝑎𝑟𝑎𝑚𝑠) → sk𝑀𝐴𝐶 : Generates a MAC key.
• issue(𝑑, 𝐸1, 𝐸2, sk𝑀𝐴𝐶) → 𝜎, 𝜋𝑖𝑠𝑠𝑢𝑒 : This function issues a MAC,
𝜎, on the attributes 𝑑, 𝐸1, and 𝐸2, which are provided in the clear,
as well as a proof that the MAC has been computed correctly,
𝜋𝑖𝑠𝑠𝑢𝑒 (See [5], Section 3.2). When verifying the unblinded MAC
on attributes 𝑖𝑛𝑓 𝑜 = (𝑑, 𝐸1, 𝐸2), we use the verification function
Vf(𝜎, 𝜋𝑖𝑠𝑠𝑢𝑒, 𝑖𝑛𝑓 𝑜).
• blindIssue(𝑐𝑡𝑑, 𝑐𝑡𝐸1, 𝑐𝑡𝐸2, pk, sk𝑀𝐴𝐶) → 𝑐𝑡𝜎, 𝜋𝑖𝑠𝑠𝑢𝑒 : Given ElGa-
mal ciphertexts of each attribute encrypted under pk, this func-
tion blindly issues an encrypted MAC 𝑐𝑡𝜎 encrypted under the
same key. 𝜋𝑖𝑠𝑠𝑢𝑒 is a proof that the MAC is well-formed. (See [5],
Section 5.10).
• Vf𝑖𝑠𝑠𝑢𝑒(𝜋𝑖𝑠𝑠𝑢𝑒, 𝑐𝑡𝜎, 𝑐𝑡𝑑, 𝑐𝑡𝐸1, 𝑐𝑡𝐸2, sk) → 𝜎 or ⊥ : This is called by
a user to verify that a blindly issued MAC is well-formed. If the
proof is correct, the function returns the decrypted MAC. (See [5],
Section 5.10).
• prepPresent(𝜎, 𝑑, 𝐸1, 𝐸2) → 𝐶𝑑, 𝐶𝐸1, 𝐶𝐸2, 𝑧, 𝜋𝑝𝑟𝑒𝑠𝑒𝑛𝑡 : When a
user wants to prove to a platform that it has a valid MAC, it uses
this function to commit to its attributes and MAC with opening
𝑧, and a proof 𝜋𝑝𝑟𝑒𝑠𝑒𝑛𝑡 that it has a valid MAC for these com-
mitments. The commitments have the form 𝐶𝐸1 = 𝐺𝑧
𝑦1𝐸1, 𝐶𝐸2 =
. We include these commitments separately
𝑦2𝐸2, 𝐶𝑑 = 𝐺𝑧
𝐺𝑧
because they are later used for a second proof of the MAC con-
tents, but assume all necessary commitments are included in
𝜋𝑝𝑟𝑒𝑠𝑒𝑛𝑡. (See [5], Section 3.2).
• blindVf(𝜋𝑝𝑟𝑒𝑠𝑒𝑛𝑡 , 𝐶𝐹 , sk𝑀𝐴𝐶) → valid or ⊥ : Verifies that 𝜋𝑝𝑟𝑒𝑠𝑒𝑛𝑡
is a valid proof that the user holds a MAC on the committed at-
tributes 𝐶𝐹 . (See [5], Section 3.2).
𝑦3𝐺𝑑
𝑑
Session 5C: Messaging and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1492present(𝑑, 𝐸1, 𝐸2, 𝜎, pk = 𝑌)
(𝐶𝑑, 𝐶𝐸1, 𝐶𝐸2, 𝑧, 𝜋𝑝𝑟𝑒𝑠𝑒𝑛𝑡) ← prepPresent(𝜎, 𝑑, 𝐸1, 𝐸2)
//Additional commitments for proving re-randomization
(𝑧′, 𝑟𝑛𝑑) ←R Z2
𝑑 ← 𝐶𝑑𝐺𝑧′
𝐶′
𝐸1 ← 𝐺𝑧′
𝐶′
𝜋𝑟𝑒𝑟𝑎𝑛𝑑 = 𝑃𝐾 {(𝑧′, 𝑟𝑛𝑑) : 𝐶′
𝑦1𝐺𝑟𝑛𝑑𝐶𝐸1, 𝐶′
𝐸2 ← 𝐺𝑧′
𝑦2𝑌 𝑟𝑛𝑑𝐶𝐸2
𝑑/𝐶𝑑 = 𝐺𝑧′
𝑦3
𝑞
𝑦3
𝐸2/𝐶𝐸2 = 𝐺𝑧′
𝑦2𝑌 𝑟𝑛𝑑 }
∧ 𝐶′
𝑦1𝐺𝑟𝑛𝑑 ∧ 𝐶′
𝐸1/𝐶𝐸1 = 𝐺𝑧′
𝐶𝐹 ← (𝐶𝑑, 𝐶𝐸1, 𝐶𝐸2)
𝐶′
𝑑, 𝐶′
𝐹 ← (𝐶′
𝐸1, 𝐶′
𝐸2)
𝑜 𝑓 ← (𝑧 + 𝑧′, 𝑑, (𝐸1𝐺𝑟𝑛𝑑, 𝐸2𝑌 𝑟𝑛𝑑))
return (𝐶𝑓 , 𝐶′
𝑓 , 𝑜 𝑓 , 𝜋𝑝𝑟𝑒𝑠𝑒𝑛𝑡 , 𝜋𝑟𝑒𝑟𝑎𝑛𝑑)
Figure 4: Construction of a sender’s proof in our tree-
unlinkable scheme. This function constructs a proof that a user
has a valid forwarding credential, and additionally that 𝐶′
𝐹 is a
commitment to the same message and a re-randomization of the
source of the forwarding credential in question.
Protocols using El-Gamal Encryption. Chase et al.’s algebraic
MAC (Section 5.1) relies on a number of protocols based on manip-
ulating El-Gamal ciphertexts, variants of which will also be used
in our scheme. These protocols all rely on the homomorphic prop-
erties of El-Gamal encryption, which allow users to re-randomize
ciphertexts without knowledge of the platform’s secret key.
Similarly to the Chase et al. scheme, re-randomizing El-Gamal
ciphertexts will enable blind issuance and unlinkable presentation
of a MAC on hidden attributes in our scheme. We will use their
techniques to prove that a user possesses valid credentials to for-
ward a message. Whereas the original Chase et al. paper shows how
to prove that a commitment commits to the same value as a given
ciphertext, our protocol will augment theirs and show that a com-
mitment commits to a re-randomization of a given ciphertext. We
need the re-randomization to render the encryption of a message
author’s identity unlinkable to past forwards of the same message.
5.2 Our Construction
Our scheme requires a group G of prime order 𝑞 in which the dis-
crete log problem is hard and the 10 fixed group elements required
by the MAC described in Section 5.1.
We assume that each message 𝑚 can be hashed to a representa-
tion in Z𝑞, which we denote as 𝑑 ← 𝐻(𝑚). We also assume that
each (𝑠𝑟𝑐, md) pair corresponding to a source user and metadata
value have a reversible representation in G. Our scheme can easily
be extended if more than one element is needed to represent these
values.
Keys. Our scheme assumes that a platform has an El-Gamal key
pair (𝑦, 𝑌 = 𝐺 𝑦) for 𝑦 ∈ Z𝑞. This is used for encrypting source
ciphertexts. The platform also has a MAC key sk𝑀𝐴𝐶.
Authoring and forwarding data structure. Forwarding data fd
held by a user consists of a tuple (𝑚, (𝐸1, 𝐸2), 𝜎), where 𝑚 corre-
sponds to the message plaintext, (𝐸1, 𝐸2) is an ElGamal encryp-
tion of some (𝑠𝑟𝑐, md) pair 𝑆 ∈ G, and 𝜎 is a MAC on attributes
𝑑 ← 𝐻(𝑚), 𝐸1, 𝐸2.
2
, 𝐸(𝐴)
, 𝐸(𝐹)
2
redeem(𝐶𝐴, 𝑠𝑟𝑐, 𝑜𝐴, 𝐶𝐹 , 𝑜𝐹 , 𝑡𝑦𝑝𝑒, pk = 𝑌)
(𝐶𝑑, 𝐶𝐸1, 𝐶𝐸2) ← 𝐶𝐹 , (𝐸(𝐴)
) ← 𝑠𝑟𝑐
1
(𝑧𝐹 , 𝑑𝐹 , 𝐸(𝐹)
) ← 𝑜𝐹 , (𝑧𝐴, 𝑑𝐴) ← 𝑜𝐴
1
ℎ, 𝑟1, 𝑟2, 𝑟3, 𝑟𝑛𝑑 ←R Z𝑞, 𝐻 ← 𝐺ℎ
)
(𝐴1, 𝐴2) ← (𝐺𝑟1, 𝐻 𝑟1𝐺
(𝐵1, 𝐵2) ← (𝐺𝑟2, 𝐻 𝑟2 𝐸(𝑡 𝑦𝑝𝑒)
𝐺𝑟𝑛𝑑)
(𝐶1, 𝐶2) ← (𝐺𝑟3, 𝐻 𝑟3 𝐸(𝑡 𝑦𝑝𝑒)
𝑌 𝑟𝑛𝑑)
𝑃1 ← 𝐻 = 𝐺ℎ ∧ 𝐴1 = 𝐺𝑟1 ∧ 𝐵1 = 𝐺𝑟2 ∧ 𝐶1 = 𝐺𝑟3
𝑑𝑡 𝑦𝑝𝑒
𝑑
1
2
∧ 𝐶𝐴 = 𝐺𝑑𝐴
𝑦3 ∧ 𝐶𝑑 = 𝐺𝑑𝐹
𝐺𝑧𝐴
𝑑 ∧ 𝐵2/𝐸(𝐴)
𝑃𝐴 ← 𝐴2 = 𝐻 𝑟1𝐺𝑑𝐴
1
𝑑
𝑑
𝐺𝑧𝐹
𝑦3
= 𝐻 𝑟2𝐺𝑟𝑛𝑑
∧ 𝐶2/𝐸(𝐴)
2
= 𝐻 𝑟3𝑌 𝑟𝑛𝑑
𝑃𝐹 ← 𝐴2 = 𝐻 𝑟1𝐺𝑑𝐹
𝑑 ∧ 𝐵2/𝐶𝐸1 = 𝐻 𝑟2𝐺𝑟𝑛𝑑/𝐺𝑧𝐹
𝑦1
∧ 𝐶2/𝐶𝐸2 = 𝐻 𝑟3𝑌 𝑟𝑛𝑑/𝐺𝑧𝐹
𝑦2
𝜋 ← 𝑃𝐾 {(ℎ, 𝑟1, 𝑟2, 𝑟3, 𝑟𝑛𝑑, 𝑑𝐴, 𝑧𝐴, 𝑑𝐹 , 𝑧𝐹) :
𝑃1 ∧ (𝑃𝐴 ∨ 𝑃𝐹)}
𝑖𝑛𝑓 𝑜 ← (𝐻, (𝐴1, 𝐴2), (𝐵1, 𝐵2), (𝐶1, 𝐶2))
return (𝜋, 𝑖𝑛𝑓 𝑜, ℎ, 𝐸(𝑡 𝑦𝑝𝑒)