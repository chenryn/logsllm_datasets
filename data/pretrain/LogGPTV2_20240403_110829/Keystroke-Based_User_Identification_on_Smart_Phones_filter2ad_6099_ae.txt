1.33
2.24
1.14
1.73
—
FAR
1.61
1.19
2.01
2.14
1.73
1.71
1.29
2.31
1.01
2.04
2.12
3.11
2.07
—
0
0
0
0
0
0
0
0
0
0
0
0
0
—
system achieves 0% FRR and approximately 2% FAR after the veriﬁcation mode.
0% FRR indicates that our system is completely user friendly and never rejects
a legitimate user. It also has a very low FAR as compared to other techniques.
What is the impact of number of proﬁles on the accuracy of our sys-
tem? Scalability analysis is important to determine the minimum number of
proﬁles/keystrokes required to achieve acceptable accuracy. We take the users
with the most number of proﬁles (u10, u14, and u15) for our scalability analysis
and tabulate the results in Table 5. Note that each proﬁle is made up of 250
keys. The results in Table 5 suggest a gradual, almost linear decrease in FAR and
FRR as we increase the number of training proﬁles up to 50. This shows that as
the number of training proﬁles increases, the accuracy of our system increases.
What is the relationship between the size of a proﬁle and accuracy of
our system? For the same users (u10, u14, and u15,) we now take 50 proﬁles
of each user and study the relationship between FAR and FRR and the size of
a proﬁle. These results are also tabulated in Table 5. It is obvious from Table 5
that FAR and FRR values degrade for small size proﬁles, however, for a proﬁle
of 250 keys, the error rates on average are 2%. It can also be seen that increasing
the size of proﬁle from 250 to 350 keys further improves the detection accuracy
but the improvement is not much signiﬁcant; therefore, we use a proﬁle of 250
keys. Note that increasing the size of proﬁle not only increases the detection ac-
curacy but also the time required to make a proﬁle. Our aim is to get reasonable
detection accuracy with as small a proﬁle size as possible. Proﬁle size of 250 keys
satisﬁes the criteria.
Table 5. Relationship of number of training proﬁles and size of a proﬁle with error
rates
Number of proﬁles (Profile Size = 250)
50
20
30
40
Size of proﬁle (Number of Profiles = 50)
150
200
250
300
350
Users FAR FRR FAR FRR FAR FRR FAR FRR FAR FRR FAR FRR FAR FRR FAR FRR FAR FRR
11.2 7.28 4.98 3.45 1.74 1.29 1.45 1.11 1.10 1.01
9.21 8.12 4.11 4.01 1.30 1.40 1.03 1.21 0.97 1.11
17.8 11.5 9.62 6.22 3.39 1.98 2.87 1.23 1.91 0.99
2.32 1.99 2.01 1.51 1.93 1.35 1.74 1.29
3.21 2.21 1.97 2.01 1.77 1.78 1.30 1.40
5.89 3.13 5.11 2.72 4.01 2.11 3.39 1.98
u10
u14
u15
Keystroke-Based User Identiﬁcation on Smart Phones
239
Table 6. User identiﬁcation delay
Avg
Avg
Avg
Avg
Avg
Avg
Avg
SMSs /
Users Proﬁle Users Proﬁle Users Proﬁle Users Proﬁle Users Proﬁle Users Proﬁle Users Proﬁle
SMSs /
SMSs /
SMSs /
SMSs /
SMSs /
SMSs /
u1
u8
u15
u22
1.06
1.03
1.33
1.22
u2
u9
u16
u23
1.44
1.11
0.16
1.24
u3
u10
u17
u24
1.25
1.34
1.17
1.13
u4
u11
u18
u25
1.09
1.04
1.15
1.30
u5
u12
u19
—
1.26
1.27
1.00
—
u6
u13
u20
—
0.65
1.32
1.43
—
u7
u14
u21
—
1.03
1.39
1.25
—
What is the user identiﬁcation delay? Table 6 shows the average number
of SMS a user types in a single proﬁle. Remember our system tries to classify a
user after every 250 keystrokes using the keystrokes features’ set. It can be seen
from Table 6 that on the average a proﬁle of 250 keystrokes is generated once
a user sends just 1 SMS. So our detection delay is bounded by the time within
which a user sends an SMS. Detection delay is not a signiﬁcant problem if the
objective of an imposter is to steal the mobile phone. However, this delay will
become very crucial if an imposter wants to steal information from the mobile
phone. We invoke the veriﬁcation mode of our system to disallow an imposter
to transmit data from the mobile phone.
How much damage can an imposter do in 250 keystrokes? We have done
an interesting study in which we requested 4 of our colleagues in the virology
lab to act as imposters on a trained mobile phone to get an understanding of
how much data they can read in a given document. (Remember that they cannot
upload or copy the data because of the veriﬁcation mode). We downloaded the
current paper (20 pages long) on a smart phone and told the imposters the exact
directory path of the paper. (Remember that it is the best case scenario for an
imposter; otherwise, he needs to press more keys to search a document). We
asked them to ﬁnd the line “and the system will lose its usability appeal” in the
paper that happens to be on page 9. We tabulate the number of keys pressed by
each of them in Table 7 to locate the required information. It is interesting to
note that, even in this best case scenario, only one of them was able to locate
the information within 250 keystrokes. We have also done an interesting study
to understand that how far diﬀerent imposters can scan the given document in
250 keystrokes. i4 appears to be a smart imposter who manages to reach page 14
in 250 keystrokes. Most of the users pressed 250 keystrokes in 8 to 15 minutes.
What are the training and testing times of our system? We now analyze
the training and testing times of diﬀerent classiﬁers in Table 8. The training
time of our classiﬁer is 28 seconds, but our testing time is just 520 milliseconds.
Thus, while the system’s run-time complexity is comparable to other existing
algorithms, its training complexity is signiﬁcantly higher. The main source of this
Table 7. Analysis showing the number of keystrokes to perform the task
Number of Keys Page #
Imposters
to Perform
the Task
After
250 Keys Imposters
Number of Keys Page #
to Perform
the Task
After
250 Keys
i1
i3
332
297
7
8
i2
i4
442
189
6
14
240
S. Zahid et al.
Table 8. The processing overheads of classiﬁers on an old 233MHz, 32MB RAM
computer
Algorithm Train Test Algorithm Train Test Algorithm Train Test
(secs) (secs)
(secs) (secs)
(secs) (secs)
PSO-GA Fuzzy
RBFN
28
0.41
0.52 Naive Bayes
0.42
Kstar
0
8
0.52 BPNN
0.21
J48
4.8
0.23
2.0
0.22
complexity are the back-end dynamic optimizers used in our system. However, we
emphasize that training complexity needs to be incurred very infrequently after
every 5 training proﬁles (usually after a few hours). Moreover, unlike desktop
computers, mobile phones remain idle much of the time and the retraining can
be performed during these inactivity periods.
7 Limitations and Potential Countermeasures
We now highlight the important limitations and countermeasures of our system.
Identiﬁcation delay period. Our system can detect an imposter after observ-
ing a minimum of 250 keystrokes. The identiﬁcation delay is hence a function of
the imposters keyboard usage. We argue that an imposter’s keyboard usage can
belong to one of the following two types: (1) he/she wants to get access to the
sensitive information/documents on the phone, and (2) he/she wants to steal
the mobile phone. In the ﬁrst case, the imposter must try to quickly get access
to the sensitive information and, as a result, the time to generate a proﬁle of 250
keystrokes, as mentioned before, will reduce to 10-15 minutes. If the imposter
is of the second type, then our system will detect him/her after 250 keystrokes
through our PIN veriﬁcation procedure.
Accuracy is sensitive to the number of proﬁles. Another shortcoming of
our approach is that it requires a cold start of 30 or more proﬁles to accurately
learn the behavior of a user. In this time period, the system might suﬀer from
relatively high FAR and FRR which are still comparable with the existing tech-
niques (see Tables 2 and 5). But our system provides signiﬁcantly better FAR
and FRR after collecting just one week of training data, which we believe is
quite reasonable.
Portability to full keyboard smart phones. We have not tested our proto-
type on BlackBerry category of phones that have QWERTY keyboards. While
we believe that the results of our system will scale to these phones, we are
currently soliciting volunteers with full keyboard Nokia phones for testing and
evaluation.
Relatively large training time. Our systems takes 28 seconds on the average
once we retrain it after every 5 proﬁles. During these 28 seconds after every
few hours, the response time of the mobile phone degrades which might result
in some annoyance to the user. We argue that this cost is worth the beneﬁt of
very low FAR and FRR values of our system. Moreover, as suggested earlier, the
retraining module can be customized to execute during inactivity periods.
Keystroke-Based User Identiﬁcation on Smart Phones
241
Table 9. Improvement shown by Hybrid PSO-GA Fuzzy system over the other
classiﬁers
%Improvement
%Improvement
Algorithm
Naive Bayes
RBFN
J48
PSO-Fuzzy
FAR
94.4
94.2
93.1
74.4
FRR Algorithm FAR
94.3
95.0
92.9
93.5
88.8
95.7
77.2 GA-Fuzzy
76.4
BPNN
Kstar
Fuzzy
FRR
94.6
94.4
89.1
78.2
Resilience to reinstalling OS. A savvy imposter may reinstall the OS on the
phone, thus circumventing our system. This is a common limitation for all host-
based intrusion detection systems. A solution to this problem is OS virtualization
which is computationally infeasible on contemporary mobile phones.
8 Conclusion and Future Work
We have proposed a user identiﬁcation system that monitors the keystroke dy-
namics of a mobile phone user to diﬀerentiate legitimate users from imposters.
We have used a custom dataset of 25 diverse mobile phone users to show that
the proposed system can provide an error rate of less than 2% after the detec-
tion mode and an FRR of close to zero after the PIN veriﬁcation mode. We
have also compared our approach with 5 state-of-the-art existing techniques for
keystroke-based user identiﬁcation. Table 9 shows percentage improvement of
our scheme compared to the existing schemes on our dataset. In future, we in-
tend to incorporate our system in a Symbian mobile phone and then evaluate
its accuracy on-line under real-world usage circumstances. Interested researchers
can also work on the modiﬁcation of the proposed system for its portability to
the mobile phones with QWERTY keyboards.
Acknowledgments
Saira Zahid and Muhammad Shahzad are working on the project “An Intelligent
Secure Kernel for Next Generation Mobile Computing Devices”7 and are in part
funded by the National ICT R&D Fund, Ministry of Information Technology,
Government of Pakistan. The information, data, comments, and views detailed
herein may not necessarily reﬂect the endorsements of views of the National ICT
R&D Fund.
References
1. Red herring mobiles scream for help: Uk-based mobile security company adds se-
curity to mobile phones (October 2006)
2. Babin, S., Pranata, A.: Developing Software for Symbian OS: A Beginner’s Guide
to Creating Symbian OS V9 Smartphone Applications in C++. John Wiley &
Sons, Chichester (2007)
7
http://isk.nexginrc.org/
242
S. Zahid et al.
3. Bleha, S., Slivinsky, C., Hussien, B.: Computer-access security systems using
keystroke dynamics. IEEE Transactions on Pattern Analysis and Machine Intelli-
gence 12(12), 1217–1222 (1990)
4. Branke, J.: Evolutionary Optimization in Dynamic Environments. Kluwer Aca-
demic Publishers, Dordrecht (2002)
5. Card, S.K., Moran, T.P., Newell, A.: Computer text-editing: An information-
processing analysis of a routine cognitive skill (1987)
6. Clarke, N.L., Furnell, S.M.: Authentication of users on mobile telephones–A survey
of attitudes and practices. Computers & Security 24(7), 519–527 (2005)
7. Clarke, N.L., Furnell, S.M.: Authenticating mobile phone users using keystroke
analysis. International Journal of Information Security 6(1), 1–14 (2007)
8. Cleary, J.G., Trigg, L.E.: K*: An Instance-based Learner Using an Entropic Dis-
tance Measure. In: Machine Learning-International Workshop then Conference, pp.
108–114. Morgan Kaufman Publishers, Inc., San Francisco (1995)
9. Corner, M.D., Noble, B.D.: Zero-interaction authentication. In: Proceedings of the
8th annual international conference on Mobile computing and networking, pp. 1–
11. ACM, New York (2002)
10. Engelbrecht, A.P.: Fundamentals of computational swarm intelligence. John Wiley
& Sons, Chichester (2006)
11. Goldberg, D.E.: Genetic Algorithms in Search, Optimization and Machine Learn-
ing. Addison-Wesley Longman Publishing Co., Inc., Boston (1989)
12. BioPassword Inc., http://www.biopassword.com
13. Hwang, Y.S., Bang, S.Y.: An Eﬃcient Method to Construct a Radial Basis Func-
tion Neural Network Classiﬁer. Neural Networks 10(8), 1495–1503 (1997)
14. Joyce, R., Gupta, G.: Identity authentication based on keystroke latencies. Com-
munications of the ACM 33(2), 168–176 (1990)
15. Karatzouni, S., Clarke, N.: Keystroke Analysis for Thumb-based Keyboards on Mo-
bile Devices. In: International Federation for Information Processing-Publications-
IFIP, vol. 232, pp. 253–263 (2007)
16. Kennedy, J., Eberhart, R.: Particle swarm optimization. In: Proceedings of IEEE
International Conference on Neural Networks, 1995, vol. 4 (1995)
17. Leggett, J., Williams, G.: Verifying identity via keystroke characteristics. Interna-
tional Journal of Man-Machine Studies 28(1), 67–76 (1988)
18. Leggett, J., Williams, G., Usnick, M., Longnecker, M.: Dynamic identity veriﬁ-
cation via keystroke characteristics. International Journal of Man-Machine Stud-
ies 35(6), 859–870 (1991)
19. Lilley, P.: Hacked, Attacked & Abused: Digital Crime Exposed. Kogan Page Ltd.
(2002)
20. Mahar, D., Napier, R., Wagner, M., Laverty, W., Henderson, R.D., Hiron, M.:
Optimizing digraph-latency based biometric typist veriﬁcation systems: inter and
intra typist diﬀerences in digraph latency distributions. International Journal of
Human-Computer Studies 43(4), 579–592 (1995)
21. Obaidat, M.S., Sadoun, B.: Keystroke Dynamics based Authentication Biometrics.
Systems, Man and Cybernatics 27(2), 261–269 (1997)
22. Paola, J.D., Schowengerdt, R.: A detailed comparison of backpropagation neural
network and maximum-likelihood classiﬁers for urban land use classiﬁcation. IEEE
Transactions on Geoscience and Remote Sensing 33(4), 981–996 (1995)
23. Quinlan, J.R.: Bagging, Boosting, and C4. 5. In: Proceedings of the NCAI, pp.
725–730 (1996)
24. Rish, I.: An empirical study of the naive Bayes classiﬁer. In: Proceedings of IJCAI
2001 Workshop on Empirical Methods in Artiﬁcial Intelligence, vol. 335 (2001)
Keystroke-Based User Identiﬁcation on Smart Phones
243
25. Shahzad, M., Zahid, S., Farooq, M.: A Hybrid GA-PSO Fuzzy System for User
Identiﬁcation on Smart Phones. In: Proceedings of the 11th annual conference on
Genetic and evolutionary computation, Montreal, Canada. ACM, New York (in
press, 2009)
26. Sims, D.: Biometric recognition: our hands, eyes, and faces give us away. IEEE
Computer Graphics and Applications 14(5), 14–15 (1994)
27. Umphress, D., Williams, G.: Identity Veriﬁcation Through Keyboard Characteris-
tics. International Journal of Man-Machine Studies 23(3), 263–273 (1985)
28. Wang, X., Heydari, M.H., Lin, H.: An intrusion-tolerant password authentication
system. In: Computer Security Applications Conference, 2003. Proceedings. 19th
Annual, pp. 110–118 (2003)
29. Witten, I.H.: University of Waikato, and Dept. of Computer Science. WEKA Prac-
tical Machine Learning Tools and Techniques with Java Implementations. Dept. of
Computer Science, University of Waikato (1999)
30. Zadeh, L.A.: Fuzzy sets. Fuzzy Sets, Fuzzy Logic, and Fuzzy Systems: Selected
Papers (1996)