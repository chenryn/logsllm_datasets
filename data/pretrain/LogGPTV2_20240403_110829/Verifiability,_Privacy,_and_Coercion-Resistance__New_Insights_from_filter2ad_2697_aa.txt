title:Verifiability, Privacy, and Coercion-Resistance: New Insights from
a Case Study
author:Ralf K&quot;usters and
Tomasz Truderung and
Andreas Vogt
2011 IEEE Symposium on Security and Privacy
Veriﬁability, Privacy, and Coercion-Resistance: New
Insights from a Case Study
Ralf K¨usters, Tomasz Truderung, and Andreas Vogt
{kuesters,truderun,vogt}@uni-trier.de
University of Trier, Germany
Abstract—In this paper, we present new insights into central
properties of voting systems, namely veriﬁability, privacy, and
coercion-resistance. We demonstrate that the combination of the
two forms of veriﬁability considered in the literature—individual
and universal veriﬁability—are, unlike commonly believed, insuf-
ﬁcient to guarantee overall veriﬁability. We also demonstrate that
the relationship between coercion-resistance and privacy is more
subtle than suggested in the literature.
Our ﬁndings are partly based on a case study of prominent
voting systems, ThreeBallot and VAV, for which, among others,
we show that, unlike commonly believed, they do not provide
any reasonable level of veriﬁability, even though they satisfy
individual and universal veriﬁability. Also, we show that the
original variants of ThreeBallot and VAV provide a better level
of coercion-resistance than of privacy.
Keywords-voting; veriﬁability; coercion-resistance; privacy;
protocol analysis
I. INTRODUCTION
Veriﬁability, privacy, and coercion-resistance are central
security requirements for modern voting systems. Privacy is
the most basic security requirement, which says that the way
a particular voter voted is not revealed to anybody, see, e.g.,
[2], [4]. Intuitively, veriﬁability means that voters have a way
of checking that their votes were actually counted and that
the published result of the election is correct. In the litera-
ture, traditionally two forms of veriﬁability are considered:
individual and universal veriﬁability [14], [1], [24], [12]. As
stated, e.g., in [14], individual veriﬁability means that a voter
can check that her own ballot appears on the bulletin board.
Universal veriﬁability requires that anyone can check that the
election outcome corresponds to the ballots published on the
bulletin board. In addition, it is explicitly or implicitly required
that each vote in the election outcome was cast by an eligible
voter and that there is at most one vote per voter, a fact that
in some voting protocols can be veriﬁed as well. To achieve
(individual) veriﬁability, a voter typically obtains some kind of
receipt which, together with additional data published in the
election, she can use to check that her vote was counted. This,
however, potentially opens up the possibility for vote buying
and voter coercion. Besides veriﬁability, voting systems should
therefore also provide so-called coercion-resistance [2], [13],
[23].
In this paper, we present new insights into these central
security properties. Our ﬁndings are partly based on a case
study for prominent voting protocols, ThreeBallot and VAV
[25]. More precisely,
follows.
the contribution of this paper is as
Contribution of this Paper. We demonstrate, using Three-
Ballot and VAV as examples, that the combination of the two
mentioned forms of veriﬁability considered in the literature—
individual and universal veriﬁability—are, unlike commonly
believed, insufﬁcient to guarantee overall veriﬁability. More
precisely, based on a deﬁnition of veriﬁability proposed in
[19], we precisely measure the level of veriﬁability Three-
Ballot and VAV provide. It turns out that, while ThreeBallot
and VAV satisfy individual and universal veriﬁability, there is
an attack on the veriﬁability of these protocols, which results
in an insufﬁcient level of veriﬁability. Our attack allows a
dishonest bulletin board (or the scanner), collaborating with
m dishonest voters, to turn m votes of honest voters for A into
m votes for B. This goes unnoticed even if all honest voters
check whether their receipts appear on the bulletin board and
even if they check that the published result corresponds to the
ballots shown on the bulletin board.
As for privacy and coercion-resistance, we ﬁrst provide
a game-based deﬁnition of privacy, along the lines of a
game-based deﬁnition of coercion-resistance proposed in [18],
since, as to the best of our knowledge, such a deﬁnition
does not exist. There are, however, deﬁnitions of coercion-
resistance in simulation-based settings (see, e.g., [21]) and in
an abstract, Dolev-Yao style model [9]. We note that both our
deﬁnition of privacy and the deﬁnition of coercion-resistance
from [18] allow to measure the level of privacy/coercion-
resistance a protocol provides: for privacy, it is measured
how well external observers can distinguish whether an honest
(cid:2); for coercion-resistance,
voter voted for candidate j or
the ability of coercers to distinguish whether coerced voters
followed the coercer’s instructions or not is measured. This
is important in order to make meaningful statements about
protocols, as many voting protocols, in particular many paper-
based protocols (e.g., ThreeBallot and VAV [25], Prˆet `a Voter
[6], and Split-Ballot [22]), do not provide the ideal level of
privacy/coercion-resistance. As discussed in [18], simulation-
based security deﬁnitions, e.g., the one by Moran and Naor
[21] provide a yes/no-answer, rather than measuring the level
of privacy/coercion-resistance. Also, they are more demand-
ing than game-based deﬁnitions and deem many reasonable
protocols insecure.
j
One would expect that privacy and coercion-resistance are
1081-6011/11 $26.00 © 2011 IEEE
DOI 10.1109/SP.2011.21
538
closely related: If the level of privacy is low, i.e., there is a
good chance of correctly determining how a voter voted, then
this should give the coercer leverage to coerce a voter. Some
works in the literature indeed suggest a close connection. For
example, the deﬁnition of coercion-resistance by Moran and
Naor [21], being simulation-based, has privacy “built in”.
Among others,
However, our case study,
in which we precisely mea-
sured the level of privacy and coercion-resistance of different
variants of ThreeBallot and VAV proposed in the litera-
ture,1 demonstrates that the relationship between privacy and
coercion-resistance is more subtle than what can be gathered
from existing work.
it
improving the level of
privacy of a protocol in a natural way (e.g., by changing the
way honest voters ﬁll out ballots) can lead to a lower level
of coercion-resistance. This is the case when going from the
original variant of ThreeBallot to a “privacy enhanced” variant
proposed by de Marneffe et al. [8]. Clearly, in general, one
does not expect privacy to imply coercion-resistance. Still the
effect is quite surprising.
turns out
that
A maybe even more important and unexpected ﬁnding that
comes out of our case study is that the level of privacy of a pro-
tocol can be much lower than its level of coercion-resistance;
this is the case for the original variant of ThreeBallot [25] and
a natural variant of VAV. The reason behind this phenomenon
is basically that it may happen that the counter-strategy a
coerced voter may run to defend against coercion hides the
behavior of the coerced voter, including her vote, better than
the honest voting program.
To complete the picture, we also study the case in which
the counter-strategy does not “outperform” the honest voting
program in the above sense. For this case, we are able to
prove a general theorem that states that if a voting system
provides a certain level of coercion-resistance, it provides at
least the same level of privacy. As discussed in Section VI-E,
this theorem is applicable to many voting protocols.
Structure of this Paper. We ﬁrst
introduce some basic
terminology and introduce the notion of a voting protocol. In
Sections III and IV we recall (the variants of) ThreeBallot and
VAV, respectively. Our ﬁndings on veriﬁability are presented
in Section V and those for privacy and coercion-resistance in
Section VI. We conclude in Section VII. Some more details
are provided in the appendix. Further details and proofs can
be ﬁnd in the full version of this paper [20].
II. PRELIMINARIES AND PROTOCOLS
In this section, we introduce some basic terminology and
the notion of a voting protocol.
Preliminaries. As usual, a function f from the natural num-
bers to the real numbers is negligible, if for every c > 0 there
(cid:2)c for all (cid:2) > (cid:2)0. The function f
exists (cid:2)0 such that
is overwhelming, if the function 1 − f ((cid:2)) is negligible. Let
δ ∈ [0,1]. The function f is δ -bounded if f is bounded by δ
f ((cid:2)) ≤ 1
1We note that coercion-resistance of one of the variants of ThreeBallot
considered in this paper has already been studied in [18].
539
plus a negligible function, i.e., for every c > 0 there exists (cid:2)0
such that f ((cid:2)) ≤ δ + 1
(cid:2)c for all (cid:2) > (cid:2)0.
We use systems of probabilistic polynomial-time interactive
Turing machines (ITMs) as our computational model (see,
e.g., [15]). In a system of ITMs, also called a process, ITMs
can communicate with other ITMs via input/output
tapes,
also called (external) input/output channels. If π and π(cid:2) are
processes (each with a set of external input/output tapes), then
we write π (cid:5) π(cid:2) for the concurrent composition of π and π(cid:2). A
process deﬁnes a family of probability distributions over runs,
indexed by the security parameter.
Voting Protocols. A voting protocol P speciﬁes the programs
of the honest voters and authorities in a voting process. More
precisely, let k be the number of candidates and q be the
number of voters. Then, P speciﬁes:
• A set {a1, . . . , al} of voting authorities and a program
ˆπa, for every voting authority a. The speciﬁcation of ˆπa
includes the speciﬁcation of the interface of a to the rest
of the voting process, i.e., the channels via which a is
connected to other parties.
ˆπv, for every voter
• A program (formally a process)
v ∈ {v1, . . . , vq}. The speciﬁcation of
ˆπv includes the
speciﬁcation of the interface of v to the rest of the voting
process. The program ˆπv takes a choice j ∈ {0, . . . ,k},
where j = 0 stands for abstention from voting, as param-
eter, indicating which candidate v votes for (if any).
In the following, we will consider a probability distribution
(cid:3)p = p0, . . . , pk on the possible choices honest voters have, i.e.,
p0, . . . , pk ∈ [0,1] and ∑k
i=0 pi = 1, where p0 is the probability
that a voter abstains from voting and pi, i ∈ {1, . . . ,k}, is the
probability that a voter votes for candidate i. We deﬁne ˆπv((cid:3)p)
to be the process which ﬁrst chooses j ∈ {0, . . . ,k} according
to (cid:3)p and then runs ˆπv( j). We sometimes simply write ˆπv
instead of ˆπv((cid:3)p), if the distribution (cid:3)p is clear from the context.
Because, as we will see, the level of privacy, coercion-
resistance, and veriﬁability of a protocol P depends on several
∗ of P, for
parameters, we consider protocol instantiations P
which these parameters are ﬁxed. The parameters are the
following:
(i) the set AH ⊆ {a1, . . . , al} of honest voting authorities AH,
(ii) the total number q of voters and the set VH ⊆ {v1, . . . , vq}
of honest voters (static corruption),
(iii) the number k of candidates, and
(iv) the probability distribution (cid:3)p, as described above.
∗ =
Such a protocol
P(AH ,q,VH ,k,(cid:3)p). We note that
in our theorems, only the
number of honest (and dishonest) voters will matter, not the
speciﬁc set VH of honest voters. Therefore, we often simply
write P(AH ,q,n,k,(cid:3)p) with n = |VH|.
instantiation will be denoted by P
III. THE THREEBALLOT VOTING SCHEME
In ThreeBallot [25], a voter is given a multi-ballot consisting
of three simple ballots. On every simple ballot the candidates
are printed in the same ﬁxed order. In the secrecy of a voting
booth, the voter is supposed to ﬁll out all three simple ballots
(a) A: o
B: x
A: o
B: x
A: x
B: o
(b) A: x
B: x
A: o
B: o
A: o
B: x
Fig. 1. Two ways of voting for the second candidate (candidate B) in the
ThreeBallot protocol, where x represents a marked position and o represents
an unmarked position. All the other possibilities of voting for B can be
obtained as permutations of these two.
in the following way: She marks the candidate of her choice
on exactly two simple ballots and every other candidate on
exactly one simple ballot; Figure 1 shows two ways of voting
for candidate B. After this, she feeds all three simple ballots
to a voting machine (some kind of scanner) and indicates
the simple ballot she wants to get as a receipt. The machine
checks the well-formedness of the multi-ballot, prints secretly
random numbers on each simple ballot, where length of these
numbers is the length of the security parameter and where
numbers on different simple ballots are chosen independently,
and gives the voter a copy of the chosen simple ballot, with
the random number printed on it. Note that the voter does not
get to see the random numbers of the remaining two simple
ballots. The scanner keeps all simple ballots (now separated)
in a ballot box. We assume that clerks guarantee that only
registered voters can vote and that every voter votes at most
once.
In the tallying phase,
the voting machine posts on the
bulletin board (electronic copies of) all the cast simple ballots
in a random order. From the ballots shown on the bulletin
board the result can easily be computed: The number of votes
for the i-th candidate is the number of simple ballots with the
i-th position marked minus the total number of votes, which
is the total number of simple ballots on the bulletin board
divided by three.
Intuitively, the system is coercion-resistant (at least to some
extent), as every simple ballot that a voter can take as a receipt
can be part of a multi-ballot that forms a valid vote for any
candidate. Also, ThreeBallot was meant to provide (some level
of) veriﬁability. For this, a crucial assumption, already made in
the original paper [25], is that neither the scanner, the voting
authority, nor the bulletin board knows which simple ballots
have been taken as receipts by honest voters before all ballots
were published. Now, as each voter may check whether the
simple ballot she has taken as a receipt appears on the bulletin
board, it should be risky for any party to remove or alter simple
ballots in order to manipulate the result since the probability
that the modiﬁcation of k simple ballots goes undetected is
merely ( 2
)k. Unfortunately, as we will see in Section V-B,
3
this argument, found in the literature, is ﬂawed.
As mentioned in the introduction, there are two variants of
ThreeBallot which differ in the way an honest voter ﬁlls out
the ballot: the original variant by Rivest [25] and a variant by
de Marneffe et al. [8].
The original variant. In this variant of the protocol a voter
ﬁrst, for each candidate, randomly chooses a simple ballot
on which she then marks the position corresponding to this
candidate. Then, she randomly picks a simple ballot for which
the position corresponding to the candidate of her choice is not
yet marked, and she marks this position. Finally, she randomly
chooses one ballot as a receipt.
The variant of de Marneffe et al.
In this variant of the
protocol a voter ﬁrst, for each candidate, marks the position
corresponding to this candidate on a randomly chosen simple
ballot. Then, she randomly chooses one simple ballot to be
taken as a receipt. Finally, she marks the position correspond-
ing to the candidate of her choice on a randomly chosen simple
ballot on which this position has not yet been marked and
which is not the ballot chosen as a receipt; we remark that in
some cases there will be only one such simple ballot.
The advantage of this procedure is that the receipt an honest
voter gets is stochastically independent of the candidate the
voter votes for, which in turn should give better privacy. We
note that in [8], ThreeBallot was analyzed in a simulation-
based setting, focusing on privacy. The analysis was based
on the (only informally stated) assumption that the adversary,
given a receipt,
the exact way
the corresponding multi-ballot was ﬁlled out. However, this
assumption is unjustiﬁed: Runs for which an adversary can