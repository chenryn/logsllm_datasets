---
author: Matthew Broberg
category: 技术
comments_data:
- date: '2020-06-28 12:14:26'
  message: 除了制造文件冲突，我看不出在主流distro下使用homebrew有任何意义
  postip: 218.4.170.236
  username: 来自江苏苏州的 Firefox 77.0|GNU/Linux 用户
- date: '2020-06-28 22:45:24'
  message: 文章主要是帮助 Mac 用户平滑过渡到 Linux，并非推荐 Linux 用户使用 Homebrew。
  postip: 175.1.117.158
  username: 来自湖南湘潭的 Chrome 83.0|Windows 10 用户
count:
  commentnum: 2
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 7116
date: '2020-06-28 09:12:07'
editorchoice: false
excerpt: 不管你是想要更舒服地从 Mac 搬到 Linux，还是不满意常规的 Linux 包管理器，都可以试试 Homebrew。
fromurl: https://opensource.com/article/20/6/homebrew-linux
id: 12358
islctt: true
largepic: /data/attachment/album/202006/28/091127an02f8oae0pln3as.jpg
permalink: /article-12358-1.html
pic: /data/attachment/album/202006/28/091127an02f8oae0pln3as.jpg.thumb.jpg
related:
- displayorder: 0
  raid: 12338
reviewer: wxy
selector: lujun9972
summary: 不管你是想要更舒服地从 Mac 搬到 Linux，还是不满意常规的 Linux 包管理器，都可以试试 Homebrew。
tags:
- Homebrew
thumb: false
title: Homebrew：让你从 Mac 切换到 Linux 更轻松
titlepic: true
translator: nophDog
updated: '2020-06-28 09:12:07'
---
> 
> 不管你是想要更舒服地从 Mac 搬到 Linux，还是不满意常规的 Linux 包管理器，都可以试试 Homebrew。
> 
> 
> 
![](/data/attachment/album/202006/28/091127an02f8oae0pln3as.jpg)
[Homebrew](https://brew.sh/) 项目最初是为了给 Mac 用户提供一个非官方的 Linux 式的包管理器。用户很快就爱上了它友好的界面以及帮助性的提示，而且，它已经被移植到 Linux 系统 —— 这看起来像是一个奇怪的命运转折。
一开始，有两个分开的项目分别针对 macOS 和 Linux （Homebrew 与 Linuxbrew），但是现在是由 Homebrew 核心管理着这两个操作系统。由于我正 [从 Mac 切换到 Linux](https://opensource.com/article/19/10/why-switch-mac-linux)，所以一直在研究我在 macOS 最常用的开源软件在 Linux 表现如何，最终，我很高兴地发现 Homebrew 对 Linux 的支持太赞了！
### 为什么要在 Linux 使用 Homebrew 呢？
长期使用 Linux 的用户对 Homebrew 的第一反应是：“为什么不直接使用……呢”，省略号代表他们喜欢的某个 Linux 包管理器。基于 Debian 的系统早就有了 `apt`，基于 Fedora 的系统则有 `dnf` 和 `yum`，并且像 Flatpak 跟 AppImage 这样的项目，在两种系统上都能流畅运行。我花了不少时间尝试这些技术，不得不说，它们都有其强大之处。
那我为什么还要 [坚持使用 Homebrew](https://opensource.com/article/20/6/homebrew-mac) 呢？首先，我对它非常熟悉。在为我过去使用的专有软件寻找开源替代品的过程中，我已经学会了许多使用方法，而保持一些熟悉的东西，比如 Homebrew，可以让我专注于一次学习一件事情，而不是被不同系统间的差异搞垮。
此外，我没有看到哪一个包管理器像 Homebrew 一样，对用户如此友好。正如默认的帮助命令一样，命令井然有序：
```
$ brew -h
Example usage:
  brew search [TEXT|/REGEX/]
  brew info [FORMULA...]
  brew install FORMULA...
  brew update
  brew upgrade [FORMULA...]
  brew uninstall FORMULA...
  brew list [FORMULA...]
Troubleshooting:
  brew config
  brew doctor
  brew install --verbose --debug FORMULA
Contributing:
  brew create [URL [--no-fetch]]
  brew edit [FORMULA...]
Further help:
  brew commands
  brew help [COMMAND]
  man brew
```
过于简短的输出可能会被误解为它功能局限，但是你简单看看每一个子命令，都有很丰富的功能。虽然上面的列表只有短短 23 行，但对高级用户来说，光是子命令 `install` 就包含整整 79 行的帮助信息：
```
$ brew --help | wc -l
23
$ brew install --help | wc -l
79
```
它可以选择忽略或者安装依赖关系，也可以选择用源代码编译以及用什么编译器来编译某个确切的上游 Git 提交，或者选择应用的官方 “灌装” 版。总而言之，Homebrew 即适合新手，也同样能满足老鸟。
### 开始在 Linux 使用 Homebrew
如果你想要试着使用 Homebrew，可以用这个单行脚本在 Mac 或者 Linux 上进行安装：
```
$ /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
```
这条命令会立即开始安装 Homebrew。如果你比较谨慎，可以使用 `curl` 将该文件下载到本地，检查完毕之后再运行。
```
$ curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh --output homebrew_installer.sh
$ more homebrew_installer.sh # 审核该脚本，直到你觉得没问题了
$ bash homebrew_installer.sh
```
对 Linux 的安装步骤还包括如何配置点文件，对于 Debian 系统来说是 `~/.profile`，对于 Fedora 系统是 `~/.bash_profile`。
```
$ test -d /home/linuxbrew/.linuxbrew && eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv)
$ test -r ~/.bash_profile && echo "eval \$($(brew --prefix)/bin/brew shellenv)" >>~/.bash_profile
$ echo "eval \$($(brew --prefix)/bin/brew shellenv)" >>~/.profile
```
为了确认已经安装好，Homebrew 团队提供一个空的 `hello` “秘方” 供测试：
```
$ brew install hello
==> Downloading https://linuxbrew.bintray.com/bottles/hello-2.10.x86_64_linux.bottle.tar.gz
######################################################################## 100.0%
==> Pouring hello-2.10.x86_64_linux.bottle.tar.gz
?  /home/linuxbrew/.linuxbrew/Cellar/hello/2.10: 52 files, 595.6KB
```
看起来安装毫无问题，让我来试试更多操作。
### 命令行工具 Brew
Homebrew 宣称自己是一款默认只 “安装你需要而 [Linux] 没有的东西”的应用程序。
你可以用 `brew` 命令安装任何打包在 Homebrew 中的命令行软件。这些包的定义文件叫做 “ 秘方   formula ”，而且它们通过“ 瓶子   bottle ”来编译并分享。在 Homebrew 的世界里，还有许多 “啤酒方面” 的术语，但这个包管理器主要目的是让软件便于使用。
都有些什么样的软件呢？对我这样的技术玩家（既然你已经在读这篇文章，估计你也是）来说最方便的东西。例如，便利的 `tree` 命令，可以展示目录结构，或者 `pyenv`，我用它来 [在 Mac 管理不同版本 Python](https://opensource.com/article/20/4/pyenv)。
你可以用 `search` 命令查看所有可以安装的“秘方”，在后面加上 `wc` 命令看看一共有多少：