---
title: Type hints
date: 20201001
author: Lyz
---
[Type hints](https://realpython.com/python-type-checking/#type-systems) are the
Python native way to define the type of the objects in a program.
Traditionally, the Python interpreter handles types in a flexible
but implicit way. Recent versions of Python allow you to specify explicit type
hints that different tools can use to help you develop your code more
efficiently.
!!! note "TL;DR"
    [Use Type hints whenever unit tests are worth
    writing](https://www.bernat.tech/the-state-of-type-hints-in-python/)
```python
def headline(text: str, align: bool = True) -> str:
    if align:
        return f"{text.title()}\n{'-' * len(text)}"
    else:
        return f" {text.title()} ".center(50, "o")
```
Type hints are not enforced on their own by python. So you won't catch an error
if you try to run `headline("use mypy", align="center")` unless you use a static
type checker like [Mypy](http://mypy-lang.org/).
# Advantages and disadvantages
Advantages:
* Help **catch certain errors** if used with a static type checker.
* Help **check your code**. It's not trivial to use docstrings to do
    automatic checks.
* Help to reason about code: Knowing the parameters type makes it a lot easier
    to understand and maintain a code base. It can speed up the time required to
    catch up with a code snippet. Always remember that you read code a lot more
    often than you write it, so you should optimize for ease of reading.
* Help you **build and maintain a cleaner architecture**. The act of writing type
    hints force you to think about the types in your program.
* Helps refactoring: Type hints make it trivial to find where a given class is
    used when you're trying to refactor your code base.
* Improve IDEs and linters.
Cons:
* Type hints **take developer time and effort to add**. Even though it probably
    pays off in spending less time debugging, you will spend more time entering
    code.
* **Introduce a slight penalty in start-up time**. If you need to use the typing
    module, the import time may be significant, even more in short scripts.
* Work best in modern Pythons.
Follow these guidelines when deciding if you want to add types to your project:
* In libraries that will be used by others, they add a lot of value.
* In complex projects, type hints help you understand how types flow through
   your code and are highly recommended.
* If you are beginning to learn Python, don't use them yet.
* If you are writing throw-away scripts, don't use them.
So, [Use Type hints whenever unit tests are worth
writing](https://www.bernat.tech/the-state-of-type-hints-in-python/).
# Usage
## Function annotations
```python
def func(arg: arg_type, optarg: arg_type = default) -> return_type:
    ...
```
For arguments the syntax is `argument: annotation`, while the return type is
annotated using `-> annotation`. Note that the annotation must be a valid Python
expression.
When running the code, the special `.__annotations__` attribute on the function
 stores the typing information.
## Variable annotations
Sometimes the type checker needs help in figuring out the types of variables as
well. The syntax is similar:
```python
pi: float = 3.142
def circumference(radius: float) -> float:
    return 2 * pi * radius
```
## Composite types
If you need to hint other types than `str`, `float` and `bool`, you'll need to
import the `typing` module.
For example to define the hint types of list, dictionaries and tuples:
```python
>>> from typing import Dict, List, Tuple
>>> names: List[str] = ["Guido", "Jukka", "Ivan"]
>>> version: Tuple[int, int, int] = (3, 7, 1)
>>> options: Dict[str, bool] = {"centered": False, "capitalize": True}
```
If your function expects some kind of sequence but don't care whether it's
a list or a tuple, use the `typing.Sequence` object. In fact, try to use
`Sequence` if you can because using `List` could lead to some unexpected errors
when combined with type inference. For example:
```python
class A: ...
class B(A): ...
lst = [A(), A()]  # Inferred type is List[A]
new_lst = [B(), B()]  # inferred type is List[B]
lst = new_lst  # mypy will complain about this, because List is invariant
```
Possible strategies in such situations are:
* Use an explicit type annotation:
    ```python
    new_lst: List[A] = [B(), B()]
    lst = new_lst  # OK
    ```
* Make a copy of the right hand side:
    ```python
    lst = list(new_lst) # Also OK
    ```
* Use immutable collections as annotations whenever possible:
    ```python
    def f_bad(x: List[A]) -> A:
        return x[0]
    f_bad(new_lst) # Fails
    def f_good(x: Sequence[A]) -> A:
        return x[0]
    f_good(new_lst) # OK
    ```
### [Dictionaries with different value types per key](https://stackoverflow.com/questions/53409117/what-are-the-main-differences-of-namedtuple-and-typeddict-in-python-mypy).
[`TypedDict`](https://docs.python.org/3/library/typing.html#typing.TypedDict)
declares a dictionary type that expects all of its instances to have a certain
set of keys, where each key is associated with a value of a consistent type.
This expectation is not checked at runtime but is only enforced by type
checkers.
TypedDict started life as an experimental Mypy feature to wrangle typing onto
the heterogeneous, structure-oriented use of dictionaries. As of Python 3.8, it
was adopted into the standard library.
```python
try:
    from typing import TypedDict  # >=3.8
except ImportError:
    from mypy_extensions import TypedDict  #  None` hint in these
cases.
```python
def play(player_name: str) -> None:
    print(f"{player_name} plays")
ret_val = play("Filip")
```
The annotation help catch the kinds of subtle bugs where you are trying to use
a meaningless return value.
If your function doesn't return any object, use the `NoReturn` type.
```python
from typing import NoReturn
def black_hole() -> NoReturn:
    raise Exception("There is no going back ...")
```
!!! note
    This is the first iteration of the synoptical reading of the full [Real
    python article on type
    checking](https://realpython.com/python-type-checking/#type-systems).
## Optional arguments
A common pattern is to use `None` as a default value for an argument. This is
done either to avoid problems with [mutable default
values](python_anti_patterns.md#mutable-default-arguments) or to have a sentinel
value flagging special behavior.
This creates a challenge for type hinting as the argument may be of type string
(for example) but it can also be `None`. We use the `Optional` type to address
this case.
```python
from typing import Optional
def player(name: str, start: Optional[str] = None) -> str:
    ...
```
A similar way would be to use `Union[None, str]`.
## Type aliases
Type hints might become oblique when working with nested types. If it's the
case, save them into a new variable, and use that instead.
```python
from typing import List, Tuple
Card = Tuple[str, str]
Deck = List[Card]
def deal_hands(deck: Deck) -> Tuple[Deck, Deck, Deck, Deck]:
    """Deal the cards in the deck into four hands"""
    return (deck[0::4], deck[1::4], deck[2::4], deck[3::4])
```
## [Allow any subclass](https://mypy.readthedocs.io/en/stable/kinds_of_types.html#class-types)
Every class is also a valid type. Any instance of a subclass is also compatible
with all superclasses â€“ it follows that every value is compatible with the
object type (and incidentally also the Any type, discussed below). Mypy analyzes
the bodies of classes to determine which methods and attributes are available in
instances. For example
```python
class A:
    def f(self) -> int:  # Type of self inferred (A)
        return 2
class B(A):
    def f(self) -> int:
         return 3
    def g(self) -> int:
        return 4
def foo(a: A) -> None:
    print(a.f())  # 3
    a.g()         # Error: "A" has no attribute "g"
foo(B())  # OK (B is a subclass of A)
```
### [Deduce returned value type from the arguments](https://mypy.readthedocs.io/en/stable/kinds_of_types.html#the-type-of-class-objects)
The previous approach works if you don't need to use class objects that inherit
from a given class. For example:
```python
class User:
    # Defines fields like name, email
class BasicUser(User):
    def upgrade(self):
        """Upgrade to Pro"""
class ProUser(User):
    def pay(self):
        """Pay bill"""
def new_user(user_class) -> User:
    user = user_class()
    # (Here we could write the user object to a database)
    return user
```
Where:
* `ProUser` doesn't inherit from `BasicUser`.
* `new_user` creates an instance of one of these classes if you pass
    it the right class object.
The problem is that right now mypy doesn't know which subclass of `User` you're
giving it, and will only accept the methods and attributes defined in the parent
class `User`.
```python
buyer = new_user(ProUser)
buyer.pay()  # Rejected, not a method on User
```
This can be solved using [Type variables with upper
bounds](https://mypy.readthedocs.io/en/stable/generics.html#type-variable-upper-bound).
```python
UserT = TypeVar('UserT', bound=User)
def new_user(user_class: Type[UserT]) -> UserT:
    # Same  implementation as before
```
We're creating a new type `UserT` that is linked to the class or subclasses
of `User`. That way, mypy knows that the return value is an object created from
the class given in the argument `user_class`.
```python
beginner = new_user(BasicUser)  # Inferred type is BasicUser
beginner.upgrade()  # OK
```
!!! note
        "Using `UserType` is [not supported by
        pylint](https://github.com/PyCQA/pylint/issues/6003), use `UserT`
        instead."
Keep in mind that the `TypeVar` is a [Generic
type](https://mypy.readthedocs.io/en/stable/generics.html), as such, they take
one or more type parameters, similar to built-in types such as `List[X]`.
That means that when you create type aliases, you'll need to give the type
parameter. So:
```python
UserT = TypeVar("UserT", bound=User)
UserTs = List[Type[UserT]]
def new_users(user_class: UserTs) -> UserT: # Type error!
    pass
```
Will give a `Missing type parameters for generic type "UserTs"` error. To
solve it use:
```python
def new_users(user_class: UserTs[UserT]) -> UserT: # OK!
    pass
```
## [Define a TypeVar with restrictions](https://mypy.readthedocs.io/en/stable/generics.html#type-variables-with-value-restriction)
By default, a type variable can be replaced with any type. However, sometimes
itâ€™s useful to have a type variable that can only have some specific types as
its value. A typical example is a type variable that can only have values `str`
and `bytes`:
```python
from typing import TypeVar
AnyStr = TypeVar('AnyStr', str, bytes)
```
This is actually such a common type variable that `AnyStr` is defined in typing
and we donâ€™t need to define it ourselves.
We can use `AnyStr` to define a function that can concatenate two strings or
bytes objects, but it canâ€™t be called with other argument types:
```python
from typing import AnyStr
def concat(x: AnyStr, y: AnyStr) -> AnyStr:
    return x + y
concat('a', 'b')    # Okay
concat(b'a', b'b')  # Okay
concat(1, 2)        # Error!
```
Note that this is different from a union type, since combinations of `str` and