# 三、开发 .NET 框架和 .NET Core 应用
Docker 是一个打包、分发、运行和管理应用的平台。当您将应用打包为 Docker 映像时，它们都具有相同的形状。您可以用相同的方式部署、管理、保护和升级它们。所有 Docker 化的应用都有相同的运行要求:在兼容的操作系统上运行的 Docker 引擎。应用在隔离的环境中运行，因此您可以在同一台机器上托管不同的应用平台和不同的平台版本，而不会受到干扰。
在.NET 世界，这意味着您可以在一台 Windows 机器上运行多个工作负载。它们可能是 ASP.NET 的网站，或者运行的应用.NET 控制台应用或。视窗服务。在前一章中，我们研究了 Dockerizing 遗产.NET 应用，没有任何代码更改，但是 Docker 对在容器内运行的应用应该如何表现有一些简单的期望，以便它们可以充分受益于该平台。
在本章中，我们将了解如何构建应用，以便它们能够充分利用 Docker 平台，包括:
*   Docker 和您的应用之间的集成点
*   用配置文件和环境变量配置应用
*   通过运行状况检查监控应用
*   使用不同容器中的组件运行分布式解决方案
这会帮助你发展.NET 和.NET 核心应用，这些应用以 Docker 期望的方式运行，因此您可以使用 Docker 完全管理它们。
我们将在本章中讨论以下主题:
*   为 Docker 培养好公民
*   分离依赖关系
*   分解单片应用
# 为 Docker 培养好公民
Docker 平台对使用它的应用要求很少。你不局限于某些语言或框架，你不需要使用特殊的库在应用和容器之间进行通信，你也不需要以某种方式构建你的应用。
为了支持尽可能广泛的应用，Docker 使用控制台在应用和容器运行时之间进行通信。控制台输出和错误流中应包含应用日志和错误消息。由 Docker 管理的存储对于操作系统来说是一个普通的磁盘，Docker 的网络栈是透明的。应用将看起来运行在自己的机器上，通过正常的 TCP/IP 网络连接到其他机器。
Docker 的好公民是这样一个应用，它对运行它的系统做了很少的假设，并使用所有操作系统都支持的基本机制:文件系统、环境变量、网络和控制台。最重要的是，应用应该只做一件事。如您所见，当 Docker 运行容器时，它会启动 Dockerfile 或命令行中指定的进程，并监视该进程。当过程结束时，容器退出。因此，理想情况下，您应该构建一个单一流程的应用，这可以确保 Docker 关注重要的流程。
这些是建议，而不是要求。当一个容器启动时，您可以在引导脚本中启动多个进程，Docker 将愉快地运行它，但它将只监控最后启动的进程。您的应用可以将日志条目写入本地文件，而不是控制台，Docker 仍然会运行它们，但是如果您使用 Docker 检查容器日志，您将看不到任何输出。
英寸 NET，您可以通过运行控制台应用轻松满足这些建议，这提供了应用和主机之间的简化集成，这也是为什么.NET 核心应用——包括网站和网络应用接口——作为控制台应用运行。带着遗产.NET 应用，你将无法使他们成为完美的公民，但你可以小心包装他们，以便他们很好地利用 Docker 平台。
# 在 Docker 中托管互联网信息服务应用
完成.NET Framework 应用可以很容易地打包成 Docker 映像，但是您需要注意一些限制。微软为 Docker 提供了纳米服务器和 Windows 服务器核心基础映像。完整的.NET 框架不在 Nano 服务器上运行，所以要托管你现有的。在 Docker 中，你需要使用 Windows 服务器核心基础映像。
从 Windows Server Core 运行意味着您的应用映像大小约为 4 GB，其中大部分位于基本映像中。您有一个完整的 Windows Server 操作系统，所有可用的软件包都支持 Windows Server 功能，如**域名系统** ( **DNS** )和**动态主机配置协议** ( **DHCP** )，即使您只想将其用于单个应用角色。从 Windows Server Core 运行容器是完全合理的，但是您需要意识到其中的含义:
*   基本映像有很大的表面区域，安装了很多软件，这意味着它可能会有更频繁的安全和功能补丁。
*   除了您的应用进程之外，操作系统还运行许多自己的进程，因为窗口的几个核心部分作为后台窗口服务运行。
*   Windows 有自己的应用平台，具有用于托管和管理的高价值特性集，这些特性集并不与 Docker 方法本地集成。
你可以用一个 ASP.NET 的网络应用，在几个小时内把它归档。它将构建成一个大型 Docker 映像，与构建在轻量级现代应用栈上的应用相比，它的分发和启动时间稍长。但是您仍然会有一个单独的包来部署、配置和运行您的整个应用。这是在提高质量和减少部署时间方面迈出的一大步，并且它可以是使遗留应用现代化的程序的第一部分。
要将 ASP.NET 应用与 Docker 更紧密地集成，您可以修改 IIS 日志的编写方式，指定 Docker 如何检查容器是否健康，并在不更改应用代码的情况下将配置注入容器。如果更改代码是现代化程序的一部分，那么只需做很少的更改，就可以使用容器的环境变量和文件系统进行应用配置。
# 为对 Docker 友好的日志记录配置 IIS
IIS 将日志条目写入文本文件，记录 HTTP 请求和响应。您可以准确地配置写入哪些字段，但是默认安装会记录一些有用的信息，如 HTTP 请求的路由、响应状态代码以及 IIS 响应所用的时间。最好将这些日志条目展示给 Docker，但是 IIS 管理自己的日志文件，在将条目写入磁盘之前对它们进行缓冲，并旋转日志文件来管理磁盘空间。
日志管理是应用平台的一个基本部分，这就是为什么 IIS 为网络应用处理它，但是 Docker 有自己的日志系统。Docker 日志记录比 IIS 使用的文本文件系统更强大、更可插拔，但是它只从容器的控制台输出流中读取日志条目。您不能让 IIS 向控制台写入日志，因为它运行在没有连接控制台的后台窗口服务中，所以您需要一种不同的方法。
对此有两种选择。第一个是构建一个 HTTP 模块，该模块通过一个接收来自 IIS 的日志的事件处理程序插入到 IIS 平台中。此处理程序可以将所有消息发布到队列或窗口管道，因此您不会更改 IIS 的日志记录方式；您只需添加另一个日志接收器。然后，您可以将您的 web 应用与一个控制台应用打包在一起，该应用监听已发布的日志条目并在控制台上转发它们。控制台应用将是容器启动时的入口点，因此每个 IIS 日志条目都将被路由到控制台供 Docker 读取。
HTTP 模块方法是健壮且可扩展的，但是它增加了比我们开始时需要的更多的复杂性。第二个选项更简单——将 IIS 配置为将所有日志条目写入一个文本文件，并在容器的启动命令中，运行一个 PowerShell 脚本来监视该文件，并将新的日志条目回显到控制台。当容器运行时，所有的 IIS 日志条目都会回显到控制台，控制台会将它们显示给 Docker。
要在 Docker 映像中设置这一点，首先需要配置 IIS，使其将任何站点的所有日志条目写入一个文件，并允许文件增长而不旋转。您可以使用 PowerShell，使用 Dockerfile 中的`Set-WebConfigurationProperty` cmdlet，在应用主机级别修改中央日志记录属性来实现这一点。我在 Dockerfile 中对`dockeronwindows/ch03-iis-log-watcher`映像使用了这个 cmdlet:
```
RUN Set-WebConfigurationProperty -p 'MACHINE/WEBROOT/APPHOST' -fi 'system.applicationHost/log' -n 'centralLogFileMode' -v 'CentralW3C'; `
    Set-WebConfigurationProperty -p 'MACHINE/WEBROOT/APPHOST' -fi 'system.applicationHost/log/centralW3CLogFile' -n 'truncateSize' -v 4294967295; `
    Set-WebConfigurationProperty -p 'MACHINE/WEBROOT/APPHOST' -fi 'system.applicationHost/log/centralW3CLogFile' -n 'period' -v 'MaxSize'; `
    Set-WebConfigurationProperty -p 'MACHINE/WEBROOT/APPHOST' -fi 'system.applicationHost/log/centralW3CLogFile' -n 'directory' -v 'C:\iislog'
```
这是丑陋的代码，但它表明您可以在 Dockerfile 中编写任何您需要的东西来设置您的应用。它配置 IIS 将所有条目记录到`C:\iislog`中的一个文件中，并设置日志循环的最大文件大小，让日志文件增长到 4 GB。这是很大的发挥空间——记住，容器并不意味着长寿，所以我们不应该在一个容器中有千兆字节的日志条目。IIS 仍然对日志文件使用子目录格式，因此实际的日志文件路径将是`C:\iislog\W3SVC\u_extend1.log`。现在我有了一个已知的日志文件位置，我可以使用 PowerShell 将日志条目回显到控制台。
我在`CMD`指令中这样做，所以 Docker 运行和监视的最后一个命令是 PowerShell cmdlet，用于回显日志条目。当新条目被写入控制台时，它们会被 Docker 拾取。PowerShell 使观看文件变得很容易，但是有一个复杂之处，因为文件需要先存在，PowerShell 才能观看。在 Dockerfile 中，我在启动时按顺序运行多个命令:
```
 CMD Start-Service W3SVC; `
     Invoke-WebRequest http://localhost -UseBasicParsing | Out-Null; `
     netsh http flush logbuffer | Out-Null; `
     Get-Content -path 'c:\iislog\W3SVC\u_extend1.log' -Tail 1 -Wait
```
容器启动时会发生四件事:
1.  启动 IIS Windows 服务(W3SVC)。
2.  向本地主机发出 HTTP `GET`请求，本地主机启动 IIS 工作进程并写入第一个日志条目。
3.  刷新 HTTP 日志缓冲区，以便日志文件写入磁盘并存在，供 PowerShell 查看。
4.  在尾部模式下读取日志文件的内容，这样写入该文件的任何新行都会显示在控制台上。
我可以用通常的方法从这个映像运行一个容器:
```
 docker container run -d -P --name log-watcher dockeronwindows/ch03-iis-log-watcher:2e
```
当我通过浏览容器的 IP 地址(或使用 PowerShell 中的`Invoke-WebRequest`向站点发送一些流量时，我可以看到 IIS 日志条目，这些条目是使用`docker container logs`从`Get-Content` cmdlet 中继到 Docker 的:
```
> docker container logs log-watcher
2019-02-06 20:21:30 W3SVC1 172.27.97.43 GET / - 80 - 192.168.2.214 Mozilla/5.0+(Windows+NT+10.0;+Win64;+x64;+rv:64.0)+Gecko/20100101+Firefox/64.0 - 200 0 0 7
2019-02-06 20:21:30 W3SVC1 172.27.97.43 GET /iisstart.png - 80 - 192.168.2.214 Mozilla/5.0+(Windows+NT+10.0;+Win64;+x64;+rv:64.0)+Gecko/20100101+Firefox/64.0 http://localhost:51959/ 200 0 0 17
2019-02-06 20:21:30 W3SVC1 172.27.97.43 GET /favicon.ico - 80 - 192.168.2.214 Mozilla/5.0+(Windows+NT+10.0;+Win64;+x64;+rv:64.0)+Gecko/20100101+Firefox/64.0 - 404 0 2 23
```
IIS always buffers log entries in the memory before writing them to the disk, so it micro-batches writes to improve performance. Flushing happens every 60 seconds, or when the buffer is 64 KB in size. If you want to force the IIS log in a container to flush, use the same `netsh` command I used in the Dockerfile: `docker container exec log-watcher netsh http flush logbuffer`. You'll see an `Ok` output, and new entries will be in `docker container logs`.
我已经在映像和一个新命令中向 IIS 添加了配置，这意味着所有 IIS 日志条目都会被回显到控制台。这将适用于任何在 IIS 中托管的应用，所以我可以回显 ASP.NET 应用和静态网站的 HTTP 日志，而无需对应用或网站内容进行任何更改。控制台输出是 Docker 查找日志条目的地方，因此这个简单的扩展将现有应用的日志记录集成到了新平台中。
# 管理应用配置
在 Docker 映像中打包应用的目标是在每个环境中使用相同的映像。您不会为测试和生产构建单独的映像，因为这将使它们成为单独的应用，并且它们之间可能存在不一致。您应该从用户测试的完全相同的 Docker 映像中部署您的生产应用，这是由构建过程生成并用于所有自动化集成测试的完全相同的映像。
当然，有些东西需要在环境之间改变——数据库的连接字符串、日志记录级别和特性开关。这是应用配置，在 Docker 世界中，您使用一组默认配置来构建应用映像，通常用于开发环境。在运行时，您将当前环境的正确配置注入到容器中，这将覆盖默认配置。
注入这种配置有不同的方法。在本章中，我将向您展示如何使用卷装载和环境变量。在生产中，您将运行一个运行 Docker 的机器集群，并且您可以将配置数据存储在集群的安全数据库中，作为 Docker 配置对象或 Docker 机密。我将在[第 7 章](07.html)、*中介绍使用 Docker Swarm* 编排分布式解决方案。
# 将配置文件装入 Docker 卷
传统的应用平台使用配置文件来改变环境之间的行为。.NET Framework 应用具有丰富的基于 XML 的配置框架，Java 应用通常在属性文件中使用键值对。您可以将这些配置文件添加到 Dockerfile 中的应用映像中，当您从映像运行容器时，它将使用此默认配置。
您的应用设置应该为配置文件使用特定的目录，这将允许您在运行时通过装入 Docker 卷来覆盖它们。我在`dockeronwindows/ch03-aspnet-config:2e`中用一个简单的 ASP.NET 网络表单应用做到了这一点。Dockerfile 只使用您已经看到的命令:
```
# escape=`
FROM mcr.microsoft.com/dotnet/framework/aspnet
COPY Web.config C:\inetpub\wwwroot
COPY config\*.config C:\inetpub\wwwroot\config\
COPY default.aspx C:\inetpub\wwwroot
```
这使用微软的 ASP.NET 映像作为基础，并在我的应用文件中复制——一个 ASPX 页面和一些配置文件。在这个例子中，我使用的是默认的 IIS 网站，它从`C:\inetpub\wwwroot`加载内容，所以我在 Dockerfile 中只有`COPY`指令，我不需要运行任何 PowerShell 脚本。
split 希望在应用目录中找到`Web.config`文件，但是您可以将配置的各个部分分割成单独的文件。我已经在`appSettings `和`connectionStrings`部分做到了这一点，它们是从子目录中的文件加载的:
```