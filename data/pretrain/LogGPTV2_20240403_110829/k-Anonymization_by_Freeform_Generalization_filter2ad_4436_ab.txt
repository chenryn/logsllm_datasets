50 
45 
40 
35 
30 
25 
20 
15 
r5
r3
r2
r6
25  30 
35 
40 
r4
45 
Age 
r7
r1
r0
50 
55  60 
65 
r1
r0
r4
r3
r7
r6
r2
r5
(a) Graph in 2d plane
(b) Pure graph
based solution.
as a network ﬂow problem.
Figure 2: Example solution
We reiterate our main contributions as follows:
• We formulate the optimal-utility k-anonymization problem
• We provide an exact optimal Mixed Integer Programming-
• We offer a collection of heuristic solutions.
• We demonstrate experimentally that our techniques achieve
signiﬁcantly lower information loss than previous methods.
• We show our techniques can achieve near-optimal utility.
• We apply our techniques in a parallel-computing environ-
ment, gaining an efﬁciency advantage over previous work.
2. RELATED WORK
The k-anonymity model calls for recasting data so that each orig-
inal record have at least k equally probable matches among re-
cast records. This effect is achieved by a syntactic transformation,
reducing the precision of the data, but not its accuracy; the pub-
lished data is truthful, albeit less exact [19, 5]; a k-anonymization
algorithm aims to bring the data to a form that abides by the given
privacy condition via syntactic transformations, while introducing
small inexactness [15]. This type of transformation comes in con-
trast to anonymization by perturbation, which introduces errors in
the data; as perturbation-based transformations provide no infor-
mation on how much a given record has been perturbed, they limit
the purposes such data can be useful for [19].
2.1 Striving for Data Utility
Past research has expressed concerns about the usefulness of the
k-anonymity model, due to a perception that it engenders high loss
of data utility due to the imprecision introduced. Aggarwal [2]
noted that, under conventional approaches for k-anonymization, it
is difﬁcult to anonymize high-dimensional data “without an unac-
ceptably high amount of information loss”. Brickell and Shmatikov
[5] went further to claim that data utility is necessarily almost com-
pletely destroyed for “modest privacy gains”. This claim was re-
examined by Li and Li [22]; the point made in [22] amounts, in
effect, to the statement that the privacy loss and utility gain in-
volved in publishing anonymized data are incommensurable; they
do not share a common standard of measurement, as [5] assumed;
speciﬁc knowledge has a larger impact on privacy, while aggregate
information has a larger impact on utility [22].
Still, an observation made in [5] regarding classic k-anonymiza-
tion algorithms is valid. Such algorithms have raised a homogene-
ity requirement, by which recast records form groups of at least
k records, such that all records in a group have the same QI val-
ues and are hence interchangeable with each other. Brickell and
Shmatikov correctly observed that this requirement is redundant,
and called for algorithms that drop it to provide improved utility.
Some attempts have been made in this direction [16, 28, 25, 29],
yet retain redundant constraints and superﬂuities in their solutions.
Gionis et al. [16, 25] suggested the model of k-concealment, which
guarantees that an original record is associated with at least k recast
ones, without the homogeneity requirement. However, the O(kn2)
agglomerative algorithm in [16, 25] goes through a series of steps
that perform superﬂuous generalizations, introducing extra infor-
mation loss. Besides, as observed in [28] and [25], k-concealment
is a weaker guarantee than k-anonymity, as it does not ensure that
each association is equiprobable. For example, the graph in Fig-
ure 3 satisﬁes 2-concealment: each record, on both sides of the
graph (in bipartite view), has at least two matches, each of whom
participates in a complete assignment (perfect matching). However,
the matches are not equiprobable: some of them (shown with bold
lines) participate in three out of four possible assignments, while
others (shown with light lines) participate in only one.
Wong et al. [28] studied the conditions for equiprobable associa-
tions, and proposed a technique that achieves k-anonymity without
the homogeneity requirement. Yet, even while dropping that redun-
dant requirement, [28] does not entirely break its shackles: it still
requires that original and recast records relate to each other by a
ﬁxed motif, ring generalization, thus substituting one superﬂuous
constraint for another. Furthermore, [28] does not apply ring gen-
eralization on a complete data set, but only within piecemeal par-
titions obtained via a homogeneous partitioning; the utility gains
achieved are primarily due to this partitioning, not due to ring gen-
eralization. Xue et al. [29] adopt ring generalization as an element
r
r1
r2
r3
r4
r '
r1
r2'
r3'
r4'
1/4
1/4
r1
1/4
r
r4
3/4
1/4
1/4
1/4
1/4
3/4
r2
r3
3/4
Bi
Bipartite View
titt  Vi
U ifi dd Vi
Unified View
Figure 3: Graph satisfying 2-concealment, but not 2-anonymity
of a technique for anonymizing sparse high-dimensional data; they
apply the motif on complete data sets with good results, yet still
adhere to that ﬁxed motif. The anonymization algorithms in [28,
29] consist of two components: (i) a component catering to data
utility, aiming to produce a data transformation of low information
loss by building a ring, and (ii) a component that caters to privacy,
aiming to guarantee the equiprobability of k produced associations,
via randomization. Even though (i) has sub-quadratic time com-
plexity, the randomization in (ii) brings in an O(kn2) component.
We argue that, since a quadratic time complexity is invested for the
sake of privacy anyway, this time complexity budget should also be
employed for the sake of utility as well.
and each anonymized record r(cid:2)
Wong et al. have shown that, to achieve k-anonymity, it sufﬁces
to ensure that each original record ri has exactly k matches in the
published data R(cid:2)
i also has exactly
k matches in the original data R; in other words, each vertex in the
generalization graph has outdegree and indegree k, i.e., the graph
is k-regular.
It would also sufﬁce to ensure that the generaliza-
tion graph contains a k-regular subgraph, but then we could also
maintain that k-regular subgraph only. All graphs in Figure 1 are
4-regular, hence ensure 4-anonymity. The motif of ring general-
ization is applied exactly to create a k-regular graph in [28], as in
Figure 1(c), imposing an arbitrary constraint of its own.
2.2 Security against Adversaries
Wong et al.
[28] show that we can extract k disjoint assign-
ments, i.e., one-to-one correspondences between original and re-
cast records, as subsets of a k-regular generalization graph. For
the sake of completeness, we reiterate their argument, following a
more concise formulation than the one in [28].
LEMMA 2.1. In a directed graph G, where each vertex v has
the same indegree and outdegree dv, each edge belongs to a cycle.
PROOF. Assume there is an edge e = (u → v) that does not
belong to a cycle. Then u cannot be reached from v. Then we
classify vertices in two disjoint groups: A, those that can reach u,
with u ∈ A and B, those that can be reached from v, with v ∈ B,
where A∩ B = ∅. By our assumption, vertices in B have the same
w∈B dw of incoming and outgoing edges. All outgoing
number
edges should point to a vertex in B, since they cannot not reach
u. Yet there is an incoming edge to B, namely e, which originates
w∈B dw − 1 incoming edges
outside B. Hence, there are at most
w∈B dw outgoing edges from B to B. This is
from B to B, but
a contradiction of the pigeonhole principle.
(cid:2)
(cid:2)
(cid:2)
LEMMA 2.2. In a k-regular directed graph G, each edge be-
longs to a perfect matching (i.e., a set of cycles incoming to and
outgoing from each vertex exactly once).
PROOF. Consider any edge e. By Lemma 2.1, since all vertices
in G have equal indegree and outdegree, e belongs to a cycle. Con-
sider such a cycle C. If C contains all vertices of G, it is a perfect
. Since G is k-regular, G(cid:2)
matching itself. If not, then we rewire graph G to G(cid:2)
as follows:
for each edge e = (u → v) in C, we substitute vertex u by a
new vertex u/v, such that the outgoing edges from u/v become
the outgoing edges from u and the incoming edges to u/v become
the incoming edges to v; each edge in C becomes a self-loop in
G(cid:2)
is k-regular as well, with indegree
and outdegree k on each vertex, and Lemma 2.1 still applies on
G(cid:2)
. We say that all vertices in C have been matched. Then, we se-
lect an arbitrary unmatched vertex w ∈ G(cid:2)
and one of its outgoing
edges e(cid:2)
at random. We repeat the process, ﬁnding a cycle C(cid:2)
for
e(cid:2)
contains a previously matched vertex w(cid:2)
. If C(cid:2)
, we update the
matches of w(cid:2)
. Note that any previously formed
matches that are now destroyed are self-loops in G(cid:2)
; thus, the num-
ber of matched vertices is monotonically increasing, with at least
one new previously unmatched vertex getting matched at each it-
eration. Therefore, the process eventually terminates; the resulting
set of matches M forms a perfect matching on the original graph G
itself, since each vertex has exactly one incoming and one outgoing
edge in M.
according to C(cid:2)
THEOREM 2.3. In a k-regular directed graph G there exist k
disjoint assignments (i.e., perfect matchings).
PROOF. We pick up a node ni and an outgoing edge e randomly.
By Lemma 2.2, e belongs to an assignment (perfect matching) a.
We take the edges of a out of G, to get graph G(cid:2)
. Each node in
is (k−1)-
G(cid:2)
regular. We repeat iteratively and ﬁnd k disjoint assignments.
has exactly k−1 incoming/outgoing edges, hence G(cid:2)
Any of k such assignments can provide the putative identities of
recast records, and may be used as a guide when assigning other,
non-generalized attributes to them. Hence, a record represented by
a vertex in a k-regular generalization graph appears to have k pos-
sible identities, each in one of the k possible worlds represented
by the k assignments. Yet to satisfy the equiprobability require-
ment of k-anonymity, we should also ensure that each edge (i.e.,
match) of a vertex is equally likely to participate in a chosen as-
signment, in other words, there should be k equiprobable disjoint
assignments. We achieve this result by selecting one of k disjoint
assignments uniformly at random. Moreover, in order to resist at-
tacks based on knowledge of some anonymized tuples’ identities
and/or of the algorithm itself, the particular set of k disjoint assign-
ments we choose from is generated by a randomization scheme.
In effect, each of the k possible matches for each tuple has, from
an adversary’s perspective, equal probability to be the true one. An
adversary running the same algorithm on the same data would get
different results, due to the randomization employed. Using ran-
domization to avert attacks based on knowledge of the algorithm
was also recommended in [11]. Wong et al. show how a random as-
signment can be generated by iteratively extracting cycles from the
generalization graph (in uniﬁed view) via random walks [28]; Xue
et al. improve on the efﬁciency of this process [29]. As discussed,
the time complexity of this randomization scheme is O(kn2). Our
methods utilize the same scheme for the sake of security, thus tol-
erate adversaries who know the algorithm.
Choromanski et al. [9] recently studied k-anonymization as a
matching problem as well, with a view to providing adaptiveness,
i.e. a different privacy guarantee for each individual. In this con-
text, they have also provided an analysis on the question of security
in case a match is already known to an adversary. They conclude
that heterogeneous reciprocal generalization (which they call sym-
metric b-anonymity) is as secure as k-anonymity, while freeform
(i.e., heterogeneous nonreciprocal) generalization (which they call
asymmetric b-anonymity) is weaker only against sustained attacks
by an adversary who gains knowledge of some true matches. In
particular, if an adversary knows c true matches, then the secu-
rity of heterogeneous reciprocal generalization drops to (k − c)-
anonymity, exactly as for homogeneous generalization. However,
the security of heterogeneous nonreciprocal generalization drops to
(k−c−φ(k))-anonymity, for a function φ that satisﬁes certain con-
ditions. The root cause of this difference is that, after we delete all
nodes adjacent to c edges (true matches) known to an adversary,
we are left with a graph that contains a (k−c)-regular subgraph in
the former case, but not always so in the latter case. All algorithms
we suggest in this paper can be tuned to produce symmetric gener-
alizations. Aside of this security analysis, [9] does not provide al-
gorithms to achieve k-anonymity by value generalization; instead,
they resort to suppression, substituting some values by stars.
= {q(cid:2)
3. DEFINITIONS AND PRINCIPLES
We consider a dataset D = (Q, P ) of n tuples. Q = {q1, . . . , qn},
where qi is the quasi-identiﬁer part of tuple i and P = {p1, . . . , pn}
is the rest of the record, not considered to contain potentially iden-
tifying information. Our task is to recast the values of quasi-iden-
tifying attributes in Q, producing an anonymized form thereof,
n}. In this recasting, we allow the value of qi
Q(cid:2)
1, . . . , q(cid:2)
on attribute Aj, qj
i , to be substituted by a set of possible values
V(qj
i ); as in previous work [24, 19, 15], for a numerical attribute,
we publish a range of values deﬁned by that set, as shown in Table
1, while for a categorical attribute we publish that set itself. We say
that (the quasi-identiﬁer part of) an original tuple qi and a recast
tuple q(cid:2)
(cid:2) could be a recast from of qi, i.e.,
each qj
(cid:2) ). The privacy guarantee of k-anony-
mity [24] is then deﬁned as follows:
(cid:2) match each other when q(cid:2)
i is included in V(qj
DEFINITION 1. An anonymized data set D(cid:2)
= (Q(cid:2), P ) satisﬁes
k-anonymity with respect to the original data D = (Q, P ) iff each
original record qi ∈ D matches at least k published records in D(cid:2)
,
each having, from an adversary’s perspective, equal probability (at
most 1
k ) to be thetrue match of qi.
This guarantee ensures that an adversary knowing the quasi-iden-
tifying part of all records, Q, is not able to identify the true match
of a record qi with probability higher than 1
k . We describe a collec-
tion of one-to-one matches encompassing a complete set of original
and recast records as an assignment.
= (Q(cid:2), P ), an assignment α from D to D(cid:2)
DEFINITION 2. Given a data set D = (Q, P ) and a recast ver-
sion thereof, D(cid:2)
is an
jn )}, such that
one-to-one mapping, α = {(qi1 , q(cid:2)
each qi∈ Q is mapped to exactly one q(cid:2)
, where qi matches q(cid:2)
j.
In each pair (qi, q(cid:2)
j and
q(cid:2)
j is the postimage of qi. Two assignments αs and αt are disjoint
if αs ∩ αt = ∅.
j) ∈ α, we say that qi is the preimage of q(cid:2)
j1 ), . . . ,( qin , q(cid:2)
j ∈ Q(cid:2)
In order to achieve k-anonymity, we need to ensure that there ex-
ist k disjoint assignments from original tuples in Q to recast tuples
in Q(cid:2)
. A set of k disjoint assignments deﬁnes k distinct matches in
for each qi ∈ Q and vice versa, i.e., k distinct matches in Q for
Q(cid:2)
i ∈ Q(cid:2)
each q(cid:2)
. The net result can be represented by a generalization
graph [29], as in Figure 1.
DEFINITION 3. Given a data set D = (Q, P ) and its anonymi-
zed version D(cid:2)
= (Q(cid:2), P ), a generalization graph G = (V, E)
is a directed graph in which each vertex v ∈ V stands for an
original/anonymized tuple qi ∈ Q and q(cid:2)
, and an edge
(vi, vj) ∈ E is present iff qi matches q(cid:2)
j.
i ∈ Q(cid:2)
Our deﬁnition corresponds to the uniﬁed view of such a graph
(see Figure 1). In a bipartite view, the vertex standing for an origi-
nal tuple qi is separate from that standing for its anonymized form
q(cid:2)
i. A set of k disjoint assignments deﬁnes (and is deﬁned by) a
generalization graph in which each vertex has exactly k outgoing
and k incoming edges, i.e., a k-regular generalization graph [29].
By constructing a set of k such assignments, we determine that the
on an attribute Aj, V(qj
set of possible values of a tuple q(cid:2)
i ),
should include those of the tuples in Q mapped to q(cid:2)
i. As discussed
in Section 2, once we have a k-regular generalization graph, we can
randomly regenerate a set of k disjoint assignments, select one of
them uniformly at random as the one that deﬁnes the true matches
between D and D(cid:2)
, and publish any other attributes of our data (i.e.,