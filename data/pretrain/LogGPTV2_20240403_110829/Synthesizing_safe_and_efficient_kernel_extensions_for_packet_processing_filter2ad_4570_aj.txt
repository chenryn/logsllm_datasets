35*
56*
71*
130
19*
66
26*
29*
81*
315
40
497
3,998
2,647
519
19
10
2,704
2,681
472
334
3,036
260
1,856
106
6,871
8,317
ùëÄùê∏ùëÄ1 & ùê∂ùëÇùëÅùëá
time (sec)
# instr.
ùëÄùê∏ùëÄ2 & ùê∂ùëÇùëÅùëá
time (sec)
# instr.
ùëÄùê∏ùëÄ1 only
# instr.
time (sec)
# instr.
time (sec)
# instr.
time (sec)
ùëÄùê∏ùëÄ2 only
ùê∂ùëÇùëÅùëá only
16*
16*
30
19
22
21
27*
30*
99*
35*
57
71*
128*
20
65*
26*
30
84
90
29
914
344
52
55
10
60
1,073
724
41
328
2,847
30
245
30
915
4,146
16*
16*
30
21
22
21
27*
30*
99*
35*
57
71*
130
20
67
26*
30
85
91
160
2,988
535
360
214
72
154
992
764
286
185
4,686
32
46
256
4,449
14,829
16*
16*
30
19
22
21
27*
30*
105
39
57
75
144
20
66
26*
30
85
183
416
791
1,364
1,108
364
5
5
4,949
507
62
6
4,003
44
1,043
354
3,544
10,498
Qiongwen Xu et al.
None
time (sec)
93
84
3,454
2,933
373
31
10
56
299
1,441
42
5
5,091
57
2,619
78
3,696
16,763
# instr.
16*
16*
30
19
22
21
27*
30*
106
39
57
75
145
20
66
26*
30
87
# benchmarks where this
setting found the best program
# benchmarks where only this
setting found the best program
16
1
15
2
10
0
8
0
5
0
5
0
Table 10: Improvements in program compactness under different proposal generation settings (¬ß3.1). We consider turning the following
proposal-generation rewrite-rules on or off: ùëÄùê∏ùëÄ1 implements a type 1 memory exchange, sampling to replace all non-pointer operands,
ùëÄùê∏ùëÄ2 implements a type-2 memory exchange, sampling to replace only the memory operation width, and ùê∂ùëÇùëÅùëá replaces ùëò = 2 contiguous
instructions. Instruction counts with the * mark indicate that they are the minimal found among all the proposal generation settings tested.
H PROFILES OF PROGRAM LATENCY VS.
OFFERED LOAD
These results supplement the numbers in ¬ß8 regarding the latency,
throughput, and drop rates of various XDP programs as offered
load from the traffic generator increases.
22
Synthesizing Safe and Efficient Kernel Extensions for Packet Processing
arXiv, July 14, 2021
(a) xdp2: Throughput vs. Offered load
(b) xdp2: Avg. latency vs. Offered load
(c) xdp2: Drop rate vs. Offered load
(d) xdp_router_ipv4: Throughput vs. Offered load
(e) xdp_router_ipv4: Avg. latency vs. Offered load
(f) xdp_router_ipv4: Drop rate vs. Offered load
(g) xdp_fwd: Throughput vs. Offered load
(h) xdp_fwd: Avg. latency vs. Offered load
(i) xdp_fwd: Drop rate vs. Offered load
(j) xdp-balancer: Throughput vs. Offered load
(k) xdp-balancer: Avg. latency vs. Offered load
(l) xdp-balancer: Drop rate vs. Offered load
23
arXiv, July 14, 2021
Benchmark
xdp2_kern/xdp1
xdp_fwd
sys_enter_open
BPF program before optimization
bpf_load_16 r1 r7 0 // r1 = *(u16*)(r7+0)
bpf_load_16 r2 r7 6 // r2 = *(u16*)(r7+6)
bpf_stx_16 r7 0 r2 // *(u16*)(r7+0) = r2
bpf_load_16 r2 r7 8 // r2 = *(u16*)(r7+8)
bpf_load_16 r3 r7 2 // r3 = *(u16*)(r7+2)
bpf_stx_16 r7 8 r3 // *(u16*)(r7+8) = r3
bpf_stx_16 r7 2 r2 // *(u16*)(r7+2) = r2
bpf_load_16 r2 r7 10 // r2 = *(u16*)(r7+10)
bpf_load_16 r3 r7 4 // r3 = *(u16*)(r7+4)
bpf_stx_16 r7 10 r3 // *(u16*)(r7+10) = r3
bpf_stx_16 r7 6 r1 // *(u16*)(r7+6) = r1
bpf_stx_16 r7 4 r2 // *(u16*)(r7+4) = r2
bpf_load_16 r1 r10 -2 // r1 = *(u16*)(r10-2)
bpf_stx_8 r7 4 r1 // *(u8*)(r7+4) = r1
bpf_rsh64 r1 8 // r1 ¬ª= 8
bpf_stx_8 r7 5 r1 // *(u8*)(r7+5) = r1
bpf_load_16 r1 r10 -4 // r1 = *(u16*)(r10-4)
bpf_stx_8 r7 2 r1 // *(u8*)(r7+2) = r1
bpf_rsh64 r1 8 // r1 ¬ª= 8
bpf_stx_8 r7 3 r1 // *(u8*)(r7+3) = r1
bpf_load_16 r1 r10 -6 // r1 = *(u16*)(r10-6)
bpf_stx_8 r7 0 r1 // *(u8*)(r7+0) = r1
bpf_rsh64 r1 8 // r1 ¬ª= 8
bpf_stx_8 r7 1 r1 // *(u8*)(r7+1) = r1
bpf_load_32 r1 r0 0 // r1 = *(u32*)(r0+0)
bpf_add64 1 1 // r1 += 1
bpf_stx_32 r0 0 r1 // *(u32*)(r0+0) = r1
BPF program after optimization
bpf_load_32 r1 r7 0 // r1 = *(u32*)(r7+0)
bpf_load_32 r2 r7 6 // r2 = *(u32*)(r7+6)
bpf_stx_32 r7 0 r2 // *(u32*)(r7+0) = r2
bpf_load_32 r3 r7 4 // r3 = *(u32*)(r7+4)
bpf_load_32 r2 r7 10 // r2 = *(u32*)(r7+10)
bpf_stx_32 r7 10 r3 // *(u16*)(r7+10) = r3
bpf_stx_32 r7 6 r1 // *(u32*)(r7+6) = r1
bpf_stx_16 r7 4 r2 // *(u16*)(r7+4) = r2
C code
dst[0] = p[0];
dst[1] = p[1];
dst[2] = p[2];
p[0] = p[3];
p[1] = p[4];
p[2] = p[5];
p[3] = dst[0];
p[4] = dst[1];
p[5] = dst[2];
bpf_load_32 r1 r10 -4 // r1 = *(u32*)(r10-4)
bpf_stx_32 r7 2 r1 // *(u32*)(r7+2) = r1
bpf_load_16 r1 r10 -6 // r1 = *(u16*)(r10-6)
bpf_stx_16 r7 0 r1 // *(u16*)(r7+0) = r1
memcpy(eth->h_dest,
ETH_ALEN);
fib_params.dmac,
bpf_mov64 r1 1 // r1 = 1
bpf_xadd_32 r0 0 r1 // *(u32*)(r0+0) += r1
xdp1_kern/xdp1
bpf_mov64 r1 0 // r1 = 0
bpf_stx_32 r10 -4 r1 // *(u32*)(r10-4) = r1
bpf_st_imm32 r10 -4 0 // *(u32*)(r10-4) = 0
recvmsg4
xdp_map_access
bpf_load_32 r1 r6 24 // r1 = *(u32*)(r6+24)
bpf_stx_32 r10 -16 r1 // *(u32*)(r10-16)=r1
bpf_stx_16 r10 -26 r7 // *(u16*)(r10-26)=r7
bpf_load_32 r1 r10 -16 // r1 = *(u32*)(r10-
16)
bpf_load_16 r10 -28 r1 // *(u16*)(r10-28)=r1
bpf_mov64 r3 0 // r3 = 0
bpf_stx_8 r10 -8 r3 // *(u8*)(r10-8) = r3
bpf_load_16 r1 r6 24 // r1 = *(u16*)(r6+24)
bpf_stx_32 r10 -28 r1 // *(u32*)(r10-28) = r1
(no instructions)
Table 11: A catalog of optimizations found by K2.
Qiongwen Xu et al.
Note
This instruction sequence swaps three
higher bytes and three lower bytes through
six 8-bit loads and stores. K2 coalesced six
loads and stores into two 16-bit loads and
stores and one 8-bit load and store.
This instruction sequence copies 6 bytes
from the source address (r10-6) to the des-
tination address r7 by three sets of opera-
tions, each involving one 16-bit load and
two 8-bit stores. K2 reduced the instruction
count by compressing these memory oper-
ations into one 32-bit load and store, and
one 16-bit load and store.
This instruction sequence increases the
memory value by 1. It loads the value from
the memory and then performs a register
addition, finally stores the register value
into the memory. K2 utilized the memory
addition to reduce one instruction.
This transformation coalesces a register as-
signment and one register store into a store
that writes an immediate value.
This optimization does not hold under all
values of r7. In the prefix program, r7 is
assigned as 0. Also, the value written in
(r10-16) is not read in the postfix program.
K2 found this transformation by leveraging
both preconditions and postconditions.
K2 removed these two instructions by the
postconditions where the values set to the
register and the memory were not used in
the postfix program.
(m) xdp1: Throughput vs. Offered load
(n) xdp_map_access: Throughput vs. Offered load
Figure 2: Throughput, average latency and drop rate under different offered loads. We measured the top-ùëò K2 versions (ùëò = 9 for xdp-balancer
and ùëò = 5 for other benchmarks), and two clang versions: -O1 and -O2. Note that -O2 and -O3 are identical for these benchmarks.
24