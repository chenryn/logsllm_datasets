0并直接转换unlocked为true。这样_name的值将通过require()线[23]，因为我们正在设置unlocked到true。在Remix中试试这个。注意如果你使用下面_name的形式，函数会通过：0x0000000000000000000000000000000000000000000000000000000000000001
### 预防技术
Solidity编译器会提出未经初始化的存储变量作为警告，因此开发人员在构建智能合约时应小心注意这些警告。当前版本的mist（0.10）不允许编译这些合约。在处理复杂类型时明确使用memory或storage确定它们的行为如预期一般是很好的做法。
### 真实世界的例子：蜜罐：OpenAddressLottery和CryptoRoulette
一个名为OpenAddressLottery（合约代码）的蜜罐被部署，它使用这个未初始化的存储变量querk从一些可能的黑客收集ether。合约是相当深入的，所以我会把讨论留在这个reddit思路中，这个攻击很清楚地解释了。
另一个蜜罐，CryptoRoulette（合约代码）也利用这个技巧尝试并收集一些以太。如果您无法弄清楚攻击是如何进行的，请参阅对以太坊蜜罐合约的分析以获得对此合约和其他内容的概述。
## 浮点和精度
在撰写本文时（Solidity
v0.4.24），不支持定点或浮点数。这意味着浮点表示必须用Solidity中的整数类型进行表示。如果没有正确实施，这可能会导致错误/漏洞。
如需进一步阅读，请参阅以太坊合约安全技术和提示 - 使用整数部分舍入，
### 漏洞
由于Solidity中没有固定点类型，因此开发人员需要使用标准整数数据类型来实现它们自己的类型。在这个过程中，开发人员可能遇到一些陷阱。我将尝试在本节中重点介绍其中的一些内容。
让我们从一个代码示例开始（为简单起见，忽略任何over / under流问题）。
    contract FunWithNumbers {
        uint constant public tokensPerEth = 10; 
        uint constant public weiPerEth = 1e18;
        mapping(address => uint) public balances;
        function buyTokens() public payable {
            uint tokens = msg.value/weiPerEth*tokensPerEth; // convert wei to eth, then multiply by token rate
            balances[msg.sender] += tokens; 
        }
        function sellTokens(uint tokens) public {
            require(balances[msg.sender] >= tokens);
            uint eth = tokens/tokensPerEth; 
            balances[msg.sender] -= tokens;
            msg.sender.transfer(eth*weiPerEth); //
        }
    }
这个简单的令牌买/卖合约在代币的买卖中存在一些明显的问题。虽然买卖令牌的数学计算是正确的，但浮点数的缺乏会给出错误的结果。例如，当在线[7]上购买令牌时，如果该值小于1
ether最初的除法将导致0最后的乘法0（即200 wei除以1e18weiPerEth等于0）。同样，当销售代币时，任何代币10都不会产生0
ether。事实上，这里四舍五入总是下降，所以销售29 tokens，将导致2 ether。
这个合约的问题是精度只能到最近的ether（即1e18 wei）。当您需要更高的精度时，decimals在处理ERC20令牌时，这有时会变得棘手。
### 预防技术
保持智能合约的正确精确度非常重要，尤其是在处理反映经济决策的比率和比率时。
您应该确保您使用的任何比率或比率都允许分数中的大分子。例如，我们tokensPerEth在示例中使用了费率。使用weiPerTokens这将是一个很大的数字会更好。解决我们可以做的令牌数量问题msg.sender/weiPerTokens。这会给出更精确的结果。
要记住的另一个策略是注意操作的顺序。在上面的例子中，购买令牌的计算是`msg.value/weiPerEth
*tokenPerEth`。请注意，除法发生在乘法之前。如果计算首先进行乘法，然后再进行除法，那么这个例子会达到更高的精度msg.value*
tokenPerEth/weiPerEth。
最后，当为数字定义任意精度时，将变量转换为更高精度，执行所有数学运算，然后最后在需要时将其转换回输出精度可能是一个好主意。通常uint256使用它们（因为它们对于gas使用来说是最佳的），它们的范围约为60个数量级，其中一些可用于数学运算的精确度。可能会出现这样的情况：最好将所有变量高精度地保持稳定并在外部应用程序中转换回较低的精度（这实际上是ERC20令牌合约中decimals变量的工作原理）。要查看如何完成此操作的示例以及要执行此操作的库，我建议查看Maker
DAO DSMath。他们使用一些时髦的命名WAD的和RAY的，但这个概念是非常有用的。
### 真实世界的例子：Ethstick
我无法找到一个很好的例子，说明四舍五入导致合约中出现严重问题，但我相信这里有很多。如果你有一个好的想法，请随时更新。
由于缺乏一个很好的例子，我想引起您对Ethstick的关注，主要是因为我喜欢合约中的酷命名。但是，这个合约并没有使用任何扩展的精确度wei。所以这个合约会有四舍五入的问题，但只是在wei精确度方面。它有一些更严重的缺陷，但这些都与区块链上的函数有关（见Entropty
Illusion）。关于Ethstick合约的进一步讨论，我会把你推荐给Peter Venesses的另一篇文章，以太坊合约对于黑客来说就是糖果。
## Tx.Origin身份验证
Solidity具有一个全局变量，tx.origin它遍历整个调用栈并返回最初发送调用（或事务）的帐户的地址。在智能合约中使用此变量进行身份验证会使合约容易受到类似网络钓鱼的攻击。
有关进一步阅读，请参阅Stack Exchange Question，Peter Venesses博客和Solidity - Tx.Origin攻击。
### 漏洞
授权用户使用该tx.origin变量的合约通常容易受到网络钓鱼攻击的攻击，这可能会诱使用户对易受攻击的合约执行身份验证操作。 考虑简单的合约，
    contract Phishable {
        address public owner;
        constructor (address _owner) {
            owner = _owner; 
        }
        function () public payable {} // collect ether
        function withdrawAll(address _recipient) public {
            require(tx.origin == owner);
            _recipient.transfer(this.balance); 
        }
    }
请注意，在[11]行中，此合约授权withdrawAll()使用该功能tx.origin。该合约允许攻击者创建表单的攻击合约，
    import "Phishable.sol";
    contract AttackContract { 
        Phishable phishableContract; 
        address attacker; // The attackers address to receive funds.
        constructor (Phishable _phishableContract, address _attackerAddress) { 
            phishableContract = _phishableContract; 
            attacker = _attackerAddress;
        }
        function () { 
            phishableContract.withdrawAll(attacker); 
        }
    }
为了利用这个合约，攻击者会部署它，然后说服Phishable合约的所有者发送一定数量的合约。攻击者可能把这个合约伪装成他们自己的私人地址，社工受害人发送某种形式的交易到地址。受害者除非注意，否则可能不会注意到攻击者地址上有代码，或者攻击者可能将其作为多重签名钱包或某些高级存储钱包传递。
在任何情况下，如果受害者向AttackContract地址发送了一个事务（有足够的天然气），它将调用fallback功能，后者又调用该参数withdrawAll()的Phishable合约功能attacker。这将导致所有资金从Phishable合约中撤回到attacker地址。这是因为，首先初始化呼叫的地址是受害者（即owner中的Phishable合约）。因此，tx.origin将等于owner和require所述的上线[11]
Phishable合约会通过。
### 预防技术
tx.origin不应该用于智能合约授权。这并不是说该tx.origin变量不应该被使用。它确实在智能合约中有一些合法用例。例如，如果有人想要拒绝外部合约调用当前合约，他们可以实现一个requirefrom
require(tx.origin == msg.sender)。这可以防止用于调用当前合约的中间合约，将合约限制为常规无代码地址。
### 真实世界的例子：未知
我不知道这种形式在野的任何公开的利用。
## 以太坊怪异模式
我打算用社区发现的各种有趣怪癖填充本节。这些都保存在这个博客中，因为如果在实践中使用这些怪癖，它们可能有助于智能合约开发。
### 无键ether
合约地址是确定性的，这意味着它们可以在实际创建地址之前进行计算。创建合约的地址和产生其他合约的合约都是这种情况。实际上，创建的合约地址取决于：
`keccak256(rlp.encode([, ])`
从本质上讲，合约的地址就是keccak256创建它与账户事务随机数[^
2]连接的账户的哈希值。合约也是如此，除了合约nonce的开始1地址的交易nonce的开始0。
这意味着给定一个以太坊地址，我们可以计算出该地址可以产生的所有可能的合约地址。例如，如果地址0x123000...000是在其第100次交易中创建合约keccak256(rlp.encode[0x123...000,
100])，则会创建合约地址，该地址将提供合约地址0xed4cafc88a13f5d58a163e61591b9385b6fe6d1a。
这是什么意思呢？这意味着您可以将ether发送到预先确定的地址（您不拥有私钥的地址，但知道您的某个帐户可以创建合约）。您可以将ether发送到该地址，然后通过稍后创建在同一地址上生成的合约来检索以太网。构造函数可用于返回所有预先发送的以太。因此，如果有人在哪里获得你的以太坊私钥，攻击者很难发现你的以太坊地址也可以访问这个隐藏的以太网。事实上，如果攻击者花费太多事务处理，以致需要访问您的以太网的随机数，则不可能恢复您的隐藏以太网。
让我用合约澄清一下。
    contract KeylessHiddenEthCreator { 
        uint public currentContractNonce = 1; // keep track of this contracts nonce publicly (it's also found in the contracts state)
        // determine future addresses which can hide ether. 
        function futureAddresses(uint8 nonce) public view returns (address) {
            if(nonce == 0) {
                return address(keccak256(0xd6, 0x94, this, 0x80));
            }
            return address(keccak256(0xd6, 0x94, this, nonce));
        // need to implement rlp encoding properly for a full range of nonces
        }
        // increment the contract nonce or retrieve ether from a hidden/key-less account
        // provided the nonce is correct
        function retrieveHiddenEther(address beneficiary) public returns (address) {
        currentContractNonce +=1;
           return new RecoverContract(beneficiary);
        }
        function () payable {} // Allow ether transfers (helps for playing in remix)
    }
    contract RecoverContract { 
        constructor(address beneficiary) {
            selfdestruct(beneficiary); // don't deploy code. Return the ether stored here to the beneficiary. 
        }
     }
这个合约允许你存储无密钥的以太（相对安全，从某种意义上说你不能错误地忽略随机数）[^
3]。该futureAddresses()功能可用于计算此合约可产生的前127个合约地址，方法是指定nonce。如果您将ether发送到其中一个地址，则可以稍后通过调用retrieveHiddenEther()足够的时间来恢复。例如，如果您选择nonce=4（并将ether发送到关联的地址），则需要调用retrieveHiddenEther()四次，然后将以太网恢复到该beneficiary地址。
这可以在没有合约的情况下完成。您可以将ether发送到可以从您的一个标准以太坊帐户创建的地址，并在以后以正确的随机数恢复。但是要小心，如果你不小心超过了恢复你的以太币所需的交易随机数，你的资金将永远丢失。
有关一些更高级的技巧，你可以用这个怪癖做更多的信息，我推荐阅读Martin Swende的文章。
### 一次性地址
以太坊交易签名使用椭圆曲线数字签名算法（ECDSA）。通常，为了在以太坊上发送经过验证的交易，您需要使用您的以太坊私钥签署一条消息，该私钥授权从您的账户中支出。在稍微更详细，您注册的消息是复仇交易的组成部分，具体而言，to，value，gas，gasPrice，nonce和data领域。以太坊签名的结果是三个数字v，r和s。我不会详细说明这些代表的内容，而是将感兴趣的读者引至ECDSA
wiki页面（描述r和s）以及Ethereum Yellow Paper（附录F--描述v），最后EIP155为当前使用v。
所以我们知道以太坊交易签名包含一条消息和数字v，r并且s。我们可以通过使用消息（即交易细节）来检查签名是否有效，r并s派生出以太坊地址。如果派生的以太坊地址匹配from事务的字段，那么我们知道r并且s由拥有（或有权访问）该from字段的私钥的人创建，因此签名是有效的。
现在考虑一下，我们并不拥有一个私钥，而是为任意事务构建值r和值s。考虑我们有一个交易，参数为： {to ： “ 0xa9e ”，value ：
10e18，nonce ： 0 }
我忽略了其他参数。该交易将发送10位以太网到该0xa9e地址。现在让我们说我们做了一些数字r和s（这些有特定的范围）和v。如果我们推导出与这些编号相关的以太坊地址，我们将得到一个随机的以太坊地址，让我们来调用它0x54321。知道这个地址，我们可以向地址发送10个ether
0x54321（不需要拥有该地址的私钥）。在将来的任何时候，我们都可以发送交易， {to ： “ 0xa9e ”，value ： 10e18，nonce ：
0，from ： “ 0x54321 ” }
以及签名，即v，r和s我们组成。这将是一个有效的交易，因为派生地址将匹配我们的from字段。这使我们可以将我们的钱从这个随机地址（0x54321）中分配到我们选择的地址0xa9e。因此，我们设法将ether存储在我们没有私钥的地址中，并使用一次性事务来恢复以太。
这个怪癖还可以用来以无可信赖的方式向许多人发送ether，正如尼克约翰逊在“ 如何将ether发送给11,440人”中所描述的那样。
## 有趣的加密相关的hacks/bugs列表
  * [CoinDash](https://www.theregister.co.uk/2017/07/18/coindash_hack/)
  * [SmartBillions](https://www.reddit.com/r/ethereum/comments/74d3dc/smartbillions_lottery_contract_just_got_hacked/)
  * [Exchange Didn't add "0x" to payload](https://steemit.com/cryptocurrency/@barrydutton/breaking-the-biggest-canadian-coin-exchange-quadrigacx-loses-67-000-usdeth-due-to-coding-error-funds-locked-in-an-executable)
[^ 1]：此代码已从web3j修改过
[^ 2]：事务随机数就像一个事务计数器。从您的账户发送交易时，它会增加您的交易时间。
[^ 3]：不要部署此合约来存储任何真实的以太网。仅用于演示目的。它没有固有的特权，任何人都可以在部署和使用它时恢复以太网。
* * *