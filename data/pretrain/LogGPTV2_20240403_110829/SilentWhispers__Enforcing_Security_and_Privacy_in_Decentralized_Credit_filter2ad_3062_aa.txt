title:SilentWhispers: Enforcing Security and Privacy in Decentralized Credit
Networks
author:Giulio Malavolta and
Pedro Moreno-Sanchez and
Aniket Kate and
Matteo Maffei
SilentWhispers: Enforcing Security and Privacy in
Decentralized Credit Networks
Not Every Permissionless Payment Network Requires a Blockchain
Giulio Malavolta⇤
Saarland Informatics Campus
Pedro Moreno-Sanchez⇤
Purdue University
Aniket Kate
Purdue University
Matteo Maffei
TU Vienna
Abstract—Credit networks model transitive trust (or credit)
between users in a distributed environment and have recently
seen a rapid increase of popularity due to their ﬂexible design
and robustness against intrusion. They serve today as a backbone
of real-world IOweYou transaction settlement networks such
as Ripple and Stellar, which are deployed by various banks
worldwide, as well as several other systems, such as spam-
resistant communication protocols and Sybil-tolerant social net-
works. Current solutions, however, raise serious privacy concerns,
as the network topology as well as the credit value of the links are
made public for apparent transparency purposes and any changes
are logged. In payment scenarios, for instance, this means that
all transactions have to be public and everybody knows who paid
what to whom.
In this work, we question the necessity of a privacy-invasive
transaction ledger. In particular, we present SilentWhispers, the
ﬁrst distributed, privacy-preserving credit network that does
not require any ledger to protect the integrity of transactions.
Yet, SilentWhispers guarantees integrity and privacy of link
values and transactions even in the presence of distrustful users
and malicious neighbors, whose misbehavior in changing link
values is detected and such users can be held accountable. We
formalize these properties as ideal functionalities in the univer-
sal composability framework and present a secure realization
based on a novel combination of secret-sharing-based multi-
party computation and digital signature chains. SilentWhispers
can handle network churn, and it is efﬁcient as demonstrated
with a prototype implementation evaluated using payments data
extracted from the currently deployed Ripple payment system.
I.
INTRODUCTION
Motivation. Credit networks [22], [27], [29] model trust
among users in a network through a directed, weighted graph,
where the value of each edge shows the amount of credit that a
user is willing to extend to another. Credit networks constitute
the core of a variety of applications, such as trustworthy online
marketplaces [51], spam ﬁltering [44], rating systems [33],
cloud computing [46], and social networks [45]. Moreover,
⇤Both authors contributed equally and are considered to be co-ﬁrst authors.
Permission  to  freely  reproduce  all  or  part  of  this  paper  for  noncommercial 
purposes is granted provided that copies bear this notice and the full citation 
on the ﬁrst page. Reproduction for commercial purposes is strictly prohibited 
without the prior written consent of the Internet Society, the ﬁrst-named author 
(for  reproduction  of  an  entire  paper  only),  and  the  author’s  employer  if  the 
paper was prepared within the scope of employment.
NDSS ’17, 26 February - 1 March 2017, San Diego, CA, USA
Copyright 2017 Internet Society, ISBN 1-891562-46-0
http://dx.doi.org/10.14722/ndss.2017.23448
a few emerging payment systems, such as Ripple [6] and
Stellar [4], rely on credit networks to represent and process the
credit between peers: this enables multi-currency transactions
(in ﬁat currencies, cryptocurrencies and user-deﬁned curren-
cies) across the globe in a matter of seconds, which are also
signiﬁcantly cheaper than traditional banking solutions [38].
Several major banks worldwide [31], [52], [53], [57] have now
started to use Ripple as a backbone for online transactions.
Credit networks and cryptocurrencies. Ripple and Stellar
are the ﬁrst payment settlement networks deployed in practice
using the concept of credit network, and it
is interesting
to compare them with the other payment systems such as
Bitcoin. Despite its unquestionable utility, Bitcoin (as any other
currency) is limited to transactions where both transacting
parties agree on a common currency. Credit networks, instead,
smoothly enable cross-currency transactions in any user speci-
ﬁed currency (including Bitcoin) and this is one of the reasons
of their increasing deployment in banking systems [38].
Similarly to Bitcoin, Ripple and Stellar networks opted
for a ledger-based consensus to demonstrate consistency of
transactions through transparency. A crucial, and arguably
surprising, insight of this work is that while replicated ledgers
(or blockchains) are crucial in cryptocurrencies, credit net-
works have inherent tolerance against transactional inconsis-
tencies and thus they do not require such replicated ledgers
nor a global consensus process, paving thereby the way for
lightweight transactions.
Privacy in credit networks. Most current credit network
designs [44], [51] are centralized,
the credit network
is maintained entirely in a server environment. The others,
such as Ripple [6] and Stellar [4], make their entire sets
of transactions as well as the network topology publicly
available to establish credibility through transparency. As a
result, credit networks today cannot provide any meaningful
privacy guarantee: simple anonymization methods based on
pseudonyms, like those employed in Ripple, are not effective,
as transactions still remain linkable to each other and they are
susceptible to deanonymization attacks such as [43].
i.e.,
In the context of payment settlement networks, for instance,
everybody knows who paid what to whom [48]. This state
of affairs clearly conﬂicts with the desire of users, who
instead strive for hiding their credit links and their operations:
businesses and customers are interested in hiding their credit
information and transactions from competitors and even ser-
vice providers [37], while regular users aim at protecting their
transactions as they might reveal personal information (e.g.,
medical bills or salary).
To tackle this problem, Moreno-Sanchez et al. [47] recently
developed a centralized privacy-preserving architecture for
credit networks, based on trusted hardware and oblivious
computations. Although this solution provides formal privacy
guarantees and is efﬁcient enough to support Ripple transac-
tions, the usage of trusted hardware makes its employment in
real life quite problematic. The ﬁrst challenge is who should
maintain the trusted hardware and why should the other parties,
distributed over the globe and ranging from individuals to
banks, trust such an entity for the setup and maintenance of the
hardware [50]. The trusted hardware also becomes a critical
bottleneck in terms of scalability and reliability, for instance,
in case of failure or simple software upgrades. On the other
hand, it is hard to imagine a centralized cryptographic solution
that does not rely on trusted hardware, since it is unclear how
one could possibly read the network information required to
perform transactions without breaking the privacy of the other
users.
Our work moves from the observation that the user’s credit
links alone determine her available credit in the network and
the amount of credit loss she can incur due to misbehaving
users. Hence, unlike Bitcoin and other cryptocurrencies, credit
networks are an ideal target for a distributed architecture where
each user maintains her own credit links locally and checks
that her inﬂow and outﬂow of credit do not change without
explicit consent. We hereby explore this approach, designing a
distributed architecture that provides strong privacy guarantees,
offers better scalability and reliability, enforces the correctness
of transactions, and holds updates of credit links accountable.
Challenges. Designing a privacy preserving, distributed credit
network is technically challenging. A ﬁrst problem is to
correctly compute the available credit (max-ﬂow) between two
users without leaking the individual link values. A distributed
max-ﬂow computation [7] is a natural ﬁt, but generic, off-
the-shelf secure multiparty computations among all involved
users would be too slow and not scalable enough for real-
world networks. A second problem is that some of the users
might be dishonest and try to deviate from the protocol in
order to selectively deny some legitimate transactions or learn
sensitive information. Perhaps most interestingly, ensuring the
correctness of the transactions without relying on a privacy
invasive ledger requires a fresh architectural design.
Our contribution.
In this work, we present SilentWhispers,
the ﬁrst privacy-preserving, distributed credit network. In par-
ticular,
• SilentWhispers adapts the traditional landmark routing-
based credit network design [60], [62] to a distributed setting,
extending it with cryptographic constructions that enable trans-
actions among any two users while preserving strong privacy
guarantees.
Technically, SilentWhispers features a novel distributed pay-
ment protocol to calculate the available credit between a sender
and a receiver without revealing information about the credit
in the involved links, nor the transacting users.
Additionally, SilentWhispers allows for holding users account-
able for the correctness of credit updates. Interestingly enough,
Whispers is the ﬁrst payment system that dispenses with
the deployment of any centrally maintained or replicated,
consensus-based ledger to ensure the integrity of the trans-
actions.
• We formalize for the ﬁrst
time the desired privacy
properties of a credit network (i.e., value privacy, link privacy,
sender privacy, and receiver privacy)
as well as security
properties (i.e., integrity and accountability)
following the
universal composability (UC) framework [13] and prove that
SilentWhispers constitutes a secure realization.
• We present two extensions of SilentWhispers to enhance
its robustness, by supporting ofﬂine nodes, and security, by
considering fully malicious landmarks. We discuss in detail
the tradeoffs in terms of availability, performance, and privacy
induced by these extensions.
• We have implemented SilentWhispers as a C++ library
and evaluated its performance to demonstrate the practicality
of our approach. Speciﬁcally, we have extracted transactions
from Ripple activity in the period October 2013–January
2015 to set up the parameters of SilentWhispers and thereby
simulate a realistic scenario. Our experiments show that in
SilentWhispers it is possible to perform a transaction in about
1.3 seconds. The precision of SilentWhispers is optimal (1.0),
which implies the absence of false positives and that users do
not incur any money loss. The performance evaluation shows
that SilentWhispers can be effectively deployed as a real world
transaction network, since it is efﬁcient and scales to a growing
number of users and payment transactions.
Organization. The rest of the paper is organized as follows:
Section II gives a background on credit networks; Section III
presents the key ideas underlying our approach; Section IV
formally deﬁnes the privacy guarantees of a credit network;
Section V presents the cryptographic construction; Section VI
illustrates SilentWhispers extensions to handle ofﬂine nodes
and malicious landmarks; Section VII discusses our imple-
mentation and performance analysis; Section VIII discusses
the related work; and Section IX concludes this work.
II. BACKGROUND
A. Credit Networks—CN
A credit network (CN) [22], [27], [29] is a weighted,
directed graph G = (V, E), where vertices V represent the
users and weighted edges (links) E represent the credit links.
The weight on an edge (u1, u2) 2 E indicates the unconsumed
credit that a user u2 has extended to u1. For convenience, we
denote by val(u1,u2) the non-negative credit of the directed
link between u1 and u2. A credit network is equipped with
four operations (pay, chgLink, test, testLink): pay allows to
decrease the credit between two users only along credit paths
connecting those users; test checks the available credit along
credit paths connecting two users; testLink and chgLink enable
to test and increase the credit in a direct credit link between
two users. We refer to [47] for their formal deﬁnitions.
The loss of credit incurred by the users in a credit network
is bounded [22] by the credit they have extended to a misbe-
having user. Moreover, credit loss is localized [21], as only
honest users who have extended credit to a misbehaving one
2
can incur credit loss. These interesting and useful properties
have motivated the use of credit networks in several Sybil and
malicious behavior tolerant applications [4], [6], [33], [44]–
[46], [51].
Centralized vs. distributed CN designs.
In a central-
ized credit network design, a service provider maintains the
complete credit network and updates it according to users
transactions. This approach is used, for instance, to avoid
fraud in marketplaces [51] and to mitigate spam in e-mail
systems [44] or social networks [45]. In a distributed design,
every user maintains her own credit links. This approach is
adopted for example in a Local Exchange Trading System
(LETS) [1], where credit is used to monetize different goods
such as childcare or transport.
We aim at a distributed privacy-preserving credit network
design, as it better ﬁts the nature of current banking, where
each user is responsible for her own credit while each bank
is responsible for credit with its customers. There are several
challenges that should be addressed in a distributed design:
how the routing information is spread along the credit network,
how to reconstruct credit paths to perform transactions (e.g.,
payments), how to ensure the correctness of these transactions
without a privacy-invasive ledger, and what privacy properties
are desirable.
B. Routing in Distributed CN
A routing protocol computes the discovery of the credit
paths among different users in the network. Using max-
ﬂow [24], [26], [30] to perform routing in a centralized
credit network does not scale to large networks, which is
only accentuated in the case of distributed credit networks.
Thus, recent works adopt an approximated routing algorithm,
called landmark routing [60], where only a subset of all
possible paths between sender and receiver are calculated. It
has been shown in the context of centralized credit networks
that landmark routing outperforms the max-ﬂow approach [62].
The idea of the landmark routing protocol is to calculate a
path between sender and receiver through an intermediary node
called a landmark. In more detail, landmarks are selected nodes
which are well known to every other node in the network.
Each landmark starts two instances of the Breadth-First-Search
(BFS) algorithm rooted at itself. In the ﬁrst instance only
edges in the forward direction are considered, calculating thus
shortest paths from the landmark to each node. The second
instance only considers edges in the reverse direction, thereby
obtaining the shortest paths from each node to the landmark.
This results in every user learning her parent in the path
to and from each landmark. In the following, we denote by
arborescence the BFS trees containing shortest paths from each
landmark to all the nodes. Correspondingly, we denote by anti-
arborescence the BFS trees containing shortest paths from all
nodes to each of the landmarks.
With such information, when a path between two users
(e.g., sender and receiver) needs to be calculated, the shortest
path from sender to landmark and the shortest path from
landmark to receiver are stitched together to generate a uni-
directional path of the form sender ! . . . ! landmark
! . . . ! receiver. Such a path can be calculated for each
3
of the landmarks. We refer the reader to [47] for a detailed
description of landmark routing on directed graphs.
Applying landmark routing in a distributed network re-
quires to perform the BFS algorithm in a distributed man-
ner [7], [39]. Throughout the rest of the paper, we assume that
the execution of the landmark-based BFS algorithm, which we
address by rout, results in every user knowing its parent on the
path to the BFS root node. We formalize the rout functionality
in Section IV.
C. Transactions in Distributed CN
Here we discuss how credit network operations are ex-
ecuted in a distributed fashion. First, chgLink and testLink
operations are locally performed by the two users sharing the
corresponding link.
The pay operation is divided into three main steps. First,
the sender reconstructs the transaction paths with the receiver
through the different landmarks. These transaction paths can
be reconstructed from the arborescence and anti-arborescence
generated after performing the routing protocol. Second, the
credit available in every path is calculated as the minimum
credit among the credits available in each of the links in the
path. The exact approach to calculate the available credit in a
distributed setting and in a privacy-preserving manner is one
of the open challenges that we address in this work. Finally,
the sender decreases the credit available in the paths by a total
amount corresponding to the requested transaction value.
The test operation works as the pay algorithm except that
the last step (where the sender decreases the credit available
in the paths by the transaction value) is omitted.
III. PROBLEM DEFINITION & KEY IDEAS
In the following, we describe the security properties of
interest in a credit network. We defer formal treatment to the
subsequent sections.
Integrity. A credit network achieves integrity if for all pay
operations the following holds. Let path1, . . . , path|LM|
be the
paths in a pay operation, v1, . . . , v|LM| be the credit available