#####  攻防（防）：
进程跟踪器，类似于gdb watch的调试方法， Linux
系统gdb等调试器，都是通过ptrace系统调用实现，ptrace系统调用有一个特性就是当前进程已经被追踪了，就不能被其他父进程追踪，所以只要我们设计的反调试程序开头就先执行一次`ptrace(PTRACE_TRACEME,
0, 0, 0)`，当gdb再想attach的时候就会发现已经执行了一次不能再执行了从而返回-1，就无法调试了。
看一段简单的代码：
    #include 
    #include 
    int main()
    {
        if (ptrace(PTRACE_TRACEME, 0, 0, 0) ==-1 )//这里就直接先执行了ptrace(PTRACE_TRACEME, 0, 0, 0)，表示此程序已经被追踪
        {
            printf("don't trace me！\n");
            return 1;
        }
        printf("no one trace me！\n");
        return 0;
    }
程序正常的输出结果为：
当我们用gdb调试的时候，将无法调试：
#####  反转：（攻）
那么我们如何来识别prtace反调试，检测程序中是否存在ptrace系统调用，如果我们识别到，我们就很容易通过IDA或者Binary
Ninja把调用prtace地方修改成NOP，就能绕过这种反调试。
通过工具查看程序是否存在反调试，因为prtace是函数的调用，所以我们可以直接查看符号表来确定。
    readelf -s helloword//查看.symtab
    readelf -S helloword//查看.dynsym
    objdump -T hellword//查看.dynsym
    objdump -t hellword//查看.symtab
    .......其他的查看符号表工具
#####  反转：（防）
我们可以通过删除符号表的选项，来隐藏对ptrace的调用，但只是针对.sysmtab表，不会去掉`.dynsym`
可以用工具strip,也可以在链接阶段使用使用ld的`-s`和`-S`参数，使得连接器生成的输出文件时就不产生符号信息，-s`和`-S`的区别在于`-S`移除调试符号信息，而`-s移除所有符号信息。
同时，我们也可以在GCC中通过`-Wl,-s`和`-Wl,-S`来移除符号信息。
​ 从图可以看到，即使使用strip 移除了符号表项信息，但是仍会保留.dynsym表的表项
######  .symtab和dynsym：
符号表类型 | 说明  
---|---  
.symtab | 包含大量的信息（包括全局符号global symbols）  
.dynsym | 只保留.symtab中的全局符号  
在可执行文件中，函数，变量都为符号，而符号表项所对应的就是地址（不牵扯glt，got表），.symtab和.dynsym这两个都是符号表，dynsym是symtab的较小版本，仅包含全局符号，而symtab会保护这个程序所有符号，因此，也可以在symtab中找到在dynsym中所拥有的符号，但是你会有个疑问:可执行文件明明只需要一个symtab就够了，为什么还要dynsym表？
ELF文件包含使用它们的进程在运行时所需的某些部分（例如代码和数据），这些部分被标记为必须的。链接器，调试器和其他此类工具需要其他许多部分，但正在运行的程序不需要这些部分。所以链接器生成ELF文件时，它将所有程序运行所必需的节收集到文件的一部分中，而所有程序运行不必需的节都放在其他位置。当操作系统加载ELF文件时，只有必需的部分被映射到内存中，不需要的部分保留在文件中，不需要的部分不会映射到内存，在内存中不可见。完整的符号表包含链接或调试文件所需的大量数据，而运行时则不需要。实际上，在可共享库和动态链接出现之前的日子里，在运行时不需要它们，所以为了节省运行内存，定义了第二个张表，为“
dynsym”。
因此，ELF文件有两个符号表，symtab包含所有内容，但是它不是程序运行必需的，可以剥离，并且没有运行的副作用，dynsym是不可剥离的，包含支持运行时操作所需的符号。
如果没有作任何处理，ptrace在.dynsym表中，运行时调用时需要进行重定位，所以我们无法删除dynsym表中对应符号表项。但是如果我们在编译时，静态链接库文件，ptrace符号就放在了symtab表中，我们就可以删除掉对应的符号表项了
我们再查看的时候，发现.symtab表没有任何信息！那么就真的意味着我们把ptrace隐藏了吗？
#####  反转：（攻）
但是我们如果使用ida打开的话，在IDA
FLIRT(库文件快速识别与鉴定技术)帮助下，只要找到对应的链接库的版本，生成.sig文件，依然能发现ptrace系统调用!
#####  反转：（防）
如果我们给应用程序加壳的话，在没有脱壳的情况下，那么IDA
FLIRT(库文件快速识别与鉴定技术)也无法分析出来，比如常见的upx之类的加壳程序！最好能加一个猛壳，不仅能反调试，也能过杀毒软件，多香！
#####  反转：（攻）
诸如像upx这样的壳，我们使用PEID之类的工具可以轻松识别，脱壳就行，除非程序本身使用难以解包的自定义加壳程序，这样的猛壳！比较难脱。
#####  反转：（防）
由于静态加载过于笨重了（可执行文件很大），不是长久之计，如果我们使用动态加载这项技术，就可以回到动态加载库文件（文件很小），并且ptrace将不会出现在.symtab和.dynsym表中。
动态加载是指在运行时加载库并检索库函数地址，我们需要dlopen加载库，dlsym解析函数地址，代码如下。
    #include
    #include
    #include
    #include//Linux动态库的显式调用
    #include
    int main(int argc, char **argv) {
        void *handle;//定义句柄指针变量
        long (*go)(enum __ptrace_request request, pid_t pid);//定义函数指针变量
        //获取包含'ptrace'的库的句柄
        handle = dlopen ("/lib/x86_64-linux-gnu/libc.so.6", RTLD_LAZY);
        //对动态解析函数“ptrace”的引用,go变量存的是ptrace的地址
        go = dlsym(handle, "ptrace");
        if (go(PTRACE_TRACEME, 0) 
    #include
    #include
    #include//Linux动态库的显式调用
    #include
    int main(int argc, char **argv) {
        void *handle;//定义句柄指针变量
        long (*go)(enum __ptrace_request request, pid_t pid);//定义函数指针变量
        char nice[] = "ptrace";//定义字符串数组
        //获取包含'ptrace'的库的句柄
        handle = dlopen ("/lib/x86_64-linux-gnu/libc.so.6", RTLD_LAZY);
        //对动态解析函数“ptrace”的引用,go变量存的是ptrace的地址
        go = dlsym(handle, nice);
        if (go(PTRACE_TRACEME, 0) 
    static __always_inline volatile long no_hacker(){
        int status =0; //定义返回值变量
            //内联汇编代码，系统调用ptrace，把eax寄存器的值赋给status变量
             __asm__ volatile("mov $0x0,%%ebx\n\t"
                      "mov $0x0,%%ecx\n\t"
                      "mov $0x0,%%edx\n\t"
                      "mov $0x1a,%%eax\n\t"
                      "int $0x80\n\t"
                :"=a"(status)
                :);
         return status;//这里把系统的调用的返回值作为no_hacke函数的返回值