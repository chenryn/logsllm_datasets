Table 
Relative virtual address of the delay-load 
name table, which contains the names of 
the imports that may need to be loaded. 
Matches the layout of the Import Name 
Table, Section 6.4.3. Hint/Name Table. 
20 
4 
Bound Delay Import 
Table 
Relative virtual address of the bound delay-
load address table, if it exists. 
24 
4 
Unload Delay Import 
Table 
Relative virtual address of the unload delay-
load address table, if it exists. This is an 
exact copy of the Delay Import Address 
Table. In the event that the caller unloads 
the DLL, this table should be copied back 
over the Delay IAT such that subsequent 
calls to the DLL continue to use the 
thunking mechanism correctly. 
28 
4 
Time Stamp 
Time stamp of DLL to which this image has 
been bound. 
The tables referenced in this data structure are organized and sorted just as their counterparts are 
for traditional imports. See Section 6.4. The idata Section for details. 
5.8.2. Attributes 
As yet, there are no attribute flags defined. This field is currently set to zero by the linker in the 
image. This field can be used to extend the record by indicating the presence of new fields or for 
indicating behaviors to the delay and/or unload helper functions. 
5.8.3. Name 
The name of the DLL to be delay loaded resides in the read-only data section of the image and is 
referenced via the szName field. 
5.8.4. Module handle 
The handle of the DLL to be delay loaded is located in the data section of the image and pointed 
to via the phmod field. The supplied delay load helper uses this location to store the handle to the 
loaded DLL. 
5.8.5. Delay Import Address Table (IAT) 
The delay IAT is referenced by the delay import descriptor via the pIAT field. This is the working 
copy of the entry point function pointers that resides in the data section of the image and initially 
refer to the delay load thunks. The delay load helper is responsible for updating these pointers 
with the real entry points so that the thunks are no longer in the calling loop. The function pointers 
are access via the expression pINT->u1.Function. 
5.8.6. Delay Import Name Table (INT) 
The delay INT has the names of the imports that may need to be loaded. They are ordered in the 
same fashion as the function pointers in the IAT. They consist of the same structures as the 
standard INT and are accessed via the expression pINT->u1.AddressOfData->Name[0]. 
5.8.7. Delay Bound Import Address Table (BIAT) and Time Stamp 
The delay BIAT is an optional table of IMAGE_THUNK_DATA items that is used along with the 
timestamp field by a post process binding phase. 
5.8.8. Delay Unload Import Address Table (UIAT) 
The delay UIAT is an optional table of IMAGE_THUNK_DATA items that is used by the unload 
code to handle an explicit unload request. It is initialized data in the read-only section that is an 
exact copy of the original IAT that referred the code to the delay load thunks. On the unload 
request, the library can be freed, the *phmod cleared, and the UIAT written over the IAT to restore 
everything to its pre-load state. 
6. Special Sections 
Typical COFF sections contain code or data that linkers and Win32 loaders process without 
special knowledge of the sections’ contents. The contents are relevant only to the application 
being linked or executed. 
However, some COFF sections have special meanings when found in object files and/or image 
files. Tools and loaders recognize these sections because they have special flags set in the 
section header, or because they are pointed to from special locations in the image optional 
header, or because the section name is “magic”: that is, the name indicates a special function of 
the section. (Even where the section name is not magic, the name is dictated by convention, so 
we will refer to a name.) 
The reserved sections and their attributes are described in the table below, followed by detailed 
descriptions for a subset of them. 
Section 
Name 
Content 
Characteristics 
.arch 
Alpha architecture 
information 
IMAGE_SCN_MEM_READ | 
IMAGE_SCN_CNT_INITIALIZED_DATA |          
IMAGE_SCN_ALIGN_8BYTES | 
IMAGE_SCN_MEM_DISCARDABLE 
.bss 
Uninitialized data 
IMAGE_SCN_CNT_UNINITIALIZED_DATA | 
IMAGE_SCN_MEM_READ |                 
IMAGE_SCN_MEM_WRITE 
.data 
Initialized data 
IMAGE_SCN_CNT_INITIALIZED_DATA | 
IMAGE_SCN_MEM_READ |          
IMAGE_SCN_MEM_WRITE 
.edata 
Export tables 
IMAGE_SCN_CNT_INITIALIZED_DATA | 
IMAGE_SCN_MEM_READ 
.idata 
Import tables 
IMAGE_SCN_CNT_INITIALIZED_DATA | 
IMAGE_SCN_MEM_READ | 
IMAGE_SCN_MEM_WRITE 
.pdata 
Exception 
information 
IMAGE_SCN_CNT_INITIALIZED_DATA | 
IMAGE_SCN_MEM_READ 
.rdata 
Read-only 
initialized data 
IMAGE_SCN_CNT_INITIALIZED_DATA | 
IMAGE_SCN_MEM_READ 
.reloc 
Image relocations 
IMAGE_SCN_CNT_INITIALIZED_DATA | 
IMAGE_SCN_MEM_READ |                
IMAGE_SCN_MEM_DISCARDABLE 
.rsrc 
Resource directory 
IMAGE_SCN_CNT_INITIALIZED_DATA | 
IMAGE_SCN_MEM_READ |                 
IMAGE_SCN_MEM_WRITE 
.text 
Executable code 
IMAGE_SCN_CNT_CODE | IMAGE_SCN_MEM_EXECUTE 
|                 IIMAGE_SCN_MEM_READ 
.tls 
Thread-local 
storage 
IMAGE_SCN_CNT_INITIALIZED_DATA | 
IMAGE_SCN_MEM_READ |                
IMAGE_SCN_MEM_WRITE 
.xdata 
Exception 
information 
IMAGE_SCN_CNT_INITIALIZED_DATA | 
IMAGE_SCN_MEM_READ 
Some of the sections listed here are marked “(object only)” or “(image only)” to indicate that their 
special semantics are relevant only for object files or image files, respectively. A section that says 
“(image only)” may still appear in an object file as a way of getting into the image file, but the 
section has no special meaning to the linker, only to the image file loader. 
6.1. The .debug Section 
The .debug section is used in object files to contain compiler-generated debug information, and in 
image files to contain the total debug information generated. This section describes the packaging 
of debug information in object and image files. The actual format of CodeView debug information 
is not described here. See the document CV4 Symbolic Debug Information Specification. 
The next section describes the format of the debug directory, which can be anywhere in the 
image. Subsequent sections describe the “groups” in object files that contain debug information. 
The default for the linker is that debug information is not mapped into the address space of the 
image. A .debug section exists only when debug information is mapped in the address space. 
6.1.1. Debug Directory (Image Only) 
Image files contain an optional “debug directory” indicating what form of debug information is 
present and where it is. This directory consists of an array of “debug directory entries” whose 
location and sizes are indicated in the image optional header. 
The debug directory may be in a discardable .debug section (if one exists) or it may be included 
in any other section in the image file, or not in a section at all. 
Each debug directory entry identifies the location and size of a block of debug information. The 
RVA specified may be 0 if the debug information is not covered by a section header (i.e., it resides 
in the image file and is not mapped into the run-time address space). If it is mapped, the RVA is 
its address. 
Here is the format of a debug directory entry: 
Offset 
Size 
Field 
Description 
0 
4 
Characteristics 
A reserved field intended to be used for 
flags, set to zero for now. 
4 
4 
TimeDateStamp 
Time and date the debug data was created. 
8 
2 
MajorVersion 
Major version number of the debug data 
format. 
10 
2 
MinorVersion 
Minor version number of the debug data 
format. 
12 
4 
Type 
Format of debugging information: this field 
enables support of multiple debuggers. See 
Section 6.1.2, “Debug Type,” for more 
information. 
16 
4 
SizeOfData 
Size of the debug data (not including the 
debug directory itself). 
20 
4 
AddressOfRawData 
Address of the debug data when loaded, 
relative to the image base. 
24 
4 
PointerToRawData 
File pointer to the debug data. 
6.1.2. Debug Type 
The following values are defined for the Debug Type field of the debug directory: 
Constant 
Value 
Description 
IMAGE_DEBUG_TYPE_UNKNOWN 
0 
Unknown value, ignored by all tools. 
IMAGE_DEBUG_TYPE_COFF 
1 
COFF debug information (line numbers, 
symbol table, and string table). This type of 
debug information is also pointed to by 
fields in the file headers. 
IMAGE_DEBUG_TYPE_CODEVIEW 
2 
CodeView debug information. The format of 
the data block is described by the CV4 
specification. 
IMAGE_DEBUG_TYPE_FPO 
3 
Frame Pointer Omission (FPO) information. 
This information tells the debugger how to 
interpret non-standard stack frames, which 
use the EBP register for a purpose other 
than as a frame pointer. 
IMAGE_DEBUG_TYPE_MISC  
4 
IMAGE_DEBUG_TYPE_EXCEPTION 
5 
IMAGE_DEBUG_TYPE_FIXUP 
6 
IMAGE_DEBUG_TYPE_OMAP_TO_SRC  
7 
IMAGE_DEBUG_TYPE_OMAP_FROM_SRC  
8 
IMAGE_DEBUG_TYPE_BORLAND 
9 
If Debug Type is set to IMAGE_DEBUG_TYPE_FPO, the debug raw data is an array in which 
each member describes the stack frame of a function. Not every function in the image file need 
have FPO information defined for it, even though debug type is FPO. Those functions that do not 
have FPO information are assumed to have normal stack frames. The format for FPO information 
is defined as follows: 
#define FRAME_FPO   0 
#define FRAME_TRAP  1 
#define FRAME_TSS   2 
typedef struct _FPO_DATA { 
    DWORD       ulOffStart;            // offset 1st byte of function code 
    DWORD       cbProcSize;            // # bytes in function 
    DWORD       cdwLocals;             // # bytes in locals/4 
    WORD        cdwParams;             // # bytes in params/4 
    WORD        cbProlog : 8;          // # bytes in prolog 
    WORD        cbRegs   : 3;          // # regs saved 
    WORD        fHasSEH  : 1;          // TRUE if SEH in func 
    WORD        fUseBP   : 1;          // TRUE if EBP has been allocated 
    WORD        reserved : 1;          // reserved for future use 
    WORD        cbFrame  : 2;          // frame type 
} FPO_DATA; 
6.1.3. .debug$F (Object Only) 
Object files can contain .debug$F sections whose contents are one or more FPO_DATA  
records (Frame Pointer Omission information). See “IMAGE_DEBUG_TYPE_FPO” in table 
above. 
The linker recognizes these .debug$F records. If debug information is being generated, the linker 
sorts the FPO_DATA records by procedure RVA, and generates a debug directory entry for them. 
The compiler should not generate FPO records for procedures that have a standard frame format. 
6.1.4. .debug$S (Object Only) 
This section contains CV4 symbolic information: a stream of CV4 symbol records as described in 
the CV4 spec. 
6.1.5. .debug$T (Object Only) 
This section contains CV4 type information: a stream of CV4 type records as described in the 
CV4 spec. 
6.1.6. Linker Support for Microsoft CodeView® Debug Information 
To support CodeView debug information, the linker: 
1 
Generates the header and “NB05” signature. 
2 
Packages the header with .debug$S and .debug$T sections from object files and synthetic 
(linker-generated) CV4 information, and creates a debug directory entry. 
3 
Generates the subsection directory containing a pointer to each known subsection, including 
subsections that are linker-generated. 
4 
Generates the sstModules subsection, which specifies the address and size of each module’s 
contribution(s) to the image address space. 
5 
Generates the sstSegMap subsection, which specifies the address and size of each section in 
the image. 
6 
Generates the sstPublicSym subsection, which contains the name and address of all 
externally defined symbols. (A symbol may be represented both by .debug$S information and 
by an sstPublicSym entry.) 
6.2. The .drectve Section (Object Only) 
A section is a “directive” section if it has the IMAGE_SCN_LNK_INFO flag set in the section 
header. By convention, such a section also has the name .drectve. The linker removes a 
.drectve section after processing the information, so the section does not appear in the image file 
being linked. Note that a section marked with IMAGE_SCN_LNK_INFO that is not named 
.drectve is ignored and discarded by the linker. 
A .drectve section consists of a string of ASCII text. This string is a series of linker options (each 
option containing hyphen, option name, and any appropriate attribute) separated by spaces. The 
.drectve section must not have relocations or line numbers. 
In a .drectve section, if the hyphen preceding an option is followed by a question mark (for 
example, “-?export”), and the option is not recognized as a valid directive, the linker must ignore it. 
This allows compilers and linkers to add new directives while maintaining compatibility with 
existing linkers, as long as the new directives are not required for the correct linking of the 
application. For example, if the directive enables a link-time optimization, it is acceptable if some 
linkers cannot recognize it. 
6.3. The .edata Section (Image Only) 
The export data section, named .edata, contains information about symbols that other images 
can access through dynamic linking. Exports are generally found in DLLs, but DLLs can import 
symbols as well. 
An overview of the general structure of the export section is described below. The tables 
described are generally contiguous in the file and present in the order shown (though this is not 
strictly required). Only the Directory Table and Address Table are necessary for exporting symbols 
as ordinals. (An ordinal is an export accessed directly as an Export Address Table index.) The 
Name Pointer Table, Ordinal Table, and Export Name Table all exist to support use of export 
names. 
Table Name 
Description 
Export Directory Table 
A table with just one row (unlike the debug directory). This table 
indicates the locations and sizes of the other export tables. 
Export Address Table 
An array of RVAs of exported symbols. These are the actual 
addresses of the exported functions and data within the 
executable code and data sections. Other image files can import 
a symbol by using an index to this table (an ordinal) or, optionally, 
by using the public name that corresponds to the ordinal if one is 
defined. 
Name Pointer Table 
Array of pointers to the public export names, sorted in ascending 
order. 
Ordinal Table 
Array of the ordinals that correspond to members of the Name 
Pointer Table. The correspondence is by position; therefore, the 
Name Pointer Table and the Ordinal Table must have the same 
number of members. Each ordinal is an index into the Export 
Address Table. 
Export Name Table 
A series of null-terminated ASCII strings. Members of the Name 
Pointer Table point into this area. These names are the public 
names through which the symbols are imported and exported; 
they do not necessarily have to be the same as the private names 
used within the image file. 
When another image file imports a symbol by name, the Name Pointer Table is searched for a 
matching string. If one is found, the associated ordinal is then determined by looking at the 
corresponding member in the Ordinal Table (that is, the member of the Ordinal Table with the 
same index as the string pointer found in the Name Pointer Table). The resulting ordinal is an 
index into the Export Address Table, which gives the actual location of the desired symbol. Every 
export symbol can be accessed by an ordinal. 
Direct use of an ordinal is therefore more efficient, because it avoids the need to search the Name 
Pointer Table for a matching string. However, use of an export name is more mnemonic and does 
not require the user to know the table index for the symbol. 
6.3.1. Export Directory Table 
The export information begins with the Export Directory Table, which describes the remainder of 
the export information. The Export Directory Table contains address information that is used to 
resolve fix-up references to the entry points within this image. 
Offset 
Size 
Field 
Description 
0 
4 
Export Flags 
A reserved field, set to zero for now. 
4 
4 
Time/Date Stamp 
Time and date the export data was created. 
8 
2 
Major Version 
Major version number. The major/minor 
version number can be set by the user. 
10 
2 
Minor Version 
Minor version number. 
12 
4 
Name RVA 
Address of the ASCII string containing the 
name of the DLL. Relative to image base. 
16 
4 
Ordinal Base 
Starting ordinal number for exports in this 
image. This field specifies the starting 
ordinal number for the Export Address 
Table. Usually set to 1. 
20 
4 
Address Table Entries 
Number of entries in the Export Address 
Table. 
24 
4 
Number of Name 
Pointers 
Number of entries in the Name Pointer 
Table (also the number of entries in the 
Ordinal Table). 
28 
4 
Export Address Table 
RVA 