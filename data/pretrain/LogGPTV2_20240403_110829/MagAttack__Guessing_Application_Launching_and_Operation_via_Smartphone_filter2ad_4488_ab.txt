Session 4A: Mobile SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand285Figure 3: Workflow of MagAttack, which detects application launching, recognizes user activities based on EM signals collected
by mobile devices in the target laptop’s vicinity.
Chrome and iTunes) are launched on a MacBook Air laptop. During
experiments, the target laptop is placed on a round table with the
attack smartphone attached on the backside to draw no attention,
as shown in Fig. 7. The detailed information of the smartphone and
the laptop is depicted in Tab. 2 and Tab. 3 in Sec. 5. Meanwhile, we
use dtrace to capture the name of the executed system calls and the
time they are being called in microsecond granularity.
Since the system call is recorded in microseconds while the EM
signal is recorded in 10-millisecond granularity (the sampling rate
of the iPhone SE magnetometer is 100 Hz), we transform the system
call trace into a time-versus-number histogram. The transformed
trace is a two-column matrix E = [(cid:174)t; (cid:174)n], where vector (cid:174)t records
time units in 10-millisecond granularity, and vector (cid:174)n records the
number of system calls during that time unit. Then, we align the
magnetic trace with the system call trace by shifting the former
one so that the two traces have maximal correlation coefficient. We
plot the logarithmic system call traces and the EM signals in Fig. 2
(both are normalized for illustration), from which we can observe
that:
• EM signals show strong resemblance to the system call traces
captured at the same time, e.g., the system-call-intensive
moment also has a high EM magnitude.
• EM signals demonstrate distinct patterns among applications,
even for those of the same type: Safari and Chrome, e.g., the
EM signal of Chrome is more dynamic and has more peaks
compared with that of Safari.
These findings shed light upon inferring user activities on laptops
via EM signals captured by nearby mobile devices. Since various
user activities invoke different system calls, the resulting CPU
power consumptions cause varying EM signals, which are distinct
and associated with the activities and thus in turn can be utilized
to conduct user activity inference.
3 THREAT MODEL
In this section, we present the threat model of MagAttack. Since the
adversary’s goal is to infer user activities on user’s laptop without
his awareness, we consider the following attack scenario: in a public
area such as a library, a target is using his laptop. The adversary
sits near to him, and tries to figure out what the target is doing on
the laptop (e.g., what applications the target launches and what
operations the target performs). In such a scenario, we assume that
the adversary has following abilities.
Vicinity to Target Laptop. We assume the adversary’s mobile
devices can be in the target laptop’s vicinity, and draw no attention.
No Target Laptop Access. We assume that an adversary may
target at any users of her choices, but she has no direct access to
Algorithm 1: Earth Impact Reduction
Input: maд = {maдx(t), maдy(t), maдz(t)}, t = 1 . . . n:
three-dimensional signals
Output:
• M = M(t), t = 1 . . . n : aggregated signals.
• Mnorm = Mnorm(t), t = 1 . . . n: aggregated and
normalized signals.
Mi = Mi − avд(Mi) // centralization
1 M = maд
2 for i ∈ {x , y, z} do
3
4 for t ∈ [1, 2, . . . , n] do
5
(cid:113)
M(t) =
6 Mnorm =
Mx(t)2 + My(t)2 + Mz(t)2 // aggregation
M−min(M)
max(M)−min(M) // normalization
the target laptop. She cannot physically touch/see the screen, or
install malware.
No User Interaction. The adversary cannot ask users to per-
form any operations, such as pressing a button or running a specific
application.
4 MAGATTACK DESIGN
4.1 Overview
To infer user activities, the adversary first puts her mobile device in
the target laptop’s vicinity and draws no attention. Then, the attack
device collects the electromagnetic emissions from the laptop’s
CPU, based on which MagAttack detects application launching,
recognizes running applications, and figures out user operations,
as shown in Fig. 3.
4.2 Launching Detection
In this subsection, we elaborate how to detect the launching process
of an application, as the first step of user application redefinition.
4.2.1 Earth Impact Reduction. Due to the impact of the earth’s
magnetic field, the captured EM signals are geo-spatial dependent.
Even for an application launched on the same laptop but with
different geo-spatial locations or laptop-smartphone orientations,
the EM signals can vary a lot. As shown in Fig. 4(a) and 4(b), the
3-dimensional EM signals at two different locations/orientations
differ in values on the axis of x, y, and z. MagAttack shall eliminate
the earth impact to achieve location/orientation-free attack.
The mobile device sensor records surrounding EM signals in
three dimensions (x, y, z). The initial EM magnitude of each axis
depends on the location of the mobile device, and the changing
Session 4A: Mobile SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand286(a) 3-dimensional EM signals (setting 1).
(b) 3-dimensional EM signals (setting 2).
(c) 1-dimensional normalized signals (set-
ting 1).
(d) 1-dimensional normalized signals (set-
ting 2).
Figure 4: Before vs. after earth impact reduction. Setting 1 and 2 refer to two different geo-spatial locations and laptop-
smartphone orientations for launching the same application.
trend lies with the laptop-smartphone orientation. To eliminate the
impact of location and orientation, we utilize the relative change of
the EM signals instead of the original data. We assume this change
is caused by the launching and thus is consistent with the same
application regardless of positions/orientations.
To achieve it, we first centralize the magnetic magnitude of each
axis to resolve its relative change to the earth’s magnetic field, and
then aggregate and normalize the relative changes in all three axes,
as shown in Algorithm 1. As a result, we can see from Fig. 4 that
after earth impact reduction, the 1-dimensional normalized signals
under two different settings become more similar and can be further
identified as the same one, as discussed later.
4.2.2 Pre-screening. EM signals usually remain stable when no
application is started but can vary significantly during the process
of application launching. To improve the accuracy and efficiency of
launching detection, we design a pre-screening algorithm that uses
a time window to scan through the EM signals and filter out the time
windows that are unlikely to contain the start of an application.
As an application can start at any time, we detect the high vari-
ances of the EM signals over a certain time period. A smaller time
window and moving step can achieve higher accuracy at the cost of
lower detection efficiency. To strike the balance between accuracy
and efficiency, we set the time window to be 1 s and the moving step
to be 0.1 s. In addition, we utilize the Exponential Moving Average
(EMA) approach [20] to update the variance threshold during the
period without application launching:
δt +1 = (1 − α)δt + α × V ar(t)
(2)
where δt and V ar(t) are the threshold and the EM variance at the
time period t, respectively. α represents the degree of weighting
decrease and a larger α indicates a more dominant current vari-
ance in updating the threshold. In our implementation, we set α
to be 0.1. A window Wt is detected when its EM signal variance is
substantially larger than the threshold δt :
V ar(t) ≥ β × δt
(3)
where β is the coefficient of the threshold. A larger β indicates that
fewer sliding windows will be detected. In our implementation, we
set β to be 3. Upon detecting a sliding window with a large variance,
we can further classify it with a Support Vector Machine (SVM)
based classifier.
4.2.3 Launching Detection. In addition to application launching,
other user operations on the laptop may also contribute to high
variances of EM signals. To address it, we utilize a SVM based
classifier to further refine the launching detection results.
As the CPU instructions involved with a launching operation
often take seconds to complete, a 1-second EM trace may not hold
enough features to differentiate launching from other operations.
Therefore, for each 1-second EM trace detected by the pre-screening
algorithm, we append it with the subsequent k − 1 one-second EM
traces. In our implementation, we choose k to be 4 based on our
observation that the variance of EM signals becomes indistinctive
after 4 seconds since we start the application. For each k-second
normalized EM time series, we smooth it with the Wavelet recon-
struction at level 4, and then employ Short Time Fourier Transform
and Principal Component Analysis to extract a feature vector. Since
we use the same feature extraction techniques for launching detec-
tion and application recognition, we defer to present the technical
details of feature extraction in the next subsection. Then, we feed
the feature vector of each k-second EM trace to a SVM based binary
classifier with a kernel type of the radial basis function [6], whose
output is whether it is the start of an application. Combined with the
pre-screening, MagAttack is able to detect application launching
accurately and reliably.
4.3 Application Recognition
After detecting the launching of an application, we aim at figuring
out what the application is.
4.3.1 Data Pre-processing. After launching detection, we obtain
a number of k-second time windows that contain the EM traces
of application launching. Hereafter, we use time window/interval
to represent the EM trace contained in that time window/interval
for short. For these time windows, we perform two pre-processing
operations: window expansion and window alignment before feature
extraction.
Window Expansion. To guarantee that the selected time win-
dow contains sufficient information, even for applications that need
a long time to initialize (e.g., more than 10 seconds), we append each
aforementioned k-second time window with the subsequent m − k
one-second time windows, where m ≥ k. In our implementation,
we choose m to be 10. This expansion can help MagAttack achieve
higher accuracy by including more features during the launching
process.
Session 4A: Mobile SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand287(a) Spectrogram: Microsoft PowerPoint
(b) EM Signal: Microsoft PowerPoint
(c) Spectrogram: Skype
(d) EM Signal: Skype
(e) Spectrogram: Mail
(f) EM Signal: Mail
Figure 5: STFT spectrum of EM signals reconstructed on the
first wavelet level for different applications.
Window Alignment. Due to the finite granularity of the win-
dow sliding approach, the starting time of each window deviates
more or less from the ground truth. To reduce the impact of devia-
tions, we align these time windows in two steps. First, we compute
the centroid of these time windows using the average Dynamic
Time Warping (DTW) scheme [21], which is the time window that
has the minimum averaged DTW cost to the others. Then, we use
the centroid as the base to shift each other time window in the time
series. As a result, each shifted time window has the maximum
correlation coefficient with the base signal and is still m seconds.
Feature Extraction. We then extract a feature vector for each
4.3.2
aligned time window. We first divide a EM time window into over-
lapped time intervals and conduct Fast Fourier Transform (FFT)
on each interval, which extracts time-variant features in the fre-
quency domain. Then, we conduct the Principal Component Anal-
ysis (PCA) [29] on the FFT result of each time interval and obtain
the first PCA component, which aggregates features in different
frequency scales. Finally, we sequentialize the PCA component
of each time interval to construct a feature vector for application
recognition.
Short Time Fourier Transform. For each aligned time win-
dow, we divide it into time intervals using a sliding window with
an interval size of w and a step size of 0.5 ∗ w. Then, each time
interval is zero padded to the length of 2 ∗ w, before conducting
FFT to get the STFT spectrogram. We calculate the abstract value
of the FFT results and obtain the first half. As thus, for each time
window, we get a t × l spectrogram matrix S, where t rows cor-
respond to t time intervals, and l columns are the FFT results of
that time interval. In practice, we set w = 320 milliseconds. Fig. 5
illustrates the STFT spectrograms of 3 Mac OS applications (Mi-
crosoft PowerPoint, Skype and Mail), where the X-axis represents
the time interval, the Y-axis represents the frequency, and the color
represents the energy of the frequency.
Principal Component Analysis. We then use the PCA to track
the correlation of FFT results among different frequencies, and
combine them by extracting the first principal component. We
conduct PCA on the FFT results of each time interval in three
steps: data preparation, coefficient calculation, and feature vector
construction.
(1) Data Preparation. Let s be the number of time windows.
With STFT, each time window is transformed into a spectrogram
matrix with t rows. For each time interval, we extract its FFT results
from aforementioned spectrogram matrices to construct a new inter-
val matrix. In this way, we build t interval matrices H1, H2, . . . , Ht ,
and each matrix has s rows.
(2) Coefficient Calculation. For each interval matrix Hi, we
calculate its principal component coefficient matrix Ci. Each col-
umn of Ci contains coefficients for one principal component and
the columns are arranged in the decreasing order of component
variance. We then obtain the first principal component of Hi, i.e.,
the first column of Ci, for feature vector construction.
(3) Feature Vector Construction. We conduct PCA on the spec-
trogram matrix S to build feature vector V . The ith element of V is
calculated as:
l
j=1
V(i) =
S(i, j) ∗ Ci(1, j)
(4)
where l is the column number of the spectrogram matrix S as well
as the length of FFT results for each time interval.
In this way, for each m-second time window, we extract a feature
vector V with t elements, where t is the number of time intervals
that the time window is divided into. We envision that this fea-
ture vector retains the time-varying frequency features of the EM
signals.
4.3.3 Application Classification. Given the feature vectors ex-
tracted from the training data, we build an application recognition
classifier using the 1-Nearest Neighbor (1NN) algorithm [28], which
is lightweight and non-parametric. We employ the Euclidean dis-
tance to evaluate the distance between two feature vectors, i.e., two
samples. When inferring, the 1NN algorithm classifies the testing
feature vector into the closest training vector. Since we have aligned
each sample before feature extraction, the Euclidean distance works
well in our algorithm.
4.4 Operation Recognition
In addition to application recognition, MagAttack attempts a more
fine-grained detection, i.e., operation recognition. We analyze the
web browser as an example and regard visiting different web pages
as different operations. However, our method is not limited to it
and can be applied to other applications as well. We capture the EM
signals when a web page is being launched, and extract a feature
matrix from its EM signals. Specifically, we use Wavelet Multi-
Resolution Analysis (MRA) [1] to get the de-noised signals at N
Wavelet levels. Then, we extract a feature vector from each of the
N reconstructed signals using the same approach in Sec. 4.3.2, and
arrange the N feature vectors in rows to construct a feature matrix.
With the obtained feature matrix, we use a variant of 1NN classifier
to achieve operation recognition.
Session 4A: Mobile SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand288(a) Level-1 reconstruction.
(b) Level-2 reconstruction.
(c) Level-3 reconstruction.
(d) Level-4 reconstruction.
Figure 6: Level 1-4 reconstructed EM signals using the Wavelet MRA.
4.4.1 Wavelet Multi-Resolution Analysis. Opening a particular web
page requires executing network-related CPU instructions over
a short time interval, resulting in EM signals with time-varying
frequency characteristics. EM signals generated by opening a web
page are usually more inconsistent than those generated by applica-
tion launching. The reason is that for applications, CPU instructions
executed by different launchings are fairly consistent while for web
pages, they are likely to be various as a result of dynamic contents,
e.g., pop-out online advertisements.
To address it, we use the Wavelet MRA to de-noise the EM sig-
nals of web pages at different granularity scales before extracting
time-frequency features. The insight is that, although each time
opening a web page may involve dynamic contents and thus dif-
ferent CPU instructions, the EM signals of the same web page are
similar at a coarser granularity scales with subtle differences at a
finer granularity. We analyze EM signals of different web pages at
N granularity scales with N different weights, and N is set to be