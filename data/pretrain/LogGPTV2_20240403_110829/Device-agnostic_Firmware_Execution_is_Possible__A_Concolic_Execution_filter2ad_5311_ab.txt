but employ symbolic execution to run small code snippets
to calculate suitable values for unimplemented peripheral
inputs. In this way, a firmware image runs concretely and
symbolically by turns, gaining the advantages of both.
Laelaps only needs basic information of a device to ini-
tialize the execution environment. Specifically, it requires the
target architecture profile (e.g., ARM Cotex-M0/3/4) and loca-
tions of ROM and RAM. Then it loads ARM core peripherals
into the system map. Next, memory regions used by chip-
specific peripherals are marked as unimplemented (e.g., the
0x40000000–0x400FFFFF region is used as peripheral mem-
ory map in NXP chips). Accesses to them are intercepted
and handled in the symbolic execution engine. All the other
memory regions are unmapped and should never be accessed.
An access to the unmapped memory indicates a potential
memory corruption, which can be used by a fuzzing tool
to capture crashes. QEMU translates and emulates each in-
struction of firmware until there is a read operation to an
unimplemented memory. Our goal is to predict a proper read
values. Peripheral write operations, on the other hand, are
ignored because they do not influence program status in any
way. As shown in Figure 2, when an unimplemented read
4
operation is detected, the processor context and memory are
then synchronized to the symbolic execution engine (S1).
During symbolic execution, every unimplemented periph-
eral access is symbolized (S2), resulting in a list of symbols.
Each time a branch is encountered, we run a path selection
algorithm (S3/4) that chooses the most promising path (see
§4.3). Symbolic execution advances along the path until one
of the following events is detected:
E1: Synchronous exception (e.g., software interrupt)
E2: Exception return
E3: Long loop (e.g., memcpy)
E4: Reaching the limit of executed branches
E5: User defined program points
E1 and E2 terminate symbolic execution because these
system level events cannot be easily modeled by existing
symbolic execution engines (§4.2). E3 could consume a lot of
time in symbolic execution. Therefore, whenever detected,
the execution should be transferred to the concrete engine
(§4.2.5). We do not allow emulation to stay in symbolic engine
forever due to the path explosion problem. Therefore, we
set a limit for the maximum branches to encounter in each
symbolic execution (§4.3). In Figure 2, we illustrate a case
in which we set this limit as two. Lastly, for E5, assuming
analysts have some prior knowledge about the firmware
via static analysis or Laelaps itself, we provide an interface
allowing them to configure some program points that should
terminate symbolical execution.
At the time when symbolic execution is terminated, we
evaluate the values of the list of symbols that navigate exe-
cution to the current path (S5) and feed the solved values to
QEMU (S6). Since these values are verified via the constraint
solver, they will guide the concrete execution to follow the
selected promising path. In this paper, we call each switch-
ing to symbolic engine a symbolic execution pass. Laelaps
pushes firmware execution forward by continuously switch-
ing between QEMU and symbolic execution passes. In this
way, we provide a platform that execute the firmware to a
state suitable for further dynamic analysis (e.g., examining a
hard-to-reach code logic that was only possible with a real
device previously). It leaves to analysts to decide the right
time to dig into firmware execution and perform further
analysis. How to dynamically analyze the firmware is out of
the scope in this paper. We expect many tools can be directly
benefited from Laelaps because our design is not specific
to a particular tool. Nevertheless, we showcase one of its
applications (fuzz testing) in §6.3.
4 LAELAPS SYSTEM DESIGN
This section details the design of core components of Laelaps.
We also discuss limitations of our design and the mitigation
in practice.
Device-agnostic Firmware Execution
Anonymous Submission to MobiCom, 2020
Figure 2: Laelaps’s branch exploration with the depth of two. The red color branches are selected by Laelaps.
4.1 State Transfer
Whenever an unimplemented peripheral read is detected,
the program state is transferred to the symbolic execution
engine. In our current design, Laelaps synchronizes the pro-
cessor context (general purpose registers, system registers)
of the currect execution mode to the symbolic execution
engine. Since copying all RAM is expensive, we adopt a
copy-on-access strategy that only copies required pages on
demand. During symbolic execution, QEMU is suspended,
and symbolic execution engine works on its own RAM copy.
4.2 Symbolic Execution
4.2.1 Basic Rule #1. Since the symbolic execution engine is
invoked by unimplemented peripheral read operations, the
first instruction in the symbolic engine is always a peripheral
read. We generate a symbolic variable for this memory access.
Likewise, the following peripheral read operations are also
assigned with symbols. Note that even if a peripheral address
has been accessed earlier, we still assign a new symbol. This
is because of the volatile nature of peripheral memory – their
values change nondeterministically due to unforeseen events
generated externally. In this sense, we assign new symbols
spatially (different addresses get different symbols) and
temporally (different times get different symbols). This
peripheral model is very common as seen in timers and I/O
modules.
4.2.2 Basic Rule #2. Firmware may contain OS-level func-
tions that inevitably involve the interaction between tasks
and event handlers running in the separated privileged mode.
Our current symbolic execution cannot correctly handle com-
plex context switches due to exceptions. Therefore, in each
symbolic execution, we set a basic rule that the execution
should always stick to the original execution mode. To
meet this rule, for each explicit instruction that requires con-
text switch, we immediately terminate symbolic execution
5
and transfer the execution to QEMU. This includes synchro-
nous exception instruction such as supervisor calls (SVC)
and exception returns. In an exception return, the processor
encounters a specially encoded program counter (PC) value
and fetches the real PC and other to-be-restored registers
from the stack.
4.2.3 Basic Rule #3. As discussed in §3.3, Laelaps holds
multiple solved symbols to be replayed. In essence, Laelaps
expects QEMU to follow exactly the same path explored dur-
ing symbolic execution. This implies that QEMU should not
take any asymmetric exceptions when replying the buffered
symbol values. Otherwise, the QEMU execution is deviated
from the expected path, rendering the solved symbols useless.
We can certainly discard the remaining solved symbols on a
path deviation caused by exceptions. However, since sym-
bolic execution is expensive, we opt to adopt another practi-
cal approach. That is, we set a basic rule that QEMU resumes
replaying without accepting any exceptions until all of
the solved symbols are consumed.
4.2.4 Unrecognized Instructions. Currently, state-of-the-art
symbolic execution engines cannot recognize system-level
ARM instructions. We take another two strategies to handle
this. First, for the unrecognized instructions that do not affect
program control flow, we replace them with NOP instruc-
tions. This includes many instructions without operands
(e.g., DMB, ISB), instruction updating system registers (e.g., MSR),
and breakpoint instruction BKPT. Second, for the unrecog-
nized instructions that directly change control flow (e.g., SVC)
or update general purpose registers (e.g., MRS), we immedi-
ately terminate symbolic execution and switch to QEMU for
concrete execution.
4.2.5 Long Loop Detection. Symbolic execution is much
slower than concrete execution. Therefore, we need to keep
the time spent on symbolic execution as little as possible
but at the same time yield similar predicted paths. When
encountering long loops controlled by concrete counters,
read peripheral #0……read peripheral #1read peripheral #2……read peripheral #3read peripheral #4……read peripheral #5read peripheral #0……read peripheral #1read peripheral #2……read peripheral #3read peripheral #4……read peripheral #5……………………0x010x000x000x0Fsym #0sym #1sym #2sym #3sym #4sym #5sym #0 = 0x01sym #1 = 0x00sym #4 = 0x00sym #5 = 0x0Fsym #0 = 0x01sym #1 = 0xFFsym #2 = 0xF0sym #3 = 0x01S1. State SyncS2. PeripheralSymbolizationS3. Path Selection #1S4. Path Selection #2S5. SymbolEvaluationS6. Peripheral Signal ReplayS7. Execution Reaches Selected BBConcrete Execution EngineSymbolic Execution EngineAnonymous Submission to MobiCom, 2020
Anon.
of branches the symbolic engine has to accumulate before
invoking the constraint solver and returning to the QEMU.
Forward_Depth is the maximum number of basic blocks
that the symbolic engine can advance from a branch. With
Context_Depth set to two, each symbolic execution pass de-
cides the results for two branches (from 0x424 to 0x454 and
0x800 to 0x838). Note that before reaching a point to decide a
branch, there might have been multiple basic blocks executed.
These intermediate basic blocks end with a single branch or
the corresponding conditions are determined by concrete
values. We call an execution leading to a branch selection as
a step, following the naming convention of angr [40]. With
Forward_Depth set to three, symbolic engine explores as
many as three future steps for each branch. When encoun-
tering a new branch in a step, both branches are explored. As
shown in the Figure 3, there are two branches at the end of ba-
sic block 0x424. The left-hand branch leads to three distinct
paths within Forward_Depth steps, while the right-hand
branch leads two. Our algorithm selects the most promising
one among all of the paths. In this figure, we choose a path
starting from the left-hand branch. Therefore, we pick the
0x454 branch to follow the 0x424 branch.
4.3.1 Explanatory Example. Listing 2 is a code snippet of
an Ethernet driver from the NXP device SDK. The func-
tion enet_init initializes the Ethernet interface, which calls
PHY_Init to configure the Network Interface Controller (NIC)
with a physical layer (PHY) address. If the invocation fails,
the execution will be suspended and lead to calling an assert
function in line 5, which is an infinite loop. Inside PHY_Init,
PHY_Write interacts with NIC for actual configuration. Lines
10 and 12 invoke PHY_Write twice. If either invocation fails,
PHY_Init returns with a failed result. If both of them re-
turns kStatus_Success, the program checks whether the
operations have been successful by reading back peripheral
memories using PHY_Read, as indicted in lines 16 and 18. Dif-
ferent from PHY_Write in lines 10 and 12, there are multiple
chances indicted by counter for the two PHY_Read func-
tions to obtain the expected result. If so (line 19), a short loop
is executed to wait until the state is stable (lines 21-24). In
a word, a correct execution trace is expected to follow “3-
10-11-12-13-15-16-17-18-19-(21-23-24)*-25-34-4-6”. In what
follows, we present our heuristics that automatically guide
the execution to this right path.
...
status = PHY_Init (...) ;
if ( kStatus_Success != status )
LWIP_ASSERT ("\r\ nCannot initialize PHY .\ r\n" , 0) ;
1 static void enet_init (...) {
2
3
4
5
6 }
7
8 status_t PHY_Init (...) {
9
10
...
result = PHY_Write (...) ;
Figure 3: The illustration of Laelaps’s path selection
strategy: Context Preserving Scanning Algorithm. Ex-
ecuted path is represented by red edges in the CFG. In
each sector, CPSA explores all possible paths within
Forward_Depth steps. At the node 0x424, two branches
are explored. Since the left-hand branch has the
most promising path, we choose the left-hand branch.
CPSA selects the most promising path on each branch-
ing. It avoids paths with infinite loops and avoids re-
executing old paths.
the loop would be executed symbolically until the loop is fin-
ished. Unfortunately, there are numerous such long loops in a
firmware. Examples include frequently used library functions
such as memcpy, memset, and strcpy. Since those functions
usually contain long loops, symbolically executing them is
extremely inefficient. Laelaps is able to automatically detect
long loops. If a long loop is detected, the execution is forced
to be transferred to QEMU. To detect long loops, Laelaps
maintains the execution trace based on recently executed
basic blocks and finds the longest repeated cycle. Whenever
the longest repeated cycle is longer than a threshold (say 5),
symbolic execution will be terminated.
4.3 Path Selection Strategy: Context
Preserving Scanning Algorithm
The goal of Laelaps’s symbolic execution is to find the most
promising path and direct QEMU towards this path. Since
we lack the high-level semantic information about data struc-
tures and control flow, it is particularly challenging. We start
with an overview of our path selection strategy – Context
Preserving Scanning Algorithm, or CPSA for short. Then we
interpret a representative SDK code snippet. It intuitively
explains our main search heuristics to prioritize a “right”
branch.
Figure 3 shows how CPSA works in general. There are two
parameters that can be used to adjust the performance and
accuracy of the algorithm. Context_Depth specifies number
6
Forward_Depth=3Context_Depth=2SelectedPathSelectedPath0x4000x4240x4540x50A0x8000x8220x838Device-agnostic Firmware Execution
Anonymous Submission to MobiCom, 2020
if ( result == kStatus_Success ) {
11
12
result = PHY_Write (...) ;
13
if ( result == kStatus_Success ) {
14 /* Check auto negotiation complete . */
15
16
17
18
19
while ( counter --) {
result = PHY_Read (... , & bssReg );
if ( result == kStatus_Success ) {
PHY_Read (... , & ctlReg );
if ((( bssReg & ...) && ( ctlReg & ...)
) {
20 /* Wait a moment for Phy status stable . */
21
for ( timeDelay = 0; timeDelay <
PHY_TIMEOUT_COUNT ; timeDelay ++) {
}
__ASM (" nop ");
}
break ;
}
if (! counter ) {
22 /* Must be here to succeed . */
23
24
25
26
27
28
29
30
31
32
33
34
35 }
Listing 2: Source code of a complex Ethernet driver.
return kStatus_PHY_AutoNegotiateFail ;
}
return result ;
}
}
}
4.3.2 Heuristic #1: Context Preservation. Laelaps steers firmware
execution forward by continuously switching between QEMU
and symbolic execution passes. Each symbolic execution pass
only makes decision based on the current context instead of
a holistic context. Therefore, it cannot make an optimal de-
cision globally. Lines 16-19 in Listing 2 clearly demonstrate
this. In line 16 and line 18, there are two PHY_Read invo-
cations that read a symbolic value to bssReg and ctlReg
respectively. In line 19, these two symbols are used to deter-
mine a branch. If we transfers execution to QEMU after line
16, the condition in line 19 might never be satisfied, because
at that time bssReg is already a concrete value, which might
equal to zero. The root reason is that we concretize bssReg
too early and it later affects the subsequent path to be taken.
We call this “over-constraining”.
Inspired by speculative symbolic execution [45], we do not
invoke the constraint solver when encountering bssReg. In-
stead, our symbolic execution advances along the path and
solves bssReg together with ctlReg in line 19. More gener-
ally, we allow analysts to configure a parameter Context_Depth,
which is the specified number of branches the symbolic en-
gine has to accumulate before invoking the constraint solver.
In this way, we preserve the possibilities of future paths and
thus yielding more accurate results. The downside is that
a larger Context_Depth leads more paths to be explored in
symbolic execution, and so it consumes more time. There-
fore, Context_Depth serves as an adjustable parameter for
a trade-off between fidelity and performance.
7
4.3.3 Heuristic #2: Avoiding Infinite Loop. Symbolic execu-