-\> select count(username) from user where shell=\"/bin/bash\";
-\> end
-\> //
mysql\> delimiter ;
mysql\> call p1();
+\-\-\-\-\-\-\-\-\-\--+
\| shell \|
+\-\-\-\-\-\-\-\-\-\--+
\| /bin/bash \|
\| /bin/bash \|
+\-\-\-\-\-\-\-\-\-\--+
2 rows in set (0.01 sec)
Query OK, 0 rows affected (0.01 sec)
4 案例4：存储过程参数的使用
4.1 问题
创建名为p2的存储过程
可以接收用户输入shell的名字
统计user表中用户输入shell名字的个数
4.2 步骤
实现此案例需要按照如下步骤进行。
步骤一：存储过程参数的使用
1）参数类型
MySQL存储过程，共有三种参数类型IN,OUT,INOUT
Create procedure 名称(
类型 参数名 数据类型,
类型 参数名 数据类型
）
in 输入参数
传递值给存储过程，必须在调用存储过程时指定，在存储过程中修改该参数的值不能；默认类型是in
out 输出参数 该值可在存储过程内部被改变，并可返回
inout 输入/输出参数 调用时指定，并且可被改变和返回
mysql\> delimiter //
mysql\> create procedure say2(in username char(10))
-\> begin
-\> select username;
-\> select \* from user where username=username;
-\> end
-\> //
Query OK, 0 rows affected (0.00 sec)
mysql\> delimiter ;
mysql\> call say2(\"tom\");
2）创建名为p2的存储过程，可以接收用户输入shell的名字，统计user表中用户输入shell名字的个数
mysql\> delimiter //
mysql\> create procedure p2(out number int)
-\> begin
-\> select count(username) into \@number from user where
shell!=\"/bin/bash\";
-\> select \@number;
-\> end
-\> //
Query OK, 0 rows affected (0.01 sec)
mysql\> delimiter ;
mysql\> call p2(@number);
+\-\-\-\-\-\-\-\--+
\| \@number \|
+\-\-\-\-\-\-\-\--+
\| 38 \|
+\-\-\-\-\-\-\-\--+
1 row in set (0.00 sec)
Query OK, 0 rows affected (0.00 sec)
5 案例5：使用循环结构
5.1 问题
定义名称为p3的存储过程
用户可以自定义显示user表记录的行数
若调用时用户没有输入行数，默认显示第1条记录
5.2 步骤
实现此案例需要按照如下步骤进行。
步骤一：算数运算
1）算数运算符号，如图-1所示：
图-1
mysql\> set \@z=1+2;select \@z;
Query OK, 0 rows affected (0.00 sec)
+\-\-\-\-\--+
\| \@z \|
+\-\-\-\-\--+
\| 3 \|
+\-\-\-\-\--+
1 row in set (0.00 sec)
mysql\> set \@x=1; set \@y=2;set \@z=@x\*@y; select \@z;
Query OK, 0 rows affected (0.00 sec)
Query OK, 0 rows affected (0.00 sec)
Query OK, 0 rows affected (0.00 sec)
+\-\-\-\-\--+
\| \@z \|
+\-\-\-\-\--+
\| 2 \|
+\-\-\-\-\--+
1 row in set (0.00 sec)
mysql\> set \@x=1; set \@y=2;set \@z=@x-@y; select \@z;
Query OK, 0 rows affected (0.00 sec)
Query OK, 0 rows affected (0.00 sec)
Query OK, 0 rows affected (0.00 sec)
+\-\-\-\-\--+
\| \@z \|
+\-\-\-\-\--+
\| -1 \|
+\-\-\-\-\--+
1 row in set (0.00 sec)
mysql\> set \@x=1; set \@y=2;set \@z=@x/@y; select \@z;
Query OK, 0 rows affected (0.00 sec)
Query OK, 0 rows affected (0.00 sec)
Query OK, 0 rows affected (0.00 sec)
+\-\-\-\-\-\-\-\-\-\-\-\--+
\| \@z \|
+\-\-\-\-\-\-\-\-\-\-\-\--+
\| 0.500000000 \|
+\-\-\-\-\-\-\-\-\-\-\-\--+
1 row in set (0.00 sec)
declare调用变量不需要@其他都需要
调用变量时，有@符号的变量 如@x：调用的是用户自定义变量
没有@符号的变量 如x：调用的是存储过程的参数变量
mysql\> delimiter //
mysql\> create procedure say5(in bash char(20), in nologin char(25), out
x int , out y int)
-\> begin
-\> declare z int ;
-\> set z=0;
-\> select count(username) into \@x from user where shell=bash;
-\> select count(username) into \@y from user where shell=nologin;
-\> set z=@x+@y;
-\> select z;
-\> end
-\> //
Query OK, 0 rows affected (0.00 sec)
mysql\> delimiter ;
mysql\> call say5(\"/bin/bash\",\"/sbin/nologin\",@x,@y);
+\-\-\-\-\--+
\| z \|
+\-\-\-\-\--+
\| 36 \|
+\-\-\-\-\--+
1 row in set (0.00 sec)
Query OK, 0 rows affected (0.00 sec)
2）条件判断，数值的比较如图-2所示：
图-2
逻辑比较、范围、空、非空、模糊、正则，如图-3所示：
图-3
顺序结构（if判断）当"条件成立"时执行命令序列,否则，不执行任何操作
mysql\> delimiter //
mysql\> create procedure say6(in x int(1) )
-\> begin
-\> if x \ select \* from user where id \ end if;
-\> end
-\> //
Query OK, 0 rows affected (0.01 sec)
mysql\> delimiter ;
mysql\> call say6(1); //条件判断成立，等于1是否成立
+\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\--+\-\-\-\-\--+\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\--+
\| id \| username \| password \| uid \| gid \| comment \| homedir \|
shell \|
+\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\--+\-\-\-\-\--+\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\--+
\| 1 \| root \| x \| 0 \| 0 \| root \| /root \| /bin/bash \|
+\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\--+\-\-\-\-\--+\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\--+
1 row in set (0.00 sec)
Query OK, 0 rows affected (0.00 sec)
mysql\> call say6(2);
+\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\--+\-\-\-\-\--+\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| id \| username \| password \| uid \| gid \| comment \| homedir \|
shell \|
+\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\--+\-\-\-\-\--+\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| 1 \| root \| x \| 0 \| 0 \| root \| /root \| /bin/bash \|
\| 2 \| bin \| x \| 1 \| 1 \| bin \| /bin \| /sbin/nologin \|
+\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\--+\-\-\-\-\--+\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
2 rows in set (0.00 sec)
Query OK, 0 rows affected (0.00 sec)
3）定义名称为p3的存储过程，用户可以自定义显示user表记录的行数，若调用时用户没有输入行数，默认显示第1条记录
mysql\> delimiter //
mysql\> create procedure p3(in linenum char(10) )
-\> begin
-\> if linenum is null then
-\> set \@linenum=1;
-\> select \* from user where id=@linenum;
-\> else
-\> select linenum;
-\> select \* from user where id=linenum;
-\> end if;
-\> end
-\> //
Query OK, 0 rows affected (0.00 sec)
mysql\> delimiter ;
mysql\> call p3(null); //不输入查看的行数
+\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\--+\-\-\-\-\--+\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\--+
\| id \| username \| password \| uid \| gid \| comment \| homedir \|
shell \|
+\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\--+\-\-\-\-\--+\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\--+
\| 1 \| root \| x \| 0 \| 0 \| root \| /root \| /bin/bash \|
+\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\--+\-\-\-\-\--+\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\--+
1 row in set (0.00 sec)
Query OK, 0 rows affected (0.00 sec)
mysql\> call p3(3); //输入查看的行数
+\-\-\-\-\-\-\-\--+
\| linenum \|
+\-\-\-\-\-\-\-\--+
\| 3 \|
+\-\-\-\-\-\-\-\--+
1 row in set (0.00 sec)
+\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\--+\-\-\-\-\--+\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| id \| username \| password \| uid \| gid \| comment \| homedir \|
shell \|
+\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\--+\-\-\-\-\--+\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| 3 \| daemon \| x \| 2 \| 2 \| daemon \| /sbin \| /sbin/nologin \|
+\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\--+\-\-\-\-\--+\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
1 row in set (0.00 sec)
Query OK, 0 rows affected (0.00 sec)
案例5(课堂)
mysql\> create procedure p3(in x int)
-\> begin
-\> if x is null then
-\> select \* from db9.user where id=1;
-\> else
-\> select \* from db9.user where id\ end if;
-\> end
-\> //
Query OK, 0 rows affected (0.00 sec)
mysql\> set \@w=10;
-\> \^C
mysql\> delimiter ;
mysql\> set \@w=10;
Query OK, 0 rows affected (0.00 sec)
# NSD DBA2 DAY05
# 一数据分片(Mycat)
## 1.1数据分片介绍
分库分表
将存放在一个数据库(主机)中的数据,按照特定方式进行拆分,分散存放到多个数据库主机中,以达到分散单台设备负载的效果
垂直分隔(纵向切分)
-   将单个表,拆分成多个表,分散到不同的数据库
-   将单个数据库的多个表进行分类,按业务类别分散到不同的数据库上
水平分隔(横向切分)
-   按照表中某个字段的某种规则,把表中的许多记录按行切分,分散到多个数据库中
## 1.2配置数据分片服务器
### 1.2.1Mycat软件介绍
基于java的分布式数据库系统中间层,为高并发环境的分布式访问提供解决方案,使用需要JDK环境
-   支持JDBC形式连接
-   支持MYSQL OREACLE SQLSERVER MONGODB等
-   提供数据读写分离服务
-   可以实现数据库服务器的高可用
-   提供数据分片服务
-   基于阿里巴巴cobar进行研发的开源软件
-   适合数据大量写入数据的存储需求(大量查询需求不合适)
分片规则
1枚举法
2固定分片
3范围约定
4求模法
5日期列分区法
6通配取模
7 ASCII码求模通配
8编程指定