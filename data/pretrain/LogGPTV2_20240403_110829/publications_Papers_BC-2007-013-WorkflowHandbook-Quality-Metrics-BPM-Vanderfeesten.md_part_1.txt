### Quality Metrics for Business Process Models

**Authors:**
- Irene Vanderfeesten<sup>1</sup>
- Jorge Cardoso<sup>2</sup>
- Jan Mendling<sup>3</sup>
- Hajo A. Reijers<sup>1</sup>
- Wil van der Aalst<sup>1</sup>

**Affiliations:**
1. Technische Universiteit Eindhoven, The Netherlands
2. University of Madeira, Portugal
3. Vienna University of Economics and Business, Austria

### Summary

In software engineering, quality metrics have proven to be essential for good programming practices and software designs. Designs guided by these metrics (e.g., coupling, cohesion, complexity, modularity, and size) tend to be less error-prone, easier to understand, maintain, and manage, and more efficient. Several researchers have identified similarities between software programs and business process designs, recognizing the potential of quality metrics in business process management (Cardoso et al., 2006; Gruhn & Laue, 2006; Latva-Koivisto, 2001). This chapter explores the importance of quality metrics in business process modeling, providing a classification and overview of current business process metrics, and demonstrating their implementation using the ProM tool. ProM is a freely available analysis tool that supports process models implemented in over eight languages.

### Introduction

Innovation often relies on the transfer of knowledge and understanding from one discipline to another (Kostoff, 1999). Workflow management, for example, is a technology that originated from the application of process models from manufacturing to administrative work. In this chapter, we explore further opportunities for knowledge transfer to the field of process modeling and workflow management, particularly from software engineering.

Since the mid-1960s, software engineers have used metrics to characterize the properties of their code. These metrics, applicable to various programming languages such as C++, Java, and FORTRAN, provide a robust mechanism for assessing the quality of software design. Given the strong analogy between software programs and business processes (Reijers & Vanderfeesten, 2004; Guceglioglu & Demiros, 2005), we believe that software metrics like coupling, cohesion, and complexity can be adapted to analyze and study business process characteristics.

A business process model, whether it is represented in BPEL, EPC, BPMN, or Petri Nets, shares many similarities with traditional software programs. Both are composed of modular structures: software programs consist of modules or functions (activities) that process inputs and produce outputs, while business process models consist of activities, each containing smaller steps (operations) on elementary data elements (see Table 1). Additionally, just as interactions between modules and functions in software are precisely defined, the order of activity execution in a process model is predefined using logic operators such as sequence, splits, and joins.

| **Software Program** | **Business Process** |
|---------------------|----------------------|
| Module/Class        | Activity             |
| Method/Function     | Operation            |
| Variable/Constant   | Data Element         |

In this chapter, we discuss the transfer and adaptation of quality metrics from software engineering to business processes. We begin with an overview of software engineering metrics, followed by a summary of the current state of business process metrics, using a widely accepted classification from software engineering. Finally, we present practical applications of these business process metrics and offer conclusions and future perspectives.

### Metrics in the Software Engineering Domain

In software engineering, a wide range of quality metrics has been developed to ensure better-structured program designs. Key advantages of a well-structured design, as noted by Conte et al. (1986), include:

- **Easier Understanding:** The overall program logic is more comprehensible for both programmers and users.
- **Simplified Maintenance:** Different functions are performed by different modules, making maintenance easier.

According to Conte et al. (1986), Shepperd (1993), and Troy & Zweben (1981), the quality of a design is influenced by five principles:

1. **Coupling:**
   - **Definition:** Measures the number of interconnections among modules.
   - **Impact:** Programs with high coupling are hypothesized to contain more errors than those with lower coupling.

2. **Cohesion:**
   - **Definition:** Measures the relationships within a module.
   - **Impact:** Programs with low cohesion are hypothesized to contain more errors than those with higher cohesion.

3. **Complexity:**
   - **Definition:** A design should be as simple as possible. Complexity increases with the number of control constructs and the number of modules.
   - **Impact:** Higher complexity is associated with more errors.

4. **Modularity:**
   - **Definition:** The degree of modularization affects design quality. Over-modularization and under-modularization are both undesirable.
   - **Impact:** Low modularity is generally related to more errors.

5. **Size:**
   - **Definition:** Large modules or deep nesting are considered undesirable.
   - **Impact:** Larger programs are hypothesized to contain more errors than smaller ones.

Coupling and cohesion are generally considered the most important metrics for software quality, although their relative importance is debated. For instance, Shepperd (1993) and Troy & Zweben (1981) suggest that coupling is the most influential, while Myers (1978) considers cohesion and coupling equally important. Complexity and size are also recognized as significant quality metrics (Troy & Zweben, 1981).

Empirical studies have provided evidence that quality metrics improve software design. Bieman and Kang (1998, 1996, 1999) demonstrated how cohesion metrics can be used to restructure software designs. Selby & Basili (1991) found that low coupling and high cohesion are desirable, with routines having low coupling/strength ratios containing significantly more errors. Card et al. (1986) examined Fortran modules and found that 50% of high-cohesion modules were fault-free, compared to only 18% of low-cohesion modules. Shen et al. (1985) discovered that simple metrics like size and structural complexity can help identify modules likely to contain errors.

### Quality Metrics in the Workflow Domain

Due to the similarities between software programs and workflow processes, the application of similar quality metrics to the workflow domain is worth investigating. Our literature review on business process metrics revealed that, despite extensive research on software engineering metrics, there is limited research on business process metrics. Some researchers suggest using software metrics to evaluate business process designs (Baresi et al., 1999), but the number of publications on concrete metrics and applications in the business process domain is still small and relatively recent. This section summarizes the existing "state-of-the-art" in business process metrics using the same classification as in software engineering.

#### Coupling

Coupling measures the number of interconnections among the modules of the model. It is closely related to degree and density metrics in network analysis (Brandes & Erlebach, 2005). For graph-based notations, the average degree (coefficient of connectivity) refers to the average number of connections a node has with other nodes. Density relates the number of available connections to the maximum possible connections for a given number of nodes. Mendling (2006) used density as a predictor for errors in business process models, with mixed results. While there was a connection between density and errors, the explanatory power was limited, possibly because density is difficult to compare across models of different sizes.

Reijers and Vanderfeesten (2004) developed a coupling metric based on the overlap of data elements for each pair of activities, using a Product Data Model (PDM). Two activities are 'coupled' if they share one or more common data elements. The coupling value is calculated by selecting activities pairwise, counting the number of 'coupled' pairs, and determining the mean. The outcome ranges from 0 to 1. This data-oriented coupling metric is complemented by a cohesion metric, described in the next section.

However, these coupling metrics do not yet account for the complexity of connections. Our current research includes a weighted coupling metric with different weights for XOR, OR, and AND connectors.

#### Cohesion

Cohesion measures the coherence within the parts of the model. Reijers and Vanderfeesten (2004) developed a cohesion metric for workflow processes, focusing on the coherence within the activities of the process model. Similar to their coupling metric, this cohesion metric takes a data-oriented view. For each activity, the total cohesion is calculated by multiplying the information cohesion and the relation cohesion. The cohesion value for the whole process is determined by taking the mean of all activity cohesion values, ranging from 0 to 1. The combination of these two metrics, as proposed by Selby & Basili (1991), provides a coupling-cohesion ratio that helps business process designers select the best (low coupling, high cohesion) design among alternatives (Reijers & Vanderfeesten, 2004).

#### Complexity

Complexity measures the simplicity and understandability of a design. In this context, complexity is related to the number of control constructs and the number of modules. A simpler design is generally easier to understand and maintain, and is less prone to errors. Future research will explore more detailed metrics and their applications in business process modeling.