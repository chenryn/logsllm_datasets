### Custom Count for Data Synchronization
You can specify a custom count, typically equal to the number of CPU cores, to fully utilize system resources. This is configured using the `dataSyncThreadCount` option.

**Configuration:**
- **Option:** `dataSyncThreadCount=n`
- **Default Value:** 0

### Target Database Query Timeout
The `targetDBQueryTimeout` option controls the timeout interval (in milliseconds) before an attempt by the publication server to apply a transaction set on a target database is aborted by the database server. This typically occurs due to a lock acquired by another application on one or more of the target tables.

**Default Configuration:**
- **Default Value:** 600,000 milliseconds (10 minutes)

**Behavior:**
- **Higher Values:** Allow a longer wait time before the transaction is aborted.
- **Value 0:** Disables the `targetDBQueryTimeout` option, and the timeout interval is controlled by the `statement_timeout` configuration parameter in the Postgres database server.

**Impact:**
- A higher value of `targetDBQueryTimeout` delays the processing of subsequent transaction sets on other target databases. If a transaction set is blocked, the next transaction set cannot be loaded until:
  1. The lock is released, and the blocked transaction set is applied to completion.
  2. The `targetDBQueryTimeout` interval is exceeded.

**Example:**
- In a 3-node cluster with ten pending transaction sets, assume transaction set 1 is loaded and begins replicating to nodes 2 and 3.
- Another application acquires a lock on one or more tables in node 2, putting the updates to these tables in a wait state.
- Replication of transaction set 1 can run to completion on node 3, but if the wait time exceeds the `targetDBQueryTimeout` interval, the database server cancels transaction set 1 on node 2.
- Transaction set 2 can now be loaded and run against node 3, but execution against node 2 is skipped since transaction sets must be applied in order and transaction set 1 was not successfully applied to node 2.
- Transaction sets 3 through 10 are loaded and applied in order against node 3, but skipped for node 2.
- In the next synchronization replication, transaction set 2 is tried again on node 2. If the lock has been released and the transaction set is applied successfully, the remaining transaction sets 3 through 10 are applied to node 2.
- Synchronization replication continues with any new transaction sets.

**Configuration:**
- **Option:** `targetDBQueryTimeout=n`
- **Default Value:** 600000

### Other Synchronization Configuration Options
The following are additional configuration options affecting synchronization replication:

#### Batch Size for Synchronization
- **Option:** `syncBatchSize`
- **Description:** Controls the number of statements in a synchronization replication JDBC batch.
- **Default Value:** 100

#### Fetch Size for Synchronization
- **Option:** `syncFetchSize`
- **Description:** Controls how many rows are fetched from the publication database in one network round-trip.
- **Example:** If there are 1000 pending row changes, the default fetch size requires 5 database round-trips. Using a fetch size of 500 retrieves all changes in 2 round trips.
- **Fine-Tuning:** Adjust the fetch size to match the average data volume consumed by rows fetched in one round trip.
- **Default Value:** 200

#### Maximum Transaction Set Size
- **Option:** `txSetMaxSize`
- **Description:** Defines the maximum number of transactional rows that can be grouped in a single transaction set.
- **Behavior:** A higher value can boost performance, but a very large value might result in an out-of-memory error. Adjust the value based on the average row size.
- **Default Value:** 10000

#### Performance Statistics
- **Option:** `enablePerformanceStats`
- **Description:** Enables performance testing and analysis of replication statistics. When enabled, the publication server creates additional triggers on the publication tables in each master node.
- **Behavior:** Should be disabled in a production environment to avoid performance overhead.
- **Default Value:** false

### Multi-Master Replication Operation
This chapter describes how to configure and run xDB Replication Server for multi-master replication systems. The xDB Replication Console graphical user interface is used to illustrate the steps and examples, but the same steps can be performed from the operating system command line using the xDB Replication Server Command Line Interface (CLI).

#### Prerequisite Steps
Certain steps must be taken to prepare the host environments and the database servers used as master nodes before building a multi-master replication system.

##### Setting Heap Memory Size for the Publication Server
- **Description:** Replication speed and efficiency can be affected by the heap memory size set for the publication server.
- **Configuration:** The xDB Startup Configuration file sets a parameter controlling the minimum and maximum heap size allocated for the publication server. See Section 5.1.1 for guidelines and information on setting this parameter.

##### Enabling Synchronization Replication with the Log-Based Method
- **Applicability:** Applies to Postgres database servers version 9.4 and later.
- **Required Configuration Parameters:**
  - `wal_level`: Set to `logical`.
  - `max_wal_senders`: Specifies the maximum number of concurrent connections (WAL sender processes). Set at minimum to the number of MMR master nodes plus any SMR publication databases using the log-based method.
  - `max_replication_slots`: Specifies the maximum number of replication slots. For MMR systems, the minimum is the total number of master nodes multiplied by the number of master nodes on the database server. Add the number of SMR publication databases if applicable.
  - `track_commit_timestamp`: Set to `on` (only for Postgres 9.5).
- **Postgres Configuration File:** `postgresql.conf`
- **Additional Configuration:** The `pg_hba.conf` file must include entries for each publication database user of master nodes using the log-based method.

##### Preparing the Master Definition Node
- **Database User Requirements:**
  - Can connect to the master definition node.
  - Has superuser privileges.
  - Can modify system catalog tables to disable foreign key constraints.
- **Example:**
  - Database user name: `pubuser`
  - Tables: `dept`, `emp`, `jobhist` in schema `edb`
  - Database name: `edb`

##### Preparing Additional Master Nodes
- **Database User Requirements:**
  - Can connect to the master node.
  - Has superuser privileges.
  - Can modify system catalog tables to disable foreign key constraints.
  - Use the same database user name as the master definition node unless `skipTablePrivileges` is set to `true`.
- **Publication Table Creation:**
  - Allow the publication server to create the table definitions.
  - Define the publication tables manually, ensuring they are identical to those in the master definition node.
- **Example:**
  - Database user name: `mmruser`
  - Database name: `mmrnode`

##### Verifying Host Accessibility
- **Network Communication:** Each computer hosting components of the replication system must be able to communicate with the others.
- **Firewalls and Ports:** See Section 5.1.6.1.
- **Network IP Addresses:** See Section 5.1.6.2.
- **Host-Based Authentication:** Modify the `pg_hba.conf` file on each Postgres database server to allow access to the databases.
- **Example Entries:**
  - `host edb pubuser 192.168.2.22/32 md5`
  - `host mmrnode mmruser 192.168.2.22/32 md5`
- **Log-Based Method:** Additional entries with `DATABASE` set to `replication` for the user and IP address.

For more detailed information, refer to the relevant sections in the EDB Postgres Replication Server Userâ€™s Guide.