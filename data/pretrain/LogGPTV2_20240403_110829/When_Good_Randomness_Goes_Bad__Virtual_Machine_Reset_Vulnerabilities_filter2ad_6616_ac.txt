tions for key exchange, randomized signing, and encryption
admit damaging attacks given bad randomness, even when
good long-lived key material is used.
We propose a general framework for hedging against
RNG failures. Our method modiﬁes routine cryptographic
operations so that they can defend themselves against vari-
ous forms of bad randomness. By focusing on the cryptog-
raphy, our framework is application- and VMM-agnostic. It
protects against many different kinds of bad randomness. It
is simple to implement and deploy.
Hedging is not a replacement for good RNGs. In partic-
ular, for many cryptographic tasks one needs randomness
to achieve the most desirable security levels (e.g., public-
key encryption). In these cases, hedging provides graceful
degradation of achieved (provable) security.
Hedged cryptography. Our framework is the following. A
hedging function Hedge is a deterministic algorithm with
inputs being an arbitrary-sized bit string R and an arbi-
trary number p of associated data bit strings (d1, . . . , dp) ∈
({0, 1}∗)p. (In implementations, we will actually have to
cap the maximum length of inputs treated by Hedge to,
e.g., 264. We omit this detail throughout for simplicity.) We
write d to mean the vector (d1, . . . , dp). The algorithm out-
puts a bit string of size |R| bits, where |R| is the length of R
in bits. We write Hedge(R, d) = Hedge(R, d1, . . . , dp) to
denote running the algorithm. A hedging function handles
variable-length keys, inputs, and outputs.
Let Op be a randomized cryptographic operation tak-
ing inputs i1, i2, . . . , ik and using an RNG-supplied bit
string R. Denote execution of it by Op(i1, i2, . . . , ik ; R).
We hedge by replacing calls
Op(i1, i2, . . . , ik ; R)
with
Op(i1, i2, . . . , ik ; Hedge(R, hdi))
where d = (OpID, i1, i2, . . . , ik). That is, we apply Hedge
to the RNG-supplied randomness and the inputs to the op-
eration become the associated data. We also include OpID,
which denotes some unique identiﬁer for the operation, to
provide domain separation between uses of Hedge with dis-
tinct operations. Note that we will omit explicit mention
of OpID later for brevity, but it is crucial to use within im-
plementations. The output of Hedge is used as the “ran-
domness” for the operation. Note that functionality is not
changed since randomized cryptographic operations must
work for any R.
The idea of hedging originates with work by Bellare
et al. where they treat the speciﬁc case of public-key en-
cryption [19]. One of their constructions is a special case
of ours, where Hedge is replaced with a cryptographic
hash function and Op is speciﬁcally public-key encryption.
Yilek [52] treats the special case of randomness reuse at-
tacks against public-key encryption. His construction is a
special case of ours where Hedge is just a PRF and Op is
public-key encryption. These two approaches achieve dif-
Primitive
Repeat Exposed
Predictable Chosen
Public-key encryption
Symmetric encryption
Digital signatures
⋆
⋆
UF
⋄
⋆
UF
⋄
⋆
UF
⋄
⋆
UF
Figure 3. Summary of hedged primitive’s provable security in the face of Repeat, Exposed, Pre(cid:173)
dictable, or adversarially Chosen randomness. Symbol ⋆ means no partial information about plain(cid:173)
texts leaked except plaintext equality. Symbol ⋄ means no partial information about plaintexts leaked
assuming plaintexts have high min(cid:173)entropy (unpredictable to attacker). Symbol UF means no attacker
can forge an honest party’s signature.
ferent (and orthogonal) security guarantees for public-key
encryption, as discussed further in the next section. Sufﬁce
to say, we simultaneously want both guarantees. Moreover,
we want the same hedging approach to work for other cryp-
tographic primitives. We can achieve this by instantiating
Hedge with an object that is good both as a hash function
and as a PRF.
We suggest the widely-available HMAC algorithm [20],
built from a sufﬁciently strong underlying hash function,
such as SHA-256, SHA-512 or the upcoming SHA-3.
HMAC takes as input an arbitrarily-long key K and
message M and outputs a string of n bits (e.g., n =
256 for SHA-256). We can use HMAC to instantiate
Hedge(R, d1, . . . , dk) for some number k of associated data
strings as follows. Let p be the smallest integer such that
np ≥ |R|. Compute R′
i = HMAC(R, hd1, . . . , dki || i) for
1 ≤ i ≤ p and then output the ﬁrst |R| bits of
R′
1 || · · · || R′
p .
Here hd1, . . . , dki is some unambiguous encoding of the as-
sociated data and || represents concatenation of bit strings.
In words we apply HMAC several times, using the RNG-
supplied randomness R as the key and the associated data
combined with a counter as the message. The counter
allows us to produce p times the output size of HMAC
(e.g. 512p if using SHA512 within HMAC). We then
run Op using the appropriate number of bits of HMAC out-
put.
Discussion. As mentioned above, functionality is not hin-
dered. That means that hedging a cryptographic operation
has no impact on other, related operations (e.g., decryption
need not be changed when hedging an encryption routine).
This crucially means that hedging is legacy-compatible: any
party can use it and no other parties need know.
We point out that the framework can be just as easily
applied to long-lived key generation (in addition to routine
cryptographic operations). However here one will not, gen-
erally, achieve signiﬁcant security improvement: there are
usually no other inputs to such routines beyond the random-
ness used. Nevertheless in cases where there are (e.g. the
identity of a party generating a public key, secret key pair)
it might prove beneﬁcial for some kinds of randomness fail-
ures. Note that long-lived key generation is a rare operation
and ensuring it access to fresh randomness might therefore
be easier than more routine operations.
Lastly, the focus of this work is cryptographic consumers
of randomness. However there are other security-critical
uses of randomness and hedging might prove useful in these
as well.
6. Security of Hedging
In this section we discuss the security that hedging pro-
vides. First, we present some general security properties of
hedging, namely that the hedge function does not degrade
the quality of good randomness given to an underlying oper-
ation. This is important because it provides some argument
that hedging won’t hurt most security properties. We will
then discuss hedging of four important primitives: public-
key encryption (PKE), symmetric encryption (SE), digital
signatures (DS), and key exchange. For all these primitives,
many in-use schemes fail completely to provide security in
each of the randomness failure models.
Figure 3 provides a summary of the security provably
achieved by hedging public-key encryption, symmetric en-
cryption and digital signing. (This is assuming the underly-
ing primitive is secure when randomness is good.) Brieﬂy,
hedged PKE will not leak anything but plaintext equality
when randomness is repeated. If randomness is adversari-
ally chosen, predictable, or exposed, then hedged PKE will
not leak any partial information assuming unpredictable,
public-key independent messages. Hedged SE leaks noth-
ing but plaintext equality even against adversarially-chosen
randomness. Hedging essentially removes the need for ran-
domness in digital signing — the traditional notion of un-
forgeability is achieved. All these results, including the
more complex situation for hedged key exchange, are dis-
cussed in further detail in the remainder of this section.
Formalisms and notation. We formalize our security no-
tions using code-based games [25]. In this framework, one
models security as a game played with an adversary. A
game (see Figure 5 for an example) has an Initialize proce-
dure, procedures to respond to adversary oracle queries, and
a Finalize procedure. First, Initialize executes and its out-
puts are given as inputs to an adversary A. Next A executes
and can adaptively make queries to procedures (other than
Initialize and Finalize), receiving the computed responses.
When A terminates with some output, this becomes the in-
put to Finalize. We denote running a game G with adver-
sary A as GA and let GA ⇒ w be the event (in the probabil-
ity space induced by GA) that the output of game G, when
run with adversary A, is w. An adversary’s run time is the
time to run GA, meaning particularly that we charge the ad-
versary for its queries. If working within the random oracle
model (i.e. assuming Hedge behaves like an ideal hash func-
tion), then the game has one more procedure implementing
the random oracle. This procedure, usually denoted H, re-
turns for each (distinct) message queried a randomly chosen
value.
6.1. General Security Properties of Hedging
Proving the security improvements achieved by hedging
requires focusing on individual primitives, as we do in the
following sections. First however, we discuss general se-
curity properties needed from Hedge and (informally) how
they lead to security gains. To start, we point out that one
desires that the output of Hedge is indistinguishable from
true randomness whenever one of the following holds:
(1) fresh randomness R is used;
(2) repeated R is used, but all pairs of associated data used
with R are distinct; or
(3) adversarially chosen R is used, but some portion of the
associated data is unpredictable to and hidden from the
adversary (e.g. a secret key or large plaintext).
Informally, property (1) holds under the very mild assump-
tion that Hedge is a good pseudorandom function (keyed
by R) for a very small number of queries. Property (2)
should hold under the assumption that Hedge is a good PRF
for many queries and property (3) should hold if Hedge is an
ideal hash function (a random oracle). We therefore discuss
how Hedge meets the preconditions just described (being a
weak PRF, a PRF, and an ideal hash).
We ﬁrst show that Hedge is a one-time secure PRF. For-
mally, a variable-key-length one-time PRF (ot-prf) adver-
sary A takes no input, can query a pair r, d where r > 0
is a number and d is a vector of bit strings to an ora-
cle, and outputs a bit. Let H be a hedging function (as
per Section 5). Game OT-PRFH is deﬁned in Figure 4.
The advantage of ot-prf adversary A against a keyed func-
tion H is Advot-prf
H ⇒ true(cid:3) −
Pr(cid:2) OT-PRFA
Let H be a variable-key-length (VKL) function with out-
put length n. This means H is a deterministic algorithm
(A) = Pr(cid:2) OT-PRFA
H ⇒ false(cid:3).
H
Game OT-PRFH
Game PRFH,k
Initialize:
b ←$ {0, 1}
Func(r, d):
y0 ←$ {0, 1}r
y1 ← H(y0, d)
Return yb
Finalize(b′):
Return (b = b′)
Initialize:
K ←$ {0, 1}k
b ←$ {0, 1}
Func(d):
y1 ← H(K, d)
y0 ←$ {0, 1}|y1|
Return yb
Finalize(b′):
Return (b = b′)
Figure 4. One(cid:173)time PRF and PRF security
games for variable(cid:173)key(cid:173)length function H.
that takes a key K of some arbitrary length k > 0 and
an arbitrary-sized-input and outputs a string of length n.
HMAC is an example of a VKL function. Game PRF
deﬁnes normal PRF security, see Figure 4. The prf ad-
vantage of adversary B against H is Advprf
H (B) =
Pr(cid:2) PRFA
H,k ⇒ true(cid:3) − Pr(cid:2) PRFA
H,k ⇒ false(cid:3).
It is well-known that HMAC is a secure PRF [18, 20] as-
suming the underlying hash function’s compression func-
tion has suitable PRF-like security properties.
(Techni-
cally, one needs resistance to a mild form of related-key at-
tack [22] in addition to the standard PRF security.) Namely,
one can use the results of [18, 20] to derive bounds for
Advprf
HMAC,k(B) for any k. A simple hybrid argument es-
tablishes the following theorem, which is stated for an arbi-
trary VKL function F .
Theorem 6.1 Let F be a VKL function with output
length n. Let Hedge be the hedging function built from
F , as in Section 5. Let A be a ot-prf adversary run-
ning in time t, making at most q queries specifying
lengths r1, r2, . . . , rq. Then there exists q prf adversaries Bi
such that
Advot-prf
Hedge (A) ≤
q
X
i=1
Advprf
F,ri (Bi)
where Bi runs in time that of A and makes ⌊(ri + n − 1)/n⌋
queries. (cid:3)
We can see that the security required from the VKL func-
tion, e.g., HMAC is mild, because m = ⌊(ri + n − 1)/n⌋ is
generally very small. For example when one uses SHA-
256 and ri = 1024, we have that HMAC must resist
merely m = 4 queries for the same key. Finally, we point
out that this reasoning doesn’t hold if ri is too small. How-
ever, for the primitives that we suggest hedging, ri ≥ 128.
Finally, security relies on choosing n sufﬁciently large (e.g.,
if using SHA-256, SHA-512 in HMAC).
When Hedge is used repeatedly with the same random-
ness, security as a one-time PRF no longer sufﬁces. Here
we require it to be a secure PRF, but this provably holds
under the assumption that HMAC is a secure PRF for an
appropriate number of queries.
Finally, and as mentioned above, we also require that
Hedge enjoys security properties when randomness is
known (or even chosen) by an adversary, meaning in par-
ticular that the randomness input can no longer serve as a
secret key (allowing us to use the PRF security of HMAC).
In these contexts we’ll appeal to modeling Hedge as ideal,
or in cryptographic parlance, a random oracle. This means
that it maps every input to an output randomly chosen from
the space of all outputs for that length. Note that this re-
quirement excludes many other potential instantiations (in-
stead of HMAC), such as most block-cipher-based [15] or
universal-hashing-based [50] MACs, which are not suitable
for modeling as random oracles.
6.2. Public(cid:173)key Encryption
Public-key encryption (PKE) schemes are used to pro-
vide message privacy, and they have the beneﬁt of asym-
metry: only the recipient’s public key value is needed
to encrypt a message. Existing PKE schemes fail spec-
tacularly in the face of randomness failures. For exam-
ple, all hybrid encryption schemes (those used most fre-
quently in practice) allow plaintext recovery given pre-
dictable randomness and some (e.g., those based on CTR-
mode symmetric encryption) allow plaintext recovery given
repeat randomness [19]. Predictable randomness leads to
plaintext recovery for the Goldwasser-Micali scheme [33]
and the El Gamal scheme [30]. Brown gave a plaintext-
recovery attack against OAEP abusing predictable random-
ness [26]. Ouaﬁ and Vaudenay gave a plaintext-recovery
attack against Rabin-SAEP [45].
Hedged public-key encryption was recently introduced
by Bellare et al. [19]. They propose to hedge arbitrary
PKE schemes with their Randomized Encrypt with Hash
(REwH1) approach, which is the hedging approach de-
scribed in the last section except explicitly using a normal
hash function H (instead of Hedge).
In [19] it is shown
that if H is modeled as ideal (a random oracle) then the
hedged PKE scheme simultaneously enjoys two security
properties. The ﬁrst is the traditional notion of semantic
security [33]. The second is a new notion they introduce
called indistinguishability under chosen distribution attack
(IND-CDA). Intuitively this latter notion means the scheme
behaves like a secure deterministic encryption scheme —
no partial information about plaintexts is leaked as long as
they are drawn from a sufﬁciently large “space”. That is,
one gets stronger guarantees of security even when random-
ness is adversarially chosen. In subsequent work Yilek [52]
treats the case of reused (but not adversarially chosen) ran-
domness. He suggests a construction which is what we