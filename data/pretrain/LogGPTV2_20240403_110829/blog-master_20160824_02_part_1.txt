## PostgreSQL 最佳实践 - 水平分库(基于plproxy)    
##### [TAG 24](../class/24.md)
### 作者   
digoal    
### 日期  
2016-08-24    
### 标签  
PostgreSQL , plproxy , 水平分库  
----  
## 背景  
我一直以来都比较推荐plproxy这个PostgreSQL代理软件, 因为它小巧灵活好用, 效率高.  
最近朋友邀请我给他们做个分布式的方案, 所以又把plproxy翻出来了.  
本文讲一讲在单节点中如何快速的部署plproxy环境.  
## 环境  
```
PostgreSQL 9.3.1    
plproxy 2.x    
```
### plrpoxy节点  
```
hostaddr 172.16.3.150    
port 1921    
user proxy    
password proxy    
dbname proxy    
schema digoal  // 这个schema名和数据节点一致, 可以省去写plproxy language target的步骤.    
```
### 数据节点  
```
hostaddr 172.16.3.150    
port 1921    
user digoal  // plproxy将使用digoal用户连接数据节点.    
password digoal    
dbname db0    
schema digoal    
dbname db1    
schema digoal    
dbname db2    
schema digoal    
dbname db3    
schema digoal    
```
## 部署plproxy  
首先在http://git.postgresql.org/gitweb/?p=plproxy.git;a=summary下载plproxy.  
```
tar -zxvf plproxy-d703683.tar.gz    
mv plproxy-d703683 /opt/soft_bak/postgresql-9.3.1/contrib    
cd /opt/soft_bak/postgresql-9.3.1/contrib/plproxy-d703683    
[root@db-172-16-3-150 plproxy-d703683]# export PATH=/home/pg93/pgsql9.3.1/bin:$PATH    
[root@db-172-16-3-150 plproxy-d703683]# which pg_config    
[root@db-172-16-3-150 plproxy-d703683]# gmake clean    
[root@db-172-16-3-150 plproxy-d703683]# gmake    
[root@db-172-16-3-150 plproxy-d703683]# gmake install    
```
创建proxy库, proxy角色, 在proxy库创建plproxy extension.  
```
pg93@db-172-16-3-150-> psql    
psql (9.3.1)    
Type "help" for help.    
postgres=# create role proxy nosuperuser login encrypted password 'proxy';    
CREATE ROLE    
digoal=# create database proxy;    
CREATE DATABASE    
digoal=# \c proxy    
You are now connected to database "proxy" as user "postgres".    
proxy=# create extension plproxy;    
CREATE EXTENSION    
```
调整proxy库权限  
```
proxy=# grant all on database proxy to proxy;    
GRANT    
proxy=# \c proxy proxy    
You are now connected to database "proxy" as user "digoal".    
```
创建digoal schema, 目的是和数据节点的schema匹配, 这样的话可以省去在代理函数中写target强行指定schema.  
```
proxy=> create schema digoal;    
CREATE SCHEMA    
```
创建节点数据库  
```
proxy=> \c postgres postgres     
You are now connected to database "postgres" as user "postgres".     
postgres=# create role digoal nosuperuser login encrypted password 'digoal';     
postgres=# create database db0;    
postgres=# create database db1;    
postgres=# create database db2;    
postgres=# create database db3;    
```
调整权限, 赋予给后面将要给user mapping中配置的option user权限.  
```
postgres=# grant all on database db0 to digoal;    
postgres=# grant all on database db1 to digoal;    
postgres=# grant all on database db2 to digoal;    
postgres=# grant all on database db3 to digoal;    
```
使用超级用户在proxy数据库中创建server.  
```
proxy=> \c proxy postgres    
You are now connected to database "proxy" as user "postgres".    
proxy=#     
CREATE SERVER cluster_srv1 FOREIGN DATA WRAPPER plproxy options     
(connection_lifetime '1800',    
p0 'dbname=db0 hostaddr=172.16.3.150 port=1921 application_name=test',    
p1 'dbname=db1 hostaddr=172.16.3.150 port=1921',    
p2 'dbname=db2 hostaddr=172.16.3.150 port=1921',    
p3 'dbname=db3 hostaddr=172.16.3.150 port=1921');    
```
创建server时可以使用libpq中的选项. 例如本例使用了application_name.  
将server权限赋予给proxy用户.  
```
proxy=# grant usage on FOREIGN server cluster_srv1 to proxy;    
GRANT    
```
配置proxy用户的连接cluster_srv1的选项.  
```
proxy=# create user mapping for proxy server cluster_srv1 options (user 'digoal');    
CREATE USER MAPPING    
```
用户proxy连接到cluster_srv1时使用digoal用户连接, 这里不需要配置password, 因为我们将使用trust认证.  
## 修改数据节点的pg_hba.conf  
从proxy节点使用digoal用户连接数据库db0, db1, db2, db3使用trust认证.  
```
vi $PGDATA/pg_hba.conf    
host db0 digoal 172.16.3.150/32 trust    
host db1 digoal 172.16.3.150/32 trust    
host db2 digoal 172.16.3.150/32 trust    
host db3 digoal 172.16.3.150/32 trust    
pg_ctl reload    
```
## 在plproxy节点创建代理函数  
使用超级用户创建plproxy函数, 然后把函数权限赋予给proxy权限.  
```
proxy=# CREATE OR REPLACE FUNCTION digoal.dy(sql text)                      
 RETURNS SETOF record    
 LANGUAGE plproxy    
 STRICT    
AS $function$    
  cluster 'cluster_srv1';    
  run on all;    
$function$;    
proxy=# grant execute on function digoal.dy(text) to proxy;    
GRANT    
```
## 在数据节点创建实体函数  
```
proxy=# \c db0 digoal    
db0=#     
CREATE OR REPLACE FUNCTION digoal.dy(sql text)    
 RETURNS SETOF record    
 LANGUAGE plpgsql    
 STRICT    
AS $function$    
  declare    
  rec record;    
  begin    
    for rec in execute sql loop    
      return next rec;    
    end loop;    
    return;    
  end;    
$function$;    
db0=# \c db1 digoal    
...    
db1=# \c db2 digoal    
...    
db2=# \c db3 digoal    
...    
```
在proxy节点中就可以访问数据节点了。  
例如查询这个动态SQL.  
```
proxy=> select * from digoal.dy('select count(*) from pg_class') as t(i int8);    
  i      
-----    
 293    
 293    
 293    
 293    
(4 rows)    
proxy=> select sum(i) from digoal.dy('select count(*) from pg_class') as t(i int8);    
 sum      
------    
 1172    
(1 row)    
```
## plproxy节点测试  
### 一. 修改foreign server测试, 观察连接将重置.  
前面那个会话不要断开, 在另一个会话中观察proxy发起的连接到数据节点的连接.  
```
postgres=# select * from pg_stat_activity where usename='digoal';    
 datid | datname | pid  | usesysid | usename | application_name | client_addr  | client_hostname | client_port |         backend_sta    
rt         | xact_start |          query_start          |         state_change          | waiting | state |                        q    
uery                            
-------+---------+------+----------+---------+------------------+--------------+-----------------+-------------+--------------------    
-----------+------------+-------------------------------+-------------------------------+---------+-------+-------------------------    
----------------------------    
 91246 | db0     | 8171 |    91250 | digoal  | test             | 172.16.3.150 |                 |       47937 | 2013-11-22 17:23:26    
.138425+08 |            | 2013-11-22 17:27:05.539286+08 | 2013-11-22 17:27:05.539745+08 | f       | idle  | select i::int8 from digo    
al.dy($1::text) as (i int8)    
 91247 | db1     | 8172 |    91250 | digoal  |                  | 172.16.3.150 |                 |       47938 | 2013-11-22 17:23:26    
.138688+08 |            | 2013-11-22 17:27:05.53938+08  | 2013-11-22 17:27:05.539874+08 | f       | idle  | select i::int8 from digo    
al.dy($1::text) as (i int8)    
 91248 | db2     | 8173 |    91250 | digoal  |                  | 172.16.3.150 |                 |       47939 | 2013-11-22 17:23:26    
.138957+08 |            | 2013-11-22 17:27:05.53938+08  | 2013-11-22 17:27:05.539841+08 | f       | idle  | select i::int8 from digo    
al.dy($1::text) as (i int8)    
 91249 | db3     | 8174 |    91250 | digoal  |                  | 172.16.3.150 |                 |       47940 | 2013-11-22 17:23:26    
.139178+08 |            | 2013-11-22 17:27:05.539366+08 | 2013-11-22 17:27:05.539793+08 | f       | idle  | select i::int8 from digo    
al.dy($1::text) as (i int8)    
(4 rows)    
```
再次在proxy的同一会话中查询时, 这些会话会复用, 不会断开. 前面已经讲了plproxy是使用长连接的.  
如果修改了server, 那么这些连接会断开, 重新连接. 所以不需要担心修改server带来的连接cache问题.  
```
postgres=# \c proxy postgres    
You are now connected to database "proxy" as user "postgres".    
proxy=# alter server cluster_srv1 options (set p1 'dbname=db1 hostaddr=172.16.3.150 port=1921 application_name=abc');    
ALTER SERVER    
```
再次在proxy的同一会话中查询后, 我们发现4个连接都变了, 说明alter server后, 如果再次发起plproxy函数的查询请求, 那么proxy会重置连接.  
```
proxy=> select sum(i) from digoal.dy('select count(*) from pg_class') as t(i int8);    
 sum      
------    
 1172    
(1 row)    
```
在另一会话的查询结果 :  
```
proxy=# select * from pg_stat_activity where usename='digoal';    
 datid | datname | pid  | usesysid | usename | application_name | client_addr  | client_hostname | client_port |         backend_sta    
rt         | xact_start |          query_start          |         state_change          | waiting | state |                        q    
uery                            
-------+---------+------+----------+---------+------------------+--------------+-----------------+-------------+--------------------    
-----------+------------+-------------------------------+-------------------------------+---------+-------+-------------------------    
----------------------------    
 91246 | db0     | 8245 |    91250 | digoal  | test             | 172.16.3.150 |                 |       47941 | 2013-11-22 17:30:36    
.933077+08 |            | 2013-11-22 17:30:36.936784+08 | 2013-11-22 17:30:36.938837+08 | f       | idle  | select i::int8 from digo    
al.dy($1::text) as (i int8)    
 91248 | db2     | 8247 |    91250 | digoal  |                  | 172.16.3.150 |                 |       47943 | 2013-11-22 17:30:36    
.933502+08 |            | 2013-11-22 17:30:36.936783+08 | 2013-11-22 17:30:36.938981+08 | f       | idle  | select i::int8 from digo    
al.dy($1::text) as (i int8)    
 91249 | db3     | 8248 |    91250 | digoal  |                  | 172.16.3.150 |                 |       47944 | 2013-11-22 17:30:36    
.933731+08 |            | 2013-11-22 17:30:36.937147+08 | 2013-11-22 17:30:36.939015+08 | f       | idle  | select i::int8 from digo    
al.dy($1::text) as (i int8)    
 91247 | db1     | 8246 |    91250 | digoal  | abc              | 172.16.3.150 |                 |       47942 | 2013-11-22 17:30:36    
.933288+08 |            | 2013-11-22 17:30:36.93757+08  | 2013-11-22 17:30:36.939299+08 | f       | idle  | select i::int8 from digo    
al.dy($1::text) as (i int8)    
(4 rows)    
```
### 二. run on 的几种形式, 表示数据路由方法.  
在数据节点创建测试表.  
```
proxy=# \c db0 digoal    
db0=> create table t(id int);    
CREATE TABLE    
db0=> \c db1    
You are now connected to database "db1" as user "digoal".    
db1=> create table t(id int);    
CREATE TABLE    
db1=> \c db2    
You are now connected to database "db2" as user "digoal".    
db2=> create table t(id int);    
CREATE TABLE    
db2=> \c db3    
You are now connected to database "db3" as user "digoal".    
db3=> create table t(id int);    
CREATE TABLE    
```
在数据节点创建插入数据的实体函数, 每个节点返回不一样的数字.  
```
\c db0 digoal    
db0=> create or replace function digoal.f_test4() returns int as $$    
declare    
begin    
insert into t(id) values (1);    
return 0;    
end;    
$$ language plpgsql strict;    
db1=> create or replace function digoal.f_test4() returns int as $$    
declare    
begin    
insert into t(id) values (1);    
return 1;    
end;    
$$ language plpgsql strict;    
db2=> create or replace function digoal.f_test4() returns int as $$    
declare    
begin    
insert into t(id) values (1);    
return 2;    
end;    
$$ language plpgsql strict;    
db3=> create or replace function digoal.f_test4() returns int as $$    
declare    
begin    
insert into t(id) values (1);    
return 3;    
end;    
$$ language plpgsql strict;    
```
在proxy节点创建代理函数, 并且将执行权限赋予给proxy用户.  
```
proxy=> \c proxy postgres    
create or replace function digoal.f_test4() returns int as $$    
cluster 'cluster_srv1';    