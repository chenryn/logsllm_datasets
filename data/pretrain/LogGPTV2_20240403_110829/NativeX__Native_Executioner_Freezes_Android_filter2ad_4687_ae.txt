QQ
Version Downloads
V8.10.0
2.8 billion
7.9 billion
V7.0.6
V8.1.0
9 billion
Last updated
Broadcast actions that are triggered by user interactions
30/7/19
26/7/19
30/7/19
TAOBAO_DELAY_START_LOGIN
com.tencent.mm.plugin.openapi.Intent.ACTION_REFRESH_WXAPP
com.tencent.mobileqq.msf.startmsf
Sina Weibo
V9.8.0
2.3 billion
31/7/19
iQiyi
V10.7.0
2.5 billion
23/7/19
Youku
V8.0.5
1.9 billion
23/7/19
sina.weibo.action.UPDATED
com.sina.weibo.guardunion.NEW_DATA
com.sina.weibo.photo.action.UPDATE_VIDEO_CONFIG
com.iqiyi.hotchat.user.login
org.qiyi.video.module.action.REGISTRY
com.aiqiyi.shortvideo.database
com.youku.service.download.ACTION_DOWNLOAD_SERVICE_CONNECTED
com.youku.action.GET_INIT_DATA_SUCCESS
com.youku.phone.home.loadfinish
NetEase Music
V6.3.0
200 million
Ctrip
V8.8.0
330 million
29/7/19
30/7/19
com.netease.cloudmusic.action.UPDATE_CRASH_HANDLER_USERID
com.netease.music.action.STAR_MUSIC
ctrip.location.coordinate.success
which is brand new to the Android system, may bring extra
performance overhead to the system. And similar to every previous
permission update, it would require the app developers adapting
their apps to the new permission update.
Restrict the Number of Native Processes. According to our
vulnerability analysis, an app is able to spawn an unlimited number
of native processes so that it can starve the system service or slow
down the entire system to freeze the system or force a system
reboot. A straightforward but effective approach is to control the
maximum number of native processes that an app can spawn so
that the attack app cannot have enough number of running native
commands to continuously occupy the shared system resources or
exhaust the device computing resources. It is a usual way adopted
by Android, for example, the maximum number of Toasts that an
app can pop is 50 [34], and the maximum number of active locks
an app can create is also 50 [21].
We conducted a brief study by randomly selecting 50 apps
from the top 500 apps in Google Play and counting up the native
processes in these apps. According to the statistics, the number of
native processes that an app has is normally less than 10. Therefore,
it is relatively easy to set a reasonable threshold of the maximum
number of native processes that a third-party app can spawn.
According to Table 4, the minimum number of native processes
required by a successful attack is 80. It is on Coolpad 7270 which
is an old model released in 2012. Newer models have much bigger
figures of the minimum native process numbers. Therefore, fifty
would also be a conservative limit in this case based on our extra
defense experiments which demonstrate the PoC app is far from
success on any of our testing device if its number of native processes
is set to 50. For trusted system apps, the threshold can be loosened
if necessary.
Regarding the implementation, Android is ready to impose
such a limit on the number of processes an app can have
using SetRLimits() which is based on the Linux setrlimit().
Android applies SetRLimits() to all the child processes forked from
the Zygote, including all the app processes. We investigate the
maximum number of processes that a third-party app can have.
The limit varies in different versions and models, for example, on
our experiment devices, the limits are 14,096 in Android 7.1, 22,097
in Android 8.1, and 21552 in Android 9.0. The limit numbers are all
much larger than the number of processes required by an attack.
Though the existing limit cannot effectively prevent the attack in
our paper, we could readily configure the parameter of this function
to provide a tighter and reasonable limit.
Compared to the permission-based solution, restricting the
number barely brings any burden to the Android system. It requires
no specific adaption from either app developers or app users. This
may explain why it is preferred by system patches and previous
research works [34][21]. A potential problem may come from the
exact limit number. Even though the statistic analysis on the top-
ranked apps shows that 50 would be a suitable number that would
not affect these apps, it may require cautious confirmation of such
statistical observation.
7 RELATED WORK
Android DoS Attacks. As a prevailing mobile system, Android
has been widely explored by researchers to exploit any vulnerability
in the system to launch DoS attacks. The attack points can be
generally categorized into two layers according to the Android
system architecture. One category of attack points are from the
Android framework layer, which is based on the exploits of system
services or system components. For example, there are DoS attacks
exploiting the lack of input validation [16], the inconsistent security
enforcement within the Android framework [29], the design trait in
the concurrency control mechanism of the system server [22], the
vulnerability in the call back mechanism in system services [31], as
well as the lack of access control and memory usage limit in various
ION heaps [35]. Also, there are attacks that can force the process
Static
Android
abort and trigger the system reboot via IPC flooding [20], JGR
(JNI Global Reference) exhaustion [21], and Toasts flooding [24].
The other attack point category is to launch DoS attacks from the
native layer. Armando et al. take advantage of a security breach in
permission management of the Zygote socket so that any process
can request the Zygote process to spawn unlimited new processes
and finally exhaust the system resources [13].
The consequences of a DoS attack may seem alike, the root
causes of the vulnerability are totally different. The vulnerability
identified in our work distinguishes itself in a way that exploits
the weak management of the Android native process. And the
showcased attacks represent the first exploration taking advantage
of the legitimate Android commands as attack vectors. Besides DoS
against the system, we also design the attack against target apps,
which has not been explored before to the best of our knowledge.
Moreover, we quantitatively evaluate the attack consequences
caused by this vulnerability,
i.e., temperature surge, battery
degeneration, and computing performance decrease.
Analysis. The open-source nature of
Android enables the static source code analysis to be one of the
most prominent analysis methods in analyzing the system itself
and its apps. In the Android application analysis area, the previous
work uses static analysis to detect the component hijacking
vulnerabilities in Android apps [26], identify the security and
privacy issues in Android apps [25] and in advertisement libraries
used in Android apps [18], and reveal the capability leaks in stock
smartphones [19]. There are also general application analysis frame-
works, such as FlowDroid [14], Amandroid [32] and EPICC [27].
FlowDroid is an effective static taint analysis framework for
Android applications, which can achieve precise context, flow, field,
and object-sensitive taint analysis [14]. Amandroid is another static
application analysis tool for determining points-to information for
all objects in Android applications and context-sensitive functions
across Android applications components [32]. Besides analyzing
apps, there are also static analysis tools for system vulnerability
analysis based on the Android source code [20][21][22][29][35].
SUSI is proposed to leverage a machine-learning guided approach
to classify and categorize sources and sinks in the framework layer
and pre-installed apps [28]. Backes et al. build a static runtime
model of the Android framework to analyze its internals and find
the high-level protected resources so as to reveal the influence on
the platform security and user privacy [15]. We can see that the
static analysis achieves a large range of purposes. Thanks to statistic
analysis, NativeX can highly target the risky points in the Android
system, saving a lot of labor inspection work.
8 CONCLUSION
This work reveals a new vulnerability existing in a wide range of
Android versions from 4.2 to 9.0 due to the weak management
of native processes. Exploiting this vulnerability, we take the
first exploration using legitimate Android commands in native
processes as attack vectors, such that any third-party app without
any permission can freeze the system or force the system to reboot.
We design an integrated analyzing and testing tool named NativeX,
to identify the risky Android commands, construct PoC apps, and
verify the effectiveness of the PoC apps. We quantitatively measure
the attack consequences of attacks exploiting this vulnerability,
including device temperature surge, battery degeneration, and
computing performance decrease. We further present three repre-
sentative attacks to explain the hazards to the Android system,
Android on-device apps, and device users. Finally, we conduct
vulnerability analysis and reveal the root causes of the vulnerability,
based on which, we discuss the defense approaches against such
vulnerability.
ACKNOWLEDGMENT
This work was supported by the National Natural Science Founda-
tion of China (NSFC project U1836113 and U1836117 ).
REFERENCES
[1] 2015. 5 airplane entertainment systems that will make you forget youâĂŹre
flying coach. https://www.digitaltrends.com/cool-tech/5-best-airlines-for-in-
flight-entertainment/.
[2] 2017. BU-410: Charging at High and Low Temperatures. https://batteryuniversity.
com/learn/article/charging_at_high_and_low_temperatures.
[3] 2017. Google’s Android now powers more than 2 billion devices. https://www.
cnet.com/news/google-boasts-2-billion-active-android-devices/.
[4] 2018. How Long Does It Take a Parked Car to Reach Deadly Hot Temperatures?
https://www.livescience.com/62651-how-hot-cars-get.html.
[5] 2018. Volvo’s native Android Auto system. https://www.youtube.com/watch?v=
[6] 2019. Android Automotive. https://source.android.com/devices/automotive.
[7] 2019. Lock. https://developer.android.com/reference/java/util/concurrent/locks/
SoGrE6t4ejQ.
Lock.
[8] 2019. Thermal burn. https://en.wikipedia.org/wiki/Thermal_burn.
[9] 2020. Distribution Dashboard. https://developer.android.com/about/dashboards/.
[10] 2020. DJI DEVELOPER TECHNOLOGIES. https://developer.dji.com/.
[11] 2020. ingenico GROUP. https://ingenico.us/mobile-solutions#tablet-pos.
[12] 2020. Smartphone OS Market Share. https://www.idc.com/promo/smartphone-
market-share/os.
[13] Alessandro Armando, Alessio Merlo, Mauro Migliardi, and Luca Verderame. 2012.
Would you mind forking this process? A denial of service attack on Android (and
some countermeasures). In IFIP International Information Security Conference.
Springer, 13–24.
[14] Steven Arzt, Siegfried Rasthofer, Christian Fritz, Eric Bodden, Alexandre Bartel,
Jacques Klein, Yves Le Traon, Damien Octeau, and Patrick McDaniel. 2014.
Flowdroid: Precise context, flow, field, object-sensitive and lifecycle-aware taint
analysis for android apps. Acm Sigplan Notices 49, 6 (2014), 259–269.
[15] Michael Backes, Sven Bugiel, Erik Derr, Patrick D McDaniel, Damien Octeau,
and Sebastian Weisgerber. 2016. On Demystifying the Android Application
Framework: Re-Visiting Android Permission Specification Analysis.. In USENIX
Security Symposium. 1101–1118.
[16] Chen Cao, Neng Gao, Peng Liu, and Ji Xiang. 2015. Towards analyzing the input
validation vulnerabilities associated with android system services. In Proceedings
of the 31st Annual Computer Security Applications Conference. ACM, 361–370.
[17] Qi Alfred Chen, Zhiyun Qian, and Z Morley Mao. 2014. Peeking into Your App
without Actually Seeing It: UI State Inference and Novel Android Attacks. In 23rd
USENIX Security Symposium (USENIX Security 2014). 1037–1052.
[18] Michael C Grace, Wu Zhou, Xuxian Jiang, and Ahmad-Reza Sadeghi. 2012. Unsafe
exposure analysis of mobile in-app advertisements. In Proceedings of the fifth
ACM conference on Security and Privacy in Wireless and Mobile Networks. ACM,
101–112.
[19] Michael C Grace, Yajin Zhou, Zhi Wang, and Xuxian Jiang. 2012. Systematic
detection of capability leaks in stock android smartphones.. In NDSS, Vol. 14. 19.
[20] Yacong Gu, Yao Cheng, Lingyun Ying, Yemian Lu, Qi Li, and Purui Su. 2016.
Exploiting android system services through bypassing service helpers. In
International Conference on Security and Privacy in Communication Systems.
Springer, 44–62.
[21] Yacong Gu, Kun Sun, Purui Su, Qi Li, Yemian Lu, Lingyun Ying, and Dengguo
Feng. 2017. JGRE: An Analysis of JNI Global Reference Exhaustion Vulnerabilities
in Android. In Dependable Systems and Networks (DSN), 2017 47th Annual IEEE/IFIP
International Conference on. IEEE, 427–438.
[22] Heqing Huang, Sencun Zhu, Kai Chen, and Peng Liu. 2015. From system services
freezing to system server shutdown in android: All you need is a loop in an app. In
Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications
Security. ACM, 1236–1247.
[23] Ryan Johnson, Mohamed Elsabagh, Angelos Stavrou, and Vincent Sritapan. 2015.
Targeted DoS on android: how to disable android in 10 seconds or less. In 2015
10th International Conference on Malicious and Unwanted Software (MALWARE).
IEEE, 136–143.
[24] Anthony Lineberry, David Luke Richardson, and Tim Wyatt. 2010. These aren’t
the permissions you’re looking for. DefCon 18 (2010).
[25] Kangjie Lu, Zhichun Li, Vasileios P Kemerlis, Zhenyu Wu, Long Lu, Cong Zheng,
Zhiyun Qian, Wenke Lee, and Guofei Jiang. 2015. Checking More and Alerting
Less: Detecting Privacy Leakages via Enhanced Data-flow Analysis and Peer
Voting.. In NDSS.
[26] Long Lu, Zhichun Li, Zhenyu Wu, Wenke Lee, and Guofei Jiang. 2012. Chex:
statically vetting android apps for component hijacking vulnerabilities. In
Proceedings of the 2012 ACM conference on Computer and communications security.
ACM, 229–240.
[27] Damien Octeau, Patrick McDaniel, Somesh Jha, Alexandre Bartel, Eric Bodden,
Jacques Klein, and Yves Le Traon. 2013. Effective inter-component communica-
tion mapping in android with epicc: An essential step towards holistic security
analysis. Effective Inter-Component Communication Mapping in Android with
Epicc: An Essential Step Towards Holistic Security Analysis (2013).
[28] Siegfried Rasthofer, Steven Arzt, and Eric Bodden. 2014. A Machine-learning
Approach for Classifying and Categorizing Android Sources and Sinks.. In NDSS.
[29] Yuru Shao, Qi Alfred Chen, Zhuoqing Morley Mao, Jason Ott, and Zhiyun Qian.
2016. Kratos: Discovering Inconsistent Security Policy Enforcement in the
Android Framework.. In NDSS.
[30] Stephan Spat, Kevin Theuermann, Bernhard Höll, Peter Beck, and Thomas R
Pieber. 2014. Development, integration and operation of mobile, Android-based
medical devices in hospitals: Experiences from the GlucoTab® system. In Wireless
Mobile Communication and Healthcare (Mobihealth), 2014 EAI 4th International
Conference on. IEEE, 128–131.
[31] Kai Wang, Yuqing Zhang, and Peng Liu. 2016. Call me back!: Attacks on system
server and system apps in android through synchronous callback. In Proceedings
of the 2016 ACM SIGSAC Conference on Computer and Communications Security.
ACM, 92–103.
[32] Fengguo Wei, Sankardas Roy, Xinming Ou, et al. 2014. Amandroid: A precise
and general inter-component data flow analysis framework for security vetting
of android apps. In Proceedings of the 2014 ACM SIGSAC Conference on Computer
and Communications Security. ACM, 1329–1341.
[33] Xiao-Guang Yang and Chao-Yang Wang. 2018. Understanding the trilemma of
fast charging, energy density and cycle life of lithium-ion batteries. Journal of
Power Sources 402 (2018), 489–498.
[34] Lingyun Ying, Yao Cheng, Yemian Lu, Yacong Gu, Purui Su, and Dengguo Feng.
2016. Attacks and defence on android free floating windows. In Proceedings of the
11th ACM on Asia Conference on Computer and Communications Security. ACM,
759–770.
[35] Hang Zhang, Dongdong She, and Zhiyun Qian. 2016. Android ion hazard: The
curse of customizable memory management system. In Proceedings of the 2016
ACM SIGSAC Conference on Computer and Communications Security. ACM, 1663–
1674.