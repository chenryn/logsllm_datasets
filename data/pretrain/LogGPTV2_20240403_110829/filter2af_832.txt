## 前言
最近，一位学弟拿着一段代码来找我，说无法成功运行。最初，我以为是版本兼容性的问题，但经过一番排查后发现并非如此。

## 测试过程

### 初步测试
我使用了带有已知漏洞的PHPStudy环境进行测试：
- **在PHP 5中**，报错信息如下：
  ```
  Fatal error: Call to undefined function eval() in E:\software\PhpStudy\PHPTutorial\WWW\1.php on line 3
  ```
- **在PHP 7中**，报错信息为：
  ```
  Fatal error: Uncaught Error: Call to undefined function eval() in E:\software\PhpStudy\PHPTutorial\WWW\1.php:3 Stack trace: #0 {main} thrown in E:\software\PhpStudy\PHPTutorial\WWW\1.php on line 3
  ```

### 寻求帮助
随后，我向一位经验丰富的开发者请教了这个问题：
- 我：这种木马能用吗？
- 大佬：怎么不能用？一个简单的变形都没看懂？
- 我：PHP文档里说`eval`不是一个函数。
- 大佬：它本来就是语言构造器。
- 我：那您测试过这个木马了吗？
- 大佬：你最好找个专业人士教你吧，我不提供详细的解答。
- 我：好的，谢谢。

### 自我探究
根据大佬的提示，我查阅了相关文档并进行了进一步的测试。发现`eval`是一个语言构造器而非普通函数，因此不能被可变函数调用。具体来说，可变函数是指通过变量名后跟圆括号来动态调用同名函数的技术，但`eval`等语言结构不支持这种方式。

#### 可变函数定义
> PHP 支持可变函数的概念。这意味着如果一个变量名后有圆括号，PHP将寻找与该变量值同名的函数，并尝试执行它。可变函数可用于实现回调函数、函数表等功能，但不能用于诸如`echo`, `print`, `unset()`, `isset()`, `empty()`, `include`, `require`等语言结构。

因此，我在怀疑一些博客上发布的代码可能未经充分测试便直接复制粘贴了`assert`作为替代方案。实际上，在某些情况下，替换为`assert`确实可以解决问题。

### 测试结果
- 在PHP 5中，使用`assert`方法正常工作。
- 在PHP 7.0中，同样没有问题。
- 但在PHP 7.1及更高版本中，出现了以下警告：
  ```
  Warning: Cannot call assert() with string argument dynamically in E:\software\PhpStudy\PHPTutorial\WWW\1.php on line 3
  ```
  这是因为从PHP 7.0开始，`assert()`也变成了语言构造器，默认不再允许动态地传递字符串参数执行代码。

### 结论
- `eval`不能用于可变函数调用。
- 从PHP 7.1起，`assert()`也不能用于动态执行代码。

值得注意的是，某些工具如蚁剑仍然可以通过编码（例如Base64）绕过这些限制来使用`assert`。

## 后记
通过这次经历，我对PHP的安全机制有了更深的理解。同时，我也意识到自己在技术交流中的不足之处，对于给那位大佬带来的困扰表示歉意。希望各位读者能够从中吸取教训，并在未来的编程实践中更加谨慎小心。

感谢所有给予指导和建议的朋友！

## 相关链接
[此处添加相关链接]