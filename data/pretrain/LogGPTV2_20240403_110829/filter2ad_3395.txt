# NoSQL Breakdown: A Large-Scale Analysis of Misconfigured NoSQL Services

## Authors
- Dario Ferrari
- Michele Carminati
- Mario Polino
- Stefano Zanero

### Affiliation
Politecnico di Milano

### Conference
Annual Computer Security Applications Conference (ACSAC 2020)

## Abstract
This paper presents a large-scale analysis of misconfigured NoSQL services, highlighting the risks associated with their improper configuration and the potential for data leakage and tampering.

## Introduction

### Why Focus on NoSQL Security?
The requirements for database storage systems have evolved, leading to the popularity of NoSQL databases. These databases offer several advantages:

- **Scalability**
- **Redundancy**
- **Flexibility**
- **Rapid Development/Deployment**
- **Low Cost**
- **Ease of Use**

However, despite these benefits, NoSQL databases often come with built-in security features that are not enabled by default. This can lead to significant security risks, especially for non-expert users who may expose their instances to the internet.

### Common Threat Scenarios
- **Data Leakage**: Unauthorized access to read privileges.
- **Ransom Demand**: Unauthorized access to write privileges, allowing attackers to demand ransom.
- **Web Resource Tampering**: Unauthorized access to write privileges, enabling attackers to alter web resources.

## Research Goals
The primary objectives of this study are:
1. **Identify Unprotected Instances**: Detect NoSQL instances that are exposed and vulnerable.
2. **Measure the Impact of Misconfigurations**: Assess the extent of data leakage and tampering.
3. **Raise Awareness**: Highlight the risks associated with misconfigured NoSQL services.

## Ethical Considerations
- **Data Privacy**: We do not directly read or transmit sensitive data; instead, we retrieve aggregated results.
- **Content Integrity**: We do not override any pre-existing content.
- **Responsible Disclosure**: We contacted website/service owners and Cloud Service Providers (CSPs) to help mitigate vulnerabilities and secure their systems.

## Methodology

### Approach Overview
Our approach consists of three main phases:
1. **Data Collection**: Gather lists of IPv4 subnets from major CSPs.
2. **Exposed Instance Detection**: Use Nmap to scan for reachable IP addresses with open NoSQL service ports.
3. **Security Analysis**: Perform detailed security analysis on the detected instances.

#### Data Collection
- **Sources**: AWS EC2, Azure Cloud, Digital Ocean, Tencent Cloud, Google Cloud, OVH
- **Process**: Collect lists of IPv4 subnets that may host NoSQL instances.

#### Exposed Instance Detection
- **Input**: Lists of IPv4 sub-networks.
- **Tool**: Nmap for scanning.
- **Output**: Identify "candidate" misconfigured instances for further analysis.

#### Security Analysis
- **Instance Inspection**:
  - **Login Attempt**: Try to log into the exposed server.
  - **Permission Analysis**: Analyze read and write permissions.
  - **Write Permission Test**: If possible, create a new workspace/collection without overriding existing data.
  
- **Data Leakage Analysis**:
  - **Metadata Retrieval**: Collect roles, table, and column names.
  - **Aggregated Data**: Gather information on file objects and sensitive data.
  - **Keyword Matching**: Identify elements matching a set of predefined keywords.

- **Web Service Exposure Analysis**:
  - **Passive DNS Resolution**: Infer if the instance is related to a website.
  - **Website Check**: Verify if the identified website is reachable.

## Experimental Results

### Overview
- **Time Period**: October 2019 to March 2020
- **IP Addresses Analyzed**: 67,725,641
- **Vulnerable Instances Found**: 12,276

### Distribution of Misconfigured Instances
- **MongoDB**: 39.5%
- **Elasticsearch**: 38.4%
- **Other Databases**: <1%

### Content Leakage Analysis
- **Email Addresses**: 5,115,087 fields
  - **MongoDB**: 23.1%
  - **Elasticsearch**: 18%
  - **Cassandra**: 6.7%
- **Usernames**: 3,536,087 fields
  - **MongoDB**: 5.5%
  - **Elasticsearch**: 4.9%
  - **Cassandra**: 3%
- **Passwords**: 303,009 fields
  - **MongoDB**: 3%
  - **Elasticsearch**: 1.4%
  - **Cassandra**: 1.3%

### File Type Detection
- **Log Files**: 70,319,178
- **Image/Video Files**: 62,056,413
- **Sensitive Data Leakage**: 99% from Elasticsearch instances

## Conclusion
This study provides a comprehensive analysis of misconfigured NoSQL services, emphasizing the importance of proper configuration and the potential risks of data leakage and tampering. By raising awareness and providing actionable insights, we aim to help organizations better secure their NoSQL databases.

## References
- [db-engines.com/en/ranking](https://db-engines.com/en/ranking)

## Inspectors
- **MongoDB Inspector**
- **Elasticsearch Inspector**
- **Redis Inspector**
- **Cassandra Inspector**

---

This revised version aims to provide a clear, concise, and professional presentation of the research, ensuring that the key points and findings are easily understandable.