e
b
m
u
N
e
c
n
e
u
q
e
S
r
e
b
m
u
N
e
c
n
e
u
q
e
S
2500
2000
1500
1000
500
0
0.4
2500
2000
1500
1000
500
0
1
0.6
0.8
1
1.2
1.4
1.6
1.8
2
2.2
2.4
2.6
Rcvd
Ack
Drop
Time
(b) Reno
www.attach.net 209.150.120.5
Rcvd
Ack
Drop
1.2
1.4
1.6
1.8
2
2.2
2.4
2.6
2.8
3
Time
(d) TCP without Fast Retransmit
www.unm.edu 129.24.8.216
Figure 1: Examples of congestion control behavior
2500
2000
1500
1000
500
r
e
b
m
u
N
e
c
n
e
u
q
e
S
0
1.05
Rcvd
Ack
Drop
1.1
1.15
1.2
1.25
1.3
1.35
1.4
Time
Figure 2: RenoPlus, a variant of Reno
Fast Retransmit. Of these, 666 are running some variant of Mi-
crosoft’s Windows operating system. To investigate this behavior
further, we developed a TBIT test that veriﬁes the web server’s re-
sponse to a single packet dropped from a window of ﬁve packets,
and veriﬁed that most of these servers do not use Fast Retransmit
even in a scenario with a single packet drop. Our enquiries with
Microsoft have indicated that this behavior is a result of a failed
attempt to optimize TCP performance for web pages that are small
enough to ﬁt in the socket buffer of the sender. The attempt to opti-
mize the transmission of packets in such cases does not seem to be
working as intended. Our results indicate that this problem indeed
does not occur when the base web page is large.
Microsoft reported that it would ﬁx the bug in Whistler, its next-
generation operating system, and promised a software patch to ﬁx
the problem in Windows 2000. However, at the time of writing this
paper, the patch was not available.
NMAP results indicate that most of the servers identiﬁed by
TBIT as using NewReno run newer versions of Linux and Solaris
operating systems, while many of the systems reporting the older
Reno behavior seem to be running various versions of FreeBSD
and BSDI. Many of the others with Reno seem to be running var-
ious versions of Windows operating systems, but with large base
web pages. Systems reporting Tahoe behavior seem to be running
various versions of the Linux operating system. NMAP was able to
identify the behavior of only 123 servers that exhibited the “Reno-
Plus” behavior. Of these, 43 appear to be running Solaris 2.5-2.5.1.
We note that for 30 servers, three or more (of the ﬁve) tests ter-
minated because TBIT was unable to classify the server into any of
the types shown in Figures 1 and 2. We are investigating these 30
servers further.
4.3 Conformant congestion control (CCC)
A TCP sender is expected to halve its congestion window after
a packet loss. This aspect of TCP behavior is the key to the stabil-
ity of the Internet [11]. Therefore, we developed a TBIT test that
veriﬁes this behavior, shown in Figure 3. The test is carried out as
follows.
(cid:15) TBIT establishes a connection with the remote server, using
a small MSS, and requests the base web page.
www.thetech.org 204.161.56.11
www.zipmail.com 207.88.19.245
3500
3000
2500
2000
1500
1000
500
r
e
b
m
u
N
e
c
n
e
u
q
e
S
0
0.65
3000
2500
2000
1500
1000
500
r
e
b
m
u
N
e
c
n
e
u
q
e
S
0
0.05
Rcvd
Ack
Drop
0.7
0.75
0.8
0.85
0.9
0.95
1
Time
(a) Window not reduced
Rcvd
Ack
Drop
0.1
0.15
0.2
0.25
0.3
0.35
0.4
Time
(b) Window reduced to four segments
Figure 3: Examples of window reduction behavior
Reason
No connection
No data
RST/FIN
Large MSS
Packet drop
Packet reordering
Buffer overﬂow
Total out of 22750
Tests
389
500
185
19
452
1338
2
2885
Table 7: CCC: Reasons for early termination
Category
1
2
3
4
5
Total
Servers
3461
704
196
50
139
4550
Table 8: CCC: Server categories
Window after loss
5 segments or less
More than 5 segments
Total
Servers
3330
131
3461
Table 9: CCC: Summary results
(cid:15) TBIT acknowledges all packets until packet 15 is received. If
the remote TCP has been exhibiting correct slowstart behav-
ior, the congestion window should be at least eight segments
at this time. TBIT drops packet 15.
(cid:15) TBIT ACKs all packets appropriately, sending duplicate ACKs
acknowledging packet 14, until packet 15 is retransmitted.
The retransmission is acknowledged appropriately. After that,
TBIT does not acknowledge any more packets. This will ul-
timately force the remote server to time out and retransmit
the ﬁrst unacknowledged packet.
(cid:15) As soon as TBIT detects this retransmission, it closes the
connection and terminates the test.
The size of the reduced congestion window, in bytes, is the dif-
ference between the maximum sequence number received by TBIT
and the highest sequence number acknowledged by TBIT. Com-
paring it to the size of the congestion window prior to reduction
(8 segments), we can decide if the remote TCP uses conformant
congestion control.
The robustness issues involved in this test are similar to those
discussed in Section 4.2. We ran the test against each host ﬁve
times. Table 7 gives the number of tests that terminated without
returning any result due to various reasons. Based on these test
results, we categorized the servers in ﬁve categories as described
in Section 4.1. Table 8 shows the number of servers belonging to
each category. Table 9 gives summary results, based on the servers
in the ﬁrst category.
We found 131 servers that did not reduce their congestion win-
dow to ﬁve segments or less. NMAP was able to identify the op-
erating system running on 99 of these. 40 of these were identiﬁed
as running running an older version of Solaris, namely 2.5 or 2.5.1.
We contacted our colleagues at Sun, who looked at the code and re-
ported that the behavior was due to a bug in the TCP stack of adding
three segments to the congestion window after halving it following
a Fast Retransmit. We did not see this problem in the more recent
versions of this operating system.
4.4 Response to selective acknowledgments
A number of TCP stacks have implemented the TCP Selective
Acknowledgment option (SACK) [19]. It is possible to determine
from passive traces whether a remote TCP supports the TCP SACK
option simply by observing whether the TCP SYN packet includes
the SACK PERMITTED option [3]. However, using only passive
monitoring, it is difﬁcult to determine whether the remote TCP ac-
tually uses the information contained in the SACKs sent by the
receiver. We have designed the following TBIT test to verify this.
(cid:15) TBIT sends a SYN packet with a small MSS and the SACK -
PERMITTED option to the remote web server.
(cid:15) If the returning SYN/ACK does not contain the SACK PER
MITTED option, TBIT terminates the test.
(cid:15) Otherwise, TBIT continues to receive and acknowledge pack-
ets until packet 15 is received. Packets 15, 17 and 19 are
dropped. TBIT sends appropriate SACKs in response to pack-
ets 16 and 18.
(cid:15) TBIT continues to receive packets, and send appropriate SACKs
until the retransmissions of packets 15, 17 and 19 are re-
ceived.
r
e
b
m
u
N
e
c
n
e
u
q
e
S
r
e
b
m
u
N
e
c
n
e
u
q