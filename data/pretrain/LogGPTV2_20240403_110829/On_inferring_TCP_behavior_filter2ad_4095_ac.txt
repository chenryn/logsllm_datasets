# 图1：拥塞控制行为示例

## (b) Reno
- **接收** (Rcvd)
- **确认** (Ack)
- **丢弃** (Drop)
- **时间** (Time)

### www.attach.net 209.150.120.5

## (d) 不使用快速重传的TCP
- **接收** (Rcvd)
- **确认** (Ack)
- **丢弃** (Drop)
- **时间** (Time)

### www.unm.edu 129.24.8.216

---

# 图2：RenoPlus，Reno的一个变种

- **接收** (Rcvd)
- **确认** (Ack)
- **丢弃** (Drop)
- **时间** (Time)

---

## 拥塞控制行为调查

在研究中，我们发现有666个服务器运行的是微软Windows操作系统的某个变种。为了进一步调查这种行为，我们开发了一个TBIT测试来验证当五个数据包窗口中有一个数据包丢失时，Web服务器的响应情况，并验证了这些服务器中的大多数即使在单个数据包丢失的情况下也不使用快速重传。根据我们的查询，微软表示这种行为是由于试图优化适合发送者套接字缓冲区的小型网页传输性能而失败的结果。该优化尝试似乎没有按预期工作。结果表明，当基础网页较大时，这个问题不会出现。

微软报告称将在其下一代操作系统Whistler中修复此漏洞，并承诺提供一个软件补丁以解决Windows 2000中的问题。然而，在撰写本文时，该补丁尚未可用。

NMAP结果显示，大多数被TBIT识别为使用NewReno的服务器运行的是较新版本的Linux和Solaris操作系统，而许多表现出旧版Reno行为的系统则运行各种版本的FreeBSD和BSDI。其他许多运行Reno的系统似乎运行着不同版本的Windows操作系统，但具有较大的基础网页。表现出Tahoe行为的系统似乎运行着不同版本的Linux操作系统。NMAP能够识别出仅123个表现出“RenoPlus”行为的服务器，其中43个似乎运行着Solaris 2.5-2.5.1。

我们注意到，对于30个服务器，五次测试中有三次或更多次因TBIT无法将服务器分类到图1和图2所示的任何类型而终止。我们正在进一步调查这30个服务器。

---

## 4.3 符合标准的拥塞控制（CCC）

TCP发送方在发生数据包丢失后应将其拥塞窗口减半。这是互联网稳定性的关键因素之一[11]。因此，我们开发了一个TBIT测试来验证这一行为，如图3所示。测试过程如下：

1. TBIT与远程服务器建立连接，使用较小的最大段大小（MSS），并请求基础网页。
2. TBIT接收所有数据包直到第15个数据包。如果远程TCP表现出正确的慢启动行为，则此时拥塞窗口至少应为八个段。TBIT丢弃第15个数据包。
3. TBIT适当ACK所有数据包，发送重复ACK确认第14个数据包，直到第15个数据包被重新传输。重新传输的数据包被适当确认。之后，TBIT不再确认任何更多的数据包。这最终会迫使远程服务器超时并重新传输第一个未确认的数据包。
4. 一旦TBIT检测到重新传输，它就会关闭连接并终止测试。

通过比较减少后的拥塞窗口大小（以字节为单位）与减少前的拥塞窗口大小（八个段），我们可以判断远程TCP是否使用符合标准的拥塞控制。

我们在每个主机上进行了五次测试。表7列出了因各种原因未能返回任何结果的测试次数。基于这些测试结果，我们将服务器分为五个类别，如表8所示。表9提供了基于第一类服务器的总结结果。

我们发现131个服务器没有将其拥塞窗口减少到五个段或更少。NMAP能够识别出其中99个服务器的操作系统。40个服务器被识别为运行较老版本的Solaris，即2.5或2.5.1。我们联系了Sun公司的同事，他们查看了代码并报告说这种行为是由于TCP栈在快速重传后将拥塞窗口减半后再增加三个段的错误引起的。在更新版本的操作系统中没有看到这个问题。

---

## 4.4 对选择性确认的响应

许多TCP堆栈实现了TCP选择性确认选项（SACK）[19]。通过观察TCP SYN数据包是否包含SACK PERMITTED选项，可以简单地从被动跟踪中确定远程TCP是否支持TCP SACK选项[3]。然而，仅通过被动监控很难确定远程TCP是否实际使用了接收方发送的选择性确认信息。我们设计了以下TBIT测试来验证这一点：

1. TBIT向远程Web服务器发送带有小MSS和SACK-PERMITTED选项的SYN数据包。
2. 如果返回的SYN/ACK不包含SACK PERMITTED选项，TBIT终止测试。
3. 否则，TBIT继续接收并确认数据包，直到接收到第15个数据包。丢弃第15、17和19个数据包。TBIT对第16和18个数据包发送适当的选择性确认。
4. TBIT继续接收数据包，并发送适当的选择性确认，直到接收到第15、17和19个数据包的重传。

希望以上内容能帮助你更好地理解文本。如果有需要进一步优化的地方，请告诉我！