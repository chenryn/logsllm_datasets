### 起因
在exploit-db中，一篇关于PDFResurrect的溢出漏洞引起了我的注意。该漏洞描述如下：
> PDFResurrect 0.15 版本存在一个缓冲区溢出漏洞，原因是程序在处理 startxref 和 %%EOF 相关数据时出现了错误（详情见 [db.com/exploits/47178](db.com/exploits/47178)）。该漏洞导致栈溢出 (CVE-2019-14267)。

理论上，我们可以通过在 PDF 文件中写入构造好的 payload 来实现代码执行。然而，作者在漏洞报告中仅将其归类为 DoS，并提供了一个导致程序崩溃的样本。因此，我决定尝试在 PDF 文件中写入 payload 以实现 getshell。

### 下载和编译
安装过程相对简单。首先运行 `./configure`，然后修改 Makefile 中的 CFLAGS 如下：
```makefile
CFLAGS = -O0 -g -Wall -fno-stack-protector $(EXTRA_CFLAGS)
```
- `-O0` 关闭优化以便于使用 GDB 进行调试。
- `-fno-stack-protector` 禁用堆栈保护机制，因为这是一个简单的栈溢出漏洞。

编译完成后，可以查看生成的二进制文件的保护状态。

### 开始尝试
根据漏洞类型和目标程序的保护措施，首先想到的是使用 ROP 绕过 NX 保护，从而实现 getshell。然而，PDFResurrect 没有提供类似 `system()` 的功能，因此需要从动态链接库中查找可用的 ROP 链。

#### 使用 one_gadget 查找 ROP 链
使用 one_gadget 工具查找可用的 ROP 链，找到了 4 条可能的链。具体选择哪条链将在后续步骤中确定。

##### 计算偏移量
根据作者提供的信息，溢出出现在以下位置：
```c
...
char x, *c, buf[256];
...
for (i=0; i < n_xrefs; i++) {
    /* Seek to %%EOF */
    if ((pos = get_next_eof(fp)) < 0) {
        xrefs[i].version = ver++;
    }
    /* Rewind until we find end of "startxref" */
    pos_count = 0;
    while (SAFE_F(fp, ((x = fgetc(fp)) != 'f'))) {
        if (pos_count > 256) {
            fprintf(stderr, "Failed to read startxref.\n");
            return -1;
        }
    }
    c = buf;
    while (*c == ' ' || *c == '\n' || *c == '\r') {
        ++c;
    }
    /* xref start position */
    pdf->xrefs[i].start = atol(c);
}
...
```

我们在 `pdf.c:237` 处设置断点，并分别查找 `buf` 和 `rbp` 的地址，从而计算出 payload 所需的偏移量。通过 GDB 调试，发现 `buf` 的地址为 `0x7fffffffe460`，`rbp` 的地址为 `0x7fffffffe5a0`，因此偏移量为：
```python
offset = 0x5a0 - 0x460 = 320
```

在 PDF 文件的 `xref` 和 `%%EOF` 之间添加上述偏移量后，再次使用 GDB 调试并检查 `fread` 函数后的栈空间情况，确认偏移量正确覆盖了 `rbp` 前的位置。

### 遇到的问题及解决方法

#### 第一个问题
在 `0x40217b` 处，指令对比 `rdx` 与 `rax`，若不等则程序退出。幸运的是，`rax` 是可控的，因此我们可以修改 `rax` 使其与 `rdx` 相等，从而绕过此问题。

#### 第二个问题
在 `0x4021db` 处，栈上的覆盖影响到了 `pdf->xrefs[i]` 中 `i` 的值，导致程序崩溃。经过检查发现 `i` 也是可控的，因此同样通过修改 `i` 的值来绕过此问题。

#### 第三个问题
在 `is_valid_xref` 函数的第 587 行，由于巨大的 `xref->start` 值，文件指针指向了一个非常靠后的位置，导致文件内容读取失败。经过进一步检查发现，这个数值也是可控的，因此继续通过修改该值来绕过问题。

### 最终成功
通过 `proc` 查看 libc 基地址并计算出实际的 ROP 地址。最终，通过找到合适的 gadget 并利用 `sub rax, 1 ; ret` 将 `rax` 置零，再接一个 `rax == NULL` 的 one_gadget，成功实现了代码执行并获取 shell。

### 附件
完整的 payload 见附件。其中 ROP 地址可能需要根据实际情况进行调整。

本人使用的 GCC 和系统版本如下：
```sh
root@c7c87f16a29d:/home/pdfresurrect-0.15# /lib/x86_64-linux-gnu/libc.so.6 -V
GNU C Library (Ubuntu GLIBC 2.23-0ubuntu11) stable release version 2.23, by Roland McGrath et al.
Copyright (C) 2016 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.
There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
Compiled by GNU CC version 5.4.0 20160609.
Available extensions:
    crypt add-on version 2.1 by Michael Glad and others
    GNU Libidn by Simon Josefsson
    Native POSIX Threads Library by Ulrich Drepper et al
    BIND-8.2.3-T5B
libc ABIs: UNIQUE IFUNC
For bug reporting instructions, please see: <http://www.gnu.org/software/libc/bugs.html>.

root@c7c87f16a29d:/home/pdfresurrect-0.15# uname -a
Linux c7c87f16a29d 3.10.0-1062.4.1.el7.x86_64 #1 SMP Fri Oct 18 17:15:30 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux
```

### 参考
- [Exploit-DB CVE-2019-14267](db.com/exploits/47178)
- [one_gadget](https://github.com/david942j/one_gadget)