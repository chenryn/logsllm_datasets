  for i in 0..63    
  loop    
    perform conn('link'||i,  'hostaddr=127.0.0.1 user=postgres dbname=postgres');     
    perform dblink_send_query('link'||i, format('insert into tbl%s select generate_series(1, 15625000), gen_hanzi(64)', i));    
  end loop;    
end;    
$$;    
```    
这种并行写入方法，把CPU用了个精光，马力全开，高速写入10亿条随机文本。    
```    
top - 14:49:48 up 217 days,  4:29,  3 users,  load average: 64.33, 63.08, 46.16    
Tasks: 756 total,  65 running, 691 sleeping,   0 stopped,   0 zombie    
%Cpu(s): 96.5 us,  3.5 sy,  0.0 ni,  0.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st    
KiB Mem : 52807456+total,  7624988 free, 19696912 used, 50075267+buff/cache    
KiB Swap:        0 total,        0 free,        0 used. 37125398+avail Mem     
```    
写入完毕：    
10亿记录，表占用空间223GB，写入记录耗时18分钟。    
样本如下：    
```    
postgres=# select * from tbl limit 10;    
 id |                                                               info                                                                   
----+----------------------------------------------------------------------------------------------------------------------------------    
  1 | 懛瑌娺罊鹜凳芹绱茙蠡㥪礛唾霹跷憙胣缃犭昉斗蒽曲牵痈嚒巈茑莥钶们鼗楝𫝩眦条弘娸霵镯钻夊涨鮗傞屽嶋莁艳舸鮉蟙材骘媨迁内橰畁蜫征瘭缆竟    
  2 | 荓嚅𰾭鑬抾诐裹坲雚囻卥饸数拰絔劫霨礸诿廓琫颧仯瞱卷瘰弶瓴鹝逼倭舌飂陭盒寚芘怦叙种椡檱玠肙羡兔蒿眤粆焙蟸侥樛裦窽美影诳哜帪粊圊鈵疧    
  3 | 龌楣莁橹箉髎岒险旚舲瞒靻蕰岹滺扡习坍敮鯭钶鈫篖刀绎花截孞讼咺茅雠沥叠湓𫛷戊糥钫秤彨沤熻云筝銵妮宊鲗焜埒躐采薨銐鐚梶唣𠇹响寏蓘铅缅    
  4 | 鹠愈篭怞迭烲调侺辖帘颬叹儨劵磘鼪蛔芪踖譱梮脁翦荣蠖𪱥訰闼晒糦琬攀迮偳真耷獦捼臱捗玕竷肥皽羬姘癃嗗跶撴𫔂垊鞋玊賮耦喞睹癦溊咺鲒薋随    
  5 | 鼅崄眹狆犁妅蠝頖虼椝漮暄瓴靰湛捏屿懿浛咏螈媤蚴辇萝嵵纸谂婢閖胭姂励奋缬睶擳最㳔鹎舜鄕摎坫裙蒩洽靟颧貘鷮肋饩荜瀌缀鑳耗棦估瘈鲿嫲竾    
  6 | 嚈譺勏浺勔璶歅蛰春膒逊你暖巳颿徙鲋霈钙阣籡把琲焮钢𫐐牞榉谱罐顷钹欤鳑抏濸燢翓坄訇懁馠譧穗埮蒂诰哔篥缰𫛛墡锯熃篏蟵惶予单鼧翘鵗鐻𪉃    
  7 | 骄圥浏况裸皓圣鲹炎钊睫穼祧掶腐喧鐤红恈蝷傀踗涩捶躟甜拸滒狎垎氩涭悳诪豭鮬执𨸃飗莼诜炆忋搷蘼锛毞窗爘縦抌璘沙葓訍宓姊鼅籥缵囯骎鹄榢    
  8 | 虢歌斩膀胸厩耘毇腊钓臾柡蕙丷钛埋繝垃繣鸢跖棋壤馟栬蝉碒焚舲眱贻棯抙勀搒𨸃抡阪宪雎表閯弊减闦吀矦璞崭嚤燯鵘煯糓靓讛摷灀崐颩饱鯍懳层    
  9 | 仨砆创摬溋昁宕坍寻沟睨剌犟侩磫舢塎鳚翕箽秆瞂枲避駂杯覄鎎狪鹓偍珒痘咜訾阵沝韔下窨擎睳绵襭礜堺毩荪啰鶾徂肠疛礴牒澹偒就探甼娃旯鬎臛    
 10 | 沌薧𥐻謩緖碤昏钣偱霠系箎侣鳝归圦驭烔誝湾鲽嵋鈜鹚歼嘘珰睿済沩妵猫啛葎砗蔱嵍遂稰徾螾壶赌襕喥麞銙偭濍綒狐氰赐敇櫤坟浟郕舲赧悉跧穕柤    
(10 rows)    
```    
6、创建索引（实际生产中，索引可以先建好，这里主要是为了加速生成速度）    
```    
do language plpgsql $$    
declare    
begin    
  create index idx_tbl_info on tbl using gin(info gin_trgm_ops);    
  for i in 0..63    
  loop    
    perform conn('link'||i,  'hostaddr=127.0.0.1 user=postgres dbname=postgres');     
    perform dblink_send_query('link'||i, format('create index idx_tbl%s_info on tbl%s using gin(info gin_trgm_ops);', i, i));    
  end loop;    
end;    
$$;    
```    
10亿记录，GIN倒排索引占用空间332GB，创建索引耗时接近180分钟。    
索引创建速度解释：    
由于这个CASE写入的字符串是几万个汉字里面的完全随机的汉字，所以GIN倒排索引的TOKEN特别多。这个CASE比正常生产数据的索引要大很大，正常索引不会这么大，正常创建速度也会比这个快。但是创建GIN索引的速度相比BTREE确实是要慢很多的(结构所致)。如果是BTREE索引，应该会在5分钟内创建完成。    
## 相似查询SQL用法    
1、查看当前相似度阈值    
```    
select show_limit();    
 show_limit     
------------    
        0.3    
(1 row)    
```    
2、设置当前会话相似度阈值，其他设置详见末尾部分    
```    
select set_limit(0.9);    
```    
3、相似搜索的响应速度与用户设置的相似度有关，用户设置的相似度匹配到的值越多，速度越慢。匹配到的值越少（即精度越高），响应速度越快。    
```    
-- 响应速度更慢    
postgres=# select set_limit(0.1);    
 set_limit     
-----------    
       0.1    
(1 row)    
-- 响应速度更快    
postgres=# select set_limit(0.9);    
 set_limit     
-----------    
       0.9    
(1 row)    
```    
4、根据输入文本，查询与之相似的文本，并按相似排序输出。    
```    
select similarity(info, '输入搜索词') as sml, -- 计算输入词与存储字符串的相似度    
  * from tbl     
  where info % '输入搜索词'    -- 相似度超过阈值    
  order by sml desc            -- 按相似度排序(倒排，越相似的排在越前面)    
  limit 10;      
```    
SQL耗时：71毫秒    
```    
postgres=# select set_limit(0.7);    
 set_limit     
-----------    
       0.7    
(1 row)    