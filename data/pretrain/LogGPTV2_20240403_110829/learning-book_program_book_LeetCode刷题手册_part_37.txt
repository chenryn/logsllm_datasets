---
## Page 321
return result
//解法二
func findRepeateddnaSequencesl(s string) []string {
if len(s)>= 1
return res
191.Numberof1Bits
题目
Write a function that takes an unsigned integer and return the number of *1 bits it has (also
known as the Hamming weight).
Example 1:
---
## Page 323
Input: 00000000000000000000000000001011
output: 3
Explanation: The input binary string 00000000000000000000000000001011 has a
total of three‘1' bits.
Example 2:
Input:00000000000000000000000010000000
Output: 1
Explanation: The input binary string 00000000000000000000000010000000 has a
total of one '1' bit.
Example 3:
Input:11111111111111111111111111111101
Output: 31
Explanation: The input binary string 11111111111111111111111111111101 has a
total of thirty one '1’ bits.
Note:
au aseo sju ul ad jagau pau(sun ou sl auau 'ene[ se qons sagenguel awos ul jeui ajon ●
au se uogeuawaldw no pae jou pinous pue ad aau paugls se uanig aq lm ndul
Therefore, in Example 3 above the input represents the signed integer -3
题目大意
编写一个函数，输入是一个无符号整数，返回其二进制表达式中数字位数为1的个数（也被称为汉明
重量）。
解题思路
·求uint32数的二进制位中1的个数。
·这一题的解题思路就是利用二进制位操作。X=X&（X-1）这个操作可以清除最低位的二进
制位1，利用这个操作，直至把数清零。操作了几次即为有几个二进制位1。
·最简单的方法即是直接调用库函数bits.OnesCount（uint（num））。
代码
package leetcode
import "math/bits"
//解法一
---
## Page 324
func hammingweight(num uint32) int {
return bits.onesCount(uint(num))
//解法二
func hammingweight1(num uint32) int {
count := 0
for num != 0 {
num = num & (num - 1)
count++
return count
198.HouseRobber
题目
You are a professional robber planning to rob houses along a street. Each house has a certain
amount of money stashed, the only constraint stopping you from robbing each of them is that
adjacent houses have security system connected and it will automatically contact the police if
two adjacent houses were broken into on the same night.
Given a list of non-negative integers representing the amount of money of each house,
dletermine the maximum amount of money you can rob tonight without alerting the police.
Example 1:
Input: [1,2,3,1]
Output: 4
Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
Total amount you can rob = 1 + 3 = 4.
Example 2:
Input: [2,7,9,3,1]
output: 12
Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5
(money = 1) .
Total amount you can rob = 2 + 9 + 1 = 12.
题目大意
你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素
就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报
警。
---
## Page 325
给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最
高金额。
解题思路
·你是一个专业的小偷，打算洗劫一条街的所有房子。每个房子里面有不同价值的宝物，但是如果你
选择愉窃连续的2栋房子，就会触发警报系统，编程求出你最多可以偷窃价值多少的宝物？
·这一题可以用DP来解答，也可以用找规律的方法来解答。
·DP的状态定义是：dp[i]代表抢nums[0，i]这个区间内房子的最大值，状态转移方程是
dp[i]=max（dp[i-1]，nums[i]+dp[i-2]）。可以优化迭代的过程，用两个临时变量来存储
中间结果，以节约辅助空间。
代码
package leetcode
//解法一DP
func rob198(nums []int) int {
n := 1en(nums)
if n == 0{
return 0
if n == 1 {
return nums[0]
//dp[i]代表抢nums[0...i]房子的最大价值
dp := make([]int, n)
dp[0], dp[1] = nums [0] , max(nums[1], nums [0])
for i := 2; i  0 {
node := queue[0]
if node.Left != nil {
queue = append(queue, node.Left)
nextLevelNum++
if node.Right != nil {
queue = append(queue, node.Right)
nextLevelNum++
curNum=-
tmp = append(tmp, node.va1)
queue = queue[1:]
if curNum == 0{
res = append(res, tmp[1en(tmp)-1])
curNum = nextLeve1Num
nextLevelNum = 0
tmp = []int{}
return res
---
## Page 328
200.NumberofIslands
题目
Given a 2d grid map of *1′ s (land) and *o* s (water), count the number of islands. An island is
no Ajjeojpan jo Ajjejuozuou spuel juaoe(pe gujoauuo Aq pawuoj sl pue jajem >= 1
n >>= 1
---
## Page 331
moved++
return m m{
n&=（n-1）//清除最低位的1
return n
上
202.Happy_Number
题目
,ddeu, sl aqwnu e jl auwaap o wuoje ue atm
A happy number is a number defined by the following process: Starting with any positive integer,
replace the number by the sum of the squares of its digits, and repeat the process until the
number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1
Those numbers for which this process ends in 1 are happy numbers.
Example 1:
Input: 19
output: true
Explanation:
12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1
题目大意
判断一个数字是否是“快乐数字”，“快乐数字“的定义是，不断的把这个数字的每个数字的平方和加起
来，反复的加，最终如果能有结果是1，则是“快乐数字”，如果不能得到一，出现了循环，则输出
false。
解题思路
按照题意要求做即可。
---
## Page 332
代码
package leetcode