                WriteRqst.Flush = WriteRqst.Write;
                lastflush = now;
        }
        // wal writer write(异步写)累计调度，更新Flush位点
        else if (flushbytes >= WalWriterFlushAfter)
        {
                /* exceeded wal_writer_flush_after blocks, flush */
                WriteRqst.Flush = WriteRqst.Write;
                lastflush = now;
        }
        // 否则不执行fsync
        else
        {
                /* no flushing, this time round */
                WriteRqst.Flush = 0;
        }
#ifdef WAL_DEBUG
        if (XLOG_DEBUG)
                elog(LOG, "xlog bg flush request write %X/%X; flush: %X/%X, current is write %X/%X; flush %X/%X",
                         (uint32) (WriteRqst.Write >> 32), (uint32) WriteRqst.Write,
                         (uint32) (WriteRqst.Flush >> 32), (uint32) WriteRqst.Flush,
                         (uint32) (LogwrtResult.Write >> 32), (uint32) LogwrtResult.Write,
                   (uint32) (LogwrtResult.Flush >> 32), (uint32) LogwrtResult.Flush);
#endif
        START_CRIT_SECTION();
        /* now wait for any in-progress insertions to finish and get write lock */
        WaitXLogInsertionsToFinish(WriteRqst.Write);
        LWLockAcquire(WALWriteLock, LW_EXCLUSIVE);
        LogwrtResult = XLogCtl->LogwrtResult;
        if (WriteRqst.Write > LogwrtResult.Write ||
                WriteRqst.Flush > LogwrtResult.Flush)
        {
                XLogWrite(WriteRqst, flexible);
        }
        LWLockRelease(WALWriteLock);
        END_CRIT_SECTION();
        /* wake up walsenders now that we've released heavily contended locks */
        WalSndWakeupProcessRequests();
        /*
         * Great, done. To take some work off the critical path, try to initialize
         * as many of the no-longer-needed WAL buffers for future use as we can.
         */
        AdvanceXLInsertBuffer(InvalidXLogRecPtr, true);
        /*
         * If we determined that we need to write data, but somebody else
         * wrote/flushed already, it should be considered as being active, to
         * avoid hibernating too early.
         */
        return true;
}
/*
 * Write and/or fsync the log at least as far as WriteRqst indicates.
 *
 * If flexible == TRUE, we don't have to write as far as WriteRqst, but
 * may stop at any convenient boundary (such as a cache or logfile boundary).
 * This option allows us to avoid uselessly issuing multiple writes when a
 * single one would do.
 *
 * Must be called with WALWriteLock held. WaitXLogInsertionsToFinish(WriteRqst)
 * must be called before grabbing the lock, to make sure the data is ready to
 * write.
 */
static void
XLogWrite(XLogwrtRqst WriteRqst, bool flexible)
{
......
日志切换时，触发fsync
                        if (finishing_seg)
                        {
                                issue_xlog_fsync(openLogFile, openLogSegNo);
......
根据LogwrtResult.Flush位点与请求Flush位点的对比，判断是否需要调用fsync  
即前面的调度  
        /*
         * If asked to flush, do so
         */
        if (LogwrtResult.Flush = 0 &&
                                !XLByteInPrevSeg(LogwrtResult.Write, openLogSegNo))
                                XLogFileClose();
                        if (openLogFile < 0)
                        {
                                XLByteToPrevSeg(LogwrtResult.Write, openLogSegNo);
                                openLogFile = XLogFileOpen(openLogSegNo);
                                openLogOff = 0;
                        }
                        issue_xlog_fsync(openLogFile, openLogSegNo);
                }
                /* signal that we need to wakeup walsenders later */
                WalSndWakeupRequest();
                LogwrtResult.Flush = LogwrtResult.Write;
        }
......
```
## 参考
1\. https://www.pgcon.org/2012/schedule/attachments/258_212_Internals%20Of%20PostgreSQL%20Wal.pdf    
如果要深入了解PostgreSQL redo的内部机制，可以参考以上文档以及源码。  
![pic3](20161011_01_pic_003.png)  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")