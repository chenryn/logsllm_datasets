            if ( v5 & 0xFFFFFFF0 )
            {
              v5 -= 0x10;
              goto LABEL_13;
            }
            v5 += 0xD0;
            dword_1400030E4 = v5;
          }
          if ( v8 != 0x1F )                         // down
            goto LABEL_14;
          if ( (v5 & 0xFFFFFFF0) == 0xD0 )
            v5 -= 0xD0;
          else
            v5 += 0x10;
    LABEL_13:
          dword_1400030E4 = v5;
    LABEL_14:
          if ( v8 == 0x1E )                           // left
          {
            if ( v5 & 0xF )
              --v5;
            else
              v5 += 0xF;
            dword_1400030E4 = v5;
          }
          if ( v8 == 0x20 )                           // right
          {
            if ( (v5 & 0xF) == 15 )
              v5 -= 15;
            else
              ++v5;
            dword_1400030E4 = v5;
          }
          v9 = aO[v5];
          if ( v9 == '*' )
          {
            v10 = "-1s\n";
          }
          else
          {
            if ( v9 != '7' )
            {
    LABEL_29:
              aO[v5] = 'o';
              goto LABEL_30;
            }
            v10 = "The input is the flag!\n";
          }
aO为字符串
    ****************
    o..............*
    **************.*
    ************...*
    ***********..***
    **********..****
    *********..*****
    ********..******
    *******..*******
    ******..********
    *****..*********
    ****..**********
    ****7***********
* * *
要把这个o走到7的位置  
0x11 0x1F 0x1E 0x20是硬件扫描码 wsad，对应写出移动的顺序就行了
> flag:hctf{ddddddddddddddssaasasasasasasasasas}
## PolishDuck
找到了字符串 Arduino leonardo，是单片机的型号.  
该题是AVR汇编, 应该是一道算法题, 转成bin之后能看到:
    44646 + ( 64094 + (71825 * ( ( 15873 + ( 21793 * ( 7234 + ( 17649 * ( ( 2155 + ( 74767 * ( 35392 + ( 88216 * ( 83920 + ( 16270 + ( 20151 * ( 5268 + ( 90693 * ( 82773 + ( 716 + 27377 * ( 44329 + ( 49366 * ( ( ( 38790 + ( 70247 * ( 97233 + ( 18347 + ( 22117 * ( ( ( 72576 + ( ( 47541 + ( 46975 + ( 53769 * ( 94005 + ( ( 72914 + ( 5137 + ( 87544 * 71583 + ( 20370 + ( 37968 * ( 17478 + ( ( 40532 + ( 10089 + ( 13332 * ( ( 24170 + ( 46845 * ( 16048 + 23142 * ( 31895 + ( 62386 * ( 12179 ( 94552 + ( ( ( 52918 + ( 91580 + ( ( ( 38412 + ( 91537 * ( 70 + ( 98594 * ( ( 35275 + ( 62912 * ( 4755 + ( 16737 * ( 27595 + ( ( 43551 + ( 64482 * 3550 ) ) - 21031 ) ) ) ) ) ) - 57553 ) ) - 89883 ) - 38900 ) ) ) - 19517 ) - 79082 ) ) ) ) ) ) ) ) - 70643 ) ) 55350 ) ) ) ) ) - 40301 ) ) ) ) - 83065 ) ) ) ) ) - 52460 ) ) - 49428 ) - 94686 ) ) ) ) ) ) - 1653 ) - 65217 ) ) ) - 43827 ) 66562 ) )
但好像不是一个完整的等式, 无法解出...emmmm
做法是瞎猜的，没想到能做出来= =  
这是个hex文件，首先不知道它机器的芯片，先用ida直接打开，能看到解析后的内容，也可以用相关工具解析成bin再用ida打开。发现0180地址出有一串字符串Arduino
LLC Arduino Leonardo  
这是它机器的型号，查找资料知道是avr架构的ATmega32u  
ida打开的时候，processer type 选Atmel AVR，打开后选ATmega32_L，可以反汇编了。  
在0D40地址看到
    notepad.exe 44646 + ( 64094 + (71825 * ( ( 15873 + ( 21793 * ( 7234 + ( 17649 * ( ( 2155 + ( 74767 * ( 35392 + ( 88216 * ( 83920 + ( 16270 + ( 20151 * ( 5268 + ( 90693 * ( 82773 + ( 716 + 27377 * ( 44329 + ( 49366 * ( ( ( 38790 + ( 70247 * ( 97233 + ( 18347 + ( 22117 * ( ( ( 72576 + ( ( 47541 + ( 46975 + ( 53769 * ( 94005 + ( ( 72914 + ( 5137 + ( 87544 * 71583 + ( 20370 + ( 37968 * ( 17478 + ( ( 40532 + ( 10089 + ( 13332 * ( ( 24170 + ( 46845 * ( 16048 + 23142 * ( 31895 + ( 62386 * ( 12179 ( 94552 + ( ( ( 52918 + ( 91580 + ( ( ( 38412 + ( 91537 * ( 70 + ( 98594 * ( ( 35275 + ( 62912 * ( 4755 + ( 16737 * ( 27595 + ( ( 43551 + ( 64482 * 3550 ) ) - 21031 ) ) ) ) ) ) - 57553 ) ) - 89883 ) - 38900 ) ) ) - 19517 ) - 79082 ) ) ) ) ) ) ) ) - 70643 ) ) 55350 ) ) ) ) ) - 40301 ) ) ) ) - 83065 ) ) ) ) ) - 52460 ) ) - 49428 ) - 94686 ) ) ) ) ) ) - 1653 ) - 65217 ) ) ) - 43827 ) 66562 ) )
不是一个完整的式子，不能计算，想起他方向。  
这不是一个 完整的字符串，而是很多个字符串（中间有\x00），大致猜一下可能是选取其中某些字符串拼接起来，就能计算了  
从开头开始跟踪，跟踪到sub_9A8，应该是解析相关的函数了。  
往下找，找到可疑的地方0A6C开始：
    ROM:0A6C                 ldi     r22, 0xF4
    ROM:0A6D                 ldi     r23, 1
    ROM:0A6E                 ldi     r24, 0
    ROM:0A6F                 ldi     r25, 0
    ROM:0A70                 call    sub_8B6
    ROM:0A72                 ldi     r24, 0x40 ; '@'
    ROM:0A73                 ldi     r25, 1
    ROM:0A74                 call    sub_88D
    ROM:0A76                 ldi     r22, 0xF4
    ROM:0A77                 ldi     r23, 1
    ROM:0A78                 ldi     r24, 0
    ROM:0A79                 ldi     r25, 0
    ROM:0A7A                 call    sub_8B6
    ROM:0A7C                 ldi     r24, 0x4C ; 'L'
    ROM:0A7D                 ldi     r25, 1
    ROM:0A7E                 call    sub_88D
    ROM:0A80                 ldi     r22, 0xF4
    ROM:0A81                 ldi     r23, 1
    ROM:0A82                 ldi     r24, 0
    ROM:0A83                 ldi     r25, 0
    ROM:0A84                 call    sub_8B6
    ROM:0A86                 ldi     r24, 0x53 ; 'S'
    ROM:0A87                 ldi     r25, 1
    ROM:0A88                 call    sub_88D
    ROM:0A8A                 ldi     r22, 0xF4
    ROM:0A8B                 ldi     r23, 1
    ROM:0A8C                 ldi     r24, 0
    ROM:0A8D                 ldi     r25, 0
    ROM:0A8E                 call    sub_8B6
    ROM:0A90                 ldi     r24, 0x62 ; 'b'
    ROM:0A91                 ldi     r25, 1
    ROM:0A92                 call    sub_88D
有很多结构十分相似的部分，把不一样的地方都提取出来，是一堆地址
    140  14C  153  162  177  18B  1A9  1C8  1D3  1EB  1FE  25E  207 21C 227 246 261 270 28B 298 2A3 2B1 25C 2BA 2C5 2D0 2D7 2F2 307 310 25E 327 346 3DC 34D 364 373 38F 3A6 3B3 3BF 3D0 3DF 3EF 400 44B 413 42C 43B 44F 452 490 45F 46C 47D 48E 497 49E 4B5 4CB 445 445 4D6 44D 44D 494 4E5 44F
这些地址并不指向任何东西，但如过把140对应之前字符串的开头notepad.exe，14C刚好能对应第二个字符串开头44646，以此类推，而某些地址可能指向的不是某一字符串的开头，这样猜测整合完应该能得到完整算术式  
试着把他们一一对应过去
    unsigned char secret[] = { 0x6E, 0x6F, 0x74, 0x65, 0x70, 0x61, 0x64, 0x2E, 0x65, 0x78,0x65, 0x00, 0x34, 0x34, 0x36, 0x34, 0x36, 0x20, 0x00, 0x2B,0x20, 0x28, 0x20, 0x36, 0x34, 0x30, 0x39, 0x34, 0x20, 0x2B,0x20, 0x28, 0x20, 0x00, 0x37, 0x31, 0x38, 0x32, 0x35, 0x20,0x2A, 0x20, 0x28, 0x20, 0x28, 0x20, 0x31, 0x35, 0x38, 0x37,0x33, 0x20, 0x2B, 0x20, 0x00, 0x28, 0x20, 0x32, 0x31, 0x37,0x39, 0x33, 0x20, 0x2A, 0x20, 0x28, 0x20, 0x37, 0x32, 0x33,0x34, 0x20, 0x2B, 0x20, 0x00, 0x28, 0x20, 0x31, 0x37, 0x36,0x34, 0x39, 0x20, 0x2A, 0x20, 0x28, 0x20, 0x28, 0x20, 0x32,0x31, 0x35, 0x35, 0x20, 0x2B, 0x20, 0x28, 0x20, 0x37, 0x34,0x37, 0x36, 0x37, 0x20, 0x00, 0x2A, 0x20, 0x28, 0x20, 0x33,0x35, 0x33, 0x39, 0x32, 0x20, 0x2B, 0x20, 0x28, 0x20, 0x38,0x38, 0x32, 0x31, 0x36, 0x20, 0x2A, 0x20, 0x28, 0x20, 0x38,0x33, 0x39, 0x32, 0x30, 0x20, 0x00, 0x2B, 0x20, 0x28, 0x20,0x31, 0x36, 0x32, 0x37, 0x30, 0x20, 0x00, 0x2B, 0x20, 0x28,0x20, 0x32, 0x30, 0x31, 0x35, 0x31, 0x20, 0x2A, 0x20, 0x28,0x20, 0x35, 0x32, 0x36, 0x38, 0x20, 0x2B, 0x20, 0x28, 0x20,0x00, 0x39, 0x30, 0x36, 0x39, 0x33, 0x20, 0x2A, 0x20, 0x28,0x20, 0x38, 0x32, 0x37, 0x37, 0x33, 0x20, 0x2B, 0x20, 0x00,0x28, 0x20, 0x37, 0x31, 0x36, 0x20, 0x2B, 0x20, 0x00, 0x32,0x37, 0x33, 0x37, 0x37, 0x20, 0x2A, 0x20, 0x28, 0x20, 0x34,0x34, 0x33, 0x32, 0x39, 0x20, 0x2B, 0x20, 0x28, 0x20, 0x00,0x34, 0x39, 0x33, 0x36, 0x36, 0x20, 0x2A, 0x20, 0x28, 0x20,0x00, 0x28, 0x20, 0x28, 0x20, 0x33, 0x38, 0x37, 0x39, 0x30,0x20, 0x2B, 0x20, 0x28, 0x20, 0x37, 0x30, 0x32, 0x34, 0x37,0x20, 0x2A, 0x20, 0x28, 0x20, 0x39, 0x37, 0x32, 0x33, 0x33,0x20, 0x00, 0x2B, 0x20, 0x28, 0x20, 0x31, 0x38, 0x33, 0x34,0x37, 0x20, 0x2B, 0x20, 0x28, 0x20, 0x32, 0x32, 0x31, 0x31,0x37, 0x20, 0x2A, 0x20, 0x28, 0x20, 0x28, 0x20, 0x00, 0x28,0x20, 0x37, 0x32, 0x35, 0x37, 0x36, 0x20, 0x2B, 0x20, 0x28,0x20, 0x28, 0x20, 0x00, 0x34, 0x37, 0x35, 0x34, 0x31, 0x20,0x2B, 0x20, 0x28, 0x20, 0x34, 0x36, 0x39, 0x37, 0x35, 0x20,0x2B, 0x20, 0x28, 0x20, 0x35, 0x33, 0x37, 0x36, 0x39, 0x20,0x00, 0x2A, 0x20, 0x28, 0x20, 0x39, 0x34, 0x30, 0x30, 0x35,0x20, 0x2B, 0x20, 0x00, 0x28, 0x20, 0x28, 0x20, 0x37, 0x32,0x39, 0x31, 0x34, 0x20, 0x00, 0x2B, 0x20, 0x28, 0x20, 0x35,0x31, 0x33, 0x37, 0x20, 0x2B, 0x20, 0x28, 0x20, 0x00, 0x38,0x37, 0x35, 0x34, 0x34, 0x20, 0x2A, 0x20, 0x00, 0x37, 0x31,0x35, 0x38, 0x33, 0x20, 0x2B, 0x20, 0x28, 0x20, 0x00, 0x32,0x30, 0x33, 0x37, 0x30, 0x20, 0x2B, 0x20, 0x28, 0x20, 0x00,0x33, 0x37, 0x39, 0x36, 0x38, 0x20, 0x00, 0x2A, 0x20, 0x28,0x20, 0x31, 0x37, 0x34, 0x37, 0x38, 0x20, 0x2B, 0x20, 0x28,0x20, 0x28, 0x20, 0x34, 0x30, 0x35, 0x33, 0x32, 0x20, 0x2B,0x20, 0x28, 0x20, 0x00, 0x31, 0x30, 0x30, 0x38, 0x39, 0x20,0x2B, 0x20, 0x28, 0x20, 0x31, 0x33, 0x33, 0x33, 0x32, 0x20,0x2A, 0x20, 0x28, 0x20, 0x00, 0x28, 0x20, 0x32, 0x34, 0x31,0x37, 0x30, 0x20, 0x00, 0x2B, 0x20, 0x28, 0x20, 0x34, 0x36,0x38, 0x34, 0x35, 0x20, 0x2A, 0x20, 0x28, 0x20, 0x31, 0x36,0x30, 0x34, 0x38, 0x20, 0x2B, 0x20, 0x00, 0x32, 0x33, 0x31,0x34, 0x32, 0x20, 0x2A, 0x20, 0x28, 0x20, 0x33, 0x31, 0x38,0x39, 0x35, 0x20, 0x2B, 0x20, 0x28, 0x20, 0x36, 0x32, 0x33,0x38, 0x36, 0x20, 0x2A, 0x20, 0x28, 0x20, 0x00, 0x31, 0x32,0x31, 0x37, 0x39, 0x20, 0x00, 0x28, 0x20, 0x39, 0x34, 0x35,0x35, 0x32, 0x20, 0x2B, 0x20, 0x28, 0x20, 0x28, 0x20, 0x28,0x20, 0x35, 0x32, 0x39, 0x31, 0x38, 0x20, 0x00, 0x2B, 0x20,0x28, 0x20, 0x39, 0x31, 0x35, 0x38, 0x30, 0x20, 0x2B, 0x20,0x28, 0x20, 0x00, 0x28, 0x20, 0x28, 0x20, 0x33, 0x38, 0x34,0x31, 0x32, 0x20, 0x2B, 0x20, 0x28, 0x20, 0x39, 0x31, 0x35,0x33, 0x37, 0x20, 0x2A, 0x20, 0x28, 0x20, 0x37, 0x30, 0x20,0x00, 0x2B, 0x20, 0x28, 0x20, 0x39, 0x38, 0x35, 0x39, 0x34,0x20, 0x2A, 0x20, 0x28, 0x20, 0x28, 0x20, 0x33, 0x35, 0x32,0x37, 0x35, 0x20, 0x00, 0x2B, 0x20, 0x28, 0x20, 0x36, 0x32,0x39, 0x31, 0x32, 0x20, 0x2A, 0x20, 0x00, 0x28, 0x20, 0x34,0x37, 0x35, 0x35, 0x20, 0x2B, 0x20, 0x28, 0x20, 0x00, 0x31,0x36, 0x37, 0x33, 0x37, 0x20, 0x2A, 0x20, 0x28, 0x20, 0x32,0x37, 0x35, 0x39, 0x35, 0x20, 0x00, 0x2B, 0x20, 0x28, 0x20,0x28, 0x20, 0x34, 0x33, 0x35, 0x35, 0x31, 0x20, 0x2B, 0x20,0x00, 0x28, 0x20, 0x36, 0x34, 0x34, 0x38, 0x32, 0x20, 0x2A,0x20, 0x33, 0x35, 0x35, 0x30, 0x20, 0x00, 0x29, 0x20, 0x29,0x20, 0x2D, 0x20, 0x32, 0x31, 0x30, 0x33, 0x31, 0x20, 0x29,0x20, 0x29, 0x20, 0x00, 0x29, 0x20, 0x29, 0x20, 0x29, 0x20,0x29, 0x20, 0x2D, 0x20, 0x35, 0x37, 0x35, 0x35, 0x33, 0x20,0x29, 0x20, 0x00, 0x29, 0x20, 0x2D, 0x20, 0x38, 0x39, 0x38,0x38, 0x33, 0x20, 0x29, 0x20, 0x2D, 0x20, 0x33, 0x38, 0x39,0x30, 0x30, 0x20, 0x29, 0x20, 0x29, 0x20, 0x00, 0x29, 0x20,0x2D, 0x20, 0x31, 0x39, 0x35, 0x31, 0x37, 0x20, 0x29, 0x20,0x2D, 0x20, 0x00, 0x37, 0x39, 0x30, 0x38, 0x32, 0x20, 0x29,0x20, 0x29, 0x20, 0x29, 0x20, 0x29, 0x20, 0x29, 0x20, 0x29,0x20, 0x29, 0x20, 0x29, 0x20, 0x00, 0x2D, 0x20, 0x37, 0x30,0x36, 0x34, 0x33, 0x20, 0x29, 0x20, 0x29, 0x20, 0x00, 0x35,0x35, 0x33, 0x35, 0x30, 0x20, 0x29, 0x20, 0x29, 0x20, 0x29,0x20, 0x00, 0x29, 0x20, 0x29, 0x20, 0x2D, 0x20, 0x34, 0x30,0x33, 0x30, 0x31, 0x20, 0x29, 0x20, 0x29, 0x20, 0x00, 0x29,0x20, 0x29, 0x20, 0x2D, 0x20, 0x38, 0x33, 0x30, 0x36, 0x35,0x20, 0x29, 0x20, 0x29, 0x20, 0x00, 0x29, 0x20, 0x29, 0x20,0x29, 0x20, 0x2D, 0x20, 0x00, 0x35, 0x32, 0x34, 0x36, 0x30,0x20, 0x00, 0x29, 0x20, 0x29, 0x20, 0x2D, 0x20, 0x34, 0x39,0x34, 0x32, 0x38, 0x20, 0x29, 0x20, 0x2D, 0x20, 0x39, 0x34,0x36, 0x38, 0x36, 0x20, 0x00, 0x29, 0x20, 0x29, 0x20, 0x29,0x20, 0x29, 0x20, 0x29, 0x20, 0x29, 0x20, 0x2D, 0x20, 0x31,0x36, 0x35, 0x33, 0x20, 0x29, 0x20, 0x00, 0x2D, 0x20, 0x36,0x35, 0x32, 0x31, 0x37, 0x20, 0x29, 0x20, 0x00, 0x29, 0x20,0x29, 0x20, 0x2D, 0x20, 0x34, 0x33, 0x38, 0x32, 0x37, 0x20,0x29, 0x20, 0x00, 0x36, 0x36, 0x35, 0x36, 0x32, 0x20, 0x29,0x20, 0x29, 0x20, 0x00 };
        unsigned char *p;
        int address[] = { 0x140 ,0x14C ,0x153 ,0x162 ,0x177 ,0x18B ,0x1A9 ,0x1C8 ,0x1D3 ,0x1EB ,0x1FE ,0x25E ,0x207,0x21C,0x227,0x246,0x261,0x270,0x28B,0x298,0x2A3,0x2B1,0x25C,0x2BA,0x2C5,0x2D0,0x2D7,0x2F2,0x307,0x310,0x25E,0x327,0x346,0x3DC,0x34D,0x364,0x373,0x38F,0x3A6,0x3B3,0x3BF,0x3D0,0x3DF,0x3EF,0x400,0x44B,0x413,0x42C,0x43B,0x44F,0x452,0x490,0x45F,0x46C,0x47D,0x48E,0x497,0x49E,0x4B5,0x4CB,0x445,0x445,0x4D6,0x44D,0x44D,0x494,0x4E5,0x44F };
        int i;
        for (i = 0; i  flag:hctf{P0l1sh_Duck_Tast3s_D3l1ci0us_D0_U_Th1nk?}
# Crypto
## xor game
加密方式是一个key对明文循环异或。可以通过统计词频逐步确定key的长度，key每一字节可能的字符，并最终确定key。  
详见：
> flag:hctf{xor_is_interesting!@#}
## xor?rsa
    gcd(e,(p-1)*(q-1)) ==  1 或 5
    PRZZ. = PolynomialRing(Zmod(n))                                                                                                                                           
    e=5                                                                                                                                                                              
    g1 = x**e - c1                                                                                                                                                                   
    g2 = (x + y)**e - c2                                                                                                                                                             
    q1 = g1.change_ring(PRZZ)                                                                                                                                                        
    q2 = g2.change_ring(PRZZ)                 
    h = q2.resultant(q1)
    # need to switch to univariate polynomial ring
    # because .small_roots is implemented only for univariate
    h = h.univariate_polynomial() # x is hopefully eliminated
    h = h.change_ring(PRx).subs(y=xn)
    h = h.monic()
    roots = h.small_roots(X=2**40, beta=0.3)
    assert roots, "Failed1"
    print roots
    diff = roots[0]
    if diff > 2**32:
    ^Idiff = -diff
    ^Ic1, c2 = c2, c1
    print "Difference:", diff
    x = PRx.gen() # otherwise write xn
    g1 = x**e - c1
    g2 = (x + diff)**e - c2
    # gcd
    while g2:
        g1, g2 = g2, g1 % g2
    g = g1.monic()
    assert g.degree() == 1, "Failed 2"
    # g = xn - msg
    msg = -g[0]
    # convert to str
    h = int(msg)
    print h
    print h+diff+int(n)
    print pow(h,e,n)==c2
    print pow(h+diff+int(n),e,n)==c1
    [555991320628]
    Difference: 30290716620841793899146321994568496023252750053596786876611475641947678118979038294637697826463401155985354968691924997404322605452761001870059955726773324447235980051453346857315677224128047844328773148916021249443603911449637550383591704762386567005058018282308230728051353460058754497672179057700421161074247576457866689070241760427131473043482158810401561313321107974516682297500997022575554884396342862329278222526955343597739332964020816251046425193373642417717381045917123341522209552123269466378004786062763182259628931179308017861705958534248179294164338076634721107705015038219232572426688683766371284897691
    2932093288739759017131922832119390508643918321984410853
    2583475209918998219801122954379479992650705870599189051232760719646159719619265755438890096354620462669930665081971091894103757999670741311927625969755788747121762969679475351111489399600154562955287885202707223159968667071096275208629651189581238338521064833101272863069918738346837635731886529517213961300297787649206078555692261069713014027837983048971538947661147625228754443387901174007943169362738696168181450776372832045356985606263519804479231156806800627979267259445511274742157175638821617100281049528076791498180668899828383550671492688471895766846725
    29320932887397590171319228321193905086439183219844108532583475209918998219801122954379479992650705870599189051232760719646159719619265755438890096354620462669930665081971091894103757999670741311927625969755788747121762969679475351111489399600154562955287885202707223159968667071096275208629651189581238338521064833101272863069918738346837635731886529517213961300297787649206078555692261069713014027837983048971538947661147625228754443387901174007943169362738696168181450776372832045356985606263519804479231156806800627979267259445511274742157175638821617100281049528076791498180668899828383550671492688471339775526097
    True
    True
    m1>n
    $ nc rsa.2018.hctf.io 10086
    Welcome to flag getting system
    give me your token > uvm73jg2AFMECo71DIZRZh39MRqFOI2w
    n=25592302757401106056280234286012383062484235707312989164780308492200872167178574218000602787441725428426717090949654793218739897595107846312672513664085694001801608518590887961938014572669134367079646488310507850336050513025245626467377203241863607999325036917193601505657352182776079774009206570703186219337621551483393737290768330888410101854796481874297267599196619674335794044792069495519108109223425797503203570902994567568592084357934714964501535669657986930473369655871619588840794482884419083552554342422741496026024222914198234788143213719654823547100803532256499706071071498660891381652493208839656686738591
    c1=11690907386363649212644384569199890345770981654517160939164832907826289543551982063610220071961849700921425395140710365953159185666787437146246103625442409812945763501692710328379204747353203817255953902210586779053720571365060460732531241991577093405485858643711950523138375131702989487907339644510108399052427817874710822165262868315224968612849619299795358325603907678116650332797927084567328392462191457872943785013598632574175405870522070537466045471567735827773482872427192699293399500104479883708854100100037846415639145150417103704144637686300025634446944846253236091651808972028854707078113064878063321580768
    c2=23770070496907514366297412141037667449588865437018376514390695607679676986001301621556277980415958296151188882273930436528902856816100291709779231712294522684117809069750177322126984516684260974647430093063414228366055366719654277299019192226831695082426012957631732846185788410351093879858771697093954122318192675776953344922612983099660105822719741335067051112337020739320099859836973578421498466368851839142137257484447051174094093504567507429730727091330591571603022555924970273436929750572410470501844270943580821467782713936322388728653073754746083727342190374906283014672336536995144296014243057684586151967259
    now give me you answer
    19192367044417009574476120231142453777715164401167583116818642067057559425607428214230005291096592117565507572856314816467238405776265673021259189682385525688967473815563074054515033828997755186215692527330397977283770408982658352080214663787539650267242917359134595104066485839193632212316099201917721667135306930187402153500605057513457619657478967568643046456602317538660008316345868692641873925382002676220521051279760109657536301500377507578497888384179794081375588346813744918914579093924393594445064745990498754455457360554748737767889831035781211814570683813231972744037861524811042088953081214510724634343988
    19192367044417009574476120231142453777715164401167583116818642067057559425607428214230005291096592117565507572856314816467238405776265673021259189682385525688967473815563074054515033828997755186215692527330397977283770408982658352080214663787539650267242917359134595104066485839193632212316099201917721667135306930187402153500605057513457619657478967568643046456602317538660008316345868692641873925382002676220521051279760109657536301500377507578497888384179794081375588346813744918914579093924393594445064745990498754455457360554748737767889831035781211814570683813231972744037861524811042088953081214511375412065022
    hctf{1a105ae83a735e0b914f4715aae936b67f297aa424dc10c119ca257ae7f6e508}
当difference很大时，
    [650777721034]
    Difference: 25592302757401106056280234286012383062484235707312989164780308492200872167178574218000602787441725428426717090949654793218739897595107846312672513664085694001801608518590887961938014572669134367079646488310507850336050513025245626467377203241863607999325036917193601505657352182776079774009206570703186219337621551483393737290768330888410101854796481874297267599196619674335794044792069495519108109223425797503203570902994567568592084357934714964501535669657986930473369655871619588840794482884419083552554342422741496026024222914198234788143213719654823547100803532256499706071071498660891381652493208839005909017557
    19192367044417009574476120231142453777715164401167583116818642067057559425607428214230005291096592117565507572856314816467238405776265673021259189682385525688967473815563074054515033828997755186215692527330397977283770408982658352080214663787539650267242917359134595104066485839193632212316099201917721667135306930187402153500605057513457619657478967568643046456602317538660008316345868692641873925382002676220521051279760109657536301500377507578497888384179794081375588346813744918914579093924393594445064745990498754455457360554748737767889831035781211814570683813231972744037861524811042088953081214511375412065022
    19192367044417009574476120231142453777715164401167583116818642067057559425607428214230005291096592117565507572856314816467238405776265673021259189682385525688967473815563074054515033828997755186215692527330397977283770408982658352080214663787539650267242917359134595104066485839193632212316099201917721667135306930187402153500605057513457619657478967568643046456602317538660008316345868692641873925382002676220521051279760109657536301500377507578497888384179794081375588346813744918914579093924393594445064745990498754455457360554748737767889831035781211814570683813231972744037861524811042088953081214510724634343988
    True
    True
m2 = h  
m1 = h+diff+int(n)
搞定
> flag:hctf{1a105ae83a735e0b914f4715aae936b67f297aa424dc10c119ca257ae7f6e508}
# blockchain
## bet2loss
描述  
0x006b9bc418e43e92cf8d380c56b8d4be41fda319 for ropsten and open source  
D2GBToken is onsale. Now New game is coming.  
We’ll give everyone 1000 D2GBTOKEN for playing. only God of Gamblers can get
flag.  
URL   
合约部署在ropsten测试网络，地址为0x006b9bc418e43e92cf8d380c56b8d4be41fda319，而且是开源的。
访问网站
    Welcome to Bet2Loss Game!
    only winner can get flag!
    1、Bet2Loss Game is based on Ropsten. open source on xxx.
    2、Every New gamer will airdrop 1000 B2GB for betting.
    3、Game Rule: Set a modulo (2 - 40), guess a number (0-(modulo-1)), and set a betnumber (1 - balanceOf(you) and less than 100000). If you win, you will get betnumber*modulo B2GB.