重写单个运算符（如+、-、%
等）时，它们会被隐式地重写
索引运算符
[]
不能直接重载索引运算符。第2
章介绍的索引器成员类型允许在
类和结构上支持索引运算符
类型强制转换运算符
（）
不能直接重载类型强制转换运算
符。用户定义的类型强制转换
（本章后面介绍）允许定义定制
的类型强制转换行为
  注意： 为什么要重载true和false操作符？有一个很好的原因：根据所使用的
技术或框架，哪些整数值代表true或false是不同的。在许多技术中，0是false,1是true；
其他技术把非0值定义为true，还有一些技术把-1定义为false。
8.6 实现自定义的索引运算符
自定义索引器不能使用运算符重载语法来实现，但是它们可以用与属性非常相似的语
法来实现。
首先看看数组元素的访问。这里创建一个int元素数组。第二行代码使用索引器来访
问第二个元素，并给它传递42。第三行使用索引器来访问第三个元素，并给该元素传递变
量x。
    int[] arr1 = {1, 2, 3};
    arr1[1] = 42;
    int x = arr1[2];
  注意： 数组在第7章阐述。
CustomIndexerSample使用如下依赖项和名称空间：
依赖项：
    NETStandard.Library
名称空间：
    System
    System.Collections.Generic
    System.Linq
    static System.Console
要创建自定义索引器，首先要创建一个Person类，其中包含FirstName、LastName和
Birthday只读属性（代码文件CustomIndexerSample/Person.cs）：
    public class Person
    {
      public DateTime Birthday { get; }
      public string FirstName { get;  }
      public string LastName { get;  }
      public Person(string firstName, string lastName, DateTime birthDay)
      {
        FirstName = firstName;
        LastName = lastName;
        Birthday = birthDay;
      }
      public override string ToString() => $"{FirstName} {LastName}";
    }
类PersonCollection定义了一个包含Person元素的私有数组字段，以及一个可以传递许
多Person对象的构造函数（代码文件CustomIndexerSample/PersonCollection.cs）：
    public class PersonCollection
    {
      private Person[] _people;
      public PersonCollection(params Person[] people)
      {
        _people = people.ToArray();
      }
    }
为了允许使用索引器语法访问PersonCollection并返回Person对象，可以创建一个索引
器。索引器看起来非常类似于属性，因为它也包含get和set访问器。两者的不同之处是名
称。指定索引器要使用this关键字。this关键字后面的括号指定索引使用的类型。数组提供
int类型的索引器，所以这里使用int类型直接把信息传递给被包含的数组people。get和set
访问器的使用非常类似于属性。检索值时调用get访问器，在右边传递Person对象时调用
set访问器。
    public Person this[int index]
    {
      get { return _people[index]; }
      set { _people[index] = value; }
    }
对于索引器，不能仅定义int类型作为索引类型。任何类型都是有效的，如下面的代
码所示，其中把DateTime结构作为索引类型。这个索引器用来返回有指定生日的每个人。
因为多个人员可以有相同的生日，所以不是返回一个Person对象，而是用接口IEnumerable
返回一个Person对象列表。所使用的Where方法根据lambda表达式进行过滤。
Where方法在名称空间System.Linq中定义：
    public IEnumerable this[DateTime birthDay]
    {
      get { return _people.Where(p => p.Birthday == birthDay); }
    }
使用DateTime类型的索引器检索人员对象，但不允许把人员对象设置为只有get访问
器，而没有set访问器。在C# 
6中有一个速记符号，可使用表达式主体的成员创建相同的
代码（属性也可使用该语法）：
    public IEnumerable this[DateTime birthDay] =>
      _people.Where(p => p.Birthday == birthDay);
示例应用程序的Main方法创建一个PersonCollection对象，给构造函数传递四个Person
对象。在第一个WriteLine方法中，使用索引器的get访问器和int参数访问第三个元素。在
foreach循环中，带有DateTime参数的索引器用来传递指定的日期（代码文件
CustomIndexerSample/Program.cs）：
    static void Main()
    {
      var p1 = new Person("Ayrton", "Senna", new DateTime(1960, 3, 21));
      var p2 = new Person("Ronnie", "Peterson", new DateTime(1944, 2, 14));
      var p3 = new Person("Jochen", "Rindt", new DateTime(1942, 4, 18));
      var p4 = new Person("Francois", "Cevert", new DateTime(1944, 2, 25));
      var coll = new PersonCollection(p1, p2, p3, p4);
      WriteLine(coll[2]);
      foreach (var r in coll[new DateTime(1960, 3, 21)])
      {
        WriteLine(r);
      }
      ReadLine();
    }
运行程序，第一个WriteLine方法把Jochen 
Rindt写到控制台；foreach循环的结果是
Ayrton Senna，因为他的生日是第二个索引器中指定的日期。
8.7 实现用户定义的类型强制转换
本章前面（见8.3.1节中关于显式转换的部分）介绍了如何在预定义的数据类型之间转
换数值，这通过类型强制转换过程来完成。C#允许进行两种不同类型的强制转换：隐式
强制转换和显式强制转换。本节将讨论这两种类型的强制转换。
显式强制转换要在代码中显式地标记强制转换，即应该在圆括号中写出目标数据类
型：
    int i = 3;
    long l = i;           // implicit
    short s = (short)i;    // explicit
对于预定义的数据类型，当类型强制转换可能失败或丢失某些数据时，需要显式强制
转换。例如：
● 把int转换为short时，short可能不够大，不能包含对应int的数值。
● 
把有符号的数据类型转换为无符号的数据类型时，如果有符号的变量包含一个负
值，就会得到不正确的结果。
● 把浮点数转换为整数数据类型时，数字的小数部分会丢失。
● 把可空类型转换为非可空类型时，null值会导致异常。
此时应在代码中进行显式强制转换，告诉编译器你知道存在丢失数据的危险，因此编
写代码时要把这种可能性考虑在内。
C#允许定义自己的数据类型（结构和类），这意味着需要某些工具支持在自定义的
数据类型之间进行类型强制转换。方法是把类型强制转换运算符定义为相关类的一个成员
运算符。类型强制转换运算符必须标记为隐式或显式，以说明希望如何使用它。我们应遵
循与预定义的类型强制转换相同的指导原则；如果知道无论在源变量中存储什么值，类型
强制转换总是安全的，就可以把它定义为隐式强制转换。然而，如果某些数值可能会出
错，如丢失数据或抛出异常，就应把数据类型转换定义为显式强制转换。
  注意： 如果源数据值会使类型强制转换失败，或者可能会抛出异常，就应把
任何自定义类型强制转换定义为显式强制转换。
定义类型强制转换的语法类似于本章前面介绍的重载运算符。这并不是偶然现象，类
型强制转换在某种情况下可以看作是一种运算符，其作用是从源类型转换为目标类型。为
了说明这种语法，下面的代码从本节后面介绍的结构Currency示例中节选而来：
    public static implicit operator float (Currency value)
    {
      // processing
    }
运算符的返回类型定义了类型强制转换操作的目标类型，它有一个参数，即要转换的
源对象。这里定义的类型强制转换可以隐式地把Currency型的值转换为float型。注意，如
果数据类型转换声明为隐式，编译器就可以隐式或显式地使用这个转换。如果数据类型转
换声明为显式，编译器就只能显式地使用它。与其他运算符重载一样，类型强制转换必须
同时声明为public和static。
  注意： C++开发人员应注意，这种情况与C++中的用法不同，在C++中，类
型强制转换用于类的实例成员。
8.7.1 实现用户定义的类型强制转换
本节将在示例SimpleCurrency中介绍隐式和显式的用户定义类型强制转换用法。在这
个示例中，定义一个结构Currency，它包含一个正的USD（$）金额。C#为此提供了
decimal类型，但如果要进行比较复杂的财务处理，仍可以编写自己的结构和类来表示相
应的金额，在这样的类上实现特定的方法。
  注意： 类型强制转换的语法对于结构和类是一样的。本示例定义了一个结
构，但把Currency声明为类也是可行的。
首先，Currency结构的定义如下所示（代码文件CastingSample/Currency.cs）：
    public struct Currency
    {
      public uint Dollars { get; }
      public ushort Cents { get; }
      public Currency(uint dollars, ushort cents)
      {
        Dollars = dollars;
        Cents = cents;
      }
      public override string ToString() => $"${Dollars}.{Cents, -2:00}";
    }
Dollars和Cents属性使用无符号的数据类型，可以确保Currency实例只能包含正值。采
用这样的限制是为了在后面说明显式强制转换的一些要点。可以像这样使用一个类来存储
公司员工的薪水信息。员工的薪水不会是负值！
下面先假定要把Currency实例转换为float值，其中float值的整数部分表示美元。换言
之，应编写下面的代码：
    var balance = new Currency(10, 50);
    float f = balance; // We want f to be set to 10.5
为此，需要定义一种类型强制转换。给Currency的定义添加下述代码：
    public static implicit operator float (Currency value) =>
      value.Dollars + (value.Cents/100.0f);
这种类型强制转换是隐式的。在本例中这是一种合理的选择，因为在Currency的定义
中，可以存储在Currency中的值也都可以存储在float数据中。在这种强制转换中，不应出
现任何错误。
  注意： 
这里有一点欺骗性：实际上，当把uint转换为float时，精确度会降
低，但Microsoft认为这种错误并不重要，因此把从uint到float的类型强制转换都当作隐
式转换。
但是，如果把float型转换为Currency型，就不能保证转换肯定成功了；float型可以存
储负值，而Currency实例不能，且float型存储数值的数量级要比Currency型的（uint）
Dollars字段大得多。所以，如果float型包含一个不合适的值，把它转换为Currency型就会
得到意想不到的结果。因此，从float型转换到Currency型就应定义为显式转换。下面是我
们的第一次尝试，这次不会得到正确的结果，但有助于解释原因：
    public static explicit operator Currency (float value)
    {
      uint dollars = (uint)value;
      ushort cents = (ushort)((value-dollars)＊100);
      return new Currency(dollars, cents);
    }
下面的代码现在可以成功编译：
    float amount = 45.63f;
    Currency amount2 = (Currency)amount;
但是，下面的代码会抛出一个编译错误，因为它试图隐式地使用一个显式的类型强制
转换：
    float amount = 45.63f;
    Currency amount2 = amount;  // wrong
把类型强制转换声明为显式，就是警告开发人员要小心，因为可能会丢失数据。但这
不是我们希望的Currency结构的行为方式。下面编写一个测试程序，并运行该示例。其中
有一个Main（）方法，它实例化一个Currency结构，并试图进行几次转换。在这段代码的
开头，以两种不同的方式计算balance的值，因为要使用它们来说明后面的内容（代码文
件CastingSample/Program.cs）：
    static void Main()
    {
      try
      {
        var balance = new Currency(50,35);
        WriteLine(balance);
        WriteLine($"balance is {balance}"); // implicitly invokes ToString
        float balance2= balance;
        WriteLine($"After converting to float, = {balance2}");
        balance = (Currency) balance2;
        WriteLine($"After converting back to Currency, = {balance}");
        WriteLine("Now attempt to convert out of range value of " +
                      "-$50.50 to a Currency:");
        checked
        {
        balance = (Currency) (-50.50);
        WriteLine($"Result is {balance}");
        }
      }
      catch(Exception e)
      {
        WriteLine($"Exception occurred: {e.Message}");
      }
    }
注意，所有的代码都放在一个try块中，以捕获在类型强制转换过程中发生的任何异
常。在checked块中还添加了把超出范围的值转换为Currency的测试代码，以试图捕获负
值。运行这段代码，得到如下所示的结果：
    50.35
    Balance is $50.35
    After converting to float, = 50.35
    After converting back to Currency, = $50.34
    Now attempt to convert out of range value of -$50.50 to a Currency:
    Result is $4294967246.00
这个结果表示代码并没有像我们希望的那样工作。首先，从float型转换回Currency型
得到一个错误的结果$50.34，而不是$50.35。其次，在试图转换明显超出范围的值时，没
有生成异常。
第一个问题是由舍入错误引起的。如果类型强制转换用于把float值转换为uint值，计
算机就会截去多余的数字，而不是执行四舍五入。计算机以二进制而非十进制方式存储数
字，小数部分0.35不能用二进制小数来精确表示（像1/3这样的分数不能精确地表示为十
进制小数，它应等于循环小数0.3333）。所以，计算机最后存储了一个略小于0.35的值，
它可以用二进制格式精确地表示。把该数字乘以100，就会得到一个小于35的数字，它截
去了34美分。显然在本例中，这种由截去引起的错误是很严重的，避免该错误的方式是确
保在数字转换过程中执行智能的四舍五入操作。
幸运的是，Microsoft编写了一个类System.Convert来完成该任务。System.Convert对象
包含大量的静态方法来完成各种数字转换，我们需要使用的是Convert.ToUInt16（）。注
意，在使用System.Convert类的方法时会造成额外的性能损失，所以只应在需要时使用它
们。
下面看看为什么没有抛出期望的溢出异常。此处的问题是溢出异常实际发生的位置根
本不在Main（）例程中——它是在强制转换运算符的代码中发生的，该代码在Main（）
方法中调用，而且没有标记为checked。
其解决方法是确保类型强制转换本身也在checked环境下进行。进行了这两处修改
后，修订的转换代码如下所示。
    public static explicit operator Currency (float value)
    {
      checked
      {
        uint dollars = (uint)value;
        ushort cents = Convert.ToUInt16((value-dollars)＊100);
        return new Currency(dollars, cents);
      }
    }
注意，使用Convert.ToUInt16（）计算数字的美分部分，如上所示，但没有使用它计
算数字的美元部分。在计算美元值时不需要使用System.Convert，因为在此我们希望截去
float值。
  注意： System.Convert类的方法还执行它们自己的溢出检查。因此对于本例
的情况，不需要把对Convert.ToUInt16（）的调用放在checked环境下。但把value显式地
强制转换为美元值仍需要checked环境。
这里没有给出这个新的checked强制转换的结果，因为在本节后面还要对
SimpleCurrency示例进行一些修改。
  注意： 如果定义了一种使用非常频繁的类型强制转换，其性能也非常好，就
可以不进行任何错误检查。如果对用户定义的类型强制转换和没有检查的错误进行了
清晰的说明，这也是一种合理的解决方案。
1．类之间的类型强制转换
Currency示例仅涉及与float（一种预定义的数据类型）来回转换的类。但类型转换不
一定会涉及任何简单的数据类型。定义不同结构或类的实例之间的类型强制转换是完全合
法的，但有两点限制：
● 如果某个类派生自另一个类，就不能定义这两个类之间的类型强制转换（这些类型
的强制转换已经存在）。
● 类型强制转换必须在源数据类型或目标数据类型的内部定义。
为说明这些要求，假定有如图8-1所示的类层次结构。