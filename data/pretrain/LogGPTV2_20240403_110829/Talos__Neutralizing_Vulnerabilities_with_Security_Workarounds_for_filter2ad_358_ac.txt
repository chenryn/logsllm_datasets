IV. TALOS
We now describe how Talos inserts SWRRs into application
code without introducing new security vulnerabilities. First, we
explain how Talos sets about instrumenting an application with
SWRRs. Then, we detail the heuristics Talos uses to identify
error-handling code within an application for the purposes of
SWRR instrumentation.
A. Inserting SWRRs
When designing Talos, we had to decide on the granularity
of code that each inserted SWRR should enable or disable. The
granularity of code that is protected by each SWRR has a bear-
ing on its security and unobtrusiveness. This is because error-
handling code can broadly be classiﬁed into two categories:
intra-procedural error-handlers that operate completely within
a function, and inter-procedural error-handlers that are unable
to completely handle the error within the function and must
expose the error to the function’s caller. The error handlers
in the former category are difﬁcult for Talos to use as they
are tightly coupled with the path within the function used to
invoke the error-handling path. For example, they may free
memory that they know was allocated on the path leading
to the error-handling code, or conversely fail to free memory
since they know the paths leading to the error-handling code
did not allocate it. If Talos redirects execution to such an error-
handling path without understanding the internal semantics of
the function, it could result in a double-free bug.
However, inter-procedural error-handling code that exposes
the error to the caller must be more conservative because it
/* SWRR inserted at top of function */
if (SWRR_enabled())
1 int example_function(...) {
2
3
4
5
6
7
8 }
/* original function body */
...
return ;
Listing 1. SWRR instrumentation - In-place Deployment
/* SWRR inserted at top of function */
return ;
1 int example_function(...) {
2
3
4
5
6
7 }
/* original function body */
...
Listing 2. SWRR instrumentation - Patch-based Deployment
must be written in such a way that correctness guarantees are
met independently of the calling context. As a result, such
error-handling code often seeks to ensure that modiﬁcations
made to application state by the function are undone and that
an appropriate value is returned to the caller so that the caller
can then handle the failure. For example, an input sanitization
function that fails due to an out-of-memory error might free
any resources acquired up to that point and then return an error
code to the caller so that the caller can conservatively reject
the unsanitized input. This intuition implies that functions that
contain such error-handling code can safely do nothing as
long as the caller is notiﬁed that the function has encountered
an error. As a result, Talos instruments SWRRs to enable or
disable code at the granularity of a function. While there is
no guarantee that this intuition is always true, we ﬁnd that
it does hold for a large number of cases allowing Talos to
instrument applications with SWRRs that are secure and pro-
vide better effective coverage than conﬁguration workarounds
as we demonstrate in our evaluation in Section VI.
Given that an SWRR option should control the execution
of a function, instrumenting a function with an SWRR is
fairly straightforward. To instrument a function, Talos adds
the code in Listing 1 or Listing 2 to the function, depending
on whether in-place deployment or patch-based deployment is
used. For in-place deployment, a check is ﬁrst performed on
line 3 to determine whether the corresponding SWRR option
(SWRR option) is enabled; if it is, the entire function body is
skipped and the error code (error code) that has been statically
extracted from the error-handling code is returned to the caller
on line 4. In this section, the text will mostly assume in-place
deployment since it is the slightly more complex of the two
options.
Since a suitable error code must be found for each function
instrumented with an SWRR, Talos can only instrument a
function if: (1) it can determine if the function has inter-
procedural error-handling code, and (2) it can extract
the
value that the error-handling code returns to be used as the
623623
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:15:48 UTC from IEEE Xplore.  Restrictions apply. 
procedure FIND FUNCTIONS(F unctions)
to instrument ← ∅
SW RR map ← ∅
for f ∈ F unctions do
(cid:2) Apply 2 main heuristics
if error logging(f) then
to instrument ← {f, error code(f )}
SW RR map ← {f, new option()}
remove(F unctions, f )
else if NULL return(f) then
to instrument ← {f, N U LL}
SW RR map ← {f, new option()}
remove(F unctions, f )
end if
end for
for f ∈ F unctions do (cid:2) Apply 2 extension heuristics
if f(cid:2) = propagate(f, to instrument) then
SW RR map ← f, new option()}
to instrument ← {f, error code(f(cid:2))}
remove(F unctions, f )
end if
end for
for f ∈ F unctions do
if f(cid:2) = indirect(f, to instrument) then
SW RR map ← {f, option(f(cid:2))}
end if
end for
return {to instrument, SW RR map}
end procedure
Fig. 2. Talos algorithm for identifying functions to instrument.
error code. While other work has used dynamic proﬁling
to try to identify error-handling code [52], this requires a
comprehensive suite of test inputs to ﬁnd all error-handling
code. We assume this is not always available, so to maintain
a low deployment cost, Talos relies exclusively on static
analysis. Talos thus uses several heuristics based on common
programming idioms that are indicative of error-handling code.
The procedure Talos uses for deciding which functions in
an application to instrument has several stages as illustrated in
Figure 2. The procedure takes as input the set of all functions
in the application; it returns a set of functions capable of
being instrumented as well as a map of functions to their
corresponding SWRR options. Talos ﬁrst iterates over each
function, applying the two main heuristics used to statically
detect if the function has error-handling code. If such code
is detected,
then Talos adds the function along with the
error code extracted from the error-handling code to the set
of functions it will instrument and removes it from further
consideration. In addition, Talos creates a new SWRR option
for the function and adds it to the SWRR option-to-function
map it maintains. After all functions have been checked with
the two main heuristics, Talos then applies the two “extension”
heuristics to identify cases where it can extend error-handling
code into a function’s caller or callee. Talos uses the error
624624
NUMBER OF FUNCTIONS AND NUMBER OF ERROR-LOGGING FUNCTIONS.
TABLE III
App.
lighttpd
apache
squid
proftpd
sqlite
Functions
665
2,082
1,346
1,092
1,562
Error Funcs.
1
4
1
1
3
propagation heuristic to identify cases where the error code
for a function can be used in an SWRR for the callers of
the function, even if the callers themselves do not have error-
handling code. Finally, Talos also uses the indirect heuristic
to identify any remaining cases where a function doesn’t have
error-handling code but can be disabled by a caller (or callers)
that have been instrumented by an SWRR. In these cases, the
SWRR map is updated so that this function is also associated
with the SWRR option of its caller(s).
B. Main heuristics
We ﬁrst describe the two main heuristics Talos uses to iden-
tify error-handling code in functions. We will then describe the
two extension heuristics.
1) Error-logging function heuristic: The ﬁrst heuristic is
used to identify program paths that call error-logging func-
tions. Error-logging functions are called to log information
when the application encounters an error. To use this heuristic,
Talos requires developers to specify the error-logging functions
in an application. For each of the surveyed applications,
Table III lists the total number of functions and the number of
error-logging functions, where we have manually identiﬁed
the latter by inspecting the source code. We can see that,
even in fairly large applications with hundreds or thousands
of functions, many applications have very few and, in many
cases, only one error-logging function. Anecdotally, we also
ﬁnd that if there is more than one function, they are still
often easy to ﬁnd because they are all declared within a single
header-ﬁle in the application source code. Thus, we feel that
the effort required for developers to specify the error-logging
functions in an application is quite reasonable.
The presence of an error-logging function is indicative of
error-handling code. However, recall that Talos requires the
error-handling code to be inter-procedural, which means that
it must also signal the error to the function’s caller. Thus,
to identify such code using an error-logging function, Talos
requires the following: (1) the error-handling code must call
an error-logging function, (2) the error-handling code must
return a constant value, and (3) the error-logging function and
return statement must be guarded by a conditional branch. A
conditional check that dominates the error-logging function
indicates that
the path will only be taken under speciﬁc
circumstances and a constant return value is required for
the current function to signal to its caller that it terminated
with an abnormal condition. Listing 3, which shows error-
handling code in Apache 2.2.19, illustrates how real code
ﬁts this heuristic. The error-handling code is only executed
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:15:48 UTC from IEEE Xplore.  Restrictions apply. 
1 if (name == NULL) {
2
3
/* Apache’s error logging function */
ap_log_error(APLOG_MARK, APLOG_ERR, 0, NULL, "Internal
error: pcfg_openfile() called with NULL
filename");
return APR_EBADF; /* indicates to caller that error
4
5 }
occured */
Listing 3. Error-logging code example from Apache
when condition (name == NULL) is true. It then calls the
logging function ap_log_error() and returns the constant
value APR_EBADF to its caller, which indicates that it cannot
proceed because of a bad ﬁlename.
2) NULL return heuristic:
Talos instruments such functions to always return a constant
return value consistent with the error-handling code when the
SWRR is activated (i.e. in place of error code) in Listing 1.
If the error-logging heuristic
does not identify the presence of error-handling code, Talos
next uses the NULL return heuristic. The intuition behind this
heuristic is that when a function that normally returns a pointer
returns NULL instead, it indicates that the function could not
successfully perform its normal operation. This may happen
due to an unexpected error or due to an invalid input.
Talos would instrument such functions with an SWRR that
returns NULL as its error code. However, Talos must be
conservative because not all functions can legally return a
NULL to their callers. If an SWRR were to force such a
function to return NULL, the caller may dereference the value
without checking for NULL and crash the program. To infer
whether a function can return NULL or not, Talos checks that
there is at least one instance of a call to the function where
the caller checks the return value against NULL. The reason
Talos does not do this for all call sites is that in some cases, the
check for NULL may be hard to detect. For example, consider
the case where the caller writes the returned pointer value to
a linked list and then the value is only checked against NULL
when it is dequeued from the linked list.
C. Extension heuristics
We now discuss the two heuristics that Talos uses to extend
coverage from functions that have identiﬁed error-handling
code to those that do not.
1) Error propagation heuristic: This heuristic is based on
the observation that many times the error code returned by
a function is used as a return value by the caller of such
functions. This has the effect of propagating error codes up
the call chain and, as a result, can be used to detect the correct
error codes for both callees and callers of a function.
This error propagation manifests in three ways. First,
some functions have an execution path
we ﬁnd that
function and simply uses the return
that calls another
their own return value.
value of
As illustrated by a simpliﬁed code snippet from lighttpd
in Listing 4, config_insert_values_global calls
the function call as
the callee as
config_insert_values_internal and uses the re-
its own return value at
turn value of
line 3. As a consequence,
the error code of -1 for
config_insert_values_internal, identiﬁed by Ta-
los using the error-logging heuristic at line 10, can be used as
the error code for config_insert_values_global.
Second, the error code can also be translated before it is
propagated up the call chain, as illustrated again in Listing 4.
Here, mod_secdownload_set_defaults checks the re-
turn value of a call to config_insert_values_global
at line 17 and returns a constant value HANDLER_ERROR
at
line 18 if the return value from config_insert_
values_global indicates an error. Unlike in the ﬁrst
case, mod_secdownload_set_defaults does not use
the return value of config_insert_values_global
directly, but translates it to its own error code if the callee
returns an error. To identify this kind of error propagation,
Talos looks for a statement that returns a constant and is
control-dependent on the return value of a function call.
Talos then checks: (1) whether the function in the predicate
has been previously identiﬁed as having error-handling code,
and (2) whether the identiﬁed error code can satisfy the
predicate of the control dependency. If so, the returned value
becomes the error code for the function and Talos marks
the function as eligible for SWRR instrumentation. In the
example, Talos identiﬁes HANDLER_ERROR as the error code
for mod_secdownload_set_defaults.
Third, the error code can be inferred down the call chain
as shown in the code of http_request_parse in Listing
4. http_request_parse has an error path that calls an
error logging function when the return value of the call to
request_check_hostname is not zero. From this, Talos
infers that the error code of request_check_hostname
must be a non-zero value. To identify this kind of error
propagation, Talos checks if any identiﬁed error path is control
dependent on the value of a predicate involving the return
value of a function call. If it is, Talos tries to ﬁnd a constant
value that can satisfy the predicate and then uses that con-
stant value as the error code of the callee of the function.
For this example, Talos identiﬁes 1 as the error code for
request_check_hostname.
2) Indirect heuristic: If a function is only called by func-
tions that have been identiﬁed as eligible for instrumentation,
Talos takes advantage of the fact that by disabling all the
callers of the function, the function itself can be disabled by
SWRRs. In these cases, Talos does not insert any instrumenta-
tion into these functions, but simply updates the SWRR map
to indicate that the function in question can be disabled by
activating one or more other SWRRs.