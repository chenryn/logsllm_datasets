Also, it checks on some factors related to the process which checks on if this action or behavior is
normal for this process ... like adobe reader create a new cmd process or connect to unknown website
which increase the score of this action and mark it as suspicious if there's evidences for that.
Wrong Module Switching Event:
When a special API is called, the EDS checks on:
1.
Check on the criticality of the event (Load strange library, creating strange process (from outside the
program directory) or cmd or ... etc). and gives an initial score.
2.
Check on the caller Eip and the parameters and increase the score or skip the event if everything is
normal
3.
Check on the next call stack and increase or decrease the score ... or skip for low criticality events.
4.
Check for shellcode or ROP chains inside the stack (3 pages only) and increase or decrease the score.
if the score reach a specific limit, it dumps the process and closes it giving a message with the reason of
the termination.
if the score is high but didn't reach the specific limit, it dumps the process and log a warn inside the logs
of the EDS for further investigations.
Heap Overflow Event:
in Heap Overflow, it checks the buffer if it contains shellcode and ROP chains and closes the application
giving a message of heap overflow detected and dumps it before the termination with the Headers
Array for further investigations
Heap Spray Event:
in Heap Spray Events, it checks on 2 randomly chosen chunks (which are parts of the Heap Spray) and
check for ROP chains and shellcodes. if found, the EDS will dump the process and close the application
giving a message with the reason of the termination.
Periodical Scanning:
In the Periodical Scanning, we scans on the following:
Scan on SEH chains on every thread's stack to ensure the continuity of SEH and gives score if found
an overwrite
scans for ROP chains and shellcodes, cyclic patterns and bytes and gives score on that.
scans on Heap Overflow and Heap Spray using the Heap Mitigation Thread.
check on threads running outside all modules or inside stacks.
Check Executable Places in Stack
Check Executable Places in Memory Mapped Files
and many more
On this scan, we give a full picture of possible exploitations on the process and it logs the report on this
periodical scan .. if the score is high ... it terminates the process giving a message of possible exploitation
and dumps the process before it.
Possible Attacks and Defense:
In this section, I will talk about most of exploits nowadays and how this tool could secure from them and
I will talk about possible bypassing techniques and how the mitigations together could co-operate to
close all weaknesses inside it.
ROP Attack Scenario through Stack Overflow:
For a ROP Attack inside Stack using SEH Overflow or overwriting vtable inside the stack. I used (as an
example) a DEP Bypass Exploit which uses VirtualProtect to allow the shellcode to be executed.
Let's take a ROP Chain Example like this:
#ROP FOR LOAD "kernel32.dll"
my $rop = pack('V',0x00418764); # POP ESI # RETN
$rop .= pack('V',0x672CA660); # Address to LoadLibraryA
$rop .= pack('V',0x00412d09); # POP EBP # RETN
$rop .= pack('V',0x004AD39B); # ADD ESP,24 # POP EBP # POP EDI # POP ESI #
POP EBX # RETN  // Endereço de retorno da funçao LoadLibraryA
$rop .= pack('V',0x00472be9); # PUSHAD # POP EBX # RETN
$rop .= "kernel32.dll\x00";
$rop .= "A" x 27;
#ROP END HERE
#Endereço para GetProcAddress 0x672CA668
#ROP FOR Function GetProcAddress
$rop .= pack('V',0x0048004d);  # POP EBP # RETN
$rop .= "\x00\x00\x00\x00";
$rop .= pack('V',0x00409a7f);  # POP EDI # RETN
$rop .= pack('V',0x672CA668);  # Endereço para GetProcAddress
$rop .= pack('V',0x0042ad45);  # PUSH ESP # POP ESI # RETN
$rop .= pack('V',0x004a1b0e);  # POP ESI # RETN
$rop .= pack('V',0x004AD39B);  # ADD ESP,24 # POP EBP # POP EDI # POP ESI #
POP EBX # RETN  // Endereço de retorno da funçao GetProcAddress
$rop .= pack('V',0x00421953);  # ADD EBP,EAX # RETN
$rop .= pack('V',0x004c0634);  # PUSHAD # RETN
$rop .= "VirtualProtect\x00";
$rop .= "A" x 25;
#ROP END HERE
#ROP FOR VirtualProtect
$rop .= pack('V',0x0042c786);  # XCHG EAX,ESI # RETN // Endereço da
VirtualProtect
$rop .= pack('V',0x004d2c70);  # POP EBP # RETN
$rop .= pack('V',0x0047E58B);  # JMP ESP // Endereço de retorno da funçao
VirtualProtect
$rop .= pack('V',0x0046abf7);  # POP EBX # RETN
$rop .= pack('V',0x00000400);  # O valor de dwSize
$rop .= pack('V',0x00402bb4);  # POP EDX # RETN
$rop .= pack('V',0x00000040);  # Valor de flNewProtect
$rop .= pack('V',0x10002b9c);  # POP ECX # RETN
$rop .= pack('V',0x10007064);  # Valor de lpflOldProtect
$rop .= pack('V',0x00472be9);  # PUSHAD # POP EBX # RETN
$rop .= pack('V',0xAAAAAAAA);  # That's the Fake Return Address
#ROP END HERE
In this Attack, the Attacker uses a ROP chain to Get VirtualProtect API address and call to it to allow the
execution of the Shellcode.
Detection and Mitigation:
While calling to VirtualProtect, the EDS will hook the ZwProtectVirtualMemory and traverse the call
stack searching for a return address from inside a user module points to call to virtualProtect.
the EDS will find the "0xAAAAAAAA" address which means that the process called to VirtualProtect using
"ret" instruction and not using "call" instruction ... so the EDS will terminate the process.
or the EDS will find a return to a stack address which means that the application will continue inside the
shellcode that it changed its excitability
Also The EDS will scan the stack for possible shellcodes and leaked ROP addresses and will check if the
address which will become executable is inside the stack which will gives higher score if it's inside the
stack.
even if the attacker replace "0xAAAAAAAA" with an address inside the user dlls. he need to search for a
call to VirtualProtect inside the user dlls contains PAGE_EXECUTE protection and need to find a call
inside the user dlls points to the function that calls to virtualprotect and needs to put nulls in between.
And also, the Attacker need to hide his ROP chain to not be leaked and hide his shellcode from the
shellcode detector and need to avoid overwriting SEH ... which will be too hard.
Heap Spray Attack Scenario:
in This Scenario, The Attacker try to exploit Internet Explorer Use After Free Aurora Vulnerability. Let's
see an example:
var Array1 = new Array();
for (i = 0; i 
In this code, the Attacker tries to Spray his shellcode all over the heap and after that the Attacker will
use the Use After Free vulnerability to redirect the execution to a random address in heap which will be
filled by the Heap Spray with his shellcode.
Detection and Mitigation:
For this type of attack, the EDS will detect many allocated chunks from the same module bigger than
specific size (ex: > 100 bytes) and while scanning 2 randomly chosen chunks, the EDS will find the
shellcode which will lead to terminate the application giving a message that this process was
compromised.
In case of User After Free only, the EDS will postpone the free of the object that contains the vtable so it
will not be overwritten by the exploit and the attack will be prevented.
Future Work:
We are planning to include inside any company an internal server which communicate with all EDS tools
inside the clients which logs and alert for suspicious actions and mitigated attacks.
This Server will include a dashboard which gives you all the details of any suspicious action inside all
machines and tries to give you the details of the suspicious files or suspicious IPs which contains the
attack.
Development:
The EDS tool is based on Security Research and Development Framwork (SRDF)
What's SRDF?
SRDF is a development framework created mainly to support writing security tools on malware field and
network field. it's mainly win32 and writing using C++ but we aim to develop a linux version and to
include a python implementation for it.
Goals:
1.
Help Researchers in Malware or Network Security fields implement their ideas.
2.
Provide a full object oriented development framework with a suitable design to meet the
requirements of the targeted applications
3.
To unite all small and separate tools inside one development framework.
Targeted Applications:
Antivirus & Virus Removal Tools
Malware Analysis Tools (Static – Dynamic – Behavioral)
Network Tools (Sniffers – Firewalls – IDS/IPS – Packet Analysis Tools)
Exploitation & Security Mitigation Tools
The Features:
Before talking about SRDF Design and structure, I want to give you what you will gain from SRDF and
what it could add to your project.
In User-Mode part, SRDF gives you many helpful tools … and they are:
Parsers:
o
PE and ELF Analyzer
o
PDF File Analyzer
o
Android (APK/DEX) File Parser
Static Analysis:
o
x86 Assembler and Disassembler
o
Android Disassembler
o
MD5, SSDeep and Wildlist Scanner (YARA)
Dynamic Analysis:
o
Process Analyzer
o
x86 Emulator
o
win32 Debugger
Behavoiral Analysis:
o
API Hooking
o
Process Injection
Network Analysis:
o
Packet Capturing using WinPcap
o
Pcap File Analyzer
o
Flow Analysis and Session Separation
o
Protocol Analysis: tcp, udp, icmp and arp
o
Application Layer Analysis: http and dns
Others:
o
Full Object oriented
o
includes Backend Database, XML Serializer
o
Scalable
And many more
In the Kernel-Mode part, it tries to make it easy to write your own filter device driver (not with WDF and
callbacks) and gives an easy, object oriented (as much as we can) development framework with these
features:
Object-oriented and easy to use development framework
Easy IRP dispatching mechanism
SSDT Hooker
Layered Devices Filtering
TDI Firewall
File and Registry Manager
Kernel Mode easy to use internet sockets
Filesystem Filter
Still the Kernel-Mode in progress and many features will be added in the near future.
The Development of  EDS:
what we reach right now is we developed every mitigation for payload and attack vector separately but
we still didn't develop the scoring and the monitoring system and still our future work.
Join us, Reach us and spread the word:
We need your support for the growing open source community for SRDF and for the EDS idea, concept
and the tool.
Join us or share your ideas with us ... if you have any question please mail us at: amr.thabet[a-
t]owasp.org
To reach our news and updates:
Twitter: @winSRDF
Facebook: fb.com/SecDevelop
Website: http://www.security-framework.com
Source Code for SRDF: https://github.com/AmrThabet/winSRDF
you are totally welcome for any question and any support.
Conclusion
The Exploitation Detection System is the technology of the new era and the only solution to stop the
APT attacks and defend against the nowadays threats and contain it with the correlation with all
network security tools
the EDS tool itself is a run-time security mitigation tool which stops the exploitation through numerous
mitigations and a monitoring system which becomes a multi-layer mitigation system and the mitigations
co-operate with each others to cover their weaknesses.
The EDS is based on a framework named "Security Research and Development Framework" which was
created mainly to support writing security tools in malware and network field.
The Development of EDS still in progress ... please join us and spread the word.