### Enhanced Exploitation Detection System (EDS) Overview

#### Introduction
The EDS is a comprehensive security tool designed to detect and mitigate various types of exploits and suspicious behaviors in real-time. This document provides an overview of the system, its detection mechanisms, and the underlying framework, Security Research and Development Framework (SRDF).

#### Key Features

1. **Behavioral Monitoring:**
   - The EDS continuously monitors processes for unusual behavior, such as:
     - Adobe Reader creating a new `cmd` process.
     - Connecting to unknown websites.
   - These actions increase the suspicion score, and if the score reaches a threshold, the process is marked as suspicious.

2. **Wrong Module Switching Event:**
   - When a special API is called, the EDS performs the following checks:
     1. **Criticality of the Event:** Evaluates the criticality of the event (e.g., loading strange libraries, creating processes from outside the program directory). An initial score is assigned.
     2. **Caller and Parameters:** Checks the caller's EIP and parameters. The score is increased or the event is skipped if everything is normal.
     3. **Call Stack Analysis:** Examines the next call stack and adjusts the score based on the findings. Low-criticality events are skipped.
     4. **Shellcode and ROP Chains:** Scans the stack (up to 3 pages) for shellcode or ROP chains and adjusts the score accordingly.
   - If the score reaches a specific limit, the process is dumped and terminated with a message. If the score is high but below the limit, the process is logged for further investigation.

3. **Heap Overflow Event:**
   - Detects buffer overflows in the heap and checks for shellcode and ROP chains.
   - If found, the application is closed, and a message is displayed indicating a heap overflow. The process is dumped before termination for further analysis.

4. **Heap Spray Event:**
   - Randomly selects two chunks from the heap spray and checks for ROP chains and shellcodes.
   - If detected, the process is dumped and terminated with a message explaining the reason.

5. **Periodical Scanning:**
   - Conducts periodic scans on:
     - SEH chains in every thread's stack to ensure continuity.
     - ROP chains, shellcodes, cyclic patterns, and bytes.
     - Heap overflow and heap spray using the Heap Mitigation Thread.
     - Threads running outside all modules or inside stacks.
     - Executable places in the stack and memory-mapped files.
   - Logs a report of possible exploitations and terminates the process if the score is high, providing a message and dumping the process.

#### Attack Scenarios and Mitigations

1. **ROP Attack through Stack Overflow:**
   - Example: A DEP bypass exploit using `VirtualProtect` to execute shellcode.
   - **Detection and Mitigation:**
     - Hooks `ZwProtectVirtualMemory` and traverses the call stack to find return addresses from user modules pointing to `VirtualProtect`.
     - Identifies the use of `ret` instruction instead of `call` and terminates the process.
     - Scans the stack for shellcodes and leaked ROP addresses, increasing the score if the executable address is within the stack.

2. **Heap Spray Attack:**
   - Example: Exploiting Internet Explorer's Use After Free vulnerability.
   - **Detection and Mitigation:**
     - Detects multiple large allocations from the same module and scans randomly chosen chunks for shellcode.
     - Postpones the free of objects containing vtables to prevent overwriting and attack prevention.

#### Future Work

- **Internal Server Integration:**
  - Plans to include an internal server that communicates with all EDS tools on clients, logging and alerting for suspicious actions and mitigated attacks.
  - Provides a dashboard with detailed information on suspicious activities, including files and IPs involved in the attack.

#### Development

- **Security Research and Development Framework (SRDF):**
  - SRDF is a development framework for writing security tools in malware and network fields, primarily for Win32 and C++.
  - **Goals:**
    1. Assist researchers in implementing their ideas.
    2. Provide a full object-oriented development framework.
    3. Unite small and separate tools into one framework.
  - **Targeted Applications:**
    - Antivirus and virus removal tools.
    - Malware analysis tools (static, dynamic, behavioral).
    - Network tools (sniffers, firewalls, IDS/IPS, packet analysis).
    - Exploitation and security mitigation tools.

- **Features:**
  - **User-Mode:**
    - Parsers: PE, ELF, PDF, Android (APK/DEX).
    - Static Analysis: x86 assembler/disassembler, Android disassembler, YARA scanner.
    - Dynamic Analysis: Process analyzer, x86 emulator, win32 debugger.
    - Behavioral Analysis: API hooking, process injection.
    - Network Analysis: Packet capturing, pcap file analysis, flow analysis, protocol and application layer analysis.
  - **Kernel-Mode:**
    - Easy IRP dispatching, SSDT hooker, layered devices filtering, TDI firewall, file and registry manager, kernel-mode internet sockets, filesystem filter.

- **Development Status:**
  - Individual mitigations have been developed, but the scoring and monitoring system are still in progress.

#### Join Us and Spread the Word

- **Community Support:**
  - Contribute to the growing open-source community for SRDF and EDS.
  - Share your ideas and questions via email: amr.thabet[at]owasp.org.
  - Follow us on Twitter: @winSRDF, Facebook: fb.com/SecDevelop, Website: http://www.security-framework.com, Source Code: https://github.com/AmrThabet/winSRDF.

#### Conclusion

- **Exploitation Detection System (EDS):**
  - A cutting-edge technology to combat APT attacks and modern threats.
  - Combines multiple mitigations and a monitoring system for a multi-layered defense.
  - Built on the SRDF, which supports the development of security tools in malware and network fields.
  - Development is ongoing, and we welcome your support and contributions.