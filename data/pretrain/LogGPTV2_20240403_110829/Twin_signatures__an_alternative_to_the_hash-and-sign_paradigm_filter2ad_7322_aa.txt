title:Twin signatures: an alternative to the hash-and-sign paradigm
author:David Naccache and
David Pointcheval and
Jacques Stern
Twin Signatures: an Alternative
to the Hash-and-Sign Paradigm
David Naccache
Gemplus Card International
34, rue Guynemer
92447 Issy-les-Moulineaux, France
PI:EMAIL
David Pointcheval
Jacques Stern
´Ecole Normale Sup´erieure
45, rue d’Ulm
75230 Paris cedex 05, France
{david.pointcheval,jacques.stern}@ens.fr
ABSTRACT
This paper introduces a simple alternative to the hash-and-
sign paradigm, from the security point of view but for sign-
ing short messages, called twinning. A twin signature is
obtained by signing twice a short message by a signature
scheme. Analysis of the concept in diﬀerent settings yields
the following results:
• We prove that no generic algorithm can eﬃciently forge
a twin DSA signature. Although generic algorithms
oﬀer a less stringent form of security than computa-
tional reductions in the standard model, such success-
ful proofs still produce positive evidence in favor of the
correctness of the new paradigm.
• We prove in standard model an equivalence between
the hardness of producing existential forgeries (even
under adaptively chosen message attacks) of a twin
version of a signature scheme proposed by Gennaro,
Halevi and Rabin and the Flexible RSA Problem.
We consequently regard twinning as an interesting alter-
native to hash functions for eradicating existential forgery
in signature schemes.
Keywords
Digital Signatures, Provable Security, Discrete Logarithm,
Generic Model, Flexible RSA Problem, Standard Model.
1.
INTRODUCTION
The well-known hash and sign paradigm has two distinct
goals:
increasing performance by reducing the size of the
signed message and improving security by preventing exis-
tential forgeries. As a corollary, hashing remains mandatory
even for short messages.
From the conceptual standpoint, the use of hash functions
comes at the cost of extra assumptions such as the conjec-
ture that for all practical purposes, concrete functions can
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for profit or commercial advantage and that copies
bear this notice and the full citation on the first page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior specific
permission and/or a fee.
CCS’01, November 5-8, 2001, Philadelphia, Pennsylvania, USA.
Copyright 2001 ACM 1-58113-385-5/01/0011 ...$5.00.
be identiﬁed with ideal black boxes [3] or that under cer-
tain circumstances (black box groups [15, 21]) a new group
element must necessarily come from the addition of two al-
ready known elements. In some settings [11] both models
are even used simultaneously.
This paper investigates a simple substitute to hashing that
we call twinning. A twin signature is obtained by signing
twice the same (short) raw message by a probabilistic sig-
nature scheme, or two probabilistically related messages.
We believe that this simple paradigm is powerful enough
to eradicate existential forgery in a variety of contexts. To
support this claim, we show that no generic algorithm can
eﬃciently forge a twin DSA signature and prove that for a
twin variant of a signature scheme proposed by Gennaro,
Halevi and Rabin [8] (hereafter GHR) existential forgery,
even under an adaptively chosen-message attack, is equiva-
lent to the Flexible RSA Problem [5] in the standard model.
2. DIGITAL SIGNATURE SCHEMES
Let us begin with a quick review of deﬁnitions and security
notions for digital signatures. Digital signature schemes are
the electronic version of handwritten signatures for digital
documents: a user’s signature on a message m is a string
which depends on m, on public and secret data speciﬁc to
the user and–possibly–on randomly chosen data, in such a
way that anyone can check the validity of the signature by
using public data only. The user’s public data are called the
public key, whereas his secret data are called the secret key.
The intuitive security notion would be the impossibility to
forge user’s signatures without the knowledge of his secret
key.
In this section, we give a more precise deﬁnition of
signature schemes and of the possible attacks against them
(most of those deﬁnitions are based on [9]).
2.1  Definitions
A signature scheme is deﬁned by the three following algo-
rithms:
• The key generation algorithm G. On input 1k, where k
is the security parameter, the algorithm G produces a
pair (kp, ks) of matching public and secret keys. Algo-
rithm G is probabilistic.
• The signing algorithm Σ. Given a message m and a
pair of matching public and secret keys (kp, ks), Σ pro-
duces a signature σ. The signing algorithm might be
probabilistic.
20• The veriﬁcation algorithm V . Given a signature σ, a
message m and a public key kp, V tests whether σ is
a valid signature of m with respect to kp. In general,
the veriﬁcation algorithm need not be probabilistic.
2.2 Forgeries and Attacks
In this subsection, we formalize some security notions
which capture the main practical situations. On the one
hand, the goals of the adversary may be various:
• Disclosing the secret key of the signer. It is the most
serious attack. This attack is termed total break.
• Constructing an eﬃcient algorithm which is able to
sign messages with good probability of success. This
is called universal forgery.
• Providing a new message-signature pair. This is called
existential forgery.
In many cases this latter forgery, the existential forgery, is
not dangerous, because the output message is likely to be
meaningless. Nevertheless, a signature scheme which is not
existentially unforgeable (and thus that admits existential
forgeries) does not guarantee by itself the identity of the
signer. For example, it cannot be used to certify randomly
looking elements, such as keys. Furthermore, it cannot for-
mally guarantee the non-repudiation property, since anyone
may be able to produce a message with a valid signature.
On the other hand, various means can be made available
to the adversary, helping her into her forgery. We focus on
two speciﬁc kinds of attacks against signature schemes: the
no-message attacks and the known-message attacks. In the
ﬁrst scenario, the attacker only knows the public key of the
signer. In the second one, the attacker has access to a list
of valid message-signature pairs. According to the way this
list was created, we usually distinguish many subclasses, but
the strongest is the adaptively chosen-message attack, where
the attacker can ask the signer to sign any message of her
choice. She can therefore adapt her queries according to
previous answers.
When one designs a signature scheme, one wants to com-
putationally rule out existential forgeries even under adap-
tively chosen-message attacks, which is the strongest secu-
rity level for a signature scheme.
3. GENERIC ALGORITHMS
Before we proceed, let us stress that although the generic
model in which we analyze DSA oﬀers a somehow weaker
form of security than the reductions that we apply to GHR
in the standard model, it still provides evidence that twin-
ning may indeed have a beneﬁcial eﬀect on security.
Generic algorithms [15, 21], as introduced by Nechaev and
Shoup, encompass group algorithms that do not exploit any
special property of the encodings of group elements other
than the property that each group element is encoded by
a unique string. Typically, algorithms like Pollard’s ρ al-
gorithm [18] fall under the scope of this formalism while
index-calculus methods do not.
3.1 The Framework
Recall that any Abelian ﬁnite group Γ is isomorphic to a
product of cyclic groups of the form (Zpk , +), where p is a
prime. Such groups will be called standard Abelian groups.
An encoding of a standard group Γ is an injective map from
Γ into a set of bit-strings S.
We give some examples: consider the multiplicative group
of invertible elements modulo some prime q. This group is
cyclic and isomorphic to the standard additive group Γ =
Zq−1. Given a generator g, an encoding σ is obtained by
computing the binary representation σ(x) of gx mod q. The
same construction applies when one considers a multiplica-
tive subgroup of prime order r. Similarly, let E be the group
of points of some non-singular elliptic curve over a ﬁnite ﬁeld
F, then E is either isomorphic to a (standard) cyclic group
Γ or else is isomorphic to a product of two cyclic groups
Zd1 × Zd2 . In the ﬁrst case, given a generator G of E, an
encoding is obtained by computing σ(x) = x.G, where x.G
denotes the scalar multiplication of G by the integer x and
providing coordinates for σ(x). The same construction ap-
plies when E is replaced by one of its subgroups of prime
order r. Note that the encoding set appears much larger
than the group size, but compact encodings using only one
coordinate and a sign bit ±1 exist and for such encodings,
the image of σ is included in the binary expansions of inte-
gers < tr for some small integer t, provided that r is close
enough to the size of the underlying ﬁeld F. This is exactly
what is recommended for cryptographic applications [10].
A generic algorithm A over a standard Abelian group Γ
is a probabilistic algorithm that takes as input an encod-
ing list {σ(x1),··· , σ(xk)}, where each xi is in Γ. While
it executes, the algorithm may consult an oracle for further
encodings. Oracle calls consist of triples {i, j, }, where i
and j are indices of the encoding list and  is ±. The oracle
returns the string σ(xi ± xj), according to the value of 
and this bit-string is appended to the list, unless it was al-
ready present. In other words, A cannot access an element
of Γ directly but only through its name σ(x) and the oracle
provides names for the sum or diﬀerence of two elements
addressed by their respective names. Note however that A
In many cases, A takes
may access the list at any time.
as input a pair {σ(1), σ(x)}. Probabilities related to such
algorithms are computed with respect to the internal coin
tosses of A as well as the random choices of σ and x.
The following theorem appears in [21]:
Theorem 1. Let Γ be a standard cyclic group of order
N and let p be the largest prime divisor of N . Let A be a
generic algorithm over Γ that makes at most n queries to the
oracle. If x ∈ Γ and an encoding σ are chosen at random,
then the probability that A returns x on input {σ(1), σ(x)}
is O(n2/p).
Proof. We refer to [21] for a proof. However, we will
need, as an ingredient for our own proofs, the probabilistic
model used by Shoup. We develop the model in the special
case where N is a prime number r, which is of interest to us.
Alternatively, we could work in a subgroup of prime order
r.
Basically, we would like to identify the probabilistic space
consisting of σ and x with the space Sn+2×Γ, where S is the
set of bit-string encodings. Given a tuple {z1,··· , zn+2, y}
in this space, z1 and z2 are used as σ(1) and σ(x), the suc-
cessive zi are used in sequence to answer the oracle queries
and the unique value y from Γ serves as x. However, this
interpretation may yield inconsistencies as it does not take
care of possible collisions between oracle queries. To over-
come the diﬃculty, Shoup deﬁnes, along with the execution
21of A, a sequence of linear polynomials Fi(X), with coeﬃ-
cients modulo r. Polynomials F1 and F2 are respectively set
to F1 = 1 and F2 = X and the deﬁnition of polynomial F(cid:9)
is related to the (cid:28)-th query {i, j, }: F(cid:9) = Fi ± Fj, where the
sign ± is chosen according to . If F(cid:9) is already listed as
a previous polynomial Fh, then F(cid:9) is marked and A is fed
with the answer of the oracle at the h-th query. Otherwise,
z(cid:9) is returned by the oracle. Once A has come to a stop, the
value of x is set to y.
It is easy to check that the behavior of the algorithm which
plays with the polynomials Fi is exactly similar to the behav-
ior of the regular algorithm, if we require that y is not a root
of any polynomial Fi−Fj, where i, j range over indices of un-
marked polynomials. A sequence {z1,··· , zn+2, y} for which
this requirement is met is called a safe sequence. Shoup
shows that, for any {z1,··· , zn+2}, the set of y such that
{z1,··· , zn+2, y} is not safe has probability O(n2/r). From
a safe sequence, one can deﬁne x as y and σ as any encoding
which satisﬁes σ(Fi(y)) = zi, for all unmarked Fi. This cor-
respondence preserves probabilities. However, it does not
completely cover the sample space {σ, x} since executions
such that Fi(x) = Fj(x), for some indices i, j, such that Fi
and Fj are not identical are omitted. To conclude the proof
of the above theorem in the special case where N is a prime
number r, we simply note that the output of a computa-
tion corresponding to a safe sequence {z1,··· , zn+2, y} does
not depend on y. Hence it is equal to y with only minute
probability.
3.2 Digital Signatures over Generic Groups
We now explain how generic algorithms can deal with at-
tacks against DSA-like signature schemes [6, 20, 16, 10].
We do this by deﬁning a generic version of DSA that we
call GDSA. Parameters for the signature include a stan-
dard cyclic group of prime order r together with an encod-
ing σ. The signer also uses as a secret key/public key pair
{x, σ(x)}. Note that we have chosen to describe signature
generation as a regular rather than generic algorithm, using
a full description of σ. To sign a message m, 1 < m < r the
algorithm executes the following steps:
1. Generate a random number u, 1 ≤ u < r.
2. Compute c ← σ(u) mod r. If c = 0 go to step 1.
3. Compute d ← u
−1(m + xc) mod r. If d = 0 go to step
1.
4. Output the pair {c, d} as the signature of m.
The veriﬁer, on the other hand, is generic:
1. If c (cid:13)∈ [1, r− 1] or d (cid:13)∈ [1, r− 1], output invalid and stop.
−1 mod r, h1 ← hm mod r and h2 ←
2. Compute h ← d
hc mod r.
3. Obtain σ(h1 + h2x) from the oracle and compute c
(cid:2) ←