### Request and Tracking Correlation

The first goal is to carry all identifiers in a single request. The second goal is to determine the maximum number of principals that can be correlated by tracking companies through a single request. If both goals are met, they illustrate the extent to which a TrackingFree user can be tracked in the worst-case scenario.

### Modeling TrackingFree in Alloy

In Alloy, we model TrackingFree using signatures, which represent sets of objects. Each signature can have zero or more properties, which, from a set-theoretic perspective, are relations. We describe the two goals mentioned above as Alloy assertions, which are checked within a specified scope. Alloy attempts to find counterexamples for these assertions. If no counterexample is found, the assertions are considered valid up to the specified scope size, as Alloy ensures that no counterexamples are missed within this space. During the search for counterexamples, Alloy follows the facts provided by the user. In our model, we describe the behaviors of TrackingFree and tracking servers using twenty-three facts.

#### Code 1: TrackingFree Signatures
```alloy
one sig TrackingFreeKernel extends Browser {
    startingPoints: Origin -> lone Principal
}

sig Principal {
    parent: set Principal,
    browser: one TrackingFreeKernel,
    mainFrame: one ScriptContext,
    domain: Origin,
    childPrincipal: Origin -> lone Principal,
    persistentStorage: set PersistentStorageUnit
}
```

Code 1 describes the signatures of TrackingFree. Each TrackingFree instance consists of one `TrackingFreeKernel` object and multiple `Principal` objects. The `startingPoints` relation in `TrackingFreeKernel` maps each `TrackingFreeKernel` object to a set of relations, which then relate each `Origin` to its `Principal`, if one exists. This set of relations allows us to identify all starting point principals by their origins. The relations in `Principal` are straightforward:
- `persistentStorage` relates each principal to its client-side state, where tracking identifiers assigned to this principal are stored.
- `domain` represents the principal's origin, which is the origin of the main frame, accessed via the `mainFrame` relation.
- `childPrincipal` relates each principal to its child principals.

### Top Cross-site Trackers on Alexa Top 500 Websites

| Tracking Host                       | Prevalence (# Domains) | Tracking Tokens          |
|-------------------------------------|------------------------|--------------------------|
| b.scorecardresearch.com             | 133                    | UIDR                     |
| ad.doubleclick.net                   | 117                    | id, __gads               |
| ib.adnxs.com                        | 75                     | __utma                   |
| p.twitter.com                       | 70                     | anj                      |
| cm.g.doubleclick.net                | 56                     | id                       |
| ad.yieldmanager.com                 | 52                     | bx                       |
| bs.serving-sys.com                  | 40                     | A4                       |
| cdn.api.twitter.com                 | 40                     | __utmz                   |
| secure-us.imrworldwide.com          | 38                     | IMRID                    |
| adfarm.mediaplex.com                | 31                     | svid                     |
| d.adroll.com                        | 30                     | __adroll                 |
| img.mediaplex.com                   | 29                     | svid                     |
| ds.serving-sys.com                  | 27                     | u2, __qca, A4            |
| hm.baidu.com                        | 27                     | BAIDUID                  |
| pixel.mathtag.com                   | 23                     | uuid, HRL8               |

The tracking range \( P \) of a host website is given by:
\[ P = \max\{ R_1, \ldots, R_N \} + \text{secondmax}\{ R_1, \ldots, R_N \} + 1 \]
where \( R_i \) is the tracking range of host website \( i \), and \( N \) is the number of host websites. The functions `max` and `secondmax` calculate the largest and second-largest values in a set, respectively.

### Experiments with Real-World Websites

#### 1. Anti-tracking Capability

To measure TrackingFree's ability to defend against cross-site third-party tracking, we gathered trackers on Alexa Top 500 websites using the methodology from existing work [34]. We evaluated how many of these trackers could be invalidated by TrackingFree. This approach, involving both manual and automated work, provides a lower bound of trackers but still serves as a good indicator of TrackingFree's anti-tracking capability.

We conducted the experiment on 2,032 valid URLs from Alexa Top 500 websites. We captured all HTTP(S) traffic, repeating the process twice: once with a clean browser and once after priming the client-side state. We identified cross-site trackers based on their behaviors summarized in [34].

In standard Chromium, we found 647 trackers appearing in 5,814 requests. Table I lists the top 15 prevalent cross-site tracking hosts. When we repeated the experiment with TrackingFree, we found that it blocked all 647 trackers.

#### 2. Performance

We measured the impact of our architecture on browser performance using a 1.3GHz dual-core Intel Core i5 processor with 4GB memory and 128GB flash storage, running OSX Mavericks. We evaluated page loading time, memory usage, and disk usage.

**Latency Costs:**
- **Principal Construction:** 322.36 ms
- **Persistent State Construction:** 98.03 ms
- **In-memory State Construction:** 224.33 ms
- **Extra IPC:** 349.06 ms
- **Render/JS Engine Instrumentation:** 139.21 ms

Table II shows the average costs. Note that not all browsing scenarios will incur all overheads. Specifically, cross-site navigation may experience all three costs, resulting in an average extra overhead of approximately 810 ms for TrackingFree compared to a vanilla browser. In other scenarios, the average costs range from 140 ms to 460 ms.

**Memory Overhead:**
| Domains | Chromium (MB) | TrackingFree (MB) | Increase (MB) |
|---------|---------------|-------------------|---------------|
| 1       | 477.1         | 623.6             | 27.9          |
| 4       | 434.6         | 505.0             | 79.2          |
| 12      | 702.8         | 642.5             | 207.9         |

**Disk Overhead:**
| Domains | Chromium (MB) | TrackingFree (MB) | Increase (MB) |
|---------|---------------|-------------------|---------------|
| 1       | 21.3          | 22.5              | 0.5           |
| 4       | 23.7          | 25.9              | 3.4           |
| 12      | 21.8          | 29.4              | 5.7           |

**Address Bar Navigation without Principal:**
- Experiment a: Evaluates the overall latency of visiting web pages whose principals have not been created. The loading time is calculated from the moment the address bar is pressed until the page is fully loaded.

**Blacklist-Based Tracking Prevention:**
We found that blacklist-based tools like Ghostery [13] do not effectively protect users from tracking. Examining 5,814 tracking requests on Ghosteryâ€™s blacklist, we found it missing 1,057 requests from 53 tracking hosts.

#### 3. Compatibility

We evaluated TrackingFree's compatibility through three experiments:
1. **Backward Compatibility with First-Party Websites:**
   - We manually tested TrackingFree on Alexa Top 50 websites. For each site, we opened the main page, performed within-site and cross-site navigations, and checked visual appearance and stability. Results showed complete backward compatibility.

2. **Compatibility with Third-Party Services:**
   - We tested 68 third-party services from Alexa Top 50 websites, categorized into cross-site online payment, cross-site content sharing, and single sign-on (SSO). 67 out of 68 services worked properly. The failed SSO service (logging into Pinterest via Facebook) was due to a JavaScript error. Users can still use this SSO service with minimal privacy cost and user burden through TrackingFree's domain data migration component.

3. **Reasonableness of Communication Restriction Rules:**
   - **Rule 1:** In the scenario of visiting site A, then B, and then C, communication between A and C is not allowed. Testing 70 such scenarios from Alexa Top 500 websites, we found 3,119 message events between A and B, and B and C, but zero between A and C.
   - **Rule 2:** Third-party elements embedded in A cannot communicate with elements in sites other than A. Testing this, we found no message events between B and C in the specified scenario.