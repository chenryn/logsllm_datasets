request carrying all of these identiﬁers. The second indicates
the maximum principals that can be correlated by tracking
companies through one request. Therefore, the two goals, if
met, illustrate the extent a TrackingFree user can be tracked in
the worst case.
Modeling TrackingFree. In Alloy, we model TrackingFree
through Alloy signature, which represents a set of objects. Every
Alloy signature has zero to several properties, which, from the
view of set theory, are relations. We also describe the two
goals discussed above as two Alloy assertions, which will be
checked by Alloy in a speciﬁed scope. Alloy tries to ﬁnd counter
examples for these assertions. If it does not ﬁnd one, we say
that the assertions hold up to the scope size we speciﬁed since
Alloy will not miss any counter examples in the speciﬁed space.
When searching for counter examples, Alloy follows the facts
described by users. In our model, we describe the behaviors of
TrackingFree and tracking servers in twenty-three facts.
persistentStorage :
set PersistentStorageUnit,
1 one sig TrackingFreeKernel extends Browser{
startingPoints: Origin -> lone Principal
2
3 }
4 sig Principal{
5
6
7
8
9
10
11
12
13 }
parent : set Principal,
browser : one TrackingFreeKernel,
mainFrame : one ScriptContext
domain : Origin,
childPrincipal :
Origin -> lone Principal,
Code 1: TrackingFree Signatures
Code 1 describes the signature of TrackingFree. Each
TrackingFree is composed of one TrackingFreeKernel object and
multiple Principal objects. The relation startingPoints deﬁned
in signature TrackingFreeKernel maps each TrackingFreeKernel
object to a set of relations, which then relates each Origin to
its Principal, if there is one. Through the set of relations, we
can get all the TrackingFree’s starting point principals by their
Origins. The relations in Principal are also straightforward. The
persistentStorage relates each principal to its client-side state,
where tracking identiﬁers assigned to this principal are stored;
domain illustrates the principal’s Origin, which is the origin
of main frame, accessed by relation mainFrame; childPrincipal
8
Tracking Host
b.scorecardresearch.com
ad.doubleclick.ne
ib.adnxs.com
p.twitter.com
cm.g.doubleclick.net
ad.yieldmanager.com
bs.serving-sys.com
cdn.api.twitter.com
secure-us.imrworldwide.com
adfarm.mediaplex.com
d.adroll.com
img.mediaplex.com
ds.serving-sys.com
hm.baidu.com
pixel.mathtag.com
Prevalance
(# Domains)
133
117
75
70
56
52
40
40
38
31
30
29
27
27
23
Tracking
Token(s)
UIDR
id, __gads
__utma
anj
id
bx
A4
__utmz
IMRID
svid
__adroll
svid
u2, __qca,A4
BAIDUID
uuid,HRL8
Table I: Top 15 Cross-site Trackers on Alexa Top 500 web sites
the tracking range of host web site i, N denote the number of
host web sites, and functions max and secondmax calculate
the largest value and second largest value of a set respectively,
tracking site’s tracking range is given by:
P = max{ R1 . . . RN} + secondmax{ R1 . . . RN} + 1 (2)
So the tracking site’s tracking range is the sum of the top two
host sites’ tracking ranges plus one. Host web sites’ tracking
ranges remain the same. If host sites are not trackers (only
track users within their own domains), tracking site’s tracking
range is still limited to three. If host web sites also serve as
third-party trackers, tracking site’s ability is restricted within
seven principals, were host sites not exchanging identiﬁers with
others.
B. Experiments with Real World Web Sites
1) Anti-tracking Capability:
In order to measure Track-
ingFree’s ability in defending against cross-site third-party
tracking, we ﬁrst gather trackers on Alexa Top web sites by
strictly following the tracker detection methodology presented
by existing work [34], and then evaluate how many of them
can be invalidated by TrackingFree. This approach, involving
both manual and automatic workloads, can only give a lower
bound of trackers, but the evaluation can still be a good indicator
showing TrackingFree’s anti-tracking ability.
Speciﬁcally, we conduct the experiment on Alexa Top 500
web sites. In each site, we randomly visit four more pages. As
some links are broken or redirect to the same link, we ﬁnally
get 2,032 valid URLs as our dataset. We visit these URLs
and capture all the HTTP(S) trafﬁcs. This process is repeated
twice: once starting with a clean browser and once more after
priming the client-side state. After that, we analyze the captured
trafﬁcs and identify cross-site trackers based on their behaviors
summarized by work [34].
We ﬁrst conduct the experiment in standard Chromium. We
ﬁnd a total of 647 trackers, appearing in 5,814 requests, which
we refer to as tracking requests. Table I lists the top 15 prevalent
cross-site tracking hosts ordered by the number of domains they
appear. Then we repeat this experiment with TrackingFree. The
results show that we do not ﬁnd any trackers. TrackingFree
block all of the 647 trackers found in vanilla Chromium.
11
Source
Principal Construction
Persistent State Construction
In-memory State Construction
Extra IPC
Render/JS Engine Instrumentation
Cost (ms)
322.36
98.03
224.33
349.06
139.21
Table II: Cost of TrackingFree
We also ﬁnd that blacklist-based tracking prevention products
can not effectively protect users from tracking. We use the
blacklist tool Ghostery [13] for comparison, which is one of
the most effective privacy protection extensions based on open
source measurement project “Are We Private Yet” [1], Through
examining the 5,814 tracking requests on Ghostery’s blacklist,
we ﬁnd the blacklist missing 1,057 requests, belongs to 53
tracking hosts.
2) Performance: We measure the impact of our architecture
on browser performance. All experiments are done in 1.3GHz
dual-core Intel Core i5 processor, 4GB memory, 128GB ﬂash
storage, running OSX Mavericks operating system. To evaluate
TrackingFree’s performance, we have measured page loading
time, memory usage and disk usage.
Latency. The latency cost of TrackingFree comes from
three sources: 1). principal construction, 2). extra inter-process
communication (IPC) and 3). render and JavaScript engine
(render/JS engine) instrumentation. Principal construction refers
to the extra cost used to build a principal in TrackingFree,
compared with the cost for creating a new render process in
Chromium; extra IPC cost only exists in cross-site navigation, in
which the navigation request will be passed to browser process
from source render process and then sent back to target render
process after new principal has been constructed; render/JS
engine instrumentation cost results from extra instrumentations
on WebKit engine and JS engine, such as hooking all mouse
and message events, existing in all the navigation practices.
We evaluate the costs of principal construction (1) and
render/JS engine instrumentation (3) by browsing Alexa Top 25
web sites with TrackingFree and calculating their average cost.
To measure extra IPC cost (2), we visit Alexa Top 25 web sites
and then randomly click a cross-site link from each of the site.
Table II shows the average of each cost. Note that not all the
browsing scenarios will suffer from all the overhead listed above.
Speciﬁcally, cross-site navigation is the only scenario that might
experience all the three costs, so on average, compared with
vanilla browser, TrackingFree incurs ⇠810 ms extra overhead
for cross-site navigation. In other scenarios, the average costs
range from ⇠140 ms to ⇠460 ms.
To measure the overall impact of our architecture on browser
performance, we further conduct the following four experiments,
spanning browsing scenarios from lowest latency case (within-
site navigation) to highest latency case (cross-site navigation).
Each experiment is repeated ﬁve times to reduce the disturbance
from networking delay. Fig. 7 is based on the median values of
the ﬁve-round results.
• Address Bar Navigation without Principal: Experiment
a is to evaluate the overall latency of visiting web pages
whose principals have not been created. In this experiment, a
web page’s loading time is calculated from the time pressing
Memory
1 Domain
4 Domains
12 Domains
Chromium TrackingFree
477.1(MB)
623.6(MB)
434.6(MB)
505(MB)
702.8(MB)
642.5(MB)
Increase
27.9(MB)
79.2(MB)
207.9(MB)
Table III: Memory Overhead
Disk
1 Domain
4 Domains
12 Domains
Chromium TrackingFree
21.3(MB)
22.5(MB)
23.7(MB)
21.8(MB)
25.9(MB)
29.4(MB)
Increase
0.5(MB)
3.4(MB)
5.7(MB)
Table IV: Disk Overhead
user’s conﬁguration ﬁle as the maximum disk space that can
be allocated. Once the threshold is achieved, TrackingFree will
delete those least frequently used principals.
3) Compatibility: We evaluate TrackingFree’s compatibility
through three experiments. The ﬁrst experiment is to evaluate
whether TrackingFree is backward compatible to existing ﬁrst-
party web sites. We manually run TrackingFree on Alexa Top 50
web sites. For each site, we open its main page through address
bar. Once it has been fully loaded, we continue to perform a
within-site navigation and a cross-site navigation, if there is one.
In this period, we check the visual appearance of each web
page and the stability of TrackingFree. The results show that
TrackingFree is completely backward compatible to these 50
web sites.
The second experiment is to measure TrackingFree’s com-
patibility toward third-party services. In this experiment, we
ﬁnd 68 third-party services from Alexa Top 50 web sites and
manually test them on TrackingFree. The third-party services we
have found can be classiﬁed into three categories: 1). cross-site
online payment; 2). cross-site content sharing; and 3). single
sign-on (SSO). The evaluation results show that 67 out of
68 third-party services work properly on TrackingFree. We
discuss in details why TrackingFree preserves these services’
functionalities in Section IV. The failed case is a SSO service,
logging pinterest.com through user’s Facebook account. Through
analysis, we believe it resulting from implementation issue: a
JavaScript error leads to a post request not sent out, and thus
not able to ﬁnish the last login step. User can still use this failed
SSO service with little privacy cost and user burden through
TrackingFree’s domain data migration component: performing
SSO login activity in transient principal and switching back to
regular principal after login succeeds.
The third experiment is to evaluate whether the two commu-
nication restriction rules are reasonable. The ﬁrst rule regulates
that in the scenario of user visiting web site A, then opening web
site B from A, and then site C from B, communication between
web sites A and C is not allowed. In order to measure whether
the forbidden cases are rare, we ﬁnd and test 70 browsing
practices in this scenario (A ) B ) C) from Alexa Top 500
web sites and evaluate the number of communications among
web site A, B and C. The results show that the number of
message events between A and B, as well as B and C is 3,119,
which TrackingFree allows, while the number of message events
between A and C is zero. The second rule forbids third-party
elements, embedded in A, communicating with elements in sites
other than A. In this experiment, we evaluate the number of
message events between site B and C, in the scenario that
there exists a site A, which embeds an iframe of site B and