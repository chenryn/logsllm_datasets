# 七、监控 AKS 集群及其应用
现在，您已经知道如何在 AKS 集群上部署应用，让我们关注如何确保集群和应用保持可用。在本章中，您将学习如何监控集群和运行在集群上的应用。您将探索 Kubernetes 如何使用就绪性和活跃度探测器来确保您的应用可靠运行。
您还将了解如何使用 **AKS 诊断**和 **Azure Monitor** ，以及它们如何集成到 Azure 门户中。您将看到如何使用 AKS 诊断来监控集群本身的状态，以及 Azure Monitor 如何帮助监控集群上的 Pod ，并允许您访问大规模 Pod 的日志。
简而言之，本章将涵盖以下主题:
*   使用 **kubectl** 监控和调试应用
*   审查 Kubernetes 报告的指标
*   查看来自 Azure 监视器的指标
让我们从回顾 **kubectl** 中的一些命令开始这一章，您可以使用这些命令来监控您的应用。
## 监控应用的命令
监控部署在 Kubernetes 上的应用以及 Kubernetes 基础架构本身的运行状况对于向您的客户提供可靠的服务至关重要。有两个主要的监控用例:
*   持续监控，以便在出现不符合预期的情况时获得警报
*   应用错误的故障排除和调试
当观察运行在 Kubernetes 集群之上的应用时，您需要并行检查多个东西，包括容器、荚、服务和集群中的节点。对于持续监控，您将需要一个监控系统，如 Azure Monitor 或 Prometheus。Azure Monitor 将在本章后面介绍。普罗米修斯([https://prometheus.io/](https://prometheus.io/))是 Kubernetes 生态系统中一个流行的开源解决方案，用于监控 Kubernetes 环境。对于故障排除，您需要与实时集群进行交互。用于故障排除的最常见命令如下:
立方得到〔t0〕〔t1〕
忽必烈描写了
立方日志〔t0〕
本章稍后将详细描述这些命令。
从实际示例开始，使用以下命令再次创建留言簿示例:
kubectl create -f 留言簿一体机. yaml
当**创建**命令运行时，您将在以下部分看到它的进度。让我们从探索**获取**命令开始。
### 库比特获取命令
要查看已部署应用的整体情况，kubectl 提供了 **get** 命令。**获取**命令列出了您指定的资源。资源可以是 Pod 、复制集、入口、节点、部署、机密等等。在前面的章节中，您已经运行了这个命令来验证应用是否可以使用。
请执行以下步骤:
1.  Run the following **get** command, which will get us the resources and their statuses:
    kubectl get all
    这将向您展示命名空间中的所有部署、复制集、单元和服务:
    ![Output displaying all the resources running in the default namespace](img/B17338_07_01.jpg)
    图 7.1:在默认命名空间中运行的所有资源
2.  Focus your attention on the pods in your deployment. You can get the status of the pods with the following command:
    忽必烈得到 pods
    你会看到只显示了 Pod ，如*图 7.2* 所示。让我们详细调查一下:
    ![Checking the status of all the pods in the namespace](img/B17338_07_02.jpg)
    图 7.2:命名空间中的所有容器
    第一列表示 Pod 名称，例如**前端-766d4f77cb-ds6gb** 。第二列显示了相对于容器总数，容器中有多少容器准备就绪。准备状态是通过 Kubernetes 的准备状态探测器来定义的。本章后面有一个专门的部分叫做*准备和活性探测*。
    第三列表示状态，如**待处理**、**正在处理**、**正在运行**等。第四列指示重新启动的次数，而第五列指示要求创建 pod 的时间。
3.  If you need more information about your pod, you can add extra columns to the output of a **get** command by adding **-o wide** to the command like this:
    kubectl 的 PODS 很宽
    这将向您显示附加信息，如*图 7.3* 所示:
![Getting additional details of all the pods in the namespace](img/B17338_07_03.jpg)
图 7.3:增宽显示了 Pod 的更多细节
额外的列包括 pod 的 IP 地址、运行它的节点、指定节点和就绪门。仅当较高优先级的 pod 抢占较低优先级的 pod 时，才设置指定节点。然后，指定节点字段将被设置在更高优先级的 pod 上。它表示一旦较低优先级的 pod 优雅地终止，较高优先级的 pod 将被调度的节点。准备状态门是引入外部系统组件作为 Pod 准备状态的一种方式。
执行**获取 Pod **命令仅显示当前 Pod 的状态。正如我们接下来将看到的，任何一个州的事情都可能失败，我们需要使用**kube CTL description**命令来深入挖掘。
### 库比特描述命令
**kube CTL description**命令为您提供了正在描述的对象的详细视图。它包含对象本身的详细信息，以及与该对象相关的任何最近事件。虽然 **kubectl get events** 命令列出了整个名称空间的所有事件，但是**kube CTL description**命令只能获得该特定对象的事件。如果您只对 PODS 感兴趣，可以使用以下命令:
kubectl 描述了 PODS
前面的命令列出了与所有 Pod 相关的所有信息。这通常是太多的信息，无法包含在典型的外壳中。
如果您需要特定 pod 的信息，可以键入以下内容:
多维数据集描述子/
#### 注意
您可以在 **pod** 和**T4 之间使用斜线或空格-pod 名称>** 。以下两个命令将具有相同的输出:
**立方描述子/ t1**
**在下的立方描述**
你会得到类似于*图 7.4* 的输出，后面会详细说明:
![Describing an individual pod to show a detailed output of that object](img/B17338_07_04.jpg)
图 7.4:描述一个对象显示了该对象的详细输出
从描述中，您可以获得 pod 运行的节点、运行时间、内部 IP 地址、Docker 映像名称、公开的端口、 **env** 变量和事件(过去一小时内)。
在上例中，Pod 名称为**前端-766d4f77cb-ds6gb** 。如*第一章【容器和 Kubernetes 介绍】*所述，它有 ** - ** 格式。**副本集**名称本身是从部署名称前端随机生成的: ** - ** 。
*图 7.5* 显示了部署、副本集和 Pod 之间的关系:
![A flowchart describing the relationship between a deployment, a ReplicaSet, and pods](img/B17338_07_05.jpg)
图 7.5:部署、复制集和单元之间的关系
这个 pod 运行的命名空间是**默认的**。到目前为止，您只是使用了**默认的**名称空间，恰当地命名为**默认的**。
从前面的输出中，另一个重要的部分是**节点**部分:
节点:AK 代理池-398838025-vmss 000000/10 . 240 . 0 . 4
**节点**部分让您知道 pod 运行在哪个物理节点/虚拟机上。如果 pod 反复重启或出现运行问题，而其他一切似乎正常，则节点本身可能存在问题。掌握这些信息对于执行高级调试至关重要。
以下是 pod 最初的计划时间:
开始时间:2021 年 1 月 26 日星期二 02:10:33 +0000
这并不意味着 Pod 从那时起就一直在运行，所以从这个意义上来说，时间可能会产生误导。如果发生健康事件(例如，容器崩溃)，pod 将自动重置。
您可以使用**标签**在 Kubernetes 中添加关于工作负载的更多信息，如下所示:
标签:app =留言簿
pod 模板散列=57d8c9fb45
层=前端
标签是 Kubernetes 中常用的功能。比如**服务**到**Pod **和**部署**到**复制设置**到**Pod ** ( *图 7.5* )就是这样做的。如果您看到流量没有从服务路由到 pod，这是您应该检查的第一件事。另外，您会注意到 **pod-template-hash** 标签也出现在 pod 名称中。这就是复制集和 pod 之间的联系。如果标签不匹配，资源将不会附加。
以下显示了 pod 的内部 IP 及其状态:
状态:正在运行
IP: 10.244.0.44
综合方案:
IP: 10.244.0.44
如前几章所述，在构建应用时，可以将 pods 移动到不同的节点并获得不同的 IP 地址，因此您应该避免使用这些 IP 地址。但是，当调试应用问题时，为 pod 拥有一个直接的 IP 可以帮助排除故障。您可以使用另一个 pod 的 IP 地址直接从一个 pod 连接到另一个 pod 来测试连通性，而不是通过服务对象连接到您的应用。
在 pod 中运行的容器和暴露的端口列在下面的块中:
容器:
php 重定向:
...
图片:gcr.io/google-samples/gb-frontend:v4
...
端口:80/TCP
...
请求:
cpu: 10m
内存:10Mi
环境:
GET_HOSTS_FROM: dns
...
在这种情况下，您将从 **gcr.io** 容器注册表中获得带有 **v4** 标签的 **gb 前端**容器，存储库名称为 **google-samples** 。
港口 **80** 对外开放。由于每个 pod 都有自己的 IP，因此即使在同一台主机上运行，同一个 pod 的多个实例也可以暴露同一个端口。例如，如果有两个 Pod 在同一个节点上运行一个网络服务器，两个 Pod 都可以使用端口 **80** ，因为每个 Pod 都有自己的 IP 地址。这是一个巨大的管理优势，因为您不必担心同一节点上的端口冲突。
前一小时发生的任何事件都会显示在这里:
事件:
使用**kube CTL description**对于获取更多关于您正在运行的资源的上下文非常有用。最后一部分包含与您所描述的对象相关的事件。您可以使用 **kubectl get events** 命令获取集群中的所有事件。
要查看系统中所有资源的事件，请运行以下命令:
kubectl 获取事件
#### 注意
默认情况下，Kubernetes 仅维护事件 1 小时。
如果一切顺利，你应该会有一个类似*的输出图 7.6* :
![Running the kubectl get events command to display all events from the past hour](img/B17338_07_06.jpg)
图 7.6:获取事件显示了过去一小时的所有事件
*图 7.6* 只显示了一个 pod 的事件，但是正如您在输出中看到的，该命令的输出包含了最近创建、更新或删除的所有资源的事件。
在本节中，您已经了解了可以用来检查 Kubernetes 应用的命令。在下一节中，您将重点关注调试应用故障。
### 调试应用
现在，您已经对如何检查应用有了基本的了解，您可以开始了解如何调试部署问题。
在本节中，将介绍常见的错误，您将决定如何调试和修复它们。
如果您尚未实现留言簿应用，请运行以下命令:
kubectl create -f 留言簿一体机. yaml
几秒钟后，应用应该会启动并运行。
### 映像拉取误差
在本节中，您将通过将映像标记值设置为不存在的值来引入映像拉取错误。当 Kubernetes 无法下载它需要运行的容器的映像时，就会出现映像拉取错误。
1.  Run the following command on Azure Cloud Shell:
    kubectl 编辑部署/前端
    接下来，通过执行以下步骤将映像标签从 **v4** 更改为**v _ 不存在**。
2.  Type **/gb-frontend** and hit the *Enter* key to have your cursor brought to the image definition.
    点击 *I* 键进入插入模式。删除 **v4** ，输入**v _ 不存在**，如图*图 7.7* :
    ![Using Azure Cloud Shell to change the image tag from v4 to v_non_existent](img/B17338_07_07.jpg)
    图 7.7:将映像标签从 v4 更改为 v _ 不存在
3.  现在，首先点击 *Esc* 键关闭编辑器，然后输入 **:wq！**点击*进入*。
4.  Run the following command to list all the pods in the current namespace:
    忽必烈得到 pods
    前面的命令应该指出错误，如图 7.8*所示:*