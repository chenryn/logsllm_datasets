### 优化后的文本

**图9：使用端系统恢复和2500节点策略注释的互联网AS图进行域间拼接恢复。**

**图10：Sprint拓扑中基于度数扰动路径的拉伸和新颖性。**

在任何特定切片中，每棵树中的99%路径的拉伸都小于2.6。图9展示了域间拼接的恢复情况。由于我们只考虑符合策略的路径作为可恢复路径，因此恢复效果稍差一些。这些结果表明，即使采用最简单的恢复方案且不知道故障位置的情况下，拼接仍然提供了有效的恢复。

为了理解这些恢复数字与一个更简单的方案（即仅在源节点使用k条路径之一进行恢复）相比如何，我们将路径拼接与一种选择第一跳处的一个切片并且不在中间跳转的恢复方案进行了比较。我们发现，拼接的端系统恢复仍然表现出略好的恢复效果：在两个切片和10%的故障概率下，拼接能够多恢复约7%的路径。在某些情况下，这种差距可能不足以证明额外的路径拼接成本是合理的，但如果使用更复杂的恢复方案并利用具体的网络故障位置信息，路径拼接可能会表现得更好。

### 7.3 高新颖性、低拉伸

回想我们在第2节中的设计目标，每个切片生成的路径应具有低拉伸和高新颖性。我们的评估表明，在域内拼接中，随机扰动可以实现合理的新颖性，同时保持每个切片及整体拼接路径的拉伸较低。

**域内拼接。** 我们展示了使用Sprint拓扑进行拉伸和新颖性实验的结果。我们改变了公式1（第2节）中的Weight(a, b, i, j)函数，并观察其对新颖性和拉伸的影响。我们还将基于度数的扰动结果与随机设置链路权重（范围为[0, 5000]）的情况进行了比较。在这些实验中，我们运行模拟器以生成不同b值（a=0）下的100个不同的切片，这控制了扰动的幅度。

图10显示了Sprint拓扑中基于度数扰动的拉伸和新颖性；每条线反映了不同的Weight(a, b, i, j)函数。基于度数的扰动几乎达到了与随机链路权重设置相同的新颖性，但拉伸要小得多（尤其是在最坏情况下）。例如，在Degree-Based[0, 3]的情况下，平均拉伸仅为1.2；最坏情况下的拉伸也远优于随机链路权重设置。实际上，只有约3.5%的路径拉伸超过2。对于基于度数扰动的切片，对应的新颖性平均值为0.41，80%的路径有一个或多个不同于原始最短路径的链接。增加Weight()函数的值会在新颖性方面带来小幅改进，但会导致更高的拉伸。

均匀扰动也具有低拉伸，但提供的新颖性低于基于度数的扰动。例如，在Weight() = 1的情况下，平均拉伸仅为1.03。对应的新颖性平均值为0.22。平均而言，57%的路径与原始最短路径至少有一条链接不同。

不仅每个切片中的路径拉伸较低，而且在恢复后的实际拼接路径的拉伸也很低。在端系统恢复的情况下，路径平均为原来的1.3倍。

**图11：拼接与路由偏转（拉伸<2）的恢复对比。**

**图13：BGP拼接：增量部署。**

### 图表说明

- **图9** 展示了使用端系统恢复和2500节点策略注释的互联网AS图进行域间拼接恢复的效果。
- **图10** 显示了Sprint拓扑中基于度数扰动路径的拉伸和新颖性。
- **图11** 比较了拼接与路由偏转在不同故障概率下的恢复效果。
- **图13** 展示了BGP拼接的增量部署效果。