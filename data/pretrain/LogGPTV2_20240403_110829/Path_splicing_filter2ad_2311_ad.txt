n
o
c
s
d
i
a
n
i
t
s
e
d
-
e
c
r
u
o
s
f
o
n
o
i
t
c
a
r
F
 0.16
 0.14
 0.12
 0.1
 0.08
 0.06
 0.04
 0.02
 0
 0
k = 1 (no splicing)
k = 2 (recovery)
k = 2 (reliability)
k = 3 (recovery)
k = 3 (reliability)
 0.01
 0.02
 0.03
 0.04
 0.05
Probability of link failure (p)
)
F
D
C
C
(
s
h
t
a
P
l
a
t
o
T
f
o
n
o
i
t
c
a
r
F
)
F
D
C
(
s
h
t
a
P
l
a
t
o
T
f
o
n
o
i
t
c
a
r
F
Degree-Based [0,   3]
Degree-Based [0,   4]
Degree-Based [0,   5]
Degree-Based [0, 10]
Degree-Based [0, 20]
Random
 1
 0.1
 0.01
 0.001
 0.0001
 1
 2
 3
 4
Path Stretch
(a)
 5
 6
 1
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
 0
Degree-Based  [0,  3]
Degree-Based  [0,  4]
Degree-Based  [0,  5]
Degree-Based [0, 10]
Degree-Based [0, 20]
Random
 0
 0.2
 0.4
 0.6
 0.8
 1
Novelty
(b)
Figure 9: Recovery using end-system recovery and a 2,500 node
policy-annotated Internet AS graph.
Figure 10: Stretch and novelty for degree-based perturbations
of the paths in the Sprint topology.
In any particular slice, 99% of all paths in each tree had stretch less
than 2.6. Figure 9 shows recovery for interdomain splicing. The re-
covery is slightly worse because we consider only policy-compliant
paths as recoverable. These results show that splicing provides ef-
fective recovery, even with the simplest possible recovery scheme
and no knowledge about the location of failures.
To understand how these recovery numbers compare to a simpler
scheme that simply tries to recover by using one of k paths at the
source (closer to what a simple multipath scheme might do), we
compared path splicing to a recovery scheme that selects one slice
at the ﬁrst hop and does not switch at intermediate hops. We found
that splicing’s end-system recovery still exhibits slightly better re-
covery: With 2 slices and a 10% failure probability, splicing was
able to recover about 7% more paths. This margin may, in some
cases, not justify the additional cost of path splicing, but path splic-
ing may also be able to perform better with a more sophisticated
recovery scheme that uses speciﬁc information about the location
of network failures.
7.3 High Novelty, Low Stretch
Recall from our design goals in Section 2 that the paths gener-
ated in each slice should have low stretch and high novelty. Our
evaluation shows that, for intradomain splicing, random perturba-
tions achieve reasonable novelty while keeping the stretch of each
slice—and the stretch of the overall spliced paths—low.
Intradomain splicing. We show the results of our stretch and
novelty experiments using the Sprint topology. We vary the
Weight(a, b, i, j) function from Equation 1 (Section 2) and observe
its effects on novelty and stretch. We also compared the results
of degree-based perturbations with the random case in which link
weights are set randomly in the range of [0, 5000]. For these ex-
periments, we ran the simulator to generate 100 different slices for
different values of b with a = 0, in Weight(a, b, i, j), which con-
trols the magnitude of the perturbations.
Figure 10 shows the stretch and novelty for the Sprint topol-
ogy with degree-based perturbations; each line reﬂects a different
Weight(a, b, i, j) function. Degree-based perturbations achieve al-
most as much novelty as random link weight settings, but with far
less stretch (particularly in the worst case). For example, in the case
of Degree-Based[0, 3], the average stretch is only 1.2; the worst-
case stretch is also far better than the random link-weight settings.
In fact, only about 3.5% of paths have stretch of more than 2. The
corresponding average novelty value for the slices for degree-based
perturbations is 0.41 and 80% of paths have one or more links dif-
ferent than those in the original shortest paths. Increasing the value
of the Weight() function results in small improvements in novelty
but higher stretch.
Uniform perturbations also have low stretch, but they provide
less novelty than degree-based perturbations. For example, the av-
erage stretch for the case of Weight() = 1 is only 1.03. The corre-
sponding average novelty for this case is 0.22. On average, 57% of
paths differ by one link or more from the original shortest paths.
Not only is the stretch of the paths in each slice low, but the
stretch of the actual spliced paths after recovery is also low.
In
the case of end-system recovery, paths were on average 1.3 times
n
o
i
t
a
n
i
t
s
e
d
-
e
c
r
u
o
s
d
e
t
s
e
t
f
o
n
o
d
e
t
c
e
n
n
o
c
s
d
i
s
r
i
a
p
Routing Deflections
Recovery (5 slices)
Recovery (10 slices)
Reliability (5 slices)
Reliability (10 slices)
 0.2
 0.15
 0.1
 0.05
n
o
i
t
a
n
i
t
s
e
d
-
e
c
r
u
o
s
d
e
t
s
e
t
f
o
n
o
d
e
t
c
e
n
n
o
c
s
d
i
s
r
i
a
p
i
t
c
a
r
F
 0
 0
 0.02
 0.04
 0.08
Probability of link failure (p) 
 0.06
i
t
c
a
r
F
 0.1
 0.16
 0.14
 0.12
 0.1
 0.08
 0.06
 0.04
 0.02
 0
 0
0% ASes
25% ASes
50% ASes
75% ASes
100% ASes
k = 3 slices
 0.01
 0.02
 0.03
 0.04
 0.05
Probability of link failure (p) 
Figure 11: Comparison of recovery for splicing vs. routing de-
ﬂections with stretch < 2.
Figure 13: BGP Splicing: Incremental deployment.
t
s
h
a
p
d
e
r
e
v
o
c
e
r
f
o
n
o
i
t
c
a
r
F
 1
 0.9
 0.8
 0.7
 0.6