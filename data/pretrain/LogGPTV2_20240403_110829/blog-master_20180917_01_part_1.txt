## PostgreSQL 11 1000亿 tpcb、1000W tpcc 性能测试 - on 阿里云ECS + ESSD (含quorum based 0丢失多副本配置与性能测试)   
### 作者                                                                 
digoal                                                                 
### 日期                                                                 
2018-09-19                                                               
### 标签                                                                 
PostgreSQL , pgbench , tpcb , tpcc , tpch           
----                                                                 
## 背景         
https://help.aliyun.com/knowledge_detail/64950.html    
阿里云ESSD提供了```单盘32TB容量，100万IOPS，4GB/s读写吞吐```的能力，单台ECS可以挂载16块ESSD盘，组成512 TB的大容量存储。非常适合数据库这类IO密集应用。    
PostgreSQL 作为一款优秀的企业级开源数据库产品，阿里云ESSD的加入，可以带给用户什么样的体验呢？    
[《PostgreSQL 11 100亿 tpcb 性能 on ECS》](../201809/20180916_01.md)      
[《PostgreSQL 11 tpcc 测试(103万tpmC on ECS) - use sysbench-tpcc by Percona-Lab》](../201809/20180913_01.md)      
[《(TPC-H测试 SF=10,SF=200) PostgreSQL 11 vs 10 vs Deepgreen》](../201808/20180823_01.md)      
## ESSD云盘部署    
```    
parted -s /dev/vdb mklabel gpt          
parted -s /dev/vdb mkpart primary 1MiB 100%         
mkfs.ext4 /dev/vdb1 -m 0 -O extent,uninit_bg -E lazy_itable_init=1 -T largefile -L data01          
mkdir /data01            
vi /etc/fstab            
LABEL=data01 /data01     ext4        defaults,noatime,nodiratime,nodelalloc,barrier=0,data=writeback    0 0          
mount -a      
```    
## fsync RT测试    
### 1 ECS本地SSD    
使用PostgreSQL提供的pg_test_fsync进行测试    
```    
5 seconds per test    
O_DIRECT supported on this platform for open_datasync and open_sync.    
Compare file sync methods using one 8kB write:    
(in wal_sync_method preference order, except fdatasync is Linux's default)    
        open_datasync                     46355.824 ops/sec      22 usecs/op    
        fdatasync                         39213.835 ops/sec      26 usecs/op    
        fsync                             35912.478 ops/sec      28 usecs/op    
        fsync_writethrough                              n/a    
        open_sync                         42426.737 ops/sec      24 usecs/op    
Compare file sync methods using two 8kB writes:    
(in wal_sync_method preference order, except fdatasync is Linux's default)    
        open_datasync                     17109.945 ops/sec      58 usecs/op    
        fdatasync                         26316.089 ops/sec      38 usecs/op    
        fsync                             24202.679 ops/sec      41 usecs/op    
        fsync_writethrough                              n/a    
        open_sync                         15760.721 ops/sec      63 usecs/op    
Compare open_sync with different write sizes:    
(This is designed to compare the cost of writing 16kB in different write    
open_sync sizes.)    
         1 * 16kB open_sync write         29108.820 ops/sec      34 usecs/op    
         2 *  8kB open_sync writes        15674.805 ops/sec      64 usecs/op    
         4 *  4kB open_sync writes         9942.061 ops/sec     101 usecs/op    
         8 *  2kB open_sync writes         5637.484 ops/sec     177 usecs/op    
        16 *  1kB open_sync writes         3076.057 ops/sec     325 usecs/op    
Test if fsync on non-write file descriptor is honored:    
(If the times are similar, fsync() can sync data written on a different    
descriptor.)    
        write, fsync, close               32581.863 ops/sec      31 usecs/op    
        write, close, fsync               32512.798 ops/sec      31 usecs/op    
Non-sync'ed 8kB writes:    
        write                            350232.219 ops/sec       3 usecs/op    
```    
### 2 ESSD    
```    
5 seconds per test    
O_DIRECT supported on this platform for open_datasync and open_sync.    
Compare file sync methods using one 8kB write:    
(in wal_sync_method preference order, except fdatasync is Linux's default)    
        open_datasync                      8395.592 ops/sec     119 usecs/op    
        fdatasync                          7722.692 ops/sec     129 usecs/op    
        fsync                              5619.389 ops/sec     178 usecs/op    
        fsync_writethrough                              n/a    
        open_sync                          5685.669 ops/sec     176 usecs/op    
Compare file sync methods using two 8kB writes:    
(in wal_sync_method preference order, except fdatasync is Linux's default)    
        open_datasync                      3858.783 ops/sec     259 usecs/op    
        fdatasync                          5396.356 ops/sec     185 usecs/op    
        fsync                              4214.546 ops/sec     237 usecs/op    
        fsync_writethrough                              n/a    
        open_sync                          3025.366 ops/sec     331 usecs/op    
Compare open_sync with different write sizes:    
(This is designed to compare the cost of writing 16kB in different write    
open_sync sizes.)    
         1 * 16kB open_sync write          4506.749 ops/sec     222 usecs/op    
         2 *  8kB open_sync writes         3099.963 ops/sec     323 usecs/op    
         4 *  4kB open_sync writes         1763.684 ops/sec     567 usecs/op    
         8 *  2kB open_sync writes          429.923 ops/sec    2326 usecs/op    
        16 *  1kB open_sync writes          198.005 ops/sec    5050 usecs/op    
Test if fsync on non-write file descriptor is honored:    
(If the times are similar, fsync() can sync data written on a different    
descriptor.)    
        write, fsync, close                5393.927 ops/sec     185 usecs/op    
        write, close, fsync                5470.240 ops/sec     183 usecs/op    
Non-sync'ed 8kB writes:    
        write                            385505.858 ops/sec       3 usecs/op    
```    
## fio 专业IO测试    
测试项    
```    
vi test    
[global]        
thread        
numjobs=64        
ramp_time=6        
size=10g        
exitall        
time_based        
runtime=180        
group_reporting        
randrepeat=0        
norandommap        
bs=8k        
rwmixwrite=35        
[rw-rand-libaio-mysql-ext4]        
stonewall        
direct=1        
iodepth=16        
iodepth_batch=8        
iodepth_low=8        
iodepth_batch_complete=8        
rw=randrw        
ioengine=libaio        
filename=/data01/ext4        
[rw-seq-libaio-mysql-ext4]        
stonewall        
direct=1        
iodepth=16        
iodepth_batch=8        
iodepth_low=8        
iodepth_batch_complete=8        
rw=rw        
ioengine=libaio        
filename=/data01/ext4        
[rw-rand-sync-pgsql-ext4]        
stonewall        
direct=0        
rw=randrw        
ioengine=sync        
filename=/data01/ext4        
[rw-seq-sync-pgsql-ext4]        
stonewall        
direct=0        
rw=rw        
ioengine=sync        
filename=/data01/ext4    
```    
```    
fio test --output ./cfq-raw.log    
```    
### 1 ECS本地SSD    
```    
rw-rand-libaio-mysql-ext4: (g=0): rw=randrw, bs=(R) 8192B-8192B, (W) 8192B-8192B, (T) 8192B-8192B, ioengine=libaio, iodepth=16    
...    
rw-seq-libaio-mysql-ext4: (g=1): rw=rw, bs=(R) 8192B-8192B, (W) 8192B-8192B, (T) 8192B-8192B, ioengine=libaio, iodepth=16    
...    
rw-rand-sync-pgsql-ext4: (g=2): rw=randrw, bs=(R) 8192B-8192B, (W) 8192B-8192B, (T) 8192B-8192B, ioengine=sync, iodepth=1    
...    
rw-seq-sync-pgsql-ext4: (g=3): rw=rw, bs=(R) 8192B-8192B, (W) 8192B-8192B, (T) 8192B-8192B, ioengine=sync, iodepth=1    
...    
fio-3.1    
Starting 256 threads    
rw-rand-libaio-mysql-ext4: (groupid=0, jobs=64): err= 0: pid=27005: Tue Sep 18 15:18:42 2018    
   read: IOPS=146k, BW=1140MiB/s (1196MB/s)(200GiB/180004msec)    