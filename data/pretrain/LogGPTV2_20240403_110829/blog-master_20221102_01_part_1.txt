## PostgreSQL WAL日志解析SQL工具 walminer发布4.0预览版  
### 作者                                  
digoal                                  
### 日期                                  
2022-11-02                                  
### 标签                                  
PostgreSQL , walminer , sql , dml , ddl , 不依赖logical wal_level , 不依赖源库        
----                                  
## 背景  
感谢传成老师贡献的杰作.       
walminer 可解析wal日志为SQL(包括DML和少量DDL), 不依赖开启logical wal_level, 简直是神器.  
应用场景如: 主从切换后的差异SQL补齐.   
https://gitee.com/movead/XLogMiner  
WalMiner3.0  
=====  
## 什么是WalMiner  
WalMiner是从PostgreSQL的WAL(write ahead logs)日志的解析工具，旨在挖掘wal日志所有的有用信息，从而提供PG的数据恢复支持。目前主要有如下功能：  
- 从waL日志中解析出SQL，包括DML和少量DDL  
  解析出执行的SQL语句的工具，并能生成对应的undo SQL语句。与传统的logical decode插件相比，walminer不要求logical日志级别且解析方式较为灵活。  
- 数据页挽回  
  当数据库被执行了TRUNCATE等不被wal记录的数据清除操作，或者发生磁盘页损坏，可以使用此功能从wal日志中搜索数据，以期尽量挽回数据。  
## **walminer4.0预告**  
walminer4.0换壳为bin工具，一工具解析所有PG版本。  
[walminer4.0预览地址](https://www.zhihu.com/zvideo/1570858004655853568)  
## PG版本支持  
- walminer3.0支持PostgreSQL 10及其以上版本。（此版本放弃对9.x的支持）  
## 编译安装  
**编译一：PG源码编译**  
如果你从编译pg数据库开始  
1. 将walminer目录放置到编译通过的PG工程的"../contrib/"目录下  
2. 进入walminer目录  
3. 执行命令  
   ```bash  
   make && make install  
   ```  
**编译二：依据PG安装编译**  
如果你使用yum或者pg安装包安装了pg  
1. 配置pg的bin路径至环境变量  
   ```bash  
   export PATH=/h2/pg_install/bin:$PATH  
   ```  
2. 进入walminer代码路径  
3. 执行编译安装  
   ```bash  
   USE_PGXS=1 MAJORVERSION=12 make  
   #MAJORVERSION支持‘10’,‘11’,‘12’,‘13’  
   USE_PGXS=1 MAJORVERSION=12 make install  
   ```  
## 使用方法-SQL解析  
### 场景一：从WAL日志产生的数据库中直接执行解析  
#### 1. 创建walminer的extension  
	create extension walminer;  
#### 2. 添加要解析的wal日志文件  
```sql  
-- 添加wal文件：  
select walminer_wal_add('/opt/test/wal');  
-- 注：参数可以为目录或者文件  
```  
#### 3. Remove wal日志文件  
```sql  
-- 移除wal文件：  
select walminer_wal_remove('/opt/test/wal');  
-- 注：参数可以为目录或者文件  
```  
#### 4. List wal日志文件  
```sql  
-- 列出wal文件：  
select walminer_wal_list();  
```  
#### 5. 执行解析  
​	5.1 普通解析  
```sql  
--解析add的全部wal日志  
select walminer_all();  
或 select wal2sql();  
--在add的wal日志中查找对应时间范围的wal记录  
--可以参照walminer_time.sql回归测试中的使用用例  
--时间解析模式的解析结果可能比预期的解析结果要多,详情参照[walminer_decode.c]代码中的注释  
select walminer_by_time(starttime, endtime);  
或 select wal2sql(starttime, endtime);  
--在add的wal日志中查找对应lsn范围的wal记录  
--可以参照walminer_lsn.sql回归测试中的使用用例  
select walminer_by_lsn(startlsn, endlsn);  
或 select wal2sql(startlsn, endlsn);  
--在add的wal日志中查找对应xid的wal记录  
--可以参照walminer_xid.sql回归测试中的使用用例  
--前一个walminer版本对xid的支持是范围解析，但是xid的提交是不连续的  
--会导致各种问题，所以这个版本只支持单xid解析  
select walminer_by_xid(xid);  
或 select wal2sql(xid);  
```  
​	5.2 精确解析  
```sql  
--在add的wal日志中查找对应时间范围的wal记录  
select walminer_by_time(starttime, endtime,'true');   
或 select wal2sql(starttime, endtime,'true');  
--在add的wal日志中查找对应lsn范围的wal记录  
select walminer_by_lsn(startlsn, endlsn,'true');   
或 select wal2sql(startlsn, endlsn,'true');  
--在add的wal日志中查找对应xid的wal记录  
select walminer_by_xid(xid,'true');   
或 select wal2sql(xid,'true');  
```  
walminer的构建基础是，checkpoint之后对每一个page的更改会产生全页写(FPW),因此一个checkpoint之后的所有wal日志可以完美解析。*注意checkpoint是指checkpoint开始的点，而不是checkpoint的wal记录的点，[参照说明](https://my.oschina.net/lcc1990/blog/3027718)*  
普通解析会直接解析给定范围内的wal日志，因为可能没有找到之前的checkpoint点，所以会出现有些记录解析不全导致出现空的解析结果。  
精确解析是指walminer程序会界定需要解析的wal范围，并在给定的wal范围之前探索一个checkpoint开始点c1，从c1点开始记录FPI，然后就可以完美解析指定的wal范围。如果在给定的wal段内没有找到c1点，那么此次解析会报错停止。  
​	5.3 单表解析  
```sql  
--在add的wal日志中查找对应时间范围的wal记录  
select walminer_by_time(starttime, endtime,'false',reloid);   
或 select wal2sql(starttime, endtime,'true',reloid);  
--在add的wal日志中查找对应lsn范围的wal记录  
select walminer_by_lsn(startlsn, endlsn,'true',reloid);   
或 select wal2sql(startlsn, endlsn,'false',reloid);  
--在add的wal日志中查找对应xid的wal记录  
select walminer_by_xid(xid,'true',reloid);  
或 select wal2sql(xid,'true',reloid);  
```  
​	'true'和‘false’代表是否为精确解析模式，reloid为目标表的oid(注意**不是**relfilenode)  
  5.4 快捷解析  
​	场景1中的加载数据字典和加载wal日志步骤可以省略，默认直接加载当前数据字典和当前wal路径下的所有wal文件。这个解析模式只在学习本工具时使用，在生产数据库中，可能会因为wal段切换而导致解析失败。  
 5.5 替身解析  
​	如果一个表被drop或者被truncate等操作，导致新产生的数据字典不包含旧的数据库中所包含的relfilenode，那么使用新的数据字典无法解析出旧的wal日志中包含的的某些内容。在知晓旧表的表结构的前提下，可以使用替身解析模式。替身模式目前只适用于[场景一]。  
```sql  
-- 假设表t1被执行了vacuum full，执行vacuum full前的relfilenode为16384  
-- 新建表t1的替身表  
create table t1_avatar(i int);  
-- 执行替身映射  
select walminer_table_avatar(avatar_table_name, missed_relfilenode);  
-- 执行解析  
select wal2sql();  
-- 查看解析结果时，会发现，对t1表的数据都以t1_avatar表的形式展现在输出结果中  
```  
#### 6. 解析结果查看  
```sql  
select * from walminer_contents;  
```  
```sql  
-- 表walminer_contents   
(  
 sqlno int, 		--本条sql在其事务内的序号  
 xid bigint,		--事务ID  
 topxid bigint,		--如果为子事务，这是是其父事务；否则为0  
 sqlkind int,		--sql类型1->insert;2->update;3->delete(待优化项目)  
 minerd bool,		--解析结果是否完整(缺失checkpoint情况下可能无法解析出正确结果)  
 timestamp timestampTz, --这个SQL所在事务提交的时间  
 op_text text,		--sql  
 undo_text text,	--undo sql  
 complete bool,		--如果为false，说明有可能这个sql所在的事务是不完整解析的  
 schema text,		--目标表所在的模式  
 relation text,		--目标表表名  
 start_lsn pg_lsn,	--这个记录的开始LSN  
 commit_lsn pg_lsn	--这个事务的提交LSN  
)  
```  