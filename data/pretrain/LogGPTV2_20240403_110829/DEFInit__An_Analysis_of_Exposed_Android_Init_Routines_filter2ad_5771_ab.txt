der following the same import rules in [17, sec. imports].
Variables encountered during parsing of static Init constructs
(e.g., import paths) are substituted with their corresponding
default values from .prop and boot environment ﬁles.
Since an Init service deﬁnition can override a previous def-
inition associated with the same service name, DEFINIT only
keeps the most-specialized service deﬁnition that uses the
override modiﬁer (i.e., the last encountered deﬁnition in Init
.rc parsing order that sets the override modiﬁer). For a trig-
ger that is declared multiple times, DEFINIT appends all its
actions under the ﬁrst-encountered trigger (this is equivalent
to Init sequentially invoking the actions of each declaration
3We omit the details of the ﬁrmware unpacking process as we employ
standard unpacking tools and techniques. Interested readers can refer to prior
work (e.g., [9, 11]) for information on unpacking techniques.
USENIX Association
30th USENIX Security Symposium    3689
UnpackExtract Init RoutinesCollect Traces & EstimateBehaviorsr1: [(/bin/wiﬁtest.sh, root, a=1&b=true), ...]r2: [(/vendor/bin/x.sh, root, c=10), ...]...r1: wiﬁtest.sh: [setprop x y; setenforce 0; ...]                       (perms, disable selinux, ...)r2: x.sh: [tcpdump a; mv a /sdcard; ...]],               (dump, capture trafﬁc, ...)...disable selinux:    - setenforce 0]capture trafﬁc:    - tcpdump   - mv * /sdcard/*...Model TriggerConditions &DependenciesIdentify AppsExposing InitRoutinesa=1 &&b=truea=1b=truer1wiﬁtest.shapp1: (r1: perms, disables selinux, ...), ...app2: (r2: dump, captures trafﬁc, ...), ........{.sh}..ELF..APP...propBehavioral  RulesAndroidFirmware..{.rc}Table 1: Security-sensitive APIs and commands used by DEFINIT
for highlighting security-sensitive Init routines.
Category
Device Settings
Sensitive Data
Networking
APIs/Commands
hid ime locksettings settings svc
atrace bugreport content diag_klog
diag_mdlog diag_socket_log
diag_uart_log dumpstate dumpsys
logcat ramdump record_stream_new
screencap screenrecord tcpdump
dnsmasq ifconﬁg iptables telecom send
sendﬁle sendﬁle64
socket_local_server_bind
Package Management applypatch pm dpm insmod patchoat
Permission Control
keystore appops setsid load_policy
setenforce
thermal_engine __reboot
android_reboot reboot
Power Management
Process Management cmd killall killpg ptrace service
UI Interaction
virtual_touchpad am input sendevent
monkey uiautomator
Total
Count
5
15
8
5
5
4
5
6
53
Finally, we consulted the documentations of these commands
and APIs and shortlisted the potentially sensitive ones.
For each Init routine, DEFINIT annotates it with the counts
of security-sensitive commands and APIs it executes. This
categorization gives an analyst a basic understanding of the
overall behavior of a service and its potential security impact.
DEFINIT then uses pattern-matching rules to identify call
sequences in the traces that indicate more speciﬁc interesting
behaviors. For example, a common source of vulnerabilities
in Android is leaking sensitive data to external (shared) stor-
age, which DEFINIT can identify by looking in the traces for
calls to a command from the Sensitive Data category followed
by calls to commands that move ﬁles to a path on external
storage. We developed 116 rules to match speciﬁc call se-
quences and parameters (one to three calls per rule). These
rules are incrementally developed by analysts as they require
domain knowledge of security weaknesses that may manifest
as a result of invoking Android commands and APIs.
5.3 Modeling Trigger Conditions
To capture trigger conditions of Init routines, we propose a
directed heterogeneous graph structure that we refer to as
Init Dependency Graph (IDG) in which we encode trigger
conditions and transitive dependencies between Init triggers,
actions, services, and executed programs. Figure 3 shows the
IDG for the running example in Figure 1. DEFINIT uses an
IDG to identify what functionality Init performs in response
to properties set by privileged apps and binaries.
There are three types of nodes in the IDG: trigger, service,
and executable nodes. A trigger node represents a single Init
trigger condition. For example, the trigger node "a=1" de-
notes that the property key "a" needs to equal "1" at that state
in the IDG. We split composite triggers (boolean conjunctions
of trigger conditions) into multiple nodes, one for each trig-
Figure 3: Simpliﬁed Init Dependency Graph (IDG) for the running
example in Figure 1.
ger condition (a conjunct). A service node represents an Init
service. An executable node is a terminal node that represents
the executable invoked by an Init command (as part of an Init
action) or a service. We use one unique node for each unique
executable invocation (including the executable arguments).
A trigger node is also added for the custom Init property
ctl.start= for each identiﬁed service.
Our IDG construction algorithm is shown in Algorithm 1.
Edges in an IDG can be call edges or conjunction edges.
A call edge represents a caller-callee relationship between
different nodes. Note that a trigger node can call other trigger
nodes by setting properties or triggering events using Init
commands such as setprop and trigger. Also, Init actions
can start services and invoke executables using Init commands
such as start and exec.
Conjunction edges in an IDG encode the dependency of
a multi-condition trigger (a boolean conjunction) on its indi-
vidual operand conditions (each is a property trigger node).
For example, the trigger "a=1 && b=true" in Figure 1 will
have two conjunction edges from the trigger nodes "a=1"
and "b=true". Note that a conjunction trigger can only be
satisﬁed when all its operand property conditions are satisﬁed,
and a property can be used by different trigger conditions
(potentially with different property values).
Finally, we add fall-through call edges from executables
that call an Android API or a command setting an Init property
to the corresponding target trigger nodes that use that property.
The property keys and values in these scenarios are extracted
from the traces collected in §5.2.
DEFINIT builds one IDG for each ﬁrmware image. The
IDG provides a global view of the transitions occurring in-
side Init that involve triggers, services, and executables in the
ﬁrmware, allowing DEFINIT to understand what behaviors
Init can launch and the conditions needed to trigger them by
traversing the IDG as explained in the following section.
Identifying Exposed Routines
5.4
The next step for DEFINIT is to identify the mapping be-
tween privileged apps and sensitive Init routines. To do this,
3690    30th USENIX Security Symposium
USENIX Association
  IDGa=1 &&b=trueconj.a=1conj.b=truewifitestcall/bin/wifitest.shcallinvokeAttack AppsetsetPre-installed ApptriggerroutineexecutableAlgorithm 1: Construct Init Dependency Graph.
inputs
output
:T ← Map of triggers to their routines
:G ← Init Dependency Graph
1 foreach trigger t ∈ T do
add node t to G if missing
if t is a conjunction trigger then
foreach conjunct ti ∈ t do
add node ti to G if missing
add edge ti
con j.−−−→ t to G
foreach action or service s in T [t] do
add node s to G if missing
add edge t call−−→ s to G
foreach executable x called by s do
add node x to G if missing
add edge s call−−→ x to G
foreach property/service p set/called by x do
add node p to G if missing
add edge x call−−→ p to G
2
3
4
5
6
7
8
9
10
11
12
13
14
15
2
3
4
5
6
Algorithm 2: Extract written properties.
inputs
:A ← {APIs to write a local/system property}
S ← app ICFG with Def-Use information
:mapping between written keys and corresponding values
output
// S, K are in depth-ﬁrst order
1 foreach statement s ∈ S calling some API ∈ A do
K ← {deﬁnition points in S of property keys used by the ﬁrst
argument at s}
foreach k ∈ K do
foreach call stack T carrying k to s do
V ← {property values deﬁned in the scope of T used by the
second argument at s}
emit s,k,V
DEFINIT ﬁrst scans each pre-installed app for code sites that
call certain Android APIs of the form set(key, value), such
as android.os.SystemProperties.set, to set a system prop-
erty. Then, DEFINIT builds an ICFG and performs Def-Use
based analysis to identify each set property key and its cor-
responding values in a context- and ﬂow-sensitive manner
where the keys and values are extracted per each call stack
ending at a relevant API call site. Algorithm 2 shows the ba-
sic working principle of this technique. The goal here is to
extract each key and its corresponding values set by an app
along each call stack of a relevant API call site, rather than
extracting bags of all keys and all values used at the call site.
Similarly, DEFINIT also extracts system properties read
by privileged apps and local properties read/written by priv-
ileged apps that share the same UID. DEFINIT then adds
corresponding nodes and edges to the IDG to capture indirect
information ﬂows between apps using these properties. This
is necessary since Android allows apps to share process-scope
properties by using the same process UIDs.4 For example, a
privileged app can have an exposed call site that sets a local
property to signal another privileged app to invoke a sensitive
Init routine. Not accounting for these cross-app properties
would leave exposed routines hiding behind these indirec-
tions undetected. DEFINIT uses identiﬁed written properties
to walk the IDG and discover sensitive Init routines that can
be triggered. Speciﬁcally, for each privileged app, DEFINIT
walks the IDG starting at property trigger nodes correspond-
ing to properties written by the app (in depth-ﬁrst order) and
aggregates the behaviors of terminal executable nodes of tra-
versed paths. When a conjunction node is reached, DEFINIT
only traverses past it if all the conjuncts have been satisﬁed.
Finally, to mark privileged apps exposing Init routines,
DEFINIT performs control-ﬂow reachability analysis sim-
ilar to [10, 11] by ﬁnding a control-ﬂow path from any ex-
ported [20, ch. 4] entry point of an identiﬁed privileged app
that invokes an Init service to the corresponding call site that
results in invoking the service.
6 Evaluation and Security Impact
To understand the prevalence and impact of exposed Init rou-
tines, we performed a large-scale study using DEFINIT on
259 stock Android v8.0 to v11.0 ﬁrmware images covering
21 of the top vendors worldwide as shown in Table 2. These
images contained a total of 64,632 pre-installed apps with
an average of 262 apps per ﬁrmware. At the time of writing,
Android v11.0 was recently released and only a few vendors
provided public Android v11.0 images.
Table 2: Summary of tested Android ﬁrmware images.
Version Vendors
8
9
10
11
Total
19
17
14
5
21
Firmware
(#/vendor)
93 (2;10;5)
75 (1;6;4)
75 (1;11;5)
16 (1;4;3)
259 (1;11;4)
Apps
(#/ﬁrmware)
18,988 (57;805;211)
16,809 (148;452;229)
23,117 (18;504;269)
5,718 (193;527;339)
64,632 (18;805;262)
Counts are ‘total (min;max;avg)’
6.1 Prevalence of Custom Init Routines
Table 3 provides summary statistics of Init routines DEFINIT
identiﬁed in the analyzed images. Of the tested 259 ﬁrmware,
there was a total of 58,523 Init routines (223 per ﬁrmware).
Among these, 38,846 (66%) were custom routines added by
vendors. This averages to about 133 custom Init routines per
ﬁrmware, with some vendors adding as many as 360 custom
Init routines over AOSP. This shows the great extent to which
4Privileged apps can choose their UID by setting a special attribute in
their manifest ﬁles, see https://developer.android.com/guide/topics/
manifest/manifest-element#uid for details.
USENIX Association
30th USENIX Security Symposium    3691
Table 3: Custom and exposed Init routines prevalence per Android version. All exposed routines were custom, added by vendors.
Version
8
9
10
11
Total
Total
15,602 (39;355;166)
16,719 (188;522;220)
21,558 (144;527;287)
4,644 (179;511;273)
58,523 (39;527;236)
Custom
8,613 (9;210;91)
8,537 (41;356;112)
12,576 (22;360;167)
2,704 (29;360;159)
38,846 (9;360;133)
Exposed
Exposed Sensitive
305 (0;42;3)
600 (0;64;8)
911 (0;67;12)
131 (0;46;8)
1,947 (0;67;8)
Counts are ‘total (min;max;avg per ﬁrmware per version)’
81 (0;15;1)
166 (0;16;2)
244 (0;14;3)
24 (0;7;2)
515 (0;16;2)
vendors customize the Init process to introduce new function-
alities. To put this in perspective, AOSP has about 130 Init
routines on average, meaning that vendors introduce at least
as many Init routines as already present in AOSP.
Figure 4 shows the distribution of nodes and edges in the
IDGs constructed by DEFINIT from the ﬁrmware in our data
set. On average, more than 50% of the ﬁrmware had at least
600 IDG nodes, 500 edges, and 300 different paths from a
trigger to an executable with a path length of three or higher
(i.e., three levels of indirection within Init from the moment
a trigger is set until an executable is launched). This shows
the complexity of the data- and control-ﬂow facts encoded in
the .rc ﬁles, which substantiates the need for an automated
system like DEFINIT to bring interesting cases to the surface.
Figure 4: Distribution of IDG nodes, edges, and paths from a trigger
node to a terminal executable node in the identiﬁed Init routines.
6.2 Characteristics of Exposed Routines
Of these Init routines, 1,947 were exposed by an IPC entry
point of a privileged app. This averaged to about eight ex-
posed Init routines per ﬁrmware. 515 of these exposed Init
routines executed at least one sensitive command from those
listed in Table 1. Interestingly (though unsurprisingly given
the number of new routines added by vendors), all exposed
routines were custom routines added by vendors. Notably,
Table 4: Top 10 process UIDs of identiﬁed Init routines. More than
90% of exposed routines were running as system or root.
UID
root
system
default (root)
shell
bluetooth
logd
graphics
wiﬁ
radio
nfc
other
total
Total Custom Exposed
1,342
272
188
50
45
45
3
1
1
0
0
1,947
11,935
10,293
3,146
858
499
99
96
603
997
159
3,745
32,430
15,597
17,305
9,764
1,255
609
599
351
1,563
2,247
178
9,055
58,523
Exposed
Sensitive
354
2
113
0
45
0
0
1
0
0
0
515
ﬁrmware images from vendors closest to AOSP (i.e., Google)
had no exposed Init routines.5
Tables 4 and 5 list the process UIDs and SELinux domains
of identiﬁed routines. More than 90% of the exposed routines
ran as root or system, the two most privileged users on An-
droid. Likewise, the majority ran under the default SELinux
domains as well (init and vendor_init). All identiﬁed ex-
posed routines had UIDs and domains that are signiﬁcantly
more privileged than those assigned to third-party apps by
the system (randomly generated at install time and falls in the
untrusted_app SELinux domain). It is unclear to us why
exactly all these custom services needed to run with these
privileged defaults. It appeared as if vendors simply followed
the path of least resistance by using the defaults rather than
properly using Init modiﬁers to conﬁne their custom Init rou-
tines such that they have access only to the resources and
capabilities necessary for their operation. Note that while
there may be SELinux transition rules based on the ﬁle names
of routine executables, these rules would not block exploita-
tion of an exposed routine since it is unlikely that a vendor
would add custom routines to invoke custom executables yet
fail to conﬁgure SELinux transitions to allow the executable
to function as intended. We discuss this further in §7.
The breakdown of shell scripts and binaries invoked by the
identiﬁed Init routines is shown in Table 6. In total, 2,685
5We observed routines that were exposed only via exported GUI entry
points, making them potential targets for GUI cloaking attacks [12]. We
provide measurements on these in Appendix A.5.
3692    30th USENIX Security Symposium
USENIX Association
1005001000# of Nodes010203040# of firmware1005001000# of Edges02040# of firmware200400600800# of Paths020406080# of firmware12345Path Length050100# of firmwareTable 5: Top 10 SELinux domains of identiﬁed Init routines. The
domain init is the default domain. The domain vendor_init is the
default for routine executables located in the /vendor partition.
Domain
init
rutilsdaemon
vendor_init
dumpstate
junklog
logserver
xlogcat
kapd
logoem
glogcat
other
Total
Total Custom Exposed
988
632
102
50
29
28
18
14
12
12
62
1,947
11,816
2,545
15,719
176
90
66