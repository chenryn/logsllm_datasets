related ways to do this. We call the ﬁrst method
password-preﬁx and the second password-key. We
also describe some additional defenses later in this
section.
3.3.1 Password Preﬁx
“Password-preﬁx” is an elegantly unobtrusive
mechanism to defend against the JavaScript attacks
discussed in the previous section. Users are asked to
preﬁx their passwords with a short, publicly known
sequence of printable characters. PwdHash moni-
tors the entire key stream and takes protective action
when it detects the password-preﬁx sequence.
The password-preﬁx must be short but unlikely
• The extension has two modes: normal mode and
password mode. The extension monitors all key-
board events. In normal mode, it passes all key-
board events to the page as is. A discussion of
password mode follows.
• When the password-preﬁx (@@) is detected in
the key stream, the extension switches to pass-
word mode and does the following: (1) it in-
ternally records all subsequent key presses, and
(2) it replaces the user’s keystrokes with a ﬁxed
sequence and passes the resulting events to the
browser. More precisely, the ﬁrst keystroke fol-
lowing the password-preﬁx is replaced with “A,”
the second with “B,” and so on. (We explain the
reason for the “A,” “B,” “C” sequence in Sec-
tion 6. Essentially, it enables our extension to
ignore editing keys like Backspace and Delete
and just keep a translation table mapping these
“mask” keys to real keys). This translation con-
tinues until focus leaves the password ﬁeld, at
which point the extension reverts back to nor-
mal mode.
In other words, all keystrokes en-
tered following the password-preﬁx are hidden
from the browser and from scripts running in-
side the browser until focus leaves the ﬁeld.
Hence, JavaScript keyloggers (Figure 1) cannot
steal the cleartext password (although we note
that the password length is revealed).
• Hashing can take place at one of two times.
The ﬁrst option is to replace the contents of
the ﬁeld with the hashed password when focus
leaves the ﬁeld. The second option is to trap
the form submission event (called ‘BeforeNav-
igate2’ in Internet Explorer) and then replace
the contents of all password ﬁelds with the ap-
propriate hashed passwords. The ﬁrst option is
more jarring to the user, because his password
could potentially change length immediately af-
ter entering it (once it gets hashed). However,
20
14th USENIX Security Symposium
USENIX Association
Figure 1: Keyboard monitoring
Figure 2: Domain rewriting attack
Figure 3: Mock password ﬁeld
On the phishing server, keylogger.php is set to:
Figure 4: Online mock password ﬁeld
Figure 5: Password reﬂection attack
USENIX Association
14th USENIX Security Symposium
21
it allows the extension to work automatically at
sites like yahoo.com that implement their own
password hashing algorithm using JavaScript on
their login pages. We provide implementations
of both options.
browser and scripts running within the browser. The
extension returns to normal mode when focus leaves
the ﬁeld. If the password-key is pressed while focus
is not in a password ﬁeld, the user is warned not to
enter a password.
• Finally, if the password-preﬁx is ever detected
while focus is not on a password ﬁeld, our
browser extension reminds the user not to en-
ter a password. Thus, users are protected from
mock password ﬁeld attacks (Figure 3) that con-
fuse them into entering a password into an inse-
cure location.
This password-preﬁx approach blocks the
JavaScript attacks described in the previous section
and provides a number of additional beneﬁts:
• Legitimate web pages often collect PIN’s or so-
cial security numbers via password ﬁelds. Pwd-
Hash will not hash the data in such ﬁelds be-
cause this data does not contain the password-
preﬁx.
• Password reset pages often ask users to enter
both the old and the new password. New Pwd-
Hash users must visit these pages to “change”
their old passwords to the new, hashed versions.
The password entered in the “current password”
ﬁeld should not be hashed, while the password
entered (and often repeated) in the “new pass-
word” section should be hashed. The password-
preﬁx mechanism automatically provides the
right functionality, assuming the old password
does not contain the password-preﬁx.
• The password-preﬁx conveniently lets users de-
cide which passwords they want to protect using
hashing and which passwords they want left as
is.
3.3.2 Password Key
Password-key is an alternative to the password-
preﬁx mechanism.
Instead of using a printable se-
quence (@@) the idea is to use a dedicated keyboard
key called a “password-key.” Users are asked to press
the password-key just before entering a password.
We imagine that future keyboards might have a ded-
icated key marked “password,” but for now we use
the ‘F2’ key, which is not currently used by Internet
Explorer, Firefox, or Opera.
The semantics of the password-key inside our
extension are very similar to the password-preﬁx.
When the user presses the password-key the ex-
tension enters password mode as described previ-
ously. All subsequent keystrokes are hidden from the
The password-key, however, is less prone to
mistake: whereas the password-preﬁx could appear
naturally in the keystream and trigger undesired pro-
tection, password-key protection can only be initiated
in response to decisive action by the user. With re-
spect to user experience, however, a password-key
seems inferior to a password-preﬁx. First, novice
users need to know to press the password-key when
entering their password, but not to press the key when
entering a PIN. While the preﬁx mechanism also de-
mands a special attention to passwords, it may be
easier to teach users that “all secure passwords be-
gin with (@@)” than asking them to remember to
press a certain key before entering a password. Sec-
ond, upon resetting their password at a password re-
set page just after installing PwdHash users need to
know to press the password-key for their new pass-
word, but not to press the key for their old password.
This can be confusing.
We thus believe that password-preﬁx is the
preferable method of triggering password protection
and discuss the password-key method only for the
sake of completeness. Our browser extension imple-
ments both methods.
We emphasize that neither the password-preﬁx
nor the password-key defends against spyware and
keyloggers already installed on the user’s machine.
Keyloggers and other competing extensions can lis-
ten to keyboard events in the same way that Pwd-
Hash does. One potential solution is to implement
the password-preﬁx/password-key mechanism inside
the OS kernel or in a protected Virtual Machine
(VM). That is, the kernel or VM monitors user pass-
words and embeds secure (hashed) versions directly
into outgoing HTTP requests. We leave this as a
promising direction for future research.
3.3.3 Password trafﬁc light
The password trafﬁc light is an optional Pwd-
Hash feature that sits in a new informational toolbar
in the browser window. The “light” displays green
when the extension is in password mode, and red in
all other cases. Thus, when focus is in an insecure lo-
cation (such as a text ﬁeld or a mock password ﬁeld),
the light is red to inform the user that their password
is not being protected. This feature is very help-
ful for security-conscious users, and is a partial de-
22
14th USENIX Security Symposium
USENIX Association
fense against focus stealing attacks discussed in Sec-
tion 6.3. However, novice users are unlikely to look at
the trafﬁc light every time they enter their password.
Furthermore, a sophisticated attacker may attempt to
spoof the trafﬁc light itself. As of Windows XP Ser-
vice Pack 2, spooﬁng the trafﬁc light is harder since
scripts can no longer create pop-up windows outside
of Internet Explorer’s content area. Spooﬁng the traf-
ﬁc light might still be feasible by displaying a fake
browser window that appears to be on top of the real
browser window but is actually inside it.
3.3.4 Keystream monitor
A natural idea for anyone who is trying to im-
plement web password hashing is a keystream mon-
itor that detects unsafe user behavior. This defense
would consist of a recording component and a moni-
tor component. The recording component records all
passwords that the user types while the extension is
in password mode and stores a one-way hash of these
passwords on disk. The monitor component monitors
the entire keyboard key stream for a consecutive se-
quence of keystrokes that matches one of the user’s
passwords. If such a sequence is keyed while the ex-
tension is not in password mode, the user is alerted.
We do not use a keystream monitor in Pwd-
Hash, but this feature might be useful for an exten-
sion that automatically enables password mode when
a password ﬁeld is focused, rather than relying on the
user to press the password-key or password-preﬁx.
However, this approach suffers from several limita-
tions. The most severe is that the keystream moni-
tor does not defend against an online mock password
ﬁeld (Figure 4). By the time the monitor detects that
a password has been entered, it is too late — the
phisher has already obtained all but the last charac-
ter of the user’s password. Another problem is that
storing hashes of user passwords on disk facilitates
an ofﬂine password dictionary attack if the user’s ma-
chine is inﬁltrated. However, the same is true of the
browser’s auto-complete password database. And ﬁ-
nally, novice users tend to choose poor passwords
that might occur naturally in the keystream, when
the extension is not in password mode. Although the
threat of constant warnings might encourage the user
to choose unique and unusual passwords, excessive
false alarms could also cause the user to disregard
monitor warnings.
3.3.5 Alternate designs
For completeness, we note that an alternate de-
fense against JavaScript attacks is to ask users to al-
ways enter passwords in some dedicated non-browser
window [ABM97]. This would prevent the browser
and any scripts running inside it from having access
to the password. We do not consider this a fea-
sible solution since it changes the user experience
considerably. First, it requires the user to simulta-
neously enter data in different parts of the screen
— the username is typed into the browser window
whereas the password is typed into some other win-
dow. Second, novice users will often neglect to use
this non-browser window and will continue to type
passwords inside the browser. Though steps could
be taken to greatly minimize the impact of a separate
window (such as by removing its border and position-
ing it over the password ﬁeld it replaces), our design
enables web users to safely enter passwords in the
browser window as they currently do.
3.4 Auto-complete
Most web browsers have an “auto-complete”
database that can securely store user passwords for
various web sites. If the user instructs the browser
to store a hashed password in the auto-complete
database, PwdHash ensures that the hashed pass-
word is stored, rather than the plaintext version. On
future visits to the page, the hashed password will be
automatically ﬁlled in. Auto-complete can also be
used with unprotected passwords in the usual way.
4 Salting and encoding issues
The salt that is used to hash the password
should be different for different sites and resistant to
spooﬁng, and the extension must be able to determine
its value.
4.1 Which domain name to use?
There are two possible values for the salt: (1)
the domain name of the site hosting the current page
(the current domain), or (2) the domain name that will
receive the form data upon form submissions (the tar-
get domain). For security reasons discussed below,
we favor using the current domain name over the tar-
get domain name. A third option is to take the salt
from the SSL certiﬁcate, but we present several argu-
ments as to why this is not the best option.
Salting with current site domain. A natural
choice is to use the domain of the page (or frame)
where the password ﬁeld is located. Thus a password
ﬁeld at a phishing site will be hashed with the phish-
ing domain name, while a password ﬁeld on a legiti-
mate site will be hashed appropriately.
USENIX Association
14th USENIX Security Symposium
23
Password theft using phishing might still be
feasible, but only if the phisher has the ability to place
HTML form tags on the target site. A few websites,
like blogs, do allow users to post HTML tags where
they can be viewed by others, but growing awareness
of cross-site scripting attacks has led most sites to
sanitize user data (by removing tags and script) be-
fore displaying it back to the user.
Salting with form target domain. Using the do-
main name in the action attribute of the form might
also seem like a reasonable salt, because it ensures
that the hashed password for one site is never sent
to a different site. Because the password is ultimately
sent to the target page, it makes sense for the salt to be
derived from the target page. Note that our browser
extension would need to intercept the submitted form
data, rather than just reading the form action attribute,
because the attribute might be changed at any time by
JavaScript on the page (Figure 2).
Unfortunately, it is not a reasonable to assume
that web servers will be able identify passwords in
arbitrarily-named form variables and prevent them
from being stored where they can be later viewed. As
a result, password reﬂection attacks (Figure 5) can
be used by a phisher to obtain a user’s site-speciﬁc
hashed password.
Due to these password reﬂection attacks, our
browser extension implements salting with the cur-
rent site domain.
4.2 General salting complications
Some web sites span multiple domains, and the
same password is used at all of these domains. If the
site domain is used for hashing, a PwdHash pass-
word set up at amazon.com would not match a
password set up at amazon.co.uk. An even worse
scenario would occur if the password reset page is
at a different domain from the login page. Imagine
that the user resets their password at some domain
A but the login page is at some different domain B.
Then after password reset, the user’s password is set
to hA = hash(pwd, A). However, during login, the
browser sends hash(pwd, B), which will be rejected
since it does not equal hA.
Luckily, most sites use a consistent domain do-
main. Even sites that use a single sign-on solution,
such as Microsoft Passport, usually have a single do-
main, such as passport.net, devoted to creating ac-
counts and signing in. We can consider the unusual
sites where this salting method does not work to be
special cases (handled in Section 4.5).
We mention as a side note that sites should
never use the GET method for login forms, even over
SSL. Not only will the site password be displayed in
cleartext in the location ﬁeld of the browser, but if the
user clicks on any off-site links, the password will be
transmitted by the browser to the linked site “Ref-
erer” header.
4.3 Salting with SSL certiﬁcates
The organization name or common name of the