4.  加载 shell 配置脚本,以便 `composer-cli`{.literal}
    命令的自动完成功能可在不重启的情况下立即开始工作：
    ``` screen
    $ source  /etc/bash_completion.d/composer-cli
    ```
:::
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
`osbuild-composer`{.literal} 软件包是新的后端引擎,它是 Red Hat
Enterprise Linux 8.3 及之后的版本的首选默认选择。以前的后端
`lorax-composer`{.literal} 软件包被视为已弃用,将只接受 Red Hat
Enterprise Linux 8
生命周期剩余部分的修复,并将在以后的主发行版本中被忽略。建议卸载
`lorax-composer`{.literal}，而是使用 osbuild-composer。
:::
:::
::: section
::: titlepage
# []{#installing-composer_composing-a-customized-rhel-system-image.html#reverting-to-previous-backend_installing-composer}恢复到 `lorax-composer`{.literal} 镜像构建器后端 {.title}
:::
`osbuild-composer`{.literal}
后端虽然具有更好的扩展性，但目前它还无法实现 `lorax-composer`{.literal}
后端的所有功能。
要恢复到上一个后端,请按照以下步骤执行：
::: itemizedlist
**先决条件**
-   已安装 `osbuild-composer`{.literal} 软件包
:::
::: orderedlist
**流程**
1.  删除 osbuild-composer 后端。
    ``` screen
    # yum remove osbuild-composer
    ```
2.  在 `/etc/yum.conf file`{.literal} 中,为 `osbuild-composer`{.literal}
    软件包添加排除条目。
    ``` screen
    # cat /etc/yum.conf
    [main]
    gpgcheck=1
    installonly_limit=3
    clean_requirements_on_remove=True
    best=True
    skip_if_unavailable=False
    exclude=osbuild-composer
    ```
3.  安装 \"lorax-composer\" 软件包。
    ``` screen
    # yum install lorax-composer
    ```
:::
::: itemizedlist
**其它资源**
-   [创建红帽支持问题单](https://access.redhat.com/support/cases/#/case/new/open-case?intcmp=hp%7Ca%7Ca3%7Ccase&caseCreate=true){.link}。
:::
:::
:::
[]{#creating-system-images-with-composer-command-line-interface_composing-a-customized-rhel-system-image.html}
::: chapter
::: titlepage
# []{#creating-system-images-with-composer-command-line-interface_composing-a-customized-rhel-system-image.html#creating-system-images-with-composer-command-line-interface_composing-a-customized-rhel-system-image}第 3 章 使用 Image Builder 命令行界面创建系统镜像 {.title}
:::
镜像构建器是创建自定义系统镜像的工具。要控制镜像构建器并创建自定义系统镜像,请使用命令行界面,它目前是使用
Image Builder 的首选方法。
::: section
::: titlepage
# []{#creating-system-images-with-composer-command-line-interface_composing-a-customized-rhel-system-image.html#composer-command-line-interface_creating-system-images-with-composer-command-line-interface}镜像构建器命令行界面 {.title}
:::
镜像构建器命令行界面目前是使用镜像构建器的首选方法。它所提供的功能比
[Web
控制台界面](#creating-system-images-with-composer-web-console-interface_composing-a-customized-rhel-system-image.html "第 4 章 使用 Image Builder Web 控制台界面创建系统镜像"){.link}更多。要使用这个接口,请运行带有适当选项和子命令的
`composer-cli`{.literal} 命令。
命令行界面的工作流总结如下：
::: orderedlist
1.  将蓝图定义导出（[*保存*]{.emphasis}）到纯文本文件
2.  在文本编辑器中编辑这个文件
3.  将蓝图文本文件导入（[*推送*]{.emphasis}）到镜像构建器
4.  运行 compose 从蓝图构建镜像
5.  导出镜像文件以下载它
:::
除了实现这个步骤的基本子命令外, `composer-cli`{.literal}
命令还提供很多子命令来检查配置的蓝图和组合的状态。
要以非 root 身份运行 `composer-cli`{.literal} 命令,用户必须位于
`weldr`{.literal} 或 `root`{.literal} 组中。
:::
::: section
::: titlepage
# []{#creating-system-images-with-composer-command-line-interface_composing-a-customized-rhel-system-image.html#creating-a-composer-blueprint-with-command-line-interface_creating-system-images-with-composer-command-line-interface}使用命令行界面创建镜像构建器蓝图 {.title}
:::
此流程描述了如何使用命令行界面创建新镜像构建器蓝图。
::: orderedlist
**流程**
1.  创建一个包含以下内容的纯文本文件：
    ``` screen
    name = "BLUEPRINT-NAME"
    description = "LONG FORM DESCRIPTION TEXT"
    version = "0.0.1"
    modules = []
    groups = []
    ```
    用您的蓝图的名称和描述替换 [*BLUEPRINT-NAME*]{.emphasis} 和 [*LONG
    FORM DESCRIPTION TEXT*]{.emphasis}。
    根据 [Semantic Versioning](https://semver.org/){.link} 方案，将
    [*0.0.1*]{.emphasis} 替换为一个版本号。
2.  对于您要包含在蓝图中的每个软件包,在该文件中添加以下行：
    ``` screen
    [[packages]]
    name = "package-name"
    version = "package-version"
    ```
    使用软件包名称替换 [*package-name*]{.emphasis}，比如
    [**[httpd]{.package}**]{.strong}、[**[gdb-doc]{.package}**]{.strong}
    或者 [**[coreutils]{.package}**]{.strong}。
    将 [*package-version*]{.emphasis} 替换为要使用的版本。此字段支持
    `dnf`{.literal} 版本规格：
    ::: informalexample
    ::: itemizedlist
    -   对于特定版本,请使用准确的版本号,如 [**8.10**]{.strong}。
    -   对于最新的可用版本,请使用星号 [**\***]{.strong}。
    -   对于最新的次版本，请使用以下格式，如 [**8.**]{.strong}\*。
    :::
    :::
3.  蓝图可以通过多种方式自定义。在本例中,通过执行以下步骤可以禁用
    Simultaneous Multi Threading(SMT)。如需了解更多可用的自定义,请参阅
    [支持的镜像自定义](#creating-system-images-with-composer-command-line-interface_composing-a-customized-rhel-system-image.html#image-customizations_creating-system-images-with-composer-command-line-interface "支持的镜像自定义"){.link}。
    ``` screen
    [customizations.kernel]
    append = "nosmt=force"
    ```
4.  将文件保存为 [*BLUEPRINT-NAME*]{.emphasis}.toml,并关闭文本编辑器。
5.  推送（导入）蓝图：
    ``` screen
    # composer-cli blueprints push BLUEPRINT-NAME.toml
    ```
    将 [*BLUEPRINT-NAME*]{.emphasis} 替换为您在前面步骤中使用的值。
6.  要验证蓝图是否已被推送并已存在，列出现有的蓝图：
    ``` screen
    # composer-cli blueprints list
    ```
7.  检查蓝图中列出的组件和版本是否有效：
    ``` screen
    # composer-cli blueprints depsolve BLUEPRINT-NAME
    ```
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
您可以使用 `composer-cli`{.literal} 命令作为非 root
创建镜像。要做到这一点,请将您的用户添加到 `weldr`{.literal} 或
`root`{.literal} 组中。要将用户添加到 `weldr`{.literal}
组中,请执行以下步骤：
``` screen
# usermod -a -G weldr user
$ newgrp weldr
```
:::
:::
::: section
::: titlepage
# []{#creating-system-images-with-composer-command-line-interface_composing-a-customized-rhel-system-image.html#editing-a-composer-blueprint-with-command-line-interface_creating-system-images-with-composer-command-line-interface}使用命令行界面编辑镜像构建器蓝图 {.title}
:::
此流程描述了如何在命令行界面中编辑现有镜像构建器蓝图。
::: orderedlist
**流程**
1.  将蓝图保存（导出）到本地文本文件：
    ``` screen
    # composer-cli blueprints save BLUEPRINT-NAME
    ```
2.  使用您选择的文本编辑器编辑 BLUEPRINT [*-NAME*]{.emphasis}.toml
    文件并进行修改。
3.  在完成编辑前,请确定该文件是一个有效的蓝图：
    ::: orderedlist
    1.  删除这一行（如果存在）:
        ``` screen
        packages = []
        ```
    2.  增加版本号。请记住, Image Builder 蓝图版本必须使用 [Semantic
        Versioning](https://semver.org/){.link}
        方案。另请注意,如果您不更改版本,则会自动增加版本的
        [**补丁组件**]{.strong}。
    3.  检查内容是否是有效的 TOML 规格。如需更多信息 [,请参阅 TOML
        文档](https://github.com/toml-lang/toml#toml/){.link}。
        ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
        ### 注意 {.title}
        TOML
        文档是一个社区产品,它不被红帽支持。您可以使用该工具报告任何问题：
        [https://github.com/toml-lang/toml/issues](https://github.com/toml-lang/toml/issues){.link}
        :::
    :::
4.  保存文件并关闭编辑器。
5.  将蓝图推送到镜像构建器：
    ``` screen
    # composer-cli blueprints push BLUEPRINT-NAME.toml
    ```
    请注意，您必须提供文件名，包括 `.toml`{.literal}
    扩展名，而在其他命令中可以只使用蓝图的名称。
6.  要验证上传到镜像构建器的内容是否与您的编辑匹配,请列出蓝图的内容：
    ``` screen
    # composer-cli blueprints show BLUEPRINT-NAME
    ```
7.  检查蓝图中列出的组件和版本是否有效：
    ``` screen
    # composer-cli blueprints depsolve BLUEPRINT-NAME
    ```
:::
:::
::: section
::: titlepage
# []{#creating-system-images-with-composer-command-line-interface_composing-a-customized-rhel-system-image.html#creating-a-system-image-with-composer-in-the-command-line-interface_creating-system-images-with-composer-command-line-interface}在命令行界面中使用镜像构建器创建系统镜像 {.title}
:::
此流程演示了如何使用 Image Builder 命令行界面构建自定义镜像。
::: itemizedlist
**先决条件**
-   您已为镜像准备了蓝图。
:::
::: orderedlist
**流程**
1.  启动 compose：
    ``` screen
    # composer-cli compose start BLUEPRINT-NAME IMAGE-TYPE
    ```
    将 [*BLUEPRINT-NAME*]{.emphasis} 替换为蓝图的名称,将
    [*IMAGE-TYPE*]{.emphasis} 替换为镜像类型。有关可能的值,请查看
    `composer-cli compose types`{.literal} 命令的输出。
    compose 进程在后台启动，并显示 Compose 的 UUID。
2.  等待 compose 完成。请注意,这可能需要几分钟时间。
    检查 Compose 的状态：
    ``` screen
    # composer-cli compose status
    ```
    完成的 compose 显示状态值 [**FINISHED**]{.strong}。根据 UUID
    识别列表中的内容。
3.  完成 compose 后，下载生成的镜像文件：
    ``` screen
    # composer-cli compose image UUID
    ```
    使用前面步骤中显示的 [*UUID*]{.emphasis} 值替换 UUID。
    您还可以使用 `composer-cli compose logs UUID`{.literal} 命令或使用
    `composer-cli compose metadata UUID`{.literal} 命令下载日志。
:::
:::
::: section
::: titlepage
# []{#creating-system-images-with-composer-command-line-interface_composing-a-customized-rhel-system-image.html#basic-composer-command-line-commands_creating-system-images-with-composer-command-line-interface}基本镜像构建器命令行命令 {.title}
:::
Image Builder 命令行界面提供以下子命令。