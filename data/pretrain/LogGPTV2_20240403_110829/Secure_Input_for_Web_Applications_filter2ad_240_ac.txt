43
4
3
0
0
7
12
2
0
0
14
12
39
13
0
64
7
18
3
0
28
1
14
3
0
18
4
7
7
0
18
Table 1. Breakdown of the difﬁculties and learning curves reported by the study participants.
example, of the 39 users that considered the graphical input
to be medium difﬁcult, 30 found that this input method be-
came easier after getting used to it. It can be seen that only
few consider any of the methods to be hard, with token cal-
culation being rated least favorably. An important ﬁnding is
that of those who did not consider the methods to be easy
initially, a majority reported that the experience improved
over time.
To see if the users’ responses to the questionnaire coin-
cide with actual behavior, we compared the questionnaire
results with the logs recorded during our study. Indeed, for
the graphical input method, we observed that the input du-
ration and input errors (i.e., the user missed the digit or en-
tered a wrong digit) decreased with time. The average time
to enter a 9-digit account number decreases from about 56
seconds to about 23 seconds. The average click interval
(i.e., the time it takes to ﬁnd the next desired digit in the
image) goes down from the initial 3.8 seconds to 2.1 sec-
onds and can be as low as 1.5 seconds for certain numbers.
For the conﬁrmation schemes, we recorded for each user
and transaction the number of token resubmissions until the
transaction was completed successfully. Also in this case,
we observed that the number of necessary retries decreased
over time. For the token lookup method, the average num-
ber of retries decreased from 0.21 for the ﬁrst attempt to
0.05 after three rounds. The decrease for the token calcula-
tion scheme was from initially 0.68 retries down to 0.24.
Method
Graphical Input
Token Lookup
Token Calculation
Yes
17
4
15
Sometimes
24
18
25
No
23
42
24
Table 2. The “annoyance factor” — did using
the particular method take too long?
To assess the “annoyance factor,” we asked, for each
method, whether performing a transaction would take “too
long.” The results are shown in Table 2. We can see that
the majority does not consider the extra effort to be overly
annoying. Finally, we asked whether the study participants
would be willing to use the proposed methods for their ac-
tual online banking, provided that these methods offer addi-
tional security. For CAPTCHA input, 51 participants (80%)
answered “yes,” while for the conﬁrmation schemes, the ap-
proval was even higher (58 users or 91%).
When comparing the results from this study with our ini-
tial one, we can conclude that the additional effort invested
in improving our prototype has paid off. While in the ﬁrst
study, assistance was requested by almost all participants,
now only ten people required assistance with the CAPT-
CHA input, seven needed help with token computation, and
two with token lookup. Moreover, during the initial study,
87% of the transactions were completed successfully, while
in the new study, the success rate was raised to 95%. Fi-
nally, we compared the average durations for a (successful)
transaction: 133 seconds in the ﬁrst study compared to 94
seconds in the second. When we exclude the tutorial trans-
actions from the average, the time even drops to 77 seconds.
In addition to the ease-of-use, our study was also de-
signed to assess the security of schemes that require some
collaboration (and alertness) from users. To this end, we
simulated a Trojan horse that attempted to tamper with
some of the transactions (i.e., change the destination ac-
count number). We designed the Trojan to do this openly,
that is, the modiﬁed account number was displayed on the
conﬁrmation page (and when entering it via CAPTCHA in-
put). The hope (from the point of view of the attacker)
was that the user would not notice the malicious account
number and complete the transaction anyways. We did not
speciﬁcally advise users of the fact that the machine could
be compromised. For each user, the Trojan allowed the ﬁrst
few transaction to be free of tampering. Then, attacks were
injected randomly with a certain probability.
In the ﬁrst
study, the probability was high (causing up to three attacks
for each user), and we decided to lower it for the second
study because we realized that too many attacks distracted
the users from the main goal of this study, assessing the
system’s usability. Now, about 25% of the participants ex-
perienced a single attack in the course of the test run.
We did not assume that this unsophisticated attack would
382382
prove effective, but 25% of the attacks in the ﬁrst study were
successful, regardless of the security scheme used. In the
second study, we noted that all attacks against CAPTCHA
input were noticed by the users. Without graphical input, a
few attacks were successful. This underlines in a disturb-
ing fashion the limits of security solutions that require user
cooperation. Nevertheless, our proposed protection tech-
niques force an attacker to trick a user to accept a clearly
incorrect account number. This is in contrast to current so-
lutions, where the attack is invisible.
Given the results of our evaluations and our experiences
while conducting the user studies, it was apparent that once
our proposed solution was understood, most people were
able to perform the required steps with little difﬁculty. Con-
sidering the additional protection that our techniques pro-
vide, we believe that they are suitable for deployment in
security-critical environments such as online banking.
5 Related Work
Client-side sensitive information theft (e.g., spyware,
keyloggers, Trojan horses, etc.) is a growing problem. In
fact, the Anti-Phishing Working Group has reported over
170 different types of keyloggers distributed on thousands
of web sites [1]. Hence, the problem has been increasingly
gaining attention and a number of mitigation ideas have
been presented to date.
Several client-side solutions have been proposed that aim
to mitigate spoofed web-site-based phishing attacks. Pwd-
Hash [22] is an Internet Explorer plug-in that transparently
converts a user’s password into a domain-speciﬁc password.
A side-effect of the tool is some protection from phishing at-
tacks. Because the generated password is domain-speciﬁc,
the password that is phished is not useful. SpoofGuard [5] is
a plug-in solution speciﬁcally developed to mitigate phish-
ing attacks. The plug-in looks for “phishing symptoms”
such as similar sounding domain names and masked links.
Note that both solutions focus on the mitigation of spoofed
web-site-based phishing attacks. That is, they are vulnera-
ble against client-side attacks as they rely on the integrity
of the environment they are running in. Similarly, solu-
tions such as the recently introduced Internet Explorer anti-
phishing features [16] are ineffective when an attacker has
control over the user’s environment.
Spyblock [11] aims to protect user passwords against
network snifﬁng and dictionary attacks. It proposes to use
a combination of password-authenticated key exchange and
SSL. Furthermore, as additional defense against pharming,
cookie snifﬁng, and session hijacking, it proposes a form of
transaction conﬁrmation over an authenticated channel. The
tool is distributed as a client-side system that consists of a
browser extension and an authentication agent that runs in
a virtual machine environment that is “protected” from spy-
ware. A disadvantage of Spyblock is that the user needs to
install and conﬁgure it, as opposed to our purely server-side
solution.
A number of hardware-based solutions have been pro-
posed to enable secure input on untrusted platforms. Chip
cards and smart-card readers [10, 23], for example, are pop-
ular choices. Unfortunately, it might be possible for the at-
tacker to circumvent such solutions if the implementations
rely on untrusted components such as drivers and operating
system calls [12, 24, 25]. As an alternative to smart-card-
based solutions, several researchers have proposed using
handhelds as a secure input medium [2, 15]. Note that al-
though hardware-based solutions are useful, unfortunately,
they are often expensive and have the disadvantage that they
have to be installed and available to users.
A popular anti-keylogger technique that is already being
deployed by certain security-aware organizations are graph-
ical keyboards. Similar to our graphical input technique, the
idea is that the user types in sensitive data using a graphi-
cal keyboard. As a result, she is safe from keyloggers that
record the keys that are pressed. However, there have been
increasing reports of so-called “screenscrapers” that capture
the user’s screen and send the screenshot to a remote phish-
ing server for later analysis [6]. Also, with many graphical
keyboard solutions, sensitive information can be extracted
from user elements that show the entered data to provide
feedback for the user. Finally, to the best of our knowledge,
no graphical keyboard solution uses CAPTCHAs. Thus, the
entered information can be determined in a straightforward
fashion using simple OCR schemes.
The cryptographic community has also explored dif-
ferent protocols to identify humans over insecure chan-
nels [8, 14, 27]. In one of the earliest papers [14], a scheme
is presented in which users have to respond to a challenge,
having memorized a secret of the modest amount of ten
characters and ﬁve digits. The authors present a security
analysis, but no usability study is provided (actually, the
authors defer the implementation of their techniques to fu-
ture work). The importance of usability studies is shown in
a later paper by Hopper and Blum [8]. In their work, the
authors develop a secure scheme for human identiﬁcation,
but after performing user studies with 54 persons, conclude
that their approach “is impractical for use by humans.” In
fact, a transaction takes on average 160 seconds, and can
only be performed by 10% of the population. Our scheme,
on the other hand, takes less than half of this time, and 95%
of the transactions completed successfully.
Finally, client-side attacks could be mitigated if the user
could easily verify the integrity of the software running on
her platform. Trusted Computing (TC) [20] initiatives aim
to achieve this objective by means of software and hard-
ware. At this time, however, TC solutions largely remain
prototypes that are not widely deployed in practice.
383383
6 Conclusion
Web applications have become the most dominant way to
provide access to online services. A growing class of prob-
lems are client-side attacks in which malicious software is
automatically installed on the user’s machine. This software
can then easily access, control, and manipulate all sensitive
information in the user’s environment. Hence, an important
web security research problem is how to enable a user on an
untrusted platform to securely transmit information to with
a web application.
Previous solutions to this problem are mostly hardware-
based and require peripheral devices such as smart-card
readers and mobile phones. In this paper, we present two
novel server-side techniques that can be used to enable se-
cure user input. The ﬁrst technique uses conﬁrmation to-
kens that are bound to sensitive data to ensure data integrity.
Conﬁrmation tokens can either be looked up directly in a
code book or they need to be calculated using simple algo-
rithms. The second technique extends graphical input with
CAPTCHAs to protect the conﬁdentiality and integrity of
user input against automated attacks. The usability studies
that we conducted demonstrate that, after an initial learning
step, our techniques are understood and can also be applied
by a non-technical audience.
Our dependency on the web will certainly increase in the
future. At the same time, client-side attacks against web
applications will most likely be continuing problems as the
attacks are easy to perform and proﬁtable. We hope that
the techniques we present in this paper will be useful in
mitigating such attacks.
References
[1] Anti-phishing Working Group.
http://www.
antiphishing.org.
[2] D. Balfanz and E. Felten. Hand-Held Computers Can Be
Better Smart Cards. In Proceedings of the 8th Usenix Secu-
rity Symposium, 1999.
[3] Carnegie Mellon University.
The CAPTCHA Project.
http://www.captcha.net.
[4] W. Cheswick.
Johnny Can Obfuscate: Beyond Mother’s
Maiden Name. In Proceedings of the 1st USENIX Workshop
on Hot Topics in Security (HotSec), 2006.
[5] N. Chou, R. Ledesma, Y. Teraguchi, and J. C. Mitchell.
Client-side defense against web-based identity theft. In Pro-
ceedings of the Network and Distributed Systems Security
(NDSS), 2004.
[6] FinExtra.com.
Phishers move to counteract bank se-
http://www.finextra.com/
curity programmes.
fullstory.asp?id=14149.
[7] S. Hocevar. PWNtcha - Captcha Decoder. http://sam.
zoy.org/pwntcha.
[8] N. Hopper and M. Blum. Secure Human Identiﬁcation Pro-
tocols. In AsiaCrypt, 2001.
384384
[9] IETF Working Group.
Transport Layer Security
(TLS). http://www.ietf.org/html.charters/
tls-charter.html, 2006.
[10] International Organization for Standardization (ISO).
ISO
7816 Smart Card Standard. http://www.iso.org/.
[11] C. Jackson, D. Boneh, and J. C. Mitchell.
Stronger
Password Authentication Using Virtual Machines.
http://crypto.stanford.edu/SpyBlock/
spyblock.pdf.
[12] A. Josang, D. Povey, and A. Ho. What You See is Not Al-
ways What You Sign.
In Annual Technical Conference of
the Australian UNIX and Open Systems User Group, 2002.
[13] I. Krawarik and M. Kwauka. Attacken aufs Konto (in Ger-
man). http://www.ispa.at/www/getFile.php?
id=846, Jan 2007.
[14] T. Matsumoto and H. Imai. Human Identiﬁcation Through
Insecure Channel. In EuroCrypt, 1991.
[15] J. M. McCune, A. Perrig, and M. K. Reiter. Bump in the
Ether: A Framework for Securing Sensitive User Input. In
Proceedings of the USENIX Annual Technical Conference,
June 2006.
[16] Microsoft Corporation.
Internet Explorer 7 features.
http://www.microsoft.com/windows/ie/
ie7/about/features/default.mspx.
[17] G. Mori and J. Malik. Recognizing Objects in Adversarial
Clutter: Breaking a Visual CAPTCHA. In Proceedings of
the IEEE Computer Vision and Pattern Recognition Confer-
ence (CVPR). IEEE Computer Society Press, 2003.
[18] S. Mori, C. Y. Suen, and K. Yamamoto. Historical review of
OCR research and development. Document image analysis,
pages 244–273, 1995.
[19] A. Moshchuk, T. Bragin, S. D. Gribble, and H. M. Levy. A
Crawler-based Study of Spyware on the Web. In Proceed-
ings of the 13th Annual Network and Distributed System Se-
curity Symposium (NDSS), February 2006.
[20] S. Pearson. Trusted Computing Platforms. Prentice Hall,
2002.
[24] A. Spalka, A. Cremers, and H. Langweg. Protecting the
Creation of Digital Signatures with Trusted Computing Plat-
form Technology Against Attacks by Trojan Horse. In IFIP
Security Conference, 2001.
[25] A. Spalka, A. Cremers, and H. Langweg. Trojan Horse At-
Informatica,
tacks on Software for Electronic Signatures.
26, 2002.
[26] W3C Working Group. Inaccessibility of CAPTCHA, Alter-
natives to Visual Turing Tests on the Web. http://www.
w3.org/TR/turingtest/.
[27] C. Wang, H. Hwang, and T. Tsai. One the Matsumoto and
Imai’s human identiﬁcation scheme. In EuroCrypt, 1995.
[21] Pressetext Austria. Phishing-Sch¨aden bleiben am Kunden
h¨angen (in German). http://www.pressetext.at/
pte.mc?pte=061116033, Nov 2006.
[22] B. Ross, C. Jackson, N. Miyake, D. Boneh, and J. C.
Mitchell. Stronger Password Authentication Using Browser
Extensions. In Proceedings of the 14th Usenix Security Sym-
posium, 2005.
[23] Secure
Information
Technology
Center
The Austrian Citizen Card.
(A-SIT).
//www.buergerkarte.at/index en.html,
2005.
Austria
http: