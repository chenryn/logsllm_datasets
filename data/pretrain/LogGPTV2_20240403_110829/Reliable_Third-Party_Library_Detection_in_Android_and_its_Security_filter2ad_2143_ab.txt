third-party libraries.
After the eliminations, we search for weakly connected
components in the homogeny graph (line 7–8). Such com-
ponents may contain a single or multiple nodes (packages).
As nodes in each component are connected by inclusion and
inheritance edges, each identiﬁed component is a homogeny
package union following our deﬁnition.
2) Library Instance Construction: Given the constructed
homogeny package unions, the next step is to group one or
several unions together to recover the instances of potential
third-party libraries. Our manual investigation of over 200
real-world commercial apps indicates that method invocations
are a quite informative feature. Thus, we ﬁrst recognize all
the inter-union function calls and build the call graph. As a
Algorithm 1: Homogeny package union construction
Input: Android app p
Output: Homogeny package union set Hp
1 Hp ← ∅; H ← ∅,
2 H.V ← packages in the input app; /* V is the set of vertices. */
3 ﬁlter out packages in the root nodes in H;
4 ﬁlter out Android ofﬁcial packages in H;
5 H.E ← inclusion relation set; /* E is the set of edges. */
6 H.E ← H.E ∩ inheritance relation set;
7 for each weakly connected component g in H do
8
Hp.add(g);
9 return Hp
result, identifying library instances essentially becomes a task
to collect all the reachable nodes on the call graph from the
root nodes.
Algorithm 2 presents our approach to generate the call graph
for homogeny package unions and ﬁnding the instances of
potential libraries. We ﬁrst build the call graph I, according
the inter-union calls (line 2–5). We then ﬁlter out noisy calls
(line 6–7) in terms of two criteria. Finally, for each weakly
connected component, we search for “root nodes” and collect
all
the reachable components from one root node as one
instance of a potential library (line 9–12). Naturally, the root
node is deﬁned as a node on the call graph with no incoming
edges. On the other hand, if there is no root node, we output
the connected component as one library instance (line 14).
In this research, we identify and eliminate two noisy calls
that could impede our analysis. The ﬁrst one describes the
call graph edges connecting the application code and the
libraries. Such connections could incorrectly bridge two library
instances through the application code, thus overestimating the
library boundaries. We identify application code according to
the manifest ﬁles in the input apps; the application code and
evolved call edges are trimmed off on the call graph (line 6).
We also observe a special call that could lead to false
positive in this research; we name it ghost call. A ghost call
4
appears in a method, but neither the caller nor the callee
exists in the DEX code of the decompiled app. Such ghost
calls are not rare—we found 82 apps containing ghost calls
among 10,043 samples. Most of “ghost calls” are calling
functions from customized Android frameworks. For exam-
ple,
invoking com.samsung.android.
SsdkInterface.getVersionCode which exists only
on Samsung phones. The decompiler failed to consider these
cases, leading to dangling function targets. To ﬁlter out such
errors, we check the appearance of both caller and callee for
each call relation, and eliminate those ghost calls (line 7).
there is a call
Algorithm 2: Library instance construction
Input: Homogeny package union set Hp
Output: Library instance set Il
1 I ← ∅;
2 I.V ← Hp; /* V is the set of vertices. */
3 for any union u1 and u2 in I do
4
if there is a call relation in hu1, u2i then
5
add hu1, u2i in I.E; /* E is the set of edges. */
6 ﬁlter out application code-related calls in I;
7 ﬁlter out ghost calls in I;
8 for each weakly connected component g in I do
9
if there are root nodes in g then
10
11
12
13
14
for each root do
cl ← reachable components from this root;
Il.add(cl);
else
Il.add(g);
15 return Il
D. Feature Generation
As previously mentioned, a library instance includes one or
more homogeny package unions, while a union can consist of
multiple packages. The feature of a library instance can be
deﬁned as the combination of package features, and further
divided into features of classes in each package. Since each
class usually consists of several methods, in this research
we employ method-level features as the basic elements to
construct the library instance-level features.
To this end, we ﬁrst build the control ﬂow graph (CFG) of
each method. The feature of every basic block on the CFG is
calculated by hashing all the opcodes inside the block. We then
concatenate the features of the basic blocks on the CFG in a
depth-ﬁrst order. For a parent node with two or more children,
we sort the values of the children nodes and prioritize the node
with the smallest value.
We then construct
the feature of a class with features
of all its methods. To this end, we concatenate the feature
values of all methods in a non-decreasing order. Such feature
sequences is then hashed again as the class-level features.
Finally, we build the library instance-level feature following
the same strategy—sorting all of its class-level features in a
non-decreasing order and hashing the feature sequences.
Note that one of our central design choice is to generate
mutation-sensitive and obfuscation-resilient features for each
library instance; such design choice can enable ﬁner-grained
Android app analysis in an efﬁcient way. We now discuss how
we satisfy such requirements.
1) Mutation Sensitive: To produce features that are sensi-
tive to library mutations, we generate hash value from opcodes
of all the instructions in the basic blocks. Since even subtle
modiﬁcations would lead to the changes of the underlying
instructions, our instruction-level hashing should be surely
updated regarding almost all the mutations.
Many (security-related) mutations, e.g., the remote control
vulnerability exposed in Baidu moplus SDK [20], would
only update a single line of code in one speciﬁc version of
the library. That means, previous system API-based library
detection algorithm is not able to distinguish such mutations.
On the other hand, by hashing the underlying instructions
within each basic block, features utilized in our research can
preserve the sensitivity in front of various real-world scenarios.
Naturally, mutations with different features are considered
as different library instances. That means, instances of one
library can be put into different groups if they have different
features. To further cluster mutations, we compare the package
names of mutations; in our current design, two mutations are
considered from the same library if they have the same name.
2) Obfuscation Resilient: Our in-depth study of obfuscated
Android apps shows that names of packages, classes, and even
methods are commonly turned into meaningless strings (e.g., /
t, /a, /b). To avoid being confused by this disturbance, LibD
is designed to only hash the underlying opcode sequences
as the features of each basic block. Note that by extracting
features from the underlying implementation, LibD is naturally
resilient towards renaming on package names. In addition,
although renaming on class and method names can change
the operands of certain control-ﬂow instructions, the original
opcodes are preserved. For example, method call instructions
would have different operands when the callee’s name is
obfuscated. However, since we only calculate the hashing
value of the opcode sequences within basic blocks and do not
consider the operands, LibD is suitable to defeat the class
and method-level renaming obfuscations. In sum, features
extracted by LibD are obfuscation-resilient, as shown in our
experimental results.
Note that given our renaming-resilient features, obfuscated
library instances should be clustered into the same group as
their normal versions. In other words, we are able to recover
the original identity of the obfuscated libraries by investigating
instances clustered into same groups.
E. Library Identiﬁcation
Given an input app,
the aforementioned techniques can
generate instances of potential libraries (§III-C) as well as
features of each instance (§III-D). We apply such process to
a large amount of apps and collect all the identiﬁed instances
and their features (experimental details are disclosed in §IV).
The next step is to group instances by their signatures,
i.e., the MD5 hashes of extracted features. Instances with the
same signature are assigned to the same group. A clustering
threshold is selected to decide if a group is large enough
to represent a library. That is, a group of library instances
5
TABLE I: Numbers of apps collected for evaluation and their origins.
TABLE II: Third-party libraries detected with different clustering
threshold settings.
Market
# of apps
URL
mumayi
appfun
520apk
lenovo
baidu
jifeng
yingyongbao
hiapk
gezila
xiaomi
yy138
liqucn
angeeks
3533
apk91
nduo
1mobile
sougou
anzhi
anzow
zs2345
7xz
huawei
16app
apk3310
appchina
others
55,682
47,090
13,048
151,426
30,275
30,661
5,184
76,066
11,030
63,494
5,073
10,134
54,432
15,871
27,190
8,965
16,659
27,795
401,578
12,521
4,538
4,871
6,804
38,003
22,376
244,413
62,216
www.mumayi.com
appfun.adwo.com
www.520apk.com
www.lenovomm.com
shouji.baidu.com
www.gfan.com
sj.qq.com
www.hiapk.com
www.gezila.com
app.mi.com
www.yy138.com
www.liqucn.com
www.angeeks.com
www.3533.com
zs.91.com
www.nduo.cn
www.1mobile.com
zhushou.sogou.com
www.anzhi.com
www.anzow.com
zs.2345.com
www.7xz.com
app.hicloud.com
www.16apk.com
apk.3310.com
www.appchina.com
(Appendix A)
total
1,427,395
is considered to represent a third-party library only if the
number of instances in this group is greater than or equal
to the threshold. Details about how the threshold is decided
are presented in §IV-B.
We label each cluster with the topmost level package name.
If a cluster contains instances with different names, the label
is set to be the name carried by most instances. We further
merges clusters with the same label. Such merged clusters
indicate libraries with different mutations.
IV. EVALUATION
A. Dataset
To evaluate LibD, we crawled 1,427,395 Android apps
from 45 third-party markets. Although the ofﬁcial app market,
Google Play, hosts over a million apps [2], it conducts rigorous
reviews on submitted apps, including both static and dynamic
analysis. Presumably, many malicious or vulnerable third-party
libraries may get rejected during the review process [21],
[22]. On the other hand, third-party markets usually do not
have such review processes, and we expect to collect more
diverse library instances. As we will show with experiment
results, we successfully detected a large number of library
mutations, many of which are obfuscated, with our current
settings. In addition to well established third-party markets,
we also crawled apps from popular Android forums. Table I
lists the sources from which we collected apps and the number
of samples crawled from each source.
B. Clustering Threshold
As mentioned in §III-E, LibD needs a hyper parameter
named the clustering threshold to decide whether a group
of library instances is large enough to represent a third-party
6
Threshold
# of libraries
# of mutations
50
45
40
35
32
30
25
20
15
10
2,350
2,584
2,893
3,298
3,567
3,827
4,550
5,811
7,576
11,458
9,868
11,061
12,576
14,563
16,074
17,298
21,405
27,763
38,150
60,729
library. We investigated how different values of the clustering
threshold can affect the number of detected libraries and then
tried to set a reasonable threshold by referring to related work.
Previously, different thresholds have been used to cluster
libraries. For example, Wukong [7] set the threshold as 32
while Li et al. used 10 [9]. To search for the best option
empirically, we iterated different threshold values from 10 to
50 and recorded the number of libraries detected with each of
the thresholds. Recall from §III-E that LibD clusters library
instances with the same feature into groups, and each group is
considered to be a library mutation. If some mutations share
the same topmost level package name, they are identiﬁed as
different versions of the same library. Naturally, with a larger
clustering threshold used, the number of detected libraries and
mutations decreases.
Table II shows the detection results regarding different
threshold settings. As can be seen, even with a relatively large
value of the threshold, i.e., 50, LibD can detect a large number
of libraries (over 2,000).
Comparing LibD with previous work, we report that LibD
can detect more third-party libraries than the both whitelist and
system API-based methods [4], [7]. We will present further
discussions in §IV-D.
C. Threshold Sensitivity
Since the analysis results of LibD depend on the clustering
threshold as a hyper-parameter, we conducted a sensitivity
analysis to investigate how different
threshold values can
impact
the number of detected libraries and whether the
stability of threshold values is correlated to factors, e.g., the
sample size. For this purpose, we break down the numbers in