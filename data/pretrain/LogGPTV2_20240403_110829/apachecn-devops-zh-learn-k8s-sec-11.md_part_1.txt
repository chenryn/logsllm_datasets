# 十一、深度防御
深度防御是网络安全中的一种方法，它应用多层安全控制来保护有价值的资产。在传统或单一的 IT 环境中，我们可以列出相当多的:身份验证、加密、授权、日志记录、入侵检测、防病毒、一个**虚拟专用网络** ( **VPN** )、防火墙等等。您可能会发现这些安全控制也存在于 Kubernetes 集群中(它们应该存在)。
在前几章中，我们已经讨论了身份验证、授权、准入控制器、保护 Kubernetes 组件、保护配置、强化映像和 Kubernetes 工作负载等主题。所有这些都建立了不同的安全控制层来保护您的 Kubernetes 集群。在本章中，我们将讨论建立附加安全控制层的主题，这些主题与 Kubernetes 集群中的运行时防御最为相关。这些是我们将在本章中讨论的问题:您的集群是否暴露了任何敏感数据？如果在 Kubernetes 集群中发生攻击，您能检测到攻击吗？你的 Kubernetes 集群能承受攻击吗？你如何应对这次袭击？
在本章中，我们将讨论 Kubernetes 审计，然后我们将介绍高可用性的概念，并讨论如何在 Kubernetes 集群中应用高可用性。接下来，我们将介绍 Vault，它是 Kubernetes 集群的一个方便的机密管理产品。然后，我们将讨论如何使用 Falco 来检测 Kubernetes 星团中的异常活动。最后但同样重要的是，我们将介绍用于取证的 Sysdig Inspect 和用户空间中的**检查点和资源**(也称为 **CRIU** )。
本章将涵盖以下主题:
*   介绍 Kubernetes 审计
*   在 Kubernetes 集群中实现高可用性
*   使用保管库管理机密
*   用法尔科探测异常
*   与 Sysdig Inspect 和 CRIU 进行取证
# 介绍 Kubernetes 审计
1.11 版本引入了 Kubernetes 审计。Kubernetes 审核按时间顺序记录事件，如创建部署、修补 pods、删除命名空间等。通过审计，Kubernetes 集群管理员能够回答以下问题:
*   发生了什么事？(一个 Pod 被创建，它是什么样的 Pod )
*   是谁干的？(来自用户/管理员)
*   什么时候发生的？(事件的时间戳)
*   在哪里发生的？(pod 是在哪个命名空间中创建的？)
从安全角度来看，审计使 DevOps 和安全团队能够通过跟踪 Kubernetes 集群内发生的事件来更好地检测和预防异常。
在 Kubernetes 集群中，是`kube-apiserver`进行审核。当一个请求(例如，创建名称空间)被发送到`kube-apiserver`时，该请求可能会经历多个阶段。每个阶段都会产生一个事件。以下是已知的阶段:
*   `RequestReceived`:审核处理程序一收到请求就生成事件，不进行处理。
*   `RequestStarted`:事件产生于响应头发送到响应体发送之间，仅适用于`watch`等长时间运行的请求。
*   `RequestComplete`:事件是响应体发送时生成的。
*   `Panic`:发生死机时生成事件。
在本节中，我们将首先介绍 Kubernetes 审计策略，然后向您展示如何启用 Kubernetes 审计以及保持审计记录的几种方法。
## 立方审计政策
由于记录 Kubernetes 集群内发生的所有事情是不现实的，因此审计策略允许用户定义关于应该记录什么样的事件以及应该记录多少事件细节的规则。当`kube-apiserver`处理一个事件时，它会按顺序比较审核策略中的规则列表。第一个匹配规则还规定了事件的审核级别。让我们看看审计策略是什么样子的。这里有一个例子:
```
apiVersion: audit.k8s.io/v1 # This is required.
kind: Policy
# Skip generating audit events for all requests in RequestReceived stage. This can be either set at the policy level or rule level.
omitStages:
  - "RequestReceived"
rules:
  # Log pod changes at RequestResponse level
  - level: RequestResponse
    verbs: ["create", "update"]
    namespace: ["ns1", "ns2", "ns3"]
    resources:
    - group: ""
# Only check access to resource "pods", not the sub-resource of pods which is consistent with the RBAC policy.
      resources: ["pods"]
# Log "pods/log", "pods/status" at Metadata level
  - level: Metadata
    resources:
    - group: ""
      resources: ["pods/log", "pods/status"]
# Don't log authenticated requests to certain non-resource URL paths.
  - level: None
    userGroups: ["system:authenticated"]
    nonResourceURLs: ["/api*", "/version"]
# Log configmap and secret changes in all other namespaces at the Metadata level.
  - level: Metadata
    resources:
    - group: "" # core API group
      resources: ["secrets", "configmaps"]
```
可以在审核策略中配置多个审核规则。每个审核规则将由以下字段配置:
*   `level`:定义审核事件详细程度的审核级别。
*   `resources`:Kubernetes 审计对象。资源可以由****应用编程接口** ( **应用编程接口**)组和对象类型指定。**
***   `nonResourcesURL`:非资源**统一资源定位符** ( **URL** )路径，不与任何被审核资源关联。*   `namespace`:决定哪些 Kubernetes 对象将接受哪些命名空间的审核。空字符串将用于选择非命名空间对象，空列表表示每个命名空间。*   `verb`:决定将要审核的 Kubernetes 对象的具体操作——例如`create`、`update`或`delete`。*   `users`:决定审核规则适用的认证用户*   `userGroups`:决定审核规则适用的认证用户组。*   `omitStages`:跳过在给定阶段生成事件。这也可以在策略级别设置。**
 **通过指定`verb`、`namespace`、`resources`等，审核策略允许您在细粒度级别配置策略。该规则的审核级别定义了应该记录事件的多少细节。有四个审核级别，详细如下:
*   `None`:不记录符合审核规则的事件。
*   `Metadata`:当事件符合审核规则时，将请求的元数据(如`user`、`timestamp`、`resource`、`verb`等)记录到`kube-apiserver`。
*   `Request`:当事件与审核规则匹配时，记录元数据和请求正文。这不适用于非资源网址。
*   `RequestResponse`:当事件符合审核规则时，记录元数据、请求和响应主体。这不适用于非资源请求。
请求级事件比元数据级事件更详细，而`RequestResponse`级事件比请求级事件更详细。高冗长要求更多的**输入/输出** ( **输入/输出**)吞吐量和存储。理解审核级别之间的差异是非常必要的，这样您就可以为资源消耗和安全性正确定义审核规则。成功配置审计策略后，让我们看看审计事件是什么样子的。以下是元数据级别的审核事件:
```
{
  "kind": "Event",
  "apiVersion": "audit.k8s.io/v1",
  "level": "Metadata",
  "auditID": "05698e93-6ad7-4f4e-8ae9-046694bee469",
  "stage": "ResponseComplete",
  "requestURI": "/api/v1/namespaces/ns1/pods",
  "verb": "create",
  "user": {
    "username": "admin",
    "uid": "admin",
    "groups": [
      "system:masters",
      "system:authenticated"
    ]
  },
  "sourceIPs": [
    "98.207.36.92"
  ],
  "userAgent": "kubectl/v1.17.4 (darwin/amd64) kubernetes/8d8aa39",
  "objectRef": {
    "resource": "pods",
    "namespace": "ns1",
    "name": "pod-1",
    "apiVersion": "v1"
  },
  "responseStatus": {
    "metadata": {},
    "code": 201
  },
  "requestReceivedTimestamp": "2020-04-09T07:10:52.471720Z",
  "stageTimestamp": "2020-04-09T07:10:52.485551Z",
  "annotations": {
    "authorization.k8s.io/decision": "allow",
    "authorization.k8s.io/reason": ""
  }
}
```
前面的审计事件显示了`user`、`timestamp`、被访问的对象、授权决定等等。请求级审核事件在审核事件的`requestObject`字段中提供额外信息。您将在`requestObject`字段中找到工作量的规格，如下所示:
```
  "requestObject": {
    "kind": "Pod",
    "apiVersion": "v1",
    "metadata": {
      "name": "pod-2",
      "namespace": "ns2",
      "creationTimestamp": null,
      ...
    },
    "spec": {
      "containers": [
        {
          "name": "echo",
          "image": "busybox",
          "command": [
            "sh",
            "-c",
            "echo 'this is echo' && sleep 1h"
          ],
          ...
          "imagePullPolicy": "Always"
        }
      ],
      ...
      "securityContext": {},
    },
```
`RequestResponse`级审核事件最啰嗦。事件中的`responseObject`实例几乎与`requestObject`相同，有额外的信息，如资源版本和创建时间戳，如下面的代码块所示:
```
{
  "responseObject": {
      ...
      "selfLink": "/api/v1/namespaces/ns3/pods/pod-3",
      "uid": "3fd18de1-7a31-11ea-9e8d-0a39f00d8287",
      "resourceVersion": "217243",
      "creationTimestamp": "2020-04-09T07:10:53Z",
      "tolerations": [
        {
          "key": "node.kubernetes.io/not-ready",
          "operator": "Exists",
          "effect": "NoExecute",
          "tolerationSeconds": 300
        },
        {
          "key": "node.kubernetes.io/unreachable",
          "operator": "Exists",
          "effect": "NoExecute",
          "tolerationSeconds": 300
        }
      ],
      ...
    },
 }
```