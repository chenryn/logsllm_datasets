1,1 ← ((cid:96)2(cid:107)(cid:96)3) and computes the collision for the node
sets x(cid:48)
1,1 ←
v1,1 using its trapdoor csk and randomness r1,1, i.e., r(cid:48)
Col(csk, x1,1, r1,1, x(cid:48)
1,1). This means that the chameleon hash
function maps to the same value v1,1 = Ch(x1,1; r1,1) =
Ch(x(cid:48)
1,1) and thus, the tree authenticates the leaves
(cid:96)2, (cid:96)3 (using randomness r(cid:48)
1,1). The authentication path of
the leaves (cid:96)2, (cid:96)3 consists of aPath = (v0,1, v2,1) and R =
(r(cid:48)
1,1, rρ). Thus, the attacker only learns x(cid:48)
1,1 and not
the dummy values x1,1, r1,1 that has been used to compute
v1,1.
1,1; r(cid:48)
1,1, r(cid:48)
ρ
v1,3 ← Ch(x1,3; r1,3)
(cid:96)4
(cid:96)5
Figure 3: Appending the leaves (cid:96)4 and (cid:96)5 to the CAT,
requires the computation of a collision in node v2,1.
Now, assume that we would like to add two additional el-
ements (cid:96)4 and (cid:96)5 to the CAT (c.f. Figure 3). Observe that
we are in the situation where all leaves in the left part of
tree are used and the right part of the tree consists only
of the element v2,1. The complete right subtree with root
node v2,1 does not exist at this point as it was unneces-
sary to authenticate any of the previous leaves.
In order
to authenticate the leaves (cid:96)4 and (cid:96)5, our algorithm gen-
erates the skeleton of the right subtree that is needed for
the corresponding authentication path. That is, the algo-
rithm computes v1,2 ← H((cid:96)4(cid:107)(cid:96)5), picks two random values
x1,3, r1,3, and sets v1,3 ← Ch(x1,3; r1,3). The last step is
to apply the trapdoor to the chameleon hash function used
2,1 ← (v1,2(cid:107)v1,3)
in node v2,1 = Ch(x2,1; r2,1), i.e., it sets x(cid:48)
computes r(cid:48)
2,1). The authentica-
tion path of the leaves (cid:96)4, (cid:96)5 consists of aPath = (v1,3, v2,0)
and R = (r2,1, rρ).
2,1 ← Col(csk, x2,1, r2,1, x(cid:48)
We would like to draw the readers attention to the way we
apply the trapdoor to the nodes. The idea is to apply the
trapdoor to the ﬁrst node on the path from the leaf (cid:96)i to the
root ρ that is computed by a chameleon hash. This way we
guarantee that each trapdoor is applied to each node only
once and therefore, the one who stores the tree never sees a
collision.
5.3 Special Property of the Construction
One of the interesting properties of our construction is the
amount of information that is needed to add an element to
the tree. In fact, only the current authentication path, the
pre-images of the chameleon hashes with the corresponding
randomness, and the trapdoor are needed. More precisely,
consider the tree shown in Figure 2. It is basically the au-
thentication path for the leaves (cid:96)0, (cid:96)1 and the missing nodes
that are required to compute the authentication path for the
leaves (cid:96)4 and (cid:96)5 are computed on the ﬂy. This means that
if the tree has depth 2D for some D = poly(λ), the clients
stores only log(2D) = poly(λ) elements. As it turns out, this
property will be very useful for our veriﬁable data streaming
protocol, where the client essentially stores these elements
and the sever the entire tree.
6. OUR CONSTRUCTION
Although the high level idea of CATs is quickly graspable,
the formal description is rather complicated. To simplify the
exposition, we denote by [a] a vector of elements, i.e., [a] =
(a0, . . . , aD−1) and [(x, r)] = ((x0, r0), . . . , (xD−1, rD−1)),
resp.
Construction 1. Let H be a hash function and let CH =
(Gen, Ch, Col) be a chameleon hash function. We deﬁne
the chameleon authentication tree CAT = (catGen, addLeaf,
catVrfy) as follows:
catGen(1λ, D): The key generation algorithm computes keys
of the chameleon hash function (cpk, csk) ← Gen(1λ)
and (cpk1, csk1) ← Gen(1λ). It picks two random val-
ues xρ, rρ, sets ρ ← Ch(xρ; rρ), sets the counter c ← 0,
and the state to st ← (c, D, xρ, rρ).
It returns the
private key sp as (csk, st) and the public key vp as
(cpk, ρ).
addLeaf(sp, (cid:96)): The path generation algorithm parses the
private key sp as (csk, st) and recovers the counter
c from st. Then,
it picks a random value r, sets
((cid:96)c, (cid:96)c+1) ← Ch1((cid:96); r) and distinguishes between two
cases:
c = 0: addLeaf picks random values xh,1 ← {0, 1}2len
rh,1 ← {0, 1}λ (for h = 1, . . . , D − 2), and sets
vh,1 ← Ch(xh,1; rh,1). Subsequently, it computes
the authentication path for (cid:96) as deﬁned in the
algorithm catVrfy up to the level D − 2. De-
note by x(cid:48)
ρ the resulting value. Then, addLeaf
applies the trapdoor csk to the root node ρ to
ρ ←
obtain the matching randomness r(cid:48)
ρ, i.e., r(cid:48)
Col(csk, xρ, rρ, x(cid:48)
ρ) and sets R = (r(cid:48)
ρ, r). The algo-
rithm computes the corresponding authentication
path for the leaf (cid:96) as aPath = ((vh+1,1, . . . , vD−1,1),
it sets the counter c ← 2, and the state
R),
st’ ← (c, D, x(cid:48)
ρ, [x, r], (cid:96)0, (cid:96)1). The algorithm
returns sp(cid:48) = (csk, st
(cid:48)), the index 0, and the au-
thentication path aPath.
ρ, r(cid:48)
958c ← c + 2
for h = 1 to D − 2 do
if (cid:98)c/2h(cid:99) is even then
if (vh,(cid:98)c/2h(cid:99)+1) (cid:54)∈ st then
xh,(cid:98)c/2h(cid:99)+1 ← {0, 1}2len
rh,(cid:98)c/2h(cid:99)+1 ← {0, 1}λ
vh,(cid:98)c/2h(cid:99)+1 = Ch(xh,(cid:98)c/2h(cid:99)+1; rh,(cid:98)c/2h(cid:99)+1)
st.add(xh,(cid:98)c/2h(cid:99)+1, rh,(cid:98)c/2h(cid:99)+1)
aPath.add(vh,(cid:98)c/2h(cid:99)+1)
else
aPath.add(vh,(cid:98)c/2h(cid:99)+1)
end if
end if
end for
R.add(r)
output (sp’,c,(aPath, R))
if (cid:98)c/2h(cid:99) is odd then
if (vh,(cid:98)c/2h(cid:99)) ∈ st then
h,(cid:98)c/2h(cid:99) = (vh−1,(cid:98)c/2h−1(cid:99)||vh−1,(cid:98)c/2h−1(cid:98)+1)
x(cid:48)
h,(cid:98)c/2h(cid:99) ← Col(csk, xh,(cid:98)c/2h(cid:99), rh,(cid:98)c/2h(cid:99), x(cid:48)
r(cid:48)
h,(cid:98)c/2h(cid:99))
vh,(cid:98)c/2h(cid:99)−1 = H(vh−1,(cid:98)c/2h−1(cid:99)−2||vh−1,(cid:98)c/2h−1(cid:99)−1)
R.add(r(cid:48)
st.add(r(cid:48)
aPath.add(vh,(cid:98)c/2h(cid:99)−1)
st.del(vh−1,(cid:98)c/2h−1(cid:99)−2, vh−1,(cid:98)c/2h−1(cid:99)−1, xh,(cid:98)c/2h(cid:99), rh,(cid:98)c/2h(cid:99))
h,(cid:98)c/2h(cid:99))
h,(cid:98)c/2h(cid:99))
else
end if
Figure 4: Algorithm to generate the authentication path.
c > 0: The algorithm addLeaf gets the counter c from
the state st, creates a new list aPath and proceeds
as deﬁned in Figure 4.
ρ
catVrfy(vp, i, (cid:96), aPath): The input of the path veriﬁcation al-
gorithm is a public key vp = (cpk, ρ), the index i
of the leaf (cid:96), and the authentication path aPath =
((v1,(cid:98)i/2(cid:99), . . . , vD−2,(cid:98)i/2D−2(cid:99)), R), where R is a non-
empty set that contains all randomness that are nec-
essary to compute the chameleon hash functions. The
veriﬁcation algorithm sets ((cid:96)i, (cid:96)i+1) ← Ch1((cid:96); r) and
computes the node vh,i for h = 2, . . . , D− 2 as follows:
If (cid:4)i/2h(cid:5) ≡ 1 mod 2:
(cid:16)
If (cid:4)i/2h(cid:5) ≡ 0 mod 2:
x ← vh−1,(cid:98)i/2h−1(cid:99)||vh−1,(cid:98)i/2h−1(cid:99)+1,
vh,i ← Ch
x; rh,(cid:98)i/2h(cid:99)
(cid:17)
, with rh,(cid:98)i/2h(cid:99) ∈ R.
x ← vh−1,(cid:98)i/2h−1(cid:99)−2||vh−1,(cid:98)i/2h−1(cid:99)−1,
vh,i ← H(x).
Finally, the veriﬁer computes the root node ˆρ as ˆρ ←
Ch(vD−2,0||vD−2,1; rρ) (with rρ ∈ R). If ˆρ = ρ, then
the leaf is authenticated, and otherwise rejected.
6.1 Intuition of the Security Proof
To explain the proof idea, consider an eﬃcient adversary
A that inserts at most q := q(λ) leaves. Since the adversary
is eﬃcient, the number of leaves are polynomially bounded.
The idea is to store the q leaves (cid:96)1, . . . , (cid:96)q in the tree and
then to choose dummy nodes such that the entire tree has
polynomial depth D = poly(λ). Notice that the entire tree
does not exist at any time (cf. the tree shown in Figure 5),
i.e., the subtree consists of the leaves (cid:96)1, . . . , (cid:96)q, but the gray
nodes, and the dotted nodes in the tree are dummy nodes.
Now, recall that the adversary wins if it outputs a tuple
((cid:96)∗, i∗, aPath∗) (cid:54)∈ Q. We distinguish between the case where
1 ≤ i∗ ≤ q and where q + 1 ≤ i∗ ≤ 2D.
In the ﬁrst part of the proof, where 1 ≤ i∗ ≤ q, we show
how to ﬁnd a collision in either (1) the hash function or
(2) the chameleon hash function. In the second case where
we assume that q + 1 ≤ i∗ ≤ 2D, we further distinguish
...
...
...
...
...
...
(cid:96)1
(cid:124)
(cid:123)(cid:122)
q
(cid:96)∗
(cid:96)q
(cid:125)
Figure 5: This ﬁgure shows how we set up the tree
in the proof. The gray path corresponds to the case
where the adversary outputs a pair ((cid:96)∗, i∗, aPath∗)
such that i∗ > q.
between the cases where either (2.1) the adversary inverts
the chameleon hash function or (2.2) it ﬁnds a collision in
it.
The main observation in the second part is that the path
from the leaf (cid:96)∗ to the root ρ must contain a right-handed
node on the authentication path of the node (cid:96)q. In partic-
ular, this node must be one of the dummy nodes. Since we
only create a polynomial number of dummy nodes, we can
guess which of these nodes is contained in the path. If the
reduction guesses this index correctly, then it can embed
the challenge of the one-wayness game. Notice, that the ad-
versary might compute a diﬀerent pre-image. In this case,
959however, we break the collision-resistance of the chameleon
hash function. Notice that embedding this challenge is only
possible, because of the careful construction of the tree as
discussed in Section 5.2. In particular, this technique would
not work if we would use the trapdoor of the chameleon
hash function in a diﬀerent way. Observe, that the tree still
authenticates an exponential number of leaves (even if A is
only capable of adding polynomial number of leaves to the
tree).
Theorem 1. If H is a collision-resistant hash function
and CH a one-way collision-resistant chameleon hash func-
tion, then Construction 1 is a chameleon authentication tree
with depth D = poly(λ) that is structure-preserving and one-
way.
The proof is giving in the full version [SS12].
7. CONSTRUCTION OF A VERIFIABLE
DATA STREAMING PROTOCOL
Our VDS is not a completely black-box construction from
a CAT, because updating leaves is not supported by a CAT
in general. Instead, we use the algorithms of a CAT when-
ever it is possible and exploit the concrete structure of our
scheme when we describe the update mechanism and also in
the proof.
The main idea of our construction is to split the data in
the CAT between the server S and the client C. That is,
the client basically stores the trapdoor and the authentica-
tion path of the current value. As discussed in Section 5.3,
this information is suﬃcient to authenticate the next leaf.
The server, however, stores the entire tree (as it has been
speciﬁed so far) and the randomness of all chameleon hashes
learned so far. As an example, consider the tree in Figure 1.
The client stores the blue authentication path including the
values (x3,1, r3,1) and (x1,3, r1,3) of the two “unused” inner
nodes and the trapdoor csk, while the sever stores the entire
tree.
To retrieve any element from the database, the client sends
the index i to the server who returns the element s[i] to-
gether with the corresponding authentication path πs[i] =
aPaths[i]. Verifying works straightforwardly by checking the
authentication path.
Updating an element s[i] to s(cid:48)[i] in DB work as follows:
First, C runs the query algorithm to obtain the element s[i]
and the corresponding authentication path πs[i] = aPaths[i].
If the veriﬁcation algorithm Verify(PK, i, s, πs[i]) evaluates to
1, then C updates the leaf (cid:96)i = s[i] to s[i](cid:48). Subsequently, it
updates the authentication path aPath(cid:96)[i] to aPaths(cid:48)[i] anal-
ogously to the algorithm wcatVrfy as deﬁned in Construc-
tion 1. Denote by ρ(cid:48) the resulting value. The client C sets
ρ ← ρ(cid:48) in its public key PK and sends the new authentica-
tion path aPaths(cid:48)[i] to S. The server updates the entry in
DB, all leaves, and the root, which results in a new public
key PK(cid:48).
Construction 2. Let CAT = (catGen, addLeaf, catVrfy) be
the chameleon authentication tree as deﬁned in Construc-
tion 1. We deﬁne the veriﬁable data streaming protocol
VDS = (Setup, Append, Query, Verify, Update) as follows:
Setup(1λ): The setup algorithm picks some D = poly(λ)
and generates the CAT (sp, vp) ← catGen(1λ, D) as
deﬁned in Construction 1. In particular, the private
key is SK = sp = (csk, csk1, st) and the public key is
PK = vp = (cpk, cpk1, ρ), where ρ is the root of the
initially empty tree. The client C gets the private key
SK and the server the public key PK. The server also
sets up an initially empty database DB.
Append(SK, s): To append an element s to DB, the client
C runs the algorithm addLeaf(sp, s) locally which re-
turns a key sp(cid:48), an index i, and an authentication path
aPathi. It sends i, s and aPathi to the sever S. The
server appends s to DB, it adds the unknown nodes
from aPathi = ((v1,(cid:98)i/2(cid:99), . . . , vD−2,(cid:98)i/2D−2(cid:99)), R) to its
tree, and stores the new randomness from R.
Query(PK, DB, i): The client sends the index i to the server
who responses with s[i] and the corresponding authen-
tication path πs[i] = aPathi, or with ⊥ if the ith entry
in DB is empty.
Verify(PK, i, s, πs[i]): The veriﬁcation algorithm parses PK
as vp and πs[i] as aPaths[i], it returns s if the algorithm
catVrfy(vp, i, s, πi) outputs 1. Otherwise, it outputs ⊥.