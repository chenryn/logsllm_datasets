spreadsheets, word processors, databases, and even Microsoft
Developer Studio. 
Add to this mix developers writing applications with Java,
Delphi and scripting languages. Developers using all these tools
need to access your COM components. 
To accomplish this cross-platform integration we're going to
have to deal with IDispatch and the topic formerly known as
"OLE Automation". Microsoft now prefers to call it ActiveX and
COM, but OLE is lurking just under the surface. OLE itself is a
big topic, and there is a plethora of books on the subject. To
keep things manageable, we'll concentrate on the basic COM
methods required to communicate with automation clients. 
Because you're reading this book, I can assume that you
already know a lot about C++ programming. C++ is the native
language of Windows, and offers an efficient and powerful way
to access the Windows API. Regardless of its other merits, C++ is
126    Chapter 9 •
Dual Interfaces 
an excellent tool for developing powerful server applications. To
access these servers, COM is the communication method of
choice. 
Visual Basic, Java, and scripting languages all share one
design limitation. They don't offer native support of pointers.
This limitation presents a fundamental incompatibility; COM is
built around the concept of a VTABLE, which is really an array of
function pointers. A client also needs to know the exact VTABLE
layout of the server to call its methods. In C++ we use a header
file, but it's only useful to other C++ programs. Obviously, we're
going to have to do things a little differently to make COM
objects available to a language like Visual Basic. 
There are two ways to use COM through a non-pointer lan-
guage. The traditional method involves accessing COM through
a special well-known interface called IDispatch. If the language
itself knows how to use this interface, it automatically converts
its syntax into calls to IDispatch. The more recent (and efficient)
alternative is through a facility called type libraries. Type libraries
provide detailed information on the COM interface, allowing the
language to handle the details of calling the interface. 
Both of these techniques have advantages and disadvan-
tages. In this chapter I will describe IDispatch and an alternative
called dual interfaces. I'm going to present the client code in this
chapter in Visual Basic. These examples were developed using
Visual Basic version 6.0. 
IDL Definitions
In MIDL, IDispatch interfaces are referred to with the [dual] and
[oleautomation] attributes. These interfaces must inherit from the
standard interface IDispatch. 
[
object,
uuid(F7ADBF5B-8BCA-11D1-8155-000000000000),
dual
]
interface IVbTest : IDispatch
The IDispatch Interface
127
Additonal Information and Updates: http://www.iftech.com/dcom
This is a dual interface, which implements IDispatch through
interface inheritance. 
The IDispatch Interface
IDispatch is a special interface that is used to locate and call
COM methods without knowing their definition. The way COM
accomplishes this feat is quite complex, but extremely flexible.
There are two ways to use IDispatch from a VB program: late
binding and early binding. First let's look at late binding.
IDispatch has four methods. Because the interface inherits
from IUnknown (as all COM interfaces must), it also gets the
required QueryInterface, AddRef, and Release. Remember that
COM interfaces are immutable. This means all IDispatch inter-
faces MUST define these methods.
Binding refers to how a compiler or interpreter resolves references to COM objects.
Late Binding •  The client (Visual Basic) interpreter waits until the COM method is called before it
checks the method. First, the object is queried for the ID of the method. Once this is determined, it calls
the method through Invoke(). This behavior is automatic in Visual Basic and most interpreted (and
macro) languages. If you want to do this in C++, it will take some programming. Late binding is very
slow, but very flexible. 
Early Binding •  The interpreter or compiler checks the method before the program runs. All the Dis-
patch ID's are determined beforehand. The method is called through Invoke(). Early binding is much
faster than late binding. It is also catches errors sooner. 
Very Early Binding •  This is also known as Virtual Function Table, or VTABLE, binding. The client calls
the COM methods directly without using Invoke(). A type library or header file is required. This is how
almost all C++ programs access COM objects. This is the fastest type of binding. 
ID Binding •  This can be thought as "manual" early binding. The programmer hard-codes, or caches,
all the DISPID's and calls Invoke() directly.
WHAT IS BINDING?................
128    Chapter 9 •
Dual Interfaces 
COM-compatible languages have built-in support for the
IDispatch interface. Here's an example from VB: 
Dim Testobj As Object 
Set Testobj = CreateObject("VbTest.VbTest.1")
Testobj.Beep (1000)
Set testobj = Nothing
This example isn't really very different from the way we do
it in C++ using the #import directive. What is going on behind
the scenes is quite a bit different. 
The first statement creates a generic object. A VB "Object" is
generic and can contain any Visual Basic type, including a COM
object. This is accomplished by using the VARIANT type, which
we'll discuss later in this chapter. We use the CreateObject func-
tion to look up the object in the registry and attach to the server.
The string passed into CreateObject is the ProgID of the server.
In this case, “VbTest.VbTest.1” is a name we chose to give our
test server (more details on naming below). If the server wasn't
properly registered or we typed in the wrong name, the Cre-
ateObject call will fail with a run-time error. 
IDispatch 
method
Description
GetTypeInfoCount
Returns the availability of type information. Returns 0 if 
none, 1 if type information is available.
GetTypeInfo
Retrieves type information about the interface, if avail-
able.
GetIDsOfNames
Takes a method or property name, and returns a 
DISPID.
Invoke
Calls methods on the interface using the DISPID as an 
identifier.
Table 9.1
Methods of Dispatch
The IDispatch Interface
129
Additonal Information and Updates: http://www.iftech.com/dcom
The call to the Beep method is straightforward to write, but
the Basic interpreter has to do a lot of processing to make it hap-
pen. Here's a summary of the steps: 
1. Get the DISPID of the COM method named Beep
2. Build a parameter list. 
3. Call Invoke, passing the DISPID and parameter list. 
VB calls the GetIDsOfNames function, passing in the name
of the function. In this case, the function name is the string
"Beep". GetIDsOfNames will look up the name and return the
dispatch ID. Where does this ID come from? Let's look at the IDL
definition of the method:
[id(7), helpstring("method Beep")] 
HRESULT Beep([in] long lDuration); 
GetIDsOfNames will look up the string "Beep" internally
and return a DISPID of "7". How does it find the DISPID? That
depends on how the IDispatch interface is created. In our exam-
ples we are using an interface created with ATL. ATL uses the
class IDispatchImpl, which looks it up in the type library. When
the MIDL compiler created the type library it included a map of
all the function names and their DISPID's. 
In the OLE world there is a whole set of pre-defined
DISPID's. These ID's have been mapped to standard properties
of objects, such as fill color, text, and font. These pre-defined
DISPID's all have negative numbers, and are defined in OLE-
CTL.H. 
Once VB has the DISPID, it needs to build a list of parame-
ters to send to Beep. In this case, there is only one parameter: an
[in]long parameter. The problem here is that VB doesn't know
how many parameters Beep takes, or what type they are. Build-
ing parameter lists is actually a pretty complex operation. (If we
use a type library, VB can get this information directly. See the
section on early binding). 
A parameter list is contained in a Dispatch Parameter, or
DISPPARAMS structure. This structure is defined in OAIDL.IDL as
follows: 
130    Chapter 9 •
Dual Interfaces 
typedef struct tagDISPPARAMS {
    [size_is(cArgs)] VARIANTARG * rgvarg;
    [size_is(cNamedArgs)] DISPID * rgdispidNamedArgs;
    UINT cArgs;
    UINT cNamedArgs;
} DISPPARAMS;
If you would rather see the C++ header, it's in OAIDL.H and
looks like this: 
typedef struct  tagDISPPARAMS
    {
    VARIANTARG  *rgvarg;
    DISPID  *rgdispidNamedArgs;
    UINT cArgs;
    UINT cNamedArgs;
    }DISPPARAMS;
The parameter list is packed up in a DISPPARAMS structure,
each argument added to the VARIANTARG structure. As each
argument is added to the structure, the counter (cArgs) is incre-
mented. The member "*rgvarg" is essentially an array of VARIAN-
TARG structures. 
OLE allows the use of what are called "Named" arguments.
These arguments are identified by a nametag, and may be
passed in any order. The handling of named arguments is taken
care of by the implementation of Invoke. We're not going to be
using named arguments here, but be aware of the possibility. 
A VARIANTARG is a VARIANT, which is a gigantic union of
different data types. Here is an edited version of the definition
from OAIDL.IDL. If you look in OAIDL.H, you'll see that it is cre-
ated by running OAIDL.IDL through the MIDL compiler. 
//VARIANT STRUCTURE
typedef VARIANT VARIANTARG;
struct tagVARIANT {
  union {
    struct __tagVARIANT {
      VARTYPE vt;
The IDispatch Interface
131
Additonal Information and Updates: http://www.iftech.com/dcom
    WORD    wReserved1;
  WORD    wReserved2;
  WORD    wReserved3;
  union {
      LONG          lVal;       /*VT_I4*/
      BYTE          bVal;       /*VT_UI1*/
      SHORT         iVal;       /*VT_I2*/
      FLOAT         fltVal;     /*VT_R4*/
      DOUBLE        dblVal;     /*VT_R8*/
      VARIANT_BOOL  boolVal;    /*VT_BOOL*/
     _VARIANT_BOOL bool;       /*(obsolete)*/
      SCODE         scode;      /*VT_ERROR */
      CY            cyVal;      /*VT_CY*/
      DATE          date;       /*VT_DATE*/
      BSTR          bstrVal;    /*VT_BSTR*/
      IUnknown *    punkVal;    /*VT_UNKNOWN*/
      IDispatch *   pdispVal;   /*VT_DISPATCH*/
      SAFEARRAY *   parray;     /*VT_ARRAY*/
      BYTE *        pbVal;      /*VT_BYREF|VT_UI1*/
      SHORT *       piVal;      /*VT_BYREF|VT_I2*/
      LONG *        plVal;      /*VT_BYREF|VT_I4*/
      FLOAT *       pfltVal;    /*VT_BYREF|VT_R4*/
      DOUBLE *      pdblVal;    /*VT_BYREF|VT_R8*/
      VARIANT_BOOL *pboolVal;   /*VT_BYREF|VT_BOOL*/
      _VARIANT_BOOL *pbool;     /*(obsolete)*/
      SCODE *       pscode;     /*VT_BYREF|VT_ERROR*/
      CY *          pcyVal;     /*VT_BYREF|VT_CY*/
      DATE *        pdate;      /*VT_BYREF|VT_DATE*/
      BSTR *        pbstrVal;   /*VT_BYREF|VT_BSTR*/
      IUnknown **   ppunkVal;   /*VT_BYREF|VT_UNKNOWN*/
      IDispatch **  ppdispVal;  /
*VT_BYREF|VT_DISPATCH*/
      SAFEARRAY **  pparray;    /*VT_BYREF|VT_ARRAY*/
      VARIANT *     pvarVal;    /*VT_BYREF|VT_VARIANT*/
      PVOID         byref;      /*Generic ByRef*/
      CHAR          cVal;       /*VT_I1*/
      USHORT        uiVal;      /*VT_UI2*/
      ULONG         ulVal;      /*VT_UI4*/
      INT           intVal;     /*VT_INT*/
      UINT          uintVal;    /*VT_UINT*/
      DECIMAL *     pdecVal;    /*VT_BYREF|VT_DECIMAL*/
132    Chapter 9 •
Dual Interfaces 
      CHAR *        pcVal;      /*VT_BYREF|VT_I1*/
      USHORT *      puiVal;     /*VT_BYREF|VT_UI2*/
      ULONG *       pulVal;     /*VT_BYREF|VT_UI4*/
      INT *         pintVal;    /*VT_BYREF|VT_INT*/
      UINT *        puintVal;   /*VT_BYREF|VT_UINT */
      } __VARIANT_NAME_3;
    } __VARIANT_NAME_2;
    DECIMAL decVal;
} __VARIANT_NAME_1;
};
The actual variable stored will will correspond with its data
type. The actual type of the variable is stored in the VT member.
Each of the VT types is #defined to a number, for example VT_I4
has a value of 3. Because it's a union, the size of a VARIANT is at
least the size of its largest member. The types allowed in a VARI-
ANT are the only types you can pass to and from an IDispatch
interface. 
Here's how you would put a long value into a VARIANT.
You should be able to generalize this code to any of the types
defined in the structure. 
VARIANT v;
VariantInit(&v);
v.vt = VT_I4;
vt.lVal = 100;
Variants are somewhat ungainly structures to work with in
C++. Variants have their origin in Visual Basic with its notion of
changeable data types and automatic type conversion. Tradition-
ally Basic hasn't been a typed language, and Variants were used
to store all variables. One of the strengths of C++ is strong type
checking, so Variants are antithetical to good C++ programming
practice. 
All parameters passed to Invoke will be packaged in this
VARIANTARG structure. The next step in calling a method
through IDispatch is the Invoke function.
Using Invoke
133
Additonal Information and Updates: http://www.iftech.com/dcom
Using Invoke
An IDispatch interface calls its functions through the Invoke()
method. Generally, the client programmer doesn't call any of the
IDispatch methods directly. Visual Basic hides all its methods,
including Invoke. If you need to call IDispatch methods from a
C++ client, you're a lot better off going directly through a
VTABLE. If you don't have a dual interface, building the parame-
ter lists and calling Invoke is going to be a laborious task. We'll
look at the Invoke method, even though I hope you won't have
to use it directly. 
Here is the definition of Invoke from OAIDL.IDL. 
    HRESULT Invoke(
                [in] DISPID dispIdMember,
                [in] REFIID riid,
                [in] LCID lcid,
                [in] WORD wFlags,
                [in, out] DISPPARAMS * pDispParams,
                [out] VARIANT * pVarResult,
                [out] EXCEPINFO * pExcepInfo,
                [out] UINT * puArgErr
            );
The DISPID of the requested function is given in the first
parameter. This tells Invoke which method to call. The requested
method's parameter list is passed in the "pDispParams" argu-
ment. 
What happens if you call a method with an invalid parame-
ter? The Basic interpreter won't catch your error, because it
doesn't know enough to do so. The error is caught at run-time
by the COM server itself. One of the functions of Invoke() is to
check parameter lists. Invoke will try to convert the incorrect
parameter if possible, and if not, it will return an error status. For
example, if you called the Beep() method in Visual Basic with a
string like this: 
Testobj.Beep ("1000") ' ok 
Testobj.Beep ("Hello" ) ' run-time error 
134    Chapter 9 •
Dual Interfaces 
Invoke() would convert the string "1000" into a number, and
everything would work fine. When, however, you use a non-
numeric string like "Hello", Invoke() doesn't know how to make
the conversion. The function will fail with a VB run-time error
13, for "type mismatch". This ability to convert numbers can be
dangerous. If you accidentally reverse the order of parameters,
Invoke may be able to convert them anyway - giving unexpected
results. 
The status of a function is returned in three ways: 1)
through the HRESULT, 2) the pExcepInfo structure, and 3) in the
pVarResult argument. Like all COM methods, severe failure will
be returned as an HRESULT. Visual Basic doesn't use the return
codes - the closest equivalent is the Err object. Invoke returns its
error information in an EXECPINFO structure. 
typedef struct tagEXCEPINFO {
WORD  wCode;           /*An error code*/
WORD  wReserved;
BSTR  bstrSource;      /*A source of the exception */
BSTR  bstrDescription; /*A description of the error */
BSTR  bstrHelpFile;     
    /*Fully qualified drive, path, and file name*/
DWORD dwHelpContext;    
    /*help context of topic within the help file */
ULONG pvReserved;
ULONG pfnDeferredFillIn;
SCODE scode;
} EXCEPINFO;
This structure looks amazingly like the Visual Basic "Err"
object. Table 9.2 shows the properties of that object.
The third type of returned data is in the pVarResult parame-
ter of Invoke(). This data contains a user defined return value.
What gets placed in here is determined by the [retval] attribute in
the IDL code of the interface. Any parameter marked with [retval]
is stuffed into a VARIANT and returned here. We'll see more of
this when we look at property "get" functions.
Using Invoke
135
Additonal Information and Updates: http://www.iftech.com/dcom
 If you need to work directly with Variants in C++ you
should use the ATL CComVariant or “__variant_t” classes. There
are also API-level functions, all starting with "Variant". Variants
are very good at converting between data types. You can even
make use of variants as a quick-and-dirty method of converting
data types. 
A 'pure' IDispatch interface is only required to implement
IUnknown, GetTypeInfoCount, GetTypeInfo, GetIDsOfNames,
and Invoke. Note that the methods called by Invoke don't have
to be COM methods. They can be implemented any way the pro-
grammer wants because they aren't called by COM directly.
Using these four methods, you can write a sever to do almost
anything. 
As you can see, there is a lot of processing required to call a
method through IDispatch. It all happens behind the scenes in
VB so you are not aware of it, but it does take time. All that pro-
Err 
Property
Description
Number 
An error code for the error. This is the default property for 
the object.
Source 
Name of the current Visual Basic project.
Description 
A string corresponding to the return of the Error function for 
the specified Number, if this string exists. If the string doesn't 
exist, Description contains "Application defined or object 
defined error."
HelpFile 
The fully qualified drive, path, and file name of the Visual 
Basic Help file. 
HelpContext 
The Visual Basic Help file context ID for the error corre-
sponding to the Number property.
LastDLLError 
On 32-bit Microsoft Windows operating systems only, con-
tains the system error code for the last call to a dynamic link 
library (DLL). The LastDLLError property is read only.
Table 9.2
Error Properties in VB
136    Chapter 9 •
Dual Interfaces 
cessing time means one thing: slow. There has to be a better
way, and there is - type libraries and Early binding.
Using Type Libraries for Early Binding
Most clients don't need to use a pure IDispatch interface. In VB
for example, you have extensive access to type information
through type libraries. The type library defines a number of very
important items:
• Interfaces exposed by a server
• Methods of an interface
• Dispatch ID's of methods
• Parameter list for methods 
• GUIDs
• Data structures
• Marshaling information 
The type library provides a complete description of the
server's methods and capabilities. Using this information, the VB
interpreter can provide more efficient access to the server. 
Here's how we would write our VB interface using the type
library. First, you have to turn on object browsing for the VbTest