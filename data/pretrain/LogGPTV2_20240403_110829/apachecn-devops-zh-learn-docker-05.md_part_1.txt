# 五、数据卷和系统管理
在最后一章中，我们学习了如何构建和共享我们自己的容器映像。特别关注的是如何通过只包含容器化应用真正需要的工件来构建尽可能小的映像。
在本章中，我们将学习如何使用有状态容器，即消费和产生数据的容器。我们还将学习如何保持我们的 Docker 环境干净，没有未使用的资源。最后但同样重要的是，我们将研究 Docker 引擎正在产生的事件流。
以下是我们将要讨论的主题列表:
*   创建和装载数据卷
*   在容器之间共享数据
*   使用主机卷
*   定义映像中的体积
*   获取详尽的 Docker 系统信息
*   列出资源消耗
*   清理未使用的资源
*   消耗 Docker 系统事件
完成本章后，您将能够:
*   创建、删除和列出数据卷
*   将现有数据卷装入容器
*   使用数据卷从容器中创建持久数据
*   使用数据卷在多个容器之间共享数据
*   使用数据卷将任何主机文件夹装入容器
*   当访问数据卷中的数据时，定义容器的访问模式(读/写或只读)
*   列出给定主机上 Docker 资源消耗的空间量，如映像、容器和卷
*   从未使用的 Docker 资源(如容器、映像和卷)中释放您的系统
*   在控制台中实时显示 Docker 系统事件
# 技术要求
对于本章，您需要在机器上安装 Docker 工具箱，或者访问在笔记本电脑或云中运行 Docker 的 Linux 虚拟机。本章没有附带代码。
# 创建和装载数据卷
所有有意义的应用都会消耗或产生数据。然而容器最好是无状态的。我们要怎么处理这件事？一种方法是使用 Docker 卷。卷允许容器消费、生产和修改状态。卷的生命周期超出了容器的生命周期。当使用卷的容器死亡时，该卷继续存在。这对于状态的持久性是很大的。
# 修改容器层
在深入讨论卷之前，让我们先讨论一下如果容器中的应用更改了容器文件系统中的某些内容，会发生什么情况。在这种情况下，更改都发生在可写容器层。让我们通过运行一个容器并在其中执行一个创建新文件的脚本来快速演示这一点:
```
$ docker container run --name demo \
 alpine /bin/sh -c 'echo "This is a test" > sample.txt'
```
前面的命令创建了一个名为`demo`的容器，在这个容器中创建了一个名为`sample.txt`的文件，内容为`This is a test`。容器在此之后退出，但仍保留在内存中，可供我们进行调查。让我们使用`diff`命令找出容器文件系统中与映像文件系统相关的变化:
```
$ docker container diff demo
```
输出应该如下所示:
```
A /sample.txt
```
显然，一个新文件`A`已经如预期的那样被添加到容器的文件系统中。由于源自底层映像(在本例中为`alpine`)的所有层都是不可变的，因此更改只能发生在可写容器层。
如果我们现在从内存中移除容器，它的容器层也将被移除，并且所有的更改都将被不可逆地删除。如果我们需要我们的更改甚至在容器的生命周期之后持续存在，这不是一个解决方案。幸运的是，我们在 Docker 卷的形式上有更好的选择。让我们去了解他们。
# 创建卷
因为此时，当使用 Docker for Mac 或 Windows 时，容器不是在 OS X 或 Windows 上本地运行，而是在 Docker for Mac 和 Windows 创建的(隐藏)虚拟机中运行，所以我们最好使用`docker-machine`来创建和使用运行 Docker 的显式虚拟机。此时，我们假设您的系统上安装了 Docker 工具箱。如果没有，那么请返回[第 2 章](02.html)、*设置工作环境、*我们提供如何安装工具箱的详细说明。
使用`docker-machine`列出当前在 VirtualBox 中运行的所有虚拟机:
```
$ docker-machine ls 
```
如果您没有列出名为`node-1`的虚拟机，请创建一个:
```
$ docker-machine create --driver virtualbox node-1 
```
如果您有一个名为`node-1`的虚拟机，但它没有运行，请启动它:
```
$ docker-machine start node-1
```
现在一切准备就绪，SSH 进入这个名为`node-1`的虚拟机:
```
$ docker-machine ssh node-1
```
你应该得到一个 boot2docker 欢迎图片。
要创建新的数据卷，我们可以使用`docker volume create`命令。这将创建一个命名卷，然后可以将其装入容器中，用于持久数据访问或存储。以下命令使用默认的卷驱动程序创建卷`my-data`:
```
$ docker volume create my-data 
```
默认的卷驱动程序是所谓的本地驱动程序，它将数据本地存储在主机文件系统中。找出数据在主机上存储位置的最简单方法是在我们刚刚创建的卷上使用`inspect`命令。实际位置可能因系统而异，因此，这是查找目标文件夹的最安全方法:
```
 $ docker volume inspect my-data 
[ 
    { 
        "CreatedAt": "2018-01-28T21:55:41Z", 
        "Driver": "local", 
        "Labels": {}, 
        "Mountpoint": "/mnt/sda1/var/lib/docker/volumes/my-data/_data", 
        "Name": "my-data", 
        "Options": {}, 
        "Scope": "local" 
    } 
] 
```
主机文件夹可以在`Mountpoint`下的输出中找到。在我们的例子中，当在运行于 VirtualBox 的基于 LinuxKit 的虚拟机上使用`docker-machine`时，文件夹是`/mnt/sda1/var/lib/docker/volumes/my-data/_data`。
目标文件夹通常是一个受保护的文件夹，因此我们可能需要使用`sudo`来导航到该文件夹并执行其中的任何操作。在我们的情况下，我们不需要使用`sudo`:
```
$ cd /mnt/sda1/var/lib/docker/volumes/my-data/_data
```
If you are using Docker for Mac to create a volume on your laptop and then do a `docker volume inspect` on the volume you just created, the `Mountpoint` is shown as `/var/lib/docker/volumes/my-data/_data`. But you will discover that there is no such folder on the Mac. The reason is that the path is in relation to the hidden VM that Docker for Mac uses to run containers. At this time, containers cannot run natively on OS X. The same applies to volumes created with Docker for Windows.
第三方以插件的形式提供其他卷驱动程序。我们可以使用`create`命令中的`--driver`参数来选择不同的音量驱动器。其他卷驱动程序使用不同类型的存储系统来备份卷，例如云存储、NFS 驱动器、软件定义的存储等。
# 安装卷
一旦我们创建了一个命名卷，我们就可以将其装入容器中。为此，我们可以使用`docker container run`命令中的`-v`参数:
```
$ docker container run --name test -it \
 -v my-data:/data alpine /bin/sh
```
前面的命令将`my-data`卷装入容器内的`/data`文件夹。在容器中，我们现在可以在`/data`文件夹中创建文件，然后退出:
```
# / cd /data 
# / echo "Some data" > data.txt 
# / echo "Some more data" > data2.txt 
# / exit 
```
如果我们导航到包含卷数据的主机文件夹并列出其内容，我们应该会看到我们刚刚在容器中创建的两个文件:
```
$ cd /mnt/sda1/var/lib/docker/volumes/my-data/_data 
$ ls -l 
total 8 
-rw-r--r-- 1 root root 10 Jan 28 22:23 data.txt
-rw-r--r-- 1 root root 15 Jan 28 22:23 data2.txt
```
我们甚至可以尝试输出第二个文件的内容:
```
$ cat data2.txt
```
让我们尝试从主机在此文件夹中创建一个文件，然后将该卷与另一个容器一起使用:
```
$ echo "This file we create on the host" > host-data.txt 
```
现在，让我们删除`test`容器，运行另一个基于 CentOS 的容器。这一次，我们甚至将卷装载到不同的容器文件夹`/app/data`:
```
$ docker container rm test
$ docker container run --name test2 -it \
 -v my-data:/app/data \
 Centos:7 /bin/bash 
```
进入 CentOS 容器后，我们可以导航到我们将卷装载到的文件夹`/app/data`，并列出其内容:
```
# / cd /app/data 
# / ls -l 
```
不出所料，我们应该会看到这三个文件:
```
-rw-r--r-- 1 root root 10 Jan 28 22:23 data.txt
-rw-r--r-- 1 root root 15 Jan 28 22:23 data2.txt
-rw-r--r-- 1 root root 32 Jan 28 22:31 host-data.txt
```
这是 Docker 卷中的数据在容器的生命周期内持续存在的确凿证据，也是卷可以被其他容器重用的确凿证据，甚至是与最初使用它的容器不同的容器。
重要的是要注意，我们装载 Docker 卷的容器内的文件夹被排除在联合文件系统之外。也就是说，该文件夹及其任何子文件夹中的每个更改都不会成为容器层的一部分，而是保留在卷驱动程序提供的后备存储中。这个事实非常重要，因为当相应的容器停止并从系统中移除时，容器层就会被删除。
# 删除卷
可以使用`docker volume rm`命令删除卷。请务必记住，删除卷会不可逆地破坏包含的数据，因此被视为危险的命令。Docker 在这方面帮了我们一点忙，因为它不允许我们删除容器仍在使用的卷。在移除或删除卷之前，请务必确保您有其数据的备份，或者您确实不再需要这些数据。
以下命令删除我们之前创建的`my-data`卷:
```
$ docker volume rm my-data 
```
执行上述命令后，请仔细检查主机上的文件夹是否已被删除。
要删除所有正在运行的容器以清理系统，请运行以下命令:
```
$ docker container rm -f $(docker container ls -aq)  
```
# 在容器之间共享数据
容器就像运行在其中的应用的沙箱。为了保护运行在不同容器中的应用，这是非常有益的，也是非常必要的。这也意味着在容器中运行的应用可见的整个文件系统对于该应用是私有的，并且在不同容器中运行的其他应用都不能干扰它。
尽管有时，我们希望在容器之间共享数据。假设一个运行在容器 A 中的应用产生一些数据，这些数据将被另一个运行在容器 b 中的应用消耗掉*我们如何实现这一点？*我相信你已经猜到了——我们可以为此使用 Docker 卷。我们可以创建一个卷，并将其装入容器 A 和容器 B。这样，应用 A 和 B 都可以访问相同的数据。
现在，像往常一样，当多个应用或进程同时访问数据时，我们必须非常小心，以避免不一致。为了避免并发性问题，例如竞争条件，我们理想情况下只有一个应用或进程在创建或修改数据，而同时访问这些数据的所有其他进程只读取数据。通过将卷装载为只读，我们可以强制在容器中运行的进程只能读取卷中的数据。请看下面的命令:
```
$ docker container run -it --name writer \
 -v shared-data:/data \
 alpine /bin/sh
```
这里我们创建一个名为`writer`的容器，它有一个以默认读/写模式装载的卷`shared-data`。尝试在此容器内创建一个文件:
```
# / echo "I can create a file" > /data/sample.txt 