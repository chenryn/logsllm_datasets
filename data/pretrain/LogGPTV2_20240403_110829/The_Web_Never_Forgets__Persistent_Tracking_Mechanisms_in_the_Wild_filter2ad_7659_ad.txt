xlovecam.com.
5. COOKIE SYNCING
Cookie synchronization — the practice of third-party do-
mains sharing pseudonymous user IDs typically stored in
cookies — provides the potential for more eﬀective tracking,
especially when coupled with technologies such as evercook-
ies. First, pairs of domains who both know the same IDs
via synchronization can use these IDs to merge their track-
ing databases on the back end. Second, respawned cookies
may contain IDs that are widely shared due to prior sync
events, enabling trackers to link a user’s browsing histories
from before and after clearing browsing state.
In this section, we present our method for detecting syncs,
present an overview of the synchronization landscape and ex-
amine the threats of back-end database merges and history-
linking for users who clear state.
5.1 Detecting cookie synchronization
Using the techniques outlined in Section 4.1, we identiﬁed
cookies containing values likely to be user IDs. In order to
learn which domains know a given ID through synchroniza-
tion, we examined cookie value strings and HTTP traﬃc.
If a domain owns a cookie containing an ID, clearly the
domain knows that ID. In fact, a telltale sign of cookie sync-
ing is multiple domains owning cookies containing the same
ID. Likewise, if an ID appears anywhere in a domain’s URL
string (e.g. in the URL parameters), then that domain also
knows the ID. Note that a given tracker may simply ignore
an ID received during a sync, but as we will demonstrate in
Section 5.3, trackers opting to store IDs have the ability to
gain user data through history merging.
The domains involved in HTTP traﬃc can be divided into
(referrer, requested URL, location) tuples in which the loca-
tion domain is non-empty only for HTTP response redirects.
The rules for ID passing are as follows:
• If an ID appears in a requested URL, the requested
domain learns the ID.
• If an ID appears in the referrer URL, the requested
domain and location domain (if it exists) learn the ID.
• If an ID appears in the location URL, the requested
domain learns the ID.
We cannot assume that the referrer learns a synced ID
appearing in the requested URL or location URL string [38].
In particular, third-party JavaScript executing a sync on a
ﬁrst-party site will cause the ﬁrst-party to show up as the
referrer, even though it may not even be aware of the ID
sync. Although we can determine the directionality of ID
syncs in the cases of redirects, the fraction of ﬂows in which
we could determine both the sender and receiver was small.
Hence, when examining cookie synchronization, we focused
on which domains knew a given ID, rather than attempting
to reconstruct the paths of ID ﬂows.
5.2 Basic results
Before examining the privacy threats that can stem from
cookie synchronization, we ﬁrst provide an overview of
cookie syncing activities that occur when browsing under
diﬀerent privacy settings. We ran multiple crawls of the
top 3,000 Alexa domains on Amazon EC211 instances using
three diﬀerent Firefox privacy settings: allowing all cookies
(i.e. no privacy-protective measures), allowing all cookies
but enabling Do Not Track, and blocking third-party cook-
ies. With all cookies allowed, the impact of Do Not Track on
the aggregate statistics we measure was negligible. In par-
ticular, enabling Do Not Track only reduced the number of
domains involved in synchronization by 2.9% and the num-
ber of IDs being synced by 2.6%. This ﬁnding is consistent
with studies such as Balebako et al. [9] — they ﬁnd that, due
to lack of industry enforcement, Do Not Track provides lit-
tle practical protection against trackers. We therefore omit
further measurement and analysis of the eﬀect of Do Not
Track in this section.
Table 4 shows high-level statistics for illustrative crawls
under the two third-party cookie settings. We say that an
ID is involved in synchronization if it is known by at least
two domains. Cookies and domains are involved in synchro-
nization if they contain or know such an ID, respectively.
The statistics displayed aggregate both third-party and
ﬁrst-party data, as many domains (e.g. doubleclick.com,
facebook.com) exist in both the Alexa Top 3000 and as
third-parties on other sites.
11http://aws.amazon.com/ec2/
Statistic
Third party cookie policy
# IDs
# ID cookies
# IDs in sync
# ID cookies in sync
# (First*) Parties in sync (407) 730
# IDs known per party
1/2.0/1/33
# Parties knowing an ID 2/3.4/2/43
Allow
1308
1482
435
596
Block
938
953
347
353
(321) 450
1/1.8/1/36
2/2.3/2/22
Table 4: Comparison of high-level cookie syncing statistics
when allowing and disallowing third-party cookies (top 3,000
Alexa domains). The format of the bottom two rows is
minimum/mean/median/maximum. *Here we deﬁne a ﬁrst-
party as a site which was visited in the ﬁrst-party context
at any point in the crawl.
Appendix B shows a summary of the top 10 parties in-
volved in cookie synchronization under both cookie policies.
Observe that although some parties are involved in less sync-
ing under the stricter cookie policy, many of the top parties
receive the same number of IDs. Overall, disabling third-
party cookies reduces the number of synced IDs and parties
involved in syncing by nearly a factor of two. While this
reduction appears promising from a privacy standpoint, in
the next section we will see that even with this much sparser
amount of data, database merges could enable domains to
reconstruct a large portion of a user’s browsing history.
Included in Appendix C is a summary of the top 10 most
shared IDs under both cookie policies. For a speciﬁc exam-
ple, consider the most shared ID which all third party cook-
ies are allowed, which was originally created by turn.com.
This ID is created and placed in a cookie on the ﬁrst page
visit that includes Turn as a third-party. On the next page
visit, Turn makes GET requests to 25 unique hostnames
with a referrer of the form http://cdn.turn.com/server/
ddc.htm?uid=... that contains its ID. These
25 parties gain knowledge of Turn’s ID, as well as their own
tracking cookies, in the process. Similar sharing occurs as
the user continues to browse, eventually leading to 43 total
domains. With third-party cookies disabled, the top shared
IDs come from a disjoint set of parties, largely composed
of syncs which share a ﬁrst party cookie with several third-
party sites.
5.3 Back-end database synchronization
We now turn to quantifying how much trackers can learn
about users’ browsing histories by merging databases on the
back-end based on synced IDs. Cookie syncing allows track-
ers to associate a given user both with their own pseudony-
mous ID and with IDs received through syncs, facilitating
later back-end merges. We cannot observe these merges di-
rectly, so we do not know if such merges occur with any
frequency. That said, there is a natural incentive in the
tracking ecosystem to aggregate data in order to learn a
much larger fraction of a user’s history.
First, assuming no collaboration among third-party track-
ers, only a handful of trackers are in position to track a
sizeable fraction of an individual’s browsing history. As per
Olejnik et al [38], if a visited ﬁrst party appears as the re-
ferrer in a request to another domain, we assume the second
domain knows about this visit. For a crawl of 3,000 sites
when allowing all cookies, only two of the 730 trackers could
682
5.4 Respawning and syncing
At a given point in time, cookie synchronization pro-
vides a mechanism for trackers to link a user’s history to-
gether. Represented as a graph, sites in an individual’s his-
tory can be represented as nodes with edges between sites
if a user tagged with some pseudonymous ID visited both
sites. When a user clears his cookies and restarts browsing,
the third parties will place and sync a new set of IDs and
eventually reconstruct a new history graph.
Since these history graphs correspond to browsing periods
with completely diﬀerent tracking IDs, they will be disjoint
— in other words, trackers can not associate the individual’s
history before and after clearing cookies. However, if one of
the trackers respawns a particular cookie, parts of the two
history graphs can be connected by an edge, thereby linking
an individual’s history over time. This inference becomes
stronger if this respawned ID is synced to a party present
on a large number of the sites that a user visits.
To test this possibility, we ran two 3,000 site crawls on two
EC2 instances, A and B. We cleared the cookies, Flash stor-
age, cache, and local storage from machine B and loaded the
Flash ﬁles from A to seed respawning from Flash. Finally,
we ran another 3,000 site crawl on site B.
We discovered a total of 26 domains that respawned IDs
between the two crawls on machine B either through Flash
or through other means12. Three of these IDs were later
observed in sync ﬂows. After conducting manual analysis,
we were unable to determine the exact mechanism through
which 18 of these IDs were respawned since we cleared all
the storage vectors previously discussed, nor did we detect
JavaScript-based browser ﬁngerprinting. We conjecture that
these IDs were respawned through some form of passive,
server-side ﬁngerprinting13.
One of these IDs provides a useful case study. After
respawning this ID, its owner, merchenta.com, passed it
to adnxs.com through an HTTP redirect sync call. Now,
merchenta.com by itself is not in a position to observe a
large fraction of a user’s history — it only appears on a sin-
gle ﬁrst party domain (casino.com). In fact, the largest ob-
served percentage of a user’s history observable by a cookie-
respawning domain acting alone was 1.4%. However, by
passing its ID to adnxs.com, merchenta.com enabled a much
larger proportion of a user’s history to be linked across state
clears.
In particular, we observed adnxs.com on approximately
11% of ﬁrst party sites across the two crawls. Thus adnxs.
com now has the ability to merge its records for a particular
user before and after an attempt to clear cookies, although of
course we have no insight into whether or not they actually
do so. This scenario enables at least 11% of a user’s history
to be tracked over time.
Our measurements in this section illustrate the potential
for cookie respawning and syncing event on a single site by a
12The exact method here is not important, as we are con-
cerned with the fact that an ID which has been respawned
is later involved in sync.
13Note that a document from one of these respawning do-
mains, merchenta.com mentions tracking by ﬁngerprint-
ing: “Merchenta’s unique ﬁngerprint tracking enables con-
sumers to be engaged playfully, over an extended period of
time, long after solely cookie-based tracking loses its eﬀec-
tiveness”, http://www.merchenta.com/wp-content/files/
Merchenta%20Case%20Study%20-%20Virgin.pdf.
683
Figure 5: Proportions of user history known when allow-
ing and blocking third party cookies under the two diﬀerent
merging schemes. Note that since the x-axis is sorted by the
proportion of a user’s history that a domain can recover,
the domains may appear in diﬀerent orders for the diﬀerent
models.
recover more than 40% of a user’s history and only 11 could
recover more than 10%. When disabling third-party cook-
ies, the corresponding numbers are two and six, respectively.
These results are consistent with earlier ﬁndings in Roesner
et al [41].
We consider the following model of back-end database
merges: a domain can merge its records with a single other
domain that mutually knows some ID. We assume that when
two domains merge their records for a particular user, they
will share their full records. Our model assumes some col-
laboration within the tracking ecosystem — among domains
already known to share IDs — but is much weaker than as-
suming full cooperation.
Figure 5 shows the proportion of a user’s 3,000-site brows-
ing history a domain can recover, in decreasing sorted order,
if a user enables all cookies. The ﬁgure when blocking third-
party cookies (also Figure 5) takes a identical shape but is
steeper because it only includes roughly 60% as many par-
ties.
Observe that after introducing the ability for a site to
merge records directly with one other tracker, the known
proportion of a user’s 3,000-site history dramatically in-
creased for a large number of sites. When third-party cook-
ies are allowed, 101 domains can reconstruct over 50% of a
user’s history and 161 could recover over 40%. Even when
these cookies are blocked, 44 domains could recover over
40% of a user’s history.
Not much is known about how prevalent back-end
database merges are. In terms of incentives, a pair of track-
ers may enter into a mutually beneﬁcial arrangement to in-
crease their respective coverage of users’ browsing histories,
or a large tracker may act as a data broker and sell user
histories for a fee.
No MergeWith Merge02004006000.00.40.80.00.40.80200400600No MergeWith MergeWith MergeRank of domain (decreasing order)Proportion of history knownWith third party cookiesWithout third party cookiesFigure 6: The Tor Browser’s notiﬁcation dialog for canvas
read attempts. The empty image is returned to thwart can-
vas ﬁngerprinting.
small tracker to enable a large proportion of a user’s history
to be tracked by more proliﬁc third parties.
6. DISCUSSION
After presenting an evaluation of advanced tracking tech-
niques, we now discuss the potential defenses against these
methods and the implications of our study for privacy-
conscious users.
6.1 Mitigation
A blunt way to defend against tracking is to simply block
third-party content. This is the approach taken by tools
such as AdBlock Plus14 and Ghostery.15 The user may also
disable evercookie storage vectors such as Flash cookies [3],
but to the best of our knowledge, tracking vectors such as lo-
calStorage, IndexedDB and canvas cannot be disabled, often
due to the fact that doing so would break core functionality.
Canvas ﬁngerprinting: The initial canvas ﬁngerprinting
study discusses possible countermeasures such as adding
noise to the pixel data or trying to produce same pixel re-
sults for every system. Finding some barriers to all these
options, the paper concludes that asking user permission for
each canvas read attempt may be the only eﬀective solu-
tion. Indeed, this is precisely the technique adopted in the
Tor Browser, the only software that we found to successfully
protect against canvas ﬁngerprinting. Speciﬁcally, the Tor
Browser returns an empty image from all the canvas func-
tions that can be used to read image data [13]. The user
is then shown a dialog where she may permit trusted sites
to access the canvas. We conﬁrmed the validity of this ap-
proach when visiting a site we built which performs browser
ﬁngerprinting.
As for more traditional ﬁngerprinting techniques, the Tor
browser again appears to be the only eﬀective tool. With
the exception of a recent Mozilla eﬀort to limit plugin enu-
meration [2], browser manufacturers have not attempted to
build in defenses against ﬁngerprinting. We note that they
are in a position to facilitate such defenses by providing APIs
or settings or tools that can be used to develop countermea-
sures.
Finally, academic studies on mitigating browser ﬁngerprint-
ing are promising but still far from providing practically
implementable and comprehensive countermeasures that ad-
dress all the attack possibilities [10, 36].
14https://adblockplus.org
15http://www.ghostery.com
Evercookies: The straightforward way to defend against
evercookies is to clear all possible storage locations. The
long list of items removed by the Tor Browser when a user
switches to a new identity provides a hint of what can be
stored in unexpected corners of the browser: “searchbox
and ﬁndbox text, HTTP auth, SSL state, OCSP state, site-
speciﬁc content preferences (including HSTS state), content
and image cache, oﬄine cache, Cookies, DOM storage, DOM
local storage, the safe browsing key, and the Google wiﬁ ge-
olocation token. . . ”[40].
The user interfaces provided by popular browsers for manag-
ing browsing information are often fragmented, incomplete,
or esoteric. For instance, Firefox’s Clear Recent History in-