## PostgeSQL sql server兼容性with babelfish - babelfish部署on mssql 2019 docker on ubuntu  
### 作者  
digoal  
### 日期  
2023-01-17  
### 标签  
PostgreSQL , PolarDB , babelfish , sql server 兼容 , ubuntu , docker  
----  
## 背景  
好消息: PolarDB 新版本也会支持babelfish插件.  
上一篇信息介绍了[《PostgeSQL sql server兼容性with babelfish - babelfish部署on CentOS8 docker》](../202301/20230116_01.md)  
本文想再介绍一下部署改版postgresql on mssql2019 docker. (mssql2019的docker基于ubuntu OS)  
本文测试使用了babelfish最新的stable分支, 如果又有了新的分支, 大家安装时请使用新分支.  
babelfish包含了几个部分:  
1、改版的postgresql, 主要增加协议层hook等, 如果postgresql 社区接收了这些改动, 以后就不需要用这个改版分支了.  
- https://github.com/babelfish-for-postgresql/postgresql_modified_for_babelfish/tree/BABEL_3_0_STABLE__PG_15_1  
2、babelfish插件, 其实是4个插件  
- https://github.com/babelfish-for-postgresql/babelfish_extensions/blob/BABEL_3_0_STABLE/contrib/README.md  
babelfishpg_tsql  
- Supports the tsql language.  
babelfishpg_tds  
- Supports the tds connection.  
babelfishpg_common  
- Supports the various datatypes in MSSQL.  
babelfishpg_money  
- supports the money type in MSSQL. This is a variation of the opensource fixeddecimal extension.  
3、兼容性评估工具, 类似阿里云的adam  
- https://github.com/babelfish-for-postgresql/babelfish_compass  
## 安装部署  
### 1、部署改版postgresql on mssql2019 docker  
macOS docker的使用可以参考:  
[《如何用 PolarDB 证明巴菲特的投资理念 - 包括PolarDB on Docker简单部署》](../202209/20220908_02.md)  
[《microsoft sql server on docker 部署》](../202301/20230114_02.md)  
```  
docker pull mcr.microsoft.com/mssql/server:2019-latest  
docker run -d -it --cap-add=SYS_PTRACE --privileged=true --name mssql2019 -e "ACCEPT_EULA=Y" -e "MSSQL_SA_PASSWORD=Mssql2o2o-" -e "MSSQL_PID=EnterpriseCore" -e "CONFIG_EDGE_BUILD=0" -p 1433:1433 mcr.microsoft.com/mssql/server:2019-latest  
docker exec -it mssql2019 /bin/bash  
/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P Mssql2o2o-  
mssql@109c95b407d8:/$ pwd  
/  
mssql@109c95b407d8:/$ whoami  
mssql  
```  
使用root登陆docker (`-w /root`进入容器后自动切到`/root`目录.)  
```  
IT-C02YW2EFLVDL:~ digoal$ docker exec -it -u 0 -w /root mssql2019 /bin/bash  
root@109c95b407d8:/# whoami  
root  
root@109c95b407d8:/# cat /etc/passwd  
root:x:0:0:root:/root:/bin/bash  
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin  
bin:x:2:2:bin:/bin:/usr/sbin/nologin  
sys:x:3:3:sys:/dev:/usr/sbin/nologin  
sync:x:4:65534:sync:/bin:/bin/sync  
games:x:5:60:games:/usr/games:/usr/sbin/nologin  
man:x:6:12:man:/var/cache/man:/usr/sbin/nologin  
lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin  
mail:x:8:8:mail:/var/mail:/usr/sbin/nologin  
news:x:9:9:news:/var/spool/news:/usr/sbin/nologin  
uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin  
proxy:x:13:13:proxy:/bin:/usr/sbin/nologin  
www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin  
backup:x:34:34:backup:/var/backups:/usr/sbin/nologin  
list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin  
irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin  
gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin  
nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin  
_apt:x:100:65534::/nonexistent:/usr/sbin/nologin  
mssql:x:10001:0::/home/mssql:/bin/bash  
root@109c95b407d8:/# mkdir /home/mssql  
root@109c95b407d8:/# id mssql  
uid=10001(mssql) gid=0(root) groups=0(root)  
root@109c95b407d8:/# chown mssql:root /home/mssql  
```  
sql server2019 docker使用的是ubuntu 20.04:  
```
root@109c95b407d8:~# lsb_release -a
No LSB modules are available.
Distributor ID:	Ubuntu
Description:	Ubuntu 20.04.5 LTS
Release:	20.04
Codename:	focal
```
### 2、部署babelfish 修改版 postgresql 15.1  
1、安装postgresql 依赖  
```  
apt-get update  
apt-get install uuid-dev openjdk-8-jre libicu-dev libxml2-dev openssl libssl-dev python-dev libossp-uuid-dev libpq-dev pkg-config g++ build-essential bison unzip man wget flex make git gcc libreadline-dev vim zlib1g-dev libxml2-utils xsltproc docbook  
```  
2、新增postgres用户  
```  
useradd postgres  
mkdir /home/postgres  
chown postgres:postgres /home/postgres  
```  
3、一些便捷配置  
3\.1、修改普通用户默认shell类型 , 默认是sh  
```  
vi /etc/passwd  
postgres:x:10002:10002::/home/postgres:/bin/bash  
```  
3\.2、配置自动命令补齐  
- https://blog.csdn.net/jingtaohuang/article/details/109628105  
打开 /etc/inputrc 文件，搜索关键字 history-search, 删除这两行前面的#，退出保存，再重新登录terminal即可。  
3\.3、上下键支持历史命令  
- https://www.jianshu.com/p/f5635f967f2a  
```  
sudo vi /etc/bash.bashrc  
1.  #enable bash completion in interactive shells  
if ! shopt -oq posix; then  
      if [-f  /usr/share/bash-completion/bash_completion ]; then  
          . /usr/share/bash-completion/bash_completion  
      elif [ -f /etc/bash_completion]; then  
           . /etc/bash_completion  
      fi  
fi  
```  
4、安装babelfish 修改版pg 15.1  
```  
su - postgres  
cd ~  
git clone --depth 1 -b BABEL_3_0_STABLE__PG_15_1 https://github.com/babelfish-for-postgresql/postgresql_modified_for_babelfish.git  
cd postgresql_modified_for_babelfish  
./configure --prefix=/home/postgres/pg15.1 --with-icu --with-libxml --with-uuid=ossp  
make world -j 8  
make install-world  
```  
5、配置环境变量  
```  
cd ~  
vi .profile  
# add  
alias ll='ls -larht'  
alias rm='rm -i'  
export LANG=en_US.UTF8
export PGHOME=/home/postgres/pg15.1  
export PATH="$PGHOME/bin:$PATH"  
export MANPATH="$PGHOME/share/man:$MANPATH"  
export PGLOCALEDIR=$PGHOME/share/locale  
export PGDATA=/home/postgres/pgdata  
export PGHOST=$PGDATA  
export PGPORT=1921  
export PGDATABASE=postgres  
export PGUSER=postgres  
export PGPASSWORD=pg123  
. ./.profile  
```  
6、初始化数据库  
```  
initdb -D $PGDATA -U postgres -E UTF8 --lc-collate=C --lc-ctype=en_US.UTF8 --locale-provider=icu --icu-locale=C  
```  
7、配置数据库参数和数据库防火墙  
```  
cd $PGDATA  
vi postgresql.auto.conf  
listen_addresses = '0.0.0.0'		  
port = 1921				  
max_connections = 100			  
unix_socket_directories = '/tmp,.'	  
unix_socket_permissions = 0700		  
tcp_keepalives_idle = 60		  
tcp_keepalives_interval = 60		  
tcp_keepalives_count = 10		  
tcp_user_timeout = 60			  
client_connection_check_interval = 60	  
password_encryption = scram-sha-256	  
shared_buffers = 128MB			  
dynamic_shared_memory_type = posix	  
vacuum_cost_delay = 0			  
bgwriter_delay = 10ms			  
bgwriter_lru_maxpages = 1000		  
bgwriter_lru_multiplier = 5.0		  
effective_io_concurrency = 0		  
max_parallel_workers_per_gather = 0	  
wal_level = replica			  
synchronous_commit = off		  
full_page_writes = on			  
wal_writer_delay = 10ms		  
checkpoint_timeout = 15min		  
max_wal_size = 1GB  
min_wal_size = 80MB  
random_page_cost = 1.1			  
log_destination = 'csvlog'		  
logging_collector = on	  
log_truncate_on_rotation = on		  
log_timezone = 'UTC'  
autovacuum_vacuum_cost_delay = 0ms	  
vacuum_freeze_table_age = 1500000000  
vacuum_freeze_min_age = 500000000  
vacuum_multixact_freeze_table_age = 1500000000  
vacuum_multixact_freeze_min_age = 50000000  
datestyle = 'iso, mdy'  
timezone = 'UTC'  
lc_messages = 'C'			  
lc_monetary = 'C'			  
lc_numeric = 'C'			  
lc_time = 'C'				  
default_text_search_config = 'pg_catalog.english'  
```  
```  
vi pg_hba.conf  
# add  
host all all 0.0.0.0/0 md5  
```  
### 3、安装部署 babelfish 插件  
1、先安装依赖  
```  
su - root  
cd ~  
wget https://github.com/Kitware/CMake/releases/download/v3.20.6/cmake-3.20.6-linux-x86_64.sh  
sh cmake-3.20.6-linux-x86_64.sh  
-----------  
Do you accept the license? [yn]:  
      y  
By default the CMake will be installed in:  
  "/root/cmake-3.20.6-linux-x86_64"  
Do you want to include the subdirectory cmake-3.20.6-linux-x86_64?  
Saying no will install in: "/root" [Yn]:  
Y  
Using target directory: /root/cmake-3.20.6-linux-x86_64  
Extracting, please wait...  
Unpacking finished successfully  
-----------  
mkdir /usr/local/cmake  
mv cmake-3.20.6-linux-x86_64/* /usr/local/cmake/  
rm -rf cmake-3.20.6-linux-x86_64  
```  
2、配置环境变量  
```  
su - postgres  
cd ~  
vi .profile  
# add  
export PATH=/usr/local/cmake/bin:$PATH  
[postgres@faf9358f0e61 ~]$ . ./.profile  
[postgres@faf9358f0e61 ~]$ which cmake  
/usr/local/cmake/bin/cmake  
```  
3、安装babelfish插件  
下载插件  
```  
su - postgres  
cd ~  
git clone --depth 1 -b BABEL_3_0_STABLE https://github.com/babelfish-for-postgresql/babelfish_extensions  
```  
安装antlr  
```  
su - root  
cp /home/postgres/babelfish_extensions/contrib/babelfishpg_tsql/antlr/thirdparty/antlr/antlr-4.9.3-complete.jar /usr/local/lib  
```  
```  
su - postgres  
cd ~  
wget --no-check-certificate http://www.antlr.org/download/antlr4-cpp-runtime-4.9.3-source.zip  
unzip -d antlr4 antlr4-cpp-runtime-4.9.3-source.zip  
cd antlr4  
mkdir build  
cd build  
cmake .. -DANTLR_JAR_LOCATION=/usr/local/lib/antlr-4.9.3-complete.jar -DCMAKE_INSTALL_PREFIX=/usr/local -DWITH_DEMO=True  
make -j 4  
```  
cmake 如遇到如下报错, 则修改`antlr4/CMakeLists.txt`解决 (在mssql2019 docker上没有遇到这个报错):  
```  
If you come across the error  
-- Checking for module 'uuid'  
--   No package 'uuid' found  
CMake Error at /usr/local/share/cmake-3.21/Modules/FindPkgConfig.cmake:554 (message):  
    A required package was not found  
Call Stack (most recent call first):  
    /usr/local/share/cmake-3.21/Modules/FindPkgConfig.cmake:776 (_pkg_check_modules_internal)  
    CMakeLists.txt:44 (pkg_check_modules)  
Check that you have uuid-devel installed. If so,  