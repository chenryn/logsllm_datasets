Short path with complex constraints
a = input () ;
X = sqrt (a);
Y = log (a*a*a - a)
// point A
if (X == Y) {
// point B
Table 2: A counterexample that demonstrates why proxim-
ity between two functional blocks can be inaccurate. Left, we
can move from point A to point B even if they are 5 blocks
apart from each other. Right, it is much harder to satisfy the
constrains and to move from A to B, despite the fact that A
and B are only 1 block apart.
the shortest path from the BE to the closest return point and uses
this value as an edge weight for that callee.
After creation of the delta graph, our algorithm selects exactly
one node (i.e., functional block) from each set (i.e., payload state-
ment), to minimize the total weight of the resulting induced sub-
graph 1. This selection of functional blocks is considered to be the
most likely to give a solution, so the next step is to find the exact
dispatcher blocks and create the BOP gadgets for the SPL payload.
4.5 Stitching BOP gadgets
The minimum induced subgraph from the previous step determines
a set of functional blocks that may be stitched together into an SPL
payload. This set of functional blocks has minimal distance to each
other, thus making satisfiable dispatcher paths more likely.
To find a dispatcher path between two functional blocks, BOPC
leverages concolic execution [56] (symbolic execution along a given
path). Along the way, it collects the required constraints that are
needed to lead the execution to the next functional block. Sym-
bolic execution engines [5, 59] translate basic blocks into sets of
constraints and use Satisfiability Modulo Theories (SMT) to find
satisfying assignments for these constraints; symbolic execution is
therefore NP-complete. Starting from the (context sensitive) short-
est path between the functional blocks, BOPC guides the symbolic
execution engine, collecting the corresponding constraints.
To construct an SPL payload from a BOP chain, BOPC launches
concolic execution from the first functional block in the BOP chain,
starting with an empty state. At each step BOPC tries the first K
shortest dispatcher paths until it finds one that reaches the next
functional block (the edges in the minimum induced subgraph in-
dicate which is the “next” functional block). The corresponding
constraints are added to the current state. The search therefore
incrementally adds BOP gadgets to the BOP chain. When a func-
tional block represents a conditional SPL statement, its node in the
induced subgraph contains two outgoing edges (i.e., the execution
can transfer control to two different statements). However during
the concolic execution, the algorithm does not know which one will
be followed, it clones the current state and independently follows
both branches, exactly like symbolic execution [5].
1The induced subgraph of the delta graph is a subgraph of the delta graph with one
node (functional block) for each SPL statement and with edges that represent their
shortest available dispatcher block chain.
Reaching the last functional block, BOPC checks whether the con-
straints have a satisfying assignment and forms an exploit payload.
Otherwise, it falls back and tries the next possible set of functional
blocks. To repeat that execution on top of the target binary, these
constraints are concretized and translated into a memory layout
that will be initialized through AWP in the target binary.
5 IMPLEMENTATION
Our open source prototype, BOPC, is implemented in Python and
consists of approximately 14,000 lines of code. The current pro-
totype focuses on x64 binaries, we leave the (straightforward) ex-
tension to other architectures such as x86 or ARM as future work.
BOPC requires three distinct inputs:
• The exploit payload expressed in SPL,
• The vulnerable application on top of which the payload runs,
• The entry point in the vulnerable application, which is a
location that the program reaches naturally and occurs after
all AWPs have been completed.
The output of BOPC is a sequence of (address, value, size) tuples
that describe how the memory should be modified during the state
modification phase (Section 3) to execute the payload. Optionally, it
may also generate some additional (stream, value, size) tuples that
describe what additional input should be given on any potentially
open “streams” (file descriptors, sockets, stdin) that the attacker
controls during the execution of the payload.
A high level overview of BOPC is shown in Figure 5. Our algo-
rithm is iterative; that is, in case of a failure, the red arrows, indicate
which module is executed next.
5.1 Binary Frontend
The Binary Frontend uses angr [59] to lift the target binary into
the VEX intermediate representation to expose the application’s
CFG. Operating directly on basic blocks is cumbersome and heavily
dependent on the Application Binary Interface (ABI). Instead, we
translate each basic block into a block constraint summary. Abstrac-
tion leverages symbolic execution [39] to “summarize” the basic
block into a set of constraints encoding changes in registers and
memory, and any potential system, library call, or conditional jump
at the end of the block – generally any effect that this block has on
the program’s state. BOPC executes each basic block in an isolated
environment, where every action (such as accesses to registers or
memory) is monitored. Therefore, instead of working with the in-
structions of each basic block, BOPC utilizes its abstraction for all
operations. The abstraction information for every basic block is
added to the CFG, resulting in CFGA.
5.2 SPL Frontend
The SPL Front end translates the exploit payload into a graph-based
Intermediate Representation (IR) for further processing. To increase
the flexibility of the mapping process, statements in a sequence
can be executed out-of-order. For each statement sequence we
build a dependence graph based on a customized version of Kahn’s
topological sorting algorithm [36], to infer all groups of independent
statements. Independent statements in a subsequence are then
turned into a set of statements which can be executed out-of-order.
PL
N
K
Binary
CFGA
Binary
Frontend
SPL
payload
IR
SPL
Frontend
RG
VG
CB
FB
MAd j
Find
Functional
Blocks
Find
Candidate
Blocks
δG
Build
Delta
Graph
Minimum
Induced
Subgraphs
Hk
Simulation
Cw
Output
(addr, value)
(addr, value)
(addr, value)
. . .
(addr, value)
Figure 5: High level overview of the BOPC implementation. The red arrows indicate the iterative process upon failure. CFGA:
CFG with basic block abstractions added, IR: Compiled SPL payload RG: Register mapping graph, VG: All variable mapping
graphs, CB: Set of candidate blocks, FB: Set of functional blocks, MAd j: Adjacency matrix of SPL payload, δG: Delta graph,
Hk : Induced subgraph, Cw : Constraint set. L: Maximum length of continuous dispatcher blocks, P: Upper bound on payload
“shuffles”, N : Upper bound on minimum induced subgraphs, K: Upper bound on shortest paths for dispathers.
This results in a set of equivalent payloads that are permutations
of the original. Our goal is to find a solution for any of them.
5.3 Locating candidate block sets
SPL is a high level language that hides the underlying ABI. There-
fore, BOPC looks for potential ways to “map” the SPL environment
to the underlying ABI. The key insight in this step is to find all
possible ways to map the individual elements from the SPL envi-
ronment to the ABI (though candidate blocks) and then iteratively
selecting valid subsets from the ABI to “simulate” the environment
of the SPL payload.
Once the CFGA and the IR are generated, BOPC searches for
and marks candidate basic blocks, as described in Section 4.2. For a
block to be a candidate, it must “semantically match” with one (or
more) payload statements. Table 3 shows the matching rules. Note
that variable assignments, unconditional jumps, and returns do not
require a basic block and therefore are excluded from the search.
All statements that assign or modify registers require the basic
block to apply the same operation on the same, as yet undetermined,
hardware registers. For function calls, the requirement for the basic
block is to invoke the same call, either as a system call or as a library
call (if the arguments are different, the block is clobbering). Note
that the calling convention exposes the register mapping.
Upon a successful matching, BOPC builds the following data
structures:
• RG, the Register Mapping Graph which is a bipartite undi-
rected graph. The nodes in the two sets represent the virtual
and hardware registers respectively. The edges represent po-
tential associations between virtual and hardware registers.
• VG, the Variable Mapping Graph, which is very similar to
RG, but instead associates payload variables to underlying
memory addresses. VG is unique for every edge in RG i.e.:
∀(
rα , reдγ ) ∈ RG ∃! V
αγ
G
• DM , the Memory Dereference Set, which has all memory ad-
dresses that are dereferenced and their values are loaded
into registers. Those addresses can be symbolic expressions
(e.g., [rbx + rdx*8]), and therefore we do not know the
concrete address they point to until execution reaches them
(see Section 5.6).
After this step, each SPL statement has a set of candidate blocks.
Note that a basic block can be candidate for multiple statements.
If for some statement there are no candidate blocks, the algorithm
halts and reports that the program cannot be synthesized.
5.4 Identifying functional block sets
After determining the set of candidate blocks, CB, BOPC iteratively
identifies, for each SPL statement, which candidate blocks can serve
as functional blocks, i.e., the blocks that perform the operations.
This step determines for each candidate block if there is a resource
mapping that satisfies the block’s constraints.
BOPC identifies the concrete set of hardware registers and mem-
ory addresses that execute the desired statement. A successful map-
ping identifies candidate blocks that can serve as functional blocks.
To find the hardware-to-virtual register association, BOPC
searches for a maximum bipartite matching [11] in RG. If such
a mapping does not exist, the algorithm halts. The selected edges
indicate the set of VG graphs that are used to find the memory
mapping, i.e., the variable-to-address association (see Section 5.3,
there can be a VG for every edge in RG). Then for every VG the algo-
rithm repeats the same process to find another maximum bipartite
matching.
This step determines, for each statement, which concrete regis-
ters and memory addresses are reserved. Merging this information
with the set of candidate blocks constructs each block’s SPL state,
enabling the removal of candidate blocks that are unsatisfiable.
However, there may be multiple candidate blocks for each
SPL statement, and thus the maximum bipartite match may not
be unique. The algorithm enumerates all maximum bipartite
matches [62], trying them one by one. If no match leads to a solution,
the algorithm halts.
5.5 Selecting functional blocks
Given the functional block set FB, this step searches for a subset
that executes all payload statements. The goal is to select exactly
one functional block for every IR statement and find dispatcher
blocks to chain them together. BOPC builds the delta graph δG,
described in Section 4.4.
Statement
Form
Register Assignment
Register Modification
Memory Read
Memory Write
Call
Conditional Jump
rα = C
rα = &V
rα ⊙ = C
rα = ∗ rβ
∗ rα = rβ
call(
i f (
rα ,
rα ⊙ = C)
rβ , ...)
дoto LOC
Abstraction
reдγ ← C
reдγ ← ∗A
reдγ ← C, C ∈ R∧W
reдγ ← ∗A
reдγ ← reдγ ⊙ C
reдγ ← ∗reдδ
∗reдγ ← reдδ
Ijk_Call to call
Ijk_Boring ∧
condition = reдγ ⊙ C
RG ∪(cid:8)(
RG ∪(cid:8)(
RG ∪(cid:8)(
RG ∩(cid:8)(
RG ∪(cid:8)(
rα , reдγ )(cid:9)
rα , reдγ )(cid:9)
rα , reдγ )(cid:9)
rα , reдγ ), (
rα , %rdi), (
DM ∪ {A}
–
DM ∪ {A}
Actions
V
–
αγ
G ∪(cid:8)(V , A)(cid:9)
rβ , reдδ)(cid:9)
rβ , %rsi), ...(cid:9)
Example
movzx rax, 7h
mov rax, ds:fd
lea rcx, [rsp+20h]
mov rdx, [rsi+18h]
dec rsi
mov rax, [rbx]
mov [rax], [rbx]
call execve
test rax, rax
jnz LOOP
Table 3: Semantic matching of SPL statements to basic blocks. Abstraction indicates the requirements that the basic block
abstraction needs to have to match the SPL statement in the Form. Upon a match, the appropriate Actions are taken.
rα ,
rβ : Virtual registers, reдγ , reдδ : Hardware registers, C: Constant value, V : SPL variable, A: Memory address, RG: Register
mapping graph, VG: Variable mapping graph, DM : Dereferenced Addresses Set, Ijk_Call: A call to an address, Ijk_Boring: A
normal jump to an address.
Once the delta graph is generated, this step locates the minimum
(in terms of total edge weight) induced subgraph, Hk0, that contains
the complete set of functional blocks to execute the SPL payload.
If Hk0, does not result in a solution, the algorithm tries the next
minimum induced subgraph, Hk1, until a solution is found or a limit