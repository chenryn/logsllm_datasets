title:A Chinese wall security model for decentralized workflow systems
author:Vijayalakshmi Atluri and
Soon Ae Chun and
Pietro Mazzoleni
A Chinese Wall Security Model for Decentralized Workﬂow
Systems †
Vijayalakshmi Atluri
Soon Ae Chun
MSIS Department and CIMIC
MSIS Department and CIMIC
Dipartimento Di Informatica
∗
Pietro Mazzoleni
Universita Di Milano
Milan, Italy
Rutgers University
Newark, NJ 07102, USA
Rutgers University
Newark, NJ 07102, USA
PI:EMAIL
PI:EMAIL
PI:EMAIL
ABSTRACT
Workﬂow systems are gaining importance as an infrastruc-
ture for automating inter-organizational interactions, such
as those in Electronic Commerce. Execution of inter-organiz-
ational workﬂows may raise a number of security issues in-
cluding those related to conﬂict-of-interest among compet-
ing organizations. Moreover,
in such an environment, a
centralized Workﬂow Management System is not desirable
because: (i) it can be a performance bottleneck, and (ii)
the systems are inherently distributed, heterogeneous and
autonomous in nature.
In this paper, we propose an ap-
proach to realize decentralized workﬂow execution, in which
the workﬂow is divided into partitions called self-describing
workﬂows, and handled by a light weight workﬂow manage-
ment component, called workﬂow stub, located at each orga-
nizational agent. We argue that placing the task execution
agents that belong to the same conﬂict-of-interest class in
one self-describing workﬂow may lead to unfair, and in some
cases, undesirable results, akin to being on the wrong side of
the Chinese wall. We propose a Chinese wall security model
for the decentralized workﬂow environment to resolve such
problems, and a restrictive partitioning solution to enforce
the proposed model.
Keywords
Decentralized Workﬂow Execution, Chinese Wall Security
Policy, Self-describing workﬂow
1.
INTRODUCTION
Since timely services are critical for any business, there
is a great need to automate or re-engineer business pro-
†
This work is supported in part by the National Science
∗
Foundation under grant EIA-9983468.
CIMIC, Rutgers University during 2000.
The work of P. Mazzoleni was conducted while visiting
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’01 November 5-8, 2001, Philadelphia, Pennsylvania, USA.
Copyright 2001 ACM 1-58113-385-5/01/0011 ...$5.00.
cesses. Many organizations achieve this by executing the
coordinated activities (tasks) that constitute the business
process (workﬂow) through workﬂow management systems
(WFMS). In general, a workﬂow can be deﬁned as a set
of tasks and dependencies that control the coordination re-
quirements among these tasks. The task dependencies can
be categorized into control-ﬂow dependencies, value depen-
dencies, and external dependencies [9, 14].
With the rapid growth of internet usage for enterprise-
wide and cross-enterprise business applications (such as those
in Electronic Commerce), workﬂow systems are gaining im-
portance as an infrastructure for automating inter-organizat-
ional interactions.
Traditionally, the workﬂow management and scheduling is
carried out by a single centralized workﬂow management en-
gine. This engine is responsible for enacting task execution,
monitoring workﬂow state, and guaranteeing task depen-
dencies. However, in an electronic commerce environment
with inter-organizational workﬂows, a centralized Workﬂow
Management System is not desirable because: (i) scalability
is one of the pressing needs since many concurrent workﬂows
or instances of the same workﬂows are executed simultane-
ously, and a centralized WFMS can cause a performance
bottleneck, and (ii) the systems are inherently distributed,
heterogeneous and autonomous in nature, and therefore do
not lend themselves to centralized control. In fact, several
researchers have recognized the need for decentralized con-
trol [2, 18, 10, 6].
In this paper, we propose a decentralized workﬂow man-
agement model (DWFMS) where the intertask dependencies
are enforced without having to have a centralized WFMS.
Our model introduces the notion of self-describing workﬂows
and WFMS stubs. Self-describing workﬂows are partitions
of a workﬂow that carry suﬃcient information so that they
can be managed by a local task execution agent rather than
the central WFMS. A WFMS stub is a light-weight compo-
nent that can be attached to a task execution agent, which is
responsible for receiving the self-describing workﬂow, mod-
ifying it and re-sending it to the next task execution agent.
Execution of inter-organizational workﬂows may raise a
number of security issues including those related to conﬂict-
of-interest among competing organizations.
In this paper,
we demonstrate that placing the task execution agents that
belong to the same conﬂict-of-interest group in one self-
describing workﬂow may lead to unfair, and in some cases,
undesirable results, akin to being the wrong side of the Chi-
48nese wall. We propose a Chinese wall security model for the
decentralized workﬂow environment to resolve such prob-
lems, and a restrictive partitioning solution to enforce the
proposed model.
The remainder of the paper is organized as follows.
In
section 2, we present the motivation to this paper with
an example by distinguishing the centralized control with
its decentralized counterpart. In section 3, we present our
workﬂow model. In section 4, we present our approach to
providing decentralized control. In appendix A, we provide
a brief review of the Chinese wall security policy. In section
5, we present a variation of the Chinese wall security model
suitable for decentralized workﬂow systems, called the DW
Chinese Wall Policy, which can be used to eliminate the
problems that arise due to conﬂicts-of-interest. In section
6 we present our approach to decentralized control that en-
forces the DW Chinese wall policy. Section 7 provides a
brief review of related research. Finally, section 8 provides
conclusions and future research directions. Due to space
limitations, we have not included the proof of the theorems
(see [3]).
2. MOTIVATION
A workﬂow is comprised of a set of tasks, and a set of task
dependencies that control the coordination among the tasks.
In an inter-organizational workﬂow, tasks are executed by
diﬀerent, autonomous, distributed systems. We call the sys-
tem that executes a speciﬁc task a task execution agent, or
simply an agent. We denote the agent of a task ti as A(ti).
In the following, we will take an example to illustrate ﬁrst
how the workﬂow is executed with centralized control and
decentralized control, and then portray the security prob-
lems that arise due to decentralized control.
Example 1. Consider a business travel planning process
that makes reservations for a ﬂight seat, a hotel room and a
rental car. The workﬂow that depicts the process at a travel
agent may comprise of the following tasks:
t1: Input travel information
t2: Reserve a ticket with Continental Airlines
t3: if t2 fails or if the ticket costs more than $400, reserve a
ticket with Delta Airlines
t4: if the ticket at Continental costs less than $400, or if the
reservation at Delta fails, purchase the ticket at Continental
t5: if Delta has a ticket, then purchase it at Delta.
t6: Reserve a room at Sheraton, if there is ﬂight reservation,
and
t7: Rent a car at Hertz
The corresponding workﬂow can be depicted as a graph,
shown in ﬁgure 1. Note that “bs” and “bf” in the ﬁgure
stand for “begin on success” and “begin on failure,” respec-
tively. Assume that each task is executed at the appropriate
agent, for example, t2 by Continental, t3 by Delta, etc. In
the above workﬂow example, the type of dependencies that
are of interest to us in this paper are t2 → t3 and t2 → t4,
which state that t3 should begin only if t2 is not success-
ful or the outcome of t2 is more than $400, and t4 starts
when t2’s outcome is $400 or less. Examples such as this
are not unusual (consider priceline.com), where a customer
sets a maximum he is willing to pay, but not necessarily
looking for the best price. At the same time, he may have
preferences for the merchants whom he wants to do business
with, for example preferences for a speciﬁc set of airlines in
(Bf) OR price>$400
t3
Bs
Bf
Bs
t1
t2
price $400, the WFMS would send
t3 to A(t3). After receiving the response, it sends t4 or t5
to its corresponding agent, A(t4) or A(t5), and so on.
In
other words, the WFMS is responsible for the control ﬂow
at every stage of execution, as shown in Figure 2.
Central System
A(t 1)
A(t
)2
A(t 3)
A(t
)4
A(t
)5
6A(t
)
A(t 7)
Figure 2: Centralized (Traditional) Workﬂow Man-
agement
Decentralized Control
With decentralized control, the entire workﬂow is sent to
A(t1) by the central WFMS. After the execution of t1, A(t1)
forwards the remaining workﬂow to the following agents, in
this case, A(t2). After executing t2, A(t2) evaluates the fol-
lowing dependencies and forwards the remaining workﬂow to
the next appropriate agent. For instance, if the price > $400,
A(t2) would send the remaining workﬂow (t3, t4, t5, t6, t7) to
A(t3). Alternatively, if the price ≤ $400, it would send the
remaining workﬂow (t4, t6, t7) to A(t4). A(t3) executes its
task t3, evaluates the dependency, and makes a choice to
send the remaining workﬂow to the appropriate agent, ei-
ther to A(t4) or to A(t5), and so on. At the end, the last
task execution agent(s) need to report the results back to
the central WFMS, as shown in ﬁgure 3. Note that this way
of execution results in fewer message exchanges between the
central WFMS and the task execution agents, and also mini-
mizes the control by one single central controlling authority,
which is desirable in autonomous environments.
49Central System
t 1
t 2
t 3
t 4
t 5
t 6
t 7
4t
t 6t 7
)4A(t
t 6t 7
A(t 1)
)2A(t
t 3
t 4
t 5
t 6t 7
t 4
t 6t 7
6A(t
)
t 7
A(t
)7
t 2t 3t 4t 5t 6t 7
3A(t
)
t 5t 6t 7
)5A(t
t 6t 7
Figure 3: Decentralized Workﬂow Management
Security Problems due to Decentralized Control
There is a clear problem, if we employ decentralized control
to execute the workﬂow in example 1. After the execution of
t2, A(t2) must send the remaining workﬂow to either A(t3)
or A(t4), based on the outcome of t2. A(t2) has the knowl-
edge that if it fails (that is, no ticket is available) or if the
ticket costs more than $400, the task needs to be sent to
A(t3) (Delta airlines), which is a competing company. Due
to this fact, A(t2) can manipulate the price of the ticket
and may reduce it to $399, which may result in a loss of
business to A(t3) or may prevent the customer from getting
a better price than $399 that may potentially be oﬀered by
Delta. Note that A(t2) cannot gain such an advantage if the
workﬂow were executed with centralized control. This is be-
cause the central WFMS ﬁrst sends t2 to A(t2) and observes
the result, and if it is more than $400 sends t3 over to A(t3).
Since A(t2) has no knowledge of the conditional dependency,
it outputs its originally intended price. It is important to
note that the actions of A(t2) are legitimate, and do not
involve any malicious activity such as changing the control
logic of the workﬂow. The problem still persists even if the
dependency information is revealed only to A(t3). Similar
problem exists with t2−→t4. Thus, with the knowledge of
dependency information, one agent can beneﬁt at the cost
of the other. It is important to note that revealing only t2
to A(t2) by appropriately encrypting the workﬂow will not
work. This is because A(t2) has to evaluate the dependency
and forward the remaining workﬂow, and therefore A(t2)
should know both the dependency and the following agent.
In this paper, we argue that the problem depicted above is
similar to that of that addressed by the Chinese Wall Secu-
rity Policy, and we propose a modiﬁed Chinese wall security
policy to suit to the decentralized control environment.
3. THE WORKFLOW MODEL
A workﬂow is a set of tasks with task dependencies deﬁned
among them. Formally:
Definition 1. [Workﬂow] A workﬂow W can be de-
ﬁned as a directed graph (T, D), where T , the set of nodes,
denotes the tasks t1, t2...tn in W , and D, the set of edges, de-
x−→ tj , such that ti, tj ∈
notes the intertask dependencies ti
T and x the type of the dependency.
Given a workﬂow, W = (cid:7)T, D(cid:8), we deﬁne the tasks and the
dependencies in the following.
3.1 Workﬂow Tasks
The task structure can be represented as a state tran-
sition diagram with a set of states and a set of primitive
operations, as shown in ﬁgure 4. At any given time, a task
ti can be in one of the following states (sti):
initial (ini),
executing (exi), done (dni), committed (cmi), aborted(abi),
succeeded (sui) or failed (f li). A primitive moves the task
b
in
ex
cm
dn
p
a
c
ab
e
e
su
fl
Figure 4: States of a Task
from one state to another. Given a task ti, we assume the
following primitives (pri): begin (bi), precommit (pi), com-
mit (ci), abort (ai) and evaluate (ei). We denote the set
of these distinct states and primitive operations by ST and
P R, respectively.
Note that, failure of a task can be due to one of the follow-
ing two reasons: (1) a task cannot execute to its completion