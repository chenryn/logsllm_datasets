# Total Endpoint Protection: #1 in EDR & Next-Gen AV

## About Me
- **Security Researcher at Cybereason**
- **@PhilipTsukerman**
- **Currently under a lot of stress**

## Outline
- Lateral Movement and WMI
- New and Improved Methods
- A Word About Detection

## Lateral Movement
Lateral movement is a technique used by attackers to move from one compromised system to another within a network. This often involves abusing legitimate features rather than exploiting bugs, as these features typically work as intended.

### Common Lateral Movement (LM) Methods
- **Remote Service Creation / PSExec**
- **Remote Task Scheduling**
- **WMI Win32_Process.Create**

## A Bit About WMI
Windows Management Instrumentation (WMI) is a Windows feature that provides an object-oriented representation of applications, devices, and other system components. It is accessible remotely through DCOM and WinRM.

### Key WMI Components
- **Winmgmt Service**: Acts as a mediator between the WMI model and client applications.
- **Providers**: Implement the methods and instances of WMI classes, often as COM DLLs.
- **Repository**: Central storage area for the WMI model, containing definitions and instances.

### The Win32_Process Class
- **Description**: Represents a single process on a machine.
- **Key Method**: `Create` - allows the creation of new processes.

### Expanding the WMI Lateral Movement Arsenal
- **Class Derivation**: Create a subclass of `Win32_Process`, such as `Win32_NotEvilAtAll`, which can be done remotely via WMI. This new class inherits all the methods of the parent class, including `Create`.
- **Demo**: Demonstrating the creation of a new process using the derived class.

### Takeaways
- **Deriving Classes Without Methods**: Works better as it avoids provider method calls.
- **Instance Creation Events**: Use WMI queries like `SELECT * FROM __InstanceCreationEvent WITHIN 5 Where TargetInstance ISA "SOMECLASS"` to monitor for new instances, including subclasses.
- **Cloning Classes**: Not a viable alternative for derivation, as it does not work effectively.

## WMIifying Old Techniques
### Why Do This?
- **Protocol Usage**: Uses WMI protocols instead of native ones, making network forensics more challenging.
- **Service Creation**:
  - **Win32_Service**: Represents a single service on a machine, providing full capabilities similar to `sc.exe`.
  - **Alternative Classes**: `Win32_SystemDriver`, `Win32_TerminalService`, `Win32_BaseService`.

### Scheduled Tasks
- **Old-Style Tasks**:
  - **Win32_ScheduledJob**: Represents tasks created by `at.exe`, but does not provide the full API.
  - **Workaround**: Overcome the inability to run tasks directly.
  - **Limitations**: Does not work on newer operating systems.
- **New-Style Tasks**:
  - **PS_ScheduledTask**: Provides the full API for `schtasks.exe` tasks, available on Windows 8+.
  - **Demo**: Demonstrating the creation of new-style scheduled tasks using WMI.

### Win32_Product Class
- **Description**: Manages applications installed on the machine (e.g., via `msiexec`).
- **Key Method**: `Install` - allows the installation of arbitrary MSI files.
- **Metasploit Integration**: Can package arbitrary payloads into MSI files.
- **Demo**: Demonstrating the use of `Win32_Product` to install a payload.

### Challenges with Win32_Product
- **Replication Issues**: No way to replicate `msiexec /y`.
- **Hijacking Uninstallers**: Does not work effectively.

## Evil WMI Providers
### Overview
- **WMI Providers**: Implement class instances and methods.
- **Custom Providers**: Allow running arbitrary code on the machine.
- **Alexander Leary's Method**: Registering a provider purely using WMI functions, demonstrated at DerbyCon.

### Drawbacks
- **File Drop Requirement**: Need to drop a file on the machine.
- **Complexity**: Writing a WMI DLL is difficult.

### Solution
- **Objective**: Create a provider that runs an arbitrary command line.
- **Steps**:
  - **Create a COM Object**: Insert a new entry in the registry.
  - **Register a New Provider**: Create an instance of `__Win32Provider`.
  - **Load the Provider**: Use the `Load` method of the `MSFT_Providers` class to load any WMI provider regardless of demand.
- **Stealth**:
  - **SelfHost Model**: Runs as SYSTEM but leaves an entry in the event log.
  - **NetworkServiceHostOrSelfHost**: Defaults to SelfHost without a log write.

### Demo
- **Demonstrating the registration and loading of a malicious WMI provider**.

## Bonus: Messing with Boot Configuration
### BCDObject Class
- **Description**: Allows manipulation of entries in the BCD store, such as `winload.exe`.
- **Attack Vector**: Remotely manipulate the Windows loading process.
- **Steps**:
  - **Open the System BCD**: Using an instance of the `BCDStore` class.
  - **Modify BCDObject**: Switch `winload.exe` with `calc.exe` to cause a boot loop.
- **Demo**: Demonstrating the manipulation of boot configuration via WMI.

## Detection
### Key Points
- **WMI-Activity ETW Provider**: A great source of information for monitoring WMI activity.
- **WMI Introspection**: Use WMI queries to audit WMI, e.g., `SELECT * FROM __InstanceCreationEvent WITHIN 5 Where TargetInstance ISA "__Win32Provider"`.
- **Vendor-Specific Classes and Providers**: Knowing what WMI providers and classes exist on your machines is crucial for security.

## Thank You!
Feel free to reach out if you have any questions or need further details.