The model explicitly addresses three different levels: struc-
ture, view, and status. At the structure level the model rep-
resents those objects that have a relatively long lifetime,
such as topology and services. At the status level the model
represents information related to the current status of the
network, such as network statistics. At the view level the
model provides different metaphors to present the informa-
tion contained in the model to the users (or to applications).
Currently, two prototype views have been implemented; one
is based on the tkined system [9], and a second is accessible
through a Web interface. Both views allow the Network Se-
curity Administrator to browse the NetDB, update the con-
tained information, and issue NetScript queries to the Query
Processor component.
4. Composable Network Tools
Network discovery and analysis is done by building new
tools or using tools that already exist and combining them to
achieve the desired results. The advantage of using existing
tools is that it requires less work to implement the mapping
and analysis procedures.
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
netName
IPAddr
netMask
Network
1
linkAddr
type
Interface
n
n
Part of
1
1
nodeName
nickname
type
subtype
architecture
manufacturer
model
location
Node
1
1
Is in
Connected to
Connected to
Connected to
Is installed
n
linkName
linkType
Link
1
n
IPAddr
netmask
gateway
nameserver
Status
IPsetup
n
type
vendor
Device
n
type
name
vendor
version
patchlevel
OS
m
1
n
m
Client−Server
Connected to
Connected to
n
1
n
name
transport_prot
session_prot
port
authentication
traffic
Service
Configuration
type
function
uri
n
Resource
Figure 2. Entity-relationship schema for the network model.
The NetMap philosophy is to perform each part of the
overall network discovery/analysis task with the tool best
suited for the job. This works best if a tool performs one
speciﬁc task instead of implementing many different func-
tionalities as a monolithic application. A tool that is able
to perform many tasks should at least have parameters that
can limit the operation of the tool to exactly what is needed.
An example of a tool like this is Nmap [4]. Nmap performs
ping scans, port scans, OS ﬁngerprinting, and RPC scans.
Nmap can be ﬁnely tuned to suit the speciﬁc needs of each
query.
NetMap provides a way to describe the characteristics
of network tools by writing speciﬁcations in the Network
Tool Language. These speciﬁcations serve as the basis for
determining which tools to run and how to compose their
input and output. Each tool can have different costs associ-
ated with it. For instance, a cost could represent efﬁciency,
conﬁdence, or network bandwidth usage. The purpose of
the cost metrics is to provide support for selecting the most
appropriate tools to answer a particular query.
When NetMap is given a query in the NetScript lan-
guage, the Query Processor determines all the possible tool
schedules that satisfy the query. These schedules are con-
structed so that they satisfy all the dependencies in the tool
descriptions.
If more than one schedule can answer the
query, the schedule that optimizes the desired cost metrics
is selected. The selected schedule is then run. Note that
the schedule that optimizes efﬁciency is not likely to be the
same as the one that optimizes conﬁdence. Therefore, the
user queries must also specify what cost metrics are most
important.
4.1. Representing Model Entities
NetScript and NTL must agree on a common way to re-
fer to entities in the network model. A NetScript query uses
these references to represent a desired value. NTL uses ref-
erences to entities and their attributes to specify the input
required by a tool and/or the tool’s output.
The set of attributes of interest is speciﬁed by using a
path and then organizing the paths into trees. A path is a list
of identiﬁers separated by dots, where the ﬁrst identiﬁer is
called the root, intermediate identiﬁers are relation names,
and the last identiﬁer is an attribute name. If several paths
start with a common subsequence of identiﬁers they can be
combined into a tree. The tree is formed by concatenating
the common subsequence with a comma separated list of
the remainders enclosed in parentheses, where a remainder
is the path with the common subsequence removed. For
instance, the paths iface.mac and iface.type can be
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
tool ping {
ipsetup s;
input s.ipaddress;
output s.status;
efficiency = 2;
confidence = 9;
code{
nargs -n 1 -i "nmap -sP {} |
if grep ’appears to be up.’ >/dev/null ; then
echo 1;
else
echo 0;
fi"
}
}
tool nmap_portscan {
ipsetup s;
input s.ipaddress;
output s.services*-.(port,transport_prot);
efficiency = 5;
confidence = 6;
// The following input assertion is used
// to limit the space of a portscan to local networks
input_assertion ipsetup.ipaddress:InIpRange(128.111.*.*);
// The tool is only able to scan TCP ports
output_assertion service.transport_prot:Equals(TCP);
code{
ssh root@host ". ./nminit;nm_portscan"
}
}
Figure 3. Example of the tool deﬁnition syn-
tax.
combined into the tree iface.(mac,type).
Intermediate identiﬁers in the tree can be marked with
set qualiﬁers. The valid set qualiﬁers are “*” for complete
set, “*-” for subset, and “*+” for superset. The qualiﬁer
should occur directly after an identiﬁer in the path. The set
qualiﬁers are used to map entities and attributes of interest
into sets of entities in the Network Model. For example,
consider node.nodename and node*.nodename. The
ﬁrst case refers to one node’s nodename, while the second
case refers to the set of nodenames for all nodes.
4.2. The Network Tool Language
NetMap tools are described using the Network Tool Lan-
guage. A tool description starts with the keyword “tool”.
This is followed by the name of the tool and a tool descrip-
tion body enclosed in curly brackets. See Figure 3 for two
examples.
The tool description body consists of optional variable
declarations, an optional input deﬁnition, an output deﬁni-
tion, optional cost speciﬁcations, optional assertions, and a
code block. The elements are separated with a “;”.
The input and output deﬁnitions are the tool description’s
most important parts. The Query Processor needs to know
about a tool’s input and output to resolve tool dependencies.
Before a tool can be run, all the input data it needs must be
present. If some input data is missing a different tool must
be run ﬁrst to provide the required data.
Input and output deﬁnitions have similar syntax. They
start with the keyword “input” or “output” followed by
a tree that contains all the attributes that are to be deﬁned.
The root element is either the name of an entity or a declared
variable.
In order to specify a relation between the input parame-
ters and the output parameters, NTL supports the declara-
tion of variables that can be used as root elements in both
the input and output deﬁnition. The declaration starts with
the type of the entity to be declared followed by a variable
name. For example, in both example descriptions in Fig-
ure 3, a variable of type ipsetup is declared and then used
in both the input and output deﬁnition.
The syntax for cost speciﬁcations is costname “=” value,
where value is relative to a speciﬁed range. Different cost
metrics may be associated with different ranges.
The syntax for a code block starts with the keyword
“code” followed by the code to be executed enclosed in
curly brackets. The code represents the set of actions to be
executed to carry out the tool’s task.
There are tool assertions for both input data and for out-
put data. An assertion is only in effect when the tool in
question is run. The input assertion, introduced by the “in-
put assertion” keyword, is used to require that the tool
is run only using input entities that have some special at-
tributes. For example, a tool that checks a particular web
server feature needs a web server to be present on the target
host. Some tools can also be dependent on the target com-
puter running a speciﬁc operating system. The output asser-
tion, introduced by the keyword “output assertion,”
is used to ﬁlter unwanted excess data from the output of
a tool. Output assertions are also used by the Query Pro-
cessor in the scheduling process.
If some tools are only
capable of scanning a limited value set, then the scheduler
can combine the tools in order to cover the whole value do-
main. The Query Processor does not support this feature
in the current implementation. For both types of assertions,
the initial keyword is followed by an attribute reference, a
“:”, and the assertion. The attribute reference is of the form
entity name.attribute name. The format of the constraint
speciﬁcation is dependent on the type of assertion.
In order for a tool’s code to gain access to the assertions
and their constraint speciﬁcations, assertion hooks are pro-
vided. An assertion hook can appear anywhere within a
code block. It starts with the character sequence “#ASRT”
and ends at the ﬁrst following “#”. The body of the hook is
composed of tokens separated by “:”. The tokens specify
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
query nodescan(iprange) {
result ipsetup*.ipaddress;
assertion ipsetup.ipaddress:inIprange(iprange);
confidence 2;
efficency 1;
code {
}
}
query portscan(iprange, portrange) {
result ipsetup*.(ipaddress,
services*.(port,
transport_prot,
name));
assertion ipsetup.ipaddress:InIpRange(iprange);
assertion service.port:InRange(portrange);
code {
}
}
Figure 4. Example of the query syntax.
the assertion of interest, the attribute of interest, and other
parameters that allow a tool to use the constraint informa-
tion at execution time.
The ping tool in Figure 3 declares a variable of type
ipsetup, which is used as the root in the input and output
deﬁnitions. The tool takes an IP address as input and out-
puts a status ﬂag. A non-null value for this ﬂag means that
the host is answering ICMP echo messages. A conﬁdence
cost of 2 and efﬁciency cost of 9 is speciﬁed. The code runs
Nmap in ping scan mode.
IP address
The nmap portscan tool
and
tuples
in Figure 3 takes
of
returns
an
input
the
hport,transport proti
services related to the IP address. The code block speciﬁes
that a command should be executed on a remote host to do
the scanning.
as
a
list
representing
4.3. The NetScript Query Language
Queries are a way of issuing commands to NetMap to
start the discovery of the parts of the network that one is
interested in. A NetScript query speciﬁes the network at-
tributes of interest, the range of values they can have, and
what to do with the result.
See Figure 4 for two examples of the NetScript syntax. A
query deﬁnition starts with the keyword “query” followed
by the name of the query and a comma separated list of
parameter names in parenthesis. This is followed by the
body of the query in curly brackets.
The query body consists of a result speciﬁcation, asser-
tions, cost weights, and a code block. The result speciﬁ-
cation and the code block have the same format as in the
NTL tool descriptions. The result speciﬁcation is the only
mandatory part. Assertions start with the keyword “as-
sertion”. The rest of the syntax is the same as for NTL
tool assertions. The syntax of cost weights are the cost-
name, a whitespace, and a weight. The statement is termi-
nated by a “;”.
The result speciﬁcation identiﬁes which attributes are of
interest. The assertions set a limit on the value the attributes
can have. Assertions can, for instance, constrain a query to
a subnet. The cost weights state how important each cost is
when deciding which tools to use. NetMap currently sup-
ports two different classes of costs depending on how the
total cost is calculated. One class uses the sum of all costs as
the total, while the other uses the minimum value. The sum
type is appropriate for an efﬁciency cost, while the mini-
mum type would be used for a conﬁdence cost. The code
block is run after the query is ﬁnished. The purpose of the
code block is to process the result.
The nodescan query in Figure 4 takes one parameter
as input. The input deﬁnition asks for a range of IP ad-
dresses. The assertion limits the range of IP addresses that
is scanned to the parameter passed to the query. The cost
statements specify that conﬁdence is twice as important as
efﬁciency. The second example query asks for a range of IP
addresses and the related services’ port numbers, transport
protocols, and service names. The two assertions limit the
IP addresses and the ports that are scanned to the parameters
passed to the query.
5. Managing Network Information
After having successfully run the tools, the Query Pro-
cessor stores the query result in the NetDB database. One
of the problems that might occur is that the data received
from the tools is inconsistent and/or incomplete. The Query
Processor uses a normalization procedure to generate a con-
sistent view of the network from the current content of the
database.
5.1. Resolving Inconsistencies
The most common inconsistency problem is the handling
of so-called ghost entries. A ghost entry is present when
more than one of the stored instances represent the same
network object. This often happens when tools return in-
stances with few or no attributes. In this case, the Query
Processor cannot immediately tell if these instances were
previously stored or not; therefore, ambiguities must be re-
solved by post processing the data.
Constraints offer a way to determine if two entity in-
stances represent the same network object or not. A unique
constraint on an attribute means that the attribute uniquely
identiﬁes the entity instance, similar to keys in a database
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Interface
Interface
Ipsetup
Ipaddr: 111.222.3.4
Netmask: 255.255.255.0
CS
Ipsetup
Ipaddr: 222.111.127.1
Ipsetup
Netmask: 255.255.0.0