on a given set of inputs, queries an oracle to determine if
the candidate is equivalent to the reference, and if not, uses
a counter-example from the oracle to reﬁne the candidate
implementation. An important difference is that
that work
assumes access to an equivalence-checking oracle, whereas we
do not.
We note that there has been some recent work on “reverse
engineering” digital circuit netlists [16], [24], but reverse
engineering is used in a very different context here. The goal
12
of this work is to abstract a ﬂattened netlist of gates into a set
of interconnected modules (such as adders, comparators and
so on), which is very different from our work.
VII. CONCLUSION
We have strongly refuted claims in recent work [20] regard-
ing the effectiveness of a technique proposed in that work for
IC camouﬂaging. Speciﬁcally, that work appears to establish
that by camouﬂaging only a small set of gates chosen judi-
ciously, an attacker is forced to undertake “several thousands of
years” of work. In contrast, we have constructed an attack that
shows that it takes the attacker only a few minutes given very
modest computing resources. In constructing the attack, we
have provided several additional insights into IC camouﬂaging
as a security mechanism. We have introduced the notion of a
discriminating set of inputs that soundly captures an attacker’s
difﬁculty. Our empirical assessment using the same realistic
benchmark circuits that prior work has used shows that the
discriminating sets are surprisingly small, thereby providing
insight into why our attack is so effective. Underlying our
attack procedure is a fresh, complexity-theoretic mindset, that
has allowed us to intuit the computational complexity of two
underlying problems for which an attacker needs solvers. We
have shown how the solvers can be constructed via reductions
to SAT, and the use of an off-the-shelf SAT solver. In addition,
we have provided insights into the (in)effectiveness of IC
camouﬂaging as a security mechanism. Our work serves as
a strong caution to IC designers in this regard.
As future work, we plan to pursue several
threads of
research. As mentioned in Section VI, there are other IC ob-
fuscation techniques proposed in literature besides camouﬂag-
ing. These include key-based and programmable logic based
obfuscation. We believe that our attack can be generalized to
these settings as well, allowing us to investigate the security
of these alternate techniques. At the same time, we would
like to explore the problem of ﬁnding the minimum sized
discriminating input set, both from a complexity-theoretic
and practical stand-point. Finally, we are interested in further
exploring the potential defense mechanisms to protect against
our attack that we discussed in Section V.
REFERENCES
[1]
I. T. AG, “Semiconductor & system solutions - inﬁneon technologies,”
August 2014. [Online]. Available: http://www.inﬁneon.com/
[2] S. Arora and B. Barak, Computational Complexity: A Modern
Approach. Cambridge University Press, 2009. [Online]. Available:
http://books.google.ca/books?id=nGvI7cOuOOQC
J. P. Baukus, L. W. Chow, and W. M. Clark Jr, “Digital circuit with
transistor geometry and channel stops providing camouﬂage against
reverse engineering,” Jul. 21 1998, uS Patent 5,783,846.
[3]
[4] A. Baumgarten, A. Tyagi, and J. Zambreno, “Preventing IC piracy using
reconﬁgurable logic barriers,” IEEE Design and Test of Computers,
vol. 27, no. 1, pp. 66–75, 2010.
[5] F. Brglez, “Neutral netlist of ten combinational benchmark circuits and
a target translator in FORTRAN,” in Special session on ATPG and
fault simulation, Proc. IEEE International Symposium on Circuits and
Systems, June 1985, 1985, pp. 663–698.
[6] F. Brglez, D. Bryan, and K. Kozminski, “Combinational proﬁles of
sequential benchmark circuits,” in Circuits and Systems, 1989., IEEE
International Symposium on.
IEEE, 1989, pp. 1929–1934.
[7] Chipworks,
“Reverse
Engineering
Software,”
http://www.
chipworks.com/en/technical-competitive-analysis/resources/
reerse-engineering-software, last accessed May 2014.
[8] ——,
“Inside
the Apple
Lightning
Cable,”
http://www.
chipworks.com/en/technical-competitive-analysis/resources/blog/
inside-the-apple-lightning-cable/, Oct. 2012.
[9] L.-W. Chow, J. P. Baukus, and W. M. Clark Jr, “Integrated circuits
protected against reverse engineering and method for fabricating the
same using vias without metal terminations,” Sep. 14 2004, uS Patent
6,791,191.
[10] Degate, “Reverse engineering integrated circuits with degate,” http://
www.degate.org/documentation/, last accessed May 2014.
[11] N. E´en and N. S¨orensson, “An Extensible SAT-solver,” in Theory
and Applications of Satisﬁability Testing, ser. Lecture Notes in
Computer Science, E. Giunchiglia and A. Tacchella, Eds. Springer
Berlin Heidelberg, 2004, vol. 2919, pp. 502–518. [Online]. Available:
http://dx.doi.org/10.1007/978-3-540-24605-3 37
[12] M. R. Garey and D. S. Johnson, Computers and Intractability; A Guide
New York, NY, USA: W. H.
to the Theory of NP-Completeness.
Freeman & Co., 1990.
[13] F. Imeson, A. Emtenan, S. Garg, and M. Tripunitara, “Securing Com-
puter Hardware Using 3D Integrated Circuit (IC) Technology and Split
Manufacturing for Obfuscation,” in Presented as part of
the 22nd
USENIX Security Symposium. USENIX, 2013, pp. 495–510.
[14] S. Jha, S. Gulwani, S. A. Seshia, and A. Tiwari, “Oracle-guided
component-based program synthesis,” in Software Engineering, 2010
ACM/IEEE 32nd International Conference on, vol. 1.
IEEE, 2010, pp.
215–224.
[15] W. T. Lee, “Engineering a device for electron-beam probing,” Design
& Test of Computers, IEEE, vol. 6, no. 3, pp. 36–42, 1989.
[16] W. Li, A. Gascon, P. Subramanyan, W. Y. Tan, A. Tiwari, S. Malik,
N. Shankar, and S. A. Seshia, “WordRev: Finding word-level structures
in a sea of bit-level gates,” in Hardware-Oriented Security and Trust
(HOST), 2013 IEEE International Symposium on.
IEEE, 2013, pp.
67–74.
[17] B. Liu and B. Wang, “Embedded reconﬁgurable logic for ASIC design
obfuscation against supply chain attacks,” in Proceedings of the confer-
ence on Design, Automation & Test in Europe. European Design and
Automation Association, 2014, p. 243.
[18] D. Mitchell, B. Selman, and H. Levesque, “Hard and easy distributions
[19]
[20]
[21]
[22]
of SAT problems,” in AAAI, vol. 92. Citeseer, 1992, pp. 459–465.
J. Rajendran, Y. Pino, O. Sinanoglu, and R. Karri, “Security analysis
of logic obfuscation,” in Proceedings of
the 49th Annual Design
Automation Conference. ACM, 2012, pp. 83–89.
J. Rajendran, M. Sam, O. Sinanoglu, and R. Karri, “Security Analysis
of Integrated Circuit Camouﬂaging,” in Proceedings of the 2013 ACM
SIGSAC Conference on Computer and Communications Security, ser.
CCS ’13. New York, NY, USA: ACM, 2013, pp. 709–720. [Online].
Available: http://doi.acm.org/10.1145/2508859.2516656
J. Rajendran, O. Sinanoglu, and R. Karri, “Is split manufacturing
secure?” in Design, Automation & Test
in Europe Conference &
Exhibition (DATE), 2013.
J. A. Roy, F. Koushanfar, and I. L. Markov, “EPIC: Ending piracy
of integrated circuits,” in Proceedings of the conference on Design,
automation and test in Europe. ACM, 2008, pp. 1069–1074.
IEEE, 2013, pp. 1259–1264.
[23] SEMI, “Innovation is at Risk: Losses of up to $4 Billion Annually due
to IP Infringement,” http://www.semi.org/en/Issues/IntellectualProperty/
ssLINK/P043785, last accessed May 2014.
[24] P. Subramanyan, N. Tsiskaridze, K. Pasricha, D. Reisman, A. Susnea,
and S. Malik, “Reverse engineering digital circuits using functional
analysis,” in Proceedings of the Conference on Design, Automation and
Test in Europe. EDA Consortium, 2013, pp. 1277–1280.
[25] SypherMedia, “Syphermedia library circuit camouﬂage technology,”
http://www.smi.tv/solutions.htm, last accessed May 2014.
[26] R. Torrance,
“The
state-of-the-art
in Semiconductor Reverse
Engineering at Chipworks,” http://www.chesworkshop.org/ches2009/
presentations/12\ Invited\ Talk\ III/CHES2009\ torrance.pdf,
last
accessed July 2014.
[27] R. Torrance and D. James, “The state-of-the-art in IC reverse engineer-
ing,” in Cryptographic Hardware and Embedded Systems-CHES 2009.
Springer, 2009, pp. 363–381.
[28] G. Tseitin, “On the Complexity of Derivation in Propositional Calculus,”
in Automation of Reasoning, ser. Symbolic Computation, J. Siekmann
13
will cause φ to output 1 if applied at φ’s inputs. Whatever
that pattern is, we can always ﬁnd a completion in which this
pattern is applied at φ’s inputs when 0 is applied to C (we
simply make gates corresponding to TRUE variables NANDs
and those corresponding to FALSE variables NORs). Hence,
(cid:104)C,{(0, 1}(cid:105) will also be a true instance of COMPLETION-DEC.
and G. Wrightson, Eds. Springer Berlin Heidelberg, 1983, pp. 466–483.
[Online]. Available: http://dx.doi.org/10.1007/978-3-642-81955-1 28
APPENDIX
As a formal language, NOT-DISC-SET-DEC can be written as
follows: NOT-DISC-SET-DEC = {(cid:104)C, IO(cid:105) : C is a camouﬂaged
circuit, and IO is not a discriminating set for C}. Now let φ be
an instance of SAT, i.e. φ is a Boolean formula to be checked
for satisﬁability. We can consider φ as a Boolean circuit with
a single output node in which every other node has a fan-out
of 1. Add a camouﬂaged gate g that can implement one of
{NAND,NOR,XNOR} functions and use the output of φ to
drive both of g’s inputs (the true function of g is irrelevant
to the reduction). Call the new circuit C. We show that φ is
satisﬁable if and only if (cid:104)C,{}(cid:105) ∈ NOT-DISC-SET-DEC; i.e., if
and only if the empty set is not a discriminating set for C.
Note that for the empty set, the set of candidate completions
for C consists of all three possible completions (which we get
by mapping g to one of its three possible functions).
Assume φ is satisﬁable, i.e. φ ∈ SAT. By deﬁnition, a
satisfying assignment for φ sets the output of the formula to
1. Assume such a pattern is applied to C. As the output of φ
drives both of g’s inputs, g will output 0 if its true identity is
NAND and 1 if its true identify is XNOR. As we have two
distinct completions in the candidate set that produce different
outputs for the same input pattern, the empty set cannot be a
discriminating set for C, and hence (cid:104)C,{}(cid:105) ∈ NOT-DISC-SET-
DEC.
Now assume φ is (cid:104)C,{}(cid:105) ∈ NOT-DISC-SET-DEC. This means
that there exists an input pattern for which two of the three
possible completions produce different outputs. This pattern
cannot set φ’s output to 0, as all three possible completions
output 1 when φ’s output to 0. Thus, the input pattern must
set φ’s output to 1, which means φ is satisﬁable.
COMPLETION-DEC can also be written as a formal language.
COMPLETION-DEC = {(cid:104)C, IO(cid:105) : C is a camouﬂaged circuit, IO
is a set of input-output pattern pairs for some circuit that has
the same number of inputs and outputs as C, and there exists a
completion X of C such that ∀(i, o) ∈ IO, CX (i) = o}. Let φ
be an instance of SAT. We consider φ as a Boolean circuit. For
each variable (input wire) in φ, we add a camouﬂaged gate that
can implement one of {NAND,NOR} functions and use the
output of the gate to drive the input wire (the true functions of
these camouﬂaged gates are, again, irrelevant to the reduction).
We also create a new input wire and and drive the inputs of
each of the added camouﬂaged gates using the wire and its
negation. Call the new circuit C. Note that C has one input
and one output. We show that φ is satisﬁable if and only if
(cid:104)C,{(0, 1}(cid:105) ∈ COMPLETION-DEC, i.e. if and only if a completion
exits for C that produces an output of 1 when 0 is applied
at the input. First, note that the camouﬂaged gates’ outputs
are completely determined by their true functions (a NAND
gate will output 1 and a NOR gate will output 0 regardless of
what input is applied to the circuit). Now assume (cid:104)C,{0, 1}(cid:105) ∈
COMPLETION-DEC. By deﬁnition, then, a completion exists that
produces 1 when 0 is applied as input. In this completion, if
we look at the outputs of the once-camouﬂaged gates, they
give us an input pattern which when applied to φ, causes
it to output 1, i.e., a satisfying assignment for φ. Similarly,
assume a satisfying assignment exits for φ. This assignment
14