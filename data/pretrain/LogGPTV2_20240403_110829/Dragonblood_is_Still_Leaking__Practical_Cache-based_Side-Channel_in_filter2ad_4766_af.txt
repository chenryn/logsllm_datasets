SAKHLIKIS 21
UPDMDFDr48 26
kanakaman 30
OXNWRABB35 23
0874739218 23
DEPEFCQ56 22
taxidermically 21
38concert 21
NONPARISHIONER 22
NOOMMAY7685 21
gramocelj 21
YUNKALLAH 21
MILE-MICHEL-HYACINTHE 23
STICKHANDLING 22
faras-071196 21
FARNHAM69 22
10231976JR 21
1102001625160 23
wimjsbyk46 21
veroleg351 27
elasticized 21
cutelildevilj87 21
JLNRUJY98 25
FENWICK-1994 21
## CF116C758375 553ED5460AA7 ##
th-commando-regiment 24
thechildrensbank 21
0143576155 22
POWERTOHARM 22
EMILYELAINE 22
becks4svs 22
wvdbincy98448342 25
RCCB16023 22
9117820114 24
mbuyisa's 24
Here is a sample of passwords requiring more than 20 iterations to
be successfully derived into a point on P-256. MAC addresses are
10https://gitlab.inria.fr/ddealmei/poc-iwd-acsac2020/-
/blob/master/data/results/buggy_passwords.txt
Dragonblood is Still Leaking:
Practical Cache-based Side-Channel in the Wild
islandinstlawrencewithducks 23
volume-issue 21
ASPINKK202 21
jratlnve54 22
s9040954i 21
cerinek007 21
JULIESULLIVAN 24
DOXIE\_CHIC 21
AujcYOLE24 22
WALTHAMSTOWEAST 25
tightrope-men 22
FOODENGINEERINGMAG 26
PROSTITITUES 22
SHEAILY872264 22
contest-win-weezers-boombox 21
drkencarter 21
UNIVERSALVEILING 21
taka-taka 21
0849852969 21
otiwbawm61 21
ouchana170672 23
0860168289 22
SIEDING63 21
GORDON520P 26
midmanhattan 21
QgUPaKF67 21
3THUGLOVE 21
scarcetheband 30
tegetiformans 21
canadiancray 25
egzistencija 21
civilrecht 23
BONGONITO 22
B SAMPLE OF A TRACE OF IWD
Sample of a trace yielding four iterations. This has been acquired us-
ing the password superpassword, with MAC addresses E2F754FE22D1
and 9203835A576B. Annotations have been added and are not part
of the original trace.
# First five lines correspond to the qr and qnr generation
# They are ignored during parsing
l_getrandom 5435937 (90)
l_getrandom 5439791 (88)
l_getrandom 5443732 (96)
l_getrandom 5447611 (88)
l_getrandom 5455232 (88)
# Here the loop begins
kdf_sha256 5459308 (82)
kdf_sha256 3324 (86)
kdf_sha256 4091 (82)
kdf_sha256 3972 (84)
l_getrandom 108 (90)
# At the fourth iteration, we notice long-delayed call
# to l_getrandom. It means we can stop there.
l_getrandom 3889 (88)
ACSAC 2020, December 7‚Äì11, 2020, Austin, USA
kdf_sha256 3981 (82)
kdf_sha256 4089 (84)
l_getrandom 106 (90)
kdf_sha256 3734 (86)
kdf_sha256 9058 (100)
kdf_sha256 417 (84)
l_getrandom 501 (90)
kdf_sha256 5691 (84)
l_getrandom 129 (94)
kdf_sha256 3795 (88)
# Other long-delayed calls can be observed, hence
# the need to acquire multiple samples
l_getrandom 4320 (96)
kdf_sha256 4524 (86)
...
C ATTACK ON FREERADIUS
FreeRADIUS supports EAP-pwd, a variant of Dragonfly, as a non-
default authentication method, encapsulated in the RADIUS pro-
tocol. Beside the patches to Dragonblood attacks, we show that
EAP-pwd is still vulnerable to timing attacks (due to a variable
number of iterations), and to the same cache attack we described in
Section 3. In this section, we studied the last version of FreeRADIUS
(v3.0.21 at the time of writing).
C.1 EAP-pwd vs SAE
SAE and EAP-pwd being two variants of Dragonfly, they differ in a
few points. Some of them are only instantiation details (values of
some labels), while others have more impactful consequences on
the workflow and the security of the protocol.
First, EAP-pwd standard does not mandate a constant number
of iterations. Indeed, it exits the conversion loop as soon as the
password is successfully converted. Since a constant number of
iterations would not change the outcome of the conversion, some
implementations (not FreeRADIUS) include this side-channel miti-
gation anyway.
Next, EAP-pwd does not benefit from the same symmetry as SAE:
client and server are clearly defined. This distinction is highlighted
by the fact that the server generates a random token for each new
session. This token will be part of the information hashed at each
iteration during the password conversion. Hence, while a password
is always derived into the same element in SAE (as long as the
identities do not change), each EAP-pwd session ends up with a
new group element, due to the randomness brought by the token.
C.2 FreeRadius implementation
The Dragonfly exchange implemented by FreeRadius follows EAP-
pwd‚Äôs specification [40]. All related functions are defined in the
according module11. Namely, the Hunting and Pecking is imple-
mented in the function compute_password_element, as illustrated
in Listing 5. We cut some parts of the code, and renamed variables
for the sake of clarity.
11https://github.com/FreeRADIUS/freeradius-server/tree/v3.0.x/src/modules/rlm_
eap/types/rlm_eap_pwd
ACSAC 2020, December 7‚Äì11, 2020, Austin, USA
Daniel De Almeida Braga, Pierre-Alain Fouque, and Mohamed Sabt
A quick look at the code in Listing 5 shows a few branches inside
the loop. At line 30, the iteration will end if the output of the KDF
is bigger than the prime. At line 43, if the candidate is not an x-
coordinate of a point on the curve, the rest of the loop is skipped.
The same phenomenon occurs at line 47 and 52. Finally, at line
58, the loop ends if a password have been found, making the total
number of operation password-dependent.
Since the issue of having a password-dependent number of itera-
tion (yielding a clear timing difference) has already been discussed
in [35], we will focus on the cache attack allowing to guess the
exact number of iterations needed to convert the password, even if
the total number of iterations is fixed.
C.3 Cache-Attack Against FreeRADIUS
Using some minor adaptations, we applied our cache attack (de-
scribed on iwd in Section 3) to guess the exact iteration in which
the password is successfully derived. We stress that switching to
a constant number of iterations, with a constant time (or masked)
Legendre symbol computation, would mitigate the timing attack,
but our cache attack would still be practical.
We perform this attack by only monitoring two memory lines,
both in the OpenSSL cryptographic library. To do so, we use the calls
to H_Update (called line 13 to 17) as a synchronization clock. Since
multiple calls to this function follow each other, we catch them with
high probability. Next, we use the call to EC_POINT_is_on_curve
(line 46) as a success-specific code. More specifically, this function
calls set_affine_coordinates from OpenSSL internals, which is
also called if the original check (line 42) is successful success. Thus,
some piece of code is called twice on success, and is never called
on failure.
C.4 Experimental results
We implemented a full Proof of Concept of our attack, and made it
publicly available13 after the vulnerability has been patched. The
experimental setup is the same as described in Section 4.1.
Due to the server-generated token, we only have a single mea-
surement to guess how many iterations are needed to convert the
password. We tested our attack on 80 different passwords, spying
on 15 connections for each password, yielding a total of 1200 traces.
With a single measurement, we successfully guessed the exact num-
ber of iterations for 93% of the traces. We outline some consistency
in the errors: most errors occurred because the spy process misses
on call to the synchronization clock. Hence, we can achieve a better
reliability by loosing some information: assuming that if we guess
that the password needs ùë• iterations to be converted, then it may
need ùë• or ùë• + 1 iterations, allowing us to reach 99% accuracy.
Considering we achieve this accuracy with a single measurement,
we are able to recover a password with fewer measurements than
in previous attacks, even by softening our guess.
This implementation heavily relies on OpenSSL12 to perform
cryptographic operations, such as hashing, manipulating big inte-
gers and elliptic curve points. By default, the library is dynamically
linked from the system-wide installation when building the project.
12https://www.openssl.org/
13https://gitlab.inria.fr/msabt/attack-poc-freeradius
ACSAC2020,December7‚Äì11,2020,Austin,USADanielDeAlmeidaBraga,Pierre-AlainFouque,andMohamedSabtC.2FreeRadiusimplementationTheDragonflyexchangeimplementedbyFreeRadiusfollowsEAP-pwd‚Äôsspecification[40].Allrelatedfunctionsaredefinedintheaccordingmodule11.Namely,theHuntingandPeckingisimple-mentedinthefunctioncompute_password_element,asillustratedinListing5.Wecutsomepartsofthecode,andrenamedvariablesforthesakeofclarity.ThisimplementationheavilyreliesonOpenSSL12toperformcryptographicoperations,suchashashing,manipulatingbiginte-gersandellipticcurvepoints.Bydefault,thelibraryisdynamicallylinkedfromthesystem-wideinstallationwhenbuildingtheproject.AquicklookatthecodeinListing5showsafewbranchesinsidetheloop.Atline30,theiterationwillendiftheoutputoftheKDFisbiggerthantheprime.Atline43,ifthecandidateisnotanx-coordinateofapointonthecurve,therestoftheloopisskipped.Thesamephenomenonoccursatline47and52.Finally,atline58,theloopendsifapasswordhavebeenfound,makingthetotalnumberofoperationpassword-dependent.Sincetheissueofhavingapassword-dependentnumberofitera-tion(yieldingacleartimingdifference)hasalreadybeendiscussedin[35],wewillfocusonthecacheattackallowingtoguesstheexactnumberofiterationsneededtoconvertthepassword,evenifthetotalnumberofiterationsisfixed.C.3Cache-AttackAgainstFreeRADIUSUsingsomeminoradaptations,weappliedourcacheattack(de-scribedoniwdinSection3)toguesstheexactiterationinwhichthepasswordissuccessfullyderived.Westressthatswitchingtoaconstantnumberofiterations,withaconstanttime(ormasked)Legendresymbolcomputation,wouldmitigatethetimingattack,butourcacheattackwouldstillbepractical.Weperformthisattackbyonlymonitoringtwomemorylines,bothintheOpenSSLcryptographiclibrary.Todoso,weusethecallstoH_Update(calledline13to17)asasynchronizationclock.Sincemultiplecallstothisfunctionfolloweachother,wecatchthemwithhighprobability.Next,weusethecalltoEC_POINT_is_on_curve(line46)asasuccess-specificcode.Morespecifically,thisfunctioncallsset_affine_coordinatesfromOpenSSLinternals,whichisalsocallediftheoriginalcheck(line42)issuccessfulsuccess.Thus,somepieceofcodeiscalledtwiceonsuccess,andisnevercalledonfailure.C.4ExperimentalresultsWeimplementedafullProofofConceptofourattack,andmadeitpubliclyavailable13afterthevulnerabilityhasbeenpatched.TheexperimentalsetupisthesameasdescribedinSection4.1.Duetotheserver-generatedtoken,weonlyhaveasinglemea-surementtoguesshowmanyiterationsareneededtoconvertthepassword.Wetestedourattackon80differentpasswords,spyingon15connectionsforeachpassword,yieldingatotalof1200traces.Withasinglemeasurement,wesuccessfullyguessedtheexactnum-berofiterationsfor93%ofthetraces.Weoutlinesomeconsistency11https://github.com/FreeRADIUS/freeradius-server/tree/v3.0.x/src/modules/rlm_eap/types/rlm_eap_pwd12https://www.openssl.org/13https://gitlab.inria.fr/msabt/attack-poc-freeradius1intcompute_password_element(pwd_session_t‚àósession,uint16_tgrp_num,charconst‚àópwd,intpwd_len,charconst‚àóid_server,charconst‚àóid_peer,uint32_t‚àótoken)2{3/‚àóInstantiationofsomevariabalesandcontexts...‚àó/45ctr=0;6while(1){7if(ctr>100)8gotofail;9ctr++;1011//pwd‚àíseed=H(token|peer‚àíid|server‚àíid|pwd|ctr)12H_Init(ctx);13H_Update(ctx,(uint8_t‚àó)token,sizeof(‚àótoken));14H_Update(ctx,(uint8_tconst‚àó)id_peer,id_peer_len);15H_Update(ctx,(uint8_tconst‚àó)id_server,id_server_len);16H_Update(ctx,(uint8_tconst‚àó)password,password_len);17H_Update(ctx,(uint8_t‚àó)&ctr,sizeof(ctr));18H_Final(ctx,pwe_digest);1920//prfbuf=KDF(pwe_digest,"EAP‚àípwdHuntingAndPecking",p)21BN_bin2bn(pwe_digest,SHA256_DIGEST_LENGTH,rnd);22if(eap_pwd_kdf(pwe_digest,SHA256_DIGEST_LENGTH,"EAP‚àípwdHuntingAndPecking",strlen("EAP‚àípwdHuntingAndPecking"),prfbuf,primebitlen)!=0)23gotofail;24BN_bin2bn(prfbuf,primebytelen,x_candidate);2526/‚àóHandleBNconversionissue...‚àó/27if(primebitlen%8)28BN_rshift(x_candidate,x_candidate,(8‚àí(primebitlen%8)));29if(BN_ucmp(x_candidate,session‚àí>prime)>=0)30continue;3132/‚àó33‚àóneedtounambiguouslyidentifythesolution,ifthereis34‚àóone...35‚àó/36is_odd=BN_is_odd(rnd)?1:0;3738/‚àó39‚àósolvethequadraticequation,ifit'snotsolvablethenwe40‚àódon'thaveapoint41‚àó/42if(!EC_POINT_set_compressed_coordinates_GFp(session‚àí>group,session‚àí>pwe,x_candidate,is_odd,NULL))43continue;4445//Checkifthepointisonthecurve46if(!EC_POINT_is_on_curve(session‚àí>group,session‚àí>pwe,NULL))47continue;4849if(BN_cmp(cofactor,BN_value_one())){50/‚àómakesurethepointisnotinasmallsub‚àígroup‚àó/51if(!EC_POINT_mul(session‚àí>group,session‚àí>pwe,NULL,session‚àí>pwe,cofactor,NULL))52continue;5354if(EC_POINT_is_at_infinity(session‚àí>group,session‚àí>pwe))55continue;56}57/‚àóifwegotherethenwehaveanewgenerator.‚àó/58break;59}6061/‚àóCleanallocatedmemoryandhandleerrors...‚àó/62}Listing5:FreeRADIUScodesample,extractedfromeap_pwd.c.