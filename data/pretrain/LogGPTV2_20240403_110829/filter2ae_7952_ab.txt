本题题目引入了四个 js 文件：
这个题目也比较有意思，额外给我们增加的这几个 js 文件，也就是说这几个文件就是这道题我们可能需要用的工具了。
Purify.js 是一个 XSS WAF，Popper.js是一个用于构造提示的组件，题目中也给了一个简单的使用 popper 的例子，Jqeury.js
与 Bootstrap 就不多说了。
首先我们来看我们的可控点，一个是 name 参数，另一个是 number 参数。然而 number 参数我们却只能使用一位，而 name
参数虽然任意长度可控，但是要经过 XSS WAF 过滤。虽然之前有一些利用 mxss bypass Domprify 的事例，但是都是在 2.0
左右的版本，这里的 2.0.7 又是最新的版本，应该不会是什么新的绕过，否则 number 参数与最后的
eval($(“number#number”).html()); 就没用了，并且还有一些其他工具我们没有用上。
所以我们应该能用到的就是通过最后一个eval($(“number#number”).html())进行 XSS ，而 number
我们可控的只有一位，我们可能得想一些其他办法添加 number 标签当中的内容。
我们可以看到 [popper
document](https://getbootstrap.com/docs/4.0/components/popovers)
结合题目给出的那个例子，我们可以发现貌似这个 popper.js 可以满足我们添加新内容条件，而在文档
[options](https://getbootstrap.com/docs/4.0/components/popovers/%23options)
部分，我们可以到有一些我们值得关注的参数：
Name | Type | Default | Description  
---|---|---|---  
container | string | element | false | false | Appends the popover to a
specific element. Example: container: ‘body’. This option is particularly
useful in that it allows you to position the popover in the flow of the
document near the triggering element – which will prevent the popover from
floating away from the triggering element during a window resize.  
content | string | element | function | ” | Default content value if data-content attribute isn’t present.If a function is given, it will be called with
its this reference set to the element that the popover is attached to.  
我们可以从文档知道，我们可以通过data-container来控制 popover 的位置，data-content来控制内容，于是我们是不是可以有一个想法把这个 popover 弄到 number 标签当中呢？于是我们可以尝试构造如下 payload ：
利用题目中原有的$(“#keanu”).popover(“show”);来触发我们的 popover
，我们暂且先注释掉题目当中的延迟关闭的功能以便于我们观察。
尽管 eval 执行出错，但是我们可以发现 number 标签当中确实被我们注入了一些其他的内容
    7hello
我们这样我们简化一下这个内容:7hello，我们可控的地方就是 7 与 hello ，就是
popper.js 实现的 popover
功能的代码，这个我们不需要关注，所以这样问题就变成了如何在$str=”$1$any”;eval($str);当中执行代码的问题了。
到这里其实答案已经呼之欲出了，既然是在eval当中，我们可以利用第一位为单引号，由于中间$any我们任意可控，后面再用一个单引号将变成字符串，//注释掉后面的即可，整个
payload 即是'’;alert();//。
所以我们需要这么构造一个元素：
即可实现 XSS，所以 payload:
    number='&name=
## WW3
        Meme Code
        /* Utils */
        const escape = (dirty) => unescape(dirty).replace(/[<>'"=]/g, '');
        const memeTemplate = (img, text) => {
            return (``+
                `${text}`)
        }
        const memeGen = (that, notify) => {
            if (text && img) {
                template = memeTemplate(img, text)
                if (notify) {
                    html = (`Meme created from ${DOMPurify.sanitize(text)}`)
                }
                setTimeout(_ => {
                    $('#status').remove()
                    notify ? ($('#notify').html(html)) : ''
                    $('#meme-code').text(template)
                }, 1000)
            }
        }
        /* Main */
        let notify = false;
        let text = new URL(location).searchParams.get('text')
        let img = new URL(location).searchParams.get('img')
        if (text && img) {
            document.write(
                ``+
                ``+
                `Creating meme... (${DOMPurify.sanitize(text)})`
            )
        } else {
            $('#meme-code').text(memeTemplate('https://i.imgur.com/PdbDexI.jpg', 'When you get that WW3 draft letter'))
        }
这个题目让我深深地体会到了 JavaScript 的恶意…先放个图，大家自行先体会一下，然后我们开始分析一下题目。
题目用比较多的代码做了一个获取图片以及输出自定义 text 的功能，仍旧是上题的四个外部 JS 文件，以及一大段 JS 代码。本题涉及到
JavaScript 比较多的黑魔法，我们一个个来看看。
审计代码，我们可以先看到题目定义了几个函数
    const escape = dirty => unescape(dirty).replace(/[<>'"=]/g, "");
用来过滤我们的 img 参数
    const memeTemplate = (img, text) => {
      return (
        `` +
        `${text}`
      );
    };
用来将我们传入的 img & text 参数构造一个 HTML 模版
    const memeGen = (that, notify) => {
      if (text && img) {
        template = memeTemplate(img, text);
        if (notify) {
          html = `Meme created from ${DOMPurify.sanitize(
            text
          )}`;
        }
        setTimeout(_ => {
          $("#status").remove();
          notify ? $("#notify").html(html) : "";
          $("#meme-code").text(template);
        }, 1000);
      }
    };
用来进行 DOM
元素操作等，看起来我们的目标就是setTimeout函数中通过$(“#notify”).html(html)来执行代码了，所以我们可能需要想办法把
notify 参数设置为 true。
## DOM Clobbering
首先我们先来看看几个比较有趣的例子：
根据 MDN 文档
The domain property of the [Document](https://developer.mozilla.org/en-US/docs/Web/API/Document) interface gets/sets the domain portion of the origin
of the current document, as used by the [same origin
policy](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy).
这里的document.domain并没有获取到我的域名zedd.vv，反而是获取到了 img 标签，然后我们可以直接输出 document
对象来看看是怎么回事
通过这个例子我们可以知道，可以通过一些标签的 id(name) 属性来控制 document(window) 通过 DOM API(BOM API)
获取到的某个东西
我查阅过相关资料，也询问过一些前端的专业人员，这里给我的解释是”document 和 window 两个变量，其实是 DOM 和 BOM
的规范，一般来说这两个不应该被当做普通的 JS 对象，但是规范与实现不同”，”都是因为上古遗留问题，现在哪有直接写 document.xxx
来获取元素的，TS 和 eslint 都会报错”。
这种操作具体可以参考 [dom-clobbering](http://www.thespanner.co.uk/2013/05/16/dom-clobbering/)，不算是新的攻击手法，但是有效，我们可以通过利用这种 Trick 来实现一些操作。
## setTimeout