node or a Y-node, among other things.
5.10.  A secure cryptographic hash of the entire (encrypted) setup package array (see the
next step), in the expected state upon reception from the previous node.
This hash makes sure that no node can add or manipulate data inside the package array as it is
being sent between the different nodes. If such a thing was possible, it would be an excellent way
for adversarial nodes to communicate with other conspiring nodes throughout the routing path.
5.11.  A secure cryptographic hash of the (decrypted) contents of the current setup
package.
This is the hash that makes it possible for each node, once the package array arrives, to find its
own package in the array. The receiving node attempts to decrypt each package in the array, and
tests to see if the decryption succeeded by checking whether this hash matches the decrypted
package contents.
The various contents of this package will be explained in more detail in the steps where they are
individually used. The most important thing to note here is that all these items will be securely
communicated to the individual recipients, in later steps. This step can principally be seen as a
summary of the contents.
6.  The anonymized node arranges all the encrypted setup packages from the previous step in
an array, in a completely randomized order, and sends off the array to the node at the
beginning of the sequence, along with the pre-generated ID for this connection (see the
contents of the setup package above).
Secure randomness in the ordering of the packages in the array is important to insure that no
information about the order of the different nodes in the path can be derived from the array, or
even from each individual node’s own position in the array.
7.  The following sub-procedure is then performed by the receiving Y-node, and will also be
repeated by each and every node in the ordered sequence, until the array again reaches the
anonymized node:
7.1.  
The node iterates through each encrypted package in the array, attempting to first
symmetrically decrypt it using the connection ID stated by the previous node for the
incoming connection, and then asymmetrically decrypt it with its own private key. It
will be able to know when it has found the right one by getting a correct hash (item
5.11 in the setup package specification above).
The initial symmetric decryption of each package is intended to prevent the possible weakness
which would occur if an attacker could share one common asymmetrical key (or a small set of
such keys) between many nodes being injected into the network, and subsequently be able to
detect the presence of any of these other nodes in any routing path where at least one of the
White Paper:
Generic, Decentralized, Unstoppable Anonymity: The Phantom Protocol
Author:
Magnus Bråding
Version: 0.7
2008-08-04
31(68)
attacker’s other nodes has also been selected for participation, simply by seeing the initial array
and decrypting multiple packages of it.
7.2.  
The node stores the contents of its own successfully decrypted package locally.
7.3.  
The node authenticates the previous node (i.e. the one it received the package array
from), by matching both the expected IP address (item 5.1 in the setup package
specification above) against its actual IP address, and the expected ID for the
incoming connection (item 5.4 in the setup package specification above) against the
ID that was actually stated by the previous node along with the setup package array.
Both things should always match under normal circumstances (possible exception
conditions will be discussed later).
In the event that this test fails, it can usually only mean that some node in the routing path has
tried to tamper with the process. In all such situations, the safest thing to do is to just stop and
silently let the incoming connection time out, permitting the anonymized node itself to be able to
respond to this timeout. The recommended and most secure course of action for the anonymized
node, when getting such a routing path creation timeout, is to completely discard the current
routing path, and start the process over with an entirely new set of nodes. As mentioned
previously, any attempt to allow nodes to communicate (e.g. error information) backwards
through the routing path tremendously increases the complexity, and, with it, the possibility for
many different kinds of attacks that would substantially reduce the security of the protocol and its
routing paths.
7.4.  
The node matches the hash of the entire setup package array (item 5.10 in the setup
package specification above) against a locally calculated hash of the array, and they
should always be equal under normal circumstances (possible exception conditions
will be discussed later).
This step is important in order to prevent any piggy-backing of information with the array, which
could otherwise be used by nodes controlled by an attacker to convey information to other
conspiring nodes located after it in the setup procedure path (most likely its own IP address, for
the enabling of subsequent arbitrary out-of-channel communication).
7.5.  
The node interprets the flags (item 5.9 in the setup package specification above),
thus seeing which role in the path building process it has been allotted.
7.6.  
The node makes a decision whether it is possible for it to take part in the path
building process (under normal circumstances the answer should be yes, which will
be assumed in this process summary, possible exception conditions will be
discussed later).
The only legitimate reason for “saying no” would probably be if the node in question is too heavily
loaded already. Otherwise nodes could easily be DoS attacked by opening too many paths
through them. On the other hand, a built-in option in the protocol to “say no” could encourage
“cheat clients”, who don’t share their bandwidth, but still use others’ bandwidth. Then again,
clients that really wanted to cheat could, of course, just disconnect any such requests completely,
so leaving out the option wouldn’t really be an efficient solution either. Either way, the “cheat
client” scenario is something of a dilemma, and should be considered further.
7.7.  
The node removes its own setup package from the array.
7.8.  
The node generates faked setup packages and inserts them into the array, according
to given instructions (item 5.7 in the setup package specification above).
The reason to have nodes create and insert fake packages into the array, is first that no node
should be able to derive any information about either its relative position in the array, based on
how many packages are left in the array at the time it reaches the node in question, or the total
size of the routing path. Second, it also counteracts the special case vulnerability of the first Y-
node in the routing path creation sequence trying to provide an entirely fake routing path back to
the anonymized node (despite not ever being able to know if its preceding node is really the
anonymized node or not, but still “taking a chance”).
White Paper:
Generic, Decentralized, Unstoppable Anonymity: The Phantom Protocol
Author:
Magnus Bråding
Version: 0.7
2008-08-04
32(68)
7.9.  
The node connects to the given next node, first of all validating its identity by
matching its expected communication certificate (item 5.6 in the setup package
specification above) against the SSL certificate used by the responding node,
immediately terminating the connection if the two don’t match. They should always
be equal under normal circumstances (possible exception conditions will be
discussed later).
The matching of certificates makes certain that no other computer has acquired the IP address of
the intended node. This could happen for example with home broadband users that share the
same IP address pool through dynamic address allocation (DHCP).
7.10.  The array, in its new state, is forwarded to the next node in the sequence (item 5.2 in
the setup package specification above), along with the given ID for this connection
(item 5.5 in the setup package specification above).
7.11.  The next node that receives the array will repeat this procedure itself, and so on, until
the array has reached the last (Y-)node in the sequence, which will have its next
node set to be the original anonymized node (without for that matter knowing
anything about this special circumstance itself), thus closing the circle.
8.  If all goes well, the setup package array will traverse the entire sequence of nodes, and
reach the anonymized node with a connection from the Y-node at the opposite end of the
sequence, i.e. the end of the sequence that the setup package array was not sent into to
begin with. Provided that the incoming data passes all authenticity controls (which will be
discussed in more detail later), this completes the first round of the routing path setup
procedure, and the anonymized node now knows that all the selected nodes accepted the
routing path participation request and are standing by for the second round of the procedure,
which begins with the next step.
The anonymized node can easily confirm that no additional data has been injected into the array,
and also that no data is missing, based on its total knowledge of what to expect and the
checksums. The simple fact that the array came back, and from the correct IP address at that, is
itself a cryptographic proof that it traversed the intended path, and only the intended path, since
unauthorized access to the full set of information that would be required to fake this could only be
acquired by breaking the strong encryption protecting the setup package array.
9.  The anonymized node creates a new array of setup packages, quite similar to the first one,
but with the following additions (in addition to a new random array order):
9.1.  
A first round success flag is now included in the package.
9.2.  
An updated set of seeds and instructions for manipulating the package array before
forwarding it (equivalent to item 5.7 in the setup package specification above).
•
For (all) X-nodes only:
9.3.  
An updated IP address of the expected new previous node in the sequence
(equivalent to item 5.1 in the setup package specification above).
9.4.  
An updated IP address/port for the next node in the sequence (equivalent to item 5.2
in the setup package specification above).
9.5.  
A random 128-bit ID, associated with the connection from the new previous node
(equivalent to item 5.4 in the setup package specification above).
9.6.  
A random 128-bit ID, associated with the connection to the new next node
(equivalent to item 5.5 in the setup package specification above).
•
For the terminating X-node only, if the path is an entry path:
9.7.  
The AP address that the entry path belongs to.
9.8.  
A ready-made routing table entry, signed with the private key belonging to the routing
certificate of the AP address owner (more info about this in the details later).
White Paper:
Generic, Decentralized, Unstoppable Anonymity: The Phantom Protocol
Author:
Magnus Bråding
Version: 0.7
2008-08-04
33(68)
The various contents of this package will be explained in each individual step where they are
used. The important thing to note at this point is that all these items will be securely
communicated to the individual recipients, in later steps. This step can principally be seen as a
summary of the contents.
10.  The anonymized node sends away the new array of setup packages in the same manner as
the first one (and in the same direction too).
11.  The following sub-procedure is then performed by each and every node in the ordered
sequence, until the array again reaches the anonymized node:
11.1.  The node locates, decrypts and verifies its own package in the received array, and
checks the integrity of the entire array, using the same methods as in the first round.
11.2.  The node now also validates the signature of the package, using the routing path
construction certificate received in the package from the first round (item 5.3 in the
setup package specification above).
11.3.  The node confirms that the success flag is set in the package (item 9.1 in the setup
package specification above).
11.4.  The node modifies the package array in the same way it did in step 7.7 + 7.8 above,
only now using the updated seeds and instructions (item 9.2 in the setup package
specification above).
•
For Y-nodes only:
11.5.  The Y-node forwards the array, in its new state, to the next node in the sequence.
11.6.  The Y-node disconnects its forward connection, and has thus fully completed its
participation in the routing path building operation, and discards all information
related to it, forgets all about it, and is back in the exact state it was before it was
contacted to participate in the routing path building operation to begin with.
•
For (all) X-nodes only:
11.7.  The X-node checks to see if the updated expected IP address of the previous node
(item 9.3 in the setup package specification above) is the same as the IP address of
the existing previous node. Under normal circumstances it should never be the same,
and in this case the X-node will halt and wait for an incoming connection from the
expected IP address (item 9.3 in the setup package specification above) also having
the right ID (item 9.5 in the setup package specification above).
11.8.  When a matching incoming connection is established to the X-node (i.e. from the X-
node before it), all the usual array transfer, verification and modification procedures
are performed.
11.9.  The X-node forwards the array, in its new state, to the next node in the sequence,
still being connected from the first round.
11.10.  The X-node then checks to see if the updated expected IP address and port number
of the next node (item 9.4 in the setup package specification above) is the same as
the IP address and port of the currently connected next node. Under normal
circumstances it should never be the same, and in this case the X-node will
disconnect its current forward connection, and attempt to create a new forward
connection to the updated IP address and port for the stated next node (item 9.4 in
the setup package specification above) also using the updated ID (item 9.6 in the
setup package specification above) for this connection. Several connection attempts
might be needed at this point, since the target X-node might not have started
listening for this incoming connection yet.
11.11.  The X-node forwards the array, in its new state, to this new next node in the
sequence too.
White Paper:
Generic, Decentralized, Unstoppable Anonymity: The Phantom Protocol
Author:
Magnus Bråding
Version: 0.7
2008-08-04
34(68)
11.12.  The intermediate Y-node between the two adjacent X-nodes has now been fully
disconnected, and the final state of the routing path has been established between
the current X-node and the one before it in the sequence.
11.13.  The X-node now finishes the procedure by generating its unique set of stream
encryption keys, according to the seeds and parameters given in the initial setup
package (item 5.8 in the setup package specification above). This set of keys will be
used at a later time, when establishing routing tunnels over the routing path.
•
For the terminating X-node only, if the path is an entry path:
11.14.  The terminating X-node expects the previous (Y-)node to disconnect the connection
immediately after having received the package array from it. If the expected IP
address (item 9.3 in the setup package specification above) and the updated ID (item
9.5 in the setup package specification above) are empty (all zero), the terminating X-
node also doesn’t expect any new incoming connection from a previous node, since
it is located at the end of the routing path, and in this case only has the multiple Y-
nodes in front of it (this will only happen in half the cases, i.e. where the randomly
chosen beginning of the node sequence is the one with the multiple Y-nodes).
11.15.  If the created routing path is an entry path, after having done everything else that a
normal intermediate X-node is supposed to do, the terminating X-node proceeds to
submit the new pre-signed routing table entry (item 9.8 in the setup package
specification above) for the current routing path to the AP address-indexed routing
table in the global network database, for the associated AP address (item 9.7 in the
setup package specification above). The entry path is now officially announced, and
any user on the anonymous network can look it up in the global network database,
and use it to establish an anonymized connection (i.e. anonymized for the node that
created the routing path) to the anonymized node.
The global network database will only allow updates of pre-existing routing table entries if the
update is signed with the same key as the pre-existing entry, i.e. the AP address specific routing
key of the anonymized node that registered the AP address to begin with. This prevents DoS-
attacks in the form of injection of bad routing information from third-party sources into the global
network database.
11.16.  If the created routing path is not an entry path, it will skip the previous step (11.15),
and will instead be waiting for requests for outgoing connections from the
anonymized node that owns the routing path (thus being located at its other end).
This will be discussed further in the section about establishment of routing tunnels
below.
12.  If all goes well, the second setup package array will traverse the entire sequence of nodes,
just like the first one, and reach the anonymized node with a connection from the Y-node
(and subsequently its preceding X-node) at the end of the sequence, where it will be
checked for validity. This completes the second half of the routing path setup procedure, and
the routing path is now successfully and securely set up, ready for immediate use.
This concludes the low-level details for the secure establishment of routing paths.
White Paper:
Generic, Decentralized, Unstoppable Anonymity: The Phantom Protocol
Author:
Magnus Bråding
Version: 0.7
2008-08-04
35(68)
7.2.  Routing Tunnels
As mentioned previously, the establishment of routing tunnels over pre-existing routing paths is a
key process of the protocol, and an important part in providing its anonymity. As can be