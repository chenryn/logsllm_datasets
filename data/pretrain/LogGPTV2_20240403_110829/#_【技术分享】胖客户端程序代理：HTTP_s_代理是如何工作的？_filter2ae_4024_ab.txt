8、代理通知关闭连接（使用`FIN`）。
9、浏览器和代理之间的连接关闭。
**3.1.1 为什么不使用`Host`请求头（Host Header）？**
如果您已经进行过一些HTTP安全测试（或看过一些HTTP请求），那么您可能会问：“为什么不使用`Host`请求头？”这是一个非常好的问题，我也存在这个疑问。作为代理，我们能够看到`Host`请求头，为什么我们需要使用`absolute-URI`？
答案是为了向后兼容`HTTP/1.0`代理。在RFC7230的*[5.4节
**Host**请求头](https://tools.ietf.org/html/rfc7230#section-5.4)* 中有暗示：
即使请求目标是`absolute-form`的，客户端也**必须**在`HTTP/1.1`请求中发送`Host`请求头字段，因为这样允许Host信息通过旧的`HTTP/1.0`代理进行转发，这类旧的代理可能没有实现`Host`请求头。
后来，它指示代理依赖于`absolute-URI`并忽略`Host`请求头。如果`Host`请求头与`URI`不同，那么代理必须生成正确的`Header`并发送请求。
**3.2 转发代理和HTTPs**
但是HTTP(s)请求如何通过代理进行转发呢？代理是如何工作的？
让我们再次进入转发代理的视角。我们不做TLS握手，只是转发数据包。用户在浏览器中键入https://www.google.com后，会创建一个与我们的TCP连接，然后启动TLS握手。[
**RFC5246的第7.4.1.2**](https://tools.ietf.org/html/rfc5246#section-7.4.1.2)节对TLS握手的第一步`ClientHello`进行了讨论（[
**RFC5246**](https://tools.ietf.org/html/rfc5246)本质上讨论的是TLS 1.2）。
到现在为止，我确实没有读过TLS 1.2的RFC，我怀疑你也不需要看。作为代理，我们将看到`ClientHello`报文如下：
但是我们作为代理，我们应该知道这些数据是什么意思。有些工具应该能够为我们做到这一点。这里我使用Netmon，它将`ClientHello`数据包解码如下：
现在，我们要决定往哪里发送 **ClientHello** 。通过以上信息，我们如何找到目标端点？
其实，答案是： **臣妾做不到啊！**
**3.2.1 CONNECT请求**
简单来说，浏览器需要告诉代理向哪里转发请求，而这一过程应该在TLS握手之前发生（显然在TCP连接建立之后）。这里就需要`CONNECT`方法登场了。
在TLS握手之前，浏览器会将目标端点的域名随`CONNECT`请求发送至代理程序。此请求包含目标端点和端口，形式为`HOST:PORT`。对请求目标而言，这叫做`authority-form`格式。我们可以在*[RFC7230的第5.3.3节 **authority-form**](https://tools.ietf.org/html/rfc7230#section-5.3.3)*中看到相关描述：
请求目标的`authority-form`形式仅用于`CONNECT`请求
…
客户端**必须**只发送目标URI的授权部分（不包括任何用户信息及其“@”分隔符）作为请求目标。例如，
CONNECT www.example.com:80 HTTP/1.1
在RFC7231 – HTTP/1.1：语义和内容 第4.3.6节 – CONNECT中对CONNECT方法进行了讨论：
CONNECT方法请求接收方建立一条连接至由请求目标标识的、目标原始服务器的隧道，如果成功，则将其行为限制在对两个方向上的分组数据的盲目转发，直到隧道关闭。
**客户端说明如下：**
发送`CONNECT`请求的客户端**必须**发送请求目标的授权形式。
…
例如，
CONNECT server.example.com:80 HTTP/1.1
Host: server.example.com:80
代理应该建立到目标站点的连接，如果成功则响应`2xx`(成功)
。在阅读RFC之前，我认为代理会立即发送`2xx`响应，然后创建到目标站点的连接。但我错了，代理只能在连接到端点时进行回复，否则我们如何告诉应用程序无法建立隧道。应用程序在收到`2xx`响应时启动TLS握手。
**转发代理程序代理HTTPs的流程如下：**
1、浏览器创建与转发代理的TCP连接。
2、浏览器将`CONNECT google.com:443`请求发送给代理。
3、代理尝试连接到`google.com:443`。
4、如果成功，代理返回响应`200 connection established`。
5、现在浏览器知道代理可以和目标端点建立连接并启动TLS握手。
6、转发代理只是传递请求，直到一方关闭连接，然后关闭其他连接。
**3.3 Burp和HTTPs**
Burp（或任何TLS终止代理）的工作方式与上述情况类似。唯一的区别是，Burp通过与浏览器进行TLS握手然后成为连接的中间人，从而能够得到明文的请求数据。默认情况下，Burp使用`CONNECT`请求中的目标端点名称自动生成证书（由其根CA签名）并将其呈现给客户端。
**3.3.1 更正 – 2016年7月30日**
注意：下图是错误的！！！。正如朋友们在评论中所说的那样，从Burp到服务器有两个TCP连接。我的想法是，Burp首先检查与服务器的连接，然后返回`200`响应并根据RFC进行操作。再建立与服务器的新连接，然后将两侧的数据进行转发。
注意：上图有误！上图有误！上图有误！
实际情况是，Burp在`CONNECT`请求之后没有建立与目标端点初始TCP连接，只是仅仅向浏览器返回`200`响应。我使用Microsoft
Message
Analyzer（MMA）捕获流量进行分析。它使我能够捕获从浏览器到Burp的本地流量以及从Burp到Google.com的流量。下图截取了MMA所捕获的部分流量，其中展示了TLS握手过程：
如上图所示，上边的红框中是浏览器和Burp之间的本地流量，下边的绿框中是Burp和Google.com之间的流量。数据包是按时间先后顺序排列的。正如你所看到的，Burp接收到`CONNECT`请求时并不会进行连接检查。它继续进行TLS握手，然后只有在收到第一个请求（在这种情况下是GET请求）后才连接Google.com。所以实际上**正确的**流程图应该是这样的：
**3.3.2 Burp的隐形模式（Invisible Mode）**
这一内容我可能说了[ **上百次**](https://parsiya.net/blog/2016-07-28-thick-client-proxying
---part-6-how-https-proxies-work/#2-2-1-burp-s-invisible-proxying)了。我们知道RFC阻止代理使用`Host`头来重新路由流量。现在，如果我们有一个使用HTTP但不是`proxy-aware`的客户端（或者我们已经将流量重定向到Burp而不使用代理设置），那么我们可以开启Burp的隐形模式，该模式使用`Host`头来重定向流量。这是HTTP的一个优点，它使得HTTP协议比自定义协议（例如包装在TLS中的二进制blob）更容易进行代理。
**4\. Cloudfront和服务器名称指示（Server Name Indication）**
如果您捕获到`ClientHello`请求，以查看代理流程（或者一般情况下），您会注意到您的请求可能和前述的不一样。你可以在`ClienHello`请求报文中看到目标服务器的名字。实际上，如果这里没有服务器名称，那你就很难在其他地方看到它。对于我图中的例子来说，我不得不通过IP地址导航到一个网站。
那么服务器名称是什么？这是一个称为`Server Name Indication`或`SNI`的TLS扩展。我们可以在*[RFC6066的第3节
Server Name Indication](https://tools.ietf.org/html/rfc6066#page-6)*中看到相关描述：
客户端可能希望提供此信息，以实现与在单个底层网络地址上托管多个“虚拟主机”的服务器的安全连接。
我将以我的网站为例。`Parsiya.net`是使用[Hugo](https://gohugo.io/)生成的静态网站。它托管在`Amazon S3
bucket`中。S3不支持通过TLS（或者你也可以称为HTTPs）访问静态托管网站（它支持通过TLS访问单个文件）。为了获得TLS，我在前端使用了Cloudfront。Cloudfront是Amazon的内容分发网络（CDN），并支持自定义TLS证书。如果您使用Cloudfront，您可以免费获得网站的TLS证书。在这种情况下，Cloudfront充当了许多资源的目标端点。
浏览器应该有一种方式告诉Cloudfront所要连接的目标端点，以便Cloudfront可以获取正确的TLS证书并将其呈现给浏览器。SNI能够实现这一功能。典型的发送至`parsiya.net`的`ClientHello`请求如下图所示（其中SNI已解码）：
现在我们可以看看Cloudfront是如何工作的（简化版）：
在这种情况下，Cloudfront的作用就像是一个TLS终止代理。一方面，它有HTTPs请求（浏览器 
Cloudfront）；另一方面，它也含有HTTP请求（Cloudfront 
S3）。这里使用了SNI，而不是`CONNECT`请求。这是能够说得通的，因为Cloudfront并不是浏览器的代理。
**5\. 代理感知型客户端**
现在我可以讨论一下代理感知型客户端（proxy-aware clients）。这类客户端程序我们已经见过了，并且也知道它们的工作原理。
代理感知型客户端知道自己何时连接到代理程序。如果发现连接到了代理程序，会执行以下操作：
在HTTP(s)请求中包含`absolute-URI`并发送给代理程序。
在TLS握手之前发送`CONNECT`请求，以便将目标端点告知代理程序。
通常代理感知型客户端具有代理设置功能，或遵循某些操作系统中特定客户端程序的代理设置（例如，IE代理设置）。一旦设置了代理，会通知示浏览器已连接到代理，浏览器则会执行相应地连接行为。几乎所有的浏览器都是代理感知型的客户端。
**6\. 结论及未来计划**
以上是所有内容。希望本文对大家有所帮助。现在我们知道了代理程序的内部工作原理。以后如果遇到客户端设置Burp代理后出现异常情况，可以尝试捕获客户端和Burp之间的本地流量进行分析。注意Burp的Alert标签页中的异常信息，通常TLS问题也会出现在这里。
我下一步的计划是讨论一下流量重定向技术。
和往常一样，如果您有任何问题/意见/反馈，您知道在哪里找到我。