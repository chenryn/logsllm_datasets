# m.lastindex: 3
# m.lastgroup: sign
第 7 章 Python 中的正则表达式教程 | 59
# m.group(1,2): ('hello', 'world')
# m.groups(): ('hello', 'world', '!')
# m.groupdict(): {'sign': '!'}
# m.start(2): 6
# m.end(2): 11
# m.span(2): (6, 11)
# m.expand(r'\2 \1\3'): world hello!
####
Pattern
Pattern 对象是一个编译好的正则表达式，通过 Pattern 提供的一系列方法可以对文本进行匹配查找。
Pattern 不能直接实例化，必须使用 re.compile()进行构造，也就是 re.compile()返回的对象。
Pattern 提供了几个可读属性用于获取表达式的相关信息：
- pattern: 编译时用的表达式字符串。
- flags: 编译时用的匹配模式。数字形式。
- groups: 表达式中分组的数量。
- groupindex: 以表达式中有别名的组的别名为键、以该组对应的编号为值的字典，没有别名的组不包含在内。
可以用下面这个例子查看 pattern 的属性：
# -- coding: utf-8 --
#一个简单的pattern实例
import re
p = re.compile(r'(\w+) (\w+)(?P.*)', re.DOTALL)
print "p.pattern:", p.pattern
print "p.flags:", p.flags
print "p.groups:", p.groups
print "p.groupindex:", p.groupindex
### output ###
# p.pattern: (\w+) (\w+)(?P.*)
第 7 章 Python 中的正则表达式教程 | 60
# p.flags: 16
# p.groups: 3
# p.groupindex: {'sign': 3}
下面重点介绍一下 pattern 的实例方法及其使用。
#####
match
match(string[, pos[, endpos]]) | re.match(pattern, string[, flags])：
这个方法将从 string 的 pos 下标处起尝试匹配 pattern；如果 pattern 结束时仍可匹配，则返回一个 Match 对象；如果匹配过程中 pattern 无法匹配，或者匹配未结束就已到达 endpos，则返回 None。pos 和 endpos 的默认值分别为 0 和 len(string)；re.match()无法指定这两个参数，参数 flags 用于编译 pattern时指定匹配模式。
注意：这个方法并不是完全匹配。当 pattern 结束时若 string 还有剩余字符，仍然视为成功。
想要完全匹配，可以在表达式末尾加上边界匹配符'$'。
下面来看一个 Match 的简单案例：
# encoding: UTF-8
import re
# 将正则表达式编译成Pattern对象
pattern = re.compile(r'hello')
# 使用Pattern匹配文本，获得匹配结果，无法匹配时将返回None
match = pattern.match('hello world!')
if match:
# 使用Match获得分组信息
print match.group()
### 输出 ###
# hello
#####
search
第 7 章 Python 中的正则表达式教程 | 61
search(string[, pos[, endpos]]) | re.search(pattern, string[, flags]):
这个方法用于查找字符串中可以匹配成功的子串。从 string 的 pos 下标处起尝试匹配 pattern，如果 pattern 结束时仍可匹配，则返回一个 Match 对象；若无法匹配，则将 pos 加 1 后重新尝试匹配；直到 pos=endpos 时仍无法匹配则返回 None。pos 和 endpos 的默认值分别为 0 和 len(string))；
re.search()无法指定这两个参数，参数 flags 用于编译 pattern 时指定匹配模式。那么它和 match 有什么区别呢？match()函数只检测 re 是不是在 string 的开始位置匹配，search()会扫描整个 string 查找匹配，
match（）只有在 0 位置匹配成功的话才有返回，如果不是开始位置匹配成功的话，match() 就返回 none。
例如：
print(re.match(‘super’, ‘superstition’).span())
会返回(0, 5)
print(re.match(‘super’, ‘insuperable’))
则返回 None
search()会扫描整个字符串并返回第一个成功的匹配
例如：
print(re.search(‘super’, ‘superstition’).span())
返回(0, 5)
print(re.search(‘super’, ‘insuperable’).span())
返回(2, 7)
看一个 search 的实例：
# -- coding: utf-8 --
#一个简单的search实例
import re
# 将正则表达式编译成Pattern对象
pattern = re.compile(r'world')
第 7 章 Python 中的正则表达式教程 | 62
# 使用search()查找匹配的子串，不存在能匹配的子串时将返回None
# 这个例子中使用match()无法成功匹配
match = pattern.search('hello world!')
if match:
# 使用Match获得分组信息
print match.group()
### 输出 ###
# world
#####
split
split(string[, maxsplit]) | re.split(pattern, string[, maxsplit]):
按照能够匹配的子串将 string 分割后返回列表。maxsplit 用于指定最大分割次数，不指定将全部分割。
import re
p = re.compile(r'\d+')
print p.split('one1two2three3four4')
### output ###
# ['one', 'two', 'three', 'four', '']
#####
findall
findall(string[, pos[, endpos]]) | re.findall(pattern, string[, flags]):
搜索 string，以列表形式返回全部能匹配的子串。
import re
p = re.compile(r'\d+')
print p.findall('one1two2three3four4')
第 7 章 Python 中的正则表达式教程 | 63
### output ###
# ['1', '2', '3', '4']
#####
finditer
finditer(string[, pos[, endpos]]) | re.finditer(pattern, string[, flags]):
搜索 string，返回一个顺序访问每一个匹配结果（Match 对象）的迭代器。
import re
p = re.compile(r'\d+')
for m in p.finditer('one1two2three3four4'):
print m.group(),
### output ###
# 1 2 3 4
#####
sub
sub(repl, string[, count]) | re.sub(pattern, repl, string[, count]):
使用 repl 替换 string 中每一个匹配的子串后返回替换后的字符串。 当 repl 是一个字符串时，可以使用\id 或\g、\g引用分组，但不能使用编号 0。 当 repl 是一个方法时，这个方法应当只接受一个参数（Match 对象），并返回一个字符串用于替换（返回的字符串中不能再引用分组）。count 用于指定最多替换次数，不指定时全部替换。
import re
p = re.compile(r'(\w+) (\w+)')
s = 'i say, hello world!'
print p.sub(r'\2 \1', s)
def func(m):
return m.group(1).title() + ' ' + m.group(2).title()
print p.sub(func, s)
### output ###
第 7 章 Python 中的正则表达式教程 | 64
# say i, world hello!
# I Say, Hello World!
#####
subn
subn(repl, string[, count]) |re.sub(pattern, repl, string[, count]):
返回 (sub(repl, string[, count])，替换次数)。
import re
p = re.compile(r'(\w+) (\w+)')
s = 'i say, hello world!'
print p.subn(r'\2 \1', s)
def func(m):
return m.group(1).title() + ' ' + m.group(2).title()
print p.subn(func, s)
### output ###
# ('say i, world hello!', 2)
# ('I Say, Hello World!', 2)
```
88
糗糗事事百百科科的的网网络络爬爬虫虫（（vv00..33））源源码码及及解解析析((简简化化更更
新新))
第 8 章 糗事百科的网络爬虫（v0.3）源码及解析(简化更新) | 66
##
Q&A：
##
为什么有段时间显示糗事百科不可用？
答：前段时间因为糗事百科添加了 Header 的检验，导致无法爬取，需要在代码中模拟Header。现在代码已经
作了修改，可以正常使用。
##
为什么需要单独新建个线程？
答：基本流程是这样的：爬虫在后台新起一个线程，一直爬取两页的糗事百科，如果剩余不足两页，则再爬一
页。用户按下回车只是从库存中获取最新的内容，而不是上网获取，所以浏览更顺畅。也可以把加载放在主线
程，不过这样会导致爬取过程中等待时间过长的问题。
##
项目内容：
用 Python 写的糗事百科的网络爬虫。
##
使用方法：
新建一个 Bug.py 文件，然后将代码复制到里面后，双击运行。
##
程序功能：
第 8 章 糗事百科的网络爬虫（v0.3）源码及解析(简化更新) | 67
在命令提示行中浏览糗事百科。
##
原理解释：
首先，先浏览一下糗事百科的主页：http://www.qiushibaike.com/hot/page/1可以看出来，链接中 page/后面
的数字就是对应的页码，记住这一点为以后的编写做准备。 然后，右击查看页面源码：
观察发现，每一个段子都用 div 标记，其中 class 必为 content，title 是发帖时间，我们只需要用正则表达式将
其“扣”出来就可以了。 明白了原理之后，剩下的就是正则表达式的内容了，可以参照这篇博文：http://blog.c
sdn.net/wxg694175346/article/details/8929576
##
运行效果：
第 8 章 糗事百科的网络爬虫（v0.3）源码及解析(简化更新) | 68
# -*- coding: utf-8 -*-
import urllib2
import urllib
import re
import thread
import time
#----------- 加载处理糗事百科 -----------
class Spider_Model:
def __init__(self):
self.page = 1
self.pages = []
self.enable = False
# 将所有的段子都扣出来，添加到列表中并且返回列表
def GetPage(self,page):
第 8 章 糗事百科的网络爬虫（v0.3）源码及解析(简化更新) | 69
myUrl = "http://m.qiushibaike.com/hot/page/" + page
user_agent = 'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)'
headers = { 'User-Agent' : user_agent }
req = urllib2.Request(myUrl, headers = headers)
myResponse = urllib2.urlopen(req)
myPage = myResponse.read()
#encode的作用是将unicode编码转换成其他编码的字符串
#decode的作用是将其他编码的字符串转换成unicode编码
unicodePage = myPage.decode("utf-8")
# 找出所有class="content"的div标记
#re.S是任意匹配模式，也就是.可以匹配换行符
myItems = re.findall('(.*?)',unicodePage,re.S)
items = []
for item in myItems:
# item 中第一个是div的标题，也就是时间
# item 中第二个是div的内容，也就是内容
items.append([item[0].replace("\n",""),item[1].replace("\n","")])