title:Scalable Security Models for Assessing Effectiveness of Moving Target
Defenses
author:Jin B. Hong and
Dong Seong Kim
2014 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
Scalable Security Models for Assessing Effectiveness of Moving Target Defenses
Computer Science and Software Engineering Dept.
Computer Science and Software Engineering Dept.
Jin B. Hong
Dong Seong Kim
University of Canterbury
Christchurch, New Zealand
PI:EMAIL
University of Canterbury
Christchurch, New Zealand
PI:EMAIL
Abstract—Moving Target Defense (MTD) changes the attack
surface of a system that confuses intruders to thwart attacks.
Various MTD techniques are developed to enhance the security
of a networked system, but the effectiveness of these techniques
is not well assessed. Security models (e.g., Attack Graphs
(AGs)) provide formal methods of assessing security, but
modeling the MTD techniques in security models has not been
studied. In this paper, we incorporate the MTD techniques in
security modeling and analysis using a scalable security model,
namely Hierarchical Attack Representation Models (HARMs),
to assess the effectiveness of the MTD techniques. In addition,
we use importance measures (IMs) for scalable security analysis
and deploying the MTD techniques in an effective manner. The
performance comparison between the HARM and the AG is
given. Also, we compare the performance of using the IMs and
the exhaustive search method in simulations.
Keywords-Attack Representation Model, Importance Mea-
sures, Moving Target Defense, Security Analysis, Security
Modeling Techniques
I. INTRODUCTION
Moving Target Defense (MTD) is a new paradigm of en-
hancing security by continuously changing the attack surface
of a system. The attack surface represents different attack
vectors that attackers can exploit in a networked system [1].
So it is important to reduce and change the attack surface
frequently to thwart attacks. The MTD aims to enhance
security by altering the pathways, confusing attacks that
relies on network components identiﬁcations, and changing
the type of network components continuously or when the
attack is detected. The work [2]–[6] showed that using
the MTD techniques may enhance the security of systems.
MTDs have been applied in many application domains such
as dynamic networks [7], wireless sensor networks [8], and
adaptive execution environment in a virtualized system [9].
We classify the MTD techniques into three major cate-
gories: (i) shufﬂe, (ii) diversity, and (iii) redundancy, and
they can be applied in a combination. Shufﬂe is a method
to rearrange the system setting at various layers [10]–[16].
Diversity is a method that provides equivalent functions, but
different implementations (e.g., operating systems, variant
input and interpreters, variant software stack components)
[17]–[24]. Redundancy is a method that provides multiple
replica of services or nodes to make multiples of the same
data, service, or a node [25]. In this paper, we only consider
speciﬁed attacks (e.g., when the attacker wants to penetrate
through the networked system to gain secrets), so only
shufﬂe and diversity are evaluated.
The MTD techniques change the network environment
(e.g., logical network topology) that may cause confusion
to attackers, as well as to system administrators about
how these changes affect the security of the system. The
effectiveness of the MTD techniques may vary depending on
how they are implemented in the system. Those changes can
be studied in a well formed model so their effectiveness can
be computed and compared. However, existing studies of the
MTD techniques do not rely on any formal security models.
Previous work proved their effectiveness with simple metrics
that are not comparable [2], [3], [7]. Our proposed idea is
to use attack representation models (ARMs) (e.g., Attack
Graphs (AGs) [26], Attack Trees (ATs) [27]), for assessing
the effectiveness of the MTD techniques.
There are mainly two types of ARMs, which are graph-
based [28]–[30] and tree-based ARMs [31]–[33]. ARMs can
be used to assess the security of a system using various secu-
rity metrics (e.g., impact, risk, return on investment/attack).
System administrators can determine how secure the net-
worked system is and where to deploy the network hardening
techniques using the ARMs [33]–[35], but valuable nodes
(or data) are constantly changing in a networked system due
to changing trends of demand and supply (e.g., launching a
new web service). So one may focus on hardening the attack
paths instead of the target nodes that changes frequently.
However, the number of attack paths increases exponentially
in the ARMs as the number of nodes grows [36]. Therefore,
it becomes infeasible to assess the security of a large sized
networked system in practice.
To cope with this problem, a hierarchical attack represen-
tation model (HARM) is used for security analysis [37]. The
HARM is more scalable than the AG, because it models the
reachability of nodes (e.g., hosts) in the networked system
separately from the vulnerability information of each node.
We use the HARM because: (i) the HARM can adopt any
ARMs in its layers (e.g., an AG in the upper layer and an AT
in the lower layer), and (ii) it is more adaptable to changes
in the networked system than single layer AGs (i.e., an AG).
978-1-4799-2233-8/14 $31.00 © 2014 IEEE
DOI 10.1109/DSN.2014.54
515
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:25:31 UTC from IEEE Xplore.  Restrictions apply. 
A comparative study in [37] showed that the HARM is more
scalable and adaptable than the AG. However, the HARM
still has a scalability problem when the number of nodes
becomes large. To address this problem, we propose to use
importance measures (IMs) [38], [39] to determine how we
apply the MTD techniques in the networked system. The
performance comparison of using the IMs and the exhaustive
search (ES) method is conducted via simulations.
To the best of our knowledge, this is the ﬁrst work to
evaluate the effectiveness of the MTD techniques via the
ARMs for a comparative security analysis. Our contributions
are:
• Incorporating and analyzing the effectiveness of the
MTD techniques using the HARM;
• Applying the MTD techniques to secure attack paths;
• Using the IMs to deploy the MTD techniques in scal-
able and effective manners.
The rest of the paper is organized as follows. In Section II,
modeling methods for incorporating the MTD techniques in
the HARM are presented. The comparison between the ES
method and using the IMs to deploy the MTD techniques
is given in Section III. Discussion and limitations of the
research are presented in Section IV. In Section V, related
work is presented, and Section VI concludes this paper.
II. INCORPORATING THE MTD IN THE HARM
To analyze and compare the security, one can use the
ARMs to analyze how secure the networked system is.
Security metrics (e.g., probability of attack success, impact,
risk, return on attack/investment) are useful for system
administrators to understand the security posture of a system
[1], [40]. It allows them to understand which changes or
network hardening techniques can improve the security more
effectively by comparing these metrics.
A. Network and system settings
We assume that even a ﬁxed networked system can
have changes in the ARM by various reasons, such as
patching vulnerabilities, topology changes and intended sys-
tem updates. We use a virtualized system as an example
shown in Figure 1. We assume that the system hardware
is trusted and checked using hardware-based cryptographic
veriﬁcation, such as a trusted platform module, and the logic
of operating-system-level virtualization is trusted [14]. In the
attack scenario, we assume the attacker exploits vulnerabili-
ties of operating systems (OSs) for simplicity in the example,
but other vulnerabilities (e.g., application vulnerabilities) can
be also modelled. Components of the virtualized system
can be changed frequently due to security matters as well
as Virtual Machine (VM) creation/decease/migration. We
use the virtualized system as a basis example for modern
networked systems, such as virtualized data centers and a
cloud computing environment which will be introduced in
Section III-C.
Internet
Host2
Switch2
A Virtualized system
Storage
Router
Switch1
Host1
Firewall
Switch3
Host3
(a) Conﬁguration and Connection of a Virtualized System
Host2
VM3
VM1
VM2
Host1
VM5
Host3
Storage
VM4
(b) Logical Connection of the Virtualized System
Figure 1. An example of a Virtualized System
We deﬁne the following system constraints for the virtu-
alized system depicted in Figure 1. We use the assumptions
and conﬁgurations for simplicity, but these can be released.
Assumptions for the virtualized system are:
• All VMs remain active (up and running) at all times.
• Each host (i.e., a node) can hold up to two VMs.
• Host3 cannot hold V M1 or V M2, because we assume
that V M1 and V M2 are the entry points to the system.
• V M5 remains on Host3 (i.e., cannot be removed) to
connect to the storage without delay.
The assignment of different OSs to VMs is shown in Table
I, and we deﬁne logical connections (e.g., via IP addresses)
of VMs (it can be obtained similarly as in [41]) as follow:
• Any VMs on Host1 can connect to any VMs on Host2,
and one VM (whichever stayed longer) can connect to
any VMs on Host3 excluding V M5.
• VMs on Host1 are not interconnected.
• Any VMs on Host2 can connect to any VMs on Host1
and Host3, and they are interconnected.
• Any VMs on Host3 are interconnected. Also, each VM
has two available guest OSs.
We modelled vulnerabilities that bypass ﬁrewalls and
authentications via remote access only. There are ﬁve “Win-
dows 7” (denoted as W7) vulnerabilities, 10 “Windows
Vista” (denoted as WV) vulnerabilities, six “Redhat En-
terprise Linux” (denoted as REL) vulnerabilities, and 21
“Redhat Linux” (denoted as RL) vulnerabilities. Table II and
Table III show W7 and REL vulnerabilities, respectively. We
516
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:25:31 UTC from IEEE Xplore.  Restrictions apply. 
denote vulnerabilities by OSnumber (e.g., in Table II, CVE-
2013-2556 is denoted as W 71). Also, a common vulnerabil-
ity scoring system (CVSS) base score (BS), impact values,
and exploitability are shown, where details of these metrics
can be found in [42]. We assume the attacker only has to
exploit one enlisted vulnerability to compromise the VM.
Table I
OS USED IN VMS
VM ID
V M1
V M2
V M3
V M4
V M5
Default OS
Windows 7
Windows 7
Windows 7
Redhat Enterprise Linux
Redhat Enterprise Linux
Backup OS
Windows Vista
Windows Vista
Redhat Linux
Windows Vista
Redhat Linux
Table II
WINDOWS 7 VULNERABILITIES
CVE ID
CVSS BS
Impact
Exploitability
CVE-2013-2556
CVE-2013-2554
CVE-2013-0013
CVE-2012-0001
CVE-2010-0494
7.5
7.5
5.8
9.3
4.3
6.4
6.4
4.9
10
2.9
10
10
8.6
8.6
8.6
REDHAT ENTERPRISE LINUX VULNERABILITIES
Table III
CVE ID
CVSS BS
Impact
Exploitability
CVE-2013-2051
CVE-2012-4546
CVE-2005-2700
CVE-2005-0337
CVE-2004-1145
CVE-2004-0607
2.6
4.3
10
7.5
5.0
10
2.9
2.9
10
6.4
2.9
10
4.9
8.6
10
10
10
10
ID
W 71
W 72
W 73
W 74
W 75
ID
REL1
REL2
REL3
REL4
REL5
REL6
B. Generating a HARM
We deﬁne the formalism of a two-layer HARM.
Deﬁnition 1. The HARM has a 3-tuple H = (U,L,C), where
U is the upper layer ARM (e.g., an AG), L is the lower layer
ARMs (e.g., ATs) and C = U → L is a one-to-one mapping
of components in the upper layer to components in the lower
layer.
Deﬁnition 2. An Attack Graph (AG) in the upper layer
HARM is a directed graph G = (N,E), where N is a ﬁnite
set of nodes in the networked system and E ⊆ N × N is a
set of edges where a pair of nodes (ni,n j) is a mapping of
nodes ni ↔ n j, where ni ∈ N and ni (cid:6)= n j .
Deﬁnition 3. An Attack Tree (AT) in the lower layer HARM
is deﬁned as T = (A,B,ε,a0,ni) (closely related to [43]),
where A is a ﬁnite set of attacks, B ⊆ A×A is a set of edges
in the AT where an edge (ai,a j) ∈ B represents the state
transition from a child node ai ∈ A to a parent node a j ∈ A