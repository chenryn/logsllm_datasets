### The Day of the Update

#### Introduction
**Authors:**
- Itzik Kotler
- Tomer Bitton

**Abstract:**
This document explores the vulnerabilities and potential attacks associated with software updates. We will discuss how updates can be manipulated, the methods used to subvert update procedures, and the importance of secure update mechanisms.

---

### What is an Update?
An update is a mechanism for delivering bug fixes or new features to existing customers of applications. Historically, updates have been delivered through various means, including:
- Punch Cards
- BBS/Modem
- Floppy Disks/CDs
- Internet

### Why Are Updates Important?
- **Background Tasks:** Updates often run in the background, drawing little attention from the user.
- **Binary Execution:** Most updates involve executing binaries on the updater's machine.
- **Sensitive Data Manipulation:** Updates can manipulate sensitive data, such as antivirus rules.
- **Tampering Risks:** Updates can be silently tampered with, leaving almost no trace behind.

### Catching an Update
Updates can be intercepted through various Man-in-the-Middle (MITM) attacks, such as:
- **Wi-Fi via Open/Weak Cryptography**
- **LAN via ARP Poisoning**
- **WAN via DNS Cache Attack**

Wi-Fi is a common target for these attacks, especially in public places like airports, McDonald's, and cafes.

### Subverting the Update Procedure
1. **Client-Server Communication:**
   - **Step 1:** Client asks the server if it is up to date.
     - **Response:** Server replies with a negative answer.
   - **Step 2:** Client requests download sites.
     - **Response:** Server provides malicious sites.
   - **Alternative:** Client downloads from a known site but is redirected to a malicious site.

2. **Subverting the Update Connection:**
   - **IP Spoofing:**
     - Invert source and destination addresses.
   - **TCP Spoofing:**
     - Invert source and destination ports.
     - Set SEQ to received ACK.
     - Set ACK SEQ to received DATA + SEQ.
   - **One Shot, One Kill Flags:**
     - PUSH + ACK + FIN flags.
     - FIN flag mutes the server and may cause the client to disconnect.

3. **Subverting the Update Agent:**
   - **Client Accesses a Document (XML/INI):**
     - Reply with 200 OK (Cooked Data).
   - **Document Contains Malicious Binary Sites:**
     - Client downloads a file.
     - Reply with 302 (Redirection).
     - Redirection to a malicious binary site.
   - **Server Ignored:**
     - Muted at the connection level.

### Attack Walkthroughs

#### 200 OK with Cooked Data
- **Target Application:** Notepad++
- **Steps:**
  1. Notepad++ checks for a new version.
  2. Server replies with 200 OK (Cooked Data).
  3. Document contains a list of sites for downloads.
  4. Upcoming downloads go to our sites.
  5. Summary: Update will take place on our provided sites, achieving "One Shot, One Kill."

#### 302 Found with Malicious Site
- **Target Application:** Skype
- **Steps:**
  1. Skype checks for a new version.
  2. Server replies with 302 Found (Malicious URL).
  3. Download goes to our site.
  4. Summary: Pre-programmed URLs are bypassed, achieving "One Shot, One Kill."

#### 200 OK + 302 Found
- **Target Application:** MalwareBytes
- **Steps:**
  1. MalwareBytes checks for an update.
  2. Server replies with 200 OK and 302 Found.
  3. 200 OK only contains a positive update answer.
  4. 302 Found redirects the download to our site.
  5. Summary: Update document does not contain sites, pre-defined URL is bypassed, achieving "One Shot, One Kill."

### Vulnerable Applications
- Alcohol 120
- GOM Player
- iMesh
- Skype
- Hex Workshop
- Adobe PDF Reader
- And more...

### IPPON Targets Maintenance
- **IPPON** takes its targets from an XML file containing triggers and responses.
- **Triggers:**
  - Host, URL, or ANY.
- **Responses:**
  - Static, dynamic (on the fly), or redirection attempts.

### SSL and Update Security
- **SSL Generally Enhances Security:**
  - However, common implementations in updaters are not always robust.
  - SSL is resource-intensive and not always used for entire download sessions.
  - Background updates lack visual indicators (e.g., a golden lock icon).

#### Self-Signed Certificates
- **Effective SSL Requires Valid, Verifiable Certificates:**
  - Self-signed certificates are cheap but vulnerable.
  - Third-party certificates (without verification) also provide minimal security.
  - Result: Only provides a false sense of security.

#### NULL Cipher
- **SSL Server Chooses Cipher Suite:**
  - Race condition in ServerHello or ClientHello messages can expose vulnerabilities.
  - If the cipher is set to NULL, SSL provides little benefit.
  - Minimum cipher suite strength should be set in advance to prevent tampering.

### Secure Update Mechanisms
- **Digital Signature:**
  - Update agent holds a public key and verifies the download using MD5/SHA1.
- **SSL (The Right Way):**
  - Use valid, verifiable certificates.
  - Exchange MD5/SHA1 of the upcoming download.

### Conclusion
- **Proprietary Update Attacks:**
  - Playing with antivirus rules.
  - Antivirus attacking legitimate applications or itself.
  - Hit 'n Run Mode: Persistently infecting applications.
  - Contagious Mode: Embedding IPPON to spread in insecure environments.

### Questions?

### IPPON Project
- **Project Link:** [http://code.google.com/p/ippon-mitm/](http://code.google.com/p/ippon-mitm/)
- **Get Your Latest Version and Targets:**
  - `./ippon.py â€“w â€“i targets.xml -u`

Happy Updating! ðŸ˜Š