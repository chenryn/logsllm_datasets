# Swift
## 变量常量与基本类型
```swift
// 常量
let pi = 3.14
// 变量
var i = 1, j = 2
// 显式变量类型
var url: String = "www.baidu.com"
// 整型 取决于机器字长
print(Int.max)
// 无符号整型
print(UInt.max)
// 8位整型
print(Int8.max)
// 浮点数
let x: Float = 3.1415926
let y: Double = 3.155645
print(x, y)
// 不支持隐式转换
print(x+Float(y))
// 元组
var property: (String, Int, (Int, Int, Int)) = ("cxk", 18, (35, 35, 35))
print(property)
print(property.0)
print(property.1)
// 元组的比较
print((1,2,3) = 1 else {
    print("stop")
    exit(0)
}
```
## 字符串
### 基础
```swift
// 判断是否是空字符串
print(str.isEmpty)
// 插值表达式
print("name: \(str)")
// 字符串拼接 转义字符等同类C语言
```
### char与unicode
```swift
// 显式声明单个字符（底层采用unicode存储）
let single: Character = "中"
let single1: Character = "🐶"
// 遍历字符
for c in "中文大萨达🇨🇳" {
    print(c)
}
// 字符串是可变的
str.append("jntm")
print(str)
// 字符串长度
print(str.count)
```
### 索引
- 挺难用的
```swift
// 字符串索引
// [startIndex, endIndedx)
var s = "我如果付费"
// 需要根据startIndex 或者endIndex 计算
print(s[s.index(s.startIndex, offsetBy: 2)]) // 果 在第一个索引往后的2个
print(s[s.index(before: s.endIndex)]) // 费 在最后一个索引之前的一个
```
### 方法
```swift
print(s.uppercased())
print(s.lowercased())
print(s.capitalized) // 将每个单词转为首字母大写
print(s.contains("如果"))
print(s.hasPrefix("我 "))
print(s.hasSuffix("费"))
```
### NSString
```swift
print(NSString(format: "%.2f", 1.0 / 3.0) as String)
// 截取
print(NSString("微分去问问").substring(with: NSMakeRange(1, 3)))
// 替换两边的字符
print(NSString("-a-").trimmingCharacters(in: CharacterSet(charactersIn: "-")))
```
## 可选型
```swift
var responseCode : Int? = 404
var responseMessage: String? = "success"
responseCode = nil
var code: Int! = 4
let a  = code // 此时a的类型是Int?
let b: Int = code // 可以转为Int
```
### 解包
```swift
// 强制解包
print(responseCode!)
// 在判断中解包
if let responseCode = responseCode {
    // 这里出现了变量遮蔽
    print(responseCode)
}
// 同时判断解包多个
if let responseCode = responseCode,
   let responseMessage = responseMessage {
    print(responseCode, responseMessage)
}
```
### 可选型链
```swift
if let responseMessage = responseMessage {
    print(responseMessage.uppercased)
}
// 等同于
print(responseMessage?.uppercased)
// 如果是 nil 则 message 的值 为 message null
let message = responseMessage ?? "message null"
```
### 在类库中的使用
```swift
// 类型转换 如果转换失败 就返回 nil
if let age = Int("18"), age  = []
var es1 = [Int]()
// 5个元素初始值 全为5
var allZeros = [Int](repeating: 5, count: 5)
```
### 基本操作
```java
print(allZeros.count)
print(allZeros.isEmpty)
// 数组越界会有运行异常
print(allZeros[3])
print(allZeros.first!, allZeros.last!)
print(nums.min()!, nums.max()!)
// 子数组 1,2,3
print(nums[1.. = [:]
print(dict["name"]!)
print(Array(dict.keys))
print(Array(dict.values))
for key in dict.keys {
    print(dict[key]!)
}
for (key, value) in dict {
    print(key, value)
}
print(dict == ["name": "cxk", "age": "18"])
// 更新
dict["name"] = "jntm"
// 这个方法会返回其之前的值
dict.updateValue("jntm", forKey: "name")
// 删除
dict["name"] = nil
dict.removeValue(forKey: "name")
dict.removeAll()
```
### Set
```swift
// 声明
var set : Set = ["a", "b" , "c"]
for i in set {
    print(i)
}
print(set == ["b", "c", "a"])
set.insert("aa")
set.remove("c")
// 集合运算
print(set.union(["a","aa"]))
print(set.intersection(["a", "aa"]))
print(set.subtracting(["a", "aa"]))
print(set.symmetricDifference(["a", "aa"]))
```
## 函数
### 定义
```swift
// 有参数有返回值
func say(name: String, age: Int) -> String {
    return "jntm \(name) - \(age)"
}
// 无参数无返回值
func say() {
    print( "ctrl")
}
// 返回多个值
func request() -> (message: String, code: Int) {
    return ("not found", 404)
}
// 调用时 多个参数必须使用 形参: 实参 的形式
print(say(name: "cxk", age: 18))
```
### 外内部参数名
```swift
// 外部与内部参数名
func request(url getUrl: String) {
    print(getUrl)
}
request(url: "http://baidu.com")
// 忽略外部参数名
func request(_ url: String, _ method: String) {}
request("baidu.com", "get")
```
### 默认参数、可变参数
```swift
// 可变参数不像其他语言 可以不放在最后 可变参数本质上也是一个数组
func request(url: String, method: String = "get", params: String ...){}
request(url: "baidu.com", params: "sds", "dfsds")
```
### 引用参数
```swift
// 默认参数值和可变参数
// 可变参数不像其他语言 可以不放在最后 可变参数本质上也是一个数组
func request(url: String, method: String = "get", params: String ...){}
request(url: "baidu.com", params: "sds", "dfsds")
// 形参默认都是不可变的
// 使用 inout 关键字 相当于一个指针
func request(url: inout String){
    url = "google.com"
}
var u = "dsds"
request(url: &u)
print(u)
```
### 函数式编程
```swift
func submit(runnable: () -> ()) {
    runnable()
}
func print(){
    print("running")
}
// 第一种调用
submit(runnable: print)
// 第二种调用
submit {
    print("hhh")
}
// 传递一个参数
func submit(consumer: (String) -> ()){
    consumer("ikun")
}
submit { params in
    print(params)
}
// 函数式编程三大操作
print([1,2,3].map{ v in v + 1})
print([1,2,3].filter{ v in v % 2 == 0})
print([1,2,3].reduce(10, {x, y in x + y}))
// 返回函数类型
func getFuture() -> () -> () {
    return {
        print("this is future")
    }
}
getFuture()()
// 函数嵌套
func execute(){
    func innerFunc(){
        print("hello world")
    }
    innerFunc()
}
execute()