### 3.4.7 Using the RETURNING INTO Clause

The `RETURNING INTO` clause allows a result set of more than one row to be returned into a collection. For more information on the `BULK COLLECT` clause, see Section 3.12.4.

#### Example: Modifying `emp_comp_update` Procedure with RETURNING INTO

The following example modifies the `emp_comp_update` procedure introduced in Section 3.4.5 by adding the `RETURNING INTO` clause.

```sql
CREATE OR REPLACE PROCEDURE emp_comp_update (
    p_empno IN emp.empno%TYPE,
    p_sal IN emp.sal%TYPE,
    p_comm IN emp.comm%TYPE
)
IS
    v_empno emp.empno%TYPE;
    v_ename emp.ename%TYPE;
    v_job emp.job%TYPE;
    v_sal emp.sal%TYPE;
    v_comm emp.comm%TYPE;
    v_deptno emp.deptno%TYPE;
BEGIN
    UPDATE emp 
    SET sal = p_sal, comm = p_comm 
    WHERE empno = p_empno
    RETURNING
        empno,
        ename,
        job,
        sal,
        comm,
        deptno
    INTO
        v_empno,
        v_ename,
        v_job,
        v_sal,
        v_comm,
        v_deptno;

    IF SQL%FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Updated Employee # : ' || v_empno);
        DBMS_OUTPUT.PUT_LINE('Name : ' || v_ename);
        DBMS_OUTPUT.PUT_LINE('Job : ' || v_job);
        DBMS_OUTPUT.PUT_LINE('Department : ' || v_deptno);
        DBMS_OUTPUT.PUT_LINE('New Salary : ' || v_sal);
        DBMS_OUTPUT.PUT_LINE('New Commission : ' || v_comm);
    ELSE
        DBMS_OUTPUT.PUT_LINE('Employee # ' || p_empno || ' not found');
    END IF;
END;
```

**Output:**

```sql
EXEC emp_comp_update(9503, 6540, 1200);

Updated Employee # : 9503
Name : PETERSON
Job : ANALYST
Department : 40
New Salary : 6540.00
New Commission : 1200.00
```

#### Example: Modifying `emp_delete` Procedure with RETURNING INTO and Record Types

The following example modifies the `emp_delete` procedure by adding the `RETURNING INTO` clause using record types.

```sql
CREATE OR REPLACE PROCEDURE emp_delete (
    p_empno IN emp.empno%TYPE
)
IS
    r_emp emp%ROWTYPE;
BEGIN
    DELETE FROM emp 
    WHERE empno = p_empno
    RETURNING
        *
    INTO
        r_emp;

    IF SQL%FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Deleted Employee # : ' || r_emp.empno);
        DBMS_OUTPUT.PUT_LINE('Name : ' || r_emp.ename);
        DBMS_OUTPUT.PUT_LINE('Job : ' || r_emp.job);
        DBMS_OUTPUT.PUT_LINE('Manager : ' || r_emp.mgr);
        DBMS_OUTPUT.PUT_LINE('Hire Date : ' || r_emp.hiredate);
        DBMS_OUTPUT.PUT_LINE('Salary : ' || r_emp.sal);
        DBMS_OUTPUT.PUT_LINE('Commission : ' || r_emp.comm);
        DBMS_OUTPUT.PUT_LINE('Department : ' || r_emp.deptno);
    ELSE
        DBMS_OUTPUT.PUT_LINE('Employee # ' || p_empno || ' not found');
    END IF;
END;
```

**Output:**

```sql
EXEC emp_delete(9503);

Deleted Employee # : 9503
Name : PETERSON
Job : ANALYST
Manager : 7902
Hire Date : 31-MAR-05 00:00:00
Salary : 6540.00
Commission : 1200.00
Department : 40
```

### 3.4.8 Obtaining the Result Status

There are several attributes that can be used to determine the effect of a command:

- **SQL%FOUND**: A Boolean attribute that returns `TRUE` if at least one row was affected by an `INSERT`, `UPDATE`, or `DELETE` command, or if a `SELECT INTO` command retrieved one or more rows.
- **SQL%ROWCOUNT**: Provides the number of rows affected by an `INSERT`, `UPDATE`, `DELETE`, or `SELECT INTO` command. The value is returned as a `BIGINT` data type.
- **SQL%NOTFOUND**: The opposite of `SQL%FOUND`. Returns `TRUE` if no rows were affected by an `INSERT`, `UPDATE`, or `DELETE` command, or if a `SELECT INTO` command retrieved no rows.

#### Example: Using SQL%FOUND

```sql
BEGIN
    INSERT INTO emp (empno, ename, job, sal, deptno) VALUES (9001, 'JONES', 'CLERK', 850.00, 40);
    IF SQL%FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Row has been inserted');
    END IF;
END;
```

**Output:**

```
Row has been inserted
```

#### Example: Using SQL%ROWCOUNT

```sql
BEGIN
    UPDATE emp SET hiredate = '03-JUN-07' WHERE empno = 9001;
    DBMS_OUTPUT.PUT_LINE('# rows updated: ' || SQL%ROWCOUNT);
END;
```

**Output:**

```
# rows updated: 1
```

#### Example: Using SQL%NOTFOUND

```sql
BEGIN
    UPDATE emp SET hiredate = '03-JUN-07' WHERE empno = 9000;
    IF SQL%NOTFOUND THEN
        DBMS_OUTPUT.PUT_LINE('No rows were updated');
    END IF;
END;
```

**Output:**

```
No rows were updated
```

### 3.5 Control Structures

This section describes the programming statements in SPL that provide a full procedural complement to SQL.

#### 3.5.1 IF Statement

IF statements allow you to execute commands based on certain conditions. SPL supports four forms of IF:

- **IF ... THEN**
- **IF ... THEN ... ELSE**
- **IF ... THEN ... ELSE IF**
- **IF ... THEN ... ELSIF ... THEN ... ELSE**

##### 3.5.1.1 IF-THEN

The simplest form of IF. The statements between `THEN` and `END IF` will be executed if the condition is `TRUE`.

**Example:**

```sql
DECLARE
    v_empno emp.empno%TYPE;
    v_comm emp.comm%TYPE;
    CURSOR emp_cursor IS SELECT empno, comm FROM emp;
BEGIN
    OPEN emp_cursor;
    DBMS_OUTPUT.PUT_LINE('EMPNO COMM');
    DBMS_OUTPUT.PUT_LINE('----- -------');
    LOOP
        FETCH emp_cursor INTO v_empno, v_comm;
        EXIT WHEN emp_cursor%NOTFOUND;
        IF v_comm IS NOT NULL AND v_comm > 0 THEN
            DBMS_OUTPUT.PUT_LINE(v_empno || ' ' || TO_CHAR(v_comm,'$99999.99'));
        END IF;
    END LOOP;
    CLOSE emp_cursor;
END;
```

**Output:**

```
EMPNO COMM
----- -------
7499 $300.00
7521 $500.00
7654 $1400.00
```

##### 3.5.1.2 IF-THEN-ELSE

Adds an alternative set of statements to be executed if the condition evaluates to `FALSE`.

**Example:**

```sql
DECLARE
    v_empno emp.empno%TYPE;
    v_comm emp.comm%TYPE;
    CURSOR emp_cursor IS SELECT empno, comm FROM emp;
BEGIN
    OPEN emp_cursor;
    DBMS_OUTPUT.PUT_LINE('EMPNO COMM');
    DBMS_OUTPUT.PUT_LINE('----- -------');
    LOOP
        FETCH emp_cursor INTO v_empno, v_comm;
        EXIT WHEN emp_cursor%NOTFOUND;
        IF v_comm IS NOT NULL AND v_comm > 0 THEN
            DBMS_OUTPUT.PUT_LINE(v_empno || ' ' || TO_CHAR(v_comm,'$99999.99'));
        ELSE
            DBMS_OUTPUT.PUT_LINE(v_empno || ' ' || 'Non-commission');
        END IF;
    END LOOP;
    CLOSE emp_cursor;
END;
```

**Output:**

```
EMPNO COMM
----- -------
7369 Non-commission
7499 $300.00
7521 $500.00
7566 Non-commission
7654 $1400.00
7698 Non-commission
7782 Non-commission
7788 Non-commission
7839 Non-commission
7844 Non-commission
7876 Non-commission
7900 Non-commission
7902 Non-commission
7934 Non-commission
```

##### 3.5.1.3 IF-THEN-ELSE IF

Allows nesting of IF statements to handle multiple conditions.

**Example:**

```sql
DECLARE
    v_empno emp.empno%TYPE;
    v_sal emp.sal%TYPE;
    v_comm emp.comm%TYPE;
    v_avg NUMBER(7,2);
    CURSOR emp_cursor IS SELECT empno, sal, comm FROM emp;
BEGIN
    SELECT AVG((sal + NVL(comm,0)) * 24) INTO v_avg FROM emp;
    DBMS_OUTPUT.PUT_LINE('Average Yearly Compensation: ' || TO_CHAR(v_avg,'$999,999.99'));
    OPEN emp_cursor;
    DBMS_OUTPUT.PUT_LINE('EMPNO YEARLY COMP');
    DBMS_OUTPUT.PUT_LINE('----- -----------');
    LOOP
        FETCH emp_cursor INTO v_empno, v_sal, v_comm;
        EXIT WHEN emp_cursor%NOTFOUND;
        IF v_comm IS NOT NULL AND v_comm > 0 THEN
            IF (v_sal + v_comm) * 24 > v_avg THEN
                DBMS_OUTPUT.PUT_LINE(v_empno || ' ' || TO_CHAR((v_sal + v_comm) * 24,'$999,999.99') || ' Exceeds Average');
            ELSE
                DBMS_OUTPUT.PUT_LINE(v_empno || ' ' || TO_CHAR((v_sal + v_comm) * 24,'$999,999.99') || ' Below Average');
            END IF;
        ELSE
            IF v_sal * 24 > v_avg THEN
                DBMS_OUTPUT.PUT_LINE(v_empno || ' ' || TO_CHAR(v_sal * 24,'$999,999.99') || ' Exceeds Average');
            ELSE
                DBMS_OUTPUT.PUT_LINE(v_empno || ' ' || TO_CHAR(v_sal * 24,'$999,999.99') || ' Below Average');
            END IF;
        END IF;
    END LOOP;
    CLOSE emp_cursor;
END;
```

**Output:**

```
Average Yearly Compensation: $53,528.57
EMPNO YEARLY COMP
----- -----------
7369 $19,200.00 Below Average
7499 $45,600.00 Below Average
7521 $42,000.00 Below Average
7566 $71,400.00 Exceeds Average
7654 $63,600.00 Exceeds Average
7698 $68,400.00 Exceeds Average
7782 $58,800.00 Exceeds Average
7788 $72,000.00 Exceeds Average
7839 $120,000.00 Exceeds Average
7844 $36,000.00 Below Average
7876 $26,400.00 Below Average
7900 $22,800.00 Below Average
7902 $72,000.00 Exceeds Average
7934 $31,200.00 Below Average
```

##### 3.5.1.4 IF-THEN-ELSIF-ELSE

Provides a method of checking many alternatives in one statement.

**Example:**

```sql
DECLARE
    v_empno emp.empno%TYPE;
    v_comp NUMBER(8,2);
    v_lt_25K SMALLINT := 0;
    v_25K_50K SMALLINT := 0;
    v_50K_75K SMALLINT := 0;
    v_75K_100K SMALLINT := 0;
    v_ge_100K SMALLINT := 0;
    CURSOR emp_cursor IS SELECT empno, (sal + NVL(comm,0)) * 24 FROM emp;
BEGIN
    OPEN emp_cursor;
    LOOP
        FETCH emp_cursor INTO v_empno, v_comp;
        EXIT WHEN emp_cursor%NOTFOUND;
        IF v_comp < 25000 THEN
            v_lt_25K := v_lt_25K + 1;
        ELSIF v_comp < 50000 THEN
            v_25K_50K := v_25K_50K + 1;
        ELSIF v_comp < 75000 THEN
            v_50K_75K := v_50K_75K + 1;
        ELSIF v_comp < 100000 THEN
            v_75K_100K := v_75K_100K + 1;
        ELSE
            v_ge_100K := v_ge_100K + 1;
        END IF;
    END LOOP;
    CLOSE emp_cursor;
    DBMS_OUTPUT.PUT_LINE('Employees with compensation < $25,000: ' || v_lt_25K);
    DBMS_OUTPUT.PUT_LINE('Employees with compensation $25,000 - $50,000: ' || v_25K_50K);
    DBMS_OUTPUT.PUT_LINE('Employees with compensation $50,000 - $75,000: ' || v_50K_75K);
    DBMS_OUTPUT.PUT_LINE('Employees with compensation $75,000 - $100,000: ' || v_75K_100K);
    DBMS_OUTPUT.PUT_LINE('Employees with compensation >= $100,000: ' || v_ge_100K);
END;
```

**Output:**

```
Employees with compensation < $25,000: 3
Employees with compensation $25,000 - $50,000: 5
Employees with compensation $50,000 - $75,000: 3
Employees with compensation $75,000 - $100,000: 2
Employees with compensation >= $100,000: 1
```

---

**Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved.**