allows a result set of more than one row that is returned into a collection. See Section
3.12.4 for more information on the BULK COLLECT clause.
The following example is a modification of the emp_comp_update procedure
introduced in Section 3.4.5, with the addition of the RETURNING INTO clause.
CREATE OR REPLACE PROCEDURE emp_comp_update (
p_empno IN emp.empno%TYPE,
p_sal IN emp.sal%TYPE,
p_comm IN emp.comm%TYPE
)
IS
v_empno emp.empno%TYPE;
v_ename emp.ename%TYPE;
v_job emp.job%TYPE;
v_sal emp.sal%TYPE;
v_comm emp.comm%TYPE;
v_deptno emp.deptno%TYPE;
BEGIN
UPDATE emp SET sal = p_sal, comm = p_comm WHERE empno = p_empno
RETURNING
empno,
ename,
job,
sal,
comm,
deptno
INTO
v_empno,
v_ename,
v_job,
v_sal,
v_comm,
v_deptno;
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 206
Database Compatibility for Oracle® Developers Guide
IF SQL%FOUND THEN
DBMS_OUTPUT.PUT_LINE('Updated Employee # : ' || v_empno);
DBMS_OUTPUT.PUT_LINE('Name : ' || v_ename);
DBMS_OUTPUT.PUT_LINE('Job : ' || v_job);
DBMS_OUTPUT.PUT_LINE('Department : ' || v_deptno);
DBMS_OUTPUT.PUT_LINE('New Salary : ' || v_sal);
DBMS_OUTPUT.PUT_LINE('New Commission : ' || v_comm);
ELSE
DBMS_OUTPUT.PUT_LINE('Employee # ' || p_empno || ' not found');
END IF;
END;
The following is the output from this procedure (assuming employee 9503 created by the
emp_insert procedure still exists within the table).
EXEC emp_comp_update(9503, 6540, 1200);
Updated Employee # : 9503
Name : PETERSON
Job : ANALYST
Department : 40
New Salary : 6540.00
New Commission : 1200.00
The following example is a modification of the emp_delete procedure, with the
addition of the RETURNING INTO clause using record types.
CREATE OR REPLACE PROCEDURE emp_delete (
p_empno IN emp.empno%TYPE
)
IS
r_emp emp%ROWTYPE;
BEGIN
DELETE FROM emp WHERE empno = p_empno
RETURNING
*
INTO
r_emp;
IF SQL%FOUND THEN
DBMS_OUTPUT.PUT_LINE('Deleted Employee # : ' || r_emp.empno);
DBMS_OUTPUT.PUT_LINE('Name : ' || r_emp.ename);
DBMS_OUTPUT.PUT_LINE('Job : ' || r_emp.job);
DBMS_OUTPUT.PUT_LINE('Manager : ' || r_emp.mgr);
DBMS_OUTPUT.PUT_LINE('Hire Date : ' || r_emp.hiredate);
DBMS_OUTPUT.PUT_LINE('Salary : ' || r_emp.sal);
DBMS_OUTPUT.PUT_LINE('Commission : ' || r_emp.comm);
DBMS_OUTPUT.PUT_LINE('Department : ' || r_emp.deptno);
ELSE
DBMS_OUTPUT.PUT_LINE('Employee # ' || p_empno || ' not found');
END IF;
END;
The following is the output from this procedure.
EXEC emp_delete(9503);
Deleted Employee # : 9503
Name : PETERSON
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 207
Database Compatibility for Oracle® Developers Guide
Job : ANALYST
Manager : 7902
Hire Date : 31-MAR-05 00:00:00
Salary : 6540.00
Commission : 1200.00
Department : 40
3.4.8 Obtaining the Result Status
There are several attributes that can be used to determine the effect of a command.
SQL%FOUND is a Boolean that returns TRUE if at least one row was affected by an
INSERT, UPDATE or DELETE command or a SELECT INTO command retrieved one or
more rows.
The following anonymous block inserts a row and then displays the fact that the row has
been inserted.
BEGIN
INSERT INTO emp (empno,ename,job,sal,deptno) VALUES (
9001, 'JONES', 'CLERK', 850.00, 40);
IF SQL%FOUND THEN
DBMS_OUTPUT.PUT_LINE('Row has been inserted');
END IF;
END;
Row has been inserted
SQL%ROWCOUNT provides the number of rows affected by an INSERT, UPDATE, DELETE,
or SELECT INTO command. The SQL%ROWCOUNT value is returned as a BIGINT data
type. The following example updates the row that was just inserted and displays
SQL%ROWCOUNT.
BEGIN
UPDATE emp SET hiredate = '03-JUN-07' WHERE empno = 9001;
DBMS_OUTPUT.PUT_LINE('# rows updated: ' || SQL%ROWCOUNT);
END;
# rows updated: 1
SQL%NOTFOUND is the opposite of SQL%FOUND. SQL%NOTFOUND returns TRUE if no rows
were affected by an INSERT, UPDATE or DELETE command or a SELECT INTO
command retrieved no rows.
BEGIN
UPDATE emp SET hiredate = '03-JUN-07' WHERE empno = 9000;
IF SQL%NOTFOUND THEN
DBMS_OUTPUT.PUT_LINE('No rows were updated');
END IF;
END;
No rows were updated
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 208
Database Compatibility for Oracle® Developers Guide
3.5 Control Structures
The programming statements in SPL that make it a full procedural complement to SQL
are described in this section.
3.5.1 IF Statement
IF statements let you execute commands based on certain conditions. SPL has four forms
of IF:
 IF ... THEN
 IF ... THEN ... ELSE
 IF ... THEN ... ELSE IF
 IF ... THEN ... ELSIF ... THEN ... ELSE
3.5.1.1 IF-THEN
IF boolean-expression THEN
statements
END IF;
IF-THEN statements are the simplest form of IF. The statements between THEN and END
IF will be executed if the condition is TRUE. Otherwise, they are skipped.
In the following example an IF-THEN statement is used to test and display employees
who have a commission.
DECLARE
v_empno emp.empno%TYPE;
v_comm emp.comm%TYPE;
CURSOR emp_cursor IS SELECT empno, comm FROM emp;
BEGIN
OPEN emp_cursor;
DBMS_OUTPUT.PUT_LINE('EMPNO COMM');
DBMS_OUTPUT.PUT_LINE('----- -------');
LOOP
FETCH emp_cursor INTO v_empno, v_comm;
EXIT WHEN emp_cursor%NOTFOUND;
--
-- Test whether or not the employee gets a commission
--
IF v_comm IS NOT NULL AND v_comm > 0 THEN
DBMS_OUTPUT.PUT_LINE(v_empno || ' ' ||
TO_CHAR(v_comm,'$99999.99'));
END IF;
END LOOP;
CLOSE emp_cursor;
END;
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 209
Database Compatibility for Oracle® Developers Guide
The following is the output from this program.
EMPNO COMM
----- -------
7499 $300.00
7521 $500.00
7654 $1400.00
3.5.1.2 IF-THEN-ELSE
IF boolean-expression THEN
statements
ELSE
statements
END IF;
IF-THEN-ELSE statements add to IF-THEN by letting you specify an alternative set of
statements that should be executed if the condition evaluates to false.
The previous example is modified so an IF-THEN-ELSE statement is used to display the
text Non-commission if the employee does not get a commission.
DECLARE
v_empno emp.empno%TYPE;
v_comm emp.comm%TYPE;
CURSOR emp_cursor IS SELECT empno, comm FROM emp;
BEGIN
OPEN emp_cursor;
DBMS_OUTPUT.PUT_LINE('EMPNO COMM');
DBMS_OUTPUT.PUT_LINE('----- -------');
LOOP
FETCH emp_cursor INTO v_empno, v_comm;
EXIT WHEN emp_cursor%NOTFOUND;
--
-- Test whether or not the employee gets a commission
--
IF v_comm IS NOT NULL AND v_comm > 0 THEN
DBMS_OUTPUT.PUT_LINE(v_empno || ' ' ||
TO_CHAR(v_comm,'$99999.99'));
ELSE
DBMS_OUTPUT.PUT_LINE(v_empno || ' ' || 'Non-commission');
END IF;
END LOOP;
CLOSE emp_cursor;
END;
The following is the output from this program.
EMPNO COMM
----- -------
7369 Non-commission
7499 $ 300.00
7521 $ 500.00
7566 Non-commission
7654 $ 1400.00
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 210
Database Compatibility for Oracle® Developers Guide
7698 Non-commission
7782 Non-commission
7788 Non-commission
7839 Non-commission
7844 Non-commission
7876 Non-commission
7900 Non-commission
7902 Non-commission
7934 Non-commission
3.5.1.3 IF-THEN-ELSE IF
IF statements can be nested so that alternative IF statements can be invoked once it is
determined whether or not the conditional of an outer IF statement is TRUE or FALSE.
In the following example the outer IF-THEN-ELSE statement tests whether or not an
employee has a commission. The inner IF-THEN-ELSE statements then test whether the
employee’s total compensation exceeds or is less than the company average.
DECLARE
v_empno emp.empno%TYPE;
v_sal emp.sal%TYPE;
v_comm emp.comm%TYPE;
v_avg NUMBER(7,2);
CURSOR emp_cursor IS SELECT empno, sal, comm FROM emp;
BEGIN
--
-- Calculate the average yearly compensation in the company
--
SELECT AVG((sal + NVL(comm,0)) * 24) INTO v_avg FROM emp;
DBMS_OUTPUT.PUT_LINE('Average Yearly Compensation: ' ||
TO_CHAR(v_avg,'$999,999.99'));
OPEN emp_cursor;
DBMS_OUTPUT.PUT_LINE('EMPNO YEARLY COMP');
DBMS_OUTPUT.PUT_LINE('----- -----------');
LOOP
FETCH emp_cursor INTO v_empno, v_sal, v_comm;
EXIT WHEN emp_cursor%NOTFOUND;
--
-- Test whether or not the employee gets a commission
--
IF v_comm IS NOT NULL AND v_comm > 0 THEN
--
-- Test if the employee's compensation with commission exceeds the average
--
IF (v_sal + v_comm) * 24 > v_avg THEN
DBMS_OUTPUT.PUT_LINE(v_empno || ' ' ||
TO_CHAR((v_sal + v_comm) * 24,'$999,999.99') ||
' Exceeds Average');
ELSE
DBMS_OUTPUT.PUT_LINE(v_empno || ' ' ||
TO_CHAR((v_sal + v_comm) * 24,'$999,999.99') ||
' Below Average');
END IF;
ELSE
--
-- Test if the employee's compensation without commission exceeds the
average
--
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 211
Database Compatibility for Oracle® Developers Guide
IF v_sal * 24 > v_avg THEN
DBMS_OUTPUT.PUT_LINE(v_empno || ' ' ||
TO_CHAR(v_sal * 24,'$999,999.99') || ' Exceeds Average');
ELSE
DBMS_OUTPUT.PUT_LINE(v_empno || ' ' ||
TO_CHAR(v_sal * 24,'$999,999.99') || ' Below Average');
END IF;
END IF;
END LOOP;
CLOSE emp_cursor;
END;
Note: The logic in this program can be simplified considerably by calculating the
employee’s yearly compensation using the NVL function within the SELECT command of
the cursor declaration, however, the purpose of this example is to demonstrate how IF
statements can be used.
The following is the output from this program.
Average Yearly Compensation: $ 53,528.57
EMPNO YEARLY COMP
----- -----------
7369 $ 19,200.00 Below Average
7499 $ 45,600.00 Below Average
7521 $ 42,000.00 Below Average
7566 $ 71,400.00 Exceeds Average
7654 $ 63,600.00 Exceeds Average
7698 $ 68,400.00 Exceeds Average
7782 $ 58,800.00 Exceeds Average
7788 $ 72,000.00 Exceeds Average
7839 $ 120,000.00 Exceeds Average
7844 $ 36,000.00 Below Average
7876 $ 26,400.00 Below Average
7900 $ 22,800.00 Below Average
7902 $ 72,000.00 Exceeds Average
7934 $ 31,200.00 Below Average
When you use this form, you are actually nesting an IF statement inside the ELSE part of
an outer IF statement. Thus you need one END IF statement for each nested IF and one
for the parent IF-ELSE.
3.5.1.4 IF-THEN-ELSIF-ELSE
IF boolean-expression THEN
statements
[ ELSIF boolean-expression THEN
statements
[ ELSIF boolean-expression THEN
statements ] ...]
[ ELSE
statements ]
END IF;
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 212
Database Compatibility for Oracle® Developers Guide
IF-THEN-ELSIF-ELSE provides a method of checking many alternatives in one
statement. Formally it is equivalent to nested IF-THEN-ELSE-IF-THEN commands, but
only one END IF is needed.
The following example uses an IF-THEN-ELSIF-ELSE statement to count the number
of employees by compensation ranges of $25,000.
DECLARE
v_empno emp.empno%TYPE;
v_comp NUMBER(8,2);
v_lt_25K SMALLINT := 0;
v_25K_50K SMALLINT := 0;
v_50K_75K SMALLINT := 0;
v_75K_100K SMALLINT := 0;
v_ge_100K SMALLINT := 0;
CURSOR emp_cursor IS SELECT empno, (sal + NVL(comm,0)) * 24 FROM emp;
BEGIN
OPEN emp_cursor;
LOOP
FETCH emp_cursor INTO v_empno, v_comp;
EXIT WHEN emp_cursor%NOTFOUND;
IF v_comp < 25000 THEN
v_lt_25K := v_lt_25K + 1;
ELSIF v_comp < 50000 THEN
v_25K_50K := v_25K_50K + 1;
ELSIF v_comp < 75000 THEN
v_50K_75K := v_50K_75K + 1;
ELSIF v_comp < 100000 THEN