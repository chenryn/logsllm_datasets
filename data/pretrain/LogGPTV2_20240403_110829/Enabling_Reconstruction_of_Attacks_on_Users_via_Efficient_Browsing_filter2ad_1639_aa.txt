title:Enabling Reconstruction of Attacks on Users via Efficient Browsing
Snapshots
author:Phani Vadrevu and
Jienan Liu and
Bo Li and
Babak Rahbarinia and
Kyu Hyung Lee and
Roberto Perdisci
Enabling Reconstruction of Attacks on Users
via Efﬁcient Browsing Snapshots
Phani Vadrevu∗, Jienan Liu∗, Bo Li∗, Babak Rahbarinia†, Kyu Hyung Lee∗, and Roberto Perdisci∗
† Department of Math and Computer Science, Auburn University Montgomery, Alabama, USA
∗ Department of Computer Science, University of Georgia, USA
{vadrevu,jienan,bo,kyuhlee,perdisci}@cs.uga.edu, PI:EMAIL
Abstract—In this paper, we present ChromePic, a web browser
equipped with a novel forensic engine that aims to greatly enhance
the browser’s logging capabilities. ChromePic’s main goal is to
enable a ﬁne-grained post-mortem reconstruction and trace-back
of web attacks without incurring the high overhead of record-and-
replay systems. In particular, we aim to enable the reconstruction
of attacks that target users and have a signiﬁcant visual component,
such as social engineering and phishing attacks. To this end,
ChromePic records a detailed snapshot of the state of a web
page, including a screenshot of how the page is rendered and a
“deep” DOM snapshot, at every signiﬁcant interaction between
the user and the page. If an attack is later suspected, these ﬁne-
grained logs can be used to reconstruct the attack and trace back
the sequence of steps the user followed to reach the attack page.
We develop ChromePic by implementing several careful
modiﬁcations and optimizations to the Chromium code base, to
minimize overhead and make always-on logging practical. We
then demonstrate that ChromePic can successfully capture and
aid the reconstruction of attacks on users. Our evaluation includes
the analysis of an in-the-wild social engineering download attack
on Android, a phishing attack, and two different clickjacking
attacks, as well as a user study aimed at accurately measuring the
overhead introduced by our forensic engine. The experimental re-
sults show that browsing snapshots can be logged very efﬁciently,
making the logging events practically unnoticeable to users.
I.
INTRODUCTION
Web browsers have unfortunately become the preferred entry
point for a large variety of attacks. For example, through the
browser, a user may be exposed to malware infections via social
engineering attacks [31] or drive-by downloads [14], phishing
attacks [9], cross-site scripting [48], cross-site request forgery [4],
clickjacking [15], etc.
While the mechanics of these attacks (i.e., how they are
typically executed within the browser) are well understood, it is
often challenging to determine how users arrived to a given attack
page in the ﬁrst place. At the same time, tracing back the steps
through which an attack unfolds can be critical to fully recover
from an intrusion [18] and prevent future compromises. For
instance, security analysts and forensic investigators often try not
Permission  to  freely  reproduce  all  or  part  of  this  paper  for  noncommercial 
purposes  is  granted  provided  that  copies  bear  this  notice  and  the  full  citation 
on  the  ﬁrst  page.  Reproduction  for  commercial  purposes  is  strictly  prohibited 
without  the  prior  written  consent  of  the  Internet  Society,  the  ﬁrst-named  author 
(for reproduction of an entire paper only), and the author’s employer if the paper 
was  prepared  within  the  scope  of  employment.
NDSS  ’17,  26  February  -  1  March  2017,  San  Diego,  CA,  USA
Copyright  2017  Internet  Society,  ISBN  1-891562-46-0
http://dx.doi.org/10.14722/ndss.2017.23100
only to understand how a speciﬁc attack instance was executed
(e.g., ﬁnd the URL from which malware was downloaded), but
also attempt to put the attack into context by reconstructing
the steps that preceded it [30] (e.g., whether the user fell for a
social engineering attack and inadvertently triggered the malware
download). While existing browser and system logs may assist in
reconstructing a partial picture of how an attack page was reached,
these logs are often sparse and do not provide sufﬁcient details
to precisely reconstruct the events preceding the user landing on
the attack page, and what exactly happened afterwards.
Quoting [21], “we tend to lack detailed information [about
an attack] just when we need it the most.” Therefore, to enable
a detailed reconstruction and trace-back of web attacks we
need enhanced logging capabilities [19], [21], [28]. For instance,
systems such as ClickMiner [29] and WebWitness [30] rely on
full network trafﬁc logs (or traces) and deep packet inspection
to reconstruct the sequence of pages visited by users before they
reach an attack page (e.g., a malware download URL). However,
even by using full trafﬁc traces, these systems are sometimes
unable to precisely reconstruct all steps that brought a user to
encounter an attack page, due to the complexity of modern web
technologies and the consequent discrepancies between system
events (e.g., user-browser interactions) and the network trafﬁc they
generate [29], [30]. Furthermore, encrypted (e.g., HTTPS) trafﬁc
would all but prevent these systems from inferring the complete
path to the attack page. Other approaches, such as ReVirt [11]
and WebCapsule [28], go beyond network trafﬁc logging and
analysis, and instead focus on recording ﬁne-grained details at
the system level to enable full attack replay. However, whole-
system record-and-replay [10], [11] is computationally expensive,
and is especially difﬁcult to deploy on resource constrained
mobile devices. On the other hand, while in-browser record-and-
replay [28] can be more easily ported to mobile devices, it is
hindered by difﬁculties introduced by OS-level non-determinism
(e.g., due to thread scheduling) and can result in an inaccurate
replay of browsing sessions [28], thus preventing reliable attack
reconstruction. Furthermore, to enable replay, record-and-replay
systems typically require storing large amounts of information,
including all network trafﬁc generated by the browser.
In this paper, we present ChromePic, a web browser equipped
with a novel forensic engine aimed at greatly enhancing Chrome’s
logging capabilities. ChromePic’s main goal is to enable a ﬁne-
grained reconstruction and trace-back of web attacks without
incurring the high overhead typically associated with record-
and-replay systems such as [11], [28]. In particular, we aim to
enable the reconstruction of attacks that target users and have
a signiﬁcant visual component, such as social engineering and
phishing attacks. To this end, we focus on instrumenting Google
Chromium [40] (the open source project on which the Chrome
browser is based) to efﬁciently record a browsing snapshot at
every meaningful interaction between the user and the browser.
For example, every time the user clicks on a page or presses a
key (e.g., Enter), we record the input information (e.g., mouse
coordinates, key code, etc.) and the page URL shown in the
browser bar. Furthermore, we take a screenshot of the rendered
page, and a “deep” snapshot of the related DOM tree and
embedded resources (e.g., iframes, images, etc.). We refer to
this type of detailed browsing snapshots as webshots. Intuitively,
such rich logs would allow a security team or forensic analyst to
travel back in time and effectively reconstruct a user’s browsing
actions over a desired time window. In fact, we can consider the
screenshot contained in each webshot as a “video frame.” These
screenshots can then be stitched back together to reconstruct
precisely what the user saw during every signiﬁcant interaction
with the browser. Furthermore, each screenshot is associated with
the related full state of the DOM (including embedded objects
and JavaScript source code) recorded at the very same instant in
time. Namely, we record exactly how a speciﬁc page DOM was
structured, how it was rendered at the time of a user-browser
interaction, and how the user interacted with it, thus enabling an
analysis of how the attack was implemented. Our ChromePic
browser addresses the following challenges:
• Forensic Rigor: Our main goal (and challenge) is to enable
webshots to be taken synchronously with user-browser
interactions. Namely, let u(t0) represent a user-browser
interaction u (e.g., a mouse click or key press) that occurs
at time t0. Because we aim to prevent any (potentially
malicious) JavaScript code that listens on u from altering the
page before the webshot is taken, our goal is to “freeze” the
processing of u until we take both a screenshot of the page
currently displayed by the browser as well as a full DOM
snapshot. Only after the snapshot is completed the event u
will be released and processed by the browser. The need
for this synchronous snapshots constraint is motivated by
the fact that we intend to prevent any discrepancy between
what is logged in the webshot and what the user saw (and
the DOM of the page he/she interacted with) at the very
instant of time t0 when the event u occurred.
• Efﬁciency: As attacks cannot be easily predicted, ChromePic
aims to be always-on and continuously log webshots.
This allows us to record undetected (and unexpected)
attacks, in accordance with the compromised recording
design principle [33]. However, to make always-on logging
practical, efﬁciency is critical and logging overhead must be
reduced to a minimum. In particular, because webshots are
taken synchronously with each user input, we effectively
introduce a processing overhead that increases the natural
processing of input events. Therefore, the challenge we face
is to make sure that no negative effect (e.g., latency) will be
perceived by the user. Based on previous studies on human-
computer interaction [47], we target a logging time budget
of around 150ms, which would make the logging events
practically unnoticeable to users. To this end, we implement
a number of careful system-level browser modiﬁcations and
optimizations, which we describe in detail in Section IV.
• Transparency: We require webshots to be taken in a
transparent way w.r.t. the web pages that are being logged.
For instance, there should be no easy way for (malicious)
javascript code running on a page to detect whether the
interactions (inputs) between the user and the page are
being logged or not. In addition, webshots should also be
transparent to users, in that once they are enabled the user
should not notice any difference in the behavior of the
browser when webshots are being recorded.
In Sections IV and V we discuss why the existing snapshot-
taking capabilities currently implemented by Chromium do not
satisfy the above requirements. For instance, we describe the
implementation of a browser extension that attempts to meet the
same requirements described above using the existing extension
API, and demonstrate why such a solution is not viable.
The reader may notice that because ChromePic continuously
records detailed information about the state of the browser,
including visual screenshots, our system may produce numerous
logs, some of which may include sensitive information. While
protecting the security and privacy of the logs recorded by
ChromePic is outside the scope of this paper, it is important to
notice that existing solutions could be used to mitigate these
concerns. For example, sensitive URL whitelisting and log
encryption using a key escrow as proposed in [28] could also be
used in ChromePic. We discuss these solutions in more details in
Section VIII. Also, while a typical browsing session may result
in numerous webshots, often the changes to a page between
two consecutive user-browser interactions are minimal, thus
resulting in few changes between snapshots. This provides an
opportunity for storing only the difference between snapshots.
In addition, the visual screenshots can be reduced in size using
lossy compression, and the overall storage requirements for the
logs of each browsing session could be further reduced using
standard archiving tools. We discuss storage requirements in
more details in Section VII.
In summary, we make the following contributions:
• We propose ChromePic, a web browser equipped with a
novel forensic engine that aims to enable the reconstruction
and trace-back of web browser attacks, especially for attacks
that directly target users and have a signiﬁcant visual
component, such as social engineering and phishing.
• We develop ChromePic by implementing careful modiﬁ-
cations and optimizations to the Chromium code base, to
minimize overhead and make always-on logging practical.
In addition, we discuss why implementing ChromePic using
existing facilities, such as Chrome’s extension API, is not
a viable option.
• We demonstrate that ChromePic can successfully capture
and aid the reconstruction of attacks on users. Speciﬁcally,
we report the analysis of an in-the-wild social engineering
download attack on Android, a phishing attack, and two
different clickjacking attacks.
• We evaluate the efﬁciency of our solution via a user study
involving 22 different users who produced more than 16.5
hours of browsing activities on hundreds of websites. We
provide precise measurements about the overhead introduced
by ChromePic on multiple devices, including desktop and
laptop Linux systems as well as Android tablet devices.
Our results show that the vast majority of webshots can be
taken very efﬁciently, making them practically unnoticeable
to users.
2
II. WEBSHOTS
As mentioned in Section I, we aim to enable the reconstruction
and trace-back of web attacks that target users, with particular
focus on attacks that have a signiﬁcant visual component, such as
social engineering and phishing attacks. To this end, we design
ChromePic to embed an always-on forensic engine. Speciﬁcally,
we instrument the Chromium browser to record rich logs, called
webshots, that aim to capture the state of the rendered web pages
at every signiﬁcant interaction between the user and the browser.
A. What is a WebShot?
A webshot consists of the following components: (i) a
timestamp and other available details about the user input event
that triggered the webshot (e.g., mouse event type and related
screen coordinates, keypress code, etc.); (ii) the full URL of the
page with which the user interacted; (iii) a screenshot of the
currently visible portion of the web page (the viewport) rendered
by the browser; (iv) a “deep” DOM snapshot that consist of the
page’s DOM structure, all embedded objects (e.g., the content of
all images), the DOM and embedded objects of all iframes,
the JavaScript code running on the page, etc.
To satisfy the forensic rigor requirement mentioned in
Section I, webshots must be taken synchronously with the
triggering user input. This requirement, along with the always-on
operational goal for our ChromePic system, has a signiﬁcant
impact on the amount of overhead we can afford for producing
each webshot. In Section IV, we describe a set of very careful
code instrumentations and optimizations that make efﬁcient
webshots feasible.
B. Input Events that Trigger a WebShot
WebShots are triggered by user interactions with web pages.
In theory, we could take a screenshot for every single “raw” user
input event, including every mouse movement, every key-down
event, every tap or gesture on a touchscreen, etc. However, many
user input events (e.g., most mouse movements) have no real
changing effect on the underlying web page. Furthermore, to
reduce overhead, it is desirable to minimize the type and number
of events that actually trigger a webshot. At the same time, our
goal is to capture enough webshots to allow for the reconstruction
and trace-back of possible attacks. To balance these conﬂicting
goals, we trigger a webshot for each of the following events:
• Mouse Down: Mouse clicks are a common interaction
between users and web pages. Clicks often have important
consequences, such as initiating the navigation to a new
page, submitting a form, selecting a page element, etc. As
each click starts with a mouse down event, we trigger a
webshot for each such event.
• Tap: On touchscreen devices, taps are the initial event for a
variety of gestures, including “clicking” on a link or button.
Therefore, a tap often (though not always) has an effect
similar to a mouse down event. Therefore, we trigger a
webshot at every tap event.
• Enter Keypress: In many cases, pressing Enter has
the same effect as a mouse click, such as submitting a
form, navigating to a new link, etc. Therefore, we trigger a
webshot at every keydown event for the Enter key.
• Special Keys: We also trigger a screenshot every time a