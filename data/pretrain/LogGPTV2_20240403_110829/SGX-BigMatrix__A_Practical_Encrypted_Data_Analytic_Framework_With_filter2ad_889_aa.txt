title:SGX-BigMatrix: A Practical Encrypted Data Analytic Framework With
Trusted Processors
author:Fahad Shaon and
Murat Kantarcioglu and
Zhiqiang Lin and
Latifur Khan
SGX-BigMatrix: A Practical Encrypted Data Analytic Framework
With Trusted Processors
Fahad Shaon
The University of Texas at Dallas
Richardson, Texas
PI:EMAIL
Murat Kantarcioglu
The University of Texas at Dallas
Richardson, Texas
PI:EMAIL
Zhiqiang Lin
The University of Texas at Dallas
Richardson, Texas
PI:EMAIL
Latifur Khan
The University of Texas at Dallas
Richardson, Texas
PI:EMAIL
ABSTRACT
Recently, using secure processors for trusted computing in cloud
has attracted a lot of attention. Over the past few years, efficient
and secure data analytic tools (e.g., map-reduce framework, ma-
chine learning models, and SQL querying) that can be executed over
encrypted data using the trusted hardware have been developed.
However, these prior efforts do not provide a simple, secure and
high level language based framework that is suitable for enabling
generic data analytics for non-security experts who do not have
concepts such as “oblivious execution”. In this paper, we thus pro-
vide such a framework that allows data scientists to perform the
data analytic tasks with secure processors using a Python/Matlab-
like high level language. Our framework automatically compiles
programs written in our language to optimal execution code by
managing issues such as optimal data block sizes for I/O, vectorized
computations to simplify much of the data processing, and opti-
mal ordering of operations for certain tasks. Furthermore, many
language constructs such as if-statements are removed so that a
non-expert user is less likely to create a piece of code that may re-
veal sensitive information while allowing oblivious data processing
(i.e., hiding access patterns). Using these design choices, we provide
guarantees for efficient and secure data analytics. We show that
our framework can be used to run the existing big data benchmark
queries over encrypted data using the Intel SGX efficiently. Our
empirical results indicate that our proposed framework is orders of
magnitude faster than the general oblivious execution alternatives.
CCS CONCEPTS
• Security and privacy → Management and querying of en-
crypted data;
KEYWORDS
Secure data analytics; Intel SGX
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’17, October 30-November 3, 2017, Dallas, TX, USA
© 2017 Association for Computing Machinery.
ACM ISBN 978-1-4503-4946-8/17/10...$15.00
https://doi.org/10.1145/3133956.3134095
1 INTRODUCTION
Cloud computing has become an important alternative for large
scale data processing due to its high scalability and low cost. One of
the main challenges in cloud computing is protecting the security
and privacy of the outsourced data. Recently, efficient solutions that
leverage secure processors emerged as an important alternative for
protecting the data stored in the cloud (e.g., [46, 50, 56]).
Secure processors allow users to execute programs securely in
a manner that operating systems cannot directly observe or tam-
per with program execution without being detected. Previously,
one had to purchase specialized hardware to build such systems.
Recently, Intel has included a special module in CPU, named Soft-
ware Guard eXtension (SGX), into its 6th generation Core i7, i5, and
Xeon processors [33] that can execute software securely, even when
an operating system or a virtual machine monitor (i.e., hypervi-
sor) is compromised. In short, SGX reduces the trusted computing
base(TCB) to a minimal set of trusted code (programmed by the
programmer) and the SGX processor, where TCB of a system is the
set of all components that are critical to its security.
Still, building a robust secure application with SGX is non-trivial
due to several shortcomings of the SGX architecture. In particular,
operating systems can still monitor memory access patterns by
the secure trusted code. It has been shown in [34, 44] that access
pattern leakage can reveal a significant amount of information
about encrypted data. Furthermore, SGX is a memory constrained
environment. Current version of SGX can only support up to 128MB
of memory for secure code execution, which includes on demand
memory allocation using malloc or new. In our experiments, we
observe that we can allocate at most about 90MB effectively for
storing data. Therefore, we still need efficient memory management
mechanisms to process large datasets.1 Finally, the SGX architecture
does not have built-in support for secure multi-user interactive
computation.
In this paper, we present a generic data analytics framework
in a cloud computing environment using SGX. We consider two
setups: (1) Single user scenario, where a single end user has a large
amount of data and wants to perform data analytics tasks using
cloud computing infrastructure. However, the user does not trust
the cloud provider with data and wants to perform operations
1It is worth to mention that, Intel also proposed a general dynamic memory allocation
mechanism for the next version of SGX in [42]. However, to efficiently analyze very
large datasets, we still need some form of memory allocation mechanisms.
on the encrypted data. (2) Multi-user scenario, similar to secure
multi-party computation, where multiple users possess data that
they want to use together to perform complex data analytics tasks.
However, these users do not trust other participants with their
input data, but they trust a central SGX based system due to its
security guarantees and willing to share the output of the analytics
operations with everyone. For example, such a setup can be used
among law enforcement organizations to build threat detection
models without actually sharing information other than the final
result.
In our framework, we built a programming language that allows
data scientists to build data analytic programs with basic operations.
Our Python inspired language is designed to vectorize computa-
tions to enable simple and efficient representation of many practical
data analysis tasks. Furthermore, to enable such vectorized compu-
tation, we build an efficient matrix abstraction for handling large
data. To that end, we propose BigMatrix abstraction, which handles
encrypted matrix data storage transparently and allows data scien-
tists to access data in a block-by-block manner with integrity and
privacy protection. In addition, our programming language does
not allow certain constructs such as “if-statement” that may make
it hard to create efficient oblivious executions. For example, a data
scientist who wants to compute the average income of individuals
may typically write a for-loop with if statements to compute such
average (see the listing below).
sum = 0 , count = 0
f o r
i = 0 to Person . l e n g t h :
i f Person . age >= 5 0 :
count ++
sum += P . income
p r i n t
sum / count
With our framework, such a computation needs to be done using
Python NumPy [6] or pandas [7] like constructs with vectorization.
th tuple
In the listing below, binary vector S that returns 1 for i
when the selection condition is satisfied (‘age’ > 50), which is used
for computing the average income using the element-wise product
operation. As we discuss later, such a vectorized computation auto-
matically hides important sensitive information such as data access
patterns.
S = where ( Person ,
p r i n t
( S . ∗ Person [ ' income ' ]
" Person [ ' age ' ] >= 5 0 " )
/ sum ( S )
)
By designing, efficient and oblivious matrix sorting, selection,
and join operations, combined with simple for-loops, we show that
all most all of the practical data analytics tasks can be programmed
and executed in our framework. Furthermore, during our experi-
mental evaluation, we observed that block sizes and the order of
certain operations (e.g., SQL like operations) has an impact on exe-
cution time. As such, we proposed an optimization mechanism with
the programming abstraction, that will find the optimum execution
policies for a given sequence of basic operations. In addition, to
utilize our proposed data analytics framework, we have provided
specific protocols to load code and data, provision and execute
program, and distribute the result. Furthermore, we emphasize on
building data oblivious system, where code execution does not de-
pend on data. Instead of using generic complex Oblivious RAM
(ORAM) algorithm (e.g., [53]) to hide data access patterns, we lever-
age our knowledge of the vectorized computation algorithms to
provide operation specific but very efficient oblivious algorithms. We
have made all of our individual operations to be data oblivious and
provided a theoretical proof that combination of such operations
remains oblivious. As a result, an adversary cannot learn extra
information based on data access alone.
Contributions. The main contributions of this paper can be sum-
marized as follows:
• We propose a generic framework for secure data analytics in
an untrusted cloud setup with both single user and multi-user
settings. Compared to existing work that leverages trusted
processors (e.g., relational database system [13, 15], map-
reduce [50], sql execution on spark [56], etc.), to our knowl-
edge, we are among the first to provide a high level python
inspired language that allows efficient, generic, and oblivious
execution of data analytics tasks.
• We present BigMatrix, an abstraction for handling large
matrix operations in a data oblivious manner to support vec-
torization (i.e., represent various data processing operations
as matrix operations).
• We also provide a programming abstraction that can be used
to execute a sequence of commands obliviously with opti-
mum cost. We also theoretically prove that combinations of
oblivious methods remains oblivious.
• We have implemented a prototype showing the efficiency of
our proposed framework compared to existing alternatives.
2 BACKGROUND
In this section we provide necessary background on Intel SGX and
Data Obliviousness, in order to understand the motivation and
design of our framework.
2.1 Intel SGX
Intel SGX is a new CPU extension for executing secure code in Intel
processors [12]. In SGX computation model, programmers need
to partition the code into trusted and untrusted components. The
trusted code is encrypted and integrity protected, but the untrusted
code is observable by the operating system. During the program
execution, the untrusted component creates a secure component
inside the processor called enclave and loads trusted code into it.
After creating the enclave, users can verify that intended code is
loaded and securely provision the code with secret keys, which
is called attestation. Internally, the infrastructure uses Enhanced
Privacy ID (EPID) [22] for hardware based attestation. In addition,
trusted and untrusted components communicate between each
other using programmer defined entry points. Entry points defined
in trusted code is called ECalls, which can be called by untrusted part
once enclave is loaded. Similarly, entry points defined in untrusted
code is called OCalls, which can be called by the trusted part. More
details about the SGX execution model are described in [24, 48].
2.2 Data Oblivious Execution
A program is called data oblivious if for all data inputs the program
executes exactly the same code path. The main benefit of data obliv-
iousness is that any powerful adversary that is capable of observing
code execution, does not learn anything extra about the data based
on the code execution path. To explain data obliviousness, we also
have to clearly define the capabilities of an adversary in our design.
We assume that an adversary in an SGX environment can observe
memory accesses, time to execute, OCalls, and any resource usages
from OCalls. However, an adversary in SGX cannot observe internal
CPU registers.
We define a program is data obvious in the SGX environment if
the same memory regions are accessed for all possible input datasets.
For example, data arithmetic operations, such as add, mult, etc.,
are by definition data oblivious because the instruction performs
the same task irrespective of any input data. However, conditional
2 are not data oblivious because these
instructions, such as, jne, jeq
instruction force different part of the code to be executed based on
input data.
To implement programs that require such conditional operations,
we first assign values from different possible code paths, to different
registers, then set a flag based on the condition that we want to
test, swap according to the flag, and finally return the contents
of a fixed register. Such techniques are used in previous works
(e.g., [46, 49]). Data oblivious approach of programming protects
against attacks from access pattern leakage as described in [34, 44].
Because these attacks are based on the frequency of data access for
different input and data obliviousness guarantees that data access
frequency should be the same irrespective of same sized input data.
3 SECURE DATA ANALYTICS FRAMEWORK
Processing a large amount of data with Intel SGX is particularly dif-
ficult because of the limited memory of a given enclave. In current
SGX processor we can allocate at most about 90MB of dynamic
memory inside an enclave. In addition, as discussed in subsec-
tion 2.2, data access patterns during encrypted data processing
could also leak significant information.
Furthermore, from our own experience, we observe that Intel
SGX development life cycle is somewhat time consuming. We first
need to divide the whole program into two components - trusted
and untrusted parts with defined entry points. Next, we have to care-
fully implement the required algorithms in trusted part in C/C++.
Finally we have to deploy into a SGX server, verify the loaded code,
provision secret, and finally run the code. However, in modern data
analytics, we observe that data scientists tend to prefer interactive
tools. In fact, popular analytical platforms (such as R [8], Octave [4],
Matlab [5], Apache Spark [1], etc.) offer REPL (Read-Eval-Print
Loop) environments where users can perform operations on data,