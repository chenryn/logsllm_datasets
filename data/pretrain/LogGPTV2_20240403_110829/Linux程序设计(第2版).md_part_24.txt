sprintf (mapped[43] .string. *REcoRD=$d*,mapped(43] . integer) ;
msync((void *)mapped, NRgcoRDs*sizeof (record), MS_ASYNC):
munmap( (void *)mapped, NREcoRDs*sizeof (record)1 :
close(f};
: 0)xa
在后续章节的内容里我们还将学习另外一种内存共享功能，即SystemV系统的共享内存
技术。
3.10本章总结
在这一章里，我们学习了UNIX所提供的直接访问文件和设备的方法。我们介绍了在那些底
层函数的基础上建立库函数以达成程序设计问题灵活解决方案的方法。通过这一章的学习，我
们已经能够只用几行代码就编写出功能比较强大的子目录扫描程序。
我们在这一章里对文件和子目录进行了充分的学习，并在此基础上把我们在第2章末尾编写
的CD唱盘管理软件转换为一个C语言程序。我们使用的解决方案更具结构化特点，更贴近文件。
在这一阶段，我们还无法给这个程序增加什么新的功能，所以对整个程序的重写工作将延续到
我们学习了屏幕显示和键盘输人方面更多处理手段之后再进行，面这恰好是后两章的主题。
加入java编程群：524621833
---
## Page 120
第4章UNIX环境
当我们为UNIX编写程序的时候，必须想到这个程序将运行在一个多任务环境里。这句话的
意思是与此同时还会有其他程序在运行，它们和我们的程序一起共享着内存、磁盘空间、CPU
时间等计算机资源。甚至有可能同时运行着同一程序的多个实例。让这些程序彼此相安无事是
很重要的，它们应该了解周围的情况并采取适当的措施保证这一点。
在这一章里，我们重点学习程序运行在其中的环境、程序如何通过那个环境来了解自身的
操作处境，面程序的使用者又如何影响它们的行为。准确地说，我们将学习以下内容：
·向程序传递参数。
·环境变量。
·查看时间。
·临时文件。
·获取用户和主机的有关资料。
·生成和配置系统日志信息。
/
·了解系统各项资源的限制。
4.1程序参数
当一个用C语言编写的UNIX程序开始运行的时候，它是从函数main开始的。UNIX程序中的
main函数是像下面这样被定义的：
Int asln(iat argc,cber *argv[]))
其中argc是程序参数的个数；而argv是一个字符串数组，里面保存着参数的值。
我们有时候会看下面这样的main函数定义：
nain( ):
这样也行，因为main函数的返回值类型被默认为是int，面函数中用不着的参数不需要被声
明。argc和argv倒是还在那里，可如果没有对它们做出声明，就不能使用它们。
不管操作系统何时开始运行一个程序，参数argc和argv都将被设置和传递到main函数里去。
这些参数通常都是由其他程序提供的--一大部分情况下它总是请求操作系统运行新程序的那个
shell。shell接收到用户输入给它的命令行，把它分断为一个一个的单词，再把那些单词保存到
argv数组里。请记住，UNIX操作系统的shell会在设置argc和argv参数之前对文件名进行通配符
扩展，而DOS则要求程序接受带通配符的参数。
举例来说，如果我钉在shell里给出了如下所示的命令：
S yprog left right 'and center
那么，myprog程序将从main函数开始执行，并且带有如下所示的参数：
加入jaVa编程群：524621833
---
## Page 121
f02
Linux程序设计
argc:4
argv:（“ayprog”，“left"，"right"，*and center′)
注意：参数计数里包括程序名本身，而argv数组中的第一个元素argv[0]就是程序名。又因为
我们在shell命令行里使用了引号，所以第四个参数是一个包含着空格的字符串。
如果读者曾经使用ISO/ANSI标准下的C语言进行过程序设计，就应该熟悉以上这些规定。
main中的参数对应于shel1脚本程序中的位置参数“SO”、“$1”等。在SO/ANSI标准里只规定了
main的返回值必须是一个“int”类型的整数，但在X/Open技术规范里则对此做出了明确的定义
声明。
命令行参数在向程序传递信息方面是很有用的。在一个数据库应用软件里，我们可以把希
望使用的数据库的名字传递给程序，这样就可以使同一一个程序用于不止一个的数据库上。许多
工具程序也通过命令行参数改变其行为或设置其命令选项。在对这些我们所谓的标志或开关进
行设置的时候，一般都要在它们的前面加上一个短划线字符（-）。请看下面的例子，sort程序通
过一个“-r”开关对文件内容进行逆排序。
S sort ·r file
命令行选项是很常见的，按统一的方法来使用它们会给程序的使用者减少不少麻烦。在过
去，每一种工具程序都有它们自已对待命令行选项的办法，而这时不时地会引起一些误会和混
乱。下面这些命令在使用参数上就各有各的办法：
$tar cvfB/tup/file.tar 1024
§ dd if=/dev/tdoof=/tnp/file.dd bs=18k
$1s-1-t
搬开各具特点的语法格式不说，单是把所有这些命令选项的顺序和含义都记住就已经够困
难的了。面解决这一问题的办法通常只有求助于“-h”（帮助）选项或某个man命令下的使用手
册页，而这还要看程序员有没有提供它们。我们很快就会看到，工具函数gelopt提供了一个简洁
的解决这些问题的办法。现在先来看看被传递到程序中的参数是如何得到处理的。
动手试试：程序参数
下面这个args.c程序对它自己的参数进行检查。
include 
nt main(int argc, char *argv[11
int arg:
if(argv[arg][0] =s
printf(*option: ss\n*. argv[arg]+11;
else
printf(*argunent d: s\n*, arg, argvarg]) :
{0)x
当我们运行这个程序的时候，它会打印出自己的参数并对其选项（简单说来就是以连字符
加入jaVa编程群：524621833
---
## Page 122
104Linux程序设计
getopt的返回值是在argv数组中找到的下一个选项字符（如果还有的话）。环调用getopt就
可以按顺序找出全部的选项。具体做法如下：
1)如果选项有一个关联值，则外部变量optarg将指向这个值。
2）如果选项处理完毕，getopt返回“-1”。特殊参数“”将使getopt停止扫描选项的工作。
3）如果遇到一个无法识别的选项，getopt返回一个问号“？”，并把该选项保存到外部变量
optopt里去。
）
个冒号“：”
外部变量optind被设置为下一个待处理选项的索引下标，getopt用它来提醒自己已经走了多
远。用户很少需要在程序中对这个变量进行设置。选项都处理完毕后，optind将指向在argv数组
的尾部可以找到其余参数的地方。
有些版本的getopt会在它遇到第一个非选项参数处停下来，返回“-1”并设置optind的值。
而另外一些，比如Linux提供的版本，能够对付出现在程序参数任意位置上的选项。注意：在这
种情况下，实际已经由getopt重写了argv数组，把所有非选项参数都集中到argv数组的后部去了，
它们的其始位置是argv[optind]。GNU版本getopt的这一行为是由环境变量POSIXLY_CORRECT
控制的，如果它被置位，getopt就会在第一个非选项参数处停下来。此外，还有一些版本的
getopt会在遇见无法识别的选项时给出一个出错信息。根据POSIX技术规范的说法，如果opterr
变量是非零值，getopt就会向stderr输出一条出错信息。上述两种行为的例子我们马上就会看到，
动手试试：getopt函数的用法
我们在例子里使用了getopt，并把这个新程序叫做argopt.C。
#include 
#include 
int main(int argc, char *argv[11
int opt:
whileI[opt = getopt(argc,argv,*if:lr*))!=-1){
switch(opt)(
case 'i':
case 'r':
printf(*option: c\n*, opt);
break;
case 'f':
case ':':
printf(*option needs a value\n*);
break;
case '?':
printft*unknom option:cn*, optopt1:
break;
exit(0):
printf(*argument: $s\n*, argv[optind]);
加入jaVa编程群：524621833
---
## Page 123
第4章UNIX环境
105
现在，当我们运行这个程序的时候，就会看到全体命令行参数都被自动处理好了：
$./axgopt -i -1r 'hi there'-f fred.c -q
opt ion: 1
option:
filenane; fred.c
option: r
argopt: invalid option---q
azgument: hi there
unknown option: q
操作注释：
程序循环调用getopt对选项参数进行处理直到没有遗漏为止，此时getopt会返回“-1”：每个
选项都有与之对应的处理动作，对未知选项或缺失取值的处理也包括在内。如果读者使用的
getopt版本与我们的不一致，看到的结果可能也会和上面显示的不同，特别是出错信息，但大概
意思应该差不多。
选项都处理完毕后，程序像以前一样把其余的参数都打印出来，但这次是从optind位置开
始的。
4.2环境变量
我们在第2章见过环境变量。这些变量可以用来控制shell脚本程序和其他程序的操作行为。
我们也可以用它们来配置用户环境。举例来说，每个用户都有一个HOME环境变量，它定义了
用户的登录子目录路径，即用户工作的默认出发点。正如大家已经看到的，我们可以在shell提
示符上查看环境变量。如下所示：
$ echo $HOKE
/hone/nei1
我们还可以通过shell的sct命令列出所有的环境变量。
在UNIX技术规范里定义了许多标准的环境变量，它们的用途各不相同，其中包括终端类型、
默认编辑器、时区等。C语言程序可以通过putenv和gctenv两个函数来访问环境变量。
#include 
chax *getenv(conat char *name))
int putenv(const char *string);
环境是由“name=value”形式的字符串构成的。getcnv函数的作用是在环境中检索一个给定
名字的字符串，其返回值是与该名字关联着的取值。如果给定变量不存在，它就返回“null”。
如果给定变量存在但没有关联值，结果就会是getenv成功地取回一个字符串，但字符串的第一个
字节是“null”。getenv取回的字符串保存在由getcnv提供的静态变量里，不允许被应用程序（比
如其他后续的gctenv）调用、覆盖。
putenv函数的作用是把一个“name=valuc”形式的字符申添加到当前环境里去。如果因为可
用空间缺乏的缘故而使它无法对环境进行扩展，它就会失败并返回“-1”。如果出现这样的情况，
错误代码变量ermo将被设置为ENOMEM。
我们来编写一个小程序，它能够把我们选取的任何环境变量的值输出出来。如果在调用这
加入jaVa编程群：524621833
---
## Page 124
106
Linux程序设计
个程序的时候我们还给出了第二个参数，就表示将对它的值进行设置。
动手试试：getenv和putenv函数
1)main函数声明后面的那几条语句用来保证environ.c能够被正确调用：
#include 
#inelude 
#include 
int main(int argc, char *argv[])
char *var, *value;
if（argc == 1 1i axge > 3) {
fprintfistderr,*usage: environ var [value] n*1:
1
exit(1) :
2)接下来，我们用getenv从环境中取出环境变量的值：
value 2 getenv(var):
:[]Abx = 1eA
if (value)
printf(*Variable s has value $s\n*, var, value):
else
printf (*variable ss has no valuen*, var);
3）然后，我们检查调用这个程序的时候是否还有第二参数。如果有，我们就通过构造一个
“name=value”形式的字符串，再调用putenv把第二参数的值赋给那个环境变量：
if(argc == 3){
char *string:
string = malloc(strlen(var) +strlen(value)+2);
value = argv[2]:
ift!string)（
fprintf(stderr,*out of mepory\n*):
exit(1) ;
strcat(string.*=*):
strcpy(string.var);
printf(*Calling putenv with: as\n*,string):
strcat (string.value):
if(putenv(string}I= 0)(
fprintf(stderr,*putenv failed\n*);
(fu,16)a01
exit (1) ;
4）最后，我们再次调用getenv查看环境变量的新值：
value = getenv(var) ;
if (value)
printf (*New value of s is &s\n*, var, value) ;
eise
printf(*New value of %s is null??\n", var):
exit(0) ;
当我们运行这个程序的时候，就可以查看和设置环境变量了：
加入jaVa编程群：524621833
---
## Page 125
第4章UNIX环境
107
Variable H0ME has value /home/neil
S environ EONE
Variable FRED has no value
S environ TRED
S environ rRgD hello
Variable PRED has no value
Variable FRED bas no value
S environ rRED
注意：一个程序对应一个环境。在程序里做出的修改不会影响到它环境以外的东西，因为
变量值不会从子进程（比如我们的程序）传递回父进程（比如shell）。
4.2.1环境变量的用途
程序经常通过环境变量改变它们工作的方式。用户可以通过下面这些办法来设置这些环境
变量的值：在缺省环境中进行设置、通过自已登录sheli读取的某个.profile文件来设置、通过