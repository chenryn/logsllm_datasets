−−−−−−→ fileAccess(read, fileA). Note that
D as A.R
B1
fileAccess(read, fileA) is not an entity. This delega-
tion should be interpreted as being from B1 to a dummy en-
tity representing the request fileAccess(read, fileA).
An RT D system assigns a unique dummy entity to each
request. That B1 is making the request req using all its ca-
pacities is represented by B1
all−−→ req.
Delegation of role activations is delegation of the capac-
ity to act in a role. It is a different kind of delegation from
delegation of authority to deﬁne a role, as in a role-deﬁnition
12
credential “A.R ←− B.R”. These differences will be fur-
ther discussed in the following section.
6.1 Translation to logic rules
Now, let us consider what credentials (both deﬁnition
credentials and delegation credentials, which include re-
quests) mean in RT D. Again, we do this by present-
ing a translation to logic rules. We introduce the predi-
cate forRole. An logical atom forRole(B, D, A.R) reads
B is acting for “D as A.R”; it means that B is acting
for the role activation in which D activates A.R. The
atom forRole(B, D, A.R) is true when D is a member
of A.R and D delegates this role activation through a
chain to B. Note that D has to be a member of A.R for
forRole(B, D, A.R) to be true. That D is a member of A.R
is equivalent to forRole(D, D, A.R).
Being delegated the capacity to act in a role is strictly
weaker than being a member of the role. The former is
represented by forRole(B, ?y, A.R) and the latter is rep-
resented by forRole(B, B, A.R). This difference is most
clearly shown in the translation of type-3 credentials below.
The translation described below subsumes the transla-
tions in section 5.1 for role deﬁnition credentials. Trans-
lation for O-set deﬁnition credentials remain unchanged.
• A delegation credential B1
D as A.R
−−−−−−→ B2 is translated
to:
forRole(B2, D, A.R)←−
forRole(B1, D, A.R).
This rule means that B2 is acting for “D as A.R” if
B1 is doing so. Note that D is the source of the capac-
ity to act in the role A.R, and the entity D is always
explicitly maintained during the inferencing.
• A delegation credential B1
D as all
−−−−−→ B2 is translated
to:
forRole(B2, D, ?r)←−
forRole(B1, D, ?r).
This rule means that if B1 is acting for D activating a
role (any role), then B2 is doing so as well.
• A delegation credential B1
forRole(B2, ?y, ?r)←−
forRole(B1, ?y, ?r).
all−−→ B2 is translated to:
This rule means that if B1 is acting for an entity (any
entity) activating a role (any role), then B2 is also do-
ing so. This is a delegation of all capacities.
• A request is translated the same way as a delegation
credential; the request is replaced by the dummy entity
−−−−−→ req is
corresponding to it. For example, B D as all
translated to:
forRole(ReqID, D, ?r)←−
forRole(B, D, ?r).
Here, ReqID is the dummy entity for the request req.
If a request req is governed by the role A.R, and
ReqID is the dummy entity for req, then the request
req is authorized if forRole(reqID, ?y, A.R) is true.
Note that the above authorization query has a variable
?y. This means that on whose behalf this request is
issued does not affect whether the request should be
authorized. However, this variable will be instantiated
by the authorizing chain, and the resulting information
can be used in auditing. So, while delegation is not di-
rectly controlled, it can be regulated through auditing
mechanisms.
• From A.R←− D to
forRole(D, D, A.R).
This rule means that D is acting for itself as A.R, i.e.,
D is a member of A.R.
• From A.R←− B.R1 to
forRole(?z, ?y, A.R)←−
forRole(?z, ?y, B.R1).
This rule means that anyone who is acting for “?y
as B.R1” is also acting for “?y as A.R”, i.e., acti-
vating B.R1 implies activating A.R because B.R1 is
more powerful than A.R. Note that this rule subsumes
forRole(?z, ?z, A.R) ←− forRole(?z, ?z, B.R1),
which means that any member of B.R1 is also a mem-
ber of A.R.
• From A.R←− A.R1.R2,
when size(R1) = 1, to
forRole(?z, ?y, A.R)←−
forRole(?x, ?x, A.R1),
forRole(?z, ?y, ?x.R2).
This rule means that when ?x is a member of A.R1,
activating B.R2 implies activating A.R. Note that ?x
has to be a member of A.R1; it is insufﬁcient if ?x is
just delegated the capacity to act in the role A.R1. This
is because the credential A.R ←− A.R1.R2 implies
A.R←− B.R2 only when B is a member of A.R1.
when size(R1) = k > 1, to
forRole(?z, ?y, A.R)←−
forRole(?x, ?x, A.R1),
forRole(?z, ?y, ?x1.R2),
··· ,
forRole(?z, ?y, ?xk.R2),
set k(?x, ?x1, . . . , ?xk).
When an entity is a member of a role, it implicitly has
the capacity to act in the role. However, the converse
does not hold. In particular, when one is delegated the
capacity to act to in a role, although one can access
resources by using this capacity, one cannot use this
capacity to affect the meanings of the deﬁnition cre-
dentials it issued. Role memberships are determined
only by deﬁnition credentials and are not affected by
delegation credentials. Thus, delegated capacity pro-
vides no additional authority to deﬁne roles.
• From A.R←− B1.R1 ∩ ··· ∩ Bk.Rk to
forRole(?z, ?y, A.R)←−
forRole(?z, ?y, B1.R1),
··· ,
forRole(?z, ?y, Bk.Rk).
• From A.R←− B1.R1 (cid:12) ··· (cid:12) Bk.Rk to
forRole(?z, ?y, A.R)←−
forRole(?z, ?y1, B1.R1),
··· ,
forRole(?z, ?yk, Bk.Rk),
set k(?y, ?y1, . . . , ?yk).
• From A.R←− B1.R1 ⊗ ··· ⊗ Bk.Rk to
forRole(?z, ?y, A.R)←−
forRole(?z, ?y1, B1.R1),
··· ,
forRole(?z, ?yk, Bk.Rk),
niset(?y, ?y1, . . . , ?yk).
In addition to being strictly weaker, delegation of role ac-
tivations is also intended to be different from delegation of
authority in that it is more dynamic, in the following sense.
First, delegation credentials are not stored in a distributed
fashion and searched as are deﬁnition credentials. Instead,
each entity keeps the chain of delegation credentials ending
at itself, and passes this chain when delegating to other en-
tities. Second, delegation credentials typically accompany
a request (which itself is represented by a delegation cre-
dential) and are processed and used when processing the re-
quest. As a contrast, deﬁnition credentials are often prepro-
cessed and stored. Third, delegation credentials typically
have a shorter valid life time than deﬁnition credentials.
Proposition 4 Adding RT D adds a factor of O(N) to the
complexity.
Proof. For the rules resulting from deﬁnition credentials,
there is an additional variable of type entity per rule. This
adds an additional O(N) factor.
We need to be careful when instantiating rules re-
sulting from delegation credentials that involve the key-
all−−→ B2 is translated to
word all. For example, B1
13
“forRole(B2, ?y, ?r) ←− forRole(B1, ?y, ?r)”. Rules that
have the variable ?r should be instantiated last. We now
show that they do not increase the complexity bound.
Consider how many ways one can instantiate the clause
“forRole(B2, ?y, ?r) ←− forRole(B1, ?y, ?r),” which is
the most expensive kind of clauses resulting from delegation
credentials. Suppose that we are not using RT T . The vari-
able ?y needs to be instantiated with O(N) entities, and ?r
needs to be instantiated with the roles that appear in the head
of some ground rules, for which there are at most O(N v+1).
So the clause needs to be instantiated in O(N v+2) ways,
which is the same as that of clauses resulting from type-3
credentials. When we are using RT T , then ?y can be in-
stantiated in O(N t) ways, where t is the maximum size of
all roles, and the number of ways to instantiate ?r is still
O(N v+1), and so the total number of ways to instantiate is
O(N v+1+t) = O(N v+2t).
6.2 Examples using RT DT
1
Example 8 In a small organization SOrg, any purchasing
order has to be submitted and approved before it is placed.
Any employee can submit a purchasing order. A manager
can approve an order. A manager is also an employee; how-
ever, a manager cannot approve his own order. This can be
represented as follows:
SOrg.place ←−SOrg.submit ⊗ SOrg.approve
SOrg.submit ←− SOrg.employee
SOrg.approve ←− SOrg.manager
SOrg.employee ←− SOrg.manager
SOrg.manager ←− Alice
SOrg.manager ←− Bob
Suppose that both Alice and Bob and managers:
Alice can submit an order by issuing:
Alice
Alice as SOrg.employee
−−−−−−−−−−−−−−−−−→ order(orderID)
And Bob can approve it by issuing:
Bob as SOrg.approve
−−−−−−−−−−−−−−→ order(orderID)
Bob
Then one can prove that
forRole(ReqID,{Alice, Bob}, SOrg.place),
where ReqID is
order(orderID).
the dummy principal
representing
If Bob does not issue the above approval and Alice ap-
proves the order by also issuing:
Alice
Alice as SOrg.approve
−−−−−−−−−−−−−−−−→ order(orderID)
One still cannot prove that
forRole(ReqID,{Alice, Bob}, SOrg.place).
Now consider another example, which is from [1].
It
is not exactly the same, because the logic in [1] (which we
will call the ABLP logic) has both groups and roles and uses
roles differently. However, it captures the intended scenar-
ios and policies. This example is expressed in RT straight-
forwardly.
Example 9 A server S authorizes fileA to be deleted if it
is requested from a good workstation on behalf of a user. S
knows that alice is a user and trusts CA in certifying public
keys for users. S knows that ws1 is a good workstation and
trusts CA in certifying public keys for workstations. These
are expressed in the following credentials:
S.del(fileA) ←− S.user ⊗ S.goodWS
S.user ←− CA.userCert(alice)
S.goodWS ←− CA.machineCert(ws1)
The following are credentials issued by CA:
CA.userCert(alice) ←− K alice
CA.machineCert(ws1) ←− K ws1
In the setting studied in [1], a work station stores its private
key in tamper-resistant ﬁrmware. When it boots, it gener-
ates a key pair for the operating system and issues a cre-
dential to delegate the activation of S.goodWS to the new
key. When the user alice logs into a workstation ws1, a
new process p1 is set up and a new key pair is generated.
Through p1, alice then makes a request to the server S to
delete fileA. The process p1 sets up a secure channel Ch to
the server, and then sends the request through the channel.
The following are delegation credentials that are needed.
K ws1 as S.goodWS
−−−−−−−−−−−−−→ K os1
−−−−−−−−−−−−−→ K p1
K ws1 as S.goodWS
−−−−−−−−−−−−−→ K p1
K ws1
K os1
K alice K alice as S.user
K p1
The request sent by K Ch to delete fileA on behalf of
user alice working on a good workstation is represented as:
−−−−−−−−−−−−−−−−−−−−−−−−−−−→ del(fileA).
−−−−−−−−−−−−−−−−−−−−−−−−−−−→ K Ch
K ws1 as S.goodWS, K alice as S.user
K ws1 as S.goodWS, K alice as S.user
K Ch
And this request should be authorized.
7 Discussions, Future, and Related Work
We have implemented and used RT0, and we are in
the process of implementing other components of the RT
framework. The RT0 inference engine is implemented in
Java, using algorithms described in [20]. We have con-
structed two demonstration applications using RT0, a dis-
tributed scheduling (calendar) system and a web-based ﬁle
sharing system. They are implemented by translating poli-
cies from a user interface into RT0. Policies in these two
applications often require features outside of RT0. These
needs drove the development of the features reported in this
paper, as well as additional features discussed in section 7.2.
Currently, policies using features outside RT0 are handled
by adding an ad-hoc layer on top of RT0. We are in the
14
process of extending the algorithms in [20] to other, more
expressive, components in the framework and implement-
ing them. We will then use them to replace the ad-hoc layer.
In general, credentials may contain sensitive informa-
tion. To protect sensitive credentials while allowing them
to be used in a decentralized environment, ABAC can be
applied to credentials, as to any other resource. Trust can be
established between two entities in such a context through
an iterative process of revealing credentials to one another,
called a trust negotiation [27]. Concurrently with the de-
sign of RT , we are developing a system for automated trust
negotiation that supports RT . A design supporting RT0 is
presented in [26], where additional references to work in
this area can also be found.
7.1 Implementation
A straightforward approach to implement an inference
engine for RT is to use the translation process described in
this paper together with a Datalog inference engine. How-