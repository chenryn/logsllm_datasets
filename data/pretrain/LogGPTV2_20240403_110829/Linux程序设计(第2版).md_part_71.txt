·管道的定义。
·进程管道。
·管道调用。
·父进程和子进程。
·命名管道：FIFO文件。
·客户/服务器架构。
12.1什么是管道
我们把从一个进程连接到另一个进程的一个数据流称为个“管道”。我们通常是把一个进
UNIX用户应该对链接shell命令的概念很熟悉了，这就是把一个进程的输出直接馈人另一个
的输人。对shell命令来说，它们是象下面这样输人的：
cmd1|cmd2
shell负责安排两个命令的标准输人和标准输出，这样：
cmd1的标准输人来自终端键盘。
·cmdi的标准输出馈人cmd2做为它的标准输入。
cmd2的标准输出连接到终端屏幕。
shell所做的工作从最终效果上看是这样的：重新安排标准输入和标准输出流之间的连接，
使数据从键盘输人流过两个命令再输出到屏幕（见图12-1）。
标准输出
标准人
雷12-1
加入jaVa编程群：524621833
---
## Page 370
352Linux程序设计
我们将在这一章里看到怎样才能在程序里获得这样的效果，怎样才能用管道把多个进程连
接起来去实现一个简单的客户/服务器系统。
我们曾经在第5章里提到的伪终端设备和这里将要介绍的管道非常相似，但前者更加专业化，
我们不准备在这重讨论它们。
12.2进程管道
popen和pclose这两个函数大概是两个程序之间传递数据最简单的办法了。它们的框架定义
如下所示：
#include 
int pclose(FiLg *atream_to_close);
12.2.1popen函数
popen函数允许一个程序把另外一个程序当做一个新的进程来启动，并能对它发送数据或者
接收数据。command字符串是待运行程序的名字和相应的参数。open_mode必须是“r”或“w”
如果open_mode是“r"，调用者程序就可以使用来自被调用程序的输出，调用者程序利用
popen返同的那个“FILE*”类型的指针用一般的stdio库函数（比如fread）就可以读这个文件流、
如果open_mode是“w"，调用者程序就还能用fwrite调用向被调用命令发送数据，面被调用程序
可以在白已的标准输人上读到这些数据。在一般情况下，被调用程序不会觉察到白己正在从另
外--个进程读取着数据；它还象以前一样读自己的标准输人流并做出相应的动作。
每个popen调用都必须指定“r”或“w"，在popen的标准实现里不支持任何其他的选项。这
就意味着我们不能调用另外一个程序同时对它进行读和写：如果操作失败，popen会返回一个空
指针。如果你想通过管道实现双向通信、最普通的解决方案就是使用两个管道，每个管道负费
一个方向的数据流动。
12.2.2pclose函数
当用popen启动的进程完成了操作的时候，我们就可以用pclose关闭与之关联的文件流了，
pclose调用只有在popen启动的进程结束之后才能返回。如果在调用pclose的时候它仍在运行。
pclose将等待该进程的结束。
pclose调用的返回值在一般情况下将是文件流被关闭了的进程的退出码。如果调用者进程在
调用pclose之前执行过一个wait语句，退出状态就会丢失，此时pclose将返回“-1”并把errno设
置为ECHILD。
我们先来看一个简单的popen和pclose示例，popenl.c程序。我们将在程序里通过popen访问
uname命令给出的信息。“uname-a”命令的作用是查看系统信息，变量计算机型号、操作系统
名称、版本和发行号，以及计算机的网络名。
动手试试：读取外部程序的输出
加入jaVa编程群：524621833
---
## Page 371
第12章进程间通信：管道
353
完成程序的初始化工作之后，我们打开一个通往uname的管道，把管道设置为可读方式并让
read_fp指向其输出。操作完成后，关闭read_fp指向的管道。
include 
inelude 
tinciude 
tinclude 
int main()
PILE *read_fp:
char buffez[BUFsIz + 1]:
int chars_read;
memset [buffer.*\0°.sizeof (buffer)):
read_fp=popen(*uname -a*,*r*):
if(read_fp != NULL) (
chars_read · fread(buffer. sizeof (char). BUFsiz, read_fp1:
if（chars_read>0）（
printf(Output was:-\nas\n*, buffer) ;
pclose(read_fp):
exit (EXIT_SUCCESS);
exit (EXIT_FAILURE);
在作者之一的机器上运行这个程序的时候，我们将看到如下所示的输出：
$popen1
Linux ti1de 2.2.5-15 1 Mon Apr 19 18:20:08 EDT 1999 1686 unknown
Output was:-
操作注释：
这个程序用popen调用启动带“-a”选项的uname命令。接下来，它从返回的文件流里读取
最多BUFSIZ（这是stdio.h文件里的一个“#define”常数）个字符的数据，并把它打印出来显示
在屏幕上。既然我们已经把uname的输出捕获到一个程序里，就可以对它做进一步处理了。
12.2.3把输出送往popen
看过捕获外部程序输出的例子之后，我们再来看一个把输出传送到外部程序的例子。下面
这个popen2.c程序把数据经管道送往另一个程序，我们这里用的是od（八进制输出）程序。
动手试试：把输出传送到外部程序
读读下面的代码，愚意的话可以自己打打字..
#include 
include 
include 
int main()
FILs *write_fp:
char buffer[BuFsI2 + 1]:
sprintf (buffer.*Once upen a tine, there was...\n*):
加入jaVa编程群：524621833
---
## Page 372
354
Linux程序设计
write_fp = popen(od -c",*w*):
if (write_fp != NULL){
fwrite(buffer,sizeof(char). strlen(buffer).write_fp);
pclose(write_fp):
exit (EXIT_FAILURE) :
运行这个程序的时候，我们将看到如下所示的输出：
zuedods
000C020
0000000
0000037
操作注释：
程序用带“w”选项的popen启动了“od-c”命令，这样就可以向它发送数据了。我们的程序
发送了一个字符申，“od-”会令接收并处理字符串，再把处理后的结果打印到自己的标准输出。
我们在命令行上可以用下面的命令得到同样的输出：
Secho "once upon a tine,there was...*1od -c
1.传递更多的数据
到口前为止，我们的例子都是把全部数据放在一个fread或fwrite语句里的。可有时候我们希
望能以比较小的块发送数据，或者我们不知道输出数据的长度。为了避免定义一个非常大的缓
冲区，我们可以使用多个fread或fwrite调用一部分一部分地处理数据。
下面是程序popen3.c，它的全部数据都是从管道读取的。
动手试试：从管道读取大量的数据
在这个程序里，我们从被调用的“ps-alx”进程读取数据。输出数据有多少事先是不可能知
道的，所以我们必须对管道进行多次读操作。
#include 
#include 
tinclude 
tinclude 
int main()
FILE *read_fp:
char buffer[BUFSIz + 1]:
int chars_read:
memset(buffer.*\O′,sizeof(buffer}};
read_fp= popen(*ps -ax*,*r*);
if
(read_fp!=NULL）（
chars_read = fread(buffer,sizeof(char). BUrsIz,read_fp);
while (chazs_read > 0)(
buffer[chars_read-1]e*\0′;
printf(*Reading:-\n &s\n*,
chars_read = fread(buffer. sizeof (char), BUFsIz, read_fp1;
buffer);
pclose(read_fpl:
exit (EXIT_SUCCESS);
加入jaVa编程群：524621833
---
## Page 373
第12章进程间通信：管道
355
exit (EXIT_FAILURE) :
为简洁起见，我们对这个程序的输出做了一些删节，如下所示：
gundod s
PIO TTY STAT TIME COMMAND
?s
？
Si
0:04 init
SW
[pdexsx]00:0
0:00 [kpiod]
5？SW
‘240 tty2 S
0:02 emacs drafc1.txt
369 tty1 R
0:00 popen3
0:00 ps -ax
 - r
操作注释：
程序调用popen时使用了“r”选项，这与popenl.c程序的做法一样。这一次，它连续地从文
件流读取数据，直到没有数据可读为止。需要提醒大家注意的是，虽然ps命令的执行要花费一
些时间，但UNIX会安排好进程间的时间分配，让两个程序尽量同时运行。如果读进程popen3没
有输人数据，它将被挂起直到有输人数据可读为止。如果写进程ps产生的输出超过了缓冲区的
长度，它也会被挂起直到读进程消耗掉一些数据为止。
在这个例子里，你可能不会看到“Reading:-”信息的第二次出现。这是因为BUFSIZ的值超
过了ps命令输出数据的长度。有些Linux系统把BUFSIZ设置为8000或更大的数字。
2.popen是如何实现的
当我们请求popen调用运行另外一个程序的时候，它先启动shell，即系统中的sh命令，然后
把command字符串做为一个参数传递给它。这有两个效果，一个好，一个不太好。
在UNIX系统里，一切参数扩展都是由shel1完成的，所以在程序被启动之前先启动shell
这个特性能够帮助我们用popen启动运行格式复杂的shell命令，非常有用。而其他一些也能
够创建进程的函数（比如execl等）调用起来就比较麻烦，因为调用者进程必须自己去完成
shell扩展。
可从另一方面考虑，使用shell又有一定的负面效果。popen调用不仅要启动一个被请求的程
序，还要启动一个shell。每做一次popen调用，就要多启动两个进程；从系统资源的角度看，
popen函数的成本偏大。
我们用popen4.c程序来演示popen的操作行为。我们将对全体popen示例程序的源代码文件的
总行数进行统计，做法是用cat命令查看文件并把其结果经管道输送给“wc-1”命令，由后者统
计出总的行数。如果是在命令行上实现这一操作，我们将使用下面的命令：
In|dodq
事实上，用“wc-1popen*c”命令就能搞据这事，它不用打那么多字、也更有效率。但我
们的例子是为了演示管道的原理，所以.
加入jaVa编程群：524621833
---
## Page 374
356
Linux程序设计
动手试试：popen启动了一个shell
这个程序照搬照抄上面给出的命令，但通过popen读取数据。
#include 
#include 
include 
#include 
int main()
FILS *read_fp;
char buffer[BUrsIz + 1];
int chars_read;
memset (buffer,*\o', sizeof(buffer));
read_fp=popen(*cat popen*.c |wc -1*,*r*1;
if (read_fp != NULL)(
chars_read = Eread(buffer,sizeof(char). BUFsIz, read_fp);
while (chars_read > 0)(
buffer[chars_read-1]=\0:
printf(*Reading:-\n s\n*,buffer):
chars_read = fread(buffer, sizeof (char). BUFsIz,read_fp}:
pclose(read_fp);
exit (EXIT_SUCCESS);
exit (EXIT_FAILURB);
运行这个程序的时候，我们将看到如下所示的输出情况：
S popen4
Reading: *
101
操作注释：
从程序代码里可以看出，shell在启动后将把popen*.c扩展为一个文件清单，清单中的文件名
字都以“popen”开始，以“.c”结束。此外，shell还要完成处理管道符号（1）和把cat命令的输
出馈人we命令的工作。我们启动了shell、cat程序和wc程序，安排了--次输出重定向，而使用这
些都是在一个popen调用里完成的。调用了这些命令的程序只看到最终的结果。
12.3pipe函数
学习完高级的popen函数之后，我们再来看看底层的pipe函数。通过它在两个程序之间传递
数据时不需要启动一个shell来解释给定的命令，降低了程序的运行成本：我们对数据读、写操
作的控制也加强了。
pipe函数的框架定义如下所示：
#include 
int pipe (int file_descriptor[2) ）;
pipe函数的参数是一个由两个整数类型的文件描述符组成的数组（的指针）。它在数组里填
上两个新的文件描述符后返回“0”。如果操作失败，它返回“-1”并设置errno指示失败的原因。
加入jaVa编程群：524621833
---
## Page 375
第12章进程间通信：管道