executed on the same core as the sensitive function and is not pro-
tected through code integrity check. For example, we can change
the control flow of printf() (an insensitive function invoked by
the sensitive function genCode() in Listing 1 through modifying
the libc.so library. Since the clean process is interrupted unno-
ticeably, the function insensitive_func() can read the sensitive
data (e.g., keys) from the registers.
The writeSM function in Listing 2 is used to accomplish step
0○, i.e., writing data to the cache of __channel_save_clean (the
secure memory assigned to ss_saveCleanV()). First, the virtual
address of __channel_save_clean (line 6) is loaded into regis-
ter x4. Since the protected program’s (e.g. the hmac_sha1 pro-
gram in Listing 1) page tables including the virtual address of
__channel_save_clean are maintained in rich OS kernel, it could
be obtained by the attackers. For security reason, Ginseng hooks
all page table update operations and ensures the page tables are
read-only to rich OS kernel. Then, data of register x0 is stored to the
secure memory located at x4 (line 8). The data will be first written
to the cache of the secure memory __channel_save_clean. Since
the secure memory is set as write-back, write-allocate in the Ginseng
system, the data is buffered in cache and will only be evicted to
memory when the cache set is full. We leverage the cache lockdown
technique introduced in Section 4.3 to prevent the cache eviction,
i.e., we set the memory pages sharing the same page cache set with
the secure memory __channel_save_clean as outer non-cacheable.
Since some data is locked in advance in the cache lines mapping
to the secure memory __channel_save_clean, memory access in
step 1○ will encounter a cache hit and avoid the data fetching from
secure memory (i.e., step 2○). Then, no security violation will be
triggered, neither does the cross-world context switch. As such,
by invoking the writeSM function before ss_saveCleanV() is exe-
cuted, we can successfully bypass the context switching from IEEs
to the GService and the data protection conducted in GService. The
secure API function ss_exit() for cleaning the sensitive registers
at the end of each sensitive function could be attacked similarly.
5.3 TrustICE: Incomplete Cache Cleaning
In the following, we first illustrate data protection mechanisms in
TrustICE. Next, we point out that TrustICE suffers from Type III at-
tack due to incomplete cache cleaning during the context switching
processes. Then, we detail the attacking procedure.
5.3.1 Data Protection Mechanisms. TrustICE statically divides the
entire physical memory into three separated regions for the rich OS
in the normal world, the IEEs in the normal world, and a Trusted
Domain Controller (i.e., the IEE monitor in TrustICE) in the secure
world, respectively. Sensitive data protection is achieved by dynam-
ically configuring the security attribute of IEE memory. The IEE
memory is set as secure by the Trusted Domain Controller when
Figure 5: CITM Attack on Ginseng
/* Attack preparation: fill in the corresponding cache in
↩→
writeSM:
advance*/
/* __channel_save_clean:
virtual address of the secure memory
assigned to ss_saveCleanV*/
x4, =__channel_save_clean
ldr
/* store data to secure memory */
str
ret
x0, [x4]
/*Implementation of the secure API ss_saveCleanV in Ginseng*/
ss_saveCleanV:
/* __channel_save_clean:
virtual address of the secure memory
assigned to ss_saveCleanV*/
ldr
/* load data from secure memory */
ldr
ret
x4, =__channel_save_clean
x0, [x4]
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
Listing 2: Exploiting the Cache of Secure Memory
world, and is captured by GService. 4○ GService encrypts the sen-
sitive data and cleans the corresponding registers. 5○ The control
6○
flow is transferred back to the secure API ss_saveCleanV().
The insensitive function insensitive_func() is invoked. Though
the secure memory is protected against malicious kernel, the cache
accessed in step 1○ is non-secure cache, since it is accessed from the
normal world. Therefore, it could be manipulated by the attackers.
5.2.3 Attacking Procedure. Based on Ginseng’s open source
code [25], we implement a prototype of Ginseng on a HiKey620
development board with a 8-core ARM Cortex-A53 processor. Our
attack can successfully steal the sensitive data through the attack-
ing procedure illustrated by the red lines in Figure 5. Particularly,
we introduce a step 0○, which fills in the cache lines mapping to
Normal WorldSecure WorldNon-secure CacheSecure MemoryProtected by GServiceProtected by TrustZone①Read CacheSensitive DataEncryptedSensitiveFunction...bl ss_saveCleanVbl insensitive_funcGServiceInsensitive_func⑤Switch to SensitiveFunctionWrite Data②Read Memory③External Abort⑥Control Flow Transfer②* Cache HitCache MissThe Execution is Blocked when Cache HitGinseng ProcedureAttack Procedure④Encrypt Data andClean RegistersSession 3E: Fuzzing/Trusted Execution Environments CCS '20, November 9–13, 2020, Virtual Event, USA1009the system boots up. Before launching a new IEE, the Trusted Do-
main Controller allocates it a memory region from the IEE memory
and sets the memory region as non-secure. When the IEE finishes,
the micro kernel inside it transfers the control flow directly to the
secure world by invoking the SMC instruction. The Trusted Domain
Controller then configures the corresponding IEE memory region
as secure, before transferring the control back to the rich OS.
5.3.2 Type III Attack in TrustICE. Since TrustICE follows Model 2
to achieve data protection, it is immune to Type I attack. The IEE
memory is set as secure when the malicious OS is running and set
as non-secure when the security-sensitive application is executing.
The data protection during the "switch out" process is achieved by
dynamically setting the associated memory as secure. It cannot be
bypassed, since it is enforced in the secure world and the control
flow is transferred directly from micro kernel in IEE to the secure
world by invoking the SMC instruction. As such, the IEE system is
immune to Type II attack. However, although the IEE memory is
protected during the context switching processes, the correspond-
ing cache is non-secure and not cleaned correctly. Therefore, the
attackers could leverage Type III attack to compromise the security
of sensitive data.
5.3.3 Attacking Procedure. We implement a TrustICE prototype on
the i.MX6Quad SABRE development board. Since i.MX6Quad is a
multi-core platform, we suspend all the other cores when an IEE is
running. Particularly, before booting up an IEE, the Trusted Domain
Controller sends to the other non-secure cores (except the core
allocated to the IEE) an inter-core interrupt, which is configured
as a secure interrupt. The cores switch to the monitor mode when
receiving the secure interrupt, and thus the procedures running on
them are suspended.
Figure 6: CITM Attack on TrustICE
The attacking procedure is as follows. As depicted in Figure 6(a),
we craft a page table entry in the normal world, where its physical
address is pointed to an IEE memory page (the address range of
IEE memory can be obtained as described in Section 5.1.3) and
its cache attributes are set as write-back, write-allocate. Although
the IEE memory page is configured as secure during the "switch
out" process, we can still access the sensitive data residing in the
corresponding cache lines that are non-secure, since TrustICE does
not clean the data in cache lines. During the "switch in" process, the
rich OS can write malicious data to the cache lines corresponding
to the IEE memory page and lock the data in cache lines using the
cache lockdown technique depicted in Section 4.3. Then, when the
IEE is executing, it will first read the malicious data residing in the
cache lines rather than the legal data in the IEE memory page, as
shown in Figure 6(b).
6 COUNTERMEASURE
Intuitively, the most straightforward defense strategy is completely
disabling the cache for all IEE memory. However, it is impractical
due to the huge performance overhead without using cache. Based
on the analysis of the root causes of CITM attacks, we propose to
prevent them by correctly configuring the cache attributes of IEE
memory and/or cleaning cache of the IEE memory during context
switching. Experiments show that our countermeasure has a small
overhead over both rich OS and the security-sensitive applications.
6.1 Defense Approaches
We observe that one main reason for all CITM attacks is the incoher-
ence between two levels of memory architecture, cache and main
memory. Thus, our defense focuses on removing those incoherences.
First, the memory isolation does not automatically guarantee the
cache isolation, and it is the root cause of Type I attack. Particu-
larly, when a memory region is isolated for a dedicated core via
the identity-based filtering feature of the TZC-400 in SANCTU-
ARY [14], the data of corresponding L1 cache may still be shared
among the cores. Thus, we can eliminate Type I attack by configur-
ing the cache attributes as outer non-cacheable, non-shareable (i.e.,
inner&outer non-shareable) for the core-isolated memory.
Second, the main reason for Type II attack is that the reading
and writing operations are not synchronized between memory and
cache. For instance, the cross-world switching in Ginseng [56] is
bypassed by constraining the reading and writing of the secure
memory in the cache. After preloading and locking malicious data
in the cache corresponding to the secure memory in advance, the fu-
ture reading of secure memory inside the IEE will hit the preloaded
malicious cache. We can defeat Type II attack through synchroniz-
ing the reading and writing operations between memory and cache.
Specifically, cache attributes of the IEE memory (e.g., the secure
memory in the Ginseng system) should always be configured as
write-through, non write-allocate. As such, the reading and writing
operations will not be constrained in the cache.
Third, the memory region is configured as secure or non-secure
through TZASC, but the security attribute of a cache line is deter-
mined by the status of the core who accesses it. In other words,
the cache lines are automatically identified as non-secure if being
accessed by a core running in the normal world, and identified
as secure if being accessed by a core running in the secure world.
This is the main reason for Type III attack. For example, the CITM
Normal WorldSecure WorldIEE MemoryTrusted Domain Controller(a)Manipulating IEE Cache when Untrusted Rich OS is RunningAccessSecurity-sensitiveApplications(Suspended)Untrusted Rich OS(Running)IEE CacheConfigure Memory as SecureAccessNormal WorldSecure WorldIEE MemoryTrusted Domain Controller(b)Reading Polluted IEE Cache when Security-sensitive Applications are RunningSecurity-sensitiveApplications(Running)Untrusted Rich OS(Suspended)IEE CacheAccessConfigure Memory as Non-SecureProtected by Trusted Domain ControllerProtected by TrustZoneTrustICE ProcedureAttackProcedureAccessAccessSession 3E: Fuzzing/Trusted Execution Environments CCS '20, November 9–13, 2020, Virtual Event, USA1010attack on TrustICE (see Section 5.3) is achieved by reading the IEE
memory’s non-secure cache after "switch out", and writing and
locking malicious data on the non-secure cache before "switch in".
We can defeat Type III attack by cleaning the cache lines during
both "switch in" and "switch out" processes, so that attackers could
not read residual sensitive data or retain malicious data in the cache.
In summary, the three CITM attacks identified in this paper
could be eliminated through (i) configuring the cache attributes
of the IEE memory as inner write-through non write-allocate, outer
non-cacheable, non-shareable and (ii) cleaning the cache of IEE mem-
ory during context switching. The approach to enforce the cache
attributes varies on different IEE systems. When the IEE memory’s
page tables are maintained in the IEEs (e.g., SANCTUARY [14]),
correct cache attributes could be enforced by the security-sensitive
applications running inside the IEEs. When the IEE memory’s page
tables are constructed in the secure world (e.g., TrustICE [55]), the
enforcement of the cache attributes could be achieved by the IEE
monitor. When the IEE memory’s page tables are maintained in the
malicious OS (e.g., Ginseng [56]), all page table update operations
of the malicious OS should be interposed and forwarded to the
IEE monitor, which then enforces the cache attributes are correctly
configured. Particularly, we block the direct manipulation from
malicious kernel by setting the IEE memory’s page tables and the
kernel-privileged codes as read-only to the kernel. Then, we replace
all instructions in the kernel codes for updating the page table en-
tries and the related registers, making them trap into the secure
world and undergo security checking (i.e., the cache attributes of
the critical memory are correctly configured) before being executed.
Finally, we configure the system to set the Privileged Execute Never
(PXN) attribute by default on any newly allocated pages, so that
no executable kernel-privileged instructions can be inserted when
the system is running. The cache cleaning could be achieved via
invoking the invalidation and cleaning instructions inside the IEE.
Particularly, we could directly clean the cache during the "switch
in" process by invoking the invalidation instruction. To prevent the
loss of data during the "switch out" process, we could first invoke
the cleaning instruction to synchronize data from cache to memory
and then invoke the invalidation instruction to clean the cache.
6.2 Defense Overhead
We implement a prototype of our countermeasure solution on the
i.MX6Quad SABRE development board, which is equipped with a
quad-core ARM Cortex-A9 processor running at 1.2GHz with 1GB
DDR3 SDRAM. Then, we evaluate the system overhead introduced
by our defense. To minimize the noise in the experiments, we run
each test with 1,000 iterations and report the average.
We first explore the overhead on security-sensitive applications
due to the enforced cache attributes. Particularly, we run an AES
encryption application in one IEE, and evaluate its execution time
when the memory is configured with different cache attributes.
The experimental results show that our defense system (i.e., with
the cache attributes set as non-shareable, inner write-through non
write-allocate, outer non-cacheable) introduces around 90% overhead
comparing to the default setting (i.e., with the cache attributes set
as shareable, inner write-back write-allocate, outer write-back write-
allocate), and it is mainly caused by disabling L2 cache. We also
observe that for the IEE systems that disable the L2 cache for protec-
tion (e.g., SANCTUARY), our defense system only introduces negli-
gible additional overhead. Also, we evaluate the overhead on the
rich OS introduced by the additional cross-domain context switches
enforced on each page table updating operation. The results show
that 2.65% overall overhead is introduced on the execution of rich
OS. In addition, we evaluate the overhead on the operations that
involves frequent page table updating, i.e., the system booting and
application loading. It shows the overall loading overhead for both
kernel and applications is less than 10% in all evaluation scenarios.
The evaluation details can be found in Appendix B.
7 DISCUSSION
Besides ARM TrustZone, the technologies such as Software Guard
Extensions (SGX) [45] and virtualization [10] have also been adopted
to construct IEEs for protecting the security-sensitive applications
against malicious OS. In this section, we show that SGX is immune
to CITM attacks by design, and the virtualization-based IEE systems
are more difficult to be attacked.
SGX-based Solutions. In the SGX-based solutions [13, 20, 24,
53], the IEEs (also called enclave in SGX) are constructed in the
user space of an untrusted OS. When an enclave is setup, a specific
memory region named enclave page cache (EPC) is allocated for it.
The sensitive data is only processed and stored in the EPC pages.
The SGX-based IEE solutions are immune to the CITM attacks
since the hardware-based security measures enforced on the EPC
pages. First, the EPC pages and corresponding cache lines are only
accessible when the processor is running in the enclave mode, i.e.,
when an enclave is being executed. Second, each physical EPC
page could be allocated to only one enclave, i.e., the EPC pages
allocated for any two enclaves are not overlapped [13]. The former
prevents the direct manipulation on the cache lines of the EPC
pages from malicious OS, and the later deters the indirect attacks
through manipulating the EPC pages’ cache lines from another
crafted enclave.