(cid:17)
p(x)p(y)
(cid:88)
(cid:88)
y∈Y
x∈X
the mutual
To counter that
information is biased toward
features that have many different values, the AMI removes
any bias by normalizing for the expected gain in entropy. As a
result, the AMI score ranges from 0 (completely uncorrelated)
to 1 (observing feature X fully maps to knowing app label Y).
Equation 2 shows the deﬁnition of the AMI, where E[X] is
the expected value of X and H(X) is the entropy of X. We
use the AMI to rank features based on how much information
they contain about an app, and thereby get an indication of
their usefulness in a ﬁngerprint.
AM I(X, Y ) =
M I(X, Y ) − E[M I(X, Y )]
max(H(X), H(Y )) − E[M I(X, Y )]
(2)
D. Feature Evaluation
Using the AMI, we analyze and rank the features available
in TLS-encrypted trafﬁc of the ReCon dataset. The evaluation
of our ﬁngerprinting approach in Section V demonstrates that
these features also generalize to other datasets. After extracting
all features, we divide them into categorical and continuous
values. As the AMI can be compared only for categorical
values, we divided each continuous value into 20 equally
sized bins spanning the full range of each feature. Then,
we computed the AMI of each feature with respect to the
app label. Table II shows the ten highest ranked features,
we provide all the analyzed features together with their AMI
scores at https://github.com/Thijsvanede/FlowPrint.
3
TABLE II.
AMI OF TEN HIGHEST SCORING FEATURES.
Feature
Inter-ﬂow timing
IP address - source
TLS certiﬁcate - validity after
TLS certiﬁcate - validity before
TLS certiﬁcate - serial number
IP address - destination
TLS certiﬁcate - extension set
Packet size (incoming) - std
Packet size (outgoing) - std
Packet inter-arrival time (incoming) - std
Category
Temporal
Device
Destination
Destination
Destination
Destination
Destination
Size
Size
Temporal
AMI
0.493
0.434
0.369
0.356
0.342
0.246
0.235
0.235
0.232
0.218
From Table II we ﬁrst observe that there are no features
with an AMI close to 1. Hence, a ﬁngerprint should combine
multiple features in order to create a reliable app marker.
In addition, we deduce four important categories that can
be leveraged when creating app ﬁngerprints. We note that
these categories are not new to app ﬁngerprinting, but give
insights into how an approach may beneﬁt from leveraging
these features. While only using a small part of the dataset for
our preliminary feature evaluation, our results in Section V
show that the features are generic and also perform well on
larger datasets.
Temporal features. The Inter-ﬂow timing and Packet inter-
arrival time (incoming) stress the importance of timing in
network trafﬁc. Most apps primarily communicate when active,
and early studies suggested a limited number of apps are active
simultaneously [14, 26]. As temporal features may be affected
by latency and network congestion on a small-time scale, our
work uses time on a more course-grained level. We leverage
the time between ﬂows to correlate trafﬁc occurring at the
same time interval. In addition to our semi-supervised setting,
supervised ﬁngerprinting methods such as BIND [4] also use
temporal features.
Device features. The IP address - source feature is the IP
address of the monitored device. This feature demonstrates
that the device producing network trafﬁc reveals information
about the app. Intuitively, different devices may run different
app suites. Our work does not use the IP source address
as a feature, but instead create app ﬁngerprints separately
per device. We reason that identifying apps on a per-device
basis assists in limiting the amount of dynamic behavior.
Furthermore, a related study [5] observed that different devices
in terms of vendor and/or OS version may exhibit signiﬁcant
variations in trafﬁc features. Therefore, our approach handles
trafﬁc on a per-device basis and constructs separate ﬁngerprints
for each device.
Destination features. The high AMI of the IP address - desti-
nation, i.e., the IP address of the server, and various TLS cer-
tiﬁcate features indicate that apps may be discriminated based
on the destinations with which they communicate. Intuitively,
each app is composed of a unique set of different modules
that all provide parts of the app’s functionality. Each module
communicates with a set of servers resulting in a unique set
of network destinations that differentiate apps. Destination
features may even be enriched by domains extracted from DNS
trafﬁc. However, this data is not always available due to DNS
caches. Hence, to work in a more general setting our approach
does not use the domain as a feature. Even though network
destinations may change over time, we show in Section V that
our approach is able to deal with these changes.
Size features. Both incoming and outgoing Packet size features
show a high AMI. This implies that the amount of data being
sent and received per ﬂow is a good indicator of which app is
active. However, all other packet size features yielded an AMI
score of 0.07 or lower, i.e., making up two thirds of the bottom
50% of ranked features. Therefore, we do not incorporate
packet sizes in our approach. This does not mean size features
are unsuited for ﬁngerprinting per se, as can be observed
from supervised approaches using size-based features [2, 5,
62]. However, the size features yield little information for
ﬁngerprinting in a semi-supervised setting.
III. THREAT MODEL
Our work focuses on creating ﬁngerprints for mobile apps
and we assume the perspective of a security monitor who can
(1) trace back ﬂows to the device despite NAT or changing IP
addresses, (2) distinguish mobile from non-mobile devices, and
(3) only monitor its own network (e.g., the WiFi network of an
enterprise)—trafﬁc sent over other networks cannot be used to
generate ﬁngerprints. Our assumptions match the scenario of
enterprise networks, where security operators have full network
visibility and access to the DHCP server.
Even without a priori knowledge about device types, se-
curity operators could still isolate network trafﬁc from mobile
devices based on MAC addresses and orthogonal OS ﬁnger-
printing approaches: for example, related work has shown that
DHCP messages [46], TCP/IP headers [18], and OS-speciﬁc
destinations [36] (e.g., update servers and mobile app markets),
can be used to identify mobile devices, and even tethering.
Finally, we focus on single app ﬁngerprints, i.e., we assume
that mobile apps are executed one at the time. In practice, there
is often a separation between the execution of multiple apps,
with the exception of background services, which, however,
produce fewer and more recognizable trafﬁc patterns. Nonethe-
less, we acknowledge the possibility that multiple apps are
executed simultaneously on a single device causing composite
ﬁngerprints. We believe our approach is an excellent start
to investigate the creation and behavior of such composite
ﬁngerprints. However, as we will discuss in Section VI, we
consider this out of scope for the current work as existing
solutions already suffer from limitations such as identifying
previously unseen apps.
IV. APPROACH
We aim to ﬁngerprint mobile apps in a semi-supervised and
real-time fashion on the base of their (encrypted) network traf-
ﬁc. We build our approach on the observation that mobile apps
are composed of different modules that each communicate with
a relatively invariable set of network destinations. Our focus
lies on discovering these distinctive communication patterns
without requiring any knowledge of the speciﬁc active apps. To
this end, we create ﬁngerprints based on temporal correlations
among network ﬂows between monitored devices and the
destinations they interact with. As a result, our ﬁngerprints are
capable of dealing with evolving app suites, and are agnostic
to the homogeneous and dynamic nature of mobile trafﬁc.
Figure 1 shows an overview of our approach: We peri-
odically take network trafﬁc of mobile devices as input and
generate ﬁngerprints that map to apps. To do so, we isolate
4
all, web services may use multiple IP addresses for a sin-
gle destination for load balancing and reducing the server
response time, or even change their IP address completely.
Our approach tackles this problem by clustering destinations
based on similarity of either the (IP, port)-tuple or the TLS
certiﬁcate. As discussed previously, one may even enrich the
clustering features by including DNS trafﬁc of ﬂows as well
if this information is available. Our evaluation in Section V
shows that this method is robust against inconsistencies in
network destinations.
and
Figure 2 shows an example of the resulting clusters, in
which the destination clusters are scattered randomly. The
size of each cluster is proportionate to the amount of ﬂows
assigned to it. Note that some of the clusters are generated by
multiple apps, which we refer to as shared clusters. Further
inspection reveals
these shared clusters correspond
that
to third-party services
such as crash analytics, mobile
advertisement (ad) networks, social networks, and CDNs.
These services are often embedded through libraries that are
used by many apps: e.g., googleads.g.doubleclick.net,
lh4.googleusercontent.com
android.clients.-
google.com are shared clusters that provide these services.
We discuss the extent
to which shared clusters inﬂuence
ﬁngerprinting in our analysis on homogeneity in Section V-E.
In addition to shared clusters, apps frequently produce
clusters unique to that speciﬁc app, e.g., the s.yimg.com and
infoc2.duba.net clusters only occur in the trafﬁc of the
com.rhmsoft.fm app. These app-speciﬁc clusters often point
to destinations of the app developer, i.e., the ﬁrst party, or
smaller providers of the aforementioned cross-app services.
Finally, note that
the obtained clusters consist of ﬂows
from the entire input batch. However, the monitored device
will only sporadically communicate with each destination.
Therefore, we refer to clusters as active when a message is
sent to or received from the destination represented by the
cluster, and inactive otherwise.
C. Browser Isolation
As previously discussed, browsers are different from other
apps in that they are not dedicated apps. This means that
behavioral patterns in browsers are more difﬁcult to detect as
the user may navigate to any website at will. To account for
this, we introduce a separate technique to detect and isolate
browser trafﬁc into a single app.
Features. From the perspective of destination clustering, we
expect browsers to show many new clusters. After all, modern
websites distribute their content along CDNs, display adver-
tisement, and load auxiliary scripts and images. These are
stored at various destinations and therefore show up as new
clusters. In addition, content downloaded to be displayed in
browsers often contains much more data than is uploaded
in browser requests. We expect that for other mobile apps,
this communication is much more balanced and the number
of clusters active simultaneously is smaller. To account for
the fact that multiple apps may be active and thereby show
browser-like behavior, we focus only on the relative changes.
Therefore, our browser detector uses the following features:
(1) Relative change in active clusters; (2) Relative change in
bytes uploaded; (3) Relative change in bytes downloaded; (4)
Relative change in upload/download ratio.
Fig. 1. Overview of the creation and matching of app ﬁngerprints. (A) We
extract features from the network traces. (B) We cluster the ﬂows from each
device per network destination. (C) We detect and isolate browsers. (D) We
discover correlations between network destinations. (E) We create ﬁngerprints
based on strong correlations. (F) We match newly found ﬁngerprints against
previously generated ﬁngerprints and update them accordingly.
TCP/UDP ﬂows from the network traces for each device, and
extract the required features. Subsequently, for each individual
device we cluster all ﬂows according to their destination.
This clustering allows the discovery of common communi-
cation patterns later on. Before generating app ﬁngerprints,
our approach ﬁrst pays special attention to browsers as they
behave like a platform accessing web content rather than
a dedicated app. Thereafter, we correlate remaining clusters
based on temporally close network activity to generate app
ﬁngerprints. When clusters show a strong correlation, we group
their ﬂows together in a ﬁngerprint. Finally, we match the gen-
erated ﬁngerprints against a database of known ﬁngerprints to
recognize apps or detect previously unseen apps. By combining
correlation and clustering techniques, our approach discovers
temporal access patterns between network destinations without
requiring any prior knowledge.
A. Feature Extraction
The ﬁrst step for generating ﬁngerprints extracts features
from the network trafﬁc, where we separately look at the TCP
and UDP ﬂows of each mobile device. Per device, we extract
the destination IP and port number, timestamp (used to com-
pute the timing between ﬂows), size and direction of all packets
in the ﬂow and, if applicable, the TLS certiﬁcate for that ﬂow.
From these features, we use the destination IP and port number
as well as the TLS certiﬁcate in the clustering phase. Browser
isolation additionally requires information about the amount of
data that is sent over the network. Finally, the correlation step
uses the timestamps of packets to determine to what extent
different ﬂows are temporally correlated.
B. Clustering
Since our approach runs periodically over input data of
each device, we ﬁrst split the input data is into batches of
a given timing interval τbatch. After extracting the features
for each batch, we cluster together TCP/UDP ﬂows based
on their network destination. We consider ﬂows to go to the
same network destination if they satisfy any of the following
criteria: (1) The ﬂows contain the same (destination IP address,
destination port)-tuple. (2) The ﬂows contain the same TLS
certiﬁcate.
The clustering approach for app ﬁngerprinting raises some
concerns about the consistency of destination clusters. After
5
Browser detector. To detect browsers, we train a Random
Forest Classiﬁer [34] with labeled browser and non-browser
data.1 When the classiﬁer detects a TCP/UDP stream origi-
nating from a browser at time t, we isolate all connections
active within an empirically set timeframe of [t − 10, t + 10]
seconds. This means that we label the connections as browser
and do not consider them for further analysis. Therefore, after
detection,
these streams are removed from the destination
clusters. Our rationale for removing all connections within
a speciﬁc timeframe is that, when a browser is detected, it
probably caused more network activity around that time. While
this approach might be considered aggressive in detecting
browsers, we argue that other apps should show persistent
behavior. As a result, clusters that have been removed because
all their connections were incorrectly isolated are still expected
to resurface when the app is active without an interfering
browser. We evaluate the performance of the browser isolation
component in Section V-D.
D. Cluster Correlation
Now that browsers are isolated, we leverage the remaining
clusters for app ﬁngerprinting. However, using only destination
clusters is insufﬁcient for ﬁngerprinting apps as network desti-
nations are shared among apps and may change between differ-
ent executions of an app [62, 63]. A small-scale experiment on
our datasets shows that an increasing number of apps leads to a
rapid decline in app-speciﬁc clusters. When randomly selecting
100 apps from all our dataset over ten Monte Carlo cross
validations, only 58% of apps show at least one app-speciﬁc
destination cluster. In the same experiment, when selecting
1,000 apps, this number drops to 38%. Therefore, to ﬁngerprint
apps we also leverage the temporal correlations between active
destination clusters. Our rationale here is that apps persistently
communicate with the same network destinations. We hypoth-
esize that the combination of active destination clusters at each
point in time is unique and relatively stable for each app. This
means that over time one should be able to observe stronger
correlations for destinations that belong to the same app. Our
experiments in Section V demonstrate that this method of
ﬁngerprint generation can be used for both app recognition
and detection of previously unseen apps.
Correlation graph. To measure the temporal correlation be-
tween clusters, we compute the cross-correlation [49] between
the activity of all cluster pairs as deﬁned in Equation 3. Even
though this has a theoretical time complexity of O(n2), we
show in Section V-G that in practice it is still easily scalable.
We compute this cross-correlation by splitting the input batch
into slices of τwindow seconds (see Section V-A). We consider
a cluster ci active at time slice t if it sends or receives at
least one message to or from the destination cluster during
that window. Its activity is modeled as ci[t] = 1 if it is active
or ci[t] = 0 if it is inactive.
T(cid:88)
(ci (cid:63) cj) =
ci[t] · cj[t]
(3)
t=0
The cross-correlation is naturally higher for clusters with a lot
of activity. To counter this, we normalize the cross-correlation
1While this is a form of supervised detection, we still consider our approach
semi-supervised as we do not require prior knowledge for other types of apps.
6
Fig. 2. Example of destination clusters for three apps: com.rhmsoft.fm,
com.steam.photoeditor, and au.com.penguinapps.android.babyfeeding.client.-
android. The size of each cluster is proportionate to the amount of ﬂows
assigned to it. We labeled ﬁrst- and third-party destinations based on the
methodology of Ren et al. [52], and distinguished for the latter between CDNs,
advertisement networks (ads), and social networks (social).
Example correlation graph for three apps as generated
Fig. 3.
by our approach (left) and when labeled per app (right). The
apps include com.rhmsoft.fm (blue), com.steam.photoeditor (green) and
au.com.penguinapps.android.babyfeeding.client.android (red) or shared desti-
nation clusters (black). Larger nodes indicate the more ﬂows to that destination
cluster. The thickness of each edge depends on the cross correlation.
for the total amount of activity in both clusters as speciﬁed in