        }
        WriteLine(name);
      }
      catch(SalesSpyFoundException ex)
      {
        WriteLine(ex.Message);
      }
      finally
      {
      }
    }
这里可能存在两个与文件相关的错误（假定实际上有一个打开的文件连接，
ProcessNextPerson（）方法会先进行检查）。第一，读取下一个人名时，可能发现这是一
个商业间谍。如果发生这种情况，在这个方法中就使用第一个catch块捕获异常。因为这
个异常已经在循环中被捕获，所以程序流会继续在程序的Main（）方法中执行，处理文
件中的下一个人名。
如果读取下一个人名，发现已经到达文件的末尾，就会发生错误。StreamReader对象
的ReadLine（）方法的工作方式是：如果到达文件末尾，它就会返回一个null，而不是抛
出一个异常。所以，如果找到一个null字符串，就说明文件的格式不正确，因为文件的第
一行中的数字要比文件中的实际人数多。如果发生这种错误，就抛出一个
ColdCallFileFormatException异常，它由外层的异常处理程序捕获（使程序终止执行）。
同样，这里不需要finally块，因为没有要清理的资源，但这次要放置一个空的finally
块，表示在这里可以完成用户希望完成的任务。
这个示例就要完成了。ColdCallFileReader异常类还有另外两个成员：NPeopleToRing
属性返回文件中应有的人数，Dispose（）方法可以关闭已打开的文件。注意Dispose（）
方法仅返回它是否被调用——这是实现该方法的推荐方式。它还检查在关闭前是否有一个
文件流要关闭。这个例子说明了防御编码技术：
    public uint NPeopleToRing
    {
      get
      {
        if (_isDisposed)
        {
        throw new ObjectDisposedException("peopleToRing");
        }
        if (! _isOpen)
        {
        throw new UnexpectedException(
            "Attempted to access cold¨Ccall file that is not open");
        }
        return _nPeopleToRing;
      }
    }
    public void Dispose()
    {
      if (_isDisposed)
      {
        return;
      }
      _isDisposed = true;
      _isOpen = false;
      _fs? .Dispose();
      _fs = null;
    }
14.4.3 定义用户定义的异常类
最后，需要定义3个异常类。定义自己的异常非常简单，因为几乎不需要添加任何额
外的方法。只需要实现构造函数，确保基类的构造函数正确调用即可。下面是实现
SalesSpyFoundException异常类的完整代码（代码文件
SolicitColdCall/SalesSpyFoundException.cs）：
    public class SalesSpyFoundException: Exception
    {
      public SalesSpyFoundException(string spyName)
        : base($"Sales spy found, with name {spyName}")
      {
      }
      public SalesSpyFoundException(string spyName, Exception innerException)
        : base($"Sales spy found with name {spyName}", innerException)
      {
      }
    }
注意，这个类派生自Exception异常类，正是我们期望的自定义异常。实际上，如果
要更正式地创建它，可以把它放在一个中间类中，例如，ColdCallFileException异常类，
让它派生于Exception异常类，再从这个类派生出两个异常类，并确保处理代码可以很好
地控制哪个异常处理程序处理哪个异常即可。但为了使这个示例比较简单，就不这么做
了。
在SalesSpyFoundException异常类中，处理的内容要多一些。假定传送给它的构造函
数的信息仅是找到的间谍名，从而把这个字符串转换为含义更明确的错误信息。我们还提
供了两个构造函数，其中一个构造函数的参数只是一条消息，另一个构造函数的参数是一
个内层异常。在定义自己的异常类时，至少把这两个构造函数都包括进来（尽管以后将不
能在示例中使用SalesSpyFoundException异常类的第2个构造函数）。
对于ColdCallFileFormatException异常类，规则是一样的，但不必对消息进行任何处
理（代码文件SolicitColdCall/ColdCallFileFormatException.cs）：
    public class ColdCallFileFormatException: Exception
    {
      public ColdCallFileFormatException(string message)
        : base(message)
      {
      }
      public ColdCallFileFormatException(string message, Exception innerException
)
        : base(message, innerException)
      {
      }
    }
最后是UnexpectedException异常类，它看起来与ColdCallFileFormatException异常类是
一样的（代码文件SolicitColdCall/UnexpectedException.cs）：
    public class UnexpectedException: Exception
    {
      public UnexpectedException(string message)
        : base(message)
      {
      }
      public UnexpectedException(string message, Exception innerException)
        : base(message, innerException)
      {
      }
    }
下面准备测试该程序。首先，使用people.txt文件，其内容已经在前面列出了。
    4
    George Washington
    Benedict Arnold
    John Adams
    Thomas Jefferson
它有4个名字（与文件中第一行给出的数字匹配），包括一个间谍。接着，使用下面
的people2.txt文件，它有一个明显的格式错误：
    49
    George Washington
    Benedict Arnold
    John Adams
    Thomas Jefferson
最后，尝试执行该例子，但指定一个不存在的文件名people3.txt，对这3个文件名运行
程序3次，得到的结果如下：
    SolicitColdCall
    Please type in the name of the file containing the names of the people to be 
cold
      called > people.txt
    George Washington
    Sales spy found, with name Benedict Arnold
    John Adams
    Thomas Jefferson
    All callers processed correctly
    SolicitColdCall
    Please type in the name of the file containing the names of the people to be 
cold
      called > people2.txt
    George Washington
    Sales spy found, with name Benedict Arnold
    John Adams
    Thomas Jefferson
    The file people2.txt appears to have been corrupted.
    Details of the problem are: Not enough names
    SolicitColdCall
    Please type in the name of the file containing the names of the people to be 
cold
      called > people3.txt
    The file people3.txt does not exist.
最后，这个应用程序说明了处理程序中可能存在的错误和异常的许多不同方式。
14.5 调用者信息
在处理错误时，获得错误发生位置的信息常常是有帮助的。本章全面介绍的#line预处
理器指令用于改变代码的行号，获得调用堆栈的更好信息。为了从代码中获得行号、文件
名和成员名，可以使用C#编译器直接支持的特性和可选参数。这些特性包括
CallerLineNumber、CallerFilePath和CallerMemberName，它们定义在
System.Runtime.CompilerServices名称空间中，可以应用到参数上。对于可选参数，当没
有提供调用信息时，编译器会在调用方法时为它们使用默认值。有了调用者信息特性，编
译器不会填入默认值，而是填入行号、文件路径和成员名称。
代码示例CallerInformation使用如下依赖项和名称空间：
依赖项：
    NETStandard.Library
名称空间：
    System
    System.Runtime.CompilerServices
    static System.Console
下面代码段中的Log方法演示了这些特性的用法。这段代码将信息写入控制台中（代
码文件CallerInformation/Program.cs）：
    public void Log([CallerLineNumber]
 int line = -1,
        [CallerFilePath]
 string path = null,
        [CallerMemberName]
 string name = null)
    {
      WriteLine((line  p.Log();
      a1();
    }
    private int _someProperty;
    public int SomeProperty
    {
      get { return _someProperty; }
      set
      {
        Log();
        _someProperty = value;
      }
    }
运行此程序的结果如下所示。在调用Log方法的地方，可以看到行号、文件名和调用
者的成员名。对于Main方法中调用的Log方法，成员名为Main。对于属性SomeProperty的
set访问器中调用的Log方法，成员名为SomeProperty。lambda表达式中的Log方法没有显示
生成的方法名，而是显示了调用该lambda表达式的方法的名称（Main），这当然更加有
用。
    Line 12
    c:\ProCSharp\ErrorsAndExceptions\CallerInformation\Program.cs
    Main
    Line 26
    c:\ProCSharp\ErrorsAndExceptions\CallerInformation\Program.cs
    SomeProperty
    Line 14
    c:\ProCSharp\ErrorsAndExceptions\CallerInformation\Program.cs
    Main
在构造函数中使用Log方法时，调用者成员名显示为ctor。在析构函数中，调用者成
员名为Finalize，因为它是生成的方法的名称。
  注意： CallerMemberName的一个很好的用途是用在INotifyPropertyChanged接
口的实现中。该接口要求在方法的实现中传递属性的名称。在本书中的几个章节中都
可以看到这个接口的实现，例如第31章。
14.6 小结
本章介绍了C#通过异常处理错误情况的多种机制，我们不仅可以输出代码中的一般
错误代码，还可以用指定的方式处理最特殊的错误情况。有时一些错误情况是通过.NET
Framework本身提供的，有时则需要编写自己的错误情况，如本章的例子所示。在这两种
情况下，都可以采用许多方式来保护应用程序的工作流，使之不出现不必要和危险的错
误。
第15章
异步编程
本章要点
● 异步编程的重要性
● 异步模式
● async和await关键字的基础
● 创建和使用异步方法
● 异步方法的错误处理
● 取消长时间运行的任务
本章源代码下载地址（wrox.com）：
打开网页www.wrox.com/go/professionalcsharp6，单击Download Code选项卡即可下载
本章源代码。本章代码分为以下几个主要的示例文件：
● Async Patterns（异步模式）
● Foundations（async和await关键字）
● ErrorHandling（异步方法的错误处理）
15.1 异步编程的重要性
C# 6添加了许多新的关键字，而C# 5.0仅增加两个新的关键字：async和await。这两
个关键字将是本章的重点。
使用异步编程，方法调用是在后台运行（通常在线程或任务的帮助下），并且不会阻
塞调用线程。
本章将学习3种不同模式的异步编程：异步模式、基于事件的异步模式和基于任务的
异步模式（Task-based Asynchronous Pattern, TAP）。TAP是利用async和await关键字来实
现的。通过这里的比较，将认识到异步编程新模式的真正优势。
讨论过不同的模式之后，通过创建任务和使用异步方法，来介绍异步编程的基础知
识。还会论述延续任务和同步上下文的相关内容。
与异步任务一样，错误处理也需要特别重视。有些错误要采用不同的处理方式。
在本章的最后，讨论了如何取消正在执行的任务。如果后台任务执行时间较长，就有
可能需要取消任务。对于如何取消，也将在本章学习到相关内容。
第21和22章介绍了并行编程的相关内容。
如果应用程序没有立刻响应用户的请求，会让用户反感。用鼠标操作，我们习惯了出
现延迟，过去几十年都是这样操作的。有了触摸UI，应用程序要求立刻响应用户的请
求。否则，用户就会不断重复同一个动作。
因为在旧版本的.NET 
Framework中用异步编程非常不方便，所以并没有总是这样
做。Visual Studio旧版本是经常阻塞UI线程的应用程序之一。例如，在Visual Studio 2010
中，打开一个包含数百个项目的解决方案，这意味可能需要等待很长的时间。自从Visual
Studio 2012以来，情况就不一样了，因为项目都是在后台异步加载的，并且选中的项目会
优先加载。Visual Studio 2015的一个最新改进是NuGet包管理器不再实现为模式对话框。
新的NuGet包管理器可以异步加载包的信息，同时做其他工作。这是异步编程内置到
Visual Studio 2015中带来的重要变化之一。
很多.NET Framework的API都提供了同步版本和异步版本。因为同步版本的API用起
来更为简单，所以常常在不适合使用时也用了同步版本的API。在新的Windows运行库
（WinRT）中，如果一个API调用时间超过40ms，就只能使用其异步版本。自从C# 
5开
始，异步编程和同步编程一样简单，所以用异步API应该不会有任何的障碍。
15.2 异步模式
在学习新的async和await关键字之前，先看看.NET 
Framework的异步模式。从.NET
1.0开始就提供了异步特性，而且.NET Framework的许多类都实现了一个或者多个异步模
式。委托类型也实现了异步模式。
因为在Windows Forms和WPF中，用异步模式更新界面非常复杂，所以.NET 2.0推出
了基于事件的异步模式。在这种模式中，事件处理程序是被拥有同步上下文的线程调用，
所以更新界面很容易用这种模式处理。在此之前，这种模式也称为异步组件模式。
在.NET 
4.5中，推出了另外一种新的方式来实现异步编程：基于任务的异步模式
（TAP）。这种模式是基于Task类型，并通过async和await关键字来使用编译器功能。
为了了解async和await关键字的优势，第一个示例应用程序利用Windows Presentation
Foundation（WPF）和网络编程来阐述异步编程的概况。如果没有WPF和网络编程的经
验，也不用失望。你同样能够按照这里的要领，掌握异步编程是如何实现的。下面的示例
演示了异步模式之间的差异。看完这些之后，通过一些简单的控制台应用程序，将学会异
步编程的基础知识。
  注意： 第29章～31章、第34～36章详细介绍了WPF。第25章讨论了网络编
程。
下面的示例WPF应用程序演示了异步模式之间的差异，它利用了类库中的类型。该
应用程序用Bing和Flickr的服务在网络上寻找图片。用户可以输入一个搜索关键词来找到