An   XML   parser   will   typically   ignore   or   remove   these   comments   when   parsing   an   XML   
document   and   that's   where   an   attacker   can   strike.   If   we   pass   the   username   
“ admin  @gmail.com "   the   comment   will   be   removed/ignored   giving   
us   the   username   “ PI:EMAIL ”.  
We   can   see   in   the   above   image   of   a   SAML   response   that   I   created   a   user   which   
contains   a   comment   in   it.   When   it  is   passed   to   the   service   provider   the   comment   will   be   
stripped   out   giving   the   email   “ PI:EMAIL ”,   we   will   then   be   logged   in   as   that   user.  
XML   Signature   Wrapping   (XSW)  
The   idea   of   XML   Signature   Wrapping   (XSW)   is   to   exploit   the   separation   between   SSO   
Verificator   and   SSO   Processor.   This   is   possible   because   XML   documents   containing   
XML   Signatures   are   typically   processed   in   two   separate   steps,   once   for   the   validation   of   
the   digital   signature,   and   once   for   the   application   that   uses   the   XML   data.   
A   typical   application   will   first   locate   the   signature   and   its  reference   uri,   as   mentioned   
earlier   the   reference   uri   is   used   to   determine   which   document   the   signature   verifies.   The   
application   will   use   the   reference   uri   to   find   which   XML   element   is   signed   and   it  will   
validate   or   invalidate   it.   Once   the   validation   process   is   complete   the   application   will   
locate   the   desired   XML   element   and   parse   out   the   information   it's   looking   for.   Typically   
the   validation   and   processing   phase   will   use   the   same   XML   element   but   with   signature   
wrapping   this   may   not   be   the   case,   validation   may   be   performed   on   one   element   but   the   
processing   phase   happens   on   another   element.  
If   you're   testing   for   this   type   of   vulnerability   I   would   recommend   using   the   SAML   Raider   
plugin   for   Burp   as   shown   below:  
All   you   have   to   do   is   select   the   XSW   attack,   press   the   “Apply   XSW”   button,   and   send   
the   response.   If   the   endpoint   returns   successfully   without   erroring   out   then   you   can   
assume   it  is   vulnerable   to   this   type   of   attack.  
XSW  Attack  1  
This   first   attack   is   used   on   the   signature   of   the   SAML   response.   Basically   we   create   a   
new   SAML   response   with   our   malicious   assertion   then   we   wrap   the   original   response   in   
the   new   response.   The   idea   here   is   that   the   validation   process   will   happen   on   the   
original   response   but   the   processing   phase   will   happen   on   our   modified   response.  
Notice   how   the   original   SAML   response   is   embedded   in   the   signature,   this   is   called   an   
enveloping   signature.   Also   notice   how   the   signature   reference   URI   matches   the   
embedded   SAML   response   id.   This   will   cause   the   verification   process   to   succeed.   
However,   when   the   application   goes   to   parse   the   assertion   it  will   use   our   evil   assertion   
instead   of   the   original   one.  
XSW  Attack  2  
The   second   attack   is   the   same   as   the   first   attack   except   instead   of   using   an   embedded   
signature   it  uses   a   detached   signature   as   shown   below.  
Note   that   the   first   and   second   attack   are   the   only   two   attacks   that   target   the   signature   of   
the   SAML   response,   the   rest   of   the   attacks   target   the   signature   of   the   assertion.  
XSW  Attack  3  
This   attack   works   by   placing   our   malicious   assertion   above   the   original   assertion   so   it's   
the   first   element   in   the   SAML   response.  
Here   we   are   hoping   after   the   validation   steps   complete   the   parsing   process   takes   the   
first   element   in   the   SAML   response.   If   it  does   it  will   grab   our   malicious   assertion   instead   
of   the   original   one.   
XSW  Attack  4  
This   attack   is   similar   to   XSW   attack   3   except   we   embed   the   original   assertion   in   our   evil   
assertion   as   shown   below:  
XSW  Attack  5  
In   this   attack   we   copy   the   original   signature   and   embed   it  into   our   malicious   assertion.   
However,   the   original   signature   still   points   to   the   original   assertion   as   shown   in   the   
below   illustration.  
XSW  Attack  6  
Here   we   embed   the   original   assertion   in   the   original   signature   then   we   embed   all   of   that   
in   the   malicious   assertion   as   shown   below:  
XSW  Attack  7  
This   method   utilises   the   “Extensions”   tag   which   is   a   less   restrictive   XML   element.   Here   
we   place   the   malicious   assertion   with   the   same   ID  as   the   original   assertion   in   a   set   of   
extensions   tags.  
Notice   how   the   malicious   assertion   and   the   original   assertion   have   the   same   id.  
XSW  Attack  8  
Again   we   are   making   use   of   a   less   restrictive   XML   element   called   “Object”.   First   we   
create   the   malicious   assertion   and   embed   the   original   signature   in   it.   Next   we   embed   an   
object   element   in   the   signature   and   finally   we   place   the   original   assertion   in   the   object   
element.  
Notice   how   the   malicious   assertion   and   the   original   assertion   have   the   same   id.  
API  Documentation  
Introduction  
The   vast   majority   of   vulnerabilities   I   find   in   APIs   are   the   result   of   a   design   flaw.   If   you   
have   access   to   the   API   documentation   these   can   be   fairly   easy   to   locate.   For  example,   
suppose   there   is   a   password   reset   endpoint   which   takes   a   user   id   and   a   new   password   
as   its  input.   Right   now   you   might   be   thinking   I   should   check   for   IDOR  to   see   if  I   can   
reset   other   users   passwords   and   that   would   be   correct.   These   types   of   design   flaws   can   
be   relatively   easy   to   spot   when   you   have   the   API   documentation   that   lists   all   the   
available   endpoints   and   their   parameters.   The   other   option   is   to   manually   inspect   your   
traffic  to   find   this   endpoint   but   having   the   API   documentation   makes   it  a   lot   easier.  
Swagger  API  
Swagger   is   a   very   popular   API   documentation   language   for   describing   RESTful   APIs   
expressed   using   JSON.   If   I   see   an   application   using   a   REST   API   i'll   typically   start   
looking   for   swagger   endpoints   as   shown   below:  
●
/api  
●
/swagger/index.html  
●
/swagger/v1/swagger.json  
●
/swagger-ui.html  
●
/swagger-resources  
As   shown   above   swagger   documentation   gives   you   the   name,path,and   arguments   of   
every   possible   api   call.   When   testing   api   functionality   this   is   a   gold   mine.   Clicking   on   a   
request   will   expand   it  and   you   can   perform   all   of   your   testing   right   there   as   shown   
below:  
Seeing   the   image   above   I   imminently   think   to   test   for   insecure   redirect   due   to   the   
redirect   parameter   being   present.   Typically   when   looking   at   the   documentation   I   look   for   
design   flaws,   authentication   issues,   and   the   OWASP   top   10.   I   have   personally   found   
hidden   passwords   resets   that   are   easily   bypassable,   hidden   admin   functionality   that   
allows   you   to   control   the   entire   site   unauthenticated,   sql   injection,   and   much   more.  
XSS  
Swagger   is   a   popular   tool   so   it’s  bound   to   have   some   known   exploits.   I   have   personally   
found   reflected   XSS   on   several   swagger   endpoints   while   testing.   A   while   back   someone   
found   this   XSS   flaw   on   the   url   parameter   as   shown   below:  
●
http://your-swagger-url/?url=%3Cscript%3Ealert(atob(%22SGVyZSBpcyB0aGUgWFNT 
%22))%3C/script%3  
●
https://github.com/swagger-api/swagger-ui/issues/1262  
You   can   also   get   persistent   XSS   if  you   give   it  a   malicious   file   to   parse   as   shown   below:  
●
http://your-swagger-url/?url=https://attacker.com/xsstest.json  
●
https://github.com/swagger-api/swagger-ui/issues/3847  
If   you   happen   to   stumble   across   some   swagger   documentation   it’s  probably   a   good   idea   
to   check   for   these   two   XSS   vulnerabilities.  
Postman  
According   to   Google   “Postman   is   a   popular   API   client   that   makes   it  easy   for   developers   
to   create,   share,   test   and   document   APIs.   This   is   done   by   allowing   users   to   create   and   
save   simple   and   complex   HTTP/s   requests,   as   well   as   read   their   responses”.   Basically   
Postman   is   a   tool   that   can   be   used   to   read   and   write   API   documentation.  
●
https://www.postman.com/downloads/  
What's   nice   about   Postman   is   that   you   can   import   API   documentation   from  multiple   
sources.   For  example   earlier   we   talked   about   Swagger   APIs   and   we   used   the   official   
swagger   api   website   to   load   the   documentation.   However,   we   could   have   used   Postman   
for   this   instead,   all   you   have   to   do   is   load   the   Swagger   json   file   and   you're   good   to   go.  
Once   you   have   the   API   docs   imported   to   Postman   you're   good   to   go.   The   next   step   is   to   
review   each   API   endpoint   and   test   it  for   vulnerabilities.  
WSDL  
According   to   Google   “The   Web   Service   Description   Language   (WSDL)   is   an   XML   
vocabulary   used   to   describe   SOAP-based   web   services”.    In   other   words   the   WSDL   file   
is   used   to   describe   the   endpoints   of   a   SOAP   API.  
As   shown   above   WSDL   files   are   fairly   easy   to   spot,   just   look   for   an   XML   file   that   
contains   a   “wsdl”   tag.   When   hunting   these   will   typically   look   like   the   following   urls:  
●
example.com/?wsdl  
●
example.com/file.wsdl  
As   shown   above   we   can   then   import   this   file   into   the    “soupUI”   tool.   
●
https://www.soapui.org/downloads/soapui/  
This   tool   can   be   used   to   create   templates   of   the   requests   which   can   then   be   sent   to   the   
target   server.   All   you   have   to   do   is   fill   in   your   values   and   hit   send.  
WADL  
According   to   Google   “The   Web   Application   Description   Language   (WADL)   is   a   
machine-readable   XML   description   of   HTTP-based   web   services”.   You   can   think   of   
WADL   as   the   REST   equivalent   of   WSDL.   WADL   is   typically   used   for   REST   APIs   while   
WSDL   is   typically   used   on   SOAP   endpoints.  
WADL   files   should   look   similar   to   the   image   above.   When   hunting   be   on   the   lookout   for   
an   XML   document   ending   with   “wadl”   as   shown   below:  
●
example.com/file.wadl  
Once   you   have   the   targets   WADL   file   you   can   import   it  using   postman   as   shown   above.   
The   next   step   is   to   review   the   API   documentation   so   you   can   better   understand   the   
application.   This   will   help   you   identify   vulnerabilities   later   down   the   road.  
Summary  
API   documentation   is   one   of   the   best   resources   to   have   when   probing   an   API   for   
vulnerabilities.   If   I'm   testing   an   API   endpoint   I'll   typically   startout   by   looking   for   the   
corresponding   API   docs.   This   will   help   you   get   an   understanding   of   the   API   and   all   the   
functionalities   it  contains.   Once   you   understand   the   application   you   can   start   to   find   
design   flaws   and   other   bugs   fairly   easily.  
Conclusion  
If   you   come   across   an   API   endpoint   the   first   step   is   to   figure   out   what   type   of   API   it  is.   
Your   testing   methodology   will   change   slightly   depending   on   if  it's   a   REST,RPC,   SOAP,   
or   GraphQL   API.   Note   that    APIs   share   the   same   vulnerabilities   as   every   other   web   
application   so   make   sure   you’re   looking   for   SQL   injection,XSS,   and   all   the   other   
OWASP   vulnerabilities.   You   also   want   to   keep   an   eye   out   for   the   API   documentation   as   
this   can   be   very   useful   to   an   attacker.   Attackers   can   use   the   API   docs   to   find   design  
flaws,hidden   endpoints,   and   get   a   better   understanding   of   the   application.   In   addition   
you   also   want   to   pay   attention   to   the   authentication   process,   depending   on   the   
technology   there   could   be   several   attack   avenues   here   as   well  
Caching  Servers  
Web  Cache  Poisoning  
Introduction  
Web   cache   poisoning   is   a   technique   attackers   use   to   force   caching   servers   to   server   
malicious   requests.    Most   commonly   this   attack   is   chained   with   self   xss  which   turns   a   
low   impact   xss  finding   into   a   high   impact   one   since   it  can   be   served   to   any   user   who   
visits   the   cached   page.  
Basic  Caching  Servers  
To   understand   web   cache   poisoning   you   must   first   understand   how   caching   servers   
work.   In   simple   terms  cach   servers   work   by   saving   a   users   request   then   serving   that   
saved   request   to   other   users   when   they   call   the   same   endpoint.   This   is   used   to   prevent   
the   same   resource   from  getting   called   over   and   over   and   forcing   the   server   to   perform   
the   same   work   over   and   over.   Instead   the   server   only   gets   called   if  the   response   is   not   
found   in   the   caching   server,   so   if  the   endpoint   “test.com/cat.php”   is   called   100   times   the   
server   will   answer   the   first   request   and   save   the   response   to   the   caching   server.   The   
other   99   requests    will   be   answered   by   the   caching   server   using   the   saved   response   
from  the   first   request.  
As   shown   above   “user   1”   makes   a   request   to   the   “example.com/kop?somthing=ok”   and   
the   response   is   not   found   in   the   caching   server   so   it  is   forwarded   to   the   web   server   
which   answers   the   response.   Next   users   2   and   3   make   the   same   request   but   this   time   
the   response   is   found   in   the   caching   server   so   the   web   server   is   not   contacted.   The   old   
response   is   shown   instead.  
How   exactly   does   the   caching   server   determine   if  two   requests   are   identical?   The   
answer   is   cache   keys.   A   cache   key   is   an   index   entry   that   uniquely   identifies   an   object   in   
a   cache.   You   can   customize   cache   keys   by   specifying   whether   to   use   a   query   string   (or   
portions   of   it)   in   an   incoming   request   to   differentiate   objects   in   a   cache.  
Typically   only   the   request   method,   path,   and   host   are   used   as   cache   keys   but   others   
can   be   used   as   well.   If   we   look   at   the   above   request   the   cache   keys   would   be:  
●
GET   /embed/v4.js?_=1605995211298  
●
Play.vidyard.com  
Everything   else   would   be   discarded   when   determining   if  two   requests   are   the   same   
unless   stated   otherwise.   
As   shown   above   in   the   HTTP   response   the   “Vary”   header   says   that   the   X-ThumbnailAB,   
X-China,   accept-language,   and   Accept-Encoding   headers   are   also   used   as   cache   keys.  
These   values   are   important   to   note,   for   example   if  the   user-agent   is   also   used   as   a   