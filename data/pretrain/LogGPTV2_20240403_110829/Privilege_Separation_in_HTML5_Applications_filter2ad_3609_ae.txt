posal; therefore, the alternative line of research into new
browser primitives has indeed been fruitful. Our work
demonstrates how we can utilize these advancements by
combining deployed primitives (like temporary origins
and CSP [34]) to achieve effective privilege separation,
without requiring any further changes to the platform.
Carlini et al. [7] study the effectiveness of privilege
separation in the Chrome extension architecture and ﬁnd
that in 4 (19) out of 61 cases, insufﬁcient validation of
messages exchanged over the privilege boundary allowed
for full (partial) privilege escalation. In our design, we
Figure 5: Frequency distribution of event listeners and API
calls used by the top 42 extensions requiring the tabs permis-
sion.
and the memory consumption of the new DOM and
JavaScript heap created for each iframe. We measure the
impact of each below.
Performance Overhead. First, as a micro-benchmark,
we measured the run-time overhead caused by the par-
ent’s mediation on privileged APIs. We created a func-
tion that measures the total time taken to open a tab and
then close it. This involves four crossings of the privilege
boundary.
We performed the experiment 100 times with and
without privilege separation. The median time with and
without privilege-separation was 140ms and 80ms re-
spectively. This implies an overhead of 15ms on each
call crossing the sandbox.
As a macro-benchmark, we measured the amount of
time required to load an image in the Awesome Screen-
shot image editor. Recall that the image editor receives
the image data from the background page. We took a
screenshot of www.google.com and measured the time
taken for the image to load in the image editor, once
the background sends it. We repeated the experiment 20
times each for the privilege separated and the original
versions. The average (median) amount of time taken
for the image load was 72.5ms (77.3ms) for the image
load in the original Awesome Screenshot extension, and
78.5ms (80.1ms) for the image load in the privilege sep-
arated version—an overhead of 8.2% (3.6%). In our test-
ing, we have not noticed any user-perceivable increase in
latency after our redesign.
Memory Consumption. We measured the increase in
memory consumption caused by creating a new tempo-
rary origin iframe, and found no noticeable increase in
memory consumption.
On the Google Chrome platform, an alternate mech-
anism to get additional principals is creating a new ex-
13
 0 5 10 15 20 25 30 35 40 45 0 10 20 30 40 50Number of extensionsPercentage of API used (cumulative)explicitly prohibit the parent from using incoming mes-
sages in a way that can lead to code execution. Fur-
thermore, Chrome extensions today tend to have inﬂated
TCB in the privileged component as we show in Sec-
tion 5.4. This is in contrast to our proposed design.
Mashup & Advertisement Isolation. The problem
of isolating code in web applications, especially in
mashups [46, 51] and malicious advertisements [52], has
received much attention in research. Our work has sim-
ilarities with these works in that it uses isolation primi-
tives like iframes. However, one key difference is that
we advocate the use of temporary origins, which are now
available in most browsers, as a basis for creating arbi-
trary number of components.
In concurrent work, Treehouse [53] provides similar
properties, but relies on isolated web workers with a
virtual DOM implementation for backwards compatibil-
ity. A virtual DOM allows Treehouse to interpose on all
DOM events, providing stronger security and resource
isolation properties, but at a higher performance cost.
Language-based Isolation of web applications. Re-
cent work has focused on language-based analysis of
web application code, especially JavaScript, for conﬁne-
ment. IBEX proposed writing extensions in a high-level
language (FINE) that can later by analyzed to conform
to speciﬁc policies [21].
In contrast, our work does
not require developers to learn new language, and thus
maintains compatibility with existing code. Systems like
IBEX are orthogonal to our approach and can be sup-
ported on top of our architecture; if necessary, the par-
ent’s policy component can be written in a high-level lan-
guage and subject to automated analysis.
Heavyweight language-based analyses and rewriting
systems have been used for isolating untrusted code, such
as advertisements [28, 29, 54]. Our approach instead
relies on a lighter weight mechanism based on built-in
browser primitives like iframes and temporary origins.
8 Conclusion
Privilege separation is an important second line of de-
fense. However, achieving privilege separation in web
applications has been harder than on the commodity OS
platform. We observe that the central reason for this
stems in the same origin policy (SOP), which mandates
use of separate origins to isolate multiple components,
but creating new origins on the ﬂy comes at a cost. As a
result, web applications in practice bundle disjoint com-
ponents and run them in one monolithic authority. We
propose a new design that uses standardized primitives
already available in modern browsers and enables par-
titioning web applications into an arbitrary number of
temporary origins. This design contrasts with previ-
ous approaches that advocate re-designing the browser
or require adoption of new languages. We empirically
show that we can apply our new architecture to widely
used HTML5 applications right away; achieving dras-
tic reduction in TCB with no more than thirteen lines of
change for the applications we studied.
9 Acknowledgements
We thank Erik Kay, David Wagner, Adrienne Felt,
Adrian Mettler, the anonymous reviewers, and our shep-
herd, William Enck for their insightful comments. This
material is based upon work partially supported by the
NSF under the TRUST grant CCF-0424422, by the
Air Force Ofﬁce of Scientiﬁc Research (AFOSR) un-
der MURI awards FA9550-09-1-0539 and FA9550-08-
1-0352 and by Intel through the ISTC for Secure Com-
puting. The second author is supported by the Symantec
Research Labs Graduate Fellowship.
References
[1] Google Inc., “Google chrome webstore.” https:
//chrome.google.com/webstore/.
[2] HTTP Archive, “JS Transfer Size and JS Re-
http://httparchive.org/trends.
quests.”
php#bytesJS&reqJS.
[3] Google Inc., “Chromium os.”
chromium.org/chromium-os.
http://www.
[4] “Mozilla boot2gecko.” https://wiki.mozilla.
org/B2G.
[5] Microsoft,
“Metro
development,”
http://msdn.microsoft.com/en-us/
style
app
2012.
windows/apps/.
[6] H. Wang, A. Moshchuk, and A. Bush, “Conver-
gence of desktop and web applications on a multi-
service os,” in Proceedings of the 4th USENIX con-
ference on Hot topics in security, 2009.
[7] N. Carlini, A. P. Felt, and D. Wagner, “An evalua-
tion of the google chrome extension security archi-
tecture,” in Proceedings of the 21st USENIX Con-
ference on Security, 2012.
[8] P. Saxena, D. Akhawe, S. Hanna, F. Mao, S. Mc-
Camant, and D. Song, “A symbolic execution
framework for javascript,” in Proceedings of the
2010 IEEE Symposium on Security and Privacy,
pp. 513–528.
[9] S. Bandhakavi, S. T. King, P. Madhusudan, and
M. Winslett, “Vex: vetting browser extensions for
security vulnerabilities,” in Proceedings of the 19th
USENIX conference on Security, 2010.
14
[10] M. Dhawan and V. Ganapathy, “Analyzing in-
formation ﬂow in javascript-based browser ex-
tensions,” in Proceedings of the Computer Secu-
rity Applications Conference, pp. 382–391, IEEE,
2009.
[11] S. Guarnieri and B. Livshits, “Gatekeeper: mostly
static enforcement of security and reliability poli-
cies for JavaScript code,” in Usenix Security, 2009.
[12] K. Jayaraman, W. Du, B. Rajagopalan, and
S. Chapin, “Escudo: A ﬁne-grained protection
model for web browsers,” in Proceedings of the
30th International Conference on Distributed Com-
puting Systems, pp. 231–240, IEEE, 2010.
[24] A. P. Felt, K. Greenwood, and D. Wagner, “The
effectiveness of application permissions,” in Pro-
ceedings of the 2nd USENIX conference on Web ap-
plication development, 2011.
[25] K. W. Y. Au, Y. F. Zhou, Z. Huang, P. Gill, and
D. Lie, “Short paper: A look at smartphone per-
mission models,” in Proceedings of the 1st ACM
workshop on Security and privacy in smartphones
and mobile devices, 2011.
[26] A. P. Felt, “Advertising and android permissions,”
Nov 2011. http://www.adrienneporterfelt.
com/blog/?p=357.
[13] J. Saltzer and M. Schroeder, “The protection of in-
formation in computer systems,” Proceedings of the
IEEE, vol. 63, no. 9, pp. 1278–1308, 1975.
[27] Google Inc., “Google chrome extensions: chrome.*
http://code.google.com/chrome/
apis.”
extensions/api_index.html.
[14] “lxc
linux
sourceforge.net/.
containers.”
http://lxc.
[15] “Google seccomp sandbox for linux.” http://
code.google.com/p/seccompsandbox/.
[16] N. Provos, “Improving host security with system
call policies,” in Proceedings of the 12th USENIX
Security Symposium, 2003.
[17] N. Provos, M. Friedl, and P. Honeyman, “Prevent-
ing privilege escalation,” in Proceedings of the 12th
USENIX Security Symposium, 2003.
[18] D. J. Bernstein, “Some thoughts on security after
ten years of qmail 1.0,” in Proceedings of the 2007
ACM workshop on Computer security architecture.
[19] A. Barth, C. Jackson, C. Reis, and T. G. C.
Team, “The security architecture of the chromium
browser,” 2008.
[20] E. Y. Chen, J. Bau, C. Reis, A. Barth, and C. Jack-
son, “App isolation: get the security of multiple
browsers with just one,” in Proceedings of the 18th
ACM conference on Computer and communica-
tions security, pp. 227–238, 2011.
[21] A. Guha, M. Fredrikson, B. Livshits,
and
N. Swamy, “Veriﬁed security for browser exten-
sions,” in Proceedings of the IEEE Symposium on
Security and Privacy, pp. 115–130, 2011.
[22] “Html5 privilege separation: Source code release.”
http://github.com/devd/html5privsep.
[23] A. Barth, A. Felt, P. Saxena, and A. Boodman,
“Protecting browsers from extension vulnerabili-
ties,” in Proceedings of the 17th Network and Dis-
tributed System Security Symposium, 2010.
15
[28] S. Maffeis, J. C. Mitchell, and A. Taly, “Object ca-
pabilities and isolation of untrusted web applica-
tions,” in Proceedings of the 2010 IEEE Symposium
on Security and Privacy, pp. 125–140.
[29] Google Inc., “Issues: google-caja: A source-to-
for securing Javascript-based
content.” http://code.google.com/p/
source translator
web
google-caja.
[30] M. Finifter, J. Weinberger, and A. Barth, “Prevent-
ing capability leaks in secure JavaScript subsets,”
in Proc. of Network and Distributed System Secu-
rity Symposium, 2010.
[31] G. Tan and J. Croft, “An empirical security study
of the native code in the jdk,” in Proceedings of the
17th Usenix Conference on Security, pp. 365–377,
2008.
[32] A. Barth, “Rfc 6454: The web origin concept.”
http://tools.ietf.org/html/rfc6454.
[33] Bugzilla@Mozilla, “Bug 341604 - (framesand-
implement html5 sandbox attribute for
https://bugzilla.mozilla.org/
box)
iframes.”
show_bug.cgi?id=341604.
[34] B. Sterne and A. Barth, “Content security policy:
https://dvcs.
W3c editor’s draft,” 2012.
w3.org/hg/content-security-policy/
raw-file/tip/csp-specification.dev.
html.
[35] diigo.com, “Awesome screenshot : Capture anno-
tate share.” http://www.awesomescreenshot.
com/.
[50] B. Parno, J. M. McCune, D. Wendlandt, D. G. An-
dersen, and A. Perrig, “Clamp: Practical preven-
tion of large-scale data leaks,” in Proceedings of
the 30th IEEE Symposium on Security and Privacy,
pp. 154–169, 2009.
[51] A. Barth, C. Jackson, and W. Li, “Attacks on
javascript mashup communication,” in Workshop
on Web 2.0 Security and Privacy (W2SP), 2009.
[52] M. T. Louw, K. T. Ganesh, and V. N. Venkatakrish-
nan, “Adjail: practical enforcement of conﬁdential-
ity and integrity policies on web advertisements,”
in Proceedings of the 19th USENIX conference on
Security, 2010.
[53] L. Ingram and M. Walﬁsh, “Treehouse: Javascript
sandboxes to help web developers help them-
selves,” in Proceedings of the USENIX annual tech-
nical conference, 2012.
[54] “AdSafe : Making JavaScript Safe for Advertis-
ing.” http://www.adsafe.org/.
[36] Dropbox Inc., “Dropbox developer
reference.”
http://www.dropbox.com/developers/
reference.
[37] “Ace - ajax.org cloud9 editor.”
ajax.org/.
http://ace.
[38] The Dojo Foundation, “The dojo toolkit.” http:
//dojotoolkit.org/.
[39] GitHub Inc., “Edit like an ace.” https://github.
com/blog/905-edit-like-an-ace.
[40] “Oauth.” http://oauth.net/.
[41] D. Brumley and D. Song, “Privtrans: automatically
partitioning programs for privilege separation,” in
Proceedings of the 13th on USENIX Conference on
Security, 2004.
[42] P. Josling, “dropbox-js: A javascript library for
the dropbox api.” http://code.google.com/p/
dropbox-js/.
[43] A. van Kesteren (Ed.), “Cross-origin resource shar-
ing.” http://www.w3.org/TR/cors/.
[44] “pynarcissus : The narcissus javascript interpreter
ported to python.” http://code.google.com/
p/pynarcissus/.
splitting applications
[45] A. Bittau, P. Marchenko, M. Handley, and B. Karp,
“Wedge:
into reduced-
privilege compartments,” in Proceedings of the 5th
USENIX Symposium on Networked Systems Design
and Implementation, pp. 309–322, 2008.
[46] H. J. Wang, X. Fan, J. Howell, and C. Jackson,
“Protection and communication abstractions for
web browsers in mashupos,” SIGOPS Oper. Syst.
Rev., vol. 41, pp. 1–16, Oct. 2007.
[47] H. Wang, C. Grier, A. Moshchuk, S. King,
P. Choudhury, and H. Venter, “The multi-principal
os construction of the gazelle web browser,” in Pro-
ceedings of the 18th USENIX security symposium,
pp. 417–432, 2009.
[48] C. Grier, S. Tang, and S. King, “Designing and im-
plementing the op and op2 web browsers,” ACM
Transactions on the Web (TWEB), 2011.
[49] A. P. Felt, H. J. Wang, A. Moshchuk, S. Hanna,
and E. Chin, “Permission re-delegation: Attacks
and defenses,” in Proceedings of the 20th USENIX
conference on Security, 2011.
16