# 一、持续交付简介
大多数开发人员面临的共同问题是如何快速安全地发布实现的代码。然而，传统上使用的交付过程是陷阱的来源，通常会导致开发人员和客户的失望。本章介绍了持续交付方法的思想，并为本书的其余部分提供了背景。
本章包括以下几点:
*   介绍传统的交付流程及其缺点
*   描述持续交付的理念及其带来的好处
*   比较不同公司交付软件的方式
*   解释自动化部署管道及其阶段
*   对不同类型的测试及其在流程中的位置进行分类
*   指出成功持续交付流程的先决条件
*   展示将在整本书中使用的工具
*   展示了整本书将要构建的完整系统
# 什么是持续交付？
Jez Humble 对持续交付的最准确定义如下:“持续交付是以可持续的方式将所有类型的更改(包括新功能、配置更改、错误修复和实验)安全、快速地投入生产或用户手中的能力。”该定义涵盖了关键点。
为了更好地理解它，让我们想象一个场景。你负责产品，比如说，电子邮件客户端应用。用户带着一个新的要求来找你——他们想按大小对电子邮件进行分类。你决定开发大约需要一周时间。用户何时可以使用该功能？通常，在开发完成后，您首先将完成的特性交给质量保证团队，然后交给运营团队，这需要几天到几个月的额外时间。因此，即使开发只花了一周时间，用户也能在几个月内收到它！持续交付方法通过自动化手动任务来解决这个问题，以便用户可以在新功能实施后立即获得它。
为了更好地展示自动化的内容和方式，让我们从描述当前用于大多数软件系统的交付过程开始。
# 传统的交付流程
顾名思义，传统的交付流程已经存在多年，并在大多数信息技术公司中实施。让我们定义它是如何工作的，并评论它的缺点。
# 介绍传统的交付流程
任何交付过程都是从客户定义的需求开始，到产品发布结束。区别在两者之间。传统上，它看起来如下面的发布周期图所示:
![](img/08f78945-6823-4b83-990b-109618b5dbbf.png)
发布周期从代表**客户**(利益相关方)的**产品负责人**提供的要求开始。然后有三个阶段，在此期间工作在不同的团队之间传递:
*   **开发**:这里，开发人员(有时和业务分析师一起)在产品上工作。他们经常使用敏捷技术(Scrum 或看板)来提高开发速度和改善与客户的沟通。组织演示会议是为了获得客户的快速反馈。所有好的开发技术(如测试驱动开发或极限编程实践)都是受欢迎的。实现完成后，代码被传递给质量保证团队。
*   **质量保证**:这个阶段通常被称为**用户验收测试** ( **UAT** )，它需要在主干代码库中冻结代码，这样就不会有新的开发破坏测试。QA 团队执行一套**集成测试**、**验收测试**、**非功能测试**(性能、恢复、安全等)。任何被检测到的 bug 都会返回到开发团队，所以开发人员通常也会忙得不可开交。UAT 阶段完成后，质量保证团队批准计划在下一个版本中使用的功能。
*   **运营**:最后一个阶段，通常是最短的一个阶段，就是把代码传递给**运营**团队，让他们执行发布，监控生产。如果出现任何问题，他们会联系开发人员来帮助生产系统。
发布周期的长度取决于系统和组织，但通常从一周到几个月不等。我听说的最长的是一年。我工作时间最长的是以季度为基础，每个部分的时间如下:开发-1.5 个月，UAT-1 个月零 3 周，发布(和严格的生产监控)-1 周。
传统的交付流程在信息技术行业中被广泛使用，您可能不是第一次读到这种方法。然而，它有许多缺点。让我们看看它们的明确性，以理解为什么我们需要为更好的东西而奋斗。
# 传统交付流程的缺点
传统交付流程的最大缺点包括:
*   **慢发货**:这里，客户在指定需求很久之后才收到产品。这导致了不令人满意的上市时间和客户反馈的延迟。
*   **反馈周期长**:反馈周期不仅和客户有关，也和开发者有关。想象一下，你不小心创建了一个 bug，并在 UAT 阶段了解了它。修复你两个月前做的东西需要多长时间？即使是很小的 bug 也需要几周的时间。
*   **缺乏自动化**:稀有版本不鼓励自动化，导致不可预测的发布。
*   **有风险的修补程序**:修补程序通常不能等到完整的 UAT 阶段，所以它们往往会被不同的测试(UAT 阶段被缩短)或者根本不被测试。
*   **压力**:不可预测的释放对运营团队来说是有压力的。此外，发布周期通常安排得很紧，这给开发人员和测试人员带来了额外的压力。
*   **沟通不畅**:从一个团队传递到另一个团队的工作代表了瀑布式的方法，在这种方法中，人们开始只关心自己的部分，而不是整个产品。万一出了什么问题，通常会导致指责游戏，而不是合作。
*   **共担责任**:从 A 到 z 没有一个团队对产品负责，对于开发人员来说:“完成”意味着需求得到实现。对于测试人员来说:“完成”意味着代码被测试。对于操作:“完成”意味着代码被发布。
*   **工作满意度降低**:每个阶段对于不同的团队来说都是有趣的，但是其他团队需要支持这个过程。例如，开发阶段对开发人员来说很有趣，但是在另外两个阶段，他们仍然需要修复 bug 并支持发布，这通常对他们来说一点也不有趣。
这些缺点只是与传统交付流程相关的挑战的冰山一角。您可能已经感觉到必须有一种更好的方法来开发软件，而这种更好的方法显然是持续交付方法。
# 持续交付的优势
“您的组织需要多长时间来部署只涉及一行代码的变更？您是在可重复、可靠的基础上做到这一点的吗？”以上是 Mary 和 Tom Poppendieck(实现精益软件开发*的作者)提出的著名问题，被 Jez Humble 等作者多次引用。事实上，这些问题的答案是衡量你的交付过程健康程度的唯一有效方法。*
 *为了能够持续交付，并且不在全天候工作的运营团队大军上花费大量资金，我们需要自动化。这就是为什么，简而言之，持续交付就是将传统交付过程的每个阶段都变成一系列脚本，称为自动化部署管道或持续交付管道。然后，如果不需要手动步骤，我们可以在每次代码更改后运行该过程，从而将产品持续交付给用户。
持续交付让我们摆脱了繁琐的发布周期，因此带来了以下好处:
*   **快速交付**:上市时间大幅缩短，因为客户一完成开发就可以使用产品。请记住，该软件只有在其用户手中才能带来收入。
*   **快速反馈周期**:想象一下你在代码中创建了一个 bug，当天就投入生产了。修理你当天工作的东西需要多长时间？可能不多。这与快速回滚策略一起，是保持生产稳定的最佳方式。
*   **低风险释放**:如果你每天释放，那么这个过程就变得可重复，因此安全多了。俗话说:“痛了就多做。”
*   **灵活发布选项**:如果需要立即发布，一切都已经准备好了，所以发布决定不需要额外的时间/成本。
不用说，我们可以简单地通过消除所有交付阶段并直接在产品上进行开发来实现所有好处。然而，这会导致质量下降。实际上，引入持续交付的全部困难是担心质量会随着取消手动步骤而下降。在本书中，我们将展示如何以安全的方式接近它，并解释为什么与普遍的信念相反，持续交付的产品缺陷更少，并且更好地适应客户的需求。
# 成功案例
罗尔夫·拉塞尔在他的一次演讲中讲述了我最喜欢的关于持续交付的故事。事情是这样的。2005 年，雅虎收购了 Flickr，这是开发者世界中两种文化的冲突。那时，Flickr 是一家考虑到创业方式的公司。相反，雅虎是一家拥有严格规则和安全第一态度的大公司。它们的发布过程有很大不同。虽然雅虎使用传统的交付流程，但 Flickr 一天发布多次。开发人员实施的每一项变更都在同一天投入生产。他们甚至在页面底部有一个页脚，显示最后一次发布的时间和进行更改的开发人员的头像。
雅虎很少部署，每个版本都带来了很多经过充分测试和准备的变化。Flickr 以非常小的块工作，每个特性被分成小的增量部分，每个部分被快速部署到产品中。下图显示了差异:
![](img/10797d6c-4806-4dcf-b5f2-4f3cfdc41eae.png)
你可以想象当两家公司的开发人员相遇时发生了什么。雅虎显然把 Flickr 的同事们当成了不负责任的初级开发人员，“一群不知道自己在做什么的软件牛仔。”因此，他们想要改变的第一件事是在 Flickr 的交付过程中增加一个质量保证团队和 UAT 阶段。然而，在应用这一改变之前，Flickr 的开发者只有一个愿望。他们要求评估整个雅虎公司中最可靠的产品。当雅虎所有软件中，Flickr 的停机时间最少时，真是令人惊讶。雅虎团队起初并不理解，但无论如何还是让 Flickr 继续他们目前的流程。毕竟他们是工程师，所以评估结果是确凿的。只是过了一段时间，他们才意识到持续交付流程可以对雅虎的所有产品都有好处，他们开始逐步在各地推出。
这个故事最重要的问题仍然是 Flickr 怎么可能是最可靠的系统？事实上，这一事实的原因是我们在前面的章节中已经提到的。在以下情况下，发布风险较低:
*   代码变化的增量很小
*   这个过程是可重复的
这就是为什么，尽管发布本身是一项困难的活动，但是频繁地发布会更安全。
雅虎和 Flickr 的故事只是持续交付流程被证明是正确的许多成功公司的一个例子。他们中的一些人甚至自豪地分享他们系统中的细节，如下所示:
*   **亚马逊**:2011 年，他们宣布部署间隔达到 11.6 秒(平均)
*   **脸书**:2013 年，他们一天两次宣布部署代码变更
*   **HubSpot**:2013 年，他们每天宣布部署 300 次
*   **Atlassian**:2016 年，他们发布了一项调查，称 65%的客户实行持续交付
You can read more about the research on the Continuous Delivery process and individual case studies at [https://continuousdelivery.com/evidence-case-studies/](https://continuousdelivery.com/evidence-case-studies/).
请记住，统计数据一天比一天好。然而，即使没有任何数字，只要想象一个你实现的每一行代码都安全进入生产的世界。客户可以快速反应并调整他们的需求，开发人员很高兴，因为他们不必解决那么多 bug，经理很满意，因为他们总是知道当前的工作状态。毕竟，请记住，衡量进步的唯一真正标准是发布的软件。
# 自动化部署管道
我们已经知道什么是持续交付流程，以及我们为什么使用它。在本节中，我们将描述如何实现它。
让我们从强调传统交付过程中的每个阶段都很重要开始。否则，它根本就不会被创造出来。没有人想不先测试就交付软件！UAT 阶段的作用是检测错误，并确保开发人员创建的是客户想要的。这同样适用于运营团队—必须对软件进行配置、部署到生产中并进行监控。那是不可能的。那么，我们如何自动化这个过程，从而保留所有的阶段呢？这就是自动化部署管道的作用，它由三个阶段组成，如下图所示:
![](img/afeccaf6-be79-485d-bba8-beb5f782b675.png)
自动化部署管道是一系列脚本，在提交给存储库的每个代码更改之后执行。如果该过程成功，它最终会部署到生产环境中。
每个步骤对应于传统交付流程中的一个阶段，如下所示:
*   **持续集成**:这个检查是为了确保不同开发人员编写的代码集成在一起
*   **自动化验收测试**:这取代了手动 QA 阶段，检查开发人员实现的特性是否满足客户的需求
*   **配置管理**:这取代了手动操作阶段——配置环境和部署软件
让我们更深入地了解每个阶段，了解它的职责是什么，包括哪些步骤。
# 连续累计
持续集成阶段向开发人员提供第一个反馈。它从存储库中检出代码，编译它，运行单元测试，并验证代码质量。如果任何一个步骤失败，管道执行就会停止，开发人员应该做的第一件事就是修复持续集成构建。这个阶段的本质是时间；必须及时执行。例如，如果这个阶段花了一个小时来完成，那么开发人员会更快地提交代码，这将导致管道不断失败。