pairs is considered as the possible execution contexts for k.
Algorithm 1: Finding execution contexts.
Input: CallSite k, CallGraph G, ContextDepth d
1 Sk ← ∅
2 f ← Function(k)
3 F ← ReverseBFS(G, f, d)
4 for g ∈ F do
ϕg ← BFS(G, g, 2 ∗ d)
5
Remove target of k from ϕg
6
Sk ← Sk ∪ { (g, ϕg)}
7
8 return Sk
2) Under-Constrained Symbolic Execution: Given an exe-
cution context (g, ϕ) for a call site k, we symbolically execute
from the entry-point function, g, by using fresh symbols as the
arguments. At function calls, we step into the corresponding
function h if h ∈ ϕ; otherwise we ignore the call instruction
and create a new symbol as the return value of the call.
a) Memory model: We use a simple hash map based memory
model where the address (symbolic or concrete) is used as a
key into the map. We initialize each byte of memory using a
fresh and unconstrained symbolic value. Our memory model
follows that in recent works [14], [52] which have shown its
effectiveness at ﬁnding bugs.
b) Handling loops and recursion: We unroll each loop once
and do not step into recursive function calls to avoid path
explosion. This is based on the intuition that a single run of
the loop body can capture an API’s usage. Nonetheless, we
record loop entry (BEG LOOP) and exit (END LOOP) events as
they can be helpful to identify a bug or suppress a false alarm.
Fig. 1: Overview of ARBITRAR.
in multiple ways, the task becomes even more challenging,
requiring one to either craft a small bug-isolation checker for
each individual bug pattern or write a larger and comprehensive
speciﬁcation checker.
This example highlights the difﬁculty of writing precise API
speciﬁcations and illustrates why developers loathe writing
them. In fact, GitHub awards a bounty for each valid speciﬁ-
cation of a security vulnerability written in CodeQL [20].
B. APISAN
APISAN adopts an automated approach to ﬁnding API
misuse bugs based on majority usage patterns. At a technical
level, APISAN employs individual checkers, and each checker
is responsible for a speciﬁc type of usage pattern, such as return
value check, argument relation, causally related APIs, and pre-
or post-conditions. To ﬁnd the bug in Listing 1, APISAN must
combine the return value with the argument checker to infer
the two correct usage patterns of png_destroy_write_struct.
Since APISAN does not consider the composition of different
types of usage patterns, it will be unable to differentiate our bad
use-case from the good one, unless it ﬁnds another unrelated sig-
nal. In fact, with its condition checker, APISAN ﬂags our good
use case as the only alarm of png_destroy_write_struct,
while other checkers do not report any.
As we show in Section III-C, ARBITRAR ﬁnds the bug
in Listing 1 within just 4 rounds of user interaction.
III. FRAMEWORK
In this section, we present our ARBITRAR framework, whose
overall workﬂow is depicted in Figure 1. Given a set of
C/C++ program(s) and a target API method to check, we
ﬁrst compile the programs to LLVM bitcode, and then generate
symbolic traces of all the uses of the API (Section III-A).
These symbolic traces are then encoded into feature vectors that
capture information relevant to classifying valid and invalid uses
of the API (Section III-B). Finally, using our active learning
algorithm, we interact with the user by presenting a potentially
buggy trace and learning from the feedback (Section III-C) to
identify anomalies.
A. Trace Generation
The goal of trace generation is to generate all program paths
with calls to an API method in order to precisely capture
different usage scenarios of the API method. However, it is
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:25:07 UTC from IEEE Xplore.  Restrictions apply. 
1402
LLVMBitcodeSymbolicTracesORTraceGeneration(Section III.A)API MethodNameTraceEncoding(Section III.B)ActiveLearning(Section III.C)FeedbackProgram Tracewith API usageVectorizedTraces	kzalloc	kzallocTABLE I: Interaction Example. We show step-by-step how our active learning model guides the user to ﬁnd the two invalid
usages. In each iteration, the user inspects the trace, and provides binary feedback. The 2D TSNE Plot row shows the
distribution of trace encodings projected onto a 2D plane. We represent the positive, negative, unlabeled, and selected datapoints
using +, Ø, ×, and (cid:72) respectively. The Trace Acquisition row provides the intuition for why the trace marked in (cid:72) is picked.
Iteration
1st
2nd
3rd
4th
ƭ libpng/png.c:4577
→png_destroy_read_struct(
&c.png_ptr, &c.info_ptr,
NULL);
fclose(fp);
return sng_error;
ƭ pngtools/pngread.c:43
→png_destroy_read_struct(
&png_ptr, &info_ptr,
...
png_destroy_read_struct(
&png_ptr, &info_ptr,
ƭ apngasm/apngasm.c:187
→png_destroy_read_struct(
&png_ptr, &info_ptr,
ƭ apngasm/apngasm.c:195
→png_destroy_read_struct(
&png_ptr, &info_ptr,
...
png_destroy_read_struct(
&png_ptr, &info_ptr,
e
c
a
r
T
o
f
n
I
Correct Usage: As the
png_ptr and info_ptr are
passed in from arguments
Invalid Usage : Double free
because of multiple calls to
Invalid Usage : Double free
because of multiple calls to
png_destroy_read_struct
png_destroy_read_struct
Not a Bug
(cid:13) Bug
(cid:13) Bug
User
Feedback
t
o
l
P
E
N
S
T
D
2
Normal trace
Not a Bug
Pick a trace that is furthest
from the negative trace and
closest to the positive trace.
e
c
a
r
T
n
o
i
t
i
s
i
u
q
c
A
Pick a trace at random.
Pick a trace that is
furthest from the
previous negative trace.
The result of under-constrained symbolic execution on each
execution context is a set of program paths or symbolic traces,
i.e., {ρ1, ..., ρn}. Each symbolic trace (ρ) represents a sequence
of program events operating on symbolic or concrete values
and has the format as shown in Figure 2. Note that, we ignore
infeasible paths (i.e., path constraint is unsatisﬁable) and all
paths that do not contain our call site k. Every trace contains
the event representing target call site k and indicate it by tk.
Hereafter, we will use k to indicate the index of the program
event representing the target API call.
Figure 3 shows an example code snippet and two traces that
are generated to capture usages of an API method kzalloc.
B. Trace Encoding
The goal of trace encoding is to convert the set of program
traces into ﬁxed-dimensional feature vectors that will be used
later in our active learning algorithm. Based on an analysis
of various API misuse bugs [25], we deﬁne a list of features
used to encode each trace as shown in Table II. These features
are extensive and cover most of the behaviors related to API
usage. As such, users are not required to deﬁne any features.
Nonetheless, ARBITRAR provides a uniform and extensible
interface to deﬁne features using Datalog rules over relational
representations of program traces. Datalog [2], a declarative
logic programming language, is popularly used to specify a
variety of program analyses (e.g., [55], [64]). Many variants
exist in the literature including PQL [43], CodeQL [4], and
LogiQL [23].
Pick a trace that is
closest to the
known positive trace.
(symbolic variable)
(function name)
(integer)
(boolean)
(symbol type)
(symbolic expression)
(relational operation)
(i-th program event)
(arithmetic operation) ⊕ ::= + | − | × | ÷ | %
α
f
c
b
τ
e
p
ti
::= true | false
::= arg | local | global | symbol
::= c | ατ
::= = | (cid:54)= | ≥ | > | ≤ | <
::= CALL
(i, er, f, ¯ea)
|
|
|
|
|
|
|
|
ASSUME (i, e1, p, e2, b)
STORE
LOAD
GEP
BINARY (i, er, ⊕, e1, e2)
RET
BEG LOOP(i)
END LOOP(i)
(i, el, er)
(i, er, el)
(i, er, el)
(i, e)
(target event)
(symbolic trace)
tk ≡ CALL(k, ˆer, ˆf , ¯ˆea)
::= [t1, . . . , tk, . . . , tn]
ρ
Fig. 2: Symbolic trace format.
We illustrate feature deﬁnitions in ARBITRAR using the
example from Figure 3 which contains an API misuse bug that
is exhibited along Trace 1: the return value of the target API
kzalloc is dereferenced after it is assumed to be zero. This
bug motivates the need for two boolean features: one capturing
whether the return value of the target API is assumed to be zero
(called ret.assumed zero), and another capturing whether it
is dereferenced (called ret.derefed).
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:25:07 UTC from IEEE Xplore.  Restrictions apply. 
1403
Source
Trace 1 (ρ1)
Trace 2 (ρ2)
void *make_copy(void *b, size_t s){
void *p;
p = kzalloc(s, GFP_KERNEL);
if(!p){
(cid:13) *p = 0;
goto err;
}
memcpy(p, b, s);
err: return p;
(ρ1, ρ2)
(ρ1, ρ2)
(ρ1, ρ2)
(ρ1)
(ρ1)
(ρ2)
(ρ1, ρ2)
}
CALL(1, αsymbol, kzalloc, [γarg, GFP KERNEL]).
ASSUME(2, αsymbol, =, 0, true).
STORE(3, αsymbol, 0).
RET(4, αsymbol).
CALL(1, αsymbol, kzalloc, [γarg, GFP KERNEL]).
ASSUME(2, αsymbol, =, 0, false).
CALL(3,
RET(4, αsymbol).
, memset, [αsymbol, βarg, γarg]).
Feature vector:
ret.checked = true
(cid:13) ret.assumed zero = true
ret.assumed not zero = false
ret.used in call = false
(cid:13) ret.derefed = true
ret.returned = true
Feature vector:
ret.checked = true
ret.assumed is zero = false
ret.assumed not zero = true
ret.used in call = true
ret.derefed = false
ret.returned = true
Fig. 3: Example traces and features generated to check usages of kzalloc. In both traces, p is checked and returned: Trace 1
assumes p to be zero whereas Trace 2 assumes p to be non-zero. Furthermore, p is dereferenced in Trace 1, whereas it is used
as an argument to memset in Trace 2. This information is captured in the return value features of their respective feature vectors.
Note that the two arguments void *b and size_t s are assigned symbolic variables βarg and γarg in our symbolic traces.
We can deﬁne the feature ret.assumed zero using the
following three Datalog rules:
assumed zero(i, e) :− ASSUME(i, e, =, 0, true ).
assumed zero(i, e) :− ASSUME(i, e,(cid:54)=, 0, false).
ret.assumed zero :− assumed zero( , ˆer).
(R1)
(R2)
(R3)
A Datalog rule is an “if-then” rule read from right to left. Rules
(R1) and (R2) compute the binary relation assumed zero as
the set of all tuples (i, e) such that the i-th event in the given
trace assumes symbolic expression e to be zero. Likewise, Rule
(R3) computes the nullary relation (i.e., a boolean feature)
which is true if and only if there exists a tuple in relation
assumed zero wherein the symbolic expression is the return
value of the target API call in the trace, denoted ˆer.
The feature ret.derefed is deﬁned similarly. The complete
set of features used in ARBITRAR is presented in Table II.
Commonly used relations, such as assumed zero deﬁned by
Rules (R1) and (R2) above, are presented in Figure 4. The
features deal with different aspects of an API: return value,
arguments, causality relations, and control ﬂow. We brieﬂy
describe each of these sets of features:
1) Return value. Return value features are related to how the
return value is used. We generate this set of features if the
target function has a non-void return type.
2) Arguments. Argument features correspond to the symbol
type and pre- and post-condition of the arguments. If the
target API method has m arguments, we generate m sets
of argument features, one per argument.
3) Causality relations. Causal relations arise when the target
API method belongs to a “group” of functions that should
be invoked together. Examples include lock/unlock and
fopen/fclose. Given a target API method g, we infer
such functions as those that are invoked most frequently,
across the collected traces. Speciﬁcally, we ﬁnd the top-K
occurring functions before and after the target API call, and
construct two causality dictionaries D[1,k) and D(k,n]. The
value of K is conﬁgurable and is set to 5 as default. We
then generate one set of causality features for each function
g in Dr where the scope r is either [1, k) or (k, n].
4) Control ﬂow. This set of features is not speciﬁc to any API.
We include these loop-related features because they are
indicative of the trace structure, and can serve as valuable
signals to isolate the bug or suppress false alarms.
ARBITRAR’s features are extensible and could conceivably
even be automatically generated from examples of valid and
invalid API usages, using program synthesis techniques [50],
[34]. Datalog, ARBITRAR’s language for deﬁning features, is
expressive enough and even supports recursion. For instance,
the binary relation belongs to ptr is recursively deﬁned
(in Figure 4), and enables us to deﬁne boolean feature
ret.indirectly returned (in Table II) which captures
whether the return value of the target API call is returned from
the given trace’s execution context indirectly via an arbitrary
chain of element pointers.
We encode each symbolic trace into a boolean vector of
features. For instance, Figure 3 shows the vectors of return
value features for the two traces in the example. Finally, we
apply binary encoding to the boolean vectors to produce ﬁxed-
dimensional binary vectors.
C. Active Learning and User Interaction
In this section, we propose a novel active learning solution
for the API misuse problem. We ﬁrst formulate the problem as
an interactive anomaly detection problem in machine learning,
where the goal is to identify anomalies by interacting with
a human expert. Then we present our human-in-the-loop
algorithm, MD-KDE,