类型，可精确地储存指针值，见表B.6.5。
表B.6.5 可储存指针值的整数类型
B.6.6 扩展的整型常量
在整数后面加上L后缀可表示long类型的常量，如445566L。如何表示
int32_t类型的常量？要使用inttypes.h头文件中定义的宏。例如，表达式
INT32_C(445566)展开为一个int32_t类型的常量。从本质上看，这种宏相当
于把当前类型强制转换成底层类型，即特殊实现中表示int32_t类型的基本类
型。
宏名是把相应类型名中的_C 用_t 替换，再把名称中所有的字母大写。
例如，要把 
1000 
设置为unit_least64_t类型的常量，可以使用表达式
UNIT_LEAST64_C(1000)。
1605
B.7 参考资料VII：扩展字符支持
C 语言最初并不是作为国际编程语言设计的，其字符的选择或多或少是
基于标准的美国键盘。但是，随着后来C在世界范围内越来越流行，不得不
扩展来支持不同且更大的字符集。这部分参考资料概括介绍了一些相关内
容。
B.7.1 三字符序列
有些键盘没有C中使用的所有符号，因此C提供了一些由三个字符组成
的序列（即三字符序列）作为这些符号的替换表示。如表B.7.1所示。
表B.7.1 三字符序列
C替换了源代码文件中的这些三字符序列，即使它们在双引号中也是如
此。因此，下面的代码：
??=include 
??=define LIM 100
int main()
??
会变成这样：
#include 
#define LIM 100
int main()
{
int q[LIM];
printf("More to come.\n");
...
}
当然，要在编译器中设置相关选项才能激活这个特性。
B.7.2 双字符
意识到三字符系统很笨拙，C99提供了双字符（digraph），可以使用它
们来替换某些标准C标点符号。
表B.7.2 双字符
与三字符不同的是，不会替换双引号中的双字符。因此，下面的代码：
%:include 
%:define LIM 100
1607
int main()
;
printf("More to come.:>");
...
%>
会变成这样：
#include 
#define LIM 100
int main()
{
int q[LIM];
printf("More to come.:>"); // :>是字符串的一部分
...
}                // :>与 }相同
B.7.3 可选拼写：iso646.h
使用三字符序列可以把||运算符写成??!??!，这看上去比较混乱。C99 通
过iso646.h头文件（参考资料V中的表B.5.11）提供了可展开为运算符的宏。
C标准把这些宏称为可选拼写（alternative spelling）。
如果包含了iso646.h头文件，以下代码：
1608
if(x == M1 or x == M2)
x and_eq 0XFF;
可展开为下面的代码：
if(x == M1 || x == M2)
x &= 0XFF;
B.7.4 多字节字符
C 标准把多字节字符描述为一个或多个字节的序列，表示源环境或执行
环境中的扩展字符集成员。源环境指的是编写源代码的环境，执行环境指的
是用户运行已编译程序的环境。这两个环境不同。例如，可以在一个环境中
开发程序，在另一个环境中运行该程序。扩展字符集是C语言所需的基本字
符集的超集。
有些实现会提供扩展字符集，方便用户通过键盘输入与基本字符集不对
应的字符。这些字符可用于字符串字面量和字符常量中，也可出现在文件
中。有些实现会提供与基本字符集等效的多字节字符，可替换三字符和双字
符。
例如，德国的一个实现也许会允许用户在字符串中使用日耳曼元音变音
字符：
puts("eins zwei drei vier fünf");
一般而言，程序可使用的扩展字符集因本地化设置而异。
B.7.5 通用字符名（UCN）
多字节字符可以用在字符串中，但是不能用在标识符中。C99新增了通
用字符名（UCN），允许用户在标识名中使用扩展字符集中的字符。系统扩
展了转义序列的概念，允许编码ISO/IEC 
10646标准中的字符。该标准由国
1609
际标准化组织（ISO）和国际电工技术委员会（IEC）共同制定，为大量的
字符提供数值码。10646标准和统一码（Unicode）关系密切。
有两种形式的UCN序列。第1种形式是\u hexquard，其中hexquard是一个
4位的十六进制数序列（如，\u00F6）。第 2种形式是\U hexquardhexquard，
如\U0000AC01。因为十六进制每一位上的数对应4位，\u形式可用于16位整
数表示的编码，\U形式可用于32位整数表示的编码。
如果系统实现了UCN，而且包含了扩展字符集中所需的字符，就可以在
字符串、字符常量和标识符中使用UCN：
wchar_t value\u00F6\u00F8 = L'\u00f6';
统一码和ISO 10646
统一码为表示不同的字符集提供了一种解决方案，可以根据类型为大量
字符和符号制定标准的编号系统。例如，ASCII码被合并为统一码的子集，
因此美国拉丁字符（如A～Z）在这两个系统中的编码相同。但是，统一码
还合并了其他拉丁字符（如，欧洲语言中使用的一些字符）和其他语言中的
字符，包括希腊文、西里尔字母、希伯来文、切罗基文、阿拉伯文、泰文、
孟加拉文和形意文字（如中文和日文）。到目前为止，统一码表示的符号超
过了 
110000个，而且仍在发展中。欲了解更多细节，请查阅统一码联合站
点：www.unicode.org。
统一码为每个字符分配一个数字，这个数字称为代码点（code
point）。典型的统一码代码点类似：U-222B。U表示该字符是统一字符，
222B是表示该字符的一个十六进制数，在这种情况下，表示积分号。
国际标准化组织（ISO）组建了一个团队开发ISO 10646和标准编码的多
语言文本。ISO 10646团队和统一码团队从1991年开始合作，一直保持两个
标准的相互协调。
B.7.6 宽字符
1610
C99为使用宽字符提供更多支持，通过wchar.h和wctype.h库包含了更多
大型字符集。这两个头文件把wchar_t定义为一种整型类型，其确切的类型
依赖实现。该类型用于储存扩展字符集中的字符，扩展字符集是是基本字符
集的超集。根据定义，char类型足够处理基本字符集，而wchar_t类型则需要
更多位才能储存更大范围的编码值。例如，char 可能是 8 位字节，wchar_t
可能是 16 位的 unsigned short。
用L前缀标识宽字符常量和字符串字面量，用%lc和%ls显示宽字符数
据：
wchar_t wch = L'I';
wchar_t w_arr[20] = L"am wide!";
printf("%lc %ls\n", wch, w_arr);
例如，如果把wchar_t实现为2字节单元，'I'的1字节编码应储存在wch的
低位字节。不是标准字符集中的字符可能需要两个字节储存字符编码。例
如，可以使用通用字符编码表示超出 char 类型范围的字符编码：
wchar_t w = L'\u00E2'; /* 16位编码值 */
内含 wchar_t 类型值的数组可用于储存宽字符串，每个元素储存一个宽
字符编码。编码值为 0 的wchar_t值是空字符的wchar_t类型等价字符。该字
符被称为空宽字符（null wide character），用于表示宽字符串的结尾。
可以使用%lc和%ls读取宽字符：
wchar_t wch1;
wchar_t w_arr[20];
puts("Enter your grade:");
scanf("%lc", &wch1);
1611
puts("Enter your first name:");
scanf("%ls",w_arr);
wchar_t头文件为宽字符提供更多支持，特别是提供了宽字符I/O函数、
宽字符转换函数和宽字符串控制函数。例如，可以用fwprintf()和wprintf()函
数输出，用fwscanf()和wscanf()函数输入。与一般输入/输出函数的主要区别
是，这些函数需要宽字符格式字符串，处理的是宽字符输入/输出流。例
如，下面的代码把信息作为宽字符显示：
wchar_t * pw = L"Points to a wide-character string";
int dozen = 12;
wprintf(L"Item %d: %ls\n", dozen, pw);
类似地，还有getwchar()、putwchar()、fgetws()和fputws()函数。wchar_t
头文件定义了一个WEOF宏，与EOF在面向字节的I/O中起的作用相同。该宏
要求其值是一个与任何有效字符都不对应的值。因为wchar_t类型的值都有
可能是有效字符，所以wchar_t库定义了一个wint_t类型，包含了所有wchar_t
类型的值和WEOF的值。
该库中还有与string.h库等价的函数。例如，wcscpy(ws1, 
ws2)把ws1指
定的宽字符串拷贝到ws2指向的宽字符数组中。类似地，wcscmp()函数比较
宽字符串，等等。
wctype.h头文件新增了字符分类函数，例如，如果iswdigit()函数的宽字
符参数是数字，则返回真；如果iswblank()函数的参数是空白，则返回真。
空白的标准值是空格和水平制表符，分别写作L''和L'\t'。
C11标准通过uchar.h头文件为宽字符提供更多支持，为匹配两种常用的
统一码格式，定义了两个新类型。第1种类型是char16_t，可储存一个16位编
码，是可用的最小无符号整数类型，用于hexquard UCN形式和统一码UTF-16
编码方案。
1612
char16_t = '\u00F6';
第2种类型是char32_t，可储存一个32位编码，最小的可用无符号整数类
型，。可用于hexquard UCN形式和统一码UTF-32编码方案
char32_t = '\U0000AC01';
前缀u和U分别表示char16_t和char32_t字符串。
char16_t ws16[11] = u"Tannh\u00E4user";
char32_t ws32[13] = U"caf\U000000E9 au lait";
注意，这两种类型比wchar_t类型更具体。例如，在一个系统中，
wchar_t可以储存32位编码，但是在另一个系统中也许只能储存16位的编
码。另外，这两种新类型都与C++兼容。
B.7.7 宽字符和多字节字符
宽字符和多字节字符是处理扩展字符集的两种不同的方法。例如，多字
节字符可能是一个字节、两个字节、三个字节或更多字节，而所有的宽字符
都只有一个宽度。多字节字符可能使用移位状态（移位状态是一个字节，确
定如何解释后续字节）；而宽字符没有移位状态。可以把多字节字符的文件
读入使用标准输入函数的普通char类型数组，把宽字节的文件读入使用宽字
符输入函数的宽字节数组。
C99 在wchar.h库中提供了一些函数，用于多字节和宽字节之间的转换。
mbrtowc()函数把多字节字符转换为宽字符，wcrtomb()函数把宽字符转换为
多字节字符。类似地，mbstrtowcs()函数把多字节字符串转换为宽字节字符
串，wcstrtombs()函数把宽字节字符串转换为多字节字符串。
C11在uchar.h库中提供了一些函数，用于多字节和char16_t之间的转换，
以及多字节和char32_t之间的转换。
1613
B.8 参考资料VIII：C99/C11数值计算增强
过去，FORTRAN是数值科学计算和工程计算的首选语言。C90使C的计
算方法更接近于FORTRAN。例如，float.h中使用的浮点特性规范都是基于
FORTRAN标准委员会开发的模型。C99和C11标准继续增强了C的计算能
力。例如，C99新增的变长数组（C11成为可选的特性），比传统的C数组更
符合FORTRAN的用法（如果实现不支持变长数组，C11指定了
__STDC_NO_VLA__宏的值为1）。
B.8.1 IEC浮点标准
国际电工技术委员会（IEC）已经发布了一套浮点计算的标准（IEC
60559）。该标 准包括了浮点数的格式、精度、NaN、无穷值、舍入规则、
转换、异常以及推荐的函数和算法等。C99纳入了该标准，将其作为C实现
浮点计算的指导标准。C99新增的大部分浮点工具（如，fenv.h头文件和一些
新的数学函数）都基于此。另外，float.h头文件定义了一些与IEC浮点模型
相关的宏。
1.浮点模型
下面简要介绍一下浮点模型。标准把浮点数x看作是一个基数的某次幂
乘以一个分数，而不是C语言的E记数法（例如，可以把876.54写成
0.87654E3）。正式的浮点表示更为复杂：
简单地说，这种表示法把一个数表示为有效数（significand）与b的e次
幂的乘积。
下面是各部分的含义。
s代表符号（±1）。
1614
b代表基数。最常见的值是2，因为浮点处理器通常使用二进制数学。
e代表整数指数（不要与自然对数中使用的数值常量e混淆），限制最小
值和最大值。这些值依赖于留出储存指数的位数。
fk代表基数为b时可能的数字。例如，基数为2时，可能的数字是0和1；
在十六进制中，可能的数字是0～F。
p代表精度，基数为b时，表示有效数的位数。其值受限于预留储存有效
数字的位数。
明白这种表示法的关键是理解float.h和fenv.h的内容。下面，举两个例子
解释内部如何表示浮点数。
首先，假设一个浮点数的基数b为10，精度p为5。那么，根据上面的表
示法，24.51应写成：
(+1)103(2/10 + 4/100 + 5/1000 + 1/10000 + 0/100000)
假设计算机可储存十进制数（0～9），那么可以储存符号、指数3和5个
fk值：2、4、5、1、0（这里，f1是2，f2是4，等等）。因此，有效数是
0.24510，乘以103得24.51。
接下来，假设符号为正，基数b是2，p是7（即，用7位二进制数表
示），指数是5，待储存的有效数是1011001。下面，根据上面的公式构造该
数：
x = (+1)25(1/2 +0/4 + 1/8 + 1/16 + 0/32 + 0/64 + 1/128)
= 32(1/2 +0/4 + 1/8 + 1/16 + 0/32 + 0/64 + 1/128)
= 16 + 0 + 4 + 2 +0 + 0 + 1/4 = 22.25
float.h中的许多宏都与该浮点表示相关。例如，对于一个float类型的
1615
值，表示基数的FLT_RADIX是b，表示有效数位数（基数为b时）的
FLT_MANT_DIG是p。
2.正常值和低于正常的值
正常浮点值（normalized floating-point value）的概念非常重要，下面简
要介绍一下。为简单起见，先假设系统使用十进制（b = FLT_RADIX = 10）
和浮点值的精度为 5（p = FLT_MANT_DIG = 5）（标准要求的精度更高）。
考虑下面表示31.841的方式：
指数 = 3，有效数 = .31841（.31841E3）
指数 = 4，有效数 = .03184（.03184E4）