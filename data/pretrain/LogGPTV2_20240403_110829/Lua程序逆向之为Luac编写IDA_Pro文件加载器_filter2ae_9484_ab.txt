            add_segm(0, 0, global_header_size, "header", 'HEADER')
            add_structs()
            MakeStruct(0, "GlobalHeader")
            global funcs
            global consts
            global strs
            for func in funcs:
                #add funcheader_xx segment.
                add_segm(0, func[3], func[3] + ctypes.sizeof(proto_header), func[4], 'CONST')
                MakeStruct(func[3], "ProtoHeader")
                # add func_xx_codesize segment.
                add_segm(0, func[1] - 4, func[1], func[0] + "_codesize", 'CONST')
                MakeDword(func[1]-4)
                set_name(func[1]-4, func[0] + "_codesize")
                # add func_xx segment.
                add_segm(0, func[1], func[2], func[0], 'CODE')
                #add_func(func[1], func[2])
            for const in consts:
                # add const_xx_size segment.
                add_segm(0, const[1]-4, const[1], const[0] + "_size", 'CONST')
                MakeDword(const[1]-4)
                set_name(const[1]-4, const[0] + "_size")
                # add const_xx segment.
                add_segm(0, const[1], const[2], const[0], 'CONST')
            for str in strs:
                # add const strings.
                idc.create_strlit(str[1], str[2])
            li.file2base(0, 0, li.size(), 0)    #map all data
            mainfunc_addr = proto.code_off + 4
            print("main func addr:%x" % mainfunc_addr)
            add_entry(mainfunc_addr, mainfunc_addr, 'func_0', 1)
            DEBUG_PRINT("Load Lua bytecode OK.")
            return 1
当format参数是accept_file()返回的FormatName是，说明是合法的Luac，正常进入了文件内容加载阶段。这时候按照之前分析Luac格式，使用li.seek()跳过global_header，解析proto_header结构。这是最“顶层的”Proto结构的头部，描述了function
level 0包含多少个子Proto及其其他字段信息。回顾下前面的知识，Proto的可视化结构如图所示：
Proto类型的实现与读取相对会麻烦一些，代码如下：
    funcs = []
    consts = []
    strs = []
    class Proto:
        def __init__(self, li, off, level):
            self.level = level
            DEBUG_PRINT("level: %s\n" % self.level)
            off_ = off
            li.seek(off)
            self.header = read_struct(li, proto_header)
            off += ctypes.sizeof(proto_header)
            self.code_off = off
            self.code = Code(li, off)
            funcs.append(get_func_area(level, off + 4, off + self.code.size(), off_))
            off = off + self.code.size()
            self.constants = Constants(li, off)
            consts.append(get_consts_area(level, off + 4, off + self.constants.size()))
            off = off + self.constants.size()
            DEBUG_PRINT("protos off:%x\n" % off)
            self.protos = Protos(li, off, level)
            off = off + self.protos.size()
            self.upvaldecs = Upvaldescs(li, off)
            off = off + self.upvaldecs.size()
            self.src_name = SourceName(li, off)
            off = off + self.src_name.size()
            self.lines = Lines(li, off)
            off = off + self.lines.size()
            self.loc_vars = LocVars(li, off)
            off = off + self.loc_vars.size()
            self.upval_names = UpValueNames(li, off)
            off = off + self.upval_names.size()
            self.sz = off - off_
        def size(self):
            return self.sz
函数、常量、字符串这些信息在解析后我们全局进行保存，目的是后面在创建各种类型的数据段时需要用到。Protos、Constants、LocVars、UpValueNames这些数据结构的定义，由于篇幅原因就不帖出来了，具体的实现代码可以在文末的代码地址处获取。
接着有一条比较重要的调用：
    idaapi.set_processor_type("Luac", SETPROC_ALL|SETPROC_FATAL)
idaapi.set_processor_type()用来设置处理器模块，这里使用的”Luac”是我事先编写好的处理器模块，将会在以后进行讲解，初期开发时，可以将其指定为IDA
Pro中提供的其他样例处理器模块辅助开发加载器。
解析完Luac，集齐这些数据后，就可以使用IDA
Pro提供的add_segm()接口，在idb数据库中创建段了。add_segm()的定义位于ida_segment.py中，如下所示：
    def add_segm(*args):
      """
      add_segm(para, start, end, name, sclass, flags=0) -> bool
      """
      return _ida_segment.add_segm(*args)
第一个参数通常为0；start与end指明了数据的起始与结束地址；name为段的名称；sclass为段的类别，类别可以是HEADER表示文件头，CONST表示是常量数据，CODE表示是代码段，DATA表示是数据段。
如下的代码即会创建一个HEADER类别的段：
    add_segm(0, 0, global_header_size, "header", 'HEADER')
创建完段后，我们还想将这个段的内容应用上global_header结构体声明，让IDA
Pro可以更加直观显示字段的描述与数值。这个时候，就需要将global_header结构体的声明先加入到IDA
Pro中去。三种方法可以实现：一是导入事先声明好相关结构体的til文件；二是在内存中制作til，导入C语言的结构体描述，然后会在内存中创建til；最后一种是使用脚本一行行导入结体体声明。最终，在相应的数据位置应用结构体信息即可。第一种方法这里不讲，因为没有事先做好til，第二种方法可以使用代码来自动化完成，首先使用new_til()在内存中创建til，然后使用parse_decls()与doStruct()接口解析C语言结构生成til结构体信息，最后一种其实最方便，这里推荐一下，可以事先在IDA
Pro中手动导入C声明，然后执行File->Product file->Dump datebase to IDC file…，执行后会生成所有IDA
Pro操作过的idc脚本，其中包括导入与创建、应用数据结构体的部分。将这一段代码引入到Python中即可。这里add_structs()的代码片断如下：
    def add_structs():
        begin_type_updating(UTP_STRUCT)
        AddStrucEx(-1, "GlobalHeader", 0)
        AddStrucEx(-1, "ProtoHeader", 0)
        id = GetStrucIdByName("GlobalHeader")
        AddStrucMember(id, "signature", 0, 0x000400, -1, 4)
        AddStrucMember(id, "version", 0X4, 0x000400, -1, 1)
        AddStrucMember(id, "format", 0X5, 0x000400, -1, 1)
        AddStrucMember(id, "endian", 0X6, 0x000400, -1, 1)
        ......
        SetType(get_member_id(id, 0x0), "unsigned int")
        SetType(get_member_id(id, 0x4), "unsigned int")
        SetType(get_member_id(id, 0x8), "unsigned __int8")
        SetType(get_member_id(id, 0x9), "unsigned __int8")
        SetType(get_member_id(id, 0xA), "unsigned __int8")
        end_type_updating(UTP_STRUCT)
        set_inf_attr(INF_LOW_OFF, 0x20)
        set_inf_attr(INF_HIGH_OFF, 0x22A)
添加了结构体后，执行MakeStruct(0,
“GlobalHeader”)即可将起始的HEADER数据段应好了GlobalHeader结体体信息。如图所示：
接着如法炮制，加载其他的段，加载完成后，执行如下的命令完成数据的映射工作：
    li.file2base(0, 0, li.size(), 0)
最后，是调用add_entry()设置程序的入口点。完成后，加载器的工作基本就完成了。加载器完成Luac加载后，可以在IDA
Pro中查看它的段结构信息如下：
后面，将会是处理器模块负责创建函数、数据、交叉引用、反汇编等工作。
完整的luac_loader.py文件可以在这里找到：。
Lua程序逆向系列的故事仍然在继续着，To be continued…