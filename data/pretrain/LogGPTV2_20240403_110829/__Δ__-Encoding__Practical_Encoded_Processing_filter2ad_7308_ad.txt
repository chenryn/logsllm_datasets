accumulator.
8The automotive E-Gas Monitoring Concept has 3 levels of design, with the
third, “controller monitoring” level implemented as an independent hardware
module (watchdog) [24].
BFI injects single- and multiple-bit faults in: CPU register
ﬁle, memory cells, address bus, and code segment. These hard-
ware faults trigger software-level symptoms of our fault model.
Modiﬁed operands are caused by bit-ﬂips in registers and
memory. Exchanged operands are due to faults on the address
bus or in registers holding addresses. A faulty operation is
represented as a fault in operation’s output register/memory
cell. Exchanged operations are transient faults in the code
segment. A lost update is a direct consequence of address
corruption during a move instruction.
We conduct three fault injection campaigns:
Transient Faults A single multiple-bit transient fault is in-
jected per run, with 100, 000 runs in total. This is similar
to the Single Event Upset model, but the fault can corrupt
multiple adjacent bits.
Intermittent Faults The same stuck-at fault is triggered for
the duration of 100 instructions, with 20, 000 runs in total.
For example, it simulates an intermittent stuck-at-1 fault
in a RAX register.
Permanent Faults The same stuck-at fault is triggered for the
whole duration of the computation, with 20, 000 runs in
total. For example, it simulates a permanent stuck-at-1
fault in a RAX register.
We inject hardware errors at random and uniformly dis-
tributed. In the case of intermittent faults, the fault is injected
at a random instruction and reoccurs in 100 subsequent in-
structions. In the case of permanent faults, the fault is injected
at a random instruction and reoccurs until the computation is
ﬁnished.
The results of fault injections are sorted in 5 categories:
masked faults (do not affect execution), OS-detected (detected
by OS, e.g., segmentation fault), hang (the program hanged
because of the fault), Δ-detected (detected by Δ-encoding),
SDC (undetected; led to silent corruption of data).
Each Δ-encoded program was tested in 2 variants: with
accumulation (Δ-full) and without it (Δ-stripped).
B. Microbenchmarks
As a proof of concept, we chose several microbenchmarks:
bubblesort, quicksort, linked list, CRC32, dijkstra, and pa-
tricia trie. CRC32, Dijkstra, and patricia trie are taken from
MiBench [26]. These three benchmarks perform a signiﬁcant
number of I/O operations to read inputs; in contrast, bubble-
sort, quicksort and linked list work purely on memory values.
The performance results of the benchmarks are shown
on Fig. 3 (ﬁrst six). Δ-full versions incur the overhead of
4.08x on average, Δ-stripped and Δ-parallel – 2.26 and 2.59x
correspondingly. Δ-parallel performs two times better than
9http://www.intel.com/software/pintool
10https://bitbucket.org/db7/bﬁ
2020
  native  
Δ−full
Δ−parallel  
Δ−stripped  
6
n
w
4
o
d
w
o
S
2
l
0
bubblesort
quicksort
linkedlist
crc32
dijkstra
patricia
hardcore
industrial
Fig. 3: Performance slowdown in comparison to native execution.
Δ-full on some benchmarks, which indicates that a hardware-
assisted approach of Δ-parallel could bring a signiﬁcant per-
formance improvement.
As for fault coverage, we performed fault injection exper-
iments on one representative benchmark – bubblesort. The re-
sults are depicted in Figs. 4–6. The native program experiences
a signiﬁcant number of SDCs (from 31% for permanents up
to 68% for transients). Δ-encoding variants drastically reduce
the rate of SDCs to almost 0%.
It is interesting to examine the few SDCs not detected
by Δ-encoding. In the case of transient faults (Fig. 4), all
8 undetected faults happened on the address bus such that
the injected corrupted bits were written in-between two copies
of data, corrupting them both in the same way. This issue
was discussed in section V-A and is a deﬁciency of our
implementation.
In the case of intermittent and permanent faults (Figs. 5 and
6), all 6 SDCs resulted from the same corrupted register. This
register was allocated by the compiler for the same encoded
operation on two copies of data, such that two copies were
affected by the same permanent fault. This is yet another
disservice of a compiler (the ﬁrst one was discussed in section
V-A); these faults could be detected if we would have control
over the compiler’s backend.
C. Use Case: Trusted Modules
The ﬁrst use case, the HardCore trusted module, comes
from the ﬁeld of dependable distributed systems. HardCore is a
small safety-critical part of a bigger system – HardPaxos [25].
HardPaxos is a version of the Paxos consensus protocol which
enables the service on top to tolerate hardware errors; fault
tolerance of the whole service depends solely on HardCore.
That is, HardCore is required to have very high fault coverage.
We encoded HardCore using Δ-encoding and reproduced
the experiments from [25]: for the leader and for the follower
scenarios. Note that the version of HardCore described in [25]
was hardened with a variant of AN-encoding called 2AN,
incurring very high overheads compared to native execution.
The performance numbers for 2AN and our Δ-encoding are
TABLE I: HardCore’s slowdown in comparison to native.
Variant
Δ-full Δ-parallel Δ-stripped
Leader
4.2
Follower
2.6
2AN
42.0
32.7
6.3
3.5
4.6
2.8
shown in Table I; the slowdown for the worst case-scenario
(for leader) is presented in Fig. 3. HardCore’s slowdown is
higher in comparison to microbenchmarks: HardCore makes
heavy use of small loops which the compiler unrolls for the
native version but not for Δ-encoded versions (see V-A). In
general, our evaluation shows that the Δ-encoded HardCore is
one order of magnitude faster than the 2AN-encoded version.
The results of fault injections can be seen in Figs. 4–6.
The native version has a signiﬁcant number of SDCs (31%
in case of transients, 11% in case of permanents), while
the Δ-encoded HardCore detects all injected errors in all
experiments. Note that Δ-stripped performs no worse than
Δ-full: the reason is the small size of HardCore functions,
such that the injected error propagates directly to the outputs.
This means that the Δ-stripped version provides complete
fault coverage with the average performance beneﬁt of 70%
compared to the Δ-full encoding.
D. Use Case: Safety-Critical Embedded Systems
Our second use case, which we refer to as industrial,
is a real-world X-by-wire controller from the automotive
embedded systems domain. The program makes heavy use of
arithmetic operations, working on a small set of variables and
spanning over 900 lines of code. We consider this program a
typical example of safety-critical embedded applications which
can beneﬁt from Δ-encoding.
The performance slowdown is shown in Fig. 3. We would
like to stress the slowdown of 4.7 times for the Δ-parallel vari-
ant: parallel accumulation on a separate hardware module
is well-suited for embedded systems, since this functionality
can be put in the already existing hardware watchdog. The
relatively high slowdown is due to division operations, which
2121
bubblesort
SDC = 68527
SDC = 4
SDC = 4
SDC = 31201
hardcore
SDC = 0
SDC = 0
SDC = 36362
industrial
SDC = 735
SDC = 3
 OS-detected 
 Hang 
 (cid:1)-Detected 
 SDC 
  masked  
native
(cid:1)-stripped
(cid:1)-full
native
(cid:1)-stripped
(cid:1)-full
native
(cid:1)-stripped
(cid:1)-full
Fig. 4: Transient multiple-bit fault injections.
bubblesort
SDC = 7282
SDC = 0
SDC = 3
SDC = 2233
hardcore
SDC = 0
SDC = 0
SDC = 3672
industrial
SDC = 94
SDC = 0
100000
s
n
o
i
t
c
e
n
j
I
t
l
u
a
F
#
75000
50000
25000
0
20000
s
n
o
15000
i
t
c
e
n
j
I
t
l
u
a
F
#
10000
5000
0
native
(cid:1)-stripped
(cid:1)-full
native
(cid:1)-stripped
(cid:1)-full
native
(cid:1)-stripped
(cid:1)-full
Fig. 5: Intermittent (duration of 100 instructions) stuck-at fault injections.
bubblesort
20000
SDC = 6505
SDC = 2
SDC = 1
SDC = 2209
hardcore
SDC = 0
SDC = 0
SDC = 7150
industrial
SDC = 77
SDC = 0
15000
10000
j
s
n
o
i
t
c
e
n
I
t
l
u
a
F
#
5000
0
native
(cid:1)-stripped
(cid:1)-full
native
(cid:1)-stripped
(cid:1)-full
native
(cid:1)-stripped
(cid:1)-full
Fig. 6: Permanent stuck-at fault injections.
require decoding to the original values, their division and
subsequent encoding (see Section IV-B).
Figs. 4–6 show the fault injection results for the industrial
program. The Δ-full variant shows very high fault coverage,
with 3 SDCs in the case of transients and 0 in other cases. The
Δ-stripped variant, however, results in a signiﬁcant number
of SDCs:
the industrial program has a long and complex
execution path such that errors do not propagate to the outputs.
This is in contrast to HardCore where Δ-stripped had the same
fault coverage as Δ-full. The reasons for SDCs are the same
as for bubblesort and HardCore.
E. Discussion
Δ-encoding was developed to provide a high level of
fault tolerance. In this sense, we favor fault coverage over