typically keeps a good record of each test. This type of test tool most closely
resembles traditional automated test tools or stress testing tools. The number
of tests is relatively small compared to more random methods, but each test
has a specific purpose. Typically, these are generation fuzzers. These are often
hand-tuned by a protocol expert. Many commercial fuzzers operate this way.
In the commercial fuzzer case, you are paying for the research an expert put
into the test case creation.
• Another way to send semi-valid input is to cycle through a protocol by inserting
some type of data. For example, if we want to search for buffer overflows in
the user name field of a protocol, we could cycle data sizes from 1 to 10,000
by 10 bytes:
[Client]-> “user jared\r\n”
[Client]-> “user jared\r\n”
[Client]-> “user jared\r\n”11
...
This method yields a deterministic number of runs and thus a deterministic
run-time. One might argue that only fixed buffers around known boundaries
should be tested, but off-by-one errors12 are a known issue. Also, an anti-
hammering13 defense may limit the number of connections from a certain
IP, etc. This can often be disabled such that it will not interfere with testing.
• One could also choose to keep randomly inserting data for a specified period
of time:
[Client]-> “user jared\r\n”
[Client]-> “user jared\r\n”
[Client]-> “user jared\r\n”
...
Random fuzzers can be repeatable if seeded by the user. This is critical
for regression testing and reproducing results.
• Library refers to a list of known useful attacks. Each variable to be tested
should be fuzzed with each type of attack. The order, priority, and pairing
of this search could be deterministic, random, or weighted. Mature fuzzers
will typically combine many of the above techniques.
11 The ‘A’s shown here are just an example. Randomizing the hex number might be a better approach,
although the classic 41414141 in EIP is still preferred by some analysts as a quick way of noticing a
problem if being debugged live.
12 See Chapter 2, off-by-one. As a quick example, if a static buffer is of size 100 bytes sending exactly
101 bytes would be needed to trigger the bug in some vulnerable coding scenarios.
13 Connection-limiting techniques are common in some networked applications.
6760 Book.indb 140 12/22/17 10:50 AM
5.1 Fuzzing Methods 141
5.1.3 Fuzzing Vectors
Once a fuzzer knows where in a file or network stream it wishes to add bad data,
regardless of if it is because it created the data from scratch or dissected a valid
input, it needs to know what types of data to add. As we’ve discussed, there are infi-
nitely many possibilities. The goal of selecting good fuzzing vectors (i.e., heuristics)
is in making the number of anomalies added to create fuzzed test cases as small as
possible while not greatly reducing the effectiveness of the test cases. For example,
if an integer is supplied to a program that controls the size of a copy, generally
there is some cut-off point where a large enough number will cause a fault when a
smaller number will not. In slightly more complex examples, there may be a lower
and upper bound on the integer that will detect the vulnerability. In either case, by
choosing a few integers intelligently, it is possible to usually find such vulnerabilities
without sending all 2^32 possibilities each time an integer is used. Of course, there
will always be some bugs missed when such simplifications are made, but until we
have faster computers and more time, it is a necessary trade-off.14
As an example, let us examine the primitives.py Python file that comes with
the Sulley framework (more on this later) that defines a heuristic library and how
the framework fuzzes. Specifically, looking at the library of fuzzed strings it has
reveals some of the following examples:
# strings mostly ripped from spike
“/.:/” + “A”*5000 + “\x00\x00”,
“/.../” + “A”*5000 + “\x00\x00”,
“/.../.../.../.../.../.../.../.../.../.../”,
“/../../../../../../../../../../../../etc/passwd”,
“/../../../../../../../../../../../../boot.ini”,
“..:..:..:..:..:..:..:..:..:..:..:..:..:”,
“\\\\*”,
“\\\\?\\”,
“/\\” * 5000,
“/.” * 5000,
“!@#$%%^#$%#$@#$%$$@#$%^^**(()”,
“%01%02%03%04%0a%0d%0aADSF”,
“%01%02%03@%04%0a%0d%0aADSF”,
“/%00/”,
“%00/”,
“%00”,
“%u0000”,
# format strings.
“%n” * 100,
“%n” * 500,
“\”%n\”” * 500,
“%s” * 100,
“%s” * 500,
“\”%s\”” * 500,
14 See the discussion on parallel fuzzing in Chapter 7.
6760 Book.indb 141 12/22/17 10:50 AM
142 Building and Classifying Fuzzers
# command injection.
“|touch /tmp/SULLEY”,
“;touch /tmp/SULLEY;”,
“|notepad”,
“;notepad;”,
“\nnotepad\n”,
# SQL injection.
“1;SELECT%20*”,
“’sqlattempt1”,
“(sqlattempt2)”,
“OR%201=1”,
# some binary strings.
“\xde\xad\xbe\xef”,
“\xde\xad\xbe\xef” * 10,
“\xde\xad\xbe\xef” * 100,
“\xde\xad\xbe\xef” * 1000,
“\xde\xad\xbe\xef” * 10000,
“\x00” * 1000,
# miscellaneous.
“\r\n” * 100,
“<>” * 500, # sendmail crackaddr
(http://lsd-pl.net/other/sendmail.txt)
These strings all exist due to a particular vulnerability type or specific bug uncov-
ered in the past. These strings are substituted each time a string is fuzzed in Sulley,
along with a number of long strings of the following lengths: 128, 255, 256, 257,
511, 512, 513, 1023, 1024, 2048, 2049, 4095, 4096, 4097, 5000, 10000, 20000,
32762, 32763, 32764, 32765, 32766, 32767, 32768, 32769, 0xFFFF-2, 0xFFFF-1,
0xFFFF, 0xFFFF+1, 0xFFFF+2, 99999, 100000, 500000, 1000000.
5.1.4 Intelligent Fuzzing
Fuzzers can become as fancy as the imagination will allow. This is sometimes called
the intelligence (domain knowledge) of a fuzzer or intelligent fuzzing. Consider a
fuzzer that randomizes the test type, position, and protocol leg in which to place
the attack:
[Client]-> “user jaed\r\n”
-------------------loop 1--------------
[Client]-> “user jared\r\n”
“user Ok. Provide pass.\r\n”  “\x34\x56\x12\x...\r\n”
-------------------loop 2--------------
[Client]-> “user jared\r\n”
-------------------loop 3--------------
[Client]-> “user jared\r\n”
“user Ok. Provide pass.\r\n”  “\x04\x98\xbb\x...\r\n”
-------------------loop 4--------------
...
We note that valid data, such as “user jared,” is transformed into semi-valid data,
such as “usAAAAAAAAAAAAAAAAAAAAAAAAer jared.” The insertion could
be done by working from a capture file or from internal generation of the protocol
(or possibly a combination of the two). Intelligent versus unintelligent is always a
tradeoff. Creating intelligence takes more work and typically begins to assume things
about the protocol. For example, suppose our intelligent fuzzer assumes that the
user command must always be correct and be the first command; therefore, there
is no need to test it. Well, 98% of the time that’s a true assumption. But what about
the odd case in which a particular implementation reads in an arbitrary amount
of data until the first space character? Or what if a command prior to user hangs
the internal state machine? A balanced approach seems best: intelligence enough to
decrease the run-time, but not so much that it weakens the fuzzer (i.e., makes the
same poor assumptions the programmer and original tester did).
Another useful extension of intelligent fuzzing is for protocols that require cal-
culations to be made on data that is sent or received. For example, an internet key
exchange15 (IKE) fuzzer would require the ability to deal with the cryptography of
IKE if the fuzzer ever hopes to advance16 into the IKE protocol.17 Because of the
complex nature of IKE, capture-replay (session mutation) is made very difficult
and a purely generation-based fuzzer would not exercise much of the protocol. IKE
would be a good candidate for a generation fuzzer with intelligence.
Still another intelligent feature that could be built into fuzzers is known as pat-
tern matching. In the above heuristic examples, a pattern-matching fuzzer could
automatically find the strings in a capture file and build attacks based on that. It
could also automatically find and fix length fields if the fuzzer inserts data.18
Boundary conditions should be noted as important and included in any good
pattern-matching library. If a given function F is implemented in a program and the
function has two parameters x and y, these two have known or unknown boundaries
a ” to the service listening on the local
IP address on port 4000.
Or, suppose you find yourself auditing a large function that accepts a large
number of arguments. You don’t happen to have a fully working API fuzzer so you
contrive a simple setup:
• Start this process with a debugger such as GDB.
• Break at a particular execution address.
• Randomly mutate the arguments before the function is called.
• Record if a segmentation fault occurred after the call is made.
• Repeat.
This isn’t the best way to test an API, but it works and is quick and easy to set up.
RPC might be a good candidate for this type of research. It seems that busy
penetration testers or security auditors tend to create a lot of simple fuzzers in this
6760 Book.indb 145 12/22/17 10:50 AM
146 Building and Classifying Fuzzers
manner. The fruit of such labor is not to be underestimated. One reason for this is
that one size fits all generic fuzzers may not be tuned well for any one application,
particularly if the platform/process under test has special requirements or is tricky
to fuzz like a protocol utilizing a custom encryption library.
5.2.2 Fuzzing Frameworks
The fundamental idea of a fuzzing framework is code reuse. There are certain things
every sufficiently complex fuzzer should be capable of doing:
• Model protocol data in a variety of complex scenarios: blocks, loops, choices,
and so forth;
• Use a library of mutations and anomalies;
• Compute relationships like checksums, hashes, and so forth;
• Associate data as lengths of other data;
• Send test cases over a variety of interfaces;
• Monitor the process in a variety of ways;
• Log results with test cases. Bucket results to minimize crash analysis work.
Spike (Dave Aitel), Sulley (Pedram Amini), and Peach (Michael Eddington) are
examples. Next we will explain Sulley and Peach in greater detail.
5.2.2.1 Sulley
Sulley is a fuzzing framework that is a cross between Spike, Autodafé, and PaiMei.
The tester defines a protocol file that describes the protocol and the methods by
which they will be fuzzed in the “request” description file. This protocol descrip-
tion information could come from a network capture, by reading the protocol RFC,
or both. That information is used in a session file that initializes the logging and
begins the transfer of fuzzed sessions, which are described by request files. Sulley
is an open-source fuzzing framework, but it does not come loaded with any real
out-of-the-box protocol descriptions. Sulley includes target health monitoring and
reset capability, network logging, fault detection and categorization, postmortem
analysis, and more.