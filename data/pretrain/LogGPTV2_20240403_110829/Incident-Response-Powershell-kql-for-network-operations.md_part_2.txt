``` {tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"}
DeviceNetworkEvents // Your table name
| where ipv4_is_private(LocalIP) // Condition on the column that contains an IP
| where not(ipv4_is_private(RemoteIP)) // Condition on the column that contains an IP
```
:::
:::
:::
:::
# ipv4_range_to_cidr_list()
Calculating what ranges you need to put in the firewall can be a tedious
job, but KQL is here to help. The
*[ipv4_range_to_cidr_list()](https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/ipv4-range-to-cidr-list-function){target="_blank"
rel="noopener noreffer"}* can return all subnets that you need to
configure by only needing a start and end IP address.
The image below shows an example where all subnets that need to be
configured where the first IP is 10.5.64.0 and the last of your range is
10.5.96.254. Really easy right?
![ipv4_range_list example](/svg/loading.min.svg){.lazyload
data-src="/images/KQL-For-Network-Operations/ipv4_range_list.png"
data-srcset="/images/KQL-For-Network-Operations/ipv4_range_list.png, /images/KQL-For-Network-Operations/ipv4_range_list.png 1.5x, /images/KQL-For-Network-Operations/ipv4_range_list.png 2x"
data-sizes="auto"}
Query:
::: highlight
``` {tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"}
print start_range="10.5.64.0", end_range="10.5.96.254"
 | project ipv4_range_list = ipv4_range_to_cidr_list(start_range, end_range)
```
:::
::: {.details .admonition .note .open}
::: {.details-summary .admonition-title}
Enriching IP information
:::
::: details-content
::: admonition-content
The function
*[geo_info_from_ip_address()](https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/geo-info-from-ip-address-function){target="_blank"
rel="noopener noreffer"}* provide a native solution within KQL to enrich
the query results. The geolocation information can be collected for both
IPv4 and IPv6 addresses. The function only takes a *IpAddress* as input
and returns the country, state, city, latitude and longitude that are
related to the IpAddress.
For this query enrichment to work, only two lines of KQL code need to be
added to your existing queries. The first line returns a JSON blob that
contains all the needed information, the second extracts each field into
a column thereby enabling easy filter options.
::: highlight
``` {tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"}
| extend GeoIPInfo = geo_info_from_ip_address(RemoteIP)
| extend country = tostring(parse_json(GeoIPInfo).country), 
    state = tostring(parse_json(GeoIPInfo).state), 
    city = tostring(parse_json(GeoIPInfo).city), 
    latitude = tostring(parse_json(GeoIPInfo).latitude), 
    longitude = tostring(parse_json(GeoIPInfo).longitude)
```
:::
:::
:::
:::
# ipv4_is_in_range()
What if I do need to get results for a certain subnet? Let's assume I
want to return all rows that match on the subnet 10.0.0.0/8. You could
use *hasprefix* or *startswith* as shown below.
::: highlight
``` {tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"}
| where ip_address hasprefix "10."
| where ip_address startswith "10."
```
:::
But is it really effective? I do not think so, for your colleagues, it
will also be unclear why this will be used, luckily there is a function
that can simply take the subnet you want to filter on and match it
against your data. This can be seen in the example below, the function
*[ipv4_is_in_range()](https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/ipv4-is-in-range-function){target="_blank"
rel="noopener noreffer"}*, will take an IP (or column with IPs) as first
variable, the second is simply the subnet range you want your data to be
in.
![ipv4_is_in_range example](/svg/loading.min.svg){.lazyload
data-src="/images/KQL-For-Network-Operations/ipv4_is_in_range.png"
data-srcset="/images/KQL-For-Network-Operations/ipv4_is_in_range.png, /images/KQL-For-Network-Operations/ipv4_is_in_range.png 1.5x, /images/KQL-For-Network-Operations/ipv4_is_in_range.png 2x"
data-sizes="auto"}
But what if you have to search in multiple ranges at once? Well, that is
also possible using the
*[ipv4_is_in_any_range()](#ipv4_is_in_any_range){rel=""}* function.
Query:
::: highlight
``` {tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"}
datatable(ip_address:string)
[
    "192.168.1.1",       // Private
    "10.0.0.1",          // Private
    "10.3.0.1",          // Private
    "10.55.234.1",          // Private
    "172.16.0.1",        // Private
    "192.168.0.1",       // Private
    "203.0.113.1",       // Public
    "216.58.194.142",     // Public
]    
| extend isprivate = ipv4_is_private(ip_address)
| where ipv4_is_in_range(ip_address, "10.0.0.0/8")
```
:::
> **Example queries** If you are looking for more example queries have a
> look at the [Hunting-Queries-Detection-Rules
> Repo](https://github.com/Bert-JanP/Hunting-Queries-Detection-Rules){target="_blank"
> rel="noopener noreffer"}
# ipv4_is_in_any_range()
The
*[ipv4_is_in_any_range()](https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/ipv4-is-in-any-range-function){target="_blank"
rel="noopener noreffer"}* is very similar to the *ipv4_is_in_range()*
function, the only difference being that you can instead of matching on
1 range match on *n* ranges.
![ipv4_is_in_any_range example](/svg/loading.min.svg){.lazyload
data-src="/images/KQL-For-Network-Operations/ipv4_is_in_any_range.png"
data-srcset="/images/KQL-For-Network-Operations/ipv4_is_in_any_range.png, /images/KQL-For-Network-Operations/ipv4_is_in_any_range.png 1.5x, /images/KQL-For-Network-Operations/ipv4_is_in_any_range.png 2x"
data-sizes="auto"}
In case you want to filter on a large number of ranges, it is
recommended to use a *let* variable for the ranges as seen below. This
will ensure that your query will still be organised. Especially if you
are going to write longer queries, the variables will make it easier for
others to update certain ranges when needed.
::: highlight
``` {tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"}
let DynamicList = dynamic(["10.3.0.0/16", "10.55.234.0/24", "216.58.194.144/30"]);
datatable(ip_address:string)
[
    "192.168.1.1",       // Private
    "10.0.0.1",          // Private
    "10.3.0.1",          // Private
    "10.55.234.1",          // Private
]    
| where ipv4_is_in_any_range(ip_address, DynamicList)
```
:::
Query:
::: highlight
``` {tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"}
datatable(ip_address:string)
[
    "192.168.1.1",       // Private
    "10.0.0.1",          // Private
    "10.3.0.1",          // Private
    "10.55.234.1",          // Private
    "172.16.0.1",        // Private
    "192.168.0.1",       // Private
    "203.0.113.1",       // Public
    "216.58.194.144",     // Public
]    
| extend isprivate = ipv4_is_private(ip_address)
| extend isin10subnet = ipv4_is_in_range(ip_address, "10.0.0.0/8")
| where ipv4_is_in_any_range(ip_address, "10.3.0.0/16", "10.55.234.0/24", "216.58.194.144/30")
```
:::
# IP Regex
In some occasions the IP address is located inside a larger string, an
example of this is commandlines. If you log commandline executions the
following examples can appear in your dataset:
::: highlight
``` {tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"}
ping 8.8.8.8
wget --ftp-user=FTP_USERNAME --ftp-password=FTP_PASSWORD ftp://10.10.10.10/filename.tar.gz
Set-NetIPAddress -InterfaceIndex 12 -IPAddress 192.168.0.1 -PrefixLength 24 
```
:::
But how can we extract the mentioned IP addresses and perform analysis
on them? This can be done using the
*[extract()](https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/extractfunction){target="_blank"
rel="noopener noreffer"}* function. An example of this is shown below.
First, an IPv4 regex is defined, this is later used to match the content
of the commandline and extract the matched content. The results are
saved in a new column named *IPAddress*. You can now start applying all
the functions that you have learned in this blog!
![Extract IPv4 from column](/svg/loading.min.svg){.lazyload
data-src="/images/KQL-For-Network-Operations/ipregex.png"
data-srcset="/images/KQL-For-Network-Operations/ipregex.png, /images/KQL-For-Network-Operations/ipregex.png 1.5x, /images/KQL-For-Network-Operations/ipregex.png 2x"
data-sizes="auto"}
Query:
::: highlight
``` {tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"}
let IPv4Regex = '[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}';
datatable(commandline:string)
[
    "ping 8.8.8.8",   
    "wget --ftp-user=FTP_USERNAME --ftp-password=FTP_PASSWORD ftp://10.10.10.10/filename.tar.gz",
    "Set-NetIPAddress -InterfaceIndex 12 -IPAddress 192.168.0.1 -PrefixLength 24",  
]    
| extend IPAddress = tostring(xtract(IPv4Regex, 0, commandline))
```
:::
::: {.details .admonition .note .open}
::: {.details-summary .admonition-title}
Related Blogs
:::
::: details-content
::: admonition-content
-   [KQL Functions For Security
    Operations](https://kqlquery.com/posts/kql-for-security-operations/){target="_blank"
    rel="noopener noreffer"}
:::
:::
:::
**Questions?** Feel free to reach out to me on any of my socials.
:::
::: {#post-footer .post-footer}
::: post-info
::: post-info-line
::: post-info-mod
Updated on 2023-11-06
:::
:::
::: post-info-line
::: post-info-md
:::
::: post-info-share
[](javascript:void(0); "Share on Twitter"){sharer="twitter"
url="https://kqlquery.com/posts/kql-for-network-operations/"
data-title="KQL Functions For Network Operations" via="BertJanCyber"
hashtags="KQL,Enrichment,SOC"}[](javascript:void(0); "Share on Facebook"){sharer="facebook"
url="https://kqlquery.com/posts/kql-for-network-operations/"
hashtag="KQL"}[](javascript:void(0); "Share on Linkedin"){sharer="linkedin"
url="https://kqlquery.com/posts/kql-for-network-operations/"}[](javascript:void(0); "Share on Reddit"){sharer="reddit"
url="https://kqlquery.com/posts/kql-for-network-operations/"}
:::
:::
:::
::: post-info-more
::: {.section .post-tags}
 [KQL](/tags/kql/), [Enrichment](/tags/enrichment/), [SOC](/tags/soc/)
:::
::: section
[Back](javascript:void(0);){onclick="window.history.back()"} \| [Home](/)
:::
:::
::: post-nav
[Incident Response Part 3: Leveraging Live
Response](/posts/leveraging-live-response/ "Incident Response Part 3: Leveraging Live Response"){.prev
rel="prev"} [From Threat Report to (KQL) Hunting
Query](/posts/from-threat-report-to-hunting-query/ "From Threat Report to (KQL) Hunting Query"){.next
rel="next"}
:::
:::
:::
:::
::: footer-container
::: {.footer-line itemscope="" itemtype="http://schema.org/CreativeWork"}
[2023 - 2024]{itemprop="copyrightYear"}[ [Bert-Jan
Pals](/){target="_blank"}]{.author
itemprop="copyrightHolder"} \| [©]{.license}
:::
:::
:::
::: {#fixed-buttons}
[](# "Back to Top"){#back-to-top .fixed-button}
[](# "View Comments"){#view-comments .fixed-button}
:::