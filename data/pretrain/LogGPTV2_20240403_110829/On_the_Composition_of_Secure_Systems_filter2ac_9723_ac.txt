security  property  was  an  attempt  to  correct  a  flaw  with  previous  models.    Some  of  the
more 
popular 
properties 
are  Generalized  Noninterference 
[McCullough87],
Restrictiveness 
[McCullough88],  Noninference 
[O’Halloran90] 
and  n-Forward
Correctability [Johnson & Thayer88].  These properties will be examined in detail in this
section 4.4.
2.3.4. Sutherland’s Deducibility
In 1986, David Sutherland [Sutherland86] took a different approach to solving the
security  modeling  problem.    Sutherland  attempted  to  quantify  what  it  means  for
information to flow from one user to another.  Each distinct execution of the system can
be considered an element of the set of possible worlds.  A piece of information about the
- 7 -
system  is  represented  by  an  information  function  whose  domain  is  the  set  of  possible
worlds.  Sutherland then defines information flows in terms of these concepts:
“Given a set of possible worlds W
 and two [information] functions f1 and f2
with domain W
, we say that information flows from f1 to f2 if and  only  if
there exists some possible world w
 and some element z in the range of f2
such that z is achieved by f2 in some possible world, but in every possible
world w
Information flows from f1 to f2 if knowing the value of f1 rules out (or eliminates
 z.” [Sutherland86]
), f2(w
‘ such that f1(w
‘) = f1(w
‘)„
from  consideration)  even  a  single  possible  value  of  f2.    Sutherland  has  an  intended
interpretation for f1 and f2.  This interpretation is not relevant for our work.
Sutherland’s definition implies that information flow is a symmetric relationship.  If
there is a flow from low level users to high level users then there must exist a flow from
high level users to low level users.  This is an undesirable implication because security is
an asymmetric relation; High  level  to  low  level  information  flows  are  not  allowed  while
low level to high level information flows are.
Another  consequence  of  the  definition  of  information  flow  is  that  security  is
dependent  on  all  high  level  activity  that  is  consistent  with  each  possible  low  level
observation.  It will be demonstrated in section 4.3 that this requirement can be met in an
insecure system.
2.4.  Composability
The  composition  of  two  components  can  be  thought  of  as  interconnecting  the
components in some fashion.  There have been numerous formalisms and frameworks for
reasoning about composition.  In section 4.7 we demonstrate that most of these are not
applicable to security properties.  In this section we review the relevant work in the area
of composing secure systems.
2.4.1. Hook-up Security
Until  1987  not  much  work  went  into  examining  the  effects  of  interconnecting
secure components.  McCullough demonstrated that Bell and LaPadula’s access controls
and  its  extensions,  Sutherland’s  Deducibility  model,  and  Goguen  and  Meseguer’s
- 8 -
Noninterference  requirement  are  inadequate  as  composable  security  properties.    It  was
possible to interconnect components that satisfied these properties in such a way that the
resulting system did not satisfy the property.  McCullough introduced the idea of hook-up
security  as  a  solution  to  this  problem.    McCullough  proposed  the  following  circular
definition:
“A  system  is  hook-up  secure  if  it  is  deducibility  secure  and  if,  when  it  is
hooked up with a second hook-up secure system, the  result  is  a  hook-up
secure composite system” [McCullough87]
Millen [Millen90] argued that “hookup safety is not just a frill” and is “an essential
property of a definition of information security.”
McCullough  also  proposed  a  new  definition  of  security  he  called  Restrictiveness
[McCullough88]. 
  Restrictiveness  had 
the  desirable  property  of  composability.
Unfortunately, Restrictiveness is not a natural way of expressing security [Rushby91].
2.4.2. Safety and Liveness
In  1985,  Alpern  and  Schneider  [Alpern  &  Schneider85]  proposed  a  formal
definition for properties.  They express properties as a combination of a  safety  property
and a liveness property.  Informally, a liveness property stipulates that “something” must
eventually happen during the execution of a system, while a safety property requires that
“something bad” never happens.
In the Alpern and Schneider model a property and a system are both sets of traces.
A property holds for a system if and only if the set of traces exhibited by the system is a
subset of the set of traces of the property.
The safety/liveness model has some appealing consequences.  Since properties are
a  set  of  traces  every  property  is  the  intersection  of  a  safety  property  and  a  liveness
property.    Also,  the  notion  of  refinement  is  very  intuitive.    Unfortunately,  we  will
demonstrate that this model of properties is not applicable to secure systems.
2.4.3. Composing Specifications
Abadi and Lamport [Abadi & Lamport90]  defined a modular specification method
for composition.  Their formalism is based on an extension of the Alpern and Schneider
- 9 -
notion  of  safety  and  liveness  properties.    Their  extension  includes  a  notion  of  an
environment in which the system is going to operate.  Their goal is to provide a means to
“prove that a composite system satisfies its specification if all its components satisfy their
specification” [Abadi & Lamport 90].
The behaviour of components is represented by an infinite sequence of states and
“agents” that cause the changes of states.  Specifications are a set of behaviours.  In Abadi
and Lamport’s framework the first step is to define the behaviour of the system and then
compose  the  systems.    There  is  also  an  assumption  about  the  behaviour  of  the
environment.    The  behaviour  of  the  environment  must  be  an  assumption  because  the
environment cannot be controlled.  The Composition Principle  put  forward  in  this  work
applies to specifications of the form E (cid:222)
property.  This expression asserts that the system will  satisfy  property  M  as  long  as  the
 M, where E is a property and M is a machine
environment satisfies the property E.
Abadi and Lamport define a composition principle and a set of proof rules.  These
proof  rules  can  be  used  to  prove  that  components  behave  correctly  when  their
environments behave correctly.  The proof rules and composition principle are not relevant
to  this  work  because  in  section  4.7  we  demonstrate  that  the  Alpern  and  Schneider
safety/liveness  framework  cannot  be  used  to  specify  security  properties.    Therefore,  the
Abadi and Lamport composition principle cannot be applied to secure systems.
2.4.4. Selective Interleaving Functions
One  of  the  first  theories  to  attempt  to  address  the  composition  of  security
properties was presented by McLean in “A General Theory of Composition for Trace Sets
Closed Under Selective Interleaving Functions” [McLean94].  McLean noted that security
properties  do  not  fall  within  the  Alpern  and  Schneider  categorization  of  properties  and
therefore cannot be handled by the Abadi-Lamport Composition Principle (see also section
4.7).
McLean  defines  a  Selective  Interleaving  Function  that  is  used  to  define  security
properties.  This function is defined such that, given two traces t 1 and t 2, it will produce a
  t .    The  trace,  t ,  is  an  interleaving  of  the  two  given  traces.    A
third  trace  f(t 1,  t 2)  ﬁ
- 10 -
component  satisfies  a  security  property  if  it  is  closed  under  f.    Different  interleaving
functions can be used to generate traces satisfying  different  possibilistic  properties.    For
example,  one  can  define  f  such  that  high_inputs(t )  =  high_inputs(t 1),  low_inputs(t )  =
low_inputs(t 2), and low_outputs(t ) = low_outputs(t 2).  This interleaving function defines
Generalized Noninterference.
A complete discussion of Selective Interleaving Functions is given in Chapter 6.
2.5.  Bunch Theory
Bunch theory is not itself a method to model systems.  Bunch theory will be used
throughout our formalism.  In this section we present an introduction to bunch theory.  A
complete  description  of  bunch  theory  can  be  found  in  “A  Practical  Theory  of
Programming” [Hehner93].
A  bunch  is  an  unpackaged  collection  of  objects.    Contrast  this  with  a  set,  a
packaged collection of objects.  A bunch is the contents of a set.  This point might seem
trivial,  but  it  is  essential  to  presenting  a  consistent  theory.    An  elementary  bunch,  or
element, is any number, character, string, etc. For example, the number 2 is an elementary
bunch,  so  is  the  character  ‘c’  and  the  string  ‘abba’.    In  this  work  the  most  common
elementary bunch will be a trace of a system. The axioms of bunch theory that are relevant
to this work are:
If A and B are bunches, then
A, B
“A union B”
 is a bunch, and
A:B
“A is included in B”
is true iff all the elements of A are included in B.
An important bunch is the empty bunch. That is a bunch with no elements.   This
will be expressed as null.  The null bunch satisfies the following identity property,
A, null = A
For  a  complete  list  of  the  axioms  of  Bunch  Theory  see  “A  Practical  Theory  of
Programming” [Hehner93].
- 11 -
Quantifiers will be use throughout this document.  The quantifiers "  and $
  have
their  standard  meaning  but  will  be  augmented  by  including  with  each  variable  of
quantification the bunch of elements that quantification is over.   For example,
i:int(cid:215)
$ r:rat(cid:215) i
packet_sent,  packet_lost,  time_out
G
To say that s= is a trace means that a1 is the first event and the event
ai+1 occurs after event ai.  The trace contains no information about the real time at which
an event occurs.  We  may  say  that  the  trace  describes  only  the  logical  behaviour.    This
relativistic  timing  notion  corresponds  closely  to  the  practical  operation  of  most  real
computing systems.
An  event  trace  places  no  constraints  on  the  absolute  timing  of  particular  events.
All executions with the same relative ordering of events are captured and represented by a
single  event  sequence.    This  is  represented  graphically  in  Figure  3.1.    In  this  case,  the
labeled circles represent different events, and their absolute timing displayed on the scale
- 14 -
from  left  to  right.    The  first  two  timing  sequences  have  identical  event  trace
representations , while the third sequence differs.
A
B
C
A
A
B
B
C
A
Time
Figure 3.1: Relativistic Timing of Event Traces [Nestor93]
The first two sequences have identical event trace representations, while the
third sequence differs.
3.2.  Traces
As described in the previous section a trace of a system indicates the behaviour of
a process up to some moment in time.  A trace will be denoted by an ordered bunch of
events enclosed in angular brackets:
 is a trace of two events.  The event x followed by the event y.
is the trace containing only the event x.
<>
is the empty sequence containing no events.
Traces play a central role in our theory of composition.  We will need operations
on traces.
Definition 3.1: Trace Concatenation
The notation s^ t will refer to the trace formed by putting together traces s
and t in that order.  We will use st to denote concatenation if s and t are
obvious from the context.  Formally, if X and Y are an  order  bunch  of
events then ^  = 
The expression t|A denotes the sub-trace of t containing only events in A.
Example 3.2: Let t = .  Then t|{a1,a3} = 
 will return the set of events present in a bunch.
The operator L
Example 3.3: Let t = .  Then L
t={a1, a2, a3}
- 15 -
If A is a set of events then A* is the set of all finite traces (including <>) which are
formed from symbols in the set A.  The following axioms exactly define this set.
1.   <>˛ A*
2.   ˛
3.   (s^ t)˛ A* if and only if s˛
It will be required to determine all the possible interleavings of two traces.  A trace
 A* if and only if x˛ A
 A* (cid:217)
 t˛
 A*
t is an interleaving of two traces s and u if it can be split into a  series  of  subsequences,
with alternate subsequences extracted from s and u. [Hoare85].
Definition 3.2: Interleave of two bunches of traces
The interleave of two bunches s, t written interleave(s,t) is defined as:
§r:( L s¨
t)*(cid:215) r|L s:s (cid:217)
 r|L
t:t
Recall that a single trace is also a bunch.  Therefore, if the arguments to interleave
are single traces then the resulting bunch will contain all interleavings of the traces.
3.3.  Discrete Event Systems
The framework for our  investigation  into  composability  will  be  event  systems  as
given by McCullough [McCullough87] and Johnson and Thayer [Johnson and Thayer88].