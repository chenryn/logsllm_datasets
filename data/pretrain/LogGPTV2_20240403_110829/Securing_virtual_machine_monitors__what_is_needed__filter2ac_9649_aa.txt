title:Securing virtual machine monitors: what is needed?
author:Paul A. Karger
Book Chapter to be published in
ADVANCES IN COMPUTER SCIENCE AND ENGINEERING
Virtual Machine Security Systems
Xin Zhao, Kevin Borders, Atul Prakash
Department of EECS, University of Michigan
Ann Arbor, MI, 48109-2121, USA
{zhaoxin,kborders,aprakash}@eecs.umich.edu
Abstract
Current operating systems provide the process abstraction to achieve resource sharing and
isolation. From a security perspective, however, an attacker who has compromised one process
can usually gain control of the entire machine. This makes security systems running on the
same computer, such as anti-virus programs or intrusion detection systems, also vulnerable to
attack. In response to the imperfect isolation between processes in modern operating systems,
security researchers have begun to use virtual machine technology when designing security
systems. A virtual machine makes raw device requests to a set of devices that are emulated by
underlying software. So, software running in a VM has the appearance of its own dedicated
hardware, but is actually controlled and managed by a software layer on the physical com-
puter. With reasonable assumptions, the level of isolation between virtual machines is nearly
equivalent to having two separate machines. At the same time, the underlying software has full
access to each virtual machine’s state. These properties make virtual machines very attractive
for designers of security systems. In this chapter we explore a wide variety of security applica-
tions that utilize virtual machine technology, including intrusion detection and introspection,
honeyfarms, logging and replaying, secure ﬁle systems, and even malicious software.
339
1 Overview of Virtual Machine Technology
Virtual machines have been in existence since the mid 1970’s [Cre81, Gum83]. A virtual machine
(VM) is a logical process (most often an operating system) that interfaces with emulated hardware
and is managed by an underlying control program. Originally, virtual machines were run on main-
frames to provide resource multiplexing and isolation [Cre81, Gum83]. Recently, virtual machines
have been growing in popularity. Some virtual machine systems, such as VMWare [SVL01] and
Xen [BDF+03], have seen widespread deployment at many large corporations [Asl].
Most modern virtual machine systems use the virtual machine monitor (VMM) model for man-
aging and controlling individual virtual machines. The VMM is a thin software layer that runs
directly on a physical machine’s hardware. On top of the virtual machine monitor, there can be
one or more virtual machines. The VMM provides each virtual machine with a set of virtual inter-
faces that resemble direct interfaces to the underlying hardware. Applications on a virtual machine
can run without modiﬁcation as if they were on running on a dedicated physical machine. The
VMM allows multiple virtual machines to be running at the same time and transparently multi-
plexes resources between them [Gol74]. The VMM also isolates the virtual machines from one
another, preventing them from accessing each other’s memory or disk space. The operating system
that runs inside of a virtual machine is traditionally referred to as the guest OS, and applications
running on the guest OS are referred to as guest applications.
2 Virtual Machine Types
All computer programs consist of instructions. When a program runs inside of a virtual machine,
these instructions either execute directly on the processor, or are interpreted by the underlying
software. The proportion of instructions that run directly on the processor will signiﬁcantly im-
pact a virtual machine’s performance. In one extreme, a real machine only uses direct execution.
Programs will run very fast on a real machine because their instructions do not require translation.
Direct execution delivers the best performance, but has no support for checking machine state prior
to executing privileged instructions. The other extreme is a complete software interpreter machine
(CSIM). A CSIM translates and emulates every single processor instruction for a computer pro-
gram. This requires a lot of extra work and is usually very slow. A virtual machine monitor uses
a combination of these two methods. It executes a ”statistically dominant subset” of program in-
structions (including all the basic arithmetic, memory, and branching operations) directly on the
processor, while emulating privileged instructions such as system calls and device I/O requests
[Gol72].
Virtual machine monitors can be categorized into two groups: Type I VMMs or Type II VMMs
340
Figure 1: Architecture of Type I and II Virtual Machine Systems
[Gol72]. Figure 1 shows the architecture of each VMM type. A Type I VMM runs directly on the
physical hardware. It does not have an operating system running below it; the Type I VMM is fully
responsible for scheduling and allocating of the system’s resources between virtual machines. Ex-
amples of Type-I VMM include VMWare ESX (enterprise) [Wal02], and Xen [BDF+03]. A Type II
VMM runs as an application in a normal operating system. This operating system controls the real
hardware resources, and is typically referred to as the ”Host OS.” The host OS has no knowledge
of the Type II VMM, which is treated like any other process in the system. The operating system
that runs inside of the Type II VMM is referred to as the ”Guest OS.” Examples of Type-II VMM
include VMWare GSX (workstation) [SVL01], UML (User-Mode Linux) [Dik00], and FAUma-
chine [HWS04]. Because the Type II VMM is running inside of a standard operating system, any
security vulnerabilities that lead to the compromise of the host OS will also give full control of the
guest OS. Host operating systems for Type II VMMs are more heavyweight than Type I VMMs,
and more prone to security vulnerabilities. For this reason, Type I VMMs are generally considered
to be much more secure than Type II VMMs.
3 Overview of VM based Security Systems
3.1 Architecture of VM based Security Services
While VM-based security systems have diﬀerent features, they usually share a similar architecture.
As shown in Figure 2, security services can be deployed either as part of virtual machine monitor or
in a dedicated virtual machine. Some security services may also run components in guest operating
systems. However, components in guest OSes are often only responsible for making requests to
security services on the VMM or a dedicated secure VM where policy enforcement takes place.
Security policies are rarely enforced from within the guest OS because it is much more likely to
be compromised.
The security of VM-based services rests on the assumption that the underlying trusted comput-
ing base (TCB) is also secure. If the TCB compromised, then all bets are oﬀ for the VM-based
341
(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:8)(cid:9)(cid:10)(cid:11)(cid:12)(cid:2)(cid:13)(cid:14)(cid:15)(cid:16)(cid:17)(cid:18)(cid:19)(cid:16)(cid:17)(cid:3)(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:8)(cid:20)(cid:21)(cid:21)(cid:4)(cid:1)(cid:2)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:8)(cid:1)(cid:2)(cid:8)(cid:9)(cid:10)(cid:11)(cid:12)(cid:13)(cid:7)(cid:5)(cid:11)(cid:7)(cid:4)(cid:10)(cid:5)(cid:8)(cid:14)(cid:15)(cid:8)(cid:16)(cid:17)(cid:18)(cid:5)(cid:8)(cid:19)(cid:19)(cid:8)(cid:1)(cid:2)(cid:8)(cid:20)(cid:17)(cid:6)(cid:7)(cid:5)(cid:21)(cid:6)(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:8)(cid:9)(cid:22)(cid:11)(cid:12)(cid:18)(cid:23)(cid:19)(cid:4)(cid:14)(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:8)(cid:9)(cid:10)(cid:11)(cid:12)(cid:2)(cid:13)(cid:14)(cid:24)(cid:11)(cid:17)(cid:5)(cid:2)(cid:16)(cid:25)(cid:8)(cid:26)(cid:16)(cid:27)(cid:28)(cid:11)(cid:12)(cid:3)(cid:8)(cid:26)(cid:23)(cid:12)(cid:11)(cid:5)(cid:23)(cid:17)(cid:15)(cid:16)(cid:17)(cid:18)(cid:19)(cid:16)(cid:17)(cid:3)(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:8)(cid:20)(cid:21)(cid:21)(cid:4)(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:8)(cid:20)(cid:21)(cid:21)(cid:4)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:8)(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:8)(cid:1)(cid:2)(cid:8)(cid:9)(cid:10)(cid:11)(cid:12)(cid:13)(cid:7)(cid:5)(cid:11)(cid:7)(cid:4)(cid:10)(cid:5)(cid:8)(cid:14)(cid:15)(cid:8)(cid:16)(cid:17)(cid:18)(cid:5)(cid:8)(cid:19)(cid:8)(cid:1)(cid:2)(cid:8)(cid:20)(cid:17)(cid:6)(cid:7)(cid:5)(cid:21)(cid:6)(cid:15)(cid:23)(cid:4)(cid:5)(cid:8)(cid:6)(cid:21)(cid:3)(cid:17)(cid:16)(cid:5)(cid:11)(cid:12)(cid:29)(cid:8)(cid:7)(cid:30)(cid:4)(cid:5)(cid:3)(cid:31)(cid:15)(cid:23)(cid:4)(cid:5)(cid:8)(cid:20)(cid:21)(cid:21)(cid:4)(cid:8)(cid:9)(cid:3) (cid:29) (cid:8)(cid:22)(cid:3)!(cid:8)"(cid:17)(cid:23)(cid:19)(cid:4)(cid:3)(cid:17)#(cid:8)$(cid:31)(cid:16)(cid:27)(cid:4)(cid:14)Figure 2: Architecture of VM-based Security Services
security service. In a Type I virtual machine, the trusted computing base is the virtual machine
monitor. Some services also need to include the dedicated secure VM as part of TCB. The TCB is
considered to be secure because “It is so simple that its implementation can be reasonably expected
to be correct” [GR03]. Virtual machine monitors are only responsible for virtualizing the physical
machine’s hardware and partitioning it into logically separate virtual machines. Compared to a full
operating system, which may have several million lines of code, the Disco [BDGR97, GTHR00]
and Denali [WSG02] VMMs have around 30,000 lines of code [GR03], and Xen has approxi-
mately 60,000 lines of code. Also, the secure VM typically has a reduced mini-OS without any
unneeded services or components.
In addition to having a small code base, the interfaces to VMM and the dedicated security VM
are much simpler, more constrained, and better speciﬁed than a standard operating system. This
helps reduce the risk of security vulnerabilities. For example, the Xen virtual machine monitor can
only be accessed through 28 predeﬁned hypervisor calls (privileged functions used by guest OSes
to the VMM). In contrast, a standard Linux operating system exposes upwards of a few hundred
system calls (Linux kernel 2.6.11 has 289 system calls), special devices such as /dev/kmem, kernel
modules, and a variety of privileged programs, such as sendmail and sshd, some of which are
packaged with the OS and others are provided by third parties.
3.2 Advantages
Virtual machines have several advantages that make them better suited for providing security ser-
vices than a standard physical machine. First, guest virtual machines run on emulated hardware,
which means that the virtual machine monitor has access to all of a guest virtual machine’s state.
This includes registers, memory, disk contents, and other I/O device state (such as the video or
sound buﬀer). By dealing with the VMM, security services can monitor all activities on a guest
VM from outside.
Virtual machine technology also provides stronger isolation between virtual machines than
is available between processes in conventional multiprogramming environments [MD73]. This
342
(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:8)(cid:9)(cid:6)(cid:10)(cid:11)(cid:2)(cid:12)(cid:13)(cid:8)(cid:9)(cid:14)(cid:12)(cid:2)(cid:4)(cid:14)(cid:3)(cid:8)(cid:15)(cid:8)(cid:16)(cid:13)(cid:10)(cid:5)(cid:3)(cid:2)(cid:4)(cid:17)(cid:8)(cid:16)(cid:13)(cid:3)(cid:18)(cid:2)(cid:10)(cid:13)(cid:19)(cid:20)(cid:3)(cid:14)(cid:12)(cid:4)(cid:13)(cid:12)(cid:21)(cid:19)(cid:8)(cid:14)(cid:22)(cid:8)(cid:1)(cid:9)(cid:8)(cid:16)(cid:13)(cid:10)(cid:5)(cid:3)(cid:2)(cid:4)(cid:17)(cid:8)(cid:16)(cid:13)(cid:3)(cid:18)(cid:2)(cid:10)(cid:13)(cid:19)(cid:8)(cid:23)(cid:5)(cid:13)(cid:19)(cid:4)(cid:8)(cid:24)(cid:16)(cid:23)(cid:5)(cid:13)(cid:19)(cid:4)(cid:8)(cid:25)(cid:26)(cid:26)(cid:7)(cid:2)(cid:10)(cid:6)(cid:4)(cid:2)(cid:14)(cid:12)(cid:23)(cid:5)(cid:13)(cid:19)(cid:4)(cid:8)(cid:1)(cid:9)(cid:16)(cid:13)(cid:10)(cid:5)(cid:3)(cid:2)(cid:4)(cid:17)(cid:8)(cid:16)(cid:13)(cid:3)(cid:18)(cid:2)(cid:10)(cid:13)(cid:19)(cid:8)(cid:27)(cid:13)(cid:21)(cid:5)(cid:10)(cid:13)(cid:21)(cid:8)(cid:23)(cid:5)(cid:13)(cid:19)(cid:4)(cid:8)(cid:24)(cid:16)(cid:16)(cid:13)(cid:10)(cid:5)(cid:3)(cid:2)(cid:4)(cid:17)(cid:8)(cid:16)(cid:13)(cid:3)(cid:18)(cid:2)(cid:10)(cid:13)(cid:8)(cid:1)(cid:9)(cid:20)(cid:3)(cid:14)(cid:12)(cid:4)(cid:13)(cid:12)(cid:21)(cid:19)(cid:8)(cid:14)(cid:22)(cid:8)(cid:1)(cid:9)(cid:8)(cid:16)(cid:13)(cid:10)(cid:5)(cid:3)(cid:2)(cid:4)(cid:17)(cid:8)(cid:16)(cid:13)(cid:3)(cid:18)(cid:2)(cid:10)(cid:13)(cid:19)(cid:8)(cid:23)(cid:5)(cid:13)(cid:19)(cid:4)(cid:8)(cid:24)(cid:16)(cid:23)(cid:5)(cid:13)(cid:19)(cid:4)(cid:8)(cid:25)(cid:26)(cid:26)(cid:7)(cid:2)(cid:10)(cid:6)(cid:4)(cid:2)(cid:14)(cid:12)(cid:23)(cid:5)(cid:13)(cid:19)(cid:4)(cid:8)(cid:1)(cid:9)(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:8)(cid:9)(cid:10)(cid:11)(cid:12)(cid:3)(cid:5)(cid:13)(cid:14)(cid:15)(cid:8)(cid:16)(cid:17)(cid:4)(cid:6)(cid:8)(cid:18)(cid:1)(cid:9)(cid:16)(cid:19)makes it possible to run security services on a VM that is isolated from attack by other compro-
mised virtual machines. In contrast, any security services running on a normal machine can be
tampered with or disabled once it has been compromised by an attacker.
Another advantage is that it is much easier to manipulate the state of a virtual machine than
the state of a physical machine. The state of the virtual machine can be saved, cloned, encrypted,
moved, and restored, none of which is easy to do with physical machines [CN01]. Saved VM
states, or ”snapshots,” have been used to replay past activities on a guest OS for the purpose of
studying intrusion techniques and collecting forensic evidence. Also, snapshots provide a con-
venient way of rolling back to a previous state after an attack has taken place and corrupted the
system.
Two virtual machines can also communicate faster than two separate physical computer sys-
tems. Physical machines are separated by physical networks, which are slower than a memory bus.
Fast inter-VM communication makes it possible for two machines to cooperate with each other
for security purposes without impacting performance. For example, SVFS [ZBP05b] moves the
guest virtual machine’s ﬁle system to a dedicated data VM so that access control policies can be
enforced outside of the guest VM. The data VM serves ﬁle access requests through fast inter-VM
communication. If SVFS were to use a traditional networked ﬁle system, I/O performance would
degrade severely, which would not aﬀect security, but would make the system much less usable.
Finally, virtual machine technology makes it possible to recognize an malicious application
by testing it on a “cloned” machine and see whether this application behave normally [CCC+05,
CN01]. In contrast, it is hard to conduct this test on a real system because running suspicious
applications risks compromising the system. Virtual machine make it easy to clone a running
system. The cloned virtual machine can then be used to examine the eﬀects of running suspicious
applications rather than looking only at the applications. Because clones are isolated from the real
system, all operations done in the clones will be contained and will not aﬀect the real system,
making the application testing safer.
3.3 Challenges
While virtual machine technology provides security beneﬁts, it also presents some unique chal-
lenges. The ﬁrst is performance. Running security services hurts system performance due to
virtualization overhead and inter-VM communication. For example, inspecting a virtual machine’s
system calls requires that the VMM trap every system call, check its parameters, and then for-
ward it to the guest operating system. Performing all these operations adds a signiﬁcant amount
of overhead. Furthermore, the VMM needs to trap all access requests to physical devices from the
guest virtual machines. The VMM must then translate and reissue each device I/O command to the
343
physical hardware, rather than allowing the guest OS to directly manipulate those devices. In some
virtual machine systems, like Xen, device access requests and results are exchanged via cross-VM
communication, which requires extra context switching and further increases the system overhead.
Virtualizing an x86 series processor also incurs an additional performance penalty because x86
processors do not trap all instructions that need to be virtualized [RI00]. Instead, the VMM must
modify the privileged instructions to emulate correct behavior. Overall, virtual machines do not
run as eﬃciently as normal computers, which can make them an unattractive option for real-world
deployment, even if they do provide a higher level of security.
The second challenge is hardware cost. Currently, virtual machines require a good deal of
physical resources. Some disk and memory space must be pre-allocated for each virtual machine.
Users often face a conﬁguration dilemma when setting up virtual machines. If a lot of resources are
assigned to each VM, then they will have better performance, but fewer will be able to run on the
same hardware. On the other hand, if each VM runs with a minimal amount of resources, then a lot
of them will be able to run on one physical machine, but application performance will suﬀer. This
conﬂict is caused by a combination of isolation and static resource allocation: virtual machines
cannot share or swap resources, even if one VM is under-utilized. This can cause a problem for
VM-based security services because they will take up a ﬁxed amount of system resources, even if
they are idle most of the time. If a user has an older machine or limited memory then it may not be
feasible to run a virtual machine system.
The third challenge of virtual machine security services is the semantic gap between the guest
operating system and the underlying virtual machine monitor [CN01]. The VMM can only see the
raw state of the guest virtual machine (i.e. disk blocks rather than ﬁles [SVL01]), while security
services usually need to reason about guest VM state on a higher level. Without knowledge of on-
disk structures, the security service running on the VMM will be unable to view information at the
appropriate level of abstraction. What further complicates this problem is the ability of a hacker
to corrupt low-level structures residing in the guest VM’s memory and on disk in an attempt to
confuse and disrupt security services that try to view the data at a high level.
Another challenge for VM-based security services is that malicious software can ﬁngerprint
virtual machines and try to avoid them entirely. Several techniques have been published for ﬁn-
gerprinting a virtual machine [Cor03, Cor04, RK03], some of which are already employed by
the Agobot malware program [F-S]. Although beneﬁcial in many circumstances, having attackers
avoid machines with VM security services on them may lead to focused attacks on more vulner-
able systems. VM ﬁngerprinting can also cause a problem for virtual machine honeypots, which
are designed to lure attackers in order to study their techniques. If attackers are able to avoid hon-
eypots, then the honeypots will be ineﬀective. Overall, this is a challenge that is likely to go away
in the future as more computers run virtual machines, and chip manufacturers like Intel and AMD
344
add support for full virtualization to their microprocessors [Int, AMD].
Finally, virtual machines that run security services could potentially hurt system security them-
selves. For example, the VM-based logging tool Revirt [DKC+02] can log system activities and
rollback or replay them at a later time. It records the previous states of the guest VM on disk.