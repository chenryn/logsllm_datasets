.i versions
display version dependencies.
.re
.ip
since glibc 2.3.4,
.b ld_debug
is ignored in secure-execution mode, unless the file
.ir /etc/suid\-debug
exists (the content of the file is irrelevant).
.tp
.br ld_debug_output " (since glibc 2.1)"
by default,
.b ld_debug
output is written to standard error.
if
.b ld_debug_output
is defined, then output is written to the pathname specified by its value,
with the suffix "." (dot) followed by the process id appended to the pathname.
.ip
.b ld_debug_output
is ignored in secure-execution mode.
.tp
.br ld_dynamic_weak " (since glibc 2.1.91)"
by default, when searching shared libraries to resolve a symbol reference,
the dynamic linker will resolve to the first definition it finds.
.ip
old glibc versions (before 2.2), provided a different behavior:
if the linker found a symbol that was weak,
it would remember that symbol and
keep searching in the remaining shared libraries.
if it subsequently found a strong definition of the same symbol,
then it would instead use that definition.
(if no further symbol was found,
then the dynamic linker would use the weak symbol that it initially found.)
.ip
the old glibc behavior was nonstandard.
(standard practice is that the distinction between
weak and strong symbols should have effect only at static link time.)
in glibc 2.2,
.\" more precisely 2.1.92
.\" see weak handling
.\"     https://www.sourceware.org/ml/libc-hacker/2000-06/msg00029.html
.\"     to: gnu libc hacker 
.\"     subject: weak handling
.\"     from: ulrich drepper 
.\"     date: 07 jun 2000 20:08:12 -0700
.\"     reply-to: drepper at cygnus dot com (ulrich drepper)
the dynamic linker was modified to provide the current behavior
(which was the behavior that was provided by most other implementations
at that time).
.ip
defining the
.b ld_dynamic_weak
environment variable (with any value) provides
the old (nonstandard) glibc behavior,
whereby a weak symbol in one shared library may be overridden by
a strong symbol subsequently discovered in another shared library.
(note that even when this variable is set,
a strong symbol in a shared library will not override
a weak definition of the same symbol in the main program.)
.ip
since glibc 2.3.4,
.b ld_dynamic_weak
is ignored in secure-execution mode.
.tp
.br ld_hwcap_mask " (since glibc 2.1)"
mask for hardware capabilities.
.tp
.br ld_origin_path " (since glibc 2.1)"
path where the binary is found.
.\" used only if $origin can't be determined by normal means
.\" (from the origin path saved at load time, or from /proc/self/exe)?
.ip
since glibc 2.4,
.b ld_origin_path
is ignored in secure-execution mode.
.tp
.br ld_pointer_guard " (glibc from 2.4 to 2.22)"
set to 0 to disable pointer guarding.
any other value enables pointer guarding, which is also the default.
pointer guarding is a security mechanism whereby some pointers to code
stored in writable program memory (return addresses saved by
.br setjmp (3)
or function pointers used by various glibc internals) are mangled
semi-randomly to make it more difficult for an attacker to hijack
the pointers for use in the event of a buffer overrun or
stack-smashing attack.
since glibc 2.23,
.\" commit a014cecd82b71b70a6a843e250e06b541ad524f7
.b ld_pointer_guard
can no longer be used to disable pointer guarding,
which is now always enabled.
.tp
.br ld_profile " (since glibc 2.1)"
the name of a (single) shared object to be profiled,
specified either as a pathname or a soname.
profiling output is appended to the file whose name is:
"\fi$ld_profile_output\fp/\fi$ld_profile\fp.profile".
.ip
since glibc 2.2.5,
.br ld_profile
is ignored in secure-execution mode.
.tp
.br ld_profile_output " (since glibc 2.1)"
directory where
.b ld_profile
output should be written.
if this variable is not defined, or is defined as an empty string,
then the default is
.ir /var/tmp .
.ip
.b ld_profile_output
is ignored in secure-execution mode; instead
.ir /var/profile
is always used.
(this detail is relevant only before glibc 2.2.5,
since in later glibc versions,
.b ld_profile
is also ignored in secure-execution mode.)
.tp
.br ld_show_auxv " (since glibc 2.1)"
if this environment variable is defined (with any value),
show the auxiliary array passed up from the kernel (see also
.br getauxval (3)).
.ip
since glibc 2.3.4,
.b ld_show_auxv
is ignored in secure-execution mode.
.tp
.br ld_trace_prelinking " (since glibc 2.4)"
if this environment variable is defined,
trace prelinking of the object whose name is assigned to
this environment variable.
(use
.br ldd (1)
to get a list of the objects that might be traced.)
if the object name is not recognized,
.\" (this is what seems to happen, from experimenting)
then all prelinking activity is traced.
.tp
.br ld_use_load_bias " (since glibc 2.3.3)"
.\" http://sources.redhat.com/ml/libc-hacker/2003-11/msg00127.html
.\" subject: [patch] support ld_use_load_bias
.\" jakub jelinek
by default (i.e., if this variable is not defined),
executables and prelinked
shared objects will honor base addresses of their dependent shared objects
and (nonprelinked) position-independent executables (pies)
and other shared objects will not honor them.
if
.b ld_use_load_bias
is defined with the value 1, both executables and pies
will honor the base addresses.
if
.b ld_use_load_bias
is defined with the value 0,
neither executables nor pies will honor the base addresses.
.ip
since glibc 2.3.3, this variable is ignored in secure-execution mode.
.tp
.br ld_verbose " (since glibc 2.1)"
if set to a nonempty string,
output symbol versioning information about the
program if the
.b ld_trace_loaded_objects
environment variable has been set.
.tp
.br ld_warn " (since glibc 2.1.3)"
if set to a nonempty string, warn about unresolved symbols.
.tp
.br ld_prefer_map_32bit_exec " (x86-64 only; since glibc 2.23)"
according to the intel silvermont software optimization guide, for 64-bit
applications, branch prediction performance can be negatively impacted
when the target of a branch is more than 4\ gb away from the branch.
if this environment variable is set (to any value),
the dynamic linker
will first try to map executable pages using the
.br mmap (2)
.br map_32bit
flag, and fall back to mapping without that flag if that attempt fails.
nb: map_32bit will map to the low 2\ gb (not 4\ gb) of the address space.
.ip
because
.b map_32bit
reduces the address range available for address space layout
randomization (aslr),
.b ld_prefer_map_32bit_exec
is always disabled in secure-execution mode.
.sh files
.tp
.i /lib/ld.so
a.out dynamic linker/loader
.tp
.ir /lib/ld\-linux.so. { 1 , 2 }
elf dynamic linker/loader
.tp
.i /etc/ld.so.cache
file containing a compiled list of directories in which to search for
shared objects and an ordered list of candidate shared objects.
see
.br ldconfig (8).
.tp
.i /etc/ld.so.preload
file containing a whitespace-separated list of elf shared objects to
be loaded before the program.
see the discussion of
.br ld_preload
above.
if both
.br ld_preload
and
.i /etc/ld.so.preload
are employed, the libraries specified by
.br ld_preload
are preloaded first.
.i /etc/ld.so.preload
has a system-wide effect,
causing the specified libraries to be preloaded for
all programs that are executed on the system.
(this is usually undesirable,
and is typically employed only as an emergency remedy, for example,
as a temporary workaround to a library misconfiguration issue.)
.tp
.i lib*.so*
shared objects
.sh notes
.ss hardware capabilities
some shared objects are compiled using hardware-specific instructions which do
not exist on every cpu.
such objects should be installed in directories whose names define the
required hardware capabilities, such as
.ir /usr/lib/sse2/ .
the dynamic linker checks these directories against the hardware of the
machine and selects the most suitable version of a given shared object.
hardware capability directories can be cascaded to combine cpu features.
the list of supported hardware capability names depends on the cpu.
the following names are currently recognized:
.\" presumably, this info comes from sysdeps/i386/dl-procinfo.c and
.\" similar files
.tp
.b alpha
ev4, ev5, ev56, ev6, ev67
.tp
.b mips
loongson2e, loongson2f, octeon, octeon2
.tp
.b powerpc
4xxmac, altivec, arch_2_05, arch_2_06, booke, cellbe, dfp, efpdouble, efpsingle,
fpu, ic_snoop, mmu, notb, pa6t, power4, power5, power5+, power6x, ppc32, ppc601,
ppc64, smt, spe, ucache, vsx
.tp
.b sparc
flush, muldiv, stbar, swap, ultra3, v9, v9v, v9v2
.tp
.b s390
dfp, eimm, esan3, etf3enh, g5, highgprs, hpage, ldisp, msa, stfle,
z900, z990, z9-109, z10, zarch
.tp
.b x86 (32-bit only)
acpi, apic, clflush, cmov, cx8, dts, fxsr, ht, i386, i486, i586, i686, mca, mmx,
mtrr, pat, pbe, pge, pn, pse36, sep, ss, sse, sse2, tm
.sh see also
.br ld (1),
.br ldd (1),
.br pldd (1),
.br sprof (1),
.br dlopen (3),
.br getauxval (3),
.br elf (5),
.br capabilities (7),
.br rtld\-audit (7),
.br ldconfig (8),
.br sln (8)
.\" .sh authors
.\" ld.so: david engel, eric youngdale, peter macdonald, hongjiu lu, linus
.\"  torvalds, lars wirzenius and mitch d'souza
.\" ld\-linux.so: roland mcgrath, ulrich drepper and others.
.\"
.\" in the above, (libc5) stands for david engel's ld.so/ld\-linux.so.
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man2/syslog.2
.so man3/crypt.3
.so man3/exp2.3
.so man3/termios.3
.so man3/ilogb.3
.\" copyright (c) bruno haible 
.\"
.\" %%%license_start(gplv2+_doc_onepara)
.\" this is free documentation; you can redistribute it and/or
.\" modify it under the terms of the gnu general public license as
.\" published by the free software foundation; either version 2 of
.\" the license, or (at your option) any later version.
.\" %%%license_end
.\"
.\" references consulted:
.\"   gnu glibc-2 source code and manual
.\"   dinkumware c library reference http://www.dinkumware.com/
.\"   opengroup's single unix specification
.\"      http://www.unix-systems.org/online.html
.\"   iso/iec 9899:1999
.\"
.\" modified tue oct 16 23:18:40 bst 2001 by john levon 
.th fgetwc 3  2021-03-22 "gnu" "linux programmer's manual"
.sh name
fgetwc, getwc \- read a wide character from a file stream
.sh synopsis
.nf
.b #include 
.b #include 
.pp
.bi "wint_t fgetwc(file *" stream );
.bi "wint_t getwc(file *" stream );
.fi
.sh description
the
.br fgetwc ()
function is the wide-character equivalent
of the
.br fgetc (3)
function.
it reads a wide character from \fistream\fp and returns it.
if the end of stream is reached, or if \fiferror(stream)\fp becomes true,
it returns
.br weof .
if a wide-character conversion error occurs, it sets
\fierrno\fp to \fbeilseq\fp and returns
.br weof .
.pp
the
.br getwc ()
function or macro functions identically to
.br fgetwc ().
it may be implemented as a macro, and may evaluate its argument
more than once.
there is no reason ever to use it.
.pp
for nonlocking counterparts, see
.br unlocked_stdio (3).
.sh return value
on success,
.br fgetwc ()
returns the next wide-character from the stream.
otherwise,
.b weof
is returned, and
.i errno
is set to indicate the error.
.sh errors
apart from the usual ones, there is
.tp
.b eilseq
the data obtained from the input stream does not
form a valid character.
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br fgetwc (),
.br getwc ()
t}	thread safety	mt-safe
.te
.hy
.ad
.sp 1
.sh conforming to
posix.1-2001, posix.1-2008, c99.
.sh notes
the behavior of
.br fgetwc ()
depends on the
.b lc_ctype
category of the
current locale.
.pp
in the absence of additional information passed to the
.br fopen (3)
call, it is
reasonable to expect that
.br fgetwc ()
will actually read a multibyte sequence
from the stream and then convert it to a wide character.
.sh see also
.br fgetws (3),
.br fputwc (3),
.br ungetwc (3),
.br unlocked_stdio (3)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright (c) 2020 michael kerrisk 
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.th seccomp_unotify 2 2021-06-20 "linux" "linux programmer's manual"
.sh name
seccomp_unotify \- seccomp user-space notification mechanism
.sh synopsis
.nf
.b #include 
.b #include 
.b #include 
.pp
.bi "int seccomp(unsigned int " operation ", unsigned int " flags \
", void *" args );
.pp
.b #include 
.pp
.bi "int ioctl(int " fd ", seccomp_ioctl_notif_recv,"
.bi "          struct seccomp_notif *" req );
.bi "int ioctl(int " fd ", seccomp_ioctl_notif_send,"
.bi "          struct seccomp_notif_resp *" resp );
.bi "int ioctl(int " fd ", seccomp_ioctl_notif_id_valid, __u64 *" id );
.bi "int ioctl(int " fd ", seccomp_ioctl_notif_addfd,"
.bi "          struct seccomp_notif_addfd *" addfd );
.fi
.sh description
this page describes the user-space notification mechanism provided by the
secure computing (seccomp) facility.
as well as the use of the
.b seccomp_filter_flag_new_listener
flag, the
.br seccomp_ret_user_notif
action value, and the
.b seccomp_get_notif_sizes
operation described in
.br seccomp (2),
this mechanism involves the use of a number of related
.br ioctl (2)
operations (described below).
.\"
.ss overview
in conventional usage of a seccomp filter,
the decision about how to treat a system call is made by the filter itself.
by contrast, the user-space notification mechanism allows
the seccomp filter to delegate
the handling of the system call to another user-space process.
note that this mechanism is explicitly
.b not
intended as a method implementing security policy; see notes.
.pp
in the discussion that follows,
the thread(s) on which the seccomp filter is installed is (are)
referred to as the
.ir target ,
and the process that is notified by the user-space notification
mechanism is referred to as the
.ir supervisor .
.pp
a suitably privileged supervisor can use the user-space notification
mechanism to perform actions on behalf of the target.
the advantage of the user-space notification mechanism is that
the supervisor will
usually be able to retrieve information about the target and the
performed system call that the seccomp filter itself cannot.
(a seccomp filter is limited in the information it can obtain and
the actions that it can perform because it
is running on a virtual machine inside the kernel.)
.pp
an overview of the steps performed by the target and the supervisor
is as follows:
.\"-------------------------------------
.ip 1. 3
the target establishes a seccomp filter in the usual manner,
but with two differences:
.rs
.ip \(bu 2
the
.br seccomp (2)
.i flags
argument includes the flag
.br seccomp_filter_flag_new_listener .
consequently, the return value of the (successful)
.br seccomp (2)
call is a new "listening"
file descriptor that can be used to receive notifications.
only one "listening" seccomp filter can be installed for a thread.
.\" fixme
.\" is the last sentence above correct?
.\"
.\" kees cook (25 oct 2020) notes:
.\"
.\" i like this limitation, but i expect that it'll need to change in the
.\" future. even with lsms, we see the need for arbitrary stacking, and the
.\" idea of there being only 1 supervisor will eventually break down. right
.\" now there is only 1 because only container managers are using this
.\" feature. but if some daemon starts using it to isolate some thread,
.\" suddenly it might break if a container manager is trying to listen to it
.\" too, etc. i expect it won't be needed soon, but i do think it'll change.
.\"
.ip \(bu
in cases where it is appropriate, the seccomp filter returns the action value
.br seccomp_ret_user_notif .
this return value will trigger a notification event.
.re
.\"-------------------------------------
.ip 2.
in order that the supervisor can obtain notifications
using the listening file descriptor,
(a duplicate of) that file descriptor must be passed from
the target to the supervisor.
one way in which this could be done is by passing the file descriptor
over a unix domain socket connection between the target and the supervisor
(using the
.br scm_rights
ancillary message type described in
.br unix (7)).
another way to do this is through the use of