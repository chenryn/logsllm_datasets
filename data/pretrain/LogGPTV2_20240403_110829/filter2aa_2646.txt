### About Me
- **What I am not?**
  - Formally Educated
  - Developer
  - Hacker

- **What I am?**
  - Interested

### How I Plan to Spend Your Time
- **Introduction to GoH (Game of Hacks)**
  - What is GoH?
  - The Story Behind It
  - Not Just a T-Shirt Contest
  - Potential Risks in Node.js
  - Key Takeaways

### Game of Hacks – An Idea is Born
```csharp
using System;
using System.Security.Cryptography;

class Program
{
    static void Main()
    {
        using (RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider())
        {
            // Buffer storage.
            byte[] data = new byte[4];

            // Ten iterations.
            for (int i = 0; i < 10; i++)
            {
                // Fill buffer.
                rng.GetBytes(data);

                // Convert to int32.
                int value = BitConverter.ToInt32(data, 0);
                Console.WriteLine(value);
            }

            // Other Random Generation method
            Random otherRandomGenerator = new Random();
            double otherRandomNumber = otherRandomGenerator.NextDouble();
        }
    }
}
```

### Spot the Vulnerability
- **CISO Concerns: Education and Awareness**
  - [OWASP CISO Report 2013](https://www.owasp.org/images/2/28/Owasp-ciso-report-2013-1.0.pdf)

- **Launched on August**
  - Over 100,000 games played since launch

- **What Was Behind GoH?**
  - **Honeypot**
    - We assumed the game would be attacked
    - We might as well learn from it
    - Vulnerabilities were left exposed and patched along the way

### Let’s Take a Look at the Game
- **GoH Architecture**
  - **Server**
    - Single Thread
    - Event Handler
    - Code.DanYork.Com
    - Event Driven
  - **Client**
    - Question
    - Answers
    - Code Snippet
    - 60-Second Timer
    - Question Number
    - Score
    - Difficulty Level

- **Game Entities**
  - Quiz questions
  - Answers
  - Score
  - Timer

### Get Your Browsers Ready!
- **Checkmarx@Defcon 23**
  - Turn your mobile devices ON!
  - Go to: [www.kahoot.it](http://www.kahoot.it)

### Answered Question
- **Initial Issue**
  - Users initiated `app.sendAnswers` multiple times until they got a "Correct answer" response.
  - This allowed malicious users to systematically locate the correct answer and gain points repeatedly.

- **Solutions**
  - Added a "Question Already Answered" flag

### Timer
- **GoH Version 1**
  - Timer handled by client
  - User forced to go to the next question when time ends
  - Client sends to server: Answer + Time spent

- **GoH Version 2**
  - Time computed at the server with minor traffic influence

- **Impact**
  - Players stopped the timer by modifying JavaScript code

### More Node.js Points to Remember
- **Architecture and MongoDB**
  ```javascript
  db.products.insert({ item: "card", qty: 15 });
  db.products.insert({ name: "elephant", size: 1700 });
  db.products.find(); // Find all
  db.products.find({ qty: 15 }); // Find based on equality
  db.products.find({ qty: { $gt: 25 } }); // Find based on criteria
  ```

- **Data Insertion and Storage**
  - Data is inserted and stored as JSON
  - Queries are described using JSON

### Security – User Supplied Data
- **Vulnerability in the Code**
  ```javascript
  var name = req.query.username;
  var pass = req.query.password;
  db.users.find({ username: name, password: pass });
  ```

- **Fix**
  ```javascript
  bcrypt.compare(candidatePassword, password, cb);
  ```

- **JSON-based SQL Injection**
  - A user can bypass authentication by sending:
  ```javascript
  http://localhost:49090/?user[$gt]=a&pass[$gt]=a
  ```

- **Regular Expression Denial of Service (ReDoS)**
  - Example:
  ```javascript
  db.users.find({ username: { $regex: "..." } });
  ```

### Key Takeaways
- **Gamification of Education**
  - Knowledge is key to delivering secure code
  - Students (of all ages) absorb and retain information better
  - Make learning a fun experience whenever possible

- **Using Code**
  - Always validate input length, structure, and permitted characters
  - Each coding language has its own pitfalls
  - Research and learn a language before using it publicly
  - Remember: Node.js is highly sensitive to CPU-intensive tasks

### Thank You
- **Questions?**
- **Contact Information**
  - Email: [PI:EMAIL]
  - Twitter: [@aashbel]
  - Amit Ashbel