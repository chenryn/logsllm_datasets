# Base 36 and Base 64 Encoding Schemes

## Base 36 Encoding Scheme

### Introduction
Base 36 is a numeral system using 36 as the base. It uses digits 0-9 and letters A-Z (or a-z) to represent values from 0 to 35. This encoding scheme is case-insensitive, meaning that 'XSS', 'xss', and 'XsS' all represent the same value in Base10, which is 43804.

### Example
The number 1294870408610 in Base10 is represented as 'GIUSEPPE' in Base36.

### Real-World Applications
- **Reddit**: Uses Base36 for identifying posts and comments.
- **TinyURL**: Uses Base36 integers as compact, alphanumeric identifiers.

### Conversion Examples
- **PHP**:
  ```php
  $base36 = base_convert("OHPE", 36, 10); // Converts OHPE from Base36 to Base10
  echo $base36; // Outputs: 1142690
  ```

- **JavaScript**:
  ```javascript
  const base36 = parseInt("ohpe", 36); // Converts ohpe from Base36 to Base10
  console.log(base36); // Outputs: 1142690
  ```

## Base 64 Encoding Scheme

### Introduction
Base64 is a binary-to-text encoding scheme that represents binary data in an ASCII string format. It is widely used for transmitting data over media that are designed to handle textual data. Base64 is not an encryption method and should not be used for securing sensitive information.

### Alphabet
The Base64 alphabet consists of:
- Digits [0-9]
- Latin letters [A-Z] and [a-z]
- Plus (+) and slash (/) characters
- Padding character (=)

### Encoding Process
To encode a message in Base64, the algorithm divides the message into groups of 6 bits and converts each group to its corresponding ASCII character using the following table:

| Binary (dec) | Base 64 |
|--------------|---------|
| 000000 (0)   | A       |
| 000001 (1)   | B       |
| 000010 (2)   | C       |
| 000011 (3)   | D       |
| 000100 (4)   | E       |
| 000101 (5)   | F       |
| 000110 (6)   | G       |
| 000111 (7)   | H       |
| 001000 (8)   | I       |
| 001001 (9)   | J       |
| 001010 (10)  | K       |
| 001011 (11)  | L       |
| 001100 (12)  | M       |
| 001101 (13)  | N       |
| 001110 (14)  | O       |
| 001111 (15)  | P       |
| 010000 (16)  | Q       |
| 010001 (17)  | R       |
| 010010 (18)  | S       |
| 010011 (19)  | T       |
| 010100 (20)  | U       |
| 010101 (21)  | V       |
| 010110 (22)  | W       |
| 010111 (23)  | X       |
| 011000 (24)  | Y       |
| 011001 (25)  | Z       |
| 011010 (26)  | a       |
| 011011 (27)  | b       |
| 011100 (28)  | c       |
| 011101 (29)  | d       |
| 011110 (30)  | e       |
| 011111 (31)  | f       |
| 100000 (32)  | g       |
| 100001 (33)  | h       |
| 100010 (34)  | i       |
| 100011 (35)  | j       |
| 100100 (36)  | k       |
| 100101 (37)  | l       |
| 100110 (38)  | m       |
| 100111 (39)  | n       |
| 101000 (40)  | o       |
| 101001 (41)  | p       |
| 101010 (42)  | q       |
| 101011 (43)  | r       |
| 101100 (44)  | s       |
| 101101 (45)  | t       |
| 101110 (46)  | u       |
| 101111 (47)  | v       |
| 110000 (48)  | w       |
| 110001 (49)  | x       |
| 110010 (50)  | y       |
| 110011 (51)  | z       |
| 110100 (52)  | 0       |
| 110101 (53)  | 1       |
| 110110 (54)  | 2       |
| 110111 (55)  | 3       |
| 111000 (56)  | 4       |
| 111001 (57)  | 5       |
| 111010 (58)  | 6       |
| 111011 (59)  | 7       |
| 111100 (60)  | 8       |
| 111101 (61)  | 9       |
| 111110 (62)  | +       |
| 111111 (63)  | /       |

If the total number of bits is not a multiple of 6, null bits are added until the total is both a multiple of 6 and the result length is a multiple of 4. The padding character '=' is used for any trailing null groups.

### Examples
- **Encoding "HEY"**:
  - 1st 6 bits: 01001000 (H)
  - 2nd 6 bits: 01000101 (E)
  - 3rd 6 bits: 01011001 (Y)
  - 4th 6 bits: 000000 (padding)
  - Result: SGVZ

- **Encoding "HI"**:
  - 1st 6 bits: 01001000 (H)
  - 2nd 6 bits: 01001001 (I)
  - 3rd 6 bits: 000000 (padding)
  - 4th 6 bits: 000000 (padding)
  - Result: SEk=

- **Encoding "H"**:
  - 1st 6 bits: 01001000 (H)
  - 2nd 6 bits: 000000 (padding)
  - 3rd 6 bits: 000000 (padding)
  - Result: SA==

### Implementation in Programming Languages
- **PHP**:
  ```php
  $encoded = base64_encode("HEY"); // Encodes "HEY" to Base64
  echo $encoded; // Outputs: SGVZ

  $decoded = base64_decode("SGVZ"); // Decodes "SGVZ" from Base64
  echo $decoded; // Outputs: HEY
  ```

- **JavaScript**:
  ```javascript
  const encoded = btoa("HEY"); // Encodes "HEY" to Base64
  console.log(encoded); // Outputs: SGVZ

  const decoded = atob("SGVZ"); // Decodes "SGVZ" from Base64
  console.log(decoded); // Outputs: HEY
  ```

---

This document provides a comprehensive overview of Base36 and Base64 encoding schemes, including their applications, conversion processes, and implementation examples in PHP and JavaScript. For more detailed information, refer to the provided references and resources.