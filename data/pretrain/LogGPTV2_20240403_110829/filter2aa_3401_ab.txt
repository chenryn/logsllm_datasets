10000
16
10
g
10001
17
11
h
10010
18
12
i
10011
19
13
j
10100
20
14
k
10101
21
15
l
10110
22
16
m
10111
23
17
n
11000
24
18
o
11001
25
19
p
binary
dec
hex
36
11010
26
1a
q
11011
27
1b
r
11100
28
1c
s
11101
29
1d
t
11110
30
1e
u
11111
31
1f
v
100000
32
20
w
100001
33
21
x
100010
34
22
y
100011
35
23
z
100100
36
24
10
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
Base 36 Encoding Scheme
For example, the number 1294870408610 in Base10 is 
represented in Base36 as GIUSEPPE. 
Remember that it is case-insensitive. So, for example, the 
terms XSS, xss, XsS, etc… have the same representation in 
Base10, 43804.
1.1.1.3.1 Base 36
|  p.26
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
http://www.reddit.com/
http://tinyurl.com/
Base 36 Encoding Scheme
Now the question is, "why should we know this encoding 
scheme?”  The answer is easy, because Base36 is used in 
many real-world scenarios. 
For example, Reddit uses it for identifying both post’s and 
comments, while some URL shortening services like 
TinyURL use Base36 integer as compact, alphanumeric 
identifiers.
1.1.1.3.1 Base 36
|  p.27
http://tinyurl.com/jfvqr
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
Base 36 Encoding Scheme
Another example is if we want to convert OHPE from 
Base36 to decimal, there are different implementations in 
many programming languages.
Let’s see how to do this with PHP and JavaScript.
1.1.1.3.1 Base 36
|  p.28
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
http://www.php.net/manual/en/function.base-convert.php
Base 36 Encoding Scheme: PHP
PHP uses the base_convert() function to convert numbers:
OHPE in Base 10 is 
1.1.1.3.1 Base 36
|  p.29
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
Base 36 Encoding Scheme: JavaScript
JavaScript uses two functions:
•
(1142690).toString(36) 
•
1142690..toString(36) 
// encode
parseInt("ohpe",36) 
// decode
1.1.1.3.1 Base 36
|  p.30
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
Base 64 Encoding Scheme
Base64 is one of the most widespread binary-to-text 
encoding schemes to date. It was designed to allow binary 
data to be represented as ASCII string text. 
It is an encoding scheme, not an encryption one. This is not 
clear to many developers who use Base64 instead of 
encryption to store or transmit sensitive information.
1.1.1.3.2 Base 64
|  p.31
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
http://en.wikipedia.org/wiki/Base64#Implementations_and_history
Base 64 Encoding Scheme
The alphabet of the Base64 encoding scheme is composed 
of digits [0-9] and Latin letters, both upper and lower case 
[a-zA-Z], for a total of 62 values. To complete the character 
set to 64 there are the plus (+) and slash (/) characters. 
Different implementations, however, may use other values 
for the latest two characters and the one used for padding 
(=). For a complete list look here.
1.1.1.3.2 Base 64
|  p.32
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
Base 64 Encoding Scheme
To encode a message in Base 64, the algorithm divides the 
message into groups of 6 bits* and then converts each 
group, with the respective ASCII character, following the 
conversion table. 
*That's why the allowed characters are 64 (26 = 64).
1.1.1.3.2 Base 64
|  p.33
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
Base 64 Encoding Scheme
1.1.1.3.2 Base 64
|  p.34
Binary (dec)
Base 64 
000000 (0)
A
000001 (1)
B
000010 (2)
C
000011 (3)
D
000100 (4)
E
000101 (5)
F
000110 (6)
G
000111 (7)
H
001000 (8)
I
001001 (9)
J
001010 (10)
K
001011 (11)
L
001100 (12)
M
001101 (13)
N
001110 (14)
O
001111 (15)
P
Binary (dec)
Base 64
010000 (16)
Q
010001 (17)
R
010010 (18)
S
010011 (19)
T
010100 (20)
U
010101 (21)
V
010110 (22)
W
010111 (23)
X
011000 (24)
Y
011001 (25)
Z
011010 (26)
a
011011 (27)
b
011100 (28)
c
011101 (29)
d
011110 (30)
e
011111 (31)
f
Binary (dec)
Base 64
100000 (32)
g
100001 (33)
h
100010 (34)
i
100011 (35)
j
100100 (36)
k
100101 (37)
l
100110 (38)
m
100111 (39)
n
101000 (40)
o
101001 (41)
p
101010 (42)
q
101011 (43)
r
101100 (44)
s
101101 (45)
t
101110 (46)
u
101111 (47)
v
Binary (dec)
Base 64
110000 (48)
w
110001 (49)
x
110010 (50)
y
110011 (51)
z
110100 (52)
0
110101 (53)
1
110110 (54)
2
110111 (55)
3
111000 (56)
4
111001 (57)
5
111010 (58)
6
111011 (59)
7
111100 (60)
8
111101 (61)
9
111110 (62)
+
111111 (63)
/
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
Base 64 Encoding Scheme
If the total number of bits is not a multiple of 6, then null bits 
need to be added until the total is both a multiple of 6 and the 
result length a multiple of 4. 
Then, if the latest group is 'null' (000000), the respective 
encoding value is = but, if the trailing "null groups" are two they 
will be encoded as ==.
Let’s check out some examples.
1.1.1.3.2 Base 64
|  p.35
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
Base 64 Encoding Scheme
To encode the term "HEY" we have:
1.1.1.3.2 Base 64
|  p.36
█ 1st 6 bits
█ 2nd 6 bits
█ 3rd 6 bits
█ 4th 6 bits
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
Base 64 Encoding Scheme
To encode the term "HI" we have:
1.1.1.3.2 Base 64
|  p.37
█ 1st 6 bits
█ 2nd 6 bits
█ 3rd 6 bits
█ Padding
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
Base 64 Encoding Scheme
To encode the char "H" we have:
1.1.1.3.2 Base 64
|  p.38
█ 1st 6 bits
█ 2nd 6 bits
█ Padding
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
Base 64 Encoding Scheme
Naturally, due to its popularity, there are many encoding / 
decoding implementations of Base64 in a variety of 
different programming languages. 
Let’s see some of them.
1.1.1.3.2 Base 64
|  p.39
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
https://www.php.net/base64_encode
https://www.php.net/base64_decode
Base 64 Encoding Scheme: PHP
PHP uses base64_encode and base64_decode functions to 
encode/decode data based on MIME Base 64 implementation:
 //Encode
//Decode