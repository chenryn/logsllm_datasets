than the original OT-based PSI protocol has for σ = 32.
Communication (Tab. 8) The amount of communica-
tion performed during protocol execution is often more
limiting than the required computation power, since the
latter can be scaled up more easily by using more ma-
chines. The naive hashing approach has the lowest com-
munication among all protocols, followed by the server-
aided solution of [15]. Among the secure two-party PSI
protocols, the DH-based ECC protocol of [18] has the
In the setting for n = 224 el-
lowest communication.
ements of short bit-length σ = 32 bit, our OT-Phasing
protocol nearly achieves the same complexity as the
DH-based ECC protocol, which is due to the use of
8.2.2 Experiments with Different Input Sizes
For examining the setting where the two parties have
different input sizes, we set n1 ∈ {216,220,224} and
n2 ∈ {28,212} and run the protocols on all combinations
such that n2 (cid:19) n1. Note that we excluded the origi-
nal OT-based PSI protocol of [22] from the compari-
son, since the bin size maxβ becomes large when β (cid:19) n
and the memory requirement when padding all bins to
maxβ elements quickly exceeded the available memory.
In this setting, unlike the equal input sizes experiments
in §8.2.1, we use h = 2 hash functions instead of h = 3,
528  24th USENIX Security Symposium 
USENIX Association
14
Setting
Protocol
Naive Hashing(∗) §3.1
Server-Aided(∗) [15]
DH-based ECC [18]
OT-Phasing §6
Bit-length σ = 32
Bit-length σ = 64
Bit-length σ = 128
n1 = 216
33
74
28,387
360
555
571
n2 = 28
n1 = 220
464
680
421,115
906
1,506
1,942
LAN
n1 = 224
7,739
8,935
6,848,215
9,465
15,789
21,843
n1 = 216
35
75
29,810
369
581
649
n2 = 212
n1 = 220
466
696
422,712
2,949
6,146
7,291
n1 = 224
7,836
8,965
6,849,534
12,634
22,368
31,932
WAN
n2 = 28
n1 = 216
560
629
112,336
n1 = 220
2,775
2,923
1,743,400
n2 = 212
n1 = 216
562
731
111,642
n1 = 220
2,797
2,951
1,753,595
2,139
3,349
3,352
4,780
6,879
7,999
3,143
3,923
4,391
11,399
20,345
23,209
Table 9: Run-time in ms for PSI protocols with n2 (cid:30) n1 elements. (Protocols with (∗) are in a different security model.)
Protocol
Naive Hashing(∗) §3.1
Server-Aided(∗) [15]
DH-based ECC [18]
OT-Phasing §6
Bit-length σ = 32
Bit-length σ = 64
Bit-length σ = 128
n1 = 216
0.5
1.0
2.5
1.1
1.1
1.1
n2 = 28
n1 = 220
8.5
16.0
40.5
18.1
18.1
18.2
n1 = 224
144.0
256.0
656.0
288.1
288.1
288.2
n1 = 216
0.5
1.1
2.7
2.0
3.2
3.5
n2 = 212
n1 = 220
9.0
16.1
41.1
18.9
20.1
20.4
n1 = 224
152.0
256.1
664.1
Asymptotic [bit]
n1(cid:31)
(n1 + n2 +|X ∩Y|)κ
(n1 + n2)ϕ + n1(cid:31)
320.9
322.1
322.7
4.8n2κ((cid:27)
4.8n2κ((cid:27)
4.8n2κ((cid:27)
8
σ−(cid:25)log2(2.4n2)(cid:24)
σ−(cid:25)log2(2.4n2)(cid:24)
σ−(cid:25)log2(2.4n2)(cid:24)
8
8
(cid:23)) +2n 1(cid:31)
(cid:23)) +2n 1(cid:31)
(cid:23)) +2n 1(cid:31)
Table 10: Communication in MB for special purpose PSI protocols with n2 (cid:30) n1 elements. (cid:31) = λ + log2(n1) +
log2(n2). Assuming intersection of size 1/2 · n2 for the TTP-based protocol. (Protocols with (∗) are in a different
security model.)
since this results in less total computation and commu-
nication (cf. §6.2). Since we use h = 2 hash functions,
we also increase the number of bins from 1.2n2 to 2.4n2.
Furthermore, we do not use a stash for our OT-Phasing
protocol with different input sizes, since the stash would
greatly increase the overall communication. However,
not using a stash reveals some information on P2’s set
(cf. §7). We show how to secure our protocol at a much
lower cost by increasing the number of bins in the full
version [21].
Run-Time (Tab. 9) Similar to the results for equal set
sizes, the naive hashing protocol is the fastest protocol
for all parameters. The server-aided protocol of [15]
is the second fastest protocol but it scales better than
the naive hashing protocol for increasing number of ele-
ments. The best scaling protocol is our OT-Phasing pro-
tocol. It achieves the same performance as the server-
aided protocol for n2 = 28, n1 = 224 with short bit-length
σ = 32. For n1 = 224 its run-time is at most twice that of
the server-aided protocol in both network settings.
When switching to the WAN setting, the run-times of
all protocols are increased by a factor 4-6 while the rela-
tive performance between the protocols remains similar,
analogously to the equal set size experiments.
aided protocol of [15] and has only two times the com-
munication of the naive hashing protocol for all bit-
lengths. Furthermore, our OT-Phasing protocol requires
a factor of 2-3 less communication than the DH-based
ECC protocol of [18] for nearly all parameters. The low
communication of our OT-Phasing protocol for unequal
set sizes is due to the low number of OTs performed.
Acknowledgements: We thank Elaine Shi and the
anonymous reviewers of USENIX Security 2015 for
their helpful comments. This work was supported by the
European Union’s 7th Framework Program (FP7/2007-
2013) under grant agreement n. 609611 (PRACTICE)
and via a Marie Curie Career Integration Grant, by
the DFG as part of project E3 within the CRC 1119
CROSSING, by the German Federal Ministry of Educa-
tion and Research (BMBF) within EC SPRIDE, by the
Hessian LOEWE excellence initiative within CASED,
by a grant from the Israel Ministry of Science and Tech-
nology (grant 3-9094), by a Magneton grant of the Israeli
Ministry of Economy, by the Israel Science Foundation
(Grant No. 483/13), and by the Israeli Centers of Re-
search Excellence (I-CORE) Program (Center No. 4/11).
References
Communication (Tab. 10) As expected,
the naive
hashing solution again has the lowest communica-
tion overhead. Surprisingly, our OT-Phasing protocol
achieves nearly the same communication as the server-
[1] Y. Arbitman, M. Naor, and G. Segev. Backyard
cuckoo hashing: Constant worst-case operations
with a succinct representation. In FOCS’10, pages
787–796. IEEE, 2010.
USENIX Association  
24th USENIX Security Symposium  529
15
[2] G. Asharov, Y. Lindell, T. Schneider,
and
M. Zohner. More efﬁcient oblivious transfer
and extensions for faster secure computation.
In
CCS’13, pages 535–548. ACM, 2013.
[3] E. De Cristofaro and G. Tsudik. Practical private
set intersection protocols with linear complexity.
In FC’10, volume 6052 of LNCS, pages 143–159.
Springer, 2010.
[4] E. De Cristofaro and G. Tsudik. Experimenting
with fast private set intersection. In TRUST’12, vol-
ume 7344 of LNCS, pages 55–73. Springer, 2012.
[5] D. Demmler, T. Schneider, and M. Zohner. ABY
- A framework for efﬁcient mixed-protocol secure
two-party computation. In NDSS’15. The Internet
Society, 2015.
[6] M. Dietzfelbinger, A. Goerdt, M. Mitzenmacher,
Tight
A. Montanari, R. Pagh, and M. Rink.
thresholds for cuckoo hashing via XORSAT.
In
ICALP’10, volume 6198 of LNCS, pages 213–225.
Springer, 2010.
[7] C. Dong, L. Chen, and Z. Wen. When private set
intersection meets big data: An efﬁcient and scal-
able protocol. In CCS’13, pages 789–800. ACM,
2013.
[8] S. Even, O. Goldreich, and A. Lempel. A random-
ized protocol for signing contracts. Communmuni-
cations of the ACM, 28(6):637–647, 1985.
[9] M. J. Freedman, C. Hazay, K. Nissim, and
set-intersection with
In Journal of Cryptol-
B. Pinkas.
Efﬁcient
simulation-based security.
ogy, pages 1–41. Springer, October 2014.
[10] M. J. Freedman, K. Nissim, and B. Pinkas. Efﬁ-
cient private matching and set intersection. In EU-
ROCRYPT’04, volume 3027 of LNCS, pages 1–19.
Springer, 2004.
[11] O. Goldreich, S. Micali, and A. Wigderson. How to
play any mental game or a completeness theorem
for protocols with honest majority.
In STOC’87,
pages 218–229. ACM, 1987.
[12] Y. Huang, D. Evans, and J. Katz. Private set in-
tersection: Are garbled circuits better than custom
protocols? In NDSS’12. The Internet Society, 2012.
[13] B. A. Huberman, M. Franklin, and T. Hogg. En-
hancing privacy and trust in electronic communi-
ties. In EC’99, pages 78–86. ACM, 1999.
[14] S. Jarecki and X. Liu. Efﬁcient oblivious pseu-
dorandom function with applications to adaptive
OT and secure computation of set intersection. In
TCC’09, volume 5444 of LNCS, pages 577–594.
Springer, 2009.
[15] S. Kamara, P. Mohassel, M. Raykova,
and
S. Sadeghian. Scaling private set intersection to
billion-element sets.
In FC’14, volume 8437 of
LNCS, pages 195–215. Springer, 2014.
[16] A. Kirsch, M. Mitzenmacher, and U. Wieder. More
robust hashing: Cuckoo hashing with a stash. SIAM
Journal of Computing, 39(4):1543–1561, 2009.
[17] V. Kolesnikov and R. Kumaresan.
Improved
OT extension for transferring short secrets.
In
CRYPTO’13 (2), volume 8043 of LNCS, pages 54–
70. Springer, 2013.
[18] C. Meadows.
A more efﬁcient cryptographic
matchmaking protocol for use in the absence of
a continuously available third party.
In S&P’86,
pages 134–137. IEEE, 1986.
[19] R. Pagh and F. F. Rodler. Cuckoo hashing. In Euro-
pean Symposium on Algorithms (ESA’01), volume
2161 of LNCS, pages 121–133. Springer, 2001.
[20] R. Pagh and F. F. Rodler. Cuckoo hashing. Journal
of Algorithms, 51(2):122–144, 2004.
[21] B. Pinkas, T. Schneider, G. Segev, and M. Zohner.
Phasing: Private set intersection using permutation-
based hashing. Cryptology ePrint Archive, Re-
port 2015/634, 2015. http://eprint.iacr.or
g/2015/634.
[22] B. Pinkas, T. Schneider, and M. Zohner. Faster
private set intersection based on OT extension.
In USENIX Security Symposium, pages 797–812.
USENIX, 2014.
[23] M. Raab and A. Steger. “Balls into bins” - a simple
and tight analysis. In RANDOM’98, volume 1518
of LNCS, pages 159–170. Springer, 1998.
[24] X. Shaun Wang, C. Liu, K. Nayak, Y. Huang, and
E. Shi.
iDASH secure genome analysis competi-
tion using ObliVM. Cryptology ePrint Archive,
Report 2015/191, 2015. http://eprint.iacr.
org/2015/191.
[25] A. C. Yao. How to generate and exchange secrets.
In FOCS’86, pages 162–167. IEEE, 1986.
530  24th USENIX Security Symposium 
USENIX Association
16