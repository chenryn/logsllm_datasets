we can infer the levels of the lattice from the mashup itself.
The origins of the components of the mashup become the
levels of the security lattice. The security lattice is used
to label nodes in the Document Object Model-tree (DOM-
tree), a tree representation of the underlying document. To
allow a controlled release of information we also propose a
declassiﬁcation mechanism.
2.1
Information lattice
We draw on the information lattice [16, 21] in our model
of secure information ﬂow. The lattice model is a natural
ﬁt for modeling both conﬁdentiality and integrity. In gen-
eral, a lattice is a partially ordered set with join ((cid:116)) and
meet ((cid:117)) operations for computing the least upper bound
and the greatest upper bound, respectively. The security lat-
tice is based on a security order on security levels, elements
of the lattice. The security order expresses the relative re-
strictiveness of using information at a given security levels.
Whenever two elements (cid:96)1 and (cid:96)2 are ordered (cid:96)1 (cid:118) (cid:96)2, then
the usage of information at level (cid:96)2 is at least as restrictive
as usage of information at level (cid:96)1. More restrictive levels
correspond to higher conﬁdentiality and to lower integrity,
in the respective cases of modeling conﬁdentiality and in-
tegrity. The intention is that higher conﬁdentiality (lower
integrity) information does not aﬀect lower conﬁdentiality
(higher integrity) in a secure system.
The lattice operators (cid:116) and (cid:117) are useful for computing the
security level of information that is produced by combining
information at diﬀerent security levels. A simple example
of an information lattice is a lattice with two elements low
and high, where low (cid:118) high and high (cid:54)(cid:118) low . These lev-
els may correspond to public and secret information in a
conﬁdentiality setting and to malicious and non-malicious
information in an integrity setting.
2.2 The domain lattice
The elements of the security lattice are simply sets of
origins ordered by the set relation. At the bottom of lat-
tice, denoted by ⊥, is the empty set. Single origins (i.e.,
singleton origin sets) form a ﬂat structure.
In the nota-
tion above, origins o1, . . . , on correspond to levels (cid:96)1, . . . , (cid:96)n,
where ⊥ (cid:118) (cid:96)1,. . . ,⊥ (cid:118) (cid:96)n so that for any (cid:96) and i we have
(cid:96) (cid:54)= ⊥ & (cid:96) (cid:118) (cid:96)i =⇒ (cid:96) = (cid:96)i.
When content from one origin is combined with content
from another origin, the level of the result is the join of the
origins. Indeed, the levels in the lattice correspond to sets of
origins (cid:96) = {o1, . . . , on}, where (cid:96) (cid:118) (cid:96)(cid:48) if and only if we have
the set inclusion (cid:96) ⊆ (cid:96)(cid:48). This allows data to be combined and
used within the browser and still prevents it from leaking to
external targets.
DOM-tree nodes (including the aﬃliated variables) are
labeled with security levels when a new document is loaded
from an origin server. The origin of the document is the base
level of the lattice. As the document is being parsed and
the DOM-tree is built, we use the origins of the contents in
the document for labeling new objects. All HTML tags that
have an src attribute can fetch content (e.g., images, scripts,
or style sheets) from any origin, which will be incorporated
into the current document.
One interesting aspects of the lattice model is the treat-
ment of subdomains. The Same Origin Policy treats sub-
domains the in same way as any other domain, with the
exception of one case. In current browsers one may change
the document.domain property of a document loaded from
a subdomain to the domain it is a subdomain of. When this
is done, the subdomain is considered as a part of the domain.
This means that the subdomain can access and can be ac-
cessed from any document loaded from the domain, since
they are now considered to be of the same origin according
to the SOP.
Translating this behavior to the security lattice would
mean a merge of the origins or an uncontrolled declassiﬁ-
cation of all contents belonging to either the subdomain or
the domain. This behavior can be supported using a lattice-
based approach, but since we aim at a more ﬁne-grained
control over information ﬂow in the browser, we prefer that
subdomains are treated as any other domains.
2.2.1 Examples
The examples below clarify how the lattice model reﬂects
security goals in diﬀerent contexts.
Single domain.
We start with a simple example of a page, loaded from a
single domain, that does not reference any third-party con-
tent. This represents most regular pages that only contain
content from the origin domain. In this case, the interest-
ing part of the lattice consists only of that domain and the
bottom label, as can be seen in Figure 2.
Simple mashup with two domains.
In the scenarios of Dangerous Goods and Advertising from
Section 1.6, we have content from two origin domains com-
bined to create a mashup. Figure 3 shows the lattice for
the Advertising scenario. Information ﬂow between the con-
tent provider and advertisement provider is disallowed. The
Dangerous Goods scenario features declassiﬁcation of cer-
tain content from one domain to the other. This is a one-way
ﬂow of information, portrayed in Figure 4.
As we elaborate in Section 3, each origin can provide a
set of escape hatches that speciﬁes what information can
be released and to what origin.
In the Dangerous Goods
scenario, this corresponds to the coordinates of the truck.
Complex mashup with multiple domains.
More complex mashups, such as the iGoogle portal or the
social networking site Facebook, include content from multi-
ple domains. In such mashups, when a content is combined
from two origins, the level of the result is raised to the join
of the levels. Figure 5 shows the lattice for a mashup com-
bining content from three origins.
2.3 Embedded third-party content
When communication between the content and its origin
is allowed by default, as is the case with the SOP, one needs
to identify how third-party content, that is included in a
document, is labeled.
In browsers today, any third-party content included in a
document is considered to have the document’s origin re-
gardless of the actual origin of the included content. This
turns problematic in a mashup setting, because the third-
party content may be freely send to the document’s origin.
Instead, we associate the third-party content with its actual
origin. This choice has an important security implication:
information has to be declassiﬁed before it is communicated
to other origins. That is, third-party content may not be
sent to the document’s origin without being declassiﬁed by
the third-party.
2.4 Declassiﬁcation
While mashups without cross-domain communications ex-
ist (cf. the simple version of an advertisement scenario),
ﬂexible information ﬂow within mashups is often desired
(cf. combination of Craigslist and Dangerous Goods with
Google Maps). It is crucial to have a permissive and yet se-
cure cross-domain mechanism that does not allow one com-
ponent to leak information from another without an explicit
permission. How do we ensure that information release in-
tended by one component is not abused by another compo-
nent or, perhaps, by a malicious integrator? For example,
one component of a mashup may agree to release a piece
of data but only if is averaged with a piece of data of an-
other component. Or, an email service agrees to release the
addresses from the user’s contact list but only to a certain
type of social network web sites. What we seek is a frame-
work, where individual components may declare what they
are willing to release. The information may include data
that is controlled by other components, but the actual re-
lease is only allowed if all the owner components agree on
releasing the data. This brings us to the next section, where
Figure 2: Single domain lattice
Figure 3: Two-domain mashup lattice
Figure 4: Declassiﬁcation
Figure 5: Three-domain mashup lattice
!"!"!"#$!$#$!$!"#$!$#$!$!"#"$%!"#%!"$%#"$%!%#%$%!%we formalize this kind of policies.
3. FORMAL POLICY
Our formal security policy is an extension of the delim-
ited release [31] policy to multiple origins. Delimited release
deﬁnes the declassiﬁcation policy as a set of escape hatches
which declare what information about secrets can be declas-
siﬁed. In a multiple-origin setting, the policy declaration is
spread across multiple origins. We let every origin deﬁne its
set of escape hatches. This reﬂects the origin’s own view on
declassiﬁcation. An origin can freely declassify expressions
that are as restrictive as its own level, but is limited in de-
classiﬁcation of expressions that involve other origins. In or-
der for such declassiﬁcations to be allowed, a corresponding
declaration has to be present in the declassiﬁcation policies
of the other involved origins. The rest of this section speci-
ﬁes how a composite declassiﬁcation policy is derived based
on the individual policies, and deﬁnes our security condition
which we dub composite delimited release.
An escape hatch is represented as a pair (e, (cid:96)), where e is
an expression to be declassiﬁed and (cid:96) is a target level of the
declassiﬁcation. For a given origin o, denote by E(o) a set
of escape hatches of that origin.
Consider a simple example of declassifying expression x +
y, where x has a security level of origin A and y has a security
level of origin B. We want to allow release of x + y only if
both A and B agree on the declassiﬁcation of x + y. We
call all origins willing to declassify a particular expression
declassifying origins or declassiﬁers.
Definition 1
(Declassifiers). Given an expression e
that is to be declassiﬁed to a target security level (cid:96), and a
set of origins o1 . . . on with respective declassiﬁcation poli-
cies E(o1) . . . E(on), deﬁne declassifying origins for e to (cid:96)
as follows:
declassiﬁers(e, (cid:96), o1 . . . on) = {oi | (e, (cid:96)
) ∈ E(oi) ∧ (cid:96)
(cid:48) (cid:118) (cid:96)}
(cid:48)
The expression e is simply looked up in the set of escape
hatches of E(oi) in the deﬁnition above.
Note that declassiﬁers(e, (cid:96), o1 . . . on) by itself corresponds
to a security level. We next deﬁne when a declassiﬁcation
is allowed. Informally, when an expression e is declassiﬁed
from a source level (cid:96)source to a target level (cid:96)target , there needs
to be enough origins willing to declassify that expression.
Formally, this is captured by the following deﬁnition.
Definition 2
(Allowed declassifications). For an
expression e of level (cid:96)source , declassiﬁcation of e to a target
level (cid:96)target is allowed if
(cid:96)source (cid:118) (cid:96)target (cid:116) declassiﬁers(e, (cid:96)target , o1 . . . on)
We use notation allowed (e, (cid:96)source , (cid:96)target , O) for allowed de-
classiﬁcations, where O abbreviates a set of origins o1 . . . on.
{B} (cid:116) {A}. However, declassifying x + y to ⊥ is disallowed,
because the inequality for allowed declassiﬁcations does not
hold if the target level is ⊥: {A, B} (cid:54)(cid:118) ⊥ (cid:116) {A}.
An example scenario for this kind of policy is a challenge-
response pattern, where B poses the challenge y, A performs
some computation with y and A’s private value x and de-
classiﬁes the result of the computation to B.
Composite policy.
We now show how a composite declassiﬁcation policy can
be constructed from individual policies of every origin.
Definition 3. Given origins O, deﬁne by Compose(O)
escape hatches (e, (cid:96)) that are allowed according to the declas-
siﬁcation policies of O:
Compose(O) = {(e, (cid:96)) | (e, (cid:96)
(cid:48)
) ∈ ˜E(o)
for some (cid:96)
(cid:48)
and o ∈ O ∧ allowed (e, Γ(e), (cid:96), O}
Note that Compose(o1 . . . on) is monotonic in origins. Adding
a new origin never makes declassiﬁcation policy more restric-
tive.
Composite delimited release.
Based on the deﬁnition of composite policy, we can now
extend the condition of delimited release [31] to a setting
with multiple origins.
We associate every object x in the browser model with a
security level Γ(x), where Γ is a mapping from object names
to security levels. We model the browser as a transition
system (cid:104)S,(cid:55)→(cid:105), where S ranges over possible states s, and
(cid:55)→ deﬁnes transitions between states. We denote by s(x)
the value of a variable x in a state s, and lift this notation
to values of expressions in a given state. Denote by ∼(cid:96)
equivalence of two states up to a level (cid:96):
s1 ∼(cid:96) s2 (cid:44) ∀x . Γ(x) (cid:118) (cid:96) . s1(x) = s2(x)
We write s ⇓ s(cid:48) whenever s(cid:48) is a terminal state in a se-
quence of transitions s (cid:55)→ s1 . . . (cid:55)→ s(cid:48).
For a set of escape hatches, we deﬁne indistinguishability
of states up to a security level (cid:96) based on this set of escape
hatches: