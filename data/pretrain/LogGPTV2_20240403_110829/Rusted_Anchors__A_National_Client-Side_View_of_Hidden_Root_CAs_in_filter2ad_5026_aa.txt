title:Rusted Anchors: A National Client-Side View of Hidden Root CAs in
the Web PKI Ecosystem
author:Yiming Zhang and
Baojun Liu and
Chaoyi Lu and
Zhou Li and
Haixin Duan and
Jiachen Li and
Zaifeng Zhang
Rusted Anchors: A National Client-Side View of Hidden Root
CAs in the Web PKI Ecosystem
Yiming Zhang1,2, Baojun Liu1 !, Chaoyi Lu1,3, Zhou Li4
Haixin Duan1,5 !, Jiachen Li1 and Zaifeng Zhang3
1 Tsinghua University, China 2 Beijing National Research Center for Information Science and Technology, China
3 360Netlab, China 4 University of California, Irvine, USA 5 QI-ANXIN Technology Research Institute, China
ABSTRACT
HTTPS secures communications in the web and heavily relies on
the Web PKI for authentication. In the Web PKI, Certificate Author-
ities (CAs) are organizations that provide trust and issue digital
certificates. Web clients rely on public root stores maintained by
operating systems or browsers, with hundreds of audited CAs as
trust anchors. However, as reported by security incidents, hidden
root CAs beyond the public root programs have been imported into
local root stores, which allows adversaries to gain trust from web
clients.
In this paper, we provide the first client-side, nation-wide view of
hidden root CAs in the Web PKI ecosystem. Through cooperation
with a leading browser vendor, we analyze certificate chains in
web visits, together with their verification statuses, from volunteer
users in 5 months. In total, over 1.17 million hidden root certificates
are captured and they cause a profound impact from the angle
of web clients and traffic. Further, we identify around 5 thousand
organizations that hold hidden root certificates, including fake root
CAs that impersonate large trusted ones. Finally, we highlight that
the implementation of hidden root CAs and certificates is highly
flawed, and issues such as weak keys and signature algorithms are
prevalent. Our findings uncover that the ecosystem of hidden root
CAs is massive and dynamic, and shed light on the landscape of
Web PKI security. Finally, we call for immediate efforts from the
community to review the integrity of local root stores.
CCS CONCEPTS
• Security and privacy→ Web protocol security; Authorization;
Browser security; • Networks→ Web protocol security.
KEYWORDS
Certificate Authority; Root Certificate; Web PKI
ACM Reference Format:
Yiming Zhang1,2, Baojun Liu1 !, Chaoyi Lu1,3, Zhou Li4, Haixin Duan1,5 !,
Jiachen Li1 and Zaifeng Zhang3. 2021. Rusted Anchors: A National Client-
Side View of Hidden Root CAs in the Web PKI Ecosystem. In Proceedings of
the 2021 ACM SIGSAC Conference on Computer and Communications Security
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea.
© 2021 Association for Computing Machinery.
ACM ISBN 978-1-4503-8454-4/21/11...$15.00
https://doi.org/10.1145/3460120.3484768
(CCS ’21), November 15–19, 2021, Virtual Event, Republic of Korea. ACM, New
York, NY, USA, 15 pages. https://doi.org/10.1145/3460120.3484768
1 INTRODUCTION
HTTPS provides encrypted communication and authentication
mechanisms between web servers and clients, and is increasingly
adopted on the Internet. Authentication between peers is powered
by digital certificates [19], and the issuance, management and re-
vocation of certificates heavily rely on a set of entities, systems
and policies, which are jointly referred to as the Web Public Key
Infrastructure (PKI). In the Web PKI trust model, digital certificates
are typically issued to websites by organizations called Certificate
Authorities (CAs). A small group of CAs (termed as root CAs) serve
as trust anchors in the Web PKI ecosystem, such that certificates
signed by them and subordinate organizations can pass verification.
Currently, several mainstream operating systems and browser
vendors maintain public lists of trusted root CAs, including Mi-
crosoft [2], Mozilla [57] and Apple [40]. The behaviors of public
CAs should undergo strict evaluation and regular audit [19, 33, 53],
and CAs can be removed from trusted lists upon security incidents
like certificate mis-issuance (e.g., ipS [69] in 2009, Trustwave [68] in
2012 and CNNIC [32] in 2015). For digital certificates to be verified,
operating systems are usually pre-installed with a local root CA
store that are copies from the public root programs. As a result,
certificate chains that link to root CAs beyond local stores will be
rejected by web clients.
However, recent security incidents and studies show that the
management of local root stores can be the "Achilles’ heel" of Web
PKI security. By injecting self-built root certificates into local root
stores, local software such as anti-virus and parent-control applica-
tions creates a man-in-the-middle proxy to filter SSL/TLS-encrypted
traffic [21]. This approach can also be used by government agencies
or malware, in order to monitor web users’ online behaviors [20, 58].
For instance, reports in 2019 show that citizens in Kazakhstan were
forced to import government-built CAs on their devices [58].
In this study, we term root CAs that are not trusted by public root
programs as “hidden” root CAs, because they are absent from the
lists and are not publicly visible. Particularly, we focus on hidden
root certificates that have been imported into local root stores (i.e.,
have gained trust from web clients). Certificate issuance of hidden
root CAs is usually not audited, allowing them to arbitrarily issue
forged certificates and intercept secure connections, which breaks
authentication and poses security threats [58]. The ecosystem of
hidden root CAs have not been well-studied in literature, because
it requires a client-side view of local root stores, thus existing cer-
tificate datasets (including active datasets [26, 38, 44] and passive
datasets [6, 7, 54]) are not suitable for this task.
Session 5B: PKI and Access Control CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1373Research questions. In this paper, we report the first measure-
ment study that sheds light on a nation-wide ecosystem of hidden
root CAs. We aim at answering a set of research questions that
are critical to understanding their security impact and operational
flaws, including: How many web clients witness and actively trust
hidden root CAs? How much HTTPS traffic associates with certificate
chains signed by hidden root CAs? Who are operating the hidden root
CAs? And finally, are there implementation flaws of hidden root CAs
and certificates signed by them?
Our Approach. Seeking answers to these questions is made possi-
ble by cooperating with 360 Secure Browser [46], a leading browser
vendor in China with more than 100 million monthly active users.
Through careful design, the browser collects a small portion of cer-
tificate chains together with their client-side verification statuses
from web visits of millions of volunteers (see Section 3.1). From
certificate data collected during Feb and Jun 2020 (5 months), we
manually build filtering criteria from the X.509 standard to iden-
tify hidden root certificates. We also design and implement a suite
of automated methodology that groups root certificates by their
subject names (see Section 3.2), and then classify their usage.
Major findings. Our research reports several critical observations
on the hidden root CAs ecosystem. In general, the ecosystem is
dynamic and updating, with new hidden root CAs emerging and
quickly getting trusted by web clients. We identify 1.17 million
hidden root certificates that have been imported into local root stores
of web clients. Based on their subject information, we identify 5,005
certificate groups, and certificates in each group come from the
same organization. The impact of hidden root CAs can be profound,
as they are witnessed in 0.54% of all web connections, affecting
5.07 million web clients and putting security connections at risk of
interception.
Besides self-built root CAs of enterprises and local software, we
also uncover a large number of fake root CAs that impersonate
trusted ones to evade detection. For example, they use homoglyphs
to replace characters in authentic names (e.g., Verislgn with an
“l” and NetWork with an upper-case “W”). While not discovered by
previous works at scale, we show that fake root CAs are highly
trusted by web clients and pose security threats to up to 2.7 million
web clients.
As for operational flaws, we find that the security status of hidden
root CAs and certificates are worrisome: public key sharing, abuse
of wildcards and long validity period are prevalent. More than 87.3%
of hidden root certificates and 99.9% of leaf certificates that they sign
violate at least one X.509 standard requirements. In particular, 97%
of leaf certificates issued by hidden CAs use weak keys, increasing
their chances of being compromised.
Scope of study. In this paper, we aim to uncover a nation-wide
ecosystem of hidden root CAs and certificates in the Web PKI from
web clients’ perspective. While not included by public root pro-
grams, such root certificates have been trusted by web clients
(e.g., through importing into local root stores [21] or public key-
pinning [30]). Security threats are thus raised since secure web
connections can be intercepted. We fill this knowledge gap by ana-
lyzing large-scale certificate data and verification statuses.
Figure 1: Snippet of an X.509 Version 3 certificate
2 BACKGROUND AND RELATED WORK
Below we provide background on the trust model and entities of
the Web PKI, particularly on root CAs and certificates. We also
provide the definition of the hidden root CA ecosystem, and present
previous works relevant to our study.
2.1 Web PKI Infrastructure
The Public Key Infrastructure (PKI) provides authentication mecha-
nisms between communication peers and is heavily relied on by
secure Internet protocols (e.g., TLS). Specifically, the Web PKI refers
to systems and policies that manage X.509 certificates issued to
websites, such as Certificate Authorities (CA).
Trust model and root stores. In the trust model of the Web PKI,
Certificate Authorities (CAs) are organizations that issue digital
certificates to other entities. On top of the model are root CAs that
hold self-signed root certificates. For flexibility and security consid-
erations, root CAs often delegate their signing abilities by issuing
intermediate certificates to other organizations [9, 29], which in
turn sign leaf certificates to websites. The bundle of a leaf certificate
and its signing certificates builds a certificate chain, linking the leaf
certificate to a root certificate.
For web clients, a leaf certificate passes verification only if it
has a valid chain to a root certificate that presents in its local root
store. Local root stores are usually pre-installed copies of public root
stores maintained by browsers and operating systems. Due to their
significant importance, the included root CAs should undergo strict
evaluation (e.g., by public root store policies [33]) and regular audit
(e.g., through Certificate Transparency [12]), and can be revoked
upon security incidents such as certificate misissuance [32, 68, 69].
In academic and industrial best security practice, public root
stores maintained by Mozilla [57], Microsoft [2] and Apple [40] are
most commonly adopted [5, 6, 21, 23, 65]. As of Sept. 2020, 590 root
certificates are included by at least one of the three programs.
X.509 certificate format. Most certificates on the web adopt the
X.509 Version 3 format [19] and Figure 1 shows a snippet. The
major fields include distinguished names of its subject and issuer,
its subject public key and signature, its validity period, and cer-
tificate extensions. Specifically for root certificates, additional re-
quirements should apply in order to ensure proper verification of
certificate chains according to the requirements of RFC standards
(e.g., basicConstraints extension must be set to TRUE) [19, 33].
Session 5B: PKI and Access Control CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1374concluded that the presence of middle boxes can heavily reduce
the security of HTTPS connections [28].
To describe the prevalence and reasons of HTTPS interception,
in 2014, Huang et al. actively sent SSL handshakes towards Face-
book web-server and extracted certificates [39]. They found an
interception rate of 0.2%, and manually categorized the root certifi-
cates of hijacked traffic according to their Issuer fields. Following,
in 2016, O’Neill et al. conducted similar experiments, detected TLS
interception by actively connecting controlled servers, and also
discovered HTTPS hijacking from malware and spam tools based
on information of Issuer fields [56].
Unlike previous works, in this study, we seek to understanding
and characterizing the ecosystem of hidden trust anchors in the client-
end local root stores from a national-wide view, rather than simply
detecting TLS interception behaviors from the perspective of a
handful of websites. As a result, although previous studies have
collected and built various certificate datasets, we find that none
of these datasets could be applied in our study due to the lack of
user-side certificate verification status.
Typically, certificate data are captured by active scanning or
extracted from passive traffic, and could be leveraged to study
certificate mis-issuance by CAs [6, 26, 44] and vulnerability assess-
ment [5, 27, 38].
Specifically, as for active certificate datasets, Holz et al. [38] stud-
ied the X.509 infrastructure by actively scanned Alexa Top Sites
and passively collected traffic from three institutions. Durumeric et
al. [26] completed 110 TLS scans on the entire IPv4 address space
and studied the status of certificate issuance and HTTPS adoption
rates. Following, they published Censys [25], a database constructed
by regular Internet-wide scans, including scans of certificates. Cen-
sys has been leveraged by to measure HTTPS adoption rate [31]
and study certificate revocation strategies [60]. Similarly, in 2016,
Cangialosi et al. released another dataset called Rapid7 [10], which
actively scans certificates in the IPv4 address space every week.
As for passive certificate datasets, ICSI networking group built
SSL Notary [7] that passively extracts certificates from TLS traffic
of ten institutions. SSL Notary has been used to study TLS warn-
ings [5] and trust relationships [6]. In 2017, Acer et al. from Chrome
analyzed certificate compliance errors reported by browser [4]. Sim-
ilarly, another recent work was done by Oakes et al. in 2019, who
harvested and analyzed residential certificate chains by cooperat-
ing with a web monitoring software [54]. In addition, Certificate
Transparency (CT) [35] is now widely supported on the web [61],
which aims to collect and audit all trusted certificates.
However, these datasets cannot be applied in our study. To iden-
tify hidden root certificates in user-side local stores, we need to
collect certificate chains together with their verification statuses
from the view of the client-end. Therefore, datasets collected by
active scans are not suitable, and public passive datasets like Notary
do not contain the verification statuses. We address this challenge
by collaborating with a leading browser vendor and collect certifi-
cate data from real visits of volunteers (Section 3).
3 METHODOLOGY
In this section, we elaborate on our workflow of certificate data
collection and methodology of root certificate grouping. Then, we
also discuss potential ethical concerns before presenting our results.
Figure 2: Overview of Hidden Root CA ecosystem.
These requirements are leveraged in Section 3 to filter root certifi-
cates in our dataset.
2.2 The “Hidden” Root CA Ecosystem
Aside from the hundreds of root CAs in public root stores (i.e.,
Mozilla, Microsoft and Apple), other entities may also function like
root CAs and issue digital certificates. We term these as “hidden”
root CAs and certificates, as they are not visible to public root
programs and are difficult to uncover.
Some well-known sources of hidden root certificates are shown
in Figure 2, including local software (e.g., VPNs), malware [20],
enterprise networks [21] and government agencies [58] self-built
CAs. Unlike trusted ones, hidden root CAs typically do not publish
policies that are reviewed by other organizations. Meanwhile, their
certificate issuance cannot be monitored by systems like Certificate
Transparency [12].
For a web client, trusting hidden root certificates can be risky,