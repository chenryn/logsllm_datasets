𝑖
Figure 3: Our central primitive computes the outer product of two values: (1) a one-hot encoded value H(𝑎) where 𝐸 knows 𝑎
and (2) a value 𝑏. For inputs 𝑎 ∈ {0, 1}𝑛 and 𝑏 ∈ {0, 1}𝑚, 𝐺 sends to 𝐸 2(𝑛 − 1) + 𝑚 ciphertexts. Recall from Section 3.3 that 𝐻 is a
circular correlation robust hash function.
In Section 7, we enumerate a number of useful modules, but we
are confident that we have not found them all. Thus, we provide
a framework for building and using modules: we specify the mod-
ule requirements, and prove that, if met, the module can be used
as a regular gate in GC. Thus GCs can be arbitrarily constructed
from secure modules, without the need for additional proofs. New
modules require proofs; the circuits that use them do not.
5.1 Reveal gates
Our framework introduces a Reveal meta-gate (see Figure 2). Reveal
gates are our framework’s method for revealing cleartext values to
𝐸. The GC may reveal a value to 𝐸 so long as that value is indistin-
guishable from a value drawn from a fixed distribution (more for-
mally, the input and output are together indistinguishable from the
input and the sampled value). To achieve this indistinguishability,
we allow the module designer to specify an arbitrary function that
can apply a mask to the Reveal gate input value. The Reveal gate
samples the mask (which is revealed to 𝐺) from a designer-specified
distribution. In practice, this is achieved by 𝐺 locally sampling the
mask and programming it into the gate.
The Reveal gate produces as (garbled) output both the mask
and the masked value; crucially, it also reveals in cleartext the
masked value to 𝐸 and the mask to 𝐺.4 Because the masked value
is indistinguishable from one drawn from a fixed distribution, our
security proofs can simulate 𝐸’s view5.
4Values are revealed to 𝐸 via color bits; as noted above, 𝐺 selects the mask himself.
5In this work, we only use Reveal gates that each produce a distribution that is identical
to a fixed distribution, not merely indistinguishable. We allow indistinguishability
because it is more flexible and because it is easily proved secure.
Session 2D: Secure Multiparty ComputationCCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea5802
1
, 𝑤(cid:1)𝐺
OneHot.ev(C, x) takes as input a circuit C and a string 𝑥. It outputs a string 𝑦. Each gate in a module is handled as follows:
• For each XOR gate 𝑤2 := 𝑤0 ⊕ 𝑤1 and each one-hot gate 𝑤2 := H(𝑤0) ⊗ 𝑤1, ev applies the appropriate function and stores the
result in 𝑤2. For each constant gate 𝑤0 := Constant(𝑐), ev stores 𝑐 in 𝑤0.
• For each Module 𝑤1 := Module[M](𝑤0), OneHot.ev recursively evaluates M on input 𝑤0 and stores the result in 𝑤1.
• For each Reveal gate 𝑤(cid:1)𝐸
:= Reveal[C, Dmask](𝑤0), OneHot.ev (1) samples a mask 𝛼 ← Dmask, (2) recursively evaluates
C with input (𝑤0, 𝛼), (3) stores the result on wire 𝑤1, and (4) stores 𝛼 on wire 𝑤2. Each Color gate 𝑤1, 𝑤2 := Color(𝑤0) is handled
in the same manner as each Reveal gate except that 𝛼 is drawn uniformly.
OneHot.Gb(1𝜅, C) takes as input a circuit C. It outputs an input encoding string 𝑒, an output decoding string 𝑑, and circuit material 𝑀.
OneHot is a projective garbling scheme [BHR12], so 𝑒 and 𝑑 are standard. When OneHot.Gb is first called, it uniformly draws the global
XOR offset Δ ← {0, 1}𝜅 and sets Δ’s least significant bit to one. To generate 𝑀, OneHot.Gb maintains a garbled share on each circuit
wire. Each gate in a module is handled as follows:
• For each XOR gate 𝑤2 := 𝑤0 ⊕ 𝑤1, OneHot.Gb generates the output sharing by XORing the two input sharings (see Lemma 3.5).
• For each one-hot gate 𝑤2 := H(𝑤0) ⊗ 𝑤1, OneHot.Gb runs 𝐺’s steps as described in Figure 3. When Figure 3 indicates 𝐺 should
• For each constant gate 𝑤0 := Constant(𝑐), OneHot.Gb sets 𝑤0 to 𝑐Δ.
• For each Module, OneHot.Gb recursively garbles.
• For each Reveal gate 𝑤(cid:1)𝐸
:= Reveal[C, Dmask](𝑤0), Gb samples a mask 𝛼 ← Dmask and sets the share 𝑤2 to 𝛼Δ. The
procedure recursively garbles the subcircuit C with appropriate input shares and stores the output shares in 𝑤1. Finally, the
procedure evaluates Color(𝑤1) and attaches the result to 𝑀: informally, this reveals the masked output to 𝐸.
send a message to 𝐸, OneHot.Gb appends the message to 𝑀.
, 𝑤(cid:1)𝐺
• For each Color gate 𝑤1, 𝑤2 := Color(𝑤0), Gb computes Color(𝑤0) and stores Color(𝑤0)Δ in 𝑤2. It then stores 𝑤2 ⊕ 𝑤0 in 𝑤1.
OneHot.Ev(C, 𝑀, 𝑋) takes as input a circuit C, material 𝑀, and encoded input 𝑋. It outputs encoded output 𝑌. OneHot.Ev maintains
𝐸’s garbled share on circuit wires, propagating them through each gate in a module as follows:
for this call to be legal. When Figure 3 indicates 𝐺 should send a message to 𝐸, OneHot.Ev parses the message from 𝑀.
• For each XOR gate 𝑤2 := 𝑤0 ⊕ 𝑤1, OneHot.Ev generates the output share by XORing the two input shares (see Lemma 3.5).
• For each one-hot gate 𝑤2 := H(𝑤0) ⊗ 𝑤1, OneHot.Ev runs 𝐸’s steps as described in Figure 3. Note, 𝑤0 must have been revealed
• For each Constant gate 𝑤0 := Constant(𝑐), OneHot.Ev sets 𝑤0 to zero. Note, 𝐸 need not know 𝑐.
• For each Module, OneHot.Ev recursively evaluates.
• For each Reveal gate 𝑤(cid:1)𝐸
:= Reveal[C, Dmask](𝑤0), Ev sets 𝑤2 to zero. The procedure recursively evaluates the subcircuit
C with appropriate input shares and stores the output shares in 𝑤1. Finally, the procedure parses 𝐺’s color bits col from 𝑀 (see
Gb above), computes Color(𝑤1) ⊕ col, and as a side-effect outputs this value: i.e, the value 𝑤1 is revealed.
• For each Color gate 𝑤1, 𝑤2 := Color(𝑤0), Ev computes Color(𝑤0) and outputs this value to 𝐸. Color sets 𝑤1 to 𝑤0 and 𝑤2 to zero.
OneHot.En(𝑒, 𝑥) takes as input an encoding string 𝑒 and cleartext input 𝑥; it outputs encoded input 𝑋. En maps each bit 𝑥𝑖 to 𝑋𝑖 ⊕ 𝑥𝑖 Δ
for uniform 𝑋𝑖.
OneHot.De(𝑑, 𝑌) takes as arguments a decoding string 𝑑 and an encoded output 𝑌; it outputs a cleartext output 𝑦. We ensure that for
each output bit 𝑦𝑖, 𝑑 holds the following two strings:
, 𝑤(cid:1)𝐺
1
2
1
2
𝐻(𝑌𝑖, nonce)
𝐻(𝑌𝑖 ⊕ Δ, nonce)
where nonce is a fresh nonce. De hashes 𝑌 and outputs 0 or 1 depending on which above string matches. If neither matches, De aborts.
Figure 4: Our garbling scheme algorithms. We describe the handling of gates G (Equation (2)) inside of modules. Circuit/module
handling is achieved by the repeated handling of gates. Note that our scheme does not directly provide XOR/AND gates to
top-level circuits. However, these standard gates can be formalized as modules in our framework (see Section 5.4). Recall, in our
notation wires hold matrices of bits.
We do not wish to restrict masking methods (in this work we
mask via XORing, adding, and multiplying). Reveal gates can im-
plement arbitrary masking by way of the circuit C (see Figure 2).
5.1.1 Color Gates and Connection to [ZRE15]. The half-gates tech-
nique views the color (see Section 3.2.2) of a GC label as a masked
cleartext value, where the mask is known to 𝐺. They use this ob-
servation to help implement efficient AND gates.
Reveal gates can be viewed as a generalization of this simple
masking: we allow arbitrary masks, and the chosen mask can be
tailored to the application.
Reveal gates require 𝐺 to send bits to 𝐸 to reveal the output.
Color bits do not require extra sending from 𝐺 to 𝐸: the revealed
value is implicit. We view color-based masking as a special case;
for completeness, we include a special Color gate. At the interface,
Color gates are the same as Reveal gates, except that they do not
need a designer-specified distribution Dmask or circuit C. Color
gates can be viewed as a specific instantiation of a Reveal gate.
Formally, a Color gate takes as input a matrix(cid:74)𝑎(cid:75). Let 𝛼 be the
color of 𝐺’s share: 𝛼 = Color(𝐴). The gate outputs (1)(cid:74)𝑎 ⊕ 𝛼(cid:75)
and (2)(cid:74)𝛼(cid:75). The gate “reveals” 𝛼 to 𝐺 and 𝑎 ⊕ 𝛼 to 𝐸. Of course,
the parties already knew these values, so no communication is
Session 2D: Secure Multiparty ComputationCCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea581required – the Color gate is merely a formalism that allows modules
to syntactically manipulate colors.
5.2 Modules
Reveal gates and Color gates do not encapsulate sensitive data that
might be misused.
As an example, suppose the module designer specifies a Reveal
gate that applies a uniform XOR mask 𝛼 to a bit 𝑎: thus 𝐸 learns
𝑎 ⊕ 𝛼. Now suppose the designer inadvertently specifies that 𝛼 is
an output of the overall circuit. Because 𝑎 ⊕ 𝛼 was revealed to 𝐸,
this leaks 𝑎 to 𝐸!
To achieve a clean modular GC framework, we must prevent
sensitive values (i.e. values that depend on random masks) from
escaping the context where they are used. Thus, we introduce the
concept of Modules. A Module is a subroutine that computes a
specific function of its input and that encapsulates internal data.
A Module is parameterized over a module-designer-provided
circuit. It simply passes its input to this circuit and then propagates
the output. So far, this is trivial. However, we require that the mod-
ule designer provide a proof of correctness demonstrating that the
internal circuit implements a deterministic function of its argument.
This will, in particular, guarantee that the output is independent of
internal random masks; thus, masks cannot escape the module.
Top level circuits are only allowed to manipulate modules. I.e.,
our one-hot outer product primitive, Reveal gates, and Color gates
are syntactically prohibited outside of modules. This restriction
means (we prove this) that top level circuits may use modules
without any extra proofs, and so are suitable for end users.
5.3 Formal Syntax
We now formalize our syntax. Specifically, we formalize the space of
circuits C, the space of modules M, and the space of gates allowed
in modules G. Because we wish to allow modules to use other,
simpler modules (i.e., one module designer should be allowed to
use the work of another) our syntax is inductively defined.
As stated above, top level circuits are only allowed to manipulate
modules. Formally, a circuit C is an ordered list of modules with
specified input and output wires. Modules can manipulate lower
level gates. A module M is a list of gates with accompanying input
and output wires. Modules do not directly manipulate garbled shares,
etc (Section 4.4).
We provide a grammar for the gates allowed inside of modules.
Let each 𝑤𝑖 denote a wire that holds a matrix of bits of arbitrary
dimension. When a wire 𝑤𝑖’s cleartext value is revealed to 𝐺 (resp.
𝐸), we write 𝑤(cid:1)𝐺
). When a wire is revealed, it remains
a valid garbled sharing and can be used inside a module. Let Dmask
refer to an arbitrary distribution over a finite set of values. Let 𝑐
refer to a constant chosen by 𝐺:
G ≜ 𝑤2 := 𝑤0 ⊕ 𝑤1
(resp. 𝑤(cid:1)𝐸
𝑖
𝑖
| 𝑤2 := H(𝑤0) ⊗ 𝑤1
| 𝑤0 := Constant(𝑐)
| 𝑤(cid:1)𝐸
:= Reveal[C, Dmask](𝑤0)
| 𝑤(cid:1)𝐸
:= Color(𝑤0)
| 𝑤1 := Module[M](𝑤0)
, 𝑤(cid:1)𝐺
, 𝑤(cid:1)𝐺
1
2
1
2
(2)
That is, modules can use gates that (1) compute the XOR of two
matrices (of equal dimension), (2) compute the one-hot outer prod-
uct of two vectors, (3) output a constant chosen by 𝐺, (4) reveal a
masked value to 𝐸 (see Figure 2), (5) incorporate a share’s color in
the GC (see Section 5.1.1), and (6) recursively call another module.
We refer to one-hot outer product gates simply as ‘one-hot’ gates.
We specify two requirements each module must satisfy.
Reqirement 1 (Module correctness). For module M com-
puting function 𝑓 , it must hold that for all inputs 𝑥:
𝑓 (𝑥) = M(𝑥)
, 𝑤(cid:1)𝐺
Reqirement 2 (Reveal indistinguishability). For a Reveal
gate 𝑤(cid:1)𝐸
:= Reveal[C, Dmask](𝑤0), there must exist a distri-
bution Dout such that for all inputs 𝑥 on wire 𝑤0 and for 𝑟 ← Dout
and 𝛼 ← Dmask the following indistinguishability holds:
1
2
{𝑥, C(𝑥, 𝛼)} 𝑐
= {𝑥, 𝑟}
Note, each module may have more than one Reveal gate, so it
may not be a priori clear that arbitrary Reveal gate interactions are
secure. For instance, is it safe to feed the output of one Reveal gate
as input to another? From Requirement 2, we can prove that every-
thing revealed in a module can be simulated by a fixed distribution.
We then (Theorem 5.5) prove that this is sufficient for security.
Lemma 5.1. Let M be a module and let 𝑦 be the tuple of all values
revealed to 𝐸 in M due to Reveal gates and Color gates (as formally
specified by OneHot.Ev). There exists a distribution Drev such that:
{𝑦} 𝑐
= {𝑟}
where 𝑟 ← Drev
Specifically, Drev is the distribution that samples from each
Reveal gate distribution Dout (and samples a uniform distribution
in the case of Color gates) and concatenates the samples. Due to
lack of space, we prove Lemma 5.1 in Appendix A.
gate that XORs the two bits of its input and outputs the result.
5.4 Standard Boolean Gates in Our Framework
Neither XOR nor AND are by default available to top level circuits.
However, these functions can be expressed as modules, and thus
traditional Boolean circuits are compatible with our framework:
XOR is easily handled by building a module with a single XOR
AND is conspicuously missing from G. We do not need a separate
AND gate primitive, because we can express AND as a module.
Moreover, the resulting module is functionally identical to the state-
of-the-art half-gates technique [ZRE15]. Namely, our approach uses
the same number of calls to 𝐻 for each party and transfers the same
number of ciphertexts (i.e., two) from 𝐺 to 𝐸.
Let 𝑎, 𝑏 be bits, and view them as one element vectors. Let 𝛼, 𝛽
denote the color of 𝑎, 𝑏 respectively. Note the following equality:
(T (id) · H(𝑎 ⊕ 𝛼) ⊗ 𝑏) ⊕ (T (id) · H(𝑏 ⊕ 𝛽) ⊗ 𝛼) ⊕ 𝛼𝛽
= ((𝑎 ⊕ 𝛼) ⊗ 𝑏) ⊕ ((𝑏 ⊕ 𝛽) ⊗ 𝛼) ⊕ 𝛼𝛽
= ((𝑎 ⊕ 𝛼)𝑏) ⊕ ((𝑏 ⊕ 𝛽)𝛼) ⊕ 𝛼𝛽
= 𝑎𝑏
Thus, we can compute 𝑎𝑏 via two Color gates (to compute and
reveal 𝑎⊕𝛼 and 𝑏⊕𝛽), two one-hot gates, one Constant gate (for 𝛼𝛽),
and XOR gates (to compute T (𝑖𝑑)·). Each of these sub-components
Session 2D: Secure Multiparty ComputationCCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea582is communication free except for the one-hot gates. A one-hot gate
uses 2(𝑛 − 1) + 𝑚 ciphertexts; here, in both cases 𝑛 = 𝑚 = 1, so the
module costs a total of two ciphertexts.
Thus, [ZRE15] half-gates can be hosted in our framework.
5.5 The OneHot Garbling Scheme
Now that we have established syntax, we prove the framework
secure. We formalize our framework as a garbling scheme [BHR12].