``	|pattern	|pattern	|float8	|Eucledian distance between two patterns  
``	|signature	|signature	|float8	|Eucledian distance between two signatures  
```  
select * from (  
  select   
    t1.id,  
    t2.info,  
    patt  (select patt from img_vec where id=5) as "图片相似距离"  
  from img_vec t1 join img_raw t2 using (id)  
    where t1.id <> 5  
    order by sig  (select sig from img_vec where id=5)  
    limit 20  
) t  
order by "图片相似距离" limit 10  
;  
                                                     QUERY PLAN                                                        
---------------------------------------------------------------------------------------------------------------------  
 Limit  (cost=10.31..10.33 rows=10 width=40)  
   ->  Sort  (cost=10.31..10.36 rows=20 width=40)  
         Sort Key: t."图片相似距离"  
         ->  Subquery Scan on t  (cost=5.03..9.88 rows=20 width=40)  
               ->  Limit  (cost=5.03..9.68 rows=20 width=44)  
                     InitPlan 1 (returns $0)  
                       ->  Index Scan using img_vec_pkey on img_vec  (cost=0.15..2.37 rows=1 width=32)  
                             Index Cond: (id = 5)  
                     InitPlan 2 (returns $1)  
                       ->  Index Scan using img_vec_pkey on img_vec img_vec_1  (cost=0.15..2.37 rows=1 width=64)  
                             Index Cond: (id = 5)  
                     ->  Nested Loop  (cost=0.29..146.51 rows=629 width=44)  
                           ->  Index Scan using img_vec_sig_idx on img_vec t1  (cost=0.14..24.84 rows=629 width=100)  
                                 Order By: (sig  $1)  
                                 Filter: (id <> 5)  
                           ->  Index Scan using img_raw_pkey on img_raw t2  (cost=0.15..0.19 rows=1 width=36)  
                                 Index Cond: (id = t1.id)  
(17 rows)  
```  
结果如下:    
```  
select * from (  
  select   
    t1.id,  
    t2.info,  
    patt  (select patt from img_vec where id=5) as "图片相似距离"  
  from img_vec t1 join img_raw t2 using (id)  
    -- where t1.id <> 5  
    order by sig  (select sig from img_vec where id=5)  
    limit 20  
) t  
order by "图片相似距离" limit 10  
;  
 id |     info     | 图片相似距离   
----+--------------+--------------  
  5 | jpeg,特朗普5 |            0  
  1 | jpeg,特朗普1 |     4.338817  
  9 | jpeg,马斯克4 |     4.594334  
  3 | jpeg,特朗普3 |     4.752559  
  7 | jpeg,马斯克2 |     4.884595  
  6 | jpeg,马斯克1 |    4.9381833  
  8 | png,马斯克3  |    4.9781213  
  2 | jpeg,特朗普2 |    5.0608463  
 24 | jpeg,房子4   |     5.091457  
  4 | jpeg,特朗普4 |     5.091898  
(10 rows)  
```  
8、使用pgvector进行相似图片搜索.   https://github.com/pgvector/pgvector  
实际上imgsmlr插件将图片二进制转换为签名后, 签名就是向量.  
```  
postgres=# select sig from img_vec ;  
                                                                               sig                                                                                  
------------------------------------------------------------------------------------------------------------------------------------------------------------------  
 (1.270838, 0.500069, 0.427376, 1.366013, 0.652232, 0.414306, 1.269745, 0.585161, 0.310808, 1.543595, 0.634172, 0.477508, 1.154742, 0.022050, 0.245384, 0.299234)  
 (1.335650, 0.652390, 0.393671, 1.451109, 0.679567, 0.446861, 1.292568, 0.587897, 0.663593, 1.938486, 0.624385, 0.202768, 0.990529, 0.886401, 0.378102, 0.183046)  
 (1.259477, 0.463581, 0.302786, 1.391778, 0.522553, 0.387998, 1.161666, 0.570548, 0.167146, 2.493381, 0.330893, 1.010456, 0.672455, 0.279118, 0.387682, 0.309127)  
 (1.228738, 0.635732, 0.345098, 1.665270, 0.688938, 0.428735, 1.332798, 0.923155, 0.430726, 1.887990, 0.552760, 0.415664, 1.402567, 0.974207, 0.509415, 0.349885)  
 (1.038409, 0.546281, 0.308734, 0.979218, 0.603014, 0.447820, 1.423429, 0.566507, 0.385624, 1.655614, 0.204032, 0.143830, 0.633320, 0.156373, 0.284772, 0.270491)  
 (1.123810, 0.806228, 0.341440, 1.489432, 0.756371, 0.488137, 1.296715, 0.798313, 0.455280, 1.723156, 1.060410, 1.315746, 0.241827, 0.406081, 0.773475, 0.168470)  
 (1.051140, 0.929567, 0.571599, 1.103242, 1.172313, 0.564209, 0.851655, 1.037920, 0.407908, 1.940456, 0.267620, 0.240161, 1.027433, 0.625909, 0.209637, 0.286994)  
 (1.070145, 0.922921, 0.408203, 0.910248, 1.203817, 0.414439, 1.210977, 0.843991, 0.503972, 1.478885, 0.823880, 0.493970, 0.052616, 0.009954, 0.099550, 0.315186)  
 (1.014297, 0.790946, 0.369958, 1.375566, 1.175911, 0.615906, 1.725093, 1.100603, 0.888356, 2.429368, 0.790357, 0.533646, 0.841290, 0.094227, 0.512363, 0.762683)  
 (1.389513, 1.153228, 0.744124, 1.242119, 1.083352, 0.877110, 0.929370, 0.882974, 0.749842, 0.796497, 1.040739, 0.455902, 0.829046, 0.549320, 0.200105, 0.780134)  
 (1.840959, 1.533322, 0.982332, 1.549675, 1.161729, 1.026618, 0.961527, 1.288943, 1.012587, 0.722171, 0.803587, 0.251371, 0.195488, 1.123139, 0.510777, 0.816122)  
 (1.140996, 1.103443, 0.783740, 0.934260, 0.942023, 0.706223, 0.717351, 1.088809, 0.600009, 0.387582, 0.653488, 0.204923, 0.120064, 0.769957, 0.375608, 0.822386)  
 (1.378323, 1.336249, 0.771542, 1.593466, 1.709017, 1.007581, 1.874725, 1.797209, 0.741901, 0.739310, 0.825211, 0.507408, 0.200242, 2.302737, 0.302406, 0.803787)  
 (1.734405, 1.418693, 0.904873, 1.704088, 1.041535, 0.894270, 0.986760, 0.922298, 1.012795, 0.398549, 0.774437, 0.346058, 0.043864, 0.961082, 0.279609, 0.856370)  
 (1.017063, 0.891952, 0.518283, 1.296003, 0.889525, 0.631072, 1.028389, 1.016346, 0.826589, 0.387130, 1.553492, 0.452997, 0.136074, 0.344077, 0.492554, 0.406418)  
 (1.044747, 0.865196, 0.699529, 1.055459, 1.066624, 0.686950, 0.732742, 0.955629, 0.468359, 0.288743, 1.175085, 0.525265, 0.103813, 0.826011, 0.108001, 0.327941)  
 (1.192153, 1.132730, 0.581893, 1.432754, 1.358221, 0.844080, 1.964747, 1.332726, 0.668437, 2.398839, 2.569553, 1.546886, 0.579011, 1.008996, 0.233965, 0.703409)  
 (0.785036, 1.120896, 0.521437, 0.848337, 1.129619, 0.592841, 0.512232, 1.519339, 0.437692, 0.867090, 1.713499, 0.472001, 0.096089, 2.776011, 0.307675, 0.378741)  
 (1.259128, 1.213047, 0.697513, 0.934826, 1.419087, 0.731266, 0.649640, 2.099825, 0.328735, 0.527142, 1.159824, 0.554019, 0.167307, 0.191503, 0.732738, 0.403090)  
 (0.819240, 0.978856, 0.400882, 0.735962, 1.016948, 0.481790, 0.798128, 0.895937, 0.451740, 0.598053, 0.463426, 0.758902, 0.501993, 2.592159, 0.405716, 0.572428)  
 (0.940529, 1.066946, 0.390509, 0.910571, 1.120290, 0.573702, 0.610590, 1.507975, 0.660956, 2.136865, 1.391262, 0.710579, 0.953027, 0.843065, 0.473637, 0.436862)  
 (0.744365, 0.735474, 0.356165, 0.689846, 0.860880, 0.376143, 0.870404, 1.415974, 0.616256, 0.637707, 1.422517, 0.660677, 0.603397, 2.646075, 0.597267, 0.585969)  
 (0.961462, 0.949659, 0.479205, 1.132539, 1.038588, 0.534572, 0.960774, 1.406613, 0.639095, 1.050783, 0.710784, 0.296672, 1.935601, 1.559467, 0.900891, 0.385614)  
 (1.136182, 0.844896, 0.521564, 0.961399, 0.843313, 0.631543, 1.412504, 0.887028, 0.367572, 0.771699, 0.862837, 0.673957, 0.467803, 0.892946, 0.185740, 0.481828)  
 (0.802251, 0.639182, 0.310990, 1.108486, 0.686296, 0.386382, 1.180181, 0.798023, 0.610358, 2.261603, 1.103760, 0.213359, 0.305237, 1.335694, 0.323504, 0.468408)  
(25 rows)  
```  
可以将sig转换为Vector, 使用vector插件来进行相似检索.   
```  
create extension vector;  
```  
增加1列存储embedding  
```  
postgres=# alter table img_vec add column embedding vector;  
ALTER TABLE  
```  
将sig转换为Vector  
```  
postgres=# update img_vec set embedding = replace(replace(sig::text, '(', '{'), ')', '}')::float[]::vector;  
UPDATE 25  
```  
用到的操作符:  
Operator	|Description	|Added  
---|---|---  
`+`	|element-wise addition	|  
`-`	|element-wise subtraction	|  
`*`	|element-wise multiplication	|0.5.0  
`` |	Euclidean distance	|  
``	|negative inner product	|  
``	|cosine distance	|  
查询语句对比如下:  
```  
  select   
    t1.id,  
    t2.info,  
    sig  (select sig from img_vec where id=5) as "图片相似距离"  
  from img_vec t1 join img_raw t2 using (id)  
    -- where t1.id <> 5  
    order by sig  (select sig from img_vec where id=5)  
    limit 20;  
  select   
    t1.id,  
    t2.info,  
    embedding  (select embedding from img_vec where id=5) as "图片相似距离"  