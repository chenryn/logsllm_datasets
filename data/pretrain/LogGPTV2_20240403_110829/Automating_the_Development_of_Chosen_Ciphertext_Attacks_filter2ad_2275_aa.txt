title:Automating the Development of Chosen Ciphertext Attacks
author:Gabrielle Beck and
Maximilian Zinkus and
Matthew Green
Automating the Development of 
Chosen Ciphertext Attacks
Gabrielle Beck, Maximilian Zinkus, and Matthew Green, 
Johns Hopkins University
https://www.usenix.org/conference/usenixsecurity20/presentation/beck
This paper is included in the Proceedings of the 29th USENIX Security Symposium.August 12–14, 2020978-1-939133-17-5Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX.Automating the Development of Chosen Ciphertext Attacks
Gabrielle Beck∗
Johns Hopkins University
PI:EMAIL
Maximilian Zinkus∗
Johns Hopkins University
PI:EMAIL
Matthew Green
Johns Hopkins University
PI:EMAIL
Abstract
In this work we investigate the problem of automating the
development of adaptive chosen ciphertext attacks on sys-
tems that contain vulnerable format oracles. Unlike pre-
vious attempts, which simply automate the execution of
known attacks, we consider a more challenging problem:
to programmatically derive a novel attack strategy, given
only a machine-readable description of the plaintext veri-
ﬁcation function and the malleability characteristics of
the encryption scheme. We present a new set of algo-
rithms that use SAT and SMT solvers to reason deeply
over the design of the system, producing an automated
attack strategy that can entirely decrypt protected mes-
sages. Developing our algorithms required us to adapt
techniques from a diverse range of research ﬁelds, as well
as to explore and develop new ones. We implement our
algorithms using existing theory solvers. The result is a
practical tool called Delphinium that succeeds against
real-world and contrived format oracles. To our knowl-
edge, this is the ﬁrst work to automatically derive such
complex chosen ciphertext attacks.
1
Introduction
The past decades have seen enormous improvement in
our understanding of cryptographic protocol design. De-
spite these advances, vulnerable protocols remain widely
deployed. In many cases this is a result of continued
support for legacy protocols and ciphersuites, such as
TLS’s CBC-mode ciphers [7, 64], export-grade encryp-
tion [4, 9, 19], and legacy email encryption [59]. How-
ever, support for legacy protocols does not account for
the presence of vulnerabilities in more recent protocols
and systems [36, 42, 47, 72, 74].
∗These authors contributed equally to the work.
In this work we consider a speciﬁc class of vulner-
ability: the continued use of unauthenticated symmet-
ric encryption in many cryptographic systems. While
the research community has long noted the threat of
adaptive-chosen ciphertext attacks on malleable en-
cryption schemes [17, 18, 56], these concerns gained
practical salience with the discovery of padding ora-
cle attacks on a number of standard encryption pro-
tocols [6, 7, 13, 22, 30, 40, 51, 52, 73]. Despite repeated
warnings to industry, variants of these attacks continue to
plague modern systems, including TLS 1.2’s CBC-mode
ciphersuite [5, 7, 48] and hardware key management to-
kens [10, 13]. A generalized variant, the format oracle
attack can be constructed when a decryption oracle leaks
the result of applying some (arbitrarily complex) format-
checking predicate F to a decrypted plaintext. Format
oracles appear even in recent standards such as XML
encryption [42, 45], Apple’s iMessage [36] and modern
OpenPGP implementations [47, 59]. These attacks likely
represent the “tip of the iceberg”: many vulnerable sys-
tems may remain undetected, due to the difﬁculty of
exploiting non-standard format oracles.
From a constructive viewpoint, format oracle vulnera-
bilities seem easy to mitigate: simply mandate that pro-
tocols use authenticated encryption. Unfortunately, even
this advice may be insufﬁcient: common authenticated
encryption schemes can become insecure due to imple-
mentation ﬂaws such as nonce re-use [21, 43, 46]. Setting
aside implementation failures, the continued deployment
of unauthenticated encryption raises an obvious ques-
tion: why do these vulnerabilities continue to appear
in modern protocols? The answer highlights a discon-
nect between the theory and the practice of applied cryp-
tography. In many cases, a vulnerable protocol is not
obviously an exploitable protocol. This is particularly
true for non-standard format oracles which require en-
USENIX Association
29th USENIX Security Symposium    1821
properties, can we programatically derive a
chosen-ciphertext attack that allows us to efﬁ-
ciently decrypt arbitrary ciphertexts?
Our primary requirement is that the software responsi-
ble for developing this attack should require no further
assistance from human beings. Moreover, the developed
attack must be efﬁcient: ideally it should not require sub-
stantially more work (as measured by number of oracle
queries and wall-clock execution time) than the equiva-
lent attack developed through manual human optimiza-
tion.
To our knowledge, this work represents the ﬁrst at-
tempt to automate the discovery of novel adaptive cho-
sen ciphertext attacks against symmetric format oracles.
While our techniques are designed to be general, in prac-
tice they are unlikely to succeed against every possible
format checking function. Instead, in this work we initi-
ate a broader investigation by exploring the limits of our
approach against various real-world and contrived format
checking functions. Beyond presenting our techniques,
our practical contribution of this work is a toolset that
we name Delphinium, which produces highly-efﬁcient
attacks across several such functions.
Relationship to previous automated attack work. Pre-
vious work [12, 26, 58] has looked at automatic discovery
and exploitation of side channel attacks. In this setting, a
program combines a ﬁxed secret input with many “low”
inputs that are (sometimes adaptively) chosen by an at-
tacker, and produces a signal, e.g., modeling a timing
result. This setting can be viewed as a special case of
our general model (and vice versa). Like our techniques,
several of these works employ SAT solvers and model
counting techniques. However, beyond these similarities,
there are fundamental differences that manifest in our
results: (1) in this work we explore a new approach based
on approximate model counting, and (2) as a result of this
approach, our results operate over much larger secret do-
mains than the cited works. To illustrate the differences,
our experimental results succeed on secret (message) do-
mains of several hundred bits in length, with malleation
strings (“low inputs”) drawn from similarly-sized do-
mains. By contrast, the cited works operate over smaller
secret domains that rarely even reach a size of 224. More-
over, our format functions are relatively complex. It is
an open question to determine whether the experimen-
tal results in the cited works can be scaled using our
techniques.
Our contributions. In this work we make the following
contributions:
• We propose new, and fully automated algorithms
Figure 1: Output of a format oracle attack that our algo-
rithms developed against a bitwise padding check ora-
cle Fbitpad (see §5.2 for a full description). The original
ciphertext is a valid 128-bit (random) padded message
encrypted using a stream cipher. Each row of the bitmap
represents a malleation string that was exclusive-ORed
with the ciphertext prior to making a decryption query.
tirely new exploit strategies. As a concrete example, the
authors of [36] report that Apple did not repair a com-
plex gzip compression format oracle in the iMessage
protocol when the lack of authentication was pointed out;
but did mitigate the ﬂaw when a concrete exploit was
demonstrated. Similar ﬂaws in OpenPGP clients [36, 59]
and PDF encryption [55] were addressed only when re-
searchers developed proof-of-concept exploits. The un-
fortunate aspect of this strategy is that cryptographers’
time is limited, which leads protocol designers to dis-
count the exploitability of real cryptographic ﬂaws.
Removing the human element. In this work we investi-
gate the feasibility of automating the design and devel-
opment of adaptive chosen ciphertext attacks on symmet-
ric encryption schemes. We stress that our goal is not
simply to automate the execution of known attacks, as
in previous works [45]. Instead, we seek to develop a
methodology and a set of tools to (1) evaluate if a system
is vulnerable to practical exploitation, and (2) program-
matically derive a novel exploit strategy, given only a
description of the target. This removes the expensive
human element from attack development.
To emphasize the ambitious nature of our problem, we
summarize our motivating research question as follows:
Given a machine-readable description of a for-
mat checking function F along with a descrip-
tion of the encryption scheme’s malleation
1822    29th USENIX Security Symposium
USENIX Association
for developing format oracle attacks on symmetric
encryption (and hybrid encryption) schemes. Our
algorithms are designed to work with arbitrary for-
mat checking functions, using a machine-readable
description of the function and the scheme’s mal-
leation features to develop the attack strategy.
• We design and implement novel attack-development
techniques that use approximate model counting
techniques to achieve signiﬁcantly greater efﬁciency
than previous works. These techniques may be of
independent interest.
• We show how to implement our technique prac-
tically with existing tools such as SAT and SMT
solvers; and propose a number of efﬁciency opti-
mizations designed to improve performance for spe-
ciﬁc encryption schemes and attack conditions.
• We develop a working implementation of our tech-
niques using “off-the-shelf” SAT/SMT packages,
and provide the resulting software package (which
we call Delphinium), an artifact accompanying this
submission, as an open source tool for use and fur-
ther development by the research community.
• We validate our tool experimentally, deriving several
attacks using different format-checking functions.
These experiments represent, to our knowledge, the
ﬁrst evidence of a completely functioning end-to-
end machine-developed format oracle attack.
Intuition
1.1
Implementing a basic format oracle attack. In a typical
format oracle attack, the attacker has obtained some tar-
get ciphertext C∗ = EncryptK(M∗) where K and M∗ are
unknown. She has access to a decryption oracle that, on
input any chosen ciphertext C, returns F(DecryptK(C)) ∈
{0,1} for some known predicate F. The attacker may
have various goals, including plaintext recovery and
forgery of new ciphertexts. Here we will focus on the
former goal.
Describing malleability. Our attacks exploit the mal-
leability characteristics of symmetric encryption schemes.
Because the encryption schemes themselves can be com-
plex, we do not want our algorithms to reason over the en-
cryption mechanism itself. Instead, for a given encryption
scheme Π, we require the user to develop two efﬁciently-
computable functions that deﬁne the malleability prop-
erties of the scheme. The function MaulΠ
ciph(C,S) →
C(cid:48) takes as input a valid ciphertext and some opaque
malleation instruction string S (henceforth “malleation
string”), and produces a new, mauled ciphertext C(cid:48). The
function MaulΠ
plain(M,S) → M(cid:48) computes the equivalent
malleation over some plaintext, producing a plaintext (or,
in some cases, a set of possible plaintexts1). The essen-
tial property we require from these functions is that the
plaintext malleation function should “predict” the effects
of encrypting a plaintext M, mauling the resulting cipher-
text, then subsequently decrypting the result. For some
typical encryption schemes, these functions can be sim-
ple: for example, a simple stream cipher can be realized
by deﬁning both functions to be bitwise exclusive-OR.
However, malleation functions may also implement fea-
tures such as truncation or more sophisticated editing,
which could imply a complex and structured malleation
string.
Building block: theory solvers. Our techniques make
use of efﬁcient theory solvers, such as SAT and Satis-
ﬁability Modulo Theories (SMT) [1, 49]. SAT solvers
apply a variety of tactics to identify or rule out a satis-
fying assignment to a boolean constraint formula, while
SMT adds a broader range of theories and tactics such
as integer arithmetic and string logic. While in princi-
ple our techniques can be extended to work with either
system, in practice we will focus our techniques to use
quantiﬁer-free operations over bitvectors (a theory that
easily reduces to SAT). In later sections, we will show
how to realize these techniques efﬁciently using concrete
SAT and SMT packages.
Anatomy of our attack algorithm. The essential idea in
our approach is to model each phase of a chosen cipher-
text attack as a constraint satisfaction problem. At the
highest level, we begin by devising an initial constraint
formula that deﬁnes the known constraints on (and hence,
implicitly, a set of candidates for) the unknown plaintext
M∗. At each phase of the attack, we will use our current
knowledge of these constraints to derive an experiment
that, when executed against the real decryption oracle, al-
lows us to “rule out” some non-zero number of plaintext
candidates. Given the result of a concrete experiment,
we can then update our constraint formula using the new
information, and continue the attack procedure until no
further candidates can be eliminated.
In the section that follows, we use M0, M1 to represent
the partition of messages induced by a malleation string.
M0 and M1 represent concrete plaintext message assign-
ments chosen by the solver, members of the respective
partitions.
1This captures the fact that, in some encryption schemes (e.g., CBC-
mode encryption), malleation produces key-dependent effects on the
decrypted message. We discuss and formalize this in §2.
USENIX Association
29th USENIX Security Symposium    1823
The process of deriving the malleation string repre-
sents the core of our technical work. It requires our algo-
rithms to reason deeply over both the plaintext malleation
function and the format checking function in combina-