Framework作为修改代码实现的一种有用方式，使其不依赖于外部资源。
19.2.7 IntelliTest
Visual Studio 2015企业版的一个可用的新测试功能是IntelliTest，它会建立代码的白盒
分析，自动创建单元测试。IntelliTest分析代码，传递尽可能少的参数，以找到所有的迭
代。在代码编辑器中选择一个方法时，从上下文菜单中可以选择Run 
IntelliTest，来创建
测试，如图19-6所示。对于GetStringDemo方法，IntelliTest会创建10个测试方法，给输入
参数传递不同的字符串。可以检查这些方法，看看它们是否符合目的，如果没有验证方法
中的输入参数，也可以检查错误。
图19-6
如果测试是好的，就可以保存并把它们改编到一个单元测试项目中。这是IntelliTest
生成的一个测试。除了使用TestMethod特性和Assert类之外，也可以看到PexGeneratedBy
特性。这个特性把测试标记为由IntelliTest创建：
    [TestMethod]
    [PexGeneratedBy(typeof(StringSampleTest))]
    public void GetStringDemo727()
    {
      StringSample stringSample;
      string s;
      stringSample = new StringSample("\0");
      s = this.GetStringDemo(stringSample, "\0", "");
      Assert.AreEqual(" not found in \0", s);
      Assert.IsNotNull((object)stringSample);
    }
  注意： Pex是自动生成单元测试的最初Microsoft Research项目。IntelliTest来
源于Pex。在Pex中仍然可以找到http://www.pexforfun.com，在Pex的帮助下解决代码问
题。
19.3 使用xUnit进行单元测试
如前所述，单元测试框架MSTest包含在Visual 
Studio安装中，但它不支持.NET
Core，只支持基于MSBuild的项目模板。然而，Visual 
Studio测试环境支持其他测试框
架。测试适配器，如NUnit、xUnit、Boost（用于C++）、Chutzpah（用于JavaScript）和
Jasmine（用于JavaScript）可通过扩展和更新来使用；这些测试适配器与Visual Studio Test
Explorer集成。xUnit是一个杰出的测试框架，也由微软的.NET Core和ASP.NET Core开源
代码使用，所以xUnit是本节的重点。
19.3.1 使用xUnit和.NET Core
使用.NET 
Framework应用程序模板，可以创建xUnit测试，其方式与MSTest测试类
似。为此在编辑器中使用上下文菜单中的Create Unit Test命令。这与.NET Core应用程序不
同，因为这个菜单项对.NET 
Core应用程序不可用。此外，最好给单元测试使用DNX环
境，而不是使用测试库，因为测试库使用完整的框架。使用DNX环境时，也可以在Linux
平台上运行这些测试。下面看看具体步骤。
创建与以前相同的样本库，但使用UnitTestingSamplesCore和Visual 
Studio项目模板
Class 
Library 
（Package）。这个库包含之前所示的测试的类型：DeepThought和
StringSample。
对于单元测试，创建另一个.NET Core库UnitTestingSamplesCoreTests。这个项目需要
引用NuGet包System.Xml.XDocument（示例代码）、xunit（单元测试）、
xunit.runner.dnx（在DNX环境中运行单元测试）以及UnitTestingSamplesCore（应该测试的
代码）。
19.3.2 创建Fact属性
创建测试的方式非常类似于之前的方法。测试方法
TheAnswerToTheUltimateQuestionOfLifeThe-UniverseAndEverything的差异只是带注释和
Fact特性的测试方法和不同的Assert.Equal方法（代码文件UnitTestingSamplesCoreTests 
/
DeepThoughtTests.cs）:
    public class DeepThoughtTests
    {
      [Fact]
      public void
        TheAnswerToTheUltimateQuestionOfLifeTheUniverseAndEverythingTest()
      {
        int expected = 42;
        var dt = new DeepThought();
        int actual =
        dt.TheAnswerToTheUltimateQuestionOfLifeTheUniverseAndEverything();
        Assert.Equal(expected, actual);
      }
    }
现在使用的Assert类在XUnit名称空间中定义。与MSTest的Assert方法相比，这个类定
义了更多的方法，用于验证。例如，不是添加一个特性来指定预期的异常，而是使用
Assert.Throws方法，允许在一个测试方法中多次检查异常：
    [Fact]
    public void TestGetStringDemoExceptions()
    {
      var sample = new StringSample(string.Empty);
      Assert.Throws(() => sample.GetStringDemo(null, "a"));
      Assert.Throws(() => sample.GetStringDemo("a", null));
      Assert.Throws(() =>
      sample.GetStringDemo(string.Empty, "a"));
    }
19.3.3 创建Theory属性
xUnit为测试方法定义的Fact特性不需要参数。使用xUnit还可以调用需要参数的单元
测试方法；使用Theory特性提供数据，添加一个派生于Data的特性。这样就可以通过一个
方法定义多个单元测试了。
在下面的代码片段中，Theory特性应用于TestGetStringDemo单元测试方法。
StringSample. GetStringDemo方法定义了取决于输入数据的不同路径。如果第二个参数传
递的字符串不包含在第一个参数中，就到达第一条路径。如果第二个字符串包含在第一个
字符串的前5个字符中，就到达第二条路径。第三条路径是用else子句到达的。要到达所
有不同的路径，3个InlineData特性要应用于测试方法。每个特性都定义了4个参数，它们
以相同的顺序直接发送到单元测试方法的调用中。特性还定义了被测试方法应该返回的值
（代码文件UnitTestingSamplesCoreTests /StringSampleTests. cs）：
    [InlineData("", "longer string", "nger",
      "removed nger from longer string: lo string")]
    [InlineData("init", "longer string", "string", "INIT")]
    public void TestGetStringDemo(string init, string a, string b, string expecte
d)
    {
      var sample = new StringSample(init);
      string actual = sample.GetStringDemo(a, b);
      Assert.Equal(expected, actual);
    }
特性InlineData派生于Data特性。除了通过特性直接把值提供给测试方法之外，值也
可以来自于属性、方法或类。以下例子定义了一个静态方法，它用IEnumerable对
象返回相同的值（代码文件UnitTestingSamplesCoreTests / StringSampleTests.cs）：
    public static IEnumerable GetStringSampleData() =>
      new[]
      {
        new object[] { "", "a", "b", "b not found in a" },
        new object[] { "", "longer string", "nger",
        "removed nger from longer string: lo string" },
        new object[] { "init", "longer string", "string", "INIT" }
      };
单元测试方法现在用MemberData特性改变了。这个特性允许使用返回
IEnumerable的静态属性或方法，填写单元测试方法的参数：
    [Theory]
    [MemberData("GetStringSampleData")]
    public void TestGetStringDemoUsingMember(string init, string a, string b,
      string expected)
    {
      var sample = new StringSample(init);
      string actual = sample.GetStringDemo(a, b);
      Assert.Equal(expected, actual);
    }
19.3.4 用dotnet工具运行单元测试
可以直接在Visual Studio中运行xUnit单元测试，其方式类似于运行MSTest单元测试。
因为xUnit支持CLI，所以也可以在命令行上运行xUnit测试。对于这种方法，在
projects.json文件中定义测试命令（代码文件UnitTestingSamplesCoreTests / project.json）：
    {
      "version": "1.0.0-＊",
      "description": "UnitTestingSamplesCoreTests Class Library",
      "authors": [ "Christian" ],
      "tags": [ "" ],
      "projectUrl": "",
      "licenseUrl": "",
      "dependencies": {
        "NETStandard.Library": "1.0.0-＊",
        "System.Threading.Tasks": "4.0.11-＊",
        "System.Xml.XDocument": "4.0.11-＊",
        "UnitTestingSamplesCore": { "target": "project" },
        "xunit": "2.2.0-＊",
        "dotnet-test-xunit: "1.0.0-＊"
      },
      "testRunner": "xunit",
      "frameworks": {
        "netstandard1.0": {
        "dependencies": { }
      }
      }
现在，在命令提示符上运行dotnet test时，就运行项目定义的所有测试：
    ">dotnet test"
    xUnit.net DNX Runner (64-bit win7-x64)
      Discovering: UnitTestingSamplesCoreTests
      Discovered:  UnitTestingSamplesCoreTests
      Starting:    UnitTestingSamplesCoreTests
      Finished:    UnitTestingSamplesCoreTests
    === TEST EXECUTION SUMMARY ===
      UnitTestingSamplesCoreTests  Total: 11, Errors: 0, Failed: 0, Skipped: 0,
      Time: 0.107s
    C:\Users\chris\Source\Repos\ProfessionalCSharp6\Testing\UnitTestingSamples\
    UnitTestingSamplesCoreTests>
19.3.5 使用Mocking库
下面是一个更复杂的例子：在第31章的MVVM应用程序中，为客户端服务创建一个
单元测试。这个服务使用依赖注入功能，注入接口IBooksRepository定义的存储库。用于
测试AddOrUpdateBookAsync方法的单元测试不应该测试该库，而只测试方法中的功能。
对于库，应执行另一个单元测试（代码文件MVVM/Services/BooksService.cs）：
    public class BooksService: IBooksService
    {
      private ObservableCollection _books = new ObservableCollection(
);
      private IBooksRepository _booksRepository;
      public BooksService(IBooksRepository repository)
      {
        _booksRepository = repository;
      }
      public async Task LoadBooksAsync()
      {
        if (_books.Count > 0) return;
        IEnumerable books = await _booksRepository.GetItemsAsync();
        _books.Clear();
        foreach (var b in books)
        {
        _books.Add(b);
        }
      }
      public Book GetBook(int bookId) =>
        _books.Where(b => b.BookId == bookId).SingleOrDefault();
      public async Task AddOrUpdateBookAsync(Book book)
      {
        if (book == null) throw new ArgumentNullException(nameof(book));
        Book updated = null;
        if (book.BookId == 0)
        {
        updated = await _booksRepository.AddAsync(book);
        _books.Add(updated);
        }
        else
        {
        updated = await _booksRepository.UpdateAsync(book);
        Book old = _books.Where(b => b.BookId == updated.BookId).Single();
        int ix = _books.IndexOf(old);
        _books.RemoveAt(ix);
        _books.Insert(ix, updated);
        }
        return updated;
      }
      IEnumerable IBooksService.Books => _books;
    }
因为AddOrUpdateBookAsync的单元测试不应该测试用于IBooksRepository的存储库，
所以需要实现一个用于测试的存储库。为了简单起见，可以使用一个模拟库自动填充空
白。一个常用的模拟库是Moq。对于单元测试项目，添加NuGet包Moq；也添加NuGet包
xunit和xunit.runner.visualstudio。
在AddBooksAsyncTest单元测试中，实例化一个模拟对象，传递泛型参数
IBooksRepository。Mock构造函数创建接口的实现代码。因为需要从存储库中得到一些非
空结果，来创建有用的测试，所以Setup方法定义可以传递的参数，ReturnsAsync方法定义
了方法存根返回的结果。使用Mock类的Object属性访问模拟对象，并传递它，以创建
BooksService类。有了这些设置，可以调用AddOrUpdateBookAsync方法，传递一个应该添
加的book对象（代码文件MVVM/Services.Tests/Books-ServiceTest.cs）：
    [Fact]
    public async Task AddBookAsyncTest()
    {
      // arrange
      var mock = new Mock();
      var book =
        new Book
        {
        BookId = 0,
        Title = "Test Title",
        Publisher = "A Publisher"
        };
      var expectedBook =
        new Book
        {
        BookId = 1,
        Title = "Test Title",
        Publisher = "A Publisher"
        };
      mock.Setup(r => r.AddAsync(book)).ReturnsAsync(expectedBook);
      var service = new BooksService(mock.Object);
      // act
      Book actualAdded = await service.AddOrUpdateBookAsync(book);
      Book actualRetrieved = service.GetBook(actualAdded.BookId);
      Book notExisting = service.GetBook(2);
      // assert
      Assert.Equal(expectedBook, actualAdded);
      Assert.Equal(expectedBook, actualRetrieved);
      Assert.Equal(null, notExisting);
    }
添加一本书时，会调用AddOrUpdateBookAsync方法的if子句。更新一本书时，会激活
else子句。方法的这部分会用UpdateBookAsyncTest方法测试。与前面一样，给接口
IBooksRepository创建一个模拟对象。更新一本书时，会测试不同的场景，如更新现存的
书和不存在的书（代码文件MVVM / Services.Tests / BooksServiceTest.cs）：
    [Fact]
    public async Task UpdateBookAsyncTest()
    {
      // arrange
      var mock = new Mock();
      var origBook =
        new Book
        {
        BookId = 0,
        Title = "Title",
        Publisher = "A Publisher"
        };
      var addedBook =
        new Book
        {
        BookId = 1,
        Title = "Title",
        Publisher = "A Publisher"
        };
      var updateBook =
        new Book
        {
        BookId = 1,
        Title = "New Title",
        Publisher = "A Publisher"
        };
      var notExisting =
        new Book
        {
        BookId = 99,
        Title = "Not",