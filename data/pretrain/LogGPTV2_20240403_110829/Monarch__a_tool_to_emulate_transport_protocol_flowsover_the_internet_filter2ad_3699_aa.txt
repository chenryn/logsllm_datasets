# Title: Monarch: A Tool to Emulate Transport Protocol Flows over the Internet at Large

## Authors:
- Andreas Haeberlen, MPI for Software Systems, Rice University
- Marcel Dischinger, MPI for Software Systems
- Krishna P. Gummadi, MPI for Software Systems
- Stefan Saroiu, University of Toronto

## Abstract
This paper introduces Monarch, a novel tool designed to accurately emulate transport protocol flows from a user-controlled end host to any other Internet host that responds to simple TCP, UDP, or ICMP packet probes. Given that many Internet hosts and routers respond to such probes, Monarch can evaluate transport protocols, such as TCP Reno, TCP Vegas, and TCP Nice, over a large and diverse set of Internet paths. Current methods for evaluating these protocols require control over both end hosts, limiting their scope to a small number of paths in testbeds like PlanetLab, RON, or NIMI. Monarch's ability to evaluate transport protocols with minimal support from the destination host enables new measurement studies. We demonstrate the feasibility of using Monarch for three example studies: (a) understanding transport protocol behavior over less explored network paths, such as those to cable and DSL hosts, (b) comparing the performance of different transport protocol designs, and (c) testing protocol implementations under a wide range of experimental conditions.

## Categories and Subject Descriptors
- C.4 [Computer Systems Organization]: Performance of Systems
- C.2.2 [Computer Systems Organization]: Computer-Communication Networks—Network Protocols
- C.2.5 [Computer Systems Organization]: Computer-Communication Networks—Local and Wide-Area Networks

## General Terms
- Experimentation, Measurement, Performance

## Keywords
- Emulation, transport protocols, network measurement

## 1. Introduction
Despite significant research on designing new transport protocols, such as TCP Vegas, TCP Nice, TFRC, or PCP, evaluating these protocols on the Internet has proven challenging. Current approaches require the protocols to be deployed at both endpoints of an Internet path, which restricts evaluations to research testbeds like PlanetLab, RON, or NIMI. These testbeds are limited in scale and do not represent the heterogeneous network environments of the Internet.

In this paper, we present Monarch, a tool that emulates transport protocol flows from a user-controlled end host to any other Internet host that responds to TCP, UDP, or ICMP packet probes. Since many Internet hosts and routers respond to such probes, researchers can use Monarch to conduct large-scale experiments over a diverse set of Internet paths. By requiring control of only one end host, Monarch enables protocol evaluation on an unprecedented scale, covering millions of Internet paths.

Monarch is based on the observation that transport protocols typically transfer data at a rate determined by the latency and loss characteristics observed by data and acknowledgment packets exchanged between the two endpoints. Monarch uses generic TCP, UDP, or ICMP probes and responses to emulate this packet exchange. We discuss the types of transport protocols that can and cannot be emulated by Monarch in Section 2.4.

Monarch is accurate because it relies on direct online measurements. For every packet transmission in its emulated flow, Monarch sends an actual probe packet of the same size to the receiver and interprets the response packet as an incoming acknowledgment. This ensures that the emulated flows are subjected to real-world conditions, including congestion, delays, failures, or router bugs. However, since Monarch controls only one end host, it can estimate round-trip path conditions but not one-way paths. Despite this limitation, our evaluation shows that packet-level traces of flows emulated with Monarch closely match those of actual network transfers.

Monarch enhances the state of the art in transport protocol evaluation. Today, researchers can use controlled environments like network emulators or testbeds for a systematic analysis of protocol behavior. Monarch complements these tools by providing live access to real network paths, enabling experiments with emerging network infrastructures, such as broadband networks, for which emulators and testbeds are not yet widely available. Additionally, Monarch captures the complex protocol interactions with different network configurations and traffic workloads found in deployed systems.

In addition to capturing the behavior of transport protocols, Monarch offers several benefits. Researchers can measure and gain insights into the properties of network environments less explored by the community. For example, evaluating a transport protocol over cable and DSL can provide valuable insights into the properties of broadband networks. Furthermore, software developers can test or debug the performance and reliability of protocol implementations, uncovering bugs, performance bottlenecks, or poor design decisions.

The rest of the paper is organized as follows. We present the design of Monarch in Section 2, discuss relevant implementation details in Section 3, and evaluate Monarch’s accuracy in Section 4. In Section 5, we discuss three new measurement studies enabled by Monarch. Finally, we present related work in Section 6 and summarize our conclusions in Section 7.

## 2. Design
This section focuses on the design of Monarch. We start with an overview of how Monarch emulates transport protocols, then discuss the probing mechanisms, the number of Internet paths it can measure, the types of transport protocols it can emulate, and the factors affecting its accuracy.

### 2.1 How Does Monarch Work?
In a typical transport protocol like TCP, a sender on one host sends large data packets to a receiver on another host, and the receiver responds with small acknowledgment packets (Figure 1a). Monarch emulates this packet exchange by sending large probe packets to the remote host that elicit small responses (Figure 1b). To emulate a TCP flow, Monarch creates both a TCP sender and a TCP receiver on the same local host, but interposes between them (Figure 1d). Whenever the sender transmits a packet, Monarch captures it and instead sends a probe packet of the same size to the remote host. As soon as it receives a response from the remote host, Monarch forwards the captured packet to the receiver. Packets in the reverse direction from the TCP receiver to the TCP sender are forwarded directly.

The sizes of Monarch’s probe and response packets match those of TCP’s data and acknowledgment packets, and they are transmitted over the same Internet paths. As a result, the sender observes similar round-trip times, queuing delays, and loss rates for its packet transmissions. Because Monarch uses online measurements rather than analytical models of the network, the characteristics of flows emulated by Monarch closely match those of real TCP flows.

In our simplified description above, we made several assumptions. For example, we assumed that probe packets can be uniquely matched to their response packets, that arbitrary Internet hosts would respond to probe packets, and that an accurate emulation of round-trip (rather than one-way) packet latencies and losses is sufficient for an accurate emulation of transport protocols. Later in this section, we discuss how widely these assumptions hold in the Internet at large.

Monarch’s output is a packet trace similar to the output of tcpdump. Based on this trace, we can infer network path properties, such as packet round-trip times, and transport protocol characteristics, such as throughput. We show a particularly interesting use of this trace in Section 3.3 – Monarch can analyze its output to detect errors in its own emulated flows.

### 2.2 What Types of Probes Can Monarch Use?
Monarch can use several types of probe packets to emulate transport flows. It is useful to have multiple probe types to choose from because not all hosts respond to all probes. To be accurate, Monarch needs:
1. The remote host to respond to every probe packet it receives.
2. A way to match responses with their corresponding probes.
3. The sizes of the probe and response packets to be similar to those of the data and acknowledgment packets of a regular flow.

Monarch currently supports the following four types of probes:

- **TCP**: Monarch’s probe packet is a variable-sized TCP acknowledgment (ACK) sent to a closed port on the remote host. The remote host responds with a small, fixed-size TCP reset (RST) packet. According to the TCP standard, the sequence number of the RST packet is set to the acknowledgment number of the probe packet header, which enables Monarch to match probes with responses.
- **UDP**: Monarch sends a variable-sized UDP packet to a closed port on the remote host, which responds with a small, fixed-size ICMP ‘port unreachable’ message. The response packet contains the first eight bytes of the probe packet, including the IPID field of the probe packet headers. By setting unique IPIDs in its probe packets, Monarch can match probes with responses.
- **ICMP Echo Request**: Monarch sends a variable-sized ICMP echo request (‘ping’) packet to the remote host, which answers with a similarly sized ICMP echo reply packet. The response packet has the same sequence number field in its header as the probe packet, enabling Monarch to match probes with responses.
- **ICMP Timestamp Request**: Monarch sends an ICMP timestamp request message to the remote host, which answers with a small, fixed-size ICMP timestamp reply packet. The response packet has the same sequence number field in its headers as the probe packet, enabling Monarch to match probes with responses.

These probes and responses differ in their suitability for evaluating transport protocols. For example, TCP and UDP probes allow the probe packet sizes to be varied, even as the response packet sizes are held fixed between 40 and 60 bytes. They are well suited to match the sizes of data and acknowledgment packets for many variants of the popular TCP protocol, such as Reno, Vegas, and NICE. On the other hand, the ICMP echo responses are of the same size as their probes. Consequently, they are better suited for evaluating transport flows where data flows in both directions.

### 2.3 How Many Internet Hosts Respond to Monarch Probes?
In theory, Monarch could emulate a transport flow to any remote host running a TCP/IP implementation, as the protocol standards require a response to each of the probes presented above. In practice, however, many hosts are either offline or behind NATs and firewalls that block or rate-limit incoming probe packets.

We conducted a simple experiment to estimate the fraction of Internet hosts that can be used as endpoints of a Monarch flow. We sent probes to three types of hosts: end hosts in commercial broadband ISPs, end hosts in academic and research networks, and Internet routers. We selected end hosts in broadband and academic networks from a 2001 trace of peers participating in the Gnutella file-sharing system. We used DNS names to select hosts belonging to major DSL/cable ISPs and university domains in North America and Europe. For example, we classified a host as a BellSouth DSL host if its DNS name is of the form adsl-*.bellsouth.net. We discovered Internet routers by running traceroute to the end hosts in broadband and academic networks.

Table 1 presents our results. We probed 1,000 hosts in each of the three host categories. Overall, more than 18% of the academic hosts, 28% of the broadband hosts, and over 90% of the routers responded to at least one of the four types of probes. While this may seem like a small percentage, there are millions of hosts in the Internet, and it should be easy to find thousands of suitable hosts for an experiment. We believe that the primary reason for the large difference in the response rates between routers and other end hosts is the low availability of the end hosts. Unlike routers, many end hosts are often offline and disconnected from the Internet. Moreover, our end hosts were selected from a trace collected five years earlier. In contrast, the router list was generated from traceroutes conducted only a few weeks before this experiment.

Using very conservative estimates, our results suggest that Monarch can evaluate transport protocols to at least 18% of Internet hosts, and to at least 7% of hosts when restricted to TCP probes only. This shows that Monarch can evaluate transport protocols over a diverse set of Internet paths, several orders of magnitude larger than what current research testbeds can provide. For example, we used Monarch to measure paths to tens of thousands of hosts in over 200 commercial cable and DSL ISPs worldwide. In contrast, research testbeds like PlanetLab have a very small number of broadband hosts.

### 2.4 What Transport Protocols Can Monarch Emulate?
Monarch emulates transport protocols based on real-time, online measurements of packet latencies and losses. Hence, any transport protocol where the receiver feedback is limited to path latencies and losses can be emulated. As shown in Table 2, this includes many variants of the widely used TCP protocol, a number of protocol extensions, and several streaming protocols.

However, Monarch cannot emulate transport protocols that require the receiver to relay more complex information about the network to the sender. For example, Monarch cannot emulate TCP with explicit congestion notification (ECN) because it would require the remote host to echo back the congestion experienced (CE) bit to the Monarch host. We are not aware of any type of probe that could be used for this purpose. Similarly, Monarch cannot be used to evaluate protocols like XCP that require changes to existing network infrastructure.

Monarch currently emulates transport flows in the downstream direction, i.e., connections in which data flows from the Monarch host to the remote host. This mimics the typical usage pattern in which an end host downloads content from an Internet server. Emulating data flows in the upstream direction from the remote host to the Monarch host requires a small probe packet that elicits a large response packet. We have not yet found a probe packet that has this property.

### 2.5 What Factors Affect Monarch’s Accuracy?
Monarch is based on round-trip (rather than one-way) estimates of packet latencies and losses. When packets are lost or reordered, Monarch cannot distinguish whether these events occurred in the forward or reverse path. Despite this limitation, our evaluation shows that packet-level traces of flows emulated with Monarch closely match those of actual network transfers.