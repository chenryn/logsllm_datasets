title:Monarch: a tool to emulate transport protocol flowsover the internet
at large
author:Andreas Haeberlen and
Marcel Dischinger and
P. Krishna Gummadi and
Stefan Saroiu
Monarch: A Tool to Emulate Transport Protocol Flows
over the Internet at Large
Andreas Haeberlen
MPI for Software Systems, Rice University
Marcel Dischinger
MPI for Software Systems
PI:EMAIL
PI:EMAIL
Krishna P. Gummadi
MPI for Software Systems
PI:EMAIL
Stefan Saroiu
University of Toronto
PI:EMAIL
This paper proposes Monarch, a novel tool that accurately
emulates transport protocol ﬂows from an end host con-
trolled by its user to any other Internet host that responds
to simple TCP, UDP, or ICMP packet probes. Since many
Internet hosts and routers respond to such probes, Monarch
can evaluate transport protocols, such as TCP Reno, TCP
Vegas, and TCP Nice, over a large and diverse set of Inter-
net paths. Current approaches to evaluating these protocols
need control over both end hosts of an Internet path. Conse-
quently, they are limited to a small number of paths between
nodes in testbeds like PlanetLab, RON or NIMI. Monarch’s
ability to evaluate transport protocols with minimal support
from the destination host enables many new measurement
studies. We show the feasibility of using Monarch for three
example studies: (a) understanding transport protocol be-
havior over network paths that are less explored by the re-
search community, such as paths to cable and DSL hosts, (b)
investigating the relative performance of diﬀerent transport
protocol designs, such as TCP Vegas and TCP Reno, and
(c) testing protocol implementations under a wide range of
experimental conditions.
Categories and Subject Descriptors
C.4 [Computer Systems Organization]: Performance
of Systems; C.2.2 [Computer Systems Organization]:
Computer-Communication Networks—Network Protocols;
C.2.5 [Computer Systems Organization]: Computer-
Communication Networks—Local and Wide-Area Networks
General Terms
Experimentation, Measurement, Performance
Keywords
Emulation, transport protocols, network measurement
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
IMC’06, October 25–27, 2006, Rio de Janeiro, Brazil.
Copyright 2006 ACM 1-59593-561-4/06/0010 ...$5.00.
1.
INTRODUCTION
Despite a large body of work on designing new transport
protocols, such as TCP Vegas [8], TCP Nice [47], TFRC [11],
or PCP [3], evaluating these protocols on the Internet at
large has proved diﬃcult. Current approaches require the
protocols to be deployed at both endpoints of an Internet
path. In practice, this restricts the evaluation of transport
protocols to studies conducted over research testbeds, such
as PlanetLab [35], RON [2], or NIMI [34]. Unfortunately,
these testbeds are limited in their scale and they are not
representative of the many heterogeneous network environ-
ments that constitute the Internet.
In this paper, we propose Monarch, a tool that emulates
transport protocol ﬂows from an end host controlled by its
user to any other Internet host that responds to TCP, UDP,
or ICMP packet probes. Since many Internet hosts and
routers respond to such probes, researchers can use Monarch
to evaluate transport protocols in large-scale experiments
over a diverse set of Internet paths. By requiring control
of just one of the two end hosts of a path, Monarch enables
protocol evaluation on an unprecedented scale, over millions
of Internet paths.
Monarch is based on a key observation about how trans-
port protocols typically work: a sender transfers data to a
receiver at a rate determined by the latency and loss charac-
teristics observed by data and acknowledgment packets ex-
changed between the two endpoints. Monarch uses generic
TCP, UDP, or ICMP probes and responses to emulate this
packet exchange between a local sender and a remote re-
ceiver. We discuss which transport protocols can and cannot
be emulated by Monarch in Section 2.4.
Monarch is accurate because it relies on direct online mea-
surements. For every packet transmission in its emulated
ﬂow, Monarch sends an actual probe packet of the same
size to the receiver and interprets the response packet as
an incoming acknowledgment. Thus, the emulated ﬂows are
subjected to a wide range of conditions aﬀecting real net-
work paths, including congestion, delays, failures, or router
bugs. However, as Monarch controls only one end host,
it can estimate the conditions of the round-trip path but
not the one-way paths. Despite this limitation, our evalu-
ation shows that packet-level traces of ﬂows emulated with
Monarch closely match those of actual network transfers.
Monarch enhances the state of the art in transport pro-
tocol evaluation. Today researchers can use controlled envi-
Local host
Remote host
Local host
Remote host
Data(1500)
Data(1500)
Data(1500)
Data(1500)
A C K ( 4 0 )
A C K ( 4 0 )
A C K ( 4 0 )
A C K ( 4 0 )
Probe(1500)
R e s p o n s e ( 4 0 )
Probe(1500)
R e s p o n s e ( 4 0 )
Probe(1500)
Probe(1500)
R e s p o n s e ( 4 0 )
R e s p o n s e ( 4 0 )
(a)
(b)
Local host
TCP
Sender
)
0
0
5
1
(
a
a
D
t
A
C
K
(
4
0
)
TCP
Receiver
Remote host
(c)
TCP
Receiver
TCP
Sender
Local host
Monarch
)
0
0
5
1
(
e
b
o
r
P
R
e
s
p
o
n
s
e
(
4
0
)
Remote host
(d)
Figure 1: The Monarch packet exchange: In a normal TCP ﬂow, large data packets ﬂow in one direction and small
acknowledgment packets in the other (a). Monarch emulates this by using large probe packets that elicit small responses
(b). While in a normal ﬂow, sender and receiver are on diﬀerent hosts (c), Monarch colocates them on the same host and
interposes between them (d). The numbers in parentheses are packet lengths in bytes.
ronments like network emulators [46,48] or testbeds [2,34,35]
for a systematic analysis of protocol behavior. Monarch
complements these tools by providing live access to a real
network path. This enables experiments with emerging net-
work infrastructures, such as broadband networks, for which
emulators and testbeds are not yet widely available. Fur-
ther,
it naturally captures the complex protocol interac-
tions with the diﬀerent conﬁgurations of networks and traﬃc
workloads that exist in deployed systems.
In addition to capturing the behavior of transport proto-
cols, Monarch has several beneﬁts. Researchers can measure
and gain insight into the properties of network environments
less explored by the community. For example, evaluating a
transport protocol over cable and DSL can provide much
needed insight into the properties of broadband networks.
Further, software developers can test or debug the perfor-
mance and reliability of protocol implementations. These
tests can uncover bugs, performance bottlenecks, or poor
design decisions in the transport protocol.
The rest of the paper is organized as follows. We present
the design of Monarch in Section 2, then we discuss relevant
implementation details in Section 3 and evaluate Monarch’s
accuracy in Section 4.
In Section 5, we discuss three
new measurement studies enabled by Monarch. Finally,
we present related work in Section 6 and summarize our
conclusions in Section 7.
2. DESIGN
This section focuses on the design of Monarch. We start
with an overview of how Monarch emulates transport pro-
tocols. Later, we discuss a variety of probing mechanisms
Monarch can use, the number of Internet paths it can mea-
sure, the types of transport protocols it can emulate, and
the factors that aﬀect its accuracy.
2.1 How does Monarch work?
In a typical transport protocol, such as TCP, a sender
on one host sends large data packets to a receiver on an-
other host, and the receiver responds with small acknowl-
edgment packets (Figure 1a). Monarch emulates this packet
exchange by sending large probe packets to the remote host
that elicit small responses (Figure 1b). To emulate a TCP
ﬂow, Monarch creates both a TCP sender and a TCP re-
ceiver on the same local host, but interposes between them
(see Figure 1d). Whenever the sender transmits a packet,
Monarch captures it and instead sends a probe packet of
the same size to the remote host. As soon as it receives a
response from the remote host, Monarch forwards the cap-
tured packet to the receiver. Packets in the reverse direction
from the TCP receiver to the TCP sender are forwarded di-
rectly.
The sizes of Monarch’s probe and response packets match
those of TCP’s data and acknowledgment packets, and they
are transmitted over the same Internet paths. As a result,
the sender observes similar round-trip times, queuing de-
lays, and loss rates for its packet transmissions. Because
Monarch uses online measurements as opposed to analytical
models of the network, the characteristics of ﬂows emulated
by Monarch closely match those of real TCP ﬂows.
In our simpliﬁed description above, we made several as-
sumptions. For example, we assumed that probe packets
can be matched uniquely to their response packets, that ar-
bitrary Internet hosts would respond to probe packets, and
that an accurate emulation of round-trip (rather than one-
way) packet latencies and losses is suﬃcient for an accurate
emulation of transport protocols. Later in this section, we
discuss how widely these assumptions hold in the Internet
at large.
Monarch’s output is a packet trace similar to the output
of tcpdump. Based on this trace, we can infer network path
properties, such as packet round-trip times, and transport
protocol characteristics, such as throughput. We show a
particularly interesting use of this trace in Section 3.3 –
Monarch can analyze its output to detect errors in its own
emulated ﬂows.
2.2 What types of probes can Monarch use?
Monarch can use several types of probe packets to em-
ulate transport ﬂows.
It is useful to have multiple probe
types to choose from because not all hosts respond to all
probes. To be accurate, Monarch needs 1) the remote host
to respond to every probe packet it receives, 2) a way to
match responses with their corresponding probes, and 3)
the sizes of the probe and response packets to be similar to
those of the data and acknowledgment packets of a regular
ﬂow. Monarch currently supports the following four types
of probes:
• TCP: Monarch’s probe packet is a variable-sized TCP
acknowledgment (ACK) sent to a closed port on the
remote host. The remote host responds with a small,
ﬁxed size TCP reset (RST) packet. According to the
TCP standard [45], the sequence number of the RST
packet is set to the acknowledgment number of the
probe packet header, which enables Monarch to match
probes with responses.
• UDP: Monarch sends a variable sized UDP packet
to a closed port on the remote host, which responds
with a small, ﬁxed-size ICMP ‘port unreachable’ mes-
sage. The response packet contains the ﬁrst eight bytes
of the probe packet, including the IPID ﬁeld of the
probe packet headers [37]. By setting unique IPIDs
in its probe packets, Monarch can match probes with
responses.
• ICMP echo request: Monarch sends a variable-sized
ICMP echo request (‘ping’) packet to the remote host,
which answers with a similarly sized ICMP echo re-
ply packet [37]. The response packet has the same se-
quence number ﬁeld in its header as the probe packet,
enabling Monarch to match probes with responses.
• ICMP timestamp request: Monarch sends an
ICMP timestamp request message to the remote
host, which answers1 with a small, ﬁxed size ICMP
timestamp reply packet [37]. The response packet has
the same sequence number ﬁeld in its headers as the
probe packet, enabling Monarch to match probes with
responses.
These probes and responses diﬀer in their suitability for
evaluating transport protocols. For example, TCP and UDP
probes allow the probe packet sizes to be varied, even as
the response packet sizes are held ﬁxed between 40 and 60
bytes. They are well suited to match the sizes of data and
acknowledgment packets for many variants of the popular
TCP protocol, such as Reno, Vegas, and NICE. On the other
hand, the ICMP echo responses are of the same size as their
probes. Consequently, they are better suited for evaluating
transport ﬂows where data ﬂows in both directions.
2.3 How many Internet hosts respond to
Monarch probes?
In theory, Monarch could emulate a transport ﬂow to any
remote host running a TCP/IP implementation, since the
protocol standards require a response to each of the probes
presented above. In practice, however, many hosts are either
oﬄine or behind NATs and ﬁrewalls that block or rate-limit
incoming probe packets.
We conducted a simple experiment to estimate the frac-
tion of Internet hosts that can be used as endpoints of a
1Govindan and Paxson [13] observed that some routers use
a ‘slow path’ for generating ICMP timestamp responses,
which introduces additional delays. Hence, these probes
should be used with caution. We use TCP probes when-
ever possible.
Broadband
7.2 %
18.0 %
25.0 %
7.4 %
28.4 %
Type of Host
Academic
13.4 %
4.9 %
8.9 %
4.1 %
18.1 %
Router
69.6 %
63.0 %
89.3 %
7.3 %
90.3 %
TCP ACK
ICMP TsReq
ICMP EchoReq
UDP Packet
Any probe
Table 1: Fraction of Internet hosts responding to
Monarch probes: We used three diﬀerent categories with
1,000 hosts each: hosts in commercial broadband ISPs,
hosts in academic and research environments, and Internet
routers.
Monarch ﬂow. We sent probes to three types of hosts: end
hosts in commercial broadband ISPs, end hosts in academic
and research networks, and Internet routers. We selected
end hosts in broadband and academic networks from a 2001
trace of peers participating in the Gnutella ﬁle-sharing sys-
tem [41]. We used DNS names to select hosts belonging
to major DSL/cable ISPs and university domains in North
America and Europe. For example, we classiﬁed a host as
a BellSouth DSL host if its DNS name is of the form adsl-
*.bellsouth.net. We discovered Internet routers by running
traceroute to the end hosts in broadband and academic
networks.
Table 1 presents our results. We probed 1,000 hosts in
each of the three host categories. Overall, more than 18% of
the academic hosts, 28% of the broadband hosts, and over
90% of the routers responded to at least one of the four types
of probes. While this may seem like a small percentage,
there are millions of hosts in the Internet, and it should be
easy to ﬁnd thousands of suitable hosts for an experiment.
We believe that the primary reason for the large diﬀerence
in the response rates between routers and other end hosts is
the low availability of the end hosts. Unlike routers, many
end hosts are often oﬄine2 and disconnected from the In-
ternet. Moreover, our end hosts were selected from a trace
collected ﬁve years earlier. In contrast, the router list was
generated from traceroutes conducted only a few weeks be-
fore this experiment.
Using very conservative estimates, our results suggest that
Monarch can evaluate transport protocols to at least 18% of
Internet hosts, and to at least 7% of hosts when restricted
to TCP probes only. This shows that Monarch can evalu-
ate transport protocols over a diverse set of Internet paths,
several orders of magnitude larger than what current re-
search testbeds can provide. For example, we used Monarch
to measure paths to tens of thousands of hosts in over 200
commercial cable and DSL ISPs worldwide. In contrast, re-
search testbeds like PlanetLab have a very small number of
broadband hosts.
2To estimate the eﬀect of host unavailability, we probed the
set of end hosts that responded to our probes for a second
time after a few weeks. Only 67% of the hosts responded
again, suggesting the high impact of end host unavailability.
Protocol
Usable?
TCP BIC [49], TCP Nice [47], TCP Vegas [8],
TCP Westwood [22], Highspeed TCP [10],
Scalable TCP [19], Fast TCP [17], PCP [3]
SACK [24], FACK [23], Window scaling [15]
RAP [39], TFRC [11]
ECN [38], XCP [18]
Yes
No
Table 2: Supported protocols: Monarch can be used to
evaluate many, but not all, transport protocols.
2.4 What transport protocols can Monarch
emulate?
Monarch emulates transport protocols based on real-time,
online measurements of packet latencies and losses. Hence,
any transport protocol where the receiver feedback is limited
to path latencies and losses can be emulated. As shown
in Table 2, this includes many variants of the widely used
TCP protocol, a number of protocol extensions, and several
streaming protocols.
However, Monarch cannot emulate transport protocols
that require the receiver to relay more complex information
about the network to the sender. For example, Monarch
cannot emulate TCP with explicit congestion notiﬁcation
(ECN) [38] because it would require the remote host to echo
back the congestion experienced (CE) bit to the Monarch
host. We are not aware of any type of probe that could be
used for this purpose. Similarly, Monarch cannot be used
to evaluate protocols like XCP [18] that require changes to
existing network infrastructure.
Monarch currently emulates transport ﬂows in the down-
stream direction, i.e. connections in which data ﬂows from
the Monarch host to the remote host. This mimics the typ-
ical usage pattern in which an end host downloads content
from an Internet server. Emulating data ﬂows in the up-
stream direction from the remote host to the Monarch host
requires a small probe packet that elicits a large response
packet. We have not yet found a probe packet that has this
property.
2.5 What factors affect Monarch’s accuracy?
Monarch is based on round-trip (rather than one-way)
estimates of packet latencies and losses. When packets are
lost or reordered, Monarch cannot distinguish whether these