title:Multi-cloud oblivious storage
author:Emil Stefanov and
Elaine Shi
Multi-Cloud Oblivious Storage
Emil Stefanov
UC Berkeley
PI:EMAIL
Elaine Shi
University of Maryland
PI:EMAIL
ABSTRACT
We present a 2-cloud oblivious storage (ORAM) system that
achieves 2.6X bandwidth cost between the client and the
cloud. Splitting an ORAM across 2 or more non-colluding
clouds allows us to reduce the client-cloud bandwidth cost
by at least one order of magnitude, shifting the higher-
bandwidth communication to in-between the clouds where
bandwidth provisioning is abundant. Our approach makes
ORAM practical for bandwidth-constrained clients such as
home or mobile Internet connections. We provide a full-
ﬂedged implementation of our 2-cloud ORAM system, and
report results from a real-world deployment over Amazon
EC2 and Microsoft Azure.
Categories and Subject Descriptors
K.6.5 [Management of Computing and Information
Systems]: Security and Protection
General Terms
Algorithms; Security
Keywords
Oblivious RAM; outsourced storage; multi-cloud; privacy
1.
INTRODUCTION
Storage outsourcing is a growing industry that shields
storage users from the burden of in-house infrastructure
maintenance, and oﬀers economies of scale. However, due to
concerns over data privacy, “many potential cloud users have
yet to join the cloud, and many are for the most part putting
only their less sensitive data in the cloud” [8]. Encryption
alone is insuﬃcient for ensuring data privacy, since access
patterns can also leak a considerable amount of sensitive
information. For example, Islam et al. demonstrate statisti-
cal attacks that leverage access patterns to successfully infer
about 80% of the search queries made to an encrypted email
repository [18].
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’13, November 4–8, 2013, Berlin, Germany.
Copyright is held by the owner/author(s). Publication rights licensed to ACM.
ACM 978-1-4503-2477-9/13/11 ...$15.00.
http://dx.doi.org/10.1145/2508859.2516673.
hiding
completely
Oblivious RAM (ORAM) [7, 9–11, 13, 14, 16, 19, 22, 23, 25,
30–32,34,35], ﬁrst proposed by Goldreich and Ostrovsky [11],
is a cryptographic construct that allows a client to access
encrypted data residing on an untrusted storage provider,
while
patterns.
ORAM guarantees that the sequence of physical addresses
accessed is independent of the actual data requested – in
other words, the physical access patterns do not reveal in-
formation about the logical access patterns. To achieve this,
the client continuously re-encrypts and reshuﬄes data blocks
on the storage server, to cryptographically conceal the logi-
cal access pattern.
data
access
Due to the attractive security guarantees ORAM provides,
several recent works have investigated how to make ORAM
practical in an outsourced storage setting [20, 30, 31, 34, 35].
These works suggest that a primary hurdle for real-world
ORAM deployment stems from its high bandwidth cost. Un-
der realistic parameterizations (e.g., gigabytes to terabytes
of outsourced storage), the best known ORAM schemes in-
cur about 20X – 35X bandwidth cost, i.e., for every data
block accessed, on average 20 to 35 blocks need to be trans-
ferred. This makes ORAM unsuitable especially for band-
width constrained clients, e.g., home Internet connections or
mobile devices.
In some cases, shipping computation to the cloud can al-
leviate the client-cloud bandwidth consumption. When the
client does not trust the cloud provider, however, one im-
mediate challenge is how to securely compute in the cloud
without leaking data to the cloud provider. To this end, re-
searchers have suggested combining trusted hardware and
ORAM to securely delegate both computation and stor-
age to the cloud [2, 3, 6, 17, 20, 26]. While this approach
is promising, trusted hardware is not widely deployed on to-
day’s cloud platforms. Instead, we seek a solution that is
readily deployable on today’s cloud service providers.
1.1 Two-Cloud ORAM
We observe the following asymmetry in bandwidth re-
source provisioning: while client-cloud bandwidth is scarce
in many settings such as cellular networks or slower home
Internet connections; network bandwidth in between major
cloud providers (e.g., Amazon Web Services and Microsoft
Azure) is ample.
We show that by spreading data across multiple non-
colluding cloud providers, we can shift the 20X – 35X band-
width cost to inter-cloud communication, while keeping the
client-cloud bandwidth cost minimal — about 2.6X under
typical parametrization, and out of which 2X is necessary
to hide whether each access is a read or write. While a
247general k-cloud scheme exists as described in the full on-
line version [29], we focus on designing a highly optimized
two-cloud solution which we believe to be the more likely
deployment scenario. We provide a full-ﬂedged two-cloud
ORAM implementation, and have successfully deployed it
on two major cloud providers, Amazon Web Services (AWS)
and Microsoft Azure.
While the idea of using multiple non-colluding clouds is
natural, how to design a provably secure and practically ef-
ﬁcient scheme is challenging. The main challenge is how to
avoid passing data through the client during data shuﬄing,
and still ensuring security against a potentially malicious
cloud that can arbitrarily deviate from the prescribed behav-
ior. Multi-server ORAM has been considered in a theoretic
setting by Lu and Ostrovsky [21]. Their construction, how-
ever, focuses on asymptotic performance, and still requires
passing data through the client during shuﬄing. Conse-
quently, their construction would result in at least 20X-35X
client-cloud bandwidth cost under typical parametrization.
Technical highlights. Our main technique is to let the two
clouds shuﬄe the data amongst themselves. Particularly,
one cloud shuﬄes the data blocks, adds an “onion” layer of
encryption, and send them to the other cloud. In this way,
one cloud observes the permutation while the other observes
the accesses to these blocks — and neither cloud observes
both. In the next round, the two clouds switch roles.
To enforce honest behavior when one of the clouds may be
malicious, we design a novel commutative checksum-encryption
construction. At a very high level, the client shares a secret
checksum function with each cloud, such that the clouds can
monitor each other’s actions. After every shuﬄe, about 4λ
checksum bits per block are transferred between the client
and the clouds such that the client can verify the correctness
of the shuﬄe. In the above, λ = 128 is the security parame-
ter. The typical block size is much larger than λ, e.g., 4KB
(size of a memory page) or higher. While transferring entire
blocks to the client during shuﬄing would have incurred
20X-35X cost, by transferring 4λ bits per block we bring
this part of the cost down to 0.1X to 0.2X (out of a total of
2.6X) as shown in Section 5. We also show that a similar
technique may be employed to avoid reading a logarithmic
number of blocks for each data access, which is necessary in
most existing ORAM schemes.
√
Similar to the SSS construction [31], our 2-cloud ORAM
scheme requires the client to store less than 1.5GB of data
for an ORAM of 1TB in capacity (i.e., less than 0.15% of
the ORAM capacity). Particularly, in addition to caching
N ) data blocks where N is the total number of
about O(
blocks, the client also stores about 4 bytes of metadata per
block. While the metadata size is linear in theory; its size
√
in practice is typically comparable to or smaller than the
N ) data blocks cached. Out of theoretic interest, with
O(
suitable modiﬁcations to our scheme, it is possible to achieve
sublinear client storage by applying the recursion technique
described in earlier works [27,31], such that we could (recur-
sively) outsource the linear metadata to the cloud as well. In
practice, however, this is rarely necessary – and even if one
does apply the recursion, the recursion depth rarely exceeds
2 to 3 in practical settings [20, 27].
In addition to minimizing the client-cloud bandwidth con-
sumption, our 2-cloud ORAM scheme also roughly halves
the total bandwidth consumption (including inter-cloud and
client-cloud communication) in comparison with single-cloud
counterparts [31].
Threat model. We assume that at least 1 cloud provider is
honest, i.e., faithfully executes the prescribed protocol. The
other cloud may be malicious and arbitrarily deviate from
the protocol. We do not know ahead of time which cloud is
malicious. It is not within our goal to prevent the malicious
cloud from launching Denial-of-Service (DoS) style attacks
— DoS defense is orthogonal to and outside the scope of
this work. We also cannot prevent a malicious cloud from
voluntarily divulging its local states and views to the hon-
est cloud, which can potentially allow the honest cloud to
learn additional information. For example, a malicious cloud
can simply publish its states and protocol views on a public
website.
However, we do guarantee that as long as there exists at
least one honest cloud, a malicious cloud cannot learn any
information about the client’s logical access patterns. In fact,
any deviation from the prescribed protocol is immediately de-
tectable by the client. In other words, by deviating from the
prescribed protocol, a malicious cloud can only help an hon-
est cloud gain information, but cannot learn anything itself.
Moreover, it will be caught immediately if it ever deviates.
The above intuitive security model is generalized to the
k-cloud setting (when only 1 out of k clouds needs to be
honest), and deﬁned formally using a simulation-based def-
inition in the full online version [29]. We prove that our
constructions are secure under this simulation-based deﬁni-
tion in the full online version [29].
2. PRELIMINARIES
Our algorithm depends on the partitioning framework and
the partition ORAM construction proposed by Stefanov,
Shi, and Song [31], referred to as the SSS construction. We
give a brief background of the SSS construction.
It is important to note that partitions do not represent
clouds. In fact, as will be later explained in our construction,
each partition is split across multiple clouds.
2.1 Partitioning Framework
The SSS partitioning framework [31] allows us to securely
break-up ORAM read/write operations into read/write op-
erations over smaller partitions, where each partition is an
ORAM itself.
The framework consists of two main techniques, partition-
√
ing and eviction. Through partitioning, a bigger ORAM in-
√
N ) smaller ORAM
stance of capacity N is divided into O(
instances (called partitions), each with capacity O(
N ).
While naive partitioning can break security, Stefanov et al. [31]
propose a novel approach to allow partitioning without com-
promising security, as outlined below.
Figure 1 illustrates the partitioning framework. At any
point of time, a block resides in a random partition. The
client stores a position map to keep track of which parti-
tion each block resides in. To access a block whose identiﬁer
is u, the client ﬁrst looks up the position map and deter-
mine block u’s current partition p. Then the client issues an
ORAM read operation to partition p and looks up block u.
On fetching the block from the server, the client logically as-
signs it to a freshly chosen random partition – without writ-
ing the block to the server immediately. Instead, this block
is temporarily cached in the client’s local eviction cache.
248The partitioning framework [31]
√
// Divide the ORAM into
N partitions of size O(
√
N ).
them, re-encrypt them, and then write them back to the
server.
Read(u):
• Look up position map and determine that u is assigned to
• If u is not found in eviction caches:
partition p.
– ReadPartition(p, u)
Else if u is found in local eviction caches:
– ReadPartition(p, ⊥)
//read dummy
• Pick a random partition p(cid:48), add the block identiﬁed by u to
• Call Evict ν times where ν > 1 is the eviction rate.
the eviction caches, and logically assign u to partition p(cid:48).
Write(u, B):
Same as Read(u), except that the block written to the eviction
cache is replaced with the new block.
Evict:
• Pick a random partition p.
• If a block B exists in the eviction cache assigned to partition
• Else, call WritePartition(p, ⊥), where ⊥ represents a
p, call WritePartition(p, B).
dummy block.
Figure 1: The SSS partitioning framework [31]. Our
construction uses this framework to express ORAM Read