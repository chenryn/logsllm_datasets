defi ne session-handling rules, which make use of the cookie jar and request
macros to deal with specifi c barriers to automation.
Each rule comprises a scope (what the rule applies to) and actions (what the
rule does). For every outgoing request that Burp makes, it determines which
of the defi ned rules are in scope for the request and performs all those rules’
actions in order.
The scope for each rule can be defi ned based on any or all of the following
features of the request being processed, as shown in Figure 14-13:
n The Burp tool that is making the request
n The URL of the request
n The names of parameters within the request
Each rule can perform one or more actions, as shown in Figure 14-14, includ-
ing the following:
n Add cookies from the session-handling cookie jar.
n Set a specifi c cookie or parameter value.
n Check whether the current session is valid, and perform subactions con-
ditionally on the result.
n Run a macro.
n Prompt the user for in-browser session recovery.
All these actions are highly configurable and can be combined in
arbitrary ways to deal with virtually any session-handling mechanism.
Being able to run a macro and update specifi ed cookie and parameter values
based on the result allows you to automatically log back in to an applica-
tion when you are logged out. Being able to prompt for in-browser session
recovery enables you to work with login mechanisms that involve keying
a number from a physical token or solving a CAPTCHA puzzle (described
in the next section).
cc1144..iinndddd 660066 88//1199//22001111 1122::1155::2255 PPMM
Stuttard c14.indd V3 - 08/11/2011 Page 607
Chapter 14 n Automating Customized Attacks 607
Figure 14-13: Configuring the scope of a session-handling rule
Figure 14-14: Configuring actions for a session-handling rule
cc1144..iinndddd 660077 88//1199//22001111 1122::1155::2255 PPMM
Stuttard c14.indd V3 - 08/11/2011 Page 608
608 Chapter 14 n Automating Customized Attacks
By creating multiple rules with different scopes and actions, you can defi ne
a hierarchy of behavior that Burp will apply to different URLs and parameters.
For example, suppose you are testing an application that frequently terminates
your session in response to unexpected requests and also makes liberal use of
an anti-CSRF token called __csrftoken. In this situation you could defi ne the
following rules, as shown in Figure 14-15:
n For all requests, add cookies from Burp’s cookie jar.
n For requests to the application’s domain, validate that the current session
with the application is still active. If it isn’t, run a macro to log back in to
the application, and update the cookie jar with the resulting session token.
n For requests to the application containing the __csrftoken parameter,
fi rst run a macro to obtain a valid __csrftoken value, and use this when
making the request.
Figure 14-15: A set of session-handling rules to handle session termination and
anti-CSRF tokens used by an application
cc1144..iinndddd 660088 88//1199//22001111 1122::1155::2266 PPMM
Stuttard c14.indd V3 - 08/11/2011 Page 609
Chapter 14 n Automating Customized Attacks 609
The confi guration needed to apply Burp’s session handling functionality to
the features of real-world applications is often complex, and mistakes are easily
made. Burp provides a tracer function for troubleshooting the session handling
confi guration. This function shows you all of the steps performed when Burp
applies session handling rules to a request, allowing you to see exactly how
requests are being updated and issued, and identify whether your confi gura-
tion is working in the way that you intended. The session handling tracer is
shown in Figure 14-16.
Figure 14-16: Burp’s session handling tracer, which lets you monitor and debug your
session handling rules
Having confi gured and tested the rules and macros that you need to work
with the application you are targeting, you can continue your manual and auto-
mated testing in the normal way, just as if the obstacles to testing did not exist.
cc1144..iinndddd 660099 88//1199//22001111 1122::1155::2266 PPMM
Stuttard c14.indd V3 - 08/11/2011 Page 610
610 Chapter 14 n Automating Customized Attacks
CAPTCHA Controls
CAPTCHA controls are designed to prevent certain application functions from
being used in an automated way. They are most commonly employed in functions
for registering e-mail accounts and posting blog comments to try to reduce spam.
CAPTCHA is an acronym for Completely Automated Public Turing test to tell
Computers and Humans Apart. These tests normally take the form of a puzzle
containing a distorted-looking word, which the user must read and enter into
a fi eld on the form being submitted. Puzzles may also involve recognition of
particular animals and plants, orientation of images, and so on.
CAPTCHA puzzles are intended to be easy for a human to solve but diffi cult
for a computer. Because of the monetary value to spammers of circumventing
these controls, an arms race has occurred in which typical CAPTCHA puzzles
have become increasingly diffi cult for a human to solve, as shown in Figure
14-17. As the CAPTCHA-solving capabilities of humans and computers converge,
it is likely that these puzzles will become increasingly ineffective as a defense
against spam, and they may be abandoned. They also present accessibility issues
that currently are not fully resolved.
Figure 14-17: A CAPTCHA puzzle
CAPTCHA puzzles can be circumvented in various ways, only some of which
are applicable in the context of performing security testing.
Attacking CAPTCHA Implementations
The most fruitful place to look for ways to bypass a CAPTCHA control is the
implementation of how the puzzle is delivered to the user and how the applica-
tion handles the user’s solution.
A surprising number of CAPTCHA implementations expose the puzzle solu-
tion to the client in textual form. This can arise in various ways:
n The puzzle image is loaded via a URL that includes the solution as a
parameter, or the image name is set to the CAPTCHA solution.
n The puzzle solution is stored in a hidden form fi eld.
n The puzzle solution appears within an HTML comment or other location
for debugging purposes.
In these situations, it is easy for a scripted attack to retrieve the response that
contains the puzzle solution and submit it in the next attack request.
cc1144..iinndddd 661100 88//1199//22001111 1122::1155::2277 PPMM
Stuttard c14.indd V3 - 08/11/2011 Page 611
Chapter 14 n Automating Customized Attacks 611
TRY IT!
http://mdsec.net/feedback/12/
http://mdsec.net/feedback/24/
http://mdsec.net/feedback/31/
A further common bug in CAPTCHA implementations is that a puzzle can be
solved manually on a single occasion, and the solution can be replayed in multiple
requests. Normally, each puzzle should be valid for only a single attempt, and
the application should discard it when an attempted solution is received. If this
is not done, it is straightforward to solve a puzzle once in the normal way and
then use the solution to perform an unlimited number of automated requests.
TRY IT!
http://mdsec.net/feedback/39/
NOTE Some applications have a deliberate code path that circumvents the
CAPTCHA to permit use by certain authorized automated processes. In these
instances, it is often possible to bypass the CAPTCHA simply by not supplying
the relevant parameter name.
Automatically Solving CAPTCHA Puzzles
In principle, most types of CAPTCHA puzzles can be solved by a computer, and
in practice, many high-profi le puzzle algorithms have been defeated in this way.
For standard puzzles involving a distorted word, solving the puzzle involves
the following steps:
1. Removal of noise from the image
2. Segmentation of the image into individual letters
3. Recognition of the letter in each segment
With today’s technology, computers are quite effective at removing noise and
recognizing letters that have been correctly segmented. The most signifi cant
challenges arise with segmenting the image into letters, particularly where
letters overlap and are heavily distorted.
For simple puzzles in which segmentation into letters is trivial, it is likely
that some homegrown code can be used to remove image noise and pass the
text into an existing OCR (optical character recognition) library to recognize the
letters. For more complex puzzles in which segmentation is a serious challenge,
cc1144..iinndddd 661111 88//1199//22001111 1122::1155::2277 PPMM
Stuttard c14.indd V3 - 08/11/2011 Page 612
612 Chapter 14 n Automating Customized Attacks
various research projects have successfully compromised the CAPTCHA puzzles
of high-profi le web applications.
For other types of puzzles, a different approach is needed, tailored to the
nature of the puzzle images. For example, puzzles involving recognition of
animals or orientation of objects need to use a database of real images, which
are reused in multiple puzzles. If the database is suffi ciently small, an attacker
can manually solve enough images in the database to make an attack feasible.
Even if noise and other distortions are applied to images, to make each reused
image appear different to a computer, fuzzy image hashes and color histogram
comparison can often be used to match the image from a given puzzle with one
that has already been solved manually.
Microsoft’s Asirra puzzles use a database of several million images of cats
and dogs, derived from a real-world directory of adoptable pets. For an attacker
with a big enough monetary incentive, even this database could be solved eco-
nomically using human solvers, as described in the next section.
In all these cases, it is worth noting that to effectively circumvent a CAPTCHA
control, you don’t need to be able to solve puzzles with perfect accuracy. For
example, an attack that solved only 10% of puzzles correctly could still be highly
effective at performing automated security testing, or delivering spam, as the
case may be. An automated exercise that takes ten times as many requests nor-
mally is still faster and less painful than the corresponding manual exercise.
TRY IT!
http://mdsec.net/feedback/8/
Using Human Solvers
Criminals who need to solve large numbers of CAPTCHA puzzles sometimes
employ techniques that are not applicable in the context of web application
security testing:
n An apparently benign website can be used to induce human CAPTCHA
proxies to solve puzzles that are passed through from the application being
targeted. Typically, the attacker offers the inducement of a competition
prize, or free access to pornography, to entice users. When a user completes
the registration form, he is presented with a CAPTCHA puzzle that has
been fetched in real time from the target application. When the user solves
the puzzle, his solution is relayed to the target application.
n Attackers can pay human CAPTCHAdrones in developing countries to
solve large numbers of puzzles. Some companies offer this service, which
costs less than $1 for every 1,000 puzzles that are solved.
cc1144..iinndddd 661122 88//1199//22001111 1122::1155::2277 PPMM
Stuttard c14.indd V3 - 08/11/2011 Page 613
Chapter 14 n Automating Customized Attacks 613
Summary
When you are attacking a web application, the majority of the necessary tasks
need to be tailored to that application’s behavior and the methods by which it
enables you to interact with and manipulate it. Because of this, you will often
fi nd yourself working manually, submitting individually crafted requests and
reviewing the application’s responses.
The techniques described in this chapter are conceptually intuitive. They
involve leveraging automation to make these customized tasks easier, faster,
and more effective. It is possible to automate virtually any manual procedure
you want to carry out using the power and reliability of your own computer to
attack your target’s defects and weak points.
In some cases, obstacles exist that prevent you from straightforwardly apply-
ing automated techniques. Nevertheless, in most cases these can be overcome
either by refi ning your automated tools or by fi nding a weakness in the appli-
cation’s defenses.
Although conceptually straightforward, using customized automation effec-
tively requires experience, skill, and imagination. You can use tools to help, or
you can write your own. But there is no substitute for the intelligent human
input that distinguishes a truly accomplished web application hacker from a
mere amateur. When you have mastered all the techniques described in the
other chapters, you should return to this topic and practice the different ways
in which customized automation can be used to apply those techniques.
Questions
Answers can be found at http://mdsec.net/wahh.
1. Name three identifi ers of hits when using automation to enumerate identi-
fi ers within an application.
2. For each of the following categories, identify one fuzz string that can often
be used to identify it:
(a) SQL injection
(b) OS command injection
(c) Path traversal
(d) Script fi le inclusion
3. When you are fuzzing a request that contains a number of different param-
eters, why is it important to perform requests targeting each parameter
in turn and leaving the others unmodifi ed?
cc1144..iinndddd 661133 88//1199//22001111 1122::1155::2277 PPMM
Stuttard c14.indd V3 - 08/11/2011 Page 614
614 Chapter 14 n Automating Customized Attacks
4. You are formulating an automated attack to brute-force a login function
to discover additional account credentials. You fi nd that the application
returns an HTTP redirection to the same URL regardless of whether you
submit valid or invalid credentials. In this situation, what is the most likely
means you can use to detect hits?
5. When you are using an automated attack to harvest data from within the
application, you will often fi nd that the information you are interested in
is preceded by a static string that enables you to easily capture the data
following it. For example:
<input type=”text” name=”LastName” value=”
On other occasions, you may fi nd that this is not the case and that the data
preceding the information you need is more variable. In this situation,
how can you devise an automated attack that still fulfi lls your needs?
cc1144..iinndddd 661144 88//1199//22001111 1122::1155::2277 PPMM
Stuttard c15.indd V2 - 08/17/2011 Page 615
CHAPTER
15
Exploiting Information
Disclosure
Chapter 4 described various techniques you can use to map a target applica-
tion and gain an initial understanding of how it works. That methodology
involved interacting with the application in largely benign ways to catalog its
content and functionality, determine the technologies in use, and identify the
key attack surface.
This chapter describes ways in which you can extract further information
from an application during an actual attack. This mainly involves interacting
with the application in unexpected and malicious ways and exploiting anoma-
lies in the application’s behavior to extract information that is of value to you.
If successful, such an attack may enable you to retrieve sensitive data such as
user credentials, gain a deeper understanding of an error condition to fi ne-tune
your attack, discover more details about the technologies in use, and map the
application’s internal structure and functionality.
Exploiting Error Messages
Many web applications return informative error messages when unexpected
events occur. These may range from simple built-in messages that disclose only
the category of the error to full-blown debugging information that gives away
a lot of details about the application’s state.
615
cc1155..iinndddd 661155 88//1199//22001111 1122::1166::0066 PPMM
Stuttard c15.indd V2 - 08/17/2011 Page 616
616 Chapter 15 n Exploiting Information Disclosure
Most applications are subject to various kinds of usability testing prior to
deployment. This testing typically identifi es most error conditions that may
arise when the application is being used in the normal way. Therefore, these
conditions usually are handled in a graceful manner that does not involve any
technical messages being returned to the user. However, when an application
is under active attack, it is likely that a much wider range of error conditions
will arise, which may result in more detailed information being returned to the
user. Even the most security-critical applications, such as those used by online
banks, have been found to return highly verbose debugging output when a
suffi ciently unusual error condition is generated.
Script Error Messages
When an error arises in an interpreted web scripting language, such as VBScript,
the application typically returns a simple message disclosing the nature of the
error, and possibly the line number of the fi le where the error occurred. For
example:
Microsoft VBScript runtime error 800a0009
Subscript out of range: [number -1]
/register.asp, line 821
This kind of message typically does not contain any sensitive information
about the state of the application or the data being processed. However, it may
help you narrow down the focus of your attack. For example, when you are
inserting different attack strings into a specifi c parameter to probe for common
vulnerabilities, you may encounter the following message:
Microsoft VBScript runtime error ‘800a000d’
Type mismatch: ‘ [string: “’”]’
/scripts/confirmOrder.asp, line 715
This message indicates that the value you have modifi ed is probably being
assigned to a numeric variable, and you have supplied input that cannot be so
assigned because it contains nonnumeric characters. In this situation, it is highly
likely that nothing can be gained by submitting nonnumeric attack strings as
this parameter. So for many categories of bugs, you are better off targeting
other parameters.
A different way in which this type of error message may assist you is in
giving you a better understanding of the logic that is implemented within the
server-side application. Because the message discloses the line number where
the error occurred, you may be able to confi rm whether two different malformed