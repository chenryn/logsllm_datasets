s=8
s=16
s=128
0
0.0001
0.001
0.01
0.1
Start-up Delay (fraction of total object duration)
s
s
o
L
e
v
i
t
l
a
u
m
u
C
m
u
m
x
a
M
i
k
c
a
b
y
a
P
d
e
l
t
p
u
r
r
e
n
n
U
t
i
r
o
f
0.2
0.15
0.1
0.05
0
Variable ‘a’, Scenario A
Variable ‘a’, Scenario B
Constant ‘a’
0.01
0.1
1
Position in Stream
Figure 7: Impact of Streaming Rate on
Basic RPB Performance (n = 2, 10% Packet Loss)
Figure 8: Loss Tolerance Using Variable a
(K = 10, r = 1, n = 2, d = 0.008T )
to tolerate a higher loss rate than p for a later segment, with
no interruption in playback if the cumulative loss probabil-
ity at the end of receiving the later segment is still less than
or equal to p. Permitting clients to begin reception of each
segment at an arbitrary point in time enables this useful
work-ahead capability.
As discussed in extensive previous work (e.g., [19] and
the references therein), packet loss is typically quite bursty.
Spikes in the packet loss rate imply that earlier segments in
the Basic RPB system require a higher level of loss protec-
tion than later segments.
A greater level of protection for earlier segments can be
accomplished by letting each segment have a diﬀerent value
ak that determines the default time the client will listen to
the stream for segment k. For a given average loss rate p and
a = 1/(1 − p) times the decode eﬃciency, earlier segments
will have ak larger than a and later segments will have ak
lower than a. The RPB segment sizes for the speciﬁed values
of ak are easily derived as follows:
k−1(cid:7)
r +
a1 × l1
k−1(cid:7)
j=k−s
lj
ak × lk
r =
1  s.
(10)
The above speciﬁcation for RBP systems can be modiﬁed
to include non-negligible multicast join or segment decode
times, as discussed for the Basic RPB protocols.
For a given environment with speciﬁed values of n, r, and
ak, the required server bandwidth (B = K × r) can be plot-
ted as a function of start-up delay, to support server provi-
sioning decisions.
Figure 8 shows that a variety of skews in the loss pro-
tection can be achieved with a ﬁxed server bandwidth and
start-up delay. That is, for K = 10, r = 1, n = 2, and
d = 0.008T , the ﬁgure shows the cumulative loss protection
provided with ak equal for all segments, and the loss protec-
tion provided in two example scenarios with variable ak. For
other scenarios, a change in server bandwidth and/or start-
up delay may be needed to provide the desired protection
for both the initial segments as well as the later segments.
In any case, a careful analysis of the traﬃc characteristics
in the implementation environment is needed to properly
tailor the loss protection. Note also that in many environ-
ments (including the Internet and wireless networks) only a
small to moderate skew in the protection may be desired,
because more signiﬁcant spikes in the loss rate indicate that
the total transmission rate for the media object should be
reduced in order to alleviate congestion in the transmission
network. This issue is discussed next.
4.4 Client Heterogeneity
The RPB family of protocols has so far been deﬁned as-
suming that all clients have (1) the assumed maximum ag-
gregate transmission rate equal to n times the media play-
back rate, and (2) the assumed maximum cumulative loss
probabilities at the end of receiving each segment, which
)
n
o
i
t
a
r
u
d
t
c
e
b
o
j
l
a
t
o
l
y
a
e
D
p
u
-
t
r
a
S
t
t
f
o
n
o
i
t
c
a
r
f
(
s=2
s=8
s=32
0.1
0.08
0.06
0.04
0.02
0
0.1
0.12
0.14
0.16
0.18
0.2
Actual Loss Probability
e
t
a
R
a
t
a
D
t
n
e
i
l
C
l
a
u
t
c
A
3.2
3
2.8
2.6
2.4
2.2
2
1.8
1.6
s=2
s=8
s=32
0
0.05
0.1
0.15
0.2
Actual Loss Probability
(a) Start-up Delay vs. Loss Probability
(b) Client Data Rate vs. Loss Probability
Figure 9: RPB Performance for Heterogeneous Clients (B = 10, n = 2, p = 0.1)
implies that all clients also have (approximately) the same
start up delay.
A client with a signiﬁcantly higher (or lower) aggregate
transmission rate should receive a higher (or lower) quality
version of the media object, which may be done using one
of two approaches. First, several diﬀerent versions of the
object that are encoded for diﬀerent bit rates might each be
delivered using the RPB protocol. If the client may dynami-
cally switch between the diﬀerent versions based on changes
in the transmission channel, then the RPB protocol for each
version should have the same parameter values (i.e., n, r,
K, and ak) to minimize interruption in playback when ver-
sion changes are made. Second, the media object might be
compressed using a layered encoding scheme, and the RPB
protocol might be applied to each encoded layer.
In the
simplest case, the parameters of the RPB protocol would be
the same for each layer. More complex schemes that allow
each layer to have diﬀerent parameters, for example to im-
plement greater loss protection for the base layer, can also
be designed such that the time to receive each segment k is
the same for each layer. In any case, a clients with a given
aggregate transmission bandwidth (perhaps experimentally
determined) subscribes to the appropriate number of layers,
possibly dynamically in response to observed changes in the
transmission channel.
In some cases, smaller heterogeneities in client capabili-
ties can be accommodated using available tradeoﬀs among
start-up delay, client data rate, and packet loss rate. As
an example, Figure 9(a) shows how a client with a higher
packet loss rate than speciﬁed in the RPB protocol design
(i.e., p = 0.1) can achieve full packet loss recovery and un-
interrupted playback by adopting a higher start-up delay.
One possible technique by which this tradeoﬀ could be ex-
ploited would involve the client monitoring the packet loss
rate prior to playing the ﬁrst segment (i.e., while receiving
the ﬁrst s segments), and simply delaying beginning of play
out if the loss rate is deemed excessive.
As another example, Figure 9(b) shows that if a client has
higher aggregate transmission rate than speciﬁed in the de-
sign of the RPB protocol, the client can tolerate a higher loss
rate than speciﬁed in the protocol design while still achiev-
ing uninterrupted playback, by listening to more streams
concurrently than speciﬁed in the RPB protocol. The ﬁgure
illustrates this for three RPB protocols, each designed for
B = 10, n = 2, and p = 0.1. Each protocol is designed
for a diﬀerent value of s (i.e., a diﬀerent segment stream-
ing rate, r = n/s). If the actual loss probability is greater
than 0.1, the client can achieve uninterrupted playback if
the client can achieve the actual transmission rate (greater
than 2) given in the curve for the RPB protocol employed
to deliver the object. Each step in the curve indicates that
the client must listen to one additional stream concurrently
to achieve uninterrupted playback. Also note that a slightly
larger start-up delay will also be required to ensure that the
initial s segments are received in time for playback if these
segments have higher than the anticipated loss probability.
Conversely, a client that observes lower than anticipated loss
probability can in some cases listen to fewer than s streams
for uninterrupted playback, as illustrated in the ﬁgure for
actual loss probability less than 0.1.
In the context of the mechanisms for accommodating het-
erogeneous clients, the server can also use mechanisms such
as redundant transmission paths to reduce the likelihood
that the cumulative loss probability to a given client will
exceed the maximum that can be tolerated. If, in spite of
such mechanisms, the cumulative loss probability observed
by a given client exceeds the loss for which the protocol is
designed, the only alternative is to switch to a lower quality
media stream (by subscribing to fewer layers or a diﬀerent
version). If that fails, interruption in playback is unavoid-
able.
Further speciﬁcation of the mechanisms for tolerating het-
erogeneous client capabilities in RPB systems is left for fu-
ture work.
5. RELIABLE BANDWIDTH SKIMMING
The Reliable Bandwidth Skimming (RBS) protocols that
are developed in this section have at least two advantages
compared to the RPB protocols. First, they automatically
reduce server bandwidth when client request rate decreases.
Second, they support more general (but not zero delay) “fast
forward” and “skip ahead” client interactive requests. How-
ever, the RBS protocols are somewhat less eﬃcient than
the RPB protocols with respect to the amount of data re-
ceived by each client, and the RBS protocols may be less
able to tolerate bursty packet loss without interruption in
playback. Furthermore, servers that use the RBS protocols
require client requests in order to initiate a new transmis-
sion of the media stream, whereas servers that use the RPB
protocols can use a separate multicast stream to announce
the current channels that are delivering periodic broadcasts
and the parameters of those broadcasts.
The RBS protocols divide the media stream into segments
that have ﬁxed duration as short as possible for the speciﬁed
loss protection. Each segment is “stretched” using erasure
codes. The server transmits 1/(1 − p) encoded packets for
each segment using a rate 1.0 primary stream and a rate
p/(1 − p) secondary stream, where p is the speciﬁed max-
imum packet loss rate for each segment. The secondary
stream is oﬀset in time by the segment duration to pro-
vide some protection against burst losses. The client begins
playing the media after the ﬁrst segment has been received
on both streams, and decoded. Assuming the packet loss
rate for each segment is not greater than p, each subsequent
segment is received and decoded prior to its play point.
The primary stream (and the corresponding “redundant”
secondary stream) can be merged with earlier primary (and
corresponding secondary) streams in the same way that merg-
ing is accomplished in the original bandwidth skimming pro-
tocols. For example, if the Partition stream merging method
described in Section 2 is used, the primary and secondary
streams are each transmitted on their own k channels, with
ﬁne grained interleaving of the respective packets on the
channels. Clients receive k + 1 primary and k + 1 sec-
ondary substreams, yielding aggregate client transmission
rate n = (1 + 1/k)(1 + p/(1− p)), in units of the media play-
back bit rate. Merging the secondary streams that carry the
redundant data is the principal extension to previously pro-
posed schemes for live or scheduled broadcasts, which also
involve establishing separate streams of redundant data [9,
30].
Various extensions to RBS for tolerating heterogeneous
client capabilities are possible. For example, feedback to
the server reporting high loss rate could trigger the server
to create one or more new channels in a secondary stream for
transmitting more redundant data to provide increased pro-
tection against packet loss. Further speciﬁcation of methods
for accommodating heterogeneous clients in RBS systems is
left for future work.
Figure 10 illustrates the performance of reliable band-
width skimming protocols for maximum loss rate equal to
10%, and various values for n, the achievable client data
rate.4 For comparison purposes, the graphs also show the
lower bound from equation (3), which assumes an unlim-
ited client data rate. The principal observations from this
ﬁgure are that the RBS protocols adapt to varying client
request rate, and in light of the assumed client data rates,
yield performance reasonably close to the lower bound.
We have recently implemented a prototype system to ex-
periment with on-demand streaming protocols. This proto-
type implements bandwidth skimming with aggregate client
transmission rate (n) equal to 2, and is installed in the
eTeach system which handles 1500 client requests per day