within the interface type speciﬁcation, the data element type
speciﬁcation and the speciﬁcation of the internal behavior of
the component prototype are relevant for the overall process.
Due to the complexity of the standard, it is not feasible to give
a more detailed list of elements. Instead we advise the reader
to consult the Speciﬁcation of RTE [3] that lists all interface
types and their associated signatures.
After parsing the ARXML ﬁle, we provide the user with a
browsable list of the software components that compose the
system and their corresponding interface functions. During the
conﬁguration phase, the user can select the various instrumen-
tation methods (.c-ﬁle, .h-ﬁle or .o-ﬁle) and locations (SW-C
or RTE) for each interface of an SW-C, as derived from the
component speciﬁcation in the system model, and supply code
for wrapper functionality (e.g. monitor or FI). By offering the
various choices of methods and location, we provide the user
a customizable way to drive instrumentation.
Lastly, in the instrumentation phase (shown on the right
side of Figure 4), all interfaces of each CPS are iterated,
and, depending on the conﬁguration, a method- and location-
speciﬁc procedure that generates the wrapper and instruments
the interface is called. A log ﬁle of the instrumentation is
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:19:13 UTC from IEEE Xplore.  Restrictions apply. 
ARXMLSystem ModelParse Top-Level Composition (TLC)Parse Each Component of TLCData Element ReferencesInterface Type ReferencesComponent Prototypes (CPs)ParsingParser OutputIterate Component Prototypes (CPs)User Config.InstrumentationImple-mentationParse Internal Behaviorof CPsIterate all Interfaces ofeach CPEvaluate Config. of InstrumentationSW-C/ RTE .c-fileSW-C/ RTE .h-fileSW-C/ RTE .o-fileFig. 5. Model of an anti-lock braking system (ABS), instrumented with monitors and fault injectors at selected interfaces.
.h instrumentation method, as both tools generate the RTE’s
header ﬁle without interface prototype declarations.
For each of our experiments, we compare the experiment’s
outcome to a golden run made on a reference setup without
any instrumentation. To map the 5 experimentation setups to
the actual system, we decided to instrument the system with
a ﬁxed set of monitors and shift the fault injector location,
based on the current setup. The instrumentation methods and
fault injector locations are as follows:
• No instrumentation Reference setup.
• SW-C .c BrakePedalPosition in SW-C BrakePedalSensor.
• SW-C .h BrakeTorque FL in SW-C BrakeController.
• SW-C .o WheelSpeed in SW-C WheelSpeedSensor FL.
• RTE .c VehicleSpeed in SW-C VehicleSpeed.
• RTE .h Not evaluated.
• RTE .o RequestedBrakeTorque in SW-C ABS FL.
For each setup, we have implemented three classes of
wrapper behavior: (a) skeleton, (b) monitor, and (c) monitor
with fault injector combined. In this context skeleton means
that the wrapper implements no other behavior than pass-
through. Comparing the reference system with a system im-
plementing skeleton wrapper behavior gives information about
the overhead of the instrumentation itself, while comparing
the monitor and fault
injector with the skeleton behavior,
gives information about the implementation efﬁciency of the
behavior. As we will see in the results later on, an inefﬁcient
implementation of wrapper functionality has a much higher
impact on system overhead than the instrumentation itself.
B. ABS System and Simulator in a Nutshell
The ABS system we consider consists of nine SW-Cs and is
embedded in an environment simulator, which provides stimuli
to the system and receives reactions from the system. In our
case, these stimuli are the input values of the brake pedal
sensor and the two wheel speed sensors. The system reacts to
these stimuli by applying a certain brake torque to each wheel.
The test case we simulate is a full braking from 50 km/h
to 0 km/h with a deceleration of -7 m/s2 in the optimal case
of non-blocking wheels and -6 m/s2 in the blocking case.
The runnables within the system’s components are scheduled
periodically every 20 ms and implemented as follows.
BrakePedalSensor polls the BrakePedal I/O port for a brake
pedal position value, which is provided by the simulator as
input stimulus. After scaling and converting the pedal position
value to a suitable data type, it is sent to the BrakeController,
which provides per-wheel brake torque values to the front left
(ABS FL) and front right (ABS FR) ABS controllers.
Depending on the individual WheelSpeed, VehicleSpeed and
BrakeTorque, ABS FL and ABS FR calculate a per-wheel
brake torque that maximizes the brake retardation for the given
input values. The brake torque is then sent to the wheel’s
respective BrakeActuator and fed back to the simulator, which
calculates this period’s deceleration based on the current
simulation state and the applied brake torque.
C. Fault Injection Experiment
To show the application of our approach in a typical
dependability assessment scenario, we conduct a series of
fault injection (FI) experiments on the presented ABS system.
FI [11] is a widely accepted technique for experimental
robustness evaluation and is applicable at varied component
and interface levels. For our evaluation, we utilized SWIFI
(Software Implemented FI) to instrument the software compo-
nent under evaluation (CUE). During the SWIFI experiment,
the data sent to a CUE via its interface is intentionally modiﬁed
in a systematic way, i.e., a fault is introduced, with the intent to
expose the CUE to unexpected input. Subsequently, the CUE’s
behavior, in response to the injected fault, as well as the overall
effect on the system, is analyzed.
In order to verify the effectiveness of each instrumentation
method, we utilize each to instrument the system with a set
of monitors and a fault injector. We then conduct a series
of injection runs on the instrumented system, by ﬂipping a
single bit of an intercepted data value when a certain trigger
condition is met. In our setup, the fault injection is time-
triggered at a model time of 300ms after the simulator has
initiated a full application of the brake. As all interfaces in
our example system transmit 16-bit values, each injection
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:19:13 UTC from IEEE Xplore.  Restrictions apply. 
SWIFI EXPERIMENTS: DETECTED DEVIATIONS AND EXPOSURE TIMES FOR DIFFERENT INJECTION LOCATIONS AND BIT FLIP POSITIONS.
TABLE I
Detected deviations
Error persistence (ms)
BrakeTorque FL
Detected deviations
Error persistence (ms)
WheelSpeed
Injection location
BrakePedalPosition
Detected deviations
Error persistence (ms)
VehicleSpeed
Detected deviations
Error persistence (ms)
RequestedBrakeTorque
Detected deviations
Error persistence (ms)
0
4
40
2
40
3
20
2
20
2
40
1
4
40
2
40
3
20
2
20
2
40
2
4
40
2
40
3
20
2
20
2
40
3
4
40
2
40
3
20
2
20
2
40
4
4
40
2
40
3
20
2
20
2
40
5
4
40
2
40
428
1840
2
20
2
40
6
4
40
2
40
3
20
2
20
2
40
7
4
40
2
40
428
1840
2
20
2
40
8
4
40
2
40
449
1840
436
1840
5
40
9
4
40
2
40
458
1840
451
1840
5
40
10
4
40
2
40
243
1940
242
1940
5
40
11
4
40
2
40
458
1840
457
1840
425
1840
12
4
40
2
40
243
1940
457
1840
5
40
13
4
40
2
40
243
1940
457
1840
647
1940
14
15
454
1840
452
1840
647
1940
454
1840
645
1940
644
1940
452
1840
243
1940
457
1840
645
1940
campaign consists of 17 runs; one golden run that we use for
reference, and 16 fault injection runs in which we individually
ﬂip a bit at a distinct position of a 16-bit wide data value.
For each test run, we compare the output of the interface
monitors against the golden run in order to determine whether
the monitors were able to detect the inserted fault, and to
analyze its impact on system behavior.
Before presenting our results, our choice of the single bit
ﬂip fault model requires a short discussion on its relevance
and representativeness. AUTOSAR is a new standard that
manufacturers are just starting to adapt and use in production
systems. Therefore the knowledge on actual fault types within