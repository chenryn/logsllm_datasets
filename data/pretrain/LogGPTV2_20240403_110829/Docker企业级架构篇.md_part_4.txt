构建环境。
2.）集中化管理——所有开发机器和构建服务器的构建环境，是来自于同一个代码仓库中心
或服务器，且环境设置能及时更新。
3.）隔离性——项目的各个子模块相互隔离，而不是相互依赖。
4.）并行性——并行构建子模块，提高构建效率。
虽然用依赖管理工具（Maven、 Pip、 Rake），配置管理工具(Puppet,、Chef) 和虚
拟化工具（Vagrant），也能建立一个稳定、集中管理的构建系统，但是这也有各种问题。不
是所有的项目都需要所有这些工具，但是任何长时间运行的大项目都需要自动化到这个程
度。好了，现在该我们Docker出场了；无需投入大量时间和资源，Docker和其生态系统
能帮助我们支持上述工具。我们来看看为应用创建集中化构建环境的步骤：
2.1.构建系统扩展带来的挑战
2.2解决方案和最佳实现
2.3.利用Docker进行系统构建
 集中化构建环境
 用Docke打包应用
 用Docker compose生成构建环境
2.4.通过Docker和Jenkins进行持续集成（CI）
 分支模型
 用Jenkins创建CI流程
 构建 go-auth服务
 打包Go Auth
 运行集成测试
原文包含了完整的代码及相关说明，由于篇幅有限这里我们就不再分别展开，对其中细
节感兴趣的的朋友可以自行去看：
基于Docker的构建流程 - 持续集成及测试：
http://www.cloudsoar.com/about/blog/1/Rancher/v1.1/
 番外篇：
OK, 关于Docker企业级架构篇这里我们先告一个段落。下面是番外，关于企业数据迁
移的。开篇我们说到过：企业关心如何将应用在不同操作系统间实现无缝迁移？我们来看看
这篇关于Docker和存储的文章：
Docker容器采用两种不同的数据存储模式，一种是对Root Image采用分层文件系统
的方式，一种是对应用数据采用了Volume接口。
1. Docker容器和存储系统之Root Image分层文件系统
要想在生产环境中部署Docker，开发运维人员必须还要问自己关于数据存储的几个问
题：
1．）Docker的数据存储组织形式是什么？
2．）Docker目前存储生态圈各个公司的技术特点？
3．）Docker的出现对未来存储后端要求会带来哪些技术变革？
关于Docker存储的介绍目前国内比较少，作为一名在存储和云计算领域扎根多年的IT
人，我希望能够亲自研究这些课题，抛砖引玉，分享讨论。其中的观点不一定都是正确的，
但是希望能够引起更多人的思考和共鸣。
1.1 Docker 的整体数据存储方式
要说明这个问题，我们可先看看容器和 VM 的区别，看看他们对存储有哪些不一样的
要求：
容器和VM，几乎所有人都会说容器就是一种比VM更轻更优的虚拟化技术。其实，我
的理解不太一样，我认为容器和VM最大的不同在于容器不是VM。这个，不是废话么。仔
细分析一下，容器的重点其实不在虚拟化技术，它叫 Container, 并没有 Virtual 这个词。
它的关注核心已经从冷冰冰的 Machine，上升到了如何更好的去承载应用。这个是有本质
区别的。VM关注的是如何让 Machine更加高效，VM发展的再厉害，它也是一种更高级
的Machine。它看待后端存储其实是和一个物理Machine看待后端存储是一致的。而容器
呢，它希望后端存储对它来说是透明的，不用它关心的，它更加关心的是应用数据的组织形
式。
下面这个表是我做的一些对比
VM相关的存储技术已经有很多的介绍了。这里我们继续把和容器相关的存储知识简单
展开的讨论一下。
容器的 Root Image 存储就是实现分层的文件组织和写时复制 CoW， 如 AUFS、
Device Mapper、ZFS。这些技术满足了容器的核心价值，即极快的创建速度，极小的存储
资源消耗以及容器迁移的便捷性。他们又分成了三类：
AUFS、Overlay : 联合文件系统。
DeviceMapper：CoW块存储。
ZFS、btrfs: CoW文件系统。
Docker并不推荐采用Root Image的存储方式来存储应用数据。因为应用数据对安全、
可用性、共享、性能等方面的要求和Root Image的要求是完全不一样的。后面我们还会专
门介绍。Docker采用了Volume这样一个独立的数据访问接口，应用通过Volume去访问
相关的数据，Volume 的实现和 CoW 的分层文件系统完全独立。Volume 通过 Rancher
Convoy或者Flocker这样的存储驱动去管理和访问具体的存储设备。
2. Docker容器和存储系统之Volume存储接口
为什么我们需要Volume这样的数据接口？首先我们要深刻理解的是：Docker容器是
承载应用的，是对应用环境的抽象而不是对OS运行环境的抽象。
Docker 容器天生设计就是为了应用的运行环境打包、启动、迁移、弹性拓展，所以
Docker容器一个最重要的特性就是disposable, 是可以被丢弃处理，稍瞬即逝的。而应用
访问的重要数据可不是 disposable 的，这些重要数据需要持久化的存储保持。Docker 提
出了 Volume 数据卷的概念就是来应对数据持久化的。如果把容器比喻成一个人，那么这
个人的重要数据（物质上的）就是他的财产（钱） 。容器可以不存在了，但是数据必须还
要存在。小沈阳说，人生最大的痛苦就是人没了，钱还在。容器会说，正相反，人生最大的
幸福就是我不在了, 数据还在。所以，定义好需要持久化的数据，采用Volume接口来存储
访问是容器应用需要考虑的首要课题， 必须引起高度的重视。我们可以想象一下容器和应
用之间这样一段对话：
容器：我稍瞬即逝，我稍瞬即逝，重要的事情说三遍，我稍瞬即逝。
应用：哦，这样啊，那我的重要数据不能丢怎么办？
容器：请用Volume数据卷，请用Volume数据卷，重要的事情说三遍，请用Volume
数据卷。
应用：&%#！，知道了，真啰嗦，你的前世一定是一台复读机，妈妈再也不用担心你的
学习了。
那么，既然容器的分层文件系统是为了容器稍瞬即逝，弹性迁移所设计的，Volume接
口的实现就肯定和它很不一样了。具体从技术上来说，Volume接口绕过了Disposable的
分层文件系统，而是采用直接Mount挂载的方式。Volume目录挂载后，对应用来说是透
明的，应用不需要任何改变，应用按照原来的方式访问 Volume 目录就能实现重要数据的
持久化。这有点像你在Win7下创建一个百度网盘目录一样，你向网盘目录拷贝文件的方式
和向其他目录拷贝文件没有区别，但是如果你的笔记本丢了，其他目录的文件就丢了，但是
网盘上的文件始终存在。这就是所谓的数据持久化。
2.1 数据迁移
数据能够持久化以后，应用容器迁移和数据共享就成为了可能。Volume接口可以说很
大程度上讲是容器迁移和数据共享的基础组件。我们先谈谈迁移：假设一个人需要从一个城
市搬到另外一个城市， 如果让他把所有的现金都打包带到身上是不太现实的，也非常不安
全。怎么办呢？很简单，他去银行开个账户，把钱存进去，到另外一个城市的分行取就可以
了。
容器迁移的道理是一样的，因为数据都是存储在Volume卷（银行账户）里的，所以容
器在集群的另外一个服务器甚至云端重新启动的时候，只要挂载同样的数据卷就可以了。当
然，这些都需要数据卷后端有共享存储，或者数据副本的支撑。
容器应用迁移的核心其实是数据卷 Volume 迁移，(注：容器本身的迁移由镜像库
Docker Registry主导） 这一部分涉及数据存储、安全加密、网络传输、性能优化、快照备
份等等的技术点，是容器管理的核心功能。Volume数据卷更是容器间共享数据的基础，道
理很简单， 数据是存储在容器之外的，那么容器间共享同样一个数据卷就能共享数据。为
此，Docker 容器还专门推出了数据卷容器这种特殊的容器，只要一个数据卷容器来挂载
Volume, 其他需要共享 Volume 的容器只需要很简单的指明和这个数据卷容器共享
Volume就可以了。有兴趣的读者可以自己查找数据卷容器的资料。
为了更好的支持容器迁移和数据共享，Docker推出了Volume Plugin接口机制，让第
三方的存储厂商来支持Docker Volume并且在此基础上进行功能拓展。下面这个表提供了
Volume plugin的接口规范：
可以看到 Volume Plugin 的接口规范是相当简洁的。大部分的存储和高级功能由和
Volume plugin driver驱动的后端存储提供。以下说明就是前一期提到的Volume plugin
driver，我们以后会重点介绍。
2.2 Rancher Convoy
Convoy是Rancher Labs用Go开发的支持DeviceMapper、NFS、EBS、Glusterfs
多种后端存储的Docker Volume plugin driver。Convoy还提供了一个存储拓展功能（如
快照、备份恢复等）的接口框架。
2.3 Flocker
Flocker Volume Plugin driver主要用于多主机环境Docker数据卷的迁移，从而支持
数据库应用等stateful有状态应用的主机间迁移。
关于Volume今天我就介绍到这里。又到了总结的时间了，前两天做了个梦，梦见自己
参加了“迎接一带一路，全国 Docker 知识大赛”18 岁以下组别的决赛。里面一个题目是
这样的：
Q :
请以 Volume 的字母为首字母，分别组成一个句子来说明 Volume 的特性。好有挑战
啊，不过有了前面对Volume概念的理解，我很快就写出了答案。
A :
V -- Very important data. （存储很重要的数据）
O -- Opt to be shared.（多用于容器数据共享）
L -- Like a bank to store money.（像银行存储资金）
U -- User defined plugin driver.（用户定义的插件驱动）
M -- Move around is not easy.（迁移非常有挑战）
E -- Essential to clustered environment.（集群多主机应用的关键）
我梦见了我拿到了第一名，受到了Docker创始人Solomon Hykes的亲切接
见。。。继续做梦吧，不要醒来。
 结语：
感谢各位前辈导师的观点和经典之作，本文收录了有关Docker在企业级架构中从落
地到实战的精彩篇章，希望对想把Docker这一技术落地到企业中的朋友有所帮助，有关
原文阅读可下载可点击相关链接。
本文电子书下载：
网页下载：http://www.cloudsoar.com/down/ddoc/v1.1/