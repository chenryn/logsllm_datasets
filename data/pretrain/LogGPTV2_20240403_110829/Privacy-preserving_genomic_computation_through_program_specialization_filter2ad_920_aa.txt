title:Privacy-preserving genomic computation through program specialization
author:Rui Wang and
XiaoFeng Wang and
Zhou Li and
Haixu Tang and
Michael K. Reiter and
Zheng Dong
Privacy-Preserving Genomic Computation Through
Program Specialization
Rui Wang1, XiaoFeng Wang1, Zhou Li1, Haixu Tang1, Michael K. Reiter2, Zheng Dong1
1Indiana University at Bloomington.
2University of North Carolina at Chapel Hill.
ABSTRACT
In this paper, we present a new approach to performing impor-
tant classes of genomic computations (e.g., search for homologous
genes) that makes a signiﬁcant step towards privacy protection in
this domain. Our approach leverages a key property of the human
genome, namely that the vast majority of it is shared across humans
(and hence public), and consequently relatively little of it is sensi-
tive. Based on this observation, we propose a privacy-protection
framework that partitions a genomic computation, distributing the
part on sensitive data to the data provider and the part on the pu-
bic data to the user of the data. Such a partition is achieved through
program specialization that enables a biocomputing program to per-
form a concrete execution on public data and a symbolic execution
on sensitive data. As a result, the program is simpliﬁed into an efﬁ-
cient query program that takes only sensitive genetic data as inputs.
We prove the effectiveness of our techniques on a set of dynamic
programming algorithms common in genomic computing. We de-
velop a program transformation tool that automatically instruments
a legacy program for specialization operations. We also demon-
strate that our techniques can greatly facilitate secure multi-party
computations on large biocomputing problems.
Categories and Subject Descriptors
K.6.5 [Security and Protection]: Unauthorized access
General Terms
Security
Keywords
Privacy-Preserving Computation, Program Specialization, Human
Genome, Symbolic Execution, Dynamic Programming, Secure Multi-
Party Computation
1.
INTRODUCTION
Recent progress in the study of the human genome has led to a
revolution in biomedical science, which promises a profound im-
pact on many aspects in people’s lives. These advances, how-
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’09, November 9–13, 2009, Chicago, Illinois, USA.
Copyright 2009 ACM 978-1-60558-352-5/09/11 ...$10.00.
ever, do not come without introducing new concerns: genomic data
carry sensitive personal information such as genetic markers for
diseases, whose conﬁdentiality is threatened by the increasing col-
lection and distribution of those data for medical research. To pro-
tect genome privacy, prior research suggests anonymizing genome
data before releasing them, through techniques such as DNA lattice
anonymization [47]. Such an approach, however, reduces the infor-
mation in the original data and as a result, undermines their utility
for genome research.
A straightforward approach that avoid disclosing sensitive data
involved in a computation to the party using the data (called data
consumer or DC) is to simply delegate all the computation tasks
to the party providing the data (called data provider or DP). This
centralized treatment, however, is unviable because the DP can eas-
ily become a performance bottleneck. In the case that the DC also
holds sensitive inputs to its computation, a secure multi-party com-
putation (SMC) [69, 29] needs to be performed between these two
parties. Unfortunately, recent research shows that even optimized
SMC cannot handle genome computations of a realistic scale [34],
which often involve millions of nucleotides.
Many important genome studies, such as search of homologous
genes [6, 7, 38, 58, 9], comparison of syntenic regions across multi-
ple genomes [63, 45], and protein identiﬁcation in proteomics [61,
67, 32, 17], utilize dynamic programming [64] and other algorithms
to compare a query DNA or protein sequence with genomic se-
quences in a genome database. For example, in order to determine
the level of variation of a speciﬁc gene in the population, a DC may
request to compare a query gene sequence from a reference genome
with its homologous gene sequences from all individual genomes
in a personal genome database. The privacy problem here is that
these genomes contain some sensitive genetic variations, which are
mostly related to single nucleotide polymorphism (SNP) [43], a
DNA variation that differs between members of a species. These
variations can be used to identify individuals and their personal
health information such as genetic diseases, and therefore should
not be exposed to the DC. On the other hand, it is well known
that genetic variations represent only a small fraction of the entire
human genome, as indicated by prior research [4] (0.5 percent be-
tween two unrelated persons), and our analysis in the Appendix
(0.01 percent among a population of 1 million). Though the sen-
sitivity of individual SNPs [43] are yet to be determined, we can
adopt a conservative approach that treats all SNPs as sensitive data.
Even in this case, nearly all human genes consist of a vast majority
of common (and deﬁnitely non-sensitive) nucleotides that serve as
part of the inputs to aforementioned research.
The above observation can be leveraged to protect sensitive ge-
netic information involved in a genomic computation, through dis-
tributing the computation between the DP and the DC: the DP un-
338dertakes a small portion of the computation related to sensitive
data while the DC works on the rest of a genome sequence in-
volving only nonsensitive nucleotides. As a result, the computa-
tion can be accomplished without revealing sensitive nucleotides to
the DC. Partitioning a computation for privacy protection has been
studied in prior research [18, 16]. For example, Swift [18] uses
information-ﬂow analysis to separate an application into the parts
that work on the data with different security levels. However, such
an approach can be less applicable to genome algorithms that inter-
twine the operations on both public and sensitive data. A prominent
example is a category of dynamic programming algorithms (DPA)
common in the aforementioned research: once a DPA encounters
a sensitive nucleotide, all the follow-up computation will all be re-
lated to it. As a result, an information-ﬂow analysis will tell us to
put the whole computation on the DP side.
In this paper, we propose a new technique that applies program
specialization [35] to partition a genomic computation according to
the sensitivity levels of the genome data it works on. Our approach
allows the DC to compute over the genome sequences sanitized by
the DP, on which sensitive nucleotides are replaced with symbols.
This is achieved through a mixed execution: a concrete execution
on public data and a symbolic execution [42] on those symbols. As
a result, a biocomputing program can be specialized into a “query”
program for the DP, which takes nothing but sensitive nucleotides
as its inputs. Given that sensitive nucleotides only take a very small
portion of the data a program processes, its specialized query pro-
gram is typically much more efﬁcient, and can be easily computed
by the DP. An efﬁcient query not only saves the DP’s resources but
also signiﬁcantly reduces the cost for performing an SMC protocol,
should the DC also have sensitive inputs involved in the computa-
tion. To control information leaks from the outcome of a compu-
tation, we treat the program as a database query, and use a query
auditor (Section 2.4) to mediate its answers. To efﬁciently retroﬁt
legacy biocomputing code with the capability to perform such dis-
tributed computations, we also designed a source-to-source trans-
formation tool that automatically analyzes a legacy program and
instruments it for mixed executions.
•Source-to-source transformation tool. We design a new tool that
automatically analyzes a legacy genomic program and instrument
it with the code to perform specialization.
•Implementation and evaluations. Our evaluations show that our
techniques enable many important genome algorithms [64, 56, 54,
6] to work on a large amount of data at small overheads. We imple-
mented a prototype of our tool and successfully applied it to trans-
form three biocomputing libraries. We also studied use of SMC
protocols over query programs, and observed a signiﬁcant improve-
ment in performance compared with a direct application of them to
unspecialized algorithms.
Our technique is based upon partition of a computation task ac-
cording to the sensitivity of its nucleotide inputs. We are fully
aware that identifying sensitive SNPs is still an ongoing research [33].
However, prior research does indicate that such SNPs take only
a very small portion of human genome [27], and many important
genome studies [6, 7, 38, 58, 9, 63, 45, 61, 67, 32, 17] work on con-
tiguous genome sequences that involve only small amount of SNPs.
The classiﬁcation of sensitive/nonsensitive nucleotides only serves
as an input to our approach.
The rest of the paper is organized as follows. Section 2 and 3
describes our query generation techniques and transformation tool.
Section 4 reports on an evaluation of our approach. Section 5 dis-
cusses the limitations of our current design. Section 6 presents the
related prior research, and Section 7 concludes the paper.
2. COMPUTATION PARTITIONING
In this section, we present the techniques that partition a genomic
computation task according to the sensitivity levels of genome data.
Our approach is based upon program specialization (a.k.a., partial
evaluation), a technique that uses partial inputs of a program to pro-
duce a new program that only accepts the rest of the inputs [35].
In our research, we developed the specialization techniques for
genome computing, which reduces an algorithm to a query pro-
gram using a sanitized DNA record. As a ﬁrst step, our current
focus is on a set of dynamic programming algorithms [64, 56, 54,
6] that are common in genome computing.
2.1 Overview
The general idea of our techniques can be illustrated through a
simple example in Figure 2. The example computes the edit dis-
tance between genome sequences α and β, i.e., the minimal num-
ber of edit operations, including delete, insert and replace, to con-
vert one sequence to the other. This is done through dynamic pro-
gramming over a two-dimension matrix D(0··· n, 0··· m),
where n and m are the lengths of α and β respectively. Speciﬁcally,
the algorithm ﬁrst initializes the matrix by setting D(i, 0) to i for
0 ≤ i ≤ n, and D(0, j) to j for 0 ≤ j ≤ m. Then, it recursively
ﬁlls the matrix as follows:
D(i, j) = min(D(i − 1, j) + 1, D(i, j − 1) + 1,
D(i − 1, j − 1) + s(i, j))
(1)
where s(i, j) is a score function that has a value 1 if α[i], the i
nucleotide on α, is different from β[j], the jth nucleotide on β, and
a value 0 otherwise. The minimal edit cost between these sequences
is recorded in D(n, m) and the edit process that incurs that cost is
described by a path from the entry (0, 0) to (n, m).
Figure 2 presents an example with α=ATC and β=ACC. The
edit distance here is D(3, 3) = 1, and the optimal edit path is
(0, 0) → (1, 1) → (2, 2) → (3, 3), as each cell on the chain pro-
vides the smallest edit cost to the next one according to Equation 1.
This algorithm is implemented by a program P 1 that iteratively
computes the values of the cells in the matrix.
Figure 1: Framework.
We outline the contributions of this paper as follows:
•A privacy protection framework. We propose a distributed frame-
work for privacy-preserving genomic computing, as illustrated in
Figure 1. Our framework distributes a computation task between
the DP and the DC, and lets the DP handle a small portion of the
task related to its sensitive data. This avoids expensive SMC when
the DC does not have sensitive inputs, and signiﬁcantly reduces the
overheads for running such a protocol when it does.
•Computation partitioning for privacy protection. We propose novel
techniques that use public data to specialize a genomic computing
program into a much more efﬁcient query program for processing
sensitive data on the DP. We theoretically analyze the effectiveness
of these techniques over a category of DPAs that are extensively
used in bioinformatics.
339Figure 2: A simple example.
Suppose that β[2] is a sensitive nucleotide that is replaced by a
symbol. This prevents P 1 from accomplishing the computation,
because it cannot get the values for the third and fourth columns in
the matrix. To solve this problem, we transfer the program to an-
other program, P 2, to perform a mixed execution. Speciﬁcally, the
statements at Line 3, 4, 5 and 6 of P 1 are all modiﬁed to work on
both concrete and symbol inputs: all the operations go as normal if
the input to a statement contains only concrete values; otherwise,
symbolic execution [42] is performed to generate an expression as
its output. Such an expression is further reduced through, for ex-
ample, combining all the constants. The score function S1 of P 1
is also converted into S2: if a branch condition contains symbols
(Line 15 in S2), S2 exports the branch condition in S1 and both of
its branches to a residual program, and returns a symbol si,j, where
i and j are the indices of nucleotide inputs. The same transforma-
tion happens to the min operation at Line 6 of P 1. Its counterpart
statement simpliﬁes the expressions the operation involves through
unfolding symbols into expressions, combining constants and com-
paring two expressions using common symbols and value ranges.
In the end, the reduced expressions in D(3, 3) is exported to the
residue program, which serves as the query for the DP.
Matrix 2 shows the process of computing over β in the presence
of an unknown nucleotide. Consider D(3, 3) as an example. Com-
puting its value using Equation 1 results in an expression that seeks
the minimal one among four expressions: e1 = s2,2, e2 = s2,2 +2,
e3 = s3,2 + 2 and e4 = s2,2 + 2. This expression is further re-
duced as follows. We ﬁrst ﬁnd that e1 is smaller than e2 and e4,
as all of them describe a sum between s2,2 and a constant, and e1
has the smallest constant. Then, e1 is compared with e3 using the
value range of symbols s2,2 and s3,2, which is either 0 or 1, though
their exact values are unknown. As a result, the query program we
generate only contains a very simple expression, e1, along with the
part of the score function for computing s2,2. It is evident that the
cost for answering such a query on the DP side is far lower than
running P 1. More interestingly, the DC can even ﬁgure out the op-
timal edit path without consulting the DP: as we can observe from
Matrix 2, the value of D(3, 3) can be traced back to D(2, 2), and
again to D(1, 1) and D(0, 0) according to Equation 1; this can be
done without knowing the content of β[2].
The above specialization techniques are elaborated in Section 2.2.
Their effectiveness is theoretically analyzed in Section 2.3. The
transformation from P 1 to P 2 can be achieved automatically us-
ing program analysis techniques, which is discussed in Section 3.
2.2 Specialization Techniques
To specialize a program, we need to locate its statements that
work on sensitive nucleotides and transform them into the form
that specialization operations can be performed. Those ”tainted”
statements are identiﬁed by a taint analysis, which we describe in
Section 3. Here we ﬁrst present our specialization techniques.
Specialization operations. Our approach converts every tainted
statement into a program snippet that checks the input it receives:
if the input does not contain symbols, the original statement is ex-
ecuted; otherwise, a symbolic expression is built through symbolic
execution [42] and further simpliﬁed by a reduction function before
being exported as an output. Denote the specialization operations