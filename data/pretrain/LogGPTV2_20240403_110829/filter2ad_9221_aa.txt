**Author: Knownsec 404 Blockchain Security Research Team  
Time: 2018.12.05  
Chinese Version:   
Project link: **
In the Ethereum contract audit CheckList, I divided the 29 issues encountered
in Ethereum contract auditing into five major categories, including coding
specification issues, design defect issues, coding security issues, coding
design issues, and coding security issues. This will help smart contract
developers and security workers get started quickly with smart contract
security.
This CheckList refers to and collates with the research results of the major
blockchain security research teams in the completion process. Once
imperfections/errors occurred, welcome to submit issues.
Because this article is mainly a CheckList, the article will not contain too
detailed vulnerability/hazard information, and most of the vulnerability
analysis will be mentioned in the scanning report.
# 1\. Coding specification issue
## (1) Compiler version
**In the contract code, the compiler version should be specified. It is
recommended to use the latest compiler version.**
    pragma solidity ^0.4.25;
Compilers of older versions may cause various known security issues, such as
V0.4.23 updates a compiler vulnerability. In this version, if both
constructors are used, i.e.,
    contract a {
        function a() public{
            ...
        }
        constructor() public{
            ...
        }
    }
one of the constructors will be ignored, which only affects v0.4.22. V0.4.25
fixes the uninitialized storage pointer problem mentioned below.
## (2) Constructor writing issue
**The correct constructor should be used for different compiler versions,
otherwise the contract owner may change.**
In the solidify compiler syntax requirements of versions less than 0.4.22, the
contract constructor must be equal to the contract name, and the name is
affected by the case, e.g.,
    contract Owned {
        function Owned() public{
        }
After version 0.4.22, the constructor keyword was introduced as a constructor
declaration. But no function is required.
    contract Owned {
        constructor() public {
        }
If you don't follow the corresponding method, the constructor will be compiled
into a normal function, which can be called arbitrarily, leading to more
serious consequences such as owner permission.
## (3) Return standard
**Following the ERC20 specification, the transfer and approve functions should
return a bool value, and a return value code needs to be added.**
    function transfer(address _to, uint256 _value) public returns (bool success)
The result of **transferFrom** should be consistent with the result returned
by transfer.
## (4) Event standard
**Follow the ERC20 specification and require the transfer and approve
functions to trigger the corresponding event.**
    function approve(address _spender, uint256 _value) public returns (bool success){
        allowance[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value)
        return true
## (5) Fake recharge issue
**In the transfer function, the judgment of the balance and the transfer
amount needs to use the require function to throw an error, otherwise it will
judge that the transaction is successful mistakingly.**
    function transfer(address _to, uint256 _value) returns (bool success) {
        if (balances[msg.sender] >= _value && _value > 0) {
            balances[msg.sender] -= _value;
            balances[_to] += _value;
            Transfer(msg.sender, _to, _value);
            return true;
        } else { return false; }
    }
The above code may cause false recharge.
The correct code is as follows:
    function transfer(address _to, uint256 _value) returns (bool success) {
        if (balances[msg.sender] >= _value && _value > 0) {
            balances[msg.sender] -= _value;
            balances[_to] += _value;
            Transfer(msg.sender, _to, _value);
            return true;
        } else { return false; }
    }
# 2\. Design defect issue
## (1) Approve authorization function conditional competition
**Conditional competition should be avoided in the approve function.** Before
modifying the allowance, you should change it to 0 first and then to _value.
The reason for this vulnerability is that in order to encourage miners to mine
in the underlying miners' agreement, the miners can decide what to pack for
themselves. In order to make more profits, the miners generally choose to
package the deals with larger gas prices, rather than relying on the order of
transactions.
By setting 0, the hazards arising from the conditional competition can be
alleviated to some extent. The contract manager can check the log to determine
if there is a conditional competition. The greater significance of this fix is
to remind users who use the approve function. The operation of this function
is irreversible to some extent.
    function approve(address _spender, uint256 _value) public returns (bool success){
        allowance[msg.sender][_spender] = _value;
        return true
The above code may lead to conditional competition.
So add the following in the approve function:
    require((_value == 0) || (allowance[msg.sender][_spender] == 0));
Change the allowance to 0 and then the corresponding number.
## (2) Loop dos issue
### [1] Loop consumption issue
**It is not recommended to use too many loops in contracts.**
In Ethereum, each transaction consumes a certain amount of gas, and the actual
consumption is determined by the complexity of the transaction. The larger the
number of loops, the higher the complexity of the transaction. When the
maximum allowable gas consumption is exceeded, the transaction will fail.
#### Real world event
Simoleon (SIM)
  * 
Pandemica
  * 
### [2] Loop security issue
**In the contract, the number of loops should be prevented from being
controlled by the user. And the attacker may use an excessive loop to complete
the Dos attack.**
When a user needs to transfer money to multiple accounts at the same time, we
need to traverse the transfer of the target account list, which may lead to
DoS attacks.
    function Distribute(address[] _addresses, uint256[] _values) payable returns(bool){
        for (uint i = 0; i  uint) balances;
      uint public totalSupply;
      function Token(uint _initialSupply) {
        balances[msg.sender] = totalSupply = _initialSupply;
      }
      function transfer(address _to, uint _value) public returns (bool) {
        require(balances[msg.sender] - _value >= 0); //Bypass the judgment by underflow.
        balances[msg.sender] -= _value;
        balances[_to] += _value;
        return true;
      }
      function balanceOf(address _owner) public constant returns (uint balance) {
        return balances[_owner];
      }
    }
`balances[msg.sender] - _value >= 0`
You can bypass the judgment by underflow.
The usual fix is to use openzeppelin-safeMath, but it may also be limited by
judging different variables. However, it is difficult to impose restrictions
on multiplication and exponential multiplication.
The correct writing:
    function transfer(address _to, uint256 _amount)  public returns (bool success) {
        require(_to != address(0));
        require(_amount = _amount);
        msg.sender.call.value(_amount)();
        balances[msg.sender] -= _amount;
    }
The above code is a simple demo of reentrancy vulnerability. A large number of
contract tokens are recursively transferred by reentrancy vulnerabilities.
For possible reentrancy issues, use the transfer function to complete the
transfer as much as possible, or limit the gas execution of the call. These
can effectively reduce the harm.
    contract EtherStore {
        // initialise the mutex
        bool reEntrancyMutex = false;
        uint256 public withdrawalLimit = 1 ether;
        mapping(address => uint256) public lastWithdrawTime;
        mapping(address => uint256) public balances;
        function depositFunds() public payable {
            balances[msg.sender] += msg.value;
        }
        function withdrawFunds (uint256 _weiToWithdraw) public {