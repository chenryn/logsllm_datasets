valid testing circuit. Similarly, QSearch outputs either a valid test-
ing circuit or unknown when invoked on a problem Π with at most
α untrusted polynomials and β + 1 total number of monomials in f.
By induction, for any Π, if QSearch(Π) does not output unknown,
then it outputs a valid testing circuit for the PPE problem Π.
2
yz + 3z
3
y
Efficiency of QSearch. We now turn to the asymptotic com-
plexity of the QSearch algorithm. A call to QSearch scans all the
untrusted polynomials to check if any rule is applicable, and then
calls QSearch recursively at most 2 times.
2) polynomial multiplications taking O(m
Let us first compute the time taken to scan all the untrusted
polynomials and check if any rule is applicable. Let us denote the
size of a polynomial to be the total number of additions and mul-
tiplications involved in the normal form of the polynomial (e.g.,
3 is 5). Therefore, multiplying 2 polynomials
the size of x
of size s1 and s2 takes O(s1s2) time. Let the maximum size of all
polynomials f in the input be s. Executing any rule involves com-
puting completion lists followed by checking if 0 lies in the span
of certain polynomials. Computing completion lists of m polyno-
2)
mials involves O(m
2 · s
2) polynomials (number
time. Checking if 0 lies in the span of O(m
of polynomials in the completion lists) each having at most O(s
2)
monomials involves solving a system of O(m
2 · s
2) linear equations
(upper bound on the number of monomials in the completion list)
2 · s
2), which takes at most O((m
each of size O(m
2)ω) time, where
nω is the complexity of multiplying two n × n matrices. Execut-
ing Rules 2 and 4 additionally involves checking if an untrusted
polynomial is in the desired format which takes at most O(s) time.
Therefore, applying all the rules to all the untrusted polynomials
takes at most O(m · (ms)2ω) time.
G DODIS VRF EXAMPLE (CONT’D)
In this section, we present the circuit obtained by running our tool
on Dodis VRF scheme wheb input length is 2 bits.
Now let us compute the total number of times the QSearch
algorithm is called recursively. Suppose QSearch is run on problem
Π and suppose it triggers a rule that outputs two PPE problems
Π1 and Π2. (Rules 1 and 2 output only one PPE problem, but we
Figure 11: The PPE circuit output by AutoCircuitPPE on the
Dodis VRF for 2-bit Inputs. PPE gates G1-G9 (see Figure 10)
are mentioned at input wires.
Input to the Tool
maps G1 * G1 ->GT.
trusted_polys [F1 = x, F2 = x*a, F3 = x*b, F4 = x*c] in G1.
untrusted_polys [F5 = r, F6 = x*r, F7 = a, F8 = a+b*r, F9 = a*c+d*r]
in G1.
Figure 12: Input to the tool on our custom testcase 1.
Figure 13: The PPE circuit output by our AutoCircuitPPE tool
on Figure 12 testcase
can treat them as Rules 3 and 4 respectively in the worst case.) The
problem Π1 is obtained by moving an untrusted polynomial to the
trusted set, and the problem Π2 is obtained by substituting some
polynomial by zero. Note that Π2 cannot be equal to the original
G3F5 = F0G2F3 = IG11F4 = F0F0^x1 = IF0^x2 = IF4^x2 = IF5 = F4 G18G19G20G21G22G14G15G16G13G17G23G24G12G10G25F5 = IF1 = IG10G3G11G12G6G13G14G15G4G16F7 = IG17F9 = IG18G19G20F8 = F7G21G22G23F1 = IG24G1G25Session 2B: Applied Cryptography CCS '20, November 9–13, 2020, Virtual Event, USA406Input to the Tool
maps G1 * G1 ->GT.
trusted_polys [F1 = x, F2 = x*a, F3 = x*b] in G1.
untrusted_polys [F4 = r, F5 = x*r, F6 = a, F7 = a+b*r] in G1.
Figure 14: Input to the tool for our custom testcase 2.
problem as Rule3 outputs ⊥ otherwise, and Rule 4 substitutes some
monomial for zero. Therefore some polynomial of Π2 has at least
one lesser monomial than Π. Let the total number of monomials in
all the polynomials of Π be k. By the above analysis, the QSearch is
recursively invoked at most 2m+k times. As each recursive call takes
at most O(m · (ms)2ω) time, the total time taken by our algorithm
is O(m · (ms)2ω · 2m+k) time.
Even though our algorithm has high theoretical complexity,
in Section 5 we show that it runs reasonably fast for many real-
world schemes. This is due to the fact that when we call the SubstituteZero
function to substitute a polynomial with zero, the resulting problem
usually has a much smaller size.
Output of the Tool
Trusted set in G1: F0 = 1, F1 = x, F2 = a*x, F3 = b*x,
Untrusted set in G1: F4 = r, F5 = r*x, F6 = a, F7 = a + b*r,
rule 2 applied to F4 = r.
Trusted set in G1: F0 = 1, F1 = x, F2 = a*x, F3 = b*x, F4 = r,
Untrusted set in G1: F5 = r*x, F6 = a, F7 = a + b*r,
rule 1 applied to F5 = r*x. C := e(F5,F0) = e(F1,F4)
Trusted set in G1: F0 = 1, F1 = x, F2 = a*x, F3 = b*x, F4 = r, F5 = r*x,
Untrusted set in G1: F6 = a, F7 = a + b*r,
rule 3 applied on F6 = a. isidentity := F1 = I C := e(F6,F1) = e(F0,F2)
Trusted set in G1: F0 = 1, F1 = x, F2 = a*x, F3 = b*x, F4 = r, F5 = r*x, F6 = a,
Untrusted set in G1: F7 = a + b*r,
rule 3 applied on F7 = a + b*r. isidentity := F1 = I
e(F3,F4)*e(F1,F6)
C := e(F7,F1) =
Trusted set in G1: F0 = 1, F1 = 0, F2 = 0, F3 = 0, F4 = r, F5 = 0, F6 = a,
Untrusted set in G1: F7 = a + b*r,
rule 4 applied on F7 = a + b*r and variable b. isidentity := F4 = I
Trusted set in G1: F0 = 1, F1 = 0, F2 = 0, F3 = 0, F4 = 0, F5 = 0, F6 = a,
Untrusted set in G1: F7 = a,
rule 1 applied to F7 = a. C := F7 = F6
Trusted set in G1: F0 = 1, F1 = 0, F2 = 0, F3 = 0, F4 = r, F5 = 0,
Untrusted set in G1: F6 = a, F7 = a + b*r,
rule 2 applied to F6 = a.
Trusted set in G1: F0 = 1, F1 = 0, F2 = 0, F3 = 0, F4 = r, F5 = 0, F6 = a,
Untrusted set in G1: F7 = a + b*r,
rule 4 applied on F7 = a + b*r and variable b.
isidentity := F4 = I
Trusted set in G1: F0 = 1, F1 = 0, F2 = 0, F3 = 0, F4 = 0, F5 = 0, F6 = a,
Untrusted set in G1: F7 = a,
rule 1 applied to F7 = a. C := F7 = F6
Execution time : 1.857338s
G2 : F1 = I
List of gates after optimizing the circuit
G1 : e(F5,F0) = e(F1,F4)
: e(F7,F1) = e(F3,F4)*e(F1,F6)
: NOT G2
G5
G14 : G9 OR G13
G8 : G7 AND G3
G11 : G5 AND G6
G15 : G1 AND G14
G5 : F4 = I
G3 : e(F6,F1) = e(F0,F2)
G6 : F7 = F6
G4
G7
G10 : NOT
G13 : G2 AND G12
G9 : G8 AND G4
G12 : G10 OR G11
Figure 16: Output of the tool on the custom testcase 2 shown
in Figure 14.
Figure 15: The PPE circuit output by our AutoCircuitPPE tool
on custom testcase 2 shown in Figure 14
H CUSTOM TESTCASES
We demonstrate AutoCircuitPPE on some custom test cases.
Custom Testcase 1. The input to the tool is described in Fig-
ure 12. The output of the tool is displayed in Figure 17. For space
reasons, we show only the optimized PPE circuit computed by the
tool. It is interesting to note that AutoCircuitPPE utilizes all our 4
rules to construct a PPE circuit. We plot the PPE circuit in Figure 13.
Custom Testcase 2. The input to the tool is described in Fig-
ure 14. The output of the tool is displayed in Figure 16. We plot the
PPE circuit in Figure 15.
F1 = IG7G8G3G9G4F4 = IG10F7 = F6G11G12G13G14G1G15Session 2B: Applied Cryptography CCS '20, November 9–13, 2020, Virtual Event, USA407Assigning FID 0 to every unit polynomial 1
Trusted set in G1: F1 = x, F2 = a*x, F3 = b*x, F4 = c*x,
Untrusted set in G1: F5 = r, F6 = r*x, F7 = a, F8 = a + b*r, F9 = a*c +
d*r,
rule 2 applied to F5 = r.
Trusted set in G1: F1 = x, F2 = a*x, F3 = b*x, F4 = c*x, F5 = r,
Untrusted set in G1: F6 = r*x, F7 = a, F8 = a + b*r, F9 = a*c + d*r,
rule 1 applied to F6 = r*x. C := e(F6,F0) = e(F1,F5)
Trusted set in G1: F1 = x, F2 = a*x, F3 = b*x, F4 = c*x, F5 = r, F6 = r*x,
Untrusted set in G1: F7 = a, F8 = a + b*r, F9 = a*c + d*r,
rule 3 applied on F7 = a. isidentity := F1 = I C := e(F7,F1) = e(F0,F2)
Trusted set in G1: F1 = x, F2 = a*x, F3 = b*x, F4 = c*x, F5 = r, F6 = r*x,
F7 = a,
Untrusted set in G1: F8 = a + b*r, F9 = a*c + d*r,
rule 3 applied on F8 = a + b*r. isidentity := F1 = I C := e(F8,F1) =
e(F3,F5)*e(F1,F7)
Trusted set in G1: F1 = x, F2 = a*x, F3 = b*x, F4 = c*x, F5 = r, F6 = r*x,
F7 = a, F8 = a + b*r,
Untrusted set in G1: F9 = a*c + d*r,
rule 4 applied on F9 = a*c + d*r and variable d. isidentity := F5 = I
Trusted set in G1: F1 = x, F2 = a*x, F3 = b*x, F4 = c*x, F5 = 0, F6 = 0,
F7 = a, F8 = a,
Untrusted set in G1: F9 = a*c,
rule 3 applied on F9 = a*c. isidentity := F1 = I C := e(F9,F1) = e(F4,F8)
Trusted set in G1: F1 = 0, F2 = 0, F3 = 0, F4 = 0, F5 = 0, F6 = 0, F7 = a,
F8 = a,
Untrusted set in G1: F9 = a*c,
rule 4 applied on F9 = a*c and variable c. isidentity := F7 = I
Trusted set in G1: F1 = 0, F2 = 0, F3 = 0, F4 = 0, F5 = 0, F6 = 0, F7 = 0,
F8 = 0,
Untrusted set in G1: F9 = 0,
rule 1 applied to F9 = 0. C := F9 = I
Trusted set in G1: F1 = 0, F2 = 0, F3 = 0, F4 = 0, F5 = r, F6 = 0, F7 = a,
Untrusted set in G1: F8 = a + b*r, F9 = a*c + d*r,
rule 4 applied on F8 = a + b*r and variable b. isidentity := F5 = I
Trusted set in G1: F1 = 0, F2 = 0, F3 = 0, F4 = 0, F5 = r, F6 = 0, F7 = a,
F8 = a + b*r,
Untrusted set in G1: F9 = a*c + d*r,
rule 4 applied on F9 = a*c + d*r and variable c. isidentity := F7 = I
Trusted set in G1: F1 = 0, F2 = 0, F3 = 0, F4 = 0, F5 = r, F6 = 0, F7 = 0,
F8 = b*r,
Untrusted set in G1: F9 = d*r,
rule 4 applied on F9 = d*r and variable d. isidentity := F5 = I
Trusted set in G1: F1 = 0, F2 = 0, F3 = 0, F4 = 0, F5 = 0, F6 = 0, F7 = 0,
F8 = 0,
Untrusted set in G1: F9 = 0,
rule 1 applied to F9 = 0. C := F9 = I
Trusted set in G1: F1 = 0, F2 = 0, F3 = 0, F4 = 0, F5 = 0, F6 = 0, F7 = a,
Untrusted set in G1: F8 = a, F9 = a*c,
rule 1 applied to F8 = a. C := F8 = F7
Trusted set in G1: F1 = 0, F2 = 0, F3 = 0, F4 = 0, F5 = 0, F6 = 0, F7 = a,
F8 = a,
Untrusted set in G1: F9 = a*c,
rule 4 applied on F9 = a*c and variable c. isidentity := F7 = I
Trusted set in G1: F1 = 0, F2 = 0, F3 = 0, F4 = 0, F5 = 0, F6 = 0, F7 = 0,
F8 = 0,
Untrusted set in G1: F9 = 0,
rule 1 applied to F9 = 0. C := F9 = I
Trusted set in G1: F1 = 0, F2 = 0, F3 = 0, F4 = 0, F5 = r, F6 = 0,
Untrusted set in G1: F7 = a, F8 = a + b*r, F9 = a*c + d*r,
rule 2 applied to F7 = a.
Trusted set in G1: F1 = 0, F2 = 0, F3 = 0, F4 = 0, F5 = r, F6 = 0, F7 = a,
Untrusted set in G1: F8 = a + b*r, F9 = a*c + d*r,
rule 4 applied on F8 = a + b*r and variable b. isidentity := F5 = I
Trusted set in G1: F1 = 0, F2 = 0, F3 = 0, F4 = 0, F5 = r, F6 = 0, F7 = a,
F8 = a + b*r,
Untrusted set in G1: F9 = a*c + d*r,
rule 4 applied on F9 = a*c + d*r and variable c. isidentity := F7 = I
Trusted set in G1: F1 = 0, F2 = 0, F3 = 0, F4 = 0, F5 = r, F6 = 0, F7 = 0,
F8 = b*r,
Untrusted set in G1: F9 = d*r,
rule 4 applied on F9 = d*r and variable d. isidentity := F5 = I
Trusted set in G1: F1 = 0, F2 = 0, F3 = 0, F4 = 0, F5 = 0, F6 = 0, F7 = 0,
F8 = 0,
Untrusted set in G1: F9 = 0,
rule 1 applied to F9 = 0. C := F9 = I
Trusted set in G1: F1 = 0, F2 = 0, F3 = 0, F4 = 0, F5 = 0, F6 = 0, F7 = a,
Untrusted set in G1: F8 = a, F9 = a*c,
rule 1 applied to F8 = a. C := F8 = F7
Trusted set in G1: F1 = 0, F2 = 0, F3 = 0, F4 = 0, F5 = 0, F6 = 0, F7 = a,
F8 = a,
rule 4 applied on F9 = a*c and variable c. isidentity := F7 = I
Untrusted set in G1: F9 = a*c,
Trusted set in G1: F1 = 0, F2 = 0, F3 = 0, F4 = 0, F5 = 0, F6 = 0, F7 = 0,
F8 = 0,
Untrusted set in G1: F9 = 0,
rule 1 applied to F9 = 0. C := F9 = I
G2 : F1 = I
G3 : e(F7,F1) = e(F0,F2)
Execution time : 1.882642s
List of gates after optimizing the circuit
G1 : e(F6,F0) = e(F1,F5)
G4 : e(F8,F1) = e(F3,F5)*e(F1,F7)
e(F4,F8)
G2
G14 : G12 OR G13
G17 : NOT G7
G9 AND G19
G2 AND G22
G18 : G7 AND G8
G21 : G5 AND G20
G24 : G16 OR G23
G11 : G10 AND G3
G7 : F7 = I
G8 : F9 = I
G12 : NOT G5
G15 : G4 AND G14
G5 : F5 = I
G9 : F8 = F7
G6 : e(F9,F1) =
G10 : NOT
G13 : G5 AND G6
G16 : G11 AND G15
G20 :
G23 :
G19 : G17 OR G18
G22 : G12 OR G21
G25 : G1 AND G24
Figure 17: Output of the tool on the test case in Figure 12
Session 2B: Applied Cryptography CCS '20, November 9–13, 2020, Virtual Event, USA408