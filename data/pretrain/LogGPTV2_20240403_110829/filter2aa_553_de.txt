library[2].title    // 一个char数组（library[2]的title成员）
library[2].title[4]  // 数组中library[2]元素的title 成员的一个字符
下面，我们来讨论一下这个程序。
14.4.3 程序讨论
较之程序清单14.1，该程序主要的改动之处是：插入一个while循环读取
多个项。该循环的条件测试是：
while (count 
#define LEN 20
const char * msgs[5] =
{
"  Thank you for the wonderful evening, ",
"You certainly prove that a ",
"is a special kind of guy.We must get together",
"over a delicious ",
" and have a few laughs"
};
struct names {         // 第1个结构
char first[LEN];
char last[LEN];
1027
};
struct guy {          // 第2个结构
struct names handle;    // 嵌套结构
char favfood[LEN];
char job[LEN];
float income;
};
int main(void)
{
struct guy fellow = {   // 初始化一个结构变量
{ "Ewen", "Villard" },
"grilled salmon",
"personality coach",
68112.00
};
printf("Dear %s, \n\n", fellow.handle.first);
printf("%s%s.\n", msgs[0], fellow.handle.first);
printf("%s%s\n", msgs[1], fellow.job);
printf("%s\n", msgs[2]);
1028
printf("%s%s%s", msgs[3], fellow.favfood, msgs[4]);
if (fellow.income > 150000.0)
puts("!!");
else if (fellow.income > 75000.0)
puts("!");
else
puts(".");
printf("\n%40s%s\n", " ", "See you soon,");
printf("%40s%s\n", " ", "Shalala");
return 0;
}
下面是该程序的输出：
Dear Ewen,
Thank you for the wonderful evening, Ewen.
You certainly prove that a personality coach
is a special kind of guy.We must get together
over a delicious grilled salmon and have a few laughs.
See you soon,
Shalala
1029
首先，注意如何在结构声明中创建嵌套结构。和声明int类型变量一样，
进行简单的声明：
struct names handle;
该声明表明handle是一个struct 
name类型的变量。当然，文件中也应包
含结构names的声明。
其次，注意如何访问嵌套结构的成员，这需要使用两次点运算符：
printf("Hello, %s!\n", fellow.handle.first);
从左往右解释fellow.handle.first：
(fellow.handle).first
也就是说，找到fellow，然后找到fellow的handle的成员，再找到handle
的first成员。
1030
14.6 指向结构的指针
喜欢使用指针的人一定很高兴能使用指向结构的指针。至少有 4 个理由
可以解释为何要使用指向结构的指针。第一，就像指向数组的指针比数组本
身更容易操控（如，排序问题）一样，指向结构的指针通常比结构本身更容
易操控。第二，在一些早期的C实现中，结构不能作为参数传递给函数，但
是可以传递指向结构的指针。第三，即使能传递一个结构，传递指针通常更
有效率。第四，一些用于表示数据的结构中包含指向其他结构的指针。
下面的程序（程序清单14.4）演示了如何定义指向结构的指针和如何用
这样的指针访问结构的成员。
程序清单14.4 friends.c程序
/* friends.c -- 使用指向结构的指针 */
#include 
#define LEN 20
struct names {
char first[LEN];
char last[LEN];
};
struct guy {
struct names handle;
char favfood[LEN];
char job[LEN];
1031
float income;
};
int main(void)
{
struct guy fellow[2] = {
{ { "Ewen", "Villard" },
"grilled salmon",
"personality coach",
68112.00
},
{ { "Rodney", "Swillbelly" },
"tripe",
"tabloid editor",
432400.00
}
};
struct guy * him;   /* 这是一个指向结构的指针 */
printf("address #1: %p #2: %p\n", &fellow[0], &fellow[1]);
him = &fellow[0];   /* 告诉编译器该指针指向何处 */
1032
printf("pointer #1: %p #2: %p\n", him, him + 1);
printf("him->income is $%.2f: (*him).income is $%.2f\n",
him->income, (*him).income);
him++;        /* 指向下一个结构  */
printf("him->favfood is %s: him->handle.last is %s\n",
him->favfood, him->handle.last);
return 0;
}
该程序的输出如下：
address #1: 0x7fff5fbff820 #2: 0x7fff5fbff874
pointer #1: 0x7fff5fbff820 #2: 0x7fff5fbff874
him->income is $68112.00: (*him).income is $68112.00
him->favfood is tripe: him->handle.last is Swillbelly
我们先来看如何创建指向guy类型结构的指针，然后再分析如何通过该
指针指定结构的成员。
14.6.1 声明和初始化结构指针
声明结构指针很简单：
struct guy * him;
首先是关键字 struct，其次是结构标记 guy，然后是一个星号（*），其
后跟着指针名。这个语法和其他指针声明一样。
1033
该声明并未创建一个新的结构，但是指针him现在可以指向任意现有的
guy类型的结构。例如，如果barney是一个guy类型的结构，可以这样写：
him = &barney;
和数组不同的是，结构名并不是结构的地址，因此要在结构名前面加上
&运算符。
在本例中，fellow 是一个结构数组，这意味着 fellow[0]是一个结构。所
以，要让 him 指向fellow[0]，可以这样写：
him = &fellow[0];
输出的前两行说明赋值成功。比较这两行发现，him指向fellow[0]，him
+ 
1指向fellow[1]。注意，him加1相当于him指向的地址加84。在十六进制
中，874 - 820 = 54（十六进制）= 84（十进制），因为每个guy结构都占用
84字节的内存：names.first占用20字节，names.last占用20字节，favfood占用
20字节，job占用20字节，income占用4字节（假设系统中float占用4字节）。
顺带一提，在有些系统中，一个结构的大小可能大于它各成员大小之和。这
是因为系统对数据进行校准的过程中产生了一些“缝隙”。例如，有些系统必
须把每个成员都放在偶数地址上，或4的倍数的地址上。在这种系统中，结
构的内部就存在未使用的“缝隙”。
14.6.2 用指针访问成员
指针him指向结构变量fellow[0]，如何通过him获得fellow[0]的成员的
值？程序清单14.4中的第3行输出演示了两种方法。
第1种方法也是最常用的方法：使用->运算符。该运算符由一个连接号
（-）后跟一个大于号（>）组成。我们有下面的关系：
如果him == &barney，那么him->income 即是 barney.income
如果him == &fellow[0]，那么him->income 即是 fellow[0].income
1034
换句话说，->运算符后面的结构指针和.运算符后面的结构名工作方式
相同（不能写成him.incone，因为him不是结构名）。
这里要着重理解him是一个指针，但是hime->income是该指针所指向结
构的一个成员。所以在该例中，him->income是一个float类型的变量。
第2种方法是，以这样的顺序指定结构成员的值：如果him 
==
&fellow[0]，那么*him == fellow[0]，因为&和*是一对互逆运算符。因此，
可以做以下替代：
fellow[0].income == (*him).income
必须要使用圆括号，因为.运算符比*运算符的优先级高。
总之，如果him是指向guy类型结构barney的指针，下面的关系恒成立：
barney.income == (*him).income == him->income // 假设 him == &barney
接下来，我们来学习结构和函数的交互。
1035
14.7 向函数传递结构的信息
函数的参数把值传递给函数。每个值都是一个数字——可能是int类型、
float类型，可能是ASCII字符码，或者是一个地址。然而，一个结构比一个
单独的值复杂，所以难怪以前的C实现不允许把结构作为参数传递给函数。
当前的实现已经移除了这个限制，ANSI 
C允许把结构作为参数使用。所以
程序员可以选择是传递结构本身，还是传递指向结构的指针。如果你只关心
结构中的某一部分，也可以把结构的成员作为参数。我们接下来将分析这3
种传递方式，首先介绍以结构成员作为参数的情况。
14.7.1 传递结构成员
只要结构成员是一个具有单个值的数据类型（即，int及其相关类型、
char、float、double或指针），便可把它作为参数传递给接受该特定类型的
函数。程序清单14.5中的财务分析程序（初级版本）演示了这一点，该程序
把客户的银行账户添加到他/她的储蓄和贷款账户中。
程序清单14.5 funds1.c程序
/* funds1.c -- 把结构成员作为参数传递 */
#include 
#define FUNDLEN 50
struct funds {
char   bank[FUNDLEN];
double  bankfund;
char   save[FUNDLEN];
double  savefund;
1036
};
double sum(double, double);
int main(void)
{
struct funds stan = {
"Garlic-Melon Bank",
4032.27,
"Lucky's Savings and Loan",
8543.94
};
printf("Stan has a total of $%.2f.\n",
sum(stan.bankfund, stan.savefund));
return 0;
}
/* 两个double类型的数相加 */
double sum(double x, double y)
{
return(x + y);
}
1037
运行该程序后输出如下：
Stan has a total of $12576.21.