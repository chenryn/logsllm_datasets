.17
fnov
￥0,s10
add
sub
×1,
w0,
v1, 1
fnov
s10,v0
v0, 11
fnov
v0,s13
cbnz
w0,
-L4
L2 1
1dp
add
w0, v1, 1
d8, d9, [sp,96]
dpT
ldp
d10,
x19,
[9t*ds]02x
d11,[sp,112]
1dp
x21,
x22,[sp，32]
1dp
d12,
Idp
x23,
d13,
x24,
[#p,128]
1dp
d14,
d15,
[p,144]
[sp, 48]
1dp
x25,
x26,[sp.64]
1dp
x29, x30, [sp], 160
x27,
x28,
[sp,80]
Idp
ret
---
## Page 428
904
逆向工程权威指南（下册）
100.7.6
Non-optimizing GCC 4.4.5 ( MIPS )
指令清单100.12Non-optimizing GCC 4.4.5（MIPS ）（IDA)
f:
 CODE XREF: f+64
 [+94 ...
var_C
- -0xc
var_8
8- =
var_4
= -4
arg_0
- 0
arg_4
- 4
addiu
$sp,-0x28
SV
$ra, 0x28+var_4($sp)
88
SEp。 0x28+var_8($sp)
move
sfp,
3s0,
(d#g1"x4A+82x0
$a0, 0x28+arg_0(fp)
$sp
$v0, 0x28+arg_0($fp)
$a1,
0x28+arg_4 ($fp)
or
Sat, Szero
bnez
$v0, 1oc_40
$v0,0x28+arg_4($fp)
$at, $zero
1v
addiu
$v0, 1
Sat,
$zero
b
10c_AC
or
Sat, Szero
Loc_40:
$v0, 0x28+arg_4($fp)
 CODE XREF: f+24
bnez
or
$v0, 10c_74
Sat,
Szero
or
Sat,
Szero
T
or
$v0,
fat,
0x28+arg_0 ($fp)
ssero
addiu
$a0,$v0
$v0,
nove
Ja1
1i
$a1, 1
or
Sat, Szero
loc_AC
$at, $zero
1oe_74:
$v0, 0x28+arg_0($fp)
 CCCE XRBF: f+48
T
addiu
*0E$
fat,
[-0AS
Szero
$v0,0x28+arg_4($fp)
addiu
or
$at,$zero
$a0,
$a1, $v0
0x28+arg_0 ($fp)
Ja1
bo
or
Sat,Szero
nove
$a0,9a0
Ja1
nove
or
$at, $zero
loc_AC:
 CODE XREF: f+38
 f+6C
nove
$ra, 0x28+var_4 ($sp)
dsdes
---
## Page 429
第100章中等难度练习题
905
1.w
$fp, 0x28+var_8 ($sp)
addiu
$s0, 0x28+var_C($sp)
sp,0x28
Jr
Fra
100.8
练习题2.17
下列程序向stdout输出信息，面且每次输出的结果还不一样。请间它输出的是什么信息？
请下载编译后的可执行文件：
●Linux x64 (go.yurichev.com/17170)。
●Mac OS X (go.yurichev.com/17171)。
●Linux MIPS (go.yurichev.com/17172)。
●Win32 (go.yurichev.com/17173)。
●Win64 (go.yurichev.com/17174),
可能有个别版本的Windows 无法执行这个程序，如果发生这种情况，请下载MSVC 2012redist.
(http://www. microsofL.com/en-us/download/details.aspx?id=30679)。
100.9练习题2.18
下列程序会验证密码，请找到它的密码。
另外，它可以接受的密码不是唯一的。请尽可能地多列举一些密码。
您还可以对它进行修改，改变程序的密码：
●Win32 (go.yurichev.com/17175)
●Linux x86 (go.yurichev.com/17176),
●Mac OS X (go.yurichev.com/17177)。
●Linux MIPS (go.yurichev.com/17178)。
100.10
练习题2.19
这组题目和练习题2.18的练习内容相同：
*(61118) m●
●Linux x86 (go.yurichev.com/17180)。
·
Mac OS X (go.yurichev.com/17181)。
● Linux MIPS (go.yurichev.com/17182),
100.11练习题2.20
下列程序向 stdout 输出信息。请问它输出的是什么信息？
●Linux x64 (go.yurichev.com/17183)。
Mac OS X (go.yurichev.com/17184)。
Linux ARM Raspberry Pi (go.yurichev.com/17185),
Linux MIPS (go.yurichev.com/17186)。
●Win64 (go.yurichev.com/17187),
---
## Page 430
第101章高难度练习题
这种难度题目的解答时间会很长。解答时间可能长达一整天。
101.1练习题3.2
下列可执行程序实现了某种著名的加密机制，请问它实现的是什么算法？
●Windows x86 (go.yurichev.com/17188)。
·
Linux x86 (go.yurichev.com/17189)。
Mac OS X (x64) (go.yurichev.com/17190),
●Linux MIPS (go.yurichev.com/17191)。
101.2
练习题3.3
下列程序可打开并读取某个文件，而后计算某种值并在屏幕上输出浮点数，请问它实现的是什么功能？
●Windows x86 (go.yurichev.com/17192),
●Linux x86 (go.yurichev.com/17193)。
Mac OS X (x64) (go.yurichev.com/17194)。
Linux MIPS (go.yurichev.com/17195)。
101.3练习题3.4
这是一个用密码加、解密文件的工具。虽然我们找到了密文，但是找不到加密密码。此外，我们还知
道原文是英文的文本文件。虽然程序采用了较强的加密机制，但是它存在严重的功能缺陷。这种缺陷大大
降低了解密的难度。
请找到程序的缺陷，并把密文还原为明文。
●Windows x86 (go.yurichev.com/17196)。
●密文下载地址：http://go.yurichev.com/17197.
101.4练习题3.5
下列程序实现了版权保护机制。它会读取key文件，核对其中的用户名和序列号。
本题的任务分为两个：
（低难度）使用tracer或别的 debugger，强制程序认可靠改过的key文件。
·（中等难度）修改用户名，但是不得修改可执行程序。
程序的下载地址如下：
Windows x86 (go.yurichev.com/17198)。
Linux x86 (go.yurichev.com/17199)。
●Mac OS X (x64) (go.yurichev.com/17200),
---
## Page 431
第101章高难度练习题
907
●Linux MIPS (go.yurichev.com/17201 )
●Key 文件（go.yurichev.com/17202）。
101.5练习题3.6
下列程序属于羽量级的web服务器程序。虽然它支持静态文件，但是不支持cgi等动态脚本。这个程
序里有4个以上的安全漏润。我到这些漏润，并且想办法利用它们攻陷服务器。
●Windows x86 (go.yurichev.com/17203)。
●Linux x86 (go.yurichev.com/17204)。
●Mac OS X (x64)(go.yurichev.com/17205)。
101.6练习题3.8
下列程序实现了著名的数据压缩算法。或许是因为原作者在输入代码时敲错了按键，它的解压缩功能
存在问题。我们能够在执行过程中看到它的bug。
压缩之前的原文件：go.yurichev.com/17206。
压缩之后的压缩包：go.yurichev.com/17207。
解压之后的（故障）文件：go.yurichev.com/17208。
请找到程序中的bug。如果可能的话，还请修改可执行文件，修补这个bug
●Windows x86 (go.yurichev.com/17209)。
●Linux x86 (go.yurichev.com/17210),
●Mac OS X (x64) (go.yurichev.com/17211),
---
## Page 432
第102章Crackme/Keygenme
有关软件知识产权保护措施的相关分析，请参见：hrtp://crackmes.de/users/yonkie/
---
## Page 433
附录Ax86
A.1数据类型
16位（8086/80286）、32位（80386等）和64位系统常用的数据类型有：
byte（字节）：8位数据。声明字节型数组和变量的汇编伪指令是DB。计算机使用寄存器的低8位空间存储
字节型数据。也就是说，字节型数据通常存储在（寄存器助记符）AL/BL/CL/DL/AH/BH/CH/DH/SIL/DIL/R*L里。
word（字）：16位数据。声明字型数组和变量的汇编伪指令是DW。计算机使用寄存器的16位空间存
储word型数据。也就是说，字型数据通常存储在（寄存器助记符）AX/BX/CX/DX/SI/DI/R*W里。
dword/double word：32位数据，声明DWord型数组和变量的汇编伪指令是 DD.x86 CPU 的标准寄
存器及x64CPU 寄存器的32位空间都可存储DWord型数据。16位应用程序则用寄存器对来存储DWord
型数据
qword/quad word：64位数据。声明QWord型数组和变量的汇编伪指令是DQ。32位系统使用一对寄
存器来存储QWord型数据。
tbyte（10字节型）：80位，即10字节数据。符合IEEE754标准的FPU寄存器都采用这种类型的数据。
paragraph（16字节型）：这种类型的数据主要出现在MS-DOS 操作系统的程序里。
Windows API 所定义的各种同名的数据类型（包括 BYTE WORD DWORD）及其数据存储空间，同样
遵循上述标准。
A.2通用寄存器
x86-64的CPU可以直接调用多数通用寄存器的8位（byte）和16位（word）存储空间，通用寄存器
有前向兼容的特性（可兼容最早的8080CPU）。早期的8位CPU（例如8080）可以用一对8位寄存器存储
一个16位数据。如此一来，面向早期8080平台的程序就可以照常访间16位寄存器的低8位空间、高8位
空间，还能够把这两个寄存器的数据当作一个整体的16位寄存器使用。x86平台的这种前向兼容的特性，
或许是为了方便人们在不同平台上移植程序。面采用RISC精简指令集的CPU则通常没有这种特性。
此外，x86-64CPU上有R开头的寄存器，而 80386以后的 CPU 都有E开头的寄存器。可见，R-寄存
器属于64位寄存器，而E-寄存器属于32位寄存器。
x86-64CPU还比x86CPU多了8个通用寄存器，即R8~R15寄存器。
在Intel官方手册中，这些寄存器的低8位空间（byte）的助记符带有“L”后缓（例如 R8L），而IDA程
A.2.1 RAX/EAX/AX/AL
765432.。
RAX**
EAX
AX
TVHV
---
## Page 434
910
逆向工程权威指南（下册）
又称累加寄存器（Accumulator）。函数的返回值通常保存在这个寄存器里。
A.2.2RBX/EBX/BX/BL
76
4132
0
RBX***
EBX
BX
BHBL
A.2.3RCX/ECX/CX/CL
5
2
1
0
RCX"*
ECX
CX
DHD
又称计数器（Coumter）.“REP”开头的指令、位移运算（SHL/SHR/RxL/RxR）通常都会影响这个寄存
器的状态，
A.2.4RDX/EDXDXDL
7654321。
RDX*
EDX
DX
DH DL
A.2.5 RSI/ESI/SI/SIL
65
43
2]
1
RS1"H
ESI
SI
SIL**
又称源寄存器（Source），是REPMOVSx和REPCMPSx指令默认的数据源。
A.2.6RDI/EDI/DI/DIL
RD
EDI
DI
DIL"
---
## Page 435
附录Ax86
911
又称目标寄存器（Destination），是REP MOVSx、REP STOSx指令默认的目标寄存器。
A.2.7 R8/R8D/R8W/R8L
716
5
43
2
1
R8
R8D
R8W
R8L
A.2.8R9/R9D/R9W/R9L
76
R9
R9D
R9W
R9L
A.2.9R10/R10D/R10W/R10L
1
R10
R10D
R10W
R10L
A.2.10R11/R11D/R11W/R11L
7165]
432
1
0
R11
R1ID
R11W
RIIL
A.2.11R12/R12D/R12W/R12L
765
432
1
0
R12
R12D
R12W
R12L
A.2.12 R13/R13D/R13W/R13L
76543
R13
R13D
R13W
R13L
---
## Page 436
912
逆向工程权威指南（下册）
A.2.13R14/R14D/R14W/R14L
7]654]
3
2
1
R14
R14D
R14W
R14L
A.2.14R15/R15D/R15W/R15L
7654321
R15
R15D
R15W
R15L
A.2.15RSP/ESP/SP/SPL
7654321
0
RSP
ESP
SP
SPL
SP是栈指针StackPointer的缩写.在初始化之后，它是当前栈地址的指针。
A.2.16RBP/EBP/BP/BPL
6