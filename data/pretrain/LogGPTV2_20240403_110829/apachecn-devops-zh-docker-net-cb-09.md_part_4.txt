![Getting ready](img/5453_09_05.jpg)
假设每台主机运行的 Docker 版本为 1.12 或更高，以便能够访问 MacVLAN 驱动程序。主机应该只有一个 IP 接口，Docker 应该处于默认配置。在某些情况下，我们所做的更改可能要求您具有对系统的根级访问权限。
## 怎么做…
与所有其他用户定义的网络类型一样，MacVLAN 驱动程序通过`docker network`子命令来处理。创建一个 MacVLAN 类型的网络就像创建任何其他网络类型一样简单，但是有一些事情需要记住，这是特定于这个驱动程序的。
*   定义网络时需要指定上游网关。请记住，MacVLAN 接口呈现在父接口的同一接口上。他们需要主机或接口上游网关来访问外部子网。
*   在其他用户定义的网络类型中，如果您决定不指定子网，Docker 会生成一个子网供您使用。尽管 MacVLAN 驱动程序仍然是这种情况，但除非您指定父接口可以访问的网络，否则它将无法正常工作。就像我们在上一份食谱中看到的那样，MacVLAN 依赖于上游网络设备知道如何路由 MacVLAN 接口。这是通过在父接口所在的同一子网上为容器定义 MacVLAN 接口来实现的。您也可以选择使用没有定义 IP 地址的父接口。在这些情况下，只需确保在 Docker 中定义网络时指定的网关可以从父接口到达。
*   作为驱动程序的一个选项，您需要指定一个接口，您希望将该接口用作所有附加了 MacVLAN 接口的容器的父接口。如果不指定父接口作为选项，Docker 将创建一个虚拟网络接口，并将其用作父接口。这将阻止从该网络到外部网络的任何通信。
*   使用 MacVLAN 驱动程序创建网络时，`--internal flag`可用。指定后，父接口被定义为虚拟接口，防止流量离开主机。
*   MacVLAN 用户定义的网络和父接口之间存在一对一的关系。也就是说，您只能在给定的父接口上定义一个 MacVLAN 类型的网络。
*   一些交换机供应商限制了每个端口可以获知的媒体访问控制地址的数量。虽然这个数字通常非常高，但请确保在使用这种网络类型时考虑到这一点。
*   与其他用户定义的网络类型一样，您可以指定一个 IP 范围或一组辅助地址，您希望 Docker 的 IPAM 不要分配给容器。在 MacVLAN 模式下，这些设置更加重要，因为您将容器直接呈现在物理网络上。
考虑到这些点和我们当前的实验拓扑，我们可以在每台主机上定义如下网络:
```
user@docker1:~$ docker network create -d macvlan \
--subnet 10.10.10.0/24 --ip-range 10.10.10.0/25 \
--gateway=10.10.10.1 --aux-address docker1=10.10.10.101 \
--aux-address docker2=10.10.10.102 -o parent=eth0 macvlan_net
user@docker2:~$ docker network create -d macvlan \
--subnet 10.10.10.0/24 --ip-range 10.10.10.128/25 \
--gateway=10.10.10.1 --aux-address docker1=10.10.10.101 \
--aux-address docker2=10.10.10.102 -o parent=eth0 macvlan_net
```
通过这种配置，网络上的每台主机将使用已定义的可用子网的一半，在本例中为`/25`。由于 Dockers IPAM 自动为我们保留网关 IP 地址，因此没有必要通过将其定义为辅助地址来阻止它被分配。然而，由于 Docker 主机接口本身确实在这个范围内，我们确实需要保留那些带有辅助地址的接口。
我们现在可以在每台主机上定义容器，并验证它们是否可以相互通信:
```
user@docker1:~$ docker run -d --name=web1 \
--net=macvlan_net jonlangemak/web_server_1
user@docker1:~$ docker exec web1 ip addr
1: lo:  mtu 65536 qdisc noqueue state UNKNOWN qlen 1
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host
       valid_lft forever preferred_lft forever
7: eth0@if2:  mtu 1500 qdisc noqueue state UNKNOWN
    link/ether 02:42:0a:0a:0a:02 brd ff:ff:ff:ff:ff:ff
    inet 10.10.10.2/24 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::42:aff:fe0a:a02/64 scope link
       valid_lft forever preferred_lft forever
user@docker1:~$
user@docker2:~$ docker run -d --name=web2 \
--net=macvlan_net jonlangemak/web_server_2
user@docker2:~$ docker exec web2 ip addr
1: lo:  mtu 65536 qdisc noqueue state UNKNOWN qlen 1
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host
       valid_lft forever preferred_lft forever
4: eth0@if2:  mtu 1500 qdisc noqueue state UNKNOWN
    link/ether 02:42:0a:0a:0a:80 brd ff:ff:ff:ff:ff:ff
    inet 10.10.10.128/24 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::42:aff:fe0a:a80/64 scope link
       valid_lft forever preferred_lft forever
user@docker2:~$
```
您会注意到在容器运行时不需要发布端口。由于此时容器具有唯一可路由的 IP 地址，因此不需要发布端口。任何容器都可以在其唯一的 IP 地址上提供任何服务。
与其他网络类型非常相似，Docker 为每个容器创建一个网络名称空间，然后将容器映射到 MacVLAN 接口中。此时，我们的拓扑如下所示:
![How to do it…](img/5453_09_06.jpg)
### 注
命名空间名称可以通过检查容器本身或链接 Docker `netns`目录来找到，正如我们在前面章节中看到的，因此`ip netns`子命令可以查询 Docker 定义的网络命名空间。
从位于子网外的外部测试主机，我们可以验证每个容器服务都可以通过容器的 IP 地址到达:
```
user@test_server:~$ curl http://10.10.10.2
    Web Server #1 - Running on port 80
user@test_server:~$ curl http://10.10.10.128
    Web Server #2 - Running on port 80
[root@tools ~]#
```
但是，您会注意到，尽管连接到 MacVLAN 网络的容器位于同一接口上，但无法从本地主机访问:
```
user@docker1:~$ ping 10.10.10.2
PING 10.10.10.2 (10.10.10.2) 56(84) bytes of data.
From 10.10.10.101 icmp_seq=1 Destination Host Unreachable
--- 10.10.10.2 ping statistics ---
5 packets transmitted, 0 received, +1 errors, 100% packet loss, time 0ms
user@docker1:~$
```
Docker 的当前实现仅在 MacVLAN 桥接模式下支持 MacVLAN。我们可以通过检查容器中接口的详细信息来验证这是 MacVLAN 接口的操作模式:
```
user@docker1:~$ docker exec web1 ip -d link show
1: lo:  mtu 65536 qdisc noqueue state UNKNOWN
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
5: eth0@if2:  mtu 1500 qdisc noqueue state UNKNOWN
    link/ether 02:42:0a:0a:0a:02 brd ff:ff:ff:ff:ff:ff
 macvlan  mode bridge
user@docker1:~$
```
# 了解 IPVLAN 接口
MacVLAN 的另一种选择是 IPVLAN。IPVLAN 有两种口味。第一种是 L2 模式，除了 MAC 地址的分配方式之外，它的运行方式与 MacVLAN 非常相似。在 IPVLAN 模式下，所有逻辑 IP 接口都使用相同的 MAC 地址。这使您可以将父网卡排除在混杂模式之外，并防止您遇到任何可能的网卡或交换机端口 MAC 限制。第二种模式是 IPVLAN 第三层。在第 3 层模式下，IPVLAN 就像路由器一样，将单播数据包进出 IPVLAN 连接的网络。在本食谱中，我们将介绍基本的 IPVLAN 网络结构，以了解它是如何工作的以及如何实现的。
## 做好准备
在本食谱中，我们将使用本章中*理解 MacVLAN 接口*食谱中相同的 Linux 主机(`net1`和`net2`)。有关拓扑的更多信息，请参考*了解 MacVLAN* 配方的*准备*部分。
### 注
`iproute2`工具集的旧版本不包括对 IPVLAN 的完全支持。如果这些命令不适用于 IPVLAN 配置，很有可能您使用的是没有支持的旧版本。您可能需要更新才能获得完全支持的更新版本。旧版本对 IPVLAN 有一些支持，但缺乏定义模式(L2 或 L3)的能力。
## 怎么做…
如前所述，L2 模式下的 IPVLAN 在功能上几乎与 MacVLAN 相同。主要区别在于，对于连接到同一主机的所有 IPVLAN 接口，IPVLAN 利用相同的媒体访问控制地址。您会记得，每个连接到同一个父接口的 MacVLAN 接口都利用了不同的 MAC 地址。
我们可以创建与 MacVLAN 配方中相同的接口，以显示接口地址是用相同的 MAC 地址创建的:
```
user@net1:~$ sudo ip link add ipvlan1 link eth0  type ipvlan mode l2
user@net1:~$ sudo ip address add 172.16.10.5/24 dev ipvlan1
user@net1:~$ sudo ip link set dev ipvlan1 up
user@net1:~$ sudo ip link add ipvlan2 link eth0 type ipvlan mode l2
user@net1:~$ sudo ip address add 172.16.10.6/24 dev ipvlan2
user@net1:~$ sudo ip link set dev ipvlan2 up
```
请注意，配置的唯一区别是我们将类型指定为 IPVLAN，将模式指定为 L2。在 IPVLAN 的情况下，默认模式是 L3，因此我们需要指定 L2，以便让接口以这种方式运行。由于 IPVLAN 接口继承了父接口的 MAC 地址，因此我们的拓扑应该如下所示:
![How to do it…](img/5453_09_07.jpg)
我们可以通过检查接口本身来证明这一点:
```
user@net1:~$ ip -d link
……
2: eth0:  mtu 1500 qdisc pfifo_fast state UP mode DEFAULT group default qlen 1000
    link/ether 00:0c:29:2d:dd:79 brd ff:ff:ff:ff:ff:ff promiscuity 1 addrgenmode eui64
3: eth1:  mtu 1500 qdisc pfifo_fast state UP mode DEFAULT group default qlen 1000
    link/ether 00:0c:29:2d:dd:83 brd ff:ff:ff:ff:ff:ff promiscuity 0 addrgenmode eui64
28: ipvlan1@eth0:  mtu 1500 qdisc noqueue state UNKNOWN mode DEFAULT group default
    link/ether 00:0c:29:2d:dd:79 brd ff:ff:ff:ff:ff:ff promiscuity 0
    ipvlan  mode l2 addrgenmode eui64
29: ipvlan2@eth0:  mtu 1500 qdisc noqueue state UNKNOWN mode DEFAULT group default
    link/ether 00:0c:29:2d:dd:79 brd ff:ff:ff:ff:ff:ff promiscuity 0
    ipvlan  mode l2 addrgenmode eui64
user@net1:~$