## PostgreSQL 多维空间几何对象 相交、包含 高效率检索实践 - cube  
### 作者  
digoal  
### 日期  
2018-10-15  
### 标签  
PostgreSQL , cube , 空间 , 几何 , 相交 , 包含    
----  
## 背景  
多维空间对象的几何运算，高效率检索实践。  
例如我们在数据库中存储了多维几何对象，可以使用lower, upper的数组来表达，例如3维度对象：  
```  
CUBE  
[  
xmin1  
ymin1  
zmin1  
,  
xmax1  
ymax1  
zmax1  
]  
```  
在介绍CUBE类型前，我们可以使用6个字段(xmin,xmax,ymin,ymax,zmin,zmax)来表达一个立方体。  
## 包含和相交查询  
在介绍CUBE类型前，我们如果使用6个字段来表达立方体，那么相交，包含分别如何标示呢？  
### 1包含2：  
```  
(xmin1 = xmax2)  
and  
(ymin1 = ymax2)  
and  
(zmin1 = zmax2)  
```  
### 1 2相交：  
每个坐标都相交，注意任意坐标相交的方位有  
```  
-----  
   -----    
或  
   -----    
------  
或  
--------  
  ---   
或  
  ---   
--------    
或  
---  
   ---  
或  
---  
---  
或  
   ---  
---  
```  
1 2相交，每条边都有相交即CUBE相交，表达如下   
```  
((xmin1 >= xmin2 and xmin1 = xmin2 and xmax1 = xmax2))  
and  
((ymin1 >= ymin2 and ymin1 = ymin2 and ymax1 = ymax2))  
and  
((zmin1 >= zmin2 and zmin1 = zmin2 and zmax1 = zmax2))  
```  
## 使用6个字段的空间计算性能  
1、创建测试表  
```  
create table test1 (  
  id int primary key,   
  x_min int,   
  y_min int,   
  z_min int,  
  x_max int,  
  y_max int,  
  z_max int  
);  
```  
2、写入100万记录  
```  
insert into test1 select id, x, y, z, x+1+(random()*100)::int, y+1+(random()*100)::int, z+1+(random()*100)::int   
from (select id, (random()*1000)::int x, (random()*1000)::int y, (random()*1000)::int z from generate_series(1,1000000) t(id)) t ;  
```  
记录如下  
```  
postgres=# select * from test1 limit 10;  
 id | x_min | y_min | z_min | x_max | y_max | z_max   
----+-------+-------+-------+-------+-------+-------  
  1 |    37 |   367 |   948 |    93 |   372 |   989  
  2 |   994 |   543 |   596 |  1031 |   613 |   617  
  3 |   399 |   616 |   897 |   444 |   624 |   959  
  4 |   911 |   624 |    67 |  1007 |   705 |    84  
  5 |   286 |   560 |   882 |   334 |   632 |   936  
  6 |   370 |   748 |   897 |   403 |   779 |   992  
  7 |   723 |   292 |   484 |   756 |   358 |   503  
  8 |   514 |    48 |   792 |   556 |    98 |   879  
  9 |    17 |   400 |   485 |    26 |   435 |   514  
 10 |   240 |   631 |   841 |   253 |   642 |   897  
(10 rows)  
```  
3、包含查询  
```  
select * from test1 where   
(x_min = 93)  
and  
(y_min = 372)  
and  
(z_min = 989);  
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from test1 where   
(x_min = 93)  
and  
(y_min = 372)  
and  
(z_min = 989);  
                                                                         QUERY PLAN                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------  
 Seq Scan on public.test1  (cost=0.00..13220.05 rows=539 width=28) (actual time=0.024..79.397 rows=15 loops=1)  
   Output: id, x_min, y_min, z_min, x_max, y_max, z_max  
   Filter: ((test1.x_min = 93) AND (test1.y_min = 372) AND (test1.z_min = 989))  
   Rows Removed by Filter: 999985  
   Buffers: shared hit=1835  
 Planning Time: 0.103 ms  
 Execution Time: 79.421 ms  
(7 rows)  
Time: 79.947 ms  
   id   | x_min | y_min | z_min | x_max | y_max | z_max   
--------+-------+-------+-------+-------+-------+-------  
      1 |    37 |   367 |   948 |    93 |   372 |   989  
 104882 |    17 |   327 |   924 |   111 |   389 |  1012  
 178185 |    31 |   315 |   897 |   104 |   380 |   990  
 228661 |     9 |   363 |   934 |   101 |   394 |  1001  
 275030 |    21 |   334 |   912 |   102 |   379 |  1012  
 405290 |    10 |   356 |   911 |   102 |   435 |   996  
 586417 |    35 |   362 |   930 |   128 |   454 |  1016  
 594367 |    23 |   312 |   943 |   112 |   395 |  1017  
 622753 |    11 |   365 |   916 |    93 |   427 |   995  
 645719 |    32 |   309 |   918 |    94 |   377 |  1015  
 757900 |    34 |   339 |   905 |    98 |   430 |   998  
 784203 |    36 |   344 |   945 |    95 |   390 |  1035  
 824046 |    23 |   367 |   946 |   115 |   423 |  1021  
 878257 |    37 |   339 |   948 |   123 |   398 |  1033  
 914020 |    26 |   358 |   918 |   109 |   379 |  1019  
(15 rows)  
Time: 80.269 ms  
```  
4、相交查询  
```  
select * from test1 where   
((x_min >= 37 and x_min = 37 and x_max = 93))  
and  
((y_min >= 367 and y_min = 367 and y_max = 372))  
and  
((z_min >= 948 and z_min = 948 and z_max = 989))  
;  
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from test1 where   
((x_min >= 37 and x_min = 37 and x_max = 93))  
and  
((y_min >= 367 and y_min = 367 and y_max = 372))  
and  
((z_min >= 948 and z_min = 948 and z_max = 989))  
;  
                       QUERY PLAN                                                                                                                          
 Seq Scan on public.test1  (cost=0.00..39229.87 rows=4364 width=28) (actual time=0.026..119.539 rows=483 loops=1)  
   Output: id, x_min, y_min, z_min, x_max, y_max, z_max  
   Filter: ((((test1.x_min >= 37) AND (test1.x_min = 37) AND (test1.x_max = 93))) AND (((test1.y_min >= 367) AND (test1.y_min = 367) AND (test1.y_max = 372))) AND (((test1.z_min >= 948) AND (test1.z_min = 948) AND (test1.z_max = 989))))  
   Rows Removed by Filter: 999517  
   Buffers: shared hit=1835  
 Planning Time: 0.135 ms  
 Execution Time: 119.621 ms  
(7 rows)  
Time: 120.283 ms  
```  
## cube 类型  
cube的多维体表达方法如下  
It does not matter which order the opposite corners of a cube are entered in.   
The cube functions automatically swap values if needed to create a uniform “lower left — upper right” internal representation.   
When the corners coincide, cube stores only one corner along with an “is point” flag to avoid wasting space.  
1、创建  cube 插件  
```  
create extension cube;  
```  
2、创建测试表  