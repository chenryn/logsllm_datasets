::: para
在您挂载文件系统后，您可以使用 `mount`{.command}
命令查看该文件系统是否被挂载了，如下示例所示：
:::
``` screen
[root@menscryfa ~]# mount | grep /tmp
/var/log on /root/tmp type none (rw,bind)
```
::: para
对于支持上下文关联路径名的文件系统，您可以将 `/bin`{.filename}
目录定义为上下文关联路径名，并根据系统构架将其解析为以下路径之一：
:::
``` screen
/usr/i386-bin
/usr/x86_64-bin
/usr/ppc64-bin
```
::: para
您可以通过生成空 `/bin`{.filename}
目录得到同样的结果。然后使用脚本或者在 `/etc/fstab`{.filename}
文件中的条目，将每个独立构架目录使用 `mount -bind`{.command} 命令挂载到
`/bin`{.filename} 目录。例如：您可以使用以下命令作为脚本中的一行：
:::
``` screen
mount --bind /usr/i386-bin /bin
```
::: para
另外，您还可以使用以下行作为 `/etc/fstab`{.filename} 文件的条目：
:::
``` screen
/usr/1386-bin             /bin               none    bind            0 0
```
::: para
绑定挂载可为您提供比上下文关联路径名更大的灵活性，因为您可以使用此特性根据您定义的条件挂载不同的目录（比如文件系统的
`%fill`{.literal}
值）。上下文关联路径名对其可处理的环境有更多的限制。请注意：您将需要根据条件（比如
`%fill`{.literal}）编写您自己的挂载脚本。
:::
::: {.warning xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**警告**
:::
::: admonition
::: para
当您使用 `bind`{.option} 选项挂载文件系统，且起始文件系统以
`rw`{.literal} 挂载时，新的文件系统也会被以 `rw`{.literal}
形式挂载，即使您使用的是 `ro`{.literal} 标签，`ro`{.literal}
则被静默忽略了。在这种情况下，可能会在 `/proc/mounts`{.filename}
目录中将新的文件系统标记为 `ro`{.literal} 而引起误导。
:::
:::
:::
:::
::: section
::: titlepage
# [⁠]{#ch-manage.html#s1-manage-mountorder}4.13. 绑定挂载和文件系统挂载顺序 {.title}
:::
[]{#ch-manage.html#idm140546321957552
.indexterm}[]{#ch-manage.html#idm140546321956112 .indexterm}
::: para
当您使用 `mount`{.command} 命令的 `bind`{.option}
选项时，您必须确定使用正确的顺序挂载该文件系统。在以下示例中，必须在
`/tmp`{.literal} 目录中执行绑定挂载前挂载 `/var/log`{.literal} 目录：
:::
``` screen
# mount --bind /var/log /tmp
```
::: para
按以下方法决定文件系统挂载顺序：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    通常文件系统挂载顺序由 `fstab`{.filename}
    文件中文件系统出现的顺序决定。例外情况包括使用 `_netdev`{.literal}
    标签挂载的文件系统或者有自身`初始化`{.literal}脚本的文件系统。
    :::
-   ::: para
    有自身`初始化`{.literal}脚本的文件系统在初始化进程后期挂载，即在挂载
    `fstab`{.filename} 文件中的文件系统之后挂载。
    :::
-   ::: para
    使用 `_netdev`{.literal}
    标签挂载的文件系统会在该系统中启用网络时挂载。
    :::
:::
::: para
如果您的配置需要创建绑定挂载以便挂载 GFS2 文件系统，您可以命令
`fstab`{.filename} 文件进行如下操作：
:::
::: {.orderedlist xmlns:d="http://docbook.org/ns/docbook"}
1.  ::: para
    挂载绑定挂载所需本地文件系统。
    :::
2.  ::: para
    绑定挂载要挂载 GFS2 文件系统的目录。
    :::
3.  ::: para
    挂载 GFS2 文件系统。
    :::
:::
::: para
如果您的配置需要您在 GFS2 文件系统中绑定挂载本地目录或者文件系统，在
`fstab`{.filename}
文件中列出正确的文件系统顺序也不会正确挂载文件系统，因为在 GFS2
`初始化`{.literal}脚本运行前不会挂载该 GFS2
文件系统。在这种情况下，您应该在`初始化`{.literal}脚本中写入命令执行绑定挂载，这样在挂载
GFS2 文件系统前就不会发生绑定挂载。
:::
::: para
以下脚本是自定义`初始化`{.literal}脚本示例。这个脚本在 GFS2
文件系统的两个目录中执行绑定挂载。在这个示例中，在
`/mnt/gfs2a`{.literal} 有一个 GFS2
挂载点，可在集群启动并运行`初始化`{.literal}脚本时执行挂载。
:::
::: para
在这个示例脚本中 `chkconfig`{.literal} 状态值说明：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    345 说明启动该脚本的运行等级
    :::
-   ::: para
    29 是启动优先性，在这个示例中表示该脚本会在启动时在 GFS2
    `初始化`{.literal}脚本之后运行，后者的启动优先性为 26
    :::
-   ::: para
    73 为停止优先性，在这个示例中表示该脚本会在关闭时在 GFS2
    脚本之后停止，后者的停止优先性为 74
    :::
:::
::: para
启动和停止值表示您可以通过执行 `service start`{.literal} 和
`service stop`{.literal} 命令手动执行所示动作。例如：如果该脚本名为
`fredwilma`{.literal}，则您可以执行
`service fredwilma start`{.command}。
:::
::: para
应将这个脚本放到 `/etc/init.d`{.filename}
目录并拥有与该目录中其他脚本相同的权限。您可以执行
`chkconfig on`{.command}
命令将该脚本链接到所示的运行等级中。例如：如果该脚本名为
`fredwilma`{.literal}，那么您可以执行
`chkconfig fredwilma on`{.command}。
:::
``` screen
#!/bin/bash
#
# chkconfig: 345 29 73
# description: mount/unmount my custom bind mounts onto a gfs2 subdirectory
#
#
### BEGIN INIT INFO
# Provides: 
### END INIT INFO
. /etc/init.d/functions
case "$1" in
  start)
	# In this example, fred and wilma want their home directories
	# bind-mounted over the gfs2 directory /mnt/gfs2a, which has
	# been mounted as /mnt/gfs2a
	mkdir -p /mnt/gfs2a/home/fred &> /dev/null
	mkdir -p /mnt/gfs2a/home/wilma &> /dev/null
	/bin/mount --bind /mnt/gfs2a/home/fred /home/fred
	/bin/mount --bind /mnt/gfs2a/home/wilma /home/wilma
        ;;
  stop)
	/bin/umount /mnt/gfs2a/home/fred
	/bin/umount /mnt/gfs2a/home/wilma
        ;;
  status)
        ;;
  restart)
        $0 stop
        $0 start
        ;;
  reload)
        $0 start
        ;;
  *)
        echo $"Usage: $0 {start|stop|restart|reload|status}"
        exit 1
esac
exit 0
```
:::
::: section
::: titlepage
# [⁠]{#ch-manage.html#s1-manage-gfs2withdraw}4.14. GFS2 收回功能 {.title}
:::
[]{#ch-manage.html#idm140546333360160
.indexterm}[]{#ch-manage.html#idm140546333359200 .indexterm}
::: para
GFS2 *收回*功能是集群 GFS2 文件系统的数据完整功能。如果 GFS2
内核模块探测到 GFS2 文件系统中存在不一致性，并伴随 I/O
操作，则该文件系统对该集群来说就不可用。该 I/O
操作会停止，同时该系统会等待下一个出错的 I/O
操作，防止进一步的破坏。当出现这种情况时，您可以停止手动停止任意服务或者程序，然后重启并重新挂载
GFS2
文件系统以便重新执行日志操作。如果问题仍存在，您可以在集群的所有节点中卸载该文件系统并使用
`fsck.gfs2`{.command} 命令执行文件系统恢复。GFS2 收回功能没有内核 panic
那么严重，但可造成使用另一个节点 fence 这个节点。
:::
::: para
如果您使用启用了启动脚本的 `gfs2`{.literal} 配置您的系统，且在
`/etc/fstab`{.filename} 文件中包含 GFS2 文件系统，则会在重启时重新挂载该
GFS2 文件系统。如果因为文件系统崩溃造成 GFS2
文件系统收回，则建议您在重新挂载该文件系统前运行 `fsck.gfs2`{.command}
命令。在这种情况下，要防止您的文件系统在引导时重新挂载，您可以执行以下步骤：
:::
::: {.orderedlist xmlns:d="http://docbook.org/ns/docbook"}
1.  ::: para
    使用以下命令暂时在受影响的节点中禁用启动脚本：
    :::
    ``` screen
    # chkconfig gfs2 off
    ```
2.  ::: para
    重启受影响的节点，启动集群软件。此时将不会挂载该 GFS2 文件系统。
    :::
3.  ::: para
    在集群的所有节点中卸载该文件系统。
    :::
4.  ::: para
    只在确定没有文件系统崩溃的一个节点的文件系统中运行
    `fsck.gfs2`{.command}。
    :::
5.  ::: para
    运行以下命令在受影响的节点中重新启用该启动脚本：
    :::
    ``` screen
    # chkconfig gfs2 on
    ```
6.  ::: para
    在集群的所有节点中重新挂载 GFS2 文件系统。
    :::
:::
::: para
可能造成 GFS2 收回的不一致性示例为错误的块计数。当 GFS
内核删除文件系统中的某个文件上，它会系统地删除与那个文件关联的所有数据和元数据。完成此操作后，它会检查块计数。如果该块计数不是
1（意思是只剩下磁盘内节点自己），则表明文件系统不一致，因为块计数与找到的块列表不匹配。
:::
::: para
You can override the GFS2 withdraw function by mounting the file system
with the `-o errors=panic`{.literal} option specified. When this option
is specified, any errors that would normally cause the system to
withdraw cause the system to panic instead. This stops the node\'s
cluster communications, which causes the node to be fenced.
:::
::: para
在内部，GFS2 通过让内核向 `gfs_controld`{.command}
守护进程发送请求撤回的信息启动撤回功能。`gfs_controld`{.command} 会运行
`dmsetup`{.command}
程序替换该文件系统中的设备映射器错误目标以防止进一步访问块设备。然后它会告诉内核操作完成。这是
GFS2 支持要求总是在 GFS2 使用 CLVM
设备的理由，否则就不可能插入设备映射器目标。
:::
::: para
设备映射器错误目标的目的是确保将来所有的 I/O 操作都将有一个 I/O
出错信息会让该文件系统以较旧的方式卸载。结果是当出现撤回时，通常会在系统日志中看到来自设备映射器的
I/O 出错信息。
:::
::: para
偶尔在 `dmsetup`{.command}
程序不可能根据要求插入错误目标则撤回会失败。如果撤回时缺少内存，且由于造成撤回的问题而无法重新使用内存会发生这种情况。
:::
::: para
撤回并不总是意味着 GFS2 中有错误。有时撤回功能可由与基础块设备有关的设备
I/O 错误引发。强烈建议您检查日志来查看发生撤回是否是这样的原因。
:::
:::
:::
[]{#ch-troubleshoot.html}
::: chapter
::: titlepage
# [⁠]{#ch-troubleshoot.html#ch-troubleshoot}第 5 章 诊断并修正 GFS2 文件系统的问题 {.title}
:::
::: para
本章提供常见 GFS2 问题以及如何处理这些问题的信息。
:::
::: section
::: titlepage
# [⁠]{#ch-troubleshoot.html#s1-slowGFS2}5.1. GFS2 文件系统出现性能缓慢 {.title}
:::
::: para
您会发现 GFS2 文件系统显示出比 ext3 文件系统缓慢的性能。在某些情况下
GFS2 的性能可能受到一些因素的影响。本文档中有关于处理 GFS2
性能问题的信息。
:::
:::
::: section
::: titlepage
# [⁠]{#ch-troubleshoot.html#s1-gfs2hang-onenode}5.2. GFS2 文件系统挂起并需要在一个节点中重启 {.title}
:::
::: para
如果您的 GFS2
文件系统挂起，且不返回由此运行的命令，但重启一个返回常态的具体节点，这可能表示有锁定问题或者
bug。出现这种情况时您应该收集以下数据：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    在每个节点中为该文件系统执行的 gfs2 锁定转储：
    :::
    ``` screen
    cat /sys/kernel/debug/gfs2/fsname/glocks >glocks.fsname.nodename
    ```
-   ::: para
    每个节点中为该文件系统执行的 DLM 锁定转储：您可以使用以下
    `dlm_tool`{.command} 命令收集这个信息：
    :::
    ``` screen
    dlm_tool lockdebug -sv lsname.
    ```
    ::: para
    在这个命令中，*lsname* 是有问题的附加系统 DLM
    使用的锁定空间名称。您可以在 `group_tool`{.command}
    命令的输出结果中找到这个值。
    :::
-   ::: para
    `sysrq -t`{.command} 命令的输出结果。
    :::
-   ::: para
    `/var/log/messages`{.filename} 文件的内容。
    :::
:::
::: para
您收集到数据后，可以在 Red Hat 支持生成一个 ticket，并提供您收集的数据。
:::
:::
::: section
::: titlepage