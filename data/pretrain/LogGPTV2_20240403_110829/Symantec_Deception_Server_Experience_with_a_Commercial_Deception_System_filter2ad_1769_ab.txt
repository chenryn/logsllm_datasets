tion,  and  providing  sufficient  management  functionality.  Sites  interested  in  instru-
mented systems should consider one designed by a security professional with signifi-
cant honeypot experience and which is provided as a real software product (including 
support). 
An example of this type of honeypot would be Symantec’s ManTrap product. 
Sites interested in receiving more information than a facade provides but that can-
not afford the large administrative overhead of a sacrificial lamb system should con-
sider an instrumented system honeypot. These provide a richer integrated feature set 
and have taken into consideration scalability, deployment, reporting, and administra-
tion. These are typically used by medium to large enterprise. 
3.4   Additional Considerations 
While  not  specific  to  a  particular  class  or  form  of  honeypot,  there  are  a  number  of 
additional features or functions which should be considered by an organization evalu-
ating honeypots.  
It is important to consider the nature and the cost of containment and control. Any 
system  deployed  in  a  network  presents  possible  risk.  Measures  should  be  taken  to 
mitigate that. Risk level, functionality, and restriction capability should be considered 
in any product that provides containment and control. If the product does not support 
any  native  containment  and  control,  the  cost  and  complexity  of  implementing  it 
should be seriously considered. 
While honeypots can provide an excellent source of data, it is important to remem-
ber that the data by itself does nothing. In order to be useful, the data must be ana-
lyzed.  Some products provide integrated analysis, reporting and alerting. Others re-
quire the administrator to provide the data review and security expertise. How much 
Symantec Deception Server Experience with a Commercial Deception System      193 
analysis is offered and how the administration is done is an important consideration 
and has significant impact on the cost of using such a system. 
Cluster or group administration functionality should be considered when deploying 
multiple deception devices. Systems which provide the ability to work in clusters and 
have single points of administration and reporting provide for a much more scalable 
solution than those that require manual operation of each node. 
Maintenance of content and restoration of the honeypot should also be taken into 
consideration. These both contribute to the ongoing administrative cost of maintain-
ing a deception system. Content on a deception device needs to be periodically up-
dated so it appears valid and “live”. Deception systems which have been attacked may 
also need to be periodically restored to a “clean” state. In both of these cases, solu-
tions which provided automated capabilities for this can reduce administrative costs. 
Finally, it is worth considering the relationship of honeypots to host-based intru-
sion detection systems (HIDS) [4] and integrity monitoring systems. HIDS are usually 
deployed  on  a  production  system  and  designed  more  as  a  burglar  alarm.  Running 
these on a production system really does not provide the same value as a honeypot. 
They are much more prone to false positives, force the administrator to deal with the 
difficulty of monitoring normal user activity, and generally do not provide contain-
ment  or  good  administration  functionality  (for  a  honeypot  approach).  These  can  be 
used to create honeypots, but often produce very large signatures since they are not 
designed for stealth. 
Integrity  monitoring  software  has  many  of  the  same  deficiencies  as  HIDS  for 
honeypot use. It is designed for monitoring a production system for change, not user 
activity  or  security.  It  provides  none  of  the  additional  functionality  needed  for  a 
honeypot.  As  with  a  HIDS,  these  also  create  very  large  signatures  (indications  that 
this is not a normal system) that are not desirable for a honeypot. 
4   Deployment Strategies 
While many honeypot implementations may function well in single deployments with 
dedicated administrative efforts, larger deployments (a.k.a. "enterprise deployments") 
require additional functionality to be effective solutions. An organization that wishes 
to deploy honeypots should have an overall computer security policy that states what 
the threats are, what the main goals for an attacker might be where high-value systems 
are, and how potential targets will be protected. This security policy will dictate what 
the honeypot deployment strategy will be. 
This  section  describes  a  few  different  deployment  strategies.  These strategies, or 
combinations of them, can be used together with firewalls and IDS to form a cohesive 
security infrastructure to protect an organization. 
4.1   Minefield 
In  a  minefield  deployment,  honeypots  are  installed  among  live  machines,  possibly 
mirroring some of the real data. The honeypots are placed among external servers in 
the DMZ, to capture attacks against the public servers, and/or in the internal network, 
to capture internal attacks (which either originated internally or external attacks that 
penetrated the firewall and now use internal machines as launching pads). 
194      Brian Hernacki, Jeremy Bennett, and Thomas Lofgren 
Attacks are rarely restricted to a single machine. Many manual and automated net-
work attacks follow the same pattern: Assuming a successful attack has taken place 
on  one  machine  in  the  network,  that  machine  is  then  used  to  scan  the  network  for 
other potential targets, which are subsequently attacked. For manual attacks, this takes 
some  time,  while  worms  will  normally  execute  the  scan  just  seconds  after  the  first 
infection [11]. The scanning can be done in a way to specifically avoid setting off IDS 
systems (e.g., through "slow scans"), but honeypots in a minefield will be alerted. 
For example, if a network has one honeypot for every four servers, then the chance 
of hitting a honeypot with a random, single-point attack is 20%. In reality, the chance 
is significantly better than that because in most cases an entire block of network ad-
dresses  will  be  scanned.  When  this  happens,  it  is  practically  guaranteed  that  the 
honeypot will detect the intrusion shortly after any machine on the network has been 
compromised. 
Even  though  the  intrusion  detection  aspect alone is important, another feature of 
using honeypots is to gain info on attack tools and purpose. With good security prac-
tices on the production machines, weaker security on the honeypots may increase the 
chance that they will be the first machines that are attacked. A well-designed honey-
pot will then have the information about what service was attacked, how that service 
was attacked, and – if the attack was successful – what the intruder did once inside. 
Having the honeypots configured exactly the same way as the regular servers, how-
ever,  has  other  advantages.  It  increases  their  deception  value  slightly,  and  it  also 
means that when a honeypot has detected a successful attack, that attack is likely to 
succeed on the production hosts. 
Fig. 1. A “minefield” deployment 
4.2   Shield 
In a shield deployment, each honeypot is paired with a server it is protecting. While 
regular traffic to and from the server is not affected, any suspicious traffic destined for 
the  server  is  instead  handled  by  the  honeypot  shield.  This  strategy  requires  that  a 
firewall/router filters the network traffic based on destination port numbers, and redi-
rects the traffic according to the shielding policy. 
For instance, consider a web server deployed behind a firewall. Web server traffic 
will be directed to the web server IP address on TCP port 80. Any other traffic to the 
web server is considered suspicious, and can be directed to a honeypot.  
Symantec Deception Server Experience with a Commercial Deception System      195 
The honeypot should be deployed in a DMZ, and to maximize the deception value, 
it may replicate some or all of the non-confidential content of the server it is shield-
ing. In the example of the web server, this is merely a matter of mirroring some or the 
entire web content to the honeypot. 
In conjunction with the firewall or router, honeypots deployed in this fashion pro-
vide actual intrusion prevention in addition to intrusion detection. Not only can poten-
tial  attacks  be  detected,  they  can  be  prevented  by  having  the  honeypot  respond  in 
place  of  the  actual  target  of  the  attack.  It  should  be  added  that  a  honeypot  shield 
cannot protect a mail server from SMTP exploits, nor a web server from HTTP ex-
ploits,  since  "regular"  traffic  must  be  able  to  reach  its  target.  However,  since  live 
servers generally need very few open ports, it is reasonably easy to find the point of 
an  attack  –  both  for  prevention  and  forensic  purposes  –  and  all  other  ports  lead 
straight to the honeypot, where the attack can be analyzed in detail.  
A shield deployment is an example of how honeypots can protect a high-value sys-
tem, where attacks can be expected. 
Fig. 2. A “shield” deployment 
4.3   Honeynet 
In  a  honeynet  deployment,  a  network  of  honeypots  imitates  an  actual  or  fictitious 
network. From an attacker’s point of view, the honeynet appears to have both servers 
and  desktop  machines,  many  different  types  of  applications,  and  several  different 
platforms. Another term for this deployment is “zoo”, as it captures the wild hacker in 
their natural environment. 
In a sense, a honeynet is an extension of the honeypot concept, in that it takes mul-
tiple deception hosts (single honeypots), and turns them into an entire deception net-
work. A typical honeynet may consist of many facades (because they are light-weight 
and reasonably easy to deploy), some instrumented systems for deep deception, and 
possibly  some  sacrificial  lambs.  In  order  to  provide  a  reasonably  realistic  network 
environment, some sort of content generation is necessary. On a host basis, this in-
volves simulating activity on each deep honeypot, as well as generating network traf-
fic to and from the clients and servers, so that the network itself looks realistic from 
the outside.  
196      Brian Hernacki, Jeremy Bennett, and Thomas Lofgren 
In a small example of a DMZ that contains a web server and a mail server, con-
sider two honeypots that act as shields to the servers. Any traffic to the web server 
that is not HTTP traffic will be directed to the web server’s shield. Any traffic to the 
mail server that is not SMTP will be directed to the mail server’s shield. By adding a 
few more honeypots, another dimension can be added to this deception; all traffic to 
unknown IP addresses can be directed to honeypots, not only traffic to known hosts. 
The  strength  of  the  honeynet  shield  is  that  it  shields  an  entire  network  instead  of  a 
single host. Similarly, honeynet minefields represent the scenario where each mine is 
an entire network, as opposed to just a single honeypot. It is also possible to configure 
a honeypot so that any outbound traffic (e.g. the attacker trying to attack another sys-
tem from the honeypot) can be directed only into an isolated honeynet. This provides 
both containment and the possibility of gathering additional and very useful informa-
tion about the attacker’s attempts. 
Honeynets can be useful in a large enterprise environment, and offer a good early 
warning system for attacks. A honeynet may also provide an excellent way to figure 
out an intruder’s intention, by looking at what kind of machines and services are at-
tacked, and what is done to them. The Honeynet Project (http://project.honeynet.org) 
is an excellent example of a honeynet used as a research tool to gather information 
about attacks on computer infrastructure. 
Fig. 3. A “honeynet” deployment 
5   Experiences Constructing  
     and Deploying an Instrumented System 
ManTrap  is  a  commercial  honeypot  product  in  the  category  of  "instrumented  sys-
tems". It was originally developed by Recourse Technologies and is now a Symantec 
product. The remainder of this paper discusses our experience with ManTrap. We will 
first present a brief overview of its design and functionality and then discuss some of 
the  challenges  we  faced  in  constructing  and  deploying  it.  Finally  we  will  present  a 
number of existing problems that have not yet been solved.  
We believe that these types of instrumented systems provide a useful, deployable 
tool for many organizations interested in using honeypots. Many of the design consid-
erations made were intended to create a honeypot which was simple enough for most 
administrators to use, secure enough to deploy, and still deep enough to gather valu-
able information about potential attacks. Our goal was to provide a professional qual-
ity high interaction honeypot usable by a broad audience. 
Symantec Deception Server Experience with a Commercial Deception System      197 
5.1   ManTrap Goals 
ManTrap was designed to be a commercially usable honeypot. While there are many 
ways to implement and deploy honeypots, most require far too much administrative 
overhead, far too much technical expertise, or create far too much risk to be deployed 
in most commercial environments. ManTrap’s goal was to create a honeypot which 
could be easily deployed and maintained by a standard enterprise IT/security staff and 
provide valuable security data which could not be easily obtained from other existing 
tools. 
5.2   A Brief Overview 
High Level Architecture 
A ManTrap system consists of a single physical computer. ManTrap is installed on 
top of the operating system (Solaris) and provides operating system level virtualiza-
tion of the system to implement its “honeypots”. Each machine can provide up to four 
different honeypots – or "cages" – with each cage being completely isolated from the 
other cages as well as from the real host system. A user logged into a cage will not be 
able  to  see  the  processes,  network  traffic,  and  other  system  resources  of  the  other 
cages, nor of the host system itself. To the attacker, each cage appears to be a separate 
machine. If a system file is deleted in one cage, it will still exist in the others. 
If an attacker obtains access to a cage, whether by a stolen password, remote net-
work exploit, or other means, the cage will provide a controlled environment where 
information is gathered about the activity, while at the same time containing the at-
tacker, and stopping him from discovering that he is being monitored. 
ManTrap also provides a mechanism to automatically create and maintain dynamic 
content.  While  it  is  possible  to  initially  load  the  system  with  a  set  of  static  content 
(e.g. web pages for a web server), content which changes over time provides a much 
more convincing deception to an attacker. ManTrap provides a module that automati-
cally generates email traffic to and from some of the users on the system. This pro-
vides an additional piece of deception, as an intruder may be fooled into thinking he is 
capturing actual email traffic. The generated email messages are instead created from 
templates provided by the ManTrap administrator. 
The ManTrap system also includes an administration console application. This ap-
plication, built in Java, allows the user to remotely administer the ManTrap machines. 
It is possible to administer multiple ManTrap hosts from a single console. A cluster of 
ManTraps in an enterprise can therefore be managed by a single administrator. 
Audit 