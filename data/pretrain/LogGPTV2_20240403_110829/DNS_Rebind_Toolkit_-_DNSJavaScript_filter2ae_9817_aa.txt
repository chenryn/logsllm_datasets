# DNS Rebind Toolkit - 用于创建DNS重绑定攻击的前端JavaScript工具包
|
##### 译文声明
本文是翻译文章，文章来源：kitploit.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
​DNS Rebind
Toolkit是一个用于开发针对本地局域网（LAN）的脆弱主机和服务的DNS重绑定攻击的前端JavaScript框架。它可以用的目标设备是像Google
Home、Roku、Sonos WiFi扬声器、WiFi路由器、“智能”恒温器和其他物联网设备等设备。
有了这个工具箱，远程攻击者就可以绕过路由器的防火墙，直接与受害者的家庭网络上的设备交互，泄露私人信息，在某些情况下，甚至可以控制这些脆弱的设备。
这个攻击需要在受害者的网络中放入一个简单的链接，或者显示一个包含恶意iframe的HTML广告
。对于受害者，他们的浏览器被用作代理，直接访问连接到其家庭网络的其他主机。 否则，这些目标计算机和服务将无法从Internet上被攻击者使用。
远程攻击者可能不知道这些服务是什么，也不知道它们在受害者的网络上占用了什么IP地址，但是DNS RebindToolkit通过蛮力爆破成百上千的IP地址。
​在底层，这个工具使用一个公共的whonow DNS服务器运行在rebind.network:53
来执行DNS重新绑定攻击，并欺骗受害者的web浏览器违反同源策略。从受害者那里
,它使用WebRTC来泄漏受害者的私有IP地址，比如192.168.1.36。它使用这个本地IP地址的前三个字节来猜测网络的子网，然后注入256
iframe，从192.168.1.0-255向每个可能在网络子网上的主机发送有效负载。
这个工具箱可以用来开发和部署您自己的DNS重绑定攻击。 一些真实世界的攻击payloads 是包含在这个工具目录下的 payloads/
文件夹中。这些payloads 包含的信息泄露（和[rickroll tom-foolery](https://zh.wikipedia.org/wiki/%E7%91%9E%E5%85%8B%E6%90%96%E6%93%BA))
对一些流行的物联网设备的攻击，包括Google Home和Roku产品。
> 这个工具包是对DNS重新绑定攻击的独立安全研究的产物。你可以在 href=”https://medium.com/[@brannondorsey](https://github.com/brannondorsey
> "@brannondorsey")/attacking-private-networks-from-the-internet-with-dns-> rebinding-ea7098a2d325″>Here读到关于原始研究的内容
## 准备开始
    # clone the repo
    git clone https://github.com/brannondorsey/dns-rebind-toolkit.git
    cd dns-rebind-toolkit
    # install dependencies
    npm install
    # run the server using root to provide access to privileged port 80 
    # this script serves files from the www/, /examples, /share, and /payloads directories
    sudo node server
默认情况下，server.js提供payloads以Google
Home、Roku、Sonos扬声器、飞利浦Hue灯泡和无线恒温器设备为目标，分别在800、8060、1400、80和80的端口上运行它们的服务。
如果你的家庭网络中有一个这样的设备，导航到[http://rebind.network，](http://rebind.network%EF%BC%8C)
可以获得一个惊喜 。打开开发者控制台并观看这些服务被无恶意地利用，导致数据从它们中被窃取，并且泄露到server.js上。
## API and 用法
这个工具箱提供了两个JavaScript对象，可以一起使用来创建DNS重绑定攻击：
  * [`DNSRebindAttack`](https://github.com/brannondorsey/dns-rebind-toolkit/blob/master/share/js/DNSRebindAttack.js): 该对象用于对运行在已知端口上的脆弱服务发起攻击。 它为您选择的每个IP地址生成一个payload。DNSRebindAttack 对象被用于创建、管理和多个 DNSRebindNod 对象之间的通讯，通过DNSRebindAttack 启动每一个payload 必须包括一个DNSRebindNode对象。
  * [`DNSRebindNode`](https://github.com/brannondorsey/dns-rebind-toolkit/blob/master/share/js/DNSRebindNode.js) ：这个静态类对象应该包含在每个HTML payload文件中。 它用于针对在一个主机上运行的一个服务。它可以与生成它的DNSRebindAttack对象通信， 并且它具有辅助函数来执行DNS重新绑定攻击（使用DNSReBundNo.ReBand（…））以及在攻击到服务器期间发现的输出数据(DNSRebindNode.exfiltrate(…))。
这两个脚本一起用于在防火墙保护的局域网中对未知主机执行攻击。一个基本的攻击是这样的：
  1. 攻击者向受害者发送一个指向发起攻击的恶意HTML页面的链接：例如[http://example.com/launcher.html。](http://example.com/launcher.html%E3%80%82)`launcher.html` 包含一个`DNSRebindAttack`实例。
  2. 受害者点击攻击者的链接，或者访问一个被嵌入到iframe中的页面，[http://example.com/launcher.html，](http://example.com/launcher.html%EF%BC%8C) 这将导致在 `launcher.html` 中的`DNSRebindAttack`开始攻击。
  3. `DNSRebindAttack` 使用 [WebRTC leak](https://github.com/diafygi/webrtc-ips) 来发现受害者机器的本地IP地址 (e.g. `192.168.10.84`)，攻击者使用这些信息来选择在受害者的局域网中定位的IP地址范围（eg.192.168.10.0-255）。
  4. `launcher.html` 启动DNS重绑定攻击 (使用DNSRebindAttack.attack(…)) 针对受害者子网上的一系列IP地址， 以及针对单个服务（e.g. the [undocumented Google Home REST API](https://rithvikvibhu.github.io/GHLocalApi/) available on port `8008` ）
  5. 在用户定义的时间间隔（默认情况下是200毫秒）， `DNSRebindAttack` 嵌入一个iframe 包含有`payload.html` 放入 `launcher.html` 页面中。每个iframe包含一个`DNSRebindNode` 对象对攻击的IP地址范围内定义的单个主机的8008端口执行攻击。 这个注入过程一直持续到一个iframe被注入到攻击目标的每个IP地址。
  6. 每个注入的payload.html文件使用DNSRebindNode通过与 [whonow DNS server](https://github.com/brannondorsey/whonow) 通信来尝试重绑定攻击。如果成功，那么同源策略将会被违反，Payload.html可以直接与GoogleHome产品进行通信。 通常，payload.html将以这样的方式编写，即它对目标设备进行一些API调用，并将结果泄露到example.com上运行的server.js，然后再完成攻击并自行销毁
> 注意，如果一个用户在他们的网络上有一个不知名的IP地址的Google
> Home设备，并且针对整个192.168.1.0/24的子网发起攻击，那么一个DNSRebindNode的重绑定攻击将会成功，254将会失败。
## 实例
攻击由三个协调的脚本和文件组成：
  * 一个包含有`DNSRebindAttack` 实例的HTML文件 (e.g. `launcher.html`) 。
  * 一个包含有payload 的HTML文件 (e.g. `payload.html`). 该文件被DNSRebindAttack嵌入到Launcher.html中，用于指定每个IP地址。
  * 一个DNS Rebinding Toolkit 服务器（server.js）去运行上述文件和输出数据。
### **launcher.html**
下面是一个示例HTML启动文件。您可以在
[`examples/launcher.html`](https://github.com/brannondorsey/dns-rebind-toolkit/blob/master/examples/launcher.html). 中找到完整的文档。
     Example launcher
### **payload.html**
下面是一个示例HTML有效负载文件。您可以在[`examples/payload.html`](https://github.com/brannondorsey/dns-rebind-toolkit/blob/master/examples/payload.html)中找到完整的文档。