        ... skip ...
    }
调用系统调用comm_show()，通过(1)(2)(3)处所示代码逻辑便可以实现任意地址写。
    static int comm_show(struct seq_file *m, void *v)
    {
        struct inode *inode = m->private;
        struct task_struct *p;
        p = get_proc_task(inode);
        if (!p)
            return -ESRCH;
        task_lock(p);
        seq_printf(m, "%s\n", p->comm); // call seq_printf to write p->comm into seq_file->buf    count size) {
            len = vsnprintf(m->buf + m->count, m->size - m->count, f, args);    count + len size) {                                     
                m->count += len;
                return;
            }
        }
        seq_set_overflow(m);
    }
**• 基于Epitem来实现固定地址的任意写**
epitem和上面两个结构体不同，其data字段可通过调用系统调用epoll_ctl()来进行设置，这相当于实现了内核固定地址上稳定的8-bytes任意值写入。
    (gdb) pt /o struct epitem epitem                           
    /* offset    |  size */  type = struct epitem {
                           ... skip ...
    /*  112      |    16 */    struct epoll_event {
    /*  112      |     4 */        __u32 events;
    /* XXX  4-byte hole  */
    /*  120      |     8 */        __u64 data;     pt/o struct binder_node
    /* offset | size */ type = struct binder_node {
    /* 0 | 4 */ int debug_id;
    /* 4 | 4 */ spinlock_t lock;
    ... skip ...
    /* 112 | 16 */ struct list_head {
    /* 112 | 8 */ struct list_head *next;
    /* 120 | 8 */ struct list_head *prev;
    /* total size (bytes): 16 */
    } async_todo;    seccomp->filter指向了所用的BPF规则，但该指针不能被直接置为空，相应的检测机制会触发kernel panic
  * BPF过滤规则通过链表组织，在我们的测试中，其一共有四项，我们将其设置为倒数第二项可以绕过系统调用限制，并能成功创建socket，实现反弹shell！
## Demo
下面链接使我们录制的一个攻击演示视频，该视频示范了利用该利用链可以在Pixel 4上安装任意应用。
链接：
## **Conclusion**
本文介绍了该条远程ROOT利用链沙箱逃逸提权部分，具体介绍了我们在尝试利用该漏洞在高度沙箱化的进程中攻击内核时遇到的各类问题，以及解决方法。文中所的一次触发漏洞就实现稳定任意地址读写方案非常强大，但该案对结构体大小的依赖比较大，其中用到的seq_file及binder_node结构体其大小在不同的系统版本上可能会有所变化，这些变化可能会导致利用方案的失败，但基于该模型有可能找到一些其他的替代方案。目前该利用方案还是需要适配selinux_enforcing符号地址，这也留下了一个问题，这一步在拥有了稳定内核地址读写元语后能不能自动化完成?
安卓系统在内外多重推力下其安全性得到了不断的加强，各类防护机制被不断引入，谷歌多次提高其漏洞奖励计划奖励额度，体现其对自身产品安全性的信心。但绝对安全只是我们的愿景，现实却非常残酷。文中介绍的漏洞利用方案，在极为苛刻的条件下，采用极为简单的方案实现了仅触发一次漏洞就获得了稳定的任意地址读写元语，使得系统现有的各类防护变得脆弱不堪，其中一次触发漏洞也达到了理论极限。防护更多的是考虑的是一个面，而攻击却可以仅找一个点，攻防对抗也将在这个过程不断博弈，不断发展。
最后，在这里感谢团队小伙伴龚广、姚俊、张弛在这条利用链中所提供的帮助。他们提出了许多宝贵的建议，给了我们诸多启发，感谢他们！
* * *