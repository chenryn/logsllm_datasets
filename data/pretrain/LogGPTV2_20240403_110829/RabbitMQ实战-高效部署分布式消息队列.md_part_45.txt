的目的开始：将自己从紧耦合和应用间同步通信中解放出来。现在你能做的已远不
正于此。你能构建工业级强度的消息通信架构来为下一个改变世界的应用提供动力。
不管你是否在编写下一个成功的遛狗应用，改变医生帮助病人的方式，或是帮助旅
途中的父亲在路上见见他的女儿，我们希望你能明白消息通信存在于软件的每个角
落。最重要的是，我们希望这本书能够帮助你，以便你能专注于如何使用RabbitMQ
而非自行深入研究。随着我们这次“旅途”的结束，你和Rabbit的旅途才刚刚开始，
眼前是无尽的消息通信世界。如果这一路上你需要任何帮助的话，我们非常乐意在
RabbitMQinAction论坛上收到你的来信。尽情享受RabbitMQ之旅吧！
---
## Page 295
附录A
在Java和.NET上使用
Rabbit
虽然我们选择Python和PHP作为教学语言是由于其语法清晰、适宜教学，但
是我们也意识到了.NET和Java程序员的读者也很多。同样地，用于不同语言的
AMQP客户端大多数在接口层面都十分相似。但是Java和.NET的客户端与其他语
言迥然不同，以至于我们必须给出一些建议来指导本书中的示例映射到这两门语言
上。记住这点，我们会将本书中的部分示例转换为.NET和Java平台上的等价物。
特别是我们会向你展示用C#如何编写HelloWorld示例。同样地，我们会将第4章
中的告警和RPC示例分别用C#和Java重写。在每个示例中，我们的目标是尽可能
地遵循最初Python和PHP示例的结构、注释和命名约定。我们希望能够帮助你构
建一副思维导图（mentalmap），当你在本书中寻找任何其他示例的时候，可以轻松
将其转换成Java或者.NET平台对应的代码。像本书中的其他示例一样，所有附录
的源代码可以在本书的Github代码库中进行下载：https://github.com/rabbitinaction/
sourcecode。在该代码库中，你不仅可以找到·java 和.cs源文件，也可以找到.NET
示例的Visual Studio项目（可以随时用msbuild构建）。事不宜迟，让我们来看一
下如何将第2章中的HelloWorld示例转换成C#吧。
---
## Page 296
274
附录A在Java和.NET上使用Rabbit
A.1
用C#重写HelloWorld示例（库选项和HelloWorld
程序)
在.NET世界中有太多的编程语言可供选择，我们将专注于C#下的RabbitMQ
NET客户端使用。特别是，本附录中的所有.NET示例都假设你使用.NET框架的4.0
版本（包括C#4.0）。但是在我们开始动手编写C#版的HelloWorld之前，你首先
要做的是安装RabbitMQ.NET客户端。
你总是可以在http://www.rabbitmq.com/dotnet.html上找到.NETRabbit客户端
的最新版本。在我们的示例中将使用2.7.0版本。在.NET客户端下载页面里，你可
以找到自动安装包（.MSI）和.ZIP两种格式的客户端。为了方便起见，我们建议使
用.MSI，因此请下载.MSI安装包并运行（见图A.1）。该示例假设客户端已经安装
在了默认位置（C:ProgramFiles\RabbitMQ\DotNetClient）
RabbitMQ·NET/C
NET/C#AMQPclient library andWCF binding
The RabbitMQ.NETRabbitMQNETClent270setup
r.NET
anguages),anda
ition(WCF)
seethespe
formanc
WelcometotheRabbitMQ.NETClient
Thelibraryisop
2.7.0 Setup Wizard
blic
icensev1.1
orderto co
ThelahangetheyRab
Cick Next to continue on
Version
wnloada
Download tl
Libraryanddoc
RabbitMQ
Description
Binary,compiled
includesdocun
e
C
图A.1安装Rabbit.NET客户端
在安装好了客户端之后，为你的HelloWorld消费者创建VisualStudio项目（选
择EmptyProject），如图A.2所示。
在开始编写代码之前，你需要做的最后一件事是将RabbitMQ.NET客户端的引
用添加到项目中；否则，Visual Studio（或者msbuild）将无法找到它。首先，在
新项目下的SolutionExplorer中右击References项，并选择AddReference（见图A.3）。
---
## Page 297
A.1
用C#重写HelloWorld示例（库选项和HelloWorld程序）
275
New Project
Recent Templates
Sort by.Default
Installed Templates
WindowsFarmsApplication
Type: Visual C#
VisualC#
VisualC#
Anempty project forcreating alocal
WPF Application
Visual C#
Console Application
VisualC#
ClassLibrary
VisualC#
WPF BrowserApplication
VisualC#
Empty Projet
VisualC#
Name
HeloWorldConsumer
OK
Cancel
3:06PM
11/20/2011
图A.2创建HelloWorldConsumer项目
HeloWoridConsumerMicosotVeualCo2o10Ere
FileEdit ViewProject Debug Data ToolsWindowHelp
Solution Explorer
SolutionHelloWorldConsumer(1 praject)
HelloWoridConsumer
Add Beference...
gences
world_consumer.cs
Add Senvice Referenc....
3:13PM
11/20/2011
图A.3为VisualStudio项目添加引l用
---
## Page 298
276
附录A在Java和.NET上使用Rabbit
下一步选择Browse选项卡（见图A.4），并导航到C:ProgramFiles\RabbitMQV
DotNetClient\bin目录（或者是你安装客户端的那个目录）。然后选择RabbitMQ.
Client.dll并单击OK按钮。
Solution Explorer
4X
日
AddRele
NETCOMProjects Browse Recent
Lookin:bin
Name
Datemodified
Type
Size
RabbitMQ.Client.dll
11/8/20114:52PMApplicationexens
544KB
Flename
RabbitMQ.Clent
Fles of type
fest
OK
Cencel
e
3:17PM
C#
11/20/2011
图A.4选择RabbitMQ.Net引用
在将RabbitMQ.NET添加到项目之后，在项目中新建一个文件并命名为hello
worldconsumer.cs，来存放HelloWorld消费者代码。首先在该文件中输人下列导人
代码：
using System;
using System.Text;
using RabbitMQ.Client;
usingRabbitMQ.Client.Events;
导人RabbitMQ.Client后，你就可以创建连接和信道了（IConnection和
IModel），同时也能对消费订阅进行管理（QueueingBasicConsumer）。你同时需
要导人RabbitMQ.Client.Events，以便在消息投递事件发生时，能够对传回给
消费者的参数进行访问。
---
## Page 299
A.1用C#重写HelloWorld示例（库选项和HelloWorld程序）
277
由于RabbitMQ服务器和你的消费者很有可能不是运行在同一台机器上，因此
你需要从命令行接收Rabbit主机地址参数：
namespace HelloWorld{
class Consumer {
public static void Main(string[l args){
if(args.Length < 1){
Console.WriteLine("Must supply hostname.");
Environment.Exit(-l);
现在，你已经开始着手编写HelloWorld.Consumer类来实现消费者了，并获
得了RabbitMQ主机名用于连接。让我们连接到服务器并开始创建消息通信结构吧。
清单A.1为消费者创建消息通信结构
var conn_factory= new ConnectionFactory();
conn_factory.HostName = args[0] ;
conn_factory.UserName = "guest";
①建立到服务
conn_factory.Password = "guest";
器的连接
IConnection
conn = conn_factory.CreateConnection();
IModel chan = conn.CreateModel();
2获取信道
chan.ExchangeDeclare("hello-exchange",
③声明交换器
ExchangeType.Direct,
true,
false,
null);
chan.QueueDeclare("hello-queue"
<-4声明队列
false,
false,
false,
nul1);
③用键hola绑
定队列和交
chan.QueueBind("hello-queue",
换器
"hello-exchange",
"hola");
消费者首先做的是创建ConnectionFactory对象，用来产生并管理到服务器
的连接。在使用工厂创建连接后，你使用返回的连接对象（conn）来创建信道②。
你可能注意到了channel对象（chan）是IModel类型，代表了AMQPchannel。这
和任何其他Rabbit客户端库不一样（包括Java客户端），它们使用channel来代表
---
## Page 300
278
附录A在Java和.NET上使用Rabbit
AMQP信道。所以当你看到RabbitMQ.NET客户端的类中使用model时，可别感到
迷惑，在这里它（model）指代的就是信道。
和队列以构建通信结构。如同第2章中的原始HelloWorld消费者那样，你定义了
direct类型的交换器，设置成可持久化但非自动删除。ExchangeDeclare函数的第
二个参数指明了交换器类型为direct（ExchangeType.Direct）③。在RabbitMQ.
NET客户端中，交换器类型是使用ExchangeType类的常量来指明的。如果你想
要将hello-exchange声明为fanout 的话，则可以使用ExchangeType.Fanout²。
然后，你使用QueueDeclare来创建4非持久化的、非自动删除的队列（hello-
queue），并在路由键hola上绑定到hello-exchange。
最终，你准备订阅hello-queue 并开始处理消息。
清单A.2订阅和处理消息
QueueingBasicConsumer
consumer=new QueueingBasicConsumer(chan);
1订阅消费者
String consumer_tag = chan.BasicConsume("hello-queue",
false,
consumer);
while(true){
<—2开始消费
BasicDeliverEventArgs
evt_args =(BasicDeliverEventArgs)
处理发来
consumer.Queue.Dequeue();
③的消息
IBasicProperties msg_props = evt_args.BasicProperties;
1在.NET客户端上使用model来描述信道是AMQP早期的历史遗留问题。当时有这样的想法，除了TCP
协议之外的其他传输协议（HTTP、SCTP等）可能会用于AMQP。由于channel的概念是特定于TCP传
输层的，因此.NET客户端架构使用了更为通用的术语model来代表相同的概念。现在TCP是AMQP的
唯一传输协议，所有新的客户端都使用术语“信道”（channel）。
2ExchangeType是一个方便类。你也可以选择性地使用包含交换器类型的字串来传入ExchangeDeclare。
举个例子，你可以用"direct"替换ExchangeType.Direct来传人ExchangeDeclare。
---
## Page 301