Permission
4.38d*
16.84d
Total
*The average patch time for missing permission check is calculated on the action level.
# Patched (%) Patch Time
65 (23.90%)
457 (20.85%)
56 (66.67%)
349 (53.72%)
679 (24.61%)
28 (33.33%)
313 (47.28%)
2,080 (75.39%)
207 (76.10%)
1,735 (79.15%)
rollback vulnerability12, while all the other 79 ones are cor-
rect. We then conducted an in-depth analysis to understand
that failed case. The investigation showed that the constructed
path (see §5.3.4) had indeed reached the target reveal func-
tion. The failure, similar to the false negative case mentioned
in §7.1, was due to the extreme complicated control ﬂow in-
side the function. However, after adopting the same method
in §7.1, i.e., manually feeding the reveal function into the
scanner, it was still timeout even after 30 minutes. As such,
due to the conservative strategy, EOSAFE mislabeled this
contract as safe to produce the false negative. In nutshell, the
result is inline with our evaluation on the benchmark.
7.2.2 Time to ﬁx the vulnerability
We next investigate the time to ﬁx the vulnerabilities for each
smart contract, which could be used to measure the window
period for the attackers to exploit these vulnerabilities.
Result. As shown in Table 4, for the 2,759 unique smart
contracts with vulnerable versions, over 75% of them still
have at least one security vulnerability in their latest version
by the time of our study. 679 unique smart contracts have
patched all their vulnerabilities during their evolution, and the
average window period is 16.84 days.
Patch Rate. We further analyze the patch rate across vul-
nerabilities. The rollback vulnerability has the highest patch
rate (over 66%), and the average window period is roughly
4 days. The reason for its timely response might be that the
rollback vulnerability only exists in game/gambling DApps,
which usually have high balance in their accounts. The ﬁnan-
cial loss could be devastating if developers leave the vulner-
ability alone. For the missing permission check, 349 smart
contracts have patched all their missing check actions. Note
that we measured the average patch time on the action level
here, as one vulnerable contract may have more than one miss-
ing permission check actions. There are 647 patched actions
in total – roughly 500 of them are patched within only one
day, while the overall patch time is 4.38 days. It suggests that
most of the missing permission checking actions are patched
timely, while a few contracts take relative long time to ﬁx.
In contrast, the fake EOS and the fake receipt vulnerabilities
have the lowest patch rates (i.e., roughly 20%), and the patch-
ing time is relative long (i.e., 2 to 3 weeks on average). Our
manual check found that, half of the smart contracts related
to fake receipt are patched within 24 hours, which further
indicates that some inactive smart contracts drag the average
patch time. Most of the inactive smart contracts (accounts)
12Named as eospindealer, deployed at 2018-12-28 03:14:10
have no balance and very few transactions, which are usually
not the targets of attackers.
7.3 RQ3: The Presence of Attacks
7.3.1 Approach
It is non-trivial to explore how many of the vulnerable smart
contracts have been successfully exploited. Until recently, a
lot of ad hoc (often manual) efforts of security researchers [26,
27] are necessary to verify them. Thus, we ﬁrst collected all
the on-chain transactions including the ones of labeled non-
vulnerable contracts, and then designed a set of heuristics to
locate the suspicious attacks, which will be used to facilitate
further manual veriﬁcation to determine the real attacks. In
total, we have collected over 2.5 billion transaction records.
Fake EOS Attack. The most important behavior of this
attack is to defraud the ofﬁcial EOS tokens from the vulnera-
ble smart contract by using the fake EOS tokens, which can
be identiﬁed through the transaction records storing the in-
formation of token issuers. According to the observation, we
will ﬁrst ﬁlter out all the transactions of token transfer whose
token symbols are “EOS”. Then, these transactions will be
grouped according to the following deﬁnitions:
• fake-sending transactions that send fake EOS tokens.
• true-sending transactions that send true EOS tokens.
• true-receiving transactions that receive true EOS tokens.
As a result, we can deﬁne a potential attack as a sequence
of a fake-sending transaction followed by a true-receiving
transaction. Note that a fake-sending transaction A can be
joined with a true-receiving transaction B, if and only if they
appear on the same period while A occurs before B. For
all these potential transactions, we focus mainly on those
who have gained more true EOS tokens than they spent. To
this end, we further examine the input-output ratio between
the attacker and the vulnerable contracts to determine the
suspicious attacks. Finally, based on the suspicious attacks,
we will verify whether the vulnerable smart contracts will
resume the normal execution (e.g., running a lottery for a real
player) after receiving the fake EOS tokens. If so, we will
mark the suspicious transaction as a fake EOS attack.
Fake Receipt Attack. The key feature of this attack is that
the vulnerable smart contract is misled by the fake notiﬁca-
tion to receive tokens, while the actual token transfer occurs
between the two accounts belonging to the same attacker (see
§3.2). For simplicity, we will use from_account and to_ac-
count to represent the two accounts in the following, where
to_account will send the fake receipt to vulnerable contract,
and from_account is the ultimate beneﬁciary.
Accordingly, we will ﬁrst query all the transactions of token
transfer whose tokens are issued by eosio.token and token
symbols are “EOS”, to get all the true EOS token transfers.
Then, we will ﬁlter out the transactions whose receivers are
neither eosio.token, nor the from_account or to_account.
These transactions will be regarded as the fake receipts with
crafted notiﬁcations. Next, if a from_account sends a fake
1284    30th USENIX Security Symposium
USENIX Association
Table 5: Overall results of attack detection.
Type
# Attacks
Financial Loss ($)
# Veriﬁed
# Attackers
/ Victims
Fake EOS
Fake Receipt
Rollback
Permission
Total
* Exclude the results of missing permission check.
10 / 9
28 / 17
12 / 9
- / 144
50 / 34*
9
27
12
183
48*
652,428.48
1,020,831.94
52,984.00
-
1,726,244.42
8
7
12
-
27
receipt before making proﬁts from the vulnerable contract,
we will mark the corresponding transaction as potential. After
that, by eliminating the unrelated EOS spending transactions
(e.g., for testing purpose initiated by the attacker), we focus
mainly on those who have gained more true EOS tokens
than they spent. If the input-output ratio are still high, the
corresponding transactions are labeled as suspicious.
Finally, we will manually check the suspicious transactions
whether the vulnerable smart contract will resume the normal
execution after receiving the fake receipts. If so, we will mark
such a transaction as a fake receipt attack.
Rollback Attack. As mentioned in §3.3, the transaction of
this attack is composed of sequential invocations of actions,
which can be used as the pattern to identify the attack.
Speciﬁcally, we will ﬁrst ﬁlter out all the transactions which
contain at least four actions as the potential transactions.
Among them, we will select suspicious ones that meet the
following four conditions: (1) the ﬁrst and the last actions
must be invoked in the same contract, where the ﬁrst means
to start the attack, and the last will determine whether the
rollback is necessary after receiving the reward from the vul-
nerable smart contract. (2) the two actions in the middle must
be token transfers through eosio.token, and the sender and
the receiver (either one must be the vulnerable smart contract)
of the two actions are arranged opposite to each other. (3) at
least one of the counterparties, i.e., either the sender or the
receiver, is labeled as the gambling or game DApp. (4) the
amount of tokens transferred from the vulnerable smart con-
tract is more than it received. Besides, it is worth noting that,
the rollbacked transactions will not be recorded on the chain.
As a result, we have to manually check the player’s successful
rate per unit time, namely, if it is oddly high than the others,
we will mark the suspicious transaction as a rollback attack.
Missing Permission Check Attack. Because authority in-
formation is along with the invoked transaction, we can ex-
amine whether it belongs to the callee contract to identify this
attack. More precisely, we will ﬁrst screen out all the transac-
tions whose target actions are the vulnerable actions, to get
suspicious transactions. Then, if the transaction’s authority
does not belong to that smart contract the action belongs to,
we will mark it as a missing permission check attack.
7.3.2 Results
The overall result is shown in Table 5. We have identiﬁed 48
attacks in total, including 9 fake EOS attacks, 27 fake receipt
attacks, and 12 rollback attacks. Note that 35 attacks among
Table 6: Top 5 identiﬁed attack events.
Attacker Account(s) Victim Account Financial Loss (EOS/$)
il***23
wh***r1
re***et
re***om
re***et
aa***fg
be***s1
be***s2
-
eosbetdice11
eoscastdmgb1
nkpaymentcap
eosbetdice11
epsdcclassic
138K/757K
63K/328K
54K/201K
44K/234K
17K/42K
-
341K/1,639K
Type
Fake Receipt
Fake EOS
Fake Receipt
Fake EOS
Fake Receipt
Total
them were ﬁrst discovered by our approach. Additionally,
we also identiﬁed 183 invoked actions (belonging to 144
contracts) which missed the permission checking. Note that
for these missing permission check actions, some of them are
designed intentionally instead of unexpected implementation.
It is hard to differentiate whether they are attacks or not, and
it is impossible to estimate the ﬁnancial loss. Therefore, we
regard them as misuse actions instead of attacks.
Impact of Attacks. The 48 identiﬁed attacks lead to over
341K EOS loss, which is roughly 1.7M USD according the
close price of the date of attacks. Note that we have collabo-
rated with a leading blockchain security company to report
these attacks to the DApp developers, and 27 of them have
been conﬁrmed, accounting for more than 99% of the total
loss. All the unconﬁrmed suspicious attack events only relate
to a few EOS, and most of them are no longer active. The
Top-5 conﬁrmed attack events are listed in the Table 6.
Unexploited Vulnerable Contracts. It is interesting to ob-
serve that, although thousands of contracts are vulnerable (see
Table 3), only a few of them have been successfully exploited
by attackers in the wild. Thus, we have manually sampled
40 labeled vulnerable smart contracts (10 for each vulnerabil-
ity), for reverse engineering and inspecting their transactions
and balances. We observe two major reasons leading to this.
First, the popular smart contracts (with high balances) were
the main targets of attackers, but these vulnerable contracts
were patched in time according to the results from §7.2.2,
which left a very short window for attackers. Based on the
transaction data, we observed that attackers were always try-
ing to exploit the popular contracts. Although some attacks
were successful (see Table 6), most of them failed. Second,
most of the unpatched smart contracts were inactive with low
balances. As a result, it was hard, if not impossible, for them
to attract attackers, who must have considered the trade-off
between the low proﬁts and the costs of attacks.
8 Threats to Validity
First, our system inherits the limitation of symbolic execution,
i.e., path explosion. Although we have implemented several
optimization strategies, EOSAFE still reports false negative
cases, as discussed in §7.1. However, we believe this is not
a big issue for our system. On the one hand, most of the
smart contracts are not as complicate as other software. A
large portion of smart contracts can be fully analyzed in a
short time. On the other hand, we have proposed speciﬁc
USENIX Association
30th USENIX Security Symposium    1285
optimization methods when searching for the vulnerabilities,
which could eliminate most irrelevant paths. Nevertheless, we
can further take advantage of advanced symbolic execution
techniques [9, 41–45] to alleviate this issue.
Second, we rely on heuristics and semi-automated meth-
ods to verify attacks (see §7.3). This, of course, might not
be scalable and could mean that we only offer a coarse esti-
mate of the attacks. However, a large portion of the attacks
we identiﬁed are conﬁrmed by DApp teams, which suggests
that our approach is quite reliable. Nevertheless, some other
techniques (e.g., dynamic testing) can be applied to help us
automatically identify attacks. In this paper, our main contri-
bution is automatically detecting the security vulnerabilities,
while attack veriﬁcation is not a main focus in this work.
Third, there might exist some new vulnerabilities we did
not cover in this current prototype, as well as the general vul-
nerabilities in other software systems, such as buffer overﬂow.
In this paper, we focus only on the EOSIO-speciﬁc vulnerabil-
ities, the main reason is that we are lacking ground-truth for
other security bugs. Nevertheless, we have tried our best to
minimize the burden for further development efforts. Speciﬁ-
cally, we have adopted a modular design scheme, hence the
Engine and the Emulator can be treated as black boxes and
used directly. Moreover, the pruning strategy in Engine is