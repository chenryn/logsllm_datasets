### 文档优化

---

#### 第12页 共43页

**分支（Branch）**

要将整个目录或单个文件创建为新的分支，可以通过右键点击目标文件或文件夹并选择TortoiseSVN中的“branch/tag”选项来实现。在此过程中，你需要输入新分支的名称以及存放位置。通过这种方式，你也可以查看当前选中项的历史修改记录。

**拷贝（Copy）**

在受控版本库环境下，使用`TortoiseSVN -- check for modifications`命令可以检查工作副本中的变更情况。拷贝操作实际上执行的是SVN copy命令，允许用户将指定文件复制到本地或其他目录内。对于需要标记特定版本的情况，通常建议从最新的仓库版本开始进行。

---

#### 第13页 共43页

当你完成分支创建后，在相应的路径下可以看到新的标签（例如：V1.0）。此时会出现三个选项供选择：
- **Working Copy**: 新建的分支是基于现有工作副本的一个完整复制品。
- **HEAD revision in the repository**: 直接从仓库最新版本创建分支。
- **Specific revision in repository**: 从指定的历史版本建立分支。

一般情况下，我们会选择从最新版本（HEAD revision）创建标签。如果希望工作副本自动切换到新建的分支上，则需使用“转换工作副本至新分支/标记”功能。

---

#### 第14页 共43页

**备份与恢复资源库**

为了确保数据安全，Subversion 提供了多种备份策略，包括完全备份、增量备份和同步版本库。其中，完全备份虽然简单但成本较高，特别是当版本库体积庞大时；而增量备份则更为高效，适合频繁更新的大规模项目。

- **完全备份**：直接复制整个版本库到备份位置。
- **增量备份**：仅备份自上次备份以来的变化部分，使用`svnadmin dump`命令实现。
- **同步版本库**：利用`svnsync`工具保持两个版本库之间的一致性，适用于创建镜像或远程备份场景。

---

#### 第17页 共43页

**钩子自动同步**

若想在每次提交时自动触发另一个项目的同步，可以在源版本库中设置post-commit钩子脚本。例如，将以下内容保存为`post-commit.bat`并放置于`project1`下的`hooks`目录：

```batch
set SVN_HOME="C:\Program Files\Subversion"
%SVN_HOME%\bin\svnsync sync svn://localhost/project2 --non-interactive
```

这样，每当有改动提交到`project1`时，都会自动同步到`project2`。

---

#### 第18页 共43页

**版本关键字说明**

- **HEAD**：代表仓库中当前最新的版本。
- **BASE**：指的是工作副本中最后一次更新后的状态。
- **COMMITTED**：表示最近一次提交前的状态。
- **PREV**：指最后修改之前的那个版本（技术上等于commit-1）。

---

#### 第19页 共43页

**统计信息**

通过右键菜单中的"Show Log"功能，可以访问到关于日志条目的详细统计资料，如作者活动频率、每周提交次数等。这些统计数据有助于了解团队的工作进度及贡献分布。

---

#### 第21页 共43页

**禁用密码缓存**

为了提高安全性，你可以选择禁用Subversion客户端对密码的缓存功能。这可以通过编辑配置文件并注释掉`store-passwords=no`行来实现。此外，在运行任何命令时添加`--no-auth-cache`参数也能达到相同效果。

---

#### 第22页 共43页

**常规设置**

进入TortoiseSVN的Settings界面，你可以调整各种偏好设置，比如语言、忽略模式等。例如，在General选项卡下，你可以设置全局忽略规则以排除某些类型的文件不被导入版本控制系统。

---

#### 第27页 共43页

**上下文菜单设置**

通过ContextMenu设置页面，用户可以根据个人喜好定制鼠标右键菜单显示哪些TortoiseSVN相关的功能项。默认情况下，大部分选项都位于子菜单中，但你可以根据需求将其移至顶层以便更快访问。