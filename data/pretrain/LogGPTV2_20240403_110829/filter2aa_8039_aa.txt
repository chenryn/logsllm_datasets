# HTTP 报文
---
## 基础
HTTP 请求报文由3部分组成（请求行+请求头+请求体）：
下面是一个实际的请求报文 ：
- **①** 是请求方法，GET 和 POST 是最常见的 HTTP 方法，除此以外还包括 DELETE、HEAD、OPTIONS、PUT、TRACE。不过，当前的大多数浏览器只支持 GET 和 POST，Spring 3.0 提供了一个 `HiddenHttpMethodFilter` ，允许你通过“_method”的表单参数指定这些特殊的 HTTP 方法（实际上还是通过 POST 提交表单）。服务端配置了 HiddenHttpMethodFilter 后，Spring 会根据 _method 参数指定的值模拟出相应的 HTTP 方法，这样，就可以使用这些 HTTP 方法对处理方法进行映射了。
- **②** 为请求对应的 URL 地址，它和报文头的 Host 属性组成完整的请求 URL，
- **③** 是协议名称及版本号。
- **④** 是 HTTP 的报文头，报文头包含若干个属性，格式为“属性名:属性值”，服务端据此获取客户端的信息。
- **⑤** 是报文体，它将一个页面表单中的组件值通过 `param1=value1&param2=value2` 的键值对形式编码成一个格式化串，它承载多个请求参数的数据。不但报文体可以传递请求参数，请求 URL 也可以通过类似于“/chapter15/user.html? param1=value1&param2=value2”的方式传递请求参数。
对照上面的请求报文，我们把它进一步分解，你可以看到一幅更详细的结构图：
---
HTTP 的响应报文也由三部分组成（响应行+响应头+响应体）：
以下是一个实际的 HTTP 响应报文：
- **①** 报文协议及版本；
- **②** 状态码及状态描述；
- **③** 响应报文头，也是由多个属性组成；
- **④** 响应报文体，即我们真正要的“干货”。
以下是几个常见的状态码 :
- **200 OK** 你最希望看到的，即处理成功！
- **303 See Other**  我把你 redirect 到其它的页面，目标的 URL 通过响应报文头的 Location 告诉你。
- **304 Not Modified**  告诉客户端，你请求的这个资源至你上次取得后，并没有更改，你直接用你本地的缓存吧，我很忙哦，你能不能少来烦我啊！
- **404 Not Found**  你最不希望看到的，即找不到页面。如你在 google 上找到一个页面，点击这个链接返回 404，表示这个页面已经被网站删除了，google 那边的记录只是美好的回忆。
- **500 Internal Server Error**  看到这个错误，你就应该查查服务端的日志了，肯定抛出了一堆异常，别睡了，起来改 BUG 去吧！
更多关于状态码参考 [HTTP状态码](./HTTP状态码.md)
---
## 请求方法
---
根据 HTTP 标准，HTTP 请求可以使用多种请求方法。
HTTP1.0 定义了三种请求方法： GET, POST 和 HEAD 方法。
HTTP1.1 新增了六种请求方法：OPTIONS、PUT、PATCH、DELETE、TRACE 和 CONNECT 方法。
- `GET` : 请求指定的页面信息，并返回实体主体。
- `HEAD` : 类似于 GET 请求，只不过返回的响应中没有具体的内容，用于获取报头
- `POST` : 向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST 请求可能会导致新的资源的建立和/或已有资源的修改。
- `PUT` : 从客户端向服务器传送的数据取代指定的文档的内容。
- `DELETE` : 请求服务器删除指定的页面。
- `CONNECT` : HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器。
- `OPTIONS` : 允许客户端查看服务器的性能。
- `TRACE` : 回显服务器收到的请求，主要用于测试或诊断。
- `PATCH` : 是对 PUT 方法的补充，用来对已知资源进行局部更新 。
---
## HTTP headers
**Source & Reference**
- [HTTP头部详解](https://blog.csdn.net/YLBF_DEV/article/details/50266447)
- [HTTP 响应头信息](https://www.runoob.com/http/http-header-fields.html)
- [HTTP 请求头中的 X-Forwarded-For](https://imququ.com/post/x-forwarded-for-header-in-http.html)
- [List of HTTP header fields](https://en.wikipedia.org/wiki/List_of_HTTP_header_fields)
---
通常 HTTP 消息包括客户机向服务器的请求消息和服务器向客户机的响应消息。这两种类型的消息由一个起始行，一个或者多个头域，一个只是头域结束的空行和可选的消息体组成。HTTP 的头域包括通用头，请求头，响应头和实体头四个部分。每个头域由一个域名，冒号（:）和域值三部分组成。域名是大小写无关的，域值前可以添加任何数量的空格符，头域可以被扩展为多行，在每行开始处，使用至少一个空格或制表符。
### 通用头域
通用头域包含请求和响应消息都支持的头域，通用头域包含 `Cache-Control`、 `Connection`、`Date`、`Pragma`、`Transfer-Encoding`、`Upgrade`、`Via`。对通用头域的扩展要求通讯双方都支持此扩展，如果存在不支持的通用头域，一般将会作为实体头域处理。下面简单介绍几个在 UPnP 消息中使用的通用头域。
**Cache-Control 头域**
Cache -Control 指定请求和响应遵循的缓存机制。在请求消息或响应消息中设置 Cache-Control 并不会修改另一个消息处理过程中的缓存处理过程。
请求时的缓存指令包括 `no-cache`、`no-store`、`max-age`、 `max-stale`、`min-fresh`、`only-if-cached`
响应消息中的指令包括
- `Public` 指示响应可被任何缓存区缓存；
- `Private` 指示对于单个用户的整个或部分响应消息，不能被共享缓存处理。这允许服务器仅仅描述当用户的部分响应消息，此响应消息对于其他用户的请求无效；
- `no-cache` 指示请求或响应消息不能缓存；
- `no-store` 用于防止重要的信息被无意的发布。在请求消息中发送将使得请求和响应消息都不使用缓存；
- `max-age` 指示客户机可以接收生存期不大于指定时间（以秒为单位）的响应；
- `min-fresh` 指示客户机可以接收响应时间小于当前时间加上指定时间的响应；
- `max-stale` 指示客户机可以接收超出超时期间的响应消息。如果指定 max-stale 消息的值，那么客户机可以接收超出超时期指定值之内的响应消息。
**Date 头域**
date 头域表示消息发送的时间，时间的描述格式由 rfc822 定义。例如，`Date:Mon,31Dec200104:25:57GMT`。Date 描述的时间表示世界标准时，换算成本地时间，需要知道用户所在的时区。
**Pragma 头域**
Pragma 头域用来包含实现特定的指令，最常用的是 `Pragma:no-cache`。在 HTTP/1.1 协议中，它的含义和 `Cache-Control:no-cache` 相同。
**Connection 头域**
Connection 表示连接状态
- 请求
    ```
    close（告诉 WEB 服务器或者代理服务器，在完成本次请求的响应后，断开连接，不要等待本次连接的后续请求了）。
    keepalive（告诉 WEB 服务器或者代理服务器，在完成本次请求的响应后，保持连接，等待本次连接的后续请求）。
    ```
- 响应
    ```
    close（连接已经关闭）。
    Keep-Alive：如果浏览器请求保持连接，则该头部表明希望 WEB 服务器保持连接多长时间（秒）。例如：Keep-Alive：300
    ```
---
### 请求消息(请求头)
请求消息的第一行为下面的格式：Method Request-URI HTTP-Version
- Method 表示对于 Request-URI 完成的方法，这个字段是大小写敏感的，包括 `OPTIONS`、`GET`、`HEAD`、`POST`、`PUT`、`DELETE`、`TRACE`。方法 `GET` 和 `HEAD` 应该被所有的通用 WEB 服务器支持，其他所有方法的实现是可选的，GET 方法取回由 Request-URI 标识的信息，
- HEAD 方法也是取回由 Request-URI 标识的信息，只是可以在响应时，不返回消息体；
- POST 方法可以请求服务器接收包含在请求中的实体信息，可以用于提交表单，向新闻组、BBS、邮件群组和数据库发送消息。
- Request-URI 表示请求的URL。Request-URI 遵循 URI 格式，在此字段为星号（*）时，说明请求并不用于某个特定的资源地址，而是用于服务器本身。
- HTTP- Version 表示支持的 HTTP 版本，例如为 `HTTP/1.1`。
请求头域允许客户端向服务器传递关于请求或者关于客户机的附加信息。请求头域可能包含下列字段 `Accept`、`Accept-Charset`、`Accept-Encoding`、`Accept-Language`、`Authorization`、`From`、`Host`、`If-Modified-Since`、`If-Match`、`If-None-Match`、`If-Range`、`If-Unmodified-Since`、`Max-Forwards`、 `Proxy-Authorization`、`Range`、`Referer`、`User-Agent`。对请求头域的扩展要求通讯双方都支持，如果存在不支持的请求头域,一般将会作为实体头域处理。
典型的请求消息
```
GET http://download.microtool.de:80/somedata.exe
Host: download.microtool.de
Accept:*/*
Pragma: no-cache
Cache-Control: no-cache
Referer: http://download.microtool.de/
User-Agent:Mozilla/4.04[en](Win95;I;Nav)
Range:bytes=554554-
```
上例第一行表示 HTTP 客户端（可能是浏览器、下载程序）通过 GET 方法获得指定 URL 下的文件。
- Host头域指定请求资源的 Intenet 主机和端口号，必须表示请求 url 的原始服务器或网关的位置。HTTP/1.1 请求必须包含主机头域，否则系统会以 400 状态码返回；
- Accept：告诉 WEB 服务器自己接受什么介质类型，`*/*` 表示任何类型，`type/*` 表示该类型下的所有子类型，type/sub-type。
- Accept-Charset： 浏览器申明自己接收的字符集。
- Authorization：当客户端接收到来自WEB服务器的 WWW-Authenticate 响应时，用该头部来回应自己的身份验证信息给 WEB 服务器。
- Range
    ```
    表示头500个字节：bytes=0-499
    表示第二个500字节：bytes=500-999
    表示最后500个字节：bytes=-500
    表示500字节以后的范围：bytes=500-
    第一个和最后一个字节：bytes=0-0,-1
    同时指定几个范围：bytes=500-600,601-999
    ```
    但是服务器可以忽略此请求头，如果无条件 GET 包含 Range 请求头，响应会以状态码 206（PartialContent）返回而不是以 200 （OK）
---
### 响应消息(响应头)
响应信息如内容类型，类型的长度，服务器信息，设置 Cookie
响应消息的第一行为下面的格式：HTTP-Version Status-Code Reason-Phrase
- HTTP -Version 表示支持的 HTTP 版本，例如为 HTTP/1.1。
- Status-Code 是一个三个数字的结果代码。
    ```