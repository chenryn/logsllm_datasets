原文：
在上一篇文章中，我们为读者详细介绍了糊涂的代理人漏洞方面的知识，在本文中，我们将继续为读者介绍实例未初始化漏洞。
**\----[ 4.2 - 实例未初始化漏洞**
* * *
**\------[ 4.2.1 - 背景知识**
* * *
Java对象的初始化过程中，非常关键的一个步骤就是调用相应类型的构造函数。在构造函数中，不仅含有初始化变量所需的代码，同时，也可能含有执行安全检查的代码。因此，为了保证平台的安全性和稳定性，必须在完成对象的初始化以及允许其他代码调用该类型的方法之前强制调用构造函数，这一点非常重要。
构造函数调用的强制执行是由字节码验证器负责的，它会在加载过程中对所有的类进行相应的检查，以确保其合法性。
除此之外，字节码验证器还负责（例如）检查跳转是否落在有效指令上，而不是落在指令的中间，并检查控制流是否以return指令结尾。此外，它还检查指令的操作对象是否为有效类型，这是用来防御类型混淆攻击的。关于这类攻击的介绍，请参考第3.1.1节。
过去，为了检查类型的有效性，JVM需要通过分析数据流来计算固定点（fix
point）。该分析过程可能对同一路径检查多次。由于这种检查方式非常耗时，会拖慢类的加载过程，因此，后来人们开发了一种新型方法，能够在线性时间内完成类型检查，其中，每个路径仅被检查一次。为此，可以为字节码添加称为堆栈映射帧的元信息。简而言之，堆栈映射帧用来描述每个分支目标的可能类型。通常情况下，堆栈映射帧被存储在一种称为堆栈映射表[25]的结构中。
如果安全分析人员能够创建一个实例，但不为其执行`（*）`调用（即不执行对象的构造函数或超类的构造函数）的话，就会出现实例未初始化漏洞。实际上，该漏洞直接违反了虚拟机的相关规范[21]。它对JVM安全性的影响是，借助于实例未初始化漏洞，安全分析人员能够实例化他原本无权访问的对象，进而访问他原本无权访问的属性和方法。这样的话，就可能会导致沙箱逃逸。
**\------[ 4.2.2 - 示例： CVE-2017-3289**
* * *
通过阅读该CVE的描述，会发现“该漏洞的成功攻击可能导致Java SE、Java SE Embedded被完全接管”[22]。
就像CVE-2017-3272那样，这意味着能够利用该漏洞实现Java沙箱的逃逸。
据Redhat的bugzilla称，“在OpenJDK的Hotspot组件中发现了一个不安全的类构造漏洞，它与异常堆栈帧的错误处理方式有关。不受信任的Java应用程序或applet能够利用这个漏洞绕过Java沙箱的限制”[23]。我们可以从中推断出两条有用的信息：（1）该漏洞出现在C/C++代码中（Hotspot是Java
VM的名称），以及（2）该漏洞与非法类构造和异常堆栈帧有关。并且，通过第2条信息，我们可以进一步推断出，该漏洞可能位于检查字节码的合法性的相关C/C++代码中。此外，该页面还提供了该漏洞的OpenJDK补丁的链接。
OpenJDK的更新补丁，即“8167104: Additional class construction
refinements”可以修复该漏洞，该补丁可在线获取，具体见参考文献[24]。该程序对5个C
++文件进行了更新，它们分别是：“classfile/verifier.cpp”，负责检查类文件的结构和合法性的类；“classfile/stackMapTable.{cpp,
hpp}”，处理堆栈映射表的文件；以及“classfile/stackMapFrame.{cpp, hpp}”，描绘堆栈映射帧的文件。
借助于diff命令，我们发现，函数StackMapFrame::has_flag_match_exception()已经被删除，并且更新了一个我们将称为C1的条件，即删除了对has_flag_match_exception()函数的调用。此外，方法match_stackmap()和is_assignable_to()现在只剩下一个参数了，因为“bool
handler”已被删除。当该验证程序正在检查异常处理程序时，唯一的参数，即“handler”将被设为“true”。现在，条件C1已经变成下面的样子：
    ---------------------------------------------------------------------------         ....
         -  bool match_flags = (_flags | target->flags()) == target->flags();
         -  if (match_flags || is_exception_handler &&
                   has_flag_match_exception(target)) {
         +  if ((_flags | target->flags()) == target->flags()) {
              return true;
            }
         ....
    ---------------------------------------------------------------------------    
这个条件在函数is_assignable_to()中，用于检查作为参数传递给该函数的当前堆栈映射帧，是否可赋值给目标堆栈映射帧。在打补丁之前，返回“true”的条件是`match_flags
|| is_exception_handler &&
has_flag_match_exception(target)`。也就是说，要满足当前堆栈映射帧和目标堆栈映射帧的标志相同或者当前指令位于异常处理程序中，并且函数“has_flag_match_exception”返回“true”。注意，只有一种叫做“UNINITIALIZED_THIS”（又名FLAG_THIS_UNINIT）的标志。如果该标志的值为true，则表示“this”引用的对象还没有进行初始化操作，即尚未调用其构造函数。
在打完补丁之后，条件变为“match_flags”。这意味着，在易受攻击的版本中，可能存在一种方法能够构造出这样的字节码，能够使得：“match_flags”为“false”（即“this”在当前帧中具有未初始化的标志，但在目标帧中则没有该标志）、“is_exception_handler”为“true”（当前指令位于异常处理程序中）以及“has_flag_match_exception（target）”返回“true”。然而，这个函数什么情况下会返回“true”呢？
函数has_flag_match_exception()的代码如下所示。
    ---------------------------------------------------------------------------      1: ....
      2: bool StackMapFrame::has_flag_match_exception(
      3:     const StackMapFrame* target) const {
      4:
      5:   assert(max_locals() == target->max_locals() &&
      6:          stack_size() == target->stack_size(),
      7:                "StackMap sizes must match");
      8:
      9:   VerificationType top = VerificationType::top_type();
     10:   VerificationType this_type = verifier()->current_type();
     11:
     12:   if (!flag_this_uninit() || target->flags() != 0) {
     13:     return false;
     14:   }
     15:
     16:   for (int i = 0; i locals_size(); ++i) {
     17:     if (locals()[i] == this_type && target->locals()[i] != top) {
     18:       return false;
     19:     }
     20:   }
     21:
     22:   for (int i = 0; i stack_size(); ++i) {
     23:     if (stack()[i] == this_type && target->stack()[i] != top) {
     24:       return false;
     25:     }
     26:   }
     27:
     28:   return true;
     29: }
     30: ....
    ---------------------------------------------------------------------------    
为了让这个函数返回“true”，必须满足以下所有条件：（1）当前帧和目标帧的最大局部变量个数与堆栈的最大长度必须相同（第5-7行）；（2）当前帧必须将“UNINIT”标志设为“true”（第12-14行）；（3）目标帧中没有使用未初始化的对象（第16-26行）。
下面是满足以上述三个条件的字节码：
    ---------------------------------------------------------------------------      ()
      0: new           // class java/lang/Throwable