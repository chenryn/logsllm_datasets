C. Data Dependency Graph
A data dependency graph (DDG) shows how instructions
correlate with each other with respect to the production and
consumption of data. Efﬁciently generating a sound DDG
for a binary slice has several challenges. First, program
slicing requires a ﬂow-sensitive and context-sensitive data
ﬂow analysis, with a runtime complexity exponential to the
number of all possible paths in a program. Second, analyzing
the data ﬂow of binary programs poses some unique problems.
For instance,
the precision of the DDG suffers from any
imprecision in the CFG from which it is built, and creating a
precise CFG statically is a hard problem for arbitrary binary
code. Additionally, all
information about data structures
and types is discarded during compilation, which makes
performing a sound data ﬂow analysis even harder. Thus,
most data ﬂow analyses are designed to work with high-level
languages, but not with binary code. Finally, the analysis result
should be sound, otherwise one risks removing instructions
that are otherwise required to achieve a proper result.
To handle the issues mentioned above, Firmalice adopts
an existing, worklist-based, iterative approach to data ﬂow
analysis [30]. The approach is an inter-procedural data ﬂow
analysis algorithm that uses def-use chains, in addition to
use-def chains, to optimize the worklist algorithm.
As with the other algorithms in the static analyses phase,
the DDG is generated with a context sensitivity of 2.
D. Backward Slicing
Using the program dependency graph, Firmalice can
compute backward slices. That
is, starting from a given
program point, we can produce every statement on which that
point depends. This step leverages slicing techniques from
existing work in the literature [5]. Slicing is used to improve
the feasibility of the symbolic analysis on large binaries, in
two ways. First, it removes entire functions that are irrelevant
to the analysis. Since symbolic analysis, in the general case,
must explore every path of a program,
this represents a
substantial decrease in analysis complexity. Second, since
our IR translates complex instructions into multiple simple
statements, Firmalice’s slicing allows one to ignore irrelevant
side-effects of these instructions. This is especially relevant
for architectures that
implicitly update conditional ﬂags
(speciﬁcally, ARM, x86, and AMD64), as it frees Firmalice
from the need to evaluate the ﬂag registers when they are not
used (which, on such architectures, is the common case).
VII. SYMBOLIC EXECUTION ENGINE
After an authentication slice is created by the Static
Program Analysis module, Firmalice attempts to identify user
inputs that successfully reach the privileged program point.
Recall
that an authentication slice is a set of instructions
between a proposed entry point and the privileged program
7
point that the attacker tries to reach. To enable our analysis,
we have implemented a Symbolic Execution Engine. Our
approach to symbolic execution draws on concepts proposed
in KLEE [8], FuzzBALL [7], and Mayhem [24], adapted to
our speciﬁc problem domain.
Speciﬁcally,
the
implementation of
this module of
Firmalice follows
ideas presented in Mayhem, adding
support for symbolic summaries of functions (described in
to automatically detect common library
paragraph VII-B),
functions and abstract
their effects on the symbolic state.
This greatly reduces the number of paths that the symbolic
executor must explore, since it prevents such functions from
causing the analysis to branch.
We discuss several details speciﬁc to our symbolic
execution engine in this section.
A. Symbolic State and Constraints
Firmalice’s symbolic analysis works at
the level of
symbolic states. A symbolic state is an abstract representation
of the values contained in memory (e.g., variables), registers,
as well as constraints on these values, for any given point of the
program (i.e., each program point has an independent state).
Constraints are expressions limiting the range of possible
values for a symbolic variable. They may express relations
between symbolic variables and constants (i.e., x = 0, that x can be 0, 1, 2, 3, or 4).
B. Symbolic Summaries
Firmalice adopts the concept of “symbolic summaries”,
a well-known concept in program analysis, which involves
descriptions of the transformation that certain commonly-seen
functions (or, generally, any piece of code) have on a program
state [34]. The intuition behind this concept is that the effects
of certain functions can be more efﬁciently explained through
a manual speciﬁcation of constraints than by analyzing the
underlying binary code. This is because an initial analysis of
a piece of binary code lacks a semantic understanding of what
that code is trying to accomplish. A process that had such an
understanding, however, could analyze the code as a whole and
introduce constraints that took these semantics into account.
In fact, we found that such a process has two advantages:
properly summarizing the code allows us to avoid branching
6Firmalice utilizes Z3 [13] to perform symbolic constraint solving.
8
the analysis state during the execution of such functions, and
the constraints that are generated are often simpler than those
that would be generated from an analysis of the code itself.
To explore this concept in our analysis, we implemented
support for symbolic summaries in Firmalice. A symbolic
summary acts in the same way as a binary instruction:
it consumes an input state and produces a set of output
states. We implemented symbolic summaries for 49 common
functions from the Standard C Library.
While this concept is well-known in the ﬁeld of program
analysis, applying it to automatic binary analysis is not trivial,
as Firmalice needs to know which pieces of code should be
replaced by these summaries. To determine this automatically,
we created a set of test cases for each of the functions that
we summarized. These test cases, comprising an input state
(representing a set of arguments to the function) and a set of
checks of its effect on this state, attempt to determine whether
or not an arbitrary binary function is an implementation of the
function summarized by the symbolic summary in question.
Generally, more than one test case is required to uniquely
identify a library function. For example, several different test
cases are required to distinguish between strcmp() and
strncmp(), since the two functions act in the same way
for certain sets of inputs (lower case strings for example).
Similarly, multiple test cases are required to differentiate
between memcpy() and strncpy(). While this represents
more work when writing test cases, it also allows us to speed
up the testing procedure, because if a function fails a test case
that should be passed by both memcpy() and strncpy(),
we can conclude that it is neither of those functions.
When Firmalice symbolically calls a function for the ﬁrst
time (i.e., analyzing a call instruction), the analysis is paused
and the function-testing phase begins. Firmalice ﬁrst attempts
to run the function with the test case states. If all of the test
cases of a symbolic summary pass, Firmalice replaces the
entry point to the function in question with that symbolic
summary, and continues its analysis. Any subsequent jumps
to that address will instead trigger execution of the symbolic
summary. If no symbolic summary is identiﬁed as the right
summary for a function, the function is analyzed normally. The
test cases should be mutually independent across all symbolic
summaries. That is, for any given function, if all test cases of
symbolic summary A pass, then there must be no summary
B for which all test cases also pass. Such situations arise
in the case of inadequate test cases, and must be remedied
before Firmalice can properly detect symbolic summaries.
While symbolic summaries allow Firmalice to perform
a considerably deeper analysis than would otherwise be
possible, there is a trade-off. Because we do not fully analyze
the summarized code, our approach would miss any backdoors
that were hidden in common library functions. We feel that
this trade-off is acceptable.
C. Lazy Initialization
Binary-blob ﬁrmware contains initialization code that is
responsible for setting various memory locations to initial
values, setting up request handlers, and performing other
housekeeping tasks. However, since Firmalice has no prior
knowledge of such code7 it is not executed before beginning
the analysis,
leading to complications when, for example,
kernel-level
functionality of ﬁrmware attempts to access
certain global data structures. If such data structures are not
initialized, superﬂuous paths based on normally infeasible
kernel conditions are introduced into the analysis.
To mitigate this, Firmalice adopts a lazy approach to
ﬁrmware initialization. When the execution engine encounters
a memory read from uninitialized memory,
identiﬁes
other procedures that contain direct memory writes to that
location, and labels them as initialization procedures. If an
initialization procedure is identiﬁed, the state is duplicated:
one state continues execution without modiﬁcation, while the
other one runs the initialization procedure before resuming
execution. This allows Firmalice to safely execute initialization
code without the risk of breaking the analysis.
it
VIII. AUTHENTICATION BYPASS CHECK
As discussed in Section III, our model of an authentication
bypass builds upon the property of input determination. That
is, if an attacker can analyze the ﬁrmware and produce inputs,
possibly including valid authentication credentials, to reach a
privileged program point, an authentication bypass is said to
exist.
This model is not dependent on the implementation of the
backdoor itself, but rather on the fundamental idea behind
authentication bypass vulnerabilities: the attacker can create
an input that, regardless of the conﬁguration of the device,
will allow them to authenticate (i.e.,
reach a privileged
program point).
to the user
To detect such bypasses, Firmalice leverages the property
of constraint solvability with respect
input
required to achieve authentication. Speciﬁcally, we model the
determinism of the input with the ability to concretize it to
a unique value, as described in Section VIII-C. However, we
make this determination after taking into account the exposure
of data from the device, in the form of output to the user.
Thus, even in the presence of a challenge-response protocol,
Firmalice can detect an authentication bypass vulnerability.
This model can also be expanded to reason about
authentication bypasses with a range of valid backdoor
credentials. However, as we have not observed this in practice,
we did not include such detection in our implementation.
Given an privileged state (i.e., the ﬁnal state of a path
that reaches a privileged program point) from the Symbolic
Execution engine, the Authentication Bypass Check module
identiﬁes the input and output from/to the user and reasons
the exposure of data represented by the output. It
about
then attempts to uniquely concretize the user input (i.e., to
solve the constraints associated to the user input when the
privileged state is reached). If the user input can be uniquely
concretized, then it represents that the input required to reach
the privileged program point can be uniquely determined
by the attacker, and the associated path is labeled as an
authentication bypass. At
this point, Firmalice terminates
its analysis. In cases where the user input depends on data
exposed by the device’s output, a function that can generate
7the execution starts after the input related to the authentication routine
valid inputs for a provided output is produced.
A. Choosing I/O
What should be considered as user input to the ﬁrmware
(and, similarly, output from the ﬁrmware) is not always
complex
obvious. For
interactions with their environment, and receive input
in
unexpected ways. Therefore, Firmalice uses several heuristics
to identify input and output.
devices might
example,
have
If the ﬁrmware is a user-space ﬁrmware, Firmalice checks
for the presence of network connections in the privileged
slice. If a connection is found, it is assumed to represent
the user input. Alternatively, if no connection is found, user
input is assumed to be stdin (ﬁle descriptor 0), and output is
assumed to be stdout (ﬁle descriptor 1).
it
In the case of a binary blob, Firmalice attempts a
concretization on symbolic values coming from every
interrupt. If one of these inputs concretizes mainly to ASCII
text,
is considered to be the user input. Similarly, any
symbolic value passed into an interrupt that concretize mainly
into ASCII text, is considered to be the output of the ﬁrmware.
Alternatively, to avoid these heuristics, Firmalice can accept a
speciﬁcation of the Application Binary Interface (i.e., which
interrupts accept output and which provide input) of the
ﬁrmware and use that to choose between input and output.
B. Data Exposure
The core intuition of our approach is that data seen by
the user, via an output routine, is exposed to the attacker.
While seemingly obvious, this has important implications for
authentication bypass detection. Speciﬁcally, our intuition is
that this exposure does not just reveal information about the
output data: information is also revealed about any data that
depends on or is related to the output. For example, if a hash
of a user-speciﬁed, secret password is revealed to the attacker
prior to authentication, it reveals some amount of information
about the password itself (in the worst case scenario, such a
hash could then be brute-forced and the password would be
completely revealed). In essence, we take into account the fact
that the attackers can deduce information about authentication
credentials by observing program outputs.
that
We implement this in Firmalice by leveraging its constraint
solver and output routine detection. Any data, D,
is
passed into an output routine is identiﬁed as having been
exposed. To model this exposure, we use the constraint solver
to retrieve a single concrete solution, C, for D, and add
the constraint D == C to the constraint set. Adding this
constraint has an effect on the concrete solutions associated
with other symbolic variables (for example, if a symbolic
variable E previously existed with a constraint E == D,
then the constraint D == C also implies E == C). This
represents any loss of secrecy that these variables experience
from the revelation of D to the attacker.
To avoid false positives from after-the-fact credential reve-
lation on the part of the ﬁrmware, Firmalice only applies this
policy to data that is output before any user input is received.
9
C. Constraint Solving
For each privileged state, Firmalice attempts to concretize
the user input to determine the possible values that a user
can input
to successfully reach the privileged program
point. A properly-authenticated path contains inputs that
concretize to a large set of values (because the underlying
passwords that they are compared against are unknown, and
thus, unconstrained). Conversely,
the existence of a path
for which the input concretizes into a limited set of values
(for simplicity, and from investigating existing examples of
backdoors, we set this threshold to 1) signiﬁes that an attacker
can determine, using a combination of information within the
ﬁrmware image and information that is revealed to them via
device output, an input that allows them to authenticate.
Since Firmalice limits its analysis to the authentication
slice itself, irrelevant data is not included in the produced
user input. This makes Firmalice resilient to cases that would
be arbitrarily non-deterministic, such as when some data
from the user is ignored or not used (and, thus, concretizes to
no speciﬁc value). While this means that Firmalice’s output
might not be directly re-playable to achieve authentication
bypass, this functionality is outside of the scope of our design.
IX. EVALUATION
We evaluated Firmalice by vetting three devices for
authentication bypass vulnerabilities, two of which had actual
backdoors. These devices,
the Schneider ION 8600 smart
meter,
the 3S Vision N5072 CCTV camera, and the Dell
1130n Laser Mono Printer, represent a wide range of devices
of disparate architectures. ARM (both little-endian and big-
endian) and PPC are both represented, as are both binary-blob
and user-space program ﬁrmware styles. Additionally,
the
devices have widely different authentication processes.
that Firmalice’s analysis
We chose these devices because the authentication
vulnerabilities that
they contain were already discovered
manually, and, since these vulnerabilities have already been
released, we are not endangering the users by discussing them
(and providing examples). We chose three devices because,
despite the fact
is automated,
a security policy needs to be provided for each device.
This represents some manual work, and a truly large-scale
study was infeasible. Additionally, collecting and unpacking
ﬁrmware samples is extremely complicated to automate.
Firmware is shipped in many different, non-standard formats,
and the process to download ﬁrmware images is frequently
complicated, and varies from vendor to vendor. While this is
an addressable problem, as shown by Costin et al. [10], we
consider it outside of the scope of our work. However, we
feel that these samples represent Firmalice’s applicability to
different devices of different architectures.
In this section, we will describe each ﬁrmware,
then