```
$ docker-compose down
```
这将移除运行`docker-compose up`时创建的容器和网络。如果要删除所有内容，可以通过运行以下命令来完成:
```
$ docker-compose down --rmi all --volumes
```
当您运行`docker-compose up`命令时，这将删除所有容器、网络、卷和映像(包括拉取的和构建的)；这包括可能在 Docker Compose 应用之外使用的映像。但是，如果映像正在使用中，将会出现错误，并且不会被删除:
![](img/08087e2a-53d9-4ff6-829c-6133c8470532.png)
从前面的输出中可以看到，有一个容器使用了`redis`映像，即莫比计数器应用，因此它没有被移除。但是，示例投票应用使用的所有其他映像都被删除，包括作为初始`docker-compose up`的一部分构建的映像和从 Docker Hub 下载的映像。
# Docker 应用
在开始本节之前，我应该发出以下警告:
*我们将要讨论的特征在很大程度上是一个实验性的特征。它正处于非常早期的开发阶段，不应该被认为仅仅是一个即将到来的特性的预览。*
正因为如此，我只介绍 macOS 版本的安装。然而，在我们安装它之前，让我们讨论一下 Docker 应用的确切含义。
虽然 Docker Compose 文件在与他人共享您的环境时非常有用，但您可能已经注意到，到目前为止，我们在本章中缺少了一个非常关键的元素，那就是以类似于分发 Docker 映像的方式实际分发 Docker Compose 文件的能力。
Docker 已经承认了这一点，目前正在开发一个名为 Docker App 的新功能，希望能填补这一空白。
**Docker App** 是一个独立的二进制文件，可以帮助你创建一个可以通过 Docker Hub 或 Docker 企业注册中心共享的应用包。
I would recommend checking the GitHub projects **R****eleases** page (you can find the link in the *Further reading* section) to make sure you are a using the latest version. If the version is later than 0.4.1, you will need to replace the version number in the following command.
要在 macOS 上安装 Docker App，您可以运行以下命令，首先设置要下载的版本:
```
$ VERSION=v0.4.1
```
现在您有了正确的版本，您可以下载它，并使用以下命令将其安装到位:
```
$ curl -SL https://github.com/docker/app/releases/download/$VERSION/docker-app-darwin.tar.gz | tar xJ -C /usr/local/bin/
$ mv /usr/local/bin/docker-app-darwin /usr/local/bin/docker-app
$ chmod +x /usr/local/bin/docker-app
```
一旦就位，您应该能够运行以下命令，在屏幕上打印关于二进制文件的一些基本信息:
```
$ docker-app version
```
对于那些没有跟随的人，可以在这里看到前面命令的完整输出:
![](img/9c5da96b-a744-4c5f-9cb5-3e853db7aa53.png)
我们将使用的`docker-compose.yml`文件有一个微小的变化。版本需要更新到`3.6`而不仅仅是`3`。不这样做将导致以下错误:
```
Error: unsupported Compose file version: 3
```
我们需要运行的命令也产生了前面的错误，如下所示:
```
$ docker-app init --single-file mobycounter
```
该命令获取我们的`docker-compose.yml`文件，并将其嵌入到`.dockerapp`文件中。最初，文件中会有相当多的注释，详细说明在进入下一步之前需要进行的更改。我在仓库中的`chapter5/mobycounter-app`文件夹中留下了一个未更改的文件版本，名为`mobycounter.dockerapp.original`。
`mobycounter.dockerapp`文件的编辑版本可以在这里找到:
```
version: latest
name: mobycounter
description: An example Docker App file which packages up the Moby Counter application
namespace: masteringdockerthirdedition
maintainers:
 - name: Russ McKendrick
 email: PI:EMAIL
---
version: "3.6"
services:
 redis:
 image: redis:alpine
 volumes:
 - redis_data:/data
 restart: always
 mobycounter:
 depends_on:
 - redis
 image: russmckendrick/moby-counter
 ports:
 - "${port}:80"
 restart: always
volumes:
 redis_data:
---
{ "port":"8080" }
```
如你所见，它分为三个部分；第一个包含关于应用的元数据，如下所示:
*   `Version`:这是将在 Docker Hub 上发布的应用的版本
*   `Name`:出现在 Docker Hub 上的应用的名称
*   `Description`:应用的简短描述
*   `Namespace`:这通常是您的 Docker Hub 用户名或您有权访问的组织
*   `Maintainers`:应用的维护者列表
第二部分包含我们的 Docker 编写文件。您可能会注意到一些选项已经被变量所取代。在我们的例子中，我已经将端口`8080`替换为`${port}`。`port`变量的默认值在最后一节中定义。
一旦`.dockerapp`文件完成，您可以运行以下命令将 Docker 应用保存为映像:
```
$ docker-app save
```
通过运行以下命令，您可以仅查看主机上活动的 Docker 应用:
```
$ docker-app ls
```
由于 Docker 应用大部分只是一堆包装在标准 Docker 映像中的元数据，您也可以通过运行以下内容来查看它:
```
$ docker image ls
```
如果您没有跟随这一部分，您可以在这里看到终端输出的结果:
![](img/b63c6b9b-a8dd-40fa-9651-068f329248e4.png)
运行以下命令给出了 Docker 应用的概述，就像您可以使用`docker image inspect`来了解映像是如何构建的一样:
```
$ docker-app inspect masteringdockerthirdedition/mobycounter.dockerapp:latest
```
从下面的终端输出可以看出，使用`docker-app inspect`而不是`docker image inspect`运行命令会给出更友好的输出:
![](img/81756d0f-6074-4664-8738-faf34d524d47.png)
现在我们已经完成了应用，我们需要将其推送到 Docker Hub。为此，只需运行以下命令:
```
$ docker-app push
```
![](img/eced72f8-ac1c-4291-a9a1-ff80917c217c.png)
这意味着我们的应用现在发布在 Docker Hub 上:
![](img/449dc815-8dcf-408d-a7b7-fad918ab0dd0.png)
那么如何获得 Docker 应用呢？首先，我们需要移除局部映像。为此，请运行以下命令:
```
$ docker image rm masteringdockerthirdedition/mobycounter.dockerapp:latest
```
一旦离开，移动到不同的目录:
```
$ cd ~/
```
现在，让我们下载 Docker 应用，更改端口，并启动它:
```
$ docker-app render masteringdockerthirdedition/mobycounter:latest --set port="9090" | docker-compose -f - up
```
同样，对于那些没有跟随的人，可以在这里找到前面命令的终端输出:
![](img/5d14eae8-47a2-4f33-92d7-e7ad8427c401.png)
如您所见，甚至无需手动下载 Docker 应用映像，我们就可以启动并运行我们的应用。前往`http://localhost:9090/`应该会出现邀请你点击添加 logos 的画面。
按照一个普通的前置 Docker 撰写应用，按下 *Ctrl* + *C* 返回你的终端。
您可以运行以下命令来交互和终止您的应用:
```
$ docker-app render masteringdockerthirdedition/mobycounter:latest --set port="9090" | docker-compose -f - ps $ docker-app render masteringdockerthirdedition/mobycounter:latest --set port="9090" | docker-compose -f - down --rmi all --volumes
```
Docker 应用中有更多的功能。然而，我们还没有准备好深入了解更多细节。我们将在 [第 8 章](08.html) *、Docker* *Swarm、*和[第 9 章](09.html) *、Docker 和 Kubernetes* 中返回 Docker App。
正如本节顶部提到的，该特性处于早期开发阶段，我们到目前为止讨论的命令和功能可能会在未来发生变化。但是，即使在这个早期阶段，我希望你能看到 Docker App 的优势，以及它是如何建立在 Docker Compose 奠定的坚实基础上的。
# 摘要
我希望你喜欢 Docker Compose 的这一章，我希望和我一样，你能看到它已经从一个非常有用的第三方工具发展成为 Docker 核心体验中极其重要的一部分。
Docker Compose 介绍了如何运行和管理容器的一些关键概念。我们将在[第 8 章](https://cdp.packtpub.com/mastering_docker___thirdedition/wp-admin/post.php?post=28&action=edit#post_31)*【Docker】**Swarm、*和[第 9 章](https://cdp.packtpub.com/mastering_docker___thirdedition/wp-admin/post.php?post=28&action=edit#post_32)*【Docker 和 Kubernetes】*中进一步阐述这些概念。
在下一章中，我们将远离基于 Linux 的容器，对 Windows 容器进行短暂的参观。
# 问题
1.  Docker 撰写文件使用哪种开源格式？
2.  在我们最初的莫比计数器 Docker Compose 文件中，哪一个标志的工作原理与其 Docker CLI 对应文件完全相同？
3.  对还是错:您只能在 Docker 撰写文件中使用 Docker Hub 中的映像？
4.  默认情况下，Docker Compose 如何决定要使用的命名空间？
5.  您在 docker-composite 中添加了哪个标志来启动后台的容器？
6.  对 Docker Compose 文件运行语法检查的最佳方式是什么？
7.  解释 Docker App 如何工作的基本原理。
# 进一步阅读
有关果园实验室的详细信息，请参见以下内容:
*   果园实验室网站:[https://www.orchardup.com/](https://www.orchardup.com/)
*   果园实验室加入 Docker:[https://blog . Docker . com/2014/07/欢迎果园无花果团队](https://blog.docker.com/2014/07/welcoming-the-orchard-and-fig-team)
有关 Docker 应用项目的更多信息，请参见以下内容:
*   GitHub 存储库:[http://github . com/docker/app/](http://github.com/docker/app/)
*   发行版页面--[https://github . com/dock/app/releases](https://github.com/docker/app/releases)
最后，这里还有一些我们已经讨论过的其他主题的链接:
*   YAML 项目主页:[http://www.yaml.org/](http://www.yaml.org/)
*   Docker 示例存储库:https://github . com/dock samples/