simple, insecure access(2)/open(2) sequence. In partic-
ular, the runtime will grow linearly in k. How much
improvement in security do we get for this cost in run-
time?
Theorem 2 The attacker must win at least 2k + 1 races
against the setuid program to break the security of our
solution, where k is the strengthening parameter.
Proof: Returning to the notation from the previous
proof, our proposed solution is a string σ consisting of
ao repeated k + 1 times (once for the normal insecure
solution, followed by k rounds of strengthening). Every
call a to access(2) must be with a good ﬁle, or else ac-
cess(2) will deny permission. Similarly, every call o to
open(2) must be to the same bad ﬁle, or else the veriﬁca-
if (access("targetfile",R_OK)!=0) {
/* Return an error. */
...
}
fd = open("targetfile",O_RDONLY);
if (fd 0, we were
never able to observe a successful attack with k = 1.
Uniprocessor Baseline Results Summary
Machine
Successes
k
1
Linux
0
FreeBSD 0
14
1,316
SunOS
0
Attempts
1,500,000
1,000,000
1,000,000
5.2 Baseline Multiprocessor Results
The scheduling quantum argument does not apply, of
course, to multiprocessors, so the access(2)/open(2) race
should be as easy to win as ever on a multiprocessor.
To test this hypothesis, we experimented with our dual-
processor Solaris machine.
Against the classic k = 0 access(2)/open(2) race, we ob-
served 117573 successful attacks out of one million at-
tempts. Clearly, the access(2)/open(2) race is still a ma-
jor threat for multiprocessors. With the widespread in-
troduction of multi-/hyper-threaded CPUs, this risk may
exist even on “uniprocessor” machines.
Even with the >10% success rate with k = 0, we did
not feel we were able to tune the attacker for k = 1
accurately. Intuitively, the difﬁculty is that we derive in-
formation for adjusting the DELAY2 and DELAY3 con-
stants in the attacker (Figure 2) only in the cases when
the k = 0 attack would have succeeded, so little data
is available for tuning. This data is swamped by other
interleavings that produce indistinguishable behavior by
the victim program. Out of hundreds of thousands of at-
tempts with presumably imperfect delay tunings, there
were no successful attacks with k = 1.
Multiprocessor Baseline Results Summary
Successes
Machine
Solaris
117,573
Attempts
1,000,000
k
0
5.3 Measuring Strengthening
So far, we have seen that without strengthening, the ac-
cess(2)/open(2) race is very hard to win on a modern
uniprocessor, but easy to win on a multiprocessor. How-
ever, in either case, with even one round of strengthen-
ing, the attack success rate (observed to be 0%) is too
low for us to make meaningful statements. To measure
the effect of the strengthening, therefore, we need a more
sensitive experiment, in which races are easier to win.
Returning to our Linux and FreeBSD uniprocessors, we
inserted calls to nanosleep(2), specifying a delay of 1ns,
into the setuid program. These calls have the effect of
yielding the CPU at that point in the program, making
the races easily winnable.
As a sanity check, we ﬁrst inserted a single nanosleep(2)
call after each access(2) and open(2) call in the setuid
program. We then tuned the attacker with nanosleep(2)
calls as well, and observed that we could attain near
100% success rates even for moderately large values of
k. This corresponds to the case where an attacker is able
to synchronize perfectly to the victim, making the prob-
ability of winning races p ≈ 1.
Next, we randomized the delays, as described in Sec-
tion 4, by changing the delay code to the following:
nanosleep(&onenano,NULL);
if (random() & 01)
nanosleep(&onenano,NULL);
Note that we are using a less randomized delay than rec-
ommended in Section 4: we always have at least one
nanosleep, to ensure that every race is winnable on our
uniprocessors.
The table below summarizes the results for these exper-
iments, and Figure 3 plots the data versus the theoretical
model.
Strengthening with Randomized Nanosleeps
k Attempts
Successes
Machine
0
100,000
Linux
99,992
100,000
1
43,479
Linux
100,000
2
16,479
Linux
100,000
3
5,931
Linux
4
100,000
Linux
1,773
100,000
Linux
550
5
99,962
100,000
FreeBSD 0
43,495
100,000
FreeBSD 1
FreeBSD 2
100,000
16,766
5,598
100,000
FreeBSD 3
1,786
100,000