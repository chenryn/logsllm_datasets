games/casual
games/casual
games/casual
games/casual
games/casual
news
(cid:31)
(cid:31)
(cid:31)
(cid:31)
(cid:31)
(cid:31)
(cid:31)
(cid:31)
8
(cid:31)
1
(cid:31)
(cid:31)
(cid:31)
(cid:31)
(cid:31)
(cid:31)
(cid:31)
(cid:31)
(cid:31)
(cid:31)
(cid:31)
(cid:31)
(cid:31)
13
(cid:31)
(cid:31)
(cid:31)
(cid:31)
4
0
H-BD
T-BD
number dev. ID location number dev. ID location
(cid:31)
(cid:31)
(cid:31)
(cid:31)
4
(cid:31)
(cid:31)
(cid:31)
(cid:31)
4
Table 3: Warnings by the H-BD and T-BD BAYESDROID conﬁgurations on 15/54 top-popular mobile apps
source : private value
source : private value
GeoCoder.getFromLocation(...) :
...,
..., Bearing:
Alt :
..., Long:
...,
Settings $Secure.getString (...)
: cdf15124ea4c7ad5
[ Lat:
...,
IL ]
sink : arguments
WebView.loadUrl(...) : http ://linux .appwiz.com/
proﬁle /72/72 exitad.html?
p1=RnVsbCtBbmRyb2lkK29uK0VtdWxhdG9y&
p2=Y2RmMTUxMjRlYTRjN2FkNQ%3d%3d&
... LOCATION=IL& ...
MOBILE COUNTRY CODE=&
NETWORK=WIFI
Figure 7: Suppressed warning on ios7lockscreen
mentation required for tag propagation, which can cause
instabilities, and (ii) inability to track tags through native
code, as discussed below.
The T-BD variant introduces signiﬁcantly more insta-
bility than the H-BD variant, causing illegal application
behaviors in 21 cases compared to only 12 under H-BD.
We have investigated this large gap between the H-BD
and T-BD conﬁgurations, including by decompiling the
subject apps. Our analysis links the vast majority of ille-
gal behaviors to limitations that TaintDroid casts on load-
ing of third-party libraries. For this reason, certain func-
tionality is not executed, also leading to exceptional app
states, which both inhibit certain data leaks.6
A secondary reason why H-BD is able to detect more
leakages, e.g. in the lockscreen app, is that this bench-
a
technical
For
by William Enck,
6
ment
https://groups.google.com/forum/#!topic/android-security-
discuss/U1fteEX26bk.
explanation,
see
the
TaintDroid moderator,
forum com-
at
sink : arguments
FileOutputStream.write (...)
:
cdf15124ea4c
Figure 8: Suppressed warning on fruitninjafree
mark makes use of the mobileCore module,7 which is a
highly optimized and obfuscated library. We suspect that
data-ﬂow tracking breaks within this library, though we
could not fully conﬁrm this.
At the same time, the loss in accuracy due to heuris-
tic identiﬁcation of relevant values is negligible, as
suggested by the discussion in Section 4.2. H-BD
triggers only one false alarm, on ios7lockscreen, which
is due to overlap between irrelevant values:
extra
information on the Location object returned by a call
to
LocationManager.getLastKnownLocation(...)
and
a
ContextWrapper.startService(...) request. Finally, as
expected, H-BD does not incur false negatives.
unrelated
metadata
passed
into
6 Related Work
As most of the research on privacy monitoring builds on
the tainting approach, we survey related research mainly
in this space. We also mention several speciﬁc studies in
other areas.
7 https://www.mobilecore.com/sdk/
186  23rd USENIX Security Symposium 
USENIX Association
12
Realtime Techniques The state-of-the-art system for
realtime privacy monitoring is TaintDroid [4]. Taint-
Droid features tolerable runtime overhead of about 10%,
and can track taint ﬂow not only through variables and
methods but also through ﬁles and messages passed be-
tween apps. TaintDroid has been used, extended and cus-
tomized by several follow-up research projects. Jung et
al. [10] enhance TaintDroid to track additional sources
(including contacts, camera, microphone, etc). They
used the enhanced version in a ﬁeld study, which re-
vealed 129 of the 223 apps they studied as vulnerable.
30 out of 257 alarms were judged as false positives.
The Kynoid system [20] extends TaintDroid with user-
deﬁned security policies, which include e.g.
temporal
constraints on data processing as well as restrictions on
destinations to which data is released.
The main difference between BAYESDROID and the
approaches above, which all apply information-ﬂow
tracking, is that BAYESDROID exercises “fuzzy” reason-
ing, in the form of statistical classiﬁcation, rather than
enforcing a clear-cut criterion. As part of this, BAYES-
DROID factors into the privacy judgment the data val-
ues ﬂowing into the sink statement, which provides ad-
ditional evidence beyond data ﬂow.
Quantitative Approaches Different approaches have
been proposed for quantitative information-ﬂow analy-
sis, all uniﬁed by the observation that data leakage is a
quantitative rather than boolean judgment. McCamant
and Ernst [13] present an ofﬂine dynamic analysis that
measures the amount of secret information that can be
inferred from a program’s outputs, where the text of the
program is considered public. Their approach relies on
taint analysis at the bit level. Newsome et al. [14] de-
velop complementary techniques to bound a program’s
channel capacity using decision procedures (SAT and
#SAT solvers). They apply these techniques to the prob-
lem of false positives in dynamic taint analysis. Backes
et al. [1] measure leakage in terms of indistinguishabil-
ity, or equivalence, between outputs due to different se-
cret artifacts. Their characterization of equivalence re-
lations builds on the information-theoretic notion of en-
tropy. Budi et al. [2] propose kb-anonymity, a model in-
spired by k-anonymity that replaces certain information
in the original data for privacy preservation, but beyond
that also ensures that the replaced data does not lead to
divergent program behaviors.
While these proposals have all been shown useful,
none of these approaches has been shown to be efﬁcient
enough to meet realtime constraints. The algorithmic
complexity of computing the information-theoretic mea-
sures introduced by these works seriously limits their ap-
plicability in a realtime setting. Our approach, instead,
enables a quantitative/probabilistic mode of reasoning
that is simultaneously lightweight, and therefore accept-
able for online monitoring, by focusing on relevant fea-
tures that are efﬁciently computable.
Techniques for Protecting Web Applications There
exist numerous static and dynamic approaches for pre-
venting attacks on web applications, e.g., [23, 22, 7].
Most relevant to our work are Sekar’s taint-inference
technique for deducing taint propagation by comparing
inputs and outputs of a protected server-side applica-
tion [21] and a similar browser-resident technique devel-
oped in a subsequent study [16]. While BAYESDROID
shares ideas with these approaches, it is explicitly de-
signed for mobile devices and applications. Curtsinger et
al. [3] apply a Bayesian classiﬁer to identify JavaScript
syntax elements that are highly predictive of malware.
The proposed system, ZOZZLE, analyzes the applica-
tion’s code statically, while BAYESDROID operates dy-
namically and focuses on data values.
7 Conclusion and Future Work
In this paper, we articulated the problem of privacy en-
forcement in mobile systems as a classiﬁcation problem.
We explored an alternative to the traditional approach of
information-ﬂow tracking, based on statistical reasoning,
which addresses more effectively the inherent fuzziness
in leakage judgements. We have instantiated our ap-
proach as the BAYESDROID system. Our experimental
data establishes the high accuracy of BAYESDROID as
well as its applicability to real-world mobile apps.
Moving forward, we have two main objectives. The
ﬁrst is to extend BAYESDROID with additional feature
types. Speciﬁcally, we would like to account for (i) sink
properties, such as ﬁle access modes (private vs pub-
lic), the target URL of HTTP communication (same do-
main or third party), etc; as well as (ii) the history of
privacy-relevant API invocations up to the release point
(checking e.g. if/which declassiﬁcation operations were
invoked). Our second objective is to optimize our ﬂow-
based method for detecting relevant values (see Sec-
tion 3.1) by applying (ofﬂine) static taint analysis to the
subject program, e.g. using the FlowDroid tool [6].
References
[1] M. Backes, B. Kopf, and A. Rybalchenko. Auto-
matic discovery and quantiﬁcation of information
leaks. In S&P, pages 141–153, 2009.
[2] A. Budi, D. Lo, L. Jiang, and Lucia. kb-anonymity:
a model for anonymized behaviour-preserving test
and debugging data.
In PLDI, pages 447–457,
2011.
USENIX Association  
23rd USENIX Security Symposium  187
13
[3] Charlie Curtsinger, Benjamin Livshits, Ben-
jamin G. Zorn, and Christian Seifert. Zozzle: Fast
and precise in-browser javascript malware detec-
tion. In USENIX Security, pages 33–48, 2011.
[15] J. Newsome and D. X. Song. Dynamic taint analy-
sis for automatic detection, analysis, and signature
generation of exploits on commodity software. In
NDSS, 2005.
[4] W. Enck, P. Gilbert, B. Chun, L. P. Cox, J. Jung,
P. McDaniel, and A. N. Sheth. Taintdroid: an
information-ﬂow tracking system for realtime pri-
vacy monitoring on smartphones. In OSDI, pages
1–6, 2010.
[5] W. Enck, D. Octeau, P. McDaniel, and S. Chaud-
In
huri. A study of android application security.
USENIX Security, pages 21–21, 2011.
[6] C. Fritz, S. Arzt, S. Rasthofer, E. Bodden, A. Bar-
tel, J. Klein, Y. Traon, D. Octeau, and P. Mc-
Daniel. Flowdroid: Precise context, ﬂow, ﬁeld,
object-sensitive and lifecycle-aware taint analysis
for android apps, 2014.
[7] S. Guarnieri, M. Pistoia, O. Tripp, J. Dolby, S. Teil-
het, and R. Berg. Saving the world wide web from
vulnerable javascript.
In ISSTA, pages 177–187,
2011.
[8] S. Holavanalli, D. Manuel, V. Nanjundaswamy,
B. Rosenberg, F. Shen, S. Y. Ko, and L. Ziarek.
Flow permissions for android. In ASE, pages 652–
657, 2013.
[9] P. Hornyack, S. Han, J. Jung, S. E. Schechter, and
D. Wetherall. These aren’t the droids you’re look-
ing for: retroﬁtting android to protect data from im-
perious applications. In CCS, pages 639–652, 2011.
[10] J. Jung, S. Han, and D. Wetherall. Short paper: en-
hancing mobile application permissions with run-
time feedback and constraints. In SPSM, pages 45–
50, 2012.
[11] B. Livshits and J. Jung. Automatic mediation of
privacy-sensitive resource access in smartphone ap-
plications.
In USENIX Security, pages 113–130,
2013.
[12] G. Lowe. Quantifying information ﬂow. In CSFW,
pages 18–31, 2002.
[13] S. McCamant and M. D. Ernst. Quantitative infor-
In PLDI,
mation ﬂow as network ﬂow capacity.
pages 193–205, 2008.
[14] J. Newsome, S. McCamant, and D. Song. Measur-
ing channel capacity to distinguish undue inﬂuence.
In PLAS, pages 73–85, 2009.
[16] Riccardo Pelizzi and R. Sekar. Protection, usability
and improvements in reﬂected xss ﬁlters. In ASI-
ACCS, pages 5–5, 2012.
[17] J. Piskorski and M. Sydow. String distance metrics
for reference matching and search query correction.
In BIS, pages 353–365, 2007.
[18] V. Rastogi, Y. Chen, and W. Enck. Appsplay-
ground: automatic security analysis of smartphone
applications. In CODAPSY, pages 209–220, 2013.
[19] G. Sarwar, O. Mehani, R. Boreli, and M. A. Ka-
far. On the effectiveness of dynamic taint analysis
for protecting against private information leaks on
android-based devices.
In SECRYPT, pages 461–
468, 2013.
[20] D. Schreckling,
J. K¨ostler,
J. Posegga,
and
M. Schaff. Kynoid:
real-time enforcement of
ﬁne-grained, user-deﬁned, and data-centric security
policies for android.
In WISTP, pages 208–223,
2012.
[21] R. Sekar. An efﬁcient black-box technique for de-
feating web application attacks. In NDSS, 2009.
[22] O. Tripp, M. Pistoia, P. Cousot, R. Cousot, and
S. Guarnieri. Andromeda: Accurate and scalable
security analysis of web applications.
In FASE,
pages 210–225, 2013.
[23] O. Tripp, M. Pistoia, S. J. Fink, M. Sridharan, and
O. Weisman. Taj: effective taint analysis of web
applications. In PLDI, pages 87–97, 2009.
[24] R. A. Wagner and M. J. Fischer. The string-to-
string correction problem. J. ACM, 21(1):168–173,
1974.
[25] Bernard L Welch. The generalization of student’s
problem when several different population vari-
ances are involved. Biometrika, 34(1–2):28–35,
1947.
[26] D. Wetherall, D. Choffnes, B. Greenstein, S. Han,
P. Hornyack, J. Jung, S. Schechter, and X. Wang.
Privacy revelations for web and mobile apps.
In
HotOS, pages 21–21, 2011.
[27] Z. Yang, M. Yang, Y. Zhang, G. Gu, P. Ning, and
X. S. Wang. Appintent: analyzing sensitive data
transmission in android for privacy leakage detec-
tion. In CCS, pages 1043–1054, 2013.
188  23rd USENIX Security Symposium 
USENIX Association
14
Benchmark
Algorithm
TPs
FPs
FNs
ActivityCommunication1
ActivityLifecycle1
ActivityLifecycle2
ActivityLifecycle4
Library2
Obfuscation1
PrivateDataLeak3
AnonymousClass1
ArrayAccess1
ArrayAccess2
HashMapAccess1
Button1
Button3
Ordering1
RegisterGlobal1
DirectLeak1
FieldSensitivity2
FieldSensitivity3
FieldSensitivity4
ImplicitFlow1
InheritedObjects1
ListAccess1
LocationLeak1
LocationLeak2
Loop1
Loop2
ApplicationLifecycle1
ApplicationLifecycle3
MethodOverride1
ObjectSensitivity1
ObjectSensitivity2
Reﬂection1
Reﬂection2
Reﬂection3
Reﬂection4
SourceCodeSpeciﬁc1
StaticInitialization1
Total
BAYESDROID
TaintDroid
BAYESDROID
TaintDroid
BAYESDROID
TaintDroid
BAYESDROID
TaintDroid
BAYESDROID
TaintDroid
BAYESDROID
TaintDroid
BAYESDROID
TaintDroid
BAYESDROID
TaintDroid
BAYESDROID
TaintDroid
BAYESDROID
TaintDroid
BAYESDROID
TaintDroid
BAYESDROID