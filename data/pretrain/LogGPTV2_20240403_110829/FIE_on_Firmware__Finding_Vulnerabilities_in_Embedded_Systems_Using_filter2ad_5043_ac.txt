on our large corpus of programs. We will publicly re-
lease an open-source version of FIE, associated scripts,
and the EC2 virtual machine image.
468  22nd USENIX Security Symposium 
USENIX Association
6
4 Details of FIE’s Architecture
4.1 Main Execution Loop
For the purposes of describing FIE, we deﬁne an exe-
cution state to be an immutable snapshot of the symbolic
execution at a given point in time. That means it includes
all values used to emulate LLVM bitcode, including a
program counter, stack frames, and global memory (used
for global variables, the heap, etc.). Any memory loca-
tion may have either a concrete value or a symbolic one,
the latter represented by a set of constraints.
In our abstraction, the main execution loop of FIE op-
erates by generating successor states from the current im-
mutable state. This allows us a history of past states,
which, looking ahead, will be useful for describing our
state pruning feature. This treatment differs from [10],
which instead described states as mutable objects trans-
formed by the symbolic execution.
Figure 4 gives high-level pseudocode for the main ex-
ecution loop. A set AS contains the active states to be
run; at the start it holds just one initial state. The loop
chooses a state from AS according to a state selection
heuristic R. For this we use the KLEE heuristic that seeks
to maximize coverage. Once a state has been selected,
new successor states may be immediately spawned ac-
cording to SpawnInterrupts. This function also outputs
a boolean shouldExec that can be set to false to force an
interrupt to ﬁre, otherwise the instruction at the current
state’s program counter is symbolically executed.
Should shouldExec be true, FIE symbolically executes
the next instruction of the current state. Here FIE in-
terposes on memory loads and stores that target mem-
ory addresses corresponding to special memory (e.g., pe-
ripherals). The addresses of special memory are pro-
vided by the memory spec as described in the next
section. Other operations are handled by Eval, which
works like KLEE’s evaluation mechanism, except with
a new special-memory-aware memory manager, support
for emulation of 16-bit ﬁrmware, and compiler intrinsics
used by msp430-gcc.
Each of SpecLoadEval, SpecStoreEval, and Eval must
check that security properties are satisﬁed. Should one
fail, a warning will be generated and the set of succes-
sors S output by the evaluation function will be empty.
This allows execution to continue, along other paths,
even after one path leads to an error.
The set of possible successor states SS is then taken
to be the union of those output by SpawnInterrupts and
one of the eval functions. In a normal symbolic execu-
tion engine, the full set SS would be added to AS. FIE
works a bit differently due to state pruning and memory
smudging as we explain in Sections 4.3 and 4.4.
Dequeue S from AS according to R
(shouldExec,Sint) ← SpawnInterrupts(S)
if shouldExec then
Let p be the program counter of S
Let I be the instruction pointed to by p
if I is a load to special memory then
else if I is a write to special memory then
S ← SpecLoadEval(I,S)
S ← SpecStoreEval(I,S)
S ← Eval(I,S)
PS p ← PS p ∪{S}
SS ← Sint ∪S
for all S(cid:26) ∈ SS do
1: AS = {Sinit}
2: while AS (cid:29)= ∅ do
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
else
Let p(cid:26) be the program counter of S(cid:26)
if Prune(S(cid:26),PS p(cid:26) ) = false then
S(cid:26)(cid:26) ← MemorySmudge(S(cid:26),PS p(cid:26) )
AS ← AS ∪ S(cid:26)(cid:26)
Figure 4: Pseudocode of FIE’s main execution loop.
4.2 Modeling Chips and Peripherals
FIE must be aware of various aspects of the target ar-
chitecture, including what are valid memory addresses,
whether they correspond to special memory locations,
and how interrupt ﬁring should be simulated. With over
400 chips in the MSP430 family, hard-coding this infor-
Instead, FIE is conﬁg-
mation would be cumbersome.
ured at runtime to work for particular models of chips,
external peripherals, and interrupt ﬁring.
In this sec-
tion, we discuss the details of writing an analysis speci-
ﬁcation ﬁle, together with a memory spec and interrupt
spec. Combined these serve as a layer of abstraction be-
tween the symbolic execution engine and the actual tar-
get chip’s hardware details.
Analysis speciﬁcation: When FIE is run, the analyst in-
dicates the target architecture on the command line. In
turn FIE loads an associated analysis speciﬁcation ﬁle,
which is a plaintext ﬁle adhering to a simple format and
specifying how the analysis should be conﬁgured. An
example is shown in Figure 5.
Recall that each MSP430 chip has memory locations
that correspond to on-chip peripheral addresses. As
well there are other hardware speciﬁcs, e.g., the loca-
tion and length of non-volatile ﬂash memory segments.
These memory locations differ amongst chips. For exam-
ple, PORT 0 input resides at memory location 0x0020
on the MSP430G2221, but resolves to 0x200 on the
MSP430F5521. This information is generally not in-
cluded in ﬁrmware source-code. The speciﬁcation ﬁle
therefore includes information on the layout of memory
and what addresses correspond to special memory. In the
example, the ﬁle ﬁxes the total size of memory on line 1,
USENIX Association  
22nd USENIX Security Symposium  469
7
layout 0 x10000
range 0 x1080 0 x10bf flash
range 0 x10c0 0 x10ff flash
addr P1IN 0 x0020 1
addr P1OUT 0 x0021 1
addr P1DIR 0 x0022 1
addr P1IFG 0 x0023 1
i n t e r r u p t P O R T 2 _ I S R c h e c k _ P O R T 2
Figure 5: MSP430g2553 analysis speciﬁcation excerpt
speciﬁes ﬂash regions on lines 2 and 3, and sets the lo-
cations and sizes of several special memory addresses
on lines 4–7. The ﬁnal line indicates that the function
check PORT2 is used to determine when interrupts han-
dled by PORT2 ISR ﬁre.
For
this
is
any MSP430 chip that
supported by
layout ﬁle can be synthesized
msp430-gcc,
automatically from ﬁrmware source code (for ISRs) and
ﬁles included in the compiler. While we could therefore
have made speciﬁcations completely internal, we expose
the layout ﬁle explicitly to allow an analyst to modify
the hardware model if desired.
The chip layout speciﬁcation explicitly ﬁxes architec-
ture details that are implicit in ﬁrmware, but it does not
specify the actual behavior of these special features, such
as when to ﬁre interrupts and the behavior of special
memory. These are handled by the memory and inter-
rupt speciﬁcations.
Memory spec: The expected functionality of special
memory locations is not available in a ﬁrmware, and of-
ten not really ﬁxed until the device is deployed with at-
tached hardware peripherals. Thus, FIE uses a library of
functions that, together, form a model of special mem-
ory behavior. For each special memory location, the
memory spec contains a function n read and n write,
where n is the name of the special memory location (e.g.,
P1IN read and P1IN write). The SpecLoadEval and
SpecStoreEval functions determine which of the n read
and n write functions to invoke, based on the target ad-
dress.
(Note that the target address may be symbolic,
in which case FIE resolves the set of possible addresses,
and generates new successors for each possible resulting
behavior.)
Read and write functions are passed the entire sym-
bolic execution state, and output a (possibly empty) set
of states. This allows special memory reads and writes
to deﬁne behavior as an arbitrary computation over the
state. Security and domain experts can therefore modify
a memory spec to reﬁne models of peripheral behavior.
Although this modeling approach is ﬂexible and ex-
pressive, previous work has noted that such models can
be quite onerous to develop [14]. To eliminate this draw-
back, we provide a default memory spec which is auto-
matically generated from the analysis spec. For mem-
ory reads, the default memory spec returns a fresh, un-
constrained symbolic value. For example, reading from
P1IN always returns a new, unconstrained, symbolic, 8-
bit variable, while writing to P1OUT is a no-op. This de-
fault conservatively assumes that an attacker has full con-
trol over all peripherals and uninitialized memory. This
means that our analysis often overapproximates special
memory behavior, and in particular might lead to ﬁnding
vulnerabilities that cannot always be exploited when spe-
ciﬁc peripherals are used. This approach is in-line with
similar work on modeling symbolic hardware [26], and
as we will see in Section 5, empirically results in few
false positives.
Interrupt spec: Deciding which interrupt is enabled at
a given program point is nontrivial: the MSP430 design
documents specify a partial order of priorities over inter-
rupts, i.e., a higher priority interrupt cannot be preempted
by a lower priority one. Furthermore, some (but not all)
interrupts are only enabled when appropriate status reg-
ister ﬂags are set. Thus, determining the enabled set of
interrupts requires knowledge not only of the architec-
ture but also the current ﬁrmware state.
FIE handles this using an interrupt spec. It contains
a number of gate functions, one for each possible inter-
rupt that can occur on an MSP430. The SpawnInterrupts
function executes each gate function, passing each a
pointer to the entire execution state. The gate functions
return a ﬂag indicating that the interrupt: (1) cannot ﬁre
at the current instruction (usually indicating that the in-
terrupt is disabled at that program point); or (2) may oc-
cur at the current program point. For case (2), the gate-
way function additionally returns a successor state S(cid:31) that
is the same as the current state S except advanced to the
ﬁrst instruction of the associated interrupt handler.
SpawnInterrupts collects the returned values pro-
duced into a set of successor states Sint that includes
one successor for each gateway that returned may. As
well, SpawnInterrupts determines if it’s valid for execu-
tion to proceed without an interrupt. This reﬂects the fact
that when the ﬁrmware is in a sleep state the only valid
successor states are in Sint (i.e., the path must traverse
an interrupt handler). In this case, SpawnInterrupts re-
turns shouldExec set to false, correctly forgoing evalua-
tion of S. Otherwise it is set to true, and S is evaluated.
FIE uses, by default, an interrupt spec that explores
an over-approximation of all feasible paths: any inter-
rupt that is enabled at a particular program point may
ﬁre. Thus, an instruction for which n interrupts may ﬁre
will have at least |Sint| = n successor states, and possibly
multiple more in the case that the current state is evalu-
ated. In practice, even an attacker with physical access
to the chip is unlikely to be able to exercise all possible
ﬁring sequences. This means that FIE using the default
470  22nd USENIX Security Symposium 
USENIX Association
8
interrupt spec may yield false positives, but without fur-
ther information about possible adversaries treating all
possible ﬁring sequences is necessary for veriﬁcation.
The default interrupt spec can be used for all the
MSP430 variants: if the ﬁrmware does not handle a cer-
tain type of interrupt, that gate function is simply ig-
nored. However, swapping out interrupt libraries can still
be useful as a way to tune the analysis. For example, in
Section 5 we evaluate an interrupt spec that, instead of
ﬁring at every instruction, allows interrupts only to ﬁre
once per basic block. While this relaxed interrupt model
misses feasible paths, it improves performance.
4.3 State Pruning
In the course of analysis, the main execution loop will of-
ten generate a set SS including one or more states S(cid:31) that
will execute equivalently to another, already seen state ˆS.
We call such an S(cid:31) redundant. We denote states that lead
to equivalent execution by S(cid:31) ≈ ˆS and say S(cid:31) and ˆS are
equivalent.
Most prior symbolic execution frameworks, includ-
ing KLEE, simply add redundant states to the set of
active states, meaning they will potentially be sched-
uled for execution later. Consider Figure 4, but mod-
iﬁed so that lines 14–18 are replaced by a single line
AS ← AS ∪Sint ∪S. That is, all successors generated
via interrupt spawning or evaluation are simply added to
the set of active states. We refer to this variant as the
PLAIN operating mode of FIE.
Redundant states arise frequently in our setting, and
as we will show experimentally in Section 5, PLAIN is
slowed down considerably by them. One reason is that
interrupt ﬁrings can lead to two different paths leading to
the same state. Figure 6(a) shows an example interrupt
handler and code. At line 1, interrupts are enabled. By
the beginning of line 4, when running PLAIN there would
be 4 states resulting from the paths P1 = (cid:27)s2,s3,s4(cid:26), P2 =
(cid:27)s2,s7,s3,s4(cid:26), P3 = (cid:27)s2,s3,s7,s4(cid:26), P4 = (cid:27)s2,s7,s3,s7,s4(cid:26),
where si represents the statement at line i. The states S4
and S(cid:31)4 resulting from execution along paths P2 and P3 are
equivalent, since both increment a via the interrupt han-
dler once — even though they explore distinct program
paths all variables have the same value.
A second source of redundant states arises when sym-
bolic execution of loops generates redundant states. This
situation also causes the PLAIN mode of FIE to loop in-
ﬁnitely. Consider when running PLAIN from a state S3
on the looping line 3 in the code snippet shown in Fig-
ure 6(b). The main loop will call SpecLoadEval and
in turn invoke the memory spec function associated to
P1IN. An unconstrained symbolic variable will be gen-
erated and two successor states will be returned: S4 set
to line 4 (the branch condition assumed to fail) and S(cid:31)3
remaining on line 3 (the branch condition succeeded).
When S(cid:31)3 runs, it will again generate two new states, S(cid:31)4
and S(cid:31)(cid:31)3. Yet, S(cid:31)4 ≈A S4 and S(cid:31)3 ≈A S(cid:31)(cid:31)3. This will continue
endlessly, generating a large number of states and ulti-
mately ensuring that the analysis will never complete.
In KLEE and most prior systems redundant states were
dealt with indirectly, by way of state selection heuristics
R that favored new lines of code. We would like to sup-
port complete analyses, however, and so we go a differ-
ent route and instead build into FIE the ability to detect
and prune redundant states.
State pruning was used previously by RWset [6],
which detects if two states S(cid:31), ˆS are equivalent by check-
ing if the set of values taken by all live variables (plus ap-
propriate context such as the call path) of S(cid:31) match those
seen in ˆS, giving rise to a narrower notion of equivalence
that we denote by ˆS ≈L S(cid:31). Deciding ˆS ≈L S(cid:31) uses a live
variable analysis at each program point. We do not have
a live variable analysis that is sound in the presence of
interrupt paths, which are prevalent in our domain. We
expect that such an analysis would be costly and less ac-
curate when accounting for interrupts, and so we go a dif-
ferent route. FIE checks equivalence by investigating if
every variable, symbolic expression2, program counter,
and all other parts of the state are equal between ˆS and
S(cid:31), denoted ˆS ≈A S(cid:31). This embodies a trade-off between
simplicity of equivalence checking (i.e., we forgo static
analysis) and the ability to prune as aggressively as is
theoretically possible.
Lines 14–20 of Figure 4 realize state pruning. There a
function Prune checks each potential successor S(cid:31) ∈ SS
to see if it is equivalent to any of the previously generated
states in PS p(cid:31), namely those that have the same program
counter p(cid:31) as S(cid:31). To use the ≈A equivalence relation ef-
ﬁciently, we modify the way KLEE maintains states in
memory, storing for each visited program counter a set
of diffs of the memory contents of all states that have
been seen at that program counter. This also allows fast
comparisons to detect redundant states.
4.4 An Optimization: Memory Smudging