protection by providing MFA and code signing, blocking weak
or compromised passwords and detecting abnormal logins.
They can also combat typosquatting by detecting typos at the
registry client side and preventing typos of popular packages
from publishing. In addition, RMs can publish policies to
guard ownership transfer, to regulate package behaviors such
as tracking users without notification in rsa-compat, and to
rule out unwanted packages such as restclient which claims
to be a typo-guard gem without proof of their own innocence.
(2) Review Feature: RMs can extend the vetting pipeline to
identify packages with (i) names similar to existing popular
packages or related to existing attacks using metadata anal-
ysis, (ii) suspicious API usages and dataflows using static
analysis, (iii) unexpected runtime behaviors using dynamic
analysis. The true positive verification process can be scaled by
crowd-sourcing manual reviews. Since the package manager
ecosystem is an open source community with stakeholders
such as PMs and Devs,
they can be involved to secure
the ecosystem. In particular, when RMs detect a suspicious
package version, they can broadcast this information to the
corresponding developers or publish analysis results for “social
voting”.
(3) Remediation Feature: Since RMs hold the central authority,
they can not only remove malicious packages and publishers
from the server, but also installed packages from the client
by comparing against blacklists. Moreover, RMs can also
employ various notification channels such as emails, security
advisories and client-side checks to inform stakeholders about
security incidents. Notification targets include both Devs and
PMs of affected packages and their dependents. For example,
the infection of AndroidAudioRecorder after removal shown
in Figure 11 highlights the importance of notification-based
remediation.
Package Maintainers. Attack vectors targeting PMs include
account compromise, infrastructure compromise, disgruntled
12
insider, malicious contributor and ownership transfer. PMs
can protect their accounts by adopting techniques such as
MFA, code signing and strong passwords. PMs can protect
their infrastructure through firewall, timely patches and IDS.
PMs need to be cautious about both new contributors and
disgruntled insiders, and manually inspect small packages or
employ a code review system for larger packages. In addition
to enhancements, PMs can help improve the ecosystem by
reporting security issues to advisories, updating dependencies
to avoid known issues, joining “social voting” and avoiding
security analysis hurdles.
Developers. Although Devs cannot control upstream pack-
ages,
they can follow best practices to remediate security
issues. Devs can host private registries with known secure
package versions to avoid supply chain attacks from upstream
stakeholders. Devs can periodically check security advisories
and timely update to avoid known vulnerabilities. For untrusted
packages, Devs can manually check, deploy a vetting pipeline
to check code and isolate them at runtime [9], [10] to avoid
potential hazards. In addition, Devs can join “social voting” to
improve security analyses.
End-users. Despite no control of any provided service and
software, Users can leverage AV tools to secure their devices
and protect
themselves. In addition, Users can raise their
security awareness and access only official and reputable
websites.
B. Measurement Limitations
Our empirical measurement is designed to leverage insights
from existing supply chain attacks to identify new ones in the
wild. We aim at revealing the severity and popularity of the
problems, rather than achieving high coverage and robustness
in program analysis. The vetting pipeline in its current form
suffer from inaccuracy in static analysis and low coverage in
dynamic analysis, and can be easily evaded. We invite the
community to advance the state-of-the-art in program analysis
techniques to help protect the package manager ecosystem.
Scope of Analysis. While prototyping the pipeline, we
only consider files written in the corresponding language for
each registry in static analysis, excluding native extensions,
embedded binaries and files written in other languages. We
only consider Linux platform in dynamic analysis, in particular
Ubuntu 16.04, excluding other Linux distributions, Windows
and MacOS environments. We only consider runtime depen-
dencies, thus ignoring development dependencies.
Inaccurate Static Analysis. The pipeline relies on existing
AST parsing and dataflow analysis tools in static analysis,
which can be inaccurate due to dynamic typing. In addition,
programming practices such as reflection and runtime code
generation add to the problem, and lead to inaccurate results.
However, we argue that more accurate tools and algorithms can
be developed and integrated into the pipeline when available.
Dynamic Code Coverage. The pipeline currently performs
four types of dynamic analyses on Ubuntu 16.04, but may
have limited code coverage. Possible improvements include
environment diversification (e.g. Windows, browser), force-
execution [68], symbolic execution [69] etc.
Anti-analysis Techniques. As discussed in §IV-D, attackers
have evolved and adopted anti-analysis techniques. We expect
more sophisticated techniques such as intentional vulnerable
code and heavy obfuscation to appear in the future. We solicit
the future researchers to combat evolving attackers.
Threats to Validity. The empirical measurement involves two
manual steps. First, the manual API labeling in §III-B2 checks
against language specifics and runtime APIs. Incorrect labeling
can lead to false positives and false negatives in suspicious
packages. The false positives are further excluded by the true
positive verification, while the false negatives are missed by
our study and remain malicious in registries. Second, the initial
heuristics rules and the true positive verification in §III-B4 are
based on known attacks and authors’ domain knowledge. This
step can introduce false negatives and miss malware.
VI. RELATED WORK
Software Supply Chain Attacks. The earliest software
supply chain attack is the Thompson hack in 1983, in which
he left a backdoor in the compiler, and could compromise
a program even if its source code is benign. Following that,
similar attacks [70]–[74] are launched, targeting various supply
chain components such as infrastructure, operating systems,
update channels, compilers and cryptographic algorithms. Re-
cent years witness an increasing trend of supply chain attacks
targeting package managers [4], [5], [7], [13], [17], [29], [31],
[35], [37], which host prebuilt packages for benefits such
as code sharing. Recently, Zimmermann et al [8] presented
a study on the Npm ecosystem to reveal
the high risks
faced by the community, such as single points of failure and
threats of unmaintained packages. In contrast, our work mainly
studies supply chain attacks against three popular package
managers to identify root causes, scan new threats and suggest
improvements. As a side product, we perform dependency
analysis on the three package managers in §IV-B and find
them to suffer from similar risks (i.e. single points of failure
and threats of unmaintained packages) as highlighted in the
Npm study. Since our work focuses on characterizing supply
chain attacks, we do not go further into risk quantification and
comparison among different registries.
Package Management Security. Previous works studied the
design and implementation of package managers and proposed
attacks [75], [76] and defenses [77]–[79]. These works focus
on designing a more secure package manager with properties
such as compromise-resilience and supply chain integrity.
In addition, due to the rising number of vulnerabilities and
malware in the Npm ecosystem, various works [8]–[12], [80],
[81] have been proposed to find new vulnerabilities, isolate
untrusted packages, evaluate risks and remediate issues. Our
work differs from prior work by studying a corpus of real-
world supply chain attacks against package managers and
proposing actionable improvements and suggestions.
Security Tools. We prototype the vetting pipeline in an
extensible way such that more tools can be added to the
pipeline to generate better results. For example, static analysis
tools for various languages [20], [82]–[88] and binaries [89],
[90] can possibly generate more accurate and comprehensive
results. Dynamic analysis tools [51], [52], [68], [91]–[95]
can increase dynamic code coverage and provide support
13
for various platforms and environments. In addition, existing
threat intelligence services such as VirusTotal [96] and security
blogs [97] can provide information for the indicators (e.g. file
hash, URL, IP) identified by analysis tools, thus automating
the true positive verification process for known attacks.
VII. CONCLUSION
To systematically study the recent supply chain attacks in
the package manager ecosystem, we propose a comparative
framework, which reveals relationships among stakeholders.
We pinpoint the root causes and summarize their attack vectors
and malicious behaviors. Based on our insights, we compile
well-known program analysis techniques such as metadata,
static, and dynamic analysis into a large scale analysis pipeline,
to reveal various aspects of packages and help detect malicious
packages. Through iterative verification, we identified and
reported 7 malware in PyPI and 41 malware in Npm and 291
malware in RubyGems, out of which, 278 (82%) have been
removed and 3 have been assigned CVEs.
We will open source the analysis pipeline and provide the
collected malware samples for research purpose on request, to
aid future research on improving security of package managers
and defending supply chain attacks. We also invite the com-
munity to improve it and RMs to invest in deploying them to
set a minimum security bar.
ACKNOWLEDGMENT
The authors would like to thank the anonymous reviewers
for their constructive comments and feedback. We also thank
Professor William Enck for his guidance while shepherding
this paper. This work was supported, in part, by ONR under
grants N00014-17-1-2895, N00014-15-1-2162, N00014-18-1-
2662 and N00014-19-1-2179, NSF under Award 1916550,
and Cisco Systems under an unrestricted gift. Any opinions,
findings, and conclusions in this paper are those of the authors
and do not necessarily reflect the views of our sponsors or
collaborators.
REFERENCES
[1]
[2]
[4]
[5]
J. Forcier, P. Bissex, and W. J. Chun, Python web development with
Django. Addison-Wesley Professional, 2008.
P. M. Mulone and M. Reingart, web2py Application Development
Cookbook. Packt Publishing Ltd, 2012.
[3] M. Grinberg, Flask web development: developing web applications with
python. " O’Reilly Media, Inc.", 2018.
J. Foundation and other contributors, Postmortem for malicious pack-
ages published on july 12th, 2018, Jul. 2018. [Online]. Available:
https://eslint.org/blog/2018/07/postmortem- for- malicious- package-
publishes.
J. Koljonen, Warning! is rest-client 1.6.13 hijacked? Aug. 2019. [On-
line]. Available: https://github.com/rest-client/rest-client/issues/713.
[6] Bertus, Cryptocurrency clipboard hijacker discovered in pypi reposi-
tory, Oct. 2018. [Online]. Available: https://medium.com/@bertusk/
cryptocurrency - clipboard - hijacker - discovered - in - pypi - repository -
b66b8a534a8.
[7] N. P. Tschacher, “Typosquatting in programming language package
managers,” Bachelor’s thesis, Universität Hamburg, Fachbereich Infor-
matik, Jun. 2016.
[8] M. Zimmermann, C.-A. Staicu, C. Tenny, and M. Pradel, “Small world
with high risks: A study of security threats in the npm ecosystem,” in
Proc. 28th USENIX Sec., Santa Clara, CA, Aug. 2019.
[9] N. Vasilakis, B. Karel, N. Roessler, N. Dautenhahn, A. DeHon, and
J. M. Smith, “Breakapp: Automated, flexible application compartmen-
talization,” Feb. 2018.
14
[11]
[10] C.-A. Staicu, M. Pradel, and B. Livshits, “Synode: Understanding and
automatically preventing injection attacks on node. js,” in Proc. 2018
NDSS, San Diego, CA, Feb. 2018.
J. C. Davis, E. R. Williamson, and D. Lee, “A sense of time for
javascript and node. js: First-class timeouts as a cure for event handler
poisoning,” in Proc. 27th USENIX Sec., Baltimore, MD, Aug. 2018.
[12] C.-A. Staicu and M. Pradel, “Freezing the web: A study of redos
vulnerabilities in javascript-based web servers,” in Proc. 27th USENIX
Sec., Baltimore, MD, Aug. 2018.
[13] C. Cimpanu, Hacker backdoors popular javascript library to steal
bitcoin funds, Nov. 2018. [Online]. Available: https://www.zdnet.com/
article/hacker- backdoors- popular- javascript- library- to- steal- bitcoin-
funds/.
[14] N. Inc., Plot
to steal cryptocurrency foiled by the npm security
team, May 2019. [Online]. Available: https : / / blog . npmjs . org / post /
185397814280/plot-to-steal-cryptocurrency-foiled-by-the-npm.
L. Tal, The state of open source security report, Feb. 2019. [Online].
Available: https://snyk.io/opensourcesecurity-2019/.
[16] R. Loden, Malware in ‘active-support‘ gem, Aug. 2018. [Online].
[15]
Available: https://hackerone.com/reports/392311.
[17] C. Cimpanu, Malware found in arch linux aur package repository, Jul.
2018. [Online]. Available: https://www.bleepingcomputer.com/news/
security/malware-found-in-arch-linux-aur-package-repository/.
[18] N. Inc., New pgp machinery, Apr. 2018. [Online]. Available: https :
[19]
[20]
//blog.npmjs.org/post/172999548390/new-pgp-machinery.
E. W. Durbin, Use two-factor auth to improve your pypi account’s
security, May 2019. [Online]. Available: https://blog.python.org/2019/
05/use-two-factor-auth-to-improve-your.html.
S. Arzt and E. Bodden, “Stubdroid: Automatic inference of precise
data-flow summaries for the android framework,” in Proc. 38th Inter-
national Conference on Software Engineering (ICSE), Austin, Texas,
May 2016.
[21] M. Justicz, Remote code execution on packagist.org, Aug. 2018.
[Online]. Available: https://justi.cz/security/2018/08/28/packagist-
org-rce.html.
[22] M. Justicz, Remote code execution on rubygems.org, Oct. 2017. [On-
line]. Available: https://justi.cz/security/2017/10/07/rubygems- org-
rce.html.
[23] N. Inc., ‘crossenv‘ malware on the npm registry, Aug. 2017. [Online].
Available: https://blog.npmjs.org/post/163723642530/crossenv-malwar
e-on-the-npm-registry.
[24] A. Almubayed, “Practical approach to automate the discovery and
eradication of opensource software vulnerabilities at scale,” Blackhat
USA, 2019.
fate0, Package phishing, Jun. 2017. [Online]. Available: http://blog.
fatezero.org/2017/06/01/package-fishing/.
[26] M. Braun, A confusing dependency, Dec. 2018. [Online]. Available:
[25]
https://blog.autsoft.hu/a-confusing-dependency/.
[29]
[28]
[27] A. Baldwin, The package destroyer-of-worlds contained malicious
code, May 2019. [Online]. Available: https : / / www . npmjs . com /
advisories/890.
T. Costa, Strong_password v0.0.7 rubygem hijacked, Jul. 2019. [On-
line]. Available: https : / / withatwist . dev / strong - password - rubygem -
hijacked.html.
L. Tal, Malicious remote code execution backdoor discovered in the
popular bootstrap-sass ruby gem, Apr. 2019. [Online]. Available: https:
//snyk.io/blog/malicious-remote-code-execution-backdoor-discovered-
in-the-popular-bootstrap-sass-ruby-gem/.
[30] N. Inc., Reported malicious module: Getcookies, May 2018. [Online].
Available: https://blog.npmjs.org/post/173526807575/reported-malicio
us-module-getcookies.
[31] Ö. M. Akku¸s, Defcon: Webmin 1.920 unauthenticated remote command
execution, Aug. 2019. [Online]. Available: https : / / www . pentest . co
m . tr / exploits / DEFCON - Webmin - 1920 - Unauthenticated - Remote -
Command-Execution.html.
[32] H. Garrood, Malicious code in the purescript npm installer, Jul. 2019.
[Online]. Available: https://harry.garrood.me/blog/malicious-code-in-
purescript-npm-installer/.
[33] N. Inc., Security advisories for npm, Aug. 2019. [Online]. Available:
https://www.npmjs.com/advisories.
S.-C. Advisory, Ten malicious libraries found on pypi - python package
index, Sep. 2017. [Online]. Available: http://www.nbu.gov.sk/skcsirt-
sa-20170909-pypi/.
[35] C. Cimpanu, 17 backdoored docker images removed from docker hub,
Jun. 2018. [Online]. Available: https://www.bleepingcomputer.com/
[34]
news/security/17-backdoored-docker-images-removed-from-docker-
hub/.
[38]
[37]
[36] A. Kujawa, Why is malwarebytes blocking coinhive? Oct. 2017. [On-
line]. Available: https://blog.malwarebytes.com/security-world/2017/
10/why-is-malwarebytes-blocking-coinhive/.
Logix, Malware found in the ubuntu snap store, May 2018. [Online].
Available: https://www.linuxuprising.com/2018/05/malware-found-in-
ubuntu-snap-store.html.
J. Wright, Hunting malicious npm packages, Aug. 2017. [Online].