the transaction by sending back to the terminal the 2-byte
Authorization Response Code (ARC, authorize/decline and
further data) and the Authorization Response Cryptogram
(ARPC). The latter is a MAC generated over the exclusive-OR
of the ARC (padded to 8 bytes) and the received cryptogram
ARQC, using the session key s. The terminal then issues the
EXTERNAL AUTHENTICATE command (or equivalently a
second GENERATE AC) to inform the card of the bank’s
decision. The card constructs the response analogously to its
response to the (ﬁrst) GENERATE AC command, only this
time no ARQC is sent, but instead either a TC or an AAC.
IV. MODELING AND ANALYSIS METHODOLOGY
To model and analyze the EMV standard, we use the pro-
tocol veriﬁcation tool Tamarin [12], [13]. Tamarin is a state-
of-the-art model-checker for security protocol veriﬁcation. It
features an expressive language for specifying protocols, their
properties, and adversaries, as well as powerful
inference
procedures for automating much of protocol veriﬁcation. We
ﬁrst provide some background on Tamarin and then present
the properties we analyze and our analysis methodology.
A. Tamarin Background
In Tamarin’s underlying theory, cryptographic messages are
terms in an order-sorted term algebra (S,≤,TΣ(V)) where S
is a set of sorts, ≤ is a partial order on S, Σ is a signature, and
V is a countably inﬁnite set of variables. For example, the term
pk (k), with pk ∈ Σ, denotes the public key associated to the
private key k ∈ TΣ(V). Similarly, the term aenck(m), with
aenc ∈ Σ, denotes the asymmetric encryption of the message
m ∈ TΣ(V) with the public key k ∈ TΣ(V). The algebraic
properties of the cryptographic functions are deﬁned by equa-
tions over terms. For example, adeck(aencpk (k)(m)) = m
speciﬁes the semantics of asymmetric decryption.
written as(cid:2)l(cid:3)
(cid:2)In(m)(cid:3)
(cid:2)a(cid:3)
(cid:2)SentHash(A, m)(cid:3)
−→
Tamarin models a protocol’s set of executions as a labeled
transition system (LTS). The states of the LTS are multisets of
facts, which formalize the local states of the agents running
the protocol, the adversary’s knowledge, and messages on the
network. Facts are of the form F(a1, a2 . . . , an) where F is
a symbol from an unsorted signature Γ of predicate symbols
and ai ∈ TΣ(V). Transitions between states are determined by
transition rules (or simply rules). A rule is a triple (l, a, r), also
(cid:2)r(cid:3), where l, a, and r are multisets of facts.
(cid:2)State1(A, m), Out(h(m))(cid:3) .
For example, the following rule speciﬁes the transmission of
the hash of a received message:
−→
This rule states that, if there is a term m input on the network,
then update the local state of A to State1(A, m), remove m
from the network, and output the term h(m) on the network,
possibly for reception by A’s communication partner. The
transition is labeled with SentHash(A, m), meaning that A
sent the hash of m.
−
−
In what follows, let F be the universe of facts and R
the universe of rules. Whereas P(.) denotes the power set
of a set, we use M(.) to refer to the power multiset of a
set. We deﬁne the function linear : M(F) → M(F) that
yields all linear facts from the input multiset of facts. Linear
facts model resources that can be consumed just once, such as
messages on the network. Facts that are not linear are called
persistent and can be reused arbitrarily often without being
consumed. We also deﬁne the function gins : P(R) → P(R)
that yields the set of all ground instances of the input set of
rules. A ground instance of a rule is the rule resulting from
the substitution of all variables with ground terms (i.e., terms
from TΣ). Also, let A ⊆ R be the set of global rules modeling
a network controlled by a Dolev-Yao adversary [21] as well
as the generation of random, fresh values.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:10:50 UTC from IEEE Xplore.  Restrictions apply. 
1771
A protocol P ⊆ R is a set of rules. The associated LTS
is (S, Λ,−→), where S = M(F), Λ = M(F), and −→ ⊆
S × Λ × S is deﬁned by:
s
a
(cid:48)
−→ s
⇐⇒ ∃(l, a, r) ∈ gins(P ∪ A).
(cid:48)
l ⊆ s ∧ s
= (s \ linear(l)) ∪ r.
A transition consumes the linear facts of l from the current
state, adds the facts from r, and labels the transition with a.
An execution of P is a ﬁnite sequence (s0, a1, s1, . . . , an, sn)
ai−→ si for all 1 ≤ i ≤ n. The
such that s0 = ∅ and si−1
sequence (a1, . . . , an) is a trace of P and the set of all of P ’s
traces is denoted traces(P ). Security properties are speciﬁed
using ﬁrst-order logic formulas on traces. Further details on
Tamarin’s syntax and semantics can be found in [12], [13].
B. Security Properties
As we have seen, EMV involves three parties: the con-
sumer’s card, the merchant’s terminal, and the cardholder’s
bank. Its central security properties concern the parties au-
thenticating each other, guarantees on transaction information,
and the secrecy of sensitive data.
The ﬁrst property we examine is that no terminal-accepted
transaction will be declined by the bank. This property is par-
ticularly relevant for ofﬂine-capable terminals, which typically
do not request online authorization for low-value transactions.
Such terminals can be cheated if the property fails.
Deﬁnition 1 (Bank accepts). A protocol P satisﬁes the prop-
erty that the bank accepts terminal-accepted transactions if for
every α ∈ traces(P ):
∀t, i. TerminalAccepts(t) ∈ αi =⇒
(cid:64)j. BankDeclines(t) ∈ αj ∨
∃A, k. Honest(A) ∈ αi ∧ Compromise(A) ∈ αk.
In our model, the TerminalAccepts(t) fact is added to the
trace only if the terminal is satisﬁed with the transaction
t and the associated cryptographic proofs provided by the
card. That is, when the terminal issues a purchase receipt.
The BankDeclines(t) fact is produced when the bank receives
an authorization request for the transaction with a wrong
Application Cryptogram. The last line rules out transactions
where an agent, presumed honest, has been compromised. For
example, a bank that maliciously rejects a correct transaction
should not make the property fail.
Our second property corresponds to the authentication prop-
erty commonly known as injective agreement [29], [30].
Deﬁnition 2 (Authentication to terminal). A protocol P satis-
ﬁes authentication to the terminal if for every α ∈ traces(P ):
(cid:0)
∀T, P, r, t, i.
Commit(T, P,(cid:104)r,
∃j. Running(P, T,(cid:104)r,
(cid:64)i2, T2, P2.
(cid:48)
Commit(P2, T2,(cid:104)r,
∃A, k. Honest(A) ∈ αi ∧ Compromise(A) ∈ αk.
, t(cid:105)) ∈ αi2 ∧ i2 (cid:54)= i(cid:1)
, t(cid:105)) ∈ αi =⇒
, t(cid:105)) ∈ αj ∧
(cid:48)
Terminal
(cid:48)
Terminal
Terminal
∨
(cid:48)
(cid:48)
(cid:48)
(cid:48)Card(cid:48), (cid:48)Bank(cid:48)
The above property, with (cid:48)Terminal(cid:48)
∈ TΣ and (cid:104)(cid:105) ∈ Σ,
states that whenever the terminal T commits to a transaction
t with its communication partner P , then either P , in role
} ⊆ TΣ, was running the protocol with T
r ∈ {
and they agree on t, or an agent, presumed honest, has been
compromised. Additionally, there is a unique Commit fact for
each pair of accepted transaction and accepting agent, which
means that replay attacks are prevented.
The facts Commit and Running, introduced in [29], are used
to specify authentication properties. A Commit fact represents
an agent’s belief about
its communication partner’s local
state, whereas Running represents the partner’s actual state.
Authentication properties are therefore expressed in terms of
matching pairs of such facts. In our models, Commit facts
occur whenever the committing agent is in a satisfactory state
when the transaction is ready to be accepted.
Our third property is also an authentication property and is
very similar to the second, except that the agent who commits
is the bank. That is, the deﬁnition is the same except the
ground term (cid:48)Terminal(cid:48) is now (cid:48)Bank(cid:48)
Another property relevant for formal protocol analysis is
secrecy (a.k.a. conﬁdentiality). The secrecy of a term x holds
when x is not known to the attacker. The attacker’s knowledge
of a term x is written as KU(x), where KU ∈ Γ is a fact
symbol deﬁned by Tamarin’s built-in rules that model how
the attacker acquires knowledge. The deﬁnition of secrecy also
assumes that the agents involved are not compromised.
Deﬁnition 3 (Secrecy). A protocol P satisﬁes secrecy if for
every α ∈ traces(P ):
∀x, i. Secret(x) ∈ αi =⇒
(cid:64)j. KU(x) ∈ αj ∨
∃A, k. Honest(A) ∈ αi ∧ Compromise(A) ∈ αk.
In an EMV transaction, terms that should be secret include
the PIN number, the PAN (i.e., the card number), and the keys
(i.e., private keys and symmetric shared keys).
∈ TΣ.
We also consider other properties such as executability,
which allows one to assess whether a protocol execution
reaches a state where the bank and the terminal have ac-
cepted a transaction and no compromises have occurred. This
represents a sanity check showing that the protocol modeled
behaves as expected and allows the executions of protocol
runs without adversary involvement. This ensures that there
are no modeling errors that would make the speciﬁed protocol
inoperable and lead to false results.
Deﬁnition 4 (Executability). A protocol P is executable if
α ∈ traces(P ) exists such that:
(cid:48)
Card
(cid:48)
Card
(cid:48)
Card
(cid:48)
∃t, C, B, nc, i, j, k, l.
(cid:48)
Running(C, nc,(cid:104)
(cid:48)
Commit(nc, C,(cid:104)
(cid:48)
(cid:48)
Running(C, B,(cid:104)
Bank
(cid:48)
(cid:48)
Commit(B, C,(cid:104)
Bank
(cid:64)A, a. Compromise(A) ∈ αa.
, t(cid:105)) ∈ αk ∧
, t(cid:105)) ∈ αl ∧
, t(cid:105)) ∈ αi ∧
, t(cid:105)) ∈ αj ∧
(cid:48)
Terminal
(cid:48)
Terminal
(cid:48)
(cid:48)
(cid:48)
(cid:48)
Card
,
,
,
,
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:10:50 UTC from IEEE Xplore.  Restrictions apply. 
1772
C. Analysis Methodology
We construct our model in a way that accounts for all
possible protocol executions and interactions, but gives us a
structured analysis of which kinds of executions are vulnerable
to attacks. We start by formalizing the EMV standard in two
generic models:
1) one for the EMV contact protocol, modeling the full
execution space of a contact transaction, and
2) one for the EMV contactless protocol, modeling the
full execution space of a Mastercard [31] or Visa [32]
contactless transaction.
terminals,
Each of these two models captures all possible executions
of the corresponding Payment System Environment (contact
or contactless), including simultaneous transactions with dif-
ferent cards,
types of authentication, cardholder
veriﬁcation methods, and all the other settings. For example,
the contactless protocol model allows for executions between
a terminal, which believes to be in a Visa transaction, and
three cards, which may be different from Visa cards. Clearly,
whether the system can reach a state where the transaction is
accepted depends on the actual messages and cryptographic
proofs that the terminal and the bank receive.
Tamarin exhibits a property violation by constructing a trace
that contradicts the given property. Clearly, Tamarin cannot
output all such traces as there are inﬁnitely many (simply by
adding unrelated steps), if one exists. Running Tamarin on
the generic models will therefore either lead to a successful
veriﬁcation or one attack trace, violating the property, with the
“least secure” type of card and authentication method, among
other settings. However, one might be interested, for example,
in the property of authentication to the bank speciﬁcally
for transactions where the card used Combined Dynamic
Data Authentication (CDA, recall from Section III-B) and the
transaction value was high, i.e., above the CVM-required limit.
With this in mind, we employed a modeling strategy that
automatically generates speciﬁc Tamarin models from the two
generic models. To automatically generate the speciﬁc models,
we use target conﬁgurations. A target conﬁguration is a choice
of arguments that selects the transactions for which we want
to verify the security properties. A generic model and a target
conﬁguration determine what we call a target model. For
example, Visa DDA Low is a target model generated from the
contactless protocol (generic) model with the target arguments:
• DDA: referring to the ofﬂine data authentication method
(known as fast DDA in [32]), and
• Low: indicating a low-value transaction.
We automated the generation of target models and the
interested reader can ﬁnd the technical details in Appendix A
as well as in our Tamarin theories and their README [33].
In our models, we consider the following transaction data
to be agreed upon for the authentication properties (i.e., the
term t in Deﬁnition 2):
• the Primary Account Number (PAN);
• the Application Interchange Proﬁle (AIP);
• the Cardholder Veriﬁcation Method (CVM) used;
• the Application Transaction Counter (ATC);
• the Application Cryptogram (AC) data input (X and X(cid:48)
in Figure 1);
• the Application Cryptogram (AC) itself; and
• the Issuer Application Data (IAD).
For both the contact and contactless models, between the
terminal and the card (and vice versa) we modeled a channel
controlled by the Dolev-Yao adversary, who can listen, block,
inject, and modify the transmitted data. Between the bank and
the terminal (and vice versa) we modeled a secure channel
that offers authentication and secrecy.
We also assumed that
terminals do not complete high-
value, contactless transactions with cards that (apparently) do
not support cardholder veriﬁcation. In such transactions, the