## Page 237
222
第11章构建基本脚本
如果想要更别致点，也可以搭配使用重定向和管道来将输出保存到文件中。
$ rpm -ga 1 sort > rpn.list
abrt1.1 141,fe14.i686
$ more rpm.list
abrt-addon-ccpp-1, 1.141.fe14.i686
abrt-addon-kerneloops1.1. 141. fe14. i686
abrt-addon-python-1.1 .141 . fe14.i686
abrt-desktop1.1.141.fc14.i686
abrt1ibs1.1 141,fe14.i686
abrt -gui1.1,141, fc14,i686
abrt-plugin-bugzi11a-1.1.14-1.fe14.i686
abrt -plugin-1ogger-1.1.14-1 fe14. i686
abrt-pluginrunapp-1.1.141. fe14. i686
ac12.2,498.fc14. i686
[ -..]
不出所料，rpm.list文件中的数据现在已经排好序了。
到目前为止，管道最流行的用法之一是将命令产生的大量输出通过管道传送给more命令。
这对1s命令来说尤为常见，如图11-2所示。
userlocalhest:-
-r--r--,
dnetr-xr-x.
5ep 15 18:81 alsa
lasts.tb
2 reot 
6 Sep 15 18:15 altereatives
-f-f--f--.
w-r--r-.
1 reot
1 reot
969
dner-xr-s
drexr-xr-x
--r-
dner-xr-x.
.c
p e  g 99
-More*
图11-2和1s命令一起使用nore命令
1s-1命令产生了目录中所有文件的长列表。对包含大量文件的目录来说，这个列表会相当
长。通过将输出管道连接到more命令，可以强制输出在一屏数据显示后停下来。
11.7执行数学运算
另一个对任何编程语言都很重要的特性是操作数字的能力。遗憾的是，对shell脚本来说，这
个处理过程会比较麻频。在shell脚本中有两种途径来进行数学运算。
---
## Page 238
11.7执行数学运算
223
11.7.1expr 命令
最开始，Bourmne shell提供了一个特别的命令用来处理数学表达式。expr命令允许在命令行
上处理数学表达式，但是特别笨拙。
$ expr 1  +  5
expr命令能够识别少数的数学和字符串操作符，见表11-1。
表11-1expr命令操作符
操作符
描述
ARG11 ARG2
如果ARG1既不是muI也不是零值，返国ARG1：否则返回ARG2
ARC1 & ARC2
如果没有参数是null或零值，返回ARG1，否则返回0
ARG1 = ARG2
如果ARG1大干或等于ARG2，返同1，否则返同0
ARC1 > ARC2
如果ARG1大于ARG2。返国1；否期返国0
ARG1 + ARG2
返网ARG1和ARG2的算术运算和
ZORY - TORY
返风ARG1和IARG2的算术运算差
ARG1 * ARG2
返风ARG1和IARG2的算术秉积
ARG1_/ ARG2
返回ARG1被ARC2除的算术育
ARC1 & ARC2
返回ARC1被AR02除的算术余数
FTRING : REGEXP
如果BEGEXP匹配到了STRINC中的某个模式，返回该模式匹配
natch STRINC RBGEX
如果BBGEXP匹配到了STRIN3C中的某个模式，返回该模式匹配
subetr STRING POS LENGTH
返回起始位置为POS（从1开始计数）、长度为LENGTH个字符的子字符串
i.ndex STRI9G CHARS
返回在STRINC中找到CHARS字符串的位置：否则，返间0
Length STRING
冠国字符中STRINO的数值长度
+TOKEN
将TOKE解释成字符申，即使是个关键字
(EXPRESSION)
返网EXPRESSION的值
尽管标准操作符在expr命令中工作得很好，但在脚本或命令行上使用它们时仍有问题出现。
1
许多expr命令操作符在shell中另有含义（比如星号）。当它们出现在在expr命令中时，会得到一
些论异的结果。
$ expr 5 * 2
expr1 syntax error
要解决这个问题，对于那些容易被shell错误解释的字符，在它们传人expr命令之前，需要使
用shell的转义字符（反斜线）将其标出来。
$ expr 5 \* 2
---
## Page 239
224
第11章构建基本脚本
10
现在，麻烦才刚刚开始！在shell脚本中使用expr命令也同样复杂：
1/bin/bash
$ cat test6
 An example of uaing the expr command
var1=10
var2=20
[xess /zxeAs xdxe) $=gxe△
echo The result la $var3
要将一个数学算式的结果赋给一个变量，需要使用命令替换来获取expr命令的输出：
$ chnod u+x test6
$./test6
The result la 2
幸好bash shell有一个针对处理数学运算符的改进，你将会在下一节中看到。
11.7.2使用方括号
bash shell为了保持跟Boume shell的兼容面包含了expr命令，但它同样也提供了一种更简单
的方法来执行数学表达式。在bash中，在将一个数学运算结果赋给某个变量时，可以用美元符和
方括号（$[operation 1）将数学表达式围起来。
[s + ]s=xe $
$ echo Svar1
[+ xes]s=zxeA $
12
$ echo Svar2
用方括号执行shell数学运算比用expr命令方便很多。这种技术也适用于shell脚本。
$ cat testT
#1 /bin/bash
var1=100
vax2=50
S=xe
[(εxeA$ - xeAs} • [xeAs]S=xe△
echo The flnal result ls $var4
运行这个脚本会得到如下输出。
$ chnod u+x test7
The final result 1a 500
$./test7
同样，注意在使用方括号来计算公式时，不用担心shell会误解乘号或其他符号。shell知道它
---
## Page 240
11.7执行数学运算
225
不是通配符，因为它在方括号内。
在bash shell脚本中进行算术运算会有一个主要的限制。请看下例：
#1/bin/bash
$ cat testB
var1=100
[gxes / xeA$1s=gxeA
var2=45
echo The final result la Svar3
现在，运行一下，看看会发生什么：
$ chmod u+x Ceat8
The final result 1a 2
$-/test8
bashshell数学运算符只支持整数运算。若要进行任何实际的数学计算，这是一个巨大的限制。
说明zshell（zsh）提供了完整的浮点数算术操作。如果需要在shell脚本中进行浮点数运算，可
以考虑看看zshell（将在第23章中讨论）。
11.7.3浮点解决方案
有几种解决方案能够克服bash中数学运算的整数限制。最常见的方案是用内建的bash计算器，
fbc:
1.be的基本用法
bash计算器实际上是一种编程语言，它允许在命令行中输人浮点表达式，然后解释并计算该
表达式，最后返回结果。bash计算器能够识别：
口数字（整数和浮点数）
口变量（简单变量和数组）
口注释（以#或C语言中的/**/开始的行）
口表达式
编程语句（例如if-then语句）
口函数
可以在shel提示符下通过bc命令访问bash计算器：
bc 1.06.95
Copyright 19911994, 1997, 1998, 2000, 2004, 2006 Free Software Foundation, Inc,
This is free Boftvare vith ABSOLUTELY NO KARRANTY,
For details type *varranty'.
64. 8
1.2 * 5.4
---
## Page 241
226
第11章构建基本脚本
(5 + ε) + 95T*E
25.248
quit
$
这个例子一开始输入了表达式12★5.4。bash计算器返回了计算结果。随后每个输入到计
算器的表达式都会被求值并显示出结果。要退出bash计算器，你必须输人quit。
浮点运算是由内建变量scale控制的。必须将这个值设置为你希望在计算结果中保留的小数
位数，否则无法得到期塑的结果。
$ bc -q
3 .44 / 5
scale=4
0
3 .44 / 5
quit
. 6880
scale变量的默认值是0。在scale值被设置前，bash计算器的计算结果不包含小数位。在将
其值设置成4后，bash计算器显示的结果包含四位小数。-q命令行选项可以不显示bash计算器
长的欢迎信息。
除了普通数字，bash计算器还能支持变量。
$ be -9
var1=10
var1  4
40
5 /[zeA = Zxe△
print var2
2
变量一旦被定义，你就可以在整个bash计算器会话中使用该变量了。print语句允许你打印
变量和数字。
2.在脚本中使用bc
现在你可能想问bash计算器是如何在shell脚本中帮助处理浮点运算的。还记得命令替换吗？
是的，可以用命令替换运行bc命令，并将输出赋给一个变量。基本格式如下：
variable=$ (echo*optionsexpression*1bc)
第一部分options允许你设置变量。如果你需要不止一个变量，可以用分号将其分开。
expression参数定义了通过be执行的数学表达式。这里有个在脚本中这么做的例子。
$ cat test9
var1=$(echo *scale=4; 3,44 / 5* 1 bc)
+1 /bin/bash
echo The answer is Svar1
---
## Page 242
11.7执行数学运算
227
这个例子将scale变量设置成了四位小数，并在expression部分指定了特定的运算。运行
这个脚本会产生如下输出。
$ chmod u+x test9
0889 ' 21 32ue a
$./test9
太好了！现在你不会再只能用数字作为表达式值了。也可以用shel脚本中定义好的变量。
$ cat test10
 1/bin./ba.sh
var1=100
var2=45
var3=S (echo*scale=4)$var1 / $var2* 1 bc)
echo The ansver for this is $var3
脚本定义了两个变量，它们都可以用在expression部分，然后发送给bc命令。别忘了用关
元符表示的是变量的值而不是变量自身。这个脚本的输出如下。
$  /test10
The ansver for this is 2.2222
当然，一旦变量被赋值，那个变量也可以用于其他运算。
1/bin/bash
$ cat test11
var1=20
var3=S (echo *scale=4)$var1 *$var1* 1 bc)
var2=3 .14159
var4=$(echo *scale=4; $var3 * $var2* 1 bc)
echo The final result is Svar4
这个方法适用于较短的运算，但有时你会涉及更多的数字。如果需要进行大量运算，在一个
命令行中列出多个表达式就会有点麻烦。
有一个方法可以解决这个问题。bc命令能识别输人重定向，允许你将一个文件重定向到bc
命令来处理。但这同样会叫人头疼，因为你还得将表达式存放到文件中。
最好的办法是使用内联输人重定向，它允许你直接在命令行中重定向数据。在shell脚本中，
1
你可以将输出赋给一个变量。
variable=$ (bc << BOF
statements
options
EOF
expression.s
EOF文本字符串标识了内联重定向数据的起止。记住，仍然需要命令替换符号将bc命令的输
出赋给变量。
---
## Page 243
228
第11章构建基本脚本
现在可以将所有bash计算器涉及的部分都放到同一个脚本文件的不同行。下面是在脚本中使
用这种技术的例子。
$ cat test12
+1 /bin/bash
var1=10, 46
var2=43, 67
var3=33. 2
var4=71
var5=$ (bc << EOF
a1 = ( $var1 * $var2)
scale = 4