BB,Sim,A(λ) = 1] = Pr[ExpIND,0,j+1
1
13
5 Pseudorandom Signatures
Although indistinguishability is already a strong privacy notion it still has one important limitation: The
simulator Sim used to deﬁne the IND property depends on the signature scheme S; in particular, it simulates
signatures using public parameters of S. Although both the signer and the message are successfully hidden in
IND signatures, the very scheme that was used to create a given signature might not be, e.g. IND signatures
may have characteristic lengths or follow speciﬁc formats, like element representation of the components
of Schnorr signatures, and so on. In practice, usage of some S in an application or network protocol can
be prescribed via standards. However, instantiations with concrete parameters (e.g. prime modulus p in a
Schnorr group G ⊆ Z×
p ) is often left unspeciﬁed. Diﬀerent parameter choices may introduce a unique pattern
that can be (mis)used to distinguish among the signing algorithms and by this obtain more information
about signers and about the context in which the signatures were produced.
We address this limitation in Deﬁnition 7 with the property of pseudorandomness, where we require that
signatures output by S are indistinguishable from randomly chosen binary strings of length L(λ) = LS(λ).
This simpler deﬁnition is suﬃcient to obtain pseudorandom signatures of some ﬁxed length L∗, viewed as a
global upper bound on the individual lengths LS(λ) for all signature schemes S in the system, using a simple
padding with random bits. That is, all signatures in the system would be L∗ bits long and look completely
random, no matter how they were produced. It would hence become impossible, for some given signature σ
to derive any information about the scheme S that was used to generate it. This seems to be the highest
level of privacy that can be oﬀered by a signature scheme.
Deﬁnition 7 (Pseudorandom Signatures). A signature scheme S is pseudorandom (PR), possibly with
full key exposure (PR-FKE), if there is a polynomially bounded function L(λ) such that for all PPT adversaries
A = (A1,A2) the advantage function
(cid:104)
(cid:12)(cid:12)(cid:12)Pr
(cid:105) − Pr
(cid:104)
(cid:105)(cid:12)(cid:12)(cid:12)
AdvPR[-FKE]
S,A
(λ) :=
ExpPR[-FKE],0
S,A
(λ) = 1
ExpPR[-FKE],1
S,A
(λ) = 1
(λ), b ∈ {0, 1}, are the pseudorandomness experiments from Figure 5,
is negligible in λ, where ExpPR[-FKE],b
and where the following high entropy constraint holds: The function µ(λ) = maxM∈{0,1}∗ Pr[M ∈ m :
(m, t) ← A1] is negligible in λ, assuming that A1 is provided with all admissible inputs and oracles as speciﬁed
in the respective pseudorandomness experiment. The minimum entropy of A is then given by − log2 µ(λ).
S,A
ExpPR,b
(pk)
1
S,A (λ) :
(sk, pk) ← KGen(1λ)
(m, t) ← ASign(sk,·)
σ0 ← Sign(sk, m)
σ1 ∈R {0, 1}L(λ)×|m|
(cid:48) ← ASign(sk,·)
(pk, σb)
t
if t
(cid:48)
2
= t then output 1, else output 0
ExpPR-FKE,b
(λ) :
S,A
(sk, pk) ← KGen(1λ)
(m, t) ← A1(sk, pk)
σ0 ← Sign(sk, m)
σ1 ∈R {0, 1}L(λ)×|m|
(cid:48) ← A2(sk, pk, σb)
t
if t
(cid:48)
= t then output 1, else output 0
Fig. 5. Pseudorandomness Experiments (without and with Full Key Exposure).11
Pseudorandomness is as a special case of indistinguishability, where simulator Sim draws at random from
{0, 1}L(λ). However, PR is strictly stronger than IND, i.e. Lemmas 10 and 11 settle the PR notion at the top
of the privacy hierarchy:
11 We denote by σ ∈R {0, 1}L×|m| the process of picking |m| strings independently at random from {0, 1}L. We
comprehend L(λ) as the ﬁxed length of signatures conforming to security level λ.
14
(cid:104)
(cid:12)(cid:12)(cid:12)Pr
(cid:105) − Pr
(cid:104)
(cid:105)(cid:12)(cid:12)(cid:12) =(cid:12)(cid:12)1 − 1
2
(cid:12)(cid:12) = 1
2 .
Lemma 10 (PR ⇒ IND, PR-FKE ⇒ IND-FKE). Every pseudorandom signature scheme is indistinguishable.
The same implication holds with full key exposure.
Proof. The lemma follows directly from Deﬁnitions 6 and 7 by choosing the simulator Sim that draws
signatures at random from {0, 1}L(λ) in the indistinguishability experiment.
Lemma 11 (IND[-FKE] (cid:54)⇒ PR).
essarily pseudorandom.
Indistinguishable signature schemes (with full key exposure) are not nec-
Proof. Let S be an indistinguishable signature scheme, with simulator Sim. We construct an indistinguishable
but not pseudorandom signature scheme S(cid:48) from S as follows.
(cid:48)
(1λ) :
(sk, m) :
Output (sk, pk) ← KGen(1λ).
σ ← Sign(sk, m). Output σ(cid:48) := σ(cid:107) 1.
(pk, m, σ(cid:48)) : Parse σ(cid:48) as σ(cid:107) b. Return 1 iﬀ(cid:0)Ver(pk, m, σ) = 1 ∧ b = 1(cid:1).
KGen
(cid:48)
Sign
(cid:48)
Ver
Scheme S(cid:48) is not pseudorandom: Deﬁne A1 to pick single random messages m ∈R {0, 1}λ, and output (m, 1),
where m = (m). Let A2, on input σ = (σ), output the last bit of σ. We compute A’s advantage as follows:
AdvPR
S(cid:48),A(λ) =
ExpPR,0
S(cid:48),A(λ) = 1
ExpPR,1
S(cid:48),A(λ) = 1
(1λ) is given by Sim(1λ)(cid:107) 1. It is straight-
(cid:48)
However, S(cid:48) is still indistinguishable: An appropriate simulator Sim
forward to show that any successful indistinguishability adversary for S(cid:48) can be turned into a successful
(cid:117)(cid:116)
adversary against S.
5.1 Two Pseudorandomness Compilers
We present two compilers for pseudorandomness of digital signatures. Our ﬁrst compiler assumes that the
underlying scheme is indistinguishable (with some additional constraints), while our second compiler oﬀers
pseudorandomness for arbitrary (unforgeable) signature schemes. Both transformations work without random
oracles.
IND-to-PR Compiler: From Indistinguishability to Pseudorandomness. Our IND-to-PR compiler
converts any indistinguishable signature scheme into a pseudorandom one. This is done by considering the
diﬀerent elements that form the signature component-wise (e.g., in case of Schnorr signatures, the elements
c ∈ Zq and s ∈ Zq), and encoding them as binary strings via appropriate admissible encodings. Resulting
strings are concatenated to obtain the pseudorandom signature. The concept of admissible encodings was
created for the main purpose of hashing into elliptic curves in the IBE scheme of Boneh and Franklin [6].
Their deﬁnition was later generalized to arbitrary sets by Brier et al. [8], and used recently in the construction
of a privacy-preserving authentication protocol by Bringer, Chabanne and Icart [9].
Deﬁnition 8 (Admissible Encoding [8]). Let S, R denote ﬁnite sets with |S| > |R|. A function F : S →
R is called -admissible encoding for (S, R) if it satisﬁes the following properties:
1. Computable: F is computable in deterministic polynomial time.
2. Invertible: There exists a PPT algorithm IF such that IF (r) ∈ F −1(r) ∪ {⊥} for all r ∈ R, and for r
uniformly distributed in R the distribution of IF (r) is -statistically indistinguishable from the uniform
distribution in S.
If  is a negligible function of the security parameter then F is called an admissible encoding.
Intuitively, an admissible encoding F : S → R shifts the process of picking elements uniformly at random
in S to the process of picking elements uniformly at random in R, and vice versa. Not surprisingly, the
following aggregation lemma holds.
15
Then F : S → R; (s1, . . . , sn) (cid:55)→ (F1(s1), . . . , Fn(sn)) is an -admissible encoding, for  =(cid:80)n
Lemma 12 (Aggregation of Admissible Encodings). Let S = S1×. . .×Sn and R = R1×. . .×Rn denote
Cartesian products of ﬁnite sets. For each 1 ≤ i ≤ n, let Fi : Si → Ri denote an i-admissible encoding.
(cid:117)(cid:116)
In our compiler, we will use admissible encodings F : S → R, where S = {0, 1}L(λ) and R is the ‘signature
space’ of the scheme. Note that w. l. o. g. it would even suﬃce to have S = {0, 1}(cid:96) for (cid:96) < L(λ) as we can
always pad12 with L(λ) − (cid:96) random bits at the end in IF , and ignore the last L(λ) − (cid:96) bits when evaluating
F . Thus, if σ is indistinguishable then σ(cid:48) := IF (σ) ∈ {0, 1}L(λ) is pseudorandom. This admissible encoding-
based compiler works as follows, where the input signature scheme S is assumed to be indistinguishable with
a regular simulator and (F,IF ) denotes an appropriate admissible encoding that maps strings in {0, 1}L(λ)
into the signature space.
i=1 i.
AEC.KGen(1λ) :
AEC.Sign(sk, m) :
AEC.Ver(pk, m, σ(cid:48)) : Let σ ← F (σ(cid:48)). Output S.Ver(pk, m, σ).
Output (sk, pk) ← S.KGen(1λ).
Let σ ← S.Sign(sk, m). Output σ(cid:48) ← IF (σ).
The pseudorandomness of the resulting scheme AEC is proven in Theorem 1. This proof requires the
following notion of regular simulators that can be found in our proofs of IND signature schemes from Section
4.1 and exist for many other schemes.
Deﬁnition 9 (Regular Simulators). A simulator Sim in the indistinguishability experiment (cf. Figure 4)
is called regular if it samples uniformly at random from the ‘signature space’ S(λ), i.e. the range of the Sign
algorithm. That is, for regular simulators Sim, running σ∗ ← Sim(1λ, (cid:96)) and σ∗ ∈R S(λ)(cid:96) are identical.
Theorem 1. If S is an indistinguishable signature scheme with a regular simulator Sim and F is an -
admissible encoding that maps {0, 1}L(λ) into the signature space of S then the AEC signature scheme, ob-
tained via IND-to-PR compiler, is pseudorandom.
Proof. Let A = (A1,A2) be any pseudorandomness adversary against AEC signature scheme. Denote by
AEC,A(λ), except that the signatures in σ∗ are not computed individually
Exp the experiment that is like ExpPR,0
as σ := IF (S.Sign(sk, m)), but as σ∗ := IF (Sim(1λ,|m|)), where IF is executed component-wise. As S is
indistinguishable by assumption, we know that
now experiment Expj, which is like Exp except that the ﬁrst j values in σ∗ are randomly picked strings
in {0, 1}L(λ), i.e. Exp = Exp0 and ExpPR,1
AEC,A(λ) = Exp(cid:96) for some (cid:96) polynomially bounded by λ. As Sim is
regular, the distribution of IF (Sim(1λ, 1)) is -close to the uniform distribution over {0, 1}L(λ). That is, we
AEC,A(λ) =
(cid:12)(cid:12)(cid:12) is negligible. Consider
(cid:12)(cid:12)(cid:12)Pr
(cid:105)(cid:12)(cid:12)(cid:12) is negligible. Note that AEC preserves the unforgeability of
proved that(cid:12)(cid:12)Pr(cid:2)Expj = 1(cid:3)− Pr(cid:2)Expj+1 = 1(cid:3)(cid:12)(cid:12) ≤  is negligible for all j. All in all, we showed AdvPR
(cid:12)(cid:12)(cid:12)Pr
(cid:104)
(cid:105) − Pr [Exp = 1]
(cid:105) − Pr
ExpPR,0
AEC,A(λ) = 1
ExpPR,1
AEC,A(λ) = 1
(cid:104)
ExpPR,0
AEC,A(λ) = 1
(cid:104)
scheme S.
(cid:117)(cid:116)
As shown above, general transformation of indistinguishable signatures into pseudorandom becomes
straightforward — once appropriate admissible encodings are identiﬁed. If signatures are formed by tu-
ples of elements of certain sets then by the aggregation lemma it will suﬃce to identify encodings for these
particular sets. Lemma 13 shows existence of admissible encodings for a variety of algebraic sets that are often
used in practical cryptography, including sets behind the indistinguishable versions of FDH-RSA, Schnorr,
and Boneh-Boyen schemes from Section 4.1.
Lemma 13 (Sets with Admissible Encodings). For the following sets R there exist polynomials (cid:96)(λ)
and admissible encodings F : {0, 1}(cid:96)(λ) → R:
(1) Ranges R = {0, . . . , N − 1} = ZN of natural numbers, for arbitrary N ∈ N.
12 Such pad/ignore steps can also be seen as the aggregation of F with the canonical admissible encoding for
{0, 1}L(λ)−(cid:96) → {0, 1}0 (where {0, 1}0 denotes the language that contains only the empty word).
16
p of prime order q.
(2) The set of quadratic residues modulo safe primes p, i.e. R = QR(p) ⊆ Z×