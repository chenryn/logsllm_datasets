本文由红日安全成员 **l1nk3r** 编写，如有不当之处，敬请指正。

## 前言
大家好，我们是红日安全-代码审计小组。近期，我们小组正在进行一个PHP代码审计项目，旨在为大家提供学习和交流的机会。该项目命名为 [**PHP-Audit-Labs**](https://github.com/hongriSec/PHP-Audit-Labs)。目前发布的系列文章属于项目的第一阶段内容，题目均来自 [PHP SECURITY CALENDAR 2017](https://www.ripstech.com/php-security-calendar-2017/)。每篇文章中，我们将对每个题目进行详细分析，并结合实际CMS进行解说。此外，在文章末尾，我们会提供一道CTF题目供读者练习。希望大家喜欢。以下是第5篇代码审计文章：

## Day 5 - Postcard

### 题目概述
题目名称为“明信片”，涉及的代码如下：

```php
// 代码示例
```

### 漏洞解析
本题主要考察由PHP内置函数 `mail` 引发的命令执行漏洞。首先，我们来了解一下 `mail` 函数的基本用法：

```php
bool mail(
    string $to,
    string $subject,
    string $message,
    string $additional_headers = null,
    string $additional_parameters = null
)
```

参数含义：
- `$to`：指定邮件接收者。
- `$subject`：邮件主题。
- `$message`：邮件正文。
- `$additional_headers`：额外的邮件头部信息（如发送者、抄送等）。
- `$additional_parameters`：传递给 `sendmail` 程序的额外参数。

在Linux系统上，`mail` 函数默认调用 `sendmail` 程序发送邮件。`sendmail` 支持的主要选项包括：
- `-O option=value`：设置队列目录。
- `-X logfile`：记录发送邮件的日志。
- `-f from email`：指定发件人邮箱地址。

例如，使用 `-X` 参数指定日志文件，最终会在 `/var/www/html/rce.php` 中写入如下数据：

```plaintext
17220
17220
```

接下来，我们来看如何绕过 `filter_var` 和 `escapeshellcmd` 的检测，实现远程代码执行。

#### 绕过 `filter_var` 检测
`filter_var` 函数用于过滤变量，其定义如下：

```php
mixed filter_var(mixed $variable, int $filter = FILTER_DEFAULT, mixed $options = null)
```

对于 `FILTER_VALIDATE_EMAIL` 选项，虽然可以过滤一些特殊字符，但通过嵌套转义空格和重叠引号的方式，仍可绕过检测。例如：

```php
$email = '"a"@example.com';
if (filter_var($email, FILTER_VALIDATE_EMAIL)) {
    // 绕过检测
}
```

#### 绕过 `escapeshellcmd` 检测
`mail` 函数在底层调用了 `escapeshellcmd` 对用户输入进行处理。即使绕过了 `filter_var`，`escapeshellcmd` 也会对特殊字符进行转义。但是，如果结合 `escapeshellarg` 使用，可以通过特殊字符逃逸实现命令注入。例如：

```php
$email = "127.0.0.1' -v -d a=1";
$escaped_email = escapeshellarg($email);
$command = "curl " . escapeshellcmd($escaped_email);
// 最终命令为：curl '127.0.0.1'\'' -v -d a=1\'
```

通过这种方式，可以实现远程代码执行。

### 实例分析
以 **PHPMailer 命令执行漏洞**（CVE-2016-10045 和 CVE-2016-10033）为例进行分析。项目代码可以通过以下方式下载：

```bash
git clone https://github.com/PHPMailer/PHPMailer
cd PHPMailer
git checkout -b CVE-2016-10033 v5.2.17
```

通过以上步骤，您可以获取到存在漏洞的代码版本，进一步研究和测试。

希望这篇文章对您有所帮助，欢迎继续关注我们的后续内容。