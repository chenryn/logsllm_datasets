# Table of Contents

## Chapter 5: Sandboxing
- **Understanding the Sandbox** (Page 108)
- **Sandboxing Your Apps** (Page 109)
- **Understanding the Sandbox Implementation** (Page 116)
- **Understanding User Space Library Implementation** (Page 117)
- **Into the Kernel** (Page 121)
  - **Implementing TrustedBSD** (Page 121)
  - **Handling Configuration from User Space** (Page 123)
  - **Policy Enforcement** (Page 125)
  - **How Profile Bytecode Works** (Page 126)
- **Impact on App Store vs. Platform Applications** (Page 133)
- **Summary** (Page 137)

## Chapter 6: Fuzzing iOS Applications
- **Introduction to Fuzzing** (Page 139)
- **The Recipe for Fuzzing**
  - **Mutation-Based (“Dumb”) Fuzzing** (Page 141)
  - **Generation-Based (“Smart”) Fuzzing** (Page 142)
- **Submitting and Monitoring Test Cases** (Page 143)
- **Fuzzing Safari**
  - **Choosing an Interface** (Page 144)
  - **Generating Test Cases** (Page 144)
  - **Testing and Monitoring the Application** (Page 145)
- **Adventures in PDF Fuzzing** (Page 148)
- **Quick Look Fuzzing** (Page 153)
- **Fuzzing with the Simulator** (Page 155)
- **Fuzzing MobileSafari**
  - **Selecting the Interface to Fuzz** (Page 158)
  - **Generating the Test Case** (Page 158)
  - **Fuzzing and Monitoring MobileSafari** (Page 158)
- **PPT Fuzzing Fun** (Page 160)
- **SMS Fuzzing**
  - **SMS Basics** (Page 163)
  - **Focusing on the Protocol Data Unit Mode** (Page 165)
  - **Using PDUspy** (Page 167)
  - **Using User Data Header Information** (Page 167)
  - **Working with Concatenated Messages** (Page 168)
  - **Using Other Types of UDH Data** (Page 169)
  - **Generation-Based Fuzzing with Sulley** (Page 170)
  - **SMS iOS Injection** (Page 175)
  - **Monitoring SMS** (Page 177)
  - **SMS Bugs** (Page 182)
- **Summary** (Page 184)

## Chapter 7: Exploitation
- **Exploiting Bug Classes** (Page 186)
  - **Object Lifetime Vulnerabilities** (Page 186)
    - **Understanding the iOS System Allocator** (Page 188)
      - **Regions** (Page 188)
      - **Allocation** (Page 189)
      - **Deallocation** (Page 189)
    - **Taming the iOS Allocator** (Page 190)
      - **Tools of the Trade** (Page 190)
      - **Learning Alloc/Dealloc Basics** (Page 191)
    - **Exploiting Arithmetic Vulnerabilities** (Page 195)
    - **Exploiting Object Lifetime Issues** (Page 198)
  - **Understanding TCMalloc** (Page 200)
    - **Large Object Allocation and Deallocation** (Page 201)
    - **Small Object Allocation** (Page 201)
    - **Small Object Deallocation** (Page 202)
    - **Taming TCMalloc** (Page 202)
      - **Obtaining a Predictable Heap Layout** (Page 202)
      - **Tools for Debugging Heap Manipulation Code** (Page 204)
      - **Exploiting Arithmetic Vulnerabilities with TCMalloc – Heap Feng Shui** (Page 206)
      - **Exploiting Object Lifetime Issues with TCMalloc** (Page 211)
  - **ASLR Challenges** (Page 211)
  - **Case Study: Pwn2Own 2010** (Page 213)
  - **Testing Infrastructure** (Page 217)
- **Summary** (Page 218)

## Chapter 8: Return-Oriented Programming (ROP)
- **ARM Basics** (Page 220)
- **iOS Calling Convention** (Page 220)
- **System Calls Calling Convention** (Page 221)
- **Introduction to ROP** (Page 222)
- **ROP and Heap Bugs** (Page 224)
- **Manually Constructing a ROP Payload** (Page 225)
- **Automating ROP Payload Construction** (Page 230)
- **What Can You Do with ROP on iOS?** (Page 232)
- **Testing ROP Payloads** (Page 232)
- **Examples of ROP Shellcode on iOS** (Page 235)
  - **Exfiltrate File Content Payload** (Page 235)
  - **Using ROP to Chain Two Exploits (JailBreakMe v3)** (Page 242)
- **Summary** (Page 247)

## Chapter 9: Kernel Debugging and Exploitation
- **Kernel Structure** (Page 249)
- **Kernel Debugging** (Page 250)
- **Kernel Extensions and IOKit Drivers** (Page 256)
- **Reversing the IOKit Driver Object Tree** (Page 257)
- **Finding Vulnerabilities in Kernel Extensions** (Page 261)
- **Finding Vulnerabilities in IOKit Drivers** (Page 264)
- **Attacking through Device Properties** (Page 265)
- **Attacking through External Traps and Methods** (Page 266)
- **Kernel Exploitation** (Page 269)
  - **Arbitrary Memory Overwrite** (Page 269)
  - **Patching a Vulnerability into the Kernel** (Page 270)
  - **Choosing a Target to Overwrite** (Page 271)
  - **Locating the System Call Table** (Page 272)
  - **Constructing the Exploit** (Page 273)
  - **Uninitialized Kernel Variables** (Page 274)
  - **Kernel Stack Buffer Overflows** (Page 279)
  - **Kernel Heap Buffer Overflows** (Page 285)
  - **Kernel Heap Zone Allocator** (Page 286)
  - **Kernel Heap Feng Shui** (Page 291)
  - **Detecting the State of the Kernel Heap** (Page 293)
  - **Exploiting the Kernel Heap Buffer Overflow** (Page 294)
- **Summary** (Page 296)

## Chapter 10: Jailbreaking
- **Why Jailbreak?** (Page 298)
- **Jailbreak Types** (Page 298)
- **Jailbreak Persistence** (Page 299)
  - **Tethered Jailbreaks** (Page 299)
  - **Untethered Jailbreaks** (Page 299)
- **Exploit Type** (Page 300)
  - **Bootrom Level** (Page 300)
  - **iBoot Level** (Page 300)
  - **Userland Level** (Page 301)
- **Understanding the Jailbreaking Process** (Page 301)
  - **Exploiting the Bootrom** (Page 302)
  - **Booting the Ramdisk** (Page 303)
  - **Jailbreaking the Filesystem** (Page 303)
  - **Installing the Untethering Exploit** (Page 304)
  - **Installing the AFC2 Service** (Page 305)
  - **Installing Base Utilities** (Page 306)
  - **Application Stashing** (Page 307)
  - **Bundle Installation** (Page 307)
  - **Post-Installation Process** (Page 309)
  - **Executing Kernel Payloads and Patches** (Page 309)
  - **Kernel State Reparation** (Page 309)
  - **Privilege Escalation** (Page 310)
  - **Kernel Patching** (Page 312)
    - **security.mac.proc_enforce** (Page 312)
    - **cs_enforcement_disable (kernel)** (Page 313)
    - **cs_enforcement_disable (AMFI)** (Page 314)
    - **PE_i_can_has_debugger** (Page 315)
    - **vm_map_enter** (Page 316)
    - **vm_map_protect** (Page 318)
    - **AMFI Binary Trust Cache** (Page 319)
    - **Task_for_pid 0** (Page 320)
    - **Sandbox Patches** (Page 322)
    - **Clearing the Caches** (Page 324)
    - **Clean Return** (Page 324)
- **Summary** (Page 325)

## Chapter 11: Baseband Attacks
- **GSM Basics** (Page 329)
- **Setting up OpenBTS** (Page 331)
  - **Hardware Required** (Page 331)
  - **OpenBTS Installation and Configuration** (Page 332)
  - **Closed Configuration and Asterisk Dialing Rules** (Page 335)
- **RTOSes Underneath the Stacks** (Page 335)
  - **Nucleus PLUS** (Page 336)
  - **ThreadX** (Page 337)
  - **REX/OKL4/Iguana** (Page 337)
- **Heap Implementations** (Page 338)
  - **Dynamic Memory in Nucleus PLUS** (Page 338)
  - **Byte Pools in ThreadX** (Page 340)
  - **The Qualcomm Modem Heap** (Page 341)
- **Vulnerability Analysis** (Page 342)
  - **Obtaining and Extracting Baseband Firmware** (Page 343)
  - **Loading Firmware Images into IDA Pro** (Page 344)
  - **Application/Baseband Processor Interface** (Page 345)
  - **Stack Traces and Baseband Core Dumps** (Page 345)
  - **Attack Surface** (Page 346)
  - **Static Analysis on Binary Code Like it’s 1999** (Page 347)
  - **Specification-Guided Fuzz Testing** (Page 348)
- **Exploiting the Baseband** (Page 348)
  - **A Local Stack Buffer Overflow: AT+XAPP** (Page 348)
  - **The ultrasn0w Unlock** (Page 350)
  - **An Overflow Exploitable Over the Air** (Page 356)
- **Summary** (Page 362)

## Appendix: References (Page 365)
## Index (Page 369)

---

# Introduction

Five years after its introduction, it is easy to forget exactly how revolutionary the iPhone was. At that time, there were no smartphones as we know them today. There were phones that made phone calls, and some phones that had web browsers, but these browsers were not full-featured. They could render only the most basic of web pages and even then only at very low resolutions. The iPhone changed the game.

Here was a device that was almost entirely screen, had a WebKit-based web browser, and an operating system that you could upgrade yourself without waiting for your carrier to do it for you. Combined with the capability to store photos, play music, and send text messages, it was something people really wanted to have (see Figure 1). At the same time, the iPhone wasn’t perfect. The original iPhone had very slow data speeds, no support for third-party applications, and minimal security, but it was mostly responsible for the smartphone and tablet revolution.

Since the original iPhone came out in 2007, a series of other Apple devices have come along, all now running iOS. Of course, back when the original iPhone and some other devices came out, the operating system wasn’t called iOS. The original iPhone was identified by Apple as OS X, like its desktop brother, and when the second iPhone came out in 2008, it was called iPhone OS. It couldn’t be called iOS back then because IOS was what Cisco called its operating system, which was designed for routers. Some money exchanged hands, and Apple began calling its operating system iOS in 2010.

After the iPhone, the next iOS device was the iPod touch. This device was basically an iPhone without the hardware to make phone calls or send text messages. Other iOS devices include the second-generation Apple TV and the iPad. Each newer version of these devices provided faster, sleeker products with more features (see Figure 2).

### Overview of the Book

However, while these devices were beautiful on the outside, there was little known about how they worked on the inside. In particular, how secure were these little devices that millions of people were carrying around filled with their personal information? The information about how the security of iOS devices operated was scattered in various talks given at security conferences, within the jailbreak community, and in individual researchers’ personal journals. This book is intended to bring all this knowledge about iOS internals to one central location. Making this information accessible to everyone allows people and enterprises to assess the risk of using these devices and how best to mitigate this risk. It might even provide ideas on how to make the device safer and more secure to use.

### How This Book Is Organized

This book is split into functional subjects of iOS security. It can be read in a couple of ways. For someone relatively new to the subject or for a reader who doesn’t want to miss anything, it can be read from beginning to end. The book is organized with the more basic and fundamental chapters at the beginning and the more complex, esoteric chapters near the end. Alternatively, readers who already have some knowledge of iOS internals can skip ahead and read whatever chapters they find interesting. Each chapter is mostly independent of other chapters. When topics from other chapters come up, they are pointed out for reference. The following is a list of chapters and a brief description of the contents of each chapter.

- **Chapter 1:** The first chapter contains an overview of iOS devices and the iOS security architecture. It introduces most of the topics that are covered in the rest of the book. It concludes by discussing some attacks that have occurred against various versions of iOS, covering some of the earliest attacks to those that have occurred against the security architecture in place in iOS 5.
- **Chapter 2:** This chapter covers the way iOS is used in the enterprise. It addresses topics such as enterprise management and provisioning. It also dives into how applications are developed for enterprise devices, including how the developer certificates and provisioning profiles work.
- **Chapter 3:** The third chapter contains information related to how iOS handles encrypting sensitive data. It outlines how encryption keys are derived for each iOS device as well as how they are used. It addresses the different levels of encryption as well as which files fall under each. It discusses how developers can use the Data Protection API to protect sensitive data in their apps. Finally, it demonstrates how it is possible to break passcodes through brute force and how ineffective numeric 4-digit passcodes really are.
- **Chapter 4:** This chapter dives into one of the primary security mechanisms of iOS, code signing. It walks the reader through a tour of the relevant source code and reverse-engineered binaries responsible for ensuring only code signed by a trusted party can run on the device. It highlights a relatively new addition to iOS code signing that allows for unsigned code to run in a very select, carefully controlled manner in order to allow just-in-time-compiling. It concludes by describing a flaw in the code-signing mechanisms that was present for early versions of iOS 5.
- **Chapter 5:** This chapter moves into the mechanisms involved in sandboxing in iOS. It shows how the iOS kernel allows for hooks to be placed at critical locations and discusses the hooks used specifically for sandboxing. It then demonstrates how applications can do their own sandboxing using examples and then how important iOS functions perform their sandboxing. Finally, it discusses sandbox profiles, how they describe the functions allowed by the sandbox, and how to extract them from iOS binaries for examination.
- **Chapter 6:** This chapter shows how to find vulnerabilities in default iOS applications using the technique known as fuzzing. It starts with a general discussion of fuzzing followed by demonstrating how to fuzz the biggest attack surface in iOS, MobileSafari. It highlights the different ways iOS fuzzing can be performed, including fuzzing in macOS, in the iOS simulator, and on the device itself. It concludes by showing how to fuzz something you won’t find on a desktop computer, the SMS parser.
- **Chapter 7:** This chapter shows how to take the vulnerabilities found using the techniques of Chapter 6 and turn them into functioning exploits. It includes a detailed look into the iOS heap management system and how an exploit writer can manipulate it using the method of heap feng shui. It then discusses one of the major obstacles of exploit development: Address Space Layout Randomization (ASLR).
- **Chapter 8:** This chapter takes it one step further and shows what you can do once you get control of a process. After a quick introduction to ARM basics and the iOS calling convention, it delves into return-oriented programming (ROP) and how it can be used to construct payloads for heap bugs. It provides examples of ROP shellcode on iOS and demonstrates how to test and use ROP payloads.
- **Chapter 9:** This chapter focuses on kernel debugging and exploitation. It covers the structure of the iOS kernel, kernel debugging techniques, and the intricacies of kernel extensions and IOKit drivers. It also explores methods for finding and exploiting vulnerabilities in the kernel, including arbitrary memory overwrites, uninitialized variables, and buffer overflows.
- **Chapter 10:** This chapter delves into the world of jailbreaking, explaining why people jailbreak, the different types of jailbreaks, and the persistence of jailbreaks. It covers the various levels of exploits, from bootrom to userland, and provides a detailed walkthrough of the jailbreaking process, including the installation of base utilities and kernel patches.
- **Chapter 11:** This chapter explores baseband attacks, starting with the basics of GSM and setting up OpenBTS. It discusses the real-time operating systems (RTOSes) used in basebands, heap implementations, and vulnerability analysis. It also covers the process of obtaining and extracting baseband firmware, loading firmware images into IDA Pro, and exploiting the baseband, including local stack buffer overflows and over-the-air exploits.