and
ConvertShares𝑛,𝑡, it follows that 𝑎 𝑗 ≥ 𝑘 and 𝑎 𝑗 =𝑖∈{2,··· ,𝑛} 𝑓𝑖 𝑗.
𝑒 ∈ 𝑌 implies 𝑐 𝑗 = 1. Further, by correctness of F 𝑝,𝑘,𝑛,𝑡
w-CMP
and F F𝑝
B2A
Now, for every 𝑖 ∈ {2, · · · , 𝑛}, by correctness of F F𝑝
by correctness of F 𝜎
B2A
EQ
𝑓𝑖 𝑗 = 𝑒𝑞𝑖 𝑗 and
, 𝑒𝑞𝑖 𝑗 equals 1 if 𝑦𝑖 𝑗 = 𝑤𝑖 𝑗 and 0 otherwise.
, F 𝜎
EQ
𝑖∈{2,··· ,𝑛} 𝑓𝑖 𝑗 = 𝑎 𝑗 ≥ 𝑘 and for all 𝑖 ∈ {2, · · · , 𝑛}, 𝑒𝑞𝑖 𝑗 ∈ {0, 1} we
Let E = {𝑖 ∈ {2, · · · , 𝑛} : 𝑒 ∈ 𝑋𝑖}, the set of indices of parties
(other than 𝑃1) who possess 𝑒 in their private sets. Let E′ = {𝑖 ∈
{2, · · · , 𝑛} : 𝑒𝑞𝑖 𝑗 = 1}, the set of indices of parties (other than 𝑃1)
whom the protocol interprets to have possession of 𝑒. We now show
that false positive (𝑌 ⊈ 𝑌∗) implies that E′\E is non-empty and
finally prove that the later event occurs with low probability. Since
have |E′| ≥ 𝑘. Consider the following disjoint cases.
• Case 1: 𝑒 ∉ 𝑋1. By the construction of Table1, this implies that
𝑒 is a dummy element inserted by 𝑃1. Then, |E| = 0 since real
elements are distinct from 𝑒. Therefore, E′\E is non-empty.
Further, since any dummy elements inserted by parties other
than 𝑃1 are distinct from 𝑒, for every 𝑖 ∈ E′\E it holds that
𝑒 ∉ Table𝑖[ 𝑗].
• Case 2: 𝑒 ∈ 𝑋1. Since 𝑒 ∉ 𝑌∗, we have |E|  1 − 2−𝜅 (for
𝜅 = 40) the protocol’s output will be correct.
Session 4C: Private Set Intersection CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1203and F F𝑝
B2A
Remark. To ensure the correctness of Quorum-I (instantiated using
w-CMP1) with probability at least 1 − 2−𝜅, we set the parameter 𝜏
of w-CMP1 to be 𝜅 + ⌈log 𝑚⌉ + 3.
Security. Let 𝐶 ⊂ [𝑛] be the set of corrupted parties (|𝐶| = 𝑡 < 𝑛/2).
We show how to simulate the view of 𝐶 in the ideal world, given the
input sets 𝑋𝐶 = {𝑋 𝑗 : 𝑗 ∈ 𝐶} and the output, 𝑌∗ = {𝑥 ∈ 𝑋1 : 𝑞𝑥 ≥
𝑘}, where, for each 𝑥 ∈ 𝑋1, 𝑞𝑥 = |{𝑖 : 𝑥 ∈ 𝑋𝑖 for 𝑖 ∈ {2, · · · , 𝑛}}|,
when 𝑃1 is corrupt, and no output, otherwise. We consider two
cases based on party 𝑃1 being corrupt or not.
• Case 1 (𝑃1 is honest): The hashing step is local, and can be
executed by the simulator using the inputs of the corrupted
parties. In Step 2, 𝑃1 and 𝑃𝑖 (for each 𝑖 ∈ {2, · · · , 𝑛}) invoke
the F 𝛽,𝜎,𝑁
functionality and the corrupted parties only see the
sender’s views (since 𝑃1 is honest), {𝑤𝑖 𝑗}𝑖∈𝐶,𝑗 ∈[𝛽], which can
wPSM
all be picked at random by the simulator (by the definition of
). In Steps 3 and 4, for each 𝑖 ∈ {2, · · · , 𝑛}, parties 𝑃1
F 𝛽,𝜎,𝑁
wPSM
and 𝑃𝑖 invoke the F 𝜎
functionalities and the cor-
EQ
rupted parties see only one of the two boolean and additive
shares, {⟨𝑒𝑞𝑖 𝑗⟩𝐵
𝑖 }𝑖∈𝐶,𝑗 ∈[𝛽] and {⟨𝑓𝑖 𝑗⟩𝑖}𝑖∈𝐶,𝑗 ∈[𝛽], respectively,
which can be generated as corresponding shares of some ran-
dom bit (by the security of secret sharing). In Step 5, besides
the local computations, the parties invoke the functionalities
ConvertShares𝑛,𝑡 and F 𝑝,𝑘,𝑛,𝑡
. The view of the corrupted par-
w-CMP
ties in this step includes: at most 𝑡 shares of the 𝑎 𝑗, for each
𝑗 ∈ [𝛽]. Here, the simulator can pick shares of some random
values as the 𝑡 shares of the 𝑎 𝑗’s (by the security of secret shar-
ing). Note that, the corrupted parties get no output from the
Fw-CMP
functionality (since 𝑃1 is honest), and also no output
from the protocol.
• Case 2 (𝑃1 is corrupt): The simulation of the hashing step is
exactly the same as in Case 1. In Step 2, 𝑃1 and 𝑃𝑖 (for each 𝑖 ∈
{2, · · · , 𝑛}) invoke the F 𝛽,𝜎,𝑁
functionality and the corrupted
parties see both the receiver’s view {𝑦𝑖 𝑗
: 𝑖 ∈ {2, · · · , 𝑛}, 𝑗 ∈
wPSM
[𝛽]}, and the sender’s views {𝑤𝑖 𝑗}𝑖∈𝐶\{1},𝑗 ∈[𝛽]. For each 𝑖 ∈
𝐶 \ {1}, the simulator picks a random 𝑦𝑖 𝑗 = 𝑤𝑖 𝑗, if Table1[ 𝑗] ∈
Table𝑖[ 𝑗], else picks a random 𝑦𝑖 𝑗 and 𝑤𝑖 𝑗 independently, for
each 𝑗 ∈ [𝛽] (the faithfulness of this step of simulation fol-
lows from the definition of F 𝛽,𝜎,𝑁
and since the simulator
has both Table1 and Table𝑖). In Steps 3 and 4, for each 𝑖 ∈
wPSM
{2, · · · , 𝑛}, parties 𝑃1 and 𝑃𝑖 invoke the F 𝜎
func-
EQ
tionalities and the corrupted parties see both the boolean and
1 , ⟨𝑒𝑞𝑖 𝑗⟩𝐵
additive shares for 𝑖 ∈ 𝐶, {⟨𝑒𝑞𝑖 𝑗⟩𝐵
𝑖 }𝑖∈𝐶\{1},𝑗∈[𝛽] and
{⟨𝑓𝑖 𝑗⟩1, ⟨𝑓𝑖 𝑗⟩𝑖}𝑖∈𝐶\{1},𝑗 ∈[𝛽], and only one of the two shares for
𝑖 ∈ [𝑛] \ 𝐶, {⟨𝑒𝑞𝑖 𝑗⟩𝐵
1 }𝑖∈[𝑛]\𝐶,𝑗 ∈[𝛽] and {⟨𝑓𝑖 𝑗⟩1}𝑖∈[𝑛]\𝐶,𝑗 ∈[𝛽].
For each 𝑖 ∈ 𝐶 \ {1}, the simulator sets 𝑒𝑞𝑖 𝑗 = 𝑓𝑖 𝑗 = 1, if
Table1[ 𝑗] ∈ Table𝑖[ 𝑗] and sets 𝑒𝑞𝑖 𝑗 = 𝑓𝑖 𝑗 = 0, otherwise, for
each 𝑗 ∈ [𝛽]. It then generates the boolean and arithmetic
shares of the 𝑒𝑞𝑖 𝑗’s and 𝑓𝑖 𝑗’s, respectively. For each 𝑖 ∈ [𝑛] \ 𝐶,
the simulator generates both the boolean and additive shares
as shares of some random bit (by the security of secret sharing).
To simulate Steps 5 and 6, the simulator does the following: for
all 𝑗 ∈ [𝛽], give 𝑡 shares of the random values as shares of the
𝑎 𝑗’s (by the security of secret sharing). Finally, for each 𝑗 ∈ [𝛽],
set 𝑐 𝑗 = 1 if Table1[ 𝑗] ∈ 𝑌∗ and set 𝑐 𝑗 = 0, otherwise, and set
the final output as 𝑌∗.
and F F𝑝
B2A
, F F𝑝
B2A
, F 𝜎
EQ
when F 𝑝,𝑘,𝑛,𝑡
w-CMP
F.2 Quorum PSI Complexity
We instantiate the F 𝜎
, ConvertShares𝑛,𝑡 functionalities as
EQ
specified in sections 2.3.1, 2.3.2 and 2.5. We instantiate the F 𝛽,𝜎,𝑁
wPSM
functionality using the polynomial-based batch OPPRF. Let Quorum-
I and Quorum-II denote instantiations of F 𝑛,𝑚,𝑘
is
QPSI
instantiated with w-CMP1 (with 𝜏 = 𝜅 + ⌈log 𝑚⌉ + 3) and w-CMP2
respectively. We first discuss the complexity trade-off between
w-CMP1 and w-CMP2 and then discuss the complexities of Quorum-
I and Quorum-II
F.2.1 Trade-offs between w-CMP1 and w-CMP2. We first discuss
the communication complexity and rounds of both protocols. Mul-
tiparty functionalities in both the protocols are instantiated as re-
ferred in Sec. 2.5. Since these instantiations provide good amortized
complexities, we give amortized costs of both the protocols.
The amortized communication cost of w-CMP1 is at most 14𝑘′(𝑛−
1)(⌈log 𝑛⌉ + 1) + 17𝜏(𝑛 − 1) and the round complexity is 6 + 2𝑘′,
when we set ⌈log 𝑝⌉ = ⌈log 𝑛⌉ + 1 and 𝑘′ = min{𝑘 − 1, 𝑛 − 𝑘}.
While for w-CMP2, the (expected11) communication complexity is
20(𝑛−1)⌈log 2𝑛⌉(𝜅+⌈log 2𝑛⌉)2, when we set ⌈log 𝑝⌉ = 𝜅+⌈log 𝑛⌉+2.
The expected round complexity is 9 + 2⌈log 𝑛⌉.
We now discuss trade-offs between the two comparison pro-
tocols. Complexity of w-CMP2 protocol is independent of 𝑘, in
contrast to w-CMP1 protocol’s dependence on 𝑘. Hence, theoret-
ically, for large values of 𝑘′, the communication complexity and
round complexity of w-CMP2 is better than w-CMP1. However, for
practical setting of 𝑘′ < 𝑛 < 512, the concrete communication of
w-CMP1 is better than that of w-CMP2 for 𝜅 = 40 and 𝜏 = 𝜅 + 23.
For any ⌈log 𝑛⌉ + 2 < 𝑘′, the round complexity of w-CMP2 is better
than that of w-CMP1.
F.2.2 Complexities of Quorum-I and Quorum-II. Our protocol, in
total, calls the F 𝛽,𝜎,𝑁
, ConvertShares𝑛,𝑡 and F 𝑝,𝑘,𝑛,𝑡
w-CMP
wPSM
functionalities (𝑛−1), 𝛽(𝑛−1), 𝛽(𝑛−1), 𝛽 and 𝛽 times respectively,
where 𝛽 = 1.28𝑚. Let 𝑘′ = min{𝑘 − 1, 𝑛 − 𝑘}. Recall that 𝜎 =
𝜅 + ⌈log 𝑚⌉ + ⌈log 𝑛⌉ +2. We first give the costs of the steps common
to Quorum-I and Quorum-II.
• Steps 1-4 cost less than 𝑚(𝑛 − 1)(𝜆𝜎 + 5.8𝜆 + 14𝜎 + 1.28⌈log 𝑝⌉).
• Excluding the cost of F 𝑝,𝑘,𝑛,𝑡
, Step 5 contributes at most 8𝑚(𝑛 −
w-CMP
1)⌈log 𝑝⌉.
The total cost of w-CMP1 executions by Quorum-1 is at most 𝑚(𝑛−
1)(18𝑘′(⌈log 𝑛⌉ + 1) + 22𝜏), where 𝜏 = 𝜅 + ⌈log 𝑚⌉ + 3 . Therefore,
the concrete communication of Quorum-I is at most 𝑚(𝑛 − 1)(𝜆𝜎 +
5.8𝜆 + 14𝜎 + 18𝑘′(⌈log 𝑛⌉ + 1) + 22𝜏 + 10⌈log 𝑛⌉), when we set
⌈log 𝑝⌉ = ⌈log 𝑛⌉ + 1. The round complexity of Quorum-I is at most
10 + ⌈log 𝜎⌉ + 2𝑘′.
The (expected) total cost of w-CMP2 executions by Quorum-
II is at most 26𝑚(𝑛 − 1)(⌈log 𝑛⌉ + 1)(𝜅 + ⌈log 𝑛⌉ + 1)2. Therefore,
(expected) concrete communication of Quorum-II is at most 𝑚(𝑛 −
1)(𝜆𝜎 + 5.8𝜆 + 14𝜎 + 27(⌈log 𝑛⌉ + 1)(𝜅 + ⌈log 𝑛⌉ + 1)2), when we set
𝑝 = 𝜅 + ⌈log 𝑛⌉ + 2. The (expected) round complexity of Quorum-II
is at most 8 + ⌈log 𝜎⌉ + 2⌈log 𝑛⌉.
, F F𝑝
B2A
11One of the underlying sub-protocol uses rejection sampling for randomness that
incurs repeated executions with small probability, namely, 1/𝑝.
Session 4C: Private Set Intersection CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1204