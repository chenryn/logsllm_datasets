mechanisms will allow us to incorporate layers of protection
based on our conﬁdence in the robustness of the various
components and our understanding of how to achieve the
best balance between performance, ﬂexibility and security.
In the next section we hope to demonstrate that secure
implementations of these facilities are possible and that the
speciﬁc choices made in our own implementation work are
sound.
3. Native Client Implementation
3.1. Inner Sandbox
In this section we explain how NaCl implements software
fault isolation. The design is limited to explicit control ﬂow,
C1
C2
C3
C4
C5
C6
C7
indirect control
transfers use a nacljmp pseudo-
Once loaded into the memory, the binary is not writable,
enforced by OS-level protection mechanisms during execu-
tion.
The binary is statically linked at a start address of zero, with
the ﬁrst byte of text at 64K.
All
instruction (deﬁned below).
The binary is padded up to the nearest page with at least
one hlt instruction (0xf4).
The binary contains no instructions or pseudo-instructions
overlapping a 32-byte boundary.
All valid instruction addresses are reachable by a fall-
through disassembly that starts at the load (base) address.
All direct control transfers target valid instructions.
Table 1: Constraints for NaCl binaries.
expressed with calls and jumps in machine code. Other types
of control ﬂow (e.g. exceptions) are managed in the NaCl
service runtime, external to the untrusted code, as described
with the NaCl runtime implementation below.
Our inner sandbox uses a set of rules for reliable dis-
assembly, a modiﬁed compilation tool chain that observes
these rules, and a static analyzer that conﬁrms that the rules
have been followed. This design allows for a small trusted
code base (TCB) [61], with the compilation tools outside
the TCB, and a validator that is small enough to permit
thorough review and testing. Our validator implementation
requires less than 600 C statements (semicolons), including
an x86 decoder and cpuid decoding. This compiles into
about 6000 bytes of executable code (Linux optimized build)
of which about 900 bytes are the cpuid implementation,
1700 bytes the decoder, and 3400 bytes the validator logic.
To eliminate side effects the validator must address four
sub-problems:
• Data integrity: no loads or stores outside of data sand-
box
• Reliable disassembly
• No unsafe instructions
• Control ﬂow integrity
To solve these problems, NaCl builds on previous work on
CISC fault isolation. Our system combines 80386 segmented
memory [14] with previous techniques for CISC software
fault isolation [40]. We use 80386 segments to constrain
data references to a contiguous subrange of the virtual 32-
bit address space. This allows us to effectively implement a
data sandbox without requiring sandboxing of load and store
instructions. VX32 [20], [21] implements its data sandbox
in a similar fashion. Note that NaCl modules are 32-bit x86
executables. The more recent 64-bit executable model is not
supported.
Table 1 lists the constraints Native Client requires of
untrusted binaries. Together, constraints C1 and C6 make
disassembly reliable. With reliable disassembly as a tool,
detection of unsafe instructions is straightforward. A partial
list of opcodes disallowed by Native Client includes:
• syscall and int. Untrusted code cannot invoke the
82
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:17:16 UTC from IEEE Xplore.  Restrictions apply. 
operating system directly.
• all instructions that modify x86 segment state, including
lds, far calls, etc.
• ret. Returns are implemented with a sandboxing se-
quence that ends with an indirect jump.
Apart from facilitating control sandboxing, excluding ret
also prevents a vulnerability due to a race condition if
the return address were checked on the stack. A similar
argument requires that we disallow memory addressing
modes on indirect jmp and call instructions. Native Client
does allow the hlt instruction. It should never be executed
by a correct instruction stream and will cause the module
to be terminated immediately. As a matter of hygiene, we
disallow all other privileged/ring-0 instructions, as they are
never required in a correct user-mode instruction stream.
We also constrain x86 preﬁx usage to only allow known
useful
this
eliminates certain denial-of-service vulnerabilities related to
CPU errata.
instructions. Empirically we have found that
The fourth problem is control ﬂow integrity,
transfers in the program text
insuring
that all control
target an
instruction identiﬁed during disassembly. For each direct
branch, we statically compute the target and conﬁrm it is
a valid instruction as per constraint C6. Our technique for
indirect branches combines 80386 segmented memory with
a simpliﬁed sandboxing sequence. As per constraint C2 and
C4, we use the CS segment to constrain executable text to
a zero-based address range, sized to a multiple of 4K bytes.
With the text range constrained by segmented memory, a
simple constant mask is adequate to ensure that the target
of an indirect branch is aligned mod 32, as per constraints
C3 and C5:
and
jmp
%eax, 0xffffffe0
*%eax
We will refer to this special two instruction sequence as a
nacljmp. Encoded as a three-byte and and a two-byte jmp
it compares favorably to previous implementations of CISC
sandboxing [40], [41], [56]. Without segmented memory or
zero-based text, sandboxed control ﬂow typically requires
two six-byte instructions (an and and an or) for a total of
fourteen bytes.
Considering the pseudo-code in Figure 3, we next assert
and then prove the correctness of our design for control-
ﬂow integrity. Assuming the text in question was validated
without errors, let S be the set of instructions addresses from
the list StartAddr.
Theorem: S contains all addresses that can be reached
from an instruction with address in S.
Proof: By contradiction. Suppose an address IP not in S
is reached during execution from a predecessor instruction
A with address in S. Because execution is constrained by
x86 segmentation, IP must trivially be in [0:TextLimit). So
IP can only be reached in one of three ways.
83
// TextLimit = the upper text address limit
// Block(IP) = 32-byte block containing IP
// StartAddr = list of inst start addresses
// JumpTargets = set of valid jump targets
// Part 1: Build StartAddr and JumpTargets
IP = 0; icount = 0; JumpTargets = { }
while IP <= TextLimit:
if inst_is_disallowed(IP):
error "Disallowed instruction seen"
StartAddr[icount++] = IP
if inst_overlaps_block_size(IP):
error "Block alignment failure"
if inst_is_indirect_jump_or_call(IP):
if !is_2_inst_nacl_jmp_idiom(IP) or
icount < 2 or
Block(StartAddr[icount-2]) != Block(IP):
error "Bad indirect control transfer"
else
// Note that indirect jmps are inside
// a pseudo-inst and bad jump targets
JumpTargets = JumpTargets + { IP }
// Proceed to the fall-through address
IP += InstLength(IP)
// Part 2: Detect invalid direct transfers
for I = 0 to length(StartAddr)-1:
IP = StartAddr[I]
if inst_is_direct_jump_or_call(IP):
T = direct_jump_target(IP)
if not(T in [0:TextLimit))
or not(T in JumpTargets):
error "call/jmp to invalid address"
Figure 3: Pseudo-code for the NaCl validator.
case 1: IP is reached by falling through from A. This
implies that IP is InstAddr(A) + InstLength(A). But
this address would have been in S from part 1 of the
construction. Contradiction.
case 2: IP is reached by a direct jump or call from an
instruction A in S. Then IP must be in JumpTargets,
a condition checked by part 2 of the construction.
Observe that JumpTargets is a subset of S, from part
1 of the construction. Therefore IP must be in S.
Contradiction.
case 3: IP is reached by an indirect transfer from an in-
struction at A in S. Since the instruction at A is
an indirect call or jump, any execution of A always
immediately follows the execution of an and. After
the and the computed address is aligned 0 mod 32.
Since no instruction can straddle a 0 mod 32 boundary,
every 0 mod 32 address in [0, TextLimit) must be in
S. Hence IP is in S. Contradiction.
Hence any instruction reached from an instruction in S is
also in S.
Note that this analysis covers explicit, synchronous con-
trol ﬂow only. Exceptions are discussed in Section 3.2.
If the validator were excessively slow it might discourage
people from using the system. We ﬁnd our validator can
check code at approximately 30MB/second (35.7 MB in 1.2
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:17:16 UTC from IEEE Xplore.  Restrictions apply. 
seconds, measured on a MacBook Pro with MacOS 10.5,
2.4GHz Core 2 Duo CPU, warm ﬁle-system cache). At
this speed, the compute time for validation will typically
be very small compared to download time, and so is not a
performance issue.
We believe this inner sandbox needs to be extremely
robust. We have tested it for decoding defects using random
instruction generation as well as exhaustive enumeration
of valid x86 instructions. We also have used “fuzzing”
tests to randomly modify test executables. Initially these
tests exposed critical implementation defects, although as
testing continues no defects have been found in the recent
past. We have also tested on various x86 microprocessor
implementations, concerned that processor errata might lead
to exploitable defects [31], [38]. We did ﬁnd evidence of
CPU defects that lead to a system “hang” requiring a power-
cycle to revive the machine. This occurred with an earlier
version of the validator that allowed relatively unconstrained
use of x86 preﬁx bytes, and since constraining it to only
allow known useful preﬁxes, we have not been able to
reproduce such problems.
3.2. Exceptions
Hardware exceptions (segmentation faults, ﬂoating point
exceptions) and external interrupts are not allowed, due in
part to distinct and incompatible exception models in Linux,
MacOS and Windows. Both Linux and Windows rely on the
x86 stack via %esp for delivery of these events. Regrettably,
since NaCl modiﬁes the %ss segment register, the stack
appears to be invalid to the operating system, such that it
cannot deliver the event and the corresponding process is
immediately terminated. The use of x86 segmentation for
data sandboxing effectively precludes recovery from these
types of exceptions. As a consequence, NaCl untrusted
modules apply a failsafe policy to exceptions. Each NaCl
module runs in its own OS process, for the purpose of
exception isolation. NaCl modules cannot use exception
handling to recover from hardware exceptions and must be
correct with respect to such error conditions or risk abrupt
termination. In a way this is convenient, as there are very
challenging security issues in delivering these events safely
to untrusted code.
Although we cannot currently support hardware excep-
tions, Native Client does support C++ exceptions [57]. As
these are synchronous and can be implemented entirely at
user level
there are no implementation issues. Windows
Structured Exception Handling [44] requires non-portable
operating support and is therefore not supported.
3.3. Service Runtime
The service runtime is a native executable invoked by
an NPAPI plugin that also supports interaction between the
Platform
Linux, Ubuntu 6.06
IntelTM CoreTM 2 6600
2.4 GHz
Mac OSX 10.5
IntelTM XeonTM E5462
2.8 GHz
Windows XP
IntelTM CoreTM 2 Q6600
2.4 GHz
“null” Service
Runtime call time
156
148
123
Table 2: Service runtime context switch overhead. The runtimes
are measured in nanoseconds. They are obtained by averaging the
measurements of 10 runs of a NaCl module which measured the
time required to perform 10,000,000 “null” service runtime calls.
service runtime and the browser. It supports a variety of web
browsers on Windows, MacOS and Linux. It implements the
dynamic enforcement that maintains the integrity of the inner
sandbox and provides resource abstractions to isolate the
NaCl application from host resources and operating system
interface. It contains trusted code and data that, while sharing
a process with the contained NaCl module, are accessible
only through a controlled interface. The service runtime
prevents untrusted code from inappropriate memory accesses
through a combination of x86 memory segment and page
protection.
When a NaCl module is loaded, it is placed in a segment-
isolated 256MB region within the service runtime’s address
space. The ﬁrst 64 KB of the NaCl module’s address space
(NaCl “user” address space) is reserved for initialization
by the service runtime. The ﬁrst 4 KB is read and write
protected to detect NULL pointers. The remaining 60 KB
contains trusted code that implements our “trampoline” call
gate and “springboard” return gate. Untrusted NaCl module
text is loaded immediately after this 64 KB region. The %cs
segment is set to constrain control transfers from the zero
base to the end of the NaCl module text. The other segment
registers are set to constrain data accesses to the 256 MB
NaCl module address space.
Because it originates from and is installed by the trusted
service runtime, trampoline and springboard code is allowed
to contain instructions that are forbidden elsewhere in un-
trusted executable text. This code, patched at runtime as part
of the NaCl module loading process, uses segment register
manipulation instructions and the far call instruction to
enable control transfers between the untrusted user code and
the trusted service runtime code. Since every 0 mod 32
address in the ﬁrst 64 KB of the NaCl user space is a
potential computed control ﬂow target, these are our entry
points to a table of system-call trampolines. One of these
entry points is blocked with a hlt instruction, so that the
remaining space may be used for code that can only be
invoked from the service runtime. This provides space for
the springboard return gate.
84
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:17:16 UTC from IEEE Xplore.  Restrictions apply. 
Invocation of a trampoline transfers control from untrusted
code to trusted code. The trampoline sequence resets %ds
and then uses a far call to reset
the %cs segment
register and transfer control
to trusted service handlers,
reestablishing the conventional ﬂat addressing model ex-
pected by the code in the service runtime. Once outside the
NaCl user address space, it resets other segment registers
such as %fs, %gs, and %ss to re-establish the native-code
threading environment, fully disabling the inner sandbox
for this thread, and loads the stack register %esp with the
location of a trusted stack for use by the service runtime.
Note that the per-thread trusted stack resides outside the
untrusted address space, to protect it from attack by other
threads in the untrusted NaCl module.
Just as trampolines permit crossing from untrusted to
trusted code, the springboard enables crossing in the other
direction. The springboard is used by the trusted runtime
• to transfer control to an arbitrary untrusted address,
• to start a new POSIX-style thread, and
• to start the main thread.
Alignment ensures that the springboard cannot be invoked
directly by untrusted code. The ability to jump to an arbitrary
untrusted address is used in returning from a service call.
The return from a trampoline call requires popping an
unused trampoline return addresses from the top of the
stack, restoring the segment registers, and ﬁnally aligning
and jumping to the return address in the NaCl module.
Table 2 shows the overhead of a “null” system call. The
Linux overhead of 156 ns is slightly higher than that of
the Linux 2.6 getpid syscall time, on the same hardware,
of 138 ns (implemented via the vsyscall table and using
the sysenter instruction). We note that the user/kernel
transfer has evolved continuously over the life of the x86