3.5 Attacks
Next, we discuss attacks within our threat model and how
Aqua defends against them.
Passive traﬃc analysis attack. The traﬃc rate on links
in the core does not depend on individual payload ﬂows.
Traﬃc analysis on core links is therefore unproductive. At
the edges, all rate changes coincide on at least k client links.
Therefore, the attacker cannot tell which of the k clients are
communicating.
Active traﬃc analysis attack. Here, the attacker manip-
ulates the ﬂow of encrypted, chaﬀed Aqua traﬃc by delaying,
dropping or replaying packets. Doing so has no impact on
the rate of downstream chaﬀed traﬃc, so it does not help the
attacker trace payload ﬂows. For that, the attacker needs
access to a client’s payload ﬂow at the other end of a Aqua
circuit. However, this case is ruled out by the threat model.
Compromised middle mix. The attacker cannot decrypt
the contents or circuit ids of packets its forwards, but learns
the edge mixes between which a packet travels. To ﬁnd out
which client is communicating, the attacker would have to
(i) estimate the aggregate payload traﬃc between a pair of
edge nodes based on the isolated sample packets it sees, (ii)
analyze traﬃc at the two edge mixes to determine the set
of attached clients who share ksets, and (iii) infer which of
these clients are communicating by correlating rate changes
in a kset with changes of the observed aggregate payload
rate. With a single ﬂow between a pair of mixes, this could
conceivably allow an attacker to narrow the candidate client
set to (k + ∆)/M ; per our assumption, however, a large
number or ﬂows (and thus ksets) exist between any pair of
mixes at any time, making this attack infeasible in practice.
Compromised rendezvous mix or hidden receiver. A
client’s anonymity is not aﬀected by a compromised ren-
dezvous mix or hidden receiver, because it depends only on
the edge mixes chosen by the client.
Compromised clients (Sybil attack). Clients controlled
by the attacker eﬀectively reduce the anonymity provided by
each kset they participate in. Aqua compensates by increas-
ing kset sizes based on the given bound on the proportion
of compromised clients, to ensure a minimum of k uncom-
promised clients in the set. Thus, the attack is not eﬀective
as long as the proportion remains within the bound.
Long-term intersection attacks. In a long-term intersec-
tion attack, the attacker takes advantage of repeated com-
munication between a pair of clients to observe which clients
are (almost) always part of a kset. Over a long time, the in-
tersection of these successive ksets will shrink towards the
communicating clients. The attack requires that a pair of
clients communicate repeatedly and in a way that the at-
Figure 2: Rendezvous design. Each line is a full
three-hop circuit (Entry/Middle/Exit Mix). For the
ﬂow itself (not shown), the rendezvous Mix acts as
the exit mix of the client’s circuit and is concate-
nated to the server’s circuit.
number of clients connected to the subgraph. Aqua enforces
the following conditions regarding the observable link rates:
1. A rate increase by r bits/s in response to a ﬂow start-
up must simultaneously aﬀect a subgraph s that con-
nects at least k + ∆ clients.
2. A rate decrease in response to a ﬂow shut-down, mix
failure or client departure that reduces s to less than k
members must be accompanied by a simultaneous rate
reduction by r in the entire s.
These conditions ensure that the attacker cannot infer
which client within a set of k clients is communicating. The
reason is that any observable rate change is consistent with
the start-up or shut-down of a ﬂow by any client within the
set of k clients. Each kset is eﬀectively an instance of a
uniform rate chaﬀed network, like the one used in Aqua’s
core.
3.4 Rendezvous
For clients who wish to be reached anonymously (receiver
anonymity), as is the case in BitTorrent, Aqua provides a
rendezvous mechanism similar to Tor’s hidden service mech-
anism. This design comprises four components: a hidden
receiver, a directory server, the rendezvous point, and the
introduction point. The hidden receiver is a client who of-
fers a (hidden) service (e.g., BitTorrent) to other clients of
the anonymity network. The directory server keeps track
of where to contact hidden receivers. The rendezvous point
relays the payload data traﬃc between a client and the hid-
den receiver. The introduction point is where the hidden
receiver listens for connections.
We illustrate this design for rendezvous in Fig. 2. Note
that all lines in Fig. 2 represent full three-hop Aqua cir-
cuits, thus providing anonymity for both client and hidden
receiver with respect to the other components. A hidden
receiver starts by requesting that an introduction point lis-
tens for incoming connections from clients (1). The receiver
then publishes the contact information of its introduction
point in the directory service (2). Clients ﬁnd out about
the receiver out of band and look up its introduction point
in the directory (3). For robustness, a receiver can have
several introduction points. The client then requests that
tacker can predict (e.g., by infering that clients are likely to
communicate whenever they are online). In general, users of
anonymizing networks must take care to avoid predictable
communication patterns (e.g., not go online only when com-
municating) to avoid this attack.
4. EVALUATION
In this section, we use trace-driven simulations to analyze
the bandwidth overhead of traﬃc chaﬃng and the latency
of the Aqua design. We show that Aqua oﬀers strong pri-
vacy guarantees at low overhead in terms of throughput and
latency.
We evaluate the performance of Aqua relative to other
representative approaches for anonymous communication.
To provide an apples-to-apples comparison of the network
overhead of alternative designs, we extract the key mech-
anisms for anonymity and traﬃc analysis resistance for
each anonymity system and evaluate their impact on per-
formance. At a high level, we ﬁnd that other anonymous
system designs either sacriﬁce performance or scalability,
whereas Aqua achieves both on BitTorrent workloads. To
summarize our key results, we ﬁnd that on this workload,
Aqua has low overhead (10-30%) and low throttling (10-
50%), signiﬁcantly lower than of other anonymity system
designs.
It accomplishes this with latency that is a small
fraction (12%) larger than in onion routing systems.
We discuss the dataset that we use for this analysis in the
next section. Then we describe the goals of our evaluation
in Sec. 4.2 and detail the systems models that we evaluate in
Sec. 4.3. We present the results of our evaluation in Sec. 4.4
and discuss limitations of our simulation-based analysis in
Sec. 4.5. We close with some preliminary results from a
prototype implementation of Aqua in Tor in Sec. 4.6.
4.1 Dataset
We use trace-based simulations to evaluate the eﬃciency
and privacy of Aqua and some of its related work. Specif-
ically, we use the Ono dataset, a large collection of trace
data gathered from BitTorrent users [7]. This data is gath-
ered by Ono, a plugin for the Vuze BitTorrent client that
attempts to bias peer connections toward relatively nearby
hosts to reduce cross-ISP traﬃc in P2P systems. In addition
to providing this service, the plugin collects anonymous in-
formation about transfer rates, ping latencies and traceroute
paths between BitTorrent peers for connections established
by participating users. Ono collects no Personal Identiﬁable
Information (PII) nor information about the ﬁles that users
download; users can opt out of data collection at any time.
To analyze the overhead in terms of transfer rates, we use
ﬂow samples from real BitTorrent transfers. The data con-
tains per-ﬂow transfer rate samples recorded at 30-second
intervals for each peer in the trace. On average there are
over 1,000 users online at any time. We use the trace of
November 2010, which includes approximately 20 million
samples per day. We infer the bandwidth capacity of each
peer using the maximum transfer rate observed during the
month. To analyze the delay overhead, we use latencies mea-
sured from traceroutes issued by the BitTorrent hosts. This
data includes more than 200 million measurements.
4.2 Goals
We focus on evaluating the network overheads of the Aqua
design and comparing them with alternative designs for
Model (Example) Technique
Constant
Broadcast (P 5)
P2P (Tarzan)
Aqua
constant rate C
broadcast group k
peer group n
k-set
Anonymity set
N
k
min(nhops, N )
k
Table 2: Models evaluated in this section. The total
number of participating hosts is N .
anonymous communication. Speciﬁcally, we quantify the
costs of each system according to the following metrics:
Overhead. We deﬁne the overhead as the number of chaﬀ
bytes each endpoint sends divided by the number of all bytes
(chaﬀ and payload) sent. The overhead captures the amount
of additional bandwidth consumed by a design to resist traf-
ﬁc analysis.
Throttling. We deﬁne throttling as follows. For each end-
point, we deﬁne the number of throttled bytes as the ab-
solute diﬀerence between the number of payload bytes sent
in the BitTorrent trace and those sent by a given simulated
system during the same period. We then divide the num-
ber of throttled bytes by the total number of payload bytes
sent in the BitTorrent trace. The throttling indicates the
slowdown imposed by an anonymity network as compared
to using unmodiﬁed BitTorrent.
Latency. We deﬁne latency overhead as the additional de-
lay due to using multiple hops through an anonymity net-
work compared to using direct Internet paths.
4.3 System Models
We evaluate four models of anonymity systems, represen-
tative of designs described in Sections 2 and 3. Table 2 gives
an overview of the diﬀerent models. We assume that hosts
in the core of the network (mixes) have suﬃcient capacity to
support all ﬂows in the system without throttling. Further,
we quantify the anonymity of each system as the number of
clients within an anonymity set.
Constant-rate.
In the constant-rate model, online end-
points exchange constant traﬃc with their edge mix at
their capacity rate. Online but inactive endpoints exchange
only chaﬀ traﬃc with their edge mix. When endpoints be-
come active, they replace chaﬀ traﬃc with payload traﬃc.
The constant-rate model achieves an anonymity equal to the
number of online endpoints in the system.
[Example: P 5 and DC-Nets] The broadcast
Broadcast.
model partitions online endpoints into ﬁxed size broadcast
groups. Endpoints within each group share a broadcast
channel, so every message to a single endpoint is broadcast
to all endpoints in the same group. Group members al-
ways send and receive traﬃc at a constant rate equal to the
minimum capacity of all group members, pad payload traf-
ﬁc with chaﬀ traﬃc as needed, and throttle payload traﬃc
when its speed exceeds this rate. To limit throttling, we as-
sign endpoints to broadcast groups based on their capacity in
our simulations. The broadcast model provides k-anonymity
among the endpoints of each broadcast group.
P2P. [Example: Tarzan] The P2P model assumes traﬃc is
routed only between neighbors in the P2P overlay. Each pair
of neighbors maintains a bidirectional, constant-rate stream,
into which payload traﬃc can be inserted. The constant rate
of each stream should satisfy two constraints: a) the sum of
rates of streams from/to an endpoint must be no larger than
its sending/receiving capacity; b) any stream’s rate must be
no larger than the sender’s sending rate and the receiver’s
receiving rate. The anonymity of the P2P model increases
exponentially with the number of P2P hops. Speciﬁcally, it
is min(nh, N ), where n is the number of P2P connections,
h is the number of hops and N is the size of the system. We
use h = 3 and n = 2, 5, 10.
Aqua. Aqua is the design presented in Section 3, where
endpoints form ksets and use mixes to route their traﬃc.
The Aqua trace-driven simulations model ksets for various
k. The simulator obfuscates traﬃc by adding chaﬀ or throt-
tling connections based on the nominal rate of the kset (i.e.,
the minimum available capacity in the kset). A peer is not
allowed to exit the system until its kset is torn down; if the
associated ﬂow is inactive, the peer must continue to send
chaﬀ traﬃc at the kset rate.
In our simulations, Aqua
assigns peers to ksets using a greedy online algorithm that
matches peers with similar capacities. During each round
all N peers that need to join ksets are ordered according to
their capacity. We assign the ﬁrst k peers to the same kset,
the second k peers to another kset, and so on until all peers
are assigned to a kset. The last (N mod k) peers must post-
pone transfers until their kset is complete (e.g., from peers
with new ﬂows starting in the next round). Aqua provides
k-anonymity among the members of a kset.
4.4 Results
Next, we present the simulation results. We ﬁnd that on
the BitTorrent workload, Aqua incurs substantially less over-
head and throttling than other anonymity system designs
(e.g., as little as 1/3 of the overhead and 1/2 of the throt-
tling when compared to an alternative P2P-based anonymity
system), and its delay from multiple hops is not suﬃciently
large to impact performance for P2P ﬁle sharing (the delay
is not signiﬁcantly larger than onion routing).
4.4.1 Endpoint Performance
At the endpoints, the network cost of anonymizing sys-
tems is overhead from chaﬀ traﬃc and throttling to main-
tain traﬃc-analysis resistance. With the exception of Aqua,
we ﬁnd that the evaluated models sacriﬁce performance,
scalability or both.
Importantly, ksets eﬃciently provide
anonymity for the large numbers of ﬂows generated by Bit-
Torrent; further, Aqua’s infrastructure-based mixes provide
the relatively large bandwidth resources required for resist-
ing traﬃc analysis.
Methodology. To evaluate the performance of each sys-
tem design, we use the timeseries of BitTorrent ﬂows form
the Ono dataset.
In particular, when a peer in the trace
initiates a ﬂow, we simulate the protocols described in the
previous section. Each system imposes overhead and throt-
tling, which we track and compare to the empirical traces as
a baseline representing performance without any anonymity.
To evaluate large kset sizes (i.e., 1000) in Aqua, we need
more concurrent users than exist in our dataset. To generate
a larger set that is representative of the original dataset, we
stack daily traces by modifying timestamps t in the trace to
be t/(24 ∗ 60 ∗ 60). This means two peers online at the same
time of day are online concurrently in the stacked traces
regardless of which day of the month they were online.
Overhead. We show the overhead of constant-rate, broad-
cast (e.g., P 5), P2P (e.g., Tarzan), and Aqua designs in
Fig. 3. Aqua incurs signiﬁcantly less overhead than other
designs, mainly because ksets eﬃciently match peers’ pay-
load ﬂows, requiring only moderate chaﬀ traﬃc. Below, we
describe the results in more detail.
Constant-rate. In the Constant-rate design, peers exchange
chaﬀed traﬃc at their capacity rate. In Fig. 3, the median
overhead over all peers is 0.95 because half the peers utilize
at most 5% of their bandwidth capacity over the duration
of the trace. As a result, these peers must generate 95%
of chaﬀ to maintain their target rate. Hence, the overhead
is inversely proportional to the peers’ bandwidth utilization,
which leads to high overhead, even in the case of BitTorrent.
Broadcast. With the Broadcast design, each message is
broadcast to every group member. With k group members,
one unit of payload traﬃc generates (k − 1) units of chaﬀ.
Thus, the overhead of each group member is approximately
(k-1)/k on average, approaching 1 as k increases. We see in
Fig. 3 that the median overhead of the broadcast design is
always above 0.95. For example, for k=10, the peers’ median
overhead is 0.97. The higher overhead in the simulations is
explained by peers running out of payload during their slot
and padding with chaﬀ. High overhead makes the broadcast
design unsuitable for bandwidth intensive applications like