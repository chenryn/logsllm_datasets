Analysis accuracy. As mentioned before, LRSan is built on a
precise static-analysis engine—LRSan’s analysis is flow-sensitive,
context-sensitive, and field-sensitive. Specifically, detecting LRC
bugs must use a flow-sensitive analysis because the order of security
check, modification, and use must take place in sequence. LRSan
constructs ECFG and detects LRC sequences by strictly following
the CFG. Thus, its analysis is flow sensitive. LRSan also follows
call-site specific context to facilitate a context-sensitive analysis,
and leverages type information provided by LLVM to implement a
field-sensitive analysis. We also manually model commonly used
functions (e.g., string-related functions and some assembly code)
to improve analysis efficiency and accuracy.
Recognizing error code. To identify security checks, we first
need to collect error codes in LLVM IR. In Linux, error codes are
defined as macros with values ranging from 1 to 133. The lexer
preprocessor will expand error codes into constants. Identifying
error codes in LLVM IR based on their values is hard. To solve
this problem, we instruct the preprocessor to include error code
# SC
131,504
# CV
86,339
# CUC # LRCC # LRCB
99,082
2,808
19
Table 1: Detection statistics of LRSan on the Linux kernel.
SC = security checks; CV = critical variables; CUC = check-
use chains; LRCC = LRC cases; LRCB = found LRC bugs.
information in its metadata. With such metadata, LRSan is able to
tell if a constant value is an error code or not.
Results pruning and reporting. Because modifications some-
times are a part of developers’ logic, manual investigation with
program semantics is required to finally confirm an LRC bug. To
minimize manual effort, we need to reduce false positives without
incurring too many false negatives.
From a security perspective, we heuristically prune three types of
LRC cases that are likely not exploitable under existing techniques.
First, if the source of a modification to a critical variable is a constant,
it is unlikely to be exploitable because attackers cannot control the
modification. Second, if the source of the modification to a critical
variable passes the security check, it is safe to remove such LRC
cases. For instance, a critical variable A is compared to another
critical variable B, and the value of B is assigned to A if they are not
equal. Obviously, there is no need to recheck the value of A because
B’s value is unchanged. Third, a mutex-style check is extensively
used in OS kernels to ensure that the current state of a device or an
object is updatable before changing it to a new state. Such a state
change is intended, and the check is no longer effective after the
change, so such LRC cases are false positives. Therefore, we need
to filter out such LRC cases. We observe that error code EBUSY is
commonly used for mutex-style check. In current implementation,
we exclude EBUSY in our security check identification to filter out
such false positives.
To facilitate manual investigation, LRSan reports the following
information for each detected LRC case: the identified security
check, the associated critical variable, the use of the critical variable
after the security check, and the modification between the security
check and the use. Given that LRSan works on LLVM IR, all of these
information is reported in the form of instructions at the IR level.
LRSan also reports the source code location of the related IR.
5 EVALUATION
In this section, we apply LRSan to the LLVM IR compiled from the
Linux kernel source code (version 4.17) to evaluate its effectiveness
and efficiency.
5.1 Detection Statistics
Table 1 shows the overall detection statistics of LRSan. In summary,
LRSan identifies 131K security checks. This demonstrates that secu-
rity checks are pervasive in the Linux kernel. It makes sense that OS
kernels, as the core of a computer system, employ massive security
checks to ensure reliability and security. Based on the identified
security checks, LRSan identifies 86K critical variables after prun-
ing. The reason why the number of critical variables is less than
the number of security checks is that a critical variable may prop-
agate to other variables, requiring multiple security checks. This
number demonstrates that critical variables are prevalent, requiring
extensive security checks.
Table 1 also shows that LRSan finds 99K check-use chains for
identified security checks and critical variables. It is worth noting
that a security check and the checked critical variable can form
multiple check-use chains because the critical variable may have
multiple uses after the security check. Finally, with the check-use
chains, LRSan reports 2,808 LRC cases. We then manually verify
these LRC cases for real LRC bugs. At the time of paper submission,
our manual analysis have confirmed 19 new bugs, which are not
reported by any previous bug-detection tools.
These confirmed bugs are relatively simple and thus are more
obvious. There are many complicated ones, especially the ones
with modification from kernel race or the thread itself, which often
involve shared data and indirect calls that requires further manual
investigation. It is expected that more bugs will be confirmed as
our analysis continues. Indeed, as a static analysis system, LRSan
has significant false positives. We will discuss how to reduce false
positives in §7. LRSan is the first system towards detecting LRC
bugs. We expect more improvements in the follow-up work.
5.2 Bug Finding
An important task of LRSan is to find real LRC bugs in OS kernels.
Among the reported LRC cases, we have manually confirmed 19
new bugs. Table 2 shows the details and the statuses of these bugs.
We have reported all of these bugs to Linux kernel developers.
Twelve bugs have been fixed with our patches. Four bugs have been
confirmed by Linux kernel maintainers, and we are working with
them to finalize the patches. Three bugs are still pending for review
and confirmation. Linux kernel maintainers would not fix two of
the four confirmed bugs. For one bug, they believed that it would
not cause security issues thus chose to not fix it for now. For the
other one, it is in a driver that is to be removed in the near future.
Therefore, they chose not to fix it. Most of the LRC bugs found by
LRSan are in drivers. However, LRSan indeed finds four LRC bugs
even in the well-tested core kernel.
Table 2 also shows the source of the modification in each found
bug. 14 bugs have modifications coming from user space, and five
bugs have modifications coming from other threads in the kernel
space or the thread itself. These five bugs cannot be detected by
double-fetch tools. It is worth noting that, compared to bugs with
modification from user space (e.g., through copy_from_user()), bugs
with modification from other threads in kernel space or the thread
itself are much more complicated, often involving arithmetic oper-
ations, shared data among threads, and indirect calls. Confirming
and fixing such bugs require more manual effort.
In addition, Table 2 shows the latent period of each bug. The
average latent period of these bugs is around 5 years, which aligns
with the previous finding in security flaws in the Linux kernel,
i.e., the average time between introduction and fix of a kernel
vulnerability is about 5 years [5]. Some of these bugs even existed
for more than 10 years. This demonstrates that LRC bugs can be
long-existing semantic bugs and hard-to-find. This also shows that
LRSan is effective in finding long-existing LRC bugs in OS kernels.
ID File
Function
Critical Variable
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
drivers/.../chtls_main.c
drivers/.../chtls_main.c
drivers/.../i2c-core-smbus.c
drivers/.../i2c-core-smbus.c
drivers/.../divasmain.c
drivers/.../diva.c
drivers/scsi/3w-9xxx.c
drivers/scsi/3w-sas.c
drivers/scsi/3w-xxxx.c
drivers/scsi/.../mpt3sas_ctl.c
drivers/scsi/sg.c
drivers/.../llite/dir.c
drivers/.../atomisp_subdev.c
drivers/.../vboxguest_linux.c
drivers/.../vboxguest_linux.c
drivers/.../vboxguest_linux.c
net/core/ethtool.c
net/sctp/socket.c
net/tipc/link.c
sound/core/control_compat.c
do_chtls_setsockopt
do_chtls_setsockopt
i2c_smbus_xfer_emulated
i2c_smbus_xfer_emulated
divas_write
diva_xdi_open_adapter
diva_xdi_write
twa_chrdev_ioctl
twl_chrdev_ioctl
tw_chrdev_ioctl
_ctl_ioctl_main
sg_write
ll_dir_ioctl
atomisp_subdev_set_selection
vbg_misc_device_ioctl
vbg_misc_device_ioctl
vbg_misc_device_ioctl
ethtool_get_rxnfc
sctp_setsockopt_maxseg
tipc_link_xmit
snd_ctl_elem_add_compat
tmp_crypto_info.version
tmp_crypto_info.cipher_type
data->block[0]
status
msg.adapter
driver_command.buffer_length
driver_command.buffer_length
data_buffer_length
ioctl_header.ioc_number
input_size
lumv3.lmm_magic
atomisp_subdev_get_rect
hdr.version
hdr.size_in
hdr.size_out
info.flow_type
val
imp
data->type
Security Check
tmp_crypto_info.version !=
TLS_1_2_VERSION
switch (tmp_crypto_info.cipher_type)
data->block[0] >
I2C_SMBUS_BLOCK_MAX
status != num
a->controller == (int)msg.adapter
driver_command.buffer_length >
TW_MAX_SECTORS * 2048
driver_command.buffer_length >
TW_MAX_SECTORS * 2048
data_buffer_length >
TW_MAX_IOCTL_SECTORS * 512
_ctl_verify_adapter(
ioctl_header.ioc_number)
input_size  max_len
l->backlog[imp].len >=
l->backlog[imp].limit
switch(data->type)
Modi.
Y.
Status
U
U
T&I
I
U
U
U
U
U
U
U
T&I
U
U
U
U
T&I
I
U
1
1
1
1
>10
2
9
>10
6
>10
5
1
1
1
1
1
10
3
>10
A
A
C
A
A
A
S
A
S
C
A
C
A
A
A
A
S