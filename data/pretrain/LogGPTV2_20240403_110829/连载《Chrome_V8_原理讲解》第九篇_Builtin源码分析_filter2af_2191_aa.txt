# 连载《Chrome V8 原理讲解》第九篇 Builtin源码分析
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 1 摘要
上一篇文章中，Builtin作为先导知识，我们做了宏观概括和介绍。Builtin（Built-in
function）是编译好的内置代码块（chunk），存储在`snapshot_blob.bin`文件中，V8启动时以反序列化方式加载，运行时可以直接调用。Builtins功能共计600多个，细分为多个子类型，涵盖了解释器、字节码、执行单元等多个V8核心功能，本文从微观角度剖析Builtins功能的源码，在不使用`snapshot_blob.bin`文件的情况下，详细说明Builtin创建和运行过程。  
本文内容组织结构：Bultin初始化过程（章节2），Builtin子类型讲解(章节3)。
## 2 Builtin初始化
下面是`code`类，它负责管理所有`Builtin`功能，是`builtin table`的数据类型。
    1.  class Code : public HeapObject {
    2.   public:
    3.    NEVER_READ_ONLY_SPACE
    4.    // Opaque data type for encapsulating code flags like kind, inline
    5.    // cache state, and arguments count.
    6.    using Flags = uint32_t;
    7.  #define CODE_KIND_LIST(V)   \
    8.    V(OPTIMIZED_FUNCTION)     \
    9.    V(BYTECODE_HANDLER)       \
    10.   V(STUB)                   \
    11.    V(BUILTIN)                \
    12.    V(REGEXP)                 \
    13.    V(WASM_FUNCTION)          \
    14.    V(WASM_TO_CAPI_FUNCTION)  \
    15.    V(WASM_TO_JS_FUNCTION)    \
    16.    V(JS_TO_WASM_FUNCTION)    \
    17.    V(JS_TO_JS_FUNCTION)      \
    18.    V(WASM_INTERPRETER_ENTRY) \
    19.    V(C_WASM_ENTRY)
    20.    enum Kind {
    21.  #define DEFINE_CODE_KIND_ENUM(name) name,
    22.      CODE_KIND_LIST(DEFINE_CODE_KIND_ENUM)
    23.  #undef DEFINE_CODE_KIND_ENUM
    24.          NUMBER_OF_KINDS
    25.    };
    26.    static const char* Kind2String(Kind kind);
    27.    // Layout description.
    28.  #define CODE_FIELDS(V)                                                    \
    29.    V(kRelocationInfoOffset, kTaggedSize)                                   \
    30.    V(kDeoptimizationDataOffset, kTaggedSize)                               \
    31.    V(kSourcePositionTableOffset, kTaggedSize)                              \
    32.    V(kCodeDataContainerOffset, kTaggedSize)                                \
    33.    /* Data or code not directly visited by GC directly starts here. */     \
    34.    /* The serializer needs to copy bytes starting from here verbatim. */   \
    35.    /* Objects embedded into code is visited via reloc info. */             \
    36.    V(kDataStart, 0)                                                        \
    37.    V(kInstructionSizeOffset, kIntSize)                                     \
    38.    V(kFlagsOffset, kIntSize)                                               \
    39.    V(kSafepointTableOffsetOffset, kIntSize)                                \
    40.    V(kHandlerTableOffsetOffset, kIntSize)                                  \
    41.    V(kConstantPoolOffsetOffset,                                            \
    42.      FLAG_enable_embedded_constant_pool ? kIntSize : 0)                    \
    43.    V(kCodeCommentsOffsetOffset, kIntSize)                                  \
    44.    V(kBuiltinIndexOffset, kIntSize)                                        \
    45.    V(kUnalignedHeaderSize, 0)                                              \
    46.    /* Add padding to align the instruction start following right after */  \
    47.    /* the Code object header. */                                           \
    48.    V(kOptionalPaddingOffset, CODE_POINTER_PADDING(kOptionalPaddingOffset)) \
    49.    V(kHeaderSize, 0)
    50.    DEFINE_FIELD_OFFSET_CONSTANTS(HeapObject::kHeaderSize, CODE_FIELDS)
    51.  #undef CODE_FIELDS
    52.    STATIC_ASSERT(FIELD_SIZE(kOptionalPaddingOffset) == kHeaderPaddingSize);
    53.    inline int GetUnwindingInfoSizeOffset() const;
    54.    class BodyDescriptor;
    55.    // Flags layout.  BitField.
    56.  #define CODE_FLAGS_BIT_FIELDS(V, _)    \
    57.    V(HasUnwindingInfoField, bool, 1, _) \
    58.    V(KindField, Kind, 5, _)             \
    59.    V(IsTurbofannedField, bool, 1, _)    \
    60.    V(StackSlotsField, int, 24, _)       \
    61.    V(IsOffHeapTrampoline, bool, 1, _)
    62.    DEFINE_BIT_FIELDS(CODE_FLAGS_BIT_FIELDS)
    63.  #undef CODE_FLAGS_BIT_FIELDS
    64.    static_assert(NUMBER_OF_KINDS (isolate);
    3.    CHECK_NOT_NULL(params.array_buffer_allocator);
    4.    i_isolate->set_array_buffer_allocator(params.array_buffer_allocator);
    5.    if (params.snapshot_blob != nullptr) {
    6.      i_isolate->set_snapshot_blob(params.snapshot_blob);
    7.    } else {
    8.      i_isolate->set_snapshot_blob(i::Snapshot::DefaultSnapshotBlob());
    9.    }
    10.    auto code_event_handler = params.code_event_handler;
    11.  //........................代码太长，省略很多.....................
    12.    if (!i::Snapshot::Initialize(i_isolate)) {
    13.      // If snapshot data was provided and we failed to deserialize it must
    14.      // have been corrupted.
    15.      if (i_isolate->snapshot_blob() != nullptr) {
    16.        FATAL(
    17.            "Failed to deserialize the V8 snapshot blob. This can mean that the "
    18.            "snapshot blob file is corrupted or missing.");
    19.      }
    20.      base::ElapsedTimer timer;
    21.      if (i::FLAG_profile_deserialization) timer.Start();
    22.      i_isolate->InitWithoutSnapshot();
    23.      if (i::FLAG_profile_deserialization) {
    24.        double ms = timer.Elapsed().InMillisecondsF();
    25.        i::PrintF("[Initializing isolate from scratch took %0.3f ms]\n", ms);
    26.      }
    27.    }
    28.    i_isolate->set_only_terminate_in_safe_scope(
    29.        params.only_terminate_in_safe_scope);
    30.  }
上述方面中进入第22行，最终进入下面的Builtin初始化方法。
    1.  void SetupIsolateDelegate::SetupBuiltinsInternal(Isolate* isolate) {
    2.  //...................删除部分代码，留下最核心功能
    3.  //...................删除部分代码，留下最核心功能
    4.    int index = 0;
    5.    Code code;
    6.  #define BUILD_CPP(Name)                                                      \
    7.    code = BuildAdaptor(isolate, index, FUNCTION_ADDR(Builtin_##Name), #Name); \
    8.    AddBuiltin(builtins, index++, code);
    9.  #define BUILD_TFJ(Name, Argc, ...)                              \
    10.   code = BuildWithCodeStubAssemblerJS(                          \
    11.        isolate, index, &Builtins::Generate_##Name, Argc, #Name); \
    12.    AddBuiltin(builtins, index++, code);
    13.  #define BUILD_TFC(Name, InterfaceDescriptor)                      \
    14.    /* Return size is from the provided CallInterfaceDescriptor. */ \
    15.    code = BuildWithCodeStubAssemblerCS(                            \
    16.        isolate, index, &Builtins::Generate_##Name,                 \
    17.        CallDescriptors::InterfaceDescriptor, #Name);               \
    18.    AddBuiltin(builtins, index++, code);
    19.  #define BUILD_TFS(Name, ...)                                                   \
    20.    /* Return size for generic TF builtins (stub linkage) is always 1. */        \
    21.    code =                                                                       \
    22.        BuildWithCodeStubAssemblerCS(isolate, index, &Builtins::Generate_##Name, \
    23.                                     CallDescriptors::Name, #Name);              \
    24.    AddBuiltin(builtins, index++, code);
    25.  #define BUILD_TFH(Name, InterfaceDescriptor)              \
    26.    /* Return size for IC builtins/handlers is always 1. */ \
    27.    code = BuildWithCodeStubAssemblerCS(                    \
    28.        isolate, index, &Builtins::Generate_##Name,         \
    29.        CallDescriptors::InterfaceDescriptor, #Name);       \
    30.    AddBuiltin(builtins, index++, code);
    31.  #define BUILD_BCH(Name, OperandScale, Bytecode)                           \
    32.    code = GenerateBytecodeHandler(isolate, index, OperandScale, Bytecode); \
    33.    AddBuiltin(builtins, index++, code);
    34.  #define BUILD_ASM(Name, InterfaceDescriptor)                                \
    35.    code = BuildWithMacroAssembler(isolate, index, Builtins::Generate_##Name, \
    36.                                   #Name);                                    \
    37.    AddBuiltin(builtins, index++, code);