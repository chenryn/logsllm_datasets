runtime, ﬁnding a symbol by a virtual address requires
ﬁrst identifying the containing module using the shadow
memory map, and then calculating the offset to search
the database.
Native library symbols are retrieved statically through
objdump and are usually limited to Android libraries
since malware libraries are often stripped of all symbol
information. On the other hand, Dalvik or Java symbols
are retrieved dynamically and static symbol information
through dexdump is used as a fallback. This has the ad-
vantage of ensuring the best symbol coverage for opti-
mized dex ﬁles and even dynamically generated Dalvik
bytecode.
Figure 6: String Object Example
frame. R6 points to the InterpState data structure,
called glue. R7 contains the ﬁrst two bytes of the cur-
rent Dalvik instruction, including the opcode. Finally R8
stores the base address of the mterp emulation code for
the current DVM instruction. In x86, edx, esi, edi
and ebx are used to store the program counter, frame
pointer, mterp base address and the ﬁrst two bytes of the
instruction respectively. The glue object can be found
on the stack at a predeﬁned offset.
Dalvik virtual registers are 32 bits and are stored in
reverse order on the stack. They are referenced relative
to the frame pointer R5. Hence, the virtual register V0
is located at the top of the stack (pointed to by the ARM
register R5,) and the virtual register V1 sits on top of V0
in memory, and so forth. All other Dalvik state infor-
mation (such as return value and thread information) is
obtained through glue pointed to by R6.
After understanding how DVM state is maintained, we
are able to reconstruct the state from the native machine
code execution. That is, by examining the ARM registers
and relative data structures, we can get the current DVM
program counter, frame pointer, all virtual registers, and
so on.
Java Objects Java Objects are described using two data
structures. Firstly, ClassObject describes a class type and
contains important information about that class: the class
name, where it is deﬁned in a dex ﬁle, the size of the ob-
ject, the methods, and the location of the member ﬁelds
within the object instances. To standardize class repre-
sentations, Dalvik creates a ClassObject for each deﬁned
class type and implicit class type, e.g. arrays. For exam-
ple there is a ClassObject that describes a char[] which
is used by java.lang.String. Moreover, if the App
has a two dimensional array, e.g. String[][], then
Dalvik creates a ClassObject to describe the String[]
and another to describe the array of the previously de-
scribed String[] class.
Secondly, as an abstract type, Object describes a run-
time object instance, i.e. member ﬁelds. Each Object
7
ClassObject*lockArrayObject*hashcodeoffset (0)count (5)instanceDatastruct StringObject {    Object          obj;    u4              instanceData[1];};struct ArrayObject {    Object          obj;    u4              length;    u8              contents[1];};ClassObject*lockalign_pad0x0048 'H', 0x0045 'e'0x006c 'l', 0x006c 'l'0x006f 'o', 0x0000contentsV3 (In 1)0x0000, 0x0000java.lang.String ClassObjectstruct Object {    ClassObject*    clazz;    u4              lock;};char[] ClassObjectname), and end, and memory map update. One can also
query symbols, obtain the task list, and get the current
execution context (e.g., current process and thread). At
the Dalvik level, one can instrument at the granularity
of Dalvik instructions and methods. One can query the
Dalvik symbols, parse and interpret Java objects, read
and modify DVM state, and selectively disable JIT for
certain memory regions. Through the Dalvik-view, one
can also set and check taint in Java Objects as well.
5.2
A general guideline for performance optimization in dy-
namic binary translation is to shift computation from the
execution phase to the translation phase. For instance, if
we need to instrument a function call at address x using
basic blocks, then we should insert the instrumentation
code for the block at x when it is being translated instead
of instrumenting every basic block and look for x at exe-
cution time.
Instrumentation Optimization
We follow this guideline in DroidScope. Conse-
quently, our instrumentation logic becomes more com-
plex. When registering for an event callback, one can
specify a speciﬁc location (such as a function entry) or a
memory range (to trace instructions or functions within a
particular module). Therefore, our instrumentation logic
supports single value comparisons and range checks for
controlling when and where event callbacks are inserted
during the translation phase.
The instrumentation logic is also dynamic, because we
often want to register and unregister a callback at execu-
tion time. For example, when the virtual device starts,
only the OS-view instrumentation is enabled so the An-
droid system can start quickly as usual. When we start
analyzing an App, instrumentation code is inserted to
reconstruct the Dalvik view and to perform analysis as
requested by the plugin. When instrumenting a func-
tion return, the return address will be captured from the
link register R14 at the function entry during execution,
and a callback is registered at the return address. Af-
ter the function has returned, this callback is removed.
Then when the analysis has ﬁnished, other instrumenta-
tion code is removed as well. To maintain consistency,
DroidScope invalidates the corresponding basic blocks
in the translated code cache whenever necessary so that
the new instrumentation logic can be enforced. Hence,
the instrumentation logic in DroidScope is complex and
dynamic. These details are hidden from the analysis plu-
gins.
5.3 Sample Plugin
Figure 7 presents sample code for implementing a simple
Dalvik instruction tracer. The init function at L19 will
be invoked once this plugin is loaded in DroidScope. In
init, it speciﬁes which program to analyze by calling the
Table 1: Summary of DroidScope APIs
We rely on the data structures of DVM to retrieve sym-
bols at runtime. For example, the Method structure con-
tains two pointers of interest. insns points to the start
of the method’s bytecode, the symbol address, and name
points to the name. Conveniently, the glue structure
pointed to by R6 has a ﬁeld method that points to the
Method structure for the currently executing method.
There are times when this procedure fails though, e.g.
if the corresponding page of the dex ﬁle has not been
loaded into memory yet. In these cases, we ﬁrst try to
look up the information in a local copy of the correspond-
ing dex ﬁle, and if that fails as well, use the static symbol
information from dexdump. DroidScope uses this same
basic method of relying on the DVM’s data structures to
retrive class and ﬁeld names as well.
Interface & Plugins
5
DroidScope exports an event based interface for instru-
mentation. We describe the general layout of the APIs,
present an example of how tools are implemented, and
ﬁnally describe available tools in this section.
5.1 APIs
DroidScope deﬁnes a set of APIs to facilitate custom
analysis tool development. The APIs provide instrumen-
tation on different levels: native, OS and Dalvik, to mir-
ror the context levels of a real Android device. At each
level, the analysis tool can register callbacks for different
events, and also query or set various kinds of information
and controls. Table 1 summarizes these APIs.
At the native level, one can register callbacks for in-
struction start and end, basic block start and end, mem-
ory read and write, and register read and write. One can
also read and write memory and register content. As
taint analysis is implemented at the machine code level,
one can also set and check taint in memory and regis-
ters. Currently, the taint propagation engine only sup-
ports copy and arithmetic operations, control ﬂow depen-
dencies are not tracked.
At the OS level, one can register callbacks for context
switch, system call, task start, update (such as process
8
Eventsinstruction begin/endcontext switchregister read/writesystem callmethod beginmemory read/writetask begin/endblock begin/endtask updatedmemory map updatedQuery & Setmemory read/writequery symbol databasequery symbol databaseget current contextinterpret Java objectregister read/writeget task listget/set DVM statetaint set/checktaint set/check objectsdisable JITNativeAPILinuxAPIDalvikAPIDalvik instruction beginmemory r/w with pgdof the other bytecodes to improve performance. To log
library calls from the App’s native components, we reg-
ister for the block end event for blocks that are located in
the App’s native components. When the callback for the
block end event is invoked, we check if the next block is
within the Apps native components or not. If not, we log
this event.
Native instruction tracer registers ARM or x86 in-
struction callbacks to gather information about each in-
struction including the raw instruction, its operands (reg-
ister and memory) and their values.
Dalvik instruction tracer follows the basic logic of
the above example and logs the decoded instruction to
a ﬁle in the dexdump format. The operands, their values
and all available symbol information, e.g. class, ﬁeld and
method names, are logged as well.
Taint tracker utilizes the dynamic taint analysis APIs
to analyze information leakage in an Android App.
It
speciﬁes sensitive information sources (such as IMEI,
IMSI, and contact information) as tainted and keeps track
of taint propagation at the machine code level until they
reach sinks, e.g. sys write and sys send. With the OS
and Dalvik views, it further creates a graphical represen-
tation to visualize how sensitive information has leaked
out. To construct the graph, we ﬁrst identify function and
method boundaries. Whenever taint is propagated, we
add a node to represent the currently executing function
or method and nodes for the tainted memory locations.
Since methods operate on Java Objects, we further try to
identify the containing Object and create a node for it in-
stead of the simple memory location. Currently, we only
do this check against the method’s input parameters and
the current Object, e.g. ”this”. Further improvements are
left as future work.
To identify method boundaries, we look for match-
ing invoke* or execute* and move-result* Dalvik instruc-
tions. We do not rely on the return* instructions since
they are executed in the invokee context, which might not
be instrumented, e.g. inside an API. Since there are mul-
tiple ways for native code to call and return from func-
tions plus malicious code is known to jump into the mid-
dle of functions, we do not rely on native instructions
to determine function boundaries. Instead, we treat the
nearest symbol that is less than or equal to the jump tar-
get in the symbol database as the function.
6 Evaluation
We evaluated DroidScope with respect to efﬁciency and
capability. To evaluate efﬁciency, we used 7 benchmark
Apps from the ofﬁcial Android Market: AnTuTu Bench-
mark (ABenchMark) by AnTuTu, CaffeineMark by Ravi
Reddy, CF-Bench by Chainﬁre, Mobile processor bench-
mark (Multicore) by Andrei Karpushonak, Benchmark
by Softweg, and Linpack by GreeneComputing. We then
9
Figure 7: Sample code for Dalvik Instruction Tracer
setTargetByName function.
It also registers a callback
module callback to be invoked when module informa-
tion is updated. module callback will check if the DVM
is loaded and if so, disable JIT for the entire memory
It also registers a callback, op-
space (L9 and L11.)
code callback, for Dalvik instructions. When invoked,
opcode callback prints the opcode information.
This sample code will print all Dalvik instructions for
the speciﬁed App, including the main program and all
the libraries.
If we are only interested in the execu-
tion of the main program, we can add a function call
like getModAddr(”PI:EMAIL”, &startAddr,
&endAddr) at L10. This function locates the dex ﬁle in
the shadow memory map and stores its start and end ad-
dresses in the appropriate variables. The rest of the code
can be left untouched.
5.4 Analysis Plugins
To demonstrate the capability of DroidScope for analyz-
ing Android malware, we have implemented four analy-
sis plugins: API tracer, native instruction tracer, Dalvik
instruction tracer, and taint tracker.
API tracer monitors how an App (including Java and
native components) interacts with the rest of the sys-
tem through system and library calls. We ﬁrst log all
of the App’s system calls by registering for system call
events. We then build a whitelist of the virtual device’s
built-in native and Java libraries. As modules are loaded
into memory, any library not in the whitelist is marked
for analysis. We instrument the invoke* and execute*
Dalvik bytecodes to identify and log method invoca-
tions, including those of the sample. The log contains
the currently executing Java thread, the calling address,
the method being invoked as well as a dump of its in-
put parameters. Since Java Strings are heavily used, we
try to convert all Strings into native strings before log-
ging them. We then instrument the move-result* byte-
code instructions to detect when system methods return
and gather the return values. We do not instrument any
 1. void opcode_callback(uint32_t opcode) { 2.   printf("[%x] %s\n", GET_RPC, opcodeToStr(opcode)); 3. } 4. 5. void module_callback(int pid) { 6.   if (bInitialized || (getIBase(pid) == 0)) 7.     return; 8. 9.   gva_t startAddr = 0, endAddr = 0xFFFFFFFF;10.11.   addDisableJITRange(pid, startAddr, endAddr);12.   disableJITInit(getGetCodeAddrAddress(pid));13.   addMterpOpcodesRange(pid, startAddr, endAddr);14.   dalvikMterpInit(getIBase(pid));15.   registerDalvikInsnBeginCb(&opcode_callback);16.   bInitialized = 1;17. }18.19. void _init() {20.   setTargetByName("com.andhuhu.fengyinchuanshuo");21.   registerTargetModulesUpdatedCb(&module_callback);22. }on the default Android emulator without any instrumen-
tation. Since DroidScope selectively disables JIT on the
Apps, we also obtained a NOJIT baseline with JIT com-
pletely disabled at build time. The performance results
are summarized in the bar chart in Figure 8. Each tool
is associated with a set of bars that shows its benchmark
results (y-axis) relative to the baseline as a percentage.
The ARM Instruction Tracer results are excluded as they
are similar to the taint tracker results.
Please note that the benchmarks are not perfect repre-
sentations of performance as evidenced by the > 100%
results. For example, in CPUBenchmark the standard de-
viation, σ, for Baseline, Dalvik tracer and Context Only
is only 1%. This means that the results are consistent for
each plugin, but might not be across plugins. Further-
more, we removed the Softweg ﬁlesystem benchmarking
results due to high variability, σ > 27%.
We can see from Figure 8 that
the overhead
(Context Only) of reconstructing the OS-level view
is very small, up to 7% degradation. The taint tracker
has the worst performance as expected, because it reg-
isters for instruction level events. The taint tracker in-
curs 11x to 34x slowdown, which is comparable to other
taint analysis tools [10, 39] on the x86 architecture. A
special case is seen in the Dalvik instruction tracer re-
sult for CaffeineMark. This result is attributed to the fact
that the tracer dynamically retrieves symbol information
from guest memory for logging.
Figure 8: Benchmark Results
ran the benchmarks while using the different automatic
analysis tools described above on the benchmarks them-
selves. The results are presented in Section 6.1. To
evaluate capability, we analyzed two real world Android
malware samples: DroidKungFu and DroidDream in de-
tail, which will be presented in Sections 6.2 and 6.3.
These samples were obtained from the Android Malware
Genome project [40].
Experimental Setup All experiments were conducted
on an Acer 4830TG with a Core i5 @ 2.40GHz and 3GB
of RAM running Xubuntu 11.10. The Android guest is
a Gingerbread build conﬁgured as ”user-eng” for ARM
with the Linux 2.6.29 kernel and uses the QEMU default
memory size of 96 MB. No changes were made to the
Android source.
6.1 Performance
To measure the performance impact of instrumentation,
we took the analysis tools and targeted the benchmark
Apps while the Apps performed their tests. This was re-
peated 5 times. As the baseline, we ran these benchmarks
10
The beneﬁts of dynamically disabling JIT is evident
in some Java based benchmarks such as Linpack, CF-