alphabetic  characters.  This  forces  the  use  of  these 
characters, but in many cases these characters will occur 
only at the beginning or the end of the password, and it 
reduces the total search space somewhat, so the benefit is 
probably modest and nearly independent of the length of 
the password; 
6.  A  bonus  of  up  to  6  bits  of  entropy  is  added  for  an 
extensive  dictionary  check.  If  the  Attacker  knows  the 
dictionary, he can avoid testing those passwords, and will 
in  any  event,  be  able  to  guess  much  of  the  dictionary, 
which  will,  however,  be 
likely  selected 
passwords  in  the  absence  of  a  dictionary  rule.  The 
assumption is that most of the guessing entropy benefits 
for a dictionary test accrue to relatively short passwords, 
because any long password that can be remembered must 
necessarily  be  a  “pass-phrase”  composed  of  dictionary 
words, so the bonus declines to zero at 20 characters. 
the  most 
There has been some confusion based on the examples given in 
the NIST document whether rule #5 requires numbers and special 
characters to both be present or if the presence of either one would 
allow  assigning  of  the  “bonus”  six  bits  of  entropy.  If  such  a 
distinction  is  important  in  any  of  the  tests  in  this  paper,  the 
method to calculate rule #5 will be explicitly stated. 
As an illustration of using the above model , consider a password 
creation policy requiring nine character passwords, and for at least 
one uppercase letter, lowercase letter, digit, and special character 
to  be  present.  The  resulting  NIST  entropy  score  would  then  be 
calculated as 25.5 bits of entropy as seen in Fig 3.1. 
Figure 3.1: Example Calculation of NIST Entropy 
The  next  step  is  to  translate  the  resulting  entropy  score  into  a 
measure of security provided by the password creation policy. If 
the  entropy  calculation  is  equivalent  to  a  uniformly  distributed 
randomly generated key of length H(x), this becomes possible due 
to the following equation: 
Chance of success = Number of Allowed Guesses / 2H(x)    3 
For  example,  an  attacker  will  have  a  50%  chance  of  cracking  a 
random  key  if  they  can  search  half  of  the  key-space.  If  the 
security  threshold  of  the  risk  allowed  is  known,  (aka  it  is 
acceptable  for  the  key  to  be  successfully  guessed  with  a  certain 
probability), Equation 3 can easily be rewritten to then provide the 
maximum number of guesses that an attacker should be allowed 
while  maintaining  a  set  level  of  risk.  The  NIST  SP800-63 
document  does  this  by  designating  two  different  levels  of 
acceptable  risk.  For  a  password  policy  to  meet  a  Level  1 
certification, the chance of an attacker succeeding should be 1 in 
1024.  For  a  Level  2  certification,  the  attacker’s  success  rate 
should be limited to 1 in 16,384. The resulting number of guesses 
allowed an attacker would then be: 
Level 1: Number of Allowed Guesses = 2H(x) x 2-10
             4 
Level 2: Number of Allowed Guesses = 2H(x) x 2-14             4 
Given these equations, and the ability to calculate H(x), the idea is 
to allow a defender to tailor their password creation policy to the 
level  of  security  that  is  required  and  the  expected  number  of 
guesses  that  an  attacker  would  be  allowed,  (either  via  password 
lockout policy, or rate limiting). The potential problems with this 
approach are 1) Does the calculation for H(x) correspond to user 
behavior,  and  2)  Is  the  Shannon  Entropy  value  equivalent  to  a 
uniformly distributed random key for security purposes? Question 
#2  was  addressed  in  [7,  8],  and  it  has  been  shown  that  the 
Shannon  Entropy  value  is  not  equivalent  to  guessing  entropy 
value. The reason behind this is that the distribution of values is 
not  uniform  across  the  key-space.  A  quick  counter-example  to 
demonstrate  this:  For  Equation  4  to  hold  true  when  applied  to 
passwords,  the  proportion  of  passwords  cracked  would  have  to 
increase linearly with the number of guesses made. The examples 
shown later on in Section 4 clearly show this is not the case.  
In  [7],  an  alternate  metric  for  measuring  password  strength  was 
proposed,  but  as  the  authors  admit,  it  is  only  applicable  for 
situations  such  as  one-time  keys,  and  not  for  human  generated 
passwords  intended  for  day-to-day  use.  Therefore  because  the 
Shannon Entropy does not correlate to the Guessing Entropy, this 
paper will focus on answering question #1, and more specifically, 
how  much  security  is  provided  by  existing  password  creation 
rules, such as specifying a minimum password length, or requiring 
a digit. In addition, we will also refer back to the SP800-63 notion 
of  entropy 
to  further  provide  empirical  evidence  of 
its 
shortcomings to back up the proofs already laid out in [7, 8]. 
4. 
Effectiveness of Entropy against 
Password Cracking Attacks 
In this section, we evaluate the entropy scoring provided by NIST 
SP800-63  document  against  common  password  cracking 
techniques and real life datasets.  The intent of this analysis is to 
provide  additional  insights  into  the  effectiveness  of  password 
creation policies, and to evaluate the value of the SP800-63 notion 
of entropy in regards to actual password cracking attacks.  
4.1 
To  evaluate  the  security  provided  by  password  creation  policies 
we  need  to  be  able  to  model  the  threats  against  them.  For  this 
Experiment Methodology 
164paper we are primarily concerned about online password cracking 
attacks, where the security of the system is still operational. In an 
online  attack,  the  attacker  selects  a  set  of  targets  and  applies  a 
number  of  guesses  in  an  attempt  to  crack  them.  Each  guess  is 
applied sequentially against each target, and a target is removed 
from evaluation when a guess matches the target’s password. In 
the context of this analysis, a “guess” is therefore a guess against 
each  target  in  the  target  set.    That  is,  if  we  state  that  we  are 
applying “500 guesses”, we mean 500 guesses per target. 
This model allows us to score password attacks as a function of 
success per guesses invested. We expect that most online systems 
follow a per-target lockout policy, meaning that if more than some 
threshold of attacks are made against a target in a limited period, 
that  target  and  only  that  target  are  temporarily  locked  out.  The 
cost  of  making guesses  against two  targets  is  therefore  no  more 
than the cost of making a guess against a single target.  
We can slightly modify our approach if the defender uses a global 
lockout policy (i.e., if the defender locks out all targets if attacks 
exceed a certain threshold). If all of the targets are of equal worth, 
an  attacker  will  spend  their  time  making  the  most  probable 
guesses against each target. Therefore the attack strategies remain 
the  same.  The  one  difference  is  our  simulation  of  per-target 
lockout policy presents a slightly optimistic view for the defender 
if a global lockout policy is in place since in a real life attack, if an 
attacker  manages  to  crack  a  password  they  will  stop  making 
guesses  against  it  and  use  their  time  to  focus  on  the  remaining 
passwords  instead.  That  caution  also  applies  to  the  rest  of  the 
results  in  this  paper,  as  it  is  always  possible  for  an  attacker  to 
come up with attack methods that performs better than the ones 
we modeled. 
The majority of tests in this paper use passwords collected from 
the RockYou password list [6]. The RockYou set was originally 
obtained  by  an  attacker  who  utilized  a  SQL  injection  attack 
against  the  rockyou.com  website,  and  then  later  posted  the 
passwords  online.  RockYou  provided  applications  for  numerous 
social  networking  sites  such  as  Facebook,  MySpace,  and 
Friendster, and thus included the associated login details created 
by  users  for  those  sites.  The  actual  list  itself  contained  over  32 
million passwords. Due to the list’s size, we used the GNU shuf 
tool  to  randomize  it  and  then  divided  the  list  into  32  sub-lists 
containing  one  million  passwords  each.  This  allows  us  to  run 
experiments  against  a  smaller  set  of  passwords,  while  leaving 
other  sub-lists  untainted  for  use  in  future  tests.  Using  standard 
machine learning techniques, currently we have assigned the first 
five sub-lists, RockYou_test1 through RockYou_test5, as part of a 
test  set,  while  the  last  five  sub-lists,  Rockyou-train28  through 
RockYou_train32  for  use  in  training  new  attacks.  Therefore  we 
are not training and testing against the same passwords. 
Because the RockYou list represents passwords collected from a 
diverse  set  of  web  sites,  there  is  no  single  password  creation 
policy that affects all  of  the  words  in  the  list. We  can  therefore 
examine the resulting distribution of these passwords as evaluated 
by  the  SP800-63  entropy  score.  To  model  this,  the  maximum 
entropy  value  for  a  creation  policy  which  a  password  could  be 
generated under was evaluated using the rules NIST put forward, 
with  Rule  5  being  interpreted  as  requiring  numbers,  special 
characters  and  uppercase.  In  addition,  it  is  assumed  that  no 
blacklists of forbidden passwords were used. The resulting graph 
measuring  the  maximum  entropy  score  for  passwords  from  the 
RockYou_test1-3 sets can be seen in Fig 4.1.1. 
Figure 4.1.1: Maximum SP800-63 Password Creation Policies 
of the RockYou Data-Set 
The NIST entropy values displayed ranged from 4, (the minimum 
possible  under  the  SP800-63  rules),  to  32.  The  highest  entropy 
value detected was 278, (which may have represented a password 
created by a spammer or a junk value that was somehow imported 
into  the  database).  The  above  results  also  give  a  general 
breakdown  of  the  password  length  distribution,  since  very  few 
passwords managed to meet Rule #5. This is also why there were 
very few passwords which had an entropy value of 22 or 24. Since 
there  was  no  uniform  password  creation  policy  in  effect,  the 
results  in  Fig  4.1.1  are  likely  to  be  a  reasonable  estimate  of 
“normal” user password generation.   
4.2  Minimum Password Length, Digits, and 
Why Password Entropy is not Valid 
The  next  step  is  to  attempt  to  evaluate  the  impact  of  individual 
password  creation  policies  on  the  success  of  password  cracking 
attacks.  The  first  creation  policy  we  will  examine  is  minimum 
password  length.  Since  we  did  not  have  examples  of  users 
creating  passwords  under  different  length  password  creation 
policies, we attempted to model these policies by further dividing 
the  test  lists  based  on  the  minimum  length  passwords  found  in 
them. Therefore a “7+ sub-list” would contain all the passwords 
from the parent list that were seven or more characters long. 
For the first test, we wanted to show a longer password cracking 
session  that  would  probably  only  be  performed  in  an  offline 
attack.  While  the  SP800-63  document  is  more  concerned  with 
online attacks, we felt that the results were useful for comparison, 
and for modeling other threats. To simulate an offline attack, the 
popular cracking tool John the Ripper [9] was used, along with its 
“Single mode” rule-set, (a collection of rules which create a much 
longer  password  cracking  session  than  their  default  rule-set). 
Since this is a dictionary based attack, the input dictionary used 
was  Dic-0294,  which  is  a  commonly  used  password  cracking 
dictionary [10]. This dictionary contained 869,228 unique words, 
and the number of guesses was significantly higher due to every 
mangling rule being applied to each applicable word. Since it can 
be  assumed  that  the  attacker  has  knowledge  of  the  password 
creation  policy,  we  did  not  permit  John  the  Ripper  to  make 
guesses shorter than what was allowed for the list it was targeting. 
The  results  of  running  these  cracking  sessions  against  the 
RockYou_test1  list  divided  in  subsets  by  minimum  password 
length can be seen in Fig 4.2.1. The percentage cracked refers to 
the number of passwords cracked in each individual sub-list, and 
not of the total set. 
165running  the  password  cracking  attacks  when  digits  are  required 
can be seen in Fig. 4.2.2. 
Figure 4.2.2: Results of Minimum Password Length and 
Requiring Digits on Longer Password Cracking Sessions 
The test shows, that even when all passwords sets were required 
to  contain  digits,  there  still  was  a  noticeable  difference  in  the 
effectiveness of the attacks against the different test sets divided 
by  minimum  password  length.  That  being  said,  the  divergence 
between the test sets was less than if no digits were required; The 
attack against  the  7+  character  set  performed  worse  when  digits 
were  required,  and  the  attack  against  the  10+  character  set 
surprisingly performed slightly better when digits were required. 
Note: it would probably be the wrong conclusion to assume that 
requiring digits would make 10 character long passwords weaker. 
What more likely happened was that this additional rule excluded 
“junk” passwords in the list that did not correspond to an actual 
user  generated  password,  (for  example  some  very  long  URLs 
were present in the RockYou list). In addition several passwords 
may have been created in a way that made them strong but did not 
include digits, such as certain pass-phrases. By excluding digits, 
some of these strong passwords may have been excluded as well. 
The  biggest  difference  though,  from  a  defender’s  perspective,  is 
that  the  requirement  of  a  digit  to  be  present  significantly 
decreased the effectiveness of the password cracking attack in the 
first hundred million guesses. 
Looking  at  how  users  incorporated  digits  into  their  passwords, 
Table  4.2.2  shows 
the 
RockYou_Training32 list. 
the  most  popular  digits  used 
in 
1 
2 
123 
4 
3 
#6 
#7 
#8 
#9 
#10 
123456 
12 
7 
13 
5 
Percentage 
1.74% 
1.49% 
1.20% 
1.07% 
1.04% 
Percentage 
10.98% 
2.79% 
2.29% 
2.10% 
2.02% 