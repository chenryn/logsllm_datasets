        :::
    [access]{.term}
    :   ::: para
        *access* 是以下一个或者多个字母的序列：
        :::
        ::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
        -   ::: para
            `r`{.literal} ------ 允许任务从指定设备中读取
            :::
        -   ::: para
            `w`{.literal} ------ 允许任务对指定设备写入
            :::
        -   ::: para
            `m`{.literal} ------ 允许任务创建还不存在的设备文件
            :::
        :::
        ::: para
        例如：当将 *access* 被指定为 `r`{.literal}
        时，则任务只能从指定设备中读取，但将 *access* 指定为
        `rw`{.literal} 时，则任务既可从该设备中读取，也可向该设备写入。
        :::
    :::
[devices.deny]{.term}
:   ::: para
    指定 cgroup 任务无权访问的设备。条目语法与
    `devices.allow`{.filename} 一致。
    :::
[devices.list]{.term}
:   ::: para
    报告 cgroup 任务对其访问受限的设备。
    :::
:::
:::
::: section
::: titlepage
# [⁠]{#ch-Subsystems_and_Tunable_Parameters.html#sec-freezer}A.6. freezer {.title}
:::
::: para
`freezer`{.systemitem} 子系统可以暂停或者恢复 cgroup 中的任务。
:::
::: variablelist
[freezer.state]{.term}
:   ::: para
    `freezer.state`{.systemitem} 只能用于非 root cgroup
    中，它有三个可能的值：
    :::
    ::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
    -   ::: para
        `FROZEN`{.literal} ------ cgroup 中的任务已被暂停。
        :::
    -   ::: para
        `FREEZING`{.literal} ------ 系统正在暂停 cgroup 中的任务。
        :::
    -   ::: para
        `THAWED`{.literal} ------ cgroup 中的任务已恢复。
        :::
    :::
:::
::: para
如要暂停某一进程：
:::
::: {.procedure xmlns:d="http://docbook.org/ns/docbook"}
1.  ::: para
    请将该进程移动到已附加 `freezer`{.systemitem} 子系统层级的 cgroup
    中。
    :::
2.  ::: para
    冻结此 cgroup 以便暂停其中的进程。
    :::
:::
::: para
进程不能移至已暂停（已冻结）的 cgroup 中。
:::
::: para
请注意：虽然 `FROZEN`{.literal} 和 `THAWED`{.literal} 值可写入
`freezer.state`{.filename}，但 `FREEZING`{.literal}
无法被写入，只能读取。
:::
:::
::: section
::: titlepage
# [⁠]{#ch-Subsystems_and_Tunable_Parameters.html#sec-memory}A.7. memory {.title}
:::
::: para
`memory`{.systemitem} 子系统自动生成 cgroup
任务使用内存资源的报告，并限定这些任务所用内存的大小：
:::
::: variablelist
[memory.stat]{.term}
:   ::: para
    报告大范围内存统计，见下表：
    :::
    ::: table
    [⁠]{#ch-Subsystems_and_Tunable_Parameters.html#memorystat}
    **表 A.2. memory.stat 报告的值**
    ::: table-contents
      -----------------------------------------------------------------------------------------------------------
      统计数据                                   描述
      ------------------------------------------ ----------------------------------------------------------------
      `cache`{.systemitem}                       缓存页，包括
                                                 `tmpfs`{.systemitem}（`shmem`{.systemitem}），单位为字节
      `rss`{.systemitem}                         匿名和 swap 缓存，"[*不*]{.emphasis}"包括
                                                 `tmpfs`{.systemitem}（`shmem`{.systemitem}），单位为字节
      `mapped_file`{.systemitem}                 memory-mapped 映射文件大小，包括
                                                 `tmpfs`{.systemitem}（`shmem`{.systemitem}），单位为字节
      `pgpgin`{.systemitem}                      读入内存的页数
      `pgpgout`{.systemitem}                     从内存中读出的页数
      `swap`{.systemitem}                        swap 用量，单位为字节
      `active_anon`{.systemitem}                 激活的"近期最少使用"（least-recently-used，LRU）列表中的匿名和
                                                 swap 缓存，包括
                                                 `tmpfs`{.systemitem}（`shmem`{.systemitem}），单位为字节
      `inactive_anon`{.systemitem}               未激活的 LRU 列表中的匿名和 swap 缓存，包括
                                                 `tmpfs`{.systemitem}（`shmem`{.systemitem}），单位为字节
      `active_file`{.systemitem}                 激活的 LRU 列表中的 file-backed 内存，以字节为单位
      `inactive_file`{.systemitem}               未激活 LRU 列表中的 file-backed 内存，以字节为单位
      `unevictable`{.systemitem}                 无法收回的内存，以字节为单位
      `hierarchical_memory_limit`{.systemitem}   包含 `memory`{.systemitem} cgroup 层级的内存限制，单位为字节
      `hierarchical_memsw_limit`{.systemitem}    包含 `memory`{.systemitem} cgroup 层级的内存加 swap
                                                 限制，单位为字节
      -----------------------------------------------------------------------------------------------------------
    :::
    :::
    ::: para
    另外，这些文件除 `hierarchical_memory_limit`{.systemitem} 和
    `hierarchical_memsw_limit`{.systemitem} 之外，都有一个对应前缀
    `total`{.systemitem}，它不仅可在该 cgroup 中报告，还可在其子 cgroup
    中报告。例如：`swap`{.systemitem} 报告 cgroup 的 swap
    用量，`total_swap`{.systemitem} 报告该 cgroup 及其所有子群组的 swap
    用量总和。
    :::
    ::: para
    当您解读 `memory.stat`{.systemitem}
    报告的数值时，请注意各个统计数据之间的关系：
    :::
    ::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
    -   ::: para
        `active_anon`{.systemitem} + `inactive_anon`{.systemitem} =
        匿名内存 + `tmpfs`{.systemitem} 文件缓存 + swap 缓存
        :::
        ::: para
        因此，`active_anon`{.systemitem} + `inactive_anon`{.systemitem}
        ≠ `rss`{.systemitem}，因为 `rss`{.systemitem} 不包括
        `tmpfs`{.systemitem}。
        :::
    -   ::: para
        `active_file`{.systemitem} + `inactive_file`{.systemitem} =
        缓存 - `tmpfs`{.systemitem} 大小
        :::
    :::
[memory.usage_in_bytes]{.term}
:   ::: para
    报告 cgroup 中进程当前所用的内存总量（以字节为单位）。
    :::
[memory.memsw.usage_in_bytes]{.term}
:   ::: para
    报告该 cgroup 中进程当前所用的内存量和 swap
    空间总和（以字节为单位）。
    :::
[memory.max_usage_in_bytes]{.term}
:   ::: para
    报告 cgroup 中进程所用的最大内存量（以字节为单位）。
    :::
[memory.memsw.max_usage_in_bytes]{.term}
:   ::: para
    报告该 cgroup 中进程的最大内存用量和最大 swap
    空间用量（以字节为单位）。
    :::
[memory.limit_in_bytes]{.term}
:   ::: para
    设定用户内存（包括文件缓存）的最大用量。如果没有指定单位，则该数值将被解读为字节。但是可以使用后缀代表更大的单位
    ------ `k`{.literal} 或者 `K`{.literal} 代表千字节，`m`{.literal}
    或者 `M`{.literal} 代表兆字节 ，`g`{.literal} 或者 `G`{.literal}
    代表千兆字节。
    :::
    ::: para
    您不能使用 `memory.limit_in_bytes`{.systemitem} 限制 root
    cgroup；您只能对层级中较低的群组应用这些值。
    :::
    ::: para
    在 `memory.limit_in_bytes`{.systemitem} 中写入 `-1`{.literal}
    可以移除全部已有限制。
    :::
[memory.memsw.limit_in_bytes]{.term}
:   ::: para
    设定内存与 swap
    用量之和的最大值。如果没有指定单位，则该值将被解读为字节。但是可以使用后缀代表更大的单位
    ------ `k`{.literal} 或者 `K`{.literal} 代表千字节，`m`{.literal}
    或者 `M`{.literal} 代表兆字节，`g`{.literal} 或者 `G`{.literal}
    代表千兆字节。
    :::
    ::: para
    您不能使用 `memory.memsw.limit_in_bytes`{.systemitem} 来限制 root
    cgroup；您只能对层级中较低的群组应用这些值。
    :::
    ::: para
    在 `memory.memsw.limit_in_bytes`{.systemitem} 中写入 `-1`{.literal}
    可以删除已有限制。
    :::
    ::: {#ch-Subsystems_and_Tunable_Parameters.html#important-Order-of-setting-memory.limit_in_bytes-and-memory.memsw.limit_in_bytes .important xmlns:d="http://docbook.org/ns/docbook"}
    ::: admonition_header
    **设定 memory.memsw.limit_in_bytes 和 memory.limit_in_bytes 参数**
    :::
    ::: admonition
    ::: para
    在设定 `memory.memsw.limit_in_bytes`{.systemitem}
    参数[*"之前"*]{.emphasis}设定 `memory.limit_in_bytes`{.systemitem}
    参数非常重要：顺序颠倒会导致错误。这是因为
    `memory.memsw.limit_in_bytes`{.systemitem}
    只有在消耗完所有内存限额（之前在
    `memory.limit_in_bytes`{.systemitem} 中设定）后方可用。
    :::
    ::: para
    请参考下列例子：为某一 cgroup 设定
    `memory.limit_in_bytes = 2G`{.systemitem} 和
    `memory.memsw.limit_in_bytes = 4G`{.systemitem}， 可以让该 cgroup
    中的进程分得 2GB 内存，并且一旦用尽，只能再分得 2GB
    swap。`memory.memsw.limit_in_bytes`{.systemitem} 参数表示内存和 swap
    的总和。没有设置 `memory.memsw.limit_in_bytes`{.systemitem} 参数的
    cgroup 的进程可以使用全部可用 swap
    （当限定的内存用尽后），并会因为缺少可用 swap 触发 Out of
    Memory（内存不足） 状态。
    :::
    ::: para
    `/etc/cgconfig.conf`{.filename} 文件中
    `memory.limit_in_bytes`{.systemitem} 和
    `memory.memsw.limit_in_bytes`{.systemitem}
    参数的顺序也很重要。以下是正确的配置示例：
    :::
    ``` screen
    memory {
        memory.limit_in_bytes = 1G;
        memory.memsw.limit_in_bytes = 1G;
    }
    ```
    :::
    :::
[memory.failcnt]{.term}
:   ::: para
    报告内存达到 `memory.limit_in_bytes`{.systemitem}
    设定的限制值的次数。
    :::
[memory.memsw.failcnt]{.term}
:   ::: para
    报告内存和 swap 空间总和达到
    `memory.memsw.limit_in_bytes`{.systemitem} 设定的限制值的次数。
    :::
[memory.force_empty]{.term}
:   ::: para
    当设定为 `0`{.literal} 时，该 cgroup
    中任务所用的所有页面内存都将被清空。这个接口只可在 cgroup
    没有任务时使用。如果无法清空内存，请在可能的情况下将其移动到父
    cgroup 中。移除 cgroup 前请使用 `memory.force_empty`{.systemitem}
    参数以免将废弃的页面缓存移动到它的父 cgroup 中。
    :::
[memory.swappiness]{.term}
:   ::: para
    将 kernel 倾向设定为换出该 cgroup
    中任务所使用的进程内存，而不是从页高速缓冲中再生页面。这与
    `/proc/sys/vm/swappiness`{.filename}
    为整体系统设定的倾向、计算方法相同。默认值为 `60`{.literal}。低于
    `60`{.literal} 会降低 kernel 换出进程内存的倾向；高于 `0`{.literal}
    会增加 kernel 换出进程内存的倾向。高于 `100`{.literal} 时，kernel
    将开始换出作为该 cgroup 中进程地址空间一部分的页面。
    :::
    ::: para
    请注意：值 `0`{.literal}
    不会阻止进程内存被换出；系统内存不足时，换出仍可能发生，因为全局虚拟内存管理逻辑不读取该
    cgroup 值。要完全锁定页面，请使用 `mlock()`{.function} 而不是
    cgroup。
    :::
    ::: para
    您不能更改以下群组的 swappiness：
    :::
    ::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
    -   ::: para
        root cgroup，它使用 `/proc/sys/vm/swappiness`{.filename} 设定的
        swappiness。
        :::
    -   ::: para
        有子群组的 cgroup。
        :::
    :::
[memory.use_hierarchy]{.term}
:   ::: para
    包含标签（`0`{.literal} 或者
    `1`{.literal}），它可以设定是否将内存用量计入 cgroup
    层级的吞吐量中。如果启用（`1`{.literal}），内存子系统会从超过其内存限制的子进程中再生内存。默认情况下（`0`{.literal}），子系统不从任务的子进程中再生内存。
    :::
[memory.oom_control]{.term}
:   ::: para
    包含标签（`0`{.literal} 或者 `1`{.literal}），它可以为 cgroup
    启用或者禁用"内存不足"（Out of Memory，OOM）
    终止程序。如果启用（`0`{.literal}），尝试消耗超过其允许内存的任务会被