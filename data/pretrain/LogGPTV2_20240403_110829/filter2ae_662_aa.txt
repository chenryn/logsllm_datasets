## 前言：
赛后花时间复现了一下很少人做出来的momo_server，大佬们还是强呀。
## 正文：
这道题在分析程序执行流程上面就有一定的难度，要对`http`协议有一定的了解程度才能很快的分析完执行流程。先来看看整个程序的执行流程：
前半段：
    v7 = 1;
      memset(&v6, 0, 0x10000uLL);
      v9 = read(0, s, v8 - 1);
      if ( v9 >= 0 )
      {
        *((_BYTE *)s + v9) = 0;
        __isoc99_sscanf(s, "%s %s %s \n", &s1, &v15, &v14);
        if ( !strstr((const char *)s, "Connection: keep-alive") )
          v7 = 0;
        v12 = sub_40176B((const char *)s);
`__isoc99_sscanf`类似于正则表达式，具体的可以自行去看函数定义，在这里的作用是用空格做分隔符，将输入的字符串切割后分别赋值给`s1`、`v15`、`v14`。`strstr`是查询子字符串，所以这里的作用是如果在输入中查不到`Connection:
keep-alive`字符串，则`v7`变为0，程序最后会直接退出。所以为了让程序一直运行不退出，输入必须带有`Connection: keep-alive`字符串。
再来看看程序功能：
    if ( !strcmp(&s1, "GET") )
        {
          if ( !strcmp(&v15, "/") )
          {
            sub_400E67();
          }
          else if ( !strcmp(&v15, "/list") )
          {
            sub_400E82();
          }
          else
          {
            sub_400E4C();
          }
        }
如果`s1`,`v15`分别为`GET`,`/`则执行`sub_400E67()`。该函数具体没什么用，往下是`sub_400E82()`函数，这个函数先放着，看名字`list`可以大致猜测到是“显示堆”功能的函数。再往下`sub_400E4C()`函数也没什么用。所以想要调用`/list`函数可以这样构造输入：
> GET /list Connection: keep-alive
往下看：
    else if ( !strcmp(&s1, "POST") )
        {
          if ( !strcmp(&v15, "/add") )
          {
            sub_4011EE(v12);
          }
          else if ( !strcmp(&v15, "/count") )
          {
            sub_4016A8();
          }
          else if ( !strcmp(&v15, "/echo") )
          {
            sub_4010CB(v12, (__int64)"/echo", v3, v4, v5);
          }
          else
          {
            sub_400E4C();
          }
        }
原理如上，这里需要提上一嘴的是第一个函数中传入了`v12`参数，往上看可以发现`v12`由`sub_40176B()`得来：
    char *__fastcall sub_40176B(const char *a1)
    {
      char *v2; // [rsp+18h] [rbp-8h]
      if ( strstr(a1, "\r\n\r\n") )
        return strstr(a1, "\r\n\r\n") + 4;
      if ( strstr(a1, "\n\n") )
        return strstr(a1, "\n\n") + 2;
      if ( strstr(a1, "\r\r") )
        v2 = strstr(a1, "\r\r") + 2;
      return v2;
    }
查询子字符，如果有以上三种中的一种则返回其中一种字符串的后面内容，比如我输入了`v1nke1\r\n\r\nv1nke2`，则返回`v1nke2`字符。
进入`/add`函数中分析：
    if ( (unsigned int)__isoc99_sscanf(v1, "%10[^=]=%80s", &s, &s2, v2)
        && (v3 = strtok(0LL, "&"), (unsigned int)__isoc99_sscanf(v3, "%10[^=]=%10s", &s1, &nptr, v4)) )
      {
        if ( !strcmp(&s, "memo") && s2 && (v5 = "count", !strcmp(&s1, "count")) && nptr && atoi(&nptr) >= 0 )
这段对传入参数`v12`做处理，先用`&`做分隔符分成两段字符串，前一段中取`=`前面部分赋值给`s`,`=`后面赋值给`s2`。后一段取`=`前给`s1`,`=`后给`nptr`。
后面的`if`语句是要求`s`为`memo`，`s1`为`count`。且`nptr`为数字且大于0。
往后：
    for ( i = 0; i <= 15 && *(&ptr + i); ++i )
          {
            if ( *(_QWORD *)*(&ptr + i) )
            {
              v5 = &s2;
              if ( !strcmp(*(const char **)*(&ptr + i), &s2) )
              {
                v6 = (__int64)*(&ptr + i);
                *(_DWORD *)(v6 + 8) = atoi(&nptr);
                *((_WORD *)*(&ptr + i) + 6) = 0;
                sprintf(&v19, "{\"status\":\"%s\"}", "ok");
                pprint((__int64)"HTTP/1.1 200 OK", (__int64)"application/json", &v19);
                return __readfsqword(0x28u) ^ v20;
              }
            }
          }
这段函数引起`double free`漏洞。后面可以充分体会到。
    v7 = (char **)malloc(0x10uLL);
          v8 = strlen(&s2);
          v9 = (char *)malloc(v8);
          *v7 = v9;
          sub_400D84(&s2, (__int64)v5, (__int64)v9, v10, v11);
          v12 = strlen(&s2);
          strncpy(*v7, &s2, v12 + 1);
          *((_DWORD *)v7 + 2) = atoi(&nptr);
          *((_WORD *)v7 + 6) = 0;
          *(&ptr + i) = v7;
          sprintf(&v19, "{\"status\":\"%s\"}", "ok");
          pprint((__int64)"HTTP/1.1 200 OK", (__int64)"application/json", &v19);
这里可以看到该函数先分配`0x20`的堆结构体，然后根据`memo=`后边的内容大小分配合适的堆。再将`count=`后面的数字赋值到堆结构体中去，并在六字节处置0。最后`&ptr`位于bss段，将堆结构体指针赋值到bss段中。这里再往回看`/list`中的内容，就明白了其具体内容就是显示分配堆中的内容。
往下看第二个函数：
    if ( pthread_create(&newthread, 0LL, (void *(*)(void *))start_routine, 0LL) )
      {
        sub_401041((__int64)"failed");
      }
开了一个多线程函数，进入到`start_routine`函数中去：
    do
      {
        v2 = 0;
        for ( i = 0; i <= 15; ++i )
        {
          if ( *(&ptr + i) )
          {
            if ( *((_DWORD *)*(&ptr + i) + 2) <= 0 )
            {
              if ( !*((_DWORD *)*(&ptr + i) + 2) && *((_WORD *)*(&ptr + i) + 6) )
              {
                *((_WORD *)*(&ptr + i) + 6) = 0;
                free(*(void **)*(&ptr + i));
              }
            }
            else
            {
              --*((_DWORD *)*(&ptr + i) + 2);
              *((_WORD *)*(&ptr + i) + 6) = 1;
              ++v2;
            }
          }
        }
        result = sleep(1u);
      }
      while ( v2 );
遍历15个堆结构，根据所赋值的`count=`后的数字是否小于等于0，否则减一，再将第六位赋值为1，是则第六位置零，并`free`堆，这里存在`UAF`漏洞，没有清空指针。
后面的`echo`函数没有用，但是官方给出的writeup说是echo函数中没有00截断字符串，会泄漏地址。但是我实际调试当中发现是有00截断的，没办法泄漏地址，只是一个你输入了什么原样输出的一个函数而已。。
### 利用构造：
这里就用`double
free`来利用，先添加四个0x20的堆和五个0x40的堆，除最后一个0x40的堆外别的堆count置为1。而后free掉八组堆，成为fastbin。
    0x12b5000:  0x0000000000000000  0x0000000000000021 < -- 1
    0x12b5010:  0x00000000012b5030  0x0000000000000000
    0x12b5020:  0x0000000000000000  0x0000000000000021
    0x12b5030:  0x0000000000000000  0x0000000000000000