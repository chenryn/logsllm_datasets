#### jupyterlab
**安装运行**
```bash
pip3 install jupyterlab
jupyter lab --ip=0.0.0.0 --allow-root         # 运行
# 或
jupyter lab --ip=* --allow-root               # 允许所有IP访问
```
**管理**
```bash
jupyter-notebook list                         # 查看令牌
jupyter-labextension list                     # 列出已安装扩展
jupyter-labextension uninstall my-extension   # 卸载已安装扩展
```
---
### Ruby
**官网**
- https://www.ruby-lang.org
**安装**
下载 ruby 安装包,并进行编译安装
```bash
wget https://cache.ruby-lang.org/pub/ruby/3.0/ruby-3.0.0.tar.gz
tar xvfvz ruby-3.0.0.tar.gz
cd ruby-3.0.0
./configure
make
make install
```
将 ruby 添加到环境变量,ruby 安装在/usr/local/bin/目录下,因此编辑 ~/.bash_profile文件,添加一下内容:
```bash
vim ~/.bash_profile
export PATH=$PATH:/usr/local/bin/
```
```bash
source ~/.bash_profile  # 不要忘了生效一下
```
---
### Rust
**官网**
- https://www.rust-lang.org
**安装**
```bash
curl https://sh.rustup.rs -sSf | sh
或
dnf install rust cargo
```
**测试安装**
```bash
rustc --version
cargo --version
tee hello.rs 
**官网**
- https://jenkins.io/
`注,Jenkins 需要 jdk 环境,请先行安装`
**rpm 包方式安装**
添加 Jenkins 源:
```bash
wget -O /etc/yum.repos.d/jenkins.repo http://jenkins-ci.org/redhat/jenkins.repo
rpm --import http://pkg.jenkins-ci.org/redhat/jenkins-ci.org.key
```
使用 yum 命令安装 Jenkins:
```bash
yum install -y jenkins
```
**使用 ppa/源方式安装**
```bash
wget -q -O - https://pkg.jenkins.io/debian/jenkins.io.key | apt-key add -
sed -i "1ideb https://pkg.jenkins.io/debian binary/" /etc/apt/sources.list
apt-get update
apt-get install -y jenkins
```
安装后默认服务是启动的,默认是 8080 端口,在浏览器输入 : http://127.0.0.1:8080/即可打开主页
查看密码
```
cat /var/lib/jenkins/secrets/initialAdminPassword
```
---
### JumpServer
**官网**
- http://www.jumpserver.org/
**安装**
> 以下部分内容来自 [[官方文档](https://docs.jumpserver.org/zh/master/)] 在此只记录重点
`注:鉴于国内环境,下面步骤运行中还是会出现 docker pull 镜像超时的问题,你懂的,不要问我怎么解决`
```bash
curl -sSL https://github.com/jumpserver/jumpserver/releases/download/2.0.1/quick_start.sh | sh
```
---
### Loganalyzer
> 日志收集系统
**安装**
这里以 LAMP 环境为例
```bash
yum install -y httpd mariadb mariadb-server php php-mysql mysql-devel
systemctl start mariadb
systemctl restart httpd
firewall-cmd --zone=public --add-service=http --permanent
firewall-cmd --reload
```
```vim
vim /etc/httpd/conf/httpd.conf
    DirectoryIndex index.php index.html
```
```bash
yum install -y rsyslog-mysql
cd /usr/share/doc/rsyslog-8.24.0/
mysql -uroot -p  注意 : 此处只是为了方便演示,生产环境下请不要使用类似 Syslog 这类弱口令
```vim
vim /etc/rsyslog.conf
$ModLoad immark
$ModLoad imudp
$UDPServerRun 514
$ModLoad imtcp
$ModLoad ommysql
*.* :ommysql:localhost,Syslog,rsyslog,Syslog
```
`注:同样,这里数据库账号链接的密码自己也记得改一下`
```bash
wget -c http://download.adiscon.com/loganalyzer/loganalyzer-4.1.7.tar.gz
tar xf loganalyzer-4.1.7.tar.gz -C /tmp/
cd /tmp/loganalyzer-4.1.7/
# !!注: 我这里有个删除 /var/www/html/ 下文件的操作,看清楚再执行!!
rm -rf /var/www/html/*
cp -a src/* /var/www/html/
cp -a contrib/* /var/www/html/
chmod +x /var/www/html/*.sh
cd /var/www/html
./configure.sh
```
```bash
echo 1 > /var/log/syslog
```
然后访问 127.0.0.1 即可看到初始化安装界面,在 step3 记得选择 `Enable User Database`
- Database Host:localhost
- Database Port:3306
- Database Name:Syslog
- Table prefix:logcon_
- Database User:Syslog
- Database Password:Syslog  `注: 密码自己记得改`
---
### Supervisor
**官网**
- http://supervisord.org/
**安装**
因为 Supervisor 是 Python 开发的,安装前先检查一下系统否安装了 Python2.4 以上版本.
```bash
pip install supervisor
```
安装完成后,我们使用 echo_supervisord_conf 命令创建一个 Supervisor 配置文件
```bash
echo_supervisord_conf > /etc/supervisord.conf
```
**配置**
接着在 /etc/supervisord.conf 文件最下方加入目标程序的启动项目
```conf
vim /etc/supervisord.conf
; [program:xx]是被管理的进程配置参数,xx是进程的名称
[program:xx]
command=/opt/apache-tomcat-8.0.35/bin/catalina.sh run  ; 程序启动命令
autostart=true       ; 在 supervisord 启动的时候也自动启动
startsecs=10         ; 启动10秒后没有异常退出,就表示进程正常启动了,默认为1秒
autorestart=true     ; 程序退出后自动重启,可选值:[unexpected,true,false],默认为 unexpected,表示进程意外杀死后才重启
startretries=3       ; 启动失败自动重试次数,默认是3
user=tomcat          ; 用哪个用户启动进程,默认是root
priority=999         ; 进程启动优先级,默认999,值小的优先启动
redirect_stderr=true ; 把 stderr 重定向到 stdout,默认 false
stdout_logfile_maxbytes=20MB  ; stdout 日志文件大小,默认 50MB s
tdout_logfile_backups = 20   ; stdout 日志文件备份数,默认是10
; stdout 日志文件,需要注意当指定目录不存在时无法正常启动,所以需要手动创建目录 (supervisord 会自动创建日志文件)
stdout_logfile=/opt/apache-tomcat-8.0.35/logs/catalina.out
stopasgroup=false     ;默认为 false,进程被杀死时,是否向这个进程组发送 stop 信号,包括子进程
killasgroup=false     ;默认为 false,向进程组发送 kill 信号,包括子进程
```
注意修改 user = tomcat
接着直接运行 Supervisor 即可让目标程序保持后台运行,运行服务时,需要指定 supervisor 配置文件
```bash
supervisord -c /etc/supervisord.conf
```
```bash
supervisorctl status
supervisorctl stop tomcat
supervisorctl start tomcat
supervisorctl restart tomcat
supervisorctl reread
supervisorctl update
```
**Source & Reference**
- [Supervisor 安装与配置 (Linux/Unix 进程管理工具) ](https://blog.csdn.net/xyang81/article/details/51555473)
---
### Webmin
**官网**
- http://www.webmin.com/index.html
**安装**
在官网下载 RPM 包,上传至服务器,这里以 1.930-1 为例
```bash
yum install -y perl-Net-SSLeay
yum install -y perl-Encode-Detect
yum install -y perl-Data-Dumper
rpm -Uvh webmin-1.930-1.noarch.rpm
firewall-cmd --permanent --zone=public --add-port=10000/tcp
firewall-cmd --reload
```
安装完直接启动,访问 https://127.0.0.1:10000 注意,带 HTTPS
默认账号 root,密码与服务器一致
**修改密码**
```bash
/usr/libexec/webmin/changepass.pl /etc/webmin/ root 1234qwer
```
---
### Zabbix
> zabbix 是一款服务器监控软件,其由 server、agent、web 等模块组成,其中 web 模块由 PHP 编写,用来显示数据库中的结果.
**官网**
- https://www.zabbix.com/
**安装依赖**
```bash
yum install -y mysql
yum install -y httpd
yum install -y php
yum install -y php-mysqlnd php-gd libjpeg* php-snmp php-ldap php-odbc php-pear php-xml php-xmlrpc php-mbstring php-bcmath php-mhash php-common php-ctype php-xml php-xmlreader php-xmlwriter php-session php-mbstring php-gettext php-ldap php-mysqli --skip-broken
yum install -y wget telnet net-tools python-paramiko gcc gcc-c++ dejavu-sans-fonts python-setuptools python-devel sendmail mailx net-snmp net-snmp-devel net-snmp-utils freetype-devel libpng-devel perl unbound libtasn1-devel p11-kit-devel OpenIPMI unixODBC
```
**设置 mysql**
```vim
vim /etc/my.cnf
innodb_file_per_table = 1
innodb_status_file = 1
innodb_buffer_pool_size = 6G
innodb_flush_log_at_trx_commit = 2
innodb_log_buffer_size = 16M
innodb_log_file_size = 64M
innodb_support_xa = 0
default-storage-engine = innodb
bulk_insert_buffer_size = 8M
join_buffer_size = 16M
max_heap_table_size = 32M
tmp_table_size = 32M
max_tmp_tables = 48
read_buffer_size = 32M
read_rnd_buffer_size = 16M
key_buffer_size = 32M
thread_cache_size = 32
innodb_thread_concurrency = 8
innodb_flush_method = O_DIRECT
innodb_rollback_on_timeout = 1
query_cache_size = 16M
query_cache_limit = 16M
collation_server = utf8_bin
character_set_server = utf8
```
原则上 innodb_buffer_pool_size 需要设置为主机内存的 80%,如果主机内存不是 8GB,以上参数可依据相应比例进行调整,例如主机内存为 16GB,则 innodb_buffer_pool_size 建议设置为 12GB,innodb_log_buffer_size 建议设置为 32M,innodb_log_file_size 建议设置为 128M,以此类推.请注意 innodb_buffer_pool_size 的值必须是整数,例如主机内存是4G,那么 innodb_buffer_pool_size 可以设置为 3G,而不能设置为 3.2G
```bash
systemctl enable mysqld && systemctl start mysqld
grep 'temporary password' /var/log/mysqld.log   # 获取 MySQL 的 root 初始密码
mysql_secure_installation                       # 初始化,改下密码
systemctl restart mysqld
mysql -u root -p
  create database zabbix character set utf8;