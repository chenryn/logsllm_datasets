4.6. Other confirmed and potential flaws in studied cases 
In the prior subsections, we describe serious logic flaws 
we  found  in  several  web  SSO  systems.  They  are  actually 
only a tip of the iceberg: there are some other systems either 
vulnerable to our exploits or on the verge of being cracked. 
Table 4 lists eight more cases we studied.  
Table 4: some other cases that we confirmed or found promising  
  The SSO scheme and the specific system-level question 
1 
√ 
SSO: Facebook Legacy Canvas Auth 
Question: does a Facebook app check the signature of BRM3 
that  Facebook  generates?  (The  flaw  was  confirmed  on 
FarmVille.com) 
SSO: Facebook Connect 
Question: does an RP of Facebook SSO redirect the user to an 
attacker’s  URL  despite  a  failed  whitelist  checking?  (The  flaw 
was confirmed on zoho.com.) 
SSO: JanRain’s wrapping of Facebook 
Question: does an RP of JanRain-SSO whitelist *.rpxnow.com, 
not specifically RP-App.rpxnow.com (The flaw was confirmed 
on sears.com) 
2 
√ 
3 
√ 
4  SSO: Facebook SSO with the RP requesting access_token 
Question: what kind of damage can be done by the leakage of 
access_token alone? (We found that the access_token
that Groupon.com requests can be obtained by the attacker.)  
5  SSO: Facebook Connect 
Question:  Can  a  Javascript  in  Bob.com  read  FlashVars  of  a 
Flash  in  the  RP’s  domain,  if  the  Flash  allows  cross-domain 
access? If so, we found that nike.com would be broken. 
6  SSO: Facebook Connect 
Question: does a RP import Facebook’s xd_proxy.php script for 
its cross-domain communication? 
7  SSO: Facebook Connect 
Question:  does  an  RP  have  an  API  for  universal  redirection, 
such as “http://foo.com/redirect.php?url=http://bob.com”? 
8  SSO: SSO on livingsocial.com, toms.com and diigo.com 
Question: when Bob makes Alice’s browser sign onto an RP as 
Bob, can Bob obtain his own session cookie in the browser? 
Our analysis on these cases all led to potential exploit 
avenues,  which  come  down  to  a  few  questions.  Three  of 
these  cases  (with  √  )  were  indeed  confirmed  and  reported. 
More information of these eight cases is described in the full 
version of this paper [33].  
5. RETROSPECTIVE DISCUSSION 
As  discussed  at  the  beginning  of  the  paper,  our  main 
contribution  is  an  extensive  security  study  of  commercial 
web  SSO  systems,  which  aims  at  understanding  their 
security  quality  and  design  pitfalls,  even  in  the  absence  of 
their source code and detailed specifications. This study was 
made  possible  by  a  suite  of  analysis  techniques  we  built. 
Such techniques just serve as a necessary tool for analyzing 
the SSO systems, and their designs, at the current stage, are 
still simple and preliminary: for example, our BRM analyzer 
does not seem to be very advanced. What is really important 
here is the discovery we made using these techniques, which 
reveals  the  gravity  and  pervasiveness  of  security-critical 
logic flaws within commercial web SSO systems. We hope 
that  such  a  discovery  will  provoke  soul-searching  in  web 
376
SSO community, and help build securer SSO systems. Here 
are our preliminary thoughts.    
5.1.  Understanding the SSO vulnerabilities 
Commonalities  in  all  our  vulnerability  investigations. 
All  the  logic  flaws  described  in  the  paper,  no  matter  how 
subtle  they  are,  were  all  discovered  through  a  simple  and 
rather mechanical procedure at the high level:  
(1)  Understand  whether  the  SSO  is  based  on  a  secret 
token  or  an  authentic  token.  Accordingly,  there  are 
only  two  types  of  problems  –  either  a  secret  token 
sent to Bob or an authentic token forged by Bob.  
(2)  Locate  the  token  in  BRMs.  Understand  how  it  is 
propagated or how it is covered by a signature. 
(3)  Apply  adversary  scenarios  to  BRMs  using  Table  3, 
which corresponds to the only three strategies – Bob 
acting  as  another  client,  Bob  acting  as  another  RP 
and Bob acting as a page in Alice’s client.  
Our  success  indicates  that  the  developers  of  today’s 
web SSO systems often fail to fully understand the security 
implications  during  token  exchange,  particularly,  how  to 
ensure that the token is well protected and correctly verified, 
and what the adversary is capable of doing in the process.  
   Variations in the vulnerabilities. The variations are in 
the  non-trivial  details  of  individual  systems.  In  this  study, 
we  spent  a  great  amount  of  effort  demonstrating  such 
variations.  In  Section  4,  we  describe  eight  end-to-end 
confirmed cases, which differ significantly from each other 
in  technical  details  (although  for  each  case,  we  usually 
confirmed the similar vulnerability on several websites), e.g., 
how a signature’s coverage is determined, how the browser 
protects the secrecy of a token, how BRM destinations are 
checked by servers, how accounts are linked together, how a 
website  handles  an  anonymous  visit,  etc.    This  diversity 
comes from the way SSO services are integrated:  each RP 
can integrate the same SSO service differently; the security 
of the integration depends not only on the program logic on 
RP and IdP sites, but also on the underlying web platform. 
Given  such  complexity,  we  feel  that  it  can  be  hard  to 
speculate about how a system can go wrong before looking 
at  its  details.  This  is  why  a  lot  of  detailed  investigations 
need  to  be  conducted  with  human  analyst’s  creativity  and 
domain knowledge. We do believe, however, that for known 
vulnerabilities, one can build a tool to automatically identify 
other websites suffering from similar problems, but it is not 
the focus of this paper.     
RP  developers’  due  diligence.  The  complexity  in 
implementation  and  system  details  suggest  that  it  can  be 
hard  for  IdP  developers  to  anticipate  all  possible  RP 
implementations  in  the  world.  Because  RP  developers  are 
the  people  who  put  together  a  concrete  system,  they  are 
naturally  the  final  gatekeeper  for  its  security.  We  suspect 
that most RP developers today may not realize the necessity 
of  such  a  due  diligence,  but  merely  consider  SSO 
implementation as a task of calling individual APIs on IdPs.   
We believe that an analysis like what we did is helpful, 
so we will soon launch and maintain a service at http://sso-
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:47:30 UTC from IEEE Xplore.  Restrictions apply. 
to  use  our  methodology. 
analysis.org  for  developers 
Developers are obviously in a better position to conduct the 
analysis than us, as they know precisely which data serve as 
the primary user ID, the underlying system features that the 
RP code relies on, and other insider knowledge. 
5.2.  Broader lessons on secure service integrations 
Our  previous  work  studied  how  merchant  websites 
integrate  third-party  cashier  services.  We  discovered  many 
logic  flaws  that allow a  malicious shopper (client) to shop 
for  free  [34].  The  issues  exposed  in  this  paper,  although 
about  SSO,  are  similarly  about  service  integration  logic 
flaws. We believe that many lessons can be learned from the 
two  studies  together  and  applicable  to  other  service 
integration scenarios in general, such as authorizing through 
OAuth, incorporating social networking functionalities, etc. 
5.2.1. Challenges in secure service integrations 
Service integration is done through an application (e.g., 
an  RP  or  a  merchant  website)  calling  APIs  of  a  service 
provider  (e.g.,  an  IdP  or  a  cashier  service).  There  are  two 
reasons for these APIs to cause security problems: 
Underlying  execution  platform  matters.  APIs  are 
designed  at  a  certain  abstraction  level.  It  is  challenging  to 
exhaustively  examine  their  semantics  on  real  operational 
systems. This challenge has caused security issues over and 
over  again.  For  example,  in  the  cashier  service  study,  we 
found  a  problem  due  to  API  developers’  neglect  of  the 
possibility  of  concurrent  HTTP  sessions  of  web  servers 
(Section  III.B.1  of  [34]).  In  the  current  SSO  work,  we 
discovered 
to  consider  Flash’s 
unpredictable  domain  mechanism  and  the  feasibility  of 
posting  a  request  without  referrer.  APIs  designed  without 
thorough  understanding  of  their  execution  platforms  and 
related security implications can be vulnerable. 
that  developers  failed 
and 
setguid. 
“Demystifying” 
Compared  to  secure  implementation  of  APIs,  how  to 
call APIs securely can be even more challenging. Consider 
the notorious strcpy, which itself does not contain a buffer-
overrun  vulnerability,  but  can  easily  introduce  one  to  the 
program  that  calls  it.  As  an  example,  many  Unix-like 
systems provide a family of uid-setting APIs, such as setuid, 
seteuid 
and 
understanding their proper usage  were known to be highly 
nontrivial  [10].  We  believe  that  the  web  APIs  we  studied 
also deserve the same effort to “demystify” the way to use 
them securely. They should be examined with all reasonable 
usage patterns of the calling sites, and with all conceivable 
adversary  assumptions.  For  example,  Google  should  have 
expected reasonable RP websites to use the email element to 
identify  a  user,  and  thus  realized  that  Google  ID  APIs  are 
problematic (see Section 4.1). 
5.2.2. What kind of analysis tools are needed 
them 
Our experience in this study seems to be complimentary 
to  that  of  a  classic  protocol-verification  task  in  several 
aspects.  If  the  verification  community  wants  to  extend  the 
current  methodologies to  the  actual  system level, there are 
377
some new thrusts that need to be addressed by appropriate 
tools.  Below  are  the  main  points  distilled  from  our 
experience, which explain these thrusts.  
Understanding  a  real-world  system  could  be  more 
challenging  than  analyzing  its  well-specified  logic  model. 
Verification techniques typically reason about logic models 
that have been extracted from real systems. For every case 
that we studied, we spent more time on understanding how 
each SSO system work than on reasoning at the pure logic 
level. This suggests that when it comes to examining a real 
system, we would love to have a tool to help us understand 
complex system details more than a tool that replaces us in 
logic reasoning. A desired tool should direct the analyst to 
grasp key details of the system, like a debugger, which does 
not  find  bugs  for  programmers,  but  presents  key  ground 
truths, such as the call stack, etc., to help programmers. Our 
BRM analyzer is designed toward this direction.  
iterative  and 
semi-automatic.  Given 
In-depth  security  analysis  of  a  real  system  often 
happens  under  incomplete  knowledge  and  needs  to  be 
adaptive, 
the 
complexity of a real system, techniques that enable a fully 
automatic  and  also  in-depth  security  analysis  are  still 
remote.  Existing  attempts  to  automate  this  process  often 
require a complete model of the system, which needs to be 
manually  constructed,  before  any  automatic  analysis  can 
happen. However, such a  model is hard to build and often 
too complicated to analyze. What we learned from our study 
is  that  security  testing  of  a  real  system  often  needs  to  be 
performed without complete knowledge of the system, in an 
adaptive  and  iterative  way:  the  analyst  starts  with  partial 
knowledge  of  the  system,  designs  new  tests  to  probe  it, 
reasons about the test results to improve her understanding 
of  the  system,  and  continues  to  walk  through  the  process 
until a viable path is found. This strategy worked well in our 
study, helping us identify subtle logic flaws and implement 
complicated  yet  practical  exploits,  but  we  had  to  manage 
this  process  manually.  A  tool  supporting  this  adaptive 
process is very needed for offloading analysts’ burden. 
How  to  effectively  convert  exploit  conditions  into 
known problems is a valuable research direction. We found 
that it is relatively easy to understand the security premises 
of  the  system,  e.g.,  element  result  should  not  be 
obtained  by  Bob,  or  cookie fbs  should  not  be  forged  by 
Bob,  etc.  However,  it  is  more  difficult  to  convert  these 
premises  into  appropriate  actionable  questions  that  have 
potentially  been  studied  before,  such  as  “can  Adobe  Flash 
do  cross-domain  communication”.  A  methodology/tool  to 
help generate these questions has a great value. 
5.2.3. Potential mitigations to consider 
When a system is complex, developers make mistakes. 
This is especially true for integrations of multiple services 
involving  different  companies.  Miscommunications  is  a 
common  cause  of  logic  flaws.    We  believe  that  good 
mitigations  should  provide  a  good  control  of  the  system 
complexity 
developers’ 
and/or  minimize  website 
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:47:30 UTC from IEEE Xplore.  Restrictions apply. 
programming 
following two directions are worth consideration. 
integration.  For  example, 
load  for 
the 
Using dedicated (or simplified) runtimes to replace the 
general-purpose  web  platform.  There  are  reasons  for  the 
general-purpose web platform to be prefered, e.g., (1) every 
user  knows  how  to  use  a  browser;  (2)  web  programming 
skill is readily available in the job market. However, from 
security  standpoint,  such  a  general  platform  is  difficult  to 
examine  exhausively.  API  designers  may  not  be  aware  of 
certain  browser  capabilities,  which  can  lead  to  vulnerable 
implementation and  open the avenue to potential exploits. 
 Admittedly,  some  serious  attempts  were  made  many 
years  ago  for  security  schemes  not  based  on  the  web 
platform.  However,  they  did  not  get  real  tractions  in  the 
market. For example, Secure Electronic Transaction (SET) 
[35]  was  a  payment  protocol  which  many  big  companies 
contributed to. It was designed at the same time when SSL 
was emerging, so  some of  SET’s security  goals competed 
with  SSL.  Eventually, 
the  payment  schemes  widely 
deployed are PayPal, Amazon Payments, Google Checkout, 
etc, which are based on SSL and the general-purpose web 
technology.  Another  example  is  the  InfoCard  Sign-On 
scheme [4], introduced by Microsoft since Windows Vista. 