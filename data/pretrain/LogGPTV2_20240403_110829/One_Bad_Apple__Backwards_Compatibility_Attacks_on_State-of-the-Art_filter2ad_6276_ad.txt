dards. Both are implemented (or being implemented) in a
wide range of systems processing sensitive data, including
banking [20], eGovernment [34, 46, 69], and eHealth in-
frastructures [16, 18].
XML Encryption.
In order to encrypt XML data in com-
mon Web Services scenarios, usually hybrid encryption is
used. That is, encryption proceeds in two steps:
1. The sender chooses a session key k. This key is en-
crypted with a public-key encryption scheme, under
the receiver’s public-key, which yields a ciphertext
Cpub.
2. The actual payload data is then encrypted with a sym-
metric encryption algorithm using the key k, yielding
a ciphertext Csym.
The XML Encryption W3C standard [27] speciﬁes two
public-key encryption schemes, namely PKCS#1 in ver-
sions 1.5 and 2.0. Both are mandatory to implement.
Furthermore, the standard allows to choose between three
symmetric ciphers: AES-CBC, 3DES-CBC, or AES-GCM.
AES-CBC and 3DES-CBC have been a part of this stan-
dard since its earliest version. AES-GCM was included in
the latest standard draft version in order to prevent a recent
attack on CBC-based XML Encryption [38]. AES-CBC and
3DES-CBC are still included in the standard, for backwards
compatibility reasons. All the three algorithms are manda-
tory to implement for each standard-conformant service.
In the context of Web Services, XML Encryption cipher-
texts are transported in SOAP [33] messages. Figure 3 gives
{"alg":"RSA1_5",
"enc":"A256GCM",
"iv":"__79_Pv6-fg",
"jku":"https://example.com/p_key.jwk"}
Figure 4. JSON Web Encryption header seg-
ment example specifying encryption algo-
rithms.
Javascript Object Signing and Encryption (jose) Working
Group. These standards are quite recent, with the ﬁrst pub-
lic draft dating to January 2012.
JSON Web Encryption.
JSON Web Encryption (JWE)
speciﬁes how to apply encryption schemes to JSON data
structures.
JWE supports different methods for data en-
cryption, using symmetric and public-key encryption al-
gorithms. The current draft 06 of the JWE standard in-
cludes the algorithms AES-CBC with HMAC, AES-GCM,
and AES-KeyWrap as mandatory symmetric ciphers. The
mandatory public-key encryption schemes are PKCS#1
v1.5 and v2.0 encryption.
A JSON Web Encryption message consists of two com-
ponents. The body segment contains a ciphertext encrypting
the payload data. The header segment contains information
about the algorithms used to encrypt this ciphertext con-
tained in the body. An example of a JWE header segment
is given in Figure 4. In this example RSA-PKCS#1 v1.5 is
used to encapsulate a symmetric key. The actual payload
data is encrypted under this key using AES-GCM.
JSON Web Signature. Different methods to secure in-
tegrity and authenticity of JSON messages are provided by
the JSON Web Signature (JWS) [40] standard. Again, in
order to describe our attacks it is sufﬁcient to know that the
JSON Web Signature standard includes the RSA-PKCS#1
v1.5 signature scheme.
Platform for Experimental Analysis. We investigate the
practicality and performance of our attacks on JWE and
JWS by applying them to the Nimbus-JWT library [52].
Nimbus-JWT is a Java implementation of JSON Web En-
cryption (JWE) and JSON Web Signature (JWS), developed
by NimbusDS to support their Cloud Identity management
portfolio.
Even though Nimbus-JWT claims to implement version
02 of the JWE standard draft, it still supports usage of AES-
CBC (without MAC), which was available in version 01, but
not in version 02 or any subsequent versions.
Figure 3. Example of a SOAP message with
encrypted data consisting of two parts: Cpub
encrypting the symmetric key k using RSA-
OAEP and Csym encrypting the actual payload
using AES-GCM.
an example of a SOAP message containing a message en-
crypted according to XML Encryption. In this example the
sender uses PKCS#1 v2.0 in combination with AES-GCM.
XML Signature. Along with XML Encryption, the W3C
Working Group deﬁned the XML Signature standard [29],
which allows to protect integrity and authenticity of XML
messages.
In order to describe our attacks, it is not necessary to
describe the XML Signature standard in detail. It is sufﬁ-
cient to know that in most application scenarios the RSA-
PKCS#1 v1.5 signature scheme is used.
Platform for Experimental Analysis. We analyze the
practicality and performance of our attacks on XML En-
cryption and XML Signature by applying them to the
Apache Web Services Security for Java (Apache WSS4J) li-
brary. This is a widely used library providing Web Services
frameworks with implementations of XML Encryption and
XML Signature. It is used in several major Web Services
frameworks, including JBossWS [39], Apache CXF [5],
and Apache Axis2 [4].
5.1.2 JSON Web Encryption and Signature
JavaScript Object Notation (JSON) is a lightweight text-
based standard for description and exchange of arbitrary
data. The JSON Web Encryption (JWE) [41] and JSON
Web Signature (JWS) [40] standards are maintained by the
                         ...                  Y2bh...fPw==                       3bP...Zx0=      csymcpub5.1.3 Analysis on the Library Level
Note that we test our attacks at the library level, not against
actual applications.
It may therefore be possible that ap-
plications implement speciﬁc countermeasures to prevent
these attacks. However, we stress that preventing most at-
tacks on higher application layers is extremely difﬁcult or
even impossible, as we describe later in this section.
5.2 Breaking AES-GCM
In this section, we describe our practical attacks breaking
indistinguishability of the AES-GCM ciphertexts in XML
Encryption. We ﬁrst describe a performant variant of the
attack from Section 2. Then we present the results of our
experimental evaluation, executed against Apache WSS4J
and, for completeness, against the Nimbus-JWT library.
5.2.1 Plaintext Validity Checking
When processing a symmetric XML Encryption ciphertext,
an XML library typically proceeds as follows.
It takes a
symmetric decryption key and decrypts the ciphertext. Then
the validity of the padding is checked and the padding is re-
moved. Finally, the decrypted plaintext is parsed as XML
data. If any of these steps fails, the process returns a pro-
cessing failure.
In this section we describe how padding scheme and
parsing mechanisms in XML Encryption work. They build
an important ingredient to our optimized attack.
In the sequel let us assume that XML Encryption is used
with a block-cipher of block size bs = 16 byte, like AES,
for instance.
Padding in XML Encryption. XML Encryption uses the
following padding scheme:
1. The smallest non-zero number plen of bytes that must
be padded to the plaintext m to achieve a multiple of
the block size is computed.
2. plen − 1 random padding bytes are appended to m.
3. plen is interpreted as an integer and appended to m.
For instance, when using a block cipher with 16-byte block
size, a 10-byte plaintext block m would be padded to m(cid:48) =
m||pad, where:
pad = 0x??????????06.
Observe that a randomly generated plaintext block is
valid according to the XML Encryption padding scheme
with a probability of Ppad = 16/256 (if a 16-byte block
cipher is used, as we assume), since there are 16 possible
values for the last byte that yield a valid padding.
XML Parsing.
XML is a structured representation of
data. Valid XML plaintexts have to consist of valid charac-
ters and have a valid XML structure. The XML Encryption
standard prescribes that characters and symbols are encoded
according to the UTF-8 [72] code. Parsing XML data that
are not well-formed or contain invalid characters will lead
to parsing errors.
Note that the ﬁrst 128 characters in UTF-8 are identical
to the American Standard Code for Information Interchange
(ASCII) [17]. For simplicity, let us assume in the following
that an XML plaintext consists only of ASCII characters.
The ASCII code represents characters as single bytes, and
allows to encode 27 = 128 different characters.
As the ASCII table includes only 128 characters, the ﬁrst
bit of a byte representing an ASCII character is always equal
to 0. Another characteristic of the ASCII table is that it con-
tains two sets of characters: parsable and non-parsable [38].
Parsable characters include letters, numbers, or punctuation
marks. About a 25% of ASCII characters are non-parsable.
This includes, for example, the NUL, ESC, and BEL charac-
ters. If any of these is contained in an XML document, then
this will lead to a parsing error.
sponds to a parsable character, is about 1/2 · 3/4 = 3/8.
Thus, Pparse, the probability that a random byte corre-
Probability of valid XML ciphertexts.
The fact that
an XML processor responds with an error message if the
padding or the plaintext format of a decrypted message
is invalid allows us to determine whether a given CBC-
encrypted ciphertext is valid or not. This allows us to con-
struct an XML decryption validity oracle OCBCxml, which
takes as input an AES-CBC ciphertext ˜c = ( ˜iv, ˜C (1)), de-
crypts it, and responds with 1 if the plaintext is correct, and
0 otherwise.
In particular, a randomly generated ciphertext ( ˜iv, ˜C (1))
consisting of an initialization vector and one ciphertext
block leads to a decryption error with high probability. The
probability that a random ciphertext is valid is only
15(cid:88)
Pvalid =
(1/256)(3/8)i ≈ 0.0062
i=0
This low probability that a random ciphertext is valid is one
of the key ingredients to our attack.
Plaintext Validity Checking in JWE. The JWE stan-
dard applies a different padding scheme, namely PKCS#5.
This padding scheme has a more restrictive padding validity
check, such that random ciphertexts are rejected with even
higher probability. This improves the success probability of
our attack. In the context of JWE we thus obtain a plaintext
validity oracle OCBCjwe, which is similar to OCBCxml but has
an even smaller false positive rate.
narrow the number of possible values for b, for instance if
the target application accepts only ASCII characters, only
letters, only integers, etc.
Algorithm 1 Recovering a single plaintext byte b from an
AES-GCM ciphertext using an OCBCxml oracle.
Input: Plaintext block m(cid:48) containing one unknown byte b.
Position p of the unknown byte b. AES-GCM ith ci-
phertext block C (i) and initialization vector iv.
Output: Plaintext byte b.
1: ˜mvalid1 := 0x00||0x00|| . . .||0x00||0x10
2: ˜mvalid2 := 0x40||0x40|| . . .||0x40||0x01
3: cnt := iv||031||1 + i
4: n := 256
5: for b = 0 → (n − 1) do
6: m(cid:48)[p] := b
7:
8:
9:
10:
11:
12:
13:
end if
14:
15: end for
˜C := m(cid:48) ⊕ C (i)
˜iv := cnt ⊕ mvalid1
if OCBCxml( ˜iv, ˜C) = 1 then
˜iv := cnt ⊕ mvalid2
if OCBCxml( ˜iv, ˜C) = 1 then
return b
end if
The algorithm can easily be extended to decrypt larger
numbers of unknown bytes in one block. To decrypt x un-
known bytes, the attacker needs to issue about nx oracle
queries.
5.2.3 Evaluation
We evaluated performance of our attacks against both
WSS4J and Nimbus-JWT. We ﬁrst used the libraries to
generate valid messages containing AES-GCM ciphertexts.
Then we modiﬁed the algorithm parameters in the mes-
sages, forcing the receiver to process the ciphertexts us-
ing AES-CBC, and executed the attack described in Algo-
rithm 1. The required ciphertext validity oracles were based
on error messages generated by the libraries.
Table 1 reports the results of our evaluation, with ﬁgures
obtained by averaging over 50 executions. We include re-
sults for ciphertext blocks containing 1, 2, and 3 unknown
bytes. We restricted the possible character set to a group of
alphabetic and numeric characters. Thus, in this setting the
attacker needs to test n = 64 possibilities for each byte.
As expected, the attack performs well if the target ci-
phertext blocks contain a large number of known plaintext
bytes. The number of oracle queries needed increases ex-
ponentially with the number of unknown plaintext bytes.
While the number of guessed m(cid:48) plaintexts is constant
for both libraries, the number of total oracle queries varies.
Figure 5. Breaking indistinguishability of
AES-GCM with AES-CBC
5.2.2 Optimized Algorithm
Distinguishing Plaintexts.
Let us now describe our opti-
mized attack. Consider an attacker who eavesdrops an AES-
GCM ciphertext
C = (iv, C (1), . . . , C (n), τ ).
His goal is to determine whether the i-th ciphertext block
C (i) encrypts a particular message m(cid:48). The attacker pro-
ceeds as follows (see Figure 5):
1. He computes a CBC ciphertext by setting the ﬁrst
ciphertext block equal to ˜C = m(cid:48) ⊕ C (i).
(If he
has guessed m(cid:48) correctly, then this sets Dec(k, ˜C) =
cnt = iv||031||1 + i.)
2. He selects a valid XML plaintext ˜m and a CBC-mode
initialization vector ˜iv, such that
˜m = ˜iv ⊕ cnt
3. The ciphertext ( ˜iv, ˜C) is then sent to the CBC validity
checking oracle.
If the CBC validity checking oracle accepts this as a valid
ciphertext, then the attacker has most likely guessed m(cid:48) cor-
rectly (with a probability of Pm(cid:48) = 1 − Pvalid ≈ 0.9938).
Otherwise, he has certainly guessed wrongly. This test can
be repeated a few times with distinct values of ˜m to decrease
the probability of a false positive.
Recovering Plaintext Bytes. The distinguishing attack
can also be used to decrypt low-entropy plaintexts. For our
experiments, we consider an attacker that a priori knows
the complete plaintext except for one plaintext byte. We
also assume that the attacker reduces the number of false
positives by one additional oracle query for each positive
response.
The attack procedure for recovering one plaintext byte is
depicted in Algorithm 1. The algorithm iterates over all the
n = 256 possibilities for byte b. The performance of this
step can be improved signiﬁcantly if the attacker is able to
............AES-Deciv = cnt XOR mC = m' XOR C(i)m1CBC............AES-EncC(i)cntm'0guess plaintext GCM~2~~~Number of
Guessed
unknown bytes m(cid:48) plaintexts
1
2
3
36
2,130
142,855
OCBCxml OCBCjwe
queries