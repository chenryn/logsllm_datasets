---
author: Seth Kenlon
category: 软件开发
comments_data:
- date: '2019-04-02 16:39:01'
  message: 真的是又臭又长
  postip: 103.218.216.131
  username: 来自亚太地区的 Chrome 73.0|Windows 10 用户
count:
  commentnum: 1
  favtimes: 2
  likes: 0
  sharetimes: 0
  viewnum: 15111
date: '2017-11-20 08:41:00'
editorchoice: false
excerpt: 不论是经验丰富的老程序员，还是没有经验的新手，Python 都是一个非常好的编程语言。
fromurl: https://opensource.com/article/17/10/python-101
id: 9071
islctt: true
largepic: /data/attachment/album/201711/20/084125nss5x4ubwbpayyky.jpg
permalink: /article-9071-1.html
pic: /data/attachment/album/201711/20/084125nss5x4ubwbpayyky.jpg.thumb.jpg
related:
- displayorder: 0
  raid: 9362
- displayorder: 1
  raid: 10850
reviewer: ''
selector: ''
summary: 不论是经验丰富的老程序员，还是没有经验的新手，Python 都是一个非常好的编程语言。
tags:
- 编程
- Python
thumb: false
title: 通过构建一个简单的掷骰子游戏去学习怎么用 Python 编程
titlepic: true
translator: qhwdw
updated: '2017-11-20 08:41:00'
---
> 
> 不论是经验丰富的老程序员，还是没有经验的新手，Python 都是一个非常好的编程语言。
> 
> 
> 
![](/data/attachment/album/201711/20/084125nss5x4ubwbpayyky.jpg)
[Python](https://www.python.org/) 是一个非常流行的编程语言，它可以用于创建桌面应用程序、3D 图形、视频游戏、甚至是网站。它是非常好的首选编程语言，因为它易于学习，不像一些复杂的语言，比如，C、 C++、 或 Java。 即使如此， Python 依然也是强大且健壮的，足以创建高级的应用程序，并且几乎适用于所有使用电脑的行业。不论是经验丰富的老程序员，还是没有经验的新手，Python 都是一个非常好的编程语言。
### 安装 Python
在学习 Python 之前，你需要先去安装它：
**Linux：** 如果你使用的是 Linux 系统， Python 是已经包含在里面了。但是，你如果确定要使用 Python 3 。应该去检查一下你安装的 Python 版本，打开一个终端窗口并输入：
```
python3 -V
```
如果提示该命令没有找到，你需要从你的包管理器中去安装 Python 3。
**MacOS：** 如果你使用的是一台 Mac，可以看上面 Linux 的介绍来确认是否安装了 Python 3。MacOS 没有内置的包管理器，因此，如果发现没有安装 Python 3，可以从 [python.org/downloads/mac-osx](https://www.python.org/downloads/mac-osx/) 安装它。即使 macOS 已经安装了 Python 2，你还是应该学习 Python 3。
**Windows：** 微软 Windows 当前是没有安装 Python 的。从 [python.org/downloads/windows](https://www.python.org/downloads/windows) 安装它。在安装向导中一定要选择 **Add Python to PATH** 来将 Python 执行程序放到搜索路径。
### 在 IDE 中运行
在 Python 中写程序，你需要准备一个文本编辑器，使用一个集成开发环境（IDE）是非常实用的。IDE 在一个文本编辑器中集成了一些方便而有用的 Python 功能。IDLE 3 和 NINJA-IDE 是你可以考虑的两种选择：
#### IDLE 3
Python 自带的一个基本的 IDE 叫做 IDLE。
![IDLE](/data/attachment/album/201711/20/084144g82cerzjrxo5nxx4.png "IDLE")
它有关键字高亮功能，可以帮助你检测拼写错误，并且有一个“运行”按钮可以很容易地快速测试代码。
要使用它：
* 在 Linux 或 macOS 上，启动一个终端窗口并输入 `idle3`。
* 在 Windows，从开始菜单中启动 Python 3。
	+ 如果你在开始菜单中没有看到 Python，在开始菜单中通过输入 `cmd` 启动 Windows 命令提示符，然后输入 `C:\Windows\py.exe`。
	+ 如果它没有运行，试着重新安装 Python。并且确认在安装向导中选择了 “Add Python to PATH”。参考 [docs.python.org/3/using/windows.html](https://docs.python.org/3/using/windows.html) 中的详细介绍。
	+ 如果仍然不能运行，那就使用 Linux 吧！它是免费的，只要将你的 Python 文件保存到一个 U 盘中，你甚至不需要安装它就可以使用。
#### Ninja-IDE
[Ninja-IDE](http://ninja-ide.org/) 是一个优秀的 Python IDE。它有关键字高亮功能可以帮助你检测拼写错误、引号和括号补全以避免语法错误，行号（在调试时很有帮助）、缩进标记，以及运行按钮可以很容易地进行快速代码测试。
![Ninja-IDE](/data/attachment/album/201711/20/084145uywvqsurs6wyqzaa.png "Ninja-IDE")
要使用它：
1. 安装 Ninja-IDE。如果你使用的是 Linux，使用包管理器安装是非常简单的；否则， 从 NINJA-IDE 的网站上 [下载](http://ninja-ide.org/downloads/) 合适的安装版本。
2. 启动 Ninja-IDE。
3. 转到 Edit 菜单，并选择 Preferences 设置。
4. 在 Preferences 窗口中，点击 Execution 选项卡。
5. 在 Execution 选项卡上，更改 `python` 为 `python3`。
![Python3 in Ninja-IDE](/data/attachment/album/201711/20/084145vfqm3xjmcc353ii2.png "Python3 in Ninja-IDE")
*Ninja-IDE 中的 Python3*
### 告诉 Python 想做什么
关键字可以告诉 Python 你想要做什么。不论是在 IDLE 还是在 Ninja 中，转到 File 菜单并创建一个新文件。对于 Ninja 用户：不要创建一个新项目，仅创建一个新文件。
在你的新的空文件中，在 IDLE 或 Ninja 中输入以下内容：
```
    print("Hello world.")
```
* 如果你使用的是 IDLE，转到 Run 菜单并选择 Run module 选项。
* 如果你使用的是 Ninja，在左侧按钮条中点击 Run File 按钮。
![Run file in Ninja](/data/attachment/album/201711/20/084146zpgilgsa94a9pjtt.png "Run file in Ninja")
*在 Ninja 中运行文件*
关键字 `print` 告诉 Python 去打印输出在圆括号中引用的文本内容。
虽然，这并不是特别刺激。在其内部， Python 只能访问基本的关键字，像 `print`、 `help`，最基本的数学函数，等等。
可以使用 `import` 关键字加载更多的关键字。在 IDLE 或 Ninja 中开始一个新文件，命名为 `pen.py`。
**警告：**不要命名你的文件名为 `turtle.py`，因为名为 `turtle.py` 的文件是包含在你正在控制的 turtle （海龟）程序中的。命名你的文件名为 `turtle.py` ，将会把 Python 搞糊涂，因为它会认为你将导入你自己的文件。
在你的文件中输入下列的代码，然后运行它：
```
    import turtle
```
Turtle 是一个非常有趣的模块，试着这样做：
```
    turtle.begin_fill()
    turtle.forward(100)
    turtle.left(90)
    turtle.forward(100)
    turtle.left(90)
    turtle.forward(100)
    turtle.left(90)
    turtle.forward(100)
    turtle.end_fill()
```
看一看你现在用 turtle 模块画出了一个什么形状。
要擦除你的海龟画图区，使用 `turtle.clear()` 关键字。想想看，使用 `turtle.color("blue")` 关键字会出现什么情况？
尝试更复杂的代码：
```
    import turtle as t
    import time
    t.color("blue")
    t.begin_fill()
    counter=0
    while counter < 4:
        t.forward(100)
        t.left(90)
        counter = counter+1
    t.end_fill()
    time.sleep(5)
```
运行完你的脚本后，是时候探索更有趣的模块了。
### 通过创建一个游戏来学习 Python
想学习更多的 Python 关键字，和用图形编程的高级特性，让我们来关注于一个游戏逻辑。在这个教程中，我们还将学习一些关于计算机程序是如何构建基于文本的游戏的相关知识，在游戏里面计算机和玩家掷一个虚拟骰子，其中掷的最高的是赢家。
#### 规划你的游戏
在写代码之前，最重要的事情是考虑怎么去写。在他们写代码 *之前*，许多程序员是先 [写简单的文档](https://opensource.com/article/17/8/doc-driven-development)，这样，他们就有一个编程的目标。如果你想给这个程序写个文档的话，这个游戏看起来应该是这样的：
1. 启动掷骰子游戏并按下 Return 或 Enter 去掷骰子
2. 结果打印在你的屏幕上
3. 提示你再次掷骰子或者退出
这是一个简单的游戏，但是，文档会告诉你需要做的事很多。例如，它告诉你写这个游戏需要下列的组件：
* 玩家：你需要一个人去玩这个游戏。
* AI：计算机也必须去掷，否则，就没有什么输或赢了
* 随机数：一个常见的六面骰子表示从 1-6 之间的一个随机数