```  
记录DDL：  
```  
postgres=# create table tbl(id int);  
CREATE TABLE  
2015-05-15 15:11:17.463 CST,"postgres","postgres",5922,"[local]",55559bff.1722,8,"CREATE TABLE",2015-05-15 15:10:55 CST,2/5,1757,LOG,00000,"AUDIT: SESSION,2,1,DDL,CREATE TABLE,,,create table tbl(id int);,",,,,,,"create table tbl(id int);",,"log_audit_event, pg_audit.c:686","psql"  
```  
记录FUNCTION，以及内部DDL。  
```  
postgres=# do language plpgsql $$  
declare  
begin  
  for i in 1..100 loop  
    execute 'create table test_'||i||' (id int)';   
  end loop;  
end;  
$$;  
DO  
2015-05-15 15:12:15.905 CST,"postgres","postgres",5922,"[local]",55559bff.1722,10,"DO",2015-05-15 15:10:55 CST,2/7,0,LOG,00000,"AUDIT: SESSION,3,1,FUNCTION,DO,,,""do language plpgsql $$  
declare  
begin  
  for i in 1..100 loop  
    execute 'create table test_'||i||' (id int)';  
  end loop;  
end;  
$$;"",",,,,,,"do language plpgsql $$  
declare  
begin  
  for i in 1..100 loop  
    execute 'create table test_'||i||' (id int)';  
  end loop;  
end;  
$$;",,"log_audit_event, pg_audit.c:686","psql"  
2015-05-15 15:12:15.907 CST,"postgres","postgres",5922,"[local]",55559bff.1722,11,"DO",2015-05-15 15:10:55 CST,2/7,1758,LOG,00000,"AUDIT: SESSION,3,2,DDL,CREATE TABLE,,,create table test_1 (id int),",,,,,"SQL statement ""create table test_1 (id int)""  
PL/pgSQL function inline_code_block line 5 at EXECUTE statement","do language plpgsql $$  
declare  
begin  
  for i in 1..100 loop  
    execute 'create table test_'||i||' (id int)';  
  end loop;  
end;  
$$;",,"log_audit_event, pg_audit.c:686","psql"  
......  
2015-05-15 15:12:15.949 CST,"postgres","postgres",5922,"[local]",55559bff.1722,110,"DO",2015-05-15 15:10:55 CST,2/7,1758,LOG,00000,"AUDIT: SESSION,3,101,DDL,CREATE TABLE,,,create table test_100 (id int),",,,,,"SQL statement ""create table test_100 (id int)""  
PL/pgSQL function inline_code_block line 5 at EXECUTE statement","do language plpgsql $$  
declare  
begin  
  for i in 1..100 loop  
    execute 'create table test_'||i||' (id int)';  
  end loop;  
end;  
$$;",,"log_audit_event, pg_audit.c:686","psql"  
```  
2\. 支持对象审计，这种审计方法比较奇特，例如我要审计某个表的INSERT操作，那么首先在数据库中创建一个审计角色，把这个表的INSERT权限赋予给这个审计角色，那么任何人对这个表执行INSERT都会被审计。  
```  
/*  
 * GUC variable for pg_audit.role  
 *  
 * Administrators can choose which role to base OBJECT auditing off of.  
 * Object-level auditing uses the privileges which are granted to this role to  
 * determine if a statement should be logged.  
 */  
char *auditRole = NULL;  
/*  
 * Object type, used for SELECT/DML statements and function calls.  
 *  
 * For relation objects, this is essentially relkind (though we do not have  
 * access to a function which will just return a string given a relkind;  
 * getRelationTypeDescription() comes close but is not public currently).  
 *  
 * We also handle functions, so it isn't quite as simple as just relkind.  
 *  
 * This should be kept consistent with what is returned from  
 * pg_event_trigger_ddl_commands(), as that's what we use for DDL.  
 */  
#define OBJECT_TYPE_TABLE                       "TABLE"  
#define OBJECT_TYPE_INDEX                       "INDEX"  
#define OBJECT_TYPE_SEQUENCE            "SEQUENCE"  
#define OBJECT_TYPE_TOASTVALUE          "TOAST TABLE"  
#define OBJECT_TYPE_VIEW                        "VIEW"  
#define OBJECT_TYPE_MATVIEW                     "MATERIALIZED VIEW"  
#define OBJECT_TYPE_COMPOSITE_TYPE      "COMPOSITE TYPE"  
#define OBJECT_TYPE_FOREIGN_TABLE       "FOREIGN TABLE"  
#define OBJECT_TYPE_FUNCTION            "FUNCTION"  
#define OBJECT_TYPE_UNKNOWN                     "UNKNOWN"  
```  
测试：  
假设我这里需要使用的是审计角色digoal。  
```  
pg_audit.role = 'digoal'  
```  
创建一个审计角色，digoal，不需要登录权限。  
```  
postgres=# create role digoal nologin;  
postgres=# create table t(id int);  
CREATE TABLE  
postgres=# delete from t;  
DELETE 0  
postgres=# grant select on t to digoal;  -- 表示我要审计表t的select操作。  
GRANT  
postgres=# delete from t;  
DELETE 0  
postgres=# select * from t;  
 id   
----  
(0 rows)  
```  
查看日志，只有select操作被审计了，其他操作不会被审计。  
```  
2015-05-15 15:39:57.661 CST,"postgres","postgres",6572,"[local]",5555a299.19ac,4,"SELECT",2015-05-15 15:39:05 CST,2/7,0,LOG,00000,"AUDIT: OBJECT,2,1,READ,SELECT,TABLE,public.t,select * from t;,",,,,,,"select * from t;",,"log_audit_event, pg_audit.c:686","psql"  
```  
通过对象审计，可以将PostgreSQL的审计功能提升一个档次。  
## 参考  
1\. http://blog.163.com/digoal@126/blog/static/163877040201421702248430/  
2\. http://blog.163.com/digoal@126/blog/static/1638770402012019112218804/  
3\. http://blog.163.com/digoal@126/blog/static/163877040201252575529358/  
4\. http://blog.163.com/digoal@126/blog/static/16387704020132131361949/  
5\. http://blog.163.com/digoal@126/blog/static/16387704020132208241607/  
6\. http://blog.163.com/digoal@126/blog/static/16387704020132209854525/  
7\. http://blog.163.com/digoal@126/blog/static/1638770402014728105442434/  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")