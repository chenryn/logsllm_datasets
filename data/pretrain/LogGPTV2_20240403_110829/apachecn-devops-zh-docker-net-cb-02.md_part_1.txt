# 二、配置和监控 Docker 网络
在本章中，我们将介绍以下食谱:
*   验证影响 Docker 网络的主机级设置
*   以桥接模式连接容器
*   公开和发布端口
*   将容器连接到现有容器
*   以主机模式连接容器
*   配置服务级别设置
# 简介
Docker 让消费容器技术变得前所未有的简单。Docker 以其易用性而闻名，提供了许多高级功能，但安装时使用了一组合理的默认值，这使得快速开始构建容器变得容易。虽然网络配置通常是使用前需要额外注意的一个方面，但 Docker 可以轻松地让您的容器在网络上运行。
# 验证影响 Docker 网络的主机级设置
Docker 依靠能够执行某些功能的主机来使 Docker 网络工作。也就是说，您的 Linux 主机必须配置为允许 IP 转发。此外，自 Docker 1.7 发布以来，您现在可以选择使用发夹**网络地址转换** ( **NAT** )而不是默认的 Docker 用户陆地代理。在本食谱中，我们将回顾主机启用 IP 转发的要求。我们还将讨论 NAT 发夹，并讨论该选项的主机级要求。在这两种情况下，我们将展示 Docker 关于其设置的默认行为，以及您如何更改它们。
## 做好准备
您需要访问运行 Docker 的 Linux 主机，并且能够停止和重新启动服务。因为我们将修改系统级内核参数，所以您还需要对系统的根级访问。
## 怎么做…
正如我们在[第 1 章](01.html "Chapter 1. Linux Networking Constructs")、 *Linux 网络结构*中看到的，Linux 主机必须启用 IP 转发，以便能够在接口之间路由流量。由于 Docker 正是这样做的，因此必须启用 IP 转发，以便 Docker 网络能够按预期运行。如果 Docker 检测到 IP 转发被禁用，它将在您尝试运行容器时警告您该问题:
```
user@docker1:~$ docker run --name web1 -it \
jonlangemak/web_server_1 /bin/bash
WARNING: IPv4 forwarding is disabled. Networking will not work.
root@071d673821b8:/#
```
大多数 Linux 发行版将 IP 转发值默认为`disabled`或`0`。幸运的是，在默认配置中，Docker 会在 Docker 服务启动时将此设置更新为正确的值。例如，让我们看一下一个新重启的主机，它在启动时没有启用 Docker 服务。如果我们在启动 Docker 之前检查设置的值，我们可以看到它被禁用。启动 Docker 引擎会自动为我们启用设置:
```
user@docker1:~$ more /proc/sys/net/ipv4/ip_forward
0
user@docker1:~$
user@docker1:~$ sudo systemctl start docker
user@docker1:~$ sysctl net.ipv4.ip_forward
net.ipv4.ip_forward = 1
user@docker1:~$
```
Docker 中的这种默认行为可以通过将`--ip-forward=false`作为运行时选项传递给 Docker 服务来更改。
### 注
基于所使用的**初始化系统**，Docker 特定参数的配置变化很大。在撰写本文时，许多较新的 Linux 操作系统使用`systemd`作为其初始化系统。请务必参考 Docker 文档，根据您使用的操作系统查看其服务配置建议。在本章中，Docker 服务配置和选项将作为即将到来的菜谱的一部分进行更详细的讨论。在本食谱中，只需关注更改这些设置对 Docker 和主机本身的影响。
关于内核 IP 转发参数的进一步讨论可以在[第 1 章](01.html "Chapter 1. Linux Networking Constructs")、 *Linux 网络结构*中的配方*配置 Linux 主机路由*中找到。在这里，您可以找到如何自己更新参数，以及如何通过重新启动使设置持久化。
依赖内核级参数的 Docker 的另一个最新特性是发夹 NAT 功能。Docker 的早期版本实现并依赖于所谓的 Docker **用户域代理**来促进内部和公开的端口通信。默认情况下，任何公开端口的容器都是通过 userland 代理进程这样做的。例如，如果我们启动一个示例容器，我们可以看到除了 Docker 流程本身，我们现在还有一个`docker-proxy`流程:
```
user@docker1:~$ docker run --name web1 -d -P jonlangemak/web_server_1
bf3cb30e826ce53e6e7db4e72af71f15b2b8f83bd6892e4838ec0a59b17ac33f
user@docker1:~$
user@docker1:~$ ps aux | grep docker
root       771  0.0  0.1 509676 41656 ?        Ssl  19:30   0:00 /usr/bin/docker daemon
root      1861  0.2  0.0 117532 28024 ?        Sl   19:41   0:00 docker-proxy -proto tcp -host-ip 0.0.0.0 -host-port 32769 -container-ip 172.17.0.2 -container-port 80
……
user@docker1:~$
```
每个发布的端口将在 Docker 主机上启动一个新的`docker-proxy`进程。作为用户域代理的替代方案，您可以选择让 Docker 使用发夹 NAT，而不是用户域代理。发夹型网络地址转换依赖于被配置为在主机本地环回接口上启用路由的主机系统。同样，Docker 服务负责更新正确的主机参数，以便在 Docker 服务启动时启用此功能(如果它被告知这样做的话)。
发夹 NAT 依赖于内核参数`net.ipv4.conf.docker0.route_localnet`被启用(设置为`1`)，以便主机通过主机环回接口访问容器服务。这可以通过我们用 IP 转发参数描述的相同方式来实现:
使用`sysctl`命令:
```
sysctl net.ipv4.conf.docker0.route_localnet 
```
通过直接查询`/proc/`文件系统:
```
more /proc/sys/net/ipv4/conf/docker0/route_localnet
```
如果返回值为`0`，很可能 Docker 处于默认配置，并且依赖于 userland 代理。由于您可以选择在任一模式下运行 Docker，我们需要做的不仅仅是更改内核参数，以便对发夹 NAT 进行更改。我们还需要告诉 Docker 通过将选项`--userland-proxy=false`作为运行时选项传递给 Docker 服务来改变它发布端口的方式。这样做将启用发夹 NAT，并告诉 Docker 将内核参数更新为发夹 NAT 工作的正确设置。让我们启用发夹 NAT 来验证 Docker 正在做它应该做的事情。
首先，让我们检查内核参数的值:
```
user@docker1:~$ sysctl net.ipv4.conf.docker0.route_localnet
net.ipv4.conf.docker0.route_localnet = 0
user@docker1:~$
```
它目前已被禁用。现在我们可以告诉 Docker 通过将`--userland-proxy=false`作为参数传递给 Docker 服务来禁用 userland 代理。一旦 Docker 服务被告知禁用 userland 代理，并且服务重新启动，我们应该会看到主机上启用了参数:
```
user@docker1:~$ sysctl net.ipv4.conf.docker0.route_localnet
net.ipv4.conf.docker0.route_localnet = 1
user@docker1:~$
```
此时运行带有映射端口的容器不会创建额外的`docker-proxy`流程实例:
```
user@docker1:~$ docker run --name web1 -d -P jonlangemak/web_server_1
5743fac364fadb3d86f66cb65532691fe926af545639da18f82a94fd35683c54
user@docker1:~$ ps aux | grep docker
root      2159  0.1  0.1 310696 34880 ?        Ssl  14:26   0:00 /usr/bin/docker daemon --userland-proxy=false
user@docker1:~$
```
此外，我们仍然能够通过主机的本地接口访问容器:
```
user@docker1:~$ curl 127.0.0.1:32768
    Web Server #1 - Running on port 80
user@docker1:~$
```
再次禁用参数会导致该连接失败:
```
user@docker1:~$ sudo sysctl -w net.ipv4.conf.docker0.route_localnet=0
net.ipv4.conf.docker0.route_localnet = 0
user@docker1:~$ curl 127.0.0.1:32768
curl: (7) Failed to connect to 127.0.0.1 port 32768: Connection timed out
user@docker1:~$
```
# 以桥接模式连接容器
正如我们前面提到的一样，Docker 提供了一组合理的默认值来让您的容器在网络上进行通信。从网络的角度来看，Docker 默认是将任何派生的容器连接到`docker0`桥。在本食谱中，我们将展示如何在默认桥接模式下连接容器，并解释如何处理离开和去往容器的网络流量。
## 做好准备
您需要访问 Docker 主机，并了解您的 Docker 主机是如何连接到网络的。在我们的示例中，我们将使用具有两个物理网络接口的 Docker 主机，如下图所示:
![Getting ready](img/B05453_02_01.jpg)
您需要确保您有权查看`iptables`规则以验证**网络过滤器**策略。如果您希望下载并运行示例容器，您的 Docker 主机也需要访问互联网。在某些情况下，我们所做的更改可能要求您具有对系统的根级访问权限。
## 怎么做…
安装并启动 Docker 后，您应该会注意到添加了一个名为`docker0`的新 Linux 桥。默认情况下，`docker0`网桥的 IP 地址为`172.17.0.1/16`:
```
user@docker1:~$ ip addr show docker0
5: docker0:  mtu 1500 qdisc noqueue state DOWN group default
    link/ether 02:42:54:87:8b:ea brd ff:ff:ff:ff:ff:ff
    inet 172.17.0.1/16 scope global docker0
       valid_lft forever preferred_lft forever
user@docker1:~$
```
Docker 将在不指定网络的情况下将任何已启动的容器放置在`docker0`桥上。现在，让我们看一下在该主机上运行的示例容器:
```
user@docker1:~$ docker run -it jonlangemak/web_server_1 /bin/bash
root@abe6eae2e0b3:/# ip addr
1: lo:  mtu 65536 qdisc noqueue state UNKNOWN qlen 1
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host
       valid_lft forever preferred_lft forever
6: eth0@if7:  mtu 1500 qdisc noqueue state UP
    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff
    inet 172.17.0.2/16 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::42:acff:fe11:2/64 scope link
       valid_lft forever preferred_lft forever
root@abe6eae2e0b3:/# 
```
通过以交互模式运行容器，我们可以检查容器认为它的网络配置是什么。在这种情况下，我们可以看到容器有一个 IP 地址为`172.17.0.2/16`的单个非环回网络适配器(`eth0`)。
此外，我们可以看到容器认为其默认网关是 Docker 主机上的`docker0`桥接口:
```
root@abe6eae2e0b3:/# ip route
default via 172.17.0.1 dev eth0
172.17.0.0/16 dev eth0  proto kernel  scope link  src 172.17.0.2
root@abe6eae2e0b3:/#
```
通过运行一些基本测试，我们可以看到容器可以访问 Docker 主机的物理接口以及基于互联网的资源。
### 注
基于互联网的容器访问是基于 Docker 主机可以访问互联网的事实。
```
root@abe6eae2e0b3:/# ping 10.10.10.101 -c 2
PING 10.10.10.101 (10.10.10.101): 48 data bytes
56 bytes from 10.10.10.101: icmp_seq=0 ttl=64 time=0.084 ms
56 bytes from 10.10.10.101: icmp_seq=1 ttl=64 time=0.072 ms
--- 10.10.10.101 ping statistics ---
2 packets transmitted, 2 packets received, 0% packet loss
round-trip min/avg/max/stddev = 0.072/0.078/0.084/0.000 ms
root@abe6eae2e0b3:/#
root@abe6eae2e0b3:/# ping 4.2.2.2 -c 2
PING 4.2.2.2 (4.2.2.2): 48 data bytes
56 bytes from 4.2.2.2: icmp_seq=0 ttl=50 time=29.388 ms
56 bytes from 4.2.2.2: icmp_seq=1 ttl=50 time=26.766 ms
--- 4.2.2.2 ping statistics ---
2 packets transmitted, 2 packets received, 0% packet loss
round-trip min/avg/max/stddev = 26.766/28.077/29.388/1.311 ms
root@abe6eae2e0b3:/#