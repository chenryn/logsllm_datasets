上部署了“入侵预防系统”，希望它能阻止新的攻击。但是，对于日志主机是如何被入侵
个小时制作硬盘映像，搜索日志数据。他们最终发现，日志不仅被删除，而且用0覆盖了。
是攻击的向量。
录日志。实际上，
日志记录，没有记录允许的连接，
注内部通信。
网络IDS（NIDS）上的日志包含正常的噪声，但是没有攻击活动。不幸的是，NIDS不关
断开，但是保持电源开启。当事故响应团队查看该系统，他们注意到有一个未知的进程以
息源，管理员定位DMZ中的一个可疑Unix系统一
侵，这个系统应该在DMZ中，因为内部系统没有到互联网的直接链接。通过查看IRC消
中，90%和全球多个IRC的服务器通信有关。经过严密的思考，他认为有某个系统遭到入
为IRC通信可能是合法的活动。管理员查看每日活动报告，注意到日志中记录的所有活动
IRC（互联网中继聊天）程序的巨量警报。IDS的配置是发现时不自动阻止这类活动，因
防止对DMZ资产的攻击。
因为这台机器明显遭到入侵，管理员决定将其离线，以备调查和恢复。它立即从网络
该团队试图查看防火墙上的外部连接日志。他们发现公司在防火墙上没有配置激进的
没有太多证据可用，该团队只得假设入侵者使用了“0day攻击”，获得对日志服务器
所以，团队做的下一件事是尝试恢复被删除的日志。他们使用昂贵的取证工具，花费几
：2009年5月一个阳光明媚的日子，入侵预防系统开始生成关于公司网络上使用的
对于遭到人侵或者感染的系统，这个决定总是很困难：开机还是关机？两种方法都有道理。
他们重建日志主机，验证它已经打上了完整的补丁。提高日志记录级别，在日志主机
网络入侵检测系统监视外部系统和DMZ机器之间的通信，但是没有发现任何攻击。
响应团队震惊地发现，syslog服务器系统没有同一时期（7天）来自任何服务器的日
响应团队尝试查看主机上的日志，却发现它们已经被删除。日志文件仍在，但是前7
，现实往往相反：被拦截的流量只说明防火墙正在工作，接受的流量反而
，因为允许的连接被自动视为合法活动，因此没有必要记
一台邮件服务器。
第17章对日志系统的攻击251
---
## Page 273
252
参考文献
性、
17.3
况下进行。
检查文件权限）通常相当简单。其他的事情要在你有相应的资源，并且符合网站需求的情
够抵御在其他主机上有效的攻击。
值，就值得这么做。
据的机会。
到某种一次性写入媒体或者仅附加文件，这不能避免入侵，但是提高了保留入侵时日志数
、完整性和其他适用于日志系统的概念的例子。
远程入侵不在网络上传输数据包的主机相当困难，但是我们知道，这并非不可能。不是有人说过“不沉的
本章为理解针对日志记录系统的常见攻击打下了一个很好的基础。我们还提供了机密
这些解决方案各有其优劣。在你的环境中必须尽你所能。对明显的环节进行保护（如
,.
libnet..
For brief intro onSYNflooding see thisold CERT advisory..
泰坦尼克吗？”
小结
：可以使用不同于网络上其他主机的操作系统，希望异构系统能
---
## Page 274
所不同。表18.1概述了常见的角色和职责。
它们与软件开发及编程相关。本节介绍的角色是较为常见的；你的组织中实际的角色可能有
18.2
绍的概念可以应用到任何语言和环境，可以视为最佳实践。
消息可能由日志收集和分析工具收集。这意味着，必须理解和考虑日志的可解析性。本章介
何在日志中提供足够信息和安全及性能考虑因素之间求得平衡。此外，你的软件生成的日志
18.1
本章要点
作？程序员常常没有提供日志消息的足够信息，或者提供过多的信息。关键在于，要理解如
在深入程序员使用的日志记录技术的细节之前，重要的是理解常见的角色和职责，因为
你是一位程序员吗？是否有支持人员到你这里，询问你的应用程序为什么不能正常工
■性能考虑因素
■安全考虑因素
■程序员使用的日志记录
■角色和职责
角色与职责
概述
供程序员使用的日志
第18章
Chapete"
---
## Page 275
254
这一部分。
18.3
织之外的常见角色和职责，这通常是在商业和开源组织中的情况。
19章。
短期内（例如30分钟或者1小时）对系统有临时权限。
开发人员从支持人员的终端上获得生产系统的一个临时视图和控制。
生产环境的故障排除？下面是几条途径：
产系统有写入权限。在某些情况下，开发人员不能访问生产系统。那么，开发人员如何帮助
就无法实施。
是确实会发生。说它不理想是因为当一个人身兼多职时，界线就变得模糊，判断和好的过程
人员同时也是架构师和IT支持人员。这种情况一般发生在较小的组织内，它并不理想，但
3）可以授予安全性例外。这在有合适的文档时一般是允许的。要点是开发人员可以在
你可能已经注意到，这些角色是面向内部的，不反映组织之外的角色。表18.2总结了组
现在，我们简单地看看程序员应该留意日志记录的常见原因。
本节假定你是日志记录编程的新手。
确保你理解开发人员在监管依从性环境中可以做什么，不能做什么。更多信息参见第
职责分离的另一个重要性围绕监管依从性。各种监管实体都规定软件开发人员不能对生
软件开发人员/程序员
IT支持团队
IT/开发经理
安全团队
业务/产品负责人
2）可以使用屏幕控制（例如Cisco的Web-ex，Microsoft的OficeCommunicator等），
1）开发人员和生产支持人员一起，为操作人员提供指导。
职责分离是保护生产环境所必需的安全原则。但是应该注意，在某些情况下，软件开发
软件架构师
日志分析供应商
开源社区
商业软件供应商
程序员所用的日志记录
角
角色
色
表18.2外部角色和职责摘要（Chuvakin，2011）
表18.1内部角色和职责摘要（Chuvakin，2011）
使用程序库、API和日志记录功能，遵循日志记录标准
强制实施日志记录标准，作为“必备”功能
为内部开发的软件开发日志记录标准；这一过程涉及业务负责人
负责产品、特性集、应用程序等的个人或者集体
“获取”日志记录的价值，理解审计和调试日志之间的不同
支持生产应用程序：在应用程序表现异常时阅读日志文件
鼓励日志记录标准化，并利用标准消费数据，在产品中展示
创建日志记录API、程序库等，然后用它们赢得声望和采纳
开发并采用日志标准
。如果你已经精通了日志记录的相关概念，可以跳过
职
职
责
责
---
## Page 276
助于描述写人日志消息原因的支持信息。
状态和上下文，状态可以是包含在变量、
和原因的所有必要组成部分。归纳一下，注意这五个“W”，
什么？将这些项目应用到日志记录，很容易发现，五个“W”包含了有助于理解发生的情况
原因。回忆一下第2章中日志记录5个“W”的概念。我们快速地复习一下：
18.3.1
主题。
节是魔鬼：
含在内的第二个理由是你能够从监控的角度理解他们的需求。他们可能有你所不知道的特殊
要步骤。
程序员很重要。但是作为程序员，日志记录背后是什么机制呢？我们先来看看这一过程的概
需求。
3）程序员编写代码，真正地完成有助于日志记录活动的函数或者方法调用。正所谓细
表18.3提供了应该记录的日志消息类型的基本原则。
■涉及谁？（Who）
在讨论这个主题前，理解什么因素使日志有用很重要。日志消息应该说明发生的情况和
4）日志被用于调试、分析等。
2）日志记录的列表至少应该由IT支持人员审核，以便得到他们的意见。将这些人员包
1）程序员编写应用程序，决定在代码中记录哪些日志消息。
认真考虑日志记录有几个具备说服力的理由。我们现在开始说明，为什么日志记录对于
■日志消息中提供合适的信息，有助于协助检测恶意行为。
■程序员是日志消息的最终来源。确保程序生成有价值、实用的日志完全依靠程序员。
除了上述6个项目，以及第6个项目是以“H”（How，如何）开头的以外，你还注意到
上面描述的是概略的过程。但是，应该记录哪些信息呢？我们将在下一小节探索这个
如何发生的？（How）
为什么发生？（Why）
发生在何时？（When）
发生在哪里？（Where）
发生了什么？（What）
序到底做了什么。
格式良好和及时的日志消息对调试和诊断收集很有帮助，而且可以帮助程序员了解程
b）还要考虑日志轮转方案（详见后面的小节)。
a）一般来说，有一个配置文件指明日志写人的位置。这包括本地磁盘、远程磁盘
日志应该记录哪些信息
（网络文件系统（NFS）等）、syslog等。
、返回值、堆栈信息等的任何程序信息。上下文是有
，就会发现实用的日志应该包含
第18章供程序员使用的日志255
---
## Page 277
256
就在于此。下面是一个Logback配置文件
置文件控制其日志记录行为，真正的思路
用的API。
本章的范围。作为替代，表18.4概述了常
18.3.2
具体需求可能与列出的有所不同，但是知道基本的日志类型，就成功了一半。
的例子：
是流行的Java日志记录API。你可以用配
混合可用性问题
资源问题
“有害事件“/威胁
更改事件
AAA（身份认证、授权、访问）
我们来举一个简单的例子。Logback
提供任何日志记录API的细节超出了
警告
表18.3是一
应该记录的类型