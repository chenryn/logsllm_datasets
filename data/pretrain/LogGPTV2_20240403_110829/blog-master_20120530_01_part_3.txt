 londiste  | plpgsql | find_rel_oid  
 londiste  | plpgsql | find_seq_oid  
 londiste  | plpgsql | find_table_fkeys  
 londiste  | plpgsql | find_table_oid  
 londiste  | plpgsql | get_seq_list  
 londiste  | plpgsql | get_table_list  
 londiste  | plpgsql | get_table_pending_fkeys  
 londiste  | plpgsql | get_valid_pending_fkeys  
 londiste  | plpgsql | global_add_table  
 londiste  | plpgsql | global_remove_seq  
 londiste  | plpgsql | global_remove_table  
 londiste  | plpgsql | global_update_seq  
 londiste  | sql     | is_replica_func  
 londiste  | plpgsql | local_add_seq  
 londiste  | plpgsql | local_add_table  
 londiste  | plpgsql | local_add_table  
 londiste  | plpgsql | local_add_table  
 londiste  | plpgsql | local_add_table  
 londiste  | plpgsql | local_remove_seq  
 londiste  | plpgsql | local_remove_table  
 londiste  | plpgsql | local_set_table_attrs  
 londiste  | plpgsql | local_set_table_state  
 londiste  | plpgsql | local_set_table_struct  
 londiste  | plpgsql | local_show_missing  
 londiste  | plpgsql | make_fqname  
 londiste  | plpgsql | quote_fqname  
 londiste  | plpgsql | restore_table_fkey  
 londiste  | plpgsql | root_check_seqs  
 londiste  | plpgsql | root_check_seqs  
 londiste  | plpgsql | root_notify_change  
 londiste  | plpgsql | split_fqname  
 londiste  | plpgsql | table_info_trigger  
 londiste  | plpgsql | upgrade_schema  
 londiste  | plpgsql | version  
(135 rows)  
```  
创建完根节点的这些对象, 函数等之后. 如果没有异常, 就可以启动provider的worker (Replay events to subscriber: it is needed to make the replication active as it will start to replay the events.) 进程了.  
```  
postgres@db5-> londiste3 -d /home/postgres/londiste3/src_digoal_01.ini worker  
```  
其实是一个python进程, 如下  
```  
postgres@db5-> ps -ewf|grep python  
postgres 27316     1  0 15:53 ?        00:00:00 /opt/python2.7.3/bin/python /opt/skytools3.0.2/bin/londiste3 -d /home/postgres/londiste3/src_digoal_01.ini worker  
```  
根配置完了, 就可以辐射出去了, 接下来配置目标1的配置文件 :   
同样, 注意db里面我配置了password, 如果你使用的是trust认证或者使用了.pgpass文件, 这里就不需要配密码了.  
queue的名字和provider的queue的名字必须一致. job_name和前面的不能一致.  
```  
vi /home/postgres/londiste3/dst1_digoal_01.ini  
[londiste3]  
job_name = dst1_digoal_01  
db = host=172.16.3.33 port=1919 user=postgres dbname=digoal_01 password=postgres  
queue_name = replika  
logfile = /home/postgres/londiste3/log/dst1_digoal_01.log  
pidfile = /home/postgres/londiste3/pid/dst1_digoal_01.pid  
```  
配置好后, 创建叶节点, 注意我这里创建的是页节点, 而不是树枝节点, 因为本次不讲级联复制. 如果是级联的话创建的是树枝节点.  
```  
postgres@db5-> londiste3 -v /home/postgres/londiste3/dst1_digoal_01.ini create-leaf dst1_digoal_01 "host=172.16.3.33 port=1919 user=postgres dbname=digoal_01 password=postgres" --provider="host=172.16.3.176 port=1921 user=postgres dbname=digoal_01 password=postgres"  
2012-05-30 21:33:47,316 9412 DEBUG Connect 'new_node' to 'host=172.16.3.33 port=1919 user=postgres dbname=digoal_01  [...]'  
2012-05-30 21:33:47,324 9412 INFO plpgsql is installed  
2012-05-30 21:33:47,325 9412 INFO Installing pgq  
2012-05-30 21:33:47,325 9412 INFO   Reading from /opt/skytools3.0.2/share/skytools3/pgq.sql  
2012-05-30 21:33:47,721 9412 INFO pgq.get_batch_cursor is installed  
2012-05-30 21:33:47,721 9412 INFO Installing pgq_ext  
2012-05-30 21:33:47,722 9412 INFO   Reading from /opt/skytools3.0.2/share/skytools3/pgq_ext.sql  
2012-05-30 21:33:47,918 9412 INFO Installing pgq_node  
2012-05-30 21:33:47,919 9412 INFO   Reading from /opt/skytools3.0.2/share/skytools3/pgq_node.sql  
2012-05-30 21:33:48,217 9412 INFO Installing londiste  
2012-05-30 21:33:48,217 9412 INFO   Reading from /opt/skytools3.0.2/share/skytools3/londiste.sql  
2012-05-30 21:33:48,430 9412 INFO londiste.global_add_table is installed  
2012-05-30 21:33:48,431 9412 DEBUG exec_query: select * from pgq_node.get_node_info('replika')  
2012-05-30 21:33:48,434 9412 INFO Initializing node  
2012-05-30 21:33:48,434 9412 DEBUG Connect 'root_db' to 'host=172.16.3.176 port=1921 user=postgres dbname=digoal_01  [...]'  
2012-05-30 21:33:48,437 9412 DEBUG exec_query: select * from pgq_node.get_node_info('replika')  
2012-05-30 21:33:48,446 9412 DEBUG db='host=172.16.3.176 port=1921 user=postgres dbname=digoal_01 password=postgres' -- type='root' provider='host=172.16.3.176 port=1921 user=postgres dbname=digoal_01 password=postgres'  
2012-05-30 21:33:48,446 9412 DEBUG exec_query: select * from pgq_node.get_node_info('replika')  
2012-05-30 21:33:48,447 9412 DEBUG exec_query: select * from pgq_node.get_queue_locations('replika')  
2012-05-30 21:33:48,448 9412 DEBUG Connect 'provider_db' to 'host=172.16.3.176 port=1921 user=postgres dbname=digoal_01  [...]'  
2012-05-30 21:33:48,451 9412 DEBUG exec_query: select node_type, node_name from pgq_node.get_node_info('replika')  
2012-05-30 21:33:48,460 9412 DEBUG exec_cmd: select * from pgq_node.register_location('replika', 'dst1_digoal_01', 'host=172.16.3.33 port=1919 user=postgres dbname=digoal_01 password=postgres', false)  
2012-05-30 21:33:48,463 9412 INFO Location registered  
2012-05-30 21:33:48,463 9412 DEBUG exec_cmd: select * from pgq_node.register_location('replika', 'dst1_digoal_01', 'host=172.16.3.33 port=1919 user=postgres dbname=digoal_01 password=postgres', false)  
2012-05-30 21:33:48,466 9412 INFO Location registered  
2012-05-30 21:33:48,466 9412 DEBUG exec_cmd: select * from pgq_node.register_subscriber('replika', 'dst1_digoal_01', 'dst1_digoal_01', null)  
2012-05-30 21:33:48,470 9412 INFO Subscriber registered: dst1_digoal_01  
2012-05-30 21:33:48,471 9412 DEBUG exec_cmd: select * from pgq_node.register_location('replika', 'dst1_digoal_01', 'host=172.16.3.33 port=1919 user=postgres dbname=digoal_01 password=postgres', false)  
2012-05-30 21:33:48,472 9412 INFO Location registered  
2012-05-30 21:33:48,472 9412 DEBUG exec_cmd: select * from pgq_node.register_location('replika', 'src_digoal_01', 'host=172.16.3.176 port=1921 user=postgres dbname=digoal_01 password=postgres', 'False')  
2012-05-30 21:33:48,473 9412 INFO Location registered  
2012-05-30 21:33:48,473 9412 DEBUG exec_cmd: select * from pgq_node.create_node('replika', 'leaf', 'dst1_digoal_01', 'dst1_digoal_01', 'src_digoal_01', '1', null)  
2012-05-30 21:33:48,475 9412 INFO Node "dst1_digoal_01" initialized for queue "replika" with type "leaf"  
2012-05-30 21:33:48,477 9412 INFO Done  
```  
创建完叶节点, 启动subscriber的worker进程 :   
```  
postgres@db5-> londiste3 -d /home/postgres/londiste3/dst1_digoal_01.ini worker  
```  
可以看到现在系统中有两个python进程, 分别是provider和subscriber的worker进程.  
```  
postgres@db5-> ps -ewf|grep python  
postgres 27316     1  0 15:53 ?        00:00:00 /opt/python2.7.3/bin/python /opt/skytools3.0.2/bin/londiste3 -d /home/postgres/londiste3/src_digoal_01.ini worker  
postgres 27439     1  0 15:57 ?        00:00:00 /opt/python2.7.3/bin/python /opt/skytools3.0.2/bin/londiste3 -d /home/postgres/londiste3/dst1_digoal_01.ini worker  
```  
接下来配置pgq的ticker进程需要的配置文件, ticker是用来做batch的.  
```  
(Londiste needs a ticker which has to target the P(rovider) database, and can be run from another machine. The common usage is to run the ticker directly on the Provider database host.  
Any ticker can host as many queues as you want. Each queue has a unique name and can be used by as many subscribers as needed.  
If you have several copies of the same database, you can subscribe to the same queue from several subscribers. If you want to have different subsets of the same source database on several subscribers, you either can have those use the same queue but only a part of the tables in it, or have a queue per set of tables.)  
vi /home/postgres/londiste3/pgqd.ini  
[pgqd]  
base_connstr = host=172.16.3.176 port=1921 user=postgres password=postgres  
initial_database = template1  
logfile = /home/postgres/londiste3/log/pgqd.log  
pidfile = /home/postgres/londiste3/pid/pgqd.pid  
```  
启动pgqd进程.  
```  
postgres@db5-> pgqd -d /home/postgres/londiste3/pgqd.ini  
2012-05-30 21:35:07.497 9446 LOG Starting pgqd 3.0.2  
```  
pgqd是一个c程序.  
```  
postgres@db5-> ps -ewf|grep pgqd  
postgres 27637     1  0 16:01 ?        00:00:00 pgqd -d /home/postgres/londiste3/pgqd.ini  
```  
## 异常注意  
使用普通用户连接的话看到src和dst的数据库日志都有报错, set session_replication_role = 'replica'这个必须超级用户执行,  
我以前写过一篇关于这个参数的BLOG, 有兴趣的朋友参考如下 :   
《Can session_replication_role used like MySQL's BlackHole Engine?》  
http://blog.163.com/digoal@126/blog/static/163877040201119111234570/  
```  
postgres@db5-> less pgqd.log  
2012-05-30 15:59:17.110 CST,"digoal_01","digoal_01",18490,"172.16.3.176:33835",4fc5d355.483a,1,"SET",2012-05-30 15:59:17 CST,3/295,0,ERROR,42501,"permission denied to set parameter ""session_replication_role""",,,,,,"set session_replication_role = 'replica'",,,""  
```  
londiste的日志也有报错  
```  
postgres@db5-> less src_digoal_01.log   
2012-05-30 16:03:29,221 27316 WARNING Failure to call pgq_node.set_consumer_error()  
2012-05-30 16:03:29,221 27316 ERROR Job src_digoal_01 got error on connection 'db': permission denied to set parameter "session_repl  
ication_role".   Query: set session_replication_role = 'replica'  
Traceback (most recent call last):  
  File "/opt/skytools3.0.2/lib/python2.7/site-packages/pgq/cascade/consumer.py", line 285, in exception_hook  
    dst_db = self.get_database(self.target_db)  
  File "/opt/skytools3.0.2/lib/python2.7/site-packages/skytools/scripting.py", line 733, in get_database  
    return dbc.get_connection(params['isolation_level'], clist)  
  File "/opt/skytools3.0.2/lib/python2.7/site-packages/skytools/scripting.py", line 954, in get_connection  
    self.setup_func(self.name, self.conn)  
  File "/opt/skytools3.0.2/lib/python2.7/site-packages/londiste/playback.py", line 322, in connection_hook  
    curs.execute("set session_replication_role = 'replica'")  
  File "/opt/python2.7.3/lib/python2.7/site-packages/psycopg2/extras.py", line 123, in execute  
    return _cursor.execute(self, query, vars)  
ProgrammingError: permission denied to set parameter "session_replication_role"  
postgres@db5-> less dst1_digoal_01.log   
2012-05-30 16:03:34,347 27439 WARNING Failure to call pgq_node.set_consumer_error()  
2012-05-30 16:03:34,347 27439 ERROR Job dst1_digoal_01 got error on connection 'db': permission denied to set parameter "session_rep  
lication_role".   Query: set session_replication_role = 'replica'  
Traceback (most recent call last):  
  File "/opt/skytools3.0.2/lib/python2.7/site-packages/pgq/cascade/consumer.py", line 285, in exception_hook  
    dst_db = self.get_database(self.target_db)  
  File "/opt/skytools3.0.2/lib/python2.7/site-packages/skytools/scripting.py", line 733, in get_database  
    return dbc.get_connection(params['isolation_level'], clist)  
  File "/opt/skytools3.0.2/lib/python2.7/site-packages/skytools/scripting.py", line 954, in get_connection  
    self.setup_func(self.name, self.conn)  
  File "/opt/skytools3.0.2/lib/python2.7/site-packages/londiste/playback.py", line 322, in connection_hook  
    curs.execute("set session_replication_role = 'replica'")  
  File "/opt/python2.7.3/lib/python2.7/site-packages/psycopg2/extras.py", line 123, in execute  
    return _cursor.execute(self, query, vars)  
ProgrammingError: permission denied to set parameter "session_replication_role"  
```  
因此如果前面配置的是普通用户, 可以修改配置文件, 改成超级用户后reload  
```  
postgres@db5-> cat src_digoal_01.ini   
[londiste3]  
job_name = src_digoal_01  
db = host=172.16.3.176 port=1921 user=postgres dbname=digoal_01 password=postgres  
queue_name = replika  
logfile = /home/postgres/londiste3/log/src_digoal_01.log  
pidfile = /home/postgres/londiste3/pid/src_digoal_01.pid  
postgres@db5-> cat dst1_digoal_01.ini   
[londiste3]  
job_name = dst1_digoal_01  
db = host=172.16.3.33 port=1919 user=postgres dbname=digoal_01 password=postgres  
queue_name = replika  
logfile = /home/postgres/londiste3/log/dst1_digoal_01.log  
pidfile = /home/postgres/londiste3/pid/dst1_digoal_01.pid  
postgres@db5-> londiste3 -r /home/postgres/londiste3/src_digoal_01.ini  
postgres@db5-> londiste3 -r /home/postgres/londiste3/dst1_digoal_01.ini  
```  
正常后, 可以查看当前的复制状态, status用于输出节点树.  
```  
postgres@db5-> londiste3 /home/postgres/londiste3/src_digoal_01.ini status  
Queue: replika   Local node: src_digoal_01  
src_digoal_01 (root)  
  |                           Tables: 0/0/0  
  |                           Lag: 26s, Tick: 14  
  +--dst1_digoal_01 (leaf)  
                              Tables: 0/0/0  
                              Lag: 26s, Tick: 14  
```  
members用于输出这个配置文件下的复制节点member信息.  
```  
postgres@db5-> londiste3 /home/postgres/londiste3/src_digoal_01.ini members  
Member info on src_digoal_01@replika:  
node_name        dead             node_location  
---------------  ---------------  ----------------------------------------------------------------------------  
dst1_digoal_01   False            host=172.16.3.33 port=1919 user=postgres dbname=digoal_01 password=postgres  
src_digoal_01    False            host=172.16.3.176 port=1921 user=postgres dbname=digoal_01 password=postgres  
```  
开始添加需要复制的表, 首先是用provider的配置文件添加, 先添加两个带主键的表.  
```  
postgres@db5-> londiste3 -v /home/postgres/londiste3/src_digoal_01.ini add-table digoal_01.user_info digoal_01.user_session  
2012-05-30 21:37:57,024 9537 DEBUG Connect 'db' to 'host=172.16.3.176 port=1921 user=postgres dbname=digoal_01  [...]'  
2012-05-30 21:37:57,028 9537 DEBUG exec_query: select * from pgq_node.get_node_info('replika')  
2012-05-30 21:37:57,036 9537 DEBUG exec_query: select * from pgq_node.get_queue_locations('replika')  
2012-05-30 21:37:57,037 9537 DEBUG exec_cmd: select * from pgq_node.get_node_info('replika')  
2012-05-30 21:37:57,038 9537 DEBUG 100 Ok  
2012-05-30 21:37:57,039 9537 DEBUG Connect 'provider_db' to 'host=172.16.3.176 port=1921 user=postgres dbname=digoal_01  [...]'  
2012-05-30 21:37:57,047 9537 DEBUG exec_cmd: select * from londiste.local_add_table('replika', 'digoal_01.user_info', '[]', null, null)  
2012-05-30 21:37:57,064 9537 INFO Table added: digoal_01.user_info  
2012-05-30 21:37:57,065 9537 DEBUG exec_cmd: select * from londiste.local_add_table('replika', 'digoal_01.user_session', '[]', null, null)  
2012-05-30 21:37:57,067 9537 INFO Table added: digoal_01.user_session  
```  
开始添加需要复制的表, 然后是用subscriber的配置文件添加, 先添加两个带主键的表.  
```  
postgres@db5-> londiste3 -v /home/postgres/londiste3/dst1_digoal_01.ini add-table digoal_01.user_info digoal_01.user_session  
2012-05-30 21:38:08,369 9548 DEBUG Connect 'db' to 'host=172.16.3.33 port=1919 user=postgres dbname=digoal_01  [...]'  
2012-05-30 21:38:08,373 9548 DEBUG exec_query: select * from pgq_node.get_node_info('replika')  
2012-05-30 21:38:08,377 9548 DEBUG exec_query: select * from pgq_node.get_queue_locations('replika')  
2012-05-30 21:38:08,378 9548 DEBUG exec_cmd: select * from pgq_node.get_node_info('replika')  