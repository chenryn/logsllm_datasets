        if self._checked:
            self._container.add(EntryWidget(title="Conditional password input",
                                            value="Password set" if self._conditional_input
                                            else ""),
                                callback=self._get_conditional_input)
        self._window.add_separator()
    @property
    def completed(self):
        # completed if user entered something non-empty to the Conditioned input
        return bool(self._conditional_input)
    @property
    def status(self):
        return "Hidden input %s" % ("entered" if self._conditional_input
                                    else "not entered")
    def apply(self):
        # nothing needed here, values are set in the self.args tree
        pass
```
:::
:::
::: itemizedlist
**其他资源**
-   有关 `HelloWorldEditSpoke`{.literal} 的详情，请参考 ["使用
    NormalTUISpoke 来定义文本接口
    Spoke"一节](#developing-installer-add-ons_customizing-anaconda.html#using-normaltuispoke-to-define-a-text-interface-spoke_developing-installer-add-ons "使用 NormalTUISpoke 来定义文本接口 Spoke"){.xref}。
:::
:::
::: section
::: titlepage
# []{#developing-installer-add-ons_customizing-anaconda.html#deplyoing-and-testing-an-anaconda-add-on_developing-installer-add-ons}部署和测试 Anaconda 附加组件 {.title}
:::
您可以在安装环境中部署并测试您自己的 Anaconda
附加组件。要做到这一点，请按照以下步骤执行：
::: itemizedlist
**先决条件**
-   您创建了附加组件。
-   您有权访问您的 `D-Bus`{.literal} 文件。
:::
::: orderedlist
**步骤**
1.  在您喜欢的位置创建一个 `DIR`{.literal} 目录。
2.  将 `Add-on`{.literal} python 文件添加到
    `DIR/usr/share/anaconda/addons/`{.literal} 中。
3.  将您的 `D-Bus`{.literal} 服务文件复制到
    `DIR/usr/share/anaconda/dbus/services/`{.literal} 中。
4.  将您的 `D-Bus`{.literal} 服务配置文件复制到
    `/usr/share/anaconda/dbus/confs/`{.literal}。
5.  创建 [*[updates]{.replaceable}*]{.emphasis} 镜像。
    访问 `DIR`{.literal} 目录：
    ``` screen
    cd DIR
    ```
    查找 [*[updates]{.replaceable}*]{.emphasis} 镜像。
    ``` screen
    find . | cpio -c -o | pigz -9cv > DIR/updates.img
    ```
6.  提取 ISO 引导镜像的内容。
7.  使用生成的 `updates`{.literal} 镜像：
    ::: orderedlist
    1.  将 `updates.img`{.literal} 文件添加到您未打包的 ISO 内容的
        [**images**]{.strong} 目录中。
    2.  重新打包镜像。
    3.  设置 Web 服务器，来通过 HTTP 向 Anaconda 安装程序提供
        `updates`{.literal}.img 文件。
    4.  通过在引导选项中添加以下规范，在引导时加载
        `updates`{.literal}.img 文件：
        ``` screen
        inst.updates=http://your-server/whatever/updates.img to boot options.
        ```
    :::
:::
有关解包现有引导镜像、创建 `product.img`{.literal}
文件并重新打包镜像的具体步骤，请参阅 [提取 Red Hat Enterprise Linux
引导镜像](#working-with-iso-images_customizing-anaconda.html#extracting-red-hat-enterprise-linux-boot-images_working-with-iso-images "提取 Red Hat Enterprise Linux 引导镜像"){.link}。
:::
::: footnotes
\
------------------------------------------------------------------------
::: {#developing-installer-add-ons_customizing-anaconda.html#ftn.idm140248100544704 .footnote}
[^\[1\]^](#developing-installer-add-ons_customizing-anaconda.html#idm140248100544704){.simpara}
如果附加组件需要定义一个新的类别，则 [**[gui]{.package}**]{.strong}
软件包中可能还包含一个 [**[类别]{.package}**]{.strong}
子软件包，但不建议这样做。
:::
:::
:::
[]{#completing-post-customization-tasks_customizing-anaconda.html}
::: chapter
::: titlepage
# []{#completing-post-customization-tasks_customizing-anaconda.html#completing-post-customization-tasks_customizing-anaconda}第 6 章 完成自定义后的任务 {.title}
:::
要完成自定义配置，请执行以下任务：
::: itemizedlist
-   创建 product.img 文件（仅适用于图形化定制）。
-   创建自定义引导镜像。
:::
这部分提供有关如何创建 product.img
镜像文件以及创建自定义引导镜像的信息。
::: section
::: titlepage
# []{#completing-post-customization-tasks_customizing-anaconda.html#creating-a-product-img-file_completing-post-customization-tasks}创建 product.img 文件 {.title}
:::
`product.img`{.literal}
镜像文件是包含新安装程序文件的存档文件，这些安装程序文可在运行时取代现有的安装程序文件。
在系统启动期间，[**[Anaconda]{.application}**]{.strong} 将从引导介质上的
images/ 目录中加载 product.img
文件。然后，它会使用此目录中的文件替换安装程序文件系统中同名的文件。替换时的文件会自定义安装程序（例如，将默认镜像替换为自定义镜像）。
备注：`product.img`{.literal}
镜像必须包含与安装程序相同的目录结构。有关安装程序目录结构的更多信息，请参阅下表。
::: table
[]{#completing-post-customization-tasks_customizing-anaconda.html#tabl-product-img-directories}
**表 6.1. 安装程序目录结构和自定义内容**
::: table-contents
  自定义内容类型                         文件系统位置
  -------------------------------------- --------------------------------------------------
  Pixmaps（logo、sidebar、top bar 等）   `/usr/share/anaconda/pixmaps/`{.literal}
  GUI 风格表                             `/usr/share/anaconda/anaconda-gtk.css`{.literal}
  Anaconda 附加组件                      `/usr/share/anaconda/addons/`{.literal}
  产品配置文件                           `/etc/anaconda/product.d/`{.literal}
  自定义配置文件                         `/etc/anaconda/conf.d/`{.literal}
  Anaconda DBus 服务配置文件             `/usr/share/anaconda/dbus/confs/`{.literal}
  Anaconda DBus 服务文件                 `/usr/share/anaconda/dbus/services/`{.literal}
:::
:::
以下流程解释了如何创建 `product.img`{.literal} 文件。
::: orderedlist
**步骤**
1.  导航到工作目录，如 `/tmp`{.literal} ，创建名为 `product/`{.literal}
    的子目录：
    ``` literallayout
    $ cd /tmp
    ```
2.  创建一个子目录 product/
    ``` literallayout
    $ mkdir product/
    ```
3.  创建一个与您要替换的文件位置相同的目录结构。例如，如果要测试安装系统上
    `/usr/share/anaconda/addons`{.literal}
    目录中的附加组件，请在您的工作目录中创建同样的结构：
    ``` literallayout
    $ mkdir -p product/usr/share/anaconda/addons
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    要查看安装程序的运行时文件，请启动安装，并切换到虚拟控制台
    1([**Ctrl**]{.keycap}+[**Alt**]{.keycap}+[**F1**]{.keycap})，然后切换到第二个
    [**[tmux]{.application}**]{.strong}
    窗口([**Ctrl**]{.keycap}+[**b**]{.keycap}
    [**2**]{.keycap})。可用来浏览文件系统打开的 shell 提示符。
    :::
4.  将自定义文件（在这个示例中, [**[Anaconda
    的自定义附加组件]{.application}**]{.strong}）放在新创建的目录中：
    ``` literallayout
    $ cp -r ~/path/to/custom/addon/ product/usr/share/anaconda/addons/
    ```
5.  重复步骤 3 和
    4（为您要添加到安装程序的每个文件创建目录结构并将自定义文件放在其中）。
6.  在目录的根目录中创建一个 `.buildstamp`{.literal}
    文件。`.buildstamp`{.literal}
    文件描述了系统版本、产品和其他几个参数。以下是 Red Hat Enterprise
    Linux 8.4 中的 `.buildstamp`{.literal} 文件示例：
    ``` literallayout
    [Main]
    Product=Red Hat Enterprise Linux
    Version=8.4
    BugURL=https://bugzilla.redhat.com/
    IsFinal=True
    UUID=202007011344.x86_64
    [Compose]
    Lorax=28.14.49-1
    ```
    `IsFinal`{.literal}
    参数指定镜像是否是产品的发行版本(GA)版本(`True`{.literal})，还是预发布，如
    Alpha、Beta 版还是一个内部里程碑(`False`{.literal})。
7.  进到 `product/`{.literal} 目录，创建 `product.img`{.literal}
    归档文件：
    ``` literallayout
    $ cd product
    ```
    ``` literallayout
    $ find . | cpio -c -o | gzip -9cv > ../product.img
    ```
    这会在 `product/`{.literal} 目录的上一级目录中创建
    `product.img`{.literal} 文件。
8.  将 `product.img`{.literal} 文件移到提取的 ISO 映像的
    `images/`{.literal} 目录。
:::
现在 product.img 文件已创建好，您要做的自定义内容被放在各自的目录中。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
您可以把这个文件放在不同的地方，而不是在引导介质上添加
`product.img`{.literal} 文件，并在引导菜单中使用
`inst.updates=`{.literal}
引导选项加载它，。在这种情况下，只要可以从安装系统访问该位置，镜像文件可以是任何名称，并可放在任意位置（USB
闪存驱动器、硬盘、HTTP、FTP 或者 NFS 服务器）。
:::
:::
::: section
::: titlepage
# []{#completing-post-customization-tasks_customizing-anaconda.html#creating-custom-boot-images_completing-post-customization-tasks}创建自定义引导镜像 {.title}
:::
自定义引导镜像和 GUI 布局后，创建一个新镜像，其中包含您所做的更改。
要创建自定义引导镜像，请按照以下步骤操作。
::: orderedlist
**步骤**
1.  请确定您的所有更改都包含在工作目录中。例如，如果您要测试附加组件，请确保将
    `product.img`{.literal} 放在 `images/`{.literal} 目录中。
2.  确保您当前的工作目录是提取的 ISO 镜像的顶级目录 - 例如
    `/tmp/ISO/iso`{.literal}。
3.  使用 `genisoimage`{.literal} 创建新的 ISO 镜像：
    ``` literallayout
    # genisoimage -U -r -v -T -J -joliet-long -V "RHEL-9 Server.x86_64" -volset "RHEL-9 Server.x86_64" -A "RHEL-9 Server.x86_64" -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table -eltorito-alt-boot -e images/efiboot.img -no-emul-boot -o ../NEWISO.iso .
    ```
    在上例中：
    ::: itemizedlist
    -   如果对需要在同一磁盘上加载文件的位置的选项使 `LABEL=`{.literal}
        指令，请确保 `-V`{.literal}、`-volset`{.literal} 和
        `-A`{.literal}
        选项的值与镜像的引导装载程序配置相匹配。如果您的引导装载程序配置（对
        BIOS 是 `isolinux/isolinux.cfg`{.literal}，对 UEFI 是
        `EFI/BOOT/grub.cfg`{.literal}）使用
        `inst.stage2=LABEL=disk_label`{.literal}
        段来从同一磁盘加载安装程序的第二阶段，那么磁盘标签必须匹配。
        ::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
        ### 重要 {.title}
        在引导装载程序配置文件中，将磁盘标签中的所有空格替换为
        `\x20`{.literal}。例如，如果您使用 `RHEL 9`{.literal} 标签创建
        ISO 镜像，引导装载程序配置应使用 `RHEL\x207.1`{.literal}。
        :::
    -   将 `-o`{.literal}
        选项(`-o ../NEWISO.iso`{.literal})的值替换为新镜像的文件名。示例中的值在当前目录
        [*上面的*]{.emphasis} 目录中创建 `NEWISO.iso`{.literal} 文件。
        有关这个命令的详情，请参考 `genisoimage(1)`{.literal} 手册页。
    :::
4.  在镜像中省略 MD5 checksum。请注意，如果没有 MD5
    检查和，镜像验证检查可能会失败（引导加载程序配置中的
    `rd.live.check`{.literal} 选项），安装可能会挂起。
    ``` literallayout
    # implantisomd5 ../NEWISO.iso
    ```
    在上例中, 使用文件名和您在上一步中创建的 ISO 镜像位置替换
    [*../NEWISO.iso*]{.emphasis}。
    现在，您可以将新 ISO
    镜像写入到物理介质或网络服务器，来在物理硬件上启动它，或者您可以使用它来开始安装虚拟机。
:::
::: itemizedlist
**其他资源**
-   有关准备引导介质或网络服务器的说明，请参阅[执行高级 RHEL
    安装](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html-single/performing_an_advanced_rhel_installation/index#kickstart-and-advanced-boot-options_installing-rhel-as-an-experienced-user){.link}。
-   有关使用 ISO
    镜像创建虚拟机的详情，请参考[配置和管理虚拟化](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/configuring_and_managing_virtualization/index){.link}。
:::
:::
:::