r
i
F
)
s
s
e
l
m
a
e
S
(
#
0
2
7
3
7
1
10
15
9
0
4
4
10
3
3
12
13
11
9
5
3
7
1
10
6
12
0
0
7
3
9
15
8
9
10
9
0
4
3
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:15:22 UTC from IEEE Xplore.  Restrictions apply. 
1376
that
the PWM detected the different
realm is the same across multiple domains. PWMs commonly
solved this by letting users search accounts and displaying a
warning to make them aware of potential phishing attacks.
After conﬁrming the warning, the credentials could be aut-
oﬁlled. Another interesting case is D-04 where both HTTP
and HTTPS protocols were used to access a website. We rate
the interaction as seamless if PWMs allowed to insert the
same credentials to the HTTP page, which is critical from a
security perspective. Common solutions we observed included
PWMs offering autoﬁll with warnings and requiring additional
interaction. This seems to be a sensible compromise until
enforcing HTTPS has ﬁnally become the default solution.
Input Fields. This category covers atypical or confusing input
ﬁelds in forms. Within our tests, I-08 revealed to be the most
challenging, being our only input ﬁeld example including a
type of password policy by enforcing a maximal length in the
password ﬁeld. Only one PWMs handled this case seamlessly,
which we deﬁned as limiting the ﬁlled password to the allowed
number of symbols and offering to save this as a new password
as this meant
input.
Most PWMs ignored the constraint, inserting their full-length
passwords, which might lead to rejected requests or other
problems after submitting. We did not expect
this result,
because the max-length attribute is machine-readable and
therefore should help the PWMs instead of posing a difﬁcult
interaction. This ﬁnding is in line with our results for I-04,
in which the autocomplete-attribute is used. This allows
websites to specify the expected type of input, which was
a new password in this case. The other interactions in this
category focused on different levels of noise that obstruct the
PWM. While I-01 to I-03 named input ﬁelds in unusual ways
and posed no problem to most (eleven to thirteen) of our
tested PWMs, interactions I-05 to I-07 omitted information
such as type=password or used unusual input types like
textarea. This introduced security risks such as autoﬁlling
passwords into cleartext ﬁelds. Only between three and seven
PWMs achieved seamless interactions.
JavaScript. This category focuses on JavaScript as part of
the login process of websites. Here, J-02 is the best working
interaction, which included a submit button that was disabled
until a keypress event is registered. We found that twelve
PWMs (80%) provided a seamless interaction and two more
send a somewhat delayed event. Further interesting cases were
logins with multiple steps (J-03 & J-04), e. g. by showing
a username ﬁeld and a button to continue to the password
input. Multiple widespread service providers like Google and
Microsoft utilize this authentication workﬂow, and while al-
most all PWMs had workarounds or very simple ﬁxes using
page re-scans to support them, no PWM provided a seamless
experience. This meant that the PWMs with autologin features
were not able to utilize them, and the PWMs with autoﬁll
left ﬁelds empty and required manual interaction. Overall, this
demonstrates the difﬁculty of these interactions, especially in
J-04, where the password ﬁeld was hidden behind another
GET-request, therefore requiring an additional page load, the
PWM has no way of detecting if this form will be used
for authentication. Finally, J-05 and J-06 directly manipulate
input ﬁelds after they are ﬁlled. In J-05, inputs are replaced
with asterisks (*) while J-06 swaps a hidden real password
ﬁeld with the initially visible one when it is focused. Both
mechanisms were employed as security mechanisms and were
problematic for PWMs. While J-05 achieved seven seamless
interactions as the substitution did not obstruct the PWMs,
only three PWMs detected the ﬁeld replacement in J-06 and
ﬁlled the correct one.
Non-Standard Forms. We further investigated how well
PWMs are suited to work with non-standard forms, which
includes input ﬁelds or submit buttons that deviate from web
standards by e. g. using custom tags (N-02) or placing the
submit button outside of the authentication form (N-04). As
PWMs rely on certain criteria such as web standards to detect
relevant authentication input ﬁelds, they can struggle with
detection if a website deviates from widespread best practices.
Overall, we found that most tested PWMs were able to detect
malformed login forms. Within our sample, seven (46%)
PWMs were able to fulﬁll our requirements seamlessly. Three
received ratings of non-applicable for most interactions in this
category as they do not support autosave. The only exception
is N-02 (custom WebComponent-tag as form element), with
which every PWM was able to interact without problems.
Here, we only required autoﬁll instead of autosave due to
our endeavor to stay close to the examples we found in the
user feedback evaluation. We argue that PWMs use similar
approaches to detect input ﬁelds, which should therefore not
affect the performance of autosave or autoﬁll functionalities.
Timing. This category dealt with two test cases in which some
sort of delay can obstruct PWMs as relevant information is not
(yet) available. Between both cases, support differed vastly:
While nine (60%) of the tested PWMs had no problem with
T-01 (input ﬁelds appear after a few seconds), none were able
to succeed in T-02 (invalid TOTP code due to delay before
submission) without any additional user intervention. For T-01,
we observe three PWMs that were unable to ﬁll the input ﬁelds
without manual interaction or a re-scan of the website. Two
PWMs require the user to e. g. click on the icon of the PWM,
which triggers the autoﬁll. We suspect that the PWMs without
solution only scan the page once as soon as it is available, and
therefore miss ﬁelds that become accessible at a later time.
Interaction T-02 expects the PWMs to ﬁll a TOTP code besides
username and password. This does not only require them to
be able to store and generate TOTPs, but to also be able to ﬁll
and update them if they turn invalid. We found that most (nine,
60%) tested PWMs do not support TOTP in general, rendering
us unable to test this MWE with them. For the remaining
PWMs, none were able to update the code while four PWMs
can generate and autoﬁll the currently valid TOTP. Finally, two
only generate a TOTP and require users to copy and paste it.
We consider these to be unable to succeed in this case.
Web Standards. Finally, we included two Web Standard
MWEs that both included HTTP Basic Authentication. [44].
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:15:22 UTC from IEEE Xplore.  Restrictions apply. 
1377
Here, almost all PWMs behaved in the same way in both
MWEs, with the exception of Chrome, where W-01 (HTTP
Basic Authentication as login method) worked ﬂawlessly,
while autosaving credentials in W-02 (multiple ﬁles on the
website are secured with HTTP Basic Authentication, resulting
in multiple authentication requests) required explicit user
approval and reloading the website. Although HTTP Basic
Authentication is one of the oldest and most basic login
mechanisms, most PWMs (ten, 66%) struggle with detecting
its pop-ups as login input ﬁelds, with only one of them warning
the user that autoﬁll is not possible and that they should copy
and paste their credentials manually. Within the remaining
PWMs, four are able to detect and ﬁll the form, while one
offers a setting to activate basic authentication support.
D. Replication Package
To support
the replication of our work, we make the
following item available as part of our replication package: We
include the set of collected GitHub issues (cf. IV-B), Chrome
Web Store user reviews and support requests (cf. IV-B) as well
as the code book created as a result of our coding process
(cf. IV-C Step 4) and the resulting analysis results (cf. Table
V-C).3 The implementation of our MWEs is included as a
web application, supported by sample videos of screen casts
documenting our analysis process and the set of extension
packages used during our analysis.
VI. DISCUSSION
In this section, we discuss our ﬁndings and develop recom-
mendations to help PWMs and websites to improve authenti-
cation experience, as well as pointing existing shortcomings.
A. User complaints
To address RQ1: Which interaction patterns on the web
are problematic for PWMs? we decided to investigate user
feedback, in order to collect feedback for real-world deploy-
ments in uncontrolled environments. We reviewed the related
websites and interactions, sorted them into categories and
used these ﬁndings to develop MWEs that reﬂected interaction
problems. During this process, we found that almost no user
feedback covered the password generation. This is surprising
because from a security perspective, this is one of the main
advantages of PWMs, and the few interactions we found
concerning this feature (like I-08: max-length attribute for a
password ﬁeld) indicate that it should be a common issue
across PWMs. We reason that we found only very little user
feedback for this feature because users expect this to be the
website’s fault or might not be using the feature. This could
hint at an awareness problem concerning the security beneﬁts
and possibilities of PWMs. The number of failures means that
password generation itself is problematic. The low amount
of user feedback we found for this large ﬁeld of password
rules indicates that perhaps there are other problematic issues
that users are unlikely to report (at least to our chosen PWM
feedback sources).
3The replication package is provided at https://publications.teamusec.de/
passwordManagers
B. PWM Evaluation
To investigate RQ2: How do PWM browser extensions
handle these interactions? we collected the interactions of
15 PWMs with the MWEs we developed previously. Here,
we found numerous interaction problems, pointing us towards
the most problematic areas for PWMs that we need to work
on. In summary, only two interactions were seamless for all
tested password managers: N-02 (the custom web component
tag) and AN-04 (form not at all related to authentication),
both found on PWMs with less than 10,000 downloads,
likely indicating ”non-issues” that should simply be ﬁxed by
the PWMs they were reported for. On the other hand ﬁve
interactions where not solved seamlessly by any PWM we
tested, indicating a gap in possible approaches to solve the
problems represented by these MWEs. For these and any
other difﬁcult or important case, we would like to formulate
recommendations in the following section.
C. Recommendations
This sections aims to use our ﬁndings in the previous
studies in order to answer RQ3: What can be done to
improve the interaction between PWMs and websites? We
discuss potential improvements for the interaction problems
we found and discuss their feasibility. While we try to focus
on improvements that are possible on the web right now,
we found a few gaps that need to be ﬁlled by the major
web standards before websites or PWMs can address them.
We highlight these responsible actors at the heading of the
following recommendation paragraphs.
Support for Using Credentials in Multiple Environments
(Webstandards). One strong pointer here is found in inter-
actions D-01 to D-04 and D-07: a service that spans or does
not span across multiple domains, paths and protocols. The
underlying problem is most likely the lack of standardization:
Since there is no best practice for PWMs how to match
different origins or how to detect whether or not different
URLs serve the same service and should therefore be pro-
vided with the same credentials, and since posting username
and password combinations to the wrong website poses a
critical security risk, PWM have adopted different default
strategies that mostly lead to non-recognition of URLs that
deviate from the stored websites. Additionally, some of these
cases require opposing behaviors: Fulﬁlling all interactions
seamlessly would require PWMs to identify e. g. subdomains
as both the same or different services that they should or
should not match at the same time. Upon investigating how
open source PWMs solve these interactions we found a list
of equivalent websites within the repository of one of the
open source [5]. This indicates a gap within standards, since
websites likely also want to indicate this kind of behavior to
any authentication mechanism. To solve this, a website could
use a process similar to the Cross Origin Resource Sharing
header, perhaps in combination with the content security
policy. Currently no ﬁtting standards exists however, so this
would need further investigation and discussion In the case
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:15:22 UTC from IEEE Xplore.  Restrictions apply. 
1378
of D-04 (protocol switch from HTTP to HTPSc) a seamless
interaction represents a security risk, which means that this
rating is undesirable. However, this case represents a usability
and security trade-off, as the conditional interactions we found
mostly rely on warnings, which in the past have proven to be
an ineffective security measure on their own [33]. Furthermore,
HTTPS is likely to become a web default [43], [45]. Websites
will need to comply or become effectively inaccessible, which
in principle solves this problem. Furthermore, hard coding
information that could change in the future, such as domains,
can lead to security issues later on, as domain owner changes
are possible.
Better Support
for Multipage Login (Websites). Other
examples for predeﬁned data include rules to improve support
for logins that span multiple pages as tested in J-03 & J-04. For
popular services like Google, we found that they rely on lists
of predeﬁned sites in PWMs that require special treatment. We
found a list of websites with username-only logins within the
repository of one of the open source PWMs [70]. Similar to
hard coded domains, this information can change if a website
changes its authentication mechanism which can cause the
respective PWM to malfunction. Websites could potentially
use the autocomplete-attribute [18] to indicate the need
to ﬁll username on one page and password for the account on
the other, but this needs widespread adoption to prevent the
need for hard coded lists.
Support for Custom Fields (PWMs, Websites). We further
were able to observe a lack of support for custom ﬁelds within
login forms. Many of the PWMs we tested were unable to
detect, store or autoﬁll them, while several others could only
do so after manual interaction. This also often required a te-
dious search for the correct required settings within the PWM,
which we deem to be an usability shortcoming. We argue
that while it might not always be possible to automatically
detect all relevant custom ﬁelds, PWMs should offer an easily
accessible way to store additional data for all credentials. Fur-
thermore, the HTML autocomplete-attribute [18] already
offers a standardized way to pre-deﬁne identity-related content
types that an input ﬁeld expects. While we cannot judge the
prevalence of this attribute on websites, we suggest this as
a solution that website managers can adopt to help PWMs
correctly detect and autoﬁll additional information.
Avoid Obscure JavaScript (Websites). Another striking ﬁnd-
ing in our evaluation of user feedback was the frequent
mentions of websites that showed some kind of odd behavior,
obstructing the PWM. In these cases, the websites made use
of JavaScript to implement e. g. security measures, which are
mostly meant as security measures to avoid automatic inter-
action with the website. This includes websites that substitute
the password with asterisks after submission, delete automated
input, or use a hidden input ﬁeld for passwords that only
appears if the dummy ﬁeld is focused. Features like this are
aimed at increasing security and were mostly found on e. g.
banking websites, however, we argue that while there is a
ﬁtting threat model, this type of attack is very unlikely and
does not justify the decreased usability by essentially blocking