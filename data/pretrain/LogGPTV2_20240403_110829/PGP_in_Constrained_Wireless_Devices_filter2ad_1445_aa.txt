title:PGP in Constrained Wireless Devices
author:Michael Brown and
Donny Cheung and
Darrel Hankerson and
Julio C&apos;esar L&apos;opez-Hern&apos;andez and
Michael Kirkup and
Alfred Menezes
USENIX Association
Proceedings of the
9th USENIX Security Symposium
Denver, Colorado, USA
August 14 –17, 2000
THE ADVANCED COMPUTING SYSTEMS ASSOCIATION
© 2000 by The USENIX Association
Phone: 1 510 528 8649
FAX: 1 510 548 5738
All Rights Reserved
Email: PI:EMAIL
For more information about the USENIX Association:
WWW: http://www.usenix.org
Rights to individual papers remain with the author or the author's employer.
 Permission is granted for noncommercial reproduction of the work for educational or research purposes.
This copyright notice must be included in the reproduced paper. USENIX acknowledges all trademarks herein.
PGP in Constrained Wireless Devices
Michael Brown
(cid:3)
Donny Cheung
(cid:3)
Michael Kirkup
(cid:3)
Darrel Hankerson†
Alfred Menezes
Julio Lopez Hernandez‡
(cid:3)
Abstract
The market for Personal Digital Assistants (PDAs) is
growing at a rapid pace. An increasing number of prod-
ucts, such as the PalmPilot, are adding wireless com-
munications capabilities. PDA users are now able to
send and receive email just as they would from their
networked desktop machines. Because of the inherent
insecurity of wireless environments, a system is needed
for secure email communications. The requirements for
the security system will likely be inﬂuenced by the con-
straints of the PDA, including limited memory, limited
processing power, limited bandwidth, and a limited user
interface.
This paper describes our experience with porting PGP
to the Research in Motion (RIM) two-way pager, and in-
corporating elliptic curve cryptography into PGP’s suite
of public-key ciphers. Our main conclusion is that PGP
is a viable solution for providing secure and interopera-
ble email communications between constrained wireless
devices and desktop machines.
1 Introduction
It is expected that there will be more than 530 million
wireless subscribers by the year 2001, and over a billion
by 2004 (see [46]). Efforts are underway, most notable
among them the Wireless Application Protocol (WAP)
[50], to deﬁne and standardize the emerging wireless In-
ternet. Users will access wireless services including tele-
phony, email and web browsing, using a variety of wire-
less devices such as mobile phones, PDAs (such as the
PalmPilot), pagers, and laptop computers equipped with
wireless modems. Many wireless devices are constrained
by limited CPU, memory, battery life, and user interface
(e.g., small screen size, or a lack of graphics capabili-
ties). Wireless networks are constrained by low band-
(cid:3)
Dept. of Combinatorics and Optimization, University of Water-
loo, Canada. Emails: fmk3brown, dccheung, mkirkup, ajmenezeg
@uwaterloo.ca
†Dept. of Discrete and Statistical Sciences, Auburn University,
USA. Email: hankedr@mail.auburn.edu. Supported by a grant from
Auburn University COSAM.
‡Institute of Computing, State University of Campinas, Brazil, and
Dept. of Computer Science, University of Valle, Colombia. Email:
PI:EMAIL
width, high latency, and unpredictable availability and
stability. The purpose of this paper is to examine the via-
bility of using PGP for providing secure and interopera-
ble email communications between constrained wireless
devices and desktop machines.
There are two popular standards for email security:
S/MIME and PGP. S/MIME [40] provides conﬁdentiality
and authentication services to the MIME (Multipurpose
Internet Mail Extensions) Internet email format standard.
PGP (Pretty Good Privacy) [8, 16] is an email security
standard that has been widely used since it was ﬁrst in-
troduced by Zimmermann in 1991 [52]. While it appears
that S/MIME will emerge as the industry standard for
commercial and organizational use, it also appears that
PGP will remain the choice for personal email security
for many users in the years to come.
The speciﬁc goals of this project were three-fold:
1. Port the basic PGP functionality to the RIM pager,
and implement a workable key management system
and a usable user interface that is appropriate for the
RIM pager environment.
2. Achieve interoperability with existing PGP im-
plementations for workstation and PalmPilot plat-
forms.
3. Incorporate
standards-based
commercial-
strength elliptic curve cryptography into PGP’s
suite of public-key algorithms.
and
The remainder of this paper is organized as follows. §2
provides a brief history of PGP, and summarizes the se-
curity services offered by PGP. A description of the RIM
two-way pager including hardware, software, user inter-
face, development tools, and the paging environment, is
provided in §3. A brief overview of the PalmPilot is pre-
sented in §4. Elliptic curve cryptography is introduced
in §5, along with a description of our implementation.
We provide timing comparisons of our ECC implemen-
tation with RSA and DL implementations on a variety of
platforms. Our experience with porting PGP to the RIM
pager is described in §6. Our implementation, including
a description of the user interface and key management
facilities, is presented in §7. In §8, we describe some
possible directions for future work. Finally, §9 makes
concluding remarks.
2 Pretty Good Privacy
2.1 History of PGP
The history of the Pretty Good Privacy (PGP) applica-
tion is both interesting and convoluted, and encompasses
issues in national security, personal privacy, patents, per-
sonalities, and politics; see, for example, [16]. A myriad
of PGP releases emerged, in part due to US Government
restrictions on exports.
The initial PGP application was released in 1991.
According to [16] this was an “emergency release”
prompted in part by a proposed anti-crime bill which
would require eavesdropping ability for the US Govern-
ment on all communications systems. An RSA-based
public-key scheme was used, along with a symmetric-
key algorithm developed by Zimmermann known as
Bass-O-Matic.
Security concerns over Bass-O-Matic resulted in its re-
placement with IDEA in PGP 2. A commercial version
of PGP was developed in 1993 with ViaCrypt (which had
a license from Public Key Partners for RSA). Although
RSA Data Security had released a reference implemen-
tation (RSAREF) of RSA that could be used for non-
commercial purposes, there were interface and other dif-
ﬁculties preventing its use in PGP. In 1994, RSAREF 2.0
was released and included changes which MIT recog-
nized would solve the interface problems. This eventu-
ally led to PGP 2.6, a version which could be used freely
for non-commercial purposes, and which quickly leaked
out of the US and developed into several international
variants.
MIT PGP 2.6.2 increased the ceiling on the maximum
size of an RSA modulus (from 1024 to 2048 bits, al-
though ViaCrypt reports a patch correcting certain bugs
with the longer moduli). The symmetric-key cipher is
IDEA, a 64-bit block cipher with 128-bit keys; MD5 is
used as the hash function, having digest length of 128
bits. A dependency tree for various US and international
versions and variants may be found via [38].
Work on PGP 3 began in 1994, and was released by
PGP Inc (formed by Zimmermann) as PGP 5 in May
1997.1 New algorithms were present, including DSA
[34] for signatures, an ElGamal public-key encryption
scheme [12], the Secure Hash Algorithm (SHA-1) [35]
with 160-bit message digests, and the symmetric-key ci-
phers CAST and Triple-DES (64-bit block ciphers with
key sizes of 128 and 168 bits, respectively).
In August of 1997, the IETF was approached concern-
ing a proposal to bring PGP to a standards body as a pro-
tocol. An OpenPGP working group was formed. Using
1Callas [8] notes that ViaCrypt had released several products with
a version number of 4 although they were derivatives of PGP 2, and “it
was easier to explain why three became ﬁve than to explain why three
was the new program and four the old one.”
PGP 5 as the base, a format speciﬁcation was promoted
to a Proposed Standard by the IESG in October 1998.
The resulting IETF speciﬁcation for OpenPGP [9] de-
scribes an unencumbered architecture, although compat-
ibility with PGP 2.6 was encouraged. A reference im-
plementation was written by Tom Zerucha and provided
in a form suitable for scanning to circumvent US export
restrictions [8].
In December 1999, Network Associates (which had
acquired PGP Inc in December 1997) was granted a li-
cense by the US Government to export PGP. An inter-
national PGP project [25], which had been making PGP
available world-wide by scanning paper copies that were
(legally) exported from the US, announced that the lift-
ing of the ban on strong encryption “marks the end of
the PGPi scanning and OCR project, which started with
PGP 5.0i in 1997.”
Several OpenPGP-compliant applications have been
developed. The reference implementation by Zerucha
[8] relies on the OpenSSL library [37], and has been
used by Zerucha as the basis for a PalmPilot implemen-
tation. The standard does not require the use of patented
algorithms, and applications such as GNU Privacy Guard
[18], released in 1999 as a replacement for PGP, can be
both compliant and distributable without patent restric-
tions (since it does not include IDEA or RSA).
2.2 PGP security services
KEY GENERATION AND STORAGE. PGP allows a user
to generate multiple key pairs (public-key/private-key
pairs) for each public scheme supported. Different key
pairs are generated for public-key encryption and for dig-
ital signatures. The key pairs, together with public keys
of other users, are stored in a ﬁle called the key ring.
Information stored with a public key includes the
user’s name, email address, trust and validity indicators,
key type, key size, expiry date, ﬁngerprint (e.g., the 160-
bit SHA-1 hash of the formatted public key), and a key
ID (e.g., the low order 64 bits of the ﬁngerprint).
Private keys are not stored directly in the key ring.
Instead, the user selects a passphrase which is salted
and hashed to derive a key k for a symmetric encryp-
tion scheme. The private key is encrypted using k, the
passphrase is discarded, and the encrypted private key is
stored. Subsequently, when the user wishes to access a
private key (in order to decrypt a message or sign a mes-
sage), the passphrase must be supplied so that the system
can regenerate k and recover the private key.
CRYPTOGRAPHIC SERVICES. PGP uses a combination
of symmetric-key and public-key methods to provide au-
thentication and conﬁdentiality.
A message can be signed using the private key from a
suitable public-key signature scheme. The recipient can
verify the signature once an authentic copy of the signer’s
corresponding public key is obtained. The OpenPGP
standard requires support for SHA-1 as a hash algorithm
and the DSA, and encourages support for the MD5 hash
function and RSA as a signature algorithm.
The use of symmetric-key algorithms (such as DES)
alone for encryption is supported, although PGP is
known more for the conﬁdentiality provided by a combi-
nation of public-key and symmetric-key schemes. Since
public-key encryption schemes tend to be computation-
ally expensive, a session key is used with a symmetric-
key scheme to encrypt a message; the session key is then
encrypted using one or more public keys (typically, one
for each recipient), and then the encrypted message along
with each encrypted session key is delivered. The stan-
dard requires support for an ElGamal public-key encryp-
tion scheme and Triple-DES; support for RSA, IDEA,
and CAST is encouraged.
Signatures and encryption are often used together, to
provide authentication and conﬁdentiality. The message
is ﬁrst signed and then encrypted as described above.
KEY MANAGEMENT. The OpenPGP standard does not
have a trust model. An OpenPGP-compliant PGP imple-
mentation could support a hierarchical X.509-based pub-
lic key infrastructure (PKI). The trust model employed
by existing PGP implementations is a combination of di-
rect trust and the web of trust.
In the former, user A
obtains B’s public key directly from B; ﬁngerprints fa-
cilitate this process as only the ﬁngerprints have to be au-
thenticated. In the web of trust model, one or more users
can attest to the validity of B’s public key by signing it
with their own signing key. If A possesses an authentic
copy of the public key of one of these users, then A can
verify that user’s signature thereby obtaining a measure
of assurance of the authenticity of B’s public key. This
chaining of trust can be carried out to any depth.
3 RIM’s Pager
3.1 Overview
The RIM wireless handheld device is built around a cus-
tom Intel 386 processor running at 10 MHz. Current
models carry 2 Mbytes of ﬂash memory and 304 Kbytes
of SRAM. There is a fairly conventional (if rather small)
keyboard with a 6- or 8-line by 28 character (depending
on font) graphical display. A thumb-operated trackwheel
takes the place of a conventional mouse (see Figure 1).
A set of applications including a calendar and address
book are commonly installed; even the occasional game
of Tetris (falling blocks) is possible with efﬁcient use of
the graphical display. The main attraction is the wireless
communication features, in particular, email solutions.
The integrated wireless modem is essentially invisible,
with no protruding antennae. The device is roughly 3.5in
x 2.5in x 1in (89mm x 64mm x 25mm) and weighs 5
ounces (142 g) with the single AA battery (there is also
an internal lithium cell). RIM claims that the battery will
last roughly three weeks with typical usage patterns.
A docking cradle can be used to directly connect the
device to a serial port. Software for Microsoft Windows
is provided to download programs and other information,
and to synchronize application data. An RS-232 compat-
ible serial port on the pager runs at 19200 bps.
To be slightly more precise, RIM has two hardware
devices, the 850 and the 950, which are combined with
software to provide communications solutions. We used
RIM’s BlackBerry solution [6] which uses the same
hardware as the RIM Inter@ctive Pager 950. The 950
is more of a 2-way pager, sold in Canada by Cantel and
in the US by BellSouth Wireless Data. The BlackBerry
is sold directly by RIM and includes features such as sin-
gle mailbox integration and PIM synchronization to the
device.
The RIM 850 looks very similar to the 950 device,
but runs on a different wireless network (ARDIS for the
850 as opposed to Mobitex for the 950). The RIM 850
is resold through American Mobile Satellite Corporation
(AMSC) in the US, and is part of the AMSC and SkyTel
eLink solution.
3.2 Software development
The BlackBerry Software Developer’s Kit (SDK) is de-
signed to make use of the features in Microsoft’s C++
compiler packages. The SDK is freely available from
[41]. A handheld application is built as a Windows DLL,
a process which allows use of development and debug-
ging facilities available for Windows. However, only a
small subset of the usual library calls may be used, along
with calls to SDK-supplied routines. The resulting DLL
is then stripped of extraneous information and ported into
the handheld operating system.
For simplicity, the multitasking is cooperative. An ap-
plication is expected to periodically yield control; in fact,
failure to yield within 10 seconds can trigger a pager re-
set. As an example, public-key operations tend to be
computationally expensive, and it was necessary to insert
explicit task yields in the code developed for this paper.
The SDK includes a simulator which can be used to
test applications on the handheld operating system with-
out having to download to the device (the images in this
paper are snapshots of the simulator). A radio device
(RAP modem) can be connected via serial port to the host
machine so that applications running in the simulator can
communicate with the Mobitex network. Alternately, a
pager in the cradle can be used to exchange email with
the simulator, provided that the pager is in coverage.
Figure 1: The RIM pager.
The simulator is essential for serious development, al-
though testing on the pager can reveal bugs not found
in the simulator. For example, we managed to link ap-
plications in such a way that they would work in the
simulator but fail on the pager. At one point, we care-
lessly used some instructions introduced on the Intel 486,
which would work in the simulator when running on a
486-or-better, but would fail on a 386.
3.3 File system
The pager relies on ﬂash memory to store non-volatile
data. Writing to ﬂash is signiﬁcantly more expensive
than reading, primarily because ﬂash is a write-once,
bulk-erase device. Rewriting a single word of ﬂash in-
volves saving the contents of the 64K sector, erasing,
and rewriting the entire sector. The longest step in this
operation is erasing the sector, and takes approximately
5 seconds. A log-structured ﬁle system is employed in
order to maintain acceptable performance. Periodically,
the expensive process of committing the log updates is
performed in order to free ﬁle system space.
The programming interface to the ﬁle system is gen-
erally through a relatively small number of high-level
database-style calls. Handles are used to read and up-
date databases and variable-length records, a simple but
effective method to cooperate with the updating process
of the log-structured ﬁle system.
It is possible to use
stream-style I/O operations of the type familiar to C pro-
grammers, which we occasionally found useful for test-
ing code fragments developed on more traditional sys-
tems.
4 The PalmPilot
For comparison, our crypto routines were also run on
the PalmPilot, a very popular PDA based on a 16 MHz
Motorola 68000-type “Dragonball” processor.2 Recent
models carry 2–4 MB of memory in addition to ROM,
although considerable expansion is possible.
In 1999,
wireless capabilities were introduced on the Palm VII.
The communications model differs from the RIM device;
in particular, the Palm does not qualify as a pager in the
usual sense. There is an antenna which must be physi-
cally activated and then the device can request informa-
tion. A NiCad battery charged from two AAA batteries
common in the Palm series is used to power the radio.
Ian Goldberg had adapted portions of Eric Young’s
well-known SSLeay library (now OpenSSL [37]) for use
on the PalmPilot [19]. The resulting library was used
by Zerucha in building a Palm version of his reference
OpenPGP, and by Daswani and Boneh [11] in their pa-
per on electronic commerce.
We used Palm development tools based on the GNU C
compiler (gcc-2.7.2.2). Timings were done on a Palm V
running PalmOS 3.0. There are code segment and stack
restrictions which must be considered in the design of a
larger application, and our code had to be divided into
several libraries in order to accommodate the Palm.
2According to [39], “Even after two rounds of Microsoft’s best Win-
dows CE efforts, PalmPilot OS devices still represent 80% of all palm-
top sales.”
5 Elliptic Curve Cryptography
5.1 Introduction
Elliptic curve cryptography (ECC) was proposed inde-
pendently in 1985 by Neal Koblitz [27] and Victor Miller
[33]. For an introduction to ECC, the reader is referred
to Chapter 6 of Koblitz’s book [29], or the recent book
by Blake, Seroussi and Smart [7].
The primary reason for the attractiveness of ECC over
RSA and discrete log (DL3) public-key systems is that