attack is that the link key is transferred via HCI as plaintext,
and HCI data can easily be leaked via HCI dump or hardware
interface (e.g., USB) that typical users can easily access.
The ﬁrst mitigation is to ﬁlter out link keys from the HCI
dump log. The solution can be implemented by enabling the
HCI dump module to monitor HCI headers; if the monitored
HCI message includes a message related to link keys, the dump
module logs only HCI header, not its payload. For example,
in Fig. 3, the HCI packet of HCI Link Key Request Reply
command in RADIX is ‘01 0b 04 16 96 55 46 6d ...’, where the
ﬁrst byte (0x01) indicates that the packet is an HCI command,
and the next
three bytes (0x0b0416) are the HCI header
composed of operation code (0x0b04) and payload length
(0x016 = 22 bytes) as described in Section VI-B1. Thus, when
HCI dump meets an HCI packet that starts with 0x010b0416,
it may omit to record the payload into its dump log by logging
only the ﬁrst four bytes of the header or replace the link key
with a random value.
Another mitigation is to encrypt the payload of HCI packets
related to link keys. An attacker may extract HCI data from
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:17:30 UTC from IEEE Xplore.  Restrictions apply. 
236
UART physical line, or by snifﬁng USB data, which can break
the ﬁrst mitigation. If the HCI payload is encrypted, link keys
can be secured even if such physical attacks extract the HCI
data. However, encrypting the payload of HCI packets may
require major updates or revision of current speciﬁcations
to include such encryption and key exchange functionalities
between the host and the controller.
B. Page Blocking Attack
According to GAP, A should initiate the pairing and LMP
authentication if any subsequent connecting services request
security mechanisms such as authentication, authorization, and
encryption; otherwise, they can be skipped. For example, A
is allowed to connect to SDP service in M without LMP
authentication, because SDP service does not require the
enforcement of security mechanisms. For this reason, it is
difﬁcult to predict whether any pairing will occur during a
session in practice. Thus, the speciﬁcation allows either a
connection initiator (A) or a responder (M) to be a pairing
initiator in the middle of the session. By leveraging this,
the page blocking attack allows A to become a connection
initiator, and M to become a pairing initiator. From the
user’s point of view, it is indistinguishable between normal
pairing and pairing under a page blocking attack since they are
processed the same on the user interface. The other case where
A and M play the opposite roles can normally occur as well,
thus simply checking each role of the pairing initiator and the
connection initiator cannot correctly detect our page blocking
attack. Therefore, one effective mitigation strategy is to check
the roles of the pairing initiator and connection initiator and
to check whether the IO capability of the connection initiator
is NoInputNoOutput. If it is the case, we need to make sure
the victim drops the pairing or re-initiates the pairing again in
another safer mode.
VIII. RELATED WORK
Antonioli et al. [8] introduced an attack on key agree-
ment protocol of Bluetooth, called KNOB attack. It makes
victims agree on a key with one byte of entropy. In order
to implement the attack, the authors reversed a ﬁrmware of
BCM4339 Bluetooth chipset and installed their customized
attack operations in the controller. Antonioli et al. [7] also
introduced another attack called BIAS that exploits one-way
authentication vulnerability of Secure Simple Pairing, and per-
form downgrade attack on secure authentication procedure for
Secure Connection. BIAS attack also requires a modiﬁcation
of controller for the purpose of installing customized LMP
operations. For general users, such reversing and modiﬁca-
tion procedures of controllers would be impediments to the
achievement of the attacks in practice. Contrarily, our attacks
just require to implement attack operations above the controller
layer, therefore, our attacks are more practical attacks.
Seri et al. [5] introduced security vulnerability of Bluetooth
implementations, called BlueBorne, in diverse operating sys-
tems such as Android, iOS, and Windows. Its attack vectors
allow an attacker to silently create unauthenticated BR/EDR
connections and install malicious codes on the victim devices.
One precondition required for mounting BlueBorne attack is
to only activate Bluetooth in the victim device. Our link
key extraction attack also silently works against a victim
device, but manual access to the corresponding paired device
is required.
For MITM attacks, Sun et al. [6] introduced a vulnerability
that allows an MITM attack against the passkey entry SSP
association mode. Sharmila et al. [24], Hypponen et al. [2],
Haataja et al. [1] presented MITM attacks that downgrade
SSP to Just Works association mode. Melamed et al. [28]
introduced another MITM attack on Bluetooth connections
between a Mobile App and a Bluetooth Peripheral device.
Zhang et al. [29] demonstrated that MITM attacks are possible
due to the lack of detailed programming guideline for a Secure
Connections Only (SCO) mode in the speciﬁcation. In our
study, we focused on how to ensure the establishment of
MITM connections by the attacker, and subsequently execute
SSP downgrade attack, which the previous MITM attacks
simply assumed as a precondition for their attacks.
IX. CONCLUSION
In this paper, we present two novel attacks on the authen-
tication of Bluetooth BR/EDR, which are link key extraction
and page blocking attacks. The link extraction attack exploits a
vulnerability where link keys are logged into an HCI dump ﬁle
in plaintext and can be easily extracted in practice. Once a link
key is extracted, the attacker can continuously leverage it to
eavesdrop on Bluetooth communications protected by the link
key and establish other impersonated connections, breaking the
LMP authentication of bonded devices. Page blocking attack
aims to control the victim’s connection such that it is forced
to be established with the attacker’s device as his intention in
a deterministic manner, which is practically difﬁcult to control
due to the unpredictability of arbitrary session establishments
in practice. The page blocking attack exploits the laxity of
the speciﬁcation - the connection initiator does not have
to be a pairing initiator. That is, if a Bluetooth connection
is established by the attacker and the victim then triggers
a pairing procedure, the attacker can establish a malicious
connection and make it paired in Just Works association model
initiated by the victim, breaking SSP authentication of non-
bonded devices. Since our attacks are standard-compliant and
can be delivered above the controller layer without ﬁrmware
modiﬁcation, they can be deployed without much difﬁculty
in practice, demonstrating our attacks can pose real threats to
Bluetooth security.
ACKNOWLEDGMENT
This work was supported by IITP grant funded by the
MSIT, Korea (No.2019-0-00533,
IITP-2022-2020-0-01819,
IITP-2021-0-01810) and Basic Science Research Program
through the National Research Foundation funded by the Min-
istry of Education, Korea(NRF-2021R1A6A1A13044830).
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:17:30 UTC from IEEE Xplore.  Restrictions apply. 
237
[26] Microsoft, “Bluetooth Driver Stack,” https://docs.microsoft.com/en-us/
windows-hardware/drivers/bluetooth/bluetooth-driver-stack, Accessed:
2021-10-12.
[27] “BinaryToHex,” https://github.com/changsuck1/BinaryToHex, 2021.
[28] T. Melamed, “An Active Man-in-the-Middle Attack on Bluetooth Smart
Sevices,” Safety and Security Studies, vol. 15, p. 2018, 2018.
[29] Y. Zhang, J. Weng, R. Dey, Y. Jin, Z. Lin, and X. Fu, “Breaking
Secure Pairing of Bluetooth Low Energy using Downgrade Attacks,” in
Proceedings of the USENIX Security Symposium (USENIX SEC), 2020,
pp. 37–54.
REFERENCES
[1] K. Haataja and P. Toivanen, “Two Practical Man-in-the-Middle Attacks
on Bluetooth Secure Simple Pairing and Countermeasures,” IEEE Trans-
actions on Wireless communications, vol. 9, no. 1, pp. 384–392, 2010.
[2] K. Hypponen and K. M. Haataja, ““Nino” Man-in-the-Middle Attack
on Bluetooth Secure Simple Pairing,” in Proceedings of the IEEE/IFIP
International Conference in Central Asia on Internet, 2007, pp. 1–5.
[3] T. R. Mutchukota, S. K. Panigrahy, and S. K. Jena, “Man-in-the-Middle
Attack and its Countermeasure in Bluetooth Secure Simple Pairing,” in
Proceedings of the International Conference on Information Processing,
2011, pp. 367–376.
[4] K. Saravanan, L. Vijayanand, and R. Negesh, “A Novel Bluetooth Man-
in-the-Middle Attack based on SSP using OOB Association Model,”
arXiv preprint arXiv:1203.4649, 2012.
[5] B. Seri and G. Vishnepolsky, “BlueBorne™, The Dangers of Bluetooth
Implementations: Unveiling Zero Day Vulnerabilities and Security Flaws
in Modern Bluetooth Stacks,” ARMIS, 2017, https://www.armis.com/
blueborne/, Accessed: 2021-10-12.
[6] D.-Z. Sun, Y. Mu, and W. Susilo, “Man-in-the-Middle Attacks on Secure
Simple Pairing in Bluetooth Standard V5. 0 and its Countermeasure,”
Personal and Ubiquitous Computing, pp. 55–67, 2018.
[7] D. Antonioli, N. O. Tippenhauer, and K. Rasmussen, “BIAS: Bluetooth
Impersonation Attacks,” in Proceedings of the IEEE Symposium on
Security and Privacy (S&P), 2020, pp. 549–562.
[8] D. Antonioli, N. O. Tippenhauer, and K. B. Rasmussen, “The KNOB is
Broken: Exploiting Low Entropy in the Encryption Key Negotiation Of
Bluetooth BR/EDR,” in Proceedings of the USENIX Security Symposium
(USENIX SEC), 2019, pp. 1047–1061.
[9] G. Wassermann, “Bluetooth Implementations may not Sufﬁciently Val-
idate Elliptic Curve Parameters during Difﬁe-Hellman key Exchange,”
https://www.kb.cert.org/vuls/id/304725/, Accessed: 2021-10-12.
[10] E. Biham and L. Neumann, “Breaking the Bluetooth Pairing-Fixed
Coordinate Invalid Curve Attack,” 2018, http://www.cs.technion.ac.
il/∼biham/BT/bt-ﬁxed-coordinate-invalid-curve-attack.pdf, Accessed:
2021-10-12.
[11] BlueZ, “Linux Open Source for the Bluetooth Host Stack,” http://www.
bluez.org/about/, Accessed: 2021-10-12.
[12] AOSP, “Bluetooth Host Stack in Android Open Source Project,” https:
//source.android.com/devices/bluetooth, Accessed: 2021-10-12.
[13] B. SIG, “Bluetooth Core Speciﬁcation v5.3,” https://www.bluetooth.
com/speciﬁcations/specs/core-speciﬁcation/, Accessed: 2021-10-12.
[14] D. Hulton, “btpincrack,” 2006, http://openciphers.sourceforge.net/oc/
btpincrack.php, Accessed: 2021-10-12.
[15] Y. Shaked and A. Wool, “Cracking the Bluetooth Pin,” in Proceedings
of the International Conference on Mobile Systems, Applications, and
Services (MobiSys), 2005, pp. 39–50.
[16] H. Software, “Free USB Analyzer,” https://freeusbanalyzer.com/, Ac-
cessed: 2021-10-12.
[17] M. Cominelli, F. Gringoli, P. Patras, M. Lind, and G. Noubir, “Even
black cats cannot stay hidden in the dark: Full-band de-anonymization
of bluetooth classic devices,” pp. 534–548, 2020, 2020 IEEE Symposium
on Security and Privacy (SP).
[18] AOSP, “Android Bluetooth Verifying and Debugging,” https://source.
android.com/devices/bluetooth/verifying\ debugging, Accessed: 2021-
10-12.
[19] BlueZ, “HCI Data Dumper in the BlueZ Project,” http://www.bluez.org/
?s=hcidump, Accessed: 2021-10-12.
[20] N. W. Group, “Snoop Version 2 Packet Capture File Format,” https:
//datatracker.ietf.org/doc/html/rfc1761, Accessed: 2021-10-12.
[21] A. developers, “Conﬁgure On-Device Developer Options,” https:
//developer.android.com/studio/debug/dev-options, Accessed: 2021-10-
12.
[22] ——, “Capture and Read Android Bug Reports,” https://developer.
android.com/studio/debug/bug-report, Accessed: 2021-10-12.
[23] Frontline, “ComProbe USB 2.0 Protocol Analyzer - FTS4USB™,” https:
//fte.com/products/FTS4USB-HCI.aspx, Accessed: 2021-10-12.
[24] D. Sharmila, R. Neelaveni, and K. Kiruba, “Notice of Violation of IEEE
Publication Principles: Bluetooth Man-In-The-Middle Attack based on
Secure Simple Pairing using Out Of Band Association Model,” in Pro-
ceedings of the IEEE International Conference on Control, Automation,
Communication and Energy Conservation, 2009, pp. 1–6.
[25] AOSP, “Android Codenames, Tags, and Build Numbers,” https://source.
android.com/setup/start/build-numbers, Accessed: 2021-10-12.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:17:30 UTC from IEEE Xplore.  Restrictions apply. 
238