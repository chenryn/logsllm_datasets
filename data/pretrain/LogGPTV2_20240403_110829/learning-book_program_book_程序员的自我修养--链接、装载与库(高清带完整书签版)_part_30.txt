fexf
data
.drectve
debugSS
other sections
Symbof Table
图5-2PE文件格式
算展开介绍这种格式），与Windows下的PE格式完全不同，虽然它们使用相网的扩展名。
在Windows发展的早期，那时候DOS 系统还如日中天，而且早期的 Windows版本还不能
脱离DOS环境独立运行，所以为了照顾DOS系统，那些为Windows编写的程序必须尽量
兼容原有的DOS系统，所以PE文件在设计之初就背负着历史的累赞.PE文件中*ImageDOS
从某个角度看，PE文件其实也是一个“MZ”文件。“IMAGE_DOS_HEADER”的结构中有
和“e_ip”两个成员指向程序的入口地址。
当PE可执行映像在DOS下被加残的时候，DOS系统检测该文件，发现最开始两个字节
是“MZ”，于是认为它是一个"MZ”可执行文件。然后DOS系统就将PE文件当作正常的"MZ”
址，然而PE文件中，“e_cs”和“e_ip”这两个成员并不指向程序真正的入口地址，面是指向
一作用是向终端输出一行字：“This program cannot be nunin DOS"，然后退出程序，表示该程
序不能在DOS下运行。所以我们如果在DOS系统下运行 Windows的程序就可以看到上面这
句话，这是因为PE文件结构兼容DOS“MZ”可执行文件结构的缘故。
程序员的自我修养—链接、装载与库
---
## Page 167
144
第5章WindowsPE/COFF
“IMAGE_DOS_HEADER”结构也被定义在WinNTh里面，该结构的大多数成员我们
都不关心，唯一值得关心的是“e_lfanew”成员，这个成员表明了PE文件头
（IMAGE_NT_HEADERS）在PE文件中的偏移，我们须要使用这个值来定位PE文件头。
这个成员在DOS的“MZ”文件格式中它的值水远为0，所以当Windows开始执行一个后缓
是一个DOS“MZ”可执行文件，Windows会启动DOS子系统来执行它：如果不为0，那么
在文件中的偏移。
“IMAGE_NT_HEADERS”是PE真正的文件头，它包含了一个标记（Signature）和
两个结构体，标记是一个常量，对于一个合法的PE文件来说，它的值为0x00004550，按照
小端字节序，它对应的是'P、E'、“0、“0这4个字符的ASCI码，文件头包含的两个结
构分别是映像头（Image Header）、PE扩展头部结构（Image Optional Header）.这个结
构定义如下：
typedef struct _IMAGE_Nr_HEADERS (
DWORD Signature1
IMAGE_PILE_HEADER F11eHeader ;
) IMAGE_NT_HEADERS, *PIMAGE_NT_HEADERS;
IMAGE_OPTIONAL_HEADER Opt ionalHeader ;
了。这里新出现的是PE扩展头部结构，这个结构的字面意思是“可选”（Optional），也就
是说不是必须的，但实际上对于PE可执行文件（包括DLL）来说，它是必需的。这里的可
选可能是相对于COFF目标文件来说的，该结构里面包含了很多重要的信息，同样，我们可
以在“WinNT.h”里面找到该结构的定义：
typedef struct _IMAGE_OPTIONAL_HEADER (
// Standard fields.
/7
WORD
//
Magic;
MinorLinkerVersion;
MajorLinkerVersion;
3LAB
DWORD
DWORD
SizeOfCode;
SizeOfUninitializedData;
SizeofInitializedData;
DWORD
DWORD
DWORD
AddressOfEntryPoint ;
DWORD
BaseOfCode ;
BaseOfData;
// Nr additional fields.
/ /
/ /
DWORD
DWORD
SectionA1ignment ;
InageBase;
DWORD
PileAlignment;
程序员的自我修养—链接、装载与库
---
## Page 168
5.6 Windows 下的 ELF———PE
145
WORD
MajorOperatingSystemVersion;
WORD
MinorOperat ingSystemVersion;
WORD
MajorImageVersion;
WORD
Minor ImageVersion;
WORD
MajorSubsystemVersion;
WORD
DWORD
Win32VersionValue;
MinorSubsystemVersion;
DWORD
DWORD
SizeOfInage;
DWORD
CheckSun;
SizeOfHeaders;
WORD
WORD
D11characteristics;
Subsystem,
DWORD
DWORD
SizeOfStackReserve;
SizeOfHeapReserve;
SizeOfStackCommit:
DWORD
DWORD
SizeOfHeapCommit;
DWORD
DWORD
NumberOfRvaAndSizes;
LoaderFlags;
1IMAGE_OPTIONAL_HEADER32,*PINAGE_OPTIONAL_HEADER32:
IMAGE_DATA_DIRECTORY DataDi reCtory [IMAGE_NUMBEROF_DIRECTORY_ENTRIES] :
HEADER32"。因为64位的Windows也采用PE结构，所以也就有了64位的PE可执行文
件格式。为了区别这两种格式，Windows中把32位的PE文件格式叫做PE32，把64位的
PE文件格式叫做PE32+，这两种格式就像ELF32和ELF64一样，都大同小异，只不过关于
地址和长度的一些成员从32位扩展成了64位，还增加了若干个额外的成员之外，没有其他
OPTIONAL_HEADER64*,
定义。它是一个宏，在64位的Windows下，VisualC++在编译时会定义“_WIN64”这个宏，
32位Windows下没有定义"_WIN64"这个宏，那么它就是IMAGE_OPTIONAL_HEADER32。
跟ELF文件中一样，我们这里只介绍32位版本的格式，64位的格式与32位区别不大。
“OptionalHeader”里面有很多成员，有些部分跟PE文件的装载与运行相关，我们不
打算先在这里一一列举所有成员的具体含义，只是挑选一部分跟静态链接有关的加以介绍，
其他的成员在本书的其他部分会再次回顾。这些成员很多都是跟Windows系统相关联的，
很多关于Windows系统的编程书籍上也都会有介绍，也可以在Microsof 的MSDN上找到
关于它们的信息。
5.6.1PE数据目录
在Windows系统装载PE可执行文件时，往往须要很快地找到一些装载所须要的数据结
构，比如导入表、导出表、资源、重定位表等。这些常用的数据的位置和长度都被保存在了
程序员的自我修养——链接、装载与库
---
## Page 169
146
第5 章Windows PE/COFF
一个叫数据目录（DataDirectory）的结构里面，其实它就是前面“IMAGE_OPTIONAL
HEADER“结构里面的"DataDirectory*成员。这个成员是一个“IMAGE_DATA_DIRECTORY”
的结构数组，相关的定义如下：
typedef struct _IMAGE_DATA_DIRECTORY (
DWORD
1IMAGE_DATA_DIRECTORY,*PIMAGE_DATA_DIRECTORY;
DWORDSize;
define IMAGB_NUMBEROF_DIRECTORY_ENTRIES
16
可以看到这个数组的大小为16，IMAGE_DATA_DIRECTORY结构有两个成员，分别是
虚拟地址以及长度。DataDirectory数组里面每一个元素都对应一个包含一定含义的表。
15，它们实际上就是相关的表的宏定文在数组中的下标，比如
“IMAGE_DIRECTORY_ENTRY_EXPORT”被定义为0，所以这个数组的第一个元素所包
含的地址和长度就是导出表（ExportTable）所在的地址和长度。
这个数组中还包含其他的表，比如导入表、资源表、异常表、重定位表、调试信息表、
线程私有存储（TLS）等的地址和长度。这些表多数跟装载和DLL动态链接有关，与静态
链接没什么关系，所以我们在此不展开分析。在本书的第3部分我们会经常碰到这些表，在
这里我们只要通过解析DataDirectory结构了解这些表的位置和长度就可以了。
5.7本章小结
在这一章中，我们介绍了Windows下的可执行文件和目标文件格式PE/COFF.PE/COFF
文件与ELF文件非常相似，它们都是基于段的结构的二进制文件格式。Windows下最常见
的目标文件格式就是COFF文件格式，微软的编译器产生的目标文件都是这种格式。COFF
文件有一个很有意思的段叫”drectve段”，这个段中保存的是编译器传递给链接器的命令行
参数，可以通过这个段实现指定运行库等功能。
Windows下的可执行文件、动态链接库等都使用PE文件格式，PE文件格式是COFF
文件格式的改进板本，增加了PE文件头、数据目录等一些结构，使得能够满足程序执行时
的需求。
程序员的自我修养一链接、装载与库
---
## Page 170
第3部分
程序员的白我修养】
装载与动态链接
---
## Page 172
可执行文件的装载与进程
6.1进程虚拟地址空间
6.2装载的方式
6.3从操作系统角度看可执行文件的装载
6.4进程虚存空间分布
6.5Linux内核装载ELF过程简介
6.6WindowsPE的装载
6.7本章小结
程序员的自我修养—链接、装载与库
---
## Page 173
150
第6章可执行文件的装载与进程
可执行文件只有装载到内存以后才能被CPU执行。早期的程序装载十分简随，装载的
基本过程就是把程序从外部存储器中读取到内存中的某个位置。随着硬件MMU的诞生，多
进程、多用户、虚拟存储的操作系统出现以后，可执行文件的装载过程变得非常复杂。
通过这一章，我们希望能通过介绍ELF文件在Linux下的装载过程，来层层拨开迷雾，
看看可执行文件装载的本质到底是什么。首先会介绍什么是进程的虚拟地址空间？为什么进
程要有白已独立的虚拟地址空间？然后我们将从历史的角度来看装载的几种方式，包括覆盖
装载、页映射。接着还会介绍进程虚拟地址空间的分布情况，比如代码段、数据段、BSS
段、堆、栈分别在进程地址空间中怎么分布，它们的位置和长度如何决定。
6.1
进程虚拟地址空间
我们在第1章已经回顾了关于虚拟地址空间和地址映射的一些基本概念。基于这些现代
的计算机硬件体系结构和操作系统的概念，我们将逐步结合现实的系统，来分析这些概念是
如何在实际中被应用的，并且影响到我们构建程序的方方面面。
程序和进程有什么区别
程序（或者狭义上讲可执行文件）是一个静态的概念，它就是一些预先编译好的指令
和数据集合的一个文件：进程则是一个动态的概念，它是程序运行时的一个过程，很
多时候把动态库叫做运行时（Runtime）也有一定的含义。有人做过一个很有意思的
比喻，说把程序和进程的概念跟做菜相比较的话，那么程序就是菜诺，计算机的CPU
就是人，相关的厨具则是计算机的其他硬件，整个炒菜的过程就是一个进程。计算机
按照程序的指示把输入数据加工成输出数据，就好像菜谱指导着人把原料做成美味可
口的菜肴。从这个比喻中我们还可以扩大到更大范围，比如一个程序能在两个CPU上
执行等。
我们知道每个程序被运行起来以后，它将拥有自己独立的虚拟地址空间（Virtual Address
Space），这个虚拟地址空间的大小由计算机的硬件平台决定，其体地说是由CPU的位数决定
的。硬件决定了地址空间的最大理论上限，即硬件的寻址空间大小，比如32位的硬件平台决
定了虚拟地址空间的地址为0到2”-1，即0x00000000~0xFFFFFFFF，也就是我们常说的
4GB虚拟空间大小：而64位的硬件平台具有64位寻址能力，它的虚拟地址空间达到了2
字节，即0x0000000000000000~0xFFFFFFFFFFFFFFFF，总共17179 869 184GB，这个寻址
能力从现在来看，几乎是无限的，但是历史总是会嘲弄人，或许有一天我们会觉得64位的地
址空间很小，就像我们现在觉得32位地址不够用一样，当人们第一次推出32位处理器的时
候，很多人都在疑感4GB这么大的地址空间有什么用。
其实从程序的角度看，我们可以通过判断C语言程序中的指针所占的空间来计算虚拟
程序员的自我修养一键接、装载与库
---
## Page 174
6.1进程虚拟地址空间
151
地址空间的大小。一般来说，C语言指针大小的位数与虚拟空间的位数相同，如32位平台
下的指针为32位，即4字节；64位平台下的指针为64位，即8字节。当然有些特殊情况
F，这种规则不成立，比如早期的MSC的C语言分长指针、短指针和近指针，这是为了适
应当时畸形处理器而设立的，现在基本可以不予考虑。
我们在下文中以32位的地址空间为主，64位的与32位类似。
那么32位平台下的4GB虚拟空间，我们的程序是否可以任意使用呢？很遗撼，不行。
因为程序在运行的时候处于操作系统的监管下，操作系统为了达到监控程序运行等一系列目
的，进程的虚拟空间都在操作系统的掌握之中。进程只能使用那些操作系统分配给进程的地
址，如果访问未经允许的空间，那么操作系统就会捕获到这些访问，将进程的这种访问当作
非法操作，强制结束进程。我们经常在Windows下碰到令人讨厌的“进程因非法操作需要
关闭”或Linux下的“Segmentation fault”很多时候是因为进程访问了未经允许的地址。
那么到底这4GB的进程虚拟地址空间是怎样的分配状态呢？首先以Linux操作系统作
为例子，默认情况下，Linux操作系统将进程的虚拟地址空间做了如图6-1所示的分配。
Operating