### Â©2016 Check Point Software Technologies Ltd.

# PHP7 Memory Internals for Security Researchers

**Speaker:** Yannay Livneh, Security Researcher at Check Point

## Teaching the New Dog Old Tricks

### About Me
- **Name:** Yannay Livneh
- **Role:** Security Researcher at CheckPoint
- **Areas of Expertise:**
  - Networks
  - Embedded Systems
  - Linux
  - Memory Corruptions
  - Other related fields

---

## Agenda
1. Introduction
2. PHP Unserialize
3. ZVAL System
4. Unserialize + ZVAL => Bugs
5. Allocator
6. Bugs + Allocator => Exploit
7. Q.E.D.

---

## (THIS WORLD WE LIVE IN)

### PHP: An Interesting Language
- **Widely Used:** PHP is one of the most widely used server-side scripting languages.
- **Servers Rule the World:** Many web servers run on PHP, making it a critical component of the internet.
- **PHP-7: The Future:** Released in December 2015, PHP-7 introduced significant changes, including a new ZVAL system and memory allocation mechanism.

### PHP Security
- **Vulnerabilities Abound:**
  - SQL Injection
  - Cross-Site Scripting (XSS)
  - Memory Corruption
    - Native functions
    - User input
- **Unserialize Function:** A common source of vulnerabilities.

### Unserialize: A History of Insecurity
- **Numerous CVEs:** Countless security vulnerabilities have been reported.
- **Object Injection (PoP):** Allows attackers to inject objects into the application.
- **Memory Corruptions:** Can lead to arbitrary code execution.
- **Generic Exploitation Techniques:** Developed by researchers like @i0n1c.

### Examples in the Wild
- [Insert examples of real-world exploits]

---

## PHP-7: New Features and Challenges
- **Released in December 2015:**
  - **New ZVAL System:** Improved memory management.
  - **New Memory Allocation Mechanism:** Enhanced performance and security.
  - **Impact on Exploitation:** Previous exploitation techniques are now largely irrelevant.

### Unserialize in PHP-7
- **Current Vulnerabilities:**
  - Some CVEs still exist.
  - Object Injection (PoP) remains a concern.
  - Memory corruptions continue to be an issue.
  - No known remote exploits as of yet.

---

## (WHAT WE EXPLOIT)

### Unserialize
- **Serialize/Unserialize Functions:**
  - **Serialization Example:**
    ```php
    $val = array(
        NULL,
        1337,
        'apple',
        array(
            'a' => 1,
            new stdClass(),
            7331
        )
    );
    echo serialize($val);
    ```
    **Output:**
    ```php
    a:4:{i:0;N;i:1;i:1337;i:2;s:5:"apple";i:3;a:3:{s:1:"a";i:1;i:0;O:8:"stdClass":0:{}i:1;i:7331;}}
    ```

- **Unserialization Process:**
  - **Example:**
    ```php
    unserialize('a:4:{i:0;N;i:1;i:1337;i:2;s:5:"apple";i:3;a:3:{s:1:"a";i:1;i:0;O:8:"stdClass":0:{}i:1;R:3;}}');
    ```
  - **Result:**
    ```php
    array(4) {
      [0] =>
      NULL
      [1] =>
      int(1337)
      [2] =>
      string(5) "apple"
      [3] =>
      array(3) {
        ["a"] =>
        int(1)
        [0] =>
        object(stdClass)#1 (0) {
        }
        [1] =>
        &int(7331)
      }
    }
    ```

### Key Takeaways from Unserialize
- **Complex Format:** The serialized format is intricate and can be manipulated.
- **User-Controlled Allocation:** Attackers can influence how data is allocated in memory.
- **Global References:** Serialization can create references to global variables.
- **Value Reuse:** Serialized data can reuse values, leading to potential vulnerabilities.

---

## (HOW VALUES ARE STORED)

### Zvals
- **Purpose:** Zvals hold PHP variables.
- **Example:**
  ```php
  $x = 1;
  ```
- **Features:**
  - **Garbage Collection:** Automatic memory management.
  - **References:** 
    ```php
    $y = &$x;
    ```

---

This document provides a comprehensive overview of PHP7's memory internals, focusing on the unserialize function and the ZVAL system, and their implications for security researchers.