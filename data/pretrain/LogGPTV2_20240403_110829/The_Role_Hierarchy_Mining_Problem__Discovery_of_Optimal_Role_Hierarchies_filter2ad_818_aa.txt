title:The Role Hierarchy Mining Problem: Discovery of Optimal Role Hierarchies
author:Qi Guo and
Jaideep Vaidya and
Vijayalakshmi Atluri
2008 Annual Computer Security Applications Conference
2008 Annual Computer Security Applications Conference
The Role Hierarchy Mining Problem: Discovery of Optimal Role
Hierarchies
Qi Guo
Jaideep Vaidya
Vijayalakshmi Atluri
∗
Rutgers University
180 University Ave, Newark, NJ 07102
{qiguo,jsvaidya,atluri}@cimic.rutgers.edu
Abstract
Role hierarchies are fundamental to the role based
access control (RBAC) model. The notion of role hierar-
chy is a well understood concept that allows senior roles
to inherit the permissions of the corresponding junior
roles. Role hierarchies further ease the burden of secu-
rity administration, as there is no need to explicitly spec-
ify and maintain a large number of permissions. Given
a set of roles or user permissions, one may construct a
number of alternative hierarchies. However, there does
not exist the notion of an optimal role hierarchy. Opti-
mality helps in maximizing the beneﬁt of employing the
role hierarchy.
In this paper, we propose such a for-
mal metric. Our optimality notion is based on the small-
est graph representation of the role hierarchy (minimal
in the number of edges) having the same transitive clo-
sure as any alternate representation. We show why this
makes sense as well as ways to achieve this. The main
contributions of this paper are to formalize the notion
of optimality for role hierarchy construction, along with
proposing heuristic solutions to achieve this objective,
thus making role hierarchies feasible and practical.
1 Introduction
The concept of a “role” being a commonly under-
stood notion, it has become easy for organizations to
readily adopt Role-based access control (RBAC) as their
access control paradigm. As a result of its widespread
adoption, it has been widely deployed in most commer-
cial software including operating systems, database sys-
tems, enterprise resource planning systems and work-
ﬂow systems, among others. Under RBAC, roles repre-
sent organizational agents that perform certain job func-
tions. Users, in turn, are assigned appropriate roles
∗
Portions of this work were supported by the National Science
Foundation under awards CNS-0746943 and IIS-0306838
based on their responsibilities and qualiﬁcations [11, 5].
As a result, RBAC simpliﬁes security administration as
the security conﬁguration need not be changed when
users leave or join the organization. A role, can be
viewed as a set of permissions.
To deploy RBAC, an organization must ﬁrst identify
a complete and correct set of roles, and assign appro-
priate users and permissions to these roles, a process
known as role engineering [3]. Several approaches have
been recently proposed to identify a good set of roles
[9, 12, 17, 4, 2, 13, 15]. One main limitation of these
approaches is while they discover a set of roles based
on a certain optimality notion in mind, they do not dis-
cover hierarchical relationships among the roles. Role
hierarchy is one of the fundamental criterion recognized
by the proposed NIST standard for RBAC [5]. Simi-
lar to the notion of roles, a role hierarchy is a well un-
derstood common knowledge, where senior roles inherit
the permissions of their junior roles. There exist these
natural hierarchical relationships among roles, whether
they are administrative or functional. The beneﬁt of re-
alizing role hierarchies is that there is no need to ex-
plicitly deﬁne permissions of junior roles as those of
the senior roles. So this further simpliﬁes security ad-
ministration and maintenance. The process of role en-
gineering without discovering the hierarchical relation-
ships among roles would be incomplete.
Given a set of roles, one may construct a number of
alternative hierarchies. However, how does one know
which one among them is the best? Currently, there does
not exist a formal notion for a “good” or “optimal” role
hierarchy. In deed, the notion of role hierarchy is not
even taken into consideration when discovering roles.
Thus, one may easily come up with an unoptimal set
of roles and role hierarchy. The main objective of this
paper is to essentially tackle this problem and propose
a formal metric to measure how good a discovered role
1063-9527/08 $25.00 © 2008 IEEE
1063-9527/08 $25.00 © 2008 IEEE
DOI 10.1109/ACSAC.2008.38
DOI 10.1109/ACSAC.2008.38
237
237
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:56:35 UTC from IEEE Xplore.  Restrictions apply. 
hierarchy is. Before one attempts to come up with such
a metric, we have to ask the fundamental question of
what should be the criterion for devising a good met-
ric. Since role hierarchies further ease the problem of
security administration, a good role hierarchy should be
aimed at maximizing the beneﬁt of having a hierarchy.
Our role hierarchy optimality criterion has been deﬁned
to reﬂect this purpose. Speciﬁcally, we assume that a
role hierarchy can be represented as a graph with roles
as its nodes and relationships among them as its edges.
Since the transitive closure of a graph makes all of link
information in the graph explicit, we can view the tran-
sitive closure as the total link information of the graph.
Thus, we can deﬁne a set of role hierarchies to be equiva-
lent if the transitive closure of each hierarchy is the same
(i.e., each hierarchy carries the same information). Now,
given a set of equivalent role hierarchies, we say that a
role hierarchy is said to be “optimal” if it contains the
minimum number of edges when compared to the other
role hierarchies in the set. This notion is well deﬁned
in graph theory as the “transitive reduction” [1]. Do-
ing so also allows us to use other known properties of
this. Thus, in effect, we could deﬁne the optimal role
hierarchy to be the transitive reduction [1] of any of the
hierarchies in the set.
In this paper, we deﬁne two different optimality ob-
jectives contingent on the status quo of the role mining
process, and present two algorithms to mine role hierar-
chies (one based on each objective). The rest of the pa-
per is organized as follows: Section 2 introduces some
preliminaries used in the sections that follow. Section
3 formally deﬁnes the Role Hierarchy Mining Problem
and its two variants, RHBP and MinPert RHMP. In sec-
tion 4, we present algorithms for RH-Builder to address
RHBP and RH-Miner for RHMP, and provide an anal-
ysis of these algorithms. Section 5 presents the related
work. Finally, Section 6 concludes the paper and dis-
cusses future work.
2 Preliminaries
In this section, we review the RBAC model. We
adopt the NIST standard of the Role Based Access Con-
trol (RBAC) model [5]. We also formally deﬁne the no-
tion of role hierarchy.
2.1 RBAC Model
For the sake of simplicity, we do not consider ses-
sions, or separation of duties constraints in this paper.
In other words, we restrict ourselves to RBAC0 and
RBAC1 without considering sessions.
Deﬁnition 1. [RBAC]
(cid:2)
obj ∈ OBJ}
OP S
user-to-role assignments.
roles, operations, and objects.
ping of role-to-permission assignments.
• U, ROLES, OP S, and OBJ are the set of users,
• U A ⊆ U × ROLES, a many-to-many mapping of
• PRMS (the set of permissions) ⊆ {(op, obj)|op ∈
• P A ⊆ ROLES × P RM S, a many-to-many map-
• U P A ⊆ U × P RM S, a many-to-many mapping
• assigned users(R) = {u ∈ U|(u, R) ∈ U A},
the mapping of role R onto a set of users.
• assigned permissions(R)
∈
{p
P RM S|(p, R) ∈ P A},
the mapping of role
R onto a set of permissions.
• RH ⊆ ROLES × ROLES is a partial order on
of user-to-permission assignments.
=
ROLES called inheritance relation.
2.2 Role Hierarchy
Even though the basic concept of role hierarchy is
quite standard, the structural speciﬁcs of building a hi-
erarchy are not clearly deﬁned. For the purpose of our
paper, we now formally provide the additional require-
ments needed by our approach. Note that we use the
symbols (cid:4),(cid:4)(cid:4) and (cid:5) to denote direct inheritance, indi-
rect inheritance and both, respectively, in the remainder
of the paper.
Deﬁnition 2. [Role Hierarchy (RH)] A Role Hierarchy
(RH) is a directed acyclic graph (V, E) where each ver-
tex v ∈ V represents a role r ∈ ROLES and each
edge e ∈ E represents a direct relation between the two
incident roles. A RH needs to meet the following re-
quirements:
1. ∀ ri, rj ∈ ROLES, ri (cid:5) rj, only if
and
permissions(ri) ⊇ permissions(rj),
users(ri) ⊆ users(rj).
2. ∀ r ∈ ROLES, permissions(r) (cid:8)= ∅
3. ∃ r ∈ ROLES such that ∀ r
(cid:2) ∈ ROLES − {r},
(cid:2)
r (cid:5) r
In the above deﬁnition, permissions(r) consists of
permissions that are explicitly assigned to it and those
that are inherited from its descendants, and users(r)
comprises of the assigned users(r) as well as all the
users that are eligible to play a descendent role (as
a result of inheriting the permissions). Besides the
role ID r, each vertex v also contains users(r) and
permissions(r). For the sake of simplicity, from this
238238
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:56:35 UTC from IEEE Xplore.  Restrictions apply. 
point on, we use the role ID and its corresponding ver-
tex interchangeably in the context of the role hierarchy.
Each edge e indicates the direct relation between two
incident roles, e is denoted as a pair (ri, rj) ∈ E iff
ri (cid:4) rj.
Requirement 1 states the permission and user con-
tainment relationships required between two roles with
inheritance relations.
In a role hierarchy, permissions
are inherited bottom-up as opposed to the top-down in-
heritance fashion for users. For example, if ri (cid:5) rj,
permissions authorized to rj will also be authorized to
ri. On the contrary, users assigned to ri will also be
eligible to perform the tasks of users assigned to rj. Re-
quirement 2 indicates that an empty role cannot belong
to a hierarchy. This is to prevent the creation of dummy
roles. A dummy role without any permissions can have
no practical signiﬁcance and therefore should obviously
be disallowed. Finally, requirement 3 states that each
role needs to be connected to at least one other role in the
graph. Isolated roles cannot exist in the hierarchy. This
requirement allows the existence of one and only one
super role which has all of the permissions. This role
prevents any role from being disconnected from the hier-
archy. It might create some dummy links between itself
and others which would be isolated otherwise without
the existence of the super role. We restrict the number
of such roles to one to keep the maintenance overhead
to a minimum.
Here, we also deﬁne another ﬂavor of role hierarchy
which we call complete role hierarchy.
Deﬁnition 3. [Complete Role Hierarchy(CRH)] Com-
plete Role Hierarchy(CRH) is a special role hierarchy
satisfying the following observation:
• ∀ ri, rj ∈ ROLES, if ri (cid:5) rj, then either {
∃ R ⊆ ROLES | R = {r1,r2, . . . rx } (cid:8)= ∅, {
(ri,r1),(r1,r2),. . ., (rx−1,rx),(rx,rj) } ⊆ E } or
(ri,rj) ∈ E or both.
The observation above essentially means that all in-
heritance relations between any pair of roles need to be
captured in the role hierarchy, either directly or indi-
rectly or both. Complete RH is of signiﬁcance when
role hierarchies are actually constructed.
We also need to introduce the concept of transitive
closure which will be used in the following sections.
Deﬁnition 4. [Transitive Closure] Consider a directed
graph G = (V, E), where V is the set of vertices and E
is the set of edges. The transitive closure of G is a graph
G+ = (V, E+) such that for all v, w in V there is an
edge (v, w) in E+ if and only if there is a non-null path
from v to w in G.
3 The Role Hierarchy Mining Problem
In this section, we formally deﬁne the basic Role Hi-
erarchy Mining Problem(RHMP) and its two variants
Role Hierarchy Building Problem (RHBP) and Minimal
Perturbation Role Hierarchy Mining Problem (MinPert
RHMP).
Deﬁnition 5. [The Role Hierarchy Building Problem
(RHBP)] Given a set of users U , a set of permissions
P RM S, a user-permission assignment U P A, a set of
roles ROLES, a user-to-role assignment U A, and a
role-to-permission assignment P A, build a complete
role hierarchy, G(V, E), such that |E| is minimal.
RHBP asks us to build a hierarchy out of the exist-
ing role set, such that the number of direct relations is
minimized. Potentially the possible number of complete
role hierarchies built from a given set of roles could be
substantial. These hierarchies could all be correct since
they are complete, and therefore, have the same tran-
sitive closure. Yet, some are superior to others, from
the perspective of role administrators due to the fact that
they have less number of edges/direct relations in the hi-
erarchy than others. A smaller number of edges implies
less maintenance workload for the administrators, thus
making them more favorable.
Example 1. Figure 1 shows an example where given a
set of deployed roles r1 = {p1, p2, p3, p4}, r2 = {p1},
r3 = {p1, p2}, r4 = {p1, p3}, r5 = {p1, p3, p4}, there
could exist multiple role hierarchies which are complete.
Figure 1.(a) and (b) are two of the complete hierarchies
built from this role set. They have the same transitive
closure, but Figure 1.(a) is superior to Figure 1.(b) since
it has less number of edges. Actually Figure 1.(a) is the
optimal solution for this deployed role set.
In the prior problem, we are simply required to build
a hierarchy out of the existing roles without changing
any of them. In general, it may be acceptable to change
the given roles somewhat in order to build a better hi-
erarchy. Therefore, we next deﬁne the minimal per-
turbation role hierarchy problem. However, before do-
ing so, since this problem involves creating a new set
of roles, it must be ensured that the set of roles cre-
ated correctly describes the original user-permission as-
signments. Vaidya et al.[13] deﬁne the notion of δ-
consistency to measure differences introduced by role
sets. The basic idea is to count the difference be-
tween the number of original user-permission assign-
ments and the number of user-permission assignments
induced by the discovered user-role and role-permission
assignments. As long as the difference is within δ, the
239239
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:56:35 UTC from IEEE Xplore.  Restrictions apply. 
r1
p1,p2,p3,p4
r1
p1,p2,p3,p4
r3
p1,p2
r2 
p1 
(a)
r5
p1,p3,p4
r4
p1,p3
r3
p1,p2
r5
p1,p3,p4
r4
p1,p3
r2 
p1 
(b)
Figure 1. An example of a set of complete role hierarchies from a given role set
discovered roles, user-role and role-permission assign-
ments are considered to be δ consistent with the original
U P A. However, this does not take role hierarchies into
consideration at all. We now extend this to incorporate
role hierarchy as well. The key is to recognize the con-
tribution of inherited permissions.
Deﬁnition 6.
[δ-Consistency] A given user-to-