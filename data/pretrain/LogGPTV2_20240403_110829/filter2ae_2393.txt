原文：  
译者：hello1900@知道创宇404实验室
本文介绍如何利用Linux内核漏洞CVE-2017-5123提升权限，突破SEMP、SMAP、Chrome沙箱全方位保护。
#### 背景
在系统调用处理阶段，内核需要具备读取和写入触发系统调用进程内存的能力。为此，内核设有`copy_from_user`与`put_user`等特殊函数，用于将数据复制进出用户区。在较高级别，`put_user`的功能大致如下：
    put_user(x, void __user *ptr)
        if (access_ok(VERIFY_WRITE, ptr, sizeof(*ptr)))
            return -EFAULT
        user_access_begin()
        *ptr = x
        user_access_end()
`access_ok()`
调用检查ptr是否位于用户区而非内核内存。如果检查通过，`user_access_begin()`调用禁用SMAP，允许内核访问用户区。内核写入内存后重新启用[SMAP](https://en.wikipedia.org/wiki/Supervisor_Mode_Access_Prevention
"SMAP")。需要注意的一点是：这些用户访问函数在内存读写过程中处理页面错误，在访问未映射内存时不会导致崩溃。
#### 漏洞
某些系统调用要求多次调用`put/get_user`以实现内核与用户区之间的数据复制。为避免重复检查和SMAP启用/禁用的额外开销，内核开发人员将缺少必要检查的不安全版本`_put_user`与`unsafe_put_user`涵盖进来。这样一来，忘记额外检查就在意料之中了。CVE-2017-5123就是一个很好的例子。在内核版本4.13中，为了能够正常使用`unsafe_put_user`，专门对`waitid`
syscall进行了更新，但`access_ok`检查仍处于缺失状态。漏洞代码如下所示。
    SYSCALL_DEFINE5(waitid, int, which, pid_t, upid, struct siginfo __user *,
                                      infop, int, options, struct rusage __user *, ru)
    {
        struct rusage r;
        struct waitid_info info = {.status = 0};
        long err = kernel_waitid(which, upid, &info, options, ru ? &r : NULL);
        int signo = 0;
        if (err > 0) {
            signo = SIGCHLD;
            err = 0;
            if (ru && copy_to_user(ru, &r, sizeof(struct rusage)))
                return -EFAULT;
            }
            if (!infop)
                return err;
            user_access_begin();
            unsafe_put_user(signo, &infop->si_signo, Efault);    si_errno, Efault);
            unsafe_put_user(info.cause, &infop->si_code, Efault);
            unsafe_put_user(info.pid, &infop->si_pid, Efault);
            unsafe_put_user(info.uid, &infop->si_uid, Efault);
            unsafe_put_user(info.status, &infop->si_status, Efault);
            user_access_end();
            return err;
    Efault:
            user_access_end();
            return -EFAULT;
    }
#### 原语
缺少`access_ok`检查意味着允许提供内核地址并将其作为waitid
syscall的`infop`参数。syscall将使用`unsafe_put_user`覆盖内核地址，因为此项操作可以逃避检查。该原语的棘手部分在于无法对写入内容（6个不同字段中的任何1个）施与足够控制。`info.status`
是32位int，但被限制为0 
最后，感谢Chrome/Chromium安全团队对我的漏洞报告给予快速响应！
* * *