no longer met. Importantly, even if a party sets a corruption flag
due to broken assumptions it still follows the protocol honestly. Set-
ting a corruption flag allows a simulator to tell Fledger that a party
is corrupted, and hence, Fledger no longer has to provide security
guarantees for parties that rely on broken assumptions.3
This interpretation of corruption, which is a novel concept in
the field of universally composable security for blockchains and
distributed ledgers, avoids having to encode specific security as-
sumptions into Fledger (and more generally ideal functionalities
for blockchains and distributed ledgers), and hence, makes such
functions applicable to a wider range of security assumptions and
corruption settings: the corruption status of a party is sufficient to
determine whether Fledger must provide security guarantees for
that party. It is not necessary to include any additional security
assumptions of an intended realization in Fledger explicitly (e.g., by
providing consistency only as long as there is an honest majority
of parties) or to add a wrapper on top of Fledger that forces the
environment to adhere to the security assumptions. Such security
assumptions can rather be specified by and stay at the level of
the realization, which in turn reduces the complexity of the ideal
functionality while enabling a wide variety of realizations based
on potentially vastly different security assumptions. We use this
more general concept of corruption in our case study of Corda
(cf. Section 4.2), where a client considers itself to be corrupted not
only if she is under the direct control of the adversary but also if
she relies on a corrupted notary. This models that Corda assumes
(and indeed requires) notaries to be honest in order to provide se-
curity guarantees. Importantly, this is possible without explicitly
incorporating notaries and their corruption status in Fledger. In fact,
following the above rationale, Fledger still only has to take care of
the corruption status of clients.
Further features. Fledger also provides and supports many
other features, including dynamic registration of clients, different
client (sub-)roles with potentially different security guarantees, full
support for smart contracts, and a seamless transition between
modeling of public and private ledger without having to reprove
any security results. We discuss these features in Appendix C.
2.2 Ledger Technologies and Security
Properties
Having explained the technical aspects of Fledger, this section dis-
cusses that Fledger can indeed capture various types and features of
distributed ledgers as well as their security properties ‚Äì including
new ones ‚Äì illustrating the generality and flexibility of Fledger.
3We note that this concept can easily be extended to capture multiple different levels
of ‚Äúbroken‚Äù assumptions, e.g., to handle cases where the assumption for the security
property of liveness is broken, but another assumption that guarantees the property
of consistency still holds. The main requirement is that the environment can check
that real and ideal world are consistent in their corruption levels.
2.2.1
types and features, including all of the following:
Ledger Technologies. Fledger supports a wide range of ledger
Types of global state. At the core of Fledger is the totally or-
dered msglist, which includes transactions and meta data and is
interpreted by Fread and Fupdate. By defining both subroutines
in a suitable manner, it is possible to capture a wide variety of
different forms of global state, including traditional blockchains
(e.g., [4, 16, 20, 26, 45]), ledgers with a graph structure (e.g., [6, 8]) or
ledgers that use sharding [30, 36, 47]. In Section 3, we describe how
blockchains are captured and in Section 4 we capture the global
graph used by Corda. To capture sharding, where participants are
assigned to a shard of a ledger and are supposed to have a full view
of their respective shard, Fupdate ensures that each transaction is as-
signed to a specific shard (this information is stored together with
the transaction in msglist). Fread then ensures that parties have
access only to transactions assigned to their respective shard(s).
Consensus protocols. Fledger itself is agnostic to the consensus
protocol used in the realization. This allows for realizations using a
wide variety of consensus protocols such as Byzantine fault-tolerant
protocols, Proof-of-Work, Proof-of-Stake, Proof-of-Elapsed-Time,
Proof-of-Authority, etc. If desired, it is also possible to customize
Fupdate to capture properties that are specific to a certain consensus
algorithm. In Section 3, we exemplify that Fledger can indeed cap-
ture Proof-of-Work and Proof-of-Stake blockchains. In Section 4, we
show that Fledger can capture the partially centralized consensus
service of Corda, i.e., Proof-of-Authority. Other consensus mecha-
nisms can be captured using analogous techniques.
Network models. Fledger can capture various types of network
models, including, e.g., (i) synchronous, (ii) partially synchronous,
and (iii) asynchronous networks. To model these cases, FupdRnd
needs to be customized appropriately. For synchronous/partially
synchronous network models one typically enforces in FupdRnd
that time/rounds cannot advance as long as messages are not de-
livered within expected boundaries, say ùõø rounds (cf. Section 4).
Additionally, one might also define Fread to give honest parties read
access to (at least) all messages in msglist that are more than ùõø (or
ùëê ¬∑ ùõø for some constant ùëê) rounds old. To model fully asynchronous
networks, FupdRnd and Fread do not impose any restrictions.
Time models. Fledger can capture different time models includ-
ing, e.g., (i) synchronous clocks, (ii) clocks with bounded time drift,
and (iii) asynchronous clocks. For synchronous clocks, we can di-
rectly use the global clock of Fledger which then defines the time for
all parties. For other types of clocks, protocol designers typically
add a new type of read request (via the bit string msg that is part of
read requests, say, by using msg = getLocalTime and interpreting
this in Fread) for reading the local time of a party. Fread then allows
the adversary to determine the local time freely (for asynchronous
clocks) or subject to the condition that it is within a certain time
frame w.r.t. the global time (for clocks with bounded shift).
Smart contracts and dynamic party (de-)registration. As
noted above and detailed in Appendix C, Fledger can capture both
of these features.
Security Properties. Fledger can capture a wide variety of
2.2.2
(combinations of) security properties from the blockchain secu-
rity literature, including existing properties from both game-based
and universally composable settings. This includes the following
Session 4A: Modeling Blockchains and Distributed Ledgers CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea1048properties, which have game-based and/or universally composable
formalizations:
Consistency [21, 30, 38] as already explained above, states that
honest parties share a prefix of the global state of a ledger. This can
be enforced by properly defining Fread as we also show in Section 3.
We note that the notions of agreement, persistence, and common
prefix [2, 20] are closely related to consistency and can be covered
in an analogous way.
Chain-growth [5, 16, 20, 28, 38] ensures that a blockchain grows
at least with a certain speed, i.e., a certain minimal number of
blocks is created per time unit. As we show in Section 3, this can
be captured in Fledger via FupdRnd. Specifically, FupdRnd rejects
round/time update requests whenever there are not sufficiently
many blocks yet as would be required for the next time period.
Chain-quality [5, 16, 20, 28, 38] requires that honest users
create a certain ratio of blocks in a blockchain in order to prevent
censorship. This can be captured in Fledger, e.g, by recording the
block creators as metadata in Fledger‚Äôs msglist. Fupdate then rejects
updates if they violate chain-quality .
Liveness [5, 16, 20, 28, 38] ensures that transactions submitted
by honest clients enter the global state respectively the state read by
other honest clients within ùúå rounds. As we exemplify in Section 3
and 4, protocol designers can use FupdRnd to ensure various forms of
liveness. Specifically, FupdRnd forbids the adversary from advancing
time as long as conditions for the next time unit are not yet met,
e.g., because a transaction that is already ùúå rounds old is not yet in
the global state.
Privacy Properties, such as transaction privacy [31, 35, 43, 46],
ensure secrecy of transactions, e.g., that only parties involved
in a transaction are aware of its contents. To capture different
forms/levels of privacy in Fledger, the leakages of its subroutines
are specified to keep private information hidden from the adver-
sary as long as the adversary does not control any parties that have
access to this information. Furthermore, Fread ensures that also
honest parties gain read access only to information that they are
allowed to see. In Section 4, we use this technique to formalize and
analyze the level of privacy of Corda, including which information
is leaked to the adversary for honest transactions.
Soundness Properties, such as transaction validity and double-
spending protection, can be captured by customizing Fsubmit and/or
Fupdate to reject incoming messages that violate soundness prop-
erties. This is exemplified in Sections 3 and 4 with further details
provided in our technical report [22].
New security properties that have not yet been formally defined
in the distributed ledger security literature can potentially also be
supported by Fledger. One example is our novel notion of partial
consistency (cf. Section 4).
In summary, as discussed above, Fledger is indeed able to formalize
existing security notions from the game-based blockchain secu-
rity literature [16, 20, 21, 28, 31, 35, 38, 43, 46]. For the univer-
sally composable blockchain security literature we show an even
stronger statement in Section 3: Fledger can not only formalize exist-
ing security properties; existing security proofs and security results
obtained for concrete blockchains, such as Bitcoin, carry over to
Fledger (after lifting them to the abstraction level of Fledger).
3 COVERING BLOCKCHAINS WITH Fledger
In this section, we demonstrate that Fledger is able to capture tra-
ditional blockchains as a special case. Firstly, we show that the
so far most commonly used blockchain functionality Gledger [5]
(with some syntactical interface alignments) realizes a suitable in-
stantiation of Fledger, which captures the security guarantees of
Gledger, and demonstrate that this result also holds for its privacy-
preserving variant GPL [26]. Hence, any realization of Gledger or
GPL (with interface alignments) also realizes Fledger. This in fact
covers all published UC analyses of blockchains, including Bit-
coin [5], Ouroboros Genesis [3], and Ouroboros Crypsinous [26].
Secondly, we discuss that Fledger can also capture other published
ideal blockchain functionalities, which so far have been used only
to model setup assumptions for higher-level protocols. Altogether,
this illustrates that Fledger not only generalizes but also unifies the
landscape of ideal blockchain functionalities from the literature.
The ideal blockchain functionality Gledger. Let us start by
briefly summarizing the ideal blockchain functionality Gledger (fur-
ther information, including a formal specification of Gledger in the
iUC framework, is available in in our technical report [22]. Gledger
offers a write and read interface for parties and is parameterized
with several algorithms, namely validate, extendPolicy, Blockify,
and predictTime, which have to be instantiated by a protocol de-
signer to capture various security properties. By default, Gledger
provides only the security property of consistency which is stan-
dard for blockchains. An honest party can submit a transaction
to Gledger. If this transaction is valid, as decided by the validate
algorithm, then it is added to a buffer list. Gledger has a global list of
blocks containing transactions. This list is updated (based on a bit
string that the adversary has previously provided) in a preprocess-
ing phase of honest parties. More specifically, whenever an honest
party activates Gledger, the extendPolicy algorithm is executed to
decide whether new ‚Äúblocks‚Äù are appended to the global list of
blocks, with the Blockify algorithm defining the exact format of
those new blocks. Then, the validate algorithm is called to remove
all transactions from the buffer that are now, after the update of
the global blockchain, considered invalid. An honest party can then
read from the global blockchain. If the honest party has been regis-
tered for a sufficiently long amount of time (larger than parameter
ùõø), then it is guaranteed to obtain a prefix of the chain that contains
all but the last at most windowSize blocks. This captures the prop-
erty of consistency. In addition to these basic operations, Gledger
also supports dynamic (de-)registration of parties and offers a clock,
modeled via a subroutine Gclock, that advances depending on the
output of the predictTime algorithm (and further constraints).
As becomes clear from the above short description of Gledger,
Fledger draws inspiration from Gledger. However, there are several
fundamental differences:
‚Ä¢ Gledger is designed for capturing blockchains and therefore, e.g.,
requires that transactions are stored in a ‚Äúblock‚Äù format (via the
Blockify algorithm) and always provides the security property
of consistency. As already discussed in Section 2, Fledger only
requires the existence of a totally ordered list of transactions.
‚Ä¢ Read operations in Gledger always output a full prefix of Gledger‚Äôs
blockchain in plain, i.e., Gledger is built for blockchains without
privacy guarantees and those that do not modify/interpret data
Session 4A: Modeling Blockchains and Distributed Ledgers CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea1049in any way. Fledger includes a parameter Fread to modify and also
restrict the contents of outputs for read requests, which in turn
allows for capturing, e.g., privacy properties (as illustrated by
our Corda case study).
‚Ä¢ Gledger takes a lower level of abstraction compared to Fledger.
That is, Gledger has several details of the envisioned realization
built into the functionality and higher-level protocols have to
take these details into account. In other words, the rationale
of how higher-level protocols see and deal with blockchains
is different to Fledger. Gledger requires active participation of
higher-level protocols/the environment, while Fledger models
blockchains (and distributed ledgers) essentially as black boxes
that higher-level protocols use. More specifically, Gledger includes
a mining or maintenance operation MaintainLedger that higher-
level protocols/the environment have to call regularly, modeling
that higher-level protocols have to manually trigger mining or
state update operations in the blockchain for security to hold true.
Similarly, the clock used by Gledger also has to be regularly and
manually triggered by higher-level protocols/the environment
for the run of the blockchain to proceed. In contrast, Fledger
abstracts from such details and leaves them to the realization.
The motivation for this is that higher-level protocols usually do
not (want to) actively participate in, e.g., mining operations and
rather expect this to be handled internally by the underlying
distributed ledger.
‚Ä¢ Gledger includes a predictTime parameter that, based on the num-
ber of past activations (but not based on the current global
state/blockchain), determines whether time should advance. This
parameter can be synchronized with suitable definitions of the
extendPolicy, which has access to and determines the global
state, to model time dependent security properties such as live-
ness. Fledger instead allows the adversary to choose arbitrarily
when time should advance. The single parameter FupdRnd can
then directly enforce time dependent security properties without
requiring synchronization with other parameters (cf. Section 2.2).
‚Ä¢ Gledger uses algorithms as parameters, whereas Fledger uses sub-
routines, with the advantages explained in Footnote 1.
In summary, the main differences between Gledger and Fledger are
due to (i) different levels of abstraction to higher-level protocols
and (ii) the fact that Gledger is built specifically for traditional block-
chains. Both of these aspects have to be addressed to show that
Gledger is a realization of a suitable instantiation of Fledger. To ad-
dress (i), we use a wrapper Wledger that we add on top of the I/O
interface of Gledger and which handles messages from/to the envi-
ronment. This wrapper mainly translates the format of data output