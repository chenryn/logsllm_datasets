title:HEAPSTER: Analyzing the Security of Dynamic Allocators for Monolithic
Firmware Images
author:Fabio Gritti and
Fabio Pagani and
Ilya Grishchenko and
Lukas Dresel and
Nilo Redini and
Christopher Kruegel and
Giovanni Vigna
2022 IEEE Symposium on Security and Privacy (SP)
HEAPSTER: Analyzing the Security of Dynamic Allocators for Monolithic Firmware Images
Fabio Gritti†, Fabio Pagani†, Ilya Grishchenko†, Lukas Dresel†, Nilo Redini‡(cid:2), Christopher Kruegel†, Giovanni Vigna†
† University of California, Santa Barbara, ‡ Qualcomm Technologies Inc.
{degrigis, pagani, grishchenko, lukasdresel, chris, vigna}@ucsb.edu, PI:EMAIL
0
1
6
3
3
8
9
.
2
2
0
2
.
4
1
2
6
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
2
2
0
2
©
0
0
.
1
3
$
/
2
2
/
9
-
6
1
3
1
-
4
5
6
6
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
2
2
0
2
Abstract—Dynamic memory allocators are critical components of
modern systems, and developers strive to find a balance between their
performance and their security. Unfortunately, vulnerable allocators
are routinely abused as building blocks in complex exploitation chains.
Most of the research regarding memory allocators focuses on popular
and standardized heap libraries, generally used by high-end devices
such as desktop systems and servers. However, dynamic memory
allocators are also extensively used in embedded systems but they
have not received much scrutiny from the security community.
In embedded systems, a raw firmware image is often the only
available piece of information, and finding heap vulnerabilities is
a manual and tedious process. First of all, recognizing a memory
allocator library among thousands of stripped firmware functions
can quickly become a daunting task. Moreover, emulating firmware
functions to test for heap vulnerabilities comes with its own set of
challenges, related, but not limited, to the re-hosting problem.
To fill this gap, in this paper we present HEAPSTER, a system
that automatically identifies the heap library used by a monolithic
firmware image, and tests its security with symbolic execution and
bounded model checking. We evaluate HEAPSTER on a dataset of 20
synthetic monolithic firmware images — used as ground truth for our
analyses — and also on a dataset of 799 monolithic firmware images
collected in the wild and used in real-world devices. Across these
datasets, our tool identified 11 different heap management library
(HML) families containing a total of 48 different variations. The
security testing performed by HEAPSTER found that all the identified
variants are vulnerable to at least one critical heap vulnerability. The
results presented in this paper show a clear pattern of poor security
standards, and raise some concerns over the security of dynamic
memory allocators employed by IoT devices.
Security,
Terms—Computer
Firmware
Analysis,
Index
Vulnerability Research.
(cid:2)
The author contributed before joining Qualcomm Technologies Inc.
I. INTRODUCTION
Dynamic memory allocators are procedures responsible for
reserving appropriately sized chunks of memory whenever a running
program requires them. The number of chunks or, the amount of
memory a program needs depends on a multitude of factors that are
usually unknown at compilation time. For example, a browser needs
to allocate some memory when the user opens a web page, and in
general, any non-trivial program can make thousands of memory
requests during its execution. Dynamic allocators are ubiquitous in
modern systems, and they are present on different devices, ranging
from Internet of Things (IoT) devices to high-performance servers.
The development of memory management libraries must take into
consideration different aspects. On the one hand, dynamic allocators
need to be designed with performance in mind; on the other hand,
they need to be secure to avoid increasing the attack surface of a
system. In fact, when maliciously manipulated, memory allocators
can provide attackers with powerful exploitation primitives [53].
Software developers strive to find the optimal balance between
security and performance, and, sometimes, they decide to trade
the former for the latter. For example, security patches have
been recently rejected – even if they were meant to remove
practical attack vectors – to avoid any impact on the overall
system’s performance [17]. In another case, the introduction of new
performance-tailored data structures in a heap library compromised
its security, undermining years of security hardening [23]. Finally,
some developers tend to favor performance because they consider
heap protections as post-attack mitigations, and argue that the
root cause for an attack should be addressed in the vulnerable
application, rather than in the heap library itself [46]. While this
is a possible point of view, we argue that heap libraries are a critical
building block for many applications, and hence, should protect
against cases where a simple programming mistake (i.e., a one-byte
overflow) leads to a complete application compromise.
The balance between performance and security is an even more
important issue for embedded systems, such as IoT devices. In
fact, dynamic memory allocators for embedded systems usually
need to operate with limited resources, sometimes under strict time
constraints, and, in addition, might be deployed in industrial control
systems, where their security becomes critical.
Unfortunately, evaluating dynamic memory allocators for embed-
ded systems is challenging. While the previous statement is true for
both Linux-based and monolithic firmware images (from now on,
also referred to as firmware blobs or blobs), analyzing the latter is
particularly cumbersome. First, the only information at hand when
analyzing a monolithic firmware image extracted from a device is a
raw binary (i.e., no source code or debugging symbols are available).
Second, monolithic firmware images are not built on top of a
traditional general-purpose OS, and the boundary between the appli-
cation and the libraries’ code is difficult to locate – if it exists at all.
Finally, as different IoT devices might have different requirements,
embedded developers might decide to implement custom allocators,
rather than using popular and security-vetted heap implementations.
In the past few years, researchers from both industry and
academia have proposed different approaches to assess the security
of heap implementations. For example, Eckert et al. presented
HeapHopper [24], a system that leverages symbolic execution and
Bounded Model Checking (BMC) to test the security of a dynamic
allocator. In a similar vein, Insu et al. [63] used fuzzing techniques to
explore the attack surface of different heap library implementations,
eventually detecting novel security violations. Researchers have
also proposed multiple patches and refactoring of existing heap li-
braries [27], and re-engineered the heap management approaches, in-
troducing strong security foundations [6], [39], [45], [48], [55], [56].
However, all the aforementioned approaches have been tailored
to heap implementations used for “classic” systems, while little
has been done to study the security of dynamic allocators used
in embedded systems. Traditionally, the use of dynamic memory
allocators in embedded systems has been considered a bad
© 2022, Fabio Gritti. Under license to IEEE.
DOI 10.1109/SP46214.2022.00130
1082
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:35:29 UTC from IEEE Xplore.  Restrictions apply. 
practice, only to be limited to those cases where an allocator
was absolutely necessary [12], [25]. However, advancements
in Real-time Operating System’s (RTOS) technologies and the
increase of on-board computing resources, are driving embedded
developers to leverage dynamic allocators more often than before,
potentially exposing IoT devices to more complex types of exploits.
To shed some light on this issue, we developed HEAPSTER, a
framework to recognize, categorize, and test the security of the Heap
Management Library (from now on referred to as HML) used by a
monolithic firmware image. HEAPSTER identifies the functions that
are part of the dynamic allocator interface (i.e., malloc and free)
by studying how pointers are generated (and used) inside a firmware
blob, and by dynamically executing these functions to monitor
their run-time behavior. Then, HEAPSTER identifies the prototypes
of both the allocator and the de-allocator, and understands how
to initialize and call these functions with appropriate arguments.
Finally, HEAPSTER performs a bounded model checking analysis
to check for the presence of common classes of heap vulnerabilities,
and, when one is found, it generates a proof-of-vulnerability (PoV)
that can be used to reproduce the security violation. To perform
this task, we leverage a custom version of HeapHopper [24],
which we adapted to support the analysis of monolithic firmware
images. To evaluate the techniques we present in this paper, we
use two different datasets. The first dataset contains 20 different
monolithic firmware images collected from previous work [21],
[29], [33] for which debugging symbols are available. We use
this dataset (ground-truth) to evaluate HEAPSTER performance,
and easily confirm its results employing the debug symbols of the
firmware images. The second dataset contains 799 blobs collected
from the wild (wild dataset). Given its significant heterogeneity
in representing a multitude of different IoT devices [52], [59], we
use these firmware samples to gain more insight into the state of
memory allocators in the embedded world. Our results show that (1),
across all the firmware samples analyzed by HEAPSTER there are 11
different HML families combining a total of 48 different variations
(i.e., versions, customizations, or, simple configuration differences),
and (2), for all the HMLs it is possible to generate a PoV for at
least one class of heap vulnerability. This result highlights how
the security of the heap management for embedded systems is far
behind the standards expected from modern allocators.
In summary, we make the following contributions:
• We advance the state of program analysis over monolithic
firmware images by proposing different techniques to reason
about pointer creation and firmware function emulation, and
we scale them to test a total of 819 firmware blobs. While
these techniques are used to recover the HML from a blob,
they can be leveraged for other analyses and applications.
• We present HEAPSTER, the first system able to automatically
identify a heap management library inside a monolithic
firmware image, and test its security.
• We implement the heap security testing by modifying
HeapHopper to apply symbolic execution and BMC tech-
niques over target functions in monolithic firmware images.
• We demonstrate a general pattern of poor security standards
in the HMLs recovered from a heterogeneous set of firmware
blobs. Specifically, in all of the 48 identified library variants,
we find at least one critical heap vulnerability class.
All the artifacts are made available at github.com/ucsb-
seclab/heapster.
II. CHALLENGES AND GOALS
In this section, we discuss the main challenges that we must
overcome to successfully test the security of the heap management
library of a monolithic firmware image.
Firmware Loading. Monolithic firmware images can have custom
formats (e.g., a custom base address, a custom entry point, and a
custom memory layout), and are often built for the specific hardware
configuration of a given device. Moreover, when the instruction set
architecture (ISA) of a firmware sample is not supported by the anal-
ysis tool, even basic emulation tasks can become challenging [35].
To simplify the problem, in this paper we focus on the ARM
CortexM architecture, the most popular solution for consumer
IoT devices [29], [37]. Therefore, we assume the required firmware
metadata to be either architecturally known (e.g., the memory layout,
including the boundaries of the heap memory region and the MMIO
region [7]), or recoverable with state-of-the-art techniques [59].
Once the target firmware image is loaded in memory we need to
identify the boundaries of the functions defined in it. This problem,
exacerbated by the intrinsic nature of a monolithic firmware image,
is well-known in literature [3], [11], [36], [38], [41], [58], and we
consider it orthogonal to our research. Therefore, in this paper, we
simply rely on state-of-the-art tools to retrieve this information.
HML Identification. Monolithic firmware images can contain
hundreds of different functions, belonging either to the main
application or to the supporting libraries (e.g., hardware abstraction
libraries, or RTOS libraries). In this scenario, manually identifying
the functions related to the heap management is a daunting task,
and automated approaches become necessary. While previous work
on automated identification of allocator code exists [19], it focuses
on “classic” systems (e.g., personal computers and servers) and it
relies on the dynamic execution of the entire program under analysis,
which is particularly challenging — if possible at all — when dealing
with monolithic firmware. The usage of dynamic allocators in em-
bedded devices has been the center of multiple discussions through
the years [12], [25]. In particular, the main concerns raised by
embedded developers are related to memory fragmentation and non-
determinism of the firmware’s code. In fact, when numerous cycles
of memory allocation and de-allocation are performed without re-
booting the system (a very common situation for embedded devices),
the memory can become heavily fragmented and the allocator might
be unable to service further allocation requests. Overcoming this
situation requires implementing a ”graceful degrade” mechanism,
which developers argue to be extremely challenging when an HML
is being used as part of the application code. For these reasons, the
usage of heap libraries has often been discouraged for real-time
embedded systems, in particular when deployed in safety-critical
environments. Despite this, HMLs are frequently used by embedded
systems developers, as we will show in Section V.
HML Identification Scope. In this paper, we focus on the
identification of low-level dynamic memory allocators that (1)
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:35:29 UTC from IEEE Xplore.  Restrictions apply. 
1083
Firmware + Metadata
HEAPSTER
Firmware + Initialized Memory
Basic
Functions
Identification
Allocator
Identification
HML
Prototype
Identification
HML
Properties
Identification
1
3
5
7
Load
Firmware
Pointer
Sources
Identification
Deallocator
Identification
Hotspots
Detection
2
4
6
8
12
Validate
PoV
Malloc: X
Free: Y
Hooks:
Prototypes
...
Heap
Transitions
9
PoC Generation
10
M
F
UAF
A = malloc()
free(A)
read(A, 100)
Symbolic Execution
Heap
Functions
Hooking
Security
Violation