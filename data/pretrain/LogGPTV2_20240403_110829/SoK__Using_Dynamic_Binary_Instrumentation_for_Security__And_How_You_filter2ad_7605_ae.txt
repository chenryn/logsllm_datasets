### Case with Self-Modifying Code within the Current Basic Block

Self-modifying code within the current basic block can be detected in Pin using an optional switch, though this comes at the cost of increased overhead.

### Transparency and User-Supplied Analysis Code

In concluding our discussion, it is important to highlight the potential for user-supplied analysis code to compromise the transparency of execution, particularly during context reconstruction. Frameworks like Pin, which support registering analysis callbacks, may be more user-friendly for analysis writers compared to systems like DynamoRIO, which allow direct manipulation of statements. However, Dynamic Binary Instrumentation (DBI) systems often leave some responsibility for maintaining transparency to the users.

### Mitigations at the Analysis Code Level

While revisiting architectural and implementation choices can enhance transparency by design, research has also explored how user-provided analysis code can mitigate artifacts in mainstream DBI systems and counteract evasive attempts observed in certain application domains. This approach was proposed by PinShield [46] and applied in the context of executable unpacking, even in the presence of anti-instrumentation measures.

We have developed a high-level DBI library designed to run in existing analysis systems to detect and potentially counter DBI evasion and escape attempts. We refined the design of PinShield to improve performance in managing memory accesses and introduced protective measures to address issues such as memory permission consistency (e.g., enforcing NX policies and page guards), pointer leaks via FPU instructions, inconsistencies in exception handling, and various detection queries to the OS (e.g., when the DBI engine is revealed as a debugger).

For our prototype implementation, we chose the most challenging setting: Pin running on Windows. Unlike DynamoRIO, Pin does not rewrite the results of basic fingerprinting operations that might reveal its presence, such as OS queries about memory. As Pin is closed source, it cannot be inspected or modified to ease the implementation of mitigations. Additionally, using Windows makes immediate cooperation on the OS side (e.g., via a kernel driver) more difficult.

### Approach

Our design for the library aims to be portable to other frameworks and Linux, avoiding specific primitives or choices that could tie it to Pin's internal mechanisms. To manage memory accesses, we maintain a shadow page table indexed by the page number for the address. We monitor basic RWX permissions and page guard options using 4 bits in a 1-byte element per page. For 32-bit Windows, this results in a 512 kbyte table for the 2-GB user address space, with recently accessed fragments likely to be found in the CPU cache for fast retrieval.

We update the table during code loading events and whenever the program (or Windows components on its behalf) allocates, releases, or changes memory permissions, hooking system calls and events that may cause such changes. When a violation is detected, we create an exception for the application.

Possible code pointer leaks from FPU instructions are intercepted as revealing instructions are executed. We replace the address from the code cache with the one in the original code. For this operation, one can use APIs possibly offered by the engine to convert addresses, or monitor x87 instructions that change the FPU instruction pointer with a shadow register. Although more expensive, we opted for the second approach for generality.

Exception handling inconsistencies, such as single-step exceptions and int 2d attacks found in malware and executable protectors, are intercepted, and we forge exceptions where needed.

Due to space constraints, we refer readers to our source code for detailed mitigations, including punctual countermeasures for pointer leaks with int 2e attacks and detections based on debugger objects.

### Overhead

The mitigations described above can significantly impact the baseline performance of an engine running empty analysis code. Managing memory accesses is a challenging task for DBI architects, especially when implemented on top of the engine. However, it may be acceptable for user-defined analyses that already track such operations, such as taint analysis. Similarly, checking conformance to NX policies slows down execution but may be acceptable for code that already validates transfers, such as for Control Flow Integrity (CFI) or Return-Oriented Programming (ROP) defenses.

We conducted a preliminary investigation using the SPEC CPU2006 benchmarks commonly used to analyze DBI systems [4, 34]. We considered different protection levels: pointer leaks, NX and page guard checks on indirect transfers, denying RW access to DBI regions, and a paranoid variant. We also evaluated a popular taint analysis library with byte-level tracking granularity. Due to space constraints, we report figures for a subset of benchmarks in Figure 1.

Tracking x87 instructions for leaks has a limited impact on execution time. Enforcing NX and page guard protection on indirect transfers is also relatively inexpensive. Shepherding memory read/write accesses incurs a high slowdown, but it is smaller than the overhead introduced by the heavy-duty analysis of libdft. While high overheads were expected, we do not find these figures discouraging. Some performance can be improved by optimizing integration with the backend and with analyses meant to run on top of it. We believe a fraction of this gap can be reduced if countermeasures are implemented inside the engine. We tested our implementation with evasive packer programs and successfully ran code packed with PELock, which [46] based on PinShield could not handle properly.

### Discussion

Mitigating artifacts using user-level code is a complex task. As mentioned in Section 5.1, there are aspects in system call interposition that, if overlooked, can lead to security tools being easily circumvented. One such aspect is incorrectly replicating OS semantics. We follow the recommendations from [18] by querying the OS to capture the effects of system calls that manipulate regions of the address space. This helped us deal with occasional inconsistencies between the arguments or output parameters for such calls and the observed effects on the address space. Our library pursues the DBI system design guideline G2 on making discrepancies imperceptible to the monitored program (Section 4.1). The performance impact could be reduced if the DBI runtime cooperates, for instance, by supporting automatic (optimized) guard insertion during trace compilation.

### Wrap-Up and Closing Remarks

In the previous sections, we illustrated structural weaknesses of the DBI abstraction and its implementations in software security settings, and discussed mitigations to make DBI frameworks more transparent—albeit at the cost of performance penalties. These mitigations include adjustments to their design or stopgap measures within analysis tools. We conclude by discussing implications for researchers who want to use DBI for security, considering instrumentation capabilities and the relevance of evasion and escape problems, factoring in the attacker’s capabilities and the necessary countermeasures.

### Choosing DBI in the First Place

As seen in Section 3, the flexibility of DBI primitives has supported the development of numerous analysis techniques over the years. When the source code of a program is not available, researchers typically have two options besides DBI: Static Binary Instrumentation (SBI) and Virtual Machine Introspection (VMI) techniques. While it is tempting to generalize when to prefer one approach, the picture is complex, and thorough methodological and experimental comparisons would be required for different application domains.

### Instrumentation Capabilities

SBI can instrument a wide range of program behaviors as long as static inference of the necessary information is possible. VMI can capture generic events at the whole-system level, regardless of the code structure, using libraries to bridge the semantic gap. However, current VMI systems cannot make queries or execute operations using the OS APIs, unlike DBI systems. A 2015 work proposed PEMU [65], a new design to move DBI instrumentation out of the VM, providing forwarded guest syscall execution. However, the public codebase seems no longer under active development.

### Deployability of the Analysis System Runtime

For SBI, requirements are typically limited as the original binary gets rewritten. DBI, using process virtualization, enables lightweight tools that operate on a single application, suitable for production systems, e.g., with legacy binaries [4]. For VMI, bringing up an emulated or virtualized environment can be a significant challenge or a natural choice, depending on the application scenario.

### Altering Execution

Both DBI and VMI can detect and alter specific instructions generated at runtime. VMI is currently less capable of replacing entire calls or sequences in the text of a program, but it can handle system call authorization during context switches.

### Dealing with Adversarial Code

A crucial issue is the characteristics of the code undergoing analysis, particularly if an attacker can embed adversarial patterns specific to DBI. This is especially relevant in malicious code analysis and reverse engineering. Such code can challenge massaged results and other mitigations for transparency issues put in place by the engine or the analysis tool.

When the adversary lacks arbitrary memory read capabilities, mitigating leaked code pointers is usually sufficient to hide extra code regions. Different attack surfaces, such as exhaustion or prediction attacks for memory allocations, should be considered. If the adversary cannot write to arbitrary memory locations and leaked pointers are managed, escaping attempts are contained, and unfeasible flows from inconsistencies in enforcing NX policies can be avoided by shepherding control transfers.

Coping with an attacker who can register exception handlers and force memory operations on unallocated regions in massaged OS queries is particularly challenging. The overhead of shepherding every memory access is high for current DBI designs, but technologies like executable-only memory may help in the future.

### Popularity and Adversarial Sequences

The popularity of an analysis technique can lead to the diffusion of ad-hoc adversarial sequences in the code it analyzes. In DBI history, ad-hoc evasions against Pin in some executable packers [10] have been observed. Conversely, even well-known attack surfaces, such as implicit flows against taint analysis [7], may not always be exploited, as adversaries may focus on other anti-analysis strategies like sandboxing and obfuscation. Speculating on an arms race involving DBI evasion is thus difficult.

### Closing Remarks

In this work, we aimed to systematize existing knowledge and speculate on a problem that has recently received significant attention in the security community. Using DBI for security is not a black-and-white issue but depends on how the DBI abstraction is used, considering its characteristics in terms of execution transparency, which is both a security and correctness concern. We hope other researchers will benefit from our library of detection patterns and mitigations for Pin, available at:

https://github.com/season-lab/sok-dbi-security/

### Acknowledgements

We are grateful to Ke Sun, Xiaoning Li, and Ya Ou for sharing their code [56] with us. This work is supported in part by a grant from the Italian Presidency of the Council of Ministers.

### References

[1] Michael Backes, Thorsten Holz, Benjamin Kollenda, Philipp Koppe, Stefan Nürnberger, and Jannik Pewny. 2014. You Can Run but You Can’t Read: Preventing Disclosure Exploits in Executable Code (CCS ’14). ACM.

[2] Otto Brechelmacher, Willibald Krenn, and Thorsten Tarrach. 2018. Enhancing Security of Cryptography in Executables (ESSoS ’18). Springer.

[3] Michael Brengel, Michael Backes, and Christian Rossow. 2016. Detecting Hardware-Assisted Virtualization (DIMVA ’16). Springer.

[4] Derek Bruening, Qin Zhao, and Saman Amarasinghe. 2012. Transparent Dynamic Instrumentation (VEE ’12). ACM.

[5] Bryan Buck and Jeffrey K. Hollingsworth. 2000. An API for Runtime Code Patching. Int. J. High Perform. Comput. Appl. 14, 4 (Nov. 2000).

[6] Juan Caballero, Pongsin Poosankam, Christian Kreibich, and Dawn Song. 2009. Dispatcher: Enabling Active Botnet Infiltration Using Automatic Protocol Reverse-Engineering. USENIX Security Symposium.