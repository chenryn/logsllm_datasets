peripheral’s upstream USB trafﬁc.
Broadcasting USB downstream trafﬁc is a risky design
decision [34]. For example, an attacker can use a simple
USB analyzer to monitor disk writes. However, because
upstream trafﬁc is only transmitted along the path to the
host, much of the “interesting” data, such as keyboard
inputs and disk reads, seems to remain inaccessible to a
corrupted peripheral device outside that path.
USB 1.x and 2.0 Ports Structure. Both USB 1.x and
USB 2.0 use a two-wire differential communication bus.
We denote these wires as D+ and D-. In addition, each
USB connection also provides two power lines, denoted
as Vcc and GND, to supply 5 Volt power to peripheral
devices. See Figure 1.
USB 1.x and 2.0 Communication. Sharing the bus is
achieved through the use of Time-Division Multiplexing
USENIX Association
26th USENIX Security Symposium    1147
Figure 1: Structure of a USB port.
Figure 3: Leakage can be observed at an unused port
adjacent to the USB device.
3 Leaky Hubs
We now turn our attention to the leakage between two
adjacent USB ports on the same USB hub. We investi-
gate both internal hubs, installed inside computers, and
external stand-alone hubs. As mentioned in Section 2,
downstream trafﬁc from the PC to the peripherals con-
nected to the hub is broadcasted and thus readily avail-
able. However, upstream trafﬁc, e.g. keyboard presses, is
not broadcasted and thus should remain out of reach for
an attacker monitoring the USB port. We evaluated the
crosstalk leakage between two downstream USB ports
on the same USB hub as follows. First, we connected
a USB input device, such as a keyboard, to one of the
ports of the hub. Next, we used an oscilloscope to mon-
itor the data sent from the device to the host while con-
currently measuring the leakage on a different USB port
of the same USB hub. See Figure 3.
As we described in Section 2, every USB port con-
tains a pair of data lines and a pair of power lines. Each
of these pairs is a potential source of leakage. Hence,
we can measure the crosstalk leakage present on the data
lines of an adjacent port and additionally, or alternatively,
we can measure it on power lines of the adjacent port.
In a typical scenario both data line and power line
leakage should be available on the same USB port, thus
allowing the attacker to choose the channel contain-
ing the best signal. However, common “ad-hoc” coun-
termeasures against untrusted USB devices are some-
times deployed. These include USB hubs with dedi-
cated switches, which power devices down by cutting the
power supply to them and power-only cables, a.k.a. USB
condoms [3], which disconnect the data lines in order
to prevent interaction between the device and the USB
host. Yet, because the crosstalk leakage is often present
on both the power and the data lines, to completely ren-
der the attacker ineffective, both pairs should be discon-
nected.
3.1 Data Line Leakage
Experimental Setup.
In order to evaluate the data line
crosstalk leakage present on USB hubs we used an Ag-
ilent MSO6104A oscilloscope (1GHz, 4Gsps) and two
Agilent 10073C 500MHz passive probes. We then con-
Figure 2: USB transaction, frame and packets.
(TDM). The bus protocol divides time into 1 ms frames,
as shown in Figure 2. Each frame comprises a Start
of Frame (SOF) packet followed by several transfers.
Transfers can be periodic, repeating in every frame as
long as the target device remains connected to the bus.
These are used, for example, for polling input devices
which are supposed to update as frequently as possible.
Otherwise, transfers are non-periodic. These include
control transfers assigning a bus address to a newly
plugged device, or occasional data-transfers such as up-
dating the print queue of a printer. Each transfer consists
of packets, which are the smallest building block of USB
trafﬁc. At the bottom of Figure 2, we illustrate a key-
board report transfer. The transfer begins with a Token
packet that probes the keyboard for key presses. If un-
delivered key presses are present, the keyboard responds
with a Data packet that contains a 64 bit payload identi-
fying the pressed key. The host then responds to the Data
packet, sending a Handshake packet, which terminates
the transfer. If no key presses are available for delivery,
the keyboard responds to the initial Token packet with a
Handshake packet that terminates the transfer.
To protect data from corruption, packets include sev-
eral checksum mechanisms. The Packet Identiﬁer (PID)
ﬁeld is protected by requiring that the second half of
the ﬁeld is the bitwise complement of the ﬁrst half. To-
ken packets transmitted from the host to the device use
a 5 bits CRC (Cyclic Redundancy Check) to verify the
Address (ADDR) and Endpoint (ENDP) ﬁelds and Data
packets use a 16 bits CRC in order to verify the payload.
1148    26th USENIX Security Symposium
USENIX Association
OscilloscopeRoot hubUSB hub(a) Terminus Tech FE1.1s
(inside a Lenovo 100s laptop)
(b) Proliﬁc MA8601
(c) SMSC USB2517-JZX
(inside an Apple Display)
(d) ASMedia Technology
ASM1074L
Figure 4: Top and middle row: Four tested USB hubs and their controller chips found to contain data line crosstalk
leakage. Bottom row: Corresponding leakage waveform, yellow (top) trace shows the USB trafﬁc and purple (bottom)
trace shows the data line crosstalk leakage measured from an adjacent downstream USB port.
Figure 5: Typical schematic of a USB hub (left) and the RC differentiator created by C and R3 (right).
nected a USB keyboard (Lenovo KU-0225) to one of the
hub’s downstream ports. Next, we used one of the oscil-
loscope’s probes to monitor the communication between
the PC host and the keyboard by measuring the voltage
on the D+ line relative to the GND line. Finally, we ob-
served the data line crosstalk leakage (using the oscil-
loscope’s second probe) by measuring the voltage on the
D+ or D- line relative to the GND line on one of the hub’s
other downstream ports.1
Observing the Data Line Crosstalk. Figure 4 shows
four different devices, including both leaking comput-
ers and leaking external hubs. The correlation between
the actual keyboard data (yellow trace, top) and observed
data line crosstalk leakage (purple trace, bottom) can be
clearly seen. We ﬁnd that such data line crosstalks are
1The choice between measuring the D+ or D- relative to the GND
line seems to depend on the speciﬁc port and hub used. In each experi-
ment below we actually attempted both options and present the option
which showed the clearest signal.
quite common. We evaluated 34 internal and 20 external
USB hubs. Out of these, 17 internal and 17 external were
found to have a data line crosstalk. Finally, we note that
data line crosstalk is not limited to USB 2.0 ports and is
also noticeable on USB 3.0 ports (see Figure 4(d)).
Leakage Mechanism. The leakage waveform of Fig-
ure 4(a) provides a hint into the physical reason for the
existence of crosstalk between two different USB ports.
A typical hub controller chip contains four USB logic
blocks, each responsible for a single downstream USB
port. See Figure 5. As part of the speed negotiation be-
tween the hub and downstream devices, the data lines
of the USB port are pulled down using 15kΩ resistors.
(These are marked as R1,R2,R3,R4 in Figure 5.) The-
oretically, the data lines of USB port 1 should be com-
pletely isolated from those of USB port 2. However,
we conjecture that the close proximity of the USB logic
blocks inside the controller chip creates some parasitic
USENIX Association
26th USENIX Security Symposium    1149
USB logicPort 1D+D-USB driverPort 2D+D-R1=15k  R2=15k R3=15k  R4=15k GNDCD+D+R3=15k  GNDCUSB Port 1USB Port 2Figure 6: Monitoring the hub’s electromagnetic leakage as well as the data line crosstalk leakage. The right ﬁgure is
the experimental setup where a keyboard is connected to the hub’s leftmost port (silver wire), the crosstalk leakage is
monitored via the adjacent port (blue wire) and the electromagnetic ﬁeld is measured using an EM probe (blue loop).
The left ﬁgure shows the corresponding signals where the top (yellow) trace is the actual USB data, the middle (purple)
trace is the data line crosstalk leakage and the bottom (green) trace is the observed EM signal. Although the crosstalk
signal is plotted with the same vertical scale as the EM signal, only the crosstalk signal (middle, purple) exhibits a
clear correlation with the actual USB data (top, yellow).
capacitance between data lines of adjacent ports (see C in
Figure 5). Thus, any signal present on D+ line of port 1
passes through the RC differentiator created by C and R3
and can be observed on the D+ line of port 2. See Fig-
ure 5. Similar crosstalk leakage also happens with the D-
lines with one option typically giving much better signal
than the other, depending on the USB hub and on indi-
vidual ports in it.
Crosstalk or EM?
In order to ascertain that the ob-
served leakage indeed emanates from crosstalk and not
from electromagnetic interference, we have used an EM
probe (Langer LF R400) to measure the electromagnetic
ﬁeld emitted by an external USB hub. As can be seen in
Figure 6, while there is a clear correlation between data
line crosstalk leakage (purple, middle) and the real USB
trafﬁc (yellow, top), the hub’s electromagnetic radiation
(green, bottom) does not contain any observable infor-
mation. We thus conclude that the observed crosstalk
leakage indeed emanates from parasitic capacitance be-
tween the hub’s USB ports and not from the hub’s elec-
tromagnetic leakage.
3.2 Power Line Crosstalk Leakage
A common method for isolating potentially corrupted
USB devices while still supplying them with 5V power
is to physically disconnect the USB data lines. Indeed,
power-only USB cables and USB condoms guarantee to
isolate corrupted devices from the USB bus while still al-
lowing the use of the USB port as a source of power, e.g.
for plugging a mobile phone into an untrusted charging
station. In this section we show that by monitoring the
power lines of a USB port, it is possible to eavesdrop on
the communication of USB devices connected to differ-
ent USB ports. Thus, even if the attacker is connected
to the hub using a power-only USB cable, he can still
observe the communication of nearby USB devices.
Experimental Setup. We connected a USB keyboard to
one of the hub’s downstream ports. We then used one of
the oscilloscope’s probes in order to monitor the commu-
nication between the PC host and the keyboard by mea-
suring the voltage on the D+ line relative to the GND
line. Finally, using the oscilloscope’s second probe, we
observed the power line crosstalk leakage by measuring
the voltage on the Vcc line relative to the GND line on
one of the hub’s other downstream ports.
Observing the Power Line Crosstalk Leakage. Fig-
ure 7 shows four devices along with the observed signals,
conﬁrming the existence of power line crosstalk leakage.
The correlation between the actual keyboard data (yel-
low, top) and the observed power line crosstalk leakage
(blue, bottom) is clearly visible. Overall, we found that
29 of the 34 internal and 17 of the 20 external hubs we
tested show power line crosstalk leakage. Overall, 32 in-
ternal hubs and 18 external hubs show at least one type
of crosstalk leakage.
Evaluating USB Condoms. We have also examined
the crosstalk leakage present on the USB power lines
measured through a PortaPow USB condom [4] which
promises to “block data transfer to / from a computer,
preventing data security breaches and viruses / hacking
when charging from a public USB socket”. As can be
seen in Figure 8, the power line crosstalk leakage can be
clearly observed.
Leakage Mechanism.
Parasitic capacitances are
present not only between two proximate data lines, but
also exist across a data line and a nearby USB power line.
See Figure 9 with the parasitic capacitance marked as C1.
1150    26th USENIX Security Symposium
USENIX Association
Figure 7: Top row: four tested USB hubs found to contain power line crosstalk leakage. Bottom row: Corresponding
leakage waveform, yellow (top) trace shows the USB trafﬁc and blue (bottom) trace shows the power line crosstalk
leakage measured from an adjacent downstream USB port. Notice the correlation between the sharp spikes in the
leakage trace and the USB trafﬁc. The waveforms were captured using an Agilent MSO6104A oscilloscope (1GHz,
4Gsps) and two Agilent 10073C 500MHz passive probes.
Figure 8: Measuring powerline crosstalk leakage through a PortaPow USB condom. The right ﬁgure is the exprimen-
tal setup where a keyboard is connected to the USB hub via the silver wire and the powerline crosstalk leakage in
monitored through the PortaPow USB condom (red) via the blue wire. The left ﬁgure shows the correponding signals
(acquired using an Agilent Inﬁniium DSO 5454832B oscilloscope) where the top (yellow) trace is the actual USB data
and the bottom (blue) trace is the powerline crosstalk leakage. Notice the clear correlation between the two traces.
3.3 Attacking USB 2.0 Devices
So far we have mainly focused on crosstalk leakage cre-
ated by USB 1.x devices (such as keyboards or other
human interface peripherals). Similar effects are also
present with high speed USB devices, such as USB stor-
age and webcam devices. However, since these devices
operate at a much greater speed, the experimental setup
used in Section 3.1 is no longer sufﬁcient.
Experimental Setup.
In order to observe the data
line crosstalk leakage from high speed USB 2.0 devices,
we used an Agilent DSO 90404A oscilloscope (6GHz,
20Gsps). We then connected a USB drive to one of the
hub’s downstream ports and used an Agilent N2795A
active probe in order to monitor the communication be-
Figure 9: Power line crosstalk leakage mechanism. The
parasitic capacitance is marked by C1.
Next, since the power lines of all of the USB ports are
generally interconnected inside the hub controller chip,
the data-to-power crosstalk occurring in one port can be
also observed from another port.
USENIX Association
26th USENIX Security Symposium    1151
D+GNDC1USB Port 1USB Port 2USB logicPort 15V DCtransitions using bit stufﬁng encoding [11]. More specif-
ically, it inserts a zero after every sequence of six con-
secutive ones. At the receiving end, voltage transitions
are used to maintain clock synchronization. The receiver
otherwise ignores the artiﬁcially inserted zeroes.
Decoding USB Packets.
Figure 11 presents a USB
transfer between a host and a USB keyboard. It shows
the signal that represents the communication (blue, top)
alongside the corresponding leakage captured on the data
lines of another port of the hub (green, bottom). The
transfer consists of a clock synchronization followed by a
token packet from the host, requesting information about
keyboard presses. Following the token, we see the key-
board’s response which contains a payload with the key
press information.
Field
value
Comment
SYNC
–
00000001
10010110
PID
IN
ADDR
0101100
0x0A
ENDP CRC5
1000
10001
0x01
–
Note that the two halves of the PID ﬁeld (1001 0110)
complement each other, signifying that the PID check
is correct and making it an incoming (IN) packet from
the PC to an attached peripheral with address ADDR at
endpoint ENDP. Next, as mentioned in Section 2, the to-
ken packet also contains a CRC5 ﬁeld (using the poly-
nomial X 5 + X 2 + X 0) of the ADDR and ENDP ﬁelds.
Indeed, performing long division of 010110 1000 over
100101 gives 10001, which is exactly the CRC5 ﬁeld of
the packet. Finally, at the right bottom corner of Fig-
ure 11 there is a clip of payload carried in the DATA
packet whose value is 00010000. Since USB data is
transmitted least signiﬁcant bit ﬁrst, the transmitted value
is 0x08. This scancode matches the “E” key on the key-
board indicating that this key was pressed.
4.2 Decoding Data Line Crosstalk Leakage
We now present the signal processing techniques we use