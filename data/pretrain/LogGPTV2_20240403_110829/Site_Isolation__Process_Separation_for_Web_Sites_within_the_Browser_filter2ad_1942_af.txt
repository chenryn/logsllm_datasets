project-zero/issues/detail?id=1528, 2018.
[29] HTML Living Standard: opaque origin. https://html.
spec.whatwg.org/multipage/origin.html#concept-
origin-opaque, Jan. 2019.
[30] L.-S. Huang, A. Moshchuk, H. J. Wang, S. Schecter, and
C. Jackson. Clickjacking: Attacks and Defenses. In USENIX
Security, 2012.
[31] S. Ioannidis and S. M. Bellovin. Building a secure web
In Proceedings of the FREENIX Track: 2001
browser.
USENIX Annual Technical Conference, 2001.
[32] S. Ioannidis, S. M. Bellovin, and J. M. Smith. Sub-operating
systems: a new approach to application security. In Proceed-
USENIX Association
28th USENIX Security Symposium    1675
ings of the 10th SIGOPS European workshop, 2002.
[49] Post-Spectre Threat Model Re-Think. https://chromium.
[33] Y. Jia, Z. L. Chua, H. Hu, S. Chen, P. Saxena, and Z. Liang.
”The Web/Local” Boundary Is Fuzzy: A Security Study of
Chrome’s Process-based Sandboxing. In CCS, 2016.
[34] P. Kocher, J. Horn, A. Fogh, D. Genkin, D. Gruss, W. Haas,
M. Hamburg, M. Lipp, S. Mangard, T. Prescher, M. Schwarz,
and Y. Yarom. Spectre Attacks: Exploiting Speculative Exe-
cution. In IEEE Symposium on Security and Privacy, 2019.
[35] M. Lipp, D. Gruss, M. Schwarz, D. Bidner, C. Maurice, and
S. Mangard. Practical Keystroke Timing Attacks in Sand-
boxed JavaScript. In ESORICS, 2017.
[36] M. Lipp, M. Schwarz, D. Gruss, T. Prescher, W. Haas,
A. Fogh, J. Horn, S. Mangard, P. Kocher, D. Genkin,
Y. Yarom, and M. Hamburg. Meltdown: Reading Kernel
Memory from User Space. In USENIX Security, 2018.
[37] R. McIlroy, J. Sevc´ık, T. Tebbi, B. L. Titzer, and T. Verwaest.
Spectre is here to stay: An analysis of side-channels and spec-
ulative execution. CoRR, abs/1902.05178, 2019.
[38] Memory Protection Keys for Userspace.
https://www.
kernel.org/doc/Documentation/x86/protection-
keys.txt, Jan. 2019.
[39] Microsoft Edge Team. Mitigating speculative execution
side-channel attacks in Microsoft Edge and Internet Ex-
plorer.
https://blogs.windows.com/msedgedev/
2018/01/03/speculative-execution-mitigations-
microsoft-edge-internet-explorer/, Jan. 2018.
[40] M. Minkin, D. Moghimi, M. Lipp, M. Schwarz, J. V. Bulck,
D. Genkin, D. Gruss, B. Sunar, F. Piessens, and Y. Yarom.
Fallout: Reading Kernel Writes From User Space. https:
//mdsattacks.com, 2019.
[41] M. Moroz and S. Glazunov. Analysis of UXSS exploits and
mitigations in Chromium. Technical report, Google, 2019.
https://ai.google/research/pubs/pub48028.
[42] A. Moshchuk, H. J. Wang, and Y. Liu. Content-based Isola-
tion: Rethinking Isolation Policy Design on Client Systems.
In CCS, 2013.
[43] N. Nguyen.
The Best Firefox Ever.
https:
//blog.mozilla.org/blog/2017/06/13/faster-
better-firefox/, 2017.
[44] R. Niwa.
Restricting cross-origin WindowProxy ac-
cess (Cross-Origin-Opener-Policy). https://github.com/
whatwg/html/issues/3740, June 2018.
[45] N. Oskov.
Site Isolation Benchmark Script.
https://
github.com/naskooskov/site-isolation-benchmark,
May 2019.
[46] OWASP. XSS (Cross Site Scripting) Prevention Cheat Sheet.
https://github.com/OWASP/CheatSheetSeries/
blob/master/cheatsheets/Cross_Site_Scripting_
Prevention_Cheat_Sheet.md, Feb. 2019.
[47] C. Palmer. Isolating Application-Deﬁned Principals. https:
//noncombatant.org/application-principals/, July
2018.
[48] F. Pizlo. What Spectre and Meltdown Mean For We-
bKit. https://webkit.org/blog/8048/what-spectre-
and-meltdown-mean-for-webkit/, Jan. 2018.
[50] C. Reis.
googlesource.com/chromium/src/+/master/docs/
security/side-channel-threat-model.md, May 2018.
Improving extension security with out-of-
process iframes. https://blog.chromium.org/2017/05/
improving-extension-security-with-out.html, May
2017.
[51] C. Reis, A. Barth, and C. Pizano. Browser Security: Lessons
from Google Chrome. Commun. ACM, 52(8):45–49, Aug.
2009.
[52] C. Reis and S. D. Gribble. Isolating Web Programs in Modern
Browser Architectures. In EuroSys, 2009.
[53] R. Rogowski, M. Morton, F. Li, F. Monrose, K. Z. Snow, and
M. Polychronakis. Revisiting Browser Security in the Mod-
ern Era: New Data-Only Attacks and Defenses. In IEEE Eu-
ropean Symposium on Security and Privacy, 2017.
[54] J. Ruderman.
The Same Origin Policy.
https:
//developer.mozilla.org/en-US/docs/Web/
Security/Same-origin_policy, 2019.
[55] J.
Schuh.
The
Final Countdown
for NPAPI.
https://blog.chromium.org/2014/11/the-final-
countdown-for-npapi.html, 2014.
[56] M. Schwarz, M. Lipp, and D. Gruss. JavaScript Zero: Real
JavaScript and Zero Side-Channel Attacks. In NDSS, 2018.
[57] M. Schwarz, M. Lipp, D. Moghimi, J. Van Bulck, J. Stecklina,
T. Prescher, and D. Gruss. ZombieLoad: Cross-Privilege-
Boundary Data Sampling. https://zombieloadattack.
com, 2019.
[58] M. Schwarz, C. Maurice, D. Gruss, and S. Mangard. Fantastic
Timers and Where to Find Them: High-Resolution Microar-
chitectural Attacks in JavaScript. In Financial Cryptography
and Data Security, Jan 2017.
[59] SharedArrayBuffer. https://developer.mozilla.org/
en-US/docs/Web/JavaScript/Reference/Global_
Objects/SharedArrayBuffer, 2019.
[60] Site Isolate PDFium. https://crbug.com/809614, Jan.
2019.
[61] P. Snyder, C. Taylor, and C. Kanich. Most Websites Don’t
Need to Vibrate: A Cost-Beneﬁt Approach to Improving
Browser Security. In CCS, 2017.
[62] S. Tang, S. T. King, and C. Grier. Secure Web Browsing with
the OP Web Browser. In IEEE Symposium on Security and
Privacy, 2008.
[63] S. Tang, H. Mai, and S. T. King. Trust and Protection in the
Illinois Browser Operating System. In OSDI, 2010.
[64] D. Topic. Moving to a Plugin-Free Web.
https:
//blogs.oracle.com/java-platform-group/moving-
to-a-plugin-free-web, Jan. 2016.
[65] Untrusted code mitigations.
https://v8.dev/docs/
untrusted-code-mitigations, Jan. 2018.
[66] S. van Schaik, A. Milburn, S.
¨Osterlund, P. Frigo,
G. Maisuradze, K. Razavi, H. Bos, and C. Giuffrida. RIDL:
Rogue In-ﬂight Data Load. In IEEE Symposium on Security
and Privacy, 2019.
1676    28th USENIX Security Symposium
USENIX Association
[67] L. Wagner. Mitigations landing for new class of timing attack.
https://blog.mozilla.org/security/2018/01/03/
mitigations-landing-new-class-timing-attack/,
Jan. 2018.
[68] H. J. Wang, C. Grier, A. Moshchuk, S. T. King, P. Choudhury,
and H. Venter. The Multi-Principal OS Construction of the
Gazelle Web Browser. In USENIX Security, 2009.
[69] Web Page Replay.
https://github.com/catapult-
project/catapult/blob/master/web_page_replay_
go/README.md, Sept. 2017.
https://trac.webkit.org/wiki/WebKit2,
[70] WebKit2.
July 2011.
[71] M. West.
Fetch Metadata Request Headers.
mikewest.github.io/sec-metadata, 2018.
https://
[72] M. West.
Proposal: Control over ‘document.domain‘.
https://github.com/w3c/webappsec-feature-
policy/issues/241, Nov. 2018.
[73] M. West.
Incrementally Better Cookies.
https:
//mikewest.github.io/cookie-incrementalism/
draft-west-cookie-incrementalism.html, May 2019.
[74] Window.sessionStorage.
https://developer.mozilla.
org/en-US/docs/Web/API/Window/sessionStorage,
2019.
[75] Y. Yarom and K. Falkner. FLUSH+RELOAD: A High Res-
In
olution, Low Noise, L3 Cache Side-Channel Attack.
USENIX Security, 2014.
[76] A. Zeigler.
IE8 and Loosely-Coupled IE (LCIE). https:
//blogs.msdn.microsoft.com/ie/2008/03/11/ie8-
and-loosely-coupled-ie-lcie/, 2008.
A Determining Site Principals
This appendix provides additional details on how we deﬁne
principals used in Site Isolation. Figure 5 compares principal
deﬁnitions in monolithic browsers, multi-process browsers
that isolate coarser-grained groups of principals, Site Isola-
tion, and Origin Isolation. Origin Isolation, where principals
are deﬁned as origins, offers stronger security guarantees at
the cost of breaking document.domain compatibility and
performance challenges due to a larger number of principals.
As noted in Section 3.1, computing site URL for most
HTTP(S) URLs is straightforward, but some web platform
features require special treatment. For example, frames may
be navigated to about:blank, a special URL which must in-
herit the security origin, and hence the site, from the frame
initiating the navigation. The web also supports nested
URLs such as blob: URLs. These URLs embed an ori-
gin; e.g., blob:http://example.com/UUID addresses an in-
memory blob of data controlled by the http://example.com
origin. In these cases, we extract the inner origin from the
URL and then convert it to a site.
A document may also embed a frame and specify
its HTML content
than from the net-
work, either using the srcdoc attribute (e.g., content">) or a data: URL
inline rather
data:text/html,content).
(e.g.,
Srcdoc frames inherit their creator’s origin and must stay
in the principal of their embedding document. In contrast,
data: URLs load in an opaque origin [29], which cannot
be accessed from any other origin. Browsers may choose
to load each data: URL in its own separate principal and
process, but our current implementation uses the creator’s
principal (which typically controls the content) to reduce
the number of processes required. Similarly, our current
implementation keeps same-site iframes with the sandbox
attribute, which typically load in an opaque origin, in the
principal of their URL’s site.
In practice, sites often use
sandboxed iframes for untrustworthy content that they wish
to isolate from the rest of the site; we discuss opportunities
for ﬁner-grained isolation within a site in Section 6.3.
Non-web Principals. Many browsers can load documents
that do not originate from the web, including content from
local ﬁles, extensions, browser UI pages, and error pages.
These forms of content utilize the web platform for render-
ing, so the browser must deﬁne principals for them. Each
local URL (e.g., file:///homes/foo/a.html) is typically
treated as its own origin by the browser, so each path could
use a separate principal and process. Our current implemen-
tation treats all local ﬁles as part of the same ﬁle principal
to reduce the process count, since they ultimately belong to
a local user. We may revise this to isolate each ﬁle in the
future, since this group of local ﬁles may contain less trust-
worthy pages saved from the web.
We assign content from extensions to a separate shared
principal, and we isolate all browser UI pages, such as set-
tings or download manager, from one another. These pages
require vastly different permissions and privileges, and a
compromise of one page (e.g., a buggy extension) should not
be able to take advantage of permissions granted to a more
powerful page (e.g., a download management page that can
download and open ﬁles). We do allow extensions to share
processes with each other to reduce the process count; thus,
Figure 5 (c) shows extensions in a shared principal. How-
ever, extensions never share processes with other types of
pages.
B Features Updated to Support Out-of-
process iframes
This appendix lists a subset of Chrome features that needed
to be updated to support out-of-process iframes, beyond
those discussed in Section 3.4.
• Accessibility (e.g., screen readers).
• Developer tools.
• Drag and drop.
• Extensions (e.g., injecting scripts into frames of a page).
• Find-in-page.
USENIX Association
28th USENIX Security Symposium    1677
Figure 5: Evolution of security principals in browser architectures. Compared to prior browser architectures, Site Isolation deﬁnes
ﬁner-grained principals that correspond to sites. Origin Isolation (d) further reﬁnes sites to origins and is the most desirable principal model
in the long term, but backward compatibility and performance challenges currently limit its practicality.
* In pre-Site-Isolation browsers (b), extensions were isolated in higher-privileged processes, but with a caveat: extensions could embed web
URL iframes which would stay in the extension’s process. With Site Isolation (c), process sharing across the web/extension boundary is no
longer possible, though extensions may still share a process with one another.
• Focus (e.g., tracking focused page and frame, focus
traversal when pressing Tab).
• Form autoﬁll.
• Fullscreen.
• IME (Input Method Editor).
• Input gestures.
• JavaScript dialogs.
• Mixed content handling.
• Multiple monitor and device scale factor support.
• Password manager.
• Pointer Lock API.
• Printing.
• Task manager.
• Resource optimizations (e.g., deprioritizing offscreen
content).
• Malware and phishing detection.
• Save page to disk.
• Screen Orientation API.
• Scroll bubbling.
• Session restore.
• Spellcheck.
• Tooltips.
• Unresponsive renderer detector and dialog.
• User gesture tracking.
• View source.
• Visibility APIs.
• Webdriver automation.
• Zoom.
C Compromised Renderer Enforcements
This appendix lists the current places that privileged browser
components in Chrome (version 76) limit the behavior of
a renderer process based on its associated site, to mitigate
compromised renderers.
• Cookie
HttpOnly cookies).
reads
and writes
(document.cookie,
• Cross-Origin Read Blocking implementation [20].
• Cross-Origin-Resource-Policy blocking [21].
• Frame embedding (X-Frame-Options).
• JavaScript code cache.
• Messaging (postMessage, BroadcastChannel).
• Password manager, Credential Management API.
• Storage
(localStorage,
sessionStorage,
indexedDB, blob storage, Cache API, WebSQL).
• Preventing web page access to file:// URLs.
• Web permissions (e.g., geolocation, camera).
We expect the following enforcements to be possible as
well, with additional implementation effort.
• Address bar origin.
• Custom HTTP headers requiring CORS.
• Feature Policy.
• iframe sandbox behaviors.
• Origin Header and CORS implementation.
• SameSite cookies.
• Sec-Fetch-Site [71].
• User gestures.
1678    28th USENIX Security Symposium
USENIX Association
All content Web sites,Internal pages,Extensions, ...Web contenthttp://example.com,http://foo.blog.com,http://bar.blog.com,https://bank.com, ...User principal Settings, downloads, ...http://example.comhttps://blog.comhttps://foo.blog.com,https://bar.blog.comhttps://bank.comSettings pageDownloads pageExtensions*ad blocker,pw manager, ...Extensions*Ad blocker, pw managerhttp://example.comhttps://foo.blog.comhttps://bank.comhttps://bar.blog.comLabel= Security Principal(a) Monolithic(b) Multi-process(c) Site Isolation(d) Origin IsolationExtensionad blockerExtensionpw managerSettings pageDownloads page