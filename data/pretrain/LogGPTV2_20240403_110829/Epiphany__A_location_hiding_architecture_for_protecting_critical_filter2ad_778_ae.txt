F
#
 0
 350
 160000
 140000
Data Transfer Delay
Setup Delay
#of Failed Transfers
)
s
d
n
o
c
e
s
 120000
 100000
i
l
l
i
m
(
y
a
e
D
l
 80000
 60000
 40000
 20000
 0
 0
 50
 100
 150
 200
 250
 300
Attacker combined request rate (per second)
 30
 25
 20
 15
 10
 5
)
0
5
f
o
t
u
o
(
s
r
e
f
s
n
a
r
T
d
e
l
i
a
F
#
 0
 350
Fig. 9. Setup, data transfer times of a legitimate client with 1 SP, 1 DP and
an increasing attacker rate. A total of 15 attackers are used, while the setup
rate limit is ﬁxed at 50 rps.
Fig. 10. Setup, data transfer times of a legitimate client with a single proxy
acting as both SP, DP. The combined rate limit at the proxy is set to 50 rps.
ﬂooding attacks, which would render that SP ineffective.
However, ﬂooding attacks are easier to detect and not the focus
of this experiment.
2) Setup & Data Transfer Delays: We examine the attack
rates at which a legitimate client C is likely to reach D within
a reasonable amount of time. Studies on Internet users ﬁnd
that most users wait no longer than 3-4 seconds to reach a
service [3], but since we are protecting a critical service, we
assume our users are willing to wait in the order of a minute.
Therefore, C will attempt to reach D within 60 seconds, if
it cannot, we declare that run as a failure. To measure setup
delay, we compute the time from when C starts requesting to
the time it receives a response.
Figure 9 shows the setup delays experienced by C at
different attacker rates. On average, the setup delay is below
10 seconds, while the error bars show that in some cases it may
be longer. The ﬁgure also shows the number of failures (out
of 50 runs) for each attack rate; as the rate increases failures
also increase dramatically. For instance, at ra = 300, although
setup delay is close to 10 seconds, C failed to reach D 30 out
of the 50 runs. In summary, with a moderately high request
rate, C has a high chance of success even when attackers are
sending at 5 times the request rate-limit capacity, and moreover
C can expect to succeed within 10 seconds after it initiates a
transaction.
Figure 9 also shows the data transfer delay. The average
delay is 10 seconds (∵ 1000pkts
100dps = 10), and shows no
discernible effect due to the attackers since C is using a
different node to talk to D. However, the error bars show that
in some cases, the data transfer delays were over a minute.
For instance, at ra = 90, the max data transfer time for C
was close to 70 seconds. On careful inspection of our logs,
we found that a node application (for D) stalled for most of
this duration. We found similar events in other cases as well.
Although we are unable to pinpoint the exact cause of this
problem, we believe it is perhaps due to the high load on
PlanetLab hosts (40 to 60 active slices on our nodes).
In comparison, Figure 10 shows the data transfer delays
when a single proxy acts as both an SP and a DP (such is
the case in SOS [11]). Here, D sets a single rate limit of
50 packets per second at the proxy. The proxy accepts either
requests or data packets and forwards them D, but does not
exceed the rate-limit. In other words, if C is attempting to send
50 = 20
1000 data packets through this proxy, it will take 1000
seconds on average if there are no attackers present. However,
as the attackers send more requests, the proxy will start to
drop requests and data packets indiscriminately and the data
transfer delay for the legitimate client increases. For example,
in Figure 10 when ra = 30, the data transfer delay for C is a
little over 20 seconds on average (out of 50 trials), but as the
attacking rate increases, the data transfer delay also increases
dramatically.
In summary, separating the proxies helps prevent collateral
damage to legitimate trafﬁc in the presence of attackers, while
using the same proxy for both data and setup causes collateral
damage.
VI. DEPLOYMENT
Deploying Epiphany on the Internet requires availability
of anycast and possibly software upgrades to routers. Other
components such as Epiphany proxies are lightweight (they
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:17:56 UTC from IEEE Xplore.  Restrictions apply. 
do not hold user authentication information or form overlays)
and therefore we expect them to be easy to deploy on user
machines. As a starting point, Epiphany DPs could be recruited
from CDNs [3] or cloud services, which have a large presence
in the Internet. Though an attacker could learn about the CDN
nodes separately, D could use a few private DPs for important
clients but use public CDN nodes for less trusted clients. SPs
on the other hand require support from routing infrastructure
to implement anycast. Locally scoping the anycast announce-
ments relieves burden on global routing space. In addition,
SPs could be deployed on peer to peer (p2p) networks that are
typically located in edge subnets. [27] describes an application
level mechanism using p2p networks to make anycast scalable;
A few “concentrator” SPs that have the actual hidden path to
D may be deployed in each AS and the p2p SPs could be made
to forward requests to these concentrators (concentrators only
accept requests from the p2p nodes).
Second, although upgrading host software may be non-
trivial (assuming Epiphany needs to be integrated with existing
applications such as browsers), we expect critical service users
are willing to upgrade their application software. Note that in
order for S to communicate with D 1) it needs to send a request
to a host but specify a different service name, and 2) it needs to
go to a different host to receive the service. Protocols such as
HTTP already support these features (albeit without the added
security we specify). For instance, an HTTP client can send
an HTTP GET request to the SP, but specify D’s service name
in the HOST ﬁeld of the request. The hidden web-server can
then send an HTTP redirect to point the client to the DP (but
DP’s address will be in the clear). Critical services operating
over HTTP impose few software changes to the source, but
others (FTP, SSH, etc) may require more changes.
Finally, constructing hidden paths requires support from
routers. This includes maintaining the EFIB table and for-
warding Epiphany packets. However, routers already have
most of the enabling functions, such as maintaining Multicast
forwarding tables and IP forwarding, so the routers need a
simple software update. In addition, tunneling could be used
to work around non-Epiphany aware routers. Note that only
the routers between D and proxies need to be updated. So,
as an incremental deployment solution, we could use the
concentrator SP idea to DPs as well.
VII. RELATED WORK
Epiphany belongs in the general class of location hiding
is more similar to TOR
architectures [10]–[15], [28], but
hidden services [10], [14], [15].
TOR uses an overlay based anonymization network for its
hidden paths, while Epiphany uses the underlying network
infrastructure to hide the service (Epiphany does not provide
anonymity). However, since the intermediate nodes in TOR
paths operate on enduser hosts, an attacker could become a
predecessor to the hidden server and use timing analysis to
expose the service address [14]. To remedy this situation entry
guard nodes were proposed in [14] as a security measure. In
Epiphany, however, the border routers near the hidden network
know about D, but we rely on the service operators to keep this
information secret. TOR hidden servers use introduction points
for setup (similar to SPs), which a client contacts to reach the
hidden server and speciﬁes a rendezvous point (similar to DPs)
for continuing with rest of the communication. In contrast, the
service in Epiphany assigns the DPs, because if it lets clients
specify DPs, then an attacker could exploit this to make D
build hidden paths to colluding DPs and expend resources
removing them. The introduction points in TOR could be
targeted by an attacker. Overlier et al [15] propose valet
services to not only hide these nodes, but also the service name
itself. A client receives a ticket that has contact information
about an intermediate valet node; only the valet node knows
about an introduction point. Using this layer of indirection,
TOR protects its introduction points. Epiphany, on the other
hand has numerous anycast SPs, and makes no attempts to
hide the service name or that the client is trying to reach
the service. Finally, TOR uses a separate directory service
to provide information about its nodes. A strong adversary
could overwhelm the directory servers to prevent clients from
reaching the hidden server. Epiphany leverages DNS for its
proxy discovery, which could be made robust to attacks.
Secure Overlay Services (SOS) [11] (and its generalized
cousin Mayday [12]) limits access to a service through a set
of secret servlets (proxies). A ﬁltering perimeter is used to
remove all trafﬁc not belonging to the servlets from directly
reaching the service. In SOS, all proxies are public, they
authenticate clients, and the same proxy is used for both setup
and data. SOS also uses an additional layer of indirection to
protect the identities of its secret servlets and changes them
if they are exposed. In comparison, not all Epiphany proxies
are public and they do not authenticate clients. We believe
distributing authentication information to all proxies presents
a different set of challenges. Epiphany clients simply send
requests and gains further access, which makes the proxies
lightweight and more deployable. Also, Epiphany separates
its proxies so that attacks on its SPs do not affect clients
talking to the service via the DPs. If an attacker targets some
proxies in SOS, clients using those proxies will be affected.
However, SOS has one beneﬁt over Epiphany, an SOS client
can freely move to a different proxy if its lost to an attack.
Proxy failures in Epiphany (such as an SP failing) may cause
brief interruptions to clients.
In i3 [13], [28], hosts do not use IP addresses, but rather
communicate using logical identiﬁers. An overlay is respon-
sible for associating the identiﬁers with the actual host IP
addresses and forwarding the trafﬁc. However, i3 trusts its
overlay to keep the host addresses secret. If an attacker is able
to enter this network, he may learn about the real IP address
of a server and target it directly.
In general, overlay based location hiding approaches must
deal with penetration attacks [17] in which an attacker progres-
sively compromises a series of intermediate nodes to reveal the
service address. [17] points out that reconﬁguration, proxy
depth and host diversity are important factors in combating
these attacks. Unlike overlay based approaches, Epiphany
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:17:56 UTC from IEEE Xplore.  Restrictions apply. 
restricting one attacker to the same SP as a legitimate client.
In future work we plan to evaluate more strategies for proxy
placement and assigning proxy tiers to further isolate attackers.
We also wish to explore the idea of using p2p networks for
SPs and DPs.
REFERENCES
[1] Arbor Networks, “Worldwide infrastructure security report – Volume
VI,” http://www.arbornetworks.com/report, 2010.
[2] UltraDNS. Siteprotect system. http://www.ultradns.com/ddos-protection/
siteprotect/how-it-works.
[3] “Akamai technologies,” http://www.akamai.com.
[4] S. Savage, D. Wetherall, A. Karlin, and T. Anderson, “Practical network
support for IP traceback,” in ACM SIGCOMM, 2000.
[5] R. Mahajan, S. M. Bellovin, S. Floyd, J. Ioannidis, V. Paxson, and
S. Shenker, “Controlling high bandwidth aggregates in the network,”
ACM SIGCOMM, 2002.
[6] X. Liu, X. Yang, and Y. Lu, “To ﬁlter or to authorize: Network-layer
DoS defense against multimillion-node botnets,” in SIGCOMM, 2008.
[7] A. Yaar, A. Perrig, and D. Song, “Siff: A stateless internet ﬂow ﬁlter to
mitigate DDoS ﬂooding attacks,” in IEEE SSP, 2004.
[8] X. Yang, D. Wetherall, and T. Anderson, “A DoS-limiting network
architecture,” in ACM SIGCOMM, 2005.
[9] B. Parno, D. Wendlandt, E. Shi, A. Perrig, B. Maggs, and Y.-C.
Hu, “Portcullis: Protecting connection setup from denial-of-capability
attacks,” in ACM SIGCOMM, 2007.
[10] R. Dingledine, N. Mathewson, and P. Syverson, “Tor: The second-
generation onion router,” in USENIX, 2004.
[11] A. D. Keromytis, V. Misra, and D. Rubenstein, “SOS: Secure overlay
services,” in ACM SIGCOMM, 2002.
[12] D. G. Andersen, “Mayday: Distributed ﬁltering for Internet services,” in
USENIX USITS, 2003.
[13] I. Stoica, D. Adkins, S. Zhuang, S. Shenker, and S. Surana, “Internet
indirection infrastructure,” IEEE/ACM TON, 2004.
[14] L. Overlier and P. Syverson, “Locating hidden servers,” IEEE SSP, 2006.
[15] L. Øverlier and P. Syverson, “Valet services: Improving hidden servers
with a personal touch,” Privacy Enhancing Technologies, 2006.
[16] K. Argyraki and D. Cheriton, “Network capabilities: the good, the bad
and the ugly,” in HotNets-IV, November 2005.
[17] J. Wang and A. A. Chien, “Understanding when location-hiding using
overlay networks is feasible,” Computer Networks, 2006.
[18] R. Naraine, “ICANN: Anycast saved DNS root servers during attack,”
”http://blogs.zdnet.com/security/?p=118”.
[19] J. Abley and K. Lindqvist, “Operation of Anycast Services,” RFC
4786. [Online]. Available: http://www.ietf.org/rfc/rfc4786.txt
[20] C. M. Patrick, S. T. J., F. Sidney, J. Jeff, W. Rhiannon, D. S. Markus,
and K. Joseph, “Using uncleanliness to predict future botnet addresses,”
IMC, 2007.
[21] X. Wang and M. K. Reiter, “Defending against denial-of-service attacks
with puzzle auctions,” in IEEE SSP, May 2003.
[22] M. Walﬁsh, M. Vutukuru, H. Balakrishnan, D. Karger, and S. Shenker,
“DDoS defense by offense,” in ACM SIGCOMM, 2006.
[23] A. Yaar, A. Perrig, and D. Song, “Pi: A path identiﬁcation mechanism
to defend against DDoS attacks,” in IEEE SSP, 2003.
[24] C. Dixon, T. Anderson, and A. Krishnamurthy, “Phalanx: Withstanding
multimillion-node botnets,” in NSDI, 2008.
[25] CAIDA. The internet topology data kit – 2011-04. [Online]. Available:
http://www.caida.org/data/active/internet-topology-data-kit
[26] H. Holbrook and B. Cain, “Source-Speciﬁc Multicast for IP,” RFC
4607. [Online]. Available: http://www.ietf.org/rfc/rfc4607.txt
[27] H. Ballani and P. Francis, “Towards a global IP anycast service,”
hidden paths use routers, and hence is only as strong as the
security of these devices.
Network authenticated path panning (SNAPP) [29] de-
scribes a mechanism by which hidden paths could be con-
structed using less state at routers. In this approach, routers
encrypt the upstream and downstream path information and
encode that information in the packets to aid packet forward-
ing. However, this approach requires changing the IP packet
structure and forwarding semantics at routers. While SNAPP
can provide sender anonymity, its main purpose is to override
routing protocol decisions.
like Epiphany,
Epiphany also leverages some ideas from non-location
hiding based approaches. Content distribution networks such
as Akamai CDN have distributed replicated instances of the
service to handle large trafﬁc volumes. These are a resource
multiplication type defense. But managing the replicas is
difﬁcult and requires dedicated management systems. More-
over, these proxies may not be lightweight like Epiphany.
Phalanx [24], uses proxies to present a wide front end to
a service. It also has an open model
i.e.,
clients send requests to gain further access, and its proxies
are lightweight and easy to deploy. Network capabilities [7],
[8] also suffer from attacks on the request channel (called
Denial of Capability attacks). Portcullis [9] proposes a cryp-
tographic puzzles based solution to protect connection setup.
However, in Portcullis intermediate routers verify and store
puzzle solutions. Epiphany also uses cryptographic puzzles,
but the interaction is only between a local anycast SP and
a client. Since anycast SPs make network regions small, a
legitimate client will only need to compete with a relatively
small number of bots. Path Identiﬁer (Pi) [23] adds identiﬁable
markers to packets to assist ﬁltering if an attacker is using
source address spooﬁng. We use Pi in Epiphany to identify
misbehaving proxies. Traceback [4] attempts to reconstruct
the path taken by spoofed attacker trafﬁc. Epiphany could use,
but does not depend on this approach to identify misbehaving
proxies. Filtering based approaches [5], [6], [30] attempt to
remove offending trafﬁc before it causes damage. Unlike
these approaches, Epiphany’s main defense is that the attacker
cannot aim its trafﬁc at a speciﬁc location.
VIII. CONCLUSIONS
In this paper, we developed a location hiding architecture
for defending against DDoS attacks on critical services. While
it relies on proxies, Epiphany has some key properties: 1) it
completely hides the location of the service from all attackers
and proxies, 2) dilutes attackers by using IP Anycast, and
3) separates proxies for initial setup from data transfer and
employs a tiered proxy classiﬁcation, only revealing trusted
data proxies to proven clients. Using a prototype implemen-
tation on PlanetLab we show that separating the proxies
prevents attackers from disrupting legitimate clients. We also
study the effectiveness of anycast SPs using Internet scale
simulations. Our analysis shows that a small percentage of
SPs are sufﬁcient to dilute the attackers. Increasing the number
of SPs by a small degree effectively isolates attackers, often
SIGCOMM, 2005.
[28] K. Lakshminarayanan, D. Adkins, A. Perrig, and I. Stoica, “Taming IP
packet ﬂooding attacks,” SIGCOMM CCR, 2004.
[29] B. Parno, A. Perrig, and D. Andersen, “SNAPP: Stateless network-
authenticated path pinning,” in ASIACCS, 2008.
[30] K. Argyraki and D. R. Cheriton, “Active Internet trafﬁc ﬁltering: Real
time response to denial-of-service attacks,” in USENIX, 2005.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:17:56 UTC from IEEE Xplore.  Restrictions apply.