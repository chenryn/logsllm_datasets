::: titlepage
# []{#setting-up-pcp_monitoring-and-managing-system-status-and-performance.html#overview-of-pcp_setting-up-pcp}PCP 概述 {.title}
:::
您可以使用 Python、Perl、C++ 和 C 接口添加性能指标。分析工具可以直接使用
Python、C++、C 客户端 API，并通过 JSON 界面探索所有可用的性能数据。
您可以通过将实时结果与存档数据进行比较来分析数据模型。
PCP 的功能：
::: itemizedlist
-   轻量级分布式架构，在复杂的系统集中分析过程中非常有用。
-   它允许监控和管理实时数据。
-   它允许记录和检索历史数据。
:::
PCP 包含以下组件：
::: itemizedlist
-   Performance Metric Collector
    Daemon(`pmcd`{.literal})从已安装的性能指标域代理(`pmda`{.literal})收集性能数据。[**PMDA**]{.strong}
    可以单独加载或卸载在系统上，并由同一主机上的 [**PMCD**]{.strong}
    控制。
-   `pminfo`{.literal} 或 `pmstat`{.literal}
    等各种客户端工具可以检索、显示、存档和处理同一主机或网络上的此数据。
-   `pcp`{.literal} 软件包提供命令行工具和底层功能。
-   `pcp-gui`{.literal} 软件包提供了图形应用程序。执行
    `dnf install pcp-gui`{.literal} ``{=html} 命令来安装 pcp-gui
    软件包。如需更多信息，请参阅使用 [PCP Charts 应用程序进行 Visual
    tracing PCP
    日志归档](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9-beta/html-single/monitoring_and_managing_system_status_and_performance/monitoring-performance-with-performance-co-pilot_monitoring-and-managing-system-status-and-performance#visually-tracing-pcp-log-archives-with-pcp-charts_monitoring-performance-with-performance-co-pilot){.link}。
:::
::: itemizedlist
**其他资源**
-   `pcp(1)`{.literal} 手册页
-   `/usr/share/doc/pcp-doc/`{.literal} directory
-   [PCP
    分发的工具](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9-beta/html-single/monitoring_and_managing_system_status_and_performance/setting-up-pcp_monitoring-and-managing-system-status-and-performance#tools-distributed-with-pcp_setting-up-pcp){.link}
-   [Performance
    Co-Pilot(PCP)文章、解决方案、教程以及红帽客户门户网站中的白皮书的索引](https://access.redhat.com/articles/1145953){.link}
-   [PCP
    工具与旧工具红帽知识库文章的并排比较](https://access.redhat.com/articles/2372811){.link}
-   [PCP 上游文档](http://pcp.io/documentation.html){.link}
:::
:::
::: section
::: titlepage
# []{#setting-up-pcp_monitoring-and-managing-system-status-and-performance.html#installing-and-enabling-pcp_setting-up-pcp}安装并启用 PCP {.title}
:::
要开始使用 PCP，请安装所有必需的软件包并启用 PCP 监控服务。
这个步骤描述了如何使用 `pcp`{.literal} 软件包安装 PCP。如果要自动化 PCP
安装，请使用 `pcp-zeroconf`{.literal} 软件包安装它。有关使用
`pcp-zeroconf`{.literal} 安装 PCP 的更多信息，请参阅[使用 pcp-zeroconf
设置
PCP](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9-beta/html-single/monitoring_and_managing_system_status_and_performance/setting-up-graphical-representation-of-pcp-metrics_monitoring-and-managing-system-status-and-performance#setting-up-pcp-with-pcp-zeroconf_setting-up-graphical-representation-of-pcp-metrics){.link}。
::: orderedlist
**步骤**
1.  安装 `pcp`{.literal} 软件包：
    ``` screen
    # dnf install pcp
    ```
2.  在主机机器上启用并启动 `pmcd`{.literal} 服务：
    ``` screen
    # systemctl enable pmcd
    # systemctl start pmcd
    ```
:::
::: itemizedlist
**验证步骤**
-   验证 `pmcd`{.literal} 进程是否在主机上运行：
    ``` screen
    # pcp
    Performance Co-Pilot configuration on workstation:
    platform: Linux workstation 4.18.0-80.el8.x86_64 #1 SMP Wed Mar 13 12:02:46 UTC 2019 x86_64
    hardware: 12 cpus, 2 disks, 1 node, 36023MB RAM
    timezone: CEST-2
    services: pmcd
    pmcd: Version 4.3.0-1, 8 agents
    pmda: root pmcd proc xfs linux mmv kvm jbd2
    ```
:::
::: itemizedlist
**其他资源**
-   `pmcd(1)`{.literal} man page
-   [PCP
    分发的工具](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9-beta/html-single/monitoring_and_managing_system_status_and_performance/setting-up-pcp_monitoring-and-managing-system-status-and-performance#tools-distributed-with-pcp_setting-up-pcp){.link}
:::
:::
::: section
::: titlepage
# []{#setting-up-pcp_monitoring-and-managing-system-status-and-performance.html#deploying-a-minimal-pcp-setup_setting-up-pcp}部署最小 PCP 设置 {.title}
:::
PCP 最小设置收集 Red Hat Enterprise Linux
的性能统计信息。设置涉及在产品系统中添加收集数据以便进一步分析所需的最小软件包数量。
您可以使用各种 PCP 工具分析生成的 `tar.gz`{.literal} 文件和
`pmlogger`{.literal} 输出存档，并将它们与其他性能信息源进行比较。
::: itemizedlist
**先决条件**
-   已安装 PCP。如需更多信息，请参阅[安装并启用
    PCP](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9-beta/html-single/monitoring_and_managing_system_status_and_performance/setting-up-pcp_monitoring-and-managing-system-status-and-performance#installing-and-enabling-pcp_setting-up-pcp){.link}。
:::
::: orderedlist
**步骤**
1.  更新 `pmlogger`{.literal} 配置：
    ``` screen
    # pmlogconf -r /var/lib/pcp/config/pmlogger/config.default
    ```
2.  启动 `pmcd`{.literal} 和 `pmlogger`{.literal} 服务：
    ``` screen
    # systemctl start pmcd.service
    # systemctl start pmlogger.service
    ```
3.  执行所需的操作来记录性能数据。
4.  停止 `pmcd`{.literal} 和 `pmlogger`{.literal} 服务：
    ``` screen
    # systemctl stop pmcd.service
    # systemctl stop pmlogger.service
    ```
5.  保存输出并将其保存到基于主机名和当前日期和时间的 `tar.gz`{.literal}
    文件中：
    ``` screen
    # cd /var/log/pcp/pmlogger/
    # tar -czf $(hostname).$(date +%F-%Hh%M).pcp.tar.gz $(hostname)
    ```
    使用 PCP 工具提取此文件并分析数据。
:::
::: itemizedlist
**其他资源**
-   `pmlogconf(1`{.literal} )、`pmlogger(1)`{.literal} 和
    `pmcd(1)`{.literal} man page
-   [PCP
    分发的工具](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9-beta/html-single/monitoring_and_managing_system_status_and_performance/setting-up-pcp_monitoring-and-managing-system-status-and-performance#tools-distributed-with-pcp_setting-up-pcp){.link}
-   [使用 PCP
    分发的系统服务](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9-beta/html-single/monitoring_and_managing_system_status_and_performance/performance-analysis-of-xfs-with-pcp_monitoring-and-managing-system-status-and-performance#system-services-distributed-with-pcp_setting-up-pcp){.link}
:::
:::
::: section
::: titlepage
# []{#setting-up-pcp_monitoring-and-managing-system-status-and-performance.html#system-services-distributed-with-pcp_setting-up-pcp}使用 PCP 分发的系统服务 {.title}
:::
下表描述了各种系统服务的角色，这些服务随 PCP 一起分发。
::: table
[]{#setting-up-pcp_monitoring-and-managing-system-status-and-performance.html#idm140048821665104}
**表 4.1. PCP 分发的系统服务的角色**
::: table-contents
  ---------------------- --------------------------------------------------------
  名称                   描述
  `pmcd`{.literal}       Performance Metric Collector Daemon(PMCD)。
  `pmie`{.literal}       性能指标对引擎.
  `pmlogger`{.literal}   性能指标日志记录器。
  `pmproxy`{.literal}    实时和历史性能指标代理、时间序列查询和 REST API 服务。
  ---------------------- --------------------------------------------------------
:::
:::
:::
::: section
::: titlepage
# []{#setting-up-pcp_monitoring-and-managing-system-status-and-performance.html#tools-distributed-with-pcp_setting-up-pcp}PCP 分发的工具 {.title}
:::
下表描述了使用 PCP 分发的各种工具。
::: table
[]{#setting-up-pcp_monitoring-and-managing-system-status-and-performance.html#idm140048847873952}
**表 4.2. 使用 PCP 分发的工具**
::: table-contents
  -------------------------- -------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  名称                       描述
  `pcp`{.literal}            显示 Performance Co-Pilot 安装的当前状态。
  `pcp-atop`{.literal}       从性能角度显示最重要的硬件资源的系统级别：CPU、内存、磁盘和网络。
  `pcp-atopsar`{.literal}    在各种系统资源使用率上生成系统级活动报告。这个报告从之前使用 pmlogger 或 pcp-atop 的 -w 选项记录的原始日志文件生成。
  `pcp-dmcache`{.literal}    显示有关配置的设备映射缓存目标的信息，例如：设备 IOP、缓存和元数据设备利用率，以及在每次缓存设备的读写率和比率。
  `pcp-dstat`{.literal}      一次显示一个系统的指标。要显示多个系统的指标，请使用 `--host`{.literal} 选项。
  `pcp-free`{.literal}       报告系统中的空闲和已用内存。
  `pcp-htop`{.literal}       以类似于 `top`{.literal} 命令的方式显示系统上运行的所有进程及其命令行参数，但允许您使用鼠标进行垂直和水平滚动。您还可以以树形格式查看进程，并同时对多个进程选择和实施。
  `pcp-ipcs`{.literal}       显示调用进程具有读取访问权限的进程间通信(IPC)功能的信息。
  `pcp-numastat`{.literal}   显示内核内存分配器的 NUMA 分配统计信息。
  `pcp-pidstat`{.literal}    显示系统中运行的独立任务或进程的信息，例如：CPU 百分比、内存和堆栈使用、调度和优先级。报告默认情况下本地主机的实时数据。
  `pcp-ss`{.literal}         显示 pmdasockets 性能指标域代理(PMDA)收集的套接字统计信息。
  `pcp-uptime`{.literal}     显示系统正在运行的时长，当前登录的用户数量，以及过去 1、5 和 15 分钟的系统负载平均值。
  `pcp-vmstat`{.literal}     每 5 秒提供高级系统性能概述。显示有关进程、内存、分页、块 IO、 traps 和 CPU 活动的信息。
  `pmchart`{.literal}        通过 Performance Co-Pilot 的功能来绘制性能指标值。
  `pmclient`{.literal}       使用性能指标应用程序编程接口(PMAPI)显示高级系统性能指标。
  `pmconfig`{.literal}       显示配置参数的值。
  `pmdbg`{.literal}          显示可用的 Performance Co-Pilot 调试控制标记及其值。
  `pmdiff`{.literal}         比较一个或两个存档（给定时间窗内）中每个指标的平均值，而在搜索性能回归时可能会感兴趣的更改。
  `pmdumplog`{.literal}      显示 Performance Co-Pilot 归档文件中的控制、元数据、索引和状态信息。
  `pmdumptext`{.literal}     输出从 Performance Co-Pilot 归档收集的性能指标值。
  `pmerr`{.literal}          显示可用的 Performance Co-Pilot 错误代码及其对应的错误消息。
  `pmfind`{.literal}         在网络上查找 PCP 服务。
  `pmie`{.literal}           定期评估一组算术、逻辑和规则表达式的 inference 引擎。指标可以从 live 系统或 Performance Co-Pilot 归档文件收集。
  `pmieconf`{.literal}       显示或设置可配置的 pmie 变量。
  `pmiectl`{.literal}        管理 pmie 的非主要实例。
  `pminfo`{.literal}         显示性能指标的相关信息。指标可以从 live 系统或 Performance Co-Pilot 归档文件收集。
  `pmiostat`{.literal}       报告 SCSI 设备的 I/O 统计信息（默认情况下）或者设备映射器设备（使用 -x dm 选项）。
  `pmlc`{.literal}           交互式地配置活跃的 pmlogger 实例。
  `pmlogcheck`{.literal}     在 Performance Co-Pilot 归档文件中标识无效数据。
  `pmlogconf`{.literal}      创建并修改 pmlogger 配置文件。
  `pmlogctl`{.literal}       管理 pmlogger 的非主要实例。
  `pmloglabel`{.literal}     验证、修改或修复 Performance Co-Pilot 归档文件的标签。
  `pmlogsummary`{.literal}   计算 Performance Co-Pilot 归档文件中存储性能指标的统计信息。
  `pmprobe`{.literal}        决定性能指标的可用性。
  `pmrep`{.literal}          报告选定、易于自定义、性能指标值。
  `pmsocks`{.literal}        允许通过防火墙访问 Performance Co-Pilot 主机。
  `pmstat`{.literal}         定期显示系统性能的简短摘要。
  `pmstore`{.literal}        修改性能指标的值。
  `pmtrace`{.literal}        提供到 trace PMDA 的命令行界面。
  `pmval`{.literal}          显示性能指标的当前值。
  -------------------------- -------------------------------------------------------------------------------------------------------------------------------------------------------------------------
:::
:::
:::
::: section
::: titlepage
# []{#setting-up-pcp_monitoring-and-managing-system-status-and-performance.html#pcp-deployment-architectures_setting-up-pcp}PCP 部署架构 {.title}
:::
Performance
Co-Pilot(PCP)提供了多个选项来完成高级设置。在各种可能构架中，本节论述了如何根据红帽设置的建议部署、调整因素和配置选项扩展
PCP 部署。
PCP 根据 PCP 部署规模支持多个部署架构。
可用的扩展部署设置变体：
::: variablelist
[`Localhost`{.literal}]{.term}
:   每个服务在被监控的机器上本地运行。当您在没有配置更改的情况下启动服务时，这是默认的部署。在这种情况下无法对单个节点进行扩展。
    默认情况下，Redis 的部署设置是单机 localhost。但是，Red Hat Redis
    可以选择以高可用性和高度扩展的集群执行，其中数据在多个主机之间共享。另一个可行选择是在云中部署
    Redis 集群，或者从云供应商中使用受管 Redis 集群。
[`Decentralized`{.literal}]{.term}
:   localhost 和分散设置之间的唯一区别是集中式 Redis
    服务。在这种模型中，主机在每个被监控的主机上执行
    `pmlogger`{.literal} 服务，并从本地 `pmcd`{.literal}
    实例检索指标。然后本地 `pmproxy`{.literal} 服务将性能指标导出到中央
    Redis 实例。
    ::: figure
    []{#setting-up-pcp_monitoring-and-managing-system-status-and-performance.html#idm140048817463344}
    **图 4.1. 分散日志记录**
    ::: figure-contents
    ::: mediaobject
    ![分散日志记录](images/173_RHEL_instaling_PCP_0721_decentralized.png)
    :::
    :::
    :::
[`集中式日志记录 - pmlogger 场`{.literal}]{.term}
:   当被监控主机的资源使用情况受限时，另一个部署选项是一个
    `pmlogger`{.literal}
    场，也称为集中式日志记录。在本设置中，单个日志记录器主机执行多个
    `pmlogger`{.literal} 进程，各自配置为从不同的远程 `pmcd`{.literal}
    主机检索性能指标。集中式日志记录器主机也被配置为执行
    `pmproxy`{.literal} 服务，该服务发现生成的 PCP
    存档日志并将指标数据加载到 Redis 实例中。
    ::: figure
    []{#setting-up-pcp_monitoring-and-managing-system-status-and-performance.html#idm140048789567776}
    **图 4.2. 集中式日志记录 - pmlogger 场**
    ::: figure-contents
    ::: mediaobject
    ![集中式日志记录 - pmlogger
    场](images/173_RHEL_instaling_PCP_0721_centralized.png)
    :::
    :::
    :::
[`联邦 - 对 pmlogger farms`{.literal}]{.term}
:   对于大规模部署，红帽建议以联邦方式部署多个 `pmlogger`{.literal}
    farm。例如，每个机架或数据中心一个 `pmlogger`{.literal} farm。每个
    `pmlogger`{.literal} farm 都会将指标加载到中央 Redis 实例中。
    ::: figure
    []{#setting-up-pcp_monitoring-and-managing-system-status-and-performance.html#idm140048722737312}
    **图 4.3. 联邦 - 多个 pmlogger farms**
    ::: figure-contents
    ::: mediaobject
    ![联邦 - 多个 pmlogger
    farms](images/173_RHEL_instaling_PCP_0721_federated.png)
    :::
    :::
    :::