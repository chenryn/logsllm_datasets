Table creation For every non-empty row, the server writes
the encryption of K with the public key of the client
assigned to the row. Empty entries receive the empty
row value.
Client removal The server writes an empty row value on
the exiting client row, and frees the client ID assignment
for the row, and the rekeying process is started.
Rekeying When the K expires, a new table is used.
If
no tables are available in the table pool, a new one is
generated and the old table is marked as deprecated
and used until a new one is available. Keys retrieved
during this time expire a ﬁxed time after retrieval, after
which clients are forced to authenticate.
Note that client removal can still happen during the time a
table is marked as deprecated, as the server can update the
row with the empty value on the ﬂy. Therefore any number
of client removals may happen between old table deprecation
and the use of the new table. Keys expire after the table is
deprecated to prevent now invalid users to access the system
and to prevent credential disclosure.
1350which for NTRU is polynomial multiplication modulo
X N − 1 as described in Section 4.3).
The server then computes a result vector r by adding
i e(cid:48)
i,j,
the resulting entries e(cid:48) column-wise, giving rj =(cid:80)
which is then sent to the client.
Decoding The client decrypts the reply vector and extracts
the information using the homomorphic properties of
the underlying encryption scheme E. For additive homo-
morphic encryption E(a + b) = E(a) +E(b) for instance,
the elements of r can be written as
rj =
ei,j (cid:63) E(0) + ei0,j0 (cid:63) E(cid:16)
(cid:88)
ei0,j0 (cid:63) xi0(cid:17)
= E(cid:16)
i(cid:54)=i0
xi0(cid:17)
Note that the values in the databases need not be in
plaintext or even encrypted with the same E(·). As we
discuss in the following section, homomorphic addition and
our use of polynomial multiplication allows us to retrieve
the selected row. Further, the communication complexity of
our scheme can be improved by using Kushilevitz’s PIR [35].
√
This particular technique reduces communication complexity
to O (
n). While it can be generalized for O(n1/d), we
show in Section 6 that d = 2 gives enough savings for short
communication time.
4.2 NTRU-PIR Multiple Row Selection
An NTRU-PIR query with Multiple Row Selection takes
advantage of the properties of polynomial multiplication. For
i=0 yixi in Zq [X] /(cid:0)X N − 1(cid:1), the
any polynomial y = (cid:80)N−1
product xi0 (cid:63) y mod (cid:0)X N − 1(cid:1) rotates the coeﬃcients of y
by i0 positions or xi0 (cid:63) y =(cid:80)N−1
i=0 yi+i0 mod N xi+i0 mod N .
When the NTRU-PIR operation multiplies the query vector
with every column region in the table, the resulting operation
is an NTRU encryption of either the zero polynomial for
regions where the query vector v was zero, or a rotation of
the query region, where v contained xi0 . In fact, setting
any single coeﬃcient in a component of the query vector will
result in a rotation of the column returned.
In general, for any query vector v, the resulting vector r
contains a summation of the rows whose indexes match the
non-zero coeﬃcients of v. This is a useful observation for it
allows clients to verify the compliance of the server database
with the claimed commitment with a single query over an
arbitrary set of rows. To do so, the client constructs a query
vector with more than one non-zero coeﬃcient. To verify the
result, the client simply adds the expected encryptions of K
of every row corresponding to the query and tests for equality.
Any ﬂagged key included in the set deviates the result away
from the calculated value, and reveals server misbehavior.
Note that, it is suﬃcient for the client to retrieve a subset l
of the columns at the cost of a reduced detection probability
by probability (1 − 1
2l ). Therefore, a cheating server can be
mitigated in the covert adversaries model at the fraction of
the cost of a single PIR query.
4.3 NTRU Encryption
In this section we describe the properties of NTRU [55]
encryption and the modiﬁcations we implemented to make
it suitable for PIR.
Figure 1: Private Information Retrieval overview.
4. PRIVATE INFORMATION RETRIEVAL
The Query and Response functions used in Algorithm 1 rely
on Private Information Retrieval primitives. We preface our
optimizations with an overview of PIR and NTRU Encrypt,
our underlying homomorphic encryption scheme, to oﬀer a
better understanding of the mechanisms on which TracEdge
is built.
In a PIR protocol, a client and a server storing n records
exchange messages such that by the end of the protocol
the client learns the contents of a record of their choosing,
while the server cannot guess which record was retrieved
with probability greater than 1/n. To achieve this, the
server performs some operation related to the underlying
encryption scheme over the database records. We describe a
basic version of the scheme we use for TracEdge below.
4.1 Overview
In our scheme, the database is a set of n records of length (cid:96)
bits. Every row i contains bits DBi = {bi,j, 1 ≤ j ≤ (cid:96)}, and
we use NTRUEncrypt [30, 52] over the Ring Zq/(cid:0)X N − 1(cid:1)
with polynomial multiplication (cid:63), and prime N . The use of
NTRU allows for homomorphic addition E(m1) + E(m2) =
E(m1 + m2), and an eﬃcient query mechanism we call Mul-
tiple Row Selection (MRS) that we describe in Section 4.2.
The main idea is to use the encryption of polynomials as
the query component to select the desired row as well as
rows within the same region. This gives the client the ability
to audit multiple rows in the database to ensure they are
not being targeted by the server (we describe this feature in
Section 3.4). With a large enough polynomial degree N , the
number of expensive multiplications will be reduced by this
factor. This stands in contrast to more traditional PIR in
which one encryption selects a single row of the database.
The query-response protocol for the i0-th database element
is as follows (see Figure 1):
Query Generation The client computes vector v of (cid:100)n/N(cid:101)
encrypted polynomials of degree N , where all but one
is an encryption of the zero polynomial. To query
the database for element i0, the client encrypts the
polynomial xi0 mod N and assigns it to the (cid:98)i0/N(cid:99)-th
element in v.
Response Generation To generate the reply, the server
divides the database in regions of N rows, grouping
bits in the same region’s column as a polynomial ei,j =
i,j = vi (cid:63)ei,j. The meaning
of (cid:63) depends on the additive homomorphism of E(·),
(cid:80)N−1
i=0 bi,jxj and computes e(cid:48)
e1,1eie1,len/N,1en/N,lDatabase........................vE(0)E(0)E(xi)viXr......rj+PIR Query(v)PIR Result(r)Client1351operates on the ring of integer polynomials Zq [X] /(cid:0)X N − 1(cid:1)
NTRU Encrypt is a public-key encryption scheme that
where Zq is the ring of integers modulo q, a small power of two,
and N a prime. The element p is a small polynomial relatively
prime to q, usually X − 2 or 3. To support homomorphic
additions without decryption failure, we select a suitable
value of q empirically in Section 6.
Multiplication in the ring is deﬁned as the product of
polynomials modulo X N − 1. If f and g are polynomials in
the ring, then their product f (cid:63) g =(cid:80)N−1
i=0 hixi where
(cid:88)
hk =
i+j≡k mod N
fi · gj
The private key f is chosen at random with the standard [55]
recommending coeﬃcients in the range [−1, 1]. The public
key is h = p (cid:63) fq (cid:63) g mod q where fq is the inverse of the
secret key in Zq [X] /(cid:0)X N − 1(cid:1).
The encryption of message polynomial Pm is
c = r (cid:63) h + Pm mod q,
where r is a polynomial chosen at random modulo q.
Decryption consists of two steps. First the value a = f (cid:63) c
mod q is computed. Secondly, Pm = fp(cid:63)a mod p is obtained
to reveal the plaintext, where fp is the inverse modulo p of
the secret key.
When performing the response generation phase of our
PIR protocol, every bit region ei,j of the database will be
multiplied with the query polynomial for that region.The
result vector for column j is
E(0) (cid:63) ei,j + E(cid:16)
xi0(cid:17)
(cid:63) ei0,j0
(cid:88)
i(cid:54)=i0
rj =
so to extract the response, we note that polynomial multi-
plication g (cid:63) xi0 mod (X N − 1) rotates the coeﬃcients of g
cyclically by i0 positions. In particular, coeﬃcient k of g is
(g (cid:63) xi0 )k = gk−i0 mod N
therefore, to calculate the bit associated with column rj the
client extracts the 2 · i0 mod N -th bit of D(rj).
4.4 Parallel NTRU-PIR
The PIR computation itself consists of expensive polyno-
mial multiplications and the addition of columns into the
result value. Since we intend to deploy this system on GPUs,
we need to parallelize the NTRU-PIR as much as possible.
For this, we map the polynomial multiplications into point
multiplications of the corresponding Fast Fourier Transforms
(FFT). We sum over the whole table before applying the
inverse FFT. There are two distinct advantages to this. First,
it reduces the complexity of multiplications to O (N log N )
on the degree of the polynomials, instead of N 2. Second,
the component-wise multiplication of the coeﬃcients in the
frequency domain is an operation much more susceptible to
parallel computation, as every result coeﬃcient depends only
on a single complex multiplication.
Performing the addition of column polynomials in parallel
treats polynomials as leaves in a binary tree, with every
addition step removing children and writing the result in the
parent. Because the value of every non-leaf node depends
on the addition of its children there is a loss of roughly half
the computation power on average. At the last step, there
is a single process computing the addition of the last set of
elements. However, because our elements are polynomials
of degree N , every coeﬃcient can be computed in parallel,
even to the last addition.
5. SYSTEM
We implement TracEdge as an extension to the Protected
EAP [31], using the same TLS tunnel establishment in the
common Wi-Fi WPA-Enterprise framework. This ensures the
authentication server has a set of authentic public and private
keys that can be veriﬁed with a Certiﬁcation Authority. We
describe the implemented protocol components and also oﬀer
a basic summary of the operation of 802.1X. In addition,
usage of the TLS tunnel provides lower-layer fragmentation
and reassembly of large (longer than 1020-byte) packets for
the underlying method.
Access to the directory of client public keys is crucial for
the key checking mechanism. Since clients are authenticating
to set up a link to the ISP, access to the directory can be
performed through other channels such as mobile data or
through the AP providing access only to the directory.
5.1 The EAP-TE method
Figure 2 shows the architecture of EAP-TE. After the
client ﬁrst associates to the AP, it starts a TLS tunnel
with the Authentication Server, where standard checks are
performed to ensure the identity of the server. After tunnel
establishment is complete, both client and server share a
session key KCS to encrypt all later communication. This
protects the conversation against eavesdropping. After this
point, all protocol messages are encapsulated within EAPOL
frames on the air, and re-encapsulated as RADIUS Access-
Request/Access-Challenge packets on the back-haul. The
authenticator initiates by sending an initial EAP-Request
packet with an unused protocol identiﬁer.
The ﬁrst phase of the EAP-TE starts by sending an en-
coded timestamp as the identity to the authenticator in re-
sponse to the ﬁrst EAP-Request packet. Subsequent packets
containing the commitment, PIR Query, PIR Response and
key are exchanged similarly. The ﬁnal mutual authentication
we selected is a simple challenge-response for both parties
using SHA-256 as the cryptographic hashing function. The
ﬁnal session keys are built by hashing the initial timestamp,
the key value and the strings server and client.
5.2 The Supplicant
Our client’s query generation is a wpa-supplicant [39] patch
for Linux and Android systems. Query generation involves
computing n/N NTRU encryptions in polynomials, with
query size n × |q| bits, or |q| bits per database entry. Using
to |q|√
Kushilevitz and Ostrovsky’s [35] PIR allows us to reduce size
5.3 The Authentication Server
n.
The authentication server in EAP-TE provides two impor-
tant functions in the system. First, it must generate the
encrypted key tables that will be used during authentication.
Because the server cannot know which row the clients may
be accessing, it must be careful not to keep invalid entries
even for rows with unassigned clients. For unassigned rows,
it may encrypt the key with its own public key, which must
be made available to the clients.
The PIR Reply generation is the most expensive opera-
tion in the protocol. It is potentially parallelizable, where
1352with pre-computed ephemeral keys. This optimization pre-
computes the value H(K)· P and uses it to build every entry
in the table, i.e., (H(K) · P, H(K) · x · P + K), where x· P is
the client’s public key. This halves the number of EC scalar
multiplications.
Our system uses the parallel NTRU-PIR described in
Section 4.4. A practical trade-oﬀ of this technique that data
transfers between the host memory and the GPU device’s
RAM must occur before the operations start. Fortunately,
these transfers can be pipelined while the processors work on
previously loaded data. Another trade-oﬀ is a more involved
implementation that must deal with processor occupancy
and GPU memory access times carefully such that they do
not oﬀset the speed gains of running the code in parallel.
We show the performance of our GPU implementation on
Section 6.
Our implementation using Fast-Fourier transform-based
polynomial multiplication over GPUs using CUDA. Every
column region in the database is stored in FFT form after
table generation, as is the query vector received by the
client. The table is split column-wise among GPU devices
to ﬁll the device’s available memory. Computation starts
with component-wise multiplication of the FFT forms of the
query vector and every column. Next every column region is
added to obtain a ﬁnal degree N polynomial in FFT form
that is then transformed back into the time domain.
Addition is a two-step process to maximize the number of
parallel operations. First, β CUDA blocks add two polyno-
mials at a time in shared memory, producing β polynomials.
Finally a single block adds the former to get the result for
the column. We ﬁnd the optimum value of the parameter β
on Section 6.
6. EVALUATION RESULTS
We evaluate the eﬃciency of a TracEdge construction by
benchmarking its components. For the server components
we use a combination of oﬀ-the-shelf desktop machines with
medium-range GPUs and production-grade Amazon EC2
instance. The clients consist of Android-based smartphones.
We choose our security parameters assuming a key lifespan