UCP 验证内容并强调任何问题。有效的合成文件作为栈部署，您将看到 UCP 的所有资源:网络、卷和服务。几分钟后，我的应用的所有映像都被拉到群集节点上，UCP 为每个服务安排副本。服务列表向我显示，所有组件都以所需的规模运行:
![](img/e94a002b-0c9d-437a-bb82-48eae1560c01.png)
My modernized NerdDinner application is now running across 15 containers in a six-node Docker Enterprise swarm. I have high availability and scale in a supported production environment, and I've switched the four open source components from my custom images to the official Docker images, without any changes to my application images.
栈是首选的部署模型，因为它们继续使用已知的合成文件格式，并且它们自动化了所有的资源。但是栈并不适合每种解决方案，尤其是当您将遗留应用转移到容器时。在栈部署中，无法保证服务的创建顺序；Docker Compose 使用的`depends_on`选项不适用。这是一个深思熟虑的设计决策，基于服务应该具有弹性的想法，但不是所有的服务都是如此。
现代应用应该为失败而构建。如果 web 组件无法连接到数据库，它应该使用基于策略的重试机制来重复重新连接，而不是无法启动。传统的应用通常期望它们的依赖是可用的，并且没有内置的优雅重试。NerdDinner 就是这样，所以如果我从 compose 文件部署一个栈，web 应用可能会在数据库服务创建之前启动，它将会失败。
在这种情况下，容器应该退出，这样 Docker 就知道应用没有运行。然后它将安排一个新的容器运行，当它启动时，依赖关系应该是可用的。如果没有，新的容器将结束，Docker 将安排一个替换，这将一直发生，直到应用正常工作。如果您的遗留应用没有任何依赖检查，您可以使用 Dockerfile 中的启动检查和运行状况检查将此逻辑构建到 Docker 映像中。
在某些情况下，这可能是不可能的，或者新容器的重复启动可能会导致遗留应用出现问题。您仍然可以手动创建服务，而不是部署栈。UCP 也支持这个工作流，这允许您在启动每个服务之前手动确保所有依赖项都在运行。
This is the imperative approach to managing your apps, which you really should try to avoid. It's far better to encapsulate your application manifest in a simple set of Docker Compose files that can be managed in source control, but it may be difficult to do that with some legacy apps.
# 创建服务
`docker service create`命令有几十个选项。UCP 在一个引导式用户界面中支持它们，您可以从服务视图中的创建服务开始。首先，您指定基本细节，即用于服务的映像的名称；服务名称，这是其他服务发现这个名称的方式；和命令参数，如果您想覆盖映像中的默认启动:
![](img/6fc4a829-65d8-4dbd-8560-d98948433217.png)
我不会涵盖所有细节；它们映射到`docker service create`命令中的选项，但是 Scheduling 选项卡值得一看。在这里，您可以将服务模式设置为复制或全局，添加所需数量的副本，以及滚动更新的配置:
![](img/9053565b-46a2-4e08-a97f-f66405add85c.png)
重启策略默认为始终。这与副本计数一起工作，因此如果任何任务失败或停止，它们将被重新启动以保持服务级别。您可以为自动展开配置更新设置，也可以添加计划约束。约束使用节点标签来限制哪些节点可以用于运行服务任务。您可以使用它将任务限制在高容量节点或具有严格访问控制的节点上。
在其他部分，您可以配置服务如何与群集中的其他资源集成，包括网络和卷、配置和机密，并且您可以指定计算预留和限制。这使您可以将服务限制在有限的 CPU 和内存量内，还可以指定每个容器应该拥有的最小 CPU 和内存份额。
当您部署服务时，UCP 负责将映像拉到任何需要它的节点上，并启动所需数量的容器。对于全局服务，每个节点有一个容器，对于复制的服务，每个节点有指定数量的任务。
# 监控服务
UCP 允许您以相同的方式部署任何类型的应用，或者使用栈合成文件，或者通过创建服务。该应用可以使用任何技术组合的许多服务——新的 NerdDinner 栈的一部分现在正在我的混合集群中的 Linux 上运行。我已经将 Java、Go 和 Node.js 组件部署为 Linux 容器和.NET 框架和.NET 核心组件作为同一集群上的 Windows 容器。
所有这些不同的技术平台都以与 UCP 相同的方式进行管理，这使得它成为拥有大量应用的公司的宝贵平台。服务视图显示具有基本信息的所有服务，如总体状态、任务数和上次报告错误的时间。对于任何服务，您都可以深入查看显示该服务所有信息的详细视图。
这是核心 nerddiner ASP.NET 网络应用的概述选项卡:
![](img/a5081765-3382-4623-a3bf-5e2a7dfb6feb.png)
我已经滚动了这个视图，这样我就可以看到服务可用的机密，以及环境变量(在这种情况下没有)、标签(包括 Traefik 路由设置)和约束(包括平台约束)，以确保它在 Windows 节点上运行。“度量”视图向我显示了 CPU 和内存使用情况的图表，以及所有正在运行的容器的列表。
您可以使用服务视图来检查服务的整体状态并进行更改—您可以添加环境变量、更改网络或卷以及更改计划约束。您对服务定义所做的任何更改都将通过重新启动服务来实现，因此您需要了解应用的影响。无状态应用和能够妥善处理暂时故障的应用可以动态修改，但可能会出现应用宕机，具体取决于您的解决方案架构。
您可以调整服务的规模，而无需重新启动现有任务。只需在“计划”选项卡中指定新的扩展级别，UCP 将创建或删除容器以满足服务级别:
![](img/aced9423-5414-406d-98d8-8d9b2c5f2c91.png)
当您增加规模时，现有的容器将被保留，新的容器将被添加，因此这不会影响应用的可用性(除非应用将状态保存在单个容器中)。
从共享资源下的服务视图或容器列表中，您可以选择一个任务来深入到容器视图中，这是一致的管理体验使得管理 Dockerized 应用变得如此简单的地方。关于正在运行的容器的每个细节都会浮出水面，包括容器内部的配置和实际进程列表。这是我的 Traefik 代理的容器，它只是运行了`traefik`进程:
![](img/77b433fa-222e-45e8-9eed-97b20eebef3f.png)
您可以读取容器的日志，其中显示了容器标准输出流的所有输出。这些是来自 Elasticsearch 的日志，这是一个 Java 应用，所以这些是`log4j`格式:
![](img/718b5db5-c0cf-4b0e-88cf-9bf978e7995f.png)
You can view the logs of any container in the cluster in the same way, whether it's a new Go app running in a minimal Linux container, or a legacy ASP.NET app running in a Windows container. This is why it's so important to build your Docker image so that log entries from your app are relayed out to the console.
如果需要解决问题，甚至可以连接到容器中运行的命令行 shell。这相当于在 Docker CLI 中运行`docker container exec -it powershell`，但都是从 UCP 接口运行的，因此不需要连接到集群上的特定节点。您可以运行安装在容器映像中的任何 shell，因此在 Kibana Linux 映像中，我可以使用`bash`:
![](img/8a0a0818-0629-407e-83b2-8b2022582d98.png)
UCP 为您提供了一个界面，让您可以从集群的整体运行状况，通过所有正在运行的服务的状态，深入到在特定节点上运行的各个容器。您可以轻松监控应用的运行状况，检查应用日志，并连接到容器进行调试，所有这些都在同一个管理用户界面中。您还可以从远程 Docker **命令行界面** ( **CLI** )客户端下载**客户端捆绑包**，这是一组脚本和证书，您可以使用它们来安全地管理集群。
客户端捆绑脚本将您的本地 Docker CLI 指向在集群管理器上运行的 Docker API，并为安全通信设置客户端证书。这些证书标识 UCP 的特定用户，无论它们是在 UCP 创建的，还是外部 LDAP 用户。因此，用户可以登录 UCP 用户界面或使用`docker`命令来管理资源，对于这两个选项，他们将拥有由 UCP RBAC 策略定义的相同访问权限。
# RBAC
UCP 的授权为您提供了对所有 Docker 资源的细粒度访问控制。UCP 的 RBAC 是通过为一个主体创建访问资源集的授权来定义的。授权的主体可以是个人用户、用户团队或包含多个团队的组织。资源集可以是单个资源，如 Docker Swarm 服务，也可以是一组资源，如群集中的所有 Windows 节点。授权定义了访问级别，从无访问权限到完全控制。
这是一种非常灵活的安全方法，因为它允许您在对您的公司有意义的任何级别实现安全规则。我可以使用应用优先的方法，其中我有一个名为`nerd-dinner`的资源集合，它代表 NerdDinner 应用，这个集合是代表部署环境的其他集合的父集合:生产、UAT 和系统测试。集合层次结构位于该图的右侧:
![](img/5fcce0e5-c3dd-4779-8b2c-af4ada0805ec.png)
集合是资源组，所以我将每个环境部署为一个栈，资源都属于相关的集合。组织是用户的最终分组，这里我有一个左边显示的**书呆子聚餐**组织，是所有在书呆子上工作的人的分组。在组织中，有两个团队:**书呆子晚餐行动**是应用管理员，**书呆子晚餐测试人员**是测试人员。图中只显示了一个用户**艾顿**，他是**书呆子晚餐行动**团队的成员。
这种结构允许我创建授权，以便在不同级别访问不同的资源:
*   **书呆子晚餐**组织拥有**仅查看**访问**书呆子晚餐**集合的权限，这意味着组织中任何团队的任何用户都可以列出并查看任何环境中任何资源的详细信息。
*   **书呆子晚餐行动**团队还对**书呆子晚餐**集合拥有**受限控制**，这意味着他们可以在任何环境中运行和管理资源。
*   **书呆子晚餐行动**团队中的用户**艾顿**也拥有**对**书呆子晚餐-uat** 集合的完全控制**，该集合对 uat 环境中的资源进行完全管理控制。
*   **书呆子晚餐测试人员**团队拥有**调度程序**访问**书呆子晚餐测试**集合的权限，这意味着团队成员可以管理测试环境中的节点。
The default roles for Docker Swarm collections are **View Only**, **Restricted Control**, **Full Control**, and **Scheduler**. You can create your own roles, and set specific permissions for specific types of resources.
您可以在 UCP 创建授权来创建一个角色，该角色将主题链接到一组资源，并授予它们已知的权限。我已经在我的 Docker 企业集群中部署了安全访问图，我可以在默认系统授权旁边看到我的授权:
![](img/6c89cc56-1c9d-4066-a684-0a8fd8b70d1a.png)
您可以创建独立于您想要保护的资源的授权和集合。然后在添加标签创建资源时指定一个集合，用键`com.docker.ucp.access.label`和集合名称的值。您可以在 Docker 的 create 命令中，在 Docker Compose 文件中声明性地，以及通过 UCP 用户界面来完成这项工作。在这里，我指定了反向代理服务属于`nerd-dinner-prod`集合:
![](img/9b6f6205-6a0e-484f-bc98-825d666d4b17.png)
如果我以“书呆子晚餐测试员”团队成员的身份登录 UCP，我只会看到这一项服务。测试用户无权查看默认集合中的服务，只有代理服务被明确放入`nerd-dinner-prod`集合:
![](img/0e34116f-3197-4748-addd-5e1249dd100d.png)
作为该用户，我只有查看权限，因此如果我试图以任何方式修改服务，例如重新启动服务，我将会得到一个错误:
![](img/6b0cd91d-15b3-40d0-bdd5-ae53ebf017a1.png)
团队可以对不同的资源集拥有多个权限，用户可以属于多个团队，因此 UCP 的授权系统足够灵活，可以适应许多不同的安全模型。您可以采用 DevOps 方法并为特定项目构建集合，让所有团队成员完全控制项目资源，或者您可以有一个专门的管理团队完全控制一切。或者你可以有独立的开发团队，其中成员对他们所开发的应用拥有有限的控制权。
RBAC 是 UCP 的一大特色，也是对 Docker 更广泛的安全故事的补充，我将在[第 9 章](09.html)、*了解 Docker* 的安全风险和好处中讲述。
# 摘要
本章重点介绍运行 Dockerized 解决方案的操作方面。我向您展示了如何在 Docker 容器中使用现有的 Windows 管理工具，以及这如何对调查和调试有用。主要关注的是管理和监控应用的新方法，使用 Docker Enterprise 中的 UCP 以相同的方式管理各种工作负载。
您学习了如何使用现有的 Windows 管理工具(如 IIS 管理器和服务器管理器)来管理 Docker 容器，还学习了这种方法的局限性。当您从 Docker 开始时，坚持使用您知道的工具可能会很有用，但是专用的容器管理工具是更好的选择。
我介绍了两个管理容器的开源选项:简单的可视化工具和更高级的 Portainer。两者都作为容器运行，并连接到 Docker API，它们是打包在 Linux 和 Windows Docker 映像中的跨平台应用。
最后，我向您介绍了 Docker Enterprise 中用于管理生产工作负载的主要功能。我将 UCP 演示为一个管理各种容器化应用的单一窗口，在同一个集群中的 Linux 和 Windows 容器上的多个技术栈中运行，并展示了 RBAC 如何让您安全地访问所有 Docker 资源。
下一章的重点是安全性。在容器中运行的应用可能会提供新的攻击途径。您需要意识到风险，但是安全是 Docker 平台的核心。Docker 让您可以轻松地建立端到端的安全故事，其中策略由平台在运行时强制实现，没有 Docker 这是很难做到的。