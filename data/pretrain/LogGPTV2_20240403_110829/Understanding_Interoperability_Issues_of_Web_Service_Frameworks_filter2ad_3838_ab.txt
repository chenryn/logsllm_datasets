also  involves  the  interaction  with  an  UDDI  repository.  In 
general,  the approach  tries  to  improve  interoperability,  but 
does not focus on understanding the interoperability issues of 
specific web service frameworks. 
framework 
analyzing  web 
A  broad  view  on  the  interoperability  of  technologies 
frequently  used  in  SOA  environments,  including  web 
services,  is  presented  in  [7].  The  authors  propose  a 
conceptual 
service 
interoperability  issues,  and  recognize  that  it  is  a  basis  for 
studying  standards  and  specifications  and 
identify
interoperability  improvement  opportunities.  The  proposal  is 
broad  and  focuses  on  high-level  interaction  (e.g.,  business 
processes,  human  consumers),  there  is  no  indication  of  the 
practical  interoperability  properties  provided  by  supporting 
frameworks, and no specific information is given on how to 
detect interoperability issues. 
Interoperability  problems  can  occur  when,  for  instance, 
native  data  types  or  specific  language  constructs  of  the
service  implementation  are  present  at  the  interface.  The 
problem  is  that,  to  the  best  of  our  knowledge,  there  is  no 
standard indicating which types are adequate to be used as a 
service interface or not. The authors of [8] confirm precisely 
that it is difficult to identify the right construct to express a 
data type that is fully supported by all WS frameworks.  
for 
In 
to 
to 
III.  APPROACH AND EXPERIMENTAL SETUP 
In this section we present the approach designed to test 
the interoperability of web service frameworks. In practice, 
the  goal  is  to  verify  the  interoperability  between  client  and 
server  subsystems  of  a  set  of  widely  used  web  service 
frameworks. As referred in the previous section, we focus on 
the  typical  three  steps  of  a  web  services  inter-operation 
scenario:  Service  Description  Generation,  Client  Artifact 
Generation, and Client Artifact Compilation. The following 
points outline the two key phases of our approach, which are 
composed of several steps each (see Fig. 2): 
Preparation Phase: 
a)  Selection  of  server  frameworks:  consists  of 
choosing the web service frameworks that will act 
as service containers at the server-side;  
b)  Selection of client frameworks: involves choosing 
the web service frameworks that will be used at the 
client-side  (the  frameworks  selected  in  step  a) 
can/should be included);  
c)  Service  creation:  implies  selecting  input  and 
output  parameters  and  generating  web  service 
implementations 
those 
parameters. 
that  accept  and  return 
Testing Phase: 
a) Service  description generation: consists  of  using 
the server-side subsystem of a given framework to 
generate  a  WSDL  document  for  each  service 
created; 
b)  Artifact generation: involves using the client-side 
subsystem of a given framework to generate client 
artifacts  that  can  be  used  to  invoke  the  remote 
service operations; 
c)  Artifact compilation: consists of compiling (when 
required)  the  client  artifacts  generated  in  the 
previous step. 
d) Results classification: this step is to be carried out 
after  the  execution  of  each  of  the  previous  three 
steps. It consists of observing the outcome of each 
step in order to identify interoperability problems.  
Fig. 2 presents a graphical representation of the execution 
of 
the  seven  steps  of 
the  approach.  The  following 
subsections describe each phase and the corresponding steps 
in detail. 
A.  Preparation Phase 
The Preparation Phase involves selecting frameworks to 
be used at the server and client sides and creating the testing 




	
















































































































Figure 2.   Outline of the main phases of the approach. 
325325325
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:26:18 UTC from IEEE Xplore.  Restrictions apply. 
services.  In  our  experiments  we  use  a  total  of  eleven 
different  client  artifact  generation  tools  (provided  by  the 
client  subsystem  of  WS  frameworks).  The  artifacts  created 
by the tools inter-operate with the server subsystems of three
WS  frameworks  (deployed  in  three  application  servers)
populated with more than two thousand services each.  
Fig.  3  provides  an  overall  view  of  the  experimental 
environment  created.  As  shown, 
the  combination  of 
subsystems may result in a massive testing campaign, as the 
goal  is  to  test  the  inter-operation  of  each  client-side 
subsystem  of  each  framework  with  selected  server-side 
subsystems  (each  server-side  subsystem  is  populated  with 
thousands  of  services).  The  following  sections  describe  the 
systems selection and creation of services in detail. 
a)  Selecting server frameworks 
The server selection was based on market relevance and, 
as a result, we selected 3 very well-known servers that lead 
the  enterprise  application  servers  market,  according  to  a 
2011 report from Gartner [24]. The servers are GlassFish 4, 
JBoss AS 7.2, and Microsoft IIS 8.0.8418.0 (Express) [13]â€“
[15]  Each  server  uses  a  specific  web  service  framework, 
GlassFish and JBoss AS support the deployment of Java web 
services  and  IIS  supports  the  deployment  C#  web  services. 
Table I presents the selected systems and frameworks. 
b)  Selecting client frameworks 
Table  II  presents  the  WS  frameworks  selected  to  be 
used  at  the  client-side  (for  inter-operation  with  the  server-
side),  including  the  specific  tool  that  is  bundled  with  each 
framework (and that will be used later on to produce client 
artifacts).  As  we  can  see,  we  selected  11  client-side  WS 
frameworks  subsystems  (we  used  the  .NET  framework  to 
produce  different  artifacts  for  3  programming  languages).
The  selection 
three  frameworks  already 
selected  for 
the  server-side,  but  also  many  popular 
frameworks (e.g., Axis2, Apache CXF) for several different 
languages (e.g., C++, Python, PHP). 
includes 
the 
c)   Creating test services  
Since our aim is to test inter-operation the focus is on 
the input and output parameters of the web services that are 
critical inter-operation points in this technology (and not on 
business logic execution inside each service). Therefore, our 
first batch of test services has been composed of simple web 
service implementations. Each service has a single operation
with  one  input  and  one  output  variable  of  the  same  type.




































































































