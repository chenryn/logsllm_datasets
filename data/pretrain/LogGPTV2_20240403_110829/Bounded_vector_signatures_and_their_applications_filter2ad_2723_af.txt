B producing the correct solution to the given Strong RSA
instance is clearly based on the odds that B did not abort
while answering oracle queries and A output a forgery that
was helpful to B. To bound this probability, we note that
B has to have made the correct guess on the context c∗ and
the dimension k∗, which we denote as the event E2. Next,
we deﬁne E3 as the event that v∗ is less than or equal to any
value queried to a KEYLESS oracle on dimension k∗ (i.e., B
did not abort during oracle queries). We also deﬁne event E4,
which represents the case that the forgery is helpful for B in
breaking his Strong RSA problem instance. The probability
that B did not abort during the simulation is:
k∗
.
Pr [B ¬abort ] = Pr [ E2 ∧ E3 ∧ E4 ]
=
= Pr [ E2 ] · Pr [ E3 ∧ E4 ]
· Pr [ E3 ∧ E4 ]
· Pr [ E4 | E3 ] · Pr [ E3 ]
1
qh · d
1
qh · d
=
(4)
Pr [ E3 ] can be bounded as follows.
ˆvX
Pr [ E3 ] =
Pr [ v
∗
= i ] · Pr [ E3 | v
∗
= i ]
= 1 ] · Pr [ E3 | v
∗
„ t − 1
i=1
≥ Pr [ v
≥ 1
ˆv
·
n
«t−1
∗
= 1 ]
(5)
„ t − 1
«2(t−1)
Here, we focus on the case where v∗ = 1 for ease of anal-
ysis. Since v∗ is selected uniformly from the set {1, . . . , ˆv},
the probability that 1 is selected is 1
ˆv . When this happens,
the KEYLESS signing oracles are able to answer signature
queries only when v[k∗] ≥ 1. Therefore, the worst non-
abort scenario is one in which A queries for t − 1 distinct
signatures on the value 0 for context c∗, which requires that
those queries be answered by the KEYED oracles. This event
occurs with probability at least ( t−1
Likewise, we compute Pr [ E4 | E3 ] using the fact that, in
the worst case, any forgery produced by a non-aborted sim-
ulation must, by deﬁnition, involve queries to t − 1 KEYED
signing oracles, which has a probability of:
n )t−1.
Pr [ E4 | E3 ] ≥
(6)
By substituting into (4), we get the probability that B
n
does not need to abort by the end of the execution:
„ t − 1
«t−1
Pr [B ¬abort ] ≥
(7)
Consequently, we get the probability that B succeeds in
solving his Strong RSA problem when interacting with a
Type 2 forger:
n
1
qh · d
·
· 1
ˆv
Pr [B wins | A is type2 ]
= Pr [B ¬abort ] · AdvSU-CMA
BVS
≥
«2(t−1) · AdvSU-CMA
„ t − 1
(AT ype2)
·
n
BVS
· 1
ˆv
1
qh · d
(AT ype2) (8)
After obtaining the winning probabilities of B when deal-
ing with the two types of forgers independently, we can unify
them to bound the probability that B is able to solve his
Strong RSA problem with a shrink unforgeability adversary
A as a subroutine.
(A)
AdvSU-CMA
BVS
«2(t−1) · AdvQR-SRSA(B)
„ n
«2(t−1) · (t − 1) · AdvDDH(D)
„ n
t − 1
t − 1
≤ 2 · qh · d · ˆv ·
+ d · ˆv ·
BVS
It is also not hard to see that if we have a forger with
advantage AdvSU-CMA
(T, qh) running in time T , then our
Strong RSA adversary would need to run in time T (cid:48) = T (cid:48)(cid:48) =
T + O(t(dˆv log(n + d log n) + log(n!))) group operations (i.e.,
group multiplications and inverses). The additional time
needed comes from the hash and signing oracle operations
of both Type 1 and Type 2 forger. In particular, the dom-
inant part is the exponentiation costs of the Lagrange in-
terpolation in the signing oracles of the Type 1 and Type
2 scenarios. The complexity of the exponentiation depends
on the size of the prime exponents e1, . . . , ed. Since we re-
quire each prime to be greater than n, each prime number
is roughly the size log(n + d log n) by the prime number the-
orem. Thus, the number of squaring operations needed to
raise to the exponents is O(t(dˆv log(n + d log n) + log(n!)))
since there are t group elements that need to be exponen-
tiated. The additional log(n!) is due to the extra n! factor
in the modiﬁed Lagrange interpolation. The simulation in
Lemma 1 has a similar time bound due to the use of inter-
polation. Thus, we conclude the theorem:
AdvSU-CMA
BVS
(T, qh)
≤ 2 · qh · d · ˆv ·
«2(t−1) · AdvQR-SRSA(T
„ n
„ n
«2(t−1) · (t − 1) · AdvDDH(T
t − 1
(cid:48)
)
(cid:48)(cid:48)
)
+ d · ˆv ·
t − 1
where T (cid:48) = T (cid:48)(cid:48) = T + O(t(dˆv log(n + d log n) + log(n!)))
group operations.
A.3 Simulation Indistinguishability
The proof above assumes that the Type 1 forger is unable
to distinguish our simulation from the real system. Below we
show this is the case. More speciﬁcally, we tie the forger’s
ability to distinguish between our simulation and the real
system to its ability to distinguish Diﬃe-Hellman triples
from random triples in the group QRN . To do so, con-
sider the following variant of the decisional Diﬃe-Hellman
problem deﬁned in Section 2.4, to which we refer as the
(cid:96)-DDH problem, where SafePrimes are the primes p of the
form p = 2p(cid:48) + 1 where p(cid:48) is itself a prime:
Adv(cid:96)-DDH(D) =
| Pr[ D(p, q, g, ga,{(gb1 , gab1 ), . . . , (gb(cid:96) , gab(cid:96) )}) = 1 :
p, q $← SafePrimes ∩ {0, 1}κ, N ← pq, g $← QRN ,
a, b1, . . . , b(cid:96)
p(cid:48) = (p − 1)/2, q(cid:48) = (q − 1)/2 ] −
$← Zp(cid:48)q(cid:48) where
Pr[ D(p, q, g, ga,{(gb1 , gr1 ), . . . , (gb(cid:96) , gr(cid:96) )}) = 1 :
p, q $← SafePrimes ∩ {0, 1}κ, N ← pq, g $← QRN ,
a, b1, . . . , b(cid:96), r1, . . . , r(cid:96)
p(cid:48) = (p − 1)/2, q(cid:48) = (q − 1)/2 ] |
$← Zp(cid:48)q(cid:48) where
Let Adv(cid:96)-DDH(T ) = maxD Adv(cid:96)-DDH(D) where the maxi-
mum is taken over all adversaries D executing in time at
most T . It is straightforward to show that Adv(cid:96)-DDH(T ) ≤
(cid:96) · AdvDDH(T ) by a standard hybrid argument.
Lemma 1. Let X be the probability that a Type 1 forger
executing in time T succeeds in forging against the real pro-
tocol, and let Y be the probability that this Type 1 forger exe-
cuting in time T succeeds in forging in our simulation. Then,
|X−Y | ≤ Adv(t−1)-DDH(T (cid:48)), where T (cid:48) = T +O(t(dˆv log(n+
d log n) + log(n!))) group operations.
Proof. Given a Type 1 forger A that runs in time T , we
construct a solver D for the (cid:96)-DDH problem in QRN that
runs in time T +O(t(dˆv log(n+d log n)+log(n!))). D is given
an RSA modulus N , and the two strong primes p, q such that
N = pq. He is also given g, ga,{(gb1 , gc1 ), . . . , (gbt−1 , gct−1 )},
where g is a random generator in QRN . Intuitively, it should
output 1 if each ci = abi mod p(cid:48)q(cid:48), where p(cid:48) = (p−1)/2, q(cid:48) =
(q − 1)/2, and 0 otherwise.
and computes sk =Qd
Distinguisher D simulates the view of the forger as follows.
D assigns the t− 1 tuples (ga, gb1 , gc1 ), . . ., (ga, gbt−1 , gct−1 )
to t−1 signing oracles. Without loss of generality, we assume
that the ﬁrst t − 1 signing oracles Oracle1, . . . , Oraclet−1
received the tuples. We denote the DDH tuple assigned to
a Oraclei as (A, Bi, Ci), 1 ≤ i ≤ t − 1.
D also picks d distinct primes e1, . . . , ed with each ei > n
mod p(cid:48)q(cid:48). Suppose that
A is going to make qh hash oracle queries, D also randomly
selects an index h∗ from {1, . . . , qh}. He initializes the forger
A with public key (N, e1, . . . , ed) and prepares to answer his
hash and signing oracle queries using the following proce-
dures.
Hash Oracle H(c) :
−( ˆv[k]+1)
k=1 e
k
1. If it is the h∗th hash query, it returns A. We refer to
this context as c∗∗.
2. Otherwise, it picks a random u and returns gu. It stores
(c, u).
Signing Oraclei(v, c) :
1. If 1 ≤ i ≤ t − 1 :
(n!)Qd
u·(n!)Qd
i
(a) If c = c∗∗ , it returns C
(b) If c (cid:54)= c∗∗, it looks for the entry (c, u) in the Hash
mod N .
k=1 e
v[k]
k
k=1 e
v[k]
k
mod N .
Oracle and returns B
i
2. If t ≤ i ≤ n:
i
k=1 e
k=1 e
v[k]
k
v[k]
k=1 e
k
(n!)Qd
using shares B
i
u·(n!)Qd
1, and the full signature gu·sk ·(n!)Qd
(a) If c = c∗∗, it uses the standard interpolation tech-
nique to derive the signature share by using the t−1
mod N , i = 1, . . . , t−
1, and the full signature Ask ·(n!)Qd
known shares C
v[k]
k mod N
to compute the share. Notice here that D is able to
raise to the sk power because he knows the secret
key himself. We omit the detail here due to the
similarity of the technique and the one in the proof
of the theorem.
(b) If c (cid:54)= c∗∗, again it computes the signature share
mod N , i = 1, . . . , t−
v[k]
k mod N .
In the end, D outputs 1 if the forger A successfully forges
a signature and outputs 0 otherwise. Clearly, if each ci =
abi, then H(c∗∗) = ga and the output of Oraclei(v, c∗∗) is
gabi(n!)Qd
v[k]
k mod N . Moreover, the distribution of the
signing responses for the signing oracles is identical to the
real protocol. Then A forges with probability X.
When each ci is random, H(c∗∗) = ga and Oraclei(v, c∗∗)
outputs gci(n!)Qd
v[k]
k mod N
for some random ri. The distribution of the signing re-
sponses in our simulation is therefore the same as that pro-
vided in the proof of the theorem if we consider ri to be
the signing key for the oracle, in which case A wins with
probability Y .
Thus, we have Adv(t−1)-DDH(D) = |X − Y | and because
D runs in time T (cid:48) = T + O(t(dˆv log(n + d log n) + log(n!))),
we have Adv(t−1)-DDH(T (cid:48)) ≥ |X − Y |.
k mod N = gari·(n!)Qd
k=1 e
v[k]
k=1 e
k=1 e
k=1 e