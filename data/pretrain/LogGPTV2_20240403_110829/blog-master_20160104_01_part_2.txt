        0.001089        \set ntellers 10 * :scale  
        0.000896        \set naccounts 100000 * :scale  
        0.001683        \setrandom aid 1 :naccounts  
        0.001225        \setrandom bid 1 :nbranches  
        0.001526        \setrandom tid 1 :ntellers  
        0.002240        \setrandom delta -5000 5000  
        0.084777        BEGIN;  
        0.217070        UPDATE pgbench_accounts SET abalance = abalance + :delta WHERE aid = :aid;  
        0.118606        SELECT abalance FROM pgbench_accounts WHERE aid = :aid;  
        0.154885        UPDATE pgbench_tellers SET tbalance = tbalance + :delta WHERE tid = :tid;  
        0.204343        UPDATE pgbench_branches SET bbalance = bbalance + :delta WHERE bid = :bid;  
        0.117456        INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES (:tid, :bid, :aid, :delta, CURRENT_TIMESTAMP);  
        0.129509        END;  
#zfs snapshot zp1/data01@2016010404  
#zfs list -t snapshot  
NAME                    USED  AVAIL  REFER  MOUNTPOINT  
zp1/data01@2016010401   131G      -  1.01T  -  
zp1/data01@2016010402   352K      -  1.01T  -  
zp1/data01@2016010403  1.47G      -  1.01T  -  
zp1/data01@2016010404  15.6M      -  1.01T  -  
```  
快照增量只有3.1GB。  
```  
#zfs send -n -P -v -i zp1/data01@2016010403 zp1/data01@2016010404  
incremental     2016010403      zp1/data01@2016010404   3245256520  
size    3245256520  
postgres=# \l+  
                                                               List of databases  
   Name    |  Owner   | Encoding | Collate | Ctype |   Access privileges   |  Size   | Tablespace |                Description                   
-----------+----------+----------+---------+-------+-----------------------+---------+------------+--------------------------------------------  
 digoal    | postgres | UTF8     | C       | C     |                       | 2971 MB | pg_default |   
```  
## 测试4  
将full page write打开，再对比xlog和zfs快照增量的大小。  
```  
#zfs snapshot zp1/data01@2016010405  
postgres=# select pg_current_xlog_insert_location();  
 pg_current_xlog_insert_location   
---------------------------------  
 596/830000D0  
(1 row)  
pgbench -M prepared -n -r -P 1 -c 48 -j 48 -T 600  
transaction type: TPC-B (sort of)  
scaling factor: 70000  
query mode: prepared  
number of clients: 48  
number of threads: 48  
duration: 600 s  
number of transactions actually processed: 1772299  
latency average: 16.247 ms  
latency stddev: 31.695 ms  
tps = 2953.504271 (including connections establishing)  
tps = 2953.662892 (excluding connections establishing)  
statement latencies in milliseconds:  
        0.004457        \set nbranches 1 * :scale  
        0.001219        \set ntellers 10 * :scale  
        0.000958        \set naccounts 100000 * :scale  
        0.001777        \setrandom aid 1 :naccounts  
        0.001084        \setrandom bid 1 :nbranches  
        0.001013        \setrandom tid 1 :ntellers  
        0.001071        \setrandom delta -5000 5000  
        0.062108        BEGIN;  
        14.041890       UPDATE pgbench_accounts SET abalance = abalance + :delta WHERE aid = :aid;  
        0.153864        SELECT abalance FROM pgbench_accounts WHERE aid = :aid;  
        0.870157        UPDATE pgbench_tellers SET tbalance = tbalance + :delta WHERE tid = :tid;  
        0.478328        UPDATE pgbench_branches SET bbalance = bbalance + :delta WHERE bid = :bid;  
        0.362079        INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES (:tid, :bid, :aid, :delta, CURRENT_TIMESTAMP);  
        0.255290        END;  
postgres=# checkpoint;  
CHECKPOINT  
postgres=# select pg_current_xlog_insert_location();  
 pg_current_xlog_insert_location   
---------------------------------  
 5A7/3DF47450  
(1 row)  
postgres=# select pg_size_pretty(pg_xlog_location_diff('5A7/3DF47450', '596/830000D0'));  
 pg_size_pretty   
----------------  
 67 GB  
(1 row)  
#zfs snapshot zp1/data01@2016010406  
#zfs send -n -P -v -i zp1/data01@2016010405 zp1/data01@2016010406  
incremental     2016010405      zp1/data01@2016010406   80259589256  
size    80259589256  
postgres=# select pg_size_pretty(80259589256);  
 pg_size_pretty   
----------------  
 75 GB  
(1 row)  
#zfs list -t snapshot  
NAME                    USED  AVAIL  REFER  MOUNTPOINT  
zp1/data01@2016010401   131G      -  1.01T  -  
zp1/data01@2016010402   352K      -  1.01T  -  
zp1/data01@2016010403  1.47G      -  1.01T  -  
zp1/data01@2016010404  2.16G      -  1.01T  -  
zp1/data01@2016010405  11.0G      -  1.01T  -  
zp1/data01@2016010406   424K      -  1.01T  -  
#zfs destroy zp1/data01@2016010401  
#zfs destroy zp1/data01@2016010402  
#zfs destroy zp1/data01@2016010403  
#zfs destroy zp1/data01@2016010404  
#zfs list -t snapshot  
NAME                    USED  AVAIL  REFER  MOUNTPOINT  
zp1/data01@2016010405  80.0G      -  1.01T  -  
zp1/data01@2016010406   424K      -  1.01T  -  
```  
## 测试5  
开启full page write，并且活跃数据缩小到1GB测试：  
```  
 pgbench -M prepared -n -r -P 1 -c 48 -j 48 -T 600 digoal  
postgres=# select pg_size_pretty(pg_xlog_location_diff('5AA/7ED591C0', '5A7/3DF47450'));  
 pg_size_pretty   
----------------  
 13 GB  
(1 row)  
#zfs snapshot zp1/data01@2016010407  
#zfs send -n -P -v -i zp1/data01@2016010406 zp1/data01@2016010407  
incremental     2016010406      zp1/data01@2016010407   3605632832  
size    3605632832  
postgres=# select pg_size_pretty(3605632832);  
 pg_size_pretty   
----------------  
 3439 MB  
(1 row)  
#zfs list -t snapshot  
NAME                    USED  AVAIL  REFER  MOUNTPOINT  
zp1/data01@2016010405  80.0G      -  1.01T  -  
zp1/data01@2016010406   840K      -  1.01T  -  
zp1/data01@2016010407   248K      -  1.01T  -  
```  
## 小结  
1\. zfs快照是块级别的，所以一定比xlog大，并且本例xlog关闭了fpw，所以进一步缩小了XLOG的产生量。  
(当开启XLOG的full page write时，XLOG的量和ZFS快照增量就非常接近了，对于小数据库，快照比XLOG小很多)  
2\. zfs快照占用的空间，和数据块的变更有个，当数据块发生任意修改时，这个数据块就会占用快照空间。  
对于PG来说，数据块的变动是非常多的，例如：  
tuple hint bit 可能会在查询时更新，  
vacuum 回收垃圾时，  
vacuum freeze时，  
update 数据时，  
索引变更时。  
以上操作都会引起对应数据块的更新，从而导致快照变大。  
注意每个块不管更新多少次，在一个快照中只占用一个块的空间。  
新增的块不会占用快照的空间，只有老的块发生变更时才占用快照空间。  
3\. 如果使用zfs的快照作为PostgreSQL的备份，需要注意什么？  
监控快照的空间占用情况。  
及时删除不需要的老的快照释放空间。  
控制创建快照的频率。  
关闭数据库的FULL PAGE WRITE，减少产生的日志量。  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")