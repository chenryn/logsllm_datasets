An Accountable Authority Identity Based Encryption (A-
IBE) scheme consists of ﬁve components. These deﬁnitions
are adapted from Goyal [17] with a critical enhancement to
account for fully black-box tracing.
Setup: There is a randomized algorithm Setup(λ) that takes
as input the security parameter λ, and it outputs the public
parameters PK and a master key MK.
Key Generation Protocol: There is an interactive pro-
tocol KeyGen between the public parameter generator PKG
and the user U . The common input to PKG and U are: the
public parameters PK and the identity ID (of U ) for which
the decryption key has to be generated. The private input
to PKG is the master key MK. Additionally, PKG and U
may use a sequence of random coin tosses as private inputs.
At the end of the protocol, U receives a decryption key dID
as its private output. At any time, either party may abort.
Encryption: There is a randomized algorithm
Encrypt(M, ID, PK) that takes as input: a message M , an
identity ID, and the public parameters PK. It outputs the
ciphertext C.
Decryption: There is an algorithm Decrypt(C, ID, dID) that
takes as input: the ciphertext C that was encrypted under
the identity ID, the decryption key dID for ID and the public
parameters PK. It outputs a message M or ⊥.
Trace: There is a randomized algorithm TraceD(ID, dID, )
that takes as input an identity ID, a “well-formed” decryp-
tion key dID (where “well formed” means that the decryption
key passes a “key sanity check” described as part of the key
generation protocol), a parameter  (which must be polyno-
mially related to λ), and has black-box access to an -useful
decoder box D. It runs in time polynomial in λ and 1/ and
outputs PKG, User, or Fail.
Loosely speaking, the idea behind the tracing algorithm is
to allow an honest user to present her decryption key along
with a captured decoder box (which decrypts her messages)
to a judge to implicate the PKG of wrongdoing. At the same
time, the tracing algorithm should also prevent a dishonest
user from being able to falsely implicate the PKG of having
created the decoder box.
To deﬁne security for an accountable authority identity
based encryption system, we ﬁrst deﬁne the three following
games.
The IND-ID-CPA game. The IND-ID-CPA game for A-IBE
is very similar to the IND-ID-CPA game for standard IBE [6].
• Setup The challenger runs the Setup algorithm of A-
IBE and gives the public parameters PK to the adver-
sary.
• Phase 1 The adversary runs the Key Generation pro-
tocol with the challenger for several distinct adaptively
chosen identities ID1, . . . , IDq and gets the decryption
keys dID1 , . . . , dIDq .
• Challenge The adversary submits two equal length
messages m0 and m1 and an identity ID not equal to
any of the identities’ queries in Phase 1. The challenger
ﬂips a random coin b and encrypts mb with ID. The
ciphertext C is passed on to the adversary.
• Phase 2 This is identical to Phase 1 except that the
adversary is not allowed to ask for a decryption key for
ID.
• Guess The adversary outputs a guess b0 of b.
The advantage of an adversary A in this game is deﬁned
as Pr[b0 = b] − 1
2 .
We note that the above game can extended to handle
chosen-ciphertext attacks in the natural way by allowing for
decryption queries in Phase 1 and Phase 2. We call such a
game to be the IND-ID-CCA game.
We now deﬁne two games which should model the use-
fulness of the tracing algorithm; any decoder box D should
trace back to the person who created it.
The DishonestPKG game. The intuition behind this game
is that an adversarial PKG attempts to create a decoder box
which will frame the user. Both the adversary and challenger
are given the security parameter λ as input. A second pa-
rameter  = 1
poly(λ) is also given as input. The DishonestPKG
game for A-IBE is deﬁned as follows.
• Setup The adversary (acting as an malicious PKG)
generates and passes the public parameters PK and
an identity ID on to the challenger. The challenger
checks that PK and ID are well-formed and aborts if
the check fails.
• Key Generation The challenger and the adversary
then engage in the key generation protocol to generate
a decryption key for the identity ID. If neither party
aborts, then the challenger gets the decryption key dID
as output.
• Decryption Queries The adversary adaptively queries
ciphertexts C1, . . . , Cq to the challenger and the chal-
lenger replies with the decrypted values.
• Create Decoder Box The adversary outputs a de-
coder box D.
Let SF denote the event that the adversary wins this
game, which happens if the following two conditions hold:
• The decoder box D is -useful for ID, i.e.
Pr[D(Encrypt(M, ID, PK)) = M ] > 
• The tracing algorithm incorrectly implicates the user,
i.e. TraceD(ID, dID, ) = User
The advantage of an adversary A in this game is deﬁned as
Pr[SF ] where the probability is taken over the random coins
of Trace.
We note that unlike the weak black box model in Goyal
[17], our model includes a decryption queries phase where
the adversary adaptively queries the challenger with a se-
quence of ciphertexts. This phase could potentially help the
adversary deduce information about the decryption key of
dID if it is able to present a maliciously formed ciphertext
and get the challenger try to decrypt it.
The Selective-ID DishonestUser game. The intuition be-
hind this game is that some colluding set of users ID1, . . . , IDq
attempts to create a decoder box which will frame the PKG.
Both the adversary and challenger are given the security pa-
rameter λ as input. A second parameter  = 1
poly(λ) is also
given as input. The Selective-ID DishonestUser game for A-
IBE is deﬁned as follows.
• Select ID The adversary announces an ID? to the
challenger.
• Setup The challenger runs the Setup algorithm of A-
IBE and sends the public parameters PK to the adver-
sary.
• Key Generation Queries The adversary runs the
Key Generation protocol with the challenger for sev-
eral distinct adaptively chosen identities ID1, . . . , IDq
and gets the decryption keys dID1 , . . . , dIDq .
• Create Decoder Box The adversary outputs a de-
cryption key dID? and a decoder box D for the identity
ID? announced in the Select ID phase.
Let DF denote the event that the adversary wins this
game, which happens if the following two conditions hold:
• The decoder box D is -useful for ID, i.e.
Pr[D(Encrypt(M, ID, PK)) = M ] > 
• The tracing algorithm incorrectly implicates the PKG,
i.e. TraceD(ID, dID, ) = PKG
The advantage of an adversary A in this game is deﬁned
as Pr[DF ] where the probability is taken over the random
coins of Trace.
We note that one can also deﬁne a full DishonestUser game
where the adversary does not have to declare ID? in advance.
Our construction is only proven secure with the Selective-
ID DishonestUser game, and this weakening can be seen as
similar to weakening of the IND-ID-CPA game by some pre-
viously published papers [11, 3, 23, 19].
Definition 1. An Accountable Authority Identity-Based
Encryption scheme is secure if for any polynomial time ad-
versary A and any parameter  =
poly(λ) , A has at most
a negligible advantage (in λ) in the IND-ID-CPA game, the
DishonestPKG game and the Selective-ID DishonestUser game.
1
4. THE MAIN CONSTRUCTION
In this section, we give a construction of a secure A-IBE
scheme based on the decisional BDH assumption. The con-
struction will borrow ideas from the second construction of
Goyal [17] and the attribute-based encryption schemes of
Sahai-Waters [23] and Goyal et. al. [19]. It will be helpful
to keep in mind that there will be a set of attributes associ-
ated with each decryption key as well as a set of attributes
associated with each ciphertext. In the context of attribute-
based encryption these attributes are viewed as meaningful
meta-data; however for our purposes, most of the attributes
only serve as a tool to enable us to determine who is held
accountable for creating a captured decoder box. For this
reason, we will refer to these as the dummy attributes (cf.
dummy attributes in Goyal [17]).
4.1 Main Idea
The main idea in our construction is to create a pol-
icy on the dummy attributes in such a way that any ran-
domly chosen decryption key can decrypt almost all cipher-
texts. The tracing algorithm will hone in on the cipher-
texts the key cannot decrypt in attempt to catch a dis-
honest PKG. The structure of attributes in a user key is
formed as: a portion connected to the ID, and then m “par-
allel” repetitions each consisting of of k (out of n) dummy
attributes. Thus, the user’s set of attributes will loosely
look like (ID,I1, . . . ,Im), where each Ij will consist of k
attributes. A ciphertext will have a similar attribute struc-
ture, which we can loosely write as (ID,J1, . . . ,Jm) where
each Jj will also consist of k attributes. The policy can be
stated as: A user can decrypt a ciphertext if and only if
(the ID portion matches) AND (I1 ∩ J1 contains at least τ
attributes) AND . . . AND (Im ∩ Jm contains at least τ at-
tributes). To enforce this policy, our construction will make
use of the key-policy attribute-based encryption scheme of
Goyal et. al.
[19]. By appropriately choosing the number
of dummy attributes k (in the decryption key and cipher-
text) and the threshold τ , we guarantee that a randomly
encrypted ciphertext can be decrypted with high probabil-
ity (we will later present a modiﬁcation of the scheme that
achieves perfect completeness as well). An example is pro-
vided in Appendix A demonstrating how to appropriately
choose these parameters.
Our construction will focus on satisfying the security of
the DishonestPKG game and the Selective-ID security of the
DishonestUser game. As for satisfying IND-ID-CPA secu-
rity, we demonstrate how to combine our scheme with a
IND-ID-CPA secure IBE scheme (such as the ones found in
Waters [25] or Gentry [16]). We now present our main con-
struction.
4.2 The Construction
G1 is a bilinear group of prime order p, and let g be a
generator of G1. In addition, let e : G1 × G1 → G2 denote
a bilinear map. We deﬁne the Lagrange coeﬃcient ∆i,S for
i ∈ Zp and some set S ⊂ Zp to be
∆i,S(x) := Y
j∈S\{i}
x − j
i − j
.
We represent the identities as strings of length ‘ (since
an identity ID ∈ Zp, ‘ is the number of bits required to
represent an element in Zp). Let n and m be chosen as “de-
terrence” parameters:
looking ahead, our proofs will show
that a malicious PKG can only succeed with probability
negligible in n. For the sake of our proofs, we set n to
be equal to the global security parameter λ and m be super-
logarithmic in n, say m = log2(n). We shall denote the sets
{1, . . . , ‘},{1, . . . , n},{1, . . . , m} by [‘], [n], [m], respectively,
and the ith bit of the identity ID with IDi. We furthermore
ﬁx a number of dummy attributes k that is a constant frac-
tion of n, and a decryption threshold τ as explained above
(in Appendix A, we give an example using explicit values).
Our scheme is as follows:
Setup For each i ∈ [‘], choose two numbers ui,0 and ui,1
uniformly at random from Zp such that all 2‘ numbers are
diﬀerent. In addition, for each i ∈ [n] and j ∈ [m] choose a
ti,j uniformly at random from Zp. Also choose a number y
uniformly at random in Zp.
The public parameters are:
PK = h{(Ui,j = gui,j ) : i ∈ [‘], j ∈ {0, 1}},
{(Ti,j = gti,j ) : i ∈ [n], j ∈ [m]}, Y = e(g, g)y, gi
The master key is:
MK = h{ui,j : i ∈ [‘], j ∈ {0, 1}},{(ti,j) : i ∈ [n], j ∈ [m]}, yi
Key Generation Protocol The high level idea of our key
generation protocol is to allow the user to obliviously choose
which dummy attributes he wants (using a k-out-of-n obliv-
ious transfer) on each “repetition”. The attributes are rep-
resented by distinct elements in Zp, thus attribute 1 in the
ﬁrst repetition will be represented by a diﬀerent element
than attribute 1 in the second repetition. These repetitions
are performed in parallel and will be viewed as individual
components of our key. We want a policy that he can only
decrypt when the ciphertext shares τ of these attributes (for
each component). Additional care needs to be taken to en-
sure the simulatability of this protocol (which is crucial to
our security proofs) while still keeping it as eﬃcient as pos-
sible. The key generation protocol between PKG and a user
U (with the identity ID) proceeds as follows.
1. U aborts if the published values in the public key are
not all diﬀerent.
2. PKG generates m + 1 random numbers y0, . . . , ym from
Zp such that y0 + ··· + ym = y. We will use y0 to
tie in the identity and y1, . . . , ym for the the dummy
attribute sets.
3. PKG generates ‘ random numbers r1, . . . , r‘ from Zp
such that r1 + ··· + r‘ = y0.
4. PKG generates m random polynomials (of degree τ−1)
q1, . . . , qm with qj(0) = yj.
5. PKG computes the key components di = gri/ui,IDi for
all i ∈ [‘] and sends them to U . It also computes key
components di,j = gqj (i)/ti,j for all i ∈ [n], j ∈ [m] and
stores them.
6. PKG chooses random permutations π1, . . . , πm ∈ Sn.
Looking ahead, this step will help the simulator (in
the proof of security) enforce a particular choice of the
dummy attributes on him. We denote π = (π1, . . . , πm).
7. PKG and U then engage in m executions of a k-out-
of-n oblivious transfer protocol where PKG acts as the
sender and U acts as the receiver. In the jth execu-
tion, the private input of PKG is the key components
{dπj (i),j}n
i=1 and the private input of U is a set Ij of
k randomly selected dummy attributes. The private
output of U is the key component {πj(i), dπj (i),j}i∈Ij .
8. PKG sends U the permutation list π. U checks if he
got the right key components as per π (and aborts if
the check fails).
9. U sets d = ({di}i∈[‘],{(Ij,{di,j}i∈Ij )}j∈[m]) and runs
a key sanity check on d, which we will deﬁne. U aborts
if the check fails. Finally, U sets the decryption key
dID = d.
Key Sanity Check We speciﬁcally name this subroutine
of the key generation protocol for later reference in the se-
curity analysis (Section 4.4). Given a decryption key dID =
({di}i∈[‘],{(Ij,{di,j}i∈Ij )}j∈[m]) for an identity ID, we de-
ﬁne a (deterministic) algorithm to check the well-formedness
of this key.
1. For each j ∈ [m], let S be the ﬁrst τ elements of Ij.
Verify that every point x ∈ Ij lies on the polynomial
interpolated by the points in S:
e(dx,j, Tx,j) ?= Y
i∈S
e(di,j, Ti,j)∆i,S (x)
2. Set Yj = Qi∈S e(di,j, Ti,j)∆i,S (0).
3. Finally, check that
Y ?= Y
i∈[‘]
e(Ui,IDi , di) Y
j∈[m]
Yj
If all of the above are veriﬁed, then the key sanity check
passes, otherwise it fails.
Encryption To encrypt a message M ∈ G2 under an iden-
tity ID, choose a random value s ∈ Zp and a subset Jj ⊂ [n]