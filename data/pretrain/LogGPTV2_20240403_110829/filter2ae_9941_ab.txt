    Evaluate expression: 26820 = 000068c4
    Created: Thu Feb  8 09:17:33.964 2018 (UTC + 8:00)
    Kernel:  0 days 0:00:00.000
    User:    0 days 0:00:00.000
    ***
    Evaluate expression: 11336 = 00002c48
    Created: Thu Feb  8 10:41:56.790 2018 (UTC + 8:00)
    Kernel:  0 days 0:00:00.000
    User:    0 days 0:00:00.000
从列表可知，05bb0线程，花的CPU时间最长。切换到这个线程。执行k命令，观察它的执行经过。
有人说，人生有三个基本问题，从哪里来，到哪里去，现在在干什么。软件何尝不是如此呢？但人生的三问题，比较难回答。而软件的三个问题一条k命令的结果便是答案。
从上图看，这个线程来自wwbizsrv模块，也就是旺旺服务的主程序，因为没有符号文件，我们只能看到几个非常粗略的参照物。CPU在wwbizsrv模块中执行了几个函数后，开始调用系统的WaitForSingleObject函数，等待信号，进入内核。概括说来，这个线程来自旺旺服务的主模块，目前在等待信号，处于休息状态，它要往哪里去呢？
“读硬盘啊！”
根据老雷推测，它现在是休息一会，休息好了，继续玩硬盘。或者说，写这段代码的同行也知道，一直玩硬盘不行，要等一会，玩一下，等一会，玩一下。
等多久呢？看WaitForSingleObject函数的参数就知道了，第二个参数是001b7740 。十六进制的，不好理解，转换一下：
    0:002> ? 001b7740 
    Evaluate expression: 1800000 = 001b7740
单位是毫秒，换算成分钟是30，哦，看来是要等待30分钟。如此看来，老雷刚才采样3分钟能捕捉到这个事件，也是幸运啊。亦或是天意。
轻敲键盘，对读文件之要塞处埋个断点，bp ntdll!NtReadFile，并给任务管理器做个截图，留作后面比较，然后先做做其它事情。
#### 疾风骤雨
半小时很快过去，断点命中。果然是刚才的线程。
    0:002> kcn
     # 
    00 ntdll!NtReadFile
    01 KERNELBASE!ReadFile
    02 wwbizsrv!curl_formfree
    03 wwbizsrv!curl_formfree
    04 wwbizsrv!curl_formfree
    05 wwbizsrv!curl_formfree
    06 wwbizsrv!curl_formfree
    07 wwbizsrv!OPENSSL_Applink
    08 wwbizsrv!OPENSSL_Applink
    09 KERNEL32!BaseThreadInitThunk
    0a ntdll!__RtlUserThreadStart
    0b ntdll!_RtlUserThreadStart
再对打开文件的系统调用设置断点，命中后观察文件名，果然是在读旺旺的DLL：
    0:002> dU 01db22e8 
    01db22e8  "c:\program files (x86)\aliwangwa"
    01db2328  "ng\9.12.02c\appmodel.dll"
调整前面的两个断点，让其自动打印和自动恢复执行，因为预计要读很多个文件，对于读很多次，如果每次手动观察，那太累了。自动断点设置好后，恢复旺旺执行，果然输出不断：
哗哗地输出了几十秒钟后，终于安静下来了，一波暴风雨过去了。上面截图只是疯狂输出的一小小部分。其中靠下面的可以看到就是我们前面提到的aef.dll。
疯狂过后，看浏览自动输出，可以看到旺旺似乎是把旺旺客户端的所有文件都读了一遍，观察旺旺目录的大小，221MB。
再观察任务管理器，I/O读取字节指标已经由几分钟前的1724518253771，上升到1742116289711。
把疯狂前后的两个数字相减：
    0:008> ?? 1742116289711-1724518253771
    int64 0n17598035940
    0:008> ? 0n17598035940
    Evaluate expression: 17598035940 = 00000004`18ecb7e4
差值大约是16.38GB。
    0:008> ?? 17598035940/(1024*1024*1024.0)
    double 16.389448139816523
#### “读你198遍，我不厌倦”
聪明的读者看到这里可能有个疑惑，整个目录的大小为221MB，那么读一遍怎么在任务管理器里会上升16个GB呢？
坦率说，老雷起初也很困惑。后来仔细阅读WinDBG的输出信息，突然明白，天啊，原来旺旺不是只读一遍，也不是读两遍，也不是10编，20遍，而是难以计数的遍数。
为了精确统计到底读了多少遍，老雷特意把输出结果复制到VC编辑器中，然后查找和替换aef.dll，发现有198遍。
直接把198*221，大约是42GB，那么旺旺可能每一遍不是读整个目录，而是目录中的重要文件。具体清单可以查WinDBG的输出，暂不追究。
那么旺旺为什么重复读自己的文件呢？
老雷推测，旺旺读自己文件的目的是为了检查文件是否被篡改。应该是出于安全考虑吧，这是可以理解的。但是反复读这么多次就没有道理了。
为什么读这么多次呢？可能在某一个函数里有个写的不好的循环，也可能是团队协作不好，各自写代码，各自读文件，没有复用读到的文件内容。也可能是某个地方的代码存在瑕疵。（如果此文的点赞次数超过2000，那么老雷便再花半天时间，找到198次的下落）
于是乎，有读者可能会问，这样的问题，测试不会发现么？从老雷几次分析阿里软件的经验来推测，阿里的同行们似乎很少做性能测试。他们或许是觉得不需要，有那么多用户测试呢。
:-)
对于这个问题，测试的难度也有一点，看起来是每半小时疯狂读一次，那么测试的如果不仔细，那么可能发现不了。
那么是谁做的这样的设计呢？设计时就没有考虑到性能的影响么？大家没有review过这个设计么？团队里的软件架构师呢？高级程序员呢？项目经理呢？开发经理呢？
也有人想知道，这样做的害处到底有多大呢？简单回答，当这样的疯狂读磁盘动作开始后，系统里的磁盘I/O队列会变得很长。磁盘队列长意味着读磁盘要排长队。
磁盘是系统的关键部件，很多操作都依赖磁盘。受影响的不仅仅是文件读写，还有系统里的Page
Fault处理。因此，长的磁盘队列会让磁盘成为系统的瓶颈，影响整个系统的性能。顶层的表现就是系统缓慢，反应不灵活，甚至出现明显的卡顿。
那么有人问，安全是必须的，不这样做可以怎么做呢？首先不要重复那么多次，这个是初级程序员都懂的吧？其次是非要监视文件变化，怕黑客篡改，那么可以订阅文件系统的文件修改事件啊。那样不仅开销小，而且可以及时收到通知。现在这个这样，每半个小时，胡乱地读一番，聪明的黑客可能在这个半小时的间隙里早把想做的事情做好了。安全重要，但是如何做安全，是要讲究方法和策略的啊。
马云先生说过，阿里早期发展时遇到的最大问题是“信任”问题，买家不相信卖家，不敢付钱，卖家不相信买家，不敢发货.......最后的解决方法是通过数据建立信任，什么是数据，网页上的每一句描述，旺旺聊天里的每一次对话，都是数据，都是凭证，都是信任的基础。从这个角度上看，我们能更好理解地阿里为什么不复用现成的QQ，而是自己花力气开发一个旺旺。从这个角度来看，旺旺对于阿里的成功乃至于整个中国互联网的蓬勃发展都是有巨大贡献的，可谓功勋卓著。
但是也有名人说过，信任很脆弱，是很容易破碎的。今天，广大的用户因为信任阿里，所以大家都几乎不犹豫的安装了旺旺。但是看到旺旺如此疯狂地访问硬盘，无谓地消耗系统资源，老雷真的很生气，其它用户可能也很生气。惹恼了的用户可能把这个淘气的孩子赶出系统。刚刚，老雷已经把排名在旺旺后的DELL程序和Akamai程序删除掉了，并把旺旺服务设置为禁用状态，只允许其在规定时间运行，并希望阿里的同行能早日修正这个问题。
**欢迎关注作者公众号**
* * *