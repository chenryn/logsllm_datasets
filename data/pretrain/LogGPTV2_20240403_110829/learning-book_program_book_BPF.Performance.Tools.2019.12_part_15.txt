## Page 118
### 3.4 BCC Tool Checklist

#### 3.4.1 ext4slower
`ext4slower(8)` traces common operations from the ext4 file system (reads, writes, opens, and syncs) and prints those that exceed a time threshold. This tool can help identify or rule out performance issues related to an application waiting on slow individual disk I/O via the file system. Variants of `ext4slower(8)` are available for other file systems, including `btfsslower(8)`, `xfsslower(8)`, and `zfsslower(8)`. For more details, see Chapter 8.

#### 3.4.2 biolatency
```sh
biolatency -B
Tracing block device I/O...
Hit Ctrl-C to end.
^C
```
Output:
```
nsecs     count
0 -> 1   : 16335
2 -> 3   : 2272
|*****
4 -> 7   : 3603
*.......
8 -> 15  : 4328
[*.........
16 -> 31 : 625
32 -> 63 : 5815
|+**+**++*+**++
64 -> 127: 0
128 -> 255: 0
256 -> 511: 0
512 -> 1023: 1
```
`biolatency(8)` traces disk I/O latency (the time from device issue to completion) and shows this as a histogram. This tool provides a more detailed explanation of disk I/O performance compared to the averages shown by `iostat(1)`. The example above shows a multi-modal distribution with one mode between 0 and 1 milliseconds and another mode centered around the 8- to 15-millisecond range. Outliers, such as a single outlier in the 512- to 1023-millisecond range, are also visible. For more details, see Chapter 9.

#### 3.4.3 biosnoop
```sh
+biosnoop
TIME(s) COMM PID DISK T SECTOR BYTES LAT(ns)
0.000004001 supervise 1950 xvdia1 R 13092560 4096 0.74
0.001469001 supervise 1956 xvda1 R 13092440 4096 1.24
0.001588002 supervise 1956 xvda1 W 13115128 4096 1.09
1.022346001 supervise 1950 xvdia1 W 13115272 4096 0.98
```
`biosnoop(8)` prints a line of output for each disk I/O, including latency. This allows you to examine disk I/O in more detail and look for time-ordered patterns (e.g., reads queuing behind writes). For more details, see Chapter 9.

#### 3.4.4 cachestat
```sh
cachestat
HITS MISSES DIRTIES BITRATIO BUFFERS_MB CACHED_MB
53401 2755 20953 95.095 14 90223
49599 4098 21460 92.37 14 90230
16601 2689 61329 86.065 1.4 90381
15197 2477 58028 85.998 14 90522
```
`cachestat(8)` prints a one-line summary every second (or at a custom interval) showing statistics from the file system cache. Use this tool to identify a low cache hit ratio and a high rate of misses, which may indicate areas for performance tuning. For more details, see Chapter 8.

#### 3.4.5 tcpconnect
```sh
tcpconnect
PID COMM IP SADDR IP DADDR PORT
1479 Celnet 127.0.0.1 127.0.0.1 23
1469 curl 54.245.105.25 54.67.101.145 80
1991 telnet 6::1 ::1 23
2015 ssh fe80::2000:bff:fe82:3ac fe80::2000:bff:fe82:3ac 22
```
`tcpconnect(8)` prints one line of output for every active TCP connection, including source and destination addresses. Look for unexpected connections that may point to inefficiencies in application configuration or potential intruders. For more details, see Chapter 10.

#### 3.4.6 tcpaccept
```sh
tcpaccept
PID COMM IP RADDR IP LADDR PORT
907 sshd 192.168.56.1 192.168.56.102 22
907 sshd 127.0.0.1 127.0.0.1 22
5389 per1 1234:ab12:2040:5020:2299:0:5:0 1234:ab12:2040:5020:2299:0:5:0 7001
```
`tcpaccept(8)` prints one line of output for every new TCP connection, including source and destination addresses. For more details, see Chapter 10.

#### 3.4.7 tcpretrans
```sh
tcpretrans
TIME PID IP LADDR:LPORT > RADDR:RPORT STATE
01:55:05 0 10.153.223.157:22 > 69.53.245.40:34619 ESTABLISHED
01:55:05 0 10.153.223.157:22 > 69.53.245.40:34619 ESTABLISHED
01:55:17 0 10.153.223.157:22 > 69.53.245.40:22957 ESTABLISHED
```
`tcpretrans(8)` prints one line of output for every TCP retransmit packet, including source and destination addresses and the kernel state of the TCP connection. TCP retransmissions cause latency and throughput issues. For retransmissions where the TCP session state is `ESTABLISHED`, look for problems with external networks. For the `SYN_SENT` state, this may point to target kernel CPU saturation and kernel packet drops. For more details, see Chapter 10.

#### 3.4.8 runqlat
```sh
runqlat
Tracing run queue latency... Hit Ctrl-C to end.
^C
usecs    count
0 -> 1   : 233
2 -> 3   : 742
4 -> 7   : 203
8 -> 15  : 173
16 -> 31 : 24
32 -> 63 : 0
64 -> 127: 30
128 -> 255: 3
512 -> 1023: 5
1024 -> 2047: 27
2048 -> 4095: 30
4096 -> 8191: 809
8192 -> 16383: 64
```
`runqlat(8)` times how long threads were waiting for their turn on the CPU and prints this time as a histogram. Longer-than-expected waits for CPU access can be identified using this tool, which can help diagnose issues related to CPU saturation, misconfigurations, or scheduler issues. For more details, see Chapter 6.

#### 3.4.9 profile
```sh
profile
Sampling at 49 Hz of all threads by user + kernel stack... Hit Ctrl-C to end.
^C
[...]
copy_user_enhanced_fast_string
_copy_from_iter_full
tcp_sendmsg_locked
inet_sendmsg
sock_write_iter
new_sync_write
_vfs_write
vfs_write
sys_write
entry_SYSCALL_64_after_hwframe
[unknown]
[unknown]
iperf (24092)
58
```
`profile(8)` is a CPU profiler that samples stack traces at timed intervals and prints a summary of unique stack traces and a count of their occurrence. The output above shows one stack trace with an occurrence count of 58 times. For more details, see Chapter 6.

### 3.5 Summary
Performance analysis aims to improve end-user performance and reduce operating costs. There are numerous tools and metrics available, and choosing the right ones can be overwhelming. Performance methodologies can guide you through these choices, showing where to start, steps for analysis, and where to end.

This chapter summarizes performance analysis methodologies, including workload characterization, latency analysis, the USE method, and checklists. It includes a Linux performance analysis checklist that can be your starting point for any performance issue. This checklist may help you solve issues outright or provide clues about where the performance issue is and direct further analysis with BPF tools. Additionally, this chapter includes a BPF checklist of BCC tools, which are explained in more detail in later chapters.

---

## Page 122
### BCC

The BPF Compiler Collection (BCC; sometimes written as lowercase bcc after the project and package names) is an open-source project that contains a compiler framework and libraries for building BPF software. It is the main front-end project for BPF, supported by the BPF developers, and is usually where the latest kernel tracing BPF additions are first used. BCC also contains more than 70 ready-to-run BPF performance analysis and troubleshooting tools, many of which are covered in this book.

BCC was created by Brendan Gregg in April 2015. Encouraged by Alexei Starovoitov, I joined the project in 2015 and became a major contributor of performance tools, documentation, and testing. There are now numerous contributors, and BCC is a default server install at companies including Netflix and Facebook.

### Learning Objectives:
- Gain knowledge of BCC features and components, including tools and documentation.
- Understand the benefits of single-purpose vs. multi-purpose tools.
- Learn how to use the `funccount(8)` multi-tool for event counting.
- Learn how to use the `stackcount(8)` multi-tool for discovering code paths.
- Learn how to use the `trace(8)` multi-tool for per-event custom printing.
- Learn how to use the `argdist(8)` multi-tool for distribution summaries.
- (Optional) Get exposure to BCC internals.
- Be aware of BCC debugging techniques.

This chapter introduces BCC and its features, shows how to install it, provides an overview of its tools, tool types, and documentation, and ends with a tour of BCC internals and debugging. If you wish to develop your own new tools, be sure to study both this chapter and Chapter 5 (bpftrace), and you will be able to choose the front end that best suits your needs. Appendix C summarizes BCC tool development using examples.

---

## Page 123
### 4.1 BCC Components

The high-level directory structure of BCC is shown in Figure 4-1.

```
BPF Compiler Collection (BCC)
├── tools
├── man
│   └── 1
├── docs
├── src
└── gui
```

This structure organizes the various components of BCC, including the tools, manual pages, documentation, source code, and graphical user interface (GUI) elements.