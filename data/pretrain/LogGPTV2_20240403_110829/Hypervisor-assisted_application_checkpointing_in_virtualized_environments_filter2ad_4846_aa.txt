title:Hypervisor-assisted application checkpointing in virtualized environments
author:Min Lee and
A. S. Krishnakumar and
Parameshwaran Krishnan and
Navjot Singh and
Shalini Yajnik
Hypervisor-Assisted Application Checkpointing in Virtualized Environments 
Min Lee∗, A. S. Krishnakumar†, P. Krishnan†, Navjot Singh†, Shalini Yajnik† 
*Georgia Institute of Technology, Atlanta, GA 30332 
†Avaya Labs, Basking Ridge, NJ 07920 
PI:EMAIL, {ask, pk, singh, shalini}@avaya.com 
and 
application-transparent 
Abstract—  
There  are  two  broad  categories  of  approaches  used  for 
checkpointing: 
application-
assisted.  Typically,  application-assisted  approaches  provide  a 
more flexible and light-weight mechanism but require changes 
to  the  application.  Although  most  applications  run well  under 
virtualization  (e.g.  Xen  which  is  being  adopted  widely),  the 
addition  of  application-assisted  checkpointing  -  used  for  high 
availability  -  causes  performance  problems.  This  is  due  to  the 
overhead  of  key  system  calls  used  by  the  checkpointing 
techniques under virtualization. 
To  overcome  this,  we  introduce  the  notion  of  hypervisor-
assisted  application  checkpointing  with  no  changes  to  the  guest 
operating  system.    We  present  the  design  and  a  Xen-based 
implementation  of  our  family  of  application  checkpointing 
techniques. Our experiments show performance improvements 
of  4x  to  13x  in  the  primitives  used  for  supporting  high 
availability compared to purely user-level approaches. 
Keywords  -  virtualization;  hypervisor;  Xen;  checkpointing; 
high-availabiliy 
I. 
 INTRODUCTION 
Checkpoint/restart is one of the standard mechanisms for 
achieving  high  availability  in  long  running  computing 
systems   [1].  The  state  of  the  application  and/or  the  OS  is 
either stored locally or carried over the network to a backup 
machine  for  future  recovery.  There  has  been  extensive 
research in the area of checkpointing in the last two decades 
 [2] [3] [4] [5] [6] [7] [8] [9].  Libckp   [2],  libckpt   [3],  Condor 
checkpointing   [5],  are  some  of  the  initial  systems  that 
incorporated libraries for automated checkpointing.  
Research  literature  classifies  checkpointing  approaches 
into  two  main  categories  –  (a)  application-transparent 
checkpoints  [1] [2] [3], where the application does not need to 
be  modified  or  be  aware  of  the  checkpoints  happening,  and 
(b)  application-assisted  checkpoints   [10] [11],  where  the 
application  defines  the  data  to  be  checkpointed  and  drives 
the  checkpoints.    The  application-transparent  approaches 
have the benefit of not requiring changes to the application. 
On  the  other  hand,  they  have  to  checkpoint  all  the 
application  state  and  incur  higher  performance  overheads. 
Although 
require 
changes  to  the  application,  they  are  usually  more  efficient 
since they can accurately determine the checkpoint size and 
frequency  based  on  application  demands.  Incremental 
checkpoints   [3] [12]  are  one  way  to  reduce  checkpoint 
overheads. As the name suggests, instead of whole memory 
checkpoints,  only  differences  from  the  previous  state  are 
and 
checkpointed.  Both 
the  application-assisted  approaches 
application-transparent 
the 
application-assisted  approaches  can  benefit  from  the  use  of 
incremental checkpoints. 
Virtualization  technology  is  being  widely  adopted  as  a 
means  for  server  consolidation.  Most  application  servers 
deployed  under  virtualized  environments  need  high 
availability,  so  that  they  can  provide  24×7  service  to  their 
geographically  diverse  set  of  clients.  The  work  on  replica 
coordination  techniques  by  Bressoud   [13]  was  one  of  the 
first 
to  propose  high  availability  under  virtualization.  
Virtualization  platforms  like  KVM   [14],  VMware  vSphere 
 [15]  and  Xen   [16],  provide  mechanisms  like  snapshots  and 
live  migration   [17],  for  achieving  high  availability  under 
failure  conditions.  The  work  by  Wang  et  al.   [18]  proposes 
checkpointing  of  virtual  machines  using  a  special-purpose 
checkpointing  VM.  Remus   [19]  and  Kemari   [20]  are 
examples 
incremental 
checkpointing  frameworks  in  the  Xen  environment.  Both 
techniques  periodically  copy  the  disk  and  memory  state  of 
the  virtualized  OS  and  the  applications  to  a  backup  system.  
Since each checkpoint copies the entire changed state of the 
virtual machine, the data processing and migration overheads 
can  be  significantly  high,  especially  for  applications  that 
need high performance and have a limited data set that they 
need  for  recovery.  Our  work  targets  such  applications  and 
focuses  on  application-assisted  incremental  checkpointing 
techniques. 
application-transparent 
of 
this 
them 
On the face of it, application-assisted checkpoints can run 
unchanged  on  virtualized  platforms.  While 
is 
functionally true, we have observed that there is a significant 
performance  penalty  arising  from  the  inherent  nature  of 
virtualization implementation. Understanding and mitigating 
this  issue  is  the  main  focus  of  our  effort.  Incremental 
checkpoints  are  usually  implemented  using  a  page-fault 
based mechanism. Pages dirtied since the last checkpoint are 
tracked  by  making 
the 
application/OS fault when data is written to those pages  [21]. 
Usually 
implementation  of 
incremental  checkpoints  is  very  efficient.  However,  in 
virtualized  environments,  due  to  the  overheads  related  to 
trapping multiple times to the hypervisor, the primitives used 
to  implement  the  page  fault  mechanism  become  very 
expensive. (This is explained later in Section  II.D.) Our work 
in this paper is targeted to address this overhead so that these 
efficiently 
primitives 
under 
virtualization, 
application-assisted 
checkpointing techniques to retain their high performance.  
implemented 
enabling 
in  native  environments, 
read-only  and  having 
thereby 
can 
be 
In  this  paper,  we  introduce  a  new  model:  hypervisor-
the 
assisted  application  checkpointing.  In  our  model, 
hypervisor  of  the  virtualization  platform  provides  efficient 
primitives that assist applications to track page fault behavior. 
We also introduce a novel mechanism for applications to use 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:43:59 UTC from IEEE Xplore.  Restrictions apply. 
978-1-4244-9233-6/11/$26.00 ©2011 IEEE371these  hypervisor-provided  primitives.  Rather  than  the  usual 
method  of  only  allowing  a  guest  operating  system  to  use 
hypervisor services, we enable an application running inside 
the  guest  OS  to  invoke  these  primitives  in  the  hypervisor 
directly  and  securely,  without  any  changes  to  the  guest 
operating  system.  This  allows  for  better  code  maintenance 
and  easier  deployment,  since  the  underlying  operating 
system  in  which  the  checkpointed  application  is  deployed 
does not need to be changed to use our technique. Bypassing 
the  operating  system  for  specific  features  the  hypervisor 
provides,  and  doing  so  securely  is  novel  even  from  the 
virtualization  standpoint  and  is  motivated  by  application-
assisted checkpointing.  
and 
describe 
paradigm 
techniques 
We  present  a  family  of 
that  use  our 
their 
hypervisor-assistance 
implementation in the Xen virtualization platform. We have 
conducted  detailed  experiments  including  microbenchmark 
studies  and  performance  results  for  basic  data  structure 
operations  used  in  standard  application  transactions.  Our 
experimental  results  demonstrate  a  significant  performance 
improvement: specifically, a 4x-13x boost in performance in 
the  page  fault  primitives  that  lie  at  the  heart  of  application 
checkpointing techniques.  
The  rest of  the paper  is organized  as  follows.  Section   II 
introduces some basic concepts in application checkpointing 
and virtualization and motivates the performance problem of 
checkpointing  under  virtualization.  In  Section 
 III,  we 
introduce our model of hypervisor-assisted checkpointing, its 
key  features,  and  implementation  challenges.  Section   IV 
discusses our family of checkpointing approaches. Section  V 
explores 
the  performance  of  our  approaches  using 
microbenchmarks.  In  Section   VI,  we  use  a  workload-based 
evaluation  using  data  structure  operations  to  study  our 
techniques and conclude in Section  VII. 
II.  CHECKPOINTING AND VIRTUALIZATION 
In  this  section,  we  provide  a  brief  background  of 
checkpointing  and  virtualization  and  outline  the  source  of 
performance 
under 
virtualization.  
A.  Application-Assisted Checkpointing 
checkpointing 
degradation 
of 
In  application-assisted  checkpointing  techniques,  the 
application  usually  defines  memory  areas  that  need  to  be 
checkpointed  for  recovery.  We  call  these  segments  of  the 
memory  as  the  critical  data  area  (CDA).  At  the  end  of  a 
checkpoint cycle, the CDA is saved to disk or synchronized 
to  the  backup  CDA  in  an  atomic  operation.  In  application-
assisted checkpointing, it is the application’s responsibility to 
determine the checkpoint cycle, i.e., the start and end of the 
checkpoint.  Usually,  an  application  transactionalizes  certain 
operations or groups of operations on the critical data area by 
invoking  checkpoint  begin  and  end  calls  at  transaction 
boundaries. This  results in  either all  or  none of  the  changes 
within a transaction being carried over to the backup.  
Figure  1  shows  how  high  availability  is  achieved  by 
checkpointing  data  structures  at  transaction  boundaries.  In 
this example, each list operation in the figure is treated as a 
transaction  by  the  application.  At  the  completion  of  the  list 
operation,  checkpoint  cycle  is  terminated  to  copy  over  the 
modified pages to the backup.  
Primary 
Backup 
List_add() 
List_del() 
checkpoint 
checkpoint 
List_add() 
failover 
Crash 
List_add() 
Figure 1: Checkpoint and recovery 
Application-assisted  checkpointing  approaches  usually 
define  a  simple  API  which  provides  the  application  the 
functionality to declare a critical data area (CDA) and define 
the  start/end  of  a  transaction  or  checkpoint  cycle.  Existing 
code  can  be  modified  to  use  these  primitives  to  define 
checkpointed data and also the transaction boundaries. 
B.  Incremental Checkpointing 
Incremental 
checkpoint  minimizes 
checkpointing 
overhead by synchronizing just the pages that were modified 
after  the  last  checkpoint.  A  page-fault  based  mechanism  is 
typically  used  to  determine  the  modified  (dirty)  pages 
 [3] [12] [21].    At  the  beginning  of  a  checkpoint  cycle,  all 
pages that are part of the CDA are write-protected by using a 
memory protection command (e.g. the mprotect system call). 
When the application tries to modify a write-protected page, 
a protection violation signal is generated. This signal can be 
trapped  by  a  signal  handler.  The  signal  handler  adds  the 
address of the faulting page to the list of changed pages and 
removes the write protection from the page (e.g. by another 
call to mprotect) so that the application can proceed with the 
write. At the end of the checkpoint cycle, the list of changed 
pages  contains  all  the  pages  that  were  modified  in  this 
checkpoint  cycle.  The  program  can 
then  be  paused 
momentarily to save the contents of the changed pages.  We 
call  this  technique  as  page-tracking  (PT)  based,  since  it 
tracks changes at the page-level granularity.   
Existing page-tracking techniques can use an optimization of 
difference computation to detect the changes within the page 
and  then  save  only  the  modified  words  to  the  backup.  This 
trades compute overhead for data reduction.  
C.  Platform Virtualization with Xen 