title:Mitigating DNS DoS attacks
author:Hitesh Ballani and
Paul Francis
Mitigating DNS DoS Attacks
Hitesh Ballani
Cornell University
Ithaca, NY
PI:EMAIL
Paul Francis
Cornell University
Ithaca, NY
PI:EMAIL
ABSTRACT
This paper considers DoS attacks on DNS wherein attackers ﬂood
the nameservers of a zone to disrupt resolution of resource records
belonging to the zone and consequently, any of its sub-zones. We
propose a minor change in the caching behavior of DNS resolvers
that can significantly alleviate the impact of such attacks. In our
proposal, DNS resolvers do not completely evict cached records
whose TTL has expired; rather, such records are stored in a sepa-
rate “stale cache”. If, during the resolution of a query, a resolver
does not receive any response from the nameservers that are re-
sponsible for authoritatively answering the query, it can use the
information stored in the stale cache to answer the query.
In effect, the stale cache is the part of the global DNS database
that has been accessed by the resolver and represents an insurance
policy that the resolver uses only when the relevant DNS servers are
unavailable. We analyze a 65-day DNS trace to quantify the bene-
fits of a stale cache under different attack scenarios. Further, while
the proposed change to DNS resolvers also changes DNS seman-
tics, we argue that it does not adversely impact any of the funda-
mental DNS characteristics such as the autonomy of zone operators
and hence, is a very simple and practical candidate for mitigating
the impact of DoS attacks on DNS.
Categories and Subject Descriptors: C.4 [Performance of Sys-
tems]: Reliability, Availability.
General Terms: Reliability, Security.
Keywords: DNS, Denial of Service, stale cache.
1.
INTRODUCTION
In the recent past, there have been many instances of ﬂooding
attacks on the Domain Name System (DNS) aimed at preventing
clients from resolving resource records belonging to the zone un-
der attack [26-29]. While these attacks have had varying success in
disrupting the resolution of names belonging to the targeted zone,
the threat posed by them to DNS operation is obvious. As a mat-
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for profit or commercial advantage and that copies
bear this notice and the full citation on the first page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior specific
permission and/or a fee.
CCS’08,  October 27-31, 2008, Alexandria, Virginia, USA.
Copyright 2008 ACM 978-1-59593-810-7/08/10 ...$5.00.
ter of fact, DNS’s pivotal role as a precursor to almost all Internet
services implies that such attacks represent a severe threat to the
Internet in general.
In response to such attacks, some of the DNS root-servers and
top-level domain (TLD) servers have been replicated through IP
Anycast [10]. Lately, a number of research efforts have proposed
new architectures for the Internet’s naming system. The key insight
behind these proposals is to decouple the distribution of DNS data
from the hierarchy of authority for the data [8,9]. Once this decou-
pling is done, several mechanisms can be used to make the data dis-
tribution infrastructure highly robust and to ensure its availability in
the face of attacks. For instance, efforts arguing for centralized data
distribution [8] and peer-to-peer based data distribution [7,9,22,24]
represent the two extremes of the design space for such a robust
distribution infrastructure.
However, we are not convinced of the need for a new DNS archi-
tecture involving a new dissemination mechanism to ensure DNS
operation when nameservers are unavailable. Rather, we argue that
a complementary and a much more modest tack to handle DoS at-
tacks on DNS infrastructure is to do away with the need for 100%
availability in the existing architecture. In this paper, we follow this
argument and show that the need for nameserver availability in the
existing DNS framework can be reduced simply through a minor
modification in the caching behavior of DNS resolvers.
Today, DNS resolvers cache the responses they receive from
nameservers to improve lookup performance and reduce lookup
overhead. A resolver can use the cached responses to answer queries
for a duration specified by the time-to-live (TTL) value associated
with the response. We propose to modify the operation of resolvers
such that they do not expunge cached records whose TTL value has
expired. Rather, such records are evicted from the cache and stored
in a separate “stale cache”. Given a query that cannot be answered
based on the cached information, resolvers today traverse down a
hierarchy of DNS zones by querying the authoritative nameservers
for the zone at each step. However, this resolution process fails
if all the nameservers for the zone at any step of this traversal are
unavailable. In such a scenario, we allow resolvers to use the in-
formation stored in their stale cache to answer the query for the
unavailable zone and thus, allow the resolution process to continue.
Modifying DNS resolvers as specified above results in normal
DNS operation when resolvers are able to access nameservers; only
when all the nameservers for a zone do not respond to the queries
from a resolver does the resolver resort to using records for the
zone from its stale cache (stale records). This modification im-
plies that DNS resolvers store the part of the global DNS database
that has been accessed by them and use it when the relevant DNS
servers are unavailable. Consequently, while attackers may be able
to ﬂood nameservers and overwhelm them, resolvers would still
189Client
A? www.cornell.edu 
Resolver
Traversal fails
Cache 
Root-Server
Nameserver
(.edu TLD)
Nameserver
(.cornell.edu)
Figure 1: Traversal down the DNS hierarchy during the reso-
lution of the A-record for www.cornell.edu fails if the .edu TLD
nameservers are under attack.
have the stale records to rely upon. To this effect, this paper makes
the following contributions:
• We present a simple modification in the caching behavior of
DNS resolvers that would make nameserver availability less
critical than it is today and hence, mitigate the impact of DoS
attacks on DNS infrastructure.
• We discuss some details concerning the implementation of a
stale cache in a DNS resolver. Further, our scheme has a num-
ber of practical advantages with regards to protection against
ﬂooding attacks that we discuss in section 4.1.
• We analyze a 65-day DNS trace to quantify the benefits of hav-
ing a stale cache under different attack scenarios and find that
the stale cache can be used to resolve a significant fraction of
client queries even under severe attacks of long duration.
• Using trace-based simulation, we determine the memory foot-
print of the stale cache and find that maintaining even a month’s
worth of stale records requires a small amount of memory.
• While DNS resolvers rely on their stale cache only when the rel-
evant nameservers are unavailable, the fact that the TTL-value
for stale records has expired implies that it is possible that these
records may not be the same as those returned by the actual
nameservers (had they been available). We use the aforemen-
tioned trace to quantify this possibility and find that the proba-
bility of inaccurate records being returned in case of an attack
is very small (<0.5%).
On the ﬂip side, our proposal changes DNS semantics. For ex-
ample, zone owners cannot expect the records served by their name-
servers to be completely evicted by all resolvers within one TTL
period. We analyze problems that may arise due to such semantic
changes; the impact of this and other drawbacks of our scheme are
discussed in section 4.2. This analysis leads us to conclude that
the scheme does not adversely impact any of the fundamental DNS
characteristics such as the autonomy of zone owners. Hence, we
believe that the proposed resolver modification represents a very
simple and practical candidate for alleviating the impact of DoS
attacks on DNS.
2. A SIMPLE IDEA
2.1 DNS Resolvers Today
Clients rely on DNS primarily to map service names to the IP ad-
dresses of the corresponding servers. Typically, clients issue their
queries to a local DNS resolver which maps each query to a match-
ing resource record set (hereon simply referred to as a matching
record) and returns it in the response.1 Each record is associated
with a time-to-live (TTL) value and resolvers are allowed to cache
a record till its TTL expires; beyond this, the record is evicted from
the cache. Given a query to resolve, a resolver executes the follow-
ing actions2:
1. Look up the cache for a matching record. If a matching record
is found, it is returned as the response.
2. If a matching record is not found in the cache, the resolver uses
the DNS resolution process to obtain a matching record. This
involves:
(a) Determine the closest zone that encloses the query and has
its information cached (if no such zone is cached, the en-
closing zone is the root zone and the resolver resorts to
contacting the DNS root-servers). For example, given an A-
record query for the name www.cornell.edu, the resolver de-
termines if records regarding the authoritative nameservers
for the zones .cornell.edu, or .edu (in that order) are present
in its cache.
(b) Starting from the closest enclosing zone, traverse down the
DNS zone hierarchy by querying subsequent sub-zones un-
til the zone responsible for authoritatively answering the
original query is reached or an error response from a zone’s
nameservers implies that the traversal cannot proceed. In
either case, the resolver returns the appropriate response to
the client. Also, all responses (including negative responses
indicating error) during this resolution process are cached
by the resolver.
3. In case the resolution process in (2.b) fails due to the inability
of the resolver to contact all the nameservers of the relevant
zone at any step of the traversal, return a response indicating the
failure. Note that the term “failure” refers only to the scenario
when the traversal is not completed due to the unavailability of
the nameservers of a zone. Figure 1 illustrates this scenario.
2.2 DNS Flooding Attacks
We consider DoS attacks on DNS servers where attackers ﬂood
the nameservers of a zone to disrupt the resolution of records be-
longing to the zone and consequently, any of its sub-zones. In gen-
eral, ﬂooding attacks aimed at denying service to clients take ad-
vantage of the skewed distribution of functionality between clients
and servers. In the case of DNS, the fact that the nameservers for a
zone are completely responsible for serving the zone’s records and
in turn, for the operation of any sub-zones implies that their avail-
ability is critical and makes them an attractive target for ﬂooding
attacks.
2.3 Proposed Resolver Modification
We argue that changing the caching behavior of DNS resolvers
so that they shoulder more of the resolution burden, especially when
nameservers are unavailable, is an effective way to address DNS
ﬂooding attacks. Further, such a modification is possible within
1Note that the matching record may not answer the query; for ex-
ample, it may reﬂect an error condition due to which the query can-
not be answered. Hence, the term “response” includes both positive
and negative responses.
2This is a simplification of the algorithm used by resolvers but suf-
fices for the purpose of exposition. See [14] for a more detailed
version.
Client
A? www.cornell.edu 
Resolver
Root-Server
Nameserver
(.edu TLD)
Traversal fails
.cornell.edu
NS Lookup
Lookup
successful
Nameserver
(.cornell.edu)
Stale Cache 
Cache 
Figure 2: Resolution of the A-record for www.cornell.edu suc-
ceeds: a stale NS record for .cornell.edu allows the traversal to
continue even though the .edu TLD nameservers are inaccessi-
ble.
the existing DNS framework. To this effect, DNS resolvers should
store the responses of the queries they resolve beyond the TTL val-
ues associated with the respective responses and use stale informa-
tion if all the authoritative nameservers for a zone are unavailable.
Thus, the resolvers have the stale information to rely on, in case the
authoritative servers for a zone are overwhelmed due to a ﬂood of
requests. More concretely, we propose the following change in the
operation of DNS resolvers–
Stale Cache: Resolvers do not completely expunge cached records
whose TTL value has expired. Rather, such records are evicted
from the cache and stored in a separate stale cache. In effect, the
stale cache together with the resolver cache represents the part of
the global DNS database that has been accessed by the resolver.
Resolving Queries: In our proposal, the first two steps executed by
a resolver when resolving a query are the same as before. Hence,
given a query, the resolver attempts to respond to it based on the
cached information or through the resolution process. The third
step is modified as follows:
3) In case the resolution process in (2.b) fails due to the inability of
the resolver to contact all the nameservers of the relevant zone at
any step of the traversal, search the stale cache for the required
record. If such a record is found, the resolution process in (2.b)
can continue based on this stale record. Figure 2 illustrates this
scenario.
This modification implies that when (and only when) the authorita-
tive nameservers for a zone are unavailable, the resolver can resort
to using responses from a previously resolved query.
Stale Cache clean-up: Existing resolvers cache the responses to
the queries made during the resolution process in step (2.b). In our
proposal, these responses are also used to evict the corresponding
stale records from the stale cache. For example, during the resolu-
tion of the A record for the name www.cornell.edu, the resolver may
query the authoritative nameservers of the zone .edu for the author-
itative nameservers of the sub-zone .cornell.edu. When a response
containing records regarding these nameservers is received, it is
cached and is also used to evict any nameserver records for .cor-
nell.edu present in the stale cache. Note that this newly cached re-
sponse will be evicted to the stale cache upon expiration of its TTL
value. Also note that all responses (including negative responses)
are used to evict the stale cache. For example, a NXDOMAIN re-
sponse from the nameserver for .edu indicating that the sub-zone
.cornell.edu no longer exists will also lead to eviction of the exist-
ing nameserver record for .cornell.edu in the stale cache. Hence,
this clean-up process ensures that a record stored in the stale cache
always corresponds to the latest authoritative information that the
resolver received.
2.4 Stale Cache Details
From an implementation point of view, a resolver can perform
steps (2.b) and (3) of the query lookup concurrently. For instance,
continuing the earlier example, while the resolver queries the zone
.edu’s nameserver for the nameservers of the sub-zone .cornell.edu,
it can lookup its stale cache for information regarding the name-
servers for .cornell.edu. As mentioned earlier, the information from
the stale cache is used only if the resolver is unable to contact all
the nameservers for .edu and hence, the latency of the stale cache
lookup is not critical. Consequently, the stale cache can even be
maintained on the resolver’s disk. However, as we show in sec-
tion 3.3, even a month’s worth of stale records require a small
amount of storage space and hence, we envision resolvers main-
taining their stale cache in memory.
3. EVALUATION
In order to evaluate the advantages of a stale cache, we collected
DNS traffic at the link that connects the Cornell Computer Science
department’s network to the Internet. The network comprises of
≈1300 hosts. The trace was collected for a period of 65 days – from
21st Nov, 2007 to 24th Jan, 2008. It consists of 84,580,513 DNS
queries and 53,848,115 DNS responses for a total of 4,478,731
unique names. Each collected packet was anonymized to preserve
the privacy of the network’s clients. This included anonymizing the
source and destination IP addresses and the names and addresses in
the DNS part of packet. The fact that the trace was collected at the
network’s border router and not at the resolvers (i.e., the caching
nameservers) that reside inside the network implies that we do not
see all the queries generated by clients. Specifically, client queries
that can be answered based on the cached contents of the resolvers
do not appear in our trace. This quirk of the collection process has
important implications for the results presented here and we discuss
these later in the section.
Given the trace, we can simulate the operation of a stale cache
serving clients in the network under different attack scenarios. Such
a simulation is governed by two key parameters:
• Stale cache size: A stale cache size of x days implies that stale
records are kept in the stale cache for a maximum of x days. In
our simulations, we vary the stale cache size from 1 to 30 days.
Further, in section 3.3 we measure the actual memory footprint
for a stale cache of x days.
• Attack duration: This allows us to evaluate the operation of the
stale cache under attacks of varying durations. For any given
type of attack, we simulate the attack lasting for a duration of 3,
6, 12 and 24 hours.
Hence, to simulate the operation of a 7-day stale cache under an
attack lasting 3 hours, we populate the stale cache using the DNS
queries and responses in the first 7 days of the trace. We then sim-
ulate an attack every 3 hours while ensuring that the stale cache
contains trace data for the past 7 days. This allowed us to have 464
simulation runs ((65-7) days * 8 simulations per day) for a 3-hour
attack while using a 7-day stale cache. Thus, we were able to sim-
ulate a number of attacks for any given stale cache size and attack
duration.
03 Hr
03 Hr
06 Hr
06 Hr
12 Hr
12 Hr
24 Hr
24 Hr
 1
 1
 0.9
 0.9
 0.8
 0.8
 0.7
 0.7
 0.6
 0.6
 0.5
 0.5
 0.4
 0.4
d
d
e
e
r
r
e
e
w
w
s
s
n
n
A
A
s
s
e
e
i
i
r
r
e
e
u
u
Q
Q
f
f
o
o
n
n
o
o
i
i
t
t
c
c
a
a
r
r
F
F
1
1
2
2
3
3
5
5
7
7
10
10
14
14
21
21
30
30
Stale Cache Size (days)
Stale Cache Size (days)
Figure 3: Fraction of Queries Answered using a stale cache of
varying size during an attack wherein none of the nameservers
are operational.
s
s
d
d
r
r
o
o
c
c
e
e
R
R
e
e
t
t
a
a
r
r
u
u
c
c
c
c
A
A
f
f
o
o
n
n
o
o
i
i
t
t
c
c
a
a
r
r
F
F
 1
 1
 0.998
 0.998
 0.996
 0.996
 0.994
 0.994
 0.992
 0.992
 0.99
 0.99
 0.988
 0.988
 0.986
 0.986
 0.984
 0.984
03 Hr
03 Hr
06 Hr
06 Hr