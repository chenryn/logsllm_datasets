The second property is that the type system prevents creating
pointers from high heap levels into the low heap levels. This
property is important because a pointer from a high heap level
to a low heap level would allow modifying low heap level
pointers in a high program context.
Deﬁnition 6. Given a memory m, a heap h, an typing
environment Γ and a heap typing environment Σ we say that
(m, h) is well-formed wrt. (Γ, Σ) if
[τ ] ((cid:2)ref ,◦),
[τ ] ((cid:2)ref ,◦),
, ν) it holds
2) If h(loc1) = ((cid:2)1, μ1), and μ1(n) = loc2 for some n ∈ N,
1b) For all locations loc s.t. Σ(loc) = array(cid:2)p
(cid:3)) = ((cid:2)
(cid:3)
m(x) = loc, and h(loc) = ((cid:2), μ), it holds that (cid:2) = (cid:2)p.
(cid:3) = (cid:2)p.
h(loc) = ((cid:2), μ), μ(n) = loc
that (cid:2)
and h(loc2) = ((cid:2)2, μ2) then (cid:2)1 (cid:25) (cid:2)2.
1a) For all variables x s.t. Γ(x) = array(cid:2)p
, and h(loc
(cid:3)
We deﬁne well-formed conﬁgurations to be conﬁgurations
in which the command is well-typed, the memory and heaps
are heap level bound and are free of dangling pointers. Finally
we also capture the intuition about the relation between Γ and
Σ: That Σ contains the type of the “content” of a location,
wheres Γ contains the type of the location.
704
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:19:35 UTC from IEEE Xplore.  Restrictions apply. 
Deﬁnition 7 (Well-formed conﬁguration). Given a conﬁgura-
tion (cid:9)c, pc, m, h, t(cid:10), a typing environment Γ and a heap typing
environment Σ, say that the conﬁguration is well-formed w.r.t.
Γ, Σ, if
1) c (cid:13)= stop ⇒ Γ, pc (cid:24) c
2) (m, h) is free of dangling pointers.
3) (m, h) is well-formed wrt. (Γ, Σ).
4) If Γ(x) = array(cid:2)p
[τ ] ((cid:2)ref ,◦) and m(x) = loc then
Σ(loc) = τ.
By a standard proof of preservation [42] the semantics can
be shown to preserve the well-formedness of conﬁgurations.
VII. SECURITY GUARANTEES
This section presents the security guarantees obtained by
combining the properties of partitioned allocation semantics
(Section IV), constrained garbage collection (Section V), and
security types (Section VI).
For garbage collection in isolation we obtain a property of
timing-sensitive noninterference.
For programs in general, the semantic security property
obtained in this section is termination-insensitive timing-
sensitive noninterference. While this may appear unorthodox,
given the usual expectation that timing-sensitivity implies
termination-sensitivity, we believe it makes sense in our setting,
where the attacker has access to the internal clock of the
computation, yet there are many ways via which the program
may diverge. The sources of divergence may be inﬁnite
loops – that we allow, heap exhaustion – also possible in
our semantics, or other fatal errors that we do not currently
model. In that light, even though we allow termination channels
in this work, it remains a channel that cannot be efﬁciently
magniﬁed [3]. Note however that termination-insensitivity is
not a fundamental restriction in our work. Because our type
system is relatively standard, it should be possible to apply
orthogonal techniques [21] to obtain termination or progress-
sensitive security.
Our notion of noninterference is parametrized over the heap
size, because of the parametrization of the semantics.
A. (cid:2)-equivalence
In order to formalize our security conditions, we introduce
(cid:2)-equivalence [45] for memories and heaps.
We deﬁne the set of low-reachable locations, written
reach(cid:2)(Γ, Σ, m, h), as the set of locations loc satisfying
the predicate reach(cid:2)(loc, Γ, Σ, m, h), which is speciﬁed in
Figure 15. Intuitively, this is the set of locations reachable
by following only pointers with a low conﬁdentiality level
according to the memory and heap typing environments. An
important property of low reachability is that, when a location
maps to a low heap level, then the low reachability of that
location coincides with its reachability as per Deﬁnition 2.
Lemma 5 (Adequacy of low reachability). Let (m, h) be well-
formed wrt. (Γ, Σ) and let (cid:2) be a security level. If h(loc) =
(cid:3) (cid:25) (cid:2) then loc ∈ reach(cid:2)(Γ, Σ, m, h) if and only if
((cid:2), μ) and (cid:2)
loc ∈ reach(m, h).
Γ(x) = array(cid:2)p
[τ ] ((cid:2)ref ,◦)
(cid:2)ref (cid:25) (cid:2)
reach(cid:2)(loc, Γ, Σ, m, h)
m(x) = loc
reach(cid:2)(loc, Γ, Σ, m, h)
Σ(loc) = array(cid:2)p
[τ ] ((cid:2)ref ,◦)
(cid:3)
μ(n) = loc
(cid:2)ref (cid:25) (cid:2)
(cid:3)
h(loc) = ((cid:2)
, μ)
(cid:3)
reach(cid:2)(loc
, Γ, Σ, m, h)
Fig. 15: Low-reachability
Lemma 5 will be a crucial part of the proof of garbage
collection noninterference in Section VII-B.
a) Memory low-equivalence: We ﬁrst consider a deﬁnition
of low-equivalence for memories. This relation is induced by Γ.
Γ,φ∼ (cid:2) s (cid:2) ∀x ∈ dom(Γ) . m(x)
m
Γ(x)
= φ,(cid:2) s(x)
Whenever Γ is clear from the context, we omit it for clarity.
b) Memory and heap low-equivalence: As we wish to we
reason about garbage collection, which identiﬁes and removes
unreachable locations, reasoning about locations that are low
reachable is not sufﬁcient to prove the desired non-interference
results. Thus, we deﬁne the set of low locations as not only
the low reachable ones, but also the locations which has a low
heap level. This is captured in the following deﬁnition.
Deﬁnition 8 (Low locations). Given security typing Γ, heap
typing environment Σ, memory m, and heap h,
the set
Low(cid:2)(Γ, Σ, m, h) is the smallest set such that
1) Low reachable locations are contained in the set.
reach(cid:2)(Γ, Σ, m, h) ⊆ Low(cid:2)(Γ, Σ, m, h)
(cid:3)
, μ) ∧ (cid:2)
∀loc . h(loc) = ((cid:2)
2) Locations with a low heap level are contained in the set.
(cid:3) (cid:25) (cid:2) ⇒ loc ∈ Low(cid:2)(Γ, Σ, m, h).
We can now deﬁne heap low equivalence similarly to memory
low-equivalence. As we will often be relating two environments,
we use the abbreviation Σ1,2 to mean a set of heap typing
environments Σ1 and Σ2. The same abbreviation is used for
memories and heaps.
Crucial for the non-interference is the idea that if two
locations are related by a bijection φ, then one location is
reachable if and only if the other location is reachable. This is
captured in the following deﬁnition.
φ,(cid:2)(Σ1,2, m, h, s, w) (cid:2)
reach-iﬀτ
∀loc1 loc2 . φ(loc1) = loc2 ⇒
loc1 ∈ reach(cid:2)(Γ, Σ1, m, h) ⇔ loc2 ∈ reach(cid:2)(Γ, Σ2, s, w)
The ﬁnal relation speciﬁed by STATE-LOW-EQ, written
Γ,Σ1,2≈φ,(cid:2) (s, w), is parametrized by the level (cid:2) of the low-
(m, h)
equivalence (typically low), the typing environment Γ, the two
heap typing environments Σ1 and Σ2, and the substitution φ
that witnesses the isomorphism between the heaps h and w.
This is the main relation of interest during execution, as this
705
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:19:35 UTC from IEEE Xplore.  Restrictions apply. 
SAME-TYPE-INT
n1 ≡ n2
SAME-TYPE-LOC
loc1 ≡ loc2
VAL-LOW-EQ
τ = σ ((cid:2)
, ι)
(cid:3)
(cid:3) (cid:25) (cid:2) ⇒ φ(v) = u
(cid:2)
v ≡ u
v
τ=φ,(cid:2) u
HEAP-LOC-EQ-NON-REACH
loci /∈ reach(mi, hi) for i = 1, 2
dom(μ1) = dom(μ2)
heap-loc-eqτ
hi(loci) = ((cid:2)
, μi) for i = 1, 2
(cid:3)
φ,(cid:2)(m1,2, h1,2, loc1, loc2)
HEAP-LOC-EQ-REACH
loci ∈ reach(mi, hi) for i = 1, 2
, μi) for i = 1, 2
hi(loci) = ((cid:2)
(cid:3)
dom(μ1) = dom(μ2)
∀n . μ1(n) τ=φ,(cid:2) μ2(n)
heap-loc-eqτ
φ,(cid:2)(m1,2, h1,2, loc1, loc2)
STATE-LOW-EQ
Γ,φ∼ (cid:2) s
reach-iﬀτ
m
∀loc1 loc2 . φ(loc1) = loc2 ∧
φ,(cid:2)(Σ1,2, m, h, s, w)
Σ1(loc1) = τ ∧ Σ2(loc2) = τ ∧
loc1 ∈ Low(cid:2)(Γ, Σ1, m, h) ∧
loc2 ∈ Low(cid:2)(Γ, Σ2, s, w)
⇒ heap-loc-eqτ
φ,(cid:2)(m, s, h, w, loc1, loc2)
Γ,Σ1,2≈φ,(cid:2) (s, w)
(m, h)
Fig. 16: Low-equivalence on memories and heaps
what relates the parts of the environments that the attacker can
observe. It relates the low reachability of the two environments,
and speciﬁes that the memories are related, and ﬁnally the last
relation expresses that if two low locations are related by φ
and have data labeled at a common type τ then they must have
the same heap level, and if the locations are reachable then the
values associated with this location (i.e. the codomain of μ1 and
μ2 in HEAP-LOC-EQ-REACH) have to be equivalent at type τ.
When Γ and Σ1,2 are irrelevant, we write (m, h) ≈φ,(cid:2) (s, w)
for (m, h)
Γ,Σ1,2≈φ,(cid:2) (s, w).
B. Noninterference for garbage collection
Using the deﬁnition of memory and heap low-equivalence
we can formulate the noninterference result for the garbage col-
lector. Our deﬁnition of noninterference for garbage collection
is possibilistic [20] in its nature. Intuitively, it states that for
a GC-transition that takes some time there is a GC-transition
that takes as much time and yields a low-equivalent resulting
heap and memory.
Theorem 3 (Garbage collection noninterference). Assume
typing environment Γ,
level (cid:2) and heap typing environ-
ments Σ1 and Σ2. Consider two well-formed conﬁgurations
(cid:9)c1, pc, m, h, t(cid:10) and (cid:9)c2, pc, s, w, g(cid:10) wrt. Γ, Σ1, and Γ, Σ, a
Γ,Σ1,2≈φ,(cid:2) (s, w). Assume pc (cid:25) (cid:2).
substitution φ such that (m, h)
If (cid:9)c1, pc, m, h, t(cid:10) (cid:3)(cid:3)(cid:4) (cid:9)c1, pc, m, h
, t + δ(cid:10) then there is w
(cid:3)
and ψ such that
(cid:3)
(cid:9)c2, pc, s, w, g(cid:10) (cid:3)(cid:3)(cid:4) (cid:9)c2, pc, s, w
Γ,Σ1,2≈ψ,(cid:2) (s, w
(cid:3))
(cid:3)).
and (m, h
Proof sketch. Unfolding we have h = h=pc (cid:6) h
where hgc is the subheap being collected. Pick
(cid:3)
, g + δ(cid:10)
(cid:4)=pc (cid:6) hgc,
• w=pc = φ(h=pc),
• wgc = φ(hgc).
By deﬁnition no location in hgc is reachable, and so they are not
low-reachable either. Then since reach-iﬀ τ
φ,(cid:2)(Σ1,2, m, h, s, w)
no location in wgc = φ(hgc) must be low-reachable and since
all locations in wgc have heap level pc (cid:25) (cid:2)adv it follows that
no location in wgc is reachable, meaning that it is safe to GC
this part of the heap.
w=pc (cid:6) wgc (cid:5)s
δ h=pc and so
δ w=pc by the GC assumption from Section V.
By deﬁnition of GC we have h=pc (cid:6) hgc (cid:5)m
A property of the state low equivalence relation is that
garbage collection when pc (cid:13)(cid:25) (cid:2)adv results in a state which is
low equivalent to the state before garbage collection.
Lemma 6 (High garbage collection). Assume typing environ-
ment Γ and level (cid:2). Consider conﬁguration (cid:9)c, pc, m, h, t(cid:10) and
assume pc (cid:13)(cid:25) (cid:2). If (cid:9)c, pc, m, h, t(cid:10) (cid:3)(cid:3)(cid:4) (cid:9)c, pc, m, h
(cid:3)(cid:10) then
, t
(m, h) ≈id,(cid:2) (s, h
(cid:3)).
C. Noninterference for programs
Formal attacker observations. To simplify the technical
presentation we assume that the secrets in the computation are
all stored in the initial memory.
(cid:3)
We present our noninterference condition using the notion of
attacker knowledge [2, 12]. The attacker knowledge is the set of
possible memories that are are consistent with the memory after
a sequence of program transitions. We assume that programs
start with empty heap ∅ and an initially low pc level ⊥.
Deﬁnition 9 (Attacker knowledge at level (cid:2)). Given program
(cid:3), security
c, initial and ﬁnal memories m and m
level (cid:2) and maximum heap size function mx, deﬁne attacker
knowledge as
(cid:3), ﬁnal heap h
mx
(cid:2) (c, m, m
k
(cid:3)
, h
(cid:3)) (cid:2) {s | m
Γ,id∼ (cid:2) s ∧
(cid:9)c,⊥, s,∅, 0(cid:10) mx−→∗ (cid:9)stop, pc
(cid:3)
, s
∃φ, Σ1,2 . (m
(cid:3)
(cid:3)
(cid:3)(cid:10) ∧
(cid:3)
, w
, t
Γ,Σ1,2≈φ,(cid:2) (s
(cid:3))
, h
(cid:3)
, w
(cid:3))}
Note that the larger attacker knowledge set corresponds to
attacker obtaining less information. Smaller knowledge sets
correspond to more precise information. Singleton knowledge
set means the attacker knows the exact initial memory with
which the execution started.
706
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:19:35 UTC from IEEE Xplore.  Restrictions apply. 
mx
(cid:2) (c, m) as the set of
Deﬁnition 10 (Set of terminating memories). Given a program
c we deﬁne M
initial (cid:2)-equivalent
memories that lead to a terminating conﬁguration when the
heap is bounded by mx.
(cid:2) (c, m) = {s | m
Γ,id∼ (cid:2) s ∧
M
mx
(cid:9)c,⊥, s,∅, 0(cid:10) mx−→∗ (cid:9)stop, pc
(cid:3)
(cid:3)
, m
(cid:3)
, h
(cid:3)(cid:10)}
, t
Using attacker knowledge and the set of initial memories
we can deﬁne the noninterference policy [15]. Intuitively, a
program satisﬁes noninterference if any memory and heap
produced by a terminating sequence of program steps does not
exclude any possible initial memory.
Deﬁnition 11 (Termination-Insensitive Noninterference at (cid:2)
for heap size mx). Given a heap bounding function mx, a
program c satisﬁes mx-noninterference up to level (cid:2) if for all
initial memories m such that
(cid:9)c,⊥, m,∅, 0(cid:10) mx−→∗ (cid:9)stop, pc
(cid:3)
(cid:3)
, m
(cid:3)
, h
(cid:3)(cid:10)
, t
implies
mx
(cid:2) (c, m, m
k
(cid:3)
, h
(cid:3)) ⊇ M