51− 100
101− 200
201− 500
501− 1000
1001− 2000
≥ 2001
#
36
13
28
9
7
2
4
Table 2: Number of ﬁrmware program in the corpus (left) tar-
geting the indicated MSP430 models and (right) having the
number of lines of C code in the given range.
were not written in C, or did not compile properly for
the MSP430 using their given makeﬁles (this includes
projects such as desktop utilities for connection to an
MSP430, and thus matched the keyword without being
applicable to FIE). After this culling we had 83 ﬁrmware
programs.
Contiki: Finally, we add to the corpus Contiki [35],
which provides an operating system for microcontrollers.
To use Contiki, one writes an application against it as
a library, which is then statically linked for a complete
ﬁrmware. Since we need an entrypoint to the library
for testing, we use a “hello world” example program in-
cluded with the Contiki distribution. The resulting C ﬁle
for the ﬁrmware has only 10 lines of code, but this links
against other, larger modules. There are over 200,000
lines of C code in the full Contiki source tree. We
note that Contiki supports many architectures, including
(amongst others) motes that support MSP430x, an ex-
tension of the MSP430 that supports 20-bit addresses.
FIE only supports basic 16-bit MSP430, and thus can-
not run on these motes. Fortunately, Contiki has sup-
port for a basic MSP430 backend: the esb, based on the
msp430f1612. We use this backend in our analysis.
The table in Figure 2 shows a break down of the num-
ber of ﬁrmware programs whose number of lines of code
(computed using cloc, including C and C/C++ header
ﬁles) falls in the indicated range. As can be seen, the
range of sizes of these ﬁrmware programs is large, but
most are 2,000 lines of C code or less. This is not sur-
prising given that MSP430s are often used to drive rela-
tively simple controllers or sensors: our ﬁrmware set in-
cludes the large number of small hobbyist projects found
on GitHub and the TI community projects webpage. A
breakdown of the architectures targeted by ﬁrmware pro-
grams in the corpus is shown in the graph in Figure 2.
(When a single ﬁrmware supports multiple target archi-
tectures, we restrict attention to one, picked arbitrarily.)
2.3 Symbolic Execution and Challenges
To date, ﬁnding vulnerabilities in embedded ﬁrmware
programs has relied upon specialized fuzzing and reverse
engineering [12, 18, 20–22, 24], which requires signiﬁ-
cant manual effort and knowledge of the ﬁrmware under
analysis. Almost all previous research on more general
software analysis tools (see Section 7) has not focused
on the setting of embedded microcontrollers, and so the
relatively unique features of our context (relatively small
ﬁrmware sizes, large diversity of architectures, and com-
plex environmental interactions) mean that traditional
approaches need to be revisited. We initiate such work,
focusing in particular on symbolic execution. We feel
it to be well-suited to ﬁrmware analysis, allowing ﬁne-
grained modeling of architectural nuances, ﬂexibility in
analysis approach, and typical limitations of symbolic
analysis (i.e., scalability) may not prove to be as much
of an issue for the small ﬁrmware programs seen in prac-
tice. We leave exploration of other approaches (e.g.,
static analysis, concolic execution, etc.) to future work.
Symbolic execution: In symbolic execution, variables
corresponding to inputs to a program are treated as sym-
bolic. This means one stores a representation of all of
the possible values that each symbolic variable may take
on. The program is then executed symbolically using an
execution engine. A symbolic state (just state from now
on) is a current program counter, other register contents,
stack frames, and memory contents. The latter three may
contain a mix of concrete values or symbolic variables
and the constraints over those variables. From an ini-
tial state, the engine executes the program one instruc-
tion at a time and updates the state appropriately, chang-
ing concrete values or possibly adding constraints upon
symbolic variables.
Should execution reach a control ﬂow decision such
as a branch, the executor uses a SAT solver to deter-
mine what are the possible next instructions. A new state
is generated for each possible next instruction, with ap-
propriate constraints for the outcome. For example, if a
variable x is assigned symbolic variable α (that is uncon-
strained), and a branch if (x  -imodel= input.bc
The memory spec is speciﬁed by mem, which supplies
the semantics of special memory such as attached de-
vices, ﬂash memory, etc. FIE comes with a set of de-
fault speciﬁcations which conservatively returns uncon-
strained symbolic values to any read from special mem-
ory and ignores writes. However, the user may wish to
choose a different speciﬁcation or write their own. We
discuss this process in depth in Section 4.2.
The interrupt spec intr informs the analysis of when
(and which) interrupts should be simulated to have ﬁred
at any given point in symbolic execution. Should an in-
terrupt be deemed to ﬁre, the state’s execution is pro-
firmware 
source 
code
Clang
Wrapper
firmware 
bytecode
Symbolic
Execution
Engine
intrinsic 
bytecode
stdlib 
bytecode
interrupt 
spec
memory 
spec
Figure 3: The FIE workﬂow and system components.
gressed to the appropriate interrupt handler function
within the ﬁrmware. The interrupt spec allows us to
ﬂexibly model different interrupt ﬁring behaviors. Our
default is to allow any enabled interrupt to ﬁre at every
program point. See Section 4.2.
We inherit as well
from KLEE various possible
command-line options, so the user can optionally specify
the wall-clock time to spend on the analysis, the search
heuristic to use, etc.
FIE runs a modiﬁed version of the KLEE symbolic exe-
cution engine (the executor) to perform the analysis over
the ﬁrmware bitcode. In particular, we use directly from
KLEE their existing state selection heuristics, their un-
derlying SAT solver framework, and much of their state
management code. Our major changes include porting
the entire execution engine to a 16-bit architecture, which
includes a new memory manager to ensure that all mem-
ory objects are allocate within a 16-bit value, and the use
of the memory spec and interrupt library to model exe-
cution when the engine interacts with special memory or
ﬁres an interrupt. We also implement two enhancements
to the symbolic execution engine, state pruning (Sec-
tion 4.3), ﬁrst introduced by RWset [6] and adapted to
our domain, and memory smudging (Section 4.4), which
is novel to this work. These can improve code coverage
and, for some programs, enable complete analyses.
FIE ﬁnishes when it completes an analysis by visiting
every possible state, hits the requested time limit, or ﬁnds
a memory-safety (or other) violation. In the latter case it
outputs a description of a path leading to the bug. We
call this a trace. The trace includes concrete examples of
inputs (i.e., from peripherals) that cause the ﬁrmware to
trigger the bug, and includes at what points in the exe-
cution interrupts ﬁred to cause a jump to a speciﬁc inter-
rupt handler. Currently, a trace is useful as a debugging
log, but eventually it could be used to directly drive an
MSP430 simulator to validate the potential bug.
We have additionally prepared an Amazon EC2 [1]
virtual machine image and control scripts to run analy-
ses on EC2. This made it easy to automate running FIE