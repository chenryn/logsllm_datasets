trustworthy. The untrusted entities are the foundry, the test
facility, and the end-user, as highlighted in Fig. 1. The attacker
can obtain a locked netlist either by overbuilding or REing.
The attacker’s objective is to identify the secret key from the
locked netlist and activate the design.
Capabilities of an attacker. An attacker has access to a
1) REed netlist and 2) a functional IC, i.e., an IC with the
correct key. A foundry can extract the required netlist from
the layout ﬁles, whereas an end-user can obtain it via REing
the IC. The attacker buys the functional IC from the market.
The IC acts as an oracle: the attacker can apply input patterns
and observe the correct outputs4.
2.2 Logic Locking Attacks and Defenses
We now explain the relationship between logic-locking
attacks and defenses. In particular, we describe the CAC tech-
niques in detail since they offer provable-resilience against
most existing attacks, such as SAT [9, 41], sensitization [8],
approximate [32,33], and SMT [11] attacks. For recent and de-
tailed surveys on logic locking, please refer to [46, 49, 61, 62].
XOR-based locking. The earliest logic-locking technique
inserts XOR/XNOR key gates in a circuit. The objective is
to ensure that incorrect keys produce an incorrect output [7].
The sensitization attack breaks this defense by computing
input patterns that propagate the values of keys to outputs [8].
I/O attacks. The sensitization attack spawned a series of
subsequent I/O attacks that rely on the output of a black-box
oracle to ﬁlter out unlikely key candidates. The SAT attack
uses a SAT solver to weed out incorrect keys [9]. The SMT
attack uses an SMT solver for the same purpose [11].
4An input value is also referred to as an input pattern in the literature.
1058    30th USENIX Security Symposium
USENIX Association
ICorrupting unitOTamper-proof memoryOriginal netlistCorrecting unitKCorruptedcircuitScpSccBy choosing appropriate h, designers change the number of
PIPs and thus trade-off the resilience against SAT, approxi-
mate, and structural attacks. CACrem relies on EDA tools to
generate potential PIPs for a given circuit [40, 45].
Structural attacks on CAC locking. CACﬂex and CAChd
synthesize the corrupted circuit using logic-synthesis tools,
which may retain the corrupting unit unmerged during synthe-
sis. A recent attack by Yang et al. [50] breaks CAChd circuits
by locating and removing the corrupting unit. A relatively
more sophisticated FALL attack focuses on recovering the
key for CAChd circuits from the properties of the Hamming
distance unit [36]. These attacks may work against CACﬂex
for a small number of PIPs. However, none of the existing
structural attacks can break CACrem: CACrem does not utilize
a corrupting unit, structural attacks that attempt to locate and
remove the corrupting unit are thwarted [40].
2.3 Security Deﬁnitions
Grounded in the above discussion, we deﬁne the secu-
rity properties for logic locking techniques. We use Corig,
Clock, and Ccp to denote the original circuit (implementing the
Boolean function f ), the locked circuit, and the corrupted cir-
cuit, respectively. We assume that Corig has n inputs and only
one output6. The number of key inputs in Clock is the same as
the number of primary inputs, i.e., the key size k = n. Thus,
Ccp has k inputs and one output. The input space is I = f0;1gk,
and the keyspace is K = f0;1gk. keyc is the correct key.
Deﬁnition 1. Correctness. When supplied with the correct
key, the locked circuit must produce correct output for all
input patterns, i.e.,
(
Clock(i;key) = Corig(i) 8i 2 I;
Clock(i;key) 6= Corig(i) 9i 2 I;
if key = keyc
if key 6= keyc.
Deﬁnition 2. Security against I/O attacks. Following the
deﬁnition in [10], a logic locking technique L is a-secure
against a probabilistic polynomial-time adversary AIO, if
upon making a polynomial number of queries q(a) to the
oracle, the probability of retrieving a PIP, and thus obtaining
keyc is no greater than q(a)
2a .
Deﬁnition 3. Security against structural attacks. A logic
locking technique L is b-secure7 against an adversary AS ,
who has access to a locked circuit or its PIT and conducts
white-box structural analysis if the probability of an attacker
to identify a PIP is no greater than 1
b.
6This can be generalized to circuits with multiple outputs since a multi-
output circuit can be divided into multiple single-output circuits [64].
7This notion of security is the same as “k-secure” [65]. Since the logic
locking community uses k to refer to key size, we use the term b-secure to
indicate “k-secure.”
2.4 A Primer on Logic Synthesis
Various EDA tools streamline the design and production
of billions of ICs sold annually, with many ICs containing
billions of transistors. Logic synthesis translates a high-level
design description (typically in a hardware description lan-
guage) into an optimal low-level representation (e.g., a gate-
level netlist). Commercial tools (e.g., Synopsys Design Com-
piler [54], Cadence Genus [53], etc.) as well as open-source
logic-synthesis tools (e.g., ABC [58]) help designers generate
netlists in a timely fashion while optimizing the PPA costs.
A simple and widely known format, referred to as the sum
of products (SOP), uses only two levels of gates. The AND
gates implement product terms, which are ORed (summed).
Let us consider a Boolean function f with n inputs and one
output. Then, a minterm mi, 0 (cid:20) i > jSu1j.
Case 2. Removing a PIP. A designer can also build FON
removing a minterm m from FON
this removal is equivalent to adding m into FOFF
cp by
orig. Using De Morgan’s law,
orig , i.e.,
FON
cp = FOFF
cp = FOFF
orig [fmg.
(1)
cp
cp
Case 2(a). PIP does not merge. When m does not merge
with any PI in FOFF
orig , it appears as a standalone PI in the
PIT of FOFF
. One can recover m directly from the PIT of
. Similar to Case 1(a), the search space is Su2, and jSu2j
FOFF
cp
is the number of PIs in FOFF
. m does not merge with FOFF
orig
as its distance from all PIs of FOFF
is greater than one. This
orig
condition implies that the distance of m must be one from at
least one of the PIs of FON
orig.
Example. Fig. 4(g) shows that upon removing the PIP 1111,
the two original PIs split into four new PIs which get imple-
mented as the corrupted circuit. The original PIs have two
don’t care bits each, whereas the new PIs have only one don’t
care bit. Thus, removing minterm(s) from a PIT may lead
to the generation of additional PIs. Consequently, the PIT
of FON
orig contains information about the PIP, which may be
exploited by attackers. This example demonstrates that re-
moving a PIP from PIT can introduce more PIs into a PIT as
compared to adding a PIP.
Case 2(b). PIP merges. If m merges with any of the PIs of
FOFF
orig , it does not appear as an isolated PI in FOFF
. The search
cp
, i.e., jSm2j =
space Sm2 is the set of all minterms in FOFF
cp
Figure 3: Logic synthesis using K-maps. a) The Boolean
function f1 is represented using only two PIs: cd and abd. b)
f2 is represented using three PIs: abcd and abcd.
3 Sparse Prime Implicant (SPI) Attack
We now introduce introduce new structural vulnerabilities
of the CAC techniques. Building on these vulnerabilities, we
develop the SPI attack that can circumvent all the CAC tech-
niques, irrespective of the EDA tool used for logic synthesis.
While traditional structural attacks target gate-level netlists,
the SPI attack analyzes the PITs to recover secrets.
3.1 Vulnerabilities of Logic Locking
The CAC techniques construct the corrupted circuit Ccp
by adding/removing selected minterm(s) to/from the origi-
nal circuit Corig. Logic-synthesis tools then synthesize the
resulting corrupted circuit. We demonstrate how the optimiza-
tion conducted for minimizing the PPA cost may expose the
PIP. The added/removed PIP may or may not merge with the
PIs in the original PIT, as dictated by the distance-1 merging
rule. We consider four cases for different combinations of
addition/removal and merge/unmerge of PIPs. We use FON
orig,
FOFF
orig , FON
to denote the ON-set and OFF-set of
Corig and Ccp, respectively. m denotes the PIP.
cp , and FOFF
cp
Table 2: Notations of attacker’s search space.
Notation Explanation
orig (m 2 FOFF
Su1
Sm1
Su2
Sm2
cp when m =2 FON
cp when m =2 FON
Number of PIs in FON
m does not merge with other PIs in FON
cp
Number of minterms in FON
and m merges with other PIs in FON
cp
cp when m =2 FOFF
Number of PIs in FOFF
m does not merge with other PIs in FOFF
Number of minterms in FOFF
and m merges with other PIs in FOFF
cp when m =2 FOFF
orig
orig
orig ) and
orig (m 2 FOFF
orig )
(m 2 FON
orig) and
(m 2 FON
orig)
cp
cp
orig [fmg.
orig and adding it to FON
is constructed by select-
orig. Thus,
Case 1. Adding a PIP. Suppose FON
cp
ing an arbitrary PIP from FOFF
FON
cp = FON
Case 1(a). PIP does not merge. When the distance of m
from all the PIs of FON
orig is greater than one, a logic-synthesis
tool cannot merge m with any of the PIs of FON
orig. Thus, m
1060    30th USENIX Security Symposium
USENIX Association
abcd001111011110000111101abcd001111111011110000111101(a)(b)(a)
(b)
(c)
(d)
(e)
(f)
(g)
Figure 4: Logic optimization and logic locking: (a) The original circuit, (b) its PIT, (c) PIT of the corrupted circuit constructed by
adding the PIP 0000, (d) K-map of the original circuit, (e) K-map of the corrupted circuit with the PIP 0000 as an isolated PI, (f)
K-map of the corrupted circuit with the PIP 0101 leading to the creation of new PIs, and (g) K-map of with the removed PIP
1111 splitting the two original PIs.
cp
ij8m0
i 2 FOFF
jfm0
gj. An attacker may know how the corrupted
circuit is constructed. Access to this information may impact
the size of the search space (see Appendix B).
Key takeaways. According to the relationship between logic
synthesis and the creation of corrupted circuits, we observe:
(i) If a PIP does not merge, it appears as a fully speciﬁed
PI and can be recovered directly from the PIT. (ii) If a PIP
merges, it introduces new PIs, which may reveal the PIP.
This subsection pointed out a vulnerability associated with
the synthesis of locked circuits. The next subsection describes
how our attack exploits this vulnerability.
3.2 Exploiting the PIT
We now explain how logic-synthesis principles can be ex-
ploited to extract the PIP from a PIT of the corrupted circuit.
The case where a PIP does not merge with the PIs and ap-
pears as an isolated PI is easy to exploit. However, when a PIP
merges with the existing PIs, new PIs are introduced into the
PIT. Here, we explain the properties of the new PIs that can
be used to determine the PIP. We focus on the removal of a
PIP from a PIT since it introduces more pronounced changes;
the addition of a PIP to the ON-set is equivalent to removing
it from the OFF-set (using De Morgan’s law) and vice versa.
Inferring PIP from split PIs. As mentioned in Case 2(a), re-
moving a PIP may split a merged PI, representing a larger set
of minterms, into multiple PIs sans the PIP; we denote the re-
sultant PIs as split PIs. Consider removing the PIP 000100110
from the original PIT shown in Fig. 5(a). Upon removing this
PIP, the ﬁrst PI splits into six PIs as shown in Fig. 5(b). The
other two PIs are unaltered. If the same PIP is added back
to the corrupted circuit PIT, the split PIs can merge to form
the merged PI. With the PIP removed, the split PIs cannot
merge. The distance of any split PI and the PIP is one as the
PIP is the glue to merging the split PIs. The distance between
any two split PIs is zero since all split PIs are derived from
the same merged PI by setting a unique don’t care bit to the
complement of the corresponding bit in the PIP. If the merged
PI has s don’t care bits, each split PI will have (s(cid:0) 1) don’t
care bits. For example, PI1 in Fig. 5(b) is generated by the
setting the bit j to 1 since the rightmost bit in the PIP is 0.
Consider the simplest case where the merged PI is the
universal set U, i.e., all the bits are don’t cares. Let M be the
number of split PIs, and PI j
S denote the jth split PI. The PIP
is the difference between U and the union of split PIs, i.e.,
M[
j=1
M\
j=1
PIP = Un M[
j=1
PI j
S =
PI j
S =
PI j