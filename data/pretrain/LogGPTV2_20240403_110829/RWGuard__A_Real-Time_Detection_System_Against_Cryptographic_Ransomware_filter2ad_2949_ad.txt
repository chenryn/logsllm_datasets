100
10
1
# Read w/ decoy
# Avg. read w/ decoy
# Read w/o decoy
# Avg. read w/o decoy
Lk
Cr Wc
Jg
Cl
(b)
Tc
Cw
Vp
St
Rd
Rx
# Close w/ decoy
# Avg. close w/ decoy
# Close w/o decoy
# Avg. close w/o decoy
Lk
Cr Wc
Jg
Cl
(d)
Tc
Cw
Vp
St
Rd
Rx
Fig. 4. Comparison between the cases of with and without decoy deployment in terms
of the number of (a) write, (b) read, (c) open, and (d) close IRPs made by the ran-
somware samples until their detection (ransomware name abbreviations: Lk-Locky,
Cr-Cerber, Wc-Wannacry, Jg-Jigsaw, Cl-Cryptolocker, Tc-Teslacrypt, Cw-Cryptowall,
Vp-Vipasana, St-Satana, Rd-Radamant, Rx-Rex).
Therefore, with the decoy deployment, our system can identify a ransomware
process right in the next cycle of the process’s decoy ﬁle write request.
Figure 4 shows the comparison between the cases of with and without decoy
deployment in terms of the number of write, read, open, and close IRPs (along
with the average values for all the ransomware) made by the ransomware samples
until their detection (in Figs. 4(a), (b), (c), and (d), respectively). The number
of IRPs (for each IRP type) for each ransomware family is computed by running
the samples at least 5 times. We ﬁnd that with decoy deployment, for each of
these IRP types, there is an improvement of at least one order of magnitude.
Hence, the ransomware processes could be identiﬁed as soon as they start mak-
ing IRP requests, i.e., in real-time. For ransomware Locky, Jigsaw, Teslacrypt,
Cryptowall, Radamant, and Rex, we observe that the ﬁrst IRP write requests
they make are for decoy ﬁles (see Fig. 4(a)) and thus are identiﬁed immediately.
The Wannacry ransomware could make up to 18 IRP write requests (the highest)
before it sends a write request for a decoy ﬁle (note that there can be multiple
IRP write requests for a single ﬁle write operation). An IRP write request is sent
well ahead of the actual write operation and hence the actual number of ﬁles
that can get encrypted before terminating the process is negligible (which also
depends on the ﬁle size).
128
S. Mehnaz et al.
Fig. 5. Detection time required by RWGuard when there is no decoy deployment.
Note that, Fig. 4 does not show comparisons for the following three ran-
somware families: Mamba, Petya, and Matsnu. In our experiments, we have
found that samples from these families aﬀect only a predeﬁned list of system
ﬁles (and if there is no detection system activated except the decoy monitoring,
this is followed by gaining root access, shutting down the system, and at the next
boot up, performing full disk encryption and asking for a ransom payment). As
a result, our DMon module cannot identify such ransomware families (however,
the PMon and FCMon modules can) and therefore, we omit the comparison for
these three families in this section.
Detection w/o Decoy Deployment: In order to further evaluate the eﬀec-
tiveness of RWGuard, we also consider an environment where there is no decoy
ﬁle. This environment can be practical for the following two scenarios:
1. A ransomware encrypts only a predeﬁned list of system ﬁles, i.e., even if the
decoy ﬁles are deployed, the ransomware does not touch the decoy ﬁles (e.g.,
Mamba, Petya, and Matsnu ransomware families in our experiment dataset).
2. A malicious insider in an organization with the knowledge of decoy ﬁles’
deployment can use customized ransomware to sabotage the organization
and hold the ransomware responsible for this. Such an attack can be even
launched as a logical bomb that can detonate after the insider has left the
organization.
Figure 5 shows the time required to detect each of the samples (in millisec-
onds) while there is no decoy deployment in the system. The time computation
starts when the ransomware sample is executed and ends when the corresponding
process is ﬂagged. Once the PMon and FCMon modules identify potential ran-
somware activity (i.e., malicious IRP/FastIO requests, signiﬁcant ﬁle changes or
encryption), the FCls and CFHk modules are communicated. If the ﬁle(s) that
is (are) changed does (do) not belong to the ‘benignly encrypted’ class, and if
there is (are) no corresponding encryption entry (entries) in the CFHk module,
the process is immediately ﬂagged. The average detection time for the ﬁrst mali-
cious processes spawned by all the ransomware is 3.45 s. However, we see that
A Real-time Detection System Against Cryptographic Ransomware
129
all the ransomware spawn multiple malicious processes which are detected at
diﬀerent times by our monitoring system. We observe that the average required
time for detecting all the spawned processes is 8.87 s. As we can see from Fig. 5,
Locky, and Cerber spawn the highest number of malicious processes whereas
CryptoLocker and TeslaCrypt spawn the lowest number of processes. According
to our observation, most of the ransomware try to spawn processes with unique
names or try to hide as system processes, e.g., explorer.exe. We also observe
that diﬀerent ransomware behave diﬀerently when the initially spawned mali-
cious processes are killed by our system. For example, Wannacry sits idle for
some time after the initial few processes are killed, before trying to spawn a new
malicious process. This is the reason for the comparatively higher detection time
for the last process in some of these ransomware.
Detection eﬀectivenesses of diﬀerent modules are discussed in the following:
• Decoy Monitoring (DMon) module: This module is the fastest to identify
a ransomware process. Deploying a larger number of decoy ﬁles will result in
even faster detection. For example, with a decoy generator that creates a
shadow decoy ﬁle for each original ﬁle in the system, probabilistically, one
out of each two write requests by a ransomware would belong to a decoy ﬁle.
• Process Monitoring (PMon) and File Change Monitoring (FCMon)
modules: In most of the cases, the PMon module responded faster than the
FCMon module in terms of ﬂagging a malicious process. Even before the ran-
somware starts performing encryption, the PMon module is able to identify the
malicious activities by monitoring the IRPs. In contrast, the FCMon module
responds only after a ﬁle has been changed signiﬁcantly. However, we observe
that few benign processes, e.g., Chrome, VMware tools are sometimes misclas-
siﬁed as malicious by the PMon module due to these processes’ I/O request
behaviors. Therefore, it is important to also consider the analysis by the FCMon
module to better understand whether a particular process is responsible for any
malicious ﬁle changes and to remove any false positives.
• File Classiﬁcation (FCls) and CryptoAPI Function Hooking
(CFHk) modules: After the PMon and FCMon modules’ detection that
a process is making signiﬁcant changes in the ﬁle(s), the information of the
ﬁle(s) are sent to the FCls module which then computes the probability of these
changes being benign. The false negatives of this module correspond to the cases
in which the ransomware encrypts a ﬁle which has a high probability of being
encrypted by the user benignly. Such false negatives are, however, detected by
the CFHk module which identiﬁes if the ﬁle is actually encrypted using the
provided crypto-tool. With a 100% accuracy, the CFHk module can identify
whether an encryption is performed by a ransomware or is a benign encryp-
tion. This module never ﬂags a benign encryption. The only case of false pos-
itives (negligible, ∼0.1%) we have observed in the FCls and CFHk modules is
when the user performs ﬁle compression in a directory for the ﬁrst time. How-
ever, a ﬁrst time benign ﬁle encryption in a directory is not ﬂagged as malicious
since the CFHk module can intercept the benign encryption operations. Note
that the FCls and CFHk modules do not ﬂag any process unless that process is
identiﬁed as suspicious by one of the monitoring modules.
130
S. Mehnaz et al.
5.3 Size of Encrypted Data
In terms of the number of ﬁles, samples from ransomware families Locky, Jig-
saw, Teslacrypt, Cryptowall, Radamant, and Rex could not encrypt any ﬁle with
decoy deployment. The malicious processes for these families are identiﬁed on
their ﬁrst IRP write request. The numbers of IRP write requests made by ran-
somware families Cerber, Wannacry, Cryptolocker, Vipasana, and Satana before
their detection are 2, 18, 12, 6, and 3, respectively, with decoy deployment. How-
ever, since an IRP write request is sent well ahead of the actual write operation
and there can be multiple IRP write requests for a single ﬁle write, with decoy
deployment, the average number of ﬁles lost is <1 with only Wannacry and
Cryptolocker being able to encrypt 1 ﬁle each before their malicious processes
are killed. The average number of IRP requests made by the ransomware fam-
ilies without any decoy deployment is ∼538 (with the strong assumption that
the ransomware can evade the decoy deployment which is not the case for most
of the families) whereas the average number of ﬁles aﬀected is <10. Note that
the number of ﬁles aﬀected before detection depends not only on the number
of IRP requests made but also on the time taken by a ransomware process to
initiate the encryption routines (which is signiﬁcant), type of encryption, size of
the ﬁles, and the number of ﬁles the ransomware attempts to encrypt (this is
because for each ﬁle the ransomware needs to generate a new key).
5.4 File Recovery
The CFHk module could recover all the ﬁles encrypted by the ransomware fam-
ilies: Locky, CryptoWall, and CryptoLocker. The encryption algorithms used by
these samples are AES with CTR mode, AES in CBC mode, and AES, respec-
tively. Note that the CFHk module in its current version cannot recover ﬁles that
are encrypted using the ransomware’s custom-written cryptographic library.
5.5 Performance Overhead
In the following, we discuss the performance overheads for diﬀerent modules
of RWGuard. The DMon, FCls, and CFHk modules have negligible overheads.
The DMon module generates a single decoy ﬁle in each directory (if not set
otherwise by the user) and randomly chooses the size of the decoy ﬁles from
the range 1 KB–5 MBs while limiting the overall space overhead to 5% of the
original ﬁle system size. At runtime, this module checks for decoy ﬁle write
requests and modiﬁes/regenerates the decoy ﬁles once per day at random times
which has only a minimal overhead. The FCls module instantaneously classiﬁes
the ﬁles using ﬁle type and location information. The overhead for hooking a
CryptoAPI function and computing and storing the corresponding tuple is a
few milliseconds (≤10 ms) which is negligible and thus cannot interrupt a user’s
normal operations.
A Real-time Detection System Against Cryptographic Ransomware
131
Table 5. Memory overhead of RWGuard
Component
Main Java module
FCMon Entropy Calculator
Memory consumed (KB)
14296
7880
FCMon Similarity Index Calculator 5152
IRP Logger
42964
There is a main Java module which executes the IRPLogger, collects all
the IRPs made in the system, parses the IRPs with IRPParser, and runs three
parallel threads for DMon, PMon, and FCMon modules. The FCMon module
consists of the components for computing the values of entropy and similarity
index which use minimal CPU cycles since these are called only when there are
write operations on the ﬁles. The memory usage of these components along with
the main Java module is shown in Table 5. The average CPU usages for this
main Java module and IRPLogger are 0.85% and 1.02%, respectively.
Overheads for Diﬀerent Workloads. The performance overheads discussed
above are recorded while running a web browser process and an integrated
development environment (IDE) process along with regular operating system
processes. However, in order to measure RWGuard detection performance and
overheads for a heavy workload OS, we add several processes: two browsers
(Chrome and Internet Explorer), two IDEs (Eclipse and PyChar), Windows
Media Player, Skype, and other regular operating system processes. Accord-
ing to our experiments, this heavy workload does not signiﬁcantly aﬀect the
time required by RWGuard for identifying ransomware processes while we have
observed that IRPLogger and the Java module incur higher memory overhead
(244456 KB and 45436 KB, respectively) due to this heavy workload. The detec-
tion time remaining unaﬀected by the heavy workload can be attributed to the
fact that RWGuard fetches IRPLogger entries every 2 s which does not depend on
the number of entries logged (the number of log entries is much higher for the
heavy workload case). Since parsing the IRP logs is not an expensive operation,
for the heavy workload case, the detection time is not signiﬁcantly changed.
Also, the memory overheads for the FCMon metrics’ calculation remain similar.
5.6 Comparison with Existing Approaches
Table 6 presents a comparison among RWGuard and other exiting ransomware
detection techniques with respect to monitoring, detection, and recovery strate-
gies.
132
S. Mehnaz et al.
Table 6. Comparison of RWGuard with existing ransomware detection mechanisms
Solution
RWGuard
ShieldFS [6]
Unveil [13],
CryptoDrop [26],
Redemption [14]
Real-time
detection
with
decoy
(cid:2)
×
×
Benign
operation/
encryption
proﬁling
(cid:2)
×
×
PayBreak [16]
×
×
EldeRan [27]
FlashGuard [10] ×
×