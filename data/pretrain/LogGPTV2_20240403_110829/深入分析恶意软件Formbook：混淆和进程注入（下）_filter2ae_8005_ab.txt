在恢复被劫持的Explorer的主线程之前，内核首先会弹出并执行线程APC队列中的每一个APC。最后将执行被劫持的Explorer主线程，并对formbook_main_explorer32_hijacked()进行第二次调用。
###  3.2 创建挂起进程
在该过程中，由Explorer劫持的线程或注入的APC会创建一个挂起的进程。  
与Formbook进程的地址空间不同，被劫持的Explorer线程不会映射ntdll的副本，也不具备任何反调试的技巧。关于检索ntdll.dll的完整路径，请参考上篇文章中所描述的方法（参见2.5.1
检索原始ntdll的完整路径），并将其用作“System32”或“SysWOW64”的源代码目录，从一份有39个条目的列表中随机选择并打开Windows可执行文件。  
Windows可执行文件列表存储在加密缓冲区中，其RC4密钥是从后续16字节缓冲区（00 00 01 01 00 00 01 00 01 00 01 00
00 00 00 00）的SHA-1值中派生的：  
正如FireEye所解释的那样，该缓冲区实际上与放入16字节数组后的反分析检查结果相同，该数组用于决定Formbook进程是否应该继续执行。  
在解密一个加密缓冲区后，我们可以看到39个Windows可执行文件（偏移量为3到41）的列表，Formbook可以借助这些可执行文件对其自身进行迁移：
    3 svchost.exe
    4 msiexec.exe
    ..
    40 wuapp.exe
    41 cmd.exe
用于执行进程镂空的Windows可执行文件的完整列表可以在这里获得：
。  
被选中的可执行Image
Base随后会调用由kernel32.dll导出的未记录函数CreateProcessInternalW()来创建挂起的进程。特别值得注意的是，这个函数在尝试动态加载之前，会使用简单的减法操作来修改相关解密哈希（0xad0121e0）：
    >> hex(Crc32Bzip2.calc(bytearray("CreateProcessInternalW".lower())))
    0xad0121ab
    >>> 0xad0121e0-0xad0121ab
    53
下列与新创建进程相关的信息会复制到Explorer和Formbook进程共享的内存区域中：  
1、该进程Image Base完整路径；  
2、该进程映像基址；  
3、该进程的PROCESS_INFORMATION结构；  
4、该进程的STARTUPINFO结构。  
这一共享内存区域和映射到Explorer的Formbook映像包含在同一节中。因此，在Formbook的进程地址空间中，他们具有和NtMapViewOfSection()相同的视图基地址，所以也就具有相同的页保护（PAGE_EXECUTE_READWRITE）。  
现在，注入的APC和被劫持的线程都已经完成了它们的工作。请注意，如果APC在Explorer中正常执行，就会在共享缓冲区中设置一个标志，劫持的线程将会检测这一标志是否存在，以避免创建第二个挂起的进程。因此，如果APC总是成功执行，我们就可以认为劫持Explorer的主线程是没有必要的。
###  3.3 迁移到新的挂起进程
在调用NtResumeThread()之后，Formbook需要等待挂起进程被创建。因此，将使用NtDelayExecution()进行Sleep，然后尝试从共享内存区域读取由Explorer注入的APC或Explorer劫持的线程填充的信息。  
如果新创建的进程的PID、主线程ID、Image Base完整路径和基地址全部被成功读取，并且读取的值非空，那么Formbook就能够继续执行进程镂空步骤。  
借助NtOpenProcess()和NtOpenThread()，可以检索到目标进程和目标线程的句柄。基于检索到的Image
Base完整路径，Formbook会从磁盘Image Base映射PE文件的原始副本。继而，它就能够解析PE头部，并提取挂起进程的入口点地址。  
现在，Formbook会将其自身映射到这个进程中，例如之前在Explorer的地址空间中对其自身进行映射。然后，它会覆盖暂停进程入口点的第一条指令，以便对调用formbook_main_migrated()的函数执行调用。该修补程序是利用基于栈的操作构建的，如下所示：
    8b ff          mov edi, edi
    55             push ebp
    8b ec          mov ebp, esp
    e8 00 00 00 00 call 0x00000000 ; immediate value to be patched
随后，调用的操作数会根据Formbook调用formbook_main_migrated()的指令的相对偏移量进行修正。  
下面让我们看一个实际的例子，我们随机选择的进程是wuauclt.exe：
通过WinDBG和CFF Explorer，我们可以发现：  
进程wuauclt.exe的映像基址是0x00060000；  
进程wuauclt.exe入口点的相对地址是0x5891；  
Formbook已经在位于0x00160000的wuauclt.exe中被映射；  
用于调用formbook_main_migrated()的Formbook指令位于0x17b73d；  
Formbook的函数formbook_main_migrated()位于0x177eb0。  
通过将来自wuauclt修补后入口点（0x60000+0x5891+10）的调用指令后面的地址添加到调用指令（0x00115ea2）的操作数中，我们可以看到调用的目标是Formbook用于调用formbook_main_migrated()的指令：
    >>> hex((0x6589b+0x115ea2)&0xffffff)
    '0x17b73d'
最后，在修补挂起进程的入口点之后，执行对NtResumeThread()的调用，并且Formbook开始在迁移进程中执行formbook_main_migrated()。原始的Formbook进程可以通过调用ExitProcess()来停止执行。
## 四、注入目标应用程序
一旦Formbook在新创建的Windows进程中成功迁移，它就可以针对包含敏感信息的应用程序进行窃取操作。在无限循环内（没有连接调试器的情况下），它会尝试查找进程名称的哈希值，与哈希数组进行匹配（从偏移量120到211）。根据解密后的哈希列表，我们发现该恶意软件可以捕获不同类型的应用程序，例如Web浏览器、邮件程序、即时消息应用程序、FTP客户端甚至是Skype语音通话软件：
    120 0x9e01fc32 iexplore.exe
    121 0x216500c2 firefox.exe
    122 0x48e207c9 chrome.exe
    123 0x2decf13e microsoftedgecp.exe
    ..
    ..
    173 0x84f8d766 foxmail.exe
    174 0xb6494f65 incmail.exe
    175 0x13a75318 thunderbird.exe
    ..
    178 0x6b8a0df3 yahoomessenger.exe
    179 0x9c02f250 icq.exe
    180 0xe52a2a2e pidgin.exe
    ..
    196 0xea653007 filezilla.exe
    ..
    211 0xcb591d7f skype.exe
目前，我们还没有深入分析该恶意软件的这一部分，但其所使用的代码注入技术与本文中讲解的内容类似。根据目标进程的不同，Formbook会将自身映射到目标进程之中，并选择使用线程劫持或APC注入的方式来执行不同类型的例程。