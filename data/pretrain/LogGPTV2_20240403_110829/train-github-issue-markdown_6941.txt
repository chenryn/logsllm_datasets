The problem I found can be reproduced with the following code, on typescript
version 1.7.5. The problem exists in typescript from the release when class
expressions (#497) were introduced.
    function builder() {
        return new class House {
            public open():void {
                console.info('house is open');
            }
        }
    }
    const house = builder();
    house.open();
is compiled to
    function builder() {
        return new (function () {
            function House() {
            }
            House.prototype.open = function () {
                console.info('house is open');
            };
            return House;
        })();
    }
    var house = builder();
    house.open();
and looks good, but throws in the console:
    Uncaught TypeError: house.open is not a function
Thats, because from `builder()` is returned constructor of `House` instead of
an instance. The example above works, when we assign constructor to a variable
and then, create instance with the `new` keyword.