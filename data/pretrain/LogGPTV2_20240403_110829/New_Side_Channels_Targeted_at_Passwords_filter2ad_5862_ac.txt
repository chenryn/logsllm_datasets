1st and 2nd characters appear remapped but aren’t
No errors
7th character unknown (two closely
spaced character times) missed 4th character
(X server and X client ran consecutively)
No errors
missed 1st character, missed 8th character
1st character is incorrect, missed 2nd character
1st character is incorrect, rest are correct
1st character is incorrect, rest are correct
1st character is incorrect, rest are correct
7
8
9
10
11
12
Table 5. Test Results on Linux 2.6: Each Test
Consists of Entering Same Password
remapped character in the password will usually not require
as much additional processing time as the ﬁrst character.
The reason is that the additional code will already be in the
cache. Also, modern processors will attempt to optimize
and guess ahead regarding upcoming code paths. Thus our
experiments did not show signiﬁcant beneﬁt to remapping
more than one password character at a time. Given this
constraint, there is still some advantage to remapping two
keys per test, given the high probability that only one pass-
word character will be remapped per test. With this strat-
egy, 35-40 logons are needed, on average, for an 8 charac-
ter password given a 94 character alphabet. (It is sufﬁcient
to reduce 6 of the 8 password characters to two possibilities
each, and guess the remaining two characters - see Section 6
for guessing attacks).
4.4. Linux 2.4 Side Channel
Ideally, we would like to run timing processes or threads
immediately before the X client and immediately after it as
well. This approach gives the most accurate timing model.
The Linux 2.4 scheduling algorithm makes this approach
difﬁcult; it is more difﬁcult to exercise control over the
scheduler than in Linux 2.6. The reason is that it is not pos-
sible for a Linux 2.4 task to run at frequent random times
and still maintain a high dynamic priority (since it can’t
make up the priority decrements by sleeping as in Linux
2.6). We have settled on a model where a timing process
runs before the X server and then after the X client (see
Figure 1). Thus we measure the X client along with the X
server. This model results in additional noise. Nevertheless,
on a quiescent system (a standard Linux 2.4 desktop system
without additional software packages or wireless network-
ing), our experiments have resulted in narrowing the pass-
word space to the point where guessing attacks are feasible.
4151
Due to the additional noise, we require more tests than in
the Linux 2.6 case. Due to space constraints, we omit the
details.
5. Logon Detection Channel
Here, we present a simpler, but less accurate, timing
channel that leverages the same remapping mechanism.
This channel measures login failures caused by remapping.
When a key is remapped, we observe different behavior de-
pending on whether the remapped key is in the password
or not. This channel can be measured using much coarser
timing, such as timeofday, but it also results in less re-
duction in the password space than for the remap timing
channel.
The basic idea is to time the difference between start of
password entry and successful logon. Successful logon, say
for the su program running in an xterm, can be detected
by the existence of a newly created root shell. The start
of password entry can be detected by the fact that the su
program is running. If a single key is remapped, then lo-
gon success is determined by whether this character is part
of the typed string. Note that the time difference between
successful logon (on ﬁrst try) and successful logon (on sec-
ond try) will be on the order of several seconds. Thus, this
channel will not depend on accurate clocks.
For example, a timing program can remap one key per
run.
If we assume a password alphabet of 94 characters,
then we will, on average, run about 86 times to reduce the
password space to 3 bits or less per character (since we can-
not determine the position of characters in the password us-
ing this attack). Then the remainder of the space can easily
be searched by a guessing program, if we assume passwords
of about 9 characters or less (we present our guessing pro-
gram and its performance in Section 6). Thus a 9 character
password would be compromised after approximately 86 lo-
gons, plus a small amount of time for guessing.
5.1. Logon Detection Channel Algorithm
Here, we give the details for the logon detection channel
attack; our X client is su in an xterm.
We must make three decisions shown in Figure 4: (1)
when to remap a key, designated as T0; (2) when to initiate
detection of successful logon, T1; and (3) when to un-remap
the key, T2. The accuracy of the ﬁrst decision determines
whether we can capture the ﬁrst character. The accuracy
of the second decision determines whether we distinguish
between success and failure correctly. The accuracy of the
third decision determines whether we capture all characters
(i.e., do not un-remap too soon) and avoid detection (i.e., do
not un-remap too late).
For su, we determine that it is being run by checking
for the process in /proc (similarly to top). In general,
T1 should be the time to enter the password, but we may
initiate success detection earlier with little harm. For su,
success results in the creation of a new shell process. T2
should be the time to enter the password plus the time to
start entering the password again if it’s incorrect (terminal
displays error, user reads it, user starts to type again). How-
ever, we do not remap too late, or the user may notice when
she starts typing in the shell. For su, there is a delay in cre-
ating the shell process. If we detect the new shell (logon is
successful) we map the key back immediately and measure
the time expired between su detection (T0) and logon de-
tection. Otherwise we map back at T2 but still must measure
the time until new shell creation.
The results of our experiments are in Table 6. They con-
ﬁrm that the above algorithm performs as expected, and we
observed no errors. The third column of the table gives the
time between detection of the su client and successful lo-
gon (observed by detection of the bash shell). Since time
durations are on the order of seconds, removal of accurate
clocks will not prevent this channel.
Although errors are unlikely, there is the possibility of
mapping the keyboard back before the user has entered
the password. Most likely the last character would be af-
fected; this character would be completely unknown to the
adversary. Thus the adversary’s guessing attack complexity
would be increased in this case (i.e., by a factor of roughly
2.5). The guessing attack would still be tractable (less than
a week).
Test Remapped Key Time until Logon
in Password?
Yes
Yes
Yes
Yes
Yes
No
No
No
No
No
1
2
3
4
5
6
7
8
9
10
22.1 seconds
17.3 seconds
19.7 seconds
19.6 seconds
16.3 seconds
7.8 seconds
6.1 seconds
6.25 seconds
6.6 seconds
6.2 seconds
Table 6. Test Results Conﬁrming Logon De-
tection Channel
5.2. Optimal Remapping Strategy
The adversary can select the number of keys to remap
for each experiment. The optimal strategy is for the adver-
sary to remap a small number of keys per experiment, given
the constraint of limiting the number of remap-caused lo-
gon failures per unit time (e.g., suppose one remap caused
logon failure per week is permissible). Intuitively, remap-
4252
7. Countermeasures
A full exploration of countermeasures is beyond the
scope of this paper. As mentioned above, the logon detec-
tion channel cannot be defeated by eliminating the hardware
cache mechanism [10, 17]. Also, removing accurate clocks
[3, 4] is unlikely to close this channel either.
One potential countermeasure is to use a trusted path
mechanism (which is invoked by the user using a special
key sequence). The keyboard can be remapped to a default
conﬁguration once the trusted path processing has been ini-
tiated. The original keyboard conﬁguration can be restored
upon exiting trusted path processing. During trusted path
processing, only trusted processes should be allowed to run.
More generally, there is a need for methodologies that,
instead of focusing on closing a particular channel, give
generalized conﬁdentiality assurance.
8. Discussion
Our Linux 2.6 timing framework may be of indepen-
dent interest. It gives a task (thread) level timing capability
(tasks are the scheduling unit in Linux 2.6). In other words,
it allows us to accurately measure the CPU usage of other
tasks on the system. Using the particular characteristics of
X Window processing, we have been able to measure the
CPU usage of a target X client.
We now discuss errors resulting from user keyboard en-
try mistakes. For logon detection, the most likely error is a
mis-type of a key that is not remapped, causing it to acci-
dentally be added to the adversary’s password character set.
The impact is roughly a doubling of the search space which
is acceptable for one or two errors. For the other channels,
the main impact would be if a remapped key is mistakenly
entered in place of a non-remapped key. This event is very
unlikely if only one or a small number of keys are remapped
at a time. If it did occur, it would force additional tests, or
the effects could be obviated by combining with the logon
detection channel.
We did not test on a dual-core system. The logon detec-
tion channel should work as is on a dual-core system. The
basic remap channel may require modiﬁcations such as run-
ning an additional process or additional threads. We leave
this topic as future work.
For the logon detection channel, there is an HTTPS ver-
sion (password authentication over a TLS/SSL channel).
A local process can remap the keyboard while a network
eavesdropper confederate can observe whether logon is suc-
cessful on the HTTPS server. Potential issues include when
to initially remap the keyboard and what type of follow-up
attack is possible in order to disclose the password. We
leave this topic as future work.
Figure 4. Logon Detection: Decision points
are when to remap key (T0), when to look for
success (T1), and when to un-remap key (T2).
ping a larger set of keys, S, results in more remap-caused
logon failures since S has a higher probability of intersect-
ing the password. Then subsequent tests will need to nar-
row down within the set S to determine the actual charac-
ters within the password. On the other hand, if the keys in S
were remapped one per test, then the majority of tests would
not cause logon failures and can be executed without extra
delays between tests. Also, this latter strategy avoids the
overhead of the initial logon failure. In the appendix, we
formalize this notion and demonstate an optimal strategy
that remaps a single key per test, given suitable paramaters.
6. Guessing Attacks and Target Environments
For the timing experiments above, it is more efﬁcient
to reduce the possible password space to a size such that
the password can easily be guessed, vs. attempting to com-
pletely determine the password via the timing experiments.
The reason is that the experiments can only be run as of-
ten as the user performs a logon (at most several times per
day). The main constraint is that the guessing program must
be unprivileged.
To test the rate of password guessing, we wrote a guess-
ing program, pass, that uses the su program as a password
oracle. We used Expect to implement pass. We also wrote a
Perl script which creates many parallel instances of Expect
where each one sends different passwords to su. We tested
the script to measure the password guessing rate, and this
rate is used to ﬁnd the average time to guess a password in
the reduced keyspace.
The average guessing rate using this script is 90 guesses
per second on the Linux 2.6 machine described above. By
implementing the scripts in a lower level language such as
C, we can obtain a signiﬁcant performance improvement.
For our estimates, we have assumed 100 guesses per sec-
ond, and then reduced this number to 80 guesses per second
based on the (simpliﬁed) assumption that our guessing pro-
gram would consume approximately 80% of the CPU.
4353
timeclientDetect /bin/surunningRemapkey (T0)Start to detectnew shell (T1)Un-remap key (T2)clientclient9. Conclusions
We have demonstrated new side channels on multiple
versions of the Linux operating system, aimed at password
disclosure. These channels limit the number of times a pass-
word can be used before disclosure. These channels require
a locally running, unprivileged, process on the same host
which the user enters keyboard input on. The mechanism
for the channels is the X Windows keyboard remapping util-
ity. One channel does not depend on the hardware cache.
The Linux 2.6 scheduler is easier to control than the
Linux 2.4 scheduler. Our work reinforces the notion that
side channels are of concern to both cryptographers and
computer security designers. Future work includes ap-
proaches that are capable of demonstrating conﬁdential-
ity in a general manner rather than simply closing speciﬁc
channels.
References
[1] Daniel G. Bobrow, Jerry D. Burchﬁel, Daniel L. Mur-
phy, Raymond S. Tomlinson, TENEX, A Paged Time
Sharing System for the PDP-10 Communications of
the ACM, Vol. 15, pp. 135-143, March 1972.
[2] D.J. Bernstein. Cache-timing Attacks on AES.
http://cr.yp.to/antiforgery/cachetiming-20050414.pdf
[3] Wei Hu. 1991, Reducing Timing Channels with Fuzzy
Time. In Proceedings of the IEEE Symposium on Se-
curity and Privacy, May 1991, Oakland, CA.
[4] Wei Hu. Lattice Scheduling and Covert Channels. In
Proceedings of the IEEE Symposium on Security and
Privacy, May 1992, Oakland, CA.
[5] Paul C. Kocher. Timing attacks on implementations
of difﬁe-hellman, rsa, dss, and other systems. In
CRYPTO, pp. 104-113, 1996.
[6] Butler W. Lampson. A note on the conﬁnement prob-
lem. Communications of the ACM, v.16 n.10, pp.613-
615, Oct. 1973.
[7] B. W. Lampson. Hints for computer system design.
ACM Operating Systems Review, 15(5):33-48, Oct.
1983.
[8] Adrian Nye. Xlib Programming Manual. Volume 1.
O’Reilly, 1992.
[9] D. A. Osvik, A. Shamir and E. Tromer. Cache attacks
and Countermeasures: the Case of AES. Cryptology
ePrint Archive, Report 2005/271, 2005.
[10] D. Page. Partitioned Cache Architecture as a Side-
Channel Defense Mechanism. Cryptology ePrint
Archive, Report 2005/280, 2005.
[11] Colin Percival. Cache missing for fun and proﬁt 2005
[12] Werner Schindler. Optimized Timing Attacks against
Public Key Cryptosystems. Statistics and Decisions,
20:191-210, 2002.
[13] Gaurav Shah, Andres Molina, and Matt Blaze. Key-
boards and Covert Channels. In Proceedings of the
15th USENIX Security Symposium. August 2006.
[14] Jonathan Trostle. Timing Attacks Against Trusted
Path. In IEEE Symposium on Security and Privacy, pp.
125-134, May 1998.
[15] Jonathan Trostle. Modelling a Fuzzy Time System. In
Journal of Computer Security, v.2, n.4, pp.291-310,
1993.
[16] Trusted Computer System Evaluation Criteria.
United States Department of Defense. DoD Standard
5200.28-STD. December 1985.
[17] Zhenghong Wang and Ruby Lee. Covert and Side
Channels due to Processor Architecture. In 22nd An-
nual Computer Security Applications Conference De-
cember 11-15, 2006.
A. Optimal Strategy for Logon Detection
Channel
Given a password alphabet of size A, a password with
c characters (we assume the characters are distinct for sim-
plicity), and let π be a remapping strategy for the adver-
sary. Then we deﬁne C(A, c, π) to be the cost (measured
as number of logons needed) for obtaining the characters in
the password given an alphabet of size A, a password with
c distinct characters, and the strategy π. Also, C(X, y) =
minπC(X, y, π). If A = 96, c = 8, and the delay for a
remap caused logon failure is equivalent to the time it takes
for 16 (non-remap failure) logons to be performed, then we
can show that the optimal strategy is to remap one key per
test. (If we decrease the delay time from 16, then we may
obtain a strategy where it is sometimes beneﬁcial to remap
2 keys per test.)
We obtain the equation:
C(A, c, πr)
 X
= (1 − α)
+ αC(A − r, c)
i
!
pi(C(r, i|K) + C(A − r, c − i))
where πr is the strategy that remaps r characters on the
ﬁrst test, and is optimal for succeeding tests, pi = probabil-
ity of i intersections given that a single intersection occurs,
C(X, y|K) is C(X, y) conditioned on knowledge K from
preceding tests, and α = (1− c/A)(1− c/(A− 1)) . . . (1−
c/(A − r − 1)). Thus α is the probability that none of the
remapped characters is in the password.
The idea behind the proof is that each remap test, using
r keys, divides the set of password characters into two sets,
one with r characters, and one with A − r characters. Thus
induction can be applied. We omit the details due to space
limits.
4454