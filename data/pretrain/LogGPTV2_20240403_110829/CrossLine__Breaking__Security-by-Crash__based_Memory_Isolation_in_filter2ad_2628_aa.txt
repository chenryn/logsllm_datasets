title:CrossLine: Breaking "Security-by-Crash" based Memory Isolation in
AMD SEV
author:Mengyuan Li and
Yinqian Zhang and
Zhiqiang Lin
CrossLine: Breaking “Security-by-Crash” based Memory
Isolation in AMD SEV
Mengyuan Li
The Ohio State University
PI:EMAIL
Yinqian Zhang✉
Southern University of Science &
Technology
PI:EMAIL
Zhiqiang Lin
The Ohio State University
PI:EMAIL
ABSTRACT
AMD’s Secure Encrypted Virtualization (SEV) is an emerging secu-
rity feature of modern AMD processors that allows virtual machines
to run with encrypted memory and perform confidential comput-
ing even with an untrusted hypervisor. This paper first demystifies
SEV’s improper use of address space identifier (ASID) for control-
ling accesses of a VM to encrypted memory pages, cache lines,
and TLB entries. We then present the CrossLine attacks1, a novel
class of attacks against SEV that allow the adversary to launch an
attacker VM and change its ASID to that of the victim VM to imper-
sonate the victim. We present two variants of CrossLine attacks:
CrossLine V1 decrypts victim’s page tables or any memory blocks
conforming to the format of a page table entry; CrossLine V2 con-
structs encryption and decryption oracles by executing instructions
of the victim VM. We discuss the applicability of CrossLine attacks
on AMD’s SEV, SEV-ES, and SEV-SNP processors.
CCS CONCEPTS
• Security and privacy → Hardware security implementa-
tion; Hardware attacks and countermeasures; Trusted com-
puting.
KEYWORDS
Trusted execution environments; Secure Encrypted Virtualization;
Memory encryption; Cloud security
ACM Reference Format:
Mengyuan Li, Yinqian Zhang, and Zhiqiang Lin. 2021. CrossLine: Breaking
“Security-by-Crash” based Memory Isolation in AMD SEV. In Proceedings of
the 2021 ACM SIGSAC Conference on Computer and Communications Security
(CCS ’21), November 15–19, 2021, Virtual Event, Republic of Korea. ACM, New
York, NY, USA, 14 pages. https://doi.org/10.1145/3460120.3485253
1 INTRODUCTION
AMD’s Secure Encrypted Virtualization (SEV) is a security exten-
sion for the AMD Virtualization (AMD-V) architecture [4], which
✉Corresponding authors
1CrossLine refers to interference between telecommunication signals in adjacent
circuits that causes signals to cross over each other.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea.
© 2021 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-8454-4/21/11...$15.00
https://doi.org/10.1145/3460120.3485253
allows one physical server to efficiently run multiple guest virtual
machines (VM) concurrently on encrypted memory. When SEV
is enabled, the memory pages used by a guest VM are transpar-
ently encrypted by a secure co-processor using an ephemeral key
that is unique to each VM, thus allowing the guest VMs to com-
pute on encrypted memory. SEV is AMD’s ambitious movement
towards confidential cloud computing, which is gaining traction
in the cloud industry [9]. Unlike traditional security assumptions
in which the trustworthiness of the system software is taken for
granted, SEV is built atop a threat model where system software
including hypervisor can be untrusted.
“SEV technology is built around a threat model where an at-
tacker is assumed to have access to not only execute user level
privileged code on the target machine, but can potentially ex-
ecute malware at the higher privileged hypervisor level as
well.” [14].
Consequently, such an audacious threat assumption has been
examined under the microscope with numerous attacks (e.g., [6, 8,
10, 17, 19, 20, 27]) since its debut in 2017. With the assumption of a
malicious hypervisor, these attacks successfully compromise the
confidentiality and/or integrity provided by SEV’s memory encryp-
tion by exploiting a number of design flaws, including unencrypted
virtual machine control blocks (VMCB) [10, 27], unauthenticated
memory encryption [6, 8, 10, 17], insecure ECB mode of memory
encryption [8, 17], unprotected nested page tables [19, 20], and
unprotected I/O operations [17].
In light of these security issues, AMD has enhanced SEV with a
sequence of microcode and hardware updates, most notably SEV
with Encrypted State (SEV-ES) and SEV with Secure Nested Paging
(SEV-SNP). SEV-ES encrypts the VMCB of a VM to protect register
values at VMEXITs; SEV-ES processors are already commercially
available. To address the most commonly exploited flaw—the lack of
memory integrity for SEV VMs (including unauthenticated memory
encryption and unprotected nested page tables), AMD plans to
release SEV-SNP, which introduces a Reverse Map Table (RMP) to
dictate ownership of the memory pages, so that the majority of the
previously known attacks will be mitigated.
However, in this paper, we move our attention to another, yet-to-
be-reported design flaw of SEV—the improper ASID-based memory
isolation and access control. Specifically, SEV adopts an ASID-based
access control for guest VMs’ accesses to SEV processor’s internal
caches and the encrypted physical memory. At launch time, each
SEV VM is assigned a unique ASID, which is used as the tag of
cache lines and translation lookaside buffer (TLB) entries. A secure
processor (dubbed AMD-SP) that is in charge of generating and
maintaining the ephemeral memory encryption keys also uses the
current VM’s ASID to index the keys for encrypting/decrypting
Session 11A: Attestation and Firmware Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2937memory pages upon memory access requests. As such, the ASID
of an SEV VM plays a critical role in controlling its accesses to
the private data in the cache-memory hierarchy. Nevertheless, the
assignment of ASID to a VM is under complete control of the hyper-
visor. An implicit “security-by-crash” security principle is adopted
in the SEV design:
“Although the hypervisor has control over the ASID used to run
a VM and select the encryption key, this is not considered a
security concern since a loaded encryption key is meaningless
unless the guest was already encrypted with that key. If the
incorrect key is ever loaded or the wrong ASID is used for a
guest, the first instruction fetch of that guest will fail as memory
will be decrypted with the wrong key, causing junk data to be
executed (and very likely causing a fault).” [14]
The aim of this paper, therefore, is to investigate the validity of
this “security-by-crash” design principle. To do so, we first study
how ASIDs are used in SEV processors to isolate encrypted memory
pages, CPU caches, and TLBs. We also explore how ASIDs are man-
aged by the hypervisor, how an ASID of a VM can be altered by the
hypervisor at runtime, and why the VM with altered ASID crashes
afterwards. This exploration leads to the discovery of several po-
tential opportunities for a VM with an altered ASID to momentarily
breach the ASID-based memory isolation before it crashes.
Next, based on our exploration, we then present CrossLine
attacks, which exploit such a momentary execution to breach the
confidentiality and integrity of SEV VMs. Specifically, an adversary
controlling the hypervisor can launch an attacker VM and, during
its VMEXIT, assign it with the same ASID as the victim VM, and
then resume it, leading to the violation of the ASID-based access
control to the victim’s encrypted memory.
We mainly present two variants of CrossLine. In CrossLine
V1, even though no instructions are executed by the attacker VM
after VMRUN, we show that it is possible to load memory pages
encrypted with the victim VM’s memory encryption key (VEK) dur-
ing page table walks, thus revealing the encrypted content of the
“page table entries” (PTE) through nested page faults. This attack
variant enables the adversary to extract the entire encrypted page
table of the SEV guest VM, as well as any memory blocks conform-
ing to the PTE format. We have also successfully demonstrated
CrossLine V1 on SEV-ES machines, in which we devise techniques
to bypass the integrity checks of launching the attacker VM with
the victim VM’s encrypted VMCB, while keeping the victim VM
completely unaffected. In CrossLine V2, by carefully crafting its
nested page tables, the attacker VM could manage to momentarily
execute arbitrary instructions of the victim VM. By wisely selecting
the target instructions, the adversary is able to construct encryption
oracles and decryption oracles, which enable herself to breach both
integrity and confidentiality of the victim VM. CrossLine V2 is
confined by SEV-ES, but its capability is stronger than V1.
Differences from known attacks. CrossLine differs from all pre-
viously demonstrated SEV attacks in several aspects. First, CrossLine
does not rely on SEV’s memory integrity flaws, which is a common
pre-requisite for all known attacks on SEV. Although CrossLine
may not work on SEV-SNP, the protection does not come from
memory integrity, but a side-effect of the RMP implementation. Sec-
ond, CrossLine attacks do not directly interact with the victim VMs
and thus enable stealthy attacks. As long as the ephemeral encryp-
tion key of the victim VM is kept in the AMD-SP and the victim’s
encrypted memory pages are not deallocated, CrossLine attacks
can be performed even when the victim VM is shutdown. There-
fore, CrossLine is undetectable by the victim VM. In contrast, prior
attacks relying on I/O operations of the victim VM [8, 17, 19, 20]
are detectable by the victim VM.
CrossLine attacks question a fundamental “security-by-crash”
security principle underpinning the design of SEV’s memory and
cache isolation. The demonstration of CrossLine suggests that SEV
should not rely on adversary-controlled ASIDs to mediate access
to the encrypted memory. To eliminate the threats, a principled
solution is to maintain the identity of VMs in the hardware, which
unfortunately requires some fundamental changes in the architec-
ture. As far as we know, SEV-SNP will not integrate such changes.
Responsible disclosure. We have disclosed CrossLine attacks to
AMD via emails in December 2019 and discussed the paper with
AMD engineers by phone in January 2020. We have pointed out
several vulnerable hardware designs, including: (1) The lack of
ASID authentication and inappropriate “security-by-crash” prin-
ciple; (2) the lack of triple fault reporting, which allows SEV and
SEV-ES VM to resume from a triple fault by rewinding VMCB; (3)
the VMSA check is only tied to VMSA’s physical address but not
VMCB’s physical address, which makes Crossline work in SEV-
ES. These vulnerabilities have been acknowledged by AMD. The
demonstrated attacks and their novelty have been acknowledged.
As discussed in the paper, neither of the two attack variants directly
affect SEV-SNP. Therefore, AMD would not replace ASID-based
isolation in the short term, but may invest more principled isolation
mechanisms in the future.
Contributions. This paper makes the following contributions to
the security of AMD SEV and other trusted execution environments.
• It investigates SEV’s ASID-based memory, cache, and TLB iso-
lation, and demystifies its “security-by-crash” design principle
(§3). It raises security concerns of the “security-by-crash” based
memory and TLB isolation for the first time.
• It presents two variants of CrossLine attacks—the only attacks
that breach the confidentiality and integrity of an SEV VM without
exploiting SEV’s memory integrity flaws (§4).
• It presents successful attacks against SEV and SEV-ES proces-
sors (§5). It also discusses the applicability of CrossLine on the
upcoming SEV-SNP processors (§6).
2 BACKGROUND
Secure Memory Encryption (SME). SME is AMD’s x86 exten-
sion for real-time main memory encryption, which is supported in
AMD CPU with Zen micro architecture from 2017 [24]. Aiming to
defeat cold boot attack and DRAM interface snooping, an embedded
Advanced Encryption Standard (AES) engine encrypts data when
the processor writes to the DRAM and decrypts it when processor
reads it. The entire DRAM is encrypted with a single ephemeral
key which is randomly generated each time the machine is booted.
A 32-bit ARM Cortex-A5 Secure Processor (AMD-SP) [21] is inte-
grated in the system-on-chip (SOC) alongside the main processor,
providing a dedicated security subsystem, storing, and managing
Session 11A: Attestation and Firmware Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2938the ephemeral key. Although all memory pages are encrypted by
default, the operating system can mark some pages as unencrypted
by clearing the C-bit (the 48th bit) of the corresponding page table
entries (PTE). However, regardless of the C-bit, all code pages and
page table pages are encrypted by default. With Transparent SME
(TSME), a special mode of operation of SME, the entire memory is
encrypted, ignoring the C-bits of the PTEs.
AMD Virtualization (AMD-V). AMD-V is a set of extensions of
AMD processors to support virtualization. Nested Page Tables (nPT)
is introduced by AMD-V to facilitate address translation [1]. AMD-
V’s nPT provides two levels of address translation. When nPT is
enabled, the guest VM and the hypervisor have their own CR3s:
a guest CR3 (gCR3) and a nested CR3 (nCR3). The gCR3 contains
the guest physical address of the guest page table (gPT); the nCR3
contains the system physical address of the nPT. To translate a
virtual address (gVA) used by the guest VM into the system physical
address (sPA), the processor first references the gPT to obtain the
guest physical address (gPA) of each page-table page. To translate
the gPA of each page, an nPT walk is performed. During a nPT
walk, the gPA is treated as host virtual address (hVA) and translated
into the sPA using the nPT.
However, following AMD-V, SEV allows the hypervisor to have
(almost) complete authority over the management of ASIDs, which
gives rise to security concerns as a malicious hypervisor may abuse
Translation lookaside buffers (TLB) and Page Walk Cache (PWC)
are internal buffers in AMD processors for speeding up the address
translation. AMD-V also relies on these internal buffers for perfor-
mance improvements. AMD-V further introduces an nTLB for nPT.
A successful nPT walk caches the translation from gPA to sPA in
the nTLB for fast accesses [4], while the normal TLBs are used to
store translations from virtual addresses of either the host or the