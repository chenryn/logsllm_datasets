of
amount：
`name: ${invoice.customer}`);
 invoice.orders） {
$3outstanding
.orders）{
---
## Page 171
function printowing(invoice) {
可以用同样的方式提炼出来：
段又修改了这个结构中的数据，也可以如法炮制。所以，
function printowing(invoice)
对下列函数：
它们。这种情况下我可以简单地将它们当作参数传给目标函数。所以，如果我面
Function printDetails(invoice, outstanding） {
function printowing(invoice）{
 let outstanding = θ;
范例：有局部变量
console.log(
console
 printDetails(invoice, outstanding);
const today:
// record due date.
for (const o of invoice.orders）{
// calculate outstanding 
printBanner();
let outstanding = 0;
console.log(^due: ${invoice.dueDate.toLocaleDateString()});
console.log(
//print details 
invoice.dueDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 30);
const
// record due date
printBanner();
let outstanding :
outstanding += o.amount;
 outstanding += o.amount; 
如果局部变量是一个数据结构（例如数组、
 局部变量最简单的情况是：被提炼代码段只是读取这些变量的值，并不修改
就可以将“打印详细信息"这一部分提炼为带两个参数的函数：
(const
today
o
amount:
: Clock.today;
`name: ${invoice.customer}`);
: Clock.today;
of
= new Date(today.getFullYear()， today.getMonth(), today.getDate(） + 30);
 invoice.orders） {
 ${outstanding}
、记录或者对象）
“设置到期日"的逻辑也
而被提炼代码
---
## Page 172
步一
要返回修改后的值。我会用下面这个已经很眼熟的函数来展示该怎么做：
然后一起提炼出去。
码段中使月
时变量的问题。如果你发现源函数的参数被赋值，应该马上使用拆分变量
function printowing(invoice） {
（223）把针对这个变量的操作放到一起。
（240）将其变成临时变量。
范例：对局部变量再赋值
:(oe + ()aneaza6·  5;
return lines;
我要把gatherCustomerData内联到reportLines中，
我只要把被调用的函数的return语句复制出来，粘贴到调用处，取代原本的
情况还可能更复杂。例如，请看下列代码:
几乎是一样的代码，
不过实际情况可能不会这么简单，
lines
，这段代码还不算很麻烦，大多数时候我还是一步到位地完成了重构，只
 dvr.numberofLateDeliveries
但moreThanFiveLateDeliveries函数声明的形式参数名
>5;
，需要我多做一点儿工作，帮助代码融入它
一我还是用简单的“剪切-粘贴-调整"方式
 这时简单的剪切和粘贴就
---
## Page 178
本，带着一点儿懊恼，以更小的步伐再次重构。
满地快速完成重构，然后测试却失败了，这时我会回退到上一
细的重构手法搬移语句到调用者（217）
数可以一步完成，顶多需要一点代码调整。
function reportLines(aCustomer) {
function gathercustomerData(out, aCustomer） {
return lines;
lines.push([
lines
const
out.
重点在于始终小步前进。
然后继续处理后面的代码行，直到完成整个重构。
pusr
["location", acustomer.location]);
acus
 aCustomer.name]);
大多数时候，
，将步子再拆细一点。有时我会自信满
但如果遇到了复杂的情况，我会每次
由于我平时写的函数都很小，
一个能通过测试的版
内联函
---
## Page 179
可以访问到这个名字，就意味着其他代码也可以用到这个表达式，而不用把它重
中也有意义,
数中有意义，
手。
其中的一部分命名，这样我就能更好地理解这部分逻辑是要干什么。
表达式分解为比较容易管理的形式。
动机
const
6.3
Math.min(order.quantity
如果我考虑使用提炼变量，就意味着我要给代码中的一个表达式命名。
这样的变量在调试时也很方便，它们给调试器和打印语句提供了便利的抓
表达式有可能非常复杂而难以阅读。
反向重构：内联变量（123)
曾用名：引入解释性变量（Introduce Explaining Variable)
提炼变量
order.
 我就会考虑将其暴露出来，通常以函数的形式。如果在更宽的范围
.quantity-
 order.itemPrice
（Extract Variable)
 order.itemPrice *
500)
个
order.itemPrice * 0.05 +
。在面对一块复杂逻辑时，
0.1，100);
，这种情况下，
局部变量可以帮助我们将
局部变量使我能给
一旦
---
## Page 180
行测试。
·确认要提炼的表达式没有副作用。
好的例子：如果我处理的这段代码属于一
果处理其他很简单，我就会立即动手，这样马上就可以使用这个新名字。有一个
写一遍，这样能减少重复，并且能更好地表达我的意图。
4
function price(order) {
（base price）等于数量（quantity）乘以单价（item price）。
function price(order) {
范例