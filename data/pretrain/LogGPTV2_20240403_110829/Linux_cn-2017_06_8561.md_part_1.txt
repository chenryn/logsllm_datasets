---
author: Amjith Ramanujam
category: 技术
comments_data: []
count:
  commentnum: 0
  favtimes: 1
  likes: 0
  sharetimes: 0
  viewnum: 9038
date: '2017-06-01 08:44:24'
editorchoice: true
excerpt: 在第一篇文章中，我们讨论了一些能够使命令行应用用起来令人感到愉悦的特性。在第二篇文章中，我们来看看如何用 Python 的一些库来实现这些特性。
fromurl: https://opensource.com/article/17/5/4-practical-python-libraries
id: 8561
islctt: true
largepic: /data/attachment/album/201706/01/084427aqpl3c0tyhuip20l.png
permalink: /article-8561-1.html
pic: /data/attachment/album/201706/01/084427aqpl3c0tyhuip20l.png.thumb.jpg
related:
- displayorder: 0
  raid: 8526
- displayorder: 0
  raid: 8575
reviewer: ''
selector: ''
summary: 在第一篇文章中，我们讨论了一些能够使命令行应用用起来令人感到愉悦的特性。在第二篇文章中，我们来看看如何用 Python 的一些库来实现这些特性。
tags:
- 命令行
thumb: false
title: 4 个用于构建优秀的命令行用户界面的 Python 库
titlepic: true
translator: ucasFL
updated: '2017-06-01 08:44:24'
---
> 
> 在这个分为两篇的关于[具有绝佳命令行界面的终端程序](/article-8526-1.html)的系列文章的第二篇教程中，我们将讨论 Prompt、Toolkit、Click、Pygments 和 Fuzzy Finder 。
> 
> 
> 
![Getting started with 4 practical Python libraries: Prompt Toolkit, Click, Pygments, and Fuzzy Finder](/data/attachment/album/201706/01/084427aqpl3c0tyhuip20l.png "Getting started with 4 practical Python libraries: Prompt Toolkit, Click, Pygments, and Fuzzy Finder")
这是我的一个分为两篇的关于[具有绝佳命令行界面的终端程序](https://opensource.com/tags/python?src=programming_resource_menu)的系列文章的第二篇教程。在[第一篇文章](/article-8526-1.html)中，我们讨论了一些能够使命令行应用用起来令人感到愉悦的特性。在第二篇文章中，我们来看看如何用 Python 的一些库来实现这些特性。
我打算用少于 20 行 Python 代码来实现。让我们开始吧。
### Python Prompt Toolkit
我习惯于把这个库称为命令行应用的瑞士军刀，它可以作为 [readline](https://docs.python.org/2/library/readline.html) 、[curses](https://docs.python.org/2/library/curses.html) 等的替代品。让我们首先安装这个库，然后开始该教程：
```
pip install prompt_toolkit
```
我们以一个简单的 REPL （LCTT 译注：REPL —— Read-Eval-Print Loop，交互式开发环境）开始。一个典型的 REPL 会接收用户的输入，进行一个操作，然后输出结果。比如在我们的例子中，我们将要实现一个具有 “回显” 功能的 REPL 。它仅仅是原样打印出用户的输入：
#### REPL
```
from prompt_toolkit import prompt
while 1:
    user_input = prompt('>')
    print(user_input)
```
这就是实现 REPL 的全部代码。它可以读取用户的输入，然后打印出用户的输入内容。在这段代码中使用的 `prompt` 函数来自 `prompt_toolkit` 库，它是 `readline` 库的一个替代品。
#### 命令历史
为了增强我们的 REPL 的功能，我们可以添加命令历史：
```
from prompt_toolkit import prompt
from prompt_toolkit.history import FileHistory
while 1:
    user_input = prompt('>', 
                        history=FileHistory('history.txt'),
                       )
    print(user_input)
```
我们刚刚给 REPL 添加了持久的**命令历史**。现在，我们可以使用上/下箭头来浏览**命令历史**，并使用 `Ctrl-R` 来搜索**命令历史**。它满足了命令行的基本准则。
#### 自动推荐
在第一篇教程中，我讲到的一个可发现性技巧是自动推荐**历史命令**。（我是首先在 **fish shell** 中看到的这一特性）让我们把这一特性加入到我们的 REPL 中：
```
from prompt_toolkit import prompt
from prompt_toolkit.history import FileHistory
from prompt_toolkit.auto_suggest import AutoSuggestFromHistory
while 1:
    user_input = prompt('>', 
                        history=FileHistory('history.txt'),
                        auto_suggest=AutoSuggestFromHistory(),
                       )
    print(user_input)
```
我们只需要给 `prompt()` API 调用添加一个新的参数。现在，我们有了一个具有 **fish shell** 风格的 REPL，它可以自动推荐**历史命令**。
#### 自动补全
现在，让我们通过**自动补全**来加强 Tab 补全。它能够在用户开始输入的时候弹出可能的命令推荐。
REPL 如何来进行推荐呢？我们使用一个字典来进行可能项的推荐。
比如说我们实现一个针对 SQL 的 REPL 。我们可以把 SQL 关键字存到自动补全字典里面。让我们看一看这是如何实现的：
```
from prompt_toolkit import prompt
from prompt_toolkit.history import FileHistory
from prompt_toolkit.auto_suggest import AutoSuggestFromHistory
from prompt_toolkit.contrib.completers import WordCompleter
SQLCompleter = WordCompleter(['select', 'from', 'insert', 'update', 'delete', 'drop'],
                             ignore_case=True)
while 1:
    user_input = prompt('SQL>', 
                        history=FileHistory('history.txt'),
                        auto_suggest=AutoSuggestFromHistory(),
                        completer=SQLCompleter,
                        )
    print(user_input)
```
再次说明，我们只是简单的使用了 `prompt-toolkit` 内建的一个叫做 `WordCompleter` 的补全特性，它能够把用户输入和可能推荐的字典进行匹配，然后提供一个列表。
现在，我们有了一个能够自动补全、fish shell 风格的历史命令推荐以及上/下浏览历史的 REPL 。实现这些特性只用了不到 10 行的实际代码。
### Click
`Click` 是一个命令行创建工具包，使用它能够更容易的为程序解析命令行选项的参数和常量。在这儿我们不讨论如何使用 `Click` 来作为参数解析器。相反，我们将会看看 `Click` 带有的一些功能。
安装 `Click`：
```
pip install click
```
#### 分页器
分页器是 Unix 系统上的实用工具，它们能够一次一页地显示很长的输出。分页器的一些例子包括 `less`、`more`、`most` 等。通过分页器来显示一个命令的输出不仅仅是一个友好的设计，同时也是必要的。
让我们进一步改进前面的例子。我们不再使用默认的 `print()` 语句，取而代之的是 `click.echo_via_pager()` 。它将会把输出通过分页器发送到标准输出。这是平台无关的，因此在 Unix 系统或 Windows 系统上均能工作。如果必要的话，`click_via_pager` 会尝试使用一个合适的默认分页器来输出，从而能够显示代码高亮。