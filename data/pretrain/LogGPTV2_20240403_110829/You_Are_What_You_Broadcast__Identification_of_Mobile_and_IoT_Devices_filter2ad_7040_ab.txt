ware/software manufacturers; (2) when a proprietary protocol
appears in the trafﬁc generated by a third-party device (identi-
ﬁed from other network trafﬁc features), such device should
be further investigated–it could be a spoofed device.
5. In the initial analysis, we employ Apriori [56] to statisti-
cally examine the patterns of BC/MC protocols used in each
type of devices, and show some examples in Table 1. For each
device, the protocols are ranked by the frequency of captured
packets. We can observe that each device family may have
its distinct frequency pattern of protocols. Different prod-
ucts from the same manufacturer may show the same/similar
pattern of protocols, e.g., several DLink devices demonstrate
identical patterns of protocols. Most likely, such devices share
the same hardware and software in their WiFi component.
The initial analysis suggests the possibility of using fea-
tures extracted from BC/MC packets to identify the make,
type, and model of the devices. The complexity of the patterns
also implies that it could be very challenging for adversaries
to perfectly spoof the network features of other devices.
3.2 Ethical Considerations
We collected data through a completely passive approach.
We did not turn on promiscuous mode. That means, we were
2According to OS market share by country reported by https://gs.
statcounter.com/os-market-share/
USENIX Association
29th USENIX Security Symposium    57
Figure 1: Statistics of collected data: (a) distribution of sniffed WiFi networks and devices in 7 countries; (b) the top 10 most
frequently used BC/MC protocols in the dataset; and (c) the distribution of number of protocols used in devices.
Table 1: Examples of broadcast/multicast protocol frequency patterns of mobile/IoT devices.
device-type
apple-phone
dlink-siren
dlink-watersensor
edimax-camera
protocol frequency pattern
ARP,mDNS,DHCP,ICMPv6,LLC,IGMP
ARP,mDNS,DHCP,ICMPv6,IGMP
ARP,mDNS,DHCP,ICMPv6,IGMP
ARP,mDNS,DHCP,SSDP,IGMP
device-type
apple-smartspeaker
hikvision-camera
lg-tv
sumung-tv
protocol frequency pattern
ARP,ICMPv6,mDNS
ADWIN_CONFIG,SSDP,IGMP
ARP,mDNS,ICMPv6,SSDP,IGMP
ARP,UDP_15600,UDP_8001,IGMP
microsoft-gameconsole
mDNS,LLMNR,ICMPv6,DHCPv6,IPv6,SSDP,IGMP
xiaomi-humidiﬁer
ARP,mDNS
the legitimate and intended receivers of the BC/MC packets.
These packets were also received by all other computers in
the same subnet. We did not eavesdrop on any unicast packet.
We did not attempt to send anything (e.g., ARP requests). To
our best knowledge, the data collection process did not violate
any networks’ Terms and Conditions that were presented to
the users. None of the T&Cs mentioned BC/MC trafﬁc or
network monitoring. Some forbid activities that may impact
the security or usability of the network, while we did not
impact the network. Some information in our data set may be
considered somewhat sensitive. We discuss them here:
1. MAC. MAC addresses are unique identiﬁers of devices
(not users). Recent research showed that users are vulnerable
to MAC tracking attacks [14]. Such privacy risk does not
apply in our data: (1) we only brieﬂy collected data from sites
that are very sparsely scattered globally. The probability to
re-encounter the same MAC is extremely low. (2) We only
retained the top six hexadecimal digits of MAC addresses.
They cannot be used as unique identiﬁers of devices.
2. Device Name. Some devices (e.g., iOS devices) allow users
to conﬁgure device names, and adopt them in several proto-
cols, such as mDNS and DHCP 3. Users may name the device
with their own name (e.g., Alice’s iPhone). We observed in-
dividuals’ names in approximately 7% of the devices. The
majority of them were ﬁrst names, and many were fake names.
In data pre-processing, we removed all names and analogues.
Besides MACs and (some) names, we do not have any
identiﬁer or personal information in the data. We did not
collect any opinion, behavioral information, sensor data, de-
mographic attribute, or other sensitive information. It is ex-
3Although Android allows users to set device names, the user-deﬁned
names are only used as hotspot and Bluetooth names, while DeviceName in
mDNS and DHCP are manufacturer-deﬁned strings that cannot be changed.
Identiﬁers and Feature Extraction
tremely difﬁcult, if not impossible, to associate the collected
data with ofﬂine identities. We did not make any attempt to
discover personal information or to track any user. The data
collection and analysis process did not introduce any risk to
any user. The information we collected was technical data
that was received by a large audience (anyone in the subnet).
We discussed the project and data collection process with
the IRB of the National Engineering Lab for Info. Sec. Tech. at
CAS. They determined that our project was not human subject
research, and it did not need a full IRB review. The Human
Research Protection Program at the University of Kansas
reviewed our written memo and agreed with the decision.
3.3
We extracted three categories of features from the sniffed
BC/MC packets: (1) the identiﬁers are (almost) unique to
each make/type/model of the devices, i.e., they can be em-
ployed to uniquely identify devices when they are available.
(2) The main features are robust discriminators that can be
combined to collectively provide enough information to dis-
tinguish devices. (3) auxiliary features are collected through
actively querying devices. We only use them in evaluation.
1. Identiﬁers. Examples of protocols/ﬁelds that may carry
device identiﬁcation attributions are listed in Table 2, roughly
ordered by their popularity and robustness (i.e., the unlikeli-
hood to be altered). MAC preﬁx is available on every device
and it could be utilized to infer the manufacturer of a device
[40]. We retain the top six hexadecimal digits of MAC ad-
dresses in the MAC preﬁx feature, e.g., string “80:e6:50” is
extracted from MAC “80:e6:50:19:54:4e”. However, MAC
preﬁx may only indicate the manufacturer of the WiFi mod-
ule on some devices, not the device manufacturer. Next, Host
Name in DHCP, answer names in mDNS response messages are
58    29th USENIX Security Symposium
USENIX Association
Table 2: Examples of data ﬁelds that may contain identiﬁers.
priority
Protocol
Fields
1
2
3
4
5
6
7
8
9
10
11
12
–
DHCP
DHCP
DHCP
DHCPv6
MDNS
SSDP.MSEARCH
SSDP.MSEARCH
LLMNR
BROWSER
NBNS
UDP
MAC preﬁx
Option12 (HostName)
Option60 (VendorClass)
Option77 (ModuleName)
Option39 (ClientFQDN)
answer names in response messages
user-agent
X-AV-Client-Info
query name
query name
query name
device name
also meant to contain device names. The other ﬁelds listed
in Table 2 may contain keywords, such as “hp_printer_mfp-
m227fdw”, which can be used to directly identify devices.
Although identiﬁers are unique and informative, we can
not solely rely on them in identifying mobile/IoT devices in
practice. First, they are simply unavailable in the majority of
the devices. In our data set, approximately 30% of the devices
contain additional identiﬁcation information beyond MAC
addresses. Moreover, adversaries or even benign users may
tamper with the identiﬁers listed in Table 2. For instance, a
user may change the name of her iPhone in phone settings,
e.g., to “Alice’s New Toy”. This name will now appear in the
HostName ﬁeld of the DHCP requests from this phone.
2. Main Features from BC/MC Packets. We categorize our
main network features into two types: (A) key-value pair
features and (B) pseudo natural language features.
2A. Key-value Pairs. A key-value pair feature has a distinc-
tive name and a corresponding value, which is categorical,
numerical, or textual. We treat features from DHCP, DHCPv6,
SSDP, LLMNR, BROWSER and NBNS protocols as key-value pairs.
Each DHCP option code is regarded as the key, with the
option value as the value. For instance, in a DHCP Request
packet, the value of Option 57 (Maximum Message Size) is
1500. We extract the feature as: “57:1500”. For DHCP Option
55 (Parameter Request List), the value is the sequence of all
request option codes in a string. Besides, we also generate a
special feature with “dhcp-key-seq” as the key, the sequence
of all option codes in the DHCP message as the value.
Messages from protocols such as SSDP, LLMNR, BROWSER
and NBNS are composed of key-value pairs intrinsically, so
that they are directly extracted. For the SSDP protocol, we also
generate a key “ssdp-key-seq” with the sequence of keys in
SSDP as its value, which is similar to “dhcp-key-seq” feature.
IP addresses do not provide device identity information.
However, the use of IPv4 and IPv6 and the port numbers are
informative. IPs are transferred to strings (“IPv4” or “IPv6”),
while port numbers are preserved. For example, attribute value
“239.255.255.250:1900” is converted to string “IPv4:1900”.
Last, MAC preﬁxes are retained as key-value pairs.
2B. Pseudo Natural Language Features. Besides the key-
value pair features, several protocols also include unstruc-
tured textual content in their messages: (1) mDNS payloads, (2)
broadcast/multicast protocol sequence, and (3) payloads of
UDP packets that are not resolved to a speciﬁc protocol.
We treat
the resource records (RRs), authoritative-
nameservers, and additional records in mDNS messages as
pseudo-natural-language features. We concatenate the val-
ues from all the ﬁelds in an RR (RR name, RR type,
cache-flush, etc) into a string, in which ﬁelds are separated
by ‘|’, so that each ﬁeld will be processed as a token in feature
embedding. Especially, the string values of RR name ﬁeld and
domain name in RDATA ﬁeld are divided into multiple tokens
by replacing all the occurrences of the ‘.’ character with the
separator ‘|’. Each TXT value in data ﬁeld is treated as a token
as well. On average, there are 216 tokens in each RR. We
group all the RR strings into the mDNS feature of a device.
Next, we concatenate the protocol sequence used by each
device to an unstructured text string, and use it as a pseudo-
natural-language feature. We also observed that some UDP
messages, which are not resolved to a speciﬁc protocol, con-
tain information of devices in the form of unstructured plain
text. Hence, we also extract all textual data from the payloads
of such BC/MC UDP messages as pseudo natural language
features. Last, we would like to note that all IP and MAC
addresses in pseudo natural language features are also trans-
formed in the same way as key-value pair features.
3. Auxiliary Features. Devices may advertise their services
by multicasting a SSDP notify message with the device de-
scription URL provided in the “LOCATION” ﬁeld. The URL
points to a device description ﬁle in XML format that contains
identiﬁable information of the device. For instance:
DELL-PC: dell:
Following the URL to download the ﬁle is considered ac-
tive reconnaissance and somewhat intrusive. Therefore, we
only attempted to extract this feature within the authors’ or-
ganizational networks. The information discovered in device
description ﬁles is only used in performance evaluation.
4 Device Fingerprinting and Classiﬁcation
In this section, we present the core algorithms of OWL,
i.e., multi-view wide and deep learning for device manufac-
turer/type/model classiﬁcation and abnormal device detection.
4.1 MvWDL Algorithm Overview
In theory, device identiﬁcation is a classiﬁcation task, which
predicts manufacturer/type/model labels for new devices
based on models learned from training data. In Section 3.3,
we have extracted features from packets of BC/MC protocols.
As observed in our initial analysis and discussed in the lit-
erature (e.g., [42, 43, 53, 64]), features from each protocol
provide certain degree of discriminatory power in device iden-
tiﬁcation. However, when the sample size increases from tens
to tens of thousands, none of the protocols provides enough
information to differentiate the whole spectrum of devices.
For example, we have observed that two devices magic-cast
USENIX Association
29th USENIX Security Symposium    59
and Apple TV share very similar mDNS messages, but they dif-
fer signiﬁcantly in their DHCP and SSDP packets. Meanwhile,
Apple’s iPhone and MacBook generate almost identical DHCP
packets, while their mDNS packets differ from each other.
Our initial observations demonstrate that: (1) each BC/MC
protocol generates an independent set of features that could
contribute to device classiﬁcation; (2) sets of features from
different protocols complement each other in terms of dis-
criminatory power in the identiﬁcation of large volume of
devices and labels; (3) not all protocols are available in all de-
vices, due to devices’ capabilities and network conﬁgurations.
Intuitively, our observations suggest the use of multi-view
learning, where features from different protocols are naturally
organized into views, and classiﬁcation functions on all views
are jointly optimized. In practice, multi-view learning recog-
nizes the inherent diversity and relationships of the features,
which conﬁrm each other in some regions of the feature space,
while complementing each other in other regions. Multi-view
representations are integrated so that different feature spaces
(views) are transformed into the same latent space, to improve
overall classiﬁcation and generalization performance.
Multi-view learning enforces view consistency in training.
When a testing sample triggers strong inconsistency across
views, it is either a new device label that is not in the training
data, or a malicious device, whose networking components
have been tampered with. Especially, when multiple views
indicate strong conﬁdence in contradictory predictions, the
device is highly likely to be spoofed or fabricated.
In this paper, we present a multi-view wide and deep learn-
ing (MvWDL, Figure 2) framework for device classiﬁcation
and abnormal device detection. MvWDL consists of three