tion. But FAST-BRIDGE needs a mechanism to differ-
entiate between different invocations of bi-redirectable
instructions, and it relies on Meta-Data information pro-
vided by SLOW-BRIDGE to enforce correct data redirec-
tion for each execution of bi-redirectable instruction.
In particular, before each bi-redirectable instruction gets
executed, SLOW-BRIDGE extracts the value of all return
addresses on the stack as well as their location offsets with
respect to the base address of the stack, and stores them
in the Meta-Data. The return value is used to form the
Call-Site-Chain (CSC) as a signature in the training data,
and the offset list is to facilitate FAST-BRIDGE retrieving
these return addresses at run-time in the FAST-BRIDGE
kernel stack.
5) Neutral: An instruction with no record of memory access
in the log is categorized as neutral instruction.
6) Unknown: All the instructions which are not executed
in the context of a system call are labelled as unknown
instructions, which is crucial for FALLBACK to take
over the control and invoke SLOW-BRIDGE to infer the
instruction redirection type.
D. Data Redirection
SLOW-BRIDGE enables the trusted VM to access the
untrusted memory snapshot transparently by forwarding all
the access of redirectable variable to the untrusted snapshot
memory. Unlike in FAST-BRIDGE which uses a page manip-
ulation technique to redirect the data, SLOW-BRIDGE uses
memory emulation at VMM level. More details on how to
use emulation-based VM for data redirection can be found in
VMST [19].
V. FALLBACK
The key component to connect FAST-BRIDGE and SLOW-
BRIDGE is the FALLBACK, which is shown in the middle of
Fig. 2. Since FAST-BRIDGE uses the Meta-Data provided by
SLOW-BRIDGE through dynamic analysis, there might exist
instructions that have not been trained by SLOW-BRIDGE and
we call them unknown instructions. At a high level, if FAST-
BRIDGE faces an unknown instruction (ui in short) during the
execution, it suspends its execution and falls back to SLOW-
BRIDGE through FALLBACK.
The rationale for such an OS page fault style fall back
mechanism is based on the observation that if FALLBACK
passes the same untrusted memory snapshot and introspection
command to SLOW-BRIDGE, then the trusted VM (i.e., the
QEMU emulator) in SLOW-BRIDGE would invoke the same
command and eventually execute the same ui. Because we
run the same code to examine the same state of the untrusted
memory snapshot, the program should follow the same path
and ﬁnally touch the same ui in both trusted VMs of FAST-
BRIDGE and SLOW-BRIDGE (the deterministic property of the
introspection program).
In order
to execute the same introspection command
in trusted VM inside SLOW-BRIDGE, there are several ap-
proaches: one is to use network communication to connect
the trusted VM from hypervisor and invoke the command,
the other is to use a process implanting approach [25] to
inject the introspection process in trusted VM or use the in-
VM assisted approach that installs certain agent inside trusted
VM to invoke the command. After the introspection command
ﬁnishes the execution in the trusted VM, SLOW-BRIDGE will
update the Meta-Data, which is implemented using a hash
table for the memoization, and then inform FALLBACK to
resume the execution of trusted VM in FAST-BRIDGE for
further introspection.
VI.
IMPLEMENTATION
We have developed a proof-of-concept prototype of
HYBRID-BRIDGE. Basically, we instrument KVM [33] to
implement FAST-BRIDGE and FALLBACK component, and
modify VMST [19] to implement SLOW-BRIDGE. Speciﬁcally:
FAST-BRIDGE. FAST-BRIDGE provides three main function-
alities and they are implemented in the following way:
• Guest VM system call
interception: To activate
the data redirection policy on the system calls of
9
App. Name
Description
Neutral
Non-Red.
32
31
92
92
4649
2339
2497
2418
2884
2865
3472
106
3219
5181
4325
28
17
53
53
3383
1781
1958
1752
2020
2432
2793
54
2650
4185
3678
Red.
10
1
26
26
1852
908
987
923
1106
1086
1299
13
1205
1825
1630
Semi-Red.
Bi-Red.
Syntax Equal
Semantics Equal
1
1
1
1
55
24
28
26
31
32
30
2
44
51
44
0
0
0
0
34
0
0
19
7
0
26
0
21
14
28
7
7
X
X
X
7
7
X
X
7
7
X
7
7
7
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
getpid
gettime
hostname
uname
arp
uptime
free
lsmod
netstat
vmstat
iostat
dmesg
mpstat
ps
pidstat
Displays the current process pid
Reports the current time
Shows the system’s host name
Prints system information
Manipulates the system ARP cache
Tells how long the system has been running
Displays amount of free and used memory
shows the status of modules in kernel
Prints network connections statistics
Reports virtual memory statistics
Reports CPU statistics
Prints the kernel ring buffer
Reports processors related statistics
Displays a list of active processes
Reports statistics for Linux tasks
TABLE III: Correctness Evaluation Result of HYBRID-BRIDGE and the Statistics of the number of each Instruction Types.
•
•
interest, FAST-BRIDGE needs to intercept all the guest
VM system calls. We implement
the system call
interception feature atop a recent KVM based system
call interception system Nitro [47].
Data redirection: As described in §III-C, FAST-
BRIDGE manipulates guest OS page table to achieve
a transparent data redirection.
Finding the exact time to change the data redi-
rection policy: As mentioned earlier, FAST-BRIDGE
changes the data redirection policy only when the
instruction type of the next-to-be-executed instruction
is different with the current one. To this end, FAST-
BRIDGE needs an efﬁcient mechanism to notify when
the current data redirection policy should be changed.
As described in §III-C, FAST-BRIDGE uses a software
trap technique to notify KVM to change the data redi-
rection policy. In particular, FAST-BRIDGE employs
Exception Bitmap, a 32-bit VM-Execution control
ﬁled that contains one bit for each exception. If the
forth bit of the Exception Bitmap is set, then an int3
execution in guest VM will cause a VMExit. Using
this technique KVM is notiﬁed to take the control and
change the data redirection policy accordingly. In total,
we added 3.5K LOC to implement FAST-BRIDGE in
KVM code base.
SLOW-BRIDGE. We reused our prior VMST code base (es-
pecially the taint analysis component) to implement SLOW-
BRIDGE. Additionally, we developed over 1K LOC atop VMST
to infer the instruction’s data redirection type (described in
§IV-C) and memoizes it in the Meta-Data.
FALLBACK. We did not adopt the process implanting or in-VM
agent assisted approach to implement FALLBACK, and instead
we use a network communication approach. In particular, in
order to run the same introspection command in trusted VM
inside SLOW-BRIDGE, FALLBACK dynamically creates a shell
which uses ssh to invoke the command through system API
such that FALLBACK can precisely know when the command
ﬁnishes. Also, this ssh shell did not introduce any side effect
for our introspection purpose regarding the untrusted memory
snapshot. Also, it is straightforward to implement the logic
for parsing the command log, managing the Meta-Data, and
controlling the VM states. In total, we developed 300 LOC for
FALLBACK.
VII. EVALUATION
In this section, we present our evaluation results. We
took 15 native inspection tools to examine the correctness
of HYBRID-BRIDGE, and we report this set of experiment
in §VII-A. Then we evaluate the performance overhead of
HYBRID-BRIDGE, and compare it with both VIRTUOSO and
VMST in §VII-B. Note that we have the access to the source
code of VIRTUOSO (as it is public open [14]) as well as our
own VMST source code.
We run VMST, VIRTUOSO and HYBRID-BRIDGE on a box
with Intel Core i7 and 8GB of physical memory to collect the
performance results. Ubuntu 12.04 (kernel 2.6.37) and Debian
6.04 (kernel 2.6.32.8) were our host and guest OS, respectively.
A. Correctness
To evaluate the correctness of HYBRID-BRIDGE, we use
a cross-view comparison approach as in VMST. Speciﬁcally,
we ﬁrst execute the native inspection tools shown in the ﬁrst
column of Table III on an untrusted VM and save their outputs.
Then we take a memory snapshot of the untrusted VM and use
HYBRID-BRIDGE to execute the same set of inspections tools
inside the trusted VM and compare the two outputs.
The eighth column of Table III shows that six inspection
tools have exactly the same output for this two rounds of
execution. The manual investigation of the remaining nine
tools shows that the slight differences in outputs are due to the
timing. For example date and uptime have different output
because there is a time difference between running them on the
untrusted OS and taking the snapshot. If we consider this time
difference then the output are similar. Another example is ps
which also has a small difference in output. The ps command
in untrusted OS shows itself in the list of processes but when
we take the snapshot right after ps execution, ps is not
running anymore thus the output of HYBRID-BRIDGE shows
one process less compared to untrusted OS output. The last
column of Table III shows that considering timing differences
the output of all 15 tools are semantically equivalent.
In addition, Table III also presents the statistics of the dif-
ferent instruction types categorized by SLOW-BRIDGE during
10
HYBRID-BRIDGE w/
Full Meta-Data (sec.)
(i.e. FAST-BRIDGE)
Speedup
Slowdown
FAST-BRIDGE vs. VMST
FAST-BRIDGE vs. KVM
App.
Name
getpid
gettime
hostname
uname
arp
uptime
free
lsmod
netstat
vmstat
iostat
dmesg
mpstat
ps
pidstat
HYBRID-BRIDGE
#VMExit
HYBRID-BRIDGE w/o
any Meta-Data (sec.)
VMST
(sec.)
0.423
0.392
0.488
0.389
0.739
0.591
0.627
1.034
1.454
2.195
2.323
8.622
1.635
6.623
8.095
KVM
(sec.)
0.004
1.25X
0.004
1.25X
0.004
1.25X
0.003
1.66X
0.086
1.09X
0.005
2.40X
0.007
2.42X
0.018
2.66X
0.014
7.64X
0.007