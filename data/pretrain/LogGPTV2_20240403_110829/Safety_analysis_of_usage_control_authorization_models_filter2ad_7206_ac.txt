(a) Perform all the actions in c, if there are any. Deﬁne
a state transition from t to t(cid:48) with input c(o1, o2) if
t 
c(o1,o2) t(cid:48). That is, t(cid:48) is the state derived from t by
enforcing the policy c with objects o1 and o2 as param-
eters. If the update actions do not change the attribute
values (i.e., the new value in a update action is the same
as the old value) and there is no destroy action, deﬁne
a state transition from t to itself with input c(o1, o2).
(b) If the body of c is empty, deﬁne a state transition from
t to itself with input c(o1, o2).
2. If any one of the predicates in c is not true with the attribute-
value assignments of o1 and o2 in t, deﬁne a state transition
from t to itself with input c(o1, o2).
3. If o1 /∈ O or o2 /∈ O (i.e., o1 or o2 is destroyed in previous
states), deﬁne a state transition from t to itself with input
c(o1, o2).
4. Repeat above steps in the initial state and every derived state
of the system with every policy and every possible pair of
objects in the initial state.
This algorithm terminates since there is only a ﬁnite number of
states, policies, and pairs of objects. Through this algorithm, all
the state transitions and accept states in FA have been deﬁned.
The accept states are those that authorize the permission (s, o, r).
By the construction, for each history t0  t of the UCONA
system, there is an input, the sequence of instantiated non-creating
policies in t0  t, with which the FA moves from the initial
state t0 to t. Also, for each state reachable from the initial state in
FA, we can construct a history of the UCONA system from the
initial state to this state by using the policies and object pairs in
each transition step. Therefore FA can simulate any history of the
UCONA system.
It is a known fact that the problem of determining whether an
accept state can be reached or not is decidable in a ﬁnite state ma-
chine. This proves that the safety problem in the UCONA system
is decidable.
2
COROLLARY 1. The complexity of safety analysis for a UCONA
system without creating policies and with a ﬁnite domain of each
attribute is polynomial in the number of possible states in the sys-
tem.
Proof. Consider the ﬁnite automaton in Theorem 2 as a directed
graph. The safety check for a permission (s, o, r) is to ﬁnd a path
from the initial state to an accept state, which is called as the PATH
problem. It is known that the PATH problem of a graph is poly-
nomial in the number of nodes. That means, the complexity of the
safety problem is polynomial to the size of all possible states of the
system.
2
4.2 Safety Analysis of UCONA with Creation
The decidable model introduced above does not allow the cre-
ation of new objects in a system. In this section we relax this as-
sumption and allow a restricted form of creation. Intuitively, if the
subject’s attribute values have to be updated in a creating policy,
and there is no policy that can update this subject’s attribute values
to its previous values, then there is a ﬁnite number of objects that
can be created in the system, and the safety is decidable by tracing
all possible system states. We will see in Section 5 that there are
examples of useful systems that meet this requirement. We keep
the assumption of ﬁnite value domain for each attribute.
DEFINITION 9. An attribute-value assignment tuple (or simply
attribute tuple) is a function τ : AT T → dom(AT T ) ∪ {null}
that assigns a value or null to each attribute in AT T .
For a system with a ﬁnite domain for each attribute, there is only
a ﬁnite set of attribute tuples, which is denoted as AT P. In any
system state t = (Ot, σt), for each object o ∈ Ot, its attribute
tuple τo in this state is the attribute-value assignments in this state.
Speciﬁcally, ∀a ∈ AT T, σt(o.a) = τo(a), where τo ∈ AT P.
4.2.1 Grounding Policies
For safety analysis, we generate a set of ground policies with
a grounding process, for each policy in a UCONA scheme. Intu-
itively, grounding a policy is to evaluate the policy with all possible
attribute tuples of the object parameters, and only those satisfying
the predicates in the policy are considered in the safety analysis.
Consider the following generic UCONA policy
c(s, o):
p1 ∧ p2 ∧ ··· ∧ pi → permit(s, o, r)
[createObject o];
up1; . . . ; upm;
upm+1; . . . ; upn;
[destroyObject o];
[destroyObject s];
where the createObject and destroyObject actions are optional,
and p1, . . . , pi are predicates on s’s and o’s attributes.
If c is a
creating policy, these predicates are only based on s’s attributes.
Without loss of generality, we assume that up1, . . . , upm are up-
date actions on o’s attributes, and upm+1, . . . , upn are update ac-
tions on s’s attributes, and for any attribute of an object there is at
most one update in the policy. In a real command, any of the ac-
tions can be optional. For example, for a command that includes a
destroyObject o action, all update actions on o can be removed
since they have no effect on the new system state.
The grounding process works as follows. For any two attribute
tuples τs, τo ∈ AT P, if all the predicates p1, . . . , pi are true with
s’s attribute tuple τs and o’s attribute tuple τo, then a ground policy
c(s : τs, o : τo) is generated with the following format:
c(s : τs, o : τo):
true → permit(s, o, r)
[createObject o];
updateAttributeT uple o : τo → τ(cid:48)
o;
updateAttributeT uple s : τs → τ(cid:48)
s;
[destroyObject o];
[destroyObject s];
where τ(cid:48)
o is the attribute tuple of o after the update actions up1, . . . ,
upm, and τ(cid:48)
s is the attribute tuple of s after the update actions
upm+1, . . . , upn. If c is a creating policy, the predicates p1, . . . , pi
are evaluated with τs only, and we can consider τo(a) = null for
all a ∈ AT T .
This process is repeated with every possible attribute tuple τs
and τo. Since each object has a ﬁnite number of attribute tuples,
for any policy this grounding process is guaranteed to terminate,
and a ﬁnite number of ground policies is generated. The set of
ground policies is denoted as Cn.
With this grounding process, the predicate evaluation in each
policy is pre-processed by considering all possible attribute tuples
in a system. This simpliﬁes the subsequent safety analysis.
EXAMPLE 4. This example illustrates the grounding process
for a policy and does not necessarily have a practical interpre-
tation. For simplicity let AT T = {a} and dom(a) = {1, 2, 3}.
The policy
c(s, o):
(s.a > o.a) → permit(s, o, r)
updateAttribute : o.a = o.a + 1;
generates the following three policies in the grounding process.
c(s : (a = 2), o : (a = 1))
true → permit(s, o, r);
updateAttributeT uple o : (a = 1) → (a = 2);
c(s : (a = 3), o : (a = 1))
true → permit(s, o, r);
updateAttributeT uple o : (a = 1) → (a = 2);
c(s : (a = 3), o : (a = 2))
true → permit(s, o, r);
updateAttributeT uple o : (a = 2) → (a = 3);
For other attribute tuples τs and τo as attribute-value assign-
ments of s and o respectively, if s.a > o.a is not true (e.g., s.a =
1, o.a = 2), no ground policy is generated. Here by deﬁnition we
assume that the predicate s.a > o.a is false if either s.a = null or
o.a = null.
2
Our goal is to use the ﬁnite set of ground policies to study the
safety property of a UCONA system. With the following result, the
change of the system state caused by enforcing an original policy
can be simulated by enforcing a ground policy.
LEMMA 1. Given two states t = (O, σ) and t(cid:48) = (O(cid:48), σ(cid:48)) in a
UCONA system,
1. if t 
c(s,o) t(cid:48), where c ∈ C, then there is a ground pol-
icy cn generated from c such that t 
cn(s:τs,o:τo) t(cid:48), where
τs, τo ∈ AT P.
2. if t 
cn(s:τs,o:τo) t(cid:48), where cn ∈ Cn, then there is a policy
c ∈ C such that t 
c(s,o) t(cid:48), where τs, τo ∈ AT P.
Proof. For the ﬁrst case, let τs(a) = σ(s.a) and τo(a) = σ(o.a)
for each a ∈ AT T . Since t 
c(s,o) t(cid:48), all the predicates in c are
s
satisﬁed with s and o’s attribute values in the state t. According to
the grounding process, trivially cn(s : τs, o : τo) is a valid ground
policy generated from c. Also based on the grounding process, for a
primitive action in c, if it is not an update action, then it is included
in cn; if it is an update action updateAttribute : s.a = v(cid:48), where
a ∈ AT T , v(cid:48) ∈ dom(a), then updateAttributeT uple : τs → τ(cid:48)
is included in cn(s : τs, o : τo), and τ(cid:48)
s(a) = v(cid:48). Therefore with
the actions in cn(s : τs, o : τo), the system state changes to the
same state as with c(s, o).
In the second case, suppose t 
cn(s:τs,o:τo) t(cid:48), where cn ∈ Cn.
Since cn can be enforced in t, the attribute-value assignments of s
and o are τs and τo in t, respectively. According to the grounding
process, this implies that all the predicates in the policy c, from
which cn is generated, are satisﬁed by these assignments. There-
fore the policy c can be applied in t. Also, both c and cn have
the same non-update actions, and all the update actions in c have
the same effect with the updateAttributeT uple action(s) in cn,
hence t 
c(s,o) t(cid:48).
2
This lemma shows that from the same system state, a single step
by enforcing a policy can be simulated with a single step with a
ground policy, and vice versa. The following shows that a history of
the system with the original policies can be simulated by a history
with ground policies.
LEMMA 2. For a UCONA system with initial state t0,
1. if t0 C t, then there is a transition history t0 Cn t.
2. if t0 Cn t, then there is a transition history t0 C t.
Proof. The ﬁrst case can be proved by induction on the number of
steps in t0 C t.
Basis step: Suppose t0 
c(s,o) t, where c ∈ C. Accord-
ing to Lemma 1, there is a ground policy cn ∈ Cn such that
t0 
cn(s:τs,o:τo) t.
Induction step: Assume that for every history t0 C t(cid:48) with k
steps, there is a history t0 Cn t(cid:48). Consider a history t0 C t
of length k + 1 and let t(cid:48) 
c(s,o) t be the last step. Since c can
be enforced in t(cid:48), according to Lemma 1, there is a ground policy
cn ∈ Cn such that t(cid:48) 
cn(s:τs,o:τo) t. By induction hypothesis,
there exists a history t0 Cn t. This completes the induction step
and the proof of the ﬁrst case. A similar approach can be used for
the proof of the second case.
2
With this lemma, we can conclude that for a UCONA system,
the set of all states reachable from the initial state using the original
policies can be reached using the ground policies, and vice verse.
Therefore we can study the safety property of the system with the
set of ground policies.
4.2.2 Attribute Creation Graph
The basic idea of our safety analysis is to allow a ﬁnite number
of creating steps from any subject in the initial state. This requires
that in a creating ground policy, the child’s attribute tuple must be
different from the parent’s attribute tuple, so that if the creating
relation is acyclic, there only can be ﬁnite steps of creating from
the original subject.
DEFINITION 10. A ground policy is a creating ground policy if
it contains a createObject action in its body; otherwise, it is a
non-creating ground policy.
DEFINITION 11. In a creating ground policy cn(s : τs, o : τo),
o is the create-child at-
τs is the create-parent attribute tuple, and τ(cid:48)
tribute tuple.
This deﬁnition implicitly requires that in each creating ground
policy, the child’s attribute tuple is updated. Without loss of gener-
ality, we assume that if there is no update action for the child in a
creating policy, then τo = τ(cid:48)
o in all the ground policies generated
from this creating policy; that is, they are both null-valued attribute
assignments.
DEFINITION 12. The generation value of an object o is deﬁned
recursively as follows:
1. if o ∈ O0, its generation value is 0;
2. if o is created in a creating ground policy c(s : τs, o : τo),
its generation value is one more than the generation value of
its parent s.
DEFINITION 13. For a UCONA system with ﬁnite attribute do-
mains, the attribute creation graph (ACG) is a directed graph with
nodes all the possible attribute tuples AT P, and an edge from τu
to τv if there is a creating ground policy in which τu is the create-
parent attribute tuple and τv is the create-child attribute tuple.
LEMMA 3. In a UCONA system, if the ACG is acyclic and in
each creating ground policy the child’s attribute tuple is updated,
then the set of all possible generation values is ﬁnite, and the max-
imal generation value is |AT P|.
Proof. With an acyclic ACG, in each creating ground policy the
create-child attribute tuple is different from the create-parent at-
tribute tuple, otherwise there is a self-loop with this attribute tu-
ple and the ACG is not acyclic. If the maximal generation value
is more than |AT P|, then there exist two creating ground poli-
cies, c1(s1 : τs1, o1 : τo1) with create-child attribute tuple τ(cid:48)
o1 and
c2(s2 : τs2, o2 : τo2) with create-child attribute tuple τ(cid:48)
o2, and τ(cid:48)
o1
is τs2 or an ancestor of τs2 and τ(cid:48)
o2 is τs1 or an ancestor of τs1 in
ACG. Therefore there is a cycle in the ACG, which is in conﬂict
with the acyclic ACG property of the system. Therefore the set of
all possible generation values is ﬁnite, and the maximal generation
value is |AT P|.
2
4.2.3 Attribute Update Graph
As a subject can create an object, which in turn can create an-
other object, an acyclic ACG ensures that the “depth” of these cre-
ation chains is bounded. At the same time, a subject can have an
unbounded number of direct children, which allows the system to
have an arbitrary large number of objects. With some restrictions
on the attribute update relation, a system can allow only a ﬁnite
number of creations with a single subject as parent. Speciﬁcally, if
the subject’s attribute tuple has to be updated in a creating policy,
and there is no policy in the scheme that can update the subject’s
attribute tuple to a previous one, then the number of the subject’s