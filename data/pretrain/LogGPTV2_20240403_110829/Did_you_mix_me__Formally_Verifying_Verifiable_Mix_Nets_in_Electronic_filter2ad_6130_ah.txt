### End of VectorSpaceModuleSameGroup

**Authorized Use:** This document is licensed for use by Tsinghua University. It was downloaded on February 25, 2022, at 12:14:48 UTC from IEEE Xplore. Usage restrictions apply.

---

### Module Type Mixable

```coq
Module Type Mixable (Message : GroupSig) (Ciphertext : GroupSig)
  (Ring : RingSig) (Field : FieldSig)
  (VS : VectorSpaceSig Ciphertext Field)
  (MVS : VectorSpaceModuleSameGroup Ciphertext Ring Field VS).
  Import MVS.
  
  Parameter KGR : Type.
  Parameter PK : Type.
  
  Definition M := Message.G.
  Definition Mop := Message.Gdot.
  Definition Mzero := Message.Gone.
  Definition Minv := Message.Ginv.
  Definition Mbool_eq := Message.Gbool_eq.
  
  Parameter keygenMix : KGR -> PK. (* Key generation *)
  Parameter enc : PK -> M -> Ring.F -> G. (* Encryption or commitment *)
  
  Axiom M_abgrp : AbeGroup M Mop Mzero Mbool_eq Minv.
  Axiom homomorphism : forall (pk : PK)(m m' : M)(r r' : Ring.F),
    Ciphertext.Gdot (enc pk m' r') (enc pk m r) =
    enc pk (Mop m m') (Ring.Fadd r r').
  Axiom encOfOnePrec : forall (pk : PK)(a : Ring.F)(b : Field.F),
    VS.op (enc pk Mzero a) b = enc pk Mzero (VS.op3 a b).
End Mixable.
```

### Module Type EncryptionScheme

```coq
Module Type EncryptionScheme (Group : GroupSig) (Ring : RingSig) (Field : FieldSig)
  (M : ModuleSig Group Ring) (VS : VectorSpaceSig Group Field)
  (MVS : VectorSpaceModuleSameGroup Group Ring Field M VS).
  Import MVS.
  
  Parameter KGR : Type.
  Parameter PK : Type.
  Parameter SK : Type.
  Parameter M : Set.
  Parameter Mop : M -> M -> M.
  Parameter Mzero : M.
  Parameter Minv : M -> M.
  Parameter Mbool_eq : M -> M -> bool.
  
  Parameter keygen : KGR -> (PK * SK). (* Key generation *)
  Parameter enc : PK -> M -> Ring.F -> G. (* Encryption *)
  Parameter dec : SK -> G -> M. (* Decryption *)
  Parameter keymatch : PK -> SK -> bool. (* Key matching *)
  
  Axiom correct : forall (kgr : KGR) (m : M) (r : Ring.F),
    let (pk, sk) := keygen kgr in
    dec sk (enc pk m r) = m.
  
  Axiom M_abgrp : AbeGroup M Mop Mzero Mbool_eq Minv.
  Axiom homomorphism : forall (pk : PK) (m m' : M) (r r' : Ring.F),
    Group.Gdot (enc pk m' r') (enc pk m r) =
    enc pk (Mop m m') (Ring.Fadd r r').
  Axiom encOfOnePrec : forall (pk : PK)(a : Ring.F)(b : Field.F),
    VS.op (enc pk Mzero a) b = enc pk Mzero (VS.op3 a b).
End EncryptionScheme.
```

### Definitions

```coq
Definition reenc (pk : PK) (c : G) (r : Ring.F) : G :=
  Group.Gdot (enc pk Mzero r) c.

Definition IsReEnc (pk : PK) (c1 c2 : G) (r : Field.F) : Prop :=
  c2 = reenc pk c1 r.

Definition relComEPC (h : G) (hs : VG (1 + N)) (c : G)
  (m1 m2 : VF (1 + N)) (r1 r2 : Field.F) : Prop :=
  m1 <> m2 /\
  c = (EPC (1 + N) h hs m1 r1) /\
  c = (EPC (1 + N) h hs m2 r2).

Definition relPi (h : G) (hs : VG (1 + N)) (c : VG (1 + N))
  (m : MF (1 + N)) (r : VF (1 + N)) : Prop :=
  MFisPermutation m /\
  c = (com (1 + N) h hs m r).

(* Definition of shuffling *)
Definition relReEnc (pk : enc.PK) (e e' : vector G1.G (1 + N))
  (m : MoC.MF (1 + N)) (r : MoC_M.VF (1 + N)) : Prop :=
  let e'' := MoC.PexpMatrix e' m in
  let r'' := RF_CVmult m r in
  let partial := Vmap2 (fun e e' => IsReEnc pk e e') e e'' in
  let partial2 := Vmap2 (fun x y => x y) partial r'' in
  Vforall (fun x => x) partial2.
```

### Module BasicElGamal

```coq
Module BasicElGamal (Group : GroupSig) (Field : FieldSig)
  (VS : VectorSpaceSig Group Field)
  (DualGroup : DualGroupSig Group)
  (DVS : DualVectorSpaceSig Group DualGroup Field VS)
  (MVS : VectorSpaceModuleSameGroupIns DualGroup Field DVS).
  Import MVS.
  
  Definition enc (Pk : PK) (m : M) (r : MoM.VF N) : NthGroup.G :=
    let mr := Vmap2 (fun x y => (x, y)) m r in
    Vmap2 (fun (pk : DualGroup.G) (mr : (Group.G * Field.F)) =>
      (VS.op pk.1 mr.2, Group.Gdot (VS.op pk.2 mr.2) mr.1)) Pk mr.
  
  Definition dec (Sk : SK) (C : NthGroup.G) : M :=
    Vmap2 (fun sk c => Group.Gdot c.2 (Group.Ginv (VS.op c.1 sk))) Sk C.
  
  Definition keymatch (Pk : PK) (Sk : SK) : bool :=
    MoM.VG_eq (Vmap2 (fun pk sk => VS.op pk.1 sk) Pk Sk) (Vmap (fun x => x.1) Pk).
  
  (* Proofs are redacted *)
End ExtendedElGamal.
```

### Appendix C: Privacy of the Mix Net

There are multiple ways to define the privacy of a mix net. One primary distinction is whether or not the decryption of the ciphertexts is modeled. We first address the case where it is not modeled and then comment on the other case at the end.

#### Chosen Permutation Indistinguishability (IND-CPAS)

For this paper, we adopt the notion of chosen permutation indistinguishability (IND-CPAS) from [66], which we have recast into concrete security. This notation is for a verifiable shuffle, which is a pair \((\Sigma, S, (P, V))\) where \(\Sigma\) is an encryption scheme (as defined in Definition 3), \(S\) is a shuffle, and \((P, V)\) is a proof system that proves \((P K, e, e' \in R_{\text{shuf}})\).

Due to the soundness of all mixes, we can express the final output vector of ciphertexts as a function of the composition of the respective permutations and randomness vectors of the mixers. Even if we fix the inputs of all but one mixer, every possible cumulative permutation and vector is still possible (for the class of encryption schemes we consider). Hence, it suffices to show that only negligible information about the permutation used by the honest mixer leaks, and we let \(S\) be the mix of the mix server, who by assumption is honest.

**Definition 4.** A shuffle \((\Sigma, S)\) is said to provide \((t, \epsilon)\)-Indistinguishability under Chosen Permutation Attack (IND-CPAS) if for every \(t\)-time adversary \(A\), the advantage of \(A\) in the IND-CPAS experiment (Figure 1) is at most \(\epsilon\). For simplicity, we often drop \(t\) and \(\epsilon\) and refer to \((\Sigma, S)\) as being (IND-CPAS) secure.

**IND-CPAS Experiment**

```plaintext
ExpIND-CPAS_b(Σ, S)
(PK, SK) ← Σ.KeyGen
(π1, π2, e) ← A(PK)
e' ← S(PK, πb, e)
b' ← A(e')
return b = b'
```

**Definition 5.** An encryption scheme \(\Sigma\) is \((t, \epsilon)\)-IND-CPA secure if no \(t\)-time algorithm \(A\) has an advantage of at least \(\epsilon\) in the IND-CPA experiment (Figure 2). For simplicity, we often drop \(t\) and \(\epsilon\) and refer to \(\Sigma\) as being IND-CPA secure.

**IND-CPA Experiment**

```plaintext
ExpIND-CPA_b(A, κ)
(PK, SK) ← Σ.KeyGen
(m0, m1) ← A(PK)
r ← RP_K
c ← Σ.Enc_PK(mb, r)
b' ← A(c)
return b = b'
```

**Theorem 2.** \((\Sigma, S, (P, V))\) is IND-CPAS if the encryption scheme \(\Sigma\) (satisfying Definition 3) is IND-CPA.

**Proof Sketch.** For simplicity, we consider a variant of IND-CPA where the adversary is allowed polynomially many challenge message pairs and receives either the encryption of all the left messages or all the right messages (called poly-IND-CPA). Any IND-CPA secure scheme is also poly-IND-CPA. We note that for ElGamal and other encryption schemes used in practice, a much tighter security proof is possible, independent of the number of ciphertexts being mixed.

The challenger receives \((\pi1, \pi2, e)\) from the adversary \(A\). Let \(n\) be the number of ciphertexts in \(e\). The challenger chooses \(\{m_i \leftarrow_r M\}_{i=1}^n\) and sends \(\{0, m_i\}_{i=1}^n\) to the poly-IND-CPA challenger, receiving back the ciphertexts \(c\). The challenger then chooses \(b \leftarrow_r \{0, 1\}\) and forms \(e'\) as \(\{c_i * e_{\pi_b(i)}\}_{i=1}^n\), which it then passes to \(A\). The adversary returns its guess \(b'\); if the guess is correct, the simulator returns 0; otherwise, it returns 1.

The simulation is perfect when the IND-CPA challenge is 0 but completely random when the challenge is 1. Hence, the advantage of the challenger against poly-IND-CPA is at least half of the advantage of \(A\) against IND-CPAS.

#### Considering Decryption

We do not provide a formal definition of privacy for the case considering decryption, but several can be found in the literature [26], [27]. The intuition behind these definitions is that the adversary gets to choose the possible messages \((m1, m2)\) of the honest senders but is constrained such that the set of messages must be equal. Additionally, the adversary is allowed to add ciphertexts of its own.

If the mix net is IND-CPAS, any permutation is possible in the output of the ciphertexts and hence in the decryption. Therefore, it suffices to know the set of messages underlying the submitted ciphertexts. Since the set of messages is the same irrespective of the challenge for the honest senders, that part is trivial. However, the ciphertexts submitted by the adversary are harder to deal with. Normally, this is addressed by proofs of knowledge on the submitted ciphertexts or by requiring the encryption to be IND-1CCA-Poly [54] or stronger.

**Authorized Use:** This document is licensed for use by Tsinghua University. It was downloaded on February 25, 2022, at 12:14:48 UTC from IEEE Xplore. Usage restrictions apply.