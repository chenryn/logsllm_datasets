Both the local part and the domain name can contain one or more dots, but no two
dots can appear right next to each other. Furthermore, the first and last characters in
the local part and in the domain name must not be dots:
244 | Chapter 4: Validation and Formatting
---
## Page 261
+[v~{1}、=/+,gx$#i6-0z-]\：)+[-v~{1}、=/+,gxs#6-0z-]
)*@[A-Z0-9-]+(?:-[A-Z0-9-]+)*$
Regex options: Case insensitive
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python
+[-v{1}=/+,gx$#6-0z-v]\=)+[-v{1}、=/+，gx$6-0z-]v
\（+[-6-0z-]\=)+[6-0z-]
Regexoptions: Case insensitive
Regexflavers: .NET, Java, PCRE, Perl, Python, Ruby
Top-level domain has two to six letters
This regular expression adds to the previous versions by specifying that the domain
name must include at least one dot, and that the part of the domain name after the last
dot can only consist of letters. That is, the domain must contain at least rwo levels,
such as secondlevel.con or thirdlevel,secondlevel.com. The top-level domain (-con
in these examples) must consist of rwo to six letters. All country-code top-level domains
(us, -uk, etc.) have rwo letters. The generic top-level domains have between three
(com) and six letters (museun):
[ match a literal @ sign and a dot, respectively. Since the dot is a metachar-
acter when used outside character classes, it needs to be escaped with a backslash. The
@ sign never has a special meaning with any of the regular expression flavors in this
book. Recipe 2.1 gives you a list of all the metacharacters that need to be escaped.
[A-Zo9. -] and the other sequences between square brackets are character classes.
This one allows all letters between A and Z, all digits berween O and 9, as wellas a literal
dot and hyphen. Though the hyphen normally creates a range in a character class, the
246 | Chapter 4: Validaton and Formatting
---
## Page 263
hyphen is treated as a literal when it occurs as the first or last character in a character
class. Recipe 23 tells you all about character classes, including combining them with
shorthands, as in  and *, when used outside character classes, are quantifiers. The plus sign repeats
the preceding regex token one or more times, whereas the asterisk repeats it zero or
more times. In these regular expressions, the quantified token is usually a character
class, and sometimes a group. Therefore,  matches one or more lerters,
digits, dots, and/or hyphens.
As an example of the use of a group,  does the same thing with
a cleaner syntax, so you could replace  with  and $) force the regular expresson to find its
match at the start and end of the subject text, respectively. Placing the whole regular
expression berween these characters effectively requires the regular expression to match
the entire subject.
This is important when validating userinput. You do not want to accept drop database;
-- joe@server,con haha! as a valid email address. Without the anchors, all the previous
regular expressions will match because they find Joe@server,con in the middle of the
given text. See Recipe 2.5 for details about anchors. That recipe also explains why the
^ and S match at line breaks* matching option must be off for these regular
expressions.
In Ruby, the caret and dollaralways match atlinebreaks. The regular expressions using
contains no line breaks. If the string may contain line breaks, all the regexes using 
the caret and dollar work correctly in Ruby, but only if the string you're tryingto validate
and  and \Z> instead. These match at the start and end
of the string onl, regardlesf any ptions iaflaorsdiscussed in thisbok, ex
JavaScript. JavaScript does not support  and ^Z at all. Recipe 2.5 explains these
anchors.
4.1 Validate EmailAddresses | 247
---
## Page 264
The issue with ^) and  and
$. Merely removing the anchors from the regular expression is not the right solution.
If you do that with the final regex, which restricts the top-level domain to letters, it will
match PI:EMAIL in johngdoe .co77, for example. Instead of anchoring the regex
match to the start and end of the subject, you have to specify that the start of the local
part and the top-level domain cannot be part of longer words.
This is easily done with a pair of word boundaries. Replace both ^) and  becomes  and  at the end. This ensures that the phone number regex does not match within longer
text, such as 123-456-78901.
in this case we want to allow a user to enter parentheses and have our regex recognize
As we’ve repeatedly seen, parentheses are special characters in regular expressions, but
them. This is a textbook example of where we need a backslash to escape a special
character so the regular expression treats it as literal input. Thus, the  that also matches a digit,
but in some flavors \d matches a digit from any language's character set or script,
which is not what we want here. See Recipe 2.3 for more information about \d>
[- *] is another character class, one that allows any one of three separators. It's
important that the hyphen appears first or last in this character class, because if it
appeared berween other characters, it would create a range, as with <[o-9]. Another
is to escape it with a backslash. [ -] is therefore equivalent. The < represents a
way to ensure that a hyphen inside a character class matches a literal version of itself
literal space character.
Finally, quantifiers allow you to repeatedly match a token or group. {3 is a quantifier
that causes its preceding element to be matched exactly three times. The regular ex-
pression <[0-9]{3] is therefore equivalent to <[o-9][0-9][o-9], but is shorter and
hopefully easier to read. A question mark (mentioned earlier) is a quantifier that causes
its preceding element to match zero or one time. It could also be written as (o,1}.
Any quantifier that allows somethingto match zero times effectively makes that element
optional. Since a question mark is used after each separator, the phone number digits
are allowed to run together.
Note that although this recipe claims to handle North American phone
numbers, it’s actually designed to work with North American Number-
United States and its territories, Canada, Bermuda, and 17 Caribbean
for the countries that share the country code *1." This includes the
nations. It excludes Mexico and the Central American nations.
4.2 Validate and Fomat North American Phone Numbers I 251
---
## Page 268
Variations
Eliminate invalid phone numbers
So far, the regularexpression matches any 10-digit number. If you want to limit matches
to valid phone numbers according to the North American Numbering Plan, here are