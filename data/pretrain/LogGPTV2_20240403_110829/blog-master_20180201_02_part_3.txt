 14 | 10099182  
 15 | 10101089  
 16 | 10100221  
 17 | 10098163  
 18 | 10106307  
 19 | 10099394  
 20 | 10101551  
 21 | 10099126  
 22 | 10100561  
 23 | 10098148  
 24 | 10100036  
 25 | 10100035  
 26 | 10101603  
 27 | 10101503  
 28 | 10097030  
 29 | 10100451  
 30 | 10098553  
 31 | 10102795  
 32 | 10102419  
 33 | 10099637  
 34 | 10098193  
 35 | 10104661  
 36 | 10109730  
 37 | 10105601  
 38 | 10105077  
 39 | 10100000  
 40 | 10096921  
 41 | 10102728  
 42 | 10099439  
 43 | 10104420  
 44 | 10103140  
 45 | 10101868  
 46 | 10098892  
 47 | 10102668  
 48 | 10102135  
 49 | 10099737  
 50 | 10096268  
 51 | 10099793  
 52 | 10099895  
 53 | 10097987  
 54 | 10094753  
 55 | 10100018  
 56 | 10097786  
 57 | 10104362  
 58 | 10098593  
 59 | 10100344  
 60 | 10097840  
 61 | 10098885  
 62 | 10102741  
 63 | 10100960  
 64 | 10104492  
 65 | 10103391  
 66 | 10101121  
 67 | 10102245  
 68 | 10099606  
 69 | 10107443  
 70 | 10109225  
 71 | 10101080  
 72 | 10099213  
 73 | 10092200  
 74 | 10100289  
 75 | 10104968  
 76 | 10102961  
 77 | 10095828  
 78 | 10100782  
 79 | 10098950  
 80 | 10100325  
 81 | 10110911  
 82 | 10099155  
 83 | 10100830  
 84 | 10100478  
 85 | 10095875  
 86 | 10101989  
 87 | 10100809  
 88 | 10099237  
 89 | 10100522  
 90 | 10100002  
 91 | 10099258  
 92 | 10097575  
 93 | 10105890  
 94 | 10099586  
 95 | 10098356  
 96 | 10104673  
 97 | 10096389  
 98 | 10099394  
 99 |  5048952  
(100 rows)  
Time: 108907.886 ms (01:48.908)  
```  
执行过程与效果类似于PostgreSQL 11的分区表智能并行join，也类似Greenplum的多分区并行JOIN。  
并行聚合的原理可以参考一下文章。  
[《PostgreSQL 11 preview - 分区表智能并行JOIN (已类似MPP架构，性能暴增)》](../201802/20180202_02.md)    
[《HybridDB PostgreSQL "Sort、Group、distinct 聚合、JOIN" 不惧怕数据倾斜的黑科技和原理 - 多阶段聚合》](../201711/20171123_01.md)    
[《PostgreSQL 10 自定义并行计算聚合函数的原理与实践 - (含array_agg合并多个数组为单个一元数组的例子)》](../201801/20180119_04.md)    
[《Postgres-XC customized aggregate introduction》](../201305/20130502_01.md)    
[《PostgreSQL aggregate function customize》](../201212/20121218_02.md)    
5、PostgreSQL 11 智能分区表并行JOIN，耗时57秒。   
```
create unlogged table c(like a) partition by range(id);  
do language plpgsql $$  
declare  
begin  
  for i in 0..127 loop  
    execute format('create unlogged table c%s partition of c for values from (%s) to (%s)', i, i*7812500+1, (i+1)*7812500+1);  
  end loop;  
end;  
$$;  
insert into c select * from b;
set enable_parallel_append =on;
set enable_partition_wise_join =on;
set min_parallel_table_scan_size =0;
set min_parallel_index_scan_size =0;
set parallel_tuple_cost =0;
set parallel_setup_cost =0;
set work_mem ='512MB';
set max_parallel_workers_per_gather =64;
alter table c1 set (parallel_workers =128);
explain select t1.c1,count(*) from c t1 join c t2 using (id) group by t1.c1; 
postgres=# explain select t1.c1,count(*) from c t1 join c t2 using (id) group by t1.c1; 
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=16632154923.74..16632155021.74 rows=200 width=12)
   Group Key: t1.c1
   ->  Sort  (cost=16632154923.74..16632154955.74 rows=12800 width=12)
         Sort Key: t1.c1
         ->  Gather  (cost=16632154048.53..16632154050.53 rows=12800 width=12)
               Workers Planned: 64
               ->  Partial HashAggregate  (cost=16632154048.53..16632154050.53 rows=200 width=12)
                     Group Key: t1.c1
                     ->  Parallel Append  (cost=52147.33..13580322797.97 rows=610366250112 width=4)
                           ->  Parallel Hash Join  (cost=52147.33..106910564.12 rows=30518312504 width=4)
                                 Hash Cond: (t1.id = t2.id)
                                 ->  Parallel Seq Scan on c0 t1  (cost=0.00..42381.59 rows=781259 width=8)
                                 ->  Parallel Hash  (cost=42381.59..42381.59 rows=781259 width=4)
                                       ->  Parallel Seq Scan on c0 t2  (cost=0.00..42381.59 rows=781259 width=4)
                           ->  Parallel Hash Join  (cost=52147.33..106910564.12 rows=30518312504 width=4)
                                 Hash Cond: (t1_2.id = t2_2.id)
                                 ->  Parallel Seq Scan on c2 t1_2  (cost=0.00..42381.59 rows=781259 width=8)
                                 ->  Parallel Hash  (cost=42381.59..42381.59 rows=781259 width=4)
                                       ->  Parallel Seq Scan on c2 t2_2  (cost=0.00..42381.59 rows=781259 width=4)
                           ->  Parallel Hash Join  (cost=52147.33..106910564.12 rows=30518312504 width=4)
                                 Hash Cond: (t1_3.id = t2_3.id)
                                 ->  Parallel Seq Scan on c3 t1_3  (cost=0.00..42381.59 rows=781259 width=8)
                                 ->  Parallel Hash  (cost=42381.59..42381.59 rows=781259 width=4)
                                       ->  Parallel Seq Scan on c3 t2_3  (cost=0.00..42381.59 rows=781259 width=4)
.....................
                           ->  Parallel Hash Join  (cost=52147.33..106910564.12 rows=30518312504 width=4)
                                 Hash Cond: (t1_126.id = t2_126.id)
                                 ->  Parallel Seq Scan on c126 t1_126  (cost=0.00..42381.59 rows=781259 width=8)
                                 ->  Parallel Hash  (cost=42381.59..42381.59 rows=781259 width=4)
                                       ->  Parallel Seq Scan on c126 t2_126  (cost=0.00..42381.59 rows=781259 width=4)
                           ->  Parallel Hash Join  (cost=52147.33..106910564.12 rows=30518312504 width=4)
                                 Hash Cond: (t1_127.id = t2_127.id)
                                 ->  Parallel Seq Scan on c127 t1_127  (cost=0.00..42381.59 rows=781259 width=8)
                                 ->  Parallel Hash  (cost=42381.59..42381.59 rows=781259 width=4)
                                       ->  Parallel Seq Scan on c127 t2_127  (cost=0.00..42381.59 rows=781259 width=4)
                           ->  Parallel Hash Join  (cost=37315.62..2681155.31 rows=4768486329 width=4)
                                 Hash Cond: (t1_1.id = t2_1.id)
                                 ->  Parallel Seq Scan on c1 t1_1  (cost=0.00..35789.72 rows=122072 width=8)
                                 ->  Parallel Hash  (cost=35789.72..35789.72 rows=122072 width=4)
                                       ->  Parallel Seq Scan on c1 t2_1  (cost=0.00..35789.72 rows=122072 width=4)
(649 rows)
Time: 11.169 ms
postgres=# select t1.c1,count(*) from c t1 join c t2 using (id) group by t1.c1; 
 c1 |  count   
----+----------
  0 |  5051349
  1 | 10097499
  2 | 10103957
  3 | 10100072
  4 | 10106395
  5 | 10103695
  6 | 10104899
.............
 94 | 10099586
 95 | 10098356
 96 | 10104673
 97 | 10096389
 98 | 10099394
 99 |  5048952
(100 rows)
Time: 56974.933 ms (00:56.975)
```
## 小结    
### 1000万 与 1000万 求交、差的性能指标：    
方法 | 求交 | 求差    
---|---|---    
原生intersect, except | 31.7秒 | 30秒     
自定义切片+dblink异步调用 | 1.7秒 | 1.7秒    
PostgreSQL 11 并行hashjoin | 3.3秒 | 1.9秒    
通过改写SQL，PostgreSQL 11可以利用并行计算，更好的支撑求数据交、差的性能。(但是需要注意，NULL值在except, intersect中会视为相同，而join时取等的话，是匹配不到的。这个特别需要注意。（所以语义上不完全一样）)    
```    
postgres=# select 1,null except select 1,null;    
 ?column? | ?column?     
----------+----------    
(0 rows)    
postgres=# select 1,null intersect select 1,null;    
 ?column? | ?column?     
----------+----------    
        1 |     
(1 row)    
```    
如果要让语义完全一样，可以用这种写法，但是就用不到hashjoin了。    
```    
即:  等号改成 is not distinct from    
select t1.* from tbl t1 join tbl t2 on ((t1.id is not distinct from t2.id) and (t1.c1 is not distinct from t2.c1));    
```    
而使用dblink异步的方式，需要注意:     
因为我们使用dblink的方法进行HASH分片是扫全表得到的，所以开的并发越多，扫描次数越多。最好是扫一次，并均分到N个临时空间，然后再从临时空间中扫，这样就只需要扫一遍。当然会增加复杂度，如果表不大，实际上多扫几次也无所谓。     
### 10亿 一对一JOIN  10亿（不带过滤条件）   
方法 | 耗时
---|---
dblink + 分区并行JOIN | 28 秒
PostgreSQL 11 分区并行JOIN | 57 秒
PostgreSQL 11 单表HASH并行JOIN | 109 秒
## 参考    
[《惊天性能！单RDS PostgreSQL实例 支撑 2000亿 - 实时标签透视案例》](../201712/20171223_01.md)      
[《PostgreSQL 11 preview - parallel hash join(并行哈希JOIN) 性能极大提升》](../201802/20180201_01.md)      
https://www.postgresql.org/docs/10/static/dblink.html     
[《阿里云RDS PostgreSQL OSS 外部表 - (dblink异步调用封装)并行写提速案例》](../201709/20170906_01.md)     
[《金融风控、公安刑侦、社会关系、人脉分析等需求分析与数据库实现 - PostgreSQL图数据库场景应用》](../201612/20161213_01.md)    
[《PostgreSQL 11 preview - parallel hash (含hash JOIN , hash agg等) 性能极大提升》](../201802/20180201_01.md)    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")