the framework of provable security. Indeed, virtually all textbook
formalizations of the ElGamal-related DDH problem assume prime-
order groups and would not be sufficient to make a formal statement
about the security of Configuration A.
1, 𝐶′
The small subgroup issues removed by Configuration B are rel-
evant when ElGamal is operated according to specification, i.e.,
in attack settings that involve only passive adversaries. If we also
admit active adversaries, then additional issues arise:2 Consider a
communication flow between two honest parties and assume an ac-
tive adversary that intercepts a ciphertext 𝐶 = (𝐶1, 𝐶2) = (𝑌, 𝑀 · 𝑍)
2) (cid:66) (−𝐶1, 𝐶2). When decrypting 𝐶′,
and re-injects it as 𝐶′ = (𝐶′
the receiver will compute value 𝑍 ′ = (−𝑌)𝑥 = (−1)𝑥𝑌 𝑥 = (−1)𝑥𝑍
and use it to recover message 𝑀′ = 𝐶′
2/𝑍 ′ = (𝑀 · 𝑍)/(−1)𝑥/𝑍.
Note that if 𝑥 is an even number then the decryption succeeds with
the correct message 𝑀′ = 𝑀, while if 𝑥 is an odd number then the
decryption results in a wrong message 𝑀′ ≠ 𝑀. As parties will
react differently to correct (meaningful) and incorrect (effectively
random) messages, more often than not it is observable from the
outside whether a decryption is successful or not, and in such cases
the ciphertext manipulation leaks one bit of the secret key 𝑥 to the
adversary.
The following generalization of the attack can be used to leak
more than a single bit of the secret key. It is based on the observa-
tion that for any 𝑡 with 𝑡 | (𝑝 − 1) there exists a group element 𝛼
of order 𝑡, i.e., with 𝛼𝑡 = 1 and 1 ∉ {𝛼, 𝛼2, . . . , 𝛼𝑡−1}. Fix such a
pair (𝑡, 𝛼), let 𝐶 = (𝐶1, 𝐶2) be an honestly generated ciphertext as
above, and assume an adversary that intercepts 𝐶 and re-injects
it as 𝐶′ = (𝐶′
1, 𝐶′
2) (cid:66) (𝛼𝐶1, 𝛼ℎ𝐶2), where ℎ ∈ [1 .. 𝑡]. When pro-
cessing 𝐶′, the decrypter will obtain the message 𝑀′ = 𝐶′
2/𝑍 ′ =
1 ) = 𝛼ℎ−𝑥 𝑀. Note that 𝑀′ = 𝑀 iff 𝛼ℎ−𝑥 = 1 iff ℎ ≡ 𝑥
(𝛼ℎ𝐶2)/(𝛼𝑥𝐶𝑥
(mod 𝑡), while otherwise 𝑀′ ≠ 𝑀. That is, by testing whether
the injected ciphertext 𝐶′ properly decrypts, the adversary can
2It is well-known that ElGamal encryption is malleable and thus not IND-CCA secure.
However, our analysis here is not concerned with indistinguishability but key recovery.
confirm or refute a guess on 𝑥 (mod 𝑡). Recovering 𝑥 (mod 𝑡1), 𝑥
(mod 𝑡2), . . . for carefully picked values 𝑡1, 𝑡2, . . . allows recovering
the full exponent 𝑥 via the Chinese Remainder Theorem. Note that
for each 𝑡-value the adversary has to request up to 𝑡 decryptions, so
that small 𝑡-values are a precondition for the attack to be effective.
To prevent the attack, two countermeasures are immediate: one
is to ensure that the number of distinct integer divisors 𝑡 of 𝑝 − 1 is
very small, while the other is to arrange that all admissible 𝑡-values
are very large. Configurations C and D formalize these ideas; the
techniques can be traced back to Pollard [30] and Lim and Lee [21],
respectively.3
☛ Configuration C: “ElGamal over safe primes”. This is a
refinement of Configuration B where the number of prime factors
of 𝑝 − 1 is reduced to the minimum and thus prime numbers 𝑝, 𝑞
have almost the same size: Pick a large prime group order 𝑞 and a
prime modulus 𝑝 such that 𝑝 − 1 = 2𝑞, choose a generator 𝛾 with
⟨𝛾⟩ = 𝐺 and let 𝑔 = 𝛾 (𝑝−1)/𝑞 = 𝛾2 and 𝐺′ = ⟨𝑔⟩. Choose exponents
𝑥, 𝑦 in the interval [1 .. 𝑞 − 1].
Note that, in this configuration, choosing 𝑔 = 4 = (±2)2 is always
feasible, leading to a reduced public key size when compared to
Configuration B. On the other hand, exponents 𝑥, 𝑦 became large
again, which negatively impacts exponentiation performance. In
practice, some implementations hence work with ‘short exponents’
despite the group order 𝑞 being considerably larger.
☛ Configuration D: “ElGamal over Lim–Lee primes”. This is
a refinement of Configuration B where all prime factors of (𝑝 −1)/2
are chosen to be of roughly the same size: Pick a prime modulus 𝑝
such that if 𝑝 − 1 = 2𝑞1 · · · 𝑞𝑛 is a prime factorization and we let
𝑞 (cid:66) 𝑞1 then for all 𝑞𝑖 ∈ {𝑞2, . . . , 𝑞𝑛} we have 𝑞𝑖 ≈ 𝑞; in particular,
computing discrete logarithms shall be hard modulo all factors of
(𝑝 − 1)/2. Given such a setting, choose a generator 𝛾 with ⟨𝛾⟩ = 𝐺
and let 𝑔 = 𝛾 (𝑝−1)/𝑞 and 𝐺′ = ⟨𝑔⟩. Choose exponents 𝑥, 𝑦 in the
interval [1 .. 𝑞 − 1].
Note that both Configurations C and D effectively protect against
small subgroup attacks in active attack settings, but while Configu-
ration C allows for smaller public keys, Configuration D promises
more efficient exponentiations. When building (or standardizing)
a secure system from scratch, it seems advisable to use one of
these two options. Unfortunately, as we will see next, the OpenPGP
standard does not give the same suggestion.
2.1 ElGamal in OpenPGP
A widely-deployed cryptography standard that suggests using, and
mandates implementing, ElGamal encryption is OpenPGP. While its
first version was put forward in 1998 as RFC2440, the latest official
version appeared in 2007 and is formalized in RFC4880 [12]. Given
the unclarity over what is actually meant by ElGamal encryption,
we analyse the RFC4880 document with respect to the precise
understanding of ElGamal encryption that it assumes or conveys,
paying special attention to the details connected to parameter and
key generation, and to the encryption and decryption operations.
In [12, Sect. 9.1], two references to where to find specifications
of the ElGamal encryption algorithms are given. The one is to
3A third countermeasure is to explicitly ascertain the order of ciphertext component 𝐶′
1,
i.e., to refuse decrypting 𝐶′ if (𝐶′
1)𝑞 ≠ 1. This however would require an additional
exponentiation.
Session 6D: Authentication and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2068ElGamal’s original paper [14], and the other is to the Handbook
of Applied Cryptography [23]. We note that the latter has two
specifications of ElGamal encryption: [23, Sect. 8.4.1] describes the
original scheme from [14], and [23, Sect. 8.4.2] describes a fully
generic version that can be instantiated over any cyclic group. We
conclude that the setting that Sect. 9.1 of RFC4880 describes is
precisely what we refer to as “Configuration A”.
Sects. 5.1 and 5.5.2 and 5.5.3 of [12] define how ElGamal cipher-
texts, public keys, and secret keys, respectively, must be represented
as binary strings, but add nothing to the picture that RFC4880 con-
veys of ElGamal encryption. As these are the only technical state-
ments that RFC4880 makes on ElGamal encryption, we conclude
that, while the standard is precise with the formatting of keys and
ciphertexts, it does not go beyond a bare interpretation of [14] when
it comes to how keys and randomnesses are meant to be picked and
how key generation, encryption, and decryption are supposed to
be conducted.
ElGamal in OpenPGP libraries. This motivates us to look at the
way OpenPGP libraries interpret the standard. Here are our findings
on three of the most popular ones:
Go Go does not provide code to generate ElGamal keys; it only
provides algorithms to encrypt and decrypt. The ephemeral
exponent 𝑦 used in encryption is chosen from [0 .. 𝑝 − 1].
This is fully conform with RFC4880.
Crypto++ The Crypto++ library follows Configuration C by gen-
erating a random safe prime and choosing for the generator
the smallest quadratic residue. It however deviates from Con-
figuration C by picking both exponents 𝑥 and 𝑦 from a short
𝑛 ln(𝑛)2−5(cid:5)(cid:3), where 𝑛 = ⌈log2(𝑝)⌉. For
interval(cid:2)1 .. 22(cid:4)2.4 3√
convenience, we tabulate the upper bound in Appendix A.
As the group generator is not primitive, this setting is in
conflict with RFC4880.
gcrypt The gcrypt library generates a Lim–Lee modulus like in
Configuration D; the minimum size of the prime factors
𝑞𝑖|(𝑝 − 1) is determined by a hard-coded table with entries
very close to the upper bound in the Crypto++ case above.
Unlike in Configuration D, the generator is chosen to be the
smallest integer generating the full group Z×
𝑝 . Both expo-
nents 𝑥 and 𝑦 are sampled from short intervals of size roughly
𝑞3/2. We give the exact sizes for 𝑞𝑖, 𝑥 and 𝑦 in Appendix A.
Due to the short exponents, this setting is in conflict with
RFC4880.
ElGamal parameters in the wild. To get a complete picture of
the use of ElGamal in OpenPGP, it is not sufficient to look at the
prominent open-source libraries. Indeed a large portion of the user
base relies on proprietary or exotic implementations, which are
impossible to track. To address these, we look at the OpenPGP keys
registered on public key servers. We analyse an OpenPGP server
dump [3] produced on Jan 15, 2021 containing 2,721,869 keys, out
of which 835,144 contain ElGamal subkeys.
An OpenPGP ElGamal public key consists of the triplet (𝑝, 𝑔, 𝑋).
This information alone is not sufficient to ascribe the key to one
configuration with certainty, however partial information can be
deduced by attempting to factor 𝑝 − 1. For example, safe primes are
easily recognized by running a primality test on (𝑝 − 1)/2, then a
quadratic residuosity test reveals whether 𝑔 generates the prime
order subgroup or the full group. For random primes of the sizes
we look at, it is in general infeasible to obtain a full factorization of
𝑝 − 1, however partial factorizations and residuosity tests let us at
least formulate credible hypotheses on the key generation process.
To classify public keys, we conducted trial division on 𝑝 − 1
with primes up to 225, then repeatedly applied the elliptic curve
factorisation method (ECM) [20], until we felt guilty for the carbon
emissions. Then we applied 𝑛-th residuosity tests to 𝑔 for the factors
we found. We did not attempt to gain information on the exponent
𝑥 that defines 𝑋 = 𝑔𝑥. Our findings are as follows:
• 69.4% use safe primes: 12.8% match Configuration C, while
55.6% use a quadratic non-residue for 𝑔. Surprisingly, only
16 primes account for all but 237 of these keys, and only 4 ac-
count for all but 1,493, indicating a lion’s share of “standard”
safe primes.
• For 25.3% of the moduli we could prove that (𝑝 − 1)/2 is not
prime, but we could find no factor, likely pointing to Lim-Lee
primes. For all but 47 keys 𝑔 fails all residuosity tests, which
would be consistent with gcrypt’s key generation.
• There is a small share (5.0%) of “quasi-safe primes”, i.e.,
primes of the form 𝑝 = 𝑄 · 𝑞 + 1 where 𝑞 is an unusually
large prime (0.988 times the size of 𝑝 on average) and 𝑄 > 2,
which suggests that 𝑞 was chosen before 𝑝. Only 21 of these
keys use a generator of the group of order 𝑞 and are thus
consistent with Configuration B; the rest is either consistent
with Configuration A, or with none.
• Finally there are only 2,158 moduli for which we found non-
trivial factors, but we were not able to finish the factorization,
indicating that they were either chosen at random, or like
in Configuration B. Looking at the order of 𝑔, only 30 are
consistent with Configuration B, the rest being either consis-
tent with Configuration A, or none. These would almost be
irrelevant if it wasn’t for the attack we describe in Section 4.
3 COMPUTING DISCRETE LOGARITHMS
In the next sections we will need to solve discrete logarithms given
partial knowledge of the exponent. We review here the necessary
algorithms. In what follows we let 𝑔 be a group generator of order
𝑁 , and we let 𝑋 = 𝑔𝑥 be the element of which we seek the discrete
logarithm.
Pollard’s Rho algorithm [30] is the most efficient generic al-
gorithm to compute discrete logarithms. On average, it performs
√︁𝜋𝑁/2 group operations, and uses a constant amount of memory.
In [30], Pollard also introduced the lesser known Lambda method,
which performs better when it is known that 𝑥 < 𝐵 ≪ 𝑁 , requiring
√
only ≈ 2
𝐵 group operations and 𝑂(log(𝐵)) memory [38, §5.1].
When 𝑁 = 𝐿𝑀, we can compute 𝑥 mod 𝐿 by solving a discrete
logarithm in the group of order 𝐿 generated by 𝑔𝑀. The Pohlig–
Hellman algorithm [29] applies this to all prime factors of 𝑁 , and
then recovers 𝑥 via the Chinese Remainder Theorem (CRT).
We will combine all of these techniques in the case where 𝑁 =
𝑞0 · · · 𝑞𝑛, and 𝑥 < 𝐵. Assume 𝑞0 < · · · < 𝑞𝑛, and let 𝑄 = 𝑞0 · · · 𝑞𝑛−1.
We first compute 𝑥 mod 𝑞𝑖 for 0 ≤ 𝑖 < 𝑛 using Pollard’s Rho, then
use the CRT to compute 𝑤 := 𝑥 mod 𝑄. Thus 𝑔𝑥 = 𝑔𝑧𝑄+𝑤 for
some unknown 𝑧 < ⌈𝐵/𝑄⌉. Finally, we recover 𝑧 as the discrete
Session 6D: Authentication and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2069cost is 𝑂(cid:0)√𝑞𝑛−1 +√︁𝐵/𝑄(cid:1) time and 𝑂(log(𝐵/𝑄)) storage. We stress
logarithm of 𝑔𝑦/𝑔𝑤 to base 𝑔𝑄, using Pollard’s Lambda. The total
that this is only better than Pohlig–Hellman when 𝐵 ≪ 𝑁 .
This strategy was already used by van Oorschot and Wiener to
reduce the security of variants of Configuration A that use short
exponents for public keys [37]. We will use it, instead, to recover
ephemeral secrets in cross-configuration scenarios described in
Section 4.
In Section 5.4, we will need to solve discrete logarithm instances
where some non-adjacent bits of 𝑥 are known. Neither the Rho
nor the Lambda method can take advantage of this information,
but the simpler baby-step/giant-step (BSGS) method [33] can. If 𝑥
has 𝑛 unknown bits, BSGS performs 1.5 · 2𝑛/2 group operations on
average, and stores 2𝑛/2 hash table entries. A linear time/memory
trade-off is possible in BSGS.
However, as 𝑛 becomes larger, BSGS has two important draw-
backs: it uses unrealistically large amounts of memory, and it par-
allelizes poorly. A better alternative is van Oorschot and Wiener’s
(vOW) parallel collision search applied to meet-in-the-middle al-
gorithms [38, §5.3], which is much more memory efficient, and
promises a linear parallel speed-up. Based on their analysis, vOW
is expected to require 7 · 23𝑛/4−𝑚/2−1𝑛 group operations, where 2𝑚
is the amount of storage available, counted as a number of hash
table entries, and subject to the constraint 𝑚 ≤ 𝑛/2.
4 CROSS-CONFIGURATION ATTACKS
The disagreements on the interpretation of the OpenPGP standard
may raise doubts on the interoperability between the libraries. For
instance, in an imaginary setting where the Crypto++ code is used
to generate a key pair, the Go code is used to encrypt a message to the
public key, and the gcrypt code is used to decrypt the ciphertext,
it has to be asked whether confidentiality is maintained. While
in a basic scenario these three libraries can, to the best of our
knowledge, in fact interoperate securely, we shall now see that
some choices made by Crypto++ and gcrypt prove to be fatal in a