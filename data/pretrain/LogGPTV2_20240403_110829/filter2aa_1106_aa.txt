Analysis of Mutation and Generation-Based Fuzzing
Whitepaper
Charlie Miller and Zachary N. J. Peterson
Independent Security Evaluators
www.securityevaluators.com
March 1, 2007
c⃝ Independent Security Evaluators 2007. All rights reserved
Analysis of Mutation and Generation-Based Fuzzing
1
Abstract
We present a study of two methods of dynamic application
analysis: mutation-based fuzzing and generation-based
fuzzing. We quantify the differences of these methods by
measuring the amount of executed code required to parse
PNG image ﬁles. Results indicate that generation-based
fuzzing can execute 76% more code when compared to
mutation-based methods.
1
Introduction
“Intelligent fuzzing usually gives more results.”
– Ilja van Sprundel[8]
Dynamic analysis, or fuzzing, is a popular method of
ﬁnding security vulnerabilities in software [10]. Fuzzing
may be used by a developer to ﬁnd potential problems as
part of the quality-assurance process. Likewise, a fuzzer
may be used to ﬁnd potential exploits in an existing soft-
ware application. The technique of fuzzing consists of
sending a large volume of different inputs into a program
in an attempt to make the program perform in a manner
that was not intended.
Fuzzing may result in memory
corruption, a program crash, extreme resource usage, etc.
Such incidents may be exploited to cause a denial of ser-
vice or even allow an attacker to execute arbitrary code in
the context of the application. Fuzzing has grown in popu-
larity because it is much easier (and often more effective)
to generate and run arbitrary inputs than it is to perform a
manual code audit or use software reverse engineering.
One of the most important aspects of successfully ﬁnd-
ing vulnerabilities by fuzzing is the quality and quantity
of the fuzzed inputs. These inputs, or test cases, are nor-
mally constructed in one of two fashions.
In the ﬁrst
method, called mutation-based fuzzing, known good data
is collected (ﬁles, network trafﬁc, etc) and then modiﬁed;
modiﬁcations may be random or heuristic. Examples of
heuristic mutations include replacing small strings with
longer strings or changing length values to either very
large or very small values. The other method, known as
generation-based fuzzing, starts from a speciﬁcation or
RFC, which describes the ﬁle format or network protocol,
and constructs test cases from these documents. The key
to making effective test cases is to make each case differ
from valid data so as to (hopefully) cause a problem in
the application, but not to make the data too invalid, or
else the target application may quickly discard the input
as invalid.
The advantage to mutation-based fuzzing is that lit-
tle or no knowledge of the protocol or application under
study is required. All that is needed is one or more good
samples and a method of fuzzing a target application. On
the other hand, generation-based fuzzing requires a signif-
icant amount of up-front work to study the speciﬁcation
and manually generate test cases. Sometimes manually
generated test cases become too similar to the speciﬁca-
tion and do not differ in the unpredictable ways that ben-
eﬁt generation-based fuzzing. Regardless, intuition says
that the extra knowledge gained by understanding the for-
mat should result in higher quality test cases. Van Sprun-
dels quote at the beginning of this section summarizes this
belief.
However, there has not yet been an attempt to
quantify how much better generation-based fuzzing per-
forms than mutation-based fuzzing.
This paper takes one speciﬁc ﬁle format, the Portable
Network Graphics (PNG) format, and attempts to pre-
cisely quantify the potential advantages gained by using
a generation-based approach. It does not attempt to quan-
tify the added difﬁculties in constructing test cases in a
generated form or to establish the number of test cases
required to completely fuzz an application. Our results
show that generation-based fuzzing performs up to 76%
better when compared to mutation-based fuzzing techniques.
2
Portable Network Graphics Files
The Portable Network Graphics (PNG) format is an exten-
sible ﬁle format for the loss-less storage of compressed
raster images.
This format is widely used and is sup-
ported by most Internet web browsers including Internet
Explorer, Firefox, and Safari.
A PNG ﬁle begins with an eight byte signature con-
taining the following values: 137 80 78 71 13 10
26 10. This signature is followed by a sequence of chunks.
Each chunk consists of a four byte length ﬁeld, a four byte
chunk type ﬁeld, an optional chunk data ﬁeld, and a four
byte cyclic redundancy code (CRC) checksum ﬁeld. The
length ﬁeld is an unsigned integer that gives the length of
Analysis of Mutation and Generation-Based Fuzzing
2
Figure 1: The image containing the most chunks (nine).
the data chunk ﬁeld in bytes. The chunk type ﬁeld is de-
signed so that the four bytes are in the ASCII range and
the case of the letters has signiﬁcance for the decoder.
The PNG speciﬁcation [9] deﬁnes eighteen chunk types
of which three are mandatory in every PNG ﬁle: IHDR,
IDAT and IEND. Optional chunks are referred to as an-
cillary. Ancillary chunks may be ignored by a decoder.
An extension to the original PNG speciﬁcation exists [4],
from which we consider three additional chunks. In this
paper, we consider a total of twenty-one different types of
chunks: IHDR, PLTE, tRNS, cHRM, gAMA,
iCCP, IDAT, SBIT, sRGB, tEXt, zTXt,
iTXt, bKGD, hIST, pHYs, sPLT, tIME,
oFFs, pCAL, sCAL, IEND
Some chunk types may occur more than once in a
ﬁle. Additionally, some chunks are mutually exclusive.
For example, if the iCCP chunk is present, the sRGB
chunk should not be present. Furthermore, the ordering of
some chunks is mandated. For example, the IHDR chunk
should be ﬁrst and the IEND chunk should be last. Some
chunks, such as the tIME chunk, may occur anywhere
in the ﬁle, while other chunks, such as the bKGD chunk,
must occur after the PLTE chunk but before the IDAT
chunk. Lastly, the speciﬁcation also allows other chunks
in addition the twenty-one we consider, to be present in a
ﬁle. We do not consider these for this paper.
  0
  100
  200
  300
  400
  500
  600
10 11 12 13 14 15 16 17 18 19 20 21
9
8
7
6
5
4
3
Number of Files
Number of Chunk Types
220
560
237
422
137
54
1
Figure 2:
The distribution of the number of chunks
present in a ﬁle.
3
PNG File Format Statistics
A collection of 1,631 unique PNG ﬁles were collected
from the Internet. To obtain these ﬁles, the Alexa Web
Search Platform (AWSP) [1] was used to obtain a list of
all URLs ending in “.png”. After processing 16,623 po-
tential PNG URLs using tools available through AWSP,
1,631 valid PNG ﬁles were obtained. The URLs that did
not produce a valid PNG ﬁle were either no longer avail-
able, were not PNG ﬁles, were duplicates of other ﬁles
obtained, or required authentication to acquire. The valid
ﬁles were dissected according to the speciﬁcation and statis-
tics were obtained on the number and types of chunks
present in each ﬁle (see Table 1).
For each ﬁle, we counted the number of chunks that
comprised the PNG image.
Results are shown in Fig-
ure 2. Very few ﬁles have more than seven chunks and
none have no more than nine chunks. Figure 3 illustrates
the frequency of chunk type in the PNG ﬁles. As ex-
pected, all ﬁles contained the mandatory IHDR, IDAT and
IEND chunks. However, nine of the twenty-one consid-
ered chunk types occurred in fewer than 5% of the ﬁles
and some chunk types failed to appear at all.
These results demonstrate that choosing random ﬁles
from the Internet to perform mutation-based fuzzing, with-
out knowledge of the protocol, will generally only fuzz a
few different chunk types. On average, only ﬁve of the
possible twenty-one chunks will be tested by randomly
selecting a ﬁle – a signiﬁcant limitation. Vulnerabilities
Analysis of Mutation and Generation-Based Fuzzing
3
Number of Files
Mean
Standard Deviation
Maximum
Minimum
1631
4.9
1.3
9
3
Table 1: Distribution of the number of chunks in a ﬁle.
  0
  20
  40
  60
  80
  100
oFFs pCAL sCAL IEND
tIME
pHYs sPLT
iTXt bKGD hIST
zTXt
tEXt
PLTE tRNS cHRM gAMA iCCP IDAT sBIT sRGB
IHDR
Numbers of Files that Contain Chunk Type (%)
Chunk Type
32%
11%
19%
34%
 5%
 3%
13%
19%
 4%
10%
34%
 8%
 1%
Figure 3: The frequency of type chunk type in ﬁles.
cannot be discovered in code that is not executed, ex-
emplifying the advantages of generation-based fuzzing.
However, it is not possible to make the conclusion that
generation-based fuzzing is more effective without know-
ing more about the binaries that decode the PNG. For ex-
ample, perhaps all commodity decoders ignore all but the
most common types of chunks, in which case it is only im-
portant to fuzz those chunks that are present in common
PNGs. We address this concern by correlating code cov-
erage of the PNG decoder with the different chunk types.
4
Analysis of Code Coverage for
PNG Chunks
In order to draw a conclusion about the differences be-
tween mutation and generation-based fuzzing, it is neces-
sary to see the types of chunks that mutation-based fuzzing
is likely to miss, but also to observe the amount of code
these chunks represent in the PNG decoder. In other words,
missing a chunk that has very little unique processing in-
volved may not be as detrimental as missing a chunk that
requires a signiﬁcant amount of parsing and processing.
Code coverage is a metric used to describe the num-
ber lines of source code (or assembly) that have been ex-
ecuted. We use code coverage to measure the amount of
code used to process each chunk. While there is not nec-
essarily a correlation between code coverage and ﬁnding
security vulnerabilities, it is certainly the case that code