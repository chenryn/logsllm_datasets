# Defcon XXI Presentation: ccTalk and Coin Handling Devices

## Introduction
- **Speaker:** Nicolas Oberli (aka Balda)
- **Background:**
  - Swiss security engineer
  - CTF enthusiast
  - Retro gamer
  - Beer drinker/brewer

---

## Background
It all started simply. I wanted to add coin handling to my MAMEcab. I purchased a coin acceptor from an auction site.

---

## Coin Handling Devices
- Used in various machines:
  - ATMs
  - Vending machines
  - Casino game machines
  - And more
- Multiple devices are used in these machines, including:
  - Coin/Bill acceptors
  - Coin hoppers

### Coin/Bill Acceptors
- Count coins and bills
- Detect coin/bill value
- Identify false coins/bills

### Coin Hopper
- Returns coins to the customer
- One hopper per coin value
- Dispenses coins one by one

---

## Communication Protocols
- Various protocols are used to communicate with these devices:
  - Parallel
  - Serial (RS232)
  - MDB
  - ccTalk
- ccTalk is vendor-specific but widely used.

### ccTalk Overview
- **"coin-controls-Talk"**
- Semi-proprietary protocol maintained by Money Controls LLC, England
- Protocol specifications available on cctalk.org, but some parts require an NDA

### ccTalk Communication
- Request/response messages
- RS232-like data transmission
  - Uses one wire for both sending and receiving
  - 9600 bits/s, 8N1, TTL signals (0-5V)
- Each device has its own address on the bus (e.g., 1=controller, 2=coin acceptor)

### ccTalk Message Format
- All frames use the same format:
  - Header: Command sent to the device
    - Header == 0 means it's a response
  - Payload length: 0 to 252 bytes
  - Checksum: Complement to 0xFF of the packet
  - Format: `destination | data length | source | header | [data] | checksum`

### ccTalk Headers
- Each command is assigned a header
- 256 possible commands (coded in a byte)

### Sample Communication
- Example poll from @01 to @02: `02 00 01 FE ff`
- Response from @02 to @01: `01 00 02 00 FD`
- Request manufacturer ID: `02 00 01 F6 07`
- Response (length 3): `01 03 02 00 4E 52 49 11` (ASCII encoded: NRI)

### Coin Acceptor Handling
- Controller polls the coin acceptor using header 229
- Response contains:
  - Counter incremented for each event
  - Event counter cycles from 1 to 255
  - Last five results sent in the response

### Coin Acceptor Results
- Result A: Validation channel (different coins organized in channels)
- Result B: Error code (bad coin, mechanical error, etc.)
- Vendor-specific codes and sometimes A and B are switched

---

## Initial Project
- Implemented ccTalk protocol to handle a coin acceptor
- Used a Teensy in keyboard mode
- When a coin is inserted, determined its value and sent the corresponding number of keystrokes to MAME

---

## Can We Do More?
- Other vending machines may use different headers and functions
- Tracking responses is difficult; you need to decode the request first
- No open-source sniffer for ccTalk

### Introducing ccSniff/ccParse
- Python utilities to sniff data on a ccTalk bus and parse it to a readable format
- Uses a ccTalk library developed from scratch
- Can use a Bus Pirate to sniff, which is the best way due to its UART signal handling

### Demo!

---

## Can We Do Even More?
- What if we can inject data on the bus?
  - E.g., "Hey! I'm the coin acceptor and I received a LOT of money!"
- Challenge: Only one wire for the whole bus, leading to potential signal jamming

### ccTalk Multidrop Commands
- Used by the controller to resolve addressing conflicts
- Header 251: Address change
- Forces a device to change its address in case of conflicts

### Device in the Middle
- No checks ensure the request is valid
- Tell the device at address x to change its address to y
- Using these requests, we can hijack the device and intercept all communication between the controller and the device

### Injection Scheme
- Mainboard -> Device -> Attacker
- Credit read and response
- Address change and response

### Timing
- Ensure no jamming of current traffic
- At 9600b/s, it takes 1.04ms to send a byte
- Devices need to be polled every 200ms, providing sufficient time for injection

### Device Hijacking
- Scan the bus for silence
- Prepare injection if sufficient periods of silence
- Craft an address change packet
- Inject packet during silence period
- Respond to requests from the controller
- Set the device to its original address when finished

### Introducing ccJack
- Automates the hijacking process
- Can emulate any device by sniffing current responses and replying the same
- Uses a Bus Pirate to sniff and inject

### Example: Inject Coins!
- Once the coin acceptor is hijacked, increment the counter
- Modify the coin code to increase the value of the injected coin
- Ensure the counter is higher or equal to the last value to avoid errors

### More Possibilities
- Recalibrate coin acceptors (headers 201 and 202)
- Modify the coin path after acceptance (headers 209 and 210)

### Demo!

---

## Hopper Handling
- Hoppers follow a special schema to release money:
  - Controller asks for a challenge (Header 160)
  - Hopper responds with 8 random bytes
  - Controller encodes the challenge and sends the response with the number of coins to release (Header 167)
  - Operation checked periodically by the controller (Header 166)

### Hopper Bias
- Some vendors provide hoppers with no challenge/response support
- Sometimes, just send the hopper serial number as the response
- If the hopper Product Code is "SCH2-NOENCRYPT", the DISPENSE COINS command still needs an 8-byte code, but the value does not matter.

### Grab the Money!
- After hijacking, tell the hopper to dispense 0xff coins
- Use the “Purge hopper” command (Header 121) for better results

### Isn't There Any Protection?
- Some devices only respond after being provided a PIN code
- Wait for the PIN to be sent by the controller (check for header 218)
- Pull the power cord to "help" the controller
- PIN code might be the same for a vending machine model

### Encryption
- Later versions of ccTalk support payload and header encryption
- Two methods: Proprietary (24-bit key) and DES (56-bit key)
- Pre-shared key between the controller and devices
- Different headers for encrypted and unencrypted data

### Future Research
- More to discover about the protocol
- Encryption support seems suspicious
- Some devices allow dumping internal memory via ccTalk
- Possible firmware uploads using ccTalk (Evilgrade ccTalk edition?)

---

## Conclusions
- Analyzing specific protocols can be fun
- ccTalk needs more attention due to its financial applications
- Get a Bus Pirate for its versatility

---

## Availability
- ccTools available on GitHub: [https://github.com/Baldanos/ccTools](https://github.com/Baldanos/ccTools)
- More information on my website: [http://www.balda.ch](http://www.balda.ch)

---

## Many Thanks!
- Any questions?
- @Baldanos
- [http://www.balda.ch](http://www.balda.ch)
- Did I mention I LOVE beer?