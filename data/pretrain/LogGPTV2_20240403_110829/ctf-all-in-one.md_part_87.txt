0x804843b : jmp 0x80483e0
0x8048440: jmp DWORD PTR ds:0x8049ff0
0x8048446: xchg ax,ax
0x8048448: add BYTE PTR [eax],al
[------------------------------------stack----------------------
---------------]
0000| 0xffffd59c --> 0x804861b (add esp,0x10)
0004| 0xffffd5a0 --> 0x1
0008| 0xffffd5a4 --> 0xffffd5bc ("Welcome to XDCTF2015~!\n")
0012| 0xffffd5a8 --> 0x17
0016| 0xffffd5ac --> 0x80485a4 (add ebx,0x1a5c)
0020| 0xffffd5b0 --> 0xffffd5ea --> 0x0
0024| 0xffffd5b4 --> 0xf7ffca64 --> 0x6
0028| 0xffffd5b8 --> 0xf7ffca68 --> 0x3c (' 0x8049f04 --> 0x1
ECX: 0x2a8c
EDX: 0x3
ESI: 0xf7f8ee28 --> 0x1d1d30
EDI: 0xffffd620 --> 0x1
EBP: 0xffffd638 --> 0x0
ESP: 0xffffd598 --> 0x20 (' ')
EIP: 0x804843b (: jmp 0x80483e0)
EFLAGS: 0x296 (carry PARITY ADJUST zero SIGN trap INTERRUPT dire
ction overflow)
[-------------------------------------code----------------------
---------------]
0x804842b : jmp 0x80483e0
0x8048430 : jmp DWORD PTR ds:0x804a01c
0x8048436 : push 0x20
=> 0x804843b : jmp 0x80483e0
| 0x8048440: jmp DWORD PTR ds:0x8049ff0
| 0x8048446: xchg ax,ax
| 0x8048448: add BYTE PTR [eax],al
| 0x804844a: add BYTE PTR [eax],al
|-> 0x80483e0: push DWORD PTR ds:0x804a004
0x80483e6: jmp DWORD PTR ds:0x804a008
0x80483ec: add BYTE PTR [eax],al
0x80483ee: add BYTE PTR [eax],al
JUMP is taken
[------------------------------------stack----------------------
---------------]
0000| 0xffffd598 --> 0x20 (' ')
0004| 0xffffd59c --> 0x804861b (add esp,0x10)
0008| 0xffffd5a0 --> 0x1
0012| 0xffffd5a4 --> 0xffffd5bc ("Welcome to XDCTF2015~!\n")
0016| 0xffffd5a8 --> 0x17
0020| 0xffffd5ac --> 0x80485a4 (add ebx,0x1a5c)
911
6.1.3 pwn XDCTF2015 pwn200
0024| 0xffffd5b0 --> 0xffffd5ea --> 0x0
0028| 0xffffd5b4 --> 0xf7ffca64 --> 0x6
[---------------------------------------------------------------
---------------]
Legend: code, data, rodata, value
0x0804843b in write@plt ()
$ readelf -S a.out | grep 80483e0
[12] .plt PROGBITS 080483e0 0003e0 000060
04 AX 0 0 16
接下来就进入 PLT[0] 处的代码：
912
6.1.3 pwn XDCTF2015 pwn200
gdb-peda$ n
[----------------------------------registers--------------------
---------------]
EAX: 0xffffd5bc ("Welcome to XDCTF2015~!\n")
EBX: 0x804a000 --> 0x8049f04 --> 0x1
ECX: 0x2a8c
EDX: 0x3
ESI: 0xf7f8ee28 --> 0x1d1d30
EDI: 0xffffd620 --> 0x1
EBP: 0xffffd638 --> 0x0
ESP: 0xffffd598 --> 0x20 (' ')
EIP: 0x80483e0 (push DWORD PTR ds:0x804a004)
EFLAGS: 0x296 (carry PARITY ADJUST zero SIGN trap INTERRUPT dire
ction overflow)
[-------------------------------------code----------------------
---------------]
=> 0x80483e0: push DWORD PTR ds:0x804a004
0x80483e6: jmp DWORD PTR ds:0x804a008
0x80483ec: add BYTE PTR [eax],al
0x80483ee: add BYTE PTR [eax],al
[------------------------------------stack----------------------
---------------]
0000| 0xffffd598 --> 0x20 (' ')
0004| 0xffffd59c --> 0x804861b (add esp,0x10)
0008| 0xffffd5a0 --> 0x1
0012| 0xffffd5a4 --> 0xffffd5bc ("Welcome to XDCTF2015~!\n")
0016| 0xffffd5a8 --> 0x17
0020| 0xffffd5ac --> 0x80485a4 (add ebx,0x1a5c)
0024| 0xffffd5b0 --> 0xffffd5ea --> 0x0
0028| 0xffffd5b4 --> 0xf7ffca64 --> 0x6
[---------------------------------------------------------------
---------------]
Legend: code, data, rodata, value
0x080483e0 in ?? ()
gdb-peda$ x/w 0x804a004
0x804a004: 0xf7ffd900
gdb-peda$ x/w 0x804a008
0x804a008: 0xf7fec370
913
6.1.3 pwn XDCTF2015 pwn200
$ readelf -S a.out | grep .got.plt
[23] .got.plt PROGBITS 0804a000 001000 000020
04 WA 0 0 4
看一下 .got.plt 段，所以 0x804a004 和 0x804a008 分别是 GOT[1] 和
GOT[2]。继续调试：
gdb-peda$ n
[----------------------------------registers--------------------
---------------]
EAX: 0xffffd5bc ("Welcome to XDCTF2015~!\n")
EBX: 0x804a000 --> 0x8049f04 --> 0x1
ECX: 0x2a8c
EDX: 0x3
ESI: 0xf7f8ee28 --> 0x1d1d30
EDI: 0xffffd620 --> 0x1
EBP: 0xffffd638 --> 0x0
ESP: 0xffffd594 --> 0xf7ffd900 --> 0x0
EIP: 0x80483e6 (jmp DWORD PTR ds:0x804a008)
EFLAGS: 0x296 (carry PARITY ADJUST zero SIGN trap INTERRUPT dire
ction overflow)
[-------------------------------------code----------------------
---------------]
0x80483dd: add BYTE PTR [eax],al
0x80483df: add bh,bh
0x80483e1: xor eax,0x804a004
=> 0x80483e6: jmp DWORD PTR ds:0x804a008
| 0x80483ec: add BYTE PTR [eax],al
| 0x80483ee: add BYTE PTR [eax],al
| 0x80483f0 : jmp DWORD PTR ds:0x804a00c
| 0x80483f6 : push 0x0
|-> 0xf7fec370 : push eax
0xf7fec371 : push ecx
0xf7fec372 : push edx
0xf7fec373 : mov edx,DWORD
PTR [esp+0x10]
JUMP is taken
[------------------------------------stack----------------------
914
6.1.3 pwn XDCTF2015 pwn200
---------------]
0000| 0xffffd594 --> 0xf7ffd900 --> 0x0
0004| 0xffffd598 --> 0x20 (' ')
0008| 0xffffd59c --> 0x804861b (add esp,0x10)
0012| 0xffffd5a0 --> 0x1
0016| 0xffffd5a4 --> 0xffffd5bc ("Welcome to XDCTF2015~!\n")
0020| 0xffffd5a8 --> 0x17
0024| 0xffffd5ac --> 0x80485a4 (add ebx,0x1a5c)
0028| 0xffffd5b0 --> 0xffffd5ea --> 0x0
[---------------------------------------------------------------
---------------]
Legend: code, data, rodata, value
0x080483e6 in ?? ()
PLT[0] 处的代码将 GOT[1] 的值压入栈中，然后跳转到 GOT[2]。这两个 GOT 表条
目有着特殊的含义，动态链接器在开始时给它们填充了特殊的内容：
GOT[1]：一个指向内部数据结构的指针，类型是 link_map，在动态装载器内
部使用，包含了进行符号解析需要的当前 ELF 对象的信息。在它的 l_info
域中保存了 .dynamic 段中大多数条目的指针构成的一个数组，我们后面会
利用它。
GOT[2]：一个指向动态装载器中 _dl_runtime_resolve 函数的指针。
函数使用参数 link_map_obj 来获取解析导入函数（使用 reloc_index 参数标
识）需要的信息，并将结果写到正确的 GOT 条目中。在 _dl_runtime_resolve
解析完成后，控制流就交到了那个函数手里，而下次再调用函数的 plt 时，就会直
接进入目标函数中执行。
_dl-runtime-resolve 的过程如下图所示：
915
6.1.3 pwn XDCTF2015 pwn200
重定位项使用 Elf_Rel 结构体来描述，存在于 .rep.plt 段和 .rel.dyn 段
中：
typedef uint32_t Elf32_Addr;
typedef uint32_t Elf32_Word;
typedef struct
{
Elf32_Addr r_offset; /* Address */
Elf32_Word r_info; /* Relocation type and symbol in
dex */
} Elf32_Rel;
typedef uint64_t Elf64_Addr;
typedef uint64_t Elf64_Xword;
typedef int64_t Elf64_Sxword;
typedef struct
{
Elf64_Addr r_offset; /* Address */
Elf64_Xword r_info; /* Relocation type and symbol in
dex */
Elf64_Sxword r_addend; /* Addend */
} Elf64_Rela;
916
6.1.3 pwn XDCTF2015 pwn200
32 位程序使用 REL，而 64 位程序使用 RELA。
下面的宏描述了 r_info 是怎样被解析和插入的：
/* How to extract and insert information held in the r_info fiel
d. */
#define ELF32_R_SYM(val) ((val) >> 8)
#define ELF32_R_TYPE(val) ((val) & 0xff)
#define ELF32_R_INFO(sym, type) (((sym) > 32)
#define ELF64_R_TYPE(i) ((i) & 0xffffffff)
#define ELF64_R_INFO(sym,type) ((((Elf64_Xword) (sym)) r_info) = (Elf32_Rel->r_info) >> 8
每个符号使用 Elf_Sym 结构体来描述，存在于 .dynsym 段和 .symtab 段中，
而 .symtab 在 strip 之后会被删掉：
917
6.1.3 pwn XDCTF2015 pwn200
typedef struct
{
Elf32_Word st_name; /* Symbol name (string tbl index
) */
Elf32_Addr st_value; /* Symbol value */
Elf32_Word st_size; /* Symbol size */
unsigned char st_info; /* Symbol type and binding */
unsigned char st_other; /* Symbol visibility */
Elf32_Section st_shndx; /* Section index */
} Elf32_Sym;
typedef struct
{
Elf64_Word st_name; /* Symbol name (string tbl index
) */
unsigned char st_info; /* Symbol type and binding */
unsigned char st_other; /* Symbol visibility */
Elf64_Section st_shndx; /* Section index */
Elf64_Addr st_value; /* Symbol value */
Elf64_Xword st_size; /* Symbol size */
} Elf64_Sym;
下面的宏描述了 st_info 是怎样被解析和插入的：
/* How to extract and insert information held in the st_info fie
ld. */
#define ELF32_ST_BIND(val) (((unsigned char) (val)) >> 4)
#define ELF32_ST_TYPE(val) ((val) & 0xf)
#define ELF32_ST_INFO(bind, type) (((bind) : push eax
0xf7fec371 : push ecx
0xf7fec372 : push edx
0xf7fec373 : mov edx,DWORD PTR [esp+0x10]
0xf7fec377 : mov eax,DWORD PTR [esp+0xc]
0xf7fec37b : call 0xf7fe6080 
0xf7fec380 : pop edx
0xf7fec381 : mov ecx,DWORD PTR [esp]
0xf7fec384 : mov DWORD PTR [esp],eax
0xf7fec387 : mov eax,DWORD PTR [esp+0x4]
0xf7fec38b : ret 0xc
End of assembler dump.
该函数在 glibc/sysdeps/i386/dl-trampoline.S 中用汇编实现，先保存寄存
器，然后将两个值分别传入寄存器，调用 _dl_fixup ，最后恢复寄存器：
gdb-peda$ x/w $esp+0x10
0xffffd598: 0x00000020
gdb-peda$ x/w $esp+0xc
0xffffd594: 0xf7ffd900
还记得这两个值吗，一个是在 : push 0x20 中压入的偏移量，
一个是 PLT[0] 中 push DWORD PTR ds:0x804a004 压入的 GOT[1]。
函数 _dl_fixup(struct link_map *l, ElfW(Word) reloc_arg) ，其参数分
别由寄存器 eax 和 edx 提供。继续调试：
gdb-peda$ n
[----------------------------------registers--------------------
---------------]
EAX: 0xf7ffd900 --> 0x0
919
6.1.3 pwn XDCTF2015 pwn200
EBX: 0x804a000 --> 0x8049f04 --> 0x1
ECX: 0x2a8c
EDX: 0x20 (' ')
ESI: 0xf7f8ee28 --> 0x1d1d30
EDI: 0xffffd620 --> 0x1
EBP: 0xffffd638 --> 0x0
ESP: 0xffffd588 --> 0x3