对于资源管理，systemd 使用 cgroup v2 接口。
要修改系统资源的发布，您可以应用以下一个或多个资源分发模型：
::: variablelist
[Weights（权重）]{.term}
:   资源分布方式是添加所有子组的权重，并为各个子组提供与总和匹配的部分。
    例如，如果您有 10 个 cgroup，每个 cgroup 的值为 100，则总和为
    1000，每个 cgroup 都接收资源中的一个。
    权重通常用于分发无状态资源。[*CPUWeight=*]{.emphasis}
    选项是此资源分布模型的实现。
[Limits]{.term}
:   cgroup
    最多可消耗已配置的资源量，但您也可以过量使用资源。因此，子组限值总和可能会超过父组限制。
    [*MemoryMax=*]{.emphasis} 选项是此资源分配模型的实施。
[Protections（保护）]{.term}
:   可以为 cgroup
    设置受保护的资源量。如果资源使用量低于保护边界，内核将尝试不以竞争同一资源的
    cgroup 替代其他 cgroup。也允许过量使用。
    [*MemoryLow=*]{.emphasis} 选项是此资源分配模型的实施。
[Allocations（分配）]{.term}
:   独占分配有限资源的绝对数量。不允许过量使用。Linux
    中这种资源类型的一个示例就是实时预算。
:::
::: itemizedlist
**其他资源**
-   [使用 systemd 管理
    CPU](#assembly_configuring-resource-management-using-systemd_monitoring-and-managing-system-status-and-performance.html#proc_managing-cpu-with-systemd_assembly_configuring-resource-management-using-systemd_monitoring-and-managing-system-status-and-performance "使用 systemd 分配 CPU 资源"){.link}
-   [使用 systemd
    分配内存资源](#assembly_configuring-resource-management-using-systemd_monitoring-and-managing-system-status-and-performance.html#proc_managing-memory-with-systemd_assembly_configuring-resource-management-using-systemd_monitoring-and-managing-system-status-and-performance "使用 systemd 分配内存资源"){.link}
-   [使用 systemd 配置 I/O
    带宽](#assembly_configuring-resource-management-using-systemd_monitoring-and-managing-system-status-and-performance.html#proc_configuring-i-o-bandwidth-with-systemd_assembly_configuring-resource-management-using-systemd_monitoring-and-managing-system-status-and-performance "使用 systemd 配置 I/O 带宽"){.link}
:::
:::
::: section
::: titlepage
# []{#assembly_configuring-resource-management-using-systemd_monitoring-and-managing-system-status-and-performance.html#proc_managing-cpu-with-systemd_assembly_configuring-resource-management-using-systemd_monitoring-and-managing-system-status-and-performance}使用 systemd 分配 CPU 资源 {.title}
:::
在由 systemd 管理的系统上，每个系统服务在其 cgroup 中启动。通过启用对
CPU cgroup 控制器的支持，系统使用对 CPU
资源的服务感知分布，而不是按进程分布。在服务感知型分发中，每个服务收到的
CPU 时间与系统上运行的所有其他服务的 CPU
时间大致相同，无论组成该服务的进程数量如何。
如果特定的服务需要更多 CPU 资源，您可以通过更改该服务的 CPU
时间分配策略来授予它们。
::: title
**步骤**
:::
在使用 systemd 时设置 CPU 时间分配策略选项：
::: orderedlist
1.  在您选择的服务中检查 CPU 时间分配策略选项的分配值：
    ``` screen
    $ systemctl show --property  
    ```
2.  将 CPU 时间分配策略选项的所需值设置为 root：
    ``` screen
    # systemctl set-property  =
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    cgroup 属性在设置后立即应用。因此，不需要重新启动服务。
    :::
:::
cgroup 属性在设置后立即应用。因此，不需要重新启动服务。
::: itemizedlist
**验证步骤**
-   要验证您是否成功更改了服务的 CPU
    时间分配策略选项的所需值，请运行以下命令：
    ``` screen
    $ systemctl show --property  
    ```
:::
::: itemizedlist
**其他资源**
-   [systemd 的 CPU
    时间分配策略选项](#assembly_configuring-resource-management-using-systemd_monitoring-and-managing-system-status-and-performance.html#ref_cpu-time-allocation-policy-options-with-systemd_assembly_configuring-resource-management-using-systemd_monitoring-and-managing-system-status-and-performance "systemd 的 CPU 时间分配策略选项"){.link}
-   [资源分配模型简介](#assembly_configuring-resource-management-using-systemd_monitoring-and-managing-system-status-and-performance.html#con_understanding-resource-management-using-systemd_assembly_configuring-resource-management-using-systemd_monitoring-and-managing-system-status-and-performance "资源分配模型简介"){.link}
:::
:::
::: section
::: titlepage
# []{#assembly_configuring-resource-management-using-systemd_monitoring-and-managing-system-status-and-performance.html#ref_cpu-time-allocation-policy-options-with-systemd_assembly_configuring-resource-management-using-systemd_monitoring-and-managing-system-status-and-performance}systemd 的 CPU 时间分配策略选项 {.title}
:::
最常用的 CPU 时间分配策略选项包括：
::: variablelist
[`CPUWeight=`{.literal}]{.term}
:   在所有其他服务上为特定服务分配[**更高的优先级**]{.strong}。您可以从间隔
    1 - 10,000 中选择一个值。默认值为 100。
    例如，若要将 `httpd.service`{.literal} 的 CPU
    数量与所有其他服务数量相同，可将值设置为 `CPUWeight=200`{.literal}。
    请注意，`CPUWeight=`{.literal} 仅在操作系统过载时才应用。
[`CPUQuota=`{.literal}]{.term}
:   为服务分配[**绝对 CPU 时间配额**]{.strong}。此选项的值指定服务收到的
    CPU 时间相对于可用 CPU 总时间的最大百分比，如
    `CPUQuota=30%。`{.literal}
    请注意，`CPUQuota=`{.literal}
    代表资源分布模型的限制值，如[资源分布模型介绍](#assembly_configuring-resource-management-using-systemd_monitoring-and-managing-system-status-and-performance.html#con_understanding-resource-management-using-systemd_assembly_configuring-resource-management-using-systemd_monitoring-and-managing-system-status-and-performance "资源分配模型简介"){.link}所示。
    有关 `CPUQuota=`{.literal} 的更多信息，请参阅
    `systemd.resource-control(5)`{.literal} man page。
:::
::: itemizedlist
**其他资源**
-   [资源分配模型简介](#assembly_configuring-resource-management-using-systemd_monitoring-and-managing-system-status-and-performance.html#con_understanding-resource-management-using-systemd_assembly_configuring-resource-management-using-systemd_monitoring-and-managing-system-status-and-performance "资源分配模型简介"){.link}
-   [使用 systemd 分配 CPU
    资源](#assembly_configuring-resource-management-using-systemd_monitoring-and-managing-system-status-and-performance.html#proc_managing-cpu-with-systemd_assembly_configuring-resource-management-using-systemd_monitoring-and-managing-system-status-and-performance "使用 systemd 分配 CPU 资源"){.link}
:::
:::
::: section
::: titlepage
# []{#assembly_configuring-resource-management-using-systemd_monitoring-and-managing-system-status-and-performance.html#proc_managing-memory-with-systemd_assembly_configuring-resource-management-using-systemd_monitoring-and-managing-system-status-and-performance}使用 systemd 分配内存资源 {.title}
:::
本节论述了如何使用任何内存配置选项（`MemoryMin`{.literal}、`MemoryLow`{.literal}、`MemoryHigh`{.literal}、`MemoryMax`{.literal}、`MemorySwapMax`{.literal}）来使用
systemd 分配内存资源。
::: title
**步骤**
:::
使用 systemd 时设置内存分配配置选项：
::: orderedlist
1.  在您选择的服务中检查内存分配配置选项的分配值：
    ``` screen
    $ systemctl show --property  
    ```
2.  将内存分配配置选项所需的值设置为根：
    ``` screen
    # systemctl set-property  =
    ```
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
cgroup 属性在设置后立即应用。因此，不需要重新启动服务。
:::
::: itemizedlist
**验证步骤**
-   要验证您是否成功更改了服务的内存分配配置选项所需的值，请运行以下命令：
    ``` screen
    $ systemctl show --property  
    ```
:::
::: itemizedlist
**其他资源**
-   [systemd
    的内存分配配置选项](#assembly_configuring-resource-management-using-systemd_monitoring-and-managing-system-status-and-performance.html#ref_memory-allocation-configuration-options-with-systemd_assembly_configuring-resource-management-using-systemd_monitoring-and-managing-system-status-and-performance "systemd 的内存分配配置选项"){.link}
-   [资源分配模型简介](#assembly_configuring-resource-management-using-systemd_monitoring-and-managing-system-status-and-performance.html#con_understanding-resource-management-using-systemd_assembly_configuring-resource-management-using-systemd_monitoring-and-managing-system-status-and-performance "资源分配模型简介"){.link}
:::
:::
::: section
::: titlepage
# []{#assembly_configuring-resource-management-using-systemd_monitoring-and-managing-system-status-and-performance.html#ref_memory-allocation-configuration-options-with-systemd_assembly_configuring-resource-management-using-systemd_monitoring-and-managing-system-status-and-performance}systemd 的内存分配配置选项 {.title}
:::
在使用 systemd 配置系统内存分配时，您可以使用以下选项
::: variablelist
[`MemoryMin`{.literal}]{.term}
:   硬内存保护。如果内存用量低于限制，则不会回收 cgroup 内存。
[`MemoryLow`{.literal}]{.term}
:   软内存保护.如果内存用量低于限制，则只能在未受保护的 cgroup
    中回收内存时才能回收 cgroup 内存。
[`MemoryHigh`{.literal}]{.term}
:   内存节流限制。如果内存用量超过限制，则 cgroup
    中的进程会节流，并置于很重的回收压力下。
[`MemoryMax`{.literal}]{.term}
:   内存用量的绝对限制。您可以使用 kilo(K)、MB(M)、giga(G)、tera(T)
    后缀，如 `MemoryMax=1G`{.literal}。
[`MemorySwapMax`{.literal}]{.term}
:   交换内存使用的硬性限制。
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
当您用尽内存限值时，内存不足 (OOM)
终止程序将停止正在运行的服务。要防止这种情况，请降低
`OOMScoreAdjust=`{.literal} 值，以提高内存容错能力。
:::
::: itemizedlist
**其他资源**
-   [使用 systemd
    分配内存资源](#assembly_configuring-resource-management-using-systemd_monitoring-and-managing-system-status-and-performance.html#proc_managing-memory-with-systemd_assembly_configuring-resource-management-using-systemd_monitoring-and-managing-system-status-and-performance "使用 systemd 分配内存资源"){.link}
-   [资源分配模型简介](#assembly_configuring-resource-management-using-systemd_monitoring-and-managing-system-status-and-performance.html#con_understanding-resource-management-using-systemd_assembly_configuring-resource-management-using-systemd_monitoring-and-managing-system-status-and-performance "资源分配模型简介"){.link}
:::
:::
::: section
::: titlepage
# []{#assembly_configuring-resource-management-using-systemd_monitoring-and-managing-system-status-and-performance.html#proc_configuring-i-o-bandwidth-with-systemd_assembly_configuring-resource-management-using-systemd_monitoring-and-managing-system-status-and-performance}使用 systemd 配置 I/O 带宽 {.title}
:::
要提高 RHEL 9 中特定服务的性能，您可以使用 systemd 为该服务分配 I/O
带宽资源。
要做到这一点，您可以使用以下 I/O 配置选项：
::: itemizedlist
-   IOWeight
-   IODeviceWeight
-   IOReadBandwidthMax
-   IOWriteBandwidthMax
-   IOReadIOPSMax
-   IOWriteIOPSMax
:::
::: title
**步骤**
:::
使用 systemd 设置 [**I/O 带宽配置选项**]{.strong}：
::: orderedlist
1.  在您选择的服务中检查 I/O 带宽配置选项的分配值：
    ``` screen
    $ systemctl show --property  
    ```
2.  将 I/O 带宽配置选项所需的值设置为 root：
    ``` screen
    # systemctl set-property  =
    ```
:::
cgroup 属性在设置后立即应用。因此，不需要重新启动服务。
::: itemizedlist
**验证步骤**
-   要验证您是否成功更改了服务的 I/O
    带宽配置选项所需的值，请运行以下命令：
    ``` screen
    $ systemctl show --property  
    ```
:::
::: itemizedlist
**其他资源**
-   [systemd 的 I/O
    带宽配置选项](#assembly_configuring-resource-management-using-systemd_monitoring-and-managing-system-status-and-performance.html#ref_i-o-bandwidth-configuration-options-with-systemd_assembly_configuring-resource-management-using-systemd_monitoring-and-managing-system-status-and-performance "systemd 的 I/O 带宽配置选项"){.link}
-   [资源分配模型简介](#assembly_configuring-resource-management-using-systemd_monitoring-and-managing-system-status-and-performance.html#con_understanding-resource-management-using-systemd_assembly_configuring-resource-management-using-systemd_monitoring-and-managing-system-status-and-performance "资源分配模型简介"){.link}
:::
:::
::: section
::: titlepage
# []{#assembly_configuring-resource-management-using-systemd_monitoring-and-managing-system-status-and-performance.html#ref_i-o-bandwidth-configuration-options-with-systemd_assembly_configuring-resource-management-using-systemd_monitoring-and-managing-system-status-and-performance}systemd 的 I/O 带宽配置选项 {.title}
:::
要使用 systemd 管理块层 I/O 策略，可以使用以下配置选项：
::: variablelist
[`IOWeight`{.literal}]{.term}
:   设置默认 I/O 权重。权重值用作计算服务与其他服务相比实际 I/O
    带宽数量的基础。
[`IODeviceWeight`{.literal}]{.term}
:   设置特定块设备的 I/O 权重。
    例如，`IODeviceWeight=/dev/disk/by-id/dm-name-rhel-root 200`{.literal}。
[`IOReadBandwidthMax`{.literal}, `IOWriteBandwidthMax`{.literal}]{.term}
:   设置每个设备或挂载点的绝对带宽。
    例如：`IOWriteBandwith=/var/log 5M`{.literal}。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    systemd 会自动处理文件系统到设备转换。
    :::
[`IOReadIOPSMax`{.literal}、`IOWriteIOPSMax`{.literal}]{.term}
:   与上一选项类似的选项：设置每秒输入/输出操作 (IOPS) 中的绝对带宽。
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
只有在块设备使用 CFQ I/O
调度程序时，才支持基于权重的选项。如果设备使用了多队列块 I/O
排队机制，则不支持选项。
:::
::: itemizedlist
**其他资源**
-   [使用 systemd 配置 I/O
    带宽](#assembly_configuring-resource-management-using-systemd_monitoring-and-managing-system-status-and-performance.html#proc_configuring-i-o-bandwidth-with-systemd_assembly_configuring-resource-management-using-systemd_monitoring-and-managing-system-status-and-performance "使用 systemd 配置 I/O 带宽"){.link}
-   [资源分配模型简介](#assembly_configuring-resource-management-using-systemd_monitoring-and-managing-system-status-and-performance.html#con_understanding-resource-management-using-systemd_assembly_configuring-resource-management-using-systemd_monitoring-and-managing-system-status-and-performance "资源分配模型简介"){.link}
:::
:::
:::