A.5 集成产品 开发团 队(如 DevOps)
• B. 在开发环境中 执行安全控制
B. l 软件环境安全
B.3 安全编码中 的配置管理
B.4 代码仓库 的安全说明
B.5 API 安全
• C. 评估软件安全的有效性
C. l 审计和记录变更
C.2 风险分析和缓解
C.3 验收测试
• D. 评估软件获取的安全性影响
软件开发是由许多拥有不同技能和不同安全意识的开发者实施的一项复杂和具有挑战性的任
务。 这些开发人员创建和修改的应用程序通常会使用敏感数据， 还会和公众交互。 这给企业安全带
来了 巨大的风险， 并且信息安全专家必须理解这些风险， 对风险和业务需求做出平衡 ， 并且实施适
当 的风险缓解机制 。
20.1 系统开发控制概述
为了实现灵活的操作 目 标， 很多公司都使用定制开发的硬件和软件系统。 由于恶意的和/或粗心
CISSP 官方学 习指南(第 7 版)
的开发人员创建后门 、 缓冲区溢出漏洞或其他导致系统被恶意人员利用的弱点， 因此这些定制解决
方案可能存在 巨大的安全漏洞 。
为 了防范这些漏洞， 在整个系统开发的生命周期内引入安全性是至关重要的。 有组织、 有条理
的过程可以帮助确保解决方案满足功能需求以及安全性指导原则。 安全性关注应当是从事解决方案
开发的信息安全专家的重点考虑事项， 接下来将针对这些关注内 容对一系列系统开发行为进行讨论。
20. 1 .1 软件开发
在系统开发的每个阶段都应当考虑安全性， 这些阶段包括整个软件开发过程。 开发人员应该力
求在他们开发的所有应用程序中构建安全性， 并且为关键的应用程序和拥有敏感信息的应用程序提
供更高的安全级别。 因为在软件开发项 目 的初期， 给系统构建安全性比在现有系统中添加安全性容
易得多， 所 以在初期就考虑安全性是极为重要的 。
1 编程语言
你可能己经知道， 软件开发人员需要使用编程语言来开发软件代码。 你可能不知道同一个系统
能够同时使用好几种编程语言。 本章简要介绍不同类型的编程语言以及每种编程语言的安全影响。
计算机能够理解二进制代码。 计算机语言中只有 l 和 0， 而二进制代码正是这样的语言。 计算
机接受的指令由一长串二进制数字组成， 这些二进制数字使用的语言被称为机器语言。 每个 CPU 芯
片集都具有 自 己的机器语言 ， 事实上， 如果不借助专门 的软件， 那么人们连最简单的机器语言代码
都无法理解。 汇编语言是一种使用记忆符号来表示 CPU 基本指令的语言 ， 但是仍然要求人们了 解硬
件专用 的 、 相对模糊的汇编语言。 此外， 汇编语言还要求进行大量乏味的编程工作， 将两个数字相
加这样的简单任务就需要 5 行或 6 行汇编代码 才能完成。
590
编程人员 当然不希望使用机器语言或汇编语言来编写代码， 他们更喜欢使用高级编程语言， 例
如 C++、 Ruby、 Java 和 Visual Basic。 这些语言允许编程人员 以更接近人际交流的方式编写代码， 从
而缩短了编写应用程序的时间， 可能减少项 目 所需的编程人员数量， 并且还允许不同操作系统和硬
件平台之间 的某些可移植性。 一旦编程人员准备执行设计的应用程序， 那么他们就有两种可用 的选
项 : 编译型和解释型。
某些语言(例如 ， C、 Java 和 FORT也哑。是编译型语言。 使用编译语言时， 编程人员可以使用被
称为编译器的工具将高级语言转换为在特定操作系统中使用 的可执行文件。 可执行文件随后被分发
给终端用户 ， 终端用户 会在认为合适时使用这些文件。 一般而言， 在可执行文件中不可能查看或更
改软件指令。
其他语言(例如， JavaScript 和 VBScript)是解释型语言。 使用这些语言时， 编程人员会分发源代
码， 源代码中包含以高级语言编写的指令。 终端用户 随后在系统中使用解释器来执行这些源代码。
此时 ， 用户能够查看编程人员编写 的 原始指令。
每种方式都具有各自 的安全性优点和缺点。 编译代码通常不易被第三方操纵。 然而， 因为终端
用户无法查看原始指令， 所以恶意的(或不熟练的)编程人员也更容易在编译代码中嵌入后门和其他
安全缺陷井逃避检测 。 不过， 编程人员不易在解释型代码中插入恶意代码， 原因在于终端用户可以
查看代码和检查代码的准确性。 另一方面， 接触软件的任何人都能够更改编程人员 的原始指令， 并
且可能在解释型软件中嵌入恶意代码。 你将在第 2 1 章 " 恶意代码与应用攻击" 中 的 " 应用攻击" 一
节 中学到攻击者常常如何利用漏洞来破坏软件。
第 20 章 软件开发安全
编程语言的发展
在 CISSP 考试中 ， 还应当熟 悉编程语言的发展， 各代编程语言的定义如下:
. 第 1 代语言(l GL) 包括所有机器语言 。
· 第 2 代语言(2GL) 包括所有汇编语言。
. 第 3 代语言(3GL) 包括所有编译语言。
· 第 4 代语言(4GL)试图 接近 于 自 然语言 ， 包括数据库使用 的 SQL
· 第 5 代语言(5GL)九许编程人员 创 建使用 可视接 口 的代码 。
2. 面 向对象编程
许多现代编程语言仰的日 ， C++、 Java 和.NET 语言)都支持面向对象编程(OOP)的概念。 较早的
编程风格(例如， 函数式编程)关注程序流本身 ， 井且试图将希望的行为设计为一系列步骤。 面向对
象编程关注交互所涉及的对象。 可以将这些对象视为被请求执行特定操作或显示特定行为的一组对
象 。 对 象一起工作， 从而提供系统的功能或能力。 OOP 可能更为可靠， 并且能够减少程序变化错误
的传播。 作为一种编程方法， OOP 更适合建模或模拟现实生活。 例如 ， 某个银行业务程序可能具有
三个对象类， 这三个对象类分别对应于账户 、 账户所有人和员工。 在系统中添加一个新账户时， 就
会创建适当对象的一个新实例或副本， 这个实例或副本包含新账户 的详细信息 。
在 OOP 模型中 ， 每个对象都有对应其特定操作的方法。 例如， 账户对象可以有方法去增加资
金 、 扣除资金、 关 闭账户 和转移所有权。
对象也可以是其他对 象的子类， 并且继承父类的方法。 例如， 账户对象可能有相关特定账户类
型的子类， 比如储蓄 、 检查、 抵押和汽车贷款。 子类可以使用父类的所有方法， 井且有额外的特定
类方法。 比如 ， 检查对象可能有一个方法名 叫 write_ checkO ， 而其他子类则没有 。
从安全的角度来看， 面向对象编程提供了 一个抽象的黑盒方法。 用户需要知道对象的接口细节
(通常关于每个对象方法的输入、 输出和动作)， 但不一定需要知道对象内部如何有效地使用它们来
工作。 为了提供面向对象系统要求的特性， 对象会被封装(独立的)， 以及它们只能通过特定消息被
访问(换句话说就是输入)。 对象也可以表现出替换的属性， 允许不同对象提供兼容操作来彼此替换。
下面是一些可能会在工作 中遇到的常见的面向 对象编程术语:
消息 消 息是对象的通信或输入。
方法 方法是定义对象执行响应消息操作的内部代码 。
行为 由 对象呈现的结果或输出 是一种行为。 行为是通过方法处理消息的结果。
类 定义对象行为的一组对 象的公共方法的集合就是类 。
实例 对象是包含对象方法 的类的实例或例子。
继承 某个类(父类或超类)的方法被另 一个子类继承时就会出现继承性。
委托 委托是某个对象将请求转发给另一个对象或委托对象。 如果某个对 象没有处理特定消息
的方法， 那么就需要委托。
多态性 多态性是对象的特性， 当外部条件变化时允许以不同 的行为响应相同的消息或方法。
内聚 内 聚描述相 同类中方法 目 的之间关系 的强度 。
辑合 稍合是对象之间 的交互级别。 低糯合意味着较少 的交互。 因 为对象更为独立， 所以低糯
合提供了 更优的软件设计。 低精合更易于检测故障和更新。 内 聚程度较低的对象需要大量来自 其他
对象的帮助才能完成任务， 井且具有高棉合的特点 。
591
592
CISSP 官方学习指南(第 7 版)
3. 保证
为 了确保在新应用程序中构建的安全控制机制能够在系统的整个生命周期 内正确地实现安全策
略， 管理员会使用保证过程。 保证过程只是据此在系统生命周期 内构建信任的正规过程。 可信计算
机系统评估标准(TCSEC)桶皮书将这个过程称为生命周期保证。
4. 避免和缓解系统故障
无论开发团队多么高级， 系统在某些时候都可能出现故障。 实施软件和硬件控制时， 应该为这
种故障类型做好准备 ， 从而确保系统做出适当的响应。 我们可 以通过许多方法来避免故障， 包括使
用极限检查和创建故障防护或应急开放过程。 下面将详细讨论这些方法。
输入验证 当用户与软件交互时， 他们通常以输入的形式向应用程序提供信息。 这里可能包括
程序后续要用到的值的类型。 开发者经常希望这些值在一定的参数范 围 内 。 例如， 如果幸自芋员要用
户输入月 份， 幸自芋可能希望看到 112 之间的某个整数值。 如果用户输入的值在该范 围之外， 写得
差 的程序最好 的情况是崩溃 ， 最糟糕的情况是允许用 户 对底层操作系统进行控制 。
输入验证核实用户提供的值是否匹配程序员 的期望， 之后才允许进一步的处理。 例如， 输入验
证会检查月 份值是否是 112 之间 的一个整数。 如果值在这个范围之外 ， 手自芋将不会作为日 期处理
这个数字， 而是会通知用户希望输入的值。 这种类型的输入验证， 通过代码检测确保数字落在一个
可接受的范围 ， 被称为限制检测 。
输入验证也可以检测不寻常的字符， 如文本宇段中 的引号， 这可能是攻击的象征。 在某种情况
下 ， 输入验证程序可以改变收入， 移除风险特征序列， 以及用安全的值来替换。 这个过程被称为换
码输入。
输入验证应该经常存在于事务处理的服务器端。 任何发送给用户浏览器的代码容易受到用户 的
操作 ， 因 此这些代码很容 易被绕开。
提示 :
在大多 数组织内， 安全专 家具有系统管理背景， 但是并不具备软件开发的专业经验。 如果没有
此类经验， 那 么 一定不能放弃学 习 ， 并且要教育组织的开发人员 ， 使他们 了 解安全编码的重要性。
故障防护和应急、开放 即使编程人员 、 产品设计人员和项 目 管理人员 以最佳的状态全身心投入
工作， 被开发的应用程序也仍然会遭遇不可预测的或无法完全理解的情况和环境。 其中， 某些状况
会导致出 现故障。 因 为故障是不可预测的， 所以编程人员应当在代码中设计如何响应和处理故障的
常规方法。
当应对 系统故障做计划时有两个基本选择:
• 故障防护状态将系统置入高级别安全性(甚至可能完全禁用)， 直至管理员能够诊断 问题井将