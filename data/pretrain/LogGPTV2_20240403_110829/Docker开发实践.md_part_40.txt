&& gpg --verify tomcat.tar.gz.asc \
&& tar -xvf tomcat.tar.gz --strip-components=1 \
&& rm bin/*.bat \
&& rm tomcat.tar.gz*
EXPOSE 8080
CMD ["catalina.sh", "run"]
GitLib 镜像
A.4 语言镜像
语言镜像主要是说明各种编程语言的开发环境镜像。
附录A 常见镜像 255
A.4.1 Python
1
Python是一门交互式的、面向对象的解释型计算机编程语言。它支持模块化、异常处理、动
2
态类型以及类等特性。Python常常被称作胶水语言，因为它能够把其他语言制作的各种模块很轻
松地连接在一起，特别是C/C++实现的模块。由于Python语言简洁、易读和可扩展，Python已经
3
成为了一种流行语言。常见的情形就是使用Python开发应用原型，然后使用其他语言实现其中的
子模块。Python可以运行在Linux、iOS X以及Windows等系统上。目前，最流行的版本是2.7.X版
4
本，也出了3.X版本，前者成为Python 2，后者称为Python 3。Python 3改动较大，很多地方并不
兼容Python 2，这点需要特别注意。
5
下面的命令将使用Python 2来运行一个Python脚本:
$sudo docker run -it --rm --name my-running-script -v "$(pwd)":/usr/src/myapp -w /usr/src/myapp python:2 6
python your-daemon-or-script.py
对应的Python 3版本的代码为：
7
$sudo docker run -it --rm --name my-running-script -v "$(pwd)":/usr/src/myapp -w /usr/src/myapp python:3
python your-daemon-or-script.py 9
此外，也可以在镜像的基础上创建一个简单的Dockerfile来实现这一目标。下面以Python 2为
例进行介绍： 8
FROM python:2-onbuild
CMD [ "python", "./your-daemon-or-script.py" ] 10
然后执行：
10
docker build -t my-python-app .
docker run -it --rm --name my-running-app my-python-app
11
当然，也可以使用Dockerfile文件来构建Python镜像。这里以Python 2.7为例，下面是Dockerfile
的内容：
13
FROM buildpack-deps:wheezy
# remove several traces of debian python
14
RUN apt-get purge -y python.*
# http://bugs.python.org/issue19846
# > At the moment, setting "LANG=C" on a Linux system *fundamentally breaks Python 3*, and that's not
15
OK.
ENV LANG C.UTF-8
ENV PYTHON_VERSION 2.7.8
16
RUN set -x \
&& mkdir -p /usr/src/python \
&& curl -SL "https://www.python.org/ftp/python/$PYTHON_VERSION/Python-$PYTHON_VERSION.tar.xz" \
| tar -xJC /usr/src/python --strip-components=1 \ 17
&& cd /usr/src/python \
&& ./configure --enable-shared \
18
&& make -j$(nproc) \
256 附录A 常见镜像
&& make install \
&& ldconfig \
&& curl -SL 'https://bootstrap.pypa.io/get-pip.py' | python2 \
&& find /usr/local \
\( -type d -a -name test -o -name tests \) \
-o \( -type f -a -name '*.pyc' -o -name '*.pyo' \) \
-exec rm -rf '{}' + \
&& rm -rf /usr/src/python
# install "virtualenv", since the vast majority of users of this image will want it
RUN pip install virtualenv
CMD ["python2"]
A.4.2 Java
Java是一种跨平台的面向对象的程序设计语言，具有很好的通用性、高效性、移植性和安全
性，广泛应用于个人电脑、数据中心、游戏控制台、移动设备等平台，其开发社区极为活跃，拥
有广泛全面的程序库供开发者引用开发。
下面的Dockerfile可以将Java镜像作为编译和运行环境，不仅编译Main.java源文件为
Main.class，而且在容器启动时会在容器内部执行Main：
FROM java:7
COPY . /usr/src/myapp
WORKDIR /usr/src/myapp
RUN javac Main.java
CMD ["java", "Main"]
构建镜像并启动容器：
docker build -t my-java-app .
docker run -it --rm --name my-running-app my-java-app
如果仅仅想编译源代码，则可以直接通过命令行，具体为：
docker run --rm -v "$(pwd)":/usr/src/myapp -w /usr/src/myapp java:7 javac Main.java
下面给出通过Dockerfile构建Java镜像的Dockerfile（这里以openjdk-8为例）：
FROM buildpack-deps:sid-scm
# A few problems with compiling Java from source:
# 1. Oracle. Licensing prevents us from redistributing the official JDK.
# 2. Compiling OpenJDK also requires the JDK to be installed, and it gets
# really hairy.
RUN apt-get update && apt-get install -y unzip && rm -rf /var/lib/apt/lists/*
ENV JAVA_VERSION 8u40~b22
ENV JAVA_DEBIAN_VERSION 8u40~b22-2
# see https://bugs.debian.org/775775
# and https://github.com/docker-library/java/issues/19#issuecomment-70546872
ENV CA_CERTIFICATES_JAVA_VERSION 20140324
RUN apt-get update && apt-get install -y openjdk-8-jdk="$JAVA_DEBIAN_VERSION"
ca-certificates-java="$CA_CERTIFICATES_JAVA_VERSION" && rm -rf /var/lib/apt/lists/*
附录A 常见镜像 257
# see CA_CERTIFICATES_JAVA_VERSION notes above
1
RUN /var/lib/dpkg/info/ca-certificates-java.postinst configure
# If you're reading this and have any feedback on how this image could be
# improved, please open an issue or a pull request so we can discuss it!
2
openjdk-8-jre的Dockerfile内容为：
3
FROM buildpack-deps:sid-curl
# A few problems with compiling Java from source:
# 1. Oracle. Licensing prevents us from redistributing the official JDK.
4
# 2. Compiling OpenJDK also requires the JDK to be installed, and it gets
# really hairy.
RUN apt-get update && apt-get install -y unzip && rm -rf /var/lib/apt/lists/*
5
ENV JAVA_VERSION 8u40~b22
ENV JAVA_DEBIAN_VERSION 8u40~b22-2
# see https://bugs.debian.org/775775
6
# and https://github.com/docker-library/java/issues/19#issuecomment-70546872
ENV CA_CERTIFICATES_JAVA_VERSION 20140324
RUN apt-get update && apt-get install -y openjdk-8-jre-headless="$JAVA_DEBIAN_VERSION"
7
ca-certificates-java="$CA_CERTIFICATES_JAVA_VERSION" && rm -rf /var/lib/apt/lists/*
# see CA_CERTIFICATES_JAVA_VERSION notes above
RUN /var/lib/dpkg/info/ca-certificates-java.postinst configure
9
# If you're reading this and have any feedback on how this image could be
# improved, please open an issue or a pull request so we can discuss it!
8
A.4.3 Perl
10
Perl是一种解释型的动态编程语言，属于高级语言。它最初由Larry Wall设计，借鉴了C、sed、
awk、shell 脚本等语言，并在内部集成了正则表达式，以及巨大的第三方代码库CPAN。Perl一开
10
始是作为Unix系统的管理小工具，后来演变为一门编程语言，用作Web编程、数据库处理等方面，
所以它特别适合系统管理和Web编程。
11
通过下面命令即可使用Perl容器执行一个Perl脚本：
$sudo docker run -it --rm --name my-running-script -v "$(pwd)":/usr/src/myapp -w /usr/src/myapp 13
perl:5.20 perl your-daemon-or-script.pl
也可以使用Dockerfile来配置需要执行的Perl项目，其中Dockerfile的内容为： 14
FROM perl:5.20
COPY . /usr/src/myapp 15
WORKDIR /usr/src/myapp
CMD [ "perl", "./your-daemon-or-script.pl" ]
16
使用docker build命令构建镜像并启动容器：
docker build -t my-perl-app .
17
docker run -it --rm --name my-running-app my-perl-app
下面使用Dockerfile构建Perl镜像，其中Dockerfile的内容为：
18
258 附录A 常见镜像
FROM buildpack-deps
MAINTAINER Peter Martini 
RUN apt-get update \
&& apt-get install -y curl procps \
&& rm -fr /var/lib/apt/lists/*
RUN mkdir /usr/src/perl
WORKDIR /usr/src/perl
COPY sha1.txt /tmp/sha1.txt
RUN curl -SL https://cpan.metacpan.org/authors/id/R/RJ/RJBS/perl-5.18.4.tar.bz2 -o
perl-5.18.4.tar.bz2 \
&& sha1sum -c /tmp/sha1.txt \
&& tar --strip-components=1 -xjf perl-5.18.4.tar.bz2 -C /usr/src/perl \
&& rm perl-5.18.4.tar.bz2 /tmp/sha1.txt \
&& ./Configure -Duse64bitall -A ccflags=-fwrapv -des \
&& make -j$(nproc) \
&& TEST_JOBS=$(nproc) make test_harness \
&& make install \
&& cd /usr/src \
&& curl -LO https://raw.githubusercontent.com/miyagawa/cpanminus/master/cpanm \
&& chmod +x cpanm \
&& ./cpanm App::cpanminus \
&& rm -fr ./cpanm /root/.cpanm /usr/src/perl
WORKDIR /root
CMD ["perl5.18.4","-de0"]
A.4.4 Ruby
Ruby是一门简单快捷的面向对象的服务器脚本语言，具有语法简单、扩展性强等特点，常
用于编写CGI脚本、嵌入HTML中等。它可运行于多种平台，如Windows、Mac OS和UNIX的各
种版本。
如果是运行单个文件的脚本，可以通过命令行的方式解释运行，具体操作为：
docker run -it --rm --name my-running-script -v "$(pwd)":/usr/src/myapp -w /usr/src/myapp ruby:2.1 ruby
your-daemon-or-script.rb
如果工程更为复杂，可以通过构建工程的Dockerfile，构建出和工程对应的镜像、容器。
Dockerfile的内容为：
FROM ruby:2.1-onbuild
CMD ["./your-daemon-or-script.rb"]
然后将该Dockerfile文件复制到项目的根目录下，紧邻Gemfile文件。构建镜像时，将会执行
COPY . /usr/src/app和RUN bundle install操作，前者将整个项目复制进镜像内，后者则是执行
安装。
运行下面的命令构建镜像并启动容器：
docker build -t my-ruby-app .
docker run -it --name my-running-script my-ruby-app
附录A 常见镜像 259
下面是构建Ruby镜像的Dockerfile：
1
FROM buildpack-deps:wheezy
ENV RUBY_MAJOR 2.2
2
ENV RUBY_VERSION 2.2.0
# some of ruby's build scripts are written in ruby
# we purge this later to make sure our final image uses what we just built
3
RUN apt-get update \
&& apt-get install -y bison libgdbm-dev ruby \
&& rm -rf /var/lib/apt/lists/* \
4
&& mkdir -p /usr/src/ruby \
&& curl -SL "http://cache.ruby-lang.org/pub/ruby/$RUBY_MAJOR/ruby-$RUBY_VERSION.tar.bz2" \
| tar -xjC /usr/src/ruby --strip-components=1 \
5
&& cd /usr/src/ruby \
&& autoconf \
&& ./configure --disable-install-doc \
6
&& make -j"$(nproc)" \
&& make install \
&& apt-get purge -y --auto-remove bison libgdbm-dev ruby \
7
&& rm -r /usr/src/ruby
# skip installing gem documentation
RUN echo 'gem: --no-rdoc --no-ri' >> "$HOME/.gemrc"
9
# install things globally, for great justice
ENV GEM_HOME /usr/local/bundle
ENV PATH $GEM_HOME/bin:$PATH
8
RUN gem install bundler \
&& bundle config --global path "$GEM_HOME" \
&& bundle config --global bin "$GEM_HOME/bin"
10
# don't create ".bundle" in all our apps
ENV BUNDLE_APP_CONFIG $GEM_HOME
CMD [ "irb" ]
10
A.4.5 Node.js
11
Node.js是一个基于JavaScript运行时建立的网络平台，用于快速搭建易扩展的网络服务应用。
Node.js采用非阻塞I/O和异步事件驱动模型，以达到最大化吞吐量和高效率，非常适合实时性要 13
求高的场景。Node.js内部采用Google V8 JavaScript引擎执行代码，其大部分模块也是采用
JavaScript编写。Node.js内部包含socket和HTTP的异步通信库，使得Node.js可以直接充当Web服 14
务器，而不再需要额外的服务器。
如果是单文件的项目，则可以直接采用命令行的方式使用Node.js容器运行该项目，具体操作为： 15
docker run -it --rm --name my-running-script -v "$(pwd)":/usr/src/myapp -w /usr/src/myapp node:0.10
node your-daemon-or-script.js 16
也可以在Node.js项目的根目录下创建一个Dockerfile，其内容为：
17