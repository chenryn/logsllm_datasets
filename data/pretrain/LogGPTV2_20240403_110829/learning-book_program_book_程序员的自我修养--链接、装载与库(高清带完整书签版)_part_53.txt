统文件夹中。当应用程序需要装置DLL时候，首先从白已的文件夹下寻找所需要的DLL，
然后再到系统文件中寻找。
·.NET下DLLHell的解决方案
在.NET框架中，一个程序集（Assembly）有两种类型：应用程序程序（也就是exe可
执行文件）集以及库程序（也就是DLL动态链接库）集。一个程序集包括一个或多个文件，
所以需要一个清单文件来描述程序集。这个清单文件叫做 Maniftest文件。Manifest 文件描
述了程序集的名字，版本号以及程序集的各种资源，同时也描述了该程序集的运行所依赖的
资源，包括DLL以及其他资源文件等。Manifest是一个XML的描述文件。每个DLL有自
已的manifest文件，每个应用程序也有自己的Manifest，对于应用程序而言，manifest文件
可以和可执行文件在间一目录下，也可以是作为一个资源嵌入到可执行文件的内部(Embed
Manifest)。
XP以前的 windows版本，在执行可执行文件是不会考虑manifest文件的。它会直接到
system32的目录下查找该可执行文件所依赖的DLL。在这种情况下，Manifest只是个多余的
文件。而XP以后的操作系统，在执行可执行文件时则会首先读取程序集的manifest文件，
获得该可执行文件需要调用的DLL列表，操作系统再根据DLL的manifest文件去寻找对应
的 DLL并调用。一个典型的 manifest文件的例子如下：
uiAccess=*false*>
在这个例子中，这一部分指明了其依赖于一个名字叫做Microsoft.VC90.
CRT的库，但是我们发现，属性里面还有其他的信息，分别是type 系统
程序员的自我修养一链接、装载与库
---
## Page 301
278
第9章Windows下的动态链接
类型，version 版本号，processorArchitecture 平台环境，publicKeyToken 公匙。所有这些加
在一起就成了“强文件名”。有了这种“强文件名”，我们就可以根据其区分不同的版本、不同
的平台，有了这种强文件名，系统中可以有多个不同版本的相同的库共存面不会发生冲突。
从Windows XP开始，可供应用程序并发使用的并行配件组越米越多。加载程序通过清
单和配件的版本号为应用程序确定准确的绑定版本，下图是并行程序集，它的manifes文件
及应用程序之间一起协同工作的实例如图9-5所示。
Application
DLL Loader
Manifest
SxS Manager
MSVCR90D.dIl
MSVCR90D.dl
V9.0.21022.8
V9.0.68812.7
图 9-5Manifest 与 DLL 装载
图9-5 中的 SxS Manager 就是 Side-by-side Manager,它利用程序集 manifest 文件的描述，
实现对相应版本的DLL的加载，在这个例子中，我们假设系统中存在两个版本的
MSVCR90D.DLL：版本9.0.21022.8和版本9.0.68812.7，都是在并行程序集cache 中。当
应用程序需要装载DLL时候，并行管理器根据该应用程序的manifest文件中关于所需要的
MSVCR90D的版本信息来装载相应的 DLL。Windows XP以后的操作系统在WINDOWS目
录下面有个叫做WinSxS（Windows Side-By-Side）目录，这个目录下我们]可以看到上面例子
中的MSVCR90D.DLL位于这个位置：
\WIND0ws\WinSxS\x86_Microgoft ,VC90.DebugCRT_1fc8b3b9ale18e3b_9 .0 .21022 . 8_
x-Ww_597c3456\MSVCR90D. d11
除此之外，我们还能够在WinSxS目录下看到其他的不同版本的C/C++/MFC/ALT运行
库：
amd64_Microsoft,vC90.MFC_1fc8b3b9a1e18e3b_9.0.21022.8_x-ww_d37d5c5a
amd64_Micro8oft .VC90,MFCt0C_1Ec8b3b9a1e18e3b_9.0.21022 ,8_x-Ww_43fdd01a
ia64_Microsoft,VC90.MFC_1fc8b3b9ale18e3b_9.0.21022.8_x-ww_d0ce5d1a
ia64_Microsoft ,VC90.MFCLOC_1fc8b3b9a1e18e3b_9 .0.21022.8_x-ww_414ed0da
x86_Micr08oft,VC80.ATL_1fc8b3b9ale18e3b_8.0.50727.42_x-ww_6e805841
x86_Microsoft.VC80,CRT_1fc8b3b9a1e18e3b_8.0.50727,1433_x-ww_5cf844d2
x86_Microsoft .VC80.CRT_1fc8b3b9a1e18e3b_8.0.50727.163_Xww_681e29fb
程序员的自我修养一链接、装载与库
---
## Page 302
9.6本章小结
279
x86_Microsoft .VC80.CRT_1fc8b3b9a1e18e3b_8.0.50727.42_x-ww_0de06acd
x86_Microsoft .VC80.MFCLOC_1fc8b3b9a1e18e3b_8.0.50727,42_x-Ww_3415f6d0
x86_Microsoft.VC90.ATL_1fc8b3b9ale18e3b_9.0.21022.8_x-ww_312cf0e9
x86_Micro8oft.Vc80.MFC_1fc8b3b9a1e18e3b_8.0.50727.42_x-Ww_dec6ddd2
x86_Microsoft .VC90.CRT_1fc8b3b9a1e18e3b_9 .0.21022.8_x-Ww_d08d0375
x86_Micr08oft.VC90.CRT_1fc8b3b9a1e18e3b_9.0.30729.1_x-ww_6f74963e
x86_Micro8oft VC90,DebugCRT_1fc8b3b9ale18e3b_9.0.21022.8_x-ww_597c3456
x86_Microsoft VC90.DebugMFC_1fc8b3b9ale18e3b_9.0.21022.8_x-ww_2a62a75b
x86_Microsoft .VC90.DebugOpenMP_1fc8b3b9a1e18e3b_9 .0.21022 .8_x-Ww_72b673b0
x86_Microsoft.VC90.MFCL0C_1fc8b3b9a1e18e3b_9.0.21022.8_x-ww_11f3ea3a
x86_Micro8oft ,VC90.,MPCL0C_1fc8b3b9a1e18e3b_9.0.30729.1_x-ww_b0db7d03
x86_Microsoft .VC90.MFC_1fc8b3b9ale18e3b_9.0.30729.1_x-Ww_405b0943
x86_Micr0soft.VC90.MFC_1fc8b3b9a1e18e3b_9.0.21022.8_x-ww_a173767a
了机器类型、名字、公钥和版本号，这样如果多个不同版本的MSVCR90D.DLL都可以共存
在系统中面不会相互冲突。当然有了Manifest这种机制之后，动态链接的C/C++程序在运行
时必须在系统中有与它在Manifest里面所指定的完全相同的DLL，否则系统就会提示运行
出错，这也是为什么很多时候使用Visual C++2005或2008编译的程序无法在其他机器上运
行的原因，因为它们需要与编译环境完全相同的运行库的支持，所以这些程序发布的时候往
往都要带上相应的运行库，比如 Vistual C++2008的运行库就位于“ProgramFilesiMicrosof
VisualStudio9.0VCredisrlx86\”，比如C语言运行库就位于该目录下的“Microsoft.
VC90.CRT”：MFC运行库位于"Microsoft.VC90.MFC"。我们在后面还会详细介绍运行库相
关的内容。
9.6
本章小结
动态链接机制对于Windows操作系统来说极其重要，整个Windows系统本身即基于动
态链接机制，Windows的API也以DLL的形式提供给程序开发者，而不像Linux等系统是
以系统调用作为操作系统的最终入口。DLL比Linux下的ELF共享库更加复杂，提供的功
能也更为完善。
我们在这一章中介绍了DLL在进程地址空间中的分布、基地址和RVA、共享数据段、
如何创建和使用DLL、如何使用模块文件控制DLL的产生。接着我们还详细分析了DLL
的符号导入导出机制以及DLL的重定基地址、序号和导入函数绑定、DLL与C++等问题。
最后我们探讨了DLLHELL问题。并且介绍了解决DLLHELL问题的方法、manifest
及相关问题。
程序员的自我修养一链接、装载与库
---
## Page 304
第4部分
程序员的自我修养
库与运行库
---
## Page 305
·malloc是如何分配出内存的？
·局部变量存放在哪里？
·为什么一个编译好的简单的HelloWorld程序也需要占据好几KB的空间？
·为什么程序一启动就有堆、1/O或异常系统可用？
在这一部分里，我们将详细剖析在程序运行时，隐藏于背后的各种秘密：为什么程序能
够执行，它是如何执行的，这些问题将在本部分一一得到解答。首先让我们对程序的运
行环境有一个总览，下图描述了一个典型的程序环境。
程序
由此可以看到，程序的环境由以下
三个部分组成：
运行库
内存运行库系统调用
此外，内核也可算作运行环境的一
部分，但实际上系统调用部分充当
系统调用或API
了程序与内核交互的中介，因此在
内核
这里不把内核算作运行环境。在接
下来的几章里，我们会对这几部分
进行介绍。
程序环境
---
## Page 306
内存
10.1程序的内存布局
10.2栈与调用惯例
10.3堆与内存管理
10.4本章小结
程序员的自我修养—链接、装载与库
---
## Page 307
284
第10章内存
要研究程序的运行环境，首先要弄明白程序与内存的关系。程序与内存的关系，好比鱼
和水一般密不可分。内存是承载程序运行的介质，也是程序进行各种运算和表达的场所。了
解程序如何使用内存，对程序本身的理解，以及后续章节的探讨非常有利。
10.1程序的内存布局
在前面的章节中，我们已经了解到可执行文件是如何映射到计算机内存里的，本节将再
深化一下对这方面的理解，顺使结合上一章中关于动态链接的内容，看看加上动态链接之后
进程的地址空间是如何分布的。
现代的应用程序都运行在一个内存空间里，在32位的系统里，这个内存空间拥有4GB
（2的32次方）的寻址能力。相对于16位时代i386的段地址加段内偏移的寻址模式，如今
的应用程序可以直接使用32位的地址进行寻址，这被称为平坦（far)的内存模型。在平坦的
内存模型中，整个内存是一个统一的地址空间，用户可以使用一个32位的指针访问任意内
存位置。例如：
int *p = (int *) 0x12345678;
++*p:
这段代码展示了如何直接读写指定地址的内存数据。不过，尽管当今的内存空间号称是
平坦的，但实际上内存仍然在不同的地址区间上有着不同的地位，例如，大多数操作系统都
会将4GB的内存空间中的一部分挪给内核使用，应用程序无法直接访间这一段内存，这一
部分内存地址被称为内核空间。Windows在默认情况下会将高地址的2GB空间分配给内核
（世可配置为1GB），而Linux款认情况下将高地址的1GB空间分配给内核，这些在前文中
都已经介绍过了，
用户使用的剩下2GB或3GB的内存空间称为用户空间。在用户空间里，也有许多地址
区间有特殊的地位，一般来讲，应用程序使用的内存空间里有如下“默认”的区域。
·栈：栈用于维护函数调用的上下文，离开了栈函数调用就没法实现。在10.2节中将对
栈作详细的介绍，栈通常在用户空间的最高地址处分配，通常有数兆字节的大小。
·堆：堆是用来容纳应用程序动态分配的内存区域，当程序使用malloc或new分配内存
时，得到的内存来自堆里。堆会在10.3节详细介绍。堆通常存在于栈的下方（低地址
方向），在某些时候，堆也可能没有固定统一的存储区域。堆一般比栈大很多，可以有
几十至数百兆字节的容量。
·可执行文件映像：这里存储着可执行文件在内存里的映像，在第6章已经提到过，由
装载器在装我时将可执行文件的内存读取或映射到这里。在此不再详细说明。
程序员的自我修养一链接、装载与库
---
## Page 308
10.1程序的内存布局
285
保留区：保留区并不是一个单一的内存区域，而是对内存中受到保护面禁止访问的内
存区域的总称，例如，大多数操作系统里，极小的地址通常都是不允许访问的，如NULL。
通常C语言将无效指针赋值为0也是出于这个考虑，因为0地址上正常情况下不可能
有有效的可访问数据。
图10-1是Linux下一个进程里典型的内存布局。
Oxrm
kemel spece
Oxc0000000
stack
pesnun
dynarmic libraries
0x40000000
unused
个
heap
read/write sections(.data. .bss)
readonly
sections(.init, .rodata, .text)
0x08048000
reserved
0
图10-1Linux进程地址空间布局（内核版本2.4.x）
在图10-1中，有一个没有介绍的区域：“动态链接库映射区”，这个区域用于映射装载
的动态链接库。在Linux下，如果可执行文件依赖其他共享库，那么系统就会为它在从
0x40000000开始的地址分配相应的空间，并将共享库载入到该空间。
图中的箭头标明了几个大小可变的区的尺寸增长方向，在这里可以清晰地看出栈向低地
址增长，堆向高地址增长。当栈或堆现有的大小不够用时，它将按照图中的增长方向扩大自
身的尺寸，直到预留的空间被用完为止。
在接下来的两节中，会详细介绍上述几个区域中的栈和堆，让读者对应用程序执行时内
程序员的自我修养一链接、装载与库
---
## Page 309
286
第10章内存
存的状况有一个更加深入的理解。
QA
Q：我写的程序常需出现“疫错误（segment fault)”或者“非法操作，该内存地址不能
read/write”的错误信息，这是怎么回事？
A：这是典型的非法指针解引用造成的错误。当指针指向一个不允许读或写的内存地址，
而程序却试图利用指针来读或写该地址的时候，就会出现这个错误。在Linux或
Windows的内存布励中，有些地址是给终不能读写的，例如0地址。逐有些地址是一
开始不允许读写，应用程序必须事先请求获取这些地址的读写权，或者某些地址一开
始并没有映射到实际的物理内存，应用程序必须事先请求将这些地址映射到实际的物
理地址（commit），之后才能够自由地读写这片内存。当一个指针指向这些区城的时候，
对它指向的内存进行读写就会引发错误。造成这样的最普遍原因有两种：
1.程序员将指针初始化为NULL，之后即没有给它一个合理的值就开始使用指针。
2.程序员没有初始化栈上的指针，指针的值一般会是随机数，之后就直接开始使用