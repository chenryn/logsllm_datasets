第 68 章  Windows NT 
695 
指令清单 68.13  MSVC 2012  
$SG86277 DB  
'in filter. code=0x%08X', 0aH, 00H 
$SG86279 DB  
'yes, that is our exception', 0aH, 00H 
$SG86281 DB  
'not our exception', 0aH, 00H 
$SG86288 DB  
'hello!', 0aH, 00H 
$SG86290 DB  
'0x112233 raised. now let''s crash', 0aH, 00H 
$SG86292 DB  
'access violation, can''t recover', 0aH, 00H 
$SG86294 DB  
'user exception caught', 0aH, 00H 
pdata   SEGMENT 
$pdata$filter_user_exceptions DD imagerel $LN6 
        DD   
imagerel $LN6+73 
        DD   
imagerel $unwind$filter_user_exceptions 
$pdata$main DD   imagerel $LN14 
        DD   
imagerel $LN14+95 
        DD   
imagerel $unwind$main 
pdata    ENDS 
pdata    SEGMENT 
$pdata$main$filt$0 DD imagerel main$filt$0 
        DD   
imagerel main$filt$0+32 
        DD   
imagerel $unwind$main$filt$0 
$pdata$main$filt$1 DD imagerel main$filt$1 
        DD   
imagerel main$filt$1+30 
        DD   
imagerel $unwind$main$filt$1 
pdata    ENDS 
xdata SEGMENT 
$unwind$filter_user_exceptions DD 020601H 
        DD   
030023206H 
$unwind$main DD 020609H 
        DD   
030023206H 
        DD   
imagerel __C_specific_handler 
        DD   
02H 
        DD   
imagerel $LN14+8 
        DD   
imagerel $LN14+59 
        DD   
imagerel main$filt$0 
        DD   
imagerel $LN14+59 
        DD   
imagerel $LN14+8 
        DD   
imagerel $LN14+74 
        DD   
imagerel main$filt$1 
        DD   
imagerel $LN14+74 
$unwind$main$filt$0 DD 020601H 
        DD   
050023206H 
$unwind$main$filt$1 DD 020601H 
        DD   
050023206H 
Xdata    ENDS 
_TEXT    SEGMENT 
main     PROC 
$LN14: 
        push  
rbx 
        sub  
rsp, 32 
        xor  
ebx, ebx 
        lea  
rcx, OFFSET FLAT:$SG86288 ; 'hello!' 
        call  
printf 
        xor  
r9d, r9d 
        xor  
r8d, r8d 
        xor  
edx, edx 
        mov  
ecx, 1122867 ; 00112233H 
        call  
QWORD PTR __imp_RaiseException 
        lea  
rcx, OFFSET FLAT:$SG86290 ; '0x112233 raised. now let''s crash' 
        call  
printf 
        mov  
DWORD PTR [rbx], 13 
        jmp  
SHORT $LN13@main 
$LN11@main: 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
696 
逆向工程权威指南（下册） 
        lea  
rcx, OFFSET FLAT:$SG86292 ; 'access violation, can''t recover' 
        call  
printf 
        npad  
1 ; align next label 
$LN13@main: 
        jmp  
SHORT $LN9@main 
$LN7@main: 
        lea  
rcx, OFFSET FLAT:$SG86294 ; 'user exception caught' 
        call  
printf 
        npad  
1 ; align next label 
$LN9@main: 
        xor  
eax, eax 
        add  
rsp, 32 
        pop  
rbx 
        ret  
0 
main     ENDP 
text$x SEGMENT 
main$filt$0 PROC 
        push  
rbp 
        sub  
rsp, 32 
        mov  
rbp, rdx 
$LN10@main$filt$: 
        mov  
rax, QWORD PTR [rcx] 
        xor  
ecx, ecx 
        cmp  
DWORD PTR [rax], -1073741819; c0000005H 
        sete  
cl 
        mov  
eax, ecx 
$LN12@main$filt$: 
        add  
rsp, 32 
        pop  
rbp 
        ret  
0 
        int  
3 
main$filt$0 ENDP 
main$filt$1 PROC 
        push  
rbp 
        sub  
rsp, 32 
        mov  
rbp, rdx 
$LN6@main$filt$: 
        mov  
rax, QWORD PTR [rcx] 
        mov  
rdx, rcx 
        mov  
ecx, DWORD PTR [rax] 
        call  
filter_user_exceptions 
        npad  
1 ; align next label 
$LN8@main$filt$: 
        add  
rsp, 32 
        pop  
rbp 
        ret  
0 
        int  
3 
main$filt$1 ENDP 
text$x ENDS 
_TEXT SEGMENT 
code$ = 48 
ep$ = 56 
filter_user_exceptions PROC 
$LN6: 
        push  
rbx 
        sub  
rsp, 32 
        mov  
ebx, ecx 
        mov  
edx, ecx 
        lea  
rcx, OFFSET FLAT:$SG86277 ; 'in filter. code=0x%08X' 
        call  
printf 
        cmp  
ebx, 1122867; 00112233H 
        jne  
SHORT $LN2@filter_use 
        lea  
rcx, OFFSET FLAT:$SG86279 ; 'yes, that is our exception' 
        call  
printf 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 68 章  Windows NT 
697 
        mov  
eax, 1 
        add  
rsp, 32 
        pop  
rbx 
        ret  
0 
$LN2@filter_use: 
        lea  
rcx, OFFSET FLAT:$SG86281 ; 'not our exception' 
        call  
printf 
        xor  
eax, eax 
        add  
rsp, 32 
        pop  
rbx 
        ret  
0 
filter_user_exceptions ENDP 
_TEXT ENDS 
要想查看更多信息，可以参考 Igor Skochinsky 撰写的文章“Compiler Internals:Exceptional and RTTL（编
译器内幕:例外与 RTTL）”。 
除了例外信息外，.pdata 段还存储着几乎所有函数的起始和结束的地址。由此可见，.pdata 段是自动分
析的工具的重点分析对象。 
68.3.4  关于 SEH 的更多信息 
Igor Skochinsky 编写的文章“Compiler Internals:Exceptional and RTTL（编译器内幕：例外与 RTTL）”。 
Matt Pietrek 编写的文章“A Crash Course on the Depths of Win32 Structured Exception Handling（Win32
结构性例外进程的崩溃的深度分析）”。 
68.4  Windows NT：临界区段 
在任何一个多线程的环境下，临界区段(Critical section)是保护数据一致性和操作互斥性的重要手段。
临界区段保证了在同一时间内只会有一个线程访问某些数据，阻止其他进程和中断同期操作相关数据。 
在 Windows NT 系统的数据结构中，CRITICAL_SECTION 关键段的定义如下。 
指令清单 68.14  (Windows Research Kernel v1.2) public/sdk/inc/nturtl.h 
typedef struct _RTL_CRITICAL_SECTION { 
    PRTL_CRITICAL_SECTION_DEBUG DebugInfo; 
    // 
    // The following three fields control entering and exiting the critical 
    // section for the resource 
    // 
    LONG LockCount; 
    LONG RecursionCount; 
    HANDLE OwningThread;   
// from the thread's ClientId->UniqueThread 
    HANDLE LockSemaphore; 
    ULONG_PTR SpinCount;   
// force size on 64-bit systems when packed 
} RTL_CRITICAL_SECTION, *PRTL_CRITICAL_SECTION; 
下面的代码描述了函数 EnterCriticalSection()的工作原理。 
指令清单 68.15  Windows 2008/ntdll.dll/x86（开始） 
_RtlEnterCriticalSection@4 
var_C   
= dword ptr -0Ch 
var_8   
= dword ptr -8 
var_4   
= dword ptr -4 
arg_0   
= dword ptr 8 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
698 
逆向工程权威指南（下册） 
                mov     edi, edi 
                push     ebp 
                mov     ebp, esp 
                sub     esp, 0Ch 
                push     esi 
                push     edi 
                mov     edi, [ebp+arg_0] 
                lea     esi, [edi+4] ; LockCount 
                mov     eax, esi 
                lock btr dword ptr [eax], 0 
                jnb     wait ; jump if CF=0 
loc_7DE922DD: 
                mov     eax, large fs:18h 
                mov     ecx, [eax+24h] 
                mov     [edi+0Ch], ecx 
                mov     dword ptr [edi+8], 1 
                pop     edi 
                xor     eax, eax 
                pop     esi 
                mov     esp, ebp 
                pop     ebp 
                retn     4 
... skipped 
在代码段中最重要的指令是 BTR（及其 LOCK 前缀）：BTR 指令把第一个操作数的第 0 位复制给 CF 标识
位，然后再把这个位清零。由 LOCK 前缀修饰的都是原子性操作，可以让 CPU 阻止其他的系统总线读取或修
改相关内存地址。如果 LockCount 的第 0 位值是 1，则将其充值重置并退出函数——CPU 现在正处于临界区；
否则，则表示其他线程正在占用临界区，CPU 将等待相关操作结束。 
等待期间运行的函数是 WaitForSingleObject()。 
下述代码描述了 LeaveCriticalSection()函数的工作机理： 
指令清单 68.16  Windows 2008/ntdll.dll/x86（开始） 
_RtlLeaveCriticalSection@4 proc near 
arg_0   
= dword ptr 8 