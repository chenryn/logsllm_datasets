formats makes it possible to use a series of code paths (PGP parsing, Kerberos 
parsing, PKCS parsing, and so on) that need to be flawless; otherwise, the ISAKMP 
application can be exploited by remote unauthenticated clients. 
Certificate Request Payload 
The certificate request payload is used by either participant in a connection to 
request a certificate of its peer. It has an identical structure to the certificate payload, 
except it has certificate authority data instead of certificate data. Certificate authority 
data can be encoded in the same ways certificate data can. 
Hash Payload 
The hash payload contains a hash of some part of the ISAKMP message and is used 
for authentication or message integrity purposes (to prevent third parties from 
changing data en route). The hash payload header is shown in Figure 16-9. 
Figure 16-9. ISAKMP hash payload header 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
973 
The size of the hash data message depends primarily on the hashing algorithm used 
in the ISAKMP session, which is established earlier in the negotiation by using the SA 
payload data. As you can see, there are no extraneous length fields in the hash 
payload or decoding steps, so there are no real complications in parsing a hash 
payload. One thing to look out for, however, might be generic buffer overflows 
resulting from the program failing to verify the hash payload's size. This failure could 
happen when hashes are expected to be a particular size and memory for holding the 
hash data has been preallocated. Therefore, if an abnormally large hash payload is 
supplied, a generic buffer overflow would occur. 
Hash data is used to verify message integrity by using message data as input to a 
hashing function, which calculates a value and stores it in the hash payload. When the 
receiving party applies the same algorithm to the data, any modifications result in 
inconsistencies with the hash payload data. 
Signature Payload 
The signature payload is much like the hash payload, except it contains data 
created by the selected digital signature algorithm (if signatures are in use) rather 
than data the hash function created. The signature payload is shown in Figure 16-10. 
Figure 16-10. ISAKMP signature payload header 
Like the hash payload, signature payloads have no additional complications, except 
they might be expected to be a specific size. If so, abnormally large messages might 
not be handled correctly. 
Nonce Payload 
The nonce payload contains random data used for generating hashes with certain 
protocols. It's used to help guarantee uniqueness of a key exchange and prevent 
against man-in-the-middle attacks. The nonce payload is shown in Figure 16-11. 
Figure 16-11. ISAKMP nonce payload header 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
974 
Again, the nonce payload has no additional complications other than general 
payload-parsing problems. As with hash and signature payloads, nonce payloads that 
are unusually large might cause problems if no length validation is done on the 
payload. 
Notification Payload 
The notification payload conveys information about an error condition that has 
occurred during protocol exchange. It does this by transmitting a type code that 
represents a predefined error condition encountered during processing. Figure 16-12 
shows the notification payload. 
Figure 16-12. ISAKMP notification payload header 
This payload has a slightly more complex structure than the previous payloads. It's 
obviously required to be a minimum size (12 bytes, plus the size of the SPI and 
notification data). Failure to ensure that the payload is at least this size might lead to 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
975 
vulnerabilities similar to those in general payload types of a size smaller than four. An 
example of an invalid notification payload parser is shown: 
int parse_notification_payload(unsigned char *data, size_t length) 
{ 
    unsigned long doi; 
    unsigned short mtype; 
    unsigned char spi_size, protocol_id; 
    doi = get_32(data); 
    protocol_id = get_8(data+4); 
    spi_size = get_8(data+5); 
    mtype = get_16(data+6); 
    length -= 8; 
    data += 8; 
    ... get SPI and notification data ... 
} 
You can see a vulnerability with the way length is subtracted. No check is made to 
ensure that length is at least eight bytes to start, so an unexpected small notification 
payload results in an integer underflow that likely leads to memory corruption. 
Although this bug is much the same as the one in general payloads with a length less 
than four, this error of small notification payloads is slightly more likely to occur in 
code you audit. The reason is that ISAKMP implementations commonly have generic 
payload parsers that sort packets into structures, and these parsers tend to be more 
robust than individual payload parsers because they have been through more 
rigorous testing. 
Note 
In a review of several popular implementations at one stage, Neel Mehta and Mark 
Dowd found that generic packet parsers seem to be safe in general, but specific 
payload handling was often performed by much less robust code. 
Another element of interest in the notification payload is the SPI size parameter. RFC 
2408 describes this field as follows: 
SPI Size (1 octet) - Length in octets of the SPI as defined by the Protocol-ID. In the 
case of ISAKMP, the Initiator and Responder cookie pair from the ISAKMP Header is 
the ISAKMP SPI; therefore, the SPI Size is irrelevant and MAY be from zero (0) to 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
976 
sixteen (16). If the SPI Size is non-zero, the content of the SPI field MUST be ignored. 
The Domain of Interpretation (DOI) will dictate the SPI Size for other protocols. 
As stated, the SPI size in an ISAKMP packet should be a value between 0 and 16 
(inclusive). Whenever a field in a protocol can represent more values than are legal, 
there's the potential for causing problems if developers neglect to check for illegal 
values correctly. Also, because SPI size is a single-byte field, remember there's the 
possibility of sign-extension vulnerabilities for illegal values, as in the following 
example: 
int parse_notification_payload(char *data, size_t length) 
{ 
    long doi; 
    unsigned short mtype, payload_size, notification_size; 
    char spi_size, protocol_id; 
    payload_size = ntohs(*(data+2)); 
    spi_size = *(data+6); 
    if(spi_size > payload_size) 
        return 1; 
    notification_size = payload_size  spi_size; 
    ... do more stuff ... 
} 
A couple of typing issues make this code vulnerable to attack. First, there's a 
sign-extension issue in the comparison of spi_size and payload_size. Because 
spi_size is a signed character data type, when the integer promotion occurs, 
spi_size is sign-extended. So if the top bit is set, all bits in the most significant three 
bytes are also set (making spi_size a negative 32-bit integer). Usually, when 
comparing against an unsigned value, spi_size is cast to unsigned as well, but 
because payload_size is an unsigned short value (which is only 16 bits), it's also 
promoted to a signed 32-bit integer; so this comparison is a signed comparison. 
Therefore, a negative spi_size causes notification_size to contain an incorrect 
value that's larger than payload_size. (payload_size with a negative integer 
subtracted from it is just like an addition.) 
Second, you might have noticed that SPI is directly related to the payload size. So 
failure to ensure that it's less than the payload size also results in an integer 
underflow condition (or memory corruption) that might allow reading arbitrary data 
from the process memory. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
977 
Delete Payload 
The delete payload is used to inform a responder that the initiator has invalidated 
certain SPIs. The structure of a delete payload is shown in Figure 16-13. 
Figure 16-13. ISAKMP delete payload header 
Vulnerabilities from processing a delete payload might be similar to those from 
processing a notification payload because delete payloads also have a predefined 
minimum size requirement and contain the SPI size. The SPI size has a slightly 
different meaning in the delete payload, however. The delete payload supplies 
multiple SPIs, each one the size indicated by the SPI size. The SPI count parameter 
indicates how many SPIs are included in this payload, so the total number of bytes of 
SPI data in a delete payload is the multiplication of these two fields. This 
multiplication might introduce two additional complications; the first is sign 
extensions of the SPI size or SPI count because they result in a multiplication integer 
wrap, as shown in the following code: 
int process_delete(unsigned char *data, size_t length) 
{ 
    short spi_count; 
    char spi_size, *spi_data; 
    int i; 
    ... read values from data ... 
    spi_data = (char *)calloc(spi_size*spi_count, sizeof(char)); 
    data += DELETE_PAYLOAD_SIZE; 
    for(i = 0; i length != sizeof(MYVERSION) || memcmp(vendor->data, 
MYVERSION, sizeof(MYVERSION)){ 
        sprintf(buffer, "warning, unknown client version: %s\n", 
                vendor->data); 
        log(buffer); 
        return 0; 
     } 
     return 1; 
} 
Obviously, a straightforward buffer overflow exists if a vendor ID larger than 1,024 
bytes is supplied to the parse_version() function. 
Encryption Vulnerabilities 
ISAKMP is now a widely accepted and used standard, and finding 
cryptography-related problems in applications that implement public protocols is 
much harder. The reason is that standards committees usually have a protocol 
scrutinized before accepting it, and then spell out to application developers how to 
implement cryptographic components. Still, vulnerabilities occur from time to time in 
cryptography implementations of protocols, so you need to be aware of potential 
attack vectors that might allow decrypting communications, along with other issues. 
Over time, some generic attacks against ISAKMP when operating in various modes 
(especially aggressive mode) have taken place. In late 1999, John Pliam published an 
interesting paper detailing several attacks related to weak preshared secrets 
(www.ima.umn.edu/~pliam/xauth/). In 2003, Michael Thumann and Enno Rey 
demonstrated an attack against ISAKMP in aggressive mode that allowed them to 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
980 
discover preshared keys (PSKs). This presentation is available at 
www.ernw.de/download/pskattack.pdf. It's entirely possible that implementations 
are still vulnerable to these attacks if they support aggressive mode and make use of 
PSKs. Apart from finding new and exciting ways to break ISAKMP's cryptography 
model, the only other thing left to do is ensure that the implementation you're 
examining conforms to the specification exactly. In most cases, it does; otherwise, it 
wouldn't work with other VPN clients. 
8.3.5 Abstract Syntax Notation (ASN.1) 
Abstract Syntax Notation (ASN.1) is an abstract notational format designed to 
represent simple and complex objects in a machine-independent format 
(http://asn1.elibel.tm.fr/standards/). It's an underlying building block used for data 
transmission in several major protocols, including (but not limited to) the following: 
Certificate and key encoding Primarily used in SSL and ISAKMP, but also used 
in other places, such as PGP-encoded keys. 
Authentication information encoding Microsoft-based operating systems use 
ASN.1 extensively for transmitting authentication information, particularly 
when NTLM authentication is used. 
Simple Network Management Protocol (SNMP) Objects are encoded with 
ASN.1 in SNMP requests and replies. 
Identity encoding Used in ISAKMP implementations to encode identity 
information. 
Lightweight Directory Access Protocol (LDAP) Objects communicated over 
LDAP also use ASN.1 as a primary encoding scheme. 
ASN.1 is used by quite a few popular protocols on the Internet, so vulnerabilities in 
major ASN.1 implementations could result in myriad exploitable attack vectors. 
As always, when encountering a protocol for the first time, you should analyze the 
blocks of data that are going to be interpreted by remote nodes first to get a basic 
understanding of how things work and discover some hints about what's likely to go 
wrong. 
ASN.1 is not a protocol as such, but a notational standard for expressing some 
arbitrary protocol without having to define an exact binary representation (an 
abstract representationhence the name). Therefore, to transmit data for a protocol 
that uses ASN.1, some encoding rules need to be applied to the protocol definitions. 
These rules must allow both sides participating in data exchange to accurately 
interpret information . There are three standardized methods for encoding ASN.1 
data: 
Basic Encoding Rules (BER) 
Packed Encoding Rules (PER) 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
981 
XML Encoding Rules (XER) 
Auditing applications that use ASN.1 means you're auditing code that implements one 
of these encoding standards. So you need to be familiar with how these encoding 
rules work, and then you can apply the lessons learned earlier in Part II(? [????.]) of 
this book. 
Before you jump into the encoding schemes, take a look at the data types defined by 
the ASN.1 notational standard, so you know what kind of data elements you are 
actually going to be encoding. Types for ASN.1 are divided into four classes: 
Universal Universal tags are for data types defined by the ASN.1 standard 
(listed in Table 16-1). 
Table 16-1. ASN.1 Universal Data Types 
Universal Identifier Data Type 
0 
Reserved 
1 
Boolean 
2 
Integer 
3 
Bit string 
4 
Octet string 
5 
Null 
6 
Object identifier 
7 
Object descriptor 
8 
Extended and instance-of 
9 
Real 
10 
Enumerated type 
11 
Embedded PDV 
12 
UTF-8 string 
13 
Relative object identifier 
14 
Reserved 
15 
Reserved 
16 
Sequence and sequence-of 
17 
Set and set-of 
18 
Numeric character string 