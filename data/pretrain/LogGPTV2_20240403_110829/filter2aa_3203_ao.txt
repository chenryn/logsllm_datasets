Converting 10110000 to decimal is 176. Alternately, use the Windows Calculator to compute 189 AND 
240, which yields 176. 
The table becomes: 
131 
107 
189 
41 
255 
255 
240 
0 
131 
107 
176 
0 
Therefore, the subnet prefix for the IPv4 address configuration 131.107.189.41, 255.255.240.0 is 
131.107.176.0, 255.255.240.0. 
Defining a Prefix Length 
The number of variable bits in the subnet prefix determines the maximum number of subnets and hosts 
on each subnet that you can have. 
Before you define a new prefix length based on your subnetting scheme, you should have a good idea 
of the number of subnets and hosts you will have in the future. If you use more variable bits for the new 
prefix length than required, you will save the time and administrative difficulty of renumbering your IPv4 
network later. 
Chapter 4 – Subnetting 
TCP/IP Fundamentals for Microsoft Windows  
Page: 96 
The more variable bits that you use, the more subnets you can have—but with fewer hosts on each 
subnet. If you make the prefix too long, it will allow for growth in the number of subnets, but it will limit 
the growth in the number of hosts on each subnet. If you make the prefix too short, it will allow for 
growth in the number of hosts on each subnet, but it will limit the growth in the number of subnets. 
Figure 4-3 shows an example of subnetting the third octet. 
Figure 4-3  Tradeoff between number of subnets and number of hosts per subnet 
Follow these guidelines to determine the number of bits to use for a new prefix length when subnetting: 
1. Determine how many subnets you need now and will need in the future. 
2. Use additional bits for subnetting if: 
You will never require as many hosts per subnet as allowed by the remaining bits. 
The number of subnets will increase, requiring additional bits from the host ID. 
Defining a new prefix length depends on how many subnets you need. Table 4-2 shows how many 
subnets you can create by using a particular number of variable bits (up to 16) to specify each subnet. 
Chapter 4 – Subnetting 
TCP/IP Fundamentals for Microsoft Windows  
Page: 97 
Number of Subnets 
Number of Host Bits 
1-2 
1 
3-4 
2 
5-8 
3 
9-16 
4 
17-32 
5 
33-64 
6 
65-128 
7 
129-256 
8 
257-512 
9 
513-1,024 
10 
1,025-2,048 
11 
2,049-4,096 
12 
4,097-8,192 
13 
8,193-16,384 
14 
16,385-32,768 
15 
32,769-65,536 
16 
Table 4-2  Number of Required Subnets and Host Bits 
The maximum prefix length for unicast IPv4 addresses is 30. With 30 bits for the subnet prefix, the two 
remaining bits can express up to 4 possible combinations. However, the all-zeros and all-ones host IDs 
are reserved. Therefore, with two host ID bits, you can express only two usable host IDs (the 01 and 10 
combinations). 
To determine the maximum number of hosts per subnet for any subnetting scheme: 
1. Determine m, the number of bits that remain for the host ID, by subtracting the subnetted prefix 
length from 32. 
2. Calculate the maximum number of hosts per subnet from 2m - 2. 
Based on the address prefix you are subnetting and the number of bits that you need for subnetting, 
you can determine whether you are subnetting within an octet or subnetting across an octet boundary. 
For example, if you start with an 18-bit address prefix and then use 4 bits for subnetting, then you are 
subnetting within the third octet. (The subnetted prefix length is 22, which is still within the third octet.) 
However, if you start with a 20-bit address prefix and then use 6 bits for subnetting, then you are 
subnetting across the third and fourth octets. (The original prefix length is 20, which is within the third 
octet, and the subnetted prefix length is 26, which is within the fourth octet.) 
As the following sections describe, the specific procedures for subnetting within an octet and subnetting 
across an octet boundary are very different. 
Subnetting Within an Octet 
When you subnet within an octet, the subnetting procedure has two main steps: 
Chapter 4 – Subnetting 
TCP/IP Fundamentals for Microsoft Windows  
Page: 98 
Defining the subnetted address prefixes 
Defining the range of usable IPv4 addresses for each subnetted address prefix 
The following sections describe these steps. 
Defining the Subnetted Address Prefixes 
You can use two methods to define the set of subnetted address prefixes: 
Binary 
Decimal 
To create an enumerated list of subnetted address prefixes by using binary, perform the following 
steps: 
1. Based on n, the number of bits chosen for subnetting, create a three-column table with 2n rows. The 
first column contains the subnet numbers (starting with 1), the second column contains binary 
representations of the subnetted address prefixes, and the third column contains dotted decimal 
representations of the subnetted address prefixes. 
For each binary representation, the bits corresponding to the address prefix being subnetted are 
fixed at their original values, and all host bits are always set to 0. Only the subnet bits vary as you set 
them to each possible binary value. 
2. In the first row, set the subnet bits to all 0s, and convert the entire subnetted address prefix to dotted 
decimal notation. The result is the original address prefix with its new prefix length. 
3. In the next row, increment the value within the subnet bits. 
4. Convert the binary result to dotted decimal notation. 
5. Repeat steps 3 and 4 until you complete the table. 
For example, you can perform a 3-bit subnetting of the private address prefix 192.168.0.0/16. The 
subnet mask for the new subnetted address prefixes is 255.255.224.0 or /19. Based on n = 3, construct 
a table with 8 (= 23) rows, as Table 4-3 shows. In the row for subnet 1, set all subnet bits (those 
underlined in the table) to 0, and increment them in each subsequent row. 
Subnet 
Binary Representation 
Subnetted Address Prefix 
1 
11000000.10101000.00000000.00000000 
192.168.0.0/19 
2 
11000000.10101000.00100000.00000000 
192.168.32.0/19 
3 
11000000.10101000.01000000.00000000 
192.168.64.0/19 
4 
11000000.10101000.01100000.00000000 
192.168.96.0/19 
5 
11000000.10101000.10000000.00000000 
192.168.128.0/19 
6 
11000000.10101000.10100000.00000000 
192.168.160.0/19 
7 
11000000.10101000.11000000.00000000 
192.168.192.0/19 
8 
11000000.10101000.11100000.00000000 
192.168.224.0/19 
Chapter 4 – Subnetting 
TCP/IP Fundamentals for Microsoft Windows  
Page: 99 
Table 4-3  Binary Subnetting Technique for the 3-bit Subnetting of 192.168.0.0/16 
Note  RFCs 950 and 1122 prohibit setting the bits being used for subnetting to all 1s or all 0s (the all-ones 
and all-zeros subnets). However, RFC 1812 permits this practice. 
To create an enumerated list of subnetted address prefixes by working with decimal numbers, perform 
the following steps: 
1. Based on f, the number of bits in the octet that are already fixed, and n, the number of bits you are 
using for subnetting, compute the subnet increment value, i, based on the following formula: i =  2(8-f-
n). The result is the incrementing value for each subnet for the octet that you are subnetting. 
2. Based on n, the number of bits you are using for subnetting, create a three-column table with 2n 
rows. The first column contains the subnet numbers (starting with 1), the second column contains the 
decimal representations of the octet being subnetted, and the third column contains the dotted 
decimal representations of the subnetted address prefixes. 
3. In the first row, set the second column to the starting octet value in the address prefix being 
subnetted, and set the third column to the original address prefix with its new prefix length. 
4. In the next row, set the second column to the result of incrementing the number from the previous 
row with i, and set the third column to the subnetted address prefix with the subnetted octet from the 
second row. 
5. Repeat step 4 until you complete the table. 
For example, to perform a 3-bit subnet of the private address prefix 192.168.0.0/16, compute the 
subnet increment from i = 2(8-f-n). In this case, f=0 and n=3. Therefore, the subnet increment is 2(8-0-3) = 
2(5) = 32. The prefix length for the subnetted address prefixes is /19. Based on n = 3, construct a table 
with 8 (= 23) rows as Table 4-4 shows. In the row for subnet 1, place the original address prefix with the 
new prefix length, and complete the remaining rows by incrementing the subnetted octet by 32. 
Subnet 
Decimal Value of the Subnetted Octet 
Subnetted Address Prefix 
1 
0 
192.168.0.0/19 
2 
32 
192.168.32.0/19 
3 
94 
192.168.64.0/19 
4 
96 
192.168.96.0/19 
5 
128 
192.168.128.0/19 
6 
160 
192.168.160.0/19 
7 
192 
192.168.192.0/19 
8 
224 
192.168.224.0/19 
Table 4-4  Decimal Subnetting Technique for the 3-bit Subnetting of 192.168.0.0/16 
Defining the Range of IPv4 Addresses for Each Subnet 
You can use two methods to define the range of IPv4 addresses for each subnet: 
Binary 
Decimal 
Chapter 4 – Subnetting 
TCP/IP Fundamentals for Microsoft Windows  
Page: 100 
To define the possible host IDs within each subnet, you keep the bits in the subnetted address prefix 
fixed while setting the remaining bits (in the host portion of the IPv4 address) to all possible values 
except all 1s and all 0s. Recall from Chapter 3, “IP Addressing,” that you should use the following 
standard practice when defining the range of valid IPv4 unicast addresses for a given address prefix: 
For the first IPv4 unicast address in the range, set all the host bits in the address to 0, except for the 
lowest-order bit, which you set to 1. 
For the last IPv4 unicast address in the range, set all the host bits in the address to 1, except for the 
lowest-order bit, which you set to 0. 
The result for each subnetted address prefix is a range of values that describe the possible unicast IPv4 
addresses for that subnet. 
To define the range of valid IPv4 addresses for a set of subnetted address prefixes using the binary 
method, perform the following steps: 
1. Based on n, the number of host bits chosen for subnetting, create a three-column table with 2n rows. 
The first column contains the subnet numbers (starting with 1), the second column contains the 
binary representations of the first and last IPv4 addresses for the subnetted address prefixes, and the 
third column contains the dotted decimal representation of the first and last IPv4 addresses of the 
subnetted address prefixes. Alternately, add two columns to the previous table used for enumerating 
the subnetted address prefixes using the binary technique. 
2. In the second column of the first row, the first IPv4 address is the address in which all the host bits 
are set to 0 except for the last host bit. The last IPv4 address is the address in which all the host bits 
are set to 1 except for the last host bit. 
3. In the third column of the first row, convert the binary representation to dotted decimal notation. 
4. Repeat steps 2 and 3 for each row until you complete the table. 
For example, Table 4-5 shows the range of IPv4 addresses for the 3-bit subnetting of 192.168.0.0/16 
with the host bits underlined. 
Chapter 4 – Subnetting 
TCP/IP Fundamentals for Microsoft Windows  
Page: 101 
Subnet 
Binary Representation 
Range of IPv4 Addresses 
1 
11000000.10101000.00000000.00000001 –
11000000.10101000.00011111.11111110 
192.168.0.1 –192.168.31.254 
2 
11000000.10101000.00100000.00000001 –
11000000.10101000.00111111.11111110 
192.168.32.1 –192.168.63.254 
3 
11000000.10101000.01000000.00000001 –
11000000.10101000.01011111.11111110 
192.168.64.1 –192.168.95.254 
4 
11000000.10101000.01100000.00000001 –
11000000.10101000.01111111.11111110 
192.168.96.1 –192.168.127.254 
5 
11000000.10101000.10000000.00000001 –
11000000.10101000.10011111.11111110 
192.168.128.1 –192.168.159.254 
6 
11000000.10101000.10100000.00000001 –
11000000.10101000.10111111.11111110 
192.168.160.1 –192.168.191.254 
7 
11000000.10101000.11000000.00000001 –
11000000.10101000.11011111.11111110 
192.168.192.1 –192.168.223.254 
8 
11000000.10101000.11100000.00000001 –
11000000.10101000.11111111.11111110 
192.168.224.1 –192.168.255.254 
Table 4-5  Binary Technique for Defining the Ranges of IPv4 Addresses for the 3-bit Subnetting of 
192.168.0.0/16 
To define the range of valid IPv4 addresses for a set of subnetted address prefixes using the decimal 
method, perform the following steps: 
1. Based on n, the number of host bits chosen for subnetting, create a three-column table with 2n rows. 
The first column contains the subnet numbers (starting with 1), the second column contains the 