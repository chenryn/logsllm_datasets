allowed only one interface. The member functions of that inter-
face are all the public member functions of the class. In other
words, the interface is the publicly visible part of the class. In
C++ there is almost no distinction between an interface and a
class. Here's an example C++ class:
class yyy {
public:
int DoThis();
private:
void Helper1();
int count;
int x,y,z;
};
When someone tries to use this class, they only have access
to the public members. (For the moment we're ignoring pro-
tected members and inheritance.) They can't call Helper1, or use
any of the private variables. To the consumer of this class, the
definition looks like this:
class yyy {
int DoThis();
};
8    Chapter 1 •
The Basics of COM 
This public subset of the class is the 'interface' to the outside
world. Essentially the interface hides the guts of the class from
the consumer.
This C++ analogy only goes so far. A COM interface is not a
C++ class. COM interfaces and classes have their own special set
of rules and conventions.
COM allows a coclass (COM class) to have multiple inter-
faces, each interface having its own name and its own collection
of functions. The reason for this feature is to allow for more
complex and functional objects. This is another concept that is
alien to C++. (Perhaps multiple interfaces could be envisioned as
a union of two class definitions - something that isn't allowed in
C++.)
Interfaces Isolate the Client From the Server
One of the cardinal rules of COM is that you can only access a
COM object through an interface. The client program is com-
pletely isolated from the server's implementation through inter-
faces. This is an extremely important point. Let’s look at a
common everyday example to try to understand the point.
When you get into a car, you are faced with a variety of user
interface. There is one interface that allows you to drive the car.
Another allows you to work the headlights. Another controls the
radio. And so on...
Figure 1–1
COM objects expose their functionality in one or more inter-
faces.  An interface is a collection of functions.
COM
Object
Interfaces
The Interface
9
Additonal Information and Updates: http://www.iftech.com/dcom
There are many kinds of cars, but not all of them have
radios. Therefore, they do not all implement the radio interface,
although they do support the driving interface. In all cars that do
have radios the capabilities of the radio are the same. A person
driving a car without a radio can still drive, but cannot hear
music. In a car that does have a radio, the radio interface is avail-
able.
COM supports this same sort of model for COM classes. A
COM object can support a collection of interfaces, each of which
has a name. For COM objects that you create yourself, you will
often define and use just a single COM interface. But many exist-
ing COM objects support multiple COM interfaces depending on
the features they support.
Another important distinction is that the driving interface is
not the car. The driving interface doesn't tell you anything about
the brakes, or the wheels, or the engine of the car. You don't
drive the engine for example, you use the faster and slower
methods (accelerator and brakes) of the driving interface. You
don't really care how the slower (brake) method is implemented,
as long as the car slows down. Whether the car has hydraulic or
air brakes isn't important. The interface isolates you from the
implemenation details.
Driving
Radio
Left()
On()
Right()
Off()
Slower()
Louder()
Faster()
Softer()
Forward()
NextStation()
Reverse()
PrevStation()
Table 1.2
Typical interfaces that a driver finds inside a car. If the car does 
not have a radio, then the radio interface is not available but 
the driver can still drive.
10    Chapter 1 •
The Basics of COM 
Imagine a Component
When you're building a COM object, you are very concerned
about how the interface works. The user of the interface, how-
ever, shouldn't be concerned about its implementation. Like the
brakes on a car, the user cares only that the interface works, not
about the details behind the interface.
This isolation of interface and implementation is crucial for
COM. By isolating the interface from its implementation, we can
build components. Components can be replaced and re-used.
This both simplifies and multiplies the usefulness of the object. 
What's in a Name?
One important fact to recognize is that a named COM interface is
unique. That is, a programmer is allowed to make an assumption
in COM that if he accesses an interface of a specific name, the
member functions and parameters of that interface will be
exactly the same in all COM objects that implement the interface.
So, following our example, the interfaces named "driving" and
"radio" will have exactly the same member function signature in
any COM object that implements them. If you want to change
the member functions of an interface in any way, you have to
create a new interface with a new name.
The Source of All Interfaces - IUnknown
Traditional explanations of COM start out with a thorough
description of the IUnknown interface. IUnknown is the funda-
mental basis for all COM interfaces. Despite its importance, you
don't need to know about IUnknown to understand the interface
concept. The implementation of IUnknown is hidden by the
higher level abstractions we'll be using to build our COM objects.
Actually, paying too much attention to IUnknown can be confus-
ing. Let's deal with it at a high level here so you understand the
concepts.
IUnknown is like an abstract base class in C++. All COM
interfaces must inherit from IUnknown. IUnknown handles the
creation and management of the interface. The methods of IUn-
known are used to create, reference count, and release a COM
A Typical COM Object
11
Additonal Information and Updates: http://www.iftech.com/dcom
object. All COM interfaces implement these 3 methods and they
are used internally by COM to manage interfaces. 
A Typical COM Object
Now let's put all of these new concepts together and describe a
typical COM object and a program that wants to access it. In the
next section and the following chapters we will make this real by
implementing the actual code for the object.
Imagine that you want to create the simplest possible COM
object. This object will support a single interface, and that inter-
face will contain a single function. The purpose of the function is
also extremely simple - it beeps. When a programmer creates
this COM object and calls the member function in the single
interface the object supports, the machine on which the COM
object exists will beep. Let's further imagine that you want to run
this COM object on one machine, but call it from another over
the network.
Here are the things you need to do to create this simple
COM object:
• You need to create the COM object and give it a name.
This object will be implemented inside a COM server that
is aware of this object. 
• You need to define the interface and give it a name. 
• You need to define the function in the interface and give
it a name. 
• You'll need to install the COM server. 
For this example, let's call the COM object Beeper, the inter-
face IBeep and the function Beep. One problem you immedi-
ately run into in naming these objects is the fact that all machines
in the COM universe are allowed to support multiple COM serv-
ers, each containing one or more COM objects, with each COM
object implementing one or more interfaces. These servers are
created by a variety of programmers, and there is nothing to stop
the programmers from choosing identical names. In the same
way, COM objects are exposing one or more named interfaces,
12    Chapter 1 •
The Basics of COM 
again created by multiple programmers who could randomly
choose identical names. Something must be done to prevent
name collision, or things could get very confusing. The concept
of a GUID, or a Globally Unique IDentifier, solves the "how do
we keep all of these names unique" problem.
How to Be Unique - the GUID
There are really only two definitive ways to ensure that a name
is unique:
1. You register the names with some quasi-governmental orga-
nization. 
2. You use a special algorithm that generates unique numbers
that are guaranteed to be unique world-wide (no small
task). 
The first approach is how domain names are managed on
the network. This approach has the problem that you must pay
$50 to register a new name and it takes several days for registra-
tion to take effect. 
The second approach is far cleaner for developers. If you
can invent an algorithm that is guaranteed to create a unique
name each time anyone on the planet calls it, the problem is
solved. Actually, this problem was originally addressed by the
Open Software Foundation (OSF). OSF came up with an algo-
rithm that combines a network address, the time (in 100 nano-
second increments), and a counter. The result is a 128-bit
number that is unique.
The number 2 raised to the 128 power is an extremely large
number. You could identify each nanosecond since the begin-
ning of the universe - and still have 39 bits left over. OSF called
this the UUID, for Universally Unique Identifier. Microsoft uses
this same algorithm for the COM naming standard. In COM
Microsoft decided to re-christen it as a Globally Unique Identi-
fier: GUID.
The convention for writing GUID's is in hexadecimal. Case
isn't important. A typical GUID looks like this:
How to Be Unique - the GUID
13
Additonal Information and Updates: http://www.iftech.com/dcom
"50709330-F93A-11D0-BCE4-204C4F4F5020"
Since there is no standard 128-bit data type in C++, we use a
structure. Although the GUID structure consists of four different
fields, you'll probably never need to manipulate its members.
The structure is always used in its entirety.
typedef struct _GUID
{
unsigned long Data1;
unsigned short Data2;
unsigned short Data3;
unsigned char Data4[8];
} GUID;
The common pronunciation of GUID is "gwid", so it sounds
like ‘squid’. Some people prefer the more awkward pronuncia-
tion of "goo-wid" (sounds like ‘druid’).
GUIDs are generated by a program called GUIDGEN. In
GUIDGEN you push a button to generate a new GUID. You are
guaranteed that each GUID you generate will be unique, no mat-
ter how many GUIDs you generate, and how many people on
the planet generate them. This can work because of the follow-
ing assumption: all machines on the Internet have, by definition,
a unique IP address. Therefore, your machine must be on the
network in order for GUIDGEN to work to its full potential.
Actually, if you don't have a network address GUIDGEN will
fake one, but you reduce the probability of uniqueness.
Both COM objects and COM interfaces have GUIDs to iden-
tify them. So the name "Beeper" that we choose for our object
would actually be irrelevant. The object is named by its GUID.
We call the object's GUID the class ID for the object. We could
then use a #define or a const to relate the name “Beeper” to the
GUID so that we don't have 128-bit values floating throughout
the code. In the same way the interface would have a GUID.
Note that many different COM objects created by many different
programmers might support the same IBeep interface, and they
would all use the same GUID to name it. If it is not the same
14    Chapter 1 •
The Basics of COM 
GUID, then as far as COM is concerned it is a different interface.
The GUID is the name.
A COM Server
The COM server is the program that implements COM interfaces
and classes. COM Servers come in three basic configurations.
• In-process, or DLL servers 
• Stand-alone EXE servers 
• Windows NT based services. 
COM objects are the same regardless of the type of server.
The COM interfaces and coclasses don't care what type of server
is being used. To the client program, the type of server is almost
entirely transparent. Writing the actual server however, can be
significantly different for each configuration:
• In-Process servers are implemented as Dynamic Link
Libraries (DLL's). This means that the server is dynami-
cally loaded into your process at run-time. The COM
server becomes part of your application, and COM opera-
tions are performed within application threads. Tradition-
ally this is how many COM objects have been
implemented because performance is fantastic - there is
minimal overhead for a COM function call but you get all
of the design and reuse advantages of COM. COM auto-
matically handles the loading and unloading of the DLL. 
• An out-of-process server has a more clear-cut distinction
between the client and server. This type of server runs as
a separate executable (EXE) program, and therefore in a
private process space. The starting and stopping of the
EXE server is handled by the Windows Service Control
Manager (SCM). Calls to COM interfaces are handled
through inter-process communication mechanisms. The
server can be running on the local computer or on a
remote computer. If the COM server is on a remote com-
puter, we refer to it as "Distributed COM", or DCOM. 
Interactions Between Client and Server
15
Additonal Information and Updates: http://www.iftech.com/dcom
• Windows NT offers the concept of a service. A service is a
program that is automatically managed by Windows NT,
and is not associated with the desktop user. This means
services can start automatically at boot time and can run
even if nobody is logged on to Windows NT. Services
offer an excellent way to run COM server applications. 
• There is a fourth type of server, called a "surrogate". This
is essentially a program that allows an in-process server to
run remotely. Surrogates are useful when making a DLL-
based COM server available over the network. 
Interactions Between Client and Server
In COM, the client program drives everything. Servers are
entirely passive, only responding to requests. This means COM
servers behave in a synchronous manner toward individual
method calls from the client.
• The client program starts the server. 
• The client requests COM objects and interfaces. 
• The client originates all method calls to the server. 
• The client releases server interfaces, allowing the server
to shut down. 
This distinction is important. There are ways to simulate
calls going from server to client, but they are odd to implement
and fairly complex (They are called callbacks and are discussed
later). In general, the server does nothing without a client
request.
Table 1.3 is a typical interaction between a COM client and
server. In COM you must take a client-centric approach.
16    Chapter 1 •
The Basics of COM 
Summary
We've tried to look at COM from several points of view. C++ is
the native language of COM, but it's important to see beyond the
similarities. COM has many analogues in C++, but it has impor-
tant differences. COM offers a whole new way of communicating
between clients and servers.
The interface is one of the most important COM concepts.
All COM interactions go through interfaces, and they shape that
interaction. Because interfaces don't have a direct C++ counter-
part, they are sometimes difficult for people to grasp. We've also
introduced the concept of the GUID. GUIDs are ubiquitous in
COM, and offer a great way to identify entities on a large net-
work.
COM servers are merely the vehicles for delivering COM
components. Everything is focused on the delivery of COM com-
Client Request
Server Response
Requests access to a specific 
COM interface, specifying the 
COM class and interface (by 
GUID) 
• Starts the server (if required). If it is an
In-Process server, the DLL will be
loaded. Executable servers will be run
by the SCM. 
• Creates the requested COM object. 
• Creates an interface to the COM object. 
• Increments the reference count of
active interfaces. 
• Returns the interface to the client. 
Calls a method of the interface.
Executes the method on a COM object.
Release the interface
• Decrements the interface’s reference
count. 
• If the reference count is zero, it may
delete the COM object. 
• If there are no more active connections,
shut down the server. Some servers do
not shut themselves down. 
Table 1.3
Interactions between a COM client and Server.
Summary
17
Additonal Information and Updates: http://www.iftech.com/dcom
ponents to a client application. In the following chapters, we'll
create a simple client and server application to demonstrate
these concepts.
18    Chapter 1 •
The Basics of COM 
T
W
O
2
Understanding 
the Simplest COM 
Client 
The most straightforward way to begin understanding COM is to
look at it from the perspective of a client application. Ultimately,
the goal of COM programming is to make useful objects avail-
able to client applications. Once you understand the client, then
understanding servers becomes significantly easier. Keeping cli-
ents and servers straight can be confusing, and COM tends to
make the picture more complex when you are first learning the
details. 
Therefore, let's start with the simplest definition: A COM cli-
ent is a program that uses COM to call methods on a COM
server. A straightforward example of this client/server relation-
ship would be a User Interface application (the client) that calls
methods on another application (the server). If the User Interface
application calls those methods using COM, then the user inter-
face application is, by definition, a COM client.
We are belaboring this point for good reason - the distinc-
tion between COM servers and clients can get (and often is)
much more complex. Many times, the application client will be a
COM server, and the application's server will be a COM client.
It's quite common for an application to be both a COM client
and server. In this chapter, we will keep the distinction as simple
as possible and deal with a pure COM client.
20    Chapter 2 •
Understanding the Simplest COM Client 
Four Steps to Client Connectivity
A client programmer takes four basic steps when using COM to
communicate with a server. Of course, real-life clients do many
more things, but when you peel back the complexity, you'll
always find these four steps at the core. In this section we will
present COM at its lowest level - using simple C++ calls.
Here is a summary of the steps we are going to perform:
1. Initialize the COM subsystem and close it when finished. 
2. Query COM for a specific interfaces on a server. 
3. Execute methods on the interface. 
4. Release the interface. 
For the sake of this example, we will assume an extremely
simple COM server. We'll assume the server has already been
written and save its description for the next chapter.
The server has one interface called IBeep. That interface has
just one method, called Beep. Beep takes one parameter: a dura-
tion. The goal in this section is to write the simplest COM client
possible to attach to the server and call the Beep method.
Following is the C++ code that implements these four steps.
This is a real, working COM client application.
#include "..\BeepServer\BeepServer.h"
// GUIDS defined in the server
const IID IID_IBeepObj =
{0x89547ECD,0x36F1,0x11D2,{0x85,0xDA,0xD7,0x43,0xB2,0x
32,0x69,0x28}}; 
const CLSID CLSID_BeepObj = 