trampoline.
In Step 2 , the JIT code then issues the static code function call.
The static code then executes normally5 until it returns. The return
trampoline in Step 3 then retrieves the original return address
using the segment register and an offset into the jump table. Finally,
it returns to the JIT code, which will restore the JIT stack using the
saved offset and continue execution at the instruction immediately
after the call to the static code.
8 SECURITY ANALYSIS
The goal of JITGuard is to mitigate code-injection, code-reuse, and
data-only attacks against the JIT code. As written in our threat
model (Section 4), protecting the static code, i.e., the browser and
the static part of the JIT compiler, is beyond the scope of this paper
and can be achieved leveraging existing defenses [1, 16, 33].
8.1 Code-injection/reuse Attacks
Both code injection and reuse techniques are used by the attacker
to execute arbitrary code after the control flow has been hijacked.
In particular, the attacker overwrites a code pointer with a mali-
cious pointer to injected code or the first gadget of a ROP payload.
However, this requires that the attacker knows the exact address
of the injected code or the gadget.
JITGuard does not prevent the attacker from injecting code us-
ing techniques like JIT spraying [6, 36]. However, we prevent the
attacker from disclosing the JITGuard-Region which contains the
JIT code and data. As a consequence, the attacker cannot hijack
any code pointers used by the JIT code, and cannot exploit the
generated JIT code for code-injection or code-reuse attacks.
Next, we analyze the resilience of JITGuard against information-
disclosure attacks.
8.2 Information-disclosure Attacks
The security of JITGuard is built on the assumption that the attacker
cannot leak the address of the JITGuard-Region. Therefore, we
carefully analyzed every component that communicates with the
JITGuard-Region and analyzed them. In particular, there are seven
components that interact with the randomized region, and hence,
could potentially leak the randomization secret: (1) the initialization
code, (2) the JIT compiler in the enclave, (3) the JIT code, (4) the
trampolines, (5) the transitions between JIT and static code, (6) the
garbage collector, or (7) system components. In the following we
explain how JITGuard prevents information-disclosure attacks for
each of these components.
5Some native functions require access to the most recent stack frames on the JIT stack.
We support this through copying the most important information of a small number
of recent stack frames from the JIT stack to the corresponding location on the native
code stack. The fields we copy do not contain pointers to the stack and we replace the
address return pointers with the corresponding trampolines. We do not copy these
frames back to the JIT stack, so the native code has no way to influence the JIT stack
(except legitimately returning a value to the caller).
Figure 8: JITGuard mediates control-flow transfers from JIT code to static
code through return trampolines. These are set up by the JIT code before
jumping to the static function. This hides the return address to the JIT code
from the static code.
start address of the segment cannot be disclosed by the attacker.3
The jump table is protected from the attacker because it is located
inside a randomized region.4
In Step 3 the JIT code switches from the native stack to the
randomized stack, and subsequently starts executing its code. In
particular, the randomization code updates rsp and rbp to their
new location inside the randomized area and saves their previous
values in the JIT stack. The JIT code expects a particular alignment
of the stack, so the randomization code needs to adjust the stack
to that alignment. When the JIT-compiled function returns, the
randomization code restores the old values for the registers so they
point to the normal stack again and returns execution to the static
code.
The compiler needs a way to prepare those trampolines. If the
trampolines were writable by the host code, the attacker could write
malicious code to the trampoline and execute it. Thus, JITGuard
leverages a double mapping of the trampolines (see also Figure 6),
and keeps the address of the writable mapping hidden inside its
SGX enclave, so the host code cannot read it.
7.2 JIT Code calls Static Code
During JIT code execution, it is possible to call functions inside the
static code. For instance, JIT code may call a library function that
is implemented in static code.
Usually, the return address of a function is stored on the stack. If
the JIT code calls the native code without taking special measures,
the native code can easily retrieve the return pointer from the stack
and disclose the location of the JITGuard-Region. To prevent this
attack, the native code uses return trampolines to return securely
to the JIT code. Using this scheme, the return address on the native
code stack actually represents the address of the return trampo-
line, which then retrieves the original return address using the
randomized segment (see Section 7.1).
Hence, the JIT code has to prepare the return trampoline prior to
calling the static code function in Step 1 of Figure 8. In particular,
3The base address of the segment can only be disclosed using a system call, arch_prctl,
or using a special instruction, rdgsbase. Our threat model prevents the adversary
from invoking that system call, since it is only used in the initialization code. The
instruction rdgsbase has to be explicitly activated by the operating system, which is
currently not even supported on Linux (and it is not used by Firefox).
4Theoretically, the native code could read the pointers in the randomized segment
using an instruction like mov *%gs:(0x2a00), %rax, but the gs segment register is
not used anywhere in the code of Firefox.
➁Static CodeASM_INSRETfun:Direct disclosureoffset :  fun return addressJump TableJIT Codejit_fun:SETUP_RETSWITCH_STACKJMP funNative Stackrsp + 0x00 : valuersp + 0x08 : valuersp + 0x10 : valueJIT Stackrsp + 0x00 : valuersp + 0x08 : valuersp + 0x10 : value➂JMP *(segReg + offset)Return Trampoline➀Session K4:  Secure EnclavesCCS’17, October 30-November 3, 2017, Dallas, TX, USA2413(1) Initialization code. During the initialization the JITGuard-
Region is allocated through the mmap system call which returns
the memory address. Next, the address of the JITGuard-Region is
passed to the enclave, and we set all registers, local variables, and
the stack memory that is used for temporarily spilling register to
zero. This ensures that the address of the JITGuard-Region is not
stored in memory outside of the enclave.
(2) Enclave. The first action the initialization function of the
enclave takes is to obfuscate the address of the JITGuard-Region
by adding a random value. Henceforth, the JIT compiler will work
on the fake pointers. Note that those fake pointers are useless to
an attacker without the random offset, which is stored securely
inside the enclave. We identified 11 functions that require the actual
address of the JITGuard-Region, e.g., to allocate memory for the JIT
code stack, or to write the generated JIT code. We patch all of these
functions to convert the fake pointer back to the original address as
late as possible, e.g., in the very C++ statement that writes a jump
target to the JIT-compiled code page. Further, we ensure that the
original address is then not propagated in the data structures of the
JIT compiler. Since we add this translation to the code ourselves, and
it happens at the very last moment, we can verify that the address
to the JITGuard-Region is never leaked by those 11 functions. Due
to the large code base of the JIT compiler we cannot exclude the
possibility that other functions leak the address of the JITGuard-
Region to memory outside of the enclave. However, in this case
these functions would only leak the fake pointer which cannot be
de-obfuscated without possessing the randomization secret which
is stored securely within the enclave.
(3) JIT code. The JIT code does not leak any pointers to the
JITGuard-Region to attacker-accessible memory. To do this, it would
need to leak either the program counter or the stack pointer to the
heap. We carefully analyzed the JIT compiler and found no support
for such behavior.
Another way the attacker could force the JIT code to indirectly
leak an address that points into the JITGuard-Region is to generate
an exception while the JIT code is executing. This would cause the
operating system to store the current execution context (including
instruction and stack pointers, which would both point into the
JITGuard-Region) in a memory region readable by the attacker.
There are two main strategies the attacker could use to trigger an
interrupt: cause the JIT code to access invalid memory to trigger an
exception, or use a timer to trigger a delayed interrupt. However,
both strategies are infeasible. First, JavaScript is a memory-safe
language, and the JIT-compiled code cannot access invalid mem-
ory. Second, the execution of JavaScript is single-threaded, and
timer events are delivered synchronously, which means that the
JIT code first safely exists, before a timer event, e.g., triggered by
setTimeout(), is handled.
(4) Trampolines. Throughout the run time, the execution
switches between the native code and the JIT code. As explained
in the previous paragraph the JIT code cannot leak any addresses
of the JITGuard-Region. We use trampolines as an indirection to
prevent that any pointers to the JITGuard-Region are leaked to
memory that can be disclosed by the static code. The trampolines
adjust the stack pointer to point to the native or JIT stack, and
change the control flow. The trampolines use a segment register
as an indirection to access the JITGuard-Region to avoid leaking
any addresses during this transition. Specifically, the CPU resolves
the indirection using the segment register as a base address. The
segment base address is set in the kernel. This translation is trans-
parent to user mode, thus, the attacker cannot disclose the location
of the JITGuard-Region through the trampolines.
(5) JIT/static code transitions. To ensure the JIT code does not
leak any information when it calls a static function, we check any
arguments and the CPU registers to make sure they do not repre-
sent or contain pointers to the JITGuard-Region. We use similar
checks to verify the return value of JIT-compiled functions to static
functions.
(6) Garbage collector. Dynamic languages employ a garbage
collector for automatic memory management. This requires the
garbage collector to be aware of all memory that is used throughout
the execution. On the other hand, the garbage collector code out-
side the enclave cannot handle addresses in the JITGuard-Region.
We moved the code responsible for the garbage collection of sen-
sitive memory areas (JIT-compiled code, JIT stack) to the enclave,
where the actual addresses are available. As a consequence, the at-
tacker cannot leak addresses to the JITGuard-Region by disclosing
memory used by the garbage collector.
(7) System components. Linux’s proc filesystem [22] provides a
special file for each process that contains information about its
complete memory layout. If the attacker gains access to this file, the
attacker can disclose the address of randomized memory sections,
including the JITGuard-Region. However, this file is mainly used
for debugging purposes and on recent versions, access requires
higher privileges by default. Additionally, sandboxes, which are
used as an orthogonal defense mechanism to isolate JIT engines
from the rest of the system (see Section 4), prevent any access to
this file.
8.3 Data-only Attacks
During a data-only attack the attacker manipulates the data on
which the existing code operates. As we have shown in Section 3,
attacks like DOJITA are as powerful as code-injection attacks. JIT-
Guard mitigates data-only attacks like DOJITA by isolating the
code and data of the JIT compiler in an enclave, and isolating it
from the untrusted host process. Hence, the attacker can no longer
manipulate the intermediate representation of the JIT compiler to
launch DOJITA-like attacks. This also prevents attacks [57] that
target the temporary output buffer of the JIT compiler because this
buffer is within the enclave.
For this reason, the only remaining data-only attack vector on
the JIT compiler is its direct input, i.e., the unoptimized JavaScript
bytecode which should be compiled. However, this bytecode rep-
resentation is already used by the JIT engine during interpreter
execution. In Section 2.2 we explained that the interpreter limits the
capabilities of the interpreted bytecode for security reasons. This
is why the bytecode representation is designed in such a way, that
potentially harmful instructions cannot be encoded. For instance,
it does not support system call instructions, absolute addressing,
unaligned jumps, or direct stack manipulation. As a consequence,
Session K4:  Secure EnclavesCCS’17, October 30-November 3, 2017, Dallas, TX, USA2414Figure 9: JavaScript performance overhead for Sunspider 1.0.2 with the various components of JITGuard enabled.
an adversary cannot utilize the bytecode to force the JIT compiler
to create malicious native code, but has to resort to manipulating
the IR of the JIT compiler (which is mitigated by JITGuard).
The bytecode uses integer IDs to resolve call targets, which
cannot be exploited by themselves. The IDs are then resolved using
tables, which an adversary could theoretically compromise using
a data-only attack. However, this attack would also work in the
absence of any JIT compiler, and hence, it is not directly related to
JITGuard.
9 PERFORMANCE EVALUATION
We rigorously evaluated the performance impact of JITGuard on
SpiderMonkey using the JavaScript benchmark Sunspider 1.0.2 [56].
Sunspider is a well-known benchmark suite that focuses on
the core of the JavaScript language and is suggested by Mozilla
to measure the performance of SpiderMonkey [42]. The bench-
mark includes multiple real-world tasks that are used in modern
JavaScript apps, like dealing with JSON, code decompression, and
3D raytracing. We chose this benchmark since it only uses the core
functionality of JavaScript, but it does not depend on other parts
of the browser, like the DOM. Our implementation of JITGuard
only includes the core JavaScript engine. The tests from the Sun-
spider suite are also widely used in recent browser benchmarks:
as an example, the JetStream suite incorporates eleven tests from
Sunspider.
Sunspider strives to be statistically sound. The total score of Sun-
spider is the total time needed to perform each of the benchmarks.
We ran each benchmark ten times, and report the relative overhead
on the weighted average of the run times, which equals the relative
overhead on the total time.
We performed all evaluations on a computer with Ubuntu
14.04.4 LTS with the Linux kernel version 3.19.0.25. The machine
has an Intel Core i7-6700 processor clocked at 3.40 GHz and 32 GB
of RAM. We applied our modifications to SpiderMonkey version 47.
To ensure the reliability of the results, we disabled the dynamic
frequency scaling of the processor.
To fully understand the impact of each component of our design,
we measured the overhead of each of them independently, as well
as the overall impact of JITGuard. We summarize our results in
Figure 9.
Static Code → JIT Randomization. First, we evaluated the ran-
domization of the stack during the transition from static code to
JIT-compiled code (Static → JIT: Randomization in Figure 9; see
Section 6.1). This component has no measurable overhead, since
we only add a small constant overhead to each call to the JIT code.
bitops-nsieve-bits has the greatest overhead, 1.6%.
Static Code → JIT Trampolines. Second, we evaluated the impact
of the trampolines that are used for calls from the static code to
the JIT-compiled code (Static → JIT: Trampolines in Figure 9; see
Section 7). The average overhead of this component is around 1.0%,
since we only add one jump instruction compared to the unmodified
flow. Five benchmarks in groups access, bitops, and controlflow have