通过分层法处理， 可以实现与用于操作模式的环模型(本章前面讨论过)类似的结构， 并且能够
应用于每一个操作系统进程。 分层法将进程最敏感的功能放在中心， 并且用逐渐扩大的同心圆代表
敏感度较低的功能(使用稍有不同的方式， 有时也采用术语 " 较高层" 和 "较低层 " 进行阐述， 从较
低层进入较高层时， 安全性与特权会被减弱或减少)。 讨论 os 体系结构肘， 保护环的概念十分常见，
但并非唯一的 。 使用与环不同的级别概念也可以表示相同的基本思想。 在这样的系统中 ， 最高级别
具有最大的特权， 而最低级别则具有最小 的特权。
使用 "级别" 替代 "环"
讨论多 层或多 级系 统时 ， 常常会应用许多 与 保护环概念相同 的特性和约束。 以一幢高层公寓建
筑为例 ， 租金较低的公寓往往往于较低的楼层。 到 达公寓的 中 间层时， 公寓往往更大， 手见:1t往往开
间 。 最后 ， 位于顶层(或最高几层)的公寓总是最宽敞的， 并且租金也是最贵的(常常是豪华的顶层房
间 )。 通常， 如果居住在大楼中低租金的公寓 内 ， 就不能乘坐 电梯到 达租金更贵的更高楼层; 如果居
住在中 间楼层的公寓内， 那么除了 豪华房间所在的楼层， 可以乘坐电梯到达任何楼层; 如果居住在
豪华的顶层房间 ， 那 么可以乘坐电梯到达 自 己想去的任何楼层。 在办公楼和宾馆 内 ， 也可以发现这
样的楼层约束系统。
分层或多 级系统的顶端与保护环方案的 中 心环相同。 同样， 分层或多级系统的底部与保护环方
案的外环相同。 级别通常与层相同， 往往与环也是相同 的(至少在保护和访问 概念方面是相 同 的)。
此外 ， 级别 、 层或环可以被称为 域(也就是具有单 一特征的客体集合)。
层与层之间 的通信只 能使用定义 良好的特定接口 ， 以便提供必要的安全性。 来 自外部(低敏感度)
层的所有入站请求都必须经过严格的身份认证和授权检查， 然后才能被允许继续进行(或者在未通过
检查的情况下被拒绝)。 为安全性使用 的分层法类似于使用安全域和格子型安全模型， 安全性以及对
特定主体和客体的访问控制与指定的层和特权相关联， 并且从外部层移至内 部层时访问特权会增加。
事实上， 不同的层只能通过特定的接口进行通信， 这种接口被设计用于维护系统的安全性和完
第 9 章 安全脆弱性、 威胁和对施
整性。 即使低安全性的外部层依赖于来 自 更高安全性的内部层的服务和数据， 它们也仍然只知道如
何与这些内 部层接口， 但是对内部层的 内 部结构、 特征或其他细节毫无了解。 为了维护层的完整性，
内 部层既不了解也不依赖于外部层。 无论任何一对层之间存在何种安全关系， 都不会对对方造成影
响(因此每个层都不会遭受其他层的篡改)。 最后， 外部层不能违反或重写内部层强制实施的任何安
全策略。
2. 抽象
抽象是支持面向对象编程的领域的基本原则之一 。 它属于 " 黑箱 " 原则， 即认为对象(或操作系
统组件)的用户没有必要知道对象的工作细节， 而是只 需知道使用对 象的正确语法和作为结果返回 的
数据的类型(也就是如何发送输入和接收输出)。 这往往涉及对数据或服务的中 间访问， 就像用户 模
式 中的应用程序使用系统调用请求管理员模式中的服务或数据一样(根据请求者的凭证和特权授予
或拒绝这种请求)， 而不是获得直接的 、 非中间的访 问 。
抽象的另一种安全应用方式引入了对 象组(有时也被称为类)， 此时访问控制和操作权限被分配
给对象组， 而不是在每个对象的基础上进行分配。 这种方式允许安全管理员方便地定义和命名对象
组(通常与作业角色或职责有关)， 并且使权限和特权管理变得更为容易(当把对象加入某个类时， 就
能赋予权限和特权， 从而不必单独针对每个对象管理权限和特权)。
3. 数据隐藏
数据隐藏是多级安全系统的一个重要特征， 它能够确保存在于某个安全级别的数据对于运行在
不同安全级别的进程来说是不可见的。 数据隐藏背后的重要概念是: 保证不必知道在某个级别访问
和处理数据所涉及细节的人无法偷偷摸摸地或违法地了解和查看这些细节。 从安全性的角度看， 数
据隐藏依赖于将客体置入不同于主体所占用容器的其他安全容器中 ， 从而对不必对客体细节进行了
解的人隐藏相关的细节。
4. 进程隔离
进程隔离要求操作系统为每个进程的指令和数据提供不同的 内存空间 。 此外， 还要求操作系统
强制实施这些分界， 以 阻止某一进程读取或写入属于另一个进程的数据。 使用进程隔离技术主要有
下列两个优点 :
• 阻止未经授权的 数据访 问 。 进程隔离是多级安全模式系统的基本要求之一。
• 保护进程的完整性。 如果没有这样的控制措施， 那么设计糟糕的进程可能会出现错误， 并
且将数据写入分配给其他进程的内存空间， 从而导致整个系统不稳定， 而不仅仅是影响错
误进程的执行。 在更恶意的情况下， 进程可能试图(甚至可能成功)读取或写入超出其处理范
围 的 内 存空间、 入侵或攻击其他进程。
通过在每个用户或每个进程的基础上实现所谓的虚拟机， 许多现代操作系统都满足了对进程隔
离的需求。 虚拟机表示具有处理环境的用户或进程， 处理环境包括内存、 地址空间 以及其他关键的
系统资源和服务， 并且使这个用户或进程看起来像是对整个计算机进行唯一、 排他性的访问 。 在不
需要了解可能在同一台计算机上同时执行操作的其他用户或进程的情况下， 这种方式允许每个用户
或进程进行独立操作 。 作为操作系统提供的对系统的中间访问 的一部分， 进程隔离机制映射了用户
模式中 的虚拟资源和访问 ， 从而能够使用监管模式调用来访问对应的实际资源。 这种机制不仅为编
程人员提供了 方便 ， 而且也防止单独的用 户 或进程遭受其他用 户 或进程的影响 。
255
256
CISSP 官方学习 指南(第 7 版)
5. 硬件分隔
硬件分隔的 目 的与进程隔离类似: 用于阻止对属于不同进程/安全级别的信息的访问 。 二者的主
要差异是: 硬件隔离通过使用物理方式的硬件控制措施来强制实施这些要求， 而不是通过操作系统
强加的逻辑进程隔离控制方法。 硬件分隔较为少见， 通常被限制在国家安全实现中 。 在这种实现中，
额外的 成本和复杂度 由所涉及信息的敏感度和未授权访 问 或泄露固有的风险抵销 。
9.1 0.2 安全策略与计算机体系结构
正如安全策略指导组织中 日 常的安全操作、 过程和措施一样， 它在设计和实现系统时也扮演了
重要的角色。 无论系统完全由硬件组成、 完全由软件组成还是由软件和硬件组合而成， 情况都是如
此。 在这种情况下， 安全策略的角色是告知和指导某些特殊系统的设计、 开发、 实现、 测试和维护。
因此， 这种安全策略主要关注于单一的实现努力(尽管可能改编 自 其他类似的实现努力， 但是应当尽
可能准确和完整地反映 目 标)。
对于系统开发人员而言， 安全策略最好通过文档形式定义一组规则、 实践和措施， 它们描述了
系统应当如何管理、 保护和分布敏感的信息。 阻止信息从较高安全级别流向较低安全级别的安全策
略被称为多级安全策略。 随着系统开发的进行， 应当针对所有适用 的系统组件或元素(包括以下全部
或其中 的一部分: 物理的硬件组件、 固件、 软件以及组织如何交互和使用系统)设计、 构建、 实现和
测试安全策略。 总之， 安全考虑应该贯穿项 目 的整个生命周期， 而不是到最后才考虑 ， 否则更容易
遭受失败。
9.1 0.3 策略机制
正如任何安全程序一样 ， 还应当采用适当的策略机制。 这些机制是基本计算机安全原则的扩展，
但是本节所描述的应用情况是针对计算机体系结构和设计的。
1 . 最小特权原则
在第 13 章 " 管理身份与认证 " 中 ， 将介绍与一般安全性有关的最小特权原则以及如何应用于计
算系统的用户。 这条原则对于计算机和操作系统的设计也非常重要， 尤其是在应用于系统模式时。
当设计操作系统进程时， 无论什么时候都应当始终确保进程在用户模式中运行。 在特权模式中执行
的进程数 目 越多，为了获得监管系统访问特权的怀有恶意的人发现的系统潜在脆弱性的数 目 就越多。
一般而言， 最好使用 API 来请求监管模式服务 ， 或者在必要时， 从用户模式应用相芋将控制权传递
至 可信的、 保护 良好的监管模式进程(而非将这样的程序或进程一起提升至监管模式)。
2. 特权分离
特权分离的原则建立在最小特权原则 的基础之上， 它要求使用细粒度化的访问特权， 也就是说，
给每一种类型的特权操作分配不同 的特权。 这就允许设计人员分配执行特定监控功能的权限， 同 时
不需要授予不受限制访问系统的权限。特权分离还允许查看对服务的单个请求或对资源的单个访问，
针对访问控制进行检查 ， 以及基于请求用户 的身份或者基于所属用户组或用户 的安全角色来准许或
拒绝请求。
第9意 安全脆弱性、 威胁和对施
职责分离可以被视为针对管理员 的最小特权原则的应用 。 在大多数中到大型的组织中存在许多
管理员 ， 每个管理员会被分配不同 的任务。 因此， 单个管理员往往不可能具有对整个环境或基础设
施的完全访问权限。 例如， 某位用 户管理员不需要支持重新配置网络路由 、 格式化存储设备或完成
备份功能的特权。
职责分离也是一种用于防止访问特权和工作任务分配出 现冲突的工具。 例如， 负 责编码的人员
不能完成测试和实现编码的任务。 同样， 负责账户支付工作的人员不能负责账户 的收款工作。 通过
正确地实现职责分离 ， 就可 以安全地管理许多这样的作业或任务冲突 。
3. 可问责性
可 问责性是任何安全设计中 的一个重要组成部分。 许多安全要求较高的系统都包含强制实施个
人特权操作行为可问责'性的物理设备， 例如， 手写访问 日志和无法修改的审计跟踪。 然而， 一般而
言 ， 这样的功能依赖于系统是否能够监控发生于系统资源和配置数据上的活动与交互， 以及是否能
够保护生成的 日 志不会被未授权访问或更改， 以便 日 志提供准确可靠的活动和交互记录， 这些记录
说明了每个用户(包括管理员或其他具有高特权级别 的可信个体)在系统中 的活动历史。 为 了支持可
问 责性 ， 除了需要可靠的审计和监控系统之外， 还需要灵活的授权系统和完美的身份认证系统。
9. 1 1 常见的缺陷和安全问题
任何安全体系结构都不是绝对安全的。 每个计算机系统中都存在缺点和脆弱性。 安全模型和体
系结构的 目 的是要尽可能多地解决己知的缺陷。 下面将讨论一些比较常见的影响计算机系统的安全
问题。 你不仅应当理解每一个安全问题， 而且需要知道它们如何降低 了整个系统的安全性。 某些问
题和缺陷彼此重叠， 并且被攻击者以一种创造性的方式用于攻击系统。 虽然下面的讨论中覆盖了 最
常见的缺陷 ， 但是还不够详尽。 攻击者往往是非常狡猾的 。
9. 11.1 隐蔽通道
隐蔽通道是用于传递信息的方法， 通常不用于通信。 因 为隐蔽通道的路径通常不用于通信， 所
以不会受到系统正常安全控制方法的保护。 使用隐蔽通道提供了 违反、 绕过或回避安全策略而不被
发现的一种方法。 隐蔽通道是安全架构脆弱性的一个重要例子 。
正如你想象的那样， 隐敲通道与公开通道是对立的。 公开通道是一种 己知的、 预期的、 被授权
的 、 经过设计的 、 受监控的和受控的通信方法。
目 前存在下列两种基本的隐蔽通道类型:
时间隐蔽通道 通过以一种可预测的方式改变系统组件的性能或更改资源的时间安排来传达信
息 。 使用 时 间隐蔽通道通常是一种 比较复杂的传送数据的方法 ， 并且难 以检测 。
存储隐蔽通道 通过将数据写入其他进程可以读到的公共存储区域来传达信息。 当评估软件安
全时， 需要注重评估任意进程将信息写入 内 存中任意位置时， 是否可能被其他的进程读取。