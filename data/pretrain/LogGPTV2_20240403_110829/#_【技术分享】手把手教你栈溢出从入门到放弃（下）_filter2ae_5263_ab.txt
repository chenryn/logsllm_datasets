Fig 4. gadget “pop eax; ret;”
在调用 mprotect() 为栈开启可执行权限之后，我们希望执行一段 shellcode，所以要将 shellcode 也加入溢出数据，并将
shellcode 的开始地址加到 int 0x80 的 gadget之后。但确定 shellcode
在内存的确切地址是很困难的事（想起上篇里面艰难试探的过程了吗？），我们可以使用 push esp 这个 gadget（加入可以找到的话）。
Fig 5. gadget “push esp; ret;”
我们假设现在内存中可以找到如下几条指令：
    pop eax; ret;    # pop stack top into eax
    pop ebx; ret;    # pop stack top into ebx
    pop ecx; ret;    # pop stack top into ecx
    pop edx; ret;    # pop stack top into edx
    int 0x80; ret;   # system call
    push esp; ret;   # push address of shellcode
对于所有包含 pop 指令的 gadget，在其地址之后都要添加 pop 的传输数据，同时在所有 gadget 最后包含一段
shellcode，最终溢出数据结构应该变为如下格式。
payload : padding + address of gadget 1 + param for gadget 1 + address of
gadget 2 + param for gadget 2 + …… + address of gadget n + shellcode
Fig 6. 包含多个 gadget 的溢出数据（修改后）
此处为了简单，先假定输入溢出数据不受“x00"字符的影响，所以 payload 可以直接包含 “x7dx00x00x00”（传给 eax
的参数125）。如果希望实现更为真实的操作，可以用多个 gadget 通过运算得到上述参数。比如可以通过下面三条 gadget 来给 eax 传递参数。
    pop eax; ret;         # pop stack top 0x1111118e into eax
    pop ebx; ret;         # pop stack top 0x11111111 into ebx
    sub eax, ebx; ret;    # eax -= ebx
解决完上述问题，我们就可以拼接出溢出数据，输入至程序来为程序调用栈开启可执行权限并执行 shellcode。同时，由于 ROP
方法带来的灵活性，现在不再需要痛苦地试探 shellcode 起始地址了。回顾整个输入数据，只有栈的分段地址需要获取确定地址。如果利用 gadget 读取
ebp 的值再加上某个合适的数值，就可以保证溢出数据都具有可执行权限，这样就不再需要获取确切地址，也就具有了绕过内存随机化的可能。
出于演示的目的，我们假设（简直是钦点）了所有需要的 gadget 的存在。在实际搜索及拼接 gadget 时，并不会像上面一样顺利，有两个方面需要注意。
第一，很多时候并不能一次凑齐全部的理想指令片段，这时就要通过数据地址的偏移、寄存器之间的数据传输等方法来“曲线救国”。举个例子，假设找不到下面这条
gadget
    pop ebx; ret;
但假如可以找到下面的 gadget
    mov ebx, eax; ret;
我们就可以将它和
    pop eax; ret;
组合起来实现将数据传输给 ebx 的功能。上面提到的用多个 gadget 避免输入“x00”也是一个实例应用。
第二，要小心 gadget 是否会破坏前面各个 gadget 已经实现的部分，比如可能修改某个已经写入数值的寄存器。另外，要特别小心 gadget 对
ebp 和 esp 的操作，因为它们的变化会改变返回地址的位置，进而使后续的 gadget 无法执行。
**0x40 Hijack GOT**
－－修改某个被调用函数的地址，让其指向另一个函数
根据上面副标题的说明，要完成的任务包括：在内存中修改某个函数的地址，使其指向另一个函数。为了便于理解，不妨假设修改 printf() 函数的地址使其指向
system()，这样修改之后程序内对 printf() 的调用就执行 system()
函数。要实现这个过程，我们就要弄清楚发生函数调用时程序是如何“找到”被调用函数的。
程序对外部函数的调用需要在生成可执行文件时将外部函数链接到程序中，链接的方式分为静态链接和动态链接。静态链接得到的可执行文件包含外部函数的全部代码，动态链接得到的可执行文件并不包含外部函数的代码，而是在运行时将动态链接库（若干外部函数的集合）加载到内存的某个位置，再在发生调用时去链接库定位所需的函数。
可程序是如何在链接库内定位到所需的函数呢？这个过程用到了两张表－－GOT 和 PLT。GOT 全称是全局偏移量表（Global Offset
Table），用来存储外部函数在内存的确切地址。GOT 存储在数据段（Data Segment）内，可以在程序运行中被修改。PLT
全称是程序链接表（Procedure Linkage Table），用来存储外部函数的入口点（entry），换言之程序总会到 PLT
这里寻找外部函数的地址。PLT 存储在代码段（Code Segment）内，在运行之前就已经确定并且不会被修改，所以 PLT
并不会知道程序运行时动态链接库被加载的确切位置。那么 PLT 表内存储的入口点是什么呢？就是 GOT 表中对应条目的地址。
Fig 7. PLT 和 GOT 表
等等，我们好像发现了一个不合理的地方，外部函数的内存地址存储在 GOT 而非 PLT 表内，PLT 存储的入口点又指向 GOT
的对应条目，那么程序为什么选择 PLT 而非 GOT 作为调用的入口点呢？在程序启动时确定所有外部函数的内存地址并写入 GOT 表，之后只使用 GOT
表不是更方便吗？这样的设计是为了程序的运行效率。GOT 表的初始值都指向 PLT
表对应条目中的某个片段，这个片段的作用是调用一个函数地址解析函数。当程序需要调用某个外部函数时，首先到 PLT 表内寻找对应的入口点，跳转到 GOT
表中。如果这是第一次调用这个函数，程序会通过 GOT 表再次跳转回 PLT 表，运行地址解析程序来确定函数的确切地址，并用其覆盖掉 GOT
表的初始值，之后再执行函数调用。当再次调用这个函数时，程序仍然首先通过 PLT 表跳转到 GOT 表，此时 GOT
表已经存有获取函数的内存地址，所以会直接跳转到函数所在地址执行函数。整个过程如下面两张图所示。
Fig 8. 第一次调用函数时解析函数地址并存入 GOT 表
Fig 9. 再次调用函数时直接读取 GOT 内的地址
上述实现遵循的是一种被称为 LAZY
的设计思想，它将需要完成的操作（解析外部函数的内存地址）留到调用实际发生时才进行，而非在程序一开始运行时就解析出全部函数地址。这个过程也启示了我们如何实现函数的伪装，那就是到
GOT 表中将函数 A 的地址修改为函数 B 的地址。这样在后面所有对函数 A 的调用都会执行函数 B。
那么我们的目标可以分解为如下几部分：确定函数 A 在 GOT 表中的条目位置，确定函数 B 在内存中的地址，将函数 B 的地址写入函数 A 在 GOT
表中的条目。
首先，如何确定函数 A 在 GOT 表中的条目位置？
程序调用函数时是通过 PLT 表跳转到 GOT 表的对应条目，所以可以在函数调用的汇编指令中找到 PLT 表中该函数的入口点位置，从而定位到该函数在 GOT
中的条目。
例如
    call 0x08048430 
就说明 printf 在 PLT 表中的入口点是在 0x08048430，所以 0x08048430 处存储的就是 GOT 表中 printf 的条目地址。
其次，如何确定函数 B 在内存中的地址？
如果系统开启了内存布局随机化，程序每次运行动态链接库的加载位置都是随机的，就很难通过调试工具直接确定函数的地址。假如函数 B
在栈溢出之前已经被调用过，我们当然可以通过前一个问题的答案来获得地址。但我们心仪的攻击函数往往并不满足被调用过的要求，也就是 GOT
表中并没有其真实的内存地址。幸运的是，函数在动态链接库内的相对位置是固定的，在动态库打包生成时就已经确定。所以假如我们知道了函数 A 的运行时地址（读取
GOT 表内容），也知道函数 A 和函数 B 在动态链接库内的相对位置，就可以推算出函数 B 的运行时地址。
最后，如何实现 GOT 表中数据的修改？
很难找到合适的函数来完成这一任务，不过我们还有强大的 ROP（DIY大法好）。假设我们可以找到以下若干条 gadget（继续钦点），就不难改写 GOT
表中数据，从而实现函数的伪装。ROP 的具体实现请回看上一章，这里就不再赘述了。
    pop eax; ret; # printf@plt -> eax
    mov ebx [eax]; ret;# printf@got -> ebx
    pop ecx; ret; # addr_diff = system - printf -> ecx
    add [ebx] ecx; ret; # printf@got += addr_diff
从修改 GOT 表的过程可以看出，这种方法也可以在一定程度上绕过内存随机化。
**0x50 防御措施**
介绍过几种栈溢出的基础方法，我们再来补充一下操作系统内有哪些常见的措施可以进行防御。首先，通常情况下程序在默认编译设置下都会取消栈上数据的可执行权限，这样简单的
shellcode
溢出攻击就无法实现了。其次，可以在操作系统内开启内存布局随机化（ASLR），这样可以增大确定堆栈内数据和动态库内函数的内存地址的难度。编译程序时还可以设置某些编译选项，使程序在运行时会在函数栈上的
ebp
地址和返回地址之间生成一个特殊的值，这个值被称为“金丝雀”（关于这个典故，请大家自行谷歌）。这样一旦发生了栈溢出并覆盖了返回地址，这个值就会被改写，从而实现函数栈的越界检查。最后值得强调的是，尽可能写出安全可靠的代码，不给栈溢出提供写入越界的可能。
**0x60 全篇小结**
本文简要介绍了栈溢出这种古老而经典的技术领域，并概括描述了四种入门级的实现方法。至此我们专栏的第一讲就全部结束啦，接下来专栏会陆续放出计算机安全相关的更多文章，内容也会涵盖网络安全、Web渗透、密码学、操作系统，还会有ctf
比赛题解等等……
最后感谢大家的关注，让我们一起学习，共同进步！
**References：**
《Hacking: Art of Exploitation》
[2015 | sploitF-U-N](http://https://sploitfun.wordpress.com/2015/)
**传送门**
* * *
[**【技术分享】手把手教你栈溢出从入门到放弃（上）**](http://bobao.360.cn/learning/detail/3717.html)