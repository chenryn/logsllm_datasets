ticated requests to third-parties. Because the request is
triggered from within the extension, different directives
apply, thus allowing cookies to be attached. A possible
mitigation for this particular issue could be to disable the
functionality of triggering requests from within PDFium.
However, this behavior is not unique to PDFium, and
other browser extensions may also be exploited in order
to send arbitrary third-party requests that bypass imposed
cookie policies. As such, we propose that browsers strip
cookies from all requests initiated by extensions as a de-
fault policy. As this may interfere with the operations of
certain extensions, exclusions should be made possible,
for instance by deﬁning a list of cookie-enabled domains
in the extension manifest.
Next to blocking third-party cookies, we also analyzed
the built-in tracking protection for Firefox. Interestingly,
we found that for each category of mechanisms that may
trigger requests, excluding JavaScript in PDFs, there ex-
ists at least one technique that can bypass the built-in
tracking protection. A manual analysis of the Firefox
source code showed that these bypasses are caused by
the retroactive manner in which tracking protection is
implemented. More speciﬁcally, although the request-
validation mechanism is applied in a central location, the
validation process is only triggered when a speciﬁc ﬂag
is set, which requires modiﬁcations to every functional-
ity that may trigger requests. While Mozilla is already
aware12 of some of the bypasses we uncovered and is
working to mitigate these, we believe that our framework
will assist in identifying bypass techniques, even when
these are difﬁcult to detect from the millions of lines of
code.
12https://bugzilla.mozilla.org/show_bug.cgi?id=
1207775
162    27th USENIX Security Symposium
USENIX Association
6.2 Browser extensions
For anti-tracking extensions and ad blockers, it is cru-
cial that all requests can be intercepted and blocked or
altered. From the results, summarized in Table 2 and Ta-
ble 3, it is clear that in the current state this is not the
case. In fact, we found that for every analyzed browser
extension there exists at least one technique that can be
used to circumvent the extension to send an authenticated
third-party request. Moreover, we found that the results
of the evaluated browser extensions are very disparate,
even for extensions that target the same browser. For in-
stance, out of the 15 ad blocking extensions for Google
Chrome, at most 3 exhibited a similar behavior.
In part, the disparity of results can be explained by
the frequent introduction of new features to browsers,
which may affect the WebExtension API or cause un-
foreseen effects. For instance, support for intercepting
WebSockets in browser exceptions was only added years
after the feature became available, and after it had ac-
tively been exploited to circumvent ad blockers [11].
Furthermore, AppCache caused one of the parameters
of the onBeforeRequest API to exhibit a different be-
havior, which was unexpected by most browser exten-
sions. As a result, requests triggered by AppCache man-
aged to bypass the vast majority of browser extensions.
The same change was introduced to Chromium-based
browsers when Service Workers were implemented. As a
result, most extensions for Chrome and Opera can be cir-
cumvented by triggering requests from Service Workers,
whereas all extensions Firefox successfully block these
third-party requests. This shows that adding new fea-
tures to a browser may have unforeseen side-effects on
the extensions that rely on the provided APIs.
When new browser features are proposed and imple-
mented, test cases that include the new functionality can
be added to our framework, allowing browser vendors
and extension developers to automatically detect and
possibly mitigate unforeseen side-effects. Moreover, be-
cause all anti-tracking and ad blocking browser exten-
sions share a common core functionality (namely, inter-
cepting and altering or blocking requests), we propose
that all these extensions use a speciﬁcally purposed API
that is actively maintained. Driven by the high popular-
ity of these browser extensions, this API could be added
to the WebExtension API. Alternatively, this API could
be offered in the form of an extension module, which of
course needs to be maintained and requires all browser
extensions to update this module.
7 Related Work
Policy
inconsistencies Multiple
studies have shown that browser implementations often
exhibit inconsistencies concerning security or privacy
implementation
policies. Aggarwal et al. [3] discovered privacy viola-
tions for private browsing implementations of modern
browsers through both manual and automatic analysis.
On top of that, they showed that browser extensions
and plug-ins can invalidate the privacy guarantees of
private browsing. Schwenk et al. [41] implemented
a web application that automatically evaluates the
SOP implementation of browsers.
In that regard, they
showed that browser behaviors differ due to the lack of
a formal speciﬁcation. Singh et al. [43] pointed out the
incoherencies in web browser access control policies.
In an effort to help browser vendors ﬁnd the balance
between keeping incoherency-conﬁrming features and
the breakage of websites as a consequence of removing
them, they developed a measurement system. Jackson
and Barth [21], too, showed that newly shipped browser
features can undermine existing security policies.
In
particular,
they discuss features affected by origin
contamination and propose three approaches to prevent
vulnerabilities caused by the introduction of
these
features. Zheng et al. [55] question the integrity of
cookies by revealing cookie injection vulnerabilities for
major sites like those of Google and Bank of America.
They showed that
implementation inconsistencies in
browsers can aggravate these vulnerabilities.
Ad blocking circumventions
Iqbal et al. [20] exam-
ined methods that are used to circumvent ad blocking in
the wild. They discuss the limitations of anti-adblock
ﬁlter lists and proposed a machine learning approach to
identify ad block bypasses. Storey at al. [45] also pro-
posed new approaches to ad blocking, countering the ex-
isting ﬂaws of traditional ad blocking methods. Their
new techniques include recognition of ads trough the use
of visual elements, stealth ad blocking and signature-
based active ad blocking.
Trackers in the wild Roesner et al. [40] performed
an in-depth empirical investigation of third-party track-
ers. Based on the results of this investigation, they pro-
posed a classiﬁcation for third-party trackers and devel-
oped a client-side application for detecting and classi-
fying trackers. A large-scale crawl was performed by
Englehardt and Narayanan [14] to gather insights about
tracking behaviors in the wild. They found that track-
ing protection tools such as Ghostery proved effective
for blocking undesirable third-parties, except for obscure
trackers.
8 Conclusion
In this work, we introduce a framework that is able
to perform an automated and comprehensive evalua-
tion of cross-site countermeasures and anti-tracking pol-
icy implementations. By evaluating 7 browsers and 46
browser extensions, we ﬁnd that virtually every browser-
or extension-enforced policy can be bypassed. We traced
USENIX Association
27th USENIX Security Symposium    163
back the origin of these bypasses to a variety of different
causes. For instance, we found that same-site cookies
could still be attached to cross-site requests by levering
the prerendering functionality, which did not take these
policies correctly into account.
Furthermore, a design ﬂaw in Chromium-based
browsers enabled a bypass for both the built-in third-
party cookie blocking option and tracking protection
provided by extensions. Through JavaScript embedded
in PDFs, which are rendered by a browser extension,
cookie-bearing POST requests can be sent to other do-
mains, regardless of the imposed policies. Additionally,
we discovered that not every implementation of the We-
bExtension API guarantees interception of every request.
This makes it impossible for extension developers to be
completely thorough in blocking or modifying undesir-
able requests.
Overall, we found that browser implementations ex-
hibited a highly inconsistent behavior with regard to en-
forcing policies on third-party requests, resulting in a
high number of bypasses. This demonstrates the need
for browsers, which continuously add new features, to
be thoroughly evaluated.
The results of this research suggest that policy imple-
mentations are prone to inconsistencies. That is why we
think that, as future research, the framework could be
extended to evaluate other policy implementations (e.g.
LocalStorage API [28], Content Security Policy [1]). In
addition to that, the evaluation of mobile browsers could
also be an interesting direction. This includes the mobile
counterparts of major browsers for iOS and Android, but
also mobile exclusives like Firefox Focus [36].
Acknowledgements
We would like to thank the reviewers for their insight-
ful comments. This research is partially funded by the
Research Fund KU Leuven.
References
[1] Content security policy level 3. W3C working draft, W3C, Sept.
2016. https://www.w3.org/TR/2016/WD-CSP3-20160913/.
[2] ACAR, G., EUBANK, C., ENGLEHARDT, S., JUAREZ, M.,
NARAYANAN, A., AND DIAZ, C. The Web Never Forgets: Per-
sistent Tracking Mechanisms in the Wild. Proceedings of the
2014 ACM SIGSAC Conference on Computer and Communica-
tions Security - CCS ’14 (2014), 674–689.
[3] AGGARWAL, G., BURSZTEIN, E., JACKSON, C., AND BONEH,
D. An analysis of private browsing modes in modern browsers. In
Proceedings of the 19th USENIX Conference on Security (Berke-
ley, CA, USA, 2010), USENIX Security’10, USENIX Associa-
tion, pp. 6–6.
[4] AYENSON, M., WAMBACH, D., SOLTANI, A., GOOD, N.,
AND HOOFNAGLE, C. Flash cookies and privacy II: Now with
HTML5 and ETag respawning.
[5] BARTH, A. HTTP State Management Mechanism. RFC 6265,
RFC Editor, April 2011.
[6] BARTH, A., JACKSON, C., AND MITCHELL, J. C. Robust de-
fenses for cross-site request forgery. In Proceedings of the 15th
ACM Conference on Computer and Communications Security
(New York, NY, USA, 2008), CCS ’08, ACM, pp. 75–88.
[7] BLOG, M. Firefox now offers a more private browsing ex-
https://blog.mozilla.org/blog/2015/11/
perience.
03/firefox-now-offers-a-more-private-browsing-
experience/, 2015.
[8] BLOG, M. S.
Supporting same-site cookies in ﬁrefox
60. https://blog.mozilla.org/security/2018/04/24/
same-site-cookies-in-firefox-60/, 2018.
[9] BORTZ, A., AND BONEH, D. Exposing private information by
timing web applications. In Proceedings of the 16th International
Conference on World Wide Web (New York, NY, USA, 2007),
WWW ’07, ACM, pp. 621–628.
[10] BUGREPLAY.
WebSockets.
pornhub-bypasses-ad-blockers-with-websockets-
cedab35a8323, 2016.
Pornhub
blockers with
https://medium.com/thebugreport/
bypasses
ad
[11] CHROMIUM. chrome.webRequest.onBeforeRequest doesn’t in-
tercept WebSocket requests. https://bugs.chromium.org/
p/chromium/issues/detail?id=129353, 2012.
[12] COMSCORE. The impact of cookie deletion on site-server and
ad-server metrics in Australia, January 2011.
[13] ECKERSLEY, P. How unique is your web browser? In Proceed-
ings of the 10th International Conference on Privacy Enhanc-
ing Technologies (Berlin, Heidelberg, 2010), PETS’10, Springer-
Verlag, pp. 1–18.
[14] ENGLEHARDT, S., AND NARAYANAN, A. Online tracking: A
1-million-site measurement and analysis. In Proceedings of the
2016 ACM SIGSAC Conference on Computer and Communica-
tions Security (New York, NY, USA, 2016), CCS ’16, ACM,
pp. 1388–1401.
[15] FIELDING, R., GETTYS, J., MOGUL, J., FRYSTYK, H., MAS-
INTER, L., LEACH, P., AND BERNERS-LEE, T. Hypertext trans-
fer protocol – http/1.1. RFC 2616, RFC Editor, June 1999.
[16] GELERNTER, N., AND HERZBERG, A. Cross-site search attacks.
In Proceedings of the 22nd ACM SIGSAC Conference on Com-
puter and Communications Security (2015), ACM, pp. 1394–
1405.
[17] GITHUB. PDF.js. https://mozilla.github.io/pdf.js/.
[18] GOOGLE SOURCE.
https://pdfium.
PDFium.
googlesource.com/pdfium/.
[19] GRIGORIK, I., AND WEST, M. Reporting API. Tech. rep.,
November 2017.
[20] IQBAL, U., SHAFIQ, Z., AND QIAN, Z. The ad wars: Ret-
rospective measurement and analysis of anti-adblock ﬁlter lists.
pp. 171–183.
[21] JACKSON, C., AND BARTH, A. Beware of ﬁner-grained origins.
[22] JANG, D., TATLOCK, Z., AND LERNER, S. Establishing browser
In Pro-
security guarantees through formal shim veriﬁcation.
ceedings of the 21st USENIX conference on Security symposium
(2012), USENIX Association, pp. 8–8.
[23] KONTAXIS, G., AND CHEW, M. Tracking Protection in Fire-
fox For Privacy and Performance. In IEEE Web 2.0 Security &
Privacy (2015).
[24] LEKIES, S., STOCK, B., WENTZEL, M., AND JOHNS, M. The
unexpected dangers of dynamic javascript. In 24th USENIX Secu-
rity Symposium (USENIX Security 15) (Washington, D.C., 2015),
USENIX Association, pp. 723–735.
164    27th USENIX Security Symposium
USENIX Association
[25] LERNER, B. S., ELBERTY, L., POOLE, N., AND KRISHNA-
MURTHI, S. Verifying web browser extensions compliance with
private-browsing mode. In European Symposium on Research in
Computer Security (2013), Springer, pp. 57–74.
[44] SOLTANI, A., CANTY, S., MAYO, Q., THOMAS, L., AND
HOOFNAGLE, C. J. Flash cookies and privacy. In AAAI spring
symposium: intelligent information privacy management (2010),
vol. 2010, pp. 158–163.
[26] MAYER, J. R., AND MITCHELL, J. C. Third-party web tracking:
Policy and technology. In 2012 IEEE Symposium on Security and
Privacy (May 2012), pp. 413–427.
Platform status.
[27] MICROSOFT.
https://developer.
[45] STOREY, G., REISMAN, D., MAYER, J., AND NARAYANAN,
A. The future of ad blocking: An analytical framework and new
techniques.
[46] THE CHROMIUM PROJECTS.
Chrome Prerendering.
microsoft.com/en-us/microsoft-edge/platform/
status/samesitecookies/, 2018.
https://www.chromium.org/developers/design-
documents/prerender, 2011.
[28] MOZILLA DEVELOPER NETWORK.
LocalStorage.
https://developer.mozilla.org/en-US/docs/Web/
API/Storage/LocalStorage.
[29] MOZILLA DEVELOPER NETWORK.
Beacon API.
https://developer.mozilla.org/en-US/docs/Web/
API/Beacon_API, 2017.
[30] MOZILLA DEVELOPER NETWORK.
Fetch API.
https://developer.mozilla.org/en-US/docs/Web/
API/Fetch_API, 2017.
[31] MOZILLA DEVELOPER NETWORK.
webRequest.
https://developer.mozilla.org/en-US/Add-
ons/WebExtensions/API/webRequest, 2017.
[32] MOZILLA
DEVELOPER
NETWORK.
WebSocket.
https://developer.mozilla.org/en-US/docs/Web/
API/WebSocket, 2017.
[33] MOZILLA DEVELOPER NETWORK.
XMLHttpRequest.
https://developer.mozilla.org/en-US/docs/Web/
API/XMLHttpRequest, 2017.
[34] MOZILLA DEVELOPER NETWORK.
EventSource.
https://developer.mozilla.org/en-US/docs/Web/
API/EventSource, 2018.
[35] MOZILLA DEVELOPER NETWORK. Using the application
https://developer.mozilla.org/en-US/docs/
cache.
Web/HTML/Using_the_application_cache, 2018.
[36] MOZILLA SUPPORT.
Firefox Focus.
https://support.
mozilla.org/en-US/products/focus-firefox.
[37] MOZILLA WIKI. https://wiki.mozilla.org/Security/
Safe_Browsing.
[38] NOTTINGHAM, M. Web linking. RFC 5988, RFC Editor, Octo-
ber 2010.
[39] PIETRASZAK, M. Browser extensions. Draft community group
report, W3C, July 2017. https://browserext.github.io/browserext/.
[40] ROESNER, F., KOHNO, T., AND WETHERALL, D. Detect-
ing and defending against third-party tracking on the web.
In
Proceedings of the 9th USENIX Conference on Networked Sys-
tems Design and Implementation (Berkeley, CA, USA, 2012),
NSDI’12, USENIX Association, pp. 12–12.
[41] SCHWENK, J., NIEMIETZ, M., AND MAINKA, C. Same-origin
policy: Evaluation in modern browsers. In 26th USENIX Secu-
rity Symposium (USENIX Security 17) (Vancouver, BC, 2017),
USENIX Association, pp. 713–727.
[42] SHARMA, R.
Preventing cross-site attacks using same-site
https://blogs.dropbox.com/tech/2017/03/
cookies.
preventing-cross-site-attacks-using-same-site-
cookies/, 2017.
[43] SINGH, K., MOSHCHUK, A., WANG, H. J., AND LEE, W. On
the incoherencies in web browser access control policies. In Pro-
ceedings of the 2010 IEEE Symposium on Security and Privacy
(Washington, DC, USA, 2010), SP ’10, IEEE Computer Society,
pp. 463–478.
[47] VAN GOETHEM, T., CHEN, P., NIKIFORAKIS, N., DESMET,
L., AND JOOSEN, W. Large-scale security analysis of the web:
In International Conference on Trust
Challenges and ﬁndings.
and Trustworthy Computing (2014), Springer, pp. 110–126.
[48] VAN GOETHEM, T., JOOSEN, W., AND NIKIFORAKIS, N. The
clock is still ticking: Timing attacks in the modern web. In ACM
Conference on Computer and Communications Security (2015).
[49] WEBKIT. Intelligent Tracking Prevention. https://webkit.
org/blog/7675/intelligent-tracking-prevention/.
[50] WEST, M.
’samesite’ cookie attribute.
https://www.