**作者：Longofo@知道创宇404实验室**  
**日期：2022年1月18日**
上周看到Apache官方又发布了一个[Apache Dubbo
Hessian2的漏洞](https://lists.apache.org/thread/1mszxrvp90y01xob56yp002939c7hlww)，来看看这个描述：
之前有段时间Dubbo的反序列化已经被蹂躏过n次了，而这个解析错误时看起来总有那么点不一样，想想这个漏洞即使比较鸡肋，也必然它值得借鉴的地方。下面来看看这个漏洞，以及Hessian比较处理时比较有意思的地方。
距离之前Dubbo的漏洞也有一段时间了，现在也差不多快忘了，好在之前写过一篇[Dubbo的分析](https://paper.seebug.org/1131/)，温故一下也能回忆起来。
## 补丁分析
这个漏洞修复的不是Apache Dubbo，修复的地方在[hessian-lite](https://github.com/apache/dubbo-hessian-lite/commit/a35a4e59ebc76721d936df3c01e1943e871729bd#)：
注意这个 **commit：Remove toString calling**
，看修复的几个类，都是在抛异常中删除对象的拼接，这里存在字符串拼接的隐式`.toString`调用。
最后还有一个DENY_CLASS禁用了某些包前缀，大概就是触发toString调用链的某些部分。
## 漏洞环境
  * Apache Dubbo 2.7.14
  * JDK8u102
  * demo拉取官方的[dubbo-samples-basic](https://github.com/apache/dubbo-samples/tree/master/dubbo-samples-basic)
## 漏洞分析
### Abstract Deserializer
看上面补丁，有这样几个类：AbstractDeserializer、AbstractListDeserializer、AbstractMapDeserializer，它们修复之前的代码也出奇的一致：
    @Override
        public Object readObject(AbstractHessianInput in)
                throws IOException {
            Object obj = in.readObject();
            String className = getClass().getName();
            if (obj != null)
                throw error(className + ": unexpected object " + obj.getClass().getName() + " (" + obj + ")");
            else
                throw error(className + ": unexpected null value");
        }
这怎么看都不对劲，输入流读出对象，对象不为空抛异常！！！这没有上下文看起来多少带点大病。抽象类不能被实例化，看看有没有子类没有重写这个方法，如果没有重写或重写并调用了父类这个方法，那么就能触发`.toString()`的调用了。
找了一圈，这三个抽象类的所有子类，都重写了这个方法，并且都不会调用父类地方法，那么这里的修复猜测可能是用户会继承这个类然后没有重写的可能，就不考虑这种情况了。
### Hessian2Input
#### 通往obj.toString()
补丁中还有`com.alibaba.com.caucho.hessian.io.Hessian2Input.java`的修复，这类名怎么看都是修复在大动脉上：
`.expect()`中有个读取readObject()的操作，接着就是`obj.toString`的调用，`.expect()`在Hessian2Input类中有多处使用。
如何确定官方提供的dubbo-samples-basic使用的Hessian2，搜索Hessian2Input关键词的类，有Hessian2Input和Hessian2ObjectInput，猜测一下在大概率会被调用的函数上打上断点，如果不确定可以尝试在这两个类所有函数上打上断点。
经过测试，最先被调用的是`com.alibaba.com.caucho.hessian.io.Hessian2Input#readString()`
调用栈如下：
    readString:1611, Hessian2Input (com.alibaba.com.caucho.hessian.io)
    readUTF:90, Hessian2ObjectInput (org.apache.dubbo.common.serialize.hessian2)
    decode:111, DecodeableRpcInvocation (org.apache.dubbo.rpc.protocol.dubbo)
    decode:83, DecodeableRpcInvocation (org.apache.dubbo.rpc.protocol.dubbo)
    decode:57, DecodeHandler (org.apache.dubbo.remoting.transport)
    received:44, DecodeHandler (org.apache.dubbo.remoting.transport)
    run:57, ChannelEventRunnable (org.apache.dubbo.remoting.transport.dispatcher)
    runWorker:1142, ThreadPoolExecutor (java.util.concurrent)
    run:617, ThreadPoolExecutor$Worker (java.util.concurrent)
    run:41, InternalRunnable (org.apache.dubbo.common.threadlocal)
    run:745, Thread (java.lang)
在`com.alibaba.com.caucho.hessian.io.Hessian2Input#readString()`中就有`.expect(）`的调用，这不巧了吗（并不，一开始并没有在readString()上下断，更令人关注的难道不是readObject()吗，但是有时候你不关注的反而更奇妙），因为刚好在上两层栈，就是整个Dubbo
rpc调用处理的decode函数：
得到Hessian2InputObject，调用readUTF获取版本号，这里是Hessian2反序列化的开始。接下来就是如何在readString()中调用到`.expect()`了，然后触发`expect()`中的readObject()。
看下`readString()`处理：
    public String readString() throws IOException {
            int tag = this.read();
            int ch;
            switch(tag) {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
                this._isLastChunk = true;
                this._chunkLength = tag - 0;
                this._sbuf.setLength(0);
                while((ch = this.parseChar()) >= 0) {
                    this._sbuf.append((char)ch);
                }
                return this._sbuf.toString();
            case 32:
            case 33:
            ...
            case 67:
            ...
            case 127:
            default:
                throw this.expect("string", tag);
            case 48:
            case 49:
            case 50:
            ...
            ...省略
            case 253:
            case 254:
            case 255:
                return String.valueOf((tag - 248 代码调用
从上面可以看出，我们要到达`obj.toString()`，就要构造畸形数据包改变正常流向。一开始抓包看了下，发送的包还挺多的，这要构造起来不得把dubbo翻一遍。后来想想，服务端既然用Hessian2Input处理的数据，那么客户端可能就是用Hessian2Output处理的，经过一些测试，我重写了Apache
Dubbo部分代码改变Hessian2Input.readString()走向，以及能成功的在expect方法中readObject。
重写`com.alibaba.com.caucho.hessian.io.Hessian2Output#writeString(java.lang.String)`:
    public void writeString(String value) throws IOException {
            int offset = this._offset;
            byte[] buffer = this._buffer;
            if (4096  32768; strOffset += sublen) {
                    sublen = 32768;
                    offset = this._offset;
                    if (4096 > 8);
                    buffer[offset + 2] = (byte) sublen;
                    this._offset = offset + 3;
                    this.printString(value, strOffset, sublen);
                    length -= sublen;
                }
                offset = this._offset;