properties. They are commitment recoverable, which means that
commitments can be efﬁciently and publicly computed from
the public key, the challenge, and the response. Furthermore,
they have (computationally) unique responses, meaning that
for a ﬁxed instance of the protocol and commitments and
challenges, there exists at most one response such that the
veriﬁer will accept the conversation (or a second response is
computationally infeasible to ﬁnd). More formally:
Deﬁnition 7 ((Computationally) unique responses CUR). Let
CID = (KGen, P, V) be a canonical identiﬁcation protocol.
We say that CID has cur-computationally unique responses
or CUR, if for any (pk, sk) $←− KGen(pp), com $←− P1(sk) and
ch $←− V1 the probability of an adversary being able to output
(cid:3)
two responses rsp and rsp
such that V2(pk, com, ch, rsp) = 1
) = 1 is at most cur. If cur = 0 we
and V2(pk, com, ch, rsp
say that CID has unique responses.
B. The Fiat-Shamir Transform
(cid:3)
Finally, we show the transform from secure identiﬁcation
protocols to secure signature schemes. In this work, we follow
the approach by Abdalla et al. [27] when applying the Fiat-
Shamir transform, i.e., we start from a canonical identiﬁcation
protocol that is secure against impersonation under passive
attack and model the hash function as a random oracle (cf.
Section III-C) to show the existential unforgeability of the
resulting signature scheme.
Let CID = (CID.KGen, P, V) be an IMP-PA-secure canon-
ical identiﬁcation protocol and let H : {0, 1}(cid:3) → {0, 1}λ be a
cryptographic hash function with output length λ modeled as a
random oracle. Then the signature scheme FS [CID, H] =
(FS.KGen, Sign, Vfy) constructed as described in Fig. 3 is
existentially unforgeable under chosen message attacks.
FS.KGen(pp):
1 (pk, sk) $←− CID.KGen(pp)
2 return (pk, sk)
Vfy(pk, m, σ):
8 (com, ch, rsp) ← σ
9 return (cid:2)ch = H(com, m) ∧
V2(pk, com, ch, rsp)(cid:3)
Sign(sk, m):
3 (com, st) $←− P1(sk)
4 ch ← H(com, m)
5 rsp $←− P2(ch, st)
6 σ ← (com, ch, rsp)
7 return σ
Fig. 3. Signature scheme FS [CID, H] = (FS.KGen, Sign, Vfy) resulting
from the (transcript variant of) Fiat-Shamir applied to the canonical identiﬁca-
tion protocol CID = (CID.KGen, P, V).
Note that there are different variants of the Fiat-Shamir
transform in terms of how the signatures are constructed. The
transform shown in Fig. 3 is of the transcript variant as used,
e.g., by Pointcheval and Stern [25], where the signature consists
of the entire conversation of the identiﬁcation scheme.
Schnorr signatures as described in Appendix A are of
the challenge variant where the signature consists only of
the challenge and the response, i.e., σ ← (ch, rsp). This
requires that there exists an algorithm that can reconstruct
the commitment com from the public key, the challenge, and
the response. Further signatures that are of the challenge variant
are the original work by Fiat and Shamir, GQ signatures [39]
and Okamoto signatures [40]. An in-depth treatment of these
variants, including a third variant, the commitment variant,
can be found in Backendal et al. [41]. As we will later see,
Ed25519 signatures are a deterministic variant of Schnorr
signatures but in the commitment-variant of the Fiat-Shamir
transform. In order to make Fiat-Shamir signatures as described
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:11:29 UTC from IEEE Xplore.  Restrictions apply. 
1663
in Fig. 3 deterministic, P1 is derandomized by using H(sk, m)
as randomness during commitment generation.
C. The Random Oracle Methodology
When applying the Fiat-Shamir transform, we do this in the
so-called random oracle model. This model was ﬁrst introduced
by Bellare and Rogaway [26] and enabled security proofs for
many efﬁcient schemes that previously had eluded the provable
security paradigm. It does so by representing a hash function
in a cryptographic scheme as an idealized random function (the
random oracle). With this idealization in place, an adversary
can only evaluate the hash function H on input x, if it queries
this random oracle on x. It is no longer able to simply evaluate
the hash function locally. In particular, this allows us to “peek”
at the adversary’s inputs to the hash function, a property of the
model that is often referred to as extractability. When queried
on input x, the random oracle then returns uniformly random
answers from the range of H for each input. For each new query
a fresh uniformly random output is sampled, but just like for
real hash functions, repeated queries are answered consistently,
i.e., the same inputs yield the same outputs. In the Fiat-Shamir
transform another (optional) property of the random oracle
is used, namely its programmability: if the adversary queries
some input x for the ﬁrst time, we can set the value H(x) to a
speciﬁc, freely-chosen output value y as long as it is correctly
distributed and does not collide with previously set outputs.
Note that when our proofs are in the random oracle model
for hash function H, the security notions introduced previously
get the extra query parameter QH of the maximal number
of queries the adversary makes to the random oracle. For
example, for a signature scheme in the random oracle model
we will speak of (t, , Qs, QH)-EUF-CMA security instead of
(t, , Qs)-EUF-CMA security.
D. Elliptic Curves
Lastly we brieﬂy recap the main theory of elliptic curves
relevant for this paper. For a more in-depth treatment of speciﬁc
concepts and constructions, we refer the interested reader to,
e.g., [43], [44]. We begin by deﬁning elliptic curves over a
ﬁnite ﬁeld Fq, which are the most common types of elliptic
curves in cryptography:
Deﬁnition 8 (Elliptic curve). Let q ≥ 5 be a prime. An elliptic
curve E deﬁned over the ﬁnite ﬁeld Fq is an equation of the
form y2 = x3 +ax+b. with a, b ∈ Fq such that 4a3 +27b2 (cid:7)= 0.
In elliptic-curve cryptography, the group in question is the
set of points on the elliptic curve E.
Deﬁnition 9 (Points on E). Let E(Fq) be the set of pairs
(x, y) ∈ Fq × Fq satisfying the elliptic curve equation. Let O
denote a special point, the so-called point at inﬁnity. Then the
set E(Fq) := {(x, y)|x, y ∈ Fq ∧ y2 = x3 + ax + b} ∪ {O}
denotes the points on the elliptic curve E.
With an adequately deﬁned addition operation “+” E(Fq)
forms a group with neutral element (0, 1). The multiplication
of a curve point P with an integer n is deﬁned as adding P n
where 0P := O.
times to itself, i.e., nP := P + P + ··· + P
(cid:7)
(cid:5)(cid:6)
(cid:4)
n times
For brevity, we often write E instead of E(Fq) if the underlying
ﬁeld is clear from context.
.
Further Deﬁnitions: The number of points on an elliptic
curve E over Fq is called the order of the curve and is denoted
by |E(Fq)|. We call an element B that generates a cyclic
subgroup the base point and write P ∈ (cid:10)B(cid:11) to indicate that P
is an element of the subgroup generated by B. For an element
B, we overload notation and write |B| to denote its order, i.e.,
the smallest integer n such that nB = O. If B generates a
subgroup of E(Fq), we deﬁne the cofactor to be the integer
|E(Fq)|
|B|
1) Different Forms of Curves: There exist several different
forms of elliptic curve equations, such as Weierstraß, Mont-
gomery or Edwards form. Most relevant for this paper are
twisted Edwards curves [45] which are deﬁned over a ﬁnite
ﬁeld Fq with q > 3 prime with additional parameter a (the
twist) via the curve equation ET Ed : ax2 + y2 = 1 + dx2y2,
where a, d ∈ Fq with a, d (cid:7)= 0 and a (cid:7)= d.
Addition “+” on ET Ed(Fq) is deﬁned as follows. Let P =
(x1, y1), Q = (x2, y2) ∈ ET Ed(Fq), then P + Q = (x3, y3) is
deﬁned as
x3 =
x1y2 + x2y1
1 + dx1x2y1y2
,
y3 =
y1y2 − ax1x2
1 − dx1x2y1y2
.
Note that if a is a square in Fq and d is non-square in Fq,
then the addition operation is complete and (ET Ed(Fq), +) is
a group with neutral element (0, 1). The inverse −P of a point
P = (x, y) ∈ ET Ed(Fq) is (−x, y).
The twisted Edwards curve E underlying the Ed25519
constructions, which we discuss in more detail in the next
section, is birationally equivalent to curve25519 introduced
by Bernstein [46], which is of the Montgomery form and due to
its efﬁcient arithmetic implementation yields very performant
constructions. curve25519 is deﬁned over the ﬁnite ﬁeld Fq
with q = 2255−19 prime via the curve equation curve25519:
y2 = x3 + 486662x2 + x.
2) The Elliptic Curve Discrete Logarithm Problem: The
security of Ed25519 signatures will ultimately be reduced
to a common complexity-theoretic hardness assumption in
cryptography: the discrete logarithm problem.
Deﬁnition 10 (ECDLP). Let E be an elliptic curve deﬁned
over a ﬁnite ﬁeld Fq and let B ∈ E(Fq) be a point of order n.
Let P ∈ (cid:10)B(cid:11). Then the elliptic curve discrete-log problem is
to ﬁnd an integer 0 ≤ k  L
(SEE TABLE II) SO THE LATTER CHECKS ARE STRICTER. EUF-CMA: EXISTENTIAL UNFORGEABILITY; SUF-CMA: STRONG UNFORGEABILITY; S-UEO
AND M-S-UEO DENOTE RESILIENCE AGAINST KEY SUBSTITUTION ATTACKS; MBS: MESSAGE BOUND SECURITY, ENSURING A SIGNATURE VERIFIES A
UNIQUE MESSAGE, EVEN FOR MALICIOUS KEYS.
KGen(pp):
1 k $←− {0, 1}b
2 h ← H(k)
3 s ← 2n +
4 A ← sB
5 return (A, k)
(cid:2)n−1
i=c 2ih[i]
(cid:2)n−1
Sign(k, m):
6 h ← H(k)
7 s ← 2n +
8 r ← H(h[b], . . . , h[2b − 1], m)
9 R ← rB
10 S ← (r + H(R, A, m)s) mod L
11 return σ = (R, S)
i=c 2ih[i]
Vfy(A, σ = (R, S), m):
12 Check R, A ∈ E
13 Variant Speciﬁc Checks
14 return Checks succeed ∧ (cid:2)2cSB = 2cR + 2cH(R, A, m)A(cid:3)
Fig. 4. Generic description of the Ed25519 signature scheme algorithms
KGen, Sign, and Vfy. Note that the highlighted line (13) varies depending
on the version of Ed25519 and the appropriate check is listed in Table I.
IV. ED25519 SIGNATURES
In this section we describe how the Ed25519 [1], [7]
signature scheme operates in detail, unravel its relationship
with Schnorr signatures and why proofs for Schnorr are not
directly applicable to Ed25519. We also describe several of the
proposed variants of Ed25519, which target stronger security
properties than provided by the original formulation.
We deﬁne the generic signature scheme Ed25519 in Fig. 4.
Part of the generic scheme description, highlighted on line 13
in Fig. 4, is replaced in the variant schemes. We summarise
these variations in Table I and discuss them further below. The
various parameters common to all variants are listed in Table II.
These parameters include those necessary to deﬁne the elliptic
curve E over which the signature scheme operates and the
hash function used.
Encodings: Integers mod L are encoded as as b-bit strings
in little endian format. Elliptic curve points (x, y) are encoded
as a (b − 1)-bit little-endian encoding of y, followed by a sign
bit which is 1 if and only if x is negative. We note an oft-
omitted property of the encoding scheme: the ﬁeld element that
represents y is encoded as a (b−1) = 255-bit string, but the size
of the ﬁeld is q = 2255−19, yielding a larger space of encodings
than actual elements. Similarly, the S part of the signature is
expected to be a b-bit integer, but is necessarily reduced mod L
prior to use in the signature veriﬁcation. These details turn out
to have substantial consequences when showing security of
the scheme and we will highlight this in the respective proofs.
In places, the original presentation [1] and its accompanying
source code disagree on the necessary tests, e.g., the range
of L. As the source code is the basis of the most popular
Ed25519 implementations, we treat it as authoritative.
A. Variants of Ed25519
Recall that we refer to the original, and currently most widely
deployed formulation of Ed25519 as Ed25519-Original. Sev-
eral alternative speciﬁcations have also been published which
largely maintain wire compatibility with Ed25519-Original,
but substantially alter the security properties of the scheme.
In particular, variants have been published by the IETF [7],
NIST [47], and the ZCash Foundation [9]. Furthermore,
LibSodium [8], one of the most popular cryptographic libraries,
uses a set of additional checks that render it a de-facto standard.
Another variant is the use of Ristretto encodings [48] for
Ed25519. Whilst this appears promising, the draft RFC [49] is
still under active development and we do not analyze it here.
We note that the Signal Foundation [34] have also proposed
a variant with enhanced resistance to side-channel attacks
and fault resistance during signature generation. However, this
variant operates similarly to Ed25519-Original with regards
to signature veriﬁcation and consequently we do not treat it
separately.
1) Pre-Hashing Variants: The IETF-standardised RFC
8032 [7] and the NIST draft standard [47] support a pre-hashing
mode for their variants. This mode allows implementations to
sign large messages whilst only needing to perform a single
pass over the message. The signed message value m is replaced
with the pre-hash PH(m), where PH is a hash function. The
IETF speciﬁcation explicitly recommends against the use of
this mode, stressing it is included only to support legacy signing
interfaces. Consequently, we do not discuss it further.
Parameter Description
The ﬁnite ﬁeld size q
q
n