+-----------+-----------+-----------------------------------------------+
| [**luc    | `cluste   | 描述                                          |
| i**]{.app | r.conf`{. |                                               |
| lication} | filename} |                                               |
| 字段      | 属性      |                                               |
+===========+===========+===============================================+
| 服务名称  | `name`{   | 指定虚拟机名称。当使用                        |
|           | .literal} | [**luci**]{.application}                      |
|           |           | 界面时，您可以将其指定为服务名。              |
+-----------+-----------+-----------------------------------------------+
| 自动启动  | `au       | 如果启用，则这台虚拟机                        |
| 这个服务  | tostart`{ | 会在集群达到定额数后自动启动。如果[*禁用*]{.  |
|           | .literal} | emphasis}这个参数，则这台虚拟机就[*不会*]{.em |
|           |           | phasis}在集群达到定额数后自动启动。虚拟机处于 |
|           |           | *`disabled`* 状态。                           |
+-----------+-----------+-----------------------------------------------+
| 独家运行  | `ex       | 如果启用，这台虚拟机则只能重新定位            |
|           | clusive`{ | 独占另一个节点运行，即在没有其它虚拟机运行的  |
|           | .literal} | 节点中运行。如果没有可用的虚拟机供其独占运行  |
|           |           | ，则虚拟机在失败后就无法重启。另外，由于使用  |
|           |           | *`Run exclusive`*，其它虚拟                   |
|           |           | 机也无法重新定位到运行这台虚拟机的节点。您可  |
|           |           | 以使用手动启动或者重新定位操作覆盖这个选项。  |
+-----------+-----------+-----------------------------------------------+
| 故        | `domain`{ | 定义在虚拟机失败事件中可尝试的集群成员列表。  |
| 障切换域  | .literal} |                                               |
+-----------+-----------+-----------------------------------------------+
| 恢复策略  | `r        | ::: para                                      |
|           | ecovery`{ | *`Recovery policy`* 提供以下选项：            |
|           | .literal} | :::                                           |
|           |           |                                               |
|           |           | ::: itemizedlist                              |
|           |           | -   ::: para                                  |
|           |           |     *`Disable`* --- 失败后禁用该虚拟机。      |
|           |           |     :::                                       |
|           |           |                                               |
|           |           | -   ::: para                                  |
|           |           |     *`Relocate`* ---                          |
|           |           |     尝试在另一                                |
|           |           | 个节点中重启该虚拟机，即不在当前节点中重启。  |
|           |           |     :::                                       |
|           |           |                                               |
|           |           | -   ::: para                                  |
|           |           |     *`Restart`* ---                           |
|           |           |     在尝                                      |
|           |           | 试将该虚拟机重新定位（默认选项）到另一个节点  |
|           |           | 中前，尝试在本地（当前节点中）重启该虚拟机。  |
|           |           |     :::                                       |
|           |           |                                               |
|           |           | -   ::: para                                  |
|           |           |     *`Restart-Disable`* ---                   |
|           |           |     将在服务失败的地方                        |
|           |           | 重启该服务。但如果重启该服务失败，则会禁用该  |
|           |           | 服务，而不是将其移动到该集群的另一台主机中。  |
|           |           |     :::                                       |
|           |           | :::                                           |
+-----------+-----------+-----------------------------------------------+
| 重启选项  | `max_re   | 如果您选择[**“重启”**]{.guimenu}或          |
|           | starts`{. | 者[**“禁用重启”**]{.guimenu}作为该服务的恢  |
|           | literal}, | 复策略，您可以指定在重新定位或者禁用该服务前  |
|           | `res      | 最多重启失败的次数，并指定多少秒后不再重启。  |
|           | tart_expi |                                               |
|           | re_time`{ |                                               |
|           | .literal} |                                               |
+-----------+-----------+-----------------------------------------------+
| 迁移类型  | `         | 指定迁移类型 *`live`* 或者                    |
|           | migrate`{ | *`pause`*，默认设置为 *`live`*。              |
|           | .literal} |                                               |
+-----------+-----------+-----------------------------------------------+
| 迁移映射  | `m        | ::: para                                      |
|           | igration_ | 为迁移指定可替换接口。例如：您可以            |
|           | mapping`{ | 在当某个节点用于虚拟机迁移的网络地址与该节点  |
|           | .literal} | 用来进行集群通信的地址不同时指定可替换接口。  |
|           |           | :::                                           |
|           |           |                                               |
|           |           | ::: para                                      |
|           |           | 指定以下说明当您将虚拟机从 `member`{.literal} |
|           |           | 迁移到 `member2`{.literal}                    |
|           |           | 时，您实际上是迁移到                          |
|           |           | `target2`{.literal}。同样，当您从             |
|           |           | `member2`{.literal} 迁移到 `member`{.literal} |
|           |           | 时，您使用 `target`{.literal} 迁移。          |
|           |           | :::                                           |
|           |           |                                               |
|           |           | ::: para                                      |
|           |           | `member:target,member2:target2`{.literal}     |
|           |           | :::                                           |
+-----------+-----------+-----------------------------------------------+
| 状态程序  | `status_  | ::: para                                      |
|           | program`{ | 除对出现的虚拟机进行常规检查外要运行的状      |
|           | .literal} | 态程序。如果指定，则每分钟执行一次状态程序。  |
|           |           | 这可让您了解虚拟机中关键服务的状态。例如：如  |
|           |           | 果某台虚拟机运行网页服务器，您的状态程序可查  |
|           |           | 看该网页服务器是否启动并运行。如果该状态检查  |
|           |           | 失败（返回一个非零值），就是覆盖了该虚拟机。  |
|           |           | :::                                           |
|           |           |                                               |
|           |           | ::: para                                      |
|           |           | 启动虚拟机后，该虚拟机资源代理会周期性调用该  |
|           |           | 状态程序，并期待得到一个成功返回代码（0）。5  |
|           |           | 分钟后超时。                                  |
|           |           | :::                                           |
+-----------+-----------+-----------------------------------------------+
| 用来生成  | `         | 到 `libvirt`{.filename} XML                   |
| 虚拟机的  | xmlfile`{ | 文件的完整路径包含 `libvirt`{.filename}       |
| xmlfile   | .literal} | 域定义。                                      |
| 路径      |           |                                               |
+-----------+-----------+-----------------------------------------------+
| 虚        | `path`{   | ::: para                                      |
| 拟机配置  | .literal} | 一组                                          |
| 文件路径  |           | 用冒号分隔的路径，虚拟机资源代理（`vm.sh`{.c  |
|           |           | ommand}）用它搜索虚拟机配置文件。例如：`/mnt/ |
|           |           | guests/config:/etc/libvirt/qemu`{.filename}。 |
|           |           | :::                                           |
|           |           |                                               |
|           |           | ::: important                                 |
|           |           | ::: admonition_header                         |
|           |           | **重要**                                      |
|           |           | :::                                           |
|           |           |                                               |
|           |           | ::: admonition                                |
|           |           | ::: para                                      |
|           |           | 该路径应该[*永                                |
|           |           | 远*]{.emphasis}不直接指向某个虚拟机配置文件。 |
|           |           | :::                                           |
|           |           | :::                                           |
|           |           | :::                                           |
+-----------+-----------+-----------------------------------------------+
| 虚        | `s        | 到保存虚拟机映像的快照目录的路径。            |
| 拟机快照  | napshot`{ |                                               |
| 目录路径  | .literal} |                                               |
+-----------+-----------+-----------------------------------------------+
| H         | `hypervi  | Hypervisor URI（通常为自动）。                |
| ypervisor | sor_uri`{ |                                               |
| URI       | .literal} |                                               |
+-----------+-----------+-----------------------------------------------+
| 迁移 URI  | `migrat   | 迁移 URI（通常为自动）。                      |
|           | ion_uri`{ |                                               |
|           | .literal} |                                               |
+-----------+-----------+-----------------------------------------------+
| 在迁移过  | `tu       | 在迁移过程中使用 ssh 传递数据。               |
| 程中使用  | nnelled`{ |                                               |
| ssh       | .literal} |                                               |
| 传递数据  |           |                                               |
+-----------+-----------+-----------------------------------------------+
:::
:::
:::
[]{#ap-ha-resource-behavior-CA.html}
::: appendix
::: titlepage
# [⁠]{#ap-ha-resource-behavior-CA.html#ap-ha-resource-behavior-CA}附录 C. HA 资源行为 {.title}
:::
[]{#ap-ha-resource-behavior-CA.html#idm140713300446880 .indexterm}
::: para
本附录描述了 HA 资源的一般行为，其目的是提供在配置 HA
服务时可能有所帮助的辅助信息。您可使用 [**luci**]{.application} 或者
`/etc/cluster/cluster.conf`{.filename} 配置参数。有关 HA
资源参数的描述，请参考 [附录 B, *HA
资源参数*](#ap-ha-resource-params-CA.html){.xref}。要了解资源代理详情请查看集群节点中的
`/usr/share/cluster`{.filename} 文件。
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**备注**
:::
::: admonition
::: para
要完全理解本附录中的信息，您需要对资源代理以及集群配置文件
`/etc/cluster/cluster.conf`{.filename} 有深入的理解。
:::
:::
:::
::: para
HA 服务是一组在统一实体中配置的集群资源，可为客户端提供指定的服务。HA
服务在集群配置文件
`/etc/cluster/cluster.conf`{.filename}（在每个集群节点中）中以资源树的形式出现。在集群配置文件中，每个资源树都使用一个
XML
代表，它指定每个资源及其属性，以及在资源树中与其他资源的关系（上级、下级和平级关系）。
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**备注**
:::
::: admonition
::: para
因为 HA
服务由分为层次树的资源组成，服务有时也指的是*资源树*或者*资源组*。这两个词组与
[*HA 服务*]{.emphasis}有相同的含义。
:::
:::
:::
::: para
在每个资源树的顶端是一个特殊的资源类型 ---
*服务资源*。其他资源类型构成服务的剩余部分，决定服务的特点。配置 HA
服务包括创建服务资源、创建下级集群资源以及将其组成统一实体，形成该服务的分级限制。
:::
::: para
本附录由以下小节组成：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    [第 C.1 节
    "资源间的上级、下级和同级关系"](#ap-ha-resource-behavior-CA.html#s1-clust-rsc-desc-CA){.xref}
    :::
-   ::: para
    [第 C.2 节
    "同级资源启动顺序以及下级资源顺序"](#ap-ha-resource-behavior-CA.html#s1-clust-rsc-sibling-starting-order-CA){.xref}
    :::
-   ::: para
    [第 C.3 节
    "继承、\块以及重复使用资源"](#ap-ha-resource-behavior-CA.html#s1-clust-rsc-inherit-resc-reuse-CA){.xref}
    :::
-   ::: para
    [第 C.4 节
    "故障恢复和独立子树"](#ap-ha-resource-behavior-CA.html#s1-clust-rsc-failure-rec-CA){.xref}
    :::
-   ::: para
    [第 C.5 节
    "调整并测试服务和资源顺序"](#ap-ha-resource-behavior-CA.html#s1-clust-rsc-testing-config-CA){.xref}
    :::
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**备注**
:::
::: admonition
::: para
在集群配置文件 `/etc/cluster/cluster.conf`{.filename}
示例之后的这部分只作为演示使用。
:::
:::
:::
::: section
::: titlepage
# [⁠]{#ap-ha-resource-behavior-CA.html#s1-clust-rsc-desc-CA}C.1. 资源间的上级、下级和同级关系 {.title}
:::
[]{#ap-ha-resource-behavior-CA.html#idm140713297818688
.indexterm}[]{#ap-ha-resource-behavior-CA.html#idm140713297817728
.indexterm}
::: para
集群服务是一个在 `rgmanager`{.command}
控制下运行的整合实体。服务中的所有资源都在同一节点中运行。从
`rgmanager`{.command}
角度来看，一个集群服务就是一个可启动、停止或者重新定位的实体。但在集群服务中，资源结构决定每个启动和停止的顺序。结构等级包括上级、下级和同级。
:::
::: para
[例 C.1 "服务 foo
的资源结构"](#ap-ha-resource-behavior-CA.html#ex-resource-hierarchy-CA){.xref}
显示服务 [*foo*]{.emphasis}
的资源树示例。在这个示例中，资源间的关系如下：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    `fs:myfs`{.command} (\) 和
    `ip:10.1.1.2`{.command} (\) 是同级。
    :::
-   ::: para
    `fs:myfs`{.command} (\) 是
    `script:script_child`{.command} (\)
    的上级。
    :::
-   ::: para
    `script:script_child`{.command} (\)
    是 `fs:myfs`{.command} (\) 的下级。
    :::
:::
::: example
[⁠]{#ap-ha-resource-behavior-CA.html#ex-resource-hierarchy-CA}
**例 C.1. 服务 foo 的资源结构**
::: example-contents
``` screen
```
:::
:::
::: para
在资源树的上/下级关系中采用以下规则：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    上级资源在下级资源之前启动。
    :::
-   ::: para
    在停止上级资源前必须停止全部下级资源。
    :::
-   ::: para
    对于正常工作的资源，其下级资源必须全部正常工作。
    :::
:::
:::
::: section
::: titlepage
# [⁠]{#ap-ha-resource-behavior-CA.html#s1-clust-rsc-sibling-starting-order-CA}C.2. 同级资源启动顺序以及下级资源顺序 {.title}
:::
::: para
服务资源根据是否为子资源指定子类型属性决定子资源的启动和停止顺序，如下：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    指定子类型属性（*归类的*子资源）---
    如果服务资源为子资源指定子类型属性，则该子资源就被[*归类*]{.emphasis}了。该子类型属性明确决定该子资源的启动和停止顺序。
    :::
-   ::: para
    [*不指定*]{.emphasis}子类型属性（*不归类*子资源）---
    如果服务资源[*不为*]{.emphasis}子资源指定子类型属性，则该子资源是[*不归类*]{.emphasis}的。该服务资源不会明确控制不归类子资源的启动和停止顺序。但不归类子资源根据其在
    `/etc/cluster/cluster.conf`{.filename}
    中的顺序启动和停止。另外，不归类子资源在所有归类子资源启动后启动，并在所有归类子资源停止前停止。
    :::
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**备注**
:::
::: admonition
::: para
使用定义的[*子资源类型*]{.emphasis}排序的唯一资源是服务资源。
:::
:::
:::
::: para
有关归类子资源启动和停止顺序的详情请参考 [第 C.2.1 节