title:This PIN Can Be Easily Guessed: Analyzing the Security of Smartphone
Unlock PINs
author:Philipp Markert and
Daniel V. Bailey and
Maximilian Golla and
Markus D&quot;urmuth and
Adam J. Aviv
2020 IEEE Symposium on Security and Privacy
This PIN Can Be Easily Guessed:
Analyzing the Security of Smartphone Unlock PINs
Philipp Markert∗
∗ Ruhr University Bochum, † Max Planck Institute for Security and Privacy, ‡ The George Washington University
Daniel V. Bailey∗
PI:EMAIL
Maximilian Golla†
Markus D¨urmuth∗
PI:EMAIL
Adam J. Aviv‡
PI:EMAIL
PI:EMAIL
PI:EMAIL
for the mobile unlock authentication setting, reminding them
that the selected “PIN protects [their] data and is used to
unlock [their] smartphone.” While our study cannot speak to
memorability of selected PINs due to the short time duration,
our qualitative feedback suggests that participants took this
prompt seriously and selected relevant PINs.
Abstract—In this paper, we provide the ﬁrst comprehensive
study of user-chosen 4- and 6-digit PINs (n = 1220) collected
on smartphones with participants being explicitly primed for
device unlocking. We ﬁnd that against a throttled attacker (with
10, 30, or 100 guesses, matching the smartphone unlock setting),
using 6-digit PINs instead of 4-digit PINs provides little to no
increase in security, and surprisingly may even decrease security.
We also study the effects of blacklists, where a set of “easy to
guess” PINs is disallowed during selection. Two such blacklists
are in use today by iOS, for 4-digits (274 PINs) as well as 6-
digits (2910 PINs). We extracted both blacklists compared them
with four other blacklists, including a small 4-digit (27 PINs), a
large 4-digit (2740 PINs), and two placebo blacklists for 4- and
6-digit PINs that always excluded the ﬁrst-choice PIN. We ﬁnd
that relatively small blacklists in use today by iOS offer little
or no beneﬁt against a throttled guessing attack. Security gains
are only observed when the blacklists are much larger, which
in turn comes at the cost of increased user frustration. Our
analysis suggests that a blacklist at about 10 % of the PIN space
may provide the best balance between usability and security.
I. INTRODUCTION
We provide the ﬁrst study focused on the selection of Per-
sonal Identiﬁcation Numbers (PINs) based on data collected
from users speciﬁcally primed for the smartphone setting.
While authentication on mobile devices has been studied in
several contexts, including patterns [39] and passwords [28],
little is known about PINs used for mobile authentication.
Despite the rise of biometrics, such as ﬁngerprint or facial
recognition, devices still require PINs, e.g., after a restart or
when the biometric fails. That is because biometric authentica-
tion does not replace knowledge-based authentication; access
to a device is still possible with a PIN even when using a
biometric. Moreover, the presence of a biometric may actually
lead to a false sense of security when selecting knowledge-
based authenticators [14].
Our study focuses on the PINs users choose to unlock their
mobile devices. Previous work on PINs was primarily focused
on the context of banking, e.g., as part of the Chip-and-PIN
system [11] and also mainly relied on the analysis of digit
sequences found in leaked text-based password datasets since
this data is more readily available [46].
Given the sparsity of explicit information about PINs in the
context of mobile unlock authentication, we sought to ﬁll this
vital knowledge gap by conducting the ﬁrst study (n = 1220)
on the topic where participants either selected a 4- or 6-digit
PIN, the two predominant PIN lengths used for device unlock.
In addition to only allowing participants to complete the study
on a smartphone, we also primed our participants speciﬁcally
PINs of 4 and 6 digits only provide security when paired
with system controls like lockouts and delays that limit ofﬂine
(or unthrottled) guessing. An unthrottled attacker who can
bypass these controls can quickly guess all PIN combinations.
We instead consider a throttled attacker model to empirically
analyze the security of PINs when the system limits the
guessing rate. This is usual
in the smartphone-unlocking
setting where pauses are enforced after a certain number of
wrong guesses in order to slow attacks down. Guessing is then
limited (or throttled) to, e.g., just 10, 30, or 100 attempts in a
reasonable time window, such as a few hours.
it
is essential
In such a model,
to prioritize guessing
resistance in the ﬁrst few guesses. Our study found little beneﬁt
to longer 6-digit PINs as compared to 4-digit PINs. In fact,
our participants tend to select more-easily guessed 6-digit PINs
when considering the ﬁrst 40 guesses of an attacker.
As a mechanism for improving PIN selection, we also
studied how PINs are affected by blacklisting. A blacklist is a
set of “easy to guess” PINs, which triggers a warning to the
user. Apple iOS devices show the warning “This PIN Can Be
Easily Guessed” with a choice to “Use Anyway” or “Change
PIN.” Previous work in text-based passwords has shown that
users choose stronger passwords due to a blacklist [24], [36],
and recent guidance from NIST [20] concurs.
To understand selection strategies in the presence of a
blacklist, we conducted a between-subjects comparison of PIN
selection using a number of different blacklists. This included
one small (27 4-digit PINs), one large (2740 4-digit PINs), and
two blacklists (274 4-digit PINs and 2910 6-digit PINs) in use
today on iOS devices, which we extracted for this purpose.
To determine if the experience of hitting a blacklist or the
content of the blacklist itself drives the result, we included
a placebo blacklist that always excluded the participants’ ﬁrst
choice. Finally, we included both enforcing and non-enforcing
blacklists, where participants were able to “click through” and
ignore the blacklist, the approach taken by iOS.
Despite the popularity of blacklists and the positive impact
on textual passwords, our results show that currently employed
PIN blacklists are ineffective against a throttled attacker, in
both the enforcing and non-enforcing setting. This attacker
© 2020, Philipp Markert. Under license to IEEE.
DOI 10.1109/SP40000.2020.00100
286
Authorized licensed use limited to: Cornell University Library. Downloaded on August 30,2020 at 01:28:38 UTC from IEEE Xplore.  Restrictions apply. 
performs nearly as well at guessing 4-digit PINs as if there
were no blacklist in use. To be effective, the blacklist would
need to be much larger, leading to higher user frustration. Our
results show that a blacklist of about 10 % of the PIN space
may be able to balance the security and usability needs.
Finally, we collected both quantitative and qualitative feed-
back from our participants about their PIN selection strategies,
perceptions of their PINs in the context of blacklists, and
their thoughts about blacklisting generally. Overall, we ﬁnd
that despite having mostly negative sentiments about blacklist
warnings, participants do perceive the PINs they select under
a blacklist as more secure without impacting the memorability
and convenience, except in situations of a very large blacklist.
To summarize, we make the following contributions:
1) We report on the security of 4- and 6-digit PINs as
measured for smartphone unlocking, ﬁnding that in the
throttled setting, the beneﬁt of 6-digit PINs is marginal
and sometimes worse than that of 4-digit PINs.
2) Considering a realistic, throttled attacker model, we show
how different blacklisting approaches inﬂuence PIN se-
lection process for both security and usability, ﬁnding that
blacklists in use today offer little to no added security.
3) Through quantitative and qualitative feedback, we explore
users’ perception of security, memorability, and ease-of-
use of PIN-based authentication, ﬁnding that participants
perceive that blacklisting will improve their PINs without
impacting usability, except for very large blacklists.
4) We provide guidance for developers on choosing an
appropriately-sized PIN blacklist that can inﬂuence the
security in the throttled scenario, ﬁnding that a 4-digit
PIN blacklist needs to be about 10 % of the key space to
have a noticeable impact.
Note: We responsibly disclosed all our ﬁndings to Apple Inc.
II. RELATED WORK
Research on PIN authentication for mobile devices is related
to the larger area of mobile authentication. User preferences
for different unlock methods for Android devices were studied
by Harbach et al. [22] in 2014. Since then, PINs have found
new uses in encrypting mobile devices [3], [5], [30] and
biometrics [14] which require a PIN as part of the keying
material and for fallback authentication when biometrics fail.
The work most closely related to this research is the
analysis of PINs in the context of Chip-and-PIN systems
done by Bonneau et al. [11], where they considered 4-digit
PIN creation strategies for banking customers for use with
ATMs/credit cards. Bonneau et al. identiﬁed techniques used
for selecting PINs, where choosing (birth) dates/years was the
most popular – also true in our setting. As noted, an attacker
can leverage the skewed distribution of PIN choices to improve
the guessing strategy. As a countermeasure, Bonneau et al.
proposed the use of a blacklist containing the 100 most popular
PINs. From our analysis, it seems that their suggestion may
have formed the basis for Apple iOS’s 4-digit blacklist.
Our work differs from Bonneau et al. in two signiﬁcant
ways. Foremost, Bonneau et al. were primarily concerned with
payment cards, not smartphone unlock authentication. Second,
Bonneau et al. did not collect new PINs but instead relied on
digit sequences found in leaked passwords along with PINs
collected without the beneﬁt of a controlled experiment [2].
Our research aims for greater ecological validity by speciﬁ-
cally priming users for this task. Our data further suggests that
using password leaks may be an imperfect approximation for
how users choose PINs for unlock authentication.
Wang et al. [46] have also analyzed the security of PINs –
in this case without any speciﬁc usage context. They report on
comparing 4- and 6-digit PINs created by English and Chinese
users. One counter-intuitive ﬁnding is that 6-digit PINs are less
resistant to online attacks, despite the key space expansion
from 4- to 6-digit PINs. Our results support the observation
that in a rate limited guessing scenario there may actually be
no beneﬁt of using 6-digit PINs at all and in certain cases
security even decreases. Yet, Wang et al. used PINs extracted
from leaked, text-based password datasets whereas we tend
to increase the ecological validity of our results by collecting
new PINs speciﬁcally primed for mobile authentication and
the smartphone form-factor with its standard PIN layout.
Blacklists have been considered in the context of PINs by
Kim et al. [25]. They tested blacklists for both 4-digit as well
as 6-digit PINs, and concluded that a reasonably-sized blacklist
could indeed increase the security. Kim et al. used Shannon en-
tropy and guessing entropy as the strength metric and thus only
consider an unthrottled, perfect knowledge attacker that will
exhaustively guess the PIN space [10]. This is a questionable
attacker model especially given the sparsity of their dataset.
Kim et al. compared blacklists representing 2 % and 32 %
of the possible PIN space and found the large blacklist led
to lower Shannon-entropy and lower ofﬂine guessing-entropy
PINs, perhaps due to the composition of Kim et al.’s large
blacklist. In contrast, we show that with a more realistic rate-
limited, online attacker, a larger blacklist containing 27.4 % of
all possible PINs provides a beneﬁt over a smaller one that
blacklists only 2.7 %, differing from the suggestion of Kim et
al. regarding the effect of the size of the blacklist.
Beyond PINs, another common knowledge-based mo-
bile authentication mechanism are Android unlock patterns,
whereby a user selects a pattern that connects points on a
3x3 grid. Uellenbeck et al. [39] showed that user selection of
unlock patterns is highly biased, e.g., most patterns start in the
upper left corner. These results have been conﬁrmed by other
works [6], [27], [45]. Most relevant to our study, we compare
the security of mobile unlock PINs to that of patterns and have
obtained datasets from related work [6], [27], [39], [45].
While less common, according to Harbach et al. [22] and
our own measurement (see Table IV), alphanumeric passwords
are another option for users to unlock their mobile devices.
For this reason, we also consider alphanumeric passwords in
our comparisons with PINs, as available in leaked, text-based
password datasets. Research has shown that the creation and
use of passwords on mobile devices can be cumbersome and
users may create weaker passwords than they would do on
full-sized keyboards [21], [28], [35], [44], [49].
Authorized licensed use limited to: Cornell University Library. Downloaded on August 30,2020 at 01:28:38 UTC from IEEE Xplore.  Restrictions apply. 
287
DATASETS FOR STRENGTH ESTIMATIONS AND COMPARISONS.
TABLE I
RATE LIMITING ON MOBILE OPERATING SYSTEMS.
TABLE II
Kind
4-digit PINs
6-digit PINs
4-digit PINs
Unlock patterns
Passwords
Passwords
Dataset
Amitay-4-digit [2]
RockYou-6-digit [46]
RockYou-4-digit [46]
“All” – 3x3 patterns [17]
LinkedIn [19]
Pwned Passwords v4 [23]
Samples
204 432
2 758 490
1 780 587
4 637
10 000
Top 10 000
Use
Strength
Strength
Comparison
Comparison
Comparison
Comparison
III. BACKGROUND
A. Attacker Model
When studying guessing attackers, there are two primary
threat models. An unthrottled attacker can guess ofﬂine, indef-
initely, until all the secrets are correctly guessed, while a throt-
tled attacker is limited in the number of guesses, sometimes
called an online attack. Google’s Android and Apple’s iOS, the
two most popular mobile operating systems, implement real-
world rate limiting mechanisms to throttle attackers because
otherwise,
it would be possible to simply guess all PIN
combinations. In our attacker model, we assume the rate-
limiting works as designed, and as such, it is appropriate to
consider a throttled attacker when evaluating security as this
best matches the reality of the attacks PINs must sustain for
the mobile unlock setting.
The choice of the throttled attack model is further justiﬁed
when considering mobile devices’ trusted execution environ-
ments (TEE), where the key for device encryption is stored
in “tamper resistant” hardware and is “entangled” with the
user’s unlock secret [5]. This forces the attacker to perform
decryption (unlock) attempts on the device itself in an online
way. Moreover, the TEE is used to throttle the number of
decryption attempts tremendously by enforcing rate limiting
delays which also survive reboots.1
An overview of the currently enforced limits is given in
Table II. Apple’s iOS is very restrictive and only allows up to
10 guesses [5] before the iPhone disables itself and requires a
reset. Google’s Android version 7 or newer are less restrictive
with a ﬁrst notable barrier at 30 guesses where the waiting
time increases by 10 minutes. We deﬁne the upper bound
for a reasonably invested throttled attacker at 100 guesses
when the waiting starts to exceed a time span of 10 hours
on Android [4], but we also report results for less determined
attackers at 10 guesses (30 s) and 30 guesses (10.5 m) for
Android. The iOS limit is 10 guesses (1.5 h) [5].
In our attacker model, we assume that the adversary has
no background information about the owner of the device
or access to other side-channels. In such a scenario,
the
best approach for an attacker is to guess the user’s PIN in
decreasing probability order. To derive this order, we rely on
1While there are tools by Cellebrite [13] and GrayShift [12] that exploit
vulnerabilities in an attempt to escalate guessing to an unthrottled attacker,
we consider such attacks out of scope. These exploits are usually bound to a
speciﬁc device or OS version or can only be run within certain timeframes
(e.g., 1 hour) after the last successful unlock [47].
To Make n
Guesses
1-5 guesses
6 guesses
7 guesses
8 guesses
9 guesses
10 guesses
30 guesses
100 guesses
200 guesses
Accumulated Waiting Time
Android 7, 8, 9, 10
0 s
30 s
30 s
30 s
30 s
30 s
10 m 30 s
10 h 45 m 30 s
67 d 2 h 45 m 30 s
iOS 9, 10, 11, 12, 13
0 s
1 m 0 s
6 m 0 s
21 m 0 s
36 m 0 s
1 h 36 m 0 s
-
-
-
the best available PIN datasets, which are the Amitay-4-digit
and RockYou-6-digit datasets as deﬁned below. Again, we only
consider an un-targeted attacker who does not have additional
information about the victim being attacked. If the attacker
is targeted, and is able to use other information and context
about the victim, e.g., via shoulder-surﬁng attack [35], [7],
[9] or screen smudges [8], the attacker would have signiﬁcant
advantages, particularly in guessing 4- vs. 6-digit PINs [9].
In other parts of this work, we make use of blacklists. In
those cases, we consider an attacker that is aware and in
possession of the blacklist. This is because the attacker can
crawl the system’s blacklist on a sample device, as we have
done for this work. Hence, with knowledge of the blacklist,
an informed attacker can improve the guessing strategy by
not guessing known blacklisted PINs and instead focusing on
common PINs not on the blacklist.
B. Datasets
Perhaps the most realistic 4-digit PIN data is from 2011
where Daniel Amitay developed the iOS application “Big
Brother Camera Security” [2]. The app mimicked a lock screen
allowing users to set a 4-digit PIN. Amitay anonymously and
surreptitiously collected 204 432 4-digit PINs and released
them publicly [2]. While collected in an uncontrolled exper-
iment, we apply the dataset (Amitay-4-digit) when guessing
4-digit PINs, as well as to inform the selection of our “data-
driven” blacklists.
As there is no similar 6-digit PIN data available to in-
form the attacker, we rely on 6-digit PINs extracted from
password leaks, similar to Bonneau et al.’s [11] and Wang
et al.’s [46] method. PINs are extracted from consecutive
sequences of exactly n-digits in leaked password data. For
example, if a password contains a sequence of digits of the
desired length, this sequence is considered as a PIN (e.g., PW:
ab3c123456d → PIN: 123456, but no 6-digit PINs would
be extracted from the sequence ab3c1234567d).
By following this method, we extracted 6-digit PINs from
the RockYou password leak, which we refer to as RockYou-
6-digit (2 758 490 PINs). We also considered 6-digit PINs
extracted from other password leaks, such as the LinkedIn [19]
dataset, but found no marked differences between the datasets.
To provide more comparison points, we consider a number
of other authentication datasets listed in Table I. For example,
Authorized licensed use limited to: Cornell University Library. Downloaded on August 30,2020 at 01:28:38 UTC from IEEE Xplore.  Restrictions apply. 
288
we use a 3x3 Android unlock pattern dataset described by
Golla et al. [17], combining four different datasets [6], [27],
[39], [45]. It consists of 4637 patterns with 1635 of those being
unique. In addition, we use a text-password dataset. Melicher
et al. [28] found no difference in strength between passwords
created on mobile and traditional devices considering a throt-
tled guessing attacker. Thus, we use a random sample of
10 000 passwords from the LinkedIn [19] leak and use the
Pwned Passwords v4 [23] list to simulate a throttled guessing
attacker to estimate the guessing resistance for the sampled
LinkedIn passwords as a proxy for mobile text passwords.
C. Extracting the iOS Blacklists
As part of our set of blacklists, we also consider a blacklist
of “easily guessed” 4/6-digit PINs as used in the wild by
Apple, which we obtained via brute-force extraction from
an iPhone running iOS 12. We were able to verify that
blacklisting of PINs is present on iOS 9 throughout the latest
version iOS 13, and we also discovered that Apple updated
their blacklist with the deployment of iOS 10 (e.g., the PIN
101471 is blacklisted on iOS 10.3.3, but is not on iOS 9.3.5).
In theory, it is possible to extract the blacklist by reverse
engineering iOS, yet, we found a more direct way to determine
the blacklist via brute-force: During device setup, when a PIN
is ﬁrst chosen, there is no throttling. To test the membership
of a PIN, one only needs to enter all the PINs and observe the
presence of the blacklist warning, and then intentionally fail
to re-enter the PIN to be able to start over. We constructed a
device to automate this process using a Raspberry Pi Zero W
equipped with a Pi Camera Module (8MP), as depicted in
Figure 1. The Raspberry Pi emulates a USB keyboard, which
is connected to the iPhone. After entering a PIN, the camera of
the Raspberry Pi takes a photo of the iPhone screen. The photo
is sent to a remote server, where it is converted to grayscale
and thresholded using OpenCV. Subsequently, the presence of
the blacklist warning, as depicted in Figure 4, is detected by
extracting the text in the photo using Tesseract OCR.
The extraction of all 10 000 4-digit PINs took ∼ 9 hours.
Testing all 1 million 6-digit PINs took about 30 days using two
setups in parallel. To ensure accuracy, we repeated the process
for 4-digit PINs multiple times, tested lists of frequent 6-digit
PINs, and veriﬁed the patterns found in the PINs. Moreover,
we validated all blacklisted PINs multiple times. We refer to
these two lists as the iOS-4 and iOS-6 blacklists. 2
In total, the 4-digit blacklist contains 274 PINs and includes
common PINs as well as years from 1956 to 2015, but its
composition is mostly driven by repetitions such as aaaa,
abab, or aabb. The 6-digit blacklist contains 2910 PINs and
includes common PINs as well as ascending and descending
digits (e.g., 543210), but its composition is, again, mostly
driven by repetitions such as aaaaaa, abcabc, or abccba.
The common PINs blacklisted by Apple overlap with a 4-digit
blacklist suggested by Bonneau et al. [11] in 2012 and the top
6-digit PINs reported by Wang et al. [46] in 2017.
2To foster future research on this topic, we share the described blacklists
and the PIN datasets at: https://this-pin-can-be-easily-guessed.github.io
Fig. 1. The installation used to extract the iOS blacklists.
IV. USER STUDY
In this section, we outline the speciﬁcs of the treatment
conditions, the user study protocol, and the collected data. We