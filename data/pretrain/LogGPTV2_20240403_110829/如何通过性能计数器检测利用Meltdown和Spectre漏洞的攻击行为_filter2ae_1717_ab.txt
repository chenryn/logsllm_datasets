此外，我们还可以选择使用LLC-loads以及LLC-load-misses计数器，因为这两者都与LLC有关。然而，需要注意的是这些计数器都是特定型号型计数器，在某些环境中可能无法使用。比如，我们无法在基于Sandy
Bridge微架构运行的物理机上获取LLC-load-misses信息，然而却可以获取LLC-loads信息。
图3. 在物理机上无法访问某些计数器
即使VMware启用了[Virtual CPU Performance Monitoring
Counters](https://kb.vmware.com/s/article/2030221)（虚拟CPU性能监控计数器）功能，我们也无法在虚拟机中获取这些计数器信息。然而，我们还是可以获取到LLC
References以及LLC-miss事件。
图4. 虚拟机中相关事件情况
我们建议大家使用`perf stat`命令来测试这些计数器的可用性。如果条件允许，我们会使用LLC references、LLC
misses事件以及LLC-loads、LLC-load-misses计数器。我们也测试了现在常用的云解决方案中这些指标的可用性，结果发现计数器要么处于不可用状态，要么处于不支持状态。
## 四、测试检测机制
为了验证缓存未命中是否可以作为侧信道攻击的检测机制，我们使用了与LLC相关的性能计数器，具体设置如下：
1、我们为每个逻辑CPU设置了两个`perf`事件（LLC-references以及LLC-misses），测量了每个CPU上的所有进程/线程。在超过采样周期`P`之后才读取计数器值。我们使用如下公式计算LLC丢失率：
2、当MR > 0.99时我们触发检测机制。
3、我们测试了P1=10 000以及P2=20 000这两个采样周期。
使用物理机时，我们实验了如下测试场景：
1、运行stress命令，每次运行2分钟，具体命令如下（其中`#`为逻辑CPU的数量）：
    stress -c #
    stress -i #
    stress -m #
    stress -d #
    stress -c #
    stress -c # -i # -d #
    stress -c # -I # -d # -m #
2、使用VLC播放4K视频。
3、部署Meltdown PoC程序。
4、部署Spectre PoC程序。
在上述场景中，利用LLC-references以及LLC-misses事件我们得到了如下结果：
**1号物理主机：**
采样周期P1=10,000时，结果如下：
1、只有使用`-m`参数时stress命令才会触发假阳性（FP）结果；
2、播放4k视频时会出现FP结果；
3、可以检测Meltdown PoC程序；
4、可以检测Spectre PoC程序。
采样周期P2=10,000时，结果如下：
1、只有使用`-m`参数时stress命令才会触发FP结果；
2、播放4k视频时没有出现FP结果；
3、可以检测Meltdown PoC程序；
4、可以检测Spectre PoC程序。
**1号虚拟机：**
采样周期P1=10,000时，结果如下：
1、只有使用`-m`参数时stress命令才会触发假阳性（FP）结果；
2、N/A；
3、可以检测Meltdown PoC程序；
4、可以检测Spectre PoC程序。
采样周期P2=10,000时，结果如下：
1、只有使用`-m`参数时stress命令才会触发FP结果；
2、N/A；
3、可以检测Meltdown PoC程序；
4、无法检测Spectre PoC程序。
对于LLC-loads以及LLC-load-misses事件，有如下结果：
**1号物理机：** 无法使用相关计数器。
**2号物理机：**
采样周期P1=10,000时，结果如下：
1、只有使用`-m`参数时stress命令才会触发假阳性（FP）结果；
2、播放4k视频时不会出现FP结果；
3、可以检测Meltdown PoC程序；
4、可以检测Spectre PoC程序。
采样周期P2=10,000时，结果如下：
1、只有使用`-m`参数时stress命令才会触发FP结果；
2、播放4k视频时没有出现FP结果；
3、可以检测Meltdown PoC程序；
4、可以检测Spectre PoC程序。
**1号虚拟机：** 无法使用相关计数器。
我们所测试的主机环境如下：
**1号物理机：** Core i5-2430M [@2](https://github.com/2 "@2").40GHz，Sandy
Bridge，Ubuntu 14.04
**2号物理机：** Core i7-4600U [@2](https://github.com/2 "@2").10GHz，Haswell，Ubuntu
14.04
**1号虚拟机：** VMware ESX VM，Intel Xeon E5-2660 [@2](https://github.com/2
"@2").2GHz，Sandy Bridge，Ubuntu 16.04
    vpmc.enable = “TRUE”
    vpmc.freezeMode = “vcpu”
## 五、假阳性结果
我们发现采样周期会影响结果中出现的FP情况，并且使用stress -m命令时，我们总是可以观察到FP现象。查阅stress官方文档后，我们可以看到如下说明：
    -m, –vm N
            使用N个工作单元持续执行malloc()/free()操作
这种结果在我们预料之中，因为前面我们提到过，LLC与物理内存有关系。因此，如果实际环境中会频繁进行内存分配操作，我们检测起来要更加小心谨慎一些。
根据我们的观察，LLC-loads以及LLC-load-misses计数器能得到更加精确的结果，然而我们还是可以使用LLC
references（cache-references）以及LLC misses（cache-misses）事件进行检测。
图6. 使用ktrace以及性能计数器监视器（PCM）时的测量结果，每种技术所使用的侧信道攻击技术均为Flush-Reload
上图中需要注意的是：Spectre以及Meltdown的PoC代码可以使用“ _Conditional Branch（条件分支）_
”方法避免出现异常，这种情况下ktrace无法检测或者防护此类攻击方式。
## 六、总结
在实际环境中，如果无法使用TSX-NI指令集扩展，那么基于内核追踪以及SIGSEV信号的检测技术可以防护Meltdown攻击行为（这种方法与主机具体的CPU有关，比如[基于](http://software.intel.com/en-us/blogs/2012/02/07/transactional-synchronization-in-haswell)Haswell微架构的Intel微处理器）。
有一些工具能够检测Intel TSX-NI是否可用。其中有一种工具使用的是cpuid指令，大家可以翻阅Intel的64位架构以及IA-32架构的软件开发者手册了解详细信息。
如果实际环境中可以使用CPU性能计数器，那么我们可以采用针对缓存侧信道攻击的通用检测方法。在Linux系统上安装 _perf-tools_
工具后，我们可以运行`perf stat -e -a cache-references,cache-misses,LLC-loads,LLC-load-misses`命令检查这些计数器的可用性。默认情况下，大多数虚拟环境中都没有提供硬件性能计数器（如Amazon AWS、Azure、Virtual
Box），然而我们可以在VMware上启用这一功能。
如果想在其他平台上（如Windows以及macOS上）访问性能计数器则需要付出更多精力，因为我们无法在用户模式下访问这些计数器。我们需要一个合适的内核驱动才能读取计数器数值、采样率，有些时候想获取导致缓存丢失率上升的那个进程ID（PID）也需要内核驱动。
此外，我们建议大家在实际环境中可以调整检测参数，我们会根据用户的情况来决定是否需要出发警报。这种方法会向用户提供PID以及任务ID（TID），这样用户就可以对标记的进程或者线程采取操作。
采样周期也会影响结果的敏感程度：更高的采样率会出现更少的误报率，然而如果黑客的时机把握得非常好，我们还是有可能检测不到这种攻击行为。这种方法需要读取少量字节，然后休眠一段时间。检测技术可以迟滞攻击行为，因为按行读取一大块内存会触发警告。另一方面，较低的采样率会导致出现多个误报。据我们观察，物理主机的性能计数器会比VMware中的性能计数器更加准确。
我们可以证实，如果硬件计数器可用的话，这种检测技术可以用来检测FLUSH+RELOAD类型的缓存侧信道攻击。然而，在实际环境中我们需要多加测试、细调参数。
事实上，我们没办法找到包治百病的一种药，检测和阻止利用Meltdown以及Spectre漏洞的所有攻击行为。不同参数会带来不同的缓解效果，比如，如果某种检测机制需要依赖于特定环境中组件的可用性，那么情况就有所不同。
对于不断变化的安全威胁，警觉性以及主动检测能力是非常重要的一个方面，但我们也需要重视深度防御机制。采用主动的事件响应策略可以帮助单位或组织挖掘攻击链路的可见性，因此可以更好地实施补救措施，这对于Meltdown及Spectre之类的大规模安全风险来说更是如此。