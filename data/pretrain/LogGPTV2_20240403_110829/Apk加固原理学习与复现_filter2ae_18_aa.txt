# Apk加固原理学习与复现
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
针对当下反编译技术的逐步发展，加固技术也在与之对抗中发展，本文旨在对最简单的加固方式和加固的原理做一个介绍，并且对代码做一个复现。
## 加固原理图解：
如上图，对于得到的源apk，由于其中的保留信息较为完善，所以会很容易被反编译，利用GDA、JEB配合IDA等工具，可以轻松的得到程序里面的重要信息，为了保护这些信息，我们一般会对其进行加固，简而言之就是在程序外面再套一个壳子来将源程序保护起来，就像鸡蛋壳保护着鸡蛋、乌龟壳保护着乌龟一样。当然这其中也有着鸡蛋壳容易打碎，乌龟壳不易打碎的说法，在这里只做加固的原理的学习，至于加固之后的保护性强不强、容不容易被破坏，本文暂不做研究。  
在上图中，简易的描述了加固的原理，首先我们会拿到一个需要加固的源apk文件，然后需要加固这个源apk，我们就会写一个对应的壳程序，然后我们需要将两个apk合并，为了让程序能够正常运行，我们就需要将源apk文件和壳程序的dex文件进行合并，然后用合并之后的dex文件将可程序的dex文件替换掉，这样我们的壳程序就会照成运行。  
既然需要这样做，就会有些问题出现：  
如何将源apk和壳程序的dex文件合并？  
源apk外面套着壳程序的dex文件，那么怎么让这个app运行之后执行源apk里面的代码，而不是只执行壳程序的代码——即不能改变源apk的执行逻辑？  
针对上述问题，我们先做一个前置知识的学习。
## 前置知识
###  Dex文件
####  什么是Dex文件
我们都知道apk的本质是一个压缩包，当我们直接将.apk的后缀改为.zip的时候，是可以直接解压出里面的文件的(甚至有些压缩软件可以直接解压.apk文件，例如bindizip)。那么app为什么能在手机中运行呢，靠的就是.dex文件，在Windows端的可执行文件是.exe文件，JVM的可执行文件是.class文件，那么在Android中的dalvik或art虚拟机上运行的可执行文件就是.dex文件。  
Dex文件结构  
首先是Dex文件结构的源代码：  
首先来看一下看雪神图，出自非虫，在图中对Dex结构做了十分详细的定义。
接下来我们借助010Editor对随意一个Dex文件做一个解析。
根据上面两个图我们发现，dex大致可以分为以下几个part：
header : DEX 文件头，记录了一些当前文件的信息以及其他数据结构在文件中的偏移量  
string_ids : 字符串的偏移量  
type_ids : 类型信息的偏移量  
proto_ids : 方法声明的偏移量  
field_ids : 字段信息的偏移量  
method_ids : 方法信息（所在类，方法声明以及方法名）的偏移量  
class_def : 类信息的偏移量  
data : ： 数据区  
link_data : 静态链接数据区  
由于本文主题是apk加固，所以详细的Dex信息查看另一篇文章：  
我们这里详细看一下dex
header部分的值(图中uint表示无符号的int，即无符号4个字节的意思)，下图是010Editor中的效果，附上后一张图对每个字段做了解释：
在上图中，我把三个字段标出来了：  
checksum ：文件校验码 ，运用Adler32算法计算出来的一个值，用来校验文件是否被损坏 。  
signature ：使用 SHA-1 算法 hash 除去 magic ,checksum 和 signature 外余下的所有文件区域
，用于唯一识别本文件 。  
file_size：Dex 文件的大小 。  
为什么标出这三个字段呢，因为当我们的源apk和壳程序的dex合并生成新的dex之后，这三个值肯定会发生改变，因为他们都是检验文件是否被改变的值，而在程序安装的时候会检验这些值是否正确，为了让程序正常运行，我们在将壳dex和源apk合并成dex之后，也要将新的dex的这三个值修改为正确的值。所有我们的新的dex结构就如下图这样(最后要加上源程序的apk的大小，当程序运行起来的时候壳程序会把源程序重新分离出来让他自己运行，这样才能确保程序的运行逻辑不被改变，分离源apk的时候就需要知道apk的大小才能完成分离)：
###  动态加载机制
为了避免篇幅过长，对于动态加载机制的详细过程，可以参考我的另一篇文章：
## Apk加固原理
关于上述的两个问题，第一个：如何将源apk和壳程序的dex文件合并？  
我们已经找到答案了，即为Dex文件结构中最后一张图所示，需要改变checksum、signature、file_size值，并且需要在合并完最后加上加密的源程序的Apk大小。  
那么对于第二个问题：如何做到不改变源程序的逻辑？  
这就涉及到另一个技术：免安装运行程序  
因为我们知道我们的apk在运行之前是需要安装在手机上的，那么如果我们的源apk外面套上一个壳程序，安装的时候加载的就是壳程序的内容，那Android如何识别到源apk里面程序呢，这就涉及到一个apk没有安装是怎么运行的。  
要安装并运行apk，实际上就是加载里面的类并且运行类当中的方法的过程，既然如此，那就又回到了类加载的问题，我们安装的是壳程序的apk，那么加载的时候肯定是加载壳程序类，然后在壳程序当中我们做了把源apk分离出来的操作，但是分离出来的apk并不会重新被加载，因为加载的过程在壳程序安装运行的时候已经运行过了，所以不会运行第二次，那我们就需要自己去加载源apk中的类，我们知道PathClassLoader是一个应用的默认加载器(而且它只能加载data/app/xxx.apk的文件)，但是我们自己去加载类的时候一般使用DexClassLoader加载器，所以开始的时候，每个人都会很容易想到使用DexClassLoader来加载Activity获取到class对象，再使用Intent启动。但是实际上并不是想象的这么简单。因为Android中的四大组件都有一个特点就是他们有自己的启动流程和生命周期，我们使用DexClassLoader加载进来的Activity是不会涉及到任何启动流程和生命周期的概念，说白了，他就是一个普普通通的类。所以启动肯定会出错。  
所以我们这里就需要使用其他方式，只要让加载进来的Activity有启动流程和生命周期就行了，所以这里需要看一下一个Activity的启动过程，当然由于篇幅问题，这里不会详细介绍一个Activity启动过程的。可以将使用的DexClassLoader加载器绑定到系统加载Activity的类加载器上，这个是最重要的突破点。下面我们就来通过源码看看如何找到加载Activity的类加载器。  
ActivityThread.java
    // set of instantiated backup agents, keyed by package name
        final ArrayMap mBackupAgents = new ArrayMap();
        /** Reference to singleton {@link ActivityThread} */
        private static volatile ActivityThread sCurrentActivityThread;
        Instrumentation mInstrumentation;
        String mInstrumentationPackageName = null;
        String mInstrumentationAppDir = null;
        String[] mInstrumentationSplitAppDirs = null;
        String mInstrumentationLibDir = null;
        String mInstrumentedAppDir = null;
        String[] mInstrumentedSplitAppDirs = null;
        String mInstrumentedLibDir = null;
        boolean mSystemThread = false;
        boolean mJitEnabled = false;
        boolean mSomeActivitiesChanged = false;
        // These can be accessed by multiple threads; mPackages is the lock.
        // XXX For now we keep around information about all packages we have
        // seen, not removing entries from this map.
        // NOTE: The activity and window managers need to call in to
        // ActivityThread to do things like update resource configurations,
        // which means this lock gets held while the activity and window managers
        // holds their own lock.  Thus you MUST NEVER call back into the activity manager
        // or window manager or anything that depends on them while holding this lock.
        // These LoadedApk are only valid for the userId that we're running as.
        final ArrayMap> mPackages
                = new ArrayMap>();
        final ArrayMap> mResourcePackages
                = new ArrayMap>();
        final ArrayList mRelaunchingActivities
                = new ArrayList();
        Configuration mPendingConfiguration = null;
我们看到ActivityThread类中有一个自己的static对象，然后还有一个ArrayMap存放Apk包名和LoadedApk映射关系的数据结构。LoadedApk.java是加载Activity的时候一个很重要的类，这个类是负责加载一个Apk程序的，我们可以看一下它的源码：  
LoadedApk.java
    static final String TAG = "LoadedApk";
    static final boolean DEBUG = false;
    @UnsupportedAppUsage
    private final ActivityThread mActivityThread;
    @UnsupportedAppUsage
    final String mPackageName;
    @UnsupportedAppUsage
    private ApplicationInfo mApplicationInfo;
    @UnsupportedAppUsage
    private String mAppDir;
    @UnsupportedAppUsage
    private String mResDir;
    private String[] mOverlayDirs;
    @UnsupportedAppUsage
    private String mDataDir;
    @UnsupportedAppUsage(maxTargetSdk = Build.VERSION_CODES.R, trackingBug = 170729553)
    private String mLibDir;
    @UnsupportedAppUsage(maxTargetSdk = Build.VERSION_CODES.P, trackingBug = 115609023)
    private File mDataDirFile;
    private File mDeviceProtectedDataDirFile;
    private File mCredentialProtectedDataDirFile;
    @UnsupportedAppUsage
    private final ClassLoader mBaseClassLoader;
    private ClassLoader mDefaultClassLoader;
    private final boolean mSecurityViolation;
    private final boolean mIncludeCode;
    private final boolean mRegisterPackage;
    @UnsupportedAppUsage
    private final DisplayAdjustments mDisplayAdjustments = new DisplayAdjustments();
    /** WARNING: This may change. Don't hold external references to it. */
    @UnsupportedAppUsage
    Resources mResources;
    @UnsupportedAppUsage
    private ClassLoader mClassLoader;
    @UnsupportedAppUsage
    private Application mApplication;
    private String[] mSplitNames;
    private String[] mSplitAppDirs;
    @UnsupportedAppUsage
    private String[] mSplitResDirs;
    private String[] mSplitClassLoaderNames;
    @UnsupportedAppUsage
    private final ArrayMap> mReceivers
        = new ArrayMap<>();
    private final ArrayMap> mUnregisteredReceivers
        = new ArrayMap<>();
    @UnsupportedAppUsage(maxTargetSdk = Build.VERSION_CODES.P, trackingBug = 115609023)
    private final ArrayMap> mServices
        = new ArrayMap<>();
    private final ArrayMap> mUnboundServices
        = new ArrayMap<>();
    private AppComponentFactory mAppComponentFactory;
    Application getApplication() {
        return mApplication;
    }
我们可以看到它内部有一个mClassLoader变量，就是负责加载一个Apk程序的，所以只要通过反射获取到这个类加载器就可以加载我们壳程序解密出来的源apk了。
## 代码复现
###  源apk
MainActivity.java：
    public class MainActivity extends Activity {
        @Override
        protected void onCreate(Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            setContentView(R.layout.activity_main);
            /*TextView textView = findViewById(R.id.text);
            textView.setText(this.toString());
            textView.setTextSize(22);
            textView.setGravity(Gravity.CENTER);*/
            Log.i("Source", String.valueOf(getClass()));
            Log.i("Source", "Source app: MainActivity is onCreate" + this);
        }
    }
MyApplication.java：
    public class MyApplication extends Application {
        @Override
        public void onCreate() {
            super.onCreate();
            Log.i("Source", "Source app:MyApplication is onCreate" + this);
        }
    }
创建了一个application，在后面我们会用到他。
###  合并程序
该程序的作用将源apk和壳程序的dex文件合并成一个新的dex。所以也就是一个java项目，源代码如下：
    import java.io.*;
    import java.security.MessageDigest;
    import java.security.NoSuchAlgorithmException;
    import java.util.zip.Adler32;
    public class ShellTool {
        public static void main(String[] args) {
            try {
                // 需要加壳的源APK  ，以二进制形式读出，并进行加密处理
                File srcApkFile = new File("files/SourceAPP.apk");
                System.out.println("apk size:" + srcApkFile.length());
                // 将源apk以二进制的形式进行读取到一个byte[]中，并且用encrpt()加密函数对其进行加密，然后保存在一个byte[]中
                byte[] enSrcApkArray = encrpt(readFileBytes(srcApkFile));
                // 需要解壳的dex，痛殴贵阳以二进制形式读出dex
                File unShellDexFile = new File("files/Pack.dex");
                byte[] unShellDexArray = readFileBytes(unShellDexFile);
                // 将源APK长度和壳程序的DEX长度相加并加上存放源APK大小的四位得到新dex的总长度，最后四位存放着源apk的长度
                int enSrcApkLen = enSrcApkArray.length;
                int unShellDexLen = unShellDexArray.length;
                int totalLen = enSrcApkLen + unShellDexLen + 4;
                // 依次将解壳DEX，加密后的源APK，加密后的源APK大小，拼接出新的Dex，注意顺序不能反
                byte[] newdex = new byte[totalLen];
                System.arraycopy(unShellDexArray, 0, newdex, 0, unShellDexLen);
                System.arraycopy(enSrcApkArray, 0, newdex, unShellDexLen, enSrcApkLen);
                System.arraycopy(intToByte(enSrcApkLen), 0, newdex, totalLen - 4, 4);
                // 修改DEX file_size文件头
                fixFileSizeHeader(newdex);
                // 修改DEX SHA1 文件头
                fixSHA1Header(newdex);
                // 修改DEX CheckSum文件头
                fixCheckSumHeader(newdex);
                // 写入新Dex
                // 新建一个File
                String str = "files/classes.dex";
                File file = new File(str);
                if (!file.exists()) {
                    file.createNewFile();
                }
                // 将新的dex文件写入classes.dex中
                FileOutputStream localFileOutputStream = new FileOutputStream(str);
                localFileOutputStream.write(newdex);
                localFileOutputStream.flush();
                localFileOutputStream.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        // 可以添加自己的加密方法
        private static byte[] encrpt(byte[] srcdata) {
            for (int i = 0; i = 0; i--) {
                b[i] = (byte) (number % 256);
                number >>= 8;
            }
            return b;
        }
        /**
         * 修改dex头 sha1值
         *
         * @param dexBytes
         * @throws NoSuchAlgorithmException
         */
        private static void fixSHA1Header(byte[] dexBytes)
                throws NoSuchAlgorithmException {
            MessageDigest md = MessageDigest.getInstance("SHA-1");
            md.update(dexBytes, 32, dexBytes.length - 32);// 从32为到结束计算sha--1，与上述同理，前32位不参与计算
            byte[] newdt = md.digest();
            System.arraycopy(newdt, 0, dexBytes, 12, 20);//修改sha-1值（12-31）
            //输出sha-1值，可有可无
            String hexstr = "";
            for (int i = 0; i < newdt.length; i++) {
                hexstr += Integer.toString((newdt[i] & 0xff) + 0x100, 16)
                        .substring(1);
            }
            System.out.println(hexstr);
        }
        /**
         * 修改dex头 file_size值
         *
         * @param dexBytes
         */
        private static void fixFileSizeHeader(byte[] dexBytes) {
            //新文件长度