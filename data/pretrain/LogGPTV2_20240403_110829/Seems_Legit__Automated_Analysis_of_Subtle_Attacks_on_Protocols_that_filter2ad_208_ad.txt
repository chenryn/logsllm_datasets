### Symbolic Verification of Signatures (SVS) in Tamarin

#### 4.1 Symbolic Definition of `verify`

The `verify` function is implicitly assumed to be deterministic. The standard computational definition does not impose additional constraints on the output of `verify`. However, the traditional symbolic verification definition, as described in §2.2, aligns with the computational definition and further specifies that `verify` should return `false` in any situation where it is undefined, such as when verifying against a malicious key. In §3, we provided ad-hoc equations to specify additional cases where `verify` could return `true`.

To build a symbolic definition of `verify` that agrees with the computational one, we allow the adversary to choose whether `verify` returns `true` or `false` in situations where the output is not otherwise constrained. This definition encompasses our previous equations for maliciously generated public keys and other unknown scenarios, as long as they do not conflict with the computational definition.

In a symbolic setting, we consider traces made by a series of transitions in a labeled transition system, which describes the protocol's state at each point in the trace. When signature verification occurs, we require the following constraints:

1. **Honest Key and Signature**: If the public key was honestly generated, the verification of a corresponding honest signature must succeed.
2. **Honest Key and Forged Signature**: If the public key was honestly generated, the verification of a forged signature must fail.
3. **Previous Verification**: If a particular message-signature-key triple has been verified before, the result must be consistent with the previous answer.
4. **Adversary's Choice**: Otherwise, the adversary can decide whether the verification returns `true` or `false`.

These constraints can be modeled in the term algebra, with the third constraint requiring the storage of monotonic state about previous queries. The verification output depends on the "local query," the history of the trace, and the adversary's current choice. Thus, our symbolic model must record whether public keys have been created honestly and what verification checks have been made previously.

#### 4.2 Tamarin Implementation: User-Visible

We use the function signature as defined in §3.2, allowing for public key and message extraction as desired. We omit the verification function and its associated equation, replacing it with a mechanism that makes minimal assumptions about the scheme's properties.

In previous approaches, the signature verification function was encoded into the term algebra, explicitly stating the conditions under which verification returns `true`. Here, we only specify restrictions for the verification results and consider all possibilities in other scenarios. To implement this, we specify signature verification as an annotation on a protocol rule, guarded by first-order logical statements.

**Trace Annotations**:
- **Honest Key Generation**: When the protocol generates a public key `pk` honestly, we label the transition with the action `Honest(pk)`, indicating that the public key was output by the generation algorithm.
- **Signature Verification**: When a protocol transition is conditional on the result of a signature verification, we provide an action label `Verified(sig, tm, tpk, result)`, where `result` can be `true` or `false` depending on the transition's condition.

**Manipulation of Honest Signatures**:
- We also provide equations for malleable signatures and the re-signing rule discussed in §3.2 and §3.3. Malleability allows an adversary to manipulate an honest signature, while re-signing enables an adversary to generate a new signature under a compromised honestly generated key if certain conditions are met.

#### 4.3 Tamarin Implementation: Internal

**Syntactic Transformations**:
- Behind the scenes, we mechanically transform `Verified(sig, tm, tpk, result)` to `Verified(sig, sm, spk, tm, tpk, result)` using extraction functions `e1` and `e3`. This transformation is necessary because Tamarin requires reducible functions to be specified in the action fact annotation rather than in restriction formulae.

**Extraction Functions**:
- These functions allow us to refer to the message and public/private key that a signature corresponds to. They are well-defined even for non-honestly generated signatures but may not yield a result in such cases.

**Restrictions**:
- **Correctness**: An honestly generated public key, an honestly generated signature, and the correct message must verify as `true`.
- **NoForgery**: If a signature verification succeeds against an honest public key, the signature must have been honestly produced.
- **Consistency**: Repeated calls to `verify` must always return a consistent answer.

These restrictions ensure that if a transition is labeled with a verification annotation, it will be allowed unless it violates one of these rules.

#### 4.4 Results

We demonstrate that the SVS model is practical and present results and running times in Table 2. The SVS model, closely aligned with the computational definition, forces us to consider issues not typically addressed in symbolic analysis. Traditional symbolic tools often produce attack traces that are practical, consisting of explicit capabilities provided to the adversary. In contrast, the SVS model is closer to the computational model, where the attack trace consists of the adversary specifying certain signatures to pass or fail verification without providing intuition on how to achieve this.

Both the SVS model and our earlier models for attack finding are independently valuable to protocol modellers. The SVS model should be used first; if Tamarin returns a proof, it is within the strongest model of signature security we have described. If Tamarin returns an attack trace, the modeller can use our attack finding models to recover practical attacks. By using the attack finding model for each property separately, it is possible to isolate the signature behavior leading to the attack and consider possible mitigations.

In some cases, the SVS model may find an attack, but none of our falsification models yield an attack. In such cases, the result should be considered "Not Proven." There may still be an attack, but Tamarin is not aware of a method to craft public keys or signatures to enable the attack in practice. This means one does not have the desired symbolic proof but still gets proofs for the falsification models, which is a stronger guarantee than previously available.