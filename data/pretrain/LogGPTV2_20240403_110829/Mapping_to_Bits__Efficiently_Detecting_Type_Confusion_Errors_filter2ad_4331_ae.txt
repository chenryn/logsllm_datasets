### 872: Type Confusion Bug Detection in C++ Programs

#### Overview
In the given example, the function `reserve(d->header->root())` is called, along with the lines where the three objects pointed to by `d->header->root()` reside. The bottom part of the code lists the related C++ source files, demonstrating that TCD (Type Confusion Detector) can detect type confusion bugs across different files precisely and interprocedurally.

By performing a type-aware pointer analysis, we find that `d->header` in line 688 (`qjsonvalue.cpp`) points to three `Header` objects allocated in lines 79 (`qjson.cpp`), 840 (`qjson_s.h`), and 880 (`q_jsons.h`). In line 688, `d->header->root()` skips these three `Header` objects and points to their `Base` objects following them in memory. A dangerous downcast then occurs, where a `Base` object is cast to a `QJsonPrivate::Object` object. The ad hoc implementations of C++ inheritance can be seen in lines 77-79 (`qjson.cpp`), 839-840 (`qjson_s.h`), and 867-880 (`q_jsons.h`), where memory blocks larger than the size of a `Base` object are allocated. As highlighted in Figure 8, this bug pattern can lead to out-of-bound memory access. As shown in Figure 9, TCD can clearly pinpoint potential security vulnerabilities in large C++ projects.

#### Efficiency
TCD spends a total of 26,107 seconds (approximately 7.3 hours) analyzing seven Qt tools totaling 526,385 lines of C++ code. This is not unreasonable for such a comprehensive static analysis.

### B. RQ2: TCD vs. Dynamic Detectors

Of the five type confusion bugs listed in Tables IV and V, HexType [6], a dynamic detector, can only detect B1 in Table IV but not B2-B5 in Table V. This demonstrates TCD's ability to find new bugs in large C++ projects that can be difficult to reach by dynamic tools (as motivated in Figure 2).

Given a C++ program, dynamic detectors like HexType perform instrumentation at compile time. To detect type confusion bugs during testing, an instrumented C++ program is run repeatedly with different inputs to trigger more bugs. Despite advancements in various testing techniques [23, 33-38], dynamic detectors still suffer from low code coverage. As shown in Figure 2, complex conditions like `hard_to_satisfy()` represent an obstacle to dynamic analysis. However, TCD can often find potential bugs despite being path-insensitive.

Another challenge is container coverage, which may require every element of a container (e.g., an array) to be tested to find a particular bug. Consider a simple program in Figure 10. In line 7, a fuzzer [23, 38] can easily generate a random value `x` to satisfy `x >= 0 && x < 10`. In contrast, TCD, being a static detector, will ignore the `hard_to_satisfy()` condition in line 15 while still detecting the type confusion error in line 18. In Figure 10, TCD will analyze `ptr` conservatively as a pointer rather than an array of pointers, so `ptr` points to all the objects pointed to individually by its elements. Under this abstraction, `ptr` may point to either a `Derived` object (line 4) or a `Base` object (line 6). Thus, TCD can also expose the type confusion bug in line 8.

By being path-insensitive, TCD can improve code coverage but may produce false positives. For instance, if `x` can never be 2019 under any program input, the type confusion error in line 8 reported by TCD will be a false positive. Additionally, as a static detector, TCD is expected to consume tens of gigabytes of memory when analyzing large C++ programs. Compared to dynamic detectors, precise static solutions may not scale to tens of millions of lines of code [39].

### V. Related Work

We review the work relevant to TCD, focusing on dynamic techniques for detecting type confusion bugs and control flow integrity (CFI) techniques for enforcing CFI.

#### Dynamic Type Confusion Detectors
Undefined Behavior Sanitizer (UBSan) [9] relies on type information stored in virtual tables to detect whether a type cast is safe, limiting it to protecting polymorphic classes. CAVER [10] instruments C++ programs and maintains metadata for both polymorphic and non-polymorphic classes. Using red-black trees to store metadata for stack and global objects at O(log n) can incur high instrumentation overhead if most allocated objects are on the stack. TypeSan [12] uses a compact memory shadowing mechanism to trace all objects uniformly, reducing tracing overhead but potentially conflicting with address space layout randomization [40]. High instrumentation overhead has been addressed by HexType [6], Bitype [14], and CastSan [15]. Finally, EffectiveSan [13] can detect not only type confusion bugs but also memory-related bugs.

These dynamic detectors can find type confusion bugs precisely but suffer from low code coverage and high instrumentation overhead. In contrast, TCD can reveal potential type confusion bugs across the entire program statically, but at the expense of introducing false positives.

#### Control Flow Integrity
Type confusion bugs can lead to control flow attacks, which can be mitigated by control flow integrity [41-44]. CFI ensures that program execution follows the control flow graph (CFG) generated at compile time. Two main challenges remain: making control-flow targets in the CFG precise and making dynamic checks at these targets efficient. Generally, CFI defense mechanisms only protect code pointers, but type confusion bugs can corrupt other sensitive data as well.

### VI. Conclusions

We have introduced TCD, a new static detector in LLVM for finding type confusion bugs in C++ programs, based on a type-casting-preserving C++ compiler front-end and a type-aware pointer analysis. TCD has found four new type confusion bugs in Qt [32], which have evaded detection by previous dynamic approaches with a low false positive rate. Future work includes extending TCD to consider path-sensitivity to reduce false positives and combining static and dynamic analyses to leverage the strengths of both.

### Acknowledgements
We thank all the reviewers for their valuable inputs. This work has been supported by Australian Research Council Grants (DP170103956 and DP180104069).

### References
[1] S. Nagarakatte, J. Zhao, M. M. Martin, and S. Zdancewic, “Softbound: Highly compatible and complete spatial memory safety for C,” in Proceedings of the 30th ACM SIGPLAN Conference on Programming Language Design and Implementation, 2009, pp. 245–258.
...
[44] X. Fan, Y. Sui, X. Liao, and J. Xue, “Boosting the precision of virtual call integrity protection with partial pointer analysis for C++,” in Proceedings of the 26th ACM SIGSOFT International Symposium on Software Testing and Analysis, 2017, pp. 329–340.