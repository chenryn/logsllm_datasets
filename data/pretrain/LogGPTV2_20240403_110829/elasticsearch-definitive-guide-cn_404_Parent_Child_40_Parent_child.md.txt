### Parent-Child Relationship

The _parent-child_ relationship is similar in nature to nested objects, as both allow you to associate one entity with another. However, while nested objects are contained within a single document, parent and child documents in a parent-child relationship are entirely separate.

The parent-child functionality enables a _one-to-many_ relationship, where one parent document can be associated with multiple child documents. The advantages of using a parent-child relationship over nested objects include:

- **Independent Updates**: The parent document can be updated without reindexing the child documents.
- **Flexible Child Management**: Child documents can be added, modified, or deleted without affecting the parent or other child documents. This is particularly useful when dealing with a large number of frequently changing child documents.
- **Search Results**: Child documents can be returned as results in search queries.

Elasticsearch maintains an internal map that tracks the associations between parents and their children, which facilitates fast query-time joins. However, this map imposes a limitation: the parent document and all its children must reside on the same shard.

> **Note**: At the time of writing, the parent-child ID map is stored in memory. There are plans to change the default setting to use disk storage by default.

### Parent-Child Mapping

To establish a parent-child relationship, you need to specify the document type that will act as the parent for a given child type. This must be done at the time of index creation or using the `update-mapping` API before any child documents are created.

For example, consider a company with branches in multiple cities. We want to associate employees with the branch where they work. We need to be able to search for branches, individual employees, and employees working at specific branches. In this scenario, the nested model is not suitable, and we will use the parent-child relationship instead.

To set up the parent-child relationship, we inform Elasticsearch that the `employee` type has the `branch` document type as its `_parent`. This can be done during index creation:

```json
PUT /company
{
  "mappings": {
    "branch": {},
    "employee": {
      "_parent": {
        "type": "branch"
      }
    }
  }
}
```

In this setup, documents of type `employee` are children of the `branch` type.