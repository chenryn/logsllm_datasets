将这一切带回到本书的主题“保护 Docker”，这是到目前为止您可以使用 Docker 环境获得的最安全的保护，您将使用它来管理您的映像和容器，以及管理它们的存储和运行位置。一点额外的帮助永远不会有坏处，有了这个选项，一点点帮助将会有很大的帮助。
最新增加的部分是 Docker 通用控制平面。Docker UCP 公司为管理应用和基础架构提供了一个解决方案，无论它们可能在哪里运行，该解决方案都是 Docker 化的。这可以在内部运行，也可以在云中运行。您可以在以下链接中找到关于 Docker·UCP 的更多信息:
[https://www . docker . com/products/docker-universal-control-plane](https://www.docker.com/products/docker-universal-control-plane)
您也可以使用上面的网址获得产品的演示。Docker UCP 是可扩展的，易于设置，您可以通过集成到现有的 LDAP 或活动目录环境中来管理用户和访问控制。
# Docker 可信注册处
DTR 是一个解决方案，它提供了一个安全的位置，您可以在内部或云中存储和管理您的 Docker 映像。它还提供了一些监控功能，让您可以深入了解使用情况，以便您可以知道传递给它的负载类型。与 Docker Registry 不同，DTR 并不是免费的，它确实有一个定价模型。正如我们之前在 Docker Subscription 上看到的，DTR 的定价计划是相同的。不要担心，因为我们将在本书的下一部分讨论 Docker Registry，这样您也可以理解它，并拥有映像存储的所有可用选项。
我们之所以将它分成单独的部分，是因为其中涉及到许多移动的部分，了解它们如何作为一个整体在 Docker Subscription 部分发挥作用非常重要，而且就其本身而言，在 DTR 部分，您的所有映像都被维护和存储。
## 安装
有两种方法可以安装 DTR，或者说有两个地方可以安装 DTR。首先，您可以在自己管理的服务器上部署它。另一种是将其部署到云提供商环境，如 **【数字海洋】****【亚马逊网络服务】** ( **AWS** )或**微软 Azure** 。
第一部分你需要的是 DTR 的许可证。目前，他们确实提供了您可以使用的试用许可证，我强烈建议您这样做。这将允许您在所选环境中评估软件，而不必完全提交给该环境。如果您发现某些东西在特定环境中不起作用，或者您觉得另一个位置可能更适合您，那么您可以进行切换，而不必受限于特定位置，也不必将您现有的环境转移到不同的提供商或位置。如果您选择使用 AWS，他们确实有预烘焙的 **亚马逊机器映像** ( **AMI** )您可以利用它更快地设置您的可信注册表。这避免了必须手动完成所有工作。
在安装可信注册表之前，您首先需要安装 Docker 引擎。如果您还没有安装它，请查看下面链接中的文档，了解安装的更多信息。
[https://docs . docker . com/docker-trusted registry/install/install-csengine/](https://docs.docker.com/docker-trusted-registry/install/install-csengine/)
你会注意到安装普通的 Docker 引擎和 **Docker CS 引擎**是有区别的。 Docker CS 引擎代表商业支持的 Docker 引擎。请务必查看文档，因为推荐或支持的 Linux 版本列表比 Docker Engine 的常规列表要短。
如果您使用 AMI 进行安装，请按照此处的说明进行操作:
[https://docs . docker . com/docker-trusted registry/install/DTR-ami-byol 启动/](https://docs.docker.com/docker-trusted-registry/install/dtr-ami-byol-launch/)
如果您是在微软 Azure 上安装，那么请按照这里的说明操作:
[https://docs . docker . com/docker-trusted registry/install/DTR-vhd-azure/](https://docs.docker.com/docker-trusted-registry/install/dtr-vhd-azure/)
一旦你安装了 Docker Engine，是时候安装 DTR 了。如果您读到这一点，我们将假设您没有安装到 AWS 或微软 Azure。如果您使用这两种方法中的任何一种，请查看上面的链接。安装非常简单:
```
$ sudo bash -c '$(sudo docker run docker/trusted-registry install)'
```
### 注
注意:在 Mac OS 上运行时，可能需要从上面的命令中删除`sudo`选项。
运行后，您可以在浏览器中导航到 Docker 主机的 IP 地址。然后，您将为受信任的注册表设置域名，并应用许可证。门户网站将指导您完成其余的安装过程。
在访问门户时，您也可以通过现有的 LDAP 或活动目录环境设置身份验证，但这可以随时完成。
一旦完成，就到了*保护 Docker 可信注册中心*的时间了，我们将在下一节讨论这个问题。
## 保护 Docker 可信注册表
既然我们已经建立了可信注册表，我们需要确保它的安全。在确保安全之前，您需要创建一个管理员帐户来执行操作。一旦您的可信注册表启动并运行，并登录其中，您将能够在**设置**下看到六个区域。这些是:
*   **常规**设置
*   **安全**设置
*   **存储**设置
*   **牌照**
*   **授权**设置
*   **更新**
**常规**设置主要集中在 **HTTP 端口**或 **HTTPS 端口**、用于您的可信注册表的**域名**以及代理设置(如果适用)等设置上。
![Securing Docker Trusted Registry](img/00004.jpeg)
下一节**安全**设置，大概是最重要的一节。在这个**仪表盘**窗格中，您可以使用您的 **SSL 证书**和 **SSL 私钥**。这些使您的 Docker 客户端和可信注册表之间的通信安全。现在，这些证书有几个选项。您可以使用安装受信任注册表时创建的自签名注册表。您也可以使用命令行工具，如 **OpenSSL** ，自行签名。如果您在企业组织中，他们很可能有一个您可以请求证书的位置，例如可以与注册表一起使用的证书。当执行`docker pull`或`docker push`命令时，您需要确保可信注册表上的证书与客户端上使用的证书相同，以确保通信安全:
![Securing Docker Trusted Registry](img/00005.jpeg)
下一节讨论映像存储设置。在这个**仪表板**面板中，您可以设置您的映像在后端存储中的存储位置。此选项可能包括您正在使用的 NFS 共享、受信任的注册表服务器的本地磁盘存储、来自 AWS 的 S3 存储桶或其他云存储解决方案。一旦您选择了**存储后端**选项，您就可以从该**存储**中设置存储映像的路径:
![Securing Docker Trusted Registry](img/00006.jpeg)
**许可证**部分非常简单，因为这是您更新许可证的地方，当您需要续订新许可证或升级可能包含更多选项的许可证时:
![Securing Docker Trusted Registry](img/00007.jpeg)
身份验证设置允许您将登录到受信任的注册表绑定到您现有的身份验证环境中。您在这里的选项有:**无**或**托管**选项。**无**除测试目的外，不建议使用。**托管**选项是您设置用户名和密码并从那里管理它们的地方。另一种选择是使用一个 **LDAP** 服务，一个您可能已经在运行的服务，这样用户就可以拥有与他们的其他工作设备相同的登录凭证，例如电子邮件或网络登录。
![Securing Docker Trusted Registry](img/00008.jpeg)
最后一节**更新**，介绍如何管理 DTR 的更新。这些设置完全由您自己决定如何处理更新，但是如果您正在进行自动更新，请确保在更新过程中出现问题时，您也将备份用于恢复目的。
![Securing Docker Trusted Registry](img/00009.jpeg)
## 给药
既然我们已经介绍了帮助您保护受信任注册表的项目，我们不妨花几分钟来介绍控制台中的其他项目，以帮助您管理它。除了注册表中的**设置**选项卡之外，还有四个其他选项卡，您可以导航并收集有关注册表的信息。这些是:
*   **仪表盘**
*   **储存库**
*   **组织**
*   **日志**
**仪表盘**是您通过浏览器登录控制台时进入的主登录页面。这将在一个中央位置显示有关您的注册表的信息。您将看到的信息是关于注册服务器本身以及注册服务器运行的 Docker 主机的更多硬件相关信息。**存储库**部分将允许您控制您的用户可以从中提取映像的存储库，无论是**公共**还是**私有**。**组织**部分允许您控制访问，也就是说，系统上的哪些人可以针对您选择配置的存储库推送、拉入或执行其他 Docker 相关命令。最后一个部分，即**日志**部分，将允许您基于注册表中正在使用的容器来查看日志。原木每两周轮换一次，最大尺寸为 *64 mb* 。您可以根据容器过滤日志，也可以搜索日期和/或时间。
## 工作流程
在本节中，让我们提取一个映像，对其进行操作，然后将其放在我们的 DTR 上，供我们组织内的其他人访问。
首先，我们需要从**Docker 中心**提取一个映像。现在，您可以从的 **Dockerfile** 开始，然后进行 Docker 构建，然后推送，但是对于这个演示，假设我们有`mysql`映像，我们希望以某种方式对其进行定制。
```
$ docker pull mysql
Using default tag: latest
latest: Pulling from library/mysql
1565e86129b8: Pull complete
a604b236bcde: Pull complete
2a1fefc8d587: Pull complete
f9519f46a2bf: Pull complete
b03fa53728a0: Pull complete
ac2f3cdeb1c6: Pull complete
b61ef27b0115: Pull complete
9ff29f750be3: Pull complete
ece4ebeae179: Pull complete
95255626f143: Pull complete
0c7947afc43f: Pull complete
b3a598670425: Pull complete
e287fa347325: Pull complete
40f595e5339f: Pull complete
0ab12a4dd3c8: Pull complete
89fa423a616b: Pull complete
Digest: sha256:72e383e001789562e943bee14728e3a93f2c3823182d14e3e01b3fd877976265
Status: Downloaded newer image for mysql:latest
$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
mysql               latest              89fa423a616b        20 hours ago        359.9 MB
```
现在，假设我们对映像进行了定制。假设我们设置了一个容器，将它的日志发送到一个日志隐藏服务器，该服务器用于从我们正在运行的所有容器中收集日志。我们现在需要保存这些更改。
```
$ docker commit be4ea9a7734e /mysql
```
当我们进行提交时，我们需要一些花絮信息。第一个是容器 ID，我们可以通过运行一个`docker ps`命令得到。我们还需要我们之前设置的注册服务器的域名，最后是一个唯一的映像名称。在我们的情况下，我们将保持它为`mysql`。
我们现在准备将更新后的映像推送到我们的注册服务器。我们唯一需要的信息就是我们想要推送的图片名称，将会是`/mysql`。
```
$ docker push /mysql
```