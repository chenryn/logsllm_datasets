89
93
vPar/tPar
223/319
222/319
423/589
422/586
422/586
330/1,014
288/706
456/920
455/919
223/735
256/416
27/167
35/41
53/66
44/147
38/137
Veriﬁcation
% vAct/tAct
69.91
69.59
71.82
72.01
72.01
32.54
40.79
49.57
49.51
45.44
61.54
16.17
85.37
80.30
29.93
27.74
101/128
101/128
222/245
5/56
5/56
11/211
10/180
0/211
0/201
140/520
91/461
24/87
20/23
35/114
175/223
143/196
%
78.91
78.91
90.61
8.39
8.39
5.21
5.56
0.00
0.00
26.92
19.74
27.59
86.96
30.70
78.48
72.96
Table 9: Performance of Trace Merging. We list the number of
the sensitive trace (#Sensitive), the number of the path after trace
merging (#Merging) and the ratio of the merged traces (%).
Vendor
Series
Command Injection
#Sensitive #Merged %
Memory Corruption
#Sensitive #Merged %
AC18
AC15
W20E
G1
G3
Tenda
Tenda
Tenda
Tenda
Tenda
Netgear WNR3500
Netgear
Netgear
Netgear
Netgear
Netgear
D-Link
D-Link
TOTOLink T10
TOTOLink AR950
XR300
R6400
R7000P
R8000
R8500
878
823G
207
202
93
45
45
69
14,728
31,605
62,840
19,588
23,537
17,153
6,811
62
95
113 54.59
110 54.46
48 51.61
36 80.00
36 80.00
22 31.88
4.88
718
1.91
605
1.37
858
3.67
718
528
2.24
1.43
246
121
1.78
21 33.87
28 29.47
38917
38923
955,123
794,104
794,104
1,635
24,079
41,120
143,455
38,929
35,740
64,075
257,410
1
18
1,634
1,638
1,287
1,082
1,082
164
1,363
1,109
2,192
1,616
893
1,545
313
4.20
4.21
0.13
0.14
0.14
10.03
5.66
2.70
1.53
4.15
2.50
2.41
0.12
1 100.00
16
88.89
SUM
%
4.47
4.47
0.14
0.14
0.14
10.92
5.36
2.36
1.48
3.99
2.40
2.20
0.12
34.92
38.93
7.3 Efﬁcacy of Taint Analysis
We further inspect the taint analysis process to understand the
beneﬁts of our three optimizations proposed in §5.
Trace Merging. SaTC reduces the number of paths to be
explored by merging the call traces with the same input entry
(§5.2). Table 9 shows the number of explored paths before and
after trace merging. The results conﬁrm that the trace merging
strategy is useful: for Netgear, D-Link and Tenda devices that
have many sensitive traces to sink functions, SaTC merges
more than 89% of redundant paths; for other devices, this
technique also merges more than 61% of their start points.
Path prioritization. SaTC found ﬁve parser and sanitizer
functions in Netgear samples. Three of them are used to en-
code the character entities. Two of them are used to resolve the
Figure 6: Number of the keywords detected by keyword reference
locator, implicit entry ﬁnder and cross-process entry ﬁnder.
According to our analysis, all alerts related to strings absent
in the front-end are conﬁrmed to be false positives, except
for two cases in Tenda AC18, which are related to strings
cmdinput and data. The string cmdinput does not appear in
the front-end, and data exists in main.js but is ﬁltered by
the input keyword extraction module as many front-end ﬁles
use it (see §3). The result shows that compared to testing all
back-end strings in a tedious way, SaTC just introduces very
few false negatives (2 out of 408).
Source of True Input Keywords. Figure 6 lists the number
of keywords in each sample detected by keyword reference
locator, implicit entry ﬁnder and cross-process entry ﬁnder.
We can see that most of the input keywords are collected by
the keyword reference locator, especially for Tenda devices.
Netgear samples contain relatively more keywords located
by implicit entry ﬁnder, while D-Link samples contain more
keywords related to shared data between different binaries.
USENIX Association
30th USENIX Security Symposium    315
1 void formDelVpnUsers (...)
2 {
3
4
5
6
7
// reference point
taint = websGetVar (wp , " vpnUserIndex ", byte_E945C );
strncpy ( sUserIndexCopy2 , taint , 0x3Fu);
getVpnServerType ( sServerType );
for ( pIndex = (unsigned int8 *) strtok_r (( char *)
sUserIndexCopy2 , "\t", (char **)& pSavePtr ); pIndex ;
pIndex = (unsigned int8 *) strtok_r (0, "\t", (char **)&
pSavePtr )) {
v6 = atoi (( const char *) pIndex );//over - tainting -> v6
get_item_in_list ("vpn.ser. pptpuser ", "&", v6 + 1, 1,
sUserId );//over - tainting -> sUserId
doSystemCmd ("cfm post netctrl %s?op=%d,index =%s", (const
char *) sServerType , 10, (const char *) sUserId );
8
9
10
}
11
12 }
Listing 5: Pseudocode of false positive sample.
1 int sub_42383C (...) {
2
3
4
5
6
7
8
9 }
char* body;
char log [0 x1388 ];
/* sub_432D28 extracts message body from the request .*/
sub_432D28 (body);
memset (log , 0, 0x1388);
snprintf (log , 0x1387 , "echo '%s' >/var/ hnaplog ", body);
system (log);
Listing 6: Pseudocode of CVE-2019-7298. The device uses the
Home Network Administration Protocol (HNAP) to provide service
for users to conﬁgure and manage it. However, while handling the
POST request of HNAP, the function sub_42383C does not check
and ﬁlter the message body and writes it into a log ﬁle directly via
executing echo command (line 8). A malicious message body will
result in command injection vulnerability.
input string, escape the characters and generate the internal
variables.
Taint Engine. For all ﬁrmware samples in Table 9, SaTC
raised 101 alerts, 46 of them are true positives. We manually
analyzed twenty false positives in the alerts. As Listing 5
shows, some over-taint problems occur because of missing
abstracts for the common functions, such as atoi. The taint
state of the character variable pIndex is passed to an integer
variable (line 8), which is used as an index to extract data from
a list and store the data into a string sUserId (line 9). SaTC
raises the alert because v6 ﬁnally affects the doSystemCmd
function (line 10). In fact, the attacker cannot control the
string through interface keywords vpnUserIndex.
8 Discussion
In this section, we discuss the ability and limitation of SaTC,
and explore the improvement direction in the future.
Circle of Competence. Our evaluation shows that shared
keywords between different components of IoT devices can
effectively bridge points inside complicated data-ﬂows. This
short path saves a lot of analysis effort and thus improves the
efﬁcacy of bug ﬁnding. In fact, we can extend SaTC to detect
bugs in other systems, as long as they use shared keywords to
deliver data. For example, environment variables are widely
used in malware applications as a stealthy way to share infor-
mation. In this case, we can use the same variable names to
ﬁnd the connection between different malware processes and
to help detect critical operations in malware.
Implicit Data Dependency. During our evaluation we ﬁnd
several cases that the input entry in the back-end programs
does not have a corresponding keyword in the front-end. Our
implicit entry locator (§4) helps SaTC mitigate this issue to
detect more implicit input entries. However, there are cases
that even the implicit entry locator fails to build connections,
where SaTC will miss potential bugs associated with these
entries. For example, in an old vulnerability CVE-2019-7298,
the back-end program directly reads data from the HTTP
message without using any keyword (more details in List-
ing 6), and thus SaTC will miss this bug. In another example,
the ﬁrmware of D-Link 823G uses function apmib_set and
apmib_get to share data between different functions, without
using any keyword. SaTC will miss the associated vulnerabil-
ity CVE-2019-7297. We will analyze more cases and attack
surfaces and try to ﬁnd hidden patterns to build the relation-
ship between front-end and back-end, so as to enhance the
ability to discover vulnerabilities.
Efﬁciency v.s. Completeness. Analysis efﬁciency and bug
completeness are two key factors of any bug detection mech-
anisms. Compared to previous work like KARONTE, SaTC
trades the completeness of bug ﬁnding for the analysis efﬁ-
ciency. On the one hand, the method will help us detect the
vulnerabilities related to the front-end in a more timely man-
ner. According to our evaluation in §7.2, it requires ﬁve times
more effort to test all potential data entries of the back-end in
a brute-force way. On the other hand, our tool may result in
false negatives if the back-end entries do not have common
strings associated with the front-end, or the entries cannot
be detected via the heuristic methods. Fortunately, the empir-
ical evaluation shows that our method introduces very few
false negatives for seven devices from two vendors. Therefore,
SaTC achieves an empirically reasonable balance between
the analysis completeness and the bug-ﬁnding efﬁciency.
Encryption and Obfuscation. As the majority of the secu-
rity threats in IoT devices exist at the application layer and the
network layer, parts of the IoT device manufacturers adopt
code encryption or obfuscation to protect intellectual prop-
erty from reverse engineering attacks [2, 6, 15, 20, 47]. These
obfuscation techniques will limit the capabilities of SaTC.
For example, the string encryption technique could hinder