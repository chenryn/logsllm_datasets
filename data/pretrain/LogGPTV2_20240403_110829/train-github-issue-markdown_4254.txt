It's related to #14919. The code
    abstract FitnessScheme{F}
    immutable MinimizingScalarScheme <: FitnessScheme{Float64} end
    is_better(x, y, fs::MinimizingScalarScheme) = x < y
    Base.call{F}(fs::FitnessScheme{F}, x::F, y::F) = is_better(x, y, fs)
works in v0.4, but in v0.5 I get
    WARNING: deprecated syntax "call(fs::FitnessScheme{F}, ...)".
    Use "(fs::FitnessScheme{F})(...)" instead.
    ERROR: cannot add methods to an abstract type
     in eval(::Module, ::Any) at ./boot.jl:267
The alternative approach (works in v0.4)
    Base.call{FS<:FitnessScheme,F}(fs::FS, x::F, y::F) = is_better(x, y, fs)
also fails with
    WARNING: deprecated syntax "call(fs::FS, ...)".
    Use "(fs::FS)(...)" instead.
    ERROR: function type in method definition is not a type
     in eval(::Module, ::Any) at ./boot.jl:267
The expected behaviour is that both definitions are valid.