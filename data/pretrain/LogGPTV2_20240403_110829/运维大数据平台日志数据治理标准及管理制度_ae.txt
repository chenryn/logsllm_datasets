| 12 |日志版本号 |log version |lv |必填 |日志规范的版本号，此文档中日志规范的版本号为1.0 || 13 |日志内容 |log content |lc |必填 | |
|  |自定义 | | | |各系统自定义字段 |
1.5.14.3.4.3日志级别说明
自上而下，级别由低到高：
| 日志级别 | 级别描述 | 告警 |
|---|---|---|
| DEBUG |对调试（debug）有帮助的信息、事件。默认情况不打开。 | |
| INFO |在正常运行状态中，粗粒度的、关于重要流程/事件的、应用重要的配置和参数信息，可用来表示应用健康度的信息、事件 | |
| WARN |有潜在风险的、不会造成大危害的错误（往往由应用外部因素造成，如不正确的输入数据） |日志分析平台扫描到此级别日志后，应该向运营监控平台发送警告级别告警 |
| ERROR |应用发生错误（往往由于发生异常），但后续流程还能够继续进行； 此日志级别应该向运营监控平台发送重要告警，提醒运维人员关注； |日志分析平台扫描到此级别日志后，应该向运营监控平台发送重要级别告警 || FATAL |应用发生严重错误，应用服务被终止或者重启。需要立即被处理的错误 |日志分析平台扫描到此级别日志后，应该向运营监控平台发送严重级别告警 |
任何日志输出级别为info以上，生产系统不可出现debug级别的日志输出。
日志改造方案
为方便接入日志分析平台，日志的输出必须要保证关键要素可识别、可提取。由于各应用系统技术架构不尽相同，日志分类和格式也差异较大，因此对于日志输出格式，不做强制性要求，提供几种建议输出方案，供各应用系统参考，各系统也可根据自身情况采用其他方案，经过运维日志分析平台确认可行后，方可采用并落地。
1.5.14.4.1建议的日志埋点
系统初始化：系统初始化时会依赖一些关键配置，根据参数不同会提供不一样的服务。将系统的启动参数记录INFO日志，打印出参数以及启动完成态服务表述。
重要方法入口：建议记录方法调用、入参、返回值，对于排查问题会有很大帮助。重要方法入口：建议记录方法调用、入参、返回值，对于排查问题会有很大帮助。
业务流程与预期不符：项目代码中结果与期望不符时也是日志场景之一，简单来说就是所有流程分支都可以加入考虑。取决于开发人员判断能否容忍情形发生。常见的合适场景包括外部参数不正确，数据处理问题导致返回码不在合理范围内等等。
系统核心的关键动作：系统中核心角色触发的业务动作是需要多加关注的，是衡量系统正常运行的重要指标，建议记录INFO级别日志，比如电商系统用户从登录到下单的整个流程；微服务各服务节点交互；核心数据表的增删改等等。
系统异常：这类捕获的异常是系统告知开发人员需要加以关注的，是质量非常高的报错。应当适当记录日志，根据实际结合业务的情况使用warn或者error级别。
系统间的交易请求和响应。
外部服务调用和返回。
应用和服务的启动，关闭，配置加载。
程序异常或者错误：例如数据库无法连接。
容错行为：调用重试。程序异常或者错误：例如数据库无法连接。
容错行为：调用重试。
重要的警告。
持久性数据的更改，例如写文件、更新数据库等。
重要的状态变化。
用户与前端界面的交互操作。
有已知失败风险的调用。
较长时间的等待。
长期运行任务的执行进度。
重要的逻辑分支和导向分支的条件。
1.5.14.4.2不建议的日志埋点
方法入口：不要记录方法入口，除非它非常重要或者是日志处于调试级别。
循环中的数据：避免在循环的多次迭代中记录日志。除非是小循环，或者是间歇性的记录。
大消息或者文件的内容：截断或者使用一些有利于调试的方式进行汇总。
良性错误：那些不是真正错误的错误会令日志的读者感到困惑。当异常处理是执行成功的一部分时，有时会遇到这种情况。
1.5.14.4.2Java日志记录原则
使用门面中的API：应用中不建议直接使用日志系统（例如：Log4j、Logback）中的API，而应依赖使用日志框架（例如：SLF4J）中的API，使用门面模式的日志框架，有利于维护和各个类的日志处理方式统一；不推荐以字符串拼接的方式输出日志：如果信息本身需要计算或者合并的，打印前要用isXxxEnable()方法进行判断，或者使用占位符“{}”。这是因为当日志级别设置的比较高的时候，虽然低级别日志不打印，但也会执行字符串拼接，造成资源浪费。
避免重复打印日志：例如在log4j配置文件中设置additivity=false。additivity默认为true，即通过该logger输出的日志会同时输出到root logger，如果还为该logger指定了独立的appender，就会导致这部分日志重复输出。
异常信息应该包括两类信息：案发现场信息和异常堆栈信息。如果不处理，那么通过关键字throws往上抛出。
谨慎地记录日志：生产环境禁止输出debug日志，有选择地输出info日志，避免把服务器磁盘撑爆。
禁用System输出：不要直接使用System.out或者System.err输出日志，也不允许使用STDOUT、STDERR作为Logger名字。不打印无意义日志：不打印对排查故障无意义的日志信息，日志信息一定要带有业务信息。
循环体内不要打印INFO以上级别日志。
打印日志的代码任何情况下都不允许失败：一定要确保不会因为Log语句的问题而抛出异常造成中断，比如空指针异常。
异常：
catch中的异常记录必须打印堆栈信息，不要使用e.pringStackTrace()。
不要记录日志后又抛出异常。抛出去的异常，一般外层会处理。
无论是否发生异常，都不要在不同地方重复记录针对同一事件的日志消息。
输出异常全部的Throwable信息，而不是仅仅e.getMessage()。
数据的接入必须满足平台要求，如：输出方式、内容格式。
应用日志输出要符合《联盟应用日志规范-V1.1》
全局跟踪日志输出符合《交易路径跟踪全局统一流水号和日志规范V2.1》
自定义格式日志规范
针对难以满足上述规范建议，或由于特定产品契合度高软件输出的日志，建议满足如下字段要求：| 字段 | 字段释义 | 备注 |
|---|---|---|
| timestamp |时间戳 |精确到毫秒级 |
| hostname |主机名 |标记日志来源或者关联节点信息 |
| ip |IP |标记日志来源或者关联节点信息 |
| level |日志级别 |即日志包含DEBUG，INFO，WARN，ERROR，FATAL且可配置 |
| processeid/threaded/xxid |进程号/线程号/xxid号 |便于基于进程和线程服务对日志聚合分析 |
| line |行号 |日志输出所在程序代码逻辑中的行号 |
| message |日志信息主体 |日志内容主体，技术类日志输出应将事件、动作、错误内容输出，业务类日志输出应将业务类型、关联事件id、错误内容输出 |
| file |日志文件 |建议将正常日志out、错误异常err分开输出 || file |日志文件 |建议将正常日志out、错误异常err分开输出 |
| encoding |编码 |统一日志文件内容编码格式 |
数据治理规则(检查易)
根据数据接入及相关命名规范，当时新业务接入上线或者系统变更导致数据在结构、内容等方面等变化，或新需求内容等，需要通过数据治理规则检查，提升数据质量，满足技术和业务方面的需求。
| 数据类 | 字段问题 | 检查规范 |
|---|---|---|
| 数据源信息 |文件路径 |/var/log/{应用用户名} /home/{应用用户名}/logs 文件路径存在性、可读性检查 |
| 数据源信息 |文件名 |ComponentCode.SubComponentCode.Node.err.log.yyyy-mm-dd.n ComponentCode.SubComponentCode.Node.out.log.yyyy-mm-dd.n 文件存在性、文件名、个数、可读性、无日志内容检查 || 数据源信息 |数据库 |数据库类型、个数及数据库连通性检查 |
| 数据源信息 |网络安全设备 |设备类型、个数及数据库连通性检查 |
| 数据源信息 |字符集 |文本日志文件字符集检查 |
| 数据源信息 |属性/标签 |appname/tag/数据集检查 |
| 基础类信息 |时间戳 |yyyy-mm-dd hh:MM:ss.SSS |
| 基础类信息 |日志级别 |DEBUG/INFO/WARN/ERROR/FATAL |
| 基础类信息 |服务进行号/线程号 |服务进程检查 |
| 基础类信息 |IP/主机名 |主机节点数检查 |
| 拓展类信息 |全局流水号ID |长度/构成检查 |
| 拓展类信息 |关联外部ID |长度/构成检查 |
| 拓展类信息 |状态 |技术状态/业务成功失败等检查 |
| 拓展类信息 |错误码/错误原因 |数据字典检查 || 拓展类信息 |错误码/错误原因 |数据字典检查 |
| 拓展类信息 |时间类 |开始/结束时间或者耗时检查 |
| 拓展类信息 |动作类 |请求/应答动作检查 |
| 噪声数据 |接入采集时 |采集时过滤噪声日志 |
| 噪声数据 |配置时 |字段提取时过滤噪声日志 |
| 噪声数据 |展示应用时 |应用展示配置时过滤噪声日志 |
| 其它 |字段缺失 |补默认值或者开发改造 |
| 其它 |字段格式问题 (空/空格/大小写/逻辑计算/字典映射/字段组合/特殊字符/特定判断/日期时间数值等) |通过字段提取规则完善 |
| 其它 |字段逻辑错误 |去重/去除不合理值/修正矛盾值 |
增强型检查核对操作：业务分析检查、变更检查、关联分析检查、前后台检查等。
增强型数据核对操作：内部核对(逆向工程倒推&正向流程推进)、外部核对。
数据生命周期管理数据生命周期管理
当前运维大数据平台作为运维数据（包含日志）的管理平台，其资源是有限的特别是当前数据急剧膨胀的时代，存储资源尤为紧张，而且运维数据绝大部分都为时间序列数据，数据的价值会随时间流逝而稀释，因此我们需要制定严格的数据生命周期管理制度，使有限的资源能够合理的应对运维数据应用的需求。
数据生命周期设计
数据生命周期规划标准
| 序号 | 数据分类 | 在线（月） | 离线（天） | 归档（天）前 |
|---|---|---|---|---|
| 1 |网络、安全设备日志 |90 |180 |365 |
| 2 |操作系统运行日志主要为messages |90 |180 |365 |
| 3 |中间件运行日志（was、tomcat、cics、httpd等） |90 |180 |365 |
| 4 |数据库运行日志（db2、mysql、oracle等） |90 |180 |365 || 5 |应用日志--一类系统 |90 |90 |90 |
| 6 |应用日志--二类系统 |60 |60 |60 |
| 7 |应用日志--三类系统 |30 |30 |30 |
| 8 |应用日志--行方系统 |0 |0 |0 |
| 9 |业务日志--一类系统 |90 |180 |365 |
| 10 |业务日志--二/三类系统 |90 |180 |180 |
| 11 |业务日志--行方系统 |90 |180 |0 |
| 12 |全局跟踪日志 |60 |60 |90 |
| 13 |性能数据--联盟 |60 |60 |60 |
| 14 |性能数据--行方系统 |0 |0 |0 |
| 15 |运维过程数据（4a、itsm、集中监控等） |90 |180 |360 |
| 16 |加工计算后数据 |>360 |>360 |>360 |
资源生命周期规划标准
| 数据阶段 | 命令 | 备注 |资源生命周期规划标准
| 数据阶段 | 命令 | 备注 |
|---|---|---|
| 测试 |资源名称_t |t代表test |
| 预发布 |资源名称_s |s代表staging |
| 上线试运行 |资源名称_o |o代表 online |
| 运行维护 |资源名称 |无后缀，稳定运行 |
资源操作规划标准
| 操作 | 命名 | 备注 |
|---|---|---|
| 新建/增加 |资源名称_t_c  资源名称_s_c |对于临时测试/试运行发布的配置，以资源的生命周期标记+操作标记，健全完整的生命周期管理 c-reate    r-retrieve u-update  d-delete 其中，当各资源在运行2周左右正常无误后，可以将资源尾缀去除，特别地，对于要删除的资源，可删除。 || 查询 |资源名称_t_r  资源名称_s_r |对于临时测试/试运行发布的配置，以资源的生命周期标记+操作标记，健全完整的生命周期管理 c-reate    r-retrieve u-update  d-delete 其中，当各资源在运行2周左右正常无误后，可以将资源尾缀去除，特别地，对于要删除的资源，可删除。 |
| 修改 |资源名称_t_u  资源名称_s_u |对于临时测试/试运行发布的配置，以资源的生命周期标记+操作标记，健全完整的生命周期管理 c-reate    r-retrieve u-update  d-delete 其中，当各资源在运行2周左右正常无误后，可以将资源尾缀去除，特别地，对于要删除的资源，可删除。 || 删除 |资源名称_t_d  资源名称_s_d |对于临时测试/试运行发布的配置，以资源的生命周期标记+操作标记，健全完整的生命周期管理 c-reate    r-retrieve u-update  d-delete 其中，当各资源在运行2周左右正常无误后，可以将资源尾缀去除，特别地，对于要删除的资源，可删除。 |
参考附件
《交易路径跟踪全局统一流水号和日志规范V2.1》
《联盟应用日志规范-V1.1》
《系统简称》