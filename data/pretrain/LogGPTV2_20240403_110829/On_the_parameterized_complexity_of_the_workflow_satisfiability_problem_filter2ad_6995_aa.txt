# On the Parameterized Complexity of the Workflow Satisfiability Problem

**Authors:**
- Jason Crampton, Royal Holloway, University of London, United Kingdom
- Gregory Z. Gutin, Royal Holloway, University of London, United Kingdom
- Anders Yeo, University of Johannesburg, South Africa

## Abstract

A workflow specification defines a set of steps and the order in which they must be executed. Security requirements may impose constraints on which groups of users are permitted to perform subsets of these steps. A workflow specification is considered satisfiable if there exists an assignment of users to workflow steps that satisfies all the constraints. An algorithm for determining whether such an assignment exists is crucial both as a static analysis tool for workflow specifications and for the construction of runtime reference monitors for workflow management systems.

Finding such an assignment is generally a hard problem. However, work by Wang and Li in 2010 using parameterized complexity theory suggests that efficient algorithms exist under reasonable assumptions about workflow specifications. In this paper, we improve the complexity bounds for the workflow satisfiability problem. We also generalize and extend the types of constraints that can be defined in a workflow specification and prove that the satisfiability problem remains fixed-parameter tractable for such constraints.

**Categories and Subject Descriptors:**
- D4.6 [Operating Systems]: Security and Protection—Access controls
- F2.2 [Analysis of Algorithms and Problem Complexity]: Nonnumerical Algorithms and Problems
- H2.0 [Database Management]: General—Security, integrity, and protection

**General Terms:**
- Algorithms, Security, Theory

**Keywords:**
- Authorization constraints, workflow satisfiability, parameterized complexity

**Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. To copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.**

**CCS'12, October 16–18, 2012, Raleigh, North Carolina, USA.**
**Copyright 2012 ACM 978-1-4503-1651-4/12/10 ...$15.00.**

## 1. Introduction

Organizations increasingly computerize their business and management processes. The coordination of tasks in these processes is managed by workflow management systems (or business process management systems). Typically, the execution of these steps is triggered by a human user or a software agent acting under the control of a human user, and the execution of each step is restricted to a set of authorized users.

A workflow typically specifies the tasks that comprise a business process and the order in which they should be performed. Additionally, access control is often applied to the execution of tasks. Most workflow management systems implement security controls to enforce authorization rules and business rules, ensuring compliance with statutory requirements or best practices. This paper focuses on "security-aware" workflows. Common rules include separation-of-duty (also known as the "two-man" or "four-eyes" rule), which prevents sensitive combinations of steps from being performed by a single user, and binding-of-duty, which requires that a particular combination of steps is executed by the same user.

Figure 1 illustrates a simple example of a purchase order processing workflow. The workflow includes steps such as creating and approving a purchase order, processing an invoice, signing and countersigning a goods received note (GRN), and approving payment. The workflow specification also includes constraints to prevent fraudulent use, such as requiring different users to sign and countersign the GRN.

It may be impossible to find an assignment of authorized users to workflow steps that satisfies all constraints, in which case the workflow specification is unsatisfiable. The Workflow Satisfiability Problem (WSP) is known to be NP-hard, even when the set of constraints has a relatively simple structure.

An algorithm that solves WSP can be used to perform a static analysis of a workflow specification to determine whether there exists an instance of the workflow that can complete. Given the NP-hardness of the problem, it is important to find the most efficient algorithm possible. Additionally, a reference monitor may be constructed to decide whether a user should be permitted to execute a particular step in a workflow instance. The reference monitor must ensure that the user is authorized and that allowing the request does not render the remaining steps in the workflow instance unsatisfiable.

It has been argued that defining constraints in terms of organizational structures, rather than just the identity of particular users, would be of practical value. Our first contribution is to introduce a model for hierarchical organizations based on equivalence classes and partition refinements. We demonstrate how to construct an instance of our model from a management structure and illustrate why constraints defined over such models are valuable.

Wang and Li observed that the number of steps in a workflow is likely to be small relative to the size of the input to the workflow satisfiability problem. This led them to study the problem using parameterized complexity and to prove that the problem is fixed-parameter tractable for certain classes of constraints. However, they also showed that for many types of constraints, the problem is fixed-parameter intractable unless a well-known hypothesis in parameterized complexity fails, which is highly unlikely.

In this paper, we extend the results of Wang and Li in three ways:
1. We significantly improve their bound on the fixed-parameter complexity of WSP for those classes of constraints for which they proved the problem is tractable. This improvement arises from a new approach to the problem and the application of a recent result in exponential-time algorithms.
2. We define constraints in terms of hierarchical structures and prove that WSP remains fixed-parameter tractable in the presence of such hierarchical structures and hierarchy-related constraints.
3. We remove a restriction on the structure of a constraint and prove that Wang and Li's results on fixed-parameter tractability still hold, albeit with an increase in the complexity of the algorithm that solves the problem.

In the next section, we introduce the workflow satisfiability problem as defined by Wang and Li. In Section 3, we introduce a model for an organizational hierarchy and a class of constraint relations defined in terms of such hierarchies. In Section 4, we present our approach to the workflow satisfiability problem and prove a result that reduces the complexity of the problem for a particular class of constraints. We show that this approach generalizes to workflow specifications that include constraints defined over an organizational hierarchy and prove that the satisfiability problem remains fixed-parameter tractable. In Section 5, we discuss several extensions to the workflow satisfiability problem, including generalizations of the constraint structure and the satisfiability problem itself. The paper concludes with a summary of our contributions and discussions of related and future work.

## 2. The Satisfiability Problem

Let \( U \) be a set of users, and let \( \text{Rel}(U) \) denote the set of all binary relations on \( U \). In other words, \( \text{Rel}(U) \) is the powerset of \( U \times U \). We will write \( \rho= \) and \( \rho \neq \) to denote the relations \( \{(u, u) : u \in U\} \) and \( \{(u, v) : u, v \in U, u \neq v\} \), respectively. Given \( \rho \in \text{Rel}(U) \), let \( \overline{\rho} = \{(v, u) : (u, v) \in \rho\} \). Note that if \( \rho \) is symmetric (as are \( \rho= \) and \( \rho \neq \)), then \( \rho = \overline{\rho} \).

If \( (X, \leq) \) is a partially ordered set, then we write \( x \sim y \) if \( x \leq y \) and \( y \leq x \). We may write \( x \prec y \) whenever \( y \leq x \). We may also write \( x < y \) whenever \( x \leq y \) and \( x \neq y \). Finally, we will write \( [n] \) to denote \( \{1, \ldots, n\} \).

### Definition 1: Workflow Specification
A workflow specification is a partially ordered set of steps \( (S, \leq) \). An authorization policy for a workflow specification is a relation \( A \subseteq S \times U \). A workflow authorization schema is a tuple \( (S, U, \leq, A) \), where \( (S, \leq) \) is a workflow specification and \( A \) is an authorization policy.

- If \( s < s' \), then \( s \) must be performed before \( s' \) in any instance of the workflow.
- If \( s \sim s' \), then \( s \) and \( s' \) may be performed in either order.
- User \( u \) is authorized to perform step \( s \) only if \( (s, u) \in A \).
- We assume that for every step \( s \in S \), there exists some user \( u \in U \) such that \( (s, u) \in A \).

### Definition 2: Plan
Let \( (S, U, \leq, A) \) be a workflow authorization schema. A plan is a function \( \pi : S \to U \). A plan \( \pi \) is authorized for \( (S, U, \leq, A) \) if \( (s, \pi(s)) \in A \) for all \( s \in S \).

### Definition 3: Workflow Constraint
Let \( S_1, S_2 \subseteq S \), where either \( S_1 \) or \( S_2 \) (or both) is a singleton set, and \( \rho \in \text{Rel}(U) \). Then a workflow constraint has the form \( (\rho, S_1, S_2) \). A constrained workflow authorization schema is a tuple \( (S, U, \leq, A, C) \), where \( C \) is a set of workflow constraints.

### Definition 4: Valid Plan
A plan \( \pi : S \to U \) satisfies constraint \( (\rho, S_1, S_2) \) if there exist \( s_1 \in S_1 \) and \( s_2 \in S_2 \) such that \( (\pi(s_1), \pi(s_2)) \in \rho \). Given a constrained workflow authorization schema \( (S, U, \leq, A, C) \), a plan \( \pi \) is valid if it is authorized and it satisfies all constraints in \( C \).

The above definition of a workflow constraint was introduced by Wang and Li. It generalizes the definition by Crampton, in which both \( S_1 \) and \( S_2 \) were singleton sets. A further natural generalization is to define a constraint as a triple \( (\rho, S_1, S_2) \), where \( S_1 \) and \( S_2 \) are arbitrary subsets of \( S \), and to say that plan \( \pi \) satisfies constraint \( (\rho, S_1, S_2) \) provided there exist \( s_i \in S_i \) such that \( (\pi(s_1), \pi(s_2)) \in \rho \).

To facilitate direct comparison with the work of Wang and Li, we defer the discussion of these more general constraints until Section 5.1. We will write \( s \), rather than the mathematically correct \( \{s\} \), when \( s \in S \) appears as a singleton in a constraint. When \( \rho \) is a symmetric relation (meaning that \( (\rho, s, S') \) is equivalent to \( (\rho, S', s) \)), the constraint \( (\rho, s, S') \) is satisfied if and only if \( (\rho, S', s) \) is satisfied.