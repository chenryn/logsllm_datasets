title:On the parameterized complexity of the workflow satisfiability problem
author:Jason Crampton and
Gregory Z. Gutin and
Anders Yeo
On the Parameterized Complexity of the Workﬂow
Satisﬁability Problem
Jason Crampton
Royal Holloway
University of London
United Kingdom
PI:EMAIL
Gregory Gutin
Royal Holloway
University of London
United Kingdom
PI:EMAIL
Anders Yeo
South Africa
University of Johannesburg
PI:EMAIL
ABSTRACT
A workﬂow speciﬁcation deﬁnes a set of steps and the order
in which those steps must be executed. Security require-
ments may impose constraints on which groups of users are
permitted to perform subsets of those steps. A workﬂow
speciﬁcation is said to be satisﬁable if there exists an as-
signment of users to workﬂow steps that satisﬁes all the
constraints. An algorithm for determining whether such
an assignment exists is important, both as a static analysis
tool for workﬂow speciﬁcations, and for the construction of
run-time reference monitors for workﬂow management sys-
tems. Finding such an assignment is a hard problem in gen-
eral, but work by Wang and Li in 2010 using the theory of
parameterized complexity suggests that eﬃcient algorithms
exist under reasonable assumptions about workﬂow speciﬁ-
cations. In this paper, we improve the complexity bounds
for the workﬂow satisﬁability problem. We also generalize
and extend the types of constraints that may be deﬁned in a
workﬂow speciﬁcation and prove that the satisﬁability prob-
lem remains ﬁxed-parameter tractable for such constraints.
Categories and Subject Descriptors
D4.6 [Operating Systems]: Security and Protection—Ac-
cess controls; F2.2 [Analysis of Algorithms and Prob-
lem Complexity]: Nonnumerical Algorithms and Prob-
lems; H2.0 [Database Management]: General—Security,
integrity and protection
General Terms
Algorithms, Security, Theory
Keywords
authorization constraints, workﬂow satisﬁability, parameter-
ized complexity
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’12, October 16–18, 2012, Raleigh, North Carolina, USA.
Copyright 2012 ACM 978-1-4503-1651-4/12/10 ...$15.00.
1.
INTRODUCTION
It is increasingly common for organizations to comput-
erize their business and management processes. The co-
ordination of the tasks or steps that comprise a computer-
ized business process is managed by a workﬂow management
system (or business process management system). Typically,
the execution of these steps will be triggered by a human
user, or a software agent acting under the control of a hu-
man user, and the execution of each step will be restricted
to some set of authorized users.
A workﬂow typically speciﬁes the tasks that comprise a
business process and the order in which those tasks should
be performed. Moreover, it is often the case that some form
of access control should be applied to the execution of tasks.
Hence, most workﬂow management systems may implement
security controls that enforce authorization rules and busi-
ness rules, in order to comply with statutory requirements
or best practice. It is such “security-aware” workﬂows that
will be the focus of the remainder of this paper. The most
widely cited rules include separation-of-duty (also known as
the “two-man” or “four-eyes” rule), which may be used to
prevent sensitive combinations of steps being performed by
a single user, and binding-of-duty, which requires that a par-
ticular combination of steps is executed by the same user.
A simple, illustrative example for purchase order process-
ing [5] is shown in Figure 1. In the ﬁrst step of the work-
ﬂow, the purchase order is created and approved (and then
dispatched to the supplier). The supplier will present an in-
voice, which is processed by the create payment step. When
the supplier delivers the ordered goods, a goods received
note (GRN) must be signed and countersigned. Only then
may the payment be approved. Note that a workﬂow speci-
ﬁcation need not be linear: the processing of the GRN and
of the invoice can occur in parallel, for example.
In addition to deﬁning the order in which steps must be
performed, the workﬂow speciﬁcation includes rules to pre-
vent fraudulent use of the purchase order processing system.
These rules take the form of constraints on users that can
perform pairs of steps in the workﬂow: the same user may
not sign and countersign the GRN, for example.
It is apparent that it may be impossible to ﬁnd an assign-
ment of authorized users to workﬂow steps such that all con-
straints are satisﬁed. In this case, we say that the workﬂow
speciﬁcation is unsatisﬁable. The Workflow Satisfiabil-
ity Problem (WSP) is known to be NP-hard, even when
the set of constraints only includes constraints that have a
857s3
s5
s1
s2
s4
s6
(a) Ordering on steps and constraints
(cid:2)=
(cid:2)=
s5
s6
s3
s2
s4
s1
=
(cid:2)=
(cid:2)=
(b) Constraints
create purchase order
approve purchase order
sign goods received note
create payment
countersign goods received note
approve payment
s1
s2
s3
s4
s5
s6
(cid:2)= diﬀerent users must perform steps
= same user must perform steps
(c) Legend
Figure 1: A simple constrained workﬂow for pur-
chase order processing
relatively simple structure (and that would arise regularly
in practice).1
An algorithm that solves WSP can be used to perform
a static analysis of a workﬂow speciﬁcation to determine
whether there exists an instance of the workﬂow that can
complete. The NP-hardness of the problem suggests that
the worst-case run-time of such an algorithm will be expo-
nential in the size of the input. Hence, it is important to
ﬁnd an algorithm that is as eﬃcient as possible. Moreover,
we may wish to construct a reference monitor that decides
whether a user should be permitted to execute a particular
step in a workﬂow instance. Part of that reference monitor’s
functionality will be to conﬁrm that the user is authorized to
execute that step; the second part of its functionality will be
to determine whether allowing the request would render the
remaining steps in the workﬂow instance unsatisﬁable [5].
Assuming that such a reference monitor should incur as lit-
tle delay as possible (in the interest of the end-user experi-
ence), it becomes even more important to ﬁnd an algorithm
that can decide WSP as eﬃciently as possible.
It has been argued that it would be of practical value to be
able to deﬁne constraints in terms of organizational struc-
tures, rather than just the identity of particular users [17].
The ﬁrst contribution of this paper is to introduce a model
for hierarchical organizations based on the notion of equiv-
alence classes and partition reﬁnements. We demonstrate
how to construct an instance of our model from a manage-
ment structure and illustrate why constraints deﬁned over
such models are of practical value.
Wang and Li [17] observed that the number of steps in a
workﬂow is likely to be small relative to the size of the input
to the workﬂow satisﬁability problem. This observation led
them to study the problem using tools from parameterized
complexity and to prove that the problem is ﬁxed-parameter
tractable for certain classes of constraints. These results
demonstrate that it is feasible to solve WSP for many work-
ﬂow speciﬁcations in practice. However, Wang and Li also
showed that for many types of constraints the problem is
ﬁxed-parameter intractable unless one of the parameterized
complexity hypotheses, FPT (cid:2)= W[1], fails, which is highly
unlikely. (We provide a short introduction to parameterized
complexity in Section 4.1.)
In this paper, we extend the results of Wang and Li in
three diﬀerent ways.
1. First, we signiﬁcantly improve their bound on the
ﬁxed-parameter complexity of WSP for those classes
of constraints for which Wang and Li proved that the
problem is tractable. This bound arises from a new
approach to the problem and the application of a pow-
erful, recent result in the area of exponential-time al-
gorithms [3]. Moreover, we demonstrate that our re-
sult cannot be signiﬁcantly improved, provided a well-
known hypothesis about the complexity of solving 3-
SAT holds.
2. Our second extension to the work of Wang and Li
is to deﬁne constraints in terms of hierarchical struc-
tures and to prove that WSP remains ﬁxed-parameter
tractable in the presence of such hierarchical structures
and hierarchy-related constraints.
3. In their work, Wang and Li impose a restriction on
what we might informally call the structure of a con-
straint. Our ﬁnal contribution is to remove this restric-
tion and prove that Wang and Li’s results on ﬁxed-
parameter tractability of WSP still hold, albeit with
an increase in the complexity of the algorithm that
solves the problem.
In the next section, we introduce the workﬂow satisﬁabil-
ity problem, as deﬁned by Wang and Li. In Section 3, we
introduce a model for an organizational hierarchy and a class
of constraint relations deﬁned in terms of such hierarchies.
Then, in Section 4, we introduce our approach to the work-
ﬂow satisﬁability problem and prove a result that reduces
the complexity of the problem for a particular class of con-
straints. We demonstrate that this approach generalizes to
workﬂow speciﬁcations that include constraints deﬁned over
an organizational hierarchy and prove that the satisﬁability
problem remains ﬁxed-parameter tractable.
In Section 5,
we discuss a number of extensions to the workﬂow satisﬁ-
ability problem, including generalizations of the constraint
structure and of the satisﬁability problem itself. The paper
concludes with a summary of our contributions and discus-
sions of related and future work.
2. THE SATISFIABILITY PROBLEM
1In particular, the Graph k-Colorability problem can be
reduced to a special case of WSP in which the workﬂow spec-
iﬁcation only includes separation-of-duty constraints [17].
In this section, we introduce our notation and deﬁnitions,
derived from earlier work by Crampton [5] and Wang and
Li [17], and then deﬁne the workﬂow satisﬁability problem.
858Let U be a set of users and let Rel(U ) denote the set of
In other words, Rel(U ) is the
all binary relations on U .
powerset of U × U . We will write ρ= and ρ(cid:2)= to denote
the relations {(u, u) : u ∈ U} and {(u, v) : u, v ∈ U, u (cid:2)= v},
respectively. Given ρ ∈ Rel(U ), let (cid:2)ρ = {(v, u) : (u, v) ∈ ρ}.
Note that if ρ is symmetric (as are ρ= and ρ(cid:2)=), then ρ = (cid:2)ρ.
If (X, (cid:2)) is a partially ordered set, then we write x (cid:4) y if
x (cid:2)(cid:2) y and y (cid:2)(cid:2) x. We may write x (cid:3) y whenever y (cid:2) x. We
may also write x < y whenever x (cid:2) y and x (cid:2)= y. Finally,
we will write [n] to denote {1, . . . , n}.
Definition 1. A workﬂow speciﬁcation is a partially or-
dered set of steps (S, (cid:2)). An authorization policy for a work-
ﬂow speciﬁcation is a relation A ⊆ S × U . A workﬂow au-
thorization schema is a tuple (S, U, (cid:2), A), where (S, (cid:2)) is a
workﬂow speciﬁcation and A is an authorization policy.
(cid:3)
If s < s
(cid:3)
then s must be performed before s
in any in-
stance of the workﬂow; if s (cid:4) s
may be per-
formed in either order. User u is authorized to perform step
s only if (s, u) ∈ A.2 We assume that for every step s ∈ S
there exists some user u ∈ U such that (s, u) ∈ A.
then s and s
(cid:3)
(cid:3)
Definition 2. Let (S, U, (cid:2), A) be a workﬂow authoriza-
tion schema. A plan is a function π : S → U . A plan π is
authorized for (S, U, (cid:2), A) if (s, π(s)) ∈ A for all s ∈ S.
Definition 3. Let S1, S2 ⊆ S, where either S1 or S2 (or
both) is a singleton set and ρ ∈ Rel(U ). Then a workﬂow
constraint has the form (ρ, S1, S2). A constrained workﬂow
authorization schema is a tuple (S, U, (cid:2), A, C), where C is
a set of workﬂow constraints.
Definition 4. A plan π : S → U satisﬁes constraint
(ρ, S1, S2) if there exist s1 ∈ S1 and s2 ∈ S2 such that
(π(s1), π(s2)) ∈ ρ. Given a constrained workﬂow authoriza-
tion schema (S, U, (cid:2), A, C), a plan π is valid if it is autho-
rized and it satisﬁes all constraints in C.
The above deﬁnition of a workﬂow constraint was intro-
duced by Wang and Li [17]. It generalizes that of Cramp-
ton [5], in which both S1 and S2 were singleton sets. A
further natural generalization is to deﬁne a constraint to be
a triple (ρ, S1, S2), where S1 and S2 are arbitrary subsets
of S, and to say that plan π satisﬁes constraint (ρ, S1, S2)
provided there exist si ∈ Si such that (π(s1), π(s2)) ∈ ρ.
In order to facilitate direct comparison with the work of
Wang and Li, we defer the discussion of these more general
constraints until Section 5.1. We will write s, rather than
the mathematically correct {s}, when s ∈ S appears as a
singleton in a constraint. When ρ is a symmetric relation
(meaning that (ρ, s, S
, s) is
) is satisﬁed if and only if (ρ, S