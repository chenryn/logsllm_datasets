### Optimization and Reduction in Communication Costs

The communication cost drops from 1442 to 579 bits, representing a reduction of approximately 60%.

As noted in Section 1.2, the "basic" approach can be optimized by verifying multiplications with QuickSilver [33] or the amortized version of Mac'n'Cheese [4]. This optimization brings the basic costs closer to those of our optimized protocols. However, it comes with the trade-off of using information-theoretic MACs in a non-black-box manner (with QuickSilver) or increasing the number of interaction and computation rounds (with Mac'n'Cheese). QuickSilver has two variants: one for proving the satisfiability of circuits ("QS-Circuit") and another for sets of polynomials ("QS-Poly"). Since bitADDcarry can be represented as either a Boolean circuit or a set of polynomials over \( \mathbb{F}_2 \), both variants can be utilized in our conversion protocol.

These results highlight the advantage of our approach compared to using only daBits. Additionally, using QuickSilver or Mac'n'Cheese to check multiplications (as also done in the concurrent work Mystique [32]) reduces communication by 1.5–3x. This is because verifying a circuit with these protocols is more efficient than evaluating a circuit in our approach, even when using faulty triples.

### Experiments

We have implemented the conversion protocol \( \Pi_{\text{Conv}} \) using the faulty-dabit approach described in Section 3.4. The implementation is written in Rust using the Swanky library [1]. The VOLE protocol over the 61-bit field \( \mathbb{F}_p \) with \( p = 2^{61} - 1 \) is instantiated using [31]. All benchmarks were conducted on a MacBook Pro 2018 with a 2.9 GHz 6-Core Intel Core i9 and 32 GB 2400 MHz DDR4 RAM, with one thread per party. All experiments were run in a Docker container running Ubuntu, with network bandwidth artificially limited using `tc` and 1 ms latency simulated.

Our current implementation can verify conversions for \( m \leq 60 \). We tested the conversion protocol on bit lengths \( m \in \{8, 16, 32, 60\} \). All benchmarks ensure statistical security of \( 2^{40} \) by varying the sizes of \( B \) and \( C \) according to Table 6 (see Appendix F). The listed benchmarks use Wolverine [31] to verify multiplications as in protocol \( \Pi_{\text{Conv}} \) of Section 3.2. We also implemented a variant using QuickSilver [33], which reduces runtimes by about a factor of two due to lower communication and preprocessing requirements. Detailed results for both the optimized protocol and the QuickSilver variant are provided in Appendix F.

**Table 3: Communication in Mbit when verifying \( 2^{20} \) conversion tuples where \( B = C = 3 \) with multiplication check of [31].**

| \( m \) | P (Mbit) | V (Mbit) |
|---------|----------|----------|
| 8       | 171.8    | 19.7     |
| 16      | 24.2     | 174.0    |
| 32      | 33.1     | 178.4    |

**Table 4: Run-time in seconds for verifying \( 2^{20} \) conversion tuples with \( m = 32 \) and \( B = C = 3 \) with multiplication check of [31].**

| Bandwidth (Mbit/s) | Init (s) | Conv (s) |
|--------------------|----------|----------|
| 20                 | 22.6     | 399.2    |
| 100                | 14.0     | 189.3    |
| 500                | 12.2     | 173.5    |
| 1000               | 12.1     | 169.6    |

Table 3 shows the communication required between the prover and verifier when verifying \( 2^{20} \) conversion tuples, with varying bit lengths. The "Init" phase includes the construction of channels, initial setup of the Wolverine VOLE protocol, and initial commitments to the prover's input. The "Conv" phase covers the time for the prover and verifier to run \( \Pi_{\text{Conv}} \) on the input provided by the prover, including the generation of edaBits, daBits, and multiplication triples. Even for the smallest setting of \( m = 8 \), the conversion costs dominate both the VOLE setup and the "Init" phase.

Table 4 lists the run-time for the same setup with a fixed bit length of \( m = 32 \). It is evident that increasing the network bandwidth beyond 100 Mbit/s does not significantly improve the protocol runtime. Therefore, for our current implementation, computation is the limiting factor.

### Acknowledgements

This work is supported by the European Research Council (ERC) under the European Union’s Horizon 2020 research and innovation programme (grant agreement No. 803096, SPEC), the Carlsberg Foundation (Semper Ardens Research Project CF18-112, BCM), and the Defense Advanced Research Projects Agency (DARPA) (Contract No. HR001120C0085). Any opinions, findings, and conclusions or recommendations expressed in this material are those of the author(s) and do not necessarily reflect the views of DARPA. Distribution Statement “A” (Approved for Public Release, Distribution Unlimited).

### References

[1] Benny Applebaum, Ivan Damgård, Yuval Ishai, Michael Nielsen, and Lior Zichron. 2017. Secure Arithmetic Computation with Constant Computational Overhead. In CRYPTO 2017, Part I (LNCS). Springer, Heidelberg.
[2] Gilad Asharov, Yehuda Lindell, Thomas Schneider, and Michael Zohner. 2013. More efficient oblivious transfer and extensions for faster secure computation. In ACM CCS 2013. ACM Press.
[3] Carsten Baum, Lennart Braun, Alexander Munch-Hansen, Benoit Razet, and Peter Scholl. 2021. Appenzeller to Brie: Efficient Zero-Knowledge Proofs for Mixed-Mode Arithmetic and \( \mathbb{Z}_{2^k} \) (Full Version). Cryptology ePrint Archive, Report 2021/750. https://eprint.iacr.org/2021/750.
[4] Carsten Baum, Alex J. Malozemoff, Marc B. Rosen, and Peter Scholl. 2021. Mac'n'Cheese: Zero-Knowledge Proofs for Boolean and Arithmetic Circuits with Nested Disjunctions. 41st Annual International Cryptology Conference (CRYPTO 2021).
[5] Donald Beaver. 1992. Efficient Multiparty Protocols Using Circuit Randomization. In CRYPTO'91 (LNCS). Springer, Heidelberg.
[6] Rikke Bendlin, Ivan Damgård, Claudio Orlandi, and Sarah Zakarias. 2011. Semi-homomorphic Encryption and Multiparty Computation. In EUROCRYPT 2011 (LNCS). Springer, Heidelberg.
[7] Elette Boyle, Geoffroy Couteau, Niv Gilboa, and Yuval Ishai. 2018. Compressing Vector OLE. In ACM CCS 2018. ACM Press.
[8] Elette Boyle, Geoffroy Couteau, Niv Gilboa, Yuval Ishai, Lisa Kohl, Peter Rindal, and Peter Scholl. 2019. Efficient Two-Round OT Extension and Silent Non-Interactive Secure Computation. In ACM CCS 2019. ACM Press.
[9] Elette Boyle, Geoffroy Couteau, Niv Gilboa, Yuval Ishai, Lisa Kohl, and Peter Scholl. 2019. Efficient Pseudorandom Correlation Generators: Silent OT Extension and More. In CRYPTO 2019, Part III (LNCS). Springer, Heidelberg.
[10] Matteo Campanelli, Dario Fiore, and Anaïs Querol. 2019. LegoSNARK: Modular Design and Composition of Succinct Zero-Knowledge Proofs. In ACM CCS 2019. ACM Press.
[11] Octavian Catrina and Sebastiaan de Hoogh. 2010. Improved Primitives for Secure Multiparty Integer Computation. In SCN 10 (LNCS). Springer, Heidelberg.
[12] Ronald Cramer, Ivan Damgård, Daniel Escudero, Peter Scholl, and Chaoping Xing. 2018. SPD \( \mathbb{Z}_{2^k} \): Efficient MPC mod \( 2^k \) for Dishonest Majority. In CRYPTO 2018, Part II (LNCS). Springer, Heidelberg.
[13] Ivan Damgård, Jesper Buus Nielsen, Michael Nielsen, and Samuel Ranellucci. 2017. The TinyTable Protocol for 2-Party Secure Computation, or: Gate-Scrambling Revisited. In CRYPTO 2017, Part I (LNCS). Springer, Heidelberg.
[14] Ivan Damgård, Valerio Pastro, Nigel P. Smart, and Sarah Zakarias. 2012. Multi-party Computation from Somewhat Homomorphic Encryption. In CRYPTO 2012 (LNCS). Springer, Heidelberg.
[15] Samuel Dittmer, Yuval Ishai, and Rafail Ostrovsky. 2021. Line-point zero knowledge and its applications. In 2nd Conference on Information-Theoretic Cryptography (ITC 2021). Schloss Dagstuhl-Leibniz-Zentrum für Informatik.
[16] Daniel Escudero, Satrajit Ghosh, Marcel Keller, Rahul Rachuri, and Peter Scholl. 2020. Improved Primitives for MPC over Mixed Arithmetic-Binary Circuits. In CRYPTO 2020, Part II (LNCS). Springer, Heidelberg.
[17] Shimon Even, Oded Goldreich, and Abraham Lempel. 1982. A Randomized Protocol for Signing Contracts. In CRYPTO’82. Plenum Press, New York, USA.
[18] Tore Kasper Frederiksen, Jesper Buus Nielsen, and Claudio Orlandi. 2015. Privacy-Free Garbled Circuits with Applications to Efficient Zero-Knowledge. In EUROCRYPT 2015, Part II (LNCS). Springer, Heidelberg.
[19] Shafi Goldwasser, Silvio Micali, and Charles Rackoff. 1985. The Knowledge Complexity of Interactive Proof-Systems (Extended Abstract). In 17th ACM STOC. ACM Press.
[20] Carmit Hazay, Peter Scholl, and Eduardo Soria-Vazquez. 2017. Low Cost Constant Round MPC Combining BMR and Oblivious Transfer. In ASIACRYPT 2017, Part I (LNCS). Springer, Heidelberg.
[21] David Heath and Vladimir Kolesnikov. 2020. Stacked Garbling for Disjunctive Zero-Knowledge Proofs. In EUROCRYPT 2020, Part III (LNCS). Springer, Heidelberg.
[22] Russell Impagliazzo and Steven Rudich. 1989. Limits on the Provable Consequences of One-Way Permutations. In 21st ACM STOC. ACM Press.
[23] Yuval Ishai, Joe Kilian, Kobbi Nissim, and Erez Petrank. 2003. Extending Oblivious Transfers Efficiently. In CRYPTO 2003 (LNCS). Springer, Heidelberg.
[24] Yuval Ishai, Manoj Prabhakaran, and Amit Sahai. 2009. Secure Arithmetic Computation with No Honest Majority. In TCC 2009 (LNCS). Springer, Heidelberg.
[25] Marek Jawurek, Florian Kerschbaum, and Claudio Orlandi. 2013. Zero-knowledge using garbled circuits: how to prove non-algebraic statements efficiently. In ACM CCS 2013. ACM Press.
[26] Eleftheria Makri, Dragos Rotaru, Frederik Vercauteren, and Sameer Wagh. 2021. Rabbit: Efficient Comparison for Secure Multi-Party Computation. Financial Crypto 2021.
[27] Moni Naor and Benny Pinkas. 1999. Oblivious Transfer and Polynomial Evaluation. In 31st ACM STOC. ACM Press.
[28] Dragos Rotaru and Tim Wood. 2019. MArBled Circuits: Mixing Arithmetic and Boolean Circuits with Active Security. In INDOCRYPT 2019 (LNCS). Springer, Heidelberg.
[29] Peter Scholl. 2018. Extending Oblivious Transfer with Low Communication via Key-Homomorphic PRFs. In PKC 2018, Part I (LNCS). Springer, Heidelberg.
[30] Phillipp Schoppmann, Adrià Gascón, Leonie Reichert, and Mariana Raykova. 2019. Distributed Vector-OLE: Improved Constructions and Implementation. In ACM CCS 2019. ACM Press.
[31] Chenkai Weng, Kang Yang, Jonathan Katz, and Xiao Wang. 2021. Wolverine: Fast, Scalable, and Communication-Efficient Zero-Knowledge Proofs for Boolean and Arithmetic Circuits. 42nd IEEE Symposium on Security and Privacy (Oakland 2021).
[32] Chenkai Weng, Kang Yang, Xiang Xie, Jonathan Katz, and Xiao Wang. 2021. Mystique: Efficient Conversions for Zero-Knowledge Proofs with Applications to Machine Learning. In 30th USENIX Security Symposium (USENIX Security 21). 501–518.
[33] Kang Yang, Pratik Sarkar, Chenkai Weng, and Xiao Wang. 2021. QuickSilver: Efficient and Affordable Zero-Knowledge Proofs for Circuits and Polynomials over Any Field. 28th ACM Conference on Computer and Communications Security (CCS 2021).
[34] Kang Yang, Chenkai Weng, Xiao Lan, Jiang Zhang, and Xiao Wang. 2020. Ferret: Fast Extension for Correlated OT with Small Communication. In ACM CCS 2020. ACM Press.
[35] Samee Zahur, Mike Rosulek, and David Evans. 2015. Two Halves Make a Whole - Reducing Data Transfer in Garbled Circuits Using Half Gates. In EUROCRYPT 2015, Part II (LNCS). Springer, Heidelberg.

### Commitment Functionalities

#### Functionality \( F_{2,𝑀} \)
**ComZK**
- **Homomorphic Commitment Functionality \( F_𝑅 \)**
  - The functionality communicates with two parties P and V, as well as an adversary S that may corrupt either party. S may at any point send a message (abort), upon which \( F_𝑅 \) sends (abort) to all parties and terminates. \( F_𝑅 \) contains a state st that is initially ∅.
  
  - **Random On input (Random, id) from P, V and where (id, ·) ∉ st:**
    1. If P is corrupted, obtain \( x_{\text{id}} \in 𝑅 \) from S. Otherwise, sample \( x_{\text{id}} \in_R 𝑅 \) uniformly at random.
    2. Set st ← st ∪ {(id, \( x_{\text{id}} \))} and send \( x_{\text{id}} \) to P.
    - Shorthand: [𝑥] ← Random().
  
  - **Affine Combination On input (Affine, id𝑜, id1, ..., id𝑛, 𝛼0, ..., 𝛼𝑛) from P, V where (id𝑖, \( x_{\text{id𝑖}} \)) ∈ st for 𝑖 = 1, ..., 𝑛 and (id𝑜, ·) ∉ st:**
    1. Set \( x_{\text{id𝑜}} \leftarrow \sum_{i=1}^n \alpha_i \cdot x_{\text{id𝑖}} + \alpha_0 \).
    2. Set st ← st ∪ {(id𝑜, \( x_{\text{id𝑜}} \))}.
    - Shorthand: [𝑧] ← 𝑎 · [𝑥] + [𝑦] + 𝑏.
  
  - **CheckZero On input (CheckZero, id1, ..., id𝑛) from P, V and where (id𝑖, \( x_{\text{id𝑖}} \)) ∈ st for 𝑖 = 1, ..., 𝑛:**
    1. If \( x_{\text{id1}} = \cdots = x_{\text{id𝑛}} = 0 \), then send (success) to V; otherwise, send (abort) to all parties and terminate.
    - Shorthand: CheckZero([𝑥1], ..., [𝑥𝑛]).
  
  - **Input On inputs (Input, id, 𝑥) from P and (Input, id) from V and where (id, ·) ∉ st:**
    1. Set st ← st ∪ {(id, 𝑥)}.
    - Shorthand: [𝑥] ← Input(𝑥).
  
  - **Open On input (Open, id1, ..., id𝑛) from P, V where (id𝑖, \( x_{\text{id𝑖}} \)) ∈ st for 𝑖 = 1, ..., 𝑛:**
    1. Send \( x_{\text{id1}}, ..., x_{\text{id𝑛}} \) to V.
    - Shorthand: 𝑥1, ..., 𝑥𝑛 ← Open([𝑥1], ..., [𝑥𝑛]).
    - Additional macro: 𝑥 ← Open([𝑥], lst) denotes that P sends 𝑥 to V and they add [𝑥] − 𝑥 to the list lst.