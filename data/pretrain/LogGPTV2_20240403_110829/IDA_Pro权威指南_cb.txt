 则读取大端）。这个特性有助于我们减少调用在加载过程中所需的字节交换函数的次数。如果已经确定所需幻数的位置，那么最后，accept_simpleton_file
 函数会将文件格式的名称复制到fileformatname
 输出参数中，然后返回1 ，表示已识别文件格式。
对“傻瓜式”加载器而言，如果用户选择使用File ▶ New 而非File ▶ Open加载一个“傻瓜式”文件，那么不需要任何特殊处理，也就不需要使用 init_loader_options
 函数。因此，下一个被调用的函数将是 load_simpleton_file
 ，如下所示：
void idaapi load_simpleton_file(linput_t *li, ushort neflags, const char *) {  
   simpleton hdr;  
   //read the program header from the input file  
   lread(li, &hdr, sizeof(simpleton));  
   //load file content into the database  
   file2base(li, sizeof(simpleton), hdr.base, hdr.base + hdr.size,  
             FILEREG_PATCHABLE);  
   //create a segment around the file's code section  
   if (!add_segm(0, hdr.base, hdr.base + hdr.size, NAME_CODE, CLASS_CODE)) {  
      loader_failure();  
   }  
   //retrieve a handle to the new segment  
   segment_t *s = getseg(hdr.base);  
   //so that we can set 32 bit addressing mode on (x86 has 16 or 32 bit modes)  
   set_segm_addressing(s, 1);  //set 32 bit addressing  
   //tell IDA to create the file header comment for us.  Do this  
   //only once. This comment contains license, MD5,  
   // and original input file name information.  
   create_filename_cmt();  
   //Add an entry point so that the processor module knows at least one  
   //address that contains code.  This is the root of the recursive descent  
   //disassembly process  
   add_entry(hdr.base, hdr.base, "_start", true);  
}
加载器的 load_file
 函数完成大部分加载工作。我们的“傻瓜式”加载器执行以下任务。
使用diskio.hpp中的lread
 函数从文件中读取“傻瓜式”头部，lread
 函数非常类似于 POSIX read函数。
使用loader.hpp 中的file2base
 函数将文件中的代码节加载到数据库中的适当地址空间。
使用segment.hpp中的add_segm
 函数创建一个新数据库段，其中包含新加载的字节。
通过调用 segment.hpp中的 getseg
 和set_segm_addressing
 函数，为我们的新代码段指定32位寻址。
使用loader.hpp 中的create_filename_cmt
 函数生成一段数据库头部注释。
使用entry.hpp 中的add_entry
 函数添加一个程序入口点，为处理器模块的反汇编过程提供一个起点。
对加载器而言，file2base
 是一个“主力”函数，它的原型如下所示：
int ida_export file2base(linput_t *li, long pos, ea_t ea1, ea_t ea2, int patchable);
这个函数从所提供的 linput_t
 中读取字节，linput_t
 以pos
 指定的文件位置为起始地址。这些字节被加载到数据库中地址 ea1
 与ea2
 （不包括ea2
 ）之间的空间中。所读取的总字节数由ea2-ea1
 计算得出。patchable
 参数指明IDA 是否应维护文件偏移量与它们在数据库中的对应位置之间的内部映射。要维护这样一个映射，应将这个参数设置为FILEREG_PATCHABLE
 ，以生成 IDA的.dif 文件，如第 14 章所述。
add_entry
 函数是加载过程中另外一个重要的函数。反汇编过程只能从已知包含指令的地址开始。通常，对递归下降反汇编器来说，通过解析一个文件的入口点（如导出函数），即可获得这类地址。add_entry
 函数的原型如下所示：
bool ida_export add_entry(uval_t ord, ea_t ea, const char *name, bool makecode);
参数ord
 供按序号（而不仅是函数名）导出的导出函数使用。如果入口点没有相关的序号，应设置ord
 使用和 ea
 参数相同的值。ea
 参数指定入口点的有效地址，而 name
 参数则指定与入口点有关的名称。通常，IDA 会对程序的初始执行地址使用符号名称_start
 。布尔型 makecode
 参数规定是（真）否（假）将指定的地址作为代码处理。导出的数据项（如加载器模块中的LSDC
 ）就属于非代码进入点。
在“傻瓜式”加载器中，我们执行的最后一个函数是save_simpleton_file
 ，它用于根据数据库内容创建一个“傻瓜式”文件。执行过程如下所示：
int idaapi save_simpleton_file(FILE *fp, const char *fileformatname) {  
   uint32 magic = SIMPLETON_MAGIC;  
   if (fp == NULL) return 1;   //special case, success means we can save files  
   segment_t *s = getnseg(0);  //get segment zero, the one and only segment  
   if (s) {  
      uint32 sz = s->endEA - s->startEA;    //compute the segment size  
      qfwrite(fp, &magic, sizeof(uint32));  //write the magic value  
      qfwrite(fp, &sz, sizeof(uint32));     //write the segment size  
      qfwrite(fp, &s->startEA, sizeof(uint32));  //write the base address  
      base2file(fp, sizeof(simpleton), s->startEA, s->endEA); //dump the segment  
      return 1;  //return success  
   }  
   else {  
      return 0;  //return failure  
   }  
}
loader_t
 的save_file
 函数接受一个 FILE
 流指针fp
 ，save_file
 函数应向这个指针写入它的输出。fileformatname
 参数的名称与加载器的 accept_file
 函数的参数的名称相同。如前所述，调用save_file
 函数，是为了响应 IDA 的File ▶ Produce File ▶ Create EXE File 命令。为了响应这个命令，最初，IDA 会调用 save_file
 函数，并将 fp
 设置为NULL。如果以这种方式被调用，save_file
 函数将接受查询，以确定它是否能够生成fileformatname
 指定的输出文件类型。这时，如果save_file
 无法创建指定的文件类型，它应返回 0；否则，它应返回 1。例如，只有在数据库中存在特定的信息时，加载器才能创建一个有效的输出文件。
如果使用有效的（非NULL ）FILE
 指针调用，save_file
 应将一个有效的输出文件写入到所提供的FILE
 流中。遇到这类情况，IDA 将在向用户显示“保存文件”对话框后创建FILE
 流。
IDA 和FILE指针
如果你开发用于 Windows 版本的IDA 的模块，fpro.h 文件提到IDA FILE
 流的一个非常重要的行为，这一行为也源于一个事实，即 IDA 的核心 DLL——ida_wll.dll是使用Borland工具构建的。简而言之，程序模块之间不能共享 Borland FILE
 指针，否则，可能会导致访问冲突，甚至会令 IDA 崩溃。为解决这个问题，IDA 以qfxxx
 （如qfprintf
 ，在 fpro.h
 中声明）的形式提供全套的包装函数，以替代标准的 C 风格FILE
 操纵例程（如 fprintf
 ）。在使用这些函数时，需要注意的是，qfxxx
 函数并不总是和它们的 C 风格对应函数（例如 qfwrite
 和fwrite
 ）使用相同的参数。如果希望使用 C 风格的FILE 操纵函数，请务必遵循以下规则。
将fpro.h 包含到你的模块中之前，必须定义 USE_STANDARD_FILE_FUNCTIONS
 宏。
禁止在C 风格的FILE函数中使用IDA 提供的FILE指针。
禁止在IDA 的qfxxx 函数中使用从 C 库函数中获得的 FILE指针。
回到save_simpleton_file
 函数，在实现save_file
 的功能时，唯一真正有用的函数是base2file
 函数，它与我们在 load_simpleton_file
 中使用的file2base
 函数相对应。base2file
 函数只是将一系列数据库值写入到所提供的一个 FILE
 流中的指定位置。
虽然“傻瓜式”文件格式几乎没有任何用处，但它可用于一个目的：我们可通过它展示IDA加载器模块的核心功能。该“傻瓜式”加载器的源代码可在本书网站上找到。
18.4.2  构建IDA 加载器模块
除了一些细微的差别外，构建和安装IDA 加载器模块的过程与第 17 章讨论的构建 IDA 插件模块的过程几乎完全相同。首先，Windows 和Liunx平台使用的加载器文件扩展名分别为.ldw/.l64和.llx/.llx64 。其次，在构建加载器时，我们将新建的加载器存储在/bin/loaders 目录中（这属于个人喜好）。最后，通过将已编译的加载器二进制文件复制到/loaders 目录中，我们可以安装加载器模块。对代码清单 17-1 中的生成文件稍作修改，将 PLUGIN_EXT
 变量更改为一个反映正确的加载器文件扩展名的LOADER_EXT
 变量，将idabook_plugin
 的全部引用更改为simpleton