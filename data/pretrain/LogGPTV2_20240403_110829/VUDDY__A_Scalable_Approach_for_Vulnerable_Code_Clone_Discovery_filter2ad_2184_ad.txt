u
n
i
m
n
i
(
e
m
T
i
(cid:13)
•
◦
(cid:13)
(cid:2)
0
2
1 K
•
◦
(cid:13)
(cid:2)
2
10 K
◦
•
•
◦
(cid:13)
(cid:2)
(cid:2)
2
2
100 K
10 M
Size of target (LoC, logscaled)
◦
•
(cid:13)
(cid:2)
2
1 M
(cid:2)
•
◦
2
(cid:2)
•
100 M
1 B
Fig. 6: Execution time when varying size of target programs
were given to VUDDY, SourcererCC, ReDeBug, DECKARD,
and CCFinderX. DECKARD and CCFinderX scaled up to 10
MLoC and 100 MLoC, respectively, then failed to execute.
Although ReDeBug and SourcererCC scales to 1 BLoC, their
growth rates of time are much steeper than that of VUDDY.
we focus on comparing the accuracy of VUDDY and other
clone detection techniques: SourcererCC, DECKARD, and
CCFinderX. These techniques are not aimed at detecting
“vulnerable” clones, and thus are not accurate when ﬁnding
security vulnerabilities. On the other hand, ReDeBug is de-
signed for detecting vulnerable code clones. Thus, we compare
VUDDY with ReDeBug in detail in section VIII.
To evaluate accuracy on the most equitable basis possible,
we decided to conduct clone detection using each technique,
then manually inspect every reported clones. The result of
clone detection between our vulnerability database and Apache
HTTPD 2.4.23 (352 KLoC) is shown in Table III. As it is
very challenging to ﬁnd literally every vulnerability (including
unknown vulnerabilities) in the target program, we cannot
easily determine false negatives of tested techniques. To be
clear, values of the FN column in Table III only accounts for
indisputable false negatives. For example, FN of VUDDY is
the number of code clones detected by the other techniques
that are not false positives, but not detected by VUDDY. We
reused the conﬁgurations of Table II except for the minimum
similarity threshold settings.
VUDDY reported 9 code clones in 22 seconds, and all of the
ﬁndings were unpatched vulnerable clones in Apache HTTPD
2.4.23. SourcererCC with 100 % similarity setting also had
precision of 1.0, but reported only one true positive case. It
missed 8 vulnerable clones which VUDDY detected, because
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:26:17 UTC from IEEE Xplore.  Restrictions apply. 
TABLE III: Accuracy of VUDDY, SourcererCC, DECKARD,
and CCFinderX when detecting clones between the vulnera-
bility database and Apache HTTPD 2.4.23.
FP
0
0
54
54
458
63
SourcererCC (100)∗
SourcererCC (70)∗
DECKARD (100)∗
DECKARD (85)∗
Time
22 s
122 s
125 s
58 s
234 s
1201 s
Precision
1.000
1.000
0.036
0.053
0.009
0.147
Rep†
9
1
56
57
462
74
TP
9
1
2
3
4
11
FN
2
8
7
8
8
1
Technique
VUDDY
CCFinderX
∗ The values between parentheses denote minimum similarity threshold
conﬁguration in percent
† Denotes the number of clones each technique reported
of its ﬁltering heuristics. We lowered the minimum similarity
threshold to 70 %, expecting that SourcererCC might detect
more true positive cases. However, it ended up detecting only
two legitimate vulnerable clones, whereas introducing 54 false
positives. DECKARD with minimum similarity set to 100 %
reported 57 clones, and 54 cases were conﬁrmed to be false
positives. This shows that two perfectly matching abstract
syntax trees are not necessarily generated from the same
code fragments. Furthermore, when the minimum similarity
threshold was set to 85 %, DECKARD detected only 4 true
positive clones, with 458 false positives. This result accords
with the observation of Jiang, et al. [29] which claims that
DECKARD has 90 % false positive. CCFinderX was the only
technique that reported more true positive cases than those of
VUDDY. However, 63 out of 74 reported clones were false
positives, and CCFinderX required the most time to complete.
We analyzed the false positive cases of each tool, and
discovered a fatal ﬂaw of the compared techniques. In most
of the false positive cases, SourcererCC, DECKARD, and
CCFinderX falsely identiﬁed patched functions in the target as
clones of unpatched functions in the vulnerability database. We
present one case in which patched benign function is identiﬁed
as a clone of old, vulnerable version of the function, by all
techniques but VUDDY. In Listing 3, we can observe that the
statements removed and added by the patch are quite similar.
Eventually, the unpatched function and patched function have
so similar structure and tokens that SourcererCC, DECKARD,
and CCFinderX misleadingly report them as a clone pair.
We also analyzed the false negative cases. VUDDY did not
detect two vulnerable functions that both SourcererCC (70 %
similarity threshold) and DECKARD detected. The sole reason
is that some lines of code, other than the vulnerable spot ad-
dressed by security patches, were modiﬁed in the function. We
currently have vulnerable functions of the repository snapshots
right before the security patches are applied. However, this is a
trivial issue that can be easily resolved, because we can retrieve
every different versions of a vulnerable function and add them
in our database. For example, a command “git log -p
filename” retrieves the entire change history of the queried
ﬁle. Older snapshots of vulnerable functions are naturally
obtained from the change history, and we can insert these
into our vulnerability database. From a different standpoint,
it is very surprising that SourcererCC and DECKARD have
more false negatives than VUDDY has. For these cases they
604
failed to identify two identical functions as clones, implying
that these techniques are not complete (see Equation 2).
Listing 3: Snippet of the patch for CVE-2015-3183 which
is already applied in request.c of Apache HTTPD 2.4.23.
1 - if (access_status == OK) {
2 - ap_log_rerror(APLOG_MARK, APLOG_TRACE3, 0, r,
3 - "request authorized without authentication by "
4 - "access_checker_ex hook: %s", r->uri);
5 - }
6 - else if (access_status != DECLINED) {
7 - return decl_die(access_status, "check access", r);
8 ...
9 + else if (access_status == OK) {
10 + ap_log_rerror(APLOG_MARK, APLOG_TRACE3, 0, r,
11 + "request authorized without authentication by "
12 + "access_checker_ex hook: %s", r->uri);
13 + }
14 + else {
15 + return decl_die(access_status, "check access", r);
In summary, although Apache HTTPD is a moderately-sized
project consisting of 350 KLoC, a lot of false positive cases
are reported by techniques other than VUDDY. It is only
logical that the bigger a target program is, the more false
alarms are generated. Therefore, we conﬁdently conclude that
SourcererCC, DECKARD, and CCFinderX are not suitable for
detecting vulnerable clones from large code bases, as they will
report so many false positive cases which cannot be handled by
restricted manpower. Moreover, SourcererCC and DECKARD
had more false negatives than VUDDY had.
D. Exact-matching vs Abstract matching
Our abstraction scheme enables VUDDY to detect variants
of known vulnerabilities. We tested VUDDY with an Android
ﬁrmware (14.9 MLoC). VUDDY reported 166 vulnerable
clones without abstraction and 206 clones with abstraction.
This means that VUDDY detects 24 % more clones with
abstraction, which are unknown vulnerabilities. We manually
inspected the clones, and identiﬁed no false positive.
VIII. IN-DEPTH COMPARISON WITH REDEBUG
In subsection VII-C, we compared VUDDY with other
clone detection techniques of which the designs do not con-
sider vulnerability preservation in clones. Here, we compare
VUDDY with ReDeBug, a line-based vulnerability detection
technique which takes advantage of security patches to ﬁnd
vulnerability. The sole purpose of ReDeBug is to scalably ﬁnd
vulnerable code clones, which we believe to be very similar
to our purpose. As ReDeBug takes a different design choice,
(i.e., line-level granularity) for clone detection, we compare
VUDDY and ReDeBug in detail to demonstrate the efﬁciency
and effectiveness of VUDDY. Three major advantages of
VUDDY over ReDeBug are as follows:
• VUDDY is twice faster than ReDeBug.
• VUDDY has far less false positive than ReDebug.
• VUDDY is capable of detecting Type-2 clones, but
ReDeBug is not.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:26:17 UTC from IEEE Xplore.  Restrictions apply. 
TABLE IV: Comparison of VUDDY and ReDeBug, targeting
Android ﬁrmware (14.86 MLoC, 349 K functions).
VUDDY
17 m 3 s
206
0
206
0
206
25
ReDeBug
28 m 15 s
2,090
1,845
245
43
202
21
181
Time to complete
# initial reports
# multiple counts
# unique clones
# false positives
# end result
# unique ﬁndings
# common ﬁndings
Preprocessing
Clone detection
1023
1019
676
1.04
VUDDY
ReDeBug
)
d
e
l
a
c
s
g
o
l
,
c
e
s
n
i
(
e
m
T
i
10000
1000
100
10
1
Fig. 7: Time required for preprocessing and clone detection.
A. Speed
The result of comparison is summarized in Table IV. In
terms of speed, VUDDY is faster than ReDeBug. When
querying 9,770 CVE patches targeting Android ﬁrmware (14.9
MLoC, using kernel version 3.18.14), VUDDY required 17
minutes and 3 seconds. Meanwhile, ReDeBug using the same
default parameters (n = 4, c = 3, where n is the number
of lines per window, and c is the amount of context) used by
Jang et al. [18] in their experiment, required 28 minutes and 15
seconds for clone detection. In fact, VUDDY required 1,023
seconds for preprocessing and for the ﬁngerprint generation
procedure, and the actual clone detection required only 1.04
seconds, as illustrated in Fig. 7. Note that once the prepro-
cessing is complete, VUDDY does not need to regenerate the
ﬁngerprint dictionary for every clone detection. Thus, we can
argue that VUDDY detects vulnerable code clones at a speed
more than twice faster than ReDeBug, in practice.
B. False positive
VUDDY overwhelms ReDeBug with decisive margin, with
respect to accuracy. No false positive was reported by VUDDY.
However, we conducted a manual inspection for 12 hours
with 2,090 code clones reported by ReDeBug to ﬁnd that
1,845 (88.3 %) of these code clones were duplicates, because
ReDeBug counts the number of CVE patches rather than the
number of unpatched spots in the target code. After removing
duplication, the number of clones reduced to 245. Then, we
were able to ﬁnd 43 (17.6 %) false positives among the 245
unique code clones through a further inspection. The false
positive cases were attributed to two causes: ReDeBug is
language agnostic, and there is a technical limitation in their
approach.
The language agnostic nature of ReDeBug causes the
technique to ﬁnd code clones of trivial patches (i.e., hardly
related to vulnerability), such as patches that modify macro
statements, structs, and header inclusion or exclusion. For
example, the patch for CVE-2013-0231 adds header inclusion
statements to the beginning of pciback_ops.c in the xen
driver of Linux kernel. The patch for CVE-2015-5257 adds an
initialization statement of a struct member variable. Although
ReDeBug found and reported that these patches are not applied
in the Android smartphone, these unpatched code cannot be
vulnerabilities. On the other hand our mechanism targets only
the functions, and therefore refrains from reporting such trivial
code clones.
ReDeBug also has a technical limitation that contributes
to the false positives. When ReDeBug processes the patches,
it excludes the lines preﬁxed by a “+” symbol
to obtain
the original buggy code snippet, and then removes curly
braces, redundant whitespaces and comments from the snippet.
When searching for the snippet in the target source code,
the lack of context
leads to false positives. For example,
ReDeBug reported a benign function in xenbus.c as an
unpatched vulnerability, where the patch actually adds a line of
comment to the original source code without making any sig-
niﬁcant changes to other lines of code. Even worse, ReDeBug
erroneously detected the nr_recvmsg function shown in
Listing 4, although the corresponding patch in Listing 5 is
already applied. In this case, the sequence of lines 3, 6, 8,
and 9 in the patch exactly matches lines 3, 4, 6, and 7 of
the function in Listing 4 after preprocessing. This example
reveals the limitation of a line-level granularity, responsible
for causing false positives.
Listing 4: nr recvmsg function in Android ﬁrmware which
is erroneously reported as vulnerable by ReDeBug.
1
2
3
4
5
6