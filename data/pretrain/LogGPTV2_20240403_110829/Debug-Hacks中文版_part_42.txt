所谓错误注入，就是在测试软件时故意使之出错，以执行通常不会执行到的错误
参考文献
等，如果有OOMKiller的输出，就说明发生了内存不足。
本 hack 介绍了 OOM Killer 的原理和设置行为。系统动作异常时检查一下 syslog
总结
RHEL5 中不再有/proc/sys/vm/oom-kill。
Linux内核的错误注入
程序内许多位置上的错误处理代码。
一般程序中，执行内存分配函数后都会有内存分配失败时的错误处理代码，或是
失败。
stress
 http://weather.ou.edu/~apw/projects/stress/
本 hack 介绍 Linux 内核选项中的错误注入(ftault injection）。
错误注入
www.TopSage.com
HACK#57错误注入|323
-大岩尚宏
331
---
## Page 342
332>
表 6-3错误注入的种类
分配器（请参见《深入理解Linux 内核第3版》3等书)。
根据用途，Linux 内核内部进行的内存分配有很多种，而最常用的一种就是 slab
slab分配器
错误注入；还实现了表6-3 列出的各种实用的错误注入。
内存分配成功时，返回已分配的内存地址，失败则返回 NULL 指针。
器失败是最合适的。
此处的目的是尽量测试多个位置的错误处理，找出更多的 bug，因此让 slab 分配
下面介绍一下 failslab，它实现了 slab 分配器的内存分配的错误注入。
failslab
该功能可以在2.6.21版本以后使用。但是，fail_io_timeout在 2.6.28版本以后才被
324|第6章高手们的调试技术
注3：
使之失败（kmalloc()函数返回 NULL 指针)。
启用 failslab后，即使实际上 slab 分配器可以分配内存，也可以按照指定的条件
逻辑与，GFP 标志指示分配的内存属性和查找空闲内存时的行为。
size参数以字节为单位指定要分配的内存大小，gfp_mask参数为多个 GFP 标志的
下面以 slab 分配器中的典型内存分配函数 kmalloc()为例介绍一下。
支持。
fail_io_timeout
void *kmalloc(size_t size, gfp_t flags)
fail_make_request
failslab
fail_page_alloc
种类
《深入理解Linux 内核第3版》，中国电力出版社，2007年，ISBN：9787508353944。
www.TopSage.com
磁盘 I/O 超时
磁盘 I/O请求失败
slab分配器内存分配失败
页面分配器内存分配失败
说明
—译者注
---
## Page 343
probability:
向这些文件写入值即可改变设置，读取这些文件即可知道当前设置。
failslab 目录中的文件如下所示（后文的运行范例中，debugfs 的挂载目录为
产生错误注入的条件，要通过 debugfs 挂载目录下的 failslab 目录中的文件设置。
设置参数
2．从顶层菜单的 Kernel hacking 中选择 Fault-injection framework，就会显示下
/debugfs)。
1．从顶层菜单的 General setup 选择 Choose SLAB allocator，再选择 SLAB 或
用 make menuconfig配置的话，启用上述 4 个选项的步骤如下。
要启用failslab，
启用failslab
例如，将 probability设置为 1，那么调用 slab 分配器的内存分配函数时，就会
用百分比指定错误注入发生的比例（初始值为0)。
ignore-gfp-wait interval probability space task-filter times verbose
$ ls /debugfs/fail _page_alloc
 Debugfs entries for fault-injection capabilities
 Fault-injection capability for kmalloc()
面两个选项，将它们都选中。
只支持SLAB和SLUB（2.6.29版本以前的内核仅支持SLAB）。
这里可以选择3种 slab 分配器的实现（SLAB、SLUB、SLOB），但failslab
SLUB.
 CONFIG_FAULT_INJECTION_DEBUG_FS
CONFIG_FAILSLAB
 CONFIG_FAULT_INJECTION
CONFIG_SLAB 或 CONFIG_SLUB
应当在内核中启用以下4个选项。
www.TopSage.com
HACK#57错误注入丨325
334
333
---
## Page 344
FAULT_INJECTION: forcing a failure
verbose:
space:
times:
interval:
326 1
Call Trace:
Pid: 2237, comm: rsyslogd Not tainted 2.6.28-rc9 #9
$ dnesg
设置为2时，除了上述信息之外，还会显示错误发生时的调用跟踪。
设置为1时，错误注入引发失败时，内核日志中输出以下信息。
设置错误注入发生时的内核信息的详细程度（初始值为2)。
到40MB之前，错误注入不会引发内存分配失败（初始值为0)。
例如，将 space 设置为 41943040（=40MB），那么 slab 分配器分配的内存数量达
设置产生错误注入之前的内存分配总量，单位为字节。
设置为-1，就一直发生（初始值为1)。
例如，设置times 为10，内存分配就仅失败10 次。
设置错误注入发生次数的上限。
置为较大的数值。
要想让失败概率小于 1%，可以将 probability设置为1以上，再将 interval设
足导致的内存分配失败，当然不受影响。
内存分配就不会失败。但是，那些不是由于错误注入导致，而是真正的内存不
例如，将interval 设置为100，那么 slab 分配器的内存分配失败之后的100次
设置发生一次错误注入之后，
FAULT_INJECTION: forcing a failure
第6章高手们的调试技术
www.TopSage.com
不再发生错误的次数(初始值为1)。
---
## Page 345
[运行范例]
task-filter:
$ sh failcmd 
failcmd脚本
失败。
也会继承该属性，因此用下面的脚本执行命令，就能仅让命令中的slab分配器
在其他进程的上下文环境及中断上下文环境中，不会失败。fork生成的子进程
这样，只有在该进程的上下文环境中的 slab 分配器的内存分配，才会失败。
fail中写入1。
启用后，假设要进行错误注入的进程ID为，就要在/proc//make-it-
设置是否仅在特定进程上进行错误注入。Y为启用，N为禁用（初始值为N）。
设置为0则不会显示任何信息。
[]ext3_ordered_writepage+0xd1/0x17b[ext3]
[]bvec_alloc_bs+0x90/0xd7
[]?mempool_alloc_slab+0x11/0x13
[]mempool_alloc+0x4a/0x106
[] mempool_alloc_slab+0x1l/0x13
[]should_failslub+0x2b/0x34
[]should_fail+0xc5/0x101
[]block_write_full_page+0xd2/0xd7
[]?ext3_get_block+0x0/0xfc[ext3]
[]..
[]submit_bh+0x68/0x109
[]bio_alloc+0x10/0x1f
[]bio_alloc_bioset+0x74/0xca
[]?mempool_alloc+0x4a/0x106
[]kmem_cache_alloc+0x20/0xb0
echo1>/proc/self/make-it-fail
#!/bin/sh
exec$@
-_block_write_full_page+0x1d8/0x2da
www.TopSage.com
336
---
## Page 346
将错误注入的发生次数限制为 10 次。这是为了防止设置错误等导致错误注入无
下面来试试引发错误注入。尝试可能导致kermel panic 或文件系统被破坏，因此要
引发错误注入
#58
限发生，从而陷入无法操作的状态。
参考文献
本 hack 介绍了Linux 内核的附加功能一
总结
ignore-gfp-wait:
328 1第6章高手们的调试技术
在测试环境中进行。
 # echo 10 > /debugfs/failslab/times
Linux 内核的潜在 bug"。
时，通常要结合使用task-filter。详情参见“HACK#58利用错误注入发现
误注入。设置为 Y，不发生错误注入，N 则发生（初始值为 Y)。禁用该设置
设置在分配 slab 时指定的 GFP 掩码中如果包含__GFP_WAIT标志时，是否引发错
http://www.nongnu.org/failmalloc/
Failmalloc
 http://en.wikipedia.org/wiki/Fault_ injection
Wikipedia: Fault injection
Documentation/fault-injection/fault-injection.txt
内核自带文档 fault-injection.txt
在 bug 的步骤。
本 hack 以 failslab 为例，介绍利用错误注入技术发现 Linux 内核的潜
利用错误注入发现Linux内核的潜在bug
www.TopSage.com
—错误注入（fault injection）。
—美田晃伸
---
## Page 347
然后禁用 ignore-gfp-wait 并启用task-filter。
先把发生概率设置为0%，使错误注入不再发生。
造成影响。
而结束，因此禁用 ignore-gfp-wait 时，要结合使用 task-filter，避免给其他进程
相应地，如果对所有进程一视同仁，那么用户应用程序就可能由于系统调用失败
通常无法复现的内核 bug 的可能性就提高了。
不可能失败。也就是说，本例中许多根本执行不到的错误处理也能被执行，引发
指定了_GFP_WAIT标志的 slab 分配会在找不到空闲内存时睡眠，因此实际上几乎
ignore-gfp-wait。这样，即使在 slab 分配时指定了__GFP_WAIT标志也会失败。
刚才的例子中启用了ignore-gfp-wait（默认），下面的例子中禁用了
让几乎不会失败的 slab 分配过程失败
错误注入就不会发生。
times 由 10变成了 0，因此错误注入已发生了10次。以后只要不重新设置 times,
的发生次数。
志信息就可以知道。这里将 times 设置为 10，因此只需显示 times 就能知道正确
实际有无发生错误注入，只要将 verbose 设置为1以上，再用 dmesg 查看内核的日
错误注入多与压力测试组合进行，这里仅用简单的命令为系统增加负载。
错误注入的发生概率设置为1%。设置之后，错误注入就可以发生了。
 # echo N > /debugfs/failslab/ignore-gfp-wait
 # echo θ > /debugfs/failslab/probability
# cat /debugfs/failslab/times
# d if=/dev/zero of=/tmp/junk
# echo 1 > /debugfs/failslab/probability
# echo Y > /debugfs/failslab/task-filter
~C
HACK#58 利用错误注入发现 Linux 内核的潜在 bug 1  329
www.TopSage.com
338
---
## Page 348
像上面的例子那样，错误注入可以跟各种压力测试结合运行。下面的内核日志就
dd 命令中，write 系统调用产生了错误注入，导致内存分配失败，dd命令结束。
内核发生 Oops
行权限)。
即可（请将[HACK#57]介绍的 failcmd脚本放在 PATH包含的目录中，并设置好执
要像刚才的例子那样使用 dd命令进行测试，只需将命令作为 failcmd脚本的参数
本次启用了task-filter，因此只有明确指定的命令上才会发生错误注入。
跟刚才的例子一样，将错误注入发生次数设置为10，发生概率设置为1%。
330
bsaup $
53248 bytes (53 kB) copied, 0.00176169 s, 30.2 MBps
# failcmd dd if=/dev/zero of=/tmp/junk 
 # echo 1 > /debugfs/failslab/probability 
dd: writing to ^/tmp/junk': Cannot allocate memory
 # echo 10 > /debugfs/failslab/times
[] ? ext4_mark_iloc_dirty+0x454/0x4da [ext4]
[] kmem_cache_alloc+0x18/0xfe
[] should_ fail+0xc5/0x101 
Call Trace:
Pid: 8187, comm: mincore01 Not tainted 2.6.28-rc9 #6
FAULT_INDECTION: forcing a failure 
[] ext4_truncate+0x175/0x4d4 [ext4]
[]  should_failslab+0x36/0x3f
104+0recordsout
105+0 records in
[] ext4_free_data+0xb0/0x103[ext4]
[] ext4_clear_blocks+0xe8/0xf4 [ext4]
[] ext4_free_blocks+0x7b/0xcf [ext4]
]ext4_mb_free_blocks+0x36d/0x5dd [ext4]
第6章高手们的调试技术
www.TopSage.com
---
## Page 349
0000232482540 ffff880032482540 ffff88003ecb5cc0 ffff88002a8b8000
Stack:
ffff88003d00c240)
Process mincore01 (pid: 8187, threadinfo ffff8800099a4000, task
DR3: 0000000000000000 DR6: 00000000ffffOff0 DR7: 0000000000000400
DRO: 00000000000000 D
3
3
R13:
R10:
RBP:
RDX:
RSP: 0018:ffff8800099a5b08 EFLAGS: 00010202
ext4_mb_free_metadata+0x6b/0x336 [ext4]
RIP: 0010: [] []
Pid: 8187, comm: mincore01 Not tainted 2.6.28-rc9 #6
ohci_hcd ehci
ata_piix ata_generic libata sd_ mod scsi_mod ext3 jbd mbcache uhci_hcd
a  d ds a   txa  pl s
CR2:
CPU 1
last sysfs file: /sys/devices/pci000:00/0000:00:1le.0/00:0a:0c.0/local_cpus
Dops: 0002 [#1] SMP
PGD 3e8a5067 PUD 33083067 PMD 0
BUG: unable to handle kernel NULL pointer dereference at 000o0000030
[] system_call_fastpath+0x16/0x1b 
]sys_unlink+0xll/0x13
[] ? audit_syscall_entry+0x141/0x17c
]d
[]iput+0x61/0x65
] generic_delete_inode+0xc7/0x147
] ? ext4_delete_inode+0x0/0x1cc [ext4]
[] ext4_delete_inode+0x109/0x1cc [ext4]
[] ? ext4_mark_ inode_dirty+0x181/0x196 [ext4]
0000000000000030 CR3: 000000003d847000 CR4: 00000000000026e0
0010 DS: 0000 ES: 0000 (
00007fcc9a7c66f0(0000)
ffff88002a8b8000 R14: 0
0000000000000010 R
ffff8800099a5b58R
0000000000018280 R
DRl: 00000000000000 DR2: 0000000000000000
R11:0
RSI:f
do_unlinkat+0xfc/0x173
R08:
) GS: fff88003f9cd240(0000) knlGS:0000000000000000
CRO: 0000000080050033
000000000000 R15: 00000000000106e
00000000ffffffff R12: ffff88003ecb5cc8
000000000001827f R09: 00000000000000
ffffffff8143f7f0 RDI:
www.TopSage.com
: 00007fffa27f13f8
之后的调用跟踪可以看出，ext4_mb_free_metadata(）函数内发生了NULL指针访