6
HANDLE g_hMapFile;
7
LPTSTR lpBuffer;
8
9
BOOL LoadDll(DWORD dwProcessID, char* szDllPathName) {
10
11
    BOOL bRet;
12
    HANDLE hProcess;
13
    HANDLE hThread;
14
    DWORD dwLength;
15
    DWORD dwLoadAddr;
16
    LPVOID lpAllocAddr;
17
    DWORD dwThreadID;
18
    HMODULE hModule;
19
20
    bRet = 0;
21
    dwLoadAddr = 0;
22
    hProcess = 0;
23
24
    // 1. 获取进程句柄
25
    hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwProcessID);
26
    if (hProcess == NULL) {
27
        OutputDebugString("OpenProcess failed! \n");
28
        return FALSE;
29
    }
30
31
    // 2. 获取DLL文件路径的长度，并在最后+1，因为要加上0结尾的长度
32
    dwLength = strlen(szDllPathName) + 1;
33
34
    // 3. 在目标进程分配内存
35
    lpAllocAddr = VirtualAllocEx(hProcess, NULL, dwLength, MEM_COMMIT, PAGE_READWRITE);
36
    if (lpAllocAddr == NULL) {
37
        OutputDebugString("VirtualAllocEx failed! \n");
38
        CloseHandle(hProcess);
39
        return FALSE;
40
    }
41
42
    // 4. 拷贝DLL路径名字到目标进程的内存
43
    bRet = WriteProcessMemory(hProcess, lpAllocAddr, szDllPathName, dwLength, NULL);
44
    if (!bRet) {
45
        OutputDebugString("WriteProcessMemory failed! \n");
46
        CloseHandle(hProcess);
47
        return FALSE;
48
    }
49
50
    // 5. 获取模块句柄
51
    // LoadLibrary这个函数是在kernel32.dll这个模块中的，所以需要现货区kernel32.dll这个模块的句柄
52
    hModule = GetModuleHandle("kernel32.dll");
53
    if (!hModule) {
54
        OutputDebugString("GetModuleHandle failed! \n");
55
滴水逆向课程笔记  –  Win32
进程间通信  –  152
        CloseHandle(hProcess);
56
        return FALSE;
57
    }
58
59
    // 6. 获取LoadLibraryA函数地址
60
    dwLoadAddr = (DWORD)GetProcAddress(hModule, "LoadLibraryA");
61
    if (!dwLoadAddr){
62
        OutputDebugString("GetProcAddress failed! \n");
63
        CloseHandle(hModule);
64
        CloseHandle(hProcess);
65
        return FALSE;
66
    }
67
68
    // 7. 创建远程线程，加载DLL
69
    hThread = CreateRemoteThread(hProcess, NULL, 0, (LPTHREAD_START_ROUTINE)dwLoadAddr, 
lpAllocAddr, 0, &dwThreadID);
70
    if (!hThread){
71
        OutputDebugString("CreateRemoteThread failed! \n");
72
        CloseHandle(hModule);
73
        CloseHandle(hProcess);
74
        return FALSE;
75
    }
76
77
    // 8. 关闭进程句柄
78
    CloseHandle(hThread);
79
    CloseHandle(hProcess);
80
81
    return TRUE;
82
}
83
84
BOOL Init()
85
{
86
    // 创建共享内存
87
    g_hMapFile = CreateFileMapping(INVALID_HANDLE_VALUE, NULL, PAGE_READWRITE, 0, 0x1000, _MAP_);
88
    if (g_hMapFile == NULL)
89
    {
90
        printf("CreateFileMapping failed! \n");
91
        return FALSE;
92
    }
93
94
    // 映射内存
95
    lpBuffer = (LPTSTR)MapViewOfFile(g_hMapFile, FILE_MAP_ALL_ACCESS, 0, 0, BUFSIZ);
96
    if (lpBuffer == NULL)
97
    {
98
        printf("MapViewOfFile failed! \n");
99
        return FALSE;
100
    }
101
102
    return TRUE;
103
}
104
105
// 根据进程名称获取进程ID
106
DWORD GetPID(char *szName)
107
{
108
    HANDLE hProcessSnapShot = NULL;
109
    PROCESSENTRY32 pe32 = {0};
110
滴水逆向课程笔记  –  Win32
进程间通信  –  153
成功执行并控制了进程A：
111
    hProcessSnapShot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
112
    if (hProcessSnapShot == (HANDLE)-1)
113
    {
114
        return 0;
115
    }
116
117
    pe32.dwSize = sizeof(PROCESSENTRY32);
118
    if (Process32First(hProcessSnapShot, &pe32))
119
    {
120
        do {
121
            if (!strcmp(szName, pe32.szExeFile)) {
122
                return (int)pe32.th32ProcessID;
123
            }
124
        } while (Process32Next(hProcessSnapShot, &pe32));
125
    }
126
    else
127
    {
128
        CloseHandle(hProcessSnapShot);
129
    }
130
    return 0;
131
}
132
133
int main()
134
{
135
    DWORD dwCtrlCode = 0;
136
    // 指令队列
137
    DWORD dwOrderList[10] = {1, 1, 2, 3, 3, 1, 2, 1, 3, 4};
138
139
    printf("Are you ready? \n");
140
141
    getchar();
142
143
    if (Init()) {
144
        LoadDll(GetPID("Test.exe"), (char*)"C:\\Documents and Settings\\Administrator\\桌面\\test\
\B.dll");
145
    }
146
147
    for (int i = 0; i InLoadOrderModuleList);
14
    // 
15
    Cur = Head->Flink;
16
    do {
17
        // 宏CONTAINING_RECORD根据结构体中某成员的地址来推算出该结构体整体的地址
18
        ldmod = CONTAINING_RECORD(Cur, LDR_MODULE, InLoadOrderModuleList);
19
        // 循环遍历，如果地址一致则表示找到对应模块来，就进行断链
20
        if(hMod == ldmod->BaseAddress) {
21
            // 断链原理很简单就是将属性交错替换
22
            ldmod->InLoadOrderModuleList.Blink->Flink = ldmod->InLoadOrderModuleList.Flink;
23
            ldmod->InLoadOrderModuleList.Flink->Blink = ldmod->InLoadOrderModuleList.Blink;
24
25
            ldmod->InInitializationOrderModuleList.Blink->Flink = ldmod-
>InInitializationOrderModuleList.Flink;
26
            ldmod->InInitializationOrderModuleList.Flink->Blink = ldmod-
>InInitializationOrderModuleList.Blink;
27
28
            ldmod->InMemoryOrderModuleList.Blink->Flink = ldmod->InMemoryOrderModuleList.Flink;
29
            ldmod->InMemoryOrderModuleList.Flink->Blink = ldmod->InMemoryOrderModuleList.Blink;
30
        }
31
        Cur = Cur->Flink;
32
    } while (Head != Cur);
33
}
34
int main(int argc, char* argv[]) {
1