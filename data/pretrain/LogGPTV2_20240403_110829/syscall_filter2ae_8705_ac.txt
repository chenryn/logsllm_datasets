### 优化后的文本

#### 状态和保护
- **状态**: `00001000` - `MEM_COMMIT`
- **保护**: `00000020` - `PAGE_EXECUTE_READ`
- **类型**: `01000000` - `MEM_IMAGE`
- **分配基址**: `00007ffb`f6b00000
- **分配保护**: `00000080` - `PAGE_EXECUTE_WRITECOPY`
- **图像路径**: `ntdll.dll`
- **模块名称**: `ntdll`
- **加载的图像名称**: `C:\Windows\SYSTEM32\ntdll.dll`
- **映射的图像名称**: 
- **更多信息**:
  - `lmv m ntdll`
  - `!lmi ntdll`
  - `ln 0x7ffbf6b9cb50`
  - `!dh 0x7ffbf6b00000`
- **内容来源**: 1 (目标), 长度: 7b4b0

记事本在其进程虚拟内存中对 `NtCreateFile` 函数具有读取和执行权限。这是因为记事本需要确保它可以执行该函数的系统调用（syscall），并读取其返回值。

在上一篇文章中，我解释了每个应用程序的虚拟地址空间是私有的，并且一个应用程序无法更改属于另一个应用程序的数据，除非后者对其部分私有地址空间进行共享。

由于我们现在在 C# 中使用了不安全的上下文，并且穿过了托管代码和非托管代码之间的边界，因此我们需要管理程序虚拟内存空间中的内存访问，因为此时 CLR 不再为我们完成这项工作。只有这样，我们才能将参数写入 syscall，执行该代码，并为委托函数读取其返回的数据。

### 如何实现上述内容？

接下来，我将介绍一个新的函数——`VirtualProtect`。

#### 使用 VirtualProtect 函数
通过 `VirtualProtect` 函数，我们可以修改调用进程虚拟地址空间中已提交页的保护机制。这意味着，如果在 syscall 的内存地址（我们刚刚获得）使用该原生函数，我们就能将该虚拟进程内存设置为读-写-执行权限！

我们在 `Native.cs` 文件中实现该原生函数，以便在 `Syscalls.cs` 中使用它来修改汇编代码的内存保护机制。

##### C 结构
```c
BOOL VirtualProtect(
  LPVOID lpAddress,
  SIZE_T dwSize,
  DWORD  flNewProtect,
  PDWORD lpflOldProtect
);
```

看起来很简单，我们只需要将 `[flNewProtect]` 标志添加到函数中即可。

##### 实现 VirtualProtect
在 `Native.cs` 文件中实现 `VirtualProtect` 函数后，回到 `Syscall.cs` 文件，对 `memoryAddress` 指针执行 `VirtualProtect` 函数，赋予其读-写-执行权限。同时，将该原生函数放入一个 `IF` 语句中，以便在函数执行失败时抛出 `Win32Exception` 异常，显示错误代码并停止代码的执行。

确保在代码顶部添加 `using System.ComponentModel;` 语句，以便使用 `Win32Exception` 类。

##### 示例代码
```csharp
if (!Native.VirtualProtect(memoryAddress, size, PAGE_EXECUTE_READWRITE, out oldProtect))
{
    throw new Win32Exception(Marshal.GetLastWin32Error());
}
```

如果 `VirtualProtect` 执行成功，非托管 syscall 汇编代码的虚拟内存地址（即 `memoryAddress` 变量所指向的地址）现在应该已经具有了读-写-执行权限。

接下来，我们需要使用 `Marshal.GetDelegateForFunctionPointer` 将非托管函数指针转换为指定类型的委托，在此例中应转换为 `NtCreateFile` 委托。

##### 转换为 NtCreateFile 委托
```csharp
var assembledFunction = Marshal.GetDelegateForFunctionPointer<NtCreateFile>(memoryAddress);
```

完成后，我们可以通过实例化的 `assembledFunction` 委托返回 syscall 中的所有参数。

最终的 `Syscall.cs` 代码应如下所示：
```csharp
public static NTSTATUS NtCreateFile(out IntPtr FileHandle, ObjectAttributes ObjectAttributes, IO_STATUS_BLOCK IoStatusBlock, ACCESS_MASK DesiredAccess, long AllocationSize, FILE_ATTRIBUTES FileAttributes, FILE_SHARE_MODE ShareAccess, CREATE_DISPOSITION CreateDisposition, CREATE_OPTIONS CreateOptions, byte[] EaBuffer, uint EaLength)
{
    if (!Native.VirtualProtect(memoryAddress, size, PAGE_EXECUTE_READWRITE, out oldProtect))
    {
        throw new Win32Exception(Marshal.GetLastWin32Error());
    }

    var assembledFunction = Marshal.GetDelegateForFunctionPointer<NtCreateFile>(memoryAddress);
    return assembledFunction(out FileHandle, ObjectAttributes, IoStatusBlock, DesiredAccess, AllocationSize, FileAttributes, ShareAccess, CreateDisposition, CreateOptions, EaBuffer, EaLength);
}
```

### 执行 Syscall
现在我们已经实现了 syscall 逻辑，接下来要在程序中编写实际使用 `NtCreateFile` 函数的代码。

首先，确保导入了我们的静态类，以便使用所有原生函数和 syscall。

然后，初始化 `NtCreateFile` 函数所需的结构和变量，如文件句柄和对象属性。特别是 `OBJECT_ATTRIBUTES` 结构中的 `ObjectName` 属性，需要一个指向 `UNICODE_STRING` 的指针，该结构包含要打开的对象的名称（在此例中是指我们要创建的文件名）。

对于非托管代码，我们需要调用 `RtlUnicodeStringInit` 函数来初始化此结构。确保将其添加到 `Native.cs` 文件中。

##### 初始化相关结构
```csharp
// 创建文件句柄
IntPtr fileHandle;

// Unicode 字符串结构
UNICODE_STRING unicodeString;
RtlUnicodeStringInit(ref unicodeString, "C:\\Users\\User\\Desktop\\test.txt");

// OBJECT_ATTRIBUTES 结构
OBJECT_ATTRIBUTES objectAttributes;
objectAttributes.Length = (ushort)Marshal.SizeOf(typeof(OBJECT_ATTRIBUTES));
objectAttributes.RootDirectory = IntPtr.Zero;
objectAttributes.ObjectName = ref unicodeString;
objectAttributes.Attributes = 0;
objectAttributes.SecurityDescriptor = IntPtr.Zero;
objectAttributes.SecurityQualityOfService = IntPtr.Zero;

// IO_STATUS_BLOCK 结构
IO_STATUS_BLOCK ioStatusBlock;
ioStatusBlock.Status = 0;
ioStatusBlock.Information = IntPtr.Zero;

// 调用 NtCreateFile 委托
NTSTATUS status = Syscalls.NtCreateFile(out fileHandle, ref objectAttributes, ref ioStatusBlock, 0x12019F, 0, 0, 0, 1, 0, null, 0);

if (status == 0)
{
    Console.WriteLine("文件创建成功！");
}
else
{
    Console.WriteLine($"文件创建失败，错误码: {status}");
}
```

### 编译和测试
在 Visual Studio 中，确保将解决方案配置修改为 “Release”。然后选择 `Build` -> `Build Solution`。几秒钟后，你应该能看到编译成功的输出。

要测试新编译的代码，打开命令提示符并进入项目的编译位置（例如 `C:\Users\User\Source\Repos\SharpCall\bin\Release`）。执行 `SharpCall.exe` 后，会在桌面上创建一个新的 `test.txt` 文件。

为了确保执行的是 syscall 而不是来自 `ntdll` 的原生 API 函数，可以使用 Process Monitor 监控程序。在监视过程中，你会看到一个 `CreateFile` 操作，其调用堆栈中没有从 `ntdll` 发出的任何调用，只有一个从 `unknown` 到 `ntoskrnl.exe` 的 syscall。

### 结束语
至此，我们完成了此次旅程！我们学习了很多有关 Windows Internals、syscall 以及 C# 的知识，现在你应该可以在 C# 中创建自己的 syscall 了！

该项目的最终代码已经添加到了我的 GitHub 仓库 [SharpCall](https://github.com/jhalon/SharpCall) 中。

如果你仍有问题或想获得更多相关信息，建议查看以下项目：
- [SharpMiniDump](https://github.com/b4rtik/SharpMiniDump/)
- [LOLBITS](https://github.com/Kudaes/LOLBITS)
- [directInjectPOC](https://github.com/badBounty/directInjectorPOC)

非常感谢大家阅读这两篇文章，并让第一篇文章取得了如此巨大的成功！希望你能像阅读第一篇文章一样享受这篇文章，并学到一些新知识！

感谢每一位读者！谢谢！