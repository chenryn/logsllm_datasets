User: Using the Django web framework, develop a simple blog site and deploy it to a Linux server.
Assistant: Here are the steps: 1. Install Django and related dependencies: ``` sudo apt-get update sudo apt-get install python3 python3-pip nginx sudo pip3 install django gunicorn psycopg2-binary ``` 2. Create a Django project: `` ` django-admin startproject myblog cd myblog python3 manage.py migrate python3 manage.py createsuperuser ``` 3. Create a Django application: ``` python3 manage.py startapp blog ``` 4. Edit `myblog/settings.py `: Add `'blog',` to `INSTALLED_APPS`. Add database configuration in `DATABASES`: ```python DATABASES = { 'default': { 'ENGINE': 'django.db.backends.postgresql', 'NAME': 'myblog', 'USER': 'mybloguser' , 'PASSWORD': 'mypassword', 'HOST': 'localhost', 'PORT': '', } } ``` 5. Edit `myblog/urls.py`: ```python from django.urls import include , path urlpatterns = [ path('admin/', admin.site.urls), path('', include('blog.urls')), ] ``` 6. Create `blog/urls.py`, and Add route: ```python from django.urls import path from . import views urlpatterns = [ path('', views.homepage, name='homepage'), path('<int:post_id>/', views.detail , name='detail'), ] ``` 7. Edit `blog/views.py`: ```python from django.shortcuts import render, get_object_or_404 from .models import Post def homepage(request): posts = Post. objects.all() context = {'posts': posts} return render(request, 'blog/homepage.html', context) def detail(request, post_id): post = get_object_or_404(Post, pk=post_id) context = { 'post': post} return render(request, 'blog/detail.html', context) ``` 8. Create model `blog/models.py`: ```python from django.db import models class Post(models .Model): title = models.CharField(max_length=255) content = models.TextField() pub_date = models.DateTimeField(auto_now_add=True) def __str__(self): return self.title ``` 9. Create database table: ``` python3 manage.py makemigrations python3 manage.py migrate ``` 10. Create a template: Create a subfolder named `templates` under the `myblog` folder, and create two HTML templates `homepage` in it .html` and `detail.html`. `homepage.html`: ```html <!DOCTYPE html> <html> <head> <title>My Blog</title> </head> <body> <h1>My Blog</h1> <ul> { % for post in posts %} <li><a href="{% url 'detail' post.id %}">{{ post.title }}</a></li> {% endfor %} </ ul> </body> </html> ``` `detail.html`: ```html <!DOCTYPE html> <html> <head> <title>{{ post.title }}</title> </title> </ head> <body> <h1>{{ post.title }}</h1> <p>{{ post.content }}</p> <p>Published on {{ post.pub_date }}</p> < /body> </html> ``` 11. Modify Nginx configuration: Edit `/etc/nginx/sites-available/default` file, add the following code in it: ```nginx server { listen 80; server_name myblog.com ; location / { proxy_pass http://localhost:8000; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection 'upgrade'; proxy_set_header Host $host; proxy_cache_bypass $http_upgrade; } } ``` 12. Run the Django application: `` ` gunicorn myblog.wsgi:application --bind 127.0.0.1:8000 ``` 13. Start Nginx: ``` sudo systemctl start nginx ``` Now you can enter the server IP address or domain name (if available) through the browser ) to visit your site.