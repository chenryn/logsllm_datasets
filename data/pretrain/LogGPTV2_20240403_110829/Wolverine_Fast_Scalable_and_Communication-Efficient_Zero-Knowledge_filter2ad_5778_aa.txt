title:Wolverine: Fast, Scalable, and Communication-Efficient Zero-Knowledge
Proofs for Boolean and Arithmetic Circuits
author:Chenkai Weng and
Kang Yang and
Jonathan Katz and
Xiao Wang
6
5
0
0
0
.
1
2
0
2
.
1
0
0
0
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
1
2
0
2
©
0
0
.
1
3
$
/
1
2
/
5
-
4
3
9
8
-
1
8
2
7
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
1
2
0
2
2021 IEEE Symposium on Security and Privacy (SP)
Wolverine: Fast, Scalable, and Communication-Efﬁcient Zero-Knowledge Proofs for
Boolean and Arithmetic Circuits
Chenkai Weng
Kang Yang∗
Northwestern University
State Key Laboratory of Cryptology
Jonathan Katz†
University of Maryland
Xiao Wang∗
Northwestern University
Abstract—Efﬁcient zero-knowledge (ZK) proofs for arbitrary
boolean or arithmetic circuits have recently attracted much atten-
tion. Existing solutions suffer from either signiﬁcant prover over-
head (i.e., high memory usage) or relatively high communication
complexity (at least κ bits per gate, for computational security
parameter κ). In this paper, we propose a new protocol for
constant-round interactive ZK proofs that simultaneously allows
for an efﬁcient prover with asymptotically optimal memory usage
and signiﬁcantly lower communication compared to protocols
with similar memory efﬁciency. Speciﬁcally:
• The prover in our ZK protocol has linear running time and,
perhaps more importantly, memory usage linear in the memory
needed to evaluate the circuit non-cryptographically. This
allows our proof system to scale easily to very large circuits.
• For statistical security parameter ρ = 40, our ZK protocol
communicates roughly 9 bits/gate for boolean circuits and 2–4
ﬁeld elements/gate for arithmetic circuits over large ﬁelds.
Using 5 threads, 400 MB of memory, and a 200 Mbps network
to evaluate a circuit with hundreds of billions of gates, our
implementation (ρ = 40, κ = 128) runs at a rate of 0.45 µs/gate
in the boolean case, and 1.6 µs/gate for an arithmetic circuit
over a 61-bit ﬁeld.
We also present an improved subﬁeld Vector Oblivious Linear
Evaluation (sVOLE) protocol with malicious security that is of
independent interest.
I. INTRODUCTION
Zero-knowledge (ZK) proofs (of knowledge) [39], [37] are
a fundamental cryptographic tool. They allow a prover P to
convince a veriﬁer V, who holds a circuit C, that the prover
knows a witness w for which C(w) = 1, without leaking any
extra information. While ZK proofs for arbitrary circuits are
possible [37], until recently such proofs were inefﬁcient as
they relied on reductions to generic NP-complete problems.
Over the past decade, however, several ZK proof systems have
been developed that yield far more efﬁcient protocols. These
include zero-knowledge succinct non-interactive arguments
of knowledge (zk-SNARKs) [40], [32], [7], [9], [10], [20],
[55], [8], [6], [54], ZK proofs based on Interactive Oracle
Proofs (IOPs) and techniques from the setting of veriﬁable
outsourcing [38], [58], [21], [63], ZK proofs following the
“MPC-in-the-head” approach [46], [33], [23], [1], [48], [28],
and a line of work constructing ZK proofs from garbled
circuits (ZKGC) [47], [31], [61], [42]. Each of these works
offers different
tradeoffs between underlying assumptions
(both computational hardness assumptions as well as setup
assumptions), round complexity (in particular, whether the
†Work done as a consultant for Stealth Software Technologies, Inc.
∗Corresponding authors
proof requires interaction or can be made non-interactive),
expressiveness (e.g., whether the scheme natively handles
boolean or arithmetic circuits), and efﬁciency. With regard to
efﬁciency, measures of interest include the prover complexity
(including time complexity and memory requirements), the
veriﬁer complexity, and the communication as a function of
the circuit size.
One important factor is the memory overhead of ZK pro-
tocols. In particular, high memory requirements can impose a
hard limit on the maximum circuit size that a protocol can
support in practice. As shown in Table I, prior ZK proof
systems can be characterized roughly as either (1) having short
proofs (e.g., sublinear in the circuit size, or even sublinear in
the length of a witness) but signiﬁcant memory overhead for
the prover as in the case of zk-SNARKs, IOP-based schemes,
and some schemes following the MPC-in-the-head paradigm,
or (2) imposing low memory overhead for the prover but
having high communication complexity, as in the case of
ZKGC schemes.
In this paper, we propose a new approach to ZK proofs that
enables an extremely efﬁcient prover in both running time and
memory usage while having lower communication compared
to the ZKGC approach that offers similar prover efﬁciency.
As in the ZKGC approach, we obtain prover complexity—in
terms of both time and memory usage—linear in the complex-
ity required to evaluate the circuit non-cryptographically; this
allows our ZK protocol to scale easily to very large circuits.
At the same time, we achieve communication complexity that
is more than an order of magnitude lower than what can be
achieved using the ZKGC approach, while natively supporting
boolean or arithmetic circuits. As compared to the other work
in Table I, the main drawback of our protocol—shared by the
ZKGC approach—is that it requires interaction. Our protocol
does, however, offer a non-interactive online phase following
an interactive ofﬂine phase that can be executed by the parties
before the circuit is known.
A. Outline of Our Solution
Our ZK protocol (named Wolverine) can be separated into
two phases: an interactive ofﬂine phase that can be executed
by the prover and veriﬁer before both the circuit and the
witness are known, and an online phase that can be made non-
interactive in the random-oracle model. We view the online
phase as our main conceptual contribution, though we offer
efﬁciency improvements for the ofﬂine phase as well.
© 2021, Chenkai Weng. Under license to IEEE.
DOI 10.1109/SP40001.2021.00056
1074
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:31:45 UTC from IEEE Xplore.  Restrictions apply. 
Protocol
Type
Spartan [54]
zk-SNARK
Virgo [63]
IOP-based MPC-in-the-head
Ligero [1]
Merkle tree
(boolean circuit)
Matrix mult.
(arithmetic circuit)
Prover time
Veriﬁer time
Overall time
Communication
Prover memory
Prover time
Veriﬁer time
Overall time
Communication
Prover memory
55 s
< 0.1 s
55 s
≤ 100 KB
≈ 7 GB
677 s
< 0.1 s
677 s
≤ 100 KB
≈ 86 GB
53 s
< 0.1 s
53 s
253 KB
≈ 1 GB
64 s
64 s
< 0.1 s
≈ 200 KB
≈ 18 GB
400 s
< 0.1 s
400 s
1.5 MB
≈ 5 GB
−
−
−
−
−
[42]
ZKGC
7.3 s
7.3 s
7.3 s
182.2 MB
≤ 400 MB
−
−
−
−
−
Wolverine
sVOLE-based
11 s
11 s
11 s
12.4 MB
≤ 400 MB
320 s
320 s
320 s
4.2 GB
≤ 400 MB
TABLE I: Comparing our ZK protocol with prior work. The ﬁrst example proves knowledge of 256 leaves that hash to a public root
of a Merkle tree based on SHA-256 (511 hash-function evaluations). The second example proves knowledge of two 512 × 512 matrices
over a 61-bit ﬁeld whose product is a public matrix (roughly 134 million ﬁeld multiplications). Performance of our protocol (ρ = 40,
κ = 128) is measured by running the prover and veriﬁer on two machines, each using 1 thread, connected via a 200 Mbps network, and is
the total running time of both the ofﬂine and online phases. For ZKGC and Wolverine, the prover and veriﬁer can execute the protocol in a