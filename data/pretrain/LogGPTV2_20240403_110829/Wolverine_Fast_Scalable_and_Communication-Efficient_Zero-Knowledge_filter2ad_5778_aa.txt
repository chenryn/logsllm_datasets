# Title: Wolverine: Fast, Scalable, and Communication-Efficient Zero-Knowledge Proofs for Boolean and Arithmetic Circuits

## Authors:
- Chenkai Weng
- Kang Yang
- Jonathan Katz
- Xiao Wang

## Abstract
Efficient zero-knowledge (ZK) proofs for arbitrary boolean or arithmetic circuits have recently attracted significant attention. Existing solutions often suffer from either high prover overhead (i.e., high memory usage) or relatively high communication complexity (at least \( \kappa \) bits per gate, where \( \kappa \) is the computational security parameter). In this paper, we propose a new protocol for constant-round interactive ZK proofs that simultaneously allows for an efficient prover with asymptotically optimal memory usage and significantly lower communication compared to protocols with similar memory efficiency. Specifically:

- The prover in our ZK protocol has linear running time and, more importantly, memory usage linear in the memory needed to evaluate the circuit non-cryptographically. This enables our proof system to scale easily to very large circuits.
- For a statistical security parameter \( \rho = 40 \), our ZK protocol communicates approximately 9 bits/gate for boolean circuits and 2–4 field elements/gate for arithmetic circuits over large fields. Using 5 threads, 400 MB of memory, and a 200 Mbps network to evaluate a circuit with hundreds of billions of gates, our implementation (with \( \rho = 40 \) and \( \kappa = 128 \)) runs at a rate of 0.45 µs/gate for boolean circuits and 1.6 µs/gate for arithmetic circuits over a 61-bit field.

We also present an improved subfield Vector Oblivious Linear Evaluation (sVOLE) protocol with malicious security, which is of independent interest.

## I. Introduction

Zero-knowledge (ZK) proofs (of knowledge) [39], [37] are a fundamental cryptographic tool. They allow a prover \( P \) to convince a verifier \( V \), who holds a circuit \( C \), that the prover knows a witness \( w \) for which \( C(w) = 1 \), without leaking any additional information. While ZK proofs for arbitrary circuits are possible [37], until recently such proofs were inefficient due to their reliance on reductions to generic NP-complete problems. Over the past decade, several ZK proof systems have been developed that yield far more efficient protocols. These include:

- Zero-knowledge succinct non-interactive arguments of knowledge (zk-SNARKs) [40], [32], [7], [9], [10], [20], [55], [8], [6], [54]
- ZK proofs based on Interactive Oracle Proofs (IOPs) and techniques from verifiable outsourcing [38], [58], [21], [63]
- ZK proofs following the "MPC-in-the-head" approach [46], [33], [23], [1], [48], [28]
- ZK proofs from garbled circuits (ZKGC) [47], [31], [61], [42]

Each of these works offers different trade-offs between underlying assumptions (both computational hardness and setup assumptions), round complexity (interaction vs. non-interaction), expressiveness (boolean vs. arithmetic circuits), and efficiency. Efficiency measures include prover and verifier complexity, as well as communication as a function of the circuit size.

### Memory Overhead in ZK Protocols

One important factor is the memory overhead of ZK protocols. High memory requirements can impose a hard limit on the maximum circuit size that a protocol can support in practice. As shown in Table I, prior ZK proof systems can be categorized into two main types:

1. **Short Proofs but High Prover Memory Overhead**: zk-SNARKs, IOP-based schemes, and some MPC-in-the-head schemes.
2. **Low Prover Memory Overhead but High Communication Complexity**: ZKGC schemes.

### Our Contribution

In this paper, we propose a new approach to ZK proofs that enables an extremely efficient prover in both running time and memory usage while having lower communication compared to the ZKGC approach, which offers similar prover efficiency. Like the ZKGC approach, our protocol achieves prover complexity—in terms of both time and memory usage—linear in the complexity required to evaluate the circuit non-cryptographically, allowing it to scale easily to very large circuits. At the same time, our communication complexity is more than an order of magnitude lower than what can be achieved using the ZKGC approach, while natively supporting both boolean and arithmetic circuits. The main drawback of our protocol, shared by the ZKGC approach, is that it requires interaction. However, our protocol offers a non-interactive online phase following an interactive offline phase that can be executed by the parties before the circuit is known.

## A. Outline of Our Solution

Our ZK protocol, named Wolverine, consists of two phases:

1. **Interactive Offline Phase**: Executed by the prover and verifier before both the circuit and the witness are known.
2. **Online Phase**: Can be made non-interactive in the random-oracle model. We view the online phase as our main conceptual contribution, though we also offer efficiency improvements for the offline phase.

### Performance Comparison

Table I compares our ZK protocol with prior work. The first example proves knowledge of 256 leaves that hash to a public root of a Merkle tree based on SHA-256 (511 hash-function evaluations). The second example proves knowledge of two 512 × 512 matrices over a 61-bit field whose product is a public matrix (roughly 134 million field multiplications). Performance of our protocol (with \( \rho = 40 \) and \( \kappa = 128 \)) is measured by running the prover and verifier on two machines, each using 1 thread, connected via a 200 Mbps network, and includes the total running time of both the offline and online phases.

| Protocol | Type | Prover Time | Verifier Time | Overall Time | Communication | Prover Memory |
|----------|------|-------------|---------------|--------------|---------------|---------------|
| Spartan [54] | zk-SNARK | 55 s | < 0.1 s | 55 s | ≤ 100 KB | ≈ 7 GB |
| Virgo [63] | IOP-based | 677 s | < 0.1 s | 677 s | ≤ 100 KB | ≈ 86 GB |
| Ligero [1] | Merkle tree (bool) | 53 s | < 0.1 s | 53 s | 253 KB | ≈ 1 GB |
| Matrix mult. (arith) | 64 s | 64 s | < 0.1 s | ≈ 200 KB | ≈ 18 GB |
| ZKGC [42] | 7.3 s | 7.3 s | 7.3 s | 182.2 MB | ≤ 400 MB |
| Wolverine | sVOLE-based | 11 s | 11 s | 11 s | 12.4 MB | ≤ 400 MB |
| Wolverine (large) | 320 s | 320 s | 320 s | 4.2 GB | ≤ 400 MB |

For ZKGC and Wolverine, the prover and verifier can execute the protocol in a parallel and distributed manner, further enhancing scalability.

© 2021, Chenkai Weng. Under license to IEEE.
DOI 10.1109/SP40001.2021.00056

Authorized licensed use limited to: Tsinghua University. Downloaded on February 25, 2022, at 12:31:45 UTC from IEEE Xplore. Restrictions apply.