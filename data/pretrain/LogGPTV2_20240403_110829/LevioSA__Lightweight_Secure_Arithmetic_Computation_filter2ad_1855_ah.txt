two places: Ohio and N.Virginia. When generating about a third of a
million authenticated triples, the Low Gear protocol produced 3.1k
authenticated triples per second, with 2.80kB of data transmitted
(overall) per triple.
Authenticated triples As a warmup, our first benchmark consists
of computing SPDZ-style authenticated triples [13]. Generating
multiple authenticated triples in parallel can be implemented with
a wide and low-depth circuit. We further optimize our protocol for
this functionality by directly using the additive shares obtained by
the outer protocol right before output reconstruction step, avoiding
an additional sharing phase required by the functionality.
We ran our benchmark generating 1 million and 10 million au-
thenticated triples at a time with the various block widths listed
in Table 2, and report the computation time and communication
per triple in Table 3, using Low Gear as a reference. As one can
see, our performance is comparable to Low Gear both in terms of
computation and communication, and increases for larger block
widths.
Random “wide” circuits. While the above benchmark illustrates
that we can match previous implementations for generating authen-
ticated triples, the strength of our protocol comes in utilizing our
combined IPS protocol instead of relying on a SPDZ online phase
consuming such triples. To showcase the protocol’s potential in
this scenario, we executed it on synthetic circuits. Random circuits
consist of 2 input layers (one per user) with д multiplication gates
each, r multiplication layers (and 1 output layer). Furthermore, in
each gate, the left and right wires originate from the output of two
gates chosen at random from the previous layers. Figures 11 and
10 show the results for r = 4096 and various block widths. We
highlight that the efficiency of our protocol is improved with the
block width. In particular, for w = 61386, the protocol processed
15.7k multiplications per second at 662 bytes per multiplication.
To compare this result with Low Gear, we need to consider the cost
of generating authenticated triples for our synthetic circuit using
the Low Gear protocol. When evaluating the performance of Low
Gear, we ignore the costs of the online phase which utilizes the
SPDZ [13] protocol. Our results show that our protocol is at least
Session 2C: Secure Computing ICCS ’19, November 11–15, 2019, London, United Kingdom342block width mult/ms
1317
3065
6749
14332
17.32
20.07
21.93
23.11
bytes/mult
715
650
614
592
Table 4: Communication and computation costs to generate
10 million active OLE.
5 times faster and with 4 times less communication compared to
using SPDZ with Low Gear.
On the other hand, we also compare our protocol execution
to a passively secure protocol. In Figures 10 and 11 we plot the
communication and running times for generating passive OLEs
required for a GMW-style passive protocol to evaluate the same
circuit (where the passive OLE protocol is instantiated with the
same OLE we used for our active protocol). We only plot the offline
time (noting that the online time will not be significant). Our results
show that our communication and running times are within 4x
slower than the naive passive protocol.
Passive to active OLE. We also benchmark our optimized active
OLE protocol from section 5.3, and show the results in table 4. When
generating 10 million active OLE we obtain the fastest time per-
formance of 23k OLE/sec with 592 bytes/OLE with a block width
w = 14332. The savings compared to other benchmarks are ex-
plained by the fact that we only consume n/w passive OLE per
active one, compared to the 2n/w passive OLE per multiplication
of generic circuits.
Actively secure neural-network inference. Last, we benchmark
our system on a simple neural network inference problem. We use
a network trained on the TIMIT speech recognition dataset with
the network architecture described in [22]. The neural network
we used comprises of a four layer network with 3 hidden, fully
connected layers with N neurons and quadratic activations. The
input is encoded as an X components vector, and the output layer
is fully connected with O output neurons and relies on the softmax
activation. We do not perform the softmax activation function via
a secure computation and delegate that computation back to the
client. We assume that both the network and the input to be classi-
fied are shared among the two parties, who also hold MACs on these
values which are verified as part of the computation as detailed in
Section 5.4. We ran an experiment for X = 1845, N = 2000, O = 183
with a block width w = 6749, which results in a circuit with about
16.1 million multiplications. The entire computation took about
34.6 minutes and the total communication was 20.7GB. In com-
parison, evaluating the same functionality using lowgear would
require 86 minutes and 45.14GB of communication (this estimate
only takes into account offline authenticated triple generation and
ignores the cost of the efficient lowgear online phase). To given an
idea of the overhead over the passive protocol, the offline part of
the passive protocol to compute the neural network would have
required 6.2 minutes and 2.88GB.
Acknowledgement. We thank Leo de Castro, Chiraag Juvekar
and Vinod Vaikuntanathan for helpful discussions and for shar-
ing their code of their OLE implementation. We also thank the
anonymous CCS reviewers for their helpful comments.
The first author was supported by the European Research Coun-
cil under the ERC consolidators grant agreement n. 615172 (HIPS),
by the BIU Center for Research in Applied Cryptography and Cyber
Security in conjunction with the Israel National Cyber Bureau in
the Prime Minister’s Office and by ISF grant 1316/18. The second au-
thor was supported by ERC grant 742754 (project NTSC), ISF grant
1709/14, NSF-BSF grant 2015782, and a grant from the Ministry
of Science and Technology, Israel and Department of Science and
Technology, Government of India. The third author was supported
by NSF Award CNS-1561209 and AFOSR Award FA9550-18-1-0267.
The fourth author was supported by a Google Faculty Research
Grant and NSF Award CNS-1618884.
REFERENCES
[1] Scott Ames, Carmit Hazay, Yuval Ishai, and Muthuramakrishnan Venkitasub-
ramaniam. 2017. Ligero: Lightweight Sublinear Arguments Without a Trusted
Setup. In CCS. 2087–2104.
[2] Benny Applebaum, Ivan Damgård, Yuval Ishai, Michael Nielsen, and Lior Zichron.
2017. Secure Arithmetic Computation with Constant Computational Overhead.
In CRYPTO. 223–254.
[3] Benny Applebaum, Ivan Damgård, Yuval Ishai, Michael Nielsen, and Lior Zichron.
2017. Secure Arithmetic Computation with Constant Computational Overhead.
In CRYPTO. 223–254.
[4] Michael Ben-Or, Shafi Goldwasser, and Avi Wigderson. 1988. Completeness The-
orems for Non-Cryptographic Fault-Tolerant Distributed Computation (Extended
Abstract). In STOC. 1–10.
[5] Rikke Bendlin, Ivan Damgård, Claudio Orlandi, and Sarah Zakarias. 2011. Semi-
homomorphic Encryption and Multiparty Computation. In EUROCRYPT. 169–
188.
[6] Fabrice Benhamouda, Akshay Degwekar, Yuval Ishai, and Tal Rabin. 2018. On the
Local Leakage Resilience of Linear Secret Sharing Schemes. In Advances CRYPTO.
531–561.
[7] Dan Boneh and Matthew K. Franklin. 2001. Efficient generation of shared RSA
[11] Ivan Damgård and Yuval Ishai. 2005. Constant-Round Multiparty Computation
[12] Ivan Damgård and Yuval Ishai. 2006. Scalable Secure Multiparty Computation.
keys. J. ACM 48, 4 (2001), 702–722.
[8] Ran Canetti, Yuval Ishai, Ravi Kumar, Michael K. Reiter, Ronitt Rubinfeld, and
Rebecca N. Wright. 2001. Selective private function evaluation with applications
to private statistics. In PODC. 293–304.
[9] Melissa Chase, David Derler, Steven Goldfeder, Claudio Orlandi, Sebastian Ra-
macher, Christian Rechberger, Daniel Slamanig, and Greg Zaverucha. 2017. Post-
Quantum Zero-Knowledge and Signatures from Symmetric-Key Primitives. In
CCS. 1825–1842.
[10] Ivan Damgård, Matthias Fitzi, Eike Kiltz, Jesper Buus Nielsen, and Tomas Toft.
2006. Unconditionally Secure Constant-Rounds Multi-party Computation for
Equality, Comparison, Bits and Exponentiation. In TCC. 285–304.
Using a Black-Box Pseudorandom Generator. In CRYPTO. 378–394.
In CRYPTO. 501–520.
[13] Ivan Damgård, Valerio Pastro, Nigel P. Smart, and Sarah Zakarias. 2012. Mul-
tiparty Computation from Somewhat Homomorphic Encryption. In CRYPTO.
643–662.
[14] Leo de Castro, Chiraag Juvekar, and Vinod Vaikuntanathan. [n.d.]. Lightweight
OLE implementation based on the LWE Assumption. Personal Communication.
[15] Nico Döttling, Satrajit Ghosh, Jesper Buus Nielsen, Tobias Nilges, and Roberto
Trifiletti. 2017. TinyOLE: Efficient Actively Secure Two-Party Computation from
Oblivious Linear Function Evaluation. In CCS. 2263–2276.
[16] Alexandre Duc, Stefan Dziembowski, and Sebastian Faust. 2019. Unifying Leakage
Models: From Probing Attacks to Noisy Leakage. J. Cryptology 32, 1 (2019), 151–
177.
[17] Zekeriya Erkin, Martin Franz, Jorge Guajardo, Stefan Katzenbeisser, Inald La-
gendijk, and Tomas Toft. 2009. Privacy-Preserving Face Recognition. In PETS.
235–253.
[18] Yair Frankel, Philip D. MacKenzie, and Moti Yung. 1998. Robust Efficient Dis-
[19] Matthew K. Franklin and Moti Yung. 1992. Communication Complexity of Secure
tributed RSA-Key Generation. In STOC. 663–672.
Computation (Extended Abstract). In STOC. 699–710.
Session 2C: Secure Computing ICCS ’19, November 11–15, 2019, London, United Kingdom343Figure 10: Communication for random circuits.
Figure 11: Running times for random circuits.
[20] Tore Kasper Frederiksen, Benny Pinkas, and Avishay Yanai. 2018. Committed
MPC - Maliciously Secure Multiparty Computation from Homomorphic Com-
mitments. In PKC. 587–619.
[21] Daniel Genkin, Yuval Ishai, Manoj Prabhakaran, Amit Sahai, and Eran Tromer.
2014. Circuits resilient to additive attacks with applications to secure computation.
In STOC. 495–504.
[22] Zahra Ghodsi, Tianyu Gu, and Siddharth Garg. 2017. SafetyNets: Verifiable
Execution of Deep Neural Networks on an Untrusted Cloud. In NIPS. 4675–4684.
[23] Satrajit Ghosh, Jesper Buus Nielsen, and Tobias Nilges. 2017. Maliciously Secure
Oblivious Linear Function Evaluation with Constant Overhead. In ASIACRYPT.
629–659.
[24] Irene Giacomelli, Jesper Madsen, and Claudio Orlandi. 2016. ZKBoo: Faster
Zero-Knowledge for Boolean Circuits. In USENIX. 1069–1083.
[25] Niv Gilboa. 1999. Two Party RSA Key Generation. In CRYPTO. 116–129.
[26] Oded Goldreich, Silvio Micali, and Avi Wigderson. 1987. How to Play any Mental
Game or A Completeness Theorem for Protocols with Honest Majority. In STOC.
218–229.
[27] Carmit Hazay and Yehuda Lindell. 2010. Efficient Secure Two-Party Protocols -
Techniques and Constructions. Springer.
[28] Yuval Ishai, Eyal Kushilevitz, Rafail Ostrovsky, Manoj Prabhakaran, Amit Sahai,
and Jürg Wullschleger. 2011. Constant-Rate Oblivious Transfer from Noisy
Channels. In CRYPTO. 667–684.
[29] Yuval Ishai, Eyal Kushilevitz, Rafail Ostrovsky, and Amit Sahai. 2009. Zero-
Knowledge Proofs from Secure Multiparty Computation. SIAM J. Comput. 39, 3
(2009), 1121–1152.
[30] Yuval Ishai, Manoj Prabhakaran, and Amit Sahai. 2008. Founding Cryptography
[31] Yuval Ishai, Manoj Prabhakaran, and Amit Sahai. 2009. Secure Arithmetic Com-
on Oblivious Transfer - Efficiently. In CRYPTO. 572–591.
putation with No Honest Majority. In TCC. 294–314.
[32] Chiraag Juvekar. 2018. Hardware and Protocols for Authentication and Secure
Computation. Ph.D. Dissertation. Massachusetts Institute of Technology, Mas-
sachusetts Institute of Technology.
[33] Chiraag Juvekar, Vinod Vaikuntanathan, and Anantha Chandrakasan. 2018.
GAZELLE: A Low Latency Framework for Secure Neural Network Inference. In
USENIX. 1651–1669.
Improved Non-
Interactive Zero Knowledge with Applications to Post-Quantum Signatures.
IACR Cryptology ePrint Archive 2018 (2018), 475.
[35] Marcel Keller, Emmanuela Orsini, and Peter Scholl. 2016. MASCOT: Faster
Malicious Arithmetic Secure Computation with Oblivious Transfer. In Proceedings
of the 2016 ACM SIGSAC Conference on Computer and Communications Security,
Vienna, Austria, October 24-28, 2016. 830–842.
[36] Marcel Keller, Valerio Pastro, and Dragos Rotaru. 2018. Overdrive: Making SPDZ
Great Again. In EUROCRYPT. 158–189.
[34] Jonathan Katz, Vladimir Kolesnikov, and Xiao Wang. 2018.
[37] Joe Kilian. 1988. Founding Cryptography on Oblivious Transfer. In STOC. 20–31.
[38] Felix Kreuk, Yossi Adi, Moustapha Cissé, and Joseph Keshet. 2018. Fooling End-
To-End Speaker Verification With Adversarial Examples. In IEEE International
Conference on Acoustics, Speech and Signal Processing. 1962–1966.
[39] Benjamin Kreuter, Abhi Shelat, and Chih-Hao Shen. 2012. Billion-Gate Secure
Computation with Malicious Adversaries. In USENIX. 285–300.
[40] Yehuda Lindell, Eli Oxman, and Benny Pinkas. 2011. The IPS Compiler: Opti-
mizations, Variants and Concrete Efficiency. In CRYPTO. 259–276.
[41] Yehuda Lindell and Benny Pinkas. 2002. Privacy Preserving Data Mining. J.
Cryptology 15, 3 (2002), 177–206.
[42] Yehuda Lindell and Benny Pinkas. 2007. An Efficient Protocol for Secure Two-
Party Computation in the Presence of Malicious Adversaries. In EUROCRYPT.
52–78.
[43] Jian Liu, Mika Juuti, Yao Lu, and N. Asokan. 2017. Oblivious Neural Network
[44] Vadim Lyubashevsky, Chris Peikert, and Oded Regev. 2010. On Ideal Lattices and
[46] Payman Mohassel and Matthew K. Franklin. 2006. Efficiency Tradeoffs for
[45] Ueli M. Maurer, Krzysztof Pietrzak, and Renato Renner. 2007. Indistinguishability
Predictions via MiniONN Transformations. In CCS. 619–631.
Learning with Errors over Rings. In EUROCRYPT. 1–23.
Amplification. In CRYPTO. 130–149.
Malicious Two-Party Computation. In PKC. 458–473.
for Machine Learning. IACR Cryptology ePrint Archive 2018 (2018), 403.
[48] Payman Mohassel and Yupeng Zhang. 2017. SecureML: A System for Scalable
Privacy-Preserving Machine Learning. In IEEE Symposium on Security and Privacy.
19–38.
[49] Moni Naor and Benny Pinkas. 1999. Oblivious Transfer and Polynomial Evalua-
[47] Payman Mohassel and Peter Rindal. 2018. ABY3: A Mixed Protocol Framework
tion. In STOC. 245–254.
[50] Jesper Buus Nielsen, Peter Sebastian Nordholt, Claudio Orlandi, and Sai Sheshank
Burra. 2012. A New Approach to Practical Active-Secure Two-Party Computation.
In CRYPTO. 681–700.
[51] OSU-Crypto. 2013. libOTe. https://github.com/osu-crypto/libOTe.
[52] Guillaume Poupard and Jacques Stern. 1998. Generation of Shared RSA Keys by
Two Parties. In ASIACRYPT. 11–24.
[53] M. Sadegh Riazi, Christian Weinert, Oleksandr Tkachenko, Ebrahim M. Songhori,
Thomas Schneider, and Farinaz Koushanfar. 2018. Chameleon: A Hybrid Secure
Computation Framework for Machine Learning Applications. In AsiaCCS. 707–
721.
[54] P. Rindal. 2013. Cryptotools. https://github.com/ladnir/cryptoTools.
[55] Adi Shamir. 1979. How to Share a Secret. Commun. ACM 22, 11 (1979), 612–613.
[56] Victor Shoup. [n.d.]. NTL Library. http://www.shoup.net/ntl/.
[57] Pedro Tabacof and Eduardo Valle. 2016. Exploring the space of adversarial images.
In International Joint Conference on Neural Networks. 426–433.
[58] Tim van Elsloo, Giorgio Patrini, and Hamish Ivey-Law. 2019. SEALion: a Frame-
work for Neural Network Inference on Encrypted Data. CoRR abs/1904.12840
(2019).
[59] Sameer Wagh, Divya Gupta, and Nishanth Chandran. 2018. SecureNN: Efficient
and Private Neural Network Training. IACR Cryptology ePrint Archive 2018 (2018),
442.
[60] Xiao Wang, Samuel Ranellucci, and Jonathan Katz. 2017. Authenticated Garbling
[61] Andrew Chi-Chih Yao. 1986. How to Generate and Exchange Secrets (Extended
and Efficient Maliciously Secure Two-Party Computation. In CCS. 21–37.
Abstract). In FOCS. 162–167.
4M8M16M32M64M128M256M1248163264128256512circuitsizecommunication(GB)Leviosa(end-to-end)Passive(Oﬄine)Lowgear(Oﬄine)14M8M16M32M64M128M256M2m4m8m16m32m1hr2hr4hr8hr16hrcircuitsizetimeLeviosa(end-to-end)Passive(Oﬄine)Lowgear(Oﬄine)1Session 2C: Secure Computing ICCS ’19, November 11–15, 2019, London, United Kingdom344