title:The Sniper Attack: Anonymously Deanonymizing and Disabling the Tor
Network
author:Rob Jansen and
Florian Tschorsch and
Aaron Johnson and
Bj&quot;orn Scheuermann
The Sniper Attack: Anonymously Deanonymizing
and Disabling the Tor Network
Rob Jansen⇤
Florian Tschorsch‡
⇤ U.S. Naval Research Laboratory, Washington, DC
{rob.g.jansen, aaron.m.johnson}@nrl.navy.mil
Aaron Johnson⇤
Bj¨orn Scheuermann‡
‡ Humboldt University of Berlin, Germany
{tschorsch, scheuermann}@informatik.hu-berlin.de
Abstract—Tor is a distributed onion-routing network used
for achieving anonymity and resisting censorship online. Because
of Tor’s growing popularity, it is attracting increasingly larger
threats against which it was not securely designed. In this paper,
we present the Sniper Attack, an extremely low cost but highly
destructive denial of service attack against Tor that an adversary
may use to anonymously disable arbitrary Tor relays. The attack
utilizes valid protocol messages to boundlessly consume memory
by exploiting Tor’s end-to-end reliable data transport. We design
and evaluate a prototype of the attack to show its feasibility and
efﬁciency: our experiments show that an adversary may consume
a victim relay’s memory by as much as 2187 KiB/s while using
at most only 92 KiB/s of upstream bandwidth. We extend our
experimental results to estimate the threat against the live Tor
network and ﬁnd that a strategic adversary could disable all of
the top 20 exit relays in only 29 minutes, thereby reducing Tor’s
bandwidth capacity by 35 percent. We also show how the attack
enables the deanonymization of hidden services through selective
denial of service by forcing them to choose guard nodes in control
of the adversary. Finally, we discuss defenses against the Sniper
Attack that provably render the attack ineffective, and suggest
defenses against deanonymization by denial-of-service attacks in
general that signiﬁcantly mitigate the threat.
I.
INTRODUCTION
Large scale Internet censorship by state-level authori-
ties [44] has spurred the development of new privacy en-
hancing technologies that circumvent the censor, followed by
new techniques to recognize and block these circumvention
tools [22]. As this censorship arms race proceeds, more re-
silient circumvention technologies will be developed in order
to increase the cost of detection using traditional methods. We
argue that as these circumvention technologies improve and the
cost of detection increases, alternative techniques for disrup-
tion will become increasingly viable. As such, understanding
these alternatives is paramount not only to the successful
design of future technologies, but also to the security of
existing networks and systems.
Tor [19] is the most popular deployed system for ﬁght-
ing censorship and online privacy encroachments, currently
supporting several hundreds of thousands of users daily and
Permission(cid:1) to(cid:1) freely(cid:1) reproduce(cid:1) all(cid:1) or(cid:1) part(cid:1) of(cid:1) this(cid:1) paper(cid:1) for(cid:1) noncommercial(cid:1)
purposes(cid:1)is(cid:1)granted(cid:1)provided(cid:1)that(cid:1)copies(cid:1)bear(cid:1)this(cid:1)notice(cid:1)and(cid:1)the(cid:1)full(cid:1)citation(cid:1)
on(cid:1)the(cid:1)ﬁrst(cid:1)page.(cid:1) Reproduction(cid:1)for(cid:1)commercial(cid:1)purposes(cid:1)is(cid:1)strictly(cid:1)prohibited(cid:1)
without(cid:1)the(cid:1)prior(cid:1)written(cid:1)consent(cid:1)of(cid:1)the(cid:1)Internet(cid:1)Society,(cid:1)the(cid:1)ﬁrst-named(cid:1)author(cid:1)
(for(cid:1) reproduction(cid:1) of(cid:1) an(cid:1) entire(cid:1) paper(cid:1) only),(cid:1) and(cid:1) the(cid:1) author’s(cid:1) employer(cid:1) if(cid:1) the(cid:1)
paper(cid:1)was(cid:1)prepared(cid:1)within(cid:1)the(cid:1)scope(cid:1)of(cid:1)employment.
NDSS(cid:1)’14,(cid:1)23-26(cid:1)February(cid:1)2014,(cid:1)San(cid:1)Diego,(cid:1)CA,(cid:1)USA
Copyright(cid:1)2014(cid:1)Internet(cid:1)Society,(cid:1)ISBN(cid:1)1-891562-35-5
http://dx.doi.org/(cid:18)(cid:17)(cid:15)(cid:18)(cid:21)(cid:24)(cid:19)(cid:19)(cid:16)(cid:79)(cid:69)(cid:84)(cid:84)(cid:15)(cid:19)(cid:17)(cid:18)(cid:21)(cid:15)(cid:19)(cid:20)(cid:19)(cid:25)(cid:25)
transferring roughly 3 GiB/s in aggregate [8]. Tor uses onion
routing [25] to route clients’ trafﬁc through a circuit of
geographically diverse relays, preventing any single relay from
linking the client to its Internet destination. This work focuses
on Tor due to its practical relevance as an adversarial target.
In this paper, we present, analyze, and evaluate a novel and
destructive denial of service (DoS) attack against Tor that may
be used to anonymously and selectively disable arbitrary Tor
relays with very low cost to the attacker: our attack is efﬁcient
to the extent that an adversary interested in censorship could
disable instead of block Tor by simply disabling all relays
or intelligently targeting crucial subsets of relays, e.g., those
providing high network throughput or authoritative directory
services. The attack may be undetectably carried out on any
machine with moderate computational and memory resources
and presents severe security implications for Tor and its users.
In addition to threatening network availability, we show how
the attack can be used to deanonymize hidden services by
selectively disabling relays, heavily inﬂuencing paths to those
in control of the adversary. Our attack thus imposes real,
signiﬁcant threats to Tor’s users,1 and we believe it constitutes
the most devastating attack against the Tor network to date.
The attack, which we call the Sniper Attack since the
attacker remains hidden while disabling relays in a targeted
manner, works by utilizing Tor’s application level congestion
and ﬂow control mechanisms to cause a Tor relay to buffer an
arbitrary amount of data in application queues. In particular, an
adversarial client builds a normal Tor circuit using the target
relay as the entry, commands the exit to start downloading
a large ﬁle through the circuit, and then continuously sends
SENDME cells to the exit without reading from the target entry.
The SENDME cells signal the exit to increase its congestion
windows, after which it will continue to pull data from the
external data source and push it into the circuit. This process
may be repeated in parallel on many circuits using the same
target entry for each. The remote Tor process on the target
relay will queue the data and eventually exhaust its host’s
memory, resulting in termination by its operating system’s
memory manager (e.g. the oom-killer on Linux [1]).
Using Shadow [28], we demonstrate the destructiveness
of the Sniper Attack and the effectiveness of our defenses
by evaluating them in a safe, private, simulated Tor net-
work. The evaluation of our attack prototype indicates that
an adversary may consume a target relay’s memory by as
1We disclosed our attack to The Tor Project [6] in February 2013. We
have worked with them to develop and deploy a short term defense [17], and
continue to work with them in developing long term solutions [32]. As a result,
Tor is no longer vulnerable since version 0.2.4.14-alpha.
that
much as 2187 KiB/s (903 KiB/s in the median), while the
adversarial bandwidth costs are at most 92 KiB/s upstream
and 39 KiB/s downstream, (46 KiB/s upstream and 14 KiB/s
downstream in the medians). Using these results, we estimate
that sequentially disabling each of the fastest 20 exit relays
takes a cumulative total of only 29 minutes. In addition, we
explore using Tor to anonymously disable relays by utilizing
a separate anonymous tunnel through which we launch our
attacks, and ﬁnd that doing so does not increase the adversarial
bandwidth requirements.
We analyze the security threat
the Sniper Attack
poses and present novel techniques for deanonymizing hidden
services. We utilize the Sniper Attack’s ability to kill arbitrary
relays in a selective denial of service attack against the guard
relays of hidden services, inﬂuencing the paths chosen by the
hidden services to those in control of the adversary. We ﬁnd
that it enables the complete deanonymization of hidden ser-
vices within days by an adversary with only modest resources
or within hours by a more powerful adversary.
This paper also explores defense strategies against
the
Sniper Attack. We discuss how simple hard-coded queue
size limits and end-to-end authenticated signals affect
the
adversary’s attack strategy, but do not completely prevent the
attack. We then present an algorithm that adaptively reacts to
high memory pressure indicative of the attack. Our adaptive
defense utilizes queuing delay as a metric to identify and kill
malicious circuits in order to prevent the process from being
killed. We derive resource bounds with our defense mechanism
in place, showing that it cannot reasonably be leveraged by
attackers to cause relays to destroy honest clients’ circuits.
Our evaluation shows that our adaptive circuit killing defense
detects and stops the Sniper Attack with no false positives.
Finally, we present and analyze path restrictions that miti-
giate the threat of DoS deanonymization. By restricting the
relays it uses for sensitive circuit positions, a client will fail
closed to an unavailable but safe state instead of an avaliable
but potentially compromised one. We analyze the security and
availability cost of such changes under a variety of parameters
and ﬁnd acceptable security/availability trade-offs.
Our main contributions may be summarized as follows:
•
•
•
•
a dangerous and destructive DoS attack capable of
disabling arbitrary Tor relays (Section II);
an evaluation of a prototype of the attack and our
defenses in a safe, virtual Tor network (Section III);
a security analysis showing how the attack may be
used to deanonymize hidden services (Section IV);
practical defenses against the Sniper Attack that re-
duce Tor’s vulnerability to attacks that exploit Tor’s
queuing mechanisms (Section V); and
practical defenses against DoS-based deanonymization
attacks that
improve security by limiting network
exposure (Section VI).
•
II. THE SNIPER ATTACK
In this section, we develop a DoS attack against the Tor
network that can be used to anonymously disable arbitrary
Tor relays by killing the Tor process on its host machine. To
facilitate an understanding of the exploited protocol features,
we ﬁrst describe two basic attack variants that require the
adversary to run both a Tor client and either a Tor exit relay or
an Internet service. We then describe a more efﬁcient variant
that only requires a Tor client and therefore signiﬁcantly
2
reduces the resources required by the adversary. Finally, we
discuss strategies that disguise the adversary’s identity.
A. Background
Tor is an application-level overlay network enabling anony-
mous communication between clients and arbitrary Internet
destinations. Tor clients are responsible for path selection
at the overlay layer, and form virtual circuits through the
overlay network by selecting three relays from a public list
for each: an entry; a middle; and an exit. Once a circuit is
established, the client creates streams through the circuit by
instructing the exit to connect to the desired external Internet
destinations. Each pair of relays communicate over a single
onion routing connection that is built using the Transmission
Control Protocol (TCP). The application layer protocols rely
on this underlying TCP connection to guarantee reliability and
in-order delivery of application data, called cells, between each
relay. As a result of using hop-by-hop TCP at the network
layer, Tor does not allow relays to drop or re-order cells at the
application layer. Streams are multiplexed over circuits, which
themselves are multiplexed over connections.
Tor implements an end-to-end sliding window mechanism
to control the amount of data directed into the network. For
every circuit, each edge node (i.e. client and exit) manages
a package window counter that is initialized to 1000 and
decremented by one for every data cell it directs into the
circuit, and a delivery window counter that is initialized to
100 and decremented by one for every data cell it removes
from the circuit. Analogous counters also exist at the stream
level, respectively initialized to 500 and 50. The packaging
edge (PE) of a circuit will stop injecting cells from any
multiplexed stream whose package window reaches zero, and
will stop injecting cells from all multiplexed streams when
the circuit packaging window reaches zero. The delivery edge
(DE) of a circuit will send a feedback signal, called a SENDME
cell, to the PE whenever the circuit delivery window or any
stream delivery window reaches zero. These SENDME cells
cause the DE to increment the associated delivery window by
its initialized value, and the PE to increment its packaging
window by the same amount.2 Thus, there will not be more
than 500 data cells in ﬂight on a stream, and not more than
1000 on a circuit.
B. Basic Attacks
The Sniper Attack exploits Tor’s reliable application-level
queuing. Our assertion is that a DE that stops reading from
a connection will cause the next hop node to buffer a full
package window worth of data (1000 cells) from the PE for
every active circuit multiplexed over the connection, under the
assumptions that there are at least two streams multiplexed
on each circuit and that the streams transfer enough data in
aggregate to reduce the PE’s circuit package window to zero.
When a DE with incoming data stops reading from its TCP
socket on the connection to an adjacent relay, the DE’s TCP
receive buffer will ﬁll, its TCP ﬂow control window will empty,
and it will announce a zero window to the other end of the
TCP connection. The adjacent relay will then no longer be
able to forward cells to the DE, causing its TCP send buffer
2In practice, circuit and stream delivery windows are respectively initialized
to 1000 and 500. When they reach 900 and 450, SENDMEs are sent and they
are incremented by 100 and 50. Therefore, the delivery windows will not fall
below 900 and 450 under normal operation.
Fig. 1: In the basic version 1 of the Sniper Attack, the adversary controls
the client and the exit. (a) The client creates a circuit using the target as the
entry. (b) The exit generates, packages, and sends data through the circuit,
ignoring package window limits. (c) The client stops reading from the TCP
connection to the target entry. (d) The target entry buffers the data until the
Tor process is terminated by the OS.
Fig. 2: In the basic version 2 of the Sniper Attack, the adversary controls
the client and the server. (a) The client creates a circuit using the target as the
exit, and connects to a colluding server. (b) The client generates, packages,
and sends data through the circuit, ignoring package window limits. (c) The
server stops reading from the TCP connection to the target exit. (d) The target
exit buffers the data until the Tor process is terminated by the OS.
to ﬁll. With a full TCP send buffer, the adjacent relay will
buffer cells in the application layer circuit queue (recall that
Tor does not allow relays to drop cells in the application layer)
until the PE’s stream or circuit package window reaches zero.
The PE will then stop sending data into the circuit, and stop
reading from the data source.
Using the mechanism described above, an adversary that
controls a client and a relay may attack a target relay as
shown in Figure 1. The adversarial client constructs a circuit
by selecting the target relay as the entry and the adversarial
relay as the exit.3 The client signals the exit
the
attack by issuing an arbitrary request over the custom attack
circuit, and then stops reading from the TCP connection to
the target entry. The exit simply ignores the empty package
windows and continuously sends data it arbitrarily generates,
increasing the amount of memory consumed by the entry to
queue the cells. Note that it is not necessary for the malicious
exit to produce correctly encrypted Tor cells since they will
never be fully decrypted by the client (though correct circuit
IDs are required). Eventually, the Tor process on the entry
node depletes all of the available memory resources and is
terminated by the operating system. On Linux systems, this
job is handled by the out-of-memory (oom) killer [1].
to start
A variation of the basic attack described above is shown in
Figure 2. In this variant, the adversary controls a client and a
ﬁle server. The client generates arbitrary data and packages it
for delivery to the target exit. The adversarial server avoids
reading from the TCP connection to the target exit, again
resulting in memory exhaustion and death of the Tor process
on the target relay’s host machine. Note that the cells must be
encrypted in this attack variant because they will be decrypted
by a machine which is not under the adversary’s control.
Note that the adversary may choose any relay as its target
entry in version 1 of the basic attack, and should choose the ﬁle
server’s port according to the exit relay’s exit policy in version
2. However, choosing relays without the Guard ﬂag for a