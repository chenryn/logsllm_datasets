如果我们还想删除数据库的卷，那么我们可以使用以下命令:
```
$ docker volume rm ch08_pets-data
```
*卷名中为什么有`ch08`前缀？*在`docker-compose.yml`文件中，我们已经调用了卷来使用`pets-data`。但是正如我们已经提到的，Docker Compose 用`docker-compose.yml`文件的父文件夹名称加上下划线作为所有名称的前缀。在这种情况下，父文件夹被称为`ch08`。
# 扩展服务
现在，让我们暂时假设我们的示例应用已经在网络上运行并且非常成功。很多人想看我们可爱的动物形象。所以现在我们面临一个问题，因为我们的应用已经开始变慢了。为了解决这个问题，我们希望运行 web 服务的多个实例。有了 Docker Compose，这很容易做到。
运行更多实例也称为纵向扩展。我们可以使用这个工具来扩展我们的`web`服务，比如说，扩展到三个实例:
```
$ docker-compose up --scale web=3
```
如果我们这样做，我们会大吃一惊。输出将类似于下面的截图:
![](img/8b5d88af-ea19-43f7-9dcd-15287af1e8c8.png)
Output of docker-compose --scale
web 服务的第二个和第三个实例无法启动。错误消息告诉我们为什么:我们不能多次使用同一个主机端口。当实例 2 和 3 试图启动时，Docker 意识到端口`3000`已经被第一个实例占用。*我们能做什么？*我们可以让 Docker 决定每个实例使用哪个主机端口。
如果在`compose`文件的`ports`部分，我们只指定了容器端口而忽略了主机端口，那么 Docker 会自动选择一个临时端口。让我们这样做:
1.  首先，让我们拆下应用:
```
$ docker-compose down
```
2.  然后，我们将`docker-compose.yml`文件修改如下:
```
version: "3.5"
services:
  web:
    image: fundamentalsofdocker/ch08-web:1.0
    ports:
      - 3000
  db:
    image: fundamentalsofdocker/ch08-db:1.0
    volumes:
      - pets-data:/var/lib/postgresql/data
volumes:
  pets-data:
```
3.  现在，我们可以再次启动应用，并在此之后立即进行扩展:
```
$ docker-compose up -d
$ docker-compose scale web=3
Starting ch08_web_1 ... done
Creating ch08_web_2 ... done
Creating ch08_web_3 ... done
```
4.  如果我们现在做一个`docker-compose ps`，应该会看到下面的截图:
![](img/0eaf6a40-2f62-440d-806c-d41b3905b41b.png)
Output of docker-compose ps
5.  如我们所见，每个服务都与不同的主机端口相关联。我们可以试着看看它们是否有效，例如使用`curl`。让我们测试第三个实例，`ch08_web_3`:
```
$ curl -4 localhost:32770
Pets Demo Application
```
答案`Pets Demo Application`告诉我们，实际上，我们的应用仍在按预期工作。为了确保万无一失，尝试一下另外两个例子。
# 构建和推送应用
我们也可以使用`docker-compose build`命令来构建底层`compose`文件中定义的应用的映像。但是为了使这个工作，我们必须将构建信息添加到`docker-compose`文件中。在文件夹中，我们有一个文件，`docker-compose.dev.yml`，其中已经添加了那些说明:
```
version: "3.5"
services:
  web:
    build: web
    image: fundamentalsofdocker/ch08-web:1.0
    ports:
      - 3000:3000
  db:
    build: database
    image: fundamentalsofdocker/ch08-db:1.0
    volumes:
      - pets-data:/var/lib/postgresql/data
volumes:
  pets-data:
```
请注意每项服务的`build`键。该键的值指示 Docker 期望在其中找到 Docker 文件以构建相应映像的上下文或文件夹。
让我们现在使用该文件:
```
$ docker-compose -f docker-compose.dev.yml build
```
`-f`参数将告诉 Docker 编写应用使用哪个编写文件。
要将所有映像推送到 Docker Hub，我们可以使用`docker-compose push`。我们需要登录到 Docker Hub，这样才能成功，否则推送时会出现认证错误。因此，在我的例子中，我做了以下事情:
```
$ docker login -u fundamentalsofdocker -p 
```
假设登录成功，那么我可以推送以下代码:
```
$ docker-compose -f docker-compose.dev.yml push
```
前面的命令将两个映像推送到 Docker Hub 上的账户`fundamentalsofdocker`。你可以在网址上找到这两张图片:[https://hub.docker.com/u/fundamentalsofdocker/](https://hub.docker.com/u/fundamentalsofdocker/)。
# 摘要
本章我们介绍了工具`docker-compose`。该工具主要用于在单个 Docker 主机上运行和扩展多服务应用。通常，开发人员和配置项服务器与单个主机一起工作，这两个主机是 Docker Compose 的主要用户。该工具使用 YAML 文件作为输入，这些文件以声明的方式包含应用的描述。
该工具还可以用于构建和推送映像以及许多其他有用的任务。本章附带的代码可以在`labs/ch08`中找到。
在下一章中，我们将介绍编排器。一个**指挥器**是一个基础设施软件，用于运行和管理集群中的容器化应用，它确保这些应用始终处于它们期望的状态。
# 问题
要评估您的学习进度，请回答以下问题:
1.  如何使用`docker-compose`在守护模式下运行应用？
2.  您将如何使用`docker-compose`显示正在运行的服务的详细信息？
3.  你将如何扩展一个特定的 web 服务，比如说，三个实例？
# 进一步阅读
以下链接提供了有关本章中讨论的主题的附加信息:
*   *YAML 官方网站*在[http://www.yaml.org/](http://www.yaml.org/)
*   Docker 复合文档 at[http://docker . ly/1 fl 2 VQ 6](http://dockr.ly/1FL2VQ6)
*   *在[http://dockr.ly/2iHUpeX](http://dockr.ly/2iHUpeX)撰写文件版本 3 参考*