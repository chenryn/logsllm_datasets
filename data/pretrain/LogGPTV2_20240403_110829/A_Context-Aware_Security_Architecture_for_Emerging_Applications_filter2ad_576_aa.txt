title:A Context-Aware Security Architecture for Emerging Applications
author:Michael J. Covington and
Prahlad Fogla and
Zhiyuan Zhan and
Mustaque Ahamad
A Context-Aware Security Architecture for Emerging Applications
Michael J. Covingtony, Prahlad Fogla, Zhiyuan Zhan, Mustaque Ahamad
College of Computing
Georgia Institute of Technology
Atlanta, Georgia 30332-0280
Abstract
We describe an approach to building security services
for context-aware environments. Speciﬁcally, we focus on
the design of security services that incorporate the use of
security-relevant “context” to provide ﬂexible access con-
trol and policy enforcement. We previously presented a gen-
eralized access control model that makes signiﬁcant use of
contextual information in policy deﬁnition. This document
provides a concrete realization of such a model by present-
ing a system-level service architecture, as well as early im-
plementation experience with the framework. Through our
context-aware security services, our system architecture of-
fers enhanced authentication services, more ﬂexible access
control and a security subsystem that can adapt itself based
on current conditions in the environment. We discuss our
architecture and implementation and show how it can be
used to secure several sample applications.
1 Introduction
As computers become more pervasive and their function-
ality is more transparently integrated into homes and com-
munities, new applications will emerge to make everyday
living easier for people. Such applications, which will be
enabled by a pervasive computing and communication in-
frastructure, will provide unobtrusive access to important
information, resources and services. Clearly, the successful
deployment of such applications will depend on our ability
to secure them. In particular, we will have to ensure that
access to information and services is granted only to autho-
rized users, without requiring them to deal with complex
security policies or burdensome authentication procedures.
Traditionally, security requirements are assumed to be
relatively static since access control decisions do not change
with context, nor do they account for changing conditions in
This work was supported in part by NSF grants CCR-9988212, ITR-
0081276 and ITR-0121634.
yContact Author: PI:EMAIL
the environment. As computing technology becomes more
tightly integrated into the fabric of everyday life, it is imper-
ative that security mechanisms become more ﬂexible and
less intrusive. To address these concerns, our research is fo-
cused on providing security services for context-aware com-
puting environments that can adapt to changing conditions
when requests are made. Speciﬁcally, we target an “aware”
or smart home setting, such as the Aware Home [12], in
which a pervasive computing environment is used to pro-
vide augmented services to the residents and their guests in
the home. Sensors are used to capture, process and store a
variety of information about the users, their activities and
the environment in which they interact. Access to certain
appliances may be controlled based on the context of the
request; for example, the time at which the request is made
or the activity in which the user is involved.
Although considerable work has been done in securing
military and commercial information systems, few projects
have speciﬁcally addressed the needs of a residential com-
puting infrastructure. Current research that speciﬁcally tar-
gets home environments attempts to move traditional secu-
rity mechanisms into the residential space. In contrast, we
are developing security techniques that are natural, intuitive
and non-intrusive for connected homes and community en-
vironments. In this paper, we present a middleware-level
architecture that has been designed to secure and support
context-aware applications in the Aware Home using the au-
thentication and authorization techniques that we presented
in [6, 17, 5]. Such an architecture We will show how such
applications have special requirements and properties that
require a generalized security architecture — one not found
in traditional systems — to provide the necessary support
for securing pervasive computing applications.
The remainder of this paper proceeds as follows: Sec-
tion 2 motivates our work by detailing the security chal-
lenges that are encountered in a context-aware environment
such as the Aware Home. We show how extended ac-
cess control models are beneﬁcial in context-aware environ-
ments and discuss some of the unique features that distin-
guish these application scenarios from those found in tradi-
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:13:07 UTC from IEEE Xplore.  Restrictions apply. 
tional systems. In Sect. 3, we present an implementation of
an architecture for securing context-aware applications and
discuss our initial experiences with the security services.
Section 4 details our experience with building secure appli-
cations and provides experimental results that characterize
the performance of the services that make up the security
architecture. We discuss the beneﬁts of our approach and
compare it with related work in Sect. 5. Finally, the paper
is concluded in Sect. 6.
2 Security Challenges in Context-Aware
Environments
The context-aware applications alluded to in the previ-
ous section present new and interesting security challenges.
The transparent nature of a pervasive computing environ-
ment motivates the need for a security architecture that will
transparently determine the sources of requests and handle
a high degree of context changes. We can no longer as-
sume that user “sessions” will persist for extended periods
with the same authentication and authorization credentials.
Thus, we must look at new access control models and au-
thentication techniques that will operate effectively in these
next-generation environments.
2.1 Context-Aware Authorization
Security policies in an information-rich environment like
the Aware Home can potentially be quite complex. A pol-
icy can restrict access to information or resources based on
several factors, including attributes pertaining to the subject,
the resource or the environment. For example, subjects can
be classiﬁed into roles such as “resident” or “guest.” Ac-
cess rights can depend on the subject’s classiﬁcation (e.g.,
“resident”), as well as on his or her actual identity. Access
also may be restricted based on the subject’s location, or
based on environmental factors such as the temperature or
the time of day.
While time and location are natural examples of envi-
ronmental states that could be used in access control, richer
contextual information could also impact the result of an
access request. We take an approach which makes use of
the well-known notion of roles to capture security-relevant
state. In particular, we deﬁne environment roles based on
the security-relevant context or state of the environment [5].
Environment roles are one component in the Generalized
Role-Based Access Control (GRBAC) model [6, 17] and a
key extension to the core ideas found in traditional Role-
Based Access Control [20, 9].
While GRBAC presents a powerful and ﬂexible model
for expressing access control policies for context-aware ap-
plications, the model itself clearly requires a more complex
system architecture to support the extended roles and in-
tricate policies that are made possible.
In particular, the
system architecture must support mechanisms to securely
collect contextual information that is used to enforce ac-
cess control policies. In addition, GRBAC requires that a
separate authorization component be available to bind sub-
ject, object and environment roles together with an opera-
tion and corresponding permission. In Sect. 3, we present
our approach to building this architecture and discuss the
various components that provide the security infrastructure
to context-aware applications.
2.2 Non-Intrusive User Authentication
Another challenge presented by a pervasive computing
environment like the Aware Home involves relieving the
user from the “burden” of authentication. Ideally, informa-
tion available from sensors in the home should be used to
automatically infer a subject’s security-relevant attributes
(e.g., identity, role, location, etc.). Although it is possible
for a resident to use a physical authentication token, it is un-
desirable to expect the user to carry such an object around at
all times. Previous work with physical identiﬁcation tokens
such as the Active Badge system [22] have yielded useful
results but are less practical for home use and unreliable
for authentication (users can assume a different identity by
simply carrying another person’s badge).
Several sensor-based technologies such as voice and
face recognition can be deployed in the Aware Home to
non-intrusively identify humans and track their movements.
Many such techniques can establish the identity of a sub-
ject with only a partial level of certainty. Such “partial
authentication” has important implications for access con-
trol models. In particular, some identiﬁcation mechanisms
are known to be more reliable than others. Our model for
context-aware user authentication takes these differences
into account and provides a mechanism for “parameterized
authentication.” Parameterized authentication allows a le-
gitimate user to maintain access to a system even when the
overall quality of his authentication is not 100%. We do
this by granting subsets of access rights based on the cur-
rent “authentication parameter,” a metric that is based on
trust in the devices that provide authentication data and the
inherent accuracy of those devices. A related notion of vari-
ous levels of authentication for a user was recently proposed
in [10].
3 Implementation
To address the problem of providing security to context-
aware applications, we describe a Context-Aware Security
Architecture (CASA). CASA provides a security infrastruc-
ture upon which emerging applications can be built. Fig-
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:13:07 UTC from IEEE Xplore.  Restrictions apply. 
Authentication
Service
Authorization
Service
Authorization
Request
Permission
Resource
Access
Request
Environment Role
Activation Service
Object Role
Activation Service
User
Context Management
Object Management
Security
Management
Service
Systems/Sensors
Resources
Trust Management
Service
Figure 1. Logical Framework for Securing Context-Aware Applications
ure 1 provides a high-level overview of the various logical
components that comprise this security architecture.
We have implemented a prototype system that uses
CASA to provide security services to applications running
in an information-rich computing environment. Our imple-
mentation is built using the Java 2 Standard Edition Soft-
ware Development Kit (J2SE SDK)[16]. In the following
sections, we describe our instantiation of CASA and pro-
vide details on making these services available to context-
aware applications
3.1 Policy Speciﬁcation Language
A Generalized Policy Deﬁnition Language (GPDL) is
described in [17] for deﬁning GRBAC policies. We have
found that in practice, however, GPDL can be frustrating
and clumsy for a policy administrator to manage, especially
when editing large, complex policy ﬁles. Roles are inher-
ently visual, so it would be useful to have a graphical policy
editor that displays available roles, their relationships, and
policy rules in a clear-cut manner.
We have built a prototype graphical editor and are cur-
rently exploring how it can help to deﬁne and explain com-
plex security policies. Such an interface is necessary as our
access model is deployed in the Aware Home. By using
this graphical editor, we are able to display complex secu-
rity policies using simple constructs and an intuitive lay-
out. This GUI allows a security administrator to associate
permissions with various combinations of roles. For exam-
ple, a child can be denied access to a category of resources
that is classiﬁed using a single role, dangerous appliance,
during certain environmental conditions (e.g., during a par-
ent’s working hours). In a more intricate example, we could
specify complex, method-level access control on object re-
sources in the system. For instance, the family physician
may have access to read and write medical databases in the
home, while the family attorney can only obtain a limited
view of such records in the event of an emergency.
In our implementation, policies are deﬁned through the
graphical management tool and encoded into eXtensible
Markup Language, or XML [4]. XML is used to spec-
ify access policies, role deﬁnitions and relationships and is
also used as a common representation to share data between
the various services in the architecture. Figure 2 shows the
XML-encoded policy that restricts a user in the child role
from accessing a dangerous appliance during speciﬁed en-
vironmental conditions.
Given well-structured rulesets, XML provides an efﬁ-
cient structure for storing the policy that is generated and
enforced by our security services. We take advantage of
XML’s robust, non-proprietary and veriﬁable ﬁle-format by
using it to transmit policies and related information (e.g.,
environment role deﬁnitions) between services in our archi-
tecture. Each component in our infrastructure can construct
its own efﬁcient runtime structures for local processing, but
XML is used to transfer information between services. This
allows us to standardize on a platform-independent policy
speciﬁcation that can be read, veriﬁed and processed by any
authorized component.
3.2 Security Management Service
The Security Management Service (SMS) is responsible
for managing and storing system policies and role relation-
ships, as speciﬁed by the security administrator. We sepa-
rate the functionality of policy storage and runtime policy
evaluation so as to allow for a more distributed and efﬁcient
system design. Policies that are enforced using the GRBAC
model are deﬁned in terms of roles. The SMS manages the
relationships that exist between roles and provides appropri-
ate mechanisms for secure storage and retrieval of policies.
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:13:07 UTC from IEEE Xplore.  Restrictions apply. 
 Child 
 Dangerous Appliance 
 ALL 
 Working Hours 
 Deny 
Figure 2. Example GRBAC Policy Speciﬁcation in XML
In our architecture, policy enforcement is provided by an
Authorization Service, while environment role activation is
managed by a separate logical service. The SMS allows
for role manipulation to be performed and ensures that any
associated roles or policies are updated accordingly. For
example, if a security administrator were to make policy
changes to an active system, the SMS would notify any role
activation service (subject, object, environment) affected by
the change.
In addition, the SMS provides a central location for
backup and recovery. Since it is responsible for all pol-
icy management and for the bootstrapping of other com-
ponents, the SMS can be distributed and protected more
efﬁciently and effectively than an architecture that would
distribute policy and management functionalities. For in-
stance, the SMS could be implemented on top of a dis-
tributed data repository such as the Secure Store [14] that
would provide data replication and enhanced availability in
a potentially hostile environment.
Our implementation provides an SMS that is comprised
of two separate components – a persistent storage mecha-
nism that is responsible for storing policy-related data and
a front-end processor that provides a communication inter-
face between this storage component and other services in
the framework. This modular design allows storage mecha-
nisms to be easily replaced without requiring changes to the
communication interface.
Although the SMS provides a centralized location for
policy storage and retrieval, no other components are struc-
tured in the same way. Authorization, authentication and
role-activation services can be centralized or distributed
based on the environment in which they operate.
In the
Aware Home, some resources may instantiate a local Au-
thorization Service to perform their own resource access
checks. Other limited-capability resources may opt to of-
ﬂoad authorization to a central service. In either case, the
SMS serves as the central console for policy updates and
ensures consistency and well-formedness of policy and role
deﬁnitions.
3.3 Authorization Service
The Authorization Service is responsible for retriev-
ing policy deﬁnitions from the SMS and for determining