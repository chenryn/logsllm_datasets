# A Context-Aware Security Architecture for Emerging Applications

**Authors:**
- Michael J. Covington
- Prahlad Fogla
- Zhiyuan Zhan
- Mustaque Ahamad

**Affiliation:**
College of Computing, Georgia Institute of Technology, Atlanta, Georgia 30332-0280

## Abstract
This paper presents an approach to building security services for context-aware environments, focusing on the design of security services that incorporate contextual information to provide flexible access control and policy enforcement. We previously introduced a generalized access control model that leverages contextual information in policy definition. This document details a concrete realization of this model through a system-level service architecture and early implementation experiences with the framework. Our context-aware security services offer enhanced authentication, more flexible access control, and a security subsystem that can adapt based on current environmental conditions. The paper discusses the architecture, implementation, and its application to secure several sample applications.

## 1. Introduction
As computers become more pervasive and their functionality is more transparently integrated into homes and communities, new applications will emerge to simplify everyday living. These applications, enabled by a pervasive computing and communication infrastructure, will provide unobtrusive access to important information, resources, and services. Successful deployment of such applications depends on our ability to secure them, ensuring that access to information and services is granted only to authorized users without complex security policies or burdensome authentication procedures.

Traditionally, security requirements are assumed to be relatively static, as access control decisions do not change with context or account for changing environmental conditions. As computing technology becomes more tightly integrated into daily life, it is imperative that security mechanisms become more flexible and less intrusive. Our research focuses on providing security services for context-aware computing environments that can adapt to changing conditions when requests are made. Specifically, we target an "aware" or smart home setting, such as the Aware Home, where a pervasive computing environment provides augmented services to residents and guests. Sensors capture, process, and store various information about users, their activities, and the environment, allowing access to certain appliances to be controlled based on the context of the request.

Although considerable work has been done in securing military and commercial information systems, few projects have specifically addressed the needs of a residential computing infrastructure. Current research targeting home environments attempts to move traditional security mechanisms into the residential space. In contrast, we are developing security techniques that are natural, intuitive, and non-intrusive for connected homes and community environments. This paper presents a middleware-level architecture designed to secure and support context-aware applications in the Aware Home using the authentication and authorization techniques we presented in [6, 17, 5]. We show how such applications have special requirements and properties that necessitate a generalized security architecture, not found in traditional systems, to provide the necessary support for securing pervasive computing applications.

The remainder of the paper is organized as follows: Section 2 motivates our work by detailing the security challenges in a context-aware environment such as the Aware Home. Section 3 presents an implementation of an architecture for securing context-aware applications and discusses our initial experiences with the security services. Section 4 details our experience with building secure applications and provides experimental results characterizing the performance of the security architecture. Section 5 compares our approach with related work, and Section 6 concludes the paper.

## 2. Security Challenges in Context-Aware Environments
Context-aware applications present new and interesting security challenges. The transparent nature of a pervasive computing environment necessitates a security architecture that can transparently determine the sources of requests and handle a high degree of context changes. We can no longer assume that user sessions will persist for extended periods with the same authentication and authorization credentials. Therefore, we must explore new access control models and authentication techniques that operate effectively in these next-generation environments.

### 2.1 Context-Aware Authorization
Security policies in an information-rich environment like the Aware Home can be quite complex. Policies can restrict access to information or resources based on several factors, including attributes of the subject, the resource, or the environment. For example, subjects can be classified into roles such as "resident" or "guest." Access rights can depend on the subject's classification (e.g., "resident") and their actual identity. Access may also be restricted based on the subject's location or environmental factors such as temperature or time of day.

While time and location are natural examples of environmental states used in access control, richer contextual information can also impact access requests. We use the well-known notion of roles to capture security-relevant state, defining environment roles based on the security-relevant context or state of the environment [5]. Environment roles are a key component in the Generalized Role-Based Access Control (GRBAC) model [6, 17], extending the core ideas found in traditional Role-Based Access Control [20, 9].

GRBAC presents a powerful and flexible model for expressing access control policies for context-aware applications but requires a more complex system architecture to support extended roles and intricate policies. The system architecture must support mechanisms to securely collect contextual information for enforcing access control policies. Additionally, GRBAC requires a separate authorization component to bind subject, object, and environment roles together with an operation and corresponding permission. In Section 3, we present our approach to building this architecture and discuss the various components that provide the security infrastructure for context-aware applications.

### 2.2 Non-Intrusive User Authentication
Another challenge in a pervasive computing environment like the Aware Home is relieving the user from the burden of authentication. Ideally, information from sensors in the home should be used to automatically infer a subject's security-relevant attributes (e.g., identity, role, location). Although physical authentication tokens can be used, it is undesirable to expect users to carry them at all times. Previous work with physical identification tokens, such as the Active Badge system [22], has yielded useful results but is less practical for home use and unreliable for authentication (users can assume a different identity by carrying another person's badge).

Sensor-based technologies like voice and face recognition can be deployed in the Aware Home to non-intrusively identify humans and track their movements. These techniques can establish a subject's identity with varying levels of certainty, which has important implications for access control models. Some identification mechanisms are more reliable than others. Our model for context-aware user authentication accounts for these differences and provides a mechanism for "parameterized authentication." Parameterized authentication allows a legitimate user to maintain access to a system even when the overall quality of their authentication is not 100%. We achieve this by granting subsets of access rights based on the current "authentication parameter," a metric based on trust in the devices providing authentication data and their inherent accuracy. A related notion of various levels of authentication for a user was recently proposed in [10].

## 3. Implementation
To address the problem of providing security to context-aware applications, we describe a Context-Aware Security Architecture (CASA). CASA provides a security infrastructure upon which emerging applications can be built. Figure 1 provides a high-level overview of the logical components comprising this security architecture.

We have implemented a prototype system using CASA to provide security services to applications running in an information-rich computing environment. Our implementation is built using the Java 2 Standard Edition Software Development Kit (J2SE SDK) [16]. In the following sections, we describe our instantiation of CASA and provide details on making these services available to context-aware applications.

### 3.1 Policy Specification Language
A Generalized Policy Definition Language (GPDL) is described in [17] for defining GRBAC policies. In practice, however, GPDL can be frustrating and cumbersome for policy administrators, especially when editing large, complex policy files. Roles are inherently visual, so a graphical policy editor that displays available roles, their relationships, and policy rules in a clear manner would be beneficial.

We have built a prototype graphical editor and are currently exploring how it can help define and explain complex security policies. This interface is necessary as our access model is deployed in the Aware Home. Using this graphical editor, we can display complex security policies using simple constructs and an intuitive layout. The GUI allows a security administrator to associate permissions with various combinations of roles. For example, a child can be denied access to a category of resources classified as a dangerous appliance during certain environmental conditions (e.g., during a parent's working hours). In a more intricate example, we could specify complex, method-level access control on object resources in the system. For instance, the family physician may have access to read and write medical databases in the home, while the family attorney can only obtain a limited view of such records in the event of an emergency.

In our implementation, policies are defined through the graphical management tool and encoded into eXtensible Markup Language (XML) [4]. XML is used to specify access policies, role definitions, and relationships and serves as a common representation to share data between the various services in the architecture. Figure 2 shows the XML-encoded policy that restricts a user in the child role from accessing a dangerous appliance during specified environmental conditions.

Given well-structured rulesets, XML provides an efficient structure for storing the policy generated and enforced by our security services. We leverage XML's robust, non-proprietary, and verifiable file format to transmit policies and related information (e.g., environment role definitions) between services in our architecture. Each component in our infrastructure can construct its own efficient runtime structures for local processing, but XML is used to transfer information between services. This allows us to standardize on a platform-independent policy specification that can be read, verified, and processed by any authorized component.

### 3.2 Security Management Service
The Security Management Service (SMS) is responsible for managing and storing system policies and role relationships, as specified by the security administrator. We separate the functionality of policy storage and runtime policy evaluation to allow for a more distributed and efficient system design. Policies enforced using the GRBAC model are defined in terms of roles. The SMS manages the relationships between roles and provides appropriate mechanisms for secure storage and retrieval of policies.

In our architecture, policy enforcement is provided by an Authorization Service, while environment role activation is managed by a separate logical service. The SMS allows for role manipulation and ensures that any associated roles or policies are updated accordingly. For example, if a security administrator makes policy changes to an active system, the SMS notifies any affected role activation service (subject, object, environment).

Additionally, the SMS provides a central location for backup and recovery. Since it is responsible for all policy management and the bootstrapping of other components, the SMS can be distributed and protected more efficiently and effectively than an architecture that distributes policy and management functionalities. For instance, the SMS could be implemented on top of a distributed data repository such as the Secure Store [14], providing data replication and enhanced availability in a potentially hostile environment.

Our implementation provides an SMS comprised of two separate components: a persistent storage mechanism responsible for storing policy-related data and a front-end processor that provides a communication interface between this storage component and other services in the framework. This modular design allows storage mechanisms to be easily replaced without requiring changes to the communication interface.

Although the SMS provides a centralized location for policy storage and retrieval, no other components are structured in the same way. Authorization, authentication, and role-activation services can be centralized or distributed based on the environment in which they operate. In the Aware Home, some resources may instantiate a local Authorization Service to perform their own resource access checks, while other limited-capability resources may offload authorization to a central service. In either case, the SMS serves as the central console for policy updates and ensures consistency and well-formedness of policy and role definitions.

### 3.3 Authorization Service
The Authorization Service is responsible for retrieving policy definitions from the SMS and determining whether a given request should be granted or denied. It evaluates the context of the request, including the subject's roles, the requested resource, and the current environmental conditions, to make an informed decision. The Authorization Service can be instantiated locally or centrally, depending on the specific requirements of the environment. For example, in the Aware Home, some resources may have a local Authorization Service to perform their own access checks, while others may rely on a central service for authorization.

## 4. Experimental Results and Performance
In this section, we detail our experience with building secure applications and provide experimental results characterizing the performance of the services that make up the security architecture. We evaluate the effectiveness of our context-aware security services in various scenarios, including different levels of context complexity and varying numbers of users and resources. Our results demonstrate that the CASA framework can efficiently handle a wide range of access control and authentication requirements while maintaining high performance and scalability.

## 5. Related Work and Comparison
We compare our approach with related work in the field of context-aware security and access control. While many existing solutions focus on traditional, static access control models, our work introduces a more dynamic and flexible approach that leverages contextual information. We discuss the advantages and limitations of our approach and highlight the unique features that distinguish it from other security architectures.

## 6. Conclusion
In conclusion, this paper presents a context-aware security architecture designed to meet the unique challenges of emerging applications in pervasive computing environments. Our approach leverages contextual information to provide flexible access control and adaptive security services, enhancing the overall security and usability of context-aware applications. Future work will focus on further refining the architecture, expanding its capabilities, and deploying it in real-world settings to validate its effectiveness.

---

**Acknowledgments:**
This work was supported in part by NSF grants CCR-9988212, ITR-0081276, and ITR-0121634.

**Contact Author:**
Michael J. Covington, PI:EMAIL

**Proceedings:**
18th Annual Computer Security Applications Conference (ACSAC 2002)
1063-9527/02 $17.00 © 2002 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25, 2021, at 07:13:07 UTC from IEEE Xplore. Restrictions apply.