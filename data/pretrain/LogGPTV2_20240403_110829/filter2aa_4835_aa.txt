# Puzz-word
Category: Programming, 300 Points
## Description
>  One of my colleagues just loves puzzles.
> 
> He wrote this API that you can send and get a puzzle, and if you can solve it, you get the secret key to his bitcoin fortune.
> 
> We couldn't get it :(
> 
> Can you?
## Solution
Let's check the attached service:
```console
┌──(user@kali)-[/media/sf_CTFs/checkpoint/Puzz-word]
└─$ curl https://puzzword.csa-challenge.com/help
Hello. To get your puzzle go to /puzzle instead of this /help.
The puzzle is a peg solitaire game. You are probably familiar with it, but if not,
you can read about it online, or even play it here: https://www.webgamesonline.com/peg-solitaire/
When you go to /puzzle, you will get the source and destination, and you will need to provide your solution.
The source will look something like this:
|   OOO   |
|   OOO   |
|OOOOOOOOO|
|OOOO.OOOO|
|OOOOOOOOO|
|   OOO   |
|   OOO   |
If you are familiar with this game, or you've just read about it, then you know what you need to do:
The pieces that are marked with 'O' can move above other pieces to an empty spot on the board (marked with '.')
The piece that you are jumping above will be taken out of the board.
You will need to provide the solution that will reach the destination.
The destination will look something like this:
|   ...   |
|   ...   |
|.........|
|....O....|
|.........|
|   ...   |
|   ...   |
The solution is the series of steps that will get you to the destination.
To describe a step we can use a coordinate system where 0,0 is the top left, 8,0 is top right
0,8 is bottom left and 8,8 is bottom right.
To describe the direction we can just use arrow-like characters:
 means right
and ^ and v mean up and down
The solution will be an array of moves that you need to send the /solve API
This should be a field in the JSON body of a POST request
Each move has 3 elements: x, y and direction.
For example:
{"solution": [[4,1,"v"], [6,2,"  ...O...
    OOOOOOO       .......
      OOO           ...
      OOO           ...
```
We can solve it manually or using any automated solver and submit the answer:
```console
┌──(user@kali)-[/media/sf_CTFs/checkpoint/Puzz-word]
└─$ curl -X POST -H "Content-Type: application/json" https://puzzword.csa-challenge.com/solve --data '{"puzzle_id": "ee2d08c2-1adc-45f1-b34d-26c682d1a879", "solution": [[1, 3, ">"], [2, 1, "v"], [0, 2, ">"], [0, 4, "^"], [2, 3, "^"], [2, 0, "v"], [2, 4, ""], [3, 0, "v"], [3, 2, ""], [3, 6, "^"], [3, 4, ""], [3, 2, "v"], [4, 4, ""], [4, 6, "^"], [4, 3, "v"], [6, 4, ""], [6, 2, "v"], [6, 4, ".
# Based on https://blog.c-01a.de/posts/solving-peg-solitaire/ with modifications
from typing import List, Tuple
HOLE    = 0
PEG     = 1
INVALID = 2
class Board(object):
    def __init__(self, src_board, dst_board):
        if len(src_board) == 0 or len(src_board[0]) == 0:
            raise RuntimeError("Illegal board!")
        self.board = src_board
        self.dst_board = dst_board  # Shared among clones
        self.max_x = len(self.board) - 1
        self.max_y = len(self.board[0]) - 1
        # Lazy initialization to support fast clone:
        self.boards_played = None # Shared among clones
        self.src_num_holes = None
        self.dst_num_holes = None
    def __hash__(self):
        return hash(tuple([tuple(row) for row in self.board]))
    def clone(self):
        # Ca. 2x faster than copy.deepcopy()
        board_copy = [[peg for peg in row] for row in self.board]
        b = Board(board_copy, self.dst_board)
        b.boards_played = self.boards_played
        b.src_num_holes = self.src_num_holes
        b.dst_num_holes = self.dst_num_holes
        # dst_board, boards_played are shared among all clones!
        return b
    def possible_moves(self) -> List[Tuple[Tuple[int, int], Tuple[int, int]]]:
        moves = []  # Format: ((from x, from y), (to x, to y))
        # For each board position
        for x, row in enumerate(self.board):
            for y, slot in enumerate(row):
                # If occupied by a peg
                if slot == PEG:
                    # Find valid moves for this peg
                    peg_moves = self.moves_for_peg(x, y)
                    moves.extend([((x, y), move) for move in peg_moves])
        return moves
    def moves_for_peg(self, x, y) -> List[Tuple[int, int]]:
        assert 0  self.dst_num_holes:
            return True
        return False
    def is_solved(self):
        return self.board == self.dst_board
def solve_recursive(board, move_memo=()):
    if board.dead_end():
        return None
    moves = board.possible_moves()
    if board.is_solved():
        return move_memo
    else:
        for move in moves:
            result = solve_recursive(board.clone().move(move), [mm for mm in move_memo] + [move])
            if result:
                return result
    return None
board_slot_translation = {
   " ": INVALID,
   "O": PEG,
   ".": HOLE
}
def build_board(board_spec):
    board = [list(map(lambda c: board_slot_translation[c], row)) for row in board_spec]
    # Rotate board
    return list(map(list, zip(*board)))
def translate_moves(moves):
    res = []
    for m in moves:
        if m[0][0] > m[1][0]:
            move = ""
        elif m[0][1] > m[1][1]:
            move = "^"
        else:
            move = "v"
        res.append([m[0][0], m[0][1], move])
    return res
if __name__ == '__main__':
    from pwn import *
    import requests
    import json
    res = requests.get("https://puzzword.csa-challenge.com/puzzle")
    while "message" in res.json():
        json_res = res.json()
        message = json.loads(json_res["message"])
        if "message" in message:
            log.info(f"Got Message:\n{message['message']}")
        if not "source_board" in message or not "destination_board" in message or not "puzzle_id" in message:
            break
        log.info("Source board:\n{}\n\n".format('\n'.join(message['source_board'])))
        log.info("Destination board:\n{}\n\n".format('\n'.join(message['destination_board'])))
        src_board = build_board(message['source_board'])
        dst_board = build_board(message['destination_board'])
        moves = solve_recursive(Board(src_board, dst_board))
        if moves is None:
            log.error("Can't solve board!")
        solution = translate_moves(moves)
        log.info(f"Solved board, moves:\n{solution}")
        res = requests.post("https://puzzword.csa-challenge.com/solve", json={"puzzle_id": message["puzzle_id"], "solution": solution})
```
This is a recursive solver: For each state, it tries out all the legal derived states possible until the solution is found. However, in order to reduce the search time to a reasonable time, we must implement some kind of [pruning](https://en.wikipedia.org/wiki/Decision_tree_pruning), since exploring the complete search space is very time consuming and mostly redundant. The pruning heuristics are implemented in `dead_end`: This is the method that decides if it's worth to continue perusing this branch. The method will decide that this path is a *dead end* worth pruning if it already visited it from another path, or if the number of holes in the current state is larger than the number of holes in the destination state. This works quite well in our case (another algorithm that worked quite well on the puzzle set can be found [here](https://github.com/mkhrapov/peg-solitaire-solver)).
The output we get is:
```console
┌──(user@kali)-[/media/sf_CTFs/checkpoint/Puzz-word]
└─$ python3 solve.py -O
[*] Source board:
      OOO
      OOO
    OOOOOOO
    OOO.OOO
    OOOOOOO
      OOO
      OOO
[*] Destination board:
      ...
      ...
    .......
    ...O...
    .......
      ...
      ...
[*] Solved board, moves:
    [[1, 3, '>'], [2, 1, 'v'], [0, 2, '>'], [0, 4, '^'], [2, 3, '^'], [2, 0, 'v'], [2, 4, ''], [3, 0, 'v'], [3, 2, ''], [3, 6, '^'], [3, 4, ''], [3, 2, 'v'], [4, 4, ''], [4, 6, '^'], [4, 3, 'v'], [6, 4, ''], [6, 2, 'v'], [6, 4, ''], [2, 1, 'v'], [0, 2, '>'], [3, 3, ''], [2, 3, '^'], [3, 5, '^']]
[*] Got Message:
    Super! what about this french one?
[*] Source board:
      OOO
     OOOOO
    OOOOOOO
    OOO.OOO
    OOOOOOO
     OOOOO
      OOO
[*] Destination board:
      OOO
     O..O.
    OOOO.OO
    OOOOO.O
    OOOOO.O
     OOOOO
      OOO
[*] Solved board, moves:
    [[3, 1, 'v'], [5, 1, ''], [5, 2, '<'], [5, 4, '^']]
[*] Got Message:
    Amazing job! let's do another french
[*] Source board:
      OOO
     OOOOO