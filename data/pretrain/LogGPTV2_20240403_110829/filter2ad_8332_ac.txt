    if (HookAddr == NULL || HookProc == NULL)
        {
            printf("The address is error,please try again!\n\n");
            return FALSE;
        }
判断是否大于5字节，小于5字节则报错空间不够写不进去
    if (dwLength 
    #include 
    //保留硬编码
    BOOL ReAdd;
    BOOL dwHookFlag;
    LPVOID szBuffer;
    LPBYTE HookAddr;
    LPVOID HookProc;
    DWORD dwLength;
    DWORD WriteHookAddr, RetWriteHookAddr;
    DWORD x, y, z;
    DWORD Add(int x, int y, int z);
    DWORD Sub(int i, int j, int k);
    typedef struct _regeist
    {
        DWORD EAX;
        DWORD EBX;
        DWORD ECX;
        DWORD EDX;
        DWORD EBP;
        DWORD ESP;
        DWORD ESI;
        DWORD EDI;
    }regeist;
    regeist reg = { 0 };
    extern "C" _declspec(naked) void Hook()
    {
        _asm
        {
            pushad;     //保留寄存器
            pushfd;     //保留标志寄存器
        }
        _asm
        {
            mov reg.EAX, eax
            mov reg.EBX, ebx
            mov reg.ECX, ecx
            mov reg.EDX, edx
            mov reg.EDI, edi
            mov reg.ESI, esi
            mov reg.ESP, esp
            mov reg.EBP, ebp
        }
        _asm
        {
            mov eax, DWORD PTR ss : [esp + 0x28]
            mov x, eax
            mov eax, DWORD PTR ss : [esp + 0x2c]
            mov y, eax
            mov eax, DWORD PTR ss : [esp + 0x30]
            mov z, eax
        }
        printf("EAX:%x EBX:%x ECX:%x EDX:%x EDI:%x ESI:%x ESP:%x EBP:%x\n\n", reg.EAX, reg.EBX, reg.ECX, reg.EDX, reg.EDI, reg.ESI, reg.ESP, reg.EBP);
        printf("x:%d y:%d z:%d\n\n", x, y, z);
        _asm
        {
            popfd;      //还原标志寄存器
            popad;      //还原寄存器
        }
        //执行之前覆盖的代码
        _asm
        {
            push        ebp
            mov         ebp, esp
            sub         esp, 0C0h
        }
        //执行完后跳转回hook地址
        _asm
        {
            jmp RetWriteHookAddr;
        }
    }
    //HookAddr为钩子地址，HookProc为钩子函数，dwLength为要修改的硬编码长度
    DWORD SetInlineHook(LPBYTE HookAddr, LPVOID HookProc, DWORD dwLength)
    {
        if (HookAddr == NULL || HookProc == NULL)
        {
            printf("The address is error,please try again!\n\n");
            return FALSE;
        }
        if (dwLength  5)
        //E9后面的值 = 要跳转的地址 - E9 - 5
        DWORD JmpAddr = (DWORD)HookProc - (DWORD)HookAddr - 5;
        *(LPBYTE)HookAddr = 0xE9;
        *(PDWORD)((LPBYTE)HookAddr + 1) = JmpAddr;
        WriteHookAddr = (DWORD)HookAddr;
        RetWriteHookAddr = (DWORD)HookAddr + dwLength;
        dwHookFlag = 1;
    }
    DWORD UnInlineHook(DWORD dwLength)
    {
        if (!dwHookFlag)
        {
            printf("UnInlineHook!\n\n");
            return FALSE;
        }
        memcpy((LPVOID)WriteHookAddr, szBuffer, dwLength);
        szBuffer = NULL;
        dwHookFlag = 0;
        return 1;
    }
    DWORD Add(int x, int y, int z)
    {
        return x + y + z;
    }
    DWORD TestInlineHook()
    {
        PBYTE Addr = (BYTE*)Add + 1;
        Addr += *(DWORD*)Addr + 4;
        SetInlineHook((LPBYTE)Addr, Hook, 9);
        Add(8, 1, 5);
        UnInlineHook(9);
        Add(8, 1, 5);
        return 0;
    }
    int main()
    {
        //Add(8, 1, 5);
        TestInlineHook();
        return 0;
    }
实现效果如下，因为在`TestInlineHook`调用了两个`Add`函数，在第二个`Add`函数之前调用了`UnInlineHook`，最后的结果只显示了一次，所以`UnInlineHook`也执行成功了
欢迎关注公众号 **红队蓝军**