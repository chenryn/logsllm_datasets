359.59
Increase
-0.28%
-21.41%
-35.70%
-32.37%
-3.17%
+22.78%
-11.00%
+18.10%
+13.80%
+227.95%
+32.07%
-27.94%
+8.35%
+15.93%
Total execution
times
MOPT-AFL-ever
Executions
per second
124.6M
46.5M
121.4M
623.4M
108.5M
28.9M
42.0M
204.6M
843.8M
1,476.1M
165.2M
199.9M
340.2M
360.43M
144.26
53.83
140.53
721.55
125.59
33.47
48.61
236.75
976.58
1,708.40
191.17
231.36
393.80
417.16
Increase
-1.94%
+32.65%
-33.38%
-31.24%
+18.29%
-32.16%
-13.61%
+96.02%
+119.89%
+252.68%
+38.01%
-8.34%
-10.37%
+35.54%
erating the correct magic bytes since fuzzers will ﬂip ev-
ery bit in the current test case to generate new test cases.
In the later time, MOPT-AFL-tmp will enable the deter-
ministic stage again while MOPT-AFL-ever will not. Thus
MOPT-AFL-tmp is better at discovering unique paths con-
taining magic byte checks than MOPT-AFL-ever. As for
AFL, since it will go through the deterministic stage for all
the test cases, it spends most time on this stage and discovers
few unique crashes and paths. While MOPT-AFL-tmp will
disable the deterministic stage when it cannot discover any
interesting test case for a long time, after some time, it will
re-enable the deterministic stage again and will perform the
deterministic stage with the widely different test cases in the
fuzzing queue. Therefore, MOPT-AFL-tmp can keep efﬁ-
cient fuzzing performance and can perform the deterministic
stage on widely different test cases.
We can also observe from Table 10 that AFL’s Fuzzer2
and Fuzzer3 ﬁnd much more unique crashes than its Fuzzer1
without of the deterministic stage. The Fuzzer1 of MOPT-
AFL-tmp and MOPT-AFL-ever ﬁnds much more crashes
than AFL’s Fuzzer1 and suppresses the performance of
Fuzzer2 and Fuzzer3 in some way. Meantime, the Fuzzer2
and Fuzzer3 of both MOPT-AFL-tmp and MOPT-AFL-ever
perform better than those of AFL. All these results demon-
strate the improvement of the customized PSO algorithm.
7 Limitation and Discussion
In order to further analyze the compatibility of MOPT, we
are eager to combine it with state-of-the-art fuzzers such as
CollAFL [4] and Steelix [10] after they open-source their
system code. By leveraging MOPT as an optimal strategy
for selecting mutation operators, we believe the performance
of these systems can be further enhanced.
In our evaluation, we consider 13 real world programs
and several seed selection strategies, which are still a lim-
ited number of scenarios. In our evaluation, overall, MOPT-
AFL discovers 31 vulnerabilities on tiff2bw and sam2p
and 66 unreported CVEs on the other 11 programs. Further-
Table 10: The performance of three fuzzers in the long term
parallel experiments when fuzzing pdfimages.
Fuzzer1
Fuzzer2
Fuzzer3
Total
AFL
MOPT-AFL-tmp
MOPT-AFL-ever
Unique crashes
Unique paths
Unique crashes
Unique paths
Unique crashes
Unique paths
11
24,763
834
30,098
723
28,047
871
29,329
1,031
31,600
974
30,910
896
29,329
1,042
31,520
1,005
30,966
1,778
83,421
2,907
93,218
2,702
89,923
more, both MOPT-Angora and MOPT-QSYM perform bet-
ter than previous methods on the benchmark dataset LAVA-
M. Therefore, the proposed MOPT is promising to explore
vulnerabilities for real world programs. Nevertheless, the
performance advantage exhibited in our evaluation may not
be applicable to all the possible programs and seeds. Our
evaluation can be enhanced by further conducting more in-
depth evaluation in large-scale. To make our evaluation more
comprehensive, we are planning to perform a large-scale
evaluation of MOPT using more real world programs and
benchmarks in the future.
As a future work, it is interesting to investigate better
mutation operators to further enhance the effectiveness of
MOPT. Constructing a more comprehensive and represen-
tative benchmark dataset to systematically evaluate the per-
formance of fuzzers is another interesting future work.
8 Related Work
In this section, we summarize the existing fuzzing mecha-
nisms and the related seed selection strategies.
Mutation-based fuzzing. AFL is one of the most well-
recognized fuzzers because of its high-efﬁciency and ease of
use [16]. Multiple efﬁcient fuzzers were developed based
on AFL [4, 5]. To improve fuzzing performance, some
combined the mutation-based fuzzing with other bug de-
tection technologies [13, 14, 15, 32]. Another method to
improve mutation-based fuzzers is coverage-based fuzzing
[6, 10, 11]. Li et al. proposed a vulnerability-oriented fuzzer
named V-Fuzz that pays more attention to potentially vulner-
able components [33]. Yun et al. presented a fast concolic
1964    28th USENIX Security Symposium
USENIX Association
execution engine named QSYM to help fuzzers explore more
bugs and paths [29]. By solving the path constraints without
symbolic execution, Angora presented by Chen et al. can
signiﬁcantly increase the branch coverage of programs [9].
MOPT presented in our paper is a scheme of improving
the test case mutation process and generating high-quality
mutated test cases. Taking the advantage of its compatibility,
it can be combined with most of the aforementioned fuzzers.
Although in this paper we focus on using MOPT to im-
prove mutation-based fuzzers, it can also be implemented in
other kinds of fuzzers, such as generation-based fuzzers and
kernel fuzzers, if they have the issues to select proper opera-
tors to generate test cases. MOPT can also be combined with
most existing seed selection strategies since they can provide
better initial seed sets for fuzzers. We brieﬂy introduce the
state-of-the-art related works in these area as follows.
Generation-based fuzzing. Generation-based fuzzers fo-
cus on the programs that require the test cases with speciﬁc
input formats [34, 35]. Recently, Wang et al. presented a
novel data-driven seed generation approach named Skyﬁre to
generate interesting test cases for XML and XSL [1]. Gode-
froid et al. presented a RNN-based machine learning tech-
nique to automatically generate a grammar for the test cases
with complex input formats [36].
Other fuzzing strategies. Several works presented effec-
tive kernel fuzzers [37, 38]. Xu et al. [12] implemented three
new operating primitives to beneﬁt large-scale fuzzing and
cloud-based fuzzing services. You et al. presented SemFuzz
to learn from vulnerability-related texts and automatically
generate Proof-of-Concept (PoC) exploits [39]. Petsios et al.
proposed SlowFuzz to trigger algorithmic complexity vulner-
abilities [22]. Klees et al. performed extensive experiments
and proposed several guidelines to improve the experimental
evaluations for fuzzing [25]. Some works proposed state-of-
the-art directed greybox fuzzers to rapidly reach the target
program locations [21, 40]. Recently, several works [7], [8]
employ the reinforcement learning algorithms as the muta-
tion schedulers and propose their fuzzing frameworks, re-
spectively. However, the performance improvement of these
methods is limited based on their experimental results.
Seed selection strategies. Several works focused on how
to select a better seed set [2, 3]. Nichols et al. showed that
using the generated ﬁles of GAN to reinitialize AFL can ﬁnd
more unique paths of ethkey [41]. Lyu et al. presented
SmartSeed to leverage machine learning algorithms to gen-
erate high-quality seed ﬁles for different input formats [42].
9 Conclusion
We ﬁrst studied the issues of existing mutation-based
fuzzers which employ the uniform distribution for select-
ing mutation operators. To overcome these issues, we pre-
sented a mutation scheduling scheme, named MOPT, based
on Particle Swarm Optimization (PSO). By using MOPT to
search the optimal selection distribution for mutation oper-
ators and leveraging the pacemaker fuzzing mode to further
accelerate the convergence speed of searching, MOPT can
efﬁciently and effectively determine the proper distribution
for selecting mutation operators. Our evaluation on 13 real-
world applications demonstrated that MOPT-based fuzzers
can signiﬁcantly outperform the state-of-the-art fuzzers such
as AFL, AFLFast and VUzzer in most cases. We also
conducted systematic analysis to demonstrate the rational-
ity, compatibility, low cost characteristic and steadiness of
MOPT. Our fuzzers found 81 security CVEs on 11 real
world programs, of which 66 are the newly reported CVEs.
Overall, MOPT can serve as a key enabler for mutation-
based fuzzers in discovering software vulnerabilities, crashes
and program paths.
Acknowledgments
We sincerely appreciate the shepherding from Adam
Doup´e. We would also like to thank the anonymous re-
viewers for their valuable comments and input to improve
our paper. This work was partly supported by NSFC un-
der No. 61772466, the Zhejiang Provincial Natural Sci-
ence Foundation for Distinguished Young Scholars under
No. LR19F020003, the Provincial Key Research and Devel-
opment Program of Zhejiang, China under No. 2017C01055,
and the Alibaba-ZJU Joint Research Institute of Frontier
Technologies. Chao Zhang’s work was partly supported by
the NSFC under No. 61772308 and U1736209. Wei-Han
Lee’s work is partly sponsored by the U.S. Army Research
Laboratory and the U.K. Ministry of Defence under Agree-
ment Number W911NF-16-3-0001.
References
[1] J. Wang, B. Chen, L. Wei, and Y. Liu, “Skyﬁre: Data-
driven seed generation for fuzzing,” in S&P, 2017.
[2] M. Woo, S. K. Cha, S. Gottlieb, and D. Brumley,
“Scheduling black-box mutational fuzzing,” in CCS,
2013.
[3] A. Rebert, S. K. Cha, T. Avgerinos, J. Foote, D. Warren,
G. Grieco, and D. Brumley, “Optimizing seed selection
for fuzzing.” in USENIX, 2014.
[4] S. Gan, C. Zhang, X. Qin, X. Tu, K. Li, Z. Pei, and
Z. Chen, “Collaﬂ: Path sensitive fuzzing,” in S&P,
2018.
[5] M. B¨ohme, V.-T. Pham, and A. Roychoudhury,
“Coverage-based greybox fuzzing as markov chain,” in
CCS, 2016.
[6] S. Rawat, V. Jain, A. Kumar, L. Cojocar, C. Giuffrida,
and H. Bos, “Vuzzer: Application-aware evolutionary
fuzzing,” in NDSS, 2017.
USENIX Association
28th USENIX Security Symposium    1965
[7] K. B¨ottinger, P. Godefroid, and R. Singh, “Deep rein-
forcement fuzzing,” arXiv preprint arXiv:1801.04589,
2018.
[8] W. Drozd and M. D. Wagner, “Fuzzergym: A com-
petitive framework for fuzzing and learning,” arXiv
preprint arXiv:1807.07490, 2018.
[9] P. Chen and H. Chen, “Angora: Efﬁcient fuzzing by
principled search,” in S&P, 2018.
[10] Y. Li, B. Chen, M. Chandramohan, S.-W. Lin, Y. Liu,
and A. Tiu, “Steelix: program-state based binary
fuzzing,” in FSE, 2017.
[11] H. Peng, Y. Shoshitaishvili, and M. Payer, “T-fuzz:
fuzzing by program transformation,” in S&P, 2018.
[12] W. Xu, S. Kashyap, C. Min, and T. Kim, “Designing
new operating primitives to improve fuzzing perfor-
mance,” in CCS, 2017.
[13] I. Haller, A. Slowinska, M. Neugschwandtner, and
H. Bos, “Dowsing for overﬂows: a guided fuzzer to
ﬁnd buffer boundary violations.” in USENIX, 2013.
[14] S. K. Cha, M. Woo, and D. Brumley, “Program-
adaptive mutational fuzzing,” in S&P, 2015.
[15] N. Stephens, J. Grosen, C. Salls, A. Dutcher, R. Wang,
J. Corbetta, Y. Shoshitaishvili, C. Kruegel, and G. Vi-
gna, “Driller: Augmenting fuzzing through selective
symbolic execution.” in NDSS, 2016.
[16] “American Fuzzy Lop,” http://lcamtuf.coredump.cx/
aﬂ/.
[17] K. Serebryany, “Continuous fuzzing with libfuzzer and
addresssanitizer,” in SecDev, 2016.
[18] R. Swiecki,
“Honggfuzz,” Available online at:
http://code. google. com/p/honggfuzz, 2016.
[19] R. Eberhart and J. Kennedy, “A new optimizer using
particle swarm theory,” in MHS, 1995.
[20] C. Lyu, S. Ji, C. Zhang, Y. Li, W.-H. Lee, Y. Song
and R. Beyah, “MOPT: Optimized Mutation Schedul-
ing for Fuzzers, Technical Report,” https://github.com/
puppet-meteor/MOpt-AFL.
[21] M. B¨ohme, V.-T. Pham, M.-D. Nguyen, and A. Roy-
choudhury, “Directed greybox fuzzing,” in CCS, 2017.
[22] T. Petsios, J. Zhao, A. D. Keromytis, and S. Jana,
“Slowfuzz: Automated domain-independent detection
of algorithmic complexity vulnerabilities,” in CCS,
2017.
[23] T. Petsios, A. Tang, S. Stolfo, A. D. Keromytis, and
S. Jana, “Nezha: Efﬁcient domain-independent differ-
ential testing,” in S&P, 2017.
[24] “AddressSanitizer,”
http://clang.llvm.org/docs/
AddressSanitizer.html.
[25] G. Klees, A. Ruef, B. Cooper, S. Wei, and M. Hicks,
“Evaluating fuzz testing,” in CCS, 2018.
[26] “Common Vulnerability Scoring System (CVSS),”
https://www.ﬁrst.org/cvss.
[27] “Cve details,” https://www.cvedetails.com/.
[28] B. Dolangavitt, P. Hulin, E. Kirda, T. Leek, A. Mam-
bretti, W. Robertson, F. Ulrich, and R. Whelan, “Lava:
Large-scale automated vulnerability addition,” in S&P,
2016.
[29] I. Yun, S. Lee, M. Xu, Y. Jang, and T. Kim, “Qsym: A
practical concolic execution engine tailored for hybrid
fuzzing,” in USENIX, 2018.
[30] “p value,” https://en.wikipedia.org/wiki/P-value.
[31] Y. Benjamini and Y. Hochberg, “Controlling the false
discovery rate: a practical and powerful approach to
multiple testing,” J R STAT SOC B, 1995.
[32] T. Wang, T. Wei, G. Gu, and W. Zou, “Taintscope:
A checksum-aware directed fuzzing tool for automatic
software vulnerability detection,” in S&P, 2010.
[33] Y. Li, S. Ji, C. Lyu, Y. Chen, J. Chen, Q. Gu, and C. Wu,
“V-fuzz: Vulnerability-oriented evolutionary fuzzing,”
arXiv preprint arXiv:1901.01142, 2019.
[34] C. Holler, K. Herzig, and A. Zeller, “Fuzzing with code
fragments.” in USENIX, 2012.
[35] K. Dewey, J. Roesch, and B. Hardekopf, “Language
fuzzing using constraint logic programming,” in ASE,
2014.
[36] P. Godefroid, H. Peleg, and R. Singh, “Learn&fuzz:
Machine learning for input fuzzing,” in ASE, 2017.
[37] J. Corina, A. Machiry, C. Salls, Y. Shoshitaishvili,
S. Hao, C. Kruegel, and G. Vigna, “Difuze: interface
aware fuzzing for kernel drivers,” in CCS, 2017.
[38] H. Han and S. K. Cha, “Imf:
fuzzer,” in CCS, 2017.
Inferred model-based
[39] W. You, P. Zong, K. Chen, X. Wang, X. Liao, P. Bian,
and B. Liang, “Semfuzz: Semantics-based automatic
generation of proof-of-concept exploits,” in CCS, 2017.
[40] H. Chen, Y. Xue, Y. Li, B. Chen, X. Xie, X. Wu, and
Y. Liu, “Hawkeye: Towards a desired directed grey-box
fuzzer,” in CCS, 2018.
[41] N. Nichols, M. Raugas, R. Jasper, and N. Hilliard,
“Faster fuzzing: Reinitialization with deep neural mod-
els,” arXiv preprint arXiv:1711.02807, 2017.
[42] C. Lyu, S. Ji, Y. Li, J. Zhou, J. Chen, P. Zhou, and
J. Chen, “Smartseed: Smart seed generation for efﬁ-
cient fuzzing,” arXiv preprint arXiv:1807.02606, 2018.
1966    28th USENIX Security Symposium
USENIX Association