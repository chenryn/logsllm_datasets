### 359.59
- **Increase**: -0.28%
- **Decrease**: -21.41%, -35.70%, -32.37%, -3.17%
- **Increase**: +22.78%, -11.00%, +18.10%, +13.80%, +227.95%, +32.07%
- **Decrease**: -27.94%
- **Increase**: +8.35%, +15.93%

### Total Execution Times
- **MOPT-AFL-ever**:
  - **Executions per second**:
    - 124.6M, 46.5M, 121.4M, 623.4M, 108.5M, 28.9M, 42.0M, 204.6M, 843.8M, 1,476.1M, 165.2M, 199.9M, 340.2M, 360.43M
  - **Execution times**:
    - 144.26, 53.83, 140.53, 721.55, 125.59, 33.47, 48.61, 236.75, 976.58, 1,708.40, 191.17, 231.36, 393.80, 417.16
- **Increase/Decrease**:
  - -1.94%, +32.65%, -33.38%, -31.24%, +18.29%, -32.16%, -13.61%, +96.02%, +119.89%, +252.68%, +38.01%, -8.34%, -10.37%, +35.54%

### Generating the Correct Magic Bytes
Fuzzers flip every bit in the current test case to generate new test cases. Over time, MOPT-AFL-tmp re-enables the deterministic stage, while MOPT-AFL-ever does not. This makes MOPT-AFL-tmp more effective at discovering unique paths containing magic byte checks. AFL, on the other hand, goes through the deterministic stage for all test cases, spending most of its time there and discovering fewer unique crashes and paths. MOPT-AFL-tmp disables the deterministic stage when no interesting test cases are found for a long time, then re-enables it with a diverse set of test cases, maintaining efficient fuzzing performance.

### Table 10: Performance of Fuzzers in Long-Term Parallel Experiments (pdfimages)
| Fuzzer | Unique Crashes | Unique Paths |
|--------|----------------|--------------|
| **AFL** | 11 | 24,763 |
| **MOPT-AFL-tmp** | 834 | 30,098 |
| **MOPT-AFL-ever** | 723 | 28,047 |

| Fuzzer | Unique Crashes | Unique Paths |
|--------|----------------|--------------|
| **AFL** | 871 | 29,329 |
| **MOPT-AFL-tmp** | 974 | 31,600 |
| **MOPT-AFL-ever** | 896 | 30,910 |

| Fuzzer | Unique Crashes | Unique Paths |
|--------|----------------|--------------|
| **AFL** | 1,042 | 29,329 |
| **MOPT-AFL-tmp** | 1,005 | 31,520 |
| **MOPT-AFL-ever** | 1,778 | 30,966 |

| Fuzzer | Unique Crashes | Unique Paths |
|--------|----------------|--------------|
| **AFL** | 2,907 | 83,421 |
| **MOPT-AFL-tmp** | 2,702 | 93,218 |
| **MOPT-AFL-ever** | 89,923 | - |

### Limitations and Discussion
To further analyze MOPT's compatibility, we plan to integrate it with state-of-the-art fuzzers like CollAFL and Steelix once their system code is open-sourced. Our evaluation considered 13 real-world programs and several seed selection strategies, which is still a limited number of scenarios. Overall, MOPT-AFL discovered 31 vulnerabilities in `tiff2bw` and `sam2p`, and 66 unreported CVEs in the other 11 programs. Both MOPT-Angora and MOPT-QSYM performed better than previous methods on the LAVA-M benchmark dataset. The proposed MOPT shows promise for exploring vulnerabilities in real-world programs, but its performance advantage may not be universally applicable. Future work includes conducting more in-depth evaluations on a larger scale and investigating better mutation operators.

### Related Work
#### Mutation-Based Fuzzing
- **AFL**: High-efficiency and ease of use [16]. Several efficient fuzzers have been developed based on AFL [4, 5].
- **Enhancements**: Combining mutation-based fuzzing with other bug detection technologies [13, 14, 15, 32] and coverage-based fuzzing [6, 10, 11].
- **V-Fuzz**: Focuses on potentially vulnerable components [33].
- **QSYM**: Fast concolic execution engine [29].
- **Angora**: Significantly increases branch coverage [9].

#### Generation-Based Fuzzing
- **Skyfire**: Data-driven seed generation for XML and XSL [1].
- **RNN-based ML Technique**: Automatically generates grammar for complex input formats [36].

#### Other Fuzzing Strategies
- **Kernel Fuzzers**: Effective kernel fuzzers [37, 38].
- **Operating Primitives**: New primitives for large-scale and cloud-based fuzzing [12].
- **SemFuzz**: Learns from vulnerability-related texts and generates PoC exploits [39].
- **SlowFuzz**: Triggers algorithmic complexity vulnerabilities [22].
- **Guidelines for Fuzzing Evaluations**: Extensive experiments and guidelines [25].
- **Directed Greybox Fuzzers**: Rapidly reach target program locations [21, 40].
- **Reinforcement Learning**: Used as mutation schedulers [7, 8].

#### Seed Selection Strategies
- **GAN-generated Files**: Reinitializes AFL to find more unique paths [41].
- **SmartSeed**: Uses machine learning algorithms to generate high-quality seed files [42].

### Conclusion
We studied the issues with existing mutation-based fuzzers that use uniform distribution for selecting mutation operators. We presented MOPT, a mutation scheduling scheme based on Particle Swarm Optimization (PSO), which efficiently determines the optimal distribution for selecting mutation operators. Our evaluation on 13 real-world applications demonstrated that MOPT-based fuzzers outperform state-of-the-art fuzzers like AFL, AFLFast, and VUzzer in most cases. We also conducted systematic analysis to demonstrate the rationality, compatibility, low cost, and steadiness of MOPT. Our fuzzers found 81 security CVEs on 11 real-world programs, of which 66 were newly reported. MOPT can serve as a key enabler for mutation-based fuzzers in discovering software vulnerabilities, crashes, and program paths.

### Acknowledgments
We appreciate the shepherding from Adam Doupé and thank the anonymous reviewers for their valuable comments. This work was partly supported by NSFC under No. 61772466, the Zhejiang Provincial Natural Science Foundation for Distinguished Young Scholars under No. LR19F020003, the Provincial Key Research and Development Program of Zhejiang, China under No. 2017C01055, and the Alibaba-ZJU Joint Research Institute of Frontier Technologies. Chao Zhang’s work was partly supported by the NSFC under No. 61772308 and U1736209. Wei-Han Lee’s work is partly sponsored by the U.S. Army Research Laboratory and the U.K. Ministry of Defence under Agreement Number W911NF-16-3-0001.

### References
[1] J. Wang, B. Chen, L. Wei, and Y. Liu, “Skyfire: Data-driven seed generation for fuzzing,” in S&P, 2017.
...
[42] C. Lyu, S. Ji, Y. Li, J. Zhou, J. Chen, P. Zhou, and J. Chen, “Smartseed: Smart seed generation for efficient fuzzing,” arXiv preprint arXiv:1807.02606, 2018.