102103104101102103104Time (ms)|R|Basic-MerBasic-AccUpdEff-MerUpdEff-Acc1021032481632Time (ms)dBasic-MerBasic-AccUpdEff-MerUpdEff-Acc100101102103104105102103104105106Time (sec)nBasic-MerUpdEff-Mer1011021031041255075100Time (sec)# updatesBasic-MerUpdEff-Mer828algorithm, whose time increases drastically with the degree of the
polynomials (as shown in Table 2), dictated by |Ri|. The server’s
total overhead ranges between 650 ms and 25 minutes.
[4] N. Beckmann, H.-P. Kriegel, R. Schneider, and B. Seeger.
The R*-tree: An efﬁcient and robust access method for
points and rectangles. In SIGMOD, 1990.
[5] D. Boneh and X. Boyen. Short signatures without random
oracles and the SDH assumption in bilinear groups. J.
Cryptology, 21(2):149–177, 2008.
[6] D. Boneh, A. Sahai, and B. Waters. Functional encryption:
Deﬁnitions and challenges. In TCC, 2011.
[7] P. G. Brown. Overview of SciDB: Large scale array storage,
processing and analysis. In SIGMOD, 2010.
[8] R. Canetti, O. Paneth, D. Papadopoulos, and
N. Triandopoulos. Veriﬁable set operations over outsourced
databases. In PKC, 2014.
Figure 9: Proof construction cost at server
Summary and future improvements. Our experimental evalua-
tion conﬁrms the feasibility of our schemes. Speciﬁcally, it demon-
strates that the veriﬁcation cost at the client in all schemes is in
the order of a few seconds in the worst case, even for moderate re-
sult sizes, whereas the proof size is up to a few hundred of KBs. At
the owner, we illustrated the beneﬁts of our update-efﬁcient scheme
over the basic one in terms of updates, which come at the cost of
a more expensive setup and client veriﬁcation. Finally, the server
is the most impacted party in our constructions. The proof gener-
ation cost takes from several ms to several minutes, for small and
moderate partial result sizes and dimensionality.
Nevertheless, it is important to stress that the deﬁning costs at the
server account for exponentiations and modular polynomial arith-
metic. These operations are at the core of numerous applications
and, thus, there is huge potential for improvement in the near fu-
ture. In addition, there are works (e.g., [13]) that have substantially
boosted such operations with modern hardware, which we did not
possess in our experimentation. Being instantiations of a general
framework, our schemes feature the attractive property that are eas-
ily upgradeable with future advances in such cryptographic tools.
7. CONCLUSION
We proposed schemes for authenticated multi-dimensional range
queries over outsourced databases. Contrary to existing literature,
our solutions scale linearly with the number of dimensions, and can
support queries on any set of dimensions with linear in the number
of database attributes setup cost and storage. The central idea of
our methods is the reduction of the multi-dimensional range query
to set-operations over appropriately deﬁned sets in the database. We
provided a detailed asymptotic and empirical performance evalua-
tion, which conﬁrms the feasibility of our schemes in practice.
Acknowledgments
We thank all the anonymous reviewers for their detailed comments
and suggestions. Research supported in part by NSF grants CNS-
1012798 and CNS-1012910.
8. REFERENCES
[1] The Crypto++ Library. http://www.cryptopp.com/.
[2] The DCLXVI Library.
http://cryptojedi.org/crypto/.
[3] The Flint Library. http://www.flintlib.org/.
[9] H. Chen, X. Ma, W. Hsu, N. Li, and Q. Wang. Access control
friendly query veriﬁcation for outsourced data publishing. In
ESORICS, 2008.
[10] W. Cheng and K.-L. Tan. Query assurance veriﬁcation for
outsourced multi-dimensional databases. J. Computer
Security, 17(1):101–126, 2009.
[11] K.-M. Chung, Y. T. Kalai, F.-H. Liu, and R. Raz. Memory
Delegation. In CRYPTO, 2011.
[12] J. Dean and S. Ghemawat. MapReduce: Simpliﬁed data
processing on large clusters. Commun. ACM, 51(1):107–113,
Jan. 2008.
[13] P. Emeliyanenko. High-performance polynomial GCD
computations on graphics processors. In HPCS, 2011.
[14] M. T. Goodrich, R. Tamassia, and N. Triandopoulos.
Super-efﬁcient veriﬁcation of dynamic outsourced databases.
In CT-RSA, 2008.
[15] M. T. Goodrich, R. Tamassia, and N. Triandopoulos.
Efﬁcient authenticated data structures for graph connectivity
and geometric search problems. Algorithmica,
60(3):505–552, 2011.
[16] H. Hacigümüs, S. Mehrotra, and B. R. Iyer. Providing
database as a service. In ICDE, 2002.
[17] F. Li, M. Hadjieleftheriou, G. Kollios, and L. Reyzin.
Dynamic authenticated index structures for outsourced
databases. In SIGMOD, 2006.
[18] C. Martel, G. Nuckolls, P. Devanbu, M. Gertz, A. Kwong,
and S. G. Stubblebine. A general model for authenticated
data structures. Algorithmica, 39(1):21–41, Jan. 2004.
[19] R. C. Merkle. A certiﬁed digital signature. In CRYPTO, 1989.
[20] E. Mykletun, M. Narasimha, and G. Tsudik. Authentication
and integrity in outsourced databases. TOS, 2(2):107–138,
2006.
[21] L. Nguyen. Accumulators from bilinear pairings and
applications. In CT-RSA, 2005.
[22] C. Papamanthou, R. Tamassia, and N. Triandopoulos.
Authenticated hash tables. In CCS, 2008.
[23] C. Papamanthou, R. Tamassia, and N. Triandopoulos.
Cryptographic accumulators for authenticated hash tables.
IACR Cryptology ePrint Archive, 2009:625, 2009.
[24] C. Papamanthou, R. Tamassia, and N. Triandopoulos.
Optimal veriﬁcation of operations on dynamic sets. In
CRYPTO, 2011.
[25] B. Parno, J. Howell, C. Gentry, and M. Raykova. Pinocchio:
Nearly Practical Veriﬁable Computation. In IEEE Symposium
on Security and Privacy, 2013.
[26] R. Tamassia. Authenticated data structures. In ESA, 2003.
10-1100101102103101102103104Time (sec)|Ri|Wi = 51%Fi = 15%πRi = 34%Wi = 34%Fi = 40%πRi = 26%Wi = 31%Fi = 44%πRi = 25%Wi = 7%Fi = 87%πRi = 6%Basic-MerUpdEff-Mer829[27] J. Xu. Authenticating aggregate range queries over dynamic
multidimensional dataset. IACR Cryptology ePrint Archive,
2010:244, 2010.
[28] Y. Yang, S. Papadopoulos, D. Papadias, and G. Kollios.
Authenticated indexing for outsourced spatial databases.
VLDB J., 18(3):631–648, 2009.
APPENDIX
Proof of Lemma 3
(⇒) Let X1 = {x1, ..., xl(cid:48)} and X2 = {x1, ..., xl} for l, l(cid:48) ∈ N
with l < l(cid:48).
(cid:81)l(cid:48)
If e(acc(X2), y) = e(acc(X1), g), then we have
i=1(xi+s), g). Hence, it holds e(y, g) =
e(g
= e(acc(X1 \ X2), g) and it follows that y =
i=1(xi+s), y) = e(g
i=l+1(xi+s), g)
(cid:81)l
(cid:81)l(cid:48)
def
e(g
acc(X1 \ X2).
(⇐) If y = acc(X1 \ X2) = g
e(g
i=1(xi+s), y) = e(g
i=1(xi+s), g) = e(acc(X1), g).
(cid:81)l
(cid:81)l(cid:48)
(cid:81)l
(cid:81)l(cid:48)
e(g
i=1(xi+s), g
i=l+1(xi+s), then it holds that
(cid:81)l(cid:48)
i=l+1(xi+s)) =
(cid:4)
Proof of Theorem 1
Let us assume there exists PPT adversary A that wins the AMR
security game with non-negligible probability. Also, let Q, R∗, π∗, j
be the cheating tuple output by A and let T denote the data struc-
ture’s state at index j, and auth(T ), δ the corresponding authenti-
cation information and digest . In the following, we annotate by ∗
any element of π∗. Moreover, if an event is denoted by E, then its
complement is denoted by E(cid:48). Consider the following events:
E1: A wins the AMR game.
E2: π∗ contains a tuple τ∗ or (i, δi)∗ /∈ auth(T ).
Recall that auth(T ) consists of m + 1 SMA structures; each of
the m ﬁrst is built over n tuples τ containing sequential values and
preﬁx accumulations for attribute ai, and the last is built over m
pairs of the form (i, δi), i.e., containing the attribute index and
corresponding digest. Note that, in the AMR game the values
auth(T ), d are computed correctly by the challenger for T .
By the law of total probability, we have:
Pr[E1] = Pr[E2] Pr[E1|E2] + Pr[E(cid:48)
2] .
≤ Pr[E1|E2]] + Pr[E1|E(cid:48)
2] Pr[E1|E(cid:48)
2]
Intuitively, the ﬁrst term in the right hand of the above relation cor-
responds to an adversary that wins by breaking the security of the
underlying SMA and the second term with breaking the q-SBDH.
CLAIM 1. Pr[E1|E2] is negligible in λ.
Proof. Let us assume it is non-negligible in λ. Without loss of
generality, we will assume that the non-existing tuple is of the form
τ∗, i.e., it should fall under some of the ﬁrst m SMA structures,
e.g., SMAi. Since A wins, it follows that the AMR veriﬁcation
succeeds however τ∗ (cid:54)∈ SMAi. We now distinguish between the
chosen SMA instantiation:
• Merkle tree. We will construct adversary A(cid:48) that ﬁnds a col-
lision in the CRHF H used to implement the Merkle tree as
follows. A(cid:48) runs BilGen(1λ) to compute bilinear parameters
pub, chooses s ←R Z∗
p and q ∈ poly(λ) and computes values
gs, . . . , gsq . Finally, he runs A on input (pub, gs, . . . , gsq
).
He then proceeds to provide oracle access for all the AMR
algorithms. For the necessary computations of H (as part of
the Merkle tree construction and veriﬁcation) he queries his
CRHF challenger. After the setup and each update call from
A, database Tη for η = 0, . . . , j is produced and A(cid:48) stores
all triplets (Tη, auth(Tη), δη). When A outputs his chal-
lenge tuple for index j, A(cid:48) parses π∗, checking for each tuple
whether it appears in auth(Tj). If any of them does not ap-
pear in auth(Tj), there must exist triplet τ in the correspond-
ing SMA ∈ auth(Tj) such that τ (cid:54)= τ∗ and H(τ ) = H(τ∗)
(for the challenge sample key of H). This holds since the ver-
iﬁcation process for τ∗ under a Merkle tree in auth(Tj) suc-
ceeds, yet τ∗ is not in the tree. By assumption this will happen
with non-negligible probability, hence A(cid:48) breaks the collision
resistance of H, and the claim follows.
• Accumulation tree. The reduction proceeds in the same man-
ner is in the previous case. The difference is that A(cid:48) is now
playing against an accumulation tree challenger, he receives
as input a public key that coincides perfectly with the AMR
game and he does not need to issue any queries to his chal-
lenger before he sees the challenge tuple by A, since every-
thing can be computed with access to the public key only (this
follows from the properties of the bilinear accumulator used
to build the tree). After A issues his challenge, A(cid:48) constructs
the tree SMAi by issuing consecutive update queries to his
challenger. Finally, he outputs τ∗ and the part of π∗ that cor-
responds to proving (the false statement) that τ∗ ∈ SMAi.
By Lemma 1 this can only happen with negligible probabil-
ity, which contradicts our original assumption, and the claim
follows.
i,l, v∗
Now we prove that the second term of the inequality, namely
Pr[E1|E(cid:48)
2], is negligible, by contradiction. Assume that Pr[E1|E(cid:48)
2]
is non-negligible. Since E2 does not happen, all triplets τ∗ and pairs
(1, δ1), . . . , (m, δm) in π∗ appear in auth(T ).
This immediately implies that the two values v∗
i,l+1 in each
triplet are consecutive along their dimension and each digest matches
its corresponding dimension. By construction, along each dimen-
sion there exist exactly two distinct τ∗, τ(cid:48)∗ for which veriﬁcation of
Q succeeds; one corresponds to the lower bound of the 1-dimensional
range of the query (li) and one for the upper (ui). Furthermore, if
a triplet correctly formed for SMA∗
i of attribute ai, is used as part
of the proof of an SMA∗
j corresponding to aj (cid:54)= ai, then it can be
used to break the SMA security as shown in the proof of Claim 1,
which can only happen with negligible probability.
i,i(cid:48) ∈ π∗
in dimension ai contains the accumulation value of the correctly
computed preﬁx set Pi,i(cid:48) with all but negligible probability. As-
suming this holds, by Lemma 3 and because veriﬁcation succeeds,
∈ π∗ is the accumulation value of the cor-
it follows that π∗
rectly computed set Ri for query Q on T . Therefore, the values
∩, along with sets Ri and cheating answer R∗ (cid:54)= R
W ∗
(where R is the correct result of Q) as output by A, contradict
Lemma 2, breaking the q-SBDH assumption. Therefore, the prob-
ability Pr[E1|E(cid:48)
From the above, it follows that, for all i, i(cid:48), the triplet τ∗
2] must be negligible.
i ∈ π∗
Since Pr[E1|E2] + Pr[E1|E(cid:48)
2] is negligible, Pr[E1] must be negli-
gible as well, contradicting our original assumption that there exists
PPT adversary A that breaks our scheme with non-negligible prob-
ability.
(cid:4)
i , F ∗
Ri
830