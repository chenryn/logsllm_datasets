### 优化后的文本

#### 代码分析
以下是代码片段的优化和解释：

```c
v55[0] = 0;
v28 = recvfrom(dword_C4580, v55, 0x1FFFu, 0, (struct sockaddr *)&v63, (socklen_t *)&v71);  // (1)
// ...

if (v29) {
    if (v28) {
        // ...
        if (acosNvramConfig_match("upnp_turn_on", "1")) {
            ssdp_http_method_check(v55, (int)&v59, (unsigned __int16)(HIWORD(v63) > 8));  // (2)
        }
        // ...
    }
}

signed int ssdp_http_method_check(const char *a1, int a2, int a3) {
    int v40; // [sp+24h] [bp-634h]
    v3 = a1;
    // ...
    wrap_vprintf(3, "%s(%d):\n", "ssdp_http_method_check", 203);
    if (dword_93AE0 == 1) {
        return 0;
    }
    strcpy((char *)&v40, v3);  // (3) 栈溢出
    // ...
}
```

在 `ssdp_http_method_check()` 函数中，`strcpy()` 被用来将 `v3` 指向的数据复制到栈上的局部缓冲区 `v40`。由于缺乏长度校验，当构造一个超长的数据包时，拷贝时会出现缓冲区溢出。

#### 漏洞利用
`upnpd` 程序启用的缓解措施如下：
- **NX**: 启用
- **RELRO**: 未启用
- **Stack Canary**: 未启用
- **PIE**: 未启用（加载基址为 `0x8000`）

由于程序的加载基址为 `0x8000`，`.text` 段地址的最高字节均为 `\x00`，而在调用 `strcpy()` 时存在 `NULL` 字符截断的问题。因此，在进行漏洞利用时需要想办法绕过 `NULL` 字符限制的问题。

**SSD 公开的漏洞细节** 中给出了一种方案：通过 `stack reuse` 的方式来绕过该限制。具体思路是先通过 `socket` 发送第一次数据，往栈上填充相应的 `ROP payload`，同时保证不会造成程序崩溃；再通过 `socket` 发送第二次数据用于覆盖栈上的返回地址，填充的返回地址用来实现 `stack pivot`，即劫持栈指针使其指向第一次发送的 `payload` 处，然后再复用之前的 `payload` 以完成漏洞利用。

实际上，由于 `recvfrom()` 函数与漏洞点 `strcpy()` 之间的路径比较短，栈上的数据不会发生太大变化。利用 `stack reuse` 的思路，只需发送一次数据即可完成利用。在调用 `ssdp_http_method_check()` 前，接收的 `socket` 数据包保存在 `upnp_main()` 函数内的局部缓冲区上，而在 `ssdp_http_method_check()` 内，当调用完 `strcpy()` 后，会复制一部分数据到该函数内的局部缓冲区上。通过覆盖栈上的返回地址，可劫持栈指针，使其指向 `upnp_main()` 函数内的局部缓冲区，复用填充的 `ROP gadgets`，从而完成漏洞利用。

另外，在调用 `strcpy()` 后，在 `(4)` 处还调用了函数 `sub_B60C()`。通过对应的汇编代码可知，在覆盖栈上的返回地址之前，也会覆盖 `R7` 指向的栈空间内容，之后 `R7` 作为参数传递给 `sub_B60C()`。而在 `sub_B60C()` 中，会读取 `R0` 指向的栈空间中的内容，然后再将其作为参数传递给 `strstr()`，这意味着 `[R0]` 中的值必须为一个有效的地址。因此，在覆盖返回地址的同时，还需要用一个有效的地址来填充对应的栈偏移处，保证函数在返回前不会出现崩溃。由于 `libc` 库对应的加载基址比较大，即其最高字节不为 `\x00`，因此任意选取该范围内的一个不包含 `\x00` 的有效地址即可。

在解决了 `NULL` 字符截断的问题之后，剩下的部分就是寻找 `ROP gadgets` 来完成漏洞利用了，相对比较简单。同样，`SSD` 公开的漏洞细节中也包含了完整的漏洞利用代码，其思路是通过调用 `strcpy gadget` 拼接出待执行的命令，并将其写到某个 `bss` 地址处，然后再调用 `system gadget` 执行对应的命令。

在给出的漏洞利用代码中，`strcpy gadget` 执行的过程相对比较繁琐。经过分析后，在 `upnpd` 程序中找到了另一个更优雅的 `strcpy gadget`，如下所示。借助该 `gadget`，可以直接在数据包中发送待执行的命令，而无需进行命令拼接。

```assembly
.text:0000B764 MOV R0, R4  ; dest
.text:0000B768 MOV R1, SP  ; src
.text:0000B76C BL strcpy
.text:0000B770 ADD SP, SP, #0x400
.text:0000B774 LDMFD SP!, {R4-R6,PC}
```

#### 补丁分析
`Netgear` 官方在 `R8300-V1.0.2.134_1.0.99` 版本中修复了该漏洞。函数 `ssdp_http_method_check()` 的相关伪代码如下，可以看到，在补丁中调用的是 `strncpy()` 而非原来的 `strcpy()`，同时还对局部缓冲区 `&v40` 进行了初始化。

```c
signed int ssdp_http_method_check(const char *a1, int a2, int a3) {
    int v40; // [sp+24h] [bp-Ch]
    v3 = a1;
    // ...
    memset(&v40, 0, 0x5DCu);
    v52 = 32;
    sub_B814(3, "%s(%d):\n", "ssdp_http_method_check", 203);
    if (dword_93AE0 == 1) {
        return 0;
    }
    v51 = &v40;
    strncpy((char *)&v40, v3, 0x5DBu);  // 补丁
    // ...
}
```

#### 小结
本文通过搭建 `Netgear R8300` 型号设备的仿真环境，对其 `UPnP` 服务中存在的缓冲区溢出漏洞进行了分析。漏洞本身比较简单，但漏洞利用却存在 `NULL` 字符截断的问题。`SSD` 公开的漏洞细节中通过 `stack reuse` 的方式实现了漏洞利用，思路值得借鉴和学习。

#### 相关链接
- [Security Advisory for Pre-Authentication Command Injection on R8300, PSV-2020-0211](https://kb.netgear.com/000062158/Security-Advisory-for-Pre-Authentication-Command-Injection-on-R8300-PSV-2020-0211)
- [SSD Advisory – Netgear Nighthawk R8300 upnpd PreAuth RCE](https://ssd-disclosure.com/ssd-advisory-netgear-nighthawk-r8300-upnpd-preauth-rce/)
- [Netgear Nighthawk R8300 upnpd PreAuth RCE 分析与复现](https://paper.seebug.org/1311)
- [Firmadyne libnvram](https://github.com/firmadyne/libnvram)