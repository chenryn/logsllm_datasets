The next page shows the compatibility matrix extended with examples of com-
mandsthatrequirethecorrespondinglockingmodes. Thereisnopointinmem-
orizing all these modes or trying to find the logic behind their naming, but it is
1 postgresql.org/docs/14/explicit-locking#LOCKING-TABLES.html
232
12.4 Relation-LevelLocks
definitely useful to look through this data, draw some general conclusions, and
refertothistableasrequired.
AS RS RE SUE S SRE E AE
AccessShare × SELECT
RowShare × × SELECTFORUPDATE/SHARE
RowExclusive × × × × INSERT,UPDATE,DELETE
ShareUpdateExclusive × × × × × VACUUM,CREATEINDEXCONCURRENTLY
Share × × × × × CREATEINDEX
ShareRowExclusive × × × × × × CREATETRIGGER
Exclusive × × × × × × × REFRESHMAT.VIEWCONCURRENTLY
AccessExclusive × × × × × × × × DROP,TRUNCATE,VACUUMFULL,
LOCKTABLE,REFRESHMAT.VIEW
The Access Share mode is the weakest one; it can be used with any other mode
exceptAccess Exclusive,whichisincompatiblewithallthemodes. Thus,a
commandcanberuninparallelwithalmostanyoperation,butitdoesnotletyou
dropatablethatisbeingqueried.
Thefirstfourmodesallowconcurrentheapmodifications,whiletheotherfourdo
not. Forexample,the commandusestheSharemode,whichiscom-
patiblewithitself(soyoucancreateseveralindexesonatableconcurrently)and
withthe modes used byread-only operations. As a result,  commandscan
runinparallelwithindexcreation,while,,andcommandswill
beblocked.
Conversely,unfinishedtransactionsthatmodifyheapdatablockthe
command. Instead,youcancall ,whichusesaweaker
ShareUpdateExclusivemode: ittakeslongertocreateanindex(andthisoperation
canevenfail),butinreturn,concurrentdataupdatesareallowed.
The   command has multiple flavors that use different locking modes
(Share Update Exclusive, Share Row Exclusive, Access Exclusive). All of them are
describedinthedocumentation.1
1 postgresql.org/docs/14/sql-altertable.html
233
Chapter12 Relation-LevelLocks
Examplesinthispartofthebookrelyontheaccountstableagain:
=> TRUNCATE accounts;
=> INSERT INTO accounts(id, client, amount)
VALUES
(1, 'alice', 100.00),
(2, 'bob', 200.00),
(3, 'charlie', 300.00);
Wewillhavetoaccessthepg_lockstablemorethanonce,solet’screateaviewthat
showsallsinasinglecolumn,thusmakingtheoutputmoreconcise:
=> CREATE VIEW locks AS
SELECT pid,
locktype,
CASE locktype
WHEN 'relation' THEN relation::regclass::text
WHEN 'transactionid' THEN transactionid::text
WHEN 'virtualxid' THEN virtualxid
END AS lockid,
mode,
granted
FROM pg_locks
ORDER BY 1, 2, 3;
Thetransactionthatisstillrunninginthefirstsessionupdatesarow. Thisopera-
tionlockstheaccountstableandallitsindexes,whichresultsintwonewlocksof
therelationtypeacquiredintheRowExclusivemode:
=> UPDATE accounts SET amount = amount + 100.00 WHERE id = 1;
=> SELECT locktype, lockid, mode, granted
FROM locks WHERE pid = 29131;
locktype | lockid | mode | granted
−−−−−−−−−−−−−−−+−−−−−−−−−−−−−−−+−−−−−−−−−−−−−−−−−−+−−−−−−−−−
relation | accounts | RowExclusiveLock | t
relation | accounts_pkey | RowExclusiveLock | t
transactionid | 139461 | ExclusiveLock | t
virtualxid | 5/2 | ExclusiveLock | t
(4 rows)
234
12.5 WaitQueue
12.5 Wait Queue
Heavyweightlocksformafairwaitqueue.1 Aprocessjoinsthequeueifitattempts
toacquirealockthatisincompatibleeitherwiththecurrentlockorwiththelocks
requestedbyotherprocessesalreadyinthequeue.
Whilethefirstsessionisworkingonanupdate,let’strytocreateanindexonthis
tableinanothersession:
=> SELECT pg_backend_pid();
pg_backend_pid
−−−−−−−−−−−−−−−−
29610
(1 row)
=> CREATE INDEX ON accounts(client);
Thecommandhangs,waitingfortheresourcetobereleased.Thetransactiontries
tolockthetableintheSharemodebutcannotdoit:
=> SELECT locktype, lockid, mode, granted
FROM locks WHERE pid = 29610;
locktype | lockid | mode | granted
−−−−−−−−−−−−+−−−−−−−−−−+−−−−−−−−−−−−−−−+−−−−−−−−−
relation | accounts | ShareLock | f
virtualxid | 6/3 | ExclusiveLock | t
(2 rows)
Nowletthethirdsessionstartthecommand.Itwillalsojointhequeue
because it requires theAccess Exclusive mode, which conflicts with all the other
modes:
=> SELECT pg_backend_pid();
pg_backend_pid
−−−−−−−−−−−−−−−−
29813
(1 row)
=> VACUUM FULL accounts;
1 backend/storage/lmgr/lock.c,LockAcquirefunction
235
Chapter12 Relation-LevelLocks
=> SELECT locktype, lockid, mode, granted
FROM locks WHERE pid = 29813;
locktype | lockid | mode | granted
−−−−−−−−−−−−−−−+−−−−−−−−−−+−−−−−−−−−−−−−−−−−−−−−+−−−−−−−−−
relation | accounts | AccessExclusiveLock | f
transactionid | 139465 | ExclusiveLock | t
virtualxid | 7/4 | ExclusiveLock | t
(3 rows)
Allthesubsequentcontenderswillnowhavetojointhequeue,regardlessoftheir
locking mode. Even simple  queries will honestly follow  , al-
though they are compatible with the Row Exclusive lock held by the first session
performingtheupdate.
=> SELECT pg_backend_pid();
pg_backend_pid
−−−−−−−−−−−−−−−−
30023
(1 row)
=> SELECT * FROM accounts;
=> SELECT locktype, lockid, mode, granted
FROM locks WHERE pid = 30023;
locktype | lockid | mode | granted
−−−−−−−−−−−−+−−−−−−−−−−+−−−−−−−−−−−−−−−−−+−−−−−−−−−
relation | accounts | AccessShareLock | f
virtualxid | 8/3 | ExclusiveLock | t
(2 rows)
T1
UPDATE
T2 relation
CREATEINDEX
T3
VACUUMFULL
T4
SELECT
236
12.5 WaitQueue
The pg_blocking_pids function gives a high-level overview of all waits. It shows v..
thesofallprocessesqueuedbeforethespecifiedonethatarealreadyholdingor
wouldliketoacquireanincompatiblelock:
=> SELECT pid,
pg_blocking_pids(pid),
wait_event_type,
state,
left(query,50) AS query
FROM pg_stat_activity
WHERE pid IN (29131,29610,29813,30023) \gx
−[ RECORD 1 ]−−−−+−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
pid | 29131
pg_blocking_pids | {}
wait_event_type | Client
state | idle in transaction
query | UPDATE accounts SET amount = amount + 100.00 WHERE
−[ RECORD 2 ]−−−−+−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
pid | 29610
pg_blocking_pids | {29131}
wait_event_type | Lock
state | active
query | CREATE INDEX ON accounts(client);
−[ RECORD 3 ]−−−−+−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
pid | 29813
pg_blocking_pids | {29131,29610}
wait_event_type | Lock
state | active
query | VACUUM FULL accounts;
−[ RECORD 4 ]−−−−+−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
pid | 30023
pg_blocking_pids | {29813}
wait_event_type | Lock
state | active
query | SELECT * FROM accounts;
Togetmoredetails,youcanreviewtheinformationprovidedinthepg_lockstable.1
Oncethetransactioniscompleted(eithercommittedoraborted),allitslocksare
released.2 Thefirstprocessinthequeuegetstherequestedlockandwakesup.
1 wiki.postgresql.org/wiki/Lock_dependency_information
2 backend/storage/lmgr/lock.c,LockReleaseAll&LockReleasefunctions
237
Chapter12 Relation-LevelLocks
Herethetransactioncommitinthefirstsessionleadstosequentialexecutionof
allthequeuedprocesses:
=> ROLLBACK;
ROLLBACK
CREATE INDEX
VACUUM
id | client | amount
−−−−+−−−−−−−−−+−−−−−−−−
1 | alice | 100.00
2 | bob | 200.00
3 | charlie | 300.00
(3 rows)
238
13
Row-Level Locks
13.1 Lock Design
Thanks to snapshot isolation, heap tuples do not have to be locked for reading.
However,twowritetransactionsmustnotbeallowedtomodifyoneandthesame
rowatthesametime.Rowsmustbelockedinthiscase,butheavyweightlocksare
notaverygoodchoiceforthispurpose: eachofthemtakesspaceintheserver’s
sharedmemory(hundredsofbytes,nottomentionallthesupportinginfrastruc-
ture),andPostgreinternalmechanismsarenotdesignedtohandleahugenum-
berofconcurrentheavyweightlocks.
Somedatabasesystemssolvethisproblembylockescalation:ifrow-levellocksare
toomany,theyarereplacedbyasinglelockoffinergranularity(forexample,bya
page-level or table-level lock). It simplifies the implementation,but can greatly
limitsystemthroughput.
InPostgre,theinformationonwhetheraparticularrowislockediskeptonly
intheheaderofitscurrentheaptuple. Row-levellocksarevirtuallyattributesin
heappagesratherthanactuallocks,andtheyarenotreflectedininanyway.
Arow is typically locked when it is being updated or deleted. In both cases,the p.
current version of the row is marked as deleted. The attribute used for this pur-
poseisthecurrenttransaction’sspecifiedinthexmaxfield,anditisthesame
(combinedwithadditionalhintbits)thatindicatesthattherowislocked. Ifa
transaction wants to modify a row but sees an active transaction  in the xmax
fieldofitscurrentversion,ithastowaitforthistransactiontocomplete. Onceit
isover,allthelocksarereleased,andthewaitingtransactioncanproceed.
Thismechanismallowslockingasmanyrowsasrequiredatnoextracost.
239
Chapter13 Row-LevelLocks
Thedownsideofthissolutionisthatotherprocessescannotformaqueue,as
containsnoinformationaboutsuchlocks. Therefore,heavyweightlocksarestill
required: aprocesswaitingforarowtobereleasedrequestsalockontheofthe
transactioncurrentlybusywiththisrow.Oncethetransactioncompletes,therow
becomesavailableagain. Thus,thenumberofheavyweightlocksisproportional
tothenumberofconcurrentprocessesratherthanrowsbeingmodified.
13.2 Row-Level Locking Modes
Row-levellockssupportfourmodes.1 Twoofthemimplementexclusivelocksthat
can be acquired by only one transaction at a time, while the other two provide
sharedlocksthatcanbeheldbyseveraltransactionssimultaneously.
Hereisthecompatibilitymatrixofthesemodes:
NoKey
KeyShare Share Update
Update
KeyShare ×
Share × ×
NoKeyUpdate × × ×
Update × × × ×
Exclusive Modes
The Update mode allows modifying any tuple fields and even deleting the whole
tuple,while the No Key Update mode permits only those changes that do not in-
volve any fields related to unique indexes(in otherwords,foreignkeysmust not
beaffected).
The  command automatically chooses the weakest locking mode possible;
keysusuallyremainunchanged,sorowsaretypicallylockedintheNoKeyUpdate
mode.
1 postgresql.org/docs/14/explicit-locking#LOCKING-ROWS.html
240
13.2 Row-LevelLockingModes
Let’screateafunctionthatusespageinspecttodisplaysometuplemetadatathat
weareinterestedin,namelythexmaxfieldandseveralhintbits:
=> CREATE FUNCTION row_locks(relname text, pageno integer)
RETURNS TABLE(
ctid tid, xmax text,
lock_only text, is_multi text,
keys_upd text, keyshr text,
shr text
)
AS $$
SELECT (pageno,lp)::text::tid,
t_xmax,
CASE WHEN t_infomask & 128 = 128 THEN 't' END,
CASE WHEN t_infomask & 4096 = 4096 THEN 't' END,
CASE WHEN t_infomask2 & 8192 = 8192 THEN 't' END,
CASE WHEN t_infomask & 16 = 16 THEN 't' END,
CASE WHEN t_infomask & 16+64 = 16+64 THEN 't' END
FROM heap_page_items(get_raw_page(relname,pageno))
ORDER BY lp;
$$ LANGUAGE sql;
Now start a transaction on the accounts table to update the balance of the first
account(thekeyremainsthesame)andtheofthesecondaccount(thekeygets
updated):
=> BEGIN;
=> UPDATE accounts SET amount = amount + 100.00 WHERE id = 1;
=> UPDATE accounts SET id = 20 WHERE id = 2;
Thepagenowcontainsthefollowingmetadata:
=> SELECT * FROM row_locks('accounts',0) LIMIT 2;
ctid | xmax | lock_only | is_multi | keys_upd | keyshr | shr
−−−−−−−+−−−−−−−−+−−−−−−−−−−−+−−−−−−−−−−+−−−−−−−−−−+−−−−−−−−+−−−−−
(0,1) | 139470 | | | | |
(0,2) | 139470 | | | t | |
(2 rows)
Thelockingmodeisdefinedbythekeys_updatedhintbit.
=> ROLLBACK;
241
Chapter13 Row-LevelLocks
The   command uses the same xmax field as a locking attribute, but in
thiscasethexmax_lock_onlyhintbitmustalsobeset. Thisbitindicatesthatthe
tupleislockedbutnotdeleted,whichmeansthatitisstillcurrent:
=> BEGIN;
=> SELECT * FROM accounts WHERE id = 1 FOR NO KEY UPDATE;
=> SELECT * FROM accounts WHERE id = 2 FOR UPDATE;
=> SELECT * FROM row_locks('accounts',0) LIMIT 2;
ctid | xmax | lock_only | is_multi | keys_upd | keyshr | shr
−−−−−−−+−−−−−−−−+−−−−−−−−−−−+−−−−−−−−−−+−−−−−−−−−−+−−−−−−−−+−−−−−
(0,1) | 139471 | t | | | |