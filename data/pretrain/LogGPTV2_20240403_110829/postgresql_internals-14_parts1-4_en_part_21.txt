0/3EFC3280, prev 0/3EFC3208, desc: CHECKPOINT_SHUTDOWN redo
0/3EFC3280; tli 1; prev tli 1; fpw true; xid 0:889; oid 24754; multi
1; offset 0; oldest xid 726 in DB 1; oldest multi 1 in DB 1;
oldest/newest commit timestamp xid: 0/0; oldest running xid 0;
shutdown
pg_waldump: fatal: error in WAL record at 0/3EFC3280: invalid record
length at 0/3EFC32F8: wanted 24, got 0
Thelatestpg_waldumpmessageshowsthattheutilityhasreadthetotheend.
Let’sstarttheinstanceagain:
postgres$ pg_ctl start -l /home/postgres/logfile
10.5 Background Writing
Ifthebackendneedstoevictadirtypagefromabuffer,ithastowritethispageto
disk. Suchasituationisundesiredbecauseitleadstowaits—itismuchbetterto
performwritingasynchronouslyinthebackground.
Thisjobispartiallyhandledbycheckpointer,butitisstillnotenough.
202
10.6 WALSetup
Therefore, Postgre provides another process called bgwriter,1 specifically for
backgroundwriting.Itreliesonthesamebuffersearchalgorithmaseviction,except
forthetwomaindifferences:
• The bgwriter process uses its own clock hand that never lags behind that of
evictionandtypicallyovertakesit.
• Asthebuffersarebeingtraversed,theusagecountisnotreduced.
Adirtypageisflushedtodiskifthebufferisnotpinnedandhaszerousagecount.
Thus,bgwriterrunsbeforeevictionandproactivelywritestodiskthosepagesthat
arehighlylikelytobeevictedsoon.
Itraisestheoddsofthebuffersselectedforevictionbeingclean.
10.6 WAL Setup
Configuring Checkpoints
Thecheckpointduration(tobemoreexact,thedurationofwritingdirtybuffersto
disk)isdefinedbythecheckpoint_completion_target parameter. Itsvaluespecifies 0.9
thefractionoftimebetweenthestartsoftwoneighboringcheckpointsthatisallot- v.
tedtowriting.Avoidsettingthisparametertoone:asaresult,thenextcheckpoint
maybeduebeforethepreviousoneiscomplete. Nodisasterwillhappen,asitis
impossibletoexecutemorethanonecheckpointatatime,butnormaloperation
maystillbedisrupted.
Whenconfiguringotherparameters,wecanusethefollowingapproach. First,we
define an appropriate volume of  files to be stored between two neighboring
checkpoints. Thebiggerthevolume,thesmallertheoverhead,butthisvaluewill
anywaybelimitedbytheavailablefreespaceandtheacceptablerecoverytime.
Toestimatethetimerequiredtogeneratethisvolumebynormalload,youneedto
notetheinitialinsertandcheckthedifferencebetweenthisandthecurrent
insertpositionsfromtimetotime.
1 backend/postmaster/bgwriter.c
203
Chapter10 Write-AheadLog
Thereceivedfigureisassumedtobeatypicalintervalbetweencheckpoints,sowe
5min willuseitasthecheckpoint_timeout parametervalue. Thedefaultsettingislikely
p. tobetoosmall;itisusuallyincreased,forexample,tominutes.
However,it is quite possible (and even probable) that the load will sometimes be
higher,so the size of  files generated during this interval will be too big. In
thiscase,thecheckpointmustbeexecutedmoreoften.Tosetupsuchatrigger,we
1GB willlimitthesizeoffilesrequiredforrecoverybythemax_wal_sizeparameter.
Whenthisthresholdisexceeded,theserverinvokesanextracheckpoint.1
v. Wfilesrequiredforrecoverycontainalltheentriesbothforthelatestcompleted
checkpointandforthecurrentone,whichisnotcompletedyet.Sotoestimatetheir
totalvolumeyoushouldmultiplythecalculatedsizebetweencheckpointsby
1+checkpoint_completion_target.
Priortoversion,Postgrekeptfilesfortwocompletedcheckpoints,sothemul-
tiplierwas2+checkpoint_completion_target.
Followingthisapproach,mostcheckpointsareexecutedonschedule,onceperthe
checkpoint_timeout interval; but should the load increase, the checkpoint is trig-
geredwhensizeexceedsthemax_wal_sizevalue.
Theactualprogressisperiodicallycheckedagainsttheexpectedfigures:2
Theactualprogress is defined by the fraction of cached pages that have already
beenprocessed.
Theexpectedprogress(bytime) is defined by the fraction of time that has al-
ready elapsed, assuming that the checkpoint must be completed within the
checkpoint_timeout×checkpoint_completion_targetinterval.
Theexpectedprogress(bysize) isdefinedbythefractionofthealreadyfilled
files, their expected number being estimated based on the max_wal_size ×
checkpoint_completion_targetvalue.
If dirty pages get written to disk ahead of schedule, checkpointer is paused for a
while; if there is any delay by either of the parameters, it catches up as soon as
1 backend/access/transam/xlog.c,LogCheckpointNeeded&CalculateCheckpointSegmentsfunctions
2 backend/postmaster/checkpointer.c,IsCheckpointOnSchedulefunction
204
10.6 WALSetup
possible.1 Since both time and data size are taken into account,Postgre can
managescheduledandon-demandcheckpointsusingthesameapproach.
Oncethecheckpointhasbeencompleted,filesthatarenotrequiredforrecov-
ery anymore are deleted;2 however,several files (up to min_wal_size in total) are 80MB
keptforreuseandaresimplyrenamed.
Suchrenaming reducestheoverheadincurredbyconstantfilecreationanddele- v.
tion,butyoucanturnoffthisfeatureusingthewal_recycleparameterifyoudonot on
needit.
Thefollowingfigureshowshowthesizeoffilesstoredondiskchangesunder
normalconditions.
WALsize
ezis_law_xam
time
checkpoint_timeout thesizeofWALgeneratedbetween
thestartsoftwocheckpoints
Itisimportanttokeepinmindthattheactualsizeoffilesondiskmayexceed
themax_wal_sizevalue:
• The max_wal_size parameter specifies the desired target value rather than a
hardlimit.Iftheloadspikes,writingmaylagbehindtheschedule.
• Theserverhasnorighttodeletefilesthatareyettobereplicatedorhan-
dledbycontinuousarchiving.Ifenabled,thisfunctionalitymustbeconstantly
monitored,asitcaneasilycauseadiskoverflow.
1 backend/postmaster/checkpointer.c,CheckpointWriteDelayfunction
2 backend/access/transam/xlog.c,RemoveOldXlogFilesfunction
205
Chapter10 Write-AheadLog
v. • You can reserve a certain amount of space for  files by configuring the
0MB wal_keep_sizeparameter.
Configuring BackgroundWriting
Oncecheckpointerisconfigured,youshouldalsosetupbgwriter. Together,these
processesmustbeabletocopewithwritingdirtybufferstodiskbeforebackends
needtoreusethem.
200ms During its operation,bgwriter makes periodic pauses,sleeping for bgwriter_delay
unitsoftime.
Thenumberofpageswrittenbetweentwopausesdependsontheaveragenumber
ofbuffersaccessedbybackendssincethepreviousrun(Postgreusesamoving
average to level out possible spikes and avoid depending on very old data at the
2 same time). The calculated number is then multiplied by bgwriter_lru_multiplier.
But in any case, the number of pages written in a single run cannot exceed the
100 bgwriter_lru_maxpagesvalue.
Ifnodirtybuffersaredetected(thatis,nothinghappensinthesystem),bgwriter
sleepsuntiloneofthebackendsaccessesabuffer.Thenitwakesupandcontinues
itsregularoperation.
Monitoring
Checkpointsettingscanandshouldbetunedbasedonmonitoringdata.
Ifsize-triggeredcheckpointshavetobeperformedmoreoftenthandefinedbythe
30s checkpoint_warning parameter,Postgre issues a warning. This setting should
bebroughtinlinewiththeexpectedpeakload.
off The log_checkpoints parameter enables printing checkpoint-related information
intotheserverlog.Let’sturniton:
=> ALTER SYSTEM SET log_checkpoints = on;
=> SELECT pg_reload_conf();
Nowwewillmodifysomedataandexecuteacheckpoint:
206
10.6 WALSetup
=> UPDATE big SET s = 'BAR';
=> CHECKPOINT;
The server log shows the number of written buffers, some statistics on  file
changesafterthecheckpoint,thedurationofthecheckpoint,andthedistance(in
bytes)betweenthestartsoftwoneighboringcheckpoints:
postgres$ tail -n 2 /home/postgres/logfile
LOG: checkpoint starting: immediate force wait
LOG: checkpoint complete: wrote 4100 buffers (25.0%); 0 WAL file(s)
added, 1 removed, 0 recycled; write=0.052 s, sync=0.004 s,
total=0.068 s; sync files=3, longest=0.002 s, average=0.002 s;
distance=9213 kB, estimate=9213 kB
The most useful data that can affect your configuration decisions is statistics on
background writing and checkpoint execution provided in the pg_stat_bgwriter
view.
Priortoversion9.2,bothtaskswereperformedbybgwriter;thenaseparatecheckpointer
processwasintroduced,butthecommonviewremainedunchanged.
=> SELECT * FROM pg_stat_bgwriter \gx
−[ RECORD 1 ]−−−−−−−−−+−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
checkpoints_timed | 0
checkpoints_req | 14
checkpoint_write_time | 34539
checkpoint_sync_time | 184
buffers_checkpoint | 14518
buffers_clean | 14237
maxwritten_clean | 133
buffers_backend | 85267
buffers_backend_fsync | 0
buffers_alloc | 85324
stats_reset | 2022−11−25 22:57:04.320736+03
Amongotherthings,thisviewdisplaysthenumberofcompletedcheckpoints:
• Thecheckpoints_timedfieldshowsscheduledcheckpoints(whicharetriggered
whenthecheckpoint_timeoutintervalisreached).
• Thecheckpoints_reqfieldshowson-demandcheckpoints(includingthosetrig-
geredwhenthemax_wal_sizesizeisreached).
207
Chapter10 Write-AheadLog
A large checkpoint_req value (as compared to checkpoints_timed) indicates that
checkpointsareperformedmoreoftenthanexpected.
Thefollowingstatisticsonthenumberofwrittenpagesarealsoveryimportant:
• buffers_checkpointpageswrittenbycheckpointer
• buffers_backendpageswrittenbybackends
• buffers_cleanpageswrittenbybgwriter
Inawell-configuredsystem,thebuffers_backendvaluemustbeconsiderablylower
thanthesumofbuffers_checkpointandbuffers_clean.
Whensettingupbackgroundwriting,payattentiontothemaxwritten_cleanvalue:
itshowshowmanytimesbgwriterhadtostopbecauseofexceedingthethreshold
definedbybgwriter_lru_maxpages.
Thefollowingcallwilldropthecollectedstatistics:
=> SELECT pg_stat_reset_shared('bgwriter');
208
11
WAL Modes
11.1 Performance
Whiletheserverisrunningnormally,filesarebeingconstantlywrittentodisk.
However,these writes are sequential: there is almost no random access,so even
scancopewiththistask.Sincethistypeofloadisverydifferentfromatypical
data file access, it may be worth setting up a separate physical storage for 
filesandreplacingthe/pg_walcatalogbyasymboliclinktoadirectoryina
mountedfilesystem.
There are a couple of situations when  files have to be both written and read. The
firstoneistheobviouscaseofcrashrecovery;thesecondoneisstreamreplication. The
walsender1processreadsentriesdirectlyfromfiles.2 Soifareplicadoesnotreceive
entrieswhiletherequiredpagesarestillinthebuffersoftheprimaryserver,the
datahastobereadfromdisk.Buttheaccesswillstillbesequentialratherthanrandom.
entriescanbewritteninoneofthefollowingmodes:
• Thesynchronousmodeforbidsanyfurtheroperationsuntilatransactioncom-
mitsavesalltherelatedentriestodisk.
• The asynchronous mode implies instant transaction commits, with  en-
triesbeingwrittentodisklaterinthebackground.
Thecurrentmodeisdefinedbythesynchronous_commitparameter. on
1 backend/replication/walsender.c
2 backend/access/transam/xlogreader.c
209
Chapter11 WALModes
Synchronousmode. To reliably register the fact of a commit, it is not enough to
simplypassentriestotheoperatingsystem;youhavetomakesurethat
disk synchronization has completed successfully. Since synchronization im-
pliesactual/operations(whicharequiteslow),itisbeneficialtoperformit
asseldomaspossible.
Forthispurpose,thebackendthatcompletesthetransactionandwrites
0s entriestodiskcanmakeasmallpauseasdefinedbythecommit_delayparam-
5 eter. However,itwillonlyhappenifthereareatleastcommit_siblingsactive
transactionsinthesystem:1 duringthispause,someofthemmayfinish,and
theserverwillmanagetosynchronizealltheentriesinonego.Itisalot
likeholdingdoorsofanelevatorforsomeonetorushin.
Bydefault,thereisnopause. Itmakessensetomodifythecommit_delay pa-
rameteronlyforsystemsthatperformalotofshorttransactions.
After a potential pause, the process that completes the transaction flushes
all the accumulated  entries to disk and performs synchronization (it is
importanttosavethecommitentryandallthepreviousentriesrelatedtothis
transaction;therestiswrittenjustbecauseitdoesnotincreasethecost).
Fromthistimeon,the’sdurabilityrequirementisguaranteed—thetrans-
actionisconsideredtobereliablycommitted.2 That’swhythesynchronous
modeisthedefaultone.
Thedownsideofthesynchronouscommitislongerlatencies(thecom-
manddoesnotreturncontroluntiltheendofsynchronization)andlowersys-
temthroughput,especiallyforloads.
Asynchronousmode. To enable asynchronous commits,3 you have to turn off the
synchronous_commitparameter.
Intheasynchronousmode, entriesarewrittentodiskbythewalwriter4
process,whichalternatesbetweenworkandsleep. Thedurationofpausesis
200ms definedbythewal_writer_delayvalue.
1 backend/access/transam/xlog.c,XLogFlushfunction
2 backend/access/transam/xlog.c,RecordTransactionCommitfunction
3 postgresql.org/docs/14/wal-async-commit.html
4 backend/postmaster/walwriter.c
210
11.1 Performance
Wakingupfromapause,theprocesschecksthecachefornewcompletelyfilled
pages. Ifanysuchpageshaveappeared,theprocesswritesthemtodisk,
skipping the current page. Otherwise,it writes the current half-empty page
sinceithaswokenupanyway.1
The purpose of this algorithm is to avoid flushing one and the same page
severaltimes,whichbringsnoticeableperformancegainsforworkloadswith
intensivedatachanges.
Althoughcacheisusedasaringbuffer,walwriterstopswhenitreaches
thelastpageofthecache;afterapause,thenextwritingcyclestartsfromthe
firstpage.Sointheworstcasewalwriterneedsthreerunstogettoaparticular
entry: first,itwillwriteallfullpageslocatedattheendofthecache,then
itwillgetbacktothebeginning,andfinally,itwillhandletheunderfilledpage
containingtheentry.Butinmostcasesittakesoneortwocycles.
Synchronizationisperformedeachtimethewal_writer_flush_after amountof 1MB
dataiswritten,andonceagainattheendofthewritingcycle.
Asynchronous commits are faster than synchronous ones since they do not
have to wait for physical writes to disk. But reliability suffers: you can lose
thedatacommittedwithinthe3×wal_writer_delaytimeframebeforeafailure
(whichis0.6secondsbydefault).
In the real world,these two modes complement each other. In the synchronous
mode,entriesrelatedtoalongtransactioncanstillbewrittenasynchronously
tofreebuffers. Andviceversa,aentryrelatedtoapagethatisaboutto
be evicted from the buffer cache will be immediately flushed to disk even in the
asynchronousmode—otherwise,itisimpossibletocontinueoperation.
Inmostcases,ahardchoicebetweenperformanceanddurabilityhastobemade
bythesystemdesigner.
Thesynchronous_commitparametercanalsobesetforparticulartransactions.Ifit
ispossibletoclassifyalltransactionsattheapplicationlevelaseitherabsolutely
critical (such as handling financial data) or less important,you can boost perfor-
mancewhileriskingtoloseonlynon-criticaltransactions.
1 backend/access/transam/xlog.c,XLogBackgroundFlushfunction
211
Chapter11 WALModes
Togetsomeideaofpotentialperformancegainsoftheasynchronouscommit,let’s
comparelatencyandthroughputinthetwomodesusingapgbenchtest.1
First,initializetherequiredtables:
postgres$ /usr/local/pgsql/bin/pgbench -i internals
Starta-secondtestinthesynchronousmode:
postgres$ /usr/local/pgsql/bin/pgbench -T 30 internals
pgbench (14.4)
starting vacuum...end.
transaction type: 
scaling factor: 1
query mode: simple
number of clients: 1
number of threads: 1
duration: 30 s
number of transactions actually processed: 23171
latency average = 1.295 ms
initial connection time = 1.956 ms
tps = 772.385024 (without initial connection time)
Andnowrunthesametestintheasynchronousmode:
=> ALTER SYSTEM SET synchronous_commit = off;
=> SELECT pg_reload_conf();
postgres$ /usr/local/pgsql/bin/pgbench -T 30 internals
pgbench (14.4)
starting vacuum...end.
transaction type: 