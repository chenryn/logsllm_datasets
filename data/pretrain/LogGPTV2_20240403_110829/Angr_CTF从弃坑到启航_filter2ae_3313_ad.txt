            if state.addr == strncpy_address:
                return check_strncpy(state)
            else:
                return False
        simulation.explore(find=is_successful)
        if simulation.found:
            solution_state = simulation.found[0]
            scanf0, scanf1 = solution_state.globals['solutions']
            solution0 = (solution_state.solver.eval(scanf0))
            solution1 = (solution_state.solver.eval(scanf1,cast_to=bytes))
            print("[+] Success! Solution is: {0} {1}".format(solution0, solution1))
        else:
            raise Exception('Could not find the solution')
    if __name__ == '__main__':
        Go()
运行一下查看结果：
接下来我们来分析一下脚本：
一开始的脚本和上一题都没有什么太大的区别，也是在hook我们的scanf函数然后做条件约束为可见字符之类的
    def Go():
        path_to_binary = "./16_angr_arbitrary_write"
        project = angr.Project(path_to_binary)
        initial_state = project.factory.entry_state()
        class ReplacementScanf(angr.SimProcedure):
            def run(self, format_string, param0, param1):
                scanf0 = claripy.BVS('scanf0', 32)
                scanf1 = claripy.BVS('scanf1', 20*8)
                for char in scanf1.chop(bits=8):
                    self.state.add_constraints(char >= 48, char  /----------------\
    esp + 6 -> |      puts      |
    esp + 5 -> |    parameter   |
    esp + 4 -> \----------------/
    esp + 3 -> /----------------\
    esp + 2 -> |     return     |
    esp + 1 -> |     address    |
        esp -> \----------------/
我们利用memory的load方法把参数内容提取出来
    def check_strncpy(state):
        strncpy_src = state.memory.load(state.regs.esp + 8, 4, endness=project.arch.memory_endness)
        strncpy_dest = state.memory.load(state.regs.esp + 4, 4, endness=project.arch.memory_endness)
        strncpy_len = state.memory.load(state.regs.esp + 12, 4, endness=project.arch.memory_endness)
这里需要注意的是我们在检查src参数是否正确的时候需要的是里面的字符串内容，然而我们第一次获取的是`src`字符串的地址，我们还需要再调用一次load方法把src真正的内容提取出来
    src_contents = state.memory.load(strncpy_src, strncpy_len)
然后就是正常的参数验证环节，首先验证src字符串是否为我们想要的字符串，因为机器是小端序，所以我们需要`[-1:-64]`这样来比较
    if state.solver.symbolic(src_contents) and state.solver.symbolic(strncpy_dest):
                password_string = 'DVTBOGZL' 
                buffer_address = 0x4655544c 
                does_src_hold_password = src_contents[-1:-64] == password_string
                does_dest_equal_buffer_address = strncpy_dest == buffer_address
当`src`字符串的确为我们需要的时候，接下来判定`dest`是否为`password_buffe`的地址
    if state.satisfiable(extra_constraints=(does_src_hold_password, does_dest_equal_buffer_address)):
        state.add_constraints(does_src_hold_password, does_dest_equal_buffer_address)
        return True
    else:
        return False
接下来都是比较常规的套路了，不再赘述
## 17_angr_arbitrary_jump
如题目所示，这题主要是学会任意地址跳转，即利用Angr处理无约束状态，老样子先检查一下文件：
    syc@ubuntu:~/Desktop/TEMP$ checksec 17_angr_arbitrary_jump
    [*] '/home/syc/Desktop/TEMP/17_angr_arbitrary_jump'
        Arch:     i386-32-little
        RELRO:    Partial RELRO
        Stack:    No canary found
        NX:       NX enabled
        PIE:      No PIE (0x8048000)
然后用IDA打开检查一下函数
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      print_msg();
      printf("Enter the password: ");
      read_input();
      puts("Try again.");
      return 0;
    }
    int print_msg()
    {
      return printf("%s", msg);
    }
    int read_input()
    {
      char v1; // [esp+1Ah] [ebp-1Eh]
      return __isoc99_scanf("%s", &v1);
    }
然后我们还可以发现存在一个没有被调用到的函数`print_good`
    void __noreturn print_good()
    {
      puts("Good Job.");
      exit(0);
    }
我们不难发现这题里面的read_input()函数里的scanf存在栈溢出漏洞，简单来说这题就是非常简单的ROP使得我们跳转到print_good函数
话不多说先上EXP：
    import angr
    import claripy
    import sys
    def Go():
        path_to_binary = "./17_angr_arbitrary_jump" 
        project = angr.Project(path_to_binary)
        initial_state = project.factory.entry_state() 
        class ReplacementScanf(angr.SimProcedure):
            def run(self, format_string, input_buffer_address):
                input_buffer = claripy.BVS(
                    'input_buffer', 64 * 8)  
                for char in input_buffer.chop(bits=8):
                    self.state.add_constraints(char >= '0', char = '0', char  Tips：出现一些奇怪的问题，建议参考一下官方关于Angr在改用Python3之后的一些API变化：
>
> Migrating to angr 8 ——
> 
## 参考文献
【1】angr官方文档—— 
【2】angr 系列教程(一）核心概念及模块解读—— 
【3】Enhancing Symbolic Execution with Veritesting —— Carnegie Mellon University
【4】angr 文档翻译(1-2):加载一个二进制文件——CLE和angr工程 ——