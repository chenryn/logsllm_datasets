可以使用这个现有的网站或配置一个新的。图45-11使用ProCSharpPool应用程序池配置一
个新的网站，它在物理路径c:\inetpub\ProCSharpWebRoot内定义，监听端口8080。对于多
个网站，需要使用不同的端口号，在系统上配置多个IP地址，不同的网站可以通过不同的
地址或使用不同的主机名来访问。对于不同的主机名，客户端需要发送在HTTP标题中请
求的主机名。这样，IIS可以决定请求应该转发到哪些网站。
图45-11
之后可以在Site Binding对话框（参见图45-12）中单击Edit按钮，修改对IP地址、端口
号和主机名的绑定。还可以定义net.tcp或net.http等其他协议，用于托管Windows
Communication Foundation （WCF）应用程序。为了使用它，需要安装可选的Windows功
能：使用Turn Windows Features On or Off管理工具中的.NET Framework 4.6 Advanced
Services，就可以使用WCF服务。
图45-12
  注意： WCF参见第44章。
3．创建应用程序
接下来，可以创建一个应用程序。在图45-13中，在网站ProCSharpSite中创建了应用
程序ProCSharpApp，该站点运行在ProCSharpPool应用程序池内。
图45-13
可用于IIS 
Manager的配置用ASP.NET、IIS和Management分类设置分组（参见图45-
14）。这里可以配置Application Settings、Connection Strings、Session State等。这个配置
给XML配置文件Web.config提供了一个图形用户界面。
图45-14
45.3.2 Web部署到IIS
在IIS Manager中准备应用程序时，可以直接在Visual Studio中把Web应用程序部署到
IIS。在此之前，在服务器（localdb）\MSSQLLocalDB上用IIS创建一个新的空数据库
ProCSharpWebDeploy1。可以从Visual Studio内部的SQL Server Object Explorer中完成这个
操作。选择SQL Server、Databases和Add New Database。
在Web.Staging.config配置文件中，添加对新SQL Server数据库实例的连接字符串，添
加如下所示的转换，更改Web.config定义的连接字符串（代码文件
WebDotnetFramework/Web.Staging.config）：
直接部署数据库时，可以通过Project Properties配置Package/Publish SQL（参见图45-
15）。在这里可以从Web.config文件中导入连接字符串。还可以添加自定义的SQL脚本，
仅部署数据库模式或者也复制数据。
图45-15
为了直接部署到本地IIS, 
Visual 
Studio需要在提升模式（以管理员身份运行）下启
动。
打开前面创建的项目WebDotnetFramework后，在Solution Explorer中选择项目，打开
应用程序上下文菜单Publish。在打开的Publish Web对话框（参见图45-16）中，需要选择
Custom作为发布目标。把概要文件命名为PublishToIIS，因为这是接下来的工作。
图45-16
对于Connection配置，在Publish Method下拉菜单中选择Web Deploy。定义服务器、
网站名称和目标URL，发布到本地IIS（参见图45-17）。
图45-17
在Settings选项卡（参见图45-18）中，配置文件发布选项。这里可以选择配置，以选
择相应的网络配置文件。可以在发布期间预编译源文件。这样就不需要交付C#源文件和
包。同样，可以从App_Data文件夹中去除文件。这个文件夹可以用于文件上传和本地数
据库。如果在这个文件夹中只有测试数据，那么可以安全地从包中排除这个文件夹。另
外，可以用Package/Publish SQL配置选择数据库连接字符串。
图45-18
发布成功时，在IIS中会发现复制到之前配置的应用程序中的文件，而浏览器显示主
页。
45.4 部署到Microsoft Azure
部署到Microsoft 
Azure时，需要考虑部署数据存储。在Microsoft 
Azure中，SQL
Database是部署关系数据的一个很好的选项。使用SQL 
Database，会有基于Database
Transaction Unit（DTU）和数据库大小（从5 DTU和2GB的数据到至多1750 DTU和1 TB的
数据）的不同选项。DTU是一个基于数据库事务的计量单位。Microsoft测量在全负荷下每
秒可以完成多少事务，因此5 DTU表示每秒完成5个事务。
创建数据库后，就按照WebCoreFramework示例应用程序的定义创建表。然后，用
Microsoft Azure创建一个Web应用程序来托管示例应用程序。
45.4.1 创建SQL数据库
在SQL Database部分登录http://portal.azure.com，可以创建一个新的SQL数据库。创建
数据库时，可以选择定价层。第一个测试使用SQL数据库，选择最便宜的版本Basic。为
了运行Web应用程序，不需要任何额外的功能。之后可以根据需要改变它。本书的数据库
名为ProfessionalCSharpDB。读者需要使用另一个名称，因为这个名称是独一无二的。
为了在Visual Studio中直接访问数据库，需要更改SQL服务器的防火墙设置，并允许
本地IP地址访问服务器。本地IP地址在防火墙设置中显示。
45.4.2 用SQL Azure测试本地网站
把网站部署到Microsoft 
Azure之前，可以尝试改变数据库连接字符串以在Microsoft
Azure上使用SQL数据库并在本地测试网站。
首先，需要得到Azure Database的连接字符串。选择SQL Database，在Azure Portal中
找到连接字符串。连接字符串可以在Essentials配置中访问。
在Visual 
Studio中，打开WebCoreFramework项目，添加一个新的JSON文件
appsettings. staging.json。将连接字符串添加给运行在Microsoft Azure上的SQL数据库。注
意从门户复制连接字符串，添加只有一个占位符的密码（代码文件
WebDotnetCore/appsettings.json.config）：
    {
      "Data": {
        "DefaultConnection": {
        "ConnectionString": "add your database connection string"
        }
      }
    }
Host:Environment环境变量设置为Staging时，加载这个文件（代码文件
WebDotnetCore/Startup.cs）：
    var builder = new ConfigurationBuilder()
     .AddJsonFile("appsettings.json")
     .AddJsonFile($"appsettings.{env.EnvironmentName}.json", optional: true);
记住，在Project | Debug属性中，可以将这一设置配置为当在Visual Studio中运行应用
程序时使用（参见图45-6）。
要将表添加到SQL数据库中，可以使用Entity 
Framework迁移。使用
ApplicationDbContext给Entity Framework模型配置迁移。
在本地运行应用程序时，创建数据库表，因为Migrations文件夹包含所需表和模式的
信息，以及Startup代码中Database.Migrate的调用（代码文件
WebCoreFramework/Startup.cs）：
    try
    {
      using (var serviceScope = app.ApplicationServices
        .GetRequiredService().CreateScope())
      {
        serviceScope.ServiceProvider
        .GetService()
        .Database.Migrate();
      }
    }
    catch { }
为了手动处理迁移和创建最初的表，可以启动开发人员命令提示符，将当前目录改为
存储项目的project.json文件的目录，并设置环境变量，为连接字符串使用正确的配置文
件：
    >set Hosting:Environment-staging
也可以使用如下命令启动Web服务器：
    >dotnet run
用database命令启动迁移：
    >dotnet ef database update
现在，网站在本地通过SQL数据库运行在云中。该把网站移到Microsoft Azure上了。
45.4.3 部署到Microsoft Azure Web应用
使用Azure Portal，可以创建一个能托管网站的Azure Web应用。在Visual Studio的
Solution Explorer中，可以选择Publish Web上下文菜单。Microsoft Azure App Service是一
个可用的选项。使用这个选项，可以将网站部署到Microsoft Azure。
选择Microsoft Azure App Service后，可以登录到Microsoft Azure，选择一个Web应
用。还可以直接从这个对话框中创建新的Web应用。
部署完成后，就可以在云中使用该网站。
45.5 部署到Docker
另一个发布选项是Docker。Docker为部署提供了一个新概念。在安装Web应用程序之
前，不是安装所有的需求和在目标系统上准备正确的配置，而是可以提供一个完整的
Docker映像，其中包含所需的所有内容。
使用虚拟机映像并在Hyper-V服务器上加载它不能完成同样的操作吗？虚拟机映像的
问题是它们太大，包含了完整的操作系统和所有需要的工具。当然，可以使用虚拟机映像
与Microsoft Azure。准备一个映像，在安装Web服务器基础设施后安装Web应用程序。
这非常不同于Docker。Docker使用洋葱式的系统建立。一层建立在另一层的上面。每
一层只包含不同于其他层的内容。可以使用一个已经准备好的系统，其中包括操作系统的
需求，再给Web服务器添加另一层，然后为要部署的网站添加一个或多个层。这些映像很
小，因为只记录了更改。
如果添加了Visual Studio Extension Tools for Docker，就可以看到Publish菜单的另一个
选项：部署Docker映像。此部署可用于Windows Server 2016以及不同的Linux变体。只需
要选择喜欢的映像，部署网站。当然，在Linux上运行时，只有.NET Core是可用的。
45.6 小结
Web应用程序的部署在过去几年发生了巨大的变化。创建安装程序包现在很少使用。
相反，可以在Visual Studio中直接发布。
本章学习了如何发布到可以本地托管的IIS（一个自定义托管的IIS）上，以及如何发
布到Microsoft Azure的服务器上。使用Microsoft Azure，可以避免很多管理基础设施的工
作。
本章还介绍了Docker，这个部署选项允许创建准备好的小映像，其中包括运行准备好
的应用程序所需的一切内容。