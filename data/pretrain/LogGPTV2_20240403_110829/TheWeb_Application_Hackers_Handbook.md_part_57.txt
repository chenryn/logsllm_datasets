tion to this effect could have prevented the logic fl aw within the online
registration functionality. (Note that “client” here refers not to the user
end of the client/server relationship but to other code for which the
component being considered is an immediate dependency.)
n During security-focused reviews of the application design, refl ect on every
assumption made within the design, and try to imagine circumstances
under which each assumption might be violated. Focus on any assumed
conditions that could conceivably be within the control of application users.
n During security-focused code reviews, think laterally about two key areas:
the ways in which the application will handle unexpected user behavior,
and the potential side effects of any dependencies and interoperation
between different code components and different application functions.
In relation to the specifi c examples of logic fl aws we have described, a number
of individual lessons can be learned:
n Be constantly aware that users control every aspect of every request (see
Chapter 1). They may access multistage functions in any sequence. They
may submit parameters that the application did not ask for. They may
omit certain parameters, not just interfere with the parameters’ values.
n Drive all decisions regarding a user’s identity and status from her session (see
Chapter 8). Do not make any assumptions about the user’s privileges on the
basis of any other feature of the request, including the fact that it occurs at all.
cc1111..iinndddd 442288 88//1199//22001111 1122::1111::4466 PPMM
28 Stuttard c11.indd V2 - 07/26/2011 Page 429
Chapter 11 n Attacking Application Logic 429
n When implementing functions that update session data on the basis of
input received from the user, or actions performed by the user, carefully
consider any impact that the updated data may have on other functionality
within the application. Be aware that unexpected side effects may occur
in entirely unrelated functionality written by a different programmer or
even a different development team.
n If a search function is liable to index sensitive data that some users are
not authorized to access, ensure that the function does not provide any
means for those users to infer information based on search results. If
appropriate, maintain several search indexes based on different levels of
user privilege, or perform dynamic searches of information repositories
with the privileges of the requesting user.
n Be extremely wary of implementing any functionality that enables any
user to delete items from an audit trail. Also, consider the possible impact
of a high-privileged user creating another user of the same privilege level
in heavily audited applications and dual-authorization models.
n When carrying out checks based on numeric business limits and thresh-
olds, perform strict canonicalization and data validation on all user input
before processing it. If negative numbers are not expected, explicitly reject
requests that contain them.
n When implementing discounts based on order volumes, ensure that orders
are fi nalized before actually applying the discount.
n When escaping user-supplied data before passing to a potentially vulner-
able application component, always be sure to escape the escape character
itself, or the entire validation mechanism may be broken.
n Always use appropriate storage to maintain any data that relates to an
individual user—either in the session or in the user’s profi le.
Summary
Attacking an application’s logic involves a mixture of systematic probing and
lateral thinking. We have described various key checks that you should always
carry out to test the application’s behavior in response to unexpected input.
These include removing parameters from requests, using forced browsing to
access functions out of sequence, and submitting parameters to different loca-
tions within the application. Often, how an application responds to these actions
points toward some defective assumption that you can violate, to malicious effect.
In addition to these basic tests, the most important challenge when probing
for logic fl aws is to try to get inside the developers’ minds. You need to under-
stand what they were trying to achieve, what assumptions they probably made,
cc1111..iinndddd 442299 88//1199//22001111 1122::1111::4466 PPMM
Stuttard c11.indd V2 - 07/26/2011 Page 430
430 Chapter 11 n Attacking Application Logic
what shortcuts they probably took, and what mistakes they may have made.
Imagine that you were working on a tight deadline, worrying primarily about
functionality rather than security, trying to add a new function to an existing
code base, or using poorly documented APIs written by someone else. In that
situation, what would you get wrong, and how could it be exploited?
Questions
Answers can be found at http://mdsec.net/wahh.
1. What is forced browsing, and what kinds of vulnerabilities can it be used
to identify?
2. An application applies various global fi lters on user input, designed to
prevent different categories of attack. To defend against SQL injection,
it doubles up any single quotation marks that appear in user input. To
prevent buffer overfl ow attacks against some native code components, it
truncates any overlong items to a reasonable limit.
What might go wrong with these fi lters?
3. What steps could you take to probe a login function for fail-open condi-
tions? (Describe as many different tests as you can think of.)
4. A banking application implements a multistage login mechanism that is
intended to be highly robust. At the fi rst stage, the user enters a username
and password. At the second stage, the user enters the changing value on
a physical token she possesses, and the original username is resubmitted
in a hidden form fi eld.
What logic fl aw should you immediately check for?
5. You are probing an application for common categories of vulnerability
by submitting crafted input. Frequently, the application returns verbose
error messages containing debugging information. Occasionally, these
messages relate to errors generated by other users. When this happens,
you are unable to reproduce the behavior a second time. What logic fl aw
might this indicate, and how should you proceed?
cc1111..iinndddd 443300 88//1199//22001111 1122::1111::4466 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 431
CHAPTER
12
Attacking Users:
Cross-Site Scripting
All the attacks we have considered so far involve directly targeting the server-
side application. Many of these attacks do, of course, impinge upon other users,
such as a SQL injection attack that steals other users’ data. But the attacker’s
essential methodology was to interact with the server in unexpected ways to
perform unauthorized actions and access unauthorized data.
The attacks described in this chapter and the next are in a different category,
because the attacker’s primary target is the application’s other users. All the
relevant vulnerabilities still exist within the application itself. However, the
attacker leverages some aspect of the application’s behavior to carry out malicious
actions against another end user. These actions may result in some of the same
effects that we have already examined, such as session hijacking, unauthor-
ized actions, and the disclosure of personal data. They may also result in other
undesirable outcomes, such as logging of keystrokes or execution of arbitrary
commands on users’ computers.
Other areas of software security have witnessed a gradual shift in focus from
server-side to client-side attacks in recent years. For example, Microsoft used
to frequently announce serious security vulnerabilities within its server prod-
ucts. Although numerous client-side fl aws were also disclosed, these received
much less attention because servers presented a much more appealing target
for most attackers. In the course of just a few years, at the start of the twenty-
fi rst century, this situation has changed markedly. At the time of this writing,
431
cc1122..iinndddd 443311 88//1199//22001111 1122::1122::2255 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 432
432 Chapter 12 n Attacking Users: Cross-Site Scripting
no critical security vulnerabilities have been publicly announced in Microsoft’s
IIS web server from version 6 onward. However, in the time since this product
was fi rst released, a large number of fl aws have been disclosed in Microsoft’s
Internet Explorer browser. As general awareness of security threats has evolved,
the front line of the battle between application owners and hackers has moved
from the server to the client.
Although the development of web application security has been a few years
behind the curve, the same trend can be identifi ed. At the end of the 1990s, most
applications on the Internet were riddled with critical fl aws such as command
injection, which could be easily found and exploited by any attacker with a bit
of knowledge. Although many such vulnerabilities still exist today, they are
slowly becoming less widespread and more diffi cult to exploit. Meanwhile, even
the most security-critical applications still contain many easily discoverable
client-side fl aws. Furthermore, although the server side of an application may
behave in a limited, controllable manner, clients may use any number of dif-
ferent browser technologies and versions, opening a wide range of potentially
successful attack vectors.
A key focus of research in the past decade has been client-side vulnerabilities,
with defects such as session fi xation and cross-site request forgery fi rst being
discussed many years after most categories of server-side bugs were widely
known. Media focus on web security is predominantly concerned with client-
side attacks, with such terms as spyware, phishing, and Trojans being common
currency to many journalists who have never heard of SQL injection or path
traversal. And attacks against web application users are an increasingly lucra-
tive criminal business. Why go to the trouble of breaking into an Internet bank
when you can instead compromise 1% of its 10 million customers in a relatively
crude attack that requires little skill or elegance?
Attacks against other application users come in many forms and manifest a
variety of subtleties and nuances that are frequently overlooked. They are also
less well understood in general than the primary server-side attacks, with dif-
ferent fl aws being confl ated or neglected even by some seasoned penetration
testers. We will describe all the different vulnerabilities that are commonly
encountered and spell out the practical steps you need to follow to identify and
exploit each of these.
This chapter focuses on cross-site scripting (XSS). This category of vulner-
ability is the Godfather of attacks against other users. It is by some measure the
most prevalent web application vulnerability found in the wild. It affl icts the
vast majority of live applications, including some of the most security-critical
applications on the Internet, such as those used by online banks. The next
chapter examines a large number of other types of attacks against users, some
of which have important similarities to XSS.
cc1122..iinndddd 443322 88//1199//22001111 1122::1122::2266 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 433
Chapter 12 n Attacking Users: Cross-Site Scripting 433
COMMON MYTH
“Users get compromised because they are not security-conscious”.
Although this is partially true, some attacks against application users can
be successful regardless of the users’ security precautions. Stored XSS attacks
can compromise the most security-conscious users without any interaction
from the user. Chapter 13 introduces many more methods by which security-
conscious users can be compromised without their knowledge.
When XSS was fi rst becoming widely known in the web application security
community, some professional penetration testers were inclined to regard XSS
as a “lame” vulnerability. This was partly due to its phenomenal prevalence
across the web, and also because XSS is often of less direct use to a lone hacker
targeting an application, as compared with many vulnerabilities such as server-
side command injection. Over time, this perception has changed, and today XSS
is often cited as the number-one security threat on the web. As research into
client-side attacks has developed, discussion has focused on numerous other
attacks that are at least as convoluted to exploit as any XSS fl aw. And numerous
real-world attacks have occurred in which XSS vulnerabilities have been used
to compromise high-profi le organizations.
XSS often represents a critical security weakness within an application. It
can often be combined with other vulnerabilities to devastating effect. In some
situations, an XSS attack can be turned into a virus or self-propagating worm.
Attacks of this kind are certainly not lame.
COMMON MYTH
“You can’t own a web application via XSS.”
The authors have owned numerous applications using only XSS attacks. In
the right situation, a skillfully exploited XSS vulnerability can lead directly to a
complete compromise of the application. We will show you how.
Varieties of XSS
XSS vulnerabilities come in various forms and may be divided into three vari-
eties: refl ected, stored, and DOM-based. Although these have several features
in common, they also have important differences in how they can be identifi ed
and exploited. We will examine each variety of XSS in turn.
cc1122..iinndddd 443333 88//1199//22001111 1122::1122::2266 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 434
434 Chapter 12 n Attacking Users: Cross-Site Scripting
Refl ected XSS Vulnerabilities
A very common example of XSS occurs when an application employs a dynamic
page to display error messages to users. Typically, the page takes a parameter
containing the message’s text and simply renders this text back to the user within
its response. This type of mechanism is convenient for developers, because it
allows them to invoke a customized error page from anywhere in the application
without needing to hard-code individual messages within the error page itself.
For example, consider the following URL, which returns the error message
shown in Figure 12-1:
http://mdsec.net/error/5/Error.ashx?message=Sorry%2c+an+error+occurred
Figure 12-1: A dynamically generated error message
Looking at the HTML source for the returned page, we can see that the appli-
cation simply copies the value of the message parameter in the URL and inserts
it into the error page template at the appropriate place:
Sorry, an error occurred.
This behavior of taking user-supplied input and inserting it into the HTML
of the server’s response is one of the signatures of refl ected XSS vulnerabilities,
and if no fi ltering or sanitization is being performed, the application is certainly
vulnerable. Let’s see how.
The following URL has been crafted to replace the error message with a piece
of JavaScript that generates a pop-up dialog:
http://mdsec.net/error/5/Error.ashx?message=
Requesting this URL generates an HTML page that contains the following
in place of the original message:
cc1122..iinndddd 443344 88//1199//22001111 1122::1122::2266 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 435
Chapter 12 n Attacking Users: Cross-Site Scripting 435
Sure enough, when the page is rendered within the user’s browser, the pop-
up message appears, as shown in Figure 12-2.
Figure 12-2: A proof-of-concept XSS exploit
Performing this simple test serves verifi es two important things. First, the
contents of the message parameter can be replaced with arbitrary data that gets
returned to the browser. Second, whatever processing the server-side application
is performing on this data (if any), it is insuffi cient to prevent us from supply-
ing JavaScript code that is executed when the page is displayed in the browser.
TRY IT!
http://mdsec.net/error/5/
NOTE If you try examples like this in Internet Explorer, the pop-up may fail to
appear, and the browser may show the message “Internet Explorer has modi-
fi ed this page to help prevent cross-site scripting.” This is because recent ver-
sions of Internet Explorer contain a built-in mechanism designed to protect
users against refl ected XSS vulnerabilities. If you want to test these examples,
you can try a different browser that does not use this protection, or you can dis-
ÿ ÿ ÿ
able the XSS fi lter by going to Tools Internet Options Security Custom
Level. Under Enable XSS fi lter, select Disable. We will describe how the XSS fi l-
ter works, and ways in which it can be circumvented, later in this chapter.
This type of simple XSS bug accounts for approximately 75% of the XSS
vulnerabilities that exist in real-world web applications. It is called refl ected
XSS because exploiting the vulnerability involves crafting a request containing
embedded JavaScript that is refl ected to any user who makes the request. The
attack payload is delivered and executed via a single request and response. For
this reason, it is also sometimes called fi rst-order XSS.
cc1122..iinndddd 443355 88//1199//22001111 1122::1122::2266 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 436
436 Chapter 12 n Attacking Users: Cross-Site Scripting
Exploiting the Vulnerability
As you will see, XSS vulnerabilities can be exploited in many different ways
to attack other users of an application. One of the simplest attacks, and the one
that is most commonly envisaged to explain the potential signifi cance of XSS
fl aws, results in the attacker’s capturing the session token of an authenticated
user. Hijacking the user’s session gives the attacker access to all the data and
functionality to which the user is authorized (see Chapter 7).
The steps involved in this attack are illustrated in Figure 12-3.
Application
U SwR ctL 7. Attacker
erU rs 4ee .r l So eg tts si arn a t kt ea rsc ’pk oe Jr n’ ads s i rih pt hijacks
U1 s. q u e as r e v a user’s
r v e s session
3. c
t
5. Attacker’s
JavaScript 2. Attacker feeds crafted URL to user
executes in
6. User’s browser sends session token to attacker
user’s browser
User Attacker
Figure 12-3: The steps involved in a reflected XSS attack
1. The user logs in to the application as normal and is issued a cookie
containing a session token:
Set-Cookie: sessId=184a9138ed37374201a4c9672362f12459c2a652491a3
2. Through some means (described in detail later), the attacker feeds the
following URL to the user:
http://mdsec.net/error/5/Error.ashx?message=
As in the previous example, which generated a dialog message, this URL
contains embedded JavaScript. However, the attack payload in this case
is more malicious.
3. The user requests from the application the URL fed to him by the attacker.
cc1122..iinndddd 443366 88//1199//22001111 1122::1122::2266 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 437