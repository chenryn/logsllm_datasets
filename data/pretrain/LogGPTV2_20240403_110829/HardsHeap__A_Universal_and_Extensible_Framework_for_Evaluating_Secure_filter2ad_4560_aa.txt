title:HardsHeap: A Universal and Extensible Framework for Evaluating Secure
Allocators
author:Insu Yun and
Woosun Song and
Seunggi Min and
Taesoo Kim
HardsHeap: A Universal and Extensible Framework for
Evaluating Secure Allocators
Insu Yun∗
KAIST
PI:EMAIL
Woosun Song
KAIST
PI:EMAIL
Seunggi Min
KAIST
PI:EMAIL
Taesoo Kim
Georgia Institute of
Technology
PI:EMAIL
ABSTRACT
Secure allocators have been extensively studied to mitigate heap
vulnerabilities. They employ safe designs and randomized mech-
anisms to stop or mitigate heap exploitation. Despite extensive
research efforts, secure allocators can only be evaluated by with
theoretical analysis or pre-defined data sets, which are insufficient
to effectively reflect powerful adversaries in the real world.
In this paper, we present HardsHeap, an automatic tool for
evaluating secure allocators. The key idea of HardsHeap is to use
random testing (i.e., fuzzing) to evaluate secure allocators. To handle
the diverse properties of secure allocators, HardsHeap supports
an extensible framework, making it easy to write a validation logic
for each property. Moreover, HardsHeap employs sampling-based
testing, which enables us to evaluate a probabilistic mechanism
prevalent in secure allocators. To eliminate redundancy in findings
from HardsHeap, we devise a new technique called Statistical
Significance Delta Debugging (SSDD), which extends the existing
delta debugging for stochastically reproducible test cases.
We evaluated HardsHeap to 10 secure allocators. Consequently,
we found 56 interesting test cases, including several unsecure yet
underestimated behaviors for handling large objects in secure al-
locators. Moreover, we discovered 10 implementation bugs. One
of the bugs is integer overflow in secure allocators, making them
even more invulnerable than ordinary allocators. Our evaluation
also shows that SSDD successfully reduces test cases by 37.2% on
average without a loss of reproducibility.
CCS CONCEPTS
• Security and privacy → Systems security; Software and ap-
plication security.
KEYWORDS
Secure allocators, Fuzzing, Delta debugging, Automatic Exploit
Generation
∗Corresponding authors
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea
© 2021 Association for Computing Machinery.
ACM ISBN 978-1-4503-8454-4/21/11...$15.00
https://doi.org/10.1145/3460120.3484740
ACM Reference Format:
Insu Yun, Woosun Song, Seunggi Min, and Taesoo Kim. 2021. HardsHeap:
A Universal and Extensible Framework for Evaluating Secure Allocators. In
Proceedings of the 2021 ACM SIGSAC Conference on Computer and Commu-
nications Security (CCS ’21), November 15–19, 2021, Virtual Event, Republic of
Korea. ACM, New York, NY, USA, 14 pages. https://doi.org/10.1145/3460120.
3484740
1 INTRODUCTION
Heap vulnerabilities remain prevalent security issues in applica-
tions written in memory unsafe languages such as browsers and
operating systems. According to Google [16], heap vulnerabilities
are directly related to 40% of 0-day (7 out of 18) exploits used in
the wild in 2021. Moreover, heap out-of-bounds and use after free —
are ranked as the top two vulnerability classes from 2016 to 2019 in
Microsoft’s system software [26]. The exploitation of these vulnera-
bilities often leads to serious security implications such as arbitrary
code execution or privilege escalation.
Many secure allocators [1, 12, 21, 22, 25, 28, 33, 37, 38, 45] have
been proposed to mitigate these heap vulnerabilities. Secure alloca-
tors often leverage safe designs (e.g., segregated metadata) along
with randomized mechanisms (e.g., random allocations or random
reuse) to reduce the reliability of heap exploitation with low perfor-
mance overhead. Recently, researchers have also worked on secure
allocators that support stable spatial memory safety (e.g., MarkUs [1]
or ffmalloc [45]). Thanks to such research efforts, scudo [22], a se-
cure allocator developed as a part of the LLVM project, becomes a
default allocator from Android 11.
Despite ongoing efforts on secure allocators, their security eval-
uation is merely theoretical and inflexible. To the best of our knowl-
edge, all studies regarding secure allocators [21, 28, 37, 38] only use
theoretical analysis or static workload to evaluate each mechanism.
For example, Guarder [38] only demonstrated its theoretical entropy
for randomness, and SlimGuard used 128 B, 1 KB, 64 KB objects to
compute the entropy of randomized allocation and reuse. Recently,
Entroprise [39] suggested a universal method for evaluating the
entropy of secure allocators regardless of their underlying imple-
mentations. However, the workload is still statically decided based
on a given configuration or program. For example, in its analysis,
Entroprise uses 10,000 16-byte objects to calculate the entropy of
multiple allocators. Unfortunately, even though these allocators
assume a strong adversary that can arbitrarily allocate and deal-
locate objects, these evaluations are insufficient to demonstrate
their security against a powerful attacker. [28]. In another study,
ArcHeap [49], randomly generates heap actions to discover security
issues in allocators without relying on a static workload. However,
it only focuses on classical heap exploitation techniques in a normal
Session 2A: Fuzzing and Bug Finding CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea379allocator (e.g., metadata overwrite), in which most secure allocators
are invulnerable. Furthermore, ArcHeap cannot support randomized
mechanisms, which are prevalent in secure allocators.
In this paper, we propose HardsHeap, an automatic tool for
evaluating the security of secure allocators. Unlike static evalua-
tions, HardsHeap randomly generates heap actions (e.g., allocation
and deallocation) similar to fuzzing in software testing. To evalu-
ate various security properties in secure allocators (see Table 4),
HardsHeap provides an extensible framework to easily build a
module for testing each property. Moreover, HardsHeap adopts
sampling-based testing to evaluate randomized protections; it re-
peats multiple experiments and computes the probability of each
security property violation. Such a random exploration can effec-
tively explore a large search space [49, 50]; however, its findings
often introduce redundancy that impedes further analysis to un-
derstand a root cause of security property violation. To overcome
this, we devise a technique, called Statistical Significance Delta
Debugging (SSDD), to reduce a test case that is only stochastically
reproducible. It combines a greedy method with statistical signifi-
cance to reduce a test case without a loss of reproducibility.
We evaluated HardsHeap with 10 secure allocators including
DieHarder [28], Guarder [38], FreeGuard [37], and scudo [22]. To eval-
uate various security properties, we built seven modules, which only
require hundreds of lines to implement thanks to HardsHeap’s ex-
tensible framework. Using these modules, we identified 56 security
violations in these allocators. These results show exceptions that a
secure allocator fails to protect. For example, we found that Guarder
leads to zero entropy in its random allocation for a large object (>
512 KB), unlike its claim for stable entropy. Moreover, these findings
often lead us to discover implementation bugs; we found 10 bugs in
seven allocators. More interestingly, a certain type of bugs makes
these allocators less secure than an ordinary allocator. For example,
we found that four secure allocators (Guarder, FreeGuard, isoalloc,
and ffmalloc) suffer from integer overflow. They can return an
object whose size is less than the request size if the request size
is extremely large (e.g., −8). This vulnerability can render a well-
written program insecure by imposing heap overflow. To foster
future research, we open-source our prototype of HardsHeap in
https://github.com/kaist-hacking/HardsHeap.
In summary, this paper makes the following contributions:
• We build HardsHeap, an extensible framework for eval-
uating various security properties of secure allocators.
HardsHeap adopts sampling-based testing to support ran-
domized algorithms in secure allocators.
• We devise a novel technique called Statistical Significance
Delta Debugging (SSDD) to remove redundancy from a
stochastically reproducible test case.
• We applied HardsHeap to 10 secure allocators and found
56 interesting test cases. These findings led us to discover
several serious yet hidden behaviors that violate security
properties. Moreover, they led us to discover 10 implementa-
tion bugs in secure allocators.
2 BACKGROUND
2.1 Heap vulnerabilities
A memory allocator supports a set of APIs for dynamic memory
management (e.g., malloc and free). The allocator has chosen dif-
ferent design decisions and features for high runtime performance
and low memory fragmentation, resulting in various implementa-
tions [1, 12, 21, 22, 25, 28, 33, 37, 38, 45]. This dynamic memory (i.e.,
heap) is required for a long-lived object, which is not suitable for
temporary memory (e.g., stack). Such an object is unavoidable in
non-trivial applications; therefore, heap and its allocators become
essential software components.
Owing to the excessive use of dynamic objects, an application
often suffers from various types of heap vulnerabilities. Classically,
heap vulnerabilities can be categorized into four types:
• Overflow: Writing other objects near the object boundary.
• Use-after-free: Using an object that is already freed.
• Invalid free: Freeing a non-heap object.
• Double free: Freeing an object that is already freed.
Each heap vulnerability provides a unique capability for exploita-
tion. In particular, overflow allows the modification data in the
adjacent chunks, use-after-free allows the control of a freed object
if it is successfully reclaimable, invalid free allows the modifica-
tion or allocation of a non-heap object, and double free allows
the allocation of the same object twice, which can break internal
invariants of heap allocators. By exploiting these vulnerabilities,
an attacker often causes a more serious security implication, such
as arbitrary code execution [26].
2.2 Secure allocators
Many secure allocators have been proposed [1, 12, 21, 22, 25, 28, 33,
37, 38, 45] to prevent these heap vulnerabilities. These allocators
employ specific designs to support several security features while
incurring low performance overhead. To understand the security
features of existing secure allocators, we first manually investigated
their security features, as shown in Table 1. Among the allocators,
ffmalloc (FF) and MarkUs (MA) are unique; they are specially de-
signed to prevent use-after-free, while others are developed to
mount more generic defenses against all heap vulnerabilities. Evi-
dently, these special allocators — ffmalloc and MarkUs— are more
secure than others against use-after-free; they support a stable level
of security for use-after-free, unlike the randomized allocation in
other secure allocators.
Table 1 shows the trends in the design of secure allocators. First,
due to serious security threats from metadata overwrites [36], all
allocators employ mechanisms to protect metadata, which are ei-
ther segregated metadata or metadata encoding. Second, random
allocation is the most widely used mechanism for preventing heap
overflow. It is sometimes equipped with additional features such
as a guard page, overvisioning, and check-on-free (i.e., heap ca-
nary). Third, most of allocators adopt random reuse to prevent use-
after-free attacks. Moreover, ffmalloc and MarkUs have no other
protections for use-after-free because their own mechanisms are
believed to be self-sufficient; ffmalloc employs one-time allocation
and MarkUs marks dangled objects to exclude them from reclama-
tion. Finally, all secure allocators identify invalid free and double
Session 2A: Fuzzing and Bug Finding CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea380Abbr. Allocators
DI
FF
FR
GU
HA
IS
MA
MI
SC
SL
DieHarder [28]
ffmalloc [45]
FreeGuard [37]
Guarder [38]
hardened_malloc [12]
isoalloc [33]
MarkUs [1]
mimalloc-secure [25]
Scudo [22]
SlimGuard [21]
Security features
Segregated metadata
Metadata encoding
Random allocations
Guard pages
Overvisioning
Check-on-free
Random reuse
Destroy-on-free
Use-after-free prevention
Detect invalid frees
Detect double frees
(a) Secure allocators and their abbre-
viations for brevity
DI
✓ ✓
Security Properties
Prevent metadata-based attacks
Prevent metadata-based attacks
Reduce reliability of overflow attacks
✓ ✓
Prevent cross-object overflows
✓ ✓
Reduce the impacts of overflow attacks
✓
Timely detect overflow attacks
✓ ✓
Reduce reliability of use-after-free attacks ✓ ✓
✓ ?
Mitigate use-after-free attacks
Prevent reclamation of a dangling object
Prevent invalid free attacks
Prevent double free attacks
✓ ✓
✓ ✓
FR GU HA IS MI
✓
✓
✓
✓
✓
✓
?
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓ ✓
✓ ✓
✓ ✓
✓ ✓
✓ ✓
SC SL
✓
FF MA
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓ ✓
✓ ✓
✓ ✓
✓: Supported, ?: Optional
(b) Security features that existing secure allocators support.
Table 1: Existing secure allocators and their security features. We manually investigate them according to their documentation and papers.
Since mimalloc is a not secure allocator by default, we only consider its secure mode in this paper.
free. If an allocator can manage an object status (e.g., an object is
freed or not) in a safe place, it is relatively inconsequential to avoid
these vulnerabilities. By using the status, the allocator can detect a
suspicious object (e.g., an already freed one) at free.
3 DESIGN GOALS
Similar to previous works [21, 38], we analyzed the security prop-
erties of secure allocators in Table 1; however, this analysis is in-
sufficient to evaluate their security. In this section, we first discuss
limitations of the existing manual analysis. Then, we show the cor-
responding design goals of HardsHeap to overcome these issues
in evaluating secure allocators systematically and thoroughly.
Implementation-agnostic security testing. To evaluate the se-
curity properties of secure allocators, we should devise a way to
evaluate them regardless of their different implementations. In
particular, secure allocators have made unique design decisions
to satisfy their own security and performance requirements. As a
result, even though many secure allocators have security features
in common (see Table 1), their underlying implementations are
extremely diverse. For example, allocators individually define a
large object that is allocated by mmap instead of sbrk; SlimGuard uses
128 KB as its threshold for large objects where Guarder uses 512
KB. Therefore, it is impossible to evaluate various secure allocators