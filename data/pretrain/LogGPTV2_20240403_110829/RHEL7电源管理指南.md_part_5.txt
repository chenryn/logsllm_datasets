[`throughput-performance`{.literal}]{.term}
:   ::: para
    此配置为 Fedora
    操作系统预先选定的计算节点。在该系统上的目标是为了达到最佳吞吐量性能。
    :::
[`virtual-guest`{.literal}]{.term}
:   ::: para
    虚拟机会预先选定此配置。若您不想实现最佳性能，请将其改变为
    `balanced`{.literal} 或者 `powersave`{.literal}
    配置文件（如下所示）。
    :::
[`balanced`{.literal}]{.term}
:   ::: para
    其他情况下都会预先选定此配置。其目标在于平衡性能和电源消耗。
    :::
:::
:::
::: para
如需启动 [**tuned**]{.application}，请以 root 身份运行下列指令：
:::
``` screen
systemctl start tuned
```
::: para
若要在每次计算机启动时激活 [**tuned**]{.application}，请输入以下指令：
:::
``` screen
systemctl enable tuned
```
::: para
其它的 [**tuned**]{.application} 控制，例如配置文件选择等，请使用：
``` screen
tuned-adm
```
:::
::: para
此命令需要 [**tuned**]{.application} 服务正在运行。
:::
::: para
若要查看可用的已安装配置文件，请运行：
:::
``` screen
tuned-adm list
```
::: para
若要查看目前已激活的配置文件，请运行：
:::
``` screen
tuned-adm active
```
::: para
若要选择或激活某一配置文件，请运行：
:::
``` screen
tuned-adm profile profile
```
::: para
例如：
:::
``` screen
tuned-adm profile powersave
```
::: para
此功能是一项试验性的功能，它可能一次选择较多的配置文件。
[**tuned**]{.application}
应用将会试图在加载期间将它们合并。若有冲突，将优先选择最后选定的配置文件的设置。这会自动实现，并且不会检查产生的合并参数是否有意义。如果不加考虑的使用，此功能可能会以完全相反的方式微调某些参数，其结果可能适得其反。例如，使用
`throughput-performance`{.literal} 配置文件，将磁盘吞吐量设置为
`high`{.literal}，同时，使用 `spindown-disk`{.literal}
配置文件，将磁盘旋转降速设置为
`low`{.literal}。下面的例子是在一台虚拟机上将系统优化为最佳性能，同时将其微调为低能耗，并且以低能耗为优先：
:::
``` screen
tuned-adm profile virtual-guest powersave
```
::: para
若要让 [**tuned**]{.application}
推荐最适合您的系统的配置文件，同时不改变任何现有的配置文件，也不使用安装期间使用过的逻辑，请运行以下指令：
:::
``` screen
tuned-adm recommend
```
::: para
[**tuned**]{.application}
自身有额外选项以供手动运行时使用。然而，我们并不建议您这样做，它主要用于
debug 目的。若要查看可用的选项，请使用以下指令：
:::
``` screen
tuned --help
```
:::
::: section
::: titlepage
## [⁠]{#Audit_and_Analysis.html#custom-profiles}2.5.3. 自定义配置文件 {.title}
:::
::: para
特定分配的配置文件被储存在 `/usr/lib/tuned`{.filename}
目录中。每个配置文件都有它自己的目录。该配置文件可以构成名为
`tuned.conf`{.filename} 的主要配置文件，也可选择构成其它文件，比如
helper 脚本。不要更改 `/usr/lib/tuned`{.filename}
中的配置文件。若需要自定义配置文件，请将配置文件目录复制到
`/etc/tuned`{.filename}
目录。这是自定义配置文件的位置。若存在两个名称相同的配置文件，将会以
`/etc/tuned`{.filename} 中的配置文件为优先。您可以在
`/etc/tuned`{.filename}
目录中创建您自己的配置文件，该目录中会有您感兴趣的配置文件，并且只会更改或替代您想要改动的参数。
:::
::: para
`tuned.conf`{.filename} 文件包含几个小节。其中有一个 `[main]`{.literal}
节。其它的小节是插件配置实例。所有的节都是可选的，包括
`[main]`{.literal} 节。该文件同样支持注释。以 \# 开头的行就是注释。
:::
::: para
`[main]`{.literal} 节有如下选项：
:::
::: variablelist
[`include=profile`{.option}]{.term}
:   ::: para
    特定的配置文件将会被包含在内，例如，`include=powersave`{.literal}
    将会包括 `powersave`{.literal} 配置文件。
    :::
:::
::: para
描述插件的节将会以下列格式编排：
:::
``` programlisting
[NAME]
type=TYPE
devices=DEVICES
```
::: para
*NAME* 是插件实例在日志中使用的名称。它可以是任意字符。*TYPE*
指的是微调插件的类型。若要查看微调插件的清单和描述，请查看〈[第 2.5.1 节
"插件"](#Audit_and_Analysis.html#tuned-plugins){.xref}〉。*DEVICES*
是该插件实例将会管理的装置清单。`devices`{.literal}
行可能包含一个清单，一个通配符（\*），和否定（!）。您还可以将规则结合起来。若没有
`devices`{.literal} 行，系统中现有的和之后连接的设备，只要符合
`TYPE`{.literal}，都将被该插件实例管理。这和使用 `devices=*`{.literal}
的效果是一样的。若插件中没有指定任何实例，插件将不会被启用。若插件支持更多的选项，它们也能在插件节中被指定。如果没有制定选项，默认值将被使用（如果之前没有在已包括的插件中进行指定）。若要查看插件选项列表，请查看〈[第 2.5.1 节
"插件"](#Audit_and_Analysis.html#tuned-plugins){.xref}〉。
:::
::: example
[⁠]{#Audit_and_Analysis.html#idm139882414480432}
**例 2.1. 插件实例描述**
::: example-contents
::: para
下面的例子将对所有以 `sd`{.literal} 开头（比如 `sda`{.literal}
或者`sdb`{.literal}）的装置进行匹配，同时不禁用障碍：
:::
``` programlisting
[data_disk]
type=disk
devices=sd*
disable_barriers=false
```
::: para
下面的例子将会除了 `sda1`{.literal} 和 `sda2`{.literal}
以外的所有装置进行匹配：
:::
``` programlisting
[data_disk]
type=disk
devices=!sda1, !sda2 
disable_barriers=false
```
:::
:::
::: para
如果您不需要为插件实例自定义名称，而且您的配置文件中只有一个对该实例的定义，tuned
支持下面的短语法：
:::
``` programlisting
[TYPE]
devices=DEVICES
```
::: para
在这种情况下，可以省略 `type`{.literal} 行。该实例将会被引用为一个
name，和 type 一样。那么先前的例子就能被改写为：
:::
``` programlisting
[disk]
devices=sdb*
disable_barriers=false
```
::: para
如果同一节被 `include`{.literal} 选项指定超过一次，那么设置就会被合并。
如果它们因为有冲突而无法合并，最后的冲突定义将会优先于先前的设置。有时候您并不清楚之前有什么样的定义。这种情况下您可以使用
`replace`{.literal} 布尔选项，将它设置为
`true`{.literal}。这将会使得先前所有的名称相同的定义都会被覆盖，合并也就不会发生了。
:::
::: para
您还可以通过指定 `enabled=false`{.literal}
选项来禁用插件。这和不定义该实例的效果是一样的。若您想要重新定义
`include`{.literal}
选项中的定义，并且不想要插件在自定义配置文件中被激活，禁用插件是很有用的。
:::
::: para
大多数情况下，装置会被一个插件实例管理。如果装置和多个实例定义匹配，将会报告错误。
:::
::: para
下面的例子是一个以 `balanced`{.literal}
配置文件为基础的自定义配置文件，将它扩展为将所有设备的 ALPM
设置为最大节电模式。
:::
``` programlisting
[main]
include=balanced
[disk]
alpm=min_power
```
:::
::: section
::: titlepage
## [⁠]{#Audit_and_Analysis.html#tuned-adm}2.5.4. Tuned-adm {.title}
:::
::: para
通常，具体的系统审核和分析非常耗时，并且这样做也不节能。之前的做法是使用默认设置。因此，Red
Hat Enterprise Linux 7
针对两种极端的不同使用方式提供了不同的配置文件以供选择。同时，它还提供了
[**tuned-adm**]{.application}
工具，使得您可以通过命令行在这些配置文件间进行切换。Red Hat Enterprise
Linux 7 包含很多适用于典型案例的预定义配置文件，您只要使用
`tuned-adm`{.command}
命令即可选择并激活它们，但您也可以自己创建、修改并删除配置文件。
:::
::: para
要列出所有可用配置文件并识别目前激活的配置文件，请运行：
:::
``` screen
tuned-adm list
```
::: para
要只显示当前激活的配置文件请运行：
:::
``` screen
tuned-adm active
```
::: para
要切换到某个可用的配置文件请运行：
:::
``` screen
tuned-adm profile profile_name
```
::: para
例如：
:::
``` screen
tuned-adm profile server-powersave
```
::: para
要禁用所有微调：
:::
``` screen
tuned-adm off
```
::: para
下面是通过基础数据包安装的配置文件清单：
:::
::: variablelist
[`balanced`{.literal}]{.term}
:   ::: para
    默认节电配置文件。其目的为在性能和节能之间找到平衡。它试图在任何可能的情况下都使用自动调整和自动微调。它对大多数负载都会产生好的结果。它唯一的缺点是会增加延迟。目前的
    [**tuned**]{.application} 使得它能够启用
    CPU、磁盘、音频和视频插件，还会激活 `ondemand`{.command}
    调控器。*`radeon_powersave`* 会被设定为 `auto`{.literal}。
    :::
[`powersave`{.literal}]{.term}
:   ::: para
    用于最大化节能效能的配置文件。它能限制效能，以最大限度地减少实际电量消耗。目前的
    [**tuned**]{.application} 使得它能够为 SATA 主适配器启用 USB
    自动挂起、 WiFi 节能和 ALPM 节能（请参阅〈[第 3.7 节
    "主动连接电源管理"](#Core_Infrastructure.html#ALPM){.xref}〉）。它还会以低唤醒率为系统调度多核节能，同时激活
    `ondemand`{.command} 控制器。它会根据您的系统启用 AC97
    音频节电，或者启用每 10 秒超时的 HDA-Intel
    节能。以防您的系统支持启用 KMS 的 Radeon