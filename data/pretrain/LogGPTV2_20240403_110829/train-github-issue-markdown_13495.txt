    // https://msdn.microsoft.com/en-us/library/windows/apps/hh700334.aspx
    tempFolder.createFileAsync("tempfile.txt", Windows.Storage.CreationCollisionOption.replaceExisting)
       .then(function (tempFile) {
           // The createFileAsync call succeeded, so start the download operation.
           var downloader = new Windows.Networking.BackgroundTransfer.BackgroundDownloader();
           var transfer = downloader.createDownload(uriExample, tempFile);
            return transfer.startAsync(); 
       })
Copy-pasting this to Visual Studio makes this (with 2-space indent):
    tempFolder.createFileAsync("tempfile.txt", Windows.Storage.CreationCollisionOption.replaceExisting)
      .then(function (tempFile) {
      // The createFileAsync call succeeded, so start the download operation.
      var downloader = new Windows.Networking.BackgroundTransfer.BackgroundDownloader();
      var transfer = downloader.createDownload(uriExample, tempFile);
      return transfer.startAsync();
    })
This in fact worked in older version of TypeScript (I think the last version
was 1.1), but now it's hard to make Promise chains.
    // This is how I deal with Promise now
    somePromise().then(() => {
    }).then(() => {
    });
    // Not good...
    somePromise().then(() => otherPromise(
      param1,
      "long-string, let's say it's a URL."
      ).then(() => {
      blah();
    });
    // Doesn't work
    somePromise()
      .then(() => otherPromise(
      param1,
      "long-string, let's say it's a URL."
      )
      .then(() => {
      blah();
    });
Can we get this better so that the MSDN example just work?