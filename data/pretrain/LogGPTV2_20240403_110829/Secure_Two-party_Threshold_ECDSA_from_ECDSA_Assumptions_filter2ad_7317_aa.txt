title:Secure Two-party Threshold ECDSA from ECDSA Assumptions
author:Jack Doerner and
Yashvanth Kondi and
Eysa Lee and
Abhi Shelat
2018 IEEE Symposium on Security and Privacy
Secure Two-party Threshold ECDSA
from ECDSA Assumptions
Jack Doerner
Yashvanth Kondi
Eysa Lee
abhi shelat
PI:EMAIL
Northeastern University
PI:EMAIL
Northeastern University
PI:EMAIL
Northeastern University
PI:EMAIL
Northeastern University
Abstract—The Elliptic Curve Digital Signature Algorithm
(ECDSA) is one of the most widely used schemes in deployed
cryptography. Through its applications in code and binary
authentication, web security, and cryptocurrency, it is likely one
of the few cryptographic algorithms encountered on a daily
basis by the average person. However, its design is such that
executing multi-party or threshold signatures in a secure manner
is challenging: unlike other, less widespread signature schemes,
secure multi-party ECDSA requires custom protocols, which
has heretofore implied reliance upon additional cryptographic
assumptions such as the Paillier encryption scheme.
We propose new protocols for multi-party ECDSA key-
generation and signing with a threshold of two, which we prove
secure against malicious adversaries in the random oracle model
using only the Computational Difﬁe-Hellman Assumption and
the assumptions already implied by ECDSA itself. Our scheme
requires only two messages, and via implementation we ﬁnd that
it outperforms the best prior results in practice by a factor of 55
for key generation and 16 for signing, coming to within a factor
of 12 of local signatures. Concretely, two parties can jointly sign
a message in just over two milliseconds.
I. INTRODUCTION
Threshold Digital Signature Schemes are a classic notion
in the ﬁeld of Cryptography [1], which allow a group of
individuals to delegate their joint authority to sign a message
to any subcommittee among themselves that is larger than a
certain size. Though they are extensively studied, these types
of signatures are seldom used in practice, in part because
bespoke threshold schemes are incompatible with familiar,
widely-accepted signature schemes, and, on the other hand,
because threshold techniques for standard signatures tend to
be highly inefﬁcient, reliant upon unacceptable assumptions,
or otherwise undesirable.
Consider the speciﬁc case of the Elliptic Curve Digital
Signature Algorithm (ECDSA), perhaps the most widespread
of signatures schemes: all existing threshold techniques for
generating ECDSA signatures require the invocation of heavy
cryptographic primitives such as Paillier encryption [2]–[4].
This leads to both poor performance and to reliance upon as-
sumptions that are foreign to the mathematics on which ECDSA
is based. This is troublesome, because performance concerns
and avoidance of certain assumptions often motivate the use
of ECDSA in the ﬁrst place. We address this shortcoming by
devising the ﬁrst threshold signing algorithm for ECDSA that is
based solely upon Elliptic Curves and the assumptions that the
ECDSA signature scheme itself already makes. Furthermore,
we improve upon the performance of previous works by a
factor of sixteen or more.
Notionally introduced by Difﬁe and Hellman [5] and ﬁrst
formulated and proven by Goldwasser et al. [6], Digital
Signature Schemes allow one party (the signer) who holds
a secret key to convince anyone who holds the matching public
key that a message is authentic (i.e. that it cannot have been
altered since it was signed) and non-repudiable (i.e. that no one
other than the signer could have signed it). Signature schemes
achieve this through the property of existential unforgeability
against adaptive chosen-message attacks. That is, an adversary
is allowed to choose any number of messages for which it may
request a signature, but we require that it can never produce
a valid signature for a new message on its own unless it has
access to the secret key.
ECDSA is a standardized [7]–[9] derivative of the earlier Dig-
ital Signature Algorithm (DSA), devised by David Kravitz [10].
Where DSA is based upon arithmetic modulo a prime, ECDSA
uses elliptic curve operations over ﬁnite ﬁelds. Compared to
its predecessor, it has the advantage of being more efﬁcient
and requiring much shorter key lengths for the same level of
security. In addition to the typical use cases of authenticated
messaging, code and binary signing, remote login, &c., ECDSA
has been eagerly adopted where high efﬁciency is important.
For example, it is used by TLS [11], DNSSec [12], and many
cryptocurrencies, including Bitcoin [13] and Ethereum [14].
A t-of-n threshold signature scheme is a set of protocols
which allow n parties to jointly generate a single public key,
along with n private shares of a joint secret key, and then
privately sign messages if and only if t (some predetermined
number) of those parties participate in the signing operation.
In addition to satisfying the standard properties of signature
schemes, it is necessary that threshold signature schemes be
secure in a similar sense to other protocols for multi-party
computation. That is, it is necessary that no malicious party
can subvert the protocols to extract another party’s share of
the secret key, and that no subset of fewer than t parties can
collude to generate signatures.
The concept of threshold signatures originates with the
work of Yvo Desmedt [1], who proposed that multi-party and
threshold cryptographic protocols could be designed to mirror
societal structures, and thus cryptography could take on a new
role, replacing organizational policy and social convention with
mathematical assurance. Although this laid the motivational
© 2018, Jack Doerner. Under license to IEEE.
DOI 10.1109/SP.2018.00036
980
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:37:03 UTC from IEEE Xplore.  Restrictions apply. 
groundwork, it was the subsequent work of Desmedt and
Frankel [15] that introduced the ﬁrst true threshold encryption
and signature schemes. These are based upon a combination of
the well-known ElGamal [16] and Shamir Secret-Sharing [17]
primitives, and carry the disadvantage that they require a trusted
party to distribute private keys. Pedersen [18] later removed
the need for a trusted third party.
The earliest threshold signature schemes were formulated as
was convenient for achieving threshold properties; Desmedt and
Frankel [15] recognized the difﬁculties inherent in designing
threshold systems for standard signature schemes. Nevertheless,
they later returned to the problem [19], proposing a non-
interactive threshold system for RSA signatures [20]. This
was subsequently improved and proven secure in a series of
works [21]–[24]. Threshold schemes were also developed for
Schnorr [25], [26] and DSA [27]–[29] signatures. Many of
these schemes were too inefﬁcient to be practical, however.
The efﬁciency and widespread acceptance of the ECDSA
signature scheme make it a natural target for similar work, and
indeed threshold ECDSA signatures are such a useful primitive
that many cryptocurrencies are already implementing a similar
concept in an ad-hoc manner [30]. Unfortunately, the design
of the ECDSA algorithm poses a unique problem: the fact that
it uses its nonce in a multiplicative fashion frustrates attempts
to use typical linear secret sharing systems as primitives. The
recent works of Gennaro et al. [3] and Lindell [2] solve this
problem by using multiplicative sharing in combination with
homomorphic Paillier encryption [31]; the former focuses on
the general t-of-n threshold case, with an emphasis on the
honest-majority setting, while the latter focuses on the difﬁcult
2-of-2 case speciﬁcally. The resulting schemes (and the latter
in particular) are very efﬁcient in comparison to previous
threshold schemes for plain DSA signatures: Lindell reports
that his scheme requires only 37ms (including communication)
per signature over the standard P-256 [9] curve.
Unfortunately, both Lindell and Gennaro et al.’s schemes
depend upon the Paillier cryptosystem, and thus their security
relies upon the Decisional Composite Residuosity Assumption.
In some applications (crypto-currencies, for example), the
choice of ECDSA is made carefully in consideration of the
required assumptions, and thus using a threshold scheme that
requires new assumptions may not be acceptable. Additionally,
if it is to be proven secure via simulation, Lindell’s scheme
requires a new (though reasonable) assumption about the
Paillier cryptosystem to be accepted. Furthermore, the Paillier
cryptosystem is so computationally expensive that even a single
Paillier operation represents a signiﬁcant cost relative to typical
Elliptic Curve operations. Thus in this work we ask whether
an efﬁcient, secure, multi-party ECDSA signing scheme can
be constructed using only elliptic curve primitives and elliptic
curve assumptions, and ﬁnd the answer in the afﬁrmative.
A. Our Technique
Lindell observes that the problem of securely computing an
ECDSA signature among two parties under a public key pk
can be reduced to that of securely computing just two secure
multiplications over the integers modulo the ECDSA curve
order q (Zq). Lindell uses multiplicative shares of the secret key
and nonce (hereafter called the instance key), and computes the
signature using the Paillier additive homomorphic encryption
scheme. We propose a new method to share the products which
eliminates the need for homomorphic encryption.
Recall the signing equation for ECDSA,
H(m) + sk · rx
sig ..=
k
where m is the message, H is a hash function, sk is the
secret key, k is the instance key, and rx is the x-coordinate
of the elliptic curve point R = k · G (G being the generator
for the curve). Suppose that k = kA · kB such that kA and
kB are randomly chosen by Alice and Bob respectively, and
R = (kA · kB) · G, and suppose that sk = skA · skB. Alice and
Bob can learn R (and thus rx) securely via Difﬁe-Hellman
exchange, and they receive m as input. Rearranging, we have
(cid:3)
(cid:2)
(cid:3)
(cid:2)
sig = H(m)
1
kA
· 1
kB
+ rx
skA
kA
· skB
kB
which identiﬁes the two multiplications on private inputs
that are necessary. In our scheme, the results of of these
multiplications are returned as additive secret shares to Alice
and Bob. Since the rest of the equation is distributive over these
shares, Alice and Bob can assemble shares of the signature
without further interaction. Alice sends her share to Bob, who
reconstructs sig and checks that it veriﬁes.
To compute these multiplications, one could apply generic
multi-party computation over arithmetic circuits, but generic
MPC techniques incur large practical costs in order to achieve
malicious security. Instead, we construct a new two-party
multiplication protocol, based upon the semi-honest Oblivious-
Transfer (OT) multiplication technique of Gilboa [32], which
we harden to tolerate malicious adversaries using the structure
of the signature scheme itself. Note that even if the Gilboa
multiplication protocol is instantiated with a malicious-secure
OT protocol, it is vulnerable to a simple selective failure attack
whereby the OT sender (Alice) can learn one or more bits of
the secret input of the OT receiver (Bob). We mitigate this
attack by encoding the Bob’s input randomly, such that Alice
must learn more than a statistical security parameter number
of bits in order to determine his unencoded input.
Unfortunately Bob may also cheat and learn something
about Alice’s secrets by using inconsistent inputs in the two
different multiplication protocols, or by using inconsistent
inputs between the multiplications and the Difﬁe-Hellman
exchange. In order to mitigate this issue, we introduce a simple
consistency check which ensures that Bob’s inputs correspond
to his shares of the established secret key and instance key. In
essence, Alice and Bob combine their shares with the secret
key and instance key in the exponent, such that if the shares are
consistent then they evaluate to a constant value. This check is
a novel and critical element of our protocol, and we conjecture
that it can be applied to other domains.
Our signing protocol can easily be adapted for threshold
signing among n parties with a threshold of two. This requires
981
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:37:03 UTC from IEEE Xplore.  Restrictions apply. 
the addition of a special n-party setup protocol, and the
modiﬁcation of the signing protocol to allow the parties to
provide additive shares of their joint secret key rather than
multiplicative shares. Surprisingly, however, this modiﬁcation
incurs an overhead equivalent to roughly half of an ordinary
multiplication.
B. Our Contributions
1) We present an efﬁcient n-party ECDSA key generation
protocol and prove it secure in the Random Oracle model
under the Computational Difﬁe-Hellman assumption.
2) We present an efﬁcient two-party, two-round ECDSA
signing protocol that is secure under the Computational
Difﬁe-Hellman assumption and the assumption that the
resulting signature is itself secure. Since CDH is implied
by the Generic Group Model, under which ECDSA is
proven secure, we require no additional assumptions
relative to ECDSA itself.
3) We formulate a new ideal functionality for multi-party
ECDSA signing that permits our signing protocol to
achieve much better practical efﬁciency than it could if it
were required to adhere to the standard functionality. We
reduce the security of our functionality to the security of
the classic signature game in the Generic Group Model.
4) In service of our main protocol, we devise a variant
of Gilboa’s multiplication by oblivious transfer tech-
nique [32] that may be of independent interest. It uses
randomized input-encoding along with input commitments
to avoid explicit correctness and consistency checks while
maintaining security against malicious adversaries.
5) Our multiplication protocol has at its core an oblivious
transfer scheme based upon the Simplest OT [33] and
KOS [34] OT-extension protocols. We introduce a new
check system to avoid the issues that have recently cast
doubt on the UC-security of Simplest OT [35].
6) We provide an implementation of our protocol in Rust,
and demonstrate its efﬁciency under real-world conditions.
In benchmarks, we ﬁnd our implementation can produce
roughly 475 signatures per second on commodity hardware
without parallelism.
C. Organization
The remainder of this document is organized as follows.
In Section II we review essential concepts and deﬁnitions,
and in Section III we discuss the ideal functionality that our
protocols will realize. In Section IV we specify a basic two-
party protocol, which we extend to support 2-of-n threshold
signing in Section V. In Section VI we describe the OT and
multiplication primitives that we use. In Section VII we present
a comparative analysis of our protocols. In Section VIII, we
describe our implementation and present benchmark results. In
the full version of this paper we prove our protocol secure.
II. PRELIMINARIES AND DEFINITIONS
A. Notation and Conventions
c≡ to denote computational indistinguishability,
subscripts, while matrices are denoted by bold capitals, with
subscripts and superscripts representing row indices and column
..= for
indices respectively. We use = to denote equality,
assignment, and ← for sampling an instance from a distribution.
s≡
We use
to denote statistical indistinguishability, and for statistical
equivalence, we use ≡. Throughout this document, we use
κ to represent the security parameter of the elliptic curve over
which our equations are evaluated. Likewise we use s for the
statistical security parameter.
In functionalities, we assume standard and implicit bookkeep-
ing. In particular, we assume that along with the other messages
we specify, session IDs and party IDs are transmitted so that
the functionality knows to which instance a message belongs
and who is participating in that instance, and we assume that
the functionality aborts if a party tries to reuse a session ID,
send messages out of order, &c. We use slab-serif to denote
message tokens, which communicate the function of a message
to its recipients. For simplicity we omit from a functionality’s
speciﬁer all parameters that we do not actively use. So, for
example, many of our functionalities are parameterized by a
group G of order q, but we leave implicit the fact that in any
given instantiation all functionalities use the same group.
B. Digital Signatures
Deﬁnition 1 (Digital Signature Scheme [36]).
A Digital Signature Scheme is a tuple of probabilistic polyno-
mial time (PPT) algorithms, (Gen, Sign, Verify) such that:
1) Given a security parameter κ, the Gen algorithm outputs
2) Given a secret key sk and a message m, the Sign algorithm
a public key/secret key pair: (pk, sk) ← Gen(1κ)
outputs a signature σ: σ ← Signsk(m)
3) Given a message m, signature σ, and public key pk, the
Verify algorithm outputs a bit b indicating whether the
signature is valid or invalid: b ..= Verifypk(m, σ)
A Digital Signature Scheme satisﬁes two properties:
1) (Correctness) With overwhelmingly high probability, all
valid signatures must verify. Formally, we require that over
(pk, sk) ← Gen(1κ) and all messages m in the message
space,
(cid:4)
(cid:5)
> 1 − negl(κ)
Pr
pk,sk,m
Verifypk(m, Signsk(m)) = 1
2) (Existential Unforgeability) No adversary can forge a
signature for any message with greater than negligible
probability, even if that adversary has seen signatures for
polynomially many messages of its choice. Formally, for
all PPT adversaries A with access to the signing oracle
Signsk(·), where Q is the set of queries A asks the oracle,
(cid:6)
(cid:7)
Verifypk (m, σ) = 1 ∧ m /∈ Q :
(·)
(m, σ) ← ASignsk
(pk)
< negl(κ)
Pr
pk,sk
C. ECDSA
We denote curve points with capitalized variables and scalars
with lower case. Vectors are given in bold and indexed by
The ECDSA algorithm is parameterized by a group G
of order q generated by a point G on an elliptic curve
982
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:37:03 UTC from IEEE Xplore.  Restrictions apply. 
over the ﬁnite ﬁeld Zp of integers modulo a prime p. The
algorithm makes use of a hash function H : {0, 1}∗ (cid:6)→ Zq.
Curve coordinates and scalars are represented in κ = log2(q)
bits, which is also the security parameter. A number of
standard curves with various security parameters have been
promulgated [9]. Assuming a curve has been ﬁxed, the ECDSA
algorithms are as follows [36]:
Algorithm 1. Gen(1κ):
1) Uniformly choose a secret key sk ← Zq
2) Calculate the public key as pk ..= sk · G