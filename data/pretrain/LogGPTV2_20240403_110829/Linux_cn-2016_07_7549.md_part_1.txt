---
author: Gabriel Cánepa
category: 技术
comments_data:
- date: '2016-07-07 13:57:58'
  message: 如果退出状态码是非零值 (即 systemctl status $service 命令中的回显中没有出现 “running”)，则表明某个服务为运行。
  postip: 58.49.9.92
  username: 来自湖北武汉的 Chrome 45.0|Windows 7 用户
- date: '2016-07-07 14:05:05'
  message: 笔误，“未”运行。
  postip: 111.201.9.37
  username: linux [Chrome 50.0|Mac 10.11]
- date: '2016-07-09 19:13:54'
  message: 翻译后没有检查的缘故。。哈哈。
  postip: 175.3.63.7
  username: GHLandy [Chrome 51.0|Windows 10]
count:
  commentnum: 3
  favtimes: 4
  likes: 0
  sharetimes: 0
  viewnum: 6383
date: '2016-07-07 13:26:00'
editorchoice: false
excerpt: 本讲是系列教程中的第十讲，主要集中讲解简单的 Shell 脚本编程和文件系统故障排除。这两块内容都是 LFCS 认证中的必备考点。
fromurl: http://www.tecmint.com/linux-basic-shell-scripting-and-linux-filesystem-troubleshooting/
id: 7549
islctt: true
largepic: /data/attachment/album/201607/07/113131b397oa5083nhier9.png
permalink: /article-7549-1.html
pic: /data/attachment/album/201607/07/113131b397oa5083nhier9.png.thumb.jpg
related:
- displayorder: 0
  raid: 7455
- displayorder: 0
  raid: 7600
reviewer: ''
selector: ''
summary: 本讲是系列教程中的第十讲，主要集中讲解简单的 Shell 脚本编程和文件系统故障排除。这两块内容都是 LFCS 认证中的必备考点。
tags:
- LFCS
thumb: false
title: LFCS 系列第十讲：学习简单的 Shell 脚本编程和文件系统故障排除
titlepic: true
translator: GHLandy
updated: '2016-07-07 13:26:00'
---
Linux 基金会发起了 LFCS 认证 ( Linux 基金会认证系统管理员   （    Linux Foundation Certified Sysadmin    ） )，这是一个全新的认证体系，旨在让世界各地的人能够参与到中等水平的 Linux 系统的基本管理操作的认证考试中去，这项认证包括：维护正在运行的系统和服务的能力、全面监控和分析的能力以及何时向上游团队请求支持的决策能力。
![Basic Shell Scripting and Filesystem Troubleshooting](/data/attachment/album/201607/07/113131b397oa5083nhier9.png)
*LFCS 系列第十讲*
请看以下视频，这里边介绍了 Linux 基金会认证程序。
本讲是系列教程中的第十讲，主要集中讲解简单的 Shell 脚本编程和文件系统故障排除。这两块内容都是 LFCS 认证中的必备考点。
### 理解 终端   （    Terminals    ） 和 Shell
首先要声明一些概念。
* Shell 是一个程序，它将命令传递给操作系统来执行。
* Terminal 也是一个程序，允许最终用户使用它与 Shell 来交互。比如，下边的图片是 GNOME Terminal。
![Gnome Terminal](/data/attachment/album/201607/07/113131fff17ofy1l2qrq7f.png)
*Gnome Terminal*
启动 Shell 之后，会呈现一个命令提示符 (也称为命令行) 提示我们 Shell 已经做好了准备，接受标准输入设备输入的命令，这个标准输入设备通常是键盘。
你可以参考该系列文章的 [第一讲 如何在 Linux 上使用 GNU sed 等命令来创建、编辑和操作文件](/article-7161-1.html) 来温习一些常用的命令。
Linux 为提供了许多可以选用的 Shell，下面列出一些常用的：
**bash Shell**
Bash 代表 Bourne Again Shell，它是 GNU 项目默认的 Shell。它借鉴了 Korn shell (ksh) 和 C shell (csh) 中有用的特性，并同时对性能进行了提升。它同时也是 LFCS 认证中所涵盖的各发行版中默认 Shell，也是本系列教程将使用的 Shell。
**sh Shell**
Bourne SHell 是一个比较古老的 shell，多年来一直都是很多类 Unix 系统的默认 shell。
**ksh Shell**
Korn SHell (ksh shell) 也是一个 Unix shell，是 贝尔实验室   （    Bell Labs    ） 的 David Korn 在 19 世纪 80 年代初的时候开发的。它兼容 Bourne shell ，并同时包含了 C shell 中的多数特性。
一个 shell 脚本仅仅只是一个可执行的文本文件，里边包含一条条可执行命令。
### 简单的 Shell 脚本编程
如前所述，一个 shell 脚本就是一个纯文本文件，因此，可以使用自己喜欢的文本编辑器来创建和编辑。你可以考虑使用 vi/vim (参考本系列 [第二讲 如何安装和使用纯文本编辑器 vi/vim](/article-7165-1.html))，它的语法高亮让我的编辑工作非常方便。
输入如下命令来创建一个名为 myscript.sh 的脚本文件：
```
# vim myscript.sh
```
shell 脚本的第一行 (著名的   释伴行    （    shebang line    ） ) 必须如下：
```
#!/bin/bash   （      ） 
```
这条语句“告诉”操作系统需要用哪个解释器来运行这个脚本文件之后命令。
现在可以添加需要执行的命令了。通过注释，我们可以声明每一条命令或者整个脚本的具体含义。注意，shell 会忽略掉以井号 (#) 开始的注释语句。
```
#!/bin/bash
echo 这是关于 LFCS 认证系列的第十部分
echo 今天是 $(date +%Y-%m-%d)
```
编写并保存脚本之后，通过以下命令来使脚本文件成为可执行文件：
```
# chmod 755 myscript.sh
```
在执行脚本之前，我们需要说一下环境变量 ($PATH)，运行：
```
echo $PATH
```
我们就会看到环境变量 ($PATH) 的具体内容：这是当输入命令时系统所搜索可执行程序的目录，每一项之间使用冒号 (:) 隔开。称它为环境变量，是因为它本是就是 shell 环境的一部分 —— 这是当 shell 每次启动时 shell 及其子进程可以获取的一系列信息。
当我们输入一个命令并按下回车时，shell 会搜索 $PATH 变量中列出的目录并执行第一个知道的实例。请看如下例子：
![Linux Environment Variables](/data/attachment/album/201607/07/113132kzy876lll96yp4bl.png)
*环境变量*
假如存在两个同名的可执行程序，一个在 /usr/local/bin，另一个在 /usr/bin，则会执行环境变量中最先列出的那个，并忽略另外一个。
如果我们自己编写的脚本没有放在 $PATH 变量列出目录中的任何一个，则需要输入 ./filename 来执行它。而如果存储在 $PATH 变量中的任意一个目录，我们就可以像运行其他命令一样来运行之前编写的脚本了。
```
# pwd
# ./myscript.sh
# cp myscript.sh ../bin
# cd ../bin
# pwd
# myscript.sh
```
![Execute Script in Linux](/data/attachment/album/201607/07/113132wwpzxzw3smlwkwvv.png)
*执行脚本*
#### if 条件语句
无论何时，当你需要在脚本中根据某个命令的运行结果来采取相应动作时，你应该使用 if 结构来定义条件。基本语法如下：
```
if CONDITION; then
    COMMANDS;
else
    OTHER-COMMANDS
fi
```
其中，CONDITION 可以是如下情形的任意一项 (仅列出常用的)，并且达到以下条件时返回 true：
* `[ -a file ]` → 指定文件存在。
* `[ -d file ]` → 指定文件存在，并且是一个目录。
* `[ -f file ]` → 指定文件存在，并且是一个普通文件。
* `[ -u file ]` → 指定文件存在，并设置了 SUID 权限位。
* `[ -g file ]` → 指定文件存在，并设置了 SGID 权限位。
* `[ -k file ]` → 指定文件存在，并设置了“黏连 (Sticky)”位。
* `[ -r file ]` → 指定文件存在，并且文件可读。
* `[ -s file ]` → 指定文件存在，并且文件不为空。
* `[ -w file ]` → 指定文件存在，并且文件可写入。
* `[ -x file ]` → 指定文件存在，并且可执行。
* `[ string1 = string2 ]` → 字符串相同。
* `[ string1 != string2 ]` → 字符串不相同。
[ int1 op int2 ] 为前述列表中的一部分 (例如： -eq –> int1 与 int2 相同时返回 true) ，其中比较项也可以是一个列表子项， 其中 op 为以下比较操作符。
* `-eq` –> int1 等于 int2 时返回 true。
* `-ne` –> int1 不等于 int2 时返回 true。
* `-lt` –> int1 小于 int2 时返回 true。
* `-le` –> int1 小于或等于 int2 时返回 true。
* `-gt` –> int1 大于 int2 时返回 true。
* `-ge` –> int1 大于或等于 int2 时返回 true。
#### for 循环语句
循环语句可以在某个条件下重复执行某个命令。基本语法如下：
```
for item in SEQUENCE; do
        COMMANDS;
done
```