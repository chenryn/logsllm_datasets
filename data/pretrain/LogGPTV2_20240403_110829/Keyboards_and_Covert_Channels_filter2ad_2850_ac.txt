out the need to retrieve the bug; the password can even
be sent atop the victim’s own encrypted SSH connection.
In this sense, Keyboard JitterBug can be seen as a
next step in the evolution of keyloggers. The possibil-
1Because the Scarfo case never went to trial, the technology used
by the FBI to capture the keystrokes was never publicly disclosed – it
may have been a JitterBug, although it was more likely a conventional
keylogger. The PGP passphrase of interest turned out to be based on
Mr. Scarfo’s father’s US Prison ID number.
Figure 4: Prototype Keyboard JitterBug
Error correction might also be required if the timing
channel suffers from a lot of noise. However, in the sim-
ple case in which a short encryption key or password
is being leaked, forward error correction is provided in-
herently by repeating the transmission each time it com-
pletes.
5.5 Prototype PIC implementation
We implemented a prototype Keyboard JitterBug on the
Microchip PIC18F series of Peripheral Interface Con-
trollers (PICs). The PIC18F series is a family of 12-bit
core ﬂash programmable microcontrollers. Our source
code is a combination of C and PIC assembly and the
ﬁnal machine code uses less than 5KB program mem-
ory. The implementation works for keyboards that use
the IBM PS/2 protocol. It should be easy to port the code
to other kinds of keyboards, e.g. USB. The bump-in-
the-wire implementation acts as a relay device for PS/2
signals. It derives its power from the PS/2 voltage lines
and hence no additional power source is required. When
enabled, it adds jitters to delay the time at which the
keyboard controller receives notiﬁcation of the keypress.
It also supports programmable triggers (as described in
Section 5.6) that help identify typed sensitive informa-
tion to leak over the covert channel. Figure 4 shows our
PIC-based prototype implementation. A truly surrepti-
tious Keyboard JitterBug would have to be small enough
to conceal within a cable or connector. Since the com-
putational requirements are quite modest here, miniatur-
ization could be readily accomplished through the use of
smaller components or with customized ASIC hardware.
5.6 Attack scenarios
We consider a real and somewhat famous example from
recent news reports that motivated our design. In gath-
ering evidence in the 2000 bookmaking case [3] against
66
Security ’06: 15th USENIX Security Symposium
USENIX Association
ity of such devices raises obvious privacy and security
concerns.
The Keyboard JitterBug implementation can also
serve as the basis for more advanced worms and viruses.
Many newer keyboards are software programmable.
Some of these keyboards even allow their internal
ﬁrmware to be upgraded by software. A malicious
virus program might rewrite the ﬁrmware with a Jitter-
Bug(ged) version and delete itself, effectively avoiding
any form of detection by an antivirus program.
Finally, perhaps the most serious (and also the most
sophisticated to mount) application of the JitterBug is as
part of a Supply Chain Attack. Rather than targeting a
speciﬁc system, the attacker subverts the keyboard sup-
ply and manufacturing process to install such a device in
many keyboards from one or more suppliers, in the hope
that a compromised device will eventually be acquired by
a target of interest. Such an attack seems most plausible
in the context of government espionage or information
warfare, but could also be mounted by an industrial or
individual attacker who manages to compromise a key-
board vendor’s code base.
5.7 Non-interactive network applications
Although the Keyboard JitterBug’s primary application
is for leaking secrets or other information over interactive
network applications, it can also be used in a restricted
setting with very low bandwidth for less interactive net-
work applications. Much network activity has a causal
relationship with speciﬁc keyboard events. This is true
for many commonly used network programs such as web
browsers, instant messengers and email clients.
For IM programs, pressing return after a line of text
causes the message to be sent over a network. In addi-
tion, many IM protocols also send a notiﬁcation to the
other end as soon as the user starts typing another line.
By detecting and manipulating keystroke timings when
such events happen, the Keyboard JitterBug can leak in-
formation. Similarly, typing a URL into a web-browser
typically requires the user to press “return” before the
browser fetches it. The Keyboard JitterBug can manip-
ulate this timing to affect the time at which the URL is
fetched over the network. The relevant “return” when
the jitter should be added can be detected by using a pro-
grammable trigger (e.g. Ctrl-L → URL→ for
Mozilla Firefox). E-mail clients also sometimes use key-
board shortcuts which cause speciﬁc network events (e.g.
sending an e-mail) to occur. By adding jitter to the ap-
propriate keypresses, the timing of these network events
can be manipulated (and observed).
For the above applications, the coupling between key-
board events and network activity make them susceptible
to attacks using the Keyboard JitterBug. The bandwidth
of leakage, however, is signiﬁcantly lower. One advan-
tage they have over SSH from the perspective of the at-
tacker is that many of these applications tend not to use
encryption. This reduces the number of insertion errors
(Section 6.2) by making it easier for the covert channel
receiver to distinguish between normal network packets
and those whose timing was manipulated by the Key-
board JitterBug.
6 Keyboard JitterBug: Evaluation
In this section, our focus is on evaluating the efﬁcacy
of the timing channel under a variety of practical condi-
tions.
6.1 Factors affecting performance
Because the JitterBug is so far removed from its receiver,
many factors affect its performance.
• Buffering: Keyboard buffering affects the delay be-
tween when the key is received by the keyboard
controller and when it is available to the application
that is trying to send the keystroke over the network.
Similarly, network buffering affects the delay be-
tween when the request for sending the packet is re-
ceived by the OS network stack and when it is actu-
ally transmitted over the network. If the variance of
buffering delay (keyboard + network) is high, then
the number of symbol errors increase, reducing the
effective bitrate of the channel.
• OS Scheduling: For a loosely-coupled covert tim-
ing channel, the noise added by OS scheduling de-
pends on a variety of factors including the time
quantum used, the scheduling algorithm, system
load, etc. Fortunately, keyboard and network han-
dling in most modern operating systems is given
high priority and hence, the noise added to the chan-
nel from scheduling effects is usually quite insignif-
icant.
• Nagle’s algorithm: Described in RFC 896 [37],
Nagle’s algorithm is used to handle the small-packet
problem that is caused by the increase in packet
header overhead when interactive network applica-
tions are used as each keystroke is sent in its own
network packet. The algorithm is an adaptive way
of deciding when to buffer data before sending it
out in a single network packet based on the net-
work conditions (latency and bandwidth).
If Na-
gle’s algorithm is enabled it can cause two problems
with the timing channel. Firstly, it creates a varying
network buffering delay that adds noise to the tim-
ing information. Secondly, it can lead to multiple
USENIX Association
Security ’06: 15th USENIX Security Symposium
67
keystrokes being sent out in a single packet. Hence,
the timing information for all but the ﬁrst keystroke
might be lost leading to missing symbols in the tim-
ing channel. Fortunately, Nagle’s algorithm is usu-
ally disabled by default (using the TCP NODELAY
option) for better responsiveness in interactive net-
work applications including most commonly used
SSH client implementations (e.g. OpenSSH). This
means that each keystroke generates it own network
packet that is sent out as soon as possible (assuming
no network congestion).
• Network Jitter: This is the most important factor
for a network timing channel. Network Jitter, i.e.
variability in round trip times (RTT), adds noise to
the timing information and affects the accuracy of
symbol decoding at the receiver. The placement of
the receiver also affects the “observed” network jit-
ter and thus changes the observed channel accuracy.
Encoding a symbol in the timing of two adjacent
packets has a mitigating effect on the channel ac-
curacy as each change in network delay causes a
maximum of one error to occur.
6.2 Sources of Error
The Keyboard JitterBug timing channel can suffer from
three kinds of transmission errors: insertions, deletions
and inversions.
Insertions occur when receiver cannot distinguish be-
tween network packets corresponding to the Keyboard
JitterBug and those corresponding to other network traf-
ﬁc. This will happen when any form of encryption is
being used. Depending on the protocol layer at which
encryption is being applied, the frequency of insertion
errors will be different. The worst case is when link en-
cryption is being used.
In this case, it would be very
hard to separate covert channel packets with that of nor-
mal network trafﬁc, causing insertion errors to happen
all the time. Fortunately, the use of link layer encryption
along the whole path of a network packet on the Internet
is quite rare, so this restriction is not that much of an is-
sue. Encryption at the network or transport layers (e.g.
IPSec, TLS) would also cause signiﬁcant insertion errors
to occur, especially if one of the network applications of
interest use them for communication. Application layer
encryption can cause insertion errors but they are pretty
rare as the visible packet format and size (e.g. SSH)
makes it possible (in most cases) to distinguish packets
of interest from normal network trafﬁc. Finally, if no
encryption is being used (e.g. telnet), then no insertion
errors occur.
Deletion errors are of two kinds. As the Keyboard
JitterBug only has access to keystrokes and no other
system information, it is not possible to distinguish be-
tween when the user is typing inside a network applica-
tion of interest or in other applications running on the
system. The situation can be ameliorated somewhat by
using heuristics to determine when the user is typing in
a network application (e.g. by detecting shell commands
being typed when previously the user opened up a new
ssh connection) and add jitters only then. In cases where
this is not possible, multiple chunks of bits might be lost.
The second kind of deletion errors occur when network
buffering causes multiple keystrokes to be sent in the
same packet. These deletion errors occur less frequently
and typically cause very few symbols to be lost. They
can always be detected when no encryption is being used
(e.g. telnet). For the more general case, an appropriate
framing scheme would be required.
is to leak passwords,
The main application of the Keyboard JitterBug chan-
typed cryptographic keys,
nel
and other such secrets. As these secrets are relatively
short, they can be transmitted repeatedly to increase the
chances that they will be received correctly. Both inser-
tion and deletion errors are, by their nature, bursty. The
redundancy through repetition provides inherent forward
error correction (FEC) to handle them.
Finally, symbol corruption errors are caused by de-
lays that might occur on the sender’s side or in the net-
work while the packet is in transit (due to network jitter).
These errors cause a different symbol to be received than
what was originally sent. For the binary symbol encod-
ing scheme, the errors take the form of bit inversions.
Symbol corruption errors can be handled by using suit-
able error correction coding schemes.
As insertion and deletion errors are very speciﬁc to the
application and environment under which the Keyboard
JitterBug is deployed, we do not focus on them in our
experimental evaluation.
6.3 Experimental Results
We performed various experiments to test the Keyboard
JitterBug under a variety of sender conﬁgurations, net-
work and receiver conditions. The experiments were per-
formed with our bump-in-the-wire implementation of the
Keyboard JitterBug on a PIC microcontoller.
As our covert channel relies on manipulating the tim-
ing of keypresses to piggyback information, the key-
board needs to be in use for the channel to work and be
tested. Instead of manually typing at the keyboard for
each experiment, we built a keyboard replayer for our
controlled experiments. A special mode in the Keyboard
JitterBug allows it to store all keyboard trafﬁc into the
EEPROM for later replay. Then the covert timing chan-
nel can be turned on and the replay information is used
to simulate a real user typing at the keyboard preserving
68
Security ’06: 15th USENIX Security Symposium
USENIX Association
the original user’s keystroke timing information. This
way we can test different Keyboard JitterBug parame-
ters under the same set of conditions. Note that the Key-
board JitterBug is still placed as a relay device between
the keyboard and the computer. The available memory of
the PIC device limits the maximum length of the replay.
When the end of a replay is reached, the JitterBug starts
the replay from the beginning. This does not materially
affect our experiments, since we are concerned only with
the inter-character timing, not the actual text.
Figure 5: Timing Window (ε = w/4) used for binary
symbol decoding in experiments
For all experiments where a pure binary symbol en-
coding is being used, the user-deﬁned tolerance parame-
ter ε = w/4. Figure 5 shows the decoding timing win-
dow used with the bands for ‘0’ and ‘1’.
The source machines used for the experiments were
connected to the LAN network at the Dept. of Com-
puter and Information Science, University of Pennsylva-
nia, Philadelphia. The source machines ran Linux 2.4.20
(unless otherwise noted). All network connections were
made via a 100Mbps switch. As we are interested in
ﬁnding how well the Keyboard JitterBug performs un-
der a range of different network conditions, we used the
PlanetLab network [12] to test our covert network timing
channel using various geographically displaced nodes.
Interactive SSH terminal sessions were initiated between
the source and destination nodes. All measurements of
the timing information for the covert channel were per-
formed at the destination host using tcpdump. Using
the time of arrival of network packets at the destination
host gives us a worst case estimate of the channel per-
formance. In practice, the covert channel receiver can be
placed anywhere in the path of the network packets. The
channel is conﬁgured to send an ASCII encoded string.
The standard measure of the performance of channel
under the presence of noise is the bit error rate (BER)
[40]. For channels with bit slips2, due to the possibil-
ity of bit loss, this metric cannot directly be used. For
the Keyboard JitterBug, as network buffering can cause
more than one keystroke to be sent in each packet, there
is potential for missing bits leading to synchronization
2In general, the lack of synchronization might occur for various
other reasons, such as the lack of buffer space, variation in clock rate,
etc.
errors. Therefore, while measuring raw channel perfor-
mance (without framing or error correction), the tradi-
tional deﬁnition of bit error rate based on the Hamming
Distance metric cannot be used. Instead, we use Leven-
shtein Distance, also called the edit distance to get the
raw bit error rate. Here, an error constitutes inversion or
deletion of bits. The edit distance is a measure of similar-
ity of two strings and is equal to the number of insertions,
deletions, and substitutions needed to convert the source
string (bits received) into the target string (bits sent).
While measuring channel performance with framing,
the bit error rate is calculated using the Hamming Dis-
tance metric for correctly received frames. For frames
discarded because of framing errors, all the data bits (of
the frame) are assumed to have been in error. Because
of framing, the receiver can detect and recover from bit
deletions and synchronize itself with the covert chan-
nel data stream. For evaluating the performance of the
channel with framing, three parameters are calculated:
Net BER (EC), Average Correct Frame BER (ECF ) and
Frame Discard Rate (EDF ). Net BER measures the total
fraction of bits that are lost or corrupted due to bit errors
within a frame or framing errors caused due to corrup-
tion of the Frame Sync Sequence or delimiter. Framing
errors cause whole frame(s) to be discarded leading to
the loss of all bits they contain. These bit errors (equal
to the frame size) are included in the calculation for Net
BER. Average Correct Frame BER is the average BER
only for the frames that were successfully decoded (with-
out framing errors). Therefore, bits lost due to framing
errors are not accounted for in calculating the Average
Correct Frame BER. The suitable error correction cod-
ing scheme to use would depend on this measure. Frame
Discard Rate is a measure of the frequency with which
frames get dropped or lost due to framing errors. It is
easy to see that:
EC = ECF + EDF − ECF EDF
6.3.1 Window Size and RTT
Table 1 summarizes the measured raw BER of the covert
network timing channel for six different nodes on the
PlanetLab network using different window sizes. These
nodes were chosen based on their wide ranging geo-
graphical distances from the source host and different
network round-trip times.
The raw BER is the channel performance without the
use of any error correction coding or framing. As the
calculation of the raw BER metric uses the edit distance
metric, the error rates also consider bit deletions and in-
sertions in addition to inversions. The notion of accept-
able raw channel performance would depend on a vari-
ety of factors including the framing mechanism used, the
application, and the capability of error correction codes.
USENIX Association
Security ’06: 15th USENIX Security Symposium
69
w/4w/2w/4Decode as 0Decode as 1Node
ColumbiaU (NYC, NY)
UKansas (Lawrence, KS)
UUtah (Salt Lake City, UT)
UCSD (San Diego, CA)
ETHZ (ETH, Zurich)
NUS (Singapore)
RTT
6 ms