                                                    }
                                                    methodVisitor.visitMethodInsn(
                                                            Opcodes.INVOKESTATIC, Agent.class.getName().replace(".", "/"), "expression", "(Ljava/lang/String;)V", false
                                                    );
                                                }
                                            };
                                        }
                                        return methodVisitor;
                                    }
                                };
                                classReader.accept(classVisitor, ClassReader.EXPAND_FRAMES);
                                classfileBuffer = classWriter.toByteArray();
                            }catch (Throwable t) {
                                t.printStackTrace();
                            }
                        }
                    }
                    return classfileBuffer;
                }
            });
        }
        public static void expression(String exp_demo) {
            System.err.println("---------------------------------EXP-----------------------------------------");
            System.err.println(exp_demo);
            System.err.println("---------------------------------调用链---------------------------------------");
            StackTraceElement[] elements = Thread.currentThread().getStackTrace();
            for (StackTraceElement element : elements) {
                System.err.println(element);
            }
            System.err.println("-----------------------------------------------------------------------------");
        }
    }
这里采用的是流式写法，没有将其中的`ClassFileTransformer`抽出来。
整个流程简化如下：
  * 根据`className`来判断当前agent拦截的类是否是需要hook的类，如果是，则直接进入ASM修改流程。
  * 在`ClassVisitor`中调用`visitMethod`方法去访问hook类中的每个方法，根据方法名判断当前的方法是否是需要hook的方法，如果是，则调用`visitCode`方法在访问具体代码时获取方法的相关参数（这里是获取表达式），并在执行逻辑中插入`expression`方法的调用，在运行时将执行流经过新添加的方法，就可以打印出表达式以及调用链了。
效果如下：
##### 3.3.2 agentmain模式例子
下面用一个我自己写的例子来说一下如何利用agentmain模式增加执行流。
> AgentMain.java
    public class AgentMain {
        public static void agentmain(String agentArgs, Instrumentation inst) throws UnmodifiableClassException {
    //        for (Class clazz : inst.getAllLoadedClasses()) {
    //            System.out.println(clazz.getName());
    //        }
            CustomClassTransformer transformer = new CustomClassTransformer(inst);
            transformer.retransform();
        }
    }
> CustomClassTransformer.java
    public class CustomClassTransformer implements ClassFileTransformer {
        private Instrumentation inst;
        public CustomClassTransformer(Instrumentation inst) {
            this.inst = inst;
            inst.addTransformer(this, true);
        }
        @Override
        public byte[] transform(ClassLoader loader, String className, Class classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {
            System.out.println("In Transform");
            ClassReader cr = new ClassReader(classfileBuffer);
            ClassWriter cw = new ClassWriter(cr, ClassWriter.COMPUTE_MAXS);
            ClassVisitor cv = new ClassVisitor(Opcodes.ASM5, cw) {
                @Override
                public MethodVisitor visitMethod(int i, String s, String s1, String s2, String[] strings) {
    //                return super.visitMethod(i, s, s1, s2, strings);
                    final MethodVisitor mv = super.visitMethod(i, s, s1, s2, strings);
                    if ("say".equals(s)) {
                        return new MethodVisitor(Opcodes.ASM5, mv) {
                            @Override
                            public void visitCode() {
                                super.visitCode();
                                mv.visitFieldInsn(Opcodes.GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;");
                                mv.visitLdcInsn("CALL " + "method");
                                mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/String;)V", false);
                            }
                        };
                    }
                    return mv;
                }
            };
            cr.accept(cv, ClassReader.EXPAND_FRAMES);
            classfileBuffer = cw.toByteArray();
            return classfileBuffer;
        }
        public void retransform() throws UnmodifiableClassException {
            LinkedList retransformClasses = new LinkedList();
            Class[] loadedClasses = inst.getAllLoadedClasses();
            for (Class clazz : loadedClasses) {
                if ("com.lucifaer.test_agentmain.TestAgentMain".equals(clazz.getName())) {
                    if (inst.isModifiableClass(clazz) && !clazz.getName().startsWith("java.lang.invoke.LambdaForm")) {
                        inst.retransformClasses(clazz);
                    }
                }
            }
        }
    }
可以看到`agentmain`模式和`premain`的大致写法是没有区别的，最大的区别在于
**如果想要利用agentmain模式来对运行后的类进行修改，需要利用Instrumentation.retransformClasses方法来对需要修改的类进行重新转换**
。
想要`agentmain`工作还需要编写一个方法来利用Attach API来动态启动agent：
    public class AttachAgent {
        public static void main(String[] args) throws IOException, AttachNotSupportedException, AgentLoadException, AgentInitializationException {
            List list = VirtualMachine.list();
            for (VirtualMachineDescriptor vmd : list) {
                if (vmd.displayName().endsWith("TestAgentMain")) {
                    VirtualMachine virtualMachine = VirtualMachine.attach(vmd.id());
                    virtualMachine.loadAgent("/Users/Lucifaer/Dropbox/Code/Java/agentmain_test/out/artifacts/agentmain_test_jar/agentmain_test.jar", "Attach!");
                    System.out.println("ok");
                    virtualMachine.detach();
                }
            }
        }
    }
效果如下：
##### 3.3.3 agentmain坑点
这里有一个坑点也导致没有办法在`agentmain`模式下动态给一个类添加一个新的方法，如果尝试添加一个新的方法就会报错。下面是我编写利用`agentmain`模式尝试给类动态增加一个方法的代码：
    public class DynamicClassTransformer implements ClassFileTransformer {
        private Instrumentation inst;
        private String name;
        private String descriptor;
        private String[] exceptions;
        public DynamicClassTransformer(Instrumentation inst) {
            this.inst = inst;
            inst.addTransformer(this, true);
        }
        @Override
        public byte[] transform(ClassLoader loader, String className, Class classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {
            System.out.println("In transformer");
            ClassReader cr = new ClassReader(classfileBuffer);
            ClassWriter cw = new ClassWriter(cr, ClassWriter.COMPUTE_MAXS);
            ClassVisitor cv = new ClassVisitor(Opcodes.ASM5, cw) {
                @Override
                public MethodVisitor visitMethod(int i, String s, String s1, String s2, String[] strings) {
                    final MethodVisitor mv = super.visitMethod(i, s, s1, s2, strings);
                    if ("say".equals(s)) {
                        name = s;
                        descriptor = s1;
                        exceptions = strings;
                    }
                    return mv;
                }
            };
    //        ClassVisitor cv = new DynamicClassVisitor(Opcodes.ASM5, cw);
            cr.accept(cv, ClassReader.EXPAND_FRAMES);
            MethodVisitor mv;
            mv = cw.visitMethod(Opcodes.ACC_PUBLIC, "say2", "()V", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(23, l0);
            mv.visitFieldInsn(Opcodes.GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;");
            mv.visitLdcInsn("2");
            mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/String;)V", false);
            Label l1 = new Label();
            mv.visitLabel(l1);
            mv.visitLineNumber(24, l1);
            mv.visitInsn(Opcodes.RETURN);
            Label l2 = new Label();