of necessit of this assumption are presented in the security
analysis and discussion section. Note that preserving access
pattern, i.e., the list of returned ﬁles, is extremely expensive
since the algorithm has to touch the whole ﬁle set [21]. We
do not aim to protect it in this work for efﬁciency concerns.
3) Design Goals: To enable secure ranked multi-keyword
search in the multi-owner and multi-user cloud environment,
our system design should simultaneously satisfy security and
performance goals.
• Ranked Multi-keyword Search over Multi-owner: The
proposed scheme should allow multi-keyword query over
encrypted ﬁles which would be encrypted with different
keys for different data owners. It also needs to allow
278278278
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:02:58 UTC from IEEE Xplore.  Restrictions apply. 
cloud server to sort the search results among different
data owners and return the top-k results.
• Privacy preserving: The proposed scheme should pre-
vent the cloud server from knowing the actual value of the
encrypted ﬁles, keywords, the encoded relevance scores
and user issued trapdoors.
• Data owner scalability: The proposed scheme should
allow new authorized data owners to enter this system
without affecting other data owners or data users, i.e.,
the scheme should support data owner scalability in a
plug-and-play model.
4) Notations:
• O: the data owner collection, denoted as a set of m data
owners O = (O1, O2, . . . , Om).
• Fi: the plaintext ﬁle collection of Oi, denoted as a set of
n data ﬁle Fi=(Fi,1, Fi,2,. . . ,Fi,n).
• Ci:
the ciphertext ﬁle collection of Fi, denoted as
Ci=(Ci,1, Ci,2,. . . ,Ci,n).
• W: the keyword collection, denoted as a set of u key-
• (cid:2)
words W = (w1, w2, . . . , wu).
(cid:2)Wi = ((cid:3)wi,1, (cid:3)wi,2, . . . , (cid:3)wi,u).
Wi: the encrypted keyword collection of Oi, denoted as
• (cid:4)W: the subset of W which represents queried keywords.
• T
(cid:2)W =
• Si,j,t: the relevance score of tth keyword to jth ﬁle of ith
for (cid:4)W, denoted as T
(cid:2)W:
trapdoor
(Tw1 , Tw2 , . . . , Twq ).
the
data owner.
IV. LOCATING DIFFERENT-KEY ENCRYPTED KEYWORDS
Numerous data owners are often involved in practical cloud
applications. For privacy concerns, they would be reluctant
to share secret keys with others. Instead, they prefer to use
their own secret keys to encrypt their sensitive data (keywords,
ﬁles). When keywords of different data owners are encrypted
with different secret keys, the coming question is how to locate
different-key encrypted keywords among multiple data owners.
In this section,
to enable secure, efﬁcient and convenient
search over encrypted cloud data owned by multiple data
owners, we systematically design schemes to achieve the fol-
lowing requirements. First, different data owners use different
secret keys to encrypt
their keywords. Second, authorized
data users can generate their trapdoors without knowing these
secret keys. Third, upon receiving trapdoors from data users,
the cloud server can ﬁnd the corresponding keywords from
different data owners’ encrypted keywords without knowing
the actual value of keywords or trapdoors. Let G be a
multiplicative group of order p, p is a large prime number
and g is the generator of G. We assume G, g, p are public.
Similar to other cryptographic protocols, our schemes are also
designed based on the assumption that the discrete logarithm
problem in large prime order cyclic group is difﬁcult.
A. KeyGen
In our scheme, each data owner has its own private keys to
encrypt both ﬁles and keywords. The KeyGen is a randomized
key generation algorithm. Each data owner takes a secret
parameter λi as input, and KeyGen outputs private keys:
ki,f , ki,w ← (0, 1)
λi, where ki,w and ki,f are the private keys
used to encrypt keywords and ﬁles of Oi respectively.
B. Keyword Set Generation
In order to make encrypted ﬁles searchable, additional
information should be attached to each encrypted ﬁle, e.g., the
encrypted keywords extracted from these ﬁles. In our scheme,
the hth keyword of Oi : wi,h is encrypted as follows:
(cid:5)
(cid:6)
g(1+r·ki,w)·Hs(wh) mod p,
gr·ki,w·Hs(wh) mod p
Hc
(cid:7) (cid:8)
(cid:9)
ˆwh,j =
(1)
where Hc(·) is a public hash function, r is a random pa-
rameter which helps enhance the security of our scheme, while
Hs(·) is the aforementioned secret hash function shared among
data owners and authorized data users. Note that, different data
owners have different ki,w, thus the same keyword would be
encrypted to different cipher-text. This property beneﬁts our
scheme for two reasons. First, the cloud server cannot see any
relationship among encrypted keywords. Second, losing the
key of one data owner wouldn’t lead to disclosure of other
owners’ data.
C. Trapdoor Generation
To maximally relax the requirements for data users to
generate trapdoors, the proposed scheme should satisfy a key
condition, i.e., once an authorized data user wants to search
data of large amounts of data owners, he doesn’t need to ask
all these data owners for keys to generate trapdoors, instead,
he can generate the trapdoor conveniently by himself. To meet
this condition, our trapdoor is generated as follows:
where wh(cid:2) is a queried keyword in (cid:4)W and
Twh(cid:2) =
mod p
g
Hs(wh(cid:2) )
mod
p means the modular multiplicative inverse of gHs(wh(cid:2) ) mod p.
D. Locating Keywords among Different Data Owners
gHs(wh(cid:2) )
(2)
(cid:7)−1
Cloud server stores all encrypted ﬁles and keywords of
different data owners. Upon receiving a query from data user,
the cloud will search over data of all these data owners. The
cloud processes the search request in two steps. First, the cloud
locates the queried keywords from all keywords stored on it
and gets a candidate ﬁle set. Second, the cloud ranks ﬁles in
the candidate ﬁle set and ﬁnds the most top-k relevant ﬁles.
We introduce the locating strategy here while leaving the task
of introducing the ranking strategy in next section. When the
cloud obtains data user issued trapdoor Twh(cid:2) and data owner
submitted encrypted keywords (cid:3)wi,h, he can judge wh(cid:2) = wi,h
(cid:8)
(i.e., an encrypted keyword is located) holds if the following
equation is true.
(cid:5)
(cid:9)
(cid:10)−1
(1+r·ki,w)·Hs(wh)
Hs(wh(cid:2) )
mod p
g
(cid:10)−1
(cid:6)
(cid:10)
mod p ·
H
g
(cid:9)
= H
g
279279279
r·ki,w·Hs(wh)
mod p
(3)
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:02:58 UTC from IEEE Xplore.  Restrictions apply. 
V. PRIVACY PRESERVING RANKED SEARCH
The aforementioned section helps the cloud locate the
queried keywords precisely and the cloud will obtain a candi-
date ﬁle set. However, we cannot simply return undifferential
ﬁles to data users for the following two reasons. First, return-
ing all candidate ﬁles would cause abundant communication
overhead for the whole system. Second, data users would only
concern top-k relevant ﬁles corresponding to their queries.
Thus, the coming question is how to return the top-k relevant
ﬁles in a privacy preserving way. In this section, ﬁrst, we
present our proposed order and privacy preserving encoding
scheme. Then we introduce an additive order preserving and
privacy preserving encoding scheme, Finally, we apply the
proposed scheme to encode the relevance scores and rank the
top-k relevant ﬁles.
A. Order and Privacy Preserving Function
In this subsection, we introduce how to design an order
and privacy preserving function which can be used to rank
the relevance score while preserving its privacy. This function
should satisfy the following conditions. 1) This function
should preserve the order of data, this helps the cloud server
determine which ﬁle is more relevant to a certain keyword
according to the encoded relevance scores. 2) Different data
owners should have different functions such that revealing the
encoded value of a data owner wouldn’t lead to the leakage
of encoded values of other data owners. 3) This function
should not be revealed by the cloud server so that cloud server
can make comparison on encoded relevance score without
knowing their actual value. In order to satisfy condition 1, we
introduce a data processing part m(x,·) , which preserves the
order of x. To satisfy condition 2, we introduce n(y,·), which
processes the ID of data owners. To satisfy the condition 3,
we introduce a disturbing part rf which helps prevent cloud
server from revealing this function. So this function belongs
to the following function family:
y
oppf (x) =
F
Aj,k · m(x, j) · n(y, k) + rf
(4)
where τ denotes the degree of F
y
oppf (x) and Aj,k denotes
the coefﬁcients of m(x, j) · n(y, k). For easy description, we
let m(x, j) and n(y, k) be the same function, so the order and
privacy preserving function family is deﬁned as:
y
oppf (x) =
F
Aj,k · m(x, j) · m(y, k) + rf
(cid:11)
0≤j,k≤τ
(cid:11)
0≤j,k≤τ
1
x
⎧⎪⎨
⎪⎩
We deﬁne m(x, j) as follows:
m(x, j) =
(m(x, j − 1) + α · x) · (1 + λ)
Where α and λ are two constant numbers.
Now we introduce how to set
(cid:16)
the disturbing part rf .
0≤j,k≤τ Aj,k · (m(x + 1, j) − m(x, j)) · m(y, k) ≥
Since
(5)
(6)
j = 0
j = 1
j > 1



[
I[

(
+
.
1
 4 (.( .+1 1
Fig. 2: An example of Order Preserving and Privacy Preserving
Function(cid:16)
(cid:16)
0≤j,k≤τ Aj,k · ((1 + λ)
0≤j,k≤τ Aj,k · ((1 + λ)
(cid:16)
Let
0≤j,k≤τ Aj,k · ((1 + λ)
we can set rf ∈ (0, 2l−1).
Obviously, ∀x1 > x2, we have F
+ α ·(cid:16)
+ α ·(cid:16)
+ α ·(cid:16)
integer
j−1
j−1
j−1
be
an
l
such
1≤i≤j−2 (1 + λ)) · m(y, k) ≥
1≤i≤j−2 (1 + λ)).
≤
2l−1
1≤i≤j−2 (1 + λ)) ≤ 2l,
that
y
oppf (x1) > F
y
oppf (x2).
B. Additive Order and Privacy Preserving Function
As we all know, an order and privacy preserving function
ensures that: if x1 > x2, then y1 > y2. However, if x1 + x2 >
x3 + x4, the function can’t ensure y1 + y2 > y3 + y4. In
another word, the addition of the function is not necessarily
order preserving.
An example is presented in Fig. 2. Obviously, f (x) is
order preserving, to preserve privacy, some disturbing part is
introduced. As we can see, f (1) + f (5) varies from 5200 to
8000, f (1) + f (4) varies from 4400 to 6000, f (2) + f (3)
varies from 3100 to 6000. Though 1 + 5 > 1 + 4 and
1 + 5 > 2 + 3, it is probable for f (1) + f (5)  3rimax. (4) ˜Δf (xi+1)  xm + xn), we have yp + yq > ym + yn.
Proof: Without
loss of generality, we assume xp >
xq, xm > xn, then we can divide the proof into four main
cases (other conditions can be easily transformed and adapted
to these cases):
(1) xp > xq > xm > xn: obviously, since function yi is order
preserving, we know yp > yq > ym > yn. Therefore we have
yp + yq > ym + yn.
(2) xp > xm > xq > xn: clearly, yp > ym > yq > yn, so it’s
easy to deduce that yp + yq > ym + yn.
(3) xp > xm > xn > xq:
f (p) − f (m) = (f (p) − f (p − 1)) + (f (p − 1) − f (p − 2))
+ . . . + (f (m + 1) − f (m))
= Δf (p − 1) + Δf (p − 2) + ··· + Δf (m)
Since Δf (xi) ≥ Δf (xi−1), we have
f (p) − f (m) ≥ (p − m) · Δf (m)
Similarly, we can get
f (n) − f (q) ≤ (n − q) · Δf (n) ≤ (n − q) · Δf (m)
f (q) − f (n) ≥ (q − n) · Δf (m)
Therefore
f (p) − f (m) + f (q) − f (n)
≥ (p − m + q − n) · Δf (m)
(8)
(9)
(10)
(11)
Since p + q > m + n and p, q, m, n are positive integers,
we have p − m + q − n ≥ 1.
(cid:7)
Therefore
(cid:6)
f (p) + f (q) ≥ f (m) + f (n) + Δf (m)
(cid:6)
(cid:7)
>
+
f (n) + rnmax
f (m) + rmmax
(12)
Since min{yp} = f (p), min{yq} = f (q) and max{ym} =
f (m) + rmmax, max{yn} = f (n) + rnmax. Therefore yp +
yq > ym + yn holds.
(4) xm > xp > xq > xn: Similar to the proof in case 3, we
can easily get
f (m) − f (p) ≤ (m − p) · Δf (n)