have identiﬁed an input (i.e., a piece of information that was
stolen). By repeating this process, we can recover, step by
step, the complete input that was recorded by the keylogger.
B. Implementation Details
Inverting gadgets consists of two basic tasks: Extracting
source-sink dependencies and evaluating input candidates.
1) Extracting Dependencies: During the dynamic anal-
ysis phase, we perform detailed taint tracking and record
all dependencies between two labels. This enables us now
to keep track of how a given sink is inﬂuenced by sources
(i.e., what input bytes have an impact on a given output
byte). The output of this ﬁrst task is a mapping between
source and sink bytes of a gadget.
2) Evaluating Input Candidates: The task of ﬁnding
acceptable input candidates is implemented using a small
helper application, the brute-forcer, and an extension to the
gadget player.
Using the mapping ﬁle from the ﬁrst step, the brute-forcer
implements the generation of the set of input candidates as
explained earlier. Additionally, it determines the sequence
in which the output bytes will be checked. Then, starting
with the ﬁrst output byte, each possible input candidate is
evaluated by calling the gadget player.
The gadget player is extended as follows: Each call
to the environment interface can be handled by a chain
of optional interceptor components. Each interceptor has
the ability to inspect incoming function calls, and modify
outgoing function arguments. It can also decide to call
the next interceptor (or if there is none, the environment
interface). Our implementation of the brute-force component
is based on such an interceptor: On start-up, the brute-forcer
initializes the interceptor with the current candidate inputs
to provide to the gadget, and it registers all values it should
check on incoming call arguments. During gadget execution,
the interceptor keeps track of all function calls made by
the gadget, and checks for input or output parameters in its
list of monitored arguments. For each monitored outgoing
parameter, the parameter value is overwritten with the pro-
vided candidate value. If the interceptor ﬁnds a monitored
incoming argument, it examines the parameter’s content. If
a mismatch to the expected parameter is found, execution
aborts and signals an error. Otherwise, call handling is
delegated to the next interceptor. Once the interceptor has
successfully veriﬁed all provided input arguments, it exits
signaling successful execution.
With this extension, the extracted gadgets and the gadget
player can be used in the inversion process without any
modiﬁcation. Once the interceptor has signaled successful
execution to the brute-forcer for all output bytes, we have
successfully inverted a gadget computation.
C. Inversion Applicability
A critical factor of our gadget inversion – as in every
brute-forcing system – is related to the size of the input
candidate set. If the number of candidate inputs |Co| that
must be evaluated for a certain output byte o is very
large, the time to identify an appropriate input set quickly
becomes unmanageable. Likewise, the time necessary for
ﬁnding an acceptable candidate for each output byte grows
exponentially with the number of shared dependent inputs.
In order to assess the feasibility of inversion in different
scenarios, consider the following three examples:
Base64 Encoding: In Base64 encoding (i.e., a speciﬁc
type of MIME encoding), the set of input bytes is trans-
formed into a base64 representation. According to RFC
2045, this is computed as follows: “A 24-bit input group
is formed by concatenating 3 8-bit input groups. These 24
bits are then treated as 4 concatenated 6-bit groups, each
of which is translated into a single digit
in the base64
alphabet.” [24].
The input for each step consist of three bytes (= 24 bits).
For the computation, this is split into smaller parts of six bits
each. Therefore, the set of input bytes is at most two i1,2,
which is then transformed into one byte of printable output
o1. With |Co| = 65536 and max(|D(o,p)|) = 1,∀(o, p) ∈ O,
gadget inversion is trivially possible.
XOR Encryption: When using XOR encryption, the
computation is rather simple: One byte of input is xor-ed
with one byte of the key to obtain one byte of output. Given
that the key is known (e.g., it is statically encoded in the
gadget), |Co| = 256 and D(o,p) = ∅,∀(o, p) ∈ O, gadget
inversion is even simpler than in the Base64 encoding exam-
ple. If the key is part of the inversion input (e.g., it is part of
the data received over the network) the algorithm will start
with max(|D(o,p)|) = 1,∀(o, p) ∈ O and |Co| = 65536.
However, after the ﬁrst n candidates have been found (where
n is the size of the key), the dispute candidates decrease the
size of the input set to the previous case. This is because
the algorithm has “found” the key to use.
Strong Encryption: For gadgets relying on strong en-
cryption schemes such as RSA, the inversion fails with
growing sizes of the output n. Since every output byte
depends on all bytes of the key and input, |Co| = 256n
and |D(o,p)| ≈ n,∀(o, p) ∈ O make inversion impossible
for large n.
Based on these examples, we can see that in the general
case the following holds for the set of candidate inputs:
|Co| ≤ 256max(|D(o,p)|)+1,∀p ∈ O
This indicates that we can only perform brute-forcing if and
only if |D(o,p)| is small since else the computational effort
to try all possible inputs quickly becomes intractable.
D. Possible Extensions
We have integrated the brute-forcing approach into IN-
SPECTOR and can use it to invert certain computations of
gadgets as we explain in the next section. In the future, we
plan to improve the current approach as follows.
In addition to the source-sink dependencies, INSPECTOR
also knows all instructions that modify the source data into
sinks. Thus, we can perform symbolic execution to limit the
search space, or we can – for simple transformation algo-
rithms – even extract algebraic formulae. These formulae
could be analyzed with a constraint solver to circumvent
the costly input brute-forcing. However, brute-forcing is
general and can also be used for encoding and encryption
algorithms that cannot be stated as a compact formula, we
opted against the solver approach. Moreover, as INSPECTOR
can identify all dependencies that can be solved easily,
a hybrid approach, combining a constraint solver and the
brute-forcing approach, could yield better results. In this
hybrid model, INSPECTOR could ﬁrst solve all possible
inputs, minimizing the number of parameters that need to
be guessed.
Another possible improvement of the current approach
would be through input parallelization: We can combine
the set of independent output bytes (i.e., elements that do
not contain common source-sink dependencies) and check
multiple input candidates within a single gadget invocation.
In practice, this improvement applies to many real-world
scenarios: Most encoding, as well as simple obfuscation
gadgets could be inverted signiﬁcantly faster.
VI. EVALUATION
In order to demonstrate the feasibility of our approach,
we generated gadgets in six case studies that involved well-
known real-world malware from four different families. Our
experiments show that we can reliably extract gadgets from
a variety of samples in versatile ways. We chose these case
studies because they cover the typical tasks that a malware
security analyst would be interested in.
Table I summarizes various properties of the extracted
gadgets. In particular, we can see that all but one exe-
cutable used for the evaluation were packed. This shows that
INSPECTOR can indeed handle state-of-the-art, obfuscated
malware samples. Further, one can see that
the gadget
extraction was able to extract rather concise code snippets,
eliminating most of the original executable’s instructions
during the closure analysis.
A. Domain Flux: Conﬁcker
Bot families such as Torpig [6] and Conﬁcker [25] employ
the technique of domain ﬂux to hinder the tracking of the
communication channel between a bot and the attacker.
With domain ﬂux, using a proprietary algorithm, each bot
instance periodically generates a list of domains that are
used for obtaining commands from the attacker. The bot
then contacts a subset of these domains until it ﬁnds an active
domain (that has been registered by the attacker) from which
it can receive commands. We are interested in extracting
the domain generation algorithm (DGA) such that we can
compute the set of domains used by a bot on a given date.
In our experiments, we studied Conﬁcker.A since it em-
ploys the technique of domain ﬂux to regularly generate a
new set of domains that are contacted by the malware binary
for updates. The malware implements the algorithm shown
in Figure 2a in order to generate 250 domains. Note that all
known details about the DGA were published in a paper by
Porras et al. [25], who had to manually analyze the sample.
There exist two parts of the report that are relevant for our
analysis. First, Conﬁcker contacts a remote HTTP server in
the function get_date_from_url to obtain the current
timestamp. Hence, an analyst cannot modify the local clock
to trick the binary into generating domains for a particular
date. Whereas an analyst could still change the timestamp
in the HTTP reply, in the future, such an approach could
potentially be complicated by the malware by switching to
an SSL-based protocol instead of a cleartext one. Second,
the function to actually generate domains contains ﬂoating
point operations (that are supported by INSPECTOR).
The output of the extraction and preparation process is a
fully-functional gadget. The gadget includes all code related
to the DGA, and we depict the data dependency graph in
Figure 2b. The automatically extracted algorithm closely
matches the manual analysis results shown in Figure 2a.
Note that our gadget does not include a date check: Since the
alternative path was not taken during the dynamic analysis
phase, it is excluded in the preparation phase. The gray boxes
depict taint information, where the bold text indicates that
this input inﬂuences the actual computation of the DGA.
Note that we do not need to understand the algorithm: We
can simply treat it as a black box to generate the current
set of ﬂux domains used by Conﬁcker. When executing
In order to analyze Conﬁcker, we ﬁrst execute the sample
within our analysis environment. After sleeping for 30
minutes, Conﬁcker starts the DGA, and once the algorithm
has been completed, it begins to resolve domains to also
contact remote servers.
At this point, we can stop the execution, and begin to
automatically extract the gadget. Since we are interested in
the DNS activity, the ﬂow position with which we start
is a call to the function gethostbyname. From there
on, INSPECTOR performs backward slicing based on all
the collected log ﬁles, and identiﬁes the code related to
this function call. The tool recursively examines all code
locations which inﬂuence the chosen ﬂow position, and
extract all relevant code together with the necessary data.
OVERVIEW OF GADGETS EXTRACTED BY INSPECTOR.
Table I
Sample
Gadget
Conﬁcker
Pushdo
Cutwail
URLZone
Domain Flux
Binary Update
Spam Template
Conﬁguration
# Instructions
extracted1
385 (511)
926 (1410)
2091 (3575)
1036 (1430)
# Functions
extracted
# API function
references
Contains dynamically
unpacked code
8
15
51
27
23
19
19
17
yes
no
yes
yes
(a) Logic behind Conﬁcker’s domain generation algo-
rithm (based on manual analysis [25]).
(b) Excerpt from Conﬁcker’s data dependency graph for domain generation algorithm
(automatically generated by INSPECTOR, annotated for presentation).
Figure 2. Analysis results for Conﬁcker’s domain generation algorithm.
the extracted gadget in the player, the gadget outputs the
current set of 250 domains. An additional advantage of our
gadget is that it does not need to sleep for 30 minutes before
starting the DGA. In contrast, it immediately begins with the
computation and outputs the results.
To verify that our gadget correctly generates domains, we
compared its output with the output of a human-generated
tool that is based on manual analysis of the binary [7]. In
all tests on 16 different days, our tool correctly computed
the set of domains.
The gadget also enables an analyst to compute a set of
domains for an arbitrary date, even one that lies in the future.
As shown in Figure 2b in bold, INSPECTOR can extract
which bytes are relevant for the computation of the DGA.
In this speciﬁc case study, these are nine bytes related to
a timestamp that are extracted from the HTTP response.
Based on this information, an analyst can then implement
a callback or an interceptor component in the environment
1To facilitate handling of jump targets, the current implementation of
INSPECTOR tries to preserve a function’s structure whenever possible.
Thus, instructions excluded from a gadget’s code body are replaced by
no-operation instructions (NOPs). Table I shows number of non-NOP
instructions (number of all instructions are given in brackets).
interface that returns a different timestamp. As a result,
the gadget performs the DGA for a different timestamp,
effectively computing the set of ﬂux domains for an arbitrary
date. The callback interface in the environment interface,
hence, eases the analyst’s job and the analyst is able to adjust
the gadget to her requirements.
B. Fetching Binary Updates: Pushdo
A common task that is implemented by malware instances
is an update mechanism. That is, the malware downloads an
arbitrary binary executable from the network, decodes it, and
then executes this ﬁle. In fact, we have used this common
mechanism as our running example throughout the paper.
In this case, we wish to recover the decoded binary
executable. Therefore, we extract from the given malware
binary a gadget