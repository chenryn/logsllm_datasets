将同余式改写为等式，有：
    s2 - (s1 * m + c) = k1 * n
    s3 - (s2 * m + c) = k2 * n
    s4 - (s3 * m + c) = k3 * n
    s5 - (s4 * m + c) = k4 * n
设`t_i = s_(i+1) - s_i`，有：
    t1 = s2 - s1
    t2 = s3 - s2 = (s2 * m + c) + k2 * n - (s1 * m + c) - k1 * n = (s2 - s1) * m + (k3 - k2) * n = t1 * m + A * n
    t3 = s4 - s3 = (s3 * m + c) + k3 * n - (s2 * m + c) - k2 * n = (s3 - s2) * m + (k4 - k3) * n = t2 * m + B * n
    t4 = s5 - s4 = (s4 * m + c) + k4 * n - (s3 * m + c) - k3 * n = (s4 - s3) * m + (k5 - k4) * n = t3 * m + C * n
即：
    t2 ≡ t1 * m (mod n)
    t3 ≡ t2 * m (mod n) ≡ t1 * m^2 (mod n)
    t4 ≡ t3 * m (mod n) ≡ t1 * m^3 (mod n)
此时有：
    (t2 * t4 - t3 * t3) ≡ [(t1 * m) * (t1 * m^3) - (t1 * m^2) * (t1 * m^2)] (mod n)
                        ≡ [t1^2 * m^4 - t1^2 * m^4] (mod n)
                        ≡ 0 (mod n)
将同余式改写为等式，有：
    (t2 * t4 - t3 * t3) = k * n
同理，有：
    (t3 * t5 - t4 * t4) = g * n
此时我们可以认为：
    n = gcd(k * n, g * n)
其中t1到t5均为已知数（可以通过s1到s6的值来计算），即我们最少只需要6个输出即可恢复出n，将上述推导过程写成代码形式如下：
    def recover_n(s):
        diffs = [s2 - s1 for s1, s2 in zip(s, s[1:])]
        zeroes = [t3 * t1 - t2 * t2 for t1, t2, t3 in zip(diffs, diffs[1:], diffs[2:])]
        n = abs(reduce(gcd, zeroes))
        return n
在知道了n后，接下来我们来恢复m，考虑如下同余方程：
    s2 ≡ s1 * m + c  (mod n)
    s3 ≡ s2 * m + c  (mod n)
两同余式相减，有：
    s3 - s2 ≡ (s2 - s1) * m (mod n)
此时有：
    m ≡ (s3 - s2) * (s2 - s1)^(-1) (mod n)
从而恢复出了m的值，将上述推导过程写成代码形式如下：
    def recover_m(s, n):
        m = (s[2] - s[1]) * invert(s[1] - s[0], n) % n
        return m
在知道了n、m后，接下来我们恢复c，考虑如下同余方程：
    s2 ≡ s1 * m + c  (mod n)
此时有：
    c ≡ s2 - (s1 * m) (mod n)
从而恢复出了c的值，将上述推导过程写成代码形式如下：
    def recover_c(s, n, m):
        c = (s[1] - s[0] * m) % n
        return c
n、m、c都知道了以后，即可实现预测，首先我们nc连接到服务器，获取一组s1到s6如下：
    s1 = 661126608579
    s2 = 8515847563592
    s3 = 27120250862005
    s4 = 4169884303818
    s5 = 16137464209031
    s6 = 3143410817644
接下来计算出n、m、c的值：
    #!/usr/bin/env python
    from gmpy2 import *
    def recover_n(s):
        diffs = [s2 - s1 for s1, s2 in zip(s, s[1:])]
        zeroes = [t3 * t1 - t2 * t2 for t1, t2, t3 in zip(diffs, diffs[1:], diffs[2:])]
        n = abs(reduce(gcd, zeroes))
        return n
    def recover_m(s, n):
        m = (s[2] - s[1]) * invert(s[1] - s[0], n) % n
        return m
    def recover_c(s, n, m):
        c = (s[1] - s[0] * m) % n
        return c
    s1 = 661126608579
    s2 = 8515847563592
    s3 = 27120250862005
    s4 = 4169884303818
    s5 = 16137464209031
    s6 = 3143410817644
    n = recover_n([s1,s2,s3,s4,s5,s6])
    m = recover_m([s1,s2,s3], n)
    c = recover_c([s1,s2], n, m)
    print (n, m, c)
执行代码即可得到n、m、c的值，接下来我们即可开始计算，此时服务器已经生成到s6，因此接下来我们需要计算出s7的值：
    >>> s7 = (s6 * m + c) % n
    >>> s7
    mpz(34085312889657)
提交至服务器：
    What number am I thinking of? 34085312889657
    Incredible! I WAS thinking of that number! But can you do it again?
    What number am I thinking of?
可以看到我们预测成功，接下来要求我们再预测出下一个值，采用同样的方法计算出s8：
    >>> s8 = (s7 * m + c) % n
    >>> s8
    mpz(41508463105070)
提交至服务器，即可得到flag：
    What number am I thinking of? 41508463105070
    You really are the one that was foretold. Please accept this knowldege:
    CTF{rand_should_be_enough_for_anyone}
## rsa-debugger
题目描述：  
Choose your own keyventure!  
rsa-debugger-2ad07dbc.challenges.bsidessf.net:1717
题目只给了一个服务器地址和端口，nc连接上去看一下：
    Welcome to the Remote Satellite Attack Debugger!
    Try "help" for a list of commands
输入help查看一下服务器提供了哪些指令：
    RSA debugger> help
    Remote Satellite Attack Debugger help:
    Commands:
        help            # Prints this help
        background      # Explain how the attack works
        holdmsg         # Holds a suitable message from being transmitted
        printmsg        # Prints the currently held message
        printtarget     # Prints the target plaintext for currently held msg
        setp       # Set p to the value specified
           e.g. setp 127
        setq       # Set q to the value specified (p must be set)
           e.g. setq 131
        sete       # Set e to the value specified (p & q must be set)
           e.g. sete 17
        printkey        # Prints the current attack key
        resetkey        # Clears all the set key parameters
        testdecrypt     # Locally decrypts held message with current key
        attack          # Send the key and held message to the satellite
        exit            # Exit the hacking interface
由于本题没有提供源码，题干也没有交待本题的任务，因此先通过background命令查看一下本题的任务：
    RSA debugger> background
    Remote Satellite Attack Debugger background:
    Our agents were able to obtain a working prototype of one of the SATNET
    satellites and through extensive reverse engineering uncovered a
    debugging interface that has not been disabled. We believe we've
    uncovered a vulnerability that will let us take control of a satellite.
    If we sent our own messages to the satellite, we'd get caught in the
    message audit. Instead, we've found a way to intercept and delay messages
    in transmission. By uploading a new key via the debugging interface we
    should be able to manipulate how the satellite interprets the message after
    the message is decrypted.
    The attack:
    Using the command `holdmsg` we will begin searching the outbound messages
    for a suitable message ciphertext. When a message is found, we can derive
    the plaintext that we need the message to decrypt to. You can see the held
    message with `printmsg` and the desired plaintext with `printtarget`.
    The satellite will accept a new private key with only a few basic checks:
    1) p and q must be primes
    2) p and q must be co-prime
    3) e must be co-prime to the Euler totient of n
    Note that we only send the satellite p, q, and e and it derives n and d.
    When the right key has been found, use `attack` to upload the new key
    and release the held message. The satellite will decrypt the message
    with our provided key. If the resulting plaintext contains the target
    debugging commands we should gain control of the satellite.
阅读可知，题目模拟了一个基于RSA的攻击场景，提炼一下核心思想就是系统负责提供一个m和其对应的c，然后要求用户输入p、q、e，即要求用户提供一组(e,
n)，使得`m^e ≡ c(mod n)`。
我们先后输入holdmsg、holdmsg和printtarget命令来获取c和m：
    RSA debugger> holdmsg
    Holding message....found a message to hold!
    Target plaintext derived.
    RSA debugger> printmsg
    Held Message: 26951489564644175456653230687585736580338838263708618013712292080760169510602334072671884866999550794279507424994849685550095276998796745120634736889821620423083634781553271671254728629218239501424892982095333988874656209486912872071578391826065854317309353318501207814096352629564850263810321757236499015621697392699036821960302075744367720697500111447099796190291813031747382152173652243098733466910683611853251467426958183203610956067735023218162106202188255541841009430322439639175156013620160607331664003568894061034095143572434957645944957280890262225298990410953994498755214557585639105202692516734407351686089
    RSA debugger> printtarget
    Target plaintext for held message: 52218557622655182058721298410128724497736237107858961398752582948746717509543923532995392133766377362569697253085889
由于n我们是可以自己设置的，因此如果我们设置这个n后，`m^e ≡ c(mod n)`或`c^d ≡ m(mod
n)`中的e/d能直接计算出来，那么这道题就结束了，显然，这里求e/d的过程就是去解决一个离散对数问题，离散对数问题和大整数分解问题一样，并没有一个通用的有效解法，但是在某些特殊情况下可以计算离散对数（正如某些情况下n可以被分解一样），我们的任务就是提供一个n，使得离散对数的求解落入到这类特殊情况中，从而计算出e/d。
对于一个`y = g^x (mod p)`的离散对数问题的场景而言，当群的阶光滑（即p-1有小素因子解）时，可以通过[Pohlig-Hellman算法](https://en.wikipedia.org/wiki/Pohlig%E2%80%93Hellman_algorithm)来计算离散对数问题。对于本题来讲，如果我们提供一组(p,
q)，使得p和q满足(p-1)和(q-1)光滑，那么接下来可以尝试使用Pohlig-Hellman算法来计算离散对数，但是我们知道，像`m^x ≡
c(mod n)`或`c^x ≡ m(mod n)`这种同余方程，给定一组(m, c,
n)来求x并不是一定有解的，因此我们需要调整一下p和q的值使得同余方程尽可能有解。
我们可以考虑原根的存在性，当使得a ^ b ≡ 1 (mod
n)成立的最小的b等于phi(n)时，我们称a是模n意义下n的一个原根，数n存在原根的必要条件是n形如1, 2, 4, p^α, 2
_p^α，其中p为素数。考虑2_ p^α这种情况，我们可以设置q=2, p=满足p-1光滑的一个p，此时n =
p*q一定存在原根，但是由于本题中c和m我们不可控，因此约1/2的情况下同余方程无解，我们可以不停尝试n，直到同余方程有解，此时即可计算出离散对数，从而本题可解。
根据上述推导，我们首先假设q=2，然后在SageMath下生成一个满足p-1光滑的p：
    def gen_vuln_p(nbit):
        while True:
            p = 2
            while p.nbits() < 2048:
                p *= next_prime(randint(0, 10**6))
            p += 1