title:Boundless memory allocations for memory safety and high availability
author:Marc Brunink and
Martin S&quot;ußkraut and
Christof Fetzer
Boundless Memory Allocations for Memory Safety and High Availability
Marc Br¨unink
Martin S¨ußkraut
Technische Universit¨at Dresden
Christof Fetzer
Department of Computer Science; 01062 Dresden; Germany
{marc, suesskraut, christof}@se.inf.tu-dresden.de
Abstract—Spatial memory errors (like buffer overﬂows) are
still a major threat for applications written in C. Most recent
work focuses on memory safety – when a memory error is
detected at runtime, the application is aborted. Our goal is
not only to increase the memory safety of applications but also
to increase the application’s availability. Therefore, we need
to tolerate spatial memory errors at runtime. We have im-
plemented a compiler extension, Boundless, that automatically
adds the tolerance feature to C applications at compile time.
We show that this can increase the availability of applications.
Our measurements also indicate that Boundless has a lower
performance overhead than SoftBound, a state-of-the-art ap-
proach to detect spatial memory errors. Our performance gains
result from a novel way to represent pointers. Nevertheless,
Boundless is compatible with existing C code. Additionally,
Boundless provides a trade-off to reduce the runtime overhead
even further: We introduce vulnerability speciﬁc patching for
spatial memory errors to tolerate only known vulnerabilities.
Vulnerability speciﬁc patching has an even lower runtime
overhead than full tolerance.
Keywords-Bounds checking; Fault tolerance; Compiler trans-
formation; Availability; Software safety
I. INTRODUCTION
Programming languages like C offer great ﬂexibility on
memory management. While this ﬂexibility offers a great
opportunity to tweak the performance of programs, it comes
at a cost: programs written in C are not safe against temporal
and spatial memory errors. A temporal memory error is
caused by using a memory object after it was deallocated.
Garbage collection tolerates temporal memory errors by
making them impossible to happen. In contrast, a spatial
memory error violates the isolation between independently
allocated memory objects. In 2010, spatial memory errors
were ranked as the third most dangerous programming er-
ror [1]. Therefore, we focus in this paper on tolerating spatial
memory errors, i.e., buffer overﬂows and buffer underﬂows.
We propose a new system, Boundless, which not only
detects but also tolerates spatial memory errors. In this way,
allocations are boundless and spatial memory errors are
no longer possible. Most state-of-the-art approaches handle
spatial memory errors using a fail-stop approach, e.g., [2, 3].
If a spatial memory error is detected, the application is
aborted. But fail-stop behavior decreases the availability of
a system. There are approaches to tolerate fail-stop errors,
e.g., by restarting the aborted application. In our evaluation,
we show that by tolerating the memory error itself Boundless
can achieve higher availability than best-practice methods to
tolerate fail-stop errors.
Detecting and tolerating spatial memory errors comes
at
the price of additional runtime overhead. Boundless
decreases the performance overhead. First, we merge meta
data into pointer values. Even though Boundless not only
detects but also tolerates spatial memory errors, in our mea-
surements Boundless achieves a 23.9% better performance
than the detection-only, fail-stop approach SoftBound [2].
Second, Boundless can automatically generate patches to
tolerate known spatial memory errors. Patching reduces the
performance overhead down to 2.6% of the performance
overhead of the full tolerance mode.
Boundless has the following features:
High Availability By tolerating spatial memory errors we
not only increase memory safety but also availability. In
our measurements, Boundless increases the availability
of the HTTP proxy squid dramatically compared
to squid’s built-in fail-stop error handling approach.
Thus, we believe tolerance makes Boundless more
attractive to practical deployment.
Source Code Compatibility We
implemented
Boundless as a compiler plug-in for
the LLVM
compiler infrastructure [4]. No source code has to be
changed to apply Boundless. Boundless adds tolerance
against spatial memory errors to C code automatically.
Completeness Boundless tolerates spatial memory errors on
the heap, the stack, and on global variables. In con-
trast to most related work, Boundless handles almost
arbitrary integer arithmetic on pointers. For instance,
integer arithmetic is often used to align pointers to
pages or cache lines.
have
To decrease the performance overhead of Boundless, we
store our meta data in unused bits of pointer values on
x86 64. Currently pointers on x86 64 use only 48 bits of
the available 64 bits. We have two pointer representations
with different trade-offs. Both use the 16 spare bits to store
meta data. On architectures that do not offer spare bits or
in case the spare bits on x86 64 are abolished in future, we
would have to restrict the address space similar to [3].
In this paper, we make the following contributions:
Tolerance We present a spatial memory error tolerance
mechanism (Section II and Section V) and evaluate its
performance in Section VII.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:46:38 UTC from IEEE Xplore.  Restrictions apply. 
978-1-4244-9233-6/11/$26.00 ©2011 IEEE13Pointer Representations We introduce two novel pointer
representations in Section IV. They differ in error tol-
erance properties and incurred runtime overheads. We
can switch between these representations at runtime.
Both representations store meta data in the 16 upper
spare bits on x86 64.
Integer Arithmetic We support arbitrary casts between
pointers and integers including integer arithmetic (Sec-
tion IV-B). Manipulated integers can be casted back
to pointers without loosing isolation between memory
objects.
Automatic Patching In Section VI, we describe a sound
automatic patching mechanism for tolerating known
vulnerabilities. Instead of using a probabilistic approach
like padding memory objects, we add full tolerance to
the vulnerability. Thus, we protect the application not
only against a speciﬁc instance of an attack, but we ﬁx
the whole vulnerability.
Compiler Optimizations Finally, we are the ﬁrst, to the
best of our knowledge, to discuss compile time op-
timizations which are sound in the context of error
tolerance (Section V-D).
II. OVERVIEW
Our goal is to provide memory safety and availability in
the presence of spatial memory errors with low performance
overhead. For memory safety, we ensure object isolation
for every memory object on the heap, on the stack and in
the data segment. A memory object is a consecutive buffer
allocated on the heap, on the stack, or in the data segment of
a running application. Object isolation means that a pointer
to memory object A can never be used to access a different
memory object B. Every memory object has bounds, i.e., a
base address and an end address. A pointer p for a given
memory object A points in-bounds, if base address ≤ p
< end address. If a pointer is not in-bounds, we call it
out-of-bounds. Each pointer is associated with exactly one
memory object. This association is a established at the time
of assignment of a memory object to a pointer. A pointer
p(cid:48) derived from pointer p is always associated to the same
memory object as p.
Most approaches implement memory safety by fail-stop,
i.e., when an out-of-bounds memory access is detected, the
application is aborted. Fail-stop decreases the application’s
availability. We provide availability by tolerating out-of-
bounds accesses (Section V).
For spatial memory error tolerance, we need to track
the bounds of memory objects and the association between
pointers and memory objects. Every memory access needs
to be checked at runtime to detect out-of-bounds memory
accesses.
Figure 1.
Source code is instrumented using the LLVM compiler infra-
structure. Our instrumentation substitutes allocation and memory accesses
with calls to Boundless’ runtime library, which tolerates out-of-bounds
accesses at runtime.
A. Boundless
We implemented our approach as a compiler plug-in
called Boundless. Out of convenience, we used the LLVM
compiler infrastructure [4]. The approach is independent of
LLVM and it is possible to port Boundless to other compiler
infrastructures.
Boundless adds tolerance to applications by instrumenting
intermediate code. Figure 1 gives an overview of Boundless.
In order to use Boundless, the application has to be compiled
into LLVM’s intermediate representation. Next, Boundless
instruments the modules of the application. The developer
is free to instrument only a part of the modules, e.g., for
performance reasons. Finally, Boundless links all modules
(instrumented and uninstrumented) and the Boundless run-
time library together to form a hardened executable.
Boundless’ instrumentation reroutes all dynamic alloca-
tions (on the heap and on the stack), all memory accesses
(load and store), and every pointer arithmetic into the Bound-
less runtime library. Our custom memory allocator wraps the
systems memory allocator. At runtime, our allocator tracks
meta data of every dynamically allocated memory object.
For global variables, we generate the meta data at compile
time. At runtime, Boundless keeps track of the bounds
of memory objects and the association between pointers
and memory objects. At each memory access, Boundless
checks whether the memory access is in-bounds or out-
of-bounds. In-bounds accesses are passed through. Out-of-
bounds accesses are rerouted to our out-of-bounds store for
tolerance (Section V-B).
B. Object Isolation
Object
isolation ensures that a pointer to one object
cannot be manipulated in such a way that it points to a
different object. A pointer should retain its intended referent
object [5]. The referent object can only be changed by
explicit assignment not by pointer arithmetic.
Figure 2 depicts a memory image with two objects A and
B. First, pointer p is associated with memory object A. Next,
p is advanced by d to position p + d which is outside of A.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:46:38 UTC from IEEE Xplore.  Restrictions apply. 
14Figure 2.
a spatial memory error detector also needs to enforce object isolation.
In addition to detecting memory accesses to unallocated memory,
1
i n t cmp(const void *p1, const void *p2) {
return (**( i n t **) p1 < **( i n t **) p2);
2
3 }
4 void example() {
5
char* array[2] = {"z", "a"};
qsort(array, 2, s i z e o f (array[0]), cmp);
char c = *array[0]; / / S o f t B o u n d w i l l
d e t e c t a f a l s e p o s i t i v e
6
7
8 }
Figure 3.
highest bit is used to distinguish between the two runtime pointer types.
The spare bits on x86 64 are used to store meta data. The
Listing 1.
code.
SoftBound’s implementation reports a false positive for this
By chance p + d points to a different memory object B.
Since the memory at position p + d is allocated to object B,
p + d points to valid and accessible memory. Nevertheless,
accessing memory object B through pointer p + d violates
object isolation. Since the C standard does not guarantee
anything about the position of object B in memory [6], it is
invalid to intentionally create pointer p + d to access object
B. Without object isolation, p + d is not detected as an
out-of-bounds pointer of A. Instead, it is classiﬁed as an in-
bounds pointer to B. To provide object isolation between A
and B, we have to treat p + d as an overﬂow of object A.
We achieve object isolation differently depending on the
used runtime pointer type. FastPointers carry the complete
meta data as explained in Section IV-A. In contrast, Slow-
Pointers use a separate meta data store and carry only links
into this store (Section IV-B). Most of the time Boundless
relies on FastPointer. SlowPointers are only used as fall back
in case FastPointers cannot be applied.
C. Pointer Representation
Internally, we represent any pointer in one of two pointer
representations (Section IV). Both pointer representations
share the common structure depicted in Figure 3. Our
representation approach makes use of unused bits in pointer
values on x86 64. Boundless’ implementation is for x86 64
where every pointer is 64 bits wide. Currently, on x86 64
the upper 16 bits of a 64 bit pointer are unused [7]. We put
representation dependent meta data in the upper 16 bits; the
remaining 48 bits hold the original pointer value. In case
x86 64 will use all 64 bits in the future or if Boundless is
used on architectures that do not offer spare bits, we have
to restrict the usable address space similar to [3].
The highest bit of the spare bits determines the pointer
representation (cf. Figure 3). If it is set to 0 the pointer is
a SlowPointer (Section IV-B), otherwise it is a FastPointer
(Section IV-A). The semantic of the remaining 15 bits
depends on the pointer representation.
The x86 64 standard requires that the unused upper 16 bit
of pointer values are sign-extended [7]. Thus, before deref-
erencing a pointer using one of our pointer representations,
we need to mask the upper 16 bits.
D. Comparison with SoftBound
To further deﬁne the competitive landscape of Boundless
we brieﬂy compare it with SoftBound [2] version 1.1.1,
which is freely available1. In contrast to Boundless, Soft-
Bound only implements detection but no tolerance. Bound-
less has two further advantages:
• Boundless supports arbitrary integer arithmetic on
pointer values. Integer arithmetic is used in practice
for example to align pointers to pages or cache lines.
In Section IV-B we present an example from one of the
benchmarks we used.
• SoftBound needs semantic knowledge about external
functions, even if the external functions do not derefer-
ence pointers. Listing 1 shows an example that sorts an
array of strings using the Standard C library function
qsort. In C, strings are pointers to characters. Qsort
changes the order of these pointers in array.
SoftBound reports a false positive for the code from
Listing 1. The reason is that qsort swaps the pointers
in array, but SoftBound does not accordingly swap
the meta data for these pointers. To solve this, Soft-
Bound would either have to instrument qsort or it
has to sort the meta data of the pointers in array
according to the content of the strings. The ﬁrst solution
is preferable, but not always practical as the source code
of the external library used needs to be available. The
latter solution requires semantic knowledge of qsort.
In contrast to SoftBound, Boundless merges the meta
data into the pointers. Thus, when qsort swaps the
pointers it also swaps the meta data.
III. RELATED WORK
Detection
Boundless detects spatial memory errors and
tolerates them. Many approaches [2, 3, 8, 9, 10, 11] fo-
cus on detection only. These approaches implement fail-
stop semantics, i.e., if a buffer overﬂow is detected the
application is aborted. CRED [8] uses a splay tree to store
buffer bounds and checks every memory access for bound
violations. Instead of a single large splay tree as with
CRED, it is also possible to partition the heap statically
1http://www.cis.upenn.edu/acg/softbound/
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:46:38 UTC from IEEE Xplore.  Restrictions apply. 
ABp(p+d)type(1bit)meta dataaddress(15 bits)(48 bits)15and use several smaller splay trees (one per partition) to
hold the buffer bounds [9]. For every memory access only