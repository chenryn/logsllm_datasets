# Osiris 银行木马的下载程序使用了 doppelgänging 技术
##### 译文声明
本文是翻译文章，文章来源：blog.malwarebytes.com/
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
对于恶意软件制作者来说，Holly
Grails框架可以很好的将恶意软件伪装成合法进程，以方便他们逃过杀软的检测来进行攻击。对于研究人员和逆向工程师来说，这种攻击方法也备受关注，因为它同时展示了Windows
API的创新用法。
Process
Doppelgänging技术是在2017年的BlackHat上发布的一项新技术，用于代码注入，据说这种利用方式支持所有Windows系统，能够绕过绝大多数安全产品的检测。
一段时间后，一个名为SynAck的勒索软件就将该技术应用到了恶意行为上，链接地址为：[https://securelist.com/synack-targeted-ransomware-uses-the-doppelganging-technique/85431/。](https://securelist.com/synack-targeted-ransomware-uses-the-doppelganging-technique/85431/%E3%80%82)  
虽然ProcessDoppelgänging的应用在野外仍然很少见，但在最近的Osiris银行特洛伊木马（Kronos的新版本）样本中，我们发现了它的一些攻击特征。
经过仔细检查后可以发现在原技术的基础上，此次的攻击方法有了一定的改进。
译者注：Doppelgänging是Process Hollowing
(RunPE)的一种取代方法。ProcessDoppelgänging和Process
Hollowing都可以在合法的可执行文件的掩护下运行恶意文件。这两者在实现方面有所不同，且使用了不同的API函数。对于Process
Doppelgänging的理解可以参照：  
在这次的攻击中，攻击者将ProcessDoppelgänging和Process
Hollowing中各自最优秀的的部分进行了合并，创造了一个更加强大恶意软件。 在这篇文章主要叙述了如何在受害机器上用一个有趣的加载器部署Osiris。
## 概述
Osiris分三个步骤进行加载：
  1. 使用ProcessDoppelgänging技术的改进方法所制作的软件进行第一步装载
  2. 使用自我注入方式进行第二步装载
  3. Osiris核心代码执行所有的恶意活动
## 加载其他NTDLL
运行时，初始dropper会创建一个新的挂起进程：wermgr.exe。查看注入进程所加载的模块，我们可以发现多出的NTDLL：  
当我们仔细研究这些多出的NTDLL会调用哪些函数时，我们会发现更多有趣的细节：它调用了几个与NTFS事务相关的API。于是很容易猜到，这里采用了ProcessDoppelgänging技术。这是一种众所周知的技术，一些恶意软件的作者会使用这种技术来逃避杀软并且同时隐藏他们所调用的API。  
NTDLL.dll是一个特殊的低级DLL，基本上它只是系统调用的一个包装器，与系统中的其他DLL没有任何依赖关系。由于这个原因，它无需填充其导入表就可以进行加载，而其他系统DLL（如Kernel32.dll）在很大程度上依赖于从NTDLL导出的函数。这就是许多本地监视器可以发现和拦截NTDLL导出的函数的原因：查看正在调用的函数，并检查进程是否进行了可疑活动。  
当然，恶意软件作者也深知这一点，所以为了逃避这种检查机制，他们会从磁盘中加载他们自创的未使用过的NTDLL副本。下面就来介绍一下Osiris银行木马所使用的具体方法：  
在查看内存映射时，我们可以发现附加的NTDLL就像其他普通的DLL一样，会被作为映像加载。这种类型的映射是LoadLibrary函数加载的DLL的典型映射，或者也可能是来自NTDLL的低级版本LdrLoadDll。NTDLL会被默认加载到每个可执行文件中，而且官方的API无法重复加载相同的DLL。通常，恶意软件作者会手动映射第二个副本，但这会提供不同的映射类型，这与正常加载出来的DLL是完全不同的。
在这里，恶意软件的作者使用了以下函数将文件作为一个section加载：
ntdll.NtCreateFile – 打开ntdll.dll文件  
ntdll.NtCreateSection –从该文件中创建一个section  
ntdll.ZwMapViewOfSection –将此section映射到进程地址空间  
这个方法很巧妙，因为DLL被映射成了一个映像，所以它看起来像是以正常的方式进行了加载。此DLL会进一步秘密地加载恶意载荷。
## Process Doppelgänging与Process Hollowing的对比
此病毒将载荷注入新进程的方式与Dopplegänging有明显的相似之处。但是，如果经过仔细分析，我们也可以看到这种方法与去年Black
Hat会议中提出的经典实现方法有着不同之处。而这种方法其实更接近于Hollowing技术。  
Process Doppelgänging与Process Hollowing技术类似，不同之处在于前者通过攻击Windows NTFS
运作机制和一个来自Windows进程载入器中的过时的应用。  
经典的Process
Doppelgänging实现方式为（同时利用两种不同的关键功能，以此掩盖已修改可执行文件的加载进程，NTFS事务修改实际上不会写入到磁盘的可执行文件中，而之后使用未公开的进程加载机制实现详情来加载已修改的可执行文件，但不会在回滚已修改可执行文件前执行该操作，其结果是从已修改的可执行文件创建进程，而杀毒软件的安全机制检测不到）：  
Process Hollowing实现方式（Process Hollowing是现代恶意软件常用的一种进程创建技术。一般来说，使用Process
Hollowing技术所创建出来的进程在使用任务管理器之类的工具进行查看时，它们看起来是正常的，但是这种进程中包含的所码实际上就是恶意代码）：  
此Osiris病毒加载方式：  
## 创建一个新进程
Osiris加载器先会创建它将进行注入的进程。该过程由Kernel32：CreateProcessInternalW中的函数创建。  
新进程（wermgr.exe）是在原始文件挂起的状态下创建的，这种行为与Hollowing的行为类似。  
在ProcessDopplegänging算法中，创建新流程会晚很多，并会使用新的API：NtCreateProcessEx：  
这种差异很重要，因为在ProcessDoppelgänging中，新进程不是从原始文件创建的，而是从特殊缓冲区（section）创建的。这个section在早期被创建的，并且是使用“不可见”文件在NTFS事务中进行创建的。在Osiris加载器中，这个section也会出现，但顺序是颠倒的，将这两者称为不同的算法也未尝不可。  
创建进程后，相同的映像（wermgr.exe）将映射到加载器的上下文中，就像之前使用NTDLL一样。  
后来证明，加载器将修补远程进程。wermgr.exe的本地副本将用于收集有关应用的补丁的位置信息。
## NTFS事务的使用