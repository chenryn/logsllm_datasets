For τ ∈ {0, 1}λ, write kτ :=Pλ
pk :=(cid:16)G, [M], H,(cid:0)[M⊤kj,β](cid:1)1≤j≤λ,0≤β≤1(cid:17)
b′ ← ADecO(·,·,·),EncO(·)(pk)
Return 1 if b′ = b, 0 otherwise.
τ := kτ + M⊥RFi(τ|i)
k′
j=1 kj,τj
63
EncO(m0, m1):
G0 , G1, G2,G3.i,G4
p; y := Mr; y ←R Z3k
p ;
r ←R Zk
τ := H([y]); K := [y⊤ · k′
τ ]
φ0 := EncAE(K, m0); φ1 := EncAE(K, m1)
Return ([y], φb) and set CEnc := CEnc ∪ {([y], φb)}.
If τ /∈ TEnc ∪ TDec, set TEnc := TEnc ∪ {τ}, and
CEnc := CEnc ∪ {([y], φb)} and return ([y], φb).
Otherwise, return ⊥.
DecO([y], φ):
τ ]
τ := H([y]); K := [y⊤ · k′
G0 , G1,G2,G3.i , G4
If ([y], φ) ∈ CEnc, return ⊥;
otherwise, return DecAE(K, φ).
Set TDec := TDec ∪ {τ}.
If ([y], φ) ∈ CEnc or ∃([y′], φ′) ∈ CEnc
with H([y′]) = H([y]) and y′ 6= y, return ⊥;
otherwise, return DecAE(K, φ).
Set TDec := TDec ∪ {τ}.
If τ /∈ TEnc, return DecAE(K, φ); else, return ⊥.
In each procedure, the components inside
Figure 3.7: Games for the proof of Theorem 8.
a solid (dotted, gray) frame are only present in the games marked by a solid (dotted, gray)
frame.
• The game G2 and G3.0 are identically distributed. The argument is exactly as in Lemma 13,
thus omitted.
• We build in Lemma 21 adversaries B3.i and B′
|AdvG3.i(A) − AdvG3.i+1(A)| ≤ 4 · AdvUk(p)-mddh
where QEnc, QDec are the number of times A queries EncO, DecO, respectively.
3.i such that:
(λ) + 4QDec · Advae-ot
(λ) +
G,B3.i
AE,B′
3.i
4
p − 1
+
2k
p
,
• To go from game G3.λ to G4, we use the one-time authenticity of AE to restrict the
decryption oracle DecO. Namely, in Lemma 26, we build an adversary B3.λ such that:
|AdvG3.λ(A) − AdvG4(A)| ≤ QDecQEnc · Advae-ot
AE,B3.λ(λ) +
QDec
p
,
where QEnc, QDec are the number of queries to EncO and DecO, respectively.
• We show in Lemma 27 that there exists an adversary B4 such that:
AdvG4(A) ≤ QEnc · Advae-ot
where QEnc denotes the number queries to EncO.
AE,B4(λ) +
QEnc
p
,
64
Chapter 3. Tightly CCA-Secure Encryption without Pairings
Putting everything together, we obtain adversaries B, B′, B′′ such that T(B) ≈ T(B′) ≈
T(B′′) ≈ T(A) + (QDec + QEnc) · poly(λ) and
AdvIND-CCA
PKE,A (λ) ≤ (4λ + 1) · AdvUk(p)-mddh
G,B
(λ)
+ (QEncQDec + (4λ + 2)QDec + QEnc) · Advae-ot
+ AdvCR
H,B′(λ) + QEnc(QEnc + QDec) · 2−Ω(λ),
AE,B′′(λ)
(3.4)
where QEnc, QDec are the number of times A queries EncO, DecO, respectively, and poly(λ) is
independent of T(A).
Lemma 20: From game G0 to game G1
There exist adversaries B0 and B′
poly(λ) and
0 such that T(B0) ≈ T(B′
0) ≈ T(A) + (QEnc + QDec) ·
|AdvG0(A) − AdvG1(A)| = 2QDec · Advae-ot
AE,B0(λ) + AdvCR
H,B′
0
(λ) +
QEnc(QEnc + QDec)
pk
,
where QEnc, QDec are the number of times A queries EncO, DecO, respectively, and poly(λ)
is independent of T(A).
Proof of Lemma 20. First, we use the one-time authenticity of AE to argue that if A queries
DecO on a vector [y] such that y /∈ Span(M), then, DecO outputs ⊥, with all but negligible
probability. Second, we use the collision resistance of H to argue that:
(i) if A queries DecO on ([y′], φ′), where for some previous output ([y], φ) of EncO, we have:
H([y]) = H([y′]) and y′ 6= y, then, with all but negligible probability, DecO outputs ⊥;
(ii) every time EncO outputs a vector [y], its tag H([y]) is fresh (no [y′] with the same tag has
been output by EncO or queried to DecO before), with overwhelming probability over EncO’s
random coins.
We introduce intermediate games G0.j (resp. G1.j) for j = 0, . . . , QDec, deﬁned as follows:
DecO is as in G0 (resp. G1) except that for the ﬁrst j times it is queried, it outputs ⊥ to any
query ([y], φ) such that y /∈ Span(M). The public key and EncO are as in G0 (resp. G1).
We show that:
G0 ≡ G0.0 ≈AE G0.1 ≈AE . . . ≈AE G0.QDec ≈CR G1.QDec ≈AE . . . ≈AE G1.0 ≡ G1
Namely, we build adversaries B0.j, B1.j for j = 0, . . . , QDec − 1, and B′
where ≡ denotes statistical equality, ≈AE denotes indistinguishability based on the security of
AE, and ≈CR denotes indistinguishability based on the collision resistance of H.
0 such that T(B0,j) ≈
T(B1,j) ≈ T(B′
0) ≈ T(A) + (QEnc + QDec)· poly(λ), where poly(λ) is independent of T(A), and
such that
Claim 1: |AdvG0.j (A)− AdvG0.j+1(A)| ≤ Advae-ot
AE,B0.j (λ) and |Adv1.j − Adv1.j+1| ≤ Advae-ot
AE,B0.j (λ),
for j = 0, . . . , QDec − 1.
Claim 2: |Adv0.QDec − Adv1.QDec| ≤ AdvCR
This implies the lemma.
H,B′
0
(λ).
Let us prove Claim 1.
It suﬃces to show that in G0.j and G1.j, with all but negligible
probability, DecO outputs ⊥ to its j + 1-st query if it contains [y] such that y /∈ Span(M).
Recall that in both G0.j and G1.j, on its j + 1-st query ([y], φ), DecO computes
K := [y⊤ · kτ ], where τ = H([y]) and kτ :=
λXρ=1
kρ,τρ,
3.3 Security proof of PKE
65
and returns DecAE(K, φ) (or ⊥, see Figure 3.7). We prove that this value K is hidden from A
up to its j + 1-st query to DecO. Then, we use the one-time authenticity of AE to argue that
DecAE(K, φ) = ⊥ with overwhelming probability.
To prove K is hidden from A, we show that the vectors k1,0, k1,1 in sk contain some
entropy that is hidden from A. More formally, we use the fact that the vectors k1,β ←R Z3k
p
are identically distributed than k1,β + M⊥w for β = 0, 1, where k1,β ←R Z3k
p, and
M⊥ ←R U3k,2k such that M⊤M⊥ = 0. We show that w is hidden from A, up to its j + 1-st
query to DecO.
p , w ←R Zk
• The public key pk does not leak any information about w, since
M⊤(k1,β + M⊥w ) = M⊤k1,β.
This is because M⊤M⊥ = 0.
• The outputs of EncO also hide w, since for any y ∈ Span(M), we have:
y⊤(kτ + M⊥w ) = y⊤k′
τ
(3.5)
since M⊤M⊥ = 0 which implies y⊤M⊥ = 0.
• The ﬁrst j outputs of DecO also hide w.
– For y ∈ Span(M), DecO([y], φ) is independent of w, from Equation (3.5).
– For y /∈ Span(M), DecO([y], φ) = ⊥, independently of w, by deﬁnition of G0.j.
Therefore, the value
K = [y⊤(kτ + M⊥w)] = [y⊤kτ + y⊤M⊥
w]
6=0
| {z }
computed by DecO on its j + 1-st query, is uniformly random over G from A’s view, since
y /∈ Span(M) ⇔ y⊤M⊥ 6= 0.
Then, by one-time authenticity of AE, there exists an adversary B0.j such that T(B0,j) ≈
T(A) + (QEnc + QDec) · poly(λ), where poly(λ) is independent of T(A), and
|AdvG0.j (A) − AdvG0.j+1(A)| ≤ Advae-ot
AE,B0.j (λ).
Let us prove Claim 2. It suﬃces to show that in G0.QDec:
(i) if DecO is queried on ([y], φ), and there exists ([y′], φ′) output previously by EncO, with
H([y]) = H([y′]) and y′ 6= y, then, with all but negligible probability, DecO outputs ⊥;
(ii) every time EncO outputs a vector [y], its tag H([y]) is fresh (no [y′] with the same tag
has been output by EncO or queried to DecO before), with overwhelming probability over its
random coins.
We deﬁne B′
0 as follows. Upon receiving a challenge H ←R H(1λ) for the collision resistance
p , and generates the public key pk, simulates
of H, B′
the oracle EncO and DecO as in G0.QDec.
0 picks b ←R {0, 1}, k1,0, . . . , kλ,1 ←R Z3k
(i) Suppose B′
0 receives some [y] through a DecO query, such that there is a [y′] from an
earlier EncO query with H([y]) = H([y′]), and y 6= y′. Then, we distinguish the following cases:
Case 1: y 6= y′. Then there is a collision H([y]) = H([y′]) that B′
Case 2: y = y′ (but y 6= y′). Then, y /∈ Span(M) (because y 6= y′), and DecO outputs ⊥, as
0 can directly output.
would happen both in G0.QDec and G1.QDec.
66
Chapter 3. Tightly CCA-Secure Encryption without Pairings
pk
(ii) First, note that with probability at least 1− QEnc(QEnc+QDec)
over its random coins, EncO
samples vectors [y] whose upper parts [y] are fresh (they are distinct from those previously
sampled by EncO, or queried to DecO). Therefore, conditioned on this fact, if B′
0 samples
τ := H([y]) that is not fresh, i.e there exists a pair ([y′], H([y′]) = τ) previously output by EncO
or queried to DecO (along with some symmetric ciphertext φ), then we have H([y]) = H([y′]),
and [y] 6= [y′], that is, B′
Summarizing, both games G0.QDec and G1.QDec proceed identically (as simulated by B′
0),
unless (i) Case 1 occurs, or (ii) EncO samples a tag that was output or queried before, in which
case B′
0 ﬁnds a collision, with overwhelming probability over its random coins.
0 ﬁnds a collision.
Lemma 21: From game G3.i to game G3.i+1
For all 0 ≤ i ≤ λ − 1, there exist adversaries B3.i and B′
T(A) + (QEnc + QDec) · poly(λ) and
2k
|AdvG3.i(A) − AdvG3.i+1(A)| ≤ 4 · AdvUk(p)-mddh
p
where QEnc, QDec are the number of times A queries EncO, DecO, respectively, and poly(λ)
is independent of T(A).
3.i such that T(B3.i) ≈ T(B′
(λ) + 4QDec · Advae-ot
4
p − 1
3.i) ≈
(λ) +
AE,B′
3.i
G,B3.i
+
,
Proof of Lemma 21. To go from G3.i to G3.i+1, we introduce intermediate games G3.i.1, G3.i.2
and G3.i.3, deﬁned in Figure 3.5.
• To go from game G3.i to game G3.i.1, we use the MDDH Assumption to “tightly” switch
the distribution of all the challenge ciphertexts, as in Lemma 15 in Section 3.1. We
proceed in two steps, ﬁrst, by changing the distribution of all the ciphertexts with a tag
τ such that τi+1 = 0, and then, for those with a tag τ such that τi+1 = 1. We use the
MDDH Assumption with respect to an independent matrix for each step. We build an
adversary B3.i.0 in Lemma 22 such that:
|AdvG3.i(A) − AdvG3.i.1(A)| ≤ 2 · AdvUk(p)-mddh
G,B3.i.0
(λ) +
2
p − 1
.
• To go from game G3.i.1 to game G3.i.2, we use a computational variant of the Cramer-
Shoup information-theoretic argument to move from RFi to RFi+1, thereby increasing the
entropy of k′
τ , as in Lemma 16, in Section 3.1. For the sake of readability, we proceed in
two steps: in Lemma 23, we move from RFi to an hybrid between RFi and RFi+1, and in
Lemma 24, we move to RFi+1. Overall, we build in Lemma 23 an adversary B3.i.1 such
that:
|AdvG3.i.1(A) − AdvG3.i.2(A)| ≤ 2QDec · Advae-ot
AE,B3.i.1(λ) +
2k
p
,
where QDec denotes the number of queries to DecO.
• In Lemma 24, we build an adversary B3.i.2 such that:
|AdvG3.i.2(A) − Adv3.i.3| ≤ 2QDec · Advae-ot
AE,B3.i.2(λ),
where QDec denotes the number of queries to DecO.
• The transition between G3.i.3 and game G3.i+1 is symmetric to the transition between
G3.i and G3.i.1 (cf. Lemma 22): we use the MDDH Assumption to “tightly” switch the
distribution of all the challenge ciphertexts in two steps; ﬁrst, by changing the distribution
67
τ
G3.i, G3.i.1, G3.i.2,G3.i.3
r0 ←R Zk
r1 ←R Zk
/∈ TEnc ∪ TDec,
q ; y := Mr; τ := H([y]); y ←R Z2k
q
q ; y := Mr + M0r0
q ; y := Mr + M1r1
EncO(m0, m1):
r ←R Zk
If τi+1 = 0 :
If τi+1 = 1 :
K := [y⊤ · k′
τ ]
φ0 := EncAE(K, m0); φ1 := EncAE(K, m1)
If
TEnc := TEnc ∪ {τ}
and CEnc := CEnc ∪ {([y], φb)}. Otherwise, return
⊥.
DecO([y], φ):
τ := H(y); K := [y⊤k′
τ ]
If ([y], φ) ∈ CEnc or ∃([y′], φ′) ∈ CEnc with
H([y′]) = H([y]) and y′ 6= y, return ⊥; otherwise,
return DecAE(K, φ). Set TDec := TDec ∪ {τ}.
G3.i,G3.i.1,G3.i.2,G3.i.3
return ([y], φb),
set