Android安全攻防实战
文件的工作目录下了。
怎么做
一开始，我们要通过ADB启用调试。在Windows或Linux中执行下面这条命令。
adb logcat
这条命令仅在你的当前工作目录正确的情况下才会起作用，对于Linux用户，正
确的工作目录是：[sdk所在路径]/sdk/platform-tools/：对于Windows 用户，它是：[sdk
所在路径Jsdkplatformtools。
这将输出一些软件级和硬件级事件的日志信息。我们理所当然地应该关心那些
与我们正在检查的安全漏洞相关的事件和 app。幸运的是，logcat 带有日志信息的过
滤功能。下面是所有选项的细目表。
其中[options]可以是下列选项中的一个一我已经忽略掉了一些选项，以保持简
洁和抓住重点。
·-v：这个选项是用来设置输出的格式的，这些格式可以是brief,process，
tag, thread, raw, time, threadtime 或 long-
·-d:这个选项是用来dump日志文件，然后退出的。
而[filter]是一串 tag:priority 命令，这个 tag:priority 的格式如下。
·tag：是一个标识日志组件的字符串。所谓日志组件就是日志输出的字符串，
例如，日志的输出结果是这样的：
E/ClockAlarmWidget(6590): [AlarmWidgetIdManager] getListItemO
ClockAlarmWidget，就是上面这段代码中加粗的部分，就是日志组件的 tag。在
“/”符号之前的就是priority（优先级），在这个例子中，priority是Error，他是
用一个字母E来表示的。
·priority：它可以是下列优先级中的一个。
V,verbose:用它启用详细日志。
口D,debug:用它启用调试日志。
I,Info:用它启用信息级（informational）以上信息日志。
W,Warn:用它启用警告级（Warmn）以上信息的日志。
102
---
## Page 121
第4章利用app中的漏洞
E,Error:用它启用错误级（Error）以上信息的日志。
例如，如果你想要监视所有日志组件发出的，错误级以上优先级的日志，你可
以使用下面这条命令。
adb logcat *:E
其中的“*”表示：我们需要的是任意日志组件 tag的，priority为Error的日志，
另一个非常有效的过滤日志的方法是：把日志输出转存到一个文本文件中去，
然后用grep（这是大多数Linux/UNIX发行版本中自带的工具）或者对于Windows
用户也可以使用 Notepad++之类的文本编辑器，对它进行搜索。Notepad++和grep的
下载页面链接已经在本实验的“拓展阅读”一节中给出了。对于Windows用户来说，
如果你确实想要做一些基于正则表达式的功能强大的字符串匹配的话，也有一个微
阅读”一节中给出了。
决定了如何搜索文本之后，只要知道搜索方法，具体该怎么操作倒是随你的便，
不用我多嘴。你可以执行下面这条命令，把日志的输出转存到一个文件中去。
adb 1ogcat > output.txt
不论是在Linux终端下还是在Windows 命令行提示符下，这条命令都会以同样
的方式工作。你也可以用下面这种方法直接把它“管道”（pipe）—即，让一个程
序的输出成为另一个程序的输入—到另一个程序中。这条命令在Windows 命令行
提示符和Linux终端中都能使用。
adb logcat|[其他程序]
如果是使用grcp，你可以执行下面这条命令来完成任务。
adb logcat I  grep [pattern]
[palterm]中填入你要搜索的文本的正则表达式，比如。
adb 1ogcat 1grep ApplicationManager
我还真不想在这儿写上一篇关于如何使用grcp的详细教程。如果你想使用grcp
或者WinGrep中的一些更强大的功能，请参考本实验的“拓展阅读”小节。
下面是一些可能对你有用的例子。它们会给出日志文件中与Web相关的信息。
adb logcat 1grep [Cc]ookie
[=]. dx61 e5t qpe
①根据 htp:/developer.android.com/tols/debugging/debugging-log.html.。在这些优先级之上还有两
级优先级（F，Fatal 和S.Silent）.—译者注
103
---
## Page 122
Android安全攻防实战
*[=]dg。dez61qeobo qpe
我知道，这些都不是非常严格的例子，但它们确实足以帮你找出Web地址。
Ag CET
//g-cl
[
图 4.1
生成的。
你也可以试着找出一些日志文件泄露出来的，与登录或验证令牌（token）相关
的字符串：
adb 1ogcat 1 grep - "[\w\s_-] *token[\w\8_-]*"
如果你正在日志文件中寻找有价值的信息，那么寻找那些需要其他权限才能获
得的，或者能让你直接得到由其他app保护着的信息一般是个好主意。例如，如果一
个app 在用户登录了他/她的 Linkedln profile 之后，在日志中输出了服务器返回的
cookie的值，你认为这个是很安全的吗？
对！这就使你能在不知道他/她的 LinkedIn profile 的登录口令，或没有LinkedIn
app 中登录函数使用权限的情况下，登录他/她的Linkedln profile 账号。阅读日志文
件可能会要花上好几个小时，这段时间里你应该认真地寻找这类信息。
Terststentcoatestare
toe6
e：231
23:265A5T2854]
vlue: LIR
图 4.2
这是个完全真实的案例！如图 4.2所示，Galaxy S3上的 LinkedIn app（for Android
版）的日志中输出的cookie 泄露出来的信息危险性是很大的。另一个现实世界中这
类漏洞的例子，可以在《在FacebookAndroid SDK中发现一个重要安全漏洞》
一文
中找到。这篇文章的链接也已经被放在“拓展阅读”一节中了。
104
---
## Page 123
第4章利用app中的漏洞
进一步说明.
当然，app 设计时通常要对来自其他app或系统服务的硬件或软件事件（通过
broadcast receiver 或 intent）予以响应。而且很自然，你可能想要知道app 是怎样响
应这些事件的，或者在响应这类事件时，app的行为是否会导致潜在的危害。然后，
问题就来了一如何在不用你亲自动手按下音量减小键、锁屏并解锁，或其他键的情
况下，创建或向 app发送你正在测试的这些事件呢？答案是Android的 Monkey testing
框架。它是设计用来向app发送系统/硬件级事件的，这样开发者就可以评估他们的
app 处理这些事件有多完美了。它的操作方式就像是一个针对 app 的设备事件
“fuzzing”相架。
在解释怎么使用它之前，必须要指出：如果app是安装在你自己的或者其他什么
人的Android设备上的话，用 Monkey testing 对它进行测试可不是什么好主意。因为
似的，这可能会导致一些可能产生危害的结果一比如丢失app中的数据，甚至让你
的手机前溃掉。除非你已经设置了适当的权限，或者已经做好了让被测试app中存储
的数据被被坏掉或去失掉的准备，否则，你应该只在模拟器或者安全测试专用设备
上做这些测试。
使用这个框架的一种方式是通过ADB连接一个设备，在命令行提示符或终端里
执行下面这条命令。
[4umoo  quana]  A[ofexoed]  d Koxuou  Ttaqs qpe
其中[package]是你想要把事件发送给它的 package或app 的名称，而[event count]
你想要发送的随机事件的数量。下面是如何使用它对appFlipboard进行测试的一个
例子：
OT △ ddepzeoqdtta d- Koxuou Treqe cpe
这条命令将向Flipboard这个app发送10个随机选择的事件，并报告app收到这
些事件后的行为。
拓展阅读
·Android调试桥—启用 logcat 日志的 Web 页面位于https:/developer.android
com/tools/hclp/adb.htmlflogcat
●Vogella 网站上 Monkey Testing 的教程网页：http:/www.vogella.com/articles/
AndroidTesting/article.html.
Notepad++软 作的 下 载地tt: http://notepad-plus-plus.org/download/v6.3.3.html
Android开发者网站中“logcat”主题页面的地址是：https://developer.android。
105
---
## Page 124
Android安全攻防实战
com/tools/help/logcat.html
●WinGrep 软件的下载地址：http://www.wingrep.com/download.htm
http://blog.parse.com/2012/04/10/discovering-a-major-securityhole-in-faccbooks-a
ndroid-sdk/,
/中
android.com/tools/debugging/debugging-log.html 
4.3检查网络流量
我们知道，app 可以使用Android 设备上可用的网络服务，而且许多app 的开发
目的就是把它们作为基于云的服务的前端。这也就是说：搞明白app 是如何与网上的
服务器的通信方式，是勾勒安全风险概貌（即，收集app暴露给用户及其所在设备的
安全风险）的一个非常重要的部分。
在这个实验中，我将向你展示一些能让你使用广受欢迎的Wireshark工具直接噢
探一个Android设备上的网络流量的新奇方法。
准备工作
在开始破解之前，你需要在你的本地计算机和Android设备上安装一些工具，下
面是你要下载的工具。
●Wireshark：你可以直接从Wireshark的官网（http://www.wireshark.org）下载
它。Wireshark 既支持Windows，也支持Linux。你必须确保在开始之前，已
经把它安装在你的本地计算机上了。安装 Wireshark 相当简单，Wireshark 的
开发者甚至都提供了针对Windows 和UNIX/Linux各个发行版本的非常有用
的文档，这些文档可以在http:/www.wireshark.org/docs/wsug_html_chunked/
ChapterBuildlnstall.html 获得。
°Netcat: Linux/UNIX 用户可以在 htp:/netcat.sourceforge.net/download.php 下载
这个工具，Windows 用户的下载地址是http://joncraton.org/blog/46/nctcat-
for-windows/。Linux/UNIX用户可能都不需要去下载Netcat，因为许多
Linux/Unix发行版本中都已经自带了这个工具。
●TCPdumpforAndroid：这个工具的下载地址位于：http://www.strazzere
com/android/tcpdump
106
---
## Page 125
第4章利用app中的漏润
怎么做
在装好所有的工具，准备完毕之后，你可以执行以下步骤监控Android设备上的
流量。
1.假设你的Android设备已经root了，你可以用如下方式创建一个目录，存放
TCPdump的二进制可执行文件。
通过ADB，在Android设备上依次执行下面这条命令。
mkdir /data/tcpdump/
Su
chmod 755 /data/tcpdump/
然后，在本地计算机上，把当前的工作目录切换到你下载for Android版的
TCPdump 的目录中，然后运行下面这两条命令。
adb push tcpdump /data/tcpdump/ .
adb she11 chmod 755 /data/tcpdump/tcpdump
2.当你把for Android版的 TCPdump上传到设备上去，并把它的权限设为可执
行之后，你应该执行下面这条命令，确认Android设备上Netcat是可用的，
如图 4.3所示。
nc
sage1 nc [-IN][-N] -1[-p PORT] [-f FILE[IPACCR PORT] [-= ROG
n a pipe to IP;PORT ar FILE
ORI
Lealsorfrcoo
FELE Useata/de/tty8}instead of netvork
 4.3
这只不过是一个确认检查面已，在大多数版本的Android系统上默认都自带
了Netcat。如果没有，可以去谷歌的Android GitHub代码仓库中下载一个带
NDKMakefile的forAndroid版的Netcat，下载地址是：
https://android.googlesource. com/platform/extemal/netcat/+/master。至于怎样使
用这个Makefile文件，请参考第8章《原生代码中漏洞的利用和分析》中的
“交叉编译原生可执行文件”这个实验。
107
---
## Page 126
Android安全攻防实战
3.为了确保一切工作正常，在你确认了TCPdump和Netcat 都已经安装到你的
Android设备上去了之后，你可以执行一下下面这条命令，试着抓取一点网
络流量。
-/data/topdump/tcpdump - - 1 nc 1 -p 31337
如果一切正常，你应该在屏幕上看见输出了下面这些信息，如图4.4所示。
301hd/
-p3133
612096 09
B 4.4
为了能抓到一些流量，你可能需要打开一个会发送Web请求或者使用一些网
络 API 的 app。
4.如果一切顺利，你应该能把TCPdump的输出传给装在你本地计算机的
Wireshark上，要完成这一任务，你首先需要执行下面这条命令，通过ADB
设置一下端口转发。
adb forward tcp:12345 tcp:31337
5.在端口转发设置完毕之后，你可以执行下面这条命令，运行你本地计算机上
的 Netcat.
netcat 127.0.0.1 12345
6.这样做了之后，所有的流量都会被正确地转发。你可以通过管道（pipe）把
输出转接到Wireshark那里去。Wireshark将会对包进行解析，并能够做更深
入的包分析和其他一些很有用的工作。
adb forward tcp:12345 tcp:31337 66 netcat 127.0.0.1 12345 1
wireshark -k -S =i =
几秒钟之后，如果一切工作正常，你将会看到Wireshark已经运行起来了，
类似图4.5的信息会出现在你的屏幕上。
图 4.5
108
---
## Page 127
第4章利用app中的漏润
工作原理
在这个实验里，我们使用了Netcat、Wireshark和TCPdump，直接从一个Android
设备上提取网络流量，做分析和深入的包检查。由于在实验步骤中对命令行参数以
及各个工具组合用法几乎都没有做出解释，所以这一节里将详细解释每一个操作步
骤都是怎么工作的，以及为什么要这样做。
在第一步里，为了在Android设备中创建一个目录，用以安装和存放TCPdump，
需要执行下列命令。
su; mkdix /data/topdump/ : chmod 755 /data/tcpdump/
“su”命令，就是“SubstituteUser（SU)”的缩写，它使我们能获得root权限—
在没有输入任何参数时，这就是su的行为。使用su获得root权限之后，就能够修改
和查看Android 文件系统中的任何目录和文件。我们在/data/文件夹中创建 tcpdump
目录时，必须拥有这一权限。
在执行了su命令之后，我们执行mkdir命令，并加上了参数“/data/tcpdump/”。
这条命令在“/data/”文件夹中创建了“tcpdump”目录。
在这之后的chmod 命令—它是change mode（修改权限）的缩写—再加上了
一个参数755。它修改了“/data/tcpdump/”目录的访问权限，使较低权限的用户也能
 n目
件上传到这个目录中，所以必须要这样做。
在创建了tcpdump这个文件夹之后，我们执行了下面几条命令。
adb push tepdump /data/tcpdump/ .
adb she11 chmod 755 /data/topdump/tcpdump
这保证 tcpdump的二进制可执行文件被存储到了 tcpdump 目录中。第一条命令