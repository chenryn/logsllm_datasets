title:Tracing multipath TCP connections
author:Benjamin Hesmans and
Olivier Bonaventure
Tracing Multipath TCP Connections
B. Hesmans, O. Bonaventure
ICTEAM, Université Catholique de Louvain
Louvain-La-Neuve – Belgium
ﬁPI:EMAIL
1.
INTRODUCTION
Multipath TCP [2] is a major extension to the TCP proto-
col. Multipath TCP enables a host to send packets belonging
to one connection over diﬀerent interfaces and IP addresses.
This is a major change to TCP where one connection is
always bound to one four-tuple (source and destination ad-
dresses and ports). To understand the basics of Multipath
TCP, let us consider the simple and important use case of a
smartphone1 using WiFi and 3G to connect to a server. To
start a Multipath TCP connection, the smartphone initiates
a three-way handshake with the server over the 3G inter-
face. This handshake includes speciﬁc options to negotiate
the utilisation of Multipath TCP. Once this TCP connec-
tion has been established, it becomes the ﬁrst subﬂow of the
Multipath TCP connection. To use the WiFi interface, the
smartphone starts another three-way handshake over this
interfaces and indicates that TCP connection is the second
subﬂow of the Multipath TCP connection. The number of
subﬂows associated to one Multipath TCP connection can
vary over time.
Once the subﬂows have been established, data can be
transmitted over anyone of them. If there are losses, data
transmitted initially on one subﬂow can be retransmitted
over another one. For this, Multipath TCP uses two levels
of sequence numbers. The regular TCP sequence number
ensures that the data sent over one subﬂow are in sequence.
The Multipath TCP sequence number enables the receiver
to reorder the data received over subﬂows having diﬀerent
delays.
During the last years, various researchers have analyzed
the performance of Multipath TCP [1, 4] and proposed var-
ious improvements [5]. Unfortunately, analyzing Multipath
TCP performance remains diﬃcult given the lack of ﬂexible
tools. We ﬁll this gap with mptcptrace[3] that converts a
Multipath TCP packet trace in various graphs and metrics
1As of this writing, there are already hundreds of millions
of Apple smartphones that use Multipath TCP.
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the Owner/Author.
SIGCOMM’14, August 17–22, 2014, Chicago, IL, USA.
ACM 978-1-4503-2836-4/14/08
http://dx.doi.org/10.1145/2619239.2631453.
that can be used by researchers. We illustrate a few of the
capabilities of mptcptrace in this paper.
2. ANALYZING MULTIPATH TCP TRACES
tcptrace 2, written by S. Ostermann, is a ﬂexible packet
trace analysis software. It extracts a wide range of metrics
from a TCP packet trace and has been used by many re-
searchers who analyze TCP performance. When confronted
with performance problems, the ﬁrst reaction of a Multipath
TCP researcher will probably be to explore a packet trace
with tcptrace to understand the problem. tcptrace is very
convenient for such analysis since it provides both an inter-
active visualisation and summary statistics about each TCP
connection.
As an example, we captured two long Multipath TCP
connections between two virtual machines in distant Ama-
zon EC2 datacenters. Each connection was conﬁgured to use
four TCP subﬂows and a window of 1.2 MB. The goodput
of these two connections was very diﬀerent. The ﬁrst one
reached 21 Mbps while the second managed to achieve 40
Mbps.
tcptrace cannot be used directly on these traces because
it cannot link the subﬂows together. This link can be ex-
tracted from the Multipath TCP options used in the three-
way handshake.
If we do this manually, we can compare
the round-trip-times of the four subﬂows of each Multipath
TCP connection. On the worse performing Multipath TCP
connection, we observe a large deviation of the round-trip-
time values. On the other hand, the best connection has
stable round-trip-times, but the subﬂows achieve diﬀerent
throughputs. On this connection, the subﬂow with the low-
est average round-trip-time reaches the highest throughput.
What is the reason for large deviation in the round-trip
times of the low performing connection ? Figure 1 provides
a CDF of the round-trip times measured over each subﬂow.
The right part of the ﬁgure conﬁrms the stable round-trip-
times of high goodput connection. The left part shows that
for the low-performing connection, three subﬂows have two
clusters of round-trip times. One cluster arounds 200 msec
and another around 400 msec. This indicates a rerouting
even during the lifetime of this connection that forced those
three subﬂows to follow a longer path. This rerouting did
not aﬀect the other subﬂow.
2http://www.tcptrace.org/
361forming connection, 70 % of the traﬃc is acknowledged by
acks that acknowledge less than 10 KBytes. 90 % of the
traﬃc is acknowledged by acks of size less than 200 KBytes.
This indicates a small reordering queue. For the low per-
forming subﬂow, the situation is diﬀerent. We observe that
a large fraction of the traﬃc is acknowledged in bursts. This
indicates a large occupancy of the reordering queue.
Figure 3 highlights the impact of this problem on the per-
formance of the Multipath TCP connection. Three curves
are plotted. The green curve is the receive window adver-
tised by the receiver. The read lines show the sum the
amount of unacknowledged data over each of the four sub-
ﬂows. The orange lines show the data that has been sent
by Multipath TCP (over any subﬂow) and not yet acknowl-
edged by a Multipath TCP acknowledgement. The gap be-
tween the red and the orange curves corresponds to the size
of the reordering queue at the Multipath TCP level.
Figure 3: TCP and MPTCP unacknowledged data
The goodput of a Multipath TCP connection is not sim-
ply the sum of the goodput of the underlying subﬂows be-
cause the same data can be transmitted over several sub-
ﬂows. This can happen when losses occur, subﬂows termi-
nate or when a subﬂow is underperforming [5]. By parsing
all Multipath TCP options, mptcptrace detects all these re-
transmissions.
In our example traces, 0.53% of the bytes
were transmitted on more than one subﬂow for the low per-
forming connection. For the high performing connection,
0.11% of the bytes were transmitted on more than one sub-
ﬂow. mptcptrace detected that 0.01% of the bytes were
transmitted over three of the four subﬂows. This was likely
due to the reinjection algorithm explained in [5].
Acknownledgements
This work was supported by FNRS under project T.0128.13.
3. REFERENCES
[1] Y.-C. Chen et al. A Measurement-based Study of
Multipath TCP Performance over Wireless Networks.
In ACM IMC, 2013.
[2] A. Ford et al. TCP Extensions for Multipath Operation
with Multiple Addresses. RFC6824, Jan. 2013.
[3] B. Hesmans. MPTCP traces analysis tool.
http://mptcptrace.multipath-tcp.org/.
[4] C. Raiciu, S. Barre, C. Pluntke, A. Greenhalgh,
D. Wischik, and M. Handley. Improving Datacenter
Performance and Robustness with Multipath TCP. In
ACM SIGCOMM, 2011.
[5] C. Raiciu et al. How hard can it be? Designing and
Implementing a Deployable Multipath TCP. In
USENIX NSDI, 2012.
Figure 1: Per ﬂow RTT CDF
2.1 Measuring Reordering
A regular TCP receiver reorders the data received out-
of-sequence before delivering them to the application.
In
today’s networks, reordering mainly happens after a packet
loss. With Multipath TCP, reordering becomes normal.
Since Multipath TCP uses subﬂows with diﬀerent round-
trip times, data is not always received in sequence at the
receiver. These out-of-sequence data consume both mem-
ory and CPU time and furthermore increase the end-to-end
delay perceived by the application.
Measuring and understanding when reordering occurs is
major issue when analyzing Multipath TCP performance.
mptcptrace can help such analysis by parsing all the Multi-
path TCP options and understanding their semantics.
Figure 2: MPTCP rtt CDF and Ack size
The left part of ﬁgure 2 analyzes the round-trip times
at the Multipath TCP level on each connection. For this,
mptcptrace computes a round-trip time for each data suc-
cessfully transmitted by analyzing the Multipath TCP se-
quence numbers and acknowledgements. The high perform-
ing connection is characterized by small end-to-end round-
trip times while they are much larger with the low perform-
ing connection. Note that compared with ﬁgure 1, for this
connection, the Multipath TCP round-trip times are much
larger than the per-subﬂow round-trip times. This indicates
additional delays at the receiver side.
Another angle to analyze this problem are the Multipath
TCP acks. With regular TCP, when data is received in
sequence, it is immediately acknowledged and each ack ac-
knowledges one packet’s worth of data. With Multipath
TCP, data is sent over diﬀerent subﬂows. Even if there are
no losses, data can be out-of-order at the Multipath TCP
level when subﬂows have diﬀerent delays. The right part of
ﬁgure 2 shows that the cumulative percentage of the bytes
that are acknowledged by acks of size x. On the high per-
2003004005006000.00.40.8RTTCDF2003004005006000.00.40.8RTTCDF200500200050000.00.40.8RTTCDF040080012000.00.40.8Ack size (kB)byte pc01030502006001000Time (s)Byte (kB)01030502006001000Time (s)Byte (kB)362