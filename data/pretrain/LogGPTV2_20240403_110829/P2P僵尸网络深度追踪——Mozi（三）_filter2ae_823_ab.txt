图1. 扫描器整体框架图
###  2.1 路由扩散
已知Mozi网络与未知Mozi网络之间是遵循P2P网络的Kademlia协议进行路由扩散。  
K-桶（路由表）刷新原理：
  1. 主动收集节点：任何节点都可以主动发起“查询节点”的请求（对应于协议类型 FIND_NODE），从而刷新 K 桶中的节点信息。
  2. 被动收集节点：如果收到其它节点发来的请求（协议类型 FIND_NODE 或 FIND_VALUE），会把对方的 ID 加入自己的某个 K 桶中。
探测失效节点：  
Kademlia协议还支持一种探测机制（协议类型 PING），可以判断某个 ID
的节点是否在线。因此就可以定期探测路由表中的每一个节点，然后把下线的节点从路由表中删除。  
find_node（查找节点）被用来查找给定ID的node的联系信息。find_node请求包含2个参数，第一个参数是ID，包含了请求节点的节点ID。第二个参数是目标target，包含了请求者正在查找的目标节点的节点ID。当一个节点接收到了find_node的请求，他应该给出对应的回复，回复中包含2个关键字：ID和nodes，nodes是一个字符串类型，包含了被请求节点的路由表中最接近目标节点的K(8)个最接近的nodes的联系信息。find_node过程举例如图2。
图2. find_node过程举例
###  2.2 探测原理
探测器的探测原理如下：
  1. 随机生成一些ip伪装成Mozi节点隐匿于正常P2P网络中；
  2. 这些伪Mozi节点从信息记录表中获取批量真实的Mozi节点信息(由若干IP和Port组成)，然后向这些真实Mozi节点发送基于Mozi协议的find_node数据包(添加Mozi认证四字节数据)。即图1中探测器向已知Mozi网络发送Mozi请求。伪节点向真实节点发送find_node数据包的过程实际上是向网络中任一节点N发起一个find_node请求，请求的ID是自己，N收到该请求之后，会先把伪节点的ID加入自己的某个 K 桶中。然后，根据 FIND_NODE 协议的约定，N会找到K个最接近伪节点的节点返回给该伪节点，伪节点即可填充自己的路由表，然后通过路由扩散原理向整个Mozi僵尸网络扩散自己的节点信息；
  3. 由于P2P网络特性，真实节点可能会将伪节点的节点信息发送给其他Mozi节点，使得其他Mozi节点可能存在一定几率向伪节点发送相应的DHT数据包，伪节点再验证这些数据包是否能通过Mozi节点验证算法，如通过，则会记录下Mozi节点ID、IP及其端口信息，并将相应的IP和端口信息添加至Mozi节点信息记录表中。然后，通过已知Mozi节点的K-桶信息继续发现新的Mozi节点。根据DHT的查找节点原理，每个Mozi节点的K-桶中都包含大量其他邻居Mozi节点信息，因此读取K-桶信息会大大加快未知Mozi节点探测速度，呈倍增趋势。  
###  2.3 探测器具体实现步骤
  1. 构建多个扫描节点（可在本地或者vps上）；
  2. 在VPS上运行一个扫描任务分发程序（这里我们直接使用redis构建了一个扫描任务分发队列），扫描节点直接从redis中拉取扫描任务；
  3. 扫描任务实际上就是由若干IP:Port组成的数据集，该数据集实际上是Mozi节点的IP地址和P2P服务开放的端口；
获得扫描结果后，将结果暂存到中间服务器中，最后由相应的程序写入到Mongo DB数据库中。  
注意: 网络带宽会影响到扫描结果，因此尽可能选择带宽大的地方。
## 三、loT蜜罐测试
我们借助loT蜜罐测试诱捕探测器结果的覆盖率。loT蜜罐是通过模拟Mozi网络中常用到的漏洞来吸引Mozi的攻击，从而获取相应的Mozi传播的URL地址。同时，该蜜罐可给诱捕探测提供初始Mozi节点。
###  3.1 验证原理
由于loT蜜罐是纯粹的被动探测，与我们的诱捕探测技术是完全相互独立的两种探测方式，因此可以将蜜罐获取的Mozi节点看作整个Mozi网络的随机取样，即缩小样本规模。然后在采用诱捕探测技术获取的节点库中寻找重复节点，将重复节点的出现概率记作“重合度”：  
重合度=(诱捕探测和蜜罐收集结果数量的交集)/蜜罐收集数量
重复度可以作为衡量我们探测技术准确度的指标。
###  3.2 结果分析
我们选取了时间2021年3月28日至4月9日共13日扫描节点数据（每日Mozi网络活跃的IP数量）进行分析，数据如表1所示：
表1. 9日扫描节点数据
图3. 扫描结果9日走势
图4. 重合度9日走势
根据上表绘制图3和图4走势图。数据显示，我们的诱捕探测结果与loT蜜罐结果的重复节点数量极多，重合度极高。  
但是，诱捕探测得到的Mozi网络IP数量远大于蜜罐所得IP数量，是因为蜜罐所得数据是开放了HTTP服务下载的Mozi节点，而诱捕探测是针对能够进行P2P网络通信的Mozi节点，事实上开放HTTP
服务的Mozi节点很容易被安全专家发现并阻断通信，因此诱捕探测所得到的Mozi节点数量远大于蜜罐收集的数量。
## 四、两种探测技术对比
我们称上一篇文章Mozi（二）所介绍的渐进式节点主动追踪装置为“探测技术1”，称本文介绍的方法为“探测技术2”。两种探测技术原理不同，因此探测结果可看成是相互独立的。  
我们取探测技术1所得三日活跃Mozi节点所在IP作为整个Mozi网络的随机样本，取探测技术2所得历史存量节点所在IP（即曾被感染过的节点总量）为参照样本，将两个样本内容做比对，计算重合度，具体数据见表2。  
表2. 两种探测技术数据对比
两种探测技术的优缺点对比于表3，我们通过技术2发现新前缀，再利用技术1快速挖掘感染节点，两种探测技术配合，为发现Mozi节点提供有力的技术保障。  
表3. 两种探测技术优缺点对比
同时，我们对比两种技术探测到的节点数量，发现数据重合度极高，这表明两种探测方法发现的节点绝大部分是一致的。由于两种扫描器的探测速度依赖于已知节点数量，是呈倍数（1:N）增长的，但Mozi感染新节点的速度理论上小于倍速，两条非平行的增长曲线在某个时刻一定会交叉，而这个交叉点所在的时刻就是探测触到Mozi网络边界的时刻。
PS：关注了微信公众号“知微攻防实验室”的小伙伴们，仔细观察公众号版文章会发现隐藏彩蛋哦！