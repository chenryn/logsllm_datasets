static_configs:
 scheme defaults to 'http'.
metrics_path defaults to'/metrics'
targets:
"first_rules.yml"
127.0.0.1:9093
15s # Set the scrape interval to every 15 seconds
Prometheus蓝控与Grafana可视化平台第7章
会自动创建，用户也可以通过参数
317
---
## Page 329
318
格式如下：
yml文件中看到如下内容：
Prometheus基础配置也就搭建完成了。
主要是Exporters 的端口，在这里9100其实是 node_exporter的默认端口。
被监控的节点，例如：
定的是Prometheus 本机的一个监控节点，对应的9090端口，可以继续扩展加入其他需要
高性能Linux服务器运维实战：shell编程、监控告警、性能优化与实战案例
redis:9100','1ogserver:9100!,redis2:9100]
默认first_rules.yml和 second_rules.yml都是注释状态，需要去掉前面的#，rules 文件
Alert rules一般在单独的文件中定义，然后在 prometheus.yml中引用，可以在prometheus.
配置完成后，Prometheus 可以通过配置文件识别监控的节点，开始持续采集数据，
4.
可以看到targets 可以并列写入多个节点，用逗号隔开，
这里定义了一个Job 的名称job_name：prometheus，
》rule_files指定加载的告警规则文件，告警规则放到下面来介绍。
》global是一些常规的全局配置，
对重要参数介绍如下。
PrometheusServer的告警规则配置
即静态地指定每一个目标，例如：
中每个监控目标是一个 Job,但 Job 的类型有很多种。可以是最简单的 static_config，
- targets: ['localhost:9090']
evaluation_interval:
scrape_interval:
-targets:[1ocalhost:9090','172.16.213.232:9100']
groups:
[root@localhost ~]#cat first_rules.yml
rule_files:
static_configs:
job_name:'aliyun'
static_configs:
-job name:prometheus
rules:
name:example
#
targets:[server1:9100','IP:9100",'nginxserver:9100',web01:9100
alert:
"second_rules.yml"
"first_rules.yml"
InstanceDown
15s
15s
这里只列出了两个参数，含义如下：
#每15s做一次告警检测
#每15s采集一次数据
然后开始定义监控节点，这里指
，包括机器名+端口号，端口号
---
## Page 330
可以在Prometheus的Rules页面看到告警规则以及目前的状态如图7-4所示。
器，也可以单独部署，Alertmanager的部署下面会介绍。重新加载Prometheus配置文件后，
配置如下：
由以下几部分组成。
义在一个 group下。
这里的127.0.0.1:9093就是Alertmanager的地址和端口，可以跟Prometheus在一台机
告警规则配置完成后，需要注意，还要在prometheus.yml中配置Alertmanager的地址，
》alert：告警规则的名称。
这里介绍下这个规则文件的含义。在告警规则文件中，可以将一组相关的规则设置定
Rules
Prometheus
V
V
V
example
Alertmanager的UI也会根据这两个标签值显示告警信息。
summary：描述告警的概要信息，description 用于描述告警的详细信息。同时
annotations的内容在告警产生时会一同作为参数发送到Alertmanager。
annotations：用于指定一组附加信息，例如，用于描述告警详细信息的文字等
expr:基于PromQL表达式的告警触发条件，用于计算是否有时间序列满足该条件。
labels：自定义标签，允许用户指定要附加到告警上的一组附加标签。
告警。
for：评估等待时间，可选参数。用于表示只有当触发条件持续一段时间后才发送
alerting:
# Alertmanager configuration
alertmanagers:
static_configs:
，在等待期间新产生告警的状态为 pending。
annotations:
labels:
for:1m
expr:up==0
-127.0.0.1:9093
targets:
Summary: Instance has been down for more than 5 minutes
severity: critical
doet for nore than 3 ainutet
StatusHep
Rules
图7-4Prometheus 的 Rules页面告警规则
d-Line Flags
Prometheus监控与Grafana可视化平台第7章
State
Error
3.9245 ago
Lnst Evalkuation
3.924s ago
一条告警规则主要
451.9us
Evaluation Time
467.8us
319
---
## Page 331
的版本是node_exporter-0.18.1.linux-amd64.tar.gz，下载之后解压缩，然后直接运行即可。
可运行。首先从Prometheus官网 https://prometheus.io/download/下载 node_exporter，这里下载
集量是很快、很全的，默认的采集项目就远超过了实际需求，接下来看看Node Exporter
在后台，并且持续不断采集Linux系统中各种操作系统本身相关的监控参数的程序，其采
本数据即可。
的主机上，也可以直接内置在监控目标中。只要能够向Prometheus提供标准格式的监控样
服务地址（通常是/metrics）拉取监控样本数据。
如主机的CPU使用率，需要使用到Exporter。Prometheus 周期性地从 Exporter 暴露的HTTP
务是负责数据的收集、存储并且对外提供数据查询支持。因此为了能够监控到某些数据，
7.1.4NodeExporter的功能介绍与安装配置
高性能Linux服务器运维实战：shell编程、监控告警、性能优化与实战案例
320
所示。
如何安装。
NodeExporter主要用于采集被监控主机上的CPU负载、内存的使用情况、网络等数
运行起来以后，使用 netstats -tnlp 命令可以查看 node_exporter 进程的状态，如图 7-6
node_exporter的安装、运行非常简单，过程如下所示：
NodeExporter采用Golang 编写，并且不存在任何的第三方依赖，只需要下载、解压，即
在Prometheus的架构设计中，Prometheus Server并不直接监控特定的目标，其主要任
1.NodeExporter的安装与基本使用
当有告警产生时，就会在这个Alters 页面出现告警。
要查看Alerts 页面是否有告警触发，可查看如图7-5所示的页面。
[root@localhost node_exporter-0.18.1.linux-amd64]#nohup ./node_exporter &
[root@localhost ~]# tar zxvf node_exporter-0.18.1.linux-amd64.tar.gz
IinstanceDown (O active)
OShowanotalions
Alerts
theus
图7-5Prometheus 的Alerts 告警触发页面
---
## Page 332
的是当前状态，数据可能增加也可能减少，从注释中可以看出当前指标类型为仪表盘
（Counter），与该指标的实际含义一致。又例如，node_load1 指标反映了当前主机在最近
用时间是一个只增不减的度量指标，从类型中也可以看出 node_cpu的数据类型是计数器
以看到 node_exporter 是否能返回大量的metrics类型K/V 数据。
如图7-7所示。
也可以响应其他方式的HTTP_GET请求，最简单的方式，在浏览器打开：
SELinux等，确保node_exporter 可以响应prometheus_server发过来的 HTTP_GET请求，
1min内的负载情况，系统的负载情况会随系统资源的使用而变化，因此node_loadl反映
的例子中，node_cpu的注释表明当前指标是cpuO上idle进程占用CPU的总时间，CPU占
其中，HELP 用于解释当前指标的含义，TYPE 则说明当前指标的数据类型。在上面
从图7-7中可以看出，Exporter 返回的数据格式如下：
可以看到，已经有监控指标生成，也可以在 prometheus_server上执行curl 操作，也可
看是否有初始Node Exporter监控指标生成，这里的node_exporter为172.16.213.232，
这里可以看出 node_exporter 默认监听在 9100 端口。要关闭被监控机上的防火墙、
node_1oad13.0703125
#TYPE node_loadlgauge
node_cpu{cpu="cpu0",mode="idle"} 362812.7890625
#HELP node cpu Seconds the cpus spent in each mode.
http://“node_exporter所在服务器的IP地址”：9100/metrics
#HELP node_load1 1m load average.
#TYPE node_cpu counter
nodedisk i nordevie
ode
ode
HELP node_boot_time_
TYPE
SWI
图7-6node_exporter 进程对应的9100端口
不安全丨172.16.213.2329100/metrics
图7-7Node Exporter监控指标数据
_seconds Node boot time, in unixtime.
Prometheus蓝控与Grafana可视化平台
the cpus spent in each mode
nds the cpus spent in guests (VMs) for each mode
"nice”) 0
NAISIT
21886/./node_export
第7章
32
---
## Page 333
322
体数值，如图7-9所示。
MemFree_bytes复制到Prometheus的查询命令行，就可以看到状态曲线了，如图7-8所示。
node memory_MemFree
存信息，在Prometheus Server上执行如下命令查看：
果，例如，来看一个 node_memory_MemFree的数据，此值返回的数据是被监控主机的内
询关键字以外，还内置了大量的函数，
（gauge），与指标反映的实际含义一致。
高性能Linux服务器运维实战：shell编程、监控告警、性能优化与实战案例
图7-8是图形方式展示 node_memory_MemFree_bytes 的值，也可以在console 展示具
可以看到，node_memory_MemFree_bytes 此刻的值为4.775989248e+09，将node_memory_
可以将上图中返回的metrics直接复制在PrometheusServerUI的查询命令行来查看结
PromQL是Prometheus自定义的-
2.
使用PromQL查询监控数据
node_memory_MemFree_bytes 4.775989248e+09
#TYPE node memory MemFree bytes gauge
[root@1ocalhost ~1# curl http://172.16.213.232:9100/metricslgrep
process_：Node Exporter自身进程相关运行指标
go：NodeExporter中go相关指标
nodetime：当前系统时间
node_network：网络带宽
node_memory：内存使用量
node_loadl：系统负载
node_filesystem：文件系统用量
node_disk:磁盘I/0
node_cpu：系统cPu使用量
node_boot_time：系统启动时间
.776G
Cansce 表桥展示
图7-8图形方式展示 node_memory_MemFree_bytes 结果
o
Res(）
，帮助用户进一步对时序数据进行处理。
一套强大的数据查询语言，除了使用监控指标作为查
M
M
w
---
## Page 334
CPU去除后聚合数据即可，PromQL语句如下：
图7-10所示。
据的变化情况即增长率，因此通过该函数可以查看指定时间内 node_loadl的状态值，如
Prometheus UI查询如图7-11所示。
如果要查看CPU使用率，同时忽略是哪一个CPU，可以使用without表达式，将标签
PromQL还内置了大量的函数，例如，使用rateO函数，可以计算在单位时间内样本数
avg without(cpu) (rate(node_cpu_seconds_total[2m] ))
Promet
图7-9数值方式展示node_memory_MemFree_bytes 结果
图7-10查看指定时间内node_load1的状态图
图7-11
通过指定条件查看CPU使用率
323
---
## Page 335
http://IP地址:9093/#/alerts就可以打开Alertmanager 的页面，如图7-13所示。
324
就可以启动Alertmanager 服务。这里将Alertmanager服务放到后台去运行，然后通过
完成安装，操作如下：
对应的方式发送出去。将告警集中到Alertmanager，可以对告警进行更细致地管理。
7.1.5
表达出正式业务含义的语言。
操作。通过这些丰富的表达语句，监控指标不再是一个单独存在的个体，而是一个个能够
PromQL语句如下：
高性能Linux服务器运维实战：shell编程、监控告警、性能优化与实战案例
Alertmanager用来接收Prometheus 发出的告警，然后按照配置文件的要求，将告警用
PrometheusUI查询结果如图7-12所示。
如果需要计算系统CPU的总体使用率，通过排除系统闲置的CPU使用率即可获得，
1.Alertmanager的安装和启动
由此可知，通过PromQL可以非常方便地对数据进行查询、过滤、聚合，以及计算等
Alertmanager的安装和配置
1-avg without(cpu)
[root@localhost alertmanager-0.19.0.1inux-amd64]# nohup ./alertmanager &
alertmanager alertmanager.ymlamtool dataLIcENsE
[root@localhost app]# cd alertmanager-0.19.0.1inux-amd64/
[root@localhost ~]# tar zxvf alertmanager-0.19.0.linux-amd64.tar.gz
图7-12通过PromQL语句查询指定条件下CPU状态图
(rate (node_cpu_seconds_total(mode="idle") [3m] ))
NOTICE
---
## Page 336
方式。
是Alertmananger将告警转发到这个URL。
Alertmanager提供多种告警处理方式，
> opsgenie_config。
>email_config。
其中最主要的是receivers，它定义了告警的处理方式，这里是webhook_config，意思
>slack_config。
> pushover_config。
>pagerduty_config
>hipchat_config。