### 滴水逆向课程笔记 - Win32

#### 第一个Windows程序

```c
// 转换消息
TranslateMessage(&msg);
// 分发消息：将消息传递给窗口处理函数
DispatchMessage(&msg);
```

#### 消息类型

##### 17.1 消息的产生与处理流程

当用户点击某个窗口时，会产生一个消息。操作系统会先确定被点击的窗口，找到对应的窗口对象，并根据该对象中的成员找到相应的线程。随后，系统会将封装好的消息（包括鼠标点击坐标等信息）存入对应的消息队列中。应用程序通过 `GetMessage` 函数不断从消息队列中取出消息。

##### 17.2 消息结构体

我们使用 `GetMessage` 函数接收消息，其第一个参数是消息结构体。可以通过在代码中选中 `MSG` 然后按 F12 查看消息结构体的定义：

```c
typedef struct tagMSG {
    HWND   hwnd;      // 所属窗口句柄
    UINT   message;   // 消息类型：编号
    WPARAM wParam;    // 附加数据，进一步描述消息
    LPARAM lParam;    // 附加数据，进一步描述消息
    DWORD  time;      // 消息产生的时间
    POINT  pt;        // 产生消息的位置
} MSG, *PMSG;
```

消息结构体包含的信息有限，仅能知道消息属于哪个窗口，但无法直接知道对应的窗口函数。因此，我们需要调用 `DispatchMessage` 函数来分发消息，由内核发起调用来执行窗口函数。

##### 17.3 消息类型

为了关注特定的消息类型，可以在窗口函数中打印消息类型。例如，输出消息类型为 `0x1` 的情况，可以查看 `WINUSER.H` 文件中的定义：

```c
LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {
    char szOutBuff[0x80];
    sprintf(szOutBuff, "Message: %x - %x \n", hwnd, uMsg);
    OutputDebugString(szOutBuff);
    
    // 调用默认的消息处理函数
    return DefWindowProc(hwnd, uMsg, wParam, lParam);
}
```

通过查找 `WINUSER.H` 文件，可以发现 `0x0001` 对应的是 `WM_CREATE` 消息，表示窗口创建。有很多消息是我们不需要特别关注的，因为它们时刻都在产生。

##### 17.3.1 处理窗口关闭

当窗口关闭时，进程不会自动退出，因此需要在窗口函数中添加条件判断，在窗口关闭时退出进程：

```c
case WM_DESTROY:
{
    PostQuitMessage(0);
    break;
}
```

##### 17.3.2 处理键盘按下

除了处理窗口关闭，还可以处理键盘按键事件。例如，处理 `a` 键按下：

```c
case WM_KEYDOWN:
{
    char szOutBuff[0x80];
    sprintf(szOutBuff, "keycode: %x \n", wParam);
    OutputDebugString(szOutBuff);
    break;
}
```

按下 `a` 键后，虚拟键码为 `0x41`。

##### 17.4 转换消息

如果希望直接看到输入的字符而不是虚拟键码，可以使用 `WM_CHAR` 消息。这需要先对消息进行转换：

```c
case WM_CHAR:
{
    char szOutBuff[0x80];
    sprintf(szOutBuff, "keycode: %c \n", wParam);
    OutputDebugString(szOutBuff);
    break;
}
```

### 子窗口控件

##### 18.1 关于子窗口控件

Windows 提供了几种预定义的窗口类，称为子窗口控件或简称为控件。这些控件能够自行处理消息，并在状态改变时通知父窗口。常见的预定义控件包括按钮、复选框、编辑框、静态字符串标签和滚动条等。

##### 18.2 创建编辑框和按钮

可以使用 `CreateWindow` 函数在窗口函数中创建子窗口控件。以下是一个示例：

```c
#define CWA_EDIT 0x100
#define CWA_BUTTON_0 0x101
#define CWA_BUTTON_1 0x102

HINSTANCE gHinstance;

LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {
    switch (uMsg) {
    case WM_CHAR:
    {
        char szOutBuff[0x80];
        sprintf(szOutBuff, "keycode: %c \n", wParam);
        OutputDebugString(szOutBuff);
        break;
    }
    case WM_CREATE:
    {
        // 创建编辑框
        CreateWindow(
            TEXT("EDIT"), 
            TEXT(""), 
            WS_CHILD | WS_VISIBLE | WS_VSCROLL | ES_MULTILINE,
            0, 0, 400, 300, 
            hwnd, (HMENU)CWA_EDIT, 
            gHinstance, NULL
        );

        // 创建"设置"按钮
        CreateWindow(
            TEXT("BUTTON"), 
            TEXT("设置"), 
            WS_CHILD | WS_VISIBLE, 
            450, 150, 80, 20, 
            hwnd, (HMENU)CWA_BUTTON_0, 
            gHinstance, NULL
        );

        // 创建"获取"按钮
        CreateWindow(
            TEXT("BUTTON"), 
            TEXT("获取"), 
            WS_CHILD | WS_VISIBLE, 
            450, 100, 80, 20, 
            hwnd, (HMENU)CWA_BUTTON_1, 
            gHinstance, NULL
        );
        break;
    }
    case WM_COMMAND:
    {
        switch (LOWORD(wParam)) {
        case CWA_BUTTON_0:
        {
            SetDlgItemText(hwnd, (int)CWA_EDIT, TEXT("HACK THE WORLD"));
            break;
        }
        case CWA_BUTTON_1:
        {
            TCHAR szEditBuffer[0x80];
            GetDlgItemText(hwnd, (int)CWA_EDIT, szEditBuffer, 0x80);
            MessageBox(NULL, szEditBuffer, NULL, NULL);
            break;
        }
        }
        break;
    }
    }
    return DefWindowProc(hwnd, uMsg, wParam, lParam);
}
```

通过这种方式，我们可以创建和管理子窗口控件，并处理它们产生的消息。