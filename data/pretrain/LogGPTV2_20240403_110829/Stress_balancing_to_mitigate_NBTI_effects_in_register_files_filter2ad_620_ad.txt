Regs 
periodically  
Toggling 
Infrequent state register 
“Ones“  
“Zeros“  
(toggled-case) 
 (non-toggled-case) 
IF (CycleCounter ≥ threshold) 
Stall the CPU 
Start the Toggling: 
  Toggle each infrequent register 
  Toggle the infrequent state register 
Reset the CycleCounter 
Start the CPU again 
ELSE 
Increase the CycleCounter 
Reading/Writing an infrequent register 
The value is always XORd with the 
infrequent state register 
Modification the application to 
group the infrequent registers 
Executing 
phase 
Training data set 
Profiling  
phase 
Infrequent 
Regs 
Register 
permutation 
in binary 
NBTI balancing in frequent registers 
NBTI balancing in infrequent registers 
Writing a value into a Reg 
Reading a value from a Reg 
Frequent register layout 
31 
LSB 
2 
1 
0 
S-bit 
M-bit 
R-bit 
Upper half 
Lower half 
S-bit: Swap Bit 
M-bit: Manipulate Bit 
R-bit: Relax Bit 
Fig. 6. Mechanism of selectively balancing the NBTI stress in the frequent and infrequent registers of a register ﬁle according to our proposed technique
Through software,
infrequent register toggling can be
accomplished by inserting extra xor assembly instructions
that periodically toggle the infrequent registers. Whether or
not the register is in a toggled state needs to be determined
when reading and writing from/to the register by adding
extra assembly instructions that ﬁrst decode the value of the
register before it is used. A simple case for this is the move
instruction which loads or stores the value of the register.
Since there is no direct hardware implementation of the move
instruction, the GNU assembler replaces it with add. Thus, for
instance move $13, 5 which loads the value 5 into register
13 is replaced with add $13, $0, 5 which has the same
effect. Here, the toggling can be implemented in software,
by replacing the move instruction with xor $13, $x, 5 if
the register value needs to be toggled where $x is a register
containing all ones. In the case of the move command, the
toggling can thus be implemented with no additional overhead
in instruction count. Other instructions, however, need to be
replaced by multiple instructions that ﬁrst perform the xor
separately.
In general, there are two scenarios in the software imple-
mentation: either there is a register which is unused during
application execution or not. If such a register exists, it can be
exploited to store the 32-bit infrequent state register. Assuming
this register is $x, a default implementation for a general
instruction instr $i for the infrequent register $i using
in-register decoding is as follows:
xor
instr $i
xor
$i, $x, $i
$i, $x, $i
Thus adding two extra instructions in the general case
(unlike the special case of, e.g. the move instruction which
takes no additional cycles). Since infrequent register accesses
comprise less than 0.1% of the total read/write accesses
(typically around 100 accesses per application), this overhead
is negligible. The greater overhead arises when the infrequent
registers are toggled, as this occurs more often and involves
the infrequent state register as well as all n infrequent registers
$i1 ... $in:
$x,
nor $x,
$zero
nor $i1, $i1, $zero
...
nor $in, $in, $zero
This toggling is performed every interval Δt which is
targeted to be around each 100k cycles, adding an overhead of
ab· (n + 1) cycles at each iteration, with ab being the overhead
for each bitwise logic operation, e.g. through the nor and xor
instructions. In our simulator, ab is equal to one cycle. The
performance overhead for an application with total execution
time E is thus:
· ab · (n + 1) + 2 · ab · n(cid:6)
E
Δt
Ak cycles
(1)
where Ak is the number of accesses to register $ik, k ∈ [1, n].
If there is no extra register available to store the infrequent
state register however, there are two possibilities. The ﬁrst is
to use immediate values3, transforming the instructions to:
k=1
xori
rol
xori
rol
instr $i
xori
rol
xori
rol
$i, $i, 0xFFFF
$i, $i, 16
$i, $i, 0xFFFF
$i, $i, 16
$i, $i, 0xFFFF
$i, $i, 16
$i, $i, 0xFFFF
$i, $i, 16
if $i is toggled, and simply inst $i if not. In this case the
compiler must keep track of whether or not the register value
3MIPS immediate instructions operate on 16 bits.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:40:27 UTC from IEEE Xplore.  Restrictions apply. 
(cid:4)n
has been toggled. The worst performance overhead is 8 · ab ·
k=1 Ak. This method, however, has the major shortcoming
that it cannot be used inside a loop since the compiler needs
to know the toggle state, and it is therefore not usable for
many applications. To allow this, it is necessary to store the
infrequent state in memory and use one of the non-infrequent
registers as a temporary register $t:
sw
lw
xor
instr $i
xor
lw
$t, [temp_addr]
$t, [infreq_state_addr]
$i, $t, $i
$i, $t, $i
$t, [temp_addr]
which adds 3 · (al · 2) + 2 · ab cycles where al is the overhead
of a load or store instruction. sw and lw both require two
store or load operations, respectively, since MIPS only allows
storing/loading 16 bits at a time. In our simulator, this overhead
was 14 cycles.
sw $t, [temp_addr]
lw $t, [infreq_state_addr]
nor $t, $t, $zero
nor $i1, $i1, $zero
...
nor $in, $in, $zero
sw $t, [infreq_state_addr]
lw $t, [temp_addr]
which adds 4 · (al · 2) + (n + 1) · ab cycles (= 17 + n cycles
in simulation). The total performance overhead is:
· (8· al + (n + 1)· ab) + (6· al + 2· ab)· n(cid:6)
E
Δt
runtime (see Fig 6). A counter is needed that counts the
number of cycles until it reaches the predetermined threshold
at which point toggling is performed. Additionally, the CPU
needs to be stalled during toggling to ensure that the value
of the register remains consistent before and after toggling as
well as to avoid any potential conﬂicts from register accesses
while toggling. During a read/write operation to the register,
the value is always XORd with a dedicated infrequent state
register which contains either all zeros (non-toggled) or all
ones (register value toggled) depending on the toggle state of
the register.
The hardware implementation requires the location of the
infrequent registers to be known a priori. To this end, we
use a post-compilation strategy that modiﬁes the binary of an
application. Practically, we permutate the registers to guarantee
that the infrequent registers are always located in the dedicated
part in the register ﬁle. For instance, exchanging the registers
x and y means replacing all occurrence of register x with y
and similarly replacing those of y with x.
The threshold of toggling the infrequent registers is chosen
as 100,000 cycles in our implementation. Based on our exper-
iments this interval presents a trade-off between the execution
overhead and achieved balancing in terms of ABPF . Table I
demonstrates the potential impact of aforementioned trade-off.
As noticed, larger intervals will result in less optimal NBTI-
balanced SRAM cells per application (i.e.
the percentage
of SRAM duty cycle that is near to 50% is less) but they
have smaller overhead in terms of execution cycles. Smaller
intervals, on the other hand, would be accompanied by a
noticeable performance loss but with more balanced ABPF .
Ak cycles (2)
TABLE I.
THE POTENTIAL EFFECTS OF THE CHOSEN INTERVAL TO
TOGGLE THE infrequent registers ON THE EXECUTION CYCLES AND
PERCENTAGE OF OPTIMAL NBTI-BALANCED REGISTER FILE BITS
k=1
The main challenge in implementing the software approach
is ﬁnding a suitable place in the code to perform toggling.
At present, this requires manually proﬁling each application
and inserting the corresponding toggle instructions into the
assembly code. In practice, we were able to ﬁnd a free register
to use as the infrequent state register in almost all benchmarks.
This is due to the fact that the GNU assembler often did not
make use of the assembler temporary register $1.
The advantage of this approach is that it does not modify
the hardware and therefore has no area overhead and can
be used on existing hardware. An additional beneﬁt of the
software implementation is that it can be applied for multiple
applications when multitasking is used since it does not phys-
ically change the register ﬁle. In such a case, each application
must store its own separate register state in memory. On
the other hand,
the cost
of performance degradation due to the extra cycles that are
required for the additional inserted assembly instructions and
possible memory accesses (e.g. to store the register state).
Since only infrequent registers are affected. However,
this
overhead remains low due to their small access count, our
average measured overhead being a 3.7% increase in execution
cycles.
the software approach comes at
The hardware implementation can be done by gathering
the infrequent registers in a speciﬁc part of the register ﬁle.
Then, periodically toggling the registers in that part over the
Interval
(cycle)
100
100K
5M
Measured
Effect
Exec. cycle overhead
Total λ ∈ 50% ± 5%
Exec. cycle overhead
Total λ ∈ 50% ± 5%
Exec. cycle overhead
Total λ ∈ 50% ± 5%
C. Potential Overhead
adpcm
encoder
80%
68%
adpcm
decoder
84%
71%
qsort
59%
53%
0.016%
0.017%
0.012%
58%
< 10−4% < 10−4% 10−4%
58%
43%
55%
23%
18%
To investigate the total overhead of implementing our
technique, for both cases hardware/software, in terms of area
and power, the Synopsys Design Compiler has been used with
the 45 nm TSMC technology library. As explained earlier,
the frequent registers are always relaxed in the hardware and
we mean by the hardware/software case, the corresponding
implementation to tackle the NBTI stress in the infrequent
registers. Indeed, our technique requires three ﬂag bits associ-
ated with each frequent register in addition to the infrequent
state register (only in the hardware case). The total area of
extra components is 1402 μm2 and 1073 μm2 for the case
of hardware4 and software, respectively. The total additional
consumed power, for each application,
is demonstrated in
4The relative overhead is around 2.5% when the same TSMC library for
the register ﬁle is used.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:40:27 UTC from IEEE Xplore.  Restrictions apply. 
Fig 7. On average, it reaches 129 μW and 109 μW which can
increase the register ﬁle power consumption by approximately
1.8% and 1.4% for the hardware and software cases, respec-
tively. From the power density perspective, our technique still
roughly consumes similar power per area resulting in operating
at a similar temperature. This, in turn, neutralizes the inﬂuence
of temperature on NBTI when our technique to mitigate the
NBTI is applied. We also found that the extra three ﬂag bits
associated with each frequent register (as clariﬁed in Fig 6)
slightly increase the access latency with around 1.6% (roughly
estimated by Faraday Memory Compiler Architecture [24]).
Moreover, the conversion operation would affect the processor
performance only if the decode/register-access would be on the
critical path and reduce the frequency. However, this is not the
case for the DLX and Leon3 CPUs that we implemented on
Xilinx Virtex-5 FPGA.
On the other hand, our experimental results show that,
on average, the number of cycles required for executing an
application is only marginally increased (<0.01% on average).
Last but not
latest, despite the infrequent registers being
scarcely read or written (see Section IV), we still investigate
the total read/write operations occurring in the infrequent
registers during the execution of an application to ensure that
the XOR component will not be often accessed. We found that,
on average, only 0.08% and 0.07% of the total write and read
operations, respectively, occur in the infrequent registers.
Frequent: Hardware 
Our Implementation
Infrequent: Hardware 
Frequent: Hardware 
Our Implementation
Infrequent: Software 
]
W
u
[
d
a
e
h
r
e
v
o
r
e
w
o
p
l
a
t
o
T
180
160
140
120
100
80
60
40
20
0
Fig. 7. Total power overhead after implementing our introduced technique
to mitigate the NBTI effects in the register ﬁle
D. Other Microrchitectures
Although not our focus in this work, our proposed tech-