```
这里需要注意的一点是，todobackend 数据与我们在第 1 章中加载回的数据相同，尽管我们从头开始构建了 Docker 映像。这里的问题是，在第 1 章中创建的 SQLite 数据库位于`src`文件夹中，在一个名为`db.sqlite3`的文件中。显然，我们不想在构建过程中将这个文件复制到我们的 Docker 映像中，实现这一点的一种方法是在存储库的根目录下创建一个`.dockerignore`文件:
```
# Ignore SQLite database files
**/***.sqlite3
# Ignore test output and private code coverage files
**/*.xml
**/.coverage
# Ignore compiled Python source files
**/*.pyc
**/pycache# Ignore macOS directory metadata files
**/.DS_Store
```
`.dockerignore`文件的工作方式与 Git 存储库中的`.gitignore`相似，用于从 Docker 构建上下文中排除文件。因为`db.sqlite3`文件位于子文件夹中，所以我们使用了`**`的通配符匹配模式(注意这与`.gitignore`行为不同，后者默认匹配)，这意味着我们递归地排除任何匹配通配符模式的文件。我们还排除了任何扩展名为`.xml`的测试输出文件、代码覆盖文件、`__pycache__`文件夹以及任何编译后的扩展名为`.pyc`的 Python 文件，这些文件旨在运行时动态生成。
如果您现在重建 Docker 映像并在端口`8000`上本地启动`uwsgi`网络服务器，当您浏览到应用(`http://localhost:8000`)时，您将获得不同的错误:
![](img/c7ab5b6d-1d1b-47d8-8242-5e7c51cc22c4.png)
现在的问题是 todobackend 应用不存在数据库，因此应用失败，因为它找不到存储 Todo 项的表。为了解决这个问题，我们现在需要与外部数据库引擎集成，这意味着我们需要一个解决方案来本地处理多个容器。
# 使用 Docker Compose 测试和构建应用
在上一节中，您使用了 Docker 命令来执行以下任务:
*   构建测试映像
*   运行测试
*   构建发布映像
*   运行应用
每次我们运行 Docker 命令时，我们都必须提供相当多的配置，试图记住您需要运行的各种命令已经开始变得困难了。除此之外，我们还发现，要启动应用的发布映像，我们需要一个可操作的外部数据库。对于本地测试用例，在另一个容器中运行外部数据库是一个很好的方法，但是必须通过运行一系列具有大量不同输入参数的 Docker 命令来协调这一点，这变得很难管理。
**Docker Compose** 是一个工具，它允许您使用声明性方法来编排多容器环境，使得编排可能需要多个容器的复杂工作流变得更加容易。按照惯例，Docker Compose 会在当前目录中查找一个名为`docker-compose.yml`的文件，所以让我们在`todobackend`存储库的根目录下，在我们的`Dockerfile`旁边创建这个文件:
```
version: '2.4'
services:
  test:
    build:
      context: .
      dockerfile: Dockerfile
      target: test
  release:
    build:
      context: .
      dockerfile: Dockerfile
```
Docker Compose files are defined in a YAML format, which requires proper indentation to infer the correct relationships between parent, siblings and child objects or properties.  If you have not worked with YAML before, you can check out the [Ansible YAML Syntax guide](https://docs.ansible.com/ansible/latest/reference_appendices/YAMLSyntax.html), which provides a brief introduction to YAML formatting.  You can also use an online YAML linting tool  such as http://www.yamllint.com/ to check your YAML, or install YAML support in your favourite text editor.
我们首先指定`version`属性，它是强制的，并且引用了我们正在使用的撰写文件格式语法的版本。如果您将 Docker 用于本地开发和构建任务，我建议使用 Compose 文件格式的 2.x 版本，因为它包含一些有用的功能，例如依赖服务的健康检查，我们将很快了解如何使用。如果您使用 Docker Swarm 来运行您的容器，那么您应该使用 Compose 文件格式的 3.x 版本，因为该版本支持许多与管理和编排 Docker Swarm 相关的功能。
If you choose to use version 3.x, your applications will need to be more robust in terms of dealing with scenarios such as your database not being available at application startup (see [https://docs.docker.com/compose/startup-order/](https://docs.docker.com/compose/startup-order/)), which is a problem we will encounter later on in this chapter.  
我们接下来指定`services`属性，它定义了在我们的 Docker Compose 环境中运行的一个或多个服务。在前面的例子中，我们创建了两个对应于我们工作流的测试和发布阶段的服务，然后为每个服务添加一个单独的`build`属性，它定义了我们想要如何为每个服务构建 Docker 映像。请注意，`build`属性基于我们传递给`docker build`命令的各种标志，例如，当我们构建测试阶段映像时，我们将构建上下文设置为本地文件夹，使用本地 Dockerfile 作为映像的构建规范，并且仅针对构建映像的测试阶段。我们不是在每次运行 Docker 命令时都强制指定这些设置，而是声明性地定义构建过程所需的配置，这是一个重要的区别。
当然，我们需要运行一个命令来实际构建这些服务，您可以通过在`todobackend`存储库的根目录下运行`docker-compose build`命令来实现:
```
> docker-compose build test
Building test
Step 1/12 : FROM alpine AS test
 ---> 3fd9065eaf02
Step 2/12 : LABEL application=todobackend
 ---> Using cache
 ---> 23e0c2657711
...
...
Step 12/12 : CMD ["python3", "manage.py", "test", "--noinput", "--settings=todobackend.settings_test"]
 ---> Running in 1ac9bded79bf
Removing intermediate container 1ac9bded79bf
 ---> f42d0d774c23
Successfully built f42d0d774c23
Successfully tagged todobackend_test:latest
```
您可以看到运行`docker-compose build test`命令相当于我们运行的较早的`docker build`命令，但是，我们不需要将任何构建选项或配置传递给`docker-compose`命令，因为我们的所有特定设置都捕获在`docker-compose.yml`文件中。
如果您现在想要从新构建的映像运行测试，您可以执行`docker-compose run`命令:
```
> docker-compose run test
Creating network "todobackend_default" with the default driver
nosetests --verbosity=2 --nologcapture --with-coverage --cover-package=todo --with-spec --spec-color --with-xunit --xunit-file=./unittests.xml --cover-xml --cover-xml-file=./coverage.xml
Creating test database for alias 'default'...
Ensure we can create a new todo item
- item has correct title
- item was created
- received 201 created status code
- received location header hyperlink
...
...
...
...
Ran 12 tests in 0.316s
OK
Destroying test database for alias 'default'...
```
您还可以扩展 Docker Compose 文件，将端口映射和命令配置添加到服务中，如下例所示:
```
version: '2.4'
services:
  test:
    build:
      context: .
      dockerfile: Dockerfile
      target: test
  release:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
 - 8000:8000
 command:
 - uwsgi
 - --http=0.0.0.0:8000
 - --module=todobackend.wsgi
 - --master
```
这里我们指定当发布服务运行时，它应该创建一个从主机上的端口`8000`到容器上的端口`8000`的静态端口映射，并将我们之前使用的`uwsgi`命令传递给发布容器。如果您现在使用`docker-compose up`命令运行发布阶段，请注意 Docker Compose 将自动为尚不存在的服务构建映像，然后启动服务:
```
> docker-compose up release
Building release
Step 1/22 : FROM alpine AS test
 ---> 3fd9065eaf02
Step 2/22 : LABEL application=todobackend
 ---> Using cache
 ---> 23e0c2657711
...
...
Successfully built 5b20207e3e9c
Successfully tagged todobackend_release:latest
WARNING: Image for service release was built because it did not already exist. To rebuild this image you must use `docker-compose build` or `docker-compose up --build`.
Creating todobackend_release_1 ... done
Attaching to todobackend_release_1
...
...
release_1 | *** uWSGI is running in multiple interpreter mode ***
release_1 | spawned uWSGI master process (pid: 1)
release_1 | spawned uWSGI worker 1 (pid: 6, cores: 1)
release_1 | spawned uWSGI http 1 (pid: 7)
```
You typically use the `docker-compose up` command for long-running services, and the `docker-compose run` command to run short-lived tasks. You also cannot override the command arguments passed to `docker-compose up`, whereas you can pass command overrides to the `docker-compose run` command.
# 使用 Docker 编写添加数据库服务
为了解决当前运行发布映像时出现的应用错误，我们需要运行应用可以连接到的数据库，并确保应用配置为使用该数据库。
我们可以使用 Docker Compose 通过添加一个名为`db`的新服务来实现这一点，该服务基于官方的 MySQL 服务器容器:
```
version: '2.4'
services:
  test:
    build:
      context: .
      dockerfile: Dockerfile
      target: test
  release:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - 8000:8000
    command:
      - uwsgi
      - --http=0.0.0.0:8000
      - --module=todobackend.wsgi
      - --master
  db:
 image: mysql:5.7
 environment:
 MYSQL_DATABASE: todobackend
 MYSQL_USER: todo
 MYSQL_PASSWORD: password
 MYSQL_ROOT_PASSWORD: password
```
请注意，您可以使用`image`属性指定外部映像，环境设置使用名为 todobackend 的数据库、用户名、密码和根密码来配置 MySQL 容器。
现在，您可能想知道我们如何配置我们的应用来使用 MySQL 和新的`db`服务。todobackend 应用包括一个名为`src/todobackend/settings_release.py`的设置文件，该文件配置了对 MySQL 作为数据库后端的支持:
```
# Import base settings
from .settings import *
import os
# Disable debug
DEBUG = True
# Set secret key
SECRET_KEY = os.environ.get('SECRET_KEY', SECRET_KEY)
# Must be explicitly specified when Debug is disabled
ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', '*').split(',')
# Database settings
DATABASES = {
    'default': {
        'ENGINE': 'mysql.connector.django',
        'NAME': os.environ.get('MYSQL_DATABASE','todobackend'),
        'USER': os.environ.get('MYSQL_USER','todo'),
        'PASSWORD': os.environ.get('MYSQL_PASSWORD','password'),
        'HOST': os.environ.get('MYSQL_HOST','localhost'),
        'PORT': os.environ.get('MYSQL_PORT','3306'),
    },
    'OPTIONS': {
      'init_command': "SET sql_mode='STRICT_TRANS_TABLES'"
    }
}
STATIC_ROOT = os.environ.get('STATIC_ROOT', '/public/static')
MEDIA_ROOT = os.environ.get('MEDIA_ROOT', '/public/media')
```
`DATABASES`设置包括一个指定`mysql.connector.django`引擎的配置，该引擎支持 MySQL 覆盖默认的 SQLite 驱动程序，您可以看到数据库名称、用户名和密码可以通过`os.environ.get`调用从环境中获得。还要注意`STATIC_ROOT`设置——这是 Django 查找静态内容的地方，例如 HTML、CSS、JavaScript 和映像——默认情况下，如果没有定义这个环境变量，Django 将在`/public/static`中查找。正如我们之前看到的，目前我们的 web 应用缺少这些内容，所以请记住这个设置，以便我们稍后修复缺少内容的问题。