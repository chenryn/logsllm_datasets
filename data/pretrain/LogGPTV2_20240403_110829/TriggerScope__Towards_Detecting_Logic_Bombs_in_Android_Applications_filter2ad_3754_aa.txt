# Title: TriggerScope: Towards Detecting Logic Bombs in Android Applications

## Authors:
- Yanick Fratantonio<sup>*</sup>
- Antonio Bianchi<sup>*</sup>
- William K. Robertson<sup>†</sup>
- Engin Kirda<sup>†</sup>
- Christopher Kruegel<sup>*</sup>
- Giovanni Vigna<sup>*</sup>

<sup>*</sup>UC Santa Barbara  
<sup>†</sup>Northeastern University

### Abstract
Android is the most popular mobile platform today and is also the most heavily targeted by malware. While existing static analyses are effective in detecting most malicious code and unwanted information flows, certain types of malice, such as malicious application logic, are difficult to capture explicitly. Malicious application logic, often executed under specific circumstances (referred to as a logic bomb), is particularly challenging to identify without a specification of the expected functionality.

In this paper, we introduce trigger analysis, a new static analysis technique that automatically identifies triggers in Android applications. Our approach combines symbolic execution, path predicate reconstruction and minimization, and inter-procedural control-dependency analysis to detect and characterize triggers accurately. We implemented a prototype, TRIGGERSCOPE, and evaluated it on a large corpus of 9,582 benign apps from the Google Play Store and a set of trigger-based malware, including the recently-discovered HackingTeam’s RCSAndroid advanced malware. TRIGGERSCOPE achieves a 100% detection rate on the malware set with a low false positive rate (0.38%). We also demonstrate that existing approaches for detecting logic bombs suffer from high false positive or false negative rates. Finally, we discuss the logic bombs identified by our analysis, including two previously-unknown backdoors in benign apps.

## I. Introduction
Android is currently the most popular mobile platform, with 78% of all smartphones sold in Q1 2015 running Android, and the Google Play Store hosting over two million applications. Unfortunately, Android has also become the most widely-attacked mobile platform, with 79% of known mobile malware instances targeting it.

App store providers invest significant resources to protect their users and keep their platforms free from malicious apps. They use a combination of automated program analysis (e.g., Google Bouncer) and manual app reviews. These automated approaches leverage static and dynamic code analysis techniques to detect potentially-malicious behaviors, such as exfiltrating personal information, stealing second-factor authentication codes, or creating mobile botnets. These techniques have proven effective in detecting traditional malware, and recent reports show that the official Google Play app store is reasonably free from malicious applications.

However, certain types of malice, such as malicious application logic, are still very difficult to capture explicitly. Malicious application logic occurs when a program subtly modifies its outputs, providing results that violate the user's expectations. Specifically, we refer to malicious application logic that is executed only under certain (often narrow) circumstances as a logic bomb. For example, a navigation application might be designed to provide misleading information after a specific date, leading to serious consequences for the user. Figure 1 shows a possible implementation of this behavior.

While traditional malware rarely implements such stealthy behavior, these techniques are often used by targeted malware employed in state-sponsored attacks. For instance, the HackingTeam security company was victimized in July 2015, leading to the discovery of RCSAndroid, one of the most sophisticated Android malware samples. RCSAndroid can leak private conversations, GPS location, and device tracking information, but it activates only upon receiving specific SMS messages. This type of malware poses a real threat, especially in scenarios like the U.S. Department of Defense's curated Android app store, where manual audits and dynamic analysis are insufficient to detect logic bombs.

The key challenge in detecting logic bombs is the need to consider the specific purpose and "normal" functionality of an application, which is out of reach for most existing analysis tools. In this paper, we propose trigger analysis, a new static analysis technique that focuses on identifying and characterizing the checks that guard a given behavior. We have implemented this technique in TRIGGERSCOPE, which operates directly on Dalvik bytecode and does not require source code access. Our evaluation shows that TRIGGERSCOPE can precisely and efficiently detect triggered behavior in both benign and malicious applications, with a low false positive rate and no false negatives.

## II. Related Work
Existing approaches for detecting Android malware include permission-based signatures, machine learning, and taint analysis. However, these methods are not suitable for detecting logic bombs, as they either have a very high false negative rate or a very high false positive rate. Our experiments show that TRIGGERSCOPE significantly outperforms these tools in detecting logic bombs.

## III. Methodology
Our trigger analysis combines several techniques:
- **Symbolic Execution**: To identify checks that operate on sensitive input.
- **Block Predicate Extraction**: To extract the precise semantics of these checks.
- **Path Predicate Reconstruction and Minimization**: To identify interesting checks.
- **Predicate Classification**: To classify the identified checks.
- **Inter-Procedural Control-Dependency Analysis**: To determine whether a specific check guards sensitive operations.

## IV. Implementation
We implemented TRIGGERSCOPE, a prototype that operates directly on Dalvik bytecode. It handles various program inputs, such as time, location, and SMS content, and evaluates them for potential triggers.

## V. Evaluation
We evaluated TRIGGERSCOPE on a large corpus of 9,582 benign apps from the Google Play Store and a set of trigger-based malware, including RCSAndroid. Our results show that TRIGGERSCOPE achieves a 100% detection rate on the malware set with a low false positive rate (0.38%). We also performed manual analysis on more than 100 applications to validate our results.

## VI. Discussion
While our evaluation shows promising results, we acknowledge that further work is needed to address potential false negatives in the benign apps. Nonetheless, our results represent a significant step towards the detection of trigger-based behavior in Android applications.

## VII. Conclusion
This paper introduces trigger analysis, a new static analysis technique for detecting logic bombs in Android applications. We developed TRIGGERSCOPE, a prototype that combines symbolic execution, block predicate extraction, path predicate reconstruction and minimization, predicate classification, and inter-procedural control-dependency analysis. Our evaluation demonstrates that TRIGGERSCOPE can effectively detect triggered behavior with a low false positive rate and no false negatives, outperforming existing malware detection systems.