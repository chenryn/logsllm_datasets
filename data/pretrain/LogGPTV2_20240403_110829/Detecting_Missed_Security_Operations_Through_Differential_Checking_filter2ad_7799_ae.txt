and Crix [24] identify missing checks in inter-procedural paths or
slices. However, most of the previous static-analysis works would
rely on cross-checking to eliminate false positives, which would
further introduce false negatives, as we discussed in §1. Furthermore,
some of these works, such as Crix[24], can only identify a specific
type of bugs like missing check bugs. Unlike these existing works,
IPPO is more generic and can identify multiple types of bugs without
using the cross-checking technique.
Similarity analysis in bug detection. Besides analyzing incon-
sistent cases in the similar code pieces, one could also detect bugs
by identifying the similarity between the target program and the
existing bug samples (e.g., bug reports), which is usually referred
to as bug localization or vulnerability extrapolation. VulPecker [21]
defines a set of patch features and detects bug source code through
similarity analysis [22]. MVP [45] builds patch and function signa-
tures at syntactic and semantic levels to locate bugs. DNNLoc [20]
utilizes deep neural networks to relate the terms in bug reports to
source files, while DrewBL [39] uses word2vec methods to localize
faulty files. Pewny et al. [31] presented a method to find binary-level
code parts that share similar I/O behavior with the bug code. These
approaches are able to detect multiple kinds of security bugs but
require existing bug knowledge and have limitations on detecting
bugs that have not appeared before.
Detecting bugs in OS kernels. OS kernel is a typical large scale
and widely used set of programs, which has been a hot research
target in the domain of security. Defining and detecting bugs in
OS kernels is of great significance while being challenging. Pallas
[16] presented fast-path bugs and detected them in Linux kernel
and Android kernel. LRSan [42] and Crix [24] detect bugs around
security checks, while Deadline [46], Dftinker [25], and DFTracker
[41] detect double-fetch bugs in OS kernels. DCNS [12] could identify
conservative non-sleep defects in Linux kernel. These approaches are
effective for their target bugs, but usually rely on precisely defined
rules to detect the specific bugs, which needs a wealth of analysis
experience. Recently, fuzzing is also applied to bug detection tasks
gradually in OS kernels [13, 18, 19, 29]. However, the path explosion
problem has not been resolved yet, which leads to a relatively low
code coverage rate.
9 Conclusion
Missing security operations is common in large scale programs and
could lead to various security issues. In this paper, we present IPPO,
a security bug detection framework to automatically detect bugs
caused by missed security operations. IPPO models the object-based
similar-path pairs within a function and detects potential security
bugs through differential checking, which makes the analysis fine-
grained. We realize the efficient path analysis of IPPO with several
new techniques, termed return value–based sub-CFG (RVG) and
reduced similar-path (RSP), respectively. We evaluate IPPO on Linux
kernel, OpenSSL library, FreeBSD kernel, and PHP. in which IPPO
discovered 161 new bugs. We have submitted patches for these bugs
and most of them have been fixed with our patches. The evalua-
tion results show the effectiveness and portability of IPPO on bug
detection.
10 Acknowledgment
This work was partly supported by NSFC under No. U1936215 and
U1836202, the State Key Laboratory of Computer Architecture (ICT,
CAS) under Grant No. CARCHA202001, and the Fundamental Re-
search Funds for the Central Universities (Zhejiang University NG-
ICS Platform). Qiushi Wu and Kangjie Lu were supported in part by
the NSF awards CNS-1815621 and CNS-1931208.
Session 5D: Misc: Android and Vulnerabilities CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1639References
[1] 2020. CVE-2019-12819, a use-after-free vulnerability in Linux kernel.
//www.cvedetails.com/cve/CVE-2019-12819/
[2] 2020. CVE-2019-15807, a memory leak vulnerability in Linux kernel.
//cwe.mitre.org/data/definitions/833.html
[3] 2020. CVE-2019-8980, a memory leak vulnerability in Linux kernel.
//www.cvedetails.com/cve/CVE-2019-8980/
[4] 2020. CVE Details. The ultimate security vulnerability datasource. https://www.
https:
https:
https:
[5] 2020. CWE-285: Improper Authorization. https://cwe.mitre.org/data/definitions/
cvedetails.com/
285.html
[6] 2020. CWE-788: Access of Memory Location After End of Buffer. https://cwe.
mitre.org/data/definitions/788.html
[7] 2020. CWE-833: Deadlock. https://cwe.mitre.org/data/definitions/833.html
[8] 2020. CWE-920: Improper Restriction of Power Consumption. https://cwe.mitre.
org/data/definitions/920.html
[9] 2021.
Finding Bugs Using Your Own Code: Detecting Functionally-similar
yet Inconsistent Code. In 30th USENIX Security Symposium (USENIX Security
21). USENIX Association, Vancouver, B.C. https://www.usenix.org/conference/
usenixsecurity21/presentation/ahmadi
[10] 2021. Understanding and Detecting Disordered Error Handling with Precise Func-
tion Pairing. In 30th USENIX Security Symposium (USENIX Security 21). USENIX As-
sociation, Vancouver, B.C. https://www.usenix.org/conference/usenixsecurity21/
presentation/wu-qiushi
[11] Thanassis Avgerinos, Sang Kil Cha, Brent Lim Tze Hao, and David Brumley. 2011.
AEG: Automatic exploit generation. (2011).
[12] Jia-Ju Bai, Julia Lawall, Wende Tan, and Shi-Min Hu. 2019. DCNS: automated
detection of conservative non-sleep defects in the linux kernel. In Proceedings of the
Twenty-Fourth International Conference on Architectural Support for Programming
Languages and Operating Systems. 287–299.
[13] Jake Corina, Aravind Machiry, Christopher Salls, Yan Shoshitaishvili, Shuang Hao,
Christopher Kruegel, and Giovanni Vigna. 2017. Difuze: Interface aware fuzzing
for kernel drivers. In Proceedings of the 2017 ACM SIGSAC Conference on Computer
and Communications Security. 2123–2138.
[14] Dawson Engler, David Yu Chen, Seth Hallem, Andy Chou, and Benjamin Chelf.
2001. Bugs as deviant behavior: A general approach to inferring errors in systems
code. ACM SIGOPS Operating Systems Review 35, 5 (2001), 57–72.
[15] Ben Hardekopf and Calvin Lin. 2007. The ant and the grasshopper: fast and
accurate pointer analysis for millions of lines of code. In Proceedings of the 28th
ACM SIGPLAN Conference on Programming Language Design and Implementation.
290–299.
[16] Jian Huang, Michael Allen-Bond, and Xuechen Zhang. 2017. Pallas: Semantic-
aware checking for finding deep bugs in fast path. In Proceedings of the Twenty-
Second International Conference on Architectural Support for Programming Lan-
guages and Operating Systems. 709–722.
[17] Jian Huang, Michael Allen-Bond, and Xuechen Zhang. 2017. "Semantic-Aware
Checking for Finding Deep Bugs in Fast Path". In Proceedings of the Twenty-Second
International Conference on Architectural Support for Programming Languages and
Operating Systems. Xi’an, China.
[18] D. R. Jeong, K. Kim, B. Shivakumar, B. Lee, and I. Shin. 2019. Razzer: Finding Kernel
Race Bugs through Fuzzing. In 2019 IEEE Symposium on Security and Privacy (SP).
754–768.
[19] Kyungtae Kim, Dae R. Jeong, Chung Hwan Kim, Yeongjin Jang, Insik Shin, and
Byoungyoung Lee. 2020. HFL: Hybrid Fuzzing on the Linux Kernel. In 27th An-
nual Network and Distributed System Security Symposium, NDSS 2020, San Diego,
California, USA, February 23-26, 2020. The Internet Society.
[20] A. N. Lam, A. T. Nguyen, H. A. Nguyen, and T. N. Nguyen. 2017. Bug Localization
with Combination of Deep Learning and Information Retrieval. In 2017 IEEE/ACM
25th International Conference on Program Comprehension (ICPC). 218–229.
[21] Zhen Li, Deqing Zou, Shouhuai Xu, Hai Jin, Hanchao Qi, and Jie Hu. 2016.
VulPecker: an automated vulnerability detection system based on code similar-
ity analysis. In Proceedings of the 32nd Annual Conference on Computer Security
Applications. 201–213.
[22] Xiang Ling, Lingfei Wu, Saizhuo Wang, Tengfei Ma, Fangli Xu, Alex X Liu, Chun-
ming Wu, and Shouling Ji. 2021. Multilevel Graph Matching Networks for Deep
Graph Similarity Learning. IEEE Transactions on Neural Networks and Learning
Systems (TNNLS) (2021).
[23] Zhenguang Liu, Peng Qian, Xiaoyang Wang, Yuan Zhuang, Lin Qiu, and Xun
Wang. 2021. Combining Graph Neural Networks with Expert Knowledge for
Smart Contract Vulnerability Detection. IEEE Transactions on Knowledge and Data
Engineering (TKDE) (2021), 1–14. https://doi.org/10.1109/TKDE.2021.3095196
[24] Kangjie Lu, Aditya Pakki, and Qiushi Wu. 2019. Detecting Missing-Check Bugs
via Semantic- and Context-Aware Criticalness and Constraints Inferences. In
Proceedings of the 28th USENIX Security Symposium (Security). Santa Clara, CA.
[25] Yingqi Luo, Pengfei Wang, Xu Zhou, and Kai Lu. 2018. Dftinker: Detecting and
fixing double-fetch bugs in an automated way. In International Conference on
Wireless Algorithms, Systems, and Applications. Springer, 780–785.
[26] Junjie Mao, Yu Chen, Qixue Xiao, and Yuanchun Shi. 2016. RID: finding reference
count bugs with inconsistent path pair checking. In Proceedings of the Twenty-First
International Conference on Architectural Support for Programming Languages and
Operating Systems. New York, NY, USA, 531–544.
[27] Changwoo Min, Sanidhya Kashyap, Byoungyoung Lee, Chengyu Song, and Taesoo
Kim. 2015. Cross-checking semantic correctness: The case of finding file system
bugs. In Proceedings of the 25th Symposium on Operating Systems Principles. 361–
377.
[28] KOSAKI Motohiro. 2020. A memory corruption by refcount imbalance. https:
//lore.kernel.org/patchwork/patch/331920/
[29] Shankara Pailoor, Andrew Aday, and Suman Jana. 2018. Moonshine: Optimizing
{OS} fuzzer seed selection with trace distillation. In 27th {USENIX} Security
Symposium ({USENIX} Security 18). 729–743.
[30] Aditya Pakki and Kangjie Lu. 2020. Exaggerated Error Handling Hurts! An In-
Depth Study and Context-Aware Detection. In Proceedings of the 2020 ACM SIGSAC
Conference on Computer and Communications Security. Association for Computing
Machinery, 1203–1218. https://doi.org/10.1145/3372297.3417256
[31] J. Pewny, B. Garmany, R. Gawlik, C. Rossow, and T. Holz. 2015. Cross-Architecture
Bug Search in Binary Executables. In 2015 IEEE Symposium on Security and Privacy.
709–724.
[32] Jannik Pewny and Thorsten Holz. 2016. EvilCoder: automated bug insertion.
In Proceedings of the 32nd Annual Conference on Computer Security Applications.
214–225.
[33] H. V. Pham, T. Lutellier, W. Qi, and L. Tan. 2019. CRADLE: Cross-Backend Valida-
tion to Detect and Localize Bugs in Deep Learning Libraries. In 2019 IEEE/ACM
41st International Conference on Software Engineering (ICSE). 1027–1038.
[34] Mohammad Masudur Rahman and Chanchal K Roy. 2018. Improving ir-based
bug localization with context-aware query reformulation. In Proceedings of the
2018 26th ACM Joint Meeting on European Software Engineering Conference and
Symposium on the Foundations of Software Engineering. 621–632.
[35] David A Ramos and Dawson Engler. 2015. Under-constrained symbolic execu-
tion: Correctness checking for real code. In 24th {USENIX} Security Symposium
({USENIX} Security 15). 49–64.
[36] Suman Saha, Jean-Pierre Lozi, Gaël Thomas, Julia L Lawall, and Gilles Muller.
2013. Hector: Detecting resource-release omission faults in error-handling code
for systems software. In 2013 43rd Annual IEEE/IFIP International Conference on
Dependable Systems and Networks (DSN). IEEE, 1–12.
[37] Dokyung Song, Felicitas Hetzelt, Dipanjan Das, Chad Spensky, Yeoul Na, Stijn
Volckaert, Giovanni Vigna, Christopher Kruegel, Jean-Pierre Seifert, and Michael
Franz. 2019. PeriScope: An Effective Probing and Fuzzing Framework for the
Hardware-OS Boundary.. In NDSS.
[38] Cynthia Sturton. 2019. Hardware Is the New Software: Finding Exploitable Bugs
in Hardware Designs. USENIX Association, Burlingame, CA.
[39] Y. Uneno, O. Mizuno, and E. Choi. 2016. Using a Distributed Representation of
Words in Localizing Relevant Files for Bug Reports. In 2016 IEEE International
Conference on Software Quality, Reliability and Security (QRS). 183–190.
[40] Jyothi Vedurada and V Krishna Nandivada. 2019. Batch alias analysis. In 2019
34th IEEE/ACM International Conference on Automated Software Engineering (ASE).
IEEE, 936–948.
[41] Pengfei Wang, Kai Lu, Gen Li, and Xu Zhou. 2019. DFTracker: detecting double-
fetch bugs by multi-taint parallel tracking. Frontiers of Computer Science 13, 2
(2019), 247–263.
[42] Wenwen Wang, Kangjie Lu, and Pen-Chung Yew. 2018. Check it Again: Detecting
Lacking-Recheck Bugs in OS Kernels. In Proceedings of the 25th ACM Conference
on Computer and Communications Security (CCS). Toronto, Canada.
[43] Yan Wang, Chao Zhang, Zixuan Zhao, Bolun Zhang, Xiaorui Gong, and Wei
Zou. 2021. MAZE: Towards Automated Heap Feng Shui. In 30th USENIX Security
Symposium (USENIX Security 21). USENIX Association. https://www.usenix.org/
conference/usenixsecurity21/presentation/wang-yan
[44] Qiushi Wu, Yang He, Stephen McCamant, and Kangjie Lu. 2020. Precisely Charac-
terizing Security Impact in a Flood of Patches via Symbolic Rule Comparison. In
Proceedings of the 27th Annual Network and Distributed System Security Symposium
(NDSS’20).
[45] Yang Xiao, Bihuan Chen, Chendong Yu, Zhengzi Xu, Zimu Yuan, Feng Li, Binghong
Liu, Yang Liu, Wei Huo, Wei Zou, and Wenchang Shi. 2020. MVP: Detecting
Vulnerabilities using Patch-Enhanced Vulnerability Signatures. In 29th USENIX
Security Symposium (USENIX Security 20). USENIX Association, 1165–1182. https:
//www.usenix.org/conference/usenixsecurity20/presentation/xiao
[46] M. Xu, C. Qian, K. Lu, M. Backes, and T. Kim. 2018. Precise and Scalable Detection
of Double-Fetch Bugs in OS Kernels. In 2018 IEEE Symposium on Security and
Privacy (SP). 661–678.
[47] Klaus Changsun Youm, June Ahn, and Eunseok Lee. 2017. Improved bug localiza-
tion based on code change histories and bug reports. Information and Software
Technology 82 (2017), 177–192.
[48] Insu Yun, Changwoo Min, Xujie Si, Yeongjin Jang, Taesoo Kim, and Mayur Naik.
2016. APISan: Sanitizing API Usages through Semantic Cross-Checking. In 25th
USENIX Security Symposium (USENIX Security 16). USENIX Association, Austin,
TX, 363–378.
Session 5D: Misc: Android and Vulnerabilities CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1640[49] Insu Yun, Changwoo Min, Xujie Si, Yeongjin Jang, Taesoo Kim, and Mayur Naik.
2016. APISan: Sanitizing {API} Usages through Semantic Cross-Checking. In 25th
{USENIX} Security Symposium ({USENIX} Security 16). 363–378.
[50] Tong Zhang, Wenbo Shen, Dongyoon Lee, Changhee Jung, Ahmed M Azab, and
Ruowen Wang. 2019. PeX: A Permission Check Analysis Framework for Linux
Kernel.. In 28th {USENIX} Security Symposium ({USENIX} Security 19). 1205–1220.
[51] Yuan Zhuang, Zhenguang Liu, Peng Qian, Qi Liu, Xiang Wang, and Qinming He.
2020. Smart Contract Vulnerability Detection using Graph Neural Network. In
IJCAI. 3283–3290.
A Appendix
Effectiveness in addressing path explosion. Figure 7 shows a
potential path collection result on a target CFG after executing our
two-phase RSP collection algorithm. The control flow structure in
the dashed box of Figure 7 is very common in the real world, which
is introduced by an if statement. This simple structure could double
the total path number if we collect paths from the entry block (block
a) to the end block (block l) directly. To make matters worse, the
information of this structure (path b-d or b-c-d) is contained in every
collected path, which brings huge redundancy. As a result, we will
collect 10 paths with an average length of 7.1 blocks in this way.
In order to check every path and make sure each path could be
compared at least once with all other paths directly or indirectly, we
have to construct at least 9 path pairs in this case.
However, the aforementioned control flow structure will intro-
duce only one path pair (G1) when using RSPs to represent CFG
paths, which makes the collection result increase linearly rather
than exponentially. Additionally, The information of this structure
does not appear in any other collected path group. Our path col-
lection method finally collects 5 path pairs from this CFG with an
average path length of only 3.1 blocks, which significantly reduces
the workload of path comparison.
Table 5: Reference count APIs.
Function description
PM usage counter
increment
PM usage counter
decrement
PM usage counter state
API
pm_runtime_get
pm_runtime_get_sync
pm_runtime_get_noresume
pm_runtime_put
pm_runtime_put_sync
pm_runtime_put_noidle
pm_runtime_put_autosuspend
pm_runtime_put_sync_suspend
pm_runtime_put_sync_autosuspend
pm_runtime_get_if_in_use
pm_runtime_active
pm_runtime_enabled
pm_runtime_suspended
Table 6: List of bugs detected by IPPO in OpenSSL, FreeBSD, and PHP.
The S, A, and F in the Status column indicate submitted, accepted,
and fixed by other developers in the last version, respectively.
System Buggy function
OpenSSL
OpenSSL
OpenSSL
OpenSSL
OpenSSL
OpenSSL
OpenSSL
FreeBSD wpi_run
PHP
dtls1_buffer_message
newpass_bag
PKCS5_PBE_keyivgen
generate_cookie_callback
build_chain
cms_RecipientInfo_pwri_crypt
int_ctx_new
accel_preload
Impact
Memleak
Memleak
Memleak
Memleak
Memleak
Memleak
Reliability
Deadlock
Memleak
Status
A
A
A
A
A
F
F
C
S
Table 7: List of bugs (1-16) detected by IPPO in Linux kernel. The S,
C, A, and F in the Status column indicate submitted, confirmed, ac-
cepted, and fixed by other developers in the latest version, respec-
tively.
Buggy function
snd_intel8x0m_create
dpot_read_spi
sdhci_pci_o2_probe
smtcfb_pci_probe
i40e_vsi_open
e1000_set_d0_lplu_state_82571
ahc_handle_seqint
ahd_handle_seqint
sata_dwc_isr
mpu3050_trigger_handler
vadc_do_conversion
snd_echo_resume
qcom_snd_parse_of
ide_pci_init_two
rxe_mem_init_user
subscribe_event_xa_alloc
Impact
Null-pointer-dereference
Reliability
Reliability
Null-pointer-dereference
Reliability
Reliability
Null-pointer-dereference
Null-pointer-dereference
Null-pointer-dereference
Reliability
Reliability
Double-free
Refcount leak
Memleak
Memleak
Memleak
Status
C
A
S
F
A
A
S
S
C
A
C
A
A
S
A
F
Figure 7: An example of RSP collection. IPPO finally collects five path
groups (namely G1-G5) in the left CFG that satisfy Rule 1 of OSPP.
bdfehgacijkl           b, d;           b, c, d;           h, j, l;           h, k, l;           h, i, l;           h, j, l;           f, g, i;           f, h, i;           d, e, l;           d, f, g, i, l;G1G2G3G4G5if(...) {    ...}Session 5D: Misc: Android and Vulnerabilities CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1641Table 8: List of bugs (17-73) detected by IPPO in Linux kernel. The
S, C, A, and F in the Status column indicate submitted, confirmed,
accepted, and fixed by other developers in the latest version, respec-
tively.
Table 9: List of bugs (74-130) detected by IPPO in Linux kernel. The
S, C, A, and F in the Status column indicate submitted, confirmed,
accepted, and fixed by other developers in the latest version, respec-
tively.
Buggy function
hl_device_reset
vmd_enable_domain
fb_probe
radeonfb_pci_register
wilc_sdio_probe
wilc_bus_probe
rtl8192_usb_initendpoints
fwserial_create