### 利用反序列化漏洞的要素

为了成功利用反序列化漏洞，需要满足两个关键要素：

1. **入口点**：通过该入口点，攻击者可以将自定义的序列化对象发送到目标系统进行反序列化处理。
2. **可操控代码片段**：在反序列化过程中，攻击者能够操控一个或多个代码片段。

#### 3.1 入口点识别

识别入口点的方法包括：

- **源代码审查**：查找使用了`java.io.ObjectInputStream`类（尤其是`readObject`方法）的地方，或者检查实现了`readObject`方法的可序列化类。如果攻击者能够控制传递给`ObjectInputStream`的数据，则这些数据可能成为攻击的入口点。
- **二进制数据分析**：当无法获取源代码时，可以通过查找硬盘上存储的序列化数据或网络传输中的序列化数据来识别入口点。Java序列化数据以特定的字节序列开始：`0xAC ED 00 05`。此序列之后是内容元素，每个元素的第一个字节应在`0x70`到`0x7E`之间，用于标识后续数据流的具体结构。

在实际操作中，某些入侵检测系统（IDS）规则基于上述特征序列进行匹配。然而，在某些情况下，这些特征字节仅在序列化流创建之初出现一次，导致IDS可能无法检测到后续的攻击载荷。因此，识别序列化数据时，除了依赖头部特征外，还可以通过导出数据为ASCII格式并查找其中的Java类名（如`java.rmi.dgc.Lease`）来进行。

一旦识别出序列化数据，接下来需确定注入攻击载荷的位置。这通常涉及调用`ObjectInputStream.readObject`方法来反序列化及实例化对象。根据序列化格式规范，不同类型的对象对应不同的类型代码（例如，`TC_OBJECT`对应`0x73`）。

#### 3.2 POP利用点

找到入口点后，下一步是寻找POP（Property-Oriented Programming）利用点。如果有源代码访问权限，可以通过检查`readObject`方法及其后的代码逻辑来发现潜在的漏洞。若无源代码，可以考虑利用第三方库中存在的已知POP链。研究人员Chris Frohoff和Gabriel Lawrence开发了一个名为`ysoserial`的工具，该工具集成了多种针对常见库的利用链，简化了Java反序列化漏洞的利用过程。

选择合适的`ysoserial` payload需要了解目标应用所使用的第三方库。如果相关信息难以获取，可以通过逐一尝试各种payload直至找到有效的利用点。这一过程中需要注意避免触发异常导致应用程序崩溃。

### 工具介绍

- **SerializationDumper**：这是一个用于解析Java序列化流并将其可视化呈现的工具，有助于识别可用于注入攻击载荷的位置。
- **DeserLab**：一个演示应用程序，存在反序列化漏洞，适合练习本文介绍的技术。
- **SerialBrute**：一套自动化测试工具，包含两个Python脚本，分别用于重放TCP会话/HTTP请求并将payload注入指定位置以及在特殊场景下修改发送payload的方式。

### 总结

理解和实践反序列化漏洞利用技术对于安全专业人员来说非常重要。希望本文及提供的工具能够帮助读者更好地掌握相关知识与技能。如果您对DeserLab感兴趣或有任何反馈意见，请随时联系我。