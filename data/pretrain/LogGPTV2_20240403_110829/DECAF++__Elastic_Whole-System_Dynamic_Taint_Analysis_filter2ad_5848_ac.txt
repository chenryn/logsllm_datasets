(b) QEMU store memory operation
Figure 5: Elastic shadow memory access workﬂow
optimizations. Overall, our changes (insertion or deletion of
code) to develop our prototype on top of DECAf does not
exceed 2.5 KLOC. We deﬁned two compilation options that
selectively allows activating elastic taint propagation or elastic
taint status checking. We evaluate DECAF++ to understand:
1. How effective each of our optimization, i.e., elastic taint
propagation and elastic taint status checking and alto-
gether is in terms of performance.
2. Whether our system achieves the elastic property for
different taint analysis applications, that, is a gradual
degradation of performance based on the increase in the
number of tainted bytes.
3. What the current overheads of DECAF++ are and
whether we can address the shortcomings of the pre-
vious works [13, 25], i.e., reducing the overhead in the
check mode and in the transition between the two modes.
6.1 Methodology
We measure the performance metrics using standard bench-
marks under two different taint analysis scenarios in §6.2 and
§6.3. In both scenarios, a virtual machine image is loaded in
DECAF++ and a benchmark measures the performance of
the virtual machine while the taint analysis task is running.
To answer (1), we measure the performance of DECAF++
with different optimizations, i.e., with elastic taint propaga-
tion dubbed as Propagation, with elastic taint status checking
dubbed as Memory and with the both dubbed as Full and
compare them. To answer (2) and evaluate the elastic prop-
erty, we introduce a parameter in our taint analysis plugin that
adjusts the number or the percentage of tainted bytes. Plotting
the performance trend based on this parameter values allows
answering question (2). Finally to answer (3), we measure the
overhead of the frequent or costly tasks in our implementa-
tion. In the the rest of this section, we describe the details and
answer (1) and (2) in §6.2 and §6.3. In §6.4, we answer (3).
6.2 Intra-Process Taint Analysis
In this scenario, we track the ﬂow of information within a
single process. For this experiment, we use nbench bench-
mark [11]. We track the ﬂow of information within the nbench
programs using a taint analysis plugin we developed for DE-
CAF. The goal is to be able to report the performance indexes
measured by nbnech while the taint analysis task is running.
In the next paragraphs, we explain the conﬁgurations for the
experiment, and at the end of this section we report the results.
nbench Understanding nbench is important since our taint
analysis plugin instruments it. nbench has 10 different pro-
grams. These programs implement a popular algorithm and
measure the execution time on their host. Although the under-
lying algorithms are different, they all follow the same pattern
regarding loading the initial data. They all create an array of
random values and then run the algorithm on that array. The
arrays are allocated from the heap, and the random generator
is a custom pseudo random generator.
Taint analysis plugin The taint analysis plugin instruments
nbench programs and taints a portion of the initial input data
based on a given parameter. Although this is not trivial, we do
StartTLB-CheckStartTLB entry valid?Registered I/O handler?Fill TLB with the PageEndTLB miss handlerHitMissYesNoNoYesTaint handler?Load taint status from shadow memoryInvoke the handler for the operationTrack mode?Load zero to taint statusComplete the translationYesNoFastSlowYesStartTaint status set?StartTLB entry valid?Registered I/O handler?Fill TLB with the PageEndTLB miss handlerNoYesYesNoNoYesTaint handler or taint status？Update shadow memoryInvoke the handler for the operationTLB-CheckComplete the translationFastSlowYesHitMiss38          22nd International Symposium on Research in Attacks, Intrusions and DefensesUSENIX AssociationFigure 6: Comparing DECAF and DECAF++ performance.
Figure 7: Evaluation of DECAF++ with full optimization under different number of tainted bytes; performance values are
normalized by nbench based on a AMD k6/233 system.
not go into the details. We just mention that we record the ad-
dress of the allocated array from the heap, and taint a portion
of the array right after the random initialization. The portion
size depends on an input parameter that we call taint_size.
For instance, taint_size=100 means that 100 bytes of the array
(from the beginning) used in the running programs of nbench
are tainted using the plugin. After the instrumentation, DE-
CAF automatically tracks the propagation from the the taint
sources to other memory locations.
Experiments setup We measure the performance of each
solitary optimization feature (and together) of DECAF++ us-
ing nbench2 on a loaded windows XP guest image. The image
is given 1024MB of RAM. The experiment was performed
on an Ubuntu18 i686 host with a Core i7 3.5GH CPU and
8GB of RAM. The reported indexes by nbench are the mean
result of many runs (depending on the system performance).
Further, nbench controls the statistical reliability of the re-
sults and reports if otherwise. Finally, note that since all the
measurements are conducted on the VM after it is loaded, the
VM overhead would be a constant that is the same for all the
measurements.
Result Figure 6 shows the performance of different opti-
mization in DECAF++ in comparison to DECAF. The results
2Three programs Fourier, NEURAL NET and LU DECOMPOSITION
from the nbench did not reﬂect any change in their reported numbers so we
removed them from analysis. Also due to cross compilation, Assignment test
did not work on Windows XP.
in this ﬁgure answers question (1) for this scenario. Over-
all, when the entire program inputs are tainted, combining
elastic taint propagation and elastic taint status checking (full
optimization) achieves the best performance. However, the
performance is application dependant and sometimes a sin-
gle optimization can achieve better performance than both
combined, e.g. HUFFMAN and IDEA.
Figure 7 shows the performance of the DECAF++ when
both optimization are activated for varied taint_size values.
This ﬁgure answers question (2): DECAF++ has the elastic
property, that is, the performance degrades based on the num-
ber of tainted bytes. On average, in comparison to DECAF,
DECAF++ achieves on average 55% improvement (32% to
86%) on the nbench memory index and 202% (18% to 328%)
on the nbench integer index.
Further, we can see from Figure 7 that results for
taint_size={10,100} are similar and differ from the result
for taint_size={1000,5000}. For taint_size={10,100}, since
the tainted bytes are adjacent, the track mode activates for
a sequence of bytes and then quickly switches back to the
check mode. Also since taint_size={10,100} is well below
a page size, the shadow memory access penalty would be
low because often the tainted bytes will be within a single
page. However for taint_size={1000,5000}, almost the en-
tire nbench programs input array is tainted that results in
frequent execution in the track mode and shadow memory
access penalty.
In addition to the above, an interesting observation is the
performance degradation for the sort algorithms. The perfor-
mance degrades abruptly while taint_size changes from zero
00.511.522.5Normalized iterations/secFull optimizationMemoryPropagationDECAF01234567Normalized iterations/sec0101001000 (all)5000 (all)USENIX Association        22nd International Symposium on Research in Attacks, Intrusions and Defenses 39to greater values. This is because of the behavior of the sort
algorithm, that is, frequently moving an element in the array.
This behavior results in polluting the entire array quickly and
hence degrading the performance abruptly.
6.3 Network Stack Taint Analysis
In this scenario, the taint analysis tracks the ﬂow of infor-
mation from the network throughout the entire system and
every process that accesses the network data. Performing taint
analysis in this level is only possible using whole-system taint
analysis tools like DECAF. Since the taint analysis affects the
entire system, the need of having an elastic property would
be more necessary.
Honeypots are an instance of the applications that can
greatly beneﬁt from the elastic property. Previous studies
show that the likelihood of the malice of a network trafﬁc can
be predetermined [8]. Therefore, a honeypot can adopt a pol-
icy to achieve taint analysis only for network trafﬁc that are
expected to be malicious. Elastic property helps such systems
to boost their performance based on their policy.
We measure transfer rate and throughput based on a pa-
rameter called taint_perc (instead of taint_size in the previous
experiment) that deﬁnes the percentage of network packets
to be tainted. This is because percentage, here, better repre-
sents the real applications. For instance, for honeypots, the
taint_perc can be easily derived based on the taint policy.
Taint analysis plugin Our taint analysis plugin taints the
incoming network trafﬁc based on the taint_perc parameter.
We implemented this plugin using the callback functionality
of the DECAF. Our plugin registers a callback that is invoked
whenever the network receive API is called. Then, based on
the taint_perc parameter, our plugin decides whether to taint
the payload or not.
Experiments setup The experiments were performed on an
Ubuntu16.04 LTS host with a Core i7 6700 3.40GHz×8 CPU
and 16GB of RAM. The guest image was Ubuntu 11.10 and
it was given 4GB of RAM. For throughput measurement, we
use Apache 2.2.22. We isolate the network interface between
the server (guest image running Apache) and the client (the
host machine) to reduce the network trafﬁc noise that might
perturb the results. That said, there is still a large deviation
in the throughput because of the non-deterministic interrupt
processing behavior of the system. We rely on signiﬁcantly
different values considering the standard deviation to draw
conclusions.
We use netcat to measure the transfer rate. Our measure-
ment is based on the transfer rate for 200 netcat requests of
size 100KB. We use apache bench [1] to measure the through-
put of an apache web server on the guest image. We execute
Apache bench remotely from the host system with a ﬁxed
10000 request parameter. Apache bench sends 10000 requests
Table 2: Network transfer rate of solitary features of DE-
CAF++ (and together as Full) on Netcat; the throughput is
the mean of 5 measurements for a range of tainted bytes.
Tainted
Bytes
40KB -
50KB
20KB -
30KB
0KB
-
-
0KB
50KB
0KB
50KB
Implementation
Full
Memory
Propagation
Full
Memory
Propagation
Full
Memory
Propagation
DECAF
QEMU
Transfer Rate
(MB/S)
3.57
Standard
Deviation
18%
3.60
3.43
5.70
4.25
3.70
5.31
5.24
4.12
3.70
6.00
10%
8%
3%
14%
12%
5%
7%
8%
9%
3%
and reports the average number of completed requests per
second. For both transfer rate and the throughput, we repeat
the experiments for each taint_perc parameter value 5 times
and report the average and the relative standard deviation.
Transfer rate result Table 2 reports the result of our trans-
fer rate measurement using netcat. The results show the trans-
fer rate for three taint_perc parameter values: when every
packet is tainted (40KB - 50KB tainted bytes), when half of
the number of packets are tainted (20KB - 30KB) and ﬁnally
when no packet is tainted. Note that although every request is
100KB, only a portion of the packet is payload, and not the
entire 100KB payload would be live in the system at the same
time; this is why eventually only around 50KB is tainted. The
results show a substantial 54% improvement when only half
of the incoming packets are tainted. This is only 5% less than
the QEMU transfer rate that is the maximum we can achieve.
There is no improvement when every packet is tainted but
this is expected because taint propagation and taint status
checking have to be constantly done.
Throughput result Figure 8 illustrates the result of our
throughput measurement for apache server using apache
bench. The ﬁgure shows that the full optimization achieves
the best throughput. Answering (1), full optimization and elas-
tic taint status checking outperform DECAF for all values of
taint_perc, and elastic taint propagation outperforms DECAF
when taint_perc is below 1%. Figure 9 shows the performance
of the full optimization based on the percentage of the tainted
bytes. Although DECAF++ has the elastic property and there
is improvement in all cases (answering (2)), it is more tangible
for taint_perc values less than 1%. We point out two points on
why taint_perc values seem very small. First, the number of
40          22nd International Symposium on Research in Attacks, Intrusions and DefensesUSENIX AssociationFigure 8: Throughput of solitary optimization features (and together) of DECAF++ in. The reported numbers are the mean of 5
measurements and the relative standard deviation are in range of [2%,18%] for Full, [1%,15%] for Mem and [1%,14%] for the
Propagation. DECAF and QEMU 1.0 throughput are 320 and 815 request/sec.
Table 3: The nbench evaluation of DECAF++ by removing
the potential overheads
Procedure
Baseline
Full
Mode checking
Load operations
patching
Page
TLB ﬁll
check in
Memory
index
4.04
3.86
4.04
3.87
Relative
STD
1%
2%
2%
1%
Integer
Index
4.36
4.17
4.34
4.23
Relative
STD
1%
2%
3%
1%
3.74
1%
4.14
1%
ure 11 shows that DECAF++ imposes around 4% overhead
even when there is no taint analysis task, that is, running only
in the check mode. This overhead is in comparison to when
tainting functionality is completely disabled. DECAF++ in-
troduces a few overheads in comparison to this case. These
overheads are:
• Checking the mode before the code translation and in
the memory operations
• Patching the memory load operations in the track mode
• Checking the status of the page throughout the TLB
ﬁlling process to register the taint status handler
We measured the effect of each of these overheads on indexes
reported by nbench by removing the code snippets attributed
to these functionalities. The results of these measurements are
listed in Table 3. Removing none of the overheads except the
mode checking has a substantial effect on the performance.
This is because mode checking is frequently done along with
every memory load and store operation. It goes unsaid that
this overhead is inevitable.
Transition Overhead The transition from the check mode
to the track mode imposes an overhead as discussed in section
4.3. This overhead is the major issue with [13]. However, our
measurement shows that this overhead is negligible for DE-
CAF++. We measured the transition overhead by recording
Figure 9: Evaluation of the DECAF++ on Apache bench.