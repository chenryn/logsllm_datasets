    ➜  ~ docker start 2bc48b88a424
    2bc48b88a424
    ➜  ~ docker ps
    CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
    2bc48b88a424        kalilinux:0.1       "/bin/bash"         9 minutes ago       Up 8 seconds                            frosty_poitras
3）新建并启动容器
    #docker run = docker create + docker start
    #run的过程：1.检查镜像是否存在，不存在就下载；2.用镜像创建容器；挂载可读写层；3.分配虚拟接口
    #4.分配IP；5.运行指定程序；6.执行完自动终止
    ➜  ~ docker run kalilinux:0.1 /bin/echo 'zeroyu'
    zeroyu
    ➜  ~ docker ps -a
    CONTAINER ID        IMAGE               COMMAND              CREATED             STATUS                     PORTS               NAMES
    d6a6045c4f8b        kalilinux:0.1       "/bin/echo zeroyu"   3 minutes ago       Exited (0) 3 minutes ago                       cocky_kirch
    ➜  ~ docker ps
    CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
    #常用命令如下
    ➜  ~ docker run -it kalilinux:0.1 /bin/bash
    root@2ed8aa5354f1:/# ps
      PID TTY          TIME CMD
        1 pts/0    00:00:00 bash
        7 pts/0    00:00:00 ps
    root@2ed8aa5354f1:/# exit
    exit
    #推出后自动处于终止状态
    ➜  ~ docker ps -a
    CONTAINER ID        IMAGE               COMMAND              CREATED              STATUS                      PORTS               NAMES
    2ed8aa5354f1        kalilinux:0.1       "/bin/bash"          About a minute ago   Exited (0) 48 seconds ago                       goofy_bardeen
4）守护态运行
    #在后台运行容器
    ➜  ~ docker run -d kalilinux:0.1 /bin/sh -c "while true ; do echo zeroyu ; sleep 1 ; done"
    88f12c0725a466ba6d8f08f34fc8e9ac263ecafdff0a9e7282d7e9bb4073e6a0
    ➜  ~ docker ps
    CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES
    88f12c0725a4        kalilinux:0.1       "/bin/sh -c 'while..."   7 seconds ago       Up 7 seconds                            sleepy_kowalevski
    ➜  ~ docker logs 88f12c0725a4
    zeroyu
    zeroyu
    zeroyu
    ......
#### 2.终止容器
    #id为88f12c0725a4但是可以使用前几位来简单表示
    ➜  ~ docker stop 88
    88
    #查看所有处于终止态的id
    ➜  ~ docker ps -qa
    073ff4e1dac7
    #处于终止状态可以使用start来重新启动
    ➜  ~ docker start 073
    073
    ➜  ~ docker ps
    CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS              PORTS               NAMES
    073ff4e1dac7        kalilinux:0.1       "/bin/sh -c 'while..."   About a minute ago   Up About a minute                       cranky_benz
    #restart可以先终止再重新启动
    ➜  ~ docker restart 073
    073
#### 3.进入容器
处于守护态（-d参数）的容器会在后台运行，但是你无法到信息，也无法进行操作。此时，要进入容器进行工作，要使用attach或者exec命令。
1） 使用attach命令
    #容器还可以使用name来唯一辨识
    ➜  ~ docker run -itd kalilinux:0.1
    77e93d18a6a547c85d86925a0bf3c4ae734eec6fe235ae1c3fe0f19822f14360
    ➜  ~ docker ps
    CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
    77e93d18a6a5        kalilinux:0.1       "/bin/bash"         20 seconds ago      Up 21 seconds                           stupefied_gates
    ➜  ~ docker attach stupefied_gates
    root@77e93d18a6a5:/#
2）使用exec命令
    ➜  ~ docker ps -a
    CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                          PORTS               NAMES
    77e93d18a6a5        kalilinux:0.1       "/bin/bash"         5 minutes ago       Exited (0) About a minute ago                       stupefied_gates
    ➜  ~ docker start 77e
    77e
    ➜  ~ docker exec -it 77e93d18a6a5 /bin/bash
    root@77e93d18a6a5:/#
#### 4.删除容器
    ➜  ~ docker ps -a
    CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
    77e93d18a6a5        kalilinux:0.1       "/bin/bash"         7 minutes ago       Up About a minute                       stupefied_gates
    ➜  ~ docker rm 77e93d18a6a5
    Error response from daemon: You cannot remove a running container 77e93d18a6a547c85d86925a0bf3c4ae734eec6fe235ae1c3fe0f19822f14360. Stop the container before attempting removal or force remove
    ➜  ~ docker stop 77e93d18a6a5
    77e93d18a6a5
    ➜  ~ docker rm 77e93d18a6a5
    77e93d18a6a5
#### 5.导入和导出容器
    #导出容器
    #无论这个容器是否正在运行都是可以导出的
    ➜  ~ docker export -o test.tar 77e93d18a6a5
    #或者执行
    ➜  ~ docker export 77e93d18a6a5 > test.tar 
    #导入容器
    ➜  ~ docker import test.tar - test/kalilinux:v1.0
### Docker数据管理
    #使用-v标记挂在本地的tmp目录到容器中的/opt/tmp_test
    #使用rw（默认也是这种方式）来指定可读写
    #下面的#表示的不是注释
    ➜  ~ docker run -it -P  --name db -v /tmp:/opt/tmp_test:rw kalilinux:0.1 /bin/sh
    # ls
    bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var
    # cd opt
    # ls
    tmp_test
    # cd tmp_test
    # ls
    com.apple.launchd.0fGM76e6ao  com.apple.launchd.UWfVYRXkwo  powerlog
    com.apple.launchd.AkQGotnulN  pip-FfQw68-unpack         zeroyu.txt
    #
### Docker端口映射
    #-P是指映射到任意端口
    #-p加端口号，则将端口映射到所有地址的相应端口
    ➜  ~ docker run -it -d -p 5000:5000 kalilinux:v0.2
    23e91a40cb124720b1dba81371a275169124cbff2778120b4350470fa79a0d91
    ➜  ~ docker ps
    CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                    NAMES
    23e91a40cb12        kalilinux:v0.2      "/bin/bash"         12 seconds ago      Up 11 seconds       0.0.0.0:5000->5000/tcp   boring_volhard
    ➜  ~ docker attach boring_volhard
    root@23e91a40cb12:/# cd home/Empire/
    root@23e91a40cb12:/home/Empire# ls
    LICENSE  README.md  changelog  data  empire  lib  setup
    root@23e91a40cb12:/home/Empire#
#### 附例
在vps中的docker上使用empire进行渗透测试(metasploit同理)
    #端口映射参考上条
    ================================================================
     [Empire]  Post-Exploitation Framework
    ================================================================