---
author: Matt Banz
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 3
  likes: 0
  sharetimes: 0
  viewnum: 6678
date: '2017-10-26 08:30:00'
editorchoice: false
excerpt: 探索函数式编程，通过它让你的程序更具有可读性和易于调试
fromurl: https://opensource.com/article/17/6/functional-javascript
id: 8992
islctt: true
largepic: /data/attachment/album/201710/23/233346q2rwp5pozbopfgij.png
permalink: /article-8992-1.html
pic: /data/attachment/album/201710/23/233346q2rwp5pozbopfgij.png.thumb.jpg
related:
- displayorder: 0
  raid: 7842
- displayorder: 1
  raid: 8869
reviewer: ''
selector: ''
summary: 探索函数式编程，通过它让你的程序更具有可读性和易于调试
tags:
- 函数式编程
- JavaScript
thumb: false
title: JavaScript 函数式编程介绍
titlepic: true
translator: trnhoe
updated: '2017-10-26 08:30:00'
---
> 
> 探索函数式编程，通过它让你的程序更具有可读性和易于调试
> 
> 
> 
![](/data/attachment/album/201710/23/233346q2rwp5pozbopfgij.png)
当 Brendan Eich 在 1995 年创造 JavaScript 时，他原本打算[将 Scheme 移植到浏览器里](https://brendaneich.com/2008/04/popularity/) 。Scheme 作为 Lisp 的方言，是一种函数式编程语言。而当 Eich 被告知新的语言应该是一种可以与 Java 相比的脚本语言后，他最终确立了一种拥有 C 风格语法的语言（也和 Java 一样），但将函数视作一等公民。而 Java 直到版本 8 才从技术上将函数视为一等公民，虽然你可以用匿名类来模拟它。这个特性允许 JavaScript 通过函数式范式编程。
JavaScript 是一个多范式语言，允许你自由地混合和使用面向对象式、过程式和函数式的编程范式。最近，函数式编程越来越火热。在诸如 [Angular](https://angular-2-training-book.rangle.io/handout/change-detection/change_detection_strategy_onpush.html) 和 [React](https://facebook.github.io/react/docs/optimizing-performance.html#the-power-of-not-mutating-data) 这样的框架中，通过使用不可变数据结构可以切实提高性能。不可变是函数式编程的核心原则，它以及纯函数使得编写和调试程序变得更加容易。使用函数来代替程序的循环可以提高程序的可读性并使它更加优雅。总之，函数式编程拥有很多优点。
### 什么不是函数式编程
在讨论什么是函数式编程前，让我们先排除那些不属于函数式编程的东西。实际上它们是你需要丢弃的语言组件（再见，老朋友）：
* 循环：
	+ `while`
	+ `do...while`
	+ `for`
	+ `for...of`
	+ `for...in`
* 用 `var` 或者 `let` 来声明变量
* 没有返回值的函数
* 改变对象的属性 (比如: `o.x = 5;`)
* 改变数组本身的方法：
	+ `copyWithin`
	+ `fill`
	+ `pop`
	+ `push`
	+ `reverse`
	+ `shift`
	+ `sort`
	+ `splice`
	+ `unshift`
* 改变映射本身的方法：
	+ `clear`
	+ `delete`
	+ `set`
* 改变集合本身的方法：
	+ `add`
	+ `clear`
	+ `delete`
脱离这些特性应该如何编写程序呢？这是我们将在后面探索的问题。
### 纯函数
你的程序中包含函数不一定意味着你正在进行函数式编程。函数式范式将 纯函数   pure function 和 非纯函数   impure function 区分开。鼓励你编写纯函数。纯函数必须满足下面的两个属性：
* 引用透明：函数在传入相同的参数后永远返回相同的返回值。这意味着该函数不依赖于任何可变状态。
* 无副作用：函数不能导致任何副作用。副作用可能包括 I/O（比如向终端或者日志文件写入），改变一个不可变的对象，对变量重新赋值等等。
我们来看一些例子。首先，`multiply` 就是一个纯函数的例子，它在传入相同的参数后永远返回相同的返回值，并且不会导致副作用。
```
function multiply(a, b) {
  return a * b;
}
```
下面是非纯函数的例子。`canRide` 函数依赖捕获的 `heightRequirement` 变量。被捕获的变量不一定导致一个函数是非纯函数，除非它是一个可变的变量（或者可以被重新赋值）。这种情况下使用 `let` 来声明这个变量，意味着可以对它重新赋值。`multiply` 函数是非纯函数，因为它会导致在 console 上输出。
```
let heightRequirement = 46;
// Impure because it relies on a mutable (reassignable) variable.
function canRide(height) {
  return height >= heightRequirement;
}
// Impure because it causes a side-effect by logging to the console.
function multiply(a, b) {
  console.log('Arguments: ', a, b);
  return a * b;
}
```
下面的列表包含着 JavaScript 内置的非纯函数。你可以指出它们不满足两个属性中的哪个吗？
* `console.log`
* `element.addEventListener`
* `Math.random`
* `Date.now`
* `$.ajax` (这里 `$` 代表你使用的 Ajax 库)
理想的程序中所有的函数都是纯函数，但是从上面的函数列表可以看出，任何有意义的程序都将包含非纯函数。大多时候我们需要进行 AJAX 调用，检查当前日期或者获取一个随机数。一个好的经验法则是遵循 80/20 规则：函数中有 80％ 应该是纯函数，剩下的 20％ 的必要性将不可避免地是非纯函数。
使用纯函数有几个优点：
* 它们很容易导出和调试，因为它们不依赖于可变的状态。
* 返回值可以被缓存或者“记忆”来避免以后重复计算。
* 它们很容易测试，因为没有需要模拟（mock）的依赖（比如日志，AJAX，数据库等等）。
你编写或者使用的函数返回空（换句话说它没有返回值），那代表它是非纯函数。
### 不变性
让我们回到捕获变量的概念上。来看看 `canRide` 函数。我们认为它是一个非纯函数，因为 `heightRequirement` 变量可以被重新赋值。下面是一个构造出来的例子来说明如何用不可预测的值来对它重新赋值。
```
let heightRequirement = 46;
function canRide(height) {
  return height >= heightRequirement;
}
// Every half second, set heightRequirement to a random number between 0 and 200.
setInterval(() => heightRequirement = Math.floor(Math.random() * 201), 500);
const mySonsHeight = 47;
// Every half second, check if my son can ride.
// Sometimes it will be true and sometimes it will be false.
setInterval(() => console.log(canRide(mySonsHeight)), 500);
```
我要再次强调被捕获的变量不一定会使函数成为非纯函数。我们可以通过只是简单地改变 `heightRequirement` 的声明方式来使 `canRide` 函数成为纯函数。
```
const heightRequirement = 46;
function canRide(height) {
  return height >= heightRequirement;
}
```
通过用 `const` 来声明变量意味着它不能被再次赋值。如果尝试对它重新赋值，运行时引擎将抛出错误；那么，如果用对象来代替数字来存储所有的“常量”怎么样？
```
const constants = {
  heightRequirement: 46,
  // ... other constants go here
};
function canRide(height) {
  return height >= constants.heightRequirement;
}
```
我们用了 `const` ，所以这个变量不能被重新赋值，但是还有一个问题：这个对象可以被改变。下面的代码展示了，为了真正使其不可变，你不仅需要防止它被重新赋值，你也需要不可变的数据结构。JavaScript 语言提供了 `Object.freeze` 方法来阻止对象被改变。
```
'use strict';
// CASE 1: 对象的属性是可变的，并且变量可以被再次赋值。
let o1 = { foo: 'bar' };
// 改变对象的属性
o1.foo = 'something different';
// 对变量再次赋值
o1 = { message: "I'm a completely new object" };
// CASE 2: 对象的属性还是可变的，但是变量不能被再次赋值。
const o2 = { foo: 'baz' };
// 仍然能改变对象
o2.foo = 'Something different, yet again';
// 不能对变量再次赋值
// o2 = { message: 'I will cause an error if you uncomment me' }; // Error!
// CASE 3: 对象的属性是不可变的，但是变量可以被再次赋值。
let o3 = Object.freeze({ foo: "Can't mutate me" });
// 不能改变对象的属性
// o3.foo = 'Come on, uncomment me. I dare ya!'; // Error!
// 还是可以对变量再次赋值
o3 = { message: "I'm some other object, and I'm even mutable -- so take that!" };
// CASE 4: 对象的属性是不可变的，并且变量不能被再次赋值。这是我们想要的！！！！！！！！
const o4 = Object.freeze({ foo: 'never going to change me' });
// 不能改变对象的属性
// o4.foo = 'talk to the hand' // Error!
// 不能对变量再次赋值
// o4 = { message: "ain't gonna happen, sorry" }; // Error