这条警报是否确实显示了用户正在受到影响？是否存在用户没有受到影响也可以
是否可以忽略这条警报？什么情况可能会导致用户忽略这条警报，如何避免？
生或者已经发生的用户可见故障？注4
时删除。
那些不常用的数据收集、汇总，以及警报配置应该定时删除（某些SRE团队的
第6章
分布式系统的监控
，负载测试，日志收集
---
## Page 99
当接近SLO目标的时候，系统会发出E-mail警报；当低于SLO目标时，系统则会发出
5%比其他的请求要慢很多倍。
很多年以前，BigtableSLO是基于某个假想的客户端的平均性能得出的。由于Bigtable
Google内部的基础设施通常提供某个SLO（参见第4章），并且伴随有相应的SLO监控。
BigtableSRE：警报过多的案例
能的整体提升。以下是两个具体的案例。
消除背后的根源问题：如果这种解决办法不可行，那么这条警报的应对就必须要完全自
会变成一个经常触发、需要一个临时的脚本来应对的问题。这时，某个人应该去寻找和
特性和性能目标也经常变化。现在的某个不常见的、自动化比较困难的警报可能很快就
监控系统的长期维护
原因。针对“原因”来说，应该只监控那些非常确定的和非常明确的原因。
是从白盒监控系统还是黑盒监控系统发出都一样。最好多花一些时间监控现象，而不是
从这种角度出发，我们可以得出以下结论：如果某个紧急警报满足上述四点，那么不论
以上这些问题其实反映了在应对紧急警报上的一些深层次的理念：
和底层存储技术栈中的一些问题，平均性能受很大的“长尾”所影响：请求中最差的
优化系统的时间，所以经常会牺牲一些短期内的可用性和性能问题，以换取未来系统性
关于监控系统的设计决策应该充分考虑到长期目标。今天发出的每个紧急警报都会占用
动化。
在现代生产环境中，监控系统需要跟随不断演变的软件一起变化，软件经常重构，负载
·每个紧急警报都应该是关于某个新问题的，不应该彼此重叠。
·是否也会有其他人收到相关的紧急警报，这些紧急警报是否是不必要的？
·收到警报后，是否要进行某个操作？是否需要立即执行该操作，还是可以等到第
一个固定的机械动作，那么它就不应该成为紧急警报。
每个紧急警报的回复都应该需要某种智力分析过程。如果某个紧急警报只是需要
每个紧急警报都应该是可以具体操作的。
次，太多就会导致“狼来了”效应。
每当收到紧急警报时，应该立即需要我进行某种操作。每天只能进入紧急状态几
是短期的？
监控系统的长期维护
57
65
---
## Page 100
9
值得与上级讨论的问题。
一部分人不愿意打补丁的原因是因为他们不相信未来能够处理这些技术债务。这是一个
任何一个可以死记硬背，或者基于某种公式的紧急警报的响应都应该引起注意。团队中
用，在紧急警报带来的压力减轻之后应该继续支持和优先处理那些长期修复问题的工作。
的形式会造成无法维护的系统债务。管理者和技术领导者在这个过程中应该起到直接作
这个“hack”会使得真正的修复优先级无限降低。这种担心是正确的，确实这种打补丁
员想要实现某种“hack”从而为真正的修复方案争取时间，而另外一些成员则担心实现
团队中出现的这种冲突是合理的，这反映出团队自我约束方面的信任危机：一些团队成
持认为开发这样的自动化方案会影响对真实问题的最终修复。
整个团队就这个问题进行了多次讨论：是否应该自动化整个方案？但是一些团队成员坚
这种配置也很差劲：Gmail有几千个任务，每个任务都代表了百分之几的用户。虽然我
的进程做了一些适应，最终应用于Gmail。但是相对不透明地调度代码中的某些Bug一
“Workqueue”，该系统最初是为搜索索引批处理任务构建的。Workqueue针对长期运行
在Gmail服务的早期，整个服务是基于一个分布式进程管理系统构建的，称为
Gmail：可预知的、
优化服务，在未来提供更好的服务质量。
而不是整天被紧急警报打断。最终，通过对警报策略的临时性调整使得团队可以更好地
存储技术栈，而不是不停地修复一些战术性问题。on-call工程师可以真正做一些事情，
该策略给团队带来了喘息空间，提供了一些时间修复Bigtable的长期问题，以及底层的
E-mail警报，因为数量巨大，
时，团队临时将SLO目标降低，采用了请求延迟的75%百分位作为SLI。同时关闭了
为了解决这个问题，团队采用了三阶段方式：首先，在重点提升Bigtable性能的同
回复，或是回复得很消极。
报其实并不紧急，因为基础设施中存在一些大家都知道的问题，所以这些警报经常没人
经常会错过那些真正影响用户的警报，因为大部分的警报都不会影响用户。很多紧急警
团队花费了很多时间来甄别每条警报，以便找出那些真正可以应对的警报。同时，我们
紧急警报。这两种警报一旦触发都是数量巨大的，将消耗工程师非常多的时间来处理：
为了解决这个问题，GmailSRE构建了一个工具来操作调度器尽量减小对用户的影响。
们非常关注Gmail用户的体验，但是这样的警报规则是不可持续的。
直没有被消除。
第6章分布式系统的监控
、可脚本化的人工干预
一个一个检测是不可能的。
---
## Page 101
系统可以支持快速的问题定位与检测。
正在发生和即将发生的问题来进行报警，设置一个可以实际达到的合理目标，保证监控
长远来看，要建立一个成功的on-call轮值体系，以及构建一个稳定的产品需要选择那些
应该倾向于构建一个良好的监控台页面，直接显示所有的非紧急的异常情况。
要在该子系统内部直接进行。E-mail警报的价值通常极为有限，很容易变成噪声。我们
面越高，监控现象越容易，但是监控某些子系统（如数据库）的饱和度和性能参数可能
原因的一些启发性分析应该作为调试过程的补充，而不应该进行报警。监控的技术栈层
健康的监控和警报系统应该是非常简单、易于理解的。紧急警报应该关注于现象，针对
小结
解目前的运维压力，以及系统的健康状况。
轮值发生的故障数量统计，某个故障可能由多个紧急警报组成），保证每个决策者都理
系统有帮助。Google管理团队会按季度进行紧急警报的频率统计（经常以每次on-call
审视是很重要的，要考虑当前的紧急警报的级别是否对未来的一个高可用、高可靠性的
可控的可用性的降低可以换取一些系统长期性的提升。将所有紧急警报作为一个整体来
常是不能持久的，而且这经常依赖于某个团队成员的个人英雄主义。短期内，接受某种
一些“暴力”因素，可以使一个摇摇晃晃的系统保持一定的高可用性。但是这种方案通
上面的Gmail和Bigtable的例子有个共同点：短期与长期的可用性的冲突。经常，通过
长跑
小结
59
---
## Page 102
67>
编辑：BetsyBeyer
Google的自动化系统的演进
第7章
注1对于那些已经明确地理解自动化价值的读者，
许多系统工程师都是从这里开始他们的职业生涯的。具有该背景的系统管理员一般负责
在应对系统规模的增加之外，还有许多其他的理由来使用自动化。以大学计算系统为例，
一致性
自动化的价值究竞是什么？注1
自动化的价值
论自动化系统的价值，以及SRE对自动化系统的态度的演进历史。
方式来看，自动化的价值不仅来源于它所做的事情，还包括对其的明智应用。我们将讨
这两个选择更好的方案是一个不需要这些的系统设计一
因此，虽然我们认为在大多数情况下以软件为基础的自动化是优于手动操作的，但是比
改变力量用在哪的准确性：草率地进行自动化可能在解决问题的同时产生出其他问题。
对于SRE而言，自动化是一种力量倍增器，但不是万能药。当然，对力量的倍增并不能
作者：Niall Murphy、John Looney、Michael Kacirek
“黑科技”之外，就只剩自动化和机械化了。
一节。然而，请注意，我们的描述包含一些阅读本章其他部分可能有用的细微差别。
—FedericoGarciaLorca（1898-1936），西班牙诗人和剧作家
一个自治的系统。或者换一种
---
## Page 103
注2
常有利，前提是该系统足够大。
这意味着，构建一个在问题发生之后马上应对的自动化系统，对于降低系统的总成本非
第17章。
在行业内普遍认同的是，在产品生命周期中一个问题越晚被发现，修复代价越高；参见
用户不再需要花费时间来预防问题发生或者进行（更常见的）事后清理。
修复时间（MTTR）。随后，用户可以把时间花在其他任务上，从而提高开发速度。因为
化系统的原因）。如果自动化能够始终成功运行，那么就可以降低一些常见故障的平均
采用自动化系统解决系统中的常见故障，可以带来额外的好处（这常常是SRE构建自动
修复速度更快
节，这些细节在平台范围内更容易衡量。
此外，一个平台可以暴露自身的性能指标，也可以帮助你发现流程中以前所不知道的细
人类更持续或者更频繁地运行任务，甚至完成一些对于人类而言并不方便执行的任务。
（有的时候教育人类意识到必须进行某种操作很难）。取决于任务的性质，平台可能能比
永远修复。一个平台更容易地被扩展，从而执行额外的任务，这比教授人类要容易得多。
符合成本收益，也无法扩展，就像是在系统运维过程中额外交付的税务。）
展的、广泛适用的，甚至可能带来额外收益的平台。
自动化不仅仅提供一致性。通过正确地设计和实现，
平台性
一致性地执行范围明确、步骤已知的程序一
避免的不一致性会导致错误、疏漏、数据质量的问题和可靠性问题。在这个范畴内一
可能保证每次都用同样的方式进行：没有几个人能像机器一样永远保持一致。这种不可
整个组织和实际执行的人都不好。首先，任何一个人或者一群人执行数百次动作时，不
服务器的区域数据，以及类似的操作。然而，最终看来，这种手动执行任务的方式对于
进行故障迁移和一些小的数据修改，例如修改上游DNS服务器的resolv.conf，修改DNS
一个常见的例子是创建用户账户；其他例子包括单纯的操作职责，如确保备份正确进行、
运维一系列的物理机或软件，并且非常习惯于在履行职责的过程中手动执行各种操作。
一个平台同时也将错误集中化了。也就是说，在代码中修复某个错误可以保证该错误被
地理解现有流程，之后可以更快速地自动化新的流程。
在构建自动化系统的过程中获得的专业知识本身也有价值；工程师可以在构建自动化的过程中更深刻
。一般来说，解决实际生产中出现的问题是最昂贵的，无论是时间还是金钱方面，
一是自动化的首要价值。
。注2（相对来看，不进行自动化既不
，自动化的系统可以提供一个可以扩
自动化的价值
9
<9
<68
---
## Page 104
70
3
的重要设备，或者一个没有源代码的软件，以及没有对生产运维完全的控制权的情况，
部复杂却令人惊讶的高度统一的生产环境。虽然其他组织可能运行一个没有现成的API
支持自动化的另一种说法，特别是在Google内部，是我们在第2章描述的，Google内
说，一致性、快速性和可靠性这些因素主导了大多数有关自动化的权衡的讨论。
署的，而我们通常也没有时间和其他组织一样手动运维系统。注4对于真正的大型服务来
们对于自动化偏爱部分来自于Google特有的业务挑战：Google的产品和服务是全球部
所有上文提到的这种益处和弊端对SRE来说也同样适用，Google更倾向于自动化。我
自动化对GoogleSRE的价值
将某个操作与具体操作的人解耦合是很有效的。
某个任务，任何人都可以执行它们。因此，时间的节省适用于该自动化适用的所有人
手动完成任务所节省的精力。注3这里很容易忽略的一个事实是，一旦你用自动化封装了
动化或代码是否值得编写而摇摆不定，不停地比较写该代码所需要花费的精力与不需要
支持自动化，但是在很多情况下这种优势不能立即计算出来。工程师对于一个特定的自
最后，节省时间是一个经常被引用的使用自动化的理由。虽然大家经常选择这个依据来