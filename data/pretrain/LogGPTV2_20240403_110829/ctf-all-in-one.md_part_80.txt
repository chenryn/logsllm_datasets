.file "hello.c"
.globl main # -- Begin function main
.p2align 4, 0x90
.type main,@function
main: # @main
.cfi_startproc
# BB#0:
pushq %rbp
.Lcfi0:
.cfi_def_cfa_offset 16
.Lcfi1:
.cfi_offset %rbp, -16
movq %rsp, %rbp
.Lcfi2:
.cfi_def_cfa_register %rbp
movabsq $.L.str, %rdi
movb $0, %al
callq printf
xorl %eax, %eax
popq %rbp
retq
.Lfunc_end0:
.size main, .Lfunc_end0-main
.cfi_endproc
# -- End function
.type .L.str,@object # @.str
.section .rodata.str1.1,"aMS",@progbits,1
.L.str:
.asciz "hello, world\n"
.size .L.str, 14
.ident "clang version 5.0.1 (tags/RELEASE_501/final)"
.section ".note.GNU-stack","",@progbits
参考资料
836
5.6 LLVM
llvm documentation
837
5.6.1 Clang
5.6.1 Clang
简介
初步使用
内部实现
参考资料
简介
Clang 一个基于 LLVM 的编译器前端，支持 C/C++/Objective-C 等语言。其开发目
标是替代 GCC。
在软件安全的应用中，已经有许多代码分析工具都基于 Clang 和 LLVM，开发社区
也都十分活跃。
初步使用
首先我们来编译安装 LLVM 和 Clang：
838
5.6.1 Clang
$ svn co http://llvm.org/svn/llvm-project/llvm/trunk llvm
$ cd llvm/tools
$ svn co http://llvm.org/svn/llvm-project/cfe/trunk clang
$ svn co http://llvm.org/svn/llvm-project/lld/trunk lld # option
al
$ svn co http://llvm.org/svn/llvm-project/polly/trunk polly # op
tional
$ cd clang/tools
$ svn co http://llvm.org/svn/llvm-project/clang-tools-extra/trun
k extra # optional
$ cd ../../../.. && cd llvm/projects
$ svn co http://llvm.org/svn/llvm-project/compiler-rt/trunk comp
iler-rt # optional
$ svn co http://llvm.org/svn/llvm-project/openmp/trunk openmp #
optional
$ svn co http://llvm.org/svn/llvm-project/libcxx/trunk libcxx #
optional
$ svn co http://llvm.org/svn/llvm-project/libcxxabi/trunk libcxx
abi # optional
$ svn co http://llvm.org/svn/llvm-project/test-suite/trunk test-
suite # optional
$ cd ../.. && cd llvm
$
$ mkdir build && cd build
$ cmake -G Ninja ../
$ cmake --build .
$ cmake --build . --target install
内部实现
Clang 前端的主要流程如下：
Driver -> Lex -> Parse -> Sema -> CodeGen (LLVM IR)
参考资料
839
5.6.1 Clang
llvm documentation
840
5.7 程序切片
5.7 程序切片
841
5.8 SAT/SMT
SAT/SMT
参考资料
参考资料
Quick introduction into SAT/SMT solvers and symbolic execution
Practical Symbolic Execution and SATisfiability Module Theories (SMT) 101
842
5.8.1 Z3
5.8.1 Z3
安装
Z3 理论基础
使用 Z3
Z3 在 CTF 中的运用
参考资料
Z3 是一个由微软开发的可满足性摸理论（Satisfiability Modulo Theories，SMT）
的约束求解器。所谓约束求解器就是用户使用某种特定的语言描述对象（变量）的
约束条件，求解器将试图求解出能够满足所有约束条件的每个变量的值。Z3 可以
用来检查满足一个或多个理论的公式的可满足性，也就是说,它可以自动化地通过内
置理论对一阶逻辑多种排列进行可满足性校验。目前其支持的理论有：
equality over free 函数和谓词符号
实数和整形运算(有限支持非线性运算)
位向量
阵列
元组/记录/枚举类型和代数（递归）数据类型
...
因其强大的功能，Z3 已经被用于许多领域中，在安全领域，主要见于符号执行、
Fuzzing、二进制逆向、密码学等。另外 Z3 提供了多种语言的接口，这里我们使用
Python。
安装
在 Linux 环境下，执行下面的命令：
$ git clone https://github.com/Z3Prover/z3.git
$ cd z3
$ python scripts/mk_make.py --python
$ cd build
$ make
$ sudo make install
843
5.8.1 Z3
另外还可以使用 pip 来安装 Python 接口（py2和py3均可），这是二进制分析框架
angr 里内置的修改版：
$ sudo pip install z3-solver
Z3 理论基础
Op Mnmonics Description
0 true 恒真
1 flase 恒假
2 = 相等
3 distinct 不同
4 ite if-then-else
5 and n元 合取
6 or n元 析取
7 iff implication
8 xor 异或
9 not 否定
10 implies Bi-implications
使用 Z3
先来看一个简单的例子：
>>> from z3 import *
>>> x = Int('x')
>>> y = Int('y')
>>> solve(x > 2, y >> simplify(x + y + 2*x + 3)
3 + 3*x + y
>>> simplify(x >> simplify(And(x + 1 >= 3, x**2 + x**2 + y**2 + 2 >= 5))
And(x >= 2, 2*x**2 + y**2 >= 3)
>>>
>>> simplify((x + 1)*(y + 1))
(1 + x)*(1 + y)
>>> simplify((x + 1)*(y + 1), som=True) # sum-of-monomials：
单项式的和
1 + x + y + x*y
>>> t = simplify((x + y)**3, som=True)
>>> t
x*x*x + 3*x*x*y + 3*x*y*y + y*y*y
>>> simplify(t, mul_to_power=True) # mul_to_power 将乘法
转换成乘方
x**3 + 2*y*x**2 + x**2*y + 3*x*y**2 + y**3
simplify() 函数用于对表达式进行化简，同时可以设置一些选项来满足不同的
要求。更多选项使用 help_simplify() 获得。
同时，Z3 提供了一些函数可以解析表达式：
845
5.8.1 Z3
>>> n = x + y >= 3
>>> "num args: ", n.num_args()
('num args: ', 2)
>>> "children: ", n.children()
('children: ', [x + y, 3])
>>> "1st child:", n.arg(0)
('1st child:', x + y)
>>> "2nd child:", n.arg(1)
('2nd child:', 3)
>>> "operator: ", n.decl()
('operator: ', >=)
>>> "op name: ", n.decl().name()
('op name: ', '>=')
set_param() 函数用于对 Z3 的全局变量进行配置，如运算精度，输出格式等
等：
>>> x = Real('x')
>>> y = Real('y')
>>> solve(x**2 + y**2 == 3, x**3 == 2)
[x = 1.2599210498?, y = -1.1885280594?]
>>>
>>> set_param(precision=30)
>>> solve(x**2 + y**2 == 3, x**3 == 2)
[x = 1.259921049894873164767210607278?,
y = -1.188528059421316533710369365015?]
逻辑运算有 And 、 Or 、 Not 、 Implies 、 If ，另外 == 表示 Bi-
implications。
846
5.8.1 Z3
>>> p = Bool('p')
>>> q = Bool('q')
>>> r = Bool('r')
>>> solve(Implies(p, q), r == Not(q), Or(Not(p), r))
[q = False, p = False, r = True]
>>>
>>> x = Real('x')
>>> solve(Or(x  10), Or(p, x**2 == 2), Not(p))
[x = -1.4142135623?, p = False]
Z3 提供了多种 Solver，即 Solver 类，其中实现了很多 SMT 2.0 的命令，如
push , pop , check 等等。
>>> x = Int('x')
>>> y = Int('y')
>>> s = Solver() # 创造一个通用 solver
>>> type(s) # Solver 类
>>> s
[]
>>> s.add(x > 10, y == x + 2) # 添加约束到 solver 中
>>> s
[x > 10, y == x + 2]
>>> s.check() # 检查 solver 中的约束是否满足
sat # satisfiable/满足
>>> s.push() # 创建一个回溯点，即将当前栈的大小保存下来
>>> s.add(y >> s
[x > 10, y == x + 2, y >> s.check()
unsat # unsatisfiable/不满足
>>> s.pop(num=1) # 回溯 num 个点
>>> s
[x > 10, y == x + 2]
>>> s.check()
sat
>>> for c in s.assertions(): # assertions() 返回一个包含所有约束
的AstVector
... print(c)
847
5.8.1 Z3
...
x > 10
y == x + 2
>>> s.statistics() # statistics() 返回最后一个 check() 的统计信息
(:max-memory 6.26
:memory 4.37
:mk-bool-var 1
:num-allocs 331960806
:rlimit-count 7016)
>>> m = s.model() # model() 返回最后一个 check() 的 model
>>> type(m) # ModelRef 类
>>> m
[x = 11, y = 13]
>>> for d in m.decls(): # decls() 返回 model 包含了所有符号
的列表
... print("%s = %s" % (d.name(), m[d]))
...
x = 11
y = 13
为了将 Z3 中的数和 Python 区分开，应该使用 IntVal() 、 RealVal() 和
RatVal() 分别返回 Z3 整数、实数和有理数值。
848
5.8.1 Z3
>>> 1/3
0.3333333333333333
>>> RealVal(1)/3
1/3
>>> Q(1, 3) # Q(a, b) 返回有理数 a/b
1/3
>>>
>>> x = Real('x')
>>> x + 1/3
x + 3333333333333333/10000000000000000
>>> x + Q(1, 3)
x + 1/3
>>> x + "1/3"
x + 1/3
>>> x + 0.25
x + 1/4
>>> solve(3*x == 1)
[x = 1/3]