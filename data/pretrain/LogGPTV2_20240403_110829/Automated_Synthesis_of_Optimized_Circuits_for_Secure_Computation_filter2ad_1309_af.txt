### Framework for High-Precision Distance Computation

Our framework allows for the direct computation of distance formulas on floating-point numbers with multiple precision options, thereby offering higher precision.

#### Universal Transverse Mercator (UTM)
- **Description**: This distance metric maps the Earth onto a set of planes and provides accurate results when points A and B are relatively close to each other within the same UTM zone.
- **Coordinates**: Points \( CA = (x_A, y_A) \) and \( CB = (x_B, y_B) \).
- **Distance Formula**:
  \[
  D_{\text{UTM}}(CA, CB) < \epsilon \iff (x_A - x_B)^2 + (y_A - y_B)^2 < \epsilon^2
  \]
- **Inputs**:
  - Underlined variables (\( x_A, y_A \)) are inputs from party A.
  - Other terms (\( x_B, y_B \)) are inputs from party B.
- **Operations**:
  - 2 Floating-Point Squares (FPSQR)
  - 3 Floating-Point Additions (FPADD)
  - 1 Floating-Point Comparison (FPCMP)

#### Earth-Centered, Earth-Fixed (ECEF)
- **Description**: This distance metric uses the ECEF coordinate system, which provides very accurate results even when the points are far apart.
- **Coordinates**: Points \( CA = (x_A, y_A, z_A) \) and \( CB = (x_B, y_B, z_B) \), where (0, 0, 0) is the center of the Earth.
- **Distance Formula**:
  \[
  D_{\text{ECEF}}(CA, CB) < \epsilon \iff (x_A - x_B)^2 + (y_A - y_B)^2 + (z_A - z_B)^2 < \left(2R \tan\left(\frac{\epsilon}{2R}\right)\right)^2
  \]
- **Inputs**:
  - Underlined variables (\( x_A, y_A, z_A \)) are inputs from party A.
  - Other terms (\( x_B, y_B, z_B \)) are inputs from party B.
- **Operations**:
  - 3 FPSQR
  - 5 FPADD
  - 1 FPCMP

#### Haversine (HS)
- **Description**: This distance metric is based on the haversine formula, a trigonometric formula used to calculate the great-circle distance between two points on a sphere.
- **Distance Formula**:
  \[
  D_{\text{HS}}(CA, CB) < \epsilon
  \]
  (The exact formula and operations for the haversine distance are not provided in the original text.)

### Runtimes for Proximity Tests

| Distance Metric | Parallel Batch Size | AND Gates | Size | Depth |
|-----------------|---------------------|-----------|------|-------|
| UTM             | 1                   | 401.0 + 102.0 | 4.4 + 59.8 | 18.0 + 2.4 |
| ECEF            | 1                   | 19.9 + 67.2 | 18.1 + 5.7 | 1 000 . . . 1 300 |
| HS              | 1                   | 404.0 + 105.0 | 5.7 + 60.1 | 12.8 + 3.3 |
| HE [ˇSG14]      | 1                   | 13.9 + 78.1 | 27.4 + 8.8 | 1 700 |
| GC [ˇSG14]      | 1                   | 409.0 + 124.0 | 13.6 + 67.5 | 17.9 + 5.6 |
| 32-bit GMW     | 1                   | 49.5 + 283.6 | 67.8 + 18.0 | – |
| 32-bit Yao      | 1                   | 4.0 + 1.49 | 4.2 + 0.87 | 10.6 + 2.65 |
| 64-bit GMW     | 1                   | 12.5 + 2.54 | 5.8 + 1.56 | 6.6 + 1.32 |
| 64-bit Yao      | 1                   | 15.8 + 2.91 | 19.9 + 3.88 | 33.3 + 3.40 |

### References

- **[ABZS13]** M. Aliasgari, M. Blanton, Y. Zhang, A. Steele. Secure computation on floating point numbers. In NDSS’13. The Internet Society, 2013.
- **[ALSZ13]** G. Asharov, Y. Lindell, T. Schneider, M. Zohner. More efficient oblivious transfer and extensions for faster secure computation. In ACM CCS’13, p. 535–548. ACM, 2013.
- **[Bea91]** D. Beaver. Efficient multiparty protocols using circuit randomization. In CRYPTO’91, volume 576 of LNCS, p. 420–432. Springer, 1991.
- **[Ber]** Berkeley Logic Synthesis. ABC: a system for sequential synthesis and verification, release 70930. http://www.eecs.berkeley.edu/~alanmi/abc/.
- **[BHKR13]** M. Bellare, V. Hoang, S. Keelveedhi, P. Rogaway. Efficient garbling from a fixed-key blockcipher. In IEEE S&P’13, p. 478–492. IEEE, 2013.
- **[BNP08]** A. Ben-David, N. Nisan, B. Pinkas. FairplayMP: a system for secure multi-party computation. In ACM CCS’08, p. 257–266. ACM, 2008.
- **[BNTW12]** D. Bogdanov, M. Niitsoo, T. Toft, J. Willemson. High-performance secure multi-party computation for data mining applications. International Journal of Information Security, 11(6):403–418, 2012.
- **[BP06]** J. Boyar, R. Peralta. Concrete multiplicative complexity of symmetric functions. In Mathematical Foundations of Computer Science (MFCS’06), volume 4162 of LNCS, p. 179–189. Springer, 2006.
- **[BPP00]** J. Boyar, R. Peralta, D. Pochuev. On the multiplicative complexity of boolean functions over the basis (∧,⊕, 1). Theoretical Computer Science, 235(1):43–57, 2000.
- **[DSZ15]** D. Demmler, T. Schneider, M. Zohner. ABY – a framework for efficient mixed-protocol secure two-party computation. In NDSS’15. The Internet Society, 2015. Code: https://github.com/encryptogroup/ABY.
- **[FK11]** M. Franz, S. Katzenbeisser. Processing encrypted floating point signals. In ACM Multimedia and Security (MM&Sec’11), p. 103–108. ACM, 2011.
- **[FP008]** IEEE standard for floating-point arithmetic. IEEE Std 754-2008, p. 1–70, Aug 2008.
- **[GMW87]** O. Goldreich, S. Micali, A. Wigderson. How to play any mental game. In STOC’87, p. 218–229. ACM, 1987.
- **[GSV07]** J. Garay, B. Schoenmakers, J. Villegas. Practical and secure solutions for integer comparison. In PKC’07, volume 4450 of LNCS, p. 330–342. Springer, 2007.
- **[HEK12]** Y. Huang, D. Evans, J. Katz. Private set intersection: Are garbled circuits better than custom protocols? In NDSS’12. The Internet Society, 2012.
- **[HEKM11]** Y. Huang, D. Evans, J. Katz, L. Malka. Faster secure two-party computation using garbled circuits. In USENIX Security’11, p. 539–554. USENIX, 2011.
- **[HFKV12]** A. Holzer, M. Franz, S. Katzenbeisser, H. Veith. Secure two-party computations in ANSI C. In ACM CCS’12, p. 772–783. ACM, 2012.
- **[HKS+10]** W. Henecka, S. K¨ogl, A.-R. Sadeghi, T. Schneider, I. Wehrenberg. TASTY: Tool for Automating Secure Two-partY computations. In ACM CCS’10, p. 451–462. ACM, 2010.
- **[IKNP03]** Y. Ishai, J. Kilian, K. Nissim, E. Petrank. Extending oblivious transfers efficiently. In CRYPTO’03, volume 2729 of LNCS, p. 145–161. Springer, 2003.
- **[KA99]** Y.-K. Kwok, I. Ahmad. Static scheduling algorithms for allocating directed task graphs to multiprocessors. ACM Computing Surveys (CSUR), 31(4):406–471, 1999.
- **[KO62]** A. A. Karatsuba, Y. Ofman. Multiplication of many-digital numbers by automatic computers. SSSR Academy of Sciences, 145:293–294, 1962.
- **[KS08]** V. Kolesnikov, T. Schneider. Improved garbled circuit: Free XOR gates and applications. In ICALP’08, volume 5126 of LNCS, p. 486–498. Springer, 2008.
- **[KSMB13]** B. Kreuter, A. Shelat, B. Mood, K. R. B. Butler. PCF: A portable circuit format for scalable two-party secure computation. In USENIX Security’13, p. 321–336. USENIX, 2013.
- **[KSS09]** V. Kolesnikov, A.-R. Sadeghi, T. Schneider. Improved garbled circuit building blocks and applications to auctions and computing minima. In CANS’09, volume 5888 of LNCS, p. 1–20. Springer, 2009.
- **[KSS12]** B. Kreuter, A. Shelat, C.-H. Shen. Billion-gate secure computation with malicious adversaries. In USENIX Security’12, p. 285–300. USENIX, 2012.
- **[KSS13]** F. Kerschbaum, T. Schneider, A. Schr¨opfer. Automatic protocol selection in secure two-party computations. In ACNS’15, volume 8479 of LNCS, p. 1–18. Springer, 2013.
- **[KW14]** L. Kamm, J. Willemson. Secure floating point arithmetic and private satellite collision analysis. International Journal of Information Security, p. 1–18, 2014.
- **[LF80]** R. E. Ladner, M. J. Fischer. Parallel prefix computation. Journal of the ACM, 27(4):831–838, 1980.
- **[LWN+15]** C. Liu, X. S. Wang, K. Nayak, Y. Huang, E. Shi. ObliVM: A programming framework for secure computation. In IEEE S&P’15, p. 359–376. IEEE, 2015.
- **[Mal11]** L. Malka. VMCrypt - modular software architecture for scalable secure computation. In ACM CCS’11, p. 715–724. ACM, 2011.
- **[MLB12]** B. Mood, L. Letaw, K. R. B. Butler. Memory-efficient garbled circuit generation for mobile devices. In FC’12, volume 7397 of LNCS, p. 254–268. Springer, 2012.
- **[MNPS04]** D. Malkhi, N. Nisan, B. Pinkas, Y. Sella. Fairplay – a secure two-party computation system. In USENIX Security’04, p. 287–302. USENIX, 2004.
- **[NNOB12]** J. B. Nielsen, P. S. Nordholt, C. Orlandi, S. S. Burra. A new approach to practical active-secure two-party computation. In CRYPTO’12, volume 7417 of LNCS, p. 681–700. Springer, 2012.
- **[Sav97]** J. E. Savage. Models of Computation: Exploring the Power of Computing. Addison-Wesley Pub, Boston, MA, USA, 1st edition, 1997.
- **[ˇSG14]** J. ˇSedˇenka, P. Gasti. Privacy-preserving distance computation and proximity testing on earth, done right. In ACM ASIACCS’14, p. 99–110. ACM, 2014.
- **[SHS+15]** E. M. Songhori, S. U. Hussain, A.-R. Sadeghi, T. Schneider, F. Koushanfar. TinyGarble: Highly compressed and scalable sequential garbled circuits. In IEEE S&P’15, p. 411–428. IEEE, 2015.
- **[ST]** N. Smart, S. Tillich. Circuits of basic functions suitable for MPC and FHE. http://www.cs.bris.ac.uk/Research/CryptographySecurity/MPC/.
- **[Syn10]** Synopsys Inc. Design compiler, 2010. http://www.synopsys.com/Tools/Implementation/RTLSynthesis/DesignCompiler.
- **[Syn15]** Synopsys Inc. DesignWare library - datapath and building block IP. https://www.synopsys.com/dw/buildingblock.php, 2015.
- **[SZ13]** T. Schneider, M. Zohner. GMW vs. Yao? Efficient secure two-party computation with low depth circuits. In FC’13, volume 7859 of LNCS, p. 275–292. Springer, 2013.
- **[Wak68]** A. Waksman. A permutation network. Journal of the ACM, 15(1):159–163, 1968.
- **[Wol]** C. Wolf. Yosys open synthesis suite. http://www.clifford.at/yosys/.
- **[Yao86]** A. C.-C. Yao. How to generate and exchange secrets. In FOCS’86, p. 162–167. IEEE, 1986.
- **[ZRE15]** S. Zahur, M. Rosulek, D. Evans. Two halves make a whole: Reducing data transfer in garbled circuits using half gates. In EUROCRYPT’15, volume 9057 of LNCS, p. 220–250. Springer, 2015.
- **[ZSB13]** Y. Zhang, A. Steele, M. Blanton. PICCO: a general-purpose compiler for private distributed computation. In ACM CCS’13, p. 813–826. ACM, 2013.