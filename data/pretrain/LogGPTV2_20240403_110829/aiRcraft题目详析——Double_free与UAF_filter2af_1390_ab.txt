                     |    +-----------------------+     |     |                       |
                     |    |          ubk          |     |     |                       |
                     |    +-----------------------+     |     |      plane_name       |
                     |    |        ......         |     |     |                       |
                     |    |                       |     |     |                       |
                     |    +-----------------------+     |     +-----------------------+
                     |                                  |     |        airport        |
     op_plane->company_name=companies[36]               |     +-----------------------+
                     |                                  |     |          ufd          |
                     |            op_plane              |     +-----------------------+
                     |    +-----------------------+     |     |          ubk          |
                     |    |       prevsize        |     |     +-----------------------+
                     |    +-----------------------+     |     |        ......         |
                     |    |         size          |     |     +-----------------------+
                     |    +-----------------------+     |                              
                     |    |        ......         |     |                              
                     |    +-----------------------+     |                              
                     +--->|     company_name      |-----+                              
                          +-----------------------+                                    
                          |                       |                                    
                          |                       |                                    
                          |        ......         |                                    
                          |                       |                                    
                          |                       |                                    
                          +-----------------------+                                    
    	更加有意思的事情在于old_plane结构体中plane_name所在的位置：
                          +-----------------------+              
                          |       prevsize        |              
                          +-----------------------+              
                          |         size          |              
     plane_header->ufd--->+-----------------------+------------  
                          |          fd           |     |        
                          +-----------------------+     |        
                          |          bk           |     |        
                          +-----------------------+  plane_name  
                          |                       |     |        
                          |                       |     |        
                          |                       |     |        
                          |                       |     v        
                          +-----------------------+------------  
                          |                       |              
                          |                       |              
                          |                       |              
                          |        ......         |              
                          |                       |              
                          |                       |              
                          |                       |              
                          |                       |              
                          +-----------------------+              
    	图中的fd与bk指的是libc的堆管理结构中的指针：
    		1.如果这个位置存在一个free状态的，大小处于fast bin范围的chunk，且fastbin中存在其他的chunk，fd的位置就会是一个指向堆中某个chunk的指针；
    		2.如果这个位置存在一个free状态的，大小处于unsorted bin范围的chunk，fd与bk的位置都就都会是指向main_arena结构体的指针。
    	在之后的函数中，我们会看到：我们选择打印plane结构体，实际上是打印plane->company_name所指向的字符串，因此一旦我们之前所说的条件达成，堆中的某个地址或者libc中的某个地址就会以字符串的形式被打印出来。我们就可以以此泄露想要的地址，绕过PIE以及ASLR的限制。
    	除此之外，我们还有另外一种思路：
    	在偏移量为0x0000000000202080处，有airports数组，对应companies中的索引为 (offset(airports) - offset(companies))/0x8 = 13, 如果我们将正在申请的plane（不妨称为op_plane）的元素op_plane->company赋值为airports所在的位置，而刚好airports数组的第一个元素正储存着一个airport的指针(不妨称为old_airport)，那么我们就可以直接访问old_airport的元素了：
                                     airports                                              
     equivalent to           +-----------------------+                                     
     companies[13]-----+---->|      airports[0]      |-----+                               
                       |     +-----------------------+     |                               
                       |     |      airports[1]      |     |                               
                       |     +-----------------------+     |                               
                       |     |      airports[2]      |     |                               
                       |     +-----------------------+     |                               
                       |     |                       |     |                               
                       |     |                       |     |            old_airport        
                       |     |                       |     |      +-----------------------+
                       |     |        ......         |     |      |       prevsize        |
                       |     |                       |     |      +-----------------------+
                       |     |                       |     |      |         size          |
                       |     |                       |     +----->+-----------------------+
                       |     +-----------------------+     |      |     airport_name      |
                       |                                   |      +-----------------------+
     op_plane->company_name=companies[13]                  |      |                       |
                       |                                   |      |                       |
                       |             op_plane              |      |        ......         |
                       |     +-----------------------+     |      |                       |
                       |     |       prevsize        |     |      |                       |
                       |     +-----------------------+     |      |                       |
                       |     |         size          |     |      |                       |
                       |     +-----------------------+     |      +-----------------------+
                       |     |        ......         |     |                               
                       |     +-----------------------+     |                               
                       +---->|     company_name      |-----+                               
                             +-----------------------+                                     
                             |                       |                                     
                             |                       |                                     
                             |        ......         |                                     
                             |                       |                                     
                             |                       |                                     
                             +-----------------------+                                     
    	old_airport->airport_name正是一个指向某个chunk的指针，这个chunk是在进行airport_build操作时为了存储airport_name字符串而申请，同样在堆上，因此这里可以泄露出堆的地址；
    	同样地old_airport->airport_name所对应的偏移量在chunk处于free状态时也是libc管理结构中的fd指针，指向main_arena，因此可以泄露出libc的基地址。
    */
    /*
    	接下来展示两个在buy_plane函数中调用的小函数:
    	1.add_plane_to_linklist()
    	2.wrapped_free()
    */
    //add_plane_to_linklist函数,offset=0x0000000000000B98
    plane* add_plane_to_linklist(struct plane *plane){
    	struct plane *result;
    	struct plane *i;
    	for( i = &plane_header; i->ufd; i = i->ufd);
    	i->ufd = plane;
    	plane->ufd = 0;
    	result = plane;
    	plane->ubk = i;
    	return result;
    }
    //wrapped_free函数,offset=0x0000000000000B7D
    void wrapped_free(struct plane *plane){
    	free(plane);
    }
    //build_airport函数，offset=0x0000000000000E08
    int build_airport(){
    	struct airport **tmp;
    	int i;
    	int j;
    	int name_length;
    	for( i = 0; i  0xF && name_length planes[j] = 0;
    			airport->airport_name = malloc(name_length);
    			memset(airport->airport_name, 0, name_length);
    			printf("Please input the name: ", 0);
    			input2addr(airport->airport_name, name_length);
    			tmp = airports;
    			airports[i] = airport;
    		}
    		else{
    			v0 = puts("Invalid length!");
    		}
    	}
    	else{
    		v0 = puts("Too much airport!");
    	}
    	return (signed int)v0;
    }
    /*
    	这个函数的返回值比较奇怪但是无关紧要——反正也没有函数去接收它的返回值。
    	注意这里airport_name所指向的空间是依据我们填写的尺寸进行申请的空间，其空间的范围为 name_length > 0xF && name_length = 0 && v1 planes[i];
        tmp2 = airport->planes[i];
        if ( tmp2 )
        {
          printf("Plane name: %s\n", tmp2);
          printf("Build by %s\n", tmp2->company_name);
          tmp1 = printf("Docked at: %s\n", *tmp2->airport);
        }
      }
      return tmp1;
    }
    /*
    	这就是配合之前所提到的漏洞泄露地址的关键函数
    */
    //sell_airport函数,offset = 0x0000000000000F5E
    int sell_airport(struct airport *airport)
    {
      struct plane *ptr;
      int i;
      for ( i = 0; i planes[i] )
        {
          ptr = airport->planes[i];
          unlink_plane(airport->planes[i]);
          free(ptr);
          airport->planes[i] = 0LL;
        }
      }
      free(airport);
      return puts("Success!");
    }
    /*
    	这个函数将airport中所有的plane全部从链表中取出，并进行释放，同时将airport->planes数组的对应位置置零，最后将自身释放。
    	这个函数主要有这样几个问题：
    		1.在释放自身之前，并没有释放airport_name所指向的空间，因此airport->name所指向的空间永远没有机会释放了；
    		2.从逻辑上来讲，一个plane如果已经被释放过，应该在airport->planes数组中同时清零，而在之后提到的sell_plane函数中并没有这么做，因此在plane所在的chunk被释放之后，还可以通过sell_airport函数再次进行free操作，达到double free的效果；
    		3.在释放自身之后，并没有从airports数组中把相对应的元素清零，这意味着一旦释放之后，这个airport的指针将一直存在。
    */
    //select_plane函数，offset = 0x0000000000001242
    unsigned __int64 select_plane()
    {
      int name_length;
      struct plane *plane;
      char name;
      unsigned __int64 v4;
      v4 = __readfsqword(0x28u);
      memset(&name, 0, 0x20uLL);
      printf("Which plane do you want to choose? ", 0LL);
      name_length = input2addr(&name, 32);
      for ( plane = plane_header.ufd; plane && strncmp(plane->plane_name, &name, name_length); plane = plane->ufd );
      if ( plane )
        operate_plane(plane);
      else
        puts("No such plane!");
      return __readfsqword(0x28u) ^ v4;
    }
    /*
    	通过plane->plane_name字符串在链表中选择一个plane，并进入二级菜单
    */
    //operate_plane函数，offset = 0x0000000000001108
    int operate_plane(struct plane *plane)
    {
      int choice;
      int result;
      while ( 1 )
      {
        puts("What do you want to do ?");
        puts("1. Fly to another airport");
        puts("2. Sell the plane");
        puts("3. Exit");
        printf("Your choice: ");
        choice = input_choice();
        result = choice;
        if ( choice == 2 )
          break;
        if ( result == 3 )
          return result;
        if ( result == 1 )
          fly_to(plane);
        else
          puts("Invaild choice!");
      }
      return sell_plane(plane);
    }
    /*
    	这是对plane操作的二级菜单
    */
    //fly_to函数，offset = 0x0000000000000FEA