should  be  a  timeout  value  do not  work  well  in  highly  dy- 
namic environments,  such as call processing. More complex 
and difficult  to implement  dynamic schemes capable of on- 
line  adjusting  of the timeout  based  on current  system  activ- 
ity are required.  Our technique allows for quick detection of 
client hangs and consequently enables fast recovery. 
, 
The  confidence  intervals  are  calculated  assuming  a  binomial  distribu- 
tion. For  outcomes categories with  small number of  observations,  the two 
tables give a raw number of observed cases. 
‘ The number of runs per error injection  campaign  varies (i.e., it is not al- 
ways  800) because  we  ignore experiments  for which the application,  due 
to an error, does not even start to execute. 
2 
32 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:59:52 UTC from IEEE Xplore.  Restrictions apply. 
Category 
NA 
NE 
PD 
A D  
1 
I 
Without  Without 
PECOS 
PECOS 
Without 
With 
1  Audit 
1  Audit 
I  579" 
I  5XT" 
53% 
46% 
(40.5 I )% 
(48,59)% 
NIA 
NIA 
I (6, l 2 ) 7 ~   I 
NIA 
8% 
With 
PECOS 
Without 
Audit 
2% 
( I ,  4)% 
83% 
(79, 871% 
NIA 
With 
PECOS 
With 
Audit 
I 
I  5n9" 
4% 
(2,6)% 
77% 
(73, SI)% 
I 
CH 
Fv 
(47, 58)% 
6 
I 
Total Errors  I  777 
Table 7: Cumulative Results from Directed Injection to 
(32, 42)% 
4 
1 
1  738 
(15, 23)% 
0 
0 
I  787 
( I  I ,   18)% 
0 
1 
1  800 
Control Flow Instructions 
Audit 
Audit 
73% 
28% 
(23, 34)% 
NIA 
(20, 3 3 %  
NIA 
NIA 
7 4  
Without 
Audit 
52% 
(9, l5)% 
45% 
(40, 50)% 
NIA 
With 
With 
Audit 
53% 
(5. IO)% 
49% 
(44, 54)% 
2% 
(60,71)% 
4 
5 6  
(3,8)% 
745 
(54,68)% 
5 
3% 
(1,712 
774 
(36,46)% 
2 
2% 
1  (l,4)% 
[  800 
(34,44)% 
2 
I  (1,4)% 
2% 
I  800 
PD 
A D  
CH 
Fv 
Total Errors 
Error Target 
Client 
Database 
Without 
PECOS 
Without 
I  Audit 
I  28% 
37% 
Client+Database 
( 2 5 7 3 %  error 
mix) 
35% 
(0.25*28+ 
0.75'37) 
With 
PECOS 
With  Without 
I  Audit 
I 57% 
( 12+45) 
37% 
Without 
PECOS 
I  Audit 
I  33% 
(26+7) 
87% 
(85+2) 
73% 
With 
PECOS 
With 
I  Audit 
I  58% 
(7+49+2) 
87% 
42% 
80% 
233 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:59:52 UTC from IEEE Xplore.  Restrictions apply. 
techniques.  Consequently,  to improve the  overall coverage, 
it  is  important  to have  mechanisms  for  detecting  errors  in 
the data flow of the client. 
7  Conclusions 
The  paper  presented 
the  design,  implementation,  and 
evaluation  of  a  framework  for  providing  data  and  control 
flow  error  detection  and  recovery  in  a  wireless  call- 
processing  environment.  In  the  proposed  design,  the  data 
audit is responsible for detecting and correcting errors in the 
database  of  the  target  system.  A  preemptive  control flow 
checking  technique,  PECOS,  is applied to protect the  call- 
processing  clients from  control  flow  errors.  The effective- 
ness  of  these techniques  is evaluated through  detailed  error 
injection experiments. 
The results  show that the data audit subsystem is successful 
in  detecting about  85% of  the  errors  injected  to the  data- 
base.  In spite of  the audit subsystem, more than  13% of  the 
database  corruptions  propagated  and  affected  the  clients. 
PECOS was shown to substantially  reduce  the  incidence  of 
process crashes and hangs for control flow injections to the 
call-processing clients.  Even  with  PECOS  present,  about 
8% of the client errors resulted  in incorrect data being writ- 
ten  to the  database. A  study  of  the combined  effect of  PE- 
COS and data audits shows coverage  of  80% and  indicates 
data  flow  errors  as  a  key  reason  for error  escapes. Future 
work  should  include  development  of  adaptive  techniques 
for detecting errors in data flow of applications. 
Acknowledgments 
This  work  was  supported  in  part  by  NSF  grants  (CCR- 
9902026 and  CCR-O086096ITR),  in  part  by  a  grant  from 
Motorola  Inc.  as part  of  Motorola Center  for Communica- 
tions and in part by JPL under grant NASAJPL-961345. We 
thank  P. Jones, J.  Xu, W. Gu, and  S. Narayanaswamy  for 
developing error injectors used in the experiments. 
References 
[I] Z.  Alkhalifa, et  al., “Design and  Evaluation of  System-Level 
Checks for on-line Control Flow Error Detection, ” IEEE Trarisac- 
tions  on  Parallel  and  Distributed  Systems,  Vol.  IO,  No.  6, pp. 
627-641, June 1999. 
[2] S. Bagchi, “Hierarchical Error Detection in  a SIFT Environ- 
ment,” Ph.D. Thesis, Univ. of Illinois, 2000. 
[3] F. V. Brasiliero, et al., “Implementing Fail-Sailent Nodes for 
Distributed  Systems,” IEEE Transactions on  Compurers, Vo1.45, 
No.11, pp.1226-1238, 1996. 
[4] D. Costa, T. Rilho, H. Madeira, “Joint Evaluation of Perform- 
ance and Robustness of a COTS DBMS through Fault-Injection,” 
in  Proc.  b i t .   Conference on  Dependable  Systems  and  Networks, 
2000, pp.25 1-260. 
[5] M. Emst, et al., “Dynamically Discovering Likely Program In- 
variants to  Support Program Evolution,” Proc.  21”  lnternationa/ 
Conference on Software EngineerB~g, pp.213-224, 1999. 
161 G. Haugk, et al., “The 5ESS Switching System: Maintenance 
Capabilities.” AT&T  Technical Journal, Vol. 64, No. 6, 1985, pp. 
1385-1416. 
[7] G. Kanawati, N. Kanawati, J. Abraham, “FERRARI: A  Flexi- 
ble  Software-Based  Fault  and  Error  Injection  System,”  IEEE 
Trans. on Computers, Vo1.44, No.2, pp. 248-260, February 1995. 
[8] H. Levendel, Private communication, May 1999. 
[9] Y. Liu, “Database Error Detection and Recovery in a Wireless 
Network Controller,” M.S. Thesis, Univ. of Illinois, 2000. 
[IO]  H.  Madeira,  J.  G.  Silva,  “On-Line  Signature  Leaming  and 
Checking,”  Proc.  2““ IFIP  Working  Cord  on  Dependable  Corn- 
pitting for Critical Applications, pp. 170- 177, 199 1. 
[ 1 I ]   A.  Mahmood, E.J. McCluskey, “Concurrent Error  Detection 
Using  Watchdog  Processors-A 
Survey,” IEEE  Trans. on  Corn- 
p4ters. Vol. 37, No. 2, pp.160-174, 1988. 
1121 T.  Michel,  R.  Leveugle,  G.  Saucier,  “A  New  Approach  to 
Control  Flow  Checking  without  Program  Modification,”  Proc. 
21“  Syrnposiurn. on Fault-Tolerant Coinpuring, pp.334-34 I ,   199 1, 
1131 G. Miremadi, et al., “Two Software Techniques for On-Line 
Error  Detection,”  Proc.  22“d lnt’l Symp.  on  Fault-Tolerant Corn- 
puting, pp.328-335,  1992. 
[ 141 G .  Miremadi, et al., “Use of Time and Address Signatures for 
Control  Flow  Checking,”  Proc.  SIh  lFlP  Working  Cor$  on  De- 
pendable Computing f o r  Critical Applications, pp. 1 13- 124, 1995. 
1151 J.  Ohlsson, M. Rimen, U. Gunneflo, “A  Study of the Effects 
of  Transient  Fault  Injection  into  a  32-bit  RlSC  with  Built-in 
Watchdog,”  Pr0c.22”~ Ini’l  Symposium  on  Fault-Tolerant  Com- 
puting, pp.316-325,  1991. 
[ 161 M. Saharatnam, 0. Torhjomsen,  S. Hvasshovd, “Evaluating 
the Effectiveness of Fault Tolerance in Replicated Database Man- 
agement Systems,” Pr0c.29‘~ lnr ‘I Symposium. on  Fault-Tolerarlt 
Computing, pp.306-313,  1999. 
1171 M.A. Schuette, J.P. Shen, “Processor Control Flow Monitor- 
ing Using Signatured Instruction Streams,” IEEE Transactions on 
Computers, Vol. C-36, No. 3, pp.264-276,1987. 
[18] D.T.  Stott, B.  Floering, Z.  Kalharczyk, R.K. lyer, “Depend- 
ability  Assessment  in  Distributed  Systems  with  Lightweight  Fault 
Injectors in  NITAPE,” P roc. 4”’ h r ’ l  Computer Performance and 
Dependability Symposium, pp.9 1 - 100, 2000. 
[19] D. J. Taylor, D. E. Morgan, J. P. Black, “Redundancy in Data 
Structures:  Improving Software Fault Tolerance,” IEEE Transac- 
tions on Sqfrware Engineering, Vol. 6 ,  No. 6, pp.585-594,  1980. 
[20] D. J. Taylor,  1. P.  Black, “Guidelines  for  Storage  Structure 
Error Correction,”  Proc.  ISth Iiit’l  Symposium on  Farrlt-Tolerant 
Computing, pp.20-22, 1985. 
1211 S. Upadhyaya, B. Ramamurthy, “Concurrent Process  Moni- 
toring  with  No  Reference  Signatures,”  lEEE  Transactions  on 
Computers, Vol. 43 No. 4, pp.475-480, 1994. 
1221 S.S. Yau, F-Ch. Chen, “An Approach to Concurrent Control 
Flow Checking,” IEEE Trans. on Software Engineering, Vol. SE- 
6, NO. 2, pp. 126- 137, 1980. 
1231  K.  Wilken,  J.P.  Shen,  “Continuous  Signature  Monitoring: 
Low-Cost  Concurrent  Detection  of  Processor  Errors,”  IEEE 
Transactions on Cornputer Aided Design, pp.629-641,  1990. 
[24] Sybase Adaptive Server System Administration Guide, Chap- 
ter 25 http://manuals.syhase.com:8O/onlinebooks/group- 
as/asg I 200e/asesag 
1251 TimesTen 4.0 Datasheet, 
http://www. timesten.com/products/ttdatasheet.html 
1261 Oracle8 Server Utilities, Release 8.0, Chapter IO, 
http://pundit.bus.utexas.edu/oradocs/server803/A54652~0 
1 hoc. ht 
234 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:59:52 UTC from IEEE Xplore.  Restrictions apply.