佳实践时，
学科，管理层不一定会在项目早期为此进行计划和提供资源。因此，当应用发布工程最
每个具体的项目团队需要决定何时进行发布工程。因为发布工程是一个相对来说较新的
队必须互相了解。
对构建与部署的预期。开发团队不应该只是编写代码，然后“将结果扔过墙”，两个团
开发团队、SRE和发布工程师的紧密协作是很重要的。发布工程师需要明白代码开发时
佳流程可以降低成本，以免未来重新改动这些系统。
团队应该在开发流程开始时就留出一定资源进行发布工程工作。尽早采用最佳实践和最
发布工程经常是“事后诸葛亮”，随着平台和服务的规模与复杂度不断增加，这种理念
一开始就进行发布工程
间定义自己的发布政策。
不管最终的政策是否需要自动化，或者是否需要强制执行，任何组织都应该先花一些时
些政策的强制执行）。然而，这些政策必须先被正确定义，这样才能指导工具功能的创造。
海量规模。自定义过程使得我们可以在工具中加入对发布流程政策的支持（甚至是对这
Google发布工程师开发自己工具的原因是因为第三方供应商提供的工具无法适应我们的
样？应该使用什么策略管理配置文件？哪些发布过程的指标比较有用？
大部分公司，不论团队大小和使用何种工具，都面临着同样的发布工程问题：如何管理
心如何发布软件。发布过程可以像按一个按钮那么简单。
当采用合适的工具、合理的自动化方式，
不仅仅只对Google有用
一定需要改变。
一定要考虑到它在整个产品生命周期中的地位，尤其是在项目早期。
，以及合理的政策时，开发团队和SRE都无须担
小结
---
## Page 126
8
·Maintaining Consistency in a Massively Parallel Environment (https://www.
关于其他发布工程的信息，
Distributing Software in a Massively Parallel Environment (https://www.usenix.
·The 10 Commandments of Release Engineering (https://www.youtube.com/watch?
·How Embracing Continuous Release Reduced Change Complexity (http://usenix.
v=RNMjYV_UsQ8),2nd International Workshop on Release Engineering2014,
ConfigurationManagement Summit 2013,[McN13]
usenix.org/conference/ucms13/summit-program/presentation/mcnutt),USENIX
Release Engineering Summit West 2014,[Dic14]
org/conference/ures14west/summit-program/presentation/dickson),USENIX
[McN14c]
[McN14b]
第8章发布工程
，请参考以下演讲，每个都有对应的视频。
更多信息
---
## Page 127
创造流程、实践以及工具，来提高软件的可靠性。同时，SRE需要最小化这些工作对于
对于大多数生产环境软件系统来说，我们想要在稳定性和灵活性上保持平衡。SRE通过
需要先探索以及失败才能真正理解需要完成的任务。这种带保质期的可以在测试覆盖和
进行“探索性编码”——给我写的任何代码设置一个明确的保质期，我清楚地知道自己
系统的稳定性与灵活性
持平衡。”注2
发行管理上更宽松，因为它永远不会被发布到生产环境或被用户使用。
也就不会引入Bug。如果冻结当前用户群，我们将永远不必扩展系统。事实上，一个对
果我们不再修改代码，就不会引入新的Bug。如果底层硬件或类库永远不变，这些组件
软件系统本质上是动态的和不稳定的。注！只有真空中的软件系统才是永远稳定的。如
有的时候为了灵活性而牺牲稳定性是有意义的。我在面临一个不熟悉的问题域时，经常
主2这句话是由我的前任经理JohanAnderson创造的，当时我刚刚加入SRE。
可靠性只有靠对最大程度的简化不断追求而得到。
一般来说，
复杂系统都是这样的，
可参见文献[Per99]和[Coo00]。
C.A.R.Hoare,TuringAward lecture
编辑：TimHarvey
作者：MaxLuebbe
简单化
第9章
<
98
---
## Page 128
86
实符合商业目标，定期删除无用代码，并且在各级测试中增加代码膨胀检测。
担。SRE推崇保证所有的代码都有必须存在的目的的实践。例如，审查代码以确保它确
极端地说，当你指望一个Web服务7×24可用时，在某种程度上，每一行新代码都是负
文献[sec13]]。
些由于功能开关没有启用而没有被执行的代码，就像一个定时炸弹一样等待爆炸，正如
反转很容易，数百行的注释代码则会造成干扰和混乱（尤其是当源文件继续演进时）；那
码怎么办？”“我们为什么只是把这些代码注释掉，这样稍后再使用它的时候会更容易
模清理源代码树的时候并不少见。一些人可能会提出抗议，“如果我们以后需要这个代
我绝对不放弃我的代码
为了最小化意外复杂度，SRE团队应该：
杂度，不能从该问题的定义中移除，而意外复杂度则是不固定的，可以通过工程上的努
FredBrooks在他写的名为NoSilverBullet的文章（参见文献[Bro95]）中表示，关注必
源代码的理想特性。”生产环境中的意外是SRE最大的敌人。
标。Google工程师Robert Muth曾说过，“与侦探小说不同，缺少刺激、悬念和困惑是
想要自发性的和有趣的程序；我们希望这些程序按设计执行，可以预见性地完成商业目
与生活中的其他东西不同，对于软件而言，“乏味”实际上是非常正面的态度！我们不
乏味是一种美德
需要关注的事情
找到和改正错误的时间会更少。在开发过程中引入可靠性可以让开发人员关注那些真正
的灵活性：快速、可靠的产品发布使得生产系统中的变化显而易见。这样，一旦出现错误，
因为工程师也是人，他们经常对于自己编写的代码形成一种情感依附，这些冲突在大规
如果我们用Java编写该服务器，试图减少GC的影响就可能会引入意外复杂度。
开发人员的灵活性造成的影响。事实上，SRE的经验表明，可靠的流程会提高研发人员
力来解决。例如，编写一个Web服务器需要处理快速提供Web页面的必要复杂度。但是，
要复杂度和意外复杂度之间的区别非常关键。必要复杂度是一个给定的情况所固有的复
·在他们所负责的系统中引入意外复杂度时，及时提出抗议。
不断地努力消除正在接手的和已经负责运维的系统的复杂度。
第9章简单化
一软件和系统的功能与性能。
---
## Page 129
最小API
千行已经没用的代码。
需求时，应该保持保守的态度。我曾经做过的一些最令人满意的编码工作就是删除了数
理解，也更容易测试，而且通常缺陷也少。从这一观点出发，当我们感觉到增加新功能
况的消极方面：添加到项目中的每行代码都可能引入新的缺陷和错误。较小的项目容易
趋势。臃肿的软件直观上来看就是不可取的，从SRE的视角中可以更清晰地描述这种情
术语“软件膨胀”用来描述软件随着时间的推移不停地增加新功能而变得更慢和更大的
“负代码行”作为一个指标
度上，这与面向对象编程中的类设计类似：正如普遍认同的，编写一个其中包含无关功
随着系统变得越来越复杂，API与二进制文件之间的责任分离变得越来越重要。某种程
的每一次功能增加或改进都需要全面的生产更新，整个系统中的更新节奏可以不同。
统所依赖的版本，以更安全和深思熟虑的方法升级到新的版本。这样不必要求整个系统
同时承担引入新问题的风险。通过将API版本化，可以允许开发人员继续使用它们的系
变更就没那么明显了。某个API的一个变更就可以迫使开发人员重建他们的整个系统，
虽然API提供的模块化可能看上去很容易理解，但是如何将模块化的概念延伸到API的
组件中发现一个错误，我们可以修复这个错误并且独立于系统的其他部分更新该程序。
种同时提高开发人员的灵活性和系统的稳定性的简化模式。如果在一个更大系统的某个
非常必要。具体而言，在二进制文件之间或者二进制文件与配置之间推行松耦合，是一
统的设计。对系统中某个部分进行隔离式的变更的能力对创建一个可以运维的系统来说
在API与单个二进制文件以外，适用于面向对象编程的许多经验法则也适用于分布式系
模块化
小的，很简单的API通常也是一个对问题深刻理解的标志。
够更专注核心问题，使得我们已有的解决方案更好。在软件工程上，少就是多！一个很
完善这些方法。同时，一个反复出现的主题是：有意识地不解决某些问题可以让我们能
者提供的方法和参数越少，这些API就越容易理解，我们就能用更多的精力去尽可能地
书写一个明确的、最小的API是管理软件系统管理简单性必要的部分。我们向API消费
计和构建。API是这个规则应该遵循的一个清晰的例子。
么可以去掉的时候，才能达到完美。”（参见文献[Sai39]）这个原则同样适用于软件的设
法国诗人Antoine de SaintExupery 曾写道，“不是在不能添加更多的时候，而是没有什
模块化
187
<100
---
## Page 130
101
是在保持环境整洁，以免分心。这样我们可以持续关注创新，并且可以进行真正的工程
务是什么，以及如何更容易地做到。我们对新功能说“不”的时候，不是在限制创新，
个给定的任务的每一步时，我们并不是在偷懒。相反，我们是在明确实际上要完成的任
小结
通过每次进展一点，同时考虑每次改变对系统的改善和退化来寻找最佳方案。
更在系统中的影响可以独立理解。这种发布方式跟机器学习中的梯度下降法类似。我们
如果发布是按更小的批次进行的，我们就可以更有信心地进行更快的发布，因为每个变
我们需要花费大量时间和努力来定位哪些改变影响了系统性能，以及它们是怎样影响的。
时应对一系列变化更加容易。如果同时发布100个不相关的系统更改，而系统性能变差了，
简单的发布流程总的来说要比复杂的发布流程更好。测量和理解单一变化的影响要比同
发布的简单化
是创建一个同时向后和向前兼容的传输格式。
模块化的概念同样适用于数据格式。Google的Protobuf注?的一个主要优势和设计目标就
都具有明确的、良好定义的范围。
是个糟糕的实践。一个设计良好的分布式系统是由一系列合作者组成的，每一个合作者
能的“大杂烩”类是一个糟糕的实践。构建和发布“util”或“misc”二进制文件同样也
注3ProtocolBuffer,
工作。
这一章反复重申的主题是：软件的简单性是可靠性的前提条件。当我们考虑如何简化一
展方法。更多细节请参考htps://developers.google.com/protocol-buffrs/docs/overview#a-bit-of-history。
第9章简单化
也被称为“protobuf”，是一个语言中性、平台中立、
用于序列化结构化数据的可扩
---
## Page 131
我们用图Ⅲ-1中的层级模型来详细论述一下服务可靠度指标的基本需求和高级需求。
定义下来。
他背景的人解释Google SRE是如何看待服务可靠性问题时，这个理念才第一次被详细
美国政府组建的小组，负责帮助解决healthcare.gov线上遇到的问题。在尝试向来自其
2013年年末至2014年年初，GoogleSRE，MikeyDickerson，
直没有被详细定义过。
SRE能够主动控制服务状态，而不是被动救火。这个理念从多年实践中积累得来，却一
可以将一个服务的健康程度指标分为低级需求：能够正常对外提供服务，和高级需求：
AbrahamMaslow曾经将人的生活需求分类论述（参见文献[Mas43]）。鉴于此，我们
的指导理念和最佳实践。
事件，确保事故根源被跟踪修复等。这一部分将主要讨论SRE维护大型分布式计算系统
为达成这个目标，SRE需要完成以下一系列工作：开发监控系统，规划容量，处理紧急
户提供服务（可以是内部用户或外部用户）。SRE的终极责任是确保该服务可以正常运转。
简单来说，SRE的职责是运维一个服务。该服务由一些相关的系统组件组成，为最终用
gov/digital/united-states-digital-service）。该部门的一大职责是将SRE理念引入到其他美国政府IT部门。
，注1临时被抽调加入一个由
具体实践
第川部分