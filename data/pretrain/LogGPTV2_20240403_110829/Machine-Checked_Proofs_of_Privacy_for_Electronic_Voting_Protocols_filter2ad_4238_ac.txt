− Pr
is negligible in λ, for any m ∈ N.
Expbpriv,0A,V,Sim
(λ, m) = 1
(cid:5)
(cid:4)
Expbpriv,1A,V,Sim
(λ, m) = 1
(cid:5)(cid:3)(cid:3)(cid:3)
not account however for breaches that may occur during the
tally procedure. It turns out that privacy of the tally phase
can be enforced by demanding two additional security proper-
ties: strong correctness and strong consistency, as introduced
in [13]. Together with ballot privacy, these two additional
properties imply simulation-based notions of vote privacy [13].
STRONG CONSISTENCY. A voting scheme V is called strongly
consistent [13], if the scheme ensures that its Tally algorithm
behaves "as expected", i.e. it returns the result of applying the
result function ρ to the votes underlying the (valid) ballots that
are stored on a bulletin board. The following deﬁnition adapts
the one of Bernhard et al. [13] to the slightly more general
syntax that we adopt in this paper.
Deﬁnition 5 (Strong Consistency [13]). A voting scheme V
is strongly consistent if there exists:
• An extraction algorithm Extract((id, (cid:3), c), sk) that takes
as input a secret key sk and a ballot (id, (cid:3), c), and outputs the
id with either a vote in Vo or the special error symbol ⊥; and
• A ballot validation algorithm ValidInd((id, (cid:3), c), pk) that
returns true iff the ballot (id, (cid:3), c) is “well-formed” with
respect
to some notion of well-formedness determined in
advance by the election.
These algorithms must satisfy the following conditions:
1) For any (pk, sk, uL) obtained from Setup(λ, m), and any
(id, (cid:3), v) if b ← Vote(id, v, (cid:3), pk) then Extract(b, sk) returns
(id, v) with overwhelming probability.
any
true,
2) For
returns
(BB, b),
produced
adversarially
Valid(BB, uL, b, pk)
returns true as well.
if
then ValidInd(b, pk)
3) For any adversary B that returns a ballot box with ballots
that satisfy ValidInd, the experiment ExpconsisB,V (λ, m) speciﬁed
in Figure 3 returns true with a probability negligible in the
security parameter.
Intuitively, ballot privacy captures potential privacy breaches
that may occur during the voting process. The notion does
STRONG CORRECTNESS. This property requires that honestly
created ballots will not be rejected by the validation algorithm;
997
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:24:18 UTC from IEEE Xplore.  Restrictions apply. 
Setup(1λ, m)
1 :
2 :
3 :
4 :
5 :
(pk, sk) ← KGen(1λ)
for i in 1..m do
id ←$ ID
uL[id] ← Flabel(id)
return (pk, sk, uL)
Vote(id, (cid:3), v, pk)
1 :
2 :
c ← Enc(pk, (cid:3), v)
return (id, (cid:3), c)
Valid(BB, uL, b, pk)
1 :
2 :
3 :
4 :
5 :
(id, (cid:3), c) ← b
e1 ← ∀id(cid:3). (id(cid:3), (cid:3), c) /∈ BB
e2 ← (cid:2)
e3 ← ValidInd(b, pk)
return (e1 ∧ e2 ∧ e3)
(cid:3) = uL[id]
(cid:3)
Fig. 4. Algorithms deﬁning the Labelled-MiniVoting scheme
for i in 1..|BB| do
(id, (cid:3), c) = BB[i]
dbb[i] ← (id, Dec(sk, (cid:3), c))
Tally(BB, sk)
1 : dbb = [ ]
2 :
3 :
4 :
5 :
6 : pbb ← Publish(BB)
7 : Π ← P((pk, pbb, r), (sk, BB))
8 :
r ← ρ(dbb)
return (r, Π)
(pk, sk, uL) ← Setup(1λ, m)
ExpconsisB,V (λ, m)
1 :
2 : BB ← B(1λ, pk, uL)
3 :
4 :
5 :
6 :
7 :
r(cid:3) ← ρ(dbb)
return (r (cid:5)= r(cid:3))
(r, Π) ← Tally(BB, sk)
for i in 1..|BB| do
dbb[i] ← Extract(BB[i], sk)
Fig. 3. The Strong Consistency experiment
we demand that this property holds even with respect to an
arbitrary ballot box chosen adversarially.
Deﬁnition 6 (Strong Correctness [13]). A voting scheme V
is strongly correct if the advantage of any efﬁcient adversary
B, deﬁned by AcorrB,V (λ, m) = Pr[ExpcorrB,V (λ, m) = 1] (where
ExpcorrB,V (λ, m) is deﬁned in Figure 5) is negligible as a function
of λ.
ExpcorrB,V (λ, m)
1 :
2 :
3 :
4 :
5 :
6 :
7 :
8 :
(pk, sk, uL) ← Setup(1λ, m)
(id, v, BB) ← B(1λ, uL, pk)
(cid:3) = uL.[id]
ev ← true
if
(cid:2)
(cid:3) (cid:5)= ⊥) then
b ← Vote(id, v, (cid:3), pk)
ev ← Valid(BB, uL, b, pk)
return ¬ev
Fig. 5. The Strong Correctness experiment
III. LABELLED-MINIVOTING
The MiniVoting scheme was introduced by Bernhard et
al. [14] as an abstraction that captures several constructions
in the literature. The key feature of this scheme is that it can
be used to reason about the privacy properties of schemes in
this class only from minimal assumptions on the cryptographic
primitives.
In this paper we reﬁne the scheme in two different ways.
First, we enlarge the class of schemes that the scheme covers
by introducing labels – public information associated to users,
yielding the Labelled-MiniVoting scheme. Labels can be used
to represent arbitrary information such as user’s pseudonyms
or their public veriﬁcation keys. Second, since we attempt to
carry out most of the proofs at the highest possible level of
abstraction, we introduce some additional conditions on the
algorithms in the deﬁnition of single-pass voting schemes. In
particular, we demand that the algorithms that comprise the
voting scheme are deﬁned in terms of the following (abstract)
algorithms, functions, and relations:
ValidInd(b, pk): Evaluates ballot b with respect to public key
pk, and determines if the ballot is valid in isolation.
Flabel(id): Returns the label associated to an identity id.
ρ((idi, vi)i): Computes the election’s result from a list of
R(cid:6)
(cid:7)
identities and votes.
: The relation enforced by the proof
(pk, pbb, r), (sk, BB)
system. Instantiating the relation in different ways allows
us to deal both with veriﬁable or non-veriﬁable voting
schemes.
Usually, ρ is deﬁned as ρ(L) = Count ◦ Policy(L) for two
algorithms Count and Policy. Policy(L) ﬁlters the list L and
selects which vote is counted for each voter in case multiple
votes appear on the bulletin board. Count(L) computes the
result from the ﬁltered list of votes and may be probabilistic.
The following deﬁnition presents our generalization of the
MiniVoting scheme, as a particular case of a single-pass voting
scheme.
Deﬁnition 7. Let E be a labelled public-key encryption
scheme, and ΣR = (P, V) be a proof system. Given algo-
rithms ValidInd, Publish, Flabel and ρ we deﬁne the Labelled-
MiniVoting scheme
MV(E, ΣR, ValidInd, Publish, Flabel, ρ),
as the single-pass voting scheme deﬁned by the algorithms in
Figure 4, which we informally describe below.
Setup(1λ, m): Generates a pair of keys (pk, sk) using the key
generation algorithm of the encryption scheme E, and
creates a map uL where exactly m ids are assigned to
labels.
998
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:24:18 UTC from IEEE Xplore.  Restrictions apply. 
Vote(id, (cid:3), v, pk): Constructs a ballot that contains the identity
id of the voter, the label (cid:3) assigned to that voter, and a
ciphertext obtained by the encryption algorithm E using
the public key pk over the vote v and label (cid:3).
Valid(BB, uL, (id, (cid:3), c), pk): Performs three checks to ensure
that the ballot is well-formed with respect to the board.
First, it checks that the ciphertext and label ((cid:3), c) are
unique with respect to the existing ballots in the ballot
box BB. Then, it veriﬁes the use of the correct label
(cid:3) for user id using the map uL. Finally, it calls the
ValidInd algorithm. Remark that this last step depends
on an abstract algorithm that might be instantiated to not
perform any additional checks.
Publish(BB): Publishes (arbitrary) information about the con-
tent of the ballot box.
Tally(BB, sk): Computes the result of the voting process in
two steps: ﬁrst it decrypts the entire board, and then it
applies a result function ρ (that might or might not ﬁlter
some of the votes based on a predeﬁned voting policy, for
example: keep the last valid vote for any id). Additionally,
it provides a proof that the tally was done correctly by
calling the prover P.
ﬁer V, to show that the tally was done correctly.
Verify((pk, pbb, r), Π): Calls the verify algorithm of the veri-
VOTING FRIENDLY RELATION. Since we keep the relation R
that is used to certify the tally procedure abstract, we need
to ensure that the relation R is compatible with the result of
the election (computed with ρ). That is, we require that if
the result r corresponds to the votes obtained by decrypting
the ballot box BB using the key sk, if pbb corresponds to
the public board of BB and pk is the public key associated
to sk then r can be proved to be the correct result, that
is, R((pk, pbb, r), (sk, BB)) holds.3 Note that this notion is
unrelated to voting friendly encryption as deﬁned in [14],
which designates a class of IND-1-CCA encryption schemes
that have embedded a homomorphic part.
The formal deﬁnition of a voting-friendly relation, uses
the following convenient notation. Given a bulletin board
BB = [(id1, (cid:3)1, c1), . . . , (idn, (cid:3)n, cn)] (seen as an ordered list
for the algorithm that
of bulletin board entries), we write Dec
decrypts each line and returns the ordered list of plaintexts:
∗
Dec
∗(sk, BB) =
(cid:6)
(id1, Dec(sk, (cid:3)1, c1)), . . . , (idn, Dec(sk, (cid:3)n, cn))
(cid:7)
Deﬁnition 8. Let E be a labelled public-key encryption
scheme, and ΣR be a proof system for some relation R. Given
the abstract algorithms ρ and Publish, we say that R is a
voting-friendly relation with respect to ρ and Publish, if for
any efﬁcient adversary B, the following experiment returns 1
with negligible probability.
3We do not put any restrictions on the relation R; in particular R may
depend on some random oracle.
999
(λ)
(pk, sk) ← KGen(1λ)
ExpvfrB,E,ΣR,ρ,Publish
1 :
2 : BB ← B(1λ, pk)
3 : dbb ← Dec∗(sk, BB)
4 :
5 : pbb ← Publish(BB)
6 :
r ← ρ(dbb)
return ¬ R(cid:2)
(pk, pbb, r), (sk, BB)
(cid:3)
We provide machine-checked proofs [1] that the Labelled-
MiniVoting scheme is ballot private, strongly consistent and
strongly correct.
Strong correctness is implied by the IND-1-CCA security
assumption of the encryption scheme: any p.p.t. adversary can
only obtain a collision with already-produced ciphertexts when
making an encryption query with negligible probability.
Theorem 1 (strong correctness). 4 Let V = MV(E, ΣR,
ValidInd, Publish, Flabel, ρ) with ValidInd((id, (cid:3), c), pk) true
for c ← Enc(pk, (cid:3), v), and any pk, (cid:3), v, id. For any p.p.t.
adversary A, there exists an adversary B such that:
AcorrA,V (λ, m) ≤ Advpoly-ind1cca
B,E,1
(λ),
for any m voters.
The next theorem establishes that the Labelled-MiniVoting
scheme satisﬁes ballot privacy, under standard assumptions on
its components. One quirk that is worth remarking is that we
actually prove a slightly stronger statement which requires the
weaker hypothesis that the underlying encryption scheme is
strongly correct. For simplicity, we use the above theorem
and rely on the non-malleability of the underlying encryption
scheme which, in turn, implies strong correctness.
Theorem 2 (ballot privacy). 5 Let V = MV(E, ΣR, ValidInd,
Publish, Flabel, ρ) with ValidInd((id, (cid:3), c), pk) true for c ←
Enc(pk, (cid:3), v), and any pk, (cid:3), v, id. For any m voters, and any
adversary A that makes at most n voting queries, there exists
a simulator S and three adversaries B, C and D such that:
(λ) = 1] +
(λ, m) ≤ 2 × Pr[ExpvfrD,E,ΣR,ρ,Publish
C,E,1
AdvzkB,P,S,R(λ) + 3n × Advpoly-ind1cca
AdvbprivA,V,S
(λ).