Routing tables
Google GCE [50] Microsoft Azure [51]
Routes
user-
external
Routers,
gateways
Security groups
gateway/VPC
Internet
peering
Security groups
Internet gateway
Firewall rules
System and
deﬁned routes
System route to Inter-
net
Network
groups
security
VMware vCD [52]
Distributed logical
routers
Edge gateway
Edge ﬁrewall
vice
ser-
TenantGuard support
Yes/ TenantGuard forwarding and
ﬁltering function
Yes/ TenantGuard forwarding and
ﬁltering function
Yes/ TenantGuard forwarding and
ﬁltering function
TABLE V.
ROUTING AND FILTERING IN DIFFERENT CLOUD PLATFORMS AND HOW THEY ARE SUPPORTED IN TENANTGUARD
in Section IV-C5 shows that the overhead of the incremental
veriﬁcation is negligible in comparison to a full veriﬁcation.
supported by TenantGuard via the forwarding and ﬁltering
function f dG.
3) Experiment with Real Cloud: We further test Tenant-
Guard using data collected from a real community cloud hosted
at one of the largest telecommunications vendors. The main
objective is to evaluate the real world applicability of Tenant-
Guard (this dataset is not suitable for performance evaluation
due to the relatively small scale of the cloud). All tests are
performed in a single machine using the collected dataset with-
out any modiﬁcation. The tested cloud consists of only nine
routers and 10 subnets. Initially, the TenantGuard veriﬁcation
process fails due to a minor incompatibility issue between the
OpenStack version used in our lab (Kilo) and an earlier version
used inside the real cloud (Juno). From OpenStack Juno to
Kilo, two new ﬁelds are added to the neutron.networks table,
namely, ‘mtu’ int(11) and ‘vlan transparent’ tinyint(1). This
difference between the two versions has prevented Tenant-
Guard to execute SQL queries against table neutron.networks
due to the missing ‘mtu’ ﬁeld. After addressing this issue by
altering the neutron.networks table, TenantGuard successfully
completes the requested veriﬁcation in several milliseconds.
VII. DISCUSSION
In this section, we provide the required effort to adopt
TenantGuard in other cloud platforms e.g., Amazon, Google,
VMware. Additionally, we discuss existing methods to build a
chain of trust to preserve the integrity of the collected data.
Adapting TenantGuard in other cloud platforms. we review
packet routing and ﬁltering in different cloud platforms and
show the applicability of TenantGuard. Table V shows how
routing and ﬁltering are implemented in OpenStack, Amazon
AWS EC2-VPC (Virtual Private Cloud) [49], Google Com-
pute Engine (GCE) [50], Microsoft Azure [51], and VMware
vCloud Director (vCD) [52]. Similar to OpenStack, all other
platforms allow tenants to create private networks and to create
routing rules to govern communication between them. Those
rules are captured by the forwarding and ﬁltering function f dG
in our model. VMs attached to those private networks can have
private IPs and public IPs respectively for intra-tenant and
inter-tenant communication. In the case of inter-tenant com-
munication, gateways are endowed with NAT services in order
to manage mapping between private and public IP addresses.
NAT rules are captured in our model by the function f dG.
Internet gateways in EC2-VPC, system route to the Internet in
Azure, and edge gateways in vCD can be represented in our
model by the component v router gw. Exceptionally, in EC2
VPC, the VPC peering routing can be employed to enable
private IP connections across tenants’ virtual networks with
tenants’ agreement. To support this feature, the deﬁnition of
f dG will need to be extended. Security groups in OpenStack
and EC2, ﬁrewall rules in ECG, network security groups in
Azure, and edge ﬁrewall services in vCD are set up to ﬁlter
VMs’ outbound/inbound packets. Those ﬁltering rules are also
Preserving integrity of the system. There exist many tech-
niques on trusted auditing to establish a chain of trust,
e.g., [53], [54], [55]. Bellare et al. [53] propose a MAC-
based approach. They provide the forward integrity by using
a chain of keys and erasing previous keys so that any old logs
cannot be altered. Crosby et al. [54] also present a tree-based
history data structure, which prevents log tampering where the
author of the log is untrusted. Apart from tamper prevention,
there are some other works to further detect tampering logs.
Chong et al. [57] implement the Schneier and Kelsey’s secure
audit logging protocol with tamper resistant hardware, namely
iButton. Furthermore, OpenStack leverages Intel Trusted Exe-
cution Technology (TXT) to establish a chain of trust from the
embedded TPM chips in the host hardware to critical software
components using a standalone attestation server [56].
VIII. CONCLUSION
In this paper, we have proposed a novel and scalable run-
time approach to the veriﬁcation of cloud-wide, VM-level
network isolation in large clouds. We presented a new hierar-
chical model representing virtual networks, and we designed
efﬁcient algorithms and data structures to support incremental
and parallel veriﬁcation. As a proof of concept, we integrated
our approach into OpenStack and also extended it to a par-
allel implementation using Apache Ignite. The experiments
conducted locally and on Amazon EC2 clearly demonstrated
the efﬁciency and scalability of our solution. For a large data
center comprising 25,246 VMs, veriﬁcation using our approach
ﬁnished in 13 seconds. The main limitations of this work
are as follows. First, since TenantGuard only focuses on the
virtual network layer, a future direction is to integrate it with
existing tools working at other layers (e.g., veriﬁcation tools
for physical networks, or co-residency and covert channel
detection techniques). Second, since TenantGuard relies on
cloud infrastructures for input data, how to ensure the integrity
of such data (e.g.,
through trusted computing techniques)
is another future direction. Third, TenantGuard assumes the
veriﬁcation results can be safely disclosed to tenants, which
may not always be the case, and addressing such privacy issues
comprises an interesting future challenge.
ACKNOWLEDGMENT
The authors thank the anonymous reviewers and our shep-
herd, Vyas Sekar, for their valuable comments. We appreciate
Yue Xin’s support in the implementation. This work is partially
supported by the Natural Sciences and Engineering Research
Council of Canada and Ericsson Canada under CRD Grant
N01566.
REFERENCES
[1] Cloud Security Alliance. Security guidance for critical areas of focus
in cloud computing v 3.0, 2011.
14
[2] Cloud Security Alliance. Cloud computing top threats in 2016, Feb
2016.
[3] V. Del Piccolo, A. Amamou, K. Haddadou, and G. Pujolle. A survey
IEEE
of network isolation solutions for multi-tenant data centers.
Communications Surveys Tutorials, PP(99):1–1, 2016.
[4] SANS Institute, InfoSec Reading Room. An introduction to securing a
cloud environment, 2012.
[5] Amazon Web Services. Overview of security processes, June 2016.
[6]
ISO Std IEC.
Techniques, 2005.
ISO Std IEC. ISO 27017. Information technology- Security techniques
(DRAFT), 2012.
Information Technology-Security
ISO 27002:2005.
[7]
[8] Cloud Security Alliance. Cloud control matrix CCM v3.0.1, 2014.
Available at: https://cloudsecurityalliance.org/research/ccm/.
[9] OpenStack.
OpenStack user
survey, 2016.
Available
at:
https://www.openstack.org.
[10] RightScale. RightScale 2016 state of the cloud report, 2016. Available
at: http://www.rightscale.com.
[11] G. D. Plotkin, N. Bjørner, N. P. Lopes, A. Rybalchenko, and G. Vargh-
ese. Scaling network veriﬁcation using symmetry and surgery. In POPL,
2016.
[12] OpenStack. OpenStack open source cloud computing software. Avail-
able at: http://www.openstack.org.
network
Nova
[13] OpenStack.
security
group
to
applied
not
https://security.openstack.org/ossa/OSSA-2015-021.html,
on: May, 2016.
instances,
running
2015.
changes
Available
are
at:
last visited
[14] OpenStack. Routers can be cross plugged by other tenants, 2014.
Available at: https://security.openstack.org/ossa/OSSA-2014-008.html,
last visited on: May, 2016.
J. Corbet.
Trees
http://lwn.net/Articles/175432/.
I: Radix
Available
tree.
[15]
at:
[16] D. E. Willard. Log-logarithmic worst-case range queries are possible
in space o(n), 1983. Information Processing Letters.
Policy as a Service (Congress).
[17] OpenStack.
http://wiki.openstack.org/wiki/Congress.
Available at:
[18] P. Kazemian, G. Varghese, and N. McKeown. Header space analysis:
Static checking for networks. In NSDI, 2012.
[19] P. Kazemian, M. Chan, H. Zeng, G. Varghese, N. McKeown, and
S. Whyte. Real time network policy checking using header space
analysis. In NSDI, 2013.
[20] H. Mai, Ahmed Khurshid, R. Agarwal, M. Caesar, P. Godfrey, and S. T.
King. Debugging the data plane with anteater. In SIGCOMM, 2011.
[21] A. Khurshid, X. Zou, W. Zhou, M. Caesar, and P. B. Godfrey. VeriFlow:
verifying network-wide invariants in real time. In NSDI, 2013.
[22] H. Yang and S. S. Lam. Real-time veriﬁcation of network properties
using atomic predicates. In ICNP, Oct 2013.
[23] H. Zeng, S. Zhang, F. Ye, V. Jeyakumar, M. Ju, J. Liu, N. McKeown,
and A. Vahdat. Libra: Divide and conquer to verify forwarding tables
in huge networks. In NSDI, 2014.
[24] Aaron Gember-Jacobson, Raajay Viswanathan, Aditya Akella, and
Ratul Mahajan. Fast control plane analysis using an abstract repre-
sentation. In SIGCOMM, 2016.
[25] Ari Fogel, Stanley Fung, Luis Pedrosa, Meg Walraed-Sullivan, Ramesh
Govindan, Ratul Mahajan, and Todd Millstein. A general approach to
network conﬁguration analysis. In NSDI, 2015.
[26] Seyed K. Fayaz, Tushar Sharma, Ari Fogel, Ratul Mahajan, Todd Mill-
stein, Vyas Sekar, and George Varghese. Efﬁcient network reachability
analysis using a succinct control plane representation. In OSDI, 2016.
[27] N. P. Lopes, N. Bjørner, P. Godefroid, K. Jayaraman, and G. Varghese.
Checking beliefs in dynamic networks. In NSDI’15, 2015.
[28] S¨oren Bleikertz, Carsten Vogel, and Thomas Groß. Cloud Radar:
Near real-time detection of security failures in dynamic virtualized
infrastructures. In ACSAC, 2014.
[30] G. G. Xie, J. Zhan, D. A. Maltz, H. Zhang, A. Greenberg, G. Hjalm-
tysson, and J. Rexford. On static reachability analysis of IP networks.
In INFOCOM, 2005.
[31] Taous Madi, Suryadipta Majumdar, Yushun Wang, Yosr Jarraya, Makan
Pourzandi, and Lingyu Wang. Auditing security compliance of the
virtualized infrastructure in the cloud: Application to OpenStack.
In
CODASPY, 2016.
[32] Suryadipta Majumdar, Yosr Jarraya, Taous Madi, Amir Alimohammad-
ifar, Makan Pourzandi, Lingyu Wang, and Mourad Debbabi. Proactive
veriﬁcation of security compliance for clouds through pre-computation:
Application to OpenStack. In ESORICS, 2016.
[33] S. Bleikertz, T. Groß, M. Schunter, and K. Eriksson. Automated
In ESORICS,
information ﬂow analysis of virtualized infrastructures.
2011.
[34] Karthick Jayaraman, Nikolaj Bjørner, Geoff Outhred, and Charlie
Kaufman. Automated analysis and debugging of network connectiv-
ity policies. Technical report, Technical Report MSR-TR-2014-102,
Microsoft Research, 2014.
[35] OpenStack.
Congress documentation release.
Available
at:
https://congress.readthedocs.io/en/latest/.
[36] Robin J. W. Deﬁnitions and examples. In Introduction to Graph Theory,
Second Edition, 1979.
[37] P. Kazemian, G. Varghese, and N. McKeown. Header space analysis:
Static checking for networks. In NSDI, pages 113–126, 2012.
[38] Fred Halsall. Computer Networking and the Internet (5th Edition).
Addison-Wesley Longman Publishing Co., Inc., 2005.
[39] W. R. Cheswick, S. M. Bellovin, and A. Rubin. Firewalls and Internet
Security: Repelling the Wily Hacker.
[40] Grzegorz Malewicz, Matthew H Austern, Aart JC Bik, James C Dehnert,
Ilan Horn, Naty Leiser, and Grzegorz Czajkowski. Pregel: a system for
large-scale graph processing. In SIGMOD, 2010.
[41] Douglas Gregor and Andrew Lumsdaine. The parallel BGL: A generic
library for distributed graph computations. POOSC, 2, 2005.
[42] Albert Chan and Frank Dehne. CGMgraph/CGMlib: Implementing and
testing CGM graph algorithms on PC clusters.
In European Parallel
Virtual Machine/Message Passing Interface Users’ Group Meeting.
Springer, 2003.
[43] H. Ballani, K. Jang, T. Karagiannis, C. Kim, D. Gunawardena, and
G. O’Shea. Chatty tenants and the cloud network sharing problem. In
NSDI, 2013.
[44] Cloud auditing data federation (CADF). PyCADF: A Python-based
CADF library, 2015. Available at: https://pypi.python.org/pypi/pycadf.
Available at:
Amazon EC2- Virtual Server Hosting.
[45] Amazon.
https://aws.amazon.com/ec2.
Ignite. Available at: https://ignite.apache.org.
[46]
[47] A. Fei, G. Pei, R. Liu, and L. Zhang. Measurements on delay and
hop-count of the internet. In GLOBECOM, 1998.
[48] F. Begtasevic and P. V. Mieghem. Measurements of the hopcount in
internet. In PAM, 2001.
Amazon
[49] Amazon.
virtual
private
cloud.
Available
at:
https://aws.amazon.com/vpc.
[50] Google. Google compute engine subnetworks beta. Available at:
https://cloud.google.com.
[51] Microsoft.
Microsoft Azure virtual network.
Available
at:
https://azure.microsoft.com.
[52] VMware.
VMware
https://www.vmware.com.
[53] M. Bellare and B. Yee.
vCloud Director.
Available
at:
Forward integrity for secure audit
logs.
Technical report, Citeseer, 1997.
[54] Scott A Crosby and Dan S Wallach. Efﬁcient data structures for tamper-
evident logging. In USENIX Security Symposium, 2009.
[55] Di Ma and Gene Tsudik. A new approach to secure logging. ACM
Transactions on Storage (TOS), 5(1):2, 2009.
[56] OpenStack.
Security
hardening,
2016.
Available
at:
http://docs.openstack.org/admin-guide/compute-security.html.
[29] T. Probst, E. Alata, M. Kaˆaniche, and V. Nicomette. An approach for
the automated analysis of network access controls in cloud computing
infrastructures. In Network and System Security. 2014.
[57] Cheun Ngen Chong, Zhonghong Peng, and Pieter H Hartel. Secure
audit logging with tamper-resistant hardware. In Security and Privacy
in the Age of Uncertainty. Springer, 2003.
15