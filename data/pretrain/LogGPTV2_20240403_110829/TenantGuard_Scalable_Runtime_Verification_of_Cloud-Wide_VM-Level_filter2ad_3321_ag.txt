### Routing and Filtering in Different Cloud Platforms

#### Table V: Routing and Filtering Mechanisms Across Various Cloud Platforms

| **Feature** | **Google GCE [50]** | **Microsoft Azure [51]** | **OpenStack** | **Amazon AWS EC2-VPC [49]** | **VMware vCD [52]** |
|-------------|---------------------|--------------------------|---------------|------------------------------|----------------------|
| **Routing Tables** | Supported | Supported | Supported | Supported | Supported |
| **Routes** | User-defined, External | User-defined, External | User-defined, External | User-defined, External | User-defined, External |
| **Routers & Gateways** | Routers, Internet Gateway | Routers, Virtual Network Gateway | Routers, Internet Gateway | Routers, Internet Gateway | Edge Gateway |
| **Security Groups** | Security Groups | Network Security Groups | Security Groups | Security Groups | Edge Firewall |
| **Internet Peering** | Supported | Supported | Not Directly Supported | VPC Peering | Not Directly Supported |
| **TenantGuard Support** | Yes (Forwarding and Filtering) | Yes (Forwarding and Filtering) | Yes (Forwarding and Filtering) | Yes (Forwarding and Filtering) | Yes (Forwarding and Filtering) |

### Experimental Evaluation

#### Incremental Verification Overhead
The results in Section IV-C5 demonstrate that the overhead of incremental verification is negligible compared to a full verification. This is supported by TenantGuard's forwarding and filtering function \( f_{dG} \).

#### Real-World Testing
We conducted further tests using data from a real community cloud hosted by one of the largest telecommunications vendors. The primary objective was to evaluate the real-world applicability of TenantGuard, rather than its performance, due to the relatively small scale of the cloud. All tests were performed on a single machine using the collected dataset without any modifications. The tested cloud consisted of nine routers and ten subnets.

Initially, the TenantGuard verification process failed due to a minor incompatibility between the OpenStack version used in our lab (Kilo) and an earlier version used in the real cloud (Juno). Specifically, two new fields ('mtu' and 'vlan transparent') were added to the `neutron.networks` table in Kilo, which were missing in Juno. After addressing this issue by altering the `neutron.networks` table, TenantGuard successfully completed the requested verification in several milliseconds.

### Discussion

#### Adapting TenantGuard to Other Cloud Platforms
To adopt TenantGuard in other cloud platforms such as Amazon, Google, and VMware, we reviewed packet routing and filtering mechanisms. Table V illustrates how these features are implemented in various cloud platforms, including OpenStack, Amazon AWS EC2-VPC, Google Compute Engine, Microsoft Azure, and VMware vCloud Director. Similar to OpenStack, all these platforms allow tenants to create private networks and define routing rules. These rules are captured by the forwarding and filtering function \( f_{dG} \) in our model. VMs can have both private and public IPs for intra-tenant and inter-tenant communication, respectively. For inter-tenant communication, gateways provide NAT services to manage IP address mapping, which is also captured by \( f_{dG} \).

In EC2 VPC, VPC peering can be used to enable private IP connections across tenant virtual networks with mutual agreement, requiring an extension of the definition of \( f_{dG} \). Security groups in OpenStack and EC2, firewall rules in EC2, network security groups in Azure, and edge firewall services in vCD are set up to filter VMs' outbound and inbound packets, which are also represented by \( f_{dG} \).

#### Preserving Data Integrity
Several techniques exist for trusted auditing to establish a chain of trust. Bellare et al. [53] propose a MAC-based approach with forward integrity using a chain of keys. Crosby et al. [54] present a tree-based history data structure to prevent log tampering. Chong et al. [57] implement Schneier and Kelsey’s secure audit logging protocol with tamper-resistant hardware. Additionally, OpenStack uses Intel Trusted Execution Technology (TXT) to establish a chain of trust from TPM chips to critical software components via an attestation server [56].

### Conclusion

This paper introduces a novel and scalable runtime approach for verifying cloud-wide, VM-level network isolation in large clouds. We developed a hierarchical model representing virtual networks and designed efficient algorithms and data structures for incremental and parallel verification. As a proof of concept, we integrated our approach into OpenStack and extended it to a parallel implementation using Apache Ignite. Experiments on local and Amazon EC2 environments demonstrated the efficiency and scalability of our solution. For a large data center with 25,246 VMs, verification using our approach took only 13 seconds.

The main limitations include:
1. **Layer Focus**: TenantGuard focuses on the virtual network layer. Future work will integrate it with tools for other layers.
2. **Data Integrity**: Ensuring the integrity of input data from cloud infrastructures.
3. **Privacy**: Addressing privacy issues related to the disclosure of verification results to tenants.

### Acknowledgments
We thank the anonymous reviewers and our shepherd, Vyas Sekar, for their valuable comments. We appreciate Yue Xin’s support in the implementation. This work is partially supported by the Natural Sciences and Engineering Research Council of Canada and Ericsson Canada under CRD Grant N01566.

### References
[References listed here as per the original document]

---

This revised text aims to be more clear, coherent, and professional, with improved organization and readability.