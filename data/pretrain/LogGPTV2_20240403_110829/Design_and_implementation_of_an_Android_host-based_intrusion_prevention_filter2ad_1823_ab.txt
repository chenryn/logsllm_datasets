### 3.2 Limitations of Application Repackaging

Applications written in C or C++ implement certain functionalities through native libraries. However, application repackaging cannot monitor these native library calls, making it ineffective in fully preventing malware intrusion. Additionally, malware authors can exploit bugs in disassembling tools [50, 3] to conceal their malicious functions.

In summary, application repackaging cannot fully prevent malware intrusion.

### 3.3 API Hooking

API hooking is a technique used to intercept API calls to inspect the behavior of an application. For Android, apps must go through the Binder to call other services, so the hooking method can be implemented on the Binder communication. The basic flow for implementing Host Intrusion Prevention System (HIPS) using API hooking includes:
1. Gaining root or system privilege.
2. Injecting a shared library object file (i.e., .so file) into the target process.
3. Performing hooking on target APIs.
4. Loading policy enforcement functions.

#### 3.3.1 Overview of API Hooking

Due to sandboxing protection, API hooking requires root or system privileges to hook functions in the target processes' libraries. Several methods [1, 29] exist to gain these privileges, often by exploiting the Android system. To ensure security, these tools install an app called Superuser to manage higher-privilege authorizations. Furthermore, system loopholes can be patched using hooking methodology [41], preventing malware from exploiting them.

The hooking operation must be conducted in native code. This is achieved by injecting a shared library file (.so file). Inline hooking [34] and ptrace are two methods for injection. Inline hooking is more challenging on ARM platforms compared to x86. Therefore, we use ptrace to attach to the target process, modify its registers, and execute our shellcode. The shellcode uses `dlopen` and `dlsym` functions to inject the .so file into the target memory and invoke an entry function to perform API hooking.

On Android, API hooking can intercept any Java method. Specifically, we can modify the global object (gDvm) in the `libdvm.so` library of the Dalvik Virtual Machine (DVM) to intercept a target method. gDvm maintains the structure of every class and method at runtime. Each method has a variable called `insns` that specifies the address of the corresponding Java method. By finding the target method in the loaded classes (`gDvm->loadedClasses`) and replacing the `insns` pointer, we can redirect the method to our own function. After executing our method, we can call back the original API. Policy checking and enforcement can be implemented in Java and compiled into a JAR package, which the injected library can load.

Most existing HIPS on mobile devices use "hooking on the client side." We will elaborate on this approach and highlight its deficiencies.

#### 3.3.2 API Hooking on the Client Side

In Section 2, we explained the client-server model in the Binder communication. To implement HIPS via API hooking on the client side, we hook the shared libraries of normal apps to perform policy enforcement. Understanding the workflow of the Binder transaction on the client side is crucial. For example, sending an SMS message involves the following code:

```java
SmsManager smsManager = SmsManager.getDefault();
smsManager.sendTextMessage("phoneNumber", null, "message", null, null);
```

The first line queries the ISms service (ISms handler) from the Service Manager. When `sendTextMessage` is called, the system invokes the `sendText` method of the ISms handler. Figure 3 shows the partial function call graph for a Binder transaction to send an SMS message. The `native transact` method, a JNI method, bridges with `android_os_BinderProxy_transact` in the native code. The transaction ends with the `talkWithDriver` function on the client side.

Since `native transact` is the last method at the Java level, we can intercept it for hooking. The `insns` pointer in gDvm points to the address of the corresponding native function. We store the original address and replace the method pointer with our implementation inside the injected .so file. After inspecting the transaction using our policy enforcement module, we call back the original API, `android_os_BinderProxy_transact`.

All apps are forked by a process called zygote. Instead of injecting a .so file into each app, we can inject it into zygote at boot time. This allows us to enforce policies on any transactions using the intercepted method.

Although client-side API hooking is straightforward and widely implemented in commercial systems [10, 9], it has a severe security limitation. The hooking operations occur within the same sandbox as the app, making them modifiable and bypassable by the app itself. If a malware author discovers this HIPS implementation, they can easily bypass it. We will now demonstrate how to bypass this popular HIPS implementation.

### 3.4 Vulnerability of Existing HIPS Products

Several existing HIPS products (e.g., [10, 9]) are available in the market. Here, we show how to bypass these HIPS and elaborate on the vulnerability of the client-based hooking architecture (or Client HIPS). Client HIPS is a popular Android anti-virus and protection architecture, with some products (e.g., LBE [10]) having over ten million users. Additionally, Client HIPS is pre-installed on many Android phones (e.g., Xiaomi smartphones).

By examining the memory structure of installed apps and services, we can determine if app processes have been injected with a .so file and a JAR file. Figure 4 illustrates the memory structure of a normal app, showing injected files that do not belong to the app. This indicates that Client HIPS uses client-side API hooking for policy enforcement. Checking the `insns` value in gDvm, the pointing address of `native transact` is 0x6CC4FED8. From the mapped memory regions, we find that the address of `native transact` resides in the 0x6CC47000-0x6CC52000 region, mapped to `/data/data/com.client_hips/app_hips/libclient.so`. This confirms that the system intercepts the `native transact` method in `android.os.Binder` and points to the injected library.

As discussed in Section 3.3, Client HIPS operates within the same sandbox as the app. Malware can bypass the HIPS in several ways:
1. Modify the `insns` back to the original to bypass policy enforcement.
2. Create a custom `transact` implementation to bypass all interceptions.

Figure 5 demonstrates the workflow to bypass Client HIPS. We implement a native `pwnTransact` method to send transactions directly to the target service, bypassing the intercepted `transact` method. In summary, malware authors can use these techniques to determine the existence of Client HIPS and bypass it.

### 4. Patronus

In this section, we present Patronus, a secure architecture designed to prevent suspicious transactions and dynamically detect malware based on runtime transaction information. Patronus does not require modifying the Android system or repackaging apps, facilitating easy deployment. We will discuss the system design and methodologies used for intrusion prevention and dynamic detection.

#### 4.1 API Hooking on the Server Side

As discussed in Section 3.4, client-side API hooking has several deficiencies. To overcome these, Patronus complements API hooking by implementing it on both the client and server sides. We will first present the design and implementation of server-side API hooking.

There are two approaches to conduct API hooking on the server side:
1. **Java API Hooking**: Replace the address of the Java method, `execTransact`, in the DVM global object with our policy enforcement functions. Afterward, the hooking function calls back the original function if the policy accepts the transaction. This method only intercepts a subset of API calls, as it does not cover services implemented in native code (e.g., camera service).
2. **Service Manager Hooking**: Intercept the Service Manager, which manages all registered services. When an app queries a service, the intercepted Service Manager replies with a handler pointing to the HIPS service for policy enforcement. Figure 6 shows the basic flow of hooking on the Service Manager. When an app queries the ISms Service, it gets the handler of the HIPS' hooked Service. The hooked Service checks with the Policy Service before allowing the transaction to proceed.

Many malware have network capabilities, but hooking the Binder cannot monitor network APIs because Android's network functions rely on socket IPC. Apps can communicate with remote servers without using the Binder if they have the `android.permission.INTERNET` permission. To monitor network behaviors, we intercept socket-related APIs. For example, we use client-side hooking to intercept the `connect` method in the `java.net.Socket` class.

#### 4.2 System Design of Patronus

In Section 3, we presented the weaknesses of existing host-based intrusion prevention systems on Android. To overcome these issues, we set the following design goals for Patronus:
1. Dynamically prevent suspicious malware intrusions and detect malware using runtime information (i.e., transaction information).
2. Provide an extensible and flexible methodology to detect malware without modifying the Android system or repackaging apps.

Figure 7 depicts the architecture of Patronus, which consists of four components:
- **Patronus Application**: Displays the user interface, initiates the Patronus Service, and injects .so or JAR files using ptrace.
- **Patronus Service**: A sticky service launched at system start, responsible for detecting malware and intercepting all transactions on the server side. It also manages the policy database.
- **Injected Files**: Two types of injected filesâ€”on the client side and the server side. Client-side files intercept the `native transact` method, while server-side files intercept the `execTransaction` method of the Service Manager.
- **Policy Database**: Contains policy enforcement rules for each type of transaction. Users can define and modify these rules via the Patronus App, and the database is protected by the Linux file system.

#### 4.3 Intrusion Prevention

Patronus inspects transactions dynamically and notifies users of intrusive transactions. Table 1 lists some intrusive transactions with their descriptors, codes, and names. For example, the `requestLocationUpdates` transaction in `android.location.ILocationManager` can access location information. If such a transaction is not initiated by the user, Patronus alerts the user. Users can deny the transaction at runtime. Patronus monitors the transaction stream based on the intrusive transaction list, and users can add or delete rules in the policy database to customize the behavior.

Figure 7: Architecture of Patronus.

| TC | TC Name | TD |
|---|---|---|
| com.android.internal.telephony.ISms | Send SMS | ISms |
| com.android.internal.telephony.ITelephony | Telephony Functions | ITelephony |

This comprehensive approach ensures that Patronus can effectively prevent and detect malware on Android devices.