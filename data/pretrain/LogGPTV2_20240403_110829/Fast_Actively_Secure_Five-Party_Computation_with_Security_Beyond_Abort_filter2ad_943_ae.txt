(λ
4
λ1]1}д′(cid:44)1||k
w ,0 ⊕ [∆
1
λ1]2}д′(cid:44)2||k
w ,0 ⊕ [∆
2
λ1]3}д′(cid:44)3||k
w ,0 ⊕ [∆
3
λ1]4}д′(cid:44)4||k
w ,0 ⊕ [∆
4
4
2
1
λ1]1),
λ1]2),
λ1]3),
3
λ1]4) }
д
д
w ,0 ⊕[∆дλ1]д)⊕(⊕д′(cid:44)д[∆дλ1]д′)}д∈[4] = {k
The evaluator computes bw = ⊕д∈[4]λ
1 = g(xu, xv) and the
w ,0 ⊕
super-key as {(k
∆дλ1}д∈[4]. Since ∆дλ1 = ∆g(xu, xv), the super-key reduces to
{k
w ,g(xu ,xv)}д∈[4] as desired. Similarly, correctness for the remain-
ing rows of super-CT and for any choice of λw can be proved. (cid:3)
д
д
j
4 5PC WITH FAIRNESS
Relying on pairwise-secure channels, we outline a symmetric-key
based 5PC with fairness, tolerating 2 malicious corruptions with per-
formance almost on par with the state-of-the-art [25] with selective-
abort and round complexity of 8. Starting with the overview of [25],
we enumerate the challenges involved in introducing fairness into
it and then describe techniques to tackle them.
j
w ,xд ⊕λw
In [25], the garblers perform a one-time SD, which can be used
for multiple executions. The evaluator P5 splits her input additively
among P2, P3, P4 who treat the shares as their own input. Garbling
is done using the passively secure scheme of [13] topped with
techniques of SD and AOT (Section 3). For the transfer of super-keys
wrt each input wire w of each garbler Pд, the remaining garblers
w , j (cid:60) Sд) on w to Pд who
send the mask shares not held by Pд (λ
after verifying the shares for correctness (checking for equality),
computes the blinded bit bw = xw ⊕ λw (xw is the input on w).
, j ∈ Sд
Now, Pд can send 3 out of 4 keys in the super-key k
for bw to P5. However, to enable P5 learn the fourth key for bw
that corresponds to the seed held by remaining co-garblers, Pд
cannot simply send bw to the co-garblers, as it would leak Pд’s
input when two of the garblers are corrupt (and hold all seeds and
thus the mask λw ). [25] overcomes this subtle case as: Pд splits
bw as bw = ⊕l ∈[4]\{д}bl and sends each share to exactly one co-
garbler. Each co-garbler now sends key for the share she received
to P5 who XORs the 3 key-shares to get the desired 4th key. The
property of free-XOR is crucial in ensuring that XOR of key-shares
gives the key on blinded input. A breach in the above solution is
that Pд colluding with P5 can learn both super-keys for w leading
to multiple evaluations of f . This is captured by the following
attack: Pд sets bl = 0, bl′ = 1 and sends them to co-garblers Pl ,
Pl′ respectively. As a result, P5 receives 0-key from Pl , 1-key from
Pl′ and XOR of these values leaks the global offset and thus both
keys wrt the seed Pд does not own. Now Pд who already owns 3
seeds can use both 0-key and 1-key of the 4th key to obtain multiple
evaluations of f . This is tackled by having Pд and one of her co-
garblers individually provide additive shares of 0κ that are XORed
with key-shares before sending to P5. Finally, P5 assembles the XOR
shares and uses the 4th key for evaluation. On evaluation, P5 sends
Session 7C: Secure Computing VCCS ’19, November 11–15, 2019, London, United Kingdom1579the output super key Y to all garblers, who then compute the output
using output mask shares, that are exchanged and verified at the
end of garbling phase.
The prime challenge to introduce fairness in the protocol of [25]
is for the case of a corrupt P5, who either sends Y selectively to
garblers or sends an invalid/no Y after learning the output herself on
successful evaluation of DGC. This can be tackled using the natural
techniques in the output phase as: (a) The garblers withhold the
shares of mask bits on the output wires until a valid Y is received
from P5. (b) To further prevent a corrupt P5 from selectively sending
Y to garblers, we enforce the garbler who received valid Y from P5
to, in turn, send the same Y to her co-garblers. Nevertheless, both
the above solutions still violate fairness. In solution (a), a corrupt
garbler, Pд can send an incorrect share of the mask bit on receiving
Y, thus creating chaos for the honest receiver who fails to decide its
true value, while Pд herself learns the output using shares received
from honest co-garblers. In solution (b), two colluding garblers can
convince the honest garblers of any Y using their knowledge of all
seeds, even if the honest P5 aborts during evaluation. This is easily
fixable with broadcast, however, without broadcast, a convincing
strategy that Y indeed originated from P5 is necessary.
We tackle the concerns in solution (a) using the commit-then-open
technique. In detail, garblers are forced to commit to the shares of
mask bit on each output wire in advance to bar them from sending
inconsistent values later and violating fairness. Each commitment
is sent by 3-parties who own the corresponding seed which are
then compared for correctness by each receiver prior to evalua-
tion. The collision-resistant property of hash is used as a proofing
mechanism to tackle the concerns in solution (b). Concretely, P5
computes hash on a random value proof in the garbling phase and
sends the resulting hash, H(proof) to all garblers who in turn ex-
change H(proof) amongst themselves for consistency. The value
proof is sent as a proof to the garblers along with Y post evalu-
ation. This technique is reminiscent of the one used in [24]. The
above techniques ensure that a colluding garbler and P5 cannot
compute the output y without the aid of at least one honest garbler.
An honest garbler reveals shares on the mask bits owned by her
only on receiving valid (Y, proof) from some party. This handles
the concern in solution (b) by ensuring that Y was not impostered
upon by two colluding garblers as they cannot forge a valid proof.
4.1 The construction
We present the formal protocol in Fig 8. The garblers perform a
one-time SD as in [25], which can be used for multiple runs. Circuit
garbling is done as in Fig 4. The input keys sent by garblers define
their committed inputs. The case of evaluator’s input and transfer of
input keys is dealt as in [25]. In addition, we enforce each garbler to
generate commitments on the shares of output wire masks wrt each
seed she owns and allow agreement on these commitments by all
parties. Also, P5 samples a random proof and sends H(proof) to the
garblers who agree on the hash value or abort. Then, P5 evaluates
the GC and sends (Y, proof) to all. Each garbler checks if (Y, proof)
is valid. If so, it sends (Y, proof) and the openings corresponding to
the commitments on mask bit shares of output wires to all. Finally,
when a garbler has enough valid openings for commitments on
mask bit shares of output wires, she computes the required output.
The equivocal commitment eNICOM is used to commit on the
output mask shares to handle a technicality that arises in the proof.
Namely, when one garbler and P5 are corrupt, the adversary, on
behalf of P5 can decide to abort as late as when Y needs to be sent to
garblers. Hence, the simulator is also forced to act on the adversary’s
behalf and invoke the functionality after this step. Nevertheless,
the simulator needs to simulate the prior rounds with no clue of the
output, which includes transfer of DGC, super-keys, commitments
on output mask shares. To tackle this, the simulator uses eNICOM
to commit to dummy values at the onset and later equivocates to
output mask shares (set based on the output obtained after invoking
the functionality) if corrupt P5 sends Y to at least one honest garbler.
To keep the eNICOM trapdoor hidden from the adversary and
available to the simulator, we need it to be distributed among 3
parties. Although convenient, the public parameter for eNICOM
cannot be derived from the seeds, as it would trivially arm a corrupt
garbler (with the knowledge of 3 seeds) to equivocate. Further, due
to the symmetry of eNICOM, equivocation seems infeasible for
the simulator if the trapdoor is distributed into only three parts.
Hence, we distribute the trapdoor and thus public parameter into
four parts (held by three parties) to keep the binding property intact
in the real world while allowing the simulator (acting on behalf of
3 honest parties) to perform equivocation. We demonstrate below
for each д ∈ [4], how eppд(= ⊕l ∈[4]eppдl) for the output mask bits
corresponding to sд is chosen by the parties. We note that we could
opt for a random-oracle based scheme and use its programmability
to enable equivocality. But this would make the proof rely on non-
standard assumption, and not injective one-way functions.
1
epp
2
epp
3
epp
4
epp
P1
epp
–
epp
epp
11
31
41
12
, epp
P2
–
epp
epp
epp
21
32
42
22
, epp
P3
epp
epp
epp
–
13
23
33
34
, epp
P4
epp
epp
–
epp
14
24
43
44
, epp
Optimizations. We propose the optimizations below to boost the
efficiency of fair: all optimizations of [25] can be applied to our pro-
tocol. More concretely, majority of communication in the garbling
phase is due to the number of AOT invocations. This is optimized
with the use of batch AOTs. Batch AOTs allow the sender to send
both commitments while the attesters send only hash on all the
commitments. The NICOM instantiation (Appendix B) based on
the ideal cipher model can be used to obtain faster commitments in
practice. Each GCд, д ∈ [4], is sent by exactly one owner while the
rest send only H(GCд). P5 verifies the hash values before evalua-
tion. For implementation, eNICOM, NICOM are instantiated with
random-oracle based commitment. Also, communication in eNI-
COM is saved by generating commitment on the concatenation of
mask bit shares of all wires rather than on each bit individually.
4.2 Properties
Lemma 4.1. The protocol fair is correct.
Proof. The input of P5 is well defined by the shares sent to
P2, P3, P4. The 3 keys for each input wire owned by the garblers,
along with the 4th key sent as XOR shares, define their committed
Session 7C: Secure Computing VCCS ’19, November 11–15, 2019, London, United Kingdom1580Input and Output: Party Pi ∈ P has input xi and outputs y = C(x1, x2, x3, x4, x5) or ⊥.
Common Inputs: The circuit C(x1, x2, x3, x4, ⊕j∈{2,3,4}x 5j) that computes f (x1, x2, x3, x4, x5) and takes x1, x2, x3, x4 and shares {x 5j }j∈{2,3,4}
as inputs, each input, their shares are from {0, 1} (instead of {0, 1}ℓ for simplicity) and output is of the form {0, 1}ℓ.
Notation: Si denotes indices of the parties who hold si as well as indices of the seeds held by Pi .
Primitives: A NICOM (Com, Open), an eNICOM (eGen, eCom, eOpen, Equiv), Garble (Fig 4), Eval (Fig 5), Collision Resistant Hash H (Appendix B).
Seed Distribution Phase (one-time): Pд chooses random seed sд ∈R {0, 1}κ , and sends sд to the other two parties in Sд who in turn exchange
with each other and abort if their versions do not match.
Evaluator’s Input sharing Phase: P5 secret shares its input as x5 = x 52 ⊕ x 53 ⊕ x 54. P5 sends x 5j to Pj (wlog).
Proof Establishment Phase: P5 chooses proof from the domain of hash function H, computes and sends H(proof) to each garbler Pд , д ∈ [4]. Pд
in turn sends the copy of H(proof) received from P5 to her co-garblers. Pд aborts if H(proof) received from a co-garbler does not match with her own
copy received from P5. Else, Pд accepts H(proof) to be the agreed upon hash.
Setup of public parameter for Equivocal Commitment. For eppд , д ∈ [4] of eNICOM, each Pj , j ∈ Sд samples eppдj from fresh randomness (not
from any of the seeds he holds ) and sends to all. Pд additionally samples eppдl , l ∈ [4]\Sд and sends to all. Each party computes eppд = ⊕j∈[4]eppдj .
Pl ∈ P forwards eppд , д ∈ [4] to all. Each Pi ∈ P aborts if any of eppд received mismatch.
Transfer of Equivocal Commitments.
– Each Pд , д ∈ [4] runs the Sampling Phase of Garble(C) and computes the following commitments for every circuit output wire w using
w , oj
. Pд sends {(eppj , cj
randomness from sj , j ∈ Sд: {(cj
w)}j∈Sд
w)}j∈Sд
w), j ∈ [4] for some output wire w.
w) ← eCom(eppj , λj
– Pi ∈ P aborts if it receives mismatched copies of (eppj , cj
Garbling, Masked input bit and Key Transfer Phase.
– For circuit input wire w held by Pд , д ∈ [4] corresponding to input bit xw , each Pl , l ∈ [4] \ {д} sends λj
receives mismatched copies for some λj
w ,bw
, j ∈ [4] \ Sд (not held by Pд) to P5, it does the following (The case for the key of P′
k j
w ,bw
◦ Pд chooses random bits bl and random βl ∈ {0, 1}κ s.t bw = ⊕l∈[4]\{д}bl and 0κ = ⊕l∈[4]\{д}βl . Pд sends bl , βl to Pl .
◦ One garbler other than Pд chooses δl ∈ {0, 1}κ s.t 0κ = ⊕l∈[4]\{д}δl and sends δl to Pl .
◦ Pl sends Kl = k j
w and bw = xw ⊕ λw . Pд sends (bw , {k j
w . Else, Pд computes λw = ⊕j∈[4]λj
⊕ βl ⊕ δl to P5 who sets k j
to all.
w , j ∈ Sl to Pд. Pд aborts if it