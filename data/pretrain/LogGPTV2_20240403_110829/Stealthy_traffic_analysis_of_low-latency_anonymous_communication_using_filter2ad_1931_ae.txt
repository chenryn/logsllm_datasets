### Linking Attacks in the Tor Network

Our attacks do not require the compromise of any relays within the Tor network.

#### Correlation and Mean Throughput
- **Correlation = 0.936, Mean(s1) = 465.1, Mean(s2) = 463.0**
- **Correlation = 0.413, Mean(s1) = 465.1, Mean(s2) = 463.0**
- **Correlation = -0.97, Mean(s1) = 65.37, Mean(s2) = 63.02**

**Stream 1 (s1) and Stream 2 (s2)**
- **Figure 10(a):** Positive correlation between streams.
- **Figure 10(b):** Batching effect when sampling every 0.5 seconds.
- **Figure 10(c):** Batching effect when sampling every 2 seconds.

### Throttling Mechanism in Tor
Tor implements stream-level throttling within circuits, which operates as follows:
- Each stream is initially allowed to send 500 of Tor's 512-byte cells (also known as the packaging window).
- Upon successful reception of packets, the packaging window is incremented in blocks of 50 cells.
- If a stream is waiting for the packaging window to be incremented, another stream multiplexed on the same circuit can monopolize the circuit (batching effect) for a short time interval.

While the streams share the throughput fairly, flow- and congestion-control mechanisms in Tor result in batching behavior, where one stream may monopolize the circuit for some period, while other streams remain idle. This mutually exclusive use of the circuit by two streams can be observed at smaller time scales, as shown in Figures 10(b) and 10(c). The length of the batches appears to be a multiple of 25 KB, corresponding to 50 of Tor's 512-byte cells, confirming our intuition that 50-cell packaging window increments are responsible for the batching effect. The time scales necessary to observe this effect vary depending on the throughput of the flow:
- In Figure 10(b), with a mean throughput of 450 Kbps, the behavior is observed by sampling every 0.5 seconds.
- In Figure 10(c), with a mean throughput of 66 Kbps, the behavior is observed by sampling every 2 seconds.

### Algorithm for Inferring Stream Origin
Based on these observations, we propose the following algorithm to infer whether the streams are coming from the same client:
1. **Macro-Level Correlation Check:** Verify strong correlation at macro-level time scales, as done in previous sections.
2. **Micro-Level Time Scale Definition:** Define the micro-level time scale as \(\frac{Throughput(KBps)}{25 KB}\).
3. **Batching Effect Check:** At micro-level time scales, compute the fraction of time when only one stream is active out of the total time that either stream is active, which indicates the degree of "mutual exclusivity" between the two streams.

### Experimental Results
To evaluate the algorithm, we conducted an experiment where a single client connects to two servers under our control, located in different geographical locations, and simultaneously downloads data. The connections were made simultaneously, so the two streams were multiplexed over the same Tor circuit. We performed 225 runs between November 2010 and February 2011.

**Crossover Error Rate:**
- **Figure 11:** Crossover error rate as a function of time duration.

To check for false positives, we repeated the experiment with downloads by two different clients using separate circuits that share a common exit relay. We performed 225 iterations of this experiment in April 2011. The trade-off between false positives and false negatives is governed by the choice of threshold values for correlation and mutual exclusiveness. As the threshold values increase, false positives decrease, but false negatives increase. The crossover error rate as a function of communication duration is plotted in Figure 11. As the time duration increases, the accuracy of our attack improves. Even at a small duration of 120 seconds, the mean crossover error rate is less than 5%, reducing to 1.3% beyond 300 seconds (with a 95% confidence interval of less than 4%).

### Comparison with Previous Work
Hopper et al. [24] analyzed a similar attack scenario using latency information, achieving a crossover error rate of 17% even with a 10-minute communication duration. Throughput and latency provide orthogonal sources of information, and combining our attacks with latency attacks could further improve accuracy. We also studied a scenario where a client communicates simultaneously on three streams, but only two destination endpoints collude. The crossover error rate in this case was higher but still less than 8% when the communication duration was 300 seconds.

### Discussion
We discuss some issues and ramifications of our attacks:
- **Countermeasures:** Possible defenses include better load balancing within the Tor network, using paths through higher capacity relays, and implementing multipath forwarding to reduce bottlenecks and even out short-term throughput variations.
- **Alternative Schemes:** Techniques for measuring throughput, such as sending packets with precise timings, can reveal the total capacity of bottleneck links and improve correlation.
- **Resource Requirements:** Our primary attacks are stealthy and do not require congesting Tor relays. The attackerâ€™s resource requirements are estimated based on the average throughput through a Tor relay.
- **Impact of Bulk Traffic Throttling:** Recent implementations of bulk traffic throttling in Tor can affect the attacker's probe circuits, but this can be mitigated by opening new circuits.
- **Ethics:** We conducted our study with caution, only attacking circuits created by our own experimental tool and storing data with strong encryption behind a firewalled network.

### Concluding Remarks
To the best of our knowledge, this work comprises the first study of throughput attacks on anonymity systems. Our techniques are stealthy and low-cost, and they use threat models and resource requirements that differ significantly from other flow feature-based attacks. Overall, our study highlights the complexity of designing anonymous communication systems.

### Acknowledgments
We are grateful to Roger Dingledine for his guidance and discussions about Tor. We also thank Eugene Vasserman for suggesting the mechanism to probe Tor relays. This paper benefited from discussions with George Danezis, Amir Houmansadr, Qiyan Wang, Giang Nyugen, Sonia Jahid, and Xun Gong. We appreciate the feedback from the anonymous reviewers. This work was supported in part by NSF CNS 08-31488, 09-53655, 10-40391, and an International Fulbright S&T Fellowship.

### References
[1] http://netfiles.uiuc.edu/mittal2/www/throughput-fingerprinting.html
[2] Cisco Systems, Inc., Cisco IOS NetFlow. http://www.cisco.com/en/US/products/ps6601/products_ios_protocol_group_home.html
[3] Symantec Data Loss Prevention. http://www.symantec.com/business/products/family.jsp?familyid=data-loss-prevention
...
[51] Wright, M., Adler, M., Levine, B. N., and Shields, C. Defending anonymous communication against passive logging attacks. In IEEE S&P (2003).

This version of the text is more structured, coherent, and professional, with clear headings and a logical flow of information.