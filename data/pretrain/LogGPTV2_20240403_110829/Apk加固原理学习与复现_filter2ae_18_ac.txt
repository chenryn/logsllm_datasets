            mResources = new Resources(mAssetManager, superRes.getDisplayMetrics(), superRes.getConfiguration());
            mTheme = mResources.newTheme();
            mTheme.setTo(super.getTheme());
        }
        @Override
        public AssetManager getAssets() {
            return mAssetManager == null ? super.getAssets() : mAssetManager;
        }
        @Override
        public Resources getResources() {
            return mResources == null ? super.getResources() : mResources;
        }
        @Override
        public Resources.Theme getTheme() {
            return mTheme == null ? super.getTheme() : mTheme;
        }
    }
RefInvoke.java：反射工具类
    public class RefInvoke {
        /**
         * 反射执行类的静态函数(public)
         *
         * @param class_name  类名
         * @param method_name 函数名
         * @param pareTyple   函数的参数类型
         * @param pareVaules  调用函数时传入的参数
         * @return
         */
        public static Object invokeStaticMethod(String class_name, String method_name, Class[] pareTyple, Object[] pareVaules) {
            try {
                Class obj_class = Class.forName(class_name);
                Method method = obj_class.getMethod(method_name, pareTyple);
                return method.invoke(null, pareVaules);
            } catch (SecurityException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            } catch (IllegalArgumentException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            } catch (IllegalAccessException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            } catch (NoSuchMethodException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            } catch (InvocationTargetException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            } catch (ClassNotFoundException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
            return null;
        }
        /**
         * 反射执行类的函数（public）
         *
         * @param class_name
         * @param method_name
         * @param obj
         * @param pareTyple
         * @param pareVaules
         * @return
         */
        public static Object invokeMethod(String class_name, String method_name, Object obj, Class[] pareTyple, Object[] pareVaules) {
            try {
                Class obj_class = Class.forName(class_name);
                Method method = obj_class.getMethod(method_name, pareTyple);
                return method.invoke(obj, pareVaules);
            } catch (SecurityException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            } catch (IllegalArgumentException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            } catch (IllegalAccessException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            } catch (NoSuchMethodException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            } catch (InvocationTargetException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            } catch (ClassNotFoundException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
            return null;
        }
        /**
         * 反射得到类的属性（包括私有和保护）
         *
         * @param class_name
         * @param obj
         * @param filedName
         * @return
         */
        public static Object getFieldOjbect(String class_name, Object obj, String filedName) {
            try {
                Class obj_class = Class.forName(class_name);
                Field field = obj_class.getDeclaredField(filedName);
                field.setAccessible(true);
                return field.get(obj);
            } catch (SecurityException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            } catch (NoSuchFieldException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            } catch (IllegalArgumentException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            } catch (IllegalAccessException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            } catch (ClassNotFoundException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
            return null;
        }
        /**
         * 反射得到类的静态属性（包括私有和保护）
         *
         * @param class_name
         * @param filedName
         * @return
         */
        public static Object getStaticFieldOjbect(String class_name, String filedName) {
            try {
                Class obj_class = Class.forName(class_name);
                Field field = obj_class.getDeclaredField(filedName);
                field.setAccessible(true);
                return field.get(null);
            } catch (SecurityException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            } catch (NoSuchFieldException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            } catch (IllegalArgumentException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            } catch (IllegalAccessException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            } catch (ClassNotFoundException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
            return null;
        }
        /**
         * 设置类的属性（包括私有和保护）
         *
         * @param classname
         * @param filedName
         * @param obj
         * @param filedVaule
         */
        public static void setFieldOjbect(String classname, String filedName, Object obj, Object filedVaule) {
            try {
                Class obj_class = Class.forName(classname);
                Field field = obj_class.getDeclaredField(filedName);
                field.setAccessible(true);
                field.set(obj, filedVaule);
            } catch (SecurityException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            } catch (NoSuchFieldException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            } catch (IllegalArgumentException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            } catch (IllegalAccessException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            } catch (ClassNotFoundException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
        /**
         * 设置类的静态属性（包括私有和保护）
         *
         * @param class_name
         * @param filedName
         * @param filedVaule
         */
        public static void setStaticOjbect(String class_name, String filedName, Object filedVaule) {
            try {
                Class obj_class = Class.forName(class_name);
                Field field = obj_class.getDeclaredField(filedName);
                field.setAccessible(true);
                field.set(null, filedVaule);
            } catch (SecurityException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            } catch (NoSuchFieldException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            } catch (IllegalArgumentException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            } catch (IllegalAccessException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            } catch (ClassNotFoundException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
    }
AndroidMenifest.xml
接下来对这个壳程序做一个详细的解释。  
首先是对分离源apk的时机的选择，就是在脱壳程序还没有运行起来的时候，来加载源程序的Apk，执行他的onCreate方法，那么这个时机不能太晚，不然的话，就是运行脱壳程序，而不是源程序了。查看源码我们知道。Application中有一个方法：attachBaseContext这个方法，他在Application的onCreate方法执行前就会执行了，那么我们的工作就需要在这里进行。  
在attachBaseContext中，我们先创建两个文件夹，用来存放分离出来的dex和lib库文件并把分离出来的apk写入payload.apk中，这些目录都要求有可写权限。
从整个apk中获取dex文件
从上述的dex文件中分离出源apk文件：先将我们保存在最后四个字节的源apk的大小读出来赋值给dexlen，然后通过I/O函数，从dex文件最后往前选dexlen大小个byte放在newdex里面，这个就是我们读到的源apk，然后就需要对其解密，保证其正常运行，然后需要分析这个apk，如果有的话，把里面的lib库文件取出来单独保存，方便其运行。
解密源apk，和加密的函数对应即可
得到源apk之后，我们接下来的任务就是让他跑起来，我们在前面提到如果要让activity具有完整的生命周期，就需要去替换LoadedApk中的mClassLoader，这里就需要用到反射的技术，通过查看源码，首先我们反射ActivityThread类可以发现currentActivityThread()函数会返回一个静态的ActivityThread类对象，我们就反射获取该对象，然后运用该对象去得到ActivityThread类中的属性mPackages，然后获得当前包名，然后利用包名去获得LoadedApk中的mClassLoader，用这个类加载器作为parent创建一个DexClassLoader，然后用自己创建的DexClassLoader替换掉系统中的mClassLoader(由于ArrayMap是高版本Android引入的，低版本没有，所以代码里做了版本判断)。
    private static volatile ActivityThread sCurrentActivityThread;
    public static ActivityThread currentActivityThread() {
            return sCurrentActivityThread;
        }
我们已经获得了加载源程序的类加载器，然后由于源apk中有自定义application，所以我们在onCreate()方法中要找到源程序的application，让他运行起来才可以。
先从AndroidMenifest.xml中获取application值(源apk的application和activity要在AndroidMenifest.xml里注册)，获取到如果有的话就需要替换系统的application为源apk中的的application。  
首先我们还是要获得ActivityThread对象，然后运用反射获得他的内部类AppBindData的对象，然后获得AppBindData当中的LoadedApk属性值Info。
    static final class AppBindData {
            LoadedApk info;
            String processName;
            ApplicationInfo appInfo;
            List providers;
            ComponentName instrumentationName;
            Bundle instrumentationArgs;
            IInstrumentationWatcher instrumentationWatcher;
            IUiAutomationConnection instrumentationUiAutomationConnection;
            int debugMode;
            boolean enableBinderTracking;
            boolean trackAllocation;
            boolean restrictedBackupMode;
            boolean persistent;
            Configuration config;
            CompatibilityInfo compatInfo;
            /** Initial values for {@link Profiler}. */
            ProfilerInfo initProfilerInfo;
            public String toString() {
                return "AppBindData{appInfo=" + appInfo + "}";
            }
        }
查看android.app.LoadedApk源代码，发现创建Application的makeApplication方法，如果缓存mApplication不为空，则直接返回。mApplication为空时，则创建RealApplication，并且执行相关的回调。创建RealApplication时，类名是从mApplicationInfo.className中获取。添加新创建RealApplication到mActivityThread.mAllApplications。赋值给缓存mApplication。所以我们在调用makeApplication之前，需要将mApplication置为null，否则会直接返回ProxyApplication的实例。  
所以在我们的代码中，通过ActivityThread实例，获得LoadedApk实例。为了使makeApplication顺利执行，先设置mApplication为null。移除mAllApplications中ProxyApplication的实例。LoadedApk中mApplicationInfo和AppBindData中appInfo都是ApplicationInfo类型，需要分别替换className字段的值为RealApplication的实际类全名。之后，反射调用系统的makeApplication()，这样就完成了替换。  
通过阅读系统的源代码，可以很容易的知道，Application和ContentProvider的初始化顺序是：Application.attachBaseContext
-> ContentProvider.onCreate -> Application.onCreate  
所以最后我们话需要通过反射去修改mContext的值，程序才可以正常运行。  
最后是资源管理问题：通过阅读源码可以发现，资源是由AssetManager管理的，所以我们只需要在addAssetPath方法中，将资源加载的路径改为源apk的路径即可。
## 复现结果
源程序运行的结果：
加固后程序运行结果：
我们可以发现加固之后的程序还是可以照常运行的。  
接下来哦我们看一下反编译的结果：  
源程序：
加固之后的程序：
通过对比，我们发现加固之后只会反编译出壳程序的代码，不会反编译出源apk的代码。