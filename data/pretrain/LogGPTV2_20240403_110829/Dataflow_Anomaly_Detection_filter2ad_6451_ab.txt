in a labeled trace. We limit our attention to unary and bi-
nary relations on event arguments in this paper, as they can
be learnt more efﬁciently, and seem adequate for our pur-
poses.
Unary Relations. Unary relations capture properties of a
single argument. They can all be represented using the form
X R c, where X is an argument name, R denotes a rela-
tion, and c is a constant value. Examples of unary relations
include:
• equal relationship is applicable to all types of arguments.
For instance X equal v indicates that the value of argu-
ment X is always v.
• elementOf relation is used to capture the fact that an ar-
gument can take one of several values. X elementOf S
indicates that X can take any of the values in the set S.
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:47:23 UTC from IEEE Xplore.  Restrictions apply. 
• subsetOf is a generalization of elementOf, and is
used when an argument can take multiple values,
all of which are drawn from a set.
For instance,
M subsetOf {RD, WR} represents the fact that M is a
set-valued argument whose value is a subset of the set
{RD, WR}.
• range is a relation involving integer arguments.
It
is characterized by a lower and upper bound, e.g.,
X range (0, 2) indicates that the argument X can take
values in the range 0 − 2.
• isWithinDir relation is used to capture the fact that a ﬁle
name argument is contained within a speciﬁed directory.
For example, if X has the value "/home/user/xyz", we
can state X isWithinDir "/home/user/".
• hasExtension relation is used to specify the fact that
a ﬁle name argument has certain extensions, e.g., if X
takes values from the set {a.doc, b.doc, c.txt},
then X hasExtension {"doc", "txt"} holds.
Some of the unary relations mentioned above incorporate
some approximations. For instance, elementOf is an ex-
ample of a relation that doesn’t need to make approxi-
mations.
If a variable X is observed to have k distinct
values v1, ..., vk across all traces, this can be captured as
X ∈ {v1, ..., vk}. Approximations become necessary when
the sets become large — with integer- or string-valued vari-
ables, sets can be unbounded in size. In this case, approxi-
mations such range or isWithinDir may be used.
We note that previous works on system call argument
learning [18, 27, 23] were all focused on unary relations.
The main difference with our approach is that we suggest
the use of control-ﬂow contexts to support more accurate
learning. As a result, our approach learns properties that
hold across all occurrences of a system call made from
the same control context, whereas the previous approaches
learn properties that hold across all occurrences of a system
call, regardless of control context.
Binary Relations. Binary relations capture relationships
between two event arguments. These may be arguments of
the same event, or arguments of different events. Our focus
is mainly on the latter, since such relationships naturally
capture the ﬂow of data from the arguments of one system
call to another.
Binary relations can in general be represented using sets
in a manner analogous to unary relations. However, such an
approach will limit the method to ﬁnite (small) relations, or
require approximations that lose important information. In
practice, we often need to represent some types of relations
over large domains without signiﬁcant loss of information.
Examples of such relationships include:
• equal captures equality between system call operands,
e.g., the ﬁle descriptor returned by an open operation
equals the ﬁrst argument of a subsequent write operation.
• isWithinDir indicates that one ﬁle name argument is
within the directory named by the other argument.
• contains is the reverse operation of isWithinDir,
in
which the second ﬁle name argument is within the direc-
tory named by the ﬁrst argument.
• hasSameDirAs indicates that two arguments have a com-
mon base directory, e.g., if X = "/home/user1/xyz"
and Y = "/home/user2/abc", X hasSameDirAs Y
and Y hasSameDirAs X hold, with the common direc-
tory being "/home/".
• hasSameBaseAs indicates that two ﬁle names have the
same base, e.g., if X = "somefile.txt" and Y =
"somefile.doc" then X hasSameBaseAs Y (as well
as Y hasSameBaseAs X) hold, with the common base
being "somefile".
• hasSameExtensionAs indicates that
two ﬁle names
if X has
have the same extension.
the value "somefile.txt" and Y has the value
"someotherfile.txt", X hasSameExtensionAs Y
(as well as Y hasSameExtensionAs X) holds, where the
common extension is "txt".
For example,
In the next section, we describe how such relations can be
formulated and learnt.
Interpretation of Binary Relations. Unary relations were
deﬁned to apply to all occurrences of an event argument
in any trace. However, this interpretation is unsuitable for
binary relations, since a relation of the form X equal Y
cannot hold with such an interpretation unless both X and
Y have only one possible value in all traces. Hence we use
an alternative interpretation that pairs each occurrence of X
in a trace with a single occurrence of Y . A natural way to
do this is to pair X and Y occurrences that are closest to
each other.
Deﬁnition 1 (Lifting a relation R to a trace.) Given a bi-
nary relation R on event arguments X and Y , we can lift R
to a trace T , denoted X RT Y , which holds iff, for each
occurrence of X and its closest preceding occurrence of Y
in T , X R Y holds. X RT Y holds iff X RT Y holds
∀T ∈ T .
Consider a labeled trace T of the form
Y = 1, Z = 2, X = 1, Y = 2, X = 2.
We can say that X equalT Y , but not Y equalT X.
Also, Y equalT Z, but not vice-versa. Now, consider
another trace, and the isWithinDir relationship:
Y ="/tmp", X ="/tmp/f1", X ="/f2",
Y ="/var", X ="/var/g1", X ="/g2"
It is clear that X isWithinDirT Y does not hold since
the second occurrence of X does not satisfy isWithinDir
when compared with the ﬁrst Y . Note, however,
that
X isWithinDir Y holds if we ignore all but the ﬁrst oc-
currence of X among a series of occurrences of X without
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:47:23 UTC from IEEE Xplore.  Restrictions apply. 
target fd = open(target ﬁle, WR);
1. int main(int argc, char **argv) {
2. source dir = argv[1]; target ﬁle = argv[2];
3.
4. push(source dir); // uses a global stack
5. while (dir name = pop()) != NULL) {
6.
7.
8.
9.
10.
11.
dir = opendir(dir name);
foreach (dir entry ∈ dir) {
if (isdirectory(dir entry))
push(dir entry);
else {
source fd = open(dir entry, RD);
(cid:2)3
F D3=open(F 3, M3)
isdirectory(F (cid:5)
8)
8 isWithinDir F6
| F (cid:5)
START
start(I, O)
| F3 equal O;
M3 elementOf {W R}
opendir(F 6)
| F6 isWithinDir I
isdirectory(F8)
| F8 isWithinDir F6
F D11=open(F11, M11)
| F11 equal F8;
M11 elementOf {RD}
read(F D12)
| F D12 equal F D11
write(F D13)
| F D13 equal F D3
exit(0)
END
(cid:2)6
(cid:2)8
(cid:2)11
(cid:2)12
(cid:2)13
(cid:2)14
(cid:2)18
(cid:2)19
12.
13.
read(source fd, buf);
write(target fd, buf);
close(F D14)
| F D14 equal F D11
close(source fd);
}
14.
15.
16.
17. }
18. close(target fd);
}
19. exit(0);
20. }
14)
14 equal F D11
close(F D(cid:5)
| F D(cid:5)
close(F D18)
| F D18 equal F D3
Figure 1. Example program simpletar (left) and its model with argument information (right).
(cid:2)
T .
(cid:2)
T Y holds iff X R Y holds for each pair
an intervening Y . This motivates a different ﬂavor of the
relation RT that we denote using R
Deﬁnition 2 X R
X, Y in T without an intervening X or Y .
Finally, consider the trace X = 1, Y = 0, X = 2, Y =
1, X = 3, Y = 2, .... Clearly, the value of Y equals the
value of the last but one preceding X. To accommodate
T :
this, we deﬁne another variation Rn
Deﬁnition 3 X Rn
T Y holds iff X R Y holds for each
occurrence of X and its n+1th preceding occurrence of Y .
Note that RT is the same as R0
In the above example
T .
trace, Y equal1
2.5. Motivating Example
We illustrate the concepts developed above with an example
program that is a highly simpliﬁed version of the tar pro-
gram. Figure 1 shows this simpletar program, which takes
a command-line argument describing the source directory,
and another command-line argument that speciﬁes the name
of the archive. It traverses the directory, which may con-
tain subdirectories, and copies all the ﬁles into the archive.
For simplicity, we ignore many aspects of archiving such as
maintaining ﬁle boundaries, directory structures, and so on.
In addition, we have abstracted away some details such as
the use of lstat system call, and replaced them with more
T X.
descriptive names such as isdirectory. In the example,
all system calls are underlined.
Figure 1 also shows an abstract version of FSA model
learnt for simpletar. States in the model are labeled with
(cid:2)n where n is the line number. Transitions are labeled with
system call and argument information. Argument names are
based on the nature of the argument and the transition they
are associated with, e.g., a ﬁle descriptor argument to the
close system call made on the transition from state (cid:2)14 to
(cid:2)8 is labeled as F D14, while F D(cid:2)
14 refers to the same argu-
ment when the transition is from (cid:2)14 to (cid:2)18. Relationships
are shown as annotations on the transitions.
To illustrate how some of these relationships are learnt,
we consider an execution trace generated when the program
is run to archive the directory /opt/proj into a tarball
/tmp/proj.tar. The operations of the trace are shown in
the ﬁrst column of Figure 2. The second column shows cor-
responding control-ﬂow transitions learnt in the FSA. The
third column shows values of system call arguments, and
the fourth column shows some of the relationships learnt. In
the generation of the trace, we have introduced a synthetic
event start to capture command line arguments, and con-
verted all the ﬁles names into absolute path names. Some
of the relationships, such as those capturing absolute values
of the ﬁle descriptors, are not shown in the above exam-
ple. In addition, absolute values of various ﬁle arguments
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:47:23 UTC from IEEE Xplore.  Restrictions apply. 
Operation Traces
Program started with arguments
"/opt/proj","/tmp/proj.tar"
(cid:2)3 : open("/tmp/proj.tar", WR)=3
(cid:2)6 : opendir("/opt/proj")
(cid:2)8 : isdirectory("/opt/proj/README")
(cid:2)11 : open("/opt/proj/README", RD)=4
(cid:2)12 : read(4)
(cid:2)13 : write(3)
(cid:2)14 : close(4)
(cid:2)8 : isdirectory("/opt/proj/src")
(cid:2)6 : opendir("/opt/proj/src")
(cid:2)8 : isdirectory("/opt/proj/src/a.c")
(cid:2)11 : open("/opt/proj/src/a.c", RD)=4
(cid:2)12 : read(4)
(cid:2)13 : write(3)
(cid:2)14 : close(4)
(cid:2)18 : close(3)
(cid:2)19 : exit(0)
Control-Flow
Transition
start → (cid:2)3
(cid:2)3 → (cid:2)6
(cid:2)6 → (cid:2)8
(cid:2)8 → (cid:2)11
(cid:2)11 → (cid:2)12
(cid:2)12 → (cid:2)13
(cid:2)13 → (cid:2)14
(cid:2)14 → (cid:2)8
(cid:2)8 → (cid:2)6
(cid:2)6 → (cid:2)8
(cid:2)8 → (cid:2)11
(cid:2)11 → (cid:2)12