密码学只做出来两题 baby, 暗示我还是学密码学的 baby (逃
## baby_crypto
这题还算比较常规, 主要逻辑如下
    while True:
        try:
            print("Input your cookie:")
            data_hex = sys.stdin.readline().strip()
            data = binascii.unhexlify(data_hex)
            assert(len(data) > iv_len + hash_len)
            iv, cookie_padded_encrypted, hv = data[:iv_len], data[iv_len: -hash_len], data[-hash_len:]
            cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=backend)
            decryptor = cipher.decryptor()
            cookie_padded = decryptor.update(cookie_padded_encrypted) + decryptor.finalize()
            try:
                cookie = unpad(cookie_padded)
            except Exception as e:
                print("Invalid padding")
                continue
            if not is_valid_hash(cookie, hv):
                print("Invalid hash")
                continue
            info = {}
            for _ in cookie.split(b";"):
                k, v = _.split(b":")
                info[k] = v
            if info[b"admin"] == b"1":
                with open("flag") as f:
                    flag = f.read()
                    print("Your flag: %s" %flag)
很明显的看到可以 `padding oracle`, 只要满足 `info[b"admin"] == b"1"` 就可以拿到 `flag`,  
但在 `cookie` 后面设置了 hash 来效验 `cookie` 的有效性, 但是没有检测重复的键值  
所以这里可以结合长度扩展攻击, 我们假设 `cookie` 为 `admin:0;username:abcde;password:abcde`  
我们可以在原 `cookie` 后面添加一个 `;admin:1`, 得到  
`admin:0;username:abcde;password:abcde\x80\x00\x00\x00\x00\x00\x00\x00\x00\x01\xa8;admin:1`,  
因为顺序的关系, 这将覆盖之前的值, 从而满足条件. 脚本如下  
一开始没有国内的服务器, 写完下午睡了一觉起来才跑完 233
    import remotecli # https://github.com/rmb122/remoteCLI
    import hashpumpy
    from binascii import hexlify, unhexlify
    import copy
    from tqdm import tqdm
    def padding(byte):
        padlen = 16 - len(byte) % 16
        byte += bytearray([padlen] * padlen)
        return byte
    def addIvLastByte(iv, currIndex, midval):
        target = 16 + 1 - currIndex
        for i in range(currIndex, 16):
            iv[i] = midval[i] ^ target
        return iv
    def xor(a, b):
        result = []
        for i in range(len(a)):
            result.append(a[i] ^ b[i])
        result = bytearray(result)
        return result
    cli = remotecli.CLI()
    cli.connect('207.148.68.109', 20000)
    cli.sendLine('abcde')
    cli.sendLine('abcde')
    hv_hex_len = 40
    iv_len = 16
    orgCookie = 'admin:0;username:abcde;password:abcde'
    cookie = cli.recvLinesUntilHave('Input your cookie:')[-2]
    print(cookie)
    hv_hex = cookie[-hv_hex_len:]
    iv = cookie[:iv_len]
    cookieEnc = cookie[iv_len: - hv_hex_len]
    fakeHash, fakeCookie = hashpumpy.hashpump(hv_hex, orgCookie, ';admin:1', iv_len)
    print(fakeCookie)
    print(fakeHash)
    fakeHash = bytearray(unhexlify(fakeHash))
    fakeCookie = padding(fakeCookie)
    assert len(fakeCookie) == 64
    dummy = bytearray([0 for i in range(len(fakeCookie) + 16)]) # iv + cookie
    for pos in range(64 + 16, 16, -iv_len):
        curr = dummy[pos - iv_len:pos]
        iv = bytearray([0 for i in range(iv_len)])
        midval = bytearray([0 for i in range(iv_len)])
        for currIndex in range(0, iv_len)[::-1]:
            for i in tqdm(range(0, 256)):
                iv[currIndex] = i
                cli.sendLine(hexlify(iv + curr + fakeHash))
                res = cli.recvline()
                #print(res)
                cli.recvline()
                if "Invalid padding" not in res:
                    midval[currIndex] = (16 - currIndex) ^ iv[currIndex]
                    if currIndex == 0:
                        tmp = xor(midval, fakeCookie[pos-iv_len*2:pos-iv_len])
                        for tmpPos in range(0, 16):
                            dummy[pos-iv_len*2 + tmpPos] = tmp[tmpPos]
                    iv = addIvLastByte(iv, currIndex, midval)
                    break
    cli.sendLine(hexlify(dummy + fakeHash))
    cli.console()
## baby_aes
这题比较有意思, 操作还是比较硬核的, 主要逻辑
    K = b"\x01\x23\x45\x67\x89\xab\xcd\xef\xfe\xdc\xba\x98\x76\x54\x32\x10"
        Ke = init(K)
        backend = default_backend()
        key = os.urandom(16)
        iv = encrypt(key, Ke)
        cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=backend)
        decryptor = cipher.decryptor()
        try:
            print("Input a hexstr to decrypt:")
            data = sys.stdin.readline().strip()
            ciphertext = binascii.unhexlify(data)
            plaintext = decryptor.update(ciphertext) + decryptor.finalize()
            print("Decrypted result:")
            print(binascii.hexlify(plaintext).decode())
        except Exception as e:
            pass
        with open("flag", 'rb') as f:
            flag = f.read()
            padder = padding.PKCS7(128).padder()
            flag_padded = padder.update(flag) + padder.finalize()
            encryptor = cipher.encryptor()