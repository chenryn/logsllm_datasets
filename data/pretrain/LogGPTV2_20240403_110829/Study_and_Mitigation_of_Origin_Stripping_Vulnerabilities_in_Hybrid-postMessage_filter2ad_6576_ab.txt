fold. First, we conduct the ﬁrst systematic study on hybrid
postMessage and identify the novel security issue “OSV”.
Second, to evaluate the prevalence and presence of hybrid
postMessage and OSV in Android hybrid apps, we design
a lightweight detection tool, called OSV-Hunter, that can
help developers and analysts identify hybrid postMessage and
discover potential OSVs. Different from existing detection tools
[10], [14], which fall short of ﬁlling the web-mobile gap and
tracking origins, OSV-Hunter automatically discovers message
senders and receivers, and analyzes the semantics of the link
between them.
Third, we evaluate OSV-Hunter using a set of popular apps.
We found 74 apps implemented hybrid postMessage, and
all these apps suffered from OSV, which may be exploited
by adversaries to perform denial of service (DoS),
local
critical hardware device access (such as real-time microphone
monitoring), data race, internal data manipulation, and so on.
Several popular frameworks and libraries suffer from OSV, such
as Facebook React Native and Google cloud print. Several high-
proﬁle apps are also impacted, such as Adobe Reader and WPS
ofﬁce. In addition to the Android platform, OSV also impacts
other platforms (like iOS), since the hybrid postMessage APIs
of vulnerable frameworks (such as Facebook React Native) are
also available in these platforms.
We have reported all our ﬁndings to the Android security
team, and the relevant framework, library, or app developers.
We are actively helping them ﬁx the discovered OSV problem.
The Facebook security team has conﬁrmed our ﬁndings in the
React Native development framework, and they also admitted
that it was difﬁcult to eliminate the security problem caused by
OSV in their current implementation. Instead, they explicitly
added a security warning in their development documentation
[15].
Lastly, motivated by the above difﬁculty faced by developers
to eliminate OSV, we design and implement a set of new hybrid
postMessage APIs in the newest WebView, called OSV-Free.
Our evaluation shows that OSV-Free is secure and fast, and it
is generic and resilient to the notorious Android fragmentation
problem. We also demonstrate that OSV-Free is easy to use,
by applying OSV-Free to harden the complex “Facebook React
Native” framework. OSV-Free is open source, and its source
code and more implementation and evaluation details are
available online: http://success.cse.tamu.edu/lab/osv-free.php.
Paper Organization. The rest of the paper is organized as
follows. We ﬁrst introduce the necessary background and the
threat model and deﬁne the OSV problem (Section II). Next, we
present the design and implementation details of our detection
tool OSV-Hunter (Section III). Then, we show our study results
about hybrid postMessage and OSV (Section IV). After that,
we present the design and evaluation of our mitigation solution
OSV-Free (Section V). Last, we present related work (Section
VI) and discussion (Section VII), and conclude in Section VIII.
II. BACKGROUND AND PROBLEM STATEMENT
A. Background: postMessage and WebView
1 // Send a message
2 window.postMessage(m, t)
3
4 // Enable the first message handler
5 function message_handler(e) { ... }
6 window.addEventListener("message", message_handler, false
7
8 // Enable the second message handler
9 onmessage = function (e) { ... }
)
Listing 2: Usage of postMessage
postMessage. postMessage is frequently used to exchange data
between different origins in HTML5-enabled web applications.
Listing 2 presents the basic usage of postMessage. In Line 2,
window.postMessage() is called to send the message content
m to the target origin t. From Line 4 to Line 9, two message
handlers are enabled in two different manners : 1) calling the
method addEventListener() to register the message handler
‘message_handler()’ (Line 6); 2) or rewriting the global object
onmessage to enable an anonymous message handler (Line
9). Please note that when a message arrives, both these two
message handlers will be called to handle it.
744
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:39:50 UTC from IEEE Xplore.  Restrictions apply. 
When a message handler is called, the parameter e carries
all required information, such as the message content ‘e.data’,
the message source origin ‘e.origin’, and the message sender’s
window reference ‘e.source’. Please note that ‘e.source’ may
also be used to identify the message sender. However, in this
paper, we mainly focus on ‘e.origin’.
The message handler (receiver) is responsible for validating
the source origin to ensure the message is from a trusted
origin. This requirement is deferred to the message handler
implementation and not enforced by the OS or framework. The
absence of such validation will cause the client-side validation
vulnerability (i.e., CSV), which is well studied by existing
work [6]–[8].
WebView. WebView is an embedded UI component used to
render web pages and run JavaScript code within mobile apps.
For this purpose, WebView provides APIs to directly load
web content or run JavaScript in WebView, such as loadUrl().
Please note that if the API parameter is JavaScript code, the
code will be executed in the main web frame.
WebView is powerful and customizable. WebView can
specify event handlers to handle web events that occur in
WebView. For example, shouldInterceptRequest() can handle
the content loading event.
The Ofﬁcial Hybrid postMessage APIs
in WebView.
In Android 6.0, cross-document APIs (such as “Web-
View.postWebMessage()”) and channel messaging APIs (such
as “WebView.createWebMessageChannel()”) [16] are added.
However, both suffer from the Android fragmentation problem
[5]. Based on the new Android version distribution data [17]
(Nov. 2017), almost 42% of Android devices do not support
these ofﬁcial APIs. Furthermore, compared with postWebMes-
sage(), createWebMessageChannel() can allow bidirectional
communication. However, in our empirical study, we found
channel messaging was heavy, and rarely implemented and
used in hybrid postMessage.
JavaScript Bridge. WebView also allows JavaScript Bridge,
which provides a channel
linking web code with na-
tive code. More speciﬁcally, apps can run the API
“addJavascriptInterface(O, N)” to import a Java object O to
the JavaScript context. Then, O can be directly accessed by
JavaScript code using its name N.
However, WebView does not provide any access control on
JavaScript Bridge. Any JavaScript code loaded in WebView
can easily access it without any limitations. This has been well
studied by existing work [4] [9] [10].
Several defense solutions [4] [9] have been proposed to
protect JavaScript Bridge, and cure its intrinsic weakness.
However, as discussed in Section I, if JavaScript Bridge is
applied in the hybrid postMessage implementation, existing
defense solutions cannot defend against attacks.
B. Threat Model
In this paper, we focus on hybrid-postMessage enabled
Android hybrid apps. We assume the native code is benign,
and the content loaded in WebView may be untrusted. We
consider the following two scenarios.
• Web Attacks: Adversaries control several domains and web
servers. When these servers are accessed, adversaries can
inject malicious code. However, adversaries do not have
capabilities to monitor the communication between apps and
other domains or servers that do not belong to adversaries.
Generally, we assume the content from the ﬁrst-party server
is trusted, while content from third-party servers may be
malicious or harmful.
• Network Attacks: Adversaries can hijack unsafe connections
(such as communication over HTTP) through man-in-the-
middle attacks (MITM). These are common in some practical
scenarios such as public WiFi access.
C. The OSV Problem Deﬁnition
We deﬁne OSV based on the possible violation on postMes-
sage’s security model (or design guideline) [1], which is deﬁned
as follows. We assume SF and RF are the frames which a
message sender and its corresponding message receiver belong
to respectively. The security model can be deﬁned using the
following two rules.
• Rule I: When a message is being sent, its target origin
Torigin should satisfy that 1) Torigin is speciﬁed or implied;
2) Torigin = RForigin or Torigin =“*”.
• Rule II: When a message is being received, its source origin
Sorigin should meet that 1) Sorigin is deﬁned; 2) Sorigin =
SForigin; 3) Sorigin is unique for SF.
Hence, if the above two rules are not followed in hybrid
postMessage, OSV may exist. For convenience, we deﬁne four
sub-vulnerabilities (i.e., V1 to V4) based on the violation of the
above two rules in two directions, as shown Table I.
Direction
Violated Rule
Native → Web
Rule II
Rule I
Web → Native
Rule II
Rule I
Sub-Vulnerability Type
V4
Table I: Deﬁnitions of Four Sub-Types of OSV
V2
V1
V3
tĞď
EĂƚŝǀĞ
DĂůůŽƌǇ
ůŝĐĞ
Žď
Figure 5: Attacks On V2
The four OSV sub-vulnerabilities disclose more attack
patterns than those discussed in Section I. For example, consider
a scenario in Figure 5. Alice and Mallory are web frames, while
Bob is a native frame. Bob sends messages to Alice through
hybrid postMessage. Due to V2, the source origin of the native
frame may not be provided or not unique. Mallory may be able
to forge a message with the same source origin, by creating a
nested controllable iframe that has the same origin, and then
sending a crafted message from the new iframe to Alice using
the typical web postMessage. When Alice receives the message,
Alice notices that the source origin is the same as the native
frame’s. As a result, Alice treats Mallory as Bob and allows
Mallory to access the internal functionalities. If Alice carries
critical functionalities or data, serious consequences may be
caused.
745
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:39:50 UTC from IEEE Xplore.  Restrictions apply. 
To prevent V2, it is important to ensure the uniqueness of
the source origin of the native frame. However, even if the
source origin is unique, it is hard to manage and may still
introduce security issues. For example, to receive messages
from the native frame, Alice may need to relax its validation
logic for all incoming messages, which may cause CSV. In
our evaluation (Section IV), we show such problems exist in
real-world apps.
III. OSV-HUNTER DESIGN AND IMPLEMENTATION
A. Design observations
OSV-Hunter is designed to identify apps with actual hybrid
postMessage implementations, and vet such implementations
against OSV in a lightweight and generic way, based on several
key insights and observations:
• The JavaScript method window.postMessage()
should
be a message sender of hybrid postMessage: “win-
dow.postMessage()” may be 1) directly called in web frames,
or 2) indirectly invoked in the native frame through WebView
JavaScript code loading APIs (such as WebView.loadUrl()).
For example, the following Java code sends native data (i.e.,
content) from the native frame to the main web frame:
WebView.loadUrl("javascript:window.postMessage(’" +
content + "’, ’*’)").
In both cases above, “window.postMessage()” should be a
communication launcher (message sender). To discover its
corresponding message receiver, its parameter, especially
the message content c, should be tracked. If c appears in
a function f of the opposite frame, f is likely a message
receiver.
To implement it, a special and unique string ID, such as
“PM_Case1_” for the ﬁrst case and “PM_-
Case2_” for the second case, is injected
into c and tracked. More speciﬁcally, in the native frame, all
native function invocations should be checked to verify if
their parameters contain ID. If ID is found, there should be
a link between window.postMessage() and the ﬁrstly found
native function. For the second case, all message handlers
of web frames should be monitored. Once ID appears in the
message handlers of a web frame, there should also be a link
from the native function that executes window.postMessage()
through WebView.loadUrl() to the message handlers of the
web frame.
• A message handler of a web frame may be a message
proxy, or receiver: It is possible for a message handler to
1) receive messages from the native frame (i.e., N→W ), or
2) forward messages received from other web frames to the
native frame (i.e., W→N). The above possibilities can be
veriﬁed respectively. For the ﬁrst possibility, the value of the
parameter of the message handler should be monitored to
check if ID exists. For the second possibility, similar with
how window.postMessage() is handled, the received message
content of the message handler should be tracked. For this
purpose, if no ID exists in the received message content,
a new ID, such as “MH_ForwadingMessage_”, should be injected into the received message
content. When the message content is forwarded, if the ID
appears in a native function in the native frame, the native
function is likely a message receiver. Hence, there may be a
link between the message handler of the web frame and the
native function of the native frame.
• The APIs (such as web-mobile bridges) that provide cross-
platform functionalities are likely utilized to implement hybrid
postMessage: For example, apps may execute JavaScript code
to trigger a message event using the JavaScript execution
APIs (like WebView.loadUrl()). Hence, the parameters of
these APIs should be carefully handled. Additionally, Web-
View.postWebMessage() should also be monitored, since it
can be used for N→W messaging.
B. Design Details
Guided by these observations, we designed two main phases
in OSV-Hunter containing a number of sub-modules, as shown
in Figure 6. In Phase#1, “hybrid postMessage Identiﬁcation”
ﬁlls the semantic gap between the native and web frames,
and identiﬁes the implementation of hybrid postMessage. In
Phase#2, “Message Origin Analysis” collects all delivered
messages between message senders and receivers, and performs
origin analysis to determine the existence of OSV.
More speciﬁcally, given a hybrid app, a fuzzing module
“Tester” is ﬁrst started to 1) trigger as many WebView compo-
nents as possible, and 2) attempt to trigger message senders of
both the native and web frames. When a WebView component
appears, the loaded HTML/JavaScript code is analyzed and in-
strumented to discover potential message senders and receivers
in web frames. It is achieved by the modules “HTML/JS
Analysis” and “HTML/JS Instrumentation”. To monitor all