      datastore_v3:60.0,
      datastore_v4:60.0,
      file:30.0,
      images:30.0,
      logservice:60.0,
      modules:60.0,
      rdbms:60.0,
      remote_socket:60.0,
      search:10.0,
      stubby:10.0
我很快注意到了一些之前用过的API，比如“logservice”（用于写日志），所以我推断这些都是可以通过内部HTTP端点使用的API。
此外，我还注意到了“stubby”，之前在某些Google产品的错误消息中见过这个消息（当遇到bug时），并且在[SRE](https://landing.google.com/sre/book/chapters/production-environment.html
"SRE")中也读过这方面的东西，所以我判断这是一个RPC的基础结构，并且可能是“[appengine.google.com](http://appengine.google.com/
"appengine.google.com")”执行内部操作的一种方式。
太棒了，现在终于知道一个内部API的名称了，但是，它提供了哪些方法呢？
我用C++ gRPC客户端尝试了几个方法名，但是它们都返回了一个错误，说这些方法并不存在，所以，我开始借助Google进行搜索。
后来，我发现了一篇写于2010年的[文章](https://groups.google.com/d/msg/techos/6koJkAuuVVk/6QJNbjRIy40J
"文章")，它指出：
    The API call stubby.Send() took too long to respond and was cancelled.
所以，我开始尝试“Send”方法，但系统指出该方法并不存在。
我相信该方法肯定是存在的，这里的错误消息只是为了隐藏了它存在的事实，同时，现在我仍然无法访问它。
为此，我试着通过寻找访问确实“不存在”的方法时返回的错误消息（[示例](http://save-the-expanse.appspot.com/grpc?api=app_identity_service&method=SaveTheExpanse
"示例")）与为了掩盖真实存在的方法而返回的错误消息（[示例](http://save-the-expanse.appspot.com/grpc?api=stubby&method=Send
"示例")）之间的区别来验证上面的判断，并且发现：当从我的gRPC客户端中发送一个未设置"[apphosting.APIRequest.pb](https://github.com/ezequielpereira/GAE-RCE/blob/c58ccd52d9204a0e5b8c7cf9b82b8e6e06d524a8/protos/apphosting/base/runtime.proto#L176
"apphosting.APIRequest.pb")"字段（它被标记为可选的，但我总是至少将它设置为一个空字符串或"{}"）的请求的时候，系统会为并不存在的方法（[示例](http://save-the-expanse.appspot.com/grpc?api=app_identity_service&method=SaveTheExpanse&setPb=0
"示例")）返回一则“not-exist”错误消息，而对于一个实际存在的方法（[示例](http://save-the-expanse.appspot.com/grpc?api=stubby&method=Send&setPb=0
"示例")），系统则会返回一则“incomplete request”错误消息。通过这种方式，我判断出“stubby.Send”方法确实是存在的。
现在的问题是，如何才能访问它呢？
我不知道在生产性的GAE[部署环境](https://en.wikipedia.org/wiki/Deployment_environment
"部署环境")中访问它的方式，但我知道，利用某个漏洞（通常，普通的Google用户无法访问非生产性的部署环境），我可以访问staging（[staging-appengine.sandbox.googleapis.com](http://staging-appengine.sandbox.googleapis.com/ "staging-appengine.sandbox.googleapis.com")）和测试（[test-appengine.sandbox](http://test-appengine.sandbox.googleapis.com/ "test-appengine.sandbox")）性的GAE部署环境。
对这两种部署环境进行一番研究之后，我找到了调用在其中运行的应用程序的方法：
1.上传一个缩放类型为手动缩放的版本（否则无法正常运行，并返回403 Forbidden）
2.向“www.appspot.com”发送请求，并将Host头部改为“.prom-.sandbox.google.com”
如果您的应用在“save-the-expanse.appspot.com”上运行，则应该用“save-the-expanse”替换“”；如果您要将应用上传到staging
GAE环境，则应该用“qa”代替“”；如果要把该应用上传到测试GAE环境的话，则应该将""换为
"nightly"。
例如：我是在“the-expanse.prom-nightly.sandbox.google.com”上进行的测试（没有“保存”，因为当时[The
Expanse](https://www.imdb.com/title/tt3230854/ "The
Expanse")还没有被[撤销](http://www.newsweek.com/expanse-save-amazon-syfy-season-4-renew-fans-934620 "撤销")）。
**漏洞详情**
* * *
上传好这个应用程序后，我很快就发现，在非生产（staging/测试）性的GAE环境中，我竟然可以访问“stubby.Send”方法！
经过一番快速测试（主要是阅读错误消息并猜测如何解决这些问题）后，我发现了进行简单的Stubby调用的方式：
1.使用以下JSON PB消息调用“stubby.GetStubId”方法：
    {
      "host": ""
    }
将''设置为要调用的方法所在的位置（例如，“google.com:80”，“pantheon.corp.google.com:80”，“blade：monarch-cloud_prod-streamz”）。
“blade：”似乎就像Google使用的内部DNS系统，例如，“blade：cloudresourcemanager-project”在其内部就是“cloudresourcemanager.googleapis.com”（有点像“blade：monarch-cloud_prod-streamz”，但是没有外部的对应物）。
2.前一个请求将返回一个JSON PB消息，其中“stub_id”是其唯一的字段，用于存储相应的值。
3.通过以下JSON PB消息调用“stubby.Send”方法：
    {
      "stubby_method": "/.",
      "stubby_request": "",
      "stub_id": ""
    }
为了搞清楚“stubby_method”的可能取值，可以使用空的“stubby_request”将其设置为“/ServerStatus.GetServices”，这样就会返回一个“rpc.ServiceList”，从而列出目标系统支持的所有服务。
是PB消息字节数据（采用二进制线路层格式）。
4.如果成功的话，该调用将返回以“stubby_response”作为其唯一字段的JSON
PB消息，其中存放响应PB消息的相关字节（采用二进制线路层格式）。
此后，我进行了一些测试，并没有发现会导致安全隐患的Stubby调用。
不过，我仍然向谷歌汇报了这个问题，它们将这个问题的优先级定为P1。
在报告这个问题之后，我又重新进行了回顾，试图找到可以成功用于攻击的一些变体，我注意到，除了“stubby”之外，通过Java启动程序二进制文件中得到的参数中，还有一个名为“app_config_service”的参数，它实际上也是一个隐式的API。
通过查看之前得到的PB定义，并没有发现这个隐式的API的方法，此外，也没有在Google搜索中找到它们，但后来从“apphosting/base/quotas.proto”中发现了相关的方法。
例如，其中提到了“[APP_CONFIG_SERVICE_GET_APP_CONFIG](https://github.com/ezequielpereira/GAE-RCE/blob/c58ccd52d9204a0e5b8c7cf9b82b8e6e06d524a8/protos/apphosting/base/quotas.proto#L417
"APP_CONFIG_SERVICE_GET_APP_CONFIG")”，并且通过一些测试发现“app_config_service.GetAppConfig”的确是一个隐式的方法。
“app_config_service”提供了多个方法，但我最感兴趣的方法是“app_config_service.ConfigApp”和“app_config_service.SetAdminConfig”，因为它们可用来完成内部设置，例如设置电子邮件发件人、应用程序的服务帐户ID、忽略配额限制，甚至可以将自己的应用程序设为“[SuperApp](https://github.com/ezequielpereira/GAE-RCE/blob/c58ccd52d9204a0e5b8c7cf9b82b8e6e06d524a8/protos/apphosting/base/appmaster.proto#L106
"SuperApp")”（我不知道这意味着什么，但听起来很牛掰），并赋予其“[FILE_GOOGLE3_ACCESS](https://github.com/ezequielpereira/GAE-RCE/blob/c58ccd52d9204a0e5b8c7cf9b82b8e6e06d524a8/protos/apphosting/base/appmaster.proto#L204
"FILE_GOOGLE3_ACCESS")”权限（我认为gooogle3是Piper的一部分，存放与gooogle API和服务相关的文件）。
“app_config_service.SetAdminConfig”方法使用“[apphosting.SetAdminConfigRequest](https://github.com/ezequielpereira/GAE-RCE/blob/c58ccd52d9204a0e5b8c7cf9b82b8e6e06d524a8/protos/apphosting/base/appmaster.proto#L657
"apphosting.SetAdminConfigRequest")”作为其请求消息，“app_config_service.ConfigApp”方法使用“[apphosting.GlobalConfig](https://github.com/ezequielpereira/GAE-RCE/blob/c58ccd52d9204a0e5b8c7cf9b82b8e6e06d524a8/protos/apphosting/base/appmaster.proto#L85
"apphosting.GlobalConfig")”作为其请求消息。
通过"[apphosting/base/quotas.proto](https://github.com/ezequielpereira/GAE-RCE/blob/c58ccd52d9204a0e5b8c7cf9b82b8e6e06d524a8/protos/apphosting/base/quotas.proto
"apphosting/base/quotas.proto")"，我还发现了其他一些API/方法，如“[basement.GaiaLookupByUserEmail](https://github.com/ezequielpereira/GAE-RCE/blob/c58ccd52d9204a0e5b8c7cf9b82b8e6e06d524a8/protos/apphosting/base/quotas.proto#L651
"basement.GaiaLookupByUserEmail")”，等等。
之后，我向Google提交了这些新发现，他们提高了处理这些问题的优先级，并回复道：
    请停止进一步的探索，因为您似乎可以轻松地使用这些内部API来破坏一些东西。
同时，这个安全问题被抄送给了几名员工:
几天后，访问非生产性GAE API和环境时将被阻止，并返回一个错误页面（状态码为“429 Too Many Requests”）。
您仍然可以在“[staging-appengine.sandbox.googleapis.com](http://staging-appengine.sandbox.googleapis.com/ "staging-appengine.sandbox.googleapis.com")”和“[test-appengine.sandbox.googleapis.com](http://test-appengine.sandbox.googleapis.com/ "test-appengine.sandbox.googleapis.com")”中看到如下所示的消息。
后来，我收到以下信件：
我得到了36，337美元的奖励！
直到那时我才意识到，这个安全问题被定性为远程代码执行漏洞（最危险的安全漏洞），这真是太让人惊喜了。
我向其中一位Google员工咨询了奖励金额问题，得到的回复是，部分奖金是为RCE漏洞支付的（请阅读[SRE](https://landing.google.com/sre/
"SRE")，[RCE漏洞奖金为31,337美元](https://www.google.com/about/appsecurity/reward-program/index.html#rewards "RCE漏洞奖金为31,337美元")），而额外的$5k则是为另外一个安全漏洞提供的奖金。
**时间线**
* * *
2018年2月：发现安全问题
2018年2月25日：初次报告（仅限“stubby”API）
2018年3月4日、5日：发现并报告了“app_config_service”API
2018年3月6日至13日：访问非生产性GAE环境时会被429错误页面所阻止
2018年3月13日：奖励36,337美元
2018年5月16日：确认并修复漏洞
**作者联系方式：**
* * *
Email: PI:EMAIL