    [,
    ,
    , 
    , 
    ,
    ]
    >>> hex(proj.loader.max_addr)
    '0xa07fff'
    >>> hex(proj.loader.min_addr)
    '0x400000'
​ 还可以检查一些程序是否开启保护方式
    >>> proj.loader.main_object.execstack
    False
    >>> proj.loader.main_object.pic
    False
####  2.2.2 第二步
     # Step 2: determine its CPU architecture, ideally falling back to CLE's guess
            if isinstance(arch, str):
                self.arch = archinfo.arch_from_id(arch)  # may raise ArchError, let the user see this
            elif isinstance(arch, archinfo.Arch):
                self.arch = arch # type: archinfo.Arch
            elif arch is None:
                self.arch = self.loader.main_object.arch
            else:
                raise ValueError("Invalid arch specification.")
​ 这里就是判断二进制文件的 CPU 架构，如果是自己指定，则从 archinfo 里匹配，否则从 `self.loader` 获取
> archinfo是一个Python的第三方库用来判断二进制文件的目标架构
####  2.2.3 第三步
     # Step 3: Set some defaults and set the public and private properties
            if not default_analysis_mode:
                default_analysis_mode = 'symbolic'
            if not ignore_functions:
                ignore_functions = []
            if isinstance(exclude_sim_procedures_func, types.LambdaType):
                l.warning("Passing a lambda type as the exclude_sim_procedures_func argument to "
                          "Project causes the resulting object to be un-serializable.")
            self._sim_procedures = {}
            self.concrete_target = concrete_target
            # It doesn't make any sense to have auto_load_libs
            # if you have the concrete target, let's warn the user about this.
            if self.concrete_target and load_options.get('auto_load_libs', None):
                l.critical("Incompatible options selected for this project, please disable auto_load_libs if "
                           "you want to use a concrete target.")
                raise Exception("Incompatible options for the project")
            if self.concrete_target and self.arch.name not in ['X86', 'AMD64', 'ARMHF']:
                l.critical("Concrete execution does not support yet the selected architecture. Aborting.")
                raise Exception("Incompatible options for the project")
            self._default_analysis_mode = default_analysis_mode
            self._exclude_sim_procedures_func = exclude_sim_procedures_func
            self._exclude_sim_procedures_list = exclude_sim_procedures_list
            self.use_sim_procedures = use_sim_procedures
            self._ignore_functions = ignore_functions
            self._support_selfmodifying_code = support_selfmodifying_code
            self._translation_cache = translation_cache
            self._executing = False # this is a flag for the convenience API, exec() and terminate_execution() below
            if self._support_selfmodifying_code:
                if self._translation_cache is True:
                    self._translation_cache = False
                    l.warning("Disabling IRSB translation cache because support for self-modifying code is enabled.")
            self.entry = self.loader.main_object.entry
            self.storage = defaultdict(list)
            self.store_function = store_function or self._store
            self.load_function = load_function or self._load
​ 这里就是对相关的默认、公共和私有属性进行设置，我们可以首先发现对默认使用的分析模式和需要忽略替换的函数列表
    if not default_analysis_mode:
        default_analysis_mode = 'symbolic'
    if not ignore_functions:
        ignore_functions = []
​ 之后的内容就是在对属性做检查，和对未基于特定值的参数使用缺省值
####  2.2.4 第四步
    # Step 4: Set up the project's hubs
            # Step 4.1 Factory
            self.factory = AngrObjectFactory(self, default_engine=engine)
            # Step 4.2: Analyses
            self._analyses_preset = analyses_preset
            self.analyses = None
            self._initialize_analyses_hub()
            # Step 4.3: ...etc
            self.kb = KnowledgeBase(self, name="global")
​
这里第四步主要是设置Project的各种插件，我们之前说到过CLE模块将自身无法执行的操作转移给angr的其它组件，这里就是对于CLE分析的一些组件的初始化
​
第一步设置的就是angr中最重要的Factory组件，factory有几个方便的构造函数，用于经常使用的常见对象，具体的情况可以查看后面的简介。这一步从参数、loader、arch
或者默认值中获取预设的引擎，创建了一个`angr.EngineHub` 类实例
​ 第二步主要是从参数或者默认值中获取预设的分析。创建了一个 `angr.AnalysesHub` 类实例，angr
内置了一些分析方法，用于提取程序信息，接口位于 `proj.analyses.` 中
    >>> proj.analyses.
    proj.analyses.BackwardSlice(              proj.analyses.Decompiler(                 proj.analyses.VFG(
    proj.analyses.BasePointerSaveSimplifier(  proj.analyses.DefUseAnalysis(             proj.analyses.VSA_DDG(
    proj.analyses.BinDiff(                    proj.analyses.Disassembly(               proj.analyses.VariableRecovery(
    proj.analyses.BinaryOptimizer(            proj.analyses.DominanceFrontier(         proj.analyses.VariableRecoveryFast(       .....
​ 这个初始化函数的原型是
    def _initialize_analyses_hub(self):
        """
        Initializes self.analyses using a given preset.
        """
        self.analyses = AnalysesHub(self)
        self.analyses.use_plugin_preset(self._analyses_preset if self._analyses_preset is not None else 'default')
​ 而AnalysesHub的函数原型在这里，主要是提供分析方法，用于提取程序信息
    class AnalysesHub(PluginVendor):
        """
        This class contains functions for all the registered and runnable analyses,
        """
        def __init__(self, project):
            super(AnalysesHub, self).__init__()
            self.project = project
        @deprecated()
        def reload_analyses(self): # pylint: disable=no-self-use
            return
        def _init_plugin(self, plugin_cls):
            return AnalysisFactory(self.project, plugin_cls)
        def __getstate__(self):
            s = super(AnalysesHub, self).__getstate__()
            return (s, self.project)
        def __setstate__(self, sd):
            s, self.project = sd
            super(AnalysesHub, self).__setstate__(s)
​ 之后就是在创建其它一些插件的类实例
####  2.2.5 第五步
    # Step 5: determine the guest OS
            if isinstance(simos, type) and issubclass(simos, SimOS):
                self.simos = simos(self) #pylint:disable=invalid-name
            elif isinstance(simos, str):
                self.simos = os_mapping[simos](self)
            elif simos is None:
                self.simos = os_mapping[self.loader.main_object.os](self)
            else:
                raise ValueError("Invalid OS specification or non-matching architecture.")
            self.is_java_project = isinstance(self.arch, ArchSoot)
            self.is_java_jni_project = isinstance(self.arch, ArchSoot) and self.simos.is_javavm_with_jni_support
​ 这一步就是确定 guest OS。创建了一个 `angr.SimOS` 或者其子类实例
####  2.2.6 第六步
    # Step 6: Register simprocedures as appropriate for library functions
            if isinstance(self.arch, ArchSoot) and self.simos.is_javavm_with_jni_support:
                # If we execute a Java archive that includes native JNI libraries,
                # we need to use the arch of the native simos for all (native) sim
                # procedures.
                sim_proc_arch = self.simos.native_arch
            else:
                sim_proc_arch = self.arch
            for obj in self.loader.initial_load_objects:
                self._register_object(obj, sim_proc_arch)
​ 根据库函数适当地注册 simprocedures。调用了内部函数
`_register_object`，这个函数将尽可能的将程序中的库函数与angr库中的实现的符号摘要替换掉，
​ 即设置 Hooking，这些angr实现的函数摘要高效地模拟库函数对状态的影响
  * 第一步就是获取angr已经实现的符号摘要的库函数
  * 然后就是分析我们的程序中的导入函数 
    * 如果我们之前传入了忽略的列表函数，将其标记不替换存档
    * 如果已将其列入黑名单，就算没设置忽略，angr也不对其进行处理
    * 如果与我们的simprocedure匹配，angr将替换它
  * 然后快速过滤不在乎的符号
  * 接下来就是替换符号的检查和替换过程
    def _register_object(self, obj, sim_proc_arch):
            """
            This scans through an objects imports and hooks them with simprocedures from our library whenever possible
            """
            # Step 1: get the set of libraries we are allowed to use to resolve unresolved symbols
            missing_libs = []
            for lib_name in self.loader.missing_dependencies:
                try:
                    missing_libs.append(SIM_LIBRARIES[lib_name])
                except KeyError:
                    l.info("There are no simprocedures for missing library %s :(", lib_name)
            # additionally provide libraries we _have_ loaded as a fallback fallback
            # this helps in the case that e.g. CLE picked up a linux arm libc to satisfy an android arm binary
            for lib in self.loader.all_objects:
                if lib.provides in SIM_LIBRARIES:
                    simlib = SIM_LIBRARIES[lib.provides]
                    if simlib not in missing_libs:
                        missing_libs.append(simlib)
            # Step 2: Categorize every "import" symbol in each object.
            # If it's IGNORED, mark it for stubbing
            # If it's blacklisted, don't process it
            # If it matches a simprocedure we have, replace it
            for reloc in obj.imports.values():
                # Step 2.1: Quick filter on symbols we really don't care about
                func = reloc.symbol
                if func is None:
                    continue
                if not func.is_function and func.type != cle.backends.symbol.SymbolType.TYPE_NONE:
                    continue
                if func.resolvedby is None:
                    # I don't understand the binary which made me add this case. If you are debugging and see this comment,
                    # good luck.
                    # ref: https://github.com/angr/angr/issues/1782
                    # (I also don't know why the TYPE_NONE check in the previous clause is there but I can't find a ref for
                    # that. they are probably related.)
                    continue
                if not reloc.resolved:
                    # This is a hack, effectively to support Binary Ninja, which doesn't provide access to dependency
                    # library names. The backend creates the Relocation objects, but leaves them unresolved so that
                    # we can try to guess them here. Once the Binary Ninja API starts supplying the dependencies,
                    # The if/else, along with Project._guess_simprocedure() can be removed if it has no other utility,
                    # just leave behind the 'unresolved' debug statement from the else clause.
                    if reloc.owner.guess_simprocs:
                        l.debug("Looking for matching SimProcedure for unresolved %s from %s with hint %s",
                                func.name, reloc.owner, reloc.owner.guess_simprocs_hint)
                        self._guess_simprocedure(func, reloc.owner.guess_simprocs_hint)
                    else:
                        l.debug("Ignoring unresolved import '%s' from %s ...?", func.name, reloc.owner)
                    continue
                export = reloc.resolvedby
                if self.is_hooked(export.rebased_addr):
                    l.debug("Already hooked %s (%s)", export.name, export.owner)
                    continue
                # Step 2.2: If this function has been resolved by a static dependency,
                # check if we actually can and want to replace it with a SimProcedure.
                # We opt out of this step if it is blacklisted by ignore_functions, which
                # will cause it to be replaced by ReturnUnconstrained later.
                if export.owner is not self.loader._extern_object and \
                        export.name not in self._ignore_functions:
                    if self._check_user_blacklists(export.name):
                        continue
                    owner_name = export.owner.provides
                    if isinstance(self.loader.main_object, cle.backends.pe.PE):
                        owner_name = owner_name.lower()
                    if owner_name not in SIM_LIBRARIES:
                        continue
                    sim_lib = SIM_LIBRARIES[owner_name]
                    if not sim_lib.has_implementation(export.name):
                        continue
                    l.info("Using builtin SimProcedure for %s from %s", export.name, sim_lib.name)
                    self.hook_symbol(export.rebased_addr, sim_lib.get(export.name, sim_proc_arch))
                # Step 2.3: If 2.2 didn't work, check if the symbol wants to be resolved
                # by a library we already know something about. Resolve it appropriately.
                # Note that _check_user_blacklists also includes _ignore_functions.
                # An important consideration is that even if we're stubbing a function out,