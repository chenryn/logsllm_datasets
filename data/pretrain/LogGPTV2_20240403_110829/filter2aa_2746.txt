# Exploiting Digital Cameras

**Presenters:**
- Oren Isacson (oren@coresecurity.com)
- Alfredo Ortega (aortega@coresecurity.com)
- Exploit Writers Team, Core Security Technologies
- Date: August 1, 2010

## Introduction
This presentation will cover:
- Scripting Canon Powershot cameras.
- Reversing the embedded interpreter.
- Potential applications and security implications.

## Architecture of Powershot Cameras
- **Processor:** ARM946E-S based
- **Memory Protection Unit (MPU):** Used to identify memory regions.
- **Exception Handlers:** Utilized for debugging.
- **Storage:** SD Memory Card
- **Debugging Support:** Available
- **Operating System:** Proprietary (DryOS)

## Previous Work: CHDK
- **CHDK (Canon Hack Development Kit):** An unofficial firmware enhancement.
- **Features:**
  - Bootable from the SD card.
  - Loads as a firmware update but does not make permanent changes.
  - Requires the SD card to be locked to auto-load.
  - Generally safe, not a viable attack vector.
- **Usage:** We leveraged CHDK for firmware research.

## Image Fuzzing
- **Objective:** Determine if we can execute code by exploiting image parsers.
- **Observations:**
  - The camera crashes when processing certain malformed images.
  - We implemented an exception handler to analyze these crashes.
  - Exploits would be model-specific.

## Firmware Analysis
- **Resources:** CHDK provided IDA dumps of some Powershot cameras.
- **Interesting Strings:**
  - "Syntax Error", "yacc stack overflow", "input in flex scanner failed".
  - Indications of an embedded interpreter using Flex and Bison or Yacc.

## The Embedded Interpreter
- **Discovery:** We are not the first to find the interpreter, but there is no public documentation.
- **Behavior:**
  - Invalid scripts cause the camera to shut down.
  - No helpful error messages are provided.

## Running a Script
- **Script File:** `extend.m`
- **Requirements:**
  - `"for DC_scriptdisk"` must be in `script.req`.
  - `"SCRIPT"` at offset `0x1f0` on the SD card.
  - SD card can be FAT32, FAT16, or FAT12.
  - Script runs when the "Func. Set" key is pressed in playback mode.
  - Works even with an unlocked SD card.
- **Next Step:** Reverse-engineer the interpreter.

## Yacc/Lex
- **Parser Components:**
  - `yyparse()`: Calls the lexical analyzer `yylex()`.
  - `yylex()`: Tokenizes input using a table-based state machine.
  - Over 220 states and 50 different tokens.

## Reversing `yylex()`
- **Flex State Machine:**
  - Emulated in x86 to find the necessary tables.
  - Tables include `yy_accept`, `yy_base`, `yy_nxt`, `yy_chk`, `yy_ec`, and `yy_def`.

## Dumping Tokens
- **Process:**
  - Locate all tables and rebuild the Flex parser.
  - Brute force through input combinations to exit on "unknown" tokens.

## Language Syntax
- **Identified Tokens:**
  - Arithmetic operators: `+`, `-`, `*`, `/`, `^`, `>>`, `=`
  - Control structures: `if`, `sub`, `function`, `do`, `for`
  - Memory references: `%%MEMORY_L`, `%%MEMORY_M`, `%%MEMORY_S`

## Emulating the Parser
- **Tools:**
  - **QEMU:** For ARM emulation.
  - **GNU Binutils:** For working with memory images.
  - **Exception Handler:** For dumping camera memory.
  - **CHDK:** For loading the exception handler and writing to the SD card.
  - **GDB:** For setting initial CPU state and monitoring.

## Dumping Memory
- **Challenges:**
  - QEMU cannot fully emulate the camera.
  - Use a memory dump at the parser entry point.
  - Force a memory address exception to trigger the dump.

## Loading the Emulator
- **Steps:**
  - Convert memory dump to ELF format using Binutils.
  - Use QEMU's internal GDB server to set initial register state.
  - Fix invalid variables to prevent exceptions inside the emulator.

## Running the Emulator
- **Constraints:**
  - Disable system calls.
  - Replace `YY_INPUT` macro with GDB Python integration.
  - Continue calling `YY_INPUT` until it returns 0 or an error occurs.

## Emulating Scripts
- **Sample Runs:**
  - `Dim a as Long` → Error
  - `a = 1` → No Errors
  - `Dim a = 1` → No Errors
  - `sub test()` → Error
  - `private sub test()` → No Errors

## Hello World Example
- **Entry Point:**
  - Function must be named `Initialize`.
- **Example Script:**
  ```basic
  private sub sayHello()
      a = LCDMsg_Create()
      LCDMsg_SetStr(a, "Hello World!")
  end sub

  private sub Initialize()
      UI.CreatePublic()
      sayHello()
  end sub
  ```

## Language Documentation
- **Findings:**
  - Over 500 functions controlling various aspects of the camera.
  - Partially documented in `Exploiting_Digital_Cameras_IOBasic.pdf`.

## Launching Exploits
- **Examples:**
  - Auto-run exploits against the SD card (e.g., MS08-038, CVE-2010-2568).
  - Activating the microphone.
  - Outputting data via Exif tags.

## Countermeasures
- **Recommendations:**
  - Ensure no `.REQ` or `.BIN` files on the SD card before insertion.
  - Malware cannot access the root filesystem via USB-PTP.
  - Antivirus software cannot scan cameras over USB-PTP.

## Conclusion
Thank you for your attention!

---

**End of Presentation**