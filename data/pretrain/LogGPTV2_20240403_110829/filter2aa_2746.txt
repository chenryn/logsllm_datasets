Exploiting Digital Cameras
Oren Isacson - oren]at[coresecurity.com
Alfredo Ortega - aortega]at[coresecurity.com
Exploit Writers Team
Core Security Technologies
August 1, 2010
Exploiting Digital Cameras
August 1, 2010
1 / 27
Introduction
This talk is about:
• How to script Canon Powershot cameras.
• How we reversed the embedded interpreter.
• What are the possibilities of this?
• What are the security consequences?
Exploiting Digital Cameras
August 1, 2010
2 / 27
Architecture of Powershot cameras
• ARM type Processor (ARM946E-S
based)
• Memory Protection Unit (MPU)
• No Memory Mapping Unit
• Exception handlers
• SD Memory Card
• Debugging Support
• Proprietary OS (DryOS)
We used MPU’s registers to ﬁnd the
memory regions
And exception handlers for debugging.
Exploiting Digital Cameras
August 1, 2010
3 / 27
Previous works: CHDK
• CHDK is an unofﬁcial ﬁrmware
enhancement.
• Can be booted from the memory
card.
• Loads as a ﬁrmware update but it
doesn’t make permanent changes.
• It doesn’t automatically load unless
the Memory Card is locked.
• But users don’t normally have
Memory Card in locked mode.
• So it’s safe (not a good attack
vector).
We used it for researching the ﬁrmware.
Exploiting Digital Cameras
August 1, 2010
4 / 27
Image fuzzing
• Can we run code exploiting the image parsers?
• The camera crashes when processing some malformed
images.
• We wrote an exception handler to examine the crashes.
• Even if we can exploit this bugs, the exploit would be
model speciﬁc.
Exploiting Digital Cameras
August 1, 2010
5 / 27
Firmware analysis
• CHDK project provieded IDA dumps of some powershot
cameras (Thanks!).
• Some Interesting strings:
• “Syntax Error”, “yacc stack overﬂow”, “input in ﬂex scanner
failed”, etc.
• It appears that there is an embedded interpreter.
• Flex lexical scanner and yacc or bison parser generator
were used.
Exploiting Digital Cameras
August 1, 2010
6 / 27
The embedded interpreter
• We are not the ﬁrst ones to ﬁnd the interpreter
• But there is no public documentation on the language
• Invalid scripts make the camera shut down.
• And there are no helpful error messages.
Exploiting Digital Cameras
August 1, 2010
7 / 27
Running a script
• Script ﬁle: “extend.m”
• String “for DC_scriptdisk” must be in ﬁle “script.req”
• String “SCRIPT” in offset 0x1f0 of the memory card.
• Memory card can be either FAT32, FAT16 or FAT12 (unlike
in the ﬁrmware update boot method).
• Script is launched when ”Func. Set” key is pressed in
playback mode.
• It works even when the memory card is in unlocked
mode.
• We need to reverse the interpreter.
Exploiting Digital Cameras
August 1, 2010
8 / 27
yacc/lex
• Standard yacc/lex (Bison/ﬂex) parser:
LCDMSG_Create()
private sub 
Initialize()
...
end sub
PRINT
Script \extend.m
print()
LEDDrive()
IF
WHILE  
yylex()
yyparse()
(yacc generated)
(flex generated)
getch()
Get next token
LoadScript("\extend.m")
Exploiting Digital Cameras
August 1, 2010
9 / 27
Locating yyparse()
yyparse() function:
• yyparse() is the grammatical parser, it calls the lexer
yylex().
Exploiting Digital Cameras
August 1, 2010
10 / 27
Locating yylex()
yylex() function:
• Flex is a regex-based tokenizer (Lexical analyzer)
• The regex implementation is a table-based state machine
• Over 220 states and 50 different tokens.
Exploiting Digital Cameras
August 1, 2010
11 / 27
Reversing yylex()
Flex state-machine based regex parser:
yy_match :
do
{
register YY_CHAR yy_c = yy_ec [YY_SC_TO_UI(∗yy_cp ) ] ;
i f
(
yy_accept [ yy_current_state ]
)
{
yy_last_accepting_state = yy_current_state ;
yy_last_accepting_cpos = yy_cp ;
}
while
(
yy_chk [ yy_base [ yy_current_state ] + yy_c ]
!=
yy_current_state
)
{
yy_current_state = ( int )
yy_def [ yy_current_state ] ;
i f
(
yy_current_state >= 76 )
yy_c = yy_meta [ ( unsigned int )
yy_c ] ;
}
yy_current_state = yy_nxt [ yy_base [ yy_current_state ] + ( unsigned int )
yy_c ] ;
++yy_cp ;
}
while
( yy_base [ yy_current_state ]
!= 271
) ;
• Let’s emulate it in x86! we only need to ﬁnd the tables.
Exploiting Digital Cameras
August 1, 2010
12 / 27
Finding Flex tables
yylex()
yy_accept[]
yy_base[]
yy_nxt[]
yy_chk[]
yy_ec[]
yy_def[]
static const short
int
yy_base [517] =
{
0 ,
0 ,
0 ,
43 ,
46 ,
49 ,
50 ,
69 ,
0 ,
161 ,
0 ,
205 ,
0 , 2351, 2350, 2349, 2348,
295 ,
332 ,
377 ,
0 ,
426 ,
0 ,
475 ,
0 ,
Location in ﬁrmware of yy_base[]:
Exploiting Digital Cameras
August 1, 2010
13 / 27
Dumping Tokens
• Find all the tables and rebuild the equivalent Flex parser
• Try all different combination of inputs (Exit on “unknown”
token)
• Brute force time!
Works every time
Exploiting Digital Cameras
August 1, 2010
14 / 27
It’s Basic!
#
Token
#
Token
1
+
2
-
4
/
8
^
9
>>
10
=
15
19
(
20
)
23
%%MEMORY_L
24
%%MEMORY_M
25
%%MEMORY_S
26
"
42
if
42
If
42
IF
43
sub
43
Sub
43
SUB
44
function
44
Function
45
do
45
Do
45
DO
47
for
47
For
47
FOR
Exploiting Digital Cameras
August 1, 2010
15 / 27
Emulating the parser
Now we know (most of) the Tokens.
We need to emulate the parser. We used:
• QEMU: processor emulator with ARM support
• GNU Binutils: for working with memory images
• Our exception handler: for dumping camera memory
• CHDK: for loading our exception handler and writing to
memory card.
• GDB: debugger for setting initial CPU state and monitoring.
Exploiting Digital Cameras
August 1, 2010
16 / 27
Dumping the memory
• QEMU can’t emulate the whole camera.
• So we need a memory dump at the parser entry point.
• We can’t set breakpoints.
• but we can force a memory address exception
• Setting the static variable yy_start to 0xA0A0A0A0, the last
line raises an exception:
s t a t i c
yy_start =1;
[ . . . ]
yy_current_state = yy_start ;
do
{
YY_CHAR yy_c = yy_ec [∗ yy_cp ] ;
i f
(
yy_accept [ yy_current_state ]
)
Exploiting Digital Cameras
August 1, 2010
17 / 27
Dumping the memory
Exception handler:
• Stores CPU registers
• Stores memory image
• MPU registers tells us memory regions
offset
size
0x0
32 MB
0x0
2 GB
0x2000
8 KB
0x10000000
32 MB
0x40000000
4 KB
0xc0000000
16 MB
0xffc00000
4 MB
• We only need 2 areas: Main memory at offset 0 (32MB)
and ROM at offset 0xffff0000 (4MB)
Exploiting Digital Cameras
August 1, 2010
18 / 27
Loading the emulator
• QEMU can load ELF format ﬁles.
• We used Binutils objcopy and objdump to make ELF ﬁle
from memory dump.
• QEMU has an internal GDB server.
• We use it for setting initial register state.
• We ﬁx the invalid variable so it doesn’t generate an
exception inside the emulator.
Exploiting Digital Cameras
August 1, 2010
19 / 27
Running the emulator
• As not all hardware is emulated, we can’t allow the
emulated code to make system calls.
• The ﬂex generated scanner uses a macro to read input:
YY_INPUT.
• Using GDB python integration, it’s easy to replace this
macro.
• The lexical scanner will continue to call YY_INPUT until it
returns 0.
• Or until an error is found.
• We used this to ﬁnd out the camera script syntax.
Exploiting Digital Cameras
August 1, 2010
20 / 27
Emulating scripts
Sample emulation runs:
Dim a as Long ← Error
a=1
Dim a
a=1 ← Error
Dim a=1 No Errors
Exploiting Digital Cameras
August 1, 2010
21 / 27
Emulating scripts
sub test() ← Error
end sub
test()
private sub test()
end sub
test() ← Error
private sub test()
end sub
private sub test2()
test()
end sub No Errors
Exploiting Digital Cameras
August 1, 2010
22 / 27
Hello World
Entry point function has to be called “Initialize“.
HelloWorld script:
private sub sayHello ( )
a=LCDMsg_Create ( )
LCDMsg_SetStr (a , " Hello World ! " )
end sub
private sub I n i t i a l i z e ( )
UI . CreatePublic ( )
sayHello ( )
end sub
Exploiting Digital Cameras
August 1, 2010
23 / 27
Language documentation
• We found over 500 functions controlling all aspects of the
camera
• We documented some of them and made a (very
incomplete) user guide
• Exploiting_Digital_Cameras_IOBasic.pdf
Exploiting Digital Cameras
August 1, 2010
24 / 27
Launching exploits from the camera
• Example 1: Launch common auto-run exploits against the
SD (MS08-038, CVE-2010-2568)
• Example 2: Activate the microphone!
• Example 3: Output data via Exif Tags
Exploiting Digital Cameras
August 1, 2010
25 / 27
Countermeasures
• Check that there are no .REQ or .BIN ﬁles in the SD card
before inserting into the camera.
• Camera can’t be infected by using USB-PTP, malware
can’t access root ﬁlesystem.
• AntiVirus can’t scan cameras by USB-PTP.
SD
AV
USB (PTP)














Exploiting Digital Cameras
August 1, 2010
26 / 27
The end
Thank you!
Exploiting Digital Cameras
August 1, 2010
27 / 27