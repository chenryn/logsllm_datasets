o
n
(
s
t
n
e
v
e
#
 1
 0.8
 0.6
 0.4
 0.2
 0
 0
40 hosts, resource-inference
20 hosts, resource-inference
40 hosts, ideal
20 hosts, ideal
 5
 10
 15
 20
 25
 30
 35
 40
# compromised brokers
)
d
e
z
i
l
a
m
r
o
n
(
s
t
n
e
v
e
#
 1
 0.8
 0.6
 0.4
 0.2
 0
 0
resource-inference-avg
resource-inference-avg-opt
resource-inference-max
resource-inference-max-opt
type-max
 5
 10
 15
 20
 25
 30
 35
 40
# rules
Fig. 8. Fraction of events obtained when multiple brokers are compromised.
20 rules. The brokers with most events are compromised ﬁrst.
Fig. 10. Average and maximum fraction of resource-critical events contained
in each broker. 20 brokers.
)
d
e
z
i
l
a
m
r
o
n
(
s
t
n
e
v
e
#
 1
 0.8
 0.6
 0.4
 0.2
 0
 0
20 hosts, resource-inference-max
40 hosts, type-max
40 hosts, resource-inference-max
 5
 10
 15
 20
 25
 30
 35
 40
# rules
]
s
m
[
y
a
e
d
l
 1100
 1000
 900
 800
 700
 600
 500
 400
 300
 200
 100
 0
 1
20 hosts
40 hosts
 2
 3
 4
 5
 6
 7
rule length
Fig. 9. Average and maximum fraction of type-critical events contained in
each broker.
Fig. 11. Violation detection delay introduced by our algorithm. 20 rules.
technique provides a better protection against this type of
attack. These results are shown in Fig. 9. We see that for
a type-based distribution of events the totality of events of
a speciﬁc type can be found on a speciﬁc node. Hence, the
value is 1 for all cases. In our resource-based distribution, the
number of type-critical events stored in each broker is limited.
We measure the effects of our approach against an attacker
interested in obtaining information about a speciﬁc set of
resources (i.e., a MAX EVENT CRITICAL attacker). We
randomly marked 10% of the resources as critical. We deﬁne
as “resource-critical” the events that relate to one (or more)
of such critical resources. Our goal is to minimize the amount
of events related to critical resources acquired by the attacker.
We measure the max value of critical events stored in each
broker for our resource-based distribution and for an event-
type distribution. We show that the resource-based distribution
limits the number of critical events stored in each broker.
These results are shown in Fig. 10.
However, for attackers targeting a speciﬁc resource, a pure
resource-based mapping algorithm provides weak guarantees:
an attacker only need to compromise a speciﬁc broker to
access all information about the resource. A better strategy
for deployment can take advantage of a mix-mechanism
for distributing data. This method distributes events about a
critical resource to multiple brokers instead of concentrating
them in a single broker. However, it also increases the overall
distribution of information, as it reduces the reuse of events
across multiple rules. We show the effects of this distribution
in Fig. 10 with the sufﬁx -opt.
The multi-step validation has limited negative effects on
the performance of the system. The distributed correlation
process adds a delay in the detection of problems. The result
of the processing in one broker needs to be forwarded to other
nodes before a complete detection is performed. We measure
the average delay in the detection introduced by our system.
We see that the delay introduced is within a second even for
long rules. The slightly lower delay in the 40-host solution is
created by a lower average communication delay in the 40-
host network conﬁguration of our EC2 deployment. We show
this results in Fig. 11. The load of receiving event messages is
distributed across servers in a way proportional to the amount
of events stored in each broker.
In summary, our solution provides a better distribution of
information and, hence, a better protection against attacks
toward the conﬁdentiality of the monitoring system than other
previous solutions for the distribution of information.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:20:22 UTC from IEEE Xplore.  Restrictions apply. 
VII. DISCUSSION AND FUTURE WORK
While our algorithm achieves a good distribution of infor-
mation across hosts, we highlight a few limitations of our
approach and possible future extensions.
In the evaluation we do not consider inference based on the
semantic of the data. For example, the presence of an event
might imply with high probability the presence of a particular
condition in another resource. However, our approach of
limiting the overall exposure of information would limit also
the amount of data available for such an inference.
The algorithm focuses on the conﬁdentiality of the event
data and does not consider the integrity and the availability
consequences of attacks. Protection against these attacks can
be included by adding redundancy in the aggregation process
and by the use of the log audit
techniques presented in
the related work section. The addition of redundancy would
increase by a constant factor the number of events contained in
each monitoring host. Reducing the data necessary for policy
validation is still important to reduce the amount of data to
replicate. Our future work will investigate the tradeoff between
conﬁdentiality, availability, and integrity in monitoring.
Additionally, future work will look at techniques such as
privacy-preserving set intersection to reduce the amount of
partially processed information stored in monitoring servers.
These techniques allow matching events between monitoring
hosts without revealing partially processed data.
VIII. CONCLUSIONS
We introduce an algorithm for performing policy-based
large-scale event correlation that maintains the knowledge
about the state of the system distributed across a large number
of machines. We show that this distribution of information in-
creases the security of the system toward attackers interested in
exploiting the monitoring system to acquire information about
the infrastructure’s state. We consider attackers interested in all
knowledge about the system, attackers interested in knowledge
about a particular type of event, and attackers interested
in a speciﬁc critical resources. We perform experiments by
injecting events taken from real datasets in an implementation
of the monitoring system running on machines in a EC2
cluster. We show that our system provides a better protection
against all these types of attackers.
ACKNOWLEDGMENT
This work was partially supported by the Boeing Trusted Software
Center at the Information Trust Institute, University of Illinois at
Urbana-Champaign. This material is based on research sponsored
by the Air Force Research Laboratory and the Air Force Ofﬁce
of Scientiﬁc Research, under agreement number FA8750-11-2-0084.
The U.S. Government
is authorized to reproduce and distribute
reprints for Governmental purposes notwithstanding any copyright
notation thereon.
REFERENCES
[1] C. Tankard and D. Pathways, “Persistent threats and how to monitor and
deter them,” in Network Security, Science Direct, vol. 2011, no. 8, pp.
16–19, 2011.
[2] G. Gu, J. Zhang, and W. Lee, “BotSniffer: Detecting botnet command
and control channels in network trafﬁc,” in Network & Distributed
System Security Symposium (NDSS), 2008.
[3] “Splunk,” 2011. http://www.splunk.com/
[4] “Bro Intrusion Detection System,” 2011. http://bro-ids.org/
[5] “Simple Event Correlator,” 2011. http://simple-evcorr.sourceforge.net/
[6] M. Vallentin, R. Sommer, J. Lee, and C. Leres, “The NIDS cluster:
Scalable, stateful network intrusion detection on commodity hardware,”
in Recent Advances in Intrusion Detection Symposium (RAID), 2007.
[7] “DigiNotar
reports
security
incident,”
2011.
http:
//www.vasco.com/company/press room/news archive/2011/news
diginotar reports security incident.aspx
[8] “Security Content Automation Protocol Validated Products,” 2011.
http://nvd.nist.gov/scapproducts.cfm
[9] Payment Card Industry Security Standards Council, “Payment Card
Industry (PCI) Data Security Standard,” Tech. Rep. October, 2010.
http://en.scientiﬁccommons.org/8858188
[10] “Federal Information Security Management Act (FISMA) Implementa-
tion Project,” 2011. http://csrc.nist.gov/groups/SMA/ﬁsma/index.html
[11] S. Ceri, G. Gottlob, and L. Tanca, “What you always wanted to
know about Datalog(and never dared to ask),” IEEE Transactions on
Knowledge and Data Engineering, vol. I, no. 1, 1989.
[12] Y. Deswarte, L. Blain, J.-C. Fabre, “Intrusion tolerance in distributed
computing systems,” IEEE Symposium on Research in Security and
Privacy, 1991.
[13] “Syslog-ng
Logging
System,”
2011.
http://www.balabit.com/
network-security/syslog-ng/
[14] B. Schneier and J. Kelsey, “Cryptographic support for secure logs on
untrusted machines,” in USENIX Security Symposium, 1998.
[15] D. Ma and G. Tsudik, “A new approach to secure logging,” ACM
Transactions on Storage, vol. 5, no. 1, pp. 1–21, Mar. 2009.
[16] P. Lincoln, P. Porras, and V. Shmatikov, “Privacy-preserving sharing and
correction of security alerts,” in USENIX Security Symposium. 2004.
[17] D. Xu and P. Ning, “Privacy-Preserving Alert Correlation : A Concept
Hierarchy Based Approach,” in Annual Computer Security Applications
Conference (ACSAC), 2005.
[18] B. Ribeiro, W. Chen, G. Miklau, and D. Towsley, “Analyzing privacy
in enterprise packet trace anonymization,” in Network & Distributed
Systems Security Symposium (NDSS) , 2008.
[19] J. King, K. Lakkaraju, and A. Slagell, “A taxonomy and adversarial
model for attacks against network log anonymization,” in ACM Sympo-
sium on Applied Computing (SAC). 2009.
[20] T. Garﬁnkel and M. Rosenblum, “A virtual machine introspection based
architecture for intrusion detection,” in Network & Distributed Systems
Security Symposium (NDSS), 2003.
[21] M. Montanari, E. Chan, K. Larson, W. Yoo, and R. H. Campbell,
“Distributed Security Policy Conformance,” in IFIP International In-
formation Security Conference (IFIP SEC), 2011.
[22] M. Montanari and R. Campbell, “Attack-resilient compliance monitoring
for large distributed infrastructure systems,” in IEEE Conference on
Network and System Security. 2011.
[23] North American Electric Reliability Corporation, “NERC CIP 002-009,”
- North American Electric Reliability Corporation, Tech. Rep., 2007.
[24] K. Walzer, T. Breddin, and M. Groch, “Relative temporal constraints in
the Rete algorithm for complex event detection,” International confer-
ence on Distributed Event-Based Systems (DEBS), 2008.
[25] X. Ou and S. Govindavajhala, “Mulval: A logic-based network security
analyzer, ” in USENIX Security Symposium, 2005.
[26] A. Adi and O. Etzion, “Amit-the situation manager,” The International
Journal on Very Large Data Bases, vol. 13, no. 2, pp. 177–203, 2004.
[27] B. Sangster, T. O’Connor, T. Cook, R. Fanelli, E. Dean, W. Adams,
C. Morrell, and G. Conti, “Toward instrumenting network warfare com-
petitions to generate labeled datasets,” in Workshop on Cyber security
experimentation and Test (CSET). 2009.
[28] D. Kotz, T. Henderson, I. Abyzov, and J. Yeo, “CRAWDAD data set
dartmouth/campus (v. 2009-09-09),” http://crawdad.cs.dartmouth.edu/
dartmouth/campus. 2009.
[29] E. Fidler, H. Jacobsen, and G. Li, “The PADRES distributed pub-
lish/subscribe system,” Feature Interactions in Telecommunications and
Software Systems, 2005.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:20:22 UTC from IEEE Xplore.  Restrictions apply.