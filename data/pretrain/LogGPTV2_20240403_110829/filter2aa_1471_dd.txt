mode process, protected process, or trustlet crashes.
■    The Windows Fault Reporting and Secure Fault Reporting
(WerFault.exe and WerFaultSecure.exe) are mainly used to acquire a
snapshot of the crashing application and start the generation and
sending of a report to the Microsoft Online Crash Analysis site (or, if
configured, to an internal error reporting server).
■    The actual generation and transmission of the report is performed by
the Windows Error Reporting Dll (Wer.dll). The library includes all
the functions used internally by the WER engine and also some
exported API that the applications can use to interact with Windows
Error Reporting (documented at https://docs.microsoft.com/en-
us/windows/win32/api/_wer/). Note that some WER APIs are also
implemented in Kernelbase.dll and Faultrep.dll.
■    The Windows User Mode Crash Reporting DLL (Faultrep.dll)
contains common WER stub code that is used by system modules
(Kernel32.dll, WER service, and so on) when a user-mode application
crashes or hangs. It includes services for creating a crash signature
and reports a hang to the WER service, managing the correct security
context for the report creation and transmission (which includes the
creation of the WerFault executable under the correct security token).
■    The Windows Error Reporting Dump Encoding Library (Werenc.dll)
is used by the Secure Fault Reporting to encrypt the dump files
generated when a trustlet crashes.
■    The Windows Error Reporting Kernel Driver (WerKernel.sys) is a
kernel library that exports functions to capture a live kernel memory
dump and submit the report to the Microsoft Online Crash Analysis
site. Furthermore, the driver includes APIs for creating and submitting
reports for user-mode faults from a kernel-mode driver.
Describing the entire architecture of WER is outside the scope of this
book. In this section, we mainly describe error reporting for user-mode
applications and the NT kernel (or kernel-driver) crashes.
User applications crashes
As discussed in Chapter 3 of Part 1, all the user-mode threads in Windows
start with the RtlUserThreadStart function located in Ntdll. The function does
nothing more than calling the real thread start routine under a structured
exception handler. (Structured exception handling is described in Chapter 8.)
The handler protecting the real start routine is internally called Unhandled
Exception Handler because it is the last one that can manage an exception
happening in a user-mode thread (when the thread does not already handle it).
The handler, if executed, usually terminates the process with the
NtTerminateProcess API. The entity that decides whether to execute the
handler is the unhandled exception filter, RtlpThreadExceptionFilter.
Noteworthy is that the unhandled exception filter and handler are executed
only under abnormal conditions; normally, applications should manage their
own exceptions with inner exception handlers.
When a Win32 process is starting, the Windows loader maps the needed
imported libraries. The kernelbase initialization routine installs its own
unhandled exception filter for the process, the UnhandledExceptionFilter
routine. When a fatal unhandled exception happens in a process’s thread, the
filter is called to determine how to process the exception. The kernelbase
unhandled exception filter builds context information (such as the current
value of the machine’s registers and stack, the faulting process ID, and thread
ID) and processes the exception:
■    If a debugger is attached to the process, the filter lets the exception
happen (by returning CONTINUE_SEARCH). In this way, the
debugger can break and see the exception.
■    If the process is a trustlet, the filter stops any processing and invokes
the kernel to start the Secure Fault Reporting (WerFaultSecure.exe).
■    The filter calls the CRT unhandled exception routine (if it exists) and,
in case the latter does not know how to handle the exception, it calls
the internal WerpReportFault function, which connects to the WER
service.
Before opening the ALPC connection, WerpReportFault should wake up
the WER service and prepare an inheritable shared memory section, where it
stores all the context information previously acquired. The WER service is a
direct triggered-start service, which is started by the SCM only in case the
WER_SERVICE_START WNF state is updated or in case an event is written
in a dummy WER activation ETW provider (named Microsoft-Windows-
Feedback-Service-Triggerprovider). WerpReportFault updates the relative
WNF state and waits on the \KernelObjects\SystemErrorPortReady event,
which is signaled by the WER service to indicate that it is ready to accept
new connections. After a connection has been established, Ntdll connects to
the WER service’s \WindowsErrorReportingServicePort ALPC port, sends
the WERSVC_REPORT_CRASH message, and waits indefinitely for its reply.
The message allows the WER service to begin to analyze the crashed
program’s state and performs the appropriate actions to create a crash report.
In most cases, this means launching the WerFault.exe program. For user-
mode crashes, the Windows Fault Reporting process is invoked two times
using the faulting process’s credentials. The first time is used to acquire a
“snapshot” of the crashing process. This feature was introduced in Windows
8.1 with the goal of rendering the crash report generation of UWP
applications (which, at that time, were all single-instance applications) faster.
In that way, the user could have restarted a crashed UWP application without
waiting for the report being generated. (UWP and the modern application
stack are discussed in Chapter 8.)
Snapshot creation
WerFault maps the shared memory section containing the crash data and
opens the faulting process and thread. When invoked with the -pss command-
line argument (used for requesting a process snapshot), it calls the
PssNtCaptureSnapshot function exported by Ntdll. The latter uses native
APIs to query multiple information regarding the crashing process (like basic
information, job information, process times, secure mitigations, process file
name, and shared user data section). Furthermore, the function queries
information regarding all the memory sections baked by a file and mapped in
the entire user-mode address space of the process. It then saves all the
acquired data in a PSS_SNAPSHOT data structure representing a snapshot. It
finally creates an identical copy of the entire VA space of the crashing
process into another dummy process (cloned process) using the
NtCreateProcessEx API (providing a special combination of flags). From
now on, the original process can be terminated, and further operations needed
for the report can be executed on the cloned process.
 Note
WER does not perform any snapshot creation for protected processes and
trustlets. In these cases, the report is generated by obtaining data from the
original faulting process, which is suspended and resumed only after the
report is completed.
Crash report generation
After the snapshot is created, execution control returns to the WER service,
which initializes the environment for the crash report creation. This is done
mainly in two ways:
■    If the crash happened to a normal, unprotected process, the WER
service directly invokes the WerpInitiateCrashReporting routine
exported from the Windows User Mode Crash Reporting DLL
(Faultrep.dll).
■    Crashes belonging to protected processes need another broker
process, which is spawned under the SYSTEM account (and not the
faulting process credentials). The broker performs some verifications
and calls the same routine used for crashes happening in normal
processes.
The WerpInitiateCrashReporting routine, when called from the WER
service, prepares the environment for executing the correct Fault Reporting
process. It uses APIs exported from the WER library to initialize the machine
store (which, in its default configuration, is located in
C:\ProgramData\Microsoft\Windows\WER) and load all the WER settings
from the Windows registry. WER indeed contains many customizable
options that can be configured by the user through the Group Policy editor or
by manually making changes to the registry. At this stage, WER
impersonates the user that has started the faulting application and starts the
correct Fault Reporting process using the -u main command-line switch,
which indicates to the WerFault (or WerFaultSecure) to process the user
crash and create a new report.
 Note
If the crashing process is a Modern application running under a low-
integrity level or AppContainer token, WER uses the User Manager
service to generate a new medium-IL token representing the user that has
launched the faulting application.
Table 10-19 lists the WER registry configuration options, their use, and
possible values. These values are located under the
HKLM\SOFTWARE\Microsoft\Windows\Windows Error Reporting subkey
for computer configuration and in the equivalent path under
HKEY_CURRENT_USER for per-user configuration (some values can also
be present in the \Software\Policies\Microsoft\Windows\Windows Error
Reporting key).
Table 10-19 WER registry settings
Settings
Meaning
Values
Configure
Archive
Contents of archived data
1 for parameters, 2 for all 
data
Consent\D
efaultCons
ent
What kind of data should 
require consent
1 for any data, 2 for 
parameters only, 3 for 
parameters and safe data, 4 
for all data.
Consent\D
efaultOver
rideBehavi
or
Whether the 
DefaultConsent overrides 
WER plug-in consent 
values
1 to enable override
Consent\P
luginName
Consent value for a 
specific WER plug-in
Same as DefaultConsent
Corporate
WERDirec
tory
Directory for a corporate 
WER store
String containing the path
Corporate
WERPort
Number
Port to use for a corporate 
WER store
Port number
Corporate
WERServe
r
Name to use for a 
corporate WER store
String containing the name
Corporate
WERUseA
uthenticati
on
Use Windows Integrated 
Authentication for 
corporate WER store
1 to enable built-in 
authentication
Corporate
WERUseS
SL
Use Secure Sockets Layer 
(SSL) for corporate WER 
store
1 to enable SSL
DebugApp
lications
List of applications that 
require the user to choose 
between Debug and 
Continue
1 to require the user to 
choose
DisableAr
Whether the archive is 
1 to disable archive
chive
enabled
Disabled
Whether WER is disabled
1 to disable WER
DisableQu
eue
Determines whether 
reports are to be queued
1 to disable queue
DontShow
UI
Disables or enables the 
WER UI
1 to disable UI
DontSend
Additional
Data
Prevents additional crash 
data from being sent
1 not to send
ExcludedA
pplication
s\AppNam
e
List of applications 
excluded from WER
String containing the 
application list
ForceQue
ue
Whether reports should be 
sent to the user queue
1 to send reports to the 
queue
LocalDum
ps\DumpF
older
Path at which to store the 
dump files
String containing the path
LocalDum
ps\DumpC
ount
Maximum number of dump 
files in the path
Count
LocalDum
ps\DumpT
ype
Type of dump to generate 
during a crash
0 for a custom dump, 1 for a 
minidump, 2 for a full dump
LocalDum
For custom dumps, 
Values defined in 
ps\Custom
DumpFlag
s
specifies custom options
MINIDUMP_TYPE (see 
Chapter 12 for more 
information)
LoggingDi
sabled
Enables or disables logging
1 to disable logging
MaxArchi
veCount
Maximum size of the 
archive (in files)
Value between 1–5000
MaxQueue
Count
Maximum size of the 
queue
Value between 1–500
QueuePest
erInterval
Days between requests to 
have the user check for 
solutions
Number of days
The Windows Fault Reporting process started with the -u switch starts the
report generation: the process maps again the shared memory section
containing the crash data, identifies the exception’s record and descriptor,
and obtains the snapshot taken previously. In case the snapshot does not
exist, the WerFault process operates directly on the faulting process, which is
suspended. WerFault first determines the nature of the faulting process
(service, native, standard, or shell process). If the faulting process has asked
the system not to report any hard errors (through the SetErrorMode API), the
entire process is aborted, and no report is created. Otherwise, WER checks
whether a default post-mortem debugger is enabled through settings stored in
the AeDebug subkey (AeDebugProtected for protected processes) under the
HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ root registry
key. Table 10-20 describes the possible values of both keys.
Table 10-20 Valid registry values used for the AeDebug and
AeDebugProtected root keys
Val
ue 
Meaning
Data
na
me
De
bug
ger
Specify the 
debugger 
executable to be 
launched when an 
application 
crashes.
Full path of the debugger executable, with 
eventual command-line arguments. The -p 
switch is automatically added by WER, 
pointing it to the crashing process ID.
Pro
tect
ed
De
bug
ger
Same as Debugger 
but for protected 
processes only.
Full path of the debugger executable. Not 
valid for the AeDebug key.
Aut
o
Specify the 
Autostartup mode
1 to enable the launching of the debugger 
in any case, without any user consent, 0 
otherwise.
Lau
nch
No
nPr
ote
cte