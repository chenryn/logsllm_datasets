title:CocoSketch: high-performance sketch-based measurement over arbitrary
partial key query
author:Yinda Zhang and
Zaoxing Liu and
Ruixin Wang and
Tong Yang and
Jizhou Li and
Ruijie Miao and
Peng Liu and
Ruwen Zhang and
Junchen Jiang
CocoSketch: High-Performance Sketch-based Measurement
over Arbitrary Partial Key Query
Yinda Zhang1,3, Zaoxing Liu2, Ruixin Wang1, Tong Yang1, Jizhou Li1,
Ruijie Miao1, Peng Liu1, Ruwen Zhang1, Junchen Jiang3
1Peking University, 2Boston University, 3University of Chicago
1 INTRODUCTION
Network monitoring and measurement have been critical to various
network management tasks, such as traffic engineering [1‚Äì7], ac-
counting [8‚Äì12], load balancing [13‚Äì16], flow scheduling [17‚Äì19],
and anomaly detection [20‚Äì22]. These tasks often require timely
and accurate estimates of the network flow metrics, e.g., heavy hit-
ters [23‚Äì26], flow size distribution [27], or heavy changes [28, 29].
In response, recent efforts have demonstrated that sketching algo-
rithms (sketches) can estimate these metrics with high fidelity at a
high throughput using only small amounts of resources [30, 31].
At a high level, existing sketch-based designs commonly focus
on estimating statistics defined over a single flow key. A flow key
can be a specific header field (e.g., SrcIP, DstIP), a combination of
fields (e.g., 5-tuple), or a subset of bits in a field (e.g., any prefix in
SrcIP). For instance, flow scheduling needs to track heavy hitters
defined on the 5-tuple [17], while SYN flood detection needs to
count distinct SrcIPs [32].
ABSTRACT
Sketch-based measurement has emerged as a promising alterna-
tive to the traditional sampling-based network measurement ap-
proaches due to its high accuracy and resource efficiency. While
there have been various designs around sketches, they focus on mea-
suring one particular flow key, and it is infeasible to support many
keys based on these sketches. In this work, we take a significant step
towards supporting arbitrary partial key queries, where we only
need to specify a full range of possible flow keys that are of interest
before measurement starts, and in query time, we can extract the
information of any key in that range. We design CocoSketch, which
casts arbitrary partial key queries to the subset sum estimation
problem and makes the theoretical tools for subset sum estima-
tion practical. To realize desirable resource-accuracy tradeoffs in
software and hardware platforms, we propose two techniques: (1)
stochastic variance minimization to significantly reduce per-packet
update delay, and (2) removing circular dependencies in the per-
packet update logic to make the implementation hardware-friendly.
We implement CocoSketch on four popular platforms (CPU, Open
vSwitch, P4, and FPGA) and show that compared to baselines that
use traditional single-key sketches, CocoSketch improves average
packet processing throughput by 27.2√ó and accuracy by 10.4√ó when
measuring six flow keys.
CCS CONCEPTS
‚Ä¢ Networks ‚Üí Network monitoring; Network measurement;
KEYWORDS
Sketch; Arbitrary Partial Key Query; P4; FPGA
ACM Reference Format:
Yinda Zhang, Zaoxing Liu, Ruixin Wang, Tong Yang, Jizhou Li, Ruijie
Miao, Peng Liu, Ruwen Zhang, Junchen Jiang. 2021. CocoSketch: High-
Performance Sketch-based Measurement over Arbitrary Partial Key Query.
In ACM SIGCOMM 2021 Conference (SIGCOMM ‚Äô21), August 23‚Äì28, 2021,
Virtual Event, USA. ACM, New York, NY, USA, 16 pages. https://doi.org/10.
1145/3452296.3472892
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
SIGCOMM ‚Äô21, August 23‚Äì28, 2021, Virtual Event, USA
¬© 2021 Association for Computing Machinery.
ACM ISBN 978-1-4503-8383-7/21/08...$15.00
https://doi.org/10.1145/3452296.3472892
While recent efforts on single-key sketches have made significant
progress [30, 33‚Äì38], it is impractical to use these sketches to mea-
sure multiple flow keys simultaneously. First, existing sketches [33,
39, 40] keep one independent sketch for each key, making it hard
to scale to even a handful of keys given the limited compute/mem-
ory resources in commercial switches [31, 41] (as shown in ¬ß2.3).
Second, they require operators to pre-define the set of flow keys
before the measurement starts. However, in many use cases, such as
network diagnosis and security, it might be difficult to enumerate
a few keys that must be measured ahead of time [21, 42‚Äì48]. For
instance, DDoS detection may track large flows defined on tens of
flow keys, including SrcIP/DstIP, the 5-tuple, and arbitrary prefixes
of them [21]. On a Tofino switch (e.g., 48 ALUs) [49], a Count-Min
sketch for each key requires eight ALUs, making it infeasible to
run more than six sketches.
We define a new class of problem called arbitrary partial key
query, which ‚Äúlate binds‚Äù what keys a sketch should support. Specif-
ically, operators only need to pre-define a broad key range before-
hand (called the full key ùëòùêπ ), and during query time, they can still
query the flow size of any key that is a part of ùëòùêπ (called partial
key). For instance, if the full key ùëòùêπ is the 5-tuple, the system should
estimate the flow size of any partial keys of the 5-tuple, such as
SrcIP and any prefix of SrcIP.
An ideal system for arbitrary partial key queries should meet
three requirements: (1) fidelity (provable accuracy guarantee on any
partial keys), (2) resource efficiency (high throughput using minimal
memory), and (3) compatibility (on various software and hardware
platforms, e.g., Open vSwitch [50], PISA [49], and FPGA [51]).
Unfortunately, existing solutions that might support arbitrary
partial key queries fall short on at least one requirement, as sum-
marized in Table 1. R-HHH [39] reduces the overhead of updating
SIGCOMM ‚Äô21, August 23‚Äì28, 2021, Virtual Event, USA
Y. Zhang et al.
Solutions
Fidelity Resource Compatibility
Sketch per key (R-HHH)
Full-key sketch (¬ß2.3)
Unbiased SpaceSaving
CocoSketch (ours)
‚úì
‚úì
‚úì
‚úì
‚úì
‚úì
‚úì
‚úì
Table 1: Our work v.s. prior solutions.
multiple sketches (one for each partial key) by selectively updating
only ùëÇ(1) sketches per packet, but this technique will significantly
increase the memory usage needed to achieve the same error bound.
For instance, to find the hierarchical heavy hitters of SrcIP (i.e., 32
prefixes), it will use 32 single-key sketches and 32MB total memory
space (each sketch needs 1MB memory space to achieve a 95% F1
Score [52]), which already exceeds the 9MB memory available on
Xilinx Alveo U280 FPGA [51]. Alternatively, we can use a single-
key sketch to measure full-key flow sizes and recover partial-key
flow sizes by aggregating full-key flows. However, prior work [53]
has shown that this approach might have large estimation errors,
which also corroborates our empirical evaluation (¬ß7.5).
In this work, we present CocoSketch (Cornucopia Sketch), a
sketch-based flow measurement system that supports arbitrary
partial key queries. In contrast to the baselines that maintain mul-
tiple single-key sketches, CocoSketch achieves provable accuracy
guarantees for arbitrary partial key queries but drastically reduces
memory usage and update delay by maintaining only one sketch.
Moreover, CocoSketch can be efficiently implemented on both soft-
ware and hardware platforms.
CocoSketch shares the theoretical basis with Unbiased SpaceSav-
ing (USS) [53], a recent technique for subset sum estimation [54].
Given a set of items, each with a weight, the subset sum estima-
tion problem estimates the total weight of any subset of items. The
problem of arbitrary partial key queries can be cast as the subset
sum estimation problem: the size of a partial-key flow ùëí equals the
total size of a subset of full-key flows that match on the partial
key with ùëí. For instance, the size of a flow ùëí defined by the fields
of SrcIP and DstIP equals the total size of all 5-tuple flows that
share the SrcIP and DstIP with ùëí. The key idea behind USS is the
variance minimization technique, which minimizes the variance of
its subset-sum estimation. Unfortunately, the update delay of USS
grows proportionally with more flows recorded in the system (on a
scale of 104), so a straightforward implementation would have low
throughput on CPUs (¬ß7.5), and it cannot be supported by some
resource-constraint hardware [32].
The challenge of CocoSketch lies in how to practically apply the
theory of subset sum estimation to the partial key query problem.
We propose two main techniques. (a) Inspired by USS, we introduce
a technique called stochastic variance minimization. It harnesses
‚Äúpower-of-ùëë choices‚Äù to drastically reduce the per-packet update de-
lay while still maintaining a low total variance of size estimates on
all flows. Our analysis in ¬ß5 shows that, like USS, our size estimates
on any partial keys are unbiased and have bounded variances. (b)
Due to circular dependencies among the per-packet update opera-
tions, naively implementing stochastic variance minimization on
programmable switches can be infeasible (even when it runs on
FPGA, the throughput is low). To make it runnable on hardware
platforms, we further remove circular dependencies by parallelizing
the operations of stochastic variance minimization in a way that
incurs only minor increases in estimation errors. ¬ß7.5 empirically
shows that the F1 Scores drop by less than 10% after removing the
circular dependencies.
We implement CocoSketch prototypes on representative soft-
ware (e.g., CPU and Open vSwitch (OVS)) and hardware platforms
(e.g., programmable ASIC and FPGA). Our evaluation shows that
to handle multiple partial keys under three measurement tasks
(heavy hitter detection, heavy changes, and hierarchical heavy
hitters (HHHs)), CocoSketch achieves 27.2√ó higher packet pro-
cessing throughput than baselines such as UnivMon [33], Elastic
Sketch [30], R-HHH [39], and USS [53], while reducing estimation
error by 10.4√ó (and almost 40k√ó in HHHs).
2 BACKGROUND AND MOTIVATION
In this section, we begin with the background on single-key sketches
and contrast them with the new problem of arbitrary partial key
queries. Then we discuss the potential applications of arbitrary
partial key queries and elaborate why existing solutions fall short.
2.1 Sketches for Network Measurement
Sketching algorithms (sketches) process data streams to estimate
various statistics in an online fashion. Compared to traditional
sampling-based techniques [55‚Äì58], sketches [24, 25, 29, 30, 33‚Äì
35, 59] are particularly attractive for network measurement because
of their provable and tunable accuracy-memory tradeoffs, allowing
sketches to fit in network devices with diverse resource constraints.
Sketches for network measurement have mainly followed a
single-key paradigm: each packet is identified as a 
pair to be inserted into the sketch, where the key is a flow identifier
defined by one combination of packet-header fields selected by the
operator before the measurement starts, and the value is the packet
count or the byte count of this flow. For instance, operators can
set up a heavy-hitter sketch that extracts each packet‚Äôs 5-tuple
instance as the key and the packet size/count as the value to update
the sketch. Periodically, the sketch will report the 5-tuple instances
with the largest flow sizes. In network measurement, single-key
sketches are widely used to count distinct flows [32, 60] and detect
heavy hitters [29, 59], significant changes of traffic patterns [28, 61],
and anomalies (e.g., entropy estimation) [62‚Äì64], among others.
Recent efforts [30, 31] have also improved the fidelity, resource
efficiency, or hardware compatibility of single-key sketches.
2.2 Arbitrary Partial Key Problem
In contrast to the single-key paradigm, we define a new class of
problems called arbitrary partial key query, which supports queries
on multiple keys without the need to pre-define which keys to
measure. Instead, operators only need to specify a full key that
incorporates all partial keys that might be queried in the future. We
formally define the problem as follows.
any flow ùëí ‚àà ùëòùëÉ defined on key ùëòùëÉ , we have ùëì (ùëí) =ùëí‚Ä≤‚ààùëòùêπ ,ùëî(ùëí‚Ä≤)=ùëí ùëì (ùëí‚Ä≤),
Definition 1 (Partial Key). A key ùëòùëÉ is a partial key of key ùëòùêπ
(denoted by ùëòùëÉ ‚â∫ ùëòùêπ ), if there is a mapping ùëî(¬∑) : ùëòùêπ ‚Üí ùëòùëÉ , and for
where ùëì (ùëí) is a statistic (e.g., size) of flow ùëí.
CocoSketch: High-Performance Arbitrary Partial Key Measurement
SIGCOMM ‚Äô21, August 23‚Äì28, 2021, Virtual Event, USA
For example, the size of a flow ùëí of a partial key (e.g., (56.49.82.‚àó))
equals the sum of the size of full-key flows {ùëí‚Ä≤|ùëî(ùëí‚Ä≤) = ùëí} (e.g.,
{(56.49.82.0), ..., (56.49.82.255)}). Note that a partial key can be
any subset of fields in a full key, e.g., (SrcIP, DstIP) is a partial key
of the 5-tuple full key.
Definition 2 (Arbitrary Partial Key Query). Given a full
key ùëòùêπ and a metric function ùëì , return the ùëì (ùëí) of any flow ùëí ‚àà ùëòùëÉ
for any partial key ùëòùëÉ ‚â∫ ùëòùêπ .
In this paper, we assume that ùëì is a flow size function. The
problem of arbitrary partial key query enables a more flexible way
of querying flow statistics without specifying which keys to query
beforehand. We can first define the full key as the union of all keys
that might be needed and deploy one sketch of the full key, and in
query time, operators can recover the size of any partial key.
Use cases of arbitrary partial key query: The ability to answer