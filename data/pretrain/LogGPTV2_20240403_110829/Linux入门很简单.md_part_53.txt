图7.39 删除行末的回车
![alt](images/00002.jpeg){.tpzz} 编辑的时候免不了出错，如果有误操作，可以按u键撤销上一次的操作。
![alt](images/00002.jpeg){.tpzz} 如果撤销错了，可以按Ctrl+u组合键来恢复上一次撤销的操作。
![alt](images/00002.jpeg){.tpzz} 最常用的"吭哧C，吭哧V"大法在Vim中更是出神入化。使用y键可以复制指定的行数和字符数，用法跟d键类似。例如按下y、3、y，则复制当前行向下3行的内容（包括当前行）；而y、2、向左方向键，表示复制当前字符左侧的2个字符（不包括当前行）。
![alt](images/00002.jpeg){.tpzz} 复制内容之后，按p键粘贴。如果复制的是字符，则会粘贴到当前光标所在位置，光标处原有内容顺次右移；如果复制的是整行，则会粘贴到当前光标所在行的下一行的位置，原有的行顺次向下移动。图7.40是整个复制粘贴过程的示意。
![alt](images/00423.jpeg){.calibre3}
图7.40 复制粘贴
【查找相关快捷键】
查找内容，也是一个编辑器的基本能力。在Vim中，查找指定的字符串有以下几种快捷键。
![alt](images/00002.jpeg){.tpzz} 在指令模式中按下/键，会看到Vim界面左下角出现"/"符号，然后输入想要查找的字符串并回车，Vim将从当前光标位置开始向下查找。如果找到，光标将跳转到第一个搜索结果的位置，如图7.41所示。
![alt](images/00424.jpeg){.calibre3}
图7.41 查找字符串
![alt](images/00002.jpeg){.tpzz} 在指令模式中按下Shift+/组合键，会看到Vim界面左下角出现"?"符号，然后输入想要查找的字符串并回车，Vim将从当前光标位置开始向上查找。如果找到，光标将跳转到第一个搜索结果的位置，如图7.42所示。
![alt](images/00425.jpeg){.calibre3}
图7.42 反向查找字符串
![alt](images/00002.jpeg){.tpzz} 将光标移动到要查找的某个单词的位置，然后按Shift+8组合键，则Vim从当前位置向下查找该单词；或者按Shift+3组合键，则Vim从当前位置向上查找该单词。找到后，光标自动跳转到第一个搜索结果的位置。图7.43描述的就是Shift+8组合键的使用。
![alt](images/00426.jpeg){.calibre3}
图7.43 使用Shift+8组合键查找文中相同单词
![alt](images/00002.jpeg){.tpzz} 无论使用哪种查找方式，在找到一个结果后，按下n键，则继续向同方向查找下一个结果；按下Shift+n组合键，则向反方向查找上一个结果。如果找到，则光标自动跳转到该搜索结果的位置。
7.4.3 行末模式常用命令
看到这里，您已经比懒蜗牛同学更加了解Vim了。因为他还没有记住那么多的快捷键，只是稍稍体验了一下，写了几行文字，就准备保存并退出了。
要想保存文档，需要进入行末模式。于是懒蜗牛按下了Esc键，进入了指令模式，然后又按下Shift+;组合键，就看到左下角出现了一个"："，这说明已经进入行末模式了，如图7.44所示。
![alt](images/00427.jpeg){.calibre3}
图7.44 行末模式
在这个"："的后面，可以输入很多复杂的命令，实现各种苛刻的操作要求。咱们分门别类地说说吧。
【文件操作命令】
跟文件操作相关的命令是最常用的了，懒蜗牛同学要保存他的文件就需要用到这类命令。
![alt](images/00002.jpeg){.tpzz} "w"命令------这个命令用于保存当前文件。也可以在w后面加上文件名，例如":w
back1.txt"，则代表将当前文件另存为新的文件名"back1.txt"。
![alt](images/00002.jpeg){.tpzz} "new文件名"------这个命令用于打开或者新建一个文件（同时关闭当前文件）。如果"文件名"指定的文件存在则打开，否则新建（但是要调用w命令的时候才真的存储该文件）。
![alt](images/00002.jpeg){.tpzz} "q"------退出Vim程序。如果打开的文件没有保存，会提示错误，无法退出。此时如果确认要放弃修改，强制退出，则可使用"q!"命令。
懒蜗牛同学目前就是需要保存文件，并且退出。他可以依次输入w和q命令，不过他更加灵活地运用了Vim的特性，直接在"："后面输入了"wq"并回车，于是Vim就先保存好了懒蜗牛同学修改的文本，然后退出了。
【艰巨的任务】
这一日，懒蜗牛同学又收到了MM同志的一项请求：有一个很大的文本文件，是一个聊天软件的聊天记录。每一行对话开头都有一个几点几分的标识，记录着对话的具体时间。MM想把这些时间删掉。懒蜗牛同学一想，这个要求听起来复杂，不过应该难不倒Vim吧，于是就答应了。
拿到MM发来的文件打开一看，里面大约是这么个形式（为了不泄露隐私，咱们就用"甲"和"乙"来代替聊天人的名字了）：
![alt](images/00428.jpeg){.calibre3}
以上只是其中一小段，总共的行数不少，足有3000多行。形式就是上面这样，以日期分隔的很多段聊天记录，每句话前都有具体的时间。MM的要求是删掉这些具体的时间信息，这样看着清爽一些。但是像"2010年1月17日"这样的日期信息不要删除，方便查找。还有对话里出现的时间，当然也不要删除。
如果用手一个一个删，估计懒蜗牛同学的手指头又要抽筋了。不过好在他现在已经不是菜鸟级别的使用者了，而是已经会用无比强大的Vim的入门用户啦！
【查找替换】
MM交代的这个工作，就需要使用Vim的行末模式中的查找替换命令了。这个命令大致的格式是这样：
![alt](images/00429.jpeg){.calibre3}
下面仔细说说每一项。
![alt](images/00002.jpeg){.tpzz} 查找范围------就是在哪里查找。这个范围可以是整个文件，也可以是文件中指定的几行或一行。如果要在当前行查找，那么就不写查找范围；如果要在整个文件中查找，那么就写一个"%"符号，表示全文查找；也可以写用逗号分隔的两个数字，例如"3,19"，意思就是从第3行开始找，找到第19行为止（包括第3和第19行）。
![alt](images/00011.jpeg){.tpzz}**提示：**[可以使用"\$"符号代表文件最后一行，"6,\$"表示从第6行开始，一直查找到最后一行。]{.kai1}
![alt](images/00002.jpeg){.tpzz} 查找内容------也就是想要查找的内容，这里可以使用正则表达式。
![alt](images/00002.jpeg){.tpzz} 替换内容------需要把查找到的内容替换成的字符串。如果为空，则表示删除查找到的内容。
举个例子，比如我们想要在文件的第3行到第50行中，查找所有的newbie，替换成expert。那么就在行末模式中输入如下命令：
![alt](images/00430.jpeg){.calibre3}
这样一个命令，就让所有的newbie都变成expert了。这条命令的最后一个"g"参数要说明一下。这个参数意味着替换掉每行所有的newbie，如果不加这个参数，那么当某一行找到了一个newbie并替换以后，就不再查找这一行，直接继续找下一行去了。
那么懒蜗牛同学的任务应该如何完成呢？用这个查找替换的命令，加上正则表达式就可以实现了。只见懒蜗牛同学运行了如下命令：
![alt](images/00431.jpeg){.calibre3}
稍微解释一下这个命令吧，其实都是介绍过的东西。
![alt](images/00002.jpeg){.tpzz} "%"符号代表要在整个文件中查找。
![alt](images/00002.jpeg){.tpzz} 要查找的内容是"\^\\d\\d:\\d\\d"，其中"\^"代表一行的开头，因为我们只需要找每行开头的时间，对话中的时间不需要匹配；"\\d"咱们说过，匹配一个0～9的数字。那么"\^\\d\\d:\\d\\d"用人类语言描述出来就是：每行开头出现的、由冒号分隔的、前后各有两位数字的这样的字符串。
![alt](images/00002.jpeg){.tpzz} 要替换的内容是空，意味着删除查找到的内容。
![alt](images/00002.jpeg){.tpzz} 最后没有加"g"参数，意味着我们只替换每行找到的第一个（其实我们明确写明了找行首的字符串，所以肯定只能找到一个。因为每行只可能有一个行首）。
于是，懒蜗牛同学只使用了这样一个命令，就解决了MM的复杂要求。
【过滤内容】
然而MM的要求并不满足于此，堪称"十万个怎么办"的MM同志又给懒蜗牛提出了更高的要求。这回，还是那段聊天记录，经过懒蜗牛的处理后，已经是这样了：
![alt](images/00432.jpeg){.calibre3}
MM同志觉得这聊天记录充满喜感，简直可以改编成相声了。于是MM让懒蜗牛把这个文件里面，甲和乙的话分别存成两个文件，当作台词发给两位同事，以便他们在公司年会上表演相声。也就是说，MM希望把这一个文件拆分成两个文件，比如叫"甲.txt"和"乙.txt"。那么这两个文件的内容大约就是这样：
甲.txt文件：
![alt](images/00433.jpeg){.calibre3}
乙.txt文件：
![alt](images/00434.jpeg){.calibre3}
这个要求如何满足呢？也不难，需要用到内容过滤的命令。我们可以用行末模式中的"g"命令来过滤出包含某字符串的行，也可以用"v"命令来过滤出不包含某字符串的行。并且可以在过滤之后对找到的行进行进一步处理。命令格式大约是这样：
![alt](images/00435.jpeg){.calibre3}
比如MM这次的要求，就可以总结为如下两个操作。
（1）删除所有包含"甲："字符串的行，并另存为"乙.txt"。