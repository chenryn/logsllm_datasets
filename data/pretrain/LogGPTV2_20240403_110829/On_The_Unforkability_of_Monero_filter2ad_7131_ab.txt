transactions.
Each output o in the blockchain B is associated with exactly one
secret key called key image. A key image ki needs to be published
in order to spend an output oi, however, by using a ring signature
scheme which contains a set of r outputs O = {oa, . . . , oi , . . . }, the
output oi is indistinguishable from the decoys. An output cannot be
double-spent in the same blockchain. To enforce the rule, the spent
output’s associated key image ki is recorded in the blockchain. If
a new transaction is reusing the same key image ki, the system
will be able to detect the double spending effort and reject the new
transaction.
3 RELATED WORK
3.1 Monero Traceability Analyses
Monero implements anonymity technologies as its main features
over other cryptocurrencies such as Bitcoin. Linkable Ring Signa-
ture (LRS) provides the untraceability of the sender. Ring Confi-
dential Transaction (RingCT) [23] was implemented to support
encryption of the amount of coins being transacted from the payer
to the payee. One-time Public Key (OTPK) provides the unlinkabil-
ity of the receiver by forcing the sender to create a new destination
address for every new transaction on behalf of the receiver [34].
Despite the implementation of the mentioned features, researchers
developed analysis techniques to determine traceable inputs. LRS
uses decoys (the decoys are also called mixins) in the signature
to avoid detection of the real signer. Analyses showed that zero
Figure 2: Input-output construction in a Monero transaction.
In a transaction, a set of inputs containing multiple existing
outputs produce a set of new outputs.
mixin transactions remove the untraceability of the sender [14, 21].
Although the weakness has been patched by not allowing trans-
actions without mixins, researchers found new ways to discover
the traceability of the sender through crafted transactions [35, 37]
or Monero’s Payment ID [37]. Closed set attack was introduced to
determine spent coins in Monero [39].
3.2 Velvet Fork
Velvet fork is a term coined by Kiayias et al. [12]. Rather than having
a hard fork which is considered as a risky event, the velvet fork
offers a new strategy where variables replace constant parameters
when changing the protocol. By using velvet fork, the hard fork
can be avoided. The past occurrence of velvet fork was further
investigated [40].
Although velvet fork is useful to avoid a hard fork that changes
parameters, the velvet fork is unusable when the change is in the
protocol layer. If the velvet fork technique is applied to Monero,
then increasing ring size would be extremely easy by modifying a
prepared variable holding the ring size value. However, protocol
layer changes such as modifying decoy selection method, adding
new signature features [30], or changing consensus method [6]
cannot be done by using velvet fork.
3.3 Replay Protection
Replay protection is a mechanism to avoid replay attack. The term
replay attack in cryptocurrency refers to retransmission of a valid
transaction data on a cryptocurrency to other compatible forks of
the cryptocurrency [17]. The result of the replay attack is that the
payee will get multiple payments in different cryptocurrencies such
that the payer suffers loss. The paper by McCorry et al. [17] de-
scribes several examples of replay protections being implemented
Session 8: Blockchain SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand623AsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand
Wijaya et al.
in different cryptocurrencies, such as Chain ID, Transaction
Version, Check Block At Height, and Sighash Enum.
Chain ID has been implemented in Ethereum since Spurious
Dragon hard fork [4], while Transaction Version, Check Block
At Height, and Sighash Enum were proposed as alternative solu-
tions for replay protection in Bitcoin [17]. A new proposal intro-
duced new replay protection methods, namely Migration Input
and Hardfork Oracle [17]. Migration Input was proposed to be
implemented in Bitcoin protocol, where the input hash is modified
from 32 bytes to 41 bytes to accommodate extra information. By
having a different input hash scheme, the old protocol will not be
able to validate the transaction, and therefore only the new compat-
ible protocol validates the transaction [17]. Hardfork Oracle was
proposed to be implemented as an Ethereum smart contract which
is used for automatic detection of transactions from different forks.
There is no replay protection currently being implemented in
Monero protocol [25]. One of the ways to create a transaction with
a built-in replay protection is to include at least one output that
can only be found in the intended chain as one of the decoys in the
ring signature [32].
3.4 Attacks on Monero Protocol Update
The asynchronous protocol update (i.e hard fork) on Monero can
also lead to attacks [36]. A research discovered that the nodes that
have not yet updated their applications to the latest version (which
run the latest protocol version) are prone to Denial of Service (DoS)
attack, where a large number of transactions can be created to flood
the nodes’ temporary storage txpool.
Furthermore, the DoS attack can be utilised to "announce" the
traceability of the inputs to public by submitting two different
transactions that spend the same coins, one transaction submitted
to the old nodes (which run the old protocol) and another to the
new nodes (wich run the new protocol). If the required condition
of the network holds, then the transactions that were sent to the
old nodes will never be confirmed to the network, hence the double
spending will never occur. However, since two coins appear twice
in different nodes (which run different protocols), then the real
inputs of the related transactions can be deduced.
4 THREAT MODEL
The untraceability in Monero requires that an observer cannot
guess the real output being spent in a ring construction R with a
probability of more than 1
r , where r is the number of ring members.
In this case, the anonymity of the real output depends on the size
of r.
We define an input Ij traceable to an output oj as follows. The
output oj is an output of a blockchain B1 in a linkable ring signature
R1 with a set of output O1 = {oa, . . . , oj , . . . , ol} as its ring members
and key image kj, such that R1, kj, and O1 are parts of Ij. The same
output oj appears on another blockchain B2 which is included
in another linkable ring signature R2 with a set of output O2 =
{om, . . . , oj , . . . , oz} and key image kj. From this occurrence, it can
be concluded that the key image kj is associated to the output
oj. Therefore, the input Ij is traceable to the output oj, because
the probability of guessing the real output is 1. This occurrence
also fulfills the linkable condition as described in Linkable Ring
Signature [16] as it can be concluded that the two ring signatures
R1 and R2 are created by the same person, assuming that the secret
key image kj is only known to the owner.
Anonymity reduction occurs when q members of a ring R can
be deduced since they are no longer fit as the candidate when
guessing the real output, therefore the anonymity r is reduced
by q. We define a reduced anonymity input Ii as an input of a
blockchain B1 in a linkable ring signature R3 with r as the ring size
using a set of output O3 = {ob , . . . , oe , . . . , oi , . . . , om} and key
image kh. The same key image kh was found on a ring signature
R4 recorded on another blockchain B2 using a set of output O4 =
{oc , . . . , oe , . . . , oi , . . . , on} where at least two outputs {oe , oi} in
R4 fulfill the following criteria: {oe , oi} ∈ O4 and {oe , oi} ∈ O3. In
this scenario, it is inconclusive whether key image kh is associated
to oe or oi. The example of a traceable output and an anonymity
reduction is shown in Figure 3.
We define passive attack and active attack in Monero. In the
passive attack, an attacker collects information from the public
blockchain(s) and conduct traceability analyses. In the active attack,
the attacker controls dishonest nodes which return false informa-
tion. By returning false responses of key image-related requests, the
dishonest nodes expect that the client suffer anonymity reduction
from the problem of key reuse, especially when a client spends the
same coins in different blockchains.
We assume that all cryptocurrency backers, including software
developers, community members, and users, desire the best privacy-
preserving features for their systems. However, there also exist
some users in the system who unknowingly spend identical coins in
multiple blockchains such that the traceability of those transactions
are revealed. The events cause "cascade effect" which make other
transactions traceable or suffer anonymity reduction [21]. It is
also assumed that the majority of the nodes in the system behave
honestly by sending the correct responses or information from any
requests.
It is assumed that the current system can only accept small
modifications which do not greatly affect how the whole protocol
is run. However, it is also assumed that hard forks can occur at
any given time such that the same unspent coins before the fork
can be spent multiple times on different blockchains after the fork.
Conducting a hard fork is incentivized financially as the newly
created coins can be sold in the markets.
5 ANALYSES
5.1 Analysis on Traceable Inputs
We collected all transaction data on three different blockchains,
which we called Monero6, Monero7, and MoneroV. We use the
term Monero6 to refer cryptocurrencies that are using the Monero
protocol version six: Monero Original, Monero 0, and Monero Clas-
sic. Monero7 is used to refer the Monero main blockchain which
runs protocol version seven (as of October 2018). MoneroV is a
self-explanatory, referring to the blockchain system which runs
MoneroV protocol.
A checking algorithm was constructed as follows.
(1) An array Kr es is initialised. It will be used to store the iden-
(2) For each key image ki ∈ K do the following steps.
tified key images as the final result.
Session 8: Blockchain SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand624On The Unforkability of Monero
AsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand
Figure 3: The inputs I1 and I3 have two common similarities: the key image k1 and the output o4. Both inputs I1 and I3 are
traceable. The inputs I2 and I4 contains the same key image k2, however there are two identical outputs in the ring, namely o7
and o10. Both inputs I2 and I4 suffer anonymity reduction by three.
(a) Compute the total number of its occurrence in all three
blockchains and store the result in a variable, occ.
(b) Compute the number of unique transaction hash (txhash)
and store the result in another variable, unq.
(c) Execute a conditional statement as follows: i f (occ > 1)
and (unq > 1) then Kr es ← ki. The conditional statement
is required to filter out key replay cases as they do not
help identifying the real output to be spent.
(3) Return Kr es.
We have examined three blockchains by using the algorithm above
on a dataset we built by extracting non-coinbase transctions (trans-
actions that are not block reward) confirmed on block number
1,546,000 to 1,675,606 in Monero6 (181 days period), block num-
ber 1,546,000 to 1,675,303 in Monero7 (181 days period), and block
number 1,564,966 to 1,671,617 in MoneroV (152 days period). The
cut-off period for the data extraction is 4 October 2018. We also
have conducted a cascade effect analysis to determine how many
traceable inputs as the impact of the problem of key reuse on the
same dataset. The result is presented in the Table 1.
Based on the algorithm we developed, we discovered 52,924
traceable inputs on Monero6 (including the ones discovered us-
ing cascade effect method), 53,477 traceable inputs on Monero7,
whereas there are only 7,542 traceable inputs found on MoneroV.
Although there are only 29 days difference between MoneroV and
both Monero6 and Monero7, the traceable inputs found on Mon-
eroV is only around 14% of traceable inputs found on both Monero6
and Monero7. There is also an extreme difference on the num-
ber of non-coinbase transactions between Monero7 and the other
two cryptocurrencies. Monero7 has 810,409 transactions, where
Monero6 and MoneroV only contains 5% and 10% of Monero7’s
transactions respectively.
The traceable inputs in Monero6 are 19% of Monero6’s total
number of inputs in our dataset, whereas the traceable inputs in
Monero7 and MoneroV are only 2% of their total inputs. This shows
that the problem of key reuse has a more significant impact on
Monero6 than on Monero7 and MoneroV. Also, about 90% of all
traceable inputs are found among Monero6 and Monero7, whereas
only 6% of the traceable inputs are found on all three blockchain
branches. This shows that Monero6 is the greater source of the
problem of key reuse to Monero7 than MoneroV to Monero7.
5.2 Analysis on Anonymity Reduction
We also examined reduced anonymity as the side effect of the
traceable inputs and cascade effect. An input with a ring size of r is
deemed to suffer anonymity reduction if there are at most r −2 ring
members that have been identified to be spent on other transactions.
By suffering reduced anonymity, the real output is still untraceable.
However, the probability of guessing the real output increases from
r−u , where 1 ≤ u ≤ (r − 2) and u is the number of outputs
1
r to 1
that have been known to be spent in other transactions.
We discovered 1,848 inputs in Monero6 that suffer anonymity re-
duction. Likewise, 2,819 inputs in Monero7 and 264 ring signatures
in MoneroV suffer anonymity reduction while still being untrace-
able. Figure 4 shows the trend of the anonymity reduction on all
three blockchain branches. About 95% of the anonymity reductions
have a reduction size u between 1 to 5.
The result shows that a transaction having a ring size of 5 or less
is riskier than one having a ring size of more than 5. We calculated
the average ring size for the three blockchain branches starting
from the first block of the fork to the cut-off period on 4 October
2018, where Monero6, Monero7, and MoneroV have an average
ring size r of 5.07, 7.56, and 7.75 respectively. Having a bigger
ring size provides a better protection on the anonymity of the
input, although creating a transaction with a bigger ring size may
result in a more expensive transaction fee to be paid by a user.
Determining a bigger minimum ring size in the protocol level can
also be helpful to ensure that the users have a sufficient anonymity
in their transactions. While Monero6’s minimum ring size was five,
Monero7 and MoneroV has a minimum ring size of seven. Based
on the result, it is advisable to have ring size r > 5.
Session 8: Blockchain SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand625AsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand