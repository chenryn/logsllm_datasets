98.43
20
106954650
104857755
98.04
24
1426063275
1392574380
97.65
6.2 Normal World Attack
We run Algorithm 1 in the normal world and provide different
external conditions to the victim core that performs it. We insert
additional program codes to check the changes on the public mod-
ulus N during the execution. Figure 8(b) shows the number of bit
modifications on N with different voltages and duration.
In this attack, we do not consider the waiting time for victim
function as the target function is determined and there are no
irrelevant codes are executed. According to our attack attempts on
the victim RSA decryption function that uses the public modulus
of Widevine (section C in Appendix), it has a good result when the
glitch voltage is 0.65V and duration time is 3800 NOP loops. Among
500 attempts, 117 of them successfully inject faults into function
EndianInversion, and 23 of them (about 4.6%) result in factorable
Nm. In all of the factorable Nm, 18 of them are equal.
6.3 Secure World Attack
Verifying a trustlet requires four RSA-based authentications, which
form a certificate chain. When loading a trustlet into TrustZone,
the trusted execution environment (TEE) [24] authenticates the
certificate chain by utilizing the RSA decryption on certificates and
recognizes whether the decryption results are the same as code
hashes. Tang et al. [65] described the signature decryption function
in TEE, which is very similar to Algorithm 1. The main difference
is that its MonMul is based on r−1. What is more, r−1 relies on Nin
instead of N . In other words, if hardware faults create a factorable
Nm, we will be able to construct the poisonous input ciphertext.
6.3.1 Waiting time for the victim function. Different to the pure
normal-world RSA decryption, authenticating a trustlet requires
several calculations. Therefore, finding the best fault injection
point is critical to improve the attack reliability. RSA_Decoding is
loaded into memory with a constant start address. We utilize the
Prime+Probe cache side-channel attack [49] to monitor the instruc-
tion executions when loading widevine into TrustZone in order to
position the start time of the last RSA_Decoding. First, we load a
block of dummy instructions from the attacker procedure to fill up
the cache that RSA_Decoding will be mapped to. Then, the attacker
procedure’s dummy instructions and the victim procedure’s RSA
are executed on different cores in parallel. Because the processor
cores share the same cache and the dummy instructions take place
of the RSA’s cache sets, the dummy instructions will miss in the
cache if the processor starts to execute the last RSA_Decoding. The
Prime+Probe can know the cache-missing event because the run-
time of the instruction is increased. Therefore, we can finally know
the right start time of the RSA_Decoding. We plot the waiting time
with diverse frequencies in Figure 10 .
6.3.2 Attacking parameters. The signature decryption algorithm in
TEE is invariant and the control flow transitions are fixed, therefore,
the previous delay is almost stable. Since the function EndianInver-
sion in TEE is loaded into a certain location, we time the duration
time from the start of the last RSA decryption to the start of func-
tion EndianInversion to get the previous delay through the cache
side signals. As shown in Figure 7, the previous delay for the RSA
attack in normal world is different from it in TrustZone because
the two RSA algorithms are actually different.
Our goal is to fault N into Nm. The two RSA algorithms have
the same EndianInversion, therefore, the glitch voltage-duration
pair that is usable for the attack in the normal world is also usable
for the attack in TrustZone.
6.3.3 Performing attack. The location of Nm is hard-coded to an
address 0x0FC8952C. We utilize the vulnerability exploit codes in
AES attack to read Nm. The shell codes are implemented to transfer
Nm into normal world for accessing outside TrustZone. Note that
the relevant code sections for the signature validation are identical
across versions [65]. In this attack, we first use VoltJockey to trigger
hardware faults into the last RSA authentication to acquire an
available Nm when loading the widevine trustlet. Then, we build a
Session 2A: Side Channels ICCS ’19, November 11–15, 2019, London, United Kingdom205signature based on the hash of malicious codes and Nm. Next, we
replace the old signature with the new one. Finally, we perform our
attacks with the same parameters to introduce the output of the
last RSA certificate to be the desired hash at loading step.
According to our tests on different attacking parameters, the
parameter of {Fa = 0.42GHZ, Fv = 2.65GHZ, Vl = 0.65V , Vb =
1.055V , Tw = 61942, Tp = 87267, Td = 3800} results in the best
performance. Among 200 attempts, 73 of them successfully intro-
duce faults to N , 21 of which are factorable and 15 of them are
the same value. We use the Nin that has 2 bytes (byte 146 and 147)
′
changed by faults to construct the attack signature C
m, which is
shown in section C in Appendix. An untrusted application can be
successfully loaded into TrustZone in 94 attempts on average.
7 RELATED WORKS
Fault injections [1] are originally applied as the system reliabil-
ity verification technologies. However, they are also effective in
malicious attacks, especially combine with other attack methods,
such as differential fault attack (DFA) [9, 10, 68]. The faults can
be induced by hardware (changing the working environment with
supererogatory hardware units, such as, frequency [21, 69], voltage
[4, 6], temperature [42], light laser beam [18], ion radiation [62],
sound [52], electromagnetic [20], et al.), software [25, 28, 61], or sim-
ulation [27, 46]. In this section, we review the related voltage-based
and frequency-based fault injection attacks in this domain.
7.1 Voltage-based Fault Injection Attacks
Selmane et al. [63] might be the first ones to experimentally realize
a practical fault attack by underpowering a smart card that pre-
serves an AES function using a peripheral power supply, which
is based on the random errors model invented by G. Piret and J.J.
Quisquater [53]. Barenghi et al. [4] proposed a fault model based on
the effects of underfeeding the power supply for an ARM proces-
sor and accomplished the attacks on the implementations of RSA
primitives, in which the voltage supplied to the ARM processor is
kept constantly lower than the normal voltages driven by Agilent
3631A. Barenghi et al. [6] also proposed an AES attack induced by
low voltage-based faults, which is implemented by employing an
operational amplifier to change the voltage supplied to the ARM-
based development board. As an extension to the two works above
[4, 6], Barenghi et al. [7] proposed a general low voltage-based fault
attacks to break software implementations of AES and RSA.
Compared to the existing low voltage-based fault injection at-
tacks, the VoltJockey method is more pragmatic and usable. The
VoltJockey is totally controlled by software instead of using any aux-
iliary hardware units. Besides, we successfully conduct VoltJockey
on a commercial device and demonstrate that the attack is danger-
ous to the secure execution environment. Moreover, the attack does
not influence other applications running on non-victim cores.
7.2 Frequency-based Fault Injection Attacks
The basic idea of frequency-based fault injection attacks [21, 48, 59,
69] is that the expected output of a circuit may not be ready for the
use in next unit if the frequency is too high to be met. The attacker
can then obtain target data based on the wrong output that is influ-
enced by the error. However, most of them require the frequency is
changed by extra hardware units. Tang et al. proposed the Clkscrew
[65] that uses overclocking technique to induce hardware faults
with software. They verified that the ARM/Android devices do not
lock core frequencies and the frequency of a core can be configured
by another core in DVFS. Clkscrew exploits the above vulnerability
of DVFS to overclock ARM processors and induce hardware faults.
However, the most significant prerequisite of CLKscrew is that
the processor can be overclocked, which can be easily mitigated
by frequency locking in which the frequency is locked in a certain
range. In this study, the VoltJockey is proposed to be another us-
able fault-injection attack method, which exploits the legal voltage
differentials corresponding to different frequencies. The voltage
differences currently exist in most processors using the DVFS tech-
nique, no matter whether they are frequency locked or not.
8 COUNTERMEASURES AND EXTENSIONS
In this section, we discuss the possible hardware-based and software-
based countermeasures to the VoltJockey, and also look forward to
some future extensions of this study.
8.1 Hardware-based Countermeasures
Limiting voltage. Limiting the core voltage to break the volt-
8.1.1
age differentials is effective to prevent VoltJockey. The simplest
method is to fix the core voltage and prevent all modifications on it
with a watchdog circuit. This is effective but will introduce more
energy wastes. Similarly, assigning a dedicated frequency to all
cores is useful but is not economical for energy, either. What is
more, the hardware can be designed to always configure the core
voltage as the maximum voltage that corresponds to all the current
core frequencies in the OPPs. The method can repel VoltJockey with
less energy loss. However, the necessary alternations on hardware
need to be implemented to limit the core voltage.
8.1.2 Abandoning shared hardware regulator. It is useful to ad-
dress VoltJockey by ensuring every core has its own hardware
voltage regulator. Besides, the voltage of a core can only be alterd
by the software running on it. This countermeasure requires that
the cross-core voltage setting should be prevented and the corre-
sponding software-based regulator drivers should be redesigned.
Another shortcoming of this design is that the energy optimization
is achieved on a local core rather than the entire processor.
Separating the secure core from application cores. Taking
8.1.3
malicious actions on the secure execution environment is the most
common target of VoltJockey since a high privilege is required to
induce hardware faults. The secure cores can be redesigned and
are separated from application cores, like CP15 co-processor in
the ARM platforms. However, the design will be resource waste
and enrich the hardware cost. Besides, the hardware regulator and
corresponding drivers of secure cores should be distinguished with
them of application cores.
8.2 Software-based Countermeasures
Integrity verification for regulator driver. In this study, we
8.2.1
break some security mechanisms (section 4.4 and section 4.5) for-
merly enforced by the software regulator driver, which might be
mitigated by some integrity-verification methods. The credential
Session 2A: Side Channels ICCS ’19, November 11–15, 2019, London, United Kingdom206of the regulator driver can be generated and stored in the secure
boot image before releasing the software system. When loading
the system into devices or calling functions of the regulator driver,
TEE regenerates the credential and compares it with that stored
in the boot image. The credential can be accomplished with RSA,
SHA-256, MD5, and so on. However, such a mechanism still relies
on the OS and software systems to guarantee the security.
8.2.2 Trusted voltage monitor. We can develop a trustlet based on
TrustZone to continually monitor the core voltage and frequencies.
If the trustlet finds that the core voltage is out of predefined legal
ranges, it triggers a warning or a privileged voltage recover opera-
tion or just a system reboot. However, the trade-off between the
voltage detection rate/reliability and power consumption may still
leave the possibility for attackers to find feasible injection points.
8.3 Future Extensions
The VoltJockey may also be promising in other related fields.
8.3.1 Attacking other cryptosystems. In addition to AES and RSA,
many other cryptosystems that have been theoretically proved to
be vulnerable to DFA, like DES [56], 3G-SNOW [19], ECC [8], SMS4
[22] and Grain family [60], may become the next targets.
8.3.2 Being a general attack helper. VoltJockey might also be em-
ployed to achieve malicious data modifications, which may help
attackers prepare vulnerabilities for other attacks. For example, OS
can be misled to update software from a disguise website if the
update source is changed and the RSA-based verification is evaded;
Internet data will be sent to another destination if it is modified
at packaging; the control flow [54] might be changed if the desti-
nations of direct or indirect jump instructions are altered, or the
conditions of conditional instructions are modified.
8.3.3 Attacking Intel software-guard extensions (SGX). SGX [26, 45]
extends the hardware and software architectures of Intel-based SoC
for providing a trusted execution environment. The trust base of
SGX is only bound to CPU [17]. Nevertheless, DVFS is enabled by
Intel processors and the voltage differences between disparate fre-
quencies remain subsistence even though most of Intel processors
do not enable overclocking technology5. Therefore, the VoltJockey
might also be effective for attacking Intel SGX.
9 CONCLUSION
ARM TrustZone is a system-wide secure technology for a wide
variety of devices. Most of the current attack techniques to Trust-
Zone are software vulnerability-based. In this paper, we propose
the VoltJockey, a hardware fault-based attack to TrustZone using
software-controlled voltage manipulation, which exploits the volt-
age management vulnerability of DVFS. We deploy the VoltJockey
on an ARM-based Krait multi-core processor, whose core frequen-
cies can be different but the processor voltage is controlled with
a shared hardware regulator. Experiments show that the attack
method can successfully acquire the key of AES protected by Trust-
Zone, and guide the RSA-based signature verification to output
5The processors whose version number ended with K support overclocking, and some
processors ended with X and E enable overclocking. However, the most deployed ultra-
low-voltage processors whose version number ended with U cannot be overclocked.
desired plaintexts, which suggests a comparable efficiency to side
channels in obtaining TrustZone-guarded credentials, as well as a
potential capability in cheating the RSA-based verification chain. At
the end of the paper, we also give detailed analyses and discussions
on the possible countermeasures to the attack and look forward to
other potential and promising extensions of this work.
ACKNOWLEDGMENTS
We gratefully thank the anonymous reviewers for their helpful
comments and Xizhen Huang for her works in the experiments.
We appreciate Mr. Adrian Tang’s kind suggestions in the personal
communications regarding the experiments. This work was sup-
ported in part by the National Key Research and Development Plan
of China under Grant No. 2016YFB1000303 and the Guangdong
Province Key Project of Science and Technology under Grant No.
2018B010115002.
REFERENCES
[1] Jean Arlat, Martine Aguera, Louis Amat, Yves Crouzet, J-C Fabre, J-C Laprie,
Eliane Martins, and David Powell. 1990. Fault injection for dependability val-
idation: a methodology and some applications. IEEE Transactions on Software
Engineering 16, 2 (Feb 1990), 166–182. https://doi.org/10.1109/32.44380
[2] A ARM. 2009. Security technology building a secure system using trustzone tech-
nology (white paper). ARM.
[3] Feng Bao, Robert H Deng, Yongfei Han, A Jeng, A Desai Narasimhalu, and T
Ngair. 1997. Breaking public key cryptosystems on tamper resistant devices in
the presence of transient faults. In International Workshop on Security Protocols.
Springer, Berlin, Heidelberg, 115–124.
[4] Alessandro Barenghi, Guido Bertoni, Emanuele Parrinello, and Gerardo Pelosi.
2009. Low Voltage Fault Attacks on the RSA Cryptosystem. In 2009 Workshop on
Fault Diagnosis and Tolerance in Cryptography (FDTC). IEEE Computer Society
Press, Lausanne, Switzerland, 23–31. https://doi.org/10.1109/FDTC.2009.30
[5] Alessandro Barenghi, Guido M Bertoni, Luca Breveglieri, Mauro Pellicioli, and
Gerardo Pelosi. 2010. Fault attack on AES with single-bit induced faults. In
2010 Sixth International Conference on Information Assurance and Security. IEEE,
Atlanta, GA, USA, 167–172. https://doi.org/10.1109/ISIAS.2010.5604061
[6] A. Barenghi, G. M. Bertoni, L. Breveglieri, M. Pellicioli, and G. Pelosi. 2010. Low