# Golang实现RMI协议自动化检测Fastjson
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 传统检测方式
笔者继续带大家炒Fastjson的冷饭。关于漏洞分析和利用链分析文章网上已有大量，但是关于如何自动化检测的文章还是比较少见的，尤其是如何不使用Java对Fastjson做检测。是否可以
**不用Dnslog平台** ，也 **不用自行搭建JDNI/LDAP服务** ，就可以进行无害化的扫描呢？
其实`tomcat-dbcp`的`BasciDataSource`链可以做到不借助JNDI/LDAP触发反序列化漏洞，但问题还是在于需要自行搭建Dnslog平台。不借助这条链，还有办法吗？
首先我们来看看市面上已有的Fastjson检测工具：
###  BurpFastJsonScan
其中第1-4条Payload过长没有截图，正是rmi和ldap的`JdbcRowSetImpl`链，分成多种是为了绕各个小版本，并且做了编码。所有的Payload都采用了Dnslog的方式，值得一看的是后几条Payload直接用了`java.net`包，感觉这种不太算漏洞利用，只是简单的反序列化做验证
而以上所有的Payload都需要Dnslog平台，并且需要自行搭建JNDI/LDAP服务，才可以进行盲打
    public DnsLogCn(IBurpExtenderCallbacks callbacks) {
        this.callbacks = callbacks;
        this.dnslogDomainName = "http://www.dnslog.cn";
        this.setExtensionName("DnsLogCn");
        this.init();
    }
sleep后二次验证，是很好的做法，总体来说该检测工具是不错的Burpsuite插件
    // 防止因为dnslog卡导致没有检测到的问题, 这里进行二次检测, 保证不会漏报
    // 睡眠一段时间, 给dnslog一个缓冲时间
    try {
        Thread.sleep(8000);
    } catch (InterruptedException e) {
        throw new RuntimeException(e);
    }
    // 开始进行二次验证
    String dnsLogBodyContent = this.dnsLog.run().getBodyContent();
    if (dnsLogBodyContent == null || dnsLogBodyContent.length() port]`用于区分每一个目标。另外后续该扫描器需要加入其他插件，将会变得较臃肿
是否可以用Golang模拟RMI协议，用于检测目标是否存在Fastjson漏洞
给出RMI官方文档：[文档1](https://docs.oracle.com/javase/8/docs/platform/rmi/spec/rmi-protocol3.html)，[文档2](https://docs.oracle.com/javase/9/docs/specs/rmi/protocol.html#overview)
###  报文分析
  * client->server
参考协议文档：0x4a 0x52 0x4d 0x49 Version Protocol
其中Vesion表示版本，应该是0x00或0x01，
Protocol表示三种具体协议，比如当前0x4b表示`StreamProtocol`
    原始报文：4a 52 4d 49 00 02 4b
  * server->client
参考文档0x4e表示`ProtocolAck`，是正常情况下的ACK确认
0x0009表示报文长度为9，其实是IP地址长度的表示
`31 32 37 2e 30 2e 30 2e 31`->`127.0.0.1`
最后的0xc4和0x12表示50194端口号
    原始报文：4e 00 09 31 32 37 2e 30 2e 30 2e 31 00 00 c4 12
  * client->server
0x000d表示长度13，而这13位正是一个内网的IP：192.168.222.1
这个内网IP涉及到单波的概念，参考链接：[JDK源码](https://github.com/frohoff/jdk8u-jdk/blob/master/src/share/classes/sun/rmi/server/UnicastRef.java)
    原始报文：00 0d 31 39 32 2e 31 36 38 2e 32 32 32 2e 31 00 00 00 00
  * client->server
0x50是一个flag，代表call操作，0xaced是常见的java magic
number。后面这一部分是Java的序列化数据，没有分析的必要（不过注意到末尾的Exploit是JNDI Server绑定的Path）
    原始报文：
    0000   50 ac ed 00 05 77 22 00 00 00 00 00 00 00 00 00   P....w".........
    0010   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................
    0020   02 44 15 4d c9 d4 e6 3b df 74 00 07 45 78 70 6c   .D.M...;.t..Expl
    0030   6f 69 74                                          oit
  * server->client
server数据没有发送结束，0x51是一个flag，代表ReturnData真正的返回数据
后续aced开头的都是java序列化数据
    原始报文：
    0000   51 ac ed 00 05 77 0f 01 c6 ee 4f 24 00 00 01 7b   Q....w....O$...{
    0010   11 5d c6 ff 80 08 73 72 00 2f 63 6f 6d 2e 73 75   .]....sr./com.su
    0020   6e 2e 6a 6e 64 69 2e 72 6d 69 2e 72 65 67 69 73   n.jndi.rmi.regis
    0030   74 72 79 2e 52 65 66 65 72 65 6e 63 65 57 72 61   try.ReferenceWra
    0040   70 70 65 72 5f 53 74 75 62 00 00 00 00 00 00 00   pper_Stub.......
    0050   02 02 00 00 70 78 72 00 1a 6a 61 76 61 2e 72 6d   ....pxr..java.rm
    0060   69 2e 73 65 72 76 65 72 2e 52 65 6d 6f 74 65 53   i.server.RemoteS
    0070   74 75 62 e9 fe dc c9 8b e1 65 1a 02 00 00 70 78   tub......e....px
    0080   72 00 1c 6a 61 76 61 2e 72 6d 69 2e 73 65 72 76   r..java.rmi.serv
    0090   65 72 2e 52 65 6d 6f 74 65 4f 62 6a 65 63 74 d3   er.RemoteObject.
    00a0   61 b4 91 0c 61 33 1e 03 00 00 70 78 70 77 36 00   a...a3....pxpw6.
    00b0   0a 55 6e 69 63 61 73 74 52 65 66 00 0d 31 39 32   .UnicastRef..192
    00c0   2e 31 36 38 2e 32 32 32 2e 31 00 00 f3 bd 23 92   .168.222.1....#.
    00d0   b3 d9 f7 a3 45 9c c6 ee 4f 24 00 00 01 7b 11 5d   ....E...O$...{.]
    00e0   c6 ff 80 01 01 78                                 .....x
  * client->server
数据接收没有问题，给服务端一个Ping（0x52）
    原始报文：52
  * server->client
对于客户端Ping的响应（0x53）
    原始报文：53
  * client->server
查看文档这里是分布式垃圾回收相关（flag:0x54）的内容，笔者测试多次，返回都是相同的数据，也许是一个确定的值？这点还有待分析，不过第一个value是可以确定的
    0000   54 c6 ee 4f 24 00 00 01 7b 11 5d c6 ff 80 08      T..O$...{.]....
###  Golang实现
本文的重中之重就在这里，我将给出完整的Golang解析案例
简单的TCP监听：
    func startListen(host string, port int) {
        address := fmt.Sprintf("%s:%d", host, port)
        localAddress, _ := net.ResolveTCPAddr("tcp4", address)
        l, err := net.ListenTCP("tcp", localAddress)
        if err != nil {
            panic(err)
        }
        doListen(l)
    }
    func doListen(l net.Listener) {
        conn, err := l.Accept()
        if err != nil {
            panic(err)
        }
        data := make([]byte, 1024)
        _, err = conn.Read(data)
        if err != nil {
            panic(err)
        }
        handleFirst(data, &conn)
    }
解析第一个请求
    func handleFirst(data []byte, conn *net.Conn) {
        fmt.Println("client->server")