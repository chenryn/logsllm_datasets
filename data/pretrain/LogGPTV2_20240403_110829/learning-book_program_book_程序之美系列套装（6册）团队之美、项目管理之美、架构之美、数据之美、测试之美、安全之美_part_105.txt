## Page 584
计被妥善考虑的可能性，同时也有助于设计的质量。也许对项目经
理而言，更重要的是在开始建立原型时，让程序员有时间去研究他
们后面需要使用的并发技术。如果他们明智地投入设计时间，那么
他们生产的产品代码质量应该会得以提开。即使最环的情况下，我
确信，客户也将会为软件中额外的Bug得以修改而表示感谢。
以下是此时程序员应该有责任回答的问题的简要列表：
从高层次看，我们如何建立呈现在设计原型中的东西？是否存在可
用或应该使用的现有代码或技术？
是否存在设计师应该注意的合理的设计变化，以降低工程成本？
哪些是需要的5个或6个主要组件？它们互相如何关联？从最高层次
知的组件，需要程序员对其进行研究。）
最大技术风险在哪里？哪些组件最难以实现或最复杂？
哪些组件的哪些接口最复杂或最可能失败？（如果有专职的测试人
员或QA人员，可能最适合回答该问题。）
就像设计师在没有设计原型时，无法自信地回答复杂的设计问题那
样，对于工程师，如果没有工程原型（无论他怎么说），也很无法
自信地回答复杂的工程问题。如果需要建立多种原型，他们彼此应
该同步进行。首席设计师和首席工程师最好花时间彼此交谈、提问
问题并通过相互帮助来作出好的决策。这两种建立原型的工作，应
该在同一条路径上，最后在概念上会合：工程和设计想法应该匹
配。
可选方案会增加成功几率
对于用户界面和网站设计，我曾参与的多数原型或自己建立的原
型，有很多的兄弟姐妹。通过创意过程早期产生的大量的想法，许
多可选方案看起来都和其他方案一样合理。了解哪一种方案更好的
唯一方法，就是测试他们。有制作原型经验的设计师或工程师有能
力将用户界面、布局或其他细节改成任意数目的配置选项（CSS和
HTML是这方面的最佳实例，其中有很多层可被独立修改，不会互
相影响）。灵活的原型可以促使讨论和决策更快地产生，因为人们
无需在心里想像它的样子。
583
---
## Page 585
我通过经验了解到，无论大家看起来是多么意见一致，如果看到的
不是同一个图像，他们也许根本就不同意。每个人可能拥有的东西
和他心里所看到的东西差别会极大，当他对别人说“是”的时候，实
际上同意的可能是一件完全不一样的东西。这样，后面设计师或项
目经理因这类混淆而受责备的机会就会增加。原型是防止发生这种
事情的一种可靠方式，因为它们是实际的东西，可以在后面用于展
意这样的明确设计。”你应该特别大声说出，你正在利用这种方式
来进行原型或屏幕快照设计。
问题是为了选代
第一个原型建好后，大量新的想法和问题会接踵而来，包括修改、
强化以及尝试新想法的建议。如果这是早期原型，下一次选代也许
将集中于探索重要想法或大的修改上；如果是晚期原型，选代应该
用于缩小设计空间，并协助作出决策。每次选代的时候，都有机会
对设计进程进行新的讨论。这些讨论的最佳结构是建立一组问题，
用来帮助评估设计，并使讨论更加高效。
以下是关于早期原型选代的一些问题：
该原型满足了哪些需求？我们可以对其验证吗？（可用性，用例
等。）
对于需要解决的问题，这个设计有哪些优缺点？（从可用性、业
务、技术等角度考虑每种设计的优缺点。）
需要什么数据来评估这个设计？（也许是可用性研究、通过程序员
非正式地检查工程合理性、营销、专家意见等。）
我们可以从此设计中学到什么，应该在下次尝试时继续保持或去除
的？
在下次选代时，我们需要做什么工作使其更好？
在各个想法分组或其他原型中，是否存在我们应该包含进来的其他
想法？
以下是关于晚期原型选代的一些问题：
584
---
## Page 586
这可以帮助我们作什么决策？
这可以帮助我们关闭哪个并放问题？
这种设计是否确认了我们需要研究的问题的存在？它是否解决了我
们需要解决的问题？
在下一次选代中，我们需要做什么尝试，来使我们的工作更靠近编
写规格说明书阶段？
通过回答这些问题，设计师就有足够的信息来做另一版本的原型，
也许是整合两种不同可选方案到一起，或者把设计分成两个新的可
选方案。只要所做的事最终可让设计工作更接近于完成，对于允许
做什么或不允许做什么，应该没有任何限制。
开放问题列表
随着可选方案范围的缩小，项目经理会有一个新责任：开放问题列
表。并放问题是指任何需要决定或考虑、但尚未解决的问题。它在
本质上是一个包含任何需要完成的事情的问题列表，根据它对实现
的可能影响来划分优先级。与列出问题的质量以及努力解决问题的
人员的勤奋相比较，此列表的形式不如前者重要。我会在白板上标
示出来，或者通过Excel电子表格记录下来，但我不能说由于我所选
择工具的不同，而产生明显不同的结果。我不认为这些列表必须像
源代码那样控制和管理（即，除非你的组织的政治认为这是值得
的），我认为工具越简单越好。
模式用A还是用B？"或者"我们何时需要Sally最终UI设计？”），但
是，在编写完规格说明书时，该问题列表应该得以细化。每个项目
旁边应该标有正在负责解决该问题的人员的名字。确保每个人知道
自己被分配的问题应该是PM的工作，PM要适度催促，跟踪问题执
行直到解决。
程序员应该对工程问题和研究全面负责，但如果存在PM可以承担
的问题，他就应该去承担。通常，这些问题可能会影响工程的进
展，但并非都只是工程上的问题。例如营销审核、可用性考虑、品
牌以及可视化设计，项目经理应该对这些问题进行追踪，因为对于
编写规格说明书，这些问题比工程上的问题影响更大（我们将在第
7章会讨论这两种问题之间的差别）。
585
---
## Page 587
明智的项目经理会将开放问题列表分成两种优先级：必须在完成规
格说明书之前解决的事情，以及可以等得更久的事情。按优先级对
问题进行分类，集中解决那些会影响工程甚至可能是整个项目的问
题，这是非常自然的方式。项目经理应该向工程师说明完成规格说
明书后的待解决问题列表，因为工程师是检查这些决策或信息可否
可以延后的唯一人员。（关于如何以及为什么某些事情需要等到规
格说明书完成之后再解决，我们将在下一章中讨论。）
应该把每个需要解决的不确定事项都列出来。最需要看这份列表的
人就是项目经理，当然是越早越好。但是，随着时间的流逝，这份
列表可以作为团队在并会或走廊讨论时统一意见的工具。目的不是
为了让人觉得不舒服，而是提醒他们有什么问题没有解决，并帮助
他们看到其他团队成员需要解决的问题。因为项目经理的工作会影
响每个人，因此，通过使这份列表可以被大家看到，就可以使大家
合作解决这些问题：“哦，我的列表上也有那项工作。应该你做，
上的原因之一。（发布到wiki网站中也可以，但是除了做列表的人
之外，没人会去看它。发布到非虚拟并且非正式的地点会更好。）
我发现，每当有人来我办公室，问我事情进展状况时，我总会指着
那份列表说：“那就是事情进展的实际情况。当那份列表空了的时
候，我就能够完成规格说明书。”虽然这不是绩效的量度，或者某
种可以通过时间严格度量的东西，但项目经理问题列表的状态以及
它所包括的问题范围，可以揭示关于事情进展的大量信息。如果列
表很长，但包含的是非常具体的问题，那说明工作进展得很好；如
果列表很短，但问的是很恐怖的基础问题，例如“我们想要解决什
很长的路要走。
小结
想法具有自己的动力。想要控制创意工作需要花费的时间会超出你
的预期。在项目过程中会大量地产生变更。
为创意工作建立检查点，以对其进行追踪和控制。常用的检查点包
括概念论证、想法分组、3种可选方案、两种可选方案、一个设
计。
·使用亲和图来整合想法。
586
---
## Page 588
原型使项目早些面对问题，从错误中学习，并避并重大风险。
通过对原型使用选代或定期改良，来提出问题、评估进展并决定后
续步骤。
建立并放问题列表，来追踪在完成规格说明书之前需要解决的问
题。
练习
A.对于个人任务或工作任务，你是如何组织你的“待完成工作"列表
的？你能应用一个类似的系统，来组织、跟踪、管理你的想法吗？
为什么能或为什么不能？
取权限：a）查看想法：b）修改想法；c）增加和删除想法？
C.假如你在项目即将结束的时期，知道一个重大的想法，可以极大
地改善正在实现的产品。你应该如何处理该想法，使得在下一阶段
工作开始规划的时候能够利用该想法？你能想出某种方法来获得整
个团队的这类想法吗？
D.花费24小时来收集想法，无论何时，只要听到有人对想法提建
议，或是自已产生想法，你就把它记下来。你收集了多少想法？比
你期望的更多还是更少？
E.建立一个关于练习D的列表。你能想到多少种方法来对其进行归
类？（如果你比较懒情，没有完成练习D，那么可以使用任何列
表：购物列表、你想看其裸体的人物列表、任何列表。）
F.有哪些警示标志可以说明项目工作产生了过多的想法？对于不同
时段、不同人或不同项目是否存在一个健康的想法数量比例？
G.管理创意工作所需要的技巧可能不适用于项目管理的其他部分。
让工程师或设计师来领导一个项目的创意阶段工作，有哪些好处和
风险？
H.假如你正处于项目规划阶段。没人来建立原型，只有编写的文
档。你意识到只通过文档无法回答某些问题。你将会怎么做？你会
587
---
## Page 589
自己来建立原型吗？还是找团队中的其他人来一起建立原型？你会
将原型展示给谁看？你希望他如何反应？
I我们再来模拟前一个练习，你决定建立原型。你演示原型给大
家，他们喜欢它。实际上，他们非常喜欢它，以至于他们同意放弃
所有其他设计和实现工作，而只采用你制作的原型。你知道建立原
型同时引入了很多需要检查的假设，但是他们不在意这个。你如何
说服他们，使他们相信建立其他原型也是有必要的？在你展示原型
前，你能通过做什么来降低出现这种状况的儿率？
J.如果一个PM说没有开放的问题，这意味着什么？如果一个PM的
开放问题列表中有5个问题或有50个问题，你更信任哪一个？是否
存在花费过多时间来跟踪开放问题的风险？
1.将这种感觉捕捉得最好的，是TheyMightBeGiants中的一首歌
“Older"：“这一大很快就要结束了，现在结束得更快了，现在结束
得更快了，现在仍然结束得更快了。”
[2]检查点本身不如检查点产生的影响重要，通常，由团队提出检
查点会更好，这样可以使他们更加尊重这些检查点。
3]关于解决方案的好列表，请参考
http://www.ml.lt/ms/projects/toolkinds/organize.html
[4]关于设计之前编程这个问题的讨论，请参考AlanCooper的《The
Inmates AreRunning theAsYlum》（Sams出版，2004年）。
[5]请访间http://www.scottberkun.com/essays/12-art-of-ui-prototyping
参考"TheArtofUI Prototyping”一文。
[6]虽然你的团队可能不用对用户自责，但利用你的算法或数据库