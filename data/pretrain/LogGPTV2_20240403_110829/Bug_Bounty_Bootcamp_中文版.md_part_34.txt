3.  Confirm the impact of the payload by checking whether your browser
    runs your JavaScript code. Or in the case of a blind XSS, see if you
    can make the victim browser generate a request to your server.
4.  If you can't get any payloads to execute, try bypassing XSS
    protections.
5.  Automate the XSS hunting process with techniques introduced in [
    Chapter 25 ]{.xref itemid="xref_target_Chapter 25"} .
6.  Consider the impact of the XSS you've found: who does it target? How
    many users can it affect? And what can you achieve with it? Can you
    escalate the attack by using what you've found?
7.  Send your first XSS report to a bug bounty program!
:::
[]{#c07.xhtml}
::: section
# [ [ ]{#c07.xhtml#Page_131 .pagebreak title="131"} 7 ]{.ChapterNumber} [ Open Redirects ]{.ChapterTitle} {.chapter}
![](image_fi/book_art/chapterart.png)
Sites often use HTTP or URL parameters to redirect users to a specified
URL without any user action. While this behavior can be useful, it can
also cause *open redirects* , which happen when an attacker is able to
manipulate the value of this parameter to redirect the user offsite.
Let's discuss this common bug, why it's a problem, and how you can use
it to escalate other vulnerabilities you find.
网站通常使用HTTP或URL参数将用户重定向到指定的URL，而不需要任何用户操作。虽然这种行为可能很有用，但也可能导致开放重定向。当攻击者能够操纵此参数的值以将用户重定向到站外时，就会发生这种情况。让我们讨论这个常见的漏洞，为什么它是个问题，以及如何利用它来升级您发现的其他漏洞。
## Mechanisms {#c07.xhtml#h1-501546c07-0001}
Websites often need to automatically redirect their users. For example,
this scenario commonly occurs when unauthenticated users try to access a
page that requires logging in. The website will usually redirect those
users to the login page, and then return them to their original location
after they're [ ]{#c07.xhtml#Page_132 .pagebreak title="132"}
authenticated. For example, when these users visit their account
dashboards at *https://example.com/dashboard* , the application might
redirect them to the login page at *https://example.com/login.*
网站经常需要自动重定向其用户。例如，当未经验证的用户尝试访问需要登录的页面时，通常会发生这种情况。网站通常会将这些用户重定向到登录页面，然后在它们验证后将它们返回到原始位置。例如，当这些用户访问其帐户仪表板https://example.com/dashboard时，应用程序可能会将它们重定向到https://example.com/login登录页面。
To later redirect users to their previous location, the site needs to
remember which page they intended to access before they were redirected
to the login page. Therefore, the site uses some sort of redirect URL
parameter appended to the URL to keep track of the user's original
location. This parameter determines where to redirect the user after
login. For example, the URL
*https://example.com/login?redirect=https://example.com/dashboard* will
redirect to the user's dashboard, located at
*https://example.com/dashboard* , after login. Or if the user was
originally trying to browse their account settings page, the site would
redirect the user to the settings page after login, and the URL would
look like this:
*https://example.com/login?redirect=https://example.com/settings* .
Redirecting users automatically saves them time and improves their
experience, so you'll find many applications that implement this
functionality.
为后续将用户重定向到之前访问的位置，网站需要记住在重定向到登录页面前他们想要访问的页面。因此，网站使用某种重定向URL参数附加到URL上以跟踪用户的原始位置。该参数确定登录后重定向用户的位置。例如，URL
https://example.com/login?redirect=https://example.com/dashboard
将在登录后重定向到用户的仪表板，位于
https://example.com/dashboard。或者，如果用户最初尝试浏览其账户设置页面，则网站将在登录后重定向用户到设置页面，URL看起来像这样：https://example.com/login?redirect=https://example.com/settings。自动重定向用户可以节省他们的时间并改善他们的使用体验，因此有许多应用程序实现此功能。
During an open-redirect attack, an attacker tricks the user into
visiting an external site by providing them with a URL from the
legitimate site that redirects somewhere else, like this:
*https://example.com/login?redirect=https://attacker.com* . A URL like
this one could trick victims into clicking the link, because they'll
believe it leads to a page on the legitimate site, *example.com* . But
in reality, this page automatically redirects to a malicious page.
Attackers can then launch a social engineering attack and trick users
into entering their *example.com* credentials on the attacker's site. In
the cybersecurity world, *social engineering* refers to attacks that
deceive the victim. Attacks that use social engineering to steal
credentials and private information are called *phishing* .
在开放重定向攻击中，攻击者通过提供一个重定向到其他网址的合法站点URL，如
https://example.com/login？redirect=https://attacker.com，来诱骗用户访问外部网站。像这样的URL可以欺骗受害者点击链接，因为他们会认为它会导致在合法站点example.com上的页面。但实际上，这个页面会自动重定向到恶意页面。攻击者随后可以发起社交工程攻击并诱骗用户在攻击者的网站上输入他们的example.com凭据。在网络安全领域中，社交工程是指欺骗受害者的攻击。利用社交工程窃取凭据和私人信息的攻击被称为网络钓鱼（phishing）。
Another common open-redirect technique is referer-based open redirect.
The *referer* is an HTTP request header that browsers automatically
include. It tells the server where the request originated from. Referer
headers are a common way of determining the user's original location,
since they contain the URL that linked to the current page. Thus, some
sites will redirect to the page's referer URL automatically after
certain user actions, like login or logout. In this case, attackers can
host a site that links to the victim site to set the referer header of
the request, using HTML like the following:
另一种常见的开放式重定向技术是基于 referer 的开放式重定向。 Referrer
是浏览器自动包含的 HTTP 请求头。它告诉服务器请求的来源在哪里。 Referrer
头是确定用户原始位置常见的方式，因为它们包含链接到当前页面的
URL。因此，某些网站会在特定用户操作（如登录或注销）后自动重定向到页面的引荐者
URL。在这种情况下，攻击者可以托管一个站点，链接到受害者站点以设置请求的引荐者头，使用以下
HTML：
      Click here to log in to example.com
This HTML page contains an `           ` tag, which links the text in
the tag to another location. This page contains a link with the text
`      Click here to log in to example.com     ` . When a user clicks
the link, they'll be redirected to the location specified by the
`      href     ` attribute of the `           ` tag, which is
*https://example.com/login* in this example.
这个 HTML
页面包含一个\标签，将标签中的文本链接到另一个位置。该页面包含一个链接，文本为"点击此处登录example.com"。用户点击链接后，将重定向到\标签的href属性指定的位置，例如在此例子中为
https://example.com/login。
[Figure 7-1](#c07.xhtml#figure7-1){#c07.xhtml#figureanchor7-1} shows
what the page would look like when rendered in the browser.
图7-1显示了在浏览器中呈现时页面的样子。
![[Figure 7-1]{#c07.xhtml#figure7-1} : Our sample rendered HTML page ¶
图7-1：我们的示例渲染HTML页面](image_fi/501546c07/f07001.png){.keyline}
[ ]{#c07.xhtml#Page_133 .pagebreak title="133"} If *example.com* uses a
referer-based redirect system, the user's browser would redirect to the
attacker's site after the user visits *example.com* , because the
browser visited *example.com* via the attacker's page.
如果 example.com 使用基于引用者的重定向系统，那么用户的浏览器在访问
example.com 后会重定向到攻击者的网站，因为浏览器是通过攻击者的网页访问
example.com 的。
## Prevention {#c07.xhtml#h1-501546c07-0002}
To prevent open redirects, the server needs to make sure it doesn't
redirect users to malicious locations. Sites often implement *URL
validators* to ensure that the user-provided redirect URL points to a
legitimate location. These validators use either a blocklist or an
allowlist.
为了防止开放重定向，服务器需要确保不会将用户重定向到恶意网址。网站通常实施URL验证器，以确保用户提供的重定向URL指向合法位置。这些验证器使用阻止名单或允许名单。
When a validator implements a blocklist, it will check whether the
redirect URL contains certain indicators of a malicious redirect, and
then block those requests accordingly. For example, a site may blocklist
known malicious hostnames or special URL characters often used in
open-redirect attacks. When a validator implements an allowlist, it will
check the hostname portion of the URL to make sure that it matches a
predetermined list of allowed hosts. If the hostname portion of the URL
matches an allowed hostname, the redirect goes through. Otherwise, the
server blocks the redirect.
当验证器实施阻止列表时，它会检查重定向 URL
是否包含某些恶意重定向指示器，并相应地阻止这些请求。例如，一个站点可能会阻止已知的恶意主机名或经常用于开放重定向攻击的特殊
URL 字符。当验证器实施允许列表时，它将检查 URL
的主机名部分，以确保它与预定的允许主机列表匹配。如果 URL
的主机名部分与允许的主机名匹配，则重定向将进行。否则，服务器将阻止重定向。
These defense mechanisms sound straightforward, but the reality is that
parsing and decoding a URL is difficult to get right. Validators often
have a hard time identifying the hostname portion of the URL. This makes
open redirects one of the most common vulnerabilities in modern web
applications. We'll talk about how attackers can exploit URL validation
issues to bypass open-redirect protection later in this chapter.
这些防御机制听起来很简单，但实际上解析和解码URL非常难以正确执行。验证器通常很难识别URL的主机名部分。这使得开放式重定向成为现代Web应用程序中最常见的漏洞之一。稍后在本章中，我们将讨论攻击者如何利用URL验证问题绕过开放式重定向保护。
## Hunting for Open Redirects {#c07.xhtml#h1-501546c07-0003}
Let's start by looking for a simple open redirect. You can find open
redirects by using a few recon tricks to discover vulnerable endpoints
and confirm the open redirect manually.
让我们从寻找简单的开放式重定向开始。您可以使用一些侦查技巧来发现易受攻击的端点，并手动确认开放式重定向。
### Step 1: Look for Redirect Parameters {#c07.xhtml#h2-501546c07-0001}
Start by searching for the parameters used for redirects. These often
show up as URL parameters like the ones in bold here:
从寻找重定向所使用的参数开始。这些常常显示为像这里加粗的URL参数：
    https://example.com/login?redirect=https://example.com/dashboard
    https://example.com/login?redir=https://example.com/dashboard
    https://example.com/login?next=https://example.com/dashboard
    https://example.com/login?next=/dashboard
Open your proxy while you browse the website. Then, in your HTTP
history, look for any parameter that contains absolute or relative URLs.
An *absolute URL* is complete and contains all the components necessary
to locate the resource it points to, like *https://example.com/login* .
Absolute URLs contain at least the URL scheme, hostname, and path of a
resource. A *relative URL* must be concatenated with another URL by the
server in order to [ ]{#c07.xhtml#Page_134 .pagebreak title="134"} be
used. These typically contain only the path component of a URL, like
*/login* . Some redirect URLs will even omit the first slash (
`      /     ` ) character of the relative URL, as in
*https://example.com/login?next=dashboard* .
在浏览网站时打开代理，然后在HTTP历史记录中查找包含绝对或相对URL的任何参数。绝对URL是完整的，并包含定位其指向的资源所需的所有组件，例如https://example.com/login。绝对URL至少包含资源的URL方案，主机名和路径。相对URL必须由服务器与另一个URL连接在一起才能使用。这些通常仅包含URL的路径组件，如/login。一些重定向URL甚至会省略相对URL的第一个斜杆（/）字符，例如https://example.com/login?next=dashboard。
Note that not all redirect parameters have straightforward names like
`      redirect     ` or `      redir     ` . For example, I've seen
redirect parameters named `      RelayState     ` , `      next     ` ,
`      u     ` , `      n     ` , and `      forward     ` . You should
record all parameters that seem to be used for redirect, regardless of
their parameter names.
请注意，并非所有的重定向参数都像redirect或redir那样名称简单直接。例如，我曾看到过以RelayState、next、u、n和forward命名的重定向参数。您应该记录所有似乎被用于重定向的参数，不管它们的参数名称如何。
In addition, take note of the pages that don't contain redirect
parameters in their URLs but still automatically redirect their users.
These pages are candidates for referer-based open redirects. To find
these pages, you can keep an eye out for 3 *XX* response codes like 301
and 302. These response codes indicate a redirect.
此外，注意那些URL中不包含重定向参数但仍自动重定向用户的页面。这些页面有可能存在基于引用的开放性重定向漏洞。要查找这些页面，您可以留意301和302等3XX响应代码，这些响应代码表示重定向。
### Step 2: Use Google Dorks to Find Additional Redirect Parameters {#c07.xhtml#h2-501546c07-0002}
Google dork techniques are an efficient way to find redirect parameters.
To look for redirect parameters on a target site by using Google dorks,
start by setting the `      site     ` search term to your target site:
Google dork技术是一种有效的查找重定向参数的方法。使用Google
dorks在目标网站上查找重定向参数，首先要将站点搜索术语设置为目标站点。
    site:example.com
Then look for pages that contain URLs in their URL parameters, making
use of `      %3D     ` , the URL-encoded version of the equal sign (=).
By adding `      %3D     ` in your search term, you can search for terms
like `      =http     ` and `      =https     ` , which are indicators
of URLs in a parameter. The following searches for URL parameters that
contain absolute URLs:
然后搜索包含其URL参数中的URL的页面，利用%3D，即等号（=）的URL编码版本。通过在搜索词中添加%3D，您可以搜索类似于=http和=https的术语，这些术语是参数中的URL指示器。以下搜索包含绝对URL的URL参数：
    inurl:%3Dhttp site:example.com
This search term might find the following pages:
这个搜索词可能会找到以下页面：
    https://example.com/login?next=https://example.com/dashboard
    https://example.com/login?u=http://example.com/settings
Also try using `      %2F     ` , the URL-encoded version of the slash
(/). The following search term searches URLs that contain
`      =/     ` , and therefore returns URL parameters that contain
relative URLs:
也可以尝试使用%2F，即斜杠（/）的URL编码版本。以下搜索词搜索包含=/
的URL，并因此返回包含相对URL的URL参数：
    inurl:%3D%2F site:example.com
This search term will find URLs such as this one:
这个搜索词将会找到像这样的URL地址：
    https://example.com/login?n=/dashboard
Alternatively, you can search for the names of common URL redirect
parameters. Here are a few search terms that will likely reveal