To give the reader some insight into the dynamics of the
ebb-and-ﬂow construction, we simulate it in the presence of
intermittent network partitions and under dynamic participa-
tion of nodes.7 The adversary attempts to prevent liveness for
as long as possible, e.g., by launching a private chain attack
on Πlc after a partition using blocks pre-mined during the
partition, or by refusing to participate in Πbft.
a) Setup: We simulate a system of n = 100 nodes,
f = 25 of which adversarial. Network messages are delayed
by ∆ = 1 s. For Sleepy, λ = 1 × 10−1 s−1, so that each
node produces blocks at rate λ0 = λ/n = 1 × 10−3 s−1. One
lottery slot takes 1 s. LC blocks are conﬁrmed if k = 20 deep.
Streamlet uses ∆bft = 5 s. The system undergoes intermittent
network partitions (as detailed below) and dynamic partici-
pation of honest nodes (as detailed below). At every time,
a majority of at least f + 1 = 26 honest nodes are awake.
Adversarial nodes are always awake. We observe the length
of the shortest ledgers |LOGt
ﬁn,i| observed by
any honest node i, i.e.,
da,i|
da,i| and |LOGt
|LOGt
and
|LOGt
ﬁn,i|.
min
i
min
i
(1)
b) Dynamic Participation: We examine the effect of
dynamic participation of honest nodes on our construction.
For this purpose, we assume a synchronous network, i.e.,
GST = 0. The number of awake honest nodes follows a
reﬂected Brownian motion between 51 and 75.
Figure 10 shows a sample path of the simulation. LOGda
grows steadily over time (because the conditions of P2 are
) at a rate proportional to
satisﬁed, LOGda is secure, cf.
the number of awake nodes (cf.
). Only during intervals
when 67 or more honest nodes are awake (shaded in Figure 10,
recall that the adversary refuses to participate in the protocol)
), whenever
there is a 2/3-quorum to advance LOGﬁn (cf.
conditions in Streamlet permit (i.e., whenever there is a sufﬁ-
ciently long sequence of honest leaders). During a sufﬁciently
long such interval, LOGﬁn catches up with LOGda.
c) Intermittent Network Partitions: We simulate the sys-
tem under intermittent network partitions, during which honest
nodes are split into two parts P1 and P2 of 2(n − f )/3
and (n − f )/3 nodes, respectively. Inter-part communication
7The code of our simulations can be found here: https://github.com/tse-g
roup/ebb-and-flow
11
mini |LOGt
mini |LOGt
ﬁn,i|
da,i|
Awake honest nodes
Liveness threshold
Quorum live
200
100
]
s
k
l
b
[
h
t
g
n
e
l
r
e
g
d
e
L
0
75
67
50
t
s
e
n
o
h
e
k
a
w
A
0
500
1,000
1,500
2,000
2,500
3,000
3,500
Time [s]
Fig. 10. In a synchronous network where the number of awake honest nodes
is modelled by a reﬂected Brownian motion, LOGda grows steadily over
time. During intervals in which enough honest nodes are awake there is a
2/3-quorum to advance LOGﬁn so that it catches up with LOGda.
mini |LOGt
mini |LOGt
ﬁn,i|
da,i|
mini∈P1 |LOGt
mini∈P2 |LOGt
da,i|
da,i|
Partitions
200
100
]
s
k
l
b
[
h
t
g
n
e
l
r
e
g
d
e
L
0
0
500
1,000
1,500
2,000
2,500
3,000
3,500
Time [s]
Fig. 11. Under intermittent network partitions, during which honest nodes
are split into two parts of 2(n − f )/3 and (n − f )/3 nodes, respectively,
ﬁnalization of BFT blocks stalls because no 2/3-quorum is live. The ledgers
LOGda as seen by the different parts drift apart. Once the network reunites,
the honest nodes converge on the longer LOGda and LOGﬁn catches up.
is prevented, intra-part communication incurs delay ∆. All
honest nodes are awake throughout the experiment. During
partitions we consider the ledgers as seen by honest nodes in
the respective parts.
Figure 11 shows a sample path of the simulation. Periods
of network partition are shaded in Figure 11. As expected,
ﬁnalization of BFT blocks stalls during periods of partition
), because no 2/3-quorum consensus is achieved, as
(cf.
communication between parts is blocked. The ledgers LOGda
as seen by nodes in the different parts P1 and P2 drift apart
(cf.
). Once the network reunites, the honest nodes
converge on the longer LOGda (which is that produced by part
P1, cf.
) and LOGﬁn quickly catches up with LOGda. Note
that the shorter LOGda (produced by part P2) is abandoned and
disappears from LOGda after the partition.
Note that because part P1 outnumbers the adversary, the
adversary does not have a chance to build a long enough
,
ﬁn,i|
mini |LOGt
mini |LOGt
da,i|
mini∈A |LOGt
da,i|
Partition & low participation
No chain quality, LOGda stalled
]
s
k
l
b
[
h
t
g
n
e
l
r
e
g
d
e
L
100
50
0
500
1,000
1,500
Time [s]
2,000
2,500
Fig. 12. During a period of network partition and low participation honest
block production slows down and the adversary can successfully pre-mine a
private adversarial structure. The adversary releases private blocks to displace
honest blocks from the longest chain. Thus, the longest chain suffers from
low chain quality and the dynamic ledger LOGda stalls. Once the network
reunites and all honest nodes awake, LOGda grows at a fast rate and the
adversary eventually runs out of pre-mined blocks. Honest blocks enter the
longest chain and liveness of LOGda and with it liveness of LOGﬁn ensues.
private chain that it can use to delay honest nodes’ convergence
on LOGda. Instead, convergence on LOGda is reached once
honest nodes have synchronized their blocktrees and picked
the longest chain. This is different if honest nodes are parti-
tioned into smaller parts, as examined next.
d) Convergence of LOGda After Network Partition and/or
Low Participation: We focus on the convergence of LOGda
after a network partition and/or period of low participation,
where the largest awake part is smaller than f. For this pur-
pose, suppose that during a partition, 50 of the 75 honest nodes
are asleep. The remaining 25 nodes are awake but partitioned
into two parts of 15 and 10 nodes, respectively. Thus, the
largest awake part with 15 honest nodes is smaller than f = 25
and the adversary can successfully pre-mine a private chain
during the period of partition and low participation. As before,
only inter-part communication is prohibited.
Figure 12 shows a sample path of the simulation. Before
the partition, honest block production is fast and the adversary
cannot build a substantial private chain. During the period of
partition and low participation the honest block production
slows down. The adversary gains a considerable lead in that
its private chain (cf.
) grows much faster than the longest
chain in honest view (cf.
). As honest nodes produce
blocks, the adversary releases its withheld adversarial blocks
to displace the honest blocks from the longest chain. As a
result, the longest chain suffers a sustained period of low chain
quality (all blocks are adversarial and thus might not include
any transactions) and the dynamic ledger LOGda effectively
stalls. Once the network reunites and asleep honest nodes
awake, all honest nodes join forces on LOGda, which now
grows at a fast rate again. Eventually, the adversary runs out
of pre-mined blocks and cannot displace honest blocks any
longer. An honest block enters the longest chain and liveness
of LOGda and with it liveness of LOGﬁn ensues (cf.
Note that during the period of partition and low partic-
).
12
ipation, LOGﬁn does not grow because (as in the previous
experiment) no 2/3-quorum consensus is achieved. Once the
network reunites, LOGﬁn catches up with LOGda, but since
the most recent blocks in LOGda are adversarial (and thus
potentially empty), neither LOGda nor LOGﬁn are live for
some time. Once honest blocks return to LOGda and get
referenced by LOGﬁn, both return to be live.
V. DISCUSSION AND CONCLUSION
A. Snap-and-Chat Protocols and Finality Gadgets
Finality gadgets,
initiated by [22], are a body of work
[26], [35]–[37] that aims to add ﬁnality to a Nakamoto-style
protocol. As far as we can gather, there is no mathematical
deﬁnition of a ﬁnality gadget; indeed different works have
different goals on what their ﬁnality gadgets are supposed
to achieve, and these goals are often not explicitly spelled
out. For example, [36] seems to be using their ﬁnality gadget
to achieve opportunistic responsiveness. On the other hand,
the goals of [26] seem to be aligned with the ebb-and-
ﬂow property we studied here, but there is no mathematical
formulation on what should be achieved. In contrast, we focus
on the ebb-and-ﬂow property, precisely deﬁne what it means,
and construct snap-and-chat protocols to achieve the property.
So it is difﬁcult to have a scientiﬁc comparison between snap-
and-chat protocols and ﬁnality gadgets. However, there is one
important structural difference between the construction of
snap-and-chat protocols and the construction of all existing
ﬁnality gadgets which we want to point out.
The difference is that the snap-and-chat protocol construc-
tion can use any off-the-shelf dynamically available protocol
unmodiﬁed (and the BFT sub-protocol with minor modiﬁ-
cations), while all existing ﬁnality gadgets involve a joint
design of the ﬁnality voting and the fork choice rule of the
underlying Nakamoto-style chain. In particular, the native fork
choice rule of the Nakamoto-style chain has to be altered to
accommodate the ﬁnalization process. In Casper FFG [22], for
example, the ‘correct by construction’ rule speciﬁes that blocks
should be proposed on the chain with the highest justiﬁed
block, as opposed to the longest chain. Another example
is the hierarchical ﬁnality gadget [37], which speciﬁes that
proposal should be done on the chain with the deepest ﬁnalized
block. In contrast, the dynamically available sub-protocol in
our construction is off-the-shelf and so the fork choice rule
as well as the conﬁrmation rule are unaltered. Finalization by
the BFT sub-protocol occurs after transactions are conﬁrmed
in the LOGlc ledger. The conﬁrmation and the ﬁnalization
properties are completely decoupled.
The decoupled nature of our construction has several advan-
tages. First, construction adds ﬁnality to any existing dynami-
cally available chain without change. Second, our construction
allows the use of state-of-the-art dynamically available proto-
cols and state-of-the-art partially synchronous BFT protocols
without the need to reinvent the wheel. In contrast, existing
ﬁnality gadget designs entail handcrafting brand new protocols
(e.g., [26], [36]), and the tight coupling between the two layers
makes reasoning about security difﬁcult in the design process.
The attack on Gasper in Section II is a good example of the
perils of this approach. Another example is the bouncing attack
on Casper FFG [28], [29] (recapitulated in Appendix E). Third,
our construction is ‘future-proof’ because it can take advantage
of future advances in the design of dynamically available
protocols and in the design of partially synchronous BFT
protocols; both problems have received and are continuing to
receive signiﬁcant attention from the community.
B. Ebb-and-Flow and Snap-and-Chat for Proof-of-Work
Another common goal for ﬁnality gadgets is to add a
permissioned ﬁnality layer to a permissionless PoW Na-
kamoto-style protocol. In this setting, nodes come in two
ﬂavors: miners are quantiﬁed by hash rate and power the
PoW longest chain, and validators with unique cryptographic
identities provide ﬁnality. The two different resources (hash
rate and cryptographic identities) require a modiﬁcation of the
environment in the Theorem of Section I-D. The snap-and-chat
construction using Nakamoto’s PoW longest chain as Πlc and
any of the BFT protocols from Sections III-B and III-D as
Πbft satisﬁes the following ebb-and-ﬂow variant:
Theorem (Informal, Permissioned Finality for Permissionless
PoW). Consider a network environment where:
1) Communication is asynchronous until a global stabi-
lization time GST after which communication becomes
synchronous,
2) validators are always awake, and
3) miners can sleep and wake up at any time.
Then
1) (P1 - Finality): The ﬁnalized ledger LOGﬁn is guaranteed
to be safe at all times, and live after GST, if fewer than
33% of validators are adversarial, fewer than 50% of
awake hash rate is adversarial, and awake hash rate is
bounded away from zero.
2) (P2 - Dynamic Availability): If GST = 0, then the avail-