# 八、集群管理
在前面的章节中，我们已经通过 Kubernetes 学习了大部分基本的 DevOps 技能，从如何将我们的应用容器化到通过连续部署将我们的容器化软件无缝部署到 Kubernetes 中。现在，是时候深入了解如何管理 Kubernetes 集群了。
在本章中，我们将学习:
*   如何利用命名空间来设置管理边界
*   使用 kubeconfig 在多个集群之间切换
*   Kubernetes 身份验证
*   不可否认的授权
虽然 minikube 是一个相当简单的环境，但是我们将使用**谷歌容器引擎** ( **GKE** )和 AWS 中的自托管集群作为例子，而不是本章中的 minikube。详细设置请参考 AWS 上的[第 9 章](09.html#6NGV40-6c8359cae3d4492eb9973d94ec3e4f1e)、 *Kubernetes，以及 GCP* 上的[第 10 章](10.html#7BHQU0-6c8359cae3d4492eb9973d94ec3e4f1e)、 *Kubernetes。*
# 不可组合的命名空间
Kubernetes 有一个命名空间概念，将资源从一个物理集群划分到多个虚拟集群。这样，不同的组可以隔离共享同一个物理集群。每个命名空间提供:
*   名称范围；每个命名空间中的对象名都是唯一的
*   确保可信身份验证的策略
*   能够为资源管理设置资源配额
名称空间非常适合同一公司的不同团队或项目，因此不同的组可以有自己的虚拟集群，它们具有资源隔离，但共享同一个物理集群。一个命名空间中的资源对于其他命名空间是不可见的。不同的资源配额可以设置为不同的名称空间，并提供不同级别的服务质量。请注意，并非所有对象都在一个命名空间中，例如属于整个集群的节点和持久卷。
# 默认命名空间
默认情况下，Kubernetes 有三个名称空间:`default`、`kube-system`和`kube-public`。`default`命名空间包含在没有指定任何命名空间的情况下创建的对象，`kube-system`包含由 Kubernetes 系统创建的对象，通常由系统组件使用，如 Kubernetes 仪表板或 Kubernetes DNS。`kube-public`是 1.6 新推出的，意在定位大家都可以访问的资源。它现在主要关注公共配置图，比如集群信息。
# 创建新的命名空间
让我们看看如何创建命名空间。命名空间也是一个 Kubernetes 对象。我们可以像其他对象一样指定名称空间的类型。下面是创建一个命名空间`project1`的示例:
```
// configuration file of namespace
# cat 8-1-1_ns1.yml
apiVersion: v1
kind: Namespace
metadata:
name: project1
// create namespace for project1
# kubectl create -f 8-1-1_ns1.yml
namespace "project1" created
// list namespace, the abbreviation of namespaces is ns. We could use `kubectl get ns` to list it as well.
# kubectl get namespaces
NAME          STATUS    AGE
default       Active    1d
kube-public   Active    1d
kube-system   Active    1d
project1      Active    11s
```
然后让我们尝试通过在`project1`命名空间中部署来启动两个 nginx 容器:
```
// run a nginx deployment in project1 ns
# kubectl run nginx --image=nginx:1.12.0 --replicas=2 --port=80 --namespace=project1 
```
当我们按`kubectl get pods`列出 PODS 时，我们在集群中将什么也看不到。为什么呢？因为 Kubernetes 使用当前上下文来决定哪个命名空间是当前的。如果我们没有在上下文或`kubectl`命令行中明确指定名称空间，将使用`default`名称空间:
```
// We'll see the Pods if we explicitly specify --namespace
# kubectl get pods --namespace=project1
NAME                     READY     STATUS    RESTARTS   AGE
nginx-3599227048-gghvw   1/1       Running   0          15s
nginx-3599227048-jz3lg   1/1       Running   0          15s  
```
You could use `--namespace `, `--namespace=`, `-n ` or `-n=` to specify the namespace for a command. To list the resources across namespaces, use `--all-namespaces` parameter.
另一种方法是将当前上下文更改为指向所需的命名空间，而不是默认命名空间。
# 语境
**上下文**是集群信息、用于认证的用户和名称空间的组合的概念。例如，以下是我们在 GKE 的一个集群的上下文信息:
```
- context:
cluster: gke_devops-with-kubernetes_us-central1-b_cluster
user: gke_devops-with-kubernetes_us-central1-b_cluster
name: gke_devops-with-kubernetes_us-central1-b_cluster  
```
我们可以使用`kubectl config current-context`命令查看当前上下文:
```
# kubectl config current-context
gke_devops-with-kubernetes_us-central1-b_cluster
```
To list all config info including contexts, you could use the `kubectl config view` command; to checkout what context is currently in use, use `kubectl config get-contexts` command.
# 创建上下文
下一步是创建一个上下文。与前面的例子一样，我们需要为上下文设置一个用户名和集群名。如果我们不指定这些，空值将被设置。创建上下文的命令是:
```
$ kubectl config set-context  --namespace= --cluster= --user=  
```
可以在同一个群集中创建多个上下文。以下是如何在我的 GKE 集群`gke_devops-with-kubernetes_us-central1-b_cluster`中为`project1`创建上下文的示例:
```
// create a context with my GKE cluster
# kubectl config set-context project1 --namespace=project1 --cluster=gke_devops-with-kubernetes_us-central1-b_cluster --user=gke_devops-with-kubernetes_us-central1-b_cluster
Context "project1" created.  
```
# 切换当前上下文
然后我们可以通过`use-context`子命令切换上下文:
```
# kubectl config use-context project1
Switched to context "project1".  
```
上下文切换后，我们通过`kubectl`调用的每个命令都在`project1`上下文下。我们不需要显式指定名称空间来查看我们的 pods:
```
// list pods
# kubectl get pods
NAME                     READY     STATUS    RESTARTS   AGE
nginx-3599227048-gghvw   1/1       Running   0          3m
nginx-3599227048-jz3lg   1/1       Running   0          3m  
```
# 资源配额
默认情况下，Kubernetes 中的 PODS 是资源无限的。那么运行中的 pods 可能会耗尽集群中的所有计算或存储资源。ResourceQuota 是一个资源对象，它允许我们限制命名空间可以使用的资源消耗。通过设置资源限制，我们可以减少噪音邻居症状。为`project1`工作的团队不会耗尽物理集群中的所有资源。
然后，我们可以确保在共享同一物理集群的其他项目中工作的其他团队的服务质量。Kubernetes 1.7 支持三种资源配额。每种包括不同的资源名称，([https://kubernetes.io/docs/concepts/policy/resource-quotas](https://kubernetes.io/docs/concepts/policy/resource-quotas)):
*   计算资源配额(中央处理器、内存)
*   存储资源配额(请求的存储，永久卷声明)
*   对象计数配额(pod、RCs、配置映射、服务、负载平衡器)
创建的资源不会受到新创建的资源配额的影响。如果资源创建请求超过指定的资源配额，资源将无法启动。
# 为命名空间创建资源配额
现在，让我们学习`ResourceQuota`的语法。下面是一个例子:
```
# cat 8-1-2_resource_quota.yml
apiVersion: v1
kind: ResourceQuota
metadata:
 name: project1-resource-quota
spec:
 hard:# the limits of the sum of memory request
 requests.cpu: "1"               # the limits of the sum   
   of requested CPU
   requests.memory: 1Gi            # the limits of the sum  
   of requested memory 
   limits.cpu: "2"           # the limits of total CPU  
   limits
   limits.memory: 2Gi        # the limits of total memory 
   limit 
   requests.storage: 64Gi    # the limits of sum of 
   storage requests across PV claims
   pods: "4"                 # the limits of pod number   
```
模板和其他物体一样，只是这种变成了`ResourceQuota`。我们指定的配额对处于成功或失败状态(即非终端状态)的 pod 有效。支持多种资源限制。在前面的示例中，我们演示了如何设置计算资源配额、存储资源配额和对象计数配额。任何时候，我们仍然可以使用`kubectl`命令来检查我们设置的配额:`kubectl describe resourcequota `。
现在让我们通过命令`kubectl edit deployment nginx`修改我们现有的 nginx 部署，将副本从`2`更改为`4`并保存。让我们现在列出州。
```
# kubectl describe deployment nginx
Replicas:         4 desired | 2 updated | 2 total | 2 available | 2 unavailable
Conditions:
 Type                  Status      Reason
 ----                  ------      ------
 Available             False MinimumReplicasUnavailable
 ReplicaFailure  True  FailedCreate  
```
这表明一些 Pod 在创建时失败了。如果我们检查相应的复制集，我们可以找出原因:
```
# kubectl describe rs nginx-3599227048
...
Error creating: pods "nginx-3599227048-" is **forbidden**: failed quota: project1-resource-quota: must specify limits.cpu,limits.memory,requests.cpu,requests.memory  
```
由于我们已经指定了内存和 CPU 的请求限制，Kubernetes 不知道新希望的三个 pod 的默认请求限制。我们可以看到最初的两个 Pod 仍在运行，因为资源配额不适用于现有资源。我们现在使用`kubectl edit deployment nginx`修改容器规格，如下所示:
![](img/00116.jpeg)