合计 16780 存在合计行
厨房用具 11180
衣服 5000
办公用品 600
虽然这是按照商品种类计算销售单价的总额时得到的结果，但问题在
于最上面多出了1行合计行。使用代码清单8-10中的GROUP BY子句的
语法无法得到这一行。
代码清单8-10 使用GROUP BY无法得到合计行
SELECT product_type, SUM(sale_price)
FROM Product
GROUP BY product_type;
执行结果
product_type | sum
--------------+------
衣服 | 5000
办公用品 | 600
厨房用具 | 11180
● 272 第8章 SQL高级处理
因为GROUP BY子句是用来指定聚合键的场所，所以只会根据这里
指定的键分割数据，当然不会出现合计行。而合计行是不指定聚合键时得
到的汇总结果，因此与下面的3行通过聚合键得到的结果并不相同。按照
通常的思路，想一次得到这两种结果是不可能的。
KEYWORD 如果想要获得那样的结果，通常的做法是分别计算出合计行和按照商
●UNION ALL
品种类进行汇总的结果，然后通过UNION ALLA连接在一起（代码清单
注A 8-11）。
虽然也可以使用UNION来代替
UNION ALL，但由于两条 代码清单8-11 分别计算出合计行和汇总结果再通过UNION ALL进行连接
SELECT语句的聚合键不同，一定
不会出现重复行，因此可以使用 SELECT '合计' AS product_type, SUM(sale_price)
UNION ALL。UNION ALL和 FROM Product
UNION的不同之处在于它不会对 UNION ALL
结果进行排序，因此比UNION的 SELECT product_type, SUM(sale_price)
性能更好。 FROM Product
GROUP BY product_type;
执行结果
product_type | sum
--------------+------
合计 | 16780
衣服 | 5000
办公用品 | 600
厨房用具 | 11180
这样一来，为了得到想要的结果，需要执行两次几乎相同的SELECT
语句，再将其结果进行连接，不但看上去十分繁琐，而且DBMS内部的
处理成本也非常高，难道没有更合适的实现方法了吗？
——同时得出合计和小计
ROLLUP
KEYWORD 为了满足用户的需求，标准SQL引入了GROUPING运算符，我们
●GROUPING运算符
将在本节中着重介绍。使用该运算符就能通过非常简单的SQL得到之前
那样的汇总单位不同的汇总结果了。
注A
GROUPING运算符包含以下3种A。
目前PostgreSQL和MySQL并不支
持GROUPING运算符（MySQL仅
支持ROLLUP）。具体内容请参 ●ROLLUP
考专栏“GROUPING运算符的
●CUBE
支持状况”。
●GROUPING SETS
8-2 GROUPING运算符 273 ●
■ 的使用方法
ROLLUP
KEYWORD 我们先从ROLLUP开始学习吧。使用ROLLUP就可以通过非常简单
●ROLLUP运算符
的SELECT语句同时计算出合计行了（代码清单8-12）。
代码清单8-12 使用 同时得出合计和小计
ROLLUP
Oracle SQL Server DB2 PostgreSQL
SELECT product_type, SUM(sale_price) AS sum_price
FROM Product
GROUP BY ROLLUP(product_type); ①
特定的SQL
在MySQL中执行代码清单8-12时，请将①中的GROUP BY子句改写为“GROUP
BY product_type WITH ROLLUP;”。
执行结果（在DB2中执行）
product_type sum_price
-------------- ---------
16780
厨房用具 11180
办公用品 600
衣服 5000
从语法上来说，就是将GROUP BY子句中的聚合键清单像ROLLUP
（,,...）这样使用。该运算符的作用，一言以蔽之，就
是“一次计算出不同聚合键组合的结果”。例如，在本例中就是一次计算
出了如下两种组合的汇总结果。
① GROUP BY ()
② GROUP BY (product_type)
①中的GROUP BY ()表示没有聚合键，也就相当于没有GROUP BY
子句（这时会得到全部数据的合计行的记录），该合计行记录称为超级分组
KEYWORD 记录（super group row）。虽然名字听上去很炫，但还是希望大家把它当作
●超级分组记录
未使用GROUP BY的合计行来理解。超级分组记录的product_type
列的键值（对DBMS来说）并不明确，因此会默认使用NULL。之后会
为大家讲解在此处插入恰当的字符串的方法。
● 274 第8章 SQL高级处理
法则8-6
超级分组记录默认使用NULL作为聚合键。
■将“登记日期”添加到聚合键当中
仅仅通过刚才一个例子大家的印象可能不够深刻，下面让我们再添加
一个聚合键“登记日期（regist_date）”试试看吧。首先从不使用
ROLLUP开始（代码清单8-13）。
代码清单8-13 在GROUP BY中添加“登记日期”（不使用ROLLUP）
SELECT product_type, regist_date, SUM(sale_price) AS sum_price
FROM Product
GROUP BY product_type, regist_date;
执行结果（在DB2中执行）
product_type regist_date sum_price
-------------- ------------ ----------
厨房用具 2008-04-28 880
厨房用具 2009-01-15 6800
厨房用具 2009-09-20 3500
办公用品 2009-09-11 500
办公用品 2009-11-11 100
衣服 2009-09-20 1000
衣服 4000
在上述GROUP BY子句中使用ROLLUP之后，结果会发生什么变
化呢（代码清单8-14） ？
代码清单8-14 在GROUP BY中添加“登记日期”（使用ROLLUP）
Oracle SQL Server DB2 PostgreSQL
SELECT product_type, regist_date, SUM(sale_price) AS sum_price
FROM Product
GROUP BY ROLLUP(product_type, regist_date); ①
特定的SQL
在MySQL中执行代码清单8-14时，请将①中的GROUP BY子句改写为“GROUP
BY product_type, regist_date WITH ROLLUP;”。
8-2 GROUPING运算符 275 ●
执行结果（在DB2中执行）
product_type regist_date sum_price
-------------- ------------ ----------
16780 ←合计
厨房用具 11180 ←小计（厨房用具）
厨房用具 2008-04-28 880
厨房用具 2009-01-15 6800
厨房用具 2009-09-20 3500
办公用品 600 ←小计（办公用品）
办公用品 2009-09-11 500
办公用品 2009-11-11 100
衣服 5000 ←小计（衣服）
衣服 2009-09-20 1000
衣服 4000
将上述两个结果进行比较后我们发现，使用ROLLUP时多出了最上
方的合计行以及3条不同商品种类的小计行（也就是未使用登记日期作为
聚合键的记录），这4行就是我们所说的超级分组记录。也就是说，该
SELECT语句的结果相当于使用UNION对如下3种模式的聚合级的不同
结果进行连接（图8-5）。
①GROUP BY ()
②GROUP BY (product_type)
③GROUP BY (product_type, regist_date)
图8-5 3种模式的聚合级
product_type regist_date sum_price
16780 模块①
厨房用具 11180
办公用品 600 模块②
衣服 5000
办公用品 2009-09-11 500
办公用品 2009-11-11 100
厨房用具 2008-04-28 880
厨房用具 2009-01-15 6800 模块③
厨房用具 2009-09-20 3500
衣服 2009-09-20 1000
衣服 4000
如果大家觉得上述结果不容易理解的话，可以参考表8-2中按照聚合
级添加缩进和说明后的内容，理解起来就很容易了。
● 276 第8章 SQL高级处理
表8-2 根据聚合级添加缩进后的结果
合计 16780
厨房用具 小计 11180
厨房用具 2008-04-28 880
厨房用具 2009-01-15 6800
厨房用具 2009-09-20 3500
办公用品 小计 600
办公用品 2009-09-11 500
办公用品 2009-11-11 100
衣服 小计 5000
衣服 2009-09-20 1000
衣服 4000
ROLLUP是“卷起”的意思，比如卷起百叶窗、窗帘卷，等等。其名
称也形象地说明了该操作能够得到像从小计到合计这样，从最小的聚合级
开始，聚合单位逐渐扩大的结果。
法则8-7
ROLLUP可以同时得出合计和小计，是非常方便的工具。
专 栏
运算符的支持情况
GROUPING
本节介绍的GROUPING运算符与8-1节介绍的窗口函数都是为了实现OLAP
用途而添加的功能，是比较新的功能（是SQL：1999的标准SQL中添加的新功
能）。因此，还有一些DBMS尚未支持这些功能。截止到2016年5月，Oracle、
SQL Server、DB2、PostgreSQL的最新版本都已经支持这些功能了，但MySQL
的最新版本5.7还是不支持这些功能。
想要在不支持GROUPING运算符的DBMS中获得包含合计和小计的结果时，只
能像本章一开始介绍的那样，使用UNION将多条SELECT语句连接起来。
此外，使用MySQL时的情况更加复杂一些，只有一个不合规则的ROLLUP
能够使用。这里所说的“不合规则”指的是需要使用特定的语法。
-- MySQL专用
SELECT product_type, regist_date, SUM(sale_price) AS sum_price
FROM Product
GROUP BY product_type, regist_date WITH ROLLUP;
遗憾的是，MySQL 5.7并不支持CUBE和GROUPING SETS。希望之后的
版本能够提供对它们的支持。
8-2 GROUPING运算符 277 ●
函数——让 更加容易分辨
GROUPING NULL
可能有些读者会注意到，之前使用ROLLUP所得到的结果（代码清
单8-14的执行结果）有些蹊跷，问题就出在“衣服”的分组之中，有两
条记录的regist_date列为NULL，但其原因却并不相同。
sum_price为4000日元的记录，因为商品表中运动T恤的注册日期为
NULL，所以就把NULL作为聚合键了，这在之前的示例中我们也曾见到过。
相反，sum_price为5000日元的记录，毫无疑问就是超级分组
记录的NULL了（具体为1000日元+ 4000日元= 5000日元）。但两
者看上去都是“NULL”，实在是难以分辨。
product_type regist_date sum_price
-------------- ------------ ----------
衣服 5000 ←因为是超级分组记录，所以登
记日期为NULL
衣服 2009-09-20 1000
衣服 4000 ←仅仅因为“运动T恤”的登记
日期为NULL
为了避免混淆，SQL提供了一个用来判断超级分组记录的NULL的
特定函数—— GROUPING函数。该函数在其参数列的值为超级分组记录
KEYWORD 所产生的NULL时返回1，其他情况返回0（代码清单8-15）。
●GROUPING函数
代码清单8-15 使用GROUPING函数来判断NULL
Oracle SQL Server DB2 PostgreSQL
SELECT GROUPING(product_type) AS product_type,
GROUPING(regist_date) AS regist_date, SUM(sale_price) AS sum_price
FROM Product
GROUP BY ROLLUP(product_type, regist_date);
执行结果（在DB2中执行）
product_type regist_date sum_price
-------------- ------------ ----------
1 1 16780
0 1 11180
0 0 880
0 0 6800
0 0 3500
0 1 600
0 0 500
0 0 100
0 1 5000 ←碰到超级分组记录中的
0 0 1000 NULL时返回1
0 0 4000 ←原始数据为NULL时返回0
● 278 第8章 SQL高级处理
这样就能分辨超级分组记录中的NULL和原始数据本身的NULL了。
使用GROUPING函数还能在超级分组记录的键值中插入字符串。也就是
说，当GROUPING函数的返回值为1时，指定“合计”或者“小计”等
字符串，其他情况返回通常的列的值（代码清单8-16）。
代码清单8-16 在超级分组记录的键值中插入恰当的字符串
Oracle SQL Server DB2 PostgreSQL
SELECT CASE WHEN GROUPING(product_type) = 1
THEN '商品种类 合计'
ELSE product_type END AS product_type,
CASE WHEN GROUPING(regist_date) = 1
THEN '登记日期 合计'
ELSE CAST(regist_date AS VARCHAR(16)) END AS regist_date,
SUM(sale_price) AS sum_price
FROM Product
GROUP BY ROLLUP(product_type, regist_date);
执行结果（在DB2中执行）