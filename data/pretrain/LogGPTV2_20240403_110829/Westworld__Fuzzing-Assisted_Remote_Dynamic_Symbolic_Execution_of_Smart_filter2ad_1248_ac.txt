((x == 1) ∧ (O.m == 6))||((x == 2) ∧ (O.m == 8)), which is
combined with the path condition (u > 3)∧(O.m == 8), and solved
together to get the values of the symbolic inputs u and x.
6.2 Learning Code-Segment Summary
To find a code-segment for inserting a for-loop, three points need
to be determined. (1) A start point is the place where an identified
ISI is first accessed among all; e.g., in Figure 7(a), the start point
for O.m is the place right before Line 3. (2) A logging point is the
place right before the conditional statement where the (field of)
TSV is involved; e.g., the place right before Line 5 in Figure 7(a) is
the logging point for O.m. (3) An end point is an immediate post-
dominator of both the start and logging points. In a control flow
graph (CFG), a block m post-dominates a block n if every path from
the entry block to n must go through m; and the immediate post-
dominator of a block n is the block that does not post-dominate
any other post-dominators of n [37]. The end point in Figure 7(a) is
right before Line 6. We adopt Lengauer-Tarjan algorithm [42] to
find the immediate post-dominator.
Examples. In Fig. 8, each node in the CFG represents a statement.
In Fig. 8(a), assuming node 1 is the start point and node 2 the logging
point, node 9 is the end point. Fig. 8(b) shows another example.
Figure 6: Instrumentation (in green) for the app in Figure 4.
symbolic, existing approaches typically unroll the loop a fixed num-
ber of times [51, 59]. To achieve completeness, we apply selective
code-segment fuzzing (Section 6).
Switch and while statements. Handling switch (resp. while) is
similar to that of handling if (resp. for) statements.
Closure statements. Closure is a unique feature of Groovy. A
closure is a code block that can take arguments, return a value, and
be assigned to a variable. (a) It can be called as a method. We adopt
the way of handling function calls to deal with it. (b) It can be used
to iterate over all elements in a list, array, or map (e.g., Line 29 in
Figure 6). We implement a script to automatically convert a closure
to a for-loop, and apply the way of handling for-loop to handle it.
6 SELECTIVE CODE-SEGMENT FUZZING
We propose selective code-segment fuzzing, which assists remote
DSE, to effectively handle platform proprietary API calls.
6.1 Motivation and Main Idea
Consider the example in Figure 7(a). Both x (an environment vari-
able) and u (a user input) are symbolic inputs. foo is a user-defined
987Westworld: Fuzzing-Assisted Remote Dynamic Symbolic Execution of Smart Apps on IoT Cloud Platforms
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Figure 8: Examples of determining insertion points.
Figure 9: An example
of “generations”.
Figure 10: Combining path condi-
tion and code-segment summary.
Finally, given the example in Figure 7(a), a for-loop is inserted as
shown in Figure 7(b). The getEnvVarValues method at Line 3 is a
function for returning the collection of the values for each symbolic
input. These values are obtained from a file (that we create and
contains all possible values of each environment variable), and then
included in the getEnvVarValues method.
Selective code-segment fuzzing can also handle for statements.
If the conditional statement contains a symbolic input, we iterate
over all possible values of the symbolic input. If it contains a (field
of) TSV, we first find out the ISIs for the (field of) TSV and iterate
over the possible values of these ISIs.
The fuzzing results can be reused. We store the code segments
and summaries in a map (each variable name is replaced with an
identical name), and check it before generating a seg-fuzzing app.
Why not Fuzz Platform APIs? We do not directly fuzz a platform
API to learn the relation between the return variable and parameters
for the following two reasons. (1) Given an API parameter, which is
not a symbolic input, such as y at Line 3 in Figure 7(a), it is difficult
to estimate its value range. (2) If the return variable is an object, it
is difficult to record the values of all its fields, which are defined
by the closed-source platform. E.g., in Figure 7(a), we do not fuzz
sysAPI to find the relation between O and y (both are objects).
Instead, we aim to find the relation between O.m and x, where x is a
symbolic input that influences O.m (that is, x is the ISI of O.m).
6.3 Feasibility Analysis
We analyze the feasibility of selective code-segment fuzzing.
Classification. We divide symbolic inputs into three categories.
(1) Category-I: The symbolic input has a few possible values
(< 10); e.g., the location mode contains 3 values: Home, Away, and
Night. We iterate over all of them.
(2) Category-II: The symbolic input contains many but not a large
number of values (∈ [10, a], where a ≪ 232); e.g., the humidity has
101 integer values. We select a subset as follows: i) all the values
are divided into n equal parts, where m values are randomly picked
from each part (Section 8.3 discusses how to determine n and m);
and ii) if the variable is involved in a conditional statement and
compared with a constant value, three more values (larger than,
smaller than, and equal to the constant value) are selected.
(3) Category-III: The symbolic input contains a huge or infinite
number of values, such as phone number and location id. Based
on our evaluation, none is used as an ISI; e.g., a phone number is
Tj
Tj
i
i =1 µ
j=1(νj
has νj (j ∈ [1, m]) ISIs. Then it requiresm
usually used as a parameter of sendMessage, and a location id is to
form a message to describe the app.
Analysis. Assume an app has n symbolic inputs and m TSVs, where
each symbolic input Ii has µi (i ∈ [1, n]) values and each TSV Tj
i ) times for
selective code-segment fuzzing to generate the required relations,
is the number of values of the i-th ISI for the TSV Tj.
where µ
According to our evaluation (Section 8.3), the maximum number
of TSVs that an app contains is no more than 3 (m ≤ 3), and the
maximum number of ISIs for a TSV is no more than 3 (νj ≤ 3).
Moreover, the ISIs have a small or moderate number of possible
values (µi ∈ [1, a], where a ≪ 232; belonging to Category-I or -II).
Thus, our selective code-segment fuzzing is feasible.
In Figure 4, e.g., we select 10 values for each user input, timeOf-
Day, endTime, and timeAgo. This app has 3 TSVs. (i) startTime.time is
influenced by timeOfDay, and it takes 10 times of loop iterations to
obtain their relation. (ii) terminTime.time is influenced by endTime
and startTime, and it takes 100 times. (iii) alreadySet is influenced
by timeAgo, and it takes 10 times. Thus, it totally takes 120 times of
loop iterations for the selective code-segment fuzzing.
7 REMOTE PATH EXPLORATION
The Path Analysis component is to i) identify TSVs from the sym-
bolic path conditions, and ii) combine symbolic path condition and
code-segment summaries to generate new test cases for path explo-
ration. Below we present two path-exploration methods: i) original
generational search [36] (we call it vanilla generational search),
which is often used in concolic testing, and ii) boosted generational
search proposed by us.
7.1 Vanilla Generational Search
We adopt the algorithm in [36] as our vanilla generational search.
The algorithm systematically negates all path constraints in each
symbolic path condition. We use Figure 9 to explain what a “gener-
ation” means. Assume the first execution exercises the path colored
in red (1 → 2 → 5 → 8 → 9 → 10). By negating each path
constraint along this path (at nodes 1, 2 and 5), we generate three
1st-generation children corresponding to the three paths colored
in blue (1 → 2 → 5 → 7 → 9 → 10, 1 → 2 → 4 → 10, and
1 → 3 → 10). By repeating this process, each first generation path
can be further expanded to generate (zero or more) 2nd-generation
children, and so on. Here, the 2nd-generation child corresponds to
the path colored in yellow (1 → 3 → 6 → 10).
682357914682357914   (a)                                            (b)start pointlogging pointend pointend pointlogging pointstart point89134675247852110369f1 f4 f3 f3	contains a TSV f2 end point start point platform API 988ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Lannan Luo, Qiang Zeng, Bokai Yang, Fei Zuo, and Junzhe Wang
maries are combined to generate new test cases. Let F =n
In our work, symbolic path conditions and code-segment sum-
i =1 fi
denote the symbolic path condition containing n path constraints.
Assume m TSVs are involved. Let Pi (i ∈ [1, m]) denote the summary
for the i-th TSV. Then F is systematically negated and combined
with (a subset of) these Pi to generate test cases.
Special attention needs to be paid when combining F and these Pj:
if a path constraint fs ∈ F is negated and the conditions involving
some TSVs Tj (j ∈ [t, m]) appear after fs in the app code, the
summaries Pj (j ∈ [t, m]) are not combined. By solving the formula,
i =1
j=1 Pj, a new test case is generated.
fi¬fs(t−1)
(s−1)
An Example. In Figure 10, F = 4
3
i =1 fi¬f4 P1, (ii)2
i =1 fi. f3 contains a TSV re-
turned by a platform API. For the TSV, we identify a code segment
(circled by the dashed line), and generate its summary P1. By ap-
plying vanilla generational search, we obtain four formulas: (i)
(iv) ¬f1. By solving each formula, a new test case is generated.
i =1 fi¬f3 P1, (iii) f1¬f2, and
In vanilla generational search, one testing request has to be sub-
mitted to the IoT platform to install a smart app (which is instru-
mented according to a generated test case) and explore a new path.
While it is not an issue if the analyzer and execution environment
reside together, it imposes large request-handling and communica-
tion costs on our analysis. Thus, reducing the cost is critical.
7.2 Boosted Generational Search
We propose boosted generational search that explores all paths
belonging to one generation by submitting only one testing re-
quest. E.g., in Figure 9, the three first-generation paths in blue need
three testing requests in vanilla generational search, but only one in
boosted generational search.
Note that the proposed boosted generational search is not a
new search strategy but a speed-up method for tackling the chal-
lenge of communication costs due to remote execution. We choose
generational search over other search strategies because it maxi-
mizes the number of new input tests generated from each symbolic
execution [35]. Boosted generational search, which is built upon
vanilla generational search, wraps the multiple input tests from one
symbolic execution into one remote testing request, such that the
number of testing requests can be reduced.
Algorithm. In Algorithm 1, the method BoostedSearch first in-
vokes SymExePCs to run the app with the initial inputs and collect
the symbolic path condition, which is stored in a list δ and inserted
into the working queue Q (Lines 2-4). Each element in Q is pro-
cessed by NextGenPCs to generate the symbolic path conditions
corresponding to the test cases of the next generation (Lines 5-8).
In NextGenPCs, it first generates the test cases of the next genera-
tion (Lines 11-21) and invokes SymExePCs to execute all the test cases
in one testing request to collect the corresponding symbolic path con-
ditions, which are stored in a list β (Line 23). Specifically, for each
path condition PC in the input list ψ, it expands every constraint
in PC (at a position i greater than or equal to a parameter called
PC.bound initially 0 at Line 3). This is done by checking whether the
formula ζ —combined from PC and the code-segment summaries—is
satisfiable or not (Lines 13-15). If so, a next-generation test case s is
found and inserted into nextGenInputs (Lines 16-19).
All the test cases in nextGenInputs are executed in one test-
ing request, and the corresponding symbolic path conditions are
collected (Line 23). Each symbolic path condition PC’s bound is
assigned with the value of the corresponding test case s’s bound
(Lines 24-26). Finally, all PCs are returned (Line 27).
To execute all test cases of one generation through one test-
ing request, we insert a TestDriver method that wraps multiple
invocations of an entry method. Each invocation initializes the
symbolic inputs separately. We register TestDriver as an entry
method, and then remove the registration of the original one.
8 IMPLEMENTATION AND EVALUATION
8.1 Implementation
Our prototype consists of 4,418 lines of Groovy code and 2,444
lines of Java code. SmartThings provides a primitive web interface
to testing apps, e.g., generating virtual events to trigger an entry
method. We leverage the web interface to launch remote DSE. We
use the constraint solver Z3 [27] to solve symbolic path conditions.
To automate testing, we build the Web Interaction component
upon Selenium [24], which can automatically log in the platform,
install an app, and generate events (by simulating human oper-
ations). E.g., for the app in Figure 4, the component generates
both motion.active and motion.inactive events to trigger the method
motionActiveHandler. To demonstrate the benefit of boosted gen-
erational search on improving the efficiency of testing smart apps,
we implement two versions of Westworld: W-van uses vanilla
generational search, and W-boost uses boosted generational search.
8.2 Experimental Settings
We evaluate Westworld in five aspects: feasibility, completeness,
precision, efficiency, and effectiveness in bug finding. Our experiments
989Westworld: Fuzzing-Assisted Remote Dynamic Symbolic Execution of Smart Apps on IoT Cloud Platforms
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
# of apps in Dataset-I
Table 1: App statistics of Dataset I and Dataset II.
≥ 20
[15, 20)
[10, 15)
[5, 10)
[2, 5)
16
13
18
26
63
# of paths in apps
# of apps in Dataset-II
15
18