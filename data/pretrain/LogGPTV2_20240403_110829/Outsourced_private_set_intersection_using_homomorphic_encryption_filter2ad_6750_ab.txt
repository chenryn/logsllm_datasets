ments. The client obtains the result of the pseudo-random
function obliviously. Hazay and Lindell [20] present the ﬁrst
such protocols secure against semi-honest and malicious ad-
versaries. These are the ﬁrst linear O(v + w) complexity
protocols. Jarecki and Liu [22, 23] further improved these
protocols.
While these protocols already achieve security in the stan-
dard model and linear complexity, their constants are quite
high and have been improved subsequently. We furthermore
provide client set certiﬁcation, client set size-independence
and outsourcing.
P SI using Blind Signatures.
Using blind signatures [6] a client can obtain a signature
on its input without disclosing it. The idea is to present
(aggregate) signatures of the elements of a set, hash the re-
sult of the veriﬁcation and compute the intersection on the
hashes. De Cristofaro and Tsudik [12] present protocols se-
cure against semi-honest adversaries. These protocols also
have linear O(v+w) complexity. De Cristofaro et al. [10] ex-
tend the protocols to security against malicious adversaries
in the random oracle model. They maintain linear complex-
ity and show that they have signiﬁcantly lower constants
than [22].
Our protocols also have linear complexity and similar con-
stants, but do not need full domain hash functions and are
secure in the standard model. De Cristofaro et al.
[10] ig-
nored the costs of full-domain hash functions in their anal-
ysis.
De Cristofaro et al.
[10] also use the notion of authen-
ticated P SI where the client has to present its input to
a trusted third party. This has ﬁrst been introduced for
mutual authentication (certiﬁcation) by Camenisch and Za-
verucha [5], but their protocol has quadratic O(vw) com-
plexity. Ateniese et al.
[1] later also present a protocol
loosely based on [12] which is client set size-hiding. It has
complexity O(w + v log v). They also present a variant in
which the client complexity can be reduced to O(v), but
incurs a penalty polynomial in the security parameter.
Furthermore, we are not aware of previous protocols where
the computation can be outsourced to an oblivious service
provider.
2.3 Bloom Filters in Cryptography
We present a novel construction for P SI using Bloom ﬁl-
ter [3]. Bloom ﬁlter have been used in cryptography before.
Bellovin and Cheswick [2] and independently Goh [17] use
Bloom ﬁlter to securely search documents. It enables check-
ing whether a document contains certain keywords with-
out disclosing any of them. Their protection mechanism is
to compute the hash function as a cryptographic pseudo-
random function. This technique has been used in [31] to
securely query a database and in [29] for privacy-preserving
data mining.
Nojima and Kadobayashi [28] present an interactive proto-
col for securely checking set inclusion via Bloom ﬁlter with-
out disclosing the Bloom ﬁlter or the checked element. They
use blind signatures or oblivious pseudo-random functions
in order to compute the hash functions of the Bloom ﬁlter.
Their protocols are only secure against semi-honest adver-
saries. While these also have linear O(w) complexity, they
increase the constants compared to P SI based on blind sig-
natures by the number of hash functions. We present a
completely novel construction based on homomorphic en-
cryption which is secure against malicious adversaries in the
standard model and has signiﬁcantly reduced constants.
Kerschbaum [24] recently presented techniques to check
public-key encrypted Bloom ﬁlter using zero-knowledge proofs.
They enable to non-interactively check for the inclusion or
exclusion of an element from a Bloom ﬁlter without dis-
closing the Bloom ﬁlter content. They similarly use homo-
morphic encryption for protecting the content of the Bloom
ﬁlter. These protocols are complementary to the ones pre-
sented in this paper, since, although they are non-interactive,
they require to disclose the checked elements, i.e. one party’s
input. In this paper we present secure protocols which pro-
vide protect both parties’ input and furthermore can be out-
sourced without requiring trust in the service provider.
3. CRYPTOGRAPHIC BUILDING BLOCKS
3.1 Goldwasser Micali Encryption
Goldwasser-Micali (GM) encryption [19] is a public-key,
semantically-secure (IND-CPA) and homomorphic encryp-
tion scheme. GM encryption uses quadratic residuosity mod-
ulo a composite of two large primes p and q (RSA modulus)
to encrypt one bit of plaintext. A quadratic residue r is a
number, such that there exists a number s: s2 = r mod n.
GM encodes a 1 as a quadratic non-residue and a 0 as a
quadratic residue. Particularly, the quadratic non-residues
are pseudo quadratic residues,
their Jacobi symbols
are all 1. The hardness of diﬀerentiating pseudo quadratic
residues from quadratic residues is known as the quadratic
residuosity assumption.
i.e.
We can summarize the operations as follows
KeyGen(κ): Let κ be a security parameter. Given κ gen-
erate the private key sk = {p, q} and the public key pk =
{n = pq, u} where u is a pseudo quadratic residue.
Encrypt(x, pk): Given plaintext x and public key pk pro-
duces ciphertext c. To encrypt a 0 choose a random number
r and compute r2 mod n (a quadratic residue). To encrypt a
1 also choose a random number r and computes ur2 mod n
(a quadratic non-residue).
Decrypt(c, sk): Given ciphertext c and private key sk pro-
duces plaintext x. Compute the Legendre symbol L(cid:16) x
p(cid:17)
and decide x = 1, if L(cid:16) x
p(cid:17) = 1.
p(cid:17) = −1 and x = 0, if L(cid:16) x
Let E(x) denote encryption of x under GM public key pk
and let D(c) denote the corresponding decryption. Multiply-
ing two ciphertexts, e.g. E(x)·E(y), results in an encryption
of the exclusive-or denoted by ⊕.
D(E(x) · E(y)) = x ⊕ y
GM encryption is semantically-secure (IND-CPA), i.e. one
cannot infer from a ciphertext and the public key whether
the ciphertext has a speciﬁc plaintext, e.g. by encrypting
the plaintext and then comparing it.
3.2 Sander Young Yung Technique
Sander, Young and Yung (SYY) [32] introduce a technique
that allows the computation of one logical-and operation
on ciphertexts. The input ciphertexts are encrypted using
GM encryption. Recall that we can perform any number
of exclusive-or operations on the ciphertexts. A ciphertext
E(x) is ﬁrst expanded as follows:
Expand(c, pk): Given GM ciphertext c = E(x) and public
key pk computes an expanded ciphertext cl = El(x). We
compute E(ei) repeatedly l times (0 ≤ i < l).
1. Flip a fresh random coin ri ∈ {0, 1} (i = 1, . . . , l).
2. Choose a ciphertext corresponding to the plaintext ei
according to the random coin and set
E(ei) = (cid:26) E(x) · E(1) = E(x ⊕ 1)
E(0)
if ri = 0
if ri = 1
The result is an l-length vector El(x) = E(e1), . . . , E(el).
If the input ciphertext is x = 1, then x ⊕ 1 = 0 and El(x)
is an all 0s vector, i.e. ei = 0 (0 ≤ i < l). Otherwise, if the
input ciphertext x = 0, then ei is uniformly distributed in
{0, 1}.
In order to decrypt El(x), one decrypts
Decrypt(cl, sk):
each E(ei) and if all ei = 0, decides x = 1 and if any ei = 1,
decides x = 0. Note that there is a small probability 2−l
to falsely decrypt a ciphertext El(0) as a 1. We denote this
decryption operation as Dl(cl).
One can now compute a logical-and of any number of
expanded ciphertexts, e.g. El(x) = E(e1), . . . , E(el) and
El(y) = E(f1), . . . , E(fl). We compute the pair-wise prod-
uct of the ciphertexts, i.e.
El(x ∧ y) = El(x) × El(y)
= E(e1) · E(f1), . . . , E(el) · E(fl)
= E(e1 ⊕ f1), . . . , E(el ⊕ fl)
If at least one of El(x) or El(y) consists of randomly dis-
tributed plaintexts in {0, 1}, then El(x ∧ y) consists ran-
domly distributed plaintexts. Only if both are all 0s plain-
texts, then El(x ∧ y) has all 0s plaintexts (except with neg-
ligible probability in l).
4. PRIVATE SET INTERSECTION
4.1 Bloom Filter
Bloom ﬁlter [3] provide a space- and time-eﬃcient mean to
check the inclusion of an element in a set. An empty Bloom
ﬁlter b consists of m bits, all set to 0, and k hash functions hi
(0 ≤ i < k). Note that we do not require the hash functions
to be random oracles. We write bj (0 ≤ j < m) for the j-th
bit of Bloom ﬁlter b. Bloom ﬁlter support the operations
Add(x) for addition of element x to the set and T est(x) to
test for inclusion of element x.
Create(m): m bits (0 ≤ j < m) are set to 0
∀j.bj = 0
and k hash functions hi (0 ≤ i < k) are published
∀i.hi : {0, 1}∗ 7→ {0, . . . , m − 1}
Add(x): The element x is hashed with all k hash functions
hi and the k bits at the resulting indices gi are set to 1.
∀i.gi = hi(x) =⇒ bgi = 1
Test(x): Again, the element x is hashed with all k hash
functions hi and if all k bits at the resulting indices gi are
set, then the test function returns 1 (true).
k−1
^i=0
bhi(x)
(1)
Bloom ﬁlter have a small probability for false positives,
i.e. T est(x) may return true, although x has never been
added. The more elements are added to the set, the more
likely false positives are. Given the number w of elements
to be added and a desired maximum false positive rate 2−k,
one can compute the necessary size m of the Bloom ﬁlter as
m =
wk
ln2 2
4.2 Protocol
The basic idea of our protocol is to send a Bloom ﬁlter
for the client set (bit-wise) encrypted using GM encryption.
Then we evaluate the Test function (Equation 1) for each el-
ement in the server set using the SYY technique. Finally, we
compute the exclusive-or between the expanded ciphertext
result and the server’s element and return it.
Let si,j denote the j-th bit of the server’s element si. In
the same way as we can expand the Bloom ﬁlter using the
SYY technique, we can also construct an expanded vector of
each of the server’s elements. Then the expanded ciphertext
of an element is
El(si) = E(si,1), . . . , E(si,l)
We use the same notation as for the SYY technique in order
to stress that we can perform common operations on both of
these ciphertexts. We can decrypt the expanded ciphertext
bit-wise and reconstruct si. We denote a logical-and of fan-
in more than two as
n
Yi=1
El(xi) = El(x1) × . . . × El(xn)
Figure 1 shows our private set intersection protocol (secure
in the semi-honest model).
The returned elements s′
section (if all Bloom ﬁlter bits are 1, i.e. Vk−1
1 are either elements in the inter-
j=0 bhj (si) = 1) or
randomly chosen elements in {0, 1}l. Ideally, the parameter
l should be chosen larger than the logarithm of the input
domain size. Then, the server’s elements are padded with
0s.
It still remains crucial (in the malicious model) that
the client performs the set intersection and does not rely on
the trailing 0s for the identiﬁcation of the elements in the
intersection.
4.2.1 Security Proof
We prove security by comparison between the real model
and an ideal model. The real model is the execution of our
P SI protocol. The ideal model – as in many other secure
computations – consists of a trusted server implementing the
set intersection functionality ∩. The trusted server receives
the input from both – client c1, . . . , cv and server s1, . . . , sw,
respectively – and returns to the client the intersection of
their sets {ci} ∩ {sj}. The server obtains no output. The
ideal model remains for all security proofs.
In a semi-honest protocol the clients do not deviate from
the protocol, therefore following Goldreich’s proof construc-
tion [18] we only need to simulate their views. A view is
the messages (and coin tosses) a party receives during pro-
tocol execution. The simulator may use the party’s input
and output in order to create an (computationally) indistin-
guishable simulation of the view. This proves that the party
cannot infer any additional information (except its input and
output).
Theorem 1. If the quadratic residuosity assumption holds,
then protocol P SI implements private set intersection in the
semi-honest model.
Proof. The resulting security proof in the semi-honest
model is quite simple. The server does obtain any informa-
tion, since all its messages are encrypted (if the quadratic
residuosity assumption holds).
Its view can therefore be
simulated using ciphertexts only. These are all independent
due to IND-CPA security of the GM encryption scheme.
The client only receives the messages for its output, i.e.
the intersection. A simulator of its view is therefore trivially
its output.
4.3 Malicious Model
The M P SI variant secure in the malicious model uses
client set certiﬁcation.
In an M P SI protocol the client
presents his set to a trusted third party which attests that
this is the set used in the P SI protocol.
Let S(x) denote the signature of x by the trusted third
party. Furthermore, the trusted third party now generates
the key n, u for the GM encryption. This ensures that the
key is trustworthy and can be used by both client and server.
In the malicious model we need to account for the false
positives of a Bloom ﬁlter. A client could present a set to
the trusted third party and have it certiﬁed while knowl-
edgeable about false positives of this set with unintended
privacy leakages. The client could, for example, probe for
speciﬁc values at the server. We need to prevent the client
from maliciously generating hash collisions.
Hence, the trusted third party also generates an exponent