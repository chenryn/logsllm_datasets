My code is probably wrong in some way because I'm a real n00b to Rust but
since the compiler output tells me to submit a bug report I will obey.
Possible duplicate of #20347 but I know too little to be sure.
## Compiler version info
    rustc 0.13.0-nightly (c6c786671 2015-01-04 00:50:59 +0000)
    binary: rustc
    commit-hash: c6c786671d692d7b13c2e5c68a53001327b4b125
    commit-date: 2015-01-04 00:50:59 +0000
    host: x86_64-unknown-linux-gnu
    release: 0.13.0-nightly
    Initial: 0
## Compiler output
    p2.rs:12:1: 19:2 error: internal compiler error: impl `VtableImpl(impl_def_id=DefId { krate: 0, node: 21 }:Fibonacci.Iterator, substs=Substs[types=[[];[];[]], regions=[[];[];[]]], nested=[[];[];[]])` did not contain projection for `Obligation(predicate=::Item,depth=0)`
    p2.rs:12 impl Iterator for Fibonacci {
    p2.rs:13     fn next(&mut self) -> uint {
    p2.rs:14         let curr = self.curr;
    p2.rs:15         self.curr = self.next;
    p2.rs:16         self.next = curr + self.next;
    p2.rs:17         curr
             ...
    note: the compiler unexpectedly panicked. this is a bug.
    note: we would appreciate a bug report: http://doc.rust-lang.org/complement-bugreport.html
    note: run with `RUST_BACKTRACE=1` for a backtrace
    thread 'rustc' panicked at 'Box', /home/rustbuild/src/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libsyntax/diagnostic.rs:123
    stack backtrace:
       1:     0x7fe8477b32d0 - sys::backtrace::write::h8532e701ef86014f4it
       2:     0x7fe8477d8b00 - failure::on_fail::h7532e1f79d134d5dzvz
       3:     0x7fe84773e1c0 - rt::unwind::begin_unwind_inner::h97b151606151d62deaz
       4:     0x7fe8425efc60 - rt::unwind::begin_unwind::h15809447133099964284
       5:     0x7fe8425efbf0 - diagnostic::SpanHandler::span_bug::he8142ababcc30c39DFF
       6:     0x7fe845aeee70 - middle::traits::project::project_type::h947eece142ef049d52P
       7:     0x7fe845aebfd0 - middle::traits::project::opt_normalize_projection_type::hb3defb9cc9365d1e8UP
       8:     0x7fe845ad9ba0 - middle::traits::project::normalize_projection_type::hdc293893275ee559JTP
       9:     0x7fe845aed470 - middle::traits::project::AssociatedTypeNormalizer.TypeFolder::fold_ty::h801cbd2cdff2eff1kSP
      10:     0x7fe846daa2e0 - middle::ty_fold::Rc.TypeFoldable::fold_with::h6325524173844043840
      11:     0x7fe846daae90 - middle::ty_fold::VecPerParamSpace.TypeFoldable::fold_with::h13884369302522804796
      12:     0x7fe846dc6280 - check::FnCtxt::instantiate_bounds::hed550a9659b70335Oll
      13:     0x7fe846ddefc0 - check::wf::CheckTypeWellFormedVisitor::check_impl::closure.29997
      14:     0x7fe846ddb430 - check::wf::CheckTypeWellFormedVisitor::with_fcx::hb1283961ed8977b7Gfi
      15:     0x7fe846de1d70 - check::wf::CheckTypeWellFormedVisitor.Visitor::visit_item::h001ababd87597e37soi
      16:     0x7fe846fcefe0 - check_crate::unboxed_closure.40162
      17:     0x7fe846fc9c30 - check_crate::h19fb6dea5733566ajsx
      18:     0x7fe847d04640 - driver::phase_3_run_analysis_passes::h46b1604d9f9f5633Tva
      19:     0x7fe847cf2ae0 - driver::compile_input::h68b8602933aad8d7wba
      20:     0x7fe847dbdeb0 - thunk::F.Invoke::invoke::h18029802347644288836
      21:     0x7fe847dbcc60 - rt::unwind::try::try_fn::h6518866316425934196
      22:     0x7fe84783f400 - rust_try_inner
      23:     0x7fe84783f3f0 - rust_try
      24:     0x7fe847dbcfb0 - thunk::F.Invoke::invoke::h15513809553472565307
      25:     0x7fe8477c4e40 - sys::thread::thread_start::h5ea7ba97235331d5a9v
      26:     0x7fe841e130c0 - start_thread
      27:     0x7fe8473e4ec9 - __clone
      28:                0x0 - 
## uname --all
    Linux -Ubuntu 3.13.0-39-generic #66-Ubuntu SMP Tue Oct 28 13:30:27 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux
## Source code
    use std::iter::AdditiveIterator;
    struct Fibonacci {
        curr: uint,
        next: uint,
    }
    fn fib() -> Fibonacci {
        Fibonacci {curr: 1, next: 2}
    }
    impl Iterator for Fibonacci {
        fn next(&mut self) -> uint {
            let curr = self.curr;
            self.curr = self.next;
            self.next = curr + self.next;
            curr
        }
    }
    fn initial() -> uint {
        fib().take(5).sum();
    }
    fn main() {
        println!("Initial: {}", initial());
    }