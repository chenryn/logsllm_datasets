# DNS Resolution and Configuration

## DNS Queries
- **Queries for DNS resolution**:
  - Uses `/etc/nsswitch` and `/etc/resolv.conf`.
- **`dig`**:
  - Queries a DNS server directly, bypassing local configuration files if desired.
  - **Example Usage**:
    - `dig www.dell.com`: Gets the DNS server from `resolv.conf`.
    - `dig @dns_server www.dell.com`: Queries the specified DNS server directly.

## Configuration Files
- **Enabling caching-only for localhost**
- **Allowing queries from other systems**
- **Enabling Forwarding**
- **Firewall Considerations**: Port 53 must be open for both UDP and TCP.
- **SELinux Considerations**

## Email TLAs: MTA, MUA, MDA
- **MTA (Mail Transfer Agent)**: Conveys mail from server to server (e.g., sendmail, postfix).
- **MUA (Mail User Agent)**: Conveys mail between client and server (e.g., Evolution, Thunderbird, mutt, mail, elm).
- **MDA (Mail Delivery Agent)**: Conveys mail from server to local mail spools.

## Red Hat's New Default MTA: Postfix
- **Packages**: `postfix`
- **Configuration File**: `/etc/postfix/main.cf`
  - **Important Directives**:
    - `inet_interfaces`: Controls which interfaces the mail server listens on (by default, only localhost!).
    - `myhostname`: Provides the hostname for this server.
    - `mydomain`: Provides the mail domain for this server (often different from a DNS domain).
    - `myorigin`: Provides the host/domain that should be shown as the origin for outbound mail from the system.
    - `mynetworks`: Comma-separated list of IP addresses and networks that can relay through this mail server (e.g., `92.168.0.0/16, 10.0.0.0/8`).

### Postfix Configuration Tool
- **`postconf`**: Applies configuration changes on the fly (not persistent). Can also display available directives and default directives.

## Reading Mail
- **Tools**: `mail`, `mutt`

## Firewall and SELinux Considerations
- **Firewall**: Ensure port 53 is open for both UDP and TCP.
- **SELinux**: Considerations specific to SELinux configurations.

## Session 12
- Finish uncompleted topics, review, or practice exam.

## Supplemental Topics
- **Manage Processes and Services**: Schedule tasks using cron.

### Cron
- **Scheduler**: `man 5 crontab`
- **Components**: `anacron`, `crond`, `/etc/cron.*`, `/var/spool/cron`

#### Format of a crontab file
- **Syntax**:
  ```plaintext
  variable=value variable2=value
  minute hour dayofmonth month dayofweek command
  ```
- **Examples**:
  - `*/5 * * * * cleanup`: Runs `cleanup` every 5 minutes.
  - `1 23 * * 0 cleanup`: Runs `cleanup` at 11:01 PM every Sunday.
  - `1 23 5 * 0 cleanup`: Runs `cleanup` at 11:01 PM on the 5th of each month, but only if it falls on a Sunday.

#### Controlling Cron
- `cron -u username`: Run cron for a specific user.
- `cron -l`: List scheduled jobs.
- `cron -r`: Remove all scheduled jobs.
- `cron -e`: Edit the crontab file.

### at Jobs
- **Description**: Runs a job once at a specified time.
- **Time Formats**: Understands `now`, `midnight`, `noon`, `teatime`, `minutes`, `hours`, `day`, `week`.
- **Examples**:
  - `echo "/sbin/init 6" | at now + 10 minutes`
  - `at now + 10 minutes; at> /sbin/init 6; at>`

#### Commands
- `atq`: List scheduled at jobs.
- `atrm`: Remove a scheduled at job.

### Securing cron and at
- **Files**:
  - `/etc/cron.allow`
  - `/etc/cron.deny`
  - `/etc/at.allow`
  - `/etc/at.deny`

## User Administration with Config Files
- **Files**:
  - `/etc/passwd`: World-readable file of user information.
  - `/etc/shadow`: Restricted-access file with password and expiry info.
  - `/etc/group`: World-readable file of group information.
  - `/etc/gshadow`: Restricted-access group password, admin, membership info.

### Structure of /etc/passwd
- **Format**: `Name:Password:UID:GID:Comments:Homedir:Shell`
- **Sample Contents**:
  ```plaintext
  root:x:0:0:root:/root:/bin/bash
  sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin
  ntp:x:38:38::/etc/ntp:/sbin/nologin
  gdm:x:42:42::/var/gdm:/sbin/nologin
  scott:x:500:500:Scott Purcell:/home/scott:/bin/bash
  ```

### Structure of /etc/shadow
- **Format**: `Name:Password:Lstchg:Min:Max:Warn:Disable:Expire`
- **Sample Contents**:
  ```plaintext
  root:$1$IyApEyOS$dZ5SMuC7Yw9/PDMyWi1H11:14373:0:99999:7:::
  sshd:!!:14373:0:99999:7:::
  ntp:!!:14373:0:99999:7:::
  gdm:!!:14373:0:99999:7:::
  scott:$1${...}:14374:0:99999:7:::
  bob:$1${...}:14398:7:30:7:7:14457:
  ```

### Structure of /etc/group
- **Format**: `Name:Password:GID:Users`
- **Sample Contents**:
  ```plaintext
  root:x:0:root
  scott:x:500:
  bob:x:501:
  mary:x:502:
  sales:x:503:bob,mary
  training:x:504:scott
  ```

### Structure of /etc/gshadow
- **Format**: `Name:Password:Admins:Members`
- **Sample Contents**:
  ```plaintext
  root:::root
  scott:!!::
  bob:!::
  mary:!::
  sales:!::bob,mary
  training:!::scott
  ```

## User Administration with CLI Tools
- **Commands**:
  - `useradd`, `usermod`, `userdel`: Create, delete, and modify user accounts.
  - `groupadd`, `groupmod`, `groupdel`: Create, delete, and modify group accounts.
  - `chage`: Modify password aging and expiration.

## User Administration with GUI Tools
- **Red Hat User Manager**:
  - **Launch**: From the menu at **System | Administration | Users and Groups** or from the CLI as `system-config-users`.
  - **Image**: ![User Manager](images/UserMgr.png){width="80.0%"}

## User Environment
- **Home directories**: `/home/{user}/` or `/root/`
- **/etc/skel**: Contents copied to the home directory of each new user.
- **Common Contents**:
  - `.bashrc`
  - `.bash_logout`
  - `.bash_profile`

### System-wide Shell Config Files
- **/etc/profile**: Executed with each user login. Sets paths, variables, etc. Runs scripts in `/etc/profile.d`.
- **/etc/profile.d**: Scripts that extend `/etc/profile`, usually added by applications.
- **/etc/bashrc**: System-wide functions and aliases.

### User-configurable Environment Files
- **~/.bashrc**: User aliases and functions.
- **~/.bash_profile**: User paths, variables, and environment settings.

## CUPS Printing System
- **Uses IPP**: Do not firewall port 631 UDP/TCP from localhost or you will not print even to local printers.
- **GUI Tool**: `system-config-printer` (requires X).

### Controlling Jobs from the Command Line
- **Commands**:
  - `lpr`: Send a job to a printer.
  - `lpq`: See what is in the print queue.
  - `lprm`: Remove a job from the print queue.
  - `lpc`: Check the status of the queues (e.g., `lpc status`).

### CUPS Web-Based Interface
- Accessible via a web browser.

## Troubleshooting
- **General Tips**:
  - Read the entire error or message carefully.
  - Look at the logs: `/var/log/messages`, `/var/log/secure`.
  - Check for typos in the command line or configuration file.
  - Break the problem down into smaller parts and troubleshoot them.

### Booting
- **Consider the boot process** and identify the point of failure:
  - **MBR (GRUB Stage 1)**
  - **GRUB Stage 1.5 (Driver to read filesystem)**
  - **GRUB Stage 2 (Menu)**
    - Kernel
    - initrd (initial ramdisk)
  - **init process**
    - `inittab`
  - **rc.sysinit**
  - **Services**

#### Booting - MBR
- The MBR boots the system and loads the next GRUB stage.
- **Check**: Is the partition marked bootable according to `fdisk`?

#### Booting - GRUB Stage 1.5
- If this does not exist or is corrupt, Stage 2 may not be able to be loaded.

#### Booting - GRUB Stage 2
- This stage reads `grub.conf` and displays the GRUB menu.
- **Tells GRUB** where and which kernel and initial ramdisk to load.
- **Passes extra boot options** to the kernel.
- **Example**: `root (hd0,0)` indicates the files from `/boot` are located on the first partition of the first drive.

#### Booting - Kernel
- Be careful to not create a typo when specifying the kernel.
- **Common Typos**:
  - A dash instead of a period.
  - Ensure `root=` specifies the correct location of the device containing root (`/`).

#### Booting - initrd (initial ramdisk)
- Be careful to not create a typo when specifying the kernel.
- **Common Typos**:
  - A dash instead of a period.
- **Initial ramdisk** needs all drivers needed for loading the filesystem.
  - Storage drivers must be included.
  - Network drivers must be included for booting across the network.

#### Booting - init process
- `/sbin/init` needs to exist and be executable.
- It is the parent of all processes.

#### Booting - inittab
- This is `init`'s configuration file.
- **Calls** `rc.sysinit`.
- **Runs services** for the appropriate run levels.
- **Common Issues**:
  - "Process spawning too rapidly" during boot: Check this file or the commands it calls.

#### Booting - rc.sysinit
- **Sets hostname**.
- **Runs filesystem checks** if needed.
- **Mounts file systems** in `fstab`.
- **Remounts `/` as read/write**.

#### Booting - services
- **Possible Issue**: A service causing the boot issue.
- **Test**:
  - Boot into run level 1 (runs `rc.sysinit` and a couple of services).
  - Boot into runlevel S (does not start any services and does not run `rc.sysinit`).

## Networking
- **Files**:
  - `/etc/resolv.conf`: DNS resolution.
  - `/etc/nsswitch`
  - `/etc/sysconfig/network`
  - `/etc/sysconfig/network-scripts/ifcfg-eth*`

## X
- **Command**: `system-config-display --reconfig --noui`

## TCP_Wrappers
- **Description**: An easy-to-configure security mechanism that protects some (but not all!) services using the hosts access files, `/etc/hosts.allow` and `/etc/hosts.deny`.
- **Processing Order**:
  - `hosts.allow` is processed first, then `hosts.deny`.
  - Each file is read from top down, and the first matching rule is applied (subsequent rules are ignored).
  - If no matching rule is found, **access is granted**.
  - Changes take immediate effect (no services need restarting).

### Which Services are Protected?
- **All services managed by xinetd** (e.g., `telnetd`, `tftpd`).
- **Other services compiled against the libwrap.a library** (e.g., `sshd`, `sendmail`, `vsftpd`).
- **Notably NOT included**: `httpd`.

### Identifying Protected Services
- **Steps**:
  1. Identify the binary used by the service: `# which sendmail`
  2. Run `ldd` and `strings` against the binary and examine the output for `libwrap`:
     - `# strings $(which sendmail) | grep libwrap`
     - `# ldd $(which sendmail) | grep libwrap`
  3. Null output confirms the service does NOT use tcp_wrappers:
     - `# ldd $(which httpd) | grep libwrap`

### Hosts Access Files Syntax
- **Basic format**: `daemon_list : client_list [: : ...]`
- **Lists**:
  - Comma-separated.
  - `daemon_list` uses process names (not always the same as the service name).
  - `client_list` is hostnames, IP addresses, patterns, or wildcards.
- **More details**: `man hosts_options`

## Source Repository
- **Info**: See [here](<>) for the latest version of this document.
- **Author**: Scott Purcell <scott.purcell@example.com>
- **Date**: August 15, 2023

[^1]: A mebibyte (MiB) is the proper term for the unit containing 1024 units (kibibytes or KiB) of 1024 bytes. This is in contrast to the term "megabyte" which properly refers to a unit containing 1000 units (kilobytes or kB) of 1000 bytes. For more information, see the [short summary by The National Institute of Standards and Technology (NIST)](http://physics.nist.gov/cuu/Units/binary.html) or the [reference article on Wikipedia](http://en.wikipedia.org/wiki/Binary_prefix).

[^2]: A mebibyte (MiB) is the proper term for the unit containing 1024 units (kibibytes or KiB) of 1024 bytes. This is in contrast to the term "megabyte" which properly refers to a unit containing 1000 units (kilobytes or kB) of 1000 bytes. For more information, see the [short summary by The National Institute of Standards and Technology (NIST)](http://physics.nist.gov/cuu/Units/binary.html) or the [reference article on Wikipedia](http://en.wikipedia.org/wiki/Binary_prefix).