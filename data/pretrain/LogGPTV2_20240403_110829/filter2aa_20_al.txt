主要行为
2005 年 10 月
JS/Spacehero(samy)
myspace.com
为名为 samy 的账户增加好友
2006 年 6 月
JS.Yamanner@m
Yahoo ！邮箱（美国版）
向感染者的通讯录中的邮箱地址发送病毒
2009 年 4 月
JS.Twettir
twitter.com
将病毒复制到感染者的个人资料页面中
2010 年 9 月
-
twitter.com
自动发布跳转至成人网站的信息等
虽然这些蠕虫病毒表面上看上去并不带有恶意，但如果罪犯有决心的话，就能够收集大量的用户个人信息或者伪装他人发布信息，从而形成潜在的巨大风险。
另外，随着 Ajax 技术的风靡，通过 JavaScript 调用 Web 应用的各种功能的程序（Application Program Interface，缩写为 API）在网站中的分量正在逐步增加。由于 API 也能被恶意用于实施攻击，因此，综合使用 XSS 与 JavaScript 的攻击实施起来反而变得更容易了。
篡改网页
以上解说的攻击手段中，XSS 攻击的对象网站仅限于支持会员登录的网站。其实，没有登录功能的网站同样也会遭受 XSS 攻击。
图 4-15 是某新发布的手机的预购网站。该网站由于存在 XSS 漏洞，因此便能够对网页中的 HTML 元素进行添加 / 更改 / 删除，或者更改表单发送的目标。
图 4-15 某新款手机的预购网站
网页脚本的主干内容如下 12
 。由于该页面兼任着输入页面和编辑页面，因此各个输入框都设置了初期值。而 XSS 漏洞就存在于此。
代码清单 43/43-902.php
 全新手机预约 
姓    名 ">
地    址 ">
电话号码 ">
型    号 ">
数    量 ">
虽然该网站没有认证功能，但同样能对其实施 XSS 攻击。
以下 HTML（43-902.html）为对“某新款手机的预约网站”进行 XSS 攻击的恶意网页。该页面同时也可以作为不使用 JavaScript 的 XSS 攻击的示例，页面上通过样式将攻击用表单的提交按钮伪装成了链接的样子。
代码清单 43/43-902.html
 使用信用卡预约全新手机 
现在可以使用信用卡预约手机，赶紧下单吧。
请使用信用卡支付预购定金姓    名地    址电话号码型    号数量信用卡号有效期限
'>                      └─注入的 HTML
                                         └────伪装成链接的按钮
下图为恶意网页的页面。
图 4-16 恶意网页
用户点击伪装成链接的按钮后，如下 HTML 就会被生成在攻击对象网站上。
                       ┌使原先的 from 元素结束
姓    名 
                                                       ┌通过指定样式将原先的 form 覆盖
 请使用信用卡支付预购定金
 姓    名  地 址 电话号码  型 号  数    量
 信用卡号  有效期限 
">
恶意网页通过下列手段隐藏原先的 form 并添加新的 form，从而改变页面。
使用  使原先页面的 form 元素结束
添加新的 form 元素，并指定 style 如下
通过指定绝对座标将 form 的位置定位于左上角
将 z-index 设置为很大的值 (99)，确保其堆叠顺序在原先 form 的前面
将背景色设为白色，从而隐藏原先的 form
将 action 的 URL 指定为恶意网站
被更改后的页面如下图所示。
图 4-17 被更改后的手机预购网站
页面上被添加了“请使用信用卡支付预购定金”和输入信用卡卡号及有效期限的文本框。此外，尽管页面上看不出来，但 form 元素的 action 属性也已经被变成了恶意网站的 URL。
然而，浏览器地址栏上显示的 URL 却同先前的手机预购网站完全一致。此外，虽然本例没有涉及，但事实上当网站为 https 时其证书也会被显示为正规。因此，用户便找不到任何蛛丝马迹来识破这一伪装的页面。
由此可见，XSS 并非一定会使用 JavaScript，因此，如果防范策略仅局限于 script 元素（例如将“script”单词全部删除），攻击者还是会有可乘之机。而对用户来说，仅在浏览器中禁止 JavaScript 也是不能得以高枕无忧的。
反射型 XSS 与存储型 XSS
接下来我们将换个视角，根据攻击用 JavaScript 代码的存储地点将 XSS 攻击分类。
如果攻击用 JavaScript 代码位于攻击目标网站之外的其他网站（恶意网站或邮件中的 URL），就称之为反射型 XSS（Reflected XSS）。最先介绍的 43-001.php 中的 XSS 攻击模式，就属于反射型 XSS。反射型 XSS 多发生于网页将用户的输入值原封不动地显示出来的情况下。其中，输入值确认页面就是一个典型的例子。
图 4-18 反射型 XSS
与此相对，有时攻击者也会将攻击用 JavaScript 代码保存至攻击对象的数据库中。这种模式的 XSS 就被称为存储型 XSS（Stored XSS）或持久性 XSS（Presistent XSS）。
图 4-19 存储型 XSS
存储型 XSS 的典型攻击对象为 Web 邮箱客户端以及社交网站（Social Networking Service，简称 SNS）。存储型 XSS 无需攻击者费尽心思将用户引诱至恶意网站，而且即使是戒心很重的用户也会有很大的几率中招，因此对攻击者来说益处多多。
存储型 XSS 产生的原因同样也位于生成 HTML 的地方。
除此之外，当网页中存在不通过服务器而仅依靠前端 JavaScript 来显示的参数时，就有可能会招致 DOM based XSS 这种类型的 XSS 发生。详情将在 4.3.2 节介绍。
9
 IE8 默认启用 XSS 筛选器的情况下，会阻挡通过 XSS 执行的 JavaScript。若要在 IE8 中显示图 4-12 的效果，可以选择“工具”菜单的“Internet 选项”→选择“安全”标签→点击“自定义级别”→脚本→启用 XSS 筛选器→关闭。实验结束后，再将设置改回。
10
 实际的攻击中，攻击者会通过设置 CSS 将 iframe 部分隐藏，以不被用户看到。
11
 其实 43-091.php 中也存在 XSS 漏洞，但假设攻击者对此并不知情。
12
$_POST
 变量前面的“@”为错误控制运算符，用于忽略该 POST 变量未定义时发生的错误。
安全隐患的产生原因
XSS 漏洞产生的原因为，生成 HTML 的过程中，HTML 语法中含有特殊意义的字符（元字符）没有被正确处理，结果导致 HTML 或 JavaScript 被肆意注入，从而使得原先的 HTML 结构产生变化。为了消除元字符的特殊意义，将其转化为普通字符，就需要用到转义（Escape）处理。HTML 的转义处理对于消除 XSS 至关重要。
接下来就让我们来看一下 HTML 中转义的方法，以及不转义时将会遭受的攻击。
HTML 转义的概要
这里我们来重点看一下如何正确地进行 HTML 转义。
例如，在 HTML 中显示 
              └──属性值
元素内容
图 4-20 元素内容和属性值的说明
下表归纳了不同位置的参数的转义方法。
表 4-4 参数所在位置及相应的转义方法
位置
说明
最低限度的转义内容
元素内容
能解释 Tag和字符实体
结束边界字符为“
>
此时，假设 p
 的值如下。
1+onmouseover%3dalert(document.cookie)