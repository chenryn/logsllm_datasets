Recursion inside WM_NCCALCSIZE window message callback
Move window of opposite thread to increase recursion
Opposite thread
This thread
Trigger race condition on maximum level of recursion during 
thread termination
43
CVE-2018-8589
For exploitation is enough to fill buffer with pointers to shellcode. Return address of SfnINOUTNCCALCSIZE
will be overwritten and execution hijacked
Vulnerability will lead to asynchronous copying of the lParam structure controlled by the attacker
44
Framework
CVE-2018-8589 led to bigger discoveries as it was a part of a larger exploitation framework
• AV evasion
• Choosing appropriate exploit reliably
• DKOM manipulation to install rootkit
Framework purposes
45
Framework - AV evasion
Exploit checks the presence of emet.dll and if it is not present it uses trampolines to execute all functions
•
Searches for patterns in text section of system libraries
•
Uses gadgets to build fake stack and execute functions
/* build fake stack */
push    ebp
mov
ebp, esp
push    offset gadget_ret
push    ebp
mov
ebp, esp
push    offset gadget_ret
push    ebp
mov
ebp, esp
…
/* push args*/
…
/* push return address*/
push    offset trampilne_prolog
/* jump to function */
jmp
eax
46
Framework - Reliability
Exploit may be triggered more than once
For reliable exploitation proper mutual exclusion is required
Otherwise execution of multiple instances of EOP exploit will lead to BSOD
Use of CreateMutex() function may arouse suspicion
47
Framework - Reliability
Existence of memory block means exploit is running
Create Mutex
48
Framework - Reliability
Framework may come with multiple exploits (embedded or received from remote resource)
Exploits perform Windows OS version checks to find if exploit supports target
Framework is able to try different exploits until it finds an appropriate one
Each exploit provides interface to execute provided kernel shellcode
Maximum for embedded exploits
We have seen 4 different exploits
49
Framework - Armory
CVE-2018-8589
CVE-2015-2360
CVE-2018-8611
CVE-2019-0797
?
?
?
We have found 4. But the maximum is 10?
50
Case 3
CVE-2018-8611
Race condition in tm.sys driver
Code is written to support next OS versions:
•
Windows 10 build 15063
•
Windows 10 build 14393
•
Windows 10 build 10586
•
Windows 10 build 10240
•
Windows 8.1
•
Windows 8
•
Windows 7
New build of exploit added support for:
•
Windows 10 build 17133
•
Windows 10 build 16299
Allows to escape the sandbox in Chrome and Edge because 
syscall filtering mitigations do not apply to ntoskrnl.exe syscalls
51
CVE-2018-8611
tm.sys driver implements Kernel Transaction Manager (KTM)
It is used to handle errors:
•
Perform changes as a transaction
•
If something goes wrong then rollback changes to file system or registry
It can also be used to coordinate changes if you are designing a new data storage system
52
CVE-2018-8611
Resource manager objects
Transaction objects
Enlistment objects
KTM Objects 
Transaction manager objects
Transaction - a collection of data operations
Resource manager - component that manages data resources that can be updated by transacted operations
Transaction manager - it handles communication of transactional clients and resource managers 
It also tracks the state of each transaction (without data)
Enlistment - an association between a resource manager and a transaction
53
CVE-2018-8611
To abuse the vulnerability the exploit first creates a named pipe and opens it for read and write
Then it creates a pair of new transaction manager objects, resource manager objects, transaction objects
Transaction 1
Transaction 2
54
CVE-2018-8611
Transaction 1
Transaction 2
55
CVE-2018-8611
Exploit creates multiple threads and binds them to a single CPU core
Thread 1 calls NtQueryInformationResourceManager in a loop
Thread 2 tries to execute NtRecoverResourceManager once
56
CVE-2018-8611
Exploitation happens inside third thread
This thread executes NtQueryInformationThread to get last syscall of thread with RecoverResourceManager
Successful execution of NtRecoverResourceManager will mean that race condition has occurred
At this stage, execution of WriteFile on previously created named pipe will lead to memory corruption
57
CVE-2018-8611
CVE-2018-8611 is a race condition in function TmRecoverResourceManagerExt
Check that ResourceManager is online at function start
Check that enlistment is finalized
But it may happen that ResourceManager will be destroyed before all enlistments will be processed  
…
58
CVE-2018-8611
Microsoft fixed vulnerability with following changes:
•
Check for enlistment status is removed
•
Check that ResourceManager is still online is added
59
CVE-2018-8611
We have control over enlistment object. How to exploit that?
There are not many different code paths 
We are able to AND arbitrary value if it passes a check.
Seems to be hard to exploit.
60
CVE-2018-8611
We have control over enlistment object. How to exploit that?
There are not many different code paths 
We can craft our own object (PVOID)(v10 + 64)
61
CVE-2018-8611
62
CVE-2018-8611
Dispatcher objects:
nt!_KEVENT
nt!_KMUTANT
nt!_KSEMAPHORE
nt!_KTHREAD
nt!_KTIMER
…
dt nt!_KTHREAD
+0x000 Header           : _DISPATCHER_HEADER
…
dt nt!_DISPATCHER_HEADER
+0x000 Lock             : Int4B
+0x000 LockNV
: Int4B
+0x000 Type             : UChar
+0x001 Signalling
: UChar
…
63
CVE-2018-8611
dt nt!_KOBJECTS
EventNotificationObject = 0n0
EventSynchronizationObject = 0n1
MutantObject = 0n2
ProcessObject = 0n3
QueueObject = 0n4
SemaphoreObject = 0n5
ThreadObject = 0n6
GateObject = 0n7
TimerNotificationObject = 0n8
TimerSynchronizationObject = 0n9
Spare2Object = 0n10
Spare3Object = 0n11
Spare4Object = 0n12
Spare5Object = 0n13
Spare6Object = 0n14
Spare7Object = 0n15
Spare8Object = 0n16
ProfileCallbackObject = 0n17
ApcObject = 0n18
DpcObject = 0n19
DeviceQueueObject = 0n20
PriQueueObject = 0n21
InterruptObject = 0n22
ProfileObject = 0n23
Timer2NotificationObject = 0n24
Timer2SynchronizationObject = 0n25
ThreadedDpcObject = 0n26
MaximumKernelObject = 0n27
64
CVE-2018-8611
Provide fake EventNotificationObject
65
CVE-2018-8611
While current thread is in a wait state we can modify dispatcher object from user level
We have address of _KWAIT_BLOCK, we can calculate address of _KTHREAD
0: kd> dt nt!_KTHREAD
+0x000 Header           : _DISPATCHER_HEADER
+0x018 SListFaultAddress : Ptr64 Void
+0x020 QuantumTarget
: Uint8B
+0x028 InitialStack
: Ptr64 Void
+0x030 StackLimit
: Ptr64 Void
+0x038 StackBase
: Ptr64 Void
+0x040 ThreadLock
: Uint8B
...
+0x140 WaitBlock
: [4] _KWAIT_BLOCK
+0x140 WaitBlockFill4   : [20] UChar
+0x154 ContextSwitches : Uint4B
...
_KTHREAD = _KWAIT_BLOCK - 0x140
66
CVE-2018-8611
Modify dispatcher object, build SemaphoreObject
0: kd> dt nt!_KMUTANT
+0x000 Header           : _DISPATCHER_HEADER
+0x018 MutantListEntry : _LIST_ENTRY
+0x028 OwnerThread
: Ptr64 _KTHREAD
+0x030 Abandoned        : UChar
+0x031 ApcDisable
: UChar
mutex->Header.Type = SemaphoreObject;
mutex->Header.SignalState = 1;
mutex->OwnerThread = Leaked_KTHREAD;
mutex->ApcDisable = 0;
mutex->MutantListEntry = Fake_LIST;
mutex->Header.WaitListHead.Flink = 
0: kd> dt nt!_KWAIT_BLOCK
+0x000 WaitListEntry
: _LIST_ENTRY
+0x010 WaitType
: UChar
+0x011 BlockState
: UChar
+0x012 WaitKey
: Uint2B
+0x014 SpareLong
: Int4B
+0x018 Thread           : Ptr64 _KTHREAD
+0x018 NotificationQueue : Ptr64 _KQUEUE
+0x020 Object           : Ptr64 Void
+0x028 SparePtr
: Ptr64 Void
67
CVE-2018-8611
waitBlock.WaitType = 3;
waitBlock.Thread = Leaked_KTHREAD + 0x1EB;
0: kd> dt nt!_KWAIT_BLOCK
+0x000 WaitListEntry
: _LIST_ENTRY
+0x010 WaitType
: UChar
+0x011 BlockState
: UChar
+0x012 WaitKey
: Uint2B
+0x014 SpareLong
: Int4B
+0x018 Thread           : Ptr64 _KTHREAD
+0x018 NotificationQueue : Ptr64 _KQUEUE
+0x020 Object           : Ptr64 Void
+0x028 SparePtr
: Ptr64 Void
Call to GetThreadContext(…) will make 
KeWaitForSingleObject continue execution
Add one more thread to WaitList with WaitType = 1
68
CVE-2018-8611
Fake Semaphore object will be passed to KeReleaseMutex that is a wrapper for KeReleaseMutant
Check for current thread will be bypassed because we were able to leak it
69
CVE-2018-8611
Since WaitType of crafted WaitBlock is equal to three, this WaitBlock will be passed to KiTryUnwaitThread
70
CVE-2018-8611
KiTryUnwaitThread is a big function but the most interesting is located at function end
This was set to Leaked_KTHREAD + 0x1EB
We are able to set Leaked_KTHREAD + 0x1EB + 0x40 to 0!
71
CVE-2018-8611
KTHREAD + 0x22B
0: kd> dt nt!_KTHREAD
...
+0x228 UserAffinity
: _GROUP_AFFINITY
+0x228 UserAffinityFill : [10] UChar
+0x232 PreviousMode
: Char
+0x233 BasePriority
: Char
+0x234 PriorityDecrement : Char
72
CVE-2018-8611
One byte to rule them all
73
CVE-2018-8611
With ability to use NtReadVirtualMemory, further elevation of privilege and installation of rootkit is trivial
Possible mitigation improvements:
•
Hardening of Kernel Dispatcher Objects
•
Validation with secret for PreviousMode
Abuse of dispatcher objects seems to be a valuable exploitation technique
•
Huge thanks to Microsoft for handling our findings very fast.
•
Zero-days seems to have a long lifespan. Good vulnerabilities survive mitigations.
•
Attackers know that if an exploit is found it will be found by a security vendor. There is a shift to implement 
better AV evasion.
•
Two exploits that we found were for the latest builds of Windows 10, but most zero-day that are found are 
for older versions. It means that effort put into mitigations is working.
•
Race condition vulnerabilities are on the rise. Three of the five vulnerabilities that we found are race 
conditions. Very good fuzzers ( reimagination of Bochspwn? ) or static analysis? We are going to see more 
vulnerabilities like this.
•
Win32k lockdown and syscall filtering are effective, but attackers switch to exploit bugs in ntoskrnl.
•
We revealed a new technique with the use of dispatcher objects and PreviousMode.
74
Conclusions
Momigari: Overview of the latest Windows OS kernel exploits 
found in the wild
Twitter: @antonivanovm
Anton Ivanov
Kaspersky Lab
Twitter: @oct0xor 
Boris Larin
Kaspersky Lab
Q&A ?