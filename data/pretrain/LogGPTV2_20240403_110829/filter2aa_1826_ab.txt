# Recursion inside WM_NCCALCSIZE Window Message Callback

## Exploitation Technique
- **Triggering Recursion**: Move a window from an opposite thread to increase recursion.
- **Race Condition**: Trigger a race condition at the maximum level of recursion during thread termination.

### Vulnerability Details
- **CVE-2018-8589**: This vulnerability can be exploited by filling a buffer with pointers to shellcode. The return address of `SfnINOUTNCCALCSIZE` will be overwritten, leading to execution hijacking.
- **Impact**: Asynchronous copying of the `lParam` structure controlled by the attacker, allowing for arbitrary code execution.

## Exploitation Framework
### Overview
- **CVE-2018-8589** was part of a larger exploitation framework, which included:
  - **AV Evasion**
  - **Reliable Exploit Selection**
  - **DKOM (Direct Kernel Object Manipulation) for Rootkit Installation**

### AV Evasion
- **Exploit Behavior**: Checks for the presence of `emet.dll`. If not present, it uses trampolines to execute functions.
- **Techniques**:
  - **Pattern Search**: Searches for patterns in the text section of system libraries.
  - **Gadget Usage**: Uses gadgets to build a fake stack and execute functions.
  - **Example Code**:
    ```assembly
    /* build fake stack */
    push    ebp
    mov     ebp, esp
    push    offset gadget_ret
    push    ebp
    mov     ebp, esp
    ...
    /* push args */
    ...
    /* push return address */
    push    offset trampoline_prolog
    /* jump to function */
    jmp     eax
    ```

### Reliability
- **Multiple Triggers**: The exploit may be triggered more than once, requiring proper mutual exclusion to avoid BSODs.
- **Mutex Use**: Using `CreateMutex()` may arouse suspicion, so the framework checks for the existence of a memory block to determine if the exploit is running.

### Exploit Management
- **Multiple Exploits**: The framework can include multiple exploits, either embedded or received from a remote resource.
- **Version Checks**: Each exploit performs Windows OS version checks to ensure compatibility.
- **Shellcode Execution**: Each exploit provides an interface to execute provided kernel shellcode.
- **Embedded Exploits**: Up to 4 different exploits have been observed, with a maximum of 10 possible.

### Armory
- **Vulnerabilities**:
  - **CVE-2018-8589**
  - **CVE-2015-2360**
  - **CVE-2018-8611**
  - **CVE-2019-0797**

## Case Study: CVE-2018-8611
### Race Condition in tm.sys Driver
- **Supported OS Versions**:
  - Windows 10 builds: 15063, 14393, 10586, 10240
  - Windows 8.1
  - Windows 8
  - Windows 7
  - New builds: 17133, 16299
- **Impact**: Allows sandbox escape in Chrome and Edge due to syscall filtering mitigations not applying to `ntoskrnl.exe` syscalls.

### Kernel Transaction Manager (KTM)
- **Purpose**: Handles errors and transactions in the file system and registry.
- **Objects**:
  - **Transaction Objects**: Collections of data operations.
  - **Resource Manager Objects**: Manage data resources updated by transacted operations.
  - **Transaction Manager Objects**: Handle communication between transactional clients and resource managers.
  - **Enlistment Objects**: Associations between resource managers and transactions.

### Exploitation Steps
1. **Named Pipe Creation**: Creates a named pipe and opens it for read and write.
2. **Object Creation**: Creates pairs of transaction manager, resource manager, and transaction objects.
3. **Thread Management**:
   - **Thread 1**: Calls `NtQueryInformationResourceManager` in a loop.
   - **Thread 2**: Tries to execute `NtRecoverResourceManager` once.
   - **Thread 3**: Executes `NtQueryInformationThread` to get the last syscall of the thread with `RecoverResourceManager`.
4. **Race Condition**: Successful execution of `NtRecoverResourceManager` indicates a race condition, leading to memory corruption via `WriteFile` on the named pipe.

### Vulnerability Fix
- **Microsoft's Fix**:
  - Removed check for enlistment status.
  - Added check to ensure the ResourceManager is still online.

### Exploitation Techniques
- **Control Over Enlistment Object**: Limited code paths, but allows ANDing of arbitrary values if they pass a check.
- **Crafting Objects**: Can create custom objects using specific offsets.
- **Dispatcher Objects**:
  - **Types**: `KEVENT`, `KMUTANT`, `KSEMAPHORE`, `KTHREAD`, `KTIMER`
  - **Modification**: Modify dispatcher objects to build a fake Semaphore object.
  - **WaitBlock Manipulation**: Set `WaitType` and `Thread` fields to control execution flow.
  - **KeReleaseMutex**: Bypasses current thread checks by leaking the thread.
  - **KiTryUnwaitThread**: Allows setting specific thread fields to gain control.

### Mitigation Improvements
- **Kernel Dispatcher Objects Hardening**
- **Validation with Secret for PreviousMode**

### Conclusions
- **Momigari**: Overview of the latest Windows OS kernel exploits found in the wild.
- **Presenters**:
  - **Anton Ivanov** (@antonivanovm), Kaspersky Lab
  - **Boris Larin** (@oct0xor), Kaspersky Lab

### Q&A
- **Questions and Answers** session to follow.