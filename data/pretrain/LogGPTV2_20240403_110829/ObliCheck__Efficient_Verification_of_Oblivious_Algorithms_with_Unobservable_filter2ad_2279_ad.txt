sion, ObliCheck has to intelligently choose variables to apply
the optimistic state merging technique.
Iteratively and Selectively Unmerging State
5.2
To overcome the issue, we introduce an iterative way to re-
move false positives. Choosing which values to merge during
the execution is tricky. The symbolic execution engine does
not immediately know how an updated variable is used later
by the veriﬁcation condition. A naïve solution is rolling back
the merged state after the ﬁrst iteration. However, this sim-
ple delayed rollback approach can cause the performance to
signiﬁcantly deteriorate when a given algorithm is a false-
positive. In this strawman solution, ObliCheck will always
unmerge every symbolic value in the second iteration and
perform as poorly as regular symbolic execution.
Instead of identifying which variables to merge, ObliCheck
does the reverse. ObliCheck ﬁrst runs a program merging
every variable updated in multiple execution paths. Then it
checks the veriﬁcation condition, and identiﬁes which vari-
ables should be unmerged. In the next iteration, ObliCheck
backtracks the execution, locates operations where the merg-
ing should be avoided and re-runs the program symbolically.
The veriﬁcation is performed again at the end of the iteration.
This iterative process helps ObliCheck learn how a certain
USENIX Association
30th USENIX Security Symposium    2227
else
buf.push(func1(records[i].first));
buf.push(Pair(secretInput[i], 1));
buf.push(Pair(secretInput[i], 0));
var buf = [];
for (var i = 0; i  then
...
if (C.LHS - C.RHS) - C.Value == C.Delta then
C.LoopCount = -(C.InitialVal / C.Delta)
if L.Operator == < then
if L.Iteration == 2 then
sound veriﬁcation and ﬁnish loop summarization within three
iterations by over-approximation. Algorithm 2 in Figure 5
describes our loop summarization algorithm.
Finding Induction variables. ObliCheck ﬁgures out the
difference of each variable between the ﬁrst and second itera-
tions, and the second and third ones. Then ObliCheck checks
that the two differences are the same. The ﬁrst iteration starts
with an empty state mapping. When a variable is modiﬁed
in the ﬁrst iteration, an entry from the variable to its con-
crete or symbolic value is updated. If a variable is referenced
but does not have an entry in the mapping, an unconstrained
symbolic variable is assigned to the referenced variable. This
over-approximation takes any possible modiﬁcations in previ-
USENIX Association
30th USENIX Security Symposium    2229
ous iterations into account. At the end of the ﬁrst iteration, the
values of the updated variables are saved. The second iteration
is executed with the state created during the ﬁrst iteration. At
the end of the second iteration, the difference of the values
saved at the ﬁrst iteration and the second one is calculated
and saved. After the third iteration, another set of the deltas
is obtained and the variables whose deltas are the same are
judged as induction variables.
Calculating the number of iterations. The number of loop
iterations depends on the loop condition that bounds the loop.
Loop conditions are the conditional statements inside a loop
that have one of their targets point to the outside of the loop.