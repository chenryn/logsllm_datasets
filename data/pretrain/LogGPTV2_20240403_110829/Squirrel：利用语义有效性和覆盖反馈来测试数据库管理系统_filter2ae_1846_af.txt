[!syntax＆!semantic]优于Squirrel [!semantic]的优势主要在于生成速度更快。 Squirrel
[!feedback]需要700分钟才能找到第一个崩溃。唯一崩溃的总数遵循相同的模式，其中Squirrel，Squirrel
[!semantic]，Squirrel [!syntax＆!managet]和Squirrel
[!feedback]分别检测到600、30、10和3次崩溃。上面的结果表明，Squirrel的所有三个因素对碰撞检测至关重要。此外，基于覆盖的反馈起着最重要的作用，而仅语法测试无法胜过AFL。
**独特的错误:**
我们采用相同的策略来测量独特的错误，我们每小时都会对检测到的错误进行修补。图10（b）显示了结果。功能齐全的Squirrel可发现9个独特的错误，而其他变体仅检测一个独特的错误。如表4所示，全功能版本还涵盖了Squirrel变体（!feedback&!semantic）发现的唯一错误。
**New Edges:**
图10（c），（f）和（i）展示了一种（几乎）一致的模式，该模式为SQLite，PostgreSQL和MySQL寻找新的边缘：Squirrel>
Squirrel[!semantic]> Squirrel[!syntax&semantic]> Squirrel[!feedback]。
基于覆盖率的反馈有助于使SQLite，PostgreSQL和MySQL变得模糊2.0倍的新优势。与AFL相比，语法正确性可以帮助找到多1.0×-1.5×的边，而语义正确性可以使数字增加0.3×-1.7×。
该结果表明，提高语法正确性或语义正确性有助于达到更多的DBMS状态。
**语法有效性和语义有效性:**
图10（d），（g）和（j）显示了在测试三个DBMS期间的语法变化，而图10（e），（h）和（k）显示了语义变化。在大多数情况下，Squirrel的有效性最高，而AFL的有效性最差。这个结果是合理的，因为我们设计Squirrel来获得更好的语言有效性，而AFL随机地变异SQL查询。但是，我们可以从图中发现一些有趣的异常。首先，Squirrel[!semantic]的语法准确性与图10（d）和（g）中的Squirrel相似，这表明提高语义正确性不会增加语法正确性。实际上，实例化可能会降低语法正确性，如图10（j）所示，因为它倾向于删除短查询。短查询在语法上更可能正确，但是我们的实例化程序无法修复其语义。例如，SELECT
a FROM
b在语义上是不正确的，因为不存在表b。由于SQLsmith的性能类似或什至优于Squirrel，因此PostgreSQL和MySQL的p值大于0.05。
其次，在图10（j）中，Squirrel[!feedback]与Squirrel具有相似的语义正确性。
这个结果似乎表明反馈对MySQL的语义正确性没有影响。
但是，进一步检查发现，Squirrel[!feedback]会产生非常不同的语义正确性：在五个实验中，两个实验的正确率超过40％，而其他三个实验的正确率则低于10％。
我们发现，MySQL中的初始种子比SQLite和PostgreSQL中的种子小。
这些小种子可能会导致Squirrel[!feedback]继续为MySQL生成正确但简单且重复的输入。
由于MySQL结果的随机性，附录表6中的p值大于0.05。
但是，图10（i）显示，与Squirrel[!feedback]相比，Squirrel生成的查询在结构上更加多样化，因为Squirrel发现了更多具有相似语义正确性的执行路径。
> 总体而言，语法，语义和反馈在Squirrel中起着至关重要的作用，以从DBMS中发现更多的内存错误。
> 基于覆盖率的反馈影响最大，而语法正确性和语义正确性则具有不同的影响。 最终结果是所有三个因素之间的相互作用。
## 9 讨论
我们讨论了当前Squirrel实施的局限性以及我们在未来的工作中解决这些局限的计划。
**DBMS特定逻辑:**
尽管我们的Squirrel设计与DBMS无关，但是我们发现合并特定于程序的功能始终有助于获得更好的测试结果。首先，每个DBMS都实现其SQL的方言，该方言与正式版本的SQL几乎相同（例如SQLite），或者在许多功能方面却与正式的显著不同（例如PostgreSQL）。
Squirrel完全支持SQL的通用语法，并且还包含针对不同方言的补丁。由于这个原因，Squirrel在SQLite上运行良好（51个错误），但在PostgreSQL，MySQL和MariaDB中仅触发了几个错误。我们计划对不同的SQL方言实施更准确的语法，以提高模糊测试的效率。其次，DBMS在执行查询之前可能会采取额外的检查。例如，我们发现PostgreSQL要求所有操作数之间的类型正确，并且不允许在整数和浮点数之间进行比较。
SQLite不会检查任何内容，但会在执行过程中自动执行类型转换，而MySQL仅警告类型不匹配的警告。我们计划在我们的语义指导实例中实现类型一致性关系，以测试PostgreSQL。
**关系规则构建:** Squirrel依赖关系规则来推断不同操作数之间的数据依赖关系。 目前，我们基于领域知识编写关系规则。
我们有两位作者花了两个小时来编写这些规则，这些规则仅涵盖133个条款。 为了减轻开发人员的繁琐工作，我们计划采用自动推断这些规则的技术。
例如，通过数据流分析，我们可以找出每个操作数之间的预期关系。 另外，我们可以尝试使用 **机器学习** 技术来自动从大量正常执行中捕获关系。
**代码覆盖中的冲突:** Squirrel依靠AFL的反馈机制来指导查询选择，不幸的是，它受到冲突问题的困扰。
默认情况下，AFL使用具有64K条目的位图记录分支覆盖范围，每个分支覆盖一个。 对于分支很少的小型程序，此方法效果很好。
但是，DBMS包含成千上万的分支，因此使用AFL测试DBMS具有严重的冲突问题。
例如，SQLite有大约20,000个不同的分支，其中14％的分支与其他分支共享位图条目。 在我们的评估过程中，我们将位图放大到256K以减轻冲突问题。
下一步，我们计划采用CollAFL中提出的解决方案来消除碰撞问题。
**替代反馈机制:** 最近的软件测试实践广泛采用代码覆盖率来指导基于突变的模糊测试。
但是，在我们的评估中，我们发现了潜在的有害代码覆盖范围，该覆盖范围阻碍了语义正确查询的生成。
特别是，在测试语法开始时，不正确的查询会在错误处理代码中触发许多新分支。 基于覆盖率的反馈指导Squirrel专注于这些输入，而不是原始的语义正确查询。
模糊语言编译器和解释器的最新著作提到了类似的观察。 我们计划调查此问题并开发解决方案以减轻此问题，例如删除输入以在短时间内触发新分支。
## 10 相关工作
**在DBMS中检测逻辑和性能错误.** DBMS已针对逻辑和性能缺陷进行了严格的测试[53、56、61、64]。
RAGS通过差异测试来检测DBMS中的正确性错误[56]。它在多个DBMS中生成并执行查询。结果之间的任何不一致都表明至少一个DBMS包含错误。
SQLancer构造查询以从表中获取随机选择的行[53]。如果测试的DBMS无法获取该行，则可能包含错误。 QTune
[41]是基于深度强化学习模型的数据库调优系统，可以有效地调优数据库配置以获得最佳性能。
Apollo使用差异测试来发现性能错误[37]。它在同一DBMS的两个版本中生成并运行查询。如果两次执行所花费的时间明显不同，则该查询将触发性能回归错误。
BmPad在目标DBMS中运行预定义的测试套件，并在执行时间超过阈值时报告性能错误[52]。
Squirrel与这些作品的不同之处在于，它专注于检测可能导致严重安全后果的内存损坏错误。
**基于生成的DBMS测试.** 基于生成的测试通常用于测试DBMS。它可以有效地生成语法正确的测试用例，但很少保证语义的正确性。
QAGen表明，确保完美的语义正确性是一个NP完全问题。相反，它提供了一种近似的解决方案来提高语义正确性。一些工作减少了SAT问题的产生，并使用SAT解算器（例如Alloy
）提供了潜在的解决方案。基于世代的模糊器通常需要一些初始数据库的架构才能生成查询。 Bikash
Chandra等提出了一种生成初始数据库的方法，该数据库可以覆盖大多数类型的SQL查询。
SQLsmith是最新的基于生成的DBMS测试器。它从初始数据库收集模式，并生成有限类型的查询，例如SELECT，以确保数据库不变，这限制了代码覆盖率。相反，Squirrel生成无上下文的测试用例，并且不依赖于特定的数据库或架构。它从一个空的数据库开始，并在使用它们进行测试之前创建适当的内容。
**基于突变的DBMS测试.**
最近，基于突变的模糊器在发现内存错误方面取得了巨大的成功。但是，它们被实现为通用的模糊器，并且不知道输入的结构。尽管它们中的一些采用了诸如污点分析或符号执行之类的高级技术，但是它们仍然无法深入测试像DBMS这样的程序，这些程序接受具有正确语义的高度结构化的输入。
Tim Blazytko等提出了一种利用类似语法的组合来合成高度结构化的输入的方法，但是它在SQL中生成的大多数测试用例在语法上仍然不正确。 Hardik
Bati等提出通过添加或删除语法组件来变异SQL语句。它们可能保留语法正确性，但不能保证语义正确性。最近的工作倾向于提高生成的输入的语义正确性，但是SQL对语义的要求更加严格，并且没有一个在测试DBMS方面显示出其有效性。因此，由这些模糊器生成的大多数测试用例都无法通过语法检查或语义检查，并且没有机会触发深层逻辑，例如优化或执行。
Squirrel通过保留语法的变异和语义指导的实例化克服了这些缺点，并设法检测出深层逻辑背后的错误。
## 11 总结
我们已经提出并实现了Squirrel来对数据库管理系统进行模糊测试，以查找与内存相关的错误。我们的系统采用了两种新颖的技术，即保留语法的变异和语义指导的实例化，以帮助生成正确的SQL查询。我们在四种流行的DBMS（SQLite，MySQL，MariaDB和PostgreSQL）上评估了Squirrel，并发现SQLite中有51个错误，MySQL中有7个错误，MariaDB中有5个错误。
Squirrel在语义正确性方面的改进至少是当前基于突变和基于生成的模糊器的3.4倍，并且触发的代码覆盖率是当前基于突变的模糊器的12倍。结果表明，Squirrel在测试数据库管理系统方面是有效且高效的。
> 致谢
我们感谢匿名审稿人的有益反馈。这项工作得到了美国国家科学基金会（NSF）在CNS-1652790项下的部分支持，以及海军研究办公室（ONR）在N00014-16-1-2912，N00014-16-1-2265，N0001417-1项下的支持-2894，N00014-17-1-2895和N00014-18-1-2662。本材料中表达的任何观点，发现，结论或建议均为作者的观点，不一定反映NSF或ONR的观点。
## ex: 备注
> 模糊测试工具通常可以被分为两类。变异测试(Mutation-based)通过改变已有的数据样本去生成测试数据。生成测试(Generation-> based)则通过对程序输入的建模来生成新的测试数据。
>
> –wikipedia
> bail out: 具体意思不明确，使用其本意（保释，解困）有点不妥。
> NP-hard: 指一些很难的非确定性的问题，具体可百度。
>
> p-values: P值是用来判定假设检验结果的一个参数，也可以根据不同的分布使用分布的拒绝域进行比较。P值越小，代表结果越显著。
>
> 论文中的附录还对文中的具体算法进行了阐述，鉴于篇幅限制，有兴趣的师傅自行查阅。