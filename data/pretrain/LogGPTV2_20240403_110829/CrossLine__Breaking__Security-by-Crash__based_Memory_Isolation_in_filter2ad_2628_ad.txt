version of CrossLine V1, but the decryption oracle constructed
with CrossLine V2 is more powerful as it is not limited by the
format of the target memory block.
4.2.2 Constructing Encryption Oracles An encryption oracle
allows the adversary to alter the content of an arbitrary memory
block encrypted with the victim‚Äôs VEK to the value specified by the
adversary. With CrossLine V2, an encryption oracle can be created
in ways similar to the decryption oracle. The primary difference
is that the target instruction is of the format ‚Äúmov %ùëüùëíùëî1,(%ùëüùëíùëî2)‚Äù,
which moves an 8-byte value stored in ùëüùëíùëî1 to the memory location
specified by ùëüùëíùëî2. With an encryption oracle, the adversary could
breach the integrity of the victim VM and force the victim VM
to (1) execute arbitrary instruction, or (2) alter sensitive data, or
(3) change control flows. Note that our encryption oracle differs
from those in the prior works [6, 8, 17] as it does not rely on SEV‚Äôs
memory integrity flaws.
Performance evaluation. We measured the performance of the
encryption oracle by the time it takes to updates the content of a
4KB memory page. The average time of 5 trials was 104.8ms with
one standard deviation of 6.1ms. Note in a real-world attack, the
attacker may only need to change a few bytes to compromise the
victim VM, which means the attack can be done within 1ms.
4.2.3 Locating Decryption/Encryption Instructions In the
previous experiments, we have already shown that once the in-
structions to perform decryption and encryption can be located,
the construction of decryption and encryption oracles is effective
and efficient. Next, we show how to locate such decryption/encryp-
tion instructions to bridge the gap towards an end-to-end attack.
We assume the adversary has some knowledge of binary installed
inside the guest VM (e.g., sshd) and its memory layout (e.g., via
debugging on her own machine).
Specifically, on the victim VM, an OpenSSH server (SSH-2.0-
OpenSSH-7.6p1 Ubuntu-4ubuntu0.1) is pre-installed. First, the ad-
versary learns the version of the OpenSSH binary by monitoring
the SSH handshake protocol. More specifically, the adversary who
controls the hypervisor and host OS monitors the incoming net-
work packets to the victim VM to identify the SSH client_hello
message. The victim VM would immediately respond with an SSH
server_hello message, which contains the version information
of the OpenSSH server. As these messages are not encrypted, the
adversary could leverage this information to search encryption/de-
cryption instructions offline from a local copy of the binary.
Second, the adversary extracts the gCR3 of the sshd process. To
do so, upon observing the server_hello message, the adversary
immediately clears the Present bits of all PTEs of the victim VM.
The next memory access from the sshd process will trigger an NPF
VMEXIT, which reveals the value of gCR3. We empirically validated
that this approach allows the adversary to correctly capture sshd‚Äôs
gCR3, by repeating the above steps 50 times and observing correct
gCR3 extraction every time.
Third, the adversary uses CrossLine V1 to dump a portion of
the page tables of sshd process. More specifically, the adversary
first dumps the 4KB top-level page-table page pointed to by gCR3;
she identifies the smallest offset of this page that represents a valid
PTE, and then follow this PTE to dump the second-level page-table
page. The adversary repeats this step to dump all four levels of page
tables for the lowest range of the virtual address. In this way, the
adversary could obtain the physical address corresponding to the
base virtual address of the OpenSSH binary.
Fourth, with the knowledge of the memory layout of the code
section of the OpenSSH binary, the adversary can calculate the
physical address of the decryption/encryption instructions within
the OpenSSH binary. In our demonstrated attack, the adversary
targets two instructions inside the error function of OpenSSH,
‚Äúmov (%rbx),%rax‚Äù for decryption and ‚Äúmov %rax,(%r12)‚Äù for
encryption. The offsets of the two instructions are 0xca9a and
0xca18, respectively.
Performance evaluation. We measured the time needed to locate
these two instructions. Once the adversary has intercepted the SSH
handshake messages, it takes on average 504.74ms (over 5 trials) to
locate these two instructions. After locating there two instructions,
the overall time to decrypt/encrypt a 4KB memory page is 504.74ms
(to locate the two instructions) plus 113.6ms/104.8ms (to repeatedly
execute the target instruction for decrypting/encrypting a 4KB
memory page).
4.3 Discussion on Stealthiness and Robustness
CrossLine attacks are stealthy. The attacker VM and the victim VM
are two separate VMs. They have different nPTs and VMCBs and
they run on different CPUs. Therefore, any execution state changes
made in the attacker VM are not synchronized with the victim VM,
which means it is impossible for victim VM to sense the presence of
the attacker VM. In contrast to all known attacks to SEV, CrossLine
cannot be detected by running a detector in the victim VM. More
interestingly, the adversary can rewind the attacker VM‚Äôs VMCB
Session 11A: Attestation and Firmware Security CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea2944to eliminate the side effects caused by the attacker VM‚Äôs attack
behaviors (e.g., triggering a NPF with non-PTE format or executing
an illegal instruction). This method also increases the robustness
of the attack: Even if the instructions of the decryption oracle are
not correctly located, CrossLine V2 will not affect the execution
of the victim VM. Therefore, the adversary can perform the attack
multiple times until it succeeds.
5 APPLICABILITY TO SEV-ES
5.1 Overview of SEV-ES
To protect VMCB during VMEXIT, SEV-ES was later introduced
by AMD [12]. With SEV-ES, a portion of the VMCB is encrypted
with authentication. Therefore, the hypervisor can no longer read
or modify arbitrary register values during VMEXITs. To exchange
data between the guest VM and the hypervisor, a new structure
called Guest Hypervisor Control Block (GHCB) is shared between
the two. The guest VM is allowed to indicate what information to
be shared through GHCB.
VMEXITs under SEV-ES modes are categorized into Automatic
Exits (AE) and Non-Automatic Exits (NAE). AE VMEXITs (e.g., those
triggered by most nested page faults, by the PAUSE instruction, or
by physical and virtual interrupts) are VMEXITs, which do not
need to expose register values to the hypervisor. Therefore, AE
VMEXITs directly trigger a VMEXIT to trap into the hypervisor.
To enhance security, NAEs (e.g., those triggered by CPUID, RDTSC,
MSR_PROT instructions) are first emulated by the guest VM instead
of the hypervisor. Specifically, NAEs first trigger a #VC exception,
which is handled by the guest OS to determine which register values
need to be copied into the GHCB. This NAE VMEXIT will then be
handled by the hypervisor that extracts the register values from
the GHCB. After the hypervisor resumes the guest in VMRUN, the
#VC handler inside the guest OS reads the results from the GHCB
and copies the relevant register states to corresponding registers.
SEV-ES VMs can run concurrently with SEV VMs and non-SEV
VMs. After VMEXIT, the hardware recognizes an SEV-ES VM by the
SEV control bits (bit 1 and 2 of 090h) in the VMCB [4]. Therefore,
the hypervisor may change the SEV type (from an SEV VM to an
SEV-ES VM) during VMEXIT. The legal ASID ranges of SEV-ES and
SEV VMs, however, are disjoint, and thus it is not possible to run
an SEV-ES VM with an ASID in the range of SEV VMs.
VMCB‚Äôs Integrity Protection. With SEV-ES, the original VMCB
is divided into two separate sections, namely the control area and
the state save area (VMSA) [4]. The control area of VMCB is un-
encrypted and controlled by the hypervisor, which contains the
bits to be intercepted by the hypervisor, the guest ASID (058h),
control bits of SEV and SEV-ES (090h), TLB control (058h), VMCB
clean bits (0C0h), nRIP (0C8h), the gPA of GHCB (0A0h), the nCR3
(0B0h), VMCB save state pointer (108h), etc. The state save area is
encrypted and integrity protected, which contains the saved regis-
ter values of the guest VM. The VMCB save state pointer stores the
system physical address of VMSA‚Äîthe encrypted memory page
storing the state save area.
The integrity-check value of the state save area is stored in
the protected DRAM, which cannot be accessed by any software,
including the hypervisor [4]. At VMRUN, the processor performs
an integrity check of the VMSA. If the integrity check fails, VMRUN
terminates with errors [4]. Because the integrity-check value (or the
physical address storing the value) is not specified by the hypervisor
at VMRUN, we conjecture the value is index by the system physical
address of the VMSA. Therefore, a parked virtual CPU is uniquely
identified by the VMSA physical address.
5.2 CrossLine V1 on SEV-ES
There are two main challenges when applying CrossLine to SEV-
ES. The primary challenge is to bypass the VMSA check. Directly
resuming the attacker VM using the victim‚Äôs ASID would cause
VMRUN to fail immediately, because the VMSA integrity check
takes place before fetching any instructions in the attacker VM.
Since the attacker VM‚Äôs VMSA is encrypted using the VEK of the
attacker VM, when resuming the attacker VM with the victim‚Äôs
ASID, the decryption of VMSA leads to garbage data, crashing the
attacker VM immediately. Therefore, to perform CrossLine V1,
the adversary must change the save state pointer (0108h) of the
attacker VM‚Äôs VMCB so that the attacker VM will reuse the victim
VM‚Äôs VMSA.
The second challenge is to control the decrypted memory block‚Äôs
page offset. As the attacker VM reuses Victim VM‚Äôs VMSA, the at-
tacker VM cannot change the register values that are stored in the
VMSA, which includes RIP, gCR3, and all general-purpose registers
(if not exposed in the GHCB). Therefore, with SEV-ES, the adversary
is no longer able to directly control the execution of the attacker
VM by simply manipulating its nRIP in its VMCB‚Äôs control area [4].
However, by pausing victim‚Äôs VCPU at different execution points,
the nRIP can be different at each VMEXIT. As such, the adversary
is still able to perform CrossLine V1 on SEV-ES VMs to achieve
the same goal‚Äîextracting the entire gPT or decrypting any 8-byte
memory block conforming to a PTE format. To show this, we have
performed the following experiments:
Two SEV-ES VMs were launched. The ASID of the victim VM is
set to be 1 and that of the attacker VM is 2. The hypervisor pauses
the victim VM at one of its VMEXITs, so that its VMSA is not used
by itself. The attack is performed in the following steps:
‚ûÄ Prepare nPT. During the VMEXIT of the attacker VM, the hy-
pervisor clears all the Present bits in the nPT of the attacker VM.
‚ûÅ Manipulate the attacker VM‚Äôs VMCB. The hypervisor first
changes the attacker VM‚Äôs ASID from 2 to 1. It also informs the
hardware to flush all TLB entries of the current CPU, by setting
the TLB clearing field (058h) in the VMCB control area. Finally, it
changes the VMCB save area pointer to point to the victim‚Äôs VMSA.
‚ûÇ Resume the attacker VM. Because the attacker VM runs with
the victim‚Äôs ASID, the victim‚Äôs VMSA is decrypted correctly. The
integrity check also passes, as no change is made in the VMSA,
including its system physical address. Once resumed, the attacker
VM will try to fetch the first instruction determined by RIP (in
VMSA) or the IDTR using the victim‚Äôs VEK. Since there is no valid
TLB entry, the processor has to perform a guest page table walk
to translate the virtual address to the system physical address. A
nested page fault can be observed with the faulting address being
the victim VM‚Äôs gCR3 value.
‚ûÉ Remap gCR3 in nPT. When handling this NPF VMEXIT, the
hypervisor remaps the gCR3 in the nPT to the victim VM‚Äôs memory
Session 11A: Attestation and Firmware Security CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea2945page to be decrypted. The Present bits of the corresponding nested
PTEs are set to avoid another NPF of this translation. Moreover, the
EXITINTINFO field in the unencrypted VMCB control area needs to
be cleared to make sure the attacker VM complete the page table
walk. After resuming the attacker VM, an NPF for the translation
of another gPA (embedded in the target memory block) will occur,
which reveals the content of the 8-byte aligned memory block if it
conforms to the PTE format.
‚ûÑ Reuse the VMSA. The hypervisor repeats step ‚ûÉ so that its
gCR3 is remapped to the next page to be decrypted in the victim VM.
Then, the next NPF VMEXIT reveals the corresponding memory
block. This could work because the attacker VM has not success-
fully fetched a single instruction yet; it is trapped in the first page
table walk (more specifically, the top-level nested page table walk of
the first gPA). Therefore, the VMSA is not updated and no valid TLB
entry is created. During the remapping of gCR3, the hypervisor is
able to invalidate the previously generated entry in the nTLB. Thus,
from the perspective of the attacker VM, step ‚ûÉ does not change
its state. Therefore, the attacks can be carried out repeatedly.
‚ûÖ Handling triple faults. In step ‚ûÉ or step ‚ûÑ, if the targeted
8-byte memory block does not conform to the PTE format, a triple
fault VMEXIT (error code 0x7f) will be triggered instead of the NPF
VMEXIT. The adversary can continue to decrypt the next page if
this happens. However, after a triple fault, the RIP in the VMSA
has been updated to the fault handler to deal with the fault. As
such, resuming from a triple fault will lead to the decryption of a
different offset of the target page. Nevertheless, the attack can still
continue.
5.2.1 Resuming the Victim VM After performing CrossLine
V1, the VMSA of the victim VM is still usable by the victim. We
empirically validated this by resuming the victim VM after the
attacker VM has used this VMSA to decrypt several memory blocks
and has encountered both nested page faults and triple faults. The
victim VM was resumed successfully, without observing any faults
or abnormal kernel logs (as discussed in Section 5.3). To better
understand the victim VM‚Äôs state changes when its VMSA is used
by the attacker VM, we checked which regions of the encrypted
VMSA‚Äôs ciphertext blocks have been changed after the attacker
VM has performed several rounds of CrossLine V1, which triggers
both nested page faults and triple faults. The result shows that the
entire VMSA remains the same, except the value of CR2, which
stores the most recent faulting address. The change of the CR2
value does not affect the execution of the victim VM as this value
is not used by the guest OS after NPFs.
5.2.2 Controlling Page Offsets Because the integrity protec-
tion of VMSA prevents the adversary from controlling the RIP after
VMRUN, the page offset of the memory blocks to be decrypted can-
not be controlled on SEV-ES. However, the adversary may resume
the victim VM and allow it to run till a different RIP is encountered.
In total, 512 different RIPs are needed to decrypt any memory blocks
conforming to the PTE formats. Two challenges remain: First, under
an unknown RIP, how can the hypervisor determine the page offset
of the memory blocks to be decrypted; second, how to diversify the
RIPs in order to cover more offsets.
(a) Determine RIP‚Äôs offset.
(b) Covered offsets after ùëÅ rounds.
Figure 4: Controlling page offsets.
First, to determine the corresponding page offset for an unknown