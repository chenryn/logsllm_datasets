that advance at the same rate.
3 SYNCHRONOUS BFT WITH NETWORK
SPEED REPLICAS - OVERVIEW
Early synchronous protocols [13, 20] have relied on synchrony in
two ways. First, the replicas assume a maximum network delay
∆ for communication between them. Second, they require a lock
step execution, i.e., all replicas are in the same round at the same
time. Hanke et al. showed a synchronous protocol without lock
step execution [18]. Their protocol still contains a synchronous
step in which all replicas perform a blocking wait of 2∆ time before
proceeding to subsequent steps. Sync HotStuff [4] improves on
it further to remove replicas’ blocking waits during good periods
(when the leader is honest), but blocking waits are still required by
replicas during bad situations (view changes).
In this section, we show a synchronous protocol where the repli-
cas do not ever have blocking waits and execute at the network
speed. In other words, replicas run a partially synchronous protocol
and do not rely on synchrony at any point. Learners, on the other
hand, rely on synchrony bounds to commit. This separation is what
allows our protocol to support learners with different assumptions
on the value of ∆. To the best of our knowledge, this is the first
synchronous protocol to achieve such a separation. In addition,
the protocol tolerates a combined Byzantine plus a-b-c fault ratio
greater than a half (Byzantine fault tolerance is still less than half).
For simplicity, in this overview, we show a protocol for single
shot consensus. In our final protocol in Section 5, we will consider
a pipelined version of the protocol for consensus on a sequence of
values. We do not consider termination for the single-shot consen-
sus protocol in this overview because our final replication protocol
is supposed to run forever.
The protocol is shown in Figure 1. It runs in a sequence of views.
Each view has a designated leader who may be selected in a round
robin order. The leader drives consensus in that view. In each view,
the protocol runs in two steps – propose and vote. In the propose
step, the leader proposes a value b. In the vote step, replicas vote
for the value if it is safe to do so. The vote also acts as a re-proposal
of the value. If a replica observes a set of qr votes on b, called a
certificate Cqr (b), it “locks” on b. For now, we assume qr = 1/2.
(To be precise, qr is slightly larger than 1/2, e.g., f +1 out of 2f +1.)
We will revisit the choice of qr in Section 6. In subsequent views, a
replica will not vote for a value other than b unless it learns that qr
replicas are not locked on b. In addition, the replicas switch views
(i.e., change leader) if they either observe an equivocation or if they
do not receive a proposal from the leader within some timeout. A
learner commits b if qr replicas state that there exists a view in
which b is certified and no equivocating value or view change was
observed at a time before 2∆ after it was certified. Here, ∆ is the
maximum network delay the learner believes in.
The protocol ensures safety if there are fewer than qr faulty
replicas. The key argument for safety is the following: If an honest
replica h satisfies the commit condition for some value b in a view,
then (a) no other value can be certified and (b) all honest replicas
are locked on b at the end of that view. To elaborate, satisfying the
commit condition implies that some honest replica h has observed
an undisturbed-2∆ period after it locked on b, i.e., it did not observe
an equivocation or a view change. Suppose the condition is satis-
fied at time t. This implies that other replicas did not observe an
equivocation or a view change before t − ∆. The two properties
above hold if the quorum honesty conditions described below hold.
For liveness, if Byzantine leaders equivocate or do not propose a
safe value, they will be blamed by both honest and a-b-c replicas
and a view change will ensue. Eventually there will be an honest
or a-b-c leader to drive consensus if quorum availability holds.
Quorum honesty (a) within a view. Since the undisturbed pe-
riod starts after b is certified, h must have voted (and re-
proposed) b at a time earlier than t −2∆. Every honest replica
must have received b before t − ∆. Since they had not voted
for an equivocating value by then, they must have voted for
b. Since the number of faults is less than qr , every certificate
needs to contain an honest replica’s vote. Thus, no certificate
for any other value can be formed in this view.
Quorum honesty (b) across views. h sends Cqr
v (b) at time t−2∆.
v (b) by time t − ∆ and become locked
All honest receive Cqr
Session 5B: ProtocolsCCS ’19, November 11–15, 2019, London, United Kingdom1043Protocol executed by the replicas.
v (b) exists.
(1) Propose. The leader L of view v proposes a value b.
(2) Vote. On receiving the first value b in a view v, a replica broadcasts b and votes for b if it is safe to do so, as determined by a locking
v (b) and called a certificate of b from view v, then it “locks” on b and records
mechanism described later. The replica records the following.
- If the replica collects qr votes on b, denoted as Cqr
the lock time as t-lockv.
- If the replica observes an equivocating value signed by L at any time after entering view v, it records the time of equivocation as
t-equivv. It blames the leader by broadcasting ⟨blame, v⟩ and the equivocating values.
- If the replica does not receive a proposal for sufficient time in view v, it times out and broadcasts ⟨blame, v⟩.
- If the replica collects a set of qr ⟨blame, v⟩ messages, it records the time as t-viewchangev, broadcasts them and enters view v + 1.
If a replica locks on a value b in a view, then it votes only for b in subsequent views unless it “unlocks” from b by learning that qr replicas
are not locked on b in that view or higher views (they may be locked on other values or they may not be locked at all).
Commit rules for learners. A value b is said to be committed by a learner assuming ∆-synchrony iff qr replicas each report that there
exists a view v such that,
(1) b is certified, i.e., Cqr
(2) the replica observed an undisturbed-2∆ period after certification, i.e., no equivocating value or view change was observed at a time
before 2∆ after it was certified, or more formally, min(current-time, t-equivv , t-viewchangev) − t-lockv ≥ 2∆
Figure 1: Synchronous BFT with network speed replicas.
on b. For an honest replica to unlock from b in subsequent
views, qr replicas need to claim that they are not locked on
b. At least one of them is honest and would need to falsely
claim it is not locked, which cannot happen.
Quorum availability. Byzantine replicas do not exceed 1 − qr so
that qr replicas respond to the leader.
Tolerating a-b-c faults. If we have only honest and Byzantine
replicas (and no a-b-c replicas), quorum honesty requires the frac-
tion of Byzantine replicas B  1/2 such that safety and liveness are
both preserved.
Separating learner synchrony assumption from the replica
protocol. The most interesting aspect of this protocol is the sep-
aration of the learner commit rule from the protocol design. In
particular, although this is a synchronous protocol, the replica pro-
tocol does not rely on any synchrony bound. This allows learner to
choose their own message delay bounds. Any learner that uses a
correct message delay bound enjoys safety.
4 FLEXIBLE BYZANTINE QUORUMS FOR
PARTIAL SYNCHRONY - OVERVIEW
In this section, we explain the high-level insights of Flexible Byzan-
tine Quorums in Flexible BFT. Again, for ease of exposition, we
focus on a single-shot consensus and do not consider termination.
We start by reviewing the Byzantine Quorum Systems [28] that
underlie existing partially synchronous protocols that tolerate 1/3
Byzantine faults (Section 4.1). We will illustrate that multiple uses
of 2/3-quorums actually serve different purposes in these protocols.
We then generalize these protocols to use Flexible Byzantine Quo-
rums (Section 4.2), the key idea that enables more than 1/3 fault
tolerance and allows diverse learners with varying assumptions to
co-exist.
4.1 Background: Quorums in PBFT
Existing protocols for solving consensus in the partially synchro-
nous setting with optimal 1/3-resilience revolve around voting by
Byzantine quorums of replicas. Two properties of Byzantine quo-
rums are utilized for achieving safety and liveness. First, any two
quorums intersect at one honest replica – quorum intersection.
Second, there exists a quorum that contains no Byzantine faulty
replicas – quorum availability. Concretely, when less than 1/3 the
replicas are Byzantine, quorums are set to size qr = 2/3. (To be
precise, qr is slightly larger than 2/3, i.e., 2f + 1 out of 3f + 1
where f is the number of faults, but we will use qr = 2/3 for
ease of exposition.) This guarantees an intersection of size at least
2qr − 1 = 1/3, hence at least one honest replica in the intersection.
As for availability, there exist qr = 2/3 honest replicas to form a
quorum.
To dissect the use of quorums in BFT protocols, consider their
use in PBFT [11] for providing safety and liveness. PBFT operates in
a view-by-view manner. Each view has a unique leader and consists
of the following steps:
- Propose. A leader L proposes a value b.
- Vote 1. On receiving the first value b for a view v, a replica
votes for b if it is safe, as determined by a locking mechanism
described below. A set of qr votes form a certificate Cqr (b).
Session 5B: ProtocolsCCS ’19, November 11–15, 2019, London, United Kingdom1044- Vote 2. On collecting Cqr (b), a replica “locks” on b and votes
for Cqr (b).
- Commit. On collecting qr votes for Cqr (b), a learner learns
that proposal b becomes a committed decision.
If a replica locks on a value b in a view, then it votes only for b in
subsequent views unless it “unlocks” from b. A replica “unlocks”
from b if it learns that qr replicas are not locked on b in that view
or higher (they may be locked on other values or they may not be
locked at all).
The properties of Byzantine quorums are harnessed in PBFT for
safety and liveness as follows:
Quorum intersection within a view. Safety within a view is en-
sured by the first round of votes. A replica votes only once
per view. For two distinct values to both obtain certificates,
one honest replica needs to vote for both, which cannot
happen.
Quorum intersection across views. Safety across views is en-
sured by the locking mechanism. If b becomes a committed
decision in a view, then a quorum of replicas lock on b in
that view. For an honest replica among them to unlock from
b, a quorum of replicas need to claim they are not locked
on b. At least one replica in the intersection is honest and
would need to falsely claim it is not locked, which cannot
happen.
Quorum availability within a view. Liveness within each view
is guaranteed by having an honest quorum respond to a
non-faulty leader.
4.2 Flexible Byzantine Quorums
Our Flexible BFT approach separates the quorums used in BFT
protocols for the replicas (acceptors) from the quorums used for
learning when a decision becomes committed. More specifically,
we denote the quorum used for forming certificates (locking) by
qlck and the quorum used for unlocking by qulck. We denote the
quorum employed by learners for learning certificate uniqueness
by qunq, and the quorum used for learning commit safety by qcmt.
In other words, learners mandate qunq first-round votes and qcmt
second-round votes in order to commit a decision. Below, we out-
line a modified PBFT-like protocol that uses these different quorum
sizes instead of a single quorum size q. We then introduce a new def-
inition, Flexible Byzantine Quorums, that capture the requirements
needed for these quorums to provide safety and liveness.
Flexible quorum intersection (a) within a view. Contrary to
PBFT, in Flexible BFT, a pair of qlck certificates need not
intersect in an honest replica. Indeed, locking on a value
does not preclude conflicting locks. Instead, this property
mandates that every qlck quorum intersects with every qunq
quorum at at least one honest replica. This property ensures
that, if a learner commits a value, it is the only certified value
within the view. This property requires the fraction of faulty
replicas to be less than qlck + qunq − 1.
Flexible quorum intersection (b) across views. If a learner
commits a value b in a view, qcmt replicas lock on b in that
view. For an honest replica among them to unlock from
- Propose. A leader L proposes a value b.
- Vote 1. On receiving the first value b for a view v, a replica
votes for b if it is safe, as determined by a locking mechanism
described below. A set of qlck votes forms a certificate Cqlck(b).
- Vote 2. On collecting Cqlck(b), a replica “locks” on b and votes
for Cqlck(b).
- Commit. On collecting qunq votes for b and qcmt votes for
Cqlck(b), a learner learns that proposal b becomes a committed
decision.
If a replica locks on a value b in a view, then it votes only for b
in subsequent views unless it “unlocks” from b by learning that
qulck replicas are not locked on b.
b, qulck replicas need to claim they are not locked on b.
This property mandates that every qulck quorum intersects
with every qcmt quorum at at least one honest replica. This
property ensures that, if a learner commits a value, then
replicas who have locked on the value cannot be unlocked
from it. This property requires the fraction of faulty replicas
to be less than qulck + qcmt − 1.
Flexible quorum availability within a view. For
live-
1 −
ness,
max(qunq, qcmt, qlck, qulck) so that
the aforementioned
quorums can be formed at different stages of the protocol.
Byzantine
replicas
cannot
exceed
Given the above analysis, Flexible BFT ensures safety if the
fraction of faulty replicas is less than min(qunq + qlck − 1, qcmt +
qulck − 1), and provides liveness if the fraction of Byzantine replicas
is at most 1−max(qunq, qcmt, qlck, qulck). It is optimal to use balanced
quorum sizes where qlck = qulck and qunq = qcmt. To see this, first
note that we should make sure qunq +qlck = qcmt +qulck; otherwise,
suppose the right-hand side is smaller, then setting (qcmt, qulck)
to equal (qunq, qlck) improves safety tolerance without affecting
liveness tolerance. Next, observe that if we have qunq +qlck = qcmt +
qulck but qlck > qulck (and hence qunq < qcmt), then once again
setting (qcmt, qulck) to equal (qunq, qlck) improves safety tolerance