### 6.4 Results

#### Caching Policies and Cache Sizes
We begin by comparing the effectiveness of different caching schemes, cache sizes \( t \), and Damerau-Levenshtein (DL) distance thresholds \( d \). For these simulations, we impose no guessability restrictions on admissible typos, setting \( m = 0 \) and \( \sigma = \infty \), to maximize the number of admissible typos. The utility of each strategy is illustrated in Figure 8. Larger cache sizes, which allow for more typos to be cached and tolerated, correspond to an increase in utility. Similarly, increasing the DL distance threshold, thereby expanding the set of typos considered for inclusion in the cache, also increases utility.

However, we hypothesize that allowing typos with a DL distance of 2 will degrade security to an extent that outweighs the utility benefits (e.g., the resulting error settings are less likely to be \( t \)-sparse). Therefore, we select \( t = 5 \) and \( d = 1 \) for further analysis and deployment.

For caching schemes, it is perhaps unsurprising that the utility of relaxed checking with Top-\( t \) correctors is very similar to that of the static policy Best-\( t \). The former performs better for \( t = 2 \), while the latter performs better for \( t = 5 \). This is because, in our unoptimized typo model, the common error of flipping the case of the first character often does not appear among the two most probable typos for a given password, but it is corrected by Top-2 correctors. As a result, Top-2 outperforms Best-2. For \( t = 5 \), the benefit of the password-specific typo correction offered by Best-5 emerges, catching typos that the Top-5 correctors (chosen based on population-wide analysis) cannot correct. With more data about typos and future refinement of parameters, this small difference should be mitigated.

Since each individual worker made only a small number of incorrect submissions in our study, the choice of caching policy had little observable impact on utility for cache sizes \( t \geq 3 \). However, the variation is more noticeable for cache size \( t = 2 \). As anticipated, LRU (Least Recently Used) performs worse than frequency-based caching policies. Among the latter, PLFU (Probabilistic Least Frequently Used) performs the best. Surprisingly, MFU (Most Frequently Used) underperforms PLFU; however, this could be due to the limited number of incorrect submissions, and we conjecture that in a longer-term study, MFU may outperform PLFU.

Given the strong performance in terms of utility and security (as discussed in Section 5) and the practical constraints of cache size, we choose PLFU as the caching policy for deployment, with a cache size of \( t = 5 \) and DL distance threshold \( d = 1 \).

#### Different Guessability Restrictions
Next, we investigate the impact of different admissible typo parameters \( m \) and \( \sigma \) on utility. Recall that for a typo \( \tilde{w} \) to be considered for inclusion in the cache of password \( w \), it must satisfy \( \mu_{\tilde{w}} > m \) and \( \mu_{\tilde{w}} > \mu_w - \sigma \). We begin by considering the guessability cutoff parameter \( m \in \{0, \ldots, 40\} \). We perform simulations for TypTop implemented with cache size \( t = 5 \), edit distance threshold \( d = 1 \), and without any relative guessability cutoff imposed (\( \sigma = \infty \)). The results are shown in Figure 9c. As expected, utility decreases as the guessability cutoff increases and fewer typos are considered for inclusion in the cache. Notably, utility decreases rapidly for \( m > 10 \). This is because, as shown in Figure 9b, nearly 5% of the observed typos have an estimated security strength of less than 10 bits, indicating that setting \( m = 10 \) provides the maximum security benefit without significantly degrading utility.

We test the null hypothesis that TypTop (with the parameters decided above) does not outperform relaxed checking with Top-\( t \) correctors in tolerating typos for a randomly chosen user using a Wilcoxon signed-rank test [36]. We found that we can reject the null hypothesis with a \( p \)-value < 0.05. This is to be expected, given that the guessability of passwords and typos are very similar (as shown in Figure 9b). Since increasing the guessability cutoff further increases the possibility that a significantly more guessable string enters the cache with minimal benefit to utility, we choose \( \sigma = 3 \) to optimize the balance between utility and security.

#### Users and Logins Benefited
Among the 167 users who made at least one typo during their submission (a typo being an incorrect submission within edit distance 2 of the real password), 75 users (44.9%) would benefit by having at least one of their typos accepted by TypTop with the PLFU caching policy and the parameter setting described above. In contrast, only 49 users (29.3%) would receive this benefit from the relaxed checker of [8] implemented with the Top-5 correctors. Of the 366 login attempts containing at least one typo, 106 (29%) of these would require at least one less password resubmission if TypTop were used as the password checker. This saves an average of 5 seconds per login attempt for users making at least one typo, and an average of 12 seconds for users who made two typos in two different logins. In our small MTurk study (271 users), we find that TypTop would save 246 person-minutes of login time, and with larger user populations, this time saved is expected to grow to several person-months.

#### Pilot Deployment of TypTop
To gather data on TypTop’s efficacy, we modified the implementation slightly to allow confidential logging of users’ password typing behavior. The logging module works as follows: during password registration, two random 16-byte strings are generated and stored in the state of TypTop; the first is used as an HMAC key to compute a unique identifier for each submitted password (or typo), while the second is used as a user-device identifier. With every password submission, we log the HMAC identifier of the submission, along with the DL distance from the real password, the relative guessability, and whether the typo could have been corrected using Top-5 correctors (to form a comparison between TypTop and relaxed checking). This allows us to learn the transcript of password and typo submissions—while never learning the actual strings entered. Some values, such as DL distance, require both the underlying password and the typo to process; we back-fill these values after a successful authentication when the encrypted caching scheme state and wait list are decrypted. To simulate the Best-5 static caching scheme, we also log the identifiers of the five most probable typos of the password.

The log and corresponding user identifier are uploaded to a server via an HTTPS post request every 10 logins, after which the uploaded log is deleted from the user’s laptop. The key used to generate the HMAC identifiers is never uploaded, making it impossible to brute-force recover passwords given the information uploaded. Users can disable the logging and/or uploading feature at any time during the study without affecting functionality.

#### Data Collection and Analysis
We initially advertised our study via two university mailing lists and several social media groups. However, we received a lower response rate than anticipated, as users were initially reluctant to run research code as their primary mode of authentication. Therefore, we used snowball sampling [4] to increase participation in our study.

Study participation is anonymous: we do not know the exact set of volunteers who installed TypTop, although we can deduce the number of distinct machines on which TypTop was installed from the logs generated. In subsequent analysis, we assume that each user installed TypTop on only one machine. We collected data from 25 users over a period of 22–100 days (different users have varying data collection periods depending on when they joined the study and how long they chose to participate). TypTop was used for a median of 27 days.

We observed a total of 4,563 password submissions during the study, with a median of 103 submissions per user. The average user types their password more than five times a day, and incorrectly 15% of the time. We found that 93% of these incorrect submissions are within DL distance two of the real password and thus are classified as typos. The fraction of incorrect submissions that constitute typos is larger than that observed in the MTurk study (70%); this is probably because MTurk workers created their 'passwords' for the study and were more likely to make high DL distance errors due to misremembering them.

In total, we observed 501 typos, of which 316 (63%) are tolerated by TypTop. This is significantly higher than the 122 (22%) that would be tolerated by the relaxed checker with Top-5 correctors. However, the benefit of typo correction varies across users. We observed 2 users who received an especially great benefit from TypTop. They used TypTop for over 45 days, during which they typo-ed their password 24% of the time—we found TypTop corrected 85% of their typos, whereas the Top-5 corrector functions corrected virtually none. For the remainder of the participants, we found that TypTop and the Top-5 correctors performed roughly the same. We believe this is because personal machines in university settings tend to have very lenient password policies (if any policy at all), meaning users pick simpler passwords whose typos are more likely to be among those corrected by the Top-5 correctors. We expect to see the performance benefit of TypTop emerge in settings where users must pick stronger and less readily correctable passwords (e.g., over 12 characters) and lock/unlock their computers many times a day. We simulated other caching policies on the collected data and observed roughly the same performance.

These results suggest that personalized typo-tolerance may be very beneficial to users who are especially typo-prone, and this benefit increases the longer the system is used. The sample size of our initial pilot deployment is too small to allow us to draw more general conclusions at this stage; therefore, we are planning a study with more participants and a longer duration. We will be publishing TypTop as a public, open-source project to facilitate a broader study with a larger set of participants.

### 8 Conclusion
We introduce the notion of personalized typo-tolerant password checkers, which adapt over time to correct the typos made most frequently by the individual user. We design and build an adaptive password checking scheme called TypTop, which securely caches incorrect password submissions that pass a policy check on what forms of typos to allow. We formalize a cryptographic security notion for such schemes and show a formal reduction of our scheme’s security to the difficulty of brute-force cracking attacks against the registered password or the typos entered into the typo cache. We provide simple criteria that, if met, ensure no security loss in offline attacks and negligible security loss in online attacks, and empirically verify that real-world password and typo distributions satisfy this requirement. Simulations conducted with data gathered via a study on Amazon MTurk suggest that TypTop will outperform existing approaches to typo-tolerant password checking, and a small pilot deployment suggests that TypTop can provide a substantial usability benefit to especially typo-prone users.

### Acknowledgments
We thank Sam Scott for helping us with the implementation of the first prototype of TypTop, the volunteers for participating in our user studies, and the anonymous reviewers for their insightful comments. This work was supported in part by NSF grants CNS-1514163 and CNS-1514163, United States Army Research Office (ARO) grant W911NF-16-1-0145, and a generous gift from Microsoft.

### Appendix A.1 Benefits of the PLFU Caching Scheme
We now describe the intuition behind the utility benefits of the Probabilistic Least Frequently Used (PLFU) caching scheme over its deterministic counterpart (LFU). Recall that during each PLFU cache update, the cached typo \( \tilde{w}_o \) is replaced with the wait-listed typo \( \tilde{w}_n \) with probability \( \nu = \frac{f_{\tilde{w}_n}}{f_{\tilde{w}_n} + f_{\tilde{w}_o}} \), where \( f \) denotes the frequency count of the typo in the subscript. The main goal of the PLFU caching scheme is to let the cache be agile enough to adapt and change, while simultaneously increasing the likelihood that the most useful typos ultimately stay in the cache.

The PLFU scheme has two key benefits over the non-probabilistic LFU scheme. First, it makes it more likely that a typo which is repeated in small amounts over many login attempts (and thus is potentially more useful) will be retained in the cache. Second, it allows the cache to adapt more quickly to new, potentially more frequent typos, thereby improving overall utility.