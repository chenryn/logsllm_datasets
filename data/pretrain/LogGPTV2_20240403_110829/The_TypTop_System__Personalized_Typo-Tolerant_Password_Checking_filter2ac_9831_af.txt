6.4 Results
Caching policies and cache sizes. We first compare the efficacy
of different caching schemes, cache sizes 𝑡, and DL distance thresh-
olds 𝑑. For these simulations, we impose no guessability restrictions
on admissible typos, setting 𝑚 = 0 and 𝜎 = ∞, as this will maxi-
mize the number of admissible typos. The utility of each strategy is
shown in Figure 8. We see that larger cache sizes (which allow us to
cache and tolerate more typos) correspond to an increase in utility.
Similarly increasing the DL distance threshold (and with it the set
of typos considered for inclusion in the cache) also increases utility.
However, we conjecture that allowing typos with DL distance 2 will
degrade security enough to outweigh the utility benefits (e.g., the
resulting error settings are less likely to be 𝑡-sparse), so we select
𝑡 = 5 and 𝑑 = 1 for further analysis and deployment.
For caching schemes, perhaps unsurprisingly, the utility of re-
laxed checking with Top-𝑡 correctors is very similar to that of the
static policy Best-𝑡 — the former performs better for 𝑡 = 2, while the
latter performs better for 𝑡 = 5. This is because in our unoptimized
typo model, the common error of flipping the case of the first char-
acter often does not appear among the two most probable typos for
a given password, whereas it does get corrected by Top-2 correctors;
the resulting typos missed by Best-2 allows Top-2 to outperform
it. However for 𝑡 = 5, the benefit of the password-specific typo
correction offered by Best-5 emerges, catching typos that the Top-5
correctors (which are chosen based on population-wide analysis)
cannot correct. With more data about typos and future refinement
of the parameters should overcome this small difference.
Because each individual worker made only a small number of
incorrect submissions in our study, the choice of caching policy had
little observable impact on utility for cache sizes 𝑡 ≥ 3. However
the variation is more noticeable for cache size 𝑡 = 2. As anticipated
LRU performs less well than the frequency based caching policies.
Among the latter set, PLFU performs the best. Surprisingly, we also
see that MFU underperforms PLFU; however this could be due to
the fact that we did not receive enough incorrect submissions to
see the benefit of MFU emerge, and conjecture that in a longer term
study, MFU may outperform PLFU.
Due to strong performance for utility and security (as discussed
in Section 5), and the cache size restraints, (which make MFU un-
suitable for practical purposes), we choose PLFU as the caching
policy for deployment, with a cache size of 𝑡 = 5 and DL distance
threshold 𝑑 = 1.
Different guessability restrictions. Next we investigate the im-
CCS ’17, October 30-November 3, 2017, Dallas, TX, USA
Chatterjee et al.
(b) CDFs of zxcvbn strength
(c),(d) The change in utility for different absolute guessability thresholds (𝑚) and
(c)
(d)
(a)
(b)
Figure 9: (a) CDF of fraction of incorrect password submissions within a given DL distance of the real password.
of real passwords compared to typos in the MTurk study.
relative guessability thresholds (𝜎). The values of other parameters are specified above each chart.
pact of different admissible typo parameters 𝑚 and 𝜎 on util-
ity (recall that for typo ˜𝑤 to be considered for inclusion in the
cache of password 𝑤, it must be the case that 𝜇 ˜𝑤 > 𝑚, and
𝜇 ˜𝑤 > 𝜇𝑤 − 𝜎). We begin by considering the guessability cutoff
parameter 𝑚 ∈ {0, . . . , 40}. We perform simulations for TypTop
implemented with cache size 𝑡 = 5, edit distance threshold 𝑑 = 1,
but without any relative guessability cutoff imposed (𝜎 = ∞). We
compute utility for all guessability cutoff values 𝑚 ∈ {0, . . . , 40}
and all caching policies; the results are shown in Figure 9c. As ex-
pected, utility decreases as the guessability cutoff increases and
fewer typos are considered for inclusion in the cache. Notably, we
see the utility decrease rapidly for 𝑚 > 10. This is because, as
shown in Figure 9b, nearly 5% of the observed typos have an esti-
mated security strength of less than 10 bits, indicating that setting
𝑚 = 10 gives the maximum security benefit without significantly
degrading utility.
23 person-minutes of login time, and with larger user populations
expect to see this time saved grow to several person-months.
We test the null hypothesis that TypTop (with the parameters
decided above) does not outperform relaxed checking with Top-𝑡
correctors in tolerating typos for a randomly chosen user using a
Wilcoxon signed-rank test [36]. We found that we can reject the
null hypothesis with 𝑝-value  3. This is to be expected, given
that the guessability of passwords and typos are very similar (as
shown in Figure 9b). Since increasing the guessability cutoff further
increases the possibility that a significantly more guessable string
enters the cache with minimal benefit to utility, we choose 𝜎 = 3
to optimize the balance between utility and security.
Users and logins benefited. Among the 167 users who made at
least one typo during their submission (recall, here a typo is an
incorrect submission within edit distance 2 of the real password),
75 users (44.9%) would benefit by having at least one of their typos
accepted by TypTop with the PLFU caching policy and the parame-
ter setting described above. In contrast, only 49 users (29.3%) would
receive this benefit from the relaxed checker of [8] implemented
with the Top-5 correctors. Of the 366 login attempts containing
at least one typo, 106 (29%) of these would require at least one
less password resubmission if TypTop were used as the password
checker. This saves an average of 5 seconds per login attempt for
the users making at least one typo, and an average of 12 seconds
for the users who made two typos in two different logins. In our
small MTurk study (271 users), we find that TypTop would save
12
24680.50.60.70.80.91DLdistanceCDFofincorrectpwsubmissionMTurkstudyTypTopdeployment01020304050607000.20.40.60.81zxcvbnstrengthCDFofpasswordsortyposRealpasswordsTypos01020304000.10.2Guessabilitycutoff(𝑚)Fractionoftypostolerated𝑑=1,𝑡=5,𝜎=∞LFUPLFUMFULRUBest-𝑡Top-𝑡024680.160.180.20.220.240.26Relativeguessabilitycutoff(𝜎)Frac.oftypostolerated𝑑=1,𝑡=5,𝑚=10LFUPLFUMFULRUBest-𝑡Top-𝑡The TypTop System
CCS ’17, October 30-November 3, 2017, Dallas, TX, USA
its hash computation. Current standards [16, 29] recommend using
at least 5,000 iterations of SHA-256 to hash passwords.
Chk will always perform the maximum number of hashes for an
incorrect submission, which is why we see a longer turn around
time for failed authentications. However, this overhead is well be-
low the noticeable limit for users. To avoid timing side channels,
we might want to compute the maximum number of hash compu-
tations for every login attempt (successful or failed) to make these
turnaround times constant.
Pilot deployment of TypTop. To gather data on TypTop’s effi-
cacy, we modify the implementation of TypTop slightly to allow
confidential logging of users’ password typing behavior.
The logging module works as follows. During password regis-
tration, two random 16-byte strings are generated and stored in
the state of TypTop; the first is used as an HMAC key to compute
a unique identifier for each submitted password (or typo), while
the second is used as a user-device identifier. With every password
submission, we log the HMAC identifier of the submission, along
with the DL distance from the real password, the relative guessabil-
ity, and whether the typo could have been corrected using Top-5
correctors (to form a comparison between TypTop and relaxed
checking). This allows us to learn the transcript of password and
typo submissions — and thus simulate a run of TypTop — while
never learning the actual strings entered. Some of these values (e.g.,
DL distance) require both the underlying password and the typo
to process; we back-fill these values after a successful authentica-
tion when the encrypted caching scheme state and wait list are
decrypted. To simulate the Best-5 static caching scheme, we also
log the identifiers of the five most probable typos of the password.
The log and corresponding user identifier are uploaded to a
server via an HTTPS post request every 10 logins, after which
the uploaded log is deleted from the user’s laptop. The key used
to generate the HMAC identifiers is never uploaded, making it
impossible to brute-force recover passwords given the information
uploaded. Users can disable the logging and / or uploading feature
at any time during the study without any effect on the functionality.
Data collection and analysis. We initially advertised our study
via two university mailing lists and a number of social media groups.
However, we received a lower response rate than anticipated, as
users were initially reluctant to run research code as their primary
mode of authentication. Therefore, while not optimal, we used
snowball sampling [4] to increase participation in our study.
Study participation is anonymous: we do not know the exact set
of volunteers who installed TypTop, although we can deduce the
number of distinct machines on which TypTop was installed from
the logs generated. In subsequent analysis, we assume that each
user installed TypTop on only one machine. We collected data from
25 users over a period of 22–100 days (different users have varying
data collection periods depending on when they joined the study,
and how long they chose to participate for). TypTop was used for
a median of 27 days.
We observed a total of 4,563 password submissions during the
study, with a median of 103 submissions per user. The average user
types their password more than five times a day, and incorrectly
15% of the time. We found that 93% of these incorrect submissions
are within DL distance two of the real password and thus are classi-
fied as typos. The fraction of incorrect submissions that constitute
typos is larger than that observed in the MTurk study (70%); this
is probably because MTurk workers created their ‘passwords’ for
the study, and so were more likely to make high DL distance errors
due to misremembering them.
In total we observed 501 typos, of which 316 (63%) are toler-
ated by TypTop. This is significantly higher than the 122 (22%) that
would be tolerated by the relaxed checker with Top-5 correctors.
However the benefit of typo correction varies across users. We
observed 2 users who received an especially great benefit from Typ-
Top. They used TypTop for over 45 days, during which they typo-ed
their password 24% of the time — we found TypTop corrected 85%
of their typos, whereas the Top-5 corrector functions corrected
virtually none. For the remainder of the participants, we found that
TypTop and the Top-5 correctors performed roughly the same. We
believe this is because personal machines in university settings
tend to have very lenient password policies (if any policy at all),
meaning users pick simpler passwords whose typos are more likely
to be among those corrected by the Top-5 correctors. We expect to
see the performance benefit of TypTop emerge in settings where
users must pick stronger and less readily correctable passwords
(e.g., over 12 characters), and lock / unlock their computers many
times a day. We simulated other caching policies on the collected
data, and observed roughly the same performance.
These results suggest that personalized typo-tolerance may be
very beneficial to users who are especially typo-prone, and that this
benefit increases the longer the system is used. The sample size of
our initial pilot deployment is too small to allow us to draw more
general conclusions at this stage; as such we are planning a study
with more participants and which runs for a longer period of time.
We will be publishing TypTop as a public, open-source project to
facilitate a study with a broader set of participants.
8 CONCLUSION
We introduce the notion of personalized typo-tolerant password
checkers, which adapt over time to correct the typos made most
frequently by the individual user. We design and build an adaptive
password checking scheme called TypTop, which securely caches
incorrect password submissions that pass a policy check on what
forms of typos to allow. We formalize a cryptographic security no-
tion for such schemes, and show a formal reduction of our scheme’s
security to the difficulty of brute-force cracking attacks against the
registered password or the typos entered into the typo cache. We
give simple criteria that, if met, ensure no security loss in offline
attack and negligible security loss in online attack, and empirically
verify that real world password and typo distributions satisfy this
requirement. Simulations conducted with data gathered via a study
on Amazon MTurk suggest that TypTop will outperform existing
approaches to typo-tolerant password checking, and a small pilot
deployment suggests that TypTop can provide a substantial usability
benefit to especially typo-prone users.
ACKNOWLEDGMENTS
We thank Sam Scott for helping us with implementation of the first
prototype of TypTop, the volunteers for participating in our users
13
CCS ’17, October 30-November 3, 2017, Dallas, TX, USA
Chatterjee et al.
studies, and the anonymous reviewers for their insightful comments.
This work was supported in part by NSF grants CNS-1514163 and
CNS-1514163, United States Army Research Office (ARO) grant
W911NF-16-1-0145, and a generous gift from Microsoft.
A APPENDIX
A.1 Benefits of the PLFU Caching Scheme
We now describe the intuition behind the utility benefits of the
probabilistic least frequently used (PLFU) caching scheme over
its deterministic counterpart (LFU). Recall that during each PLFU
cache update, the cached typo ˜𝑤𝑜 is replaced with the wait listed
typo ˜𝑤𝑛 with probability 𝜈 = 𝑓 ˜𝑤𝑛 /(𝑓 ˜𝑤𝑛 + 𝑓 ˜𝑤𝑜 ), where 𝑓 denotes
the frequency count of the typo in the subscript. The main goal
of the PLFU caching scheme is to let the cache be agile enough to
adapt and change, while simultaneously increasing the likelihood
that the most useful typos ultimately stay in the cache.
The PLFU scheme has two key benefits over the non-probabilistic
LFU scheme. First, it makes it more likely that a typo which is
repeated in small amounts over many login attempts (and thus is