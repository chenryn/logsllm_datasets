title:A Domain-Specific Language for Low-Level Secure Multiparty Computation
Protocols
author:Peeter Laud and
Jaak Randmets
A Domain-Speciﬁc Language for Low-Level Secure
Multiparty Computation Protocols
Peeter Laud
Cybernetica AS
PI:EMAIL
Jaak Randmets
Cybernetica AS
University of Tartu
PI:EMAIL
ABSTRACT
Sharemind is an eﬃcient framework for secure multiparty computa-
tions (SMC). Its eﬃciency is in part achieved through a large set of
primitive, optimized SMC protocols that it makes available to ap-
plications built on its top. The size of this set has brought with it an
issue not present in frameworks with a small number of supported
operations: the set of protocols must be maintained, as new proto-
cols are still added to it and possible optimizations for a particular
sub-protocol should be propagated into larger protocols working
with data of diﬀerent types.
To ease the maintenance of existing and implementation of new
protocols, we have devised a domain-speciﬁc language (DSL) and
its optimizing compiler for specifying protocols for secure compu-
tation. In this paper, we give the rationale of the design, describe
the translation steps, the location of the compiler in the whole Share-
mind protocol stack, and the results obtained with this system.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection—Cryptographic
controls; C.2.4 [Computer-Communication Networks]: Distributed
Systems—Distributed applications
Keywords
Secure multi-party computation; secure computation outsourcing;
additive secret sharing; compiler; protocol optimization
1.
INTRODUCTION
Secure multiparty computation (SMC) has become more and
more practical in recent years, with the appearance of several SMC
frameworks [2, 14, 7, 10, 20, 34, 43, 33] and noteworthy appli-
cations [9, 25, 3]. Existing SMC frameworks use diﬀerent pro-
tocol sets for achieving privacy. Several frameworks implement
the arithmetic black box (ABB) [15], the methods of which are
called during the runtime of a privacy-preserving computation by
the SMC engine in the order determined by the speciﬁcation of
the computation. An ABB implementation consists of a data rep-
resentation for private values, somehow sharing them among the
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from Permissions@acm.org.
CCS’15, October 12–16, 2015, Denver, Colorado, USA.
Copyright is held by the owner/author(s). Publication rights licensed to ACM.
ACM 978-1-4503-3832-5/15/10 ...$15.00.
DOI: http://dx.doi.org/10.1145/2810103.2813664 .
computing parties, and a set of protocols for operations on shared
values. When executing a protocol from this set, the computing
parties provide the shares of the operands as inputs to that protocol,
and receive the shares of the result as outputs. An ABB must at
least contain the methods for linear combination and multiplication
of private integers (in order to be Turing-complete), but it contains
more in typical implementations. For yielding secure applications
making use of SMC, the ABB implementation must be universally
composable [11]. In this case, the protocols of the ABB can be
invoked in any order, sequentially or in parallel, without losing se-
curity guarantees.
Sharemind SMC framework [7] features an exceptionally large
ABB. Besides the operations listed above, it also contains com-
parisons, bit extraction, bit conversions, division of arbitrary-width
integers [8], as well as a full set of ﬂoating-point [23] and ﬁxed-
point [12] operations, including the implementations of elementary
functions. More often than not Sharemind protocols are speciﬁed
in a compositional style forming a hierarchy, with more complex
protocols invoking simpler ones. For example, ﬂoating-point oper-
ations typically use ﬁxed-point operations which in turn use inte-
ger operations [28]. The choice to expand the ABB of Sharemind
has been validated by the multitude of privacy-preserving appli-
cations it has been used for, including genome-wide association
studies [22], prediction of satellite collisions [23], and a privacy-
preserving statistical analysis tool [4].
The implementation of protocols for ABB operations is an error-
prone and repetitive task. Manual attempts to optimize complex
protocols over the composition boundaries is a laborious task, prone
to introduce errors and make the library of protocols unmaintain-
able. Implementation is made more diﬃcult due to the fact that pro-
tocols need to work for various diﬀerent integer widths and many
of the abstractions in the implementation language (such as virtual
function calls in C++/Java) entail unacceptable run-time overhead.
The task of building and maintaining implementations of protocols
is naturally answered by introducing a domain-speciﬁc language
(DSL) for specifying them.
The DSL allows us to specify the protocols in a manner similar
to their write-up in papers on SMC protocols. This speciﬁcation is
compiled and linked with the Sharemind platform. A diﬀerent lan-
guage [6] is used for specifying the privacy-preserving applications
as a composition of these protocols. Having diﬀerent languages for
implementing diﬀerent levels of the privacy-preserving computa-
tion allows us to apply optimizations most suitable for each level,
and improves the user experience by allowing us to tailor the lan-
guages for the speciﬁc domain. Protocols are speciﬁed and im-
plemented in a declarative style, but applications built on top of
the primitive protocols are speciﬁed in an imperative style as a se-
quence of protocol invocations.
In this paper we describe our protocol DSL. We discuss its de-
tails and their rationale, show how it enables us to easily build pro-
tocols for complex operations, and describe our experience in using
it, both in terms of performance and maintainability. In Sec. 2 we
introduce our language through a number of examples, allowing us
to demonstrate the impouurtant details of the DSL. Sec. 3 discusses
how the language is deﬁned, compiled, optimized and located in the
Sharemind framework. In Sec. 4 we discuss the security of the pro-
tocols implemented in our DSL, and how the DSL toolchain sup-
ports the development of secure protocols. In Sec. 5 we show how
the use of the DSL has improved the performance of the protocols
employed in Sharemind. In Sec. 6 we discuss related developments
and in Sec. 7 give our conclusions.
We note that other SMC frameworks with large ABBs have been
proposed [43, 24]. Also, there exist SMC applications that have
been implemented essentially on top of an ABB with a large num-
ber of SMC protocols [25, 17]. All these could potentially beneﬁt
from the DSL we are proposing and the architecture it implies.
2. OVERVIEW OF THE PROTOCOL DSL
We sought to create a programming language that facilitates the
implementation of SMC protocols in similar style to their speciﬁ-
cation in [7] and [23]. Our experience in implementing SMC proto-
cols in C++ for Sharemind showed that the aspect most hindering
our productivity and performance was the lack of composability.
Namely, our C++ framework is designed to allow a single proto-
col to be executed on many inputs in parallel (in SIMD style) but
the parallel execution of two diﬀerent protocols has only been re-
alizable by interleaving both protocols and manually packing all
network messages together. This eﬀort was very time-consuming
even for medium sized protocols. The lack of composability has
led to poor readability, maintainability and modiﬁability. Fixing a
bug means making changes in every place the modiﬁed protocol
has been copied to. This has often led to sacriﬁcing performance
for readability and development time.
Hence the key design principle of the protocol DSL is to always
put composability ﬁrst: whenever the data-ﬂow dependencies al-
low, the protocols are executed in parallel, no matter the order they
occur in the code. For performance reasons, it is very important to
keep the round complexity of protocols low, as a network roundtrip
is orders of magnitude slower than the time it takes to evaluate the
(arithmetic) gates in the protocols. In implementing protocols in
C++, large parts of the code dealt with how the network messages
are packed and how they are sent to other computing parties – we
wanted to automate this process. In the protocol language we have
simpliﬁed this aspect and the programmer only has to specify what
values are used by other parties, but not how or when they get there.
The compiler minimizes the round count, chooses how values are
packed into messages and deals with sending and receiving the net-
work messages automatically.
We also wanted to have an optimizing compiler for the language
so that the programmer does not have to optimize manually when
compositions introduce possibilities for it (e.g. by partially apply-
ing a protocol to a constant value). The protocol DSL is a functional
language enabling a declarative style and letting the programmer
manipulate protocols in a higher-order manner. For instance, it is
natural to apply a protocol to each element of a vector by using a
higher-order map operator.
The language supports type level integers (called size types) and
arithmetic on them. Functions polymorphic in the number of input
bits allow the protocols to be speciﬁed once for all input lengths.
The language is mainly designed for implementation of additive
secret sharing schemes but is not strictly limited to that.
def reshare : uint[n] -> uint[n] = \u ->
let r = rng ()
in u + r - (r from Next)
Listing 1: Resharing protocol
2.1 Additive secret sharing
In Sharemind SMC framework the private values are additively
shared among the parties performing the secure computation. The
sharing is over a ﬁnite ring. Diﬀerent rings of the form Z2n and Zn
2
can be used. The protocols of the framework perform operations
with secret-shared values, receiving the shares of the operands as
inputs and delivering the shares of the results.
Even though our protocol DSL can support an arbitrary number
of parties, the protocols of Sharemind have been designed speciﬁ-
cally for three parties and in this paper we also focus on this case.
A secret-shared value x ∈ R, where R is one of the rings Z2n or
Zn
2, is represented as a triple (x1, x2, x3) with the i-th party holding
xi ∈ R, satisfying x1 + x2 + x3 = x, where the addition is in ring R. A
nice property of additive scheme is that integers can be added with
no network communication by adding the respective shares. Most
other operations require at least one communication round.
In Sec. 4 we provide more detailed discussion of the security of
SMC protocols in general and Sharemind’s protocols in particular,
as well as the support oﬀered by the protocol DSL and the Share-
mind framework for ensuring the security of protocols. Brieﬂy, our
protocols provide security against a single honest-but-curious party,
meaning that for any single computing party, its view could be gen-
erated from its inputs only, and does not depend on the inputs and
outputs of the other parties.
3
2
1
To ensure such independence, resharing is a commonly used in
implementing Sharemind’s set of protocols. The signiﬁcance of
the resharing protocol is in providing fresh shares for input value
so that the new shares can be used as inputs for further protocols
without giving any information about the input shares. The im-
plementation of the resharing protocol [8, Alg. 1] in our DSL is
depicted in Listing 1. As the input, the i-th party receives the
share ui of some private value u ∈ Z2n.
In order to obtain the
output share u(cid:48)
i, the i-th party generates a random value ri, sends
it to the previous party and ﬁnally adds the diﬀerence of gener-
ated and received random value to the input. All arithmetic is per-
formed modulo 2n. The ﬁnal shares obtained in the protocol will
3) = (u1 + r1 − r2, u2 + r2 − r3, u3 + r3 − r1). We see that
1, u(cid:48)
be (u(cid:48)
u(cid:48)
+ u(cid:48)
= u1 + u2 + u3 = u, i.e. the output value is the same as
the input value but u(cid:48)
i is independent of ui.
2, u(cid:48)
+ u(cid:48)
In the protocol DSL implementation Listing 1 we deﬁne a vari-
able reshare of type uint[n] -> uint[n] denoting a function tak-
ing an n-bit unsigned integer to an n-bit unsigned integer (the num-
ber of bits can be arbitrary). After the equals sign the variable def-
inition follows: in this case it is deﬁned to be a function taking an
argument called u. The body of the function follows after the arrow
and it ﬁrst randomly generates a variable r and then evaluates to
expression u + r - (r from Next). It is important to note that we
have not explicitly stated which computing party performs which
computation. The default mode of operation in the protocol DSL is
that every computing party executes the same code. For instance,
each party generates a random value independently even though it
is only written once in the code. The types of variables are derived
via type inference: from the type of the function we know that the
input variable u must be an n-bit integer, and because addition op-
def reshareToTwo : uint[n] -> uint[n] = \u ->
def mult : uint[n] -> uint[n] -> uint[n] = \u v ->
let {1}
r2 = rng ()
r3 = u - r2
in case:
1 -> 0
2 -> u + (r2 from 1)
3 -> u + (r3 from 1)
Listing 2: Protocol for resharing between two parties
erates on integers of same bit width we know that the randomly
generated variable r must also be an n-bit integer.
In Listing 1, we see how the transmission of values between
parties is speciﬁed. The receiver of the value states which value
and from which party it wishes to receive. The from-construct is a
somewhat unusual networking primitive but it is a good ﬁt for us as