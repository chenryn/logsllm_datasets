---
## Page 577
理过巡检问题列表。
体指标有没有问题，我们都可以给出一些详细的报告和数据支撑，下图15-18是一个整
现，比如可以导出一个全面和详尽的巡检报告，这种方式类似于我们体检，不管这些身
一些更为专业的修复建议；在这些方式之外，可以在报告的生成方式上做到定制化的实
可以跑一些基本的检查，生成一些通用的修复建议，当然也可以做一些深度巡检，提供
和实用的巡检建议，比较理想的设计方式应该是类似于我们日常使用的杀毒软件那样，
晰起来。
但要做，而且要做到位，同时根据上述的总结和梳理，会发现整个业务巡检的脉络会逐步清
15.3.6MySQL业务巡检方案
有明显的问题。
息进行打分模块的设计，最后给出一个分数来，这样整体来看就知道到底有没有问题，有没
等，对于业务接入和了解来说还是相对平滑的。
表、索引做一些相对深入地分析和建议。这里我分了三个维度，去掉了系统维度、等待模型
配置等，这些信息对于整体的把握上是需要的。但是对于业务来说，不是最需要关注的。
么就可以很顺畅地接入了。
对于业务来说，就不是一个黑盒状态了，如果他看到有多个从库，而确实需要读写分离，那
持，而且不是公有云服务，所以还是希望业务同学了解这个数据库的基本架构，这样一来，
中有数。
对网络的部分是忽略的，有了前面的一些基础数据，其实对于网络的部分也可以做到心
化能够反映出很多的潜在问题。
（3）第三类是对于网络流量的分析，
我们可以对已有的系统巡检信息做一些取舍，然后对数据库巡检方向做一些更深入
最后是一个巡检建议列表，这里会基于多个维度把巡检建议给出来，同时对这些巡检信
接下来的部分就是巡检信息提取了，这个维度算是更加深入了，需要对使用的数据库、
同时在这个维度上，做了一些信息的补充，比如系统在线时长、
经过上面的反复梳理，我们明确了系统层的巡检工作有很多是份内的事情，这些事情不
“架构部分是为了让业务同学对于目前的业务架构有一个概要的理解，因为是做业务支
（2）第二类是数据量变化，如果一个数据库有大量的日志和数据写入，那么数据量的变
（1）第一类是整体的系统负载，通过这个负载可以对系统的整体情况有一个清晰把握。
图表分析的部分我计划提取三类动态图：
一般来说，系统层更加关注CPU和IO，往往
、数据库在线时长、系统
第15章运维自助化服务|555
---
## Page 578
556丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
测和分析，让这些数据能够真正的“动”起来。
的巡检数据以接口化的方式存储起来，在需要提取的时候可以直接查取。
结果响应效率是最佳的。
趋势图等）展示出来。
义，所以我们对部分系统指标进行筛选和提取，把这些信息通过可视化的方式（比如图表，
息来得到一个数据库的对象分布情况。
思考，让我们把数据库版本过低作为一个巡检检查项，推动业务巡检的模型设计。
选择，所以有些亮点的巡检项是打算使用 sys schema来完成的，而通过这种方式也可以反向
库、表和索引，当然还有最重要的一个对象：SQL，所以我们的巡检会基于这些来进行展开。
查、
而对于后续大量数据的使用，我们可以考虑机器学习的方式建立回归模型，来做一些预
所以从巡检结果的设计层面考虑，我是打算按照周期表的方式来执行巡检任务，把生成
而另外一部分的信息，我们可以通过 MySQL 数据字典进行补充，比如通过数据字典信
要采集这些信息本身是有些难度的，MySQL 5.7 版本里面的 sys schema 是一个很不错的
：对于巡检信息的抽取，初步计划是做到离线采集，在线提取，这样一来对于数据的巡检
有至少30%的数据是来自于监控，业务同学不够关心是因为他们不够理解这些指标的含
主从复制检查、备份检查等。这些对于业务来说，他们都不太关心，他们关心的是数据
MySQL 层面的巡检，按照我们之前的思路，主要是偏系统层面的，比如监控、报警检
5.7
下图15-19是根据信息整理和汇总之后设计的一版巡检页面。
未使用的索引
余索引
全表扫描的表
碎片表检查
自增ID检查
字符集检查
创建大量临时表的SQL
大表检查
全表扫描的SQL
Top CPUSQL
TopIOSQL
索引
慢查询个数
州
表和索引
SQL
巡检问题梳理
图15-18
系统
数据库
安全检查
内存使用率
系统在线时长超过2年
磁盘空间检查
CPU使用率
binlog增长量
数据量增长异常检测
用户权限检查，drop,alter权限检查
偏移量检查
字符集检查
消耗资源最多的用户5.7
锁检查
连接数检查
数据库缓存和内存的比例
未开启binlog
是否有备份
是否有从库
---
## Page 579
TP业务，数据变更很频繁，算是一个偏TP层面的业务。
增长了600M 左右。所以通过这些数据可以得出一个初步的结论：这个数据库是一个典型的
30 多次，按照 Binlog 的配置为1G，Binlog 是增长了30G 左右，而整体的 data 目录下的数据
会有很多额外的收获。
取，抽取的信息其实也是在不断的完善中逐步敲定的。
层面的事情。
来的目标，会有一些豁然开朗的思路，
但是显然我们忽视了。
多少数据量，什么时候会是业务的高峰，什么时候相对会比较平稳，这些是我们应该了解的
况等，或者提一个更高的要求，我们负责了100套数据库业务，那这些数据库半天内产生了
这个数据库数据量情况、数据变化情况、对象（表、索引）的分布情况、整体的SQL 质量情
借助其他的技术手段才能够补充实现。
的下标和偏移量大小，而没有时间标识，如果我要查看一段时间内的日志变化情况，还需要
个分析。
量这样一个维度能够反映出数据库的变化情况，但是 MySQL 官方显然没有好的工具来做这
下图15-20这个数据库的情况，可以看到Binlog的保留天数是1，日志在2天内切换了
如何让有些工作更加具有落地性，
一以这个为出发点，我觉得很多DBA对于自己负责的数据库业务其实是不了解的，比如
也许有的同学会说有 show binary logs这个命令啊，仔细想想,这个命令的输入只有Binlog
我取出一部分数据来做一个简单分析，就会发现其实很多业务我们换一个角度去分析，
一直以来对于MySQL的Binlog日志的统计和分析是工作中的重点内容，因为通过日志
方案1：通过数据建模梳理数据库业务
，至于以后怎么样，怎么分析和利用，其实是另外一个
一种方式就是把你推到一个高度之后，你再来看看原
图15-19
第15章运维自助化服务|557
---
## Page 580
558|MySQL DBA工作笔记：数据库管理、架构优化与运维开发
是很糟糕的。如果业务能够获得这些信息，他就不会一直不断的往里面填数据。另外我们制
外的信息；另一方面因为权限等原因，他无法获得这些信息。
我想大多数人回答不好，因为他会忽略，一方面他只关注于他需要了解的业务，不会关注额
的数据库中表和索引的分布情况吗？不需要给出具体数字，只回答一个大概的比例就可以。
换切换很频繁，数据量的增长相对较快，所以这很可能是一个密集型写入的日志业务。
一个僵尸业务，
日志没有切换，更关键的是偏移量没有发生任何变化，所以通过这个层面来看，这很可能是
这些信息到底有没有用呢，其实是有的，如果一个数据库里存在上万张表，毫无疑问这
1044
说实话我们对于自己所负责数据库的某些信息是不够清晰的，比如我们了解自己所负责
方案2：通过可视化解读数据库对象分布
再来看一个业务（如图15-22所示），
再来看下图15-21中的数据，这个数据库的数据量不大，从两次时间采集的数据来看，
IP地址
IP地址
IP地址
口
口雅
，可以持续关注。
binodg
mysqlbin00205255746101
mysqlbin.00236784425101
mysqibin.000566469
mysqbin.0000566469
图15-22
这个数据库的数据量比较大，有60多G，日志切
图15-21
图15-20
utf8
db
db
数挥车教具
1.48M
7068M902354M345504M
8442.93M9599.79M36697.38M
26033.17M240724.47M
26033.17M240724.47M
---
## Page 581
及了一些复杂的业务逻辑，但是可以确定的是，这个库是很难做分布式扩展的。
在 MySQL 里面含有存储过程不是一种很良好的设计，一种可能是遗留问题，另一种就是涉
是考虑了较多的查询需求。
比例过高，为什么加索引呢，本质上是为了查询快捷，辅助索引比重高，说明整个数据库还
然从比例来看，少部分表还是没有主键的)，但是值得一提的是，整个数据库中的辅助索引
的效果更好一些。
最终的结果是一样的，问题得到了解决，而且是商量着来的。
据库存在哪些隐患，我们也给出具体可行的建议，让他们也参与进来，我想这就是一种共赢
现业务价值。我们可以换一种方式来理解，那就是我们主动反馈给业务同学，他们现在的数
式变为主动模式，能够提前发现问题比遇到问题再解决的意义大得多，当然这种方式难以体
所以这些信息我们是可以共享给业务同学的。
定了开发规范难以落地的一个原因就是信息不对称，你说这些信息是不是机密，显然不是，
、那么对于这件事情如何落地呢，一种是数字化，一种是可视化。其中可视化的方式体现
最后再看下图15-26这个库的对象分布。
可以看到，表和主键的比例基本持平，含有少量的辅助索引，还有一部分的存储过程，
我们再来看下图15-24这个库里的对象分布。
可以看到这个库中有700多张表，主键比例和表数据量持平，说明整体的设计还不错（当
比如你看到图15-23这个数据库对象的分布情况，会有什么样的印象。
这些信息对于DBA 来说，有没有用呢，其实也是有的。我们处理问题，也是由被动模
那下面这个库呢，其对象分布如下图15-25所示。
这个库的场景比较单一，只有表和主键，整体来说，和偏日志型写入的业务相关。
数据库维度巡检信息
图15-23
27.97%(778)
·表
辅助索引
存储过程
表
C
数据库维度巡检信息
50.14% (371)
表
49.86%
%000
图15-24
第15章运维自助化服务|559
主键
函数
辅助索引
存储过程
表
C
---
## Page 582
560丨MySQLDBA工作笔记：数据库管理、架构优化与运维开发
机制，在不影响业务的前提下，我们可以把很多干扰我们正常生活的报警延迟处理，这是一
影响，虽然这样一件事情处理的难度不高，但是我们总是需要花费一些额外的时间和精力，
警，一个关键业务系统的磁盘空间超出阈值（假设是80%），这对你的旅游兴致来说是大受
和函数；从业务的角度来说，后期要做扩展和改进都是比较容易的。
种运维信仰和工作理念。
那么这个问题处理的时间就可以适当后延，对于正常的生活和工作收益是很大的，按照这种
这个代价对于个人来说是很高的。
质量是一种被动的方式。
如果我们能够有一种机制去缓解这个问题，比如收到报警后，我们马上收到巡检信息提
我们可以假设一个场景，你在节假日的时候出外游玩，面对大好风景时，收到了一条报
方案3：巡检，监控，报警三位一体的集成建设
这是一种相对理想的对象分布方式，表、主键、辅助索引的比例为4:4:2，没有存储过程
数据库维度巡检信息
下图15-27是一个集监控、报警和巡检的三位一体集成方案。
在我们的运维体系中，
19%
图15-25
1.78%(25
·存储过程
48.68%
，一直有一块短板，那就是单纯依靠监控和报警模块，工作效率和
函数
辅助索引
存储过程
表
Q
图15-27
数据库维度巡检信息
图15-26
18.82%(16)
·辅助索引
主键
辅助索引
函数
存储过程
Q
---
## Page 583
度来说，这种体验是很差的。
据库权限的工单，然后再开一个开通系统权限的工单，双方就会比较疑惑。从解决问题的角
要开通系统层面的防火墙权限，这是一个流程化的工作，我们如果要求业务同学开通一个数
计工单的处理效率，肯定会有很大的落差。
审批的单据，即工单有了过度的安全属性，而对于运维属性重视度不够。这种情况下你去统
什么模糊呢，因为工单里面是大量的文字，需求和目标都不是很明确，你需要像做阅读理解
附件里面才是真正的需求。
需要作工单反馈的。
就可以通过工时的方式来评估服务的结算费用。
方式或者规范的流程，甚至是手工处理，如果能高效完成，那对于应用来说就是大大的赞。
乎在很多公司里面对于工单的管理都不够给力或者给予的重视程度有一些落差。
15.4
我们可以设定70%的阈值为巡检模型所用，就可以通过巡检模型来识别出这类问题
1:00~2:00，磁盘空间使用率从20%增长到70%，虽然不会触发报警，但是短时间的增量较多，
些监控指标来触发巡检就可以把这块空白补上，比如一个系统的磁盘空间 80%为阈值，在
如发送巡检可视化报告或者巡检提示信息，让巡检工作不再被动，而是因需而动。
（5）工单的边界比较模糊：比如申请账号权限，如果申请来自于业务同学，那么肯定需
一样去解析工单。
（4）繁琐的审批程序：如果一个工单的处理流程需要多个人经手，那么工单就会成为强
（3）模糊需求工单：即工单是电子的方式提交的，但是工单的需求是一个模糊需求，为
（2）服务质量，比如工单的处理结果是否满意，是否有一些规范的操作流程等，这些是
运维工作其实也是一种服务，所以对于运维提供的服务来说，无论你是使用了高大上的
（2）伪电子工单：即工单是通过前端页面输入的，但是工单的信息都需要大量的附件，
（1）纸质工单：如果工单使用纸质方式，
对于工单处理来讲，有以下5个痛点：
（1）部门预算，或者说是工时，比如处理一个问题，需要花费2个小时，那么这个服务
实际上，很多公司里面的工单基本会和两类属性挂钩：
工单是运维工作里面的硬通货，在多年之前我们口口相传：no 工单，no work。但是似
（4）监控和巡检，如果监控指标未达到报警阈值，并不一定意味着没问题，但是通过一
（3）巡检和监控，通过巡检机制的完善，能够发现更多的问题，然后建立新的监控指标
（2）报警和巡检，通过报警能够异步调用巡检接口，对已有的数据库业务进行巡检，比
（1）监控和报警，这是常规的运维体系，监控达到阈值触发报警。
我来对这个图做下解释：
工单管理
，质量还能基本保证，效率那就不可控了。
第15章运维自助化服务|561
---
## Page 584
562丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
如对于业务能够感觉到的数据库高可用、分布式方案，
面的五类工单，基本能够涵盖大多数的业务场景，如下图15-28 所示。
的专业能力和服务质量。在这个基础上，我们需要对已有的工作做下分类，我大体分为了下
15.4.1..
更多地释放出来，做更有意义的事情，否则就是一个鸡肋，流于形式。
的部分，这个底层还是需要依赖元数据的支持。
么我们就需要对接服务器资源。
偏后期去做的，因为这个涉及的流程和环节会多一些，数据库的实例又在操作系统之上，那
再深入一层，我们提供的是数据库服务，或者说得再明确一些，我们提供的是数据服务。
，第一道坎就是数据库资源的交付，这个看似简单的需求是我们在完善工单系统的过程中
，这个过程可以把数据库方向的一些工作打包起来，
其实每个公司对于工单的理解都会有所不同，工单的处理效率其实能够反映出业务支持
我们接下里会从工单流程梳理开始，逐步完善已有的工单流程，让工单处理飞起来。
在这个之上就是权限的管理，这是实例管理的一个入门点，也是落实规范的一个切入点。
首先能够对接到的基础单位就是数据库实例，这是我们面向业务的一个数据维度，所以
所以工单模块的建设是运维工作质量提高的试金石，如果做得好，
数据库工单类型划分
CMDB
图15-28
权限工单
分布式
SQL审核