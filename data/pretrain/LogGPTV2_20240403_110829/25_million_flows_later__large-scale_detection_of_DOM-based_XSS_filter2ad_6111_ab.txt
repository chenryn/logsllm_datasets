Component and escape, we used the lower three of the four
remaining bits to store whether one or more of these func-
tions were applied to the string. To represent a benign char-
acter, the lower four bits are set to 0.
4.2 Patching the V8 JavaScript engine
Google’s JavaScript engine V8 is highly optimized in re-
gards to both memory allocation and execution speed. Al-
though the code is written in C++, V8 for the most parts
does not make use of a class-concept using member variables
when representing JavaScript objects like strings or arrays.
Instead, a small header is used and objects components are
addressed by only using given oﬀsets relative to the object’s
address.
After careful examination of the given code, we chose to
only encode the desired information directly into the header.
Every object in V8 stores a pointer to its map. The map
describes the class of an object. In V8, there are maps for
each type of object. We found an used part of a bitmap in
the maps and used it to create new map objects for tainted
strings. Obviously, for strings of dynamic length, additional
memory must be allocated to store the actual data. Based
on whether a string is pure ASCII or also contains two-byte
characters, this memory is allocated on creation of the ob-
ject. The address of this newly created space is then writ-
ten to one of the aforementioned oﬀsets in the header. Along
with the information that a string is tainted, we also need to
store the taint bytes described above. To do this, we changed
the string implementation such that additional length bytes
are allocated. Since we wanted to keep the changes to ex-
isting code as small as possible, we chose to store the taint
bytes into the last part of the allocated memory. This way,
the functionality for normal access to a string’s characters
did not have to be changed and only functionality for taint
information access had to be added.
As mentioned before, the V8 engine is optimized for per-
formance.
It therefore employs so-called generated code
which is assembler code directly created from macros. This
way, simple operations such as string allocation can be done
without using the more complex runtime code written in
C++. However, for our approach to easily integrate into
the existing code, we chose to disable the optimizations for
all string operations such as creation or sub-string access.
After patching the string implementation itself, we also
instrumented the string propagation function such as sub-
string, concat, charAt, etc. This is necessary to ensure
that the byte-wise taint-tracking information is also propa-
gated during string conversions.
4.3 Patching the WebKit DOM implementa-
tion
In contrast to the V8 engine, WebKit makes frequent use
of the concept of member variables for its classes. Therefore,
to allow for the detection of a tainted string, we were able
to add such a member denoting whether a string is tainted
or not. The string implementation of WebKit uses an array
to store the character data. Hence, we added a second array
to hold our taint bytes. Since strings coming from V8 are
converted before being written into the DOM, we patched
the corresponding functions to allow the propagation of the
taint information. This is necessary because tainted data
might be temporarily stored in the DOM before ﬂowing to
a sink, e.g. by setting the href attribute of an anchor and
later using this in a document.write. To allow for correct
propagation of the taint information, we not only needed
to change the string implementation but also modify the
HTML tokenizer. When HTML content is set via JavaScript
(e.g. using innerHTML), it is not just stored as a string but
rather parsed and split up into its tree structure. Since we
want to ensure that taint information is carried into the tag
names and attributes in the generated tree, these changes
were also necessary.
4.4 Detection of sink access
Until now we discussed the tracking of tainted data inside
the V8 JavaScript engine and WebKit. The next step in our
implementation was to detect a tainted ﬂow and to notify
11955.1 Anatomy of a Cross-Site Scripting Exploit
To develop a system that is capable of generating valid
XSS payloads, we ﬁrst analyzed the nature of a Cross-Site
Scripting exploit. In general, an exploit is context depen-
dent. This means, that a payload, which an attacker seeks
to execute, depends on how the Web application processes
the attacker’s input. So, if the input ﬂows into the eval
sink it has to utilize a diﬀerent syntax than an exploit tar-
geting ﬂows into document.write (More details on context-
dependent exploit generation can be found in the Section
5.2). However, the structure of an exploit can be general-
ized to a non-context-dependent form.
Listing 1 shows two typical exploits. The ﬁrst exploit
targets a JavaScript context (e.g. eval), while the second
one contains an exploit for an HTML sink (e.g.
docu-
ment.write). In many cases a tainted value was concate-
nated from several diﬀerent strings, which are hard coded
(benign/non-attacker-controllable) or coming from either one
or more sources (attacker-controllable). Therefore, an at-
tacker is only able to control parts of the string that ﬂows
into the sink.
Immediate execution of JavaScript is often
not possible at the location where the tainted/controllable
parts are inserted into the string/code (e.g. within quoted
strings). Therefore, the exploit ﬁrst has to break out of the
current context to be able to execute the malicious script
code. The ﬁrst part of each exploit serves as a ”break out
sequence” to escape to a context where JavaScript execu-
tion is possible.
In the cases presented in Listing 1 these
sequences are ”’);” and ”>”, respectively. Following
the break out sequence, an arbitrary JavaScript payload or
 tag can be executed. Afterwards, the exploit has
to take care of trailing string fragments in such a way that
these fragments do not interfere with the execution of the
payload. For example, if a string that is passed to eval con-
tains a syntax error, no code will be executed at all, even
if the syntax error occurs at the very end of the string. To
prevent this from happening an exploit has to include an
escape sequence that renders trailing characters harmless.
In the JavaScript case we simply comment out everything
that follows our payload and in the HTML case we close the
script block and include a  to interpret the rest
of the string as simple text instead of HTML. To summarize
our analysis, we conclude that a Cross-Site Scripting exploit
takes the following generalized form:
exploit := breakOutSequence payload escapeSequence
(1)
In this, only the breakOutSequence and the escapeSequence
are context-speciﬁc. While the escapeSequence is very trivial
to choose, the breakOutSequence needs careful crafting to
result in a successful exploit.
Listing 1 Example Cross-Site Scripting exploits
’); alert ( ’ XSS ’);//
" >   
Figure 1: Report functionality
the user. Therefore, we modiﬁed all DOM-based Cross-Site
Scripting sinks – like document.write, innerHTML or eval.
We changed them in such a way that a reporting function is
called each time a tainted string is passed to such a sink. In
order to pass on the report to the user interface, we imple-
mented a Chrome extension, that injects the JavaScript re-
porting function into the DOM. As such a function is callable
from inside the runtime engine, we are able to report the ﬂow
to the extension. The details on the layout and implemen-
tation of this extension are presented in 6.1.
In WebKit’s API used to provide access to the DOM tree
for V8, the passed arguments are of V8’s string class and are
then converted to WebKit’s string type. Hence, we chose
to implement our reporting function into V8’s string class,
therefore allowing us to invoke it from the DOM API as
well as directly from V8 using the provided string reference.
When called, this function gathers information on the code
location of the currently executed instruction and reports
these alongside the taint information and details on the type
of sink to the extension.
Figure 1 depicts this layout. Both the indicated functions
eval and document.write use the reference to the passed
string to invoke the reporting function which in turn passes
on the information to the Chrome extension shown at the
top.
5. VULNERABILITY VERIFICATION: AU-
TOMATIC EXPLOIT GENERATION
Although the taint-tracking engine delivers ﬁrst indica-
tions for potential Cross-Site Scripting vulnerabilities, de-
tecting a ﬂow alone is not suﬃcient to ensure that a vulner-
ability was discovered. There are various reasons why a suc-
cessful exploitation is not possible for an existing ﬂow. For
example, the Web site could use built-in or custom encoding
or ﬁlter functions that are capable of defusing a malicious
payload. Furthermore, other, random circumstance can oc-
cur that prevent an exploit from executing. For example, if
the tainted value originates from a GET parameter, tamper-
ing with this parameter could trigger the Web server to load
a diﬀerent page or to display an error message in which the
vulnerable ﬂow is not present anymore. Therefore, a veriﬁ-
cation step is needed to tell vulnerable data ﬂows apart from
non-exploitable ﬂows. In order to do so our system uses the
data received from the taint- tracking engine to reliable gen-
erate valid Cross-Site Scripting Exploits. In this Section we
describe the inner workings of the generation process.
Extension  V8 JSevalreport  WebKitdocument.write11965.2 Context-Dependent Generation of Break-
out Sequences
After discovering a data ﬂow from one or more sources
to a sink, the taint-tracking engine delivers three pieces of
information to the exploit generation framework:
1. Information on the the data ﬂow (sources, sink, applied
built-in ﬁlters)
2. Tainted value: the complete string that ﬂowed into the
sink (including benign and tainted parts from one or
more sources)
3. Byte-wise taint information for each byte contained in
the tainted string.
Based on the given sink the framework ﬁrst determines
the target context. Depending on this context, the tainted
value and the taint information are passed to a context-
sensitive break out sequence generation function. In the next
step, the generator adds the desired payload and a context-
speciﬁc ﬁxed escape sequence. After constructing the ex-
ploit, the system builds a test case that can be executed
in a completely automated fashion and reports back to the
framework in case of successful exploitation.
5.2.1 HTML context-speciﬁc generation
An HTML context is present whenever a tainted string
is directly converted into HTML code. This is the case for
many DOM manipulation functions such as document.write
or innerHTML.
As mentioned before, often only parts of a string may be
tainted. Therefore, our system ﬁrst determines the exact
location of the tainted parts by analyzing the taint informa-
tion.
In order to create a valid exploit, the system needs
to determine into which DOM node the tainted parts will
be transformed when the string-to-HTML conversion takes
place. In order to do so, the generator parses the complete
string and identiﬁes the corresponding nodes. Based on the
node types the generator is able to plan the next step within
the generation process. In this ﬁrst step we distinguish be-
tween three diﬀerent node types (See Listing 2 for examples):
1. Tainted TagNode: The tainted value is located in-
side an HTML tag. Either it is part of the tag name,
an attribute name, an attribute value or a combination
of those three possibilities.
2. Tainted CommentNode: The tainted value is con-
tained within an HTML comment.
3. Tainted TextNode: The tainted value is placed out-
side of an HTML tag or in between a closing and an
opening tag.
Listing 2 Example Vulnerabilities
d o c u m e n t . write ( ’  ’)
d o c u m e n t . write ( ’  ’ + t a i n t e d V a l u e + ’  ’)
d o c u m e n t . write ( ’  ’)
Depending on the the node type, break out sequences have
to be generated diﬀerently. In the following, we explain the
three diﬀerent approaches:
TagNode generation.
If the tainted value is included within an HTML tag we
ﬁrst need to break out of this tag. Otherwise, opening a
 tag would have no eﬀect.
If the tainted value
is directly located within the tag, we can simple do so by
adding a ”>” sign to the break out sequence. If the tainted
value resides within an attribute of the tag, the system ﬁrst
needs to determine the delimiter of the attribute. Most of
the time such attributes are either enclosed by single or dou-
ble quotes, however, sometimes, also no delimiter is present.
So in order to break out of the tag in this case we need
to add the delimiter of the attribute node before the angle
brackets.
Now our payload is able to break out of the current (open-
ing) tag and would be able to open a script tag, to execute
the payload. However, some tags have special semantics for
the text between the opening and the closing tag. So for
example, HTML markup between an opening and closing
iframe tag is only rendered in case iframes are not sup-
ported by the browser. Therefore, our generator optionally
adds one or more additional closing tags at the end of the
break out sequence for all present tags with special seman-
tics. To summarize this, a TagNode break out sequences
looks as follows:
T agN odeBS := [delimiter] > [closingT ags]
(2)
CommentNode generation.
The generation of CommentNode break out sequences is
very trivial in most of the cases. As comments in HTML
do not have any special semantics for their content, we can
simply break out of a comment by adding ”- ->” to our break
out sequence. However, such a comment could in rare cases
be placed in between opening and closing tags of scripts,
iframes, etc. So, again our system analyzes the string and
adds closing tags for these elements if necessary. Summing
up, a CommentNode break out sequence takes the following
form:
CommentN odeBS := −− > [closingT ags]
(3)
TextNode generation.
Every character sequence that is placed outside a tag or
a comment or that is located in between an opening and a