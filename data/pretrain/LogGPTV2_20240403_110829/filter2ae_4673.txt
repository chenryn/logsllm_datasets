### 代码审计过程记录

#### 前言
近期，我进行了一次代码审计，发现了一个虽然已被修复但仍具有参考价值的漏洞。以下是详细的分析步骤。

#### 0x01 配置文件检查
首先，我们查看了配置文件 `include/common.inc.php`。在该文件中，Metinfo 使用了伪全局变量设置。这引发了我对是否存在变量覆盖漏洞的怀疑。通过使用 `grep` 搜索相关代码片段，我们进一步确认了这一假设。

#### 0x02 后台登录模块审查
考虑到登录过程中可能存在安全问题，我仔细检查了以下三个与用户认证相关的PHP文件：
- `login.php`
- `login_check.php`
- `login_out.php`

在这些文件中，我发现 `login_check.php` 包含了对 `common.inc.php` 的引用，这意味着其中包含了一些可以被外部控制的变量。值得注意的是，某些关键参数并未进行初始化处理，这为后续攻击提供了可能性。

#### 0x03 漏洞利用方法
针对上述发现的问题，存在两种主要的利用方式：

**方法一：已知路径的情况下**
如果攻击者能够确定目标服务器上的文件系统结构，那么可以通过 `require` 函数加载特定文件来执行恶意代码。为此，可以先注册一个普通账户并尝试上传图片（例如网站Logo）。一旦成功上传，便可以将一个经过特殊构造的 `.phar` 或 `.zip` 文件作为图片上传，从而实现远程代码执行 (RCE)。

**方法二：未知路径的情况**
当无法直接访问具体目录时，常规的相对路径遍历技术可能失效。此时，可以考虑利用 PHP 的伪协议如 `data://` 或 `php://` 来绕过限制。然而，默认情况下 `allow_url_include` 功能是禁用状态，使得这种方法在实际环境中难以实施。但在 CTF 竞赛等受控环境下，若能设法开启此功能，则可通过 Base64 编码等方式规避路径限制，最终达成 RCE 目标。

---

以上便是本次代码审计的主要内容及所发现的安全隐患。希望这份文档能够帮助更多人理解 Web 应用程序中的潜在风险，并采取适当措施加以防范。