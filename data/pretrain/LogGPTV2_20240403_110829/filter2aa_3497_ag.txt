output format for varying platforms and technologies, such as XML. Rather than
having a fixed integer size for code points, it encodes them using a simple variable
length value. Table 3-3 shows how code points are encoded in UTF-8.
Table 3-3: Encoding Rules for Unicode Code Points in UTF-8
Bits of
code point
First code
point (U+)
Last code
point (U+)
Byte 1
Byte 2
Byte 3
Byte 4
0–7
0000
007F
0xxxxxxx
8–11
0080
07FF
110xxxxx
10xxxxxx  
12–16
0800
FFFF
1110xxxx
10xxxxxx 10xxxxxx  
17–21
10000
1FFFFF
11110xxx
10xxxxxx 10xxxxxx 10xxxxxx
22–26
200000
3FFFFFF
111110xx
10xxxxxx 10xxxxxx 10xxxxxx
26–31
4000000
7FFFFFFF
1111110x 10xxxxxx 10xxxxxx 10xxxxxx
UTF-8 has many advantages. For one, its encoding definition ensures that the ASCII
character set, code points U+0000 through U+007F, are encoded using single bytes. This
scheme makes this format not only ASCII compatible but also space efficient. In addition,
UTF-8 is compatible with C/C++ programs that rely on NUL-terminated strings.
For all of its benefits, UTF-8 does come at a cost, because languages like Chinese and
Japanese consume more space than they do in UTF-16. Figure 3-8 shows such a
disadvantageous encoding of Chinese characters. But notice that the UTF-8 in this
example is still more space efficient than the UTF-32 for the same characters.
||||||||||||||||||||
||||||||||||||||||||
Figure 3-8: The string "兔子" in different Unicode encodings
NOTE
Incorrect or naive character encoding can be a source of subtle security issues, ranging from
bypassing filtering mechanisms (say in a requested resource path) to causing buffer overflows.
We’ll investigate some of the vulnerabilities associated with character encoding in Chapter 10.
Variable Binary Length Data
If the protocol developer knows in advance exactly what data must be transmitted, they can
ensure that all values within the protocol are of a fixed length. In reality this is quite rare,
although even simple authentication credentials would benefit from the ability to specify
variable username and password string lengths. Protocols use several strategies to produce
variable-length data values: I discuss the most common—terminated data, length-prefixed
data, implicit-length data, and padded data—in the following sections.
Terminated Data
You saw an example of variable-length data when variable-length integers were discussed
earlier in this chapter. The variable-length integer value was terminated when the octet’s
MSB was 0. We can extend the concept of terminating values further to elements like
Technet24
||||||||||||||||||||
||||||||||||||||||||
strings or data arrays.
A terminated data value has a terminal symbol defined that tells the data parser that the
end of the data value has been reached. The terminal symbol is used because it’s unlikely
to be present in typical data, ensuring that the value isn’t terminated prematurely. With
string data, the terminating value can be a NUL value (represented by 0) or one of the
other control characters in the ASCII set.
If the terminal symbol chosen occurs during normal data transfer, you need to use a
mechanism to escape these symbols. With strings, it’s common to see the terminating
character either prefixed with a backslash (\) or repeated twice to prevent it from being
identified as the terminal symbol. This approach is especially useful when a protocol
doesn’t know ahead of time how long a value is—for example, if it’s generated dynamically.
Figure 3-9 shows an example of a string terminated by a NUL value.
Figure 3-9: "Hello" as a NUL-terminated string
Bounded data is often terminated by a symbol that matches the first character in the
variable-length sequence. For example, when using string data, you might find a quoted
string sandwiched between quotation marks. The initial double quote tells the parser to
look for the matching character to end the data. Figure 3-10 shows a string bounded by a
pair of double quotes.
||||||||||||||||||||
||||||||||||||||||||
Figure 3-10: "Hello" as a double-quoted bounded string
Length-Prefixed Data
If a data value is known in advance, it’s possible to insert its length into the protocol
directly. The protocol’s parser can read this value and then read the appropriate number of
units (say characters or octets) to extract the original value. This is a very common way to
specify variable-length data.
The actual size of the length prefix is usually not that important, although it should be
reasonably representative of the types of data being transmitted. Most protocols won’t
need to specify the full range of a 32-bit integer; however, you’ll often see that size used as
a length field, if only because it fits well with most processor architectures and platforms.
For example, Figure 3-11 shows a string with an 8-bit length prefix.
Figure 3-11: "Hello" as a length-prefixed string
Implicit-Length Data
Sometimes the length of the data value is implicit in the values around it. For example,
think of a protocol that is sending data back to a client using a connection-oriented
protocol such as TCP. Rather than specifying the size of the data up front, the server
Technet24
||||||||||||||||||||
||||||||||||||||||||
could close the TCP connection, thus implicitly signifying the end of the data. This is how
data is returned in an HTTP version 1.0 response.
Another example would be a higher-level protocol or structure that has already
specified the length of a set of values. The parser might extract that higher-level structure
first and then read the values contained within it. The protocol could use the fact that this
structure has a finite length associated with it to implicitly calculate the length of a value in
a similar fashion to close the connection (without closing it, of course). For example,
Figure 3-12 shows a trivial example where a 7-bit variable integer and string are contained
within a single block. (Of course, in practice, this can be considerably more complex.)
Figure 3-12: "Hello" as an implicit-length string
Padded Data
Padded data is used when there is a maximum upper bound on the length of a value, such
as a 32-octet limit. For the sake of simplicity, rather than prefixing the value with a length
or having an explicit terminating value, the protocol could instead send the entire fixed-
length string but terminate the value by padding the unused data with a known value.
Figure 3-13 shows an example.
||||||||||||||||||||
||||||||||||||||||||
Figure 3-13: "Hello" as a '$' padded string
Dates and Times
It can be very important for a protocol to get the correct date and time. Both can be used
as metadata, such as file modification timestamps in a network file protocol, as well as to
determine the expiration of authentication credentials. Failure to correctly implement the
timestamp might cause serious security issues. The method of date and time representation
depends on usage requirements, the platform the applications are running on, and the
protocol’s space requirements. I discuss two common representations, POSIX/Unix Time
and Windows FILETIME, in the following sections.
POSIX/Unix Time
Currently, POSIX/Unix time is stored as a 32-bit signed integer value representing the
number of seconds that have elapsed since the Unix epoch, which is usually specified as
00:00:00 (UTC), 1 January 1970. Although this isn’t a high-definition timer, it’s sufficient
for most scenarios. As a 32-bit integer, this value is limited to 03:14:07 (UTC) 19 January
2038, at which point the representation will overflow. Some modern operating systems
now use a 64-bit representation to address this problem.
Windows FILETIME
The Windows FILETIME is the date and time format used by Microsoft Windows for its
filesystem timestamps. As the only format on Windows with simple binary representation,
it also appears in a few different protocols.
The FILETIME format is a 64-bit unsigned integer. One unit of the integer represents
a 100 ns interval. The epoch of the format is 00:00:00 (UTC), 1 January 1601. This gives
the FILETIME format a larger range than the POSIX/Unix time format.
Tag, Length, Value Pattern
It’s easy to imagine how one might send unimportant data using simple protocols, but
sending more complex and important data takes some explaining. For example, a protocol
that can send different types of structures must have a way to represent the bounds of a
structure and its type.
One way to represent data is with a Tag, Length, Value (TLV) pattern. The Tag value
represents the type of data being sent by the protocol, which is commonly a numeric value
(usually an enumerated list of possible values). But the Tag can be anything that provides
the data structures with a unique pattern. The Length and Value are variable-length
values. The order in which the values appear isn’t important; in fact, the Tag might be part
Technet24
||||||||||||||||||||
||||||||||||||||||||
of the Value. Figure 3-14 show a couple of ways these values could be arranged.
The Tag value sent can be used to determine how to further process the data. For
example, given two types of Tags, one that indicates the authentication credentials to the
application and another that represents a message being transmitted to the parser, we must
be able to distinguish between the two types of data. One big advantage to this pattern is
that it allows us to extend a protocol without breaking applications that have not been
updated to support the updated protocol. Because each structure is sent with an associated
Tag and Length, a protocol parser could ignore the structures that it doesn’t understand.
Figure 3-14: Possible TLV arrangements
Multiplexing and Fragmentation
Often in computer communication, multiple tasks must happen at once. For example,
consider the Microsoft Remote Desktop Protocol (RDP): a user could be moving the mouse
cursor, typing on the keyboard, and transferring files to a remote computer while changes
in the display and audio are being transmitted back to the user (see Figure 3-15).
Figure 3-15: Data needs for Remote Desktop Protocol
This complex data transfer would not result in a very rich experience if display updates
||||||||||||||||||||
||||||||||||||||||||
had to wait for a 10-minute audio file to finish before updating the display. Of course, a
workaround would be opening multiple connections to the remote computer, but those
would use more resources. Instead, many protocols use multiplexing, which allows multiple
connections to share the same underlying network connection.
Multiplexing (shown in Figure 3-16) defines an internal channel mechanism that allows
a single connection to host multiple types of traffic by fragmenting large transmissions into
smaller chunks. Multiplexing then combines these chunks into a single connection. When
analyzing a protocol, you may need to demultiplex these channels to get the original data
back out.
Figure 3-16: Multiplexed RDP data
Unfortunately, some network protocols restrict the type of data that can be transmitted
and how large each packet of data can be—a problem commonly encountered when
layering protocols. For example, Ethernet defines the maximum size of traffic frames as
1500 octets, and running IP on top of that causes problems because the maximum size of
IP packets can be 65536 bytes. Fragmentation is designed to solve this problem: it uses a
mechanism that allows the network stack to convert large packets into smaller fragments
when the application or OS knows that the entire packet cannot be handled by the next
layer.
Network Address Information
The representation of network address information in a protocol usually follows a fairly
standard format. Because we’re almost certainly dealing with TCP or UDP protocols, the
most common binary representation is the IP address as either a 4- or 16-octet value (for
IPv4 or IPv6) along with a 2-octet port. By convention, these values are typically stored as
Technet24
||||||||||||||||||||
||||||||||||||||||||
big endian integer values.
You might also see hostnames sent instead of raw addresses. Because hostnames are just
strings, they follow the patterns used for sending variable-length strings, which was
discussed earlier in “Variable Binary Length Data” on page 47. Figure 3-17 shows how
some of these formats might appear.
Figure 3-17: Network information in binary
||||||||||||||||||||
||||||||||||||||||||
Structured Binary Formats
Although custom network protocols have a habit of reinventing the wheel, sometimes it
makes more sense to repurpose existing designs when describing a new protocol. For
example, one common format encountered in binary protocols is Abstract Syntax Notation 1
(ASN.1). ASN.1 is the basis for protocols such as the Simple Network Management
Protocol (SNMP), and it is the encoding mechanism for all manner of cryptographic
values, such as X.509 certificates.
ASN.1 is standardized by the ISO, IEC, and ITU in the X.680 series. It defines an
abstract syntax to represent structured data. Data is represented in the protocol depending
on the encoding rules, and numerous encodings exist. But you’re most likely to encounter
the Distinguished Encoding Rules (DER), which is designed to represent ASN.1 structures in
a way that cannot be misinterpreted—a useful property for cryptographic protocols. The
DER representation is a good example of a TLV protocol.
Rather than going into great detail about ASN.1 (which would take up a fair amount of
this book), I give you Listing 3-1, which shows the ASN.1 for X.509 certificates.
Certificate  ::=  SEQUENCE  {
     version         [0]  EXPLICIT Version DEFAULT v1,
     serialNumber         CertificateSerialNumber,
     signature            AlgorithmIdentifier,
     issuer               Name,
     validity             Validity,
     subject              Name,
     subjectPublicKeyInfo SubjectPublicKeyInfo,
     issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL,
     subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,
     extensions      [3]  EXPLICIT Extensions OPTIONAL
}
Listing 3-1: ASN.1 representation for X.509 certificates
This abstract definition of an X.509 certificate can be represented in any of ASN.1’s
encoding formats. Listing 3-2 shows a snippet of the DER encoded form dumped as text
using the OpenSSL utility.
$ openssl asn1parse -in example.cer
    0:d=0  hl=4 l= 539 cons: SEQUENCE
    4:d=1  hl=4 l= 388 cons: SEQUENCE
    8:d=2  hl=2 l=   3 cons: cont [ 0 ]
   10:d=3  hl=2 l=   1 prim: INTEGER         :02
   13:d=2  hl=2 l=  16 prim: INTEGER         :19BB8E9E2F7D60BE48BFE6840B50F7C3
   31:d=2  hl=2 l=  13 cons: SEQUENCE
   33:d=3  hl=2 l=   9 prim: OBJECT          :sha1WithRSAEncryption
   44:d=3  hl=2 l=   0 prim: NULL
   46:d=2  hl=2 l=  17 cons: SEQUENCE
   48:d=3  hl=2 l=  15 cons: SET
   50:d=4  hl=2 l=  13 cons: SEQUENCE
   52:d=5  hl=2 l=   3 prim: OBJECT          :commonName
   57:d=5  hl=2 l=   6 prim: PRINTABLESTRING :democa
Listing 3-2: A small sample of X.509 certificate
Technet24
||||||||||||||||||||
||||||||||||||||||||
Text Protocol Structures
Text protocols are a good choice when the main purpose is to transfer text, which is why
mail transfer protocols, instant messaging, and news aggregation protocols are usually text
based. Text protocols must have structures similar to binary protocols. The reason is that,
although their main content differs, both share the goal of transferring data from one place
to another.
The following section details some common text protocol structures that you’ll likely
encounter in the real world.
Numeric Data
Over the millennia, science and written languages have invented ways to represent
numeric values in textual format. Of course, computer protocols don’t need to be human
readable, but why go out of your way just to prevent a protocol from being readable
(unless your goal is deliberate obfuscation).
Integers
It’s easy to represent integer values using the current character set’s representation of the
characters 0 through 9 (or A through F if hexadecimal). In this simple representation, size
limitations are no concern, and if a number needs to be larger than a binary word size, you
can add digits. Of course, you’d better hope that the protocol parser can handle the extra
digits or security issues will inevitably occur.
To make a signed number, you add the minus (–) character to the front of the number;
the plus (+) symbol for positive numbers is implied.
Decimal Numbers
Decimal numbers are usually defined using human-readable forms. For example, you
might write a number as 1.234, using the dot character to separate the integer and
fractional components of the number; however, you’ll still need to consider the
requirement of parsing a value afterward.
Binary representations, such as floating point, can’t represent all decimal values
precisely with finite precision (just as decimals can’t represent numbers like 1/3). This fact
can make some values difficult to represent in text format and can cause security issues,
especially when values are compared to one another.
Text Booleans
Booleans are easy to represent in text protocols. Usually, they’re represented using the
words true or false. But just to be difficult, some protocols might require that words be
||||||||||||||||||||
||||||||||||||||||||
capitalized exactly to be valid. And sometimes integer values will be used instead of words,
such as 0 for false and 1 for true, but not very often.
Dates and Times
At a simple level, it’s easy to encode dates and times: just represent them as they would be
written in a human-readable language. As long as all applications agree on the
representation, that should suffice.
Unfortunately, not everyone can agree on a standard format, so typically many
competing date representations are in use. This can be a particularly acute issue in
applications such as mail clients, which need to process all manner of international date
formats.
Variable-Length Data
All but the most trivial protocols must have a way to separate important text fields so they
can be easily interpreted. When a text field is separated out of the original protocol, it’s
commonly referred to as a token. Some protocols specify a fixed length for tokens, but it’s
far more common to require some type of variable-length data.
Delimited Text
Separating tokens with delimiting characters is a very common way to separate tokens and
fields that’s simple to understand and easy to construct and parse. Any character can be
used as the delimiter (depending on the type of data being transferred), but whitespace is
encountered most in human-readable formats. That said, the delimiter doesn’t have to be
whitespace. For example, the Financial Information Exchange (FIX) protocol delimits
tokens using the ASCII Start of Header (SOH) character with a value of 1.
Terminated Text
Protocols that specify a way to separate individual tokens must also have a way to define an
End of Command condition. If a protocol is broken into separate lines, the lines must be
terminated in some way. Most well-known, text-based Internet protocols are line oriented,
such as HTTP and IRC; lines typically delimit entire structures, such as the end of a