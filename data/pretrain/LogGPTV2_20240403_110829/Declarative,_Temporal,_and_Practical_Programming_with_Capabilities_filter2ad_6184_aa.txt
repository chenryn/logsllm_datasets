title:Declarative, Temporal, and Practical Programming with Capabilities
author:William R. Harris and
Somesh Jha and
Thomas W. Reps and
Jonathan Anderson and
Robert N. M. Watson
2013 IEEE Symposium on Security and Privacy
Declarative, Temporal, and Practical Programming with Capabilities
William R. Harris∗, Somesh Jha∗, Thomas Reps∗†, Jonathan Anderson‡, and Robert N. M. Watson‡
∗{ wrharris, jha, reps }@cs.wisc.edu; University of Wisconsin-Madison, Madison, WI, USA
†GrammaTech Inc., Ithaca, NY, USA
‡{ jonathan.anderson, robert.watson }@cl.cam.ac.uk; University of Cambridge, Cambridge, England, UK
Abstract—New operating systems, such as the Capsicum
capability system, allow a programmer to write an application
that satisﬁes strong security properties by invoking security-
speciﬁc system calls at a few key points in the program.
However, rewriting an application to invoke such system
calls correctly is an error-prone process: even the Capsicum
developers have reported difﬁculties in rewriting programs to
correctly invoke system calls.
This paper describes capweave, a tool that takes as input
(i) an LLVM program, and (ii) a declarative policy of the
possibly-changing capabilities that a program must hold during
its execution, and rewrites the program to use Capsicum
system calls to enforce the policy. Our experiments demonstrate
that capweave can be applied to rewrite security-critical
UNIX utilities to satisfy practical security policies. capweave
itself works quickly, and the runtime overhead incurred in
the programs that capweave produces is generally low for
practical workloads.
I. INTRODUCTION
Developing practical but secure programs remains a difﬁ-
cult, important, and open problem. Network utilities such as
tcpdump and wget process data read directly from a net-
work connection, but execute vulnerable code [1], [2]. File
utilities and language interpreters are often run by a trusted
user to process untrusted data, but also execute vulnerable
code [3]–[7]. Once an attacker compromises vulnerable code
in any of the above programs, he can typically perform any
action allowed for the user that invoked the program.
Traditional operating systems provide only weak primi-
tives for applications to manage their privileges. As a result,
if a programmer wants to verify that his program is secure,
he typically must ﬁrst verify that
the program satisﬁes
very strong properties, such as memory safety. However,
recent work [8]–[11] has produced new operating systems
that allow programmers to develop programs that execute
untrusted code yet satisfy strong security requirements.
Moreover, programmers can develop such programs with
much less effort than fully verifying the program for a
traditional operating system. Such systems extend the set
of system calls provided by a traditional operating system
with security-speciﬁc calls (which henceforth we will call
“security primitives”). Throughout a program’s execution, it
interacts with the system by invoking security primitives to
signal key events in its execution. The developers of such
systems have manually modiﬁed applications to invoke secu-
rity primitives so that the application satisﬁes strong security
policies, even when the application contains untrusted code.
One example of an operating system with strong security
primitives is the capability operating system Capsicum [10],
now an experimental feature in FreeBSD 9 [12]. Capsicum
allows a programmer to compartmentalize his program into
separate modules that each have a subset of the full set
of privileges, following the principle of least privilege.
Capsicum tracks for each process (1) the set of capabilities
available to the process, where a capability is a ﬁle descriptor
and an access right for the descriptor, and (2) whether the
process has the privilege to grant to itself further capabilities
(i.e., open more ﬁles). Capsicum provides to each process
a set of system calls that the process invokes to limit its
capabilities. Trusted code in a program can ﬁrst communi-
cate with its environment unrestricted by Capsicum, and then
invoke primitives to limit itself to have only the capabilities
that it needs for the remainder of its execution. Untrusted
code then executes with only the limited capabilities deﬁned
by the trusted code. Thus, even if the untrusted code is
compromised, it will only be able to perform operations
allowed by the limited capabilities.
The Capsicum primitives are sufﬁciently powerful that
a programmer can rewrite a practical program to satisfy
a strong security policy by inserting only a few calls to
Capsicum primitives [10]. However, in practice it is difﬁcult
for programmers to reason about the subtle, temporal effects
of the primitives. When the Capsicum developers ﬁrst eval-
uated Capsicum, they rewrote programs, such as tcpdump,
in a way that they tentatively thought was correct, only to
discover later that the program was incorrect and required a
different rewriting [10]. Often, as in the case of tcpdump,
the difﬁculty results from the conﬂicting demands of (i)
using low-level primitives, (ii) ensuring that the program
satisﬁes a strong, high-level security requirement, and (iii)
preserving the core functionality of the original program.
This paper addresses the problem of writing programs for
capability systems, like Capsicum, by presenting a system,
takes from a programmer (1) a
called capweave,
that
program that does not
invoke Capsicum primitives, and
(2) a declarative, temporal policy, stated in terms of the
capabilities that the program should hold over the course of
its execution, motivated by the principle of least privilege.
capweave automatically compartmentalizes the program
© 2012, William R. Harris. Under license to IEEE.
DOI 10.1109/SP.2013.11
18
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:51:01 UTC from IEEE Xplore.  Restrictions apply. 
and instruments it to invoke Capsicum primitives so that it
satisﬁes the policy when executed on Capsicum. We call the
problem of ﬁnding such an instrumentation the Capsicum
policy-weaving problem.
Our capweave policy weaver addresses two key chal-
lenges that a programmer faces when manually rewriting a
program for Capsicum. The programmer’s ﬁrst challenge is
to deﬁne what “secure behavior” means for his program.
While Capsicum provides a powerful set of primitive opera-
tions, it does not provide an explicit language for describing
policies. Because the Capsicum developers did not have
such a language when ﬁrst developing Capsicum, it was
impossible for them to formally deﬁne correctness for their
rewritten programs.
The programmer’s second challenge is to write his pro-
gram to be both secure and functional. A programmer can
typically secure a program on Capsicum by strongly limiting
the capabilities of the program. However,
the rewritten
program may limit its capabilities too strongly at one point
of an execution, and as a result, may not have the capabilities
required to carry out core program functionality later in
the execution. The incorrect rewriting of tcpdump [10]
exempliﬁes this issue. To resolve conﬂicts between security
and functionality, a programmer must carefully rewrite his
program to maintain additional state about an execution, and
consult the state to determine when to invoke Capsicum
primitives, or execute a program function in a separate
process with distinct capabilities.
An additional challenge in designing capweave was
to structure it so that it uses a simple, declarative model
of Capsicum. Capsicum system architects and application
developers have developed and continue to develop libraries
of functions that an application can invoke to more easily
manage its capabilities [13]. For the remainder of this paper,
we refer to both the system calls and library functions that
a program invokes to manage its capabilities as security
primitives. When a Capsicum architect implements a new
primitive, he should be able to easily extend capweave so
that it can instrument programs to invoke the new primitive,
but he should not need to understand the details of the
instrumentation algorithm used by capweave.
To address the programmer’s ﬁrst challenge, capweave
provides a policy language with which a programmer can
write an explicit, declarative, general policy that restricts
the privileges of the program in terms of capabilities. Each
policy is a regular expression over an alphabet of program
points paired with sets of capabilities. The policy allows all
program executions that occur with the speciﬁed restricted
privileges.
To
the
address
programmer’s
challenge,
capweave takes an uninstrumented program and its
policy, and automatically instruments
the program to
satisfy the policy. To do so, capweave constructs from
the program, policy, and the semantics of Capsicum an
second
automata-theoretic safety game [14] between an “Attacker,”
who “plays” program instructions, and a “Defender” who
plays Capsicum primitives, by applying an automata-
theoretic policy weaver [15]. The Attacker wins the game if
the sequence of plays violates the policy, and the Defender
wins otherwise. capweave searches
for a winning
Defender strategy, and from the strategy, instruments the
program to (i) maintain instrumentation-state variables, and
(ii) invoke Capsicum primitives based on the values of the
variables so that the program satisﬁes its policy.
For a Capsicum architect to update capweave for an
updated version of Capsicum, they only need to update
declarative deﬁnitions of (i) the state maintained by Cap-
sicum, (ii) the primitives available to a program, and (iii)
each primitive’s effect on the Capsicum state. In practice,
the state and primitives are easy to deﬁne: together they
account for only one tenth of the capweave source code.
We determined experimentally that capweave allows a
programmer to harden practical programs to satisfy policies
that rule out known critical exploits of the programs. We
applied capweave to rewrite several UNIX utilities for
Capsicum that have demonstrated security vulnerabilities.
The rewritten programs included programs that were previ-
ously rewritten manually by the Capsicum team, programs
suggested through discussion with the Capsicum develop-
ment
team, and the PHP CGI interpreter, whose policy
was deﬁned by independent security researchers at MIT
Lincoln Laboratory. capweave allowed us to rewrite each
utility using only a small handful of program annotations,
no more than 11 lines, and a simple high-level policy of
no more than 115 lines in our policy language. Each policy
not only mitigated speciﬁc known exploits, but restricted
the capabilities of signiﬁcant segments of the program,
potentially mitigating a large class of future vulnerabilities.
Programs rewritten by capweave executed with equivalent
behavior to programs instrumented manually by an expert,
and incurred sufﬁciently low runtime overhead that they are
still deployable: only 4% runtime overhead over unwoven
programs on realistic workloads. We have provided a Cap-
sicum virtual machine containing all programs and policies
used in our experiments.1
§II uses the wget downloader
to
illustrate
the Capsicum policy-weaving problem and
capweave. §III discusses the design of capweave in de-
tail. §IV presents an experimental evaluation of the correct-
ness and performance of capweave and programs rewritten
by applying capweave. §V discusses related work.
Organization:
II. MOTIVATION
In this section, we motivate the Capsicum policy-weaving
problem, and illustrate our solution by describing how
capweave is used to secure the wget downloader.
1The virtual machine used is available at https://www.dropbox.com/s/
711q31mccz47rt4/capweave-exp-vm.tar.gz.
19
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:51:01 UTC from IEEE Xplore.  Restrictions apply. 
void wget(char* uls[], int num_urls) {
// For each URL input by the user:
for (int i = 0; i < num_urls; i++) {
sync_fork();
char* url_nm = urls[i];
// If the URL is an HTTP resource:
if (is_http(url_nm)) {
// Open a socket to the server:
int svr_sock = open_http(url_nm);
char* out_path = url_nm;
bool redir_url = false;
/* If server sends redirect
* with status 3xx: */
if (must_3xx_redirect(svr_sock)) {
redir_url = true;
/* Get the name of the output
* file from the server: */
out_path = get_outnm(svr_sock);
}
char* data = read_http(svr_sock);
redir_url ? cap_enter() : ;
write_data(out_path);
} else { ... }
sync_join();
}
}
C0:
L0:
L1:
L2:
L3:
L4:
C1:
L5:
C2:
Figure 1. Pseudocode for the wget downloader, instrumented to invoke
Capsicum primitives. wget takes an array of URL’s as input, and writes
the data at each URL to the ﬁle system of its host. Particularly subtle
segments of wget’s code are annotated with comments, and discussed in
§II-A. Capsicum primitives are typeset in bold font.
A. wget: an Insecure Program and a Desired Policy
We now present a simpliﬁed version of the wget down-
loader and a desired security policy that past versions of
wget do not satisfy. The wget downloader is a command-
line utility that takes as input a list of URL’s. For each URL,
wget attempts to download the data addressed by the URL
and write the data in the host ﬁle system.
Pseudocode for a simpliﬁed version of wget is given
in Fig. 1. Important program points are annotated with C
labels (e.g., L0). (Statements in Fig. 1 in bold font are
invoked by a version of wget instrumented for Capsicum.
Such statements are discussed in §II-B; for now, assume that
wget does not execute such statements.) For each input
URL, wget determines under what protocol the URL is
addressed (Fig. 1, line L1). Once wget determines the
protocol used, it runs protocol-speciﬁc functions to (i) open a
socket to the server holding the URL (line L2), (ii) download
the data addressed by the URL over the socket (lines L3 and
L4), and (iii) write the data to a ﬁle in the ﬁle system (line
L5).
Unfortunately, versions of wget through v.1.12 include a
vulnerability that allows an attacker who controls a server
with which wget interacts to write data to any ﬁle on the
host ﬁle system that can be written by the user who runs
20
wget. The vulnerability is exposed when wget processes
a particular HTTP response from the server. In particular,
wget may receive from a server a redirect response, which
directs wget to download data from a different network