Bind to a privileged port to masquerade as a server
Send a SIGKILL signal to kill the sshd server
Program
thttpd
passwd
su
ping
sshd
Version
2.26
4.1.5.1
4.1.5.1
s20121221
6.6p1
SLOC
8,922
50,590
50,590
12,202
83,126
Description
Small single-process web server
Utility to change user passwords
Utility to log in as another user
Test reachability of remote hosts
Login server with encrypted sessions
1) Reading /dev/mem: Opening the /dev/mem device
ﬁle for reading allows a process to read any memory
location on the system [21], allowing the process to read
any data stored within any process on the system.
2) Writing /dev/mem: Opening /dev/mem for writing
allows a compromised process to alter the data within
any process.
3) Binding to a privileged port: Binding a socket to a
privileged TCP port allows a compromised process to
masquerade as a trusted server (e.g., the remote login
server).
4) Sending SIGKILL to a critical server: Sending signals
to a system-owned server permits an attack to disrupt the
availability of system services. We model the sending of
a signal to a server owned by another user.
As Section III describes, our attack model assumes that an
exploited vulnerability, if it exists within the program, permits
an attacker to enable any privilege that is in the process’s
permitted privilege set and to use that privilege with any
system call used by the application. This attack model permits
sophisticated attacks such as code-reuse attacks that misuse
indirect control transfer instructions to redirect execution to
any of the system calls available to the program [18], [22],
[23]. To model such attacks with ROSA, we identiﬁed the
system calls used by the application and created, for each
attack, an input ﬁle to ROSA that contains the processes and
ﬁles needed to perform the attack and the list of system calls
that the attack can utilize.
As the programs in our evaluation reduce their maximum
privilege sets during execution, the possible privileges that an
attack can use changes over time. We used ChronoPriv to
record a process’s real, effective, and saved user ID and group
ID along with privileges sets as the Linux access controls use
the effective privileges, user IDs, and group IDs to decide
if an operation, such as opening a ﬁle, can succeed [2]. We
therefore created, for each possible combination of privilege
sets and IDs, an input ﬁle that permits any system call to use
the entire maximum privilege set and asked ROSA if, with
those privileges and IDs, an attack was possible.
B. Test Programs
We use the test programs from Hu et al.’s AutoPriv
project [11]. These programs, described in Table II, typically
run as the root user and are examples of different types of
privileged programs (some are network servers; others are
setuid root utilities). Hu et al. [11] modiﬁed these programs to
add calls to priv_raise and priv_lower around system
calls or library function calls that need privileges. We installed
the programs so that they start up with the correct permitted
set instead of starting up as a setuid root executable.
We used sloccount [24] to count the lines of C, C++ and
assembly code (excluding comments) in each test program. For
passwd and su, we counted the lines of code in the entire
shadow utility suite. For sshd, we counted the lines of code
in the whole OpenSSH suite. We ran all experiments on a
64-bit Ubuntu 16.04 system.
We compiled the test programs with PrivAnalyzer with
ChronoPriv enabled. The compiler inserts calls to priv_-
remove() to remove dead privileges, inserts a prctl()
call [6] into the program to disable kernel backward compat-
ibility features (such as enabling privileges in the effective
set when the process’s effective user ID is zero), and adds
our dynamic instruction counting instrumentation into the
program. We ran each program as follows: for ping, we
conﬁgured it to send requests 10 times to the localhost network
interface using the -c 10 ﬂag. For passwd, we ran it to
change the current user’s password. For su, we ran it to
execute the ls program as another user. For thttpd, we
used ApacheBench [25] with concurrency level 1 and request
number 1 to fetch one 1 MB ﬁle. For sshd, we started it
in the foreground with the -d ﬂag and ran scp to fetch one
1 MB ﬁle stored in another user’s account.
The Privileges column of Table III describes all the privilege
set combinations observed by ChronoPriv’s dynamic analy-
sis when we executed each program, starting with the full
privilege set available to the program when it starts execution
and ending with the smallest privilege set upon program exit.
Table III also presents the real, effective, and saved UIDs and
GIDs observed with each privilege set in columns UID and
GID respectively. UID 1000 corresponds to the user that starts
the execution of the program. There is another regular user in
the system with UID 1001. For su, this UID’s username is
the username argument to the program; for sshd, user 1000
starts the program and runs scp to transfer ﬁles from user
1001. The second column of Table III provides a short name
for the combination of privileges and effective, real, and saved
UID/GID values. For every attack, we use ROSA to analyze
the attack under each combination of privileges and process
credentials listed in Table III.
C. Efﬁcacy Evaluation
Table III summarizes the results of our analysis. For each
program, the Vulnerability column of Table III shows whether
the attacks we modeled (summarized in Table I) were suc-
cessful. To evaluate how long each program spends potentially
vulnerable to a particular privilege escalation attack, we ran
598
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:13:55 UTC from IEEE Xplore.  Restrictions apply. 
TABLE III: Security Efﬁcacy Results. A  denotes vulnerability to an attack and  denotes invulnerability to an attack.
Column Name shows a short name for each combination of privileges and process credentials.
Program Name
passwd priv1
passwd
passwd priv2
ping
sshd
su
passwd priv3
passwd priv4
passwd priv5
ping priv1
ping priv2
ping priv3
sshd priv1
sshd priv2
sshd priv3
sshd priv4
su priv1
su priv2
su priv3
su priv4
su priv5
su priv6
thttpd priv1
thttpd
thttpd priv2
thttpd priv3
thttpd priv4
thttpd priv5
Privileges
CapDacReadSearch,CapDacOverride,
CapSetuid,CapChown,CapFowner
CapSetuid,CapDacOverride,CapChown,
CapFowner
CapSetuid,CapDacOverride,CapChown,
CapFowner
CapChown,CapFowner,CapDacOverride
(empty)
CapNetRaw,CapNetAdmin
CapNetAdmin
(empty)
CapChown,CapDacOverride,
CapDacReadSearch,CapKill,CapSetgid,
CapSetuid,CapNetBindService,
CapSysChroot
CapChown,CapDacOverride,
CapDacReadSearch,CapKill,
CapSetgid,CapSetuid,CapSysChroot
CapChown,CapDacOverride,
CapDacReadSearch,CapKill,
CapSetgid,CapSetuid,CapSysChroot
CapChown,CapDacOverride,
CapDacReadSearch,CapKill,
CapSetgid,CapSetuid,CapSysChroot
CapDacReadSearch,CapSetgid,
CapSetuid
CapSetgid,CapSetuid
CapSetgid,CapSetuid
CapSetuid
CapSetuid
(empty)
CapChown,CapSetgid,CapSetuid,
CapNetBindService,CapSysChroot
CapSetgid,CapNetBindService,
CapSysChroot
CapSetgid,CapNetBindService
CapSetgid
(empty)
UID
ruid, euid, suid
1000,1000,1000
GID
rgid, egid, sgid
1000,1000,1000
Dynamic
Instruction Count
2,654 (3.81%)
Vulnerability
1
4
   
2
3
0,0,0
1000,1000,1000
43 (0.06%)
   
1000,1000,1000
1000,1000,1000
41,255 (59.15%)
   
0,0,0
0,0,0
1000,1000,1000
1000,1000,1000
1000,1000,1000
1000,1000,1000
1000,1000,1000
1000,1000,1000
1000,1000,1000
1000,1000,1000
1000,1000,1000
1000,1000,1000
25,630 (36.75%)
162 (0.23%)
194 (1.36%)
204 (1.43%)
13,844 (97.21%)
196,181 (0.31%)
   
   
   
   
   
   
1000,1000,1000
1000,1000,1000
62,374,249 (98.94%)    
1001,1001,1001
1001,1001,1001
468,197 (0.74%)
   
1000,1000,1000
1001,1001,1001
1,738 (0.00%)
   
1000,1000,1000
1000,1000,1000
38,880 (82.10%)
   
1000,1000,1000
1000,1000,1000
1000,1000,1000
1001,1001,1001
1001,1001,1001
1000,1000,1000
1000,1000,1000
1001,1001,1001
1001,1001,1001
1001,1001,1001
1001,1001,1001
1000,1000,1000
2,449 (5.17%)
133 (0.28%)
82 (0.17%)
43 (0.09%)
5,768 (12.18%)
323 (0.00%)
   
   
   
   
   
   
1000,1000,1000
1000,1000,1000
4,685,943 (9.82%)
   
1000,1000,1000
1000,1000,1000
1000,1000,1000
1000,1000,1000
1000,1000,1000
1000,1000,1000
361 (0.00%)
7,199 (0.02%)
43,008,606 (90.16%)
   
   