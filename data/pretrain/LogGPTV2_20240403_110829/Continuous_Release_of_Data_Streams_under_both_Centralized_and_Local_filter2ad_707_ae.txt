the bias dominates the noise in the DNS dataset.
5.4 Comparison of Threshold Phase
After examining the performance of different methods of outputting
the stream, we now switch gear to look at the algorithms for finding
the threshold.
Setup. Following PAK’s method [36], we use the first m values
to obtain the threshold. To eliminate the unexpected influence of
(a) m = 4096, smaller ϵ range
(b) m = 65536, smaller ϵ range
(c) m = 4096, larger ϵ range
(d) m = 65536, larger ϵ range
Figure 6: MSE of answering range queries using ˆHc16 on DNS
dataset. The true p-th percentile for different p values are
evaluated. We also include NM-E, which uses ϵ = 0.05.
distribution change, we use the same m values for now to build
the hierarchy using ˆHc16 (with the best smoothing strategy called
Recent smoother).
No Single Quantile Works Perfectly for All Scenarios. To
show that no single p-quantile can work perfectly for all scenarios,
we choose the true p-quantile for p ∈ {85, 90, 95, 99.5, 99.9} and
test in different scenarios (with different ϵ and m values). We also
include our threshold optimizer (NM-E) which is introduced to
find a threshold only based on the estimated error and set ϵ =
0.05 for it. Figure 6 shows the results of answering range queries
given these true percentiles and it reveals several findings. First,
the performance improves as ϵ increases for all p values. Second,
in some cases, the performance improvement is negligible with
respect to ϵ (e.g., p = 80 and 85 in Figure 6(b) and p = 85, 90 and
95 in Figure 6(d)). This is because p is too small in these scenarios,
which makes the bias dominate the noise error. Third, our threshold
optimizer with ϵ = 0.05 can achieve similar performance with the
optimal p-quantile.
Varying ϵ. We then compare three methods that output θ:
• NM-E: The threshold optimizer in ToPS. It does not require a
percentile.
Session 4D: Differential Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1246(a) Fare
(b) DNS
(c) Kosarak
(d) POS
Figure 7: Evaluation of different methods to find the threshold θ. We vary ϵ from 0.01 to 0.1 in the x-axis. The y-axis shows the
MSE of answering range queries using ˆHc16 (to make comparison clear, we use a fixed ϵ = 0.05 for it). Base is a baseline method
that always outputs 0.
(a) Fare
(b) DNS
(c) Kosarak
(d) POS
Figure 8: LDP evaluation of different methods of outputting the threshold. We vary ϵ from 0.2 to 2 in the x-axis. The y-axis
shows the query accuracy (MSE).
5.5 Performance of ToPL
In this section, we evaluate the LDP algorithm ToPL. We first check
the methods to find θ. Following the setting of ToPS, we use the first
m = 65, 536 observations to obtain the threshold θ. The difference
from the DP setting is that we vary ϵ in a larger range (from 0.2 to
2) due to the larger amount of noise of LDP. Our method finds θ by
using the Square Wave (SW) mechanism to estimate the distribution,
and then minimizing Equation 8. Moreover, our approach (the final
part of Section 4.1) modifies SW to exploit the prior knowledge that
the distribution is skewed. We use SW-W to denote this method. In
addition, we include another method for comparison, which uses
SW as a black box (and we use SW to denote it).
Figure 8 shows the performance of finding θ in ToPL. We vary
the ϵ used to find θ from 0.2 to 2 while fixing ϵ used to output
the stream to 1. The performance of SW improves with ϵ in all
four datasets. The performance of our method is less stable and not
improving with ϵ, but SW-W can still outperform SW as well as
the baseline in all the four datasets. In the Fare and DNS datasets,
the advantage of SW-W is not significant when ϵ ≥ 1.6. But in
the Kosarak and POS datasets, the performance of SW-W can be
as large as 3 orders of magnitude (measured by MSE of answering
random range queries) compared to SW.
In Figure 9, we visualize the estimated stream of our method
ToPL on the DNS dataset using ϵ = 1. We run algorithms only once
to demonstrate real-world usage. Clearly, ToPL and ground truth
are on similar trajectories in the figure which means our method
ToPL can give pretty accurate predictions.
Figure 9: Visualizations of the DNS stream. The x-axes corre-
spond to the time, and the y-axes denote the moving average.
Our ToPL at ϵ = 1 can output predictions that are pretty close
to the ground truth.
• S-PAK: The smooth sensitivity method used by PAK. We use
• S-P: The original smooth sensitivity method. Similar to S-PAK,
p = 99.5, as used by PAK.
we also use p = 99.5.
In Figure 7, we compare with existing differentially private methods
on finding the threshold θ. We vary the value of ϵ for obtaining
θ, and use ˆHc16 to answer range queries. Note that to make the
comparison clearer, we fix ϵ = 0.05 in ˆHc16. In all the datasets, our
proposed NM-E performs much better than existing methods in
terms of MSE. Moreover, the performance does not change much
when ϵ increases. The reason is that the output of NM-E is stable
even with small ϵ. Finally, both S-PAK and S-P perform worse than
the baseline method, which always give 0 regardless of input values,
indicating the θ given by them is too large.
Session 4D: Differential Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea12476 RELATED WORK
6.1 Dealing with Streaming Data in DP
A number of solutions have been proposed for solving the problem
of releasing real-time aggregated statistics under differential privacy
(DP). Here, besides the PAK’s approach [36], we briefly describe
several other related works.
Event-level DP. The first line of work is the hierarchical method
for handling binary streams, proposed concurrently by Dwork
et al. [18] and Chan et al. [8]. Event-level DP is satisfied in this
case. Both works assumed each value in the stream is either 0 or
1 and proposed a differentially private continual counter release
algorithm over a fixed-length binary stream with a bounded error
(cid:17) at each time step, where n is the stream length. In
(cid:16)(cid:16)log1.5
(cid:17) /ϵ
n
O
addition, Chan et al. [8] extend the binary tree method to handle
unlimited streams. There is also an online consistency method: for
each time slot, if its estimation is no bigger than the previous one,
output the previous one; otherwise, increment the previous one by
1. We note that this method handles the binary setting, and thus
focuses on ensuring each value is an integer, while our method
works on the more general non-binary setting and minimizes the
overall noise error.
In a follow-up work by Dwork et al. [19], the authors further
assumed the number of 1’s in the stream is small, and proposed
an online partition algorithm to improve over the previous bound.
Chen et al. [10] used the similar idea but worked in a different set-
ting (i.e., each value can be any number instead of a binary number).
The method partitions the stream into a series of intervals so that
values inside each interval are “stable”, and publishes the median
of each interval. While Chen et al. [10] works in the non-binary
setting, similar to our paper and PAK’s , it makes two assumptions
that lead to a quite different design. First, as mentioned above,
Chen et al. [10] made the stability assumption so that partition-
ing the stream gives better utility; second, it works in a different
scenario (i.e., each value is composed of multiple users, and each
user contribute at most 1) and the sensitivity is 1, and therefore,
the threshold for truncation is not needed.
User-level DP. Compared to Event-level DP which protects against
the change of one single event, the user-level definition models
the change of the whole data possessed by the user. Because the
user-level DP is more challenging, proposals under this setting rely
more on the auxiliary information. In particular, Fan et al. [24]
proposed to release perturbed statistics at sampled timestamps and
uses the Kalman filter to predict the non-sampled values and cor-
rect the noisy sampled values. It takes advantage of the seasonal
patterns of the underlying data. Another direction is the offline
setting, where the server has the global view of all the values first,
and then releases a streaming model satisfying DP. In this setting,
Acs and Castelluccia [3] propose an algorithm based on Discrete
Fourier Transform (DFT). Rastogi and Nath [39] further incorporate
sampling, clustering, and smoothing into the process.
w-event-level DP. To balance the privacy loss and utility loss
between user-level and event-level privacy models, relaxed privacy
notions are proposed. Bolot et al. [6] extended the binary tree
mechanism on releasing perturbed answers on sliding window
sum queries over infinite binary streams with a fixed window size
and using a more relaxed privacy concept called decayed privacy.
Kellaris et al. [29] propose w-event DP and two new privacy budget
allocation schemes (i.e., split ϵ into individual events) to achieve it.
More recently, Wang et al. [42] work explicitly for spatiotemporal
traces, and improve the schemes of Kellaris et al. by adaptively
allocating privacy budget based on the similarity of the data sources;
Fioretto and Hentenryck [25] improve the schemes by using a
similar approach of Fan et al. [24]: sampling representative data
points to add noise, and smoothing to reconstruct the other points.
In our work, we follow the event-level privacy model and dealing
with a more extended setting where data points are from a bounded
range instead of the binary domain, and publish the stream in an
online manner. Moreover, we do not rely on any pattern to exist in
the data; and we propose methods for both DP and LDP.
6.2 Dealing with Streams in Local DP
In the local DP setting, most existing work focus on estimating
frequencies of values in the categorical domain [5, 23, 43, 47, 53].
These techniques can be applied to other applications such as heavy
hitter identification [4, 40, 46] frequent itemset mining [38, 45],
multi-dimension data estimation [11, 12, 44, 51, 52, 55]. In the nu-
merical/ordinal setting, previous work [15, 41] mostly focused on
estimating mean. Recently, Li et al. [33] proposed the square wave
mechanism for the more general task of estimating the density.
There are two methods [22, 27] that deal with streaming data in
the user-level LDP, and their data models are different from ours.
In particular, Erlingsson et al. [22] assume the users’ values are
integers. Each user’s value can change at most a few times, and each
change can be either +1 or −1. The authors proposed a hierarchical
method (similar to Phase II of PAK) to estimate the average change
over time and thus get the average value by accumulating the
changes. Joseph et al. [27] assume at each time, the users’ values
are a sequence of bits drawn from several Bernoulli distributions,
and the goal is to estimate the average of all the bits held by all
users (or the average of the Bernoulli parameters). The authors
proposed a method to efficiently control each user’s contribution
when the server’s guess (previous estimation) is accurate, and thus
save privacy budget. The authors extend the method to a categorical
setting and use it to find the most frequent value held by the users.
There is also a parallel work [48] that works on w-event, metric-
based LDP. The proposed protocol assumes there is a pattern in
each user’s streaming data, and lets each user sample the turning
point to report.
7 CONCLUSION AND DISCUSSION
We have presented a privacy-preserving algorithm ToPS to contin-
ually output a stream of observations. ToPS first finds a threshold
to truncate the stream using the exponential mechanism, consid-
ering both noise and bias. Then ToPS runs an online hierarchical
structure and adds noise to the stream to satisfy differential privacy
(DP). Finally, the noisy data are smoothed to improve utility. We
also design a mechanism ToPL that satisfies the local version of DP.
Our mechanisms can be applied to real-world applications where
continuous monitoring and reporting of statistics, e.g., smart meter
data and taxi fares, are required. The design of ToPS and ToPL are
Session 4D: Differential Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1248flexible and have the potential to be extended to incorporate more
properties of the data. We list some as follows.
Shorten the Holdout of the Stream. We follow the setting of
PAK [36] and use the first m values to output the threshold θ. If
we want to start outputting the stream sooner, we can use our
Threshold optimizer with only fewer observations to find a rough
threshold. During the process of outputting the stream, we can use
sequential composition (in Section 2.4) to fine-tune the threshold.
Update θ. We follow the setting of PAK and assume the distri-
bution stays the same. If the distribution changes, we can have
the Threshold optimizer run multiple times (using either sequen-
tial composition to update θ while simultaneously outputting the
stream, or the parallel composition theorem to block some values
to update θ).
Utilizing Patterns of the Data. If there is further information,
such that the data changes slowly (e.g., the current value and the
next one differ in only a small amount), or the data changes regularly
(e.g., if the values show some Diurnal patterns), are given, we can
potentially utilize that to improve the performance of our method
as well.
ACKNOWLEDGEMENTS
This project was supported by NSF 1931443, 2047476, a Bilsland Dis-
sertation Fellowship, a Packard fellowship, and gift from Cisco and
Microsoft. The authors are thankful to the anonymous reviewers
for their supportive reviews.
REFERENCES
[1] Frequent itemset mining dataset repository. http://fimi.ua.ac.be/data/.
[2] New york taxi trip record data. https://www1.nyc.gov/site/tlc/about/tlc-trip-
record-data.page.
[5] R. Bassily and A. D. Smith. Local, private, efficient protocols for succinct his-
[3] G. Acs and C. Castelluccia. A case study: Privacy preserving release of spatio-
temporal density in paris. In Proceedings of the 20th ACM SIGKDD international
conference on Knowledge discovery and data mining, pages 1679–1688, 2014.
[4] R. Bassily, K. Nissim, U. Stemmer, and A. G. Thakurta. Practical locally private
heavy hitters. In NIPS, 2017.
tograms. In STOC, 2015.
[6] J. Bolot, N. Fawaz, S. Muthukrishnan, A. Nikolov, and N. Taft. Private decayed
predicate sums on streams. In Proceedings of the 16th International Conference on
Database Theory, pages 284–295. ACM, 2013.
[7] T. H. Chan, K.-M. Chung, B. M. Maggs, and E. Shi. Foundations of differen-
tially oblivious algorithms. In Proceedings of the Thirtieth Annual ACM-SIAM
Symposium on Discrete Algorithms, pages 2448–2467. SIAM, 2019.
[8] T.-H. H. Chan, E. Shi, and D. Song. Private and continual release of statistics.
ACM Transactions on Information and System Security (TISSEC), 14(3):1–24, 2011.
[9] V. Chandola, A. Banerjee, and V. Kumar. Anomaly detection: A survey. ACM
computing surveys (CSUR), 41(3):1–58, 2009.
[10] Y. Chen, A. Machanavajjhala, M. Hay, and G. Miklau. Pegasus: Data-adaptive
differentially private stream processing. In Proceedings of the 2017 ACM SIGSAC
Conference on Computer and Communications Security, pages 1375–1388. ACM,
2017.
[11] G. Cormode, S. Jha, T. Kulkarni, N. Li, D. Srivastava, and T. Wang. Privacy at
[12] G. Cormode, T. Kulkarni, and D. Srivastava. Answering range queries under local
scale: Local differential privacy in practice. In SIGMOD, 2018.
differential privacy. PVLDB, 2019.
[13] W.-Y. Day, N. Li, and M. Lyu. Publishing graph degree distribution with node
differential privacy. In Proceedings of the 2016 International Conference on Man-
agement of Data, pages 123–138, 2016.
[14] Z. Ding, D. Kifer, T. Steinke, Y. Wang, Y. Xiao, D. Zhang, et al. The permute-and-
flip mechanism is identical to report-noisy-max with exponential noise. arXiv
preprint arXiv:2105.07260, 2021.
[15] J. C. Duchi, M. I. Jordan, and M. J. Wainwright. Local privacy and statistical
minimax rates. In FOCS, 2013.
[16] J. C. Duchi, M. I. Jordan, and M. J. Wainwright. Minimax optimal procedures
for locally private estimation. Journal of the American Statistical Association,
113(521):182–201, 2018.
[17] C. Dwork, F. McSherry, K. Nissim, and A. Smith. Calibrating noise to sensitivity
in private data analysis. In TCC, 2006.
[18] C. Dwork, M. Naor, T. Pitassi, and G. N. Rothblum. Differential privacy under
continual observation. In Proceedings of the forty-second ACM symposium on
Theory of computing, pages 715–724, 2010.
[19] C. Dwork, M. Naor, O. Reingold, and G. N. Rothblum. Pure differential privacy