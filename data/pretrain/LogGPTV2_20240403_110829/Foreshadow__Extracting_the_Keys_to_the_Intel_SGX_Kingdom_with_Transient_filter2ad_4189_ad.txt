Speciﬁcally, we found that the bandwidth for concur-
rently extracting secrets is severely restricted, since
each Foreshadow round needs 256 time-consuming
FLUSH+RELOAD measurements in order to transfer one
byte from the microarchitectural state (Phase II) to the ar-
chitectural state (Phase III). As the enclave now continues
to execute during the measurement process, secrets are
more likely to be overwritten or evicted before being read
by the attacker. Nonetheless, this stealthy Foreshadow at-
tack variant should decidedly be taken into account when
considering possible defense strategies in Section 6.
Dumping the Entire Enclave Contents (Root). We
proceed as follows to extract the entire victim memory
space. Going over all enclave pages (e.g., by inspecting
/proc/pid/maps), our malicious kernel driver ﬁrst uses
ewb to evict the page from the EPC, only to immediately
load it back using the eldu instruction. As eldu loads
the page into the L1 cache and does not evict it afterwards,
the basic Foreshadow attack described in Section 3.1 can
reliably extract its content. Finally, the attack process is
repeated for the next page of the victim enclave.
The above eldu technique dumps the entire address
space of a victim enclave without requiring its coopera-
tion. Since the initial memory contents is known to the
adversary at enclave creation time, however, secrets are
typically generated or brought in at runtime (e.g., through
sealing or remote secret provisioning). As such, in prac-
tice, the victim should still be executed at least once, and
the attacker could rely on a single-stepping primitive, such
as SGX-Step [57], to precisely pause the enclave when it
contains secrets, and before they are erased again.
Crucially, however, our eldu technique allows to ex-
tract secrets that are never brought into the L1 cache by
the enclave code itself. As further discussed in Section 6,
this attacker capability effectively rules out software-only
mitigation strategies that force data to be directly stored
in memory while deliberately evading the CPU cache hi-
erarchy. For instance by relying on explicit non-temporal
write movnti instructions [5, 27].
3.5 Reading Uncached Secrets
4 Microbenchmark Evaluation
All attack techniques described thus far explicitly assume
that the secret we wish to extract resides in the L1 cache
after executing the victim enclave in Phase I of the attack.
We now describe an innovative method to remove this
assumption, allowing root adversaries to read any data lo-
cated inside the victim’s virtual memory range, including
data that is never accessed by the victim enclave.
We ﬁrst present controlled microbenchmark experiments
that assess the effectiveness of the basic Foreshadow at-
tack and the various optimizations discussed earlier.
All experiments were conducted on publicly available,
off-the-shelf Intel x86 hardware. We used a commodity
Dell Optiplex 7040 desktop featuring a Skylake quad-core
Intel i7-6700 CPU with a 32 KiB, 8-way L1 data cache.
Managing the Enclave Page Cache (EPC). The SGX
design [27, 43] explicitly relies on untrusted system soft-
ware for oversubscribing the limited protected physical
memory EPC resource. For this, untrusted operating sys-
tems can make use of the privileged ewb and eldu SGX
instructions that respectively copy encrypted and integrity-
protected 4 KiB enclave pages out of, and back into EPC.
We observed that, when decrypting and verifying an
encrypted enclave page, the eldu instruction loads the en-
tire page as plaintext into the CPU’s L1 cache. Crucially,
we experimentally veriﬁed that the eldu microcode im-
plementation never evicts the page from the L1 cache,
leaving the page’s contents explicitly cached after the
instruction terminates.
Experimental Setup. For benchmarks, we consider the
capabilities of both root and unprivileged attackers, con-
formant to our threat model in Section 2.2. The root
adversary has full access to the targeted system. She for
example aims to attack DRM technology enforced by an
enclave running on her own device. This enables her to
use all the attack optimization techniques described in
Section 3.2. In addition, she may reduce cache pollution
by pinning the victim thread to as speciﬁc logical core and
ofﬂoading peripheral device interrupts to another core.
The unprivileged adversary, on the other hand, is much
more constrained and represents an attacker targeting a
remote server. She gained code execution on the device,
and targets an enclave running in the same address space,
1000    27th USENIX Security Symposium
USENIX Association
(a) Root attacker cache line extraction.
(b) Unprivileged cache line extraction.
(c) Intra-cache line degradation.
Figure 4: Success rates of the Foreshadow attack per cache line (4a and 4b) and per byte within a cache line (4c).
but did not manage to gain kernel-level privileges. Some
attack optimizations, such as page aliasing or isolating
workloads, can therefore not be applied.
We assess the effectiveness of Foreshadow by attacking
a specially crafted benchmark enclave containing a 4 KiB
memory page ﬁlled with randomized data. A dedicated
entry point ﬁrst loads 64 bytes of the secret page (i.e., one
full cache line) into the L1 cache. Upon eexit, we then
extract all 64 bytes with Foreshadow, and ﬁnally verify
their correctness. This process is repeated for all 64 cache
lines within the 4 KiB page. To ensure representative mea-
surements, we randomize both the targeted data locations
and the enclave’s load address. For this, we (i) randomly
select 5 pages from a preallocated pool of 1024 enclaved
pages per benchmark run, and (ii) combine the outputs of
200 runs of the benchmark process. In total 4,000 KiB of
enclaved data was extracted for each attack scenario.
Success Rates. Figure 4a displays the success rate for
each cache line in the root attacker model. Overall, we
reached an outstanding median success rate of 99.92%
(with TSX). As not every SGX-capable machine supports
TSX, we executed the same benchmark without relying
on TSX features. This resulted in a moderate median
success rate drop of 2.59 percentage points (97.32%).
Interestingly, the cache lines storing data at the begin-
ning/end of the targeted page (i.e., cache lines #0 and #63)
manifest a distinctly lower average success rate: respec-
tively 23.25/2.03% and 63.78/0.63% with and without
TSX. We attribute this effect to unintended L1 cache line
evictions from (i) the remaining enclaved execution af-
ter loading the secret into the cache (e.g., eexit); and
(ii) our own attack measurement code (e.g., probing of
the oracle buffer in Phase III). Speciﬁcally, upon closer
inspection, we found that recent interrupt-driven SGX
cache attacks [23, 46] explicitly report similar lowered
success rates for the ﬁrst and last cache lines, attributed
to asynchronous enclave exit and kernel context switches.
Note that we consider the increased cache pressure on the
ﬁrst/last cache lines only a nonessential limitation of our
current attack framework, however, and decisively not an
avenue to defend against improved Foreshadow attacks.
Figure 4b displays the result of the same benchmark
for an unprivileged attacker. As expected, the median
success rate drops reasonably to 96.82% and 81.14% with
and without TSX respectively. While these success rates
are somewhat lower, they distinctly show that even much
more restrained user-level adversaries can successfully
attack SGX enclaves with an impressive success rate.
It is crucial for the Foreshadow attack to succeed that
the cache line holding the secret remains in the L1 cache.
We found that the likelihood of inadvertently evicting se-
crets from the L1 cache increases with each byte extracted
within a cache line. Figure 4c quantiﬁes this intra-cache
line degradation behavior. For the root adversary, the
probability of successfully extracting the ﬁrst byte within
a cache line is 98.61%. By the time the last last byte of
the cache line is extracted, however, the success rate has
degraded to 94.75%. Especially the use of TSX shows to
play a large role here. An unprivileged TSX attacker can
limit intra-cache line degradation from 94.05% to 86.68%.
This outperforms even all other optimization mechanisms
for the root adversary without TSX (93.53% - 84.99%).
5 Attacking Intel Architectural Enclaves
While SGX is largely realized in hardware and microcode,
Intel implemented certain critical functionality in soft-
ware through dedicated “architectural enclaves”. These
enclaves are part of the TCB, and were written by experts
with detailed knowledge of the security architecture. No
obvious security ﬂaws [38, 59] have ever been found, and
Intel’s architectural enclaves additionally implement var-
ious defense in-depth mechanisms. For example, even
though private memory should never leak from enclaves,
sensitive data gets overwritten as soon as possible.
To the best of our knowledge, we are the ﬁrst to present
full key extraction attacks against Intel’s vetted archi-
tectural enclaves. To date only one subtle side-channel
vulnerability [12] has been identiﬁed in Intel’s quoting
USENIX Association
27th USENIX Security Symposium    1001
0102030405060020406080100Cache lineSuccess rate (in %)root attacker (w/ TSX)root attacker (w/o TSX)0102030405060020406080100Cache lineSuccess rate (in %)unprivileged attacker (w/ TSX)unprivileged attacker (w/o TSX)0102030405060020406080100Byte index within cache lineSuccess rate (in %)root attacker (w/ TSX)root attacker (w/o TSX)unprivileged attacker (w/ TSX)unprivileged attacker (w/o TSX)enclave, which only affects secondary privacy concerns
and assuredly does not invalidate remote attestation guar-
antees. This shows that Foreshadow is substantially more
powerful than previous enclaved execution attacks that
rely on either side-channels or memory safety bugs.
Note that, for maximum reliability, both our attacks
against Intel’s architectural launch and quoting enclaves
assume the root adversary model, and apply all of the op-
timization techniques described in Section 3.2. Since our
ﬁnal exploits do not need to resort to the single-stepping
or eldu prefetching root-only techniques of Sections 3.3
and 3.5, however, we expect they could be further im-
proved to run entirely with user space privileges.
5.1 Attacking the Intel Launch Enclave
Background. SGX enclaves are created in a multi-stage
process performed by untrusted system software. Before
the enclave can be initialized through the einit instruc-
tion, a valid EINITTOKEN needs to be retrieved from the
Intel Launch Enclave (LE). Essentially, such a token con-
tains the target enclave’s content-based (MRENCLAVE)
and author-based (MRSIGNER) identities, requested fea-
tures and attributes, plus a random KEYID. A Message
Authentication Code (MAC) over the token data further-
more safeguards integrity, such that EINITTOKENs can be
freely passed around by untrusted software.
As with local attestation (Section 2.1), the security of
this scheme ultimately relies on a processor-level secret
accessible to both LE and einit. We refer to this secret
as the platform launch key. The einit instruction derives
the 128-bit launch key to verify the correctness of the
provided EINITTOKEN, and takes care to only initialize
enclaves whose identities and attributes match the ones
in the token. In order to bootstrap initialization for the
LE itself, Intel’s MRSIGNER value is hard-coded in the
processor and used by einit to skip the EINITTOKEN
check and grant access to the launch key. This ensures that
only an Intel-signed LE can invoke egetkey to derive the
launch key needed to compute valid MACs.
Intel uses the above enclave launch control scheme to
impose a strict, software-deﬁned enclave attribute control
policy. More speciﬁcally, current LE implementations
enforce that (i) either the enclave debug attribute is set
or mrsigner is white-listed by Intel; and (ii) the enclave
does not feature privileged, Intel-only attributes, such as
access to the long-term platform provisioning key.
Attack and Exploitation. Our goal is to extract a full
128-bit launch key from a single LE execution. This
is necessary, for each egetkey derivation (Section 2.1)
includes a random 256-bit KEYID, which is securely gen-
erated inside the enclave, such that each LE invocation
Figure 5: Key derivation in the SGX Launch Enclave.
uses a different launch key. We can therefore not corre-
late partial key recoveries from repeated launch enclave
executions to extract a full key, as is common practice in
side-channel research [6, 17, 39, 46, 51].
Intel’s ofﬁcial LE image2 features an entry point to
create a tagged EINITTOKEN based on the provided target
enclave measurements and attributes. This process is il-
lustrated in Fig. 5. LE ﬁrst generates a random KEYID and
calls 1 the sgx_get_key function to obtain the launch
key. For this, the trusted in-enclave runtime allocates a
temporary buffer, before calling 2 a small do_egetkey
assembly stub that executes the egetkey instruction to de-
rive 3 the actual launch key. Next, the temporary buffer
is copied 4 into a caller-provided buffer; and 5 over-
written plus deallocated before returning. LE now uses
the launch key to compute 6 the required MAC, and
immediately afterwards zeroes out 7 the key buffer.
An attacker can get hold of the launch key by target-
ing either the short-lived tmp buffer, or the longer-lived
key buffer. Our exploit targets the more challenging
tmp buffer to demonstrate Foreshadow’s strength in com-
bination with state-of-the-art enclave execution control
frameworks [57, 60]. In the exploratory (ofﬂine) phase of
the attack, we single-step LE and dump register content
(see Section 3.3) so as to easily establish the deterministic
tmp address, plus any code locations of interest.3 Next,
in the online phase of the attack, we interrupt the victim
enclave between steps 3 and 4 above, and instruct Fore-
shadow to extract the cache line containing the 128-bit
key. We rely on page fault sequences [60] here to avoid
any noise from timing-based interrupts, and to minimize
the number of AEXs induced by our exploit. Speciﬁ-
cally, we constructed a small ﬁnite state machine that
alternately revokes access to either the sgx_get_key or
do_egetkey code page. Merely counting page faults now
sufﬁces to deterministically locate the return instruction
4 in do_egetkey. At this point, the launch key resides
in the L1 cache and can thus be reliably extracted by Fore-
2 libsgx_le.signed.so from Intel SGX Linux SDK v2.0 with
product ID 0x20 and security version number 0x01.
3 Some reverse engineering is required for all symbols were stripped
from the signed LE image.
1002    27th USENIX Security Symposium
USENIX Association
shadow. We observed a 100% success rate in practice;
that is, our ﬁnal (online) exploit extracts the full 128-bit
key without noise, from a single LE run with only 13 page
faults in total — without resorting to the single-stepping
or eldu prefetching techniques of Sections 3.3 and 3.5.
To validate the correctness of the extracted keys, we
integrated a rogue launch token provider service into the
untrusted runtime of the SGX SDK. The rogue launch
token provider transparently creates tagged EINITTOKENs
using a previously extracted key, and includes the corre-
sponding (non-secret) KEYID, such that einit derives an
identical launch key from the platform master secret. Ob-
taining a single LE key thus sufﬁces to launch arbitrarily
many rogue production enclaves on the same platform.
Impact. Bypassing Intel’s controversial [10] launch
control policy allows one to create arbitrary production en-
claves without going through a license agreement process.
Removing control over which enclaves can be run is a
clear breach of Intel’s licensing interests, but by itself has
limited impact on SGX’s security objectives. We are not
able to fabricate enclaves. Any properly implemented key
derivation in an enclave will depend on either the MREN-
CLAVE or MRSIGNER values (Section 2.1). Neither can be
forged as they rely on cryptographic properties of SHA-
256 and the signer’s private key respectively. The ability
to create rogue production enclaves could be abused for
hiding malware [51], but does not provide an enclave
writer with any substantial advantage.
There is one notable exception, related to CPU tracking
privacy concerns [10]. Speciﬁcally, an attacker can now
create enclaves with the ability to derive a “provisioning
key” that remains constant as a processor changes owners.
LE should make sure that only Intel-signed enclaves can
derive such keys, needed for securing long-term remote
attestation keys (Section 5.2). All other egetkey deriva-
tions include an internal OWNEREPOCH register, which
can be re-randomized when a user sells her platform.
This ensures that any remaining secrets are approvedly
destroyed when a computer changes owners [2]. Note
that provisioning key derivations do include MRSIGNER,
however, such that we cannot derive Intel’s provisioning
key without access to Intel’s private enclave signing key.
5.2 Attacking the Intel Quoting Enclave
Background. Section 2.1 introduced local,
intra-
platform attestation through the ereport instruction.
Such tagged local attestation reports are useless to a re-
mote stakeholder, however, as they can only be veriﬁed
by a target enclave executing on the same platform. The