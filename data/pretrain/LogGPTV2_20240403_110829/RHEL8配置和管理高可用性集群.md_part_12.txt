    Full list of resources:
     smoke-apc      (stonith:fence_apc):    Started z1.example.com
     Clone Set: locking-clone [locking]
         Resource Group: locking:0
             dlm    (ocf::pacemaker:controld):      Started z2.example.com
             lvmlockd       (ocf::heartbeat:lvmlockd):      Started z2.example.com
         Resource Group: locking:1
             dlm    (ocf::pacemaker:controld):      Started z1.example.com
             lvmlockd       (ocf::heartbeat:lvmlockd):      Started z1.example.com
         Started: [ z1.example.com z2.example.com ]
     Clone Set: shared_vg1-clone [shared_vg1]
         Resource Group: shared_vg1:0
             sharedlv1      (ocf::heartbeat:LVM-activate):  Started z2.example.com
             sharedlv2      (ocf::heartbeat:LVM-activate):  Started z2.example.com
             sharedfs1      (ocf::heartbeat:Filesystem):    Started z2.example.com
             sharedfs2      (ocf::heartbeat:Filesystem):    Started z2.example.com
         Resource Group: shared_vg1:1
             sharedlv1      (ocf::heartbeat:LVM-activate):  Started z1.example.com
             sharedlv2      (ocf::heartbeat:LVM-activate):  Started z1.example.com
             sharedfs1      (ocf::heartbeat:Filesystem):    Started z1.example.com
             sharedfs2      (ocf::heartbeat:Filesystem):    Started z1.example.com
         Started: [ z1.example.com z2.example.com ]
     Clone Set: shared_vg2-clone [shared_vg2]
         Resource Group: shared_vg2:0
             sharedlv3      (ocf::heartbeat:LVM-activate):  Started z2.example.com
             sharedfs3      (ocf::heartbeat:Filesystem):    Started z2.example.com
         Resource Group: shared_vg2:1
             sharedlv3      (ocf::heartbeat:LVM-activate):  Started z1.example.com
             sharedfs3      (ocf::heartbeat:Filesystem):    Started z1.example.com
         Started: [ z1.example.com z2.example.com ]
    ...
    ```
:::
::: itemizedlist
**其它资源**
-   [在 Microsoft Azure
    上配置红帽高可用性集群](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/deploying_red_hat_enterprise_linux_8_on_public_cloud_platforms/configuring-rhel-high-availability-on-azure_cloud-content){.link}
-   [在 AWS
    上配置红帽高可用性集群](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/deploying_red_hat_enterprise_linux_8_on_public_cloud_platforms/configuring-a-red-hat-high-availability-cluster-on-aws_deploying-a-virtual-machine-on-aws){.link}
-   [在 Google Cloud Platform
    上配置红帽高可用性集群](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/deploying_red_hat_enterprise_linux_8_on_public_cloud_platforms/configuring-rhel-ha-on-gcp_deploying-a-virtual-machine-on-aws){.link}
-   [在 Alibaba Cloud
    中为红帽高可用性集群配置共享块存储](https://access.redhat.com/articles/5371181){.link}
:::
:::
::: section
::: titlepage
# []{#assembly_configuring-gfs2-in-a-cluster-configuring-and-managing-high-availability-clusters.html#proc_configuring-encrypted-gfs2.adoc-configuring-gfs2-cluster}在集群中配置加密的 GFS2 文件系统 {.title}
:::
（RHEL 8.4 及更新的版本）这个步骤会创建一个 Pacemaker 集群，其中包含一个
LUKS 加密的 GFS2 文件系统。这个示例在逻辑卷中创建了一个 GFS2
文件系统并加密文件系统。使用 `crypt`{.literal} 资源代理支持加密的 GFS2
文件系统，该代理提供对 LUKS 加密的支持。
此流程有三个部分：
::: itemizedlist
-   在 Pacemaker 集群中配置共享逻辑卷
-   加密逻辑卷并创建 `加密`{.literal} 资源
-   使用 GFS2 文件系统格式化加密逻辑卷并为集群创建文件系统资源
:::
::: section
::: titlepage
## []{#assembly_configuring-gfs2-in-a-cluster-configuring-and-managing-high-availability-clusters.html#_configure_a_shared_logical_volume_in_a_pacemaker_cluster}在 Pacemaker 集群中配置共享逻辑卷 {.title}
:::
::: itemizedlist
**先决条件**
-   在所有节点上安装并启动群集软件，并创建一个基本的双节点群集。
-   为群集配置隔离。
:::
有关创建 Pacemaker 集群并为集群配置隔离的详情，请参考使用 [Pacemaker
创建红帽高可用性集群](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_high_availability_clusters/assembly_creating-high-availability-cluster-configuring-and-managing-high-availability-clusters){.link}。
::: orderedlist
**流程**
1.  在集群中的两个节点上，启用与您的系统架构对应的弹性存储存储库。例如，要为
    x86_64 系统启用 Resilient Storage 仓库，您可以输入以下
    `subscription-manager`{.literal} 命令：
    ``` literallayout
    # subscription-manager repos --enable=rhel-8-for-x86_64-resilientstorage-rpms
    ```
    请注意，弹性存储存储库是高可用性存储库的超集。如果启用弹性存储存储库，则不需要启用高可用性存储库。
2.  在群集的两个节点上，安装
    `lvm2-lockd`{.literal}、`gfs2-utils`{.literal} 和 `dlm`{.literal}
    软件包。要支持这些软件包，您必须订阅 AppStream 频道和 Resilient
    Storage 频道。
    ``` literallayout
    # yum install lvm2-lockd gfs2-utils dlm
    ```
3.  在群集的两个节点上，将
    `/etc/ lvm/lvm.conf 文件中的 use_lvm`{.literal}
    lockd``{=html} 配置选项设置为 `use_lvmlockd=1`{.literal}。
    ``` literallayout
    ...
    use_lvmlockd = 1
    ...
    ```
4.  将全局 Pacemaker 参数 `no-quorum-policy`{.literal} 设置为
    `冻结`{.literal}。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    默认情况下，no `-quorum-policy`{.literal} 的值被设置为
    `stop`{.literal}，这表示一旦 quorum
    丢失，剩余分区上的所有资源都会立即停止。通常，这个默认行为是最安全、最优的选项，但与大多数资源不同，GFS2
    要求使用 quorum 才可以正常工作。当使用 GFS2 挂载的应用程序和 GFS2
    挂载都丢失时，就无法正确停止 GFS2 挂载。任何在没有 quorum
    的情况下停止这些资源的尝试都会失败，并最终会在每次 quorum
    都丢失时保护整个集群。
    要解决这个问题，请在使用 GFS2 `时将 no-quorum-policy`{.literal}
    设置为 `冻结`{.literal}。这意味着，当 quorum
    丢失时，剩余的分区将不会进行任何操作，直到 quorum 功能被恢复。
    :::
    ``` literallayout
    # pcs property set no-quorum-policy=freeze
    ```
5.  设置 `dlm`{.literal} 资源。这是在集群中配置 GFS2
    文件系统所需的依赖软件包。本例创建 `dlm`{.literal} 资源作为名为
    `locking`{.literal} 的资源组的一部分。
    ``` literallayout
    [root@z1 ~]# pcs resource create dlm --group locking ocf:pacemaker:controld op monitor interval=30s on-fail=fence
    ```
6.  克隆 `锁定`{.literal}
    资源组，以便资源组可以在集群的两个节点上都活跃。
    ``` literallayout
    [root@z1 ~]# pcs resource clone locking interleave=true
    ```
7.  将 `lvmlockd`{.literal} 资源设置为组 `锁定`{.literal} 的一部分。
    ``` literallayout
    [root@z1 ~]# pcs resource create lvmlockd --group locking ocf:heartbeat:lvmlockd op monitor interval=30s on-fail=fence
    ```
8.  检查集群的状态，以确保在集群的两个节点上启动了 `锁定`{.literal}
    资源组。
    ``` literallayout
    [root@z1 ~]# pcs status --full
    Cluster name: my_cluster
    [...]
    Online: [ z1.example.com (1) z2.example.com (2) ]
    Full list of resources:
     smoke-apc      (stonith:fence_apc):    Started z1.example.com
     Clone Set: locking-clone [locking]
         Resource Group: locking:0
             dlm    (ocf::pacemaker:controld):      Started z1.example.com
             lvmlockd       (ocf::heartbeat:lvmlockd):      Started z1.example.com
         Resource Group: locking:1
             dlm    (ocf::pacemaker:controld):      Started z2.example.com
             lvmlockd       (ocf::heartbeat:lvmlockd):      Started z2.example.com
         Started: [ z1.example.com z2.example.com ]
    ```
9.  在集群的一个节点中创建一个共享卷组。
    以下命令在 `/dev/sda 1 上创建共享卷组 shared_vg`{.literal}
    1``{=html}。
    ``` literallayout
    [root@z1 ~]# vgcreate --shared shared_vg1 /dev/sda1
      Physical volume "/dev/sda1" successfully created.
      Volume group "shared_vg1" successfully created
      VG shared_vg1 starting dlm lockspace
      Starting locking.  Waiting until locks are ready...
    ```
10. 在集群的第二个节点中，启动共享卷组的锁定管理器。
    ``` literallayout
    [root@z2 ~]# vgchange --lock-start shared_vg1
      VG shared_vg1 starting dlm lockspace
      Starting locking.  Waiting until locks are ready...
    [root@z2 ~]# vgchange --lock-start shared_vg2
      VG shared_vg2 starting dlm lockspace
      Starting locking.  Waiting until locks are ready...
    ```
11. 在集群的一个节点中，创建共享逻辑卷。
    ``` literallayout
    [root@z1 ~]# lvcreate --activate sy -L5G -n shared_lv1 shared_vg1
      Logical volume "shared_lv1" created.
    ```
12. 为逻辑卷创建一个
    `LVM 激活资源`{.literal}，以便在所有节点上自动激活逻辑卷。
    以下命令在卷组 shared\_ `vg1 中为逻辑卷 shared _lv1`{.literal}
    创建名为 sharedlv1``{=html}
    `的 LVM 激活资源`{.literal}。``{=html}此命令还会创建包含该资源的资源组
    `shared_vg1`{.literal}。在这个示例中，资源组的名称与包含逻辑卷的共享卷组的名称相同。
    ``` literallayout
    [root@z1 ~]# pcs resource create sharedlv1 --group shared_vg1 ocf:heartbeat:LVM-activate lvname=shared_lv1 vgname=shared_vg1 activation_mode=shared vg_access_mode=lvmlockd
    ```
13. 克隆新资源组。
    ``` literallayout
    [root@z1 ~]# pcs resource clone shared_vg1 interleave=true
    ```
14. 配置排序限制，以确保首先启动包含 `dlm`{.literal} 和
    `lvmlockd`{.literal} 资源的 `锁定`{.literal} 资源组。
    ``` literallayout
    [root@z1 ~]# pcs constraint order start locking-clone then shared_vg1-clone
    Adding locking-clone shared_vg1-clone (kind: Mandatory) (Options: first-action=start then-action=start)
    ```
15. 配置共存限制，以确保 `vg1`{.literal} 和 `vg2`{.literal} 资源组在与
    `锁定`{.literal} 资源组相同的节点上启动。
    ``` literallayout
    [root@z1 ~]# pcs constraint colocation add shared_vg1-clone with locking-clone
    ```
:::
::: title
**验证步骤**
:::
在集群的两个节点上，验证逻辑卷是否活跃。这可能会延迟几秒钟。
``` literallayout
[root@z1 ~]# lvs
  LV         VG          Attr       LSize
  shared_lv1 shared_vg1  -wi-a----- 5.00g
[root@z2 ~]# lvs
  LV         VG          Attr       LSize
  shared_lv1 shared_vg1  -wi-a----- 5.00g
```
:::
::: section
::: titlepage
## []{#assembly_configuring-gfs2-in-a-cluster-configuring-and-managing-high-availability-clusters.html#_encrypt_the_logical_volume_and_create_a_crypt_resource}加密逻辑卷并创建加密资源 {.title}
:::
::: itemizedlist
**先决条件**
-   您已在 Pacemaker 集群中配置了共享逻辑卷。
:::
::: orderedlist
**流程**
1.  在集群的一个节点中，创建一个新文件，该文件将包含加密密钥并设置文件的权限，以便仅可由
    root 用户读取。
    ``` literallayout
    [root@z1 ~]# touch /etc/crypt_keyfile
    [root@z1 ~]# chmod 600 /etc/crypt_keyfile
    ```
2.  创建加密密钥。
    ``` literallayout
    [root@z1 ~]# dd if=/dev/urandom bs=4K count=1 of=/etc/crypt_keyfile
    1+0 records in
    1+0 records out
    4096 bytes (4.1 kB, 4.0 KiB) copied, 0.000306202 s, 13.4 MB/s
    [root@z1 ~]# scp /etc/crypt_keyfile PI:EMAIL:/etc/
    ```
3.  使用 `-p`{.literal} 参数将 crypt keyfile
    分发到集群中的其他节点，以保留您设置的权限。
    ``` literallayout
    [root@z1 ~]# scp -p /etc/crypt_keyfile PI:EMAIL:/etc/
    ```
4.  在您将在其中配置加密 GFS2 文件系统的 LVM 卷中创建加密设备。
    ``` literallayout
    [root@z1 ~]# cryptsetup luksFormat /dev/shared_vg1/shared_lv1 --type luks2 --key-file=/etc/crypt_keyfile
    WARNING!
    ========
    This will overwrite data on /dev/shared_vg1/shared_lv1 irrevocably.
    Are you sure? (Type 'yes' in capital letters): YES
    ```