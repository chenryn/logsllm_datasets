Figure 2: The interlinked blockchain. Each superblock is
drawn taller according to its level. A new block links to all
previous blocks that have not been overshadowed by higher
levels in the meantime.
Selecting the samples. Our sampling will be performed by only
keeping sufficiently high-level superblocks and throwing away blocks
of low levels. We will keep very high levels (so, very few blocks)
near genesis and far back in history. As we get closer to the present,
we will start including more and more samples, and so the thresh-
old in our superblock level will decrease. Near the tip (the most
recent block) of the blockchain, we will eventually get down to
level 0 and keep all blocks.
The samples that we keep will evolve as the blockchain grows. A
sample that was once selected for inclusion may be thrown away
later. However, any sample that is thrown away at some point will
never again be needed in the future. This property, of ensuring
that the sampling is safe and that no samples discarded will be
needed again in the future, is the online property of our protocol.
It will eventually allow us to build a protocol where no full chain
is needed, anywhere.
Our algorithm is parametrized by a security (or, inversely, com-
pression) parameter 𝑚 and the common prefix parameter 𝑘 (these
can be unified by conservatively setting 𝑚 = 3𝑘). Given a chain C
that we wish to compress, first, we keep the most recent 𝑘 blocks
aside, and let us call them 𝜒. These are unstable and will need to
always be stored. Besides, any miner that wishes to synchronize
with us will need to look at them to arrive at a valid snapshot. For
the next part, we only consider the stable part of the chain. For
our sampling process, we begin by the highest level ℓ that has at
least 2𝑚 blocks in it. We will include this level in earnest: All ℓ-
superblocks will be included in our sampling. For every level below
ℓ, we will include at least the 2𝑚 most recently generated blocks of
that level, but occassionally more. To consider whether to include
0000000221111343Session 12D: Decentralized Cryptographic ProtocolsCCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3491more blocks than 2𝑚 blocks in a level 𝜇, we look at the 𝑚th most
recent block 𝑏 in the level 𝜇 + 1 immediately above. We include all
𝜇-superblocks that are more recent than block 𝑏. Let us make this
description more precise by writing it out in pseudocode.
Notation. We will need some notation to describe our chain com-
pression algorithm. Let C denote an interlinked chain of blocks and
C[𝑖] denote its 𝑖th (zero-based) element. We denote by C[𝑖:𝑗] the
blocks from the 𝑖th (inclusive) to the 𝑗𝑡ℎ block (exclusive). Omit-
ting 𝑖 means taking the chain from the beginning, and omitting 𝑗
means taking the chain to the end. For example, C[:128] means
the chain from the beginning up to its 128th element. If 𝑖 and 𝑗
are replaced by blocks 𝐴 and 𝑍, instead of block indices, we write
C{𝐴:𝑍} to designate the blocks of C from block 𝐴 (inclusive) to
block 𝑍 (exclusive), and again any end can be omitted. A negative
𝑖 or 𝑗 means to take blocks from the end instead of from the begin-
ning, so C[−1] is the tip. We write 𝐴 ∈ C to mean that the block
𝐴 is in the chain C, and C1 ⊆ C2 to mean that all of C1’s blocks
are in C2. We write C↑𝜇 to mean the subsequence of C containing
only its 𝜇-superblocks (by the above definition, the C↑ operator is
absolute: (C↑𝜇)↑𝜇+𝑖 = C↑𝜇+𝑖). Because C is interlinked, C↑𝜇 will be
a chain, too (links will exist between consecutive elements). Given
two chains C1 and C2 we write C1 ∪C2 to denote the chain consist-
ing of all blocks in either, and C1∩C2 to mean the chain consisting
of blocks only in both. Similarly we denote C1 \ C2 the chain con-
sisting of blocks in C1 but not in C2. The blocks must be ordered
chronologically and interlink pointers must be checked to ensure
that the union, intersection, and subtraction of chains is a chain
— they will not always be. The chain filtering operators ↑, [·], and
{·} have a higher precedence than ∪,∩,\. We use juxtaposition no-
tation to append one chain to another: C1C2 means the big chain
obtained by taking all the blocks in C1 first and then all the blocks
in C2. For this to be valid, C2[0] must include a pointer to C1[−1].
We use the similar notation C𝑏 to mean the block 𝑏 appended to
the end of the chain C to obtain a chain with one more block. Again
𝑏 must include a pointer to C[−1].
The compression algorithm. Our chain compression algorithm
Compress𝑚,𝑘(C) is illustrated in Algorithm 2. It uses the helper
function Dissolve𝑚,𝑘(C) to obtain the highest level ℓ, the unstable
suffix 𝜒 and a set D[𝜇] of blocks sampled from the stable part of
the chain at each level 𝜇 ≤ ℓ. All of these levels are combined into
a big chain 𝜋, which is sparse at the beginning and dense towards
the end. The final compressed state consists of 𝜋, the stable part,
and 𝜒, the unstable part. This big sequence 𝜋 𝜒 forms a chain, as
𝜒[0] points to 𝜋[−1]. Let us now examine the inner workings of
Dissolve𝑚,𝑘(C). This function separates the stable part C∗ of the
chain and the unstable part 𝜒. In the trivial case that our stable
chain has no more than 2𝑚 blocks, all of them are included. Oth-
erwise, the highest level ℓ with at least 2𝑚 blocks is extracted and
included in earnest. Then, the levels are traversed downwards. For
every level 𝜇, the last 2𝑚 blocks are always included. This is cap-
tured by the term C∗↑𝜇 [−2𝑚:]. Additionally, we look at the 𝑚th
most recent block 𝑏 from the end at level 𝜇+1, that is C∗↑𝜇+1 [−𝑚].
For level 𝜇, we also include all the blocks succeeding 𝑏, that is
C∗↑𝜇 {𝑏:}.
It may not yet be clear why this selection of block headers will
lead to a secure protocol, but let us argue that this sampling is
polylogarithmic in |C|, considering that 𝑚 and 𝑘 are constants that
do not grow as the execution progresses.
𝑏 ← C∗↑𝜇+1 [−𝑚]
D[𝜇] ← C∗↑𝜇 [−2𝑚:] ∪ C∗↑𝜇 {𝑏:}
C∗ ← C[: − 𝑘]
D ← ∅
if |C∗| ≥ 2𝑚 then
ℓ ← max{𝜇 : |C∗↑𝜇 | ≥ 2𝑚}
D[ℓ] ← C∗↑ℓ
for 𝜇 ← ℓ − 1 down to 0 do
Algorithm 2 Chain compression algorithm for transitioning a full
miner to a logspace miner. Given a full chain, it compresses it into
logspace state.
1: function Dissolve𝑚,𝑘(C)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16: end function
17: function Compress𝑚,𝑘(C)
18:
19:
return 𝜋 𝜒
20:
21: end function
(D, ℓ, 𝜒) ← Dissolve𝑚,𝑘(C)
else
end for
D[0] ← C∗
end if
𝜒 ← C[−𝑘:]
return (D, ℓ, 𝜒)
𝜋 ←∪ℓ
𝜇=0 D[𝜇]
Theorem 3.1 (Succinctness). The construction of Algorithm 2
samples a polylogarithmic number of blocks with respect to the length
of the chain C.
Sketch. Firstly, the number ℓ of levels of interest is Θ(log |C|).
Next, each level 𝜇 has either 2𝑚 blocks or more. 2𝑚 is a constant, so
this is irrelevant. But the more blocks cannot be many more either:
We are counting the 𝜇-superblocks following the 𝑚th most recent
block 𝑏 at the level 𝜇 + 1 above. How many can these be? They are
indeed about 2𝑚. Because suppose for contradiction that they were
many more than 2𝑚. But every block of level 𝜇 has a 1
2 probability
of also being a 𝜇+1 level block. If there were, say, 4𝑚 instead of 2𝑚
superblocks of level 𝜇 following block 𝑏, then 𝑏 would not be the
𝑚th block from the end, but the 2𝑚th one! With high probability
(with foresight, utilizing a Chernoff bound), 4𝑚 can be taken as an
upper bound. As such, there will be 2𝑚 log(|C|)+𝑘 blocks sampled
in expectation, and, with high probability, not many more.
□
We make this bound and argument more precise in the Analysis
section.
4 FAST SYNCHRONIZATION
We have seen how a full miner can compress their state into a poly-
logarithmic sample 𝜋 𝜒 of blocks. But what is the use of this? We
will now build the other side of the protocol: A node, and future
miner, booting to the network for the first time, but holding only
genesis G. The node is also parametrized by the security parame-
ters 𝑚 and 𝑘. This node wishes to learn where to mine.
Session 12D: Decentralized Cryptographic ProtocolsCCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3492For now, let us assume that the rest of the network consists of
full miners, and only one node is a light node. The first step of
the neophyte is to determine what the current tip and snapshot are.
The light miner can then start mining on top of that tip, extending
its application data snapshot. It does not need to know the blocks
preceding the tip! Of course, this node will not be helpful towards
bootstrapping yet more nodes, but no matter — it can still mine as
if it were a full miner, and just as securely, as long as the tip can be
correctly discerned.
The protocol works as follows. Initially, the newly booting node,
which we call a verifier in this context, connects to multiple full
nodes, which we call the provers. We assume at least one of the
provers is honest (this is a standard assumption in the analysis of
all blockchain protocols [20–23, 44]). Each of these full nodes com-
presses their state using Algorithm 2 and sends the compressed
state, or proof Π = 𝜋 𝜒, to the verifier. More concretely, the full
node sends the block headers corresponding to the blocks in 𝜋
(of size 𝑐 · 𝑝𝑜𝑙𝑦 log(𝑛)). For the blocks in 𝜒, the full node sends
the whole application snapshot (of size 𝑎) stored in 𝜒[−𝑘] and the
transactions (of size 𝑘𝛿) stored in 𝜒. Naturally, the adversary can
send any string as a claimed proof. The verifier checks that Π forms
a chain, i.e., that all blocks are connected with interlinks and so
they have been produced in the chronological order presented, and
also that the first block in Π is the genesis block G that it knows. It
then extracts the last 𝑘 blocks as 𝜒 and the rest as 𝜋. It inspects
the application data snapshot from 𝜒[−𝑘] and ensures that the
transactions in 𝜒 can be cleanly applied. This allows it to obtain
the application state at the end of 𝜋 𝜒, which, in honest cases, is
the same as the application snapshot at the end of the underlying
blockchain. If any of these checks fail, the particular connection is
considered compromised and closed.
The verifier receives and verifies a series of such proofs, each
consisting of a stable part 𝜋 and an unstable part 𝜒, with |𝜒| = 𝑘.
Given multiple such proofs Π1, Π2, · · · , Π𝑣, the prover begins in-
specting the proofs and comparing one against the other in a pair-
wise fashion. First, Π1 is compared against Π2, and one of them
is deemed to be the best (using a mechanism we will soon study).
The process continues until only one of them remains. As long as
at least one proof was honestly generated, our protocol will arrive
at a suffix 𝜒 that is admissible. This means that our light node will
arrive at a snapshot which a full node miner booting for the first
time from genesis could also have arrived at. Upon taking this de-
cision, the light miner stores 𝜋 𝜒 in its state.
The light miner can then start mining on top of 𝜒[−1] to pro-
duce further blocks and to fully verify the validity of incoming
network transactions in its mempool. After all, it is holding onto
an application snapshot. These blocks can be broadcast to the net-
work and will be accepted by the rest of the miners, despite our
light miner not holding the full chain leading from genesis up to
the newly mined block. The light miner can also understand and
verify newly mined blocks of others. It can also deal with chain
reorganizations: In case a reorganization of up to 𝑘 blocks occurs,
the light miner holds the whole of 𝜒 and can verify the state transi-
tions completely. As for reorganizations of more than 𝑘 blocks long,
these will never occur (except with negligible probability) due to
the Common Prefix property [21].
As this miner is not interested in helping bootstrap others, it
can even throw away 𝜋 once it has booted up. Furthermore, every
time a new block is mined (either by itself or by someone else), it
can append it to 𝜒 and then truncate 𝜒 to only keep the 𝑘 most
recent blocks. However, in the full protocol, described in the next
section, the miner will need to hold on to (and update) 𝜋 to allow
others to bootstrap.
if Π is not valid then
return Π′
end if
if Π′ is not valid then
return Π
end if
(𝜒, ℓ, D) ← Dissolve𝑚,𝑘(Π)
(𝜒′, ℓ′, D′) ← Dissolve𝑚,𝑘(Π′)
𝑀 ← {𝜇 ∈ N : D[𝜇] ∩ D′[𝜇] ≠ ∅}
if 𝑀 = ∅ then
Algorithm 3 The state comparison algorithm.
1: function maxvalid𝑚,𝑘(Π, Π′)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
end if