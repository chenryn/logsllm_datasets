### Verification and Key Management

Upon successful verification of the secret, the server responds to the n-Auth device with information that enables it to compute a series of symmetric keys. These keys are designed to be forgotten over time. The n-Auth device can then use these symmetric keys to decrypt private keys stored in its encrypted database. If a symmetric key is no longer available on the device when access to a private key is needed, the user will be prompted to re-enter their secret for online verification. The server can set these timeouts, which can be quite long depending on the application, or even infinite for servers that do not require two-factor authentication.

### Future-Proofing

A critical aspect of designing cryptographic protocols for n-Auth is ensuring algorithm and key agility. It is likely that certain algorithms will need to be replaced or key sizes increased due to security considerations. Keys will also need to be changed, regardless of algorithm changes.

#### Algorithm Agility

Popular cryptographic protocols (e.g., SSL/TLS) allow for negotiation of parameters, which is great for backward compatibility but comes with the risk of an adversary negotiating both parties into using the weakest protocol parameters. To mitigate this, we have opted for a different approach by strictly limiting the number of protocol parameters. Essentially, we aim to allow only one protocol and associated parameters that meet all security requirements. We permit multiple (in this case, two) parameter sets to enable fast upgrading if a cipher or protocol is compromised.

We distinguish between temporary and permanent parameters. Temporary parameters, set by the server, include the hash function, elliptic curve, and key derivation function for key agreement, as well as the authenticated encryption scheme. Permanent parameters define the signature scheme. For both, we define two versions: one for initial use and one for future migration to more secure parameters. There is no intent to maintain an extensive list of broken parameters for backward compatibility.

The server determines the version of the temporary parameters (tVersion), and there is no room for negotiation on the n-Auth device side. This allows for rapid migration of temporary parameters, as no long-term keys are involved. The n-Auth device should reject weak temporary parameters. The version of the temporary parameters is included in the SCD message sent to the n-Auth device.

For permanent parameters, a similar approach is desirable, but long-term keys make instantaneous upgrades impossible. Using the SCD message, the server indicates the preferred permanent parameter set. During the transition period, the n-Auth device can set the permanent version (pVersion) to the previous version. Once the transition period ends, users will be forced to create a new account if they have not upgraded.

To implement this, the handshake to set up a secure connection is augmented as follows:
1. The n-Auth device sends the version of the permanent parameters along with its first message to the server (DS1).
2. Upon receiving DS1, the server sets tVersion and checks if the received pVersion is allowed; otherwise, it aborts.
3. In SD2, the server signs (SERV_AUTH, A, B, pVersion, tVersion).
4. In DS3, the n-Auth device signs (type, A, B, pVersion, tVersion).

These modifications prevent man-in-the-middle attackers from exploiting a version mismatch between the n-Auth device and the server.

Immediately after the handshake, the server requests the n-Auth device to update its key according to the new version. This is done by sending a MSG with type UPGRADE and a signature with the server’s new public key (suitable for the new version) on (UPGRADE, A, B, pVersion, tVersion). The n-Auth device retrieves the server’s new public key and validity period by requesting the server parameters through a separate I N IT message (see Section 3.3).

The n-Auth device generates a new key pair and makes a new entry in its database using the received parameters and server public key. The n-Auth device then sends a MSG to the server of type UPDATE with its new public key(s) and signatures with the new authentication private key(s) on (UPDATE, A, B, pVersion, tVersion). Upon validating the signature, the server updates its database by overwriting the existing entry for this user. From this point, the n-Auth device can no longer authenticate to the server using the previous pVersion, even if the transition period is still active. The server sends a confirmation (MSG of type CONFIRM_UPDATE) to the n-Auth device, which can now remove the old account from its database.

#### Key Agility

A similar protocol is used for the server to update its public key without migrating to a new version of algorithm parameters. This allows the server to update its key before it expires or replace it if there is doubt about the private key being compromised.

During the transition period, the server sends two signatures in SD2: one with the new key and one with the old key. The n-Auth device first attempts to validate the first signature (new key). If this fails, it tries the second signature (old key). If both signatures fail, the connection is terminated. If the first signature fails and the second verifies, the n-Auth device requests the new server parameters (by sending a separate I N IT message) and checks the first signature using the new public key of the server. If the first signature verifies, the n-Auth device updates the selected account in its database. Even if the first signature does not verify, the n-Auth device continues by sending DS3 but does not update its database.

### Implementation

#### User Interface

In this section, we describe the design choices for the implementation of the user interface, different smartphone operating systems, and other technical details of n-Auth.

##### User Interaction and HCI Design Principles

Molich and Nielsen [16] provided ten usability recommendations, including the need for consistency and error prevention. The n-Auth device offers a single button to start the authentication process. Clicking this button activates the camera to capture a 2D visual code.

The principle of psychological acceptability [20] implies that the user interface must be designed with the user's mental models in mind. Yee’s key principles for secure interaction design [27] require explicit authorization and visibility of all active sessions. After scanning a code, the user is presented with a confirmation screen before the n-Auth device authenticates to the server (step 3a in Figure 1). Different confirmation screens are shown based on the purpose (see Figures 3b, 4a, and 4b).

For logging in, the user confirms their login by selecting the desired account (Figure 3b). Visibility of all active sessions means the user can see which servers they are currently logged into and log out (Figure 3d). Logging out is done by swiping a label off the screen to avoid accidental taps. A helper text is displayed the first time the user logs in.

Open registrations are assumed, where creating a new account starts from within the client. The user enters basic account information, such as a username, and is then shown a visual code to scan with the n-Auth device. This code contains the necessary server parameters and the selected username. On the n-Auth device, the user confirms the creation of a new account. The confirmation screen displays the server’s logo and URL to help establish context. The server parameters are verified by comparing the displayed visual hash with the server’s reference image (Figure 4a). If the user already has accounts at the same server, the n-Auth device checks that the received server parameters match those of the existing accounts, presenting a different screen (Figure 4b).

#### Smartphone Specifics

Given that most smartphones run on Android or iOS, we developed an application for these platforms. The n-Auth application is freely available through the Google Play Store and Apple iTunes Store, making it easy to install, even for less tech-savvy users.

The n-Auth application respects user privacy by requiring minimal permissions (networking and camera) and not profiling the device or user beyond the device model. When browsing on the same device, data from the visual code can be transferred directly to the n-Auth application. Clicking the visual code opens the n-Auth application, performs the authentication, and returns to the mobile browser. The n-Auth application runs in the background, indicated by an icon in the notification bar (Android only) (Figure 5a). This icon is visible as long as the user is logged in, adhering to Yee’s principle of visibility of all active sessions. From the notification drawer (Figure 5b), the user can manage active sessions.

#### Technical Details

The n-Auth server is implemented as a RESTful API for easy integration with the application backend server. The n-Auth server handles user coupling, communication with the n-Auth device, and open sessions. Through the API, the backend server can check if a user is logged in for a specific session identifier. A developer web portal is available for setting up and testing server instances, though this is on a shared server and loses the No-Trusted-Third-Party benefit.

For mobile browsing, we implemented direct links on visual codes in the HTML source and ensured the n-Auth application listens for Intents. This allows the user to click on the visual code to launch the n-Auth application and pass the necessary data to start authentication.

All protocol messages are encapsulated using Google Protocol Buffers and sent over a plain HTTP connection between the n-Auth device and the Java application. HTTP was chosen for simplicity and ease of passing through firewalls. This requires all protocol round-trips to be initiated by the n-Auth device and use a connection identifier, which is the Diffie-Hellman key B. For efficiency, a dedicated, permanent TCP connection is preferred, and in case of connection loss, it can be recovered using B.

Cryptographic operations are implemented using the NaCl library, which is efficient and has constant-time implementations. The elliptic curve Curve25519 is used for its security advantages over NIST curves. We use the Ed25519 signature scheme, which is less vulnerable to secret key leakage compared to ECDSA. For authenticated encryption, we use secret_box, combining the stream cipher xsalsa20 and a one-time MAC function poly1305.

The client’s database locking mechanism uses a 4-digit PIN, excluding the 20 most commonly chosen PINs to reduce the success probability of an attacker guessing the PIN. This mechanism is optional per account, depending on the server’s needs. The server implements a lock-out mechanism after three consecutive failed PIN verifications, preventing the device from unlocking the database. The default PIN timeout is 2 minutes, meaning the user is not prompted for the PIN if the last input was less than 2 minutes ago.

A login (excluding user interactions) and the database unlocking mechanism take approximately 0.4 seconds on average (tested on various Android devices). This time is mainly dominated by communication with the server, depending on the wireless connection (WIFI, 3G, 4G). Communication between the n-Auth device and the server is in the order of kilobytes. Enrolment takes slightly longer, mainly due to the transfer of the server logo.

### Preliminary User Study

To evaluate the usability of n-Auth, we conducted a survey via a website: https://www.n-auth.com/survey/. Participants were asked to log in daily using n-Auth over two weeks, answering a new set of short questions each day on authentication and the n-Auth application.

Participants downloaded the n-Auth app from the official store and created an account, randomly assigned to either a group requiring a PIN code or a group not requiring a PIN code.

The questionnaire was provided in Finnish, with translations in English in Appendix A. The study was conducted online, with participants recruited through the Owela platform and student associations. Participants could win 2 movie tickets (12 in total) if they participated for at least 6 days. Daily email reminders were available upon opt-in.

Limitations of the study include:
1. No interviews with participants, only ad hoc email conversations for troubleshooting.
2. Only age groups were collected as demographic information.
3. Participants logged into a new service, not a familiar one.
4. The study was conducted for a single website, not showcasing n-Auth’s full potential.

Results of the usability study are in Appendix B. Note that the preliminary study, with 24 participants, is indicative but not statistically significant.

### Comparison to Pico

The Pico concept has evolved since its initial publication [22]. To bootstrap the Pico ecosystem, a smart card-based solution was introduced.