如果没有自定义拷贝构造函数，则系统会自动生成一个拷贝构造函数，用于将对象的数据成员一一赋
值。
如果类中有指针类型，调用默认拷贝构造函数可能会报错。
调用拷贝构造函数的三种清空
1. 用类中的一个对象初始化另一个对象时
2. 函数的形参是对象时
3. 当函数的返回值时对象时
此时，函数执行结束后会将数值存到临时对象里，用于接收返回值对象的赋值，赋值完成后，临时
对象也会消失
静态成员
用于实现一个类中各个对象之间的的成员共享，C++提出了静态成员的概念
静态数据成员
将类内的数据成员定义前面加上 static ，则定义为静态数据成员
静态数据成员相当于类内的“全局变量”
初始化需要在类外单独进行，通过 类型 类名：：变量名 来进行访问
公有的静态数据成员可通过 ：： 来访问，也可通过对象访问，私有的静态数据成员只能通过公有的成员
函数进行访问。
静态成员函数
将类内的成员函数原型声明前面加上 static ，则定义为静态成员函数
是类中所有对象的共享函数，用于访问静态数据成员
私有静态成员函数不能做类外的函数和对象访问
可以用在定义对象之前调用，处理静态数据成员
编译系统将静态成员函数限定为内部连接
静态成员函数没有this指针，如果用来访问非静态成员，可以通过将目标的引用作为参数输入
示例
运行结果：
3
6
9
#include
#include
using namespace std;
class stu_information {
public:
    stu_information(string name, float score);
友元
    void show();
    static void showall();
private:
    string name;//名字
    float score;//分数
    static float average_sum;//平均分数
    static int count;//人数
    static float sum;//分总和
};
stu_information::stu_information(string name1, float score1) {
    name = name1;
    score = score1;
    count++;
    sum += score;
    average_sum = sum / count;
}
void stu_information::show() {
    cout show();
    stu_information::showall();
    return 0;
}
运行结果：
----------
总人数：0
平均分：0
----------
张三:88
张四:93
----------
总人数：2
平均分：90.5
----------
友元是用来在类外访问类内的私有部分的辅助手段。
声明了友元函数的类中的数据可以被友元函数访问。
友元函数
友元函数是类外的一个函数，需要在类内函数声明前面加上 friend 来标识，参数接收类的对象，可用
于访问该类的私有数据成员。
一个函数需要访问多个类的时候，友元函数就很方便。
将非成员函数声明成友元函数
将成员函数声明成友元函数
一个类想要通过自己的成员函数访问另一个类的私有数据成员，可通过往另一个类中声明友元函数来实
现。
#include
#include
using namespace std;
class gril {
public:
    gril(string name1, int age1) {
        name = name1;
        age = age1;
    }
    friend void disp(const gril&);//友元函数声明
private:
    string name;
    int age;
};
void disp(const gril& x) {//友元函数定义
    cout 
#include
using namespace std;
class boy;
class gril {
public:
    gril(string name1, int age1) {
        name = name1;
        age = age1;
友元类
类之间也可以做友元，通过 friend 类名 来声明，可以声明在私有部分也可以在公有部分。
一个类作为另一个类的友元，相当与把一个类的成员函数都变成了另一个类的友元函数：
也就是：写friend的地方的成员可以被friend后面跟着的类或函数所访问
说明：
友元关系是单向的，写friend的那个类只能被访问
友元关系不具有传递性，A是B的友元，B是C的友元，A不是C的友元
类的组合
可以用一个类的对象作为另一个类的成员，称为类的组合，内嵌对象称为对象成员，也叫子对象。
对象成员的初始化通过构造函数初始化表来进行（类似于前面提到的成员初始化列表）。
构造函数会依次对成员进行初始化然后再执行函数体内容
    }
    void disp(boy& );//disp为类gril的成员函数
private:
    string name;
    int age;
};
class boy {
public:
    boy(string name1, int age1) {
        name = name1;
        age = age1;
    }
    friend void gril::disp(boy&);//作为boy的友元函数，可以访问boy的私有成员
private:
    string name;
    int age;
};
void gril::disp(boy& x) {   //成员函数声明
    cout 
其中，构造函数：
对象定义：
常类型
常引用
说明引用时前面用const修饰
用于作函数的形参，可以避免对实参的修改
常对象
说明对象时前面用const修饰
数据成员的值在整个生存周期不能被改变，在定义时必须进行初始化
常数据成员
#include
using namespace std;
class sorces {
private:
    float computer;
    float english;
    float math;
public:
    sorces(float c, float e, float m):computer(c),english(e),math(m){}
    void dispc() {
        cout 
#include
using namespace std;
class person {
private:
    string name;
    int age;
protected:
    void setinfo(string name1, int age1) {
        name = name1;
        age = age1;
    }
    void getinfo() {
        cout << "name:" << name << endl;
        cout << "age:" << age << endl;
    }
};
class student :public person {
protected:
    float sorces;
public:
    void setinfo1(string n, int a, float s) {
        setinfo(n, a);//调用基类的函数访问基类的私有成员
派生类的构造函数和析构函数
当基类的构造函数没有参数或者没有显式定义，派生类可以不向基类传递参数，也可以不定义构造函数
派生类的构造函数格式如下：
与使用成员初始化列表初始化类非常相似
当构造函数定义在外部时，类内声明不需要写初始化列表
构造函数与析构函数的执行顺序：
1. 基类的构造函数
2. 派生类的构造函数
3. 派生类对象成员的构造函数
4. 派生类对象成员的析构函数
5. 派生类的析构函数
6. 基类的析构函数
如果派生类的基类也是派生类，每个派生类只需负责其直接提供基类数据成员的初始化
调整基类成员在派生类中访问属性的其他方法
同名成员
在派生类中声明与基类同名的成员会覆盖基类的同名成员
可以通过作用域运算符来访问到基类的同名成员，例如：
        sorces = s;
    }
    void disp() {
        getinfo();//调用基类的函数访问基类的私有成员
        cout << "sorces:" << sorces << endl;
    }
};
int main() {
    student LiHua;
    LiHua.setinfo1("LiHua", 66, 77);
    LiHua.disp();
    return 0;
}
name:LiHua
age:66
sorces:77
派生类名（参数总表）：基类名（参数表）{
    派生类新增的成员的初始化语句
}