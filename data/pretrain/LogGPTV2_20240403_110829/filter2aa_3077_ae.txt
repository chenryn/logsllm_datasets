SCMKit has multiple modules available to perform reconnaissance of repositories, files, 
code, and other resources specific to various SCM systems such as GitLab Runners for 
example. The below example shows using the “codesearch” module in SCMKit. In this 
scenario, we are searching for any code in Bitbucket Server that contains “API_KEY” to 
try and discover API key secrets within source code. 
63 https://github.com/xforcered 
X-Force Red | 3/2/2022 
95 
Code search example for API key with SCMKit 
File reconnaissance can also be performed with SCMKit. In this example, we are 
searching for any files named “Jenkinsfile” to discover any Jenkins CI configuration 
files within GitLab Enterprise. 
X-Force Red | 3/2/2022 
96 
File search example with SCMKit 
There are several other reconnaissance modules that apply only to certain SCM 
systems. For example, there is a reconnaissance module to discover GitLab Runners 
that you have access to via the “runnerlist” module. 
GitLab Runner reconnaissance example with SCMKit 
X-Force Red | 3/2/2022 
97 
PRIVILEGE ESCALATION 
Another capability available in SCMKit is to add another user to the admin role. The 
below example shows adding a regular user under our control (hgranger in this case) 
to the site admin role in GitHub Enterprise via the “addadmin” module. 
Adding site admin example via SCMKit 
You can see the change that took effect in GitHub Enterprise after performing the site 
admin addition via SCMKit, as the hgranger user is now a member of the site admins 
group. 
X-Force Red | 3/2/2022 
98 
Showing hgranger added as site admin 
PERSISTENCE 
There are two persistence modules within SCMKit that include the use of personal 
access tokens or SSH keys. This can be useful to maintain access to an SCM system. 
The below example shows creating an access token for the hgranger user account in 
GitLab Enterprise via the “createpat” module. 
X-Force Red | 3/2/2022 
99 
Creating access token example with SCMKit 
We can list all active access tokens for a given user via the “listpat” module as shown 
below. 
Listing access tokens example with SCMKit 
X-Force Red | 3/2/2022 
100 
Another persistence module available in SCMKit is the creation of SSH keys via the 
“createsshkey” module. In this example, we are adding an SSH key for the hgranger 
user in Bitbucket Server. 
Creating SSH key example with SCMKit 
We can list all active SSH keys for a given user via the “listsshkey” module as shown 
below. 
X-Force Red | 3/2/2022 
101 
Listing SSH keys example with SCMKit 
X-Force Red | 3/2/2022 
102 
Defensive Considerations 
SCMKIT 
There are multiple static signatures that can be used to detect the usage of SCMKit. 
These can be found in the Yara rule on the SCMKit repository.  
A static user agent string is used when attempting each module in SCMKit. The user 
agent string is “SCMKIT-5dc493ada400c79dd318abbe770dac7c”. A Snort rule is 
provided on the SCMKit repository. 
Additionally, any access tokens or SSH keys that are created in SCM systems using 
SCMKit will be prepended with “SCMKit-” in the name as shown below. This can be 
filtered in the respective SCM system to indicate an access token or SSH key was 
created using SCMKit. 
Viewing access token created by SCMKit 
X-Force Red | 3/2/2022 
103 
GITHUB ENTERPRISE 
Ensure that the below logs are being sent to your SIEM. This also lists the location of 
the logs on the GitHub Enterprise server. 
Log Name 
Location 
Audit Log 
/var/log/github-audit.log* 
Management Log 
/var/log/enterprise-manage/unicorn.log* 
HAProxy Log 
/var/log/haproxy.log 
Table of GitHub Enterprise logs of interest 
Below are the various filters you can apply to the logs to detect the attacks 
demonstrated in this whitepaper. Use these filters to build a baseline and detect 
anomalous activity in your environment. 
Attack Scenario 
Log Name 
Search Filter 
Reconnaissance 
HAProxy Log (‘/search’ OR ‘/api/v3/search’) AND ‘http’ 
Repository Takeover Audit Log 
‘action:repo.staff_unlock’ 
User Impersonation 
Audit Log 
‘action:staff.fake_login’ 
OR 
‘action:oauth_access.create’ 
OR 
‘action:oauth_authorization.create’ 
Promoting User to 
Site Admin 
Audit Log 
‘action:user.promote’ 
OR 
‘action:business.add_admin’ 
Maintaining 
Persistent Access 
Audit Log 
‘action:oauth_access.create’ 
OR 
‘action:oauth_authorization.create’ 
OR 
‘action:public_key.create’ 
OR 
action:public_key.verify 
Management 
Console Access 
Management 
Log 
‘authorized-keys’ AND ‘post’ 
X-Force Red | 3/2/2022 
104 
Table of search queries for various attack types 
Additionally, the below items should be considered within GitHub Enterprise: 
• Disable user impersonation 
• Do not allow users to create personal access tokens or SSH keys with no 
expiration date 
• Set automatic expiration date on all personal access tokens and SSH keys 
created/added 
• Limit the number of site admins. At minimum there should be two site admins, 
and should not be more unless necessary 
• Operate on a policy of least privilege in terms of access to repositories 
• Require signed commits via GPG keys or S/MIME certificates 
• Enable MFA for accessing GitHub Enterprise 
• Ensure that code branches are deleted in a timely manner 
• Require at least one approver for each code commit 
X-Force Red | 3/2/2022 
105 
GITLAB ENTERPRISE 
Ensure that the below logs are being sent to your SIEM. This also lists the location of 
the logs on the GitLab Enterprise server. 
Log Name 
Location 
Application Log 
/var/log/gitlab/gitlab-rails/application.log 
/var/log/gitlab/gitlab-rails/application_json.log 
Production Log 
/var/log/gitlab/gitlab-rails/production_json.log 
/var/log/gitlab/gitlab-rails/production.log 
API Log 
/var/log/gitlab/gitlab-rails/api_json.log 
Web Log 
/var/log/gitlab/nginx/gitlab_access.log 
Table of GitLab Enterprise logs of interest 
Below are the various filters you can apply to the logs to detect the attacks 
demonstrated in this whitepaper. Use these filters to build a baseline and detect 
anomalous activity in your environment. 
Attack Scenario 
Log Name 
Search Filter 
Reconnaissance 
Production Log 
API Log 
Web Log 
‘get’ AND ‘/search?search’ 
‘get’ AND ‘/search’ 
‘get’ AND (‘/search’ OR ‘repository/tree’) 
‘search’ 
User Impersonation 
Application Log 
'has started impersonating' 
X-Force Red | 3/2/2022 
106 
Production Log 
API Log 
‘impersonate’ 
‘post’ AND ‘impersonation_tokens’ 
‘impersonation_tokens’ 
Promoting User to 
Admin Role 
Production Log 
API Log 
‘patch’ AND ‘admin/users’ 
‘put’ AND '"key":"admin","value":"true"' 
Maintaining 
Persistent Access 
Production Log 
API Log 
‘post’ AND 'personal_access_tokens' 
‘post’ AND 'profile/keys' 
‘post’ AND ‘personal_access_tokens’ 
‘post’ AND 'user/keys' 
Modifying CI/CD 
Pipeline 
Production Log 
‘post’ AND '/api/graphql' AND '.gitlab-
ci.yml' AND ‘update’ 
Table of search queries for various attack types 
Additionally, the below items should be considered within GitLab Enterprise 
• Disable user impersonation 
• Do not allow users to create personal access tokens or SSH keys with no 
expiration date 
• Set automatic expiration date on all personal access tokens and SSH keys 
created/added 
• Limit the number of users with the admin role. At minimum there should be two 
admins, and should not be more unless necessary 
• Operate on a policy of least privilege in terms of access to projects and 
repositories 
• Require signed commits via GPG keys or S/MIME certificates 
• Enable MFA for accessing GitLab Enterprise 
• Ensure that code branches are deleted in a timely manner 
• Require at least one approver for each code commit 
X-Force Red | 3/2/2022 
107 
BITBUCKET 
Ensure that the below logs are being sent to your SIEM. This also lists the location of 
the logs on the Bitbucket server. This research specifically looked at Bitbucket Server. 
Log Name 
Location 
Access Log 
/var/atlassian/application-
data/bitbucket/log/atlassian-bitbucket-access.log 
Audit Log 
/var/atlassian/application-
data/bitbucket/log/audit/*.log 
Bitbucket Log 
/var/atlassian/application-
data/bitbucket/log/atlassian-bitbucket.log 
Bamboo Log 
$BAMBOO_HOME/logs/atlassian-bamboo.log 
Table of Bitbucket logs of interest 
Below are the various filters you can apply to the logs to detect the attacks 
demonstrated in this whitepaper. Use these filters to build a baseline and detect 
anomalous activity in your environment. 
Attack Scenario 
Log Name 
Search Filter 
Reconnaissance 
Bitbucket 
Log 
‘post’ AND ‘search’ AND ‘query’ 
Promoting User to Site 
Admin 
Access Log 
Audit Log 
‘put’ AND ‘/admin/permissions/users’ 
'new.permission' AND ‘admin’ 
Maintaining Persistent 
Access 
Access Log 
‘put’ AND '/rest/access-tokens' 
‘post’ AND 'ssh/account/keys/add' 
X-Force Red | 3/2/2022 
108 
Audit Log 
‘personal access token created’ 
‘user added ssh access key’ 
Modifying CI/CD Pipeline 
Bamboo 
Log 
‘change detection found’ 
Table of search queries for various attack types 
Additionally, the below items should be considered within Bitbucket. 
• Do not allow users to create personal access tokens or SSH keys with no 
expiration date 
• Set automatic expiration date on all personal access tokens and SSH keys 
created/added 
• Limit the number of system admins. At minimum there should be two system 
admins, and should not be more unless necessary 
• Operate on a policy of least privilege in terms of access to projects and 
repositories 
• Require signed commits via GPG keys or S/MIME certificates 
• Enable MFA for accessing Bitbucket 
• Ensure that code branches are deleted in a timely manner 
• Require at least one approver for each code commit 
• Increase logging level to detect reconnaissance 
X-Force Red | 3/2/2022 
109 
Conclusion 
Source code management systems contain some of the most sensitive information in 
organizations and are a key component in the DevOps lifecycle. Depending on the role 
of an organization, compromise of these systems can lead to the compromise of other 
organizations. These systems are a high value to an attacker, and need more visibility 
from the information security community, as they are currently an afterthought 
compared to other systems such as Active Directory. It is X-Force Red’s goal that this 
whitepaper and research will bring more attention and inspire future research on 
defending these critical enterprise systems. 
X-Force Red | 3/2/2022 
110 
Acknowledgments 
A special thank you to the below people for giving feedback on this research and 
providing whitepaper content review.  
• Chris Thompson (@retBandit) 
• Daniel Crowley (@dan_crowley) 
• Dimitry Snezhkov (@Op_nomad) 
• Patrick Fussell (@capt_red_beardz) 
• Ruben Boonen (@FuzzySec) 
X-Force Red | 3/2/2022 
111 
Appendix A: Table of SCM Attack Scenarios 
The below table summarizes the attack scenarios shown in this whitepaper. 
SCM System 
Attack Scenario 
Sub-Scenario 
GitHub Enterprise 
Reconnaissance 
-Repository 
-File 
-Code 
GitLab Enterprise 
Reconnaissance 
-Repository 
-File 
-Code 
Bitbucket 
Reconnaissance 
-Repository 
-File 
-Code 
GitHub Enterprise 
Maintain Persistent Access 
-Personal Access Token 
-Impersonation Token 
-SSH Key 
GitLab Enterprise 
Maintain Persistent Access 
-Personal Access Token 
-Impersonation Token 
-SSH Key 
Bitbucket 
Maintain Persistent Access 
-Personal Access Token 
-SSH Key 
GitHub Enterprise 
User Impersonation 
-Impersonate User Login 
-Impersonation Token 
GitLab Enterprise 
User Impersonation 
-Impersonate User Login 
-Impersonation Token 
GitHub Enterprise 
Promoting User to Site Admin 
N/A 
GitLab Enterprise 
Promoting User to Admin Role 
N/A 
Bitbucket 
Promoting User to Admin Role 
N/A 
Bitbucket 
Modifying CI/CD Pipeline 
N/A 
GitLab Enterprise 
Modifying CI/CD Pipeline 
N/A 
GitHub Enterprise 
Repository Takeover 
N/A 
GitHub Enterprise 
Management Console Access 
N/A 
GitLab Enterprise 
SSH Access 
N/A 
Table of SCM attack scenarios