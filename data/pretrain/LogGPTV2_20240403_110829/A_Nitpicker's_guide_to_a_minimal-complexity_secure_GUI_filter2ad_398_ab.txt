### Label-Placement Strategies and Security Challenges

All the presented label-placement strategies share a common vulnerability: a Trojan Horse can mimic a complete desktop by creating a window larger than the entire screen and positioning it such that all window controls are outside the visible screen area. This fullscreen window could display an image of a trusted client, including faked labeling information. This example highlights the need for a dedicated screen space to present labeling information exclusively.

The DOpE window server addresses this by reserving a region at the top of the screen for displaying information about the currently focused window. This area is immune to being covered by other windows, ensuring that the information remains visible. However, the top of the screen is not typically in the user's focus during interactions, potentially leading to overlooked labeling information. A more noticeable method is desired.

### Dimming and Brightness Techniques

Another approach to preserve a unique capability for presenting labeling information is to divide the color space into two regions. The currently focused client and all labeling information are displayed in full color, while the brightness of all other clients is dimmed. This technique guides the user's attention to a bright spot on the screen, clearly indicating the active communication partner. Dimming is implemented in Mac OS X's Exposé function and in EWS.

### Nitpicker's Approach

For Nitpicker, we combine the reserved area and dimming techniques with a new label placement strategy: Floating labels. Nitpicker dims all views that do not belong to the focused client and surrounds each view with a thin bright border. The focused view is highlighted with a differently colored border. Unlike existing strategies, Nitpicker analyzes the arrangement of visible views and places labels in a way that they remain visible. It chooses the topmost position within the view where the complete label is visible. If the label cannot be fully displayed, it is positioned to show the most important part. Labels float over their corresponding view, always covering a part of the view’s content. All labels are drawn in the same color as their corresponding view border and feature a black outline for readability. The maximum brightness of the label text ensures that a dimmed view cannot mimic or obscure a label, as it would only paint gray instead of white. The most noticeable elements on the screen are the view borders, labels, and the focused view. Similar to DOpE, a bar at the top of the screen displays information about the focused view.

In MLS (Multi-Level Security) systems, Nitpicker can tint unfocused views of different classification levels with different colors. For extremely secure environments, dimming can completely obscure the content of unfocused clients. While dimming does not prevent Trojan Horses from faking trusted clients using dark colors, the view borders and labels cannot be faked.

### Modes for Different Use Cases

There are scenarios where productivity is essential. For instance, a user may want to watch a full-color movie while coding. In such cases, dimming would reduce inspiration and lower efficiency. To address this, we introduce a toggle between two modes using a magic key:

1. **Flat Mode**: No labels, no borders, and no dimming are displayed. The only visible part of Nitpicker is a red shaded bar at the top of the screen, which shows the labeling information of the focused view.
2. **X-ray Mode**: Dimming, floating labels, and view borders are active. The bar at the top of the screen is shaded gray, indicating that X-ray mode is active.

The user can switch between these modes, but clients can request the current mode. If a security-sensitive client detects Flat mode, it should prompt the user to switch to X-ray mode before processing sensitive data. Passwords should never be entered in Flat mode. For daily use, Flat mode may be the default, with X-ray mode used occasionally for sensitive tasks like bank transactions. In highly secure systems, switching to Flat mode could be disabled.

### Implementing Window Systems on Nitpicker

After describing the raw mechanisms, we outline two ways to implement a window system on top of Nitpicker:

1. **Buffer-per-View Approach**: Each window is rendered into a dedicated buffer, and one view is created for displaying the buffer on the screen. This approach, similar to EWS and Apple Quartz, is simple and efficient for moving and changing the stack layout. However, it requires high memory, as each window needs a buffer regardless of visibility. Modern graphics cards provide ample memory, but this resource could be better utilized by applications. On mobile and embedded devices, graphics memory is a precious resource.

2. **Single Buffer Approach**: Only one buffer is used, and a complete windowed desktop is rendered into this buffer. The client is a window system itself, and each client window is represented by a view. Views are positioned according to the geometry of the client windows, and the stacking order is consistent with the client window system. This approach scales well with the number of windows, as all windows share the same buffer. However, moving windows and changing the stacking layout require the client to refresh affected areas, making the client more complex and involving costly rendering operations.

Nitpicker enables both techniques to be used simultaneously by different clients. One client can handle single windows, while another can manage multiple sub-clients, providing convenience at the cost of increased complexity.

### Drag-and-Drop Protocol

Drag-and-drop is a common paradigm for transferring data between applications. Nitpicker supports drag-and-drop between views of one client using proprietary protocols. For communication between different clients, we introduce a drag-and-drop protocol derived from EWS and refined for Nitpicker. This protocol involves three phases: picking an item, dragging the item, and releasing the item. A dedicated component, the negotiator, enforces the global policy.

1. **Picking an Item**: When the user clicks on a view, the client determines if the selected object is draggable. If so, the client informs Nitpicker, and the mouse cursor changes to transport mode. The client deposits a list of MIME types at the negotiator, who may filter the list.

2. **Dragging the Item**: As the mouse moves, the user expects feedback from potential target clients. When the mouse crosses a view border, Nitpicker informs the negotiator, who decides on the information flow. If permitted, Nitpicker sends motion events to the source client and floating events to the potential target client. The target client can request the MIME type list from the negotiator and provide feedback if a supported type is found.

3. **Releasing the Item**: When the mouse button is released, Nitpicker informs the negotiator, who confirms the transaction. Nitpicker then sends release and drop events to the source and target clients, respectively. The target client requests a MIME type and provides a target memory buffer. The source client transfers the payload to the negotiator, who copies the data to the target buffer.

### Resource Management

A server allocating resources on client request is vulnerable to denial-of-service attacks. To mitigate this, Nitpicker requires clients to donate memory. If a client requests a new view and receives an out-of-memory error, it must donate a memory region to Nitpicker, which is then exclusively used for that client and freed upon client exit. Nitpicker also consumes CPU time on client request, and long-taking atomic operations can delay other clients. Techniques like redraw dropping and splitting, developed for DOpE, can be applied to Nitpicker.

### Target Platforms

Nitpicker is designed for platforms that provide isolation between security domains, ranging from virtual machine monitors (VMMs) to fine-grained multi-server operating systems. VMMs like VMware enable the execution of multiple guest OSs, but lack convenient user interaction. With Nitpicker running on the host OS, guest OSs can use the view mechanism via a virtual network device, achieving tight integration while maintaining isolation. Hypervisor architectures like Xen support isolated virtualized OSs and can reuse legacy drivers. Nitpicker, executed within an I/O isolation space, can multiplex graphical output and access physical video hardware. For remote desktop protocols like SINA, Nitpicker can enhance the application area by providing seamless integration while preserving required isolation.