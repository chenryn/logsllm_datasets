the cost in our approach grows logarithmically in N, and so
eventually becomes lower than the cost in Signal’s approach,
as N grows; the crossover point depends on m. E.g., ﬁxing
m = 100, if N = 88 M then both approaches take ∼ 579 ms;
if N = 128 M then Signal’s approach degrades to 835 ms while
our approach only takes 591 ms (an improvement of ∼ 30%).
Figure 9: Cost of private contact discovery in Signal vs. Oblix with an
increasing number of registered users, for address books of sizes 1 to 1000.
Dotted segments are extrapolations. Both axes scale logarithmically.
Fig. 9 also extrapolates the cost of both approaches for
databases larger than 128M users. With 1 billion users (N =
109), if m = 1000 then Signal’s approach and our approach
have similar costs (7.4 s and 7.6 s respectively); but if m = 100,
then our approach is ∼ 9× faster (0.74 s vs. Signal’s 6.7 s).
Fig. 9 further highlights the beneﬁt of our approach for
incremental (as opposed to initial) contact discovery, where
a user inserts new contacts into the phone and the Signal
application must discover which of these are Signal users.
While for initial contact discovery m = 100 and m = 1000 are
representative values, for incremental contact discovery smaller
values such as m = 1 and m = 10 are more appropriate. For
these, our approach is up to two orders of magnitude faster.
For example, when m = 1 and N = 128 M, our approach is
∼ 140× faster (5.9 ms vs. Signal’s 832 ms).
D. Anonymizing Google’s Key Transparency
Google’s Key Transparency (KT) [1, 46] is a scheme for
ensuring integrity of key lookups: users can safely fetch other
users’ public keys from an untrustworthy key server. To achieve
this, the service maintains a Merkle preﬁx tree over all user
keys and gossips the root hash among the users; up to 2d keys
can be supported if the tree height is d (d = 256 in Google’s
implementation). When a user requests a public key, the service
returns a proof of integrity that consists of the siblings of all the
nodes in the path from the root to the leaf containing the public
key. However, KT does not provide anonymity: when the server
answers a request, it knows the identity of the user whose key
it returns. We describe how to use Oblix to anonymize KT,
with an order-of-magnitude improvement in cost compared to
a baseline approach with the same level of security.
290
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:38:06 UTC from IEEE Xplore.  Restrictions apply. 
Figure 10: Cost of anonymous lookup in Key Transparency in baseline
approach vs. our approach. Dotted segments are extrapolations. Both axes
scale logarithmically.
Baseline approach. A simple baseline approach, similar in
spirit to Signal’s approach for private contact discovery (see
Section VI-C), is a lookup that obliviously scans the whole
Merkle tree, within the hardware enclave. Namely, we ﬁrst
initialize an empty array with d buckets; each bucket has a real
slot and a dummy slot. We then iterate over all nodes in the
Merkle tree as follows: given a node at depth j, if the node is
part of the proof we write its value to the real slot in the j-th
bucket; otherwise, we write it to the dummy slot. (Writing to
either slot can itself be made oblivious.) After iterating over all
nodes, the array will contain the proof for the desired public
key. Overall, this approach has latency O(N ), where N is the
total number of keys in the Merkle tree.
Our approach. We use Oblix to achieve anonymity with
lookup latency O(d log N ), a signiﬁcant asymptotic gain over
the baseline approach. The idea is simple: we store all Merkle
tree nodes in an oblivious index in which keys are node
identiﬁers and each key is mapped to a hash. As in the plaintext
case, lookup consists of retrieving O(d) nodes from the tree.
Experimental comparison. We consider databases of up to
N = 20 M public keys. We use 256-bit ECDSA public keys
and use SHA-512/256 hashes to build a Merkle tree over the
keys, in line with Google’s implementation of KT. This results
in a Path ORAM block size of 256 bytes. We compare the
performance of the baseline approach and our approach by
issuing 100 lookup requests and reporting their average latency.
Fig. 10 compares the baseline approach and our approach.
The cost of the baseline approach is linear in N (number of
public keys), while that of our approach is logarithmic in N. For
small N, the baseline approach has lower cost; for N = 20 M,
both approaches have comparable costs (2.1 s with Oblix vs.
2.3 s for the baseline); as N increases further, our approach
has signiﬁcantly lower cost. For example, for N = 40 M our
approach is 2× faster (2.3 s vs. 4.6 s) and for N = 320 M our
approach is ∼ 14× faster (2.6 s vs. 37 s). These latencies are
on the order of seconds, and thus impact user experience.
E. Oblivious searchable encryption
Searchable encryption (SE) [62] enables a client to outsource
encrypted data to an untrusted server, while still being able
to search this remote data with small cost (in latency and
bandwidth). Several works [11, 12, 17, 36] extend this
functionality to support inserts and deletes to the data.
Below we ﬁrst informally describe how to use Oblix to
obtain an efﬁcient SE scheme that supports oblivious searches,
inserts, and deletes while further enabling the client to hide
result sizes. We then evaluate our scheme’s performance on
real data. (For a formal deﬁnition, construction, and proofs for
our SE scheme, see the full version.)
Our SE scheme. The plaintext data structure underlying our
SE scheme is a scored inverted index (SII). A SII maps a key k
to a (potentially empty) list of score-value pairs [(si, vi)]n
1 :=
SII[k] that is sorted in descending order according to the scores
si. The SII is parameterized by an integer r that dictates the
“return size” of searches, as we now explain. The data structure
supports search, insert and delete operations. A SE scheme
SE := (Init, Insert, Delete, Find, Update, S) allows a client to
outsource storage of a SII to an untrusted server while still
securely preserving search, insert, and delete functionality.
(m, SII) → st. On input a maximum
• Initialization: SE.InitS
number m of key-value pairs, and a scored inverted index
SII, convert SII into a sorted multimap Map, and invoke
OSM.Init(m, Map) to get OSM state stOSM. This initializes
the server S. Output the initial client state st := stOSM.
• Find: SE.FindS
(mut st, k, ω) → [(si, vi)]r
• Insert: SE.InsertS
(mut st, [(ki, si)]n
1
1. On input
client state st, keyword k, and search offset ω, ﬁrst
compute indices i
:= (ω + 1)r and
then output OSM.FindS
(mut st, k, i, j). The output equals
SII[k][ωr, . . . , (ω + 1)r].
, v) → ⊥. On input
client state st, key-score list [(ki, si)]n
1 , and value v, add
(si, v) to SII[ki] (if not present) for every i by invoking
OSM.InsertS
, v) → (cid:3)b. On in-
1 , remove (si, v)
for every i by invoking
(mut st, ki, (si, v)), and output a boolean vec-
put value v and key-score list [(ki, si)]n
from SII[ki]
OSM.DeleteS
tor indicating whether the i-th removal was successful.
(mut st, [(ki, si)]n
1
• Delete: SE.DeleteS
:= ωr and j
(mut st, ki, (si, v)).
(if present)
Evaluation on Enron dataset. We evaluate the latency of
Oblix on the entire Enron email dataset [19], consisting of
∼ 528 K emails. We extracted keywords from this dataset by
ﬁrst stemming the words using standard stemming techniques,
and then removing 675 stopwords. We next ﬁltered out any
words that contained non-alphabetic characters, or were ≥ 20
or ≤ 3 characters long. This gave us a total of ∼ 259 K
keywords, which we used to create an inverted index having
∼ 38 M key-value pairs. We initialize the underlying Path
ORAM implementation with a block size of 200 bytes. We
then measure the cost of searches and inserts in the index and
report the average of 100 iterations.
• Search. We search for the ten highest-ranking results for
the keyword appearing in the largest number of documents
(∼ 145 K). We observe that on average, the search takes
20.1 ms. For larger (or smaller) intervals, the time increases
(or decreases) proportionately.
• Insert. We construct a new document consisting of the 100
most popular keywords. We then assign this document an
unused document identiﬁer, and populate the inverted index
291
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:38:06 UTC from IEEE Xplore.  Restrictions apply. 
with each of its constituent keywords. We observe that on
average, the total time for inserting the 100 key-value pairs
into the index is ∼ 775 ms, or 7.75 ms per keyword.
VII. RELATED WORK
There is a rich literature on encrypted search indices and
oblivious algorithms. We focus on works most relevant to us:
doubly-oblivious ORAM, systems that combine obliviousness
and hardware enclaves, and schemes for encrypted search.
A. Doubly-oblivious RAM
Most prior work [18, 21, 25, 38, 67, 72, 73, 78] on doubly-
oblivious RAM focuses on using ORAM for secure multi-party
computation (MPC) in the RAM model. These works focus
on challenges arising from the interactive and communication-
intensive nature of MPC. For example, one line of work [25,
38, 72, 73] expresses asymptotically efﬁcient Tree ORAM
algorithms as circuits with small size. Another line of work
[18, 78] reduces online protocol costs by considering different
ORAM paradigms that are asymptotically worse, but offer
better concrete performance in the MPC setting. The trade-offs
made by these works (such as optimizing for circuit size, or
using asymptotically worse protocols) are not always effective
in our setting of plain execution, where accessing memory is
more expensive than performing computations.
B. Obliviousness on hardware enclaves
General-purpose programs.
Several works [60, 61, 68]
modify enclaved programs to endow them with page-level
obliviousness. Such techniques can be composed with ours to
obtain oblivious programs for functionalities beyond search.
ORAM. ZeroTrace [57] uses a doubly-oblivious Path ORAM
client (corresponding to the naive client outlined in Sec-
tion V-A) in an SGX enclave to get an oblivious memory
controller. They use this to implement oblivious data structures.
However, unlike Oblix’s highly-optimized doubly-oblivious
data structures, their data structures incur linear overhead
per access. They also do not implement an efﬁcient doubly-
oblivious initialization algorithm, precluding applications like
private contact discovery or private public-key retrieval.
ObliDB [20] uses Path ORAM and SGX enclaves to
construct an oblivious database, but some of their techniques
do not seem to be doubly-oblivious.
Works such as GhostRider [41], Tiny ORAM [22], or Shroud
[43] propose combining ORAM techniques with custom trusted
hardware. These systems use specialized hardware, whereas
our construction utilizes widely available hardware enclaves.
Furthermore, they provide poor efﬁciency (slow insertion and
deletion when hiding size information) and security guarantees
(result sizes leak) in the context of search.
Private information retrieval and private set intersection.
Prior works attempt to use ORAM on trusted hardware of
different kinds to achieve PIR [7, 70, 76, 77], but do not
achieve scalable implementations. Tamrakar et al. [66] propose
a protocol that utilizes hardware enclaves to achieve private
set intersection. While their implemented system is quite
performant, it is specialized for membership testing, and cannot
support richer applications like anonymous Key Transparency
or oblivious searchable encryption.
C. Search-speciﬁc schemes
Oblivious schemes. TWORAM [24] uses garbled RAM
techniques to support oblivious search. Naveed [50] proposes
the idea of hiding access patterns by storing an inverted index
in the oblivious map of [74]. However, neither work supports
inserts/deletes, neither hides result sizes, and neither provides a
system design or implementation. Even if implemented, these
schemes would suffer from the overhead of classical ORAM
protocols (as discussed in Section I). Moataz and Blass [48]
achieve substring search using ORAM techniques; one could
use their techniques to extend our work to substring search.
Chan et al. [13] propose hiding result sizes via a new differ-
ential obliviousness technique, but their security guarantees are
incomparable to ours. Asharov et al. [5] construct an ORAM
scheme with good locality but weaker obliviousness guarantees,
and use this to construct an oblivious SE scheme that does not
hide result sizes. Neither scheme considers doubly-oblivious
client algorithms, and neither provides an implementation.
Non-oblivious schemes. Fuhry et al. [23] use a enclave-based
BTree-based search index to realize a searchable encryption
scheme, but do not hide access patterns nor result sizes.
VIII. ACKNOWLEDGEMENTS
We thank Fariborz Assaderaghi, Alicia da Conceicao,
Marc Joye, Sami Nassar, Ho Wai Wong-Lam, and other
colleagues from NXP Semiconductors for valuable feedback
and discussions, Assaf Araki and Intel for supplying the Intel
SGX Cluster, Jethro Beekman for help with his Rust SGX
SDK, and our shepherd Marina Blanton and the anonymous
reviewers for valuable feedback that greatly improved this
paper. This work was supported by NXP Semiconductors, the
UC Berkeley Center for Long-Term Cybersecurity, Intel/NSF
CPS-Security grants #1505773 and #20153754, as well as
gifts to the RISELab from Ant Financial, Amazon Web
Services, CapitalOne, Ericsson, GE, Google, Huawei, Intel,
IBM, Microsoft and VMware.
REFERENCES
[1] Google’s Key Transparency. https://github.com/google/keytransparency.
[2] Signal. https://signal.org.
[3] Signal’s Contact Discovery Service. https://github.com/whispersystems/
ContactDiscoveryService/, 2017.
[4] M. A. Abdelraheem, T. Andersson, and C. Gehrmann. Inference and
record-injection attacks on searchable encrypted relational databases.
ePrint 2017/024, 2017.
[5] G. Asharov, T.-H. H. Chan, K. Nayak, R. Pass, L. Ren, and E. Shi.
Oblivious computation with data locality. ePrint 2017/772, 2017. http:
//eprint.iacr.org/2017/772.
[6] M. Backes, A. Herzberg, A. Kate, and I. Pryvalov. Anonymous RAM.
In ESORICS ’16.
[7] S. Bakiras and K. F. Nikolopoulos. Adjusting the trade-off between
privacy guarantees and computational cost in secure hardware PIR. In
SDM ’11.
[8] R. Bost. Σoϕoς: Forward secure searchable encryption. In CCS ’16.
[9] F. Brasser, U. Müller, A. Dmitrienko, K. Kostiainen, S. Capkun, and
A. Sadeghi. Software grand exposure: SGX cache attacks are practical.
In WOOT ’17.
292
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:38:06 UTC from IEEE Xplore.  Restrictions apply. 
[10] D. Cash, P. Grubbs, J. Perry, and T. Ristenpart. Leakage-abuse attacks
against searchable encryption. In CCS ’15.
[11] D. Cash, J. Jaeger, S. Jarecki, C. Jutla, H. Krawczyk, M. Rosu, and
M. Steiner. Dynamic searchable encryption in very-large databases: Data
structures and implementation. In NDSS ’14.
[12] D. Cash, S. Jarecki, C. Jutla, H. Krawczyk, M. Rosu, and M. Steiner.
Highly-scalable searchable symmetric encryption with support for boolean
queries. In CRYPTO ’13.