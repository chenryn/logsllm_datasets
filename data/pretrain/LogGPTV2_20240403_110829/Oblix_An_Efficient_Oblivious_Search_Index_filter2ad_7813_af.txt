### Cost Analysis and Comparison

In our approach, the cost grows logarithmically with \( N \), and thus, as \( N \) increases, it eventually becomes lower than the cost in Signal's approach. The crossover point depends on \( m \). For example, fixing \( m = 100 \), if \( N = 88 \) million, both approaches take approximately 579 ms. However, if \( N = 128 \) million, Signal's approach degrades to 835 ms, while our approach only takes 591 ms, resulting in an improvement of about 30%.

**Figure 9: Cost Comparison for Private Contact Discovery**
- **Description:** This figure compares the cost of private contact discovery in Signal versus our approach (Oblix) as the number of registered users increases, for address books of sizes 1 to 1000.
- **Axes:** Both axes scale logarithmically.
- **Extrapolations:** Dotted segments represent extrapolated data.

**Further Analysis:**
- **Larger Databases:** Figure 9 also extrapolates the cost for databases larger than 128 million users. With 1 billion users (\( N = 10^9 \)), if \( m = 1000 \), both approaches have similar costs (7.4 s and 7.6 s, respectively). However, if \( m = 100 \), our approach is approximately 9 times faster (0.74 s vs. Signal's 6.7 s).
- **Incremental Contact Discovery:** Our approach is particularly beneficial for incremental contact discovery, where a user adds new contacts to their phone, and the Signal application must determine which are Signal users. For initial contact discovery, \( m = 100 \) and \( m = 1000 \) are representative values, but for incremental contact discovery, smaller values such as \( m = 1 \) and \( m = 10 \) are more appropriate. In these cases, our approach can be up to two orders of magnitude faster. For instance, when \( m = 1 \) and \( N = 128 \) million, our approach is approximately 140 times faster (5.9 ms vs. Signal's 832 ms).

### Anonymizing Google’s Key Transparency

**Google’s Key Transparency (KT):**
- **Purpose:** Ensures the integrity of key lookups, allowing users to safely fetch other users' public keys from an untrusted key server.
- **Implementation:** Maintains a Merkle prefix tree over all user keys and gossips the root hash among users. Up to \( 2^d \) keys can be supported if the tree height is \( d \) (with \( d = 256 \) in Google’s implementation).
- **Integrity Proof:** When a user requests a public key, the service returns a proof of integrity consisting of the siblings of all nodes in the path from the root to the leaf containing the public key.
- **Anonymity Issue:** KT does not provide anonymity; the server knows the identity of the user whose key is returned.

**Using Oblix to Anonymize KT:**
- **Baseline Approach:** A simple baseline approach, similar to Signal's method for private contact discovery, involves obliviously scanning the entire Merkle tree within a hardware enclave. This approach has a latency of \( O(N) \), where \( N \) is the total number of keys in the Merkle tree.
- **Our Approach:** We use Oblix to achieve anonymity with a lookup latency of \( O(d \log N) \), a significant asymptotic improvement over the baseline. The idea is to store all Merkle tree nodes in an oblivious index, where keys are node identifiers and each key maps to a hash. Lookup consists of retrieving \( O(d) \) nodes from the tree.
- **Experimental Comparison:** For databases of up to \( N = 20 \) million public keys, using 256-bit ECDSA public keys and SHA-512/256 hashes, the baseline approach has a linear cost in \( N \), while our approach has a logarithmic cost. For small \( N \), the baseline approach is cheaper, but for \( N = 20 \) million, both approaches have comparable costs (2.1 s with Oblix vs. 2.3 s for the baseline). As \( N \) increases, our approach becomes significantly cheaper. For example, at \( N = 40 \) million, our approach is twice as fast (2.3 s vs. 4.6 s), and at \( N = 320 \) million, it is approximately 14 times faster (2.6 s vs. 37 s).

**Figure 10: Cost of Anonymous Lookup in Key Transparency**
- **Description:** Compares the cost of anonymous lookup in Key Transparency between the baseline approach and our approach.
- **Axes:** Both axes scale logarithmically.
- **Extrapolations:** Dotted segments represent extrapolated data.

### Oblivious Searchable Encryption

**Searchable Encryption (SE):**
- **Purpose:** Enables a client to outsource encrypted data to an untrusted server while still being able to search this remote data with minimal cost in latency and bandwidth.
- **Extensions:** Several works extend this functionality to support inserts and deletes to the data.

**Our SE Scheme:**
- **Data Structure:** Uses a scored inverted index (SII) that maps a key \( k \) to a list of score-value pairs \([(s_i, v_i)]_{i=1}^n\) sorted in descending order by scores \( s_i \).
- **Operations:** Supports search, insert, and delete operations.
- **Initialization:** Converts the SII into a sorted multimap and initializes the server state.
- **Find Operation:** Outputs a subset of the SII based on a search offset.
- **Insert and Delete Operations:** Add or remove score-value pairs from the SII, respectively.

**Evaluation on Enron Dataset:**
- **Dataset:** Consists of approximately 528,000 emails.
- **Keyword Extraction:** Extracted keywords using standard stemming techniques and removed stopwords and non-alphabetic characters, resulting in approximately 259,000 keywords.
- **Inverted Index:** Created an inverted index with approximately 38 million key-value pairs.
- **Performance:**
  - **Search:** Searching for the ten highest-ranking results for the most frequent keyword (appearing in about 145,000 documents) took an average of 20.1 ms.
  - **Insert:** Inserting 100 key-value pairs into the index took an average of 775 ms, or 7.75 ms per keyword.

### Related Work

**Doubly-Oblivious ORAM:**
- **Prior Work:** Focuses on using ORAM for secure multi-party computation (MPC) in the RAM model, addressing challenges from the interactive and communication-intensive nature of MPC.
- **Trade-offs:** Optimizations for circuit size or asymptotically worse protocols may not be effective in our setting, where memory access is more expensive than computations.

**Obliviousness on Hardware Enclaves:**
- **General-Purpose Programs:** Techniques to endow enclaved programs with page-level obliviousness.
- **ORAM:** ZeroTrace and ObliDB use Path ORAM and SGX enclaves, but they do not achieve the same efficiency and security guarantees as our approach.
- **Specialized Hardware:** Systems like GhostRider, Tiny ORAM, and Shroud use custom trusted hardware, but they provide poor efficiency and security for search applications.

**Private Information Retrieval and Private Set Intersection:**
- **PIR:** Prior works attempt to use ORAM on trusted hardware for PIR but do not achieve scalable implementations.
- **Private Set Intersection:** Tamrakar et al. propose a protocol using hardware enclaves, but it is specialized for membership testing and cannot support richer applications like anonymous Key Transparency or oblivious searchable encryption.

**Search-Specific Schemes:**
- **Oblivious Schemes:** TWORAM and Naveed's work do not support inserts/deletes, hide result sizes, or provide system designs. Moataz and Blass achieve substring search using ORAM techniques.
- **Non-Oblivious Schemes:** Fuhry et al. use an enclave-based BTree-based search index but do not hide access patterns or result sizes.

### Acknowledgements

We thank Fariborz Assaderaghi, Alicia da Conceicao, Marc Joye, Sami Nassar, Ho Wai Wong-Lam, and other colleagues from NXP Semiconductors for valuable feedback and discussions. We also thank Assaf Araki and Intel for supplying the Intel SGX Cluster, Jethro Beekman for help with his Rust SGX SDK, and our shepherd Marina Blanton and the anonymous reviewers for valuable feedback that greatly improved this paper. This work was supported by NXP Semiconductors, the UC Berkeley Center for Long-Term Cybersecurity, Intel/NSF CPS-Security grants #1505773 and #20153754, as well as gifts to the RISELab from Ant Financial, Amazon Web Services, CapitalOne, Ericsson, GE, Google, Huawei, Intel, IBM, Microsoft, and VMware.

### References

[1] Google’s Key Transparency. https://github.com/google/keytransparency.
[2] Signal. https://signal.org.
[3] Signal’s Contact Discovery Service. https://github.com/whispersystems/ContactDiscoveryService/, 2017.
[4] M. A. Abdelraheem, T. Andersson, and C. Gehrmann. Inference and record-injection attacks on searchable encrypted relational databases. ePrint 2017/024, 2017.
[5] G. Asharov, T.-H. H. Chan, K. Nayak, R. Pass, L. Ren, and E. Shi. Oblivious computation with data locality. ePrint 2017/772, 2017. http://eprint.iacr.org/2017/772.
[6] M. Backes, A. Herzberg, A. Kate, and I. Pryvalov. Anonymous RAM. In ESORICS ’16.
[7] S. Bakiras and K. F. Nikolopoulos. Adjusting the trade-off between privacy guarantees and computational cost in secure hardware PIR. In SDM ’11.
[8] R. Bost. Σoϕoς: Forward secure searchable encryption. In CCS ’16.
[9] F. Brasser, U. Müller, A. Dmitrienko, K. Kostiainen, S. Capkun, and A. Sadeghi. Software grand exposure: SGX cache attacks are practical. In WOOT ’17.
[10] D. Cash, P. Grubbs, J. Perry, and T. Ristenpart. Leakage-abuse attacks against searchable encryption. In CCS ’15.
[11] D. Cash, J. Jaeger, S. Jarecki, C. Jutla, H. Krawczyk, M. Rosu, and M. Steiner. Dynamic searchable encryption in very-large databases: Data structures and implementation. In NDSS ’14.
[12] D. Cash, S. Jarecki, C. Jutla, H. Krawczyk, M. Rosu, and M. Steiner. Highly-scalable searchable symmetric encryption with support for boolean queries. In CRYPTO ’13.