### Optimized Text

#### Link Key Extraction Attack
An attacker can exploit the reply function within the Broadcom chip to copy the link key into the global device name variable. By reusing existing firmware functions, this patch requires approximately 128 bytes in practice [16]. The controller's ability to request any encryption key is unique to Bluetooth, as it relies on the Trust On First Use (TOFU) model, which lacks additional verification through certificates or other external dependencies. Unlike previous attacks on pairing and key negotiation [2, 8], our method of link key extraction does not require a Machine-in-the-Middle (MITM) setup, but rather Remote Code Execution (RCE).

Our tests on real devices revealed that even link keys for inactive connections can be requested. To counteract this, the host should only return link keys if proper HCI messages have been exchanged previously. For instance, BTstack only copies the link key if an active connection is present [10]. Additionally, the stack should introduce a short delay in link key request replies to prevent MAC address brute-force attacks.

However, while this attack can be made more difficult, it cannot be completely prevented while maintaining compliance with the Bluetooth specification. Any effective mitigation would break compatibility with the current specification, including the TOFU concept that enables Bluetooth pairing without certificate checks. Therefore, we did not report this issue to the Bluetooth SIG but informed the vendors directly. Generally, vendors are aware of this vulnerability—Apple, for example, has developed MagicPairing to secure the pairing of their proprietary Bluetooth peripherals and integrate them into iCloud [27].

#### Exploiting Wi-Fi Through Bluetooth Coexistence (CVE-2019-15063)
Table 1 summarizes the exploitation of Wi-Fi through Bluetooth coexistence on combo chips (CVE-2019-15063). This table details the affected devices, operating systems, build dates, and the specific memory addresses and values used to disable or crash Wi-Fi functionality.

| **Chip** | **Device** | **OS** | **Build Date** | **Value** | **Address** | **Effect** |
|----------|------------|--------|----------------|-----------|-------------|------------|
| BCM4335C0 | Nexus 5 | Android 6.0.1 | Dec 11 2012 | 0x00 | 0x650440, 0x650600 | Disconnects from 2.4 GHz and 5 GHz Wi-Fi, Wi-Fi can be reconnected. |
| BCM4345B0 | iPhone 6 | iOS 12.4 | Jul 15 2013 | Random | 0x650000–0x6507ff | Disables 2.4 GHz Wi-Fi until restarting Bluetooth. |
| BCM4345C0 | Raspberry Pi 3+/4 | Raspbian Buster | Aug 19 2014 | 0xff | 0x650000–0x6507ff | Full and partial Wi-Fi crashes, including SDIO, ability to scan for Wi-Fis, speed reduction. Reboot required to restore functionality. |
| BCM4358A3 | Nexus 6P | Android 7.1.2 | Oct 23 2014 | 0x00 | 0x650000–0x6507ff | Disables all Wi-Fi until restarting Bluetooth. |
| BCM4358A3 | Samsung Galaxy S6 | Lineage OS 14.1 | Oct 23 2014 | 0x00 | 0x650000–0x6507ff | Kernel panic, resulting in a reboot. |
| BCM4345C1 | iPhone SE | iOS 12.4–13.3.1 | Jan 27 2015 | 0x650200 | 0x650200 | Temporarily disables 2.4 GHz and 5 GHz Wi-Fi, freezes system for a couple of seconds when re-enabling Wi-Fi. |
| BCM4355C0 | iPhone 7 | iOS 12.4–13.3.1 | Sep 14 2015 | 0x650200 | 0x650200 | Kernel panic, resulting in a reboot. |
| BCM4347B0 | Samsung Galaxy S8 | Android 8.0.0 | Jun 3 2016 | 0x650200 | 0x650200 | Disables all Wi-Fi until restarting Bluetooth. |
| BCM4347B0 | Samsung Galaxy S8 | LineageOS 16.0 | Jun 3 2016 | 0x650200 | 0x650200 | Kernel panic, resulting in a reboot. |
| BCM4347B1 | iPhone 8/X/XR | iOS 12.4–13.3.1 | Oct 11 2016 | 0x650200 | 0x650200 | Disables 2.4 GHz and 5 GHz Wi-Fi, kernel panic and reboot when re-enabling Wi-Fi. |
| BCM4375B1 | Samsung Galaxy S10/S10e/S10+ | Android 9 | Apr 13 2018 | 0x650200 | 0x650200 | Disables 2.4 GHz and 5 GHz Wi-Fi. Reboot required to re-enable Wi-Fi. |
| BCM4377B3 | MacBook Pro/Air 2019–2020 | macOS 10.15.1–10.15.5 | Feb 28 2018 | 0x650400 | 0x650400 | Kernel panic, resulting in a reboot. |
| BCM4378B1 | iPhone 11 | iOS 13.3 | Oct 25 2018 | 0x650400 | 0x650400 | Kernel panic, resulting in a reboot. |

#### Inter-Chip Escalation (CVE-2019-15063)
We analyze the potential for escalating from Bluetooth to other wireless components, such as Wi-Fi and LTE, which are often combined in the same chip. On Broadcom Wi-Fi/Bluetooth combo chips, each protocol runs on a separate ARM core but shares parts of the transceiver. They communicate via a common interface, which we exploit to persistently shut down Wi-Fi. The operating system cannot prevent this type of inter-chip escalation.

Coexistence between Bluetooth and Wi-Fi is typically managed using Adaptive Frequency Hopping (AFH) channel maps [12, p. 289], which can blacklist overlapping 2.4 GHz channels. Vendors may implement proprietary coexistence additions for better performance [12, p. 290]. However, simply blacklisting channels is insufficient on Broadcom Bluetooth combo chips, which use the Enhanced Coexistence Interface (ECI) protocol to optimize priorities for different types of Wi-Fi and Bluetooth packets. Our practical tests disabling coexistence confirm that Broadcom combo chip performance heavily depends on it. When streaming a video and simultaneously listening to it with Bluetooth headphones, the video stutters while the sound plays for a few seconds, and then the sound stops while the video continues buffering. This indicates that, as a countermeasure against attacks on coexistence, Broadcom cannot simply disable it, as 2.4 GHz Wi-Fi and Bluetooth would significantly block each other.

Coexistence implementations vary between chips, but firmware compiled between 2012 and 2018 maps coexistence registers to the same memory area. We can crash or disable Wi-Fi by writing to these registers via Bluetooth, as detailed in Table 1. Often, it is impossible to re-enable Wi-Fi, and the device needs to be rebooted to restore functionality. For example, the Samsung Galaxy S8 stock ROM attempts to re-enable Wi-Fi five times before rebooting with a soft kernel panic. When using an unofficial LineageOS 16.0 nightly build on the Samsung Galaxy S8, the log shows errors related to WifiHAL, and the screen freezes for a few seconds before turning off and leaving the user at the lock screen. We also observed a kernel panic on the iPhone SE, 7, 8/X/XR, and 11 related to a kernel mutex and AppleBCMWLANBusInterfacePCIe.

In general, coexistence can be disabled in other ways, such as ignoring callbacks with channel blacklists or packet transmission requests. The attack can also work in reverse; we produced a Wi-Fi firmware that never allows Bluetooth to transmit on the Nexus 5 with Nexmon [41]. Coexistence for shared or co-located antennas is also an issue across vendors, as various frequency bands of technologies used within one device can interfere with Bluetooth, including LTE bands 40 and 7 uplink close to the 2.4 GHz band. Advanced measurement setups in shielded chambers allow measuring the exact interference within a given device [20].

Vendor-independent solutions enable coexistence between Bluetooth, Wi-Fi, and LTE chips. The Bluetooth specification outlines a generic Mobile Wireless Standards (MWS) scheme for coexistence with both LTE and Wi-Fi [12, p. 3227ff]. Broadcom implements all MWS HCI commands proposed by the specification, along with vendor-specific additions. This enables LTE coexistence with chips from different manufacturers, such as Intel or Qualcomm. Since MWS coexistence is less tightly coupled to the hardware than ECI, tampering with MWS commands likely leads to performance degradation but no kernel panics. Performance issues depend on the chip-internal implementations and physical aspects like frequency and antenna location. MWS is used on iPhones, where the WirelessRadioManagerd manages coexistence between LTE, Bluetooth, and Wi-Fi. We observed MWS messages on various iPhone models but not on the Samsung Galaxy S8 and S10e.

#### Bricking Hardware
Broadcom’s memory layout appears unbrickable at first glance, as firmware is stored in ROM and patches are temporarily applied in Patchram. After a hard reset, all changes are lost. However, there is a Non-Volatile Random-Access Memory (NVRAM) section that should only be written during manufacturing. It contains per-device configuration data, such as the MAC address and crystal trimming information.

The WICED Studio documentation warns users about writing to NVRAM slots below 0x200, and the WICED Hardware Abstraction Layer (HAL) only accepts higher slots. An attacker can bypass this HAL safety mechanism and directly call the `nvram_write` function. Our experiments with writing to NVRAM bricked one Broadcom Wi-Fi evaluation board. While it might still be possible to recover a device, this requires system-level access to the Bluetooth controller. On a smartphone, this implies either a patch issued by the manufacturer or the user taking control over the device to unbrick Bluetooth. The latter is challenging on iPhones, which require jailbreaking, and Samsung devices, which flip the Knox bit once rooted.

#### Ineffective Defense: Disabling Bluetooth
On recent mobile operating systems, turning off Bluetooth via the advanced settings menu does not turn the chip off. This is counterintuitive because active connections to other devices are lost. We tested RCE persistence by checking if memory is reset and timers continue running. The underlying flaw is in the Bluetooth specification, which allows a soft reset.

##### HCI Reset
According to the Bluetooth 5.2 specification, the `HCI_Reset` command does not necessarily perform a hardware reset [12, p. 2077]. On the CYW20735 evaluation board, only some timers, current connections, link manager queues, and similar information are reset. No full hardware reset is performed.

##### Testing Chip Hard Reset
We analyzed whether a device was appropriately reset. On Broadcom and Cypress firmware, a bootcheck memory area is written during a hard reset of any device under test. We inserted custom values into this area. If they remain persistent, we know that no hard reset took place. This approach excludes the possibility that memory is persistent due to cold boot effects [47]. Timer registers can also confirm the hardware state. We issued `HCI_Reset` commands on chips ranging from 2012 to 2018. Indeed, the bootcheck memory area was never reset.

##### iOS Devices
On iOS 12 and 13 devices, including iOS 13.5, the Bluetooth chip is neither hard reset when Bluetooth is disabled nor in flight mode. Under some circumstances, like a firmware crash, a hard reset can occur. When Bluetooth is disabled via the settings menu, we can still connect to other devices by issuing commands on the chip. Executing commands on the chip and getting HCI events passed to the host for processing connection establishments requires `btwake` to be active. We believe this is not a showstopper when facing RCE, as it is implemented as an interrupt in the firmware and can be reconfigured. Communication with the host is not necessarily required when adding functions inside the firmware to handle over-the-air requests.

While Bluetooth is enabled on an iPhone, it can be found using BLE device scanning. The MAC address is randomized, but an attacker can connect and request the firmware version. BLE advertisements contained a device name in iOS 12 [46], which was fixed in iOS 13. However, this anonymity does not stop attackers, as Bluetooth requires proximate targets. Moreover, Bluetooth has become an even more integral part of iOS 13 due to features like Find My [3].

##### Android Devices
In contrast to iOS, Android 8 and 9 on a Samsung Galaxy S8, as well as Android 9 and 10 on a Samsung Galaxy S10e, will disable and hard reset Bluetooth in flight mode. However, when not in flight mode, the Bluetooth chip will not be reset by turning off Bluetooth. The latest version we tested is Android 10 on the March 2020 patch level. This behavior does not change when disabling location services. Whenever a user turns off Bluetooth, only BLE and classic scanning for devices are disabled. No `HCI_Reset` is issued, and it is still possible to connect to other devices.

Android 6 on a Nexus 5 resets memory contents and reloads the firmware patch file with each Bluetooth restart.

#### Proprietary Firmware Internals
Understanding firmware internals is essential for emulation and finding on-chip RCE vulnerabilities. Figure 2 depicts the firmware internals, which we explain top-down in the following sections. These details were discovered and analyzed using the emulation techniques described later in Section 5. Our analysis is based on the Cypress CYW20735 evaluation board and its firmware [18], which was shipped with partial symbols in the WICED Studio 6.2 toolsuite [35]. No public documentation or source code is available for this firmware.

##### Interaction Between Host and Controller
In Bluetooth terminology, the host is the operating system, and the controller is the chip running the firmware. The host communicates with the controller using the HCI. For the CYW20735 chip, HCI is sent via UART to the host. Data is transmitted via the same interface using ACL and SCO packets. Data does not require interpretation by the Link Manager (LM).

##### ThreadX
The firmware is based on ThreadX, a Real-Time Operating System (RTOS) optimized for embedded devices [22]. ThreadX implements threads, events, queues, semaphores, and dynamic memory. The firmware uses several threads, such as the LM, UART state machine, and a special idle thread. Each thread implements a main loop, waiting for events to be processed. When an event for a waiting thread is created, a context switch is performed. Events are primarily used for inter-thread communication, such as passing an HCI packet from the LM to the UART state machine. If all events are processed, the firmware enters an idle state. New events are generated by interrupts, such as UART, the Bluetooth Core Scheduler (BCS), or timers.

##### Bluetooth Core Scheduler
The BCS is a separate component handling time-critical Bluetooth events. The interrupt handler `bluetoothCoreInt_C` calls it every 312.5 µs, which is the smallest unit of the Bluetooth clock and corresponds to 1/2 slot length [12, p. 415]. The BCS kernel holds a pool of various tasks, with only a single task active at any point in time. Tasks implement ACL, device inquiry, paging, and more. They directly access the hardware packet buffer and registers holding packet information. For classic Bluetooth, which supports higher throughput rates than BLE, the packet buffer is mapped into RAM using a DMA mechanism. Upon reception, the packet is copied to dynamic memory and handed to the corresponding thread.

#### The Frankenstein Framework
We call our firmware emulation framework Frankenstein because it modifies a firmware image to bring it back to life in a different environment. Snapshots of the state of the physical hardware during normal operation can be integrated and ported to the emulated environment. We showcase the capabilities of our approach on the CYW20735 Bluetooth controller, though other firmwares are also supported. The emulated virtual Bluetooth chip can even be attached to a real host, allowing for comprehensive testing and analysis.