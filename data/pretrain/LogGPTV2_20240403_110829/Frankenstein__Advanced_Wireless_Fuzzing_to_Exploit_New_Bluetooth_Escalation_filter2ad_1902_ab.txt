For example, an attacker can hook the reply function inside
the Broadcom chip to copy the link key to the global device
name variable. Reusing existing ﬁrmware functions makes
this patch require around 128 B in practice [16].
The ability of the controller to request any encryption key
differs a lot from other wireless standards. It is very speciﬁc
to Bluetooth, because the simple pairing concept of Trust
On First Use (TOFU) also means that there is no additional
veriﬁcation by certiﬁcates or other external dependencies. In
contrast to existing attacks on pairing and key negotiation [2,
8], our link key extraction does not require an active Machine-
in-the-Middle (MITM) setup, but RCE.
Our tests on real devices showed that even the link key
for inactive connections could be requested. As a link key
extraction countermeasure, the host should only return link
keys if proper HCI messages were exchanged previously. For
example, BTstack only copies the link key if it has an active
connection [10]. Moreover, the stack should introduce a short
delay in link key request replies to prevent MAC address
brute-force attacks.
However, this attack can only be made harder, but cannot
be prevented completely while keeping the host’s implementa-
tion Bluetooth speciﬁcation-compliant. As any proper mitiga-
tion would break compatibility with the current speciﬁcation,
including the whole TOFU concept that enables Bluetooth
pairing without certiﬁcate checks, we did not report this issue
to the Bluetooth SIG but only to the vendors. In general, ven-
dors are aware of this—Apple even designed MagicPairing to
secure pairing of their proprietary Bluetooth peripherals and
integrate them into iCloud [27].
22    29th USENIX Security Symposium
USENIX Association
Table 1: Exploiting Wi-Fi through Bluetooth coexistence on combo chips (CVE-2019-15063).
Chip
BCM4335C0
Device
Nexus 5
OS
Android 6.0.1
Build Date
Dec 11 2012
BCM4345B0
iPhone 6
iOS 12.4
Jul 15 2013
BCM4345C0
Raspberry Pi 3+/4
Raspbian Buster
Aug 19 2014
BCM4358A3
Nexus 6P
Android 7.1.2
Oct 23 2014
BCM4358A3
Samsung Galaxy S6
Lineage OS 14.1
Oct 23 2014
BCM4345C1
BCM4355C0
BCM4347B0
iPhone SE
iPhone 7
Samsung Galaxy S8
iOS 12.4–13.3.1
iOS 12.4–13.3.1
Android 8.0.0
Jan 27 2015
Sep 14 2015
Jun 3 2016
Value
0x00
Random
0xff
Address
0x650440,
0x650600
0x650000–
0x6507ff
0x650000–
0x6507ff
0x650000–
0x6507ff
0x650000–
0x6507ff
0x650200
0x650200
0x650200
BCM4347B0
Samsung Galaxy S8
LineageOS 16.0
Jun 3 2016
0x650200
iOS 12.4–13.3.1
Android 9
Oct 11 2016
Apr 13 2018
0x650200
0x650200
BCM4347B1
BCM4375B1
BCM4377B3
BCM4378B1
iPhone 8/X/XR
Samsung Galaxy
S10/S10e/S10+
MacBook Pro/Air
2019–2020
iPhone 11
Effect
Disconnects from 2.4 GHz and 5 GHz Wi-Fi, Wi-Fi can be re-
connected.
Disables 2.4 GHz Wi-Fi until restarting Bluetooth.
Full and partial Wi-Fi crashes, including Secure Digital Input
Output (SDIO), ability to scan for Wi-Fis, speed reduction. Re-
boot required to restore functionality.
Disables all Wi-Fi until restarting Bluetooth.
Disables all Wi-Fi until restarting Bluetooth.
Kernel panic, resulting in a reboot.
Kernel panic, resulting in a reboot.
Disables 2.4 GHz and 5 GHz Wi-Fi, kernel panic and reboot
when re-enabling Wi-Fi.
Temporarily disables 2.4 GHz and 5 GHz Wi-Fi, freezes system
for a couple of seconds when re-enabling Wi-Fi.
Kernel panic, resulting in a reboot.
Disables 2.4 GHz and 5 GHz Wi-Fi. Reboot required to re-
enable Wi-Fi.
Kernel panic, resulting in a reboot.
macOS
10.15.1–10.15.5
iOS 13.3
Feb 28 2018
0x650400
Oct 25 2018
0x650400
Kernel panic, resulting in a reboot.
3.2
Inter-Chip Escalation (CVE-2019-15063)
In the following, we analyze possibilities to escalate from
Bluetooth into further wireless components. This is possible
because Wi-Fi and Bluetooth are combined in the same chip,
and reside with LTE on the same smartphone. On Broadcom
Wi-Fi/Bluetooth combo chips, each protocol runs on a sepa-
rate ARM core, but they share parts of the transceiver. They
have a common interface to communicate their needs, which
we exploit to shut down Wi-Fi persistently. The operating
system cannot prevent this type of inter-chip escalation.
Coexistence between Bluetooth and Wi-Fi is usually re-
alized by applying an Adaptive Frequency Hopping (AFH)
channel map [12, p. 289], which can blacklist overlapping
2.4 GHz channels. Vendors can implement proprietary coex-
istence additions for better performance [12, p. 290]. Simply
blacklisting channels is not sufﬁcient on Broadcom Bluetooth
combo chips—they add their own Enhanced Coexistence In-
terface (ECI) protocol. ECI optimizes priorities for different
types of Wi-Fi and Bluetooth packets. Each protocol stack
collaboratively waits for the other, depending on the scenario.
Our practical tests disabling coexistence conﬁrm that
Broadcom combo chip performance highly depends on it.
When streaming a video and simultaneously listening to it
with Bluetooth headphones, the video stutters while the sound
is playing for a few seconds, and then the sound stops while
the video continues buffering. This means, as a countermea-
sure against attacks on coexistence, Broadcom cannot simply
disable it. 2.4 GHz Wi-Fi and Bluetooth would block each
other signiﬁcantly, even without any attacker being present.
Coexistence implementations vary a lot between chips.
While there are different implementations, ﬁrmware compiled
between 2012 and 20181 map coexistence registers to the
same memory area. We crash or practically disable Wi-Fi by
writing to those registers via Bluetooth, as listed in Table 1. Of-
ten, it is impossible to re-enable Wi-Fi, and the device needs to
be rebooted to restore functionality. The Samsung Galaxy S8
stock ROM tries to re-enable Wi-Fi ﬁve times until rebooting
with a soft kernel panic. When installing a LineageOS 16.0 un-
ofﬁcial nightly build from August 30 2019, and performing the
same attack on the Samsung Galaxy S8, the log shows errors
related to WifiHAL. While LineageOS 16.0 does not reboot,
the screen is still freezing for a couple of seconds, then turns
off and leaves the user at the lock screen. We also observed a
kernel panic on the iPhone SE, 7, 8/X/XR, and 11 related to a
kernel mutex and AppleBCMWLANBusInterfacePCIe.
In general, coexistence can also be disabled in other ways,
such as ignoring callbacks with channel blacklistings or
packet transmission requests. The attack also works the other
way round—we produced a Wi-Fi ﬁrmware that never allows
Bluetooth to transmit on the Nexus 5 with Nexmon [41].
Coexistence for shared or co-located antennas is also an is-
sue across vendors. Various frequency bands of technologies
used within one device are likely to interfere with Bluetooth,
including LTE bands 40 and 7 uplink close to the 2.4 GHz
band. In addition to those direct neighbors, harmonics can also
interfere. Advanced measurement setups in shielded cham-
bers allow measuring the exact interference within a given
device [20].
Vendor-independent solutions enable coexistence between
Bluetooth, Wi-Fi, and LTE chips. The Bluetooth speciﬁcation
1Chips require at least a year to appear in the wild, and this is the newest
ﬁrmware we had access to as of June 2020. The latest iPhone SE2, MacBook
Pro 2020, and Samsung Galaxy S20 all use ﬁrmware dating back to 2018.
USENIX Association
29th USENIX Security Symposium    23
outlines a generic Mobile Wireless Standards (MWS) scheme
for coexistence with both LTE and Wi-Fi [12, p. 3227ff].
Broadcom implements all MWS HCI commands the speciﬁ-
cation proposes, along with vendor-speciﬁc additions. This
enables LTE coexistence with chips of different manufactur-
ers, such as Intel or Qualcomm. Since MWS coexistence is
coupled less tightly to the hardware than ECI, we assume
that tampering with MWS commands only leads to perfor-
mance degradation, but no kernel panics. Performance issues
highly depend on the chip-internal implementations as well as
physical aspects such as the frequency and antenna location.
Indeed, MWS is used on iPhones. The WirelessRadio
Managerd manages coexistence between LTE, Bluetooth, and
Wi-Fi. We can observe MWS messages on various iPhone
models. In contrast, we could not see any MWS messages on
the Samsung Galaxy S8 and S10e.
3.3 Bricking Hardware
At ﬁrst sight, Broadcom’s memory layout seems unbrick-
able. Firmware is stored in ROM, and patches are temporar-
ily applied in Patchram. After a hard reset, all changes are
gone. Though, there is a Non-Volatile Random-Access Mem-
ory (NVRAM) section that should only be written during
manufacturing. It contains a per-device conﬁguration like the
MAC address and crystal trimming information.
The WICED Studio documentation warns users about writ-
ing to NVRAM slots below 0x200. The WICED Hardware
Abstraction Layer (HAL) only accepts higher slots. An at-
tacker can skip this HAL safety mechanism and directly call
the nvram_write function. We did not want to brick our
Bluetooth devices, yet our experiments writing to NVRAM
bricked one Broadcom Wi-Fi evaluation board.
While it might still be possible to recover a device to a
non-bricked state, this requires system-level access to the
Bluetooth controller. On a smartphone, this implies either a
patch issued by the manufacturer or the user taking control
over the device to unbrick Bluetooth. The latter is an obsta-
cle on iPhones, which require to be jailbroken for this, and
Samsung devices, which ﬂip the Knox bit once rooted.
Ineffective Defense: Disabling Bluetooth
3.4
On recent mobile operating systems, turning off Bluetooth via
the advanced settings menu will not turn the chip off. This is
counter-intuitive because active connections to other devices
are lost. We test RCE persistence by checking if memory is
reset and timers continue running. The underlying ﬂaw is in
the Bluetooth speciﬁcation, which allows a soft reset.
3.4.1 HCI Reset
According to the Bluetooth 5.2 speciﬁcation, the HCI_Reset
command will not necessarily perform a hardware reset [12,
p. 2077]. On the CYW20735 evaluation board, only some
timers, current connections, link manager queues, and similar
information are reset. No full hardware reset is performed.
3.4.2 Testing Chip Hard Reset
We analyze if a device was appropriately reset. On Broadcom
and Cypress ﬁrmware, a bootcheck memory area is written
during a hard __reset of any device under test. We insert
custom values into this area. If they stay persistent, we know
that no hard reset took place. This approach excludes that
memory is persistent due to cold boot effects [47]. Moreover,
timer registers can be used to conﬁrm the hardware state. We
issue HCI_Reset commands on chips ranging from 2012 to
2018. Indeed, the bootcheck memory area is never reset.
3.4.3
iOS Devices
On iOS 12 and 13 devices, including iOS 13.5, the Bluetooth
chip is neither hard reset when Bluetooth is disabled nor in
ﬂight mode. Under some circumstances, like a ﬁrmware crash,
a hard reset can happen. When Bluetooth is disabled via the
settings menu, we can still connect to other devices when
issuing commands on the chip. Executing commands on the
chip and getting HCI events passed to the host for processing
connection establishments requires btwake to be active. We
believe this to not be a showstopper when facing RCE, since
it is implemented as interrupt on the ﬁrmware and can be
reconﬁgured. Communication with the host is not necessarily
required when adding functions inside the ﬁrmware to handle
over-the-air requests.
While Bluetooth is enabled on an iPhone, it can be found
using BLE device scanning. The MAC address is randomized,
but an attacker can connect and request the ﬁrmware version.
BLE advertisements contained a device name in iOS 12 [46],
which has been ﬁxed in iOS 13. However, this anonymity does
not stop attackers, as Bluetooth requires proximate targets
either way. Moreover, Bluetooth has become an even more
integral part of iOS 13 due to features like Find My [3].
3.4.4 Android Devices
In contrast to iOS, Android 8 and 9 on a Samsung Galaxy
S8 as well as Android 9 and 10 on a Samsung Galaxy S10e
will disable and hard reset Bluetooth in ﬂight mode. However,
when not in ﬂight mode, the Bluetooth chip will not be reset by
turning off Bluetooth. The latest version we tested is Android
10 on the March 2020 patch level. This behavior does not
change when disabling location services. Whenever a user
turns off Bluetooth, only BLE and classic scanning for devices
are disabled. No HCI_Reset is issued. It is still possible to
connect to other devices.
Android 6 on a Nexus 5 resets memory contents and also
reloads the ﬁrmware patch ﬁle with each Bluetooth restart.
24    29th USENIX Security Symposium
USENIX Association
4 Proprietary Firmware Internals
5 The Frankenstein Framework
Understanding ﬁrmware internals is essential to master emu-
lation and ﬁnd on-chip RCE vulnerabilities. Figure 2 depicts
ﬁrmware internals, which we explain top-down in the follow-
ing. The details described in this section were discovered and
analyzed using the emulation techniques described later in
Section 5. Our analysis is based on the Cypress CYW20735
evaluation board and its ﬁrmware [18], which was shipped
with partial symbols in the WICED Studio 6.2 toolsuite [35].
For this ﬁrmware, no public documentation or source code is
available.
Interaction Between Host and Controller
4.1
In Bluetooth terminology, the host is the operating system, and
the controller is the chip running the ﬁrmware. A host com-
municates with the controller using the HCI. In the case of
the CYW20735 chip, HCI is sent via Universal Asynchronous
Receiver Transmitter (UART) to the host. Data is sent via the
same interface using Asynchronous Connection-Less (ACL)
and Synchronous Connection-Oriented (SCO) packets. Data
does not require any interpretation by the Link Manager (LM).
4.2 ThreadX
The ﬁrmware is based on ThreadX, a RTOS optimized for
embedded devices [22]. ThreadX implements threads, events,
queues, semaphores, and dynamic memory. The ﬁrmware
uses several threads, such as the LM, UART state machine,
and a special idle thread. Each thread implements a main
loop, waiting for events to be processed. When an event for a
waiting thread is created, a context switch is performed. Those
events are mainly used for inter-thread communication, i.e.,
pass an HCI packet from the LM to the UART state machine.
If all events are processed, the ﬁrmware enters an idle state. At
this point, new events are only generated by interrupts, such
as UART, the Bluetooth Core Scheduler (BCS), or timers.
4.3 Bluetooth Core Scheduler
The BCS is a separate component, handling time-critical Blue-
tooth events. The interrupt handler bluetoothCoreInt_C
calls it every 312.5 µs. This timing is the smallest unit of the
Bluetooth clock and corresponds to 1/2 slot length [12, p. 415].
The BCS kernel holds a pool of various tasks, whereas only a
single task can be active at any point in time. Tasks implement
ACL, device inquiry, paging, and more. They directly access
the hardware packet buffer and registers holding packet infor-
mation. For classic Bluetooth, which supports higher through-
put rates than BLE, the packet buffer is mapped into RAM
using a Direct Memory Access (DMA) mechanism. On re-
ception, the packet is copied to dynamic memory and handed
to the corresponding thread.
We call our ﬁrmware emulation framework Frankenstein be-
cause it modiﬁes a ﬁrmware image to bring it back to life in
a different environment. Snapshots of the state of the physi-
cal hardware during normal operation can be integrated and
ported to the emulated environment. In the following, we
showcase the capabilities of our approach on the CYW20735
Bluetooth controller. However, other ﬁrmwares are also sup-
ported. The emulated virtual Bluetooth chip can even be at-