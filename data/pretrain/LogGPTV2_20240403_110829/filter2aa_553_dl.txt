的参数，无返回值
puts("Enter a string (empty line to quit):");
while (s_gets(line, LEN) != NULL && line[0] != '\0')
{
while ((choice = showmenu()) != 'n')
{
switch (choice) // switch语句设置指针
{
case 'u': pfun = ToUpper;  break;
case 'l': pfun = ToLower;  break;
case 't': pfun = Transpose; break;
case 'o': pfun = Dummy;  break;
}
strcpy(copy, line);  // 为show()函数拷贝一份
show(pfun, copy);   // 根据用户的选择，使用选定的函数
}
puts("Enter a string (empty line to quit):");
}
puts("Bye!");
1111
return 0;
}
char showmenu(void)
{
char ans;
puts("Enter menu choice:");
puts("u) uppercase   l) lowercase");
puts("t) transposed case o) original case");
puts("n) next string");
ans = getchar();    // 获取用户的输入
ans = tolower(ans);  // 转换为小写
eatline();       // 清理输入行
while (strchr("ulton", ans) == NULL)
{
puts("Please enter a u, l, t, o, or n:");
ans = tolower(getchar());
eatline();
}
return ans;
1112
}
void eatline(void)
{
while (getchar() != '\n')
continue;
}
void ToUpper(char * str)
{
while (*str)
{
*str = toupper(*str);
str++;
}
}
void ToLower(char * str)
{
while (*str)
{
*str = tolower(*str);
1113
str++;
}
}
void Transpose(char * str)
{
while (*str)
{
if (islower(*str))
*str = toupper(*str);
else if (isupper(*str))
*str = tolower(*str);
str++;
}
}
void Dummy(char * str)
{
// 不改变字符串
}
void show(void(*fp)(char *), char * str)
1114
{
(*fp)(str);  // 把用户选定的函数作用于str
puts(str);  // 显示结果
}
char * s_gets(char * st, int n)
{
char * ret_val;
char * find;
ret_val = fgets(st, n, stdin);
if (ret_val)
{
find = strchr(st, '\n');  // 查找换行符
if (find)          // 如果地址不是NULL，
*find = '\0';     // 在此处放置一个空字符
else
while (getchar() != '\n')
continue;     // 清理输入行中剩余的字符
}
return ret_val;
1115
}
下面是该程序的输出示例：
Enter a string (empty line to quit):
Does C make you feel loopy?
Enter menu choice:
u) uppercase l) lowercase
t) transposed case o) original case
n) next string
t
dOES c MAKE YOU FEEL LOOPY?
Enter menu choice:
u) uppercase l) lowercase
t) transposed case o) original case
n) next string
l
does c make you feel loopy?
Enter menu choice:
u) uppercase l) lowercase
t) transposed case o) original case
1116
n) next string
n
Enter a string (empty line to quit):
Bye!
注意，ToUpper()、ToLower()、Transpose()和 
Dummy()函数的类型都相
同，所以这 
4 
个函数都可以赋给pfun指针。该程序把pfun作为show()的参
数，但是也可以直接把这4个函数中的任一个函数名作为参数，如
show(Transpose, copy)。
这种情况下，可以使用typedef。例如，该程序中可以这样写：
typedef void (*V_FP_CHARP)(char *);
void show (V_FP_CHARP fp, char *);
V_FP_CHARP pfun;
如果还想更复杂一些，可以声明并初始化一个函数指针的数组：
V_FP_CHARP arpf[4] = {ToUpper, ToLower, Transpose, Dummy};
然后把showmenu()函数的返回类型改为int，如果用户输入u，则返回0；
如果用户输入l，则返回2；如果用户输入t，则返回2，以此类推。可以把程
序中的switch语句替换成下面的while循环：
index = showmenu();
while (index >= 0 && index ）代
替结构名和点运算符来访问结构的各成员。和数组不同，结构名不是结构的
地址，要在结构名前使用&运算符才能获得结构的地址。
一贯以来，与结构相关的函数都使用指向结构的指针作为参数。现在的
C允许把结构作为参数传递，作为返回值和同类型结构之间赋值。然而，传
递结构的地址通常更有效。
联合使用与结构相同的语法。然而，联合的成员共享一个共同的存储空
间。联合同一时间内只能储存一个单独的数据项，不像结构那样同时储存多
种数据类型。也就是说，结构可以同时储存一个int类型数据、一个double类
型数据和一个char类型数据，而相应的联合只能保存一个int类型数据，或者
一个double类型数据，或者一个char类型数据。
通过枚举可以创建一系列代表整型常量（枚举常量）的符号和定义相关
联的枚举类型。
typedef工具可用于建立C标准类型的别名或缩写。
函数名代表函数的地址，可以把函数的地址作为参数传递给其他函数，
然后这些函数就可以使用被指向的函数。如果把特定函数的地址赋给一个名
为pf的函数指针，可以通过以下两种方式调用该函数：
#include  /* 提供sin()函数的原型：double sin(double) */
...
double (*pdf)(double);
1121
double x;
pdf = sin;
x = (*pdf)(1.2); // 调用sin(1.2)
x = pdf(1.2);   // 同样调用 sin(1.2)
1122
14.17 复习题
复习题的参考答案在附录A中。
1.下面的结构模板有什么问题：
structure {
char itable;
int num[20];
char * togs
}
2.下面是程序的一部分，输出是什么？
#include 
struct house {
float sqft;
int rooms;
int stories;
char address[40];
};
int main(void)
{
struct house fruzt = {1560.0, 6, 1, "22 Spiffo Road"};
1123
struct house *sign;
sign = &fruzt;
printf("%d %d\n", fruzt.rooms, sign->stories);
printf("%s \n", fruzt.address);
printf("%c %c\n", sign->address[3], fruzt.address[4]);
return 0;
}
3.设计一个结构模板储存一个月份名、该月份名的3个字母缩写、该月
的天数以及月份号。
4.定义一个数组，内含12个结构（第3题的结构类型）并初始化为一个