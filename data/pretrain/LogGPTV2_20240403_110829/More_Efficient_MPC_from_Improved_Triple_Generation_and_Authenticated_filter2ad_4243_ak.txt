(cid:0)Ki[rk] ⊕ Mk[ri](cid:1)(cid:17)
ri∆i ⊕(cid:76)
(cid:17)
i∈[n] ∆i
i∈[n] ∆i
i∈[n] Φi
=
=
(cid:17)
i∈[n]
i∈[n]
i∈[n]
i∈[n]
k(cid:54)=i
k(cid:54)=i
k(cid:54)=i
.
(cid:0)Ki[rk] ⊕ Mi[rk](cid:1)(cid:17)
39
Since lsb((cid:76)
i∈[n] Si) =
i∈[n] ∆i) = 1, it holds that
d = lsb((cid:76)
From zi = ri and z1 = r1⊕d, we have
(cid:16)(cid:76)
i∈[n] xi(cid:17) ∧(cid:16)(cid:76)
i∈[n] yi(cid:17) ⊕(cid:16)(cid:76)
i∈[n] ri(cid:17)
(cid:16)(cid:76)
i∈[n] xi(cid:17)∧(cid:16)(cid:76)
i∈[n] yi(cid:17)
= d⊕(cid:16)(cid:76)
i∈[n] ri(cid:17)
=(cid:76)
(cid:16)(cid:76)
(cid:16)(cid:76)
(cid:17)⊕d
i∈[n] Ti =(cid:76)
it is easy to see that the following holds:(cid:76)
i∈[n] xi(cid:17) ∧(cid:16)(cid:76)
i∈[n] yi(cid:17)
0. Therefore, no parties would abort.
i∈[n](Si⊕d∆i) =
=(cid:76)
i∈[n] zi,
i∈[n] Si
.
Lemma 7. Let A be the set of malicious parties. If the honest parties do not abort, then the parties would
(cid:17)
i∈[n] zi. Finally,
=
i∈[n] ∆i
i(cid:54)=1 and z1 := r1 ⊕ d(cid:48), the bit d(cid:48) is computed in Step 4c of protocol ΠLaAND, and
i=1 are deﬁned from authenticated shares (cid:104)x(cid:105),(cid:104)y(cid:105),(cid:104)r(cid:105) output by FaShare.
i,j, d(cid:48), S(cid:48)
Proof. Let U(cid:48)
i denote the values computed by a party Pi in the protocol ΠLaAND when some
malicious parties deviate the protocol, and Ui,j, d, Si, Ti be the values that Pi would have computed when
all parties are honest. For each i ∈ A, we deﬁne Ri,j := U(cid:48)
i ⊕ Ti. For
i,j ⊕ Ui,j for each j /∈ A and Qi := T (cid:48)
i, T (cid:48)
(cid:76)
k∈A Rk,j.
Firstly, we show that if d(cid:48) = d =
output a correct AND triple such that(cid:16)(cid:76)
where (cid:8)zi := ri(cid:9)
(cid:8)xi, yi, ri(cid:9)n
each j /∈ A, we also deﬁne Rj :=(cid:76)
i∈[n] xi(cid:17)∧(cid:16)(cid:76)
(cid:16)(cid:76)
(cid:16)(cid:76)
i∈[n] yi(cid:17)
i∈[n] ri(cid:17) ⊕ d(cid:48) =
(cid:16)(cid:76)
(cid:1) = Sj ⊕ xj · Rj. Note that we have(cid:76)
i ⊕(cid:76)
i =(cid:76)
i∈A (Ti ⊕ Qi) ⊕(cid:76)
=(cid:76)
i∈A (Ti ⊕ Qi) ⊕(cid:76)
=(cid:76)
i∈[n] Ti ⊕(cid:76)
=(cid:76)
i∈A Qi ⊕(cid:76)
=(cid:76)
(cid:76)
i∈A Qi ⊕(cid:76)
To make(cid:76)
(cid:76)
i∈[n] T (cid:48)
k∈A xjRk,j
i∈[n] T (cid:48)
i∈[n] zi =
i∈A T (cid:48)
i /∈A T (cid:48)
i
i = 0, the adversary must ﬁnd errors such that
i ⊕ d(cid:48)∆i)
(cid:0)Si ⊕ xiRi ⊕ d∆i ⊕ ∆i
i /∈A xiRi ⊕(cid:76)
i /∈A ∆i
i /∈A (S(cid:48)
i /∈A
i∈A Qi ⊕(cid:76)
i /∈A xiRi ⊕(cid:76)
i /∈A xiRi =(cid:76)
i /∈A ∆i.
i /∈A ∆i
(cid:1)
(1)
holds with probability 1. Since zi = ri for i (cid:54)= 1 and z1 = r1 ⊕ d(cid:48), we have:
i∈[n] xi(cid:17)∧
(cid:16)(cid:76)
i∈[n] zi =
i∈[n] ri(cid:17)
i∈[n] yi(cid:17)⊕(cid:16)(cid:76)
,(cid:76)
i∈[n] yi(cid:17)
i∈[n] xi(cid:17) ∧(cid:16)(cid:76)
(cid:16)(cid:76)
.
Below, we assume that d(cid:48) (cid:54)= d while at the same time that the check passes, and we will derive a contradiction
i,j⊕H(Mi[xj], i(cid:107)j(cid:107)t) =
from this. For each i ∈ A, an honest party Pj /∈ A would compute M(cid:48)
(cid:0)(cid:76)
xj · Ui,j ⊕ H(Mi[xj], i(cid:107)j(cid:107)t) ⊕ xj · Ri,j = Mi[xj]Φi ⊕ xj · Ri,j. Then Pj will compute S(cid:48)
j = Sj ⊕
i[xj]Φi := xj·U(cid:48)
i∈[n] Ti = 0. Thus, we know that
We here consider the case that there is only one honest party, because if there are at least two honest parties,
adversary A will have a lower probability to guarantee the above equation (1) holds. Let Pi∗ /∈ A be
If A succeeds to guess c bits of ∆i∗ for some c ∈ [κ] ∪ {0} via the (leak)
the unique honest party.
command of FaShare, the protocol will abort except with probability 1/2c. If A makes at most q queries
to random oracle H, then it will learn ∆i∗ from {Ui∗,j}j(cid:54)=i∗ sent by Pi∗ with probability at most q/2κ−1−c.
Therefore, the probability, that the protocol does not abort and the above equation (1) holds, is bounded by
q/2κ−1−c · 1/2c = q/2κ−1.
40
Theorem 6. Let H be a random oracle. Protocol ΠLaAND shown in Figure 14 securely realizes functionality
FLaAND in the (FaShare, FCom)-hybrid model.
Proof. Let A be a PPT adversary who corrupts a subset of parties A. We construct a PPT simulator S with
access to functionality FLaAND, which runs A as a subroutine and simulates A’s view. Before S aborts, it
outputs whatever A outputs.
Description of the simulation.
1. When playing the role of FaShare, S receives global key ∆i and Pi’s authenticated shares of (cid:104)x(cid:105),(cid:104)y(cid:105),(cid:104)r(cid:105)
from A for each i ∈ A. Then S samples d ← {0, 1}, and deﬁnes [zi]i := [ri]i for each i (cid:54)= 1 and
[z1]1 := [r1]1 ⊕ d. For i ∈ A, S sends ∆i and Pi’s authenticated shares for ((cid:104)x(cid:105),(cid:104)y(cid:105),(cid:104)z(cid:105)) to FLaAND.
2. For all (leak) queries on global keys of honest parties from A against FaShare, S forwards these queries
to FLaAND, and then sends the decision results to A. If FLaAND aborts, S aborts.
3. For each i /∈ A, S picks a random Ui,j ← {0, 1}κ as a message sent from Pi to Pj for each j (cid:54)= i. For
each i ∈ A, using global key ∆i and the Pi’s authenticated shares of (cid:104)x(cid:105),(cid:104)y(cid:105),(cid:104)r(cid:105), S computes locally
Ui,j for each j /∈ A, j (cid:54)= i, di := lsb(Si) and Ti := Si ⊕ d∆i, which will be sent by a semi-honest
party Pi, where Si is the value computed by semi-honest party Pi with its authenticated shares and the
messages {Uj,i}j(cid:54)=i.
4. For each i /∈ A, S acts as honest party Pi and sends Ui,j sampled in the previous step to Pj for each
i,j from A, and
j (cid:54)= i. For each i ∈ A, for every j /∈ A, j (cid:54)= i, S acts as honest party Pj and receives U(cid:48)
then computes Ri,j := U(cid:48)
i,j ⊕ Ui,j. For each i /∈ A, S computes Ri :=(cid:76)
i is equal to d = (cid:76)
i for each i ∈ A from A. Then, S computes qi := d(cid:48)
execution with probability 1−negl(κ). Therefore, S sets d(cid:48) := d. For each i /∈ A, S samples d(cid:48)
i ⊕ di and q :=
i∈[n] di in the real protocol
i ← {0, 1}
k∈A Rk,i.
i∈[n] d(cid:48)
i = d(cid:48) = d. Then, S emulates FCom and opens d(cid:48)
5. S emulates FCom and receives d(cid:48)
i∈A qi. By Lemma 7, we know that d(cid:48) = (cid:76)
(cid:76)
such that(cid:76)
each i ∈ A, and then computes Q :=(cid:76)
i ⊕ d(cid:48) · lsb(∆i) and(cid:76)
6. S plays the role of FCom, and receives T (cid:48)
i ) = d(cid:48)
i∈[n] d(cid:48)
i for each i /∈ A to all parties.
i ⊕Ti for
i from every corrupt party Pi ∈ A. S computes Qi := T (cid:48)
i∈A Qi. Then, S sends (Q, q,{Ri}i /∈A) to FLaAND as a selective
i ← {0, 1}κ
failure query on x-shares. If FLaAND aborts, S aborts. Otherwise, for each i /∈ A, S picks T (cid:48)
such that lsb(T (cid:48)
i = 0, and then opens it to all parties.
i∈[n] T (cid:48)
For each i /∈ A, we assume that A guesses ci bits of ∆i for some ci ∈ [κ]∪{0} with probability of aborting
1 − 1/2ci. Since H is a random oracle, the probability that (Mi[xj] ⊕ ∆i, i(cid:107)j(cid:107)t) for j (cid:54)= i has been queried
is bounded by q/2κ−1−ci, where q is the number of queries to H. Therefore, for each i /∈ A, j (cid:54)= i, random
value Ui,j simulated by S is indistinguishable from the value in the real protocol execution, except with
probability at most 1/2ci · q/2κ−1−ci = q/2κ−1, which is negligible in κ. In the FaShare-hybrid model, the
shares of all honest parties for (cid:104)y(cid:105),(cid:104)r(cid:105) are uniform and kept secret from the adversary’s view. Therefore,
{d(cid:48)
same as the one in the ideal world. By the proof of Lemma 7, we have that S(cid:48)
i /∈ A, d(cid:48)
i}i /∈A simulated by S have the same distribution as the bits sent in the real protocol execution.
Below, we show that the probability of aborting due to the selective failure attack in the real world is the
i = Si ⊕ xi · Ri. Thus, for each
i = di ⊕ xi · lsb(Ri). Due to d(cid:48)
i =(cid:76)
i∈[n] di ⊕(cid:76)
i = di ⊕ qi for each i ∈ A, we know that
i∈[n] d(cid:48)
i ⊕(cid:76)
i /∈A xi · lsb(Ri) ⊕(cid:76)
i /∈A d(cid:48)
i∈A qi
i∈A d(cid:48)
i
d(cid:48) =(cid:76)
=(cid:76)
= d ⊕(cid:76)
i /∈A xi · lsb(Ri) ⊕ q.
41
Based on the above equation, we have that
T (cid:48)
T (cid:48)
i =
i
(cid:77)
i∈[n]
=
=
T (cid:48)
i∈A
i∈A
i∈A
i /∈A
i /∈A
i ⊕ d(cid:48)∆i
i ⊕(cid:77)
(cid:77)
(Ti ⊕ Qi) ⊕(cid:77)
(cid:77)
(cid:0)S(cid:48)
(cid:1)
(cid:16)
Ti ⊕ xiRi ⊕(cid:0)(cid:77)
(Ti ⊕ Qi) ⊕(cid:77)
(cid:77)
xiRi ⊕(cid:16)
q ⊕(cid:77)
Qi ⊕(cid:77)
Ti ⊕(cid:77)
(cid:77)
(cid:17) ⊕(cid:16)