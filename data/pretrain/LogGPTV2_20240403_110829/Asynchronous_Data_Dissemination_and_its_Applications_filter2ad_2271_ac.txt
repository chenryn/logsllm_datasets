every honest node outputs 𝑀.
Proof. Clearly, every honest sender outputs 𝑀. Thus, we again
focus on honest recipient nodes.
We will first argue that an honest recipient node will never
output a wrong message. Suppose node 𝑖 outputs a polynomial 𝑝𝑟 (·)
as the message in the 𝑟th iteration in the reconstruction phase. Let
𝑇𝑟 be the set of symbols node 𝑖 used in iteration 𝑟. Then, 𝑝𝑟 (·) is
consistent with 2𝑡 +1 points from 𝑇𝑟 , of which at least 𝑡 +1 are from
honest nodes. All these points belong on both polynomial 𝑝(·) and
𝑝𝑟 (·). Since both 𝑝𝑟 (·) and 𝑝(·) are degree-𝑡 polynomials and agree
on 𝑡 + 1 points, 𝑝𝑟 (·) and 𝑝(·) are the same polynomial.
Next, we argue that every honest recipient node will eventually
output a message. From Lemma 3.2, at the end of the dispersal phase,
every honest node holds the correct symbol of 𝑀′ = RSEnc(𝑀, 𝑛, 𝑡 +
1) and will send it to all other nodes in its RECONSTRUCT messages.
Thus, every recipient node will eventually receive 2𝑡 + 1 correct
symbols from all honest nodes, and at most 𝑡 incorrect symbols
from malicious nodes. Hence, the RSDec algorithm will correct all
the errors and will return the correct message.
□
We will next argue about the total communication cost of our
ADD protocol.
Lemma 3.4. The total communication cost of our ADD protocol is
𝑂(𝑛|𝑀|+𝑛2).
Proof. Recall that |𝑀′|= 𝑛|𝑀|/(𝑡 + 1) = 𝑂(|𝑀|). During the dis-
persal phase, each sender node sends a message of size |𝑀′|/𝑛+𝑂(1)
to every other node. During the reconstruction phase, each node
sends a message of size |𝑀′|/𝑛+𝑂(1) to every other node. Therefore,
the total communication cost of the protocol is 𝑛|𝑀′|+𝑂(𝑛2), which
is the same as 𝑂(𝑛|𝑀|+𝑛2).
□
Using Lemma 3.2, 3.3 and 3.4, we get the following theorem.
Theorem 3.5. In an asynchronous network of 𝑛 = 3𝑡 + 1 nodes, of
which up to 𝑡 nodes can be malicous, Algorithm 1 solves ADD with a
communication complexity of 𝑂(𝑛|𝑀|+𝑛2).
Remark. One subtle point to note here is that the Reed-Solomon
code requires the field size to be larger than 𝑛. Hence, each symbol
in the encoded codeword is of size 𝑂(log 𝑛). As a result, the size
of the encoded message is at least 𝑂(𝑛 log 𝑛). Thus, ADD is more
useful when the message size is Ω(𝑛 log 𝑛) which is the case for
our RBCand AVSS applications. We will give a lower bound in
1. Input: 2. RSEnc1. Input: 2.RSEnc1. Input: Node 1Node 2Node 3Node 43. Output  3. Output OEC3. Output  Session 10C: Foundations CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2708Algorithm 2 Bracha’s RBC [14]
1: // only broadcaster node
2: input 𝑀
3: send ⟨PROPOSE, 𝑀⟩ to all
4: // all nodes
5: input 𝑃(·) // predicate 𝑃(·) returns true unless otherwise specified.
6: upon receiving ⟨PROPOSE, 𝑀⟩ from the broadcaster do
7:
8:
9: upon receiving 2𝑡 +1 ⟨ECHO, 𝑀⟩ messages and not having sent a READY
send ⟨ECHO, 𝑀⟩ to all
if 𝑃(𝑀) then
send ⟨READY, 𝑀⟩ to all
10:
11: upon receiving 𝑡 +1 ⟨READY, 𝑀⟩ messages and not having sent a READY
message do
message do
send ⟨READY, 𝑀⟩ to all
12:
13: upon receiving 2𝑡 + 1 ⟨READY, 𝑀⟩ messages do
14:
output 𝑀
§ 6 showing that the communication complexity of Algorithm 1 is
optimal for |𝑀|≥ Θ(𝑛 log 𝑛).
Now let us analyze the computation cost of each node in Algo-
rithm 1. The encoding step at every sender during the dispersal
phase involves 𝑂(𝑛2) operations (additions and multiplications) in
Z𝑞 (the recipient nodes do nothing). During the reconstruction
phase, each recipient node needs to invoke the RSDec algorithm
anywhere between one to 𝑡 times, and each invocation of RSDec
requires 𝑂(𝑛 polylog(𝑛)) computation if we use the decoding algo-
rithm of Gao [28].
4 RELIABLE BROADCAST
Reliable broadcast (RBC) was introduced by Bracha [14]. In the
same paper, Bracha provided a RBC protocol for a single bit with a
communication complexity of 𝑂(𝑛2). In this paper, we present two
RBC protocols for long messages. Both protocols are built upon
Bracha’s RBC. The first protocol is conceptually simpler and uses
Bracha’s RBC and ADD in a modular way. However, it requires
two additional rounds of communication than Bracha’s RBC. Our
second protocol merges the steps of Bracha’s RBC and ADD and
matches the round complexity of Bracha’s RBC.
Definition 4.1 (Reliable Broadcast). A protocol for a set of nodes
{1, ...., 𝑛}, where a distinguished node called the broadcaster holds
an initial input 𝑀 of size |𝑀|, is a reliable broadcast protocol, if the
following properties hold
• Agreement. If an honest node outputs a message 𝑀′ and another
honest node outputs a message 𝑀′′, then 𝑀′ = 𝑀′′.
• Validity. If the broadcaster is honest, all honest nodes eventually
• Totality. If an honest node outputs a message, then every honest
output the message 𝑀.
node eventually outputs a message.
Since our RBC protocols rely upon Bracha’s RBC protocol [14],
we first describe Bracha’s RBC protocol in Algorithm 2. The main
idea of Bracha’s RBC is to use quorum intersection (of ECHO mes-
sages) for agreement and use vote amplification (of READY messages)
for totality. However, the protocol needs to attach the input 𝑀 in
every message, leading to a high communication cost of 𝑂(𝑛2|𝑀|).
Algorithm 3 ADD-based RBC for long messages
1: // only broadcaster node
2: input 𝑀
3: send ⟨PROPOSE, 𝑀⟩ to all
4: // all nodes
5: input 𝑃(·) // predicate 𝑃(·) returns true unless otherwise specified.
6: upon receiving ⟨PROPOSE, 𝑀⟩ from the broadcaster do
7:
8:
9:
10: upon receiving 2𝑡 + 1 ⟨ECHO, ℎ⟩ messages and not having sent a READY
let ℎ := hash(𝑀)
send ⟨ECHO, ℎ⟩ to all
if 𝑃(𝑀) then
send ⟨READY, ℎ⟩ to all
11:
12: upon receiving 𝑡 + 1 ⟨READY, ℎ⟩ messages and not having sent a READY
message do
message do
send ⟨READY, ℎ⟩ to all
if received ⟨PROPOSE, 𝑀⟩ and ℎ = hash(𝑀) then
13:
14: upon receiving 2𝑡 + 1 ⟨READY, ℎ⟩ messages do
15:
16:
17:
18:
ADD(𝑀)
ADD(⊥)
else
Algorithm 4 Four-round RBC protocol for long messages
1: // only broadcaster node
2: input 𝑀
3: send ⟨PROPOSE, 𝑀⟩ to all
4: // all nodes
5: input 𝑃(·) // predicate 𝑃(·) returns true unless otherwise specified.
6: upon receiving ⟨PROPOSE, 𝑀⟩ from the broadcaster do
7:
8:
9:
10:
11: upon receiving 2𝑡 +1 ⟨ECHO, 𝑚𝑖, ℎ⟩ matching messages and not having
Let ℎ := hash(𝑀)
Let 𝑀′ := [𝑚1, 𝑚2, . . . , 𝑚𝑛] := RSEnc(𝑀𝑖, 𝑛, 𝑡 + 1)
send ⟨ECHO, 𝑚 𝑗 , ℎ⟩ to node 𝑗 for 𝑗 = 1, 2, . . . , 𝑛
if 𝑃(𝑀) then
sent a READY message do
send ⟨READY, 𝑚𝑖, ℎ⟩ to all
12:
13: upon receiving 𝑡 + 1 ⟨READY,∗, ℎ⟩ messages and not having sent a
READY message do
Wait for 𝑡 + 1 matching ⟨ECHO, 𝑚′
send ⟨READY, 𝑚′
𝑖, ℎ⟩ to all
𝑖, ℎ⟩
14:
15:
16: For the first ⟨READY, 𝑚∗
𝑇ℎ initialized as {}
17: for 0 ≤ 𝑟 ≤ 𝑡 do
18:
19:
20:
21:
// Error Correction
upon |𝑇ℎ |≥ 2𝑡 + 𝑟 + 1 do
Let 𝑀′ be coefficients of RSDec(𝑡 + 1, 𝑟,𝑇 )
if hash(𝑀′) = ℎ then
output 𝑀′ and return
𝑗 , ℎ⟩ received from node 𝑗, add (𝑗, 𝑚∗
𝑗 ) to 𝑇ℎ //
We modify the RBC protocol interface to add an external check
before sending the ECHO message, denote it as a predicate 𝑃(·). We
do so to make our AVSS and ACSS protocols use RBC in a modular
way. For standard RBC, this step can be skipped, i.e., 𝑃(·) always
returns true.
We give our first RBC protocol for long messages in Algorithm 3
where we highlight the changes from Bracha’s RBC in blue. We
then prove it achieves all the required properties of RBC. We give
our second RBC protocol in Algorithm 4 and defer its proofs to
Appendix A.
Session 10C: Foundations CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2709The core idea in our first RBC protocol is to run the Bracha’s
RBC only on the hash of the message 𝑀, and then disseminate
the message 𝑀 using ADD. The previous best RBC protocol for
long messages due to Cachin and Tessaro [16] also runs Bracha’s
RBC on the hash digest. However, their protocol requires attaching
Merkle path proofs in the messages, which inevitably incurs a cost
of 𝑂(𝑛|𝑀|+𝜅𝑛2 log 𝑛). Our ADD protocol removes these Merkle path
proofs and leads to a total communication cost of 𝑂(𝑛|𝑀|+𝜅𝑛2) for
RBC.
More specifically, the broadcaster in our ADD-based RBC pro-
tocol first sends 𝑀 to all other nodes. Every honest node, upon
receiving the message from the broadcaster, first participates in
a Bracha’s RBC on ℎ, the hash digest of 𝑀. Once Bracha’s RBC
terminates, i.e., a node receives 2𝑡 + 1 READY messages for some ℎ,
the node inputs 𝑀 to the ADD protocol if ℎ = hash(𝑀). Otherwise
(if ℎ ̸= hash(𝑀) or if the node has not received a PROPOSE message
from the broadcaster), the node inputs ⊥ to ADD. Recall that in
Bracha’s RBC, a node outputs 𝑀 upon receiving 2𝑡 + 1 READY mes-
sages for 𝑀, which implies at least 𝑡 + 1 honest nodes have received
𝑀 from the broadcaster before sending ECHO for 𝑀. Similarly, in
our RBC protocol, when a node receives 2𝑡 + 1 READY messages for
some hash ℎ, at least 𝑡 + 1 honest nodes have received the message
𝑀 such that hash(𝑀) = ℎ Moreover, the agreement property of the
Bracha’s RBC guarantees that no two honest nodes will agree on
different hashes, and thus any honest node that receives 𝑀′ ̸= 𝑀
from the broadcaster will input ⊥ to the ADD. Therefore, the ini-
tial condition of ADD is met. Hence, the guarantees of our ADD
protocol ensure the desired properties of the RBC protocol.
The four-round RBC protocol (Algorithm 4) saves two rounds
by merging our ADD into Bracha’s RBC, thanks to the similarity
in their message patterns. More specifically, the ECHO and READY
messages in Bracha’s RBC now also attach the symbols of the
message which were sent separately in ADD before.
4.1 Analysis of Algorithm 3
First, we show that running Bracha’s RBC on the hash ℎ sets up
the initial condition for ADD.
Lemma 4.2. If any honest node executes ADD(𝑀), then there are
at least 2𝑡 + 1 nodes, among which at least 𝑡 + 1 are honest nodes, that
receive 𝑀 from the broadcaster and send ⟨ECHO, ℎ⟩ to all other nodes
where ℎ = hash(𝑀).
Proof. An honest node 𝑖 executes ADD(𝑀) only upon receiving
⟨READY, ℎ = hash(𝑀)⟩ messages from a quorum Q2 of 2𝑡 + 1 nodes.
Since there are at most 𝑡 malicious nodes in the system, at least 𝑡 +1
of the nodes in Q2 are honest. This implies that at least one honest
node receives ⟨ECHO, ℎ⟩ from a quorum Q1 of 2𝑡 + 1 nodes. Again,