adding the trusted process also caused a serious problem: 
it made the security policy that SIGMA enforced difficult 
to  understand.  Interviews  held  during  the  MME  revealed 
that  few  SIGMA  users  clearly  understood  the  security 
policy  that  was  being  enforced.  It  was  an  assumption  of 
SIGMA's  design  that  user  confirmation  of  security-
relevant  operations  would  prevent  security  violations. 
However,  because  users  issued  confirmations  without 
comprehending  why  these  confirmations  were  needed, 
this assumption was unwarranted. 
3.2  AFDSC Multics 
In the mid-1970s, Multics was modified to include the 
Access  Isolation  Mechanism  (AIM).  This  version  of 
Multics,  which  has  been  used  at  the  ADFSC  for  several 
years,  supports  the  assignment  of  security  levels  to 
processes  and  segments  and  enforces  the  Bell-LaPadula 
model.  Multics-AIM  also  contains  trusted  functions, 
invoked  via  a  special  operating  system  gate,  to  enforce 
access control on objects smaller than a segment, to allow 
security  officers  to  downgrade  files  in  response  to  user 
requests, and to provide other "privileged" operations. 
Although  Multics-AIM 
is  generally  considered  a 
success, experience with it at the AFDSC illustrates some 
difficulties  that  arise  from  strict  enforcement  of  the  Bell-
LaPadula  axioms  and  from  the  use  of  trusted  functions. 
For  example,  if  a  user  operating  at  the  TOP  SECRET 
3 Releasing a message is security-relevant because it allows a wider set 
of  users  to  view  the  message  and  because  it  certifies  that  a  particular 
military organization originated the message. 
level  wishes  to  send  an  UNCLASSIFIED  message  to 
another user operating at the SECRET level, Multics-AIM 
requires  that  the  message  be  treated  as  though  it  were 
TOP  SECRET.  The  recipient  is  not  notified of its arrival 
until he logs in as a TOP SECRET user. 
Problems  also  occur  when  a  user  operating  at  a  low 
security level tries to send mail to a user at a higher level. 
Mailbox  segments  in  Multics-AIM  are  special:  they  have 
both  a  minimum  and  maximum  access 
level.  The 
minimum  is  defined  by  the  level  of  the  directory  that 
contains  the  mailbox  segment.  Thus,  a  user  operating  at 
UNCLASSIFIED is prohibited from sending a message to 
a mailbox located in a SECRET directory. In this case, the 
mail  could  not  be  sent  unless  the  sender  were  to  log  out 
and  log  back  in  at  the  SECRET  level.  Because  this 
situation  arises  frequently,  system  administrators  are 
allowed  to  invoke  a  trusted  function  that  permits  them  to 
send mail without logging out and logging back in again. 
3.3  KSOS 
is 
incompatible  with 
KSOS  [17]  was  to  be  a  security-kernel  based  system 
with  a  UNIX-compatible  program  interface  on  a  DEC 
PDP-11.  The  KSOS  security  kernel  was  designed  to 
strictly enforce the axioms of the Bell-LaPadula model on 
user-provided programs. To handle those situations where 
strict  enforcement 
functional 
requirements,  the  kernel  recognizes  certain  "privileges" 
that  allow  some  processes  to  circumvent  parts  of  this 
enforcement.  These  privileges  include  the  ability  to 
violate  the  *-property  to  change  the  security  or  integrity 
level  [5]  of  objects,  and  to  invoke  certain  security  kernel 
functions. KSOS developers defined a special category of 
software,  called  Non-Kernel  Security  Related  (NKSR), 
that  supports  such  privileges.  For  example,  the  "Secure 
Server"  of  the  KSOS  NKSR  allows  a  user  to  reduce  the 
security level of files he owns and to print a file classified 
at a lower security level without raising the security level 
of  the  printed  output  to  the  level  of  this  process. Both of 
these  operations  would  be  prohibited  by 
strict 
enforcement of the Bell-LaPadula axioms. 
3.4  Guard 
The  Guard  message  filter  [24]  is  a  computer  system 
that  supports  the  monitoring  and  sanitization  of  queries 
and responses between two database systems operating at 
different security levels. When a user of the less sensitive 
system  requests  data  from  the  more  sensitive  system,  a 
human operator of the Guard must review the response to 
ensure that it contains only data that the user is authorized 
to  see.  The  operator  performs  this  review  via  a  visual 
display terminal. 
One  version  of  the  Guard  is  being  built  on  a  security 
kernel  that  enforces  the  axioms  of  the  Bell-LaPadula 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:07:55 UTC from IEEE Xplore.  Restrictions apply. 
model.  However,  strict  enforcement  of  the  *-property  is 
not  possible  since  a  major  requirement  of  the  Guard 
system  is  to  allow  the  operator  to  violate  it,  that  is,  to 
allow  information  from  the  more  sensitive  system  to  be 
sanitized  and  "downgraded"  (or  simply  downgraded),  so 
that  it  can  be  passed  to  systems  that  store  less  sensitive 
information.  An  important  component  of  this  version's 
design 
this 
downgrading. 
trusted  process 
that  performs 
the 
is 
3.5  Lessons Learned 
that  users  require 
Experience has shown that, on one hand, the axioms of 
the  Bell-LaPadula  model  are  overly  restrictive:  they 
disallow  operations 
in  practical 
applications.  On  the  other  hand,  trusted  subjects,  which 
are  the  mechanism  provided  to  overcome  some  of  these 
restrictions,  are  not  restricted  enough.  The  formal  model 
provides no constraints on how trusted subjects violate the 
*-property. Consequently, developers have had to develop 
ad  hoc  specifications  for  the  desired  behavior  of  trusted 
processes  in  each  individual  system.  While  such  an 
approach  relaxes  the  rigid  enforcement of the *-property, 
it introduces two additional problems: 
(1)  Use  of  the  axioms  in  conjunction  with  trusted 
processes  makes  it  difficult  to  determine  the  exact  nature 
of  the  security  rules  that  a  system  enforces.  In  the  MME 
and  the  other  three  projects  described,  the  security  rules 
enforced by the system as a whole are not the same as the 
axioms  of  the  model.  The  actual  security  rules  enforced 
by  each  system  include  both  the  axioms  of  the  Bell-
LaPadula model and the exceptions allowed by the trusted 
processes. 
(2)  Because  the  actual  policies  in  practical  systems 
deviate  from  the  Bell-LaPadula  axioms,  any  inductive 
proof  that  such  a  system  maintains  a  secure  state,  based 
on  strict  enforcement  of  the  axioms  of  the  model,  is  a 
proof  about  only  part  of  the  system  and  cannot  apply  to 
the  entire  system.  Moreover,  trusted  subjects  do  not 
address directly4 the two other problem areas of the Bell-
LaPadula  model  discussed  above,  that  is,  its  failure  to 
support  multilevel  objects  and  its  lack  of  a  structure  for 
including application-dependent security rules. 
4 Indirectly, trusted subjects can implement any arbitrary security policy. 
For  example,  a  trusted  subject that acts as a type manager can provide 
multilevel  objects,  and  application-dependent  security  rules  can  be 
enforced by making controlled operations available only through trusted 
subjects.  Our  point  here  is  that  the  notion  of  trusted  subjects  in  itself 
serves  only  to  draw  a  circle  around  the  aspects  of  security  policy  not 
addressed by the axioms of the Bell-LaPadula model. It does not provide 
any framework for formulating that policy. 
4  Military Message System (MMS) 
Security Model 
Our  goal  is  to  define  a  single,  integrated  security 
model  that  captures  the  security  policy  that  a  military 
message  system  must  enforce,  without  mentioning  the 
techniques  or  mechanisms  used  to  implement  the  system 
or  to  enforce  the  policy.  The  security  model  defined 
below is intended to allow users to understand security in 
the  context  of  message  systems,  to  guide  the  design  of 
military  message  systems,  and  to  allow  certifiers  to 
evaluate  such  systems.  The  model  presented  here  is 
informal; it is the basis for the formal model presented in 
the following section. 
In  this  section  we  define  some  terms,  use  them  to 
describe  how  a  user  views  the  system's  operation,  and 
state  assumptions  and  assertions,  based  on  the  terms  and 
the  user's  view  of  operation,  that  are  intended  to  be 
sufficient  to  assure  the  security  of  the  system.  The 
security  model  comprises  the  definitions,  user's  view  of 
operation,  the  assumptions,  and  the  assertions.  It  is  a 
revision of earlier work [13, 16]. 
 The  model 
This model does not address auditing, although secure 
message  systems  clearly  require  auditing  mechanisms. 
The  existence  of  an  audit  trail  may  deter  potential 
penetrators,  but  auditing  is  primarily  a  technique  for 
providing  accountability  and 
for  detecting  security 
violations  after  the  fact.  The  security  model  focuses  on 
assertions that, if correctly enforced, will prevent security 
violations.  Consequently,  assertions  and  assumptions 
about  auditing  do  not  appear;  in  a  more  detailed  system 
specification, auditing requirements would be explicit. 
itself  places  no  constraints  on 
the 
techniques  used  to  implement  a  military  message  system 
or to verify that a particular system correctly enforces the 
assertions  of  the  model.  An  implementation  based  on  a 
complete  formal  specification  and  proof  of  correctness 
would be as admissible as one based on a security kernel 
and  trusted  processes,  or  even  one  employing  standard 
software  engineering  techniques  for  design,  testing,  and 
validation.  By  separating  the  statement  of  the  security 
model 
implementation  and 
verification,  we  can  allow  for  advances  in  these  areas 
without depending on them. 
the  concerns  of 
from 
4.1  Definitions 
The  definitions  below  correspond  in  most  cases  to 
those in general use and are given here simply to establish 
an  explicit  basis  for  the  model.  We  distinguish  between 
objects,  which  are  single-level,  and  containers,  which are 
multilevel.  We  also  introduce  the  concept  of  user  roles, 
which define job-related sets of privileges.  
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:07:55 UTC from IEEE Xplore.  Restrictions apply. 
that 
a 
includes 
sensitivity 
Classification5:    a  designation  attached  to  information 
the  damage  that  could  be  caused  by 
that  reflects 
information.  A 
unauthorized  disclosure  of 
classification 
level 
(UNCLASSIFIED,  CONFIDENTIAL,  SECRET,  or  TOP 
SECRET)  and  a  set  of  zero  or  more  compartments 
(CRYPTO,  NUCLEAR,  etc.).  The  set  of  classifications, 
together  with 
the  allowed 
information flows between levels, form a lattice [7]. Most 
dissemination  controls,  such  as  NATO,  NOFORN,  and 
NOCONTRACTOR,  can  be  handled  as  additional 
compartment names. 
relation  defining 
the 
Clearance:    the  degree  of  trust  associated  with  a 
person.  This  is  established  on  the  basis  of  background 
investigations and the tasks performed by the person. It is 
expressed  in  the  same  way  as  classifications  are,  as  a 
sensitivity level and a {possibly null) compartment set. In 
a  secure  MMS,  each  user  will  have  a  clearance,  and 
operations  performed  by  the  MMS  for  that  user  may 
check  the  user's  clearance  and  the  classifications  of 
objects to be operated on. Some other characteristics of a 
user,  such  as  his  nationality  and  employer,  may  also  be 
treated  as  part  of  this  clearance  so  that  dissemination 
controls are handled properly. 
UserID:  a character string used to denote a user of the 
system. To use the MMS, a person must present a userID 
to  the  system,  and  the  system  must  authenticate  that  the 
user  is  the  person  corresponding  to  that  userID.  This 
procedure  is  called  logging  in.  Since  clearances  are 
recorded on the basis of one per userID, each user should 
have a unique userID. 
the 
job  a  user 
User:  a person who is authorized to use the MMS. 
Role: 
is  performing,  such  as 
downgrader,  releaser,  distributor,  and  so  on.  A  user  is 
always associated with at least one role at any instant, and 
the  user  can  change  roles  during  a  session.  To  act  in  a 