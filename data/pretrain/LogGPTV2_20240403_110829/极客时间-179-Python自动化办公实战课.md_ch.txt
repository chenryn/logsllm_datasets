# 关闭游标        cur.close()        
# 关闭连接        conn.close()通过执行这段代码，你可以给通讯录增加一个用户"Tom"，以及他的电话号码"12377778888"。在这段数据写入的代码中，有两点需要你注意，分别是SQL语句和数据的拆分，以及写入后的提交功能。**SQL 语句和数据的拆分**，是指用于写入数据的 SQL语句"INSERT"语句与真正要写入表中的数据需要保存在不同的变量中。当它们在真正执行SQL 语句的那一刻，才会由 excute ()函数进行合并。写入两个变量的好处在于，数据往往是经过计算或用户输入得到的，而 SQL语句是可以复用的，把数值脱离 SQL 语句可以更方便地在 Python中进行处理。所以我也建议你在进行数据写入时，都采用这种拆分数据和 SQL语句的方法，这样会比一条 SQL 语句中既包含 INSERT语句，又包含数据，灵活性上要提高很多。另一个需要注意的是在执行 SQL 语句写入表之后，需要使用 commit()函数进行数据提交。这是 SQLite的事务机制导致的，因为使用事务可以避免数据不一致的情况。事务其实是个比较大的话题，也是一个比较系统的工程，要想把事务的细节讲清楚，那就能写一本书了。不过由于SQLite没有支持较为完整的事务以及办公自动化场景，所以今天这节课我就不展开为你讲解事务的概念了，这也并不影响你对今天这节课的理解。数据的查询在实现了数据写入之后，我们继续来看一下如何使用 SQL 实现数据的读取。从SQLite 读取数据的代码如下：    import sqlite3    import pathlib    
# 数据库文件的路径和文件名称    dir = pathlib.PurePath(__file__).parent    db = pathlib.PurePath(dir, "contents.db")    
# 创建连接    conn = sqlite3.connect(db)    