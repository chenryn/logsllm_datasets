  * I have read the Contributing Guidelines for this project.
  * I agree to follow the Code of Conduct that this project adheres to.
  * I have searched the issue tracker for an issue that matches the one I want to file, without success.
### Issue Details
  * **Electron Version:** 8.1.1
  * **Operating System:** Windows 10 (1709)
  * **Last Known Working Electron version:** n/a - relates to new allowRendererProcessReuse flag; works fine without it
### Expected Behavior
I am using Node's http/https modules to ping a site in a renderer process. I
expect that I can successfully ping a site like "https://google.com" without
timing out when `app.allowRendererProcessReuse` is `true`.
### Actual Behavior
The request always times out.
### To Reproduce
Code below, but the gist is this.
I navigate a window to a page. Then, I navigate the window to another page and
ping the site with the http/https modules.
When `allowRendererProcessReuse` is set, the requests always time out.
When I unset the flag, everything works fine.  
When I load the second page (that makes the requests) instead of the first,
everything works fine.  
When I explicitly kill the renderer process from the first navigation, and
then do the second navigation, everything works fine.
Something about keeping the old renderer around makes it not work for some
reason.
main.ts:
    import "electron";
    function createMainWindow(): void {
    	const { BrowserWindow, ipcMain } = require("electron");
    	const mainWindow: Electron.BrowserWindow = new BrowserWindow({
    		show: true,
    		webPreferences: {
    			nodeIntegration: true
    		}
    	});
    	mainWindow.loadFile("./firstPage.html"); // Workaround 2: load the secondPage instead of the firstPage
    	ipcMain.once("next", () => {
    		mainWindow.loadFile("./secondPage.html");
    		mainWindow.webContents.openDevTools();
    	});
    }
    export async function main(): Promise {
    	const { app } = require("electron");
    	app.allowRendererProcessReuse = true; // Workaround 1: comment this out
    	app.on("window-all-closed", () => {
    		app.quit();
    	});
    	await app.whenReady();
    	createMainWindow();
    }
    if (require.main === module) {
    	main();
    }
firstPage.html:
    	Accept
firstPage.ts:
    document.getElementById("acceptButton").onclick = () => {
    	require("electron").ipcRenderer.send("next");
    	// Workaround 3: Do a process.exit() here and await the loadFile(secondPage) navigation. This causes us to create a new renderer process
    };
secondPage.html:
    		Navigate
secondPage.ts:
    const https = require("https");
    const http = require("http");
    const dialog = require("electron").remote.dialog;
    document.getElementById("navigateButton").onclick = () => {
    	const url: string = (document.getElementById("url") as HTMLInputElement).value.trim();
    	const parsedURL: URL = new URL(url);
    	let requestMethod = http.request;
    	if (parsedURL.protocol === "https:") {
    		requestMethod = https.request;
    	}
    	const clientRequest = requestMethod(url, { method: "HEAD", timeout: 3000 }, () => {
    		dialog.showMessageBox({ message: "valid" });
    	});
    	clientRequest.on("timeout", () => {
    		dialog.showMessageBox({ message: "timed out" });
    		clientRequest.abort();
    	});
    	clientRequest.end();
    };
Start the app. Click the button to go to the second page. Click the navigate
button (or try another URL). You will see the "timed out" dialog appear
instead of the "valid" dialog.