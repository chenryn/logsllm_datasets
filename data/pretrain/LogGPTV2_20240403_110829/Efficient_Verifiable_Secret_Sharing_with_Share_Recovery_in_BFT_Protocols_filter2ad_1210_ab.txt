that has constant size. This commitment scheme leverages the hard-
ness of the q-Strong Diffe-Hellman assumption in some group with
order p where д is a generator. In Kate et al., a commitment c(s(·))
is defined as c(s(·)) = дs(τ), where τ is unknown to all participants
and s(τ) is the polynomial s evaluated at τ . To commit to a partic-
ular evaluation (or share) s(i), the dealer also produces a witness,
s(τ )−s(i)
. Given any triple of share, witness and commitment, it
д
is possible to verify that the share is indeed the evaluation of the
polynomial at that point using a bilinear map. The technique was
employed by Backes et al. [3] to construct an asynchronous VSS
scheme called eAVSS-SC that incurs both message and communica-
tion complexities O(n2).
In eAVSS-SC, a dealer chooses, in addition to the secret polyno-
mial s, another n polynomials ˆsi, i = 1..n. ˆsi encodes share i of s
for recovery purposes. Each of s, ˆsi, has a constant-size polynomial
commitment due to the scheme by Kate et al. [29]. The commit-
ments are constructed such that a commitment of ˆsi validates it
as a share of s. Using the homomorphism of the commitments,
τ −i
eAVSS-SC weaves into the sharing protocol the dissemination of
commitments while incurring both message complexity and bit
complexity O(n2).
2.3 Share Recovery Techniques
AVSS schemes, like the above, and proactive secret sharing [28]
present possible solutions to the problem of verifiable secret sharing
with share recovery. However, these schemes are not amenable for
use in Byzantine Fault Tolerance protocols.
In prior AVSS schemes, the dealer computes O(n2) commitment
values and sends O(n2) bits. Hence, to date, all asynchronous VSS
solutions require a dealer storing a single secret to incur O(n2)
communication complexities, which means that a replica’s CPU
must typically perform O(n) cryptographic operations for a single
sharing. This can be quite prohibitive for moderate n values, e.g.,
n = 1, 000, and infeasible for n = 50, 000. Fundamentally, prior
asynchronous VSS schemes allow share recovery by having the
dealer enumerate all pairwise responses between replicas during
recovery. In other words, if replica i is helping replica ˆi recover,
the dealer has shared with i the response to send to ˆi. This must
necessarily incur quadratic bandwidth on the dealer and linear CPU
overhead on each replica.
Prior proactive secret sharing schemes (PSS) offer other ap-
proaches to share recovery. Some PSS schemes have the dealer
enumerate all pairwise responses through the use of bivariate poly-
nomials [34, 40]. This approach shares the same performance over-
head and weaknesses as state-of-the-art AVSS schemes. Other PSS
schemes use a resharing technique [6, 39], where each replica first
constructs a secret sharing of their original share and then re-
constructs a new share through interpolation. While this has low
overhead in the sharing phase, this forces every replica to obtain a
new share whenever a single replica needs to initiate share recov-
ery. A third technique employed by PSS schemes is batching [4, 5],
where the cost is still quadratic but O(n) shares can be shared in
parallel. Batching was also leveraged by a recent AVSS protocol to
have a linear amortized overhead [1]. While batching has the same
asymptotic overheads as KZG-VSSR in a failure free environment,
it requires waiting for O(n) shares which incurs high latency when
n is large.
VSSR uses a different approach, where we make use of a dis-
tributed pseudorandom function (DPRF) and generate recovery
responses dynamically using information shared in the setup phase.
Table 1 compares the bandwidth costs of the different ways to
instantiate VSSR.
2.4 VSSR
Our solution, named VSSR (for ‘VSS with Recovery’), is the first in
which the replica work is constant per sharing in the failure free
case. In the worst case, when there are f participant failures or
the dealer is Byzantine, the overhead is still quadratic as in prior
schemes. We present a strawman solution that introduces the key
insight behind VSSR and describe how our final solution fixes the
issues present in the strawman.
Our strawman uses proactive secret sharing [28] to help a partici-
pant re-compute the original share that they were given. Informally,
suppose that a replica i has share s(i), which is simply a point on the
Technique
Sharing Phase
Recovery Phase
Bivariate Polynomials [40] O(n2)
O(n)
O(n2)
O(n)
O(n2)
Resharing [34]
Batching [1]
KZG-VSSR
Ped-VSSR
Client Replica
O(n)
O(1)
O(n)
O(1)
O(n)
Replica
O(n2)
O(n2)
O(n2)
O(n)
O(n2)
Table 1: Communication overhead of possible VSSR designs
in the typical scenario when the dealer is honest. n denotes
the number of replicas. For the recovery phase, we present
the cost of the recovering replica.
polynomial s. In order to recover this share, we are given a Recovery
Polynomial (RP), which is random at every point except for i, where
si(i) = 0. Thus, if the recovering replica i receives shares of the sum
of the original polynomial and the masking polynomial, si(·) + s(·),
it can recover its own share without obtaining any information
about any other share.
The strawman solution assumes that the recovery polynomial
is given for free. We solve this by having the dealer construct
the recovery polynomials and sharing it with the replicas. The
system assumes optimistically that the dealer is honest in sharing
the recovery polynomials. If, later on, the dealer is found to be
dishonest, then the privacy guarantee for the dealer is broken and
the secret is revealed. At this point, our scheme still pays a quadratic
overhead in the common case.
The second problem our strawman solution has is that it requires
one recovery polynomial for each share. This means that the dealer
must construct n recovery polynomials and incur a quadratic over-
head. We bring this overhead down by a factor of f , which equals
n
3 in our case, by allowing f shares to be recovered by a single
recovery polynomial. We do this by removing the constraint that
si(i) = 0 and using a distributed pseudorandom function in order
to communicate the value of si(i) efficiently. This means that the
dealer constructs four recovery polynomials, which is a constant
factor overhead to the original VSS scheme.
We now present a high level description of our final protocol.
To share a secret, the dealer partitions the secret shares of s into
ℓ = ⌈n/f ⌉ groups, and uses ℓ recovery polynomials (RPs) sj, j = 1..ℓ,
to encode the corresponding groups. Every one of the original n
shares of s is encoded in one of the RPs. The dealer shares both s
and the sj’s among the n participants, and participants use the sj’s
for share recovery.
More specifically, an RP sj is a random polynomial of degree f
that has f pre-defined points. For (j − 1)f ≤ i < j f , the recovery
polynomial sj is constructed so that sj(i) = yi, where yi = F(i) for a
DPRF F with reconstruction threshold f . In our actual construction,
yi = F(⟨r, i⟩) for a random value r, to ensure that sj is distinct for
each sharing, but we elide r for our discussion here.
To recover its share, participant i probes other participants, to
which each participant responds with its share of s +sj for j = ⌈i/f ⌉.
Each participant ˆi can construct its response from its shares of s and
sj. In addition, participant ˆi also responds with their shares of F(i),
i.e., of the secret value sj(i). (In API terms, vssRecoverContrib∗
returns a share of s + sj and a share of F(ˆi).) Participant ˆi then
reconstructs s +sj in full and computes (s +sj)(i)−F(i) = s(i) (API:
vssRecover∗).
To verify a recovery share (vssRecoverVerify∗), participant i first
validates each share of s +sj that it receives against the commitment
c(s + sj), which it computes from c(s) and c(sj). Then it validates
the recovery result against the commitment c(s).
If validation fails, then participant i can prove to the other par-
ticipants that the dealer is bad. In that case, different from AVSS
and eAVSS-SC, participants expose the dealer’s secret.
The complexities incurred by different participants at different
steps of the VSSR protocol instantiated with Kate et al. [29] are
as follows. A dealer provides each of n participants shares and
constant-size commitments on ℓ + 1 polynomials. The total commu-
nication complexity is O(ℓn), or simply O(n) since in our setting, ℓ
is four. When a participant receives a recovery request, it sends a
constant amount of information to the requester, for a total O(t)
communication for t requests. Finally, each participant requiring
share recovery obtains shares from other participants incurring
O(n) communication, for a total O(tn) communication for t re-
quests.
3 Share Recovery in Verifiable Secret Sharing
In this section, we detail our VSS protocol and its security. We
begin with the definitions of distributed pseudorandom functions
(Section 3.1) and verifiable secret sharing (Section 3.2). We will
then detail our goals (Section 3.3), further assumptions on which
our scheme builds (Section 3.4), our construction (Section 3.5) and
its security (Section 3.6). Finally, we show how to instantiate our
implementation (Section 3.7).
Note that our proofs are applicable to any schemes that satisfy
our descriptions below. To highlight the generality of our descrip-
tions, we instantiate our secret sharing scheme described in Sec-
tion 3.2 in two ways [29, 42], of which one gives us the desired
asymptotic complexity while the other uses more inexpensive cryp-
tographic operations.
3.1 Distributed Pseudorandom Functions
A distributed pseudorandom function (DPRF) is a pseudorandom
function that requires the cooperation of k replicas out of n total
replicas to evaluate [38]. A DPRF F provides the following inter-
faces, where [n] = {1, . . . , n}.
• dprfInit is a randomized procedure that returns a set of pairs
{⟨dpki , dski⟩}i∈[n] ← dprfInit(1κ , k, n, D, R). Each dpki is
public key, and each dski is its corresponding private key.
• dprfContrib is a randomized procedure that returns a con-
tribution d ← dprfContrib(dski , x) if x ∈ D and failure (⊥)
otherwise.
• dprfVerify is a deterministic procedure that returns a boolean
value. We require that dprfVerify(dpki , x, d) returns true if d
is output from dprfContrib(dski , x) with nonzero probability,
for the private key dski corresponding to dpki.
• dprfEval is a deterministic procedure that returns a value
y ← dprfEval(x, {di}i∈I), where y ∈ R, if x ∈ D, |I| ≥ k and
for all i ∈ I, dprfVerify(dpki , x, di) returns true. Otherwise,
dprfEval(x, {di}i∈I) returns ⊥.
Security for a distributed pseudorandom function (DPRF), in-
formally, is defined by an adversary that is unable to distinguish
the output from the DPRF from a random oracle even if it has the
ability to compromise any set of k − 1 replicas.
More formally, security for a distributed pseudorandom func-
tion is defined as follows. An adversary AF is provided inputs
⟨dpki⟩i∈[n], k, n, D, and R, where {⟨dpki , dski⟩}i∈[n] ←
dprfInit(1κ , k, n, D, R). In addition, AF is given oracle access to n+1
oracles. The first n oracles, denoted ⟨OF,i⟩i∈[n], each supports two
types of queries. AF can invoke OF,i .contrib(x), which returns
dprfContrib(dski , x), or it can invoke OF,i .compromise, which re-
turns dski. The last oracle provided to AF is denoted O?F : D → R
and is instantiated as one of two oracles, either OrealF or OrandF . Or-
acle OrealF , on input x, selects a subset I ⊆ [n] at random of size
|I| = k, invokes di ← OF,i .contrib(x) for each i ∈ I, and returns
dprfEval(x, {di}i∈I). Oracle OrandF
is instantiated as a function cho-
sen uniformly at random from the set of all functions from D to
R. For any x ∈ D, let Ix be the oracle indices such that for each
i ∈ Ix , AF invokes OF,i .compromise or OF,i .contrib(x). Then, AF
is legitimate if |Ix | < k for every x for which AF invokes O?F(x).
Finally, AF outputs a bit. We say that the distributed pseudoran-
dom function is secure if for all legitimate adversaries AF that run
in time polynomial in κ,
(1)
P
− P
(⟨dpki⟩i∈[n], k, n, D, R) = 1
(⟨dpki⟩i∈[n], k, n, D, R) = 1
A⟨OF,i ⟩i∈[n],OrealF
F
A⟨OF,i ⟩i∈[n],OrandF
F
is negligible in κ.
3.2 Verifiable Secret Sharing
Verifiable Secret Sharing (VSS) is a way to share a secret so that
it requires a coalition of k replicas out of n total replicas in order
to reconstruct the secret. A VSS scheme provides the following
interfaces:
(cid:19)
(cid:19)
(cid:18)
(cid:18)
• vssInit is a randomized procedure that returns
⟨q, {⟨vpki , vski⟩}i∈[n]⟩ ← vssInit(1κ , k, n). Here, q is a prime
of length κ bits. Each vpki is a public key, and each vski is
its corresponding private key.
• vssShare is a randomized procedure that produces
⟨c, {ui}i∈[n]⟩ ← vssShare(s, q, {vpki}i∈[n]). Here, s ∈ Zq[x]
is a degree k − 1 polynomial, and q and {vpki}i∈[n] are as
output by vssInit. The value c is a commitment, and each ui
is a share.
• vssVerify is a deterministic procedure that returns a boolean.
We require that vssVerify(vpki , c, ui) return true if ⟨c, ui⟩
(i.e., with arbitrary {uˆi}ˆi(cid:44)i) is output from
vssShare(s, q, {vpki}i∈[n]) with nonzero probability.
• vssReconstruct is a deterministic procedure that returns
a value s ← vssReconstruct(c, {⟨vpki , ui⟩}i∈I) where s ∈
Zq[x] of degree k − 1, if |I| ≥ k and for all
i ∈ I, vssVerify(vpki , c, ui) returns true. Otherwise,
vssReconstruct(c, {⟨vpki , ui⟩}i∈I) returns ⊥.
The security of a VSS scheme lies in its hiding and binding prop-
erties.