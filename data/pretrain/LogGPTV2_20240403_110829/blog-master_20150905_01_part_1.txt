## 为什么PostgreSQL查询语句可能产生 xlog， 并且可能对buffer有write操作? - hint bits    
### 作者                                           
digoal                                   
### 日期                                                                                                       
2015-09-05                                 
### 标签                                    
PostgreSQL , wal , hint bits      
----                                                                                                    
## 背景      
本文还可以回答另一个问题，为什么数据库开启wal_hint_log后或者使用```initdb -k```参数开启checksum后，产生的XLOG变多了。    
PostgreSQL 查询是可能产生XLOG的，这需要从PostgreSQL tuple上的hint bits说起。    
### 什么是hint bits？你可以参考这个页面：    
https://wiki.postgresql.org/wiki/Hint_Bits    
hint bits是tuple头部的infomask里的2个BIT。用来表示该tuple的事务状态。    
src/include/access/htup_details.h    
```    
#define HEAP_XMIN_COMMITTED             0x0100  /* t_xmin committed 256 */    
#define HEAP_XMIN_INVALID               0x0200  /* t_xmin invalid/aborted 512  */    
#define HEAP_XMAX_COMMITTED             0x0400  /* t_xmax committed 1024  */    
#define HEAP_XMAX_INVALID               0x0800  /* t_xmax invalid/aborted 2048 */    
```    
### hint bits含义：    
如果XMIN对应的BIT都没有设置，有两种可能，事务未结束，或者事务已结束，但是BIT还未被第一个检查该TUPLE HINT BIT的会话设置。    
If neither of the XMIN bits is set, then either:    
1\. The creating transaction is still in progress, which you can check by examining the list of running transactions in shared memory;    
2\. You are the first one to check since it ended, in which case you need to consult pg_clog to know the transaction's status, and you can update the hint bits if you find out its final state.    
XMAX表示被删除的记录，原理一样。    
If the tuple has been marked deleted, then similar remarks apply to the XMAX bits.    
假设没有hint bits，我们只能从pg_clog中或者PGXACT内存结构中(未结束的或未清除的事务信息内存)得知该tuple对应的事务提交状态，显然如果每条tuple都要查询pg_clog的话，性能一定会很差。    
所以为了提升性能，PostgreSQL在tuple的头部t_infomask中通过4个比特位来存储事务的提交状态。从而我们不需要查询pg_clog来获得事务信息。    
但是请注意，并不是在事务结束时设置t_infomask的hint bits。而是在后面的DML或者DQL，VACUUM等SQL扫描到对应的TUPLE时，触发SET BITS的操作。    
### 设置hint bits的代码如下：    
SetHintBits@src/backend/utils/time/tqual.c    
src/backend/utils/time/tqual.c    
```     
 * tqual.c    
 *        POSTGRES "time qualification" code, ie, tuple visibility rules.    
 *    
 * NOTE: all the HeapTupleSatisfies routines will update the tuple's    
 * "hint" status bits if we see that the inserting or deleting transaction    
 * has now committed or aborted (and it is safe to set the hint bits).    
 * If the hint bits are changed, MarkBufferDirtyHint is called on    
 * the passed-in buffer.  The caller must hold not only a pin, but at least    
 * shared buffer content lock on the buffer containing the tuple.    
 *    
 * NOTE: must check TransactionIdIsInProgress (which looks in PGXACT array)    
 * before TransactionIdDidCommit/TransactionIdDidAbort (which look in    
 * pg_clog).  Otherwise we have a race condition: we might decide that a    
 * just-committed transaction crashed, because none of the tests succeed.    
 * xact.c is careful to record commit/abort in pg_clog before it unsets    
 * MyPgXact->xid in PGXACT array.  That fixes that problem, but it also    
 * means there is a window where TransactionIdIsInProgress and    
 * TransactionIdDidCommit will both return true.  If we check only    
 * TransactionIdDidCommit, we could consider a tuple committed when a    
 * later GetSnapshotData call will still think the originating transaction    
 * is in progress, which leads to application-level inconsistency.  The    
 * upshot is that we gotta check TransactionIdIsInProgress first in all    
 * code paths, except for a few cases where we are looking at    
 * subtransactions of our own main transaction and so there can't be any    
 * race condition.    
 *    
 * Summary of visibility functions:    
 *    
 *       HeapTupleSatisfiesMVCC()    
 *                visible to supplied snapshot, excludes current command    
 *       HeapTupleSatisfiesUpdate()    
 *                visible to instant snapshot, with user-supplied command    
 *                counter and more complex result    
 *       HeapTupleSatisfiesSelf()    
 *                visible to instant snapshot and current command    
 *       HeapTupleSatisfiesDirty()    
 *                like HeapTupleSatisfiesSelf(), but includes open transactions    
 *       HeapTupleSatisfiesVacuum()    
 *                visible to any running transaction, used by VACUUM    
 *       HeapTupleSatisfiesToast()    
 *                visible unless part of interrupted vacuum, used for TOAST    
 *       HeapTupleSatisfiesAny()    
 *                all tuples are visible    
 *    
 * Portions Copyright (c) 1996-2014, PostgreSQL Global Development Group    
 * Portions Copyright (c) 1994, Regents of the University of California    
 *    
 * IDENTIFICATION    
 *        src/backend/utils/time/tqual.c    
......    
/*    
 * SetHintBits()    
 *    
 * Set commit/abort hint bits on a tuple, if appropriate at this time.    
 *    
 * It is only safe to set a transaction-committed hint bit if we know the    
 * transaction's commit record has been flushed to disk, or if the table is    
 * temporary or unlogged and will be obliterated by a crash anyway.  We    
 * cannot change the LSN of the page here because we may hold only a share    
 * lock on the buffer, so we can't use the LSN to interlock this; we have to    
 * just refrain from setting the hint bit until some future re-examination    
 * of the tuple.    
 *    
 * We can always set hint bits when marking a transaction aborted.  (Some    
 * code in heapam.c relies on that!)    
 *    
 * Also, if we are cleaning up HEAP_MOVED_IN or HEAP_MOVED_OFF entries, then    
 * we can always set the hint bits, since pre-9.0 VACUUM FULL always used    
 * synchronous commits and didn't move tuples that weren't previously    
 * hinted.  (This is not known by this subroutine, but is applied by its    
 * callers.)  Note: old-style VACUUM FULL is gone, but we have to keep this    
 * module's support for MOVED_OFF/MOVED_IN flag bits for as long as we    
 * support in-place update from pre-9.0 databases.    
 *    
 * Normal commits may be asynchronous, so for those we need to get the LSN    
 * of the transaction and then check whether this is flushed.    
 *    
 * The caller should pass xid as the XID of the transaction to check, or    
 * InvalidTransactionId if no check is needed.    
 */    
static inline void    
SetHintBits(HeapTupleHeader tuple, Buffer buffer,    
                        uint16 infomask, TransactionId xid)    
{    
        if (TransactionIdIsValid(xid))    
        {    
                /* NB: xid must be known committed here! */    
                XLogRecPtr      commitLSN = TransactionIdGetCommitLSN(xid);    
		// 获取事务对应的commitLSN    
                if (XLogNeedsFlush(commitLSN) && BufferIsPermanent(buffer))    
		// 在设置hint bits前，必须确保事务对应的xlog 已经flush到磁盘，否则可能出现不一致的情况。例如数据恢复时xlog没有，但是CLOG显示已提交。    
                        return;                         /* not flushed yet, so don't set hint */    
        }    
        tuple->t_infomask |= infomask;    
	// 设置hint bits    
        MarkBufferDirtyHint(buffer, true);    
	// 将buffer标记为dirty，当initdb 打开了checksum或者使用了wal_log_hints时，如果它刚好是checkpoint后的第一个脏页，则写full page到WAL。    
}    
```    
我们可以来验证一下：    
```    
> truncate t;    
postgres=# select pg_backend_pid();    
 pg_backend_pid     
----------------    
           5497    
(1 row)    
```    
stap跟踪    
```    
[root@digoal ~]# cat trc.stp     
global f_start[999999]    
probe process("/opt/pgsql/bin/postgres").function("SetHintBits@/opt/soft_bak/postgresql-9.4.4/src/backend/utils/time/tqual.c").call {     
   f_start[execname(), pid(), tid(), cpu()] = gettimeofday_ms()    
   printf("%s  time:%d, pp:%s\n", thread_indent(1), f_start[execname(), pid(), tid(), cpu()], pp() )    
}    
probe process("/opt/pgsql/bin/postgres").function("SetHintBits@/opt/soft_bak/postgresql-9.4.4/src/backend/utils/time/tqual.c").return {     
  t=gettimeofday_ms()    
  a=execname()    
  b=cpu()    
  c=pid()    
  d=pp()    
  e=tid()    
  if (f_start[a,c,e,b]) {    
  #  printf("%s <- time:%d, pp:%s, par:%s\n", thread_indent(-1), t - f_start[a,c,e,b], d, $$params$$)    
  printf("%s <- time:%d, pp:%s\n", thread_indent(-1), t - f_start[a,c,e,b], d)    
  }    
}    
[root@digoal ~]# stap -vp 5 -DMAXSKIPPED=9999999 -DSTP_NO_OVERLOAD -DMAXTRYLOCK=100 ./trc.stp -x 5497    
postgres=# insert into t values (1);    
INSERT 0 1    