T analogously. However, to analyze the error propagation
nevertheless, we implemented the local and global veriﬁcation
schemes as a discrete-event simulation.
A. Simulation Setup
Initially, we assigned a random clock drift tx
drift to each veri-
ﬁer Vx. We draw tx
drift from a zero-mean Gaussian distribution
with standard deviation σdrift. The signal propagation speed is
ﬁxed to the speed of light (299792458 m/s) for all simulations.
To cancel effects caused by tracks with special properties2,
the prover moves on random tracks for this analysis. Real
tracks are considered below in Section VII. The location
claims for each track are randomly chosen from a circular area
A with radius r around the veriﬁer’s position. The prover’s
maximal change in distance to the veriﬁer (and thus the
1more complex loss models or a sampling phase can be used analogously
2e.g. errors due to a bad dilution of precision
206206
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:03:31 UTC from IEEE Xplore.  Restrictions apply. 
mobility-differentiated time of arrival which is considered by
our veriﬁcation scheme) is limited by r. The unit for distances
is meters. Times and periods are in seconds. Our simulation
parameters and constants are summarized in Table I.
A result of our formal security analysis in Section III-A
is that an implementation of our scheme must always ensure
that an area of interest is always covered by at least three
veriﬁers. If this is the case, we know that for at least one
veriﬁer Vx, the period Δx
i,j differs from the expected inter-
arrival time (Equation (2)). To produce valid insights on the
security of our scheme, we are particularly interested in V x
T of
this veriﬁer. Without loss of generality, we consider only one
veriﬁer in each simulation run and assume that it is the one
we are interested in, namely the one for which Equation (2)
does not hold. We generate the deviation of the adversary’s
signal arrival times from those of the honest prover by simply
putting the adversary at a random but ﬁxed position within
A. The adversary then claims the same track as the honest
prover and uses the same transmission times. The magnitude
of the deviations can be controlled by r (larger r leads to
larger deviations).
B. Clock Drift & Measurement Error
To keep our simulations realistic, we had to ﬁnd appropriate
parameters for our error model. With regard to our later
analysis of our scheme’s performance in a realistic air trafﬁc
scenario, we choose σ and σdrift based on experiences from
the OpenSky Network3. The OpenSky Network is a low-cost
sensor network which monitors air trafﬁc at a large scale and
provides the data to researchers [14]. Low-cost receivers are
distributed to volunteers in Europe and these collect (among
other things) the position reports periodically broadcast by
aircraft. The receivers used by OpenSky provide timestamps
with a 50 ns precision for the arrival of position reports.
Besides that, most aircraft are using GPS to determine their
positions. The typical position accuracy of GPS is about 15 m.
That leads to an estimation error of propagation delays Δx
i
of about 50 ns. Therefore, choosing σ = 50 ns for the
measurement error seems appropriate.
It is worth mentioning here, that this is a rather pessimistic
assumption. The OpenSky network is using low-cost receivers
which are not equipped with particularly good clocks. For bet-
ter devices, timestamps with higher precision can be assumed.
Furthermore, the Federal Aviation Administration (FAA) in
the US is implementing navigation systems for civil aviation
which can reduce positioning error to less than a meter [17].
To determine an appropriate standard deviation for clock
drift errors, we considered the drift of OpenSky’s receivers
relatively to each other. To determine the clock drifts of the
sensors, we used position reports received by multiple stations.
By subtracting the difference in propagation delays to each
receiver from the reception timestamps, we were able to obtain
the offsets of the clocks over time and thus, the clock drift. We
observed the clock drifts of eight receivers over a period of one
3http://opensky-network.org
2
0
.
0
0
0
.
0
2
0
.
0
−
4
0
.
0
−
6
0
.
0
−
)
s
(
t
f
i
r
D
Recvr 1: 
Recvr 2: 
Recvr 3: 
Recvr 4: 
Recvr 5: 
Recvr 6: 
Recvr 7: 
Recvr 8: 
−20.6754 μs/s
−18.7449 μs/s
−6.8805 μs/s
0 μs/s
1.5228 μs/s
2.4455 μs/s
4.1657 μs/s
 8.6235 μs/s
0
500
1000
1500
2000
2500
3000
3500
Time (s)
Fig. 6. Estimated clock drifts of 8 receivers of the OpenSky network over
one hour. The drifts are relative to the clock of receiver 4.
hour and we found that they were constantly linear during that
period. At this point it must be mentioned that the receivers
are mostly indoors and not exposed to extreme temperature
variation. The results are shown in Figure 6. According to
these results, we choose a pessimistic standard deviation of
20 μs per second for the clock drifts of the veriﬁers σdrift.
C. Simulation Results
1) Local Veriﬁcation Scheme: We ﬁrst look at the local
veriﬁcation scheme as it is the basis for the global scheme. The
goal of this analysis is twofold. On the one hand, we want to
determine the least number of location claims needed to verify
a track under the above error model. On the other hand, we are
also interested in the beneﬁts of receiving more location claims
than actually needed. Ideally, the difference in V x
T between
honest and dishonest tracks becomes more pronounced with
each additional location claim as the estimators of our scheme
become more accurate.
To draw inferences from the local simulation results about
the overall performance of our veriﬁcation scheme, we com-
pare the maximum V x
T of 1000 honest tracks with the min-
imum V x
T of 1000 dishonest tracks. In doing so, we check
whether the worst veriﬁcation result of the honest tracks is
greater than the best veriﬁcation result of the dishonest tracks.
If this is the case, we can conclude that Tlocal does not exist
since we cannot perfectly distinguish honest from dishonest
tracks. Let maxhonest be the maximum veriﬁcation result for
the honest tracks and mindishonest the minimum veriﬁcation
result for dishonest tracks. We then use the “best-evil-to-worst-
good ratio”
EGR := mindishonest /maxhonest
as response variable for our simulations. This ratio can be
interpreted as follows. If the EGR ≤ 1, Tlocal does not exist.
Otherwise, there is a secure interval
Σ = (maxhonest , maxhonest · EGR)
207207
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:03:31 UTC from IEEE Xplore.  Restrictions apply. 
y
t
i
s
n
e
D
0
1
.
8
0
.
6
0
.
4
0
.
2
0
.
0
0
.
maxhonest
daniel

mindishonest
0
5·10-14
10-13
1.5·10-13
Verication Result
Fig. 7. Empirical cumulative distribution functions of the veriﬁcation results
for honest (left curve) and dishonest (right curve) tracks with r = 200 m,
σ = 50 ns, σdrift = 20 μs/s, and m = 19. Any Tlocal between maxhonest
and mindishonest (i.e. Tlocal ∈ Σ) perfectly separates honest and dishonest
tracks.
3
0
1
1
R
G
E
3
-
0
1
6
-
0
1
9
-
0
1
3
10
EGR=1
r=20km
r=2km
r=200m
r=20m
40
50
20
30
Number of location claims (|T|)
Fig. 8. Result of our simulation for different radii and increasing m. The “best
evil-to-worst good ratio” (EGR) is deﬁned as the ratio of the best dishonest
result divided by the worst honest result. If EGR > 1 holds, there exists
an optimal threshold Tlocal which perfectly separates honest from dishonest
tracks.
where any Tlocal ∈ Σ results in zero false rejections and zero
false acceptances for the 1000 simulated tracks and the given
conﬁguration.
Figure 7 shows the empirical cumulative distribution func-
tion of the local veriﬁcation results of an example simulation.
In this particular example, we used a radius of 200 m and 19
messages per track. The EGR is 2.854879 which is greater
than 1 and hence, Tlocal ∈ Σ exists. In fact, the estimated
secure interval for this conﬁguration is
Σ = (1.147019 · 10−14, 3.274601 · 10−14)
As mentioned above, the veriﬁcation result is directly de-
pendent on the simulation radius r. Therefore, we repeated our
simulations for different radii. Transferred into a real-world
scenario, a greater radius means larger distances between
location claims. The results of the simulations are shown in
Figure 8. For the radii 200 m, 2 km, and 20 km, the EGR
208208
becomes greater than 1 after a few location claims. In fact, for
radii on the order of kilometers, dishonest tracks are perfectly
distinguishable from honest tracks after 4 location claims.
If r becomes too small, Tlocal does not exist anymore. For
instance, the maximum EGR for r = 20 m is 0.34. That
means that there is no optimal threshold Tlocal which perfectly
separates honest from dishonest tracks. This result, however,
is natural since we have chosen a standard deviation for the
measurement error which does not enable us to measure such
small changes in propagation delay. For r = 20 m, the change
in distance (and thus propagation delay) for random tracks is
on average 10 m, but we have chosen a standard deviation of
15 m for the measurement error.
Figure 8 also illustrates that the EGR almost stagnates for
more than 15-20 location claims. This knowledge can be used
to include a notion of freshness into the veriﬁcation scheme. If
an adversary is claiming the correct path in the beginning but
lies about its track later on, the veriﬁcation might work better
if only the most recent 15 location claims are considered.
We can conclude that veriﬁcation only works for tracks
on which provers cover distances greater than the system’s
measurement error. For such tracks, we can say that the greater
the distances covered by the prover, the less messages we
need to verify tracks without false acceptances or rejections.
To provide a real-world example for distances covered by
potential provers, we again looked at data from the OpenSky
network. Airplanes in the en-route airspace (i.e. at an altitude
of about 30,000 ft) travel at a velocity of up to 300 m/s. That
means that they cover distances of the order of kilometers
within a few seconds, making them suitable provers for our
track veriﬁcation scheme.
2) Global Veriﬁcation Scheme:
In case the system has
many veriﬁers covering an area of interest, our global scheme
can be used to reduce false acceptances and rejections for
small m. To gain insights on the global veriﬁcation result, we
conducted simulations similar to the previous ones. We placed
a varying number of veriﬁers at random positions in a circular
area with radius r = 200 m and used the same error model
parameters (σ and σdrift) as above. We picked this radius
because it produces false rejections and acceptances with the
local veriﬁcation for m ≤ 13 (see Figure 8). Compared to
larger radii, this is a rather high number of least required
messages for doing local veriﬁcation without false rejections
and/or acceptances. Thus,
there is room for improvement
which makes this radius illustrative for the beneﬁts of the
global scheme. Besides that and as mentioned above, distances
on the order of hundreds of meters is realistic for location
claims in aviation.
As before, we run our simulations for 1000 random tracks
to derive maxhonest and mindishonest for each track length |T|
and number of veriﬁers |V |. Figure 9 shows the results. As in
the local veriﬁcation, tracks with just three location claims are
still not properly veriﬁable due to the small number of samples
for eliminating the noise. However, by increasing the number
of veriﬁers to 7, we can perfectly verify tracks already after
the ﬁfth location claim with our global veriﬁcation scheme.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:03:31 UTC from IEEE Xplore.  Restrictions apply. 
1
0
1
1
-
0
1
R
G
E
3
-
0
1
5
-