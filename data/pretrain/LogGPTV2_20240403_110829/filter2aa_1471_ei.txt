### Chain of Trust in Firmware Security

When a trusted entity (such as an intermediate or root certificate) signs the firmware, the inner public key can be considered trusted. This mechanism, illustrated in Figure 12-3, is known as the chain of trust. It operates on the principle that a digital certificate used for code signing can be signed by the public key of another higher-level, trusted certificate (a root or intermediate certificate). For simplicity, this model is presented in a simplified form, as a detailed explanation would exceed the scope of this book.

**Figure 12-3: A Simplified Representation of the Chain of Trust**

### UEFI Certificate Hierarchy

To establish a hierarchy of trust, UEFI uses specific entities stored in UEFI variables, as shown in Figure 12-4:

- **Platform Key (PK)**: The platform key represents the root of trust and is used to protect the key exchange key (KEK) database. The platform vendor embeds the public portion of the PK into the UEFI firmware during manufacturing, while the private portion remains with the vendor.
  
- **Key Exchange Key (KEK)**: The KEK database contains trusted certificates that are authorized to modify the allowed signature database (DB), disallowed signature database (DBX), or timestamp signature database (DBT). Typically, the KEK database includes certificates from the operating system vendor (OSV) and is secured by the PK.

Hashes and signatures for verifying bootloaders and other pre-boot components are stored in three distinct databases:

- **Allowed Signature Database (DB)**: Contains hashes of specific binaries or certificates (or their hashes) that were used to generate code-signing certificates for bootloaders and other pre-boot components, following the chain of trust model.
  
- **Disallowed Signature Database (DBX)**: Contains hashes of compromised or revoked binaries or certificates (or their hashes).
  
- **Timestamp Signature Database (DBT)**: Contains timestamping certificates used when signing bootloader images. These databases are protected from unauthorized modifications by the KEK.

**Figure 12-4: The Certificate Chain of Trust Used in UEFI Secure Boot**

### Secure Boot Key Sealing

To ensure the integrity of Secure Boot keys, the firmware should not allow updates unless the entity attempting the update can prove, through a digital signature on a specified payload (the authentication descriptor), that they possess the private part of the key used to create the variable. This mechanism is implemented in UEFI through Authenticated Variables. As of the current UEFI specifications, only two types of signing keys are supported: X509 and RSA2048. An Authenticated Variable can be cleared by writing an empty update, which must still include a valid authentication descriptor. When an Authenticated Variable is first created, it stores both the public portion of the key that created it and the initial value for the time (or a monotonic count) and will only accept subsequent updates signed with that key and of the same update type. For example, the KEK variable is created using the PK and can only be updated by an authentication descriptor signed with the PK.

**Note**: In Secure Boot environments, UEFI firmware uses Authenticated Variables only for the PK, KEK, and signature databases. Other UEFI boot variables, which store boot configuration data, remain regular runtime variables. This means that in a Secure Boot environment, users can still update or change the boot configuration (including the boot order) without any issues. Secure Boot is designed to verify the integrity of boot applications, not to prevent changes to the system boot configuration.

### The Windows Boot Manager

The UEFI firmware reads and executes the Windows Boot Manager (Bootmgfw.efi). The EFI firmware transfers control to Bootmgr in long mode with paging enabled, and the memory space defined by the UEFI memory map is mapped one-to-one. Unlike wBIOS systems, there is no need to switch execution context. The Windows Boot Manager is the first application invoked when starting or resuming the Windows OS from a completely off power state or from hibernation (S4 power state).

Starting from Windows Vista, the Windows Boot Manager was redesigned with the following goals:

- Support the boot of different operating systems that employ complex and various boot technologies.
- Separate the OS-specific startup code into its own boot application (Windows Loader) and the Resume application (Winresume).
- Isolate and provide common boot services to the boot applications through boot libraries.

The Windows Boot Manager has multiple roles, including:

- Initializing the boot logger and basic system services needed for the boot application.
- Initializing security features like Secure Boot and Measured Boot, loading their system policies, and verifying its own integrity.
- Locating, opening, and reading the Boot Configuration Data store.
- Creating a "boot list" and showing a basic boot menu (if the boot menu policy is set to Legacy).
- Managing the TPM and unlocking BitLocker-encrypted drives (showing the BitLocker unlock screen and providing a recovery method if the decryption key cannot be obtained).
- Launching a specific boot application and managing the recovery sequence in case the boot fails (Windows Recovery Environment).

One of the first tasks performed is the configuration of the boot logging facility and initialization of the boot libraries. Boot applications include a standard set of libraries that are initialized at the start of the Boot Manager. Once these libraries are initialized, their core services are available to all boot applications. These services include a basic memory manager, firmware parameters, an event notification system, time, boot logger, crypto modules, the Trusted Platform Module (TPM), network, display driver, and I/O system (and a basic PE Loader). The System Integrity boot library component is also initialized early to report and record security-relevant system events, such as loading new code or attaching a debugger, using functionality provided by the TPM, particularly for Measured Boot.

To execute properly, the Boot Manager initialization function (BmMain) requires an Application Parameters data structure that describes its startup parameters. The Boot Manager uses EFI firmware services to obtain the complete relative path of its executable and the startup load options stored in the active EFI boot variable (BOOT000X). According to EFI specifications, an EFI boot variable must contain a short description of the boot entry, the complete device and file path of the Boot Manager, and optional data. Windows uses the optional data to store the GUID of the BCD object that describes itself.

**Note**: The optional data can include other boot options, which the Boot Manager will parse at later stages, allowing the configuration of the Boot Manager from UEFI variables without using the Windows Registry.

### Experiment: Playing with UEFI Boot Variables

You can use the UefiTool utility (found in this bookâ€™s downloadable resources) to dump all the UEFI boot variables of your system. To do so, run the tool in an administrative command prompt and specify the `/enum` command-line parameter. You can filter the variables by name and GUID, and even export all the variable names and data to a text file using the `/out` parameter.

For example, to dump all UEFI variables into a text file:

```sh
C:\Tools>UefiTool.exe /enum /out Uefi_Variables.txt
```

To get the list of UEFI boot variables, use the following filter:

```sh
C:\Tools>UefiTool.exe /enum Boot
```

The tool can also interpret the content of each boot variable. You can launch it using the `/enumboot` parameter:

```sh
C:\Tools>UefiTool.exe /enumboot
```

This will display the system boot configuration, including the number of boot entries, the current active entry, and the boot order. You can change the system boot order by setting the value of the `BootOrder` variable or using the `/setbootorder` command-line parameter. Be cautious, as this could invalidate the BitLocker Volume master key.

After the Application Parameters data structure is built and all boot paths are retrieved, the Boot Manager opens and parses the Boot Configuration Data file. This file is a registry hive containing all boot application descriptors, usually mapped in an `HKLM\BCD00000000` virtual key after the system has started. The Boot Manager uses the boot library to open and read the BCD file, which supports various file systems and virtual file systems. The BCD hive is parsed, and the BCD object that describes the Boot Manager is located. All entries representing boot arguments are added to the startup section of the Application Parameters data structure.

Tables 12-2, 12-3, 12-4, and 12-5 list the BCD options for the Windows Boot Manager, all boot applications, the Windows boot loader, and the Windows Hypervisor, respectively.