model secure channels, we utilize the stream-based channel
notion of Fischlin et al. [27].
Definition 1 (cf. [27], Def. 1). A stream-based channel is
a triple SC = (Init, Send, Recv) with the following syntactic
properties:
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:36:38 UTC from IEEE Xplore.  Restrictions apply. 
1974
(A)
SC
Expind-cpfa
(sts, ) ←← SC.Init()
b ←← {0, 1}
b′ ←← AO(·,·,·)()
return [b = b′]
(A)
Expind$-cpfa
(sts, ) ←← SC.Init()
b ←← {0, 1}
b′ ←← AO(·,·)()
return [b = b′]
SC
Oracle O(M0, M1, f )
if |M0| ̸= |M1| then
(sts, C) ←← SC.Send(sts, Mb, f )
return C
return ε
Oracle O(M, f )
(sts, C) ←← SC.Send(sts, M, f )
if b = 1 then
C ←← $(C)
return C
Fig. 2: IND-CPFA (top) and IND$-CPFA (bottom) experiments for
stream-based channel SC.
• Init: Takes no input and outputs a sender state sts and a
s, st0
if for all
initial states (st0
• Send: On input sender state sts, message fragment M
s and
receiver state str.
and flush flag f ∈ {0, 1}, outputs updated state st′
ciphertext fragment C.
C, outputs updated state st′
• Recv: On input receiver state str and ciphertext fragment
r and message fragment M.
When Send and Recv are provided with vectors as inputs, we
implicitly interpret this as iteratively calling the algorithm on
each set of inputs in order and updating the state in the natural
way, producing a final state along with a vector of outputs. ♢
Definition 2 (cf. [27], Def. 2). A stream-based channel SC
r) ←← Init(), all
is correct
ℓ ≥ 0, all message-fragment vectors m ∈ ({0, 1}∗)ℓ and
(cid:111)
flush-flag vectors f ∈ {0, 1}ℓ, all sender output sequences
s, m, f ), all ℓ′ ≥ 0, all output refragmen-
( , c) ←← Send(st0
, and all receiver
the following
x ∈ ({0, 1}∗)ℓ′ (cid:12)(cid:12)(cid:12) ∥x = ∥c
output sequences ( , m′) ←← Recv(st0
conditions hold:
(i) ∥m′ ⪯ ∥m, and
(ii) fi = 1 =⇒ ∥m[1 : i] ⪯ ∥m′.
In other words, the complete stream of message bits sent
through the last flush flag is guaranteed to be recovered in
♢
the correct order, but may be fragmented differently.
Definition 3 (cf. [27], Def. 3). Fix stream-based channel
SC, and let A be an adversary for the indistiguishability un-
der chosen plaintext-fragment attack (IND-CPFA) experiment
Expind-cpfa
as defined in Figure 2 (top). Define the IND-CPFA
advantage for adversary A as
tations c′ ∈ (cid:110)
r, c′),
SC
Advind-cpfa
SC
(A) =
Expind-cpfa
SC
(A) = 1
(cid:104)
(cid:12)(cid:12)(cid:12)2 · Pr
(cid:105) − 1
(cid:12)(cid:12)(cid:12) ,
with probability taken over the coins of the experiment, the
adversary A, and the algorithms of SC.
The stream-based channel SC is (t, q, µ, ϵ)-IND-CPFA
secure if
max
A∈A(t,q,µ)
Advind-cpfa
SC
(A) ≤ ϵ,
where A(t, q, µ) is the set of all IND-CPFA adversaries which
1975
halt in at most t time steps and make at most q oracle queries
♢
totaling at most µ bits.
Remark. We have elided the security parameter input to Init
from the original syntax, since we present concrete security
notions in this paper. Accordingly, we also modify the original
(asymptotic) definition of IND-CPFA security for concrete
security bounds.
For
technical convenience,
in Theorem 1 (user-only
schemes) we will employ a notion of indistinguishability of
ciphertext fragments from random bits (IND$-CPFA). As most
authenticated-encryption schemes satisfying “left or right”
style privacy (for atomic ciphertexts) also achieve indistin-
guishability from random bits, we expect that most provably
IND-CPFA-secure channels are also provably IND$-CPFA.
Definition 4. Fix stream-based channel SC, and let A be an
adversary for the IND$-CPFA experiment Expind$-cpfa
as de-
fined in Figure 2 (bottom). Define the IND$-CPFA advantage
for adversary A as
SC
Advind$-cpfa
SC
(A) =
Expind$-cpfa
SC
(A) = 1
(cid:104)
(cid:12)(cid:12)(cid:12)2 · Pr
(cid:105) − 1
(cid:12)(cid:12)(cid:12) ,
with probability taken over the coins of the experiment, the
adversary A, and the algorithms of SC.
The stream-based channel SC is (t, q, µ, ϵ)-IND$-CPFA
secure if
max
A∈A(t,q,µ)
Advind$-cpfa
SC
(A) ≤ ϵ,
where A(t, q, µ) is the set of all IND$-CPFA adversaries which
halt in at most t time steps and make at most q oracle queries
♢
totaling at most µ bits.
IV. FORMALIZING APPLICATION-BASED COVERT
CHANNELS
In this section we introduce syntax for describing a
specific class of covert channels based on tunneling covert
traffic through an existing network application. We begin by
introducing syntax that captures a straightforward notion of
network application with execution semantics (§IV-A), then
present syntax for our notion of an application-based covert
channel (§IV-B).
A. Application channels
An application channel encapsulates the (synchronous)
execution of two application processes communicating over a
public channel, and is defined as follows.
Definition 5. An application channel
is a tuple App =
(Init, Source, Sink) of algorithms with the following specifi-
cation:
• The randomized initialization algorithm Init takes as
input an environment context ξ and returns an application
context γ and initialization leakage ˆγ.
• The randomized and stateful source algorithm Source
is parameterized by an application context γ. When an
input sequence of one or more strings x = x1, x2, . . .,
alongside one or more strings ws = ws
is
1, ws
2, . . . ,
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:36:38 UTC from IEEE Xplore.  Restrictions apply. 
1, wc
1, wc
provided, Source outputs either a sequence of one or more
2, . . ., or a distinguished symbol ⊥.
strings wc = wc
We write wc ←← Sourceγ(x, ws) to denote the execution
of Source on inputs x and ws under application context γ.
• The randomized and stateful sink algorithm Sink is
parameterized by an application context γ. On input a
sequence of one or more strings wc = wc