```
 `您可以在`docker container stop`命令中使用容器的名称或标识。格式为`docker container stop `。
现在运行`docker container ls`命令，列出所有正在运行的容器。
```
$ docker container ls
CONTAINER ID   IMAGE   COMMAND   CREATED  STATUS  PORTS   NAMES 
```
 `该容器没有在上面的输出中列出，因为它处于停止状态。再次运行同一个命令，只是这次增加`-a`标志显示所有容器，包括停止的容器。
```
$ docker container ls -a
CNTNR ID  IMAGE          COMMAND    CREATED  STATUS      NAMES
9cb...65  ubuntu:latest  /bin/bash  4 mins   Exited (0)  percy 
```
 `现在我们可以看到容器显示为`Exited (0)`。停止容器就像停止虚拟机一样。尽管它目前没有运行，但它的整个配置和内容仍然存在于 Docker 主机的本地文件系统中。这意味着它可以随时重启。
让我们使用`docker container start`命令将其从假期中带回来。
```
$ docker container start percy
percy
$ docker container ls
CONTAINER ID  IMAGE          COMMAND      CREATED  STATUS     NAMES
9cb2d2fd1d65  ubuntu:latest  "/bin/bash"  4 mins   Up 3 secs  percy 
```
 `停止的容器现在重新启动。是时候验证我们之前创建的文件是否仍然存在了。使用`docker container exec`命令连接到重启的容器。
```
$ docker container exec -it percy bash
root@9cb2d2fd1d65:/# 
```
 `您的 shell 提示符将会改变，以显示您现在正在容器的命名空间内操作。
验证您之前创建的文件是否仍然存在，并且包含您写入的数据。
```
root@9cb2d2fd1d65:/# cd tmp
root@9cb2d2fd1d65:/# ls -l
-rw-r--r-- 1 root root 14 Sep 13 04:22 newfile
root@9cb2d2fd1d65:/# cat newfile
Sunderland is the greatest football team in the world 
```
 `就像变魔术一样，你创建的文件仍然在那里，它包含的数据正是你离开它的方式。这证明了停止容器并不会破坏容器或容器内的数据。
虽然这个例子说明了容器的持久性，但重要的是您要理解两件事:
1.  本例中创建的数据存储在 Docker 主机的本地文件系统中。如果 Docker 主机出现故障，数据将会丢失。
2.  容器被设计成不可变的对象，向它们写入数据不是一个好的做法。
由于这些原因，Docker 提供了与容器分开存在的*卷*，但是可以在运行时装入容器。
在您旅程的这个阶段，这是一个容器生命周期的有效例子，您很难区分容器和虚拟机的生命周期。
现在让我们杀死容器，并将其从系统中删除。
您可以通过向`docker container rm`传递`-f`标志，使用单个命令删除运行容器的*。然而，采取先停止容器然后删除它的两步方法被认为是最佳实践。这给了在容器中运行的应用/进程一个干净地停止的机会。稍后会有更多的介绍。*
下一个示例将停止`percy`容器，将其删除，并验证操作。如果您的终端仍然连接到 percy 容器，您需要通过键入`Ctrl-PQ`回到 Docker 主机的终端。
```
$ docker container stop percy
percy
$ docker container rm percy
percy
$ docker container ls -a
CONTAINER ID    IMAGE      COMMAND    CREATED  STATUS     PORTS      NAMES 
```
 `这个容器现在被删除了——几乎从地球表面抹去了。如果是好的容器，来世就变成*无服务器功能*。如果它是一个淘气的容器，它就会变成一个哑终端:-D
总结容器的生命周期…您可以根据需要多次停止、启动、暂停和重新启动容器。直到您显式删除一个容器，您才有可能丢失它的数据。即便如此，如果您将数据存储在容器外的*卷*中，即使容器已经不在了，数据也会一直存在。
让我们快速提一下为什么我们建议在删除容器之前先停止容器的两阶段方法。
#### 优雅地停止容器
Linux 世界中的大多数容器将运行一个进程。Windows 容器的情况有点不同，但是它们仍然运行一个主应用进程，并且以下规则适用。
在前面的例子中，容器正在运行`/bin/bash`应用。当你用`docker container rm  -f`杀死一个正在运行的容器时，该容器会毫无征兆地被杀死。这个过程相当暴力——有点像偷偷溜到容器后面，朝它的后脑勺开枪。你实际上给了容器和它运行的应用，没有机会完成任何操作并优雅地退出。
然而，`docker container stop`命令要礼貌得多——就像用枪指着容器的头部说“你有 10 秒的时间说最后的话”。它给容器内部的进程一个即将停止的警告，给它一个机会在结束前把事情安排好。一旦完成，您可以使用`docker container rm`删除容器。
这里的幕后魔力可以用 Linux/POSIX *信号*来解释。`docker container stop`向容器内的主应用进程(PID 1)发送**信号。正如我们所说的，这给了这个过程一个机会来清理东西并优雅地关闭它自己。如果 10 秒内没有退出，会收到 **SIGKILL** 。这实际上是子弹射向头部。但是，嘿，它有 10 秒钟的时间自己先解决。**
`docker container rm  -f`并不麻烦用 **SIGTERM** 很好地询问，而是直接去 **SIGKILL** 。
#### 具有重启策略的自修复容器
用*重启策略*运行容器通常是个好主意。这是一种自我修复的形式，使 Docker 能够在某些事件或故障发生后自动重新启动它们。
重启策略是按容器应用的，可以作为`docker-container run`命令的一部分在命令行上强制配置，或者在 YAML 文件中声明性地配置，以便与更高级别的工具(如 Docker Swarm、Docker Compose 和 Kubernetes)一起使用。
在撰写本文时，存在以下重启策略:
*   `always`
*   `unless-stopped`
*   `on-failed`
**始终**策略是最简单的。它总是重新启动一个停止的容器，除非它已经被显式停止，例如通过`docker container stop`命令。演示这一点的一个简单方法是用`--restart always`策略启动一个新的交互式容器，并告诉它运行一个 shell 进程。当容器启动时，你将被固定在它的外壳上。从外壳中键入`exit`将杀死容器的 PID 1 进程并杀死容器。但是，Docker 会自动重启，因为它有`--restart always`策略。如果您发出一个`docker container ls`命令，您将看到容器的正常运行时间比它创建以来的时间要短。让我们来测试一下。
如果您正在使用 Windows 容器执行一个长命令，请将示例中的`docker container run`命令替换为以下命令:`docker container run --name neversaydie -it --restart always mcr.microsoft.com/powershell:nanoserver`。
```
$ docker container run --name neversaydie -it --restart always alpine sh
/# 
```
 `等待几秒钟，然后输入`exit`命令。
一旦退出容器并返回到正常的 shell 提示符，请检查容器的状态。
```
$ docker container ls
CONTAINER ID    IMAGE     COMMAND    CREATED           STATUS         NAME
0901afb84439    alpine    "sh"       35 seconds ago    Up 9 seconds   neversaydie 
```
 `看看容器是如何在 35 秒前创建的，但只运行了 9 秒钟。这是因为`exit`命令杀死了它，Docker 重新启动了它。请注意，Docker 已经重新启动了同一个容器，并且没有创建新的容器。事实上，如果你用`docker container inspect`检查，你可以看到`restartCount`已经增加了。
`--restart always`策略的一个有趣的特性是，如果你用`docker container stop`停止一个容器并重新启动 Docker 守护程序，该容器将被重新启动。明确一点…你用`--restart always`策略启动一个新的容器，然后用`docker container stop`命令停止它。此时容器处于`Stopped (Exited)`状态。但是，如果重新启动 Docker 守护程序，当守护程序重新启动时，容器将自动重新启动。你需要意识到这一点。
**始终**和**除非停止**策略之间的主要区别在于，当守护程序重新启动时，具有`--restart unless-stopped`策略的容器不会重新启动，如果它们处于`Stopped (Exited)`状态的话。这可能是一个令人困惑的句子，让我们来看一个例子。
我们将创建两个新容器。一个用`--restart always`策略称为“总是”，一个用`--restart unless-stopped`策略称为“除非-停止”。我们将使用`docker container stop`命令阻止他们，然后重新启动 Docker。“始终”容器将重新启动，但“除非停止”容器不会。
1.  创建两个新容器
    ```
     $ docker container run -d --name always \
       --restart always \
       alpine sleep 1d
     $ docker container run -d --name unless-stopped \
       --restart unless-stopped \
       alpine sleep 1d
     $ docker container ls
     CONTAINER ID   IMAGE     COMMAND       STATUS       NAMES
     3142bd91ecc4   alpine    "sleep 1d"    Up 2 secs    unless-stopped
     4f1b431ac729   alpine    "sleep 1d"    Up 17 secs   always 
    ```
 `我们现在有两个容器在运行。一个叫“永远”，一个叫“除非-停止”。
1.  停止两个容器