KV(cid:48) ∪← {(F(D, j),E(D))}
δ ← 1
Return KV(cid:48),π f ,R,δ
α−ˆπ(k)/R(k)
2nα
Batch(k):
j←${1, . . . ,R(k)}
AddToQueue(k, j)
For i = 1 to B:
qtype ←δ {0,1}
If qtype = 0:
(ki, ji)←$ π f
Else:
If QueueNotEmpty:
(ki, ji) ← Dequeue()
Else:
ki ←$ ˆπ
ji ←${1, . . . ,R(ki)}
(cid:96) ← {F(k1, j1), . . . ,F(kB, jB)}
Return (cid:96)
Figure 2: PANCAKE’s initialization and batch access algorithms
for a plaintext data store KV, distribution estimate ˆπ, and threshold α.
A pseudocode description of PANCAKE’s initialization (in-
cluding dummy replicas) appears in Figure 2.
Query execution. Intuitively, we will follow the randomized
process associated to Equation 1 to mix fake and real accesses.
To increase the probability that a client’s real access is handled
right away, PANCAKE in fact sends a small batch of accesses
to KV(cid:48) for each client request. In particular, when a client
submits an access request for key k ∈ KV, PANCAKE runs the
Batch algorithm shown in Figure 2. It randomly chooses a
replica j of k, adds (k, j) to the query queue, and prepares
a batch of B accesses to KV(cid:48). By default we set B = 3 (we
will justify our choice in §4.4). For each of these accesses,
it samples a bit qtype according to δ that determines whether
the access is real (heads) or fake (tails). For each qtype that
comes up heads (real) in the batch we attempt to send a value
from the query queue. If the query queue is empty, then the
client simulates a real access by sampling a key from ˆπ itself
(denoted k←$ ˆπ) and choosing a replica at random. For each
fake access, the client samples a replica according to π f . The
resulting batch of replicas have the pseudorandom function F
applied before being sent to the server. Note that Batch im-
poses bandwidth overhead exactly B× over a KV store that
just uses encryption and leaks access patterns.
Note that the batching done in the PANCAKE proxy does
not require all queries in the batch to be sent to the same
shard/server; the batching is completely independent of the
sharding mechanism used on the server and queries in the
batch are independently forwarded to respective shards. Upon
retrieving the associated values, PANCAKE decrypts the ones
requested by clients and returns them.
It is critical that PANCAKE only sends a single batch for
each client request. If instead the proxy sent batches until the
query queue was empty, frequency information about which
keys clients access would leak. For example, if one uses B = 1
and kept submitting until the queue is empty, then the ﬁnal
access to KV(cid:48) must be a client request. Thus PANCAKE defers
handling a query until a later batch if necessary, increasing
latency. We show experimentally that for most loads this la-
tency increase is acceptably low (§6.3). In practice PANCAKE
can vary B as a function of load: decrease B at high load (to
lower bandwidth overhead) and increase B at low load (to
lower latency). Such changes to B do not reveal anything new
to an adversary, who can anyway estimate aggregate load.
Supporting writes. PANCAKE handles updates (writes) to
keys in KV by borrowing a standard technique from the
ORAM literature [23]: treat each access as a read followed
by a write. After the client receives the B encrypted values
from the server corresponding to the batch, it decrypts, possi-
bly updates, then re-encrypts the values and sends them back
to the server. Each access therefore consists of a ﬁxed-size
batch of reads followed by a ﬁxed-size batch of writes to the
same labels. When a key has multiple replicas and its value is
updated, the client adds it to the UpdateCache to track which
of its replicas still need to be updated (updating all replicas at
once leaks information). PANCAKE consults the UpdateCache
every time it does a writeback to ensure all updates propagate.
Once all of a key’s replicas have been updated, its entry is
removed from the cache. Note that PANCAKE can use any
access (fake or real) to opportunistically propagate updates.
4.3 Security Analysis
Intuitively, PANCAKE security stems from the following three
points. (1) The cryptographic security of F as a pseudorandom
function and E as a (randomized) authenticated encryption
scheme. This ensures that the keys F(k, j) appear random and
that nothing leaks about values. (2) Assuming client requests
are distributed according to π and that our estimate ˆπ of π
is sufﬁciently good, each individual access is uniformly dis-
tributed over KV(cid:48) by Equation 1. (3) Fake and real queries
cannot be distinguished by the server (i.e., none of the coin
tosses qtype can be inferred). The third point requires that the
number and timing of accesses observed by the server be inde-
pendent of the coin tosses. We do not attempt to hide the time
at which an access is made by a client, but the timing should
be independent of which key a client requests and which ac-
cesses are fake or real — thus, similar to ORAM designs [9],
PANCAKE implementations must be constant-time.
Formal analysis. To provide a formal analysis, we intro-
duce a security deﬁnition called real-versus-random indis-
tinguishability under chosen distribution attack or ROR-CDA.
A formal game-based deﬁnition of ROR-CDA is given in Ap-
pendix A. Brieﬂy, in the real world the adversary is given
PANCAKE’s encryption of the KV store KV(cid:48) and a transcript τ
generated by running Batch on q samples from π (where
Batch uses ˆπ). In the ideal world, the adversary is given a
database consisting of random bit strings and a transcript
of q· B uniformly random accesses.
Achieving this security goal rules out attacks based on
access pattern leakage. Take frequency analysis as an example.
If ROR-CDA holds, the frequency with which any label is
2456    29th USENIX Security Symposium
USENIX Association
accessed is independent of the label itself. Thus, frequency
analysis and any other attacks which rely on computing the
most likely access will fail — all accesses are equally likely,
so it is impossible to do better than baseline guessing.
The following theorem establishes the ROR-CDA security
of PANCAKE. The theorem reduces to the pseudorandom func-
tion security [22] of F, the real-versus-random indistinguisha-
bility [56] of E, and to the computational indistinguishability
of π and ˆπ.
Theorem 1 Let q ≥ 0 and Q = q· B. Let π, ˆπ be distributions.
For any q-query ROR-CDA adversary A against PANCAKE
we give adversaries B, C, D such that
Advror-cda
Q,π,ˆπ(D)
where F and E are the PRF and AE scheme used by PANCAKE.
Adversaries B, C, D each use Q queries and run in time that
of A plus a small overhead linear in Q.
PANCAKE(A) ≤ Advprf
F (B) +Advror
E (C) +Advdist
Discussion. Details of our formal analysis, including the
proof of Theorem 1, are presented in Appendix A. Here we
make some salient observations.
Our theorem is “parameterized” by q, π, ˆπ. It applies to
any distribution π, and provides security up to the ability to
accurately estimate it. In the best case, estimation is perfect,
ˆπ = π, and Theorem 1 is optimal in the sense that the only
way to break PANCAKE is to break one of the underlying
cryptographic tools. Even if our estimate is not perfect, it just
needs to be good enough to be indistinguishable from the real
distribution for a limited number of samples. While there exist
distributions that are hard to estimate [7, 30, 59], real-world
ones with heavy skew allow for sufﬁciently good estimation.
Our security model is highly pessimistic in that we assume
the adversary has perfect knowledge of π. In reality they will
not, and so we expect that in practice PANCAKE will provide
even greater security than what our theory suggests.
4.4 Performance Analysis
PANCAKE incurs a bandwidth overhead of B×, the size of
each batch. With α = 1/n, the server stores 2n replicas (in-
cluding dummy replicas), so the server storage overhead is 2×.
Note that PANCAKE bandwidth and server storage overheads
are independent of the underlying data access distributions.
PANCAKE proxy storage and query latency overheads are
related to query queue length, which itself is a function of
batch size B. Experimentally, we observe a near-zero queue
length for B≥ 3 (§6.3). This is supported by results in queuing
theory: if we model the number of query arrivals per unit
time as Poisson with mean λ, with δ = 1/2 the number of
departures per unit time with our scheme is also Poisson with
mean λ · B/2. Thus, our queue is well-modeled as M/M/1
with ρ = λ/(λ· B/2) = 2/B. Applying standard results on
steady-state behavior of such queues [16], as the number of
B )( 2
queries goes to inﬁnity, Pr [i queries in queue ] = (1− 2
B )i.
Thus the probability that a query waits for i queries ahead of
it in the queue is exponentially vanishing in i.
The size of PANCAKE’s UpdateCache depends on the query
distribution, the threshold α, and the fraction of write queries.
A loose bound on UpdateCache size is the number of keys
with access probability greater than α. Intuitively, a patholog-
ical worst-case could occur when n− 1 out of n keys have
access probability slightly higher than 1/n; in this case, each
of the n− 1 keys would have 2 replicas, and UpdateCache
size could grow to O(n) with very high write rates. We dele-
gate a formal analysis of the worst-case UpdateCache size for
speciﬁc distributions to future work, but note that our evalu-
ation demonstrates that, for standard benchmark workloads
comprising skewed distributions, the UpdateCache size turns
out to be a small fraction (< 5%) of the dataset size (§6.3).
5 Handling Dynamic Distributions
In the previous section, we showed how PANCAKE transforms
any static distribution of key-value accesses into a uniformly-
distributed one. For some applications, however, distributions
will change over time. We now describe how PANCAKE adapts
to changes in the query distribution. We start by describing
the core dynamic adaptation technique in PANCAKE under
the assumption that changes in distribution can be detected
instantaneously (§5.1), prove PANCAKE security under this
assumption (§5.2), and, ﬁnally, discuss some pragmatic issues
of detecting changes in the underlying distribution (§5.3).
5.1 Adapting to Changes in Distribution
Once the new query distribution estimate ˆπ(cid:48) is identiﬁed,
PANCAKE must adapt to ˆπ(cid:48) by smoothing it. We note that
if all keys need the same number of replicas with ˆπ(cid:48) as
they need with ˆπ, PANCAKE easily adapts to ˆπ(cid:48) by recom-
puting the fake query distribution π f as per Equation 1. How-
ever, when a key’s probability ˆπ(cid:48)(k) increases so much that
ˆπ(cid:48)(k) ≥ R(k, ˆπ,α)·α, then PANCAKE must change its number
of replicas. Figure 3 shows an example for frequency smooth-
ing of ˆπ and ˆπ(cid:48); note that while key a gains a replica, the
dummy key D loses one.
Adapting to changes in the query distribution while preserv-
ing both efﬁciency and security is challenging. One approach
is downloading the entire database and re-running Init from
Figure 2 with fresh keys. This is secure but prohibitively
bandwidth-intensive, and queries cannot be serviced during
reinitialization. One could instead act only on the replicas for
keys whose probabilities have changed; this is insecure since
accesses are non-uniform during the change. In Figure 3, if
we only download a, add a new replica for it and delete one
for D, then an adversary can infer that a grew in popularity.
Our solution builds on the latter approach, ensuring efﬁ-
ciency and security using an online replica swapping mecha-
nism described next. To make replica swapping performant
and secure, it must work in conjunction with two other tech-
USENIX Association
29th USENIX Security Symposium    2457
Original Distribution (ˆπ)
New Distribution (ˆπ(cid:48))
a
b
c
(a) Smoothed ˆπ using π f
d
e
t
c
e
t
e
D
e
g
n
a
h
C
a
b
c
(b) Smoothed ˆπ(cid:48) using ˜π(cid:48)f
(c) Smoothed ˆπ(cid:48) using π(cid:48)f
Access
Real
Fake
1/2
1/3
1/6
1/2
1/3
1/6
(b,1)
(a,1)
(D,3)
Converged system state (original distribution ˆπ)
(D,2)
(D,1)
(c,1)
(a,2)
(a,1)
(D,2)
Replica swapping, replica caching, adjusted ˜π(cid:48)f
(D,1)
(b,1)
(c,1)
Time
(a,2)
(a,1)
Converged system state (new distribution ˆπ(cid:48))
(D,1)
(b,1)
(c,1)
(D,2)
Figure 3: Frequency smoothing for dynamic distributions. (a) Smoothing for original distribution (ˆπ) over replicas in KV(cid:48) using fake
distribution π f . With ˆπ, each of keys a,b,c has one replica, and the dummy key D has 3 replicas. (b) Detection of new distribution (ˆπ(cid:48)) over
keys triggers replica swapping. During replica swapping, distribution over replicas in KV(cid:48) is smoothed using an adjusted fake distribution ˜π(cid:48)f :
all real accesses to a are directed to (a,1), and the real access probability is decreased until (D,3) and (a,2) are swapped. (c) Smoothing for