in the following insecurity query:
λ = λ(cid:48) ∧
x = β ∧ y = λ ∧ c = (λ > 0) ∧
x(cid:48) = β(cid:48) ∧ y(cid:48) = λ(cid:48) ∧ c(cid:48) = (λ(cid:48) > 0)
(cid:32)
(cid:33)
∧ c (cid:54)= c(cid:48)
This formula is sent to a SMT-solver. If the solver returns
UNSAT, meaning that the query is not satisﬁable, then the
conditional does not differ in both executions and thus is
secure. Otherwise, it means that the outcome of the conditional
depends on the secret and the solver will return a counterexam-
ple satisfying the insecurity query. Here, z3 answers that the
query is UNSAT and we can conclude that the leak is secure.
With the same method, the analysis ﬁnds that the leak at line 4
is insecure, and returns two inputs (0,0) and (1,0), respectively
leaking 0 and 1, as a counterexample showing the violation.
Limits. Basic self-composition suffer from two weaknesses:
• It generates lots of insecurity queries – at each condi-
tional statement and memory access. Yet, in the previous
example it is clear that the conditional does not depend
on secrets and could be spared with better information
ﬂow tracking.
• The whole original formula is duplicated so the size of
the self-composed formula is twice the size of the original
formula. Yet, because the parts of the program that only
depend on public inputs are equal in both executions, the
self-composed formula contains redundancies that are not
exploited.
Relational Symbolic Execution (RelSE). We can improve SC
by maximizing sharing between the pairs of executions [48],
[49]. As previously, RelSE models two executions of a pro-
gram P in the same symbolic execution instance, let us call
them p and p(cid:48). But in RelSE, variables of P are mapped to
relational expressions which are either pairs of expressions
or simple expressions. The variables that must be equal in p
and p(cid:48) (typically, the low inputs) are represented as simple
expressions while those that may be different are represented
as pairs of expressions. First, this enables to share redundant
parts of p and p(cid:48), reducing the size of the self-composed
formula. Second, variables mapping to simple expressions
cannot depend on the secret input, allowing to easily spare
some insecurity queries.
As an example, let us perform RelSE of the toy program
in Listing 1. Variable x is assigned a pair of expressions
(cid:104)β| β(cid:48)(cid:105) and y is assigned a simple expression (cid:104)λ(cid:105). Note that
the precondition that public variables are equal is now implicit
since we use the same symbolic variable in both executions. At
line 3, the conditional expression is evaluated to c = (cid:104)λ > 0(cid:105)
and we need to check that the leakage of c is secure. Since c
maps to a simple expression, we know by deﬁnition that it does
not depend on the secret, hence we can spare the insecurity
query.
RelSE maximizes sharing between both executions and
secret-dependencies enabling to spare insecurity
tracks
queries and reduce the size of the formula.
Challenge of binary-level analysis. Recall that, in binary-
level SE, the memory is represented as a special variable of
type (Array Bv32 Bv8). We cannot directly store relational
expressions in it, so in order to store high inputs at
the
beginning of the execution, we have to duplicate it. In other
words the memory is always duplicated. Consequently, every
select operation will evaluate to a duplicated expression,
preventing to spare queries in many situations.
As an illustration, consider the compiled version of the
previous program, given in Listing 2. The steps of RelSE on
this program are given in Fig. 1. Note that when the secret
input is stored in memory at line (1), the array representing the
memory is duplicated. This propagates to the load expression
in eax at line (3) and to the conditional expression at line (4).
Intuitively, at line (4), eax should be equal to the simple ex-
pression (cid:104)λ(cid:105) in which case we could spare the insecurity query
like in the previous example. However, because dependencies
cannot be tracked in the array representing the memory, eax
evaluates to a pair of select expression and we have to send
the insecurity query to the solver.
1 @[ebp-8] := (cid:104)β| β(cid:48)(cid:105); // store high input
2 @[ebp-4] := (cid:104)λ(cid:105);
// store low input
// assign (cid:104)λ(cid:105) to eax
3 eax := @[ebp-4];
4 ite eax ? l1 : l2; // leak (cid:104)λ(cid:105)
5 [...]
Listing 2: Compiled version of the conditional in listing 1,
where x := (cid:104)β | β(cid:48)(cid:105) (resp. x := (cid:104)λ(cid:105)) denotes that x is
assigned a high (resp. low) input.
impact. We report
Practical
in Table I the performances
of CT-analysis on an implementation of elliptic curve
Curve25519-donna [67]. Both SC and RelSE fail to prove the
program secure in less than 1h. RelSE does reduce the number
of queries w.r.t. SC, but it is not sufﬁcient.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:41:43 UTC from IEEE Xplore.  Restrictions apply. 
1024
(init)
(1)
(2)
(3)
(4)
and µ(cid:48)
mem := (cid:104)µ0(cid:105) and ebp := (cid:104)ebp(cid:105)
mem := (cid:104)µ1| µ(cid:48)
1(cid:105) where µ1 (cid:44) store(µ0, ebp − 8, β)
(cid:44) store(µ0, ebp − 8, β(cid:48))
mem := (cid:104)µ2| µ(cid:48)
2(cid:105) where µ2 (cid:44) store(µ1, ebp − 4, λ)
1, ebp − 4, λ)
(cid:44) store(µ(cid:48)
eax := (cid:104)α| α(cid:48)(cid:105) where α (cid:44) select(µ2, ebp − 4)
2, ebp − 4)
leak (cid:104)α (cid:54)= 0| α(cid:48) (cid:54)= 0(cid:105)
and α(cid:48) (cid:44) select(µ(cid:48)
and µ(cid:48)
1
2
Figure 1: RelSE of program in listing 2 where mem is the mem-
ory variable, ebp and eax are registers, µ0, µ1, µ(cid:48)
2 are
symbolic array variables, and ebp, β, β(cid:48), λ, α, α(cid:48) are symbolic
bitvector variables
1, µ2, µ(cid:48)
Version
SC (e.g. [43])
RelSE (e.g. [49])
BINSEC/REL
#I
11k
13k
10M
#Q
9051
5486
0
T
TO
TO
1166
#I/s
3
4
8576
S

Table I: Performances of CT-analysis of donna compiled with
gcc-5.4 -O0, in terms of number of explored unrolled
instructions (#I), number of queries (#Q), execution time in
seconds (T), instructions explored per second (#I/s), and status
(S) set to secure () or timeout ( ) set to 3600s.
Our solution. To mitigate this issue, we propose dedicated
simpliﬁcations for binary-level relational symbolic execution
that allow a precise tracking of secret-dependencies in the
memory (details in Section V-A). In the particular example
of Table I, our prototype BINSEC/REL does prove that the code
is secure in less than 20 minutes. Our simpliﬁcations simplify
all the queries, resulting in a ×2000 speedup compared to
standard RelSE and SC in terms of number of instructions
treated per second.
IV. CONCRETE SEMANTICS & FAULT MODEL
Dynamic Bitvectors Automatas (DBA) [68] is used by
BINSEC[55] as an Intermediate Representation to model low-
level programs and perform its analysis. The syntax of DBA
programs is presented in Fig. 2.
prog ::= ε | stmt prog
stmt ::= 
inst ::= lval := expr
lval ::= v | @ expr
expr ::= v | bv | @ expr
| u expr
| expr b expr
| ite expr? l1:l2
| goto expr | goto l
| halt
u ::= ¬ | −
b ::= + | × | ≤ | . . .
Figure 2: The syntax of DBA programs, where l, l1, l2 are
program locations, v is a variable and bv is a value.
Let Inst denote the set of instructions and Loc the set of
(program) locations. A program P : Loc → Inst is a map
from locations to instructions. Values bv and variables v range
over the set of ﬁxed-size bitvectors BVn := {0, 1}n (set of n-
bit words). A concrete conﬁguration is a tuple (l, r, m) where:
• l ∈ Loc is the current location, and P.l returns the current
instruction,
• r : V ar → BVn is a register map that maps variables to
their bitvector value,
• m : BV32 → BV8 is the memory, mapping 32-bit
addresses to bytes and is accessed by the operator @ (read
in an expression and write in a left value).
The initial conﬁguration is given by c0 (cid:44) (l0, r0, m0) with l0
the address of the entrypoint of the program, r0 an arbitrary
register map, and m0 an arbitrary memory.
Leakage model. The behavior of the program is modeled
with an instrumented operational semantics taken from [69]
in which each transition is labeled with an explicit notion of
leakage. A transition from a conﬁguration c to a conﬁguration
c(cid:48) produces a leakage t, denoted c −→
c(cid:48). Analogously, the
evaluation of an expression e in a conﬁguration (l, r, m),
denoted (l, r, m) e (cid:96)t bv, produces a leakage t. The leakage
of a multistep execution is the concatenation of leakages
produced by individual steps. We use −→
k with k a natural
number to denote k steps in the concrete semantics.
t
t
An excerpt of the concrete semantics is given in Fig. 3
where leakage by memory accesses occur during execution of
load and store instructions and control ﬂow leakages during
execution of dynamic jumps and conditionals.
(l, r, m) e (cid:96)t bv
LOAD
(l, r, m) @ e (cid:96)t·[bv] m bv
D_JUMP
P.l = goto e
T-ITE
P.l = ite e ? l1: l2
l(cid:48) (cid:44) to_loc(bv)
bv (cid:54)= 0
(l, r, m) e (cid:96)t bv
(l(cid:48), r, m)
(l, r, m) −−−→
t·[l(cid:48)]
(l, r, m) e (cid:96)t bv
(l, r, m) −−−→
t·[l1]
P.l = @e := e(cid:48)
(l1, r, m)
STORE
(l, r, m) e (cid:96)t bv
(l, r, m) −−−−−→
t(cid:48)·t·[bv]
(l, r, m) e(cid:48) (cid:96)t(cid:48) bv(cid:48)
(l + 1, r, m[bv (cid:55)→ bv’])
Figure 3: Concrete evaluation of DBA instructions and expres-
sions (excerpt), where · is the concatenation of leakages and
to_loc : BV32 → Loc converts a bitvector to a location.
Secure program. Let Hv ⊆ V ar be the set of high (secret)
variables and Lv := V ar \ Hv be the set of low (public)
variables. Analogously, we deﬁne H@ ⊆ BV32 (resp. L@ :=
BV32 \ H@) as the addresses containing high (resp. low) input
in the initial memory.
The low-equivalence relation over concrete conﬁgurations
c and c(cid:48), denoted c (cid:39)L c(cid:48), is deﬁned as the equality of
low variables and low parts of the memory. Formally, two
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:41:43 UTC from IEEE Xplore.  Restrictions apply. 
1025
conﬁgurations c (cid:44) (l, r, m) and c(cid:48) (cid:44) (l(cid:48), r(cid:48), m(cid:48)) are low-
equivalent iff,
∀v ∈ Lv. r v = r(cid:48) v
∀a ∈ L@. m a = m(cid:48) β(a)
t
t
k c(cid:48)
0 −→
where β : Loc → Loc is a bijection that relates addresses in
the ﬁrst execution to addresses in the second execution.
Deﬁnition 1 (Constant-time). A program is constant-time (CT)
iff for all low-equivalent initial conﬁgurations c0 and c(cid:48)
0, that
evaluate in k steps to ck and c(cid:48)
k producing leakages t and t(cid:48),
k ck ∧ c(cid:48)
0 ∧ c0 −→
c0 (cid:39)L c(cid:48)
k =⇒ t = t(cid:48)
V. BINARY-LEVEL RELATIONAL SYMBOLIC EXECUTION
Our symbolic execution relies on the QF_ABV [63] ﬁrst-
order logic. We let β, β(cid:48), λ, ϕ, i, j range over the set of
(cid:86)
formulas Φ in the QF_ABV logic. A relational formula ϕ
is either a QF_ABV formula (cid:104)ϕ(cid:105) or a pair (cid:104)ϕl | ϕr(cid:105) of two
(cid:86)
(cid:86)
QF_ABV formulas. We denote ϕ
|r), the projection
|l (resp. ϕ
(cid:86)
(cid:86)
. If ϕ
|l and
on the left (resp. right) value of ϕ
(cid:86)
|r are both deﬁned as ϕ. We let Φ be the set of relational
ϕ
formulas and Bvn be the set of relational symbolic bitvectors
of size n.
Symbolic conﬁguration. Since we restrict our analysis to pairs
of traces following the same path – which is sufﬁcient for
constant-time – the symbolic conﬁguration only considers a
single program location l ∈ Loc at any point of the execution.
A symbolic conﬁguration is of the form(cid:0)l, ρ, µ
, π(cid:1) where:
= (cid:104)ϕ(cid:105), then ϕ
(cid:86)
(cid:86)
• l ∈ Loc is the current program point,
• ρ : V ar → Φ is a symbolic register map, mapping
variables from a set V ar to their symbolic representation
as a relational formula in Φ,
: (Array Bv32 Bv8) × (Array Bv32 Bv8) is the
(cid:86)
• µ
symbolic memory – a pair of arrays of values in Bv8
indexed by addresses in Bv32,
• π ∈ Φ is the path predicate – a conjunction of conditional
statements and assignments encountered along a path.
(cid:86)
(cid:86)
(cid:86)(cid:1) expr (cid:96) ϕ
(cid:86)(cid:1) to a relational formula ϕ
of an expression in a state(cid:0)ρ, µ
given by(cid:0)ρ, µ
Symbolic evaluation of instructions, denoted s (cid:32) s(cid:48) where s
and s(cid:48) are symbolic conﬁgurations, is given in Figure 4 – the
complete set of rules is given in Appendix A. The evaluation
, is
. We denote by ∃M (cid:15) π the action
of sending a query of a formula π to the SMT-solver. If π is
satisﬁable, the solver returns a model M to interpret variables
in the formula with concrete values that validate it. Whenever
the model is not needed for our purposes, we leave it implicit
and simply write (cid:15) π for satisﬁability.
For the security evaluation of the symbolic leakage we
deﬁne a function secLeak which veriﬁes that a relational
formula in the symbolic leakage does not differ in its right
and left components, i.e. that the symbolic leakage is secure:
true
true
f alse
= (cid:104)ϕ(cid:105)
= (cid:104)ϕl| ϕr(cid:105)∧ (cid:50)(cid:0)π ∧ (ϕ
(cid:86)
(cid:86)
if ϕ
(cid:86)
if ϕ
otherwise
|r)(cid:1)
(cid:86)
|l (cid:54)= ϕ
(cid:86)
secLeak (ϕ
)=
Notice that a simple expression (cid:104)ϕ(cid:105) does not depend on
secrets and can be leaked securely. Thus it spares an insecurity
query to the solver. On the other hand, a duplicated expression
(cid:104)ϕl | ϕr(cid:105) may depend on secrets. Hence an insecurity query
must be sent to the solver to ensure that the leak is secure.
Detailed explanations of the symbolic evaluation rules fol-
low:
LOAD is the evaluation of a load expression. The rule returns
a pair of logical select formulas from the pair of symbolic
(cid:86)
(the box in the hypotheses should be ignored
memories µ