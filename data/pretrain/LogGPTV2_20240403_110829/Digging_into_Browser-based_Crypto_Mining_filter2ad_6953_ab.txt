Alexa
Signature
NoCoin
.org
Signature
on the top x-axis. Relative to the number of domains, the bars on the
y-axis show the relative share of the top 5 mining scripts (multiple
per website possible). We find the prevalence of mining websites to
be rather low. Yet in comparison, (popular) Alexa-listed domains
have the largest share (up to 0.07%). This seems likely since mining
is most profitable with websites having many visitors. Looking at
the miners, we find Coinhive, a Monero-based miner to be most
prevalent (used by > 75% of the mining sites). Notably, Authedmine,
a variant of Coinhive asking for explicit user consent to mine and
wp-monero a WordPress plugin follows but at much lower shares.
We find other miners with smaller shares, e.g., Cryptoloot a Coin-
hive clone. By manually inspecting a random subset, we find false
positives, e.g., cpmstar is a gaming ad-network that we could not
verify to contain mining code. For the once popular jsMiner [30],
we find only 31 instances in all datasets combined.
Takeaway. We observe a low prevalence of mining in landing pages
according to the NoCoin list. Most miners are Monero-based with
Coinhive having the largest share (> 75%).
3.2 Chrome
We complement the NoCoin analysis by broadly investigating pat-
terns of mining behavior when actually executing the pages. This
enables to find mining domains beyond NoCoin-listed pattern.
Through manual miner code inspection, we find that the major-
ity of javascript miners utilizes WebAssembly (Wasm) for efficient
PoW calculation. WebAssembly [29] is a binary instruction format—
featured in recent browsers—that enables to compile e.g., C-code to
Wasm for efficient execution within the browser. Further, the com-
munication to the backend servers providing the PoW input often
uses Websockets. To detect these, we instrument a stock Chrome
web browser using the Chrome Dev Protocol [3] to capture all
Websocket communication and to dump all detected Wasm code.
To decide when a page is fully loaded, we wait for the page’s load
event and set a 2 s timer on every DOM change but wait no longer
than additional 5 s before we mark the page as loaded completely.
In case of no load event, we wait no longer than 15 s to mark the
website as timed out. We further save the first 65 kB of the final
HTML to enable comparison with the NoCoin list used previously.
Measurements. As this measurement is more time consuming,
we restrict our scope to the .org zone and the Alexa 1M. We pre-
fix every domain with http://www. allowing Chrome to follow
redirects to the secured variant if necessary. Thus in contrast to
our previous TLS-only measurement, we also analyze non-HTTPS
websites. We build signatures from the Wasm code by combining
(in a strict order) and then hashing the contained functions with
19% Pornogr.
9% Tech.
8% Filesharing
7% Edu. Site
6% Ent. & Music
1 Gaming
2 Edu. Site
3 Shopping
4 Pornogr.
5 Tech.
Categorized 79%
Table 3: Top 5 categories according to Symantec RuleSpace.
9%
29% Religion
8%
8% Business
6% Edu. Site
8%
5% Health Site 7%
4% Tech.
6%
19% Gaming
8% Business
8% Edu. Site
5% Pornogr.
5% Shopping
54%
74%
42%
SHA256. Through manual inspection of the Wasm, we build up a
database of ∼160 different assemblies (often versions of the con-
ceptually same Miner) that we found and categorized them, e.g.,
through their Websocket communication backend or by some other
distinguishing feature that we found in the code. Such features e.g.,
comprises the number of XOR, shift or load operations which we
found to be quite distinctive or function name hinting at the hash
function itself.
Table 1 summarizes our findings for the Alexa 1M and the .org
TLD from measurements in the first two weeks of May 2018. We
observe most Wasm code to contain mining functionality and most
miners are again Coinhive. To put the Chrome-based approach
in perspective to the NoCoin list, we apply the NoCoin block list
to HTML saved by Chrome, i.e., after the execution of javascripts.
Table 2 shows the number of miners detected by the NoCoin list and
the fraction of mining Wasm on this part as well as the total number
of websites classified through our Miner Wasm signature database
and the subset of websites that were detected by the NoCoin list. We
observe that NoCoin classifies many websites as miners, of which
only a fraction actually embeds mining Wasm code. This indicates
false positives which we verified through random inspections. If
we take a look at the websites for which we found Wasm mining
signatures, again, the NoCoin list only classifies a fraction of these
as having a miner—false negatives.
Classification. We use the Symantec RuleSpace1 [24] engine to
categorize the mining websites. Table 3 shows the top 5 categories to
which RuleSpace assigned the websites for the NoCoin list matches
as well as our signature-based approach. We observe a diverse set
of categories and that RuleSpace can classify a larger body of Alexa
domains than .org domains. Interestingly, the categories for NoCoin
and our approach differ, especially the top category shows a large
mismatch, i.e., Gaming vs. Pornography and Gaming vs. Religion.
This could be caused by the aforementioned gaming ad-network.
Takeaway. Miners are already embedded on websites today. Simple
block lists are ineffective to detect them all and our signature-based
approach can detect sites beyond the NoCoin block list. Still, Coinhive
is the most used mining service.
1Used in Symantec products to classify websites.
IMC ’18, October 31–November 2, 2018, Boston, MA, USA
Rüth et al.
Figure 3: The number of links per token (users) is heavily
biased towards a small number of users.
4 THE COINHIVE SERVICE
Coinhive provides a mining service advertised with the slogan
“Monetize Your Business With Your Users’ CPU Power” [5], we ob-
served Coinhive to have the most widespread use (see Section 3).
Their services are built on providing a highly optimized Monero
javascript miner to be embedded in websites. In turn, Coinhive
keeps 30% of the mined reward. Apart from offering this API, Coin-
hive offers e.g., a Captcha service and a short link forwarding service
which is the subject of our first analysis. Our tools on which the
following analysis is based are available at [20].
Regardless of the actual service, the process works as follows: i)
A Coinhive user (e.g., a website owner) is assigned a unique token
that is included in the API calls which is used to associate the mined
shares. ii) Upon a website visit, the miner is loaded and connects to
the Coinhive pool and authorizes with the user’s token to receive
input for hashing. iii) Once a valid hash is found, it is committed to
the Coinhive pool. iv) Eventually, Coinhive pays their users 70% of
the block reward and keeps the remaining 30%.
4.1 Short Link Forwarding Service
To begin analyzing Coinhive, we focus on its short link forwarding
service, which is similar to a common short link service (e.g., bit.ly)
but additionally requires to compute a configurable number of
hashes before resolving the link. When a user visits a link, she
only sees a progress bar indicating the share of hashes that have
been computed, when all locally computed hashes have been sent
to the service (i.e., the progress bar is full), the service will return
the original link and will instruct the browser to redirect the user
to it. This link redirection monetization is comparable to short
link services delaying the redirection while serving advertisements
and paying the link creator a commission [14]. With Coinhive, the
creator of the short link receives a share of the block reward that is
mined by the users visiting the short links.
Their short links follow a simple structure, identified by an al-
phanumeric ID: https://cnhv.co/[a-z0-9]. We observed that
new links are assigned increasing IDs which enables one to enumer-
ate the link address space. As of February 2018, up to 4 characters
are used, resulting in a total of 1,709,203 active short links. We
visit all links and gather the Coinhive redirection HTML document
to collect i) the link creator’s token—used to associate performed
hashes to the link creator—as well as ii) the number of hash compu-
tations required by the link creator to resolve the link. Even though
a single user could own multiple tokens, we will regard users and
tokens as synonymous in this paper.
Figure 4: Required number of hashes and their frequency
of occurrence as well as the time it takes to compute these
hashes. Please note the skewed x-axis.
Without actually computing hashes, we can already look at i)
the distribution of short links per Coinhive users as well as ii) the
required number of hashes to resolve the links. Figure 3 shows the
distribution of short links per user. We observe a power-law which
highlights the existence of a few heavy users that created a large
number of links. In fact, 1/3 of all links are contributed by a single
user only and roughly 85% of all links are created by only 10 users.
Of course, a single user could use multiple tokens, however, this
would only emphasize our current observations.
To actually resolve the link, the user needs to compute the re-
quired number of hashes set by the link creator. Figure 4 shows
the distribution of this link resolution difficulty in the number of
required hash computations. The blue (dark) portion of the CDF
depicts all observed links, while the red (light) portion removes
the previously observed bias by heavy user by counting a required
# hashes only once per user; i.e., 1000 links from the same user with
the same number of required hash computations are only counted
once instead of 1000 times as in the blue (dark) dataset. To provide
a perspective on the time it takes to resolve a short link, the top
x-axis shows the duration to compute the required # of Cryptonight
hashes in a Chrome browser with a commodity laptop2. We observe
that the majority of links can be resolved in less than 51 sec (1024
hashes). The heavy user bias is most prominent at 512 hashes, still,
when removing the user-bias over 2/3 of the links of all users can
be solved with at most 1024 hashes in below one minute. To our
surprise, many links require a longer time to resolve; we find many
different users and over hundreds of short links that set the max-
imum of 1019 hashes which takes several billion years to resolve.
While the user’s willingness to wait certainly depends on the con-
tent that is supposed to be behind a short link, high values suggest
either no desire to have them ever resolved or misconfigurations
(e.g., short link creators are not aware of the actual duration).
Link Destinations. To understand the kinds of links that the short
link service is used for, we resolve all links which require less
than 10K hashes from the unbiased dataset (covering 85% of this
dataset see red (light) CDF in Figure 4). Additionally, we resolve
a random sample of 1000 links for each of the top ten Coinhive
users. To efficiently resolve the short links without a web browser,
we replicate the working principle of the web miner in a non-web
implementation that can resolve multiple short links in parallel
making use of the official optimized Monero hash code. We found
22013 Macbook Pro 2.8 GHz Intel Core i7: 20 h/s with 4 threads.
100101102103104Indexedtokensortedby#links100101102103104105106LinkspertokenAbsoluteCDF0.000.170.330.500.670.831.00CDF2829210211212213214215216#Hashesrequired100101102103104105106#Links105101210190.000.170.330.500.670.831.00CDF13s26s51s2m3m7m14m27m55mDuration@20H/s1.4h16GyrAlllinksUserbiasremovedDigging into Browser-based Crypto Mining
IMC ’18, October 31–November 2, 2018, Boston, MA, USA
Category
Ent. & Music 20% ftbucket.info
Category
Freq.
Domain
Msg. Board 9.9%
youtu.be
9.2%
zippyshare.com Filesharing
Filesharing
icerbox.com
Filesharing 4.2%
Ent. & Music 10% share-online.biz Filesharing 2.9%
hq-mirror.de
Filesharing 2.8%
Automotive 10% oboom.com
andyspeed
racing.com
Freq. Domain
10% getcoinfree.com Finance
10% ul.to
Table 4: Top 10 domains in 89% of all samples from the top
10 short link creators.
that Coinhive alters the block header contained in the PoW inputs
before sending them to the users which the web miner reverts deep
within its WebAssembly3. This appears to be a countermeasure
to prevent using the Coinhive web miner outside of the Coinhive
environment, e.g., in custom mining pools. We had to roughly
compute 61.5M hashes which we were able to do in little less than
two days on a capable server machine.
Top 10 User. We first investigate a random sample from all short
links of the top 10 users (1000 links each) representing 80% of the
link targets. Table 4 shows a classification for the top 10 domains
(accounting for roughly 89% of all sampled URLs) that we extracted
from the destination URL. We again utilize the RuleSpace categories
to manually classify those 10 domains. As the table shows, most
links point to streaming and filesharing services.
Top Categories. We employ the RuleSpace engine to further clas-
sify the unbiased dataset into categories. One URL can have multiple
categories, therefore, a single URL can contribute to different cate-
gories. For roughly 1/3 of the URLs RuleSpace has no classification,
for the remainder, Table 5 lists the top 10 categories and how often
a URL falls into each category. We observe that sites to fall into a di-
verse set of categories, unlike the top 10 users for which filesharing
and streaming were the dominant categories (Table 4).
Takeaway. Coinhive’s link forwarding service is dominated by links
from only 10 users. They mostly redirect to streaming videos and
filesharing sites. We find that most short links can be resolved within
minutes, however, some links require millions of hashes to be computed
which is infeasible.
4.2 Estimating the Network Size
While we find many websites to use Coinhive (see Section 3), it
remains unclear how many users visit these sites. Thus, the mining
power and the achievable payouts are unknown. To understand the
available mining power and thereby the users of Coinhive, we need
to identify which blocks in the Monero blockchain were mined
through Coinhive.
Methodology. When a block is mined by the Coinhive network,
one of the clients must have found a nonce that satisfies the PoW
difficulty. Then, a new block can be mounted into the blockchain
which contains the block header that is also part of the PoW input,
as well as all the transactions that have implicitly been included in
the PoW input through the Merkle tree root (see Figure 1). Thus, if
we find the PoW input for which a suitable nonce was found, we
can investigate the blockchain and look at the block that succeeds
the block referenced in the PoW. If the transactions in that block
form a Merkle tree whose root is equal to that in the PoW input, we
3A simple XOR with a fixed value at a fixed offset
Category
Tech. & Telecomm.
Gaming
Dynamic Site
Business
Pornography
Count
1,522
737
727