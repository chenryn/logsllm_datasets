(4) Verify the total liabilities.
(5) Prove individual liabilities.
(6) Verify individual liabilities.
Public protocol parameters. All of the protocol parameters of
ProtDAPOL+(𝑁 , 𝑀𝑎𝑥𝐿) are fixed in the protocol, and we don’t need
a trusted setup. First of all, 𝑁 and 𝑀𝑎𝑥𝐿 are public protocol pa-
rameters. And we need to publicly fix the height 𝐻 of the SMT
in ProtDAPOL+(𝑁 , 𝑀𝑎𝑥𝐿). Note that we only require 𝐻 ≥ ⌈log 𝑁⌉.
Although security and privacy of a PoL can be guaranteed as long
as this condition is met, different selections of 𝐻 reflect different
tradeoffs. We discuss this in section 4.3.
In addition, we have a public group 𝐺 of prime order 𝑞 ≥ (𝐻 ·
𝑁 + 1) · 𝑀𝑎𝑥𝐿. Let 𝑔1 and 𝑔2 be fixed public generators of 𝐺, whose
relative discrete logarithm is unknown to anyone, i.e., no entity
has the knowledge of 𝑥 such that 𝑔𝑥
1 = 𝑔2. Note that 𝑔1 and 𝑔2 can
be selected deterministically. In our implementation in section 6.2,
for instance, 𝐺 is the Ristretto group for Curve25519, 𝑔1 is the base
point in 𝐺, and 𝑔2 is a point converted from the hash of 𝑔1. Note that
although Curve25519 is an elliptic curve, we use the conventional
multiplicative notation throughout this paper for uniformity, i.e.,
𝑥𝑔1 is written as 𝑔𝑥
1 .
Apart from 𝑁 , 𝑀𝑎𝑥𝐿, the SMT height 𝐻, the group 𝐺, its two
generators 𝑔1 and 𝑔2, we also need to fix two strings as public
identifiers 𝑠𝑎𝑙𝑡_𝑏 and 𝑠𝑎𝑙𝑡_𝑠 for deterministically constructing SMT
nodes, which we’ll explain in detail later.
Setup. The prover first picks a random secret 𝑚𝑎𝑠𝑡𝑒𝑟_𝑠𝑒𝑐𝑟𝑒𝑡.
Next, P randomly maps each user to a bottom-layer leaf node
in an SMT of a fixed height 𝐻 and then generates the whole SMT.
An example of a summation SMT of height 3 containing 2 users is
depicted in fig. 2. There are three types of nodes:
• Leaf nodes, denoted by green dashed blocks in fig. 2, are
bottom-layer tree nodes mapped to users. Note that this is
different from the conventional definition of leaf nodes that
have no child nodes and can be in any layer of a tree. Each
leaf node contains a Pedersen commitment to P’s liabilities
to the corresponding user, i.e., 𝑐𝑢 = 𝐶𝑜𝑚(𝑙𝑢, 𝑏𝑢) = 𝑔𝑙𝑢1 · 𝑔𝑏𝑢2
where 𝑏𝑢 is the blinding factor, and a hash of the user’s ID 𝑖𝑑𝑢
concatenated with a mask 𝑠𝑢, i.e., ℎ𝑢 = H(“𝑙𝑒𝑎𝑓 ”||𝑖𝑑𝑢||𝑠𝑢).
Note that the uniqueness of ℎ𝑢 is guaranteed by the unique-
ness of users’ IDs (in practice we can use users’ credential
information such as phone number or email address), which
is also key to a valid data set. Therefore, a malicious prover
cannot map two users with the same 𝑙𝑢 to the same leaf node
to claim smaller liabilities without being detected.
Both 𝑏𝑢 and 𝑠𝑢 should be hard to guess for privacy concerns.
If a non-corrupted user 𝑢 happens to be mapped to the sibling
node of a corrupted user, A might receive (𝑐𝑢, ℎ𝑢) as a part
of the inclusion proof of the corrupted user. In this case, if
𝑏𝑢 can be easily guessed, A can infer 𝑙𝑢 from 𝑐𝑢 by looking
1 for all 𝑥 ∈ [0, 𝑀𝑎𝑥𝐿). Similarly, if 𝑠𝑢 can
up the table of 𝑔𝑥
be guessed, A can infer whether the bottom-layer node in
a Merkle proof is a leaf node corresponding to a user or a
padding node by brute forcing all possible IDs due to their
low entropy. This gives the adversary additional information
about the number of users.
We want to extract 𝑏𝑢 and 𝑠𝑢 deterministically from 𝑤𝑢 =
𝐾𝐷𝐹(𝑚𝑎𝑠𝑡𝑒𝑟_𝑠𝑒𝑐𝑟𝑒𝑡, 𝑖𝑑𝑢), which is the seed deterministi-
cally extracted by a key derivation function (KDF) taking P’s
secret 𝑚𝑎𝑠𝑡𝑒𝑟_𝑠𝑒𝑐𝑟𝑒𝑡 and 𝑖𝑑𝑢 as inputs. This is to allow P to
reproduce the contents in leaf nodes with minimized stor-
age, i.e., 𝐷𝐵 together with P’s 𝑚𝑎𝑠𝑡𝑒𝑟_𝑠𝑒𝑐𝑟𝑒𝑡. The property
of having a minimized data base can be beneficial in terms
of the data transferred when an external auditor initiates
a full investigation requiring P to send everything to the
auditor. We also want to extract 𝑏𝑢 and 𝑠𝑢 independently, i.e.,
knowledge of either doesn’t help learn the other, for selective
information disclosure, which we explain in section 4.4.5.
Therefore, we extract them via 𝑏𝑢 = 𝐾𝐷𝐹(𝑤𝑢, 𝑠𝑎𝑙𝑡_𝑏) and
𝑠𝑢 = 𝐾𝐷𝐹(𝑤𝑢, 𝑠𝑎𝑙𝑡_𝑠) respectively, where 𝑠𝑎𝑙𝑡_𝑏 and 𝑠𝑎𝑙𝑡_𝑠
are two public identifiers in the protocol.
• Padding nodes, denoted by gray dotted blocks, are nodes
that have no child nodes in the tree apart from leaf nodes
mapped to users. Padding nodes do not contribute to the
total liabilities but are dummy nodes guaranteeing that each
node in the tree has either two child nodes or none, al-
lowing generation of Merkle proofs for leaf nodes. Each
padding node contains a Pedersen commitment to 0, i.e.,
𝑐𝑖 = 𝐶𝑜𝑚(0, 𝑏𝑖) = 𝑔𝑏𝑖2 , and a hash of the node index con-
catenated with a mask 𝑠𝑖, i.e., ℎ𝑖 = H(“𝑝𝑎𝑑”||𝑖𝑑𝑥𝑖||𝑠𝑖). The
extraction of 𝑏𝑖 and 𝑠𝑖 is the same as that for leaf nodes, i.e.,
𝑏𝑖 = 𝐾𝐷𝐹(𝑤𝑖, 𝑠𝑎𝑙𝑡_𝑏) and 𝑠𝑖 = 𝐾𝐷𝐹(𝑤𝑖, 𝑠𝑎𝑙𝑡_𝑠), where 𝑤𝑖 is
extracted from P’s 𝑚𝑎𝑠𝑡𝑒𝑟_𝑠𝑒𝑐𝑟𝑒𝑡 and the node index 𝑖𝑑𝑥𝑖
by 𝑤𝑖 = 𝐾𝐷𝐹(𝑚𝑎𝑠𝑡𝑒𝑟_𝑠𝑒𝑐𝑟𝑒𝑡, 𝑖𝑑𝑥𝑖). The prefix “𝑝𝑎𝑑” of the
preimage of 𝑤𝑖 can be used to prove padding nodes for ran-
dom sampling, which we discuss in section 4.4.5. Note that
the seed 𝑤𝑖 for each padding node should be kept secret to P,
otherwise an adversary can distinguish between a padding
node and a node of another type via the hash, which leaks
information about the number of users.
• Internal nodes, denoted by yellow solid blocks, are the tree
nodes that have two child nodes. Each internal node contains
the multiplication of the commitments in its child nodes, i.e.,
𝑐𝑖 = 𝑐𝑙𝑐ℎ𝑖 · 𝑐𝑟𝑐ℎ𝑖
, and a hash of commitments and hashes in
its child nodes, i.e., ℎ𝑖 = H(𝑐𝑙𝑐ℎ𝑖 ||𝑐𝑟𝑐ℎ𝑖 ||ℎ𝑙𝑐ℎ𝑖 ||ℎ𝑟𝑐ℎ𝑖), where
𝑙𝑐ℎ𝑖 and 𝑟𝑐ℎ𝑖 denote the left and right child nodes of 𝑖 re-
spectively. The Merkle root is an internal node.
Session 12D: Decentralized Cryptographic Protocols CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3471The SMT can be generated layer by layer starting from the bot-
tom (at height 𝐻). Initially the SMT only contains leaf nodes in its
bottom layer. We insert a padding node whenever the sibling of a
leaf node, i.e., having the same parent as the leaf node, doesn’t exist
in the SMT. Then we insert an internal node as a parent for each
pair of existing sibling nodes in the bottom layer. Next we move
to the layer above, inserting padding nodes as siblings to existing
nodes in this layer and internal nodes as parents in the upper layer.
We repeat the step above until we reach to the root (at height 0).
The complexity of this procedure is linear in the number of nodes
in the SMT, depending on the number of users and the tree height.
In the function (𝑃𝐷, 𝑆𝐷) $← Setup(1𝜅, 𝐷𝐵), 𝑃𝐷 is the commit-
ment and hash pair of the Merkle root, i.e., 𝑃𝐷 = (𝑐𝑟𝑜𝑜𝑡 , ℎ𝑟𝑜𝑜𝑡).
In fig. 2, e.g., 𝑃𝐷 = (𝑐11, ℎ11). On the other hand, 𝑆𝐷 includes
𝑚𝑎𝑠𝑡𝑒𝑟_𝑠𝑒𝑐𝑟𝑒𝑡 and the mapping from users to bottom-layer leaf
nodes in the SMT. Apart from that, the SMT could also be part of
𝑆𝐷 but this is not necessary. Although storing the whole SMT al-
lows faster generation of inclusion proofs later in response to users’
queries, the prover can reproduce the same SMT deterministically
from 𝑚𝑎𝑠𝑡𝑒𝑟_𝑠𝑒𝑐𝑟𝑒𝑡, 𝐷𝐵 and the mapping only. We discuss the pos-
sibility of having 𝑆𝐷 = 𝑚𝑎𝑠𝑡𝑒𝑟_𝑠𝑒𝑐𝑟𝑒𝑡 via deterministic mapping
in section 4.3.
Prove total liabilities. To prove the total liabilities, P simply re-
veals the blinding factor in the Merkle root. By the homomor-
phism of Pedersen commitments, for any 𝑐1 = 𝐶𝑜𝑚(𝑙1, 𝑏1) and
𝑐2 = 𝐶𝑜𝑚(𝑙2, 𝑏2), we know 𝑐 = 𝑐1 · 𝑐2 = 𝐶𝑜𝑚(𝑙1 + 𝑙2, 𝑏1 + 𝑏2).
In the function (𝐿, Π) ← ProveTot(𝐷𝐵, 𝑆𝐷), 𝐿 is P’s total liabili-
Therefore, 𝑐𝑟𝑜𝑜𝑡 = 𝐶𝑜𝑚(𝑢∈U 𝑙𝑢,𝑢∈U 𝑏𝑢 +padding node 𝑖 𝑏𝑖).
ties to users, i.e., 𝐿 =𝑢∈U 𝑙𝑢, and Π is the sum of blinding factors
in all leaf and padding nodes, i.e., Π =𝑢∈U 𝑏𝑢 +padding node 𝑖 𝑏𝑖.
Verify total liabilities. To verify the total liabilities, anyone re-
ceiving the proof can act as a verifier and check if 𝑐𝑟𝑜𝑜𝑡 committed
on the PBB is a Pedersen commitment to the total liabilities.
1 · 𝑔Π
In the function {0, 1} ← VerifyTot(𝑃𝐷, 𝐿, Π), if 𝑐𝑟𝑜𝑜𝑡 = 𝑔𝐿
2
(note that 𝑃𝐷 = (𝑐𝑟𝑜𝑜𝑡 , ℎ𝑟𝑜𝑜𝑡)), the function returns 1. Otherwise it
returns 0.
Prove individual liabilities. To query for the inclusion proof of 𝑙,
a user can establish a secure communication channel with P and
prove his/her identity with respect to 𝑖𝑑. The implementation of the
authentication is out of the scope of this paper so we don’t go into
details. P ignores the query when the authentication fails. Thus, a
bounded adversary has no access to proofs of non-corrupted users
but only to corrupted users.
Upon receiving an authenticated query, P locates the leaf node
mapped to the user, and retrieves the Merkle path {(𝑐𝑖, ℎ𝑖)}𝑖∈[1,𝐻],
where (𝑐𝑖, ℎ𝑖) is the commitment and hash pair in the sibling of
the node at height 𝑖 on the path from the user’s leaf node to the
root. The Merkle path proves the inclusion of the leaf node in
the SMT, but when multiplying the commitments along the path,
there might be an overflow, i.e.,the sum of two values exceeds the
group order 𝑞 ≥ (𝐻 · 𝑁 + 1) · 𝑀𝑎𝑥𝐿 , so 𝑐𝑟𝑜𝑜𝑡 might commit to
a smaller value. Therefore, we need to prove each 𝑐𝑖 commits to
a value within the range [0, 𝑁 · 𝑀𝑎𝑥𝐿). In particular, we adopt
Bulletproofs [11] which enables aggregation of zero-knowledge
range proofs for multiple values efficiently and succinctly. Addi-
tionally, non-interactive Bulletproofs via the Fiat-Shamir transform
is proved to be secure [17, 35]. Overall, the inclusion proof of in-
dividual liabilities consists of the user’s blinding factor 𝑏, his/her
mask 𝑠, a Merkle path in the summation tree and aggregated range
proofs for commitments on the path.
In the function 𝜋 ← Prove(𝐷𝐵, 𝑆𝐷, 𝑖𝑑), the prover generates
𝜋 = (𝑏, 𝑠, {(𝑐𝑖, ℎ𝑖)}𝑖∈[1,𝐻], 𝜋𝑟𝑎𝑛𝑔𝑒), where (𝑐𝑖, ℎ𝑖) is the commit-
ment and hash pair in the node at height 𝑖 on the Merkle path, and
𝜋𝑟𝑎𝑛𝑔𝑒 is a zero-knowledge proof that each 𝑐𝑖 on the Merkle path
commits to a value within range [0, 𝑁 · 𝑀𝑎𝑥𝐿).
Verify individual liabilities. To verify P’s individual liabilities
to a user, he/she first verifies the Merkle path, i.e., computing the
internal nodes on the path from the leaf node to the root and
checking if the root matches with 𝑃𝐷 committed on the PBB. The
user also verifies the range proofs to make sure each commitment
on the Merkle path commits to a value within the proper range.
In the function {0, 1} ← Verify(𝑃𝐷, 𝑖𝑑, 𝑙, 𝜋), the verifier com-
putes (𝑐′
𝐻 = H(“𝑙𝑒𝑎𝑓 ”||𝑖𝑑||𝑠)) which is the con-
tent in the leaf node. Then the verifier computes 𝑐′
𝑖+1 · 𝑐𝑖+1
with 𝑖 iterating from 𝐻 − 1 to 0, where 𝑐𝑖 is contained in 𝜋. And
similarly for ℎ′
0) = 𝑃𝐷 and the range
proofs in 𝜋 are valid, the function returns 1. Otherwise it returns 0.
𝑖 in the internal nodes. If (𝑐′
𝐻 = Com(𝑙, 𝑏), ℎ′
𝑖 = 𝑐′
0, ℎ′
We claim that the following security and privacy properties hold
for ProtDAPOL+ under the discrete logarithm (DL) assumption in
the random oracle model and the algebraic group model [30]. We
provide detailed proofs in appendix E.
Theorem 4.1. ProtDAPOL+(𝑁 , 𝑀𝑎𝑥𝐿) is secure.
Theorem 4.2. ProtDAPOL+(𝑁 , 𝑀𝑎𝑥𝐿) is Φuser-private, where
Φuser = ∅.
Theorem 4.3. ProtDAPOL+(𝑁 , 𝑀𝑎𝑥𝐿) is Φauditor-private, where
Φauditor = ∅.
Note that Φuser/auditor = ∅ indicates that DAPOL+ provides the
strongest privacy not leaking any additional information.
4.2 Dispute Resolution
When P misbehaves, e.g., fails to respond to a user with a valid
inclusion proof, the user should be able to raise a dispute with
evidence. We divide this into two subtasks: 1. dispute resolution
for PoL assuming agreement on individual liabilities; 2. dispute
resolution for disagreement on individual liabilities. Note that the
former task makes a prerequisite assumption that P agrees with
each user on 𝑙𝑢 in 𝐷𝐵. To achieve this, users may obtain a proof
of the value of 𝑙𝑢 from P. The form of the proof varies across
applications, e.g., a receipt for each transaction in the solvency case,
or a donation certificate in the charity fund raising case. The proof
could also be P’s digital signature on 𝑙𝑢.
For the former task, an invalid proof issued by P can be a con-
crete evidence in a dispute. The only exception is when the proof
is not available. Data availability is a hard task [12] because the
case of P not sending the proof is indistinguishable with the case
when a user raises a false alarm. This is inevitable in any centralized
system. A probabilistic workaround is to have a third party auditor
Session 12D: Decentralized Cryptographic Protocols CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3472to query proofs on users’ behalf when there is suspicion, which
however, enables the auditor to lower bound the number of users.
The latter task depends on the specific application where PoL
is used. It remains as an open problem for many applications [22].
We take the solvency case as an example and empirically analyze
all possible scenarios of dispute resolution in appendix F.
4.3 Accumulator Variants
In the main protocol of DAPOL+, we utilize an SMT as an accumu-
lator and randomly map users to a bottom-layer node in the tree.
In this section, we explore four accumulator variants that can be
plugged into DAPOL+. Without sacrificing the security and privacy
of DAPOL+, each variant may provide additional features desired
in some applications, as summarized in table 2.
Table 2: Comparison between accumulator variants.