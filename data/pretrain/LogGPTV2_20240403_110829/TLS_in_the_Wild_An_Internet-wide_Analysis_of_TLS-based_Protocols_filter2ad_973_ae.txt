and RC4 contain connections without PFS support that use
either the AES or RC4 cipher. Other categories with a use of
less than 1% of connections were omitted (an example for this
are connections using the Camellia cipher). Connections on
ports 6679 and 6667 overwhelmingly use ECDHE ciphers, and
those on port 5269 overwhelmingly use DHE ciphers. These
ports were excluded from the ﬁgure for brevity. Figure 3 shows
that there is still a surprisingly large amount of connections on
some ports that use the RC4 stream cipher.
Looking at the elliptic curves that are used in ECDHE
key exchanges reveals that 97.2% of connections use the
secp256r1 curve, followed by 2% using secp384r1 and
0.78% using sect571r1. All of these curves are considered
to be at least as strong as 2048 bit RSA, raising no immedi-
ate security concerns. This result is similar to earlier results
concerning server support for different curves [25].
Examining the Difﬁe–Hellmann parameter sizes for the
DHE connections reveals that 76% of the connections use a
parameter size of 1024 bit, 22% of 2048 bit, and 1.4% of 768 bit.
While this is an improvement in comparison to earlier studies,
which measured more than 99% of hosts only supporting 1024
bit keys and below (see [25]), this is still relatively poor as
parameter sizes below 2048 bits are discouraged today.
D. Certiﬁcate chain validity
SSL/TLS servers send a certiﬁcate chain in the handshake
that consists of the host’s certiﬁcate and potentially intermediate
and CA certiﬁcates. It is common to omit the CA certiﬁcate
as it already has to be part of the local root store. Chains can
exhibit several types of errors—certiﬁcates may be expired,
host certiﬁcates may not chain up to a root certiﬁcate in the root
store, intermediate certiﬁcates can be missing, etc. A particularly
common case are self-signed certiﬁcates, where issuer and
subject of the certiﬁcate are the same. While technically not
an error, these certiﬁcates can only serve the use case where a
private server operator does either not care about authenticated
encryption (and thus often uses some standard certiﬁcate as
supplied in, e.g., Linux distributions) or issues a certiﬁcate to
herself and conﬁgures her clients to accept it.16
a) Deployed vs. used services: We show the most
common certiﬁcate errors we encountered in our active scans in
Fig. 4. Fig. 5 shows validation results for our passive monitoring
run by servers (i.e., counting every server once) and weighted
by connections (i.e., counting each server weighted by the
amount of connections that we saw).
This data set contains 295 cases where the same IP and
port serves more than one certiﬁcate chain. Examples for this
are Google and other company mail servers, servers where only
CA certiﬁcates were updated while the end-host certiﬁcate was
left unchanged, and servers renewing their end-host certiﬁcates.
We examined the certiﬁcates sent by these servers and found
that they all share the same validity characteristics (i.e., in all
cases either all of the certiﬁcates sent by a host were valid or
invalid).
Fig. 4 shows that the ratio of veriﬁable chains is between
30-40% across all email protocols. This is much lower than
what has been reported for web sites on the Alexa Top 1 million
list (around 60%) [24], but much more in line with what has
been found for the Web PKI as a whole [7]. For comparison,
we also included the values for HTTPS. Looking at the data
from passive monitoring, we note that the number of correctly
validating chains is much higher when only considering servers
that actually receive connections, and even more so when
weighting this with the number of connections, as shown in
Fig. 5. This suggests that the operators of the most popular
16Many clients allow to do this by storing an exception for the host and
certiﬁcate on the ﬁrst connection, thus making all subsequent connections
secure as the stored certiﬁcate is compared against the one the server sends.
8
services do a substantially better job at properly conﬁguring
their server for use with SSL/TLS.
b) Invalid certiﬁcates: Self-signed certiﬁcates are the
major source of non-veriﬁable certiﬁcate chains in our measure-
ments. As mentioned above, clients that wish to authenticate
servers conﬁgured with such certiﬁcates must have out-of-band
knowledge about the correctness of the certiﬁcate. Note that this
approach only works where a self-signed certiﬁcate was created
by the administrator—default certiﬁcates, as they are often
shipped with software bundles, are useless for authentication
as a copy of the private key is also shipped with the bundle.
This is one case for certiﬁcate reuse, which we discuss below.
Certiﬁcate chains can be broken in a number of ways—
e.g., missing intermediate certiﬁcates, using CA certiﬁcates
that are not in the root store, etc. We grouped these errors
together and found that their number is relatively low at 10-
15%. Our result shows that, just as in the Web PKI, there are
many mistakes that can be made in certiﬁcate deployment. The
number of expired certiﬁcates, which we consider separately,
is well within previously reported ranges [7, 24], showing that
there is little difference between email and web protocols in this
regard. We also found some further errors in certiﬁcate chains
that we classiﬁed as ‘other’—these are rare and sometimes
somewhat arcane17. Just as in previous scans [24], we found
only a single-digit number of cases with broken signatures.
Looking at the different protocols in Fig. 4, we see a
difference between the email protocols and the chat protocols.
While SMTPS and SUBMISSION have the highest (yet still
unsatisfactory) percentage of veriﬁable certiﬁcate chains (and
IMAP, POP3, and SMTP are trailing not too far behind), the
numbers are much lower for XMPP and especially IRC. SMTP
also has a much lower rate of veriﬁable certiﬁcate chains in
our passive scans, at least when not weighting by number
of connections: an indication that message protection in a
number of server-to-server communications is likely to be at
higher risk (although once again, popular servers seem to be
properly conﬁgured). This is a serious problem, which is also
compounded by the ﬁndings of a recent study that ran in parallel
to ours [12]: the authors found that the servers in their study
did not verify certiﬁcates in outgoing connections at all. It is
thus reasonable to assume that many SMTP server-to-server
connections are not secure.
A staggering number of IRC servers seems to use self-
signed certiﬁcates, or deploy broken or expired chains. This puts
private (person-to-person) IRC messaging as well as password
transfers at risk. We study the case of XMPP separately below.
c) The case of XMPP: The vast majority of certiﬁ-
cates deployed for the XMPP client-to-server services (5222
and 5223) are self-signed. However, an inspection of typical
common names for these certiﬁcates shows that the corre-
sponding servers are most likely parts of proprietary deploy-
ments and not intended for general use. The corresponding
subjects for XMPP on port 5222 are shown in TABLE VI.
For XMPPS on port 5223, 48% were from a Content Dis-
tribution Network (incapsula.com), 12% from Apple’s
push service (courier.push.apple.com) and another 8%
by a Samsung push service (*.push.samsungosp.com).
17A full list of possible errors can be found on the OpenSSL homepage;
https://www.openssl.org/docs/apps/verify.html.
The remaining certiﬁcates have shares between 2 and 5% and
contain variations of the subjects hub.clickmyheart.net,
icewarp.com and ejabberd—a popular XMPP implemen-
tation. We thus conclude that this port is often used for push
services, rather than instant messaging.
Consulting our passive data set conﬁrms this conclusion.
90% (826,822) of port 5223 connections to 1,282 servers use
a SNI containing push.apple.com, with all but two of
the server IP addresses residing in Apple’s IP space18. 73,465
more connections target the Samsung service mentioned above,
pushing the connection numbers to these services beyond 99%
of all port 5223 connections. Our passive observations also show
that the majority of client-to-server connections have veriﬁable
chains. This is also true when looking at the distribution for
servers only, albeit to a lesser degree. Once again we see a
preferential use of servers with better-than-common security.
For the server-to-server ports, which are used to relay XMPP
messages, we found broken (and not self-signed chains) to
be slightly more common in our active scans (but notably
not in our passive data). It is difﬁcult to arrive at a strong
conclusion here. The slightly lower percentage of self-signed
certiﬁcates may hint at conscious certiﬁcation choices made
for server-to-server communication. Since XMPP is also used
in proprietary products (not meant for public access), operators
may have chosen to use private CAs instead of acquiring
certiﬁcates from commercial CAs. If true, we did not capture
such communication in our passive observations.
E. Key and certiﬁcate reuse
a) Certiﬁcate reuse: Holz et al. [24] showed that cer-
tiﬁcates are often reused on different IP addresses. Although
IP addresses do not equal actual hosts, the frequency at which
this phenomenon occurred provided strong indications that
reuse across machines was happening. We investigated this
phenomenon here, too. One potential reason for certiﬁcate
reuse are Content Distribution Networks (CNDs). This is a
legitimate use case where the ease of key distribution has to
be balanced against a slightly increased attack surface. One
would expect a clear difference in the distributions for valid and
invalid certiﬁcate chains in this case as CDNs can be assumed
to exercise care in deployment. Another possibility are default
certiﬁcates, potentially from software bundles or deployed by
management tools, which are not changed when the server is
further conﬁgured.
Fig. 6a and 6b plot the likelihood that ‘a certiﬁcate occurs
on X IPs’ for the entire set of certiﬁcates and only for the set
of certiﬁcates that have correct certiﬁcate chains, respectively.
While the results for the Web PKI [24] revealed a clear
difference between the subset of certiﬁcates with valid chains
and the overall set of certiﬁcates, this is much less pronounced
here. Furthermore, the likelihood is almost the same across the
email protocols. The only real difference can be seen for XMPP
and IRC—however, we need to stress the smaller number of
veriﬁable certiﬁcate chains we have for these two protocols.
We also investigated the reuse of self-signed certiﬁcates. If
these are created purposefully for a single server or service, they
18The remaining two addresses with one connection per address use an IPv6
target address in an address space a network provider uses for NAT64; we
assume these addresses also get redirected to Apple servers in some way.
9
0.1
0.01
0.001
1e−4
1e−5
]
X
>
s
P
#
I
[
r
P
●
●
●
●
●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●● ●●●●● ●●● ●
SMTP 25
SMTP 587
IMAPS 993
IRCS 6697
XMPP S2S 5269
●
●
1.0
0.1
0.01
0.001
1e−4
1e−5
1e−6
]
X
>
s
P
#
I
[
r
P
10
100
1000
10000
1e+00
●
All public keys
Valid certificates only
1e+02
Number of IPs per public key =: X
1e+04
1e+06
1
●
1
Number of IPs per certificate =: X
(a) All certiﬁcates
● ● ● ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●● ● ● ●● ●●
SMTP 25
SMTP 587
IMAPS 993
IRCS 6697
XMPP S2S 5269
●
●
10
100
1000
10000
Number of IPs per certificate =: X
(b) Valid certiﬁcates only
Fig. 7: Likelihood that a public key is used on X IPs, across
all hosts and certiﬁcates.
TABLE V: Duplicate certiﬁcates by port in passive scans.
Entries marked with † used STARTTLS.
●
●
Protocol
SMTP†
SMTPS
SUBMISSION†
IMAP†
IMAPS
POP3†
POP3S
IRCS
XMPP, C2S†
Port
25
465
587
143
993
110
995
6697
5222
Dup. Certs
Valid Dup. Certs
877
36
46
29
119
12
43
3
35
656
36
46
28
111
12
41
3
0
0.1
0.01
0.001
]
X
>
s
P
#
I
[
r
P
1e−4
1e−5
0.1
0.01
0.001
1e−4
1e−5
]
X
>
s
P
#
I
[
r
P
●
●
●
●
● ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●● ●
●
SMTP 25
SMTP 587
IMAPS 993
IRCS 6697
XMPP 5269
●
●
1
10
100
1000
10000
Number of IPs per certificate =: X
(c) Self-signed certiﬁcates only
Fig. 6: Likelihood that a certiﬁcate is used on X IPs. SMTP 587
is SUBMISSION.
should not occur on too many hosts. Figure 6c shows, however,
that many appear on hundreds or thousands of hosts. Hence,
a more likely explanation is that these are default certiﬁcates
shipped with software.
The reuse of certiﬁcates is naturally reﬂected in the number
of public keys that are unique to a host, shown in Figure 7.
Only about 15% of public keys occur on exactly one host.
b) Popularity of servers reusing cryptographic material:
We investigated whether passive monitoring would yield similar
10
results for key reuse. We expected a very different picture as
we assume Internet users to mostly access services of larger
providers, which are much more likely to use correctly deployed
certiﬁcate chains.
In our passive monitoring run, 1,096 (17%) of our 6,398
encountered certiﬁcates were seen on more than one IP address.
Table V shows the prevalence of certiﬁcate reuses per port. As
the table shows, the majority of certiﬁcate reuses happens on
port 25.
Furthermore, in our passive scans 78% of all certiﬁcates
that we see on at least 2 hosts are valid, hinting towards the
fact that many hosting providers use this for load balancing.
Indeed, examining the certiﬁcates that were seen on the most
IP addresses show a SMTP certiﬁcate by Proofpoint, Inc. that
was encountered on 263 IPs, followed by Google certiﬁcates
for imap.gmail.com (184) and mx.google.com (161).
This shows that, while there is a rampant amount of
certiﬁcate reuse on the Internet as a whole, many of these
servers seem not to be contacted commonly by clients, hinting
at a considerable server population that might be for private
use or only used by a small user population.
c) Common names: We show the Common Names in
some particularly common and invalid certiﬁcates in TABLE VI.
Note that we cannot study if the subjects in certiﬁcates
match the host names where the certiﬁcates are deployed. This
would require scans based on a target list of domain names
TABLE VI: Common names in particularly frequently occurring
and invalid certiﬁcates for SMTP, IMAP, XMPP. † indicates
data obtained during a STARTTLS negotiation.
TABLE VII: Invalid Microsoft certiﬁcates: ASes and CIRCL