    option indicates a general keyword search:
    Pastebin有一个API，允许用户使用关键词、电子邮件或域名搜索公共粘贴文件。您可以使用此API来查找属于某个组织的敏感文件。像PasteHunter或pastebin-scraper这样的工具也可以自动化这个过程。Pastebin-scraper (https://github.com/streaak/pastebin-scraper/) 使用Pastebin API 来帮助您搜索粘贴文件。这个工具是一个shell脚本，因此请将其下载到本地目录并运行以下命令来搜索与特定关键词相关的公共粘贴文件。-g选项表示常规关键词搜索：
./scrape.sh -g KEYWORD
    This command will return a list of Pastebin file IDs associated with the specified
     KEYWORD
    . You can access the returned paste files by going to
     pastebin.com/ID
    .
    此命令将返回与指定关键字相关联的Pastebin文件ID列表。您可以通过前往pastebin.com/ID来访问返回的粘贴文件。
    Step 4: Reconstruct Source Code from an Exposed .git Directory
    Another way of finding sensitive files is to reconstruct source code from an exposed
     .git
    directory. When attacking an application, obtaining its source code can be extremely helpful for constructing an exploit. This is because some bugs, like SQL injections, are way easier to find through static code analysis than black-box testing.
     Chapter 22
    covers how to review code for vulnerabilities.
    另一种发现敏感文件的方法是从公开的.git目录中重构源代码。在攻击应用程序时，获取其源代码对于构建攻击非常有帮助。这是因为某些漏洞，比如SQL注入，通过静态代码分析比黑盒测试容易找到。第22章介绍了如何查找漏洞的代码审查方法。
    When a developer uses Git to version-control a project’s source code, Git will store all of the project’s version-control information, including the commit history of project files, in a Git directory. Normally, this
     .git
    folder shouldn’t be accessible to the public, but sometimes it’s accidentally made available. This is when information leaks happen. When a
     .git
    directory is exposed, attackers can obtain an application’s source code and therefore gain access to developer comments, hardcoded API keys, and other sensitive data via secret scanning tools like truffleHog (
     https://github.com/dxa4481/truffleHog/
    ) or Gitleaks (
     https://github.com/zricethezav/gitleaks/
    ).
    当开发人员使用Git对项目的源代码进行版本控制时，Git将存储所有项目版本控制信息，包括项目文件的提交历史记录在一个Git目录中。通常情况下，这个.git文件夹不应该对公众可访问，但有时它会被意外地暴露。这是信息泄漏发生的时候。当.git目录暴露时，攻击者可以获取应用程序的源代码，并因此通过类似truffleHog(https://github.com/dxa4481/truffleHog/)或Gitleaks(https://github.com/zricethezav/gitleaks/)的秘密扫描工具获得开发人员的注释，硬编码的API密钥和其他敏感数据。
    Checking Whether a .git Folder Is Public
    To check whether an application’s
     .git
    folder is public, simply go to the application’s root directory (for example,
     example.com
    ) and add
     /.git
    to the URL:
    要检查一个应用程序的 .git 文件夹是否公开，只需进入应用程序的根目录（例如，example.com），并在 URL 后面添加 /.git：
https://example.com/.git
    Three things could happen when you browse to the
     /.git
    directory. If you get a 404 error, this means the application’s
     .git
    directory isn’t made available to the public, and you won’t be able to leak information this way. If you get a 403 error, the
     .git
    directory is available on the server, but you won’t be able to directly access the folder’s root, and therefore won’t be able to list all the files contained in the directory. If you don’t get an error and the server responds with the directory listing of the
     .git
    directory, you can directly browse the folder’s contents and retrieve any information contained in it.
    当你浏览/.git目录时有三种可能性。如果你获得404错误，这意味着应用程序的.git目录没有对公众开放，因此你将无法通过此方式泄露信息。如果你获得403错误，.git目录在服务器上是可以访问的，但你将无法直接访问该文件夹的根目录，因此无法列出目录中包含的所有文件。如果你没有收到错误，并且服务器响应了.git目录的目录列表，则可以直接浏览文件夹的内容并检索其包含的任何信息。
    Downloading Files
    If directory listing is enabled, you can browse through the files and retrieve the leaked information. The
     wget
    command retrieves content from web servers. You can use
     wget
    in recursive mode (
     -r
    ) to mass-download all files stored within the specified directory and its subdirectories:
    如果启用目录列表，您可以浏览文件并检索泄露的信息。 Wget命令从Web服务器检索内容。 您可以在递归模式（-r）中使用wget以批量下载指定目录及其子目录中存储的所有文件：
$ wget -r example.com/.git
    But if directory listing isn’t enabled and the directory’s files are not shown, you can still reconstruct the entire
     .git
    directory. First, you’ll need to confirm that the folder’s contents are indeed available to the public. You can do this by trying to access the directory’s
     config
    file:
    但是，如果目录列表未启用且目录文件未显示，则仍可以重建整个.git目录。首先，您需要确认该文件夹的内容确实对公众开放。您可以通过尝试访问目录的配置文件来实现此目的：
$ curl https://example.com/.git/config
    If this file is accessible, you might be able to download the Git directory’s entire contents so long as you understand the general structure of
     .git
    directories. A
     .git
    directory is laid out in a specific way. When you execute the following command in a Git repository, you should see contents resembling the following:
    如果可以访问此文件，只要您理解.git目录的一般结构，就可以下载Git目录的全部内容。.git目录有特定的排列方式。在Git存储库中执行以下命令时，您应该会看到类似以下内容的内容：
$ ls .git
COMMIT_EDITMSG HEAD branches config description hooks index info logs objects refs
    The output shown here lists a few standard files and folders that are important for reconstructing the project’s source. In particular, the
     /objects
    directory is used to store Git objects. This directory contains additional folders; each has two character names corresponding to the first two characters of the SHA1 hash of the Git objects stored in it. Within these subdirectories, you’ll find files named after the rest of the SHA1 hash of the Git object stored in it. In other words, the Git object with a hash of
     0a082f2656a655c8b0a87956c7bcdc93dfda23f8
    will be stored with the filename of
     082f2656a655c8b0a87956c7bcdc93dfda23f8
    in the directory
     .git/objects/0a
    . For example, the following command will return a list of folders:
    这里显示的输出列出了一些重建项目源的重要标准文件和文件夹。 特别是/objects目录用于存储Git对象。 该目录包含其他文件夹; 每个文件夹都有两个字符的名称，对应于其中存储的Git对象的SHA1哈希的前两个字符。 在这些子目录中，您将找到以其余SHA1哈希命名的文件，这些文件存储在其中的Git对象。 换句话说，具有哈希值0a082f2656a655c8b0a87956c7bcdc93dfda23f8的Git对象将使用文件名082f2656a655c8b0a87956c7bcdc93dfda23f8存储在目录.git / objects / 0a中。 例如，以下命令将返回文件夹列表：
$ ls .git/objects
00 0a 14 5a 64 6e 82 8c 96 a0 aa b4 be c8 d2 dc e6 f0 fa info pack
    And this command will reveal the Git objects stored in a particular folder:
    这个命令将显示在特定文件夹中存储的Git对象。
$ ls .git/objects/0a
082f2656a655c8b0a87956c7bcdc93dfda23f8 4a1ee2f3a3d406411a72e1bea63507560092bd 66452433322af3d319a377415a890c70bbd263 8c20ea4482c6d2b0c9cdaf73d4b05c2c8c44e9 ee44c60c73c5a622bb1733338d3fa964b333f0
0ec99d617a7b78c5466daa1e6317cbd8ee07cc 52113e4f248648117bc4511da04dd4634e6753 72e6850ef963c6aeee4121d38cf9de773865d8
    Git stores different types of objects in .
     git/objects
    : commits, trees, blobs, and annotated tags. You can determine an object’s type by using this command:
    Git将不同类型的对象存储在.git/objects中：提交、树、blob和注释标签。您可以使用此命令确定对象的类型：
$ git cat-file -t OBJECT-HASH
     Commit
    objects store information such as the commit’s tree object hash, parent commit, author, committer, date, and message of a commit.
     Tree
    objects contain the directory listings for commits.
     Blob
    objects contain copies of files that were committed (read: actual source code!). Finally,
     tag
    objects contain information about tagged objects and their associated tag names. You can display the file associated with a Git object by using the following command:
    提交对象储存提交的树对象哈希，父提交、作者、提交者、日期以及提交信息等信息。树对象包含提交的目录清单。Blob对象包含已提交的文件的副本（也就是源代码！）。最后，标签对象包含有关已标记的对象及其相关标签名称的信息。您可以使用以下命令显示与Git对象关联的文件：
$ git cat-file -p OBJECT-HASH
    The
     /config
    file is the Git configuration file for the project, and the
     /HEAD
    file contains a reference to the current branch:
    /config 文件是该项目的 Git 配置文件，/HEAD 文件包含对当前分支的引用：
$ cat .git/HEAD
ref: refs/heads/master
    If you can’t access the
     /.git
    folder’s directory listing, you have to download each file you want instead of recursively downloading from the directory root. But how do you find out which files on the server are available when object files have complex paths, such as
     .git/objects/0a/72e6850ef963c6aeee4121d38cf9de773865d8
    ?
    如果您无法访问/.git文件夹的目录列表，您必须下载想要的每个文件，而不是从目录根递归下载。但是，当对象文件具有复杂路径时，例如.git/objects/0a/72e6850ef963c6aeee4121d38cf9de773865d8，您如何找出服务器上可用的文件？
    You start with filepaths that you already know exist, like
     .git/HEAD
    ! Reading this file will give you a reference to the current branch (for example,
     .git/refs/heads/master
    ) that you can use to find more files on the system:
    你可以从已知的文件路径开始，比如.git/HEAD！读取这个文件可以给你一个当前分支的引用（例如.git/refs/heads/master），你可以使用它来在系统中找到更多的文件：
$ cat .git/HEAD
ref: refs/heads/master
$ cat .git/refs/heads/master
0a66452433322af3d319a377415a890c70bbd263
$ git cat-file -t 0a66452433322af3d319a377415a890c70bbd263
commit
$ git cat-file -p 0a66452433322af3d319a377415a890c70bbd263
tree 0a72e6850ef963c6aeee4121d38cf9de773865d8
    The
     .git/refs/heads/master
    file will point you to the particular object hash that stores the directory tree of the commit. From there, you can see that the object is a commit and is associated with a tree object,
     0a72e6850ef963c6aeee4121d38cf9de773865d8
    . Now examine that tree object:
    .git/refs/heads/master文件将指向存储提交目录树的特定对象哈希。从那里，你可以看到该对象是一个提交，并与树对象0a72e6850ef963c6aeee4121d38cf9de773865d8关联。现在检查那个树对象：
$ git cat-file -p 0a72e6850ef963c6aeee4121d38cf9de773865d8
100644 blob 6ad5fb6b9a351a77c396b5f1163cc3b0abcde895 .gitignore
040000 blob 4b66088945aab8b967da07ddd8d3cf8c47a3f53c source.py
040000 blob 9a3227dca45b3977423bb1296bbc312316c2aa0d README
040000 tree 3b1127d12ee43977423bb1296b8900a316c2ee32 resources
    Bingo! You discover some source code files and additional object trees to explore.
    万岁！您找到了一些源代码文件和其他要探索的对象树。
    On a remote server, your requests to discover the different files would look a little different. For instance, you can use this URL to determine the HEAD:
    在远程服务器上，您查找不同文件的请求会有所不同。例如，您可以使用以下网址确定HEAD：
https://example.com/.git/HEAD
    Use this URL to find the object stored in that HEAD:
    使用此网址查找存储在该HEAD中的对象：
https://example.com/.git/refs/heads/master
    Use this URL to access the tree associated with the commit:
    使用此URL访问与提交相关的树：
https://example.com/.git/objects/0a/72e6850ef963c6aeee4121d38cf9de773865d8
    Finally, use this URL to download the source code stored in the
     source.py
    file:
    最后，使用该URL下载存储在source.py文件中的源代码：
https://example.com/.git/objects/4b/66088945aab8b967da07ddd8d3cf8c47a3f53c 
    If you are downloading files from a remote server, you’ll also need to decompress the downloaded object file before you read it. This can be done using some code. You can decompress the object file by using Ruby, Python, or your preferred language’s
     zlib
    library:
    如果你从远程服务器下载文件，你还需要在读取之前解压下载的对象文件。这可以使用一些代码来完成。你可以使用Ruby、Python或你喜欢的语言的zlib库来解压对象文件。
ruby -rzlib -e 'print Zlib::Inflate.new.inflate(STDIN.read)' < OBJECT_FILE
python -c 'import zlib, sys;
  print repr(zlib.decompress(sys.stdin.read()))' < OBJECT_FILE
    After recovering the project’s source code, you can
     grep
    for sensitive data such as hardcoded credentials, encryption keys, and developer comments. If you have time, you can browse through the entire recovered codebase to conduct a source code review and find potential vulnerabilities.
    在恢复项目源代码后，您可以使用grep查找敏感数据，例如硬编码凭据、加密密钥和开发人员的注释。 如果有时间，您可以浏览整个恢复的代码库进行源代码审核，并查找潜在漏洞。
    Step 5: Find Information in Public Files
    You could also try to find information leaks in the application’s public files, such as their HTML and JavaScript source code. In my experience, JavaScript files are a rich source of information leaks!
    你也可以尝试在应用程序的公共文件中寻找信息泄露，例如 HTML 和 JavaScript 源代码。根据我的经验，JavaScript 文件是信息泄露的丰富来源！
    Browse the web application that you’re targeting as a regular user and take note of where the application displays or uses your personal information. Then right-click those pages and click
     View page source
    . You should see the HTML source code of the current page. Follow the links on this page to find other HTML files and JavaScript files the application is using. Then, on the HTML file and the JavaScript files found,
     grep
    every page for hardcoded credentials, API keys, and personal information with keywords like
     password
    and
     api_key
    .
    浏览您所针对的Web应用程序，以普通用户的身份，并注意应用程序显示或使用个人信息的位置。然后右键单击这些页面，点击“查看页面源代码”。您应该看到当前页面的HTML源代码。跟随此页上的链接以查找应用程序正在使用的其他HTML文件和JavaScript文件。然后，在找到的HTML文件和JavaScript文件上，使用密码和api_key等关键字对每个页面进行硬编码凭据，API密钥和个人信息的grep。
    You can also locate JavaScript files on a site by using tools like LinkFinder (
     https://github.com/GerbenJavado/LinkFinder/
    ).
    您还可以使用LinkFinder等工具在网站上找到JavaScript文件。
    Escalating the Attack
    After you’ve found a sensitive file or a piece of sensitive data, you’ll have to determine its impact before reporting it. For example, if you have found credentials such as a password or an API key, you need to validate that they’re currently in use by accessing the target’s system with them. I often find outdated credentials that cannot be used to access anything. In that case, the information leak isn’t a vulnerability.
    在找到敏感文件或敏感数据之后，您需要在报告之前确定它的影响。例如，如果您找到凭据（如密码或API密钥），则需要通过使用它们访问目标系统来验证它们当前是否正在使用中。我经常发现过时的凭据无法用于访问任何内容。在那种情况下，信息泄漏不是漏洞。
    If the sensitive files or credentials you’ve found are valid and current, consider how you can compromise the application’s security with them. For example, if you found a GitHub access token, you can potentially mess with the organization’s projects and access their private repositories. If you find the password to their admin portals, you might be able to leak their customers’ private information. And if you can access the
     /etc/shadow
    file on a target server, you might be able to crack the system user’s passwords and take over the system! Reporting an information leak is often about communicating the impact of that leak to companies by highlighting the criticality of the leaked information.
    如果您找到的敏感文件或凭证是有效和当前的，请考虑如何使用它们来破坏应用程序的安全性。例如，如果您发现了一个GitHub访问令牌，您有可能破坏组织的项目并访问他们的私人代码库。如果您找到了管理员门户的密码，则可能泄露了客户的个人信息。如果您可以访问目标服务器上的/ etc / shadow文件，则可能可以破解系统用户的密码并接管系统！报告信息泄漏通常涉及向公司传达该泄漏的影响，通过强调泄漏信息的关键性来提醒他们注意。