name\>)
**解释**：字段属性(\,\)
返回指定字段属性的值。
参数：
-   字段路径：带有属性的字段的路径。
-   字段属性名称：字段属性的名称。
返回类型：字符串
**示例**：以下表达式返回ID字段中PK属性的值：
*record:fieldAttribute(\'/ID\', \'pk\')*
record:type()
**格式**：record:type(\)
**解释**：类型(\)
检查字段的数据类型。可能的返回值是：
-   Boolean（布尔型）
-   Char（整型）
-   Byte（字节）
-   Short（短整型）
-   Integer（整型）
-   Long（长整型）
-   Float（单精度浮点型）
-   Double（双精度浮点型）
-   Date（日期型）
-   Datetime（日期时间型）
-   Decimal（精确数值型）
-   String（字符串型）
-   Time（时间型）
-   Byte-Array（byte数组型）
-   Map（关联数组）
-   List（列表）
**返回类型**：字符串
**示例**：ip为STRING类型的数据
*record:type(\'\[0\]/ip\'==\'STRING\')*
说明：在实际场景中下标写在字段后，但帮助文档中是写在字段前的，需要根据实际情况确定。
*record:type(\'/ip\[0\]\'==\'STRING\')*
record:valueOrDefault()
**格式**：record:valueOrDefault(\ , \)
**解释**：valueOrDefault(\，\)
以适当的数据类型返回字段的值。如果字段不存在或字段为空，则返回默认值。
用于在字段不存在或字段为空时提供默认值。
**返回类型**：变量，根据函数返回字段值还是默认值。
**示例**：abc字段如果没有或是空值提供默认值efg
*\${record:valueOrDefault(\'/abc\')==\'efg\'}*
##### String（字符串）函数
str:concat()
**格式**：str:concat(\, \)
**解释**：把两个字符串连在一起。
参数：
-   字符串1-连接的第一个字符串。
-   字符串2-连接的第二个字符串。
使用str：conat函数连接表达式中的字符串。
**示例**：要将FirstName字段与LastName字段连接起来
*\${str:concat(record:value(\"/FirstName\") ,
record:value(\"/LastName\"))*
str:contains()
**格式**：str:contains(\, \)
**解释**：根据字符串是否包含配置的字符子集返回true或false。
参数：
-   字符串-要计算的字符串。
-   子集-要查找的字符子集。
**示例**：查看Jane字段中是否包含boo字段
*\${str:contains(\"Jane\", \"boo\")}*
**返回**：false
str:endswith()
**格式**：str:endswith(\, \)
**解释**：根据字符串是否以配置的字符子集结尾返回true或false。
**返回类型**：布尔型，true或false
使用下列参数：
-   字符串-要计算的字符串。
-   子集-要查找的字符子集。
**示例**：3000-1000结果是否包含1001，结果返回true
*\${str: endswitch("3000-1000",1001)}*
**返回**：true。
str:indexOf()
**格式**：str:indexOf(\, \)
**解释**：返回指定字符子集的第一个匹配项的字符串中的索引。
**返回类型**：整数。
使用下列参数：
-   字符串-返回索引的字符串。
-   子集-要查找的字符子集。
示例：
*\${str:indexOf(\"pepper\", \"pe\")}*
**返回**：0.
str:isNullOrEmpty()
**格式**：str:isNullOrEmpty(\)
**解释**：根据字符串是空字符串还是空字符串返回true或false。
参数：
-   字符串-要计算的字符串。
**示例**：如果work_phone字段是空字符串，则
*\${str:isNullOrEmpty(record:value("/work_phone"))}*
**返回**：true。
str:length()
**格式**：str:length(\)
**解释**：返回字符串的长度。
**返回类型**：整数。
参数：
-   字符串-返回长度的字符串。
**示例**：返回tomorrow的字符长度
*\${str:length(\"tomorrow\")}*
**返回结果**: 8.
str:matches()
**格式**：str:matches(\, \)
**解释**：根据字符串是否匹配Java regex模式返回true或false。
参数：
-   字符串-要计算的字符串。
-   regEx-描述字符串模式的正则表达式。
**示例**：检查主机名字段中的字符串是否以字符".com"结尾。
*\${str:matters(Record:value(\"/hostname\"),\".\*\\.com\$\")}*
str:replace()
**格式**：str:replace(\, \, \)
**解释**：用新字符替换字符串中指定字符的所有实例。
参数：
-   字符串-包含要替换的字符的字符串。
-   要替换的字符。
-   用于替换的新字符。
**示例**：将lecucereche中的所有e替换为a
*\${str:replace(\"lecucereche\", \"e\", \"a\")}*
**返回**：lacucaracha。
str:replaceAll()
**格式**：str:replaceAll(\, \, \)
**解释**：用新的字符集替换字符串中的一组字符。
参数：
-   String-包含要替换的一组字符的字符串。
-   regEx-描述要替换的字符串的正则表达式。
-   newString-用于替换的一组字符。
示例：
*\${str:replaceAll(\"shoes_sandals\",\"\^shoes\",\"footwear\")}*
**返回**：footwear_sandals。
str:split()
**格式**：str:split(\, \)
**解释**：根据指定的分隔符将字符串拆分为字符串列表。
参数：
-   字符串-输入字符串。
-   分隔符-指定字符串拆分的一组字符。
**示例**：假设一个记录包含一个dimensions字符串字段，该字段记录高度、宽度和长度："高度=32宽度=24长度=36"
*\${str:split(record:value(\"/dimensions\"), \" \")}*
返回以下字符串：
*\"height=32\", \"width=24\", \"length=36\"*
str:splitKV()
**格式**：str:splitKV(\, \,
\)
**解释**：将字符串中的键值对拆分为字符串值的映射。
参数：
-   字符串-包含键值对的字符串。
-   对分隔符-分隔键值对的一组字符。
-   keyValueSeparator\--将每个键和值分隔开的一组字符。
**示例**：假设一个记录包含一个dimensions字符串字段，该字段记录高度、宽度和长度："高度=32宽度=24长度=36"
*\${str:splitKV(record:value(\"/dimensions\"), \" \", \"=\")}*
返回以下字符串格式：
*\"dimensions\": {*
*\"height\": \"32\",*
*\"width\": \"24\",*
*\"length\": \"36\"*
*}*
str:startsWith()
**格式**：str:startsWith(\, \)
**解释**：根据字符串是以配置的字符子集开始返回true还是false。
参数：
-   字符串-要计算的字符串。
-   子集-要查找的字符子集。
**示例**：查询Data Collector是否以Data开头
*\${str:startsWith(\"Data Collector\", \"Data\")}*
**返回**：true.
str:substring()
**格式**：str:substring(\, \, \)