### Configuration of the Pulp Server

The configuration file for the Pulp server should look like this:

```ini
[database]
ssl: true
verify_ssl: false
```

In this configuration file, you will find a variety of settings that can be customized. Each section is well-documented with comments. Specifically, you can configure the following sections:

- **[email]**: This section is disabled by default. If you want your Pulp server to send email reports, you can enable and configure it here.
- **[database]**: In this section, we have enabled SSL support. If the database is hosted on an external server or requires more advanced parameters, those can be specified here.
- **[messaging]**: For communication between different Pulp components, the default Qpid message broker does not require additional configuration. However, if you are using RabbitMQ and/or have enabled authentication/SSL, these settings need to be configured here.
- **[tasks]**: Pulp can use separate message brokers for inter-component communication and asynchronous tasks. The broker for the latter can be configured in this section. Since we are using the same Qpid instance for both, no further configuration is needed.
- **[server]**: This section is used to configure the server's default credentials, hostname, and other related settings.

### Generating RSA Key Pair and CA Certificate

After configuring the Pulp server, generate the RSA key pair and CA certificate using the following commands:

```sh
$ sudo pulp-gen-key-pair
$ sudo pulp-gen-ca-certificate
```

### Configuring Apache for HTTP(S) Content

Pulp uses Apache to serve its HTTP(S) content. First, initialize the backend database by running the following command as the `apache` user:

```sh
$ sudo -u apache pulp-manage-db
```

If you plan to use SSL transport with Apache, ensure it is configured to meet your enterprise requirements. CentOS installs a self-signed certificate for Apache SSL by default, but you may want to replace it with a certificate signed by your Enterprise CA. Additionally, disable insecure SSL protocols. As a minimum, add the following settings to `/etc/httpd/conf.d/ssl.conf`:

```ini
SSLProtocol all -SSLv2 -SSLv3
SSLCipherSuite HIGH:3DES:!aNULL:!MD5:!SEED:!IDEA
```

This is only a guide, and most enterprises will have their own security standards. New vulnerabilities may require updates to these settings. It is your responsibility to check and update any security-related settings for your environment.

### Enabling and Starting Apache

With Apache configured, set it to start on boot and start it up:

```sh
$ sudo systemctl enable httpd.service
$ sudo systemctl start httpd.service
```

### Enabling and Starting Pulp Backend Services

Pulp has several backend services that must be operational. Enable and start each service:

```sh
$ sudo systemctl enable pulp_workers.service
$ sudo systemctl start pulp_workers.service
$ sudo systemctl enable pulp_celerybeat.service
$ sudo systemctl start pulp_celerybeat.service
$ sudo systemctl enable pulp_resource_manager.service
$ sudo systemctl start pulp_resource_manager.service
```

### Installing Pulp Administrative Components

Install the administrative components of Pulp to manage the server:

```sh
$ sudo yum install pulp-admin-client pulp-rpm-admin-extensions pulp-deb-admin-extensions
```

### Configuring Pulp Admin Client for Self-Signed Certificates

Since Pulp is designed to be administered remotely, it communicates over SSL. If you are using self-signed certificates, edit `/etc/pulp/admin/admin.conf` and add the following parameter in the `[server]` section:

```ini
verify_ssl: False
```

### Testing Pulp Server

Test that the Pulp server is operational by logging in. A simple installation comes with one administrator account where the username and password are both `admin`.

```sh
$ pulp-admin login -u admin -p admin
```

If everything is set up correctly, you should see output similar to the following and be able to query the server status.

### Building Repositories in Pulp

#### Creating and Managing RPM-based Repositories

Although Pulp offers many features, we will demonstrate a basic workflow for managing repositories. The process for handling RPM-based and DEB-based repositories is similar. Let's start with RPM-based repositories.

1. **Create a new repository**:
   ```sh
   $ pulp-admin rpm repo create --repo-id='centos76-os' --relative-url='centos76-os' --feed=http://mirror.centos.org/centos/7/os/x86_64/
   ```

   - `rpm repo create`: Creates a new RPM-based repository definition.
   - `--repo-id='centos76-os'`: Unique identifier for the repository.
   - `--relative-url='centos76-os'`: URL where the repository will be published.
   - `--feed=http://mirror.centos.org/centos/7/os/x86_64/`: Upstream location for synchronization.

2. **Synchronize the packages**:
   ```sh
   $ pulp-admin rpm repo sync run --repo-id='centos76-os'
   ```

3. **Check synchronization status**:
   ```sh
   $ pulp-admin rpm repo sync status --repo-id='centos76-os'
   ```

4. **Publish the repository**:
   ```sh
   $ pulp-admin rpm repo publish run --repo-id='centos76-os'
   ```

#### Creating Update Repositories

To manage updates, create a second repository for the update packages. Use a date stamp in the `repo-id` and `relative-url` to differentiate it:

```sh
$ pulp-admin rpm repo create --repo-id='centos7-07aug19' --relative-url='centos7-07aug19' --feed=http://mirror.centos.org/centos/7/updates/x86_64/
$ pulp-admin rpm repo sync run --repo-id='centos7-07aug19'
$ pulp-admin rpm repo publish run --repo-id centos7-07aug19
```

#### Disk Usage and Orphan Recovery

Pulp efficiently manages disk usage by avoiding duplicate package downloads. To clean up orphaned packages, use:

```sh
$ pulp-admin orphan remove --all
```

This command removes all orphaned packages across the entire Pulp server. You can also specify specific types of orphans to remove.

### Building DEB-based Repositories

The process for managing DEB-based repositories is similar to RPM-based repositories. Here is an example for Ubuntu Server 18.04 LTS:

1. **Create a repository**:
   ```sh
   $ pulp-admin deb repo create --repo-id='bionic-amd64-08aug19' --relative-url='bionic-amd64-08aug19' --feed='http://de.archive.ubuntu.com/ubuntu' --releases=bionic --components=main --architectures='amd64' --serve-http=true
   ```

   - `deb repo create`: Creates a new DEB-based repository definition.
   - `--repo-id='bionic-amd64-08aug19'`: Unique identifier for the repository.
   - `--relative-url='bionic-amd64-08aug19'`: URL where the repository will be published.
   - `--feed='http://de.archive.ubuntu.com/ubuntu'`: Upstream location for synchronization.
   - `--releases=bionic`: Ubuntu release.
   - `--components=main`: Repository component.
   - `--architectures='amd64'`: Architecture.
   - `--serve-http=true`: Serve the repository over HTTP.

By following these steps, you can effectively manage both RPM-based and DEB-based repositories using Pulp.