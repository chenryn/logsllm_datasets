and the parsed term is executed. The reduction rule is as
deﬁned follows:
now
variable-restricted
present
eval
for
the
P arse(str 0) = s
R = N ewAR()
K, B = setF D(H, A1, s, true)
{str 1, ..., str n} ⊆ Free(s)
A1 = setV D([R], s)
H, A, eval(str 0, str 1, ..., str n) → K, B, @EVAL(s, A)
setV D and setF D methods in the premise scan the eval
code for all local variable and function declarations and
add the corresponding bindings to the activation record.
@EVAL( , A) is an internal statement context which re-
duces any statement placed in it to a terminal value and
then restores the stack A in case of normal termination.
Built-in Objects and the DOM. The ES5 standard deﬁnes a
set of objects and functions that must be initially present
in all JavaScript environments. We model this by deﬁning
an initial heap and stack H0, A0 which contain all the pre-
deﬁned objects. For ease of analysis, we only model a
small set of the built-in objects in SESlight, namely: global
object, constructors Object, Array, methods toString, valueOf,
hasOwnProperty, propertyIsEnumerable of Object.prototype, meth-
ods toString, call, apply of Function.prototype and methods
toString, join, concat, push of Array.prototype.
As mentioned in section 2, SESlight imposes the restric-
tion that all built-in objects, except the global object, are
transitively immutable, which means that their @extensible
property is set to false and all their properties have attributes
non-conﬁgurable and non-writable. Furthermore, all built-in
368
properties of the global object also have the attributes non-
conﬁgurable and non-writable.
In addition to the built-in objects, all browser JavaScript
environments also contain a pre-deﬁned set of Document
(DOM) objects whose initial root
is pointed to by the
‘document’ property of the global object. The DOM ob-
jects have several properties and methods for manipu-
lating features of the underlying Web page. In this pa-
per, we consider all DOM objects as security-critical and
conservatively model all DOM methods using the stub
function(x˜){return document},
the document object
leaks via all methods of all DOM objects.
that
is,
IV. THE API CONFINEMENT PROBLEM FOR SESlight
In this section, we formally deﬁne the conﬁnement prob-
lem for SESlight APIs. We start by building up the formal
machinery required for stating the problem.
A. Preliminaries
Given a state S := (H, A, t), H(S), A(S) and T (S)
denote the heap, stack and term part of the state. Given states
S and T , we say S reaches T in many steps, denoted by
S (cid:32) T , iff either S → T holds or exists states S1, . . . , Sn
(n ≥ 1) such that S → S1 → . . . → Sn → T holds. For
a state S, T r(S) is the possibly inﬁnite sequence of states
S, S1, . . . , Sn, . . . such that S → S1 → . . . → Sn → . . ..
Given a set of states S, Reach(S) is the set of all reachable
states, deﬁned as {S(cid:48) | ∃S ∈ S : S (cid:32) S(cid:48)}
Labelled Semantics. In the setting considered in this paper,
the resources to be conﬁned are references to certain objects
that are deemed critical by the hosting page. Since precise
references only come into existence once the hosting page
code executes, we statically (and conservatively) identify all
critical references by their allocation sites in the hosting page
code. In order to formalize this, we statically attach labels
to all nodes in the syntax tree of a term. For example, the
statement if (x) then y = 1 else y = 2 is labelled as ˆl1:if (x)
then ˆl2:y = 1 else ˆl3:y=2 where ˆli are the labels. L is the
domain from which labels are picked. Labels are also at-
tached to heap locations and stack frames, based on the term
whose evaluation created them. All rules H, A, t → K, B, s
are augmented so that any allocated location or activation
record carries the label of term t and also any dynamically
generated sub-term of s carries the label of term t. Finally,
unique labels are attached to all locations on the initial heap
H0. We use ˆlg as the label for the global object.
From here onwards, we will only consider the labelled
semantics for SESlight. To avoid notational overhead, we
will use the same symbols l, R and s for labelled locations,
activation records and statements and deﬁne Lab(l), Lab(R)
and Lab(s) respectively as the labels associated with them.
The map Lab is naturally extended to sets of heap locations
and activation records.
α-Renaming. As discussed earlier, unlike JavaScript,
SESlight is a lexically scoped language. We formalize this
property by deﬁning a semantics preserving procedure for
renaming bound variables in a SESlight term. The procedure
is parametric on a variable renaming map α : Vars × L →
Vars that generates unique names for a particular scope
label. The procedure makes use of an auxiliary property
named closest bounding label, which we deﬁne ﬁrst.
Deﬁnition 1: Given a labelled statement s and a variable
x appearing in s we deﬁne the closest bounding label of
x, denoted by Bl(x, s), as the label of closest enclosing
function expression, function declaration or try-catch-ﬁnally
statement that has x as one of its bound variables.
We now deﬁne the α-Renaming procedure.
Deﬁnition 2: [α-Renaming] Given a labelled statement s
and a variable renaming map α : Vars × L → Vars, the
renamed statement Rn(s, α) is deﬁned by the following pro-
cedure: For each variable x appearing in s, if x /∈ Free(s),
replace x with α(x, Bl(x, s))
In order to prove that the above procedure is semantics
preserving, we extend the renaming function Rn to labelled
program traces and show that renamed and unrenamed traces
are bisimilar. States are renamed by individually renaming
the heap, stack and term components. A heap is renamed
by appropriately renaming all closures appearing on it and
a stack is renamed by renaming all variables using the label
of the property record in which it appears.
Theorem 1: For all wellformed states S, Rn(T r(S)) =
T r(Rn(S))
Proof Sketch: By induction on the length of the trace, with
the inductive case proven using a case analysis on the set of
(cid:3)
reduction rules.
B. Problem Deﬁnition
In this section, we formally state the API Conﬁnement
problem. We assume that the security-critical resources are
speciﬁed using a set of forbidden allocation-site labels P .
Further, we assume that labels of all DOM objects also
belong to the set P . This is not required for the correctness
of the subsequent analysis, but is the special case under
which our conservative model of the DOM is practically
relevant.
In accordance with the API+Sandbox mechanism,
the
hosting page code runs ﬁrst and creates an API object, which
is then handed over to the untrusted code that runs next.
The hosting page code is called the trusted API service.
We assume for simplicity that the hosting page stores the
API object in some shared global variable api. In order
for this mechanism to be secure, untrusted code must be
appropriately restricted so that the only trusted code global
variable it has access to is api. Using the variable-restricted
SESlight eval, it is straightforward to restrict any term s to
any speciﬁc set of global variables {x1, . . . , xn} simply by
rewriting s to eval(s, x1 , . . . , xn).
In order to set up the conﬁnement problem we also
provide untrusted code access to a global variable un, which
is used as a test variable in our analysis and is initially
set to undeﬁned. The objective of untrusted code is to store
a reference to a forbidden object in it. Without loss of
generality, we assume that the API service t is suitably-α-
renamed according to the procedure in deﬁnition 2 so that
it does not use the variable un.
In summary, if t is the trusted API service and s is the
untrusted code then the overall program that executes in
the system is t; var un; eval(s, “api”, “un”). Informally, the API
conﬁnement property can be stated as: for all terms s, the
execution of t; var un; eval(s, “api”, “un”) with respect to the
initial heap-stack H0, A0 never stores a forbidden object in
the variable un. We now formally deﬁne this property. The
deﬁnition makes use of the map PtsTo : Vars u × 2Σ → 2L
which we deﬁne ﬁrst. Recall that lg is the location of the
global object.
Deﬁnition 3: [Points-to] Given a set of states S ∈ 2Σ , and
a variable v ∈ Vars u, PtsTo(l, v,S) is deﬁned as the set:
{Lab(H(lg)(v)) | ∃A, t : H, A, t ∈ S}
Given a trusted API service, let S0(t) be the set of states
{H0, A0, t; var un; eval(s, “api”, “un”) | s ∈ SESlight}.
Deﬁnition 4: [Conﬁnement Property] A trusted service t
safely encapsulates a set of forbidden allocation-site labels
P iff PtsTo(“un”, Reach(S0(t))) ∩ P = ∅. We denote this
property by Conﬁne(t, P ).
API Conﬁnement Problem. Given a term t and a set of
forbidden allocation-site labels P , verify Conﬁne(t, P )
V. ANALYSIS PROCEDURE
In this section we deﬁne a procedure D(t, P ) for verifying
that an API service t safely conﬁnes a set of critical
resources P . The main idea is to deﬁne a tractable procedure
for over-approximating the set PtsTo(“un”, Reach(S0(t)))
where S0(t) = {H0, A0, t; var un; eval(s, “api”, “un”) | s ∈
SESlight}. We adopt an inclusion-based, ﬂow-insensitive
and context-insensitive points-to analysis technique [1] for
over-approximating this set. This is a well-studied and scal-
able points-to analysis technique. Flow-insensitivity means
that
the analysis is independent of the ordering of the
statements and context-insensitivity means that the analysis
only models a single activation record for each function,
which is shared by all call-sites. Given the presence of
closures and absence of a static call graph in JavaScript, a
context-sensitive analysis is known to be signiﬁcantly more
expensive than a context insensitive one (see [14, 27] for
complexity results). The technique adopted in this paper on
the other-hand is polynomial time. Given that there has been
very little prior work (see [13]) on deﬁning provable-sound
369
static analyses for JavaScript, we believe that a provably-
sound ﬂow-insensitive and context-insensitive analysis is a
reasonable ﬁrst step.
In adopting the well-known inclusion-based based ﬂow
and context insensitive points-to analysis technique to our
problem, we are faced with the following challenges: (1)
Statically encoding eval statements (2) Statically reasoning
about the entire set of states S0(t) at once. (3) Correct mod-
eling of the various non-standard features of the SESlight
semantics.
We resolve these challenges as follows. As discussed
earlier, the arguments to eval in SESlight statically specify a
bound on the set of free variables of the code being eval-ed.
We use this bound to deﬁne a worst case encoding for eval,
which essentially amounts to creating all possible points-to
relationships between all the objects reachable from the set
of free variables. Since the encoding only depends on the set
of free variables and is independent of the actual code being
evaluated, it resolves both challenges (1) and (2). For (3),
we leverage upon the insights gained while developing the
formal semantics for SESlight and formulate our abstractions
in a sound manner. We also present a proof of correctness
for our procedure which guarantees that we (conservatively)
respect the semantics.
We now present the details of the procedure. We follow
the approach of Whaley et al. [40] and express our analysis
algorithm in Datalog. Before describing the details of this
approach, we provide a quick introduction to Datalog.
Quick introduction to Datalog. A Datalog program
consists of facts and inference rules. Facts are of the form
P (t1, . . . , tn) where P is a predicate symbol and ti are
terms, which could be constants or variables. Rules are
sentences that provide a means for deducing facts from
other facts. Rules are expressed as horn clauses with the
general form L0:−L1, . . . , Ln where Li are facts. Given a
set of facts F and a set of inference rules R, Cons(F,R)
is the set of all ”consequence” facts that can be obtained
by successively applying the rules to the facts, upto a ﬁxed
point. As an example if F := {edge(1, 2), edge(2, 3)} and
(cid:27)
(cid:26) path(x , y) :− edge(x , y);
path(x , z ) :− edge(x , y), path(y, z )
R :=
is
the
set {edge(1, 2), edge(2, 3),
then Cons(F,R)
path(1, 2), path(2, 3), path(1, 3)}. We refer
the reader
to [7] for a comprehensive survey of Datalog and its
semantics.
Procedure Overview. A high-level overview of the proce-
dure D(t, P ) is as follows:
(1) Collect facts (expressed over Datalog relations) about
the statements present in t and add them to a Database.
Add facts about
the initial heap H0 and the term
var un; eval(s, “un”, “api”) for any s ∈ SESlight.
(2) Conservatively encode the semantics of SESlight in the
form Datalog inference rules and then use them to compute
the consequence set of the Database obtained in (1).
(3) Analyze the databases from (1) and (2), and check for
conﬁnement violating facts.
The rest of this section is organized as follows: 5.1
describes the encoding of SESlight statements as Datalog
facts, 5.2 presents the inference rules, 5.3 presents the formal
deﬁnition of the procedure and 5.4 provides a soundness
argument.
A. Datalog Relations and Encoding
Our encoding of program statements into Datalog facts,
makes use of the standard abstraction of heap locations
as allocation-site labels. Since JavaScript represents objects
and function closures in the same way,
this applies to
function closures as well. In the terminology of control-
ﬂow analysis, this abstraction makes our analysis 0-CFA.
Further, the analysis only supports weak updates, which
means we aggregate values with each variable and property
assignment.
Facts are expressed over a ﬁxed set of relations R,
enumerated in ﬁgure 4 along with their domains. V ⊆ Vars
is the domain for variable and ﬁeld names, L ⊆ L is the
domain for allocation-site labels (abstract locations) and I is
the domain for function argument indices. A similar set of
relations has been used for points-to analysis of Java in [3,
40]. Besides relations that capture facts about the program,
we use Heap, Stack , Prototype to capture facts about the
heap and stack. Heap(ˆl1, x, ˆl2) encodes that an object with
label ˆl1 has a ﬁeld x pointing to an object with label ˆl2
and Stack(x, ˆl) encodes that variable x points to an object
with label ˆl. Prototype captures the prototype-inheritance
relation between various objects.
We deﬁne Facts as the set of all possible facts that can
be expressed over the relations in R. We now describe the
encoding of statements in SESlight into facts over R. For
each label ˆl, we assume a unique and countably-inﬁnite set
of labels h(ˆl, 1), h(ˆl, 2), . . . associated with it. The purpose
of these labels is to denote objects that get created on the
ﬂy during the execution of a statement. Further we use a
variable renaming map α : Vars × L → Vars in deﬁning
our encoding. The encoding of a statement s depends on the
label ˆl of the nearest enclosing scope in which it appears and
is given by the map EncT (s, ˆl). Due to space limitations we
only describe the main ideas here and present the formal
deﬁnition of EncT (s, ˆl) in the accompanying tech report