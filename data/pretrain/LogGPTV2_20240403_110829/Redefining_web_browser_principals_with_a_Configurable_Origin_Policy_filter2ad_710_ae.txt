### Introduction and Related Work

In a recent study, researchers applied a model to five web security mechanisms (the Origin header, Cross-Origin Resource Sharing, Referer Validation, HTML5 forms, and WebAuth) and discovered two known and three previously unknown vulnerabilities [10]. Another recent paper also adopted this model to identify design flaws [16].

### Modeling

We have modified the existing model to switch from a same-origin policy (SOP) to a configurable origin policy (COP). In this new model, the `owner` property of `ScriptContext` points to a COP origin instead of an SOP origin. All operations are adapted for COP origins. For example, the creation of a COP origin is defined as follows:

```alloy
pred createCOPOrigin[aResp: HTTPResponse] {
  one originID: COPOrigin |
    originID !in (univ.theReqCOPOrigin & univ.theRespCOPOrigin)
    implies {
      (aResp.headers & RespOriginIDHeader).theRespCOPOrigin = originID
    }
}
```

We check the COP origin in each HTTP response to ensure that the response fits into different principals.

```alloy
fact COPOriginMatch {
  all sc: ScriptContext, t: sc.transactions |
    sc.owner = (t.resp.headers & RespOriginIDHeader).theRespCOPOrigin
    or (t.resp.headers & RespOriginIDHeader).theRespCOPOrigin = defaultOriginID
}
```

### Experiment Setup

The attack model we use is the web attacker model introduced by Akhawe et al. [11]. The attacker controls malicious websites and clients but does not control the network, meaning they cannot sniff or alter network contents. The Alloy code for the attacker model is inherited from Akhawe et al. [11].

```alloy
check checkSessionIntegrity {
  no t: HTTPTransaction | {
    some t.resp
    some (WEBATTACKER.servers & involvedServers[t])
  }
} for 5 but 0 ACTIVEATTACKER, 1 WEBATTACKER, 1 COPAWARE, 0 GOOD, 0 SECURE, 0 Secret, 1 HTTPClient
```

Results: Alloy did not find any counterexamples for operations not considered by COF, indicating that session integrity is ensured given the attack model and limited scope.

### Evaluation

#### A. Deploying Web Applications

1. **Migrating Existing Code**: To fully deploy COF, browser and server-side support are required. For server-side support, the application code needs to be modified to use COF. We demonstrate that such modifications are lightweight and easy to perform by modifying several popular web applications.

   - **Proxy Assistance**: We designed a COF server-side proxy to mediate communication between servers and clients. This proxy, available at [35], adds COF support to unmodified websites.
   
     Example: CNN uses `document.domain` to merge `www.cnn.com` and `ads.cnn.com`. When `document.domain` is disallowed, an advertisement iframe is missing due to denied JavaScript access. With our proxy and COF, the CNN website can still display its content correctly, demonstrating that COF can achieve site collaboration without `document.domain`.

   - **Server-side Modification**: We show how to adopt COF on server-side applications and demonstrate the relative ease of modifying server-side code. For example, in web applications with login sessions, the login cookie or session ID assigned by the server is mapped to a unique originID. We reuse the validation of session ID or login cookie as the validation of originID. We modified Magento, a popular eCommerce platform, to illustrate this approach.

     ```php
     protected function _validate() {
       ...
       if (validation failed) return false;
       if (checkPSL()) return false;
       if (isEmptyOriginID()) createOriginID();
       header('originID:' . getOriginID(session_id()));
       // get originID from sessionID-to-originID mapping
       return true;
     }
     ```

     Figure 8 shows the modification on `Varien.php` of Magento. Each originID is mapped to a session ID, where the session ID still authenticates users, and the originID differentiates and isolates principals.

2. **Utilizing New Features in COP**: As an example, we created a mini web integrator using COP features. Isolated mashups from the same domain are created with different originIDs for different gadgets.

#### B. Performance Evaluation

We measured the loading time of web pages under COP using WebKit modified to support COF and a COF proxy. The loading time under SOP was measured with unmodified WebKit. We used Alexa's top 200 websites [43] for evaluation.

Figure 9 shows the cumulative distribution function (CDF) of loading times under COP and SOP. The curves are nearly identical, indicating that COF introduces minimal delay. This is expected since SecurityOrigin checks take little time compared to rendering, parsing, and JavaScript execution.

#### C. Compatibility Evaluation

We visually compared the rendering of Alexa's top 100 websites with a COP-enabled browser and an unmodified browser. For sites requiring login (e.g., Facebook), we logged in first and interacted with the sites (e.g., clicking menus, posting messages). As expected, all 100 websites rendered identically in both browsers.

### Conclusions

In this paper, we propose COF, which uses configurable origins dynamically changed by the web server and its client-side program. This approach gives more flexibility in content-to-principal mapping while requiring both client and server-side modifications. Given the rapid evolution of web applications, we believe COF will be adopted by the community in the future.

### Acknowledgments

We thank Shuo Chen at Microsoft Research, Yi Yang at Northwestern University, Collin Jackson and Zack Weinberg at CMU Sillion Valley, and all anonymous reviewers for their valuable feedback.

### References

[1] K. Singh, A. Moshchuk, H. Wang, and W. Lee, “On the Incoherencies in Web Browser Access Control Policies,” in SP: IEEE Symposium on Security and Privacy, 2010.

[2] H. J. Wang, X. Fan, C. Jackson, and J. Howell, “Protection and Communication Abstractions for Web Browsers in MashupOS,” in SOSP: ACM Symposium on Operating Systems Principles, 2007.

... (Additional references follow)

---

This optimized version improves clarity, coherence, and professionalism, making it easier to understand and follow.