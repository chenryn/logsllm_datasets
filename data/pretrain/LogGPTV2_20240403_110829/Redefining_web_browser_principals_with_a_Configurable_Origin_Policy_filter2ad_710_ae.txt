mula” [10]. They apply the model upon ﬁve web security
mechanism (the Origin header, Cross-Origin Resource Shar-
ing, Referer Validation, HTML5 forms, and WebAuth), and
discover two known vulnerabilities and three unknown vul-
nerabilities. A recent paper [16] also adopts their model to
ﬁnd design ﬂaws.
Modeling. We modify their model to switch same-origin
policy to conﬁgurable origin policy. The owner property of
ScriptContext points to a COP origin instead of an SOP
origin. All the operations are introduced for COP origin. For
example, a create operation is as follows.
pred createCOPOrigin[aResp: HTTPResponse]{
one originID:COPOrigin |
originID !in
(univ.theReqCOPOrigin&univ.theRespCOPOrigin)
implies {
(aResp.headers&RespOriginIDHeader).theRespCOPOrigin=
originID
}
}
We check the COP origin in each HTTP response to let
the response ﬁt into different principals.
fact COPOriginMatch{
all sc : ScriptContext, t:sc.transactions |
sc.owner =
(t.resp.headers&RespOriginIDHeader).theRespCOPOrigin
or
(t.resp.headers&RespOriginIDHeader).theRespCOPOrigin
= defaultOriginID
}
Experiment Setup. The attack model that we are using is the
web attacker model introduced by Akhawe et al. [11]. The
attacker controls malicious web sites and clients but does not
master the network. Therefore, he cannot sniff or alter the
contents on the network. The Alloy codes of the attacker
model are inherited from Akhawe et al [11].
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:53:23 UTC from IEEE Xplore.  Restrictions apply. 
check checkSessionIntegrity{
no t:HTTPTransaction | {
some t.resp
some (WEBATTACKER.servers & involvedServers[t])
}
} for 5 but 0 ACTIVEATTACKER, 1 WEBATTACKER,
1 COPAWARE, 0 GOOD, 0 SECURE, 0 Secret, 1 HTTPClient
Results. Alloy is not able to ﬁnd any counterexample by
operations that are not considered by COF, implying that the
session integrity is ensured given the attack model and limited
scope.
VI. EVALUATION
First, we will discuss the practicality of deploying web
applications using COP in Section VI-A. Next, we will eval-
uate COF’s performance in Section VI-B. Then we discuss
the compatibility in Section VI-C. We use a client with a
2.5GHz CPU with 16GB memory, and a server with a dual-
core 1.6GHz CPU and 1GB memory, running Apache-PHP-
MySQL. Both of these machines are on the same local net-
work.
A. Deploying Web Applications
1) Migrating Existing Code: To fully deploy COF, we
need browser support and server-side support. For server-side
support, the server-side application code needs to be modiﬁed
to use COF. By modifying several popular web applications,
we demonstrate that such modiﬁcations are lightweight and
easy perform.
Proxy Assistance. Because we don’t have control over many
web servers, we designed a COF server-side proxy that me-
diates communication between servers and clients. The COF
proxy, which can be found at [35], adds COF support to
unmodiﬁed web sites to demonstrate our idea.
CNN is using document.domain to merge two of its do-
mains: www.cnn.com and ads.cnn.com. When we disallow
document.domain, an advertisement iframe is missing be-
cause the JavaScript access between the main page and the
iframe is denied. When deploying our proxy, and disallowing
document.domain in COF, the CNN web site can still display
its content correctly This demonstrates that COF can achieve
site collaboration without using document.domain.
Server-side Modiﬁcation. We show how to adopt COF upon
server-side applications and demonstrate the relative ease of
modifying server-side code. We take web applications with
login sessions as an example. The login cookie or session
ID assigned by the server is mapped to a unique originID.
We can reuse the validation of session ID or login cookie
as the validation of originID. We changed one popular web
application − Magento, to demonstrate our approach.
Our example Magento [42] is a top eCommerce software
platform used by more than 60,000 online stores. It is written
in PHP and runs in the Apache, PHP and MySQL platform.
Magento adopts PHP built-in session management. As shown
in Figure 8, we just need to generate a unique originID for
each session ID.
protected function _validate() {
...
if (validation failed) return false;
if (checkPSL()) return false;
if (isEmptyOriginID()) createOriginID();
header(’originID:’.getOriginID(session_id()));
//get originID from sessionID-to-originID mapping
return true;
}
Fig. 8. Modiﬁcation on Varien.php of Magento. Each originID is mapped
to a session ID. Session ID still takes its role in authenticating users, while
originID is used to differentiate and isolate principals.
1
0.8
0.6
0.4
0.2
)
x
(
F
0
0
0.5
Normal WebKit
COF
1
1.5
Loading Time (ms)
2
2.5
5
x 10
Fig. 9. CDF of Loading Time with COF and with Normal WebKit.
2) Utilizing New Features in COP: As an example, we
create a mini web integrator using COP features below.
There are isolated mashups from the same domain in our
web integrator. We create different originIDs for different
gadgets.
 >
 >
...
B. Performance Evaluation
The loading time of web pages under COP is measured
with WebKit modiﬁed to support COF and with a COF proxy.
The loading time of web pages under SOP is measured with
unmodiﬁed WebKit. We use the time when the request is
made as the starting time of loading a web page and the
time of ﬁring of the JavaScript onload event as the end time
of loading a web page. Alexa top 200 web sites [43] are
evaluated.
Figure 9 shows the results. We compare the cumulative
distribution function (CDF) of loading time under COP to the
one under SOP. The curve is almost the same which means
COF brings little delay. The results are not surprising because
little time is spent in SecurityOrigin checks when compared
to other tasks like rendering, parsing, and JavaScript execu-
tion.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:53:23 UTC from IEEE Xplore.  Restrictions apply. 
C. Compatibility Evaluation
We use Alexa top 100 web sites and visually compare
the sites rendered with a COP-enabled browser and with an
unmodiﬁed browser. For some web pages that require login
(like Facebook), we log in ﬁrst. We also follow some of
the links on the web page to explore the functionality of
that web page. For example, we search with some keywords
on Google. We interact with many web sites like Facebook,
e.g., by clicking menus, posting messages on friends’ wall,
and looking at proﬁles of other people. As expected, all the
100 web sites show no difference when rendered with a
COP-enabled browser and when rendered with an unmodiﬁed
browser.
[12] L. Meyerovich, A. P. Felt, and M. Miller, “Object views: Fine-grained
sharing in browsers,” in WWW: Conference on World Wide Web, 2010.
[13] Private Browsing - Firefox. http://support.mozilla.com/en-us/kb/
private+browsing.
[14] Google. Using multiple accounts simultaneously. http://www.google.
com/support/accounts/bin/topic.py?hl=en&topic=28776.
[15] S. Crites, F. Hsu, and H. Chen, “OMash: Enabling secure web
mashups via object abstractions,” in CCS: Conference on Computer
and Communication Security, 2008.
[16] E. Y. Chen, J. Bau, C. Reis, A. Barth, and C. Jackson, “App
isolation: get the security of multiple browsers with just one,” in CCS:
conference on Computer and communications security, 2011.
[17] F. De Keukelaere, S. Bhola, M. Steiner, S. Chari, and S. Yoshihama,
“SMash: Secure component model for cross-domain mashups on
unmodiﬁed browsers,” in WWW: Conference on World Wide Web,
2008.
[18] HTML5: A vocabulary and associated APIs for HTML and XHTML,
W3C Std. [Online]. Available: http://www.w3.org/TR/html5/
VII. CONCLUSIONS
In this paper, we propose COF, which uses conﬁgurable
origins that can be dynamically changed by the web server
and its client-side program. We change the traditional way
of content-to-principal mapping and give the client and the
server more freedom of conﬁguring origins. At the same time,
we also face that fact that COF requires both client and server
side modiﬁcation, which is actually very common among re-
cent and popular web proposals, such as postMessage channel
and new HTML5 iframe tag, due to the fast evolvement of
web applications. Therefore, we believe COF will be adopted
by the community in the future too.
ACKNOWLEDGMENTS
We give our special thanks to Shuo Chen at Microsoft Re-
search for his philosophical advices on the paper, Yi Yang at
Northwestern University for his efforts on the initial version
of the paper, Collin Jackson together with Zack Weinberg
at CMU Sillion Valley for commenting on the draft of the
paper, and all the anonymous reviewers for their thoughtful
comments.
REFERENCES
[1] K. Singh, A. Moshchuk, H. Wang, and W. Lee, “On the Incoherencies
in Web Browser Access Control Policies,” in SP: IEEE Symposium
on Security and Privacy, 2010.
[2] H. J. Wang, X. Fan, C. Jackson, and J. Howell, “Protection and
communication abstractions for web browsers in MashupOS,” in
SOSP: ACM Symposium on Operating Systems Principles, 2007.
[3] W3C Working Draft - Cross-Origin Resource Sharing. [Online].
Available: http://www.w3.org/TR/access-control/#origin
[4] XDomainRequest.
cc288060(v=vs.85).aspx.
http://msdn.microsoft.com/en-us/library/ie/
[5] A. Barth, C.
and I. Hickson. The HTTP Origin
Header - IETF Draft. [Online]. Available: http://tools.ietf.org/html/
draft-abarth-origin-00#section-6
Jackson,
[6] D. Akhawe, P. Saxena, and D. Song, “Privilege separation in html5
applications,” in USENIX Security Symposium, 2012.
[7] G. Banga, P. Druschel, and J. C. Mogul, “Resource containers: A
new facility for resource management in server systems,” in OSDI:
Symposium on Operating Systems Design and Implementation, 1999.
[8] Cross Site Request Forgery (CSRF) - OWASP. [Online]. Avail-
able: http://www.owasp.org/index.php/Cross-Site Request Forgery
%28CSRF%29
[9] L.-S. Huang, Z. Weinberg, C. Evans, and C. Jackson, “Protecting
browsers from cross-origin CSS attacks,” in CCS: Conference on
Computer and Communications Security, 2010.
[10] D. Jackson, Software Abstractions: Logic, Language, and Analysis.
The MIT Press, 2006.
[11] D. Akhawe, A. Barth, P. E. Lam, J. C. Mitchell, and D. Song,
“Towards a formal foundation of web security,” in CSF: the Computer
Security Foundations Symposium, 2010.
[19] Content Security Policy
- Mozilla.
http://people.mozilla.com/
∼bsterne/content-security-policy/index.html.
[20] T. Oda, G. Wurster, P. C. van Oorschot, and A. Somayaji, “SOMA:
Mutual approval for included content in web pages,” in CCS: Con-
ference on Computer and Communications Security, 2008.
[21] H. J. Wang, C. Grier, A. Moshchuk, S. T. King, P. Choudhury, and
H. Venter, “The multi-principal OS construction of the gazelle web
browser,” in 18th Usenix Security Symposium, 2009.
[22] A. Barth, C. Jackson, and J. C. Mitchell, “Securing frame communi-
cation in browsers,” in USENIX Security Symposium, 2008.
[23] Facebook. Facebook connect. http://developers.facebook.com/blog/
post/108/.
[24] Google Friend Connect
friendconnect/.
- Google. http://code.google.com/apis/
[25] S. Hanna, R. Shin, D. Akhawe, P. Saxena, A. Boehm, and D. Song,
“The emperor’s new APIs: On the (in)secure usage of new client-side
primitives,” in W2SP: Web 2.0 Security and Privacy, 2010.
[26] S. Ioannidis and S. M. Bellovin, “Building a secure web browser,” in
USENIX Annual Technical Conference, 2001.
[27] S. Ioannidis, S. M. Bellovin, and J. M. Smith, “Sub-operating systems:
a new approach to application security,” in ACM SIGOPS European
workshop, 2002.
[28] R. S. Cox, S. D. Gribble, H. M. Levy, and J. G. Hansen, “A safety-
oriented platform for web applications,” in SP: IEEE Symposium on
Security and Privacy, 2006.
[29] C. Karlof, U. Shankar, J. D. Tygar, and D. Wagner, “Dynamic
pharming attacks and locked same-origin policies for web browsers,”
in CCS: Conference on Computer and Communication Security, 2007.
[30] C. Reis, S. D. Gribble, and H. M. Levy, “Abstract architectural
principles for safe web programs,” in HotNets: The Workshop on Hot
Topics in Networks, 2007.
[31] K. Jayaraman, W. Du, B. Rajagopalan, and S. J. Chapin, “Escudo:
A ﬁne-grained protection model for web browsers,” in International
Conference on Distributed Computing Systems - ICDCS, 2010.
[32] T. Luo and W. Du, “Contego: Capability-based access control for web
browsers - (short paper),” in Trust and Trustworthy Computing - 4th
International Conference - TRUST, 2011.
[33] Session Deﬁnition - Wikipedia. http://en.wikipedia.org/wiki/Session
(computer science).
[34] Webkit source codes. http://webkit.org/building/checkout.html.
[35] Google code home page of conﬁgurable origin policy. http://code.
google.com/p/conﬁgurableoriginpolicy/.
[36] Cryptographically secure pseudo-random number generator. http:
//en.wikipedia.org/wiki/Cryptographically secure pseudorandom
numb%er generator.
[37] S. Tang, H. Mai, and S. T. King, “Trust and protection in the illinois
browser operating system,” in OSDI: Proceedings of the 9th USENIX
Symposium on Opearting Systems Design & Implementation, 2010.
[38] C. Reis, J. Dunagan, H. J. Wang, O. Dubrovsky, and S. Esmeir,
“Browsershield: vulnerability-driven ﬁltering of dynamic html,” in
OSDI: USENIX Symposium on Operating Systems Design and Im-
plementation, 2006.
bound
http://www.browserauth.net/
[39] Channel
cookies.
channel-bound-cookies.
[40] A. Bortz, A. Barth, and A. Czeskis, “Origin cookies: Session integrity
for web applications,” in W2SP: Web 2.0 Security and Privacy, 2011.
[41] A. Barth, C. Jackson, and J. Mitchell, “Robust defenses for cross-site
request forgery,” in CCS: Conference on Computer and Communica-
tion Security, 2008.
[42] Magento Inc. Magento. http://www.magentocommerce.com/.
[43] Alexa Top Websites. http://www.alexa.com/topsites.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:53:23 UTC from IEEE Xplore.  Restrictions apply.