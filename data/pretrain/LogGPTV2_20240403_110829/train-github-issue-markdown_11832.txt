This code worked with babel 5.x and doesn't with babel 6.x. The expectation is
that countdown1 and countdown2 both produce the same results:
    'use strict';
    function sleep(timeout) {
      return new Promise(function (resolve, reject) {
        setTimeout(function () {
          resolve();
        }, timeout);
      });
    }
    const countdown1 = async function (count) {
      console.log(count);
      await sleep(1000);
      if (--count) {
        await countdown1(count);
      }
    };
    async function countdown2(count) {
      console.log(count);
      await sleep(1000);
      if (--count) {
        await countdown2(count);
      }
    };
    countdown1(5)
      .then(function () {
        console.log('countdown1 done');
        return countdown2(5);
      })
      .then(function () {
        console.log('countdown2 done');
      });
From the produced code, it looks like the transformed countdown2 is getting
shadowed by inner functions using the same name.