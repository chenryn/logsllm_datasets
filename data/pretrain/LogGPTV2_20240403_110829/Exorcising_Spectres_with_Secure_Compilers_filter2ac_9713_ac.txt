information than what is leaked by executing the program without
speculative execution, which is obtained by ignoring observations
produced speculatively. Hence, SNI semantically characterize the
information leaks that are introduced by speculative execution, that
is, those leaks that are exploited in Spectre-style attacks.
Property. Here, we instantiate robust speculative non-interference
in our framework by following SNI’s trace-based characteriza-
tion [27, Proposition 1]. Thus we need to introduce two concepts:
• SNI is parametric in a policy denoting sensitive information.
As mentioned in Section 2.1, we assume that only the private heap
is sensitive. Hence, whole programs W and W ′ are low-equivalent,
written W ′ =L W, if they differ only in their private heaps.
• SNI requires comparing the leakage resulting from non-spec-
ulative and speculative instructions. The non-speculative projection
t↾nse [27] of a trace t extracts the observations associated with non-
speculatively-executed instructions. We obtain t↾nse by removing
from t all sub-strings enclosed between if(v) and rlb observa-
tions. We illustrate this using an example: ·↾nse applied to tsp from
Example 2.2 produces tsp↾nse= call get 8? · if(1) · ret!.
We now formalise SNI. A whole program W is SNI if its traces
do not leak more than their non-speculative projections. That is, if
an attacker can distinguish the traces produced by W and a low-
equivalent program W ′, the distinguishing observation must be
made by an instruction that does not result from mis-speculation.
Definition 3.1 (Speculative Non-Interference (SNI)).
⊢ W : SNI def= ∀W ′
. if W ′ =L W
and Beh(Ω0 (W ))↾nse= Beh(cid:0)Ω0
(cid:0)W ′(cid:1)(cid:1)↾nse
(cid:0)W ′(cid:1)(cid:1)
then Beh(Ω0 (W )) = Beh(cid:0)Ω0
A component P is robustly speculatively non-interferent if it is
SNI no matter what valid attacker it is linked to (Definition 3.2),
where an attacker A is valid (⊢ A : atk) if it does not define a private
heap and does not contain instructions to read and write it.
Definition 3.2 (Robust Speculative Non-Interference (RSNI)).
⊢ P : RSNI def= ∀A. if ⊢ A : atk then ⊢ A [P] : SNI
Example 3.3 (Listing 1 is RSNI in L and not in T). Consider the
code of Listing 1. As expected, this code is RSNI in L. Indeed, L does
not support speculative execution and, therefore, for any trace tns
produced by an L-program tns↾nse= tns.
The same code, however, is not RSNI in T. Consider the code of
Listing 1 (indicated as P1) and an attacker A8 that calls function
get with 8. Since array A is in the private heap, the low-equivalent
program required by Definition 3.1 is the same A8 linked with some
PN, which is the same P1 with some array N with contents different
from A in the heap such that A[8](cid:44)N[8]. Whole program A8 [P1]
generates trace tsp from Example 2.2 while A8 [PN] generates t′
sp
below. We indicate the address of array N as nN and the content
of N[i] as vi
. Low-equivalence yields that addresses are the same
N
(nA + 8 = nN + 8) but contents are not (v8
), and thus B is
A
accessed at different offsets (nB + v8
A
t′
N) · rlb · ret!
sp = call get 8? · if(1) · read(nN + 8) · read(nB + v8
Listing 1 is not RSNI in T (and neither in T-) since the non-speculative
projections of t′
sp and
(cid:26)
tsp are different (read(nB + v8
Security Guarantees. Since RSNI is defined in terms of traces, its
security guarantees depend on which of the four languages L, T, L-,
and T- we consider. As expected, for the source languages L and L-,
RSNI is trivially satisfied; there is no speculative execution in L and
L- and all traces are identical to their non-speculative projections.
sp and of tsp are the same (see above) while t′
A) (cid:44) read(nB + v8
(cid:44) nB + v8
N
(cid:44) v8
N
).
N)).
Theorem 3.4 (All L and L- programs are RSNI).
∀P. ⊢ P : RSNI(L) and ⊢ P : RSNI(L-)
execution, RSNI provides different security guarantees.
For the target languages T and T-, which support speculative
RSNI(T) corresponds to speculative non-interference [27, 28],
which ensures the absence of all speculative leaks. In our setting,
the only allowed leaks are those depending either on information
from the public heap or information from the private heap that is
disclosed through actions produced non-speculatively, e.g., as an
address of a non-speculative memory access. Any other speculative
leak of information from the private heap is disallowed by RSNI(T).
RSNI(T-), in contrast, corresponds to weak speculative non-
interference [28], which allows speculative leaks of information that
has been retrieved non-speculatively. Indeed, in T- non-speculative
reads from the private heap produce actions read(n (cid:55)→ v) that ad-
ditionally disclose the value v read from the heap as part of the non-
speculative projection. As a result, data retrieved non-speculatively
from the private heap can influence speculative actions, which are
not part of the non-speculative projection of the trace, without
Session 2B: Formal Analysis and Verification CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea449violating RSNI(T-). That is, RSNI(T-) ensures the absence only of
leaks of speculatively-accessed data.
Since RSNI(T) ensures the absence of all speculative leaks while
RSNI(T-) only ensures the absence of some of them, any RSNI(T)
program is also RSNI(T-).
Theorem 3.5 (RSNI(T) Implies RSNI(T-)).
∀P. if ⊢ P : RSNI(T) then ⊢ P : RSNI(T-)
As shown in [28], strong and weak speculative non-interference
(that is, RSNI(T) and RSNI(T-)) have different implications for se-
cure programming. In particular, programs that are traditionally
constant-time (i.e., constant-time under the non-speculative se-
mantics) and satisfy strong speculative non-interference are also
constant-time w.r.t. the speculative semantics. Similarly, programs
that are traditionally sandboxed (i.e., do not access out-of-the-
sandbox data non-speculatively) and satisfy weak speculative non-
interference are also sandboxed w.r.t. the speculative semantics.
3.2 Robust Speculative Safety
We now introduce speculative safety (SS), a safety property that
soundly over-approximates SNI. To enable reasoning about secu-
rity using single traces (rather than pairs of traces as in SNI), we
extend our languages with a taint-tracking mechanism that (1)
taints values as “safe” (denoted by S) whenever they can be leaked
speculatively without violating SNI (e.g., the public heap is “safe”)
or “unsafe” (denoted by U) otherwise, and (2) propagates taints to
labels across computations. Speculatively safe programs produce
traces containing only safe labels.
Taint tracking Taint-tracking is at the foundation of our speculative
safety definition and it enables reasoning about security on single
traces. For this, we extend the semantics of our languages L, L-, T,
and T- with a taint tracking mechanism. We consider two taint-
tracking mechanisms, a strong and a weak one, that lead to different
security guarantees, as we show later. Each mechanism is adopted
in the related pair of languages: strong (resp. weak) languages
use the strong (resp. weak) taint-tracking. Our taint-tracking is
rather standard, so we provide an informal overview of its key
features below using the rules for reading from the private heap as
an example; full details are Appendix A. These rules simply extend
Rule E-read-prv with taint, which is highlighted in gray.
B ▷ e ↓ n : σ′
(T-read-prv)
H (−|n|) = v : σ′′
σ = σ′′ ⊓ σ′
σpc ; C, H, B · B ▷ let x = rdpr e in s
σ ⊔ σpc
read(−|n|)
−−−−−−−−−−−−−−−−−−−−→
C, H, B · B ∪ x (cid:55)→ v : U ▷ s
B ▷ e ↓ n : σ′
(T-read-prv-weak)
H (−|n|) = v : σ′′
σ = σ′′ ⊓ σ′
σ ⊔ σpc
σpc ; C, H, B · B ▷ let x = rdpr e in s
read(−|n|(cid:55)→v)
−−−−−−−−−−−−−−−−−−−−−−−→
C, H, B · B ∪ x (cid:55)→ v : σ′ ⊔ σpc ▷ s
the lattice used for non-interference) and are combined using the
least-upper-bound (⊓) and greatest-lower-bound (⊔) operators. For
simplicity, we report here the key cases: S ⊓ U = U and S ⊔ U = S.
• The public part of the initial heap is tainted as safe, and its
private part is tainted as unsafe.
• The taint-tracking mechanism also tracks the taint σpc asso-
ciated with the program counter. The program counter taint is S
whenever we are not speculating and it is raised to U whenever we
are executing instructions speculatively. The latter can happen only
in the T and T- languages, where it is represented by the speculative
state containing more than one speculation instance. In the source
languages, instead, σpc is always S.
• Taint is propagated in the standard way across computations.
For example, expressions combine taints using the least-upper-
bound ⊓, i.e., expressions involving unsafe values are tainted U.
The strong and weak taint-tracking mechanisms differ, however,
in how they handle memory reads from the private heap. When
reading from the private heap, the strong mechanism used in L and
T taints the variable where the data is stored as unsafe (U) (Rule T-
read-prv). In contrast, the weak mechanism of L- and T-, taints the
target value with the greatest-lower-bound of the taints of the mem-
ory address and of the program counter (Rule T-read-prv-weak).
This ensures that information retrieved non-speculatively from the
private heap (i.e., the program counter taint is S) is tainted S.
• The taint tracking does not keep track of implicit flows. Since
the program counter is part of the actions, any sensitive implicit flow
would appear in the trace due to the corresponding if(v) action.
• The taint of labels is the greatest-lower-bound of the taint
of the expressions generating the label and the program counter
taint (Rule T-read-prv and Rule T-read-prv-weak). This ensures
that non-speculative labels are tainted as safe (S), while speculative
labels are tainted as unsafe (U) if they depend on unsafe data and
safe otherwise.
With a slight abuse of notation, in the following we refer to
the languages L, L-, T, and T- extended with the corresponding
taint-tracking mechanisms outlined above whenever we talk about
speculative safety. That is, for speculative safety, programs in L, L-,
T, and T- produce traces λσ of tainted labels λσ , where taints σ are
computed as described above.
Property. Speculative safety ensures that whole programs W gen-
erate only safe (S) actions in their traces. As we show later, SS
security guarantees depend on the underlying language (and on its
taint-tracking mechanism).
Definition 3.6 (Speculative Safety (SS)).
⊢ W : SS def= ∀λσ ∈ Beh(W ).∀α σ ∈ λσ . σ ≡ S
A component P is RSS if it upholds SS when linked against
arbitrary valid attackers (Definition 3.7).
Definition 3.7 (Robust Speculative Safety (RSS)).
⊢ P : RSS def= ∀A. if ⊢ A : atk then ⊢ A [P] : SS
• All values v are tainted with a taint σ ∈ {S, U}. Heaps H
and variable bindings B are extended to record the taint of values.
Taints form the usual integrity lattice S ≤ U (which is the dual of
Example 3.8 (Listing 1 is RSS in L and not in T). The code of
Listing 1 is RSS in L because σpc is always S and, therefore, all
actions are tainted as S. The code, however, is neither RSS in T
Session 2B: Formal Analysis and Verification CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea450nor in T-. For this, consider the trace from Example 2.2. The taint-
tracking mechanism taints the actions as follows:
tsp = call get 8?S · if(1)S · read(A[8])S · read(B[A[8]])U · rlbS · ret!S
The trace contains an unsafe action corresponding to the second
memory access. This happens because the action has been generated
speculatively (that is, σpc is U) and it depends on data retrieved
from the private heap (which T’s taint-tracking taints as U).
Security Guarantees. Similarly to SNI, the security guarantees of
SS depend on the underlying language. As expected, RSS trivially
holds for L and L- since they only produce labels tainted S.
(cid:26)
Theorem 3.9 (All L and L- programs are RSS).
∀P. ⊢ P : RSS(L) and ⊢ P : RSS(L-)
equipped with distinct taint tracking mechanisms.
In contrast, RSS’ guarantees are different for T and T-, which are
RSS(T) is a strict over-approximation of RSNI(T) (and, thus, of
speculative non-interference in terms of [27, 28]) and its preserva-
tion through compilation is easier to prove than RSNI(T)-preservation.
Theorem 3.10 (RSS(T) over-approximates RSNI(T)).
1) ∀P. if ⊢ P : RSS(T) then ⊢ P : RSNI(T)
2) ∃P. ⊢ P : RSNI(T) and ⊬ P : RSS(T)
To understand point 1, observe that RSS(T) ensures that only safe
observations are produced by a program P. This, in turn, ensures
that no information originating from the private heap is leaked
through speculatively-executed instructions in P. Therefore, P satis-
fies RSNI(T) because everything except the private heap is visible to
the attacker, i.e., there are no additional leaks due to speculatively-
executed instructions.
To understand point 2, consider get_nc from Listing 2, which
always accesses B[A[y]]. This code is RSNI(T) because states that can
be distinguished by the traces can also be distinguished by their non-
speculative projections, i.e., speculatively-executed instructions do
not leak additional information. However, it is not RSS(T) because
speculative memory accesses will produce U actions.
1 void get_nc (int y)
2