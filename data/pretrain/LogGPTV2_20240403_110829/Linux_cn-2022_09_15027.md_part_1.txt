---
author: Hari Rana
category: 观点
comments_data:
- date: '2022-09-14 14:26:11'
  message: 用 nix 装系统，用 flatpak 装应用，用 appimage 预览应用，除了学习成本高，占用空间多，效率较低等问题，好像也不错。
  postip: 223.74.89.233
  username: 来自广东韶关的 Firefox 105.0|GNU/Linux 用户
- date: '2022-09-14 17:59:52'
  message: 依赖版本不匹配的问题确实非常头痛。
  postip: 31.223.184.184
  username: 来自巴勒斯坦的 Firefox 104.0|GNU/Linux 用户
- date: '2022-09-14 23:29:50'
  message: "传统的软件包管理的作用不只是让用户安装一个软件，还附带了发行版发布和签名软件包的功能，这意味着通过传统包管理系统发布的包是发行版官方支持，维护者自己构建，并通过签名担保的，如果出了问题可以找到负责的打包人员。\r\nAndroid的应用市场F-Droid有类似的性质：由F-Droid的服务器构建并签名，为保证信任问题，还提供了可重现构建的方法。和传统包管理不同的是，Android的应用打好包之后应用市场基本上不管理依赖，依赖的问题在打包的时候解决，所以应用市场不是传统的包管理。\r\n传统包管理的一个优点是一个应用的所有依赖都可以通过包"
  postip: 223.72.91.1
  username: 来自北京的 Firefox 104.0|GNU/Linux 用户
- date: '2022-09-14 23:37:55'
  message: 另外容器并不意味着安全，例如 flatkill.org 提到的很多flatpak应用并没隔离主目录。Android除了搞容器化和应用权限之外，还配套了很多安全设施，这个不一定适用于大多数GNU/Linux发行版。
  postip: 223.72.91.1
  username: 来自北京的 Firefox 104.0|GNU/Linux 用户
count:
  commentnum: 4
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 3337
date: '2022-09-14 11:02:00'
editorchoice: false
excerpt: 开源贡献者 Hari Rana 表达了他对传统 Linux 软件包格式不再适合现代应用的看法。
fromurl: https://news.itsfoss.com/traditional-packaging-modern-applications/
id: 15027
islctt: true
largepic: /data/attachment/album/202209/14/110931xvslvqkk84ofjzjf.jpg
permalink: /article-15027-1.html
pic: /data/attachment/album/202209/14/110931xvslvqkk84ofjzjf.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lkxed
summary: 开源贡献者 Hari Rana 表达了他对传统 Linux 软件包格式不再适合现代应用的看法。
tags: []
thumb: false
title: 传统的 Linux 软件包格式不适合现代应用
titlepic: true
translator: gpchn
updated: '2022-09-14 11:02:00'
---
> 
> 开源贡献者 Hari Rana 表达了他对传统 Linux 软件包格式不再适合现代应用的看法。
> 
> 
> 
![传统的 Linux 软件包格式不适合现代应用](/data/attachment/album/202209/14/110931xvslvqkk84ofjzjf.jpg)
*图片来源：来自 [Unsplash](https://unsplash.com/?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit) 的 [Kelli McClintock](https://unsplash.com/es/@kelli_mcclintock?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit)*
我多次遇到用户抱怨 LTS 和稳定版的应用软件包有问题，但又声称开发版从来没有发生过这种事情。然而，以我在软件包技术方面的经验和知识，我不能不强调，这是不对的。
发行模式不是问题的根源所在，根本的问题是传统的软件包格式不适合现代的图形应用，不管是什么发行版。那么像 Nix 和 Flatpak 这样的格式是如何解决这些基本问题的？有趣的是，大多数服务器确实利用了容器化（即 Docker），因为它提高了可重复性并增强了可维护性。我们可以从中得到启发，采用一个适用于 Linux 桌面的类似标准。
### 免责声明
1. “传统软件包”是指使用包管理器发布的图形应用程序，而不使用容器，如 `apt`、`dnf`、`pacman` 等。
2. “发行模式”是指发行过程，如长期支持版（LTS）、稳定版和开发版等。
3. “类似的应用程序”是指两个在技术上真正相似的应用程序，如 [Visual Studio Code](https://code.visualstudio.com/) 和 [Code - OSS](https://github.com/microsoft/vscode)。
4. 在这些例子中，我将使用 Arch Linux 作为参考。然而，这些行为与那些大量采用传统软件包格式的发行版是一致的。
5. Nix 不使用容器，它也不是一种容器格式。但为了简单起见，我暂时把它称为一种容器格式。
### 根本问题
![](/data/attachment/album/202209/14/111133mcb707rud0ddyjyy.jpg)
*图片来源：来自 [Unsplash](https://unsplash.com/?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit) 的 [Jackson Simmer](https://unsplash.com/@simmerdownjpg?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit)*
大多数（或许不是全部）大量采用传统软件包格式的发行版都有这个共同的问题：它们都没有利用容器或其他方便的方法来分离依赖关系。用通俗的话说，容器是一个盒子，我们可以把东西放在里面，在不影响主系统（主机）的情况下单独使用它们。
容器通常不会影响“盒子”外的任何东西。并且它们是可移植的，因为它们可以安装在其他发行版上，同时提供一致的体验。利用容器的包管理器会将每个软件包安装在不同的容器中，这提供了一个额外的安全层。这给了开发者更多的控制权和灵活性，他们可以决定在软件包内捆绑什么。
传统的软件包格式产生了一些问题，比如依赖性和包的冲突，这些问题通常需要解决，而不同的发行版有不同的解决办法。
#### 依赖性和软件包的冲突
如果我们试图安装 [Visual Studio Code](https://code.visualstudio.com/)（[visual-studio-code-bin](https://aur.archlinux.org/packages/visual-studio-code-bin)），而 [Code - OSS](https://github.com/microsoft/vscode)（[code](https://archlinux.org/packages/community/x86_64/code/)） 已经安装在 Arch Linux 上，我们会遇到这个问题：
```
$ paru -S visual-studio-code-bin
[...]
:: Conflicts found:
    visual-studio-code-bin: code  
:: Conflicting packages will have to be confirmed manually
Aur (1)                     Old Version  New Version  Make Only
aur/visual-studio-code-bin               1.70.1-1     No
```
这就是所谓的软件包冲突，即两个或多个软件包不能共存。在这种情况下，我们不能同时安装 Visual Studio Code 和 Code - OSS。
当两个应用程序或软件包提供相同的文件，具有相同的名称，并被放置在同一目录下，那么它们实际上是不能共存的，因为这些文件会发生冲突。在这个例子中，Visual Studio Code 和 Code - OSS 都提供了一个名为 `code` 的文件，它们都被放在 `/usr/bin` 中。Visual Studio Code 提供的 `code` 文件用于启动 Visual Studio Code，而 Code - OSS 的 `code` 文件则用于启动 Code - OSS。 虽然这个例子只展示了 Visual Studio Code 和 Code - OSS，但这种情况经常发生在不同的应用程序、库和其他软件中。
#### 无法选择依赖项
![](/data/attachment/album/202209/14/111145oewxmez44jzoo18m.jpg)
*图片来源：来自 [Unsplash](https://unsplash.com/@priscilladupreez?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit) 的 [Priscilla Du Preez](https://unsplash.com/?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit)*
传统软件包格式的最大问题之一是，打包者不能选择依赖项。
例如，如果一个应用程序最近更新，需要依赖版本 1 的程序 A，但发行版只提供了版本 0.9 的程序 A，那么对于升级该应用程序来说就不太理想，因为发行版无法满足要求。这意味着打包者将不得不暂缓打包，直到该发行版发布新的依赖项，或者采用变通的方法。
同样，如果一个应用程序需要依赖 0.8.1 版本的程序 A，但发行版却只提供了 0.9 版本的程序 A，那么这个应用程序就会表现失常，甚至完全不能运行。
##### 带补丁的库和编译配置
为了扩展，一些应用程序需要带补丁的库或额外的编译配置才能正常运行。例如，OBS Studio 需要一个 [打了补丁的 FFmpeg](https://github.com/obsproject/obs-studio/blob/fe889ec28ebd2f323b5933b7b11c5a9207539c59/CI/flatpak/com.obsproject.Studio.json#L259-L261) 来与 OBS Studio 更好地整合。
在传统的软件包格式下，一次只能安装一个依赖项的变体。如果发行版提供的是未打过补丁的 FFmpeg，那么就没有办法安装打过补丁的 FFmpeg，除非打包者能解决这个问题。如果安装了打过补丁的 FFmpeg，但另一个程序高度依赖未打过补丁的 FFmpeg、打过其他补丁的 FFmpeg、内置或删除了其他功能的 FFmpeg，那么其他程序就会出现 bug。
现代应用程序本质上是脆弱的。依赖关系树中的一个小错误或不一致，就会导致应用程序的 bug，使用户体验恶化，甚至会让人觉得是应用程序的问题，而不是软件包本身的问题，这就会妨碍应用程序的声誉。