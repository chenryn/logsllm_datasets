significant performance overhead [34].
• Efficient analysis. Dynamic analysis with execution con-
text is time-consuming [21, 23], and thus may slow down
the protected execution.
In this paper, we propose novel solutions to address these chal-
lenges and achieve efficient UCT enforcement. Before presenting
our design, we define our threat model and provide a brief intro-
duction of Intel PT.
2.4 Threat Model & Background
Our threat model is the same as related works [1, 59, 68, 69], in
which the adversary has full control over the victim’s process mem-
ory within the constraints of hardware page protection. Therefore,
he can perform memory reads or writes at any time during the
victim execution. His goal is to exploit memory errors (e.g., buffer
overflow) to hijack control. We focus on user space attacks, making
kernel exploits out of scope. For simplicity, we do not consider
dynamically generated code (e.g., JIT code emission).
Intel Processor Trace. Intel PT is a hardware feature in modern
Intel CPUs, which efficiently collects change of flow information.
PT only collects events that cannot be derived statically. Specifi-
cally, TNT packets record the branches taken by conditional jumps,
TIP packets log the targets of indirect control-flow transfers, FUP
packets log control-flow transfers caused by signals and interrupts,
and PGE and PGD packets indicate the addresses where PT en-
ables and disables tracing, respectively. With a PT trace, we can
completely reconstruct the program’s runtime execution path. PT
records traces directly to physical memory, bypassing the standard
processor caches to minimize performance side-effects. Since the
trace is collected by hardware and is only configurable from Ring 0,
the attacker cannot use it as a channel to directly attack the monitor
or evade its data collection.
3 SYSTEM DESIGN
We design µCFI as the first UCT enforcement system. It consists of
two components, the static compiler and the dynamic monitor, as
// sensitive type set
// sensitive instruction set
Algorithm 1: Constraining data identification.
Input: G - program to be protected
Output: constraining data set
TS ← ∅
1 repeat
2
3
4
5
6
if typ is function-pointer type: TS ← TS ∪ {typ}
elif typ is composite type:
if sTyp ∈ TS: TS ← TS ∪ {typ}
for sTyp ∈ allTypes(typ):
for typ ∈ Types(G):
for instr ∈ Instructions(G):
until no new sensitive type is found
IS ← ∅
7 repeat
8
9
10
11
12
13
14
15
if instr has type ∈ TS: IS ← IS ∪ {instr}
elif isLoadInst(instr) or isStoreInst(instr):
if value ∈ IS: IS ← IS ∪ {pointer}
if form-arg ∈ IS: IS ← IS ∪ {act-arg}
if act-arg ∈ IS: IS ← IS ∪ {form-arg}
elif isCallInst(instr):
... ...
until no new sensitive instruction is found
CS ← ∅
// constraining data set
16 for instr ∈ IS:
17
18
19
for oprnd ∈ Operands(instr):
CS ← CS ∪ {oprnd}
if oprnd (cid:60) IS and ¬isConstant(oprnd):
type (line 3), or a composite type containing some members whose
type is known to be sensitive (line 4-6). We repeat the search until
no new sensitive type can be found. Then from line 7 to line 15, the
algorithm checks all instructions to identify the sensitive instruc-
tions that either produce a value with a sensitive type (line 9), or
involve the calculation of an already-identified sensitive instruc-
tion. For example, lines 10 and 11 check whether the value read
from or written to the memory has been labeled as sensitive. If so,
it will add the pointer to the sensitive instruction set. We redact
the code to process other type instructions at line 15 for brevity.
In the second phase, the algorithm checks the operands of each
sensitive instruction (line 16-19). Any operand that is neither in the
sensitive instruction set nor a constant value (line 18) is treated as
constraining data and is added to the appropriate set (line 19). The
algorithm returns the set of identified constraining data.
Table 2 shows the result of constraining data identification on
the code in Figure 1. Our analysis finds two sensitive types (i.e.,
function pointer type void (char*)* and function pointer array
type [3 x void (char*)*]), six sensitive instructions and one con-
straining data uid. As uid is neither a sensitive value, nor a constant
in the sensitive instruction: fun = arr[uid], it is constraining data.
3.2 Arbitrary data collection
We design a novel method to efficiently pass any information from
the execution to the monitor. Our method uses software instrumen-
tation to encode any data into control data, and then utilizes Intel
PT to generate the encoded trace efficiently. As we discuss in §2.2,
Figure 2: Overview of µCFI. The µCFI compiler takes the program source
code as input and identifies constraining data. When the binary is executed,
the µCFI monitor performs points-to analysis in an isolated parallel process.
shown in Figure 2. Given the program source code, the compiler
performs static analysis to identify all constraining data (§3.1). It
instruments the program to encode such data as indirect control-
flows for efficient record (§3.2). At the same time, it assigns each
basic block a unique ID and records them in the same way (§3.3).
µCFI compiler generates three outputs: the instrumented binary, the
LLVM IR for points-to analysis, and the mapping from ID to LLVM
IR basic blocks. µCFI monitor works in parallel with the protected
program and oversees the program’s indirect control-flow transfers.
It parses PT trace from the kernel driver to decode basic block
ID (§3.3) and constraining data. With basic block ID, the monitor
identifies executed basic blocks, and performs points-to analysis for
every instruction. With the help of constraining data, the analysis
generates the unique target for each ICT instruction (§3.4). After
each indirect control-flow transfer, the monitor compares the real
target used by the program (recorded in PT trace) with the allowed
target from the points-to analysis (§3.5). If they do not match, the
monitor informs the kernel to terminate the execution to prevent
damage to the system.
3.1 Constraining data identification
As we define in §2.3, constraining data is involved in calculation of
code pointers, but their values cannot be directly inferred from the
execution path. Based on this property, we define a static analysis
procedure in algorithm 1 to find all constraining data in two phases:
first, we collect instructions related to ICT target calculation; second,
we check operands of these instructions to find non-constant values
– such values are constraining data.
In the first phase, we collect all instructions that directly or in-
directly involve function pointer calculation. Direct involvement
means the instruction reads or writes a function pointer. Indirect
involvement means that the instruction prepares the data for direct
involvement, like retrieving the pointer of the function pointer. We
use a recursive approach to identify all such instructions. From line
1 to line 6, our algorithm checks all data types used in the program
to locate sensitive types. A sensitive type is either a function pointer
OS	&	CPUPT	driverIntel	PTμCFIcompilerμCFImonitorsource	codeconstraining	data	detectorconstraining	data	encoderbasic	blockID	encoderLLVM	IRexecutionprocesspoints-to	analyzertracedecoderID2BBpoints-totableupdatequeryblock	IDexecutableconstrainingdataTable 2: Identifying constraining data from code in Figure 1.
sensitive type
sensitive instruction
constraining data
void (char*)*
[3 x void (char*)*]
FP arr[3] = {&A, &B, &C};
FP fpt = &D;
FP fun = NULL;
fun = arr[0];
fun = arr[uid];
(*fun)(buf);
uid
typical PT tracing without our instrumentation cannot achieve the
UCT property due to the lack of non-control information.
µCFI implements two functions, write_data in the protected
program to encode arbitrary data, and read_data in the monitor to
restore data for analysis, as shown in Figure 3. To log an arbitrary
value av, µCFI instruments the program to call write_data with av
as the argument. write_data divides av into several chunks, each
containing N bits (lines 13 and 15). write_data adds a constant base
pointer BASE_ADDR to each chunk to get a new code pointer (line 13)
and uses the new pointer to launch an indirect function call (line 14).
PT will record the new code pointer value into the trace. The base
code pointer points to a special executable area (function allRet)
filled with 2N one-byte return instructions (0xc3 for Intel CPU).
Therefore, the indirect call immediately returns and write_data
will process the next chunk (line 12). The µCFI monitor recovers the
encoded value by calling function read_data. read_data reads PT
packets from the trace, and restores the chunk value by subtracting
the base code pointer value BASE_ADDR from the PT packet (line 21).
By accumulating chunk values, read_data gets the encoded data
(line 22). Then the monitor can perform online points-to analysis
with the decoded data. µCFI imposes a small footprint in the data
cache by sharing only a minimal set of constraining data (see §5
for performance and code overhead evaluation).
Security consequence. Readers may worry about that adding
write_data to the protected program introduces another indirect
function call and thus enlarges the attack surface. We clarify that
such instrumentation does not change the program security, as at-
tackers cannot utilize this indirect function call to build any exploit.
In our implementation of write_data, the mask operation on av
at line 13 guarantees that the offset from BASE_ADDR is within the
boundary of the allRet function. The new_ptr variable is stored in
a register, which is out of the attacker’s control. Even if attackers
corrupt the value of av, the execution will merely call a different
ret instruction and return to the same location as a benign call.
Figure 4a shows the instrumented code from Figure 1. Since uid
is constraining data in the instruction at line 14, the compiler inserts
write_data(uid) at line 13 to record it. Consider an example that
passes 0xABBBCCCDDDEEEFFF from the execution to the analysis. Sup-
pose that the special executable region allRet starts from address
0x1000, and that µCFI uses 12-bit value as a chunk. write_data will
trigger 6 indirect function calls, each encoding 12 bits (the last one
encodes 4 bits). Then PT trace will contain the following packets:
{0x1FFF, 0x1EEE, 0x1DDD, 0x1CCC, 0x1BBB, 0x100A}.
int count = 0;
while (count++ >= CHUNK_SIZE;
1 #define CHUNK_SIZE
2 #define CHUNK_MASK
3 #define CHUNK_COUNT
4 #define BASE_ADDR
5 typedef void (*FP)();
6 typedef unsigned long u64;
7 void
8 u64
9
10 void write_data(u64 av) {
11
12
13
14
15
16 }}
17
18 u64 read_data() {
19
20
21
22
23
24
25 }
Figure 3: Functions for arbitrary data collection. write_data encodes
the input X into code data and dumps it into PT trace, while read_data
restores the encoded value from the PT trace.
u64 chunk = getPTPacket() - BASE_ADDR;
av += (chunk  2) return;
if (uid == 0) {
1 void handleReq(int uid,char *input) {
2
// BBID ID1
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19 }
}
write_data(ID4);
strcpy(buf, input);
(*fun)(buf);
write_data(ID3);
write_data(uid);
fun = arr[uid];
// BBID ID3
// c-data
// s-instr
write_data(ID2);
fun = arr[0];
// BBID ID2
// s-instr
// BBID ID4
// s-instr
} else
{
=== TRACE ===>>
case ID2: PTS[fun] = PTS[arr[0]];
case ID1: PTS[arr[0]] = A; PTS[arr[1]] = B;
int BBID = read_data();
switch(BBID) {
PTS[arr[2]] = C; PTS[fpt] = D;
break;
1 // PTS: global points-to table, initialized with NULL
2 while (true) {
3
4
5
6
7
8