S1, x = S.pop()
(pc, S, M, R) (cid:32) (pc + 1, S1, M, R)
POP
S1, x = S.pop() z = op(x) S2 = S1.push(z)
(pc, S, M, R) (cid:32) (pc + 1, S2, M, R)
UNARY-OP
S1, x = S.pop()
S2, y = S1.pop()
S1, x = S.pop() S2, y = S1.pop() S3, m = S2.pop()
z = op(x, y)
S3 = S2.push(z)
(pc, S, M, R, pc) (cid:32) (pc + 1, S3, M, R, pc + 1)
BINARY-OP
S1, p = S.pop() v = M [p] S2 = S1.push(v)
(pc, S, M, R) (cid:32) (pc + 1, S2, M, R)
MLOAD
z = op(x, y, m)
S4 = S3.push(z)
(pc, S, M, R) (cid:32) (pc + 1, S4, M, R)
S1, p = S.pop() S2, v = S1.pop() M1 = M [p ‚Üê v]
(pc, S, M, R) (cid:32) (pc + 1, S2, M1, R)
TERNARY-OP
MSTORE
SSTORE
SWAP-I
S1, p = S.pop() v = R[p] S2 = S1.push(v)
(pc, S, M, R) (cid:32) (pc + 1, S2, M, R)
v = S.get(i) S1 = S.push(v)
(pc, S, M, R) (cid:32) (pc + 1, S1, M, R)
DUP-I
S1, lbl = S.pop() S2, c = S1.pop() c (cid:54)= 0
(pc, S, M, R) (cid:32) (lbl, S2, M, R)
S1, lbl = S.pop()
S1, p = S.pop() S2, v = S1.pop() R1 = R[p ‚Üê v]
SLOAD
v0 = S.get(0) vi = S.get(i) S1 = S[0 ‚Üê vi] S2 = S1[i ‚Üê v0]
(pc, S, M, R) (cid:32) (pc + 1, S2, M, R1)
(pc, S, M, R) (cid:32) (pc + 1, S2, M, R)
JUMPI-T
S1, lbl = S.pop() S2, c = S1.pop() c = 0
(pc, S, M, R) (cid:32) (pc + 1, S2, M, R)
JUMPI-F
res = call() S1 = S.push(res)
(pc, S, M, R) (cid:32) (pc + 1, S1, M, R)
(pc, S, M, R) (cid:32) (lbl, S1, M, R)
S1, p = S.pop() S2, n = S1.pop() v = sha3(M [p, p + n]) S3 = S2.push(v)
JUMP
(pc, S, M, R) (cid:32) (pc + 1, S3, M, R)
CALL
SHA3
Fig. 3: Operational semantics of Ethereum opcodes. pop, push, and get are self-explanatory stack operations. m[p ‚Üê v]
denote an operations which returns the same stack/mapping as m except that the value of position/key p is changed to v.
Rule UNARY-OP (BINARY-OP, TERNARY-OP) applies to all unary (binary, ternary) operations; rule DUP-I, applies to all
duplicate operations; and rule SWAP-I applies to all swap operations.
deÔ¨Åne symbolic traces of a smart contract so that we can deÔ¨Åne
whether a symbolic trace suffers from certain vulnerability.
To deÔ¨Åne symbolic traces, we Ô¨Årst extend the concrete
values to symbolic values. Formally, a symbolic value has the
form of op(operand0,¬∑¬∑¬∑ , operandn) where op is an opcode
and operand0,¬∑¬∑¬∑ , operandn are the operands. Each operand
may be a concrete value (e.g., an integer number or an address)
or a symbolic value. Note that if all operands of an opcode are
concrete values, the symbolic value is a concrete value as well,
i.e., the result of applying op to the concrete operands. For
instance, ADD(5,6) is 11. Otherwise, the value is symbolic.
One exception is that if op is MLOAD or SLOAD, the result
is symbolic even if the operands are concrete, as it is not
trivial to maintain the concrete content of the memory or
storage. For instance, loading a value from address 0x00 from
the storage results in the symbolic value SLOAD(0x00) and
increasing the value at storage address 0x00 by 6 results in
a symbolic value ADD(SLOAD(0x00),0x06). For another
instance, the result of symbolically executing SHA3(n,p)
is SHA3(MLOAD(n,p)), i.e., the SHA3 hash of the value
located from address n to n + p in the memory.
With the above, a symbolic trace is an alternating sequence
of states and opcodes (cid:104)s0, op0, s1, op1,¬∑¬∑¬∑(cid:105) such that each
state si is of the form (pci, Ss
i ) where pci is the
i , M s
i are the valuations of stack,
program counter; Ss
i and Rs
memory and storage respectively. Note that Ss
i and Rs
i
i , M s
i , M s
i , Rs
i , M s
i ).
i , Rs
may hold symbolic values as well as concrete ones. For all
i, (pci+1, Ss
i+1) is the result of executing opcode
opi symbolically given the state (pci, Ss
i+1, M s
i+1, Rs
A symbolic execution engine is one which systematically
generate the symbolic traces of a smart contract. Note that
different from concrete execution, a symbolic execution would
generate two traces given an if-statement, one visits the then-
branch and the other visits the else-branch. Furthermore, in the
case of an external call (i.e., CALL), instead of switching the
current execution context to another smart contract, we can
simply use a symbolic value to represent the returned value
of the external call.
C. Problem DeÔ¨Ånition
Intuitively, a vulnerability occurs when there are depen-
dencies from certain critical
instructions (e.g., CALL and
DELEGATECALL) to a set of speciÔ¨Åc instructions (e.g., ADD,
SUB and SSTORE). Therefore, to deÔ¨Åne our problem, we
Ô¨Årst deÔ¨Åne (control and data) dependency, based on which
we deÔ¨Åne the vulnerabilities.
DeÔ¨Ånition 1 (Control dependency). An opcode opj is said to
be control-dependent on opi if there exists an execution from
opi to opj such that opj post-dominates all opk in the path
from opi to opj (excluding opi) but does not post-dominates
opi. An opcode opj is said to post-dominate an opcode opi if
all traces starting from opi must go through opj.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:27:22 UTC from IEEE Xplore.  Restrictions apply. 
1219
1
2
3
4
5
6
7
8
1
2
3
4
5
6
7
8
9
10
11
12
13
uint numWithdraw = 0;
function withdraw() external {
uint256 amount = balances[msg.sender];
balances[msg.sender] = 0;
(bool ret, ) = msg.sender.call.value(amount)("");
require(ret);
numWithdraw ++;
}
Fig. 5: A non-reentrant case captured by NW
function transfer(address to, uint amount) external {
if (balances[msg.sender] >= amount) {
balances[to] += amount;
balances[msg.sender] -= amount;
}
}
function withdraw() external nonReentrant {
uint256 amount = balances[msg.sender];
(bool ret, ) = msg.sender.call.value(amount)("");
require(ret);
balances[msg.sender] = 0;
}
Fig. 6: An example of cross-function reentrancy vulnerability
selfdestruct vulnerability (i.e., a smart contract suffers from
this vulnerability if it may be destructed by anyone [5]), we
would not know for sure who should have the privilege to
access selfdestruct.
Let C be a set of critical opcodes which contains CALL,
CALLCODE, DELEGATECALL, SELFDESTRUCT, CREATE
and CREATE2, i.e., the set of all opcode associated with exter-
nal calls except STATICCALL. The reason that STATICCALL
is excluded from C is that STATICCALL can not update
storage variables of the called smart contract and thus is
considered to be safe.
DeÔ¨Ånition 3 (Intra-function reentrancy vulnerability). A sym-
bolic trace suffers from intra-function reentrancy vulnerability
if it executes an opcode opc ‚àà C and subsequently executes
an opcode ops in the same function such that ops is SSTORE,
and opc depends on ops.
A smart contract suffers from intra-function reentrancy
vulnerability if and only if at least one of its symbolic traces
suffers from intra-function reentrancy vulnerability. The above
deÔ¨Ånition is inspired from the no writes after call (NW)
property [4]. It is however more accurate than NW, as it avoids
violations of NW which are not considered as reentrancy vul-
nerability. For instance, the function shown in Figure 5 violates
NW, although it is not subject to reentrancy vulnerability.
It is because the external call msg.sender.call has no
dependency on numWithdraw. In other words, there does
not exist a dependency from opc to ops.
DeÔ¨Ånition 4 (Cross-function reentrancy vulnerability). A sym-
bolic trace tr suffers from cross-function reentrancy vulner-
ability if it executes an opcode ops where ops is SSTORE
and there exists a symbolic trace tr(cid:48) subject to intra-function
the opcode opc of tr(cid:48)
reentrancy vulnerability such that
Fig. 4: An example of control and data dependency
Variable
to
value
balances[msg.sender]
balances[ to]
Symbolic Value
CALLDATALOAD(0x04)
CALLDATALOAD(0x24)
SHA3(MLOAD(0x00,0x40))
SHA3(MLOAD(0x00,0x40))
TABLE II: Variables and their symbolic values of Figure 4
Figure 4 illustrates an example of control dependency.
The source code is shown on the top and the corresponding
control Ô¨Çow graph is shown on the bottom. All variables
and their symbolic values are summarized in Table II. The
source code presents secure steps to transfer _value tokens
from msg.sender account to _to account. There are 3
then-branches followed by 2 storage updates. According to
the deÔ¨Ånition, both SSTORE3 and SSTORE4 are control-
dependent on ISZERO1, ISZERO2 and GT0.
DeÔ¨Ånition 2 (Data dependency). An opcode opj is said to be
data-dependent on opi if there exists a trace which executes
opi and subsequently opj such that W (opi) ‚à© R(opj) (cid:54)= ‚àÖ
where R(opj) is a set of locations read by opj; W (opi) is a
set of locations written by opi.
Figure 4 also illustrates an example of data dependency.
Opcode ISZERO1 and ISZERO2 are data-dependent on
SSTORE3 and SSTORE4. It has 2 traces, i.e., one trace loads
data from storage address SHA3(MLOAD(0x00,0x40))
which is written by SSTORE1 and SSTORE2 in another trace.
We say an opcode opj is dependent on opcode opi if opj
is control or data dependent on opi or opj is dependent on
an opcode opk such that opk is dependent on opi.
Vulnerabilities In the following, we deÔ¨Åne the 4 kinds of
vulnerabilities that we focus on, i.e., intra-function and cross-
function reentrancy, dangerous tx.origin and arithmetic over-
Ô¨Çow. We remark that while we can certainly detect more
kinds of vulnerabilities, it is not always clear how to Ô¨Åx
them,
it may not be feasible to know the intended
behavior. For example, in the case of Ô¨Åxing an accessible
i.e.,
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:27:22 UTC from IEEE Xplore.  Restrictions apply. 
1220
functiontransfer(address _to, uint_value) public {if(_value <=0) revert();if(balances[msg.sender] <_value) revert();if(balances[_to] +_value <balances[_to]) revert();balances[msg.sender] =balances[msg.sender] -_value;balances[_to] =balances[_to] +_value;}ùê∫ùëá!(_value,0)ùêºùëÜùëçùê∏ùëÖùëÇ"(LT(SLOAD(balances[msg.sender]),_value))ùëÜùëáùëÇùëÉùêºùëÜùëçùê∏ùëÖùëÇ‚Äô(LT(ADD(SLOAD(balances[_to]),_value),SLOAD(balances[_to])))ùëÜùëÜùëáùëÇùëÖùê∏((balances[msg.sender],SUB(SLOAD(balances[msg.sender]),_value))ùëÜùëÜùëáùëÇùëÖùê∏)(balances[_to],ADD(SLOAD(balances[_to]),_value))ùëÜùëáùê¥ùëÖùëáFalseTrueTrueTrueFalseFalse1
2
3
4
function sendTo(address receiver, uint amount) public {
require(tx.origin == owner);
receiver.transfer(amount);
}
Fig. 7: An example of dangerous tx.origin vulnerability
depends on ops, and they belong to different functions.
A smart contract suffers from cross-function reentrancy
vulnerability if and only if at
least one of its symbolic
traces suffers from cross-function reentrancy vulnerability.
This vulnerability differs from intra-function reentrancy as the
attacker launches an attack through two different functions,
which makes it harder to detect. Figure 6 shows an exam-
ple of cross-function reentrancy. The developer is apparently
aware of intra-function reentrancy and thus add the modiÔ¨Åer
nonReentrant to the function withdraw for preventing
reentrancy. However, reentrancy is still possible through func-
tion transfer, in which case the attacker is able to double
his Ether. That is, the attacker receives Ether at line 10 and
illegally transfers it to another account at line 3. Although
cross-function reentrancy vulnerabilities were described in
Sereum [13] and Consensys [14], our work is the Ô¨Årst work
to deÔ¨Åne it formally.
DeÔ¨Ånition 5 (Dangerous tx.origin vulnerability). A symbolic
trace suffers from dangerous tx.origin vulnerability if it ex-
ecutes an opcode opc ‚àà C which depends on an opcode
ORIGIN.
A smart contract suffers from dangerous tx.origin vulner-
ability if and only if at
least one of its symbolic traces
suffer from dangerous tx.origin vulnerability. This vulnera-
bility happens due to an incorrect usage of the global vari-
able tx.origin to authorize an user. An attack happens
when a user U sends a transaction to a malicious contract
A, which intentionally forwards this transaction to a con-
tract B that relies on a vulnerable authorization check (e.g.,
require(tx.origin == owner)). Since tx.origin
returns the address of U, contract A successfully impersonates
U. Figure 7 presents an example suffering from dangerous
tx.orgin vulnerability, i.e., a malicious contract may imper-
sonate the owner to withdraw all Ethers.
DeÔ¨Ånition 6 (Arithmetic vulnerability). A symbolic trace
suffers from arithmetic vulnerability if it executes an opcode
opc in C and opc depends on an opcode opa which is ADD,
SUB, MUL or DIV.
A smart contract suffers from arithmetic vulnerability
least one of its symbolic traces suffer
if and only if at
from arithmetic vulnerability. Intuitively,
this vulnerability
occurs when an external call data-depends on an arithmetic
operation (e.g., addition, subtraction, or multiplication). For
instance,
the example in the Figure 2 is vulnerable due
to the presence of data dependency between the external
call at
line 17 and the expression weeklyLimit -
getThisWeekBurnedAmount() at
line 12. Arithmetic
vulnerabilities are the target of multiple tools designed for
vulnerability detection. In general, arithmetic vulnerability
detection using static analysis often results in high false
positive. Therefore, tools such as Securify [4] and Ethainter [5]
do not support this vulnerability in spite of its importance.
In the above deÔ¨Ånition, we focus on only critical arithmetic
operations to reduce false positives. That is, an arithmetic
operation is not considered critical as long as the smart
contract does not spread its wrong computation to other smart
contracts through external calls. For instance, wrong ERC20