### Bandwidth and In-Path Buffer Size Measurements
Standard JavaScript APIs do not provide the necessary functionality for these measurements. However, Fathom’s UDP access enables us to perform these tests effectively.

### HTTP Functionality and Correctness
These tests are designed to detect the presence of HTTP proxies and, if found, to evaluate the use and correctness of caching. The JavaScript `XMLHttpRequest` API is insufficient for implementing Netalyzr’s proxy tests due to its limited control over raw message headers and browser caching. Fathom’s TCP APIs allow us to conduct these tests with the required precision.

### DNS Functionality and Correctness
This category includes a wide range of tests, such as DNS feature support, lookup performance, result correctness, and security checks. While standard JavaScript APIs can infer DNS lookup success from HTTP request statuses, they cannot retrieve the actual IP addresses resulting from these requests, which are essential for most tests in this category. Fathom’s DNS API provides the necessary functionality to perform these tests.

### IPv6 Support
This category encompasses reachability tests to IPv6-only servers and performance comparisons between IPv6 and IPv4 servers. Since the address family remains abstracted, standard JavaScript can handle these tests via URL requests from the relevant servers.

### API Usability
The Java-to-JavaScript porting effort allowed us to compare different programming paradigms. JavaScript’s single-threaded execution model with callback-driven asynchronicity differs significantly from Java’s lightweight threading model. This required substantial reworking of the client’s overall execution flow. In our JavaScript version, each test was restructured into a series of individual functions chained together via callbacks invoked by Fathom upon I/O progress. The main test sequence also leverages test completion callbacks. We implemented the Fathom-driven Netalyzr subset in two weeks, with the majority of the time spent on replicating the overall test execution, reporting harness, and GUI. Each test took approximately an hour to port.

### Fathom Bandwidth Tests
Netalyzr’s test suite includes measurements of available send and receive bandwidths. We implemented two versions of the bandwidth test:

1. **In-Fathom**: To estimate the maximum possible send/receive rate that Fathom can achieve, we used NSPR’s UDP `send/recv` APIs within a tight loop to saturate the available network bandwidth. Executing a tight loop increases CPU load, so we repeated the experiment using `setTimeout` with a delay of 0, allowing other events in the event queue to be processed.
2. **Web Page**: To estimate the send/receive traffic that JavaScript on a web page can achieve, we performed the same tests but invoked Fathom’s socket `send/recv` APIs, both within a loop and using a timer.

We conducted all tests between a laptop and a desktop connected over a 100 Mbps Ethernet and compared them with the speed achieved by `iperf`. Table 6 shows the results. We observed that using NSPR APIs, we achieved much higher traffic rates than with Fathom’s APIs. This is expected because NSPR APIs are synchronous, while Fathom APIs are asynchronous, and every additional callback affects the bandwidth rates. We also noted that send rates increase with larger payloads and match `iperf` send rates at high payload sizes. However, the maximum achievable receive rate did not exceed 73.4 Mbps. The discrepancy may be due to the `js-ctypes` library used for Fathom’s socket APIs, which does not benefit from JavaScript’s JIT optimizations.

To improve send/receive bandwidths, we attempted to parallelize the tests using HTML5 Web Workers. However, we found that the reported bandwidth did not increase when running the test in a tight loop. This is likely due to the limitations of Web Workers, which cannot access the page’s JavaScript namespace, including the `window` object. Access to Fathom APIs requires an additional level of indirection using the `postMessage` API, which limits the achieved bandwidth. For better bandwidth tests, script authors should implement tests via FathomScripts, as they eliminate the message passing overhead.

### Summary
Our implementation of key Netalyzr tests, which are difficult or infeasible to realize in standard JavaScript (e.g., local network configuration, UPnP probing, DNS features, and particularly UDP-based latency and bandwidth tests), confirms Fathom’s versatility. For tests leveraging low-level APIs, such as `fathom.socket.*`, the coding effort is comparable to that required in Java. Tests that can leverage Fathom’s APIs (e.g., `fathom.proto.upnp.*`) require a fraction of the code.

### Web Access Failure Debugging
While troubleshooting suites like Netalyzr work well when the user has sufficient connectivity to download and run the test suite, they fail in the presence of more fundamental connectivity problems. To address this, we developed a “Debug my connection” measurement application, included as a built-in part of the Fathom distribution. The script is currently 400 lines of code and is implemented solely in JavaScript using the existing Fathom API.

**Implementation:**
- The connectivity debugger starts by checking the host’s link-level network interface configuration and progresses through the protocol stack, identifying and reporting problems at each layer.
- It begins by obtaining basic system usage statistics, including memory usage and process load, and detecting whether the system is connected to any network.
- If connected, it reports recent link quality and throughput counters for active interfaces and cross-traffic originating from outside the browser.
- At the network layer, it tests the availability of a default route, IP-level connectivity to the gateway and DNS resolvers, and relevant browser configuration settings.
- At the transport layer, it attempts to retrieve an image from `www.google.com`.

At each stage, the outcome of the tests is reported. Users can initiate diagnosis by clicking a “Debug my connectivity” button in the browser toolbar. We plan to integrate the connectivity debugger into relevant parts of the browser to automatically provide contextual information to the user.

### Collaborative Debugging
Fathom’s rendezvous and server-side capabilities can further troubleshoot possible connectivity problems in the local network. Using UPnP and Zeroconf, we can locate UPnP-enabled gateway devices and other Fathom-enabled devices. Fathom supports listening sockets, enabling local and remote latency and throughput tests. Correlating the results allows us to pinpoint packet loss problems.

We implemented a Fathom-powered web application in 320 lines of code that lets two Fathom instances detect each other using UPnP and initiate probes to measure unidirectional loss and latency. The script compares these values with historic values obtained from Fathom’s passive data collection. Values greater than expected indicate poor local network performance.

### Web Services Debugging: Google Maps
Fathom expands the ability of web developers to understand the context and impediments affecting their pages. We demonstrated Fathom’s utility by playing the role of a developer for Google Maps. We made two modifications to the Google Maps web page:
1. Embedded a diagnostic script that uses Fathom APIs for passive and active measurements.
2. Provided a debug button on the Google Maps page, enabling users to initiate the debug script.

**Implementation:**
- The debug script first verifies if the Load event for the Google Maps web page fired, confirming full page load.
- Figure 4 illustrates the decision logic for failures and successes of page load attempts.
- If the load time resembles the baseline value, the algorithm reports a normal load and terminates.
- If the load time is far smaller than the baseline, the baseline metric does not apply, and possible causes include changing content size, page caching, and improving network conditions.

We used our debug script and performed 10 trials of loading the Google Maps home page with varying packet loss and delays. The debug script identified changes in network operating conditions and adjusted the baseline accordingly.

### Discussion
[Continued from the previous section]