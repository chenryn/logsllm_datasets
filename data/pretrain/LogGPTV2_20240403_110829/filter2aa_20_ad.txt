最简单的 HTTP
在正式开始前，先来体验下最简单的 HTTP 吧。31-001.php 中有如下 PHP 代码。这段脚本的功能为显示当前时间。
代码清单 /31/31-001.php
访问 http://example.jp/31/
 的菜单（以下写作“/31/ 菜单”），点击“31-001: 当前时间”链接（图 3-1），就可以在虚拟机上执行这段脚本了。
图 3-1 /31/ 菜单
执行结果如图 3-2 所示。
图 3-2 显示时间脚本
与此同时，在后台，浏览器会向服务器发送 HTTP 请求（HTTP Request），而收到浏览器请求的服务器则会向浏览器发回 HTTP 响应（HTTP Response）（图 3-3）。
图 3-3 HTTP 的请求与响应
使用 Fiddler 观察 HTTP 消息
我们可以使用 Fiddler 来观察 HTTP 消息。启动 Fiddler 后，在 IE 浏览器上刷新刚才的页面。这次，浏览器和服务器之间的通信经过了 Fiddler，所以在 Fiddler 上能够看到 HTTP 的通信内容。
图 3-4 通过 Fiddler 显示 HTTP 通信
为了让 Fiddler 显示 HTTP 的通信情况，如图 3-4 所示，选择界面上方的“Inspectors”-“Raw”标签以及界面中间的“Raw”标签。然后，在界面左侧选择 31-001.php 请求。
图中右侧红框中的内容就是浏览器与 Web 服务器之间互相传递的消息。下面，让我们来具体看一下这些内容。
请求消息
Fiddler 界面右侧上半部分显示的内容，是浏览器向服务器发出的请求，被称为请求消息（Request Message）。
请求消息的第 1 行被称为请求行（Request Line），相当于浏览器下达给服务器的命令。请求行由请求方法、URL（URI）和协议版本组成，它们之间以空格相隔（图 3-5）。在 Fiddler 界面中，请求行上显示的是包含了 Scheme（协议）和主机名（FQDN，全称域名）的绝对路径的 URL，这是因为请求经过了代理（Fiddler）的缘故，而通常情况下只会显示相对路径的 URL。
图 3-5 请求行
HTTP 的请求方法除了 GET（取得资源）以外，还有 POST 和 HEAD 等。GET 和 POST 与 HTML 中 form 元素的 method 属性指定的值相同。关于 POST 方法后面还会讲述。
请求消息的第 2 行及以后的内容被称为请求头信息（Header），其格式为名称与值以冒号相隔。图 3-4 中显示了很多请求头信息，但其中只有 Host 是必需的 1
 。Host 表示接收信息的主机名（FQDN）和端口号（80 时可以省略）。
响应消息
图 3-4 右侧的下半部分显示的是从 Web 服务器返回的内容，被称为响应消息（Response Message）。如图 3-6 所示，响应消息包含状态行、响应头信息和响应正文（Body）。
状态行
HTTP/1.1 200 OK
响应头信息
Date: Mon, 10 Jan 2011 05:34:30 GMT
Server: Apache/2.2.14 (Ubuntu)
X-Powered-By: PHP/5.3.2-1ubuntu4.2
Vary: Accept-Encoding
Content-Length: 20
Keep-Alive: timeout=15, max=100
Connection: Keep-Alive
Content-Type: text/html; charset=UTF-8
空行
响应正文
14:34
图 3-6 响应消息的构造
状态行
状态行的内容是请求消息经过服务器处理以后的状态（图 3-7）。
图 3-7 状态行的构造
状态码的百位数有特殊含义，代表了响应的几种状态（表 3-1）。常见的状态码有：200（成功）、301 和 302（重定向）、404（找不到资源）、500（服务器内部发生错误）等。
表 3-1 状态码的说明
状态码
概要
1xx
处理正在继续
2xx
成功
3xx
重定向
4xx
客户端错误
5xx
服务器错误
响应头信息
响应消息的第 2 行及以后的内容为响应头信息（图 3-6），内容一直到出现空行（只含有换行符的行）为止。以下为典型的响应头信息。
Content-Length
显示响应正文的字节数。
Content-Type
指定为 MIME 类型。HTML 文档的情况下则为 text/html。下表列出了常见的 MIME 类型。
表 3-2 常见的 MIME 类型
MIME类型
含义
text/plain
文本
text/html
HTML文档
application/xml
XML文档
text/css
CSS
mage/gif
GIF图像
image/jpeg
JPEG图像
image/png
PNG图像
application/pdf
PDF文档
分号之后的 charset=UTF-8 表示 HTTP 响应的字符编码。字符编码必须被正确设置，具体原因及设置方法请参考第 6 章。
如果将 HTTP 比喻为对话
由于 HTTP 会持续不断进行请求与响应，所以将其比喻为人们的对话或许会更形象。以显示时间的脚本为例，将这个最简单的 HTTP 消息以对话的形式呈现的话，大概就像下面这样 2
 。
顾客：现在几点了？
店员：15 点 21 分。
接下来，我们看一个复杂些的 HTTP 消息的例子——“输入－确认－注册”模式的表单。
1
 如果 HTTP 协议版本为 1.0，Host 头信息也可以省略。
2
 将 HTTP 比喻成对话的灵感，源于书籍《Web 背后的技术》[1] 与《Web 技术入门》[2]。
输入 - 确认 - 注册模式
这里，通过观察“输入－确认－注册”模式中输入表单（Input Form）的 HTTP 消息，希望能够有助于读者更深入地理解 HTTP。
以下分别为输入页面（31-002.php）、确认页面（31-003.php）和注册页面（31-004.php）的代码。
代码清单 /31/31-002.php
 个人信息输入 
姓名 
邮箱地址 
性别  女
 男 
代码清单 /31/31-003.php
 确认 
姓名 :
邮箱地址 :
性别 :
">
">
">
代码清单 /31/31-004.php
 注册成功 
姓名 :
邮箱地址 :
性别 :
已注册
要在虚拟机上执行的话，可以点击 /31/ 菜单中的“31-002：输入－确认－注册”链接。然后就会显示如下页面（图 3-8）。
图 3-8 输入页面
在页面上填入姓名、邮箱和性别后点击“确认”按钮。这时，HTTP 请求消息就可以在 Fiddler 中看到（图 3-9）。
图 3-9 在输入页面填写完毕后点击“确认”时 Fiddler 中显示的 HTTP 请求消息