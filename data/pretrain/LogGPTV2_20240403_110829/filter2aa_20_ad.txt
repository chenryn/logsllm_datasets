### 简单的 HTTP 体验

在正式开始学习 HTTP 协议之前，我们先通过一个简单的示例来体验一下。请参见文件 `31-001.php` 中的 PHP 代码，这段脚本的功能是显示当前时间。

**代码清单: /31/31-001.php**

要执行该脚本，请访问 `http://example.jp/31/` 页面（以下简称“/31/ 菜单”），点击其中的“31-001: 当前时间”链接（如图 3-1 所示）。此时，虚拟机会运行此脚本并显示结果（如图 3-2 所示）。

**图 3-1: /31/ 菜单**
**图 3-2: 显示时间脚本**

在后台，浏览器会向服务器发送一个 HTTP 请求 (HTTP Request)，而服务器则会响应这个请求，返回一个 HTTP 响应 (HTTP Response) 给浏览器（如图 3-3 所示）。

**图 3-3: HTTP 的请求与响应**

### 使用 Fiddler 观察 HTTP 消息

Fiddler 是一款可以用来查看 HTTP 通信内容的工具。启动 Fiddler 后，在 Internet Explorer 浏览器中刷新刚才的页面。由于 Fiddler 作为代理介入了浏览器和服务器之间的通信过程，因此你可以在 Fiddler 上看到这些 HTTP 通信的具体细节。

**图 3-4: 通过 Fiddler 显示 HTTP 通信**

为了查看 HTTP 通信内容，请按以下步骤操作：首先选择 Fiddler 界面上方的“Inspectors”标签下的“Raw”选项卡；接着选择界面中间部分的“Raw”选项卡；最后，在界面左侧找到并选中针对 `31-001.php` 文件的请求记录。这时，右侧红色框内展示的就是浏览器与 Web 服务器之间交换的消息内容。

#### 请求消息

Fiddler 界面右侧上半部分展示了从浏览器发送到服务器的请求信息，这部分被称为请求消息 (Request Message)。

- **请求行 (Request Line)**：请求消息的第一行，由请求方法、URL 和协议版本组成，各元素间以空格分隔。例如，在 Fiddler 中，你可能会看到类似 `GET http://example.jp/31/31-001.php HTTP/1.1` 的格式，这是因为请求经过了 Fiddler 代理的缘故。通常情况下，这里只会显示相对路径。
- **请求头 (Header)**：从第二行开始的信息，描述了请求的一些属性，比如主机名 (`Host`) 是必须提供的字段之一。其他常见的头部包括 `User-Agent`、`Accept-Language` 等。

#### 响应消息

Fiddler 右侧下半部分展示的是从 Web 服务器返回给客户端的数据，称为响应消息 (Response Message)。

- **状态行 (Status Line)**：响应消息的第一行，指示了请求处理后的状态。它遵循 `HTTP-Version Status-Code Reason-Phrase` 格式。例如，`HTTP/1.1 200 OK` 表示请求成功完成。
- **响应头 (Response Header)**：紧接着状态行之后的部分，提供了关于响应的额外信息，如日期 (`Date`)、服务器类型 (`Server`)、内容长度 (`Content-Length`) 以及内容类型 (`Content-Type`) 等。
- **响应正文 (Body)**：位于响应头之后，包含了实际传输的数据或错误消息等。

**图 3-6: 响应消息结构**

### HTTP 状态码解释

状态码的第一位数字定义了响应类别：
- 1xx: 信息性状态码
- 2xx: 成功状态码
- 3xx: 重定向状态码
- 4xx: 客户端错误状态码
- 5xx: 服务器错误状态码

一些常见状态码包括 200 (OK)、301 (Moved Permanently)、404 (Not Found) 和 500 (Internal Server Error)。

### 输入-确认-注册模式

接下来，我们将探讨一种更复杂的 HTTP 交互场景——输入-确认-注册表单流程，并通过观察相关的 HTTP 消息加深理解。此过程涉及三个主要页面：输入表单页 (`31-002.php`)、确认页 (`31-003.php`) 和最终的注册成功页 (`31-004.php`)。

**代码清单: /31/31-002.php, /31/31-003.php, /31/31-004.php**

用户在输入页面填写完所需信息后提交表单，这一过程中产生的 HTTP 请求可以通过 Fiddler 查看（如图 3-9 所示）。

**图 3-8: 输入页面**
**图 3-9: 提交表单时的 HTTP 请求**

以上即为基本的 HTTP 工作原理及其实现方式简介。希望这能帮助您更好地理解和使用这项技术。