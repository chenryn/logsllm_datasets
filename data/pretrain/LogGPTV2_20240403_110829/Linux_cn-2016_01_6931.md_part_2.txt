```
如果你的输出也类似如上，那说明它可以工作了。你已经成功地安装了你的第一个 NodeOS 应用： `ifconfig`。
### 它是可以工作了，然而我们可以用这个操作系统做什么呢？
如果我们只能拿这个用 Node.js 写的操作系统做到你在 Ubuntu 或其它 Linux 发行版上一样的（或更少的）事情，那它有什么价值？其实，整个事情中最有趣的地方是所有的东西都是 Node.js 开发的。这意味着我们可以只需要使用 Node.js 就可以[开发](http://www.toptal.com/nodejs/why-the-hell-would-i-use-node-js)我们的应用了。比如，NodeOS 里没有默认实现的 man 命令，它用于显示其它命令的帮助信息。不用担心，实现它很简单。 
![](/data/attachment/album/201601/25/174102s3pd0f26i00z15pf.jpg)
*使用 Node.js 构建一个 NodeOS 应用*
首先让我们来安装一个叫做 Hipster 的文本编辑器，以便我们可以创建和编辑文件。执行如下命令： `npm install -g hipster@0.15.0`。这个文本编辑器很简单，除了用作文本编辑之外啥也干不了，不过对于我们来说足够了。
用 Hipster 创建文件很简单，运行 `hip filename`即可，如： `hip package.json`。要保存文件请按下 `Ctrl + s` ，退出按下 `Ctrl + q`。
在这里，我们使用了一个 NodeOS 的主开发人员所开发的代码，我自己并没有真的去开发这个应用。我们例子中的原始代码可以在 [node-bin-man Git 仓库](https://github.com/groundwater/node-bin-man)中找到。
让我们回过头来创建我们的第一个 NodeOS 应用。像每个 Node.js 应用（或 NPM 包）一样，我们从创建一个 `package.json` 文件开始，内容如下：
```
{
  "name": "bin-man",
  "version": "0.0.1",
  "description": "Format and display manual pages",
  "bin": {
    "man": "man.js"
  },
  "repository": "https://github.com/groundwater/node-bin-man",
  "author": "groundwater",
  "license": "MIT",
  "dependencies": {
    "blessed": "~0.0.22"
  }
}
```
这些参数 `name`、`version`、 `author`、 `repository`、 `license`和 `description` 是其意自明的。这个 `bin` 集合是一个 JSON 的键值对对象，包含了命令名及其关联的 JavaScript 文件。在我们的例子中， `man` 命令关联到 `man.js`文件。而 `dependencies`集合包含了这个应用所需要的 NPM 包的列表。在我们的例子中，代码的作者包含了 Blessed 包，这是一个类 curses 的库，可以让 Node.js 支持高级终端界面的 API。
现在我们进入了主要的部分，实际的代码。
```
#!/usr/bin/env node
```
这个部分叫做   释伴    （    shebang    ） 。NodeOS 实际上并不需要它，但是它用于告诉操作系统如何执行下面的代码。在这里的意思是，它告诉系统下面的每行代码都需要通过 `/usr/bin/env node`命令来解释执行。
```
var fs = require('fs');
var blessed = require('blessed');
```
像在 Node.js 中一样， `require()` 函数加载选定的包到内存中，并将其保存为特定的变量。
```
var arg = process.argv[2] || 'bin-man';
```
 `man` 命令的标准行为是如果没有指定要查看的命令时，就显示它自己的帮助信息。在我们的代码示例中也一样：如果没有给出第二个参数（第一个参数是 man 本身），那么该参数的默认值是 bin-man。
```
var path = process.env.HOME + "/lib/node_modules/" + arg + "/README.md";
try{
  var readme = fs.readFileSync(path, 'utf-8');
}catch(e){
  console.log('No README.md for Package ',arg);
  process.exit(-1);
}
```
在这里，程序检查给定的应用是否有一个 readme 文件。在 NodeOS 中，每个应用的安装路径是其主目录（/）下的 `lib/node_modules`。如果 `README.md` 文件存在，就将其内容保存到 `readme`变量中。否则，显示一个错误信息并退出。
```
// Create a screen object.
var screen = blessed.screen();
var box = blessed.box({
  content: readme,
  alwaysScroll:true,
  scrollable: true,
});
// Append our box to the screen.
screen.append(box);
```
Blessed 有一个非常简单的 API，要显示一个文件的内容很容易，只需要创建一个 `box` ，然后载入内容即可。
```
screen.key(['escape', 'q', 'C-c'], function(ch, key) {
  return process.exit(0);
});
```
现在，让我们找个退出 `man` 应用的方法。我们组合了 `escape`、 `q` 或 emacs 风格的 `C-c` 来退出应用。
```
screen.key(['space','f','j','n'], function(ch, key) {
  box.scroll(box.height);
  screen.render();
});
screen.key(['down'], function(ch, key) {
  box.scroll(1);
  screen.render();
});
screen.key(['up'], function(ch, key) {
  box.scroll(-1);
  screen.render();
});
screen.key(['b','k','p'], function(ch, key) {
  box.scroll(-box.height);
  screen.render();
});
```
我们使用方向键来上滚和下滚，用 `space`、 `f`、 `j` 或 `n` 向下翻页，`b`、 `k` 或 `p` 向上翻页。
```
box.focus();
screen.render();
```
最后，我们让应用将输入焦点放到 `box` ，我们在这里创建和渲染所有内容。
把上面编辑的这个文件存放到 `/lib/node_modules/bin-man` 目录下（名字是 `man.js`），并加一个简单的 `README.md` ，类似如下：
```
# Man
Author: @groundwater
## Install
npkg install bin-man
## Usage
```
Usage: man PKGNAME
Display a packages README.md file
```
```
我们已经基本完成了我们的第一个 NodeOS 定制应用。最后剩下一小步了，我们需要创建一个 NodeOS 应用需要的配置文件。很简单，把它创建到 `/etc/bin-man/config.json` ，内容只是一个空的 JSON 对象： `{}`。
现在我们可以试试我们的新应用了。在 NodeOS 中运行 `man` ，它将展示我们之前创建的 readme 文件。
### 总结
如你所见，在 NodeOS 中实现任何东西都很简单，你只需要懂得 Node.js 即可。
NodeOS 很有潜力，我认为当实现了更多的功能之后它会成为一个伟大的操作系统。目前仍然需要很多工作，但是在整个Node.js 生态系统兴盛发展的形势下，万一哪天它很快地成为一个流行的操作系统也没什么好惊奇的。
你怎么看？发表你的评论让我们知道。