card data include: 1) Media Files, which are digital camera image
(DCIM) files and audio files that are created by apps such as camera,
video records, or music players; and 2) Downloaded Files, which
are the files downloaded via Internet and stored at the download
folder /sdcard/Downloads/. Typical formats of the downloaded files
include Microsoft office documents (.docx, .xlsx, etc.) and portable
documents (.pdf)3.
Data stored on the SD card are accessible by an app if it is au-
thorized with READ_EXTERNAL_STORAGE and WRITE_EXTERNAL_STORAGE
permissions, respectively. As these two permissions are classified
into the STORAGE permission group with a dangerous protection level,
the apps must prompt the users to grant the permissions at run-
time instead of directly requesting them at installation time. Such
dynamic prompt for those two permissions has been introduced in
Android starting from version 6.0.
2.1.2 Communication Records. Communication records represent
the information created during communication, mainly SMS mes-
sages, contacts, and call logs. The Android system stores these
records in SQLite databases and any app with the relevant per-
missions (e.g., SMS permission) granted is able to access them. No-
tice that SMS messages are stored in different “stores” in different
Android versions. They are stored in the system database4 from An-
droid 4.4 to Android 6.0. Since Android version 7.0, SMS messages
are stored in an encrypted database protected by a hardware-bound
key.
To access communication records, starting from Android version
6.0 an app needs runtime permissions classified as dangerous.
• SMS Messages: apps need the READ_SMS permission to read,
and only the default SMS app indicated by the user is allowed
to obtain the WRITE_SMS permission to insert or modify SMS
messages.
• Contacts: apps need runtime permissions READ_CONTACTS
and WRITE_CONTACTS in the CONTACTS permission group to re-
trieve contact records.
• Call Logs: apps require runtime permissions READ_CALL_LOG
and WRITE_CALL_LOG to read and write call logs, respectively.
System Settings. The function SettingsProvider is used by
2.1.3
the Android system to manage various system settings such as
HTTP_PROXY and BLUETOOTH_DISCOVERABILITY. System settings are
classified into three categories: System, Global, and Secure. The
Global (e.g., Bluetooth on and off) and Secure categories (e.g., Lo-
cation) contain app-read-only system preferences. To modify them,
the user must explicitly operate the system UI. For settings in the
System category, apps could request the WRITE_SETTINGS permission
(a dangerous protection level runtime permission) to read and write
them. In addition, some sensitive data, such as Wi-Fi passwords
and passcodes, are stored in private directories to which the special
2The partition of the SD card can be either a physical SD card or an emulated one
using part of the internal storage.
3A new data storage, scoped storage, has been introduced in Android version 10 or
higher. It makes easier to maintain the external storage and allows an app to access
the app-specific storage on the external storage.
4com.android.providers.telephony/databases/mmsms.db
SEAndroid types are assigned. For instance, the SSID and the pass-
word for Wi-Fi network connection in wifiConfigStore.xml are
wifi_data_file type objects, and thus a normal platform app can-
not access them. To directly operate on system settings, data clone
services often utilize a supporting process with the root privilege
to circumvent the restriction of Android systems.
2.1.4 App-related Data. While executing an app, app-related data
are generated and only accessible by the host app. There are two
main types of data: APK Files and App Data. APK files are the
installation packages of apps stored in the /data/app/ directory.
They are readable by any apps without requesting any permissions.
App data include app database, app settings, and all other user data,
which are isolated from the other apps via the app sandbox. App
data are only accessible by the host app stored in the private app
folder, i.e., /data/data/.
Note that users can access the private folder through the ADB
tool [3] when its attribute android:allowBackup is set as True. How-
ever most apps nowadays disable this attribute.
3 SECURITY ANALYSIS
To protect user data against leakages, Android security policies [1]
are designed to restrict data export/import. Hence, manufacturers
need to modify the Android system by embedding customized
components to bypass policy restrictions on data export/import.
However, such modifications may introduce security threats.
In what follows, we discuss the attack models against customized
Wi-Fi hotspot-based data clone services, and then introduce our
security analysis system and our approaches to detect flaws in these
services.
3.1 Attack Model
In our attack model, the main target of the adversary is the trans-
ferred cloned data. A customized data clone service mainly intro-
duces two attack surfaces: 1) new sensitive data export/import
interfaces in the Android system; 2) a potentially unprotected wire-
less data transmission.
We assume that an attacker holds the same brand of Android
mobile phone and thus he can reverse engineer the data clone app to
retrieve the required information. Then we consider the following
types of attack:
A1: On-device Data Extraction. In this attack, given two mobile
phones, we assume that the attacker has managed to install a mali-
cious app on one of the two mobile phones before the data clone
procedure. Although the malicious app is isolated by Android secu-
rity policies, it can access the sensitive data without breaking the
security model of the Android system due to the insecure implemen-
tation of the data clone service. When the user starts to execute the
data clone service, the malicious app can detect such an execution
and exploit the data clone service to obtain the transferred sensitive
user data.
A2: Network-level Eavesdropping and Tampering. In this at-
tack, we assume that the attacker does not install any malicious app
on any of the mobile phones. Thus, instead of monitoring execu-
tions of the mobile phones, the attacker continuously monitors the
network to identify and exploit the insecure Wi-Fi network estab-
lished for the data clone service. Then during the execution of the
322ACSAC 2020, December 7–11, 2020, Austin, USA
Siqi Ma, Hehao Li, Wenbo Yang, Juanru Li1, Surya Nepal, and Elisa Bertino
Figure 2: A high-level overview of our analysis workflow
data clone operation, the attacker could launch man-in-the-middle
attacks to eavesdrop and tamper the transferred data.
3.2 Approach Overview
Most implementations of the customized Wi-Fi hotspot-based data
clone services are neither documented nor open-source. To fully
understand a data clone service and assess whether the modified
Android system violates the Android security policies, we execute
the workflow shown in Figure 2 to analyze the entire procedure of
a data clone service from various aspects. We first build Poirot, an
analysis system with three components: a static code analysis, a
dynamic instrumentation, and a network inspection. Relying
on Poirot, we check whether the data clone service is implemented
properly by analyzing: 1) data export/import; 2) data transmis-
sion; and 3) Wi-Fi configuration. Details about Poirot and the
analysis approach are introduced below.
3.3 Poirot Analysis System
The design of a system for properly analyzing the security data
cloning services requires addressing the following challenges:
1) How to understand the complicated functionalities pro-
vided by a data clone service? The Wi-Fi hotspot-based data
clone service aims at transferring various types of user data. Thus,
a number of privileges are required and a wide variety of system
functions and components are invoked to grant these privileges.
Hence, locating all the involved system functions and components
in ARM binary code and Dalvik bytecode is a challenge.
2) How to conduct an effective dynamic analysis on new mod-
els of Android phones? A typical dynamic analysis needs a high
privilege to debug the involved executables, to hook critical system
APIs and to extract sensitive data such as app data and network
traffic. However, most of the new models of Android phones do not
allow users to obtain the root privilege, and thus hinder dynamic
analysis.
3) How to analyze the data transmission protocol? Proprietary
protocols are adopted for data transmission and thus transferred
data are packed in customized formats. It is difficult to design a
technique to determine whether these protocols are secure.
In response to these challenges, we design and implement Poirot
which consists of three components: 1) a static code analysis to
identify and analyze the executables that are relevant to the data
clone service; 2) a dynamic instrumentation to conduct a runtime
information analysis during the execution of the data clone proce-
dure; 3) a network inspection to monitor the transferred data and
support active network traffic inspection.
Static Code Analysis. As data clone services are implemented
3.3.1
by data clone apps, Poirot analyzes the data clone apps to under-
stand how each data clone service is implemented. It searches and
locates bytecode and binary executables that are correlated to the
data clone service (solution of challenge 1). To differentiate the data
clone apps developed by mobile phone manufacturers and third
parties, we refer to the data clone apps that are pre-installed as
platform apps.
Bytecode Analysis. The bytecode analysis aims at parsing the
platform app and checking the relevant functions in the Android
system framework; thus Poirot first extracts the APK file of the
platform app. According to the app name (i.e., the name displayed
on the mobile phone), Poirot obtains all APK files from the mobile
phone and executes aapt to parse the APK files to identify the one
that contains the app name. The APK file is regarded as the APK
of the data clone app. Then it collects DEX files in the APK file,
i.e., ODEX files in the platform app directory, manufacturer-specific
VDEX files (e.g., boot-framework.vdex and wifi-service.vdex), and
framework resource files (e.g. framework.apk). Next Poirot com-
bines all those files and disassembles them using APKTool. With
the generated bytecode, it then leverages JEB [7] to decompile it to
high-level source code. Data and control dependencies can be re-
trieved for further analysis (see Section 3.4). Note that Poirot uses
an existing callback control flow analysis approach [35] to deal with
multi-thread programming and inter-component communication.
Native Code Analysis. Many customized components of platform
apps are implemented as native code executables, and thus Poirot
conducts native code reverse engineering. It first analyzes the plat-
form app and searches for specific APIs (e.g., exec) and inter-process
communications (e.g., local socket); then it collects the involved
executables under the system folder (i.e., /system/bin/). Finally,
Poirot reverses the binary code by using IDA and IDAPython. We
then manually analyze these system services to understand how
a data clone app accesses and backs up/restores system data (e.g.,
data in system folders) through a native executable.
Data Clone ProcessSenderReceiverData Clone ProcessSenderReceiverPOIROT SystemData Export/Import AnalysisData Transmission AnalysisWi-Fi Configuration AnalysisData Export/Import AnalysisData Transmission AnalysisWi-Fi Configuration AnalysisNetwork InspectionTraffic AnalysisPacket ModificationDynamic InstrumentationFunction/API HookInformation MonitorDynamic InstrumentationFunction/API HookInformation MonitorStatic Code AnalysisBytecode AnalysisNative Code AnalysisStatic Code AnalysisBytecode AnalysisNative Code Analysis323Certified Copy? Understanding Security Risks of Wi-Fi Hotspot based Android Data Clone Services
ACSAC 2020, December 7–11, 2020, Austin, USA
3.3.2 Dynamic Instrumentation. With the help of the Frida dynamic
code instrumentation framework, Poirot provides an instrumented
system to execute the data clone operation. By rooting an Android
mobile phone (e.g., unlocking the bootloader and flashing a cus-
tomized kernel image), Poirot instruments sensitive APIs in the
identified executables (e.g., data clone apps, system libraries). While