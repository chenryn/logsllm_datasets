# []{#assembly_blocking-and-allowing-applications-using-fapolicyd_security-hardening.html#proc_adding-custom-allow-and-deny-rules-for-fapolicyd_assembly_blocking-and-allowing-applications-using-fapolicyd}为 fapolicyd 添加自定义 allow 和 deny 规则 {.title}
:::
`fapolicyd`{.literal}
包中的默认规则集不影响系统功能。对于自定义场景，比如在非标准目录中存储二进制文件和脚本，或者在没有
`dnf`{.literal} 或 `rpm`{.literal}
安装程序的情况下添加应用程序，您必须将额外文件标记为可信，或者添加新的自定义规则。
对于基本情况，首选使用
[额外的信任来源将文件标记为受信任的](#assembly_blocking-and-allowing-applications-using-fapolicyd_security-hardening.html#marking-files-as-trusted-using-an-additional-source-of-trust_assembly_blocking-and-allowing-applications-using-fapolicyd "使用其它信任源将文件标记为可信"){.link}
文件。在更高级的场景中，如仅允许为特定用户和组群标识符执行自定义二进制文件，在
`/etc/fapolicyd/rules.d/`{.literal} 目录中添加新的自定义规则。
以下步骤演示了如何添加新的规则以允许自定义二进制文件。
::: itemizedlist
**先决条件**
-   `fapolicyd`{.literal} 框架部署在您的系统上。
:::
::: orderedlist
**步骤**
1.  将自定义二进制文件复制到所需的目录中，例如：
    ``` screen
    $ cp /bin/ls /tmp
    $ /tmp/ls
    bash: /tmp/ls: Operation not permitted
    ```
2.  停止 `fapolicyd`{.literal} 服务：
    ``` screen
    # systemctl stop fapolicyd
    ```
3.  使用 debug 模式来识别相应的规则。因为 `fapolicyd --debug`{.literal}
    命令的输出非常详细，且您只能通过按
    [**Ctrl**]{.keycap}+[**C**]{.keycap}
    或终止相应的进程来停止它，因此请将错误输出重定向到文件中：
    ``` screen
    # fapolicyd --debug 2> fapolicy.output &
    [1] 51341
    ```
    或者，您可以在另一个终端中运行 `fapolicyd`{.literal} debug 模式。
4.  重复 `fapolicyd`{.literal} denied 的消息：
    ``` screen
    $ /tmp/ls
    bash: /tmp/ls: Operation not permitted
    ```
5.  通过在前台恢复并按 [**Ctrl**]{.keycap}+[**C**]{.keycap} 来停止 debug
    模式：
    ``` screen
    # fg
    fapolicyd --debug 2> fapolicy.output
    ^C
    ...
    ```
    或者，杀掉 `fapolicyd`{.literal} debug 模式的进程：
    ``` screen
    # kill 51341
    ```
6.  查找拒绝执行应用程序的规则：
    ``` screen
    # cat fapolicy.output | grep 'deny_audit'
    ...
    rule=13 dec=deny_audit perm=execute auid=0 pid=6855 exe=/usr/bin/bash : path=/tmp/ls ftype=application/x-executable trust=0
    ```
7.  找到包含阻止执行自定义二进制文件的规则的文件。在这种情况下，`deny_audit perm=execute`{.literal}
    规则属于 `90-deny-execute.rules`{.literal} 文件：
    ``` screen
    # ls /etc/fapolicyd/rules.d/
    10-languages.rules  40-bad-elf.rules	   72-shell.rules
    20-dracut.rules     41-shared-obj.rules    90-deny-execute.rules
    21-updaters.rules   42-trusted-elf.rules   95-allow-open.rules
    30-patterns.rules   70-trusted-lang.rules
    # cat /etc/fapolicyd/rules.d/90-deny-execute.rules
    # Deny execution for anything untrusted
    deny_audit perm=execute all : all
    ```
8.  在文件中添加一个新的 `allow`{.literal}
    规则，它完全位于规则文件中，该文件包含了在
    `/etc/fapolicyd/rules.d/`{.literal}
    目录中拒绝执行自定义二进制文件的规则： []{.emphasis}
    ``` screen
    # touch /etc/fapolicyd/rules.d/80-myapps.rules
    # vi /etc/fapolicyd/rules.d/80-myapps.rules
    ```
    将以下内容插入到 `80-myapps.rules`{.literal} 文件中：
    ``` screen
    allow perm=execute exe=/usr/bin/bash trust=1 : path=/tmp/ls ftype=application/x-executable trust=0
    ```
    另外，您可以通过将以下规则添加到 `/etc/fapolicyd/rules.d/`{.literal}
    中的规则文件中，允许执行 `/tmp`{.literal} 目录中所有二进制文件：
    ``` screen
    allow perm=execute exe=/usr/bin/bash trust=1 : dir=/tmp/ all trust=0
    ```
9.  要防止自定义二进制文件内容的更改，请使用 SHA-256
    校验和定义所需的规则：
    ``` screen
    $ sha256sum /tmp/ls
    780b75c90b2d41ea41679fcb358c892b1251b68d1927c80fbc0d9d148b25e836  ls
    ```
    将规则改为以下定义：
    ``` screen
    allow perm=execute exe=/usr/bin/bash trust=1 : sha256hash=780b75c90b2d41ea41679fcb358c892b1251b68d1927c80fbc0d9d148b25e836
    ```
10. 检查编译的列表与 `/etc/fapolicyd/rules.d/`{.literal}
    中设置的规则列表不同，并更新列表，该列表存储在
    `/etc/fapolicyd/compiled.rules`{.literal} 文件中：
    ``` screen
    # fagenrules --check
    /usr/sbin/fagenrules: Rules have changed and should be updated
    # fagenrules --load
    ```
11. 在阻止执行的规则前，检查您的自定义规则是否在 `fapolicyd`{.literal}
    规则列表中：
    ``` screen
    # fapolicyd-cli --list
    ...
    13. allow perm=execute exe=/usr/bin/bash trust=1 : path=/tmp/ls ftype=application/x-executable trust=0
    14. deny_audit perm=execute all : all
    ...
    ```
12. 启动 `fapolicyd`{.literal} 服务：
    ``` screen
    # systemctl start fapolicyd
    ```
:::
::: orderedlist
**验证**
1.  检查您的自定义二进制文件现在是否可以执行，例如：
    ``` screen
    $ /tmp/ls
    ls
    ```
:::
::: itemizedlist
**其他资源**
-   `fapolicyd.rules(5)`{.literal} 和 `fapolicyd-cli(1)`{.literal} man
    page。
-   在 `/usr/share/ fapolicyd`{.literal}
    /sample-rules/README-rules``{=html} 文件中安装有 fapolicyd
    软件包的文档。
:::
:::
::: section
::: titlepage
# []{#assembly_blocking-and-allowing-applications-using-fapolicyd_security-hardening.html#proc_enabling-fapolicyd-integrity-checks_assembly_blocking-and-allowing-applications-using-fapolicyd}启用 fapolicyd 完整性检查 {.title}
:::
默认情况下，`fapolicyd`{.literal} 不执行完整性检查。您可以配置
`fapolicyd`{.literal}，来通过比较文件大小或 SHA-256
哈希执行完整性检查。您还可以使用完整性度量架构(IMA)子系统来设置完整性检查。
::: itemizedlist
**先决条件**
-   `fapolicyd`{.literal} 框架部署在您的系统上。
:::
::: orderedlist
**步骤**
1.  在您选择的文本编辑器中打开 `/etc/fapolicyd/fapolicyd.conf`{.literal}
    文件，例如：
    ``` screen
    # vi /etc/fapolicyd/fapolicyd.conf
    ```
2.  将 `integrity`{.literal} 选项的值从 `none`{.literal} 改为
    `sha256`{.literal}，保存文件并退出编辑器：
    ``` screen
    integrity = sha256
    ```
3.  重启 `fapolicyd`{.literal} 服务：
    ``` screen
    # systemctl restart fapolicyd
    ```
:::
::: orderedlist
**验证**
1.  备份用于验证的文件：
    ``` screen
    # cp /bin/more /bin/more.bak
    ```
2.  更改 `/bin/more`{.literal} 二进制文件的内容：
    ``` screen
    # cat /bin/less > /bin/more
    ```
3.  以普通用户身份使用更改的二进制文件：
    ``` screen
    # su example.user
    $ /bin/more /etc/redhat-release
    bash: /bin/more: Operation not permitted
    ```
4.  恢复更改：
    ``` screen
    # mv -f /bin/more.bak /bin/more
    ```
:::
:::
::: section
::: titlepage
# []{#assembly_blocking-and-allowing-applications-using-fapolicyd_security-hardening.html#ref_troubleshooting-problems-related-to-fapolicyd_assembly_blocking-and-allowing-applications-using-fapolicyd}故障排除与 fapolicyd 相关的问题 {.title}
:::
下面的部分提供了 `fapolicyd`{.literal}
应用程序框架的基本故障排除技巧，以及使用 `rpm`{.literal}
命令添加应用程序的指导。
::: itemizedlist
**使用 `rpm`{.literal} 安装应用程序**
-   如果使用 `rpm`{.literal} 命令安装应用程序，则必须手动刷新
    `fapolicyd`{.literal} RPM 数据库：
    ::: orderedlist
    1.  安装 [*应用程序*]{.emphasis} ：
        ``` screen
        # rpm -i application.rpm
        ```
    2.  刷新数据库：
        ``` screen
        # fapolicyd-cli --update
        ```
        如果您跳过这一步，系统可能会被冻结，必须重启。
    :::
:::
::: itemizedlist
**服务状态**
-   如果 `fapolicyd`{.literal} 无法正常工作，请检查服务状态：
    ``` screen
    # systemctl status fapolicyd
    ```
:::
::: itemizedlist
**`fapolicyd-cli`{.literal} 检查和列表**
-   `--check-config`{.literal}、`--check-watch_fs`{.literal} 和
    `--check-trustdb`{.literal}
    选项可帮助您找到语法错误、not-yet-watched
    文件系统和文件不匹配，例如：
    ``` screen
    # fapolicyd-cli --check-config
    Daemon config is OK
    # fapolicyd-cli --check-trustdb
    /etc/selinux/targeted/contexts/files/file_contexts miscompares: size sha256
    /etc/selinux/targeted/policy/policy.31 miscompares: size sha256
    ```
-   使用 `--list`{.literal} 选项检查规则及其顺序的当前规则列表：
    ``` screen
    # fapolicyd-cli --list
    ...
    9. allow perm=execute all : trust=1
    10. allow perm=open all : ftype=%languages trust=1
    11. deny_audit perm=any all : ftype=%languages
    12. allow perm=any all : ftype=text/x-shellscript
    13. deny_audit perm=execute all : all
    ...
    ```
:::
::: itemizedlist
**Debug 模式**
-   Debug 模式提供关于匹配规则、数据库状态等的详细信息。将
    `fapolicyd`{.literal} 切换到 debug 模式：
    ::: orderedlist
    1.  停止 `fapolicyd`{.literal} 服务：
        ``` screen
        # systemctl stop fapolicyd
        ```
    2.  使用 debug 模式来识别相应的规则：
        ``` screen