2)再次修改server.xml配置文件，创建支持加密连接的Connector
\[root@web1 \~\]# vim /usr/local/tomcat/conf/server.xml
... ...
\
//备注，默认这段Connector被注释掉了，打开注释，添加密钥信息即可,搜索port=\"8443\"
参数之间无先后顺序,必须有至少一个空格或者回车隔开
需手写秘钥目录:keytoreFile="/usr/local/tomcat/keystore"
需手写秘钥打开的密码:keystorePass=\"123456\" #密码为"123456"
3）重启Tomcat服务器
\[root@web1 \~\]# /usr/local/tomcat/bin/shutdown.sh
\[root@web1 \~\]# /usr/local/tomcat/bin/startup.sh
4）客户端设置host文件，并浏览测试页面进行测试(proxy充当客户端角色)
\[root@proxy \~\]# vim /etc/hosts
... ...
192.168.2.100 www.a.com www.b.com
\[root@proxy \~\]# firefox https://www.a.com:8443/
\[root@proxy \~\]# firefox https://www.b.com:8443/
\[root@proxy \~\]# firefox https://192.168.2.100:8443/
### 步骤五：配置Tomcat日志
1)为每个虚拟主机设置不同的日志文件
\[root@web1 \~\]# vim /usr/local/tomcat/conf/server.xml
.. ..
\
\
#从默认localhost虚拟主机中把Valve这段复制过来，适当修改下即可
\
\/LO
\
\
\
\
#从虚拟机localhost的host里面拷贝Valve模板放到虚拟机"www.a.com"与"www.b.com"中
#directory=\"logs\" #定义产生的日志存放目录
#prefix=\" b_access\" #定义产生的日志文件名
suffix=\".txt\" #定义产生的日志后缀名
#pattern=\"%h %l %u %t &quot;%r&quot; %s %b\" /\>
### 步骤六：扩展实验(配置Tomcat集群)
1\) 在192.168.4.5主机上配置Nginx调度器（具体安装步骤参考前面的章节）
\[root@proxy \~\]# vim /usr/local/nginx/conf/nginx.conf
http{
upstream toms {
server 192.168.2.100:8080;
server 192.168.2.200:8080;
}
server {
listen 80;
server_name localhost;
location / {
proxy_pass http://toms;
}
}
}
2\) 在192.168.2.100和192.168.2.200主机上配置Tomcat调度器
以下以Web1为例：
\[root@web1 \~\]# yum -y install java-1.8.0-openjdk //安装JDK
\[root@web1 \~\]# yum -y install java-1.8.0-openjdk-headless //安装JDK
\[root@web1 \~\]# tar -xzf apache-tomcat-8.0.30.tar.gz
\[root@web1 \~\]# mv apache-tomcat-8.0.30 /usr/local/tomcat
3）启动服务
\[root@web1 \~\]# /usr/local/tomcat/bin/startup.sh
4\) 客户端验证
为了防止有数据缓存，可以使用真实主机的google-chrome访问代理服务器，输入Ctrl+F5刷新页面。
Tomcat 结构
容器 catalina
![](media/image24.png){width="6.0in" height="3.248611111111111in"}
![](media/image25.png){width="6.0in" height="2.2131944444444445in"}
Container 容器
![](media/image26.png){width="6.0in" height="2.5236111111111112in"}
![](media/image27.png){width="6.0in" height="1.8402777777777777in"}
# 3 案例3：使用Varnish加速Web-CDN(内容分发网络)
3.1 问题
通过配置Varnish缓存服务器，实现如下目标：
1.  使用Varnish加速后端Web服务
2.  代理服务器可以将远程的Web服务器页面缓存在本地
3.  远程Web服务器对客户端用户是透明的
4.  利用缓存机制提高网站的响应速度
5.  使用varnishadm命令管理缓存页面
6.  使用varnishstat命令查看Varnish状态
3.2 方案
通过源码编译安装Varnish缓存服务器
编译安装Varnish软件
修改配置文件，缓存代理源Web服务器，实现Web加速功能
使用3台RHEL7虚拟机，其中一台作为Web服务器（192.168.2.100）、一台作为Varnish代理服务器（192.168.4.5,192.168.2.5)，另外一台作为测试用的Linux客户机（192.168.4.10），如图-2所示。
### 步骤一：构建Web服务器
测试web111和web222的web服务器是否都能访问, httpd或者nginx 搭建的都行
### 步骤二：部署Varnish缓存服务器(192.168.4.5)
1.  编译安装软件(python-docutils默认光盘中没有，需要在lnmp_soft中找)
\[root@proxy \~\]# yum -y install gcc readline-devel //安装软件依赖包
\[root@proxy \~\]# yum -y install ncurses-devel //安装软件依赖包
\[root@proxy \~\]# yum -y install pcre-devel //安装软件依赖包
\[root@proxy \~\]# yum -y install \\
python-docutils-0.11-0.2.20130715svn7687.el7.noarch.rpm //安装软件依赖包
\[root@proxy \~\]# useradd -s /sbin/nologin varnish //创建账户
\[root@proxy \~\]# tar -xf varnish-5.2.1.tar.gz
\[root@proxy \~\]# cd varnish-5.2.1
\[root@proxy varnish-5.2.1\]# ./configure
\[root@proxy varnish-5.2.1\]# make && make install
2）复制启动脚本及配置文件
\[root@proxy varnish-5.2.1\]# cp etc/example.vcl
/usr/local/etc/default.vcl
#在varnish-5.2.1目录里面拷贝 etc/example.vcl
3）修改代理配置文件
\[root@proxy \~\]# vim /usr/local/etc/default.vcl
backend default {
.host = \"192.168.2.100\";
.port = \"80\";
}
4.  启动服务
\[root@proxy varnish-5.2.1\]# varnishd -f /usr/local/etc/default.vcl
Error: Could not get socket :80: Address already in use
(-? gives usage) #80端口被占用,启动不了
\[root@proxy varnish-5.2.1\]# ss -nlutp \| grep :80 #查看80端口
tcp LISTEN 0 128 \*:80 \*:\*
users:((\"nginx\",pid=2585,fd=6),(\"nginx\",pid=2562,fd=6))
\[root@proxy varnish-5.2.1\]# nginx -s stop #停止占用80端口的nginx
\[root@proxy varnish-5.2.1\]# varnishd -f /usr/local/etc/default.vcl
#重启,成功
Debug: Platform:
Linux,3.10.0-693.el7.x86_64,x86_64,-junix,-smalloc,-smalloc,-hcritbit
Debug: Child (13552) Started
\[root@proxy \~\]# varnishd -f /usr/local/etc/default.vcl
//varnishd命令的其他选项说明如下：
//varnishd --s malloc,128M 定义varnish使用内存作为缓存，空间为128M
//varnishd --s file,/var/lib/varnish_storage.bin,1G
定义varnish使用文件作为缓存
### 步骤三：客户端测试
1）客户端开启浏览器访问
\[root@client \~\]# curl http://192.168.4.5
### 步骤四：其他操作
1）查看varnish日志
\[root@proxy \~\]# varnishlog //varnish日志
\[root@proxy \~\]# varnishncsa //访问日志
2）更新缓存数据，在后台web服务器更新页面内容后，用户访问代理服务器看到的还是之前的数据，说明缓存中的数据过期了需要更新（默认也会自动更新，但非实时更新）。
\[root@proxy \~\]# varnishadm
varnish\> ban req.url \~ .\*
//清空缓存数据，支持正则表达式
# NSD Operation DAY06
什么是Subversion 简称SVN:自由/开源的版本控制系统,
1.  使得文件和目录可以超越时空
2.  Subversion允许你数据恢复到早期版本
3.  或者是检查数据修改的历史
4.  允许你和别人协作文档并跟踪所做的修改
5.  许多人将版本控制系统当做一种神奇的"时间机器"
Subversion repository:svn仓库
案例1：Subversion基本操作
案例2：使用Subversion协同工作
案例3：制作nginx的RPM包
# 1 案例1：Subversion基本操作
1.1 问题
本案例要求先快速搭建好一台Subversion服务器，并测试该版本控制软件：
创建版本库
导入初始化数据
检出数据至用户本地副本
对本地副本进行增删改查等操作
1.2 方案
使用YUM安装subversion软件，使用svn客户端工具连接svnserver服务器并测试版本控制软件。
## 步骤一：安装Subversion服务器
Subversion(简称SVN)是近年来崛起的版本管理软件系统，是CVS的接班人。目前，绝大多数开源软件都使用SVN作为代码版本管理软件。
Subversion是一个版本控制系统，相对于的RCS、CVS，采用了分支管理系统，它的设计目标就是取代CVS。互联网上免费的版本控制服务多基于Subversion。
它是一个通用系统，可以管理任何类型的文件集。
### YUM安装subversion软件
\[root@web1 \~\]# yum -y install subversion
\[root@web1 \~\]# rpm -q subversion
### 2)创建版本库
\[root@web1 \~\]# mkdir /var/svn/
\[root@web1 \~\]# svnadmin create /var/svn/project
\[root@web1 \~\]# ls /var/svn/project/
conf/ db/ format hooks/ locks/ README.txt
### 3）本地导入初始化数据
\[root@web1 \~\]# cd /usr/lib/systemd/system/
\[root@web1 system\]# svn import . file:///var/svn/project/ -m \"Init
Data\"
将system目录里面的 . 导入到 本地/var/svn/project/
#-m "lnit Data" -m后面跟的是本次导入的备注或者注释,
#/usr/lib/systemd/system/目录里面存放有所有systemctl
能启动的程序配置文件
### 4）修改配置文件，创建账户与密码
所有配置文件，要求顶头写，开头不要有空格。有三个文件需要修改
\[root@Web1111 \~\]# cd /var/svn/project/conf/
\[root@Web1111 conf\]# ls
authz passwd svnserve.conf
\[root@web1 \~\]# vim /var/svn/project/conf/svnserve.conf
\[general\]
\### These options control access to the repository for unauthenticated
\### and authenticated users. Valid values are \"write\", \"read\",
\### and \"none\". The sample settings below are the defaults.
anon-access = none
//19行，匿名无任何权限
auth-access = write
//20行，有效账户可读可写
password-db = passwd
//27行，指定密码文件
authz-db = authz
//34行，ACL访问控制列表文件
\[root@web1 \~\]# vim /var/svn/project/conf/passwd
... ...
\[users\]
harry = 123456
//用户名和密码
tom = 123456
//用户名和密码
\[root@web1 \~\]# cat /var/svn/project/conf/authz
\[/\] //定义ACL访问控制
harry = rw //用户对项目根路径可读可写
tom = rw
### 备注:权限根目录
\[/\] 根是指 /var/svn/project目录 第3步中,本地导入初始化数据的的目录,
\[/abc\] 是指/var/svn/project/abc 目录
### 5）启动服务
\[root@web1 \~\]# svnserve -d -r /var/svn/project
\[root@web1 \~\]# netstat -nutlp \|grep svnserve
tcp 0 0 0.0.0.0:3690 0.0.0.0:\* LISTEN 4043/svnserve
\[root@Web1111 conf\]# ss -nutlp \| grep 3690
tcp LISTEN 0 7 \*:3690 \*:\* users:((\"svnserve\",pid=9461,fd=3))
svnserve -d -r /var/svn/project