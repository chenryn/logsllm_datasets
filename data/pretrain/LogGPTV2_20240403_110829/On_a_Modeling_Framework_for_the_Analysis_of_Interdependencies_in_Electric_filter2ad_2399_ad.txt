### Improved Text

#### Element Representation in T
Each element \( T \rightarrow \text{Index}(i) \rightarrow \text{Index}(j) \rightarrow \text{Mark}() \) of \( T \) is defined as follows:
- **-1**: Represents a connection from arc \( i \) to node \( j \) (current flow enters the node).
- **+1**: Represents a connection from node \( i \) to arc \( j \) (current flow exits the node).
- **-2, +2**: Indicates that the connection has been opened and can be closed by reconfiguration.
- **-3, +3**: Indicates that the connection has been opened due to a disruption and can only be closed after a repair.

#### Electric Parameters and Extended Places
For simplicity, we consider two types of electric parameters: current flow and voltage. The extended places \( I \) and \( V \) are arrays of \( n_{EPS} \) struct type, where \( n_{EPS} = n_G + n_S + n_L + n_A \). These represent the electric parameters and current values associated with each component for current flow and voltage, respectively (A2♦, B4♦).

- For each generation plant \( i \), \( I \rightarrow \text{Index}(i) \) represents the produced current flow and the maximum current flow that can be produced.
- For each station \( i \), \( I \rightarrow \text{Index}(i) \) represents the current flow, the threshold current flow for an overload, and the threshold current flow for a breakdown of the component.

The extended place `disruptionRates` is an array of \( n_{EPS} \) struct type, representing the rate of occurrence of different types of disruptions associated with each component. These rates depend on the component (e.g., length of the line, position of the station, etc.) and the type of disruption (lightning, tree fall, etc.).

The extended place `disrupted` is an array of \( n_{EPS} \) short type, representing the state of disruption of each component. The extended places `faultyProtection1` and `faultyProtection2` are arrays of \( n_A \) short type, representing the state of failure of the protections associated with each line.

#### Activity `setupAll`
The activity `setupAll` is enabled when the marking of `NSindex` is equal to 0, indicating that the `NSindex` has not yet been set for each replica of the SAN. The function `ifZero` removes one token from `NScount` and sets the marking of `NSindex` to \( n_G + (n_S - \text{NScount} \rightarrow \text{Mark}()) - 1 \). This part of the model enables distinguishing each replica when the NS model is replicated \( n_S \) times to build the complete EI infrastructure (B2♦). The gate `setupAll` is executed only by the first replica, setting all parameters and the initial state of EI represented by the extended places using the following C++-like code:

```cpp
if (NSindex->Mark() == nG) {
    setupT(configTfile, T, nA, nN);
    setupI(configIfile, I, nEPS);
    setupV(configVfile, V, nEPS);
    setupDisruptionRates(configDisRatefile, disruptionRates, nEPS);
}
```

The functions `setupT()`, `setupI()`, `setupV()`, and `setupDisruptionRates()` set the initial values of the extended places by reading the configuration values from the input files. For example, the input file `configTfile` can have a row for each electric line with the following format: `"nodeIndex arcIndex nodeIndex"`.

#### Activity `Tpropagate`
The activity `Tpropagate` represents the occurrence of an event of current flow overload (e.g., lightnings) that can propagate instantaneously to neighboring components. This activity has an exponential distribution with a rate given by `disruptionRates->Index(NSindex->Mark())->overloadPropagation->Mark()`. Upon completion of `Tpropagate`, the code of the gate `propagateOverload` is executed:

```cpp
propagateOverload(T, disrupted, faultyProtection1, faultyProtection2, T, NSindex->Mark());
autoevolution(T, I, V);
if (disrupted->Index(NSindex->Mark())->Mark() == 0)
    canPropagate->Mark() = 1;
```

The function `propagateOverload()` receives the topology state `T`, the disruption state of the components `disrupted`, the state of the failure of the protections `faultyProtection1` and `faultyProtection2`, the current flow on the grid, and the index of the component affected by the overload (A4♦). The result of executing `propagateOverload()` is that the values of `T`, `disrupted`, `faultyProtection1`, and `faultyProtection2` are modified due to the propagation of the overload. The function `autoevolution()` updates `I` and `V` in accordance with the new topology `T`. This function represents the automatic evolution of the values of `I` and `V` when the topology changes and must be executed after each change of `T`.

#### Activities `TexternalD` and `ToverloadD`
The activities `TexternalD` and `ToverloadD` represent the time to the occurrence of an external (e.g., a tree fall) or internal (e.g., a disruption due to the current flow) disruption, respectively. Both activities follow an exponential distribution. The rate of `TexternalD` is `disruptionRates->Index(NSindex->Mark())->externalDisconnection->Mark()`. The rate of `ToverloadD` depends on the current flow of the component (A3♦) and is defined by the following code:

```cpp
if (I->Index(NSindex->Mark())->curr->Mark() > I->Index(NSindex->Mark())->overload->Mark())
    return (disruptionRates->Index(NSindex->Mark())->agingRate->Mark());
else
    return (overloadedDisruptionRate(I, disruptionRates->Index(NSindex->Mark())->agingRate->Mark(), NSindex->Mark()));
```

The function `overloadedDisruptionRate()` returns the disruption rate when the current flow is greater than the threshold current flow `I->Index(NSindex->Mark())->overload->Mark()`.

For the topology `T` for which `T->Index(i)->Index(NSindex->Mark())->Mark()` is equal to 1 or -1, this value is changed to 3 or -3, respectively, and the following code is executed:

```cpp
disconnected->Mark() = 1;
canPropagate->Mark() = 0;
disrupted->Index(NSindex->Mark())->Mark() = 1;
autoevolution(T, I, V);
```

After the repair of the component, represented by the activity `TRepair`, the values of `T` and `disrupted` are updated by the output gate `repaired`, and the function `autoevolution()` is executed.

#### Activity `tDisrupted`
The activity `tDisrupted` is enabled when a component is affected by a disruption, and `disrupted->Index(NSindex->Mark())->Mark() == 1`. The local places `canPropagate`, `connected`, and `disconnected` must be updated.

#### Model Composition
In Figure 8, it is shown how the atomic models for NS, AL, LCT, and RTS can be replicated (using the “Rep” operator [13]) and composed (using the “Join” operator [13]) to obtain a part of the EPS model. The number of replicas of the models of NS, AL, LCT, and RTS are \( n_S \), \( n_A \), \( n_S \), and \( n_R \), with \( n_R \) being the number of regions (B1♦). We remind that these anonymous replications become non-anonymous thanks to the modeling mechanisms described in the first part of this section (B2♦).

### Conclusions and Future Work
This paper addresses the definition of a modeling framework to analyze the interdependencies between the electric infrastructure (EI) and the control information system (ITCS) involved in electric power systems (EPS). Analyzing and mastering the reciprocal impact of failures experienced by EI and ITCS are crucial for a proper assessment of operational risk and for foreseeing adequate countermeasures to prevent catastrophic blackouts. The current study is at an exploratory stage, and further research is needed to fully realize the modeling environment. Despite its preliminary character, this work provides a relevant contribution in terms of:
1. Analysis of the structure and behavior of the EI and ITCS subsystems, including their failure models and state definitions.
2. Identification of the major challenges the modeling framework must address and discussion of possible approaches to cope with them.
3. Implementation of a few basic modeling mechanisms inside the M¨obius modeling and evaluation environment to support the feasibility of the proposed approach through an existing tool.

Extensions and refinements of the presented modeling mechanisms are currently under investigation. Future work will include a detailed study of the solution aspects that need to be addressed to develop a complete modeling and evaluation framework suitable for quantitative assessment of interdependencies in electric power systems, potentially extendible to other critical infrastructure systems.

### Acknowledgment
This work has been partially supported by the EC IST Project CRUTIAL [1] (Contract n. 027513).

### References
[1] European Project CRUTIAL, contract n. 027513. http://crutial.cesiricerca.it.
[2] B. A. Carreras, V. E. Lynch, I. Dobson, and D. E. Newman. Critical points and transitions in an electric power transmission model for cascading failure blackouts. Chaos, 12(4):985–994, 2002.
[3] S. Chiaradonna, P. Lollini, and F. Di Giandomenico. On the modeling of an instance of the electric power system. Technical Report rcl061201, University of Florence, Dip. Sistemi Informatica, RCL group, http://dcl.isti.cnr.it/Documentation/Papers/Techreports.html, December 2006.
[4] D. Daly, D. D. Deavours, J. M. Doyle, P. G. Webster, and W. H. Sanders. M¨obius: An extensible tool for performance and dependability modeling. In B. R. Haverkort, H. C. Bohnenkamp, and C. U. Smith, editors, 11th International Conference, TOOLS 2000, volume 1786 of LNCS, pages 332–336. Springer Verlag, 2000.
[5] I. Dobson and B. A. Carreras. Risk analysis of critical loading and blackouts with cascading events. Consortium for Electric Reliability Technology Solutions (CERTS), 2005.
[6] I. Dobson, B. A. Carreras, and D. E. Newman. A loading-dependent model of probabilistic cascading failure. Probability in the Engineering and Informational Sciences, 19(1):15–32, 2005.
[7] I. Dobson, K. R. Wierzbicki, B. A. Carreras, V. E. Lynch, and D. E. Newman. An estimator of propagation of cascading failure. In 39th IEEE Hawaii International Conference on System Sciences (CD-ROM), Kauai, Hawaii, 2006.
[8] L. H. Fink and K. Carlsen. Operating under stress and strain. IEEE Spectrum, 15:48–53, March 1978.
[9] J.-C. Laprie, K. Kanoun, and M. Kaˆaniche. Modeling cascading and escalating outages in interdependent critical infrastructures. In IEEE Int. Conference on Dependable Systems and Networks (DSN-2006), pages 226–227, Philadelphia (USA), June 2006. Fast abstract.
[10] W. G. on Critical Information Infrastructure Protection. Critical information infrastructures protection: The case of Italy. Ministry for Innovation and Technologies, October 2003.
[11] P. Pourbeik, P. S. Kundur, and C. W. Taylor. The anatomy of a power grid blackout. IEEE Power and Energy Magazine, pages 22–29, September/October 2006.
[12] S. M. Rinaldi, J. P. Peerenboom, and T. K. Kelly. Identifying, understanding, and analyzing critical infrastructure interdependencies. IEEE Control Systems Magazine, pages 11–25, December 2001.
[13] W. H. Sanders and J. F. Meyer. Reduced base model construction methods for stochastic activity networks. IEEE Journal on Selected Areas in Communications, 9(1):25–36, January 1991.
[14] W. H. Sanders and J. F. Meyer. Stochastic activity networks: Formal definitions and concepts. In Lectures on Formal Methods and Performance Analysis, volume 2090 of LNCS, pages 315–343. Springer Verlag, 2001.
[15] A. Wenger, J. Metzger, M. Dunn, and I. Wigert. Critical information infrastructure protection. ETH the Swiss Federal Institute of Technology Zurich, 2004.