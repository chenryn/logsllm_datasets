# Subversion-Resilient Signature Schemes

**Authors:**
- Giuseppe Ateniese
- Bernardo Magri
- Daniele Venturi

**Affiliations:**
- 1. Stevens Institute of Technology, USA
- 2. Friedrich-Alexander-Universität Erlangen-Nürnberg, Germany
- 3. Sapienza University of Rome, Italy

**Date:**
November 3, 2018

**Abstract:**

This paper provides a formal treatment of the security of digital signatures against subversion attacks (SAs). Our model generalizes previous work and is motivated by the proliferation of software attacks (e.g., malware and buffer overflow attacks) and recent revelations about intelligence agencies attempting to sabotage cryptographic algorithms. The primary security requirement we introduce demands that a signature scheme remains unforgeable even in the presence of an attacker applying SAs (within a certain class of allowed attacks) in a fully-adaptive and continuous manner. Previous notions, such as the security against algorithm-substitution attacks introduced by Bellare et al. (CRYPTO '14) for symmetric encryption, were non-adaptive and non-continuous.

**Key Results:**

- **Negative Results:**
  - We show that a broad class of randomized signature schemes is insecure against stateful SAs, even if using just a single bit of randomness.
  - We also establish that signature schemes with sufficient min-entropy are insecure against stateless SAs.
  - The designed attacks are undetectable to end-users, even if they know the signing key.

- **Positive Results:**
  - We demonstrate that signature schemes with unique signatures are subversion-resilient against all attacks that meet a basic undetectability requirement. This contrasts with the necessity of stateful schemes in symmetric encryption, as unique signatures are stateless and among the fastest and most established digital signatures available.
  - We show how to construct subversion-resilient identification schemes from subversion-resilient signature schemes.
  - We present a method to achieve security against arbitrary tampering with the computation by using an un-tamperable cryptographic reverse firewall (RF), which "sanitizes" any signature given as input using only public information. The RF we design allows us to successfully protect re-randomizable signature schemes, which include unique signatures as a special case.

**Additional Contributions:**

- We extend our model to consider multiple users and explore the implications and separations among the various notions we introduce.
- While our study is primarily theoretical, it has strong practical motivations, and we believe our results have important implications for the selection and adoption of digital signature schemes in standards and protocols.

**Contents:**

1. Introduction
   1.1. Our Results and Techniques
   1.2. Impact
   1.3. Related Work

2. Preliminaries
   2.1. Notation
   2.2. Signature Schemes
   2.3. Pseudorandom Generators
   2.4. Pseudorandom Functions

3. Subverting Signatures
   3.1. Security
   3.2. Public/Secret Undetectability
   3.3. Signing Key Recovery
   3.4. Successful SAs

4. Mounting Subversion Attacks
   4.1. Non-Trivial Randomness Attack
   4.2. Coin-Extractable Attack

5. Security of Unique Signatures
   5.1. The Verifiability Condition
   5.2. Chosen-Message Attacks
   5.3. Random-Message Attacks
   5.4. Subversion-Resilient Identification Schemes

6. Reverse Firewalls for Signatures
   6.1. Properties
   6.2. Necessity of Keeping State
   6.3. Patching Re-Randomizable Signatures

7. The Multi-User Setting
   7.1. Multi-User Security
   7.2. Multi-User Public/Secret Undetectability
   7.3. Multi-User Signing Key Recovery

**Introduction:**

Balancing national security interests with the privacy rights of lawful citizens is a daunting task, especially in light of the revelations by Edward Snowden [PLS13, BBG13, Gre14] about the extensive collection of metadata and other information by intelligence agencies. It is evident that these agencies not only collected and mined information but also deployed malware, exploited zero-day vulnerabilities, and conducted active attacks against standard protocols. Additionally, some cryptographic protocol specifications were modified to embed backdoors.

The ability of an adversary to replace a cryptographic algorithm with an altered version was first formally considered by Young and Yung [YY96, YY97], who termed this field kleptography. They explored the idea of an attacker surreptitiously modifying a cryptographic scheme to subvert its security. This research area was recently revitalized by Bellare et al. [BPR14], who analyzed the possibility of an intelligence agency substituting an encryption algorithm with an alternative version that undetectably reveals the secret key or plaintext. They found that any randomized and stateless encryption scheme would fall to generic algorithm-substitution attacks, and the only way to achieve meaningful security (CPA-security) is to use a nonce-based encryption that must keep state.

In this paper, we analyze digital signature schemes under subversion attacks (SAs), which include algorithm-substitution and kleptographic attacks as special cases, but also cover more general malware and virus attacks. Unlike encryption, we show positive results and efficient schemes that provide the strongest security guarantee and can be deployed in real systems. Our intention is not to propose schemes that can be abused by criminals to avoid monitoring; rather, we are motivated by scientific curiosity and aim to contribute to an active field of research.

**1.1. Our Results and Techniques:**

We introduce a new and generic framework and definitions for subversion of digital signatures. In the standard black-box setting, a signature scheme should remain unforgeable even against an adversary able to obtain signatures on (polynomially many) chosen messages. Our security definitions empower the adversary with the ability to continuously subvert the signing algorithm within a class \( A \) of allowed SAs. For each chosen subversion in the class, the adversary can access an oracle that answers (polynomially many) signature queries using the subverted signature algorithm. Importantly, the different subversions can be chosen in a fully adaptive manner, possibly depending on the target verification key of the user.

Our definition is very general, covering adaptive and continuous tampering with the computation performed by the signing algorithm (within the class \( A \)). It includes algorithm-substitution and kleptographic attacks as special cases and models, for example, a machine running a signature software infected by multiple viruses and malware (e.g., due to buffer overflow attacks [One96, Fry00, PB04]). We also obtain memory and randomness tampering as special cases. For a more comprehensive discussion, see Section 3.1, where we introduce our model formally.

Clearly, without making any restriction on the class \( A \) (or without making additional assumptions), there is no hope for security. An arbitrarily subverted signature algorithm could, for instance, ignore all inputs and output the secret key. In this paper, we investigate two approaches to tackle such attacks and obtain positive results:

- **Limiting the adversarial power:** We consider a setting where the adversarial goal is to subvert the signature algorithm in a way that is undetectable to the end-user (or at least allows maintaining plausible deniability). For example, the simple attack where the subversion outputs the secret key is easily detectable given only public information. As we show in Section 5, requiring that the class \( A \) satisfies a basic undetectability requirement already allows for interesting positive results.
- **Using a reverse firewall:** In Section 6, we show that security against arbitrary tampering with the computation can be achieved by making the additional assumption of an un-tamperable cryptographic reverse firewall (RF) [MS15, DMS16]. Roughly, a RF takes as input a message/signature pair and is allowed to "sanitize" the input signature using only public information.

**Negative Results:**

We define what it means for a class \( A \) of SAs to be undetectable. Roughly, the class \( A \) such that the following holds: (i) no user can distinguish black-box access to the genuine signature algorithm from black-box access to the subverted signature algorithm \( \tilde{A} \); (ii) an adversary given a polynomial number of samples from \( \tilde{A} \), no matter how the samples are chosen, can recover the signing key with high probability. See Section 3.2 for a precise definition. Our definitions of undetectability are similar in spirit to those put forward by [BPR14, BJK15] for the setting of symmetric encryption. Importantly, we distinguish the case where the user (trying to detect the attack) knows only public or private information (i.e., it knows, or even is allowed to choose, the secret key).

Next, we explore the possibility of designing classes of SAs that are (even secretly) undetectable and yet allow for complete security breaches. This direction was already pursued by Bellare et al. [BPR14], who showed that it is possible to stealthily bias the random coins of sufficiently randomized symmetric encryption schemes in a way that allows extracting the secret key after observing a sufficient number of (subverted) ciphertexts. As a first negative result, we explain how to adapt the "biased randomness attack" of [BJK15] to the case of signature schemes; similar to [BJK15], our attack is completely stateless (i.e., the class of SAs we consider does not need to maintain a state across invocations), which makes it undetectable even in the presence of state resets.

The above generic attack requires that the signature scheme uses a minimal amount of randomness. This leaves the interesting possibility that less randomized schemes (such as the Katz-Wang signature scheme [KW03], using only one bit of randomness) might be secure. In Section 4, we present a new attack showing that this possibility is vacuous: Our attack allows stealthily biasing the randomness in a way that later allows extracting the signing key—regardless of the number of random bits required by the scheme—assuming that the targeted signature scheme is coin-extractable. The latter roughly means that the random coins used for generating signatures can be extracted efficiently from the signature itself; as we discuss in more detail in Section 4.2, many real schemes (including Katz-Wang) are coin-extractable.

Our second attack is stateful, in that a counter has to be maintained by the subverted algorithm to leak different parts of the secret key. We leave it as an open problem to design a stateless attack that works for (coin-extractable) signature schemes with small randomness.

**Positive Results:**

As a first positive result, we show that fully deterministic schemes with unique signatures are existentially unforgeable under chosen-message attacks against the class of SAs that satisfies the so-called verifiability condition. This means that—for all values in the message space—signatures produced by the subverted signature algorithm should (almost always) verify correctly under the target verification key (note that both attacks mentioned).