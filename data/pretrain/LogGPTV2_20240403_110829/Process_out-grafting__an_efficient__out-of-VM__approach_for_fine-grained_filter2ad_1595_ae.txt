improved. Speciﬁcally, as this system call will completely
change the memory layout of the out-grafted process, our
current prototype simply chooses to ﬁrst restore the pro-
cess back to the production VM and then out-graft again
the process immediately after this system call is completed
by the production VM. Though this approach can leverage
the functionalities we already implemented for graft process
and restore process, an integrated solution is still desired.
Moreover, our current prototype proactively maps all the
(user-mode) memory pages at the very beginning when a
process is out-grafted. A better solution will be to only map
the currently executing code page to the security VM. For
the rest of the pages, they can be lazily mapped when they
are being actually accessed. This could further improve our
system performance.
One caveat we experienced in our prototype development
is related to shared pages. Speciﬁcally, most commodity OSs
map the same physical pages for common shared library code
among diﬀerent processes. In our system, this means that
a single host-physical page can contain code that is used
across multiple processes in the production VM. Recall that
our system directly maps this host-physical page to the out-
grafted process in the security VM. If the monitoring tool
modiﬁes such code page (say to install certain code hooks),
this could alter other process’ behavior in the production
VM. Fortunately, this can be resolved in a straightforward
manner by co-operating the helper module and KVM to
mark all executable code pages for the out-grafted process
as read-only in the EPT. By applying the classic copy-on-
write technique, if the monitor process (not the out-grafted
process) attempts to write to this page, a separate copy of
the page can be created.
Finally, with the wide adoption of virtualization in data
centers, we also envision that diﬀerent security VMs can be
dispatched to each physical machine to inspect running guest
VMs and their internal processes (for ﬁne-grained execution
monitoring). This is largely feasible as the semantic gap has
been eﬀectively bridged to support existing monitoring tools.
On the other hand, with our current focus on examining in-
dividual suspect process for malicious behavior, we believe
other interesting applications and opportunities (e.g., per-
formance monitoring and intelligent parallel job scheduling)
remain, which we plan to explore in the future.
3726. RELATED WORK
Virtualization has been widely proposed to address vari-
ous computer system problems, including enhancing the ef-
fectiveness and robustness of host-based monitoring tools.
Speciﬁcally, it has been applied in oﬄine malware analy-
sis [9, 11], honeypot-based malware capture [20], intrusion
analysis [23, 24] and malware detection [15, 21]. Among the
most notable, Livewire [15] pioneered the concept of placing
a monitor “out-of-VM” and applying VM introspection tech-
niques to understand in-VM activities. A number of recent
systems address the inherent semantic gap challenge to im-
prove VM introspection for various purposes [8, 10, 21, 30,
31, 37]. For instance, one recent work Virtuoso [12] aims to
eﬀectively automate the process of building introspection-
based security tools. Another system [10] proposes injecting
stealthy agents into a monitored VM to solve the seman-
tic gap problem and enhance out-of-VM tools. Similar to
most of these eﬀorts, our approach places security tools out-
of-VM. However, our approach mainly diﬀers from them in
the way to address the semantic gap challenge. In particu-
lar, while prior approaches are sensitive to particular guest
kernel versions or patches, our approach brings the suspect
process to the security tool and allows for native support
of existing tools.
In other words, by eﬀectively removing
the semantic gap, our approach enables re-use of existing
user-mode process monitoring tools. Further, our approach
localizes the impact on the out-grafted process and avoids
perturbing the monitored VM as a whole.
From another perspective, one recent system SIM [34] uti-
lizes hardware features to place an “in-VM” monitor in a
hypervisor-protected address space. While it is not physi-
cally running out-of-VM, SIM still suﬀers from the semantic-
gap and cannot natively support existing monitoring tools.
In other words, though the in-VM presence leads to unique
performance beneﬁts, there is a need to adapt existing tools
to take advantage of the SIM support. Also, the main goal
of SIM is to protect “kernel hook”-based monitors. Another
recent system Gateway [38] leverages virtualization to de-
tect kernel malware by monitoring kernel APIs invoked by
In contrast, our focus is for ﬁne-grained
device drivers.
process-level execution monitoring (e.g.
ltrace) that typi-
cally requires user-mode interception. Process implanting
[22] is another “in-VM” approach, where an “undercover
agent” process is dynamically implanted in a target VM for
surveillance and repair operations. Contrary to process out-
grafting, process implanting relies on the integrity of the
target VM’s kernel and requires special modiﬁcation to the
program executed by the implanted process.
Process out-grafting requires redirecting the process exe-
cution across two diﬀerent VMs, which bears certain simi-
larities to well-known process migration mechanisms [28, 29,
35, 36]. However, one key diﬀerence is that process migra-
tion techniques typically move the entire execution states,
including kernel-maintained resources while our approach
only (temporarily) redirects the user-level execution of a
process for secure monitoring. Moreover, most process mi-
gration techniques are typically applied for generic purposes
such as fault-tolerance and load-balancing [28, 35] and do
not consider the isolation challenge for secure monitoring.
We also notice that the idea of system call forwarding has
been previously applied in systems to protect a critical ap-
plication from an untrusted kernel [39]. In this case, a pro-
grammer can divide system calls into two sets so that each
set will be serviced by either a trusted or untrusted ker-
nel, respectively.
In contrast, throughout the out-grafting
duration, our system has one single kernel to serve all sys-
tem calls for the out-grafted process. Moreover, due to the
relocated user-level execution, we need to perform mode-
sensitive split execution, which leads to an extra but unique
need of forwarding page faults. System call forwarding be-
tween VMs has also been used [27] to improve the ﬁdelity of
runtime environment for better malware behavior monitor-
ing, albeit without isolation guarantees. In contrast, we aim
to address compatibility of existing process monitoring tools
while ensuring their strong isolation in the context of VM
introspection. Further, we dynamically create the memory
mapping for the out-grafted process between the production
VM and security VM. Also, our on-demand grafting allows
for dynamically grafting the execution ﬁrst and then restor-
ing the execution back.
More generally, sandboxing and isolation techniques [14,
16, 32] have been widely researched and applied as eﬀec-
tive mechanisms to conﬁne an untrusted process’ access to
sensitive resources in the host system. Our work is related
to them by essentially leveraging the VM isolation provided
by the underlying virtualization layer. However, with an
out-of-VM approach, process out-grafting can be applied
on-demand, which provides certain ﬂexibility in monitoring
runtime behavior of suspect processes. Also, our approach
is unorthodox when compared with traditional sandboxing
and isolation techniques due to its split execution, i.e., the
user-mode and kernel-mode execution of an out-grafted pro-
cess run in two diﬀerent VMs.
7. CONCLUSION
We have presented the design, implementation and eval-
uation of process out-grafting, an architectural approach to
address isolation and compatibility challenges in out-of-VM
approaches for ﬁne-grained process-level execution monitor-
ing. In particular, by eﬀectively relocating a suspect pro-
cess from a production VM to the security VM for close
inspection, process out-grafting eﬀectively removes the se-
mantic gap for native support of existing process monitor-
ing tools. Moreover, by forwarding the system calls from
the out-grafted process back to the production VM, it can
smoothly continue its execution while still being strictly iso-
lated from the monitoring tool. The evaluation results with
a number of performance benchmarks show its eﬀectiveness
and practicality.
Acknowledgements The authors would like to thank
the anonymous reviewers for their insightful comments that
helped improve the presentation of this paper. This work
was supported in part by the US Air Force Oﬃce of Scientiﬁc
Research (AFOSR) under Contract FA9550-10-1-0099 and
the US National Science Foundation (NSF) under Grants
0852131, 0855297, 0855036, 0910767, and 0952640. Any
opinions, ﬁndings, and conclusions or recommendations ex-
pressed in this material are those of the authors and do not
necessarily reﬂect the views of the AFOSR and the NSF.
8. REFERENCES
[1] Kaiten. http://packetstormsecurity.org/irc/kaiten.c.
[last accessed: May 2011].
[2] Kernel Virtual Machine. http://www.linux-kvm.org. [last
accessed: May 2011].
373[3] McAfee Threats Report: Fourth Quarter 2010.
http://www.mcafee.com/us/resources/reports/
rp-quarterly-threat-q4-2010.pdf. [last accessed: May
2011].
[4] QEMU. http://www.qemu.org. [last accessed: May 2011].
[5] UPX: The Ultimate Packer for eXecutables.
http://upx.sourceforge.net. [last accessed: May 2011].
[6] Adams, K., and Agesen, O. A Comparison of Software
and Hardware Techniques for x86 Virtualization. In
Proceedings of the 12th International Conference on
Architectural Support for Programming Languages and
Operating Systems (2006).
[7] AMD. AMD-V Nested Paging. AMD White Paper (2008).
[8] Azab, A. M., Ning, P., Sezer, E. C., and Zhang, X.
HIMA: A Hypervisor-Based Integrity Measurement Agent.
In Proceedings of the 25th Annual Computer Security
Applications Conference (2009).
[9] Bayer, U., Kruegel, C., and Kirda, E. TTAnalyze: A
Tool for Analyzing Malware. In Proceedings of the 15th
Annual Conference of the European Institute for Computer
Antivirus Research (2006).
[10] cker Chiueh, T., Conover, M., Lu, M., and Montague,
B. Stealthy Deployment and Execution of In-Guest Kernel
Agents. In BlackHat 2009.
[11] Dinaburg, A., Royal, P., Sharif, M., and Lee, W.
Ether: Malware Analysis via Hardware Virtualization
Extensions. In Proceedings of the 15th ACM Conference on
Computer and Communications Security (2008).
[12] Dolan-Gavitt, B., Leek, T., Zhivich, M., Giffin, J.,
and Lee, W. Virtuoso: Narrowing the Semantic Gap in
Virtual Machine Introspection. In Proceedings of the 32nd
IEEE Symposium on Security and Privacy (2011).
[13] Forrest, S., Hofmeyr, S., and Somayaji, A. The
Evolution of System-Call Monitoring. In Proceedings of the
24th Annual Computer Security Applications Conference
(2008).
[14] Garfinkel, T., Pfaff, B., and Rosenblum, M. Ostia: A
Delegating Architecture for Secure System Call
Interposition. In Proceedings of the 11th Annual Network
and Distributed System Security Symposium (2004).
[15] Garfinkel, T., and Rosenblum, M. A Virtual Machine
Introspection Based Architecture for Intrusion Detection.
In Proceedings of the 10th Annual Network and Distributed
Systems Security Symposium (2003).
[16] Goldberg, I., Wagner, D., Thomas, R., and Brewer,
E. A. A Secure Environment for Untrusted Helper
Applications: Conﬁning the Wily Hacker. In Proceedings of
the 6th USENIX Security Symposium (1996).
[17] Guo, F., Ferrie, P., and Chiueh, T.-c. A Study of the
Packer Problem and Its Solutions. In Proceedings of the
11th International Symposium on Recent Advances in
Intrusion Detection. (2008).
[18] Intel. Intel Virtualization Technology: Hardware Support
for Eﬃcient Processor Virtualization. Intel(R) Technology
Journal 10, 3 (2006).
[19] Intel. Intel 64 and IA-32 Architectures Software
Developer´s Manual Volume 3: System Programming
Guide, Part 1 and Part 2, (2010).
[20] Jiang, X., and Wang, X. “Out-of-the-Box” Monitoring of
VM-Based High-Interaction Honeypots. In Proceedings of
the 10th International Symposium on Recent Advances in
Intrusion Detection (2007).
[21] Jiang, X., Wang, X., and Xu, D. Stealthy Malware
Detection through VMM-based “Out-of-the-Box” Semantic
View Reconstruction. In Proceedings of the 14th ACM
Conference on Computer and Communications Security
(2007).
[22] Gu, Z., Deng, Z., Xu, D., and Jiang, X. Process
Implanting: A New Active Introspection Framework for
Virtualization. In Proceedings of the 30th IEEE Symposium
on Reliable Distributed Systems (2011).
[23] Joshi, A., King, S. T., Dunlap, G. W., and Chen, P. M.
Detecting Past and Present Intrusions through
Vulnerability-speciﬁc Predicates. In Proceedings of the 20th
ACM Symposium on Operating Systems Principles (2005).
[24] King, S. T., and Chen, P. M. Backtracking Intrusions. In
Proceedings of the 19th ACM Symposium on Operating
Systems Principles (2003).
[25] Klein, G., Elphinstone, K., Heiser, G., Andronick, J.,
Cock, D., Derrin, P., Elkaduwe, D., Engelhardt, K.,
Kolanski, R., Norrish, M., Sewell, T., Tuch, H., and
Winwood, S. seL4: Formal Veriﬁcation of an OS Kernel.
In Proceedings of the 22nd Symposium on Operating
Systems Principles (2009).
[26] Martignoni, L., Christodorescu, M., and Jha, S.
OmniUnpack: Fast, Generic, and Safe Unpacking of
Malware. In Proceedings of the 23rd Annual Computer
Security Applications Conference (2007).
[27] Martignoni, L., Paleari, R., and Bruschi, D. A
Framework for Behavior-Based Malware Analysis in the
Cloud. In Proceedings of the 5th International Conference
on Information Systems Security (2009).
[28] Nuttall, M. A Brief Survey of Systems Providing Process
or Object Migration Facilities. ACM SIGOPS Operating
Systems Review 28 (1994).
[29] Osman, S., Subhraveti, D., Su, G., and Nieh, J. The
Design and Implementation of Zap: a System for Migrating
Computing Environments. ACM SIGOPS Operating
Systems Review 36 (2002).
[30] Payne, B., de Carbone, M., and Lee, W. Secure and
Flexible Monitoring of Virtual Machines. In Proceedings of
the 23rd Annual Computer Security Applications
Conference (2007).
[31] Payne, B. D., Carbone, M., Sharif, M., and Lee, W.
Lares: An Architecture for Secure Active Monitoring Using
Virtualization. In Proceedings of the 29th IEEE Symposium
on Security and Privacy (2008).
[32] Provos, N. Improving Host Security with System Call
Policies. In Proceedings of the 12th USENIX Security
Symposium (2003).
[33] Royal, P., Halpin, M., Dagon, D., Edmonds, R., and
Lee, W. PolyUnpack: Automating the Hidden-Code
Extraction of Unpack-Executing Malware. In Proceedings of
the 22nd Annual Computer Security Applications
Conference (2006).
[34] Sharif, M. I., Lee, W., Cui, W., and Lanzi, A. Secure
In-VM Monitoring Using Hardware Virtualization. In
Proceedings of the 16th ACM Conference on Computer and
Communications Security (2009).
[35] Smith, J. M. A survey of process migration mechanisms.
ACM SIGOPS Operating Systems Review 22 (1988).
[36] Smith, J. M. The Design and Implementation of Berkeley
Lab’s Linux Checkpoint/Restart. Berkeley Lab Technical
Report (2002).
[37] Srivastava, A., and Giffin, J. Tamper-Resistant,
Application-Aware Blocking of Malicious Network
Connections. In Proceedings of the 11th International
Symposium on Recent Advances in Intrusion Detection
(2008).
[38] Srivastava, A., and Giffin, J. Eﬃcient Monitoring of
Untrusted Kernel-mode Execution. In Proceedings of the
18th Annual Network and Distributed Systems Security
Symposium (2011).
[39] Ta-Min, R., Litty, L., and Lie, D. Splitting Interfaces:
Making Trust between Applications and Operating Systems
Conﬁgurable. In Proceedings of the 7th Symposium on
Operating Systems Design and Implementation (2006).
[40] Wang, Z., and Jiang, X. HyperSafe: A Lightweight
Approach to Provide Lifetime Hypervisor Control-Flow
Integrity. Proceedings of the 31st IEEE Symposium on
Security and Privacy (2010).
374