divergence without online interaction with the logger
and proved an O(n) lower bound on the commitment
size. We achieve a tighter bound by virtue of the logger
cooperating in the generation of these proofs.
Trusted hardware Rather than relying on auditing, an
alternative model is to rely on the logger’s hardware itself
to be tamper-resistant [58, 1]. Naturally, the security of
these systems rests on protecting the trusted hardware and
the logging system against tampering by an attacker with
complete physical access. Although our design could cer-
tainly use trusted hardware as an auditor, cryptographic
schemes like ours rest on simpler assumptions, namely
the logger can and must prove it is operating correctly.
3 History tree
We now present our new data structure for representing
a tamper-evident history. We start with a Merkle tree [46],
which has a long history of uses for authenticating static
data. In a Merkle tree, data is stored at the leaves and the
hash at the root is a tamper-evident summary of the con-
tents. Merkle trees support logarithmic path lengths from
the root to the leaves, permitting efﬁcient random access.
Although Merkle trees are a well-known tamper-evident
data structure and our use is straightforward, the nov-
elty in our design is in using a versioned computation of
hashes over the Merkle tree to efﬁciently prove that differ-
ent log snapshots, represented by Merkle trees, with dis-
tinct root hashes, make consistent claims about the past.
A ﬁlled history tree of depth d is a binary Merkle
hash tree, storing 2d events on the leaves. Interior nodes,
Ii,r are identiﬁed by their index i and layer r. Each leaf
node Ii,0, at layer 0, stores event Xi.
Interior node Ii,r
has left child Ii,r−1 and right child Ii+2r−1,r−1. (Figures 1
through 3 demonstrate this numbering scheme.) When
a tree is not full, subtrees containing no events are
I′
0,3
I′
0,2
I′
0,1
I′
2,1
X ′
0 X ′
1
X ′
2
Figure 1: A version 2 history with commitment C′
2 = I′
0,3.
I′′
0,3
I′′
0,2
I′′
4,2
I′′
0,1
I′′
2,1
I′′
4,1
I′′
6,1
X ′′
0 X ′′
1
X ′′
2
X ′′
3
X ′′
4 X ′′
5
X ′′
6
Figure 2: A version 6 history with commitment C′′
6 = I′′
0,3.
I0,3
I0,2
I4,2
I0,1
I2,1
I4,1
I6,1
X2
X3
X6
Figure 3: An incremental proof P between a version 2 and
version 6 commitment. Hashes for the circled nodes are
included in the proof. Other hashes can be derived from their
children. Circled nodes in Figures 1 and 2 must be shown to
be equal to the corresponding circled nodes here.
represented as (cid:3). This can be seen starting in Figure 1,
a version-2 tree having three events. Figure 2 shows a
version-6 tree, adding four additional events. Although
the trees in our ﬁgures have a depth of 3 and can store
up to 8 leaves, our design clearly extends to trees with
greater depth and more leaves.
Each node in the history tree is labeled with a crypto-
graphic hash which, like a Merkle tree, ﬁxes the contents
of the subtree rooted at that node. For a leaf node, the label
is the hash of the event; for an interior node, the label is
the hash of the concatenation of the labels of its children.
An interesting property of the history tree is the ability
to efﬁciently reconstruct old versions or views of the tree.
Consider the history tree given in Figure 2. The logger
could reconstruct C′′
2 analogous to the version-2 tree in
Figure 1 by pretending that nodes I′′
3 were (cid:3) and
then recomputing the hashes for the interior nodes and
2 matched a previously
the root.
advertised commitment C′
2, then both trees must have the
same contents and commit the same events.
If the reconstructed C′′
4,2 and X ′′
3.1 Is it safe to skip nodes during an audit?
In the pruned tree in Figure 3, we omit the events
ﬁxed by I0,1, yet we still preserve the semantics of a
tamper-evident log. Even though these earlier events
may not be sent to the auditor, they are still ﬁxed by the
unchanged hashes above them in the tree. Any attempted
tampering will be discovered in future incremental or
membership audits of the skipped events. With the
history tree, auditors only receive the portions of the
history they need to audit the events they have chosen
to audit. Skipping events makes it possible to conduct a
variety of selective audits and offers more ﬂexibility in
designing auditing policies.
Existing tamper-evident log designs based on a classic
hash-chain have the form Ci = H(Ci−1 k Xi), C−1 = (cid:3) and
do not permit events to be skipped. With a hash chain,
an incremental or membership proof between two com-
mitments or between an event and a commitment must
include every intermediate event in the log. In addition,
because intermediate events cannot be skipped, each audi-
tor, or client acting as an auditor, must eventually receive
every event in the log. Hash chaining schemes, as such,
are only feasible with low event volumes or in situations
where every auditor is already receiving every event.
When membership proofs are used to investigate old
events, the ability to skip nodes can lead to dramatic
reductions in proof size. For example, in our prototype
described in Section 5, in a log of 80 million events, our
history tree can return a complete proof for any randomly
chosen event in 3100 bytes.
In a hash chain, where
intermediate events cannot be skipped, an average of 40
million hashes would be sent.
Auditing strategies
In many settings, it is possible that
not every auditor will be interested in every logged event.
Clients may not be interested in auditing events inserted or
commitments received by other clients. One could easily
imagine scenarios where a single logger is shared across
many organizations, each only incentivized to audit the in-
tegrity of its own data. These organizations could run their
own auditors, focusing their attention on commitments
from their own clients, and only occasionally exchanging
commitments with other organizations to ensure no fork-
ing has occurred. One can also imagine scenarios where
independent accounting ﬁrms operate auditing systems
that run against their corporate customers’ log servers.
The log remains tamper-evident if clients gossip their
received commitments from the logger to at least one hon-
est auditor who uses it when demanding an incremental
proof. By not requiring that every commitment be audited
by every auditor, the total auditing overhead across all
auditors can be proportional to the total number of events
in the log—far cheaper than the number of events times
the number of auditors as we might otherwise require.
X0
X1
X2
X3
X4
X5
X6
Figure 4: Graphical notation for a history tree analogous to the
proof in Figure 3. Solid discs represent hashes included in the
proof. Other nodes are not included. Dots and open circles
represent values that can be recomputed from the values below
them; dots may change as new events are added while open cir-
cles will not. Grey circle nodes are unnecessary for the proof.
0 = X ′
0,X ′′
2 = X ′
This forms the intuition of how the logger generates an
incremental proof P between two commitments, C′
2 and
C′′
6 . Initially, the auditor only possesses commitments C′
2
and C′′
6 ; it does not know the underlying Merkle trees that
these commitments ﬁx. The logger must show that both
histories commit the same events, i.e., X ′′
1 = X ′
1,
and X ′′
2. To do this, the logger sends a pruned tree
P to the auditor, shown in Figure 3. This pruned tree
includes just enough of the full history tree to compute
the commitments C2 and C6. Unnecessary subtrees are
elided out and replaced with stubs. Events can be either
included in the tree or replaced by a stub containing their
hash. Because an incremental proof involves three history
trees, the trees committed by C′
6 with unknown
contents and the pruned tree P, we distinguish them by
using a different number of primes (′).
2 and C′′
From P, shown in Figure 3, we reconstruct the corre-
sponding root commitment for a version-6 tree, C6. We re-
compute the hashes of interior nodes based on the hashes
of their children until we compute the hash for node I0,3,
which will be the commitment C6. If C′′
6 = C6 then the cor-
responding nodes, circled in Figures 2 and 3, in the pruned
tree P and the implicit tree committed by C′′
6 must match.
Similarly, from P, shown in Figure 3, we can recon-
struct the version-2 commitment C2 by pretending that
the nodes X3 and I4,2 are (cid:3) and, as before, recomputing
the hashes for interior nodes up to the root. If C′
2 = C2,
then the corresponding nodes, circled in Figures 1 and 3,
in the pruned tree P and the implicit tree committed by
C′
2 must match, or I′
2 = X2.
0,1 = I0,1 and X ′
If the events committed by C′
2 and C′′
6 are the same
as the events committed by P, then they must be equal;
we can then conclude that the tree committed by C′′
6 is
consistent with the tree committed by C′
2. By this we
mean that the history trees committed by C′
2 and C′′
6
0, X ′′
both commit the same events, or X ′′
1, and
X ′′
0, X ′′
2, even though the events X ′′
1, X ′′
2 = X ′
4 ,
and X ′′
5 are unknown to the auditor.
0 = X ′
0 = X ′
1 = X ′
1 = X ′
b
b
b
if v ≥ i
Av
i,0 =nH(0 k Xi)
i,r =(H(1 k Av
H(1 k Av
Av
i,r−1 k (cid:3))
i,r−1 k Av
i+2r−1,r−1)
if v < i + 2r−1
if v ≥ i + 2r−1
Cn = An
0,d
Av
i,r ≡ FHi,r
whenever v ≥ i + 2r − 1
Figure 5: Recurrence for computing hashes.
(1)
(2)
(3)
(4)
X0
X1
X2
X3
X4
X5
X6
Figure 6: A proof skeleton for a version-6 history tree.
Skipping nodes offers other time-security tradeoffs.
Auditors may conduct audits probabilistically, selecting
only a subset of incoming commitments for auditing. If a
logger were to regularly tamper with the log, its odds of
remaining undetected would become vanishingly small.
3.2 Construction of the history tree
Now that we have an example of how to use a tree-
based history, we will formally deﬁne its construction and
semantics. A version-n history tree stores n + 1 events,
X0 . . .Xn. Hashes are computed over the history tree in
a manner that permits the reconstruction of the hashes
of interior nodes of older versions or views. We denote
the hash on node Ii,r by Av
i,r which is parametrized by
the node’s index, layer and view being computed. A
version-v view on a version-n history tree reconstructs
the hashes on interior nodes for a version-v history tree
that only included events X0 . . . Xv. When v = n, the
reconstructed root commitment is Cn. The hashes are
computed with the recurrence deﬁned in Figure 5.
A history tree can support arbitrary size logs by
increasing the depth when the tree ﬁlls (i.e., n = 2d − 1)
and deﬁning d = ⌈log2(n + 1)⌉. The new root, one level
up, is created with the old tree as its left child and an
empty right child where new events can be added. For
simplicity in our illustrations and proofs, we assume a
tree with ﬁxed depth d.
Once a given subtree in the history tree is complete and
has no more slots to add events, the hash for the root node
of that subtree is frozen and will not change as future
events are added to the log. The logger caches these
frozen hashes (i.e., the hashes of frozen nodes) into FHi,r
to avoid the need to recompute them. By exploiting the
frozen hash cache, the logger can recompute Av
i,r for any
node with at most O(d) operations. In a version-n tree,
node Ii,r is frozen when n ≥ i + 2r − 1. When inserting
a new event into the log, O(1) expected case and O(d)
worse case nodes will become frozen. (In Figure 1, node
I′
0,1 is frozen. If event X3 is added, nodes I′
0,2 will
become frozen.)
2,1 and I′
Now that we have deﬁned the history tree, we will
describe the incremental proofs generated by the logger.
Figure 4 abstractly illustrates a pruned tree equivalent to
the proof given in Figure 3, representing an incremental
proof from C2 to C6. Dots represent unfrozen nodes
whose hashes are computed from their children. Open
circles represent frozen nodes which are not included in
the proof because their hashes can be recomputed from
their children. Solid discs represent frozen nodes whose
inclusion is necessary by being leaves or stubs. Grayed
out nodes represent elided subtrees that are not included
in the pruned tree. From this pruned tree and equations
(1)-(4) (shown in Figure 5) we can compute C6 = A6
0,3
and a commitment from an earlier version-2 view, A2
0,3.
This pruned tree is incrementally built from a proof