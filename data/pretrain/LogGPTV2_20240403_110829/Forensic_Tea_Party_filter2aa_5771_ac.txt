    }
```
The `GetHashX` methods get the hash from the `TeaParty` driver that we saw earlier. The following function handles it:
```c
void message_handler(undefined8 param_1,longlong param_2)
{
  int iVar1;
  undefined4 *puVar2;
  void *_Src;
  undefined4 uVar3;
  undefined4 uVar4;
  undefined4 uVar5;
  uint hash_idx;
  size_t _Size;
  longlong lVar6;
  undefined auStack152 [32];
  undefined4 reg_key_out [2];
  undefined local_70 [8];
  undefined4 uStack104;
  undefined4 uStack100;
  undefined local_60 [8];
  undefined4 uStack88;
  undefined4 uStack84;
  undefined local_50 [8];
  undefined4 uStack72;
  undefined4 uStack68;
  undefined local_40 [8];
  undefined4 uStack56;
  undefined4 uStack52;
  undefined4 reg_key;
  ulonglong local_10;
  uint i;
  undefined (*p_flag) [16];
  local_10 = DAT_00013000 ^ (ulonglong)auStack152;
  lVar6 = *(longlong *)(param_2 + 0xb8);
  reg_key_out[0] = 0;
  _local_50 = ZEXT816(0);
  _local_40 = ZEXT816(0);
  _local_70 = ZEXT816(0);
  _local_60 = ZEXT816(0);
  read_reg_key(L"\\Registry\\Machine\\SOFTWARE\\AliceInWonderlandTeaParty",L"CareForTea",
               (undefined *)reg_key_out);
  p_flag = g_flag;
  iVar1 = *(int *)(lVar6 + 0x18);
  reg_key = reg_key_out[0];
    if (iVar1 == 0x222000) {
    _Src = *(void **)(param_2 + 0x18);
    DbgPrint(_Src);
    _Size = 0xffffffffffffffff;
    _g_passcode = ZEXT816(0);
    _DAT_00013068 = ZEXT816(0);
    do {
      _Size = _Size + 1;
    } while (*(char *)((longlong)_Src + _Size) != '\0');
    memmove(&g_passcode,_Src,_Size);
    g_flag = decrypt_flag(&g_encrypted_flag,0x30);
    DbgPrint(g_flag);
  }
  else if (iVar1 == 0x222004) {
    puVar2 = *(undefined4 **)(param_2 + 0x18);
    *(undefined4 *)(lVar6 + 8) = 8;
    uVar3 = *(undefined4 *)(*p_flag + 4);
    uVar4 = *(undefined4 *)(*p_flag + 8);
    uVar5 = *(undefined4 *)(*p_flag + 0xc);
    *puVar2 = *(undefined4 *)*p_flag;
    puVar2[1] = uVar3;
    puVar2[2] = uVar4;
    puVar2[3] = uVar5;
    uVar3 = *(undefined4 *)(p_flag[1] + 4);
    uVar4 = *(undefined4 *)(p_flag[1] + 8);
    uVar5 = *(undefined4 *)(p_flag[1] + 0xc);
    puVar2[4] = *(undefined4 *)p_flag[1];
    puVar2[5] = uVar3;
    puVar2[6] = uVar4;
    puVar2[7] = uVar5;
    uVar3 = *(undefined4 *)(p_flag[2] + 4);
    uVar4 = *(undefined4 *)(p_flag[2] + 8);
    uVar5 = *(undefined4 *)(p_flag[2] + 0xc);
    puVar2[8] = *(undefined4 *)p_flag[2];
    puVar2[9] = uVar3;
    puVar2[10] = uVar4;
    puVar2[0xb] = uVar5;
    ExFreePoolWithTag(p_flag,0xaabbccdd);
  }
  else {
    if (iVar1 == 0x222008) {
      p_flag = *(undefined (**) [16])(param_2 + 0x18);
      *(undefined4 *)(lVar6 + 8) = 0x20;
      lVar6 = 0;
      i = 0;
      do {
        hash_idx = i + 1;
        local_50[lVar6] = *(byte *)((longlong)&reg_key + (ulonglong)(i & 3)) ^ (&g_hash1)[lVar6];
        lVar6 = lVar6 + 1;
        i = hash_idx;
      } while ((int)hash_idx >> from pwn import *
>>> xor(p32(0xa11ceb0b), b'\x39\xd3\x2a\x98\x3e\xdf\x7a\xc3\x6e\xda\x25\xc0\x3f\x8f\x79\x99\x3d\xde\x2b\x99\x32\x8d\x78\xc7\x3c\xde\x7f\xc2\x6a\xde\x79\xc0')
b'286954fbe19a4de865789fdf75cca5ea'
>>> xor(p32(0xa11ceb0b), b'\x32\x89\x2d\xc7\x3a\xd3\x7e\xc2\x32\x8e\x29\x94\x3d\xd2\x7a\xc3\x3a\xdd\x2a\xc0\x39\xd9\x7f\xc0\x3d\x8e\x7e\x92\x38\xdc\x7d\x95')
b'9b1f18bc9e5569fb166a22ca6eb337a4'
```
During the CTF itself, we were just lucky and skipped the whole thing by searching for MD5 hashes in the memory:
```console
┌──(user@kali)-[~/CTFs/intent/FTP]
└─$ vol -f $memdump windows.memmap --dump --pid 4484
┌──(user@kali)-[~/CTFs/intent/FTP]
└─$ strings -n 32 pid.4484.dmp | grep -iP '^[0-9a-f]+$' | head
286954fbe19a4de865789fdf75cca5ea
286954fbe19a4de865789fdf75cca5ea
9b1f18bc9e5569fb166a22ca6eb337a4
286954fbe19a4de865789fdf75cca5ea
9b1f18bc9e5569fb166a22ca6eb337a4
286954fbe19a4de865789fdf75cca5ea
9b1f18bc9e5569fb166a22ca6eb337a4
286954fbe19a4de865789fdf75cca5ea
9b1f18bc9e5569fb166a22ca6eb337a4
286954fbe19a4de865789fdf75cca5ea
```
Now that we have the hashes, we use a reverse hash lookup service such as [CrackStation](https://crackstation.net/) to get the original input to the hash function. For `286954fbe19a4de865789fdf75cca5ea` it's `whothefuckisalice`. The second hash wasn't cracked but we just need one.
Once we have the correct passcode, the program calls `GetFlag`:
```csharp
private static string GetFlag(string passcode)
{
    IntPtr fileA = TeaParty.TeaParty.CreateFileA("\\\\.\\TeaParty", 1073741824U, 2U, IntPtr.Zero, 3U, 0U, IntPtr.Zero);
    IntPtr num1 = Marshal.AllocHGlobal(512);
    int lpBytesReturned = 0;
    IntPtr num2 = Marshal.AllocHGlobal(passcode.Length + 1);
    Marshal.Copy(Encoding.ASCII.GetBytes(passcode + "\0"), 0, num2, passcode.Length + 1);
    bool flag = TeaParty.TeaParty.DeviceIoControl(fileA, 2236416U, num2, (uint) (passcode.Length + 1), IntPtr.Zero, 0U, out lpBytesReturned, IntPtr.Zero);
    flag = TeaParty.TeaParty.DeviceIoControl(fileA, 2236420U, IntPtr.Zero, 0U, num1, 512U, out lpBytesReturned, IntPtr.Zero);
    byte[] numArray = new byte[lpBytesReturned];
    Marshal.Copy(num1, numArray, 0, lpBytesReturned);
    int num3 = (int) MessageBox.Show(Encoding.ASCII.GetString(numArray));
    Marshal.FreeHGlobal(num1);
    Marshal.FreeHGlobal(num2);
    TeaParty.TeaParty.CloseHandle(fileA);
    return Encoding.ASCII.GetString(numArray);
}
```
This sends us back to the driver, to the following section:
```c
  if (iVar1 == 0x222000) {
    _Src = *(void **)(param_2 + 0x18);
    DbgPrint(_Src);
    _Size = 0xffffffffffffffff;
    _g_passcode = ZEXT816(0);
    _DAT_00013068 = ZEXT816(0);
    do {
      _Size = _Size + 1;
    } while (*(char *)((longlong)_Src + _Size) != '\0');
    memmove(&g_passcode,_Src,_Size);
    g_flag = decrypt_flag(&g_encrypted_flag,0x30);
    DbgPrint(g_flag);
  }
```
The actual decryption happens here:
```c
undefined (*) [16] decrypt_flag(PUCHAR encrypted_buffer,ULONG encrypted_buffer_size)
{
  NTSTATUS NVar1;
  undefined (*pbKeyObject) [16];