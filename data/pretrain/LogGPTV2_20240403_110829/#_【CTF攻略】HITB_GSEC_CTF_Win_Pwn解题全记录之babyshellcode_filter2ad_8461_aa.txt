# 【CTF攻略】HITB GSEC CTF Win Pwn解题全记录之babyshellcode
|
##### 译文声明
本文是翻译文章，文章来源：whereisk0shl.top
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
**前言**
****
这次在HITB GSEC CTF打酱油，也有了一次学习的机会，这次CTF出现了两道Windows
pwn，我个人感觉质量非常高，因为题目出了本身无脑洞的漏洞之外，更多的让选手们专注于对Windows系统的防护机制（seh）原理的研究，再配合漏洞来完成对机制的突破和利用，在我做完之后重新整理整个解题过程，略微有一些窒息的感觉，感觉整个利用链环环相扣，十分精彩，不得不膜一下Atum大佬，题目出的真的好！对于菜鸟来说，是一次非常好的锻炼机会。
因此我认真总结了我们从拿到题目，多种尝试，不断改进exp，到最后获得shell的整个过程，而不仅仅是针对题目，希望能对同样奋斗在win
pwn的小伙伴有一些帮助。
**Babyshellcode Writeup with SEH and SafeSEH From Windows xp to Windows 10**
****
拿到题目的时候，我们发现程序存在一个很明显的栈溢出，而且题目给的一些条件非常好，在栈结构中存在SEH链，在常规的利用SEH链进行栈溢出从而控制eip的过程中，我们会使用栈溢出覆盖seh
handler，这是一个seh chain中的一个指针，它指向了异常处理函数。
但是程序中开启了safeseh，也就是说，单纯的通过覆盖seh handler跳转是不够的，我们首先需要bypass safeseh。
OK，我们来看题目。
在题目主函数中，首先在 **scmgr.dll** 中会初始化存放shellcode的堆，调用的是 **VirtualAlloc**
函数，并且会打印堆地址。
    v0 = VirtualAlloc(0, 20 * SystemInfo.dwPageSize, 0x1000u, 0x40u);//注意这里的flprotect是0x40
    dword_1000338C = (int)v0;
    if ( v0 )
    {
      sub_10001020("Global memory alloc at %pn", (char)v0);//打印堆地址
      result = dword_1000338C;
      dword_10003388 = dword_1000338C;
    }
这里 **VirtualAlloc** 中有一个参数是flprotect，值是0x40，表示拥有RWE权限。
    #define PAGE_EXECUTE_READWRITE 0x40
这个堆地址会用于存放shellcode，在CreateShellcode函数中会将shellcode拷贝到Memory空间里。
      v4 = 0;//v4在最开始拷贝的时候值是0
      ⋯⋯
      v11 = (int)*(&Memory + v4);//将Memory地址指针交给v11
      v13 = getchar();
      v14 = 0;
      if ( v12 )
      {
        do
        {
          *(_BYTE *)(v14++ + v15) = v13;//为Memory赋值
          v13 = getchar();
        }
        while ( v14 != v12 );
        v4 = v16;
      }
执行结束之后可以看到shellcode已经被拷贝到目标空间中。
随后执行runshellcode指令的时候，会调用“虚函数”，这里用引号表示，其实并不是真正的虚函数，只是虚函数的一种常见调用方法（做了CFG
check，这里有个小插曲），实际上调用的是 **VirtualAlloc** 出来的堆的地址。
        v4 = *(void (**)(void))(v1 + 4);
        __guard_check_icall_fptr(*(_DWORD *)(v1 + 4));
        v4();
可以看到这里有个CFG
check，之前我们一直以为环境是Win7，在Win7里CFG没有实装，这个在我之前的一篇IE11浏览器漏洞的文章中也提到过（[https://whereisk0shl.top/cve_2017_0037_ie11&edge_type_confusion.html](https://whereisk0shl.top/cve_2017_0037_ie11&edge_type_confusion.html)），因此这个Check是没用的，但是后来得知系统是Win10（这个后面会提到），这里会检查指针是否合法，这里无论如何都会合法，因为v1+4位置的值控制不了，这里就是指向堆地址。
这里跳转到堆地址后会由于shellcode头部4字节被修改，导致进入堆地址后是无效的汇编指令。
      byte_405448 = 1;
      puts("Hey, Welcome to shellcode test system!");
        if ( byte_405448 )
        {
          v3 = *(_DWORD **)(v1 + 4);
          memcpy(&Dst, *(const void **)(v1 + 4), *(_DWORD *)(v1 + 8));//这里没有对长度进行控制，造成栈溢出
          *v3 = -1;
        }
byte_405448是一个全局变量 **is_guard**
，它在runshellcode里决定了存放shellcode堆指针指向的shellcode前4字节是否改成0xffffffff，这里byte_405448的值是1，因此头部会被修改，而我们也必须进入这里，只有这里才能造成栈溢出。
    0:000> g
    Breakpoint 1 hit
    eax=002bf7a4 ebx=00000000 ecx=00000000 edx=68bc1100 esi=000e0000 edi=0048e430
    eip=00a113f3 esp=002bf794 ebp=002bf824 iopl=0         nv up ei pl nz ac po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000212
    babyshellcode+0x13f3:
    00a113f3 c706ffffffff    mov     dword ptr [esi],0FFFFFFFFh ds:0023:000e0000=61616161//shellcode头部被修改前正常
    0:000> dd e0000 l1
    000e0000  61616161 
    0:000> p
    eax=002bf7a4 ebx=00000000 ecx=00000000 edx=68bc1100 esi=000e0000 edi=0048e430
    eip=00a113f9 esp=002bf794 ebp=002bf824 iopl=0         nv up ei pl nz ac po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000212
    babyshellcode+0x13f9:
    00a113f9 8b7704          mov     esi,dword ptr [edi+4] ds:0023:0048e434=000e0000
    0:000> dd e0000 l1//头部被修改成0xffffffff
    000e0000  ffffffff
随后我们跳转到头部执行，由于指令异常进入异常处理模块。
    0:000> p
    eax=002bf7a4 ebx=00000000 ecx=000e0000 edx=68bc1100 esi=000e0000 edi=0048e430
    eip=00a11404 esp=002bf794 ebp=002bf824 iopl=0         nv up ei pl nz ac po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000212
    babyshellcode+0x1404:
    00a11404 ffd6            call    esi {000e0000}//跳转到堆
    0:000> t
    eax=002bf7a4 ebx=00000000 ecx=000e0000 edx=68bc1100 esi=000e0000 edi=0048e430
    eip=000e0000 esp=002bf790 ebp=002bf824 iopl=0         nv up ei pl nz ac po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000212
    000e0000 ff              ???//异常指令
    0:000> p//进入异常处理模块
    (20f90.20f9c): Illegal instruction - code c000001d (first chance)
    eax=002bf7a4 ebx=00000000 ecx=000e0000 edx=68bc1100 esi=000e0000 edi=0048e430
    eip=770b6bc9 esp=002bf340 ebp=002bf824 iopl=0         nv up ei pl nz ac po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000212
    ntdll!KiUserExceptionDispatcher+0x1:
    770b6bc9 8b4c2404        mov     ecx,dword ptr [esp+4] ss:0023:002bf344=002bf35c
利用SEH是栈溢出里常见的一种利用方法，在没有SafeSEH和SEHOP的情况下，可以利用seh里一个特殊的结构seh
handler，通过覆盖它来完成eip/rip的控制，它指向的是异常处理函数，而加入了safeseh之后，会对sehhandler进行check，检查它是否可信，不可信的话返回0，则不会跳转到seh
handler。而这个safeseh的check在ntdll的RtlIsValidHandler函数中，几年前Alex就发了关于这个函数的解读，现在伪代码遍地都是了。
    BOOL RtlIsValidHandler(handler)
    {
    if (handler is in an image)//step 1 
    {
             // 在加载模块的进程空间
    if (image has the IMAGE_DLLCHARACTERISTICS_NO_SEH flag set)
        return FALSE; // 该标志设置，忽略异常处理，直接返回FALSE
    if (image has a SafeSEH table) // 是否含有SEH表
        if (handler found in the table)
            return TRUE; // 异常处理handle在表中，返回TRUE
        else
            return FALSE; // 异常处理handle不在表中，返回FALSE
    if (image is a .NET assembly with the ILonly flag set)
        return FALSE; // .NET 返回FALSE
    // fall through
    }
    if (handler is on a non-executable page)//step 2
    {
             // handle在不可执行页上面
        if (ExecuteDispatchEnable bit set in the process flags)
            return TRUE; // DEP关闭，返回TRUE；否则抛出异常
        else
            raise ACCESS_VIOLATION; // enforce DEP even if we have no hardware NX
    }
    if (handler is not in an image)//step 3
    {
             // 在加载模块内存之外，并且是可执行页
        if (ImageDispatchEnable bit set in the process flags)
            return TRUE; // 允许在加载模块内存空间外执行，返回验证成功
        else
            return FALSE; // don't allow handlers outside of images
    }
    // everything else is allowed
    return TRUE;
    }
首先我们想到的是利用堆指针来bypass
safeseh，正好这个堆地址指向的shellcode，但是由于头部四字节呗修改成了0xffffffff，因此我们只需要覆盖seh handler为heap
address＋4，然后把shellcode跳过开头4字节编码，头4字节放任意字符串（反正会被编码成0xffffffff），然后后面放shellcode的内容，应该就可以达到利用了（事实证明我too
young too naive了，这个方法在win xp下可以用。）