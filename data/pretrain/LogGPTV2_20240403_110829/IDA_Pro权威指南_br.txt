➋    a = funcs.get_next_area(f->startEA);  
   }
在这个例子中，get_next_area
 成员函数（➊和➋）用于重复为 funcs
 控制块中的每一个区域获得索引值。通过向 getn_area
 成员函数提供每个索引值（➌），可以获得一个指向每个相关的func_t
 区域的指针。SDK 中声明了几个全局 areacb_t变量，包括 segs
 全局变量，它是一个区域控制块，其中包含二进制文件中每节的 segment_t
 指针。
2. 枚举结构体成员
在SDK 中，使用 struc_t
 类的功能可以模拟栈帧。代码清单 16-6 中的例子利用结构体成员迭代来打印一个栈帧的内容。
代码清单 16-6 枚举栈帧成员
func_t *func = get_func(get_screen_ea());  //get function at cursor location  
msg("Local variable size is %d\n", func->frsize);  
msg("Saved regs size is %d\n", func->frregs);  
struc_t *frame = get_frame(func);          //get pointer to stack frame  
if (frame) {  
   size_t ret_addr = func->frsize + func->frregs;  //offset to return address  
   for (size_t m = 0; m memqty; m++) {    //loop through members  
      char fname[1024];  
      get_member_name(frame->members[m].id, fname, sizeof(fname));  
      if (frame->members[m].soff frsize) {  
         msg("Local variable ");  
      }  
      else if (frame->members[m].soff > ret_addr) {  
         msg("Parameter ");  
      }  
      msg("%s is at frame offset %x\n", fname, frame->members[m].soff);  
      if (frame->members[m].soff == ret_addr) {  
         msg("%s is the saved return address\n", fname);  
      }  
   }  
} 
这个例子使用从一个函数的 func_t
 对象及其相关 struc_t
 类（代表该函数的栈帧）中获得的信息，概括介绍该函数的栈帧。frsize
 和frregs
 字段分别指定栈帧局部变量部分的大小，以及供已保存寄存器专用的字节的数量。在局部变量和已保存寄存器后面的帧中，可以找到已保存的返回地址。在帧中，memqty
 字段指定帧结构中已定义成员的数量，它也对应于 members
 数组的大小。这个例子使用一个循环检索每个成员的名称，并根据某成员在帧结构中的起始偏移量（soff
 ），确定该成员是一个局部变量还是一个参数。
3. 枚举交叉引用
在第15 章中提到过，我们可以使用 IDC 脚本枚举交叉引用。SDK 也提供相同的功能，只是它实现这种功能的方式稍有不同。现在我们回到前面列举对某个函数的所有调用的例子（见代码清单15-4 ）。下面的函数几乎可以实现相同的功能。
 void list_callers(char *bad_func) {  
   char name_buf[MAXNAMELEN];   
   ea_t func = get_name_ea(BADADDR, bad_func);  
   if (func == BADADDR) {  
      warning("Sorry, %s not found in database", bad_func);  
   }  
   else {  
      for (ea_t addr = get_first_cref_to(func); addr != BADADDR;  
           addr = get_next_cref_to(func, addr)) {  
         char *name = get_func_name(addr, name_buf, sizeof(name_buf));  
         if (name) {  
            msg("%s is called from 0x%x in %s\n", bad_func, addr, name);  
         }  
         else {  
            msg("%s is called from 0x%x\n", bad_func, addr);  
         }  
      }  
   }  
}
之所以说这个函数几乎可以实现相同的功能，是因为你没有办法确定循环的每次迭代返回的交叉引用的类型（如前所述，SDK 中没有与 IDC 的XrefType
 对应的函数）。在这种情况下，我们应进行验证：对给定函数的交叉引用实际上是调用（fl_CN
 或fl_CF
 ）交叉引用。
如果你需要确定 SDK 中的一个交叉引用的类型，你必须使用 xrefblk_t
 结构体提供的另一种迭代交叉引用的方法，xref.hpp 文件描述了这个结构体。xrefblk_t
 结构体的基本布局如下所示。（请参阅 xref.hpp 文件了解详情。）
   struct xrefblk_t {  
     ea_t from;     // the referencing address - filled by first_to(),next_to()  
     ea_t to;       // the referenced address - filled by first_from(), next_from()  
     uchar iscode;  // 1-is code reference; 0-is data reference  
     uchar type;    // type of the last returned reference  
     uchar user;    // 1-is user defined xref, 0-defined by ida  
     //fill the "to" field with the first address to which "from" refers.  
➊   bool first_from(ea_t from, int flags);  
     //fill the "to" field with the next address to which "from" refers.  
     //This function assumes a previous call to first_from.  
➌   bool next_from(void);  
     //fill the "from" field with the first address that refers to "to".
➋   bool first_to(ea_t to,int flags);
    //fill the "from" field with the next address that refers to "to".  
    //This function assumes a previous call to first_to.  
➍  bool next_to(void);  
  }; 
xrefblk_t
 的成员函数用于初始化结构体（➊和➋）并进行迭代（➌和➍），而数据成员则用于访问与检索到的最后一个交叉引用有关的信息。first_from
 和first_to
 函数需要的 flags
 值规定应返回何种交叉引用类型。flags
 参数的合法值如下（取自 xref.hpp 文件）：
#define XREF_ALL        0x00            // return all references  
#define XREF_FAR        0x01            // don't return ordinary flow xrefs  
#define XREF_DATA       0x02            // return data references only
需要注意的是，没有哪个标志值将返回的引用仅限制为代码交叉引用。如果对代码交叉引用感兴趣，你必须将xrefblk_t type
 字段与特定的交叉引用类型（如fl_JN
 ）相比较，或检查 iscode
 字段，以确定最后返回的交叉引用是否为代码交叉引用。
下面list_callers
 函数的修订版本说明了一个 xrefblk_t
 迭代结构体的用法：
     void list_callers(char *bad_func) {  
       char name_buf[MAXNAMELEN];  
       ea_t func = get_name_ea(BADADDR, bad_func);  
       if (func == BADADDR) {  
       warning("Sorry, %s not found in database", bad_func);  
     }  
     else {  
       xrefblk_t xr;  
       for (bool ok = xr.first_to(func, XREF_ALL); ok; ok = xr.next_to()) {  
➊        if (xr.type != fl_CN && xr.type != fl_CF) continue;  
         char *name = get_func_name(xr.from, name_buf, sizeof(name_buf));  
         if (name) {  
            msg("%s is called from 0x%x in %s\n", bad_func, xr.from, name);  
         }  
         else {  
            msg("%s is called from 0x%x\n", bad_func, xr.from);  
         }  
       }  
     }  
   }
现在，我们使用 xrefblk_t
 结构体可以检查迭代器返回的每一个交叉引用的类型（➊），并确定它是否对我们有用。在这个例子中，我们完全忽略了任何与函数调用无关的交叉引用。我们并没有使用 xrefblk_t
 的iscode
 成员，因为它不仅可以确定调用交叉引用，还可以确定跳转和普通流交叉引用。因此，仅使用 iscode
 并不能保证当前的交叉引用与一个函数调用有关。
16.3 小结
本章中描述的函数和数据结构仅仅是 IDA API 的冰山一角。对于我们讨论的每一类函数，还有更多API 函数可以执行更加特殊的任务，与使用 IDC 脚本相比，它们能够对各种数据库元素进行更加细化的控制。下面几章将详细介绍如何构建插件模块、加载器模块和处理器模块，并继续深入讨论 SDK 的功能。
第17章 IDA 插件体系结构
在本书接下来的几章中，我们将介绍可以使用 IDA SDK 创建的各种模块，还将介绍一些新特性（自从 IDA 5.7 以来），这些特性允许使用一种IDA 脚本语言来开发相同类型的模块。无论你是否想要建立自己的插件，了解插件的基础知识将大大提高你使用 IDA 的效率，这是因为，绝大多数为 IDA 开发的第三方软件都是以插件形式发布的。本章将开始学习 IDA 模块，讨论 IDA 插件的用途，以及如何创建、安装和配置插件。
可以这样说：插件是经过编译的、功能更加强大的 IDC 脚本。插件通常与热键和菜单项关联，并且只有在数据库打开后才能使用。插件可能是通用的，可以处理各种二进制文件或者供各种处理器体系结构使用。插件也可能非常专门化，仅供某个特殊的文件或处理器使用。由于是被编译的模块，无论是哪一种情况，插件都能够完全访问 IDA API 。同时，与仅仅使用脚本相比，插件还能够执行更加复杂的任务。
17.1 编写插件
所有IDA 模块（包括插件）都以适用于执行插件的平台的共享库组件实现。在 IDA 的模块化体系结构下，模块不需要导出任何函数。而每个模块必须导出某个特定类的一个变量。就插件而言，这个类叫做 plugin_t
 ，它在SDK 的loader.hpp 文件中定义。
IDA API 发展历程
自SDK 4.9 以来，Hex-Rays 一直努力在发布新的 IDA 版本时避免更改现有的 API 函数。因此，旧版 IDA 中的二进制插件通常可以直接复制到新版 IDA 中，并且能够正常运行。然而，每个新版本都会引入新函数和新选项来利用 IDA 不断扩展的功能，因此 IDA API 的规模也随之不断增长。随着 SDK 不断发展，Hex-Rays 已废弃了一些很少使用的 API 函数。在废弃某个函数（或任何其他符号）时，Hex-Rays 会将其移至 NO_OBSOLETE_FUNCS
 测试宏包含的代码块内。如果你希望确保你的插件（或其他模块）没有使用任何废弃的函数，在包括任何 SDK 头文件之前，你应当定义 NO_OBSOLETE_FUNCS。