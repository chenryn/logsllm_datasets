• From these frequencies we derive the probability that
is a correct part of the
More precisely, for any of the potential N beginnings of
an AES round, we compute the sets Ki of partial key column
i ∈
∗
candidates for i = 0, . . . , 3, and count how often each k
i ∈ Ki. We denote this frequency by
{0, 1}4l also satisﬁes k
∗
∗
i ). Because of the 31 last monitored memory accesses,
fi(k
we have enough observations to complete (4) for any of
these N offsets.
i is an element of Ki at least zk∗
∗
One can now see that k
M. For each of the remaining N − zk∗
M
∗
times, if k
i is the truncated part of the correct ith column
of a round key in zk∗
different rounds. Put differently, we
i ) ≥ zk∗
∗
have fi(k
M
i occurs in Ki
∗
wrong starting points we may assume that k
with probability pl. This is, because solving (4) for wrong
values of x∗
leak any information about
should not
the correct key, even if x∗
i , y∗
are not fully random, but
overlapping parts of correct values from subsequent rounds.
In our experiments this assumption proved to be sufﬁciently
satisﬁed for our purposes.
i , y∗
i
i
i
i
i
i
i
i
i
i
Denoting the binomial distribution for n samples and
probability p by Binomial(n, p), we can now describe the
∗
properties of fi(k
i ) as follows:
M
M, pl) + zk∗
i ) ∼ Binomial(N − zk∗
∗
fi(k
∗
E[fi(k
i )] = N pl + zk∗
i )] = (N − zk∗
∗
V[fi(k
From these equations one can see that every k
M (1 − pl)
M )pl(1 − pl) .
∗
i occurring
in a round key causes a peak in the frequency table. We
can now measure the difference of these peaks and the large
∗
ﬂoor of candidates k
i which do not occur in a round key.
This difference grows linearly in the number of observed
encryptions M. On the other hand, the standard deviation
∗
i )] only grows like the square root
σ[fi(k
of M (remember that N = 160M). Thus, the higher the
number of encryptions, the better the peaks can be separated
from the ﬂoor.
i )] = (cid:112)V[fi(k
∗
i ) and the Bayes Theorem [32], [33] it is
∗
now possible to compute a posteriori probabilities qi(k
i )
∗
that a given k
i really occurred in the key schedule of AES.
Using the fi(k
∗
C. Key Search
In the previous section we assigned probabilities to partial
key column candidates, such that only those occurring in the
495
correct key schedule have a high probability while all others
do not. Before describing our key search heuristic, we now
show how these probabilities can be used to assign scores
to sets of partial key column candidates as well.
Let therefore S be a set of partial key column candidates,
and let each element in S be tagged with the position of the
key schedule it is a candidate for. The score of S is then
given by the mean log probability of the elements in S:
(cid:88)
i ∈S
k∗
h(S) =
1
|S|
log qi(k
∗
i ) .
We now search for the correct unknown key. Loosely
speaking, our technique outputs the K for which the mean
log probability over all partial key columns in the whole key
schedule is maximal. The algorithm stated below starts by
ﬁxing one entry of the key schedule which has a good score.
It then adds another element to obtain a larger fraction of the
whole schedule, which in turn forces one to ﬁx even more
entries, cf. Figure 2. Depending on the score of the resulting
set it repeats this step or postpones the further investigation
of the set and continues with another one with a higher score.
This is repeated until a full key schedule with a high score
is found.
3
3
∗
∗
3
∗
∗
3
3
2
∗} with a candidate for ki+1
∗} by (cid:93). All the resulting sets {ki
• The topmost element of the heap, {ki
3
∗
• We start by searching for partial key column candidates
for ki
, i.e., for the last column of the ith round key.
3
Therefore, we initialize a heap containing singletons for
3, sorted by their score h({k
3}).
∗
∗
all possible values of k
∗} is removed,
and combined with all partial key column candidates
∗
3, interpreted as candidates for ki+1
, i.e., as partial
k
key column candidates for the last column of the
(i + 1)st round’s key. As can be seen from Figure 2,
combining {ki
also
implies ﬁxing ki+1
because of the relation of round
keys. We denote this operation of adding a partial key
column candidate ki+1
and all associated values to
∗} are
{ki
added to the heap, according to their scores.
This step is applied analogously whenever the topmost
element of the heap does not at the same time contain
candidates for ki
• If the topmost element S of the heap already contains
3
a candidate for ki+3
, we compute the combinations
S(cid:93){ki+4
as before.
However, because of the nonlinear structure of the
key schedule of AES, we are now able to put into
relation ti+3∗
, and check whether the
nonlinearity can be solved for any i, i.e., for any ﬁxed
position of S in Figure 2 (there, we indicated the case
∗},
i = 2). If this is not the case, we discard S (cid:93) {ki+4
otherwise we add it to the heap.
We proceed analogously for ki+5
∗} for all possible choices of ki+4
with parts of ki+3
∗}(cid:93){ki+1
and ki+3
∗
∗
∗
∗
∗
.
3
3
.
3
3
3
3
3
3
3
• Let now the topmost element of the heap S already
∗
∗
3
.
up to ki+5
contain candidates for ki
3
From Figure 2 we can see that given four kj
i in a line
allows to ﬁll the complete key schedule. Given S, we
already ﬁxed 4· 4· l = 80 bits of such a “line”. Further,
solving the nonlinearities in the key schedule yields
24 more bits. That is, only 24 bits of the potential key
remain unknown. We now perform a brute-force search
over these 224 possibilities at each possible position of
S in the key schedule.
For all possible completions of ki
, we
3
compute the whole key schedule, i.e., we compute kj
i
for i = 0, . . . , 3, j = 1, . . . , 9 and compute the score
for {kj
: i = 0, . . . , 3, j = 0, . . . , 9}. We store the key
corresponding to the set with the highest score, together
with its score.
This step can be implemented efﬁciently because the
solved nonlinearity typically only has 1 solution. In the
rare case that there are more solutions, the above step
is performed for either of them.
, . . . , ki+3
∗
∗
∗
3
i
• We now continue processing the heap until its topmost
element has a smaller score than the stored full key. In
this case, we output the stored key and quit.
Typically the output of our algorithm is the key sched-
ule with a maximum score, as usually the score of a
set decreases when extending it. This is because even
when adding a candidate with very high score to some
set of partial key column candidates, most often other
parts with worse scores also have to be added due to
the structure of the key schedule.
We remark that the symmetry of the key schedule can be
used to increase the efﬁciency when actually implementing
our attack in software. For instance, a triangle S with some
ﬁxed “base line” has the same score h(S) as the triangle
ﬂipped vertically. For this reason, the score only has to be
computed for one of these triangles in the ﬁrst two steps of
our attack.
IV. ATTACKING AES IN THE REAL WORLD
In the previous section we showed how the full secret
key can efﬁciently be recovered under the assumption that
the cache can be monitored perfectly. That is, we assumed
that an attacker is able to observe any single cache access
performed by the victim process. We now show how our
attack can be carried out
in the real world where this
idealization is no longer satisﬁed. We therefore ﬁrst describe
the way the task scheduler of modern Linux kernel works,
and explain how its behavior can be exploited for our
purposes. We then brieﬂy recapitulate the concept of neural
networks, and show how they can be used by an attacker to
clean inaccurate measurements.
496
≫
s
≫
s 36
⊕
k0
0
t0
⊕
k0
1
01
⊕
k1
0
⊕
k0
2
≫
s 02
⊕
t1
⊕
k1
1
⊕
k0
3
k2
0
⊕
k1
2
⊕
≫
s
t2
⊕
k2
1
⊕
k1
3
04
⊕
k3
0
⊕
k2
2
⊕
≫
s
t3
⊕
k3
1
⊕
k2
3
08
⊕
k4
0
⊕
k3
2
⊕
≫