# A Measurement Study of Scheduler-Based Attacks in 3G Wireless Networks

**Authors:**
- Soshant Bali, University of Kansas, sbali@ittc.ku.edu
- Sridhar Machiraju, Sprint ATL, sridhar.machiraju@sprint.com
- Hui Zang, Sprint ATL, hui.zang@sprint.com
- Victor Frost, University of Kansas, frost@ittc.ku.edu

## Abstract
High-speed (3G) wide-area wireless networks have seen rapid proliferation, yet their robustness and security properties remain largely unexplored. This paper takes the first steps towards understanding these properties by examining the Proportional Fair (PF) scheduling algorithm, which is widely used for downlink scheduling in 3G networks. We find that the fairness mechanism of PF can be easily subverted by a malicious user to monopolize the wireless channel, thereby starving other users. Through extensive experiments on both commercial and laboratory-based CDMA networks, we demonstrate this vulnerability and quantify its impact. Our results show that delay jitter can increase by up to 1 second and TCP throughput can decrease by 25-30% due to a single malicious user. Based on these findings, we advocate for the use of more robust scheduling algorithms and outline one such potential solution.

## 1. Introduction
The mobile Internet is one of the fastest-growing segments of the Internet, driven by the rapid adoption of high-speed (3G) wide-area wireless networks. The two primary 3G standards are Evolution Data Optimized (EV-DO) and High-Speed Downlink Packet Access (HSDPA). As the use of these networks for Internet access increases, it is crucial that they are well-engineered, robust, and secure. While significant work has been done on designing these networks and their algorithms, particularly the wireless scheduling algorithms, most prior research has focused on improving system performance under cooperative scenarios without considering malicious users.

In this paper, we make initial steps towards understanding the robustness of 3G networks from a security perspective. We focus on the scheduling algorithm, as it plays a critical role in determining system performance and user experience. Previous studies have examined vulnerabilities associated with FIFO schedulers in wired IP networks. Since most 3G networks use the Proportional Fair (PF) algorithm for downlink scheduling, we concentrate on this algorithm. PF is widely deployed because it is simple and increases system throughput by being channel-aware, scheduling data transmission to users with good wireless conditions over those experiencing fading. Under general conditions, PF maximizes the product of throughputs received by all users and is fair in the long term when all users have identical and independent fading characteristics.

Our main finding is that the fairness-ensuring mechanism of PF can be easily corrupted by a malicious user to monopolize the wireless channel, thereby starving other users. Such scheduler-based attacks are possible because PF does not distinguish between users with outstanding data and those without. Using extensive measurements on a commercial CDMA network and a similar laboratory setup, we show that the performance degradation due to such attacks is severe, increasing "jitter" by up to 1 second and causing frequent spurious TCP timeouts. This can increase flow completion times and decrease TCP goodput by up to 30%. Our findings highlight the need to consider security while designing network algorithms, not only for 3G networks but also for future wireless networks.

This paper is organized as follows:
- **Section 2** provides an overview of the PF scheduling algorithm and describes how it can be attacked.
- **Section 3** presents initial experiments on a commercial network and motivates the need for a more controlled experimental environment.
- **Section 4** uses laboratory experiments to quantify the impact of PF-induced attacks on UDP and TCP-based applications and discusses a possible replacement for PF.
- **Section 5** concludes the paper and outlines future work.

## 2. The PF Algorithm and Starvation
In managed wireless networks like 3G, access to the wireless channel is controlled by Base Stations (BSs) to which mobile devices or Access Terminals (ATs) are associated. The Proportional Fair (PF) scheduling algorithm is used to schedule transmissions on the downlink in most 3G networks. In these networks, downlink transmission is slotted, and BSs have per-AT queues. PF determines the AT to transmit to in each time slot based on the current channel conditions reported by each AT.

The inputs to PF are the current channel conditions, specifically the Signal-to-Noise Ratio (SNR), which determines the achievable data rate. For example, in EV-DO systems, there are 10 unique achievable data rates. Let \( n \) be the number of ATs in the system. Denote the achievable data rate reported by AT \( i \) in time slot \( t \) as \( R_i^t \). The exponentially-weighted average rate that user \( i \) has achieved, \( A_i^t \), is given by:

\[
A_i^t = 
\begin{cases} 
(1 - \alpha) A_i^{t-1} + \alpha R_i^t & \text{if slot allocated} \\
(1 - \alpha) A_i^{t-1} & \text{otherwise}
\end{cases}
\]

where \( \alpha \) is typically around 0.001. The slot \( t \) is allocated to the AT with the highest ratio \( \frac{R_i^t}{A_i^{t-1}} \). Under general conditions, PF maximizes the product of per-AT throughputs and ensures long-term fairness if all ATs have identical and independent fading characteristics. However, if different ATs experience non-identical wireless conditions, unequal slot allocation may result in the long term.

Our study shows that a malicious AT can influence the ratio \( \frac{R_i^t}{A_i^{t-1}} \) by receiving data in an on-off manner. If an AT receives no data for several slots, its \( A_i^t \) will slowly reduce and approach zero. When a new packet arrives, the AT's ratio becomes very high, and it is likely to get allocated the slot. This AT continues to be allocated slots until its \( A_i^t \) increases enough, during which all other ATs are starved. Prior work has observed excessive delays with PF, but no prior work has considered on-off traffic or explored how malicious users can exploit it.

## 3. Experimental Setup
We conducted our initial experiments on a commercial EV-DO network in the USA using IBM T42 Thinkpad laptops running Windows XP equipped with commercially available PCMCIA EV-DO cards. The laptops had 2GHz processors and 1GB of main memory. All ATs connected to the same base station and sector. Data to the ATs was sourced from Linux PCs with 2.4GHz processors and 1GB of memory, all on the same subnet and about 10-11 hops away from the ATs.

For our first experiment, we used two ATs: AT1 and AT2. AT1 received a long-lived periodic UDP packet stream consisting of 1500-byte packets at an average rate of 600Kbps. AT2, acting as a malicious AT, received traffic in an on-off pattern, receiving a burst of 250 packets every 6 seconds. We plotted the "jitter" experienced by AT1, calculated as the excess one-way delays over the minimum delay. Well-defined increases in jitter were observed whenever a burst was sent to AT2. In contrast, a base station employing fair queueing would cause almost no increase in jitter as long as the wireless link capacity is not exceeded. These results clearly show that AT1 experiences a significant increase in jitter, varying from 300ms to 1 second.

To better understand and quantify the attack scenarios, we moved to a more controlled laboratory setup. In our laboratory, we used commercially available equipment to recreate the EV-DO network, including the Base Station, Radio Network Controller (RNC), and Packet Data Serving Node (PDSN). The links between the Base Station, RNC, and PDSN were 1Gbps Ethernet links. The Base Station served three sectors, of which we used one. Our ATs and senders were the same as before. We collected tcpdump traces at the senders and ATs. Due to the peculiarities of PPP implementation on Windows XP, the timestamps of received packets were accurate to 16ms, but this did not affect our results. For TCP-based experiments, we used tcptrace to analyze the sender-side traces.

There were three main differences compared to a commercial network:
1. We used lower power levels due to shorter distances and for safety reasons.
2. We could control the number of ATs connected to the base station.
3. The number of hops from the senders to the ATs was only 3, eliminating additional hops and queueing effects on those hops.

Our laboratory setup posed a few challenges, including significant variations in wireless conditions. To address this, we conducted up to 30 runs of each experiment to calculate a good estimate of the required performance metric with a small enough confidence interval. We also interleaved the runs of different parameter settings to ensure they all experienced the same wireless conditions on average. Additionally, ATs became disassociated with the base station after around 12 seconds of inactivity. To prevent this, we used a low-rate background data stream of negligible overhead.

## 4. Experimental Results
### 4.1 UDP-Based Applications
In Figure 2, we plot the results of a laboratory experiment similar to that in Figure 1. We sent a long-lived UDP flow of average rate 600Kbps to AT1 and bursts of 150 packets to AT2 every 6 seconds. The results mirrored the behavior observed in the commercial network, showing large jitter whenever a burst was sent. The variability in results was reduced due to the absence of other ATs and queueing at other hops.

The PF algorithm compares the ratios of all ATs to allocate slots. Intuitively, the jitter of AT1 depends on the value of \( A_1^T \) just before a burst to AT2 starts. This can be analytically derived. The final expression for the jitter \( J \) experienced by AT1, assuming constant achievable data rates \( R_1 \) and \( R_2 \) and moving averages \( A_1^T = \beta_1^T R_1 \) and \( A_2^T = \beta_2^T R_2 \) in time slot \( T \), is given by:

\[
J = \frac{1}{1 + \beta_1^T - \beta_2^T} \log \left( \frac{1}{1 - \alpha} \right)
\]

In Figure 2 (Right), we plot the predicted value of jitter assuming \( R_1 = 1.8 \) Mbps and \( \beta_2^T = 0 \). We compare this with experiments where we vary the rate of AT1's flow from 100Kbps to 2Mbps. The experimental results closely follow the analytically predicted values, and the jitter experienced by AT1 increases almost linearly with the data rate to AT1. For example, an AT1 with a single VoIP application of 100Kbps may experience only 100ms of jitter, while additional concurrent web transfers by this VoIP user would cause larger jitter. An AT receiving a medium-rate video stream of 0.6Mbps could experience a jitter increase of more than 0.5 seconds, severely degrading video quality.

### 4.2 Effect on TCP Flows
We also showed that TCP-based applications are susceptible to PF-induced attacks. In an experiment, we replaced the UDP flow to AT1 with a long-lived TCP transfer of 20MB. We sent an on-off UDP stream to AT2, with each burst consisting of 150 1500-byte packets every 3 seconds, an average rate of 600Kbps. We analyzed sender-side tcpdump traces with tcptrace and plotted the TCP sequence number of the bytes transmitted versus time for the flow to AT1 in Figure 3 (Left). The SYN packet was marked at time 0. The black dots represent transmitted packets, and we observed periodic retransmissions every 3 seconds, corresponding to each burst of the flow to AT2. This demonstrates how a malicious user can easily cause TCP timeouts to other users.

TCP timeouts in the above experiment could be caused by either the buffer overflow or spurious timeouts due to delayed packets. Per-AT buffers in EV-DO base stations are usually 80 to 100KB in size, larger than the default receiver window size of 64KB in Linux and Windows. We verified this using sender-side tcpdump traces. Due to space constraints, we did not explore scenarios involving multiple flows to the same AT and timeouts caused by the resulting congestion.

## 5. Conclusion and Future Work
Our study highlights the vulnerability of the Proportional Fair (PF) scheduling algorithm to malicious attacks, which can lead to significant performance degradation, including increased jitter and reduced TCP throughput. We advocate for the use of more robust scheduling algorithms and outline one such potential solution. Future work will focus on developing and evaluating more secure and robust scheduling algorithms for 3G and future wireless networks.