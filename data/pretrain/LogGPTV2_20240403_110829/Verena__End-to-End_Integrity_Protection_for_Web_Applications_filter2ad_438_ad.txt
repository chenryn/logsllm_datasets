this user belongs.
For each read query, the Verena client ensures that the query
matches the IQP handle it was invoked on. A query matches
an IQP if all of the following conditions hold:
• the query ﬁlters on the same list of ﬁelds as in eq-range
of the IQP or on a preﬁx of these ﬁelds,
• the query performs a subset of operations and aggregates
from “ops” of the IQP, and,
• if the trust context of this IQP is a ﬁeld instead of a ﬁxed
trust context, the query speciﬁes the value for this ﬁeld
(e.g., “patientID: 121” in the query in §IV-D).
When inserting or deleting a document, the Verena client
and server check that the user who inserts this document is a
902902
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:13 UTC from IEEE Xplore.  Restrictions apply. 
Function
declareIDP(url, pubkey)
createAccount(uname, passw, [creator])
lookupUser(uname, [creator])
login(uname, passw)
logout()
createTC(name)
isMember(tc, user)
addMember(tc, user)
removeMember(tc, user)
Explanation
Speciﬁes the url and pubkey of the IDP.
Creates an account for user uname. Must be called by the user when his account is
created or, if a creator user is speciﬁed, by the creator.
Looksup the user uname as created by creator. If the creator is not speciﬁed, Verena
considers the default which is the IDP.
Logs in user uname with the speciﬁed password.
Logs out the currently logged-in user.
Creates a new trust context tc with name name owned by the current user.
Returns whether user is member of the trust context named tc.
Adds user to tc only if the current user is the owner of the trust context tc.
Removes user from tc only if the current user is the owner of the trust context tc.
TABLE III: User and trust context API in Verena. Each function runs in the user’s browser and current user denotes the currently logged in
user who performed this action.
Root
trust context
TC “admins”
References to
the trust contexts
of patient groups
TC “group A”
TC “group B”
TC “group C”
TC “group D”
Patient profile data
Fig. 3: Illustration of the completeness chain mechanism.
member of all the trust contexts deﬁned by any IQP on this
document. When updating a ﬁeld f , the Verena client and
server check that the user is a member of each trust context
deﬁned by an IQP on this document that has f as a protected
ﬁeld. When updating a ﬁeld that is a trust context for an IQP,
the user performing the update must belong to both the old
and new trust contexts.
Of course, if both the Verena client and server performing
these checks are compromised and collude, they will not
perform these checks and will allow unauthorized actions.
However, as we discuss in §VII, the Verena clients running
on behalf of honest users will detect and ﬂag this issue: the
unauthorized client was not able to sign ADS updates with an
authorized public key.
D. Trust Context Membership Operations
As described in §IV-B and §IV-C, write access control is
expressed by associating trust contexts with protected data,
through IQPs. Only the members of a trust context are allowed
to affect the results of a query associated with that trust
context. The owner (creator) of a trust context is responsible
for managing the membership, or in other words the access
control list (ACL), list of the trust context, by adding and
removing users. We note that one can create additional groups
for further levels of nesting and have a trust context consist
903903
of a list of users and groups of users. For simplicity, we do
not describe groups beyond trust contexts in this paper. Also
recall that, each trust context is identiﬁed by a unique name.
Table III shows the API for adding or removing trust context
members.
The ACL of a trust context is a piece of information that
needs to be integrity protected, just like other sensitive data in
the web application. Verena internally maintains a collection
for storing the trust context ACLs and protects it by declaring
an appropriate IQP. Consequently, both ACL modiﬁcation
operations, as well as read operations for verifying whether a
user belongs to a trust context ACL, are integrity protected.
The corresponding entries on the hash server, i.e, those that
store the latest root hashes of the ADSes protecting the ACLs
of trust contexts are created in a special way (see §VI), to
make sure that only the owner of a trust context can update
the root hash of its ACL, and thus manipulate the ACL.
We note that an extra step has to be performed when
removing a user from a trust context. As we describe in §VI,
each hash server entry stores the public key PK of the last user
that modiﬁed the entry. When the owner removes a user u from
a trust context tc, the owner must update the entries at the hash
server that correspond to ADS trees for tc (these are the ADSes
that protect data associated with tc) that were last modiﬁed by
u; the owner makes a no-op modiﬁcation so these entries now
appear modiﬁed by the owner, which is valid, because he is a
member himself. This update is necessary because, without it,
clients verifying if the last modiﬁcation to the ADS tree was
permitted will notice that this modiﬁcation was performed by
a user who is not in the trust context anymore.
Membership Veriﬁcation. As part of verifying the result of
a query (described in detail in §VII), the Verena client needs
to check that the user who last modiﬁed the relevant protected
data was authorized to do so. In other words, the Verena client
needs to verify that a user u with public key PK is a member
of a given trust context tc. To construct such a proof, the
server provides to the client the binding of a username u to PK
along with the signature from the IDP for this binding. Based
on this signature, the client can verify that user u is indeed
the owner of PK. Subsequently, the server has to prove that u
is a member of the trust context tc. For this goal, the server
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:13 UTC from IEEE Xplore.  Restrictions apply. 
fetches the entry for tc from the hash server and produces a
proof from the ADS that protects the ACL of tc, in a process
similar to any integrity protected read query.
VI. HASH SERVER
The hash server has a simple functionality, similar to a
key-value store. Its task is to store the most recent root hash
for each ADS that exists in a Verena application, together
with information about which user made the latest update. The
hash server provides this information signed for authenticity
to Verena clients. The clients use it to verify that the data they
read is fresh and complete.
The hash server stores a map, in which the key is an ID
and the value is an entry E = (hash h, version v, public key
PK, ﬂag fixedPK). The version v helps serialize concurrent
operations to each entry. Depending on the value of fixedPK,
we distinguish two types of entries, which we describe below.
Trust Context ACL Entry. Entries of this type store the root
hash h of the ADS that protects the membership list (ACL) of
a trust context. The ID of such an entry is uniquely derived
from the trust context to which it corresponds. The version v
indicates the number of modiﬁcations made so far to this entry.
The public key PK belongs to the user who created the trust
context, i.e., the owner, and fixedPK is true to indicate that
only the creator of this entry is permitted to modify the entry.
This reﬂects the fact that only the owner of the trust context
is allowed to manipulate the trust context ACL.
ADS Entry. Entries of this type store the root hash h of an
ADS that protects application data associated with some trust
context. The ID of such an entry is uniquely derived from the
IQP and trust context to which they correspond. The version
v of an entry E indicates the number of modiﬁcations made
so far to this entry, and PK is the public key of the user
who last modiﬁed the hash of this entry. fixedPK is false
indicating that anyone is allowed to modify this entry. The
hash server does not check if the client modifying this entry
was allowed to modify it. Instead, since all hash server requests
go through the main server, the main server must check that
the client is authorized. If the server misbehaves and allows
unauthorized modiﬁcations, honest Verena clients will later
detect this misbehavior by checking if the PK of the latest
modiﬁcation was allowed to perform this modiﬁcation.
The hash server does not need to understand how each
entry is used for integrity enforcement. It only implements the
following simple interface consisting of two functions, HS_GET
and HS_PUT:
HS_GET(ID):
1: return map[ID]
HS_PUT(ID, Eold= (h, v, PK), Enew= (h’, v’, PK’,
fixedPK’), sig(ID, Eold, Enew)):
1: Verify sig on (ID, Eold, Enew) using PK’
2: if ID not in map and v’ = 1 then
3:
map[ID] = (h’, 1, PK’, fixedPK’); return true
904904
4: if ID not in map then return false
5: E = map[ID]
6: if E.fixedPK and PK’ (cid:3)= PK then return false
7: if E.v = Eold.v and v’ = v+1 and E.h = Eold.h and
map[ID] = (h’, v’, PK’, E.fixedPK); return true
E.PK = PK then
8:
9: return false
As shown in Fig. 4, when a Verena client makes a request
to the hash server, the client attaches a random nonce. The
hash server assembles the response as above and then signs
it together with the request and the nonce. The signature and
nonce prevent an attacker from replacing the response of the
hash server with an invalid or an old response.
The hash server can receive batched requests of the same type
from the same client. The hash server signs all the responses
into one signature, for increased performance. When the client
sends multiple HS_PUT requests, the hash server executes them
atomically: it executes them only if all of them return true.
VII. COMMUNICATION PROTOCOL AND QUERY
PROCESSING
We now describe the protocol that governs the interaction
between the client, the main server, and the hash server, as
well as the operations that are executed during the processing
of read and write queries.
Fig. 4 shows the communication protocol in Verena. The
sequence of operations in this protocol is the same no matter
what the query from the client is: whether this query is reading
some data, performing an aggregate, writing some data, or
adding a member to a trust context. Only the details of the
operations differ.
When issuing a query, the Verena client adds a randomly
generated nonce to the query, to be included in the hash
server’s signed response. Based on the query, the main server
derives a set of hash server requests whose results will help in
assemblying a proof of correctness for the query’s results. The
server submits them together as part of one big request to the
hash server. The hash server executes the request atomically,
as explained in §VI. Then, it signs its response together with
the request and the client’s nonce, and provides the signed
response to the main server. The server computes the result of
the query based on the server’s state and uses the hash server’s
signed response to prove correctness of the query result to the
client. The main server often needs to add extra information to
show that some data hashes to the hashes provided by the hash
server. The nonce prevents the main server from doing replay
attacks on the hash server and serve old data to the client.
In Fig. 4, Step 1 is explained in §V-C. Step 3 is explained
in §VI. We next describe Steps 2 and 4 for both read and write
operations. For each query, if the server is honest, it still checks
the regular read and write access control of an application, as
coded by the developer, and rejects a query if the issuing client
is not authorized to execute it. If the server is malicious, the
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:13 UTC from IEEE Xplore.  Restrictions apply. 
	
		
 	



		

		















"
!



#

 " # 	


	




!



!






"
!



#
Fig. 4: Communication protocol in Verena. Step 2’ consists of an
additional roundtrip that happens only for write operations.
server might skip this step, but write access control speciﬁed
by IQPs will still be enforced by Verena; clients will detect
that the server violated the integrity access control speciﬁed in
IQPs.
A. Read Query
Read queries can be projection or aggregation queries.
During Step 2, the server executes:
1) Create an empty list of requests for the hash server, called
HS_requests, and an empty list for proofs to be given