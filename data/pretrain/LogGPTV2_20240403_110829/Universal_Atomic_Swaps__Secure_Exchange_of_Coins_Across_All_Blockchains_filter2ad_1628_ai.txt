i
j
AS .Ext
swp,k, Y
σ∗, ˜σ(0)
• the simulator computes y(cid:48) ← ΠSIG
and we have (Y, y(cid:48)) /∈ R. Via Lemma 2, we bound the
probability of the abort event happening in H4 to be atmost
negligible in the security parameter. The indistinguishability
of the hybrids follows immediately.
Pr[abort2|H4] ≤ negl(λ).
Lemma 2: There exists a negligible function negl such that
q4 abort2
Proof 3 (Lemma 2): To show this, we consider the following
hybrid executions. Note that these hybrid executions are
designed to prove the above lemma and do not feature in
our main line of hybrids of simulation. We have the adversary
corrupting party P0.
Hybrid H4,0: Is the same execution as H4 as in session q4,
for i ∈
except now the simulator chooses the keys pk (01)
for j ∈ [˜n] uniformly at random and chooses
[n] and pk (10)
the adversarial shares of the corresponding secret keys also
to be chosen uniformly at random. Rest of the execution is
unchanged.
Hybrid H(cid:48)
4: Is the same execution as H4,0 as in session q4,
except now instead of just simulating the 2-PC protocol of the
pre-signature generation, now the corresponding pre-signatures
for n + ˜n executions of the 2-PC protocols are hard-coded into
the output of the respective simulators that are simulating for
AdpSg.
ΓSIG
We now argue about the indistinguishability of the hybrids.
H4 ≡ H4,0: : the hybrids are identical as the adversary only
sees random shares of secret keys of uniformly chosen shared
public keys.
H4,0 ≡ H(cid:48)
4: the executions are functionally equivalent. We
only change the way the output of the simulated 2-PC (ΓSIG
AdpSg)
is generated and therefore the hybrid executions H4,0 and H(cid:48)
are identical.
By a standard hybrid argument we can show that H4 ≡
H(cid:48)
4. This means that the probability with which the adversary
triggers abort2 in some session q4 in H4 must be the same
probability of it happening in H(cid:48)
4.
We now show that Pr[abort2|H(cid:48)
4] ≤ negl(λ). To show this,
we show a reduction R to the witness extractability property
of the adaptor signature scheme ΠSIG
AS . The reduction plays
in the aWitExt experiment and is given as input a public
key pk. The reduction guesses the session q4 and an index
k∗ ∈ [˜n]. It sets pk (10)
:= pk and chooses a random bit string
k∗
as the adversary’s share of the secret key. The reduction sets
other keys as in H(cid:48)
4. When the adversary sends (Y, π), the
reduction checks if VNIZK,LR (Y, π) = 1, and aborts otherwise.
to its own challenger.
The reduction later sends
It gets back a pre-signature ˜σ. The reduction hard-codes ˜σ
as the pre-signature ˜σ(0)
swp,k∗. For the rest of the execution, the
reduction faithfully simulates as in H(cid:48)
4. Whenever the adversary
outputs a signature σ∗, the reduction checks simply outputs
σ∗ to its own challenger.
swp,k∗ , Y
tx (0)
(cid:16)
(cid:17)
4
Notice that if the adversary triggers abort2 event, then
the reduction outputs a signature that violates the witness
then
21
AS . That is, if Pr[abort2|H(cid:48)
extractability property of ΠSIG
4] is
non-negligible, then the success probability of reduction R
is also (except with a loss of a polynomial factor) close
to the same non-negligible probability. This is a contradic-
tion to the witness extractability. Therefore we have that
Pr[abort2|H(cid:48)
4] ≤ negl(λ). The lemma follows immediately.
(cid:3)
H4 ≡ H5: The only difference between the hybrids is that in
H5, the simulator aborts with abort3 if in some session q5,
the adversary corrupts P0 and does the following:
• the adversary outputs σ∗ on a transaction tx (0)
for some k ∈ [˜n] such that
public key pk (10)
swp,k under the
k
(cid:16)
swp,k, σ∗(cid:17)
(cid:16)
(cid:17)
and
ΠSIG
DS .Vf
pk (10)
k
, tx (0)
= 1
• the simulator computes y←ΠSIG
AS .Ext
(Y, y) ∈ R
• the simulator computes for all i ∈ [n],
˜σ(1)
swp,i, y
AS .Adapt
(cid:16)
(cid:17)
σ∗, ˜σ(0)
swp,k, Y
swp,i ← ΠSIG
σ(1)
(cid:16)
and there exists some i∗ ∈ [n] such that
swp,i∗ , σ(1)
pk (01)
, tx (1)
DS .Vf
ΠSIG
i∗
swp,i∗
(cid:17)
= 0
i
. We show that the probability of abort3 event triggered in
H5 is 0. The argument follows similar to Lemma 2, except
here we do not have a reduction in the end, instead we have
that probability of the abort event being triggered is 0 from
the pre-signature adaptability property of ΠSIG
AS .
H5 ≈c H6: the only difference between the hybrids is that
in H6 the simulator aborts with abortPRIV,0 when in some
session q6, an adversarial P0, outputs any transaction tx∗ and a
signature σ∗ such that ΠSIG
= 1 for some
i ∈ [n] before time T0. We now bound the probability of this
abort event as being negligible using Lemma 3.
Pr[abortPRIV,0|H6] ≤ negl(λ).
Lemma 3: There exists a negligible function negl such that
, tx∗, σ∗(cid:17)
pk (01)
DS .Vf
(cid:16)
Proof 4 (Lemma 3): To show this, we consider the following
hybrid executions. Note that these hybrid executions are
designed to show that the abort event abortPRIV,0 occurs
with negligible probability. These hybrids do not feature in
our main line of hybrids of simulation. Here we have the case
with a corrupt P0
6: Is the same execution as H6 in session q6, except
Hybrid H(cid:48)
for i ∈ [n] uniformly
now the simulator chooses the keys pk (01)
at random and chooses the adversarial shares of the secret keys
also to be chosen uniformly at random. Rest of the execution
is unchanged.
Hybrid H6,j, j ∈ [n]: Is the same execution as H(cid:48)
6 as in the
session q6, except now the ﬁrst j veriﬁable timed dlog’s are
generated using the simulator SVTD, where if SIG = Schnorr
. If SIG = ECDSA
then
, π(0)
C (0)
i
, T0
(cid:17) ← SVTD
(cid:17) ← SVTD
(cid:18) pk (01)
(cid:16)(cid:16)
j
(01)
0,j
G
sk
(cid:19)
(cid:17)x
where x :=
(cid:16)
(cid:16)
C (0)
j
, π(0)
j
pk (01)
j
, T0
(cid:17)
j
j
(cid:16)
(cid:17)−1
sk (01)
0,j
of the keys sk (01)
of the execution is the same as in H(cid:48)
6.
. Note that the simulator of the execution is aware
0,j as it extracted them from the adversary. Rest
Below we argue the indistinguishability of the above hybrids.
H6 ≡ H(cid:48)
6: the hybrids are identical as the adversary only sees
random shares of secret keys of uniformly chosen shared public
keys.
H6,j ≈T0 H6,j+1: Let H6,0 = H(cid:48)
6. The Indistinguishability of
H6,j and H6,j+1 for depth T0 bounded adversaries follows
from the timed privacy of ΠVTD.
To show this, we show a reduction R to the timed privacy
of ΠVTD that uses the depth T0 bounded distinguisher of
H6,j and H6,j+1 as a sub-routine. The reduction R is given
as inputs (H, C, π). The reduction guesses the session q6 and
i ∈ [n] and sets pk (01)
:= H, which is honest party P1’s share
of the public key pk (01)
. The reduction can do this, because
it can choose the adversarial share sk (01)
randomly and set
0,i
:= H sk (01)
pk (01)
if SIG = ECDSA. With this, the reduction can call S2pc,1 with
JKGen for the i-th
inputs
iteration. The reduction also sets C (0)
:= π.
For the rest of the execution the reduction simulates exactly
as in H6,j.
if SIG = Schnorr and pk (01)
and simulate in ΓSIG
:= H · Gsk (01)
:= C and π(0)
, sk (01)
0,i
(cid:16)
pk (01)
i
(cid:17)
1,i
i
0,i
i
i
i
0,i
i
The reduction is efﬁcient as it only performs polynomial
time operations during the simulation. To argue the success
probability, notice that if (H, C, π) was indeed generated
as (C, π) ← ΠVTD.Commit(x, T0) and H := Gx, then the
reduction has perfectly simulated H6,j
to the underlying
distinguisher. On the other hand, if (H, C, π) was generated
as (C, π) ← SVTD(H, T0), then the reduction has perfectly
simulated H6,j+1 to the underlying distinguisher. Therefore
if the depth T0 bounded distinguisher is able to distinguish
between the hybrids with non-negligible probability, then the
reduction can break the timed privacy of ΠVTD.
By a standard hybrid argument we have that H6 ≈T0 H6,n.
Notice that in H6,n every timed dlog is generated by SVTD for
the adversarial P0 and no information about the shares of the
honest party P1 is available in the view of the adversary. Since
H6 is indistinguishable from H6,n for depth T0 bounded
adversaries and when P1 is honest, we have that in session q6,
the probability with which the adversary triggers abortPRIV,0
in H6 must be the same in H6,n except with negligible
difference. Now, for the adversary to trigger abortPRIV,0 in
H6,n, it has to output σ∗ on some transaction tx∗ under the
public key pk (01)
for some i ∈ [n].
i
We show that the probability with which the adversary can
do so in H6,n is at most negligible in the security parameter
by reducing the occurrence of the event to the unforgeability
DS . We construct a reduction R(cid:48)
of the signature scheme ΠSIG
that guesses the q6-th session, and the index i∗ ∈ [n]. It
22
receives as input a public key pk and simulates the view
of the adversary A faithfully as in H6,n except that it sets
i∗ = pk. If the adversary outputs a signature σ∗ on
pk (01)
some transaction tx∗ under pk, the reduction R(cid:48) outputs
the same signatures as its forgery in EUF-CMA game. We
conclude that since the signature scheme ΠSIG
DS is unforgeable,
we have that Pr[abortPRIV,0|H6,n] ≤ negl(λ). This implies
that Pr[abortPRIV,0|H6] ≤ negl(λ) which proves the lemma.
(cid:3)
H6 ≈c H7: the only difference between the hybrids is that
in H7 the simulator aborts with abortPRIV,1 when in some
session q7, an adversarial P1, outputs any transaction tx∗ and a
signature σ∗ such that ΠSIG
= 1 for some
k ∈ [˜n] before time T1. We can bound the probability of this
abort event as being negligible with a analogous argument as
in Lemma 3.
H7 ≈c H8 ≈c H9: The indistinguishability of the hybrids
follows from the soundness of ΠVTD. This concludes the proof.
(cid:3)
, tx∗, σ∗(cid:17)
pk (10)
DS .Vf
(cid:16)
k
G. Extensions
In this section we outline how to modify our main protocol
to support multi-party (cyclic) atomic swaps.
Atomic Swaps for any Cycle Before explaining how to extend
our protocol (Figure 5) to the multi-party (> 2) settings, let us
establish some notation. We denote our n-to-˜n atomic swap as
n−→ P1
˜n−→ P0.
P0
Consider the settings where there are three parties P0, P1 and
P2. Glossing over the exchange rates, consider a case where
P0 has 1 BTC and wants to swap that with 1 ETH. P2 on the
other hand has 1 ETH but only wants to swap that with 1 XRP.
These two users cannot swap directly as P0 does not have the
required XRP to offer to P2. However, if P1 has 1 ETH and
1 XRP and is willing to facilitate the swap between P0 and
P2, we can hope to extend our protocol to have the following
sequence of swaps
1 BTC−−−→ P1
1 XRP−−−→ P2
1 ETH−−−→ P1