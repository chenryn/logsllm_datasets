title:An Architecture for Generating Semantic Aware Signatures
author:Vinod Yegneswaran and
Jonathon T. Giffin and
Paul Barford and
Somesh Jha
An Architecture for Generating Semantics-Aware Signatures
Vinod Yegneswaran
Jonathon T. Gifﬁn
Paul Barford
Somesh Jha
Computer Sciences Department
University of Wisconsin, Madison
{vinod,giffin,jha,pb}@cs.wisc.edu
Abstract
Identifying new intrusions and developing effective sig-
natures that detect them is essential for protecting com-
puter networks. We present Nemean, a system for au-
tomatic generation of intrusion signatures from honeynet
packet traces. Our architecture is distinguished by its em-
phasis on a modular design framework that encourages
independent development and modiﬁcation of system
components and protocol semantics awareness which al-
lows for construction of signatures that greatly reduce
false alarms. The building blocks of our architecture
include transport and service normalization, intrusion
proﬁle clustering and automata learning that generates
connection and session aware signatures. We demon-
strate the potential of Nemean’s semantics-aware, re-
silient signatures through a prototype implementation.
We use two datasets to evaluate the system: (i) a pro-
duction dataset for false-alarm evaluation and (ii) a hon-
eynet dataset for measuring detection rates. Signatures
generated by Nemean for NetBIOS exploits had a 0%
false-positive rate and a 0.04% false-negative rate.
1 Introduction
Computer network security is a multidimensional activ-
ity that continues to grow in importance. The preva-
lence of attacks in the Internet and the ability of self-
propagating worms to infect millions of Internet hosts
has been well documented [30, 34]. Developing tech-
niques and tools that enable more precise and more rapid
detection of such attacks presents signiﬁcant challenges
for both the research and operational communities.
Network-security architectures often include network
intrusion detection systems (NIDS) that monitor packet
trafﬁc between networks and raise alarms when mali-
cious activity is observed. NIDS that employ misuse-
detection compare trafﬁc against a hand-built database
of signatures or patterns that identify previously docu-
mented attack proﬁles [3, 18]. While the effectiveness
of a misuse-detector is tightly linked to the quality of its
signature database, competing requirements make gen-
erating and maintaining NIDS signatures difﬁcult. On
one hand, signatures should be speciﬁc: they should only
identify the characteristics of speciﬁc attack proﬁles. The
lack of speciﬁcity leads to false alarms—one of the ma-
jor problems for NIDS today. For example, Sommer
and Paxson argue that including context, such as the vic-
tim’s response, in NIDS signatures reduces false alarm
rates [28]. On the other hand, signatures should be gen-
eral so that they match variants of speciﬁc attack pro-
ﬁles. For example, a signature that does not account for
transport or application-level semantics can lead to false
alarms [6, 22, 32]. Thus, a balance between speciﬁcity
and generality is an important objective for signatures.
We present the design and implementation of an ar-
chitecture called Nemean1 for automatic generation of
signatures for misuse-detection. Nemean aims to create
signatures that result in lower false-alarm rates by bal-
ancing speciﬁcity and generality. We achieve this bal-
ance by including semantics awareness, or the ability to
understand session-layer and application-layer protocol
semantics. Examples of session layer protocols include
NetBIOS and RPC, and application layer protocols in-
clude SMB, TELNET, NTP and HTTP. Increasingly, pre-
processors for these protocols have become integral parts
of NIDS. We argue that these capabilities are essential for
automatic signature generation systems for the following
reasons:
1. Semantics awareness enables signatures to be gen-
erated for attacks in which the exploit is a small part
of the entire payload.
2. Semantics awareness enables signatures to be gen-
erated for multi-step attacks in which the exploit
does not occur until the last step.
3. Semantics awareness allows weights to be assigned
USENIX Association
14th USENIX Security Symposium
97
to different portions of the payload (e.g., times-
tamps, sequence numbers, or proxy-cache headers)
based upon their signiﬁcance.
4. Semantics awareness helps produce generalized
signatures from a small number of input samples.
5. Semantics awareness results in signatures that are
easy to understand and validate.
Our architecture contains two components: a data ab-
straction component that normalizes packets from indi-
vidual sessions and renders semantic context and a sig-
nature generation component that groups similar ses-
sions and uses machine-learning techniques to gener-
ate signatures for each cluster. The signatures produced
are suitable for deployment in a NIDS [3, 18, 31]. We
address speciﬁcity by producing both connection-level
and session-level signatures. We address generality by
learning signatures from transport-normalized data and
consideration of application-level semantics that enables
variants of attacks to be detected. Therefore, we argue
that Nemean generates balanced signatures. At present,
Nemean’s goal is to provide an automated mechanism
to build accurate signatures that keep pace with exploits
and network viruses released everyday and is not meant
to “automate real-time deployment” of signatures. We
discuss this issue in greater detail in Section 3.3.
The input to Nemean is a set of packet traces collected
from a honeynet deployed on an unused IP address space.
Any data observed at a honeynet [7]2 is anomalous, thus
mitigating both the problem of privacy and the problem
of separating malicious and normal trafﬁc.3 We assume
that the honeynet is subject to the same attack trafﬁc as
standard hosts and discuss the ramiﬁcations of this as-
sumption in Section 8.
To evaluate Nemean’s architecture, we developed a
prototype implementation of each component. This im-
plementation enables automated generation of signatures
from honeynet packet traces. We also developed a sim-
ple alert generation tool for off-line analysis, which com-
pares packet traces against signatures. While we demon-
strate that our current implementation is extremely effec-
tive, the modular design of the architecture enables any
of the individual components to be easily replaced. We
expect that further developments will tune and expand
individual components resulting in more timely, precise
and effective signatures. From a broader perspective,
we believe that our results demonstrate the importance
of Nemean’s capability in a comprehensive security ar-
chitecture. Section 3 describes the architecture and Sec-
tions 4 and 5 present our prototype implementation of
Nemean.
We performed two evaluations of our prototype. First,
we calculated detection and misdiagnosis counts using
packet traces collected at two unused /19 address ranges
(16K total IP addresses) from two distinct Class B net-
works allocated to our campus. We collected session-
level data for exploits targeting ports 80 (HTTP), 139
and 445 (NetBIOS/SMB). Section 6 describes the data
collection environment. We use this packet trace data as
input to Nemean to produce a comprehensive signature
set for the three target ports. In Section 7, we describe
the major clusters and the signatures produced from this
data set. Leave-out testing results indicate that our sys-
tem generates accurate signatures for most common in-
trusions, including Code Red, Nimda, and other popular
exploits. We detected 100% of the HTTP exploits and
99.96% of the NetBIOS exploits with 0 misdiagnoses.
Next, we validated our signatures by testing for false
alarms using packet traces of all HTTP trafﬁc collected
from our department’s border router. Nemean produced
0 false alarms for this data set. By comparison, Snort [3]
generated over 1,000 false alarms on the same data set.
These results suggest that even with a much smaller sig-
nature set, Nemean achieves detectability rates on par
with Snort while identifying attacks with superior pre-
cision and far fewer false alarms.
2 Related Work
Sommer and Paxson [28] proposed adding connection-
level context to signatures to reduce false positives in
misuse-detection. Handley et al. described transport-
level evasion techniques designed to elude a NIDS as
well as normalization methods that disambiguate data
before comparison against a signature [6]. Similar work
described common HTTP evasion techniques and stan-
dard URL morphing attacks [22]. Vigna et al. [32]
described several mutations and demonstrated that two
widely deployed misuse-detectors were susceptible to
such mutations. The works of Handley et al. and Vigna
et al. highlight the importance of incorporating seman-
tics into the signature generation process.
Honeypots are an excellent source of data for intrusion
and attack analysis. Levin et al. described how honey-
pots extract details of worm exploits that can be analyzed
to generate detection signatures [13]. Their signatures
were generated manually.
Several automated signature generation systems have
been proposed. Table 1 summarizes the differences be-
tween Nemean and the other signature-generation sys-
tems. One of the ﬁrst systems proposed was Honey-
comb developed by Kreibich and Crowcroft [11]. Like
Nemean, Honeycomb generated signatures from trafﬁc
observed at a honeypot via its implementation as a Hon-
eyd [20]4 plugin. At the heart of Honeycomb is the
longest common substring (LCS) algorithm that looks for
the longest shared byte sequences across pairs of con-
98
14th USENIX Security Symposium
USENIX Association
Trafﬁc source
Generates Contextual
Signatures
Semantics
Aware
Nemean
Honeypots
Yes (Generates connection- and
Autograph
Earlybird
DMZ
DMZ
Honeycomb
Honeypots
session- level signatures)
No (Generates
byte-level signatures)
No (Generates
byte-level signatures)
No (Generates
byte-level signatures)
Yes
No
No
No
Signature Generation
Algorithm
(MSG) Clustering
and automata learning
(COPP) partitioning
content blocks
Measuring
packet-content prevalence
Pairwise LCS
across connections
Target
Attack Class
General
Worm
Worm
General
Figure 1: Comparison of Nemean to other signature-generation systems.
nections. However, since Honeycomb does not consider
protocol semantics, its pairwise LCS algorithm outputs
a large number of signatures. It is also frequently dis-
tracted by long irrelevant byte sequences in packet pay-
loads, thus reducing its capability for identifying attacks
with small exploit strings, exempliﬁed in protocols such
as NetBIOS. We discuss this in greater detail in Sec-
tion 7.4.
Kim and Karp [10] described the Autograph system
for automated generation of signatures to detect worms.
Unlike Honeycomb and Nemean, Autograph’s input are
packet traces from a DMZ that includes benign trafﬁc.
Content blocks that match “enough” suspicious ﬂows
are used as input to COPP, an algorithm based on Ra-
bin ﬁngerprints that searches for repeated byte sequences
by partitioning the payload into content blocks. Like
Honeycomb, Autograph does not consider protocol se-
mantics. We argue that such approaches, while attrac-
tive in principle, seem viable for a rather limited spec-
trum of observed attacks and are prone to false positives.
This also makes Autograph more susceptible to muta-
tion attacks [6, 22, 32]. Finally, unlike byte-level signa-
tures produced by Autograph, Nemean can produce both
connection-level and session-level signatures.
Another system developed to generate signatures for
worms, Earlybird [27], measured packet-content preva-
lence at a single monitoring point such as a network
DMZ. By counting the number of distinct sources and
destinations associated with strings that repeat often in
the payload, Earlybird distinguished benign repetitions
from epidemic content. Like Autograph, Earlybird also
produced byte-level signatures and was not aware of pro-
tocol semantics. Hence Earlybird has the same disadvan-
tages compared to Nemean as Autograph.
Pouget and Dacier [19] analyzed honeypot trafﬁc to
identify root causes of frequent processes observed in a
honeypot environment. They ﬁrst organized the observed
trafﬁc based on the port sequence. Then, the data was
clustered using association-rules mining [1]. The result-
ing clusters were further reﬁned using “phrase distance”.
Pouget and Dacier’s technique is not semantics aware.
Julisch [8] also clustered alarms for the purpose of dis-
covering the root-cause of an alarm. After clustering
the alarms, Julisch’s technique generated a generalized
alarm for each cluster. Intuitively, generation of gener-
alized alarms is similar to the automata-learning step of
our algorithm. However, the goals and techniques used
in our work are different than the ones used by Julisch.
In [4], Christodorescu et al. presented a semantics-
aware methodology to detect malicious traits in x86 bi-
naries. Their approach is semantics aware because their
algorithm incorporates semantics of x86 instructions that
are executed. In contrast, Nemean incorporates seman-
tics of various protocols in parsing application level
packet content. Hence, the malware-detection algorithm
presented in [4] and the signature-generation algorithm
of Nemean consider semantics at different levels.
Anomaly detection is an alternative approach for mali-
cious trafﬁc identiﬁcation in a NIDS. Anomaly detectors
construct a model of acceptable behavior and then ﬂag
any deviations from the model as suspicious. Anomaly-
detection techniques for detecting port scans have been
explored in [9, 29]. Balancing speciﬁcity and generality
has proven extraordinarily difﬁcult in anomaly-detection
systems, and such systems often have a high false-alarm
rate. This paper focuses on misuse-detection, and we will
not discuss anomaly-detecting techniques further.
3 Nemean Architecture
As shown in Figure 2, Nemean’s architecture is divided
into two components:
the data abstraction component
and the signature generation component. The input to
Nemean is a packet trace collected from a honeynet.
Even when deployed on a small address space (e.g., a /24
containing 256 IP addresses), a honeynet can provide a
large volume of data without signiﬁcant privacy or false
positives concerns.
3.1 Data Abstraction Component
The Data Abstraction Component (DAC) aggregates and
transforms the packet trace into a well-deﬁned data struc-
ture suitable for clustering by a generic clustering mod-
ule without speciﬁc knowledge of the transport proto-
col or application-level semantics. We call these aggre-
gation units semi-structured session trees (SSTs). The
USENIX Association
14th USENIX Security Symposium
99
DATA ABSTRACTION COMPONENT
SIGNATURE GENERATION COMPONENT
Packet
Trace
   Transport
Normalization
Packets
Flow Aggregation
Connection
  Clustering
Generalization
      rules
Sessions Semi−structured
Session Trees
Connection
  Clusters
Connection
or Session
Signatures
  Per Service
 Specification
   Service
Normalization
  Session
  Clustering
  Automata
   Learning
Session
Clusters
Figure 2: Components and data ﬂow description of the Nemean architecture.
components of the DAC can then be thought of in terms
of the data ﬂow through the module as shown in Fig-
ure 2. While we built our own DAC module, in principle
it could be implemented as an extension to a standard
NIDS, such as a Bro policy script [18].
Transport normalization disambiguates obfuscations
at the network and transport layers of the protocol stack.
Our DAC reads packet traces through the libpcap
library. This can either be run online or ofﬂine on
tcpdump traces. This step considers transport-speciﬁc
obfuscations like fragmentation reassembly, duplicate
suppression, and checksums. We describe these in
greater detail in Section 4.
The aggregation step groups packet data between two
hosts into sessions. The normalized packet data is ﬁrst
composed and stored as ﬂows. Periodically, the DAC
expires ﬂows and converts them into connections. A
ﬂow might be expired for two reasons: a new connec-
tion is initiated between the same pair of hosts and ports
or the ﬂow has been inactive for a time period greater
than a user deﬁned timeout (1 hour in our experimental
setup). Flows are composed of packets, but connections
are composed of request-response elements. Each con-
nection is stored as part of a session. A session is a se-
quence of connections between the same host pairs.
Service-speciﬁc information in sessions must be nor-
malized before clustering for two reasons. First, clas-
siﬁcation of sessions becomes more robust and cluster-
ing algorithms can be independent of the type of ser-
vice. Second, the space of ambiguities is too large to pro-
duce a signature for every possible encoding of attacks.
By decoding service-speciﬁc information into a canon-
ical form, normalization enables generation of a more
compact signature set. A detection system must then
ﬁrst decode attack payloads before signature matching.
This strategy is consistent with that employed by popu-
lar NIDS [3]. We describe the particular normalizations
performed in greater detail in Section 4.
The DAC ﬁnally transforms the normalized sessions
into XML-encoded SSTs suitable for input to the clus-
tering module. This step also assigns weights to the
elements of the SST to highlight the most important
attributes, like the URL in an HTTP request, and de-
emphasize the less important attributes, such as en-
crypted ﬁelds and proxy-cache headers in HTTP packets.
Nemean’s current weight assignment is simply based on
our expert knowledge of protocols and prevalent attacks.
It should be noted that the weights are not tuned to reﬂect
a speciﬁc attack, but are meant to be sufﬁciently general
and reﬂect high level behavior drawn from a large class
of attacks. We expect that these might need to periodi-