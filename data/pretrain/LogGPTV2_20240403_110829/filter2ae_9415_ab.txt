    --w-------   1 julien julien 0 Mar 15 17:11 clear_refs
    -r--r--r--   1 julien julien 0 Mar 15 17:07 cmdline
    -rw-r--r--   1 julien julien 0 Mar 15 17:11 comm
    -rw-r--r--   1 julien julien 0 Mar 15 17:11 coredump_filter
    -r--r--r--   1 julien julien 0 Mar 15 17:11 cpuset
    lrwxrwxrwx   1 julien julien 0 Mar 15 17:11 cwd -> /home/julien/holberton/w/funwthevm
    -r--------   1 julien julien 0 Mar 15 17:11 environ
    lrwxrwxrwx   1 julien julien 0 Mar 15 17:11 exe -> /home/julien/holberton/w/funwthevm/loop
    dr-x------   2 julien julien 0 Mar 15 17:07 fd
    dr-x------   2 julien julien 0 Mar 15 17:11 fdinfo
    -rw-r--r--   1 julien julien 0 Mar 15 17:11 gid_map
    -r--------   1 julien julien 0 Mar 15 17:11 io
    -r--r--r--   1 julien julien 0 Mar 15 17:11 limits
    -rw-r--r--   1 julien julien 0 Mar 15 17:11 loginuid
    dr-x------   2 julien julien 0 Mar 15 17:11 map_files
    -r--r--r--   1 julien julien 0 Mar 15 17:11 maps
    -rw-------   1 julien julien 0 Mar 15 17:11 mem
    -r--r--r--   1 julien julien 0 Mar 15 17:11 mountinfo
    -r--r--r--   1 julien julien 0 Mar 15 17:11 mounts
    -r--------   1 julien julien 0 Mar 15 17:11 mountstats
    dr-xr-xr-x   5 julien julien 0 Mar 15 17:11 net
    dr-x--x--x   2 julien julien 0 Mar 15 17:11 ns
    -r--r--r--   1 julien julien 0 Mar 15 17:11 numa_maps
    -rw-r--r--   1 julien julien 0 Mar 15 17:11 oom_adj
    -r--r--r--   1 julien julien 0 Mar 15 17:11 oom_score
    -rw-r--r--   1 julien julien 0 Mar 15 17:11 oom_score_adj
    -r--------   1 julien julien 0 Mar 15 17:11 pagemap
    -r--------   1 julien julien 0 Mar 15 17:11 personality
    -rw-r--r--   1 julien julien 0 Mar 15 17:11 projid_map
    lrwxrwxrwx   1 julien julien 0 Mar 15 17:11 root -> /
    -rw-r--r--   1 julien julien 0 Mar 15 17:11 sched
    -r--r--r--   1 julien julien 0 Mar 15 17:11 schedstat
    -r--r--r--   1 julien julien 0 Mar 15 17:11 sessionid
    -rw-r--r--   1 julien julien 0 Mar 15 17:11 setgroups
    -r--r--r--   1 julien julien 0 Mar 15 17:11 smaps
    -r--------   1 julien julien 0 Mar 15 17:11 stack
    -r--r--r--   1 julien julien 0 Mar 15 17:07 stat
    -r--r--r--   1 julien julien 0 Mar 15 17:11 statm
    -r--r--r--   1 julien julien 0 Mar 15 17:07 status
    -r--------   1 julien julien 0 Mar 15 17:11 syscall
    dr-xr-xr-x   3 julien julien 0 Mar 15 17:11 task
    -r--r--r--   1 julien julien 0 Mar 15 17:11 timers
    -rw-r--r--   1 julien julien 0 Mar 15 17:11 uid_map
    -r--r--r--   1 julien julien 0 Mar 15 17:11 wchan
## /proc/pid/maps
正如我们之前看到的，/proc/pid/maps文件是一个文本文件，所以我们可以直接读取它。我们的maps文件内容如下所示：
    julien@ubuntu:/proc/4618$ cat maps
    00400000-00401000 r-xp 00000000 08:01 1070052                            /home/julien/holberton/w/funwthevm/loop
    00600000-00601000 r--p 00000000 08:01 1070052                            /home/julien/holberton/w/funwthevm/loop
    00601000-00602000 rw-p 00001000 08:01 1070052                            /home/julien/holberton/w/funwthevm/loop
    010ff000-01120000 rw-p 00000000 00:00 0                                  [heap]
    7f144c052000-7f144c20c000 r-xp 00000000 08:01 136253                     /lib/x86_64-linux-gnu/libc-2.19.so
    7f144c20c000-7f144c40c000 ---p 001ba000 08:01 136253                     /lib/x86_64-linux-gnu/libc-2.19.so
    7f144c40c000-7f144c410000 r--p 001ba000 08:01 136253                     /lib/x86_64-linux-gnu/libc-2.19.so
    7f144c410000-7f144c412000 rw-p 001be000 08:01 136253                     /lib/x86_64-linux-gnu/libc-2.19.so
    7f144c412000-7f144c417000 rw-p 00000000 00:00 0 
    7f144c417000-7f144c43a000 r-xp 00000000 08:01 136229                     /lib/x86_64-linux-gnu/ld-2.19.so
    7f144c61e000-7f144c621000 rw-p 00000000 00:00 0 
    7f144c636000-7f144c639000 rw-p 00000000 00:00 0 
    7f144c639000-7f144c63a000 r--p 00022000 08:01 136229                     /lib/x86_64-linux-gnu/ld-2.19.so
    7f144c63a000-7f144c63b000 rw-p 00023000 08:01 136229                     /lib/x86_64-linux-gnu/ld-2.19.so
    7f144c63b000-7f144c63c000 rw-p 00000000 00:00 0 
    7ffc94272000-7ffc94293000 rw-p 00000000 00:00 0                          [stack]
    7ffc9435e000-7ffc94360000 r--p 00000000 00:00 0                          [vvar]
    7ffc94360000-7ffc94362000 r-xp 00000000 00:00 0                          [vdso]
    ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]
回到我们之前所说的，我们可以看到栈（[stack]）位于内存高地址中，堆（[heap]）位于内存较低地址中。
## [heap]
使用maps文件，我们可以找到查找字符串所需的所有信息：
    010ff000-01120000 rw-p 00000000 00:00 0                                  [heap]
堆：
  * 开始于进程的虚拟内存地址0x010ff000处
  * 结束于虚拟内存地址：0x01120000
  * 可读写（rw）
快速回顾一下我们（仍在运行）的循环程序：
    ...
    [1024] Holberton (0x10ff010)
    ...
-> 0x010ff000 <0x10ff010 <0x01120000。 这证明我们的字符串位于堆中。更确切地说，它位于堆偏移0x10处。 如果我们打开/proc/pid/mem/文件（在这个例子中为/proc/4618/mem）并寻找内存地址0x10ff010，我们可以写入正在运行的进程的堆，覆盖“Holberton”字符串！  
让我们编写一个脚本或程序来做到这一点。选择你喜欢的语言，让我们开始！  
你可以在进一步阅读前，尝试编写一个脚本或程序，在正在运行的进程的堆中找到一个字符串，然后再继续阅读。下一段将给出这样做的源代码！  
.  
.  
.
## Overwriting the string in the virtual memory
我们将使用Python3编写脚本，但你可以用任何语言编写。这是代码：
    #!/usr/bin/env python3
    '''             
    Locates and replaces the first occurrence of a string in the heap
    of a process    
    Usage: ./read_write_heap.py PID search_string replace_by_string
    Where:           
    - PID is the pid of the target process
    - search_string is the ASCII string you are looking to overwrite
    - replace_by_string is the ASCII string you want to replace
      search_string with
    '''
    import sys
    def print_usage_and_exit():
        print('Usage: {} pid search write'.format(sys.argv[0]))
        sys.exit(1)
    # check usage  
    if len(sys.argv) != 4:
        print_usage_and_exit()
    # get the pid from args
    pid = int(sys.argv[1])
    if pid <= 0:
        print_usage_and_exit()
    search_string = str(sys.argv[2])
    if search_string  == "":
        print_usage_and_exit()
    write_string = str(sys.argv[3])
    if search_string  == "":
        print_usage_and_exit()
    # open the maps and mem files of the process
    maps_filename = "/proc/{}/maps".format(pid)
    print("[*] maps: {}".format(maps_filename))
    mem_filename = "/proc/{}/mem".format(pid)
    print("[*] mem: {}".format(mem_filename))
    # try opening the maps file
    try:
        maps_file = open('/proc/{}/maps'.format(pid), 'r')
    except IOError as e:
        print("[ERROR] Can not open file {}:".format(maps_filename))
        print("        I/O error({}): {}".format(e.errno, e.strerror))
        sys.exit(1)
    for line in maps_file:
        sline = line.split(' ')
        # check if we found the heap
        if sline[-1][:-1] != "[heap]":
            continue
        print("[*] Found [heap]:")
        # parse line
        addr = sline[0]
        perm = sline[1]
        offset = sline[2]
        device = sline[3]
        inode = sline[4]
        pathname = sline[-1][:-1]
        print("\tpathname = {}".format(pathname))
        print("\taddresses = {}".format(addr))
        print("\tpermisions = {}".format(perm))
        print("\toffset = {}".format(offset))
        print("\tinode = {}".format(inode))
        # check if there is read and write permission
        if perm[0] != 'r' or perm[1] != 'w':
            print("[*] {} does not have read/write permission".format(pathname))
            maps_file.close()
            exit(0)
        # get start and end of the heap in the virtual memory
        addr = addr.split("-")
        if len(addr) != 2: # never trust anyone, not even your OS :)
            print("[*] Wrong addr format")
            maps_file.close()
            exit(1)
        addr_start = int(addr[0], 16)
        addr_end = int(addr[1], 16)
        print("\tAddr start [{:x}] | end [{:x}]".format(addr_start, addr_end))
        # open and read mem
        try:
            mem_file = open(mem_filename, 'rb+')
        except IOError as e:
            print("[ERROR] Can not open file {}:".format(mem_filename))
            print("        I/O error({}): {}".format(e.errno, e.strerror))
            maps_file.close()
            exit(1)
        # read heap  
        mem_file.seek(addr_start)
        heap = mem_file.read(addr_end - addr_start)
        # find string
        try:
            i = heap.index(bytes(search_string, "ASCII"))
        except Exception:
            print("Can't find '{}'".format(search_string))
            maps_file.close()
            mem_file.close()
            exit(0)
        print("[*] Found '{}' at {:x}".format(search_string, i))
        # write the new string
        print("[*] Writing '{}' at {:x}".format(write_string, addr_start + i))
        mem_file.seek(addr_start + i)
        mem_file.write(bytes(write_string, "ASCII"))
        # close files
        maps_file.close()
        mem_file.close()
        # there is only one heap in our example
        break
注意：你需要以root身份运行此脚本，否则你将无法读取或写入/proc/pid/mem文件，即使你是该进程的所有者也是如此。
## 运行脚本
    julien@holberton:~/holberton/w/hackthevm0$ sudo ./read_write_heap.py 4618 Holberton "Fun w vm!"
    [*] maps: /proc/4618/maps
    [*] mem: /proc/4618/mem
    [*] Found [heap]:
        pathname = [heap]
        addresses = 010ff000-01120000
        permisions = rw-p
        offset = 00000000
        inode = 0
        Addr start [10ff000] | end [1120000]
    [*] Found 'Holberton' at 10
    [*] Writing 'Fun w vm!' at 10ff010
    julien@holberton:~/holberton/w/hackthevm0$
请注意，此地址对应于我们手动找到的地址：
  * 正在运行的进程的堆的虚拟内存地址为0x010ff000到0x01120000
  * 我们的字符串在堆偏移0x10处，因此在内存地址0x10ff010处
如果我们回到我们的循环程序，它现在应该打印“Fun w vm!”
    ...
    [2676] Holberton (0x10ff010)
    [2677] Holberton (0x10ff010)
    [2678] Holberton (0x10ff010)
    [2679] Holberton (0x10ff010)
    [2680] Holberton (0x10ff010)
    [2681] Holberton (0x10ff010)
    [2682] Fun w vm! (0x10ff010)
    [2683] Fun w vm! (0x10ff010)
    [2684] Fun w vm! (0x10ff010)
    [2685] Fun w vm! (0x10ff010)
    ...