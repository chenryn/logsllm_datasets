single ciphertext of additively homomorphic encryption. 𝒞 com-
putes(cid:72)u ← r⊗(cid:72)w⊖v, where r and v are random vectors generated by
𝒞. 𝒮 decrypts(cid:72)u and outputs the sum of u. Meanwhile, 𝒞 outputs the
triplets for each prediction request, 𝒮 only needs to transfer(cid:72)ws
sum of v. Even though 𝒮 and 𝒞 need to generate new dot-product
once for all predictions. Furthermore, it can pack multiple ws into
a single ciphertext if needed.
Input:
𝒮: w ∈ Zn
𝒞: r ∈ Zn
N
N
Output:
𝒮: a random number u ∈ ZN ;
𝒞: v ∈ ZN , s.t., u + v (mod N ) = w · r.
𝒮:
(cid:72)w ← E(pks ,w)
u ←(cid:80)(D(sks ,(cid:72)u))
output u
(cid:72)w
(cid:72)u
𝒞:
$←− Zn
N
v
(cid:72)u ← r ⊗(cid:72)w ⊖ v
v ←(cid:80)(v)
output v
Figure 3: Dot-product triplet generation.
Theorem 1. The protocol in Figure 3 securely implements ℱtriplet
in the presence of semi-honest adversaries, if E() is semantically secure.
Proof. Our security proof follows the ideal-world/real-world
paradigm: in real-world, parties interact according to the proto-
col specification, whereas in ideal-world, parties have access to a
trusted party TTP that implements ℱtriplet. The executions in both
worlds are coordinated by the environment ℰ, who chooses the
inputs to the parties and plays the role of a distinguisher between
the real and ideal executions. We aim to show that the adversary’s
view in real-wold is indistinguishable to that in ideal-world.
Security against a semi-honest server. First, we prove security against
a semi-honest server by constructing an ideal-world simulator Sim
that performs as follows:
gets the result u;
(1) receives w from the environment ℰ; Sim sends w to TTP and
(2) starts running 𝒮 on input w, and receives(cid:72)w;
(3) randomly splits u into a vector u′ s.t., u =(cid:80) u′;
(4) encrypts u′ using 𝒮’s public key and returns(cid:72)u′ to 𝒮;
(5) outputs whatever 𝒮 outputs.
Next, we show that the view Sim simulates for 𝒮 is indistinguishable
from the view of 𝒮 interacting in the real execution. 𝒮’s view in
1, ...,r′
. This is clearly true since vi is randomly chosen.
At the end of the simulation, 𝒮 outputs u ←(cid:80) u, which is the
the real execution is u = w · r − v while its view in the ideal
execution is u′ = [r′
n]. So we only need to show that any
element wiri −vi (mod N ) in u is indistinguishable from a random
number r′
i
same as real execution. Thus, we claim that the output distribution
of ℰ in real-world is computationally indistinguishable from that
in ideal-world.
Security against a semi-honest client. Next, we prove security against
a semi-honest client by constructing an ideal-world simulator Sim
that works as follows:
(1) receives r from ℰ, and sends it to TTP;
(2) starts running 𝒞 on input r;
(3) constructs (cid:72)w′ ← E(pk′
(4) gives(cid:72)w′ to 𝒞;
generated by Sim;
(5) outputs whatever 𝒞 outputs.
s ,[0, ...,0]) where pk′
s is randomly
𝒞’s view in real execution is E(pks ,w), which is computationally in-
distinguishable from its view in ideal execution i.e., E(pk′
s ,[0, ...,0])
due to the semantic security of E(). Thus, the output distribution
of ℰ in real-world is computationally indistinguishable from that
in ideal-world.
□
5.2 Oblivious linear transformations
Recall that when 𝒞 wants to request 𝒮 to compute predictions for
an input X, it blinds each value of X using a random value r from a
dot-product triplet generated earlier: x𝒮 := x − r (mod N ). Then,
𝒞 sets X𝒞 = R, and sends X𝒮 to 𝒮. The security of the dot-product
generation protocol guarantees that 𝒮 knows nothing about the r
values. Consequently, 𝒮 cannot get any information about X from
X𝒮 if all rs are randomly chosen by 𝒞 from ZN .
Upon receiving X𝒮, 𝒮 will input it to the first layer which is typ-
ically a linear transformation layer. As we discussed in Section 2.1,
all linear transformations can be turned into matrix multiplica-
tions/additions: Y = W · X + B. Figure 4 shows the oblivious linear
transformation protocol. For each row of W and each column of
X𝒞, 𝒮 and 𝒞 jointly generate a dot-product triplet: u +v (mod N ) =
w·x𝒞. Since X𝒞 is independent of X, they can generate such triplets
in a precomputation phase. Next, 𝒮 calculates Y𝒮 := W·X𝒮 +B+U,
and meanwhile 𝒞 sets Y𝒞 := V. Consequently, each element of Y𝒮
and Y𝒞 satisfy:
y𝒮 + y𝒞 = w · x𝒮 + b + u + v
= w1(x1 − x𝒞
1 )+, ..., +wl (xl − x𝒞
= (w1x1+, ..., +wl xl + b) − (w1x𝒞
= y
l ) + b + u + v
1 +, ..., +wl x𝒞
l ) + u + v
Due to the fact that ⟨U,V⟩ are securely generated by ℱtriplet, the
outputs of this layer (which are the inputs to the next layer) are also
randomly shared between 𝒮 and 𝒞, i.e., Y𝒞 = V and Y𝒮 = Y − V
can be used as inputs for the next layer directly.
It is clear that the view of both 𝒮 and 𝒞 are identical to their
views under the dot-product triplet generation protocol. Therefore,
the oblivious linear transformation protocol is secure if ℱtriplet is
securely implemented.
Session C3:  Machine Learning PrivacyCCS’17, October 30-November 3, 2017, Dallas, TX, USA623N , B ∈ Zm×n
N
N , X𝒮 ∈ Zl×n
Input:
𝒮: W ∈ Zm×l
𝒞: X𝒞 ∈ Zl×n
N
Output:
𝒮: A random matrix Y𝒮
𝒞: Y𝒞 s.t., Y𝒞 + Y𝒮 = W · (X𝒞 + X𝒮 ) + B
𝒮:
𝒞:
precomputation
for i = 1 to m
for j = 1 to n
(ui,j ,vi,j ) ← ℱtriplet(wi ,x𝒞
j )
end
end
Y𝒞 := V
output Y𝒞
Y𝒮 := W · X𝒮 + B + U
output Y𝒮
Figure 4: Oblivious linear transformation.
A linear transformation layer can also follow an activation layer
or a pooling layer. So, we need to design the oblivious activa-
tion/pooling operations in a way that their outputs can be the
inputs to linear transformations: X𝒮 and X𝒞 s.t. X𝒮 + X𝒞 = X and
X𝒞 has been used to generate the dot-product triplets for the next
layer. See the following sections.
5.3 Oblivious activation functions
In this section, we introduce the oblivious activation function which
receives y𝒞 from 𝒞 and y𝒮 from 𝒮, and outputs x𝒞 to 𝒞 and x𝒮 :=
f (y𝒮 + y𝒞 ) − x𝒞 to 𝒮, where x𝒞 is a random number generated by
𝒞. Note that if the next layer is a linear transformation layer, x𝒞
should be the random value that has been used by 𝒞 to generate
a dot-product triplet in the precomputation phase. On the other
hand, if the next layer is a pooling layer, x𝒞 can be generated on
demand.
5.3.1 Oblivious piecewise linear activation functions. Piecewise
linear activation functions are widely used in image classifications
due to their outstanding performance in training phase as demon-
strated by Krizhevsky et al. [37]. We take ReLU as an example to
illustrate how to transform piecewise linear functions into their
oblivious forms. Recall that ReLU is f (y) = max (0,y), where y is
additively shared between 𝒮 and 𝒞. An oblivious ReLU protocol
will reconstruct y and return max (0,y)−x𝒞 to 𝒮. This is equivalent
to the ideal functionality ℱReLU in Figure 5. Actually, we compare
y with N2 : y > N2 implies y is negative (recall that absolute values
of all intermediate results will not exceed ⌊N /2⌋).
ℱReLU can be trivially implemented by a 2PC protocol. Specifi-
cally, we use a garbled circuit to reconstruct y and calculate b :=
compare (y,0) to determine whether y ≥ 0 or not. If y ≥ 0, it returns
y, otherwise, it returns 0. This is achieved by multiplying y with
b. The only operations we need for oblivious ReLU are +,−,· and
Input:
Output:
• 𝒮: y𝒮 ∈ ZN ;
• 𝒞: y𝒞,r ∈ ZN .
• 𝒮: x𝒮 := compare (y,0) · y − r (mod N ) where y = y𝒮 +
y𝒞 (mod N );
• 𝒞: x𝒞 := r.
Figure 5: The ideal functionality ℱReLU.
compare, all of which are supported by the 2PC library [21] we used.
So both implementation and security argument are straightforward.
Oblivious leaky ReLU can be constructed in the same way as
oblivious ReLU, except that 𝒮 gets:
x𝒮 := compare (y,0) · a · y + (1 − compare (y,0)) · y − r (mod N ).
5.3.2 Oblivious smooth activation functions. Unlike piecewise
linear functions, it is non-trivial to make smooth functions oblivi-
1
ous. For example, in the sigmoid function f (y) =
1+e−y , both ey
and division are expensive to be computed by 2PC protocols [49].
Furthermore, it is difficult to keep track of the floating point value
of ey, especially when y is blinded. It is well-known that such
functions can be approximated locally by high-degree polynomials,
but oblivious protocols can only handle low-degree approximation
polynomials efficiently. To this end, we adapt an approximation
method that can be efficiently computed by an oblivious protocol
and incurs negligible accuracy loss.
Approximation of smooth functions. A smooth function f () can be
approximated by a set of piecewise continuous polynomials, i.e.,
splines [22]. The idea is to split f () into several intervals, in each of
which, a polynomial is used to to approximate f (). The polynomials
are chosen such that the overall goodness of fit is maximized. The
approximation method is detailed in the following steps:
(1) Set the approximation range [α1,αn], select n equally spaced
samples (including α1 and αn). The resulting sample set is
{α1, ...,αn}
(2) For each αi, calculate βi := f (αi ).
(3) Find m switchover positions (i.e., knots) for polynomials
expressions:
(a) fit an initial approximation ¯f of order d for the dataset
{αi , βi} using polynomial regression (without knots);
(b) select a new knot ˙αi ∈ {α1, . . . ,αn} and fit two new poly-
nomial expressions on each side of the knot (the knot is
chosen such that the overall goodness of fit is maximized);
(c) repeat (b) until the number of knots equals m.
The set of knots is now { ˙α1, ..., ˙αm}. Note that ˙α1 = α1 and
˙αm = αn.
(4) Fit a smoothing spline ([22], Chapter 5) of the same order us-
ing the knots {αi} on the dataset {αi , βi} and extract the poly-
nomial expression Pi (α ) in the each interval [ ˙αi , ˙αi +1],i ∈
{1,m − 1}.2
(5) Set boundary polynomials P0() (for α  ˙αm), which are chosen specifically for f () to closely
2We use the functions in the library scipy.interpolate.UnivariateSpline and
numpy.polyfit [34]
Session C3:  Machine Learning PrivacyCCS’17, October 30-November 3, 2017, Dallas, TX, USA624approximate the behaviour beyond the ranges [α1,αn]. Thus,
we split f () into m + 1 intervals, and each has a separate
polynomial expression.3
(6) The final approximation is:
¯f (α ) =
P0 (α )
P1 (α )
. . .
Pm−1 (α )
Pm (α )
if α < ˙α1
if ˙α1 ≤ α < ˙α2
if ˙αm−1 ≤ α < ˙αm
if α ≥ ˙αm ,
(5)
Note that any univariate monotonic functions can be fitted by
the above procedure.
Oblivious approximated sigmoid. We take sigmoid as an example to
explain how to transform smooth activation functions into their
oblivious forms. We set the polynomial degree d as 1, since linear
functions (as opposed to higher-degree polynomials) are faster and
less memory-consuming to be computed by 2PC. The approximated
sigmoid function is as follows:
¯f (y) =
0
a1y + b1
. . .
am−1y + bm−1
1
if y < y1
if y1 ≤ y < y2
if ym−1 ≤ y < ym
if y ≥ ym ,
(6)
We will show (in Section 6.2) that it approximates sigmoid with
negligible accuracy loss.
The approximated sigmoid function (Equation 6) is in fact a
piecewise linear function. So it can be transformed in the same
way as we explained in Section 5.3.1. The ideal functionality for the
approximated sigmoid ℱsigmoid is shown in Figure 6. Correctness
of this functionality follows the fact that, for yi ≤ y < yi +1:
x = ((aiy + bi ) − (ai +1y + bi +1)) + ((aiy + bi ) − (ai +1y + bi +1))
+... + ((am−1y + bm−1) − 1) + 1
Input:
• 𝒮: y𝒮 ∈ ZN ;
• 𝒞: y𝒞,r ∈ ZN .
• 𝒮: x𝒮 := compare (y1,y) · (0 − (a1y + b1))
Output:
+compare (y2,y) · ((a1y + b1) − (a2y + b2))
+compare (ym−1,y) · ((am−1y + bm−1) − 1) + 1