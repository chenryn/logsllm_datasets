In this section, we evaluate the eﬀectiveness of ICE. First,
we conduct an experiment to verify that there are multiple
function containers in each malware binary, which supports
our assumption that function-level abstraction is feasible in
dynamic analysis. Second, we verify that it can signiﬁcantly
reduce the overhead of path exploration compared to exist-
ing exploration scheme.
Function Containers in Malware Binary. In our evalu-
ation, we set the maximum call depth level as 4, and locate
on average 28 function containers per malware sample us-
ing this level.
In our tests, all containers eventually lead
to desired system calls. More interestingly, throughout all
our test cases, malware calls these containers if they want
to execute speciﬁc tasks.
Overhead Comparison. To evaluate whether our informed
execution can eﬃciently locate desired MCB logic, we com-
pare the performance of ICE with the traditional approach
that randomly chooses a path to explore next [54]. Here, the
performance is measured using the number of rounds to ﬁnd
all MCB paths (that the system succeeds in ﬁnding using
a brute-force approach), and each round is deﬁned as one
path exploration attempt from the sink (receiving the prob-
ing packet) to the end of the execution run for this path.
Note that we do not claim to be able to explore all execu-
tion paths in the program. Instead, our baseline of all MCB
paths is determined by brute-force exploration of all possible
paths that can be directed/triggered by one single probing
packet (i.e., we may miss MCB paths that can only be trig-
gered by multiple probing packets). All these paths start
from packet receiving till (i) the malware sends out some
response, or (ii) the communication/process terminates. In
this test, it is not very important whether we obtain accu-
rately all MCB paths or not. Instead, more importantly we
want to see which technique is quicker to locate these MCB
paths given as the baseline. The result is shown in Figure
5. We can clearly see that our ICE signiﬁcantly outperforms
the traditional forced executions [54]. Our method requires
much fewer exploration rounds to ﬁnd MCB paths. In many
cases, our system reduces the overhead up to 80%.
5.3 Overall MCB Extraction
PeerPress successfully extracts on average about 6 MCB
probing/response pairs per sample from all the tested mal-
ware, as shown in Table 4.
In terms of running time, we
select three most complex, representative malware samples
and report the performance for diﬀerent components of our
system in Table 3 (performance of other samples are sim-
ilar or better, omitted here due to space limitation). We
acknowledge that some steps, such as semantic derivation
and symbolic execution are relatively slow, which is not
surprising considering that we are analyzing very complex
real-world P2P malware in a ﬁne-grained way with some
known-expensive operations. Compared with existing state-
of-the-art work (e.g., [17, 18]) that also uses expensive dy-
namic analysis and symbolic execution techniques, our per-
formance is on par with those studies, and we believe it is
reasonable and tolerable for oﬄine analysis of malware fam-
ilies (recall that the analysis does not need to be repeated
for each individual sample).
It can certainly be improved
by optimizing our code, parallelizing some operations, and
using more powerful hardware.
Among all MCBs that PeerPress extracted, the simple
case is represented by certain Trojan horses/backdoors that
provide some unique“Welcome” information in their response.
It is actually a very eﬀective and safe MCB without much
eﬀort to generate. We can initiate connections to the sus-
pected host and verify whether it welcomes us in the speciﬁc
way or not. This welcome message is most common in old
fashion Trojan horses, because an adversary may use any re-
588Figure 5: Performance comparison of ICE and Random Exploration
Recording
Fine-grained
(min)
Backward Taint (sec)
Program Slicing (sec)
Semantic Derivation (sec)
ICE engine (sec/trace)
Symbolic execution (sec/-
trace)
Conﬁcker
C
38
243
180
2813
54.4
6863
Nugache Peacomm
21
549
363
489
38.9
1602
37
780
173
541
40.3
2711
Table 3: Running time of MCB extraction
Malware
# MCB Malware
# MCB
Conﬁcker C
Sality
Phabot
WinEggDrop
Nugache
NuCrypt
3/3
1/1
13/9
11/8
21/7
2/2
Peacom
BackOriﬁce
NuclearRAT
Penumbra
WinCrash
Wopla
6/3
16/14
17/12
16/13
1/1
2/2
Table 4: Statistics on extracted malware MCBs.
(Here X/Y in Column # MCB means there are X
candidate MCBs and Y ﬁnal MCBs after veriﬁca-
tion.)
mote client to control the bots. We ﬁnd this in Nugache FTP
logic and some other malware, e.g., WinCrash and Wopla.
For example, Nugache uses the following welcome message:
220-220-Welcome 220.
We ﬁnd that many MCB probing packets are easy to
craft because there are no (or not many) encoding routines.
More precisely, we found cleartext FTP logic inside Nu-
gache, Wopla and Phatbot, peer synchronization logic inside
Peacomm, and command and control logic inside traditional
Trojan horses. Even though there are only a limited num-
ber of samples, our system is robust and fast to obtain MCB
probing in a fully automatic way. In detail, we ﬁnd one sim-
ple FTP service logic hosted by Nugache on a high-order
port. After traversing the MCB paths, we extract 21 com-
mand and response pairs. After further veriﬁcation, 14 are
ﬁltered (e.g., command ls and pwd) because they are not
be considered as unique evidence. As an interesting MCB
example among the rest, we ﬁnd that the Nugache FTP
service needs users to provide Username and Port for vali-
dation, which are quite diﬀerent from normal FTP services
we see.
For Peacomm/Storm case, PeerPress extracted six MCB
probing candidates. We test these MCBs on the benign
eDonkey clients and ﬁlter out three. One ﬁltered example
is a 509-byte probing packets (with the ﬁrst two bytes as
0xe3 0x13) that will receive a 18-byte response packet be-
ginning with 0xe3 0x14. This is actually used for regular
peer recognition in the eDonkey protocol. The remaining
three are interesting MCBs, include a probing packet begin-
ning with the ﬁrst two bytes 0xe3 0x0d and the correspond-
ing response packet beginning with 0xe3 0x0a.
For the most sophisticated cases, we have to bypass the en-
coding function before the symbolic execution. As described
before, we apply a semi-automatic approach to extract the
encoding function inside of the traces. We automatically
locate the RC4 encryption and checksum routine inside Con-
ﬁcker and Sality, using several heuristics including highly-
mixed receiving buﬀer [18]. We also successfully identify
two double-word decryption keys inside the Conﬁcker and
Sality packet (with payload oﬀset 2 and 0). Thus, we can
recover the encrypted probing packet after the symbolic ex-
ecution. Examining the cleartext payload, we ﬁnd one key
data ﬁeld containing the payload version inside both Con-
ﬁcker and Sality. Both malware programs generate replies
if the received payload version is lower or equal to its own
binary version. It seems that the P2P logic implements a
self-updating procedure, and the only way to trigger its re-
ply is to provide a payload with a suitable version number.
Another interesting ﬁnding about the Sality botnet is the
double replies. When we feed our probing packet, Sality se-
quentially replies with two packets. One packet attempts to
start a new UDP session while the other one is a reply to
our MCB probing.
Although PeerPress extracted MCBs from all tested mal-
ware, we note that it does not mean PeerPress can extract all
MCBs inside malware. We actually encounter some issues
due to some complex control logic inside some malware pro-
grams. For example, PeerPress failed to extract MCBs from
Nugache’s port 8. We ﬁnd multiple W aitF orSingleObject
calls in the traces, waiting for some (asynchronous) event
from other threads/process. ICE failed to correctly explore
the paths in that situation. In the case of Conﬁcker, Peer-
Press is not able to automatically crack the multi-round ad-
vanced encoding routines, thus failed to extract MCBs on
some ports. The fact that PeerPress failed in several cases
is not surprising, as we are dealing with real-world complex
malware. However, our results are still encouraging because
PeerPress could extract at least one meaningful MCB for all
families that we examined.
5.4 Detection Results through Active Probing
In this section, we conduct the experiments to verify that
our MCB-informed active probing can detect our targeted
malware in a reliable, robust, fast and scalable way.
Test in Virtual Networks. We built one virtual envi-
ronment with six virtual machines. All virtual machines
installed Windows XP SP1 without new patches. We ran-
589domly selected two diﬀerent malware samples (from Table
1) to install on each machine (and eventually cover all twelve
malware families in six VMs). Meanwhile, we installed some
well-known benign services, such as Apache web server, P2P
clients (e.g., edonkey), and FTP servers (e.g., Filezilla). Our
probing engine uses extracted MCBs to actively probe the
entire virtual network. PeerPress correctly detected all the
existing malware in the virtual network without false posi-
tives. In terms of detection speed, it only took on average
1.103 seconds to detect each malware. This demonstrates
that the informed active probing is an eﬀective approach to
detect malware in the network.
To further verify the robustness of PeerPress to detect dif-
ferent variants in the same malware family, we further col-
lected three additional (but diﬀerent) binaries of the same
malware for Conﬁcker, Storm/Peacomm, and NuclearRAT,
and Nugache, respectively3. Our test environment is the
same as mentioned before. PeerPress can not only detect all
the variants but also correctly classiﬁed all variants into its
original families. This again veriﬁes that MCBs are unique
for the same malware family and PeerPress is robust in de-
tecting diﬀerent malware variants in the same family.
False Positive Test in Real Networks. Next, we scanned
our campus network (we randomly choose three /24 net-
works with no ﬁrewall to ﬁlter our scans) to test the real-
world performance of PeerPress using the above extracted
MCBs. We did not ﬁnd any false positive during the scan,
because most hosts do not have the corresponding (malware
portprint speciﬁc) ports open. This is not surprising because
our campus networks/computers are well managed/secured.
We then intentionally scanned other open ports on these
machines in order to further test the false positive of using
MCB probing/response. We chose to scan port 80 (web)
and all ports above 1025 in these three networks in hope to
ﬁnd some P2P applications. We found 58 hosts opened port
80 and 110 hosts opened higher ports, varying from sev-
eral well-known P2P ports such as 6881 (BitTorrent) and
49153-49156 (uTorrent/Azureus) to some unknown ports.
Our MCB-informed probing again did not yield any false
positive. The probing speed for each host is about 1.128
seconds on average per MCB (including the ﬁrst TCP port
scanning interaction and the following MCB probing pack-
et/response). Considering that it is easy to perform paral-
lel scanning using multiple threads, PeerPress demonstrates
good detection speed/scalability.
Comparisons with State-of-the-Art Detection Sys-
tems. In terms of an eﬃciency comparison with some state-
of-the-art malware detection systems, we can mainly do a
paper-and-pencil case study here because we could not ob-
tain most of these tools. AccessMiner [38] is one relevant
host-based detection system.
It has a high accuracy and
covers a lot of malware families. However, it may not be
good enough at the stage where a P2P bot is waiting to
receive commands from the botmaster, because it has not
triggered its malicious logic yet. Meanwhile, it may also
consume considerable resources on each end-host, so it is
less scalable for deployment on large networks.
We further deploy another state-of-the-art network-based
detection system, BotHunter [31], in our test (virtual) net-
3For these four malware we could ﬁnd diﬀerent binaries/-
variants.
work and no malware (on six machines) is detected. This is
reasonable because BotHunter needs to accumulate actual
evidence related to multiple phases in the malware infection
life cycle. In our cases, most of malware does not exhibit ma-
licious network activity because the samples did not receive
any commands. This also exposes one common limitation of
many existing detection systems: they are passive and could
be slow in terms of detection speed. On the contrary, Peer-
Press can actively detect those malware, even before those
infected machine are accessed/controlled by remote peer-
s/botmasters.
Note that compared with existing systems, PeerPress does
have a limitation regarding to its detection scope. As clearly
mentioned, PeerPress only targets malware that has MCBs,
instead of all malware. However, we still consider it a valu-
able addition to our arsenal, because P2P malware and Tro-
jan/backdoors are serious and emerging threats that we need
to address. PeerPress greatly complements existing passive
malware detection approaches.
6. RELATED WORK
We now review additional related work previously not men-
tioned.
Multiple-path Exploration. One related research is the
exploration of dormant functionalities [15, 42, 44, 54] in mal-
ware binary.
In [42], the authors take snapshots at each
branch point and reset when an additional branch needs
to be explored. Wilhelm et al. [54] present a forced sam-
pled execution approach to explore multiple rootkit execu-