is, in our construction, tω = hkω. Then no plaintext is con-
tained in the ciphertext in contrast to the Abdalla et al.
construction. Moreover, we prove that our scheme has con-
sistency where the test algorithm does not output 1 with
overwhelming probability if a ciphertext is tested by a trap-
door of a diﬀerent keyword. Since the KH-IBE scheme is
anonymous, no information of ω is revealed from the cipher-
text. Moreover, the CCA security against adversaries who
do not have the homomorphic operation key is taken over
from the security of KH-IBE. So, we can prevent unexpected
modiﬁcations of ciphertexts by the adversaries, and can pro-
tect information of plaintexts them in the sense of the CCA
security. Note that we need to add a value to homomor-
phic operation keys in order for the server to be allowed to
perform homomorphic operations without knowing the cor-
responding keyword itself, and show that this modiﬁcation
does not aﬀect the security.
Though the proposed MR-SHE scheme supports multi-
plicative homomorphic operations on the target group of
pairing, additive homomorphic operations over suitably small
integers can also be supported by the lifted ElGamal encryp-
tion approach [13]. Moreover, by employing the Catalano-
Fiore transformation [10] which transforms an additive ho-
momorphic encryption scheme into a scheme which addition-
ally supports one multiplicative homomorphic operation, we
realize inner products of encrypted vectors. We implement it
by using the Pairing-Based Cryptography (PBC) library [1],
and show the running time is still reasonable. We also pro-
pose an algorithm that evaluates multiple ciphertexts by
single execution. This modiﬁcation allows us to eﬃciently
implement inner products of vectors.
1.5 Our Scenario: χ2 Test of Independence for
Hidden Keywords
We introduce a scenario that inner products of encrypted
vectors need to be securely computed as follows. The χ2 test
for independence is designed to test the null hypothesis that
there is no association between a pair of factors. Suppose a
researcher, who has (pk, sk), and hospitals (hospital 1 and
2) collaboratively assess dependence between a SNP (Single
Nucleotide Polymorphism) variant and a target disease. To
this end, the researcher and hospitals compute a frequency
table for a case-control study (Table 1). A case group in-
cludes subjects with a target disease (e.g., lung cancer), and
a control group includes non-diseased subjects.
that
the
a
receiver
can decrypt
3Note
ciphertext
Enc(pk, ω, M ) sent from a data holder to the server, and can
directly obtain M in the current setting. If this case should
be avoided, then we can simply assume that the server also
has a public key and a secret key, and data holders encrypt
the ciphertext by using the server public key.
Table 1: Frequency table
Case
Control
A
n1A
n2A
nA
a
n1a
n2a
na
n1 := n1A + n1a
n2 := n2A + n2a
n
:= n1A + n2A
:= n1a + n2a
nAnan1n2
Let us consider a biallelic locus with allele A and a. Here,
n is the total number of subjects, and other value, e.g., n1A
is the number of subjects aﬀecting the target disease and
having allele A at the locus. Assume that the hospital 1
has a vector x0 := (x0,1, . . . , x0,ℓ) ∈ Zℓ
2 where x0,i = 1 if
the subject i aﬀects the target disease, and x0,i = 0 oth-
erwise. Assume that the hospital 2 has a vector x1 :=
(x1,1, . . . , x1,ℓ) ∈ Zℓ
2 where x1,i = 1 if the subject i has
allele A at the locus, and x1,i = 0 otherwise. Then, n1A can
be computed as n1A = Pℓ
i=1 x0,ix1,i. Since n, n1, n2, nA,
and na are contained in the table, assume that these values
are publicly available among the researcher and hospitals.
That is, if n1A is computed, then all other values can be
computed. From the table, χ2 test statistic is computed as
T = n(n1An2a−n1an2A)2
. Greater T indicates stronger de-
pendence between the SNP and the disease. Let us consider
the case that the computation of n1A is delegated to a server
(which is not the fully trusted third party). Since x0 and
x1 are highly sensitive information, these vectors need to be
hidden to the server. Moreover, since disease name is also
sensitive information, such a keyword is also desired to be
hidden to the server. To compute n1A = Pℓ
i=1 x0,ix1,i, with-
out revealing x0, x1, and the target disease to the server,
we employ MR-SHE as follows. The hospital 1 and the hos-
pital 2 encrypt x0 and x1, respectively, with the keyword
“lung cancer”, and send the ciphertexts to the server. Here,
we assume that the hospital 1 and the hospital 2 also com-
pute ciphertexts for other target diseases (e.g., glycosuria,
nosocomephrenia, leukemia, and so on), and the server pre-
serves them. When the researcher needs to compute the
χ2 test statistic for “lung cancer”, the researcher computes
the corresponding trapdoor and the corresponding homo-
morphic operation key, and sends the keys with the query
to the server. The server searches the corresponding cipher-
texts by using the trapdoor, and computes a ciphertext of
n1A by using the homomorphic operation key. Then, we can
guarantee that the ciphertext of n1A is computed by two en-
crypted vectors associated with the same disease. Moreover,
no information of diseases is revealed from the ciphertexts.
1.6 Related Work
Shimizu et al. [31] pointed out that tversky index, which
evaluates a distance among chemical compounds, can be
captured by using addition operations, and the Paillier en-
cryption scheme [28] is employed for searching. We remark
that the homomorphic property is used for searching, and is
not used for evaluating encrypted chemical compounds data.
As a similar attempt, secure matching or private database
queries using somewhat HE schemes have been proposed
in [7, 32, 33, 25].
Kiltz [24] proposed a tag-based encryption (TBE) where a
ciphertext is associated with a tag. As an interesting prop-
erty, we pointed out that the Kiltz TBE scheme has a ho-
momorphic property for ciphertexts if they are associated
218with the same tag (even a kind of chosen ciphertext security
is guaranteed). Moreover, a public veriﬁcation algorithm is
deﬁned where a ciphertext is valid under a tag or not. Sim-
ilarly, Gentry, Sahai and Waters [21] propose identity-based
FHE where homomorphic operations are allowed to cipher-
texts encrypted by the same identity. This scheme does not
require a user-speciﬁc evaluation key. On the other hand,
our scheme requires a keyword-speciﬁc evaluation key for
keyed homomorphic property, and this setting allows us to
control who can perform the homomorphic operations and
to protect information of plaintext in the sense of the CCA
security. So, these schemes [24, 21] might be applicable for
our usage if neither secure search functionality nor keyed
homomorphic property are required.
Since the receiver can recognize that all ciphertexts of
homomorphic operations are associated with the same key-
word, MR-SHE can be regarded as a kind of veriﬁable com-
putation [17, 4] with searchability. However, MR-SHE does
not support the veriﬁability of the computation result un-
like the conventional veriﬁable computations. For cipher-
texts with the same keyword, the server still may compute
the function that the receiver requires is also regarded as a
mis-operation. Thus, supporting such the veriﬁability in the
MR-SHE context is an interesting future work of this paper.
2. DEFINITIONS OF MIS-OPERATION RE-
SISTANT SEARCHABLE HOMOMORPHIC
ENCRYPTION
In this section, we give deﬁnitions of mis-operation re-
sistant searchable homomorphic encryption (MR-SHE). A
MR-SHE scheme MR-SHE consists of eight algorithms:
(MR-SHE.KeyGen, MR-SHE.HomKeyGen, MR-SHE.Trapdoor,
MR-SHE.Enc,
MR-SHE.Test, MR-SHE.Dec, MR-SHE.Eval). Let W be the
keyword space, M be the plaintext space, and κ ∈ N be the
security parameter. Note that in our construction given in
Section 3, we set hkω = tω. So, we assume that key gen-
eration algorithms share these keys, and thus our scheme is
stateful. See Section 3 for details. For the sake of simplicity,
we deﬁne algorithms when these are run for the ﬁrst time.
MR-SHE.KeyGen : A key generation algorithm takes as in-
put 1κ, and returns a receiver public key pk and a
receiver secret key sk. We assume that W and M are
contained in pk.
MR-SHE.KeyGen : A key generation algorithm takes as in-
put 1κ, and returns a receiver public key pk and a
receiver secret key sk. We assume that W and M are
contained in pk.
MR-SHE.HomKeyGen : A homomorphic operation key gen-
eration algorithm takes as input pk, sk and a keyword
ω ∈ W, and returns a homomorphic operation key
hkω.
MR-SHE.Trapdoor : A trapdoor generation algorithm takes
as input pk, sk, and a keyword ω ∈ W, and returns a
trapdoor tω corresponding to keyword ω.
MR-SHE.Enc : An encryption algorithm takes as input pk,
ω, and M , and returns a ciphertext C.
MR-SHE.Test : A test algorithm takes as input pk, tω, and
C, and returns 1 or 0.
MR-SHE.Dec : A decryption algorithm takes as input pk,
sk, ω, and C, and returns M or ⊥.
MR-SHE.Eval : An evaluation algorithm takes as input pk,
hkω, and two ciphertexts C1 and C2, and returns a
ciphertext C or ⊥. This algorithm has two function-
alities: 1) checks the integrity and 2) evaluates the
function homomorphically.
We require the correctness property as follows: For all (pk, sk)
← MR-SHE.KeyGen(1κ), and all ω ∈ K and M ∈ M, for
C ← MR-SHE.Enc(pk, ω, M ) and tω ← MR-SHE.Trapdoor
(pk, sk, ω),
• MR-SHE.Test(pk, tω, C) = 1 holds, and
• MR-SHE.Dec(pk, sk, ω, C) = M holds.
Moreover, we require the homomorphic property as follows:
For all (pk, sk) ← MR-SHE.KeyGen(1κ), and all ω ∈ K and
M1, M2 ∈ M, and all hkω ← MR-SHE.HomKeyGen(pk, sk, ω),
• For C ← MR-SHE.Eval(pk, hkω, C1, C2) where C1 ←
MR-SHE.Enc(pk, ω, M1) and C2 ← MR-SHE.Enc(pk, ω,
M2), MR-SHE.Dec(pk, sk, ω, C) = M1⊙M2 holds, where
⊙ is a binary operation over M.
Next, we deﬁne consistency as follows. This guarantees that
the MR-SHE.Test algorithm does not output 1 with over-
whelming probability if a ciphertext is tested by a trapdoor
of a diﬀerent keyword. Remark that in our scheme a fresh
ciphertext generated by the encryption algorithm and a ci-
phertext output by the evaluation algorithm have the same
form and are identical. So, we simply consider the case that
a ciphertext is computed by the encryption algorithm here.
Deﬁnition 2.1
(Consistency). For any probabilistic
polynomial time (PPT) adversary A and the security pa-
rameter κ ∈ N, we deﬁne the experiment Expconsist
MR-SHE,A(κ)
as follows.
Expconsist
MR-SHE,A(κ) :
(pk, sk) ← MR-SHE.KeyGen(1κ)
(ω, ω′, M ) ← A(pk)
ω, ω′ ∈ W; ω 6= ω′; M ∈ M
C ← MR-SHE.Enc(pk, ω, M )
tω′ ← MR-SHE.Trapdoor(pk, sk, ω′)
if MR-SHE.Test(pk, tω′ , C) = 1 then return 1
else return 0
We say that MR-SHE is consistent
Advconsist
ble for any PPT adversary A.
MR-SHE,A(κ) := Pr[Expconsist
the advantage
MR-SHE,A(κ) = 1] is negligi-
if
Next, we deﬁne data privacy which guarantees that no infor-
mation of plaintext is revealed from ciphertexts. As in KH-
IBE, an adversary is allowed to obtain the evaluation results
even for the challenge ciphertext, and such challenge-related
ciphertexts are not allowed to be inputs of the decryption
oracle Odec. The evaluation oracle Oeval returns the result
of the MR-SHE.Eval algorithm. That is, the oracle returns
⊥ unless two ciphertexts input are associated with the same
keyword. This captures the property that evaluation should
fail when the ciphertexts have non-matching tags.
219Deﬁnition 2.2
(Data Privacy). For any PPT adver-
sary A and the security parameter κ ∈ N, we deﬁne the
experiment Expdata-privacy
MR-SHE,A(κ) as follows.
Expdata-privacy
0 , M ∗
1 , st) ← AO(pk)
MR-SHE,A(κ) :
(pk, sk) ← MR-SHE.KeyGen(1κ); D ← ∅
(ω∗, M ∗
b $← {0, 1}; C ∗ ← MR-SHE.Enc(pk, ω∗, M ∗
b )
D ← D ∪ {C ∗}; b′ ← AO(C ∗, st)
if b = b′ then return 1
else return 0
0 and ω∗
obtain the homomorphic operation keys of ω∗
1 , then
the adversary always win the game since the adversary can
evaluate the challenge ciphertext by using the homomor-
phic operation keys. For example, if the challenge cipher-
text is computed by ω∗
0 , then the evaluation algorithm with
0 outputs a ciphertext whereas the challenge ciphertext
hkω∗
is computed by ω∗
1 , then the output is ⊥. So, these restric-
tions are necessary when we consider keyword privacy for an
evaluated ciphertext and consistency without contradiction.
Deﬁnition 2.3
(Keyword Privacy). For any PPT ad-
versary A and the security parameter κ ∈ N, we deﬁne the
experiment Expkeyword-privacy
MR-SHE,A (κ) as follows.
st is state information that an adversary A can preserve
any information, and st is used for transferring state in-
formation to the other stage. O is a set of oracles deﬁned
(pk, sk, ·.·), OMR-SHE
as O := {OMR-SHE
trapdoor
(pk, sk, ·), OMR-SHE
(pk, ·, ·, ·)}. Each ora-
cle is deﬁned as follows.
(pk, sk, ·), OMR-SHE
(pk, ·, ·), OMR-SHE
revhk
eval
test
dec
OMR-SHE
revhk
: This homomorphic operation key reveal oracle
takes as input a keyword ω ∈ W, and returns hkω ←
MR-SHE.HomKeyGen(pk, sk, ω). We remark that ω∗ is
allowed to be an input of this oracle.
OMR-SHE
dec
: This decryption oracle takes as input a keyword
ω ∈ W and a ciphertext C where C 6∈ D, and outputs
the result of MR-SHE.Dec(pk, sk, ω, C). If ω∗ has been
input to the OMR-SHE
oracle, then this oracle returns
⊥.
revhk
OMR-SHE
trapdoor : This trapdoor oracle takes as input a keyword
ω ∈ W, and returns tω ← MR-SHE.Trapdoor(pk, sk, ω).
We remark that ω∗ is allowed to be an input of this or-
acle.
OMR-SHE
test
: This test oracle takes as input a keyword ω ∈
W and a ciphertext C, and returns the result of MR-SHE.Test
(pk, tω, C) where tω ← MR-SHE.Trapdoor(pk, sk, ω).
We remark that (ω∗, C ∗) is allowed to be an input of
this oracle.
OMR-SHE