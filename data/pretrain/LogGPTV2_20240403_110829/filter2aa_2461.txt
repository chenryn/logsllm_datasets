© 2012 
Presented by: 
Pwn’ing you(r) cyber offenders 
Piotr Duszynski 
@drk1wi 
© 2012 
;WHOAMI;#? 
• 
Senior Security Consultant @Trustwave OSCP, OSCE, CEH 
• 
In security field for the past 6 years, hacking since 9 … 
• 
Enjoys security research, crazy road trips, mojitos and good music 
• 
Regardless of this slide title tries not to be too nerdy 
2 
© 2012 
What is this presentation about? 
• 
New defensive technique that renders your port scan results useless … WOOT 
• 
New attack vectors against you(r) attackers offensive toolbox … WOOT WOOT 
• 
Short introduction to a tool called:  Portspoof. 
• 
PWN’age POC DEMO for one of the well known port scanners. 
3 
Active (Offensive) defense in practice  
© 2012 
© 2012 
“Blind attackers’ tools”  
The art of Annoyance and Camouflage 
© 2012 
Destroying the reconnaissance phase 
• 
Typical case scenario ( a target system is behind a Firewall )  
5 
$ nmap –sV -O demo.addr.pl    
© 2012 
Portspoof – implementation of the idea 
6 
GOAL: “make your attackers port scanning experience a real pain” 
Worst possible scenario: 
•  All 65535 ports are open …  
*Portspoof will bind to a single port 
•  On every open port there is a service listening… 
*Portspoof will dynamically generate valid service signatures ~ 8000 supported 
Your task:  
Identify all real services on the remote system… 
© 2012 
Rendering your port scan useless with 
Portspoof  
• 
Worst case scenario (target system is behind the Portspoof) : 
7 
$ nmap –sV –p - -PN demo.addr.pl    
….you will need a lot of patience! 
© 2012 
Rendering your port scan useless  
8 
Scanning statistics: 
65.535 open ports (services)  
~120 MB of sent data 
30682 s (8.5h) 
and few beers later … 
© 2012 
Rendering your port scan useless  
• 
NMAP OS identification results 
9 
$ nmap –sV -O demo.addr.pl    
© 2012 
Rendering your port scan useless  
• 
NMAP OS identification results: 
10 
Device type: general purpose 
Running (JUST GUESSING): Linux 3.X (93%) 
OS CPE: cpe:/o:linux:linux_kernel:3 
Aggressive OS guesses: Linux 3.2 (93%), Linux 3.0 (92%), Linux 3.0 - 3.2 (85%) 
No exact OS matches for host (test conditions non-ideal). 
Service Info: Hosts: gTknkkuB, ouwH-rKWw, bWQnRo, ClFfHC, leLtAJg; 
OSs: Unix, Windows, Linux, Solaris, NetWare; Devices: print server,webcam, router, storage-misc, 
printer; 
Devices: print server, webcam, router, storage-misc, printer; 
CPE:  cpe:/o:microsoft:windows, cpe:/o:redhat:linux, cpe:/o:sun:sunos,cpe:/o:novell:netware, cpe:/
o:linux:linux_kernel 
© 2012 
Rendering your port scan useless  
11 
© 2012 
Rendering your port scan useless  
12 
… and somewhere in the  
results you can find the  
hidden message … 
© 2012 
Rendering your port scan useless  
• 
AMAP: $ amap –q demo.addr.pl  3000-3100  
13 
© 2012 
Rendering your port scan useless - 
conclusions 
• 
SYN/ACK/FIN/… stealth scans are no longer helpful!  
• 
OS identification is a bit more challenging …  
• 
Forces you to generate a huge amount of traffic through service probes … 
“Security by obscurity”  - but so is the mimicry in the natural environment…  
14 
© 2012 
Bypassing Portspoof – ideas 
• 
There is no trivial way to detect false signatures … 
• 
IP Fragmentation and other evasion techniques will not work … 
• 
Thread pool exhaustion: play with the thread pool number to handle all incoming 
connections … 
15 
Please send any bypass ideas that you have to the portspoof mailing list ;) 
© 2012 
© 2012 
“Active (Offensive) Defense in practice”   
exploiting your attackers’ tools… 
“The best defense is a good offense” - Sun Tzu (The Art of War) 
© 2012 
Exploiting through Nmap port scanner 
Interesting injection points through NMAP service probe engine: 
• 
Version fields, Hosts fields 
• 
Possibly also others can be found (hint: NSE output) … 
Depending on the matched Nmap regex. you can have around ~100bytes for your payload.  
17 
./portspoof –f fuzz_payloads –n fuzz_nmap_signatures 
© 2012 
Exploiting through Nmap port scanner 
Does Nmap filter anything ? YES ! 
Version field: 
• 
-oN (no filtering: ASCII printable + “space” chars)  
• 
-oG (filtering: all instances of  / are replaced with | ) 
• 
-oX (filtering: all reserved HTML chars are replaced with char entities) 
Service Info field: 
18 
© 2012 
Commercial port scanner: 
XSS example  
19 
Nmap report generation tool nr. 1 (McAfee SuperScan 4.0) 
XSS payload: partially UTF-7 encoded without parenthesis  
© 2012 
Open source reporting tool:  
XSS example 
20 
Nmap report generation tool nr.2 (anonymous) 
© 2012 
Blind/Generic XSS pwn’age 
$ ./portspoof -v –f XSS.txt –n fuzz_nmap_signatures 
21 
© 2012 
Public exploit script: 
OS command injection example 
22 
Exploiting your attackers’ exploits :D 
# Lotus CMS 3.0 eval() Remote Command Execution Exploit 
© 2012 
Public exploit script: 
OS command injection example 
23 
Portspoof exploiting signature : 
80 “whoami\n” 
Exploits’ new extra output: 
© 2012 
Public exploit script: 
OS command injection example 
24 
Creating a universal OS command injection payload one-liner 
Challenge: 
-  Spaces aren’t allowed ! : | cut –f2 –d’  
-  Apostrophes and pipes aren’t allowed !  : $( cat “storage2” )  
© 2012 
Public exploit script: 
OS command injection example 
25 
Creating a universal OS command injection payload one-liner 
---------------------------------------------------------------------------------------------
/bin/bash\t-c\t{perl,-e,$0,useSPACEMIME::Base64,B64_perl_payload }\t 
$_=$ARGV[0];~s/SPACE/\t/ig;eval;$_=$ARGV[1];eval(decode_base64($_)); 
----------------------------------------------------------------------------------------------------- 
•  Use \t instead of spaces 
•  Use ‘Bash Brace Expansion’ to address the lack of apostrophes 
•  Use regex to add additional \t  
•  Import missing packages on the fly and execute Base64 encoded payload >:] 
© 2012 
Blind/generic defensive exploitation 
Pros: 
+ Really effective against aggressive scanning scripts (autopwn) 
+ Moderately effective against exploit scripts with easy to exploit vulnerabilities  
Cons: 
- 
Like with any fuzzing, … you will need a bit of luck. 
- 
You will not exploit more challenging bugs …  Create your own dedicated signatures 
for that ;)  
Use Metasploit and BeEf payloads to gather additional information about PWN’ed 
targets. 
26 
© 2012 
In hunt for a vulnerable software … 
 Use your Google jutsu skills (previous examples were found in TOP10) : 
27 
And you will find many interesting targets… 
Tip: search for .sh (~8000 results), .pl , etc. 
© 2012 
Offensive Defense – target 
vulnerabilities 
You can expect to find (like in any software): 
• 
XSS, XML injections, SQL  injections, OS command injections, 
etc.  
• 
Buffer/Heap overflows, Format string overflows, etc. 
• 
DOS vectors  
28 
© 2012 
© 2012 
Nmap NSE PWN Demo 
© 2012 
© 2012 
Portspoof -  2 in 1 tool … 
© 2012 
Portspoof  
• 
Service emulator mode 
–  Marginal CPU/memory usage ( even handling heavy scans) 
–  Binds to just one port per instance (127.0.0.1:4444) 
–  Over 8000 dynamic service signatures  
–  Configurable through iptables: 
- A PREROUTING -i eth1 -p tcp -m tcp --dport 1:65535 -j REDIRECT --to-ports 4444 
31 
Service Signature Emulator / Exploitation Framework Frontend 
© 2012 
Portspoof: further information 
Portspoof URLs: 
http://portspoof.org/ 
Mailing list: 
PI:EMAIL 
Git repository (including the presented exploits): 
https://github.com/drk1wi/portspoof/ 
Contact me: 
piotr[at]duszynski.eu (PGP fingerprint: FCD2 B5DA 1AE2 056F 4AC8 901D 7258 7496 ECCD 36F3) 
http://twitter/drk1wi 
32 
© 2012 
Thank you J