第三章*发展中的 Docker 化.NET 框架和.NET Core Applications* ，我将替换的 NerdDinner 主页构建为一个 ASP.NET Core web 应用，在本章中，我将 REST API 和 Elasticsearch 消息处理程序作为.NET 核心应用。这些可以被打包成 Docker 映像，使用 Docker Hub 上的`microsoft/dotnet`映像的变体。
REST API 的 Dockerfile】非常简单:它只是设置容器环境，然后从构建器映像复制到发布的应用中；
```
# escape=`
FROM microsoft/dotnet:2.1-aspnetcore-runtime-nanoserver-1809
EXPOSE 80
WORKDIR /dinner-api
ENTRYPOINT ["dotnet", "NerdDinner.DinnerApi.dll"]
COPY --from=dockeronwindows/ch05-nerd-dinner-builder:2e C:\dinner-api .
```
消息处理程序`dockeronwindows/ch05-nerd-dinner-index-handler:2e`的 Dockerfile 甚至更简单——这是一个. NET Core 控制台应用，因此没有可公开的端口:
```
# escape=`
FROM microsoft/dotnet:2.1-runtime-nanoserver-1809
CMD ["dotnet", "NerdDinner.MessageHandlers.IndexDinner.dll"]
WORKDIR /index-handler
COPY --from=dockeronwindows/ch05-nerd-dinner-builder:2e C:\index-handler .
```
内容与非常相似。用于 SQL Server 消息处理程序的. NET 框架控制台应用。不同的是`FROM`映像；在这里，我使用.NET Core 运行时映像和`CMD`指令，这里是运行控制台应用 DLL 的`dotnet`命令。这两个消息处理程序都使用构建器映像作为复制已编译应用的源，然后设置它们需要的环境变量和启动命令。
两者.NET Core 应用与`appsettings.json`中的默认配置值捆绑在一起，可以在容器运行时使用环境变量覆盖这些值。它们捕获消息队列和弹性搜索应用编程接口的网址，以及 SQL Server 数据库的连接字符串。启动命令运行.NET 核心应用。ASP.NET 核心应用继续在前台运行，直到应用停止。那个。消息处理程序的 NET Core 控制台应用在前台使用`ManualResetEvent`对象保持活动状态。两者都将日志条目写入控制台，因此它们与 Docker 集成得很好。
当索引处理程序应用运行时，它将监听来自 NATS 的消息，消息主题是晚餐创建的。当从 web 应用发布事件时，NATS 会向每个订阅者发送副本，因此 SQL Server 保存处理程序和 Elasticsearch 索引处理程序都会获得事件的副本。事件消息包含足够的细节，两个处理程序都可以操作。如果未来的功能需要更多的细节，那么 web 应用可以发布带有附加信息的事件的新版本，但是现有的消息处理程序不需要改变。
用 Kibana 运行另一个容器将完成这个功能，并将自助分析添加到 NerdDinner。
# 为基巴纳提供分析
Kibana 是 Elasticsearch 的一个开源 web 前端，它为您提供了可视化的分析和搜索特定数据的能力。它由 Elasticsearch 背后的公司生产，使用非常广泛，因为它提供了一种用户友好的方式来导航大量数据。您可以交互式地浏览数据，高级用户可以构建全面的仪表板与其他人共享。
Kibana 的最新版本是 Node.js 应用，所以像 Elasticsearch 和 NATS 一样，它是一个跨平台的应用。在 Docker Hub 上有一个带有 Linux 和变体的官方映像，我已经基于 Windows Server 2019 打包了自己的映像。Kibana 映像是使用我在消息处理程序中使用的相同的基于约定的方法构建的:它期望连接到默认 API 端口`9200`上名为`elasticsearch`的容器。
在本章的源代码目录中，还有第二个 PowerShell 脚本，用于部署该功能的容器。名为`ch05-run-nerd-dinner_part-3.ps1`的 fine 启动附加的 Elasticsearch、Kibana 和 index handler 容器，并假设其他组件已经从第 1 部分和第 2 部分脚本运行:
```
 docker container run -d `
 --name elasticsearch `
 --env ES_JAVA_OPTS='-Xms512m -Xmx512m' `
 sixeyed/elasticsearch:5.6.11-windowsservercore-ltsc2019;
docker container run -d `
 --name kibana `
 -l "traefik.frontend.rule=Host:kibana.nerddinner.local" `
 sixeyed/kibana:5.6.11-windowsservercore-ltsc2019;
docker container run -d `
 --name nerd-dinner-index-handler `
 dockeronwindows/ch05-nerd-dinner-index-handler:2e; 
```
The Kibana container is labelled with Traefik's frontend rules. By default, Kibana listens on port `5601`, but in my setup, I'll be able to reach it on port `80` using the `kibana.nerddinner.local` domain, which I've added to my `hosts` file, and Traefik will proxy the UI.
整个栈现在正在运行。当我添加新的晚餐时，我将看到来自消息处理程序容器的日志，显示数据现在被保存到弹性搜索和 SQL Server:
```
> docker container logs nerd-dinner-save-handler
Connecting to message queue url: nats://message-queue:4222
Listening on subject: events.dinner.created, queue: save-dinner-handler
Received message, subject: events.dinner.created
Saving new dinner, created at: 2/11/2019 10:18:32 PM; event ID: 9919cd1e-2b0b-41c7-8019-b2243e81a412
Dinner saved. Dinner ID: 2; event ID: 9919cd1e-2b0b-41c7-8019-b2243e81a412
> docker container logs nerd-dinner-index-handler
Connecting to message queue url: nats://message-queue:4222
Listening on subject: events.dinner.created, queue: index-dinner-handler
Received message, subject: events.dinner.created
Indexing new dinner, created at: 2/11/2019 10:18:32 PM; event ID: 9919cd1e-2b0b-41c7-8019-b2243e81a412
```
Kibana 被 Traefik 代理，我只需要浏览`kibana.nerddinner.local`。启动屏幕需要的唯一配置是文档集合的名称，Elasticsearch 称之为索引。在这种情况下，指数被称为**晚餐**。我已经添加了一个带有消息处理程序的文档，这样 Kibana 就可以访问 Elasticsearch 元数据来确定文档中的字段:
![](img/e12648b2-f748-4981-a941-a9ca1de192e9.png)
现在，创建的每一顿晚餐都将保存在原来的事务数据库中，以及新的报告数据库弹性搜索中。用户可以在聚合数据上创建可视化，在流行的时间或地点寻找模式，并且他们可以搜索特定的晚餐细节和检索特定的文档:
![](img/7f7fed5f-7a23-4f37-bbea-8747c53e1135.png)
Elasticsearch and Kibana are hugely capable software systems. Docker has made them accessible to a whole new set of users. I won't cover them in any further detail in this book, but they are popular components with a lot of online resources, that you can search for, if you want to learn more.
# 从整体到分布式解决方案
NerdDinner 已经从一个传统的整体发展成为一个易于扩展的解决方案，使用现代设计模式在现代应用平台上运行。这是一个快速和低风险的发展，由 Docker 平台和容器优先设计提供动力。
该项目从将 NerdDinner 按原样迁移到 Docker 开始，运行一个 web 应用容器和一个 SQL Server 数据库容器。现在我有十个组件在容器中运行。五个正在运行我的自定义代码:
*   最初的 ASP.NET·纳丁纳网络应用
*   新的 ASP.NET 核心网主页
*   新的.NET 框架保存晚餐消息处理程序
*   新的。核心索引-晚餐消息处理程序
*   新的 ASP.NET 核心晚餐空气污染指数
四种是企业级开源技术:
*   trafik 反向代理
*   NATS 消息队列
*   弹性搜索文档数据库
*   基巴纳分析用户界面
最后一个是 SQL Server Express，可以在生产中免费使用。每个组件都在一个轻量级 Docker 容器中运行，并且每个组件都能够独立部署，因此它们可以遵循自己的发布节奏:
![](img/810be7f9-9933-4e95-8b15-0a730684c67a.png)
Docker 的一大好处是可以添加到您的解决方案中的大量打包软件库。Docker Hub 上的官方图片多年来一直受到社区的尝试和信任。Docker Hub 上的认证映像提供了商业软件，可以保证在 Docker Enterprise 上正常工作。
越来越多的软件包在易于使用的 Docker 映像中变得可用于 Windows，为您提供了无需大量开发即可向应用添加功能的空间。
NerdDinner 栈中的新定制组件是消息处理程序和 REST API，所有简单的应用都包含大约 100 行代码。保存晚餐处理程序使用来自 web 应用的原始代码，并使用 EF 模型，我将其重构到自己的项目中，以实现重用。索引晚餐处理程序和 REST 应用编程接口使用所有新编写的代码.NET Core，这使得它在运行时高效且可移植，但是在构建时，所有项目都在一个 Visual Studio 解决方案中。
容器优先的方法是将功能分解成独立的组件，并将这些组件设计成在容器中运行，或者作为您自己编写的小型定制应用，或者作为 Docker Hub 的现成映像。这种功能驱动的方法意味着您专注于对项目利益相关者有价值的领域:
*   因为它给了他们新的功能或者更频繁的发布
*   因为它使应用更有弹性，更容易维护
*   对开发团队来说，因为它解决了技术债务并允许更大的架构自由
# 管理构建和部署依赖关系
在当前的发展中，NerdDinner 有一个结构良好的逻辑架构，但实际上，它有很多依赖关系。容器优先的设计方法给了我技术栈的自由，但这可以带来很多新技术。如果您要在这个阶段加入项目，并希望在 Docker 之外本地运行应用，您需要以下内容:
*   Visual Studio 2017
*   .NET Core 2.1 运行时和 SDK
*   IIS 和 ASP.NET 4 . 7 . 2
*   SQL 服务器
*   Traefik、NATS、Elasticsearch 和 Kibana
如果你加入了这个项目，并且在 Windows 10 上有 Docker Desktop，那么你不需要这些依赖项。当您已经克隆了源代码，您可以用 Docker 构建和运行整个应用栈。您甚至可以使用 Docker 和轻量级编辑器(如 VS Code)来开发和调试解决方案，甚至消除了对 Visual Studio 的依赖。
这也使得持续集成变得非常容易:您的构建服务器只需要安装 Docker 来构建和打包解决方案。您可以使用一次性构建服务器，在构建已排队时启动虚拟机，然后在队列为空时销毁虚拟机。您不需要复杂的虚拟机初始化脚本，只需要脚本化的 Docker 安装。您还可以在云中使用托管配置项服务，因为它们现在都支持 Docker。
该解决方案仍然存在运行时依赖关系，我目前正在使用一个脚本来管理这个依赖关系，该脚本以正确的选项和顺序启动所有容器。这是一种脆弱且有限的方法——脚本没有逻辑来处理任何故障，或者允许在一些容器已经运行的情况下部分启动。你不会在真正的项目中这样做；我只是使用脚本，所以我们可以专注于构建和运行容器。在下一章中，我将向您展示正确的方法，使用 Docker Compose 来定义和运行整个解决方案。
# 摘要
在这一章中，我研究了容器优先的解决方案设计，在设计时利用 Docker 平台轻松安全地向应用添加特性。我描述了一种功能驱动的方法来更新现有的软件项目，最大化您的投资回报，并让您清楚地看到它的进展。
容器优先的功能方法允许您使用 Docker Hub 的生产级软件来为您的解决方案添加功能，官方和认证的映像是高质量的精选应用。您可以添加这些现成的组件，并专注于构建小的定制组件来完成这些功能。您的应用将发展成松散耦合的，这样每个单独的元素都可以有最合适的发布周期。
本章的开发速度已经超过了运营速度，因此我们目前有一个架构良好的解决方案，部署起来很脆弱。在下一章中，我将介绍 **Docker Compose** ，它提供了一种清晰统一的方式来描述和管理多容器解决方案。