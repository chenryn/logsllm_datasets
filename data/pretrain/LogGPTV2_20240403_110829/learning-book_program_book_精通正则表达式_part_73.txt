如从某个多字节字符的“内部”开始）会导致匹配失败。
即使ofset不等于O，PHP也不会把这个位置标记为一一字符串的起始位置，它只表示正
则引擎开始尝试的位置。不过，逆序环视倒是可以检查ofset左边的文本。
preg_match_all
使用方法
preg_match_all(pattern, subject, matches [, flags [, offset 1])
参数简介
pattern：分隔符包围起来的正则表达式，可能出现修饰符（444）。
subject需要检索的目标字符串。
matches用来保存匹配数据的变量（必须出现）。
flags
非强制出现，标志位设定整个函数的功能：
PREG_OFFSET_CAPTURE（456)
和/或任意：
PREG_PATTERN_ORDER（455)
PREG_SET_ORDER(456)
offset
非强制出现，从0开始，表示目标字符串中匹配尝试开始的位置（与preg_match
的offset参数相等453）。
返回值
preg_match_al1返回匹配的次数。
---
## Page 480
454
第10章：PHP
不包含任何内容的匹配，还是无法匹配
preg_match返回的Smatches中，空字符串表示对应的括号没有参与匹配（当然，数
组末尾的空字符串会被忽略）。因为匹配结果也可能是空宇符串，我希望没有参与匹配
的括号捕获的文本是NULL。
所以，我自己编写了一个preg_match（我称其为reg_match），首先使用PREG_OFFSET_
CAPTURE标志位来获得所有括号内的自表达式匹配结果的详细信息，然后根据这些信
息在Smatches中将对应的值设为NULL：
function reg_match($regex, $subject， &$matches, $offset =0)
$result =preg_match($regex, $subject, $matches,
PREG_OFFSET_CAPTURE,SoffSet);
if ($result)(
$f=create_function（'&$X'，'$X=SX[1]/i'，Shtml,$all_matches）>1)
print “whoa,document has more than one !\n";
preg_match_al1要求必须出现第3个参数（也就是用来收集所有成功的匹配信息的变量）。
所以，这个例子中虽然没有用到sal1_matches，但仍然必须设置这个变量。
收集匹配数据
preg_match和preg_match_al1的另一个主要区别是第3个参数中的数据。preg_match
进行至多一次匹配，所以它把匹配的数据存储在matches变量中。与此不同的是，preg_
---
## Page 481
Preg函数罗列
455
match_al1能匹配许多次，所以它的第3个参数保存了多个单次匹配的matches。为了说
明这种区别，我使用sal1_matches作为preg_match_al1的变量名，而不是Spreg_match
中常用的Smatches。
preg_match_al1可以以两种方式在sal1_matches中存放数据，根据下面两个互斥的第4
个参数flag：PREG_PATTERN_ORDER或是PREG_SET_ORDER来决定。
默认的排列方式是PREG_PATTERN_ORDER下面有个例子（我称其为“按分组编号的
（collated)”-稍后将介绍）。如果没有设置标志位，这就是默认的配列方式：
Ssubject=*
Jack A. Smith
Mary B. Miller " ;
/*不设置flagS就末用PREG_PATTERN_ORDER*/
preg_match_all('/^(\w+)(\w\.)(\w+)$/m',$subject,Sall_matches);
$all_matches的结果为：
array
/*Sall_matches[0】对应所有的全局匹配*/
0=>array（0=>“JackA.Smith"，/*第1次匹配的全部文本*/
/*Sall_matches[1】对应第1组捕获型括号匹配的信息*/
中*/.array（0=>"A."，/*第1次匹配中的第2组捕获型括号*/
1 =>*B.*
/*第2次匹配中的第2组捕获型括号*/），
/*Sall_matches[3】对应第3组捕获型括号匹配的信惠*/
中array（0=>"JackA.Smith"，/*第1次整体匹配*/
1 => "Jack",
/*第1次整体匹配的第1个捕获型括号*/
2 => *A.*,
/*第1次整体匹配的第2个捕获型括号*/
3 => "Smith"
/*第1次整体匹配的第3个捕获型括号*/），
/*$all_matches[1]等价于preg_match的Smatches*/
1=>array（0=>"MaryB.Miller"，/*第1次整体匹配*/
1 => "Mary",
/*第2次整体匹配的第1个捕获型括号*/
2 => *B.",
/*第2次整体匹配的第2个捕获型括号*/
3 => *Miller"
/*第2次整体匹配的第3个捕获型括号*/），
）
两种排列方式的总结如下：
类型
标志位
说明及示例
按分组编号
PREG_PATTERN_ORDER
将各次匹配中同样编号的分组编在一起
$all_matches[$paren_num][$match_num]
堆叠
PREG_SET_ORDER
将每次匹配的数据集中保存
$all_matches[$match_num][$paren_num]
preg_match_all和PREG_OFFSET_CAPTURE标志位
就像preg_match一样，也可以在preg_match_al1中使用PREG_OFFSET_CAPTURE，让
Sal1_matches的每个末端元素（leafelement）成为一个两个元素的数组（匹配的文本，以
及按字节计算的偏移值）。也就是说，$all_matches成为一个数组的数组的数组，这可真
饶舌。如果你希望同时使用PREG_OFFSET_CAPTURE和PREG_SET_ORDER，请使用逻辑运算
符“or”来连接：
preg_match_all($pattern, $subject, $all_matches,
PREG_OFFSET_CAPTURE 1 PREG_SET_ORDER) ;
---
## Page 483
Preg函数罗列
457
preg_match_all与命名分组
如果使用了命名分组，$al1_matches将会多出命名元素（同preg_match一样451）。这
段程序：
Ssubject =
Jack A. Smith
Mary B. Miller";
/*不设置flagS就来用PREG_PATTERN_ORDER*/
preg_match_a11(/~(?P\w+)(?P\w\.)(?P\w+) S/m′,
Ssubject,Sall_matches);
Sall_matches的结果是：
array
（
0
=> array
（0=>"Jack A.
Smith",
1=>
"Mary B.Miller"）,
"Given"
=> array
"Jack",
=>
1
=> array
=>
"Jack*,
√
=>
"Mary"
*Middle*
≤>
array
（0
=>
"A.",
1
=>
*B.*
),
2
=>
array
（0
=>
"A.*,
1
=>
*B.*
*Family*
)，
=> array
=>
"Smith",
=>
*Miller"),
=>array（0=>
"Smith",
1=>
*Miller")
)
如果使用PREG_SET_ORDER：
Ssubject =
Jack A. Smith
Mary B. Miller";
preg_match_a11(*/^(?P\w+)(?P\w\.)(?P\w+)$/m',
$subject, $a11_matches, PREG_SET_ORDER);
结果就是：
array
0=> array
(0
=>
"Jack A.
Smith"
Given
=>
"Jack",
=>
"Jack",
Middle
=>
"A.*
2
=>
"A.",
Family
=>
"Smith",
3
=>
"Smith"
1 => array
(0
=>
"Mary B.
Mil]
Given