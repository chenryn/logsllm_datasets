# GNUnet Presentation for DC10

## Presenter
- **Name:** Not disclosed due to DMCA

## GNUnet Requirements
- **Anonymity**
- **Confidentiality**
- **Deniability**
- **Accountability**
- **Efficiency**

## Applications
- Anonymous sharing of medical histories
- Distributed backups of important data
- Ad-hoc communication between small devices
- And more

## Infrastructure
GNUnet is referred to as a network because:
- File-sharing is just one possible application.
- Most components can be reused for other applications, including:
  - Authentication
  - Discovery
  - Encrypted channels
  - Accounting
- The protocol is extensible, and extensions are planned.

## Related Work
| Network | Gnutella[1, 4] | Chord[24] | Freenet[9] | MojoNation[17] |
|---------|----------------|-----------|------------|----------------|
| Search  | bf-search      | compute   | df-search  | broker         |
| Anonymous | No           | No        | Yes        | No             |
| Accounting | No          | No        | No         | Yes            |
| File-Sharing | Direct     | Migrated  | Insert     | Insert         |

Note: Chord[24], Publius[15], Tangler[16], CAN[19], and Pastry[21, 7] are considered equivalent in this context.

## Outline of the Talk
1. Encoding Data for GNUnet
2. Searching in GNUnet
3. Anonymity in GNUnet
4. Accounting in GNUnet

## Encoding in GNUnet
- **Requirements**
- **Trees**
- **Blocks**
- **Limitations**
- **Benefits**

### Problems with Existing Systems
- Content submitted in plaintext, or
- Content must be inserted into the network and is then stored twice, once in plaintext by the originator and once encrypted by the network (e.g., Freenet[9]).
- In some systems, independent insertions of the same file result in different copies in the network (e.g., Publius[15]).

### Encoding Data for GNUnet: Requirements
- Intermediaries cannot determine the content or queries.
- Hosts can send replies to queries and deny knowing the query or content.
- Keep storage requirements and bandwidth usage minimal.

### Tree Encoding
Files in GNUnet are split into 1k blocks for transport[6]:
- **IBlock**: Indirection node containing hashes of child node data.
- **H(H(Keyword))**: Filenames.
- **RBlock**: Contains file information, description, and hashcode of the root indirection node.
- **IBlock (Root)**: Like other indirection blocks, this contains the hashes of its child nodes.
- **DBlock**: Data block.

### Block Encoding
The hash of 51 blocks and a CRC are combined into an IBlock:
- **f1, f2, ..., f50**: Hashcodes, + 4-byte CRC.
- **Space for 51 20-byte hashcodes** (1024 bytes).
- **CRC**: Cyclic Redundancy Check.
- **DBlocks**: Data blocks.

### Algorithm
1. Split content into 1k blocks B (UDP packet size!).
2. Compute H(B) and H(H(B)).
3. Encrypt B with H(B) using Blowfish.
4. Store EH(B)(B) under H(H(B)).
5. Build inner blocks containing H(B).
6. Root-node R contains description, file-size, and a hash.

### Limitations
- If keywords can be guessed, participating hosts can decrypt the query.
- If exact data can be guessed, participating hosts can match the content.
- This is intended to reduce storage costs.

### Benefits
- Encryption of blocks is independent of each other.
- Inherent integrity checks.
- Multiple (independent) insertions result in identical blocks.
- Very fast, with minimal memory consumption.
- Little chance of fragmentation on the network.
- Small block size enables uniform traffic, making traffic analysis difficult.

## Searching in GNUnet
- **Requirements**
- **Boolean Queries**
- **Searching: Triple-Hash**
- **Routing**
- **Anonymity Preview**

### Problems with Existing Systems
- Centralized, or
- Easy to attack by malicious participants.
- Queries in plaintext, or
- Hard to use keys.
- Not anonymous, or
- Malicious participants can send back garbage without being detected.

### Requirements
- Retrieve content with simple, natural-language keywords.
- Guard against traffic analysis.
- Guard against malicious hosts.
- Do not expose actual queries.
- Do not expose the key to the content.
- Be unpredictable.
- Support arbitrary content locations.
- Be efficient.

### Ease of Use
GNUnet must be easy to use:
- Search for "mp3" AND "Metallica" AND "DMCA".
- GNUnet returns a list of files with descriptions.
- User selects an interesting file.
- GNUnet returns the file.

### Encrypting the Root-Node R
For each file, the user specifies a list of keywords to GNUnet-insert. Then:
- For each keyword K, GNUnet saves EH(K)(R) under H(H(K)).
- If the user searches for "foo" and "bar":
  - Search for "foo", search for "bar".
  - Find which root-nodes that are returned are for the same file (= top-level hash). Display those.

### Searching: Intuition
- Key for block B is H(B).
- Filename for block B is H(H(B)).
- Intuition: ask for H(H(B)), return EH(B)(B).
- Problem: malicious host sends back garbage, intermediaries cannot detect.

### Triple-Hash
- Send query: H(H(H(B))).
- Reply is {H(H(B)), EH(B)(B)}.
- Malicious host must at least have H(H(B)) and thus probably the content.
- It is impossible to do better while maintaining anonymity and confidentiality of the query and content for both sender and receiver.

### Routing
- Keep a table of connected hosts.
- Forward query to n randomly chosen hosts.
- Select n based on load and importance of the query.
- Track forwarded queries and use time-to-live to detect loops.
- Slightly bias the random choice of hosts towards a Chord-like metric.
- Consider the metric when migrating content.

### GNUnet: Traffic Analysis Nightmare
- Group several queries into one larger packet.
- Introduce delays when forwarding.
- Packets can contain a mixture of queries, content, node-discovery, garbage, etc.
- Make all packets look uniform in size.
- Encrypt all traffic. Add noise if idle.

### Open Issues
- Approximate queries.

## Anonymity in GNUnet
- **Techniques to Achieve Anonymity**
- **Attacks**
- **Efficiency**
- **A New Perspective**
- **GNUnet is Malicious**

### Building Blocks
- Indirections[25]
- Random Delays[10]
- Noise[11, 22]
- Confidential Communication[18]

### Attacks on Anonymity
- Traffic Analysis[3]
- Timing Analysis
- Malicious Participants
- Statistical Analysis[20, 23]

### Efficiency
If nodes indirect queries and replies, this has serious efficiency implications:
- For n indirections, the overhead in bandwidth (and encryption time) is n-times the size of the content.

### Money Laundering
Illustrating GNUnet's perspective[5] with the example of money laundering:
- If you wanted to hide your financial traces, would you:
  - Give the money to your neighbor,
  - Expect that your neighbor gives it to me,
  - Hope that I give it to the intended recipient?
- Worse: trust everybody involved, not only that they won't steal the money but also won't tell the FBI?

### Banks!
In reality, banks are in the best position to launder money:
- Take 1,000,000 transactions from customers,
- Add your own little transaction,
- Better not keep any records.
- As long as not all external entities cooperate against the bank, nobody can prove which transaction was yours.

### Why Indirect?
- Indirections do not protect the sender or receiver.
- Indirections can help the indirector to hide its own traffic.
- If the indirector cheats (e.g., by keeping the sender address when forwarding), it only exposes its own action and does not change the anonymity of the original participants.

### Key Realization
Anonymity can be measured in terms of:
- How much traffic from non-malicious hosts is indirected compared to self-generated traffic.
- In a time-interval small enough such that timing analysis cannot disambiguate the sources.

### GNUnet: Anonymity for Free
From this realization, we can motivate GNUnet's anonymity policy:
- Indirect when idle,
- Forward when busy,
- Drop when very busy.

### Accounting in GNUnet
- **Goals**
- **Requirements**
- **Human Relationships!**
- **Digital Cash?**
- **Transitivity**
- **Open Issues**

### Common Problems
- No accounting: easy to mount DoS attacks[12].
- Overpricing legitimate use[2].
- Centralization[8].
- Lack of acceptance for micropayments.
- Patents.

### Goals
- Reward contributing nodes with better service.
- Detect attacks:
  - Detect flooding.
  - Detect abuse.
  - Detect excessive freeloading, but
  - Allow harmless amounts of freeloading.

### Requirements
- No central server (rules out [17, 8]).
- No trusted authority (problem of initial accumulation, see [13]).
- Assume everyone else is malicious and violates the protocols.
- Everyone can create a new identity at any time.
- New nodes should be able to join the network.

### Human Relationships
- We do not have to trust anyone to form an opinion.
- Opinions are formed on a one-on-one basis and may not be perceived equally by both parties.
- We do not charge for every little favor.
- We are grateful for every favor.
- There is no guarantee in life, particularly that Alice will be kind to Bob because he was kind to her.

### Excess-based Economy
GNUnet's economy[14] is based on the following principles:
- If you are idle, doing a favor for free does not cost anything.
- If someone does you a favor, remember it.
- If you are busy, work for whoever you like most, but remember that you paid the favor back.
- Have a neutral attitude towards new entities.
- Never dislike anyone (they could create a new identity anytime).

### Transitivity
If a node acts on behalf of another, it must ensure that the sum of the charges it may suffer from other nodes is lower than the amount it charged the sender:

```
A
B
C
D
10
3
3
```

### Open Issues
- If a node is idle, it will not charge the sender.
- If a node delegates (indirects), it will use a lower priority than the amount it charged itself.
- If an idle node delegates, it will always give priority 0.
- A receiver cannot benefit from answering a query with priority 0.
- If the priority is 0, content will not be marked as valuable.

## Conclusion
- GNUnet is a cool system for privacy.
- GNUnet can already be used.
- GNUnet could get much better.

## GNUnet Online
- **Website**: http://www.ovmj.org/GNUnet/

## GNUnet Resources
- FAQ
- Mailing Lists
- Mantis
- README
- Sources
- WWW Page

## References
[1] E. Adar and B. Huberman. Free riding on gnutella. Technical report, Xerox Parc, Aug. 2000.
[2] Adam Back. Hash cash - a denial of service counter-measure, 1997.
[3] Adam Back, Ulf Moeller, and Anton Stiglic. Traffic analysis attacks and trade-offs in anonymity providing systems.
[4] S. Bellovin. Security aspects of napster and gnutella, 2000.
[5] K. Bennett and C. Grothoﬀ. GAP - practical anonymous networking. 2002.
[6] K. Bennett, C. Grothoﬀ, T. Horozov, and I. Patrascu. Efficient sharing of encrypted data. In Proceedings of ASCIP 2002, 2002.
[7] M. Castro, P. Druschel, Y. C. Hu, and A. Rowstron. Exploiting network proximity in peer-to-peer overlay networks.
[8] D. Chaum, A. Fiat, and M. Naor. Untraceable electronic cash. In Crypto ’88, pages 319–327, 1988.
[9] I. Clarke. A distributed decentralised information storage and retrieval system, 1999.
[10] G. Danezis, R. Dingledine, D. Hopwood, and N. Mathewson. Mixminion: Design of a type III anonymous remailer, 2002.
[11] Wei Dei. Pipenet.
[12] Roger Dingledine, Michael J. Freedman, and David Molnar. Accountability. 2001.
[13] Friedrich Engels. Umrisse zu einer Kritik der Nationalökonomie. 1844.
[14] C. Grothoﬀ. An excess-based economy. 2002.
[15] Aviel D. Rubin Marc Waldman and Lorrie Faith Cranor. Publius: A robust, tamper-evident, censorship-resistant, web publishing system. In Proc. 9th USENIX Security Symposium, pages 59–72, August 2000.
[16] David Mazieres Marc Waldman. Tangler: A censorhip-resistant publishing system based on document entanglements. 2001.
[17] Mojo Nation. Technology overview, Feb. 2000.
[18] George Orwell. 1984. 1949.
[19] Sylvia Ratnasamy, Paul Francis, Mark Handley, Richard Karp, and Scott Shenker. A scalable content addressable network. Technical Report TR-00-010, Berkeley, CA, 2000.
[20] Michael K. Reiter and Aviel D. Rubin. Crowds: anonymity for Web transactions. ACM Transactions on Information and System Security, 1(1):66–92, 1998.
[21] Antony Rowstron and Peter Druschel. Pastry: Scalable, decentralized object location and routing for large-scale peer-to-peer systems.
[22] R. Sherwood and B. Bhattacharjee. P5: A protocol for scalable anonymous communication. In IEEE Symposium on Security and Privacy, 2002.
[23] Clay Shields and Brian Neil Levine. A protocol for anonymous communication over the internet. In ACM Conference on Computer and Communications Security, pages 33–42, 2000.
[24] Ion Stoica, Robert Morris, David Karger, Frans Kaashoek, and Hari Balakrishnan. Chord: A scalable Peer-To-Peer lookup service for internet applications. Pages 149–160.
[25] P. F. Syverson, D. M. Goldschlag, and M. G. Reed. Anonymous connections and onion routing. In IEEE Symposium on Security and Privacy, pages 44–54, Oakland, California, 4–7 1997.