1
gnunet
presentation for DC10
by
— not disclosed due to DMCA —
2
gnunet Requirements
• Anonymity
• Conﬁdentiality
• Deniability
• Accountability
• Eﬃciency
3
Applications
• anonymous sharing of medical histories
• distributed backups of important data
• ad-hoc communication between small devices
• and others
4
Infrastructure
We call gnunet a network because:
• ﬁle-sharing is just one possible application
• most components can be re-used for other applications:
⋆ authentication
⋆ discovery
⋆ encrypted channels
⋆ accounting
• the protocol is extensible and extentions are planned
5
Related Work
Network
Gnutella[1, 4]
Chord[24]
Freenet[9]
MojoNation[17]
Search
bf-search
compute
df-search
broker
Anonymous
no
no
yes
no
Accounting
no
no
no
yes
File-Sharing
direct
migrated
insert
insert
Chord[24], Publius[15], Tangler[16], CAN[19] and Pastry[21, 7] are equivalent from the point of view of this discussion.
6
Outline of the Talk
1. Encoding data for gnunet
2. Searching in gnunet
3. Anonymity in gnunet
4. Accounting in gnunet
7
Encoding in gnunet
• Requirements
• Trees
• Blocks
• Limitations
• Beneﬁts
8
Problems with existing Systems
• Content submitted in plaintext, or
• content must be inserted into the network and is then
stored twice, in plaintext by the originator and encrypted
by the network (e.g. Freenet[9]);
• in some systems, independent insertions of the same
ﬁle results in diﬀerent copies in the network (e.g.
Publius[15])
9
Encoding data for gnunet: Requirements
• intermediaries can not ﬁnd out content or queries
• hosts can send replies to queries and deny knowing what
the query or the content was for
• keep storage requirements (and bandwidth) small
10
Tree Encoding
Files in gnunet are split into 1k blocks for the
transport[6]:
IBlock: indirection node
             containing hashes of
             child node data
H(H(Keyword))
Filenames
RBlock: Contains file information,
              description, and hashcode 
              root indirection node.
IBlock (Root): Like other indirection
            blocks, this contains the
            hashes of its child nodes.
DBlock
H(H(Root IBlock))
H(H(IBlock))
H(H(DBlock))
Encoding of the entire ﬁle
11
Block Encoding
The hash of 51 blocks and a CRC are combined to an
IBlock:
f1
f
f 50
...
2
H(f  ), ..., H(f    )
50
1
hashcodes, + 4−byte CRC
Space for 51  20−byte
(= 1024 bytes)
IBlock
...
1024 bytes
CRC
DBlocks
Encoding of the entire ﬁle
12
“Algorithm”
• split content into 1k blocks B (UDP packet size!)
• compute H(B) and H(H(B))
• encrypt B with H(B), with Blowﬁsh
• store EH(B)(B) under H(H(B))
• build inner blocks containing H(B)
• root-node R contains description, ﬁle-size and a hash
13
Limitations
• If the keywords can be guessed...
participating hosts
can decrypt the query.
• If the exact data can be guessed... participating hosts
can match the content.
• This is intended to reduce storage costs!
14
Beneﬁts
• encryption of blocks independent of each other
• inherent integrity checks
• multiple (independent) insertions result in identical
blocks
• very fast, minimal memory consumption
• little chance of fragmentation on the network
• small blocksize enables us to make traﬃc uniform and
thus traﬃc analysis hard
15
Searching in gnunet
• Requirements
• Boolean queries
• Searching: Triple-Hash
• Routing
• Anonymity preview
16
Problems with existing Systems
• Centralized, or
• easy to attack by malicious participants.
• Queries in plaintext, or
• hard to use keys.
• Not anonymous, or
• malicious participants can send back garbage without
begin detected.
17
Requirements
• retrieve content with simple, natural-language keyword
• guard against traﬃc analysis
• guard against malicious hosts
• do not expose actual query
• do not expose key to the content
• be unpredictable
• support arbitrary content locations
• be eﬃcient
18
Ease of Use
gnunet must be easy to use:
• search for “mp3” AND “Metallica” AND “DMCA”
• gnunet returns list of ﬁles with description
• user selects interesting ﬁle
• gnunet returns the ﬁle
19
Encrypting the root-node R
For each ﬁle, the user speciﬁes a list of keywords to
gnunet-insert. Then:
• For each keyword K:
• gnunet saves EH(K)(R) under H(H(K)).
If the user searchs for “foo” and “bar”:
• Search for “foo”, search for “bar”.
• Find which root-nodes that are returned are for the
same ﬁle (= top-level hash). Display those.
20
Searching: Intuition
• Key for block B is H(B).
• Filename for block B is H(H(B)).
• Intuition: ask for H(H(B)), return EH(B)(B).
• Problem: malicious host sends back garbage, interme-
diaries can not detect
21
Triple-Hash
• Send query: H(H(H(B))).
• Reply is {H(H(B)), EH(B)(B)}.
• Malicious host must at least have H(H(B)) and thus
probably the content.
• It is impossible to do better together with anonymity
and conﬁdentiality of query and content for sender and
receiver.
22
Routing
• keep a table of hosts that we are connected with
• forward query to n randomly chosen hosts
• select n based on load and importance of the query
• keep track of queries forwarded, use time-to-live to
detect loops
• bias the random choice of the hosts slightly towards a
Chord-like metric.
• take metric into account when migrating content
23
gnunet: Traﬃc Analysis Nightmare
• Group several queries to one larger packet.
• Introduce delays when forwarding.
• Packets can contain a mixture of queries, content, node-
discovery, garbage, etc.
• Make all packets look uniform (in size).
• Encrypt all traﬃc. Add noise if idle.
24
Open issues
• Approximate queries.
25
Anonymity in gnunet
• Techniques to achieve anonymity
• Attacks
• Eﬃciency
• A new perspective
• gnunet is malicious
26
Building Blocks
• indirections[25]
• random delays[10]
• noise[11, 22]
• conﬁdential communication[18]
A
B
C
27
Attacks on Anonymity
• traﬃc analysis[3]
• timing analysis
• malicious participants
• statistical analysis[20, 23]
28
Eﬃciency
If nodes indirect queries and replies, this has serious
eﬃciency implications:
For n indirections, the overhead in bandwidth (and
encryption time) is n-times the size of the content.
29
Money Laundering
Let’s illustrate gnunet’s perspective[5] with the example
of money laundering. If you wanted to hide your ﬁnancial
traces, would you:
• Give the money to your neighbor,
• expect that your neighbor gives it to me,
• and then hope that I give it to the intended recipient?
Worse: trust everybody involved, not only that we do not
steal the money but also do not tell the FBI?
30
Banks!
In reality, banks are in the best position to launder
money:
• Take 1.000.000 transactions from customers,
• add your own little transaction,
• and better not keep any records.
As long as not all external entities cooperate against the
bank, nobody can prove which transaction was ours.
31
Why indirect?
• Indirections do not protect the sender or receiver.
• Indirections can help the indirector to hide its own
traﬃc.
• If the indirector cheats (e.g.
by keeping the sender
address when forwarding) it only exposes its own action
and does not change the anonymity of the original
participants.
32
Key Realization
Anonymity can be measured in terms of
• how much traﬃc from non-malicious hosts is indirected
compared to the self-generated traﬃc
• in a time-interval small enough such that timing analysis
can not disambiguate the sources.
33
gnunet: anonymity for free
From this realization, we can motivate gnunet’s
anonymity policy:
• indirect when idle,
• forward when busy,
• drop when very busy.
B
C
A
1
2
3
4
Rationale: if we are indirecting lots of traﬃc, we don’t
need more to hide ourselves and can be more eﬃcient by
merely forwarding.
34
Accounting in gnunet
• Goals
• Requirements
• Human Relationships!
• Digital Cash?
• Transitivity
• Open issues
35
Common Problems
• No accounting: easy to mount DoS attack[12]
• Overpricing legitimate use[2]
• Centralization[8]
• Lack of acceptance for micropayments
• Patents
36
Goals
• Reward contributing nodes with better service.
• Detect attacks:
⋆ detect ﬂooding,
⋆ detect abuse,
⋆ detect excessive free-loading, but
⋆ allow harmless amounts of free-loading
37
Requirements
• No central server (rules out [17, 8]).
• No trusted authority (problem of initial accumulation,
see [13]).
• Everybody else is malicious and violates the protocols.
• Everybody can make-up a new identity at any time.
• New nodes should be able to join the network.
38
Human Relationships
• We do not have to trust anybody to form an opinion.
• Opinions are formed on a one-on-one basis, and
• may not be perceived equally by both parties.
• We do not charge for every little favour.
• We are grateful for every favour.
• There is no guarantee in life, in particular Alice does
not have to be kind to Bob because he was kind to her.
39
Excess-based Economy
gnunet’s economy[14] is based on the following
principals:
• if you are idle, doing a favour for free does not cost
anything;
• if somebody does you a favour, remember it;
• if you are busy, work for whoever you like most, but
remember that you paid the favour back;
• have a neutral attitude towards new entities;
• never dislike anybody (they could create a new identity
anytime).
40
Transitivity
If a node acts on behalf on another, it must ensure that
the sum of the charges it may suﬀer from other nodes is
lower than the amount it charged the sender:
A
B
C
D
10
3
3
Transitivity in the gnunet economy.
41
Open Issues
• if a node is idle, it will not charge the sender;
• if a node delegates (indirects), it will use a lower priority
than the amount it charged itself;
• if an idle node delegates, it will always give priority 0.
• A receiver can not beneﬁt from answering a query with
priority 0.
• If the priority is 0, content will not be marked as
valuable.
42
Conclusion
• gnunet is a cool system for privacy.
• gnunet can already be used.
• gnunet could get much better.
43
gnunet Online
http://www.ovmj.org/GNUnet/
44
gnunet resources
• FAQ
• Mailinglists
• Mantis
• README
• Sources
• WWW page
45
References
[1] E. Adar and B. Huberman. Free riding on gnutella. Technical
report, Xerox Parc, Aug. 2000.
[2] Adam Back. Hash cash - a denial of service counter-measure,
1997.
[3] Adam Back, Ulf Moeller, and Anton Stiglic.
Traﬃc analysis
attacks and trade-oﬀs in anonymity providing systems.
[4] S. Bellovin. Security aspects of napster and gnutella, 2000.
[5] K. Bennett and C. Grothoﬀ. gap - practical anonymous network-
ing. 2002.
46
[6] K. Bennett, C. Grothoﬀ, T. Horozov, and I. Patrascu. Eﬃcient
sharing of encrypted data. In Proceedings of ASCIP 2002, 2002.
[7] M. Castro, P. Druschel, Y. C. Hu, and A. Rowstron. Exploiting
network proximity in peer-to-peer overlay networks.
[8] D. Chaum, A. Fiat, and M. Naor. Untraceable electronic cash.
In Crypto ’88, pages 319–327, 1988.
[9] I. Clarke. A distributed decentralised information storage and
retrieval system, 1999.
[10] G. Danezis, R. Dingledine, D. Hopwood, and N. Mathewson.
Mixminion: Design of a type iii anonymous remailer, 2002.
[11] Wei Dei. Pipenet.
47
[12] Roger Dingledine, Michael J. Freedman, and David Molnar.
Accountability. 2001.
[13] Friedrich Engels. Umrisse zu einer Kritik der National¨okonomie.
1844.
[14] C. Grothoﬀ. An excess based economy. 2002.
[15] Aviel D. Rubin Marc Waldman and Lorrie Faith Cranor. Publius:
A robust, tamper-evident, censorship-resistant, web publishing
system. In Proc. 9th USENIX Security Symposium, pages 59–72,
August 2000.
[16] David Mazieres Marc Waldman. Tangler: A censorhip-resistant
publishing system based on document entanglements. 2001.
48
[17] Mojo Nation. Technology overview, Feb. 2000.
[18] George Orwell. 1984. 1949.
[19] Sylvia Ratnasamy, Paul Francis, Mark Handley, Richard Karp,
and Scott Shenker.
A scalable content addressable network.
Technical Report TR-00-010, Berkeley, CA, 2000.
[20] Michael K. Reiter and Aviel D. Rubin. Crowds: anonymity for
Web transactions. ACM Transactions on Information and System
Security, 1(1):66–92, 1998.
[21] Antony Rowstron and Peter Druschel. Pastry: Scalable, decen-
tralized object location and routing for large-scale peer-to-peer
systems.
49
[22] R. Sherwood and B. Bhattacharjee. P5: A protocol for scalable
anonymous communication. In IEEE Symposium on Security and
Privacy, 2002.
[23] Clay Shields and Brian Neil Levine. A protocol for anonymous
communication over the internet. In ACM Conference on Com-
puter and Communications Security, pages 33–42, 2000.
[24] Ion Stoica, Robert Morris, David Karger, Frans Kaashoek, and
Hari Balakrishnan.
Chord:
A scalable Peer-To-Peer lookup
service for internet applications. pages 149–160.
[25] P F Syverson, D M Goldschlag, and M G Reed. Anonymous
connections and onion routing. In IEEE Symposium on Security
and Privacy, pages 44–54, Oakland, California, 4–7 1997.