and error measure.
• Residual sketch S: It is the multi-level sketch with the fre-
quencies of large flows removed.
• List of l bit-level counter distributions {N(p[k], σ
2[k])}: The
distribution of Ri, j[k] for the k-bit, where 1 ≤ k ≤ l, is
characterized by the mean p[k] and the variance σ
2[k].
Algorithm. To decompose the three components from a
multi-level sketch, SketchLearn learns a statistical model
in a self-adaptive manner as there is no accurate model to
directly characterize and separate a mix of large and small
flows. Algorithm 1 details our close-loop model inference
algorithm. It takes the whole multi-level sketch S = {Vi, j[k]}
as input. Initially, it sets the large flow list F as empty and a
control parameter θ = 1/2 (lines 1-2) (see details about θ in
§4.4). It also computes the l bit-level counter distributions
{N(p[k], σ
2[k])} (line 3); even though there may exist large
flows that compromise Theorem 1, we let SketchLearn start
with such inaccurate estimates for the l bit-level distributions.
To eliminate the interference from large flows, SketchLearn
iteratively extracts large flows based on the (inaccurate) dis-
tributions (lines 5-8). In each iteration, it removes the ex-
tracted flows in set F ′ from S (line 9), and recomputes the
distributions {N(p[k], σ
2[k])} (line 10). The iterations termi-
nate until all l bit-level counter distributions fit Gaussian
distributions well (lines 11-12). If no large flows are extracted
in this iteration, the algorithm halves θ (lines 13-14).
The algorithm calls four subroutines: (i) computing bit-
level counter distributions (lines 2 and 10), (ii) extracting
large flows (line 7), (iii) removing extracted flows from S
(line 9) and (iv) checking the termination condition (line 11).
We elaborate them below.
Computing distributions. We compute the bit-level counter
2[k]) for the k-bit, where 1 ≤ k ≤ l, by
distribution N(p[k], σ
estimating its mean p[k] and variance σ
2[k]. By Theorem 1,
Algorithm 1 Model Inference
Input: Multi-level sketch S = {Vi, j[k] | 0 ≤ k ≤ l, 1 ≤ i ≤ r, 1 ≤ j ≤ c }
1: Large flow list F = ∅
2: θ = 1
2
3: Bit-level counter distributions {N(p[k], σ 2[k])} = ComputeDist(S)
4: while true do
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
Set of extracted large flows F′ = ∅
for all stack (i, j), 1 ≤ i ≤ r, 1 ≤ j ≤ c do
F = F ∪ F′
RemoveFlows(S, F′)
{N(p[k], σ 2[k])} = ComputeDist(S)
if Terminate({N(p[k], σ 2[k])}) then
if F′ == ∅ then
F′ = F′ ∪ ExtractLargeFlows(θ, (i, j), S, {N(p[k], σ 2[k])})
break
θ = θ/2
Ri, j[k]’s from all stacks follow an identical distribution. Thus,
each stack provides one sample for N(p[k], σ
2[k]). We esti-
mate p[k] and σ
2[k] from the r × c samples in the level-k
sketch, by computing p[k] and σ
2[k] as the sample mean and
sample variance of Ri, j[k] across for all (i, j), respectively.
For Gaussian distributions, such estimates are unbiased and
have minimum variance [10]. If all large flows are extracted,
the estimates converge to the true values (see Theorem 1).
Large flow extraction. It is the core subroutine in model
inference. It works on a per-stack basis. Recall that Vi, j[0] is
the overall frequency of flows in stack (i, j). The subroutine
takes a parameter θ (where 0 ≤ θ ≤ 1), multi-level sketch
S, the estimated distributions {N(p[k], σ
2[k])} as input (see
§4.4 for how θ is set), and compares Ri, j[k] with θ and p[k].
The intuition is that a large flow significantly influences
the counter values in S. When other flows in stack (i, j)
have limited sizes, a large flow dominates the stack and
often leaves Ri, j[k] either very large (if its k-bit is one) or
very small (if its k-bit is zero). Even though the large flow
is not significantly dominant, it should at least alter the
counter distributions, making Ri, j[k] deviate much from its
expectation p[k]. Thus, by checking Ri, j[k] and its difference
from p[k], we can determine the existence of large flows.
Specifically, the subroutine performs the following five steps
to extract flows exceeding θVi, j[0].
Step (i) Estimating bit-level probabilities. We estimate a
probability ˆp[k] to quantify the likelihood that the k-bit is
equal to one, where 1 ≤ k ≤ l. We first check whether Ri, j is
dominated by a potentially large flow. If Ri, j[k]  0.99 in our paper), the subroutine sets the k-
bit as one or zero, respectively; otherwise, if neither of them
is close to one, the k-bit is assigned a wildcard bit ∗, meaning
that it can be either zero or one. We then obtain a template
flowkey composed of zero, one, and ∗. We enumerate all
candidate flows matching the template and check whether
they can be hashed to stack (i, j).
Step (iii) Estimating frequencies. We estimate the frequency
for each candidate flowkey. We first produce a frequency
estimate for each k-bit using the idea of maximum likelihood
estimation. Our goal is that after excluding the contribution
of some candidate flow f , the residual Ri, j[k] is equal to its
expectation p[k]. Specifically, if we remove f , the residual
overall frequency is reduced to Vi, j[0]− sf . If the k-bit is one,
Vi, j[k] is also reduced to Vi, j[k] − sf ; however, if the k-bit is
zero, Vi, j[k] remains unchanged after f is removed (as we do
not update the counter). Thus, by setting the residual Ri, j[k]
(i.e., the ratio of the residual Vi, j[k] to the residual Vi, j[0])
equal to p[k], we can estimate sf as
(cid:40) Ri, j[k]−p[k]
sf =
1−p[k] Vi, j[0],
(1 − Ri, j[k]
p[k] )Vi, j[0],
if k-bit is one,
if k-bit is zero.
The final frequency estimate is taken as the median of the
estimates for all l levels of sketches to avoid outliers.
Step (iv) Associating flowkeys with bit-level probabilities.
If the k-bit is equal to one (resp. zero), we associate it with
a bit-level probability ˆp[k] (resp. 1 − ˆp[k]). Each candidate
flowkey is accordingly associated with a vector of l bit-level
probabilities to quantify the correctness of the flowkey. In-
tuitively, if most of the bits have high bit-level probabilities,
the candidate flowkey is more likely to correspond to a true
flowkey. In §5.2, we also show how to leverage this vector
to attach an error measure to a given flow.
Step (v) Verifying candidate flows. The subroutine may
produce false positives since there are multiple flows being
constructed by matching ∗. We filter out false positives with
the aid of other stacks. Specifically, we hash an extracted
flow with other hash functions except hi to some other stack
(i′, j′), where i′ (cid:44) i. We compare the current frequency
estimate using the counters in other stacks, and take the
smallest value as the final frequency estimate. Finally, we
check the final frequency estimate and remove any extracted
flow if the final frequency estimate is below θVi, j[0].
Example. Figure 5 depicts the large flow extraction sub-
routine with an example, in which we extract four-bit flows
3 from a stack (i, j) whose overall frequency is
with θ = 1
SIGCOMM ’18, August 20–25, 2018, Budapest, Hungary
Figure 5: Example: large flow extraction.
Vi, j[0] = 30. For level 1, since 1 − Ri, j[1] = 1 − 21
30 = 0.3  0.99, so we estimate f [3] = 1 and the estimated
frequency is 17/30−0.36
· 30 = 9.7. Similarly, for level 4, after
1−0.36
assuming f [4] = 1 and sf ≥ θ × 30 = 10, the residual Ri, j[4]
is 0.2, which is far from its expectation 0.5. We assign a *
to f [4] and produce two frequency estimates. Finally, we
have two candidate flowkeys 1011 and 1010, both of which
have the same frequency estimate if we take the median
across the four levels. We check whether the two candidate
flowkeys are actually hashed into the stack, and compare
their frequency estimates using the counter values in other
stacks to filter out wrong flows.
Removing large flows from S. Removing a flow f is in-
verse to the update (see §3.2). It hashes f to the correspond-
ing columns and subtracts the counter in level k by the es-
timated flow frequency if f [k] = 1. Recall that our large
flow extraction subroutine verifies each extracted flow and
its frequency by rehashing it to multiple stacks, so as to
remove any wrong flow. The probability that a false posi-
tive flow remains is actually small under independent hash
functions. Thus, the estimation error is also small has very
limited impact on the final inference results.
Termination. The large flow extraction depends on the ex-
istence of large flows; otherwise, the observed Ri, j[k] already
fits a Gaussian distribution well by Theorem 1. We check
by fitting Ri, j[k] across all stacks to N(p[k], σ
2[k]). By the
Gaussian distribution, when more than 68.26%, 95.44%, and
99.73% of the observed values of Ri, j[k] (for all (i, j)) deviate
p[k] within one, two, and three standard deviations, respec-
tively, we terminate the algorithm.
4.4 Analysis
The effectiveness of our model learning depends on what the
minimum frequency would be in order that all flows above
Derive p̂[4]: if removing a large flow-2, if f[4]=12, if f[4]=0Level 0Level 1:Level 2:Level 3:Level 4:p̂[1]=1, f[1]=1302114N(0.5, 0.01)N(0.4, 0.01)N(0.36, 0.1)N(0.5, 0.3)p̂[2]=0, f[2]=0p̂[3]=0.99, f[3]=1p̂[4]=0.38, f[4]=*θ=1/31212.59.7Probability & FlowkeyFrequencyInputDerive p̂[3]: if removing a large flowLevel 3177Level 03020Ratio: 17/30→7/20=0.35Level 4144Level 03020(Close to 0.36)Ratio: 14/30→4/20=0.20(Far from 0.5)717CounterSIGCOMM ’18, August 20–25, 2018, Budapest, Hungary
Huang et al.
with more than 1
c of the total frequency must be extracted.
the minimum frequency are guaranteed to be extracted. A
smaller minimum frequency not only implies more flows
to be extracted, but also leaves smaller remaining flows in
the residual sketch and makes the residual sketch fit better
Gaussian distributions according to Theorem 1. Note that
when there are only a handful of flows, there are few hash
collisions in each stack. In this case, each flow is likely to
dominate its own hashed stacks and can be easily extracted.
Thus, our analysis only focuses on the case where there are
numerous small flows.
Guaranteed extraction frequency. SketchLearn provides
guarantees for a certain frequency above which all large
flows are extracted. First, we consider a single stack (i, j).
2Vi, j[0], it is guaranteed
1
We argue that if a flow f has sf >
to be extracted from stack (i, j). The reason is that when
2, either Ri, j[k] < θ (if the k-bit of f is one) or
we set θ = 1
1 − Ri, j[k] < θ (if the k-bit of f is zero) must hold. In this
case, the flow extraction can deterministically reconstruct
each bit of f . Theorem 2 extends this single stack case for
the entire sketch (see the proof in [34]).
Theorem 2. For a multi-level sketch with c columns, flows
Intuitively, since large flows are iteratively extracted, the
total residual frequency contributed by the remaining small
flows in one stack will be no larger than 1
of the overall fre-
c
quency, provided that a hash function uniformly distributes
flows across c columns (Assumption 1). Thus, if a flow has