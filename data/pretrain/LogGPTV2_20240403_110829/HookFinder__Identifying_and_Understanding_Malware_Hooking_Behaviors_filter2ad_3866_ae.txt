### 5. Dynamic Taint Analysis for Detecting and Analyzing Privacy-Breaching Malware

Dynamic taint analysis is a powerful technique used to detect and analyze privacy-breaching malware [33]. Additionally, this method has been applied to other areas, such as automatically extracting protocol message formats [5] and preventing cross-site scripting (XSS) attacks [32].

### 7. Conclusion

In this paper, we introduced a novel dynamic analysis approach, fine-grained impact analysis, which is designed to identify malware hooking behaviors. This approach characterizes the impacts of malware on its system environment and monitors whether any of these impacts are used to redirect system execution to malicious code. By capturing the intrinsic characteristics of hooking behavior, our technique can identify new and previously unknown hooks. Furthermore, we developed a semantics-aware impact dependency analysis method to extract essential information about the hooking mechanisms, which is represented in the form of hook graphs. We implemented a prototype, HookFinder, and conducted extensive experiments using representative malware samples from various categories. The experimental results demonstrated that HookFinder can accurately identify hooking behaviors in all tested samples, and the generated hook graphs provide precise insights into their hooking mechanisms.

### 8. Acknowledgement

We would like to express our gratitude to our shepherd, Niels Provos, and the anonymous reviewers for their detailed suggestions and insightful comments.

This research was partially supported by the National Science Foundation under Grants No. 0311808, No. 0433540, No. 0448452, No. 0627511, and CCF-0424422. Additional support was provided by the U.S. Army Research Office under the Cyber-TA Research Grant No. W911NF-06-1-0316 and under grant DAAD19-02-1-0389 through CyLab at Carnegie Mellon University. This work was also partially funded by the Korean Ministry of Information and Communication (IMC) and the Korean Institute for Information Technology Advancement (IITA) under program [2005-S-606-02, Next Generation Prediction and Response Technology for Computer and Network Security Incidents]. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the National Science Foundation.

### References

[1] Afxrootkit. http://www.rootkit.com/project.php?id=23.
[2] BitBlaze: Binary analysis for COTS protection and malicious code defense. http://bitblaze.cs.berkeley.edu/.
[3] D. Brumley, C. Hartwig, Z. Liang, J. Newsome, D. Song, and H. Yin. Botnet Analysis, chapter Automatically Identifying Trigger-based Behavior in Malware. 2007.
[4] J. Butler and G. Hoglund. VICE–catch the hookers! In Black Hat USA, July 2004. http://www.blackhat.com/presentations/bh-usa-04/bh-us-04-butler/bh-us-04-butler.pdf.
[5] J. Caballero, H. Yin, Z. Liang, and D. Song. Polyglot: Automatic extraction of protocol message format using dynamic binary analysis. In Proceedings of the 14th ACM Conferences on Computer and Communication Security (CCS’07), October 2007.
[6] Clandestine file system driver. http://www.rootkit.com/vault/merlvingian/cfsd.zip.
[24] J. Rutkowska. System virginity verifier: Defining the roadmap for malware detection on Windows systems. In Hack In The Box Security Conference, September 2005. http://www.invisiblethings.org/papers/hitb05_virginity_verifier.ppt.
[25] J. Rutkowska. Red Pill... Or How To Detect VMM Using (Almost) One CPU Instruction. http://invisiblethings.org/papers/redpill.html, 2006.
[26] J. Rutkowska. Rootkit hunting vs. compromise detection. In Black Hat Federal, January 2006. http://www.invisiblethings.org/papers/rutkowska_bhfederal2006.ppt.
[27] Sony’s DRM Rootkit: The Real Story. http://www.schneier.com/blog/archives/2005/11/sonys_drm_rootk.html.
[28] G. E. Suh, J. W. Lee, D. Zhang, and S. Devadas. Secure program execution via dynamic information flow tracking. In Proceedings of the 11th International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS’04), October 2004.
[29] TEMU: The BitBlaze dynamic analysis component. http://bitblaze.cs.berkeley.edu/temu.html.
[30] UAY kernel-mode backdoor. http://uty.512j.com/uay.rar.
[31] Vanquish. https://www.rootkit.com/vault/xshadow/vanquish-0.2.1.zip.
[32] P. Vogt, F. Nentwich, N. Jovanovic, E. Kirda, C. Kruegel, and G. Vigna. Cross-Site Scripting Prevention with Dynamic Data Tainting and Static Analysis. In Proceedings of the Network and Distributed System Security Symposium (NDSS’07), February 2007.
[33] H. Yin, D. Song, E. Manuel, C. Kruegel, and E. Kirda. Panorama: Capturing system-wide information flow for malware detection and analysis. In Proceedings of the 14th ACM Conferences on Computer and Communication Security (CCS’07), October 2007.

### Appendix: Hardware-level Hook Graphs

**Figure 6. Hardware-level hook graph for Uay backdoor**

```
f5b5bf44: push %edi 
[0xf56f2cac]=0x81ef2218
f5b5bfcf: pop %edi
f5b5c583: mov (%edi), %esi
f5b5c589: lea 0x40(%esi), %eax
f5b5c58c: push %eax
[0xf56f2cc4]=0x81ed3548
f5b5bf13: mov 0xc(%ebp), %esi
f5b5bf4f: push %eax
[0xf56f2ca0]=0xf56f2cc4
806f447f: push %esi 
Callee: 0x0 ESP: 0xf56f2ca8
[0xf56f2c8c]=0x81ed3548
f83c1158: mov 0x8(%ebp), %ecx 
Callee: 0xf83c1145 ESP: 0xf56f2c9c
804df993: pop %esi 
Callee: 0x0 ESP: 0xf56f2ca8
f83c115b: mov %eax, (%ecx) 
Callee: 0xf83c1145 ESP: 0xf56f2c9c
8054b051: push %esi 
Callee: 0xf83c1145 ESP: 0xf56f2c9c
[0xf56f2c38]=0x81ed3548
f83c115b: mov %eax, (%ecx) 
Callee: 0xf83c1145 ESP: 0xf56f2c9c
[0xf56f2cc4]=0x81e563a8
8054b12f: pop %esi 
Callee: 0xf83c1145 ESP: 0xf56f2c9c
f5b5bfc5: mov 0xc(%ebp), %eax
f5b5bfcd: mov %eax, (%esi)
f5b5bfcd: mov %eax, (%esi)
[0x81ed3548]=0x81e563a8
f83e2faa: call *0x40(%eax)
f5b5c60d: push %eax
[0xf56f2ce4]=0xf56f2d68
f83c827f: mov 0xc(%ebp), %eax 
Callee: 0xf83c817d ESP: 0xf56f2cdc
f83c828c: mov %ebx, (%eax) 
Callee: 0xf83c817d ESP: 0xf56f2cdc
f83c828c: mov %ebx, (%eax) 
Callee: 0xf83c817d ESP: 0xf56f2cdc
[0xf56f2d68]=0x81dd0f28
f83c829a: mov %ecx, 0x10(%ebx) 
Callee: 0xf83c817d ESP: 0xf56f2cdc
[0x81dd0f38]=0x81e95ca8
f5b5c68d: mov 0xfffffffc(%ebp), %eax
f5b5c695: mov 0x10(%eax), %esi
f5b5c511: push %esi
[0xf56f2cd8]=0x81e95ca8
f5b5c5bc: pop %esi
f5b5c6a0: mov 0x10(%esi), %esi
f5b5c511: push %esi
f5b5c69a: push %esi 
[0xf56f2cd8]=0x81e68d50
[0xf56f2cec]=0x81ef2218
f5b5c513: mov 0x8(%ebp), %edi
8056c91a: mov %edi, %edi
8056c938: push %edi 
Callee: 0x0 ESP: 0xf56f2cd4
[0xf56f2ca8]=0x81ef2218
8056c987: pop %edi 
Callee: 0x0 ESP: 0xf56f2cd4
```

**Figure 7. Hardware-level hook graph for Vanquish**

```
7c919ab4: mov %eax, (%esi) 
Callee: 0x7c80ac28 ESP: 0x61f814
[0x61f81c]=0x77dd6bf0
7c80ac81: mov 0xc(%ebp), %eax 
Callee: 0x7c80ac28 ESP: 0x61f814
1ae12e0: mov %eax, 0xfffffffc(%ebp) 
[0x61f820]=0x77dd6bf0
1ae12e3: mov 0xfffffffc(%ebp), %eax
1ae2823: mov %eax, 0x1ae92d0
[0x1ae92d0]=0x77dd6bf0
1ae2839: mov 0x1ae92d0, %edx
1ae2834: push $0x1ae4c22
[0x61f824]=0x1ae4c22
1ae283f: push %edx 
[0x61f820]=0x77dd6bf0
1ae216d: mov 0xc(%ebp), %edx 
1ae282a: push $0x1ae928c
[0x61f82c]=0x1ae928c
1ae21db: mov 0x8(%ebp), %edx
1ae2170: sub 0x8(%ebp), %edx 
1ae2188: mov 0x14(%ebp), %edx 
1ae21d7: mov 0x14(%ebp), %ecx
1ae21de: push %edx 
[0x61f7fc]=0x77dd6bf0
1ae2173: sub $0x5, %edx
1ae21da: push %ecx 
[0x61f800]=0x1ae928c
1ae1ea4: mov 0x8(%ebp), %eax
1ae2176: mov %edx, 0xfffffff8(%ebp) 
[0x61f810]=0x89d0e02d
1ae218b: mov %cl, 0x1(%edx) 
1ae1ead: mov 0xc(%ebp), %ecx 
1ae1ea7: add $0x1, %eax
1ae217f: mov 0xfffffff8(%ebp), %ecx
1ae1eb0: add $0x1, %ecx
1ae1eaa: mov %eax, 0x8(%ebp)
[0x61f7fc]=0x77dd6bf1
1ae2182: and $0xff, %ecx
1ae1eb3: mov %ecx, 0xc(%ebp) 
[0x61f800]=0x1ae928d
1ae1e9a: mov 0x8(%ebp), %eax 
1ae218b: mov %cl, 0x1(%edx) 
[0x1ae928d]=0x2d
1ae1e9d: mov 0xc(%ebp), %ecx 
1ae1ea2: mov %dl, (%eax) 
1ae1ea0: mov (%ecx), %dl 
1ae1ea2: mov %dl, (%eax) 
[0x77dd6bf1]=0x2d
77dd6bf0: jmp 0x89d0e032
```

This revised version aims to improve clarity, coherence, and professionalism, ensuring that the text is well-structured and easy to follow.