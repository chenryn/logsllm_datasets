make use of dynamic taint analysis to detect and analyze
privacy-breaching malware [33]. Moreover, dynamic
taint analysis is used for other applications, such as au-
tomatically extracting protocol message formats [5], and
preventing cross-site scripting attacks [32].
7 Conclusion
In this paper, we presented a novel dynamic analy-
sis approach, ﬁne-grained impact analysis, to identify
malware hooking behaviors. This approach character-
izes malware’s impacts on its system environment, and
observes if one of the impacts is used to redirect the
system execution into the malicious code. Since it cap-
tures the intrinsic characteristics of hooking behavior,
this technique is able to identify novel hooks. Moreover,
we devised a semantics-aware impact dependency anal-
ysis method to extract the essential information about
the hooking mechanisms, which is represented as hook
graphs. We developed a prototype, HookFinder, and
conducted extensive experiments using representative
malware samples from various categories. The exper-
imental results demonstrated that HookFinder can cor-
rectly identify the hooking behaviors for all the samples,
and the generated hook graphs provide accurate insights
about their hooking mechanisms.
8 Acknowledgement
We would like to thank our shepherd, Niels Provos,
and the anonymous reviewers for their detailed sugges-
tions and insightful comments.
This material is based upon work partially supported
by the National Science Foundation under Grants No.
0311808, No. 0433540, No. 0448452, No. 0627511,
and CCF-0424422. Partial support is also provided by
the U.S. Army Research Ofﬁce under the Cyber-TA Re-
search Grant No. W911NF-06-1-0316, and under grant
DAAD19-02-1-0389 through CyLab at Carnegie Mel-
lon. Moreover, this work is also supported in part by
the Korean Ministry of Information and Communication
(IMC) and the Korean Institute for Information Technol-
ogy Advancement (IITA) under program [2005-S-606-
02, Next Generation Prediction and Response Technol-
ogy for Computer and Network Security Incidents]. Any
opinions, ﬁndings, and conclusions or recommendations
expressed in this material are those of the author(s) and
do not necessarily reﬂect the views of the National Sci-
ence Foundation.
References
[1] Afxrootkit.
http://www.rootkit.com/
project.php?id=23.
[2] BitBlaze: Binary analysis for COTS protection and
malicious code defense. http://bitblaze.cs.
berkeley.edu/.
[3] D. Brumley, C. Hartwig, Z. Liang, J. Newsome, D. Song,
and H. Yin. Botnet Analysis, chapter Automatically
Identifying Trigger-based Behavior in Malware. 2007.
[4] J. Butler and G. Hoglund. VICE–catch the hook-
In Black Hat USA, July 2004. http://www.
ers!
blackhat.com/presentations/bh-usa-04/
bh-us-04-butler/bh-us-04-butler.pdf.
[5] J. Caballero, H. Yin, Z. Liang, and D. Song. Polyglot:
Automatic extraction of protocol message format using
dynamic binary analysis.
In Proceedings of the 14th
ACM Conferences on Computer and Communication Se-
curity (CCS’07), October 2007.
[6] Clandestine ﬁle system driver.
http://www.
rootkit.com/vault/merlvingian/cfsd.
zip.
[24] J. Rutkowska. System virginity veriﬁer: Deﬁning the
roadmap for malware detection on windows systems.
In Hack In The Box Security Conference, September
2005.
http://www.invisiblethings.org/
papers/hitb05_virginity_verifier.ppt.
[25] J. Rutkowska. Red Pill... Or How To Detect VMM
http://
Using (Almost) One CPU Instruction.
invisiblethings.org/papers/redpill.
html, 2006.
[26] J. Rutkowska.
Rootkit hunting vs. compromise
January 2006.
In Black Hat Federal,
detection.
http://www.invisiblethings.org/
papers/rutkowska_bhfederal2006.ppt.
[27] Sony’s DRM Rootkit: The Real Story. http://www.
schneier.com/blog/archives/2005/11/
sonys_drm_rootk.html.
[28] G. E. Suh, J. W. Lee, D. Zhang, and S. Devadas. Secure
program execution via dynamic information ﬂow track-
ing. In Proceedings of the 11th International Conference
on Architectural Support for Programming Languages
and Operating Systems (ASPLOS’04), October 2004.
[29] TEMU: The BitBlaze dynamic analysis component.
http://bitblaze.cs.berkeley.edu/temu.
html.
[30] UAY kernel-mode backdoor. http://uty.512j.
com/uay.rar.
[31] Vanquish. https://www.rootkit.com/vault/
xshadow/vanquish-0.2.1.zip.
[32] P. Vogt, F. Nentwich, N. Jovanovic, E. Kirda, C. Kruegel,
and G. Vigna. Cross-Site Scripting Prevention with Dy-
namic Data Tainting and Static Analysis. In Proceeding
of the Network and Distributed System Security Sympo-
sium (NDSS’07), February 2007.
[33] H. Yin, D. Song, E. Manuel, C. Kruegel, and E. Kirda.
Panorama: Capturing system-wide information ﬂow for
malware detection and analysis. In Proceedings of the
14th ACM Conferences on Computer and Communica-
tion Security (CCS’07), October 2007.
[7] J. Chow, B. Pfaff, T. Garﬁnkel, K. Christopher, and
M. Rosenblum. Understanding data lifetime via whole
system simulation. In Proceedings of the 13th USENIX
Security Symposium (Security’04), August 2004.
[8] M. Costa. Vigilante: End-to-end containment of internet
worms. In Proceedings of the 20th ACM Symposium on
Operating Systems Principles (SOSP’05), October 2005.
[9] J. R. Crandall and F. T. Chong. Minos: Control data at-
tack prevention orthogonal to memory model.
In Pro-
ceedings of the 37th International Symposium on Mi-
croarchitecture (MICRO’04), December 2004.
[10] M. Egele, C. Kruegel, E. Kirda, H. Yin, and D. Song.
Dynamic Spyware Analysis. In Proceedings of the 2007
Usenix Annual Conference (Usenix’07), June 2007.
[11] A. Ho, M. Fetterman, C. Clark, A. Watﬁeld, and
S. Hand. Practical taint-based protection using demand
emulation. In EuroSys 2006, April 2006.
[12] Hacker defender.
http://www.rootkit.com/
project.php?id=5.
[13] IceSword.
http://www.antirootkit.com/
software/IceSword.htm.
[14] X. Jiang, X. Wang, and D. Xu. Stealthy malware de-
tection through vmm-based ”out-of-the-box” semantic
view reconstruction.
In Proceedings of the 14th ACM
conference on Computer and Communications Security
(CCS’07), October 2007.
[15] S. T. Jones, A. C. Arpaci-Dusseau, and R. H. Arpaci-
Dusseau. Antfarm: Tracking processes in a virtual ma-
chine environment. In USENIX Annual Technical Con-
ference, General Track, 2006.
[16] M. G. Kang, P. Poosankam, and H. Yin. Renovo: A hid-
den code extractor for packed executables. In Proceed-
ings of the 5th ACM Workshop on Recurring Malcode
(WORM’07), Oct. 2007.
[17] A. Moser, C. Kruegel, and E. Kirda. Exploring multi-
ple execution paths for malware analysis.
In Proceed-
ings of the 2007 IEEE Symposium on Security and Pri-
vacy(Oakland’07), May 2007.
[18] Nergal.
The advanced return-into-lib(c) exploits
http://www.phrack.org/
(PaX case study).
archives/58/p58-0x04.
[19] J. Newsome and D. Song. Dynamic taint analysis for au-
tomatic detection, analysis, and signature generation of
exploits on commodity software. In Proceedings of the
12th Annual Network and Distributed System Security
Symposium (NDSS’05), February 2005.
[20] Offensive
computing.
http://www.
offensivecomputing.net/.
[21] T. Ormandy.
An Empirical Study into the Secu-
rity Exposure to Host of Hostile Virtualized Envi-
ronments.
http://taviso.decsystem.org/
virtsec.pdf.
[22] G. Portokalidis, A. Slowinska, and H. Bos. Argos: an
emulator for ﬁngerprinting zero-day attacks. In EuroSys
2006, April 2006.
[23] rootkit.com. http://www.rootkit.com/.
Appendix: Hardware-level Hook Graphs
f5b5bf44: push %edi 
[0xf56f2cac]=0x81ef2218
f5b5bfcf: pop %edi
f5b5c583: mov (%edi), %esi
f5b5c589: lea 0x40(%esi), %eax
f5b5c58c: push %eax
[0xf56f2cc4]=0x81ed3548
f5b5bf13: mov 0xc(%ebp), %esi
f5b5bf4f: push %eax
[0xf56f2ca0]=0xf56f2cc4
806f447f: push %esi 
Callee: 0x0 ESP: 0xf56f2ca8
[0xf56f2c8c]=0x81ed3548
f83c1158: mov 0x8(%ebp), %ecx 
Callee: 0xf83c1145 ESP: 0xf56f2c9c
804df993: pop %esi 
Callee: 0x0 ESP: 0xf56f2ca8
f83c115b: mov %eax, (%ecx) 
Callee: 0xf83c1145 ESP: 0xf56f2c9c
8054b051: push %esi 
Callee: 0xf83c1145 ESP: 0xf56f2c9c
[0xf56f2c38]=0x81ed3548
f83c115b: mov %eax, (%ecx) 
Callee: 0xf83c1145 ESP: 0xf56f2c9c
[0xf56f2cc4]=0x81e563a8
8054b12f: pop %esi 
Callee: 0xf83c1145 ESP: 0xf56f2c9c
f5b5bfc5: mov 0xc(%ebp), %eax
f5b5bfcd: mov %eax, (%esi)
f5b5bfcd: mov %eax, (%esi)
[0x81ed3548]=0x81e563a8
f83e2faa: call *0x40(%eax)
f5b5c60d: push %eax
[0xf56f2ce4]=0xf56f2d68
f83c827f: mov 0xc(%ebp), %eax 
Callee: 0xf83c817d ESP: 0xf56f2cdc
f83c828c: mov %ebx, (%eax) 
Callee: 0xf83c817d ESP: 0xf56f2cdc
f83c828c: mov %ebx, (%eax) 
Callee: 0xf83c817d ESP: 0xf56f2cdc
[0xf56f2d68]=0x81dd0f28
f83c829a: mov %ecx, 0x10(%ebx) 
Callee: 0xf83c817d ESP: 0xf56f2cdc
[0x81dd0f38]=0x81e95ca8
f5b5c68d: mov 0xfffffffc(%ebp), %eax
f5b5c695: mov 0x10(%eax), %esi
f5b5c511: push %esi
[0xf56f2cd8]=0x81e95ca8
f5b5c5bc: pop %esi
f5b5c6a0: mov 0x10(%esi), %esi
f5b5c511: push %esi
f5b5c69a: push %esi 
[0xf56f2cd8]=0x81e68d50
[0xf56f2cec]=0x81ef2218
f5b5c513: mov 0x8(%ebp), %edi
8056c91a: mov %edi, %edi
8056c938: push %edi 
Callee: 0x0 ESP: 0xf56f2cd4
[0xf56f2ca8]=0x81ef2218
8056c987: pop %edi 
Callee: 0x0 ESP: 0xf56f2cd4
Figure 6. Hardware(cid:173)level hook graph for Uay backdoor
7c919ab4:(cid:9)mov(cid:9)%eax,(%esi) 
Callee: 0x7c80ac28 ESP: 0x61f814
[0x61f81c]=0x77dd6bf0
7c80ac81:(cid:9)mov(cid:9)0xc(%ebp),%eax 
Callee: 0x7c80ac28 ESP: 0x61f814
1ae12e0:(cid:9)mov(cid:9)%eax,0xfffffffc(%ebp) 
[0x61f820]=0x77dd6bf0
1ae12e3:(cid:9)mov(cid:9)0xfffffffc(%ebp),%eax
1ae2823:(cid:9)mov(cid:9)%eax,0x1ae92d0
[0x1ae92d0]=0x77dd6bf0
1ae2839:(cid:9)mov(cid:9)0x1ae92d0,%edx
1ae2834:(cid:9)push(cid:9)$0x1ae4c22
[0x61f824]=0x1ae4c22
1ae283f:(cid:9)push(cid:9)%edx 
[0x61f820]=0x77dd6bf0
1ae216d:(cid:9)mov(cid:9)0xc(%ebp),%edx 
1ae282a:(cid:9)push(cid:9)$0x1ae928c
[0x61f82c]=0x1ae928c
1ae21db:(cid:9)mov(cid:9)0x8(%ebp),%edx
1ae2170:(cid:9)sub(cid:9)0x8(%ebp),%edx 
1ae2188:(cid:9)mov(cid:9)0x14(%ebp),%edx 
1ae21d7:(cid:9)mov(cid:9)0x14(%ebp),%ecx
1ae21de:(cid:9)push(cid:9)%edx 
[0x61f7fc]=0x77dd6bf0
1ae2173:(cid:9)sub(cid:9)$0x5,%edx
1ae21da:(cid:9)push(cid:9)%ecx 
[0x61f800]=0x1ae928c
1ae1ea4:(cid:9)mov(cid:9)0x8(%ebp),%eax
1ae2176:(cid:9)mov(cid:9)%edx,0xfffffff8(%ebp) 
[0x61f810]=0x89d0e02d
1ae218b:(cid:9)mov(cid:9)%cl,0x1(%edx) 
1ae1ead:(cid:9)mov(cid:9)0xc(%ebp),%ecx 
1ae1ea7:(cid:9)add(cid:9)$0x1,%eax
1ae217f:(cid:9)mov(cid:9)0xfffffff8(%ebp),%ecx
1ae1eb0:(cid:9)add(cid:9)$0x1,%ecx
1ae1eaa:(cid:9)mov(cid:9)%eax,0x8(%ebp)
[0x61f7fc]=0x77dd6bf1
1ae2182:(cid:9)and(cid:9)$0xff,%ecx
1ae1eb3:(cid:9)mov(cid:9)%ecx,0xc(%ebp) 
[0x61f800]=0x1ae928d
1ae1e9a:(cid:9)mov(cid:9)0x8(%ebp),%eax 
1ae218b:(cid:9)mov(cid:9)%cl,0x1(%edx) 
[0x1ae928d]=0x2d
1ae1e9d:(cid:9)mov(cid:9)0xc(%ebp),%ecx 
1ae1ea2:(cid:9)mov(cid:9)%dl,(%eax) 
1ae1ea0:(cid:9)mov(cid:9)(%ecx),%dl 
1ae1ea2:(cid:9)mov(cid:9)%dl,(%eax) 
[0x77dd6bf1]=0x2d
77dd6bf0:(cid:9)jmp(cid:9)0x89d0e032
Figure 7. Hardware(cid:173)level hook graph for Vanquish