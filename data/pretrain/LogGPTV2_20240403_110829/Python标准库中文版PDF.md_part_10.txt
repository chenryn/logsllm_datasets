file.close()
book = MyString(text)
for bird in ["gannet", "robin", "nuthatch"]:
book.remove(bird)
print book
...
C: The one without the !
P: The one without the -!!! They've ALL got the !! It's a
Standard British Bird, the , it's in all the books!!!
...
2.11. traceback 模块
Example 2-18 展示了 traceback 模块允许你在程序里打印异常的跟踪返回
(Traceback)信息, 类似未捕获异常时解释器所做的. 如 Example 2-18 所示.
2.11.0.1. Example 2-18. 使用 traceback 模块打印跟踪返回信息
File: traceback-example-1.py
# note! importing the traceback module messes up the
# exception state, so you better do that here and not
# in the exception handler
# 注意! 导入 traceback 会清理掉异常状态, 所以
# 最好别在异常处理代码中导入该模块
import traceback
try:
raise SyntaxError, "example"
except:
traceback.print_exc()
Traceback (innermost last):
File "traceback-example-1.py", line 7, in ?
SyntaxError: example
Example 2-19 使用 StringIO 模块将跟踪返回信息放在字符串中.
2.11.0.2. Example 2-19. 使用 traceback 模块将跟踪返回信息复制到字符串
File: traceback-example-2.py
import traceback
import StringIO
try:
raise IOError, "an i/o error occurred"
except:
fp = StringIO.StringIO()
traceback.print_exc(file=fp)
message = fp.getvalue()
print "failure! the error was:", repr(message)
failure! the error was: 'Traceback (innermost last):\012 File
"traceback-example-2.py", line 5, in ?\012IOError: an i/o error
occurred\012'
你可以使用 extract_tb 函数格式化跟踪返回信息, 得到包含错误信息的列表,
如 Example 2-20 所示.
2.11.0.3. Example 2-20. 使用 traceback Module 模块编码 Traceback 对象
File: traceback-example-3.py
import traceback
import sys
def function():
raise IOError, "an i/o error occurred"
try:
function()
except:
info = sys.exc_info()
for file, lineno, function, text in traceback.extract_tb(info[2]):
print file, "line", lineno, "in", function
print "=>", repr(text)
print "** %s: %s" % info[:2]
traceback-example-3.py line 8 in ?
=> 'function()'
traceback-example-3.py line 5 in function
=> 'raise IOError, "an i/o error occurred"'
** exceptions.IOError: an i/o error occurred
2.12. errno 模块
errno 模块定义了许多的符号错误码, 比如 ENOENT ("没有该目录入口") 以及
EPERM ("权限被拒绝"). 它还提供了一个映射到对应平台数字错误代码的字典.
Example 2-21 展示了如何使用 errno 模块.
在大多情况下, IOError 异常会提供一个二元元组, 包含对应数值错误代码和
一个说明字符串. 如果你需要区分不同的错误代码, 那么最好在可能的地方使
用符号名称.
2.12.0.1. Example 2-21. 使用 errno 模块
File: errno-example-1.py
import errno
try:
fp = open("no.such.file")
except IOError, (error, message):
if error == errno.ENOENT:
print "no such file"
elif error == errno.EPERM:
print "permission denied"
else:
print message
no such file
Example 2-22 绕了些无用的弯子, 不过它很好地说明了如何使用 errorcode
字典把数字错误码映射到符号名称( symbolic name ).
2.12.0.2. Example 2-22. 使用 errorcode 字典
File: errno-example-2.py
import errno
try:
fp = open("no.such.file")
except IOError, (error, message):
print error, repr(message)
print errno.errorcode[error]
# 2 'No such file or directory'
# ENOENT
2.13. getopt 模块
getopt 模块包含用于抽出命令行选项和参数的函数, 它可以处理多种格式的选
项. 如 Example 2-23 所示.
其中第 2 个参数指定了允许的可缩写的选项. 选项名后的冒号(:) 意味这这个
选项必须有额外的参数.
2.13.0.1. Example 2-23. 使用 getopt 模块
File: getopt-example-1.py
import getopt
import sys
# simulate command-line invocation
# 模仿命令行参数
sys.argv = ["myscript.py", "-l", "-d", "directory", "filename"]
# process options
# 处理选项
opts, args = getopt.getopt(sys.argv[1:], "ld:")
long = 0
directory = None
for o, v in opts:
if o == "-l":
long = 1
elif o == "-d":
directory = v
print "long", "=", long
print "directory", "=", directory
print "arguments", "=", args
long = 1
directory = directory
arguments = ['filename']
为了让 getopt 查找长的选项, 如 Example 2-24 所示, 传递一个描述选项的
列表做为第 3 个参数. 如果一个选项名称以等号(=) 结尾, 那么它必须有一个
附加参数.
2.13.0.2. Example 2-24. 使用 getopt 模块处理长选项
File: getopt-example-2.py
import getopt
import sys
# simulate command-line invocation
# 模仿命令行参数
sys.argv = ["myscript.py", "--echo", "--printer", "lp01", "message"]
opts, args = getopt.getopt(sys.argv[1:], "ep:", ["echo", "printer="])
# process options
# 处理选项
echo = 0
printer = None
for o, v in opts:
if o in ("-e", "--echo"):
echo = 1
elif o in ("-p", "--printer"):
printer = v
print "echo", "=", echo
print "printer", "=", printer
print "arguments", "=", args
echo = 1
printer = lp01
arguments = ['message']
[!Feather 注: 我不知道大家明白没, 可以自己试下:
myscript.py -e -p lp01 message
myscript.py --echo --printer=lp01 message
]
2.14. getpass 模块
getpass 模块提供了平台无关的在命令行下输入密码的方法. 如 Example 2-25
所示.
getpass(prompt) 会显示提示字符串, 关闭键盘的屏幕反馈, 然后读取密码.
如果提示参数省略, 那么它将打印出 "Password: ".
getuser() 获得当前用户名, 如果可能的话.
2.14.0.1. Example 2-25. 使用 getpass 模块
File: getpass-example-1.py
import getpass
usr = getpass.getuser()
pwd = getpass.getpass("enter password for user %s: " % usr)
print usr, pwd
enter password for user mulder:
mulder trustno1
2.15. glob 模块
glob 根据给定模式生成满足该模式的文件名列表, 和 Unix shell 相同.
这里的模式和正则表达式类似, 但更简单. 星号(* ) 匹配零个或更多个字符,
问号(? ) 匹配单个字符. 你也可以使用方括号来指定字符范围, 例如 [0-9]
代表一个数字. 其他所有字符都代表它们本身.
glob(pattern) 返回满足给定模式的所有文件的列表. Example 2-26 展示了它
的用法.
2.15.0.1. Example 2-26. 使用 glob 模块
File: glob-example-1.py
import glob
for file in glob.glob("samples/*.jpg"):
print file
samples/sample.jpg
注意这里的 glob 返回完整路径名, 这点和 os.listdir 函数不同. glob 事实
上使用了 fnmatch 模块来完成模式匹配.
2.16. fnmatch 模块
fnmatch 模块使用模式来匹配文件名. 如 Example 2-27 所示.
模式语法和 Unix shell 中所使用的相同. 星号(* ) 匹配零个或更多个字符,
问号(? ) 匹配单个字符. 你也可以使用方括号来指定字符范围, 例如 [0-9]
代表一个数字. 其他所有字符都匹配它们本身.
2.16.0.1. Example 2-27. 使用 fnmatch 模块匹配文件
File: fnmatch-example-1.py
import fnmatch
import os
for file in os.listdir("samples"):
if fnmatch.fnmatch(file, "*.jpg"):
print file
sample.jpg
Example 2-28 中的 translate 函数可以将一个文件匹配模式转换为正则表达
式.
2.16.0.2. Example 2-28. 使用 fnmatch 模块将模式转换为正则表达式
File: fnmatch-example-2.py
import fnmatch
import os, re
pattern = fnmatch.translate("*.jpg")
for file in os.listdir("samples"):
if re.match(pattern, file):
print file
print "(pattern was %s)" % pattern
sample.jpg
(pattern was .*\.jpg$)
glob 和 find 模块在内部使用 fnmatch 模块来实现.
2.17. random 模块
"Anyone who considers arithmetical methods of producing random digits is,
of course, in a state of sin."
- John von Neumann, 1951
random 模块包含许多随机数生成器.
基本随机数生成器(基于 Wichmann 和 Hill , 1982 的数学运算理论) 可以通过
很多方法访问, 如 Example 2-29 所示.
2.17.0.1. Example 2-29. 使用 random 模块获得随机数字
File: random-example-1.py
import random
for i in range(5):
# random float: 0.0 <= number < 1.0
print random.random(),
# random float: 10 <= number < 20
print random.uniform(10, 20),
# random integer: 100 <= number <= 1000
print random.randint(100, 1000),
# random integer: even numbers in 100 <= number < 1000
print random.randrange(100, 1000, 2)
0.946842713956 19.5910069381 709 172
0.573613195398 16.2758417025 407 120
0.363241598013 16.8079747714 916 580
0.602115173978 18.386796935 531 774
0.526767588533 18.0783794596 223 344
注意这里的 randint 函数可以返回上界, 而其他函数总是返回小于上界的值.
所有函数都有可能返回下界值.
Example 2-30 展示了 choice 函数, 它用来从一个序列里分拣出一个随机项目.
它可以用于列表, 元组, 以及其他序列(当然, 非空的).
2.17.0.2. Example 2-30. 使用 random 模块从序列取出随机项
File: random-example-2.py
import random
# random choice from a list
for i in range(5):
print random.choice([1, 2, 3, 5, 9])
2
3
1
9
1
在 2.0 及以后版本, shuffle 函数可以用于打乱一个列表的内容 (也就是生成
一个该列表的随机全排列). Example 2-31 展示了如何在旧版本中实现该函数.
2.17.0.3. Example 2-31. 使用 random 模块打乱一副牌
File: random-example-4.py
import random
try:
# available in 2.0 and later
shuffle = random.shuffle
except AttributeError:
def shuffle(x):
for i in xrange(len(x)-1, 0, -1):
# pick an element in x[:i+1] with which to exchange x[i]
j = int(random.random() * (i+1))
x[i], x[j] = x[j], x[i]
cards = range(52)
shuffle(cards)
myhand = cards[:5]
print myhand
[4, 8, 40, 12, 30]
random 模块也包含了非恒定分布的随机生成器函数. Example 2-32 使用了
gauss (高斯)函数来生成满足高斯分的布随机数字.
2.17.0.4. Example 2-32. 使用 random 模块生成高斯分布随机数
File: random-example-3.py
import random
histogram = [0] * 20
# calculate histogram for gaussian
# noise, using average=5, stddev=1
for i in range(1000):
i = int(random.gauss(5, 1) * 2)
histogram[i] = histogram[i] + 1
# print the histogram
m = max(histogram)
for v in histogram:
print "*" * (v * 50 / m)
****
**********
*************************
***********************************
************************************************
**************************************************
*************************************
***************************
*************
***
*
你可以在 Python Library Reference 找到更多关于非恒定分布随机生成器函数
的信息.
标准库中提供的随机数生成器都是伪随机数生成器. 不过这对于很多目的来说
已经足够了, 比如模拟, 数值分析, 以及游戏. 可以确定的是它不适合密码学
用途.
2.18. whrandom 模块
这个模块早在 2.1 就被声明不赞成, 早废了. 请使用 random 代替.
- Feather
Example 2-33 展示了 whrandom , 它提供了一个伪随机数生成器. (基于
Wichmann 和 Hill, 1982 的数学运算理论). 除非你需要不共享状态的多个生
成器(如多线程程序), 请使用 random 模块代替.
2.18.0.1. Example 2-33. 使用 whrandom 模块
File: whrandom-example-1.py
import whrandom
# same as random
print whrandom.random()
print whrandom.choice([1, 2, 3, 5, 9])
print whrandom.uniform(10, 20)
print whrandom.randint(100, 1000)
0.113412062346
1
16.8778954689
799
Example 2-34 展示了如何使用 whrandom 类实例创建多个生成器.
2.18.0.2. Example 2-34. 使用 whrandom 模块创建多个随机生成器
File: whrandom-example-2.py
import whrandom
# initialize all generators with the same seed
rand1 = whrandom.whrandom(4,7,11)
rand2 = whrandom.whrandom(4,7,11)
rand3 = whrandom.whrandom(4,7,11)
for i in range(5):
print rand1.random(), rand2.random(), rand3.random()
0.123993532536 0.123993532536 0.123993532536
0.180951499518 0.180951499518 0.180951499518
0.291924111809 0.291924111809 0.291924111809
0.952048889363 0.952048889363 0.952048889363
0.969794283643 0.969794283643 0.969794283643
2.19. md5 模块
md5 (Message-Digest Algorithm 5)模块用于计算信息密文(信息摘要).
md5 算法计算一个强壮的128位密文. 这意味着如果两个字符串是不同的, 那
么有极高可能它们的 md5 也不同. 也就是说, 给定一个 md5 密文, 那么几乎
没有可能再找到另个字符串的密文与此相同. Example 2-35 展示了如何使用
md5 模块.
2.19.0.1. Example 2-35. 使用 md5 模块
File: md5-example-1.py
import md5
hash = md5.new()
hash.update("spam, spam, and eggs")
print repr(hash.digest())
'L\005J\243\266\355\243u`\305r\203\267\020F\303'
注意这里的校验和是一个二进制字符串. Example 2-36 展示了如何获得一个十
六进制或 base64 编码的字符串.