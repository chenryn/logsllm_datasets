ther limit accesses of Ru, we introduce a new group Gb of exist-
ing (“benign”) userids on the system before untrusted userids are
added. File permissions are modiﬁed so that world-writable ﬁles
and directories become group-writable2 by Gb. Similarly, world-
executable setuid programs are made group executable by Gb.
With the above permission settings, no Ru will have the per-
mission to create ﬁles, and hence will need to rely on the helper
process UH to create them. Since UH runs with the userid R, these
ﬁles will be owned by R. To identify them an untrusted, UH sets up
the group owner of this ﬁle to be Gu, where G is the primary group
of R. As a result, untrusted processes will not be able to change
permissions on these ﬁles or overwrite them without the help of
UH, thus enabling the helper to exert full control over their access.
Untrusted processes cannot modify benign ﬁles either, since the be-
nign sandbox ensures appropriate permission settings on them.
Untrusted processes can compromise benign processes through
communication. Some communication mechanisms, such as pipes
between parent and child processes, need to be closed when a child
process of a benign process becomes untrusted. This can happen
in our system only through the execve system call. Other commu-
nication mechanisms such as signals and IPC are restricted by the
OS based on userids, and hence the inner sandbox will already pre-
vent them. For intra-host socket communication, the benign sand-
box is responsible for identifying the userid of the peer process and
blocking the communication. To block communication with exter-
nal hosts, appropriate ﬁrewall rules can be used.
Using userid as an isolation mechanism has been demonstrated
in systems like Android and Plash [2] for isolating applications.
1We don’t support untrusted code execution with root privileges.
2If group permissions are already used, then we use ACLs instead.
221
One of our contributions is to develop a more general design that
not only supports strict isolation between applications, but also per-
mits controlled interactions. (Although Android can support inter-
actions between applications, such interactions can compromise se-
curity, providing a mechanism for a malicious application to com-
promise another benign application. In contrast, our approach en-
sures that malicious applications cannot compromise benign pro-
cesses.) Our second contribution is that our approach requires no
modiﬁcations to (untrusted or benign) applications, whereas An-
droid and Plash require applications to be rewritten so that they do
not violate the strict isolation policy.
2.2 Transparency Library UL
For untrusted processes, UL replaces the standard C-library in
our system, and provides its functionality through system call wrap-
pers. Note that UL operates with the same privileges as the un-
trusted process, so no special security mechanisms are needed to
protect it. UL’s main purpose is to mimics unprotected execution
environment for untrusted processes.
Userid and group transparency.
Applications may fail simply because they are being run with
different user and group ids. For this reason, UL wraps getuid-
related system calls to return R for processes owned by Ru. It also
wraps getgid-related system calls to return G for processes group-
owned by Gu. This mapping is applied to all types of userids,
including effective, real and saved userids. As a result, an untrusted
process is not even aware that it is being executed with a different
userid from that of the user invoking it.
This modiﬁcation is important for applications that query their
own user or groupid, and use them to determine certain accesses,
e.g., if they can create a ﬁle in a directory owned by R. If not,
the application may refuse to proceed further, thus becoming un-
usable. Some common applications such as OpenOffice, gedit,
eclipse and gimp make use of their userid information. UL en-
sures that such applications remain usable.
File access transparency.
When a ﬁle request is denied by the inner sandbox, UL forwards
the call transparently to the helper process UH running with the
privileges of R. UH, if it chooses to permit the operation, will open
the ﬁle and transmit the ﬁle descriptor back to UL via a UNIX-
domain socket. UL then forwards this descriptor to the untrusted
process. This technique enables subsequent read/write operations
to be performed directly by the untrusted process, thereby avoiding
a hop to UH for most operations.
2.3 Helper Process UH
In the absence of our protections, programs will be executed with
the userid R of the user running it. Thus, the maximum access they
expect is that of R, and hence UH can be run with R’s privileges.
Observe that the inner sandbox imposes restrictions (on Ru rel-
ative to R) for only three categories of operations3: ﬁle/IPC op-
erations, signaling operations (e.g., kill), and tracing operations
(e.g., ptrace). We have not found useful cases where Ru needs to
signal or trace a process owned by R. IPC objects with permission
settings are treated the same as ﬁles. Consequently, we focus the
discussion on ﬁle system operations:
3Recall that R cannot be root, and hence many system calls (e.g.,
changing userid, mounting ﬁle systems, binding to low-numbered
sockets, and performing most system administrative operations) are
already inaccessible to R-processes. This is why it is sufﬁcient to
consider these three categories.
222
• Reading user-readable ﬁles: UH permits an untrusted process
owned by Ru to read any ﬁle that is readable by R, including
ﬁles that do not have explicit read permission for Ru.
• Executing user-executable ﬁles: Except for setuid ﬁles, UH per-
mits an untrusted process with userid Ru to execute any ﬁle that
can be executed by R.
• Creating new ﬁles or directories in user-writable directories:
An untrusted process is permitted by UH to create new ﬁles or
directories in any directory writable by R.
• Overwriting of existing ﬁles: UH permits any ﬁle overwrite that
would succeed for R. However, unless the target ﬁle is un-
trusted, the original ﬁle is left unchanged. Instead, UH trans-
parently creates a private copy of the ﬁle for any subsequent use
by Ru. File removals are treated in a similar way.
• Operations to manipulate permissions, links, etc.: These oper-
ations are handled similar to ﬁle modiﬁcation operations: if the
target ﬁle(s) involved is untrusted, then UH permits the change
but with integrity labels preserved. Otherwise, the changes are
performed on a private copy of the original ﬁle that is created
for Ru. As before, all references to the original ﬁle by Ru are
redirected to this copy.
Note that redirection leads to namespace fragmentation: a ﬁle be-
ing accessed needs to be searched within the redirection space, and
then the main ﬁle system. Users may have a hard time locating
such ﬁles, as they are visible only to untrusted processes. Our im-
plementation reduces this fragmentation by limiting redirection to
application preference ﬁles: applications need to modify these ﬁles
but users are unlikely to look for (or miss) them. Data ﬁles are
not held in the redirection space. We discuss in Section 4.1 how to
distinguish between these ﬁle types.
While we do not emphasize conﬁdentiality protection, our sys-
tem provides the basis for sound enforcement of conﬁdentiality re-
strictions by tightening the policy on user-readable ﬁles.
3. Protecting Benign Processes
Our benign sandbox completes the second half of our sandbox
architecture. Whereas the untrusted sandbox prevents untrusted
processes from directly damaging benign ﬁles and processes, the
benign sandbox is responsible for protecting benign applications
from indirect attacks that take place through input ﬁles or inter-
process communication.
A simple way to protect benign applications is to prevent them
from ever coming into contact with any thing untrusted. However,
total separation would preclude common usage scenarios such as
the use of benign applications (or libraries) in untrusted code, or the
use of untrusted applications to examine or analyze benign data. In
order to support these usage scenarios, we partition the interaction
scenarios into three categories as follows.
• Logical isolation: By default, benign applications are isolated
from untrusted components by the benign sandbox.
• Unrestricted interaction: The other extreme is to permit benign
applications to interact freely with untrusted components. This
interaction is rendered secure by running benign applications
within the untrusted sandbox.
• Controlled interaction: Between the two extremes, benign ap-
plications may be permitted to interact with untrusted processes
while remaining a benign process. Since malware can exploit
vulnerabilities of benign software through these interactions, they
should be limited to trusted programs that can protect them-
selves in such interactions.
The ﬁrst and third interaction modes are supported by a benign
sandboxing library BL. As described Section 3.1, it enforces poli-
cies to protect benign code from accidental exposure to untrusted
components. The second interaction mode makes use of the un-
trusted sandbox described earlier, as well as a benign sandboxing
component (Section 3.2) for secure context switch from benign to
untrusted execution mode.
3.1 Benign Sandboxing Library
Since benign processes are non-malicious, they can be sand-
boxed using a replacement library BL for the standard C library.
In the isolation mode, BL enforces the following policies.
• Querying ﬁle attributes: Operations such as access and stat
that refer to untrusted ﬁles are denied. An error is returned to
indicate permission denial.
• execve and open for reading: These are handled in the same
way as ﬁle attribute query operations.
• Changing ﬁle permissions: These operations are intercepted to
ensure that benign ﬁles aren’t made writable to untrusted users,
and that untrusted ﬁles aren’t turned into benign ones. These
restrictions prevent unintended changes to the integrity labels of
ﬁles. However, there may be instances where a benign process
output needs to be marked untrusted. An explicit function is
provided in the replacement C-library for this purpose.
• Interprocess communication channel establishment: This in-
cludes operations such as connect and accept. The OS is
queried for the userid of the peer process. If it is untrusted, the
communication will be closed and return a failure code.
• Loading kernel modules: If the OS provides a system call to
load a kernel module using a ﬁle path, the library will deny this
call if the ﬁle is untrusted. Otherwise, loading a module would
require a process to mmap the module into its memory. Since this
ﬁle open will be denied for untrusted ﬁles, they can’t be loaded
as kernel modules.
In addition to isolation, BL can also support controlled interac-
tion between benign and untrusted processes. This option should
be exercised only with trustworthy programs that are designed to
protect themselves from malicious inputs. Moreover, trust should
be as narrowly conﬁned as possible, so BL can limit these interac-
tions to speciﬁc interfaces and inputs on which a benign application
is trusted to perform sufﬁcient input validation.
BL provides two ways by which trust-conﬁned execution can
deviate from the above default isolation policy. In the ﬁrst way,
an externally speciﬁed policy identiﬁes the set of ﬁles (or commu-
nication end points such as port numbers) from which untrusted
inputs can be safely consumed. The policies can also specify if
certain outputs should be marked as untrusted. In the second way,
a trusted process uses an API provided by BL to explicitly bypass
the default isolation policy, e.g., trust_open to open an input ﬁle
even though it is untrusted. While this option requires changes to
the trusted program, it has the advantage of allowing its program-
mer to determine whether sufﬁcient input validation has been per-
formed to warrant trusting a certain input.
3.2 Secure Context Switching
Switching security contexts (from untrusted to benign or vice-
versa) is an error-prone task. One of the advantages of our design
is that it leverages a well-studied solution to this problem, speciﬁ-
cally, secure execution of setuid executables in UNIX.
A switch from untrusted to benign domain can happen through
any setuid application that is executable by untrusted users. Well-
written setuid programs protect themselves from malicious users.
Moreover, OSes incorporate several features for protecting setuid
executables from subversion attacks during loading and initializa-
tion. While these should be sufﬁcient for a safe switching out of
untrusted domain, our design further reduces the risk with a default
policy that prevents untrusted processes from executing setuid exe-
cutables. This policy can be relaxed for speciﬁc setuid applications
that are deemed to protect themselves adequately.
Transitions in the opposite direction (i.e., from benign to un-
trusted) require more care because processes in untrusted context
cannot be expected to safeguard system security. We therefore in-
troduce a gateway application called uudo to perform the switch
safely. Since the switch would require changing to an untrusted
userid, uudo needs to be a setuid-to-root executable. It provides
an interface similar to the familiar sudo4 program on UNIX sys-
tems — it interprets its ﬁrst argument as the name of a command
to run, and the rest of the arguments as parameters to this com-
mand. By default, uudo closes all benign ﬁles that are opened in
write mode, as well as IPC channels. These measures are necessary
since all policy enforcement takes place at the time of open, which,
in this case, happened in the benign context. Next, uudo changes
its group to Gu and userid to Ru, and executes the speciﬁed com-
mand. (Here, R represents the real userid of the uudo process.)
We view uudo as a system utility, similar to sudo, that enables
users to explicitly execute commands in untrusted mode. While
it may seem like a burden to have to use it every time an untrusted
execution is involved, experience with the use of sudo suggests that
it is easy to get used to. Moreover, the use of uudo can be inferred
(Section 4.2) in common usage scenarios: launching an application
by double-clicking on a ﬁle icon, running an untrusted executable,
or running a benign command with untrusted ﬁle argument.
4. Policy Inference
In the preceding sections, our focus was on policy enforcement
mechanisms, and the different ways they could handle a particular
access request. To build a practical system that preserves user ex-
perience, we need as much (if not more) emphasis on the policies
that specify the particular way each and every request is handled.
This is the topic of this section.
4.1 Untrusted Code Policy
Our policy for untrusted processes is geared to stop actions that
have a high likelihood of damaging benign processes. A benign
process may be compromised by altering its code, conﬁguration,
preference or input ﬁles. Of these, the ﬁrst three choices have a
much higher likelihood of causing harm than the last. For this rea-
son, our policy for untrusted processes is based on denying access
to code, conﬁguration and preference ﬁles of benign processes.
However, note that benign applications may be run as untrusted
processes, and in this case, they may fail if they aren’t permitted
to update their preference ﬁles. For this reason, preference ﬁle ac-
cesses need to be redirected, while denying writes of conﬁguration
and code ﬁles.
To implement this policy, we could require system administrator
(or OS distributors) to specify code, conﬁguration and preference
ﬁles for each application. But this is a tedious and error-prone task.
Moreover, these details may change across different software ver-
sions, or simply due to differences in installation or other options.
4The name uudo parallels sudo, and stands for “untrusted user do,”
i.e., execute a command as an untrusted user.
223
A second alternative is to do away with this distinction between
different types of ﬁles, and apply redirection to all benign ﬁles that
are opened for writing by untrusted processes. But this approach
has several drawbacks as well:
• Redirection should be applied to as few ﬁles as possible, as users
are unaware of these ﬁles. In particular, if data ﬁles are redi-
rected, users may not be able to locate them. Thus, it is prefer-
able to apply redirection selectively to preference ﬁles.
• If accesses to all benign ﬁles are redirected, this will enable a
malicious application to compromise all untrusted executions
of benign applications. As a result, no benign application can
be relied on to provide its intended function in untrusted execu-
tions. (Benign executions are not compromised.)
• Finally, it is helpful to identify and ﬂag accesses that are poten-
tially indicative of malware. This helps prompt detection and/or
removal of malware from the system.
We therefore develop an automated approach for inferring differ-
ent categories of ﬁles so that we can apply redirection to a narrow
subset of ﬁles.
Explicitly speciﬁed versus implicit access to ﬁles.
When an application accesses a ﬁle f, if this access was trig-
gered by how it was invoked or used, then this access is considered
to be explicitly speciﬁed. For instance, f may be speciﬁed as a
command-line argument or as an environment variable. Alterna-
tively, f may have been selected by a user using a ﬁle selection
widget. A ﬁle access is implicit if it is not explicitly speciﬁed.
Applications seldom rely on an explicit speciﬁcation of their
code, conﬁguration and preference ﬁles. Libraries required are
identiﬁed and loaded automatically without a need for listing them
by users. Similarly, applications tend to “know” their conﬁgura-
tion and preference ﬁles without requiring user input. In contrast,
data ﬁles are typically speciﬁed explicitly. Based on this obser-
vation, we devise an approach to infer implicit accesses made by
benign applications. These accesses are monitored continuously,
and a database of implicitly accessed ﬁles, together with the mode
of access (i.e., read-only or read/write) is maintained for each ex-
ecutable. The policy for untrusted sandbox is developed from this
information, as shown in Figure 3.
Note that our inference is based on accesses of benign processes.
Untrusted executions (even of benign applications) are not consid-
ered, thus avoiding attacks on the inference procedure.
Computing Implicitly Accessed Files.
Files that are implicitly accessed by an application are identiﬁed
by exclusion: they are the set of ﬁles accessed by the application
but are not explicitly speciﬁed. Identifying explicitly speciﬁed ﬁles
can be posed as a taint-tracking problem. Taint sources include: (a)
command-line parameters, (b) environment variables, and (c) ﬁle
names returned by a ﬁle selection widget. Taint in our system is
propagated with the following rule: If a directory with a tainted ﬁle
name is opened, all of the ﬁle names from this directory are marked
as tainted. Explicitly speciﬁed ﬁle names as those that are tainted.
In terms of implementation, we rely on taint inference [21] rather
than taint analysis. Some aspects of the structure of ﬁle names are
exploited to increase accuracy, and to deal with differences in the
manner of speciﬁcation of ﬁle names.
We construct a data structure to store the list of explicitly identi-
ﬁed names for each process. These names are then matched against
every open system call to identify explicitly accessed ﬁles. Be-
cause there can be multiple explicitly identiﬁed names, we used