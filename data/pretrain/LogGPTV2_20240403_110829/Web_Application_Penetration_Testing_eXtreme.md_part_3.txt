The following vector could be a bypass:
ipt>alert(1)
WAPTXv2: Section 01, Module 04 -Caendra Inc. © 2020| p.59
4.3.1.1 Removing HTML Tags
Of course, if we already know or are able to guess the
sequence, then we could create more complex vectors and
maybe use several character encodings, as we have seen in
Bypassing Blacklisting Filters section.
It all depends on the filter that we are facing.
WAPTXv2: Section 01, Module 04 -Caendra Inc. © 2020| p.60
4.3.1.2 Escaping Quotes
It is both a matter of HTML Tags and often, the injection points
are inside quoted strings. Commonly, filters place the backslash
character (\) before quotes to escape that kind of character.
It is also required to escape the backslash to avoid bypasses. For
example, let us suppose we can control the value randomkey in
the following code, but the quotes are escaped:
WAPTXv2: Section 01, Module 04 -Caendra Inc. © 2020| p.61
4.3.1.2 Escaping Quotes
Instead of randomkey, if we inject randomkey\' alert(1); //
then we have a bypass.
Escape the apostrophe
This is because the application will escape the apostrophe
transforming our input in randomkey\\' alert(1); //.
Escape the backslash
But this will escape only the backslash, allowing us to
terminate the string and inject the alert code.
WAPTXv2: Section 01, Module 04 -Caendra Inc. © 2020| p.62
4.3.1.2 Escaping Quotes
One of useful Javascript methods is
String.fromCharCode().
It allows us to generate strings starting from a sequence of
Unicode values.
U+0073 (N° 115)
LATIN SMALL LETTER S
s
String.fromCharCode(120,115,9416)
U+24C8 (N° 9416)
x
CIRCLED LATIN
U+0078 (N° 120) Ⓢ
CAPITAL LETTER S
LATIN SMALL LETTER X
WAPTXv2: Section 01, Module 04 -Caendra Inc. © 2020| p.63
4.3.1.2 Escaping Quotes
Also, don’t forget:
Spaces allowed here
/your string/.source
43804..toString(36)
NO Spaces allowed with Base36
WAPTXv2: Section 01, Module 04 -Caendra Inc. © 2020| p.64
4.3.1.2 Escaping Quotes
We could also play with the unescape method to escape a
string generated. For example, we could escape a string
with .source technique.
unescape(/%78%u0073%73/.source)
Even if this feature has been deprecated, many browsers
still support it.
WAPTXv2: Section 01, Module 04 -Caendra Inc. © 2020| p.65
4.3.1.2 Escaping Quotes
In addition to this, there are decodeURI and
decodeURIComponent methods. In this case, characters
needs to be URL-encoded to avoid URI malformed errors.
decodeURI(/alert(%22xss%22)/.source)
decodeURIComponent(/alert(%22xss%22)/.source)
WAPTXv2: Section 01, Module 04 -Caendra Inc. © 2020| p.66
4.3.1.2 Escaping Quotes
These methods could be useful if you can inject into a
script or event handler, but you cannot use quotation marks
because they are properly escaped.
Of course, do not forget that each of them will return a
string, so you need an execution sink to trigger the code (IE:
eval).
WAPTXv2: Section 01, Module 04 -Caendra Inc. © 2020| p.67
4.3.1.3 Escaping Parentheses
Parentheses are fundamental to invoke a function and pass
parameters. If a potential filter removes all parenthesis in our
injected vector, how should we act? Gareth Heyes found a way to
pass arguments to a function without parentheses.
The technique abuses the onerror handler that is part of the
window object, assigning a function to call once an error has
been generated using throw followed by the arguments to the
function assigned to the error handler. Crazy huh? Let’s look at
an example.
WAPTXv2: Section 01, Module 04 -Caendra Inc. © 2020| p.68
http://www.thespanner.co.uk/2012/05/01/xss-technique-without-parentheses/
4.3.1.3 Escaping Parentheses
Generate the error
window.onerror=eval;throw'=alert\x281\x29'
Function to invoke in
Parameters for the error function
case of error
WAPTXv2: Section 01, Module 04 -Caendra Inc. © 2020| p.69
4.3.1.3 Escaping Parentheses
This is a simple version: onerror=alert;throw 1;
In some browsers it adds Uncaught to the arguments.
Comparing the two solutions, the first is better, but does
not work in Firefox and Internet Explorer. With this simple
version removes Uncaught from
the arguments.
WAPTXv2: Section 01, Module 04 -Caendra Inc. © 2020| p.70
4.3.1.3 Escaping Parentheses
Since the "arguments section" is quoted, it is possible to do
some encoding like the following:
WAPTXv2: Section 01, Module 04 -Caendra Inc. © 2020| p.71
4.4
Bypassing Browser
Filters
WAPTXv2: Section 01, Module 04 -Caendra Inc. © 2020| p.72
4.4 Bypassing Browser Filters
In the first module of this course, we introduced the main
Client-side Filters used nowadays. These filters try to
protect users from XSS attacks but, as we have seen, they
need to be generic enough to both be enabled always and
avoid blocking legitimate features.
They do not cover all possible XSS attack scenarios and
they focus on Reflected type of XSS. Let’s see some
examples of what they do or do not filter. We should also
consider that some bypasses may have been fixed.
WAPTXv2: Section 01, Module 04 -Caendra Inc. © 2020| p.73
4.4.1 (Un)Filtered Scenarios – Injecting Inside HTML
Tag
Injecting Inside HTML Tag
One of the most common Reflected XSS vectors is the
following: (It this detected by all main filters).
http://victim.site/inject?x=
Hello Injection
WAPTXv2: Section 01, Module 04 -Caendra Inc. © 2020| p.74
4.4.1 (Un)Filtered Scenarios – Injecting Inside HTML
Tag
Injecting Inside HTML Tag
Removing the final greater-than sign (>), we have a bypass
for browsers with XSSAuditor.
http://victim.site/inject?x=
Hello Injection
WAPTXv2: Section 01, Module 04 -Caendra Inc. © 2020| p.75
4.4.2 (Un)Filtered Scenarios – Injecting Inside HTML
Tag Attributes
Injecting Inside HTML Tag Attributes
Another scenario is when it is possible to inject within
HTML attributes:
http://victim.site/inject?x=giuseppe">
Change your username
WAPTXv2: Section 01, Module 04 -Caendra Inc. © 2020| p.76
4.4.2 (Un)Filtered Scenarios – Injecting Inside HTML
Tag Attributes
Injecting Inside HTML Tag Attributes
We can bypass WebKit with:
http://victim.site/inject?x=giuseppe">clickhere
WAPTXv2: Section 01, Module 04 -Caendra Inc. © 2020| p.77
4.4.3 (Un)Filtered Scenarios – Injecting Inside SCRIPT
Tag
Injecting Inside SCRIPT Tag
Often JavaScript variables are set with parameters from
URL:
http://victim.site/inject?name=giuseppe";alert(1);//
var name = "Injection";
WAPTXv2: Section 01, Module 04 -Caendra Inc. © 2020| p.78
4.4.4 (Un)Filtered Scenarios – Injecting Inside Event
Attributes
Injecting Inside Event Attributes
Event attributes are not inspected by native browser filters.
http://victim.site/inject?roomID=alert(1)
Reserve your sit!
WAPTXv2: Section 01, Module 04 -Caendra Inc. © 2020| p.79
4.4.5 (Un)Filtered Scenarios – DOM Based
DOM Based
DOM based are not inspected by native browser filters.
http://victim.site/inject?next=javascript:alert(1)
…
var next = location.search.replace("?next=", "");
domEl.innerHTML = "next page";
WAPTXv2: Section 01, Module 04 -Caendra Inc. © 2020| p.80
4.4.5 (Un)Filtered Scenarios – DOM Based
DOM Based
There are other scenarios that are not covered by browsers
filters.
For example, fragmented vectors in multiple GET
parameters or attacks that are not reflected in the same
page, mXSS, etc.
WAPTXv2: Section 01, Module 04 -Caendra Inc. © 2020| p.81
References
WAPTXv2: Section 01, Module 04 -Caendra Inc. © 2020| p.82
References
XSS Filter Evasion Cheat Sheet
https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
HTML5 Security Cheatsheet
http://html5sec.org/
OWASP ModSecurity Filter
https://github.com/SpiderLabs/owasp-modsecurity-
crs/blob/master/base_rules/modsecurity_crs_41_xss_attacks.conf
xss.swf
https://github.com/evilcos/xss.swf
WAPTXv2: Section 01, Module 04 -Caendra Inc. © 2020| p.83
References
Develop PHP – Development Technology Training Center
http://www.developphp.com/
Events in HTML
http://help.dottoro.com/lhwfcplu.php
Control character
http://en.wikipedia.org/wiki/Control_character
Characters allowed after attribute name
http://shazzer.co.uk/vector/Characters-allowed-after-attribute-name
WAPTXv2: Section 01, Module 04 -Caendra Inc. © 2020| p.84
References
Characters allowed before attribute name
http://shazzer.co.uk/vector/Characters-allowed-before-attribute-name
domxsswiki - ExecutionSinks.wiki
https://code.google.com/p/domxsswiki/wiki/ExecutionSinks
RFC2397
http://tools.ietf.org/html/rfc2397
VBScript is no longer supported in IE11 edge mode
http://msdn.microsoft.com/en-us/library/ie/dn384057(v=vs.85).aspx
WAPTXv2: Section 01, Module 04 -Caendra Inc. © 2020| p.85
References
Using Script Encoder
http://msdn.microsoft.com/en-us/library/cbfz3598(v=vs.84).aspx
Script Encoder Plus
http://dennisbabkin.com/screnc/
XSS technique without parentheses
http://www.thespanner.co.uk/2012/05/01/xss-technique-without-parentheses/
Unofficial URI scheme
http://tools.ietf.org/html/draft-hoehrmann-javascript-scheme-03
WAPTXv2: Section 01, Module 04 -Caendra Inc. © 2020| p.86