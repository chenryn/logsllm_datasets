You can use the fsutil repair set command to view and set a volume’s repair options, which are 
summarized in Table 11-12. The Fsutil utility uses the FSCTL_SET_REPAIR file system control code to set 
these settings, which are saved in the VCB for the volume.
CHAPTER 11
Caching and file systems
707
TABLE 11-12 NTFS self-healing behaviors
Flag
Behavior
SET_REPAIR_ENABLED 
Enable self-healing for the volume.
SET_REPAIR_WARN_ABOUT_DATA_LOSS 
If the self-healing process is unable to fully recover a file, specifies whether 
the user should be visually warned.
SET_REPAIR_DISABLED_AND_BUGCHECK 
_ON_CORRUPTION
If the NtfsBugCheckOnCorrupt NTFS registry value was set by using fsutil
behavior set NtfsBugCheckOnCorrupt 1 and this flag is set, the system will 
crash with a STOP error 0x24, indicating file system corruption. This setting 
is automatically cleared during boot time to avoid repeated reboot cycles.
In all cases, including when the visual warning is disabled (the default), NTFS will log any self-healing 
operation it undertook in the System event log.
Apart from periodic automatic self-healing, NTFS also supports manually initiated self-healing 
cycles (this type of self-healing is called proactive) through the FSCTL_INITIATE_REPAIR and FSCTL_
WAIT_FOR_REPAIR control codes, which can be initiated with the fsutil repair initiate and fsutil 
repair wait commands. This allows the user to force the repair of a specific file and to wait until repair 
of that file is complete.
To check the status of the self-healing mechanism, the FSCTL_QUERY_REPAIR control code or the 
fsutil repair query command can be used, as shown here:
C:\>fsutil repair query c: 
Self healing state on c: is: 0x9 
 Values: 0x1 - Enable general repair. 
0x9 - Enable repair and warn about potential data loss. 
0x10 - Disable repair and bugcheck once on first corruption.
Online check-disk and fast repair
Rare cases in which disk-corruptions are not managed by the NTFS file system driver (through self-heal-
ing, Log file service, and so on) require the system to run the Windows Check Disk tool and to put the vol-
ume offline. There are a variety of unique causes for disk corruption: whether they are caused by media 
errors from the hard disk or transient memory errors, corruptions can happen in file system metadata. In 
large file servers, which have multiple terabytes of disk space, running a complete Check Disk can require 
days. Having a volume offline for so long in these kinds of scenarios is typically not acceptable. 
Before Windows 8, NTFS implemented a simpler health model, where the file system volume was 
either healthy or not (through the dirty bit stored in the VOLUME_INFORMATION attribute). In that 
model, the volume was taken offline for as long as necessary to fix the file system corruptions and bring 
the volume back to a healthy state. Downtime was directly proportional to the number of files in the 
volume. Windows 8, with the goal of reducing or avoiding the downtime caused by file system corrup-
tion, has redesigned the NTFS health model and disk check.
The new model introduces new components that cooperate to provide an online check-disk tool and 
to drastically reduce the downtime in case severe file-system corruption is detected. The NTFS file system 
driver is able to identify multiple types of corruption during normal system I/O. If a corruption is detected, 
708
CHAPTER 11
Caching and file systems
NTFS tries to self-heal it (see the previous paragraph). If it doesn’t succeed, the NTFS file system driver 
writes a new corruption record to the Verify stream of the \Extend\RmMetadata\Repair file. 
A corruption record is a common data structure that NTFS uses for describing metadata corruptions 
and is used both in-memory and on-disk. A corruption record is represented by a fixed-size header, 
which contains version information, flags, and uniquely represents the record type through a GUID, a 
variable-sized description for the type of corruption that occurred, and an optional context.
After the entry has been correctly added, NTFS emits an ETW event through its own event provider 
(named Microsoft-Windows-Ntfs-UBPM). This ETW event is consumed by the service control manager, 
which will start the Spot Verifier service (more details about triggered-start services are available in 
Chapter 10).
The Spot Verifier service (implemented in the Svsvc.dll library) verifies that the signaled corruption is 
not a false positive (some corruptions are intermittent due to memory issues and may not be a result of 
an actual corruption on disk). Entries in the Verify stream are removed while being verified by the Spot 
Verifier. If the corruption (described by the entry) is not a false positive, the Spot Verifier triggers the 
Proactive Scan Bit (P-bit) in the VOLUME_INFORMATION attribute of the volume, which will trigger 
an online scan of the file system. The online scan is executed by the Proactive Scanner, which is run as a 
maintenance task by the Windows task scheduler (the task is located in Microsoft\Windows\Chkdsk, as 
shown in Figure 11-66) when the time is appropriate.
FIGURE 11-66 The Proactive Scan maintenance task.
CHAPTER 11
Caching and file systems
709
The Proactive scanner is implemented in the Untfs.dll library, which is imported by the Windows 
Check Disk tool (Chkdsk.exe). When the Proactive Scanner runs, it takes a snapshot of the target volume 
through the Volume Shadow Copy service and runs a complete Check Disk on the shadow volume. 
The shadow volume is read-only; the check disk code detects this and, instead of directly fixing the 
errors, uses the self-healing feature of NTFS to try to automatically fix the corruption. If it fails, it sends 
a FSCTL_CORRUPTION_HANDLING code to the file system driver, which in turn creates an entry in the 
Corrupt stream of the \Extend\RmMetadata\Repair metadata file and sets the volume’s dirty bit. 
The dirty bit has a slightly different meaning compared to previous editions of Windows. The VOLUME 
_INFORMATION attribute of the NTFS root namespace still contains the dirty bit, but also contains the 
P-bit, which is used to require a Proactive Scan, and the F-bit, which is used to require a full check disk
due to the severity of a particular corruption. The dirty bit is set to 1 by the file system driver if the P-bit
or the F-bit are enabled, or if the Corrupt stream contains one or more corruption records.
If the corruption is still not resolved, at this stage there are no other possibilities to fix it when the 
volume is offline (this does not necessarily require an immediate volume unmounting). The Spot Fixer 
is a new component that is shared between the Check Disk and the Autocheck tool. The Spot Fixer 
consumes the records inserted in the Corrupt stream by the Proactive scanner. At boot time, the 
Autocheck native application detects that the volume is dirty, but, instead of running a full check disk, 
it fixes only the corrupted entries located in the Corrupt stream, an operation that requires only a few 
seconds. Figure 11-67 shows a summary of the different repair methodology implemented in the previ-
ously described components of the NTFS file system.
FIGURE 11-67 A scheme that describes the components that cooperate to provide online check disk 
and fast corruption repair for NTFS volumes.
A Proactive scan can be manually started for a volume through the chkdsk /scan command. In the same 
way, the Spot Fixer can be executed by the Check Disk tool using the spotfix command-line argument.
710
CHAPTER 11
Caching and file systems
EXPERIMENT: Testing the online disk check
You can test the online checkdisk by performing a simple experiment. Assuming that you would 
like to execute an online checkdisk on the D: volume, start by playing a large video stream from 
the D drive. In the meantime, open an administrative command prompt window and start an 
online checkdisk through the following command:
C:\>chkdsk d: /scan 
The type of the file system is NTFS. 
Volume label is DATA. 
Stage 1: Examining basic file system structure ... 
  4041984 file records processed. 
File verification completed. 
  3778 large file records processed. 
  0 bad file records processed. 
Stage 2: Examining file name linkage ... 
Progress: 3454102 of 4056090 done; Stage: 85%; Total: 51%; ETA:   0:00:43 ..
You will find that the video stream won’t be stopped and continues to play smoothly. In case 
the online checkdisk finds an error that it isn’t able to correct while the volume is mounted, it will 
be inserted in the Corrupt stream of the Repair system file. To fix the errors, a volume dismount 
is needed, but the correction will be very fast. In that case, you could simply reboot the machine 
or manually execute the Spot Fixer through the command line:
C:\>chkdsk d: /spotfix
In case you choose to execute the Spot Fixer, you will find that the video stream will be inter-
rupted, because the volume needs to be unmounted.
Encrypted file system
Windows includes a full-volume encryption feature called Windows BitLocker Drive Encryption. 
BitLocker encrypts and protects volumes from offline attacks, but once a system is booted, BitLocker’s 
job is done. The Encrypting File System (EFS) protects individual files and directories from other au-
thenticated users on a system. When choosing how to protect your data, it is not an either/or choice 
between BitLocker and EFS; each provides protection from specific—and nonoverlapping—threats. 
Together, BitLocker and EFS provide a “defense in depth” for the data on your system.
The paradigm used by EFS is to encrypt files and directories using symmetric encryption (a single 
key that is used for encrypting and decrypting the file). The symmetric encryption key is then encrypt-
ed using asymmetric encryption (one key for encryption—often referred to as the public key—and a 
different key for decryption—often referred to as the private key) for each user who is granted access 
to the file. The details and theory behind these encryption methods is beyond the scope of this book; 
however, a good primer is available at https://docs.microsoft.com/en-us/windows/desktop/SecCrypto/
cryptography-essentials.
EXPERIMENT: Testing the online disk check
You can test the online checkdisk by performing a simple experiment. Assuming that you would 
like to execute an online checkdisk on the D: volume, start by playing a large video stream from 
the D drive. In the meantime, open an administrative command prompt window and start an 
online checkdisk through the following command:
C:\>chkdsk d: /scan
The type of the file system is NTFS.
Volume label is DATA.
Stage 1: Examining basic file system structure ...
  4041984 file records processed.
File verification completed.
  3778 large file records processed.
  0 bad file records processed.
Stage 2: Examining file name linkage ...
Progress: 3454102 of 4056090 done; Stage: 85%; Total: 51%; ETA:   0:00:43 ..
You will find that the video stream won’t be stopped and continues to play smoothly. In case 
the online checkdisk finds an error that it isn’t able to correct while the volume is mounted, it will 
be inserted in the Corrupt stream of the Repair system file. To fix the errors, a volume dismount 
is needed, but the correction will be very fast. In that case, you could simply reboot the machine 
or manually execute the Spot Fixer through the command line:
C:\>chkdsk d: /spotfix
In case you choose to execute the Spot Fixer, you will find that the video stream will be inter-
rupted, because the volume needs to be unmounted.
CHAPTER 11
Caching and file systems
711
EFS works with the Windows Cryptography Next Generation (CNG) APIs, and thus may be con-
figured to use any algorithm supported by (or added to) CNG. By default, EFS will use the Advanced 
Encryption Standard (AES) for symmetric encryption (256-bit key) and the Rivest-Shamir-Adleman 
(RSA) public key algorithm for asymmetric encryption (2,048-bit keys).
Users can encrypt files via Windows Explorer by opening a file’s Properties dialog box, clicking 
Advanced, and then selecting the Encrypt Contents To Secure Data option, as shown in Figure 11-
68. (A file may be encrypted or compressed, but not both.) Users can also encrypt files via a command-
line utility named Cipher (%SystemRoot%\System32\Cipher.exe) or programmatically using Windows
APIs such as EncryptFile and AddUsersToEncryptedFile.
Windows automatically encrypts files that reside in directories that are designated as encrypted 
directories. When a file is encrypted, EFS generates a random number for the file that EFS calls the file’s 
File Encryption Key (FEK). EFS uses the FEK to encrypt the file’s contents using symmetric encryption. EFS 
then encrypts the FEK using the user’s asymmetric public key and stores the encrypted FEK in the EFS 
alternate data stream for the file. The source of the public key may be administratively specified to come 
from an assigned X.509 certificate or a smartcard or can be randomly generated (which would then be 
added to the user’s certificate store, which can be viewed using the Certificate Manager (%SystemRoot%\
System32\Certmgr.msc). After EFS completes these steps, the file is secure; other users can’t decrypt the 
data without the file’s decrypted FEK, and they can’t decrypt the FEK without the user private key.
FIGURE 11-68 Encrypt files by using the Advanced Attributes dialog box.
Symmetric encryption algorithms are typically very fast, which makes them suitable for encrypting 
large amounts of data, such as file data. However, symmetric encryption algorithms have a weakness: 
You can bypass their security if you obtain the key. If multiple users want to share one encrypted file 
protected only using symmetric encryption, each user would require access to the file’s FEK. Leaving 
the FEK unencrypted would obviously be a security problem, but encrypting the FEK once would re-
quire all the users to share the same FEK decryption key—another potential security problem.
Keeping the FEK secure is a difficult problem, which EFS addresses with the public key–based half of 
its encryption architecture. Encrypting a file’s FEK for individual users who access the file lets multiple 
users share an encrypted file. EFS can encrypt a file’s FEK with each user’s public key and can store each 
user’s encrypted FEK in the file’s EFS data stream. Anyone can access a user’s public key, but no one 
712
CHAPTER 11
Caching and file systems
can use a public key to decrypt the data that the public key encrypted. The only way users can decrypt 
a file is with their private key, which the operating system must access. A user’s private key decrypts the 
user’s encrypted copy of a file’s FEK. Public key–based algorithms are usually slow, but EFS uses these 
algorithms only to encrypt FEKs. Splitting key management between a publicly available key and a 
private key makes key management a little easier than symmetric encryption algorithms do and solves 
the dilemma of keeping the FEK secure.
Several components work together to make EFS work, as the diagram of EFS architecture in Figure 11-69 
shows. EFS support is merged into the NTFS driver. Whenever NTFS encounters an encrypted file, NTFS 
executes EFS functions that it contains. The EFS functions encrypt and decrypt file data as applications 
access encrypted files. Although EFS stores an FEK with a file’s data, users’ public keys encrypt the FEK. 
To encrypt or decrypt file data, EFS must decrypt the file’s FEK with the aid of CNG key management 
services that reside in user mode.
User
User key store
Registry
Downlevel
client
Windows 10
client
Group policy
LSA
Kerberos
RPC client
NTFS
Disk
EFS service
EFS kernel
helper library
File I/O (plaintext)
Logon
EFS APIs
EFSRPC
EFSRPC
Settings
Keys
SC logon
PIN, cert
EFSRPC
forwarding
EFSRPC
FSCTLs 
for
EFSRPC
Ciphertext
Kernel
SC logon
PIN, cert
Settings
CreateFile
LSA domain
policy store
EFS 
recovery policy
EFS cache
User secrets
FIGURE 11-69 EFS architecture.
The Local Security Authority Subsystem (LSASS, %SystemRoot%\System32\Lsass.exe) manages 
logon sessions but also hosts the EFS service (Efssvc.dll). For example, when EFS needs to decrypt a FEK 
to decrypt file data a user wants to access, NTFS sends a request to the EFS service inside LSASS. 
CHAPTER 11
Caching and file systems
713
Encrypting a file for the first time
The NTFS driver calls its EFS helper functions when it encounters an encrypted file. A file’s attributes re-
cord that the file is encrypted in the same way that a file records that it’s compressed (discussed earlier 
in this chapter). NTFS has specific interfaces for converting a file from nonencrypted to encrypted form, 
but user-mode components primarily drive the process. As described earlier, Windows lets you encrypt 
a file in two ways: by using the cipher command-line utility or by checking the Encrypt Contents To 
Secure Data check box in the Advanced Attributes dialog box for a file in Windows Explorer. Both 
Windows Explorer and the cipher command rely on the EncryptFile Windows API. 
EFS stores only one block of information in an encrypted file, and that block contains an entry for 
each user sharing the file. These entries are called key entries, and EFS stores them in the data decryp-
tion field (DDF) portion of the file’s EFS data. A collection of multiple key entries is called a key ring
because, as mentioned earlier, EFS lets multiple users share encrypted files.
Figure 11-70 shows a file’s EFS information format and key entry format. EFS stores enough informa-
tion in the first part of a key entry to precisely describe a user’s public key. This data includes the user’s 
security ID (SID) (note that the SID is not guaranteed to be present), the container name in which the 
key is stored, the cryptographic provider name, and the asymmetric key pair certificate hash. Only the 
asymmetric key pair certificate hash is used by the decryption process. The second part of the key entry 
contains an encrypted version of the FEK. EFS uses the CNG to encrypt the FEK with the selected asym-
metric encryption algorithm and the user’s public key.
EFS information
Header
Data
decryption
field
Data
recovery
field
Version
Checksum
Number of DDF key entries
DDF key entry 1
DDF key entry 2
Number of DRF key entries
DRF key entry 1
Key entry
User SID
(S-1-5-21-...)
Container name