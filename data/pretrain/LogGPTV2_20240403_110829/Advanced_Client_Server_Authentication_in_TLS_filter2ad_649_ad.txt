Module 
IBM Trust 
Establishment 
Module 
Key 
( a ) Remote Certificates / Policies 
( b ) Remote Certificates / Local Policies 
( c ) Local Certificates / Remote Policies 
( d ) Unlocked Local Certificates / Policies 
( e ) Authorization Decision 
Certificates  Policies  Services 
Figure 5.  The implementation architecture for a trust negotiation prototype supporting the TNT 
protocol, an extension to the TLS handshake protocol.  The implementation extends PureTLS, a 
freely available Java implementation of TLS.  The architecture includes XML role-based access 
control policies and a compliance checker from the IBM Trust Establishment system. 
The following syntax describes the TNT Policy message. 
Struct {Policy policy;}  
opaque Policy 
The  syntax  and  semantics  of  the  Policy  message  is 
not specified in the TNT protocol.  It is dependent on the 
TNT  implementation.    Section  5  discusses  the  policy 
representation in our implementation of TNT. 
5.  Implementation 
There  are  two  approaches  to  supporting  confidential 
trust  negotiation  using  TLS:  build  an  application  level 
protocol above TLS, or integrate trust negotiation into TLS 
client/server  authentication.    The  TNT  protocol  is  an 
example  of  the  latter  approach.    In  our  research,  we  are 
exploring  both  approaches 
the  design  and 
development of TrustBuilder, trust negotiation middleware 
consisting of reusable trust negotiation components.   
through 
An advantage of integrating trust negotiation into TLS is 
the opportunity to leverage capabilities already available in 
a  TLS  implementation,  including  verifying  certificate 
contents  and  both  verifying  and  proving  certificate 
ownership. 
trust 
negotiation  requires  a  custom  solution  providing  similar 
capabilities. 
  An  application-level  protocol  for 
We have implemented a research prototype supporting 
the  TNT  protocol  described  earlier.    The  implementation 
architecture is illustrated in Figure 5.  Our implementation 
extends  PureTLS,  a  free  Java-only  implementation  of  the 
SSL  V3.0  and  TLS  V1.0  protocols.    PureTLS  was 
developed by Eric Rescorla and is distributed by RFTM at 
http://www.rtfm.com/puretls/. 
In  our  implementation,  the  client  and  server  each  rely 
on  a  TrustBuilder  component  to  manage  certificates, 
policies,  and  services.    TrustBuilder  implements  the 
negotiation  strategy  and  handles  all  decision-making 
aspects  of  a  negotiation.    Once  the  client  and  server 
receive 
remote  certificates  and  policies  during  a 
to  TrustBuilder  for 
negotiation, 
evaluation. 
local 
certificates and policies to disclose, and  when to disclose 
them. 
they  submit 
  TrustBuilder  determines  which 
them 
system  has 
a 
compliance 
In our research, we utilize the IBM Trust Establishment 
(TE)  system  [6]  to  create  X.509v3  certificates  and  XML 
role-based  access  control  policies  that  govern  access  to 
sensitive  services  and  certificates.    Additionally,  the  TE 
runtime 
that 
TrustBuilder  uses  to  verify  whether  a  set  of  certificates 
satisfies an access control policy.  Note that the TLS client 
and  server  each  rely  on  the  compliance  checker  during 
trust  negotiation 
the  remote 
certificates received during the negotiation satisfy the local 
policies  governing  access  to  local  services  or  certificates, 
and  2)  whether  local  certificates  satisfy  remote  policies 
received during the negotiation.   
to  verify  1)  whether 
checker 
The  typical  usage  model  for  a  compliance  checker  in 
trust  management  systems  is  to  input  a  set  of  certificates 
and  a  policy  to  a  Boolean  decision  function.    Our  trust 
negotiation  prototype  requires  an  extended  usage  model 
whenever  policies  are  disclosed  during  trust  negotiation.  
For example, when a TLS client receives a policy from the 
TLS server, the client is able to search for local certificates 
that  satisfy  the  server’s  policy,  so  it  can  submit  those 
certificates  to  the  server.    This  allows  the  negotiation  to 
focus  on  only  those  certificates  that  can  advance  the 
negotiation  to  a  successful  conclusion.    However,  this 
requires that the compliance checker accept a set of local 
certificates  and  a  remote  policy  and  return  not  only  a 
Boolean  result  indicating  whether  or  not  the  policy  is 
satisfied,  but  also  the  set  of  certificates  that  satisfy  the 
policy so that they can be disclosed to the other party.  The 
TE system developers provided an API to their compliance 
checker that supports the extended usage model, prompted 
by our requirements for trust negotiation.   
In  our 
implementation, 
the  TrustBuilder 
trust 
negotiation  manager  and  compliance  checker  run  in  a 
separate process, providing a flexible architecture for TLS 
clients  and  servers.    For  instance,  multiple  TLS  servers 
operating  in  a  high-performance  web  server  environment 
can  share  the  compliance  checker,  permitting  all  private 
key  operations  to  be  encapsulated  within  a  separate 
process  that  can  be  isolated  on  a  secure  server  with  a 
cryptographic coprocessor.  
that 
Our  experience  demonstrates 
the  protocol 
extensions  to  TLS  outlined  in  this  paper  can  be  readily 
incorporated into existing TLS implementations while still 
providing  backward  compatibility  with  existing  TLS 
implementations.    The  TNT  implementation  provides  a 
trust  negotiation  protocol  supporting  interoperable  trust 
first 
negotiation  strategies 
the 
implementation  of  confidential  trust  negotiation. 
  A 
research  prototype  implementation  of  TNT  is  available 
from  BYU’s 
Security  Research  Lab 
(http://isrl.cs.byu.edu/). 
[15]  and  provides 
Internet 
as  well  as  keep  some  private  certificate  contents 
completely confidential. 
in 
A  recent  IETF  Internet  draft  from  the  TLS  Working 
Group [2] discusses work in progress to define extensible 
hello  messages 
the  TLS  handshake  protocol.  
Extensibility  will  allow  a  TLS  client  and  server  to 
negotiate additional features.  One example taken from the 
draft document illustrating the use of extensions is to allow 
TLS clients to indicate to TLS servers which CA root keys 
they  possess  in  the  hello  message.    This  example  is  one 
way  to  overcome  a  limitation  to  TLS  authentication 
presented earlier in the paper in which a TLS client cannot 
inform  a  TLS  server  regarding  the  CAs  they  trust.    The 
negotiation  strategy  family  field  added  to  the  hello 
messages in TNT is another example of an item that could 
be included in an extensible hello message. 
Dean et al. [3] describe an extension to TLS that  uses 
client puzzles to prevent denial of service attacks on TLS 
servers.  An imbalance in the computational requirements 
of TLS places an undue burden on the server.  An attacker 
can  exploit  this  to  launch  a  successful  denial  of  service 
attack.    The  use  of  client  puzzles  places  additional 
computational demands on the client that tends to balance 
the  load  enough  to  discourage  and  prevent  successful 
denial  of  service  attacks.    This  paper  introduces  trust 
negotiation 
the 
requirements on TLS  servers.   Adopting  the  use of client 
puzzles into our work has the potential to prevent denial of 
service attacks against TNT. 
into  TLS,  potentially 
increasing 
6.  Related work 
Yu  et  al.  [15]  introduce  the  notion  of  a  family  of  trust 
negotiation  strategies  guaranteed  to  interoperate.    They 
also  introduce  the  idea  of  a  trust  negotiation  protocol 
supporting  a  variety  of  negotiation  strategies.    Our  work 
represents the design and implementation of those ideas in 
TNT,  an  extension  of  the  TLS  handshake  protocol.  
Previous trust negotiation prototypes [13] [11] focused on 
languages  for  trust  negotiation  and  negotiation  strategies.  
The  trust  negotiation  protocols  were  implemented  at  the 
application  layer.    Our  work  extends  these  earlier  efforts 
by  providing  confidential 
the 
verification  of  private  keys  associated  with  certificates 
disclosed during a trust negotiation.  The TNT protocol is 
designed to support negotiation strategy interoperability. 
trust  negotiation  and 
Persiano  et  al.  [7]  introduce  the  SPSL  protocol  to 
extend  TLS  so  that  a  portion  of  a  disclosed  certificate 
remains private from the party to which the certificate was 
disclosed.    This  is  desirable  when  an  attribute  certificate 
contains  some  sensitive  attributes  that  need  not  be 
disclosed  in  order  to  establish  trust.    Our  work  on  trust 
negotiation focuses on establishing trust in another party in 
order to disclose a certificate to them.  The two approaches 
complement one another and  could be combined in order 
to authenticate another party prior to certificate disclosure 
7.  Conclusions and future work 
This  paper  presents  TNT,  an  extension  to  the  TLS 
handshake  protocol  supporting  advanced  client/server 
authentication in TLS.  TNT incorporates recent advances 
in  trust  negotiation  from  TrustBuilder  [15]  into  TLS 
client/server  authentication.    This  integration  overcomes 
the existing limitations in TLS client/server authentication 
for establishing trust between strangers.   
By integrating trust negotiation into TLS, the strengths 
of the TLS protocol are leveraged to provide confidential 
trust  negotiation  and  the  verification  of  private  keys 
associated  with  certificates  disclosed  during  a 
trust 
negotiation.  TNT exploits the rehandshake facility of TLS 
to enable a TLS server to “pull” certificates from the client 
as  needed,  according  to  the  access  control  policies  of  a 
sensitive resource accessed by a TLS client.   
An implementation of TNT has been built that extends 
PureTLS,  a  Java  TLS  package  that  is  freely  available.  
This  implementation  is  the  first  to  provide  confidential 
trust  negotiation,  the  verification  of  private  keys  during 
trust negotiation, and a trust negotiation protocol designed 
to support interoperable trust negotiation strategies [15]. 
In 
the  future,  we  will  explore  alternative 
trust 
negotiation strategies to insure that the current protocol is 
9.  References 
[1]  T. Barlow, A. Hess, and K. E. Seamons. Trust Negotiation 
in  Electronic  Markets.  Eighth  Research  Symposium  on 
Emerging  Electronic  Markets,  Maastricht,  Netherlands, 
September 2001. 
[2]  S.  Blake-Wilson,  M.  Nystrom,  D.  Hopwood,  J. Mikkelsen, 
and  T.  Wright.  TLS  Extensions.  Internet  Draft,  TLS 
Working Group, June 20, 2001.  Work in progress available 
at http://www.ietf.org/internet-drafts/draft-ietf-tls-extensions-00.txt. 
[3]  D.  Dean  and  A.  Stubblefield.  Using  Client  Puzzles  to 
Protect  TLS.  Proceedings  of  the  10th  USENIX  Security 
Symposium, Washington D.C., August 2001. 
[4]  T. Dierks and C. Allen. The TLS protocol version 1.0. RFC 
2246, January 1999. 
[5]  A.  Frier,  P.  Karlton,  and  P.  C.  Kocher.  The  SSL  3.0 
Protocol.  Netscape Communications Corp., Nov. 18, 1996. 
[6]  A.  Herzberg,  J.  Mihaeli,  Y.  Mass,  D.  Naor,  and  Y.  Ravid. 
Access  Control  Meets  Public  Key  Infrastructure,  Or: 
Assigning Roles to Strangers.  IEEE Symposium on Security 
and Privacy, Oakland, May 2000. 
[7]  P. Persiano and I Visconti.  User Privacy Issues Regarding 
Certificates and the TLS Protocol.  7th  ACM  Conference  of 
Computer  and  Communications  Security,  Athens,  Greece, 
November 2000. 
[8]  Recommendation  X.509--Information  Technology—Open 
Systems  Interconnection--The  Directory:  Authentication 
Framework.  International  Telecommunication  Union,  Aug. 
1997. 
[9]  E. Rescorla. SSL and TLS: Designing and Building Secure 
Systems. Addison-Wesley, 2001. 
[10] K.  E.  Seamons,  M.  Winslett,  and  T.  Yu.  Limiting  the 
Disclosure  of  Access  Control  Policies  During  Automated 
Trust  Negotiation.  Symposium  on  Network  and  Distributed 
System Security, San Diego, Feb. 2001. 
[11] K. E. Seamons, W. Winsborough, and M. Winslett. Internet 
Credential  Acceptance  Policies.  Proceedings  of 
the 
Workshop on Logic Programming for Internet Applications, 
Leuven, Belgium, July 1997 
[12] S.  Thomas.  SSL  and  TLS  essentials:  Securing  the  Web. 
Wiley Computer Publishing, 2000. 
[13] W. Winsborough, K. E. Seamons, and V. Jones. Automated 
Information  Survivability 
Trust  Negotiation.  DARPA 
Conference and Exposition, Hilton Head, SC, Jan. 2000. 
[14] T. Yu, X. Ma, and M. Winslett. PRUNES: An Efficient and 
Complete  Strategy  for  Automated  Trust  Negotiation  over 
the  Internet.  7th  ACM  Conference  on  Computer  and 
Communications Security, Athens, Greece, November 2000. 
[15] T.  Yu,  M.  Winslett,  and  K.  E.  Seamons.  Interoperable 
Strategies  in  Automated  Trust  Negotiation.  8th  ACM 
Conference  on  Computer  and  Communications  Security, 
Philadelphia, Pennsylvania, November 2001. 
sufficiently  general  to  support  all  useful  negotiation 
strategy  families. 
  Also,  policy  languages  for  trust 
negotiation is an active area of research, and requirements 
for a trust negotiation policy language are emerging.  We 
believe  it  unlikely  that  a  single  policy  language  will  be 
universally adopted.  We intend to examine current policy 
languages  in  terms  of  ease  of  use,  expressiveness,  and 
efficiency  for  use  during 
  This 
exploration  will  help  identify  any  needed  extensions  to 
TNT to support policy language interoperability, including 
additional  negotiation  parameters  TLS  handshake  hello 
messages, such as certificate format and policy language. 
trust  negotiation. 
Trust negotiation places greater computational demands 
on  TLS  servers,  requiring  further  study  of  performance 
optimizations and scalable security architectures for TNT.  
Our research to date has not addressed performance.  The 
current  TNT  prototype  consists  of  non-optimized  Java 
code.   
At  times,  a  client  may  want  to  authenticate  a  server 
prior  to  sending  a  sensitive  service  request,  known  as 
client-initiated trust establishment [1].  To illustrate when 
this might occur, suppose a client refuses to send personal 
information  gathered  by  the  service  until  the  server 
discloses  a  TRUSTe  certificate  declaring  that  the  server 
handles  private  information  appropriately,  such  as  not 
disclosing  it  to  a  third  party  unless  the  client  provides 
explicit authorization.  Since TLS allows a client to initiate 
a rehandshake, the client could establish trust in the server 
before any sensitive application data is transmitted, using a 
similar  approach 
the  server-initiated  rehandshake 
approach adopted by TNT in this paper. 
to 
that  a 
it  necessary 
  This  made 
This  paper  considered  trust  negotiations  involving 
sensitive  certificates,  requiring  that  trust  negotiations  be 
confidential. 
trust 
negotiation  always  occur  in  the  context  of  an  encrypted 
TLS  rehandshake.    In  the  future,  we  will  consider 
extending  TLS  to  support  the  simplest  negotiations  not 
involving sensitive certificates.  Simple negotiations could 
occur  frequently  in  practice,  for  example,  during  client-
initiated trust establishment when the client verifies that a 
TLS  server  satisfies  a  general,  well-known  security 
requirement that need not be kept confidential.  These trust 
negotiations  could  be  conducted  during  the  initial  TLS 
handshake, since they do not require confidentiality. 
8.  Acknowledgements 
This research was supported by DARPA through AFRL 
contract  number  F33615-01-C-0336  and  the  Space  and 
Naval  Warfare  Systems  Center  San  Diego  grant  number 
N66001-01-18908. 
to 
Marianne  Winslett 
feedback  and 
discussions on an earlier version of this paper and to Ryan 
Jarvis  for  his  help  preparing  the  final  submission.    They 
also thank the anonymous reviewers for their comments.  
  The  authors  express 
for  her  helpful 
thanks