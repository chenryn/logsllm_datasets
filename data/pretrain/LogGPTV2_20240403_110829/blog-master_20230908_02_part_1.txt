## 沉浸式学习PostgreSQL|PolarDB 15: 企业ERP软件、网站、分析型业务场景、营销场景人群圈选, 任意字段组合条件数据筛选   
### 作者      
digoal      
### 日期      
2023-09-08      
### 标签      
PostgreSQL , PolarDB , 数据库 , 教学      
----      
## 背景      
欢迎数据库应用开发者参与贡献场景, 在此[issue](https://github.com/digoal/blog/issues/121)回复即可, 共同建设《沉浸式数据库学习教学素材库》, 帮助开发者用好数据库, 提升开发者职业竞争力, 同时为企业降本提效.      
- 系列课程的核心目标是教大家怎么用好数据库, 而不是怎么运维管理数据库、怎么开发数据库内核. 所以面向的对象是数据库的用户、应用开发者、应用架构师、数据库厂商的产品经理、售前售后专家等角色.      
本文的实验可以使用永久免费的阿里云[云起实验室](https://developer.aliyun.com/adc/scenario/f55dbfac77c0467a9d3cd95ff6697a31)来完成.      
如果你本地有docker环境也可以把镜像拉到本地来做实验:      
x86_64机器使用以下docker image:      
- [《amd64 image》](../202307/20230710_03.md)      
ARM机器使用以下docker image:      
- [《arm64 image》](../202308/20230814_02.md)      
## 业务场景1 介绍: 企业ERP软件、网站、分析型业务场景、营销场景人群圈选, 任意字段组合条件数据筛选   
在企业ERP软件、网站中经常会有一些让用户输入筛选条件(或者勾选筛选条件)的地方, 一个页面可能出现若干个选项, 每个选项用户可以进行勾选或下拉框选择.    
例如淘宝网, 发货地是哪里, 商品价格范围, 商品类目, 内存大小, .... 很多选项提供选择.    
分析业务场景, 经常会使用大宽表来表示对象的特征, 每个字段代表一个特征维度, 然后通过各个字段的组合条件来进行数据的统计分析.    
营销场景, 和前面分析场景类似, 通过各个字段的组合条件圈选目标用户.    
通常一个选项代表一个对象的某一个属性, 也就是用户可能根据任意组合条件进行筛选, 本实验主要目标是学习如何快速的在任意字段组合的条件输入下, 搜索到满足条件的数据.    
### 实现和对照      
1、创建1个测试大宽表, 1个PK, 1000个字段, 500个字符串, 500个int类型.  
```  
do language plpgsql $$  
declare  
  sql text := '';  
begin  
  drop table if exists tbl;  
  sql := 'create unlogged table tbl(id int primary key,';  
  for i in 1..500 loop  
    sql := sql || 'c' || i || ' text,';  
  end loop;  
  for i in 501..1000 loop  
    sql := sql || 'c' || i || ' int,';  
  end loop;  
  sql := rtrim(sql,',');  
  sql := sql||')';  
  execute sql;  
end;  
$$;   
```  
2、写入测试数据 10 万条, 每个字段的值随机生成.  
```  
do language plpgsql $$  
declare  
  sql text := '';  
begin  
  sql := 'insert into tbl select generate_series(1,100000), ';  
  for i in 1..500 loop  
    sql := sql || 'round((random()*100)::numeric, 2)::text,' ;  
  end loop;  
  for i in 501..1000 loop  
    sql := sql || '(random()*100)::int,' ;  
  end loop;  
  sql := rtrim(sql,',');  
  execute sql;  
end;  
$$;   
```  
#### 传统方法 设计和实验    
1、每个字段创建1个索引  
```  
do language plpgsql $$  
declare  
  sql text := '';  
begin  
  for i in 1..1000 loop  
    sql := 'create index on tbl (c' || i || ')';  
    execute sql;  
  end loop;  
end;  
$$;  
```  
```  
vacuum analyze tbl;  
```  
2、使用任意条件筛选记录  
```  
select id from tbl where c10='11.11' and c501=1 and c700=99 and c800=80 and c900=90 and c1000=1;  
postgres=# explain analyze select id from tbl where c10='11.11' and c501=1 and c700=99 and c800=80 and c900=90 and c1000=1;  
                                                           QUERY PLAN                                                             
--------------------------------------------------------------------------------------------------------------------------------  
 Bitmap Heap Scan on tbl  (cost=10.54..11.66 rows=1 width=4) (actual time=0.204..0.205 rows=0 loops=1)  
   Recheck Cond: ((c10 = '11.11'::text) AND (c1000 = 1))  
   Filter: ((c501 = 1) AND (c700 = 99) AND (c800 = 80) AND (c900 = 90))  
   ->  BitmapAnd  (cost=10.54..10.54 rows=1 width=0) (actual time=0.201..0.202 rows=0 loops=1)  
         ->  Bitmap Index Scan on tbl_c10_idx  (cost=0.00..1.47 rows=10 width=0) (actual time=0.017..0.018 rows=14 loops=1)  
               Index Cond: (c10 = '11.11'::text)  
         ->  Bitmap Index Scan on tbl_c1000_idx  (cost=0.00..8.82 rows=990 width=0) (actual time=0.180..0.181 rows=978 loops=1)  
               Index Cond: (c1000 = 1)  
 Planning Time: 23.427 ms  
 Execution Time: 0.252 ms  
(10 rows)  
```  
编写测试函数, 自动生成查询语句, 第一个参数表示要查询几个字符串字段, 第二个参数表示要查询几个INT字段.  
```  
create or replace function get_uid(int, int) returns setof int as $$  
declare  
  sql text := '';  
begin  
  for i in 1..$1 loop  
    sql := sql || 'c' || ceil(random()*500)::int || ' = ''' || round((random()*100)::numeric, 2)::text || ''' and ';  
  end loop;  
  for i in 1..$2 loop  
    sql := sql || 'c' || 500 + ceil(random()*500)::int || ' = ' || (random()*100)::int || ' and ';  
  end loop;  
  sql := 'select id from tbl where ' || rtrim(sql, 'and ');  
  -- raise notice '%', sql;  
  return query execute sql;  
end;  
$$ language plpgsql strict;  
```  
```  
-- 组合查询5个字符串字段条件, 10个int字段条件.  
select * from get_uid(5, 10);  
postgres=# select * from get_uid(5,10);  
NOTICE:  select id from tbl where c285 = '94.00' and c176 = '21.69' and c201 = '61.58' and c248 = '82.78' and c238 = '57.56' and c611 = 53 and c929 = 78 and c531 = 11 and c780 = 53 and c590 = 88 and c996 = 21 and c549 = 1 and c801 = 44 and c748 = 42 and c918 = 46  
 get_uid   
---------  
(0 rows)  
postgres=# select * from get_uid(5,10);  
NOTICE:  select id from tbl where c72 = '31.83' and c6 = '61.87' and c401 = '98.84' and c311 = '37.58' and c59 = '4.44' and c782 = 18 and c609 = 17 and c581 = 64 and c896 = 38 and c986 = 91 and c967 = 88 and c898 = 92 and c640 = 47 and c899 = 14 and c935 = 44  
 get_uid   
---------  
(0 rows)  
```  
3、查询性能压测  
```  
vi t1.sql  
select * from get_uid(5, 10);  
```  
```  
pgbench -M prepared -n -r -P 1 -f ./t1.sql -c 10 -j 10 -T 120  
transaction type: ./t1.sql  
scaling factor: 1  
query mode: prepared  
number of clients: 10  
number of threads: 10  
duration: 120 s  
number of transactions actually processed: 98063  
latency average = 12.235 ms  
latency stddev = 5.583 ms  
initial connection time = 21.713 ms  
tps = 817.238399 (without initial connection time)  
statement latencies in milliseconds:  
        12.235  select * from get_uid(5, 10);  
```  
4、表和空间占用情况  
```  
postgres=# select pg_size_pretty(pg_table_size('tbl'::regclass));  
 pg_size_pretty   
----------------  
 782 MB  