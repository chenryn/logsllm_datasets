Deﬁnition 4. An (atomic) attacker process for a set of
sender addresses A ⊆ IPs is an atomic DY process p =
(I, Z, R, s0, N ) such that for all a, f ∈ IPs, m ∈ TN ,
and s ∈ Z we have that ((a:f :m), s)R(E, s(cid:2)) iff s(cid:2) =
(cid:5)(cid:5)a, f, m(cid:6), s(cid:6) and E = {(a(cid:2):f(cid:2):m(cid:2)) | a(cid:2) ∈ IPs, f(cid:2) ∈ A,
m(cid:2) ∈ dN ({m, s})}.
III. OUR WEB MODEL
We now present our web model. We formalize the web
infrastructure and web applications by what we call a web
system. A web system, among others, contains a (possibly
inﬁnite) set of DY processes, which model web browsers,
web servers, DNS servers as well as web and network
attackers.
As already mentioned in the introduction,
the model
has been carefully designed, closely following published
(de-facto) standards, for instance, the HTTP/1.1 standard,
associated (proposed) standards (mainly RFCs), and the
HTML5 W3C candidate recommendation. We also checked
these standards against the actual implementations (primarily,
Chromium and Firefox).
A. Web System
Before we can deﬁne a web system, we deﬁne scripting
processes, which model client-side scripting technologies,
such as JavaScript, in our browser model. Scripting processes
are deﬁned similarly to DY processes.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:20 UTC from IEEE Xplore.  Restrictions apply. 
Deﬁnition 5. A scripting process (or simply, a script) is a
relation R ⊆ (TN × 2N ) × TN such that for all s, s(cid:2) ∈ TN
and N ⊆ N with (s, N ) R s(cid:2) it follows that s(cid:2) ∈ dN (s).
A script is called by the browser which provides it with
a (fresh, inﬁnite) set N of nonces and state information s.
The script then outputs a term s(cid:2), which represents the new
internal state and some command which is interpreted by
the browser (see Section III-D for details).
Similarly to an attacker process, we deﬁne the attacker
script Ratt. This script outputs everything that is derivable
from the input, i.e., Ratt = {((s, N ), s(cid:2)) | s ∈ TN , N ⊆
N , s(cid:2) ∈ dN (s)}.
We can now deﬁne web systems, where we distinguish
between web and network attackers. Unlike web attackers,
network attackers can listen to addresses of other parties
and can spoof the sender address, i.e., they can control the
network. Typically, a web system has either one network
attacker or one or more web attackers, as network attackers
subsume all web attackers. As we will see later, web and
network attacks may corrupt other entities, such as browsers.
Deﬁnition 6. A web system WS = (W , S , script, E0) is a
tuple with its components deﬁned as follows:
The ﬁrst component, W , denotes a system (a set of DY
processes) and is partitioned into the sets Hon, Web, and
Net of honest, web attacker, and network attacker processes,
respectively. We require that all DY processes in W have
disjoint sets of nonces, i.e., N p ∩ N p(cid:2)
= ∅ for every distinct
p, p(cid:2) ∈ W .
Every p ∈ Web ∪ Net is an attacker process for some set
of sender addresses A ⊆ IPs. For a web attacker p ∈ Web,
we require its set of addresses I p to be disjoint from the set
of addresses of all other web attackers and honest processes,
i.e., I p ∩ I p(cid:2)
= ∅ for all p(cid:2) ∈ Hon ∪ Web. Hence, a web
attacker cannot listen to trafﬁc intended for other processes.
Also, we require that A = I p, i.e., a web attacker can only
use sender addresses it owns. Conversely, a network attacker
may listen to all addresses (i.e., no restrictions on I p) and
may spoof all addresses (i.e., the set A may be IPs).
Every p ∈ Hon is a DY process which models either a web
server, a web browser, or a DNS server, as further described
in the following subsections. Just as for web attackers, we
require that p does not spoof sender addresses and that its
set of addresses I p is disjoint from those of other honest
processes and the web attackers.
The second component, S, is a ﬁnite set of scripts such
that Ratt ∈ S. The third component, script, is an injective
mapping from S to S, i.e., by script every s ∈ S is assigned
its string representation script(s).
Finally, E0 is a multi-set of events, containing an inﬁnite
number of events of the form (a:a:TRIGGER) for every a ∈
(cid:2)
p∈W I p.
A run of WS is a run of W initiated by E0.
In the deﬁnition above, the multi-set E0 of initial events
contains for every process and address an inﬁnite number of
TRIGGER messages in order to make sure that every process
in W can be triggered arbitrarily often. In particular, by this
it is guaranteed that an adversary (a dishonest server/browser)
can be triggered arbitrarily often. Also, we use trigger events
to model that an honest browser takes an action triggered
by a user, who might, for example, enter a URL or click on
some link.
The set S \ {Ratt} speciﬁed in a web system as deﬁned
above is meant to describe the set of honest scripts used
in the considered web application. These scripts are those
sent out by an honest web server to a browser as part
of a web application. In real web applications, possibly
several dynamically loaded scripts may run in one document.
However, if these scripts originate from honest sites, their
composition can be considered to be one honest script (which
is loaded right from the start into the document). In this
sense, every script in S \ {Ratt} models an honest script
or a combination of such scripts in a web application. (In
our case study, the combination is illustrated by the script
running in RP-Doc.)
We model the situation where some malicious script was
loaded into a document by the “worst-case” scenario, i.e., we
allow such a script to be the script Ratt. This script subsumes
everything any malicious (and honest) script can do.
We emphasize that script representations being modeled
as strings are public information, i.e., any server or attacker
is free to send out the string representation for any script.
Since we do not model client-side or server-side language
details, and hence details such as correct escaping of user
input, we cannot analyze whether a server application
(say, written in PHP) is vulnerable to Cross-Site-Scripting.
However, we can model the effects of Cross-Site-Scripting
by letting the (model of the) server output the script Ratt,
say, if it receives certain malicious input.
In the following subsections, (honest) DNS servers and
web browsers are modeled as DY processes, including the
modeling of HTTP messages. We also discuss the modeling
of web servers.
B. DNS Servers
For the sake of brevity, in this paper we consider a ﬂat
DNS model in which DNS queries are answered directly
by one DNS server and always with the same address for
a domain. A full (hierarchical) DNS system with recursive
DNS resolution, DNS caches, etc. could also be modeled to
cover certain attacks on the DNS system itself.
A DNS server d (in a ﬂat DNS model) is modeled in a
straightforward way as a DY process (I d,{sd
0, N d).
It has a ﬁnite set of addresses I d and its initial (and only)
state sd
0 encodes a mapping from domain names to ad-
0=(cid:5)(cid:5)domain1, a1(cid:6),(cid:5)domain2, a2(cid:6), . . .(cid:6).
dresses of the form sd
DNS queries are answered according to this table. DNS
0}, Rd, sd
676
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:20 UTC from IEEE Xplore.  Restrictions apply. 
possible; otherwise stop {}, s
Algorithm 1 Relation of a DNS server Rd
Input: (a:f :m), s
1: let domain, n such that (cid:2)DNSResolve, domain, n(cid:3) ≡ m if
2: if domain ∈ s then
3:
4:
5:
6: stop {}, s
let addr := s[domain]
let m(cid:2) := (cid:2)DNSResolved, addr , n(cid:3)
stop {(f :a:m(cid:2))}, s
In Algorithm 1, we specify the relation Rd ⊆ (E×{sd
queries have the following form, illustrated by an example:
(cid:5)DNSResolve, example.com, n(cid:6), where example.com is the
domain name to be resolved and n is a nonce representing
the random query ID and UDP source port number selected
by the sender of the query. The corresponding response is
of the form (cid:5)DNSResolved, a, n(cid:6), where a ∈ IPs is the IP
address of the queried domain name and n is the nonce from
the query.
0})×
(2E × {sd
0}) of the DNS server d precisely, where stop E, s
means that the process stops its execution at this point, that s
is the new state of the process, and that it outputs all events
in the set E. First, it is checked whether the input message m
is a sequence of the form (cid:5)DNSResolve, domain, n(cid:6); if not,
the process stops without changing the state and producing
output. Then, it is checked whether domain is recorded in
s. If so, the corresponding address, denoted by s[domain],
is retrieved from s. Finally, the corresponding response
message m(cid:2) is constructed and this message is output as
event (f :a:m(cid:2)), with the state of d being unchanged.
C. HTTP Messages
In order to model web browsers and servers, we ﬁrst need
to model HTTP requests and responses.
HTTP requests and responses are encoded as messages
(ground terms). An HTTP request (modeled as a message)
contains a nonce, a method (for example, GET or POST),
a domain name, a path, URL parameters, request headers
(such as Cookie or Origin), and a message body.
For example, an HTTP GET request for the URL http:
//example.com/show?page=1 is modeled as the term r :=
(cid:5)HTTPReq, n1, GET, example.com, /show,(cid:5)(cid:5)page, 1(cid:6)(cid:6),(cid:5)(cid:6),(cid:5)(cid:6)(cid:6),
where body and headers are empty. A web server that
responds to this request is supposed to include the nonce
n1 contained in r in the response so that the browser can
match the request
to the corresponding response. More
speciﬁcally, an HTTP response (modeled as a message)
contains a nonce (matching the request), a status code (e.g.,
200 for a normal successful response), response headers
(such as Set-Cookie and Location), and a body. For
example, a response to r could be s := (cid:5)HTTPResp, n1,
200,(cid:5)(cid:5)Set-Cookie,(cid:5)SID,(cid:5)n2,⊥,(cid:3),⊥(cid:6)(cid:6)(cid:6)(cid:6),(cid:5)script1, n3(cid:6)(cid:6),
where s contains (1) in the headers section, a cookie with
the name SID, the value n2, and the attributes secure
and httpOnly not set but the attribute session set (see
Section III-D for details on cookies) and (2) in the body
section, the string representation script1 of the scripting
−1(script1) (which should be an element of
process script
S) and its initial state n3.
For the HTTP request and response in the above examples,
the corresponding HTTPS request would be of the form
enca((cid:5)r, k(cid:2)(cid:6), pub(kexample.com)) and the response of the form
encs(s, k(cid:2)) where k(cid:2) is a fresh symmetric key (a nonce)
which is typically generated by the sender of the request.
The responder is supposed to use this key to encrypt the
response.
D. Web Browsers
We think of an honest browser to be used by one honest
user. However, we also allow browsers to be taken over by
attackers. The honest user is modeled as part of the web
browser model. Actions a user takes are modeled as non-
deterministic actions of the web browser. For example, the
web browser itself can non-deterministically follow the links
provided by a web page. Secrets, such as passwords, typically
provided by the user are stored in the initial state of a browser
and are given to a web page when needed, similar to the
AutoFill function in browsers (see below).
A web browser p is modeled as a DY process (I p, Z p,
0, N p) where I p ⊆ IPs is a ﬁnite set and N p ⊆ N is an
Rp, sp
inﬁnite set. The set of states Z p, the initial state sp
0, and the
relation Rp are deﬁned below (Sections III-D1 and III-D2).
In the full version of this paper [14], Rp is formally deﬁned
as a (non-deterministic) algorithm in the style of Algorithm 1.
0): The set Z p of states of a
1) Browser State (Z p and sp
browser consists of terms of the form
(cid:5)windows, secrets, cookies, localStorage,
sessionStorage, keyMapping, sts, DNSaddress,
nonces, pendingDNS , pendingRequests, isCorrupted(cid:6).
Windows and documents. The most important part of the
state are windows and documents, both stored in the subterm
windows. A browser may have a number of windows open
at any time (resembling the tabs in a real browser). Each
window contains a list of documents of which one is “active”.
Being active means that this document is currently presented
to the user and is available for interaction, similarly to
the deﬁnition of active documents in the HTML5 speciﬁ-
cation [18]. The document list of a window represents the
history of visited web pages in that window. A window may
be navigated forward and backward (modeling forward and
back buttons). This deactivates one document and activates
its successor or predecessor.
A document is speciﬁed by a term which essentially
contains (the string representing) a script, the current state
of the script,
the script obtained so far
(from XHRs and postMessages), the origin (domain name
the input
that
677
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:20 UTC from IEEE Xplore.  Restrictions apply. 
plus HTTP or HTTPS) of the document, and a list of
windows (called subwindows), which correspond to iframes
embedded in the document, resulting in a tree of windows
and documents. The (single) script is meant to model the
static HTML code, including, for example, links and forms,
and possibly multiple JavaScript code parts. When called by
the browser, a script essentially outputs a command which
is then interpreted by the browser, such as following a link,
creating an iframe, or issuing an XHR. In particular, a script
can represent a plain HTML document consisting merely of
links, say: when called by the browser such a script would
non-deterministically choose such a link and output it to the
browser, which would then load the corresponding web page
(see below for details).
We use the terms top-level window (a window which is not
a subwindow itself), parent window (the window of which
the current window is a direct subwindow) and ancestor
window (some window of which the current window is a not
necessarily direct subwindow) to describe the relationships
in a tree of windows and documents.
A term describing a window or a document also contains a
unique nonce, which we refer to by reference. This reference
is used to match HTTP responses to the corresponding
windows and documents from which they originate (see
below).
Top-level windows may have been opened by another
window. In this case, the term of the opened window contains
a reference to the window by which it was opened (the
opener). Following the HTML5 standard, we call such a
window an auxiliary window. Note that auxiliary windows
are always top-level windows.
We call a window active if it is a top-level window or if it
is a subwindow of an active document in an active window.
Note that the active documents in all active windows are
exactly those documents a user can currently see/interact
with in the browser.
The following is an example of a window term with
reference n1, two documents, and an opener (n4):