data. In the first case, A2 needs to check that the decryption
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
Stefano Cristalli, Long Lu, Danilo Bruschi, and Andrea Lanzi
operation performed by the secret key is correct, and in the
second case A2 needs to check whether the pass-phrase/PIN
is correct. These checks must occur before any critical use of
the data, otherwise the communication is not authenticated.
Only in case the checks are correct, the data is authenticated
and the communication can continue.
We mentioned “authentication checks” that are performed in
step 3. It is crucial to define what form these controls might assume,
in a way that helps us target their recognition in code. Moreover
such a definition should be general enough to capture the majority
of several forms of the authentication schemes deployed by different
developers. We define a communication in our model as some
exchange of data from A1 to A2, beginning when A2 reads the
data from the communication channel. We define a use of the
data as any operation whose result depends on the data itself. We
define an authenticated use of the data as any instruction that
needs to be authenticated before access to the data. We give the
following definition of authentication in our model: given a
communication over a peer-to-peer channel with exchanged data
D, an authentication is a condition in code situated between the
beginning of the communication and the first authenticated use of
D, which either: (1) allows the execution to continue, in case D is
successfully authenticated, or (2) prevents any authenticated uses
of D every time the authentication is unsuccessful. The internal
logic of the authentication checks depends on the context, and is
therefore not possible to include it in the definition.
3.2 Detection of Authentication Scheme
For detecting authentication, we first explore the possibility of
identifying authentication schemes via the use of particular APIs.
If such APIs existed, then we could reduce our analysis to a code
reachability problem. This is the case, for instance, of authentication
over Unix domain sockets [25]. Unfortunately, we could not find
any standard APIs for app-level authentication for the technologies
we analyzed. For this reason, we shift our focus on detecting a set
of instructions in the code that might indicate the presence of an
authentication mechanism. In such a context we must clearly define
a strategy for identifying possible authentications once we track
the data of our interest. The first step for creating a scalable analysis
framework is to identify boundary code points in the application.
Such boundary permits to restrict the analysis only to a part of
code that potentially could contain an authentication scheme. After
the boundary area is identified we can apply further code analysis
techniques in order to validate the authentication scheme. In our
system the boundary area is defined by two main elements: the
entry and exit points.
More specifically, an entry point is an instruction in the code that
indicates the start of the communication over the analyzed channel
(e.g., data receiving). Given this broad definition, we can recognize
multiple entry points in an application for a given communica-
tion. For example, In Listing 1 we can see an example of Bluetooth
communication in Android app. Since the data is read from the
stream at line 13, the instruction represents an entry point. The call
socket.getInputStream() at line 11 is also an entry point for this
communication. We are obviously interested in entry points that
Listing 1: Sample Bluetooth socket communication
try {
socket = mmServerSocket.accept();
} catch (IOException e) {
Log.e(TAG, "Socket's accept() method failed", e);
break;
}
if (socket != null) {
InputStream inputStream;
try {
inputStream = socket.getInputStream();
byte[] buffer = new byte[10];
inputStream.read(buffer);
if (buffer[1] == 10) {
writeToFile(buffer);
FunctionLibrary fl = new FunctionLibrary();
writeToFile(fl.return6());
}
mmServerSocket.close();
} catch (IOException e) {
e.printStackTrace();
}
break;
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
help to indicate the start of communication for a specific channel
such as Bluetooth. An accurate identification of the entry points
for a communication channel will ensure that all possible com-
munications over such channel are identified and targeted by our
analysis.
The end of the boundary is defined by an exit point. An exit point
is represented by the first authenticated use of the data coming from
the monitored channel. Even though exit points exist for every
communication, it is hard to define whether an exit point is an
authenticated use of the data or not, since this is a semantic property
of an use. As an example, the use of line 15 in Listing 1, where the
data is written to file, may or may not be an authenticated use,
depending on what the file is used for. If it is a log file used simply
for debugging purposes, and virtually never checked unless an
error occurs, then it is not important that authentication necessarily
occurs before such point. On the other hand, if the data defined
into the file is part of the main flow of the app protocol, then
authentication must necessarily occur in order to avoid untrusted
and potentially dangerous data in the file.
Due to this ambiguity of the use of the data, we design a detec-
tion strategy that is not dependent on exit points. In particular we
design an algorithm (Algorithm 3.1), based on program analysis
techniques, that performs data and control flow analysis. The al-
gorithm starts computing the Control Flow Graph (CFG) and Data
Dependency Graph (DDG) for each analyzed app (line 7-8). Both
graphs are necessary to find out the relationships between data of
our interest and the condition statements that depend on such data.
Then, for each node in the CFG, the system determines whether
it is an entry point by using function isEP. This function uses a
pre-defined table based on function signatures related to a specific
Detecting (Absent) App-to-app Authentication on Cross-device Short-distance Channels
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
communication channel (Section 4.2). If no entry points are found,
the result NO AUTH NEEDED is returned (lines 9-12). In all the other
cases, each node in the DDG is analyzed. If the node represents
a condition in the code (function isCondition), then the system
checks if there exists a path in the DDG that connects an entry
point to the conditional node (lines 16-17).
Algorithm 3.1: Authentication detection
input: APK app
output: NO AUTH NEEDED |
NO AUTH FOUND |
POSSIBLE AUTH FOUND
entry_points ← []
cfg ← computeCFG(app)
ddg ← computeDDG(app)
foreach node in cfg
if isEP(node) then entry_points .add(node)
end
if entry_points == [] then return NO AUTH NEEDED
foreach node in ddg
if isCondition (node) then
foreach ep in entry_points
path ← findPath(ep, node, ddg)
if path != null
then
if isCheckConstant(node, ddg) == false
then return POSSIBLE AUTH FOUND
endif
end
endif
end
return NO AUTH FOUND
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
If such a path exists, it means that we possibly found an authen-
tication scheme. However it is still possible to obtain false positives:
simple sanity checks or other controls on data would be all erro-
neously identified as authentication. In order to reduce the number
of false positives among conditions that are candidate for authen-
tication, the algorithm applies a constant propagation technique.
Technically speaking, such technique is using reaching definition
analysis results. In particular, if a constant value is assigned to a
variable, and such variable is not modified before a point P in code,
then the variable has a constant value at P and can be replaced with
the constant.
In our context, since the analyzed authentication model must
be performed with some sort of dynamically generated secret (out-
of-band authentication, Section 3.1) that is usually stored in the
dynamic memory (e.g., heap, stack), by using constant propagation
we can discard all the conditions that use constant values in their
comparison, as they certainly do not represent authentication on
data. Constant propagation is a very powerful technique for our
analysis, and it helps to reduce the false positives to 0% in our
experiments as we will show in Section 5.2.
4 SYSTEM IMPLEMENTATION
We now discuss our practical implementation choices for the al-
gorithm presented in the Section 3.2, by describing the technical
details of our system.
4.1 Overview
We implemented our system on top of the Argus-SAF framework
[29]. The framework offers various tools for analyzing Android
apps, such as the generation of the CFG and DDG that we need
in our algorithm. Also, the framework translates Dalvik bytecode
into an intermediate representation (IR), called Jawa, on which our
algorithm performs the analysis. In particular, various conditions
in code, including while and for loops, if statements and excep-
tion try/catch blocks, are all translated into if statements in the
intermediate representation. The CFG and DDG built by the frame-
work contain nodes that map to single Jawa instructions, making it
possible to have the fine-grained, instruction-level information that
we need in our algorithm for targeting conditions. Furthermore,
Argus-SAF permits inter-component modeling, meaning that tran-
sitions between components such as Android intents are integrated
in the graphs. These features made possible for us to explore the
application code together with the graphs built by Argus-SAF on
top of it. Our system is composed of three main components: (1)
Graphs Builder, (2) Path Finder and (3) App-to-app Authentication
Finder. Our framework accepts an app in input (as an APK file),
and outputs either that no authentication has been found, or a list
of specific instructions in code that may contain authentication
checks.
• The Graphs Builder starts the Argus-SAF analysis on the
APK. The framework applies four sequential steps: (1) the
Jawa IR is generated from the Dalvik bytecode, then (2) an en-
vironment model of the Android system is generated. This is
crucial to capture the control flow and interactions between
components, such as the dispatch of intents between activi-
ties. (3) At this point, Argus-SAF builds an inter-component
control flow graph (ICFG) of the whole app. At the same time,
it performs data flow analysis and builds an inter-component
data flow graph (IDFG) on top of the ICFG. (4) Finally, the
framework builds a data dependency graph (DDG) on top
the IDFG. We mainly use information from this graph in our
analysis. The information of our interest is extracted in the
Graph Builder by using classes ComponentBasedAnalysis
and InterComponentAnalysis for extracting the CFG and
DDG. The graphs are then passed to the next component.
• The main goal of the second component, Path Finder, is to
locate areas in the code where an authentication scheme may
exist. This is done by identifying data flows for the protocol
of our interest, and performing reaching definitions analysis
to see if any conditional statement operates on data read
from the channel that we are inspecting. The Path Finder
component traverses the CFG received from Graphs Builder,
and marks entry points for the analyzed channel based on a
predefined list of method signatures. It then finds all condi-
tional statements, which is accomplished by extracting all
the nodes of type IfStatement in Argus-SAF. At this point,
it is possible to perform reaching definition analysis, to check
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
Stefano Cristalli, Long Lu, Danilo Bruschi, and Andrea Lanzi
whether there is at least one conditional statement using a
variable that was earlier defined as data read from the chan-
nel. The DDG obtained from Graphs Builder contains all the
information to perform this search: definition-use pairs map
to edges in the graph, so Path Finder traverses it in order to
find possible authentication paths. It sends the discovered
paths, if any, to the last component.
• App-to-app Authentication Finder applies further checks to
the paths received from Path Finder, in order to exclude false
positive results by recognizing checks against constant val-
ues. In particular, it analyzes the if statements in the Jawa
IR, which can be divided into two types: (1) comparisons
between two variables, (2) comparisons between a variable
and a constant. The system immediately discards the condi-
tions of the second type from our search, as they certainly
do not represent the authentication scheme that we look for
(see Section 3.2). For conditions of the first type, our system
uses constant propagation to determine if one of the two
variables in the condition is a constant. It walks up the DDG
from the IfStatement to their definition, reconstructing the
value-history of the variables from their initialization. If the
last-assigned value to either of the two variables (before the
IfStatement) is a constant, then we are in the same case of
type-two conditions, and the path is again discarded for the
same reasons.
4.2 Choice of Entry Points
In our implementation we focused on Bluetooth, since it is the most
used technology in Android apps for short-distance communica-
tion. Wi-Fi-Direct is still not very common among the Android
apps, in fact in the dataset that we analyzed we only found a few
samples (10) of it. To show the security issue of CATCH applied on