# L3HCTF 2021 RE 部分 Writeup
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
和 Nebula 的队员们一起参加了这次的 L3HCTF ，最后排名第7，很不错的成绩。记录一下我做的 re 。
比赛官网：  
比赛时间：2021-11-13 09:00:00 到 2021-11-15 09:00:00
## reverse
###  IDAAAAAA
没给程序，给了一个ida的i64文件，直接拖入ida。
正常流程分析下来，是输入三个整数，判断5个等式，但是无法同时满足，应该是程序将判断流程隐藏了，但是程序中找不到修改代码段的行为。
看反汇编窗口，发现`main`函数有一个断点，打开断点列表（ida开始卡了），发现condition里有东西，复制condition到文本编辑器（文本编辑器开始卡了），是一个很大的idapython脚本。
ida下断点在`0x40201F`，当执行到这条cmp时就触发断点，执行上面的脚本，在另一个位置下断点，获得断点信息，并修改断点添加condition为idapython脚本，之后修改`[rsp]`和`rip`的值使程序转到设置的断点，触发断点执行脚本，并根据输入的`input[i]`确定需要解密的`index`和`key`，使用`sub_401DB5`（维吉尼亚）解密，并且修改`[rsp]`设置返回地址，并在返回地址设置断点，解密完成后返回时触发断点，继续执行脚本，解密出来的数据将会作为下一个断点的脚本，而这个脚本又会重复上面的过程。
这样可知，原程序并不能判断flag，真正控制执行流程的是idapython脚本。
尝试了很久，除了第一个断点的脚本，几乎每个脚本解密出来都是这样的形式：
    NyPGpw = idaapi.get_byte(5127584 + N4QKUt)
    NyPGpw -= ord('a')
    if NyPGpw == 0:
        afvkwL = 667
        hsYnNw = b'vjHiPd4bBuf'
    elif NyPGpw == 1:
        afvkwL = 667
        hsYnNw = b'vjHiPd4bBuf'
    elif NyPGpw == 2:
        afvkwL = 667
        hsYnNw = b'vjHiPd4bBuf'
    else:
        afvkwL = -1
    if afvkwL     top:
                num2                    num1 op num2
                ...                     ...
            /**/
            ins = Byte(addr + pc);
            if (ins == 0) {
                Message("0x%04X:    add\n", pc);
                pc++;
            } else if (ins == 1) {
                Message("0x%04X:    sub\n", pc);
                pc++;
            } else if (ins == 2) {
                Message("0x%04X:    mul\n", pc);
                pc++;
            } else if (ins == 3) {
                Message("0x%04X:    div\n", pc);
                pc++;
            } else if (ins == 4) {
                Message("0x%04X:    mod\n", pc);
                pc++;
            } else if (ins == 5) {
                Message("0x%04X:    and\n", pc);
                pc++;
            } else if (ins == 6) {
                Message("0x%04X:    or\n", pc);
                pc++;
            } else if (ins == 7) {
                Message("0x%04X:    xor\n", pc);
                pc++;
            } else if (ins == 8) {
                Message("0x%04X:    store\n", pc);
                pc++;
            } else if (ins == 9) {
                Message("0x%04X:    load\n", pc);
                pc++;
            } else if (ins == 10) {
                Message("0x%04X:    neq\n", pc);
                pc++;
            } else if (ins == 11) {
                Message("0x%04X:    lt\n", pc);
                pc++;
            } else if (ins == 12) {
                Message("0x%04X:    exch\n", pc);
                pc++;
            } else if (ins == 13) {
                Message("0x%04X:    pop\n", pc);
                pc++;
            } else if (ins == 14) {
                Message("0x%04X:    push 0x%x\n", pc, Dword(addr + pc + 1));
                pc = pc + 5;
            } else if (ins == 15) {
                Message("0x%04X:    jmp 0x%04X\n", pc, (pc + 5 + Dword(addr + pc + 1)) & 0xffffffff);
                pc = pc + 5;
            } else if (ins == 16) {
                Message("0x%04X:    jnz 0x%04X\n", pc, (pc + 5 + Dword(addr + pc + 1)) & 0xffffffff);
                pc = pc + 5;
            } else if (ins == 17) {
                Message("0x%04X:    int %d\n", pc, Dword(addr + pc + 1));
                pc = pc + 5;
            } else if (ins == 18) {
                Message("0x%04X:    ret %d\n", pc, Dword(addr + pc + 1));
                pc = pc + 5;
                if (Dword(addr + pc + 1) == 0) return ;
            }
        }
    }
    static main() {
        disasm(0x5280);
        disasm(0x5020);
        Message("All done!\n");
    }
然后读汇编，恢复出C程序：
    #define CONTINUE 1
    #define FINISH 0
    int func1(int* buffer) {
        // unsigned int buffer[10]; // stack[0] ~ stack[9]
        int delta; // stack[0xa]
        int sum; // stack[0xb]
        int v0; // stack[0xc]
        int v1; // stack[0xd]
        int k[4]; // stack[0xe] ~ stack[0x11]
        // stack[0x12] = 0; // ??
        int i; // stack[0x13]
        int j; // stack[0x14]
        // unsigned int stack[21];
        delta = 0x75bcd15;
        sum = 0x3ade68b1;
        for (i = 0; i < 10; i++) {
            buffer[i] ^= ((i + 1) * 0x01010101);
        }
        k[0x0] = 0x494c;
        k[0x1] = 0x6f76;