Index 1 contains HD Camcorder
Index 2 contains Laptop
Index 3 contains Laser Printer Index 4 contains MP3 Player Index 5
contains Not Available Index 6 contains Refrigerator Index 7 contains
Tennis Ball Index 8 contains Tennis Racket
As you may have noticed in the above examples, once asort is executed,
you\'ll lose the original indexes forever. So, instead of overwriting
the original array with the new indexes, you might want to create a new
array with the new indexes.
In the following example, the original array \"item\" is not modified.
Instead, the \"itemnew\" array will contain the new indexes. i.e.
itemnew\[1\], itemnew\[2\], itemnew\[3\], etc.
total = asort(item, itemnew);
Again, remember that asort sorts the array values. But, instead of using
the original indexes, it uses new indexes from 1 through n. Original
indexes are lost.
## Sort Array Indexes using asorti
Just like sorting array values, you can take all the array indexes, sort
them, and store them in a new array using asorti.
The following example shows how asorti differs from asort. Keep the
following in mind:
-   asorti sorts the indexes (not the values) and stores them as values.
-   If you specify asorti(state), you\'ll lose the original values. i.e.
    > the indexes will now become the values. So, to be on safe side,
    > always specify two parameters to the asorti function. i.e.
    > asorti(state,stateabbr). This way, the original array (state), it
    > not overwritten.
\$ cat asorti.awk BEGIN {
> state\[\"TX\"\]=\"Texas\"; state\[\"PA\"\]=\"Pennsylvania\";
> state\[\"NV\"\]=\"Nevada\"; state\[\"CA\"\]=\"California\";
> state\[\"AL\"\]=\"Alabama\";
>
> print \"\-\-\-\-- Function: asort \-\-\-\--\" total =
> asort(state,statedesc);
>
> for (i=1; i\
> print \"Index\",i,\"contains\",statedesc\[i\];
>
> print \"\-\-\-\-- Function: asorti \-\-\-\--\" total =
> asorti(state,stateabbr);
>
> for (i=1; i\
> print \"Index\",i,\"contains\",stateabbr\[i\];
}
\$ awk -f asorti.awk
\-\-\-\-- Function: asort \-\-\-\-- Index 1 contains Alabama Index 2
contains California Index 3 contains Nevada
Index 4 contains Pennsylvania Index 5 contains Texas
\-\-\-\-- Function: asorti \-\-\-\-- Index 1 contains AL
Index 2 contains CA Index 3 contains NV Index 4 contains PA Index 5
contains TX
# Chapter 13. Additional Awk Commands
## Pretty Printing Using printf
Printf is very flexible and makes report printing job relatively easier
by allowing you to print the output in the way you want it.
> **Syntax:**
printf \"print format\", variable1, variable2, etc.
#### Special Characters in the printf Format
Following are some of the special characters that can be used inside a
printf.
+------------------------+---------------------------------------------+
| > **Special            | > **Description**                           |
| > Character**          |                                             |
+========================+=============================================+
| > \\n                  | > New Line                                  |
+------------------------+---------------------------------------------+
| > \\t                  | > Tab                                       |
+------------------------+---------------------------------------------+
| > \\v                  | > Vertical Tab                              |
+------------------------+---------------------------------------------+
| > \\b                  | > Backspace                                 |
+------------------------+---------------------------------------------+
| > \\r                  | > Carriage Return                           |
+------------------------+---------------------------------------------+
| > \\f                  | > Form Feed                                 |
+------------------------+---------------------------------------------+
The following prints \"Line 1\" and \"Line 2\" in separate lines using
newline:
\$ awk \'BEGIN { printf \"Line 1\\nLine 2\\n\" }\' Line 1
Line 2
The following prints different fields separated by tabs, with 2 tabs
after \"Field 1\":
##### \$ awk \'BEGIN \\
> **{ printf \"Field 1\\t\\tField 2\\tField 3\\tField 4\\n\" }\'**
Field 1 Field 2 Field 3 Field 4
The following prints vertical tabs after every field:
##### \$ awk \'BEGIN \\
> **{ printf \"Field 1\\vField 2\\vField 3\\vField 4\\n\" }\'**
Field 1
Field 2
> Field 3
>
> Field 4
The following prints a backspace after every field except Field4. This
erases the last number in each of the first three fields. For example
\"Field 1\" is displayed as \"Field \", because the last character is
erased with backspace. However the last field \"Field 4\" is displayed
as it is, as we didn\'t have a \\b after \"Field 4\".
##### \$ awk \'BEGIN \\
> **{ printf \"Field 1\\bField 2\\bField 3\\bField 4\\n\" }\'**
Field Field Field Field 4
In the following example, after printing every field, we do a \"Carriage
Return\" and print the next value on top of the current printed value.
This means, in the final output you see is only \"Field 4\", as it was
the last thing to be printed on top of all the previous fields.
##### \$ awk \'BEGIN \\
> **{ printf \"Field 1\\rField 2\\rField 3\\rField 4\\n\" }\'**
Field 4
#### Print Uses OFS, ORS Values
When you print multiple values separated by comma using print command
(not printf), it uses the OFS and RS built-in variable values to decide
how to print the fields.
The following example show how the simple print statement \"print
\$2,\$3\" gets affected by using OFS and ORS values.
\$ cat print.awk BEGIN {
> FS=\",\";
>
> OFS=\":\";
>
> ORS=\"\\n\--\\n\";
}
{
> print \$2,\$3
}
\$ awk -f print.awk items.txt HD Camcorder:Video
\--
Refrigerator:Appliance
\--
MP3 Player:Audio
\--
Tennis Racket:Sports
\--
Laser Printer:Office
\--
#### Printf doesn\'t Use OFS, ORS Values
Printf doesn\'t use the OFS and ORS values. It uses only what is
specified in the \"format\" field of the printf command as shown in the
example below.
\$ cat printf1.awk BEGIN {
> FS=\",\";
>
> OFS=\":\";
>
> ORS=\"\\n\--\\n\";
}
{
> printf \"%s\^\^%s\\n\\n\", \$2, \$3
}
\$ awk -f printf1.awk items.txt HD Camcorder\^\^Video
Refrigerator\^\^Appliance
MP3 Player\^\^Audio Tennis Racket\^\^Sports Laser Printer\^\^Office
#### Printf Format Specifiers
+-----------------------+----------------------------------------------+
| > **Format            | > **Description**                            |
| > Specifier**         |                                              |
+=======================+==============================================+
| > s                   | > String                                     |
+-----------------------+----------------------------------------------+
| > c                   | > Single Character                           |
+-----------------------+----------------------------------------------+
| > d                   | > Decimal                                    |
+-----------------------+----------------------------------------------+
| > e                   | > Exponential Floating point                 |
+-----------------------+----------------------------------------------+
| > f                   | > Fixed Floating point                       |
+-----------------------+----------------------------------------------+
| > g                   | > Uses either e or f depending on which is   |
|                       | > smaller for the given input                |
+-----------------------+----------------------------------------------+
| > o                   | > Octal                                      |
+-----------------------+----------------------------------------------+
| > x                   | > Hexadecimal                                |
+-----------------------+----------------------------------------------+
| > \%                  | > Prints the percentage symbol               |
+-----------------------+----------------------------------------------+
The following example shows the basic usage of the format specifiers:
\$ cat printf-format.awk BEGIN {
> printf \"s\--\> %s\\n\", \"String\" printf \"c\--\> %c\\n\",
> \"String\" printf \"s\--\> %s\\n\", 101.23 printf \"d\--\> %d\\n\",
> 101.23 printf \"e\--\> %e\\n\", 101.23 printf \"f\--\> %f\\n\", 101.23
> printf \"g\--\> %g\\n\", 101.23 printf \"o\--\> %o\\n\", 0x8 printf
> \"x\--\> %x\\n\", 16
>
> printf \"percentage\--\> %%\\n\", 17
}
\$ awk -f printf-format.awk s\--\> String
c\--\> S
s\--\> 101.23
d\--\> 101
e\--\> 1.012300e+02 f\--\> 101.230000
g\--\> 101.23
o\--\> 10
x\--\> 10
percentage\--\> %
#### Print with Fixed Column Width (Basic)
To create a fixed column width report, you have to specify a number
immediately after the % in the format specifier. This number indicates
the minimum number of character to be printed. When the input-string is
smaller than the specified number, spaces are added to the left to make
it fixed width.
The following example displays the basic use of the printf statement
with number specified immediately after %
\$ cat printf-width.awk BEGIN {
> FS=\",\"
printf \"%3s\\t%10s\\t%10s\\t%5s\\t%3s\\n\",
\"Num\",\"Description\",\"Type\",\"Price\",\"Qty\"
> printf
\"\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--\\
n\"
}
{
> printf \"%3d\\t%10s\\t%10s\\t%g\\t%d\\n\", \$1,\$2,\$3,\$4,\$5
}
\$ awk -f printf-width.awk items.txt Num Description Type Price Qty
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
101. HD Camcorder Video 210 10
102. Refrigerator Appliance 850 2
103. MP3 Player Audio 270 15
104. Tennis Racket Sports 190 20
105. Laser Printer Office 475 5
Notice that the output is a bit ragged, even though we specified the
exact width. That\'s because the width we specify is actually the
*minimum* width, not the absolute size; if the input string has more
characters than that, the whole string will be printed. So, you should
really pay attention to how many characters you want to print.
If you want to print a fixed column width even when the input string is
longer than the number specified, you should use the substr function
(or) add a decimal before the number in the format identifier (as
explained later).
In the previous example, the second field was wider than the 10
character width specified, so the result was not what was intended.
Spaces are added to the left to print "Good" as a 6 character string:
\$awk \'BEGIN { printf \"%6s\\n\", \"Good\" }\' Good
The whole string is printed here even though you specified 6 character
width:
\$ awk \'BEGIN { printf \"%6s\\n\", \"Good Boy!\" }\' Good Boy!
#### Print with Fixed Width (Left Justified)
When the input-string is less than the number of characters specified,
and you would like it to be left justified (by adding spaces to the
right), use a minus symbol (-) immediately after the % and before the
number.
> **\"%6s\" is right justified as shown below:**
>
> \$ awk \'BEGIN { printf \"\|%6s\|\\n\", \"Good\" }\'
>
> \| Good\|
>
> **\"%-6s\" is left justified as shown below:**
>
> \$ awk \'BEGIN { printf \"\|%-6s\|\\n\", \"Good\" }\'
>
> \|Good \|
#### Print with Dollar Amount
To add a dollar symbol before the price value, just add the dollar
symbol before the identifier in the printf as shown below.
\$ cat printf-width2.awk BEGIN {
FS=\",\"
printf \"%-3s\\t%-10s\\t%-10s\\t%-5s\\t%-3s\\n\",
\"Num\",\"Description\",\"Type\",\"Price\",\"Qty\"
> printf
\"\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--\\
n\"
}
{
> printf \"%-3d\\t%-10s\\t%-10s\\t\$%-.2f\\t%-d\\n\",
\$1,\$2,\$3,\$4,\$5
}
\$ awk -f printf-width2.awk items.txt Num Description Type Price Qty
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
101. HD Camcorder Video \$210.00 10
102. Refrigerator Appliance \$850.00 2
103. MP3 Player Audio \$270.00 15
104. Tennis Racket Sports \$190.00 20
105. Laser Printer Office \$475.00 5
#### Print with Leading Zeros
By default values are right justified with space added to the left
> \$ awk \'BEGIN { printf \"\|%5s\|\\n\", \"100\" }\'
>
> \| 100\|
For right justified with 0\'s in front of the number (instead of the
space), add a zero (0) before the number. i.e. Instead of \"%5s\", use
\"%05s\" as the format identifier.
> \$ awk \'BEGIN { printf \"\|%05s\|\\n\", \"100\" }\'
>
> \|00100\|
The following example uses the leading zero format identifier for the
Qty field.
\$ cat printf-width3.awk BEGIN {
> FS=\",\"
printf \"%-3s\\t%-10s\\t%-10s\\t%-5s\\t%-3s\\n\",
\"Num\",\"Description\",\"Type\",\"Price\",\"Qty\"
> printf
\"\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--\\
n\"
}
{
> printf \"%-3d\\t%-10s\\t%-10s\\t\$%-.2f\\t%03d\\n\",
\$1,\$2,\$3,\$4,\$5
}
\$ awk -f printf-width3.awk items.txt Num Description Type Price Qty
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
101. HD Camcorder Video \$210.00 010
102. Refrigerator Appliance \$850.00 002
103. MP3 Player Audio \$270.00 015
104. Tennis Racket Sports \$190.00 020
105. Laser Printer Office \$475.00 005
#### Print Absolute Fixed Width String Value
As we already shown you, when the input string contains more characters
than what is specified in the format specifier it prints the whole thing
as shown below.
> \$ awk \'BEGIN { printf \"%6s\\n\", \"Good Boy!\" }\' Good Boy!
To print maximum of ONLY 6 characters, add a decimal before the number.
i.e. Instead of \"%6s\", give \"%.6s\", which will print only 6
characters from the input string, even when the input string is longer
than that as shown below.
\$ awk \'BEGIN { printf \"%.6s\\n\", \"Good Boy!\" }\' Good B
The above doesn\'t work on all versions of awk. On GAWK 3.1.5 it worked.
But on GAWK 3.1.7 it didn\'t work.
So, the reliable way to print a fixed character might be to use the
substr function as shown below.
##### \$ awk \'BEGIN \\
> **{ printf \"%6s\\n\", substr(\"Good Boy!\",1,6) }\'**
Good B
#### Dot . Precision
A dot before the number in format identifier indicates the precision.
The following example shows how a dot before a number for the numeric
format identifier works. This example shows how the number \"101.23\" is
printed differently when using using .1 and .4 (using d, e, f, and g
format specifier).
\$ cat dot.awk BEGIN {
> print \"\-\-\--Using .1\-\-\--\" printf \".1d\--\> %.1d\\n\", 101.23
> printf \".1e\--\> %.1e\\n\", 101.23 printf \".1f\--\> %.1f\\n\",
> 101.23 printf \".1g\--\> %.1g\\n\", 101.23 print \"\-\-\--Using
> .4\-\-\--\" printf \".4d\--\> %.4d\\n\", 101.23 printf \".4e\--\>
> %.4e\\n\", 101.23 printf \".4f\--\> %.4f\\n\", 101.23 printf
> \".4g\--\> %.4g\\n\", 101.23
}