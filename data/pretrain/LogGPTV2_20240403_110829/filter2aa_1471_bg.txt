char]
    [+0x002 ( 1: 1)] CounterProfiling : 0x1 [Type: unsigned 
char]
    [+0x002 ( 2: 2)] GroupScheduling  : 0x1 [Type: unsigned 
char]
    [+0x002 ( 3: 3)] AffinitySet      : 0x0 [Type: unsigned 
char]
    [+0x002 ( 4: 4)] Tagged           : 0x0 [Type: unsigned 
char]
    [+0x002 ( 5: 5)] EnergyProfiling  : 0x0 [Type: unsigned 
char]
    [+0x002 ( 6: 6)] SchedulerAssist  : 0x0 [Type: unsigned 
char]
    [+0x002 ( 7: 7)] ThreadReservedControlFlags : 0x0 [Type: 
unsigned char]
    [+0x003] DebugActive      : 0x0 [Type: unsigned char]
    [+0x003 ( 0: 0)] ActiveDR7        : 0x0 [Type: unsigned 
char]
    [+0x003 ( 1: 1)] Instrumented     : 0x0 [Type: unsigned 
char]
    [+0x003 ( 2: 2)] Minimal          : 0x0 [Type: unsigned 
char]
    [+0x003 ( 5: 3)] Reserved4        : 0x0 [Type: unsigned 
char]
    [+0x003 ( 6: 6)] UmsScheduled     : 0x0 [Type: unsigned 
char]
    [+0x003 ( 7: 7)] UmsPrimary       : 0x0 [Type: unsigned 
char]
    [+0x000] MutantType       : 0x1 [Type: unsigned char]
    [+0x001] MutantSize       : 0x0 [Type: unsigned char]
    [+0x002] DpcActive        : 0x6 [Type: unsigned char]
    [+0x003] MutantReserved   : 0x0 [Type: unsigned char]
    [+0x004] SignalState      : 0 [Type: long]
    [+0x008] WaitListHead     [Type: _LIST_ENTRY]
        [+0x000] Flink            : 0xffff898f2b3451c0 
[Type: _LIST_ENTRY *]
        [+0x008] Blink            : 0xffff898f2b3451c0 
[Type: _LIST_ENTRY *]
Because this structure is a union, you should ignore any values
that do not correspond to the given object type because they are not
relevant to it. Unfortunately, it is not easy to tell which fields are
relevant to which type, other than by looking at the Windows
kernel source code or the WDK header files’ comments. For
convenience, Table 8-29 lists the dispatcher header flags and the
objects to which they apply.
Table 8-29 Usage and meaning of the dispatcher header flags
Fla
g
Applie
s To
Meaning
Typ
e
All 
dispatc
her 
objects
Value from the KOBJECTS enumeration 
that identifies the type of dispatcher object 
that this is.
Loc
k
All 
objects
Used for locking an object during wait 
operations that need to modify its state or 
linkage; actually corresponds to bit 7 (0x80) 
of the Type field.
Sig
nali
ng
Gates
A priority boost should be applied to the 
woken thread when the gate is signaled.
Size
Events, 
Semap
hores, 
Gates, 
Process
es
Size of the object divided by 4 to fit in a 
single byte.
Tim
er2
Typ
e
Idle 
Resilie
nt 
Timers
Mapping of the Type field.
Tim
er2I
nse
rted
Idle 
Resilie
nt 
Timers
Set if the timer was inserted into the timer 
handle table.
Tim
er2
Exp
irin
g
Idle 
Resilie
nt 
Timers
Set if the timer is undergoing expiration.
Tim
er2
Can
cel
Pen
din
g
Idle 
Resilie
nt 
Timers
Set if the timer is being canceled.
Tim
er2
Set
Pen
din
Idle 
Resilie
nt 
Timers
Set if the timer is being registered.
g
Tim
er2
Run
nin
g
Idle 
Resilie
nt 
Timers
Set if the timer’s callback is currently active.
Tim
er2
Dis
abl
ed
Idle 
Resilie
nt 
Timers
Set if the timer has been disabled.
Tim
er2
Co
mp
one
ntId
Idle 
Resilie
nt 
Timers
Identifies the well-known component 
associated with the timer.
Tim
er2
Rel
ativ
eId
Idle 
Resilie
nt 
Timers
Within the component ID specified earlier, 
identifies which of its timers this is.
Tim
erT
ype
Timers
Mapping of the Type field.
Abs
olut
e
Timers
The expiration time is absolute, not relative.
Wa
ke
Timers
This is a wakeable timer, meaning it should 
exit a standby state when signaled.
Enc
ode
dTo
lera
ble
Del
ay
Timers
The maximum amount of tolerance (shifted 
as a power of two) that the timer can support 
when running outside of its expected 
periodicity.
Ha
nd
Timers
Index into the timer handle table.
Ind
ex
Timers
Index into the timer expiration table.
Inse
rted
Timers
Set if the timer was inserted into the timer 
handle table.
Exp
ired
Timers
Set if the timer has already expired.
Thr
ead
Typ
e
Thread
s
Mapping of the Type field.
Thr
ead
Res
erv
ed
Thread
s
Unused.
Cyc
Thread
CPU cycle profiling has been enabled for 
leP
rofi
ling
s
this thread.
Cou
nter
Pro
filin
g
Thread
s
Hardware CPU performance counter 
monitoring/profiling has been enabled for 
this thread.
Gro
upS
che
duli
ng
Thread
s
Scheduling groups have been enabled for 
this thread, such as when running under 
DFSS mode (Distributed Fair-Share 
Scheduler) or with a Job Object that 
implements CPU throttling.
Affi
nity
Set
Thread
s
The thread has a CPU Set associated with it.
Tag
ged
Thread
s
The thread has been assigned a property tag.
Ene
rgy
Pro
filin
g
Thread
s
Energy estimation is enabled for the process 
that this thread belongs to.
Sch
edu
ler
Assi
st
Thread
s
The Hyper-V XTS (eXTended Scheduler) is 
enabled, and this thread belongs to a virtual 
processor (VP) thread inside of a VM 
minimal process.
Inst
Thread
Specifies whether the thread has a user-mode 
rum
ente
d
s
instrumentation callback.
Acti
veD
R7
Thread
s
Hardware breakpoints are being used, so 
DR7 is active and should be sanitized during 
context operations. This flag is also 
sometimes called DebugActive.
Min
ima
l
Thread
s
This thread belongs to a minimal process.
AltS
ysc
all
Thread
s
An alternate system call handler has been 
registered for the process that owns this 
thread, such as a Pico Provider or a Windows 
CE PAL.
Um
sSc
hed
ule
d
Thread
s
This thread is a UMS Worker (scheduled) 
thread.
Um
sPri
mar
y
Thread
s
This thread is a UMS Scheduler (primary) 
thread.
Mut
ant
Typ
e
Mutant
s
Mapping of the Type field.
Mut
Mutant
Unused.
ant
Size
s
Dpc
Acti