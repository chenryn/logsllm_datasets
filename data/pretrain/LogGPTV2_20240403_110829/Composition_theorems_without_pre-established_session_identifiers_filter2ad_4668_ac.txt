ii) Sim is a machine which operators in two stages as follows: In
the ﬁrst stage, Sim simply emulates the system P|F (cid:48), where ses-
sion-start messages from F are forward to the emulated P. If Sim
receives a) a session-create message for the emulated F (cid:48) from the
adversary and this message is accepted by F (cid:48) or b) the corrupted
ﬂag of an emulated instance Mr in P is set to true, then Sim en-
ters its second stage. Once in the second stage, Sim is not re-
stricted whatsoever. If, in the ﬁrst stage, the emulated P|F (cid:48) pro-
duces I/O output, then Sim terminates. (In this case the simulation
fails.) This is in fact not a restriction: Every protocol that pro-
duces I/O output if Sim is in its ﬁrst stage would not realize F , i.e.,
Fsingle |P|F (cid:48) (cid:54)≤ Fsingle |F . The reason is that in the ﬁrst stage, the
instances in P run independently. Now, if an environment emulated
all but one instance, in Fsingle |F no session would be created, and
hence, no output at the I/O interface would be produced.
So, altogether the only restriction we put on Sim is that it em-
ulates the real protocol in its ﬁrst stage. This is what simulators
would typically do anyway. In fact, we think that for most applica-
tions Fsingle |P|F (cid:48) ≤ Fsingle |F implies Fsingle |P|F (cid:48) ≤∗ Fsingle |F .
Moreover, our restriction seems unavoidable in order to prove
our composition theorem. First recall that for the classical univer-
sal composition theorems (Theorem 2 and Canetti’s composition
theorem) the proof is by a hybrid argument. In the i-th hybrid sys-
tem the environment emulates the ﬁrst  i sessions as ideal (single-session sim-
ulator plus ideal functionality). The i-th session is external. Since
every session is identiﬁed by a pre-established SID, the environ-
ment knows exactly and from the start on which instances of ma-
chines form one session. In particular, it knows from the start on
whether a session should be emulated as real or ideal and which
messages must be relayed to the external session. In our setting,
this does not work since we do not assume pre-established SIDs:
Initially, the (hybrid) environment does not know to which session
an instance (p, lsid, r) will belong. In particular, it does not know
whether it will belong to an ideal or real session. This is only deter-
mined if (p, lsid, r) is included in a (valid) session-create message
to F (cid:48). So unless an instance (p, lsid, r) does not behave the same
in the ideal and real session up to this point, consistent simulation
would not be possible. Now, by our assumption that the simulator
in its ﬁrst stage simulates the real protocol, the environment can
ﬁrst simulate the real protocol for the instance (p, lsid, r). Once
this instance is included in a (valid) session-create message to F (cid:48),
and hence, the environment knows whether the instance belongs to
an ideal or real session, the simulation can be continued accord-
ingly. More concretely, if it turns out that (p, lsid, r) belongs to an
ideal session, the environment starts the emulation of the simulator
for that session with the current conﬁgurations of all emulated in-
stances for that session. Again, this is possible because up to this
point the simulator too would have only simulated these instance
as real protocols. For the i-th session, the environment guesses the
instances that shall belong to it. Following this idea, we proved our
composition theorem stated next.
Theorem 3. Let F and F (cid:48) be two multi-session local-SID func-
tionalities and let P be a multi-session real protocol that uses F (cid:48).
If Fsingle |P|F (cid:48) ≤∗ Fsingle |F , then P|F (cid:48) ≤ F .
We note that Theorem 3 can be applied iteratively: For example,
if we have that Fsingle |P1 |F1 ≤∗ Fsingle |F2 and Fsingle |P2 |F2 ≤∗
Fsingle |F3, then, by Theorem 3 and Theorem 1, P2 |P1 |F1 ≤ F3.
4. JOINT STATE COMPOSITION
WITHOUT PRE-ESTABLISHED SIDS
Universal composition theorems, such as Theorem 2 and the
composition theorem of Canetti, assume that diﬀerent protocol ses-
sions have disjoint state; in particular, each session has to use fresh
randomness. (Theorem 3 makes this assumption too, but we ex-
clude this theorem from the following discussion since it does not
assume pre-established SIDs.) This can lead to ineﬃcient and im-
practical protocols, since, for example, in every session fresh long-
term symmetric and public/private keys have to be used. Canetti
and Rabin [11] therefore proposed to combine the universal com-
position theorems with what they called composition theorems with
joint state. By now, joint state composition theorems for several
cryptographic primitives are available, including joint state compo-
sition theorems for digital signatures [11, 20] and public-key en-
cryption [20] as well as encryption with long-term symmetric keys
[21]. These theorems provide mechanisms that allow to turn a sys-
tem with independent sessions (i.e., sessions with disjoint state)
into a system where the same (long-term symmetric and public/pri-
vate) keys may be used in diﬀerent sessions. This joint state comes
“for free” in the sense that it does not require additional proofs.
However, there is a price to pay: Just as the universal composi-
tion theorems, the joint state composition theorems assume pre-
established SIDs. Moreover, the mechanisms used by existing joint
state theorems for speciﬁc cryptographic primitives, such as en-
cryption and digital signatures, preﬁx all plaintexts to be encrypted
(with long-term symmetric or public/private keys) and messages to
be signed by the unique pre-established SIDs; by this, interference
between diﬀerent sessions is prevented. While this is a good design
principle, these theorems are unsuitable for the modular analysis
of an existing protocol that does not employ these mechanisms: If
such a protocol is secure in the single-session setting, then its multi-
session version obtained by combining universal composition with
joint state composition, and hence, the version of the protocol in
which messages are preﬁxed with pre-established SIDs, is secure
as well. But from this it does in general not follow that the original
protocol, which may be drastically diﬀerent, is also secure in the
multi-session setting. In fact, by the above joint-state constructions
insecure protocols can be turned into secure ones (see Figure 1). In
particular, since real-world security protocols typically do not use
pre-established SIDs, at least not explicitly and not in the particular
way stipulated by the theorems, the joint state composition theo-
rems are unsuitable for the modular and faithful analysis of such
protocols; at most idealized/modiﬁed protocols, but not the origi-
nal real-world protocols, can be analyzed in this modular way. For
example, in Step 3 of the TLS Handshake Protocol (see Figure 2),
the client sends the pre-master key encrypted to the server. In the
variant of TLS obtained by the joint state theorems, a unique SID
45A → B:
B → A:
A → B:
1.
2.
3.
original
{|NA, A|}kB
{|NA, NB|}kA
{|NB|}kB
modiﬁed
{|sid, NA, A|}kB
{|sid, NA, NB|}kA
{|sid, NB|}kB
Figure 1: The original Needham-Schroeder Public-Key Proto-
col is insecure [24]. Its modiﬁed version, resulting from the
joint-state construction, which preﬁxes every plaintext with a
pre-established SID sid is secure (see [22] for details).
sid would be included in the plaintext as well. By this alone, unlike
the original version of TLS, this message is bound to session sid.
In this section, we therefore propose a joint state composition
theorem which does not require to modify the protocol under con-
sideration. In particular, it does not rely on pre-established SIDs
and the mechanism of preﬁxing messages with such SIDs.
In our joint state theorem we consider a multi-session real pro-
tocol P which uses an ideal crypto functionality Fcrypto proposed in
[23]. The functionality Fcrypto allows its users to perform the fol-
lowing operations in an ideal way: i) generate symmetric keys, in-
cluding pre-shared keys, ii) generate public/private keys, iii) derive
symmetric keys from other symmetric keys, iv) encrypt and decrypt
messages and ciphertexts, respectively (public-key encryption and
both unauthenticated and authenticated symmetric encryption are
supported), v) compute and verify MACs and digital signatures,
and vi) generate fresh nonces. All symmetric and public keys can
be part of plaintexts to be encrypted under other symmetric and
public keys. Derived keys can be used just as freshly generated
symmetric keys. As shown in [23], Fcrypto can be realized under
standard cryptographic assumptions, subject to natural restrictions
on the environment. We brieﬂy recall Fcrypto and its realization in
Section 4.1.
Every instance of a machine Mr in P has access to Fcrypto. In
other words, Fcrypto is the joint state of all sessions of P: Diﬀerent
sessions may have access to the same public/private and symmetric
keys in Fcrypto.
Now, informally speaking, our joint state composition theorem
states that under a certain condition on P, which we call implicit
(session) disjointness, it is suﬃcient to analyze P (which may use
Fcrypto) in the single-session setting to obtain security in the multi-
session setting, where all sessions may use the same ideal crypto
functionality Fcrypto. (We note that by the universal composition
theorem, Fcrypto can be replaced by its realization.) It seems that
most real-world protocols satisfy implicit disjointness and that this
property can be veriﬁed easily, as illustrated by our case studies in
Section 5.
In what follows, we brieﬂy recall the ideal crypto functionality
Fcrypto and its realization. We then introduce the notion of implicit
disjointness and present our joint state composition theorem.
4.1 The Ideal Crypto Functionality
We now brieﬂy recall the ideal functionality Fcrypto, proposed in
[23], which, as mentioned, supports several cryptographic opera-
tions. The formulation here is slightly modiﬁed (see below).
Description of Fcrypto. Just as multi-session local-SID functional-
ities introduced in Section 3, Fcrypto is parametrized by a number
n of roles. For every role, Fcrypto has one I/O input and output
tape. Again, a user of Fcrypto is identiﬁed within Fcrypto by a tuple
(p, lsid, r), where p is a PID, lsid a LSID, and r a role.
Users of Fcrypto, and its realization, do not get their hands on
the actual symmetric keys stored in the functionality, but only on
pointers to these keys, since otherwise no security guarantees could
be provided; users obtain the actual public keys though. A user can
perform the operations mentioned above (encryption, etc.). Upon
a key generation request, an adversary can corrupt a key, which is
then marked “known” in Fcrypto (see below). A user can ask whether
a key one of her pointers points to is corrupted.
The functionality Fcrypto keeps track of which user has access to
which symmetric keys (via pointers) and which keys are known to
the environment/adversary, i.e., have been corrupted or have been
encrypted under a known key, and as a result became known. For
this purpose, Fcrypto maintains a set K of all symmetric keys stored
within Fcrypto, a set Kknown ⊆ K of known keys, and a set Kunknown :=
K \ Kknown of unknown keys.
To illustrate the internal behavior of Fcrypto and to point out the
mentioned modiﬁcation to the original version of Fcrypto, we sketch
the behavior of Fcrypto for authenticated encryption and decryption,
with requests (Enc, ptr, x) and (Dec, ptr, y): We ﬁrst consider the
case that ptr points to an unknown key, i.e., a key in Kunknown. The
plaintext x may contain pointers to symmetric keys. Before x is
actually encrypted, such pointers are replaced by the keys they re-
fer to, resulting in a message x(cid:48). Now, not the actual message, but
a random message of the same length is encrypted. If this results
in a ciphertext y(cid:48), then the pair (x(cid:48), y(cid:48)) is stored in Fcrypto and y(cid:48) is
returned to the user. Decryption of y succeeds only if exactly one
pair of the form (x(cid:48)(cid:48), y) is stored. In this case, x(cid:48)(cid:48) with embedded
keys replaced by pointers is returned. In case ptr points to a key
marked known, i.e., a key in Kknown, the adversary is asked for a
ciphertext (in case of encryption) or a plaintext (in case of decryp-
tion).1 Furthermore, all keys contained in x(cid:48) are marked known as
they are encrypted under a known key.
Realization of Fcrypto.
In [23], a realization Pcrypto of Fcrypto has
been proposed based on standard cryptographic assumptions on
schemes: IND-CCA2-secure schemes for public-key and unauthen-
ticated symmetric encryption, an IND-CPA- and INT-CTXT-secure
scheme for authenticated symmetric encryption, UF-CMA-secure
MAC and digital signature schemes, and pseudo-random functions
for key derivation. These schemes are used to realize Fcrypto in the
expected way. To show that Pcrypto realizes Fcrypto it is necessary
to restrict the environment: Environments should not cause the so-
called commitment problem (once an unknown symmetric key was
used for encryption, it should not become known) and should not
generate key cycles; without these restrictions, much stronger cryp-
tographic assumptions would be necessary, which go beyond what
is typically assumed for the security of real-world security proto-
cols. Protocols (in particular, real-world security protocols) using
Fcrypto typically satisfy these restrictions and this is easy to verify
for a given protocol, as discussed and illustrated in [23].
4.2 Our Criterion: Implicit Disjointness
We now introduce the notion of implicit (session) disjointness,
already mentioned at the beginning of Section 4. Recall that we
are interested in the security of the system P|Fcrypto, where P is
a multi-session protocol in which all sessions may use the same
Fcrypto. As explained before, implicit disjointness is a condition
on P which should allow to analyze the security of P in a single-
session setting in order to obtain security of P in a multi-session
setting, without assuming pre-established SIDs and without mod-
ifying P. Intuitively, implicit disjointness is a condition that en-
1This constitutes a slight modiﬁcation to the original ideal func-
tionality in [23], where in this case encryption and decryption were
performed with algorithms previously provided by the adversary.
The new version helps in the proof of our joint state theorem. It is
just as useful for analyzing protocols and can be realized in exactly
the same way as the original version.
46sures that diﬀerent sessions of P cannot “interfere”, even though
they share state, in the form of information stored in Fcrypto, includ-
ing public/private and pre-shared keys, and the information stored
along with these keys, e.g., plaintext-ciphertext pairs. In order to
deﬁne the notion of implicit disjointness, we ﬁrst introduce some
notation and terminology.
Partnering Functions. In the deﬁnition of implicit disjointness, we
assume the existence of a partnering function2 which groups users
(p, lsid, r), more precisely, the corresponding instances of machines
Mr in a run of P, into sessions. Formally, a partnering function