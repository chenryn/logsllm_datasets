Intersection. In Theory of Cryptography (Lecture Notes in Computer Science),
Vol. 5444. Springer, 577–594. https://doi.org/10.1007/978-3-642-00457-5_34
[21] Adam Kirsch and Michael Mitzenmacher. 2008. Less Hashing, Same Performance:
Building a Better Bloom Filter. Random Struct. Algorithms 33, 2 (Sept. 2008),
187–218. https://doi.org/10.1002/rsa.v33:2
[22] Adam Kirsch, Michael Mitzenmacher, and Udi Wieder. 2008. More Robust Hash-
ing: Cuckoo Hashing with a Stash. In ESA 2008 (Lecture Notes in Computer
Science), Dan Halperin and Kurt Mehlhorn (Eds.), Vol. 5193. Springer, 611–622.
https://doi.org/10.1007/978-3-540-87744-8_51
[23] Ágnes Kiss, Jian Liu, Thomas Schneider, N. Asokan, and Benny Pinkas. 2017. Pri-
vate Set Intersection for Unequal Set Sizes with Mobile Applications. Cryptology
ePrint Archive, Report 2017/670. (2017). http://eprint.iacr.org/2017/670.
[24] Lea Kissner and Dawn Song. 2005. Privacy-preserving Set Operations. In Pro-
ceedings of the 25th Annual International Conference on Advances in Cryptology
(CRYPTO’05). Springer-Verlag, Berlin, Heidelberg, 241–257. https://doi.org/10.
1007/11535218_15
[25] Vladimir Kolesnikov. 2005. Gate Evaluation Secret Sharing and Secure One-
Round Two-Party Computation. In ASIACRYPT 2005 (LNCS), Bimal K. Roy (Ed.),
Vol. 3788. Springer, Heidelberg, Germany, Chennai, India, 136–155.
[26] Vladimir Kolesnikov, Ranjit Kumaresan, Mike Rosulek, and Ni Trieu. 2016. Ef-
ficient Batched Oblivious PRF with Applications to Private Set Intersection.
Cryptology ePrint Archive, Report 2016/799. http://eprint.iacr.org/2016/799.
[27] Vladimir Kolesnikov, Jesper Buus Nielsen, Mike Rosulek, Ni Trieu, and Roberto
Trifiletti. 2017. DUPLO: Unifying Cut-and-Choose for Garbled Circuits. Cryptol-
ogy ePrint Archive, Report 2017/344. (2017). http://eprint.iacr.org/2017/344.
[28] Ronghua Li and Chuankun Wu. 2007. An Unconditionally Secure Protocol for Multi-
Party Set Intersection. Springer Berlin Heidelberg, Berlin, Heidelberg, 226–236.
https://doi.org/10.1007/978-3-540-72738-5_15
[29] Yehuda Lindell and Ben Riva. 2015. Blazing Fast 2PC in the Offline/Online Setting
with Security for Malicious Adversaries. In ACM CCS 15, Indrajit Ray, Ninghui
Li, and Christopher Kruegel: (Eds.). ACM Press, Denver, CO, USA, 579–590.
[30] Catherine A. Meadows. 1986. A More Efficient Cryptographic Matchmaking
Protocol for Use in the Absence of a Continuously Available Third Party. In IEEE
Symposium on Security and Privacy. 134–137.
[31] Atsuko Miyaji and Shohei Nishida. 2015. A Scalable Multiparty Private Set
Intersection. In Network and System Security. Springer, 376–385.
[32] Payman Mohassel and Ben Riva. 2013. Garbled Circuits Checking Garbled
Circuits: More Efficient and Secure Two-Party Computation, See [4], 36–53.
https://doi.org/10.1007/978-3-642-40084-1_3
[34] Kurt Opsahl.
[33] Moni Naor and Benny Pinkas. 2001. Efficient Oblivious Transfer Protocols. In
Proceedings of the Twelfth Annual ACM-SIAM Symposium on Discrete Algorithms
(SODA ’01). Society for Industrial and Applied Mathematics, Philadelphia, PA,
USA, 448–457. http://dl.acm.org/citation.cfm?id=365411.365502
The Disconcerting Details: How Face-
to Show You Targeted Ads.
book Teams Up With Data Brokers
https://www.eff.org/deeplinks/2013/04/disconcerting-details-how-facebook-
teams-data-brokers-show-you-targeted-ads.
[Online; accessed
23-May-2016].
[35] Rasmus Pagh and Flemming Friche Rodler. 2001. Cuckoo hashing. In European
(2013).
2013.
Symposium on Algorithms. Springer, 121–133.
[36] Arpita Patra, Ashish Choudhary, and C. Pandu Rangan. 2008. Unconditionally
Secure Multiparty Set Intersection Re-Visited. IACR Cryptology ePrint Archive
2008 (2008), 462. http://eprint.iacr.org/2008/462
[37] Arpita Patra, Pratik Sarkar, and Ajith Suresh. 2016. Fast Actively Secure OT
Extension for Short Secrets. Cryptology ePrint Archive, Report 2016/940. (2016).
http://eprint.iacr.org/2016/940.
[38] Benny Pinkas, Thomas Schneider, Gil Segev, and Michael Zohner. 2015. Phasing:
Private Set Intersection Using Permutation-based Hashing. In 24th USENIX Secu-
rity Symposium, USENIX Security 15, Jaeyeon Jung and Thorsten Holz (Eds.). 515–
530. https://www.usenix.org/conference/usenixsecurity15/technical-sessions/
presentation/pinkas
[39] Benny Pinkas, Thomas Schneider, and Michael Zohner. 2014. Faster Private
Set Intersection Based on OT Extension. In 23rd USENIX Security Symposium,
USENIX Security 14, Kevin Fu and Jaeyeon Jung (Eds.). USENIX Association, 797–
812. https://www.usenix.org/conference/usenixsecurity14/technical-sessions/
presentation/pinkas
[40] Benny Pinkas, Thomas Schneider, and Michael Zohner. 2016. Scalable Private Set
Intersection Based on OT Extension. Cryptology ePrint Archive, Report 2016/930.
(2016). http://eprint.iacr.org/2016/930.
[41] Amanda Cristina Davi Resende and Diego F. Aranha. 2017. Unbalanced Approxi-
mate Private Set Intersection. Cryptology ePrint Archive, Report 2017/677. (2017).
http://eprint.iacr.org/2017/677.
[42] Peter Rindal. libOTe: an efficient, portable, and easy to use Oblivious Transfer
Library. https://github.com/osu-crypto/libOTe. (????).
[43] Peter Rindal and Mike Rosulek. 2016. Faster Malicious 2-Party Secure Compu-
tation with Online/Offline Dual Execution. In USENIX Security 2016. USENIX
Association.
[44] Peter Rindal and Mike Rosulek. 2017. Improved Private Set Intersection Against
Malicious Adversaries. In Advances in Cryptology - EUROCRYPT 2017 - 36th
Annual International Conference on the Theory and Applications of Cryptographic
Techniques, Paris, France, April 30 - May 4, 2017, Proceedings, Part I (Lecture
Notes in Computer Science), Jean-Sébastien Coron and Jesper Buus Nielsen (Eds.),
Vol. 10210. 235–259. https://doi.org/10.1007/978-3-319-56620-7_9
[45] Peter Rindal and Mike Rosulek. 2017. Malicious-Secure Private Set Intersection
via Dual Execution. Cryptology ePrint Archive, Report 2017/769. (2017). http:
//eprint.iacr.org/2017/769.
[46] Yingpeng Sang and Hong Shen. 2008. Privacy Preserving Set Intersection Based
on Bilinear Groups. In Proceedings of the Thirty-first Australasian Conference on
Computer Science - Volume 74 (ACSC ’08). Australian Computer Society, Inc., Dar-
linghurst, Australia, Australia, 47–54. http://dl.acm.org/citation.cfm?id=1378279.
1378290
[47] Adi Shamir. 1980. On the Power of Commutativity in Cryptography. In Automata,
[48] Victor Shoup. 2003. NTL: A library for doing number theory. http://www.shoup.
Languages and Programming. 582–595.
net/ntl. (2003).
[49] Xiao Wang, Samuel Ranellucci, and Jonathan Katz. 2017. Authenticated Garbling
and Efficient Maliciously Secure Two-Party Computation. Cryptology ePrint
Archive, Report 2017/030. (2017). http://eprint.iacr.org/2017/030.
[50] Xiao Wang, Samuel Ranellucci, and Jonathan Katz. 2017. Global-Scale Secure
Multiparty Computation. Cryptology ePrint Archive, Report 2017/189. (2017).
http://eprint.iacr.org/2017/189.
[51] Andrew Chi-Chih Yao. 1986. How to Generate and Exchange Secrets (Extended
Abstract). In 27th FOCS. IEEE Computer Society Press, Toronto, Ontario, Canada,
162–167.
[52] Moti Yung. 2015. From Mental Poker to Core Business: Why and How to De-
ploy Secure Computation Protocols? https://www.sigsac.org/ccs/CCS2015/pro_
keynote.html. (2015). ACM CCS 2015 Keynote Talk.
A THE AUGMENTED SEMI HONEST MODEL
The unconditional zero-sharing protocol is secure in the augmented
semi-honest model. Informally, in this model the parties controlled
by the adversary are allowed to change their inputs at the beginning
of the computation. (The main “power” given to the simulator in
proofs in this model, is that after reading the inputs of the parties
from their input tapes it can change them before sending inputs to
the trusted party.)
The reason for the usage of this model, is the star-like communi-
cation infrastructure that is used by the protocols, where all parties
independently interact with a single party (the “dealer”). A star
structure is a very appealing communication pattern, since it does
Session F1:  Private Set IntersectionCCS’17, October 30-November 3, 2017, Dallas, TX, USA1270not require most parties to interact with each other or to coordi-
nate a time in which they are all online. However, it is clear (as
was demonstrated by a lower bound of [15]) that a coalition of the
dealer with some corrupt parties can “save” the state of the protocol
after the interaction between all honest parties and the dealer, and
then continue running the protocol from that state using different
options for the inputs of the corrupt parties. Note, however, that
in the PSI setting the only useful input for the corrupt coalition is
where the input of all its members is equal to the input that the
dealer used in its interactions with the honest parties. Therefore
even though they can choose other inputs and run the protocol
with those inputs, they know in advance that the corresponding
output will be the empty set.
This additional “power” that is given to the adversary is essential
in our protocol since (in order to keep a simple communication
infrastructure) not all parties interact with each other. Therefore
two corrupt parties which only interact with each other may assume
the power to “use” any input they would like during their execution.
We emphasize, though, that the in our protocol the corrupt par-
ties can only set their input once, and that the only “useful” input
strategy that they can use when computing the multi-party PSI
functionality, is to use the same input set for all corrupt parties,
since any value which is not in the intersection of the inputs of the
corrupt parties will surely not be in the final PSI output.
A detailed discussion of the “power” of the augmented semi-
honest model can be found in [16] Sec. 2.2.3. We present here the
formal definition of this model (Def. 7.4.24 of [14]). We note that this
model was implicitly used by multiple other works related to OT,
such as the private equality test protocol in [13] or the multi-party
PSI protocol in [12].
Definition A.1. (the augmented semi-honest model): Let Π be
a two-party protocol. An augmented semi-honest behavior (with
respect to Π) is a (feasible) strategy that satisfies the following
conditions:
• Entering the execution (this is the only part of the definition
which differs than the standard definition of semi-honest be-
havior): Depending on its initial input, denoted u, the party
may abort before taking any step in the execution of Π. Oth-
erwise it enters the execution with any input u′ ∈ {0, 1}|u |
of its choice. From this point on, u′ is fixed.
• Proper selection of a random-tape: The party selects the
random tape to be used in Π uniformly among all strings
of the length specified by Π. That is, the selection of the
random-tape is exactly as specified by Π.
• Proper message transmission or abort: In each step of Π,
depending on its view of the execution so far, the party may
either abort or send a message as instructed by Π. We stress
that the message is computed as Π instructs based on input
u′, the selected random-tape and all the messages received
so far.
• Output: At the end of the interaction, the party produces
an output depending on its entire view of the interaction.
We stress that the view consists of the initial input u, the
selected random tape, and all the messages received so far.
B HASHING SCHEMES AND PARAMETER
ANALYSIS
In this section we describe a new variant of Cuckoo hashing that
avoids a stash. We analyze its parameters.
ζ −1).
There are three parameters[22] that affect the Cuckoo hashing
failure probability: the number of bins ζ n, the number of hash
functions h, and the stash size s. Let Prn,ζ ,h(S ≥ s) denote the
probability that when hashing n items into ζ n bins (for 1 < ζ <
2) using h hash functions, the stash size exceeds s. [40] proved
that asymptotically, Prn,ζ ,h(S ≥ s) = O(n(1−h)(s +1)) when h ≥
2ζ ln( e
Our new variant works as follows to insert an item x. There are
(ζ1 + ζ2)n bins.
• First, use traditional Cuckoo hashing with h1 hash functions
• If the first phase fails, then use Cuckoo hashing with h2 = 2
hash functions to insert the final evicted item into the last
ζ2n bins.
to insert x into one of the first ζ1n bins.
The overall procedure fails if the second phase fails to find a suitable
location for the final item. Note that the probability that s items
will require a second phase of hashing is exactly Prn,ζ1,h1(S ≥ s).
Hence, the failure probability of the overall procedure is:
(S2 ≥ 0)(cid:1)
(2)
(S ≥ 0) =
Pr
n,ζ1,ζ2
=
=
s =1
n
n
n
∞
s =1
s =1
≤
s =1
≤ O(n
s,ζ2,h2=2
Pr
−1)(cid:1)
(1−h1)(s +1))O(s
n,ζ1,h1
(S1 ≥ s)
(cid:0) Pr
(cid:0)O(n
O(n(1−h1)(s +1)
O(n(1−h1)(s +1)
1−h1 log2( nh1
nh1 − n
)
)
s
s
))
, 29
, 210
Equation 2 allows us empirically estimate a concrete failure
probability given a set of parameters {n, h1, h2, ζ1, ζ2}. We first fix
the number of hash functions h1 = 3, and determine necessary the
scale of bins ζ1, ζ2 such that no stash is required (i.e. s = 0) except
with probability < 2−λ.
To obtain concrete numbers of ζ1 when ζ2 fixed, we run 230
repetition of our Cuckoo hashing scheme, where we mapped n ∈
, 211} items to nζ1 bins using h1 hash functions and
{27
, 28
then mapping all failed items to nζ2 bins using h2 hash functions.
We recorded the scale ζ1 in Figure 12 with the solid line. To achieve
the failure probability for larger n, we use linear regression by a
variable n′ = n−2 log2( n3
n3−n) to extrapolate the ζ1. We substitute
n′ back to n and show the relationship between n and the predicted
ζ1 by the dash line in Figure 12. Table 2 shows the extrapolated
scale ζ1 for the Cuckoo hashing failure probability {230
, 240}. We
observe that for n = 220, our hashing scheme needs 1.3n bins with
no stash size.
Simple hashing bounds. Moreover, we also need to guarantee
that the maximum bin size β1, β2 is small when using Simple hash-
ing to map n items to nζ1 bins and nζ2 bins with no overflow. [40]
Session F1:  Private Set IntersectionCCS’17, October 30-November 3, 2017, Dallas, TX, USA127160
50
40
30
20
y
−
2
y
t
i
l
i
b
a
b
o
r
P
r
o
r
r
E
ζ1 = 1.12
ζ1 = 1.13
ζ1 = 1.14
ζ1 = 1.15
ζ1 = 1.17
7 8
16
12
20
Number of Elements n = 2x
24
Figure 12: Required number of bins nζ1 in first step of bucket
allocation of our hashing scheme. The solid lines shows the
actual measurements, the dashed lines were extrapolated us-
ing linear regression.
shows that the probability of “n balls are mapped at random to m
bins, and the most occupied bin has at least k balls" is
Pr(∃bin with ≥ k balls) ≤ m( en
mk
We evaluate Eq. 3 with the set sizes n ∈ {212
depict the maximum bin size {βi
hashing failure probability {230
, 240} in Table 2.
(3)
, 224}, and
i ∈ {1, 2}} for the Simple
)k
, 216
, 220
|
Session F1:  Private Set IntersectionCCS’17, October 30-November 3, 2017, Dallas, TX, USA1272