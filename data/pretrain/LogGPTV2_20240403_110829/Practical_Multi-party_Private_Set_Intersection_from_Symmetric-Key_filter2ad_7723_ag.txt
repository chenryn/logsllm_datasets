### References

1. **Intersection**. In *Theory of Cryptography (Lecture Notes in Computer Science)*, Vol. 5444. Springer, 577–594. https://doi.org/10.1007/978-3-642-00457-5_34

2. **Kirsch, A., & Mitzenmacher, M.** (2008). Less Hashing, Same Performance: Building a Better Bloom Filter. *Random Struct. Algorithms*, 33(2), 187–218. https://doi.org/10.1002/rsa.v33:2

3. **Kirsch, A., Mitzenmacher, M., & Wieder, U.** (2008). More Robust Hashing: Cuckoo Hashing with a Stash. In *ESA 2008 (Lecture Notes in Computer Science)*, edited by D. Halperin and K. Mehlhorn, Vol. 5193. Springer, 611–622. https://doi.org/10.1007/978-3-540-87744-8_51

4. **Kiss, Á., Liu, J., Schneider, T., Asokan, N., & Pinkas, B.** (2017). Private Set Intersection for Unequal Set Sizes with Mobile Applications. *Cryptology ePrint Archive*, Report 2017/670. http://eprint.iacr.org/2017/670

5. **Kissner, L., & Song, D.** (2005). Privacy-preserving Set Operations. In *Proceedings of the 25th Annual International Conference on Advances in Cryptology (CRYPTO’05)*. Springer-Verlag, Berlin, Heidelberg, 241–257. https://doi.org/10.1007/11535218_15

6. **Kolesnikov, V.** (2005). Gate Evaluation Secret Sharing and Secure One-Round Two-Party Computation. In *ASIACRYPT 2005 (LNCS)*, edited by B. K. Roy, Vol. 3788. Springer, Heidelberg, Germany, Chennai, India, 136–155.

7. **Kolesnikov, V., Kumaresan, R., Rosulek, M., & Trieu, N.** (2016). Efficient Batched Oblivious PRF with Applications to Private Set Intersection. *Cryptology ePrint Archive*, Report 2016/799. http://eprint.iacr.org/2016/799

8. **Kolesnikov, V., Nielsen, J. B., Rosulek, M., Trieu, N., & Trifiletti, R.** (2017). DUPLO: Unifying Cut-and-Choose for Garbled Circuits. *Cryptology ePrint Archive*, Report 2017/344. http://eprint.iacr.org/2017/344

9. **Li, R., & Wu, C.** (2007). An Unconditionally Secure Protocol for Multi-Party Set Intersection. *Springer Berlin Heidelberg*, Berlin, Heidelberg, 226–236. https://doi.org/10.1007/978-3-540-72738-5_15

10. **Lindell, Y., & Riva, B.** (2015). Blazing Fast 2PC in the Offline/Online Setting with Security for Malicious Adversaries. In *ACM CCS 15*, edited by I. Ray, N. Li, and C. Kruegel. ACM Press, Denver, CO, USA, 579–590.

11. **Meadows, C. A.** (1986). A More Efficient Cryptographic Matchmaking Protocol for Use in the Absence of a Continuously Available Third Party. In *IEEE Symposium on Security and Privacy*, 134–137.

12. **Miyaji, A., & Nishida, S.** (2015). A Scalable Multiparty Private Set Intersection. In *Network and System Security*. Springer, 376–385.

13. **Mohassel, P., & Riva, B.** (2013). Garbled Circuits Checking Garbled Circuits: More Efficient and Secure Two-Party Computation. In *Advances in Cryptology - ASIACRYPT 2013 (LNCS)*, edited by K. Sako and P. Sarkar, Vol. 8270. Springer, 36–53. https://doi.org/10.1007/978-3-642-40084-1_3

14. **Opsahl, K.** (2013). The Disconcerting Details: How Facebook Teams Up With Data Brokers to Show You Targeted Ads. *Electronic Frontier Foundation*. [Online; accessed 23-May-2016]. https://www.eff.org/deeplinks/2013/04/disconcerting-details-how-facebook-teams-data-brokers-show-you-targeted-ads

15. **Pagh, R., & Rodler, F. F.** (2001). Cuckoo Hashing. In *European Symposium on Algorithms*. Springer, 121–133.

16. **Patra, A., Choudhary, A., & Rangan, C. P.** (2008). Unconditionally Secure Multiparty Set Intersection Re-Visited. *IACR Cryptology ePrint Archive* 2008, 462. http://eprint.iacr.org/2008/462

17. **Patra, A., Sarkar, P., & Suresh, A.** (2016). Fast Actively Secure OT Extension for Short Secrets. *Cryptology ePrint Archive*, Report 2016/940. http://eprint.iacr.org/2016/940

18. **Pinkas, B., Schneider, T., Segev, G., & Zohner, M.** (2015). Phasing: Private Set Intersection Using Permutation-based Hashing. In *24th USENIX Security Symposium (USENIX Security 15)*, edited by J. Jung and T. Holz, 515–530. https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/pinkas

19. **Pinkas, B., Schneider, T., & Zohner, M.** (2014). Faster Private Set Intersection Based on OT Extension. In *23rd USENIX Security Symposium (USENIX Security 14)*, edited by K. Fu and J. Jung. USENIX Association, 797–812. https://www.usenix.org/conference/usenixsecurity14/technical-sessions/presentation/pinkas

20. **Pinkas, B., Schneider, T., & Zohner, M.** (2016). Scalable Private Set Intersection Based on OT Extension. *Cryptology ePrint Archive*, Report 2016/930. http://eprint.iacr.org/2016/930

21. **Resende, A. C. D., & Aranha, D. F.** (2017). Unbalanced Approximate Private Set Intersection. *Cryptology ePrint Archive*, Report 2017/677. http://eprint.iacr.org/2017/677

22. **Rindal, P.** (n.d.). libOTe: an efficient, portable, and easy to use Oblivious Transfer Library. https://github.com/osu-crypto/libOTe

23. **Rindal, P., & Rosulek, M.** (2016). Faster Malicious 2-Party Secure Computation with Online/Offline Dual Execution. In *USENIX Security 2016*. USENIX Association.

24. **Rindal, P., & Rosulek, M.** (2017). Improved Private Set Intersection Against Malicious Adversaries. In *Advances in Cryptology - EUROCRYPT 2017 (LNCS)*, edited by J.-S. Coron and J. B. Nielsen, Vol. 10210. Springer, 235–259. https://doi.org/10.1007/978-3-319-56620-7_9

25. **Rindal, P., & Rosulek, M.** (2017). Malicious-Secure Private Set Intersection via Dual Execution. *Cryptology ePrint Archive*, Report 2017/769. http://eprint.iacr.org/2017/769

26. **Sang, Y., & Shen, H.** (2008). Privacy Preserving Set Intersection Based on Bilinear Groups. In *Proceedings of the Thirty-first Australasian Conference on Computer Science (ACSC ’08)*. Australian Computer Society, Inc., Darlinghurst, Australia, 47–54. http://dl.acm.org/citation.cfm?id=1378279.1378290

27. **Shamir, A.** (1980). On the Power of Commutativity in Cryptography. In *Automata, Languages and Programming*, 582–595.

28. **Shoup, V.** (2003). NTL: A library for doing number theory. http://www.shoup.net/ntl

29. **Wang, X., Ranellucci, S., & Katz, J.** (2017). Authenticated Garbling and Efficient Maliciously Secure Two-Party Computation. *Cryptology ePrint Archive*, Report 2017/030. http://eprint.iacr.org/2017/030

30. **Wang, X., Ranellucci, S., & Katz, J.** (2017). Global-Scale Secure Multiparty Computation. *Cryptology ePrint Archive*, Report 2017/189. http://eprint.iacr.org/2017/189

31. **Yao, A. C.** (1986). How to Generate and Exchange Secrets (Extended Abstract). In *27th FOCS*. IEEE Computer Society Press, Toronto, Ontario, Canada, 162–167.

32. **Yung, M.** (2015). From Mental Poker to Core Business: Why and How to Deploy Secure Computation Protocols? *ACM CCS 2015 Keynote Talk*. https://www.sigsac.org/ccs/CCS2015/pro_keynote.html

### Appendix A: The Augmented Semi-Honest Model

The unconditional zero-sharing protocol is secure in the augmented semi-honest model. Informally, in this model, the parties controlled by the adversary are allowed to change their inputs at the beginning of the computation. The main power given to the simulator in proofs in this model is that after reading the inputs of the parties from their input tapes, it can change them before sending inputs to the trusted party.

The reason for using this model is the star-like communication infrastructure used by the protocols, where all parties independently interact with a single party (the "dealer"). A star structure is appealing because it does not require most parties to interact with each other or coordinate a time when they are all online. However, a coalition of the dealer with some corrupt parties can "save" the state of the protocol after the interaction between all honest parties and the dealer, and then continue running the protocol from that state using different inputs for the corrupt parties. In the PSI setting, the only useful input for the corrupt coalition is where the input of all its members is equal to the input that the dealer used in its interactions with the honest parties. Therefore, even though they can choose other inputs and run the protocol with those inputs, they know in advance that the corresponding output will be the empty set.

This additional power given to the adversary is essential in our protocol since not all parties interact with each other. Therefore, two corrupt parties that only interact with each other may assume the power to "use" any input they would like during their execution. We emphasize that in our protocol, the corrupt parties can only set their input once, and the only useful input strategy they can use when computing the multi-party PSI functionality is to use the same input set for all corrupt parties, as any value not in the intersection of the inputs of the corrupt parties will surely not be in the final PSI output.

A detailed discussion of the power of the augmented semi-honest model can be found in [16] Sec. 2.2.3. We present here the formal definition of this model (Def. 7.4.24 of [14]). This model was implicitly used by multiple other works related to OT, such as the private equality test protocol in [13] or the multi-party PSI protocol in [12].

**Definition A.1. (Augmented Semi-Honest Model)**: Let Π be a two-party protocol. An augmented semi-honest behavior (with respect to Π) is a (feasible) strategy that satisfies the following conditions:

- **Entering the Execution**: Depending on its initial input, denoted \( u \), the party may abort before taking any step in the execution of Π. Otherwise, it enters the execution with any input \( u' \in \{0, 1\}^{|u|} \) of its choice. From this point on, \( u' \) is fixed.
- **Proper Selection of a Random Tape**: The party selects the random tape to be used in Π uniformly among all strings of the length specified by Π. That is, the selection of the random tape is exactly as specified by Π.
- **Proper Message Transmission or Abort**: In each step of Π, depending on its view of the execution so far, the party may either abort or send a message as instructed by Π. The message is computed as Π instructs based on input \( u' \), the selected random-tape, and all the messages received so far.
- **Output**: At the end of the interaction, the party produces an output depending on its entire view of the interaction. The view consists of the initial input \( u \), the selected random tape, and all the messages received so far.

### Appendix B: Hashing Schemes and Parameter Analysis

In this section, we describe a new variant of Cuckoo hashing that avoids a stash and analyze its parameters. There are three parameters that affect the Cuckoo hashing failure probability: the number of bins \( \zeta n \), the number of hash functions \( h \), and the stash size \( s \). Let \( \Pr_{n,\zeta,h}(S \geq s) \) denote the probability that when hashing \( n \) items into \( \zeta n \) bins (for \( 1 < \zeta < 2 \)) using \( h \) hash functions, the stash size exceeds \( s \). [40] proved that asymptotically, \( \Pr_{n,\zeta,h}(S \geq s) = O(n^{(1-h)(s+1)}) \) when \( h \geq 2\zeta \ln(e/\zeta) \).

Our new variant works as follows to insert an item \( x \):

- **First Phase**: Use traditional Cuckoo hashing with \( h_1 \) hash functions to insert \( x \) into one of the first \( \zeta_1 n \) bins.
- **Second Phase**: If the first phase fails, use Cuckoo hashing with \( h_2 = 2 \) hash functions to insert the final evicted item into the last \( \zeta_2 n \) bins.

The overall procedure fails if the second phase fails to find a suitable location for the final item. Note that the probability that \( s \) items will require a second phase of hashing is exactly \( \Pr_{n,\zeta_1,h_1}(S \geq s) \). Hence, the failure probability of the overall procedure is:

\[
\Pr_{n,\zeta_1,\zeta_2}(S \geq 0) = \sum_{s=1}^{\infty} \Pr_{n,\zeta_1,h_1}(S_1 \geq s) \cdot \Pr_{n,\zeta_2,h_2=2}(S_2 \geq 0)
\]

\[
\leq \sum_{s=1}^{\infty} O(n^{(1-h_1)(s+1)}) \cdot O(s^{-1})
\]

\[
\leq O(n^{(1-h_1)} \log_2(n/h_1))
\]

Equation 2 allows us to empirically estimate a concrete failure probability given a set of parameters \(\{n, h_1, h_2, \zeta_1, \zeta_2\}\). We first fix the number of hash functions \( h_1 = 3 \), and determine the necessary scale of bins \( \zeta_1, \zeta_2 \) such that no stash is required (i.e., \( s = 0 \)) except with probability \( < 2^{-\lambda} \).

To obtain concrete numbers of \( \zeta_1 \) when \( \zeta_2 \) is fixed, we run \( 2^{30} \) repetitions of our Cuckoo hashing scheme, where we mapped \( n \in \{2^7, 2^8, 2^9, 2^{10}, 2^{11}\} \) items to \( n\zeta_1 \) bins using \( h_1 \) hash functions and then mapping all failed items to \( n\zeta_2 \) bins using \( h_2 \) hash functions. We recorded the scale \( \zeta_1 \) in Figure 12 with the solid line. To achieve the failure probability for larger \( n \), we use linear regression by a variable \( n' = n - 2 \log_2(n/3 - n) \) to extrapolate \( \zeta_1 \). We substitute \( n' \) back to \( n \) and show the relationship between \( n \) and the predicted \( \zeta_1 \) by the dashed line in Figure 12. Table 2 shows the extrapolated scale \( \zeta_1 \) for the Cuckoo hashing failure probability \(\{2^{30}, 2^{40}\}\). We observe that for \( n = 2^{20} \), our hashing scheme needs \( 1.3n \) bins with no stash size.

**Simple Hashing Bounds**: Moreover, we need to guarantee that the maximum bin size \( \beta_1, \beta_2 \) is small when using Simple hashing to map \( n \) items to \( n\zeta_1 \) bins and \( n\zeta_2 \) bins with no overflow. [40] shows that the probability of "n balls are mapped at random to m bins, and the most occupied bin has at least k balls" is:

\[
\Pr(\exists \text{bin with } \geq k \text{ balls}) \leq m \left( \frac{en}{mk} \right)^k
\]

We evaluate Eq. 3 with the set sizes \( n \in \{2^{12}, 2^{16}, 2^{20}, 2^{24}\} \) and depict the maximum bin size \(\{\beta_i \mid i \in \{1, 2\}\}\) for the Simple hashing failure probability \(\{2^{30}, 2^{40}\}\) in Table 2.

**Figure 12**: Required number of bins \( n\zeta_1 \) in the first step of bucket allocation of our hashing scheme. The solid lines show the actual measurements, and the dashed lines were extrapolated using linear regression.

**Table 2**: Extrapolated scale \( \zeta_1 \) for the Cuckoo hashing failure probability \(\{2^{30}, 2^{40}\}\).

| Number of Elements \( n \) | \(\zeta_1\) |
|---------------------------|-------------|
| \( 2^{20} \)              | 1.3         |
| \( 2^{30} \)              | ...         |
| \( 2^{40} \)              | ...         |

### Conclusion

This document provides a comprehensive overview of various cryptographic protocols and techniques, particularly focusing on private set intersection (PSI) and related hashing schemes. The references and appendices offer detailed insights into the theoretical and practical aspects of these protocols, including security models and parameter analysis.