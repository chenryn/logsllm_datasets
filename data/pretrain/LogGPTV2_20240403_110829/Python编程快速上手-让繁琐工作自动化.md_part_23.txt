>>> mo1.group()
'Batwoman'
>>> mo2 = batRegex.search('The Adventures of Batwowowowoman')
>>> mo2.group()
'Batwowowowoman'
>>> mo3 = batRegex.search('The Adventures of Batman')
>>> mo3 == None
True
正则表达式Bat(wo)+man不会匹配字符串'The Adventures of Batman'，因为加号
要求wo至少出现一次。
如果需要匹配真正的加号字符，在加号前面加上倒斜杠实现转义：\+。
7.3.6 用花括号匹配特定次数
如果想要一个分组重复特定次数，就在正则表达式中该分组的后面，跟上花括
号包围的数字。例如，正则表达式(Ha){3}将匹配字符串'HaHaHa'，但不会匹配'HaHa'，
因为后者只重复了(Ha)分组两次。
除了一个数字，还可以指定一个范围，即在花括号中写下一个最小值、一个逗号和
一个最大值。例如，正则表达式(Ha){3,5}将匹配'HaHaHa'、'HaHaHaHa'和'HaHaHaHaHa'。
也可以不写花括号中的第一个或第二个数字，不限定最小值或最大值。例如，
Python编程快速上手——让繁琐工作自动化
(Ha){3,}将匹配3次或更多次实例，(Ha){,5}将匹配0到5次实例。花括号让正则表
达式更简短。这两个正则表达式匹配同样的模式：
(Ha){3}
(Ha)(Ha)(Ha)
这两个正则表达式也匹配同样的模式：
(Ha){3,5}
((Ha)(Ha)(Ha))|((Ha)(Ha)(Ha)(Ha))|((Ha)(Ha)(Ha)(Ha)(Ha))
在交互式环境中输入以下代码：
>>> haRegex = re.compile(r'(Ha){3}')
>>> mo1 = haRegex.search('HaHaHa')
>>> mo1.group()
'HaHaHa'
>>> mo2 = haRegex.search('Ha')
>>> mo2 == None
True
这里，(Ha){3}匹配'HaHaHa'，但不匹配'Ha'。因为它不匹配'Ha'，所以 search()
返回None。
7.4 贪心和非贪心匹配
在字符串'HaHaHaHaHa'中，因为(Ha){3,5}可以匹配3个、4个或5个实例，你可能
会想，为什么在前面花括号的例子中，Match对象的group()调用会返回'HaHaHaHaHa'，
而不是更短的可能结果。毕竟，'HaHaHa'和'HaHaHaHa'也能够有效地匹配正则表达
式(Ha){3,5}。
Python的正则表达式默认是“贪心”的，这表示在有二义的情况下，它们会尽
可能匹配最长的字符串。花括号的“非贪心”版本匹配尽可能最短的字符串，即在
结束的花括号后跟着一个问号。
在交互式环境中输入以下代码，注意在查找相同字符串时，花括号的贪心形式
和非贪心形式之间的区别：
>>> greedyHaRegex = re.compile(r'(Ha){3,5}')
>>> mo1 = greedyHaRegex.search('HaHaHaHaHa')
>>> mo1.group()
'HaHaHaHaHa'
>>> nongreedyHaRegex = re.compile(r'(Ha){3,5}?')
>>> mo2 = nongreedyHaRegex.search('HaHaHaHaHa')
>>> mo2.group()
'HaHaHa'
请注意，问号在正则表达式中可能有两种含义：声明非贪心匹配或表示可选的
分组。这两种含义是完全无关的。
第7章 模式匹配与正则表达式
7.5 findall()方法
除了search方法外，Regex对象也有一个findall()方法。search()将返回一个Match
对象，包含被查找字符串中的“第一次”匹配的文本，而 findall()方法将返回一组
字符串，包含被查找字符串中的所有匹配。为了看看 search()返回的 Match 对象只
包含第一次出现的匹配文本，请在交互式环境中输入以下代码：
>>> phoneNumRegex = re.compile(r'\d\d\d-\d\d\d-\d\d\d\d')
>>> mo = phoneNumRegex.search('Cell: 415-555-9999 Work: 212-555-0000')
>>> mo.group()
'415-555-9999'
另一方面，findall()不是返回一个Match对象，而是返回一个字符串列表，只要
在正则表达式中没有分组。列表中的每个字符串都是一段被查找的文本，它匹配该
正则表达式。在交互式环境中输入以下代码：
>>> phoneNumRegex = re.compile(r'\d\d\d-\d\d\d-\d\d\d\d') # has no groups
>>> phoneNumRegex.findall('Cell: 415-555-9999 Work: 212-555-0000')
['415-555-9999', '212-555-0000']
如果在正则表达式中有分组，那么findall将返回元组的列表。每个元组表示一个找
到的匹配，其中的项就是正则表达式中每个分组的匹配字符串。为了看看findall()的效果，
请在交互式环境中输入以下代码（请注意，被编译的正则表达式现在有括号分组）：
>>> phoneNumRegex = re.compile(r'(\d\d\d)-(\d\d\d)-(\d\d\d\d)') # has groups
>>> phoneNumRegex.findall('Cell: 415-555-9999 Work: 212-555-0000')
[('415', '555', '1122'), ('212', '555', '0000')]
作为findall()方法的返回结果的总结，请记住下面两点：
1．如果调用在一个没有分组的正则表达式上，例如\d\d\d-\d\d\d-\d\d\d\d，方法
findall()将返回一个匹配字符串的列表，例如['415-555-9999', '212-555-0000']。
2．如果调用在一个有分组的正则表达式上，例如(\d\d\d)-(\d\d\d)-(\d\d\d\d)，方
法findall()将返回一个字符串的元组的列表（每个分组对应一个字符串），例如[('415',
'555', '1122'), ('212', '555', '0000')]。
7.6 字符分类
在前面电话号码正则表达式的例子中，你知道\d 可以代表任何数字。也就是说，\d
是正则表达式(0|1|2|3|4|5|6|7|8|9)的缩写。有许多这样的“缩写字符分类”，如表7-1所示。
表7-1 常用字符分类的缩写代码
缩写字符分类 表示
\d 0到9的任何数字
\D 除0到9的数字以外的任何字符
Python编程快速上手——让繁琐工作自动化
续表
缩写字符分类 表示
\w 任何字母、数字或下划线字符（可以认为是匹配“单词”字符）
\W 除字母、数字和下划线以外的任何字符
\s 空格、制表符或换行符（可以认为是匹配“空白”字符）
\S 除空格、制表符和换行符以外的任何字符
字符分类对于缩短正则表达式很有用。字符分类[0-5]只匹配数字 0 到 5，这比
输入(0|1|2|3|4|5)要短很多。
例如，在交互式环境中输入以下代码：
>>> xmasRegex = re.compile(r'\d+\s\w+')
>>> xmasRegex.findall('12 drummers, 11 pipers, 10 lords, 9 ladies, 8 maids, 7
swans, 6 geese, 5 rings, 4 birds, 3 hens, 2 doves, 1 partridge')
['12 drummers', '11 pipers', '10 lords', '9 ladies', '8 maids', '7 swans', '6
geese', '5 rings', '4 birds', '3 hens', '2 doves', '1 partridge']
正则表达式\d+\s\w+匹配的文本有一个或多个数字(\d+)，接下来是一个空白字
符(\s)，接下来是一个或多个字母/数字/下划线字符(\w+)。findall()方法将返回所有匹
配该正则表达式的字符串，放在一个列表中。
7.7 建立自己的字符分类
有时候你想匹配一组字符，但缩写的字符分类（\d、\w、\s 等）太宽泛。你可
以用方括号定义自己的字符分类。例如，字符分类[aeiouAEIOU]将匹配所有元音字
符，不论大小写。在交互式环境中输入以下代码：
>>> vowelRegex = re.compile(r'[aeiouAEIOU]')
>>> vowelRegex.findall('RoboCop eats baby food. BABY FOOD.')
['o', 'o', 'o', 'e', 'a', 'a', 'o', 'o', 'A', 'O', 'O']
也可以使用短横表示字母或数字的范围。例如，字符分类[a-zA-Z0-9]将匹配所
有小写字母、大写字母和数字。
请注意，在方括号内，普通的正则表达式符号不会被解释。这意味着，你不需
要前面加上倒斜杠转义.、*、?或()字符。例如，字符分类将匹配数字0到5和一个
句点。你不需要将它写成[0-5\.]。
通过在字符分类的左方括号后加上一个插入字符（^），就可以得到“非字符类”。
非字符类将匹配不在这个字符类中的所有字符。例如，在交互式环境中输入以下代码：
>>> consonantRegex = re.compile(r'[^aeiouAEIOU]')
>>> consonantRegex.findall('RoboCop eats baby food. BABY FOOD.')
['R', 'b', 'c', 'p', ' ', 't', 's', ' ', 'b', 'b', 'y', ' ', 'f', 'd', '.', '
', 'B', 'B', 'Y', ' ', 'F', 'D', '.']
现在，不是匹配所有元音字符，而是匹配所有非元音字符。
第7章 模式匹配与正则表达式
7.8 插入字符和美元字符
可以在正则表达式的开始处使用插入符号（^），表明匹配必须发生在被查找文
本开始处。类似地，可以再正则表达式的末尾加上美元符号（$），表示该字符串必
须以这个正则表达式的模式结束。可以同时使用^和$，表明整个字符串必须匹配该
模式，也就是说，只匹配该字符串的某个子集是不够的。
例如，正则表达式r'^Hello'匹配以'Hello'开始的字符串。在交互式环境中输入以
下代码：
>>> beginsWithHello = re.compile(r'^Hello')
>>> beginsWithHello.search('Hello world!')
>>> beginsWithHello.search('He said hello.') == None
True
正则表达式r'\d$'匹配以数字0到9结束的字符串。在交互式环境中输入以下代码：
>>> endsWithNumber = re.compile(r'\d$')
>>> endsWithNumber.search('Your number is 42')
>>> endsWithNumber.search('Your number is forty two.') == None
True
正则表达式r'^\d+$'匹配从开始到结束都是数字的字符串。在交互式环境中输入
以下代码：
>>> wholeStringIsNum = re.compile(r'^\d+$')
>>> wholeStringIsNum.search('1234567890')
>>> wholeStringIsNum.search('12345xyz67890') == None
True
>>> wholeStringIsNum.search('12 34567890') == None
True
前面交互式脚本例子中的最后两次 search()调用表明，如果使用了^和$，那么
整个字符串必须匹配该正则表达式。
我总是会混淆这两个符号的含义，所以我使用助记法“Carrots cost dollars”，提
醒我插入符号在前面，美元符号在后面。
7.9 通配字符
在正则表达式中，.（句点）字符称为“通配符”。它匹配除了换行之外的所有
字符。例如，在交互式环境中输入以下代码：
>>> atRegex = re.compile(r'.at')
>>> atRegex.findall('The cat in the hat sat on the flat mat.')
['cat', 'hat', 'sat', 'lat', 'mat']
要记住，句点字符只匹配一个字符，这就是为什么在前面的例子中，对于文本
Python编程快速上手——让繁琐工作自动化
flat，只匹配lat。要匹配真正的句点，就是用倒斜杠转义：\.。
7.9.1 用点-星匹配所有字符
有时候想要匹配所有字符串。例如，假定想要匹配字符串'First Name:'，接下来
是任意文本，接下来是'Last Name:'，然后又是任意文本。可以用点-星（.*）表示“任
意文本”。回忆一下，句点字符表示“除换行外所有单个字符”，星号字符表示“前
面字符出现零次或多次”。
在交互式环境中输入以下代码：
>>> nameRegex = re.compile(r'First Name: (.*) Last Name: (.*)')
>>> mo = nameRegex.search('First Name: Al Last Name: Sweigart')
>>> mo.group(1)
'Al'
>>> mo.group(2)
'Sweigart'
点-星使用“贪心”模式：它总是匹配尽可能多的文本。要用“非贪心”模式匹配
所有文本，就使用点-星和问号。像和大括号一起使用时那样，问号告诉Python用非贪
心模式匹配。在交互式环境中输入以下代码，看看贪心模式和非贪心模式的区别：
>>> nongreedyRegex = re.compile(r'')
>>> mo = nongreedyRegex.search(' for dinner.>')
>>> mo.group()
''
>>> greedyRegex = re.compile(r'')
>>> mo = greedyRegex.search(' for dinner.>')
>>> mo.group()
' for dinner.>'
两个正则表达式都可以翻译成“匹配一个左尖括号，接下来是任意字符，接下
来是一个右尖括号”。但是字符串' for dinner.>'对右肩括号有两种可能的
匹配。在非贪心的正则表达式中，Python匹配最短可能的字符串：''。
在贪心版本中，Python匹配最长可能的字符串：' for dinner.>'。
7.9.2 用句点字符匹配换行
点-星将匹配除换行外的所有字符。通过传入re.DOTALL作为re.compile()的第
二个参数，可以让句点字符匹配所有字符，包括换行字符。
在交互式环境中输入以下代码：
>>> noNewlineRegex = re.compile('.*')
>>> noNewlineRegex.search('Serve the public trust.\nProtect the innocent.
\nUphold the law.').group()
'Serve the public trust.'
>>> newlineRegex = re.compile('.*', re.DOTALL)
>>> newlineRegex.search('Serve the public trust.\nProtect the innocent.
第7章 模式匹配与正则表达式
\nUphold the law.').group()
'Serve the public trust.\nProtect the innocent.\nUphold the law.'
正则表达式 noNewlineRegex 在创建时没有向 re.compile()传入 re.DOTALL，它
将匹配所有字符，直到第一个换行字符。但是，newlineRegex在创建时向re.compile()传