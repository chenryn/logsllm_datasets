distribution. Without the extension, 15% of locations had
a 4× penalty from using public DNS; with the extension,
this fraction of locations is less than 5%. Overall, the
ECS approach provides a signiﬁcant end-to-end performance
advantage when using remote DNS services.
4.3.2 Extension challenges
Our analysis has demonstrated the potential beneﬁts
of the edns-client-subnet DNS extension for reducing the
CDN performance impact of using remote DNS. To realize
its performance beneﬁts, however, both the DNS service
and CDN must support the extension.
In the following
paragraphs, we evaluate and discuss the current level of
support for the extension.
As part of our measurement experiments, we probed users’
ISP DNS servers as well as several public DNS services to
check if they supported the extension. Google DNS was the
only public service that supported the extension. We also
found no ISP DNS services that supported the extension,
this despite the growing use of “remote DNS” architecture
by ISPs and its potential performance cost.
To determine the impact of the extension on aggregate
web performance, we test popular web sites to see if any of
the CDNs they use support the extension. We determine the
fraction of web sites and pageviews that utilize the extension
to improve client performance. This analysis follows the
model we used in §2 for evaluating the fraction of sites using
Figure 12: Breakdown of popular sites using CDNs,
based on whether the CDNs used support the edns-
client-subnet DNS extension. Each bar’s overall
height shows the % of sites using at least one CDN.
The height of the middle region shows the % of sites
using a CDN that supports the extension, while the
bottom region shows the % of sites when excluding
Google sites and services. Only 9% of sites in the
top 1,000 use CDNs that support the extension.
CDNs; here, we also test whether each CDN supports the
extension.
Figure 12 plots the fraction of sites using CDNs in the
N most popular sites. Each site is categorized by whether
the CDNs used support the ECS extension. Adoption to
date is quite limited: out of the top 1,000 sites, only 9%
employ a CDN supporting the extension. Most sites are
in this category because they either are a Google site (e.g.
www.google.co.uk) or they use a Google service such as
advertising, site analytics or hosted libraries (e.g. jQuery).
Setting aside these Google-related sites, we ﬁnd that only 1%
of sites use a non-Google CDN that supports the extension.
For the remaining 65% of sites using CDNs without ECS
050100150200250300End-to-endlatency%difference0.00.20.40.60.81.0CDFoflocationsISPDNSGoogleDNSGoogleDNSwithECS050100150200250300End-to-endlatency%difference0.00.20.40.60.81.0CDFoflocationsISPDNSGoogleDNSGoogleDNSwithECS10501005001000Nmostpopularsites0102030405060708090100%ofsitesNosupportGoogleorCDNsupportCDNsupport531support, their clients are potentially receiving suboptimal
CDN redirections and increased page load times.
There is a technical explanation for why CDNs may not
have yet adopted the extension. Some large CDNs make
their redirection decisions by mapping DNS servers onto a
set of “core points” in the network, which are in turn mapped
to the CDN’s infrastructure [4]; this initial mapping step is
non-trivial. Under this approach, the problem is that the
CDN cannot directly utilize the information provided by the
extension. Neither of the possible solutions—generating a
much more extensive set of mappings or changing the overall
approach for redirecting clients—are attractive to the CDN.
This issue presents a signiﬁcant barrier to adoption of the
extension.
In summary, our analyses have shown that the edns-
client-subnet DNS extension has signiﬁcant potential to
improve performance by conveying a client’s location to
CDNs’ authoritative DNS servers to inform their redirection
decisions. However, current adoption of the extension
is limited to a few CDNs; only 9% of the top 1,000
most popular sites beneﬁt from the potential performance
improvements of the extension.
5. AN END HOST SOLUTION
In this section, we present Direct Resolution (DR), a
readily available, end host solution that improves CDN
performance when using remote DNS. Our approach is
motivated by the potential performance beneﬁts of the
proposed DNS extension and its low adoption levels. DR
does not require the participation of either DNS services
or CDNs. We ﬁrst describe DR and explain the intuition
and process behind it. We evaluate the impact DR has
on improving end-to-end CDN performance. Finally, we
describe “namehelp”, an implementation of DR that attain
performance comparable to the edns-client-subnet DNS
extension.
5.1 Approach
In our previous analysis we rely on iterative DNS res-
olution to attain the best possible redirections and, thus,
the highest HTTP performance. The iterative resolution
approach, however,
is not a suitable solution by itself
given its high resolution latency. With iterative resolution,
a client must conduct several queries that traverse the
DNS hierarchy and translate Canonical Names (CNAME)
entries from customer domain names to CDN domains
(e.g. wwwimages.adobe.com to a1953.x.akamai.net) before
obtaining an answer. Recursive DNS servers can often
answer a client’s query faster than if the client used iterative
resolution itself. This is because recursive servers answer
queries for many clients, enabling them to answer many
queries from cache or with few additional queries.
The Direct Resolution approach composes the best aspects
of recursive DNS servers and iterative resolution to obtain
improved CDN redirections. Figure 13 diagrams the high-
level DR process. DR leverages the cache of a recursive
DNS server to quickly translate customer domain names to
CDN names and determine the CDN’s authoritative CDN
server to contact (Query #1). However, instead of using the
CDN redirection obtained via the recursive server, the client
directly contacts the CDN’s authoritative server (Query #3)
as in iterative resolution. The resulting CDN redirection is
Figure 13: Sequence diagram for Direct Resolution.
the same as that which iterative resolution would return but
without the iterative latency penalty.
5.2 CDN redirections using Direct Resolution
In Fig. 13, we outline the 3 steps to obtain a CDN
redirection using DR. As an example to illustrate how
DR works, we walk through the steps to obtain a CDN
redirection for an object linked on a website (website.com)
that is served by a CDN (somecdn.com).
Query #1 of this process is identical to the query a
client makes when using an ISP or public DNS service: the
client requests the IP address for website.com. The answer
includes the requested IP address, as well as any Canonical
Name (CNAME) entries to show how the queried domain
name was resolved. CNAME entries tell us which CDN
hosting the requested object (e.g. somecdn.com).
After the ﬁrst query, the client has obtained a CDN
redirection to the client; however, the redirection is based
on the location of the recursive DNS server. The subsequent
queries provide the client with a CDN redirection based on
its own location.
To directly query the CDN for a redirection requires that
client know the IP address of somecdn.com’s authoritative
DNS server. Sometimes this information is provided as
part of the information in the ﬁrst query. Most times,
however, the authoritative server is not typically included
in the DNS response but we may have the answer in a
local cache. Alternatively, If the client does not know the
authoritative DNS server, then it issues Query #2 asking
the recursive DNS server for the authoritative DNS server
for somecdn.com.
At this point, the client knows the address of the author-
itative server and can directly obtain a CDN redirection
(Query #3). The CDN’s response contains a redirection
based on the client’s location. The client can then use the
CDN redirection from Query #3 to address the server and
download the objects for website.com from the CDN.
5.3 Performance evaluation
Since our DR approach for obtaining CDN redirections is
functionally equivalent to iterative DNS resolution, we will
ClientRecursive DNSAuthoritative DNSLookup hostname Resolve hostname Have CNAME mapping to    CDN hostnameLookup nameserver for CDN hostnameResolve nameserver for CDN hostname Have address of CDN authoritative DNS serverDirectly request CDN redirectionSelect CDN   server for clientSelect CDN server for recursive DNSHave CDN redirection for client's location1Query23532(a) Akamai
(b) Limelight
Figure 14: CDFs of end-to-end latency diﬀerence relative to the best-case latency, comparing “Google DNS”
with DR when the CDN server is not known (“DR”) or is cached (“DR (cached)”). “DR (cached)” can provide
signiﬁcantly improved performance compared to “Google DNS”.
receive mappings to the same set of edge servers. Since
HTTP requests to edge servers are agnostic to how the
edge server mappings were obtained, we expect that the
HTTP performance under DR will match that of iterative
resolution. As we reported in §4.2, this yields best-case
HTTP performance.
To evaluate the DR approach in terms of end-to-end
performance, however, we must also account for the latency
to obtain the CDN redirection. Depending on whether the
client has the CDN’s authoritative DNS server address in
its cache, this entails either two or three queries. When the
authoritative server’s address is not known, the client must
make two queries to the recursive server and one query to
the CDN’s authoritative server. If the authoritative server
is cached, then the client contacts the recursive server and
then the authoritative server.
We compare the end-to-end performance of our DR
approach—with and without knowing the authoritative
server—with the performance of simply using a remote DNS
service. Figure 14 plots the distribution of % diﬀerence in
end-to-end latency compared to our ideal baseline, across
our measurement locations, for both Akamai and Limelight
CDNs. For example, using Akamai, the median location’s
end-to-end latency when using Google DNS is 60% higher
than the ideal baseline. When using DR, having the
CDN’s authoritative DNS server cached (“DR (cached)”)
provides signiﬁcantly better performance than when it is not
cached (“DR”). Compared to Google DNS, “DR (cached)”
provides signiﬁcant performance improvement, especially
in the upper tail of the distribution. Comparing directly
Google DNS and “DR (cached)”, our solution provides lower
end-to-end performance in 49% of locations.
This comparison between our approach and remote DNS
shows that the HTTP performance beneﬁts from better
CDN redirection do not always outweigh the latency of DR’s
additional DNS query. We address this by proposing that a
client determines whether it should conduct DR’s additional
queries to obtain a better redirection. For the purpose of
our evaluation, we assume the existence of an oracle that
determines whether it makes sense to use DR or simply the
CDN redirection from remote DNS. One way to implement
Figure 15: CDFs of end-to-end latency diﬀerence vs.
best-case latency, for locations with > 50% remote
DNS penalty. “DR (optimized)” shows performance
for using an oracle to decide whether to use DR. This
signiﬁcantly improves on remote DNS performance,
and is within a constant factor of the performance
of “Google DNS with ECS”.
this would be to use the results of previous redirections;
when a prior DR redirection resulted in the same answer as
that seen via remote DNS, DR would not be used and the
client would return the redirection seen via remote DNS in
Query #1.
To evaluate DR, we focus on the set of locations where
remote DNS usage has the most impact. We select those
locations in which the penalty from using remote DNS
is at least 50%. This subset comprises 65% of the total
set of locations. For these locations, Fig. 15 plots the
distributions of % diﬀerence in end-to-end latency for
Akamai CDN relative to our ideal baseline for optimized DR
and remote DNS with and without the edns-client-subnet
DNS extension.
Generally, optimized DR provides signiﬁcantly improved
performance compared to remote DNS. In the median case,
optimized DR provides 1.6× better performance than remote
050100150200250300End-to-endlatency%difference0.00.20.40.60.81.0CDFoflocationsGoogleDNSDRDR(cached)050100150200250300End-to-endlatency%difference0.00.20.40.60.81.0CDFoflocationsGoogleDNSDRDR(cached)050100150200250300End-to-endlatency%difference0.00.20.40.60.81.0CDFoflocationsGoogleDNSDR(optimized)GoogleDNSwithECS533DNS (88% vs.
142%) and is even better at the 90th
percentile (2.5× better). One reason is that in the extreme
cases of poor performance using remote DNS, the HTTP
latency to distance CDN edge servers dominates; optimized
DR can provide signiﬁcant improvements via nearer edge
servers.
We also examine the relative performance of optimized
DR and remote DNS with the edns-client-subnet DNS
extension, ﬁnding that the distributions of performance
match closely. Optimized DR is within 42% of the edns-
client-subnet extension’s performance in the median case
(88% vs 62%) and within 18% at the 90th percentile. The
diﬀerence in performance between these two approaches is
generally consistent across the distribution, and is primarily
due to the additional DNS request that the DR approach
must make to obtain an edge server mapping.
Overall, these results show that the optimized DR ap-
proach not only attains performance within a constant factor
of remote DNS with the edns-client-subnet DNS extension,
but that it also signiﬁcantly improves performance relative
to just using remote DNS.
5.4 Implementation
We have implemented our optimized DR approach in
namehelp, a DNS proxy that runs on the user’s computer
as a daemon and requires no modiﬁcations to the operating
system. Our implementation is available for download.6
namehelp compares the performance of alternative DNS
services with respect to CDN performance, and presents the
results to the user. We consider additional implementations,
such as integration into operating systems or middleboxes,
as future work.
5.4.1 DNS proxy daemon
To provide the beneﬁts of our optimized DR approach,
namehelp functions as a DNS proxy running on the user’s
computer. Conﬁguring the DNS proxy simply requires the
user to specify her DNS server as “localhost”, so that all
DNS requests will be directed to namehelp.
namehelp listens on the default port (53) for DNS queries,
and forwards them to a conﬁgured recursive DNS service.
Simple domain name responses are returned immediately by
the namehelp proxy with no latency penalty. If the response
from the recursive DNS contains a CDN redirection (e.g. a
CNAME record), we invoke our DR approach to improve