  (*in_EAX)();
  return;
}
void __cdecl FUN_004036fe(int **param_1,int *param_2,int param_3,int param_4)
{
  int *piVar1;
  code *pcVar2;
  int *piVar3;
  int *piVar4;
  int *piVar5;
  int *local_8;
  piVar1 = *(int **)(*param_2 + 0xc);
  piVar4 = piVar1;
  piVar5 = piVar1;
  if (-1 > 1 & 1) == 0) {
        uVar11 = param_3;
        if (((uint)puVar16 & 3) != 0) {
          uVar11 = (uint)puVar16 & 3;
          param_3 = param_3 - uVar11;
          do {
            *(undefined *)((int)puVar16 - 1) = *(undefined *)((int)puVar14 + -1);
            puVar14 = (undefined4 *)((int)puVar14 + -1);
            puVar16 = (undefined4 *)((int)puVar16 - 1);
            uVar11 = uVar11 - 1;
          } while (uVar11 != 0);
        }
        uVar10 = param_3;
        if (0x1f > 2;
          while( true ) {
            if (uVar10 == 0) break;
            uVar10 = uVar10 - 1;
            puVar16[-1] = puVar14[-1];
            puVar14 = puVar14 + -1;
            puVar16 = puVar16 + -1;
          }
          switch(param_3 & 3) {
          case 0:
            return CONCAT44(param_3,param_1) & 0x3ffffffff;
          case 1:
            *(undefined *)((int)puVar16 - 1) = *(undefined *)((int)puVar14 + -1);
            return CONCAT44(param_3,param_1) & 0x3ffffffff;
          case 2:
            *(undefined *)((int)puVar16 - 1) = *(undefined *)((int)puVar14 + -1);
            *(undefined *)((int)puVar16 - 2) = *(undefined *)((int)puVar14 + -2);
            return CONCAT44(param_3,param_1) & 0x3ffffffff;
          case 3:
            *(undefined *)((int)puVar16 - 1) = *(undefined *)((int)puVar14 + -1);
            *(undefined *)((int)puVar16 - 2) = *(undefined *)((int)puVar14 + -2);
            *(undefined *)((int)puVar16 - 3) = *(undefined *)((int)puVar14 + -3);
            return CONCAT44(param_3,param_1) & 0x3ffffffff;
          }
        }
      }
      else {
        while (puVar15 = puVar14, puVar17 = puVar16, ((uint)puVar16 & 0xf) != 0) {
          puVar14 = (undefined4 *)((int)puVar14 + -1);
          puVar16 = (undefined4 *)((int)puVar16 + -1);
          *(undefined *)puVar16 = *(undefined *)puVar14;
          uVar10 = uVar10 - 1;
        }
        do {
          puVar14 = puVar15;
          puVar16 = puVar17;
          if (uVar10 < 0x80) break;
          puVar14 = puVar15 + -0x20;
          puVar16 = puVar17 + -0x20;
                    // WARNING: Load size is inaccurate
                    // WARNING: Load size is inaccurate
          auVar19 = *(undefined *)(puVar15 + -0x1c);
                    // WARNING: Load size is inaccurate
          auVar2 = *(undefined *)(puVar15 + -0x18);
                    // WARNING: Load size is inaccurate
          auVar3 = *(undefined *)(puVar15 + -0x14);
                    // WARNING: Load size is inaccurate
          auVar4 = *(undefined *)(puVar15 + -0x10);
                    // WARNING: Load size is inaccurate
          auVar5 = *(undefined *)(puVar15 + -0xc);
                    // WARNING: Load size is inaccurate
          auVar6 = *(undefined *)(puVar15 + -8);
                    // WARNING: Load size is inaccurate
          auVar7 = *(undefined *)(puVar15 + -4);
                    // WARNING: Store size is inaccurate
          *(undefined *)puVar16 = *(undefined *)puVar14;
                    // WARNING: Store size is inaccurate
          *(undefined *)(puVar17 + -0x1c) = auVar19;
                    // WARNING: Store size is inaccurate
          *(undefined *)(puVar17 + -0x18) = auVar2;
                    // WARNING: Store size is inaccurate
          *(undefined *)(puVar17 + -0x14) = auVar3;
                    // WARNING: Store size is inaccurate
          *(undefined *)(puVar17 + -0x10) = auVar4;
                    // WARNING: Store size is inaccurate
          *(undefined *)(puVar17 + -0xc) = auVar5;
                    // WARNING: Store size is inaccurate
          *(undefined *)(puVar17 + -8) = auVar6;
                    // WARNING: Store size is inaccurate
          *(undefined *)(puVar17 + -4) = auVar7;
          uVar10 = uVar10 - 0x80;
          puVar15 = puVar14;
          puVar17 = puVar16;
        } while ((uVar10 & 0xffffff80) != 0);
        puVar15 = puVar14;
        puVar17 = puVar16;
        uVar11 = param_3;
        if (0x1f < uVar10) {
          do {
            puVar14 = puVar15 + -8;
            puVar16 = puVar17 + -8;
                    // WARNING: Load size is inaccurate
                    // WARNING: Load size is inaccurate
            auVar19 = *(undefined *)(puVar15 + -4);