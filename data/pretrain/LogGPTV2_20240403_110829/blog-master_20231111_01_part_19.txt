        |       | select random()*$1, gen_hanzi($2), gen_hanzi($3), gen_hanzi($4), clock_timestamp()                               +  
        |       | from generate_series($5,$6)  
 r1     | 16388 | create index on tbl using gin (gid, c1 gin_trgm_ops, c2 gin_trgm_ops, c3 gin_trgm_ops)  
 r1     | 16388 | insert into tbl_ts select id,ts,to_tsvector(ts) from (select generate_series($1,$2) id, gen_rand_text($3) ts) t  
 r1     | 16388 | insert into t_big select generate_series($1,$2), md5(random()::text), random()*$3, random()*$4, clock_timestamp()  
(5 rows)  
```    
响应时间抖动最严重 SQL      
```      
select userid::regrole, dbid, query from pg_stat_statements order by stddev_exec_time desc limit 5;      
```        
最耗临时空间 SQL      
```      
select userid::regrole, dbid, query from pg_stat_statements order by temp_blks_written desc limit 5;      
```     
```  
  userid  | dbid  |                                              query                                                 
----------+-------+--------------------------------------------------------------------------------------------------  
 r1       | 16388 | explain analyze select * from t_off1 where c=1 order by id limit 10 offset 8000000  
 r1       | 16388 | insert into t_off1 (info,c,ts) select md5(random()::text), $1, now() from generate_series($2,$3)  
 r1       | 16388 | refresh materialized view CONCURRENTLY mv_t_mv with data  
 r1       | 16388 | insert into tbl (gid,c1,c2,c3,ts)                                                               +  
          |       | select random()*$1, gen_hanzi($2), gen_hanzi($3), gen_hanzi($4), clock_timestamp()              +  
          |       | from generate_series($5,$6)  
 postgres | 13757 | alter table pgbench_accounts add primary key (aid)  
(5 rows)  
```  
#### 92 配置慢查询日志  
```  
vi $PGDATA/postgresql.auto.conf  
log_min_duration_statement = '1s'  
OR  
postgres=# alter system set log_min_duration_statement = '1s';  
ALTER SYSTEM  
```  
```  
pg_ctl reload  
OR  
postgres=# select pg_reload_conf();  
 pg_reload_conf   
----------------  
 t  
(1 row)  
postgres=# show log_min_duration_statement;  
 log_min_duration_statement   
----------------------------  
 1s  
(1 row)  
```  
```  
postgres=# select pg_sleep(1.1);  
 pg_sleep   
----------  
(1 row)  
```  
```  
cd $PGDATA  
postgres@6f60081d4ace:~/14/pgdata$ cat current_logfiles   
csvlog log/postgresql-2023-11-11_060650.csv  
postgres@6f60081d4ace:~/14/pgdata$ less log/postgresql-2023-11-11_060650.csv  
2023-11-11 06:43:01.303 UTC,"postgres","postgres",1160,"[local]",654f2270.488,1,"SELECT",2023-11-11 06:42:56 UTC,4/0,0,LOG,00000,"duration: 1104.114 ms  statement: select pg_sleep(1.1);",,,,,,,,,"psql","client backend",,2920803561901199087  
```  
#### 93 配置过往慢查询跟踪  
https://www.postgresql.org/docs/14/auto-explain.html  
```  
vi $PGDATA/postgresql.auto.conf  
track_io_timing = on  
track_wal_io_timing = on  
shared_preload_libraries = 'auto_explain, pg_stat_statements'  
auto_explain.log_min_duration = '1s'  
auto_explain.log_analyze = true  
auto_explain.log_buffers = true  
auto_explain.log_wal = true  
auto_explain.log_timing = true   
auto_explain.log_verbose = true  
auto_explain.log_settings = true  
auto_explain.log_nested_statements = true  
pg_ctl restart -m fast  
```  
```  
postgres=# \c db1 r1  
You are now connected to database "db1" as user "r1".  
db1=> \dt+  
                                           List of relations  
 Schema |       Name       | Type  |  Owner   | Persistence | Access method |    Size    | Description   
--------+------------------+-------+----------+-------------+---------------+------------+-------------  
 public | spatial_ref_sys  | table | postgres | permanent   | heap          | 6936 kB    |   
 s1     | aud_alter        | table | r1       | permanent   | heap          | 16 kB      |   
 s1     | new1             | table | r1       | permanent   | heap          | 8192 bytes |   
 s1     | new2             | table | r1       | permanent   | heap          | 8192 bytes |   
 s1     | new3             | table | r1       | unlogged    | heap          | 16 kB      |   
 s1     | new4             | table | r1       | permanent   | heap          | 498 MB     |   
 s1     | nt               | table | r1       | permanent   | heap          | 8192 bytes |   
 s1     | nt1              | table | r1       | permanent   | heap          | 0 bytes    |   
 s1     | t                | table | r1       | permanent   | heap          | 16 kB      |   
 s1     | t2               | table | r1       | permanent   | heap          | 16 kB      |   
 s1     | t3               | table | r1       | permanent   | heap          | 16 kB      |   
 s1     | t4               | table | r1       | permanent   | heap          | 0 bytes    |   
 s1     | t_1              | table | r1       | permanent   | heap          | 16 kB      |   
 s1     | t_big            | table | r1       | unlogged    | heap          | 8056 MB    |   
 s1     | t_cur            | table | r1       | permanent   | heap          | 792 kB     |   
 s1     | t_forupdate      | table | r1       | permanent   | heap          | 16 kB      |   
 s1     | t_hid            | table | r1       | permanent   | heap          | 8192 bytes |   
 s1     | t_hint           | table | r1       | permanent   | heap          | 8192 bytes |   
 s1     | t_lock           | table | r1       | permanent   | heap          | 16 kB      |   
 s1     | t_mv             | table | r1       | permanent   | heap          | 24 MB      |   
 s1     | t_off            | table | r1       | permanent   | heap          | 376 kB     |   
 s1     | t_off1           | table | r1       | unlogged    | heap          | 806 MB     |   
 s1     | t_rr             | table | r1       | permanent   | heap          | 8192 bytes |   
 s1     | table_change_rec | table | r1       | permanent   | heap          | 16 kB      |   
 s1     | tbl              | table | r1       | unlogged    | heap          | 120 MB     |   
 s1     | tbl_poi          | table | r1       | unlogged    | heap          | 65 MB      |   
 s1     | tbl_tj           | table | r1       | unlogged    | heap          | 78 MB      |   
 s1     | tbl_ts           | table | r1       | unlogged    | heap          | 639 MB     |   
 s1     | tbl_vector       | table | r1       | unlogged    | heap          | 56 MB      |   
 s1     | test             | table | r1       | permanent   | heap          | 0 bytes    |   
 s1     | test1            | table | r1       | permanent   | heap          | 16 kB      |   
(31 rows)  
db1=> select count(*) from t_off1  
db1-> ;  
  count     
----------  
 10000000  
(1 row)  
db1=> \timing  
Timing is on.  
db1=> select count(*) from t_big;  
   count     
-----------  
 100000000  
(1 row)  
Time: 16360.549 ms (00:16.361)  
db1=> select pg_sleep(1.5);  
 pg_sleep   
----------  
(1 row)  
Time: 1503.326 ms (00:01.503)  
db1=>   
```  
```  
postgres@6f60081d4ace:~/14/pgdata$ cd $PGDATA  
postgres@6f60081d4ace:~/14/pgdata$ cat current_logfiles   
csvlog log/postgresql-2023-11-11_064543.csv  
2023-11-11 06:46:15.404 UTC,"r1","db1",1201,"[local]",654f232a.4b1,1,"SELECT",2023-11-11 06:46:02 UTC,4/3,0,LOG,00000,"duration: 1437.490 ms  plan:  
Query Text: select count(*) from t_off1  
;  
Aggregate  (cost=183711.54..183711.55 rows=1 width=8) (actual time=1437.480..1437.481 rows=1 loops=1)  
  Output: count(*)  
  Buffers: shared read=7874  
  I/O Timings: read=82.202  
  ->  Index Only Scan using t_off1_c_ts_idx on s1.t_off1  (cost=0.43..158711.67 rows=9999949 width=0) (actual time=3.104..803.399 rows=10000000 loops=1)  
        Output: c, ts  
        Heap Fetches: 0  
        Buffers: shared read=7874  
        I/O Timings: read=82.202  
Settings: max_parallel_workers_per_gather = '0', random_page_cost = '1.1', search_path = '""$user"", s1, public'  
JIT:  
  Functions: 2  
  Options: Inlining false, Optimization false, Expressions true, Deforming true  
  Timing: Generation 0.245 ms, Inlining 0.000 ms, Optimization 0.208 ms, Emission 2.311 ms, Total 2.765 ms",,,,,,,,,"psql","client backend",,8133783971837376411  
2023-11-11 06:46:15.404 UTC,"r1","db1",1201,"[local]",654f232a.4b1,2,"SELECT",2023-11-11 06:46:02 UTC,4/0,0,LOG,00000,"duration: 1472.583 ms  statement: select count(*) from t_off1  
;",,,,,,,,,"psql","client backend",,8133783971837376411  
2023-11-11 06:46:39.911 UTC,"r1","db1",1201,"[local]",654f232a.4b1,3,"SELECT",2023-11-11 06:46:02 UTC,4/4,0,LOG,00000,"duration: 16359.165 ms  plan:  
Query Text: select count(*) from t_big;  
Aggregate  (cost=2280928.20..2280928.21 rows=1 width=8) (actual time=16359.155..16359.156 rows=1 loops=1)  
  Output: count(*)  
  Buffers: shared read=1030928  
  I/O Timings: read=4232.276  
  ->  Seq Scan on s1.t_big  (cost=0.00..2030928.16 rows=100000016 width=0) (actual time=0.457..10531.855 rows=100000000 loops=1)  
        Output: id, info, c1, c2, ts  
        Buffers: shared read=1030928  
        I/O Timings: read=4232.276  
Settings: max_parallel_workers_per_gather = '0', random_page_cost = '1.1', search_path = '""$user"", s1, public'  
JIT:  
  Functions: 2  
  Options: Inlining true, Optimization true, Expressions true, Deforming true  
  Timing: Generation 0.360 ms, Inlining 53.314 ms, Optimization 5.399 ms, Emission 4.499 ms, Total 63.572 ms",,,,,,,,,"psql","client backend",,930403565133997478  
2023-11-11 06:46:39.911 UTC,"r1","db1",1201,"[local]",654f232a.4b1,4,"SELECT",2023-11-11 06:46:02 UTC,4/0,0,LOG,00000,"duration: 16371.929 ms  statement: select count(*) from t_big;",,,,,,,,,"psql","client backend",,930403565133997478  
2023-11-11 06:46:51.538 UTC,"r1","db1",1201,"[local]",654f232a.4b1,5,"SELECT",2023-11-11 06:46:02 UTC,4/5,0,LOG,00000,"duration: 1501.982 ms  plan:  
Query Text: select pg_sleep(1.5);  
Result  (cost=0.00..0.01 rows=1 width=4) (actual time=1501.966..1501.967 rows=1 loops=1)  
  Output: pg_sleep('1.5'::double precision)  
Settings: max_parallel_workers_per_gather = '0', random_page_cost = '1.1', search_path = '""$user"", s1, public'",,,,,,,,,"psql","client backend",,2920803561901199087  
2023-11-11 06:46:51.538 UTC,"r1","db1",1201,"[local]",654f232a.4b1,6,"SELECT",2023-11-11 06:46:02 UTC,4/0,0,LOG,00000,"duration: 1502.873 ms  statement: select pg_sleep(1.5);",,,,,,,,,"psql","client backend",,2920803561901199087  
```  
#### 94 配置连接池   
https://www.pgbouncer.org/usage.html  
- [《pgbouncer 1.21 开始支持 prepared statement in 事务模式》](../202310/20231026_02.md)    
- [《Use pgbouncer connect to GreenPlum's segment node》](../201201/20120113_03.md)    
- [《PostgreSQL 连接池 pgbouncer 使用》](../201005/20100511_03.md)    
```  
su - postgres  
cd ~  
postgres@6f60081d4ace:~$ pwd  
/var/lib/postgresql  
mkdir ~/.pgb  
vi ~/.pgb/pgb.ini  
[databases]  
db1 = host=localhost port=1921 dbname=db1  
[pgbouncer]  
listen_port = 1922  
listen_addr = localhost  
auth_type = md5  
auth_file = /var/lib/postgresql/.pgb/userlist.txt  
logfile = /var/lib/postgresql/.pgb/pgbouncer.log  
pidfile = /var/lib/postgresql/.pgb/pgbouncer.pid  
admin_users = ad  
vi ~/.pgb/userlist.txt  
"ad" "pwd"  
chmod 600 ~/.pgb/userlist.txt  
/usr/sbin/pgbouncer -d ~/.pgb/pgb.ini  
psql -h 127.0.0.1 -p 1922 -U r1 -d db1  
psql -h 127.0.0.1 -p 1922 -U r1 -d db1  
Password for user r1:   
psql (14.9 (Debian 14.9-1.pgdg110+1))  
Type "help" for help.  
db1=>   
db1=>   
```  
#### 95 reload配置文件, 关闭/启动/重启数据库实例  
```  
-- 进入容器后, 进入postgres用户  
su - postgres  
-- reload配置文件  
pg_ctl reload  
-- 关闭数据库实例, 回退未完成会话, 刷出buffer内存中的脏数据, 一致性关闭数据库. 再次启动时无需自动恢复.   
pg_ctl stop -m fast  
-- 最快速度关闭数据库实例, 不管未完成会话, 不刷出buffer内存中的脏数据, 非一致性关闭数据库. 再次启动时需要自动恢复.   
pg_ctl stop -m immediate  
-- 启动数据库实例  
pg_ctl start  
-- 重启数据库实例  
pg_ctl restart -m fast  
-- 关闭容器  
docker stop pg  
-- 启动容器  
docker start pg  
-- 进入容器  
docker exec -ti pg bash  
-- 删除本章测试数据  
psql  
\c db1 r1  
drop schema s1 cascade;  
create schema s1;  
```  
#### [期望 PostgreSQL|开源PolarDB 增加什么功能?](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
#### [PolarDB 云原生分布式开源数据库](https://github.com/ApsaraDB "57258f76c37864c6e6d23383d05714ea")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、内核开发公开课、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [PostgreSQL 解决方案集合](../201706/20170601_02.md "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")