入一个会今对象，可以用
来发出请求。
public class RemoteControlTest {
public static void main(String[] args){
SimpleRemoteControl remote = new SimpleRemoteControl();
现在创建了一个电灯对
Light light = new Light () ;
录，此对录也就是清求
LightOnCommand 1ightOn = new LightOnCommand (1ight) ;
的提收者。
个
remote.setCommand(1ightOn) :
在这里创建一个命今，然后将
remote.buttonWasPressed () ;
接收者传给它。
>
把命今传给调用者。
java RemoteControlTest
然后模拟按下按钮。
Light is On
这是执行此测试代码
的输出结果！
204
第6章
---
## Page 241
命令模式
harpenyour
penci
好了，现在让你来实现GarageDoorOpenCommand类。先根据
GarageDoor类图填好下面的代码。
owni
public class GarageDoorOpenCommand
implements Command {
把代码写在这里。
现在你已经有了一个类，下面代码的输出会是什么？（提示：这个GarageDoor的
up（）方法完成后，将打印出"GarageDoorisOpen"）。
public class RemoteControlTest {
public static void main(String[] args) {
SimpleRemoteControl remote = new SimpleRemoteControl();
Light light = new Light () ;
GarageDoor garageDoor = new GarageDoor();
LightOnCommand 1ightOn = new LightOnCommand(1ight) ;
GarageDoorOpenCommand garageOpen =
new GarageDoorOpenCommand (garageDoor) ;
remote.setCommand(1ightOn) ;
remote.buttonWasPressed();
remote.setCommand (garageOpen) ;
remote.buttonWasPressed () ;
Fle EdgWind
java RemoteControlTest
输出在这里。
你现在的位置
205
---
## Page 242
定义命令模式
定义命令模式
在经过对象村餐厅的学习之后，你已经实现了部分的遥控器
API，而且在这个过程中，你也对命令模式内的类和对象是
如何互动的理解得很清楚了。现在，我们就来定义命令模式，
并敲定所有的细节。
被封装的请求
先从正式的定义开始：
命令模式将“请求”封装成对象，以便使用不同的请求、
队列或者日志来参数化其他对象。命令模式也支持可撤销
接收者
的操作。
现在，仔细看这个定义。我们知道一个命令对象通过在特定
接收者上绑定一组动作来封装一个请求。要达到这一点，命
令对象将动作和接收者包进对象中。这个对象只暴露出一个
executeO方法，当此方法被调用的时候，接收者就会进行这些
动作。从外面来看，其他对象不知道究竞哪个接收者进行了哪
些动作，只知道如果调用executeO方法，请求的目的就能达到。
我们也看到了利用命令来参数化对象的一些例子。再回到餐
厅，一整天下来，女招待参数化许多订单。在简单遥控器中，
我们先用一个“打开电灯”命令加载按钮插槽，稍后又将命令
替换成为另一个“打开车库门”命令。就和女招待一样，遥控
器插槽根本不在乎所拥有的是什么命令对象，只要该命令对象
实现了Command接口就可以了。
我们还未说到使用命令模式来实现“队列、日志和支持撤销操
作”。别担心，这是基本命令模式相当直接的扩展，很快我们
就会看到这些内容。一旦有了足够的基础，也可以轻易地持所
谓的Meta Command Pattern。Meta Command Pattern 可以创建
命令的宏，以便一次执行多个命令。
一个调用者（比方说遥控器
的一个插楼）可用不同的请
求当参数。
206
第6章
---
## Page 243
命令模式
定义命令模式：
类围
这个调用者持有一个
Command为所有会今声9了一个接口。调用
这个客户负责创建一个
命今对象，并在某个时
命今对象的execute(）方法，就可以让接收者进
ConcreteCommand，并设置
阅点调用会今对象的
行相关的动作。这个接口也具备一个undo（）方
其接较者。
execute（）方法，将请求
法，本章稍后金介绍这个方法。
付请实行。
Client
Invoker
>
Command
setCommand()
execute
ndo
这个execute(）方法金调
用接收老的动作.以
Receiver
ConcreteCommand
满足请求。
action(
execute(
undo0
public void execute()
receiver.action()
接收者知道如何进行必要的工
作.实现这个请求。任何类都
可以当接收者。
这个ConcteteCommand定义了动作和接
收者之间的绑定美系。调用者只夏诺
用execute（）就可以置出请求，然后由
ConcteteCommand调用提收者的一个或多个
RAIN
POMER
命令模式的设计如何支持请求调用者和请求接收者之间的解耦？
你现在的位置
207
---
## Page 244
从哪里开始
好了，我已经能体会命令模式
了。Joe，谢谢你介绍这个技巧，
我想在完成这个遥控器API之后
我们会被报为超级巨星。
Mary：我也这么觉得。那么，应该从哪里开始？
Sue：就像我们在简单遥控器（SimpleRemote）中所做的一样，我们需要提
供一个方法，将命令指定到插槽。实际上，我们有7个插槽，每个插槽都具
备了“开”和“关”按钮，所以我们可以用类似方式，把命令指定给遥控
器，像这样：
onCommands[0]=onCommand;
offCommands[0]=offCommand;
Mary：很有道理，但电灯对象应该排除。遥控器如何分辨客厅或厨房的电
灯？
Sue：喔，对了，遥控器无法区分这些！遥控器除了在按下按钮时，调用对
应命令对象的exccute(方法之外，它什么都不知道。
Mary：是的，这个我似乎了解，但是在实现时，如何确定对象打开（或关
闭）正确的装置？
Sue：当我们创建命令并将其加载到遥控器时，我们创建的命令是两个
LightCommand，其中一个绑定到客厅电灯对象，另一个则绑定到厨房的电
灯对象。别忘了，命令中封装了请求的接收者。所以，在按下按钮时，根本
不需要理会打开哪一个电灯，只要executeO被调用，该按钮的对应对象就有
动作。
Mary：我想我懂了。现在开始实现这个遥控器吧！我认为一切都会越来越
清楚。
Sue：听起来很棒，开工了…..
PDG
208
嘉9L
---
## Page 245
命令模式
将命令指定到插槽
我们的计划是这样的：我们打算将遥控器的每个插槽，对应到一个
命令这样就让遥控器变成“调用者”。当按下按钮，相应命令对象
的execute(方法就会被调用，其结果就是，接收者（例如：电灯、天
花板电扇、音响）的动作被调用。
（1）每个括楼有一个会合
（2）当按下按钮.就调用相应命今的
execute(）方法
车库
所有的灯
会式
格模好像不很用
（3）在execute(）方法中
接妆者
的动作金证得用
调用毒
off()
on()
PDG
Stereo
你现在的位置
209
---
## Page 246
实现遥控器
实现遥控器
public class RemoteControl
这个时候，遵控器要处理7个
Command(] onCommands;
开与关的命兮，使用相应数
Command[]offCommands;
组记录这些命今。
public RemoteControl() {
onCommands = new Conmand[7];
在构造器中，只需实例化并初始
offCommands =new Command[7];
化这两个开与美的数组。
Command noCommand = new NoCommand() ;
for（inti=0;i<7;i++）{
onCommands[i] = noCommand;
offCommands[i] = noCommand;
public void setCommand(int slot，Command onCommand，Command offCommand） (
onCommands[slot] = onCommand;
offCommands[slot] =offCommand;
setCommamd（）方法须有3个参数，分别是插槽的
位置、开的命今、关的命今。这些命今将记录在
public void onButtonWasPushed(int slot)(
开关数组中对应的插槽位置，以供稍后使用。
onCommands[slot].execute();
，
public void offButtonWasPushed(int slot)(
当按下开或关的按钮，硬件就
offCommands[slot].execute();
金员费调用对应的方法，也
1
就是onButtonWasPushed（）或
osBattoxWasPushed()
public String toString(){
StringBuffer stringBuff = new StringBuffer();
stringBuff.append("\n------Remote Control
-\n"）;
for（int i=0;i<onCommands.length;i++){
+
"+offCommands[i].getClass().getName(）+"\n");
return stringBuff.toString();
覆盖toStrins(）.打印出每个描檬和它
对应的命今。稍后在测试遥控器的时
续，全用到这个方法。
210
第6章
---
## Page 247
命令模式
实现命令
我们已经为SimpleRemoteControl（简单遥控器）动手实现过LightOnCommand，我
们可以将相同的代码应用在这里，一切都能顺利进行。关闭命令并没有什么不同，
事实上，LightOffCommand看起来就像这样：
public class LightoffCommand implements Command 
Light 1ight;
public LightOffCommand(Light 1light)(
this.light = 1ight;
LishtOssCommand工作方式和
public void execute(){
CishtOnCommand一样.只是调
light.off () ;
用不同的方法，也就是(）方
法。
Stereo
让我们来提高挑战性：如何为音响（Stereo）编写开与关的命令？好了，关是
on0
很容易，只要把Stereo绑定到StereoOffCommand的offO方法就可以了。开就有
offO
点复杂，假设我们要写一个StereoOnWithCDCommand·…….
setCd()
setDvd0
setRadio0
public class StereoOnWithCDCommand implements Command{
Stereo stereo;
public StereoOnWithCDCommand(Stereo stereo)(
就如同lishtOnCommand的做法一样
this.stereo = stereo;
传入音响的实例，然后将其储存在品
部实例定量中。
public void execute(){
stereo.on();
stereo.setCD();
stereo.setVolume (11) ;
要实现这个请求，需要调用音响的三个方法：
首先打开它，然后把它设置成播放CD，最后
把音量设置为11。为什么是11：这个嘛，总
是比10好些，对吧？
这一切还不错。看看剩下的厂商类，此刻，相信你已经有能力可以完成剩下的
命令类了。
你现在的位置
211
---
## Page 248
测试遥控器
还步测试遥控器
遥控器的工作差不多已经完成：我们剩下要做的事情是运行测试和准备API的
说明文档。巴斯特家庭自动化公司一定对我们的成果感到印象深刻，不是吗？
我们打算呈现一个绝佳的设计，让他们能够生产易于维护的遥控器。将来，他
们也将很容易说服厂商，写一些简单的命令类，因为它们写起来很简单。
开始测试这份代码吧！
public class RemoteLoader {
public static void main(String[] args) {
RemoteControl remoteControl = new RemoteControl():
Light 1ivingRoomLight = new Light("Living Room");
Light kitchenLight = new Light("Kitchen");
将所有的装置创建在
CeilingFan ceilingFan= new CeilingFan("Living Room") ;
合递的位置。
GarageDoor garageDoor - new GarageDoor("");
Stereo stereo = new Stereo("Living Room");
LightOnCommand 1ivingRoomLightOn =
new LightOnCommand (1ivingRoomLight) ;
LightOffCommand livingRoomLightOff =
创建所有的电灯命
new LightOffCommand(1ivingRoomLight) ;
LightOnCommand kitchenLightOn =
今对象。
new LightOnCommand (kitchenLight) ;
LightOffCommand kitchenLightOff =
new LightOffCommand (kitchenLight);
CeilingFanOnCommand ceilingFanOn =
new CeilingFanOnCommand (ceilingFan);
创建吊扇的开与关
CeilingFanOffCommand ceilingFanOff =
命今。
new CeilingFanOffCommand(ceilingFan);
GarageDoorUpCommand garageDoorUp =
new GarageDoorUpCommand (garageDoor) ;
GarageDoorDownCommand garageDoorDown =
创建车库门的上与下
new GarageDoorDownCommand (garageDoor) ;
命今。
StereoOnWithCDCommand stereoOnWithCD =
new StereoOnWithCDCommand(stereo);
StereooffCommand stereooff
创建音响的开与
new StereooffCommand(stereo);
美命今。
212
第6章
---
## Page 249
命令模式
remoteControl.setCommand(0, 1ivingRoomLightOn, 1ivingRoomLightOff) ;)
remoteControl.setCommand (1, kitchenLightOn, kitchenLightOff);
remoteControl.setCommand (2, ceilingFanOn, ceilingFanOff);
现在已经有了全部
remoteControl.setCommand(3, stereoOnWithCD, stereoOff);
的命今，可以将它
System.out.println (remoteControl) μ
们加载到遥控器插
橙中。
remoteControl.onButtonWasPushed(0) ;
remoteControl ,offButtonWasPushed (0) ;
在这里，使用toStnins(）方法，打印
remoteControl.onButtonWasPushed(1) ;
出每个遥控器的描槽和它被指定
remoteControl.offButtonWasPushed (1) ;
remoteControl.onButtonWasPushed(2) ;
的命今。
remoteControl.offButtonWasPushed (2) ;