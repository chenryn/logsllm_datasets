### Verification of Sub-Version Clusters and Dataset Preparation

We verified sub-version clusters, with each cluster corresponding to a specific version of the malicious payloads. We considered both the VirusTotal family labels and the manually verified sub-version information as the ground truth. Based on this, we prepared 10 experimental datasets. For each dataset, we randomly selected 30 sub-versions from the entire ground truth dataset (e.g., 260 sub-versions) and combined these selected samples into one input dataset. The resulting datasets varied in size due to the different numbers of samples within each individual sub-version. The detailed dataset sizes and sample clustering results for the 10 datasets are presented in Fig. 8.

On average, the sample clustering algorithm separated the input malware samples into 29.9 clusters, which was extremely close to the reference set (i.e., 30 sub-versions). For the 10 experiment datasets, the clustering algorithm achieved an average precision of 0.984 and an average recall of 0.959. The worst precision and recall for clustering multiple malware families were 0.971 and 0.858, respectively, indicating that the clustering system generated consistent and reliable outputs.

### Key Findings for Malicious Payload Analysis

In this section, we report the key findings from the malware sub-version verification process:

#### Significant Library Code Ratio
From the labeled malware datasets, we found that the average library code ratio was greater than 50% for malware samples containing at least one legitimate library. This highlights that existing Android malware similarity analysis methods become ineffective without properly handling library code.

#### Limited Versions of Malicious Payloads
During our experiments, we acquired 260 versions of malicious payloads from 68 labeled malware families while conducting clustering for each family. Among the 68 malware families, 27 had only one version of the malicious payload, and 5 families had more than 10 different versions. For example, Dowgin, the largest malware family, had 23 versions of malicious payloads extracted.

#### Malicious Payloads Under Popular Namespaces
We conducted manual analysis on the extracted malicious payloads and noted that 29% of Android malware families injected their malicious payloads under popular namespaces such as `com.google` and `com.android`, or legitimate advertisement library namespaces like `com.umeng`. Table 3 in the Appendix includes detailed findings for the identified families. Since `com.google` and `com.android` are the main class names used by the Android Open Source Project and Google Mobile Services, such malicious payloads can easily be overlooked.

### Limitations

Our Android malware clustering approach is based on the assumption that malware authors often reuse the same malicious payload to create new malicious samples, and the obfuscated code sequences of the malicious payload would largely remain the same if they are generated by the same obfuscation tool. This is consistent with our findings as listed in Section 6.5. Theoretically, advanced obfuscation techniques (e.g., class encryption or dynamic loading) can eventually break this assumption by generating a new version of a malicious payload for every new malware instance or completely removing the original malicious payload from `classes.dex`. The attack and defense against malware obfuscation is a long-term arms race, and has already been observed in traditional desktop malware analysis.

For example, as observed in desktop malware research [15, 20, 24], independent systems might be desirable to specifically handle the de-obfuscation process. We consider it as a separate pre-processing step for malware analysis and leave a comprehensive solution for advanced obfuscation as an orthogonal problem. Additionally, using dynamic analysis with a sandbox can help further analyze malware. However, dynamic analysis also suffers from its own limitations, such as sandbox evasion and code coverage.

### Conclusion

In this paper, we proposed a practical solution for conducting Android malware clustering. As an internal component, the fingerprint-based library removal technique was used to distinguish between a legitimate library and a bogus library that may share the same library name. Unlike traditional clustering techniques, which examine overall similarity, we achieved Android malware clustering by checking whether the analyzed Android malware samples shared the same version of malicious payload code. Compared to existing malicious payload extraction systems, our approach extracts malicious payloads even if they are injected under popular library namespaces or under existing benign functions, providing a more complete picture of the whole malicious payload. Our comprehensive experimental results demonstrate that our clustering approach generates consistent and reliable outputs with high precision and recall.

### Acknowledgment

This work was partially supported by the U.S. National Science Foundation under Grant No. 1314925, 1622402, and 1717862. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the National Science Foundation.

### References

[References have been omitted for brevity but should be included in the final document.]

### Appendix: Detailed Malicious Payload Mining Results

**Table 3: Malicious Payloads Under Popular Libraries**

| Family         | Popular Class Names Used                                                                 |
|----------------|------------------------------------------------------------------------------------------|
| Nickispy       | `com.google.android.info.SmsInfo`                                                        |
| Uuserv         | `com.google.android.service.UploadService`                                               |
| Fjcon          | `com.uuservice.status.SysCaller.callSilentInstall`                                       |
| Yzhc           | `com.uuservice.status.SilenceTool.MyThread.run`                                          |
| Gumen          | `com.android.XWLauncher.CustomShirtcutActivity`                                          |
|                | `com.android.XWLauncher.InstallShortcutReceiver`                                         |
|                | `com.android.Base.Tools.replace name`                                                    |
|                | `com.android.JawbreakerSuper.Deamon`                                                     |
|                | `com.umeng.adutils.AdsConnect`                                                           |
|                | `com.umeng.adutils.SplashActivity`                                                       |
| Basebridge     | `com.android.sf.dna.Collection`                                                          |
|                | `com.android.battery.a.pa`                                                               |
| Spambot        | `com.android.providers.message.SMSObserver`                                              |
|                | `com.android.providers.message.Utils.sendSms`                                            |
| Moavt          | `com.android.MJSrceen.Activity.BigImageActivity`                                         |
| Zitmo          | `com.android.service.MouaService.InitSms`                                                |
| Mseg           | `com.android.security.SecurityService.onStart`                                           |
|                | `com.android.smon.SecurityReceiver.sendSMS`                                              |
|                | `com.google.vending.CmdReceiver`                                                         |
|                | `android.ad.appoﬀer.Copy 2 of DownloadManager`                                           |
| Droidkungfu    | `com.google.ssearch.SearchService`                                                       |
|                | `com.google.update.UpdateService`                                                        |
| Dowgin         | `com.android.qiushui.app.dmc`                                                            |
| Fakeinst       | `com.android.game.xiaoqiang.jokes.Data9`                                                |
| Ksapp          | `com.googleapi.cover.Actor`                                                              |
| Bankun         | `com.android.shine.MainActivity.proglayss Click`                                         |
| Pjapps         | `com.google.ads.analytics.Googleplay`                                                    |
| Adwo           | `com.google.ads.analytics.ZipDecryptInputStream`                                         |
| Svpeng         | `com.google.game.store.bean.MyConﬁg.getMsg`                                             |
| Opfake         | `com.google.dubest.eight.isAvilible`                                                     |
| Badao          | `com.android.MainService.SMSReceiver`                                                    |
|                | `com.android.main.TANCActivity`                                                          |
|                | `com.android.mmreader1030`                                                              |
|                | `com.google.ads.AdRequest.isTestDevice`                                                  |
|                | `com.adobe.ﬂashplayer .FV.doInBackground`                                                |
|                | `com.adobe.ﬂashplayer .FA.startService`                                                  |
|                | `com.android.appupdate.UpdateService`                                                    |
|                | `com.android.system.SurpriseService`                                                     |
|                | `com.google.android.gmses.MyApp`                                                         |
|                | `com.android.secphone.FileUtil.clearTxt`                                                 |

This table provides a detailed view of the malicious payloads under popular namespaces, highlighting the classes and methods used by various malware families.