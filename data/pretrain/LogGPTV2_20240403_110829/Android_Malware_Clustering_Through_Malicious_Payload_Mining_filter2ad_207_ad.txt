veriﬁed sub-version clusters, and each cluster corresponded to one version of the
malicious payloads.
We considered the VirusTotal family labels together with the manually
veriﬁed sub-version information as ground truth, and prepared 10 experiment
datasets. For each dataset, we randomly selected 30 sub-versions from the entire
ground truth dataset (e.g., 260 sub-versions), then mixed the selected samples
together as one input dataset. The resulting datasets had diﬀerent overall sizes
as each individual sub-version had diﬀerent numbers of samples. The detailed
dataset sizes and sample clustering results for the 10 datasets are presented in
Fig. 8. On average, the sample clustering algorithm separated the input mal-
ware samples into 29.9 clusters, which was extremely close to the reference set
208
Y. Li et al.
(i.e., 30 sub-versions). For the 10 experiment datasets, the clustering algorithm
achieved average precision of 0.984 and average recall of 0.959, the worst precision
and recall for clustering multiple malware families were 0.971 and 0.858, which
suggests that the clustering system generated consistent and reliable outputs.
6.5 Key Findings for Malicious Payload Analysis
In this section, we report the key ﬁndings learned from the malware sub-version
veriﬁcation process.
Signiﬁcant library code ratio: From the labeled malware datasets, we found
that the average library code ratio was larger than 50% for the malware sam-
ples that contained at least one legitimate library. This highlights that existing
Android malware similarity analysis work becomes ineﬀective without properly
handling library code.
Limited versions of malicious payloads: During our experiments, we
acquired 260 versions of malicious payloads from 68 labeled malware families
while conducting clustering of each family. Among the 68 malware families,
27 families had only one version of malicious payload, and 5 families had more
than 10 diﬀerent versions of malicious payloads. For example, Dowgin was the
largest malware family and had 23 versions of malicious payloads extracted.
Malicious payload under popular namespaces: We conducted manual
analysis on the extracted malicious payloads, and noted that 29% of Android
malware families injected their malicious payloads under popular namespaces,
such as com.google and com.android, or legitimate advertisement library
namespaces like com.umeng. Table 3 in Appendix includes the detailed malicious
payload ﬁndings for the identiﬁed families. Since com.google and com.android
are the main class names used by Android Open Source Project and Google
Mobile Services, such malicious payloads can easily get overlooked.
7 Limitation
Our Android malware clustering approach is based on the assumption that mal-
ware authors often reuse the same malicious payload to create new malicious
samples, and the obfuscated code sequences of malicious payload would largely
remain the same if they are generated by the same obfuscation tool. This is con-
sistent with our ﬁndings as listed in Sect. 6.5. Theoretically, advanced obfusca-
tion techniques (e.g., class encryption or dynamic loading) can eventually break
the assumption by generating a new version of a malicious payload for every
new malware instance, or completely removing the original malicious payload
from classes.dex. The attack and defense against malware obfuscation is a
long-term arms race, and has already been observed in the traditional desk-
top malware analysis domain. For example, as observed in desktop malware
research [15,20,24], independent systems might be desirable to speciﬁcally han-
dle the de-obfuscation process. We consider it as a separate pre-processing step
Android Malware Clustering Through Malicious Payload Mining
209
for malware analysis, and leave a comprehensive solution for advanced obfus-
cation as an orthogonal problem. In addition, using dynamic analysis with a
sandbox can help further analyze malware. However, dynamic analysis also suf-
fers from its own limitations, such as sandbox evasion and code coverage.
We believe that the Android malware analysis community can beneﬁt from
our work in several aspects. (a) It oﬀers an alternative malicious payload extrac-
tion approach in which we can extract a more complete version of malicious pay-
loads even if the malicious payloads are injected under popular library names
or under existing functions. (b) It provides a viable solution for conducting
Android malware clustering analysis by checking if malware samples contain
the same version of malicious payloads. (c) Majority of Android malware sam-
ples are not obfuscated or obfuscated by simple obfuscation tools, even for the
samples we collected recently. For example, within the extracted 260 versions
of malicious payloads, we observed 181 of them had plain code, and only 79 of
them used naming obfuscation, which was a simple basic obfuscation technique
being used in practice. (d) As long as there are shared malicious code segments
regardless of obfuscation among the samples from the same malware family,
our algorithm extracts the shared patterns and uses them for deciding malware
clustering output.
8 Related Work
8.1 Android Malware Clustering and App Similarity Analysis
Due to the challenges that are discussed in Sect. 1, existing Android malware
clustering approaches have not been widely adopted yet. ClusTheDroid [17] was
a system for clustering Android malware using 38 features extracted from proﬁles
of reconstructed dynamic behaviors. Samra [25] extracted features from Android
app manifest ﬁles, and could only cluster applications into two categories using
K-means algorithm. Without properly excluding the features or behaviors that
belong to the original benign apps or legitimate libraries, traditional clustering
approaches would not be able to produce promising results.
Similarity analysis is essential for clustering, but existing Android applica-
tion similarity analysis techniques were mainly designed to detect repackaged
apps [11,31,33], and such overall similarity analysis based techniques cannot be
directly applied for Android malware clustering for reasons described in Sect. 1.
SMART [21] proposed a semantic model for Android malware analysis, but was
mainly built for malware detection and classiﬁcation. Both Juxtapp [11] and
our system use n-gram bytecode features and feature hashing [13,14,26] as basic
building blocks. However, Juxtapp excluded library code for further analysis if
the core application component does not directly invoke it, which still couldn’t
diﬀerentiate a legitimate library and a bogus library with the same legitimate
name. Furthermore, directly using Juxtapp to cluster Android malware will suf-
fer the same limitations like other traditional clustering methods as it is based
on overall similarity.
210
Y. Li et al.
8.2 Android Malicious Payload Analysis
Malicious payload identiﬁcation and extraction is essential for Android malware
analysis. Zhou and Jiang [34] manually analyzed malicious payloads of Android
malware and summarized the ﬁndings in the Android Malware Genome project.
DroidAnalytics [32] presented a multi-level signature based analytics system to
examine and associate repackaged Android malware. MassVet [5] analyzed graph
similarity at the function level and extracted the shared non-legitimate func-
tions as malicious payloads through commonality and diﬀerential analysis, and
it applied a whitelist to exclude legitimate library code from analysis.
MassVet [5] is close to our work in that both extract malicious payloads
from Android malware. However, similar to existing Android malware analysis
work [4–6,8,10], MassVet simply used library name based whitelists to exclude
popular library code, which can result in the failure of malicious payload extrac-
tion, and lead to false negatives in malware detection if malicious payloads are
injected under popular library namespaces. In addition, due to the function
level payload granularity of MassVet, it can not be easily designed to achieve
payload-sharing based Android malware clustering, since the same function could
be shared by diﬀerent malware families, and the malware samples from the
same family usually share multiple functions at the same time. Last but not
least, MassVet won’t be able to extract malicious payload injected under exist-
ing functions, while the instruction level payload granularity designed by our
approach enables us to precisely identify one version of malicious payload from
each Android malware, which includes all of the malicious components even if
they are injected in existing functions or across diﬀerent functions.
9 Conclusion
In this paper, we proposed a practical solution to conduct Android malware clus-
tering. As an internal component, the ﬁngerprint based library removal technique
was used to distinguish a legitimate library and a bogus library that may share
the same library name. Unlike traditional clustering techniques which exam-
ine the overall similarity, we achieved Android malware clustering by checking
whether the analyzed Android malware samples shared the same version of mali-
cious payload code. Compared with existing malicious payload extraction sys-
tem, our approach extracts malicious payloads even if they were injected under
popular library namespaces or under existing benign functions, and it provides
a more complete picture of the whole malicious payload. Our comprehensive
experimental results demonstrate that our clustering approach generates consis-
tent and reliable outputs with high precision and recall.
Acknowledgment. This work was partially supported by the U.S. National Science
Foundation under Grant No. 1314925, 1622402 and 1717862. Any opinions, ﬁndings and
conclusions or recommendations expressed in this material are those of the authors and
do not necessarily reﬂect the views of the National Science Foundation.
Android Malware Clustering Through Malicious Payload Mining
211
References
1. Allix, K., Bissyand´e, T.F., Klein, J., Le Traon, Y.: Androzoo: collecting millions of
android apps for the research community. In: Proceedings of the 13th International
Conference on Mining Software Repositories, pp. 468–471. ACM (2016)
2. Bayer, U., Comparetti, P.M., Hlauschek, C., Kruegel, C., Kirda, E.: Scalable,
behavior-based malware clustering. NDSS 9, 8–11 (2009)
3. Broder, A.Z.: On the resemblance and containment of documents. In: Compression
and Complexity of Sequences 1997, Proceedings, pp. 21–29. IEEE (1997)
4. Chen, K., Liu, P., Zhang, Y.: Achieving accuracy and scalability simultaneously
in detecting application clones on android markets. In: Proceedings of the 36th
International Conference on Software Engineering, pp. 175–186. ACM (2014)
5. Chen, K., Wang, P., Lee, Y., Wang, X., Zhang, N., Huang, H., Zou, W., Liu,
P.: Finding unknown malice in 10 seconds: mass vetting for new threats at the
Google-play scale. In: USENIX Security Symposium, vol. 15 (2015)
6. Crussell, J., Gibler, C., Chen, H.: Attack of the clones: detecting cloned applica-
tions on android markets. In: Foresti, S., Yung, M., Martinelli, F. (eds.) ESORICS
2012. LNCS, vol. 7459, pp. 37–54. Springer, Heidelberg (2012). doi:10.1007/
978-3-642-33167-1 3
7. Dexdump (2015). http://developer.android.com/tools/help/index.html
8. Egele, M., Brumley, D., Fratantonio, Y., Kruegel, C.: An empirical study of crypto-
graphic misuse in android applications. In: Proceedings of the 2013 ACM SIGSAC
Conference on Computer & Communications Security, pp. 73–84. ACM (2013)
9. Fowler, G., Noll, L.C., Vo, K.P.: Fnv hash (2015). http://www.isthe.com/chongo/
tech/comp/fnv/
10. Grace, M., Zhou, Y., Zhang, Q., Zou, S., Jiang, X.: Riskranker: scalable and accu-
rate zero-day android malware detection. In: Proceedings of the 10th International
Conference on Mobile Systems, Applications, and Services, pp. 281–294. ACM
(2012)
11. Hanna, S., Huang, L., Wu, E., Li, S., Chen, C., Song, D.: Juxtapp: a scalable system
for detecting code reuse among android applications. In: Flegel, U., Markatos,
E., Robertson, W. (eds.) DIMVA 2012. LNCS, vol. 7591, pp. 62–81. Springer,
Heidelberg (2013). doi:10.1007/978-3-642-37300-8 4
12. Hu, X., Shin, K.G.: DUET: integration of dynamic and static analyses for malware
clustering with cluster ensembles. In: Annual Computer Security Applications Con-
ference (2013)
13. Hu, X., Shin, K.G., Bhatkar, S., Griﬃn, K.: Mutantx-s: scalable malware clustering
based on static features. In: USENIX Annual Technical Conference, pp. 187–198
(2013)
14. Jang, J., Brumley, D., Venkataraman, S.: Bitshred: feature hashing malware for
scalable triage and semantic analysis. In: Proceedings of the 18th ACM Conference
on Computer and Communications Security, pp. 309–320. ACM (2011)
15. Kang, M.G., Poosankam, P., Yin, H.: Renovo: a hidden code extractor for packed
executables. In: Proceedings of the 2007 ACM Workshop on Recurring Malcode,
pp. 46–53. ACM (2007)
16. Kim, J., Krishnapuram, R., Dav´e, R.: Application of the least trimmed squares
technique to prototype-based clustering. Pattern Recognit. Lett. 17(6), 633–641
(1996)
212
Y. Li et al.
17. Korczynski, D.: ClusTheDroid: clustering android malware. Master’s thesis, Royal
Holloway University of London (2015)
18. Leskovec, J., Rajaraman, A., Ullman, J.D.: Mining of Massive Datasets. Cambridge
University Press, Cambridge (2014)
19. Li, Y., Sundaramurthy, S.C., Bardas, A.G., Ou, X., Caragea, D., Hu, X., Jang, J.:
Experimental study of fuzzy hashing in malware clustering analysis. In: Proceed-
ings of the 8th USENIX Conference on Cyber Security Experimentation and Test,
p. 8. USENIX Association (2015)
20. Martignoni, L., Christodorescu, M., Jha, S.: Omniunpack: fast, generic, and safe
unpacking of malware. In: Twenty-Third Annual Computer Security Applications
Conference (ACSAC 2007), pp. 431–441. IEEE (2007)
21. Meng, G., Xue, Y., Xu, Z., Liu, Y., Zhang, J., Narayanan, A.: Semantic modelling of
android malware for eﬀective malware comprehension, detection, and classiﬁcation.
In: Proceedings of the 25th International Symposium on Software Testing and
Analysis, pp. 306–317. ACM (2016)
22. Rieck, K., Trinius, P., Willems, C., Holz, T.: Automatic analysis of malware behav-
ior using machine learning. J. Comput. Secur. 19(4), 639–668 (2011)
23. Roberts, J.: VirusShare.com (2015). http://virusshare.com/
24. Royal, P., Halpin, M., Dagon, D., Edmonds, R., Lee, W.: Polyunpack: automat-
ing the hidden-code extraction of unpack-executing malware. In: Proceedings of
the 22nd Annual Computer Security Applications Conference, pp. 289–300. IEEE
Computer Society (2006)
25. Samra, A.A.A., Yim, K., Ghanem, O.A.: Analysis of clustering technique in android
malware detection. In: 2013 Seventh International Conference on Innovative Mobile
and Internet Services in Ubiquitous Computing (IMIS), pp. 729–733. IEEE (2013)
26. Santos, I., Nieves, J., Bringas, P.G.: Semi-supervised learning for unknown malware
detection. In: Abraham, A., Corchado, M., Gonz´alez, S.R., De Paz Santana, J.F.
(eds.) International Symposium on Distributed Computing and Artiﬁcial Intelli-
gence. Advances in Intelligent and Soft Computing, vol. 91, pp. 415–422. Springer,
Heidelberg (2011)
27. Sebasti´an, M., Rivera, R., Kotzias, P., Caballero, J.: AVclass: a tool for massive
malware labeling. In: Monrose, F., Dacier, M., Blanc, G., Garcia-Alfaro, J. (eds.)
RAID 2016. LNCS, vol. 9854, pp. 230–253. Springer, Cham (2016). doi:10.1007/
978-3-319-45719-2 11
28. Snell, B.: Mobile threat report, what’s on the horizon for 2016 (2016). http://www.
mcafee.com/us/resources/reports/rp-mobile-threat-report-2016.pdf
29. Virustotal (2017). https://www.virustotal.com
30. Ye, Y., Li, T., Chen, Y., Jiang, Q.: Automatic malware categorization using cluster
ensemble. In: ACM SIGKDD International Conference on Knowledge Discovery
and Data mining (2010)
31. Zhang, F., Huang, H., Zhu, S., Wu, D., Liu, P.: Viewdroid: towards obfuscation-
resilient mobile application repackaging detection. In: Proceedings of the 2014
ACM Conference on Security and Privacy in Wireless & Mobile Networks, pp.
25–36. ACM (2014)
Android Malware Clustering Through Malicious Payload Mining
213
32. Zheng, M., Sun, M., Lui, J.: DroidAnalytics: a signature based analytic system
to collect, extract, analyze and associate Android malware. In: 2013 12th IEEE
International Conference on Trust, Security and Privacy in Computing and Com-
munications (TrustCom), pp. 163–171. IEEE (2013)
33. Zhou, W., Zhou, Y., Jiang, X., Ning, P.: Detecting repackaged smartphone appli-
cations in third-party Android marketplaces. In: Proceedings of the Second ACM
Conference on Data and Application Security and Privacy, pp. 317–326. ACM
(2012)
34. Zhou, Y., Jiang, X.: Dissecting android malware: characterization and evolution.
In: 2012 IEEE Symposium on Security and Privacy (SP), pp. 95–109. IEEE (2012)
214
Y. Li et al.
A Detailed malicious payload mining results
Table 3. Malicious payload under popular libraries
Family
Popular class names used
Nickispy
Uuserv
Fjcon
Yzhc
Gumen
com.google.android.info.SmsInfo
com.google.android.service.UploadService
com.uuservice.status.SysCaller.callSilentInstall
com.uuservice.status.SilenceTool.MyThread.run
com.android.XWLauncher.CustomShirtcutActivity
com.android.XWLauncher.InstallShortcutReceiver
com.android.Base.Tools.replace name
com.android.JawbreakerSuper.Deamon
com.umeng.adutils.AdsConnect
com.umeng.adutils.SplashActivity
Basebridge
com.android.sf.dna.Collection
com.android.battery.a.pa
Spambot
com.android.providers.message.SMSObserver
com.android.providers.message.Utils.sendSms
Moavt
Zitmo
Mseg
com.android.MJSrceen.Activity.BigImageActivity
com.android.service.MouaService.InitSms
com.android.security.SecurityService.onStart
com.android.smon.SecurityReceiver.sendSMS
com.google.vending.CmdReceiver
android.ad.appoﬀer.Copy 2 of DownloadManager
Droidkungfu
com.google.ssearch.SearchService
com.google.update.UpdateService
Dowgin
Fakeinst
Ksapp
Bankun
Pjapps
Adwo
Svpeng
Opfake
Badao
com.android.qiushui.app.dmc
com.android.game.xiaoqiang.jokes.Data9
com.googleapi.cover.Actor
com.android.shine.MainActivity.proglayss Click
com.google.ads.analytics.Googleplay
com.google.ads.analytics.ZipDecryptInputStream
com.google.game.store.bean.MyConﬁg.getMsg
com.google.dubest.eight.isAvilible
com.android.MainService.SMSReceiver
com.android.main.TANCActivity
com.android.mmreader1030
com.google.ads.AdRequest.isTestDevice
com.adobe.ﬂashplayer .FV.doInBackground
com.adobe.ﬂashplayer .FA.startService
com.android.appupdate.UpdateService
com.android.system.SurpriseService
com.google.android.gmses.MyApp
com.android.secphone.FileUtil.clearTxt