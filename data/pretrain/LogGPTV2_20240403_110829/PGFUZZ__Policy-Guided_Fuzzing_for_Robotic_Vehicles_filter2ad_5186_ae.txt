Physical effect
Unstable
attitude
Software
crash
A.ALT_HOLD2
A.FLIP1
A.FLIP1
A.ALT_HOLD2
A.GPS.FS2
A.LOITER1
A.CHUTE1
A.RC.FS1
A.RC.FS2
A.ALIVE
Total (ArduPilot)
PX.ALIVE
PX.GPS.FS1
PX.GPS.FS2
PX.HOLD1
PX.TAKEOFF1
Total (PX4)
PP.HOVERC
PP.HOVERZ
Total (Paparazzi)
Total (all)
7
1
1
1
8
1
1
1
82
103
8
2
2
23
1
36
10
7
17
156
2
2
4
20
20
10
7
17
41
5
1
1
1
1
1
1
1
5
17
2
2
1
1
6
0
23
4
1
1
6
9
9
4
1
5
20
4
4
13
13
6
2
8
25
82
82
8
8
0
90
5
77
82
2
2
0
84
0
8
8
0
8
Unexpected
behavior
3
1
1
3
1
1
1
11
2
2
1
1
6
4
4
21
TABLE VII: Summary of found 156 previously unknown bugs in the three popular flight control software. PGFUZZ found 103 previously
unknown bugs in ArduPilot, 36 in PX4, and 17 in Paparazzi. (The policy descriptions are given in Appendix E.)
work properly either under normal or in a particular situation after
developers implement the feature. For instance, PX4 fails to trigger
a GPS fail-safe mode in specific flight modes. (3) “Unimplemented”
bugs refer to unimplemented sensor failure handling conditions
though these are mentioned in their documents. We found such
bugs, particularly in PX4. (4) “No checking valid range” bugs
mean that valid ranges of configuration parameters are not checked.
For instance, a vehicle yields a floating-point exception when
the ATC_RATE_R_MAX parameter is assigned to a value out of its
predefined range. The identified policy violations cause different
undesired behaviors in the vehicles, as shown in the Table VII
“Physical effect” column. We divide the physical effects of the
bugs into four categories. (1) “Crash on the ground” represents
the vehicle that loses its attitude control and then sends a free fall
warning message to the GCS. (2) “Software crash” happens when
the flight control software crashes due to a floating-point exception.
(3) “Unstable attitude” represents a vehicle having a fluctuating
attitude. (4) “Unexpected behavior” represents all the other issues,
including non-checking preconditions to change vehicle states (Sec-
tion VII-C1), failing to stay at the same altitude (Section VII-C2),
wrongly calculated altitude after acrobatic flying (Section VII-C3),
and failing to trigger a fail-safe mode (Section VII-C4).
Analysis of Bugs. We refer to the “misimplemented” and
“unimplemented” categories in Table VII as logic bugs. Out of 156
bugs, PGFUZZ detected 31 (19.9%) logic bugs. The “broad valid
range” and “no checking valid range” bugs involve input validation
and memory safety bugs. We consider an input validation bug as
a memory safety bug when it causes memory corruption. PGFUZZ
detected 90 (57.7%) memory safety bugs and 35 (22.4%) input
validation bugs. Lastly, we refer to the identified bugs as harmless
when they do not cause a crash, unstable attitude, and incorrect
altitude. For instance, assigning wrongly converted angles to a
camera gimbal does not lead to any operational effect on the vehicle.
PGFUZZ detected 11 (7.05%) harmless bugs out of 156 bugs.
False Positives. We found a set of input combinations cause false
positives in the violated policies. For instance, when PGFUZZ
assigns zero to SIM_ENGINE_MUL parameter in ArduPilot, the
simulator turns off the vehicle’s engine, which leads to a policy
Input types causing bugs
# of bugs
InputP
InputC
InputE
InputP and InputC
InputP and InputE
InputP, InputC, and InputE
Total
120
10
2
20
3
1
156
TABLE VIII: Required input types to trigger bugs. InputP,
InputC, and InputE represent configuration parameters, user
commands, and environmental factors.
violation. We exclude such inputs (InputC, InputP, and InputE)
from our analysis. Further, we found that a vehicle might crash on
the ground and violate policies while PGFUZZ operates the vehicle
too acrobatically. Thus, we also limit inputs leading the acrobatic
operations (Detailed in Appendix C).
Analysis of Input Types. Each policy violation is triggered by
different types of inputs. Table VIII presents the number of bugs
caused by different input types. This analysis details the capabilities
that an adversary requires to trigger a bug. More specifically, an
adversary who can change one of the configuration parameters,
user commands, or environmental factors is able to trigger 132 out
of 156 bugs. Additionally, 23 bugs require changing two types of
inputs, and only one bug requires control over three types of inputs.
Comparison of PGFUZZ with no Policy-guided Mutation. We
compare the results of PGFUZZ with fuzzing without using policy
guided mutation with (a) excluded input space from the profiling
engine, i.e., inputs unrelated to policies, (b) full input space, and
(c) reduced input space. In all cases, inputs are randomly sampled
from the input space. Figure 8 compares the results of PGFUZZ
with (a), (b), and (c), the time vs. the cumulative number of found
bugs overtime on the three systems. PGFUZZ found the 156 bugs7
in about 48 hours. The fuzzing with no policy guided mutation and
the excluded input space, i.e., in the case of (a), we found only 21
7We note that the total number of bugs 156 does not include the 21 bugs found
by the excluded input space.
11
# of bugs
ArduPilot
PX4
Paparazzi
Total
103
36
17
156
# of acknowledged
bugs
79
27
0
106
# of bugs
will be patched
# of patched
bugs
5
21
0
26
3
6
0
9
TABLE IX: Results of responsible disclosure.
Fig. 8: Results of fuzzing based on our guidance and minimized
input space in ArduPilot, PX4, and Paparazzi.
bugs, in the case of (b), we found 36 bugs, and in the case of (c),
we found 63 bugs. All identified bugs in the case (a), (b), and (c)
are floating-point exceptions.
Accuracy of the Minimized Input Space. PGFUZZ reduces
original input space to a minimized space related to policies (See
Table III and Table IV). If many bugs are triggered by inputs
excluded by the profiling engine ( 4 in Figure 2), PGFUZZ may
miss bugs because it does not mutate inputs from the excluded
input space. However, the excluded input space leads to a total of
21 floating-point exception bugs, as shown in Figure 8. Therefore,
the reduced input space is still effective at finding the bugs due to
mainly two reasons. First, the excluded inputs do not affect physical
states related to the policies. For instance, 132 configuration
parameters in ArduPilot are for on-screen displays on a GCS; thus,
they do not affect the vehicle’s physical states. Second, most of
the excluded inputs are self-sabotaging. For instance, GPIO pin
configurations and commands for turning off actuators. While these
inputs lead to abnormal behaviors, we do not consider these cases as
policy violations/bugs, as discussed in our threat model (Section III).
Comparison of PGFUZZ with RVFuzzer. A recent testing
system, RVFuzzer [41], discovers input validation bugs in RV
control programs. Specifically, RVFuzzer only fuzzes configuration
parameters and a single environmental factor wind to find control
instability bugs, e.g., unstable attitude or deviation from a flight
path. We contacted RVFuzzer’s authors to determine how many
of the bugs reported by PGFUZZ can be discovered by RVFuzzer.
RVFuzzer could find 28 out of 156 bugs. Three reasons prevent
RVFuzzer from detecting the 128 bugs that PGFUZZ reported.
First, if a policy violation does not affect the vehicle’s attitude
and flight path, RVFuzzer cannot detect the violation because
RVFuzzer only uses one policy that defines the stable attitude and
a correct flight path. For example, the aforementioned parachute
requires the flight control software to check some preconditions
to deploy the parachute. However, these conditions, which leads
to unsafe states, are not checked by RVFuzzer. Second, some bugs
are only disclosed with user commands, environmental factors, and
configuration parameters (Section VII-C). However, RVFuzzer only
mutates inputs for the configuration parameters. Lastly, RVFuzzer
cannot discover a set of bugs due to its limited binary search-based
algorithm [40]. For instance, PSC_ACC_XY_FILT has 2.0 as default
value. The vehicle does not show any unsafe state when it has 0 and
2.0. In this case, RVFuzzer concludes that [0,2] is a safe valid range.
However, the vehicle leads to an unstable attitude and even crashes
on the ground when PGFUZZ assigns 0.0001 to the parameter.
Responsible Disclosure. We reported the identified bugs to the
vendors (development teams of RV software). 106 bugs out of the
total 156 bugs have been acknowledged by developers. Table IX
details the bugs for each flight control software whether they are
patched/will be patched. We categorize the 106 confirmed bugs into
(a) Changed roll with the parachute
under ALT_HOLD mode.
(b) Changed roll with the parachute
under FLIP mode.
(c) Changed pitch with the
parachute under ALT_HOLD mode.
Fig. 9: The changed attitudes with the parachute. The red, green,
and blue areas on the figures denote the released parachute, FLIP
mode, and landed on the ground, respectively.
(d) Changed pitch with the
parachute under FLIP mode.
four categories based on their physical impact on the vehicle, as
detailed in Table VII. (1) 6 bugs cause crashes on the ground,
(2) 74 bug causes software crashes, (3) 9 bug causes unstable
attitudes (i.e., unstable roll, pitch, and yaw), and (4) 17 bugs cause
unexpected behaviors (i.e., deviating from assigned missions). At
the time of writing, 9 software crash bugs have been patched, and
26 of the bugs are confirmed and will be patched. The remaining 71
bugs are software crash issues in ArduPilot. The root cause of the
71 bugs is that ArduPilot does not check whether some parameters
are within their valid ranges (although these ranges are stated in the
documentation). These missing checks lead to floating-point excep-
tions when they are assigned to too large, too small, or zero values.
Based on the feedback we got from the developers, they stated
that users are responsible for assigning values to these parameters.
For now, they do not consider code updates to prevent users from
assigning unsafe values to the reported parameters. They stated that