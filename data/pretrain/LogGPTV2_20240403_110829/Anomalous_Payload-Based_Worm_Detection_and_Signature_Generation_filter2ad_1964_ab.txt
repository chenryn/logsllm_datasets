fashion  similar  to  Autograph,  For  each  packet,  the  substrings  computed  by  Rabin 
fingerprints are inserted into a frequency count table, incrementing a count field each 
time the substrings are encountered. The information about source and destination IPs 
is  recorded.  The  table  is  stored  in  rank  order  by  the  frequency  counts  so  that  it 
produces  the  set  of  likely  worm  traffic.  This  system  measures  the  prevalence  of  all 
common  content  in  the  network  and  then  applies  IP  address  dispersion,  counting 
distinct  source  and  destination  IPs  for  each  suspicious  content,  in  order  to  keep  the 
false  positive  rate  small.  This  system  is  not  used  in  collaboration  between  multiple 
sensors; it has been developed as a centralized system. 
Anomalous Payload-Based Worm Detection and Signature Generation 
231 
Each  of  the  aforementioned  projects  are  based  on  detecting  frequently  occurring 
payloads delivered by a source IP that is “suspicious”, either because the connection 
targeted  dark  IP  space  or  the  source  IP  address  exhibited  pre-scanning  behavior. 
These approaches imply that the detection occurs some time after the propagation of 
the worm has executed. Unlike these approaches, PAYL does not depend on scanning 
behavior  and  payload  prevalence.  PAYL  detects  anomalous  payloads  immediately, 
and  detects  the  first  propagation  attempt  of  the  worms  by  correlating  ingress/egress 
packet content alerts. PAYL has also been put to use in a system that automatically 
generates patches in a sandbox version of vulnerable software systems. See [14] for 
complete details. A  more general discussion of related  work in the area of anomaly 
detection can be found in [20]. 
3   Payload Based Anomaly Detection 
3.1   Overview of the PAYL Sensor 
The  PAYL  sensor  is  based  on  the  principle  that  zero-day  attacks  are  delivered  in 
packets whose data is unusual and distinct from all prior “normal content” flowing to 
or from the victim site. We assume that the packet content is available to the sensor 
for modeling2. We compute a normal profile of a site’s unique content flow, and use 
this information to detect anomalous data. A “profile” is a model or a set of models 
that represent the set of data seen during training. Since we are profiling content data 
flows, the method must be general to work across all sites and all services, and it must 
be efficient and accurate. Our initial design of PAYL uses a “language independent” 
methodology, the statistical distribution of n-grams [2] extracted from network packet 
datagrams. This methodology requires no parsing, no interpretation and no emulation 
of the content. 
An n-gram is the sequence of n adjacent byte values in a packet payload. A sliding 
window  with  width  n  is  passed  over  the  whole  payload  one  byte  at  a  time  and  the 
frequency of each n-gram is computed. This frequency count distribution represents a 
statistical centroid or model of the content flow. The normalized average frequency and 
the  variance of each gram  are computed. The first implementation of PAYL  uses  the 
byte  value  distribution  when  n=1.  The  statistical  means  and  variances  of  the  
1-grams are stored in two 256-element vectors. However, we condition a distinct model 
on the port (or service) and on packet length, producing a set of statistical centroids that 
in total provides a fine-grained, compact and effective model of a site’s actual content 
flow. Full details of this method and its effectiveness are described in [20]. 
The first packet of CRII illustrates the 1-gram data representation implemented in 
PAYL.  Figure  1  shows  a  portion  of  the  CRII  packet,  and  its  computed  byte  value 
distribution  along  with  the  rank  ordered  distribution  is  displayed  in  Figure  2,  from 
which  we  extract  a  Z-string.  The  Z-string  is  a  the  string  of  distinct  bytes  whose 
frequency in the data is ordered from most frequent to least, serving as representative  
2  Encrypted  channels  can  be  treated  separately  in  various  ways,  such  as  the  use  of  a  host-
sensor that captures content at the point of decryption, or by using a decryption/re-encryption 
proxy server. For the present paper, we simply assume the data is available for modeling. 
232 
K. Wang, G. Cretu, and S.J. Stolfo 
GET./default.ida?XXXXXXXXXXX
XXXXXXXXXXXXXXXXXXXXXX
XXXXXXXXXXXXXXXXXXXXXX
XXXXXXXXXXXXXXXXXXXXXX
XXXXXXXXXXXXXXXXXXXXXX
XXXXXXXXXXXXXXXXXXXXXX
XXXXXXXXXXXXXXXXXXXXXX
XXXXXX%u9090%u6858%ucbd3%u7
801%u9090%u6858%ucbd3%u7801%u
9090%u6858%ucbd3%u7801%u9090%
u9090%u8190%u00c3%u0003%u8b00
%u531b%u53ff%u0078%u0000%u0 
Fig.  1.  A  portion  of  the  first  packet  of 
CodeRed II 
Fig.  2.  CRII  payload  distribution  (top  plot) 
and its rank order distribution (bottom plot) 
of  the  entire  distribution,  ignoring  those  byte  values  that  do  not  appear  in  the  data. 
The rank ordered distribution appears similar to the Zipf distribution, and hence the 
name Z-string. The Z-string representation provides a privacy-preserving summary of 
payload that may be exchanged between domains without revealing the true content. 
Z-strings  are  not  used  for  detection,  but  rather  for  message  exchange  and  cross 
domain correlation of alerts. We describe this further in section 5. 
To  compare  the  similarity  between  test  data  at  detection  time  and  the  trained 
models  computed  during  the  training  period,  PAYL  uses  simplified  Mahalanobis 
distance [20]. Mahalanobis distance weights each variable, the mean frequency of a 
1-gram, by its standard deviation and covariance. The distance values produced by the 
models are then subjected to a threshold test. If the distance of a test datum is greater 
than the threshold, PAYL issues an alert for the packet. There is a distinct threshold 
setting for each centroid computed automatically by PAYL during a calibration step. 
To calibrate the sensor, a sample of test data is measured against the centroids and an 
initial threshold setting is chosen. A subsequent round of testing of new data updates 
the threshold settings to calibrate the sensor to the operating environment. Once this 
step  converges,  PAYL  is  ready  to  enter  detection  mode.  Although  the  very  initial 
results of testing PAYL looked quite promising, we devised several improvements to 
the modeling technique to reduce the percentage of false positives.  
3.2   New PAYL Features: Multiple Centroids 
PAYL  is  a  fully  automatic,  “hands-free”  online  anomaly  detection  sensor.  It  trains 
models  and  determines  when  they  are  stable;  it  is  self-calibrating,  automatically 
observes itself, and updates its models as warranted. The most important new feature 
implemented  in  PAYL  over  our  prior  work  is  the  use  of  multiple  centroids,  and 
ingress/egress correlation. In the first implementation, PAYL computes one centroid 
per length bin, followed by a stage of clustering similar centroids across neighboring 
bins. We previously computed a model Mij for each specific observed packet payload 
ij , k≥1. 
length i of each port j. In this newer version, we compute a set of models Mk
Hence,  within  each  length  bin,  multiple  models  are  computed  prior  to  a  final 
clustering stage. The clustering is now executed across centroids within a length bin, 
Anomalous Payload-Based Worm Detection and Signature Generation 
233 
and  then  again  across  neighboring  length  bins.  This  two  stage  clustering  strategy 
substantially reduces the memory requirements for models while representing normal 
content flow more accurately and revealing anomalous data with greater clarity. 
Since there might be different types of payload sent to the same service, e.g., pure 
text,  .pdf,  or  .jpg,  we  used  an  incremental  online  clustering  algorithm  to  create 
multiple centroids to model the traffic with finer granularity. This modeling idea can 
be extended to include centroids for different media that may be transmitted in packet 
flows.  Different  file  and  media  types  follow  their  own  characteristic  1-gram 
distribution; including models for standard file types can help reduce false positives. 
(See [8] for a detailed analysis of this approach.)   
The multi-centroid strategy requires a different test  methodology. During testing, 
an  alert  will  be  generated  by  PAYL  if  a  test  packet  matches  none  of  the  centroids 
within  its  length  bin.  The  multi-centroid  technique  produces  more  accurate  payload 
models and separates the anomalous payloads in a more precise manner.  
3.3   Data Diversity Across Sites  
A  crucial  issue  we  study  is  whether  or  not  payload  models  are  truly  distinct  across 
multiple  sites.  This  is  an  important  question  in  a  collaborative  security  context.  We 
have claimed that the monoculture problem applies not only to common services and 
applications, but also  to  security  technologies. Hence,  if  a site  is blind  to  a  zero-day 
attack this implies that many other sites are blind to the same attack. Researchers are 
considering  solutions  to  the  monoculture  problem  by  various  techniques  that 
“diversify” implementations. We conjecture that the content data flow among different 
sites  is  already  diverse  even  when  running  the  exact  same  services.  In  our  previous 
work  we have shown that byte distributions differ for each port and length. We also 
conjecture  that  it  should  be  different  for  each  host.  For  example,  each  web  server 
contains different URLs,  implements  different  functionality  like  web  email or  media 
uploads,  and  the population of  service  requests and  responses  sent  to and  from  each 
site may differ, producing a diverse set of content profiles across all collaborating hosts 
and  sites.  Hence,  each  host  or  site’s  profile  will  be  substantially  different  from  all 
others. A zero-day attack that may appear as normal data at one site, will likely not 
appear  as  normal  data  at  other  sites  since  the  normal  profiles  are  different.  We  test 
whether or not this conjecture is true by several experiments.  
One of the most difficult aspects of doing research in this area is the lack of real-
world  datasets  available  to  researchers  that  have  full  packet  content  for  formal 
scientific  study3.  Privacy  policies  typically  prevent  sites  from  sharing  their  content 
data. However, we were able to use data from three sources, and show the distribution 
for each. The first one is an external commercial organization that wishes to remain 
anonymous,  which  we  call  EX.  The  others  are  the  two  web  servers  of  the  CS 
Department of Columbia, www.cs.columbia.edu and www1.cs.columbia.edu; we call 
these two datasets W and W1, respectively. The following plots show the profiles of 
the traffic content flow of each site. 
3  Fortunately,  HS  ARPA  is  working  to  provide  data  to  researchers  through  the  PREDICT 
project; see www.predict.org.  
234 
K. Wang, G. Cretu, and S.J. Stolfo 
Fig. 3. Example byte distribution for payload 
length 249 of port 80 for the three sites EX, 
W, W1, in order from top to bottom  
Fig. 4. Example byte distribution for payload 
length  of  1380  of  port  80  for  the  three  sites 
EX, W, W1 
The plots display the payload distributions for different packet payload lengths i.e. 
249  bytes  and  1380  bytes,  spanning  the  whole  range  of  possible  payload  lengths  in 
order to give a general view of the diversity of the data coming from the three sites. 
Each byte distribution corresponds to the first centroid that is built for the respective 
payload lengths. We observe from the above plots that there is a visible difference in 
the byte distributions among the sites for the same length bin. This is confirmed by 
the  values  of  Manhattan  distances  computed  between  the  distributions,  with  results 
displayed in Table 1. 
Table  1. The Manhattan distance between the byte distributions of the profiles computed for 
the three sites, for three length bins  
MD(EX, W) 
MD(EX,W1) 
MD(W,W1) 
249 bytes 
940 bytes 
1380 bytes 
0.4841 
0.3710 
0.3689 
0.6723 
0.8120 
0.5972 