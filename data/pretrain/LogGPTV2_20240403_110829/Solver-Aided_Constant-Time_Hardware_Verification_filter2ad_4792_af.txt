### User Study Results

**Figure 13: Results of the User Study**

The participants were divided into two equally sized groups: 
- **Test Group (Fig. 13a)**: Using Xenon
- **Control Group (Fig. 13b)**: Using Iodine

Participants were asked to find assumptions for three Iodine benchmarks: ALU, FPU, and RISC-V. Both groups were given 40 minutes to complete the tasks. For each task, we recorded:
- **Time**: Time taken to complete the task in minutes.
- **Size**: Number of annotations in the solution set.
- **Crt**: Whether the solution was correct.

We rejected solutions for ALU and FPU if they contained assumptions about operands, and for RISC-V if they contained assumptions about memory or the register file. We report the average (ùúá) and standard deviation (ùúé) of all completed runs, including those with wrong solutions. ùúá‚àó and ùúé‚àó show the average and standard deviation for only the correct runs. Finally, we report the overall number of correctly completed tasks (#Crt).

On average, participants in the test group using Xenon completed 2.6 tasks, while those in the control group using Iodine completed 1.4 tasks within the 40-minute trial. This indicates that using Xenon has a very large (ùëë = 1.62), statistically significant (ùë° (8) = 2.56, ùëù = .016) positive effect on correct completion.

### Secrecy Assumptions: Internal Processor State

While top-level assumptions about IO behavior are relatively easy to find, proving constant-time execution also requires more challenging assumptions about processor internals. These assumptions encode constraints on the types of programs that can be safely executed on the processor. Figure 15 shows the assumptions for SCARV‚Äôs pipeline module. Xenon discovers classic constant-time assumptions stating that control-flow (Lines 4 and 5) and memory-trace (Line 7) are secret-independent. Similarly, memory stalls (Line 9), instruction validity (Line 11), and the computed ùúáop (Line 13) must not depend on secrets.

Xenon also discovers system-level assumptions not commonly associated with constant-time programming. For example, access errors for control and status (CSR) registers (Line 15) must not depend on secrets, and the timing of when to return from machine-mode (Line 17) and traps (Lines 21 and 22) must be public. Additionally, the configuration register of SCARV‚Äôs leakage fence instruction (Line 19) must not be set based on secrets, as different configurations flush different parts of the pipeline and may incur different delays.

### Constant-Time Subset of Instructions

The above assumptions are satisfied when the instructions run on SCAR-V are limited to the arithmetic and bitwise-logic subset of RISC-V. Instructions must be valid, i.e., properly encoded; even division is constant-time.

### Limitations and Future Work

#### Assumptions about Data
Xenon currently only discovers secrecy assumptions, i.e., whether a given value is public or private. It may be beneficial to also discover assumptions about data (e.g., that a certain flag is always set). In future work, we would like to explore how to combine Xenon‚Äôs assumption synthesis method with techniques for inferring data preconditions [38, 74].

#### Minimality of Assumptions
Xenon inherits the limitations of the underlying Horn solver (¬ß 3). An assumption set could be sufficient to ensure constant-time execution of the circuit, but the solver may be unable to prove it. The minimality of our assumption set (¬ß 7) is relative to the solver and could potentially be improved with more precise solving methods, at the cost of reduced interactivity and scalability. As future work, one could use fast over-approximating solvers in the assumption discovery phase of our verification method (¬ß 7), and then slower, more precise solvers to minimize the assumption set after bootstrapping.

#### Mapping Back to Software
Xenon discovers an assumption set that ensures constant-time execution of the verified design. However, it leaves open the question of how to map these assumptions back into proof obligations on software. The assumption set Xenon discovered for SCARV (¬ß 7) suggests that this might require a whole-system effort that goes beyond current practices of constant-time programming. We hope that open-sourcing assumptions for SCARV will help future research efforts in this direction.

#### Guarantees on Synthesized Circuits
Finally, we prove constant-time at the Verilog level, which is convenient for error localization but does not ensure that guarantees carry over to the generated circuits. Proofs are guaranteed to carry over if the synthesizer produces behavior within the Verilog standard [13], as formalized in [50, 51]. We make no further assumptions apart from semantics preservation. However, we leave the problem of verifying semantics preservation in synthesis to future work.

### Related Work

#### Verifying Leakage Freedom
There are various techniques, such as ct-verif [16], [22], and CT-Wasm [85], that verify constant-time execution of software and quantify leakage through timing and cache side-channels [12, 17, 41, 65, 79, 90]. However, their analyses do not directly apply to our setting, as they consider straight-line, sequential code, unlike the highly parallel nature of hardware. Techniques for verifying information flow properties of hardware include Kwon et al. [64], SecVerilog [91], Caisson [66], GLIFT [82, 83], HyperFlow [45], GhostRider [67], and Zhang et al. [90]. dudect [77] detects end-to-end timing variability via a black-box technique based on statistical measurements. Iodine [50], like Xenon, focuses on clock-precise constant-time execution, not information flow. Unlike Xenon, none of these methods provide help in elucidating secrecy assumptions, a feature essential for scaling analysis to larger benchmarks.

#### Fault Localization
Several approaches help developers localize the root causes of software bugs [86]. Logic-based fault localization techniques [31, 42, 59, 60] are the closest line of work to ours. For example, BugAssist [59] uses a MAXSAT solver to compute the maximal set of statements that may cause the failure given a failed error trace of a C program. Xenon is similar in that we phrase localization as an optimization problem, allowing the use of ILP to locate the possible cause of a non-constant-time variable. However, Xenon focuses on constant-time, which is a relational property, and hardware, which has a substantially different execution model.

#### Synthesizing Assumptions
Our approach to synthesizing secrecy assumptions is related to work on precondition synthesis for memory safety. Data-driven precondition inference techniques [47, 48, 72, 80, 81] require positive and negative examples to infer preconditions. Xenon‚Äôs synthesis technique is an instance of abductive inference, previously used to triage analysis reports by allowing the user to interactively determine the preconditions under which a program is safe or unsafe [38] or to identify the most general assumptions or context under which a given module can be verified safe [14, 27, 39, 40, 49]. Livshits et al. [68] infer information-flow specifications for web applications using probabilistic inference. Unlike these efforts, our abduction strategy is tailored to the relational constant-time property. Furthermore, Xenon uses information from the verifier to ensure that the user interaction loop only invokes the ILP solver (not the slower Horn-clause verifier), yielding a rapid cycle that pinpoints the assumptions under which a circuit is constant-time.

#### Modular Verification of Software and Hardware
Xenon exploits modularity to verify large circuits by composing summaries of the behaviors of smaller sub-components. This is a well-known idea in verification; [78] shows how to perform dataflow analysis of large programs by computing procedure summaries, and Houdini [46] shows how to verify programs by automatically synthesizing pre- and post-conditions summarizing the behaviors of individual procedures. For hardware, model checkers like Mocha [18] and SMV [69] use rely-guarantee reasoning for modular verification. Kami [30] and [84] develop a compositional hardware verification methodology using the Coq proof assistant. However, the above require the user to provide module interface abstractions. Some approaches synthesize such abstractions in a counterexample-guided fashion [54, 92]. All focus on functional verification of properties of a single run and do not support abstractions needed for timing-channels, which require relational hyper-properties [32].

### Acknowledgments

We thank the reviewers for their suggestions and insightful comments, and our user study participants for their effort and feedback on Xenon. This work was supported in part by the NSF under Grant Numbers CNS-1514435, CCF-1918573, and CAREER CNS-2048262; by ONR Grant N000141512750; and by the CONIX Research Center, one of six centers in JUMP, a Semiconductor Research Corporation (SRC) program sponsored by DARPA.

### References

[References listed here as per the original text]

This revised version aims to improve clarity, coherence, and professionalism, making the content more accessible and easier to understand.