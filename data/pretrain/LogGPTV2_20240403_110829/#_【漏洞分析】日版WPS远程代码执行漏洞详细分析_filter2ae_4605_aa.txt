# 【漏洞分析】日版WPS远程代码执行漏洞详细分析
|
##### 译文声明
本文是翻译文章，文章来源：talosintelligence.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
****
****
翻译：[啦咔呢](http://bobao.360.cn/member/contribute?uid=79699134)
稿费：200RMB（不服你也来投稿啊！）
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**概述**
文字处理和办公产品中的漏洞是威胁行为者进行漏洞利用的有用目标。用户经常在日常生活中遇到这些软件套件所使用的文件类型，并且可能在电子邮件中打开这样的文件，或者被提示从网站下载这样的文件时并不会产生怀疑。
一些文字处理软件在使用特定语言的社区中被广泛使用，但在其他地方却鲜为人知。例如，Hancom的韩文字处理工具在韩国广泛使用，来自JustSystems的Ichitaro办公套件广泛应用于日本和说日语的社区。利用这些软件和与其相类似的文字处理系统中的漏洞，攻击者可以将攻击目标定位到特定国家或其预期受害者的语言社区。据推测，攻击者可能相信，对这些系统的攻击有可能不太会被安全研究人员发现，因为他们可能缺乏漏洞利用所必需的软件。
近来，Talos发现2了一个利用韩文字处理工具的复杂攻击 ，其中强调攻击者拥有可以创建出一种恶意文件的必要技术，而这种恶意文件旨在瞄准当地的办公软件套件。
Talos在Ichitaro Office套件中发现了三个漏洞，而这款软件是日本最流行的文字处理程序之一。
没有迹象表明， 我们在Ichitaro
Office套件中发现的三个漏洞中的任何一个已经在野外被利用。然而，这三种漏洞都可以造成一种任意代码执行。我们选择了这些漏洞中的一个来更详细地解释如何利用这样的漏洞，并通过启动calc.exe来演示远程代码执行的意义。
有关此特定漏洞的建议，请访问
**深入探究 – TALOS-2016-0197（CVE-2017-2790） – JUSTSYSTEMS ICHITARO OFFICE
EXCEL文件代码执行漏洞**
此漏洞围绕一个未检查的整数下溢问题，该问题是因为Ichitaro处理XLS文件工作簿流内的类型为0x3c的记录时未严格检查其长度。
在读取下一个记录（类型0x3c）时，应用程序计算需要复制到内存中的字节数。此计算涉及到了从文件本身读取到的值中减去一个值，进而导致整数下溢。
    JCXCALC!JCXCCALC_Jsfc_ExConvert+0xa4b1e:
    44b48cda 8b461e          mov     eax,dword ptr [esi+1Eh] // 下一条记录的文件数据
    44b48cdd 668b4802        mov     cx,word ptr [eax+2]     // 取自文件的记录长度(in our case 0)
    ...
    44b48ce4 6649            dec     cx                      // 0下溢为0xffff
    ...
    44b48ce8 894d08          mov     dword ptr [ebp+8],ecx   // 保存数值 0xffff后面使用
之后在相同的函数中，这个下溢值被传递到处理文件数据复制的函数中。
JCXCALC！JCXCCALC_Jsfc_ExConvert + 0xa4b46：
    44b48d04 0fb75508 movzx edx，word ptr [ebp + 8] //将0xffff存储到edx
    ... ...
    44b48d1f 52 push edx //压入长度
    44b48d20 51 push ecx //压入目的地址 
    44b48d21 83c005 add eax，5
    44b48d24 52 push edx //压入长度
    44b48d25 50 push eax //压入源地址
    44b48d26 e8c5f7ffff call JCXCALC！JCXCCALC_Jsfc_ExConvert + 0xa4334（44b484f0）
主要的拷贝函数确实有一个检查，以确保长度大于零。下溢的数值在雷达下飞行，并通过所有检查。下面是使用相关变量名注释的拷贝函数。注意，由于在上述程序集中压入相同的寄存器，下面C代码中的size和size_是相等的。
    int JCXCALC!JCXCCALC_Jsfc_ExConvert+0xa4334(int src, int size, int dst, int size_)
    {
      int result; 
      result = 0;
      if ( !size_ )
        return size;
      if ( size > size_ )
        return 0;
      if ( size > 0 )
      {
        result = size;
        do
        {
          *dst = *src++;
          ++dst;
          --size;
        }
        while ( size );
      }
      return result;
    }
dst地址是要分配的内存，其大小也取自文件中的TxO记录（类型0x1b6）。此大小在传递到malloc之前要先乘以2。
    JCXCALC！JCXCCALC_Jsfc_ExConvert + 0xa4a1c：
    442c8bd8 668b470e mov ax，word ptr [edi + 0Eh] //来自TxO元素的大小
    442c8bdc 50 push eax
    442c8bdd e88b87f6ff call JCXCALC！JCXCCALC_Jsfc_ExConvert + 0xd1b1（4423136d）
    JCXCALC！JCXCCALC_Jsfc_ExConvert + 0xd1b1：
    4423136d 0fb7442404 movzx eax，word ptr [esp + 4]
    44231372 d1e0 shl eax，1 //攻击者大小* 2
    44231374 50 push eax
    44231375 ff1580d42f44 call ds：malloc //受控malloc
    4423137b 59 pop ecx
    4423137c c3 ret
总而言之，该漏洞向攻击者提供了以下结构：
    *内存分配长度为受控值乘以2
    *memcpy进入了长度为0xffff的内存分配中，该值是从攻击者控制的文件数据中获取的
**覆盖目标**
如果我们想在Windows
7上利用此漏洞，现在的问题就变成了，使用memcpy覆盖的最好目标是什么？一个办法可能是尝试使用虚函数覆盖对象的vtable，这样我们可以使用用户控制的指针来控制程序计数器。
为了使上述变得可行，我们的对象需要使用以下参数创建：
    *对象必须以可预测的大小分配到堆的区域
    *对象必须使用虚函数并具有虚表（vtable）。
    *对象必须在覆盖发生后被销毁。
XLS文件由多个文档流组成，其中每个流都分为不同的记录。每个记录可以被描述为类型 – 长度 –
值（TLV）结构。这意味着每个记录将在前几个字节中指定其类型，随后是记录的长度，最后是包含在记录中由长度指定的字节数据。
一个小图如下所示：
    + ------ + -------- + ------------ +
    | 类型| 长度| 值|
    + ------ + -------- + ------------ +
    struct Record {
        uint16_t type;
        uint16_t length;
        byte [length] value;
    }}
作为示例，以下是类型为0x3c包含0xdeadbeef值的记录（长度是4，因为0xdeadbeef是4字节）。
    + -------- + -------- + ------------ +
    | 类型 | 长度 | 值|
    + -------- + -------- + ------------ +
    | 0x003c | 0x0004 | 0xdeadbeef |
    + -------- + -------- + ------------ +
    [0]  + 0x003c（60）
    [2]  + 0x0004（4）
    [4] “xadxdexebxfe”
然后解析器将遍历流中的所有记录，然后基于记录所描述的类型和值来解析每个记录。由于我们目标记录的第三个约束，我们需要一个在解析期间使用vtable创建一些对象的类型，但是直到解析整个流后的某个阶段也不会释放该对象。
在研究了应用程序能够解析的各种类型记录后，发现Row记录具有以下属性：
    *分配大小为0x14的数据结构
    *此元素的对象包含一个vtable
    *该元素的对象在EOF记录的解析期间通过调用其虚析构函数被销毁。
这意味着攻击者可以构造一个文件，其包含Row记录，和一些其他特定记录用以精确控制内存，然后覆盖Row记录的vtable。在此之后，他们可以结束一个EOF记录，该记录将调用属于Row记录的vtable。
此时的计划是定位我们从先前分配的Row对象之前的TxO记录覆盖位置，以便使用它来覆盖Row对象的vtable。
为了将攻击者控制的元素放置在Row记录之前，需要执行Windows 7低碎片堆的利用。下面描述简化说明。
**低碎片堆**