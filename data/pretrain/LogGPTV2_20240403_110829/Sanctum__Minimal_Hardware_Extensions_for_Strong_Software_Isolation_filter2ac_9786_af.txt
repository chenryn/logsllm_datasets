omnetpp
libquantum
astar
sjeng
gcc
perlbench
h264ref
gobmk
%
0
2
e
n
i
l
e
s
a
b
%
5
1
e
r
u
c
e
s
n
i
r
e
v
o
%
0
1
%
5
e
s
a
e
r
c
n
i
e
m
i
t
n
o
i
t
l
e
p
m
o
c
%
%
0
bzip2
mcf
Figure 18: Detail of enclave overhead with a DRAM
region allocation of 1/4 of LLC sets.
cache and the page walker. This logic is small and com-
binational, and signiﬁcantly simpler than the ALU in the
core’s execute stage. In this case, every memory fetch
issued by the page walker would experience a 1-cycle
latency, which adds 3 cycles of latency to each TLB miss.
The overheads due to additional cycles of TLB miss
latency are negligible, as quantiﬁed in Figure 18 for
SPECINT benchmarks. All TLB-related overheads con-
tribute less than 0.01% slowdown relative to completion
time of the insecure baseline. This overhead is insignif-
icant relative to the overheads of cache isolation: TLB
misses are infrequent and relatively expensive, several
additional cycles makes little difference.
8.4 Security Monitor Overhead
Invoking Sanctum’s security monitor to load code into an
enclave adds a one-time setup cost to each isolated pro-
cess, relative to running code without Sanctum’s enclave.
This overhead is amortized by the duration of the compu-
tation, so we discount it for long-running workloads.
Entering and exiting enclaves is more expensive than
hardware context switches: the security monitor must
ﬂush TLBs and L1 caches to avoid leaking private infor-
mation. Given an estimated cycle cost of each system
call in a Sanctum enclave, and in an insecure baseline,
we show the modest overheads due to enclave context
switches in Figure 18. Moreover, a sensible OS is ex-
pected to minimize the number of context switches by
allocating some cores to an enclave and allowing them
to execute to completion. We therefore also consider this
overhead to be negligible for long-running computations.
8.5 Overhead of DRAM Region Isolation
The crux of Sanctum’s strong isolation is caching DRAM
regions in distinct sets. When the OS assigns DRAM re-
gions to an enclave, it conﬁnes it to a part of the LLC. An
enclaved thread effectively runs on a machine with fewer
LLC sets, impacting its performance. Note, however, that
Sanctum does not partition private caches, so a thread can
utilize its core’s entire L1/L2 caches and TLB.
enclave with entire LLC
enclave with 1/2 of LLC sets
enclave with 1/4 of LLC sets
enclave with 1/8 of LLC sets
0 % 0 % 0 % 0.1 % 0.6 %
sjeng
astar
hmmer
libquantum omnetpp
2.2 % 1.6 % 2 % 2.8 %
gcc
h264ref
gobmk
perlbench
13.4 %
11.2 %
bzip2
mcf
Figure 19: Overhead of enclaves of various size relative
to an ideal insecure baseline.
Figure 19 shows the completion times of the SPECINT
workloads, each normalized to the completion time of
the same benchmark running on an ideal insecure OS
that allocates the entire LLC to the benchmark. Sanctum
excels at isolating compute-bound workloads operating
on sensitive data. SPECINT’s large, multi-phase work-
loads heavily exercise the entire memory hierarchy, and
therefore paint an accurate picture of a worst case for our
system. mcf, in particular, is very sensitive to the avail-
able LLC size, so it incurs noticeable overheads when
being conﬁned to a small subset of the LLC. Figure 18
further underlines that the majority of Sanctum’s enclave
overheads stem from a reduction in available LLC sets.
We consider mcf’s 23% decrease in performance when
limited to 1/8th of the LLC to be a very pessimistic view
of our system’s performance, as it explores the case where
the enclave uses a quarter of CPU power (a core), but
1/8th of the LLC. For a reasonable allocation of 1/4 of
DRAM regions (in a 4-core system), enclaves add under
3% overhead to most memory-bound benchmarks (with
the exception of mcf and bzip, which rely on a very large
LLC), and do not encumber compute-bound workloads.
9 Conclusion
Sanctum shows that strong provable isolation of concur-
rent software modules can be achieved with low overhead.
This approach provides strong security guarantees against
an insidious software threat model including cache timing
and memory access pattern attacks. With this work, we
hope to enable a shift in discourse in secure hardware
architecture away from plugging speciﬁc security holes
to a principled approach to eliminating attack surfaces.
Acknowledgements: Funding for this research was
partially provided by the National Science Foundation
under contract number CNS-1413920.
References
[1] Linux kernel: CVE security vulnerabilities, versions
and detailed reports. http://www.cvedetails.com/
872  25th USENIX Security Symposium 
USENIX Association
16
product/47/Linux-Linux-Kernel.html?vendor_
id=33, 2014. [Online; accessed 27-April-2015].
[2] XEN: CVE security vulnerabilities, versions and detailed
http://www.cvedetails.com/product/
[On-
reports.
23463/XEN-XEN.html?vendor_id=6276, 2014.
line; accessed 27-April-2015].
[3] SPEC CPU 2006. Tech. rep., Standard Performance Eval-
uation Corporation, May 2015.
[4] Xen project software overview. http://wiki.xen.org/
wiki/Xen_Project_Software_Overview, 2015. [On-
line; accessed 27-April-2015].
[5] ANATI, I., GUERON, S., JOHNSON, S. P., AND SCAR-
LATA, V. R. Innovative technology for CPU based attesta-
tion and sealing. In HASP (2013).
S.
the
answer might
linux?
surprise
http://www.extremetech.com/computing/
175919-who-actually-develops-linux,
[Online; accessed 27-April-2015].
[6] ANTHONY,
Who
actually
develops
you.
[16] DUFLOT, L., ETIEMBLE, D., AND GRUMELARD, O. Us-
ing CPU system management mode to circumvent operat-
ing system security functions. CanSecWest/core06 (2006).
[17] DUNN, A., HOFMANN, O., WATERS, B., AND WITCHEL,
E. Cloaking malware with the trusted platform module.
In USENIX Security Symposium (2011).
[18] EMBLETON, S., SPARKS, S., AND ZOU, C. C. SMM
rootkit: a new breed of os independent malware. Security
and Communication Networks (2010).
[19] EVTYUSHKIN, D., ELWELL, J., OZSOY, M., PONO-
MAREV, D., ABU GHAZALEH, N., AND RILEY, R. Iso-X:
A ﬂexible architecture for hardware-managed isolated exe-
cution. In Microarchitecture (MICRO) (2014), IEEE.
[20] FLETCHER, C. W., DIJK, M. V., AND DEVADAS, S. A
secure processor architecture for encrypted computation
on untrusted programs. In Workshop on Scalable Trusted
Computing (2012), ACM.
2014.
[21] GOLDREICH, O. Towards a theory of software protec-
In Theory of
tion and simulation by oblivious RAMs.
Computing (1987), ACM.
[7] BANESCU, S. Cache timing attacks. [Online; accessed
26-January-2014].
[22] GRAWROCK, D. Dynamics of a Trusted Platform: A
building block approach. Intel Press, 2009.
[8] BONNEAU, J., AND MIRONOV, I. Cache-collision timing
attacks against AES.
In Cryptographic Hardware and
Embedded Systems-CHES 2006. Springer, 2006, pp. 201–
215.
[9] BRUMLEY, B. B., AND TUVERI, N. Remote timing
attacks are still practical. In Computer Security–ESORICS.
Springer, 2011.
[10] BRUMLEY, D., AND BONEH, D. Remote timing attacks
are practical. Computer Networks (2005).
[11] CHEN, H., MAO, Y., WANG, X., ZHOU, D., ZEL-
DOVICH, N., AND KAASHOEK, M. F. Linux kernel vul-
nerabilities: State-of-the-art defenses and open problems.
In Asia-Paciﬁc Workshop on Systems (2011), ACM.
[12] CHHABRA, S., ROGERS, B., SOLIHIN, Y., AND
PRVULOVIC, M. SecureME: a hardware-software ap-
proach to full system security. In international conference
on Supercomputing (ICS) (2011), ACM.
[13] COSTAN, V., AND DEVADAS, S. Intel SGX explained.
Cryptology ePrint Archive, Report 2016/086, Feb 2016.
[14] DAVENPORT, S. SGX: the good, the bad and the down-
right ugly. Virus Bulletin (2014).
[15] DOMNITSER, L.,
JALEEL, A., LOEW,
J., ABU-
GHAZALEH, N., AND PONOMAREV, D.
Non-
monopolizable caches: Low-complexity mitigation of
cache side channel attacks. Transactions on Architecture
and Code Optimization (TACO) (2012).
[23] INTEL CORPORATION. Intel R(cid:31) 64 and IA-32 Architectures
Optimization Reference Manual, Sep 2014. Reference no.
248966-030.
[24] KESSLER, R. E., AND HILL, M. D. Page placement
algorithms for large real-indexed caches. Transactions on
Computer Systems (TOCS) (1992).
[25] KIM, Y., DALY, R., KIM, J., FALLIN, C., LEE, J. H.,
LEE, D., WILKERSON, C., LAI, K., AND MUTLU, O.
Flipping bits in memory without accessing them: An ex-
perimental study of DRAM disturbance errors. In ISCA
(2014), IEEE Press.
[26] KLEIN, G., ELPHINSTONE, K., HEISER, G., ANDRON-
ICK, J., COCK, D., DERRIN, P., ELKADUWE, D., EN-
GELHARDT, K., KOLANSKI, R., NORRISH, M., ET AL.
seL4: Formal veriﬁcation of an OS kernel. In SIGOPS
symposium on Operating systems principles (2009), ACM.
[27] KOCHER, P. C. Timing attacks on implementations of
difﬁe-hellman, RSA, DSS, and other systems. In Advances
in Cryptology (CRYPTO) (1996), Springer.
[28] KONG, J., ACIICMEZ, O., SEIFERT, J.-P., AND ZHOU,
H. Deconstructing new cache designs for thwarting soft-
ware cache-based side channel attacks. In workshop on
Computer security architectures (2008), ACM.
[29] LEE, Y., WATERMAN, A., AVIZIENIS, R., COOK, H.,
SUN, C., STOJANOVIC, V., AND ASANOVIC, K. A 45nm
1.3 ghz 16.7 double-precision GFLOPS/W RISC-V pro-
cessor with vector accelerators. In European Solid State
Circuits Conference (ESSCIRC) (2014), IEEE.
USENIX Association  
25th USENIX Security Symposium  873
17
[30] LIE, D., THEKKATH, C., MITCHELL, M., LINCOLN, P.,
BONEH, D., MITCHELL, J., AND HOROWITZ, M. Ar-
chitectural support for copy and tamper resistant software.
SIGPLAN Notices (2000).
[44] SUH, G. E., CLARKE, D., GASSEND, B., VAN DIJK,
M., AND DEVADAS, S. AEGIS: architecture for tamper-
evident and tamper-resistant processing. In international
conference on Supercomputing (ICS) (2003), ACM.
[31] LIN, J., LU, Q., DING, X., ZHANG, Z., ZHANG, X.,
AND SADAYAPPAN, P. Gaining insights into multicore
cache partitioning: Bridging the gap between simulation
and real systems. In HPCA (2008), IEEE.
[32] LIU, C., HARRIS, A., MAAS, M., HICKS, M., TIWARI,
M., AND SHI, E. GhostRider: A Hardware-Software
System for Memory Trace Oblivious Computation.
In
ASPLOS (2015).
[33] LIU, F., GE, Q., YAROM, Y., MCKEEN, F., ROZAS, C.,
HEISER, G., AND LEE, R. B. CATalyst: Defeating last-
level cache side channel attacks in cloud computing. In
HPCA (Mar 2016).
[34] LIU, F., AND LEE, R. B. Random ﬁll cache architecture.
In Microarchitecture (MICRO) (2014), IEEE.
[35] LIU, F., YAROM, Y., GE, Q., HEISER, G., AND LEE,
R. B. Last-level cache side-channel attacks are practical.
In Security and Privacy (2015), IEEE.
[36] MCKEEN, F., ALEXANDROVICH, I., BERENZON, A.,
ROZAS, C. V., SHAFI, H., SHANBHOGUE, V., AND SAV-
AGAONKAR, U. R. Innovative instructions and software
model for isolated execution. HASP (2013).
[37] OREN, Y., KEMERLIS, V. P., SETHUMADHAVAN, S.,
AND KEROMYTIS, A. D. The spy in the sandbox
– practical cache attacks in javascript. arXiv preprint
arXiv:1502.07373 (2015).
[38] RUTKOWSKA, J. Thoughts on intel’s upcoming software
guard extensions (part 2). Invisible Things Lab (2013).
[39] RUTKOWSKA, J., AND WOJTCZUK, R. Preventing and
detecting xen hypervisor subversions. Blackhat Brieﬁngs
USA (2008).
[40] SANCHEZ, D., AND KOZYRAKIS, C. The ZCache: De-
In Microarchitecture
coupling ways and associativity.
(MICRO) (2010), IEEE.
[41] SANCHEZ, D., AND KOZYRAKIS, C. Vantage: scalable
and efﬁcient ﬁne-grain cache partitioning. In SIGARCH
Computer Architecture News (2011), ACM.
[42] SEABORN, M., AND DULLIEN, T. Exploiting the
DRAM rowhammer bug to gain kernel privileges. http:
//googleprojectzero.blogspot.com/2015/03/
exploiting-dram-rowhammer-bug-to-gain.html,
Mar 2015. [Online; accessed 9-March-2015].
[43] STEFANOV, E., VAN DIJK, M., SHI, E., FLETCHER,
C., REN, L., YU, X., AND DEVADAS, S. Path oram:
An extremely simple oblivious ram protocol. In SIGSAC
Computer & communications security (2013), ACM.
[45] TAYLOR, G., DAVIES, P., AND FARMWALD, M. The TLB
slice - a low-cost high-speed address translation mecha-
nism. SIGARCH Computer Architecture News (1990).
[46] WANG, Z., AND LEE, R. B. New cache designs for
thwarting software cache-based side channel attacks. In In-
ternational Symposium on Computer Architecture (ISCA)
(2007).
[47] WATERMAN, A., LEE, Y., AVIZIENIS, R., PATTERSON,
D. A., AND ASANOVIC, K. The RISC-V instruction
set manual volume II: Privileged architecture version 1.7.
Tech. Rep. UCB/EECS-2015-49, EECS Department, Uni-
versity of California, Berkeley, May 2015.
[48] WATERMAN, A., LEE, Y., AND CELIO, CHRISTOPHER,
E. A. RISC-V proxy kernel and boot loader. Tech. rep.,
EECS Department, University of California, Berkeley,
May 2015.
[49] WATERMAN, A., LEE, Y., PATTERSON, D. A., AND
ASANOVIC, K. The RISC-V instruction set manual,
volume i: User-level ISA, version 2.0. Tech. Rep.
UCB/EECS-2014-54, EECS Department, University of
California, Berkeley, May 2014.
[50] WECHEROWSKI, F. A real SMM rootkit: Reversing and
hooking BIOS SMI handlers. Phrack Magazine (2009).
[51] WOJTCZUK, R., AND RUTKOWSKA, J. Attacking intel
trusted execution technology. Black Hat DC (2009).
[52] WOJTCZUK, R., AND RUTKOWSKA, J. Attacking SMM
memory via intel CPU cache poisoning. Invisible Things
Lab (2009).
[53] WOJTCZUK, R., AND RUTKOWSKA, J. Attacking intel
TXT via SINIT code execution hijacking, 2011.
[54] WOJTCZUK, R., RUTKOWSKA, J., AND TERESHKIN,
A. Another way to circumvent intel R(cid:31) trusted execution
technology. Invisible Things Lab (2009).
[55] XU, Y., CUI, W., AND PEINADO, M. Controlled-channel
attacks: Deterministic side channels for untrusted operat-
ing systems. In Oakland (May 2015), IEEE.
[56] YAROM, Y., AND FALKNER, K. E. Flush+reload: a high
resolution, low noise, l3 cache side-channel attack. IACR
Cryptology ePrint Archive (2013).
[57] YEE, B., SEHR, D., DARDYK, G., CHEN, J. B., MUTH,
R., ORMANDY, T., OKASAKA, S., NARULA, N., AND
FULLAGAR, N. Native client: A sandbox for portable,
untrusted x86 native code. In Security and Privacy (2009),
IEEE.
874  25th USENIX Security Symposium 
USENIX Association
18