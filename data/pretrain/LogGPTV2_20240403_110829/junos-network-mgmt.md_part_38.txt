Monitor a Running Ping Test
IN THIS SECTION
pingResultsTable | 439
pingProbeHistoryTable | 440
Generate Traps | 441
When pingCtlAdminStatus is successfully set to enabled, the following is done before the acknowledgment of
the SNMP Set request is sent back to the client:
439
• pingResultsEntry is created if it does not already exist.
• pingResultsOperStatus transitions to enabled.
For more information, see the following sections:
pingResultsTable
While the test is running, pingResultsEntry keeps track of the status of the test. The value of
pingResultsOperStatus is enabled while the test is running and disabled when it has stopped.
The value of pingCtlAdminStatus remains enabled until you set it to disabled. Thus, to get the status of the
test, you must examine pingResultsOperStatus.
The pingCtlFrequency variable can be used to schedule many tests for one pingCtlEntry. After a test ends
normally (you did not stop the test) and the pingCtlFrequency number of seconds has elapsed, the test is
started again just as if you had set pingCtlAdminStatus to enabled. If you intervene at any time between
repeated tests (you set pingCtlAdminStatus to disabled or pingCtlRowStatus to notInService), the repeat feature
is disabled until another test is started and ends normally. A value of 0 for pingCtlFrequency indicates this
repeat feature is not active.
pingResultsIpTgtAddr and pingResultsIpTgtAddrType are set to the value of the resolved destination address
when the value of pingCtlTargetAddressType is dns. When a test starts successfully and pingResultsOperStatus
transitions to enabled:
• pingResultsIpTgtAddr is set to null-string.
• pingResultsIpTgtAddrType is set to unknown.
pingResultsIpTgtAddr and pingResultsIpTgtAddrType are not set until pingCtlTargetAddress can be resolved to a
numeric address. To retrieve these values, poll pingResultsIpTgtAddrType for any value other than unknown
after successfully setting pingCtlAdminStatus to enabled.
At the start of a test, pingResultsSentProbes is initialized to 1 and the first probe is sent. pingResultsSentProbes
increases by 1 each time a probe is sent.
As the test runs, every pingCtlTimeOut seconds, the following occur:
• pingProbeHistoryStatus for the corresponding pingProbeHistoryEntry in pingProbeHistoryTable is set to
requestTimedOut.
• A pingProbeFailed trap is generated, if necessary.
• An attempt is made to send the next probe.
NOTE: No more than one outstanding probe exists for each test.
440
For every probe, you can receive one of the following results:
• The target host acknowledges the probe with a response.
• The probe times out; there is no response from the target host acknowledging the probe.
• The probe could not be sent.
Each probe result is recorded in pingProbeHistoryTable. For more information about pingProbeHistoryTable, see
"pingProbeHistoryTable" on page 440.
When a response is received from the target host acknowledging the current probe:
• pingResultsProbeResponses increases by 1.
• The following variables are updated:
• pingResultsMinRtt—Minimum round-trip time
• pingResultsMaxRtt—Maximum round-trip time
• pingResultsAverageRtt—Average round-trip time
• pingResultsRttSumOfSquares—Sum of squares of round-trip times
• pingResultsLastGoodProbe—Timestamp of the last response
NOTE: Only probes that result in a response from the target host contribute to the
calculation of the round-trip time (RTT) variables.
When a response to the last probe is received or the last probe has timed out, the test is complete.
pingProbeHistoryTable
An entry in pingProbeHistoryTable (pingProbeHistoryEntry) represents a probe result and is indexed by three
variables:
• The first two variables, pingCtlOwnerIndex and pingCtlTestName, are the same ones used for pingCtlTable,
which identifies the test.
• The third variable, pingProbeHistoryIndex, is a counter to uniquely identify each probe result.
The maximum number of pingProbeHistoryTable entries created for a given test is limited by pingCtlMaxRows.
If pingCtlMaxRows is set to 0, no pingProbeHistoryTable entries are created for that test.
Each time a probe result is determined, a pingProbeHistoryEntry is created and added to
pingProbeHistoryTable. pingProbeHistoryIndex of the new pingProbeHistoryEntry is 1 greater than the last
441
pingProbeHistoryEntry added to pingProbeHistoryTable for that test. pingProbeHistoryIndex is set to 1 if this is the
first entry in the table. The same test can be run multiple times, so this index keeps growing.
If pingProbeHistoryIndex of the last pingProbeHistoryEntry added is 0xFFFFFFFF, the next pingProbeHistoryEntry
added has pingProbeHistoryIndex set to 1.
The following are recorded for each probe result:
• pingProbeHistoryResponse—Time to live (TTL)
• pingProbeHistoryStatus—What happened and why
• pingProbeHistoryLastRC—Return code (RC) value of ICMP packet
• pingProbeHistoryTime—Timestamp when probe result was determined
When a probe cannot be sent, pingProbeHistoryResponse is set to 0. When a probe times out,
pingProbeHistoryResponse is set to the difference between the time when the probe was discovered to be
timed out and the time when the probe was sent.
Generate Traps
For any trap to be generated, the appropriate bit of pingCtlTrapGeneration must be set. You must also
configure a trap group to receive remote operations. A trap is generated under the following conditions:
• A pingProbeFailed trap is generated every time pingCtlTrapProbeFailureFilter number of consecutive
probes fail during the test.
• A pingTestFailed trap is generated when the test completes and at least pingCtlTrapTestFailureFilter
number of probes fail.
• A pingTestCompleted trap is generated when the test completes and fewer than
pingCtlTrapTestFailureFilter probes fail.
NOTE: A probe is considered a failure when pingProbeHistoryStatus of the probe result is
anything besides responseReceived.
For information about how to configure a trap group to receive remote operations, see Configuring
SNMP Trap Groups and "Example: Setting Trap Notification for Remote Operations" on page 446.
442
Gather Ping Test Results
You can either poll pingResultsOperStatus to find out when the test is complete or request that a trap be
sent when the test is complete. For more information about pingResultsOperStatus, see "pingResultsTable"
on page 446. For more information about Ping MIB traps, see "Generating Traps" on page 446.
The statistics calculated and then stored in pingResultsTable include:
• pingResultsMinRtt—Minimum round-trip time
• pingResultsMaxRtt—Maximum round-trip time
• pingResultsAverageRtt—Average round-trip time
• pingResultsProbeResponses—Number of responses received
• pingResultsSentProbes—Number of attempts to send probes
• pingResultsRttSumOfSquares—Sum of squares of round-trip times
• pingResultsLastGoodProbe—Timestamp of the last response
You can also consult pingProbeHistoryTable for more detailed information about each probe. The index
used for pingProbeHistoryTable starts at 1, goes to 0xFFFFFFFF, and wraps to 1 again.
For example, if pingCtlProbeCount is 15 and pingCtlMaxRows is 5, then upon completion of the first run of this
test, pingProbeHistoryTable contains probes like those in Table 33 on page 442.
Table 33: Results in pingProbeHistoryTable: After the First Ping Test
pingProbeHistoryIndex Probe Result
11 Result of 11th probe from run 1
12 Result of 12th probe from run 1
13 Result of 13th probe from run 1
14 Result of 14th probe from run 1
15 Result of 15th probe from run 1
443
Upon completion of the first probe of the second run of this test, pingProbeHistoryTable will contain probes
like those in Table 34 on page 443.
Table 34: Results in pingProbeHistoryTable: After the First Probe of the Second Test
pingProbeHistoryIndex Probe Result
12 Result of 12th probe from run 1
13 Result of 13th probe from run 1
14 Result of 14th probe from run 1
15 Result of 15th probe from run 1
16 Result of 1st probe from run 2
Upon completion of the second run of this test, pingProbeHistoryTable will contain probes like those in
Table 35 on page 443.
Table 35: Results in pingProbeHistoryTable: After the Second Ping Test
pingProbeHistoryIndex Probe Result
26 Result of 11th probe from run 2
27 Result of 12th probe from run 2
28 Result of 13th probe from run 2
29 Result of 14th probe from run 2
30 Result of 15th probe from run 2
History entries can be deleted from the MIB in two ways:
• More history entries for a given test are added and the number of history entries exceeds
pingCtlMaxRows. The oldest history entries are deleted to make room for the new ones.
444
• You delete the entire test by setting pingCtlRowStatus to destroy.
Stop a Ping Test
To stop an active test, set pingCtlAdminStatus to disabled. To stop the test and remove its pingCtlEntry,
pingResultsEntry, and any pingHistoryEntry objects from the MIB, set pingCtlRowStatus to destroy.
Interpret Ping Variables
This section clarifies the ranges for the following variables that are not explicitly specified in the Ping
MIB:
• pingCtlDataSize—The value of this variable represents the total size of the payload (in bytes) of an
outgoing probe packet. This payload includes the timestamp (8 bytes) that is used to time the probe.
This is consistent with the definition of pingCtlDataSize (maximum value of 65,507) and the standard
ping application.
If the value of pingCtlDataSize is between 0 and 8 inclusive, it is ignored and the payload is 8 bytes (the
timestamp). The Ping MIB assumes all probes are timed, so the payload must always include the
timestamp.
For example, if you wish to add an additional 4 bytes of payload to the packet, you must set
pingCtlDataSize to 12.
• pingCtlDataFill—The first 8 bytes of the data segment of the packet is for the timestamp. After that,
the pingCtlDataFill pattern is used in repetition. The default pattern (when pingCtlDataFill is not
specified) is (00, 01, 02, 03 ... FF, 00, 01, 02, 03 ... FF, ...).
• pingCtlMaxRows—The maximum value is 255.
• pingMaxConcurrentRequests—The maximum value is 500.
• pingCtlTrapProbeFailureFilter and pingCtlTrapTestFailureFilter—A value of 0 for
pingCtlTrapProbeFailureFilter or pingCtlTrapTestFailureFilter is not well defined by the Ping MIB. If
pingCtlTrapProbeFailureFilter is 0, pingProbeFailed traps will not be generated for the test under any
circumstances. If pingCtlTrapTestFailureFilter is 0, pingTestFailed traps will not be generated for the test
under any circumstances.
445
Use the Traceroute MIB for Remote Monitoring Devices Running Junos
OS
A traceroute test approximates the path packets take from the local host to the remote host.
RFC 2925 is the authoritative description of the Traceroute MIB in detail and provides the ASN.1 MIB
definition of the Traceroute MIB.
Start a Traceroute Test
IN THIS SECTION
Use Multiple Set PDUs | 446
Use a Single Set PDU | 446
Before you start a traceroute test, configure a Traceroute MIB view. This allows SNMP Set requests on
tracerouteMIB. To start a test, create a row in traceRouteCtlTable and set traceRouteCtlAdminStatus to enabled.
You must specify at least the following before setting traceRouteCtlAdminStatus to enabled:
• traceRouteCtlOwnerIndexSnmpAdminString
• traceRouteCtlTestNameSnmpAdminString
• traceRouteCtlTargetAddressInetAddress
• traceRouteCtlRowStatusRowStatus
For all other values, defaults are chosen unless otherwise specified. traceRouteCtlOwnerIndex and
traceRouteCtlTestName are used as the index, so their values are specified as part of the OID. To create a
row, set traceRouteCtlRowStatus to createAndWait or createAndGo on a row that does not already exist. A value
of active for traceRouteCtlRowStatus indicates that all necessary information has been specified and the test
can begin; traceRouteCtlAdminStatus can be set to enabled. An SNMP Set request that sets
traceRouteCtlRowStatus to active will fail if the necessary information in the row is not specified or is
inconsistent. For information about how to configure a view, see "Setting SNMP Views" on page 446.
There are two ways to start a traceroute test:
446
Use Multiple Set PDUs
You can use multiple Set request PDUs (multiple PDUs, with one or more varbinds each) and set the
following variables in this order to start the test:
• traceRouteCtlRowStatus to createAndWait
• All appropriate test variables
• traceRouteCtlRowStatus to active
The Junos OS now verifies that all necessary information to run a test has been specified.
• traceRouteCtlAdminStatus to enabled
Use a Single Set PDU
You can use a single Set request PDU (one PDU, with multiple varbinds) to set the following variables to
start the test:
• traceRouteCtlRowStatus to createAndGo
• All appropriate test variables
• traceRouteCtlAdminStatus to enabled
Monitor a Running Traceroute Test
IN THIS SECTION
traceRouteResultsTable | 447
traceRouteProbeResultsTable | 448
traceRouteHopsTable | 449
Generate Traps | 450
When traceRouteCtlAdminStatus is successfully set to enabled, the following is done before the
acknowledgment of the SNMP Set request is sent back to the client:
• traceRouteResultsEntry is created if it does not already exist.
• traceRouteResultsOperStatus transitions to enabled.
447
For more information, see the following sections:
traceRouteResultsTable
While the test is running, this traceRouteResultsTable keeps track of the status of the test. The value of
traceRouteResultsOperStatus is enabled while the test is running and disabled when it has stopped.
The value of traceRouteCtlAdminStatus remains enabled until you set it to disabled. Thus, to get the
status of the test, you must examine traceRouteResultsOperStatus.
The traceRouteCtlFrequency variable can be used to schedule many tests for one traceRouteCtlEntry.
After a test ends normally (you did not stop the test) and traceRouteCtlFrequency number of seconds
has elapsed, the test is started again just as if you had set traceRouteCtlAdminStatus to enabled. If you
intervene at any time between repeated tests (you set traceRouteCtlAdminStatus to disabled or
traceRouteCtlRowStatus to notInService), the repeat feature is disabled until another test is started and
ends normally. A value of 0 for traceRouteCtlFrequency indicates this repeat feature is not active.
traceRouteResultsIpTgtAddr and traceRouteResultsIpTgtAddrType are set to the value of the resolved
destination address when the value of traceRouteCtlTargetAddressType is dns. When a test starts
successfully and traceRouteResultsOperStatus transitions to enabled:
• traceRouteResultsIpTgtAddr is set to null-string.
• traceRouteResultsIpTgtAddrType is set to unknown.
traceRouteResultsIpTgtAddr and traceRouteResultsIpTgtAddrType are not set until
traceRouteCtlTargetAddress can be resolved to a numeric address. To retrieve these values, poll
traceRouteResultsIpTgtAddrType for any value other than unknown after successfully setting
traceRouteCtlAdminStatus to enabled.
At the start of a test, traceRouteResultsCurHopCount is initialized to traceRouteCtlInitialTtl, and
traceRouteResultsCurProbeCount is initialized to 1. Each time a probe result is determined,
traceRouteResultsCurProbeCount increases by 1. While the test is running, the value of
traceRouteResultsCurProbeCount reflects the current outstanding probe for which results have not yet
been determined.
The traceRouteCtlProbesPerHop number of probes is sent for each time-to-live (TTL) value. When the
result of the last probe for the current hop is determined, provided that the current hop is not the
destination hop, traceRouteResultsCurHopCount increases by 1, and traceRouteResultsCurProbeCount
resets to 1.
At the start of a test, if this is the first time this test has been run for this traceRouteCtlEntry,
traceRouteResultsTestAttempts and traceRouteResultsTestSuccesses are initialized to 0.
At the end of each test execution, traceRouteResultsOperStatus transitions to disabled, and
traceRouteResultsTestAttempts increases by 1. If the test was successful in determining the full path to
448
the target, traceRouteResultsTestSuccesses increases by 1, and traceRouteResultsLastGoodPath is set to
the current time.
traceRouteProbeResultsTable
Each entry in traceRouteProbeHistoryTable is indexed by five variables:
• The first two variables, traceRouteCtlOwnerIndex and traceRouteCtlTestName, are the same ones
used for traceRouteCtlTable and to identify the test.
• The third variable, traceRouteProbeHistoryIndex, is a counter, starting from 1 and wrapping at
FFFFFFFF. The maximum number of entries is limited by traceRouteCtlMaxRows.
• The fourth variable, traceRouteProbeHistoryHopIndex, indicates which hop this probe is for (the
actual time-to-live or TTL value). Thus, the first traceRouteCtlProbesPerHop number of entries
created when a test starts have a value of traceRouteCtlInitialTtl for
traceRouteProbeHistoryHopIndex.
• The fifth variable, traceRouteProbeHistoryProbeIndex, is the probe for the current hop. It ranges
from 1 to traceRouteCtlProbesPerHop.
While a test is running, as soon as a probe result is determined, the next probe is sent. A maximum of
traceRouteCtlTimeOut seconds elapses before a probe is marked with status requestTimedOut and the
next probe is sent. There is never more than one outstanding probe per traceroute test. Any probe result
coming back after a probe times out is ignored.
Each probe can:
• Result in a response from a host acknowledging the probe
• Time out with no response from a host acknowledging the probe
• Fail to be sent
Each probe status is recorded in traceRouteProbeHistoryTable with traceRouteProbeHistoryStatus set
accordingly.
Probes that result in a response from a host record the following data:
• traceRouteProbeHistoryResponse—Round-trip time (RTT)
• traceRouteProbeHistoryHAddrType—The type of HAddr (next argument)
• traceRouteProbeHistoryHAddr—The address of the hop
All probes, regardless of whether a response for the probe is received, have the following recorded:
• traceRouteProbeHistoryStatus—What happened and why
449
• traceRouteProbeHistoryLastRC—Return code (RC) value of the ICMP packet
• traceRouteProbeHistoryTime—Timestamp when the probe result was determined
When a probe cannot be sent, traceRouteProbeHistoryResponse is set to 0. When a probe times out,
traceRouteProbeHistoryResponse is set to the difference between the time when the probe was
discovered to be timed out and the time when the probe was sent.
traceRouteHopsTable
Entries in traceRouteHopsTable are indexed by three variables:
• The first two, traceRouteCtlOwnerIndex and traceRouteCtlTestName, are the same ones used for
traceRouteCtlTable and identify the test.
• The third variable, traceRouteHopsHopIndex, indicates the current hop, which starts at 1 (not
traceRouteCtlInitialTtl).
When a test starts, all entries in traceRouteHopsTable with the given traceRouteCtlOwnerIndex and
traceRouteCtlTestName are deleted. Entries in this table are only created if
traceRouteCtlCreateHopsEntries is set to true.
A new traceRouteHopsEntry is created each time the first probe result for a given TTL is determined.
The new entry is created whether or not the first probe reaches a host. The value of
traceRouteHopsHopIndex is increased by 1 for this new entry.
NOTE: Any traceRouteHopsEntry can lack a value for traceRouteHopsIpTgtAddress if there are
no responses to the probes with the given TTL.
Each time a probe reaches a host, the IP address of that host is available in the probe result. If the value
of traceRouteHopsIpTgtAddress of the current traceRouteHopsEntry is not set, then the value of
traceRouteHopsIpTgtAddress is set to this IP address. If the value of traceRouteHopsIpTgtAddress of the
current traceRouteHopsEntry is the same as the IP address, then the value does not change. If the value
of traceRouteHopsIpTgtAddress of the current traceRouteHopsEntry is different from this IP address,
indicating a path change, a new traceRouteHopsEntry is created with:
• traceRouteHopsHopIndex variable increased by 1
• traceRouteHopsIpTgtAddress set to the IP address
NOTE: A new entry for a test is added to traceRouteHopsTable each time a new TTL value is
used or the path changes. Thus, the number of entries for a test may exceed the number of
different TTL values used.
450
When a probe result is determined, the value traceRouteHopsSentProbes of the current
traceRouteHopsEntry increases by 1. When a probe result is determined, and the probe reaches a host:
• The value traceRouteHopsProbeResponses of the current traceRouteHopsEntry is increased by 1.
• The following variables are updated:
• traceRouteResultsMinRtt—Minimum round-trip time
• traceRouteResultsMaxRtt—Maximum round-trip time
• traceRouteResultsAverageRtt—Average round-trip time
• traceRouteResultsRttSumOfSquares—Sum of squares of round-trip times
• traceRouteResultsLastGoodProbe—Timestamp of the last response
NOTE: Only probes that reach a host affect the round-trip time values.
Generate Traps
To generate any trap, an appropriate bit of traceRouteCtlTrapGeneration must be set. You must also
configure a trap group to receive remote operations. Traps are generated under the following conditions:
• traceRouteHopsIpTgtAddress of the current probe is different from the last probe with the same TTL
value (traceRoutePathChange).
• A path to the target could not be determined (traceRouteTestFailed).
A path to the target was determined (traceRouteTestCompleted).
For information about how to configure a trap group to receive remote operations, see Configuring
SNMP Trap Groups and "SNMP Remote Operations Overview" on page 432.
Monitor Traceroute Test Completion
When a test is complete, traceRouteResultsOperStatus transitions from enabled to disabled. This transition
occurs in the following situations:
• The test ends successfully. A probe result indicates that the destination has been reached. In this
case, the current hop is the last hop. The rest of the probes for this hop are sent. When the last
probe result for the current hop is determined, the test ends.
451
• traceRouteCtlMaxTtl threshold is exceeded. The destination is never reached. The test ends after the
number of probes with TTL value equal to traceRouteCtlMaxttl have been sent.
• traceRouteCtlMaxFailures threshold is exceeded. The number of consecutive probes that end with status
requestTimedOut exceeds traceRouteCtlMaxFailures.
• You end the test. You set traceRouteCtlAdminStatus to disabled or delete the row by setting
traceRouteCtlRowStatus to destroy.
• You misconfigured the traceroute test. A value or variable you specified in traceRouteCtlTable is
incorrect and will not allow a single probe to be sent. Because of the nature of the data, this error
could not be determined until the test was started; that is, until after traceRouteResultsOperStatus
transitioned to enabled. When this occurs, one entry is added to traceRouteProbeHistoryTable with
traceRouteProbeHistoryStatus set to the appropriate error code.
If traceRouteCtlTrapGeneration is set properly, either the traceRouteTestFailed or traceRouteTestCompleted trap is
generated.
Gather Traceroute Test Results
You can either poll traceRouteResultsOperStatus to find out when the test is complete or request that a
trap be sent when the test is complete. For more information about traceResultsOperStatus, see
"traceRouteResultsTable" on page 446. For more information about Traceroute MIB traps, see the
Generating Traps section in "Monitoring a Running Traceroute Test" on page 446.
Statistics are calculated on a per-hop basis and then stored in traceRouteHopsTable. They include the
following for each hop:
• traceRouteHopsIpTgtAddressType—Address type of host at this hop
• traceRouteHopsIpTgtAddress—Address of host at this hop
• traceRouteHopsMinRtt—Minimum round-trip time
• traceRouteHopsMaxRtt—Maximum round-trip time
• traceRouteHopsAverageRtt—Average round-trip time
• traceRouteHopsRttSumOfSquares—Sum of squares of round-trip times
• traceRouteHopsSentProbes—Number of attempts to send probes
• traceRouteHopsProbeResponses—Number of responses received
• traceRouteHopsLastGoodProbe—Timestamp of last response