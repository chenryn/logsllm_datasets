title:On Emulation-Based Network Intrusion Detection Systems
author:Ali Abbasi and
Jos Wetzels and
Wouter Bokslag and
Emmanuele Zambon and
Sandro Etalle
On Emulation-Based Network Intrusion
Detection Systems
Ali Abbasi1, Jos Wetzels1,2, Wouter Bokslag2,
Emmanuele Zambon1,3, and Sandro Etalle1,2
1 Services, Cyber security and Safety Group, University of Twente, The Netherlands
{a.abbasi,emmanuele.zambon,sandro.etalle}@utwente.nl,
PI:EMAIL
2 Eindhoven University of Technology, The Netherlands
PI:EMAIL, PI:EMAIL
3 SecurityMatters BV, The Netherlands
PI:EMAIL
Abstract. Emulation-based network intrusion detection systems have
been devised to detect the presence of shellcode in network traﬃc by
trying to execute (portions of) the network packet payloads in an in-
strumented environment and checking the execution traces for signs of
shellcode activity. Emulation-based network intrusion detection systems
are regarded as a signiﬁcant step forward with regards to traditional
signature-based systems, as they allow detecting polymorphic (i.e., en-
crypted) shellcode. In this paper we investigate and test the actual eﬀec-
tiveness of emulation-based detection and show that the detection can
be circumvented by employing a wide range of evasion techniques, ex-
ploiting weakness that are present at all three levels in the detection
process. We draw the conclusion that current emulation-based systems
have limitations that allow attackers to craft generic shellcode encoders
able to circumvent their detection mechanisms.
Keywords: Emulation, IDS, Shellcode, Evasion, Polymorphism.
1
Introduction
Emulation-based Network Intrusion Detection Systems (EBNIDS) where intro-
duced by Polychronakis et al.[1] to identify the presence of (possibly polymor-
phic) shellcode in network communication. The original motivation for introduc-
ing a new kind of NIDS was to overcome the limits of signature-based NIDS,
which by deﬁnition can only identify known shellcodes, and are easily circum-
ventable, e.g., by using polymorphism.
The main idea behind EBNIDSes is to check whether a given payload is ac-
tually malicious by trying to execute it in an instrumented environment, and
checking whether the execution is possible and shows signs of being malicious.
EBNIDSes work by turning the payload of a suspected network ﬂow into a se-
quence of instructions and by simulating these instructions to determine what
A. Stavrou et al. (Eds.): RAID 2014, LNCS 8688, pp. 384–404, 2014.
c(cid:2) Springer International Publishing Switzerland 2014
Emulation Based NIDS
385
they actually do. The resulting behavior is then analyzed with the help of speciﬁc
heuristics.
After their introduction, we have seen a growing interest in this ﬁeld, with
a number of new proposals being introduced in a relatively short time-span [2–
4, 6, 5, 7].
The goal of this paper is to investigate the actual practical eﬀectiveness of
EBNIDSes. In particular, in this paper
– we illustrate how EBNIDSes work by introducing three abstraction layers
that allow us to describe all the approaches proposed so far,
– we investigate and question the actual eﬀectiveness of EBNIDS, by providing
evidence that present EBNIDSes have intrinsic limitations that make them
evadable using standard coding techniques.
To substantiate the second point, we introduce simple coding techniques exploit-
ing the implementation and/or design limitations of EBNIDSes, and show that
they allow attackers to completely evade state-of-the-art EBNIDSes. Finally, we
prove that it is possible to write a shellcode that evades EBNIDSes even in pres-
ence of a (theoretical) more complete implementation of the pre-processor and
the emulator. In particular, we show it is still possible to evade both the emula-
tion phase and the heuristics engine of EBNIDSes. These evasion techniques do
not leverage implementation bugs of EBNIDSes (e.g., instruction set support)
but exploit limitations in the concept of emulation and in the design of heuristics
detection patterns.
Here we want to stress that we do not include in the research those intrusion
detection systems relying on a precise memory image of the target, like Argos
[7], because they are intrinsically diﬀerent from EBNIDSes; indeed they are
considered host-based (rather than network-based ) NIDSes.
2 Detecting Shellcode on Emulation Based NIDS
In general, EBNIDSes detect encrypted shellcodes based on the following three
steps: (1) pre-processing, (2) emulation and (3) heuristic-based detection (see
Figure 1). We will now detail each of these steps.
2.1 Pre-processing
The main motivation for a pre-processing step is related to performance: emula-
tion is resource consuming and it would not be feasible to emulate in real-time
all the possible sequences of bytes extracted from the network. Therefore, the
pre-processing step consists of inspecting network traﬃc, extracting the sub-
set of traﬃc to be further investigated and transform (disassemble) it into an
emulate-able sequence of bytes. Disassembly refers to a technique which ma-
chine instructions being extracted from the network streams. Zhang et. al. [8]
propose a technique to identify which subset(s) of a network ﬂow may contain
shellcode by using static analysis. The proposed technique works by scanning
386
A. Abbasi et al.
Fig. 1. Overview of Emulation Based Intrusion Detection System functionalities
network traﬃc for the presence of a decryption routine, which is part of any
polymorphic shellcode. The authors assume that any shellcode, at some point,
must use some form of GetPC instruction (such as CALL or FNSTENV) in or-
der to discover its location in memory. There is only a limited amount of ways
to obtain the value of the program counter, and by means of static analysis the
seeding instructions for the GetPC code (e.g., CALL or FNSTENV instructions)
are identiﬁed and ﬂagged as the start of a possible shellcode. Although some of
the early EBNIDSes (e.g., the approach proposed by Polychronakis et. al. [1])
do not implement the pre-processing step, follow-up extensions all include some
form of pre-processing.
2.2 Emulation
The emulation step consists of running potential shellcode in an emulated and
instrumented CPU or operating system environment. Instrumentation allows
tracking the behavior of the emulated CPU during execution. In order to allow
inspecting traﬃc in real-time, emulation is constrained by execution time, which
imposes compromises on the implementation of emulators. Software-based emu-
lators generally only support a subset of all hardware supported instructions for
a restricted amount of hardware architectures. As an example, the approaches
proposed by Polychronakis et. al. in [1, 9] support a subset of x86 instructions,
which do not include ﬂoating point (FPU), MMX, and SSE instructions which
are commonly available in modern CPUs or GPUs. In addition, the emulator
does not know about the execution environment of the potential target of the
Emulation Based NIDS
387
shellcode (i.e., the machine on which the shellcode could run). For these rea-
sons, it is not always possible to reliably emulate all shellcodes. To overcome
this problem Polychronakis et. al. propose to employ a generic memory im-
age [3]. By means of the generic memory image the emulator can read and jump
to generic data structures and system calls, but still without guarantee that the
values present at certain locations in memory will correspond to the values in
the target memory.
2.3 Heuristic-Based Detection
The heuristic-based detection step consists of examining the execution trace
produced by the emulator searching for known patterns of shellcode execution.
If such patterns are found, the suspected network data is ﬂagged as a shellcode
and an alert can be raised by the EBNIDS. Three basic heuristics have been
proposed over time to identify patterns of polymorphic shellcode in execution
traces (see[1, 9]):
1. GetPC code: any shellcode must at some point obtain its own address
in memory to read its own body and get environmental information, since
such information can not be known prior to execution. This procedure is
known as GetPC code. In its simplest form, the GetPC code consists of
invoking CALL or FSTENV instructions. A heuristic to detect shellcode
using GetPC code is built by searching for the GetPC seeding instructions
and then ensuring that the execution trace of the code emulated starting
from the GetPC instructions terminates.
2. Payload read: the decryption routine of polymorphic shellcode needs a
large amount of memory accesses to read the encrypted payload. On the
other hand, non-malicious code shows a limited frequency of unique memory
reads. A heuristic to detect polymorphic shellcode is built by observing in
an execution trace some form of GetPC code followed by a number of unique
memory reads exceeding a so-called Payload Reads Threshold (PRT ).
3. WX instructions: the decryption routine of polymorphic shellcode needs
to write the decrypted instructions to memory. Executed instructions re-
siding at memory addresses that were previously written are called WX
instructions (write-execute instructions). A decrypted shellcode consists of
such WX instructions, which may be allocated in a memory area diﬀerent
from the encrypted shellcode. A heuristic to detect polymorphic shellcode
based on these observations consists of checking if, at the end of an execu-
tion trace, the emulator has performed W unique writes and has executed X
WX instructions. In which case the payload is ﬂagged as a non-self-contained
polymorphic shellcode.
An extended set of heuristics is proposed in [3] to identify the presence of
shellcode in arbitrary data streams. These runtime heuristics (which only cover
Windows shellcodes) are based on “fundamental machine-level operations that
are inescapably performed by diﬀerent shellcode types” and are implemented in
388
A. Abbasi et al.
a prototype called Gene. Each runtime-heuristic in Gene is composed of several
conditions which should all be satisﬁed in the speciﬁed order during the execution
of the code for the heuristic to yield true.
1. Kernel32.dll base address resolution: most shellcodes require interact-
ing with the OS through the system call interface or user-level API. In order
to call an API function, the shellcode must ﬁrst ﬁnd its absolute address in
the address space of the process. Kernel32.dll provides two functions (Load-
Library and GetProcAddress) for this. Thus, a common fundamental op-
eration in all above cases is that the shellcode has to ﬁrst locate the base
address of Kernel32.dll. Gene has heuristics recognizing two methods (us-
ing the Process Environment Block or Backwards Searching) of obtaining
the Kernel32.dll base address. This particular heuristics focus on behavior
speciﬁc to Windows shellcode.
2. SEH-based GetPC code: when an exception occurs, the system gener-
ates an exception record that contains the necessary information for handling
it. In particular, the exception record contains the Program Counter (PC)
value at the time the exception was triggered. This information is stored
on the stack. A shellcode can register a custom exception handler, trigger
an exception, and then extract the absolute memory address of the fault-
ing instruction. Gene has a heuristic that detects any shellcode installing a
custom exception handler, including polymorphic shellcode that uses SEH-
based GetPC code.
3. Process memory scanning: some software vulnerabilities allow injecting
only a limited amount of code, usually not enough for a fully functional shell-
code. In most cases though, the attacker has the ability to deploy a second,
much larger payload which will be stored at a random memory location (e.g.,
in a buﬀer allocated in the heap). The (ﬁrst-stage) shellcode then needs to
scan the address space of the process and search for the second-stage shell-
code (also known as the egg), which can be identiﬁed by a long-enough char-
acteristic byte sequence. This type of ﬁrst-stage payload is known as egg-hunt
shellcode. Blindly searching the memory of a process in a reliable way re-
quires some method of determining whether a given memory address is valid
and readable. Gene has a heuristic that recognizes shellcode attempting at
retrieving information about paged memory through Structured Exception
Handler (SEH) and syscall-based scanning methods.
3 Evading EBNIDSes
In this section we present a number of evasion techniques that can be applied to
ensure that polymorphic shellcodes are not detected by state-of-the-art EBNID-
Ses. We present the evasion techniques based on the type of weakness in the
EBNIDS that we exploit to avoid detection. We identify two types of weak-
nesses: (1) implementation limitations and (2) intrinsic limitations. While we
acknowledge that the ﬁrst type of weakness could be mitigated by investing
Emulation Based NIDS
389
more time and resources in the implementation of the EBNIDS (e.g. by a major
security vendor), we think intrinsic limitations cannot be permanently ﬁxed with
the current design of EBNIDSes: There will always be an emulation gap that
can be exploited to avoid detection. Given a target system T and an emulator E
(integrated into the EBNIDS) seeking to emulate T, the emulation ﬁdelity is de-
termined by E’s capacity to a) behave as T (e.g., by ensuring CPU instructions
behave in the same way, or the same API calls are available) and b) have the
same context as T at any given moment (e.g., the same memory image, CPU
state, user-dependent information, etc.). We call emulation gap the behavior or
information present in T but not in E. An attacker who is aware of this gap can
use it to construct shellcode (e.g., an encoder) integrating this information in
such a way that the shellcode will run correctly on T but not on E, thus avoiding
detection.
We conduct a series of practical tests, consisting of implementing the diﬀer-
ent evasion techniques1 and testing if state-of-the-art EBNIDSes are capable of
detection. These tests will also give indications of the feasibility of implement-
ing the diﬀerent evasion techniques. We select Libemu and Nemu as our test
EBNIDSes because they are broadly used as detection mechanisms as part of
large honeynet projects [10, 11].
Libemu [12] is a library which oﬀers basic x86 emulation and shellcode detec-
tion using GetPC heuristics. It is designed to be used within network intrusion
prevention/ detections and honeypots. The detection algorithm of Libemu is im-
plemented by iteratively executing the pre-processing, emulation and heuristic-
based detection steps for each instruction, starting from an entry point iden-
tiﬁed by GetPC code seeding instructions. This process resembles the typical
fetch-decode-execute cycle of real CPUs. Instruction decoding is handled by the
libdasm disassembly library, while the emulation and heuristic-based detection
steps are the core of the library implementation. We use Libemu in its default
conﬁguration, in which shellcodes are detected only by means of the GetPC code
heuristic described in Section 2. We download Libemu (version 0.2.0) from the
oﬃcial project website, and use the pylibemu wrapper to feed our shellcodes to
the EBNIDS.