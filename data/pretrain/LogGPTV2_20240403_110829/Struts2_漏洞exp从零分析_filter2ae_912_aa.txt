# Struts2 漏洞exp从零分析
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x00 前言
从零开始分析struts2代码执行exp，其中不但包括了struts2自己设置的防护机制绕过，还有ognl防护绕过。以s2-057为列，因为有三个版本的exp，从易到难，比较全。文章中包含的前置内容也比较多。
## 0x01 前置知识OGNL
struts2命令执行是利用ognl表达式，所以必须了解ognl。
###  1、HelloWorld
OGNL有三大要素，分别是表达式、Context、根对象。
使用ognl表达式的时候，是使用`Object ognl.Ognl.getValue(String expression, Map context,
Object root)` api执行ognl表达式。  
参数说明：  
`expression` ognl表达式  
`context` 是一个实现了Map接口的对象  
`root` bean对象
来写一个helloworld，将上面抽象的东西实践一番。
    class People{
        public Integer age;
        public String realName;
        public void setAge(Integer age) {
            this.age = age;
        }
        public void setRealName(String name) {
            this.realName = name;
        }
        public Integer getAge() {
            return this.age;
        }
        public String getRealName() {
            return this.realName;
        }
    }
    public class Temp {
        public static void main(String[] args) throws OgnlException {
            People root = new People();
            root.setAge(100);
            root.setRealName("lufei");
            OgnlContext context = new OgnlContext();
            context.put("nikename", "lufeirider");
            //注意非根对象属性，需要加上#号
            Object nikeName = Ognl.getValue("#nikename",context,root);
            System.out.println(nikeName);
            //使用跟对象属性时候，不需要加#号
            Object realName = Ognl.getValue("realName",context,root);
            System.out.println(realName);
            //@[类全名(包括包路径)@[方法名|值名]]
            //执行命令
            Object execResult = Ognl.getValue("@java.lang.Runtime@getRuntime().exec('calc')", context);
            System.out.println(execResult);
        }
    }
输出结果
    lufei
    lufeirider
    java.lang.ProcessImpl@1f17ae12
###  2、OgnlContext类
因为exp中常常利用赋值，改安全属性，而赋值操作在这个类中，所以好好看下这个类如何进行赋值与取值。（源码下载地址：[https://github.com/jkuhnert/ognl）](https://github.com/jkuhnert/ognl%EF%BC%89)  
`public class OgnlContext extends Object implements Map`，它是实现了Map接口的类。
看一下里面的主要方法和属性  
重写了`Map`的`put`方法，遇到`RESERVED_KEYS`里面的key，然后根据key进行使用不同方法进行赋值。如果不在`RESERVED_KEYS`里面的，则放入一个叫`_values`的Map里面。
    public Object put(Object key, Object value)
    {
        Object result;
        if (RESERVED_KEYS.containsKey(key)) {
            if (key.equals(OgnlContext.THIS_CONTEXT_KEY)) {
                result = getCurrentObject();
                setCurrentObject(value);
            } else {
                if (key.equals(OgnlContext.ROOT_CONTEXT_KEY)) {
                    result = getRoot();
                    setRoot(value);
                } else {
                    if (key.equals(OgnlContext.CONTEXT_CONTEXT_KEY)) {
                        throw new IllegalArgumentException("can't change " + OgnlContext.CONTEXT_CONTEXT_KEY
                                + " in context");
                    } else {
                        if (key.equals(OgnlContext.TRACE_EVALUATIONS_CONTEXT_KEY)) {
                            result = getTraceEvaluations() ? Boolean.TRUE : Boolean.FALSE;
                            setTraceEvaluations(OgnlOps.booleanValue(value));
                        } else {
                            if (key.equals(OgnlContext.LAST_EVALUATION_CONTEXT_KEY)) {
                                result = getLastEvaluation();
                                _lastEvaluation = (Evaluation) value;
                            } else {
                                if (key.equals(OgnlContext.KEEP_LAST_EVALUATION_CONTEXT_KEY)) {
                                    result = getKeepLastEvaluation() ? Boolean.TRUE : Boolean.FALSE;
                                    setKeepLastEvaluation(OgnlOps.booleanValue(value));
                                } else {
                                    if (key.equals(OgnlContext.CLASS_RESOLVER_CONTEXT_KEY)) {
                                        result = getClassResolver();
                                        setClassResolver((ClassResolver) value);
                                    } else {
                                        if (key.equals(OgnlContext.TYPE_CONVERTER_CONTEXT_KEY)) {
                                            result = getTypeConverter();
                                            setTypeConverter((TypeConverter) value);
                                        } else {
                                            if (key.equals(OgnlContext.MEMBER_ACCESS_CONTEXT_KEY)) {
                                                result = getMemberAccess();
                                                setMemberAccess((MemberAccess) value);
                                            } else {
                                                throw new IllegalArgumentException("unknown reserved key '" + key + "'");
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } else {
            result = _values.put(key, value);
        }
还重写了`get`方法，跟上面的类似。`Ognl.getValue("#ct['root']",context,root);`，`context['root']`就能获取到保留属性比如获取到保留属性`root
temp.People[@7eda2dbb](https://github.com/7eda2dbb
"@7eda2dbb")`,而非在`_value`中获取。
来看下保留字符
    public static final String CONTEXT_CONTEXT_KEY = "context";
    public static final String ROOT_CONTEXT_KEY = "root";
    public static final String THIS_CONTEXT_KEY = "this";
    public static final String TRACE_EVALUATIONS_CONTEXT_KEY = "_traceEvaluations";
    public static final String LAST_EVALUATION_CONTEXT_KEY = "_lastEvaluation";
    public static final String KEEP_LAST_EVALUATION_CONTEXT_KEY = "_keepLastEvaluation";
    public static final String CLASS_RESOLVER_CONTEXT_KEY = "_classResolver";
    public static final String TYPE_CONVERTER_CONTEXT_KEY = "_typeConverter";
    public static final String MEMBER_ACCESS_CONTEXT_KEY = "_memberAccess";
其中`_memberAccess`是访问权限控制，比较重要。