**Title: MUST, SHOULD, DON'T CARE: TCP Conformance in the Wild**

**Authors:**  
Mike Kosek<sup>1</sup>, Leo Blöcher<sup>1</sup>, Jan Rüth<sup>1</sup>, Torsten Zimmermann<sup>1</sup>, Oliver Hohlfeld<sup>2</sup>

**Affiliations:**  
<sup>1</sup> Communication and Distributed Systems, RWTH Aachen University, Aachen, Germany  
{kosek, bloecher, rueth, zimmermann}@comsys.rwth-aachen.de  
<sup>2</sup> Chair of Computer Networks, Brandenburg University of Technology, Cottbus, Germany

**Abstract:**
Standards define the SHOULD and MUST requirements for protocol implementers to ensure interoperability. For TCP, which carries the majority of Internet traffic, these requirements are detailed in RFCs. Although it is known that not all optional features are implemented and non-conformance exists, it is generally assumed that TCP implementations adhere to the minimum set of MUST requirements. In this paper, we use Internet-wide scans to assess how hosts and paths conform to these basic requirements. We uncover a significant number of hosts and paths that do not meet even the most fundamental requirements. For instance, some hosts fail to correctly handle checksums or experience middlebox interference with TCP options. Additionally, we identify hosts that drop packets when the urgent pointer is set or simply crash. Our publicly available results highlight the need for regular conformance checks, as adherence to even fundamental protocol requirements cannot be taken for granted.

**1. Introduction**
Reliable, interoperable, and secure Internet communication depends on adherence to standards defined in RFCs. These RFCs, while providing essential guidelines, are inherently informal and open to interpretation, despite the use of keywords like SHOULD and MUST. Consequently, non-conformance is expected and known to occur. However, it is generally assumed that Internet hosts widely respect at least a minimal set of mandatory requirements. The extent to which this assumption holds true is, however, unknown.

In this paper, we address this question by conducting Internet-wide active scans to probe whether hosts and paths conform to a set of minimum TCP requirements. This adherence is crucial because TCP is responsible for the bulk of data transmission on the Internet. The basic requirements for a TCP host are defined in RFC 793, which has been in existence for over 40 years and has accumulated over 25 accepted errata. We base our selection of probed requirements on the formalized MUST requirements defined in the drafted update to RFC 793 (RFC 793bis-Draft14).

The importance of TCP in the Internet is reflected in numerous studies assessing its properties and conformance. While many studies have focused on the interoperability of TCP extensions and the impact of middleboxes, the conformance to basic mandatory TCP features has not been extensively studied. We fill this gap by examining the degree to which TCP implementations in the wild conform to MUST requirements. Non-conformance can limit interoperability, extensibility, performance, and security, making it essential to understand where and why non-conformities occur. Identifying these issues can inform future standardization efforts, such as the development of QUIC, where efforts are made to avoid similar misconceptions.

Our large-scale measurement campaign reveals that while the majority of end-to-end connections conform to the tested requirements, a non-trivial number of end-hosts and paths exhibit non-conformities. These non-conformities can break current and future TCP extensions and reduce connectivity. Specifically, we find:
- In a controlled lab study, non-conformance exists at the OS-level: only two tested stacks (Linux and lwIP) pass all tests, while others (including macOS and Windows) fail in at least one category.
- In the wild, approximately 3.5% of hosts do not verify checksums, and middleboxes inject non-conformant MSS values. Setting the urgent pointer can render the target host unreachable.
- At the infrastructure level, 4.8% of Alexa domains show different conformance levels with and without the www. prefix, often due to different infrastructures (e.g., CDN vs. origin server). This can affect the reachability of websites based on the presence of the www. prefix.

**2. Related Work**
Several studies have focused on TCP implementation conformance, middlebox interference, and non-standard behavior. One line of research characterizes remote TCP stacks by their behavior, such as the deployment of TCP tunings and extensions. While these works aim to characterize stack behavior and the availability of TCP extensions, our work specifically focuses on the conformance to mandatory TCP features. Another aspect is the use of behavioral characterizations to fingerprint TCP stacks and mechanisms to defeat fingerprinting.

Middlebox interference is another area of focus, as middleboxes can tune TCP performance and security but also negatively impact protocol mechanisms. Studies have shown that a significant portion of paths tamper with TCP options, such as SACK and ECN. While these studies highlight the impact of middleboxes, they do not focus on conformance to mandatory functionality, which is the gap we address in this study.

**3. Methodology**
We test TCP conformance through active measurements that probe for mandatory TCP features and check adherence to RFCs. We first explain our approach to detect middleboxes, then define the test cases, and validate our methodology in controlled testbed experiments.

**3.1 Middlebox Detection**
Middleboxes can alter TCP header information, leading to non-conformance that could be incorrectly attributed to the probed host. To detect interfering middleboxes, we use the tracebox approach, sending and repeating probes with increasing IP TTLs. We send the first segment multiple times with TTL values from 1 to 30, capturing ICMP time exceeded messages. We encode the TTL in multiple header fields to ensure detection even if some fields are altered. These repetitions help pinpoint non-conformance within the end-to-end path.

**3.2 TCP Conformance Test Cases**
Our test cases check for observable TCP conformance of end-to-end connections by actively probing for a set of minimum requirements. We base our selection on 69 MUST requirements specified in RFC 793bis-Draft14. Most of these requirements address internal state-handling details and cannot be verified via active probing. We focus on eight observable MUST requirements, summarized in Table 1, which are critical for interoperability, security, performance, and extensibility.

**Table 1. Requirements Based on MUSTs (Number from RFC Shown in Brackets) as Defined in RFC 793bis, Draft 14 [27]**

| Requirement | PASS Condition |
|-------------|----------------|
| ChecksumIncorrect (2,3) | Correctly handles incorrect checksums |
| ChecksumZero (2,3) | Correctly handles zero checksums |
| Options | Correctly handles TCP options |

Each test is designed to be critical for the robust operation of TCP. The complexity involved in verifying conformance to other advanced requirements often leads to the exclusion of these seemingly fundamental properties in favor of more specialized research.

**4. Conclusion**
In this paper, we have shed light on the conformance of TCP implementations to basic mandatory requirements. Our findings indicate that while the majority of hosts and paths conform to these requirements, a non-trivial number exhibit non-conformities. These non-conformities can significantly impact interoperability, extensibility, and security. Regular conformance checks are essential to ensure the reliable operation of the Internet.