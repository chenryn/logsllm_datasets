### Audience and Scope Validation

The `aud` value in the response must match the `aud` URI associated with the resource server or the resource. Additionally, the scope validation ensures that the required scope to access the resource is a subset of the scope values returned in the introspection response. If the resource server needs to implement further access control based on the client or the resource owner, it can use the `sub` and `client_id` values.

### Chain Grant Type

When audience restrictions are enforced on OAuth tokens, they can only be used for their intended audience. For example, an API can be accessed with an access token that has an audience restriction corresponding to that API. If this API needs to communicate with another protected API to form a response to the client, the first API must authenticate to the second API. The first API cannot simply pass the access token it received from the client, as this would fail the audience restriction validation at the second API.

The **Chain Grant Type** OAuth 2.0 profile provides a standard way to address this issue. According to this profile, the API hosted on the first resource server must communicate with the authorization server to exchange the OAuth access token it received from the client for a new one that can be used to interact with the other API hosted on the second resource server.

The Chain Grant Type for OAuth 2.0 profile is available at [IETF Draft](https://datatracker.ietf.org/doc/draft-hunt-oauth-chain/).

#### Request Format

The chain grant type request must be generated from the first resource server to the authorization server. The `grant_type` must be set to `http://oauth.net/grant_type/chain` and should include the OAuth access token received from the client. The `scope` parameter should express the required scopes for the second resource in space-delimited strings. Ideally, the scope should be the same as or a subset of the scopes associated with the original access token. If there is any difference, the authorization server can decide whether to issue an access token based on an out-of-band agreement with the resource owner.

Example request:
```http
POST /token HTTP/1.1
Host: authz.server.net
Content-Type: application/x-www-form-urlencoded

grant_type=http://oauth.net/grant_type/chain
oauth_token=dsddDLJkuiiuieqjhk238khjh
scope=read
```

#### Response Format

The response includes an access token with a limited lifetime but no refresh token. To get a new access token, the first resource server must present the original access token again.

Example response:
```http
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
    "access_token": "2YotnFZFEjr1zCsicMWpAA",
    "token_type": "Bearer",
    "expires_in": 1800
}
```

The first resource server can use the access token from this response to communicate with the second resource server. The second resource server then talks to the authorization server to validate the access token (see Figure 9-2).

### Token Exchange

The **OAuth 2.0 Token Exchange** is a draft proposal currently under discussion in the IETF working group. It addresses a similar problem to the Chain Grant Type with some improvements. When the first resource server receives an access token from the client application and wants to communicate with another resource server, it generates a request to the authorization server to exchange the access token it received from the client for a new one.

Example request:
```http
POST /token HTTP/1.1
Host: authz.server.net
Content-Type: application/x-www-form-urlencoded

grant_type=urn:ietf:params:oauth:grant-type:token-exchange
subject_token=dsddDLJkuiiuieqjhk238khjh
subject_token_type=urn:ietf:params:oauth:token-type:access_token
requested_token_type=urn:ietf:params:oauth:token-type:access_token
resource=https://bar.example.com
scope=read
```

#### Key Parameters

- **grant_type**: Indicates a token exchange request. Required.
- **resource**: Carries a reference to the target resource. Optional.
- **audience**: Similar to `resource`, but with a reference to the target resource. Optional.
- **scope**: Indicates the scope values for the new token. Optional.
- **requested_token_type**: Indicates the type of the requested token. Optional.
- **subject_token**: Carries the initial token received by the first API. Required.
- **subject_token_type**: Indicates the type of the `subject_token`. Required.
- **actor_token**: Carries a security token representing the identity of the entity that intends to use the requested token. Optional.
- **actor_token_type**: Indicates the type of the `actor_token`. Required if `actor_token` is present.

Example response:
```http
HTTP/1.1 200 OK
Content-Type: application/json
Cache-Control: no-cache, no-store

{
    "access_token": "eyJhbGciOiJFUzI1NiIsImtpZCI6IjllciJ9",
    "issued_token_type": "urn:ietf:params:oauth:token-type:access_token",
    "token_type": "Bearer",
    "expires_in": 60
}
```

### Dynamic Client Registration Profile

According to the OAuth 2.0 core specification, all OAuth clients must be registered with the OAuth authorization server and obtain a client identifier before any interactions. The **Dynamic Client Registration** OAuth 2.0 profile aims to expose an endpoint for client registration in a standard manner to facilitate on-the-fly registrations.

The dynamic registration endpoint can be secured or not, depending on the authorization server's requirements. The profile does not enforce specific authentication protocols, but it must be secured with TLS. The client application must pass all its metadata to the registration endpoint.

Example request:
```http
POST /register HTTP/1.1
Content-Type: application/json
Accept: application/json
Host: authz.server.com

{
    "redirect_uris": ["https://client.org/callback", "https://client.org/callback2"],
    "token_endpoint_auth_method": "client_secret_basic",
    "grant_types": ["authorization_code", "implicit"],
    "response_types": ["code", "token"]
}
```

#### Important Parameters

- **redirect_uris**: An array of URIs under the control of the client. Must be over TLS.
- **token_endpoint_auth_method**: Supported authentication scheme for the token endpoint.
- **grant_types**: Array of grant types supported by the client.
- **response_types**: Array of expected response types from the authorization server.
- **client_name**: Human-readable name of the client application.
- **client_uri**: URL pointing to the client application.
- **logo_uri**: URL pointing to the logo of the client application.
- **scope**: Space-separated list of scope values.
- **contacts**: List of representatives from the client application.
- **tos_uri**: URL pointing to the terms of service document.
- **policy_uri**: URL pointing to the privacy policy document.
- **jwks_uri**: Endpoint carrying the JSON Web Key (JWK) Set document.
- **software_id**: Unique identifier for the application across its lifecycle.
- **software_version**: Version of the client application.
- **software_statement**: JSON Web Token (JWT) including all the metadata.

The authorization server can decide whether to proceed with the registration and may not accept all suggested parameters. Example response:

```http
HTTP/1.1 200 OK
Content-Type: application/json
Cache-Control: no-store
Pragma: no-cache

{
    "client_id": "iuyiSgfgfhffgfh",
    "client_secret": "hkjhkiiu89hknhkjhuyjhk",
    "client_id_issued_at": 2343276600,
    "client_secret_expires_at": 2503286900,
    "redirect_uris": ["https://client.org/callback", "https://client.org/callback2"]
}
```