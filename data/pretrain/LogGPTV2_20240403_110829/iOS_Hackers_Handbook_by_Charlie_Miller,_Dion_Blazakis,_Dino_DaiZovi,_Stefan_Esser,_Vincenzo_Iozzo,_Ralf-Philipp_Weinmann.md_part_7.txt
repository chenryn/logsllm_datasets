by that protection class is to be made available (always or only when the
device is unlocked, for example).
The different protection classes are implemented through a key hierarchy
where each key is derived from a number of other keys or data. A partial view
of the key hierarchy involved in fi le encryption is shown in Figure 3.1. At the
root of the key hierarchy are the UID key and the user’s passcode. The UID
key is a key that is unique to each individual iOS device and embedded into
the onboard cryptographic accelerator. The actual key itself is not accessible
through software, but the accelerator can use this key to encrypt or decrypt
specifi ed data. When the device is unlocked, the user’s passcode is encrypted
many times using a modifi ed PBKDF2 algorithm to generate the passcode key.
This passcode key is preserved in memory until the device is locked. The UID
key is also used to encrypt a static byte string in order to generate the device
key. The device key is used to encrypt all of the class keys that represent each
of the fi le-related protection classes. Some class keys are also encrypted using
the passcode key, which ensures that the class keys are accessible only when
the device is unlocked.
The iOS data protection internals were documented in precise detail by
researchers at Sogeti and presented at the Hack in the Box Amsterdam confer-
ence in May 2011 (http://code.google.com/p/iphone-dataprotection). For
an in-depth discussion on how data protection is implemented in iOS, consult
this presentation.
Data Protection API
The Data Protection API is designed to let applications declare when fi les on the
fi lesystem and items in the keychain should be decrypted and made accessible
by passing newly defi ned protection class fl ags to existing APIs. The protec-
tion class instructs the underlying system when to automatically decrypt the
indicated fi le or keychain item.
cc0033..iinndddd 4488 44//1166//22001122 55::4433::1133 PPMM
Chapter 3 n Encryption 49
UID Key Passcode
Device Key Passcode Key
NSFileProtectionNone NSFileProtectionCompleteUntilFirstUserAuthentication NSProtectionComplete
Class Key Class Key Class Key
File Key File Key File Key File Key File Key
Figure 3.1: Data protection key hierarchy
To enable data protection for fi les, the application must set a value for the
NSFileProtectionKey attribute using the NSFileManager class. The supported
values and what they indicate are described in Table 3.1. By default, all fi les
have the protection class NSFileProtectionNone, indicating that they may be
read or written at any time.
Table 3.1: File Protection Classes
PROTECTION CLASS DESCRIPTION
NSFileProtection The fi le is protected and can be accessed
Complete only when the device is unlocked.
NSFileProtection The fi le is protected and must be opened
CompleteUnlessOpen when the device is unlocked, but the opened
fi le can be used and written to afterwards,
even when the device is locked.
NSFileProtection The fi le is protected until the device is
CompleteUntilFirst booted and the user enters a passcode for
UserAuthentication the fi rst time.
NSFileProtectionNone The fi le is not protected and it can be
accessed at any time.
cc0033..iinndddd 4499 44//1166//22001122 55::4433::1133 PPMM
50 Chapter 3 n Encryption
The following code shows how to set the NSFileProtectionKey on an existing
fi le. It assumes that the fi le path is in the variable filePath.
// Create NSProtectionComplete attribute
NSDictionary *protectionComplete =
[NSDictionary dictionaryWithObject:NSFileProtectionComplete
forKey:NSFileProtectionKey];
// Set attribute on file at 
[[[NSFileManager] defaultManager] setAttributes:protectionComplete
ofItemAtPath:filePath error:nil];
The classes of the protection items in the keychain are similarly indicated by
specifying the protection class to the SecItemAdd or SecItemUpdate functions.
In addition, the application may specify whether the keychain item can be
migrated onto other devices. If one of the -ThisDeviceOnly protection classes
are used, the keychain item will be encrypted with a key derived from the
device key. This ensures that only the device that created the keychain item can
decrypt it. By default, all keychain items are created with a protection class of
kSecAttrAccessibleAlways, indicating that they can be decrypted at any time
and migrated onto other devices. Table 3.2 shows the available keychain item
protection classes.
Table 3.2: Keychain Item Protection Classes
PROTECTION CLASS DESCRIPTION
kSecAttrAccessible The keychain item is protected and can be
WhenUnlocked accessed only when the device is unlocked.
kSecAttrAccessible The keychain item is protected until the device
AfterFirstUnlock is booted and the user enters a passcode for the
fi rst time.
kSecAttrAccessible The keychain item is not protected and can be
Always accessed at any time.
kSecAttrAccessible The keychain item is protected and can be
WhenUnlocked accessed only when the device is unlocked. It
ThisDeviceOnly cannot be migrated onto another device.
kSecAttrAccessible The keychain item is protected until the device
AfterFirstUnlock is booted and the user enters a passcode for the
ThisDeviceOnly fi rst time. It cannot be migrated onto another
device.
kSecAttrAccessible The keychain item is not protected and can be
AlwaysThisDeviceOnly accessed at any time. It cannot be migrated onto
another device.
cc0033..iinndddd 5500 44//1166//22001122 55::4433::1133 PPMM
Chapter 3 n Encryption 51
To enable data protection on an item in the keychain, you need to set the
kSecAttrAccessible attribute. In the following code, this attribute is set to
kSecAttrAccessibleWhenUnlocked.
NSMutableDictionary *query =
[NSMutableDictionary dictionaryWithObjectsAndKeys:
(id)kSecClassGenericPassword, (id)kSecClass,
@”MyItem”, (id)kSecAttrGeneric,
username, (id)kSecAttrAccount,
password, (id)kSecValueData,
[[NSBundle mainBundle] bundleIdentifier], (id)kSecAttrService,
@””, (id)kSecAttrLabel,
@””, (id)kSecAttrDescription,
(id)kSecAttrAccessibleWhenUnlocked, (id)kSecAttrAccessible,
nil];
OSStatus result = SecItemAdd((CFDictionaryRef)query, NULL);
Attacking Data Protection
To demonstrate the limitations of data protection and what compensating
measures you should take, it is important to understand how strong user pass-
codes need to be and how an attacker can forensically recover data from a lost
or stolen device. This should also demonstrate the importance of application
developers making full use of the Data Protection API for sensitive information
and enterprises enforcing strong passcode requirements on iOS devices that
may hold or process sensitive information.
Attacking User Passcodes
As described earlier, the user’s passcode is used to derive the passcode key
through a modifi cation of the standard PBKDF2 algorithm. In iOS, this PBKDF2
uses AES encryption with the UID key instead of a standard cryptographic
hash function such as SHA-1 or MD5. Because the UID key cannot be directly
accessed by software, this ensures that the passcode key can be derived only
on the device itself. This prevents attackers from cracking the passcode offl ine
and being able to dedicate all the computational resources at their disposal to
doing so. It also ensures that the passcode key is unique per device, even if users
on different devices use the same passcode.
In addition, the PBKDF2 iteration count is variable and depends on the CPU
speed of the iOS device. This ensures that the iteration count is low enough that
users do not perceive a delay when their passcode is being entered, but high
enough such that an attacker mounting a brute-force or dictionary guessing
attack on the passcode will be slowed down signifi cantly.
Based on various confi guration settings, the user interface of an iOS device
may present an increasing delay after an incorrect passcode is entered. Successive
cc0033..iinndddd 5511 44//1166//22001122 55::4433::1133 PPMM
52 Chapter 3 n Encryption
incorrect guesses increase the delay exponentially. In addition, the device
may be confi gured to erase all its data after a number of incorrect passcode
attempts. These defenses, however, are enforced only by the iOS user interface.
If attackers are able to jailbreak the iOS device and run custom software on it,
they may write a custom tool to verify passcode guesses through lower-level
interfaces. For example, the private MobileKeyBag framework includes func-
tions to unlock the device with a given passcode string (MKBUnlockDevice) and
determine whether the device is currently locked (MKBGetDeviceLockState).
These functions are simple front ends to an IOKit driver in the kernel and
allow you to write a simple passcode-guessing tool that runs on jailbroken
phones. An example of such a tool is shown in Listing 3.1. To function properly,
this program must be compiled and given an entitlements blob (this will be
done automatically if it is built from this book’s source code package). If the
compiled tool is run with the -B option, it iterates through all possible four-
digit simple passcodes and attempts to use each to unlock the device. If one
succeeds, it terminates and prints out the guessed passcode.
Listing 3.1: unlock.m
#import 
#import 
#import 
#import 
extern int MKBUnlockDevice(NSData* passcode, int flags);
extern int MKBGetDeviceLockState();
extern int MKBDeviceUnlockedSinceBoot();
void usage(char* argv0)
{
fprintf(stderr, “usage: %s [ -B | -p  ]\n”, argv0);
exit(EXIT_FAILURE);
}
int try_unlock(const char* passcode)
{
int ret;
NSString* nssPasscode = [[NSString alloc] initWithCString:passcode];
NSData* nsdPasscode = [nssPasscode
dataUsingEncoding:NSUTF8StringEncoding];
ret = MKBUnlockDevice(nsdPasscode, 0);
return ret;
}
void try_passcode(const char* passcode)
cc0033..iinndddd 5522 44//1166//22001122 55::4433::1133 PPMM
Chapter 3 n Encryption 53
{
int ret;
NSString* nssPasscode = [[NSString alloc] initWithCString:passcode];
NSData* nsdPasscode = [nssPasscode
dataUsingEncoding:NSUTF8StringEncoding];
ret = MKBUnlockDevice(nsdPasscode, 0);
printf(”MKBUnlockDevice returned %d\n”, ret);
ret = MKBGetDeviceLockState();
printf(”MKBGetDeviceLockState returned %d\n”, ret);
}
void get_state()
{
int ret;
ret = MKBDeviceUnlockedSinceBoot();
printf(”MKBDeviceUnlockedSinceBoot returned %d\n”, ret);
ret = MKBGetDeviceLockState();
printf(”MKBGetDeviceLockState returned %d\n”, ret);
}
int main(int argc, char* argv[])
{
char c;
int i, mode = 0;
char* passcode = NULL;
int ret;
while ((c = getopt(argc, argv, ”p:B”)) != EOF) {
switch (c) {
case ’p’: // Try given passcode
mode = 1;
passcode = strdup(optarg);
break;
case ’B’: // brute force mode
mode = 2;
break;
default:
usage(argv[0]);
}
}
NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
switch (mode) {
(Continued )
cc0033..iinndddd 5533 44//1166//22001122 55::4433::1133 PPMM
54 Chapter 3 n Encryption
Listing 3-1 (continued)
case 0: // Just show state
get_state();
break;
case 1: // Try a given passcode
get_state();
try_passcode(passcode);
get_state();
break;
case 2: // Brute force numeric passcode
get_state();
for (i = 0; i < 10000; i++) {
char pc[5];
sprintf(pc, ”%.4d”, i);
if (try_unlock(pc) == 0) {
printf(”Success! PINCODE %s\n”, pc);
break;
}
}
get_state();
break;
}
[pool release];
return 0;
}
By timing how long each guess takes, you can calculate the on-device cracking
rate and use it to gauge the strength of various passcode complexities. On the
iPhone 4, the passcode-guessing rate is roughly 9.18 guesses per second. This
means that, at worst, a four-digit passcode will be guessed in 18 minutes. The
worst-case passcode guessing times on an iPhone 4 for passcodes of various
lengths and complexity requirements are shown in Table 3.3. The “alphanu-
meric” level of complexity assumes that the passcode is made up from characters
among the 10 digits and both upper- and lower-case letters. The “complex” level
of complexity adds in the 35 symbol characters available on the iOS keyboard.
Because the passcode must be attacked on the device on which it was created,
you can see that a six-digit alphanumeric passcode is pretty strong against a
brute-force attack. Keep in mind that an intelligent dictionary attack may be
much more effi cient.
cc0033..iinndddd 5544 44//1166//22001122 55::4433::1133 PPMM
Chapter 3 n Encryption 55
Table 3.3: Worst-Case On-Device Passcode Guessing Time (iPhone 4)
PASSCODE LENGTH COMPLEXITY TIME
4 Numeric 18 minutes
4 Alphanumeric 19 days
6 Alphanumeric 196 years
8 Alphanumeric 755 thousand years
8 Alphanumeric, Complex 27 million years
iPhone Data Protection Tools
The iPhone Data Protection Tools written by Jean-Baptiste Bédrune and Jean
Sigwald are an open source iOS forensics toolkit. The tools are based on their
reverse engineering of the implementation of Data Protection in iOS 4 and
5 and the ability to boot a custom ramdisk image on the device by exploiting
one of the known DFU-mode bootrom vulnerabilities. (See Chapter 10 for more
details on jailbreaking.)
The iPhone Data Protection Tools boot the targeted device with a custom
ramdisk that enables access via SSH over the USB connection. The custom
ramdisk also includes tools to enumerate device information, perform a brute-
force attack on the four-digit passcodes, and decrypt the system keybag (this
requires knowing or guessing the passcode if one is set). It can also be used to
copy over a raw image of the device’s data partition.
Installation Prerequisites
The iPhone Data Protection Tools are best built on Mac OS X Lion (10.7) with
Xcode 4.2 or later and the iOS 5 SDK. Assuming that you already have these
installed, you will need to install some additional command-line tools, system
software, and Python modules to build and use the iPhone Data Protection Tools.
Some small command-line tools are going to be installed into /usr/local/
bin. You need to create this directory if it does not already exist:
$ sudo mkdir -p /usr/local/bin