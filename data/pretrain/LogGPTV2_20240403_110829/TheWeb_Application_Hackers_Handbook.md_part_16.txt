ner, if a script or collection of scripts is moved to a different directory, or if
HTTP status codes are handled in a custom manner. For this reason it is often
better to use a tool such as Burp Intruder, which allows you to interpret the raw
response information and does not attempt to extract positive and negative
results on your behalf.
HACK STEPS
Several useful options are available when you run Nikto:
1. If you believe that the server is using a nonstandard location for interest-
ing content that Nikto checks for (such as /cgi/cgi-bin instead of
/cgi-bin), you can specify this alternative location using the option –root
/cgi/. For the specific case of CGI directories, these can also be specified
using the option –Cgidirs.
2. If the site uses a custom “file not found” page that does not return the
HTTP 404 status code, you can specify a particular string that identifies
this page by using the -404 option.
3. Be aware that Nikto does not perform any intelligent verification of
potential issues and therefore is prone to report false positives. Always
check any results Nikto returns manually.
Note that with tools like Nikto, you can specify a target application using its
domain name or IP address. If a tool accesses a page using its IP address, the
tool treats links on that page that use its domain name as belonging to a dif-
ferent domain, so the links are not followed. This is reasonable, because some
applications are virtually hosted, with multiple domain names sharing the
same IP address. Ensure that you confi gure your tools with this fact in mind.
Application Pages Versus Functional Paths
The enumeration techniques described so far have been implicitly driven by one
particular picture of how web application content may be conceptualized and
cataloged. This picture is inherited from the pre-application days of the World
Wide Web, in which web servers functioned as repositories of static informa-
tion, retrieved using URLs that were effectively fi lenames. To publish some web
content, an author simply generated a bunch of HTML fi les and copied these
into the relevant directory on a web server. When users followed hyperlinks,
cc0044..iinndddd 9933 88//1199//22001111 1122::0044::4444 PPMM
Stuttard c04.indd V3 - 07/22/2011 Page 94
94 Chapter 4 n Mapping the Application
they navigated the set of fi les created by the author, requesting each fi le via its
name within the directory tree residing on the server.
Although the evolution of web applications has fundamentally changed the
experience of interacting with the web, the picture just described is still appli-
cable to the majority of web application content and functionality. Individual
functions are typically accessed via a unique URL, which is usually the name
of the server-side script that implements the function. The parameters to the
request (residing in either the URL query string or the body of a POST request)
do not tell the application what function to perform; they tell it what information
to use when performing it. In this context, the methodology of constructing a
URL-based map can be effective in cataloging the application’s functionality.
In applications that use REST-style URLs, parts of the URL fi le path contain
strings that in fact function as parameter values. In this situation, by map-
ping URLs, a spider maps both the application functions and the list of known
parameter values to those functions.
In some applications, however, the picture based on application “pages”
is inappropriate. Although it may be possible to shoehorn any application’s
structure into this form of representation, in many cases a different picture,
based on functional paths, is far more useful for cataloging its content and
functionality. Consider an application that is accessed using only requests of
the following form:
POST /bank.jsp HTTP/1.1
Host: wahh-bank.com
Content-Length: 106
servlet=TransferFunds&method=confirmTransfer&fromAccount=10372918&to
Account=
3910852&amount=291.23&Submit=Ok
Here, every request is made to a single URL. The parameters to the request
are used to tell the application what function to perform by naming the Java
servlet and method to invoke. Further parameters provide the information to
use in performing the function. In the picture based on application pages, the
application appears to have only a single function, and a URL-based map does
not elucidate its functionality. However, if we map the application in terms of
functional paths, we can obtain a much more informative and useful catalog of
its functionality. Figure 4-10 is a partial map of the functional paths that exist
within the application.
cc0044..iinndddd 9944 88//1199//22001111 1122::0044::4444 PPMM
Stuttard c04.indd V3 - 07/22/2011 Page 95
Chapter 4 n Mapping the Application 95
WahhBank.
login
WahhBank.
home
TransferFunds. BillPayment. BillPayment. WahhBank.
selectAccounts addPayee selectPayee logout
TransferFunds. BillPayment.
enterAmount enterAmount
TransferFunds. BillPayment.
confirmTransfer confirmPayment
Figure 4-10: A mapping of the functional paths within a web application
Representing an application’s functionality in this way is often more useful
even in cases where the usual picture based on application pages can be applied
without any problems. The logical relationships and dependencies between
different functions may not correspond to the directory structure used within
URLs. It is these logical relationships that are of most interest to you, both in
understanding the application’s core functionality and in formulating possible
attacks against it. By identifying these, you can better understand the expec-
tations and assumptions of the application’s developers when implementing
the functions. You also can attempt to fi nd ways to violate these assumptions,
causing unexpected behavior within the application.
In applications where functions are identifi ed using a request parameter, rather
than the URL, this has implications for the enumeration of application content.
In the previous example, the content discovery exercises described so far are
unlikely to uncover any hidden content. Those techniques need to be adapted
to the mechanisms actually used by the application to access functionality.
cc0044..iinndddd 9955 88//1199//22001111 1122::0044::4444 PPMM
Stuttard c04.indd V3 - 07/22/2011 Page 96
96 Chapter 4 n Mapping the Application
HACK STEPS
1. Identify any instances where application functionality is accessed not by
requesting a specific page for that function (such as /admin/editUser.jsp)
but by passing the name of a function in a parameter (such as
/admin.jsp?action=editUser).
2. Modify the automated techniques described for discovering URL-specified
content to work on the content-access mechanisms in use within the
application. For example, if the application uses parameters that spec-
ify servlet and method names, first determine its behavior when an
invalid servlet and/or method is requested, and when a valid method is
requested with other invalid parameters. Try to identify attributes of the
server’s responses that indicate “hits” — valid servlets and methods. If
possible, find a way of attacking the problem in two stages, first enumer-
ating servlets and then methods within these. Using a method similar to
the one used for URL-specified content, compile lists of common items,
add to these by inferring from the names actually observed, and generate
large numbers of requests based on these.
3. If applicable, compile a map of application content based on functional
paths, showing all the enumerated functions and the logical paths and
dependencies between them.
Discovering Hidden Parameters
A variation on the situation where an application uses request parameters to
specify which function should be performed arises where other parameters
are used to control the application’s logic in signifi cant ways. For example, an
application may behave differently if the parameter debug=true is added to the
query string of any URL. It might turn off certain input validation checks, allow
the user to bypass certain access controls, or display verbose debug informa-
tion in its response. In many cases, the fact that the application handles this
parameter cannot be directly inferred from any of its content (for example, it
does not include debug=false in the URLs it publishes as hyperlinks). The effect
of the parameter can only be detected by guessing a range of values until the
correct one is submitted.
cc0044..iinndddd 9966 88//1199//22001111 1122::0044::4444 PPMM
Stuttard c04.indd V3 - 07/22/2011 Page 97
Chapter 4 n Mapping the Application 97
HACK STEPS
1. Using lists of common debug parameter names (debug, test, hide, source,
etc.) and common values (true, yes, on, 1, etc.), make a large number of
requests to a known application page or function, iterating through all
permutations of name and value. For POST requests, insert the added
parameter to both the URL query string and the message body.
Burp Intruder can be used to perform this test using multiple payload
sets and the “cluster bomb” attack type (see Chapter 14 for more details).
2. Monitor all responses received to identify any anomalies that may indicate
that the added parameter has had an effect on the application’s processing.
3. Depending on the time available, target a number of different pages or
functions for hidden parameter discovery. Choose functions where it is
most likely that developers have implemented debug logic, such as login,
search, and file uploading and downloading.
Analyzing the Application
Enumerating as much of the application’s content as possible is only one ele-
ment of the mapping process. Equally important is the task of analyzing the
application’s functionality, behavior, and technologies employed to identify the
key attack surfaces it exposes and to begin formulating an approach to probing
the application for exploitable vulnerabilities.
Here are some key areas to investigate:
n The application’s core functionality — the actions that can be leveraged
to perform when used as intended
n Other, more peripheral application behavior, including off-site links, error
messages, administrative and logging functions, and the use of redirects
n The core security mechanisms and how they function — in particular,
management of session state, access controls, and authentication mecha-
nisms and supporting logic (user registration, password change, and
account recovery)
cc0044..iinndddd 9977 88//1199//22001111 1122::0044::4444 PPMM
Stuttard c04.indd V3 - 07/22/2011 Page 98
98 Chapter 4 n Mapping the Application
n All the different locations at which the application processes user-supplied
input — every URL, query string parameter, item of POST data, and cookie
n The technologies employed on the client side, including forms, client-
side scripts, thick-client components (Java applets, ActiveX controls, and
Flash), and cookies
n The technologies employed on the server side, including static and dynamic
pages, the types of request parameters employed, the use of SSL, web
server software, interaction with databases, e-mail systems, and other
back-end components
n Any other details that may be gleaned about the internal structure and
functionality of the server-side application — the mechanisms it uses
behind the scenes to deliver the functionality and behavior that are vis-
ible from the client perspective
Identifying Entry Points for User Input
The majority of ways in which the application captures user input for server-
side processing should be obvious when reviewing the HTTP requests that are
generated as you walk through the application’s functionality. Here are the key
locations to pay attention to:
n Every URL string up to the query string marker
n Every parameter submitted within the URL query string
n Every parameter submitted within the body of a POST request
n Every cookie
n Every other HTTP header that the application might process — in particu-
lar, the User-Agent,Referer,Accept,Accept-Language, and Host headers
URL File Paths
The parts of the URL that precede the query string are often overlooked as entry
points, since they are assumed to be simply the names of directories and fi les
on the server fi le system. However, in applications that use REST-style URLs,
the parts of the URL that precede the query string can in fact function as data
parameters and are just as important as entry points for user input as the query
string itself.
A typical REST-style URL could have this format:
http://eis/shop/browse/electronics/iPhone3G/
cc0044..iinndddd 9988 88//1199//22001111 1122::0044::4444 PPMM
Stuttard c04.indd V3 - 07/22/2011 Page 99
Chapter 4 n Mapping the Application 99
In this example, the strings electronics and iPhone3G should be treated as
parameters to store a search function.
Similarly, in this URL:
http://eis/updates/2010/12/25/my-new-iphone/
each of the URL components following updates may be being handled in a
RESTful manner.
Most applications using REST-style URLs are easy to identify given the URL
structure and application context. However, no hard-and-fast rules should be
assumed when mapping an application, because it is up to the application’s
authors how users should interact with it.
Request Parameters
Parameters submitted within the URL query string, message body, and HTTP
cookies are the most obvious entry points for user input. However, some appli-
cations do not employ the standard name=value format for these parameters.
They may employ their own custom scheme, which may use nonstandard query
string markers and fi eld separators, or they may embed other data schemes such
as XML within parameter data.
Here are some examples of nonstandard parameter formats that the authors
have encountered in the wild:
n /dir/file;foo=bar&foo2=bar2
n /dir/file?foo=bar$foo2=bar2
n /dir/file/foo%3dbar%26foo2%3dbar2
n /dir/foo.bar/file
n /dir/foo=bar/file
n /dir/file?param=foo:bar
n /dir/file?data=%3cfoo%3ebar%3c%2ffoo%3e%3cfoo2%3ebar2%3c%2ffoo2%3e
If a nonstandard parameter format is being used, you need to take this into
account when probing the application for all kinds of common vulnerabilities.
For example, suppose that, when testing the fi nal URL in this list, you ignore the
custom format and simply treat the query string as containing a single parameter
called data, and therefore submit various kinds of attack payloads as the value
of this parameter. You would miss many kinds of vulnerabilities that may exist
in the processing of the query string. Conversely, if you dissect the format and
place your payloads within the embedded XML data fi elds, you may immediately
discover a critical bug such as SQL injection or path traversal.
cc0044..iinndddd 9999 88//1199//22001111 1122::0044::4444 PPMM
Stuttard c04.indd V3 - 07/22/2011 Page 100
100 Chapter 4 n Mapping the Application
HTTP Headers
Many applications perform custom logging functions and may log the contents
of HTTP headers such as Referer and User-Agent. These headers should always
be considered as possible entry points for input-based attacks.
Some applications perform additional processing on the Referer header. For
example, an application may detect that a user has arrived via a search engine,
and seek to provide a customized response tailored to the user’s search query.
The application may echo the search term or may attempt to highlight matching
expressions within the response. Some applications seek to boost their search
rankings by dynamically adding content such as HTML keywords, containing
strings that recent visitors from search engines have been searching for. In this
situation, it may be possible to persistently inject content into the application’s
responses by making a request numerous times containing a suitably crafted
Referer URL.
An important trend in recent years has been for applications to present dif-
ferent content to users who access the application via different devices (laptop,
cell phone, tablet). This is achieved by inspecting the User-Agent header. As well
as providing an avenue for input-based attacks directly within the User-Agent
header itself, this behavior provides an opportunity to uncover an additional
attack surface within the application. By spoofi ng the User-Agent header for
a popular mobile device, you may be able to access a simplifi ed user interface
that behaves differently than the primary interface. Since this interface is gener-
ated via different code paths within the server-side application, and may have
been subjected to less security testing, you may identify bugs such as cross-site
scripting that do not exist in the primary application interface.
TIP Burp Intruder contains a built-in payload list containing a large number
of user agent strings for different types of devices. You can carry out a simple
attack that performs a GET request to the main application page supplying
different user agent strings and then review the intruder results to identify
anomalies that suggest a different user interface is being presented.
In addition to targeting HTTP request headers that your browser sends by
default, or that application components add, in some situations you can per-
form successful attacks by adding further headers that the application may
still process. For example, many applications perform some processing on the
client’s IP address to carry out functions such as logging, access control, or
user geolocation. The IP address of the client’s network connection typically
is available to applications via platform APIs. However, to handle cases where
the application resides behind a load balancer or proxy, applications may use
the IP address specifi ed in the X-Forwarded-For request header if it is present.
Developers may then mistakenly assume that the IP address value is untainted
and process it in dangerous ways. By adding a suitably crafted X-Forwarded-For
cc0044..iinndddd 110000 88//1199//22001111 1122::0044::4455 PPMM
Stuttard c04.indd V3 - 07/22/2011 Page 101
Chapter 4 n Mapping the Application 101
header, you may be able to deliver attacks such as SQL injection or persistent
cross-site scripting.
Out-of-Band Channels
A fi nal class of entry points for user input includes any out-of-band channel
by which the application receives data that you may be able to control. Some
of these entry points may be entirely undetectable if you simply inspect the
HTTP traffi c generated by the application, and fi nding them usually requires
an understanding of the wider context of the functionality that the application
implements. Here are some examples of web applications that receive user-