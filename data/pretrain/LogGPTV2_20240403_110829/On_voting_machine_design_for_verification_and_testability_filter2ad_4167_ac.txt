voting machine appears unambiguous, and if the voting machine
ever outputs a screen image whose interpretation is ambiguous, we
can declare the tests a failure. Nonetheless, we still must assume
that, if all tests pass, then every voter will interpret each such screen
image the same way. Consequently, this assumption cannot be fully
rigorously veriﬁed and serves to formalize one of the assumptions
underlying our approach.
Note that the interpretation functions IO and II are not known a
priori. We make no attempt to formally specify or explicitly recon-
struct these functions. Instead, we show that if some interpretation
functions exist that describes how all humans will interpret each
screen image (an unveriﬁed assumption), then our testing process
sufﬁces.
Formal model. We now deﬁne our notion of correctness for the
actual voting machine. A trace of the speciﬁcation machine P is a
sequence (z0, b1, z1, b2, . . . , zℓ) of outputs and inputs, where zj ∈
O and bj ∈ I. A complete trace of P is a sequence (z0, . . . , zℓ)
where z0, . . . , zℓ−1 ∈ Omain and zℓ ∈ Ocast.
A trace of the actual voting machine A is a sequence (z0, b1, . . . , zℓ)
of outputs and inputs, where each zj is a screen image or cast vote
record and each bj is an (x, y)-location where the voter pressed the
screen; a complete trace is one where the z0, . . . , zℓ−1 are screen
images and zℓ is a cast vote record.
If τ = (z0, b1, z1, . . . , zℓ) is a trace of A, we deﬁne I(τ ) =
(IO(z0), II(z0, b1), IO(z1), II(z1, b2), . . . , IO(zℓ)). For a given
I, we say that a trace τA = (z0, b1, z1, . . . , zℓ) of the actual voting
machine A is correct if the trace τP of P on the input sequence
II(z0, b1), II(z1, b2), II(z2, b3) . . . , satisﬁes the relation τP =
I(τA). Equivalently, τA is correct if and only if I(τA) is a valid
trace of P. Let Tr(P) denote the set of traces of P, and Tr(A)
the set of traces of the actual voting machine A. We consider the
actual voting machine correct if Tr(P) = {I(τ ) : τ ∈ Tr(A)}.
Equivalently, A is correct if and only if every feasible trace of A is
correct. Our testing procedure (Section 7) is designed to prove that
the actual voting machine is correct.
3. DESIGN
We designed and implemented a prototype voting machine A; in
this section we describe the details of that design. We start with an
467explanation of the organization of the voting machine followed by a
full speciﬁcation of each module in the machine. We then describe
the behavioral and structural properties of the composition of those
modules. These properties help us verify that A is equivalent to P.
3.1 Component Level Design
We use a LCD touch screen as the user interface to the voting ma-
chine. The (x, y) coordinates corresponding to a user’s touch on
the screen are the input to the voting machine. The output is the
image displayed on the screen. In addition to the voter interface,
the machine interfaces with non-volatile memory: it reads an elec-
tion deﬁnition ﬁle (EDF) from read-only memory and writes the
cast ballot to a separate memory bank at the end of each session.
There is an additional input, reset, which clears all register values
to logic 0. It is intended that reset will be tied to a keyed mech-
anism that only a poll worker has access to. This allows the poll
worker to prepare the voting machine for the next voter, after the
previous voter has ﬁnished. Thus every voting session begins and
ends with a reset. Resetting the state in this way guarantees that
one voter’s session can not affect any other session and that every
voter will have the same experience [26].
In our implementation, a single ballot can have up to 8 contests,
labeled 0–7, and each contest can have up to 12 candidates. To
make the discussion more concrete, we will use these parameters,
but an implementation could easily increase them if needed. The
full architecture is shown in Figure 3.
Election Deﬁnition File. The EDF contains all the parameters
for a particular election, for example, the list of contests and the
candidates in each contest. The contents of the EDF are used by
three modules, Map, Selection State, and Display. The particulars
of the EDF’s content will be explained in the discussion of those
three modules.
Map. The Map module converts the (x, y) coordinate pair of the
voter’s touch on the screen to a signal, button_num, representing
one of 15 logical buttons. For each candidate in a particular contest
there will be a selectable region on the screen. The user touches
somewhere in that region to select the candidate. That region is
called a button. In addition to the buttons for each candidate, every
screen also has the navigation buttons prev and next, which let
the voter move from contest to contest, and a cast button which
allows the user to cast their entire ballot as it currently stands.
In order to know the set of (x, y) coordinates covered by each but-
ton, Map reads a button map from the EDF that provides this infor-
mation for each contest. The input signal contest_num identiﬁes
which contest is currently active so that Map can apply the cor-
rect mapping. In order for Map to work correctly, the button map
has to be well-formatted; we formulated a precise mathematical ex-
pression deﬁning a valid button map in our work, but intuitively it
corresponds to saying each button is deﬁned by two coordinates,
lower left and upper right, and no two buttons may overlap.
By separating out the functionality required to convert an (x, y)
signal to its associated logical button, we are able to more closely
match the structure of P in the remainder of our design. This in
turn makes the veriﬁcation of our implementation simpler.
Controller. The Controller module controls which contest is cur-
rently active.
It is analogous to Mnav in P. The inputs to the
module are button_num, touch, and reset; the outputs are cast,
contest_num, and ss_enable. The only state maintained by the
module is contest_num, the index of the currently active contest.
This value changes accordingly as the voter navigates from contest
to contest. ss_enable is set when (and only when) the voter presses
a button that is valid for selecting or deselecting a candidate in the
current contest. cast is set when the voter presses the cast button
and remains set thereafter, until the machine is reset.
Selection_State. There is one Selection State module for each
possible contest on the ballot: Selection State 0 . . . Selection State 7.
These correspond to the Mi state machines of P. If an election con-
tains fewer than 8 contests, the remaining Selection State modules
will simply go unused. The state of each module, selection_state,
reﬂects the selections that have been made in that contest and is im-
plemented as a 12-bit bitmap. The bit at index i is set if and only if
the ith candidate in that contest is currently selected.
The EDF includes a parameter indicating the maximum number
of candidates a voter is allowed to select for that particular con-
test. If the voter tries to select more than the maximum allowed,
selection_state will not change until one of the current choices is
deselected.
Cast. The Cast module is responsible for writing the ﬁnal values
of the selection state for each contest to non-volatile memory. It
does not maintain any state as the voter proceeds through the vot-
ing session, but once cast is set, the module freezes a snapshot
of all the selection_state and writes these values to non-volatile
memory. The Cast module corresponds to Mcast in P; the transition
to Cast is triggered when the voter presses the cast button on their
screen.
Display. Pvote showed that pre-rendering of screen images could
greatly reduce the complexity of a voting machine [30]. We use
this idea and include in our deﬁnition of the EDF a series of bitmap
images for each contest. The base bitmap for a contest shows the
buttons for each candidate as well as the navigation buttons. There
is an additional overlay bitmap for each candidate in the contest.
Each of these candidate overlays contains only highlighting in the
region corresponding to that candidate’s button. The screen out-
put is produced by displaying one overlay for each candidate that
has been selected in that contest, on top of the base bitmap image.
When the user presses the cast button a ﬁnal screen is displayed
indicating that the ballot has been cast.
The Display module acts as the interface between the electronic vot-
ing machine and the LCD controller. A multiplexor provides the
selection state of the active contest to the Display module, which
then generates the correct output signals to display on the screen.
Figure 3: Design of the voting machine.
4683.2 Component-Level Speciﬁcations
As part of the design process we fully speciﬁed each core com-
ponent so that its behavior under all possible input combinations
was well deﬁned. Once implementation was complete, we were
able to verify it against these speciﬁcations (see Section 5). The
one exception was the Display module; its behavior was well speci-
ﬁed, but we did not formally verify the implementation against the
speciﬁcation, in part because our prototype’s display module is so
simpliﬁed. We brieﬂy summarize the speciﬁcation for each com-
ponent here.
Map. The touch is set if and only if a touch event occurs (the
voter presses somewhere on the touchscreen) and the touch is within
the boundaries of a touchable button for the current screen as de-
ﬁned by the EDF. If a touch event occurs which causes the touch
to be set then the value of button_num will be the logical button
number corresponding to the touchable region pressed by the voter.
Controller. The three output signals should behave as follows:
• cast should be set whenever a valid touch for button_num =
13 occurs. Once set, cast remains unchanged until reset is set.
• ss_enable should be low whenever reset or cast is high. When
neither of those are set then ss_enable should be set when a
valid touch for a candidate selection button is touched.
• contest_num should be low whenever reset is triggered. The
value of the signal should increment whenever a valid next but-
ton is touched and decrements if a valid prev button is touched.
Otherwise the value of contest_num should remain unchanged.
In addition, the next and prev buttons must not cause the value
of contest_num to overﬂow or underﬂow.
Selection_State. If ss_selector is high for an instance of the
Selection State module and the button i has been touched, then the
ith bit of selection_state will be toggled as long as this does not
cause the total number of bits set in selection_state to exceed the
maximum number of candidates that can be selected in this contest.
Cast. In our prototype we use memory to model the cast vote
record that is stored in non-volatile memory. When cast is initially
triggered, we write selection_state[i] into memoryi, for each i;
thereafter, memory remains unchanged.
3.3 System-Level Behavioral Properties
We identify a number of properties pertaining to the behavior of
the voting machine as a whole. These properties are necessary but
not sufﬁcient for correct behavior. See Appendix A for the formal
speciﬁcation of these properties in linear temporal logic (LTL) [23].
In Section 5 we discuss how we veriﬁed these properties against our
implementation.
1. At any given time, no more than one contest can be active.
2. A contest i is active if and only if the current contest number is i.
3. The total number of candidates selected for any contest is not
more than the maximum allowed as given by the election deﬁ-
nition ﬁle.
4. The selection state of a contest can not change if neither reset
nor ss_selector are set.
5. The selection state of a contest can not change if the pressed
button is not within the set of valid selection buttons. Thus, the
next, prev, and cast buttons cannot affect the selection state
of any contest.
6. Setting reset clears the selection state for all contests.
7. On reset, the current contest number and cast are reset and se-
lection mode is disabled.
8. Once the voting machine enters cast mode, cast is not cleared
until the next cycle of the voting machine beginning with reset.
9. Once the voting machine enters cast mode, the selection states
of all the contests become frozen and do not change until the
next cycle beginning with reset.
10. Selection of a candidate and casting of votes can not take place
at the same time.
3.4 Structural Properties
The voting machine is structured to provide several properties, cho-
sen so that testing will sufﬁce to establish the equivalence of the im-
plemented voting machine with the speciﬁcation voting machine.
Section 6 discusses how we veriﬁed all of these properties.
1. The voting machine should be a deterministic ﬁnite state ma-
chine.
2. Contests should be independent of each other, i.e., the selection
state of one contest should not have any inﬂuence on the evolu-
tion of the selection state of any other contest.
3. A contest’s selection state after a single transition should depend
only on that contest’s previous selection state, the active contest
number, and whether any selection button was pressed and if so
which one.
4. If a navigation button is pressed, the next active contest number
should depend only on the previous active contest number and
which button was pressed. Otherwise, the active contest number
should not change.
5. For any ﬁxed EDF, when in main mode (i.e., before the ballot
is cast), the output screen should be a deterministic function of
the active contest number and the selection state of the current
contest; moreover, this function should be bijective.
6. The ﬁnal memory storing the selection state should be com-
pletely determined by the selection states of the contests before
cast.
IMPLEMENTION
4.
We implemented the above design in Verilog, a hardware descrip-
tion language for digital circuits. We synthesized our implementa-
tion onto actual hardware, namely, the Altera FPGA, Nios II Em-
bedded Evaluation Kit, Cyclone III Edition.
Our implementation differs from the design in one respect: our
current prototype does not include an interface to non-volatile stor-
age. In particular, while we would expect the EDF and cast vote
records to be stored on ﬂash memory in a ﬁnished implementation,
our prototype uses volatile memory (e.g., registers) to simulate this
functionality. This represents a limitation of our current engineer-
ing and is not a fundamental shortcoming of our approach.
This limitation has several implications:
1. In our prototype, the EDF is hard-coded into register arrays.
Map has a register array containing a button map for a partic-
ular election and Selection State has a register array storing the
maximum number of candidates a voter can choose in each con-
test. In a ﬁnished implementation, this data might be read in
from removable ﬂash memory.
2. In our prototype, Cast writes the cast vote record to a regis-
ter array called memory instead of to external storage. When
we verify properties about the cast ballot, we verify them on
memory. A ﬁnished implementation might write the cast vote
record to external storage, such as a removable SD ﬂash card;
then we’d also need to verify the interface to the SD card.
3. In our prototype, Display outputs an extremely simpliﬁed screen
image indicating the candidates chosen for the current contest.
469As a result, the current screen images would not be usable by
anyone other than the system developers. This limitation exists
because our FPGA has only a limited amount of on-chip mem-
ory available for storage of the bitmap images.
In a ﬁnished
implementation, the EDF would be read from external storage,
making it possible to store and use high-resolution images.
5. FORMAL VERIFICATION
Using formal veriﬁcation techniques we show that our implemen-
tation follows our design speciﬁcations and satisﬁes the desired be-
havioral properties. We used Cadence SMV [17], a symbolic model
checker, for veriﬁcation. The tool includes a Verilog-to-SMV trans-
lator so that we were able to run the veriﬁcation directly on our
Verilog implementation.
5.1 Component-Level Speciﬁcations
As mentioned in Section 3.2, with the exception of the Display mod-
ule, we fully speciﬁed the behavior of each component in the ma-
chine under all possible inputs. For all but the Map module, we
used Cadence SMV to verify that the implementation conforms to
these speciﬁcations. Speciﬁcally, we used the SMV notion of a
layer, a formal speciﬁcation written in the SMV language. The
model checker veriﬁes that the implementation reﬁnes the layer,
that is, that all possible behaviors of the implementation are consis-