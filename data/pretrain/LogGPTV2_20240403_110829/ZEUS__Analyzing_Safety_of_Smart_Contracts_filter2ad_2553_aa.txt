title:ZEUS: Analyzing Safety of Smart Contracts
author:Sukrit Kalra and
Seep Goel and
Mohan Dhawan and
Subodh Sharma
ZEUS: Analyzing Safety of Smart Contracts
Sukrit Kalra
IBM Research
Seep Goel
IBM Research
Mohan Dhawan
IBM Research
PI:EMAIL
PI:EMAIL
PI:EMAIL
Subodh Sharma
IIT Delhi
PI:EMAIL
Abstract—A smart contract is hard to patch for bugs once it is
deployed, irrespective of the money it holds. A recent bug caused
losses worth around $50 million of cryptocurrency. We present
ZEUS—a framework to verify the correctness and validate the
fairness of smart contracts. We consider correctness as adherence
to safe programming practices, while fairness is adherence to
agreed upon higher-level business logic. ZEUS leverages both
abstract interpretation and symbolic model checking, along with
the power of constrained horn clauses to quickly verify contracts
for safety. We have built a prototype of ZEUS for Ethereum
and Fabric blockchain platforms, and evaluated it with over
22.4K smart contracts. Our evaluation indicates that about 94.6%
of contracts (containing cryptocurrency worth more than $0.5
billion) are vulnerable. ZEUS is sound with zero false negatives
and has a low false positive rate, with an order of magnitude
improvement in analysis time as compared to prior art.
I.
INTRODUCTION
Blockchain is the design pattern that underpins the Bitcoin
cryptocurrency [70]. However, its use of consensus to validate
interaction amongst participant nodes is a key enabler for
applications that require mutually distrusting peers to conduct
business without
the need for a trusted intermediary. One
such use is to enable a smart contract, which programatically
encodes rules to reﬂect any kind of multi-party interaction.
With over $1.4 billion invested in blockchain last year [3],
and the increasing trend towards autonomous applications,
smart contracts are fast becoming the preferred mechanism to
implement ﬁnancial instruments (e.g., currencies, derivatives,
wallets, etc.) and applications such as decentralized gambling.
is
enforced by the blockchain’s consensus protocol, it remains
the prerogative of the participating entities to (i) verify the
smart contract’s correctness, i.e., the syntactic implementation
follows the best practices, and (ii) validate its fairness, i.e., the
code adheres to the agreed upon higher-level business logic for
interaction. While manual auditing of contracts for correctness
is possible to an extent, it still remains laborious and error
prone. Automatic formal auditing, on the other hand, requires
specialized tools and logic. The problem is exacerbated by the
fact that smart contracts, unlike other distributed systems code,
are immutable and hard to patch in case of bugs, irrespective of
While the faithful execution of a smart contract
Network and Distributed Systems Security (NDSS) Symposium 2018
18-21 February 2018, San Diego, CA, USA
ISBN 1-1891562-49-5
http://dx.doi.org/10.14722/ndss.2018.23082
www.ndss-symposium.org
(1)
(2)
(3)
(4)
(5)
(6)
(7)
(8)
(9)
while (Balance > (depositors[index].Amount * 115/100)
&& index uint) private userBalances;
function withdrawBalance() {
uint amountToWithdraw = userBalances[msg.sender];
if (amountToWithdraw > 0) {
msg.sender.call(userBalances[msg.sender]);
userBalances[msg.sender] = 0;
}
}
...
}
contract AttackerContract {
function () {
Wallet wallet;
wallet.withdrawBalance();
}
}
Fig. 2: Same-function reentrancy attack.
words, only a restricted set of approved participants have the
right to validate transactions. This restricted model provides
better privacy, scalability and ﬁne grained access control over
users and their data. Hence, most private blockchains for
ﬁnancial institutions and other enterprises follow this model.
Permissioned blockchains do not typically use proof-based
mining to reach a consensus since all the actors are known;
instead they use consensus algorithms such as RAFT [71],
Paxos [65] or PBFT [57] to achieve higher network throughput.
III. MOTIVATION
We describe the broad classes of correctness and fairness
issues in smart contracts. We also describe potential attacks
due to correctness bugs that can be exploited to gain ﬁnancial
beneﬁts. None of the attacks discussed exploit any blockchain
or Solidity vulnerabilities or compiler implementation bugs.
A. Incorrect Contracts
An incorrect contract uses constructs or programming
paradigms that are not well understood in the context of the
blockchain platform, resulting in a loss of money.
(I) REENTRANCY. A function is reentrant
it can be
if
interrupted while in the midst of its execution, and safely
re-invoked even before its previous invocations complete
execution. However, Solidity does not support concurrency,
nor are there any interrupts that can halt a function execution.
In spite of these safeguards, Solidity allows multiple parallel
external invocations, which can invoke the same function using
the call family of constructs,
i.e., call, callcode and
delegatecall 2. If an externally invokable function does not
correctly manage the global state, it will be susceptible to a
same function reentrancy attack, such as TheDAO bug [1].
Reentrancy attacks can also happen if a contract’s global state
is not correctly managed across invocations of two different
functions that operate upon the same global state. This bug is
called cross-function race condition [8].
While both call and send can be used for transfer of
Ether 3, send cannot cause reentrancy because send limits
the fallback function to 2300 gas, which neither allows any
2Without loss of generality, we use call to refer to these constructs.
3Ether is Ethereum’s virtual currency. Gas is the execution fee for every
operation made on Ethereum.
(1)
(2)
(3)
(4)
(1)
(2)
(2)
(3)
(4)
(5)
(6)
(7)
if(gameHasEnded && !prizePaidOut) {
winner.send(1000); // send a prize to the winner
prizePaidOut = True;
}
Fig. 3: Unchecked send [46].
for (uint i=0; i < investors.length; i++) {
if (investors[i].invested == min investment) {
payout = investors[i].payout;
if (!(investors[i].address.send(payout)))
throw;
investors[i] = newInvestor;
}
}
Fig. 4: Failed send [38].
storage write nor function calls [6], [15]. Oyente [68], however,