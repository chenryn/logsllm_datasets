# 5.7 Real-World Workloads Analysis

## 5.7.1 Average Latency with Over-Provisioning

- **(a) Server Storage in Enterprise**
- **(b) Server Storage in University**
- **(c) Miscellaneous I/O Workloads**

**Figure 12:** The average latency of running real-world workloads when the over-provisioning is changed from 20% to 30%. The time for holding retained invalid pages is set to 20 days.

## 6.4 Impact on SSD Lifetime

Each flash block has a limited endurance, making it essential to ensure that FlashGuard can provide an acceptable SSD lifetime. Two metrics are used to evaluate FlashGuard’s impact on SSD lifetime:

1. **Wear Balance:** This measures whether the flash blocks age evenly. We use the standard deviation of the remaining lifetime of all flash blocks to evaluate the wear balance.
2. **Write Amplification Factor (WAF):** This metric evaluates the actual amount of physical write traffic relative to the logical amount of write traffic. A higher WAF indicates more write traffic, which shortens the SSD's lifespan.

### Additional Page Movements for Retaining Invalid Pages

As the time for holding retained invalid pages in the flash device increases, the WAF slightly increases. However, this is less of a concern. For an SSD with a typical lifetime of 160 to 250 weeks, the slight increase in WAF reduces its lifetime by only one or two weeks, which is acceptable in practice.

FlashGuard aims to achieve the same wear balance as an unmodified SSD because their basic strategies for garbage collection (GC) and block allocation are the same. During GC, hot blocks (frequently erased) are swapped with cold blocks to maintain even wear distribution.

For some workloads, such as those in enterprise servers, FlashGuard achieves even better wear balance than unmodified SSDs (see Figure 13). This is because FlashGuard delays GC execution on some flash blocks, affecting the wear distribution among the flash blocks. Overall, experiments with real-world workload traces demonstrate that FlashGuard maintains wear balance across all flash blocks, comparable to state-of-the-art SSDs.

**Figure 13:** The normalized wear balance (lower is better) across all flash blocks after running real-world workloads.

- **(a) Server Storage in Enterprise**
- **(b) Server Storage in University**
- **(c) Miscellaneous I/O Workloads**

**Figure 14:** The normalized write amplification factor (WAF) of FlashGuard compared to Unmodified SSD (lower is better).

- **(a) Server Storage in Enterprise**
- **(b) Server Storage in University**
- **(c) Miscellaneous I/O Workloads**

For storage workloads in enterprise and university settings, the WAF of FlashGuard is the same as that of unmodified SSDs. For I/O-intensive workloads, the WAF increases by up to 4%, due to additional page movements for retaining invalid pages.

## 7. Discussion and Future Work

According to our study in § 2, few encryption ransomware variants have been developed considering SSD characteristics. In this section, we discuss potential ransomware attacks against FlashGuard and future research directions.

### Exploiting Storage Capacity

To support data recovery, FlashGuard retains potentially encrypted data and prevents them from being discarded by garbage collection. An attacker might exploit storage capacity by continuously writing to occupy available space, forcing FlashGuard to release its hold. Another potential attack involves ransomware repeatedly reading and overwriting data to cause FlashGuard to retain a large amount of garbage data. However, such attacks are ineffective. FlashGuard refuses to release data if the holding period has not expired, even if the SSD is full. When the SSD is full, FlashGuard stops issuing I/O requests, resulting in filesystem operation failures in the OS. Thus, although ransomware may have kernel privileges, it cannot prevent users from noticing abnormal events.

### Timing Attacks

Time is critical for both the security and performance of FlashGuard. The longer FlashGuard holds stale data, the more overhead it imposes on I/O operations. To achieve high storage performance, a user might set a shorter lifespan for holding data, exposing them to the threat of ransomware. Ransomware could slow down the pace of encrypting data and notifying victims.

As discussed in § 2, ransomware variants have evolved to rapidly lock up user data and collect ransom to avoid detection. In § 6, we demonstrated that FlashGuard typically incurs negligible overhead to regular I/O operations, even with a 20-day holding period. This implies that FlashGuard is effective in defending against such ransomware attacks, significantly increasing the risk of ransomware being caught and thwarting rapid rewards for ransomware authors. We plan to explore new detection and defense mechanisms against timing attacks in the future.

### Secure Deletion

FlashGuard retains overwritten contents for recovery, which intuitively contradicts the objective of secure deletion, which requires irrecoverable data deletion. However, FlashGuard can be made compatible with secure deletion by using a user-specified encryption key to encrypt the stale data. This way, users can still perform data recovery without worrying about data leakage, as adversaries cannot restore "securely deleted data" without the encryption key. As future work, we will develop this solution to make FlashGuard compatible with secure deletion.

### Protecting Against Encryption Ransomware on Various Platforms

FlashGuard leverages the intrinsic properties of flash to protect against encryption ransomware, making it applicable to any flash-based storage device. For example, mobile devices, which have used flash to store personal data for decades, share the same intrinsic properties as SSDs in personal computers and enterprise servers. Our approach can be deployed on mobile platforms to enhance their storage systems and protect users against the growing threat of mobile ransomware, such as Simplocker.

## 8. Related Work

The most closely related lines of work to FlashGuard are research on ransomware detection and data recovery.

### Ransomware Detection

Previous research has focused on demystifying ransomware attacks and detecting their footprints. Several defense mechanisms have been proposed, such as UNVEIL [19], a dynamic analysis system that characterizes ransomware behavior, and CryptoDrop [44], which alerts users when it detects a process tampering with user data. Recent research also uses machine learning techniques, like EldeRan [45], to classify programs as ransomware.

While these mechanisms effectively detect ransomware, they do not provide sufficient remedies for the damage caused. Ransomware can still lock up important files, leading victims to pay ransoms to minimize damage. In this paper, we focus on a solution to offset the damage to user files. To our knowledge, FlashGuard is the first system designed to reinstate damage caused by encryption ransomware.

### Data Recovery

Data recovery techniques, such as backup systems, allow users to restore data to pre-encryption states. Commonly adopted backup systems include dump and tar utilities on Unix systems and Volume Shadow Copy Service on Windows. Log-structured and journaling file systems also support data recovery by maintaining persistent logs. However, these systems require frequent backups and can be disabled or circumvented by ransomware with kernel privileges. FlashGuard, designed at the firmware level, is naturally resistant to such attacks.

## 9. Conclusion

In this paper, we develop FlashGuard, a ransomware-tolerant SSD that retains data potentially encrypted by ransomware. FlashGuard demonstrates that victims can efficiently reinstate damage to their files caused by encryption ransomware. The design takes advantage of intrinsic flash properties, introducing negligible overhead to regular storage operations and having a minimal impact on SSD lifetime. Compared to existing detection mechanisms, FlashGuard is the first firmware-level defense system, naturally resistant to ransomware exploiting kernel vulnerabilities or running with kernel privileges.

## Acknowledgments

We thank the anonymous reviewers for their helpful comments and feedback. This research was supported in part by NSF grant 1526798, ARO W911NF-13-1-0421 (MURI), NSF CNS-1422594, and NSF CNS-1505664.

## References

[References listed here as provided in the original text.]

---

This revised version aims to improve clarity, coherence, and professionalism while maintaining the technical details and structure of the original text.