      },
      eo = {
        description = 'one-time',
        template = '** %?\n %T',
        target = '~/org/calendar.org',
        headline = 'one-time'
      },
      -- Example using a lua function
      r = {
        description = "Repo URL",
        template = "* [[%x][%(return string.match('%x', '([^/]+)$'))]]%?",
        target = "~/org/repos.org",
      }
    }
    ```
* New: [Synchronize with external calendars.](orgmode.md#synchronize-with-external-calendars)
    You may want to synchronize your calendar entries with external ones shared with other people, such as nextcloud calendar or google.
    The orgmode docs have a tutorial to [sync with google](https://orgmode.org/worg/org-tutorials/org-google-sync.html) and suggests some orgmode packages that do that, sadly it won't work with `nvim-orgmode`. We'll need to go the "ugly way" by:
    * Downloading external calendar events to ics with [`vdirsyncer`](vdirsyncer.md).
    * [Importing the ics to orgmode](#importing-the-ics-to-orgmode)
    * Editing the events in orgmode
    * [Exporting from orgmode to ics](#exporting-from-orgmode-to-ics)
    * Uploading then changes to the external calendar events with [`vdirsyncer`](vdirsyncer.md).
* New: [Comparison with Markdown.](orgmode.md#comparison-with-markdown)
    What I like of Org mode over Markdown:
    * The whole interface to interact with the elements of the document through key bindings:
      * Move elements around.
      * Create elements
    * The TODO system is awesome
    * The Agenda system
    * How it handles checkboxes  CliRunner:
        """Configure the Click cli test runner."""
        return CliRunner(
            env={
                'PASSWORD_STORE_DIR': '',
                'GNUPGHOME': '',
                'PASSWORD_AUTH_DIR': '',
            },
            mix_stderr=False
        )
    ```
    If you define the fixture in `conftest.py` you may need to use another name than `runner` otherwise it may be skipped, for example `cli_runner`.
### [Python Snippets](python_snippets.md)
* New: [Substract two paths.](python_snippets.md#substract-two-paths)
    It can also framed to how to get the relative path between two absolute paths:
    ```python
    >>> from pathlib import Path
    >>> p = Path('/home/lyz/')
    >>> h = Path('/home/')
    >>> p.relative_to(h)
    PosixPath('lyz')
    ```
# DevOps
## Continuous Integration
### [Mypy](mypy.md)
* New: [Module "typing" has no attribute "Annotated".](mypy.md#module-"typing"-has-no-attribute-"annotated")
    This one happens only because `annotated` is not available in python  /sys/class/backlight/intel_backlight/brightness
    ```
### [aleph](aleph.md)
* New: Add application operations.
    - [How to upgrade it](aleph.md#upgrade-aleph)
    - [Create Aleph admins](aleph.md#create-aleph-admins)
    - [Remove a group](aleph.md#remove-a-group)
### [i3wm](i3wm.md)
* New: [Move the focus to a container.](i3wm.md#move-the-focus-to-a-container)
    Get the container identifier with `xprop` and then:
    ```bash
    i3-msg '[title="khime"]' focus
    i3-msg '[class="Firefox"]' focus
    ```
* New: [Interact with Python.](i3wm.md#interact-with-python)
    Install the `i3ipc` library:
    ```bash
    pip install i3ipc
    ```
    Create the connection object:
    ```python
    from i3ipc import Connection, Event
    i3 = Connection()
    ```
    Interact with i3:
    ```python
    focused = i3.get_tree().find_focused()
    print('Focused window %s is on workspace %s' %
          (focused.name, focused.workspace().name))
    outputs = i3.get_outputs()
    print('Active outputs:')
    for output in filter(lambda o: o.active, outputs):
        print(output.name)
    i3.command('focus left')
    for container in i3.get_tree().find_fullscreen():
        container.command('fullscreen')
    root = i3.get_tree()
    print(root.name)
    for con in root:
        print(con.name)
    def on_workspace_focus(self, e):
        # The first parameter is the connection to the ipc and the second is an object
        # with the data of the event sent from i3.
        if e.current:
            print('Windows on this workspace:')
            for w in e.current.leaves():
                print(w.name)
    def on_window_focus(i3, e):
        focused = i3.get_tree().find_focused()
        ws_name = "%s:%s" % (focused.workspace().num, focused.window_class)
        i3.command('rename workspace to "%s"' % ws_name)
    i3.on(Event.WORKSPACE_FOCUS, on_workspace_focus)
    i3.on(Event.WINDOW_FOCUS, on_window_focus)
    i3.main()
    ```
# Other
* Correction: Update introduction.
    The method was described by David Allen in a book with the same name. It's clear that the book is the corner stone of David's business. He is selling his method on every word, some times to the point of tiresome. It's also repeats the same ideas on different parts of the book, I guess that's good in terms of sticking an idea in the people's mind, but if you're already convinced and are trying to sum up the book it's like, hey, I have 90% of the valuable contents of this chapter already in my summary. It's obvious too the context of the writer, that the book was written a while ago and who does it write to. It talks quite often about assistants, bosses of high firm companies he's helped, preferring low-tech physical solutions over digital ones, a lot of references about parenting... If you're able to ignore all the above, it's actually a very good book. The guy has been polishing the method for more than 30 years, and has pretty nice ideas that can change how you manage your life.
    My idea of this summary is to try to extract the useful ideas removing all those old-fashioned capitalist values from it.
* New: Guides on processing your inbox.
    Remember to follow the next rules while processing the items:
    - Process the top item first: that way you treat each element equally, so the "least" important ones are not left dangling forever in your inbox thus thwarting it's purpose.
    - Process one item at a time.
    - Never put anything back into “in.”
    For each element you need to ask yourself: "What's the next action?".
* New: How to clarify your inbox items.
    If you can do something about the element, you need to think which is the next physical, visible activity that would be required to move the situation towards closure. It's tricky, something like "set meeting" won't do because it's not descriptive of physical behaviour. There is still stuff to decide how, when, with whom, if you don't do it now you won't empty your head and the uncertainty will create a psychological gap that will make you procrastinate, so define the next action now. "Decide what to do about X" doesn't work either, you may need to gather more information on the topic, but deciding doesn't take time.
    Once you have the next action, if it can be done in two minutes or less, do it when you first pick the item up. Even if it is not a high-priority one, do it now if you’re ever going to do it at all. The rationale for the two-minute rule is that it’s more or less the point where it starts taking longer to store and track an item than to deal with it the first time it’s in your hands. Two minutes is just a guideline. If you have a long open window of time in which to process your in-tray, you can extend the cutoff for each item to five or ten minutes. If you’ve got to get to the bottom of all your input rapidly, then you may want to shorten the time to one minute, or even thirty seconds, so you can get through everything a little faster.
    There’s nothing you really need to track about your two-minute actions. Just do them. If, however, you take an action and don’t finish the project with that one action, you’ll need to clarify what’s next on it, and manage that according to the same criteria.
    If the next action is going to take longer than two minutes, ask yourself, “Am I the best person to be doing it?” If not, hand it off to the appropriate person, in order of priority:
    * Send an e-mail.
    * Write a note or an over-note on paper and route it to that person.
    * Send it a instant message.
    * Add it as an agenda item on a list for your next real-time conversation with that person.
    * Talk with her directly, either face-to-face or by phone.
    When you hand it off to someone else, and if you care at all whether something happens as a result, you’ll need to track it. Depending on how active you need to be it can go to your Waiting list or to your tickler.
* Correction: Deprecate pydo.
    I'm happy with orgmode so far, so I'm not going to continue it's
    development