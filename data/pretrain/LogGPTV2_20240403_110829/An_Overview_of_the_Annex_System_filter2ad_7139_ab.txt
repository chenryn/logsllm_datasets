### Trusted and Untrusted Applications
- **Trusted Applications**: These are applications that have been vetted and are considered secure.
- **Untrusted Applications**: These are applications that have not been vetted or are known to be insecure.

### System Components
- **Method Dispatcher**: Manages the execution of method invocations, ensuring they run in separate threads with limited access.
- **Object Capability (ObjCap) System**: Ensures that objects can only be accessed through capabilities, providing a secure and controlled environment.
- **Scheduler**: Allows for parallel execution of method invocations, handling blocking operations efficiently. The first-generation scheduler is non-preemptive, requiring cooperative multitasking.
- **Crypto Module**: Provides cryptographic functions for secure communication.
- **Tunnels**: Facilitates secure, mutually authenticated communication between object-capability kernels on different devices using Diffie-Hellman Station-to-Station protocol and AES encryption.
- **Untrusted OS**: The operating system running on the untrusted hardware.
- **Trusted Hardware**: Secure hardware components that can be trusted.
- **Untrusted Hardware**: Hardware components that are not fully trusted.
- **Capability Kernel**: The core component that enforces capability-based access control.
- **Network**: Manages network communications.
- **Other Devices**: Additional hardware or peripherals connected to the system.

### Figure 1: Software Architecture
The figure illustrates the software architecture of the first-generation Annex Capability Kernel and its relationship with the untrusted surrogate platform. Trusted and untrusted applications can communicate either within the same platform or with trusted applications on different hosts via secure tunnels.

### Scheduler
The scheduler allows multiple method invocations to be serviced in parallel, enabling efficient processing of blocking operations like network communication. Each method executes in a separate thread with restricted access to the target object and invocation parameters. Although the current prototype does not strictly enforce this isolation, future versions will include hardware and software features to ensure absolute separation. The first-generation scheduler is non-preemptive, necessitating cooperative multitasking, which can cause issues with synchronous method calls. We are updating our programming model and scheduler to address these limitations [11].

### Tunnels Manager
The tunnels manager provides secure, mutually authenticated, and confidential communication between object-capability kernels on different devices. It uses the Diffie-Hellman Station-to-Station protocol with Elliptic-Curve Cryptography (ECC) for mutual authentication and symmetric-key agreement. The Advanced Encryption Standard (AES) in CFB mode ensures data confidentiality. Tunnels can be cached for efficiency, and multiple communication channels can be multiplexed over a single tunnel. The tunnels are directly integrated with the dispatcher, which handles network-transparent method invocation and enforces capability-based access control.

### Method Dispatcher
The dispatcher manages both network-transparent method invocation and enforces capability-based access control to local objects. This centralized checking mechanism prevents errors or abuse during capability verification. Since Annex capabilities are the exclusive object naming mechanism, the dispatcher provides mandatory access control that cannot be bypassed. The dispatcher relies on an object-type database, an object store, and a password capability catalogue. Before a method is invoked, the validity of the capability is checked against the catalogue, and if it matches, the object is loaded from the store, and the method is executed.

### Development Environment
Our development environment includes tools for writing and compiling object type definitions. Each definition must include the object's method code and a description of the internal state, which is saved in the object store. Initially, we relied on static compile-time definitions of all possible object types, but we have now developed a loader that allows new object types to be instantiated at runtime. This enables dynamic replacement of packaged collections of object-type definitions, providing a flexible framework for developing and deploying arbitrary services to extend functionality.

### Distribution and Revocation
The Annex security architecture supports various capability distribution and revocation schemes. Possible distribution mechanisms include centralized authority hierarchies and decentralized "webs of trust" similar to PGP [30]. Our current proof-of-concept services use simple distribution schemes to experiment with basic ideas before implementing more sophisticated mechanisms. Once a capability is distributed, it can only be canceled by revoking the capability. While revocation is straightforward by removing the capability from the appropriate catalogue, determining which capabilities require revocation is challenging without information on capability propagation between devices. We have developed a kernel-based algorithm for recording this information in a capability propagation graph, similar to Gligor's system [9], but adapted for distributed and mutually suspicious environments. Our revocation system stores only local capability propagation information, and all devices cooperate to process this information in a distributed manner when revocation is necessary. This approach is similar to Millerâ€™s membrane pattern [16], but with capability tracking performed by the kernel rather than the objects themselves.

### The Annex Network
The Annex network architecture is designed to reflect an ideal communication network for NCW, free from current technological limitations. It closely resembles next-generation networking technologies but includes significant enhancements for transparent wide-area mobility, robustness, and strong security guarantees.

#### Wireless Networks
Wireless networking is becoming increasingly common due to its ease of deployment and the freedom it provides. However, reliability and security remain key challenges. While current wireless technologies are improving, the IEEE has ratified a new security standard, 802.11i, which uses 802.1X for authentication and AES-CCMP for confidentiality and integrity. Annex uses 802.11i to protect the wireless link layer, but strong security guarantees are provided by the overall security architecture described in Section 2.

#### IPv6 Networks
Future military networks are expected to operate on a global scale with multiple levels of mobility. IPv6, the successor to IPv4, is essential for supporting large numbers of networks and individually addressable nodes. Mobile IPv6 (MIPv6) offers support for mobile nodes, but it may not be suitable for real-time data flows. Hierarchical Mobile IPv6 (HMIPv6) improves handover speed but is limited to fixed infrastructure deployments. We have designed backwards-compatible enhancements to HMIPv6 for Annex networks to overcome these limitations.

#### Enhanced Addressing
IPv6's route aggregation policy minimizes the number of routes remembered by core routers but leads to sparse address allocation. Annex leverages this sparsity to encode topological network information in IPv6 addresses, enhancing addressing efficiency for highly mobile nodes and infrastructure. The address structure is partitioned to uniquely identify nodes regardless of their point of attachment, and to exploit structured network topologies for enhanced routing efficiency and functionality.

### Table 2: Addressing for Annex Networks
| Field         | Bits |
|---------------|------|
| Prefix        | 32   |
| Family        | 8    |
| BrickL2       | 8    |
| BrickL1       | 8    |
| BrickL0       | 8    |
| Reserved      | 16   |
| DeviceID      | 48   |

The prefix field represents the fixed part of the IPv6 address space allocated by an Internet authority. The family field partitions the global Annex address space into domains, each with independent administrative control, routing, security, and service requirements. The host part contains the unique identity of any entity within the Annex network, remaining unchanged throughout the unit's lifetime and never reused. These addresses are physically burned into the device memory to ensure immutability.