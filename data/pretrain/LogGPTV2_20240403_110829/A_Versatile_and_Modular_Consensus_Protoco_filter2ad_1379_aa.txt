title:A Versatile and Modular Consensus Protoco
author:Achour Most&apos;efaoui and
Sergio Rajsbaum and
Michel Raynal
A Versatile and Modular Consensus Protocol
Achour MOSTEFAOUI(cid:1) Sergio RAJSBAUM
†
Michel RAYNAL(cid:1)
(cid:1) IRISA, Campus de Beaulieu, 35042 Rennes Cedex, France
†
Compaq Research Lab, One Cambridge Center, Cambridge, MA 02139, USA
{achour|raynal}@irisa.fr
PI:EMAIL
Abstract
This paper investigates a modular and versatile ap-
proach to solve the consensus problem in asynchronous
distributed systems in which up to f processes may crashes
(f  1 processes, namely,
Π = {p1, . . . , pn}. A process can fail by crashing, i.e.,
by prematurely halting. It behaves correctly (i.e., according
3The condition {[0, . . . , 0], [1, . . . , 1]} is not maximal, see Section 3.
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:08:23 UTC from IEEE Xplore.  Restrictions apply. 
to its speciﬁcation) until it (possibly) crashes. By deﬁni-
tion, a correct process is a process that does not crash. A
faulty process is one that is not correct. Let f denote the
maximum number of processes that may crash. We assume
f < n/2, i.e., a majority of processes is correct.
Processes communicate and synchronize by sending and
receiving messages through channels. Every pair of pro-
cesses is connected by a channel. Channels are assumed to
be reliable. There is no assumption about the relative speed
of processes nor on message transfer delays: the system is
asynchronous.
Leader oracle A leader oracle is a distributed device that
provides the processes with a function leader that returns a
process name each time it is called. This oracle satisﬁes the
following property:
• Eventual Leadership: There is a time t and a correct
process p such that, after t, every invocation of leader by a
correct process returns p.
The leader oracles that satisfy this property deﬁnes the
class Ω of failure detector oracles introduced in [4]4. A
failure detector of this class actually provides the process-
es with an eventual leader election capability [11]. But, let
us notice that there is no knowledge of when the leader is
elected. This means that several leaders can coexist during
an arbitrarily long period of time, and there is no way for
the processes to learn this “confusing” period is over.
Random oracle A random oracle provides each process
pi with a function random that outputs a value randomly
chosen from a set. As we ﬁrst consider binary consensus,
we assume that random outputs 0 (resp. 1) with probabil-
ity 1/2. (The multivalued consensus case is addressed in
Section 4.6.)
The Consensus Problem In the Consensus problem, ev-
ery correct process pi proposes a value vi and all correct
processes have to decide on the same value v, which has
to be one of the proposed values. More precisely, the Con-
sensus problem is deﬁned by two safety properties (Validity
and Uniform Agreement) and a Termination Property [5, 7]:
• Validity: If a process decides v, then v was proposed
by some process.
• Uniform Agreement: No two processes decide differ-
ently.
• Termination: Every correct process eventually de-
cides on some value.
4From a computational point of view, the class Ω of leader oracles, and
the class ✸S of unreliable failure detectors introduced in [5] have been
shown to be equivalent [4]. It follows from [5] that the consensus problem
can be solved in any asynchronous distributed system equipped with any
of them, provided that f < n/2.
3 The Condition-Based Approach
This section provides a short
introduction to the
condition-based approach. More developments can be
found in [13, 14].