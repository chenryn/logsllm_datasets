title:All You Ever Wanted to Know about Dynamic Taint Analysis and Forward
Symbolic Execution (but Might Have Been Afraid to Ask)
author:Edward J. Schwartz and
Thanassis Avgerinos and
David Brumley
Carnegie Mellon University
Research Showcase @ CMU
Department of Electrical and Computer
Engineering
5-2010
Carnegie Institute of Technology
All You Ever Wanted to Know About Dynamic
Taint Analysis and Forward Symbolic Execution
(but might have been afraid to ask)
Edward J. Schwartz
Carnegie Mellon University, PI:EMAIL
Thanassis Avgerinos
Carnegie Mellon University
David Brumley
Carnegie Mellon University, PI:EMAIL
Follow this and additional works at: http://repository.cmu.edu/ece
Part of the Electrical and Computer Engineering Commons
Published In
Proceedings of the IEEE Symposium on Security and Privacy (SP), 317-331.
This Conference Proceeding is brought to you for free and open access by the Carnegie Institute of Technology at Research Showcase @ CMU. It has
been accepted for inclusion in Department of Electrical and Computer Engineering by an authorized administrator of Research Showcase @ CMU. For
more information, please contact research-showcase@andrew.cmu.edu.
All You Ever Wanted to Know About
Dynamic Taint Analysis and Forward Symbolic Execution
(but might have been afraid to ask)
Edward J. Schwartz, Thanassis Avgerinos, David Brumley
Carnegie Mellon University
{edmcman, thanassis, dbrumley}@cmu.edu
Pittsburgh, PA
Abstract—Dynamic taint analysis and forward symbolic
execution are quickly becoming staple techniques in security
analyses. Example applications of dynamic taint analysis and
forward symbolic execution include malware analysis, input
ﬁlter generation, test case generation, and vulnerability dis-
covery. Despite the widespread usage of these two techniques,
there has been little effort to formally deﬁne the algorithms and
summarize the critical issues that arise when these techniques
are used in typical security contexts.
The contributions of this paper are two-fold. First, we
precisely describe the algorithms for dynamic taint analysis and
forward symbolic execution as extensions to the run-time se-
mantics of a general language. Second, we highlight important
implementation choices, common pitfalls, and considerations
when using these techniques in a security context.
Keywords-taint
analysis
analysis,
symbolic
execution, dynamic
I. INTRODUCTION
Dynamic analysis — the ability to monitor code as it
executes — has become a fundamental tool in computer
security research. Dynamic analysis is attractive because
it allows us to reason about actual executions, and thus
can perform precise security analysis based upon run-time
information. Further, dynamic analysis is simple: we need
only consider facts about a single execution at a time.
Two of the most commonly employed dynamic analysis
techniques in security research are dynamic taint analysis
and forward symbolic execution. Dynamic taint analysis runs
a program and observes which computations are affected
by predeﬁned taint sources such as user input. Dynamic
forward symbolic execution automatically builds a logical
formula describing a program execution path, which reduces
the problem of reasoning about the execution to the domain
of logic. The two analyses can be used in conjunction to
build formulas representing only the parts of an execution
that depend upon tainted values.
The number of security applications utilizing these two
techniques is enormous. Example security research areas
employing either dynamic taint analysis, forward symbolic
execution, or a mix of the two, are:
1) Unknown Vulnerability Detection. Dynamic taint
analysis can look for misuses of user input during an
execution. For example, dynamic taint analysis can be
used to prevent code injection attacks by monitoring
whether user input is executed [23–25, 50, 59].
2) Automatic Input Filter Generation. Forward sym-
bolic execution can be used to automatically generate
input ﬁlters that detect and remove exploits from the
input stream [14, 22, 23]. Filters generated in response
to actual executions are attractive because they provide
strong accuracy guarantees [14].
3) Malware Analysis. Taint analysis and forward sym-
bolic execution are used to analyze how information
ﬂows through a malware binary [7, 8, 65], explore
trigger-based behavior [12, 45], and detect emula-
tors [58].
4) Test Case Generation. Taint analysis and forward
symbolic execution are used to automatically generate
inputs to test programs [17, 19, 36, 57], and can
generate inputs that cause two implementations of the
same protocol to behave differently [10, 17].
Given the large number and variety of application do-
mains, one would imagine that implementing dynamic taint
analysis and forward symbolic execution would be a text-
book problem. Unfortunately this is not the case. Previous
work has focused on how these techniques can be applied
to solve security problems, but has left it as out of scope to
give exact algorithms, implementation choices and pitfalls.
As a result, researchers seeking to use these techniques often
rediscover the same limitations, implementation tricks, and
trade-offs.
The goals and contributions of this paper are two-fold.
First, we formalize dynamic taint analysis and forward
symbolic execution as found in the security domain. Our
formalization rests on the intuition that run-time analyses
can precisely and naturally be described in terms of the
formal run-time semantics of the language. This formal-
ization provides a concise and precise way to deﬁne each
analysis, and suggests a straightforward implementation. We
program ::=
stmt s
::=
exp e
♦b
♦u
value v
::=
::=
::=
::=
stmt*
var := exp | store(exp, exp)
| goto exp | assert exp
| if exp then goto exp
else goto exp
load(exp) | exp ♦b exp | ♦u exp
| var | get input(src) | v
typical binary operators
typical unary operators
32-bit unsigned integer
Table I: A simple intermediate language (SIMPIL).
then show how our formalization can be used to tease out
and describe common implementation details, caveats, and
choices as found in various security applications.
II. FIRST STEPS: A GENERAL LANGUAGE
A. Overview
A precise deﬁnition of dynamic taint analysis or forward
symbolic execution must
target a speciﬁc language. For
the purposes of this paper, we use SIMPIL: a Simple
Intermediate Language. The grammar of SIMPIL is pre-
sented in Table I. Although the language is simple, it is
powerful enough to express typical languages as varied as
Java [31] and assembly code [1, 2]. Indeed, the language is
representative of internal representations used by compilers
for a variety of programming languages [3].
A program in our language consists of a sequence of
numbered statements. Statements in our language consist
of assignments, assertions, jumps, and conditional jumps.
Expressions in SIMPIL are side-effect free (i.e., they do
not change the program state). We use “♦b” to represent
typical binary operators, e.g., you can ﬁll in the box with
operators such as addition, subtraction, etc. Similarly, ♦u
represents unary operators such as logical negation. The
statement get input(src) returns input from source src. We
use a dot (·) to denote an argument that is ignored, e.g.,
we will write get input(·) when the exact input source is
not relevant. For simplicity, we consider only expressions
(constants, variables, etc.) that evaluate to 32-bit integer
values; extending the language and rules to additional types
is straightforward.
For the sake of simplicity, we omit the type-checking
semantics of our language and assume things are well-typed
in the obvious way, e.g., that binary operands are integers
or variables, not memories, and so on.
B. Operational Semantics
The operational semantics of a language specify unam-
biguously how to execute a program written in that language.
Context Meaning
Σ
µ
Maps a statement number to a statement
Maps a memory address to the current value
at that address
Maps a variable name to its value
The program counter
The next instruction
∆
pc
ι
Figure 2: The meta-syntactic variables used in the execution
context.
Because dynamic program analyses are deﬁned in terms
of actual program executions, operational semantics also
provide a natural way to deﬁne a dynamic analysis. However,
before we can specify program analyses, we must ﬁrst deﬁne
the base operational semantics.
The complete operational semantics for SIMPIL are
shown in Figure 1. Each statement rule is of the form:
computation
(cid:104)current state(cid:105), stmt (cid:32) (cid:104)end state(cid:105), stmt’
Rules are read bottom to top, left to right. Given a statement,
we pattern-match the statement to ﬁnd the applicable rule,
e.g., given the statement x := e, we match to the ASSIGN
rule. We then apply the computation given in the top of
the rule, and if successful, transition to the end state. If
no rule matches (or the computation in the premise fails),
then the machine halts abnormally. For instance, jumping to
an address not in the domain of Σ would cause abnormal
termination.
The execution context is described by ﬁve parameters: the
list of program statements (Σ), the current memory state (µ),
the current value for variables (∆), the program counter (pc),
and the current statement (ι). The Σ, µ, and ∆ contexts are
maps, e.g., ∆[x] denotes the current value of variable x. We
denote updating a context variable x with value v as x ← v,
e.g., ∆[x ← 10] denotes setting the value of variable x to the
value 10 in context ∆. A summary of the ﬁve meta-syntactic
variables is shown in Figure 2.
In our evaluation rules, the program context Σ does not
change between transitions. The implication is that our oper-
ational semantics do not allow programs with dynamically
generated code. However, adding support for dynamically
generated code is straightforward. We discuss how SIMPIL
can be augmented to support dynamically generated code
and other higher-level language features in Section II-C.
The evaluation rules for expressions use a similar notation.
We denote by µ, ∆ (cid:96) e ⇓ v evaluating an expression e
to a value v in the current state given by µ and ∆. The
expression e is evaluated by matching e to an expression
evaluation rule and performing the attached computation.
v is input from src
µ, ∆ (cid:96) get input(src) ⇓ v
µ, ∆ (cid:96) e ⇓ v
v(cid:48) = ♦uv
µ, ∆ (cid:96) ♦ue ⇓ v(cid:48)
µ, ∆ (cid:96) e ⇓ v ∆(cid:48) = ∆[var ← v]
UNOP
µ, ∆ (cid:96) e ⇓ v1
v = µ[v1]
INPUT
µ, ∆ (cid:96) load e ⇓ v
µ, ∆ (cid:96) e1 ⇓ v1 µ, ∆ (cid:96) e2 ⇓ v2
µ, ∆ (cid:96) e1♦be2 ⇓ v(cid:48)
LOAD
µ, ∆ (cid:96) var ⇓ ∆[var] VAR
v(cid:48) = v1♦bv2
BINOP
µ, ∆ (cid:96) v ⇓ v
CONST
Σ, µ, ∆, pc, var := e (cid:32) Σ, µ, ∆(cid:48), pc + 1, ι
ι = Σ[pc + 1]
ASSIGN
µ, ∆ (cid:96) e ⇓ v1
ι = Σ[v1]
Σ, µ, ∆, pc, goto e (cid:32) Σ, µ, ∆, v1, ι
GOTO
µ, ∆ (cid:96) e ⇓ 1 ∆ (cid:96) e1 ⇓ v1
ι = Σ[v1]
Σ, µ, ∆, pc, if e then goto e1 else goto e2 (cid:32) Σ, µ, ∆, v1, ι
µ, ∆,(cid:96) e ⇓ 0 ∆ (cid:96) e2 ⇓ v2
ι = Σ[v2]
Σ, µ, ∆, pc, if e then goto e1 else goto e2 (cid:32) Σ, µ, ∆, v2, ι
TCOND
FCOND
µ, ∆ (cid:96) e1 ⇓ v1 µ, ∆ (cid:96) e2 ⇓ v2
ι = Σ[pc + 1] µ(cid:48) = µ[v1 ← v2]
Σ, µ, ∆, pc, store(e1, e2) (cid:32) Σ, µ(cid:48), ∆, pc + 1, ι
STORE
µ, ∆ (cid:96) e ⇓ 1
ι = Σ[pc + 1]
Σ, µ, ∆, pc, assert(e) (cid:32) Σ, µ, ∆, pc + 1, ι
ASSERT
Figure 1: Operational semantics of SIMPIL.
Most of the evaluation rules break the expression down into
simpler expressions, evaluate the subexpressions, and then
combine the resulting evaluations.
Example 1. Consider evaluating the following program:
1
x := 2 ∗ g e t
i n p u t (· )
The evaluation for this program is shown in Figure 3 for
the input of 20. Notice that since the ASSIGN rule requires
the expression e in var := e to be evaluated, we had to
recurse to other rules (BINOP, INPUT, CONST) to evaluate
the expression 2∗get input(·) to the value 40.
C. Language Discussion
include some high-level
We have designed our language to demonstrate the critical
aspects of dynamic taint analysis and forward symbolic
execution. We do not
language
constructs such as functions or scopes for simplicity and
space reasons. This omission does not fundamentally limit
the capability of our language or our results. Adding such
constructs is straightforward. For example, two approaches
are:
1) Compile missing high-level language constructs down
to our language. For instance, functions, buffers and
user-level abstractions can be compiled down to
SIMPIL statements instead of assembly-level instruc-
tions. Tools such as BAP [1] and BitBlaze [2] already
use a variant of SIMPIL to perform analyses. BAP is
freely available at http://bap.ece.cmu.edu.
Example 2. Function calls in high-level code can
be compiled down to SIMPIL by storing the return
f u n c t i o n ∗ /
address and transferring control ﬂow. The following
code calls and returns from the function at line 9.
1
2
3
4
5
6
7
8
9
10
/∗ C a l l e r
esp := esp + 4
s t o r e ( esp , 6 )
goto 9
/∗ The c a l l w i l l
h a l t
/∗ C a l l e e
. . .
goto load ( esp )
i s 6 ∗ /
r e t u r n h e r e ∗ /
f u n c t i o n ∗ /
/∗ r e t a d d r
We assume this choice throughout the paper since
previous dynamic analysis work has already demon-
strated that such languages can be used to reason about
programs written in any language.
2) Add higher-level constructs to SIMPIL. For instance,
it might be useful for our language to provide di-