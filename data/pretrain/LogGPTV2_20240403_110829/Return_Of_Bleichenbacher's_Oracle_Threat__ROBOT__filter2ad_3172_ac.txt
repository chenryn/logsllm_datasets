strong
strong
-
-
CVE-2017-6168
CVE-2017-6168
CVE-2017-6168
CVE-2017-6168
CVE-2017-6168
CVE-2017-17382
CVE-2017-17382
strong
CVE-2017-17427
strong
weak
CVE-2017-17428
CVE-2017-12373
strong
strong
CVE-2017-1000385
CVE-2017-1000385
weak
CVE-2017-17841
weak
?
(unﬁxed)
CVE-2018-1388
full
full
full
full
full
full
full
full
full
full
full
?
TCP timeout
Alert 0
shortened
weak
CVE-2017-13099
ChangeCipherSpec
80
shortened
weak
CVE-2017-13098
Table 1: Overview of vulnerable implementations and affected servers found in our research. TLS alerts are
referenced by their numbers: 10 (unexpected message) 20 (bad record mac), 40 (handshake failure), 47
(illegal parameter), 51 (decrypt error), and 80 (internal error).
We created a proof of concept signature using this or-
acle and sent it to Facebook along with an explanation of
the problem. Facebook deployed patches within a week
to close the oracle. The signature can be found in Ap-
pendix A. However, after further testing with different
message ﬂows we found that the ﬁx was not completely
effective at preventing us from distinguishing between
error types. If the ChangeCipherSpec and Finished
were withheld, the server would wait for these mes-
sages only if the ClientKeyExchange decrypted prop-
erly. Certain padding errors on the other hand would trig-
ger a TCP FIN from the server. Facebook also ﬁxed this
behavior within a week of being notiﬁed. We extended
our scan tool to consider this changed strategy.
Facebook informed us that they use a patched version
of OpenSSL for the affected hosts and that the bug was in
one of their custom patches. We thus believe this partic-
ular variant of the vulnerability does not affect any hosts
not owned by Facebook.
We have furthermore discovered other vulnerable
hosts belonging to Facebook that behaved in a different
way. These were running TLS stacks by F5 and Erlang.
To our knowledge all vulnerable hosts owned by Face-
book have been patched.
5.2 F5
Based on Facebook’s encouraging responses to the ﬁrst
reports, we continued scanning their infrastructure and
found yet another vulnerable behavior. This time, the
USENIX Association
27th USENIX Security Symposium    823
vulnerable behavior was observed on a server related to
corporate mail which identiﬁed with a server banner indi-
cating BIG-IP. Further scans uncovered similar behavior
on other domains whose owners conﬁrmed the devices
as being from F5. Over the course of the research we
discovered that F5 products could exhibit a variety of
oracles depending on the speciﬁc product and conﬁgu-
ration. Most commonly, F5 products would respond to
malformed ClientKeyExchange with a TLS alert 40
(handshake failure) but allow connections to time-
out if the decryption was successful. Close analysis of
F5 TLS stacks also revealed that some product conﬁgu-
rations would send an extra TLS alert depending on the
error type.
Overall, we discovered ﬁve different variations of be-
havior on F5 hosts. Some of these variations are weak
oracles. These weak oracles still allow attacks, but they
take signiﬁcantly more oracle queries. With the strong
variants of the F5 oracle we were again able to create
proof of concept signatures.
We informed F5 and they issued a security advisory
on November 17th [18]. They released patches for all
supported products that were affected. CVE-2017-6168
was assigned.
5.3 Citrix
By contacting web page owners we learned that many of
the implementations we identiﬁed as vulnerable were run
by Citrix Netscaler devices. The Netscaler vulnerability
is behaving slightly different depending on whether the
connection uses a CBC or a GCM cipher suite.
For this vulnerability the signal for a malformed de-
cryption block is a timeout. This makes practical attacks
more challenging, as one needs to send a lot of messages
and detect timeouts. It likely requires parallelizing the
attack.
CVE-2017-17382 was assigned to this vulnerability.
Citrix has published an advisory and updates for affected
devices [15].
5.4 Radware
We discovered that the server used by Radware’s web
page – radware.com – was vulnerable. Messages not
starting with 0x0002 were answered with a TCP re-
set. Other messages were answered with a TLS alert 51
(decrypt error). We discovered the same issue on a
host that we knew was served by a Radware Alteon de-
vice due to previous research.
We informed Radware about the issue and they re-
leased a ﬁx with the Alteon ﬁrmware versions 30.2.9.0,
30.5.7.0 and 31.0.4.0 [32]. CVE-2017-17427 was as-
signed to this vulnerability.
5.5 Cisco ACE
We found that Cisco ACE load balancers were
vulnerable.
types were answered
with either TLS alert 20 (bad record mac) or 47
(illegal parameter).
Different error
Cisco stopped selling and supporting ACE devices in
2013 [13]. They informed us that they will not issue a ﬁx
for this ﬂaw. CVE-2017-17428 was assigned. Based on
our scans we assume that despite being out of support for
several years ACE devices are still in widespread use.
We also observed that the host cisco.com and sev-
eral of its subdomains are vulnerable to Bleichenbacher
attacks in the exact same way as the vulnerable ACE de-
vices. Although Cisco did not reveal to us what products
are used for these domains, our belief is that they are
likely running out of support ACE devices within their
network infrastructure.
All cipher suites supported by these devices use the
RSA encryption key exchange [14], making it impossi-
ble to mitigate this vulnerability by disabling it. Users of
Cisco ACE devices that need TLS support therefore can-
not run these devices with a secure TLS conﬁguration.
5.6 Erlang
We tested multiple TLS stacks in free and open source
software to ﬁnd further reasons for the vulnerabili-
ties detected in our scans. We discovered that the
TLS implementation in the Erlang programming lan-
guage answered to different RSA decryption errors
with different TLS alerts. Messages that did not
start with 0x0002 were answered with a TLS alert 51
(decrypt error), other errors were answered with a
TLS alert 10 (unexpected message).
Independently of that, we discovered several hosts
used by WhatsApp (owned by Facebook) that were vul-
nerable in a similar way except that they answered with
TLS alert 20 (bad record mac) rather than 51 in re-
sponse to certain padding errors. We later learned from
Facebook that these hosts were also operated using Er-
lang. Our assessment that these differences were due to
different versions of Erlang was later conﬁrmed by the
Erlang developers. Their tests found that versions 19 and
20 answered with TLS alert 10/51 while version 18 an-
swered with TLS alert 20/51 as observed on the What-
sApp domain.
The Erlang developers released ﬁxes in the ver-
sions 18.3.4.7 [3], 19.3.6.4 [4] and 20.1.7 [5].
CVE-2017-1000385 was assigned for this bug.
5.7 Bouncy Castle
We shared our test tool with CERT/CC and they shared
it with developers of various TLS implementations. We
824    27th USENIX Security Symposium
USENIX Association
learned that the Java TLS implementation of Bouncy
Castle was vulnerable to a variant of ROBOT. Sending
a ClientKeyExchange where the zero terminator of the
padding was not at the right position led to a TLS alert 80
(internal error). Other errors made the server send a
ChangeCipherSpec message.
The vulnerability only appears if Bouncy Cas-
tle is using the JCE API
in Java for crypto-
graphic operations.
Bouncy Castle offers an old
API
(org.bouncycastle.crypto.tls) and a new API
(org.bouncycastle.tls). The vulnerability appears only if
the new API is used in combination with the JCE API.
The old API does not support the JCE API.
Bouncy Castle plans to ﬁx this vulnerability in version
1.59. CVE-2017-13098 was assigned.
5.8 WolfSSL
WolfSSL is a TLS stack for embedded devices. With the
shortened message ﬂow, we got a timeout for a correctly
formatted message and errors for all messages that had
any ﬂaw in their structure (wrong PKCS #1 v1.5 preﬁx,
zeros in the non-zero padding, missing padding zero ter-
minator).
This only gives a weak oracle and attacks would take
very long. However, it should still be considered a secu-
rity ﬂaw. WolfSSL developers ﬁxed this issue in version
3.13.0 [20]. CVE-2017-13099 has been assigned to this
ﬂaw.
5.9 Old vulnerabilities in MatrixSSL and
JSSE
We are aware of two already known vulnerabilities in
TLS stacks that have been discovered in recent years.
Meyer et al. [28] have identiﬁed a vulnerability in Java
/ JSSE (CVE-2012-5081) that affects Oracle Java SE
7 Update 7 and earlier, 6 Update 35 and earlier, 5.0
Update 36 and earlier, and 1.4.2 38 (CVE-2012-5081).
Somorovsky [36] has identiﬁed a vulnerability in Ma-
trixSSL before 3.8.3 (CVE-2016-6883).
We found a small number of vulnerable hosts that we
assume are these vulnerabilities, indicating that individu-
als or organizations still use unpatched versions of JSSE
and MatrixSSL. In particular, one embedded device ven-
dor was identiﬁed as using an older release of MatrixSSL
in the latest ﬁrmware of some products.
5.10 Further vulnerabilities
We have identiﬁed a weak oracle in IBM Lotus Domino,
distinguishable by TLS alerts 20 (bad record mac) and
47 (illegal parameter). We have initially not dis-
closed this as IBM has not ﬁxed this yet, after our ini-
tial disclosure it was independently discovered by oth-
ers.1 IBM released a security advisory for WebSphere
MQ [21]. Due to the lack of communication from IBM
we have no further information, but we believe this is a
separate vulnerability.
We also learned after our disclosure that de-
vices
from Palo Alto Networks were vulnerable
(CVE-2017-17841). A ﬁx for PAN-OS is available in
versions 7.1.5 and 8.0.7 [30].
Furthermore, we have identiﬁed vulnerable servers
whose behavior we could not link to a speciﬁc imple-
mentation. It is often challenging to ﬁnd out what prod-
ucts are used on hosts on the public Internet. Attempts to
ask the operators usually remain unanswered and many
products do not expose product or version information
via the appropriate HTTP headers. The “Server” header
is unreliable, as in many cases load balancers or secu-
rity appliances are terminating TLS connections while
the header information is generated by the HTTP server
itself. The “X-Forwarded-For” header that is supposed to
be used by such products is hardly used, as many devel-
opers of security appliances think that this information
should be hidden.
Based on our ﬁndings we must assume that more vul-
nerable products exist. If we learn about them we will
also add them to our web page.2
6 Statistics about affected hosts
We performed several scans over the Alexa Top 1 Million
list for vulnerable hosts. We incrementally improved our
scan strategy while at the same time informing affected
web pages and vendors who started to patch their servers.
Therefore there was no single point in time where we
were able to identify all vulnerabilities. We want to stress
that all our numbers should be considered rough esti-
mates, as they are both over- and undercounting vulner-
abilities.
We believe that two scans we performed on November
11th and November 12th give us the closest estimate for
the number of vulnerable servers before our research. We
did scans for all domains in the Alexa Top 1 Million both
with and without a www preﬁx on HTTPS / port 443. It
is very common that the hosts with and without www
preﬁx are served by different TLS stacks.
We already had the shortened message ﬂow. Apart
from Facebook, none of the affected vendors had started
shipping ﬁxes at this point. Of particular importance is
that this was prior to the availability of updated software
for F5 appliances.
1https://twitter.com/drwetter/status/
943785632672907264
2https://robotattack.org/
USENIX Association
27th USENIX Security Symposium    825
However these scans did not test with varied cipher
suites and therefore missed some vulnerable hosts which
do not present with vulnerable behavior when a CBC
cipher is negotiated. These scans were also made after
Facebook had already started deploying ﬁxes among its
infrastructure. Furthermore our scan tool did not yet con-
tain a test to identify the JSSE issue (CVE-2012-5081).
While our scan tool attempts to minimize inaccuracies
by validating vulnerable responses, we have observed
that certain non-deterministic behavior can still be falsely
identiﬁed as vulnerable.
According to these scans 22,854 hosts (2.3 %) were
vulnerable among the www hosts. 17,463 hosts (1.7 %)
were vulnerable among the non-www hosts. If we com-
bine the results 27,965 hosts (2.8 %) were vulnerable on
either the www or the non-www host. We assume that
the reason for this low number of vulnerabilities overall
is the correct mitigation implementation in OpenSSL, the
most widely used TLS library.
Among the top 100 domains according to Alexa 27
(thus 27 %) were vulnerable if we combine our best scan
result with previous scans of hosts that were already ﬁxed
at that point. This indicates that among high proﬁle hosts
the number of vulnerable systems is higher. The reason
is a common usage of F5 products in high proﬁle servers.
Based on the exact vulnerability we can also estimate
affected vendors. We would like to stress that there’s
further potential for errors here, as it is possible that dif-
ferent vendors have the vulnerability in the same way
making it difﬁcult to accurately distinguish between vul-
nerable products. If we combine these two scans 21,194
hosts were vulnerable to one of the F5 variants we have
seen. 5,856 hosts were vulnerable to the Citrix variant,
521 Cisco ACE, 336 Radware, 118 IBM, 6 MatrixSSL,
and 5 Erlang. We also identiﬁed three additional behav-