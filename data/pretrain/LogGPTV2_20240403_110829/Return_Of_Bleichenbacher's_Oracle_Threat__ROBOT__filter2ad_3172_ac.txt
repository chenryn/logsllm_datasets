### Overview of Vulnerable Implementations and Affected Servers

**Table 1: Summary of Vulnerable Implementations and Affected Servers**

| CVE Identifier | Description | Status |
|---------------|-------------|--------|
| CVE-2017-6168 | Multiple occurrences | Strong Oracle |
| CVE-2017-17382 | Multiple occurrences | Strong Oracle |
| CVE-2017-17427 | Single occurrence | Weak Oracle |
| CVE-2017-12373 | Single occurrence | Strong Oracle |
| CVE-2017-1000385 | Multiple occurrences | Strong Oracle |
| CVE-2017-17841 | Single occurrence | Unfixed |
| CVE-2018-1388 | Multiple occurrences | Full Oracle |

**TLS Alerts Reference:**
- 10 (Unexpected Message)
- 20 (Bad Record MAC)
- 40 (Handshake Failure)
- 47 (Illegal Parameter)
- 51 (Decrypt Error)
- 80 (Internal Error)

### Detailed Analysis and Vendor Responses

#### Facebook
We discovered a vulnerability in Facebook's infrastructure, which we reported to them. The vulnerability was due to a custom patch in their OpenSSL version. We provided a proof-of-concept signature, and Facebook deployed patches within a week. However, further testing revealed that the fix was not entirely effective. By withholding the ChangeCipherSpec and Finished messages, we could still distinguish between error types. Facebook fixed this behavior promptly.

Facebook confirmed that the affected hosts were running a patched version of OpenSSL, and the bug was specific to their custom patch. We believe this variant does not affect other hosts.

#### F5
During our scans, we found another vulnerable behavior on a server related to corporate mail, identified by a BIG-IP banner. Further investigation revealed that F5 products exhibited various oracles depending on the product and configuration. Commonly, F5 products responded to malformed ClientKeyExchange with a TLS alert 40 (handshake failure) but allowed connections to timeout if decryption was successful. Some configurations also sent an extra TLS alert based on the error type.

We discovered five different variations of behavior on F5 hosts, some of which were weak oracles. We created proof-of-concept signatures for the strong variants. F5 issued a security advisory on November 17th [18] and released patches for all supported products. CVE-2017-6168 was assigned.

#### Citrix
Many of the vulnerable implementations were run by Citrix Netscaler devices. The vulnerability behavior varied slightly depending on whether the connection used a CBC or GCM cipher suite. For this vulnerability, a malformed decryption block resulted in a timeout, making practical attacks more challenging. CVE-2017-17382 was assigned, and Citrix published an advisory and updates for affected devices [15].

#### Radware
The server used by Radware's webpage (radware.com) was vulnerable. Messages not starting with 0x0002 were answered with a TCP reset, while others received a TLS alert 51 (decrypt error). We informed Radware, and they released a fix with Alteon firmware versions 30.2.9.0, 30.5.7.0, and 31.0.4.0 [32]. CVE-2017-17427 was assigned.

#### Cisco ACE
Cisco ACE load balancers were vulnerable, responding to different error types with either TLS alert 20 (bad record mac) or 47 (illegal parameter). Cisco stopped supporting ACE devices in 2013 [13] and will not issue a fix. CVE-2017-17428 was assigned. Despite being out of support, ACE devices are still widely used. We observed that cisco.com and several subdomains are vulnerable in the same way, likely using unsupported ACE devices.

#### Erlang
The TLS implementation in the Erlang programming language responded to different RSA decryption errors with different TLS alerts. Versions 19 and 20 answered with TLS alert 10/51, while version 18 answered with TLS alert 20/51. We discovered several WhatsApp hosts (owned by Facebook) vulnerable in a similar way, but responding with TLS alert 20 instead of 51. Erlang developers released fixes in versions 18.3.4.7 [3], 19.3.6.4 [4], and 20.1.7 [5]. CVE-2017-1000385 was assigned.

#### Bouncy Castle
Bouncy Castle's Java TLS implementation was vulnerable to a variant of ROBOT. Sending a ClientKeyExchange with an incorrect padding zero terminator led to a TLS alert 80 (internal error). Other errors caused the server to send a ChangeCipherSpec message. The vulnerability appeared only when using the new API (org.bouncycastle.tls) with the JCE API. Bouncy Castle plans to fix this in version 1.59. CVE-2017-13098 was assigned.

#### WolfSSL
WolfSSL, a TLS stack for embedded devices, exhibited a weak oracle. A correctly formatted message resulted in a timeout, while flawed messages caused errors. This was fixed in version 3.13.0 [20]. CVE-2017-13099 was assigned.

#### Old Vulnerabilities in MatrixSSL and JSSE
We identified known vulnerabilities in TLS stacks, including a Java/JSSE vulnerability (CVE-2012-5081) and a MatrixSSL vulnerability (CVE-2016-6883). We found a small number of hosts still using unpatched versions of these libraries.

#### Further Vulnerabilities
We identified a weak oracle in IBM Lotus Domino, distinguishable by TLS alerts 20 (bad record mac) and 47 (illegal parameter). IBM has not yet fixed this, but it was independently discovered. Palo Alto Networks devices were also vulnerable (CVE-2017-17841), with a fix available in PAN-OS versions 7.1.5 and 8.0.7 [30].

### Statistics about Affected Hosts

We performed scans over the Alexa Top 1 Million list for vulnerable hosts. Our best estimate from scans on November 11th and 12th showed:
- 22,854 (2.3%) www hosts were vulnerable.
- 17,463 (1.7%) non-www hosts were vulnerable.
- 27,965 (2.8%) hosts were vulnerable on either the www or non-www host.

Among the top 100 domains, 27 (27%) were vulnerable. High-profile servers commonly use F5 products, leading to a higher vulnerability rate. Based on the exact vulnerability, we estimated:
- 21,194 hosts were vulnerable to one of the F5 variants.
- 5,856 hosts were vulnerable to the Citrix variant.
- 521 hosts were vulnerable to the Cisco ACE variant.
- 336 hosts were vulnerable to the Radware variant.
- 118 hosts were vulnerable to the IBM variant.
- 6 hosts were vulnerable to the MatrixSSL variant.
- 5 hosts were vulnerable to the Erlang variant.

We continue to update our findings on our web page [https://robotattack.org/](https://robotattack.org/).