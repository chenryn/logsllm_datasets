#### 模糊查询
```sql
-- LIKE 子句
SELECT field1, field2,...fieldN
FROM table_name
WHERE field1 LIKE condition1 [AND [OR]] filed2 = 'somevalue'
```
- 你可以在 WHERE 子句中指定任何条件.
- 你可以在 WHERE 子句中使用 LIKE 子句.
- 你可以使用 LIKE 子句代替等号 =.
- LIKE 通常与 % 一同使用, 类似于一个元字符的搜索.
- 你可以使用 AND 或者 OR 指定一个或多个条件.
- 你可以在 DELETE 或 UPDATE 命令中使用 WHERE...LIKE 子句来指定条件.
like 匹配/模糊匹配,会与 `%` 和 `_` 结合使用.
```
'%a'     //以a结尾的数据
'a%'     //以a开头的数据
'%a%'    //含有a的数据
'_a_'    //三位且中间字母是a的
'_a'     //两位且结尾字母是a的
'a_'     //两位且开头字母是a的
```
```sql
-- 查询以 java 字段开头的信息.
SELECT * FROM position WHERE name LIKE 'java%';
-- 查询包含 java 字段的信息.
SELECT * FROM position WHERE name LIKE '%java%';
-- 查询以 java 字段结尾的信息.
SELECT * FROM position WHERE name LIKE '%java';
```
- `%` : 表示任意 0 个或多个字符.可匹配任意类型和长度的字符,有些情况下若是中文,请使用两个百分号(%%)表示.
- `_` : 表示任意单个字符.匹配单个任意字符,它常用来限制表达式的字符长度语句.
- `[]` : 表示括号内所列字符中的一个(类似正则表达式).指定一个字符、字符串或范围,要求所匹配对象为它们中的任一个.
- `[^]` : 表示不在括号所列之内的单个字符.其取值和 `[]` 相同,但它要求所匹配对象为指定字符以外的任一个字符.
- 查询内容包含通配符时,由于通配符的缘故,导致我们查询特殊字符 "`%`"、"`_`"、"`[`" 的语句无法正常实现,而把特殊字符用 "`[ ]`" 括起便可正常查询.
### 多表查询
#### 笛卡尔积
有两个集合A、B，取这两个集合的所有组成情况。
要完成多表查询，需要消除无用的数据。
#### 内连接
**隐式连接**
使用where条件消除无用数据;
```sql
-- 查询所有员工信息和对应的部门信息;
select * from emp, dept where emp.dept_id = dept.id;
-- 查询员工表的姓名，性别、部门表的名称;
select emp.name, emp.sex, dept.name from emp, dept where emp.dept_id = dept.id;
-- 简化
  select
  	t1.name,
      t1.sex,
      t2.name
  from
  	emp t1,
      dept t2
  where
  	t1.dept_id = t2.id;
```
**显示内连接**
```sql
-- 语法
select 字段列表 from 表名1 inner join 表名2 on 条件;
-- 查询所有员工信息和对应的部门信息;
select * from emp inner join dept on emp.dept_id = dept.id;
-- -- inner可以省略，并且这个也可以像上面那样起别名;
```
#### 外连接
**左外连接**
```sql
-- 语法
select 字段列表 from 表1 left outer join 表2 on 条件; -- 注意：outer可以省略不写
-- 查询的范围：查询的是左表所有的信息，以及其与右表的交集部分;
select t1.*, t2.name  from  emp t1 left join dept  t2 on t1.dept = t2.id;
```
**右外连接**
```sql
-- 语法
select 字段列表 from 表1 right outer join 表2 on 条件; -- 注意：outer可以省略不写
-- 查询的范围：查询的是右表所有的信息，以及其与左表的交集部分;
select t1.* t2.name from emp t1 right join dept t2 on t1.dept = t2.id;
```
#### 子查询
概念：查询中嵌套查询，称嵌套查询为子查询。
```sql
-- 查询工资最高的员工信息;
-- 传统写法
-- 首先查询最高工资是多少
select max(工资) from emp; -- 假设查询出来最高工资是9000;
-- 然后将查询出来的信息作为条件在进行查询;
select * from emp where  emp.工资 = 9000;
-- 子查询方式
select * from emp where emp.工资 = (select max(工资) from emp);
```
**子查询的不同情况**
子查询的结果是单行单列的;
```sql
-- 子查询可以作为条件，使用条件运算符去判断;
-- 查询工资小于平均工资的员工信息;
select * from emp where emp.工资  "12-11-11") t2 where t1.id = t2.dept_id;
-- 普通查询
select * from emp t1, dept t2 where t1.id = t2.dept_id and t1.date > "2011-11-11";
```
---
## DCL 管理用户、授权
### 管理用户
**添加用户**
```sql
-- 语法：create user '用户名'@'主机名' identified by '密码';
create user 'test' @ 'localhost' identified by '123';
```
**删除用户**
```sql
-- 语法：drop user '用户名' @ '主机名';
drop user 'test' @ 'localhost';
```
**修改用户密码**
```sql
-- 方法一：
update user set password = password('新密码') where user = '用户名';
-- 方法二：
set password for '用户名'@'主机名' = password('新密码');
```
**查询用户**
```sql
-- 切换到 mysql 数据库
use mysql;
-- 切换到 mysql 数据库
select * from user;
```
---
## 约束
**描述**
对表中的数据进行限定，保证数据的正确性、有效性、完整性。
### 非空约束
关键字：not null
作用：某一列的值不能为null;
```sql
-- 创建表时添加约束;
create table stu(
    name varchar(4) not null
);
-- 表创建好后，添加非空约束;
create table stu(
  	name varchar(4)
);
alter table stu modify name varchar(4) not null;
-- 删除约束
alter table stu modify name varchar(4);     -- 将姓名的非空约束删除
```
### 唯一约束
关键字：unique;
作用：某一列的值不能重复;
```sql
-- 创建表时添加唯一约束
create table stu(
  	phone_number varchar(11) unique
);
-- 表创建好后，添加唯一约束;
alter table stu modify phone_number varchar(11)  unique;
-- 删除唯一约束
alter table stu drop index phone_number;
```
注意: 唯一约束可以有 null 值，但是只能有一条记录为 null。通俗来讲，也就是说 null 值也不能重复出现;
### 主键约束
关键字：primary key;
作用：非空且唯一;
```sql
-- 创建表时添加主键约束;
create table stu(
  	id int primary key
);
-- 表创建好后添加主键约束;
alter table stu modify id int primary key;
-- 删除主键
alter table stu drop primary key;
```
注意事项：
- 一张表只能有一个字段为主键;
- 但是可以设置为多个字段为主键，也即联合主键;
- 主键就是表中记录的唯一标识;
### 自动增长
关键字：auto_increment;
作用：如果某一列是数值型的，可以完成值的自动增长。
```sql
-- 在创建表时添加自动增长;
create table stu (
  	id int auto_increment
);
-- 表创建好后添加自动增长
alter table stu modify id int auto_increment;
-- 删除自动增长
alter table stu modify id int;
-- 这样不会删除掉主键约束
```
这个值的增长，是按照上一条的数据进行增长。如果上一条数据是5，那么下一条就是6。
一般情况下，自动增长和主键一起使用;
### 外键约束
关键字：foreign key;
作用: 可定义表间以及表内必需的关系
```sql
-- 在创建表时添加外键约束
create table emp(
  	dep_id int
      constraint  起一个新的名称  foreign  key  (外键名称) references 主表名称(主表列名称);
);
  --主表
  CREATE TABLE department(
  	id INT PRIMARY KEY AUTO_INCREMENT,
  	dep_name VARCHAR(30),
  	dep_location VARCHAR(30)
  );
  CREATE TABLE employee(
  	id INT PRIMARY KEY AUTO_INCREMENT,
  	NAME VARCHAR(30),
  	age INT,
  	dep_id INT,--外键名称
  	CONSTRAINT emp_dep_fk FOREIGN KEY (dep_id) REFERENCES department(id)
  );
-- 创建表后添加外键;
alter table employee add CONSTRAINT emp_dep_fk FOREIGN KEY (dep_id) REFERENCES department(id);
-- 删除外键;
alter table employee  drop foreign key emp_dep_fk;
-- 级联操作
-- 添加外键，设置级联更新;
alter table employee add CONSTRAINT emp_dep_fk FOREIGN KEY (dep_id) REFERENCES department(id) on update  cascade;
-- 添加外键，设置级联更新，设置级联删除;
alter table employee add CONSTRAINT emp_dep_fk FOREIGN KEY (dep_id) REFERENCES department(id) on update  cascade on delete cascade;
```
---
## 数据库的设计
### 多表之间的关系
**一对一**
场景 : 人和身份证
分析：一个人只有一个身份证，一个身份证只能对应一个人。
实现方式：在任意一方设置唯一约束的外键指向另一方的主键;
**一对多（多对一）**
场景 : 部门和员工
分析：一个部门有多个员工，一个员工只能对应一个部门;
实现方式：在多的一方建立外键，指向一的一方的主键。
**多对多**
场景 : 学生和课程：
分析：一个学生可以选择很多门课，一个课程也可以被很多学生选择;
实现方式：多对多需要借助第三张中间表。
---
## 事物
如果一个包含多个步骤的业务操作，被事物管理，那么这些操作要么同时成功，要么同时失败;
**事物的四大特征**
- 原子性：是不可分割的最小操作单位，要么同时成功，要么同时失败;
- 持久性：当事务提交或回滚后，数据库会持久化的保存数据;
- 隔离性：多个事物之间，相互隔离;
- 一致性：事务操作前后，数据总量不变;
**事务的隔离级别**
多个事物之间隔离的、相互独立的。但是如果多个事务操作同一批数据，则会引发一些问题，设置不同的隔离级别就可以解决这些问题。
存在的问题：
- 脏读：一个事务，读取到另一个事务中没有提交的数据;
- 不可重复度(虚读)：在一个事务中，两次读取到的数据不一样;
- 幻读：一个事务操作(DML)数据表中的所有记录，另一个事务添加了一条数据，则第一个事物查询不到自己的修改。
隔离级别：
- read uncommitted : 读未提交
    - 产生的问题：脏读、不可重复读、幻读;
- read committed : 读已提交
    - 产生的问题：不可重复读、幻读;
- repeatable : 可重复读（Oracle 默认）
    - 产生的问题：幻读;
- serializable : 串行化
    - 产生的问题：可以解决所有的问题;
注意：隔离级别从小到大安全性越来越高，但是效率越来越低;
查询数据隔离级别的语句：
```sql
select @@tx_isolation;
```
数据库隔离等级的设置语句：
```sql
set global transation isolation level 级别字符串;
```