管道
持续安全保障
安全监控
生产环境
安全设计
(云和数据中心)
DevOps 团队
安全性测试
安全风险管理
①
②
③
④
                                        38
1.1.2 DevSecOps 成熟度模型
在本文编撰期间，DevSecOps 国内相关的标准已在制定的过程中，尚未正式发布施行。美国总务管理局
（U.S. General Services Administration，GSA）在早先发布了框架性文件《DevSecOps 指南》，其中描述了
DevSecOps 平台的成熟度模型。
该成熟度模型从 DevSecOps 平台总体考虑事项、镜像管理、日志监控和告警、补丁管理、平台治理、变更管理、
应用开发测试和运营、应用部署、帐户权限凭据和机密管理、可用性和性能管理、网络管理、操作流程权限、
备份和数据生命周期管理、协议和财务管理等维度全面地定义了 DevSecOps 实践中所涉及工作的成熟度评价
标准。
以下是 GSA 对 DevSecOps 的描述“成功的 DevSecOps 团队工作具有可重复性、低冗余、高协作性和分散集
体努力的特点；为了最有效地实现这一点，自动化和可审计性优先于人工主观决策。”
针对该模型中最有代表性的 DevSecOps 平台总体考虑事项方面，其成熟度描述如下：
总体的 DevSecOps 平台考虑事项
描述
本部分围绕 DevSecOps 平台本身的整体性质，捕获进入环境的工作流和从环境发布的软件。
成熟度模型
·级别 1（不被视作 DevSecOps 平台）: 该平台的特点是依赖人工，状态不透明，团队协作不标准化，并且在
每个项目的基础上进行异构配置。
Overarching DevSecOps Platform Considerations
Description
This domain encompasses the holistic nature of DevSecOps around the platform itself, capturing the flow of work into 
the environment and release of software out of it.
Maturity Model
· Level 1 (Not considered viable for a DevSecOps platform): The platform is characterized by manual efforts, is not 
transparent about state, is not standardized across teams, and is heterogeneously configured on a per-project basis.
· Level 2: Application developers have a pipeline that they can use to deploy software which is considerate of security 
and visible to operations. Intake into the platform may be manual or unpredictable. Steps to deploy or maintain 
operations may require manual effort or assessment.
· Level 3: Application developers have a clear, self-service intake onto the platform and the ability to deploy and run 
security-compliant code in production through automation. The platform services are centralized in its infrastructure 
and pipeline implementation.
以下是大意
                                        39
·级别 2: 应用程序开发人员有一个管道，他们可以使用该管道来部署已考虑安全性并且对运营可见的软件。进
入该平台的方式可能是手动或不可预测的。部署和运维操作的步骤可能需要人工操作或评估。
·级别 3: 应用程序开发人员在平台上有一个清晰的、自助的入口，并且能够通过自动化在生产环境部署和运行
符合安全性的代码。平台服务集中在其基础设施和管道实现中。
可以看到，无论是对 DevSecOps 的描述还是对成熟度的分级，GSA 都将自动化程度作为了最高准则。因此本
文中，编者对 DevSecOps 实践成熟度的评价，将把自动化程度作为最重要的评价标准。同时，auditability（可
审计性）也是比较重要的指标，因此对软件生产过程的监控能力也是需要关注的。
                                        40
1.2 DevSecOps 安全工具金字塔
DevSecOps 中的应用安全管理和保障能力依赖不同的安全工具能力互相作用、叠加、协作而实现，
DevSecOps 安全工具金字塔描述了安全工具所属的不同层次。安全工具之间的边界有时会模糊不清，因为单
一的安全工具可以实现多种类别的安全能力。
DevSecOps 安全工具金字塔描述了一组层次结构，金字塔底部的工具是基础工具，随着组织 DevSecOps 实践
成熟度的提高，组织可能会希望使用金字塔中较高的一些更先进的方法。
金字塔中的安全工具分层与组织的 DevSecOps 成熟度分级没有直接关系，仅使用低层次的安全工具也可以完
成高等级的 DevSecOps 实践成熟度，反之亦然。金字塔中的工具分层与该工具的普适性、侵入性、易用性等
因素相关。普适性强、侵入性低、易用性高的安全工具更适合作为底层基础优先引入，普适性弱、侵入性高、
易用性低的工具则适合作为进阶工具帮助 DevSecOps 实践变得更加完善且深入。
应用实践层
传统建设层
卓越层
CARTA
平台
ASTaaS
模糊测试
OSS/SCA
IAST
EDR
SAST
MAST
DAST
WAF
IDS/IPS
ASTO
容器安全
RASP
自动化
渗透测试
实
践
深
化
CARTA 平台
产品成熟度 1
市场需求度 2
技术创新度 5
1
2
3
4
5
0
发布
监控
部署
计划
测试
编码
构建
运营
DEV
OPS
DevSecOps 安全工具金字塔
                                        41
CARTA（Continuous Adaptive Risk and Trust Assessment，持续自适应风险与信任评估）由 Gartner 在 2018
年十大安全技术趋势中首次提出，在 2019 年再次被列入十大安全项目，也是 Gartner 主推的一种应对当前及
未来安全趋势先进战略方法。CARTA 强调对风险和信任的评估分析，这个分析的过程就是一个权衡的过程，告
别传统安全门式允许 / 阻断的处置方式，旨在通过动态智能分析来评估用户行为，放弃追求完美的安全，不能
要求零风险，不要求 100% 信任，寻求一种 0 和 1 之间的风险与信任的平衡。CARTA 战略是一个庞大的体系，
其包括大数据、AI、机器学习、自动化、行为分析、威胁检测、安全防护、安全评估等方面，集主流技术与一
体打造出一个自适应自判断安全防护平台。
CARTA 跟 DevSecOps 的趋势一致，将安全左移至开发阶段，并最终集成在整个生命周期中，完成敏捷化的自
适应风险和信任评估。因此 CARTA 已逐渐从单纯的生产环境实践方法，融合进 DevSecOps 的体系之中。
应用安全性测试即服务（ASTaaS）
应用安全测试编排（ASTO）
随着应用开发环境的开放化以及云服务日趋成熟，更轻量级的 ASTaaS 逐渐开始被接受。在 ASTaaS 上，使用
者通常仅需按需付费来对应用程序执行安全测试，而不必再分别购买昂贵的私有化安全设备。该服务通常是静
态和动态分析，渗透测试，应用程序编程接口（API）测试，风险评估等安全功能的组合。ASTaaS 通常用于移
动和 Web 应用程序。
ASTaaS 的发展动力主要来自云应用程序的使用，在云应用程序中，用于测试的资源更易于配置。有数据表明，
全球在公共云计算上的支出预计将从 2015 年的 670 亿美元增加到 2020 年的 1620 亿美元。
应用安全测试编排（Application Security Testing Orchestration，ASTO）由 Gartner 首次提出，目前该技术和
工具还处于较为初始的阶段。其目标是对生态系统中运行的所有不同的应用安全测试工具进行集中、协调的管
发布
监控
部署
计划
测试
编码
构建
运营
DEV
OPS
发布
监控
部署
计划
测试
编码
构建
运营
DEV
OPS
市场需求度 1
产品成熟度 1
技术创新度 4
1
2
3
0
4
5
市场需求度 3
产品成熟度 1
技术创新度 3
1
2
3
0
4
5
                                        42
理和报告。ASTO 综合管理 SAST/SCA/IAST/DAST 等各种安全工具的检测能力，完善与开发工具链条的集成与
自动化能力，提供安全能力编排方案。用户自定义编排安全检测的手段、工具与其它安全产品的自动化集成响应。
模糊测试
模糊测试（fuzz testing）是一种介于完全的手工渗透测试与完全的自动化测试之间的安全性测试类型。能够在
一项产品投入市场使用之前对潜在的应当被阻断的攻击路径进行提示。从执行过程来说，模糊测试的执行过程
很简单，大致如下：
·准备好随机或者半随机方式生成的数据；
·将准备好的数据导入被测试的系统；
·用程序打开文件检测被测试系统的状态；
·根据被测系统的状态判断是否存在潜在的漏洞。
发布
监控
部署
计划
测试
编码
构建
运营
DEV
OPS
市场需求度 3
产品成熟度 3
技术创新度 3
1
2