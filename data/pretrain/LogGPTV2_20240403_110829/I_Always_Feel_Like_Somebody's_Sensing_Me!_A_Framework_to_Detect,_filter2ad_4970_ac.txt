formation about the current bounding box can signiﬁcantly
reduce the number of necessary trial rounds. For example, if
the bounding box shape can be reasonably ﬁtted to a trian-
gle, then the sensor is likely horizontal-facing and placed on
1834    30th USENIX Security Symposium
USENIX Association
a wall. On the other hand, an ellipsoid coverage area likely
indicates a sensor placed on the ceiling or ﬂoor.
An iterative process then proceeds to reduce the area of
possible sensor locations to a pre-deﬁned threshold (e.g., 10%
of the region), upon which the bounding box and MLE are
returned (line 11). In each iteration, a directional trial is con-
ducted. GenerateTrial identiﬁes a suitable position and head-
ing for the trial by selecting a point near the center of the
bounding box and facing the MPE (line 12). In our evalu-
ation, we found distances of approximately 3 meters to be
the maximum applicable distance for a trial. The trial takes
one of many forms; for an inertial sensor, a user faces the
designated direction and waves an object (e.g., hand or shoe)
closely in front of their chest while shielding this activity with
their body from any sensor present behind them. To trigger
a camera sensor, a laptop plays a video clip that randomly
ﬂashes the screen with different colors. For audio, a trigger
sound is played, and so on. If the trial results increased the
device trafﬁc, the bounding box is reduced to areas within
visible range (line 16); otherwise, those areas are removed
(line 18), and the next iteration begins.
5.2 Ensuring Sufﬁciently Reduced Region
In order to provide a guarantee that this localization method
will always result in a minimal bounding box that is sufﬁ-
ciently small (e.g., 10% of the search region), a key assump-
tion must be made: for any arbitrary bounding box, a trial
can be identiﬁed which will eliminate a proper subset of the
bounding box. In the case of Algorithm 1, this assumption
can be reformed such that one can always construct a trial
that eliminates at least a single point contained within the
bounding box set. Due to the directional nature of each trial,
this can be achieved simply by conducting a trial that is posi-
tioned directly between two points within the bounding box,
and facing directly towards one of the two points such that
the other is obstructed. In the case of two points with large
intermediate distances, a two-phase trial must be performed
facing towards (and away from) each point, respectively.
Given the assumption that every trial can eliminate at least
a single point from the bounding box set, guaranteeing that
Algorithm 1 will always reduce the region to a certain size is
trivial. In the worst case, for a bounding box of n points, n-1
trials must be performed. In practice, each trial can eliminate
many points contained within the bounding box. Furthermore,
by leveraging the most likely sensor location, one can reduce
the search space signiﬁcantly and with relatively few trials.
6 Implementation
This section presents the implementation details of SNOOP-
DOG. We use readily available tools that are likely to be in a
user’s possession.
6.1 Experimental Setup
Wi-Fi Packet Snifﬁng: The laptop’s (Lenovo Thinkpad) net-
work card enters monitor mode and uses Wireshark to capture
all transmitted packets in the Wi-Fi frequency band to ag-
gregate trafﬁc statistics for analysis. As it is not necessary to
connect to a speciﬁc Wi-Fi network to monitor trafﬁc, SNOOP-
DOG can capture and identify clandestine wireless sensors
across all Wi-Fi trafﬁc, even if they reside on a closed or
hidden network. A smartphone can also be used instead of a
laptop, but requires a rooted [39] phone.
Collecting User’s Motion Data: User’s motion data is col-
lected via the IMU present on the smartphone (Google Pixel
3). The smartphone is placed either in the user’s hand or inside
the user’s pocket. 50 Hz accelerometer data is collected and
used to study the cause-effect relationship between motion
and sensor trafﬁc. We collect data along each of the 3 axes
and use them separately as if motion is present in only one di-
rection, the other 2 axes contribute minimally to the analysis,
and may instead serve as noise. The smartphone is also used
to collect audio and localize the user in his/her surroundings.
6.2 Detecting the Cause-Effect Relationship
between User Motion and Hidden Devices
While snifﬁng the network, SNOOPDOG classiﬁes the net-
worked devices present into two categories: devices that trans-
mit data continuously, and devices that have periodic or event-
based transmission.
6.2.1 Wireless Sensors that Encode Raw Data
Some representative sensors that continuously transmit vari-
ably encoded raw data include camera and RF sensors.
Camera: When a camera is monitoring a static scene, its
trafﬁc is fairly constant, as shown in Figure 2. As the scene
is perturbed by human motion, the trafﬁc changes rapidly.
However, it is yet unclear whether human motion causes this
variation. As soon as the user enters a new space, he or she
can turn on SNOOPDOG, which works in the background
to correlate IMU data with Wi-Fi trafﬁc of the transmitting
devices. As users walk in a space, the starting and stopping
patterns of their motion are unique. This unique pattern cre-
ates a ﬁngerprint on the camera trafﬁc. Once SNOOPDOG is
able to determine a cause-effect relationship between device
trafﬁc and user’s motion, it alerts the user. To deﬁnitively
ascertain the presence of a camera, SNOOPDOG asks the user
to perform a stop-start-stop-start-stop (S5) motion as follows:
1) the user stays stationary for some time to allow the device
trafﬁc to stabilize. 2) The user performs jumping jacks at the
current position. 3) The user stops again and waits for the
device trafﬁc to settle. 4) The user performs jumping jacks.
5) The user stops. The S5 motion causes a unique pattern to
appear in the Wi-Fi trafﬁc as shown in Figure 3 (Cam. 2).
USENIX Association
30th USENIX Security Symposium    1835
The entire detection phase requires 35−45 seconds. While
the user is performing the above S5 motion, SNOOPDOG
sniffs the Wi-Fi packets on the network and records the user’s
IMU acceleration. Figure 3 plots the camera trafﬁc after I-
frame suppression and user accelerometer data while perform-
ing the S5 motion. We observe that camera trafﬁc is a func-
tion of human motion. When the human is static, the trafﬁc is
small, but when the human begins performing jumping jacks,
the trafﬁc rate increases. To prove that the accelerometer se-
ries indeed has an effect on the camera trafﬁc, we leverage
Granger Causality using the statsmodel package in Python.
The null hypothesis of the Granger Causality Test is that the
IMU series does not granger-causes the camera trafﬁc series.
Hence, if the p-value of our test is below the threshold of 0.08,
we can reject the null hypothesis and claim that the IMU se-
ries granger-causes the camera trafﬁc series. We selected this
p-value using the results obtained from the ﬁrst camera. How-
ever, we evaluate our detection for all the other cameras and
show that this p-value threshold is optimal for all the cameras.
Figure 2: Wi-Fi trafﬁc captured from a camera for a static
scene and a scene where a human is walking around.
Figure 3: Wi-Fi trafﬁc of a snooping camera placed in the
same space as the user (Cam. 2) and a non-snooping camera
placed in a different space (Cam. 1) and its comparison with
IMU data of the user being monitored in the scene.
RF sensor: The detection process remains the same for RF
as that of a camera. We use an off-the-shelf mmWave RF
sensor from Texas Instruments, as shown in [23]. We model
the information obtained from the sensor as Wi-Fi trafﬁc.
The modeled Wi-Fi trafﬁc from the RF sensor due to human
motion is shown in Figure 4. Unlike a camera, RF sensors
respond to a change in RF reﬂections from the scene.
As soon as motion occurs within the space, the trafﬁc
changes rapidly in response. This is because the points cap-
tured by the RF sensor vary with motion. If the trafﬁc of
some device which was static when there was no motion but
changes rapidly when there is motion and goes back to being
static when motion stops, it is an indicator that the device is
monitoring user movement. To detect such devices, SNOOP-
DOG ﬁrst monitors the trafﬁc when the scene is static. It then
asks the user to perform the S5 motion in the space while
SNOOPDOG monitors the trafﬁc. As soon as the user is ﬁn-
ished, the user should leave the space so that SNOOPDOG
can monitor the trafﬁc again and conclude the presence or
absence of an RF sensor.
Figure 4: Modeled Wi-Fi trafﬁc for an RF sensor in a static
scene and one where a user performs our detection trial.
6.2.2 Wireless Sensors that Encode Inferred Events
Sensors that encode inferred events transmit upon event detec-
tion. By examining network trafﬁc, it is difﬁcult to ascertain
if the device is transmitting periodic data, like a temperature
sensor, or transmitting inferred events like a motion sensor.
Motion Sensor: Typical off-the-shelf motion sensors have
a timeout to prevent continuous alerts. The motion sensor
sends motion information to a cloud server, which in turn
sends an alert to the snooping user’s smartphone or performs
an action like turning on lights. After sending an alert, the
sensor waits for the timeout period before it looks for more
events. This period is between 30 seconds and 3 minutes for
most motion sensors. Similarly, there can be other sensors
in the scene that have a timeout period between uploading
events. To discover a device’s timeout period, SNOOPDOG
correlates user movements with device trafﬁc. If two events
are detected in the trafﬁc of a device and the user was in
motion during the time between the two events, this time is
noted as the timeout period. SNOOPDOG uses its active phase
to further improve the timeout estimation by asking the user
to move around the space until two events are detected in the
device’s network trafﬁc. SNOOPDOG asks the user to move
around the space, leave the space for the timeout period, and
then move around the space again. After that, the user moves
out from the space and then waits for the timeout period to
end. If SNOOPDOG detects trafﬁc by the device around the
same time the user moved and none when the user is not
moving, it concludes that the trafﬁc of the device is caused
by user movement. This process can be repeated to increase
the conﬁdence of detection. In Figure 5, we move around
the room and notice that the Wi-Fi trafﬁc from the motion
1836    30th USENIX Security Symposium
USENIX Association
051015202530350500010000Wifi Data in bytes05101520253035Time in seconds0500010000Wifi Data in bytesStatic SceneScene with human walkingCamera 1Camera 2(a)
(b)
Figure 5: (a) Wi-Fi trafﬁc of a motion sensor. The red-dotted
line represents a motion event. (b) Wi-Fi trafﬁc of an Alexa
device for the user repeating the same phrase 4 times.
sensor responds to these motion events. Since this trafﬁc is
discrete, we cannot perform time-series Granger causality
analysis. Instead, we perform an activity and track network
response. To detect the presence of a motion sensor, we ask
the user to move around the room, wait for the timeout period,
and move around again. SNOOPDOG scans all device trafﬁc
within a period of 5 seconds after the motion to determine
which device responds to user motion. If the device has trafﬁc
activity after the user moved, then the device is inferring
events from the user motion.
Audio snooping: SNOOPDOG records user conversations
in the background and monitors the network trafﬁc. If the
occurrence of a certain phrase or a word causes the trafﬁc of a
device to change, SNOOPDOG asks the user to repeat it until it
can establish a causality between the occurrence of that phrase
and the trafﬁc of the device. Once SNOOPDOG knows the
“wake word" for the acoustic home-assistant device, it repeats
the recording several times while monitoring the device trafﬁc
to increase the conﬁdence level of detection.
In our implementation, we used an Amazon Echo and Echo
Dot whose wake word was “Alexa" and “Computer" and a
Google Home Mini with the wake phrase “Hey Google".
6.2.3 Device ID via MAC Address Lookup
SNOOPDOG checks its database for a match of OUI in the
device’s MAC address. If present, SNOOPDOG can inform
the user with higher conﬁdence that the device is indeed a
surveillance device. Otherwise, it is added to the database and
identiﬁed as a clandestine sensor.
6.3 Device Localization
SNOOPDOG uses dead reckoning [40] and asks the user to
walk around the perimeter of the room to create rough map of
the room. Next, the user performs a detection trial at various
locations in the room. More trials lead to better localization.
At every location, SNOOPDOG tries to establish a cause-effect
relationship with the device trafﬁc. Regions with no cause-
effect relationship are eliminated.
IP Camera: The trafﬁc generated by a camera monitoring
a scene will increase when the scene is dynamic. To exploit
this, we ﬁrst monitor the trafﬁc of the device identiﬁed as a
camera for 30 seconds over a static scene. Each trial consists
of standing in a particular location (e.g., the middle of the
scene), pointing a laptop in a particular direction, and playing
a video that rapidly changes the colors on the screen of the
laptop for 30 seconds. This process is then repeated in dif-
ferent directions. If the camera is able to monitor the laptop
screen, its data rate during that period will be higher. On the
other hand, if the laptop screen is not visible, the camera’s
trafﬁc rate will be similar to the static scene. We can eliminate
a fraction of the space where no activity is detected and repeat
the process for the remaining region. In this way, we narrow
down the possible region where a camera is located. We give
a step by step walk-through of this process in section 7.
RF sensor: RF sensor localization is similar to that of a cam-
era. However, since RF sensors cannot detect the ﬂickering
screen of the laptop, we use human movement. SNOOPDOG
asks the user to stand in the middle of the space and wave their
arm up and down rapidly in front of them while shielding this
motion from the other side of the space with their back. If
the RF device trafﬁc does not respond to these stimuli when
performed on one side but responds to it on the other side, we
can eliminate that space.
Motion Sensor: Motion sensors are triggered by motion in
front of them. SNOOPDOG ﬁrst identiﬁes the motion detector
timeout (refer section 6.2.2), and then asks the user to stand
in the middle of the room before the timeout expires. After
timeout expiry, they are asked to move their hand in front of
them while shielding it from the other side with their body.
Acoustic (Audio) sensors: SNOOPDOG records the wake
word of the device and asks the user to move around the
room while this sound is repeatedly played from the smart-
phone app. If the user walks around the room but does not ﬁnd
any place where there the trafﬁc of the device changes, we
increase the volume and repeat the experiment. On the other
hand, if the sound played at every point in the room causes
the trafﬁc of the device to vary, we decrease the volume and
repeat the experiment. Finally, we identify areas where the
sound causes network response and areas where it does not.
We continue to reduce the volume of the device until the
search space has been sufﬁciently reduced4.
7 Evaluation
We evaluated SNOOPDOG on a set of sensors from well-
known brands as well as best-selling sensors on Amazon.
These are listed below in Table 1.
7.1 Sensors that Encode Raw Data
Wireless IP Cameras. For Granger causality analysis, we
lag the ﬁrst series by one element at a time and observe what
value of the lag results in the lowest p-value. Cameras have
4A walk-through of this process is provided in section A of the Appendix.
USENIX Association
30th USENIX Security Symposium    1837
Name
Type
Kamtron
Camera
Panasonic (HomeHawk) Camera
Camera
Wansview
Arlo (NetGear)
Camera
Camera