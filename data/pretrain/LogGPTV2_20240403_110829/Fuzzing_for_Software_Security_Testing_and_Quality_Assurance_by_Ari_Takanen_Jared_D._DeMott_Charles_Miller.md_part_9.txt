5 Unless, of course, if you plan to use it for illegal purposes.
6 For example, Zerodium (www.zerodium.com) and TippingPoint (www.zerodayinitiative.com).
7 http://weis2007.econinfosec.org/papers/29.pdf.
8 https://pages.bugcrowd.com/hubfs/PDFs/state-of-bug-bounty-2016.pdf.
6760 Book.indb 42 12/22/17 10:50 AM
2.2 People Conducting Vulnerability Analysis 43
single person who is employed to find bugs in various products can call him- or
herself these titles. These people could be working for a big name contractor looking
for bugs in customer source code via command-line tools9 and source navigator. Or
they could be government employees performing some secret reverse engineering
assignments. They could also just be individuals, bug hunters who love to fuzz, or
people who have a bone to pick with a specific vendor and like to find problems
in those products. They could also be developers coding up the next generation of
Windows backdoors and everything in between. When someone says he or she is a
hacker, this is the likely definition (or vice versa). Security researchers often utilize
fuzzers in their work.
2.2.3 penetration Testers
A penetration tester is traditionally someone who is hired to determine the strength
of the network, host, physical, and psychological security. A penetration tester will
generally be part of a team whose activities range from social engineering to break-
ing into the systems that they are authorized to test. The network testing portion
has become much easier with the advent of frameworks such as Metasploit, but it
is still a fine art that requires skill and knowledge in a vast array of subjects. Lately,
this term is reserved for professionally trained and certified experts.
2.2.4 Software Security Testers
This career path is growing in importance and prevalence in major software shops
around the nation. The goal is to improve security into companies’ development
process. A popular slogan is that security shouldn’t be glazed on after development,
but rather it should be baked in from the start. Testers are typically part of the qual-
ity assurance group and may have other testing requirements beyond just security,
depending on the size of the company. Testers will be discussed further in Chapter 3.
2.2.5 IT Security Engineers
Working in information technology (IT) security in the corporate environment is a
bit different than say, being a reverse engineer for a defense contractor. In the latter
case you’re business support, while in the former case you are the business. As such,
an IT role tends to include ROI (return on investment) type business knowledge/
experience as well as technical skills. As an engineer, your technical skills (and,
of course, some people skills) are really all that matter unless you decide to move
into management.
The other major difference would be dealing with users. In the past there was a
misconception that most security failures were due to uninformed or careless users.
This is not always the case, although user education is a big part of a corporate
9 The ‘grep’ utility is the best known tool for searching for specific strings in text-based data, such
as source code.
6760 Book.indb 43 12/22/17 10:50 AM
44 Software Vulnerability Analysis
security policy.10 So IT must deal with software failure, misconfigurations, users,
physical access problems, and more. This is why the CISSP and similar exams were
created to prove that a security specialist has knowledge of all domains.11 These
certifications are particularly important if you want to do corporate security con-
sulting (another great paying job, but typically involves a lot of travel).
2.3 Target Software
In testing, analyzing, fuzzing, hacking, or whatever, the target system, target soft-
ware, or target application is always the subject of interest. For example, if gftp.
exe is of interest to test for remotely exploitable bugs, the target would be the gftp.
exe binary or its source code.
Choosing the target is a trivial matter for software testers since they will always
be testing whatever software their company is producing. However, for bug hunters
the choice is a little more complex. Some bug hunters are given a free rein mission:
Go forth and find as many exploitable bugs in any products in use on the internet.
So which product should a bug hunter look at? Perhaps the bug hunters should
start with products they are interested in or already understand. For example, if
you have tools for auditing C code, are good at it, and have access to the code,
perhaps looking at something coded in C would be a good idea. Or if you like to
fuzz network servers when no source code is available and are familiar with clear
text protocols like FTP, SMTP, and IMAP, perhaps they would be a good choice.
Another thing that the bug hunter could consider is the possibility of finding a
vulnerability versus the payout if a vulnerability is found. It is less likely to find a
vulnerability from a widely used commercial product, than from an unmaintained
project from GitHub, but a serious vulnerability from a commercial product could
reach news headlines worldwide.
2.4 Basic Bug Categories
Once a target is selected, it pays to know what kind of bugs are out there to find.
There are many types of bugs to be found in software. Many can be uncovered with
fuzzers, particularly those of the memory corruption variety. Many of the bugs/
attacks will be briefly described below. Keep in mind that whole papers have been
written on the specifics of each bug and the intricacies of exploitation, and this is
intended only as an overview.
2.4.1 Memory Corruption Errors
Memory corruption errors have been the most prevalent and effective method
for maliciously exploiting a remote or local computer system. If memory can be
10 For more information on creating a security policy see http://www.sans.org/security-resources/
policies.
11 For more information on the 10 security domains, see https://www.isc2.org/cissp-domains/.
6760 Book.indb 44 12/22/17 10:50 AM
2.4 Basic Bug Categories 45
corrupted (a return address, the GOT, SEH pointer, function pointer, etc.) often
execution can be redirected to attacker supplied code.
The words buffer overflow are common in the security field and are generally
understood to mean “bad things are happening”. While this is true, it’s not precise.
For example, a static buffer on the stack can be overrun, or a buffer allocated in the
heap could be overrun. Both are overflows or buffer overflows. Both are tradition-
ally exploitable. However, one was a stack overflow, and the other a heap overflow.
We’ll define each to achieve an appreciation for the variety of bug types. A basic
understanding of how to exploit each type will be discussed as well.
2.4.1.1 Stack Overflows
A stack overflow involves memory on the stack getting corrupted due to improper
bounds checking when a memory write operation takes place. A simple snippet of
C demonstrates this concept (Figures 2.4 and 2.5).
Granted this example is shown on Vista, so this bug could not actually be
exploited beyond a denial of service due to Microsoft’s recent security enhance-
ments (more on that later). But other stack overflow scenarios or this code on older
platforms could be exploited to execute malicious code provided by the attacker.
2.4.1.2 Format String Errors
The format string bug was big in the late 1990s when it was first discovered. It has
since gone out of style since it is so easily detected by static analysis (source code
auditing) tools and the underlying libraries have eliminated the easy to exploit for-
mat strings. The names format string bug, format string vulnerability, or FSE (for-
mat string exceptions) stem from two things: the functions in which the bugs can
happen (printf() type functions) and the format characters that are used to create
output. For example, a valid snippet of code would be
printf(“%s”, user_supplied_buff);
But an invalid usage would be
#include 
Int my_format_func(char * buff)
{
printf(buff);
}
int main(int argc, char * argv[])
{
my_format_func(argv[1]);
}
When programmers made such mistakes, they were overlooked or thought harm-
less because the application still executed as intended. If you compile this example, it
is interesting to see that when a %x is supplied as the argument to this program, the
data printed is not a %x as you might expect. Something like “bfc07d10” is returned.
6760 Book.indb 45 12/22/17 10:50 AM
46 Software Vulnerability Analysis
Figure 2.4 Demonstration of a stack overflow.
This is because printf used the %x as the format character. The normal arguments
on the stack for a printf(“%x”, num); would be the “%x” (format character), and
the number that the programmer wants printed. In our example, the printf printed
the next value on the stack after the format string, as it was instructed to do. In
this case, since there was no legitimate data supplied by the programmer, it grabs
and prints the next value that happened to be on the stack (like a local variable,
frame pointer (ebp), return address, etc.). So this technique could be used to scan
the stack memory for interesting values. Similarly, a %d, %s, and more will print
values off the stack. However, the %n can be used to write a value in memory. %n
prints the number of bytes formatted to an address specified on the stack. A typical
exploit would use a combination of these techniques to overwrite a function pointer
or return address to gain control of the program.12
The following snippet of code and screen shot (Figure 2.6) give a demonstration
of another format string in action:
int main(int argc, char * argv[])
{
if( argc !=2 )
{
printf(“Not enougy args, got:\r\n”);
printf(argv[1]);
exit(-1);
}
12 The paper found at http://julianor.tripod.com/bc/formatstring-1.2.pdf gives a good detailed
explanation.
6760 Book.indb 46 12/22/17 10:50 AM
2.4 Basic Bug Categories 47
printf(“Doing something useful in this part of code.\r\n”);
}
Figure 2.6 shows the execution of that code. As the parameters (the %s%x) are
changed, varying information could be extracted off the stack or modified.
2.4.1.3 Integer Errors
This class of bugs is commonly referred to as an integer overflow, but this label
isn’t completely descriptive. Numerical wrapping, field truncation, or signedness
problems might be more descriptive terms. Review the following snippet of code:
#include 
#include 
int calc(unsigned short len, char * ptr) //implicit cast to short
{
if(len >= 10)
return -1;
printf(“s = %d\n”, len);
return 0;
}
int main(int argc, char *argv[])
{
int i;
char buf[10]; //static buf == bad
if(argc != 3)
{
printf(“Bad args\r\n”);
return -1;
}
i = atoi(argv[1]);
if( calc(i, argv[2]) == -1)
{
printf(“Oh no you don’t!\n”);
return -1;
}
memcpy(buf, argv[1], i);//using the int version of the len
buf[i] = ‘\0’;
printf(“%s\n”, buf);
return 0;
}
6760 Book.indb 47 12/22/17 10:50 AM
48 Software Vulnerability Analysis
Figure 2.5 A register and stack trace from a debugger of above attack.
Figure 2.6 Demonstration of a format string vulnerability.
6760 Book.indb 48 12/22/17 10:50 AM
2.4 Basic Bug Categories 49
Figure 2.7 shows the execution of the code. Why does the program crash when
provided the string “65536”? Note that the input is cast as a signed integer by
atoi(argv[1]). It is then recast as an unsigned short by the “s = i;” code. An int
or dword on most systems is 32 bits. The original string input was translated to
0x00010000. Since a short is only 16 bits, that was truncated to 0x0000. Thus,
s was less than 10, but i=65536, which is enough to clobber the 10-byte buffer in
the memcpy(buf, argv[2], i).
Also, if a number is read in as signed or unsigned, but then used as the opposite
in a later comparison, similar issues can occur.
2.4.1.4 Off-by-One
An off-by-one error typically indicates that one too many bytes have been written
to a particular buffer. On some systems (particularly little endian architectures,
like Intel’s x86 architecture), this can lead to an exploitable condition if the buffer
is directly next to the frame pointer (ebp) or some other function pointer.13 A typi-
cal bad slice of code might look like:
int off_by_one(char *s)
{
char buf[32];
memset(buf, 0, sizeof(buf));
strncat(buf, s, sizeof(buf));
}
The strncat copies one too many bytes, because it copies the stated size,
sizeof(buf), plus one extra byte, a NULL or 0x00. Again, if this buffer is right
next to the frame pointer ebp, it would become something like 0x08041200. The
least significant byte (LSB) became null. An x86 stack wind/unwind is as follows:
1. pushes
a. Puts function arguments on the stack
Figure 2.7 Executing the example code with off-by-one error.
13 This is the same basic problem as a standard stack overflow, except that the exploitation is different.
6760 Book.indb 49 12/22/17 10:50 AM
50 Software Vulnerability Analysis
2. call
a. Pushes the next executable instruction address (return address) to stack
3. entr
a. Pushes ebp to stack
b. Sets ebp = esp
c. Makes room for local variables on the stack by subtracting that amount
from the stack pointer
4. leave
a. Sets esp = ebp
b. Pops dword from esp → ebp
5. ret
c. Pops dword from esp → eip
If the saved ebp was corrupted, the stack pointer preceding the second return
will not be in the correct place. Since the LSB was nulled, it is possible that when
the return executes, esp will be pointing in the user-supplied buffer that caused
the off-by-one error. This could lead to a compromise, or as is generically said,
arbitrary code execution. Stack padding done by some compilers can mitigate such
attacks. And of course, other newer protections (yet to be described) can also miti-
gate such attacks.
2.4.1.5 Heap Overflow
A heap overflow is when data is written beyond the boundary of an allocated chunk
of memory on the heap. Heap memory (in C/C++) is allocated at run-time with the
malloc() family of functions. As with stack overflows, control information is stored
in-band, which, when overwritten with attacker-supplied data, can allow execu-
tion redirection. As with stack overflows, there are various ways and circumstances
under which this vulnerability will be exploitable or not. Various protections, such
as heap integrity checking, can be put in place to help prevent such attacks.
Exploiting in-band heap information is a little more complex than overwrit-
ing a stack return address or SEH pointer. It is also very dependent on the specific
implementation of the malloc library of interest. This is no surprise, since even
exploiting stack overflows is different for Windows and Linux, so certainly it will
be different with heap attacks. A detailed explanation of a heap overflow on vari-
ous platforms is beyond the scope of this book. For now, it’s enough to understand
that a traditional dlmalloc (the “Doug Lea” malloc implementation on GNU libc)
involves the removal of a corrupted item from a doubly linked list. When the meta-
data to this item is corrupted, it gives the attacker the ability to perform an arbitrary
4-byte write anywhere in memory. Typically, a function pointer in the GOT, or a
stack return address, will be overwritten with an address that points to shellcode.
The next time that function (say printf) is called, or when the function returns,
attacker code will be executed.
Another common way to exploit heap overflows is to arrange the heap so that
other application data follows the buffer being overflown. This other data may
contain function pointers or other important data structures.
6760 Book.indb 50 12/22/17 10:50 AM
2.4 Basic Bug Categories 51
2.4.1.6 (Uninitialized) Stack or Heap Variable Overwrites
This is a newer class of bugs, and one that is often difficult to successfully exploit.
Examine the following example:
int un_init(char *s) {
char buf[32];
int logged_in;
if ( strlen(s) > 36)
{
printf(“String too long!\r\n”);
logged_in =0;