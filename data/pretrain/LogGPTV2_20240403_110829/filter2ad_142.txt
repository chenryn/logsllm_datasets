title:Distress Detection (Poster Abstract)
author:Mark Vella and
Sotirios Terzis and
Marc Roper
Distress Detection (Poster Abstract)
Mark Vella, Sotirios Terzis, and Marc Roper
Department of Computer and Information Sciences, University of Strathclyde,
Livingstone Tower, 26 Richmond Street, G1 1XH Glasgow, United Kingdom
{mark.vella,sotirios.terzis,marc.roper}@strath.ac.uk
Web attacks are a major security concern as novel attacks can be easily created
by exploiting diﬀerent vulnerabilities, using diﬀerent attack payloads, and/or
encodings (obfuscation). Intrusion detection systems (IDS) aim to correctly de-
tect attacks. There are two main approaches to intrusion detection: misuse and
anomaly detection. Despite the diﬀerence in approach, they both fail to oﬀer
adequate resilience to novel attacks due to the diﬃculty in generalizing beyond
known attack or normal behavior [1].
Distress Detection. The aim of distress detection (DD) is to address this prob-
lem and to provide resilience to novel attacks by generalizing beyond known at-
tacks while controlling the false positives (FP) rate. In order to achieve this DD
combines attack generalization based on attacker objectives, dynamic analysis
techniques for the deﬁnition of suspicious behavior signatures, and feature-based
correlation of suspicious HTTP requests and system events.
Attacker objectives are the intended end results of attacks. Whilst attackers
can produce a large number of attacks to achieve their objective, there are certain
system events that are necessary for each particular objective [2]. By focusing
on the objectives, DD can generalize beyond speciﬁc instances of known attacks
to ones that have the same objective.
Within a speciﬁc objective, HTTP requests are suspicious if they can poten-
tially launch an attack with this objective, while attack symptoms are those
system events that are produced when the attack succeeds. Both suspect HTTP
requests and attack symptoms are identiﬁed by signatures that are resistant to
obfuscation and aim to maximize detection eﬀectiveness. In contrast to misuse
detection, they do not have to be exclusive to attacks.
The responsibility of associating attack symptoms with suspect HTTP re-
quests in a manner that suppresses false alerts is placed on a separate alert
correlation process. Our premise is that attacks must be launched by suspicious
HTTP requests and their successful execution must generate symptoms with
similar features. We do not relate alerts raised against speciﬁc attack techniques
but rather ones that indicate generic suspicious behavior.
Example Distress Detector. In order to demonstrate how DD can be applied we
developed an example detector. The detector focuses on web server tampering
threats, like spawning a reverse shell, bootstrapping the installation of a bot, or
planting a web-based backdoor. These threats can be grouped into the broader
‘malicious remote control’ attacker objective. The signatures for the detector
are based on the heuristic that in order to achieve malicious remote control, an
D. Balzarotti, S. Stolfo, and M. Cova (Eds.): RAID 2012, LNCS 7462, pp. 384–385, 2012.
c(cid:2) Springer-Verlag Berlin Heidelberg 2012
Distress Detection
385
attacker requires the establishment of a remote connection to the target server.
Only after a connection is established can the attacker proceed, e.g. to execute
shell commands to search for sensitive information, or use the victim as an attack
bot.
A malicious remote connection can be established either through a new con-
nection over an unused server port, or a new connection to an already listened to
web server port. Establishing a connection to an already listened to web server
port actually allows clients to connect to the web server and use its services.
However, an attacker could leverage it to ﬁrst maliciously extend the code-base
of the web application and to subsequently activate the code through its URL. In
this context, all events indicating the establishment of a connection or a listen-
ing port by web application server processes or their child processes, and those
indicating the addition of web application code, are considered attack symptoms.
Any HTTP request that contains executable content, intended either for dy-
namic in-memory injection into request processing code or for static injection
into the application’s code on-disk, is regarded as suspicious. Either type of in-
jection is necessary to establish a network connection or extend the application
code-base. The ﬁrst alert correlation condition associates suspects alerts raised
against executable content intended for dynamic injection with network connec-
tion symptom alerts by matching the IP address-port in the system call traces
generated by the executable content, with those of the subsequent network con-
nection event. The second correlation condition associates suspect alerts raised
for executable content intended for static injection with the code-base extension
symptom alert by matching the corresponding blocks of code.
Results and Conclusions. We implemented the detector for a LAMP deploy-
ment and we evaluated its resilience to novel attacks by assessing its ability
to eﬀectively detect attacks targeting a vulnerable phpBB3 installation. Four-
teen attacks were used employing diﬀerent vulnerability exploits (heap-overﬂow,
command and code injection, and unrestricted ﬁle upload), diﬀerent payloads
(reverse-shell, botzilla PHP-based IRC bot download and execute, and c99 back-
door installation), and diﬀerent obfuscation techniques (XOR, base-64 and PHP
obfuscation) within the detection scope of the detector. Attacks were mixed
with traﬃc based on our departmental phpBB server. Despite large numbers of
suspect requests and symptoms, the detector was able to detect all fourteen at-
tacks with no FP. Building on these promising results we are now developing
additional detectors to further explore the potential of distress detection.
References
1. Li, Z., Das, A., Zhou, J.: Model Generalization and Its Implications on Intrusion
Detection. In: Ioannidis, J., Keromytis, A.D., Yung, M. (eds.) ACNS 2005. LNCS,
vol. 3531, pp. 222–237. Springer, Heidelberg (2005)
2. Peisert, S., Bishop, M., Karin, S., Marzullo, K.: Towards models for forensic analysis.
In: Proceedings of the Second International Workshop on Systematic Approaches
to Digital Forensic Engineering (2007)