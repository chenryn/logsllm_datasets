in the context. Dynamic context information, such as the
Bluetooth link layer addresses of smartphones belonging to
customers at a shop, is likely to be volatile and thus harder
to predict. Naturally, contexts with more dynamic informa-
tion are more amenable for reliable context-based PoPs. In
the following, we describe a way to measure the ‘dynamic-
ity’ of the information present in a context at a given time
and show how it can be used to enhance protection against
context guessing attacks.
4.1.1 Surprisal of Context Measurements
To be able to identify PoPs that are too easy to fabricate,
we need to measure how diﬃcult it would be for an attacker
to guess a context measurement CA based on the history of
observations in the target context X. Since we are assuming
a strong attacker model, we have to assume that the attacker
A has equal opportunity to observe and generate a context
proﬁle on X as the target V has, and use this proﬁle to
fabricate PoPs that are likely to be observed in X.
To obtain optimal results, A needs to guess the correct
context measurement CV of V . The diﬃculty of fabricating
a PoP C∗
A that is accepted by V is therefore dependent on
the diﬃculty of guessing CV .
We model the occurrence of a speciﬁc contextual measure-
ment C (e.g., a set of WiFi or Bluetooth (BT) devices) in
context X with the random variable OX . The probability
that a context measurement C is observed in context X is
therefore P (OX = C). The surprisal associated with this
context measurement is the self-information of this outcome.
Definition 1. The surprisal associated with a context
observation C in context X is the self-information of this
measurement
IX (C) = log2(
1
P (OX = C)
) = −log2(P (OX = C))
(7)
and is measured in bits.
For example, if there is a 50% chance of observing a device
di in context X, i.e. C = {di}, then the self-information
related to an observation of di in X is IX (C = {di}) =
−log2(P (OX = {di})) = −log2(0.5) = 1 bit.
In order to calculate the surprisal associated with a mea-
surement C, we need to estimate the probability P (OX =
C). To do this, we adopt a frequentist interpretation of
probability and calculate the probability of context mea-
surment C in context X as the fraction of the number of
times that C has been observed in X. Hereby, we need to
distinguish between measurements that consist of a single
contextual event and multi-event measurements consisting
of several co-occurring contextual events. In the following,
we consider the occurrence of Bluetooth and WiFi devices
in the context as contextual events di.
Single-Event Measurements.
In the case that the
measurement consists of a single contextual event d, i.e.,
C = {d}, the calculation of surprisal of C is straightforward.
We can calculate the estimated probability of the event as
the fraction of measurements containing this event within
the whole observation history database HX for context X.
C = {d} : P (OX = C) =
(cid:107){Ci ∈ HX | d ∈ Ci}(cid:107)
(cid:107)HX(cid:107)
(8)
Multi-Event Measurements. For context measure-
ments containing more than one contextual event, the for-
mulation is slightly more complicated. We cannot merely
multiply the probabilities of the individual events, since in
reality, the events might be highly correlated with one an-
other, and assuming independence could therefore signiﬁ-
cantly over- or underestimate the true probability of event
combinations. Therefore, we need to estimate the probabil-
ity of a multi-event context measurement through its occur-
rence frequency in the observation history database. Thus,
given a context measurement C = {d1, d2, . . . , dn} that con-
sists of several context elements, the occurrence probability
of C can be calculated as
P (OX = C) =
(cid:107){Ci ∈ HX |∀di ∈ C : di ∈ Ci}(cid:107)
(cid:107)HX(cid:107)
(9)
As an example, let us consider context measurements of
Bluetooth devices. Let us assume that we have a total of
572= 55
(cid:107)HX(cid:107)
(cid:107)HX(cid:107)
= 35
= 15
100 = 0.15.
(cid:107){Ci∈HX |A∈Ci}(cid:107)
(cid:107){Ci∈HX |B∈Ci∧A∈Ci}(cid:107)
(cid:107)HX(cid:107)
(cid:107){Ci∈HX |B∈Ci}(cid:107)
n = 100 context measurements of context X in the context
history database HX . Each measurement represents the set
of Bluetooth devices observed in context X during a time
window of two minutes. In the observation history, device A
has been observed in 55 measurements and device B in 35
measurements. Out of these measurements, 15 are such that
both A and B occur in the same measurement. Let us now
consider the probability estimates for diﬀerent context mea-
surements. For individual measurements of the devices A
and B, we have P (OX = {A}) =
100 =
0.55 and P (OX = {B}) =
100 = 0.35.
For a measurement containing both devices, the estimate is
P (OX = {A, B}) =
Given these measurements, we can calculate the surprisal
values for these measurements IX ({A}) = −log(0.55) ≈ 0.86
bits, IX ({B}) = −log(0.35) ≈ 1.51 bits, and, IX ({A, B}) =
−log(0.15) ≈ 2.74 bits.
To estimate the probability of a multi-event measurement
C = {d1, d2, . . . , dn} in a context X in practice, we need
to identify the occurrence probability of the combination of
events in C occurring in context X. We do this by calcu-
lating the event combination’s occurrence probability in the
observation history database HX . This is a problem that
has been extensively studied in the data mining literature
in the context of frequent itemset mining. For example, the
Apriori algorithm [1] constructs the set of frequent itemsets,
i.e., combinations of items occurring more frequently than
a given threshold value in a given input database and their
occurrence counts. Also any other data mining algorithms
for mining frequent itemsets could be used. Apriori requires
as input a transaction database and a frequency threshold.
It returns the set of frequent itemsets in the transaction
database with regard to the frequency threshold and the oc-
currence counts of these frequent itemsets. We utilise this
and use the Apriori algorithm to calculate the frequent event
combinations observed in each context and their occurrence
counts by invoking the algorithm on the context observation
history database HX . We thus denote the set of frequent
event combinations in context X for frequency threshold
f ∈ [0, 1] with DX (f ), where DX (f ) = Apriori(HX , f ).
Given DX (f ), we can calculate a lower bound for the sur-
prisal of any measurement C using equation 7
 C.count
(cid:107)HX(cid:107) ,
f,
P (OX = C) =
if C ∈ DX (f )
otherwise.
(10)
(11)
where C.count denotes the occurrence count of C in the
history database HX of context X.
This estimate is a lower bound, since for measurements
not in the set of frequent event combinations, we do not
have the exact occurrence count information (Apriori re-
turns this information only for the frequent combinations).
We only know that this occurrence frequency is smaller than
f . Therefore, we take f as the upper bound for the occur-
rence probability of the measurement.
4.1.2 Evaluation
In order to evaluate the eﬀectiveness of surprisal ﬁltering
against context guessing attacks, we determined separately
for each user’s context X the sets of frequently occurring
Bluetooth and WiFi devices in the ConXPoP dataset using
the Apriori algorithm as well as their occurrence frequen-
Table 2: Improvement in FP rates when applying
surprisal ﬁltering on attack datasets
Unﬁltered
User
FP
Rate
A
B
C
D
E
F
13.0%
37.8%
37.2%
21.4%
16.2%
40.5%
Avg
27.7%
Relative change
BT,
WiFi,
n=4
n=2
bits
bits
-2.0% -8.9%
Improvement for Ithr = n bits
WiFi,
BT,
n=4
n=2
bits
bits
-2.8%
-6.1%
-27.2% -5.4% -31.1% -5.6%
-0.3%
-5.3%
-17.4% -0.0% -19.4% -0.0%
-11.6% -7.6% -13.8% -10.0%
-23.8% -7.7% -26.8% -9.5%
-14.4% -4.6% -16.7% -5.5%
-52.0% -16.6% -60.4% -20.0%
-4.9% -0.3%
cies. Using the patterns’ occurrence frequencies, we calcu-
lated their corresponding surprisal values and ﬁltered the
classiﬁcation results in the attack datasets by matching the
measurements against the patterns and removing any such
measurements whose matching pattern fell below the sur-
prisal threshold. We then evaluated the impact of surprisal
ﬁltering on the False Positive and False Negative rates. The
results are shown in Table 2.
As can be seen from the results, the ﬁltering of PoPs based
on their surprisal value reduces the FP rate of the attack
scenarios by 52% to 60% for Bluetooth and 17% to 20% for
WiFi, depending on the selected minimal surprisal thresh-
old, thereby signiﬁcantly reducing an attacker’s odds for a
successful context guessing attack.
4.2 Longitudinal Ambient Modalities
While surprisal ﬁltering eﬀectively reduces false positives,
our evaluation reveals that unfortunately, the False Negative
(FN) rate also increases, especially in the Home contexts
from 1.1% to 28.6% for WiFi-based and 55.0% for Bluetooth-
based ﬁltering on the average. This is understandable, since
the device set-up in these contexts is usually quite static and
the inherent entropy of the Bluetooth and WiFi environment
therefore does not support the creation of eﬀective PoPs
based on these context modalities. We therefore introduce a
complementary approach for handling PoPs in contexts that
provide low surprisal in the context using the basic PoP
schemes introduced above.
In the following we show how
longitudinal observations of ambient noise and luminosity
can be used to construct PoPs that are hard to guess, even in
contexts where the device set-up with respect to Bluetooth
and WiFi devices is too static to provide valid proofs using
the basic approach.
4.2.1 Ambient Light
Most smartphone devices today are equipped with a lu-
minosity sensor, primarily used for adjusting the brightness
of the smartphone’s display in diﬀerent lighting conditions.
Sensor information about ambient luminosity is therefore
readily available. The luminosity sensor does not consume
much energy, making continuous tracking of ambient lumi-
nosity feasible.
Halevi et al. [5] investigated the use of ambient light for
co-location veriﬁcation for trusted end devices. However,
they only consider the mean lighting level recorded by the
devices during a short snapshot and conclude co-presence, if
the average lighting levels do not deviate too much from one
573another. Such a simple scheme is obviously vulnerable to a
malicious prover A, who proﬁles the lighting conditions in a
target context beforehand. For a context guessing attack, he
just needs to replay the average lighting level in the target
context as his fabricated measurement and he will succeed
with high likelihood.
Therefore, we adopt a more sophisticated scheme. We do
not consider only the average lighting level in the context,
but focus on the relative changes in the lighting conditions
over a slightly longer period of time, e.g., one minute. Our
intuition is that such changes often arise from random events
like human activity in the context and are therefore diﬃcult
to predict.
4.2.2 Ambient Noise Level
The use of ambient noise for the purpose of co-location
veriﬁcation has been investigated in the literature [5, 15].
Halevi et al. used time- and time-frequency-based similar-
ity measures between two short 1-second audio snapshots,
whereas Truong et al. [15] used similar measures but 10-
second snaphots. In contrast to these approaches we take a
slightly diﬀerent approach and focus on the changes in the
ambient noise level over a longer period of time, e.g., one
minute. Here also, our intuition is that changes in ambient
noise are likely to result from human activity (e.g., people
talking), which is very diﬃcult to predict for a malicous
prover A.
For the purpose of context-based PoPs, we take the follow-
ing approach: when the prover P requests a PoP, the veriﬁer
V and prover P record a snapshot M = {m1, m2, . . . , mn},
where the measurements mi denote average readings of lu-
minosity or ambient noise level, depending on the modality
used, during subsequent time windows of width w. In prac-
tice, we propose to use windows of width w = 1 sec and
to use snapshots of one minute, i.e., n = 60. We think
that one minute is a long enough time period to capture
enough changes in the context, while short enough to allow
practical PoPs to be executed with modest delays. Since in
practice many applications will execute PoPs asynchronosly
and semi-automatically in the background, a delay of one
minute should not present a big problem for user interac-
tion. For example, an on-line social networking app might
execute the PoP in the background after the user “checks
in” in a particular location after arriving there, without re-
quiring the user to wait for the completion of the protocol.
Only in the case that the PoP fails, the user might get an
error notiﬁcation that the check-in failed.
Similar to the approach with WiFi and Bluetooth, we cal-
culate the mean Hamming distance, the euclidean distance,
and the mean exponential of diﬀerence (Features 2- 5 in
Sect. 3) between the snapshots MV and MP of the veriﬁer
V and prover P .
We also introduce an additional feature for luminosity
and audio measurements, the maximum cross-correlation
between the measurement snapshots.
Feature 6
Mcorr (MV , MP ) = max{cross − correlation(MV , MP )}
(maximum cross-correlation).
(12)
Since the placement of the sensors of a mobile device in
a context plays a signiﬁcant role on the intensity of the
light and audio measurements these sensors pick up, two co-
located devices might record measurements at signiﬁcantly
Table 3: PoPs utilizing audio and luminosity modal-
ities
Classiﬁer features
FP rate FN rate
Benign dataset
Luminosity
Audio
Luminosity+Audio
BT
WiFi
BT + WiFi
Luminosity+Audio+BT+WiFi
Attack dataset
Luminosity
Audio
Luminosity+Audio
BT
WiFi
BT + WiFi
Luminosity+Audio+BT+WiFi
20.1%
19.2%
9.3%
16.1%
11.0%