public key I
secret key s
V
parameters:
KAp
ComputeAs,KAp () = (A, rA)
ComputeBs,KAp (rA, c) = B
A
−−−−−−−−−→
c←−−−−−−−− pick c
−−−−−−−−−→ f (B)
B
?
= A.gI (c)
Figure 2: Generic scheme
Remark 1. A scheme can be multiple-round as for in-
stance if c is one bit long. However, to resist replay attacks,
it is necessary to have exponentially many possible veriﬁers’
outputs. In this paper, we focus on one-round protocols, but
our analysis can be generalized to multiple-round protocols.
A typical setting is c ∈(cid:8)1, . . . , 2l(cid:9). If gI is injective, two dif-
ferent c lead to two diﬀerent couples (A, B), therefore proba-
bility of success of a replay attack is negligible whenever 2−l
is negligible.
2.3 Deﬁnitions
Finally, we recall below several classical deﬁnitions related
to ZK identiﬁcation schemes.
Definition 1. A scheme is sound if there exists an ex-
tractor E which can retrieve a secret of one prover given
several transcripts of the form [A, ci, Bi] (with the same A).
E inputs the couples [ci, Bi] and outputs the secret of the
prover.
This deﬁnition means that when an adversary is able to
identify himself, he is in possession of a valid secret.
Consequently, in the previous generic description, a B
verifying Eq. (1) should be hard to compute without the
knowledge of s and rA. This implies that f is one-way.
There exist diﬀerent types of ZK schemes. Honest-Veriﬁer
Zero-Knowledge (HVZK) schemes do not reveal informa-
tion on the secret to an honest veriﬁer.
Definition 2. A scheme is called Honest-Veriﬁer Zero-
Knowledge if there exists a simulator S able to simulate a
protocol instance given the prover’s identity I and a chal-
lenge c, i.e. such that S(c, I) outputs a pair A and B, where
[A, c, B] is a valid transcript identifying I.
If such a simulator which does not use the prover’s secret
exists, this implies that legitimate veriﬁers cannot get infor-
mation on the prover’s secret.
Malicious-Veriﬁer Zero-Knowledge (MVZK) schemes re-
veals no information even to an adversary who impersonates
a veriﬁer.
Definition 3. A scheme is a Malicious-Veriﬁer Zero-
Knowledge scheme if there exists a simulator S able to sim-
ulate protocol instances given the prover’s identity I such
that outputs are indistinguishable from prover’s outputs for
arbitraries c.
The simulation is said to be perfect when the distribu-
tion of simulated outputs is the same as the distribution of
genuine outputs from a legitimate prover. In that case, it
is a perfect MVZK. If the distributions are not the same
but statistically close, i.e. if the statistical distance between
the two distributions is negligible, the scheme is statistical
MVZK.
3. VAUDENAY’S MODEL
We recall in this section the model for privacy, correct-
ness and soundness described in [43]. Note that we slightly
modify it in Section 3.2 in order to take into account zero-
knowledgeness speciﬁcities and to distinguish cases when
provers’ identities are public or hidden.
Following [43], we consider that provers are equipped with
ContactLess Device (CLD) to identify themselves. CLDs
are transponders identiﬁed by a unique Serial Number (SN).
During the identiﬁcation phase, a random virtual serial num-
ber (vSN) is used to address them.
3.1 Description
An identiﬁcation protocol is deﬁned as functionalities: Firstly
to setup the system made of a veriﬁer and several CLDs, sec-
ondly to run a protocol between CLDs and veriﬁers. Note
that we need an authority which publishes a mathematical
197structure as its public key. This authority enables to sup-
pose that the structure is secure, since CLDs are not able
to create such structure. Furthermore, this enables in the
model to have diﬀerent veriﬁers for one CLD system.
Setup Algorithms.
• SetupAuthority(1k) (cid:55)→ (KAs, KAp) outputs a pri-
vate/public key pair of an authority.
• SetupVerifierKAp () allows to initialize a veriﬁer. It
may generate a private/public key pair (KVs, KVp),
associated to the veriﬁer, which can be used to protect
communications between CLDs and veriﬁers.
• SetupCLDSecretKAp (SN) returns the parameters of
the CLD identiﬁed by SN. This algorithm outputs a
couple (s, I) where s is the private key of the CLD, I
its public key and identity.
• SetupCLDStateKVp (SN, s, I) returns S, the initial
internal memory of the CLD.
• SetupCLDKVp (SN) ﬁrst uses SetupCLDSecret then
SetupCLDState to initialize the CLD. It also stores
the pair (I,SN) in a database.
Remark 2. Note that SetupCLDSecretKAp generates
s and I without using the veriﬁer keys(KVs, KVp). This
means that in practice secrets of the veriﬁer and the CLDs
are independent.
For instance, if KAp deﬁnes a group of generator g where
the Computational Diﬃe-Hellman assumption holds, if the
pair (KVs, KVp) is (v, gv) for a random v and if I = gs,
the knowledge of v does not leak information on s (cf. Sec-
tion 5).
Communication Protocol P.
The identiﬁcation protocol between a CLD and a veriﬁer is
made of messages sent by the two parties. Protocol instances
are denoted π hereafter.
Oracles.
To formalize possible actions of an adversary, diﬀerent
oracles are deﬁned to represent ways for him to interact with
veriﬁers or CLDs, or to eavesdrop communications. The use
of diﬀerent oracles leads to diﬀerent privacy levels.
Given a public key KVp, the adversary has access to:
• CreateCLD(SN): creates a CLD with serial number
SN initialized via SetupCLD. At this point, it is a free
CLD, i.e. not yet in the system.
• DrawCLD(distr)(cid:55)→((vSN1,b1),...,(vSNn,bn)): this or-
acle moves a random subset of CLDs from the set of
free CLDs into the set of drawn CLDs in the system.
Virtual serial numbers (vSN1,...,vSNn), used to iden-
tify the drawn CLDs, are randomly chosen according
to a given distribution.
If bi is one, this indicates
whether a CLD is used in the system. This oracle
creates and keeps a table of correspondences T where
T (vSN)=SN. Adversary has no knowledge of this table
T .
• Free(vSN): moves the drawn CLD vSN to the set of
free CLDs.
• Launch() (cid:55)→ π: makes the veriﬁer launch a new pro-
tocol instance π.
• SendVerifier(m, π) (cid:55)→ m(cid:48): sends the message m to
the veriﬁer who responds m(cid:48) in the protocol instance
π.
• SendCLD(m(cid:48), π) (cid:55)→ m: sends the message m(cid:48) to the
CLD who responds m in the protocol instance π.
• Result(π) (cid:55)→ x: when π is a complete instance of P,
it returns 1 if the veriﬁer succeeds in identifying a CLD
from π and 0 otherwise.
• Corrupt(vSN)(cid:55)→ S: returns the internal state S of
the CLD vSN.
Types of Adversary.
• Strong adversary is allowed to use all of the above
oracles.
• Forward adversary cannot use any oracle after one
Corrupt query, i.e. destructs the system when he
corrupts one CLD.
• Weak adversary is not allowed to use the Corrupt
oracle.
• Narrow adversary is not allowed to use the Result
oracle.
This deﬁnes 6 kinds of adversary because narrow adversary
may also have restriction on the use of the Corrupt oracle.
Each of the 3 ﬁrst kinds of adversary can also be narrow.
For instance, an adversary can be narrow and forward, he is
then denoted narrow-forward.
Remark 3. In [43], the notion of destructive adver-
sary is also introduced. It is an intermediate notion between
strong and forward adversaries. Note that we do not con-
sider this deﬁnition here as the 6 kinds above are enough to
gauge our constructions in the sequel.
Three security notions are deﬁned in this model: correct-
ness, resistance against impersonation and privacy.
Definition 4. A scheme is correct if the identiﬁcation
of a legitimate CLD fails only with negligible probability.
Resistance against Impersonation Attacks.
The deﬁnition of resistance against impersonation attacks
below deals with active adversaries. Active adversaries are
able to impersonate veriﬁers and CLDs and to eavesdrop
and modify communications. This property of resistance
against impersonation attacks has also repercussions regard-
ing privacy properties (cf. Lemma 1). This security notion
is already widely studied for ZK schemes, see for instance
[3].
198Definition 5. A scheme is resistant against imper-
sonation Attacks if any polynomially bounded strong ad-
versary cannot be identiﬁed by a veriﬁer except with a negli-
gible probability. Adversaries are authorized to use diﬀerent
devices at the same time while they communicate with the
veriﬁer. Nevertheless, the resulting protocol transcript must
neither be equal to an outputted one between a legitimate
CLD and the veriﬁer nor lead to the identiﬁcation of a cor-
rupted CLD.
Remark 4. Obviously it means that a scheme is not re-
sistant against impersonation attack if an adversary is able
to modify on the ﬂy outputs from a prover without aﬀect-
ing the identiﬁcation result. Moreover, even if not addressed
by the deﬁnition, replay attacks must be mitigated. This is
why the probability that a legitimate veriﬁer outputs twice
the same values in a complete protocol instance should be
negligible.
Privacy.
Privacy is deﬁned as an advantage of an adversary over
the system. More precisely, there is a privacy leakage if the
system cannot be simulated. To formalize this, [43] proposes
to challenge the adversary once with the legitimate oracles
and a second time with simulated oracles. In this setting,
the adversary is free to deﬁne a game and an algorithm A
to solve his game. If the two challenge’s results are distin-
guishable, then there is a privacy leakage. A game with three
phases is imposed. In the ﬁrst phase, A has access to the
whole system using oracles. In a second phase, the hidden
table T constructed via DrawCLD oracle is transmitted to
A. In a third phase, A, which is no longer allowed to use the
oracles, outputs its result. A scheme is deﬁned as private
if for any game, all adversaries are trivial (see Deﬁnition 7).
Definition 6. A blinded adversary uses simulated ora-
cles instead of the oracles Launch, SendVerifier, Send-
CLD and Result. Simulations are made using an algo-
rithm called a blinder denoted B.
To simulate oracles, a blinder has access neither to the provers
secrets nor to the secret key KVs. We denote AO the algo-
rithm A when executed using legitimate oracles and AB the
algorithm A when executed using the blinder.
Definition 7. An adversary is trivial if there exists a
blinder B such that the diﬀerence
(cid:12)(cid:12)(cid:12)Pr
(cid:104)AO
(cid:105) − Pr
(cid:104)AB
wins
wins
(cid:105)(cid:12)(cid:12)(cid:12)
is negligible.
Hence, to prove privacy, it suﬃces to prove that an adversary
cannot distinguish between the outputs of the blinder B and
outputs made by legitimate oracles. As stated in [43], this
deﬁnition of privacy is more general than anonymity and
untraceability. To the six kinds of adversary enumerated
above correspond accordingly six diﬀerent notions of privacy.
In the sequel, we always mention which notion we refer to.
Note that Corrupt queries are considered to always leak
information on CLDs’ identity. For instance, an adversary
can systematically open CLDs in order to track them. In
this model, such an adversary is considered as a trivial one
because a blinded adversary will succeed the same way, as
the Corrupt oracle is not simulated. Strong privacy is de-
ﬁned only to ensure that CLDs cannot be tracked using their
outputs even if their secrets are known.
The following lemma established by Vaudenay in [43] em-
phasizes the link between impersonation resistance and pri-
vacy:
Lemma 1. A scheme secure against impersonation attacks
and narrow-weak (resp. narrow-forward) private is weak
(resp. forward) private.
The proof relies on the fact that an adversary is not able to
simulate any CLD if the scheme is sound. This implies that
the Result oracle is easily simulated by the blinder.
3.2 Adaptation of the Model for the Study of
Zero-Knowledge Identiﬁcation Schemes
A ZK scheme enables to prove the knowledge of a secret
without revealing any information on this secret whereas
privacy implies that an adversary gains no advantage over
the identity of CLDs.
Hence, even if a scheme respects privacy, it is still worth
to prove that even a legitimate veriﬁers does not have any
advantage on the CLD’s secret. The diﬀerence between ad-
versaries and a legitimate veriﬁer is that the latter knows
the secret KVs while adversaries or provers are unaware of
it. On one hand, if KVs is not needed to verify the validity
of protocol transcripts, the veriﬁer and the adversary have
the same tools to determine information on the prover’s se-
cret key. On the other hand, if KVs is needed, the veriﬁer
could use this knowledge to have some information on the
secret.
However our setup algorithms are deﬁned to ensure that
the secret s and KVs are independent (cf. Remark 2). A
simulator against an honest veriﬁer is thus authorized to
use KVs to simulate CLDs’ outputs, as KVs gives him no
advantage on s. In ﬁne, the deﬁnition of Honest-Veriﬁer
ZK schemes remains unchanged but the use of KVs will be
considered in the security analysis of our schemes.
New Adversaries: Hidden-Identity and Public-Identity.