xi,j · (1 − τi) · λ
xi,j · τi · (1 − τj) · λ.
Goodput depends on how much data the application
generates (i.e., λ), but we are interested in determining
the proportion of λ that a given network can handle with
G
λ
.
Q =
(6)
It follows that 0 ≤ Q ≤ 1 (a quality of 1 meaning that
all the data arrives at the destination before the deadline).
The total cost C is deﬁned as the sum of all per-path
costs per second. We require the total cost to be bounded
by a constant μ. This allows us to maximize communication
quality while keeping cost to a reasonable level, but μ can
be set arbitrarily high if the cost does not have to be limited.
Therefore, the total cost is deﬁned and bounded as follows:
C =
ci · Si ≤ μ.
(7)
n−1(cid:2)
i=0
Finally, the sum of all coefﬁcients in x must equal 1. In
other words, all the bits generated by the application must
be sent over the network along some combination of paths.
On one hand, we do not want to send more data than what
the application generates. On the other hand, the reason why
we never send less data is that we can achieve a more ﬁne-
grained decision of whether data should be dropped through
an additional dedicated path (the blackhole path, presented
in Section V-C). Therefore, we have
n−1(cid:2)
n−1(cid:2)
xi,j = 1,
(8)
(9)
i=0
j=0
xi,j ≥ 0 ∀ i, j ∈ {0, 1, . . . , n − 1}.
B. Linear Programming
We formulate our problem as a standard linear optimiza-
tion:
pTx(cid:2),
maximize
subject to Ax(cid:2) ≤ q,
Bx(cid:2)
= 1,
x(cid:2) ≥ 0.
and
(10)
The objective is to maximize the communication quality
Q, which is captured by p and follows from Equations 5
and 6. Each element of p corresponds to a different path
combination and represents the proportion of data that can
be delivered in time by using that particular combination:
⎧⎨
⎩ 1 − (τi · τj)
1 − τi
0
pT = (p0, p1, . . . , pn2−1),
(11)
if di + dmin + dj ≤ δ,
if di + dmin + dj > δ and di ≤ δ,
otherwise.
(12)
In the above equation, i and j are deﬁned as follows:
(cid:7)
i = l mod n,
(cid:6)
l
n
.
(13)
pl =
(5)
j =
490
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:36:58 UTC from IEEE Xplore.  Restrictions apply. 
We deﬁne i and j from l to convert indexes back to the
A. Minimizing Cost
original (non-vectorized) notation used in x.
Bandwidth constraints, as presented in Equations 2 and 3,
are deﬁned by coefﬁcients in A, from A0,0 to An−1,n2−1:
Instead of maximizing communication quality for a given
maximum cost, it is possible to solve the opposite problem,
i.e., minimize cost for a given minimum quality:
⎛
⎜⎜⎜⎜⎜⎝
A0,0
A1,0
...
A =
A0,1
A1,1
...
An−1,0 An−1,1
r0
Ak,l =
⎧⎪⎪⎨
⎪⎪⎩
r1
λ + λ · τi
λ · τi
λ
0
⎞
⎟⎟⎟⎟⎟⎠ ,
...
A0,n2−1
A1,n2−1
···
···
...
··· An−1,n2−1
···
if i = j = k,
if i (cid:6)= k, j = k,
if j (cid:6)= k, i = k,
otherwise.
rn2−1
(14)
(15)
The cost constraint (Equation 7) is deﬁned with the
remaining coefﬁcients in A, from r0 to rn2−1:
rl = (λ · ci) + (λ · τi · cj),
where i and j are deﬁned as in Equation 13.
(16)
rl =
pTx(cid:2),
minimize
subject to Ax(cid:2) ≤ q,
Bx(cid:2)
= 1,
x(cid:2) ≥ 0.
and
The objective, represented by pl, must be redeﬁned as
follows:
pl = (λ · ci) + (λ · τi · cj).
(21)
The bandwidth-related constraints (deﬁned in A) and B
remain the same, but the cost constraint (deﬁned in rk and
q) becomes a quality constraint:
⎧⎨
⎩ τi · τj − 1
τi − 1
0
if di + dmin + dj ≤ δ,
if di + dmin + dj > δ and di ≤ δ,
otherwise,
(20)
(22)
(23)
The vector q allows us to specify the upper bounds on
where i and j are deﬁned as in Equation 13, and
bandwidth and cost:
(17)
q =
⎛
⎜⎜⎜⎜⎜⎝
b0
b1
...
bn−1
⎞
⎟⎟⎟⎟⎟⎠ ,
⎞
⎟⎟⎟⎟⎟⎠ .
⎛
⎜⎜⎜⎜⎜⎝
b0
b1
...
bn−1
μ
q =
Finally, B is used to enforce the constraint of Equation 8,
i.e., to ensure that all the generated trafﬁc is assigned to
(cid:15)
some path combination:
B =
···
(18)
1 1
(cid:16)
1
.
C. Blackhole Path
When the bitrate λ exceeds the network’s capacity, part
of the data must be dropped. The model above does not
allow that situation to be represented directly. If the sign in
Equation 8 was changed to ≤, then the total amount of data
(sent on all paths combined) could be less than λ. However,
the optimal solution might consist in sending data but not
retransmitting it, which the above method does not allow.
Instead, one solution is to dedicate a virtual path to the
function of discarding data. We refer to it as the “blackhole
path” and it has the following characteristics:
d0 = ∞,
b0 = λ,
(19)
Sending data along this path is equivalent to discarding
the data, and this path can be selected at any stage of
(re)transmission.
τ0 = 1,
c0 = 0.
VI. EXTENSIONS
Our model can be extended and transformed in several
ways to specify different objectives or consider more com-
plex network characteristics.
μ
where μ is, in this case, the lower bound on quality (instead
of being an upper bound on cost).
B. Random delays
Up to this point, we assumed that the delay observed
on each path was constant. Let’s now consider instead that
delays follow probability distributions. We denote by di the
random variable representing the delay of a transmission on
path i, which follows a probability distribution Di, i.e.,
di ∼ Di.
(24)
One problem that arises in this situation is that
the
sender must determine an additional parameter for each
path combination, namely the waiting time between the
moment a packet is sent and the moment when it is possibly
retransmitted. We call this the retransmission timeout and
denote it ti,j.
The receiver must also choose a path (with delay dmin) to
send acknowledgements back. We deﬁne this path to be the
one with the smallest expected delay, i.e.,
i∈{1,...,n} E[di].
min = arg min
(25)
Assuming that all delays (including dmin) are independent
of each other, the sender should ﬁnd a value of ti,j such that
(P(t + dj ≤ δ) · P(di + dmin ≤ t)).
(26)
ti,j = max
t∈R+
491
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:36:58 UTC from IEEE Xplore.  Restrictions apply. 
In other words, the sender should, at the same time, ﬁnd
a value of ti,j that is small enough for the deadline to be
respected, and large enough so that a retransmission is not
performed before the acknowledgement is received.
As we do not consider the duration of a transmission to
be deterministic anymore, there is now a chance that data
may be correctly transmitted/retransmitted but not respect
the deadline.
We can calculate the probability of a having to retransmit
a packet (sent initially along path i) along path j as follows:
P (retransi,j) = 1 − P (di + dmin ≤ ti,j) · (1 − τi).
Therefore, pl, Ak,l, and rl become
pl = P (di ≤ δ) · (1 − τi)
+ P (retransi,j) · P (t + dj ≤ δ) · (1 − τj);
⎧⎪⎪⎨
λ + λ · P (retransi,j)
if i = j = k,
λ · P (retransi,j)
if i (cid:6)= k, j = k,
⎪⎪⎩
if j (cid:6)= k, i = k,
λ
otherwise;
0
rl = (λ · ci) + (λ · P (retransi,j) · cj).
Ak,l =
(27)
(28)
(29)
(30)
highest value of x(cid:2), and then we select the combination that
is lacking the most packet assignments compared to the ideal
distribution of trafﬁc represented by x(cid:2).
Algorithm 1: Selection of a path combination.
Data: Number of paths n, Solution x(cid:2).
// initialization
for i ← 0 to n2 − 1 do
assigned[i] ← 0;
total ← 0;
Function selectPathCombination(): integer
res ← 0;
if total = 0 then
res ← arg max
x(cid:2)
i;
i
else
res ← arg min
assigned[res]++;
total++;
return res;
i
assigned[i]
total
− x(cid:2)
i;
As before, i and j are deﬁned according to Equation 13.
VII. EVALUATION
A. Simulation Framework
To demonstrate the viability of our model, we performed
a series of experiments with the ns-3 network simulator [21].
We set up multiple UDP sockets between two network nodes
(a client and a server). Those sockets are associated with
different devices (i.e., network interfaces) communicating in
pairs over a point-to-point channel. In this setup, each socket
corresponds to a different path and we can specify the three
key characteristics (bandwidth, delay, and loss) of each one.
The client generates a total of 100,000 messages, each be-
ing 1024 bytes long (including the application-level header),
at a given constant rate. Each message contains a simple
header composed of a timestamp and a sequence number.
Since the network characteristics are all known in advance,
the linear program can directly be solved (with the CGAL
library [22]). Thereafter, each individual packet must be
assigned to a path combination according to the solution
of the linear program. In other words, the vector x(cid:2) must be
discretized. The intuition behind the algorithm we present
here is that we select the path combination that will bring the
actual packet distribution the closest to the optimal solution.
We use Algorithm 1 in the simulation framework to deter-
mine the path combination to be used to send each packet
to the server. The algorithm works as follows. A variable
maintains the total number of assignments (i.e., the total
number of packets generated so far) and an array maintains
the number of packets assigned to each combination. At
ﬁrst, we select the path combination corresponding to the
If a message is assigned to the blackhole path, then it is
immediately dropped; otherwise, the client sends it through
the appropriate socket. Retransmissions are performed after
a timeout that depends on the initial path.
The server, when it receives a message, responds by
sending an acknowledgment along the lowest-delay path.
The acknowledgment only contains the sequence number of
the received message. The server also veriﬁes whether the
deadline was respected with the enclosed creation times-
tamp.
Experiment 1: Fixed Path Characteristics
We ﬁrst show simulation results in a scenario similar
to the one presented in Section II,
i.e., with two paths
that are different from each other in every aspect. Their
characteristics are deﬁned in Table III. We ﬁrst assume that
the network characteristics are invariable and known by the
sender, but we relax this assumption in the next experiments.
PATH CHARACTERISTICS USED IN EXPERIMENTS 1 AND 3.
Table III
Bandwidth (Mbps) bi
Delay (ms) di
Loss rate τi
Path 1
80
400
0.2
Path 2
20
100
0
We simulated propagation delays of 400 and 100 millisec-
onds for Path 1 and Path 2, respectively. However, queueing
produces some additional delay when a path is used at
492
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:36:58 UTC from IEEE Xplore.  Restrictions apply. 
near-full capacity (see Section IX-A for a discussion on
the matter). This is exacerbated by the fact that acknowl-
edgments, although small, are not entirely negligible. We
measured in our experiments that the deviation from the
speciﬁed delay could be as high as 50 ms. Therefore, to avoid
that packets miss their deadlines by a few milliseconds, we
conservatively set delays to 450 and 150 ms in our model.
Since the deviation from the original delay is about 50
ms in each direction, we set the retransmission timeouts to
100 ms beyond the time an acknowledgment is supposed to
come back (i.e., ti = di + dmin + 100 ms). In practice, both
propagation and queueing delays would be reﬂected in RTT
measurements and thus no adjustments would be necessary.
Table IV shows some selected solutions of the linear
program for those two paths. There are two application-
related parameters that can vary: the generated data rate λ
and the lifetime δ. We show how the optimal communication
quality Q is affected when one of those two parameters
varies, while the other is ﬁxed.
Table IV
SOLUTIONS USED BY THE SENDER FOR A NETWORK WITH TWO PATHS