ber of missed changes over the simple age-based predictor by up
to 47% when the sampling budget is small. For sampling bud-
gets higher than 30 × 10−3 both RL-AGE and RL perform simi-
larly as most missed changes happen in old, high-prevalence paths
where predictors behave similarly. MINMISS reduces the number
of missed changes by less than 11% compared to RL. We adopt
MINMISS in DTRACK. It is unlikely that we can improve its per-
formance, even if we could it would require a signiﬁcantly more
complex model.
5.6 Evaluation of in-path sampling
We now use MINMISS as the path rate allocation method, and
compare the performance of the in-path sampling strategies us-
ing Fig. 8(b) (“minimize misses” in Fig. 8(a) and “per-sequence”
in Fig. 8(b) are the same).
The per-probe strategy improves on per-sequence by up to
54%. Per-sequence sampling often wastes probes as once a single
changed interface is detected, there is no need to sample the rest
of the sequence or route, the route can be remapped immediately,
and so the search for the next change begins earlier. Per-probe also
has a large advantage in spotting short-lived routes, as its sampling
rate is n(s) times higher (around 16 times in our data) than per-
sequence, greatly decreasing the risk of skipping over them.
Each of per-link and per-probe use a single probe per sample,
but from Fig. 8(b) the latter is clearly superior. This is because
the efﬁciency gains of the sample-sharing strategy of per-link are
outweighed by the inherent risks of missed changes (as explained
at the end of Sec. 5.3). This tradeoff becomes steadily worse as
probing budget increases, in fact for this strategy the error saturates
rather than tending to zero in the limit.
Per-safelink sampling addresses the worst risks of per-link, and
over low detection budgets is the best strategy, with up to 28%
fewer misses than per-probe. However, at high sampling rates a
milder form of the issue affecting per-link still arises, and again
the error saturates rather than tending to zero. These results show
that exploiting spatial information (like shared links) must be done
with great care in the context of tracking, as the very assumptions
one is relying on for efﬁciencies are, by deﬁnition, changing (see
Tracetree results below).
By default we use per-safelink sampling in DTRACK, as we ex-
pect most deployments to operate at low sampling budgets (e.g.,
DIMES and CAIDA’s Ark). At very high sampling budgets we
recommend per-probe sampling.
5.7 Comparing DTRACK to alternatives
Fig. 8(c) replots the per-probe and per-safelink curves from
Fig. 8(b) on a logarithmic scale, and compares against FastMapping
and the assisted form of Tracetree. Each variant of DTRACK outper-
forms FastMapping by a large margin, up to 89% at intermediate
detection budgets. DTRACK also outperforms Assisted Tracetree
for all detection budgets, despite the signiﬁcant degree of assistance
provided. We attribute this mainly to the failure of the underlying
tree assumption because of load balancing, trafﬁc engineering, and
typical AS peering practices. Real (unassisted) Tracetree also suf-
fers from false positives, which in fact grow linearly in probing
budget. Already for a detection budget of 8 × 10−3 probes per
second per path, Tracetree infers 17 times more false positives than
there are real changes in the dataset!
As an example of the beneﬁts that DTRACK can bring, DIMES,
which uses Bd/|D| = 8.88 × 10−3 probes per second per path,
would miss 86% fewer changes (detect 220% more) by using
DTRACK instead of periodic traceroutes.
Fig. 9 shows the average remapping cost as a function of sam-
pling budget for DTRACK and FastMapping. Real deployments can
reduce remapping costs compared to the results we show by con-
ﬁguring MDA to use less probes [31]. We omit Tracetree as it does
not perform remapping.
131t
e
g
d
u
B
g
n
b
o
r
P
i
l
a
t
o
T
f
o
n
o
i
t
c
a
r
F
i
g
n
p
p
a
m
e
R
r
o
f
d
e
s
U
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
 0
DTrack (per−safelink)
DTrack (per−probe)
FastMapping
 0
 10
 20
 30
 40
 50
 60
Detection Budget  (probes/sec/path x10−3)
Figure 9: Remapping cost for a given detection budget.
Fig. 9 gives Br/B = (B−Bd)/B, the fraction of the probing
budget that is used for remapping. At low detection budgets, sam-
pling frequency is lower and each sample has a higher probability
to detect a change (as well as to miss others). In such scenarios the
remapping cost is comparable to the total budget. As the sampling
budget increases, the number of changes detected stabilizes and the
remapping cost becomes less signiﬁcant relative to the total.
Taking again the example of DIMES, even including DTRACK’s
remapping cost, DIMES would miss 73% less (or detect twice
as many) changes using DTRACK instead of periodic traceroutes,
while providing complete load balancing information.
Fig. 9 allows an operator to compute an initial sampling budget
so that DTRACK respects a desired total probing budget B in a real
deployment. After DTRACK is running, the operator can readjust
the sampling budget as a function of the actual remapping cost.
Fig. 10 shows the distribution of the detection delay of detected
changes for the different tracking techniques, given a detection bud-
get of Bd/|D| = 16 × 10−3 probes per second per path. Results
for other detection budgets are qualitatively similar. We normalize
the detection delay by FastMapping’s virtual path sampling period
(which is common to all paths).
We see that FastMapping detection delay is in a sense the worst
possible, being almost uniform over the path sampling period.
Tracetree samples paths more frequently and achieves lower detec-
tion delay. However, both FastMapping and Tracetree are limited
by sampling all paths at the same rate. DTRACK (per-safelink) re-
duces average detection delay by 57% over FastMapping and has
lower delay 99.8% of the time, the exceptions being, not surpris-
ingly, on paths with low sampling budgets.
Low detection delay is important to increase the ﬁdelity of fault
detection and tomographic techniques. To see the beneﬁts, say that
a monitor uses a total budget B of 64 kbits/sec to track 8,000 paths.
It would detect 52% more changes by replacing periodic trace-
routes with DTRACK (using safelink) and it would detect 90% of
path changes with a delay below 125 seconds. Replacing classic
traceroute by MDA also has the beneﬁt of getting complete and
accurate routes.
Summary. Our results indicate that DTRACK not only detects more
changes, but also has lower detection delay, which should directly
beneﬁt applications that need up-to-date information on path sta-
bility and network topology.
6. RELATED WORK
Forwarding vs. routing dynamics.
Internet path dynamics and
routing behavior have captured the interest of the research com-
munity since the mid-90s with Paxson’s study of end-to-end rout-
s
e
g
n
a
h
C
d
e
t
c
e
t
e
D
f
o
n
o
i
t
c
a
r
F
.
m
u
C
 1
 0.8
 0.6
 0.4
 0.2
 0
DTrack (per−safelink)
DTrack (per−probe)
Assisted Tracetree
FastMapping
 0  0.2  0.4  0.6  0.8  1  1.2  1.4  1.6
Normalized Detection Delay
Figure 10: Distribution of detection delay normalized by Fast-
Mapping’s virtual path sampling period.
ing behavior [24] and Labovitz et al.’s ﬁndings on BGP instabil-
ities [16].
In this paper, we follow Paxson’s approach of using
traceroute-style probing to infer end-to-end routes and track virtual
path changes. Traceroute is appealing for tracking virtual paths
from monitors located at the edge of the Internet for two main
reasons. First, traceroute directly measures the forwarding path,
whereas AS paths inferred from BGP messages may not match the
AS-level forwarding path [21]. Second, traceroute runs from any
host connected to the Internet with no privileged access to routers,
whereas the collection of BGP messages requires direct access to
routers. Although RouteViews and RIPE collect BGP data from
some routers for the community, public BGP data lacks visibility
to track all path changes from a given vantage point [7, 29]. When
BGP messages from a router close to the traceroute monitor are
available, they could help tracking virtual path changes. For in-
stance, Feamster et al. [12] showed that BGP messages could be
used to predict about 20% of the path failures in their study. We
will study how to incorporate BGP messages in our prediction and
tracking methods in future work.
Characterization and prediction of path behavior. Some of the
virtual path features that we study are inspired by previous char-
acterizations of Internet paths [2, 12, 24] as discussed in Sec. 2.4.
None of these characterization studies, however, use these features
to predict future path changes. Although to our knowledge there is
no prior work on predicting path changes, Zhang et al. [33] studied
the degree of constancy of path performance properties (loss, de-
lay, and throughput); constancy is closely related to predictability.
Later studies have used past path performance (for instance, end-
to-end losses [28] or round-trip delays [6]) to predict future per-
formance. iNano [20] also “predicts” a number of path properties
including PoP-level routes, but their meaning for route prediction
is different than ours. Their goal is to predict the PoP-level route of
an arbitrary end-to-end path, even though the system only directly
measures the route of a small sub-set of paths. iNano only refreshes
measurements once per day and as such cannot track path changes.
Topology mapping techniques. Topology mapping systems [14,
17, 19, 25] often track routes to a large number of destinations.
Many of the topology discovery techniques focus on getting more
complete or accurate topology maps by resolving different inter-
faces to a single router [26, 27], selecting traceroute’s sources and
destinations to better cover the topology [27], or using the record-
route IP option to complement traceroutes [26]. DTRACK is a good
complement to all these techniques. We argue that to get more ac-
curate maps, we should focus the probing capacity on the paths that
are changing, and also explore spatio-temporal alternatives to sim-
ple traditional traceroute sampling. One approach to tracking the
132evolution of IP topologies is to exploit knowledge of shared links
to reduce probing overhead and consequently probe the topology
faster as Tracetree [17] and Doubletree [11] do. As we show in
Sec. 5, Tracetree leads to a very large number of false detections.
Thus, we choose to guarantee the accuracy and completeness of
measured routes by using Paris traceroute’s MDA [31]. Most com-
parable to DTRACK is FastMapping [8]. Sec. 5 shows that DTRACK,
because of its adaptive probing allocation (instead of a constant
rate for all paths) and single-probe sampling strategy (compared to
an entire branch of the route at a time), misses up to 89% fewer
changes than FastMapping.
7. CONCLUSION
This paper presented DTRACK, a path tracking strategy that pro-
ceeds in two steps: path change detection and path remapping. We
designed NN4, a simple predictor of path changes that uses as in-
put: route prevalence, route age, number of past route changes, and
number of times a route appeared in the past. Although we found
that the limits to prediction in general are strong and in particu-
lar that NN4 is not highly accurate, it is still useful for allocating
probes to paths. DTRACK optimizes path sampling rates based on
NN4 predictions. Within each path, DTRACK employs a kind of
temporal striping of Paris traceroute. When a change is detected,
path remapping uses Paris traceroute’s MDA to ensure complete
and accurate route measurements. DTRACK detects up to two times
more path changes when compared to the state-of-the-art tracking
technique, with lower detection delays, and whilst providing com-
plete load balancer information. DTRACK ﬁnds considerably more
true changes than Tracetree, and none of the very large number of
false positives. More generally, we point out that any approach that
exploits shared links runs the risk of errors being greatly magniﬁed
in the tracking application, and should be used with great care.
To accelerate the adoption of DTRACK, our immediate next step
is to implement DTRACK into an easy-to-use system and deploy
it on PlanetLab as a path tracking service. For future work, we
will investigate the beneﬁts of incorporating additional informa-
tion, such as BGP messages, to increase prediction accuracy, as
well as the beneﬁts of coordinating the probing effort across moni-
tors to further optimize probing.
Acknowledgements. We thank Ethan Katz-Bassett, Fabian
Schneider, and our shepherd Sharon Goldberg for their helpful
comments. This work was supported by the European Com-
munity’s Seventh Framework Programme (FP7/2007-2013) no.
223850 (Nano Data Centers) and the ANR project C’MON.
8. REFERENCES
[1] D. Andersen, H. Balakrishnan, F. Kaashoek, and R. Morris. Resilient
Overlay Networks. SIGOPS Oper. Syst. Rev., 35(5):131–145, 2001.
[8] I. Cunha, R. Teixeira, and C. Diot. Measuring and Characterizing
End-to-End Route Dynamics in the Presence of Load Balancing. In
Proc. PAM, 2011.
[9] I. Cunha, R. Teixeira, N. Feamster, and C. Diot. Measurement
Methods for Fast and Accurate Blackhole Identiﬁcation with Binary
Tomography. In Proc. IMC, 2009.
[10] J. Dilley, B. Maggs, J. Parikh, H. Prokop, R. Sitaraman, and
B. Weihl. Globally Distributed Content Delivery. IEEE Internet
Computing, 6(5):50–58, 2002.
[11] B. Donnet, P. Raoult, T. Friedman, and M. Crovella. Efﬁcient
Algorithms for Large-scale Topology Discovery. In Proc. ACM
SIGMETRICS, 2005.
[12] N. Feamster, D. Andersen, H. Balakrishnan, and F. Kaashoek.
Measuring the Effects of Internet Path Faults on Reactive Routing. In
Proc. ACM SIGMETRICS, 2003.
[13] J. Friedman and B. Popescu. Predictive Learning via Rule
Ensembles. Annals of Applied Statistics, 2(3):916–954, 2008.
[14] k. claffy, Y. Hyun, K. Keys, M. Fomenkov, and D. Krioukov. Internet
Mapping: from Art to Science. In Proc. IEEE CATCH, 2009.
[15] E. Katz-Bassett, H. Madhyastha, J. P. John, A. Krishnamurthy,
D. Wetherall, and T. Anderson. Studying Black Holes in the Internet
with Hubble. In Proc. USENIX NSDI, 2008.
[16] C. Labovitz, R. Malan, and F. Jahanian. Internet Routing Instability.
In Proc. ACM SIGCOMM, 1997.
[17] M. Latapy, C. Magnien, and F. Ouédraogo. A Radar for the Internet.
In Proc. Intl. Workshop on Analysis of Dynamic Networks, 2008.
[18] D. Leonard and D. Loguinov. Demystifying Service Discovery:
Implementing an Internet-Wode Scanner. In Proc. IMC, 2010.
[19] H. Madhyastha, T. Isdal, M. Piatek, C. Dixon, T. Anderson,
A. Krishnamurthy, and A. Venkataramani. iPlane: an Information
Plane for Distributed Services. In Proc. USENIX OSDI, 2006.
[20] H. Madhyastha, E. Katz-Bassett, T. Anderson, A. Krishnamurthy,
and A. Venkataramani. iPlane Nano: Path Prediction for Peer-to-peer
Applications. In Proc. USENIX NSDI, 2009.
[21] Z. M. Mao, J. Rexford, J. Wang, and R. H. Katz. Towards an
Accurate AS-level Traceroute Tool. In Proc. ACM SIGCOMM, 2003.
[22] A. Markopoulou, G. Iannaccone, S. Bhattacharyya, C. N. Chuah,
Y. Ganjali, and C. Diot. Characterization of Failures in an
Operational IP Backbone Network. IEEE/ACM Trans. Netw.,
16(4):749–762, 2008.
[23] R. Oliveira, D. Pei, W. Willinger, B. Zhang, and L. Zhang.
Quantifying the Completeness of the Observed Internet AS-level
Structure. IEEE/ACM Trans. Netw., 18(1):109–122, 2010.
[24] V. Paxson. End-to-end Routing Behavior in the Internet. IEEE/ACM
Trans. Netw., 5(5):601–615, 1997.
[25] Y. Shavitt and U. Weinsberg. Quantifying the Importance of Vantage
Points Distribution in Internet Topology Measurements. In Proc.
IEEE INFOCOM, 2009.
[26] R. Sherwood, A. Bender, and N. Spring. DisCarte: a Disjunctive
Internet Cartographer. In Proc. ACM SIGCOMM, 2008.
[27] N. Spring, R. Mahajan, and D. Wetherall. Measuring ISP Topologies
with Rocketfuel. In Proc. ACM SIGCOMM, 2002.
[28] S. Tao, K. Xu, Y. Xu, T. Fei, L. Gao, R. Guerin, J. Kurose,
D. Towsley, and Z.-L. Zhang. Exploring the Performance Beneﬁts of
End-to-End Path Switching. In Proc. ICNP, 2004.
[2] B. Augustin, T. Friedman, and R. Teixeira. Measuring Load-balanced
[29] R. Teixeira and J. Rexford. A Measurement Framework for
Paths in the Internet. In Proc. IMC, 2007.
[3] F. Baccelli, S. Machiraju, D. Veitch, and J. Bolot. On Optimal
Probing for Delay and Loss Measurement. In Proc. IMC, 2007.
[4] F. Baccelli, S. Machiraju, D. Veitch, and J. Bolot. The Role of
PASTA in Network Measurement. IEEE/ACM Trans. Netw.,
17(4):1340–1353, 2009.
[5] K. Beyer, J. Goldstein, R. Ramakrishnan, and U. Shaft. When Is
“Nearest Neighbor” Meaningful? In Proc. Intl. Conf. on Database
Theory, 1999.
[6] A. Bremler-Barr, E. Cohen, H. Kaplan, and Y. Mansour. Predicting
and Bypassing End-to-end Internet Service Degradations. IEEE J.
Selected Areas in Communications, 21(6):961–978, 2003.
[7] R. Bush, O. Maennel, M. Roughan, and S. Uhlig. Internet
Optometry: Assessing the Broken Glasses in Internet Reachability.
In Proc. IMC, 2009.
Pin-pointing Routing Changes. In Proc. SIGCOMM Workshop on
Network Troubleshooting, 2004.
[30] D. Turner, K. Levchenko, A. Snoeren, and S. Savage. California
Fault Lines: Understanding the Causes and Impact of Network
Failures. In Proc. ACM SIGCOMM, 2010.
[31] D. Veitch, B. Augustin, T. Friedman, and R. Teixeira. Failure Control
in Multipath Route Tracing. In Proc. IEEE INFOCOM, 2009.
[32] M. Zhang, C. Zhang, V. Pai, L. Peterson, and R. Wang. PlanetSeer:
Internet Path Failure Monitoring and Characterization in Wide-area
Services. In Proc. USENIX OSDI, San Francisco, CA, 2004.
[33] Y. Zhang, N. Dufﬁeld, V. Paxson, and S. Shenker. On the Constancy
of Internet Path Properties. In Proc. IMW, 2001.
[34] Z. Zhang, Y. Zhang, Y. C. Hu, Z. M. Mao, and R. Bush. iSPY:
Detecting IP Preﬁx Hijacking on My Own. In Proc. ACM
SIGCOMM, 2008.
133