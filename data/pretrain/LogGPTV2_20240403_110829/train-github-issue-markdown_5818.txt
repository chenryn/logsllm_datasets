Here's the code I'm compiling:
    'use strict'
    async function recurse(n) {
        if (n > 0) {
            console.log(n)
            await recurse(n - 1)
        }
    }
    recurse(10)
My package.json is:
    {
        "scripts": {
            "build": "babel src --out-dir dist"
        },
        "devDependencies": {
            "babel-cli": "6.0.15",
            "babel-plugin-transform-async-to-generator": "6.0.14"
        },
        "babel": {
            "plugins": ["transform-async-to-generator"]
        }
    }
The compiled code is:
    'use strict';
    let recurse = (function () {
        var ref = _asyncToGenerator(function* recurse(n) {
            if (n > 0) {
                console.log(n);
                yield recurse(n - 1);
            }
        });
        return function recurse(_x) {
            return ref.apply(this, arguments);
        };
    })();
    function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, "next"); var callThrow = step.bind(null, "throw"); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }
    recurse(10);
Running this just prints '10', because the generated `function* recurse`
function covers up the real function.