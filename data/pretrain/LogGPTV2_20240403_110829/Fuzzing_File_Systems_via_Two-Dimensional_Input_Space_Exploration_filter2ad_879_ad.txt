development branch, and #Patches reports the number of git commits
for ﬁxing found bugs; #CVEs lists the number of CVEs assigned for
conﬁrmed bugs.
art OS fuzzer. We run Syzkaller with KVM instances, each of
which has two cores and 2GB of memory.
Note that Syzkaller relies on KCOV to proﬁle code coverage,
while JANUS relies on the method of AFL. For an apples-to-
apples comparison between Syzkaller and JANUS, after fuzzing
12 hours, we mount every image mutated by JANUS, and
execute the corresponding program generated by JANUS on a
KCOV-enabled kernel to get the KCOV-style coverage. (see
Appendix §B for the details of AFL- and KCOV- style code
coverage).
A. Bug Discovery in the Upstream File Systems
We intermittently ran JANUS for four months (i.e., from April
2018 to July 2018) to fuzz the aforementioned ﬁle systems
in upstream kernels from v4.16 to v4.18. Over the span of
few days to a week, we ran three instances of JANUS to test
each ﬁle system. JANUS found 90 unique bugs that resulted in
kernel panics or deadlocks, which we reported to the Linux
kernel community. We differentiated bugs on the basis of
KASAN reports and call stack traces. Among them, developers
conﬁrmed 62 as previously unknown bugs, including 36 in
ext4, XFS, and Btrfs—the three most widely used ﬁle systems
on Linux. So far, developers have already ﬁxed 43 bugs with
52 distinct patches, and also assigned 32 CVEs (see Table III).
Another important ﬁnding is that some bugs, (e.g., four bugs
related to log recovery in XFS and six bugs about extended
attributes in HFS+) are not going to be ﬁxed by developers in the
near future, as these bugs require large-scale code refactoring.
In addition, ReiserFS developers will not ﬁx ﬁve bugs that
lead to the BUG() condition, as ReiserFS is in maintenance
mode.
Note that there are other notable efforts on ﬁnding ﬁle system
bugs through fuzzing or manual auditing.
• Syzkaller,
the state-of-the-art system call fuzzer that
started to support mutating ﬁle system images in March,
2018. Note that Google deployed many more instances
of Syzkaller (i.e., syzbot) than those of JANUS for
continuously fuzzing the upstream kernel. Although syzbot
fuzzes the whole kernel, we found more ﬁle system bugs
with JANUS in four months. According to our investigation,
Syzkaller reported only two ext4 bugs, one XFS bug, four
F2FS bugs, and one HFS+ bug during our evaluation period,
among which one of the ext4 bugs, the XFS bug, and the
HFS+ bug were also found by JANUS. JANUS missed one
ext4 bug requiring a 4K block size, which is larger than
that of our seed images. And we started using JANUS to
fuzz F2FS after these four F2FS bugs were ﬁxed.
• Google Project Zero, a team of security researchers
seeking zero-day vulnerabilities who found one ext4 bug
through source review. The bug was also discovered by
JANUS.
• Internal efforts from the ﬁle system development com-
munity. XFS developers noticed four XFS bugs found by
JANUS before we reported them. Unfortunately, we were
unable to provide the total number of memory safety
bugs found by developers whose patches cannot easily be
differentiated from the ones for ﬁxing functionalities.
Table VI lists the details of 43 patched bugs that were
previously unknown. The bugs have a wide range of types,
from relatively harmless ﬂoating point exceptions to critical
out-of-bound access and heap overﬂow bugs that can be used
to corrupt critical kernel data and execute arbitrary code with
kernel privileges. Most of the bugs require mounting a corrupted
image followed by particular ﬁle operations to trigger, which
are the joint effects from two types of input of a ﬁle system
that JANUS manages to explore. In particular, one needs to
invoke three or more system calls to trigger 80% of these bugs,
which indicates the effectiveness of the system call fuzzer.
Moreover, a quarter of the bugs are triggered by mounting only
a corrupted image, which further proves the effectiveness of
JANUS in fuzzing images. As JANUS emphasizes the priority
of mutating image bytes, all the generated test cases contain
the images with error bytes. Therefore, no reported bug only
requires particular ﬁle operations without an uncorrupted image
to trigger.
Result.
JANUS successfully found 90 bugs in widely-used
and mature ﬁle systems in upstream kernels. Among them,
62 bugs have been conﬁrmed as previously unknown. As a
specialized fuzzer for ﬁle systems, JANUS helped the Linux
kernel community to discover and patch more ﬁle system bugs
than Syzkaller in recent months.
B. Exploring the State Space of Images
We ﬁrst evaluate how JANUS mutates image bytes to explore
a target ﬁle system by comparing it with Syzkaller. Syzkaller
recently supported mounting mutated images by introducing
a wrapper call: syz_mount_image(), which takes mutated non-
zero segments of an image as input, ﬂushes them into a loop
device at corresponding offsets, and eventually invokes mount().
To evaluate the impact of state space of an input image, we
disable the system call fuzzing stage in JANUS and concentrate
only on fuzzing the image. We denote our image fuzzer as
JANUSi. After a mutated image is mounted, we enforce both
our LKL-based executor, used by JANUSi, and the executor
of Syzkaller (called Syzkalleri) running in a KVM instance to
(cid:25)(cid:19)(cid:23)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:52:33 UTC from IEEE Xplore.  Restrictions apply. 
perform a ﬁxed sequence of system calls under the mounting
point (see Figure 13) to demonstrate how mutated image bytes
help fuzzers to explore a ﬁle system. We evaluate both fuzzers,
with the seed images of eight ﬁle systems, described in the
experimental setup, for 12 hours. For each target ﬁle system,
we launch one JANUSi instance and one KVM instance for
Syzkalleri.
Figure 8 presents the number of paths both JANUSi and
Syzkalleri visit in selected ﬁle systems. After running for
30 minutes, JANUSi always has higher code coverage than
Syzkalleri. JANUSi outperforms Syzkalleri by 1.47–4.17× for
the evaluated ﬁle systems. Note that most selected ﬁle systems
have relatively complex implementation, which shows the
ability of JANUS mutating important image bytes to discover
deeper code paths. Our approach differs from Syzkalleri, as
Syzkalleri considers only the important parts of an image as
an array of non-zero chunks, that can either miss metadata
blocks or even include inessential data blocks. By contrast,
JANUSi leverages the semantics of an image, namely locating
and mutating metadata blocks only. In addition, both GFS2
and Btrfs have checksum for metadata blocks, which severely
degrades the performance of Syzkalleri. Another interesting
observation is that Syzkalleri does not correctly use the seed
image for XFS because Syzkaller does not support an image
containing more than 4096 non-contiguous non-zero chunks,
which is one of the big limitations of Syzkaller in fuzzing
ﬁle systems. Therefore, Syzkalleri has to generate XFS images
from scratch. Since XFS v5 has metadata checksum, Syzkalleri
cannot make any forward progress even after running for 12
hours, as it does not ﬁx the checksum of metadata.
Result. By mutating metadata blocks and ﬁxing checksums,
JANUSi quickly explores more code paths in the selected ﬁle
systems than Syzkalleri when fuzzing only images with ﬁxed
ﬁle operations. More speciﬁcally, JANUSi achieves at most
4.17× more code coverage than Syzkalleri, which shows the
effectiveness of JANUS when fuzzing only images.
C. Exploring File Operations
We now evaluate the effectiveness of only fuzzing ﬁle
operations without mutating the ﬁle system image, i.e., we
discard the image fuzzing stage. We denote our ﬁle operation
fuzzer as JANUSs, which automatically generates nine seed
programs for mutation after inspecting a seed image, each one
containing an open() system call on a ﬁle or directory in the
image (see Figure 9). We compare JANUSs with Syzkallers
by fuzzing 27 ﬁle system-speciﬁc system calls2 and executing
generated programs on a seed image after being mounted. We
hard-code the paths of all available ﬁles and directories on a
seed image in the description ﬁle for Syzkallers to ﬁll the values
of certain arguments when fuzzing particular system calls. We
run both of these fuzzers on eight ﬁle systems for 12 hours.
2 Syzkallers and JANUSs
fuzz the following system calls: read(),
write(), open(), lseek(), getdents64(), pread64(), pwrite64(), stat(),
lstat(), rename(), fsync(), fdatasync(), access(), ftruncate(), truncate(),
utimes(), mkdir(), rmdir(), link(), unlink(), symlink(), readlink(),
chmod(), setxattr(), fallocate(), listxattr() and removexattr()
As already mentioned, we launch one JANUSs instance and
one KVM instance for Syzkallers in this experiment. Further,
we re-execute all programs generated by JANUSs to obtain
comparable path coverage in KCOV style.
Figure 8 presents the evaluation result, which shows that
with a wiser fuzzing strategy, JANUSs keeps exploring more
code paths than Syzkallers in the span of 12 hours. In particular,
JANUSs eventually visits 2.24×, 1.27×, and 1.25× more unique
code paths than Syzkallers when fuzzing the three most popular
ﬁle systems, XFS v5, Btrfs, and ext4, respectively. Moreover,
JANUSs also outperforms Syzkallers 1.72× and 1.49× on HFS+
and GFS2, respectively. By generating context-aware workloads,
we observe that JANUS is more effective than Syzkallers for
fuzzing ﬁle systems. The reason is that Syzkallers is a general
and advanced system call fuzzer, but, unlike JANUSs, Syzkallers
completely fails to exploit the domain knowledge of a ﬁle
system to explore its code path effectively.
Result. By generating context-aware workloads, JANUS
explores more code paths than Syzkallers in all eight popular
ﬁle systems when only targeting the system calls related to
ﬁle operations. In particular, the programs generated by JANUS
manage to visit at most 2.24× more paths. The evaluation
result fully demonstrates the effectiveness of JANUS in terms
of ﬁle operation fuzzing.
D. Exploring Two-Dimensional Input Space
To demonstrate the comprehensiveness of JANUS’S fuzzing
by mutating both image bytes and ﬁle operations, we run
original JANUS and Syzkaller on the eight aforementioned ﬁle
systems with the same seed images for 12 hours. We provide
syz_mount_image() in the description ﬁle to make Syzkaller
not only generate system calls but also mutate the bytes in a
seed image while invoking 27 ﬁle system-speciﬁc system calls
(see §V-C). In this experiment, we simultaneously launch three
instances for both JANUS and Syzkaller for parallel fuzzing.
Moreover, both fuzzers share generated test cases for each
corresponding ﬁle systems. Figure 8 (marked Syzkaller and
JANUS) shows the results of this experiment.
We observe that JANUS discovers more code paths than both
JANUSi and JANUSs. Our results illustrate the importance of
fuzzing both images and ﬁle operations to comprehensively
explore a ﬁle system. More important, JANUS further out-
performs Syzkaller on all tested ﬁle systems. In particular,
JANUS achieves at most 4.19×, 4.04×, and 3.11× higher code
coverage than Syzkaller when fuzzing Btrfs, GFS2, and F2FS,
respectively. For ext4, JANUS also hits 2.01× more unique
code paths. The major reason is that Syzkaller prioritizes system
call fuzzing over image fuzzing, while JANUS incorporates
the strategy of blob-directed system call fuzzing. For instance,
while generating a program for fuzzing, Syzkaller does not guar-
antee whether a valid ﬁle system is mounted before performing
any ﬁle operation, i.e., it completely forgoes the ﬁle system
context-awareness to blindly fuzz a ﬁle system. We mitigate
this issue by invoking umount() and syz_mount_image() at
the beginning of a program. Nevertheless, Syzkaller is still
not capable of stopping if mounting a mutated image fails. In
(cid:25)(cid:19)(cid:24)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:52:33 UTC from IEEE Xplore.  Restrictions apply. 
(a) ext4 (ext2/3 compatible)
(b) ext4
s
h
t
a
p
d
e
r
e
v
o
c
f
o
r
e
b
m
u
N
s
h
t
a
p
d
e
r
e
v
o
c
f
o
r
e
b
m
u
N
s
h
t
a
p
d
e
r
e
v
o
c
f
o
r
e
b
m
u
N
s
h
t
a
p
d
e
r
e
v
o
c
f
o
r
e
b
m
u
N
s
h
t
a
p
d
e
r
e
v
o
c
f
o
r
e
b
m
u
N
12.0k
10.0k
8.0k
6.0k
4.0k
2.0k
0.0k
15.0k
12.0k
9.0k
6.0k
3.0k
0.0k
20.0k
16.0k
12.0k
8.0k
4.0k
0.0k
7.0k
6.0k
5.0k
4.0k
3.0k
2.0k
1.0k
0.0k
8.0k
7.0k
6.0k
5.0k
4.0k
3.0k
2.0k
1.0k
0.0k
Syzkalleri
Syzkallers
Syzkaller
(c) XFS (v4)
(e) Btrfs
(g) GFS2
(i) ReiserFS
0
2
4
6
Time (h)
8
10
12
12.0k
10.0k
8.0k
6.0k
4.0k
2.0k
0.0k
16.0k
12.0k
8.0k
4.0k
0.0k
9.0k
7.5k
6.0k
4.5k