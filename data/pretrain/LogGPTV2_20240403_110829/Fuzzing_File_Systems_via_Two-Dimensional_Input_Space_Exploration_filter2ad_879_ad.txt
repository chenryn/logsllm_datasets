### Development Branch and Bug Fixing Metrics
- **#Patches**: This metric represents the number of Git commits made to fix identified bugs.
- **#CVEs**: This lists the number of Common Vulnerabilities and Exposures (CVEs) assigned for confirmed bugs.

### Fuzzing Setup
We utilized Syzkaller with KVM instances, each configured with two cores and 2GB of memory. Note that Syzkaller relies on KCOV for profiling code coverage, whereas JANUS uses the method employed by AFL. To ensure a fair comparison between Syzkaller and JANUS, after 12 hours of fuzzing, we mounted every image mutated by JANUS and executed the corresponding program on a KCOV-enabled kernel to obtain KCOV-style coverage. (See Appendix §B for detailed explanations of AFL- and KCOV-style code coverage.)

### Bug Discovery in Upstream File Systems
JANUS was intermittently run over four months (April to July 2018) to fuzz file systems in upstream kernels from v4.16 to v4.18. Over periods ranging from a few days to a week, three instances of JANUS were used to test each file system. 

**Key Findings:**
- **Total Bugs Found**: 90 unique bugs leading to kernel panics or deadlocks.
- **Bug Reporting**: These bugs were reported to the Linux kernel community.
- **Differentiation**: Bugs were differentiated based on KASAN reports and call stack traces.
- **Confirmed New Bugs**: 62 of these bugs were confirmed as previously unknown, including:
  - 36 in ext4, XFS, and Btrfs—three of the most widely used file systems on Linux.
- **Fixes and CVEs**: 
  - 43 bugs have been fixed with 52 distinct patches.
  - 32 CVEs have been assigned (see Table III).

**Notable Observations:**
- Some bugs, such as those related to log recovery in XFS and extended attributes in HFS+, are unlikely to be fixed soon due to the need for large-scale code refactoring.
- ReiserFS developers will not fix five bugs leading to the BUG() condition, as ReiserFS is in maintenance mode.

### Comparison with Other Efforts
- **Syzkaller**: A state-of-the-art system call fuzzer that started supporting file system image mutation in March 2018. Google deployed many more Syzkaller instances (syzbot) for continuous fuzzing of the upstream kernel. Despite this, JANUS found more file system bugs in four months. During our evaluation period, Syzkaller reported only a few file system bugs, some of which were also found by JANUS.
- **Google Project Zero**: A team of security researchers who found one ext4 bug through source review, which was also discovered by JANUS.
- **Internal Efforts**: XFS developers noticed four XFS bugs found by JANUS before they were reported. The total number of memory safety bugs found by developers, whose patches cannot be easily differentiated, is not provided.

**Table VI** provides details of the 43 patched bugs, which range from relatively harmless floating point exceptions to critical out-of-bound access and heap overflow bugs. Most of these bugs require mounting a corrupted image followed by specific file operations, highlighting the effectiveness of JANUS in exploring both types of input.

### Exploring the State Space of Images
To evaluate how JANUS mutates image bytes, we compared it with Syzkaller. Syzkaller recently introduced `syz_mount_image()` to support mounting mutated images. We disabled the system call fuzzing stage in JANUS and focused solely on image fuzzing, denoted as JANUSi. Both JANUSi and Syzkalleri (Syzkaller's image fuzzer) were evaluated for 12 hours on eight file systems.

**Results:**
- **Code Coverage**: After 30 minutes, JANUSi consistently achieved higher code coverage than Syzkalleri, outperforming it by 1.47–4.17×.
- **Metadata and Checksum Handling**: JANUSi leverages the semantics of an image, mutating metadata blocks and fixing checksums, which allows it to explore deeper code paths. Syzkalleri, on the other hand, considers only non-zero chunks, often missing metadata blocks or including inessential data blocks, and struggles with checksums in GFS2 and Btrfs.

### Exploring File Operations
We evaluated the effectiveness of fuzzing file operations without mutating the file system image, denoted as JANUSs. We compared JANUSs with Syzkallers by fuzzing 27 file system-specific system calls and executing generated programs on a seed image after mounting. Both fuzzers were run on eight file systems for 12 hours.

**Results:**
- **Code Path Exploration**: JANUSs explored more code paths than Syzkallers, visiting 2.24×, 1.27×, and 1.25× more unique code paths for XFS v5, Btrfs, and ext4, respectively. JANUSs also outperformed Syzkallers on HFS+ and GFS2.
- **Context-Aware Workloads**: JANUSs generates context-aware workloads, making it more effective than Syzkallers, which lacks domain knowledge of file systems.

### Exploring Two-Dimensional Input Space
To demonstrate the comprehensiveness of JANUS, we ran both JANUS and Syzkaller on eight file systems for 12 hours, focusing on both image bytes and file operations. Three instances of each fuzzer were launched for parallel fuzzing, and both shared generated test cases.

**Results:**
- **Code Coverage**: JANUS discovered more code paths than both JANUSi and JANUSs, emphasizing the importance of fuzzing both images and file operations.
- **Performance Comparison**: JANUS outperformed Syzkaller on all tested file systems, achieving up to 4.19×, 4.04×, and 3.11× higher code coverage for Btrfs, GFS2, and F2FS, respectively. For ext4, JANUS hit 2.01× more unique code paths.
- **Strategy Difference**: Syzkaller prioritizes system call fuzzing over image fuzzing, while JANUS incorporates a strategy that ensures valid file system mounting before performing file operations, enhancing its effectiveness.

This comprehensive evaluation demonstrates the effectiveness of JANUS in discovering and patching file system bugs, outperforming other state-of-the-art fuzzers in various aspects.