# WebLogic安全研究报告
##### 译文声明
本文是翻译文章，文章原作者 奇安信 CERT，文章来源：奇安信 CERT
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
可能是你能找到的最详细的WebLogic安全相关中文文档
## 序
从我还未涉足安全领域起，就知道WebLogic的漏洞总会在安全圈内变成热点话题。WebLogic爆出新漏洞的时候一定会在朋友圈刷屏。在从事安全行业之后，跟了几个WebLogic漏洞，写了一些分析，也尝试挖掘新漏洞和绕过补丁。但因为能力有限，还需要对WebLogic，以及Java反序列化有更深入的了解才能在漏洞挖掘和研究上更得心应手。因此决定写这样一篇长文把我所理解的WebLogic和WebLogic漏洞成因、还有这一切涉及到的相关知识讲清楚，也是自己深入WebLogic的过程。因此，本文不是一篇纯漏洞分析，而主要在讲“是什么”、“什么样”、“为什么”。希望把和WebLogic漏洞有关的方方面面都讲一些，今后遇到类似的问题有据可查。
本文由@r00t4dm和我共同编写，@r00t4dm对XMLDecoder反序列化漏洞做过深入研究，这篇文中的有关WebLogic
XMLDecoder反序列化漏洞部分由他编写，其他部分由我编写。我俩水平有限，不足之处请批评指正。下面是我俩的个人简介：
图南：开发出身，擅长写漏洞。现就职于奇安信A-TEAM做Web方向漏洞研究工作。
r00t4dm：奇安信A-TEAM信息安全工程师，专注于Java安全
我们都属于奇安信A-TEAM团队，以下是A-TEAM的简介：
奇安信 A-TEAM 是隶属于奇安信集团旗下的纯技术研究团队。团队主要致力于 Web 渗透，APT
攻防、对抗，前瞻性攻防工具预研。从底层原理、协议层面进行严肃、有深度的技术研究，深入还原攻与防的技术本质。
欢迎有意者加入！
闲话说到这里，我们开始吧。
## WebLogic简介
在我对WebLogic做漏洞分析的时候其实并不了解WebLogic是什么东西，以及怎样使用，所以我通读了一遍[官方文档](https://docs.oracle.com/cd/E21764_01/core.1111/e10103/intro.htm#ASCON112)，并加入了一些自己的理解，将WebLogic完整的介绍一下。
###  中间件（Middleware）
中间件是指连接软件组件或企业应用程序的软件。中间件是位于操作系统和分布式计算机网络两侧的应用程序之间的软件层。它可以被描述为“软件胶水。通常，它支持复杂的分布式业务软件应用程序。
Oracle定义中间件的组成包括Web服务器、应用程序服务器、内容管理系统及支持应用程序开发和交付的类似工具，它通常基于可扩展标记语言（XML）、简单对象访问协议（SOAP）、Web服务、SOA、Web
2.0和轻量级目录访问协议（LDAP）等技术。
###  Oracle融合中间件（Oracle Fusion Middleware）
Oracle融合中间件是Oracle提出的概念，Oracle融合中间件为复杂的分布式业务软件应用程序提供解决方案和支持。Oracle融合中间件是一系列软件产品并包括一系列工具和服务，
如：符合Java Enterprise Edition 5（Java EE）的开发和运行环境、商业智能、协作和内容管理等。
Oracle融合中间件为开发、部署和管理提供全面的支持。 Oracle融合中间件通常提供以下图中所示的解决方案：
Oracle融合中间件提供两种类型的组件：
  * Java组件
Java组件用于部署一个或多个Java应用程序，Java组件作为域模板部署到Oracle WebLogic Server域中。这里提到的Oracle
WebLogic Server域在后面会随着Oracle WebLogic Server详细解释。
  * 系统组件
系统组件是被Oracle Process Manager and Notification
(OPMN)管理的进程，其不作为Java应用程序部署。系统组件包括Oracle HTTP Server、Oracle Web Cache、Oracle
Internet Directory、Oracle Virtual Directory、Oracle Forms Services、Oracle
Reports、Oracle Business Intelligence Discoverer、Oracle Business Intelligence。
###  Oracle WebLogic Server（WebLogic）
Oracle WebLogic Server（以下简称WebLogic）是一个可扩展的企业级Java平台（Java EE）应用服务器。其完整实现了Java
EE 5.0规范，并且支持部署多种类型的分布式应用程序。
在前面Oracle融合中间件的介绍中，我们已经发现了其中贯穿着WebLogic的字眼，且Oracle融合中间件和WebLogic也是我在漏洞分析时经常混淆的。实际上WebLogic是组成Oracle融合中间件的核心。几乎所有的Oracle融合中间件产品都需要运行WebLogic
Server。因此，本质上，WebLogic
Server不是Oracle融合中间件，而是构建或运行Oracle融合中间件的基础，Oracle融合中间件和WebLogic密不可分却在概念上不相等。
###  Oracle WebLogic Server域
Oracle WebLogic Server域又是WebLogic的核心。Oracle WebLogic Server域是一组逻辑上相关的Oracle
WebLogic Server资源组。 域包括一个名为Administration Server的特殊Oracle WebLogic
Server实例，它是配置和管理域中所有资源的中心点。 也就是说无论是Web应用程序、EJB（Enterprise
JavaBeans）、Web服务和其他资源的部署和管理都通过Administration Server完成。
###  Oracle WebLogic Server集群
WebLogic Server群集由多个同时运行的WebLogic
Server服务器实例组成，它们协同工作以提供更高的可伸缩性和可靠性。因为WebLogic本身就是为分布式设计的中间件，所以集群功能也是WebLogic的重要功能之一。也就有了集群间通讯和同步，WebLogic的众多安全漏洞也是基于这个特性。
###  WebLogic的版本
WebLogic版本众多，但是现在我们经常见到的只有两个类别：10.x和12.x，这两个大版本也叫WebLogic Server 11g和WebLogic
Server 12c。
根据[Oracle官方下载页面](https://www.oracle.com/technetwork/middleware/weblogic/downloads/wls-for-dev-1703574.html)（从下向上看）：
10.x的版本为Oracle WebLogic Server
10.3.6，这个版本也是大家用来做漏洞分析的时候最喜欢拿来用的版本。P牛的[vulhub](https://github.com/vulhub/vulhub)中所有WebLogic漏洞靶场都是根据这个版本搭建的。
12.x的主要版本有：
  * Oracle WebLogic Server 12.1.3
  * Oracle WebLogic Server 12.2.1
  * Oracle WebLogic Server 12.2.1.1
  * Oracle WebLogic Server 12.2.1.2
  * Oracle WebLogic Server 12.2.1.3
值得注意的是，Oracle WebLogic Server 10.3.6支持的最低JDK版本为JDK1.6， Oracle WebLogic Server
12.1.3支持的最低JDK版本为JDK1.7，Oracle WebLogic Server
12.2.1及以上支持的最低JDK版本为JDK1.8。因此由于JDK的版本不同，尤其是反序列化漏洞的利用方式会略有不同。同时，不同的Oracle
WebLogic
Server版本依赖的组件(jar包)也不尽相同，因此不同的WebLogic版本在反序列化漏洞的利用上可能需要使用不同的Gadget链（反序列化漏洞的利用链条）。但这些技巧性的东西不是本文的重点，请参考其他文章。如果出现一些PoC在某些时候可以利用，某些时候利用不成功的情况，应考虑到这两点。
###  WebLogic的安装
在我做WebLogic相关的漏洞分析时，搭建环境的过程可谓痛苦。某些时候需要测试不同的WebLogic版本和不同的JDK版本各种排列组合。于是在我写这篇文章的同时，我也对解决WebLogic环境搭建这个痛点上做了一点努力。随这篇文章会开源一个Demo级别的WebLogic环境搭建工具，工具地址：关于这个工具我会在后面花一些篇幅具体说，这里我先把WebLogic的安装思路和一些坑点整理一下。注意后面内容中出现的$MW_HOME均为middleware中间件所在目录，$WLS_HOME均为WebLogic
Server所在目录。
第一步：安装JDK。首先需要明确你要使用的WebLogic版本，WebLogic的安装需要JDK的支持，因此参考上一节各个WebLogic版本所对应的JDK最低版本选择下载和安装对应的JDK。一个小技巧，如果是做安全研究，直接安装对应WebLogic版本支持的最低JDK版本更容易复现成功。
第二步：安装WebLogic。从[Oracle官方下载页面](https://www.oracle.com/technetwork/middleware/weblogic/downloads/wls-for-dev-1703574.html)下载对应的WebLogic安装包，如果你的操作系统有图形界面，可以双击直接安装。如果你的操作系统没有图形界面，参考静默安装文档安装。11g和12c的静默安装方式不尽相同：
11g静默安装文档： 12c静默安装文档：
第三步：创建Oracle WebLogic Server域。前两步的安装都完成之后，要启动WebLogic还需要创建一个WebLogic
Server域，如果有图形界面，在$WLS_HOME\common\bin中找到config.cmd（Windows）或config.sh（Unix/Linux）双击，按照向导创建域即可。同样的，创建域也可以使用静默创建方式，参考文档：《Silent
Oracle Fusion Middleware Installation and Deinstallation——Creating a WebLogic
Domain in Silent
Mode》[https://docs.oracle.com/cd/E2828001/install.1111/b32474/silentinstall.htm#CHDGECID](https://docs.oracle.com/cd/E28280_01/install.1111/b32474/silent_install.htm#CHDGECID)
第四步：启动WebLogic
Server。我们通过上面的步骤已经创建了域，在对应域目录下的bin/文件夹找到startWebLogic.cmd（Windows）或startWebLogic.sh（Unix/Linux），运行即可。
下图为已启动的WebLogic Server：
安装完成后，打开浏览器访问，输入安装时设置的账号密码，即可看到WebLogic
Server管理控制台：
看到这个页面说明我们已经完成了WebLogic Server的环境搭建。WebLogic集群不在本文的讨论范围。关于这个页面的内容，主要围绕着Java
EE规范的全部实现和管理展开，以及WebLogic Server自身的配置。非常的庞大。也不是本文能讲完的。
###  WebLogic官方示例
在我研究WebLogic的时候，官方文档经常提到官方示例，但我正常安装后并没有找到任何示例源码（sample文件夹）。这是因为官方示例在一个补充安装包中。如果需要看官方示例，请在下载WebLogic安装包的同时下载补充安装包，在安装好WebLogic后，按照文档安装补充安装包，官方示例即是一个单独的WebLogic
Server域：
###  WebLogic远程调试
若要远程调试WebLogic，需要修改当前WebLogic Server域目录下bin/setDomainEnv.sh文件，添加如下配置：
debugFlag=”true”  
export debugFlag
然后重启当前WebLogic
Server域，并拷贝出两个文件夹：$MW_HOME/modules(11g)、$WLS_HOME/modules(12c)和$WLS_HOME/server/lib。
以IDEA为例，将上面的的lib和modules两个文件夹添加到Library：
然后点击 Debug-Add Configuration… 添加一个远程调试配置如下：
然后点击调试，出现以下字样即可正常进行远程调试。
Connected to the target VM, address: ‘localhost:8453’, transport: ‘socket’
###  WebLogic安全补丁
WebLogic安全补丁通常发布在[Oracle关键补丁程序更新、安全警报和公告](https://www.oracle.com/technetwork/topics/security/alerts-086861.html)页面中。其中分为关键补丁程序更新（CPU）和安全警报（Oracle
Security Alert Advisory）。
关键补丁程序更新为Oracle每个季度初定期发布的更新，通常发布时间为每年1月、4月、7月和10月。安全警报通常为漏洞爆出但距离关键补丁程序更新发布时间较长，临时通过安全警报的方式发布补丁。
所有补丁的下载均需要Oracle客户支持识别码，也就是只有真正购买了Oracle的产品才能下载。
## WebLogic漏洞分类
WebLogic爆出的漏洞以反序列化为主，通常反序列化漏洞也最为严重，官方漏洞评分通常达到9.8。WebLogic反序列化漏洞又可以分为XMLDecoder反序列化漏洞和T3反序列化漏洞。其他漏洞诸如任意文件上传、XXE等等也时有出现。因此后面的文章将以WebLogic反序列化漏洞为主讲解WebLogic安全问题。
下表列出了一些WebLogic已经爆出的漏洞情况：
## Java序列化、反序列化和反序列化漏洞的概念
关于Java序列化、反序列化和反序列化漏洞的概念，可参考@gyyyy写的一遍非常详细的文章：《[浅析Java序列化和反序列化](https://github.com/gyyyy/footprint/blob/master/articles/2019/about-java-serialization-and-deserialization.md)》。这篇文章对这些概念做了详细的阐述和分析。我这里只引用一段话来简要说明Java反序列化漏洞的成因：
当服务端允许接收远端数据进行反序列化时，客户端可以提供任意一个服务端存在的目标类的对象 （包括依赖包中的类的对象）
的序列化二进制串，由服务端反序列化成相应对象。如果该对象是由攻击者‘精心构造’的恶意对象，而它自定义的readObject()中存在着一些‘不安全’的逻辑，那么在对它反序列化时就有可能出现安全问题。
## XMLDecoder反序列化漏洞
###  前置知识
####  XML
XML（Extensible Markup
Language）是一种标记语言，在开发过程中，开发人员可以使用XML来进行数据的传输或充当配置文件。那么Java为了将对象持久化从而方便传输，就使得Philip
Mine在JDK1.4中开发了一个用作持久化的工具，XMLDecoder与XMLEncoder。 由于近期关于WebLogic
XMLDecoder反序列化漏洞频发，本文此部分旨在JDK1.7的环境下帮助大家深入了解XMLDecoder原理，如有错误，欢迎指正。
注：由于JDK1.6和JDK1.7的Handler实现均有不同，本文将重点关注JDK1.7
####  XMLDecder简介
XMLDecoder是Philip Mine 在 JDK 1.4
中开发的一个用于将JavaBean或POJO对象序列化和反序列化的一套API，开发人员可以通过利用XMLDecoder的readObject()方法将任意的XML反序列化，从而使得整个程序更加灵活。
####  JAXP
Java API for XML Processing（JAXP）用于使用Java编程语言编写的应用程序处理XML数据。JAXP利用Simple API
for XML Parsing（SAX）和Document Object
Model（DOM）解析标准解析XML，以便您可以选择将数据解析为事件流或构建它的对象。JAXP还支持可扩展样式表语言转换（XSLT）标准，使您可以控制数据的表示，并使您能够将数据转换为其他XML文档或其他格式，如HTML。JAXP还提供名称空间支持，允许您使用可能存在命名冲突的DTD。从版本1.4开始，JAXP实现了Streaming
API for XML（StAX）标准。
DOM和SAX其实都是XML解析规范，只需要实现这两个规范即可实现XML解析。
二者的区别从标准上来讲，DOM是w3c的标准，而SAX是由XML_DEV邮件成员列表的成员维护，因为SAX的所有者David
Megginson放弃了对它的所有权，所以SAX是一个自由的软件。——引用自http://www.saxproject.org/copying.html
####  DOM与SAX的区别
DOM在读取XML数据的时候会生成一棵“树”，当XML数据量很大的时候，会非常消耗性能，因为DOM会对这棵“树”进行遍历。
而SAX在读取XML数据的时候是线性的，在一般情况下，是不会有性能问题的。
图为DOM与SAX更为具体的区别：
由于XMLDecoder使用的是SAX解析规范，所以本文不会展开讨论DOM规范。
####  SAX
SAX是简单XML访问接口，是一套XML解析规范，使用事件驱动的设计模式，那么事件驱动的设计模式自然就会有事件源和事件处理器以及相关的注册方法将事件源和事件处理器连接起来。
这里通过JAXP的工厂方法生成SAX对象，SAX对象使用SAXParser.parer()作为事件源，ContentHandler、ErrorHandler、DTDHandler、EntityResolver作为事件处理器，通过注册方法将二者连接起来。
#####  ContentHandler
这里看一下ContentHandler的几个重要的方法。
#####  使用SAX
笔者将使用SAX提供的API来对这段XML数据进行解析
首先实现ContentHandler，ContentHandler是负责处理XML文档内容的事件处理器。
然后实现ErrorHandler， ErrorHandler是负责处理一些解析时可能产生的错误
最后使用Apache Xerces解析器完成解析
以上就是在Java中使用SAX解析XML的全过程，开发人员可以利用XMLFilter实现对XML数据的过滤。
SAX考虑到开发过程中出现的一些繁琐步骤，所以在org.xml.sax.helper包实现了一个帮助类：DefaultHandler，DefaultHandler默认实现了四个事件处理器，开发人员只需要继承DefaultHandler即可轻松使用SAX：
####  Apache Xerces
Apache
Xerces解析器是一套用于解析、验证、序列化和操作XML的软件库集合，它实现了很多解析规范，包括DOM和SAX规范，Java官方在JDK1.5集成了该解析器，并作为默认的XML的解析器。——引用自http://www.edankert.com/jaxpimplementations.html
####  XMLDecoder反序列化流程分析
JDK1.7的XMLDecoder实现了一个DocumentHandler，DocumentHandler在JDK1.6的基础上增加了许多标签，并且改进了很多地方的实现。下图是对比JDK1.7的DocumentHandler与JDK1.6的ObjectHandler在标签上的区别。
JDK1.7:
JDK1.6:
值得注意的是CVE-2019-2725的补丁绕过其中有一个利用方式就是基于JDK1.6。
#####  数据如何到达xerces解析器
  * xmlDecodeTest.readObject()：
  *   * java.beans.XMLDecoder.paringComplete()：
  *   * com.sun.beans.decoder.DocumentHandler.parse()：
  *   * com.sun.org.apache.xerces.internal.jaxp. SAXParserImpl.parse()：
  *   * com.sun.org.apache.xerces.internal.jaxp. SAXParserImpl.parse()：
  *   * com.sun.org.apache.xerces.internal.jaxp. AbstractSAXParser.parse()：
  *   * com.sun.org.apache.xerces.internal.parsers. XMLParser.parse()：
  *   * com.sun.org.apache.xerces.internal.parsers. XML11Configuration.parse()：
  *   * 在这里已经进入xerces解析器com.sun.org.apache.xerces.internal.impl. XMLDocumentFragmentScannerImpl.scanDocument()：
  * 
至此xerces开始解析XML，调用链如下：
#####  Apache Xerces如何实现解析
Apache Xerces有数个驱动负责完成解析，每个驱动司职不同，下面来介绍一下几个常用驱动的功能有哪些。
由于Xerces解析流程太过繁琐，最后画一个总结性的解析流程图。
现在我们已经了解Apache Xerces是如何完成解析的，Apache
Xerces解析器只负责解析XML中有哪些标签，观察XML语法是否合法等因素，最终Apache
Xerces解析器都要将解析出来的结果丢给DocumentHandler完成后续操作。
####  DocumentHandler 工作原理
XMLDecoder在com.sun.beans.decoder实现了DocumentHandler，DocumentHandler继承了DefaultHandler，并且定义了很多事件处理器：