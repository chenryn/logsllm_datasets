combinations
GET;Transfer-Encoding:
chunked , \r\n
GET;Transfer-Encoding:
chunked\r\n ␣ {Header}:{Value}\r\n
POST; Expect :
100-continue \r\n
POST; Transfer-Encoding :
identity \r\n
POST;Transfer-Encoding:
chunked \r\n
POST;Transfer-Encoding:
identity\r\n
Transfer-Encoding:
chunked \r\n
Tomcat-Akamai
ATS-Akamai
HAProxy-Akamai
NGINX-ATS
Cloudflare-ATS
CloudFront-ATS
NGINX-Apache
(truncated)
Cloudflare-Squid
CloudFront-Squid
(truncated)
Apache-Tomcat
(truncated)
Cloudflare-Tomcat
CloudFront-Tomcat
Cloudflare-Akamai
(truncated)
OPTIONS-0.9 ;
Content-Length:5\r\n
HAProxy-Squid
Akamai-Squid
Figure 3: Request header mutation categories affecting server pairs.
name and the mutation, since successful mutations in this experi-
ment vary from method to method.
Distorted Header Value. This category includes mutation sets
that add specific characters, such as a vertical tab, new page, space,
plus, and comma to the beginning and end of specific header values.
The headers in this category are Transfer-Encoding: chunked
and Content-Length: LENGTH. In Table 7, a comma is appended to
the header value. Akamai ignores the request body, while Tomcat,
HAProxy and ATS parse and forward it.
Manipulated Termination. Mutations in this category mainly
insert a space or tab after the header-terminating CRLF, resulting
in parsing discrepancies. In Table 7, a space is added after the CRLF
following the first header value. As a result, ATS ignores the request
body, whereas NGINX, Cloudflare and CloudFront do not.
Expect Header. We find that the Expect header is interpreted
differently by Apache. When Apache receives a request with this
header and its 100-continue value, it ignores the body in the
request as opposed to every other server we experimented with.
Identity Encoding. When a request has a Transfer-Encoding
header with the identity value, Squid and ATS ignore the mes-
sage body. Tomcat, Akamai, Cloudflare and CloudFront parse and
forward the body.
V1.0 Chunked Encoding. Tomcat does not support chunked
encoding in HTTP version 1.0. Thus, this causes an inconsistency
between Tomcat and all other servers we experimented with. When
a request has both Transfer-Encoding and Content-Length head-
ers, all servers prefer the former, whereas Tomcat prefers the latter.
Double Transfer-Encoding. We observe an interesting behav-
ior when a request has two Transfer-Encoding headers. When
the first header has the value identity and the second chunked,
Cloudflare and CloudFront use the Content-Length header, while
Tomcat, HAProxy, and Akamai use Transfer-Encoding to dictate
message body parsing.
Various Method Version Combinations. Similar to the request
line experiment, various options for methods and versions defined
in the input grammar are combined in different ways to generate
our input requests. In this experiment, these combinations are also
combined with various headers including Transfer-Encoding, and
can cause discrepancies without a mutation.
5.2.3 Request Body Experiment. Figure 4 lists the server pairs that
have discrepancies with mutation categories affecting the request
body, and Table 8 shows examples.
Chunk-Size Chunk-Data Mismatch. These mutations add to
or remove a character from chunk data to make its size differ-
ent from what is claimed in the chunk size. This causes Akamai
to process the request body using Content-Length and ignore
Transfer-Encoding, while every other server (except Tomcat and
Apache that give an error) continues to use Transfer-Encoding.
Manipulated Chunk-Size Termination. Mutations in this cat-
egory modify the CRLF terminating the chunk size, and typically add
a character such as a new page, semicolon, or space. This causes Aka-
mai to make a different preference between Transfer-Encoding
and Content-Length headers compared to the other servers.
Manipulated Chunk-Extension Termination. In this cate-
gory, mutation sets remove a part of the newline which termi-
nates the chunk extension. Usually, the carriage return character
is deleted. Again, this causes Akamai to use the Content-Length
header instead of the Transfer-Encoding header.
Manipulated Chunk-Data Termination. These mutations re-
move the terminating CRLF, partially or wholly from the chunk
data part of the request. In the example shown in Table 8, the CRLF
is completely removed at the end of the first chunk data.
Mangled Last-Chunk. Mutations in this category include re-
moving one CRLF before the last chunk, inserting digits next to the
chunk size in the last chunk (as seen in Table 8), or removing the
entire last chunk itself. Unlike HAProxy, Squid, and CloudFront,
Akamai does not treat the request body as chunked-encoded.
Session 6B: Web Vulnerabilities CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1812Table 8: Examples for each request body mutation category.
Category
Request Body
Entrypoint-Exitpoint
chunk-size
chunk-data
mismatch
manipulated
chunk-size
termination
manipulated
termination
manipulated
chunk-data
termination
mangled
last-chunk
chunk-extension
4\r\n B BBB
\r\n0\r\n\r\n
4 \t \nBBBB
\r\n0\r\n\r\n
4;foo=bar \r \nBBBB
\r\n0\r\n\r\n
4\r\nBBBB \r\n 4
\r\nBBBB
\r\n0\r\n\r\n
4\r\nBBBB
\r\n 2 0\r\n\r\n
Akamai-NGINX
Akamai-Varnish
(truncated)
Cloudflare-Akamai
Squid-Akamai
(truncated)
Akamai-Cloudflare
Akamai-ATS
(truncated)
CloudFront-Varnish
Akamai-Varnish
(truncated)
HAProxy-Akamai
Squid-Akamai
(truncated)
Figure 4: Request body mutation categories affecting server pairs.
5.3 Stage 3+ - Determining Discrepancy HRS
Potential
Stage 2 yielded classified mutation sets that are reduced to represen-
tative examples, and the server pairs that have parsing discrepancies
on said sets. We now determine if these parsing discrepancies can
be used for HRS. For every unique server pair that appears in the re-
sults from Stage 2, we set up our lab to position them as entrypoint
and exitpoint on path. We ensure that the connection between the
two servers is persistent, as HRS requires this.
To understand if our mutated requests lend themselves to HRS,
we craft a smuggler request as shown in Listing 12 for every muta-
tion (Listing 12 shows a Mangled Method mutation). Immediately
after we send the smuggler request, we send a benign request like
Listing 13 on the same connection. If our smuggler request was
successful, our payload (shown in Listing 14) will invalidate the
valid request, and the exitpoint will return a 400 Bad Request
error message in a response to the benign request.
To ensure the error message did not come from the entrypoint,
we note that each server has their own unique fingerprint in the
HTML error page returned, and verify the exitpoint’s fingerprint.
For each experiment, we now detail the categories of mutations
that can be used for HRS, and discuss why they succeeded while
1 h EAD / HTTP/1.1
2 Host: example.com
3 Content-Length: 2
4
5 A␣
1 POST / HTTP/1.1
2 Host: example.com
3 Content-Length:5
4
5 AAAAA
Listing 12: Smuggler request.
Listing 13: Benign request.
1 A␣ POST / HTTP/1.1
2 Host: example.com
3 Content-Length:5
4
5 AAAAA
Listing 14: Poisoned request.
the others failed. We note that for all but two specific cases, the pay-
load format allowed with these HRS attack vectors is unrestricted.
For the following, please reference Figure 5 for the server combi-
nations and mutation categories that successfully carried an HRS
payload, and Figure 6 for a breakdown of the server combinations
and reasons mutations failed for them.
5.3.1 Request Line Mutations. Among the request line mutations,
only two categories failed to carry out HRS, Distorted Protocol,
and Multiple Mutations. We found that some servers normalized
parts of the request line before forwarding them to the next server
when they encountered our mutations, or just flat out closed the
connection. We observed servers being particularly sensitive to
invalid requests, which is very common in these two mutation
categories. The successful categories contained less invalidating
mutations, and thus proved more fruitful.
In one case, there was a restriction on the format of the smug-
gled content. Using a specific method version combination with
Squid-Akamai, the entrypoint expected the request to be in chun-
ked encoding. Therefore, the smuggled content had to follow the
chunked format.
Unlike others, Varnish cleans its connection, preventing HRS.
When Varnish receives a GET request with a body, even though it
ignores the body, it does not leave the body in the connection.
5.3.2 Header Mutations. We observe that the categories Manip-
ulated Termination, Expect Header, Identity Encoding, and Double
Transfer-Encoding failed to work in any server combination. Similar
to the request line mutations, mutations to the Transfer-Encoding
and Content-Length headers often were not preserved. Servers
typically re-wrote their own headers in place of our mutations
based off of what they parsed, effectively stopping all HRS. For the
Expect Header failure, that category only affected Apache, and
Apache closes the connection after receiving these requests.
Similar to the request line experiment, only one case restricted
the format of the smuggled content. When a request with a distorted
header value was sent to ATS-Akamai, ATS required the smuggled
content to be in chunked encoding.
5.3.3 Body Mutations. For failed HRS attempts using body mu-
tations, the entrypoint re-wrote the mutated chunked body and
therefore did not preserve the mutation. In all cases where Akamai
was an entrypoint, HRS attempts succeeded except for Akamai-ATS.
Session 6B: Web Vulnerabilities CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1813(a) Pairs affected by line mutations.
(b) Pairs affected by header mutations.
Figure 5: Server pairs affected by request smuggling.
(c) Pairs affected by body mutations.
ATS ignored the message body part that follows the last chunk as
expected, yet it did not leave that part in the connection.
5.3.4 Reasoning about Discrepancies. Server developers typically
base their design decisions on official documents like HTTP RFCs.
Unfortunately, RFCs cannot accommodate information about how
to interpret every single iteration of a valid HTTP request. When
confronted with gray areas, developers have to make implementa-
tion decisions that conform to the RFC, but are not explicit. HRS
arises from this gray area. We illustrate this by providing exam-
ples from each part of the HTTP request in our experiments that
successfully lead to HRS.
Request Line Mutations. In Listing 15, the version in the re-
quest line is mutated. Despite this mutation, ATS still forwarded
the message body to an exitpoint. In fact, we observed that ATS
forwarded the message body for all GET requests with any decimal
version number (i.e., 99.99). Conversely, this mutation caused Squid
to ignore the message body, presumably because it could not decide
what the version is. Squid’s body parsing behavior is dependent on
the version, as it ignores request bodies in version 0.9, yet accepts
them in newer versions.
Header Mutations. Listing 16 shows a request which uses chun-
ked encoding with HTTP version 1.0, even though the chunked
encoding was introduced to the protocol with version 1.1. Despite
this fact, HAProxy supports chunked encoding in HTTP version
1 GET / HTTP/.11
2 Host: example.com
3 Content-Length: 5
4
5 AAAAA
1 POST / HTTP/1.0
2 Host: example.com
3 Transfer-Encoding: chunked
4
5 4\r\nBBBB\r\n0\r\n\r\n
Listing 15: Line mutation.
Listing 16: Header and version.
1 POST / HTTP/1.1
2 Host: example.com
3 Content-Length: 5
4 Transfer-Encoding: chunked
5
6 4;foo=bar \r \nBBBB\r\n0\r\n\r\n
Listing 17: Body mutation.
1.0. Tomcat ignores this header, presumably because it assumes that
requests with version 1.0 cannot use chunked encoding. As a result,
the body of the request shown in Listing 16 is ignored by Tomcat,
while it is parsed by HAProxy.
Body Mutations. Listing 17 terminates the chunk extension
with an LF rather than a CRLF. NGINX treats the LF the same as
a CRLF and parses the message body as chunked. However, Aka-
mai handles this error by defaulting to Content-Length instead of