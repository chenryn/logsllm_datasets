using therefore 2m × 10 Kbits/s of bandwidth,
• each transmitting user Ui sends his communication
mixed with scrambling data on the upload channel Ci,
and just scrambling data on the others,
• the non-transmitting users send scrambling data on all
the channels,
• the server xors all the users’ sets of 2m channels into
a single set of 2m channels,
• the scramblings cancel themselves when xored and the
result is the set of 2m unscrambled transmissions from
{1,··· , 2m}.
The only information that can be obtained when such a
protocol is used is m, the number of active communications.
It is not possible to know if a user is communicating or not
except if all the other users betray him. With such a server
(that we will call sMIX), the users must have 2m upload
channels and therefore will use 2m× 10 Kbits/s of their up-
load bandwidth. As for the bMIX recipient unobservability
is ensure by the broadcast of the 2m resulting channels.
drastic reduction of the download bandwidth when com-
pared to the n × 10 Kbits/s of the bMIX as usually m (cid:28) n.
For example, in a university with one thousand phone sets
the number of simultaneous communications will scarcely
raise over ten. To simplify the provided formulas we will
consider that usually m ≤ n/100, if this is not the case
the reader is invited to adapt the performance evaluation we
provide to its speciﬁc context.
The server receives 2n× m× 10 Kbits/s. Supposing that
m ’ n/100 the 100 Mbits/s bandwidth will be saturated for
eight hundred users. However, in practice, handling more
than two or three hundred users is difﬁcult because of the
collaborative nature of the superposed sending protocol. In
the Internet the sMIX is not usable as the latency constraints
are too strong for this protocol to be used (with current
latency performance in Internet connections). The sMIX
server has to XOR the incoming trafﬁc, which has a com-
putational cost linear in m × n. This limits the maximum
number of simultaneous communications, but not enough
to be a practical issue.
6 PIR-based servers
Private Information Retrieval (PIR) is a cryptographic
primitive that allows a user to download an element from
a database without revealing to anybody, even the database
administrators, what element is being retrieved. Current
PIR schemes are very efﬁcient from a communication point
of view. In [11], a scheme is proposed in which the user
sends a small query and obtains the database element he is
interested in with an expansion factor on the communica-
tions of 2.
Instead of using PIR protocols over a database we pro-
pose in [2] to use them over a set of streams (which can
be seen as a database evolving very quickly) to select one
stream among many without the streaming server noticing
which stream is being selected.
6.1 The pMIX
Figure 6. sMIX performance overview.
Using a sMIX to communicate, the users will therefore
use 2m×10 Kbits/s both of their upload (for the superposed
sending protocol) and their download (as the sMIX broad-
casts the resulting channels) bandwidth. This represents a
Figure 7. pMIX description.
We deﬁne a pMIX as a bMIX that instead of broadcast-
ing all the user upload cover channels deﬁnes them as a set
of streams among which the users privately choose one by
sending every few seconds a PIR query. Each user must
send PIR queries at the same pace.
If a user A is hav-
ing a communication with another user B he will choose
B’s stream with his PIR queries. If a user is not communi-
cating he will randomly choose a stream and send queries
for it. The security properties of the PIR scheme used en-
sures that all the queries are indistinguishable both for the
database administrators and for global observers whatever
the queried streams are. Protocol 4 shows the protocol fol-
lowed between a user and the pMIX server upon connec-
tion.
Protocol 4 pMIX connection.
1. The user sets an encrypted link with the pMIX.
2. The user sets an upload cover trafﬁc channel by sending
every tenth of a second a one kilobit packet of encrypted
garbage to the pMIX.
3. The user sends every ﬁve seconds a PIR query for a random
stream among n.
4. The pMIX sets a download channel by using the user’s PIR
queries to generate a stream out of the set of the n upload
cover trafﬁc channels.
In a bMIX the users use 10 Kbits/s for their upload chan-
nel and n × 10 Kbits/s for their download channel.
In
a pMIX, using an instantiation of the protocol proposed
in [11], the users will use 10 Kbits/s for the upload chan-
nel and 20 Kbits/s for their download channel. The cost of
sending the PIR queries does not change the order of mag-
nitude of the upload bandwidth.
Figure 8. pMIX performance overview.
This server provides a full unobservability set to its users
with almost optimal bandwidth usage and does not require
any trust from them. On the other side, the computational
cost of the operations done is so large that it can just han-
dle very small sets of users. Moreover, the scalability of
pMIXes is reduced as the computational cost is proportional
to n2, n being the number of users. A server with a high-
end processor will not be able to go over n2 ’ 100 using
all its processing power. Thus a mono-processor server will
not be able to handle much more than a dozen users, and
even a strong initial investment in a multi-processor server
or a cluster of computers will not allow to have more than
some dozens of users at a reasonable price. For example, a
cluster with twenty-ﬁve processors will lead to n2 ’ 2500
and therefore to a set of just ﬁfty users.
Obtaining a server that is both efﬁcient from a commu-
nication and computational point of view is a bit more com-
plicated. We present such a server in the next section.
6.2 The apMIX
The idea we propose to limit the computational cost of
a PIR-based server is to reduce the number of PIR queries
that must be treated. Instead of sending directly their PIR
queries to the server, the users will use a superposed sending
protocol increasing the communication cost of the emission
by 2m but enabling the server to recover after the xoring
phase just 2m PIR queries instead of n.
Figure 9. apMIX description.
As the server has only to reply to 2m PIR queries the
computational cost is proportional to n × 2m instead of
n2. The number of simultaneous communications in a set
of users is generally at least one or two orders of magni-
tude smaller than the set size and therefore this optimiza-
tion results in a much smaller computational cost. Instead
of handling a few dozen users we can form up with this
server unobservability sets of a few hundred users. Scala-
bility is not improved as m is proportional to n and therefore
O(n×m) = O(n2). Nevertheless, it is important to remark
that in the different contexts (embassies, sensitive laborato-
ries, military communications, etc...) in which a completely
unobservable system would be used, the set of users will al-
most never go over some hundred users and will not need to
scale up to tens of thousands of users.
Figure 10. apMIX performance overview.
Using the protocol proposed in [11] to generate the PIR
replies, a server with a high-end processor will be able to
handle a set of users as long as n × 2m ’ 100. This
roughly means the initial investment will be of one pro-
cessor per ﬁfty users and per communication. For exam-
ple, a server with four processors will be able to handle one
hundred users having at most two simultaneous communi-
cations (n × 2m ’ 400). A rack of six servers with four
processors each will be able to handle two hundred users
having up to six simultaneous communications.
Latency is not a problem for superposed sending in this
server as it was for the sMIX because is not used to send
the data exchanged during the communication (which must
have an RTT lower than 250 ms), but only to send the PIR
queries. The latency for PIR query sending has an impact
on call establishment times for which the acceptable latency
is of some seconds.
The price to pay with this approach, when compared to
a pMIX, is that the server is not able to know which query
corresponds to which user and must therefore broadcast the
2m 20Kbits/s resulting streams to all the users. The upload
cover trafﬁc channel needs only 10 Kbits/s, but the down-
load cover trafﬁc channel will need 4m × 10 Kbits/s. In a
local area network this limitation is minor but if the users
are connected through the Internet with 1 Mbit/s of down-
load bandwidth, the number of simultaneous communica-
tions cannot be more than three if the users limit their band-
width usage to ten percent.
7 Conclusion
Over the Internet, without relying on a trusted third party,
the only server that would be able to provide unobservable
VoIP communications to more than a few users is the ap-
MIX (as long as there are not many simultaneous commu-
nications). In a local area network, a bMIX or a sMIX can
both provide unobservability in VoIP communications to
one hundred users or more. However, we believe the ap-
MIX approach is also preferable specially as it has better
scalability. Indeed, for the sMIX, scalability is simple in
theory but very hard to achieve in practice. In the case of
the bMIX it is not possible to scale up except if dedicated
lines for the VoIP system are used (in which case the bMIX
is the best option without any doubt).
The investment needed for an apMIX may seem unrea-
sonable, but this should be moderated by other costs, spe-
cially the cost per user of the VoIP infrastructure. Indeed,
the level of security provided by the systems presented in
this paper is inconsistent with the usage of softphones. A
network in which such strong unobservability properties
would be expected each user will probably have a secured
hardphone. These hardphones must moreover be able to en-
crypt and decrypt the communications as trafﬁc analysis re-
sistance is senseless if the communications are unencrypted.
This means that the cost to set up such a VoIP network will
be at least some hundred dollars per user on the network.
The cost per user with an apMIX is roughly (if we suppose
each processor costs ﬁve hundred dollars) of ten dollars per
simultaneous communication that the server can handle. We
can therefore conclude that the cost introduced by the ap-
MIX is reasonable when compared with the other costs, as
long as the number of simultaneous communications does
not reach many dozens.
In this paper we have just considered anonymizing the
communication data. As future work we plan to deal with
the communication signaling and try to build a set of con-
sistent modules for an Asterisk IP PBX. We hope that this
work will motivate research in this ﬁeld.
8 Acknowledgements
This work has been partially supported by the Euro-
pean project PRIME (Privacy and Identity Management for
Europe, Integrated Project IST-507591) http://www.
prime-project.eu.
References
[1] A. Acquisti, R. Dingledine, and P. F. Syverson. On
the Economics of Anonymity. In Financial Cryptog-
raphy, pages 84–102, 2003.
[2] C. Aguilar Melchor and Y. Deswarte. pMIX: Untrace-
ability for Small Hiding Groups. In Fourth IEEE Inter-
national Symposium on Network Computing and Ap-
plications, pages 29–40, 2005.
[3] C. Aguilar Melchor and Y. Deswarte. From DC-nets
to pMIXes: multiple variants for anonymous com-
munications. In Fifth IEEE International Symposium
on Network Computing and Applications, pages 163–
172, 2006.
[4] D. Chaum. Untraceable Electronic Mail, Return Ad-
dresses, and Digital Pseudonyms. Communications
ACM, 24(2):84–88, 1981.
[5] D. Chaum. The Dining Cryptographers Problem: Un-
conditional Sender and Recipient Untraceability. J.
Cryptology, 1(1):65–75, 1988.
[6] R. Dingledine, N. Mathewson, and P. F. Syverson. Tor:
The Second-Generation Onion Router. In USENIX Se-
curity Symposium, pages 303–320. USENIX, 2004.
[7] JAP,
Privacy.
Anonymity
and
http://anon.inf.tu-dresden.de.
[8] M. J. Freedman and R. Morris. Tarzan: a Peer-to-Peer
Anonymizing Network Layer. In ACM Conference on
Computer and Communications Security (CCS 2002),
pages 193–206, 2002.
[9] D. M. Goldschlag, M. G. Reed, and P. F. Syverson.
Onion Routing. Communications ACM, 42(2):39–41,
1999.
[10] A. Jerichow, J. Müller, A. Pﬁtzmann, B. Pﬁtzmann,
and M. Waidner. Real-Time MIXes: A Bandwidth-
IEEE Journal on Se-
Efﬁcient Anonymity Protocol.
lected Areas in Communications, 16(4), 1998.
[11] H. Lipmaa. An Oblivious Transfer Protocol with
Log-Squared Communication. In J. Zhou, J. Lopez,
R. H. Deng, and F. Bao, editors, ISC, volume 3650 of
Lecture Notes in Computer Science, pages 314–328.
Springer, 2005.
[12] D. M. Martin. Local anonymity in the Internet. PhD
thesis, Boston University, 1999.
[13] A. Pﬁtzmann. How to Implement Isdns Without User
Observability - some Remarks. Technical report, Karl-
sruhe, 1985.
[14] A. Pﬁtzmann.
Diensteintegrierende Kommunika-
tionsnetze mit teilnehmerüberprüfbarem Datenschutz,
volume 234 of Informatik-Fachberichte. Springer,
1990.
[15] A. Pﬁtzmann, B. Pﬁtzmann, and M. Waidner. ISDN-
mixes: Untraceable communication with very small
In Proceedings of the GI/ITG
bandwidth overhead.
Conference on Communication in Distributed Sys-
tems, pages 451–463, February 1991.
[16] A. Pﬁtzmann and M. Waidner. Networks without User
Observability—Design Options. In F. Pichler, editor,
Advances in Cryptology—EUROCRYPT 85, volume
219 of Lecture Notes in Computer Science, pages 245–
253. Springer-Verlag, 1986, April 1985.
[17] M. Rennhard and B. Plattner. Practical Anonymity for
the Masses with MorphMix. In Financial Cryptogra-
phy, pages 233–250, 2004.