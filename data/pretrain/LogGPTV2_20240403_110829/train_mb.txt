points to a character string containing an ipv4 network address in
dotted-decimal format, "\fiddd.ddd.ddd.ddd\fp", where
.i ddd
is a decimal number of up to three digits in the range 0 to 255.
the address is converted to a
.i struct in_addr
and copied to
.ir dst ,
which must be
.i sizeof(struct in_addr)
(4) bytes (32 bits) long.
.tp
.b af_inet6
.i src
points to a character string containing an ipv6 network address.
the address is converted to a
.i struct in6_addr
and copied to
.ir dst ,
which must be
.i sizeof(struct in6_addr)
(16) bytes (128 bits) long.
the allowed formats for ipv6 addresses follow these rules:
.rs
.ip 1. 3
the preferred format is
.ir x:x:x:x:x:x:x:x .
this form consists of eight hexadecimal numbers,
each of which expresses a 16-bit value (i.e., each
.i x
can be up to 4 hex digits).
.ip 2.
a series of contiguous zero values in the preferred format
can be abbreviated to
.ir :: .
only one instance of
.i ::
can occur in an address.
for example, the loopback address
.i 0:0:0:0:0:0:0:1
can be abbreviated as
.ir ::1 .
the wildcard address, consisting of all zeros, can be written as
.ir :: .
.ip 3.
an alternate format is useful for expressing ipv4-mapped ipv6 addresses.
this form is written as
.ir x:x:x:x:x:x:d.d.d.d ,
where the six leading
.ir x s
are hexadecimal values that define the six most-significant
16-bit pieces of the address (i.e., 96 bits), and the
.ir d s
express a value in dotted-decimal notation that
defines the least significant 32 bits of the address.
an example of such an address is
.ir ::ffff:204.152.189.116 .
.re
.ip
see rfc 2373 for further details on the representation of ipv6 addresses.
.sh return value
.br inet_pton ()
returns 1 on success (network address was successfully converted).
0 is returned if
.i src
does not contain a character string representing a valid network
address in the specified address family.
if
.i af
does not contain a valid address family, \-1 is returned and
.i errno
is set to
.br eafnosupport .
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br inet_pton ()
t}	thread safety	mt-safe locale
.te
.hy
.ad
.sp 1
.sh conforming to
posix.1-2001, posix.1-2008.
.sh notes
unlike
.br inet_aton (3)
and
.br inet_addr (3),
.br inet_pton ()
supports ipv6 addresses.
on the other hand,
.br inet_pton ()
accepts only ipv4 addresses in dotted-decimal notation, whereas
.br inet_aton (3)
and
.br inet_addr (3)
allow the more general numbers-and-dots notation (hexadecimal
and octal number formats, and formats that don't require all
four bytes to be explicitly written).
for an interface that handles both ipv6 addresses, and ipv4
addresses in numbers-and-dots notation, see
.br getaddrinfo (3).
.sh bugs
.b af_inet6
does not recognize ipv4 addresses.
an explicit ipv4-mapped ipv6 address must be supplied in
.i src
instead.
.sh examples
the program below demonstrates the use of
.br inet_pton ()
and
.br inet_ntop (3).
here are some example runs:
.pp
.in +4n
.ex
.rb "$" " ./a.out i6 0:0:0:0:0:0:0:0"
::
.rb "$" " ./a.out i6 1:0:0:0:0:0:0:8"
1::8
.rb "$" " ./a.out i6 0:0:0:0:0:ffff:204.152.189.116"
::ffff:204.152.189.116
.ee
.in
.ss program source
\&
.ex
#include 
#include 
#include 
#include 
int
main(int argc, char *argv[])
{
    unsigned char buf[sizeof(struct in6_addr)];
    int domain, s;
    char str[inet6_addrstrlen];
    if (argc != 3) {
        fprintf(stderr, "usage: %s {i4|i6|} string\en", argv[0]);
        exit(exit_failure);
    }
    domain = (strcmp(argv[1], "i4") == 0) ? af_inet :
             (strcmp(argv[1], "i6") == 0) ? af_inet6 : atoi(argv[1]);
    s = inet_pton(domain, argv[2], buf);
    if (s , various fixes
.\" 2007-10-11, mike frysinger , various fixes
.\" 2007-12-08, mtk, converted from mdoc to man macros
.\"
.th elf 5 2021-03-22 "linux" "linux programmer's manual"
.sh name
elf \- format of executable and linking format (elf) files
.sh synopsis
.nf
.\" .b #include 
.b #include 
.fi
.sh description
the header file
.i 
defines the format of elf executable binary files.
amongst these files are
normal executable files, relocatable object files, core files, and shared
objects.
.pp
an executable file using the elf file format consists of an elf header,
followed by a program header table or a section header table, or both.
the elf header is always at offset zero of the file.
the program header
table and the section header table's offset in the file are defined in the
elf header.
the two tables describe the rest of the particularities of
the file.
.pp
.\" applications which wish to process elf binary files for their native
.\" architecture only should include
.\" .i 
.\" in their source code.
.\" these applications should need to refer to
.\" all the types and structures by their generic names
.\" "elf_xxx"
.\" and to the macros by
.\" elf_xxx".
.\" applications written this way can be compiled on any architecture,
.\" regardless of whether the host is 32-bit or 64-bit.
.\" .pp
.\" should an application need to process elf files of an unknown
.\" architecture, then the application needs to explicitly use either
.\" "elf32_xxx"
.\" or
.\" "elf64_xxx"
.\" type and structure names.
.\" likewise, the macros need to be identified by
.\" "elf32_xxx"
.\" or
.\" "elf64_xxx".
.\" .pp
this header file describes the above mentioned headers as c structures
and also includes structures for dynamic sections, relocation sections and
symbol tables.
.\"
.ss basic types
the following types are used for n-bit architectures (n=32,64,
.i elfn
stands for
.i elf32
or
.ir elf64 ,
.i uintn_t
stands for
.i uint32_t
or
.ir uint64_t ):
.pp
.in +4n
.ex
elfn_addr       unsigned program address, uintn_t
elfn_off        unsigned file offset, uintn_t
elfn_section    unsigned section index, uint16_t
elfn_versym     unsigned version symbol information, uint16_t
elf_byte        unsigned char
elfn_half       uint16_t
elfn_sword      int32_t
elfn_word       uint32_t
elfn_sxword     int64_t
elfn_xword      uint64_t
.\" elf32_size  unsigned object size
.ee
.in
.pp
(note: the *bsd terminology is a bit different.
there,
.i elf64_half
is
twice as large as
.ir elf32_half ,
and
.i elf64quarter
is used for
.ir uint16_t .
in order to avoid confusion these types are replaced by explicit ones
in the below.)
.pp
all data structures that the file format defines follow the
"natural"
size and alignment guidelines for the relevant class.
if necessary,
data structures contain explicit padding to ensure 4-byte alignment
for 4-byte objects, to force structure sizes to a multiple of 4, and so on.
.\"
.ss elf header (ehdr)
the elf header is described by the type
.i elf32_ehdr
or
.ir elf64_ehdr :
.pp
.in +4n
.ex
#define ei_nident 16
typedef struct {
    unsigned char e_ident[ei_nident];
    uint16_t      e_type;
    uint16_t      e_machine;
    uint32_t      e_version;
    elfn_addr     e_entry;
    elfn_off      e_phoff;
    elfn_off      e_shoff;
    uint32_t      e_flags;
    uint16_t      e_ehsize;
    uint16_t      e_phentsize;
    uint16_t      e_phnum;
    uint16_t      e_shentsize;
    uint16_t      e_shnum;
    uint16_t      e_shstrndx;
} elfn_ehdr;
.ee
.in
.pp
the fields have the following meanings:
.\"
.\"
.tp
.ir e_ident
this array of bytes specifies how to interpret the file,
independent of the processor or the file's remaining contents.
within this array everything is named by macros, which start with
the prefix
.br ei_
and may contain values which start with the prefix
.br elf .
the following macros are defined:
.rs
.tp
.br ei_mag0
the first byte of the magic number.
it must be filled with
.br elfmag0 .
(0: 0x7f)
.tp
.br ei_mag1
the second byte of the magic number.
it must be filled with
.br elfmag1 .
(1: \(aqe\(aq)
.tp
.br ei_mag2
the third byte of the magic number.
it must be filled with
.br elfmag2 .
(2: \(aql\(aq)
.tp
.br ei_mag3
the fourth byte of the magic number.
it must be filled with
.br elfmag3 .
(3: \(aqf\(aq)
.tp
.br ei_class
the fifth byte identifies the architecture for this binary:
.rs
.tp 14
.pd 0
.br elfclassnone
this class is invalid.
.tp
.br elfclass32
this defines the 32-bit architecture.
it supports machines with files
and virtual address spaces up to 4 gigabytes.
.tp
.br elfclass64
this defines the 64-bit architecture.
.pd
.re
.tp
.br ei_data
the sixth byte specifies the data encoding of the processor-specific
data in the file.
currently, these encodings are supported:
.rs 9
.tp 14
.pd 0
.br elfdatanone
unknown data format.
.tp
.br elfdata2lsb
two's complement, little-endian.
.tp
.br elfdata2msb
two's complement, big-endian.
.pd
.re
.tp
.br ei_version
the seventh byte is the version number of the elf specification:
.ip
.pd 0
.rs
.tp 14
.br ev_none
invalid version.
.tp
.br ev_current
current version.
.pd
.re
.\".el
.tp
.br ei_osabi
the eighth byte identifies the operating system
and abi to which the object is targeted.
some fields in other elf structures have flags
and values that have platform-specific meanings;
the interpretation of those fields is determined by the value of this byte.
for example:
.rs
.tp 21
.pd 0
.br elfosabi_none
same as elfosabi_sysv
.\" 0
.tp
.br elfosabi_sysv
unix system v abi
.\" 0
.\" synonym: elfosabi_none
.tp
.br elfosabi_hpux
hp-ux abi
.\" 1
.tp
.br elfosabi_netbsd
netbsd abi
.\" 2
.tp
.br elfosabi_linux
linux abi
.\" 3
.\" .tp
.\" .br elfosabi_hurd
.\" hurd abi
.\" 4
.\" .tp
.\" .br elfosabi_86open
.\" 86open common ia32 abi
.\" 5
.tp
.br elfosabi_solaris
solaris abi
.\" 6
.\" .tp
.\" .br elfosabi_monterey
.\" monterey project abi
.\" now replaced by
.\" elfosabi_aix
.\" 7
.tp
.br elfosabi_irix
irix abi
.\" 8
.tp
.br elfosabi_freebsd
freebsd abi
.\" 9
.tp
.br elfosabi_tru64
tru64 unix abi
.\" 10
.\" elfosabi_modesto
.\" 11
.\" elfosabi_openbsd
.\" 12
.tp
.br elfosabi_arm
arm architecture abi
.\" 97
.tp
.br elfosabi_standalone
stand-alone (embedded) abi
.\" 255
.pd
.re
.tp
.br ei_abiversion
the ninth byte identifies the version of the abi
to which the object is targeted.
this field is used to distinguish among incompatible versions of an abi.
the interpretation of this version number
is dependent on the abi identified by the
.b ei_osabi
field.
applications conforming to this specification use the value 0.
.tp
.br ei_pad
start of padding.
these bytes are reserved and set to zero.
programs
which read them should ignore them.
the value for
.b ei_pad
will change in
the future if currently unused bytes are given meanings.
.\" as reported by yuri kozlov and confirmed by mike frysinger, ei_brand is
.\" not in gabi (http://www.sco.com/developers/gabi/latest/ch4.eheader.html)
.\" it looks to be a bsdism
.\" .tp
.\" .br ei_brand
.\" start of architecture identification.
.tp
.br ei_nident
the size of the
.i e_ident
array.
.re
.tp