|                                  | auto_tie_breaker_node`{.literal} |
|                                  | 中配置的 `nodeid`{.literal}      |
|                                  | 保持联系                         |
|                                  | 的节点集合（如果未设置则为最低的 |
|                                  | `nodeid`{.literal}               |
|                                  | ）将保持仲裁状态。其他节点将为   |
|                                  | inquorate。                      |
|                                  |                                  |
|                                  | `auto_tie_breaker`{.literal}     |
|                                  | 选项                             |
|                                  | 主要用于具有偶数节点的群集，因为 |
|                                  | 它允许群集继续使用平均分割操作。 |
|                                  | 对于更复杂的故障，如多个不一致的 |
|                                  | 分割，建议您使用仲裁设备。//LINK |
|                                  | TO                               |
|                                  |                                  |
|                                  | `auto_tie_breaker`{.literal}     |
|                                  | 选项与仲裁设备不兼容。           |
+----------------------------------+----------------------------------+
| `wait_for_all`{.literal}         | 在启用后，                       |
|                                  | 只有在所有节点都最少同时可见一次 |
|                                  | 后，集群才会第一次处于仲裁状态。 |
|                                  |                                  |
|                                  | `wait_for_all`{.literal}         |
|                                  | 选项主要用于                     |
|                                  | 双节点群集，以及用于使用仲裁设备 |
|                                  | `lms(`{.literal} last man        |
|                                  | standing)算法的双向群集。        |
|                                  |                                  |
|                                  | 当群集具有两                     |
|                                  | 个节点并且不使用仲裁设备并且禁用 |
|                                  | `auto _tie_                      |
|                                  | breaker 时，wait_for_`{.literal} |
|                                  | all``{=html}              |
|                                  | 选项会自动启用。您可以通过将     |
|                                  | `wait_for_all`{.literal}         |
|                                  | 明确设置为 0 来覆盖它。          |
+----------------------------------+----------------------------------+
| `last_man_standing`{.literal}    | 启用后，                         |
|                                  | 集群可以在特定情况下重新动态计算 |
|                                  | `expected_votes`{.literal}       |
|                                  | 和                               |
|                                  | 仲裁。启用这个选项时，您必须启用 |
|                                  | `wait_for_all`{.literal          |
|                                  | }。`last_man_standing`{.literal} |
|                                  | 选项与仲裁设备不兼容。           |
+----------------------------------+----------------------------------+
| `las                             | 在集群丢失节点后，在重新计算     |
| t_man_standing_window`{.literal} | `expected_votes`{.literal}       |
|                                  | 和仲裁前需要等待的时间（毫秒）。 |
+----------------------------------+----------------------------------+
:::
:::
有关配置和使用这些选项的详情，请查看 `votequorum`{.literal}(5)man page。
:::
::: section
::: titlepage
# []{#assembly_configuring-cluster-quorum-configuring-and-managing-high-availability-clusters.html#proc_modifying-quorum-options-configuring-cluster-quorum}修改仲裁选项 {.title}
:::
您可以使用 `pcs quorum update`{.literal}
命令修改集群的常规仲裁选项。您可以在正在运行的系统上修改
`quorum.two_node`{.literal} 和 `quorum.expected_votes`{.literal}
选项。对于所有其他仲裁选项，执行此命令需要集群停止。有关仲裁选项的详情，请查看
`votequorum`{.literal}(5)man page。
`pcs quorum update`{.literal} 命令的格式如下。
``` literallayout
pcs quorum update [auto_tie_breaker=[0|1]] [last_man_standing=[0|1]] [last_man_standing_window=[time-in-ms] [wait_for_all=[0|1]]
```
以下一系列命令修改 `wait_for_all`{.literal}
仲裁选项，并显示选项的更新状态：请注意，系统不允许在集群运行时执行这个命令。
``` literallayout
[root@node1:~]# pcs quorum update wait_for_all=1
Checking corosync is not running on nodes...
Error: node1: corosync is running
Error: node2: corosync is running
[root@node1:~]# pcs cluster stop --all
node2: Stopping Cluster (pacemaker)...
node1: Stopping Cluster (pacemaker)...
node1: Stopping Cluster (corosync)...
node2: Stopping Cluster (corosync)...
[root@node1:~]# pcs quorum update wait_for_all=1
Checking corosync is not running on nodes...
node2: corosync is not running
node1: corosync is not running
Sending updated corosync.conf to nodes...
node1: Succeeded
node2: Succeeded
[root@node1:~]# pcs quorum config
Options:
  wait_for_all: 1
```
:::
::: section
::: titlepage
# []{#assembly_configuring-cluster-quorum-configuring-and-managing-high-availability-clusters.html#proc_displaying-quorum-configuration-status-configuring-cluster-quorum}显示制裁配置和状态 {.title}
:::
集群运行后，您可以输入以下集群仲裁命令来显示仲裁配置和状态。
以下命令显示制裁配置。
``` literallayout
pcs quorum [config]
```
以下命令显示制裁运行时状态。
``` literallayout
pcs quorum status
```
:::
::: section
::: titlepage
# []{#assembly_configuring-cluster-quorum-configuring-and-managing-high-availability-clusters.html#proc_running-inquorate-clusters-configuring-cluster-quorum}运行非仲裁的集群 {.title}
:::
如果您将节点长时间移出集群，且这些节点丢失会导致仲裁丢失，您可以使用
`pcs quorum expected-votes 命令更改实时群集的 expected_`{.literal}
votes``{=html} 参数值。这可让集群在没有仲裁的情况下继续操作。
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
在 Live
集群中更改预期投票时应特别小心。如果因为您手动更改了预期的投票，集群的少于
50%
的部分在运行，那么集群中的其他节点就可以单独启动并运行集群服务，从而导致数据崩溃和其他意外结果。如果更改了这个值，您应该确保启用了
`wait_for_all`{.literal} 参数。
:::
以下命令将 live 集群中的预期 vote
设置为指定的值。这只会影响实时集群，不会更改配置文件；如果重新加载，则
`expected_votes`{.literal} 的值将重置为配置文件中的值。
``` literallayout
pcs quorum expected-votes votes
```
在您知道群集不仲裁但您希望群集进行资源管理的情况下，您可以使用
`pcs quorum unblock 命令来`{.literal} 防止群集在建立仲裁时等待所有节点。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
使用这个命令时需要特别小心。在运行此命令前，请确定关闭没有在集群中的节点，并确保无法访问共享资源。
:::
``` literallayout
# pcs quorum unblock
```
:::
:::
[]{#assembly_configuring-quorum-devices-configuring-and-managing-high-availability-clusters.html}
::: chapter
::: titlepage
# []{#assembly_configuring-quorum-devices-configuring-and-managing-high-availability-clusters.html#assembly_configuring-quorum-devices-configuring-and-managing-high-availability-clusters}第 26 章 配置仲裁设备 {.title}
:::
您可以通过配置作为集群第三方设备的独立仲裁设备，让集群出现比标准仲裁规则处理更多节点故障的情况。对于偶数节点的集群，建议使用仲裁设备。对于双节点集群，使用仲裁设备可以更好地决定在脑裂情况下保留哪些节点。
在配置仲裁设备，您必须考虑以下内容。
::: itemizedlist
-   建议您在与使用该仲裁设备的集群相同的站点中的不同的物理网络中运行仲裁设备。理想情况下，仲裁设备主机应该独立于主集群，或者至少位于一个独立的
    PSU，而不要与 corosync 环或者环位于同一个网络网段。
-   您不能同时在集群中使用多个仲裁设备。
-   虽然您不能同时在集群中使用多个仲裁设备，但多个集群可能同时使用一个仲裁设备。每个使用这个仲裁设备的集群都可以使用不同的算法和仲裁选项，因为它们保存在集群节点本身。例如，单个仲裁设备可由具有`ffsplit`{.literal}
    (50/50 均分)算法的一个集群和具有 `lms`{.literal} (last man
    standing)算法的第二个集群来使用。
-   不应在现有集群节点中运行制裁设备。
:::
::: section
::: titlepage
# []{#assembly_configuring-quorum-devices-configuring-and-managing-high-availability-clusters.html#proc_installing-quorum-device-packages-configuring-quorum-devices}安装制裁设备软件包 {.title}
:::
为集群配置仲裁设备需要您安装以下软件包：
::: itemizedlist
-   在现有集群的节点上安装 `corosync-qdevice`{.literal}。
    ``` literallayout
    [root@node1:~]# yum install corosync-qdevice
    [root@node2:~]# yum install corosync-qdevice
    ```
-   在仲裁设备主机上安装 `pcs`{.literal} 和 `corosync-qnetd`{.literal}。
    ``` literallayout
    [root@qdevice:~]# yum install pcs corosync-qnetd
    ```
-   在仲裁设备主机上启动 `pcsd`{.literal} 服务，并在系统启动时启用
    `pcsd`{.literal}。
    ``` literallayout
    [root@qdevice:~]# systemctl start pcsd.service
    [root@qdevice:~]# systemctl enable pcsd.service
    ```
:::
:::
::: section
::: titlepage
# []{#assembly_configuring-quorum-devices-configuring-and-managing-high-availability-clusters.html#proc_configuring-quorum-device-configuring-quorum-devices}配置仲裁设备 {.title}
:::
以下流程配置了仲裁设备并将其添加到集群中。
在本例中：
::: itemizedlist
-   用于仲裁设备的节点是 `qdevice`{.literal}。
-   仲裁设备模型是
    `net`{.literal}，这是目前唯一支持的模型。`net`{.literal}
    模型支持以下算法：
    ::: itemizedlist
    -   `ffsplit`{.literal} ：50-50
        均分。这为拥有最多活跃节点的分区提供一个投票。
    -   `lMS`{.literal} :last-man-standing。如果节点是集群中唯一可以看到
        `qnetd`{.literal} 服务器的节点，则它将返回一个投票。
        ::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
        ### 警告 {.title}
        LMS
        算法允许在集群中只剩下一个节点时仍保持仲裁，但也意味着制裁设备的投票权利更大，它等同于
        number_of_nodes - 1。丢失与制裁设备的连接意味着丢失了
        number_of_nodes - 1
        个投票，就是说只有所有节点都处于活动状态的集群才能保持仲裁（通过对仲裁设备进行过度投票），
        其它任何集群都变为不可仲裁。
        :::
        有关这些算法实施的详情，请查看
        `corosync-qdevice`{.literal}(8)手册页。
    :::
-   集群节点是 `node1`{.literal} 和 `node2`{.literal}。
:::
::: title
**流程**
:::
下面步骤配置一个仲裁设备，并将仲裁设备添加到集群中。
::: orderedlist
1.  在您要用来托管仲裁设备的节点中，使用以下命令配置仲裁设备。这个命令配置并启动仲裁设备模型
    `net`{.literal}，并将设备配置为在引导时启动。
    ``` literallayout
    [root@qdevice:~]# pcs qdevice setup model net --enable --start
    Quorum device 'net' initialized
    quorum device enabled
    Starting quorum device...
    quorum device started
    ```
    配置制裁设备后，您可以检查其状态。这应该显示
    `corosync-qnetd`{.literal}
    守护进程正在运行，此时没有客户端连接上来。`--full`{.literal}
    命令选项提供详细输出。
    ``` literallayout
    [root@qdevice:~]# pcs qdevice status net --full
    QNetd address:                  *:5403
    TLS:                            Supported (client certificate required)
    Connected clients:              0
    Connected clusters:             0
    Maximum send/receive size:      32768/32768 bytes
    ```