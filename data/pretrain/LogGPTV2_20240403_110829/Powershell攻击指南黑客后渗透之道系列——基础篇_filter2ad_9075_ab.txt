        ## 从stream读取所有的数据，写到输出缓冲区
        do{ 
            start-sleep -m 1000 
            $findmore = $false 
            # 读取Timeout
            $stream.ReadTimeout = 1000 
    ​
            do{ 
                try { 
                    $read = $stream.Read($buffer, 0, 1024) 
                    if($read -gt 0){ 
                        $findmore = $true 
                        $outputBuffer += ($encoding.GetString($buffer, 0, $read)) 
                    } 
                } catch { $findMore = $false; $read = 0 } 
            } while($read -gt 0) 
        } while($findmore) 
    ​
        $outputBuffer 
    }
    ​
    function Main{
        # 定义主机和端口
        $remoteHost = "127.0.0.1"
        $port = 21
        # 定义连接Host与Port
        $socket = new-object System.Net.Sockets.TcpClient($remoteHost, $port) 
        # 进行连接
        $stream = $socket.GetStream()
        # 获取Stream
        $writer = new-object System.IO.StreamWriter $stream 
        # 创建IO对象
        $SCRIPT:output += GetOutput 
        # 声明变量
        if($output){ 
            # 输出
            foreach($line in $output.Split("`n")) 
            {
                write-host $line 
            }
            $SCRIPT:output = "" 
        }
    }
    . Main
我们来看看输出结果：
    PS C:UsersrootclayDesktoppowershell> . .Tcp-Demo.ps1
    220 Microsoft FTP Service
这样就打开了21端口的连接，并且获取到了21端口的banner信息。那么有过端口扫描编写的朋友肯定已经看到了，这种方式是直接打开连接，并不能获取到一些需要发包才能返回banner的端口信息，典型的80端口就是如此，我们需要给80端口发送特定的信息才能得到Response,
当然还有许多类似的端口，比如3389端口, 下面我们来看看我们如何使用powershell实现这项功能.
    Tcp-Demo2.ps1
    function GetOutput 
    { 
        ... # 代码和上面的一样
    }
    ​
    function Main{
        # 定义主机和端口
        $remoteHost = "127.0.0.1"
        $port = 80
        # 定义连接Host与Port
        $socket = new-object System.Net.Sockets.TcpClient($remoteHost, $port) 
        # 进行连接
        $stream = $socket.GetStream()
        # 获取Stream
        $writer = new-object System.IO.StreamWriter $stream 
        # 创建IO对象
        $SCRIPT:output += GetOutput 
        # 声明变量, userInput为要发包的内容,这里我们需要发送一个GET请求给Server
        $userInput = "GET / HTTP/1.1 `nHost: localhost  `n`n"
        # 定义发包内容
        foreach($line in $userInput) 
            { 
                # 发送数据
                $writer.WriteLine($line) 
                $writer.Flush() 
                $SCRIPT:output += GetOutput 
            } 
        if($output){ 
            # 输出
            foreach($line in $output.Split("`n")) 
            {
                write-host $line 
            }
            $SCRIPT:output = "" 
        }
    }
    . Main
我们来看看输出:
    PS C:UsersrootclayDesktoppowershell> . .Tcp-Demo2.ps1
    HTTP/1.1 200 OK
    Content-Type: text/html
    Accept-Ranges: bytes
    ETag: "5e26ec16b73ad31:0"
    Server: Microsoft-IIS/7.5
    Content-Length: 689
    ​
    IIS7
    ...
我们下面对这项功能进行一个整合：我们可以发包给一个端口，也可以直接连接一个端口，这里已经实现TCP，http，https三种常见协议的访问
    ########################################
    ## Tcp-Request.ps1 
    ## 
    ## Example1: 
    ## 
    ## $http = @" 
    ## GET / HTTP/1.1 
    ## Host:127.0.0.1 
    ## `n`n 
    ## "@ 
    ## 
    ## `n 在Powershell中代表换行符
    ## $http | .Tcp-Request localhost  80 
    ## 
    ## Example2: 
    ## .Tcp-Request localhost 80  
    ######################################## 
    ​
    ## 管理参数输入param()数组
    param( 
            [string] $remoteHost = "localhost", 
            [int] $port = 80, 
            [switch] $UseSSL, 
            [string] $inputObject, 
            [int] $commandDelay = 100 
         ) 
    ​
    [string] $output = "" 
    ​
    ## 获取用户输入模式
    $currentInput = $inputObject 
    if(-not $currentInput) 
    { 
        $SCRIPT:currentInput = @($input) 
    } 
    # 脚本模式开关, 如果脚本能读取到输入, 使用发包模式, 如果没有输入使用TCP直连模式
    $scriptedMode = [bool] $currentInput 
    ​
    function Main
    { 
        ## 打开socket连接远程机器和端口
        if(-not $scriptedMode) 
        { 
            write-host "Connecting to $remoteHost on port $port" 
        } 
        ## 异常追踪
        trap { Write-Error "Could not connect to remote computer: $_"; exit } 
        $socket = new-object System.Net.Sockets.TcpClient($remoteHost, $port) 
    ​
        if(-not $scriptedMode) 
        { 
            write-host "Connected. Press ^D(Control + D) followed by [ENTER] to exit.`n" 
        } 
    ​
        $stream = $socket.GetStream() 
    ​
        ## 如果有SSl使用SSLStream获取Stream
        if($UseSSL) 
        { 
            $sslStream = New-Object System.Net.Security.SslStream $stream,$false 
            $sslStream.AuthenticateAsClient($remoteHost) 
            $stream = $sslStream 
        } 
    ​
        $writer = new-object System.IO.StreamWriter $stream 
    ​
        while($true) 
        { 
            ## 获取得到的Response结果
            $SCRIPT:output += GetOutput 
    ​
            ## 如果我们使用了管道输入的模式，我们发送我们的命令，再接受输出，并退出
            if($scriptedMode) 
            { 
                foreach($line in $currentInput) 
                { 
                    $writer.WriteLine($line) 
                    $writer.Flush() 
                    Start-Sleep -m $commandDelay 
                    $SCRIPT:output += GetOutput 
                } 
    ​
                break 
            } 
            ## 如果没有使用事先管道输入的模式直接读取TCP回包
            else 
            { 
                if($output)  
                { 
                    # 逐行输出
                    foreach($line in $output.Split("`n")) 
                    { 
                        write-host $line 
                    } 
                    $SCRIPT:output = "" 
                } 
    ​
                ## 获取用户的输入,如果读取到^D就退出 
                $command = read-host 
                if($command -eq ([char] 4)) { break; } 
    ​
                $writer.WriteLine($command) 
                $writer.Flush() 
            } 
        } 
    ​
        ## Close the streams 
        $writer.Close() 
        $stream.Close() 
    ​
        ## 如果我们使用了管道输入的模式,这里输出刚才读取到服务器返回的数据
        if($scriptedMode) 
        { 
            $output 
        } 
    } 
    ​
    ## 获取远程服务器的返回数据
    function GetOutput 
    { 
        ## 创建一个缓冲区获取数据
        $buffer = new-object System.Byte[] 1024 
        $encoding = new-object System.Text.AsciiEncoding 
        $outputBuffer = "" 
        $findMore = $false 
    ​
        ## 从stream读取所有的数据，写到输出缓冲区
        do 
        { 
            start-sleep -m 1000 
            $findmore = $false 
            $stream.ReadTimeout = 1000 
    ​
            do 
            { 
                try 
                { 
                    $read = $stream.Read($buffer, 0, 1024) 
    ​
                    if($read -gt 0) 
                    { 
                        $findmore = $true 
                        $outputBuffer += ($encoding.GetString($buffer, 0, $read)) 
                    } 
                } catch { $findMore = $false; $read = 0 } 
            } while($read -gt 0) 
        } while($findmore) 
    ​
        $outputBuffer 
    } 
    . Main 
那么至此我们已经完成了对TCP端口的打开并获取对应的信息，其中很多的关键代码释义我已经详细给出，我们主要以TCP为例，由于UDP应用场景相对于TCP较少，关于UDP的编写可自行编写。这个脚本加以修改就是一个Powershell完成的扫描器了，端口扫描器我们放在下一节来分析，我们这里最后看一个反弹shell的ps脚本,
同样在注释中详细解释了代码块的作用。
    function TcpShell{ 
    <#
    ​
    .DESCRIPTION
    一个简单的Shell连接工具, 支持正向与反向
    ​
    .PARAMETER IPAddress
    Ip地址参数
    ​