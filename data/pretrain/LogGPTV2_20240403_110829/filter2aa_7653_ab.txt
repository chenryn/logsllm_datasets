3. lsass.exe 将明文密码计算得到 NT Hash（不考虑LM）。
4. 之后会将用户名和密码计算得到的 NT Hash 拿到 SAM 数据库去查找比对。
### DPAPI
从 Windows 2000 开始，Microsoft 随操作系统一起提供了一种特殊的数据保护接口，称为 Data Protection Application Programming Interface（DPAPI）。其分别提供了加密函数 CryptProtectData 与解密函数 CryptUnprotectData 以用作敏感信息的加密解密。
主要用于保护加密的数据，常见的应用如：
- EFS文件加密
- 存储无线连接密码
- Windows Credential Manager
- Internet Explorer
- Outlook
- Skype
- Windows CardSpace
- Windows Vault
- Google Chrome
**Master Key**
64 字节，用于解密 DPAPI blob，使用用户登录密码、SID 和 16 字节随机数加密后保存在 Master Key file 中
**Master Key file**
二进制文件，可使用用户登录密码对其解密，获得 Master Key
分为两种：
- 用户 Master Key file，位于 %APPDATA%\Microsoft\Protect\%SID%
- 系统 Master Key file，位于 %WINDIR%\System32\Microsoft\Protect\S-1-5-18\User
存放密钥的文件则被称之为 Master Key Files，其路径一般为 `%APPDATA%/Microsoft/Protect/%SID%` 。而这个文件中的密钥实际上是随机 64 位字节码经过用户密码等信息的加密后的密文，所以只需要有用户的明文密码 / Ntlm/Sha1 就可以还原了。
**Preferred 文件**
位于 Master Key file 的同级目录，显示当前系统正在使用的 MasterKey 及其过期时间，默认 90 天有效期
为了安全考虑，Master Key 是每 90 天就会更新一次，而 Preferred 文件中记录了目前使用的是哪一个 Master Key 文件以及其过期时间，这里这个文件并没有经过任何加密
格式如下：
```
typedef struct _tagPreferredMasterKey
{
	GUID guidMasterKey;
	FILETIME ftCreated;
} PREFERREDMASTERKEY, *PPREFERREDMASTERKEY;
```
例如
前16字节 E3 A5 DD 1F E8 E7 24 4D 93 37 FC C7 71 F1 E1 84 对应 guid，调整格式后，对应文件为
1FDDA5E3-E7E8-4D24-9337-FCC771F1E184
后8字节 A0 59 47 CD 9A 23 D7 01 对应过期时间
使用 3gstudent 文章中分享的解析方法如下:
```c
#include 
int main(void)
{
	FILE *fp;
	unsigned char buf[24];
    fopen_s(&fp,"Preferred","rb");
    fread(buf,1,24,fp);
	printf("Data: ");
	for(int i=0;i<24;i++)
	{
		printf("%02x",buf[i]);
	}
	fclose(fp);
	printf("\nguidMasterKey: %02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x\n",buf[3],buf[2],buf[1],buf[0],buf[5],buf[4],buf[7],buf[6],buf[8],buf[9],buf[10],buf[11],buf[12],buf[13],buf[14],buf[15]);
	char lowDateTime[9],highDateTime[9];
	sprintf_s(lowDateTime,9,"%02X%02X%02X%02X",buf[19],buf[18],buf[17],buf[16]);
	sprintf_s(highDateTime,9,"%02X%02X%02X%02X",buf[23],buf[22],buf[21],buf[20]);
	printf("dwLowDateTime:%s\n",lowDateTime);
	printf("dwHighDateTime:%s\n",highDateTime);
	FILETIME        ftUTC;
	SYSTEMTIME      stUTC2;
	sscanf_s(lowDateTime,"%x",&ftUTC.dwLowDateTime);
	sscanf_s(highDateTime,"%x",&ftUTC.dwHighDateTime);
	FileTimeToSystemTime(&ftUTC, &stUTC2);
	printf("");
	printf("Expiry time: %d-%d-%d %d:%d:%d\n", stUTC2.wYear, stUTC2.wMonth, stUTC2.wDay, stUTC2.wHour, stUTC2.wMinute, stUTC2.wSecond);
	return 0;
}
```
**CREDHIST**
此外，在 `%APPDATA%/Microsoft/Protect/` 目录下还有一个 CREDHIST 文件。由于 Master Key 的还原与用户密码相关，所以需要保存用户的历史密码信息以确保接口的正常使用，而此文件中就保存了用户的历史密码（Ntlm hash/sha1 hash）。
---
## 网络认证
在内网渗透中，经常遇到工作组环境，而工作组环境是一个逻辑上的网络环境(工作区)，隶属于工作组的机器之间无法互相建立一个完美的信任机制，只能点对点，是比较落后的认证方式，没有信托机构。
假设 A 主机与 B 主机属于同一个工作组环境，A 想访问 B 主机上的资料，需要将一个存在于 B 主机上的账户凭证发送至 B 主机，经过认证才能够访问 B 主机上的资源。
这是我们接触比较多的 SMB 共享文件的案例，SMB 的默认端口是 445。
早期 SMB 协议在网络上传输明文口令。后来出现 LAN Manager Challenge/Response 验证机制，简称 LM，它很容易被破解，就又有了 NTLM 以及 Kerberos。
---
### LM
LM 与 NTLM 协议的认证机制相同，但是加密算法不同。
目前大多数的 Windows 都采用 NTLM 协议认证，LM 协议已经基本淘汰了。
---
### NTLM
**认证的应用**
在域环境下，可以使用 Kerberos 或者 NTLM 认证来实现对用户的身份认证。在很多企业的内部网络中(基本都是域环境)，都是使用 Kerberos认证或 NTLM 认证，在 Windows 2000 以后，在域环境下，Kerberos 是默认的认证方式。因为由于 NTLM 认证存在安全风险，所以用 Kerberos 认证的较多。Kerberos 较之 NTLM 更高效、更安全，同时认证过程也相对复杂。在非域环境下，一般都是使用 NTLM 进行认证。SMB 服务和很多 Web 程序都是使用 NTLM 来实现对用户的身份认证。
NTLM 并没有定义它所依赖的传输层协议。NTLM 消息的传输完全依赖于使用 NTLM 的上层协议来决定。所以说 NTLM 是一个嵌入式协议。
如果你自己写一个利用 NTLM SSP 的程序，那么在拿到 NTLM 消息后，你可以以任何你喜欢的方式将这些消息发送至服务端。比如通过 HTTP，TCP，或者任何其他类型的 7 层协议，或者你自己定义的协议。
**什么是 NTLM**
NTLM 是一种网络认证协议,以 NTLM Hash 作为凭证进行认证。NTLM Hash 长度为32位，由数字和字母组成,采用挑战/响应（Challenge/Response）的消息交换模式，
这个协议只支持 Windows.
NTLM 协议的认证过程分为三步：
- 协商 : 主要用于确认双方协议版本
- 质询 : 就是挑战（Challenge）/响应（Response）认证机制起作用的范畴
- 验证 : 验证主要是在质询完成后，验证结果，是认证的最后一步。
#### Challenge/Response
1. 客户端需要访问服务器的某个服务(前提是他得知道服务器的用户名和密码)，所以得进行身份认证。于是，客户端输入服务器的用户名和密码进行验证，客户端会缓存服务器密码的 NTLM-Hash 值。客户端发送 TYPE 1 Negotiate 协商消息去协商需要认证的主体，用户(服务器端的用户名)，机器以及需要使用的安全服务等等信息。
2. 服务端接收到客户端发送过来的 TYPE 1 消息，会读取其中的内容，并从中选择出自己所能接受的服务内容，加密等级，安全服务等等。然后传入 NTLM SSP，得到 NTLM_CHALLENGE 消息（被称为 TYPE 2 消息，Challenge 挑战消息），并将此 TYPE 2 消息发回给客户端。此TYPE 2消息中包含了一个由服务端生成的 16 位随机值，此随机值被称为 Challenge，服务器将该 Challenge 保存起来。
3. 客户端收到服务端返回的 TYPE 2 消息， 读取出服务端所支持的内容，并取出其中的随机值 Challenge，用缓存的服务器端密码的哈希值 NTLM-Hash 对其进行加密，得到 Net NTLM-Hash(加密后的 Challenge)，并且将 Net NTLM-Hash 封装到 NTLM_AUTH 消息中（被称为 TYPE 3 消息， Authenticate 认证消息），发往服务端。
4. 服务器在收到 Type3 的消息之后，用自己的密码的 NTLM-Hash 对 Challenge 进行加密，并比较自己计算出的 Net NTLM-Hash 认证消息和客户端发送的认证消息是否匹配。如果匹配，则证明客户端掌握了正确的密码，认证成功，否则认证失败。
**详细过程**