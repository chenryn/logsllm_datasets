# SpringBoot2.2.x 版本CPU增高BUG分析
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 一、发现问题
项目在上线之后，运行24小时之后CPU突然增高，导致不得不重启机器。
## 二、分析及定位问题
项目在上线前是经过压力测试，刚开始定位是QPS过大，通过增加机器。但结果并不是特别理想，始终会有几台机器增高。
###  项目环境
  * 测试机 1c2g
###  1、测试
通过jmeter对该机器接口进行压力测试，qps为90，cpu增高到40%持续没多久下降到10%，一直持续稳定。并未产生CPU过高的情况，该机器配置比正式环境要低4倍，第一步得出的结论应该不在接口上
###  2、更换项目中比较早期版本的插件及线程池
重新上线项目之后，运行1天之后，依然有2台机器的CPU持续增高，并且越往后增加越大
###  3、开始针对线上高CPU服务器排查
    #查看java的pid
    top  
    #查看pid下的占用高的tid 
    top -Hp pid  
    #打印tid16进制
    printf "%xn" tid  
    #查看栈 输出到xx.log
    jstack pid|grep -A 2000 tid的16进制 > xx.log
    #查看gc 打印每2000ms输出一次，共10次
    jstat -gcutil pid 2000 10
结论：栈信息基本都是RUN或TIME_WATING 并没有相关的死锁的线程，但是通过gc发现大量的YGC持续的增高，这时候考虑到可能堆的信息有异常
###  4、针对堆信息查看
    #查看堆
    jmap pid  
    jmap -heap pid  
    jmap -histo:live pid  
    ...
    #常用的是最后一个 加一个more 防止过多内容刷屏 
    jmap -histo:live pid|more
执行多次最后一个命令，发现一个队列在持续的增高，几百几百的增加并无然后减少的情况
          1:        111885      139385304  [Ljava.lang.Object;
       3:         10515       15412904  [I
       4:        142407       13450056  [C
       5:         13892        4170928  [B
       6:        135968        3263232  java.lang.String
       .....
      34:          6423         308304  java.util.HashMap
      35:         12459         299016  java.util.concurrent.ConcurrentLinkedQueue$Node
最后一行就是发现增长过快的队列，到此算是发现了一个比较有用的信息，回头就去分析代码。但依然没有什么结论，代码逻辑并不复杂也并未使用到该队列。
###  5、咨询大佬，建议通过火焰图定位某个阶段执行过程的消耗情况
    #开始安装火陷图插件
    #具体安装插件的过程，大家自行搜索，本文不具体描述如何安装火陷图
###  6、执行命令生成火陷图
通过上图，我们能直观的看到在MimeTypeUtils方法中，使用到了过多的这个队列，然后就直接去看源码了。目前官方已经修复了一版在2.2.6版本中（但是很不幸运，并没有完全修复）
下面是2.2.6版本修复一版的代码，去除了之前的一些没有意义判断,MimeTypeUtils.java文件
        private static class ConcurrentLruCache {
            private final int maxSize;
            private final ConcurrentLinkedQueue queue = new ConcurrentLinkedQueue<>();
            ....
            public V get(K key) {
                this.lock.readLock().lock();
                try {
                    if (this.queue.size()  next, pred = null;
          for (Node p = first(); p != null; pred = p, p = next) {
            boolean removed = false;
            E item = p.item;
            if (item != null) {
              if (!o.equals(item)) {