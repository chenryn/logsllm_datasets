When time is in a speciﬁc range according to the policy.
Type
Port Status
Location
Time
User Behavior When a user changes Settings, Permissions, foreground app, etc.
Device
Role
Device Mode Device switches to Normal/Sleep/AirPlane mode.
When the device goes into power down/up, recovery state.
User’s role changes (guest, employee, etc.).
Target
:= APP (APP_ID | APP_NAME | ALL) |
APP_GRP (TRUST | THIRD_PARTY | UNKNOWN)
| DEVICE (DEV_ID | GROUP |
UNATHORIZED | ALL)
:= OF_MATCH
Match
Predicate := {Event + Condition}
Event
:= PORT_STAT | LOC | TIME |
USR_ROLE | DEV_MODE | CNTRL_STATE |
PKT | RATE
Condition := {Operator + Value}
Value
Actions
Control
:= DECIMAL_NUMBER
:= Control | Manage | Trigger
:= ALLOW | DENY |
{REDIRECT | MIRROR | QUARANTINE} +
ADDR (IP | CONTROLLER)
Manage
Trigger
:= REPORT | OF_ACTION
:= IMMEDIATE | PERIODIC + Value
Fig. 10: Syntax for High-Level Policy Language
sent by PBS-DROID are delivered to OF Channel
in the
controller ﬁrst. It then parses standard OpenFlow and PBS
messages, and passes them to the corresponding manager; i.e.,
the former is delivered to Flow Manager and the latter to Policy
Manager. In case of new ﬂow request messages, Flow Manager
sends them to Policy Manager. Then, the messages (OpenFlow
statistics, PBS Report) are passed to Statistics/Context Trigger
for further monitoring, and other messages go through BYOD
applications. Apart from the message ﬂow, applications also
have access to policies via the Northbound APIs. The inter-
faces available to administrator/app developers enable an easy
way of development to handle BYOD policy enforcement.
High-level Policy & Flow Management. The Northbound
APIs available to the controller-application provide an addi-
tional high-level abstract language, shown in Figure 10. This
policy language facilitates the network administrative policy
assignment in a simpler fashion, requiring signiﬁcantly less
familiarity with SDN/OpenFlow concepts in order to manage
the network. The language serves as our BYOD manage-
ment extension to the existing SDN controller. Our language
contains four basic elements, i.e., Target, Match, Predicate,
and Actions. Target deﬁnes the speciﬁc Android application,
device, or groups which the policy targets. If APP/DEVICE
is speciﬁed as ALL, it indicates the policy is applied to all
applications/devices as a global property. Match deﬁnes a ﬁlter
to match and associate a ﬂow with a policy. Predicate describes
a list of device context events (shown in Table II) and condition
for which the policy should react, such as time or location.
Lastly, Actions specify access control, management decision,
and trigger option the policy should enforce if the predicate is
satisﬁed, e.g., modifying a ﬂow rule to limit device access to
a network resource.
8
nl_dst=66.220.144.0
USR_ROLE=Business,TIME ge 0800,TIME le 1800
REDIRECT=CONTROLLER
REPORT
IMMEDIATE
Fig. 11: Policy Example 1
*
TIME ge 0800,TIME le 1800
REDIRECT=123.45.67.8
OF_ACTION(set_vlan_id)=UNAUTH_VID
IMMEDIATE
Fig. 12: Policy Example 2
Figure 11 illustrates a use case of our policy language. The
policy is deﬁned via XML and stored in the policy database.
The example policy (Figure 11) implies that the administrator
disallows an employee access to Facebook during work hours.
Another example of a policy in practice is BYOD with NAC
(Network Access Control). The enterprise may attempt a com-
bination of the existing/outsourced NAC solution and MDM
to apply traditional network policies to new BYOD devices.
In such case, NAC can be used to check for the presence of
an MDM agent. Endpoints that do not have the agent can be
blocked or granted limited access (e.g., Internet access only).
NAC can ensure that employees must comply with MDM
policies if they wish to gain access to the corporate network.
Building operational processes (e.g., automating mobile device
registration and granting access) is key to scaling a BYOD
solution. This approach can be easily implemented with our
system in an incorporated way. The authentication is handled
during the initial setup process (Figure 14) and network access
control is automatically handled by BYOD applications devel-
oped for the enterprise. The example of the policy in Figure 12
shows a similar scenario that if a user’s device is not registered,
all packets are quarantined towards a middlebox via different
VLAN3. More complex management is possible by utilizing
multiple policies working in conjunction. By leveraging device
context information, a static policy, or a set of policies, can
3Use cases in Section IV show more BYOD-speciﬁc policies in detail.
*
LOC = Building A
ALLOW
REPORT
IMMEDIATE
*
LOC = Building B
DENY
REPORT
IMMEDIATE
Fig. 13: Policy Example 3
describe device access controls dynamically, such as when the
device moves from one physical location to another in the
enterprise. Figure 13 illustrates this example. We specify two
policies for devices which fall into a hypothetical accounting
group. This group of devices is allowed full network access
in the location of building a, and no network access in the
location of building b. This example demonstrates the conﬁg-
uration potential and extensibility of our policy language. The
policy can be easily adapted to other enterprise scenarios by
administrators, with the key advantage of not requiring SDN
speciﬁc domain expertise, or PBS CONTROLLER application
source programming (e.g., Java).
functions
upon
the
PBS MODIFY POLICY,
PBS Protocol. As shown in Table I, the PBS protocol
consists of four new messages: PBS REGISTER POLICY,
PBS REMOVE POLICY,
and
is designed to provide
PBS REPORT. The PBS protocol
PBS-deﬁned
existing OpenFlow
protocol. Types of PBS messages are newly added as
an extension. The protocol format is included in the payload
of OpenFlow messages. Figure 14 depicts the sequence
diagram that describes the procedure of communication via
OpenFlow and PBS messages between PBS-DROID and
PBS CONTROLLER. PBS-DROID and PBS CONTROLLER
establish a secure connection with each other using SSL/TLS
via the standard OpenFlow handshake. In this procedure,
the difference from the OpenFlow handshake is that an
OFPT FEATURES REPLY message contains mobile device
information such as a unique device ID and installed
app information. Namely, all
the OpenFlow messages are
tailored to PBS, not to the standard OpenFlow speciﬁcation
(i.e.,
PBS-
DROID then sends a PBS REPORT message with user
further
context
for
authentication. Next, PBS CONTROLLER installs
initial
proactive ﬂow rules and policies including global properties
via OFPT FLOWMOD and PBS REGISTER POLICY.
Once the initial setup is completed, PBS-DROID sends
an OFPT PACKET IN message to PBS CONTROLLER for
reactive policy management. In the mean time, OpenFlow (i.e.,
controller-to-switch, asynchronous, and asymmetric messages)
network-oriented
information as
shown in Table II
speciﬁcation).
traditional
Fig. 14: Communication via PBS Protocols
and PBS messages (i.e., register, modify, remove, and report
messages) can be sent to the controller simultaneously for
further management.
F. Optimization Schemes
A signiﬁcant challenge in Android devices is limited re-
sources. In this section, we discuss how PBS-DROID mini-
mizes the overhead while running on mobile devices.
Message PushDown. Due to our empirical experience with
SDN, we found that the message handling overhead (e.g.,
processing frequent new-ﬂow requests and periodic statistical
messages) greatly throttles the performance of both a network
device and the controller. A simple mitigation for the overhead
can be addressed by controller applications by increasing
the ﬂow timeout and statistics request period. However, a
high timeout period can cause the device ﬂow table quickly
occupied to the limited size. A typical limitation in SDN
requires the application or controller to choose between a time
trade-off in ﬂow rule persistence in the table by adjusting the
request period to an optimal request period. We mitigate this
trade-off by utilizing the policy table to specify a more detailed
ﬂow timeout value which alleviates the burden of specifying
a trade-off optimal request period. For example, the device
context such as location or time can automatically remove a
rule when it is no longer needed, thus we do not need to guess
how long such a rule is relevant in the device table.
Two-tiered Programming Model. Although the message
pushdown scheme reduces the burden of handling new ﬂow
requests using device context information, the administrator
may require detailed, active monitoring of device network
information. This entails sending ﬂow information to the
controller in real time, undermining our previous pushdown
optimization. To mitigate this, we utilize minimum intelligence
to the device, which can react/program upon device events in
9
PBS-DroidFlow ManagerPolicy ManagerOF Channel HandlerTCP/TLS SetupOFPT_HELLOOFPT_HELLOConnection EstablishedOFPT_FEATURES_REQUESTOFPT_FEATURES_REPLY(Device ID, Capabilities, Actions, Ports)Ver.Ver.OFPT_FLOWMOD (proactive flow rules) PBS_REGISTER_POLICY (proactive policies)PBS_REPORTPBS_REPORTOFPT_FLOWMOD (Reactive flow rules) PBS_REGISTER_POLICY (Reactive policies)PBS_DEVICE_INFO (User Contexts)AuthenticationOF Messages (controller-to-switch, asynchronous, symmetric)PBS Messages (modify, register, remove, report)PktOFPT_PACKET_INInitial Setup Completereal-time to efﬁciently reduce communication overhead and
save processing overhead in the controller. Different from
the existing SDN switch software which has no conditional
logic, PBS-DROID maintains policy engine in the management
plane, where the policy table is managed. The policy language,
as shown in Figure 10, enables the administrator to deﬁne
complex predicates/conditions varying from user context to
packet statistics in conjunctive forms. Also, our actions support
OpenFlow actions and ﬂow modiﬁcation schemes as well as
BYOD security-related actions. Thereby, with low interaction
with PBS CONTROLLER the ﬂow can be efﬁciently managed
inside the device.
Tailor to Mobile Device. When it comes to the mobile
device environment, simple adoption of existing SDN software
does not ﬁt well on the device. This is because the SDN
speciﬁcation targets traditional network devices and operations,
not
the mobile device environment. For example, periodic
operations such as port monitoring, reconﬁguration checking,
and LLDP (Link Layer Discovery Protocol), speciﬁed by
OpenFlow, can adversely affect the battery life and band-
width available to mobile devices, which is not a concern
in traditional network switches. However, many of the pe-
riodic operations (e.g., reconﬁguration checking, LLDP) do
not impact the basic functionality of PBS-DROID. Rather,
those operations are not required for BYOD contexts. Also,
operations dedicated merely to traditional networks can be
ruled out or tailored to the mobile device. For instance,
emergent ﬂow and fail-open/over mode are not required for
PBS. The operation of rate limit is redesigned to work as
a conditional rate limit by policy. Thus, we do not need the
full set of the speciﬁcation functionalities. We remove such
periodic operations and facilitate an event-driven approach to
improve PBS-DROID performance. For instance, the userspace
daemon does not check port status and statistics in a while
loop; rather, the status checking is notiﬁed in an event-driven
fashion through a netlink from the Arbiter and a statistics
message is sent to the controller only when a policy action
is designated as Report.
Short-circuit Operation. A performance bottleneck of
PBS-DROID is drawn from the packet processing pipeline.
The pipeline processes a packet from an app as such: (i) a
mapping of application ID to a virtual interface, (ii) redirection
of the packet to the virtual interface, (iii) a ﬂow table lookup
(further sk buff copy and communication overhead in case
of miss), and (iv) a policy lookup. As deﬁned in Figure 10,
our policy language allows the administrator to deﬁne global
properties that can apply to all devices or all applications. We
note that pipeline performance can be optimized by checking
global properties early in the pipeline. The short-circuit op-
eration thus checks for such bulk cases, allowing a skip of
subsequent pipeline steps where appropriate. This optimizes
the performance and saves CPU cycles, which is important to
the mobile device battery.
G. Implementation
Our prototype implementation of PBS CONTROLLER is
built as an extension to Floodlight v1.0. The extension runs
as Floodlight modules without
impacting existing Flood-
light components and provides northbound APIs to BYOD
controller-applications we author. Although we currently only
support Floodlight, it is not difﬁcult to extend PBS CON-
TROLLER to other SDN controllers, which we aim to address
in future work. PBS-DROID currently supports OpenFlow 1.0
and above for a secure communication between PBS-DROID
and PBS CONTROLLER. This can also be extended in the
future through the use of additional controller implementations.
Our prototype implementation of PBS-DROID leverages an
existing software switch, Openvswitch, which consists of three
core components: (i) ovs-vswitchd, (ii) datapath, and (iii)
ovsdb. ovs-vswitchd is a userspace daemon that establishes
a secure communication channel to the controller and inter-
communicates with the kernel datapath. The userspace datap-
ath maintains the full ﬂow table and the kernel datapath keeps
a cache for microﬂow and megaﬂow for lookup speedup. ovsdb