### Optional Optimization for Programs Without Global Object Properties

An optional optimization exists for programs that do not add properties to the global object and instead refer to them as variables. This optimization avoids the use of `with` and significantly improves performance due to Just-In-Time (JIT) optimization (see Section 4.2).

#### Lockout Variables

Lockout variables (as shown in Listing 3) are local variables with the same names as top-level APIs, such as `Object`, `Array`, and `window`. These variables ensure transparency if the fields exposed via `with` are deleted. Without these lockout variables, the original APIs would be exposed. However, this exposure does not compromise security or isolation because all API access methods—field access and function calls—are mediated by the monitor runtime. Any operations on native APIs that violate the boxing invariant will fail with an exception, which, while inconvenient, is not a security vulnerability. This also handles cases where the browser API surface is larger than expected by the inliner.

### Inlining Algorithm Overview

The inlining algorithm can be understood in terms of a traditional compiler, which includes a runtime system (monitor core and API facades), a front-end, conversion to intermediate languages (desugaring), static analysis, and code generation.

#### Desugaring

We slightly simplify the program to establish the box invariant. Specifically, we rewrite function statements into function expressions and decouple variable declarations from their initialization. Both transformations follow the hoisting procedure defined by the ECMAScript specification. We avoid more aggressive desugaring to keep the instrumented program similar to the original and to address the challenges of correctly desugaring to a small core (see Section 5).

#### Static Analysis

We perform control flow and exception analysis to determine the control dependence regions of branch points. We use the definition of control dependence regions from Barthe et al. [8]. The region inference algorithm works with intraprocedural control-flow graphs and is built on top of [43]. The graphs are at expression granularity. For each region, we identify the guards, entry point, and exit points. These are used to guide the instrumentation, inserting operations that manage the PC label set (PCLS): enter at the entry, exit at the exits, and update/push at the guards.

These operations allow tracking at the expression level by interleaving stack operations with subexpression evaluation. For example, `update` takes and returns a box, in addition to updating the guard label, and `exit` can return the argument box in addition to discarding the PCLS record for the region.

Our control-flow analysis is intra-procedural because it is generally impossible to construct a precise call graph for JavaScript programs. Instead, we use a dynamic approximation. We know that the control-dependence region of the exception source extends to the end of the innermost `catch/finally` clause. This is a conservative approximation of the merge point of any exception source within the `try` block. To handle this, we introduce two new operations: `remember(id)` and `restore(id)`, where `id` is a unique numeric identifier for each `try-catch` statement. These operations save and restore the state of PCLS, allowing us to transform a `try-catch-finally` statement as shown below:

```javascript
try { remember(); /* try body */ }
catch (x) { /* catch body */ }
finally { restore(); /* finally body */ }
```

#### Program Instrumentation

Figure 3 shows the instrumentation algorithm. We provide a few transformations to illustrate what an instrumented program looks like. Listing 4 contains a `while` statement with a variable assignment, infix expressions, and a conditional expression. The transformed version (Listing 5) handles control flow within expressions and assignments using the `push` and `pop` monitor functions, which pass values and affect the level stack. Listing 6 shows function declarations and calls, transformed to Listing 7.

Rewriting rules, defined as syntax- and annotation-directed translations, are presented in Tables 1 and 2. The rules should be read as "if an AST node matches the production and has, at least, the annotation, then replace it with the output." Italic denotes arbitrary sub-statements or expressions. The rules assume rewriting is done in a bottom-up fashion, so the sub-expressions/statements are already rewritten.

#### Accessor Properties

Getters and setters are supported by the monitor. To enforce the boxing invariant, we do not rely on native accessors but emulate them explicitly. This allows binding `this` in getter and setter functions to the object box instead of the object. Refboxes are objects with fields `"t"`, `"g"`, and `"s"` that store the getter and setter functions, respectively. These functions are invoked in `readField` and `writeField` monitor operations. Refboxes are stored in properties that would have had accessors defined. The facade for `Object.defineProperty` handles the conversion between property descriptors and refboxes.

#### Eval Function

The `eval` function interprets a string as a JavaScript program. Precise tracking of information flows in dynamic code requires performing inlining before evaluation [38]. Previous work implemented the inliner in JavaScript [28, 54], which can be used in `eval` as well. Our inliner is implemented in Haskell. We support inlining of `eval`'d code with an inlining HTTP proxy server, sufficient for browser and proxy server deployment scenarios. For server-side deployment, the inliner needs to be added to the monitor core, which can be achieved using a compiler from Haskell to JavaScript [56].

#### Declassification and Upgrade

Another addition to the environment is the `declassify(e, c)` function, allowed in source programs to express policy. In the monitor, it downgrades the label on `e` to that of the channel `c` while enforcing robust declassification [41]: it is a violation if the PC level is higher than the initial label on `e`. The explicit label upgrade operation is also exposed in the API.

### Experiments

We aim to achieve practical yet sound information flow enforcement. The longstanding questions for NSU-based monitoring are whether it can achieve adequate permissiveness and performance without sacrificing soundness or transparency. While we do not claim to have the ultimate answer, we offer additional evidence that this approach is moving towards practicality.

For a conclusive permissiveness assessment, one needs to study existing applications and provide comprehensive policies that account for all legitimate flows. This is challenging due to the size and complexity of modern web applications. Therefore, we created our own mashups inspired by real-world examples to serve as case studies. These mashups include only the bare minimum to demonstrate interaction patterns and create possibilities for both legal and illegal information flow (IF).

We covered various programming idioms when implementing the mashups, such as attaching event handlers through HTML tags versus using `addEventListener` in JavaScript, different ways of mashing up content (using `IFrames` or script tags), and using inline scripts versus external scripts. Each example application has one security policy and multiple component versions, some conforming to the policy and others not.

#### Securing Mashup Applications

We focus on web applications with interesting IF policies, particularly mashups combining JS programs from different service providers on one page. From an IF perspective, mashups are the most interesting because the providers often distrust each other or have legal obligations not to disclose information to third parties, yet certain flows must be allowed for the application to function.

**Third-Party Payment Processor**: A malicious merchant page sends order details and the final price to the processor, which then sends payment information to the merchant.

**Advertisements**: An Internet radio service hosts ads from a ticket vendor. The ad script crawls the page and creates a new script tag with a URL containing keywords.

### Performance Benchmarks

| Suite | Benchmark | Mean Run-Time (Original) | Mean Run-Time (Monitored) | Optimized |
|-------|-----------|--------------------------|----------------------------|-----------|
| SunSpider 1.0.2 | Access Binary Trees | 0.0027s | - | Yes |
| SunSpider 1.0.2 | Access Fannkuch | 0.0532s | - | Yes |
| SunSpider 1.0.2 | Bitops 3 Bit Bits in Byte | 0.0043s | - | Yes |
| SunSpider 1.0.2 | Math partial sums | 0.0077s | - | Yes |
| Kraken 1.1 | JSON Parse Financial | 0.0645s | - | Yes |

This table provides a comparison of the mean run-time of the original and monitored benchmarks, indicating the effectiveness of the optimizations.