in Figure 4 – or bought from the creator or reseller for a ﬁxed
price. Kits offered in the latter category are often shared for
free (‘leaked’) afterwards to frustrate the seller.
The second approach to obtain phishing kits is to capture
them from suspected phishing domains. As will be explained
in Section 3.3, we crawl each suspected phishing domain and
when such a domain returns an open directory, we follow the
same methodology as Cova et al. [9], and search for .zip
ﬁles to ﬁnd new phishing kits that we then download automat-
ically. Note, we did not search by trying to guess the names
of popular phishing kit .zip ﬁles.
Fingerprinting kits We manually examined each phishing
kit and created ﬁngerprints based on the unique properties of
these kits. Both the ﬁle names, including the full path from the
root of the website, as well as strings found on the main page
of the website are used to derive this ﬁngerprint. For example,
uncommon ﬁle names are considered good candidates for a
ﬁngerprint. Next, we inspect the home page of the domain
to ﬁnd uncommon strings in the HTML source code. This
could be text shown to the victim, but also invisible HTML or
JavaScript code included on the page. These ﬁngerprints are
used by our crawler to detect the phishing kits deployed on
domains in the wild. An example of a phishing kit with the
corresponding ﬁngerprint is shown in Figure 5.
Figure 4: Example of a phishing kit offered on Telegram. This
vendor offers a phishing-page-for-hire for C75 per week with
templates for multiple Dutch banks included – a multipanel.
3.1 Phishing kit acquisition
We use two approaches to gather phishing kits that target
Dutch banking clients. First, we collect phishing kits on public
Telegram channels employing a so-called ‘snowball sampling’
approach. In addition, we automatically download kits from
open directories on crawled phishing domains. We explain
both approaches in the following paragraphs.
Telegram is an instant messenger application which allows
for secure communications on multiple platforms. The chat
application offers a wide variety of channel types, ranging
from public broadcast channels to secret chats with more se-
curity features. Encryption is applied to all messages, making
it difﬁcult to eavesdrop communications [46]. The ease of use
and the high sense of security on Telegram makes it popular
among criminals [29], and much easier to use compared to
dark net markets or underground forums. Criminals offer il-
legal drugs, weapons and phishing kits on public Telegram
channels, whereas direct messages on the platform allow them
to negotiate prices and make deals with potential customers
in private. An example of an advertisement can be found in
Figure 4, which shows a vendor offering a fake ING Betaalver-
zoek (payment request) decoy page which includes templates
for multiple dutch banks, a so-called multipanel as we have
explained in Section 2.1.
To gather phishing kits from Telegram, we manually in-
spected fraud-related Telegram channels, searched for shared
3760    30th USENIX Security Symposium
USENIX Association
3.2 Domain detector
Table 1: Features used to detect potential phishing websites
To discover new phishing domains, we leverage the fact that
78% of all phishing in 2020 is served over HTTPS – which
requires the use of X.509 certiﬁcates – according to the Anti-
Phishing Working group [16]. As soon as TLS certiﬁcates are
issued, they appear in the Transparency Logs Project [19] –
a project initiated by Google that collects all issued X.509
certiﬁcates. These logs are designed to audit the validity of
these certiﬁcates, but we use this continuous stream of certiﬁ-
cates to ﬁnd new potential phishing domains. The logs can
be monitored continuously using certstream – an intelli-
gence feed that shares real-time updates from the Certiﬁcate
Transparency Log network [6]. We thereby limit ourselves
to phishing domains within two of the ﬁve categories of the
taxonomy created by Oest et al. [38]. Namely, long, decep-
tive subdomains (type III) and deceptive top-level domains
(type IV). Since TLS certiﬁcates do not contain paths after
the domain name, we can not detect type I and II domains.
In addition, as IP addresses – which can be used within TLS
certiﬁcates – do not contain potentially malignant words, we
are unable to detect type V phishing domains.
We advance on the certstream Python library [7] to create
an application that monitors these logs for potential phish-
ing domains. Just like Lin et al. [28], we were inspired by
PhishCatcher [52], an open-source PoC demonstrating the
possibilities of ﬁnding phishing domains through Certiﬁcate
Transparency Logs. Our application analyzes all domains
present in each certiﬁcate and calculates a score based on the
features listed in Table 1, along with their assigned weighted
scores. The ﬁrst feature extracted is the use of Punycode
within the domain name. If that is found, we increase the
score with 30 and normalize the domain name for further
analysis by converting the Punycode symbols to their regular
counterparts. For instance, we convert xn-pypl-loac.com
to paypal.com, which we then use in further steps. We in-
crease the score with 20 for domains hosted on the 10 most
abused TLDs according to Spamhaus [41]. Afterwards, we
split this domain name into words and search for fake TLDs
(which could be part of domain names of targeted Dutch
banks, so .com, .nl, .me), brand names (of the 13 targeted
Dutch banks) and suspicious keywords (a list of 78 words
we made ourselves). We also identify typosquatted variations
of the latter two by searching for words with a Levenshtein
distance of 1 within the domain name. Additionally, we count
the number of hyphens and subdomains and inspect the cer-
tiﬁcate. The score for domains listed in a free certiﬁcate is
increased with 20. For domains included in a (paid) certiﬁcate
with Extended Validity, we decrease the score with 100, as
we do not expect attackers to pay and complete veriﬁcation
process. Finally, we disregard domains from Dutch banks and
a number of cloud service providers through a white list to
prevent false positives. When a threshold of 110 is reached,
the domain is marked as potentially malicious and added
Domain feature
Punycode usage
Suspicious TLDs
TLD as subdomain
Brand name
Typosquatted brand
Suspicious keyword
Hyphens count
Subdomain count
Free certiﬁcate
Fake www
Example & references
xn-pypl-loac.com [11, 30]
.xyz, .icu, .top [16, 41]
x.com.domain.net [16, 27]
brand.domain.net [16, 27]
paypa1.com [22, 27]
login, verify [27, 31]
brand-n--ame.net [18, 27]
sub.x.domain.net [27, 32]
Let’s Encrypt [16, 48]
wwwbrand.com [22]
Score
30
20
20
40-150
0-110
25-50
3x
3x
20
45
to the Elasticsearch index along with the extracted features
and the complete X.509 certiﬁcate. This threshold was deter-
mined after our testing period in June-August, 2020, and was
considered a good balance between true and false positives.
Do note that we aim to collect as many potential phishing
domains, while keeping the number of false positives manage-
able. This means that the threshold is not fully optimized to a
speciﬁc value. Ultimately, our domain crawler – explained in
the next section – is responsible for the actual identiﬁcation
of phishing domains.
3.3 Domain crawler
To ﬁnd traces of the gathered and ﬁngerprinted phishing kits,
we crawl each of the domains detected by our domain detec-
tor. Every hour, the crawler retrieves new possible phishing
domains from the Elasticsearch index and starts processing
them subsequently. First, it determines if the domain is on-
line, and if so, a FireFox browser controlled by the Selenium
WebDriver [43] is launched and visits the domain just like a
regular user would. All outgoing Web trafﬁc is routed through
a VPN connection to obfuscate our IP address and to easily
change our IP address when necessary. While visiting the Web
page, the IP address is resolved, HTML sources are stored,
and a screenshot is taken. The favicon is extracted and hashed
using an average hashing function [23], similar to the method
suggested by Geng et al. [13]. They showed that more than
83% of phishing websites employ fake favicons mimicking
the targeted brand or organization. Geng et al. created an al-
gorithm that is able to identify similar favicons by comparing
the gray values of pixel rows to detect the slightly changed
ones. Such hashing is thus perceptual, meaning that small
changes in the image result in only minor hash changes. We
used their methods to identify domains that do not mimic one
of the targeted brands by comparing the favicon’s hash to the
hashes of Dutch banks favicons (12 different brands, 24 icons
in total). A domain is omitted from further analysis when the
Hamming distance between the found hash and all the hashes
Dutch banks differs more than 10%. If no favicon is present,
USENIX Association
30th USENIX Security Symposium    3761
the domain is analyzed further. Another perceptual hash is
generated for the screenshot of the visited page. This hash is
used to spot any differences on the page since the last visit. If
the hash has not changed since the last visit, we skip further
analysis. Otherwise, we continue the analysis by retrieving
the WHOIS record, which reveals the registrar and the creation
date of the domain.
Finally, we start the phishing kit identiﬁcation phase. In
this phase, we adopt a three-layer approach. First, the crawler
starts with a search through the list of loaded resources
of the Web page. The format of the ﬁngerprints allows
us to search for partial ﬁle path matches within this list
of resources. Given the example in Figure 5, resource
https://domain.com/rabobank/background.png
matches ﬁngerprint rabobank/background.png. Secondly,
we perform a string-based search on the landing page
to ﬁnd matching string ﬁngerprints – e.g., if the page
includes the sentence from Figure 5, it will be detected.
To be able to detect phishing kit resources that are not
loaded on the landing page of the website, we perform
an extensive search for ﬁles and directories on the server
using wFuzz [33], which tries to HTTP GET all resources
included in the ﬁngerprint. Given the example in Figure 5,
resource adminpanel/the_manual.txt is not loaded on
the landing page of the website, but can be detected in this
third phase. To harden our detection method against minor
changes in phishing kits, we decided to classify a domain as
true phishing and identify it as being made with a particular
phishing kit when at least 10% of a ﬁngerprint is found
in one of these steps. We removed false positives due to
this low threshold from our dataset manually in Section 5.
Each domain that is inserted into the Elasticsearch index is
monitored on an hourly basis for a maximum of seven days
after the initial analysis.
3.4 Deployment and testing
Figure 6 gives an overview of the process of deploying our
measurement setup and data collection period. As elaborated
on in Section 3.1, the research started with an exploration on
Figure 6: Timeline of the creation and testing of our measure-
ment methodology
Telegram for phishing kits. These kits were dissected to create
ﬁngerprints, and then utilized to detect phishing activity on
domains. In parallel, we started building our measurement
system and as one can can see, we dedicated a signiﬁcant
portion of time on developing, reviewing, and upgrading our
deployment.
During our testing phase, newly found phishing kits from
open directories are constantly added manually to the crawler
application. During this same testing phase, we also identiﬁed
ﬁve new, unknown, phishing kits on domains labeled as poten-
tially malicious by our domain detector. However, the crawler
could not ﬁnd any matching ﬁngerprints and labeled these
domains as potentially phishing. After manual inspection,
we determined that these domains were indeed phishing, and
we created ﬁngerprints based on the characteristics of these
live domains, similar to what we did for the phishing kits in
Section 4.2. We completed this iterative process ﬁve times
during our testing period and grouped these phishing kits as
unknown. In September, 2020, we stopped testing, made no
further changes and started the data collection.
4 Phishing kit analysis
As discussed in Section 2, phishing campaigns hinge on suc-
cessful deployment, which can be made easy with a phish-
ing kit. To collect these kits, we manually inspected public
Telegram channels following a snowball sampling approach
and downloaded .zip ﬁles from open directories on potential
phishing websites. Our initial search in January, 2020, resulted
in a collection of 36 phishing kits discovered by manually
inspecting 50 public Telegram channels. In the following
months, we continued to monitor these channels periodically
and gathered yet another 10 phishing kits in May, 2020. Addi-
tionally, as explained in Section 3.3, we automatically down-
loaded .zip ﬁles from open directories on phishing websites,
which resulted in a collection of another 24 phishing kits
retrieved in the period July – December 2020. In total, we
gathered 70 different phishing kits, which we then manually
dissected. We analyzed their operating procedures and tech-
niques, came to understand the anatomy of a typical phishing
kit and clustered their features to discern phishing kit families.
The results of these analyses are outlined in the following
subsections.
4.1 Anatomy of a phishing kit
A phishing kit consists out of many ﬁles that together ensure
the functionality of the kit when deployed. Among these ﬁles,
we typically ﬁnd:
• Front-end pages impersonate the original login screens
of the targeted banks or can be categorized as decoy
landing pages (as explained in Section 2.1), which direct
the victims to fake login screens afterwards.
3762    30th USENIX Security Symposium
USENIX Association
20202021Exploration onTelegram for publiclyavailable phishing kitsData collectionFinal testing andmaking the tooldeployment readyDeductingfingerprintsfrom kitsJanFebMarAprMayJunJulAugSepOctNovDecJanFebTestingTool development• Resources are the ﬁles behind the front-end pages, such
as JavaScript, CSS and images. These can either be
hosted on the same server – hence included in the phish-
ing kit – or retrieved from the website of the targeted
organization.
• Manuals are often located in the root folder of the phish-
ing kit and include detailed instructions on how to setup
a VPS, acquire a TLS certiﬁcate and install the phishing
kit. These ﬁles often mention default login credentials
and a reference to the creator of the kit.
• Control panel, allowing the phisher to access the back-
end of the phishing kit, view the phished credentials, or
trigger new events for the victim. These panels range
from simple text ﬁles to extensive dashboards with live
visitor manipulations, statistics and third-party integra-
tions like Jabber – a XMPP instant message service.
• Anti-detection (cloaking) methods are present in some
kits to prevent detection by law enforcement agencies,
independent researchers like us or anti-phishing services
such as Google SafeBrowsing [20]. For example, set-
ting up strict IP blockades on the server-side in an
.htaccess ﬁle as discussed by Oest et al. [38] or by
redirecting certain visitors based on their IP address, ge-
olocation or User-Agent string through PHP scripts. This
can also be done client-side by utilizing JavaScript as
discussed by Invernizzi et al. [21].
4.2 Phishing kit families
Precise distinctions between the 70 phishing kits are difﬁ-
cult to make, due to the unstructured nature of phishing kit
development. During our manual dissection of the gathered
kits, we noticed that a large portion of these kits contained
copies, older versions or modiﬁcations of one another. Cre-