that it can accumulate money from several past transactions
Ty1 , . . . , Ty(cid:2). Let A1, . . . , A(cid:2) be the respective key pairs of
the recipients of those transactions. Then a multiple-input
transaction has the following form:
Tx = (y1, . . . , y(cid:2), B.pk , v, sigA1
(y1, B.pk , v), . . . ,
sigA(cid:2)
(y(cid:2), B.pk , v)),
and the result of it is that B.pk gets the amount v, provided
it is at most equal to the sum of the values of transactions
Ty1
, . . . , Ty(cid:2). This happens only if none of these transactions
has been redeemed before, and all the signatures are valid.
Moreover, each transaction can have a lock-time t that tells at
what time the transaction becomes ﬁnal (t can refer either to a
block index or to the real physical time). In this case we have:
Tx = (y1, . . . , y(cid:2), B.pk , v, t, sigA1
(y1, B.pk , v, t), . . . ,
sigA(cid:2)
(y(cid:2), B.pk , v, t)).
Such a transaction becomes valid only if time t is reached and
if none of the transactions Ty1
, . . . , Ty(cid:2) has been redeemed
by that time (otherwise it is discarded). Each transaction can
also have several outputs, which is a way to divide money
between several users or get a change. We ignore this fact in
our description since we will not use it in our protocols.
2) A more detailed version: The real Bitcoin system is
signiﬁcantly more sophisticated than what is described above.
First of all, there are some syntactic differences, the most
important for us being that each transaction Tx is identiﬁed
not by its index, but by its hash H(Tx). Hence, from now on
we will assume that x = H(Tx).
The main difference is, however, that in the real Bitcoin
the users have much more ﬂexibility in deﬁning the condition
on how the transaction Tx can be redeemed. Consider for
a moment the simplest transactions where there is just one
input and no time-locks. Recall that in the simpliﬁed system
described above, in order to redeem a transaction the recipient
A.pk had to produce another transaction Tx signed with his
private key A.sk. In the real Bitcoin this is generalized as
follows: each transaction Ty comes with a description of
a function (output-script) πy whose output is Boolean. The
transaction Tx redeeming the transaction Ty is valid if πy
evaluates to true on input Tx. Of course, one example of
πy is a function that treats Tx as a pair (a message mx,
a signature σx), and checks if σx is a valid signature on
mx with respect to the public key A.pk. However, much
more general functions πy are possible. Going further into
details, a transaction looks as follows: Tx = (y, πx, v, σx),
where [Tx] = (y, πx, v) is called the body9 of Tx and σx
is a “witness” that is used to make the script πy evaluate
to true on Tx (in the simplest case σx is a signature on
[Tx]). The scripts are written in the Bitcoin scripting language,
which is a stack based, not Turing-complete language (there
are no loops in it). It provides basic arithmetical operations
9In the original Bitcoin documentation this is called “simpliﬁed Tx”. We
have chosen to rename it to “body” since we ﬁnd the original terminology
slightly misleading.
on numbers, operations on stack, if-then-else statements and
some cryptographic functions like calculating hash function or
verifying a signature. The generalization to the multiple-input
transactions with time-locks is straightforward: a transaction
has a form:
Tx = (y1, . . . , y(cid:2), πx, v, t, σ1, . . . , σ(cid:2)),
is equal
to (y1, . . . , y(cid:2), πx, v, t), and
where the body [Tx]
is valid if (1) time t is reached, (2) every πi([Tx], σi)
it
evaluates to true, where each πi is the output script of the
transaction Tyi, and (3) none of these transactions has been
redeemed before. We will present the transactions as boxes.
The redeeming of transactions will be indicated with arrows
(the arrows will be labelled with the transaction values). For
example a transaction Tx = (y1, y2, πx, v, t, σ1, σ2) will be
represented as:
Ty1
v1 B
Tx(in: Ty1 , Ty2 )
in-script2: σ2
in-script1: σ1
out-script(body, arg):
πx(body, arg)
val: v B
tlock: t
Ty2
v2 B
v B
The transactions where the input script
is a signature,
and the output script is a veriﬁcation algorithm are the most
common type of transactions. We will call them standard
transactions, and the address against which the veriﬁcation
is done will be called the recipient of a transaction. Currently
some miners accept only such transactions. However, there
exist other ones that do accept the non-standard (also called
strange) transactions, one example being a big mining pool10
called Eligius (that mines a new block on average once per
hour). We also believe that in the future accepting the general
transactions will become standard, maybe at a cost of a slightly
increased fee. This is important for our applications since our
protocols rely heavily on the extended form of transactions.
B. Security Model
To reason formally about the security we need to describe
the attack model that corresponds to the current Bitcoin sys-
tem. We assume that the parties are connected by an insecure
channel and have access to the Bitcoin chain. Let us discuss
these two assumptions in detail. First, recall that our protocol
should allow any pair of users on the internet to engage in a
protocol. Hence, we cannot assume that there is any secure
connection between the parties (as this would require that
they can verify their identity, which obviously is impossible in
general), and therefore any type of a man-in-the middle attack
is possible.
The only “trusted component” in the system is the Bitcoin
chain. For the sake of simplicity in our model we will ignore
the implementation details of it, and simply assume that the
parties have access to a trusted third party denoted Ledger,
10Mining pools are coalitions of miners that perform their work jointly and
share the proﬁts.
448
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:33 UTC from IEEE Xplore.  Restrictions apply. 
whose contents is publicly available. One very important aspect
that needs to be addressed are the security properties of the
communication channel between the parties and the Ledger.
Firstly, it is completely reasonable to assume that the parties
can verify Ledger’s authenticity. In other words: each party
can access the current contents of the Ledger. In particular, the
users can post transactions on the Ledger. After a transaction
is posted it appears on the Ledger (provided it
is valid),
however it may happen not immediately, and some delay is
possible. There is an upper bound maxLedger on this delay.
This corresponds to an assumption that sooner or later every
transaction will appear in some Bitcoin block. We use this
assumption very mildly and e.g. maxLedger = 1 day is also ok
for us (the only price for this is that in such case we have
to allow the adversary to delay the termination of the protocol
for time O(maxLedger)). Each transaction posted on the Ledger
has a time stamp that refers to the moment when it appeared
on the Ledger.
What is a bit less obvious is how to deﬁne privacy of the
communication between the parties and the Ledger, especially
the question of the privacy of the writing procedure. More
precisely, the problem is that it is completely unreasonable to
assume that a transaction is secret until it appears on the Ledger
(since the transactions are broadcast between the nodes of the
network). Hence we do not assume it. This actually poses an
additional challenge in designing the protocols because of the
problem of the malleability11 of the transactions. Let us explain
it now. Recall that the transactions are referred to by their
hashes. Suppose a party P creates a transaction T and, before
(cid:3) a
posting it on the Ledger, obtains from some other party P
transaction T (cid:3) that redeems T (e.g.: T (cid:3) may be time-locked and
(cid:3) misbehaves). Obviously T (cid:3) needs
serve P to redeem T if P
to contain (in the signed body) a hash H(T ) of T . However,
(cid:3))
if now P posts T then an adversary (allied with malicious P
is able to produce another transaction ˆT whose semantics is
the same as T , but whose hash is different (this can be done,
e.g., by adding some dummy instructions to the input scripts
of T ). The adversary can now post ˆT on the Ledger and, if he
is lucky, ˆT will appear on the Ledger instead of T ! In this case
T (cid:3) will be invalid, so P may lose the money. It is possible that
in the future versions of the Bitcoin system this issue will be
addressed and the transactions will not be malleable. In Section
V we propose a scheme that is secure under the assumption
that the communication between the parties and the Ledger
is private. We would like to stress that our main schemes
(Section III and IV) do not not assume non-malleability of
the transactions, and are secure even if the adversary obtains
full information on the transactions before they appear on the
Ledger.
We do not need to assume any privacy of the reading
procedure, i.e. each party accesses pattern to Ledger can be
publicly known. We assume that the parties have access to a
perfect clock and that their internal computation takes no time.
The communication between the parties also takes no time,
unless the adversary delays it. These assumptions are made to
keep the model as simple as possible, and the security of our
protocols does not depend on these assumptions. In particular
we assume that the network is asynchronous and our protocols
are also secure if the communication takes some small amount
11See en.bitcoin.it/wiki/Transaction Malleability.
of time. For simplicity we also assume that the transaction
fees are zero. The extension to non-zero transaction fees is
discussed in Section. VI.
III. BITCOIN-BASED TIMED COMMITMENT SCHEME
We
start with constructing a Bitcoin-based timed-
commitment scheme [11], [27]. Recall that a commitment
scheme [9], [12] consists of two phases: the commitment phase
Commit and the opening phase Open. Typically a commit-
ment scheme is executed between two parties: a committer
C and a recipient. To be more general we will assume that
there are n recipients, denoted P1, . . . , Pn. The committer
starts the protocol with some secret value x. This value will
become known to every recipient after the opening phase
is executed. Informally, we require that, if the committer is
honest, then before the opening phase started, the adversary
has no information about x (this property is called “hiding”).
On the other hand, every honest recipient can be sure that,
no matter how a malicious sender behaves, the commitment
can be open in exactly one way, i.e. it is impossible for the
committer to “change his mind” and open with some x(cid:3) (cid:7)= x.
This property is called “binding”. Although incredibly useful
in many applications, the standard commitment schemes suffer
from the following problem: there is no way to force the
committer to reveal his secret x, and, in particular, if he aborts
before the Open phase starts then x remains secret.
Bitcoin offers an attractive way to deal with this problem.
Namely: using the Bitcoin system one can force the committer
to back his commitment with some money, called the deposit,
that will be given to the other parties if he refuses to open the
commitment within some time t.
1 , . . . , U C
We now sketch the deﬁnition of a Bitcoin-based commit-
ment scheme. First, assume that before the protocol starts
the Ledger contains n unredeemed standard transactions
U C
n that can be redeemed with a key known only
to C, each having value d B (for some parameter d). In fact,
in real life it would be enough to have just one transaction,
that would later be “split” inside of the protocol. This would,
however, force us to use the multiple-output transactions which
we want to avoid, in order not to additionally complicate the
description of the system.
The protocol is denoted CS(C, d, t, s) and it consists of two
phases: the commitment phase, denoted CS.Commit(C, d, t, s)
(where s contains the message to which C commits and some
randomness) and the opening phase CS.Open(C, d, t, s). The
honest committer always opens his commitment by time t. In
this case he gets back his money, i.e. the Ledger consists of
standard transactions that can be redeemed with a key known
only to him, whose total value12 is (d · n) B.
The security deﬁnition in the standard commitment
scheme: assuming that the committer is honest, the adversary
does not learn any signiﬁcant information about x before the
opening phase, and each honest party can be sure that there is
at most one value x that the committer can open in the opening
phase. Each recipient can also abort the commitment phase
(which happens if he discovers that the Committer is cheating,
12In case of non-zero transaction fees this value can be decreased by these
fees. This remark applies also to the amounts d redeemed by the recipients.
449
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:33 UTC from IEEE Xplore.  Restrictions apply. 
d B
Commit i(in: U C
i )
in-script: sig (cid:2)C
([Commit i])
out-script(body, σ1, σ2, x):
(H(x) = h ∧ ver (cid:2)C
(body, σ1) ∧ ver (cid:2)Pi
(ver (cid:2)C
val: d B
(body, σ1))∨
(body, σ2))
d B
Open i(in: Commit i)
in-script:
([Open i]), ⊥, s
sig (cid:2)C
out-script(body, σ):
ver (cid:2)C
val: d B
(body, σ)
d B
d B
in-script:
([PayDeposit i]), sig (cid:2)Pi
sig (cid:2)C
out-script(body, σ): ver (cid:2)Pi
val: d B
tlock: t
PayDeposit i(in: Commit i)
([PayDeposit i]), ⊥
(body, σ)
d B
1) The key pair of C is (cid:2)C and the key pair of each Pi is (cid:2)Pi.
2) The Ledger contains n unredeemed transactions U C
Pre-condition:
n, which can be redeemed with key (cid:2)C, each having value d B.
1 , . . . , U C
The CS.Commit(C, d, t, s) phase
3) The Committer C computes h = H(s). He sends to the Ledger the transactions Commit 1, . . . , Commit n. This obviously means that
4) If within time maxLedger some of the Commit i transactions does not appear on the Ledger, or if they look incorrect (e.g. they differ in
he reveals h, as it is a part of each Commit i.
the h value) then the parties abort.
5) The Committer C creates the bodies of the transactions PayDeposit 1, . . . , PayDeposit n, signs them and for all i sends the signed body
[PayDeposit i] to Pi. If an appropriate transaction does not arrive to Pi, then he halts.
6) The Committer C sends to the Ledger the transactions Open 1, . . . , Open n, what reveals the secret s.
7) If within time t the transaction Open i does not appear on the Ledger then Pi signs and sends the transaction PayDeposit i to the Ledger
and earns d B.
The CS.Open(C, d, t, s) phase
Fig. 1. The CS protocol. The scripts’ arguments, which are omitted are denoted by ⊥.
or if the adversary disturbs the communication). However,
there is one additional security guarantee: if the committer did