在Frida的帮助下，我们可以通过覆盖它们使所有这些方法全部返回false，这一点我们已经在第一篇中介绍过了。但是，当一个函数由于检测到设备已经取得了root权限而返回true时，结果会怎样呢？
正如我们在MainActivity函数中看到的那样，它会打开一个对话框。此外，它还会设置一个onClickListener，当我们按下OK按钮时就会触发它：
    alertDialog.setButton(-3, (CharSequence)"OK", (DialogInterface.OnClickListener)new b(this));
这个onClickListener的实现代码如下所示：
    package sg.vantagepoint.uncrackable1;
    class b implements android.content.DialogInterface$OnClickListener {
        final sg.vantagepoint.uncrackable1.MainActivity a;
        b(sg.vantagepoint.uncrackable1.MainActivity a0)
        {
            this.a = a0;
            super();
        }
        public void onClick(android.content.DialogInterface a0, int i)
        {
            System.exit(0);
        }
    }
它的功能并不复杂，实际上只是通过System.exit（0）退出应用程序而已。所以我们要做的事情就是防止应用程序退出。为此，我们可以用Frida覆盖onClick方法。下面，让我们创建一个文件uncrackable1.js，并把我们的代码放入其中：
    setImmediate(function() { //prevent timeout
        console.log("[*] Starting script");
        Java.perform(function() {
          bClass = Java.use("sg.vantagepoint.uncrackable1.b");
          bClass.onClick.implementation = function(v) {
             console.log("[*] onClick called");
          }
          console.log("[*] onClick handler modified")
        })
    })
如果你已经阅读了本系列文章的第一篇的话，这个脚本应该不难理解：将我们的代码封装到setImmediate函数中，以防止超时，然后通过Java.perform来使用Frida用于处理Java的方法。接下来，我们将得到一个类的包装器，可用于实现OnClickListener接口并覆盖其onClick方法。在我们的版本中，这个函数只是向控制台写一些输出。与之前不同的是，它不会退出应用程序。由于原来的onClickHandler被替换为Frida注入的函数，因此它绝对不会被调用了，所以当我们点击对话框的OK按钮时，应用程序就不退出了。好了，让我们实验一下：打开应用程序（使其显示“Root
detected”对话框）
并注入脚本：
    frida -U -l uncrackable1.js sg.vantagepoint.uncrackable1
Frida注入代码需要几秒钟的时间，当你看到“onClick handler
modified”消息时说明注入完成了（当然，注入完成时你也可以得到一个shell之前，因为可以把我们的代码放入一个setImmediate包装器中，从而让Frida在后台执行它）。
然后，点击应用程序中的OK按钮。如果一切顺利的话，应用程序就不会退出了。
我们看到对话框消失了，这样我们就可以输入密码了。下面让我们输入一些内容，点击Verify，看看会发生什么情况：
不出所料，这是一个错误的密码。但是这并不要紧，因为我们真正要找的是：加密/解密例程以及结果和输入的比对。
再次检查MainActivity时，我们注意到了下面的函数
    public void verify(View object) {
它调用了类sg.vantagepoint.uncrackable1.a的方法：
    if (a.a((String)object)) {
下面是sg.vantagepoint.uncrackable1.a类的反编译结果：
    package sg.vantagepoint.uncrackable1;
    import android.util.Base64;
    import android.util.Log;
    /*
     * Exception performing whole class analysis ignored.
     */
    public class a {
        public static boolean a(String string) {
            byte[] arrby = Base64.decode((String)"5UJiFctbmgbDoLXmpL12mkno8HT4Lv8dlat8FxR2GOc=", (int)0);
            byte[] arrby2 = new byte[]{};
            try {
                arrby2 = arrby = sg.vantagepoint.a.a.a((byte[])a.b((String)"8d127684cbc37c17616d806cf50473cc"), (byte[])arrby);
            }
            catch (Exception var2_2) {
                Log.d((String)"CodeCheck", (String)("AES error:" + var2_2.getMessage()));
            }
            if (!string.equals(new String(arrby2))) return false;
            return true;
        }
        public static byte[] b(String string) {
            int n = string.length();
            byte[] arrby = new byte[n / 2];
            int n2 = 0;
            while (n2  _  |   Commands:
       /_/ |_|       help      -> Displays the help system
       . . . .       object?   -> Display information about 'object'
       . . . .       exit/quit -> Exit
       . . . .
       . . . .   More info at http://www.frida.re/docs/home/
    [*] Starting script
    [USB::Android Emulator 5554::sg.vantagepoint.uncrackable1]-> [*] onClick handler modified
    [*] sg.vantagepoint.a.a.a modified
    [*] onClick called.
    [*] Decrypted: I want to believe
太好了。我们实际上已经得到了解密的字符串：I want to believe。那么，我们赶紧输入这个字符串，看看是否正确：
本文到此结束，但愿读者阅读本文后，能够对学习Frida的动态二进制插桩功能有所帮助。
**传送门**
* * *
[**【技术分享】利用FRIDA攻击Android应用程序（一）**
****](http://bobao.360.cn/learning/detail/3641.html)