### Symbolic Execution and Concolic Execution Challenges

#### Handling Symbolic Arrays
Angr, a popular concolic execution tool, can handle one-level symbolic arrays by modeling memory as a map from indexes to expressions. This allows it to store and load values based on the index. However, Angr struggles with more complex cases, such as two-level symbolic arrays and using symbolic jump addresses within arrays. These limitations indicate that full support for symbolic arrays is still not achieved.

When Angr detects a potential bomb but generates insufficient symbolic values to trigger it, the result is labeled as "P" (partial success). This occurs because Angr uses system call simulation, which may incorrectly assume that a system call can return any value that satisfies a constraint. Unsupported system calls, such as those involving dynamic libraries, can lead to errors. For example, Angr cannot handle the `fork` system call when dynamic libraries are loaded, and similar issues arise when unloading dynamic libraries into SimuVEX. In these cases, Angr does not explore the details of external functions and may assume any value can be returned, leading to incorrect symbolic values.

To illustrate this, we designed a negative bomb guarded by a constant false predicate using square operations (e.g., `x^2 == -1`). Theoretically, the bomb should not be triggered, but Angr aggressively assigns return values to the `pow` function, leading to the incorrect conclusion that the bomb path can be triggered.

#### Triton and BAP
Triton and BAP, other concolic execution tools, also struggle with the proposed challenges and frequently fail in scenarios related to Es2 and Es3. Additionally, they encounter several Es1 errors due to unsupported instructions. Specifically, Triton does not support floating-point instructions like `cvtsi2sd` and `ucomisd`. When symbolic variables are propagated through these instructions, errors occur and propagate, resulting in constraint models that either lack symbolic variables or contain incorrect expressions.

#### Scalability Challenges
None of the tools can correctly handle scalability challenges. Our expected result for scalability problems is "E," indicating that the concolic executor exits abnormally due to resource constraints. However, only half of our results match this expectation, while the other half are labeled as Es#. This discrepancy is due to errors occurring during symbolic reasoning.

#### Tool-Specific Failures
Even for the same case, different tools may fail in different ways. For instance, Angr may think a symbolic jump path is reachable but calculate an incorrect result, likely due to data propagation errors. In contrast, BAP and Triton lack mechanisms to handle such jumps, and their failures are typically caused by constraint extraction issues.

### Lessons Learned

1. **Limitations of Concolic Execution:**
   Our experimental results show that even state-of-the-art concolic execution tools have significant limitations. Several non-trivial accuracy challenges remain unsolved, making real-world concolic execution tools less reliable than their theoretical models. Even small programs can face scalability issues. Understanding these limitations and the characteristics of the target code can help users apply the technique more effectively.

2. **Application Issues:**
   We highlight two major application scenarios to illustrate the impact of these challenges:
   - **Bug Detection:** Achieving high control flow coverage is essential for detecting bugs, but the challenges discussed are prevalent in real-world programs, hindering ideal coverage. Integrating other testing approaches, such as random testing or fuzz testing, can improve bug detection. Some concolic execution tools use simulation techniques to enhance coverage, but this can lead to many false positives.
   - **Deobfuscation:** Concolic execution is theoretically effective for deobfuscating programs by eliminating dead code. However, when opaque predicates are composed using the challenges we investigated, deobfuscation becomes problematic.

### Conclusion
This paper presents a systematic investigation of the challenges faced by concolic execution on small-size binary programs. We propose four types of errors that can occur during symbolic reasoning and seven challenges that can cause these errors in real-world tasks. Additionally, we identify two challenges that can lead to scalability issues. To demonstrate the non-trivial nature of these challenges, we conducted real-world experiments using 22 binary programs and three popular concolic execution tools. Our dataset is released as open source to facilitate further research. This work serves as a valuable reference for researchers and users to improve and properly use concolic execution techniques.

### Acknowledgments
This work was supported by the Key Project of the National Natural Science Foundation of China (Project No. 61332010), the National Basic Research Program of China (973 Project No. 2014CB347701), and the Research Grants Council of the Hong Kong Special Administrative Region, China (No. CUHK 14234416 of the General Research Fund). Yangfan Zhou is the corresponding author.

### References
[1] T. Avgerinos, S. K. Cha, B. L. T. Hao, and D. Brumley, “Aeg: Automatic exploit generation,” in Proc. of the 2011 ACM the Network and Distributed System Security Symposium, 2011.
[2] S. K. Cha, T. Avgerinos, A. Rebert, and D. Brumley, “Unleashing mayhem on binary code,” in Proc. of the 2012 IEEE Symposium on Security and Privacy, 2012.
...
[25] N. Nethercote, “Dynamic binary analysis and instrumentation,” Ph.D. dissertation, PhD thesis, University of Cambridge, 2004.
[26] K. Ma, K. Y. Phang, J. S. Foster, and M. Hicks, “Directed symbolic execution,” in Proc. of the International Static Analysis Symposium. Springer, 2011.