    USHORT maxStackElements;
    USHORT maxSizeOfInstructions;
    USHORT maxComponentElements;// 任何复合字形在“顶级”处引用的最大组件数
    USHORT maxComponentDepth;
    }
### 详细分析
#### 1\. 基础分析
poc.ttf中数据:
图中箭头1指向的数据为”maxp”表的TableEntry结构，Offset字段为00000158为箭头2所指向的地方，是”maxp”表内容的具体结构，maxPoints字段值为0(距离箭头2偏移0x6)，`maxCompositePoints`字段为3(距离箭头2偏移0xA)。
AE标志符号的表条目中的x和y增量在运行时会覆盖到另一个数据结构，TTF中内容如下：
异常触发时指令为`add word ptr [r8+56h]，ax`，ax为
`0x9E9F`(图中1标记)，r8为`0x00007A7B00007879`(图中2标记)的地址处，78 79 7A
7B都是TTF中的数据，补0是因为在异常指令之前对x数组和y数组调用了memset初始化内存空间。
poc.html中如下：
正常情况下，ttf文件中maxPoints字段值为`0x168`，`maxCompositePoins`字段值为0x2352，在poc.ttf文件中将”maxp”结构中maxPoints字段的值改为0，将`maxCompositePoins`值改为3，当加载并光栅化损坏的”maxp”表的数据时，会导致堆分配缓冲区过小，调用栈如下：
当复合字形Æ（AE，HTML实体＆＃198;，U + 00C6）被栅格化时，函数`DWrite! fsg_ExecuteGlyph`崩溃，调用栈如下：
`fsg_ExecuteGlyph`函数内部对堆块内部的两个整数数组(对应于x和y坐标)进行操作，使用0x148这个长度调用memset来初始化两个数组，但是数组的长度小于0x148，会将跟在数组后面的一个指针置0。
如果字体是一个变量且指定了轴值，它还将调用`TrueTypeRasterizer ::
Implementation::ApplyOutlineVariation-> GlyphOutlineVariationInterpolator ::
ApplyVariation`会从TTF中获取数据赋值给数组内的成员，但是数组较小，所以将数组后面的指针置为TTF中的数据。之后会向这个指针指向的地址中写入数据导致异常。
漏洞库版本如下：
#### 2.静态分析
崩溃函数`fsg_ExecuteGlyph`分析
 在大的堆块中，有两块内存分别用于x数组和y数组，调用memset初始化，之后调用call
cs:off_7FFF41C70D10
，函数内部会调用`DWrite!TrueTypeRasterizer::Implementation::ApplyOutlineVariation`给x数组和y数组赋值,addr1指向的内存没有0x148字节那么大，所以会写到其它的数据对象上，接下里会引用被覆盖的数据作为指针去写数据：
`rsi+8`中的数据被数组赋值时修改了，使用TTF中的数据覆盖了`[rsi+8]`的数据，`0x00007FFF41B341F6`地址处调用的指令`dd
[r8+56],ax，`其中ax中的数据也是可以控制的。
##### 函数调用链
计算内存大小的函数调用链为
`TrueTypeRasterizer::Implementation::Initialize-> fs_NewSfnt
->fsg_WorkSpaceSetOffsets`函数`fsg_WorkSpaceSetOffsets`内部计算需要申请的内存空间大小并将结果传出到fs_NewSfnt中。
`fs_NewSfnt`获取需要申请的内存大小，之后调用calloc申请内存。
可以看到图中调用完成`fs_NewSfnt`后，在下面的循环中获取v39内存块中的内容作为申请内存的大小。
`fs_NewSfnt`函数内容如下：
v2为传入的第二个参数a2，`*((_DWORD *)v2 + 3)`与`fs_NewSfnt`中取内存大小区域（ _(_DWORD_ )(v14 +
4i64 * j),j为3时）是一致的。
##### 补丁Diff
`fsg_WorkSpaceSetOffsets`函数补丁前后有修改。
查看补丁前`fsg_WorkSpaceSetOffsets`函数伪C代码如下：
其中参数v3指向”maxp”表具体内容
可以看到图中从`maxCompositePoints`和`maxPoints`字段中取较大值，并且与常量1比较取较大值，得到值为3，之后加8，得到0xb，作为第一个参数传入`fsg_GetOutlineSizeAndOffsets`中，这个函数看名称应该是获取轮廓的大小和偏移值。
补丁后`fsg_WorkSpaceSetOffsets`函数伪C代码有点问题，所以下面贴出汇编代码如下：
打过补丁后，程序是先从`maxCompositePoints`和`maxPoints`字段中取较大值，得到3，再与1比较得较大值仍然为3，3+8得到0xb，再取出maxp表中`maxComponentElements`字段，POC中此值为0x0062，相对”maxp”表具体内容偏移为0x1C
`0x62+4=0x66`，比较0x66与0xb得到较大值作为第一个参数传入`fsg_GetOutlineSizeAndOffsets`函数中。
函数`fsg_GetOutlineSizeAndOffsets`没有变化，只是因为传入的第一个参数不同，所以最终计算出的结果也不同。
##### 漏洞函数分析
`fsg_ExecuteGlyph`函数对堆块内部的两个整数数组，对应于x坐标和y坐标进行操作，实际上数组的较小，`fsg_ExecuteGlyph`函数先调用了两次memset将数组清零，如果字体是一个变量且指定了轴值，还会调用`TrueTypeRasterizer::Implementation::ApplyOutlineVariation->GlyphOutlineVariationInterpolator::ApplyVariation`将字体中的数据赋值到坐标数组，这样就会破坏到后续的结构成员。
#### 3\. 动态分析
计算所需内存的过程可以通过条件断点的方式来调试，附加到调试器后，可以设置如下断点命令，
    bp DWrite!TrueTypeRasterizer::Implementation::Initialize "r $t0=$t0+1; .printf \"Initialize times:%d\n\",@$t0;.echo;gc"
可以看到第13次调用`TrueTypeRasterizer::Implementation::Initialize`函数之后就会进入崩溃。
重新启动，下断点：
    bp DWrite!TrueTypeRasterizer::Implementation::Initialize "r $t0=$t0+1; .printf \"Initialize times:%d\n\",@$t0;.echo;.if(@$t0 == 0x0D){}.else{gc}"
运行可以看到：
在调用`fs_NewSfnt`之前下断点，查看传入参数内容：
单步步过，再次查看内存，可以看到需要申请的内存大小为0x6fa4。
继续往下运行：
可以看到申请的内存地址为0x00000196bc484b60。
在崩溃函数中下断点，运行：
堆块起始地址为上面的申请的0x00000196bc484b60，调用memset使用的大小为0x148，上面是内存块1，addr1为0x00000196bc4850fc
查看堆块大小以及addr1相对堆块起始地址的偏移大小如下：
最终调用`fsg_ExecuteGlyph+0x772`处的指令`add [r8+56h], ax`时，a8来源于`[rsi+8]`
查看rsi+8相对于堆块的偏移
rsi+8相对于堆块起始地址偏移0x6c8，而addr1相对于堆块起始地址偏移`0x59c，0x59c+0x148=0x6E4>0x6C8，`所以操作addr1中的数据时会覆盖`rsi+8`处的数据，从图上可以看到，调用`memset`后`rsi+8`中的数据初始化为0。
调用`ApplyOutlineVariation`函数之后，`rsi+8`处数据被修改为ttf文件中的数据。（重新启动，内存地址与上面不一样）
继续运行，如下：
可以看到ax为`0x9e9f`，r8为`0x00007a7b00007879`，这两个数据都在poc.ttf文件中的数据，所以这个指针数据可控(where)，要写入的内容(what)也可控。
打过补丁之后查看DWrite!`fsg_ExecuteGlyph`函数没有变化，调试发现整个堆块的大小变得更大了，x数组和y数组的大小还是0x148字节，ESI对象距离堆块起始地址的距离变大，所以在x数组和y数组的赋值过程中没有覆盖到ESI对象,如下：
可以看到堆块大小为0x7d24，之前为0x6fa4。
addr1结束地址为`0x0000015fd070427c
## 0x06参考文献
1.
2.
3.
* * *