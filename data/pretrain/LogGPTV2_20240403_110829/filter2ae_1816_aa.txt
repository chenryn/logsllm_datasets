这是内核漏洞挖掘技术系列的第十三篇(本篇文章为翻译)。  
第一篇：[内核漏洞挖掘技术系列(1)——trinity](https://xz.aliyun.com/t/4760
"内核漏洞挖掘技术系列\(1\)——trinity")  
第二篇：[内核漏洞挖掘技术系列(2)——bochspwn](https://xz.aliyun.com/t/4800
"内核漏洞挖掘技术系列\(2\)——bochspwn")  
第三篇：[内核漏洞挖掘技术系列(3)——bochspwn-reloaded(1)](https://xz.aliyun.com/t/4921
"内核漏洞挖掘技术系列\(3\)——bochspwn-reloaded\(1\)")  
第四篇：[内核漏洞挖掘技术系列(3)——bochspwn-reloaded(2)](https://xz.aliyun.com/t/4932
"内核漏洞挖掘技术系列\(3\)——bochspwn-reloaded\(2\)")  
第五篇：[内核漏洞挖掘技术系列(4)——syzkaller(1)](https://xz.aliyun.com/t/5079
"内核漏洞挖掘技术系列\(4\)——syzkaller\(1\)")  
第六篇：[内核漏洞挖掘技术系列(4)——syzkaller(2)](https://xz.aliyun.com/t/5098
"内核漏洞挖掘技术系列\(4\)——syzkaller\(2\)")  
第七篇：[内核漏洞挖掘技术系列(4)——syzkaller(3)](https://xz.aliyun.com/t/5154
"内核漏洞挖掘技术系列\(4\)——syzkaller\(3\)")  
第八篇：[内核漏洞挖掘技术系列(4)——syzkaller(4)](https://xz.aliyun.com/t/5223
"内核漏洞挖掘技术系列\(4\)——syzkaller\(4\)")  
第九篇：[内核漏洞挖掘技术系列(4)——syzkaller(5)](https://xz.aliyun.com/t/5401
"内核漏洞挖掘技术系列\(4\)——syzkaller\(5\)")  
第十篇：[内核漏洞挖掘技术系列(5)——KernelFuzzer](https://xz.aliyun.com/t/5443
"内核漏洞挖掘技术系列\(5\)——KernelFuzzer")  
第十一篇：[内核漏洞挖掘技术系列(6)——使用AFL进行内核漏洞挖掘(1)](https://xz.aliyun.com/t/5521
"内核漏洞挖掘技术系列\(6\)——使用AFL进行内核漏洞挖掘\(1\)")  
第十二篇：[内核漏洞挖掘技术系列(7)——静态模式匹配](https://xz.aliyun.com/t/5764
"内核漏洞挖掘技术系列\(7\)——静态模式匹配")
之前在本系列的第十一篇文章：[内核漏洞挖掘技术系列(6)——使用AFL进行内核漏洞挖掘(1)](https://xz.aliyun.com/t/5521
"内核漏洞挖掘技术系列\(6\)——使用AFL进行内核漏洞挖掘\(1\)")中和大家分享了两个使用AFL进行内核漏洞挖掘的工具。这两个工具的实现都比较复杂，那么有没有比较简单的将AFL应用于内核漏洞挖掘的方法呢？这里为大家翻译一篇cloudflare使用AFL对netlink进行fuzz的博客，这篇博客中采用的方法相比之前介绍的方法可以说是更“轻量级”的，也更好理解和上手。希望读者能有所收获。  
原文地址：
## 前言
有一段时间我一直想做基于代码覆盖率的[fuzz](https://en.wikipedia.org/wiki/Fuzzing
"fuzz")。fuzz是一种强大的测试技术：自动化的程序将半随机的输入发送到测试程序以找到触发错误的输入。fuzz在查找C/C++程序中的内存损坏错误时特别有用。  
通常情况下建议选择一个众所周知但之前没有很多人fuzz过的主要功能是解析的库进行fuzz。以前像libjpeg，libpng和libyaml这样的库都是完美的目标。如今找到一个容易的目标更难——它们似乎都已经被fuzz过了。软件越来越安全了，这是好事。我没有选择用户空间的目标，而是选择了Linux内核netlink系统。  
[netlink是一个由ss/ip/netstat等工具使用的Linux内部的设施](https://en.wikipedia.org/wiki/Netlink
"netlink是一个Linux内部的工具")。它用于底层网络任务中——配置网络接口，IP地址，路由表等。这是一个很好的目标：它是内核的一个不起眼的部分，并且自动生成有效的输入相对容易。最重要的是，我们可以在此过程中学到很多关于Linux内部的知识。不过netlink中的错误不会产生安全问题——netlink套接字通常需要特权访问。  
在这篇文章中，我们将运行[AFL](http://lcamtuf.coredump.cx/afl/ "AFL")，使我们的netlink
shim程序在自定义的Linux内核上运行(在计算机编程中shim是一个小型库，可透明地截取API，更改传递的参数，处理操作本身，或将操作重定向到别处)。所有这些都在KVM虚拟化的环境中。  
这篇博客是一个教程。通过易于遵循的指示，你应该能够快速复制结果。你只需要一台运行Linux的机器和20分钟时间。
## 前人的工作
我们将要使用的技术正式的说法是“基于代码覆盖率的fuzz”。有很多相关研究：
Dan Guido的[The Smart Fuzzer
Revolution](https://blog.trailofbits.com/2017/02/16/the-smart-fuzzer-revolution/ "The Smart Fuzzer
Revolution")，以及[LWN关于它的文章](https://lwn.net/Articles/677764/ "LWN关于它的文章")  
j00ru(Mateusz Jurczyk)的[Effective file format
fuzzing](https://j00ru.vexillium.org/talks/blackhat-eu-effective-file-format-fuzzing-thoughts-techniques-and-results/ "Effective file format fuzzing")  
Robert Swiecki开发的[honggfuzz](http://honggfuzz.com/
"honggfuzz")，是一个现代化的功能丰富的基于代码覆盖率的fuzzer  
[ClusterFuzz](https://google.github.io/clusterfuzz/ "ClusterFuzz")  
[Fuzzer Test Suite](https://github.com/google/fuzzer-test-suite "Fuzzer Test
Suite")
很多人都fuzz过Linux内核。最重要的是下面两项研究(下面提到的两个工具在内核漏洞挖掘技术系列文章中已经介绍过了)：
由Dmitry
Vyukov编写的[syzkaller(又名syzbot)](https://github.com/google/syzkaller/blob/master/docs/syzbot.md
"syzkaller\(又名syzbot\)")是一个非常强大的能够持续集成运行的内核fuzzer，它已经发现了数百个问题。这是一个很棒的fuzzer，它甚至会自动报告错误！  
[Trinity fuzzer](https://github.com/kernelslacker/trinity "Trinity fuzzer")
我们将使用[AFL](http://lcamtuf.coredump.cx/afl/ "AFL")，每个人最喜欢的fuzzer。AFL由[Michał
Zalewski](http://lcamtuf.coredump.cx/ "Michał
Zalewski")开发，以易用，快速和非常好的变异逻辑而闻名。这是人们开始fuzz之旅的完美选择！
如果您想了解有关AFL的更多信息，请参阅这几个文件：
[Historical notes](http://lcamtuf.coredump.cx/afl/historical_notes.txt
"Historical notes")  
[Technical whitepaper](http://lcamtuf.coredump.cx/afl/technical_details.txt
"Technical whitepaper")  
[README](http://lcamtuf.coredump.cx/afl/README.txt "README")
## 基于代码覆盖率的fuzz
基于代码覆盖率的fuzz原理是反馈回路：
  * fuzzer选择最有希望的测试用例
  * fuzzer将测试用例变异为大量新的测试用例
  * 目标代码运行变异的测试用例，并报告代码覆盖率
  * fuzzer根据报告的覆盖范围计算得分，并使用它来确定测试用例的优先级并删除冗余的测试用例
例如，假设输入测试是hello。fuzzer可能会将其变为多种测试用例，例如：hEllo(位翻转)，hXello(字节插入)，hllo(字节删除)。如果这些测试中的任何一个产生新的代码覆盖，那么它将被优先用作下一次fuzz的测试用例。  
有关如何完成变异以及如何有效地比较数千个程序运行的代码覆盖率报告的细节问题是fuzzer最关键的地方。阅读[AFL的技术白皮书](http://lcamtuf.coredump.cx/afl/technical_details.txt
"AFL的技术白皮书")了解细节。  
从二进制文件报告的代码覆盖率非常重要。fuzzer根据它对测试用例进行排序，并确定最有希望的测试用例。没有代码覆盖率信息进行fuzz就像是盲人摸象。  
通常在使用AFL时我们需要对目标代码进行插桩，以便以和AFL兼容的方式报告代码覆盖率。但我们想要fuzz内核，不能直接用afl-gcc重新编译它。这里将使用一个小技巧：我们将准备一个二进制文件，让AFL认为它是用它的工具编译的。这个二进制文件将报告从内核中提取的代码覆盖率。
## 内核代码覆盖率
内核至少有两个内置的代码覆盖率机制——GCOV和KCOV：  
[Using gcov with the Linux kernel](https://www.kernel.org/doc/html/v4.15/dev-tools/gcov.html "Using gcov with the Linux kernel")  
[KCOV: code coverage for fuzzing](https://www.kernel.org/doc/html/latest/dev-tools/kcov.html "KCOV: code coverage for fuzzing")  
KCOV的设计考虑了fuzz，因此我们将使用它。使用KCOV非常简单。我们必须使用正确的设置编译Linux内核。首先，启用KCOV内核配置选项：
    cd linux
    ./scripts/config \
        -e KCOV \
        -d KCOV_INSTRUMENT_ALL
KCOV能够记录整个内核的代码覆盖率。可以使用KCOV_INSTRUMENT_ALL选项进行设置。缺点是它会减慢我们不想分析的内核部分，并且会在我们的fuzz中引入噪声（降低稳定性）。对于内核fuzz的初学者，禁用KCOV_INSTRUMENT_ALL并有选择地在我们实际想要分析的代码上启用KCOV。现在，我们专注于netlink系统，所以让我们在整个net目录树上启用KCOV：
    find net -name Makefile | xargs -L1 -I {} bash -c 'echo "KCOV_INSTRUMENT := y" >> {}'
更完美的情况是只为我们真正感兴趣的几个文件启用KCOV。但是netlink遍及网络栈的代码，我们今天没有时间进行微调。  
有了KCOV，接下来添加“kernel
hacking”配置，这将增加报告内存损坏错误的可能性。参考[readme](https://github.com/cloudflare/cloudflare-blog/blob/master/2019-07-kernel-fuzzing/README.md
"readme")中[syzkaller建议的选项列表](https://github.com/google/syzkaller/blob/master/docs/linux/kernel_configs.md
"syzkaller建议的选项列表")(最重要的是KASAN)。  
使用这样的配置，我们可以编译启用KCOV和KASAN的内核。我们将在kvm中运行内核。我们将使用[virtme](https://github.com/amluto/virtme
"virtme")帮助我们设置环境，需要下面这几项配置：
    ./scripts/config \
        -e VIRTIO -e VIRTIO_PCI -e NET_9P -e NET_9P_VIRTIO -e 9P_FS \
        -e VIRTIO_NET -e VIRTIO_CONSOLE  -e DEVTMPFS ...
(完整列表请参阅[readme](https://github.com/cloudflare/cloudflare-blog/blob/master/2019-07-kernel-fuzzing/README.md "readme"))
## 如何使用KCOV
KCOV非常易于使用。首先，请注意代码覆盖率记录在每个进程的数据结构中。这意味着必须在用户空间进程中启用和禁用KCOV，并且无法记录例如中断处理这样的非任务事项的代码覆盖率。这对我们的需求来说完全没问题。  
KCOV将数据报告给环形缓冲区。设置非常简单，[请参阅我们的代码](https://github.com/cloudflare/cloudflare-blog/blob/master/2019-07-kernel-fuzzing/src/kcov.c
"请参阅我们的代码")。然后你可以使用一个简单的ioctl启用和禁用它：
    ioctl(kcov_fd, KCOV_ENABLE, KCOV_TRACE_PC);
    /* profiled code */
    ioctl(kcov_fd, KCOV_DISABLE, 0);
之后环形缓冲区会包含启用KCOV的内核代码的所有基本块的％rip值列表。要读取缓冲区，请运行下面的代码：
    n = __atomic_load_n(&kcov_ring[0], __ATOMIC_RELAXED);
    for (i = 0; i < n; i++) {