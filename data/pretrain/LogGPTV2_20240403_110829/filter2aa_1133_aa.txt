Exploitation Detection System (EDS)
Introduction:
in the last several years, the exploits become the strongest cyber weapons in all cyber warfare. The
exploit developer/vulnerability researcher become the nuclear scientist of the digital world.
Most of Attacks now are APT attacks and they are based on attacking from behind. they attack using a
spear phishing and client-side attacks which bypass all of security defenses and appliances nowadays.
In this white paper, I will talk about a new concept named "Exploitation Detection System" which will
defend against the APT Attacks and a new security mitigation tool which is based on co-operation
between several mitigations to cover the weaknesses of each other and it's based on monitoring the
memory changes which doesn't decrease the performance of the running application and creates a
multi-layer protection with the regular mitigations.
the EDS consist of 2 payload detection tools for detecting shellcodes and rop chains and includes several
mitigations tools for stack overflow, heap spray, use after free and other attack techniques which we
will describe in the white paper.
Exploitation Detection System as a Concept:
Why EDS?
The next generation of attacks, the hackers nowadays attack a company from its client. they attack using
spear-phishing, client-side attacks and exploits to get internally inside the network of the company and
from inside these clients they attack the servers and get their information.
The Attackers use new undetectable malware (which is very easy for the signature-based AVs) and use
HTTP and HTTPS to bypass the Firewalls, IDS and IPS tools to connect to the Attacker and sometimes
they use legitimate websites to bypass threat intelligence tools and DNS analysis.
from these malwares, the attacker tries to get into the server by stealing the passwords using sniffing or
whatever they can do, or even hack the server to get into your information and databases.
Most of security defenses and security tools can prevent or even detect these types of attacks. So, that's
the time for new era. that's the time for the next technology after the AV, Firewalls, IDS and IPS. that's
the Time for EDS
What's EDS?
The EDS simply is your agent in the memory of the clients. with the respect to the privacy policies, the
EDS is simply a memory-based exploitation detection tool which is used to stop the client-side attacks
and mark suspicious actions to further investigate and contain any attack bypassed your security
defenses and give you a timeline of the whole attack to contain and stop.
The EDS should be a tool in the client machines to prevent or/and detect attacks and with its logs and
with the correlation of its output and logs you can get a timeline of any attack and contain it.
After all signature-based tools which easily could be bypassed by a targeted attack and with the network
tools ... it's the time for memory-based tool to mitigate what you can't see from just the network.
EDS vs Antivirus:
The Exploitation Detection System is not an Antivirus because:
it's not signature-based or behavioral-based ... it's memory-based (with some behavior-based
tools)
it's based on detecting memory corruption vulnerabilities.
it's your agent in the memory for memory scanning and logging suspicious actions and memory
inside processes.
it doesn't detect malware but only exploits
Exploitation Detection System Tool:
Now I will talk about my Exploitation Detection System tool and my mitigations to stop the client-side
attacks and exploits.
The previous work:
The Compile-time solutions:
the compile time solutions are simply some mitigations solutions which is based on recompiling your
application to apply this solution for it like /GS solution.
these type of solutions are mostly powerful but ineffective because there will be exceptions or
applications which weren't compiled with applying this solution to it.
The Run-time solutions:
The run-time solutions are more effective because they aren't related to recompiling but they are
applied to the processes and work with their code as a black-box.
these type of solutions are facing many challenges like false positives, false negatives, high memory
consumption and so on.
the solutions nowadays are mostly one layer of defense with some on-off mitigations which will do
some solid checks to detect the attack
most of these tools are very fragile to be bypassed or facing a high number of false positives due to their
inflexibility and there's no additional layer of defense.
What's New:
This Tool will contains:
Multi-layer of defense.
Scoring system which will make it more flexible
Monitoring system as an additional layer of defense
co-operative mitigations.
EDS Design:
and it's divided into:
Payload Detection: which detect the payload inside the input.
Attack Vector Detection and Mitigation: which detect any attack coming from heap or stack like
overflow or use-after-free
Scoring System: which score the level of suspicious of action based on payload, attack vector
detection and abnormal behavior for this process.
Monitoring System: this is an additional layer of defense based on detecting bypassed
mitigations from the indication of compromise of a process and make a detailed analysis over
the process periodically.
Payload Detection:
Shellcode Detector:
Goals:
for the EDS, we need a high performance shellcode detector to scan on suspicious pages on memory to
detect possible shellcodes.
this tool must be very fast, low false positive rate and minimum false negative rate.
Design:
The Shellcode Detector is a static shellcode detection tool which includes 2 phases: possible shellcode
detection (GetPC, loops or high number of pushes) and flow analysis phase.
Phase 1: Possible Shellcode Detection.
The Shellcode detection searches for 3 marks for shellcode:
1.
search for loops (jmp to above, loopxx, jcc ... etc) or call to pervious
2.
search for high number of pushes end with flow redirection instruction (call reg, jmp reg ... etc)
3.
search for fstenv instructions followed by at least 5 valid instructions.
for all of them, we ignore shellcodes which contain invalid instructions, privilege instructions or
unknown behavior instructions.
Phase 2: Flow Analysis
In this part ... we are focusing on reading the whole instructions and how they are connected together.
the flow analysis phase decrease the false positives rate with minimum decrease in performance and
false negatives. and it scans of:
1.
Check on the changes in stack level inside loops ... and it checks on pushes, pops or any
modifications on esp to detect strange behavior in the loop and ignore it.
2.
Check on jccs without a comparing instruction which could lead to unknown behavior
3.
Check on a register used in comparing in a loop without being used or modified inside the loop and
check if there's a loop without an index register (compare and check).
4.
Check on the number of null bytes inside the shellcode which could be used to ignore shellcodes
with nulls if the mitigation scans only on null-free shellcodes.
Statistics:
For False Negatives: I tested it on Metasploit payloads including the encryption/encoding modules and
detect all of them ... and I tested shell-storm shellcodes .. it detects all windows shellcode that's
compatible with ASLR.
For False Positives: I tested it on large binary files from different type of files (pcap Files, wmv files and
others) and the statistics (per page) showed that 4% of pages marked infected (false positives)
File Type
Total No of Pages
Infected Pages
Presentage
Pcap
381
40
2%
Pcap
11120
543
4%
Wmv
104444
4463
4%
ROP Chain Detection:
This is a very small and basic tool and it's based on searching for a return address meet the following
requirements:
1.
the address is inside an executable page in a module
2.
the return address following a call
3.
Followed by ret or equivalent instructions in the next 16 bytes
4.
not following a series of int3 (0xCC) bytes
Security Mitigation on Stack:
Here we have 2 security mitigations (mainly 1) and these mitigations are based on detecting buffer
overflow which overwrites return address, seh address or vtable inside the stack. and it's based on
detecting the ROP Attacks inside the stack.
Wrong  Module Switching:
Wrong Module Switching is a monitoring-based exploitation detection mitigation and it simply
backstracing the call stack searching for switching user libraries/modules to kernel libraries/modules and
check on the switching if it was done correctly which means that it wasn't done by ROP.
Design:
This Techniques is based on hooking SSDT or Wow64 for some APIs (will be listed) and backtracing the
call stack skipping the kernel modules and libraries (except who is not compatible with ASLR) until reach
the user libraries (if reach nothing so it's ROP)
after reach the user library caller, it disassembles backwardly 16 instructions and checks on the
following on the call instructions:
1.
check if it's a "call dword" to the API, call to jmp dword to the API or call reg and with a mov
instruction sets the register with the address of the API
2.
check if there's a very near ret instruction or equivalent instructions.
3.
check the parameters and classify them into 3 categories:
a.
if it's a constant value ... it checks this constant value with the equivalent parameter in the
SSDT call.
b.
if the constant value is zero (null) ... this decrease the score as it's hard to have a null
parameter inside the a string overflow input (but it could be happen by modifications using
ROP)
c.
if it's a stack address (lea eax,dword [esp/ebp +xxx]/push eax) it checks if the address is
within the stack base and limit
d.
if it's a generic parameter .. it skips it
4.
if the parameter check is not sufficient (main parameters are generic or API with unknown
parameters) we check on the next call stack .. and we check on the following:
a.
if the next call stack is a return from call near the ret address from the API (withing 400
bytes)
b.
check if there's nulls between the first return address (return from the API call) and the
second return address (that we check now)
5.
if The next call stack is not found, we check on the SEH before the kernel modules' SEH pointers and
check if it's in the same module of the API caller
For this hard restrictions, we hook only special APIs that could be used by the Attackers like:
1.
Process Creation APIs
2.
Memory Allocation and Protection APIs
3.
Connection and Sockets Creation
4.
LoadLibrary and equivalent APIs for unknown DLLs.
Implementation:
we faced some obstacles in implementing the idea because of:
1.
Some API calls are hard to find the beginning of the call stack (after the Zwxxx API)
2.
Many equivalent API from kernel32,kernelbase,shell32 and others.
3.
Socket Functions are away from the SSDT Hooking and has many dlls
4.
SSDT Hooking is not supported in 64bits
5.
The call stack backtracing could be fooled by the SEH chain
for the 1st problem ... we detected that we can find the beginning of the call stack by getting the first
SEH Element (on the top of the chain) and search for the first call stack in the next couple of dwords in
the stack
for the 2nd problem ... for these situation, we decided to monitor all of them .. some of them we don't
check their parameters but only know the functionality of the API (Process Creation, Memory .. etc)
for the 3rd problem ... we put all APIs from the internet DLLs (ws2_32.dll, wininet.dll ... etc) as a possible
socket creation API and we hook it using Layered Service Providers and we skip the parameters and
check on the next call stack
for the 4th problem ... we hook WOW64 calls by API Hooking of the Wow64 dlls inside the win64
instead.
for the 5th problem ... we save the SEH chain and skip it.
About Possible bypassing techniques ... we will talk about them at the end of the whitepaper.
SEH Overflow Mitigation:
this a small and basic mitigation and it's based on monitoring the SEH chain ... and it's based on
traversing the SEH chain for each thread and save the last element in the chain (which links to 0xFFFFFF
in most cases) and checking periodically if there's a change on the last item.
Security Mitigations on Heap:
for heap, we need to secure from 3 types of attacks:
1.
Heap Overflow
2.
Heap Spray
3.
Use After Free
for Heap Overflow, we need to secure from it to support the old windows versions (XP) and to secure
from data overflow in heap in jemalloc heap system which implemented by firefox.
Heap Overflow:
For Heap Overflow ... we hook the heap allocation functions and add a custom header contains magic,
cookie and nulls.
and it will be a  thread that do the periodical check on the recently allocated buffer (in the last 2 secs)
and ensure no overwrite had accrued.
Heap Spray:
in Heap Spray, we are focusing on 2 main characteristics of the heap spray ... which they are Time and
Allocation Module (the module that allocates the buffer).
we try to detect many memory allocations happened in small time from the same module which they
are not too small (larger than 100 bytes) and after that we check for shellcode or ROP chains inside.
So .. the criteria is:
1.
Many Allocations from the same module
2.
Allocations bigger than a specific size (100 bytes)
3.
Allocations more than specific number (ex. > 350 allocations)
4.
Allocations in a small time (1.5 secs)
5.
Shellcodes or ROP Chains inside 2 or 3 buffers inside (we take randomly 2 or 3 allocations)
Use After Free:
For Use After Free, the attacker tries to create a object (contains vtable) and free this object and then
use it again.
Some uses Heap Spray to forcing the free or to overwrite the object again with ROP chains ... and some
others don't.
We uses 2 mitigations for stopping this type of attacks ... the first is the Heap Spray Mitigation and the
second is that we are trying to postpone any freeing for an object contains vtable to the end of the time
slice (~ 2 secs) to ensure no one tried to replace it with ROP chain Attack.
we also .. while the process requests to free this object, we fill it with a magic dwords to detect any Use
After Free n attacker tried to do.
This mitigation forces the Attacker to wait for the end of the time slice (which will be randomly) to
ensure that the object is freed ... and he needs to overwrite it exactly without using Heap Spray
technique.
The Implementation:
To Implement these mitigations, we decided to Hook GlobalAlloc and GlobalFree and all equivalent APIs.
and then, add a custom header to every allocation and link it to another array of headers (allocated by
VirtualAlloc) to save all important information inside it (Time, Cookie, Allocation Eip or Module, ... etc).
the link between the custom header and the Array of detailed headers is not based on pointers but it's
based on guiding index.
and everything will be reset after a time slice finished (random size between
1 sec to 2 secs). And it will be another thread which will check periodically
on
1.
Check on all the cookies of the allocations inside the time slice for
detecting Heap Overflow
2.
Check on Heap Spray
when the time slice ends, the thread will do the following:
1.
Reset the Allocations Array
2.
Free All postponed objects from being freed
3.
Prepare for the next time slice.
Put all together:
The Exploitation Detection System will inform 2 types of scanning for the same process to ensure that
the process is secured from exploits.
Critical Scanning and the scoring system:
The critical scanning is a very fast scanning which scans on an event occurred like a call to a special API
to check for a wrong module switching, a heap spray attack occurred or a heap overflow.
in the Critical Scanning, the actions performed in this type of scanning is dependent on the event
occurred.