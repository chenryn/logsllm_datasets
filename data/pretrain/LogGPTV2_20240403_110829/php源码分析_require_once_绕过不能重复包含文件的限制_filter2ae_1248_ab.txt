简单来说，递归机制是从后往前，`/var/www/html/1.php -> /var/www/html -> /var/www`。
我们发现堆栈长这样子，似乎一切从那个1173行开始就不一样了，为什么呢，那我们得重新跟一次，记下这是第几次递归，断点还是下在`tsrm_realpath_r`的首行，重新跟的时候数下递归了几次，找到这次调用有啥不同，最简单的办法就是递归几次就按几次F9（继续执行程序），为了方便起见，我们把来自1137行的调用记为第`n`次递归，简称`(n)`：
    tsrm_realpath_r zend_virtual_cwd.c:756  (n+4) return 1
    tsrm_realpath_r zend_virtual_cwd.c:1124 (n+3) return 1
    tsrm_realpath_r zend_virtual_cwd.c:1164 (n+2) return 5
    tsrm_realpath_r zend_virtual_cwd.c:1164 (n+1)
    tsrm_realpath_r zend_virtual_cwd.c:1137 (n)
    tsrm_realpath_r zend_virtual_cwd.c:1164 (n-1)
    tsrm_realpath_r zend_virtual_cwd.c:1164
    ...
    tsrm_realpath_r zend_virtual_cwd.c:1164 (1)
    tsrm_realpath_r zend_virtual_cwd.c:1164
去掉`ZEND_WIN32`的无关部分，实际上我们可以发现，每次递归都会对`. ..
//`特殊情况进行处理，然后之前的一大堆`(0)...(n-1)`，`php_sys_lstat(path,
&st)`的返回值都是`-1`，而到了`(n)`，可以发现`php_sys_lstat(path, &st)`为`0`
    static int tsrm_realpath_r(char *path, int start, int len, int *ll, time_t *t, int use_realpath, int is_dir, int *link_is_dir) /* {{{ */
    {
        int i, j, save;
        int directory = 0;
    #ifdef ZEND_WIN32
        ...
    #else
        zend_stat_t st;
    #endif
        realpath_cache_bucket *bucket;
        char *tmp;
        ALLOCA_FLAG(use_heap)
        while (1) {
            if (len  start && !IS_SLASH(path[i-1])) {
                i--;
            }
            /* 对. .. //这三种情况进行特殊处理 */
            if (i == len ||
                (i == len - 1 && path[i] == '.')) {
                /* remove double slashes and '.' */
                ...
            } else if (i == len - 2 && path[i] == '.' && path[i+1] == '.') {
                /* remove '..' and previous directory */
                ...
            }
            path[len] = 0;
            save = (use_realpath != CWD_EXPAND);
            if (start && save && CWDG(realpath_cache_size_limit)) {
                /* cache lookup for absolute path */
                ...
            }
    #ifdef ZEND_WIN32
        ...
    #else
            //(0)...(n-1)的save值到这都是1
            if (save && php_sys_lstat(path, &st)  LINK_MAX || (j = php_sys_readlink(tmp, path, MAXPATHLEN)) = MAXPATHLEN-1) {
                        free_alloca(tmp, use_heap);
                        return -1; /* buffer overflow */
                    }
                    memmove(path+i, path, j+1);
                    memcpy(path, tmp, i-1);
                    path[i-1] = DEFAULT_SLASH;
                    j = if
                if (i - 1  start) {
                        path[j++] = DEFAULT_SLASH;
                    }
                }
                if (j = MAXPATHLEN-1) {
                    free_alloca(tmp, use_heap);
                    return -1;
                }
                memcpy(path+j, tmp+i, len-i+1);
                j += (len-i);
            }
            if (save && start && CWDG(realpath_cache_size_limit)) {
                /* save absolute path in the cache */
                realpath_cache_add(tmp, len, path, j, directory, *t);
            }
            free_alloca(tmp, use_heap);
            return j;
        }
    }
###  0x03 符号链接
仔细想想我们的payload是什么？循环构造符号链接？那`php_sys_lstat()`是啥？
`php_sys_lstat()`实际上就是linux的`lstat()`，这个函数是用来获取一些文件相关的信息，成功执行时，返回0。失败返回-1，并且会设置`errno`，因为之前符号链接过多，所以`errno`就都是`ELOOP`，符号链接的循环数量真正取决于`SYMLOOP_MAX`，这是个`runtime-value`，它的值不能小于`_POSIX_SYMLOOP_MAX`。
我们也可以在执行了`php_sys_lstat()`之后调用`perror()`验证`errno`是不是`ELOOP`。
参考了文档[sysconf](https://man7.org/linux/man-pages/man3/sysconf.3.html)，还是通过Clion的计算表达式功能，算下`sysconf(_SC_SYMLOOP_MAX)`和`sysconf(_POSIX_SYMLOOP_MAX)`，但是这回没有成功，`SYMLOOP_MAX`居然是`-1`，那我们用其他办法获取，最简单的办法就是手动实践，暴力获取。
    import os
    os.system("echo 233> l00")
    for i in range(0,99):
        os.system("ln -s l%02d l%02d"%(i,i+1))
然后ls -al一下，发现`l42`这个符号链接就无效了，最后一个有效的符号链接是`l41`，所以有效的应该是`41->40, 40->39 ...,
01->00`，一共41个，所以`SYMLOOP_MAX`是`40`，指向符号链接的符号链接的个数是40。
所以一大堆`/proc/self/root`拼一起，从后往前倒，递归调用`tsrm_real_path_r`，直到`php_sys_lstat`返回`0`，即成功。
成功时的path内容见如下，`/proc/self`是个符号链接指向当前进程`pid`，`self`底下的`root`也是个符号链接，所以算下，也是41个，正正好吧？
    >>> a = "/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self"
    >>> print(a.count("self")+a.count("root"))
    41
验证一下：用Clion计算表达式功能，我们可以发现：
    lstat("/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self") 返回 0
    lstat("/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root") 返回 -1
###  0x04 递归逐层剖析
然后既然`php_sys_lstat()`为1，在`(n)`它干了什么？
    //刚刚调试的结果是(n)以及它之后的save都为1
    //"/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self"就是/proc/self，是个符号链接，为进程的pid，S_ISLNK判断是不是符号链接
    if (save && S_ISLNK(st.st_mode)) {
        //调用前的path为：
        //php_sys_readlink就是读取符号链接所指向的真实位置，并写入到path变量，j是长度
        if (++(*ll) > LINK_MAX || (j = php_sys_readlink(tmp, path, MAXPATHLEN)) < 0) {
            /* too many links or broken symlinks */
            free_alloca(tmp, use_heap);
            return -1;
        }
        path[j] = 0;
        //末尾补上\0，完成读取，此时的path是进程的pid，path="24273"
        if (IS_ABSOLUTE_PATH(path, j)) {
            //很明显"24273"不是个绝对路径，去看else
            j = tsrm_realpath_r(path, 1, j, ll, t, use_realpath, is_dir, &directory);
            if (j < 0) {
                free_alloca(tmp, use_heap);
                return -1;
            }