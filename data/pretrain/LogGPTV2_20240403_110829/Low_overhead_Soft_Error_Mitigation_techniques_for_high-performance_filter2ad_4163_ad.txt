### 授权许可使用声明
本文档仅供清华大学授权使用。下载时间：2021年3月20日，UTC时间05:38:03。来源：IEEE Xplore。使用受限。

---

### 处理器流水线与局部时钟管理

处理器流水线仅占用芯片面积的一部分。如图6所示，局部时钟管理器（LCM）只放置在包含处理器流水线的芯片区域中。通过采用恒定相移（CPS）技术，延迟值D1和D2被设置为常数，以满足第4节中所述的时序约束。这种做法不仅减少了用于单事件多脉冲（SEM）和单事件瞬态（STEM）方案所需的时钟资源，还增加了系统可使用的操作频率数量。在CPS方案下，所需的所有时钟信号都从单一的时钟分布网络中导出。图6展示了如何利用H树时钟分布网络生成CLK1、CLK2和CLK3。

**图6：基于单一时钟路由的局部时钟生成**

### 案例研究：使用缓冲器进行局部时钟生成

为了在本地生成SEM和STEM方案所需的时钟信号，我们提出了一种可能的实现方法，即使用缓冲器。该研究基于Nangate Technologies[12]提供的45纳米Spice模型进行。布局后带有寄生信息的Spice模型用于分析产生恒定相移时钟所需的额外面积开销。通过对128个STEM单元施加负载，我们观察到即使对于2.5纳秒的相移，也只需要14个时钟缓冲器。这比拥有第二个或第三个时钟树网络的开销要低得多。研究结果汇总于表3中。

**表3：缓冲器数量与延迟的关系**

| 延迟 (ns) | 缓冲器数量 |
| --- | --- |
| 1.0 | 6 |
| 1.5 | 8 |
| 2.0 | 11 |
| 2.5 | 14 |

### 实验与结果

本节介绍我们在一个两阶段算术流水线和一个五阶段DLX顺序流水线处理器上进行实验的结果。其中，流水线寄存器被增强了故障检测和校正电路。

**实验方法**：为了评估SEM和STEM技术带来的性能提升和容错能力，我们对一个执行64位加法和32位乘法的两阶段算术流水线进行了仿真。加法输出作为乘法运算的乘数。RTL级模型由45纳米OSU标准单元库[15]合成，并通过提取标准延迟格式（SDF）中的时序信息并反注回设计来进行定时标注门级仿真。

**故障注入框架**：图7展示了我们的故障注入方法。在逻辑电路区域内均匀选择2^N（N在实验中为7）个故障注入测试节点。为了确保注入的故障确实产生了单事件瞬态（SET），我们在所有选定节点处插入了异或门。如果选择位置i进行故障注入，则Injecti变为高电平以反转由故障注入节点i驱动的信号A。每次随机选择一个位置进行故障注入，使用N位随机数生成器（LFSR）输出来决定最终的故障位置。

**算术流水线的结果**：静态时序分析报告估计TMAX为9纳秒。为了激进地提高时钟频率，我们将污染延迟增加到3纳秒，导致电路面积增加38%。向待测单元（UUT）注入宽度从500皮秒到900皮秒不等的脉冲。每个周期结束后检查计算结果的正确性，以确保恢复机制有效。每当触发恢复时，记录一次错误。对于STEM技术的评估，我们在10,000个周期内设定了1%的设定错误率目标。运行时，在每个采样间隔结束时将发生错误的数量传达给时钟控制单元。时钟控制单元根据前一采样间隔内的错误率和设定的目标错误率做出决策。我们考虑了一个线性控制方案，在最差情况时钟频率FMIN和超频时钟频率FMAX之间切换时钟频率。对于我们的设计，TMIN设为7纳秒。此范围分为32步，如果错误率低于1%，则时钟频率增加一步，否则减少一步。

**表4：算术流水线的故障注入结果**

| 模式 | 注入瞬态错误 | 检测到的瞬态错误 |
| --- | --- | --- |
| STEM(MAXOC) | 14203 | 1450 |
| STEM(DYNOC) | 14203 | 1449 |
| STEM(NOOC) | 14203 | 1220 |
| SEM | 14203 | 1203 |
| TMR | 14203 | 1203 |

**图8：归一化的算术流水线执行时间**

我们配置了三个不同模式下的算术流水线设计：无超频（NOOC），最大超频（MAXOC），以及动态超频（DYNOC）。对于DYNOC模式，我们从低频设置开始。对于三模冗余（TMR）系统，最差情况频率TMAX设为11纳秒。我们以9纳秒的恒定时钟周期评估SEM方案。图8显示了SEM方案和不同模式下的STEM方案提供的性能改进。从图中可以看出，DYNOC模式相比TMR提供了49%的性能提升，而MAXOC模式提供了55%的性能提升。NOOC模式的性能与SEM相当，SEM比TMR提供23%的性能提升。从表4可以看出，TMR设计的故障屏蔽率高于SEM和STEM设计，因为其工作频率包括时钟相移和选通延迟。因此，TMR以更长的时钟周期运行，导致更多SET脉冲在达到锁存窗口之前衰减。

**DLX处理器的结果**：我们还模拟了三个不同的微基准测试，以评估SEM和STEM（DYNOC模式）方案在一个五阶段顺序流水线处理器上的性能提升和故障覆盖率。该处理器基于DLX指令集架构，采用45纳米技术实现。第一个应用RandGen计算简单的随机数生成，给出0到255之间的数字。MatrixMult应用乘以两个50x50整数矩阵，BubbleSort程序对5,000个半字变量实施冒泡排序。我们采用了与两阶段算术流水线相同的故障注入策略和时钟控制。对于每个基准测试，处理器状态在仿真后被检查以验证计算结果的正确性。从时序报告中，最差情况时钟周期TMAX估计为6纳秒。污染延迟增加了2纳秒，系统以4纳秒的最佳时钟周期运行。由于系统的主要面积消耗来自存储系统，处理器的面积开销小于15%。图9显示了三个不同基准测试的结果，表明常规TMR、SEM和STEM方案的相对执行时间。从图中可以看出，SEM相比TMR提供了26.58%的性能提升，而STEM相比SEM提供了27.42%的性能提升。

**图9：DLX处理器在不同基准测试中的执行时间**

### 相关工作

过去，研究界已经开发了许多硬件容错架构。这些方案即使在无错误操作期间也会带来性能开销，并且不支持激进的时钟频率。LEON-FT处理器[8]采用三模冗余（TMR）方法，复制每个处理器中的触发器，从而带来100%的面积开销。基于冗余多线程的方案通过利用指令级并行性来提供容错能力[19]。这些方法通过牺牲性能和功耗来实现容错能力。采用SEM单元的系统提高了可靠性，并在正常操作期间不会带来任何性能损失。暴力超频不能保证可靠的执行。TEATIME[18]通过采用时序错误避免技术，基于工艺和环境变化动态调整系统频率。通过允许系统在允许时序错误发生的频率下运行，可以进一步增强系统性能。相关工作如Razor[7]和SPRIT3E[16]采用了时序错误容忍技术，以超出最坏情况限制的方式运行。虽然Razor专注于通过降低每个流水线阶段的电源电压来实现更低的能量消耗，但SPRIT3E通过可靠地超频流水线来提高超标量处理器的性能。其他密切相关的工作包括Paceline[9]和CPipe[17]。Paceline在多核处理器系统中采用领导者-检查者配置，能够容忍时序和软错误。CPipe架构通过核心复制和连接来实现可靠的超频，从而提高系统可靠性。采用STEM单元的系统可以在不复制逻辑的情况下提高系统的可靠性和性能。表5总结了我们的方案与其他已提出的方案在逻辑复制（LD）、软错误保护（SEP）、激进时钟（AC）和节能（ES）方面的区别。

**表5：与其他方案的比较**

| 设计 | 逻辑复制 (LD) | 软错误保护 (SEP) | 激进时钟 (AC) | 节能 (ES) |
| --- | --- | --- | --- | --- |
| Razor | × | × | × | √ |
| SPRIT3E | × | × | √ | × |
| Paceline | √ | √ | √ | × |
| CPipe | √ | √ | √ | × |
| SEM | × | √ | × | × |
| STEM | × | √ | √ | × |

### 结论

在本文中，我们开发了两种高效的软错误缓解方案，消除了电路关键路径上的错误检测开销。其中一个方案允许超频并能够容忍时序错误。这些专用寄存器单元提供了接近100%的瞬态故障容错能力。我们的方案能够容忍快速瞬态噪声脉冲，这是单事件瞬态（SETs）的主要特征。这两种方案在无错误操作期间没有显著的性能开销。SEM单元能够忽略假阳性。我们的方法的一个突出特点是能够在检测到错误时立即触发恢复，而无需任何检查点。另一个关键特点是我们的方案能够通过恒定相移值局部生成时钟，增加了激进时钟设计的可能频率设置。此外，我们的局部时钟生成和分配最小化了时钟路由开销。未来，我们将在复杂的流水线系统中实现我们的故障缓解方案，并评估更多代表性基准测试的故障覆盖率和性能。

### 参考文献

[1] M. Alam. Reliability-and process-variation aware design of integrated circuits. Microelectronics Reliability, 2008.

[2] L. Anghel and M. Nicolaidis. Cost reduction and evaluation of a temporary faults detecting technique. In Proceedings of the conference on Design, automation and test in Europe, pages 591–598. Springer, 2000.

[3] T. Austin, V. Bertacco, D. Blaauw, and T. Mudge. Opportunities and challenges for better than worst-case design. In ASP-DAC, volume 1, pages 2–7, January 2005.

[4] S. Borkar et al. Parameter variations and impact on circuits and microarchitecture. In DAC’03: Proceedings of the 40th conference on Design automation, pages 338–342, New York, NY, USA, 2003. ACM.

[5] K. Bowman et al. Impact of die-to-die and within-die parameter variations on the throughput distribution of multi-core processors. In Proceedings of the 2007 international symposium on Low power electronics and design, pages 50–55. ACM New York, NY, USA, 2007.

[6] B. Colwell. The zen of overclocking. IEEE Compututer, 37(3):9–12, March 2004.

[7] D. Ernst et al. Razor: A low-power pipeline based on circuit-level timing speculation. In IEEE Micro, pages 7–18, 2003.

[8] J. Gaisler. A portable and fault-tolerant microprocessor based on the SPARC V8 architecture. Pages 409–415, 2002.

[9] B. Greskamp and J. Torrellas. Paceline: Improving single-thread performance in nanoscale CMPs through core overclocking. In PACT, pages 213–224, September 2007.

[10] D. Mavis and P. Eaton. Soft error rate mitigation techniques for modern microcircuits. Reliability Physics Symposium Proceedings, 2002. 40th Annual, pages 216–225, 2002.

[11] A. Meixner, M. E. Bauer, and D. Sorin. Argus: Low-cost, comprehensive error detection in simple cores. In MICRO’07, pages 210–222. IEEE Computer Society, 2007.

[12] Nangate. http://www.nangate.com.

[13] B. Narasimham et al. Characterization of digital single event transient pulse-widths in 130-nm and 90-nm CMOS technologies. Nuclear Science, IEEE Trans. on, 54(6):2506–2511, Dec. 2007.

[14] P. Shivakumar et al. Modeling the effect of technology trends on the soft error rate of combinational logic. In DSN, pages 389–398, June 2002.

[15] J. Stine et al. FreePDK: An open-source variation-aware design kit. In Proc. of the 2007 IEEE Intl Conference on Microelectronic Systems Education, pages 173–174, 2007.

[16] V. Subramanian, M. Bezdek, N. D. Avirneni, and A. Somani. Superscalar processor performance enhancement through reliable dynamic clock frequency tuning. In DSN, pages 196–205, June 2007.

[17] V. Subramanian and A. Somani. Conjoined pipeline: Enhancing hardware reliability and performance through organized pipeline redundancy. In PRDC, Dec 2008.

[18] A. K. Uht. Uniprocessor performance enhancement through adaptive clock frequency control. IEEE Transactions on Computers, 54(2):132–140, February 2005.

[19] T. Vijaykumar, I. Pomeranz, and K. Cheng. Transient-fault recovery using simultaneous multithreading. Pages 87–98, 2002.