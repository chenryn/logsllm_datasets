show the overhead of reconstructed executions. C2SR incurs
negligible runtime overhead (less than 3% for all cases and
0.8% on average) for recording. For reconstructed executions,
C2SR incurs only 2% runtime overhead on average, which
is slightly slower than recording as C2SR needs to redirect
syscalls to the reconstructed resources (§ IV-D). In addition, as
SPEC CPU2017 programs are mostly deterministic, we do not
observe any instances that C2SR uses the timeline projection
adjustment algorithm, and every reconstructed execution suc-
cessfully reproduced the target execution in their ﬁrst attempts.
In addition, our buffering optimization (Details in § IV-C)
contributes to the low performance overhead.
TABLE III.
RUNTIME OVERHEAD ON JS/DOM BENCHMARKS.
Benchmark
Octane [78]
Speedometer [90]
Firefox
1.93%
0.5%
Arora Midori
1.62%
1.31%
0.5%
1.83%
Qupzilla
0.8%
1.52%
Opera
0.9%
3.84%
TABLE IV.
RUNTIME OVERHEAD ON WEB-SERVER BENCHMARKS.
Overhead (Normalized)
Apache
2.7%
Nginx
3.2%
Lighttpd
3.1%
Syscall-intensive Client Applications. As SPEC CPU2017
and web browsers/clients benchmarks are not syscall intensive,
we choose a few client applications to measure the over-
head of C2SR. In particular, we measure runtime overhead
while the applications are initializing, as initialization phases
of applications are often syscall intensive. We pick 5 web
browsers (Firefox, Midori, Arora, Qupzilla, and Lynx) and
Thunderbirds, Skype, and HexChat.
For all applications, as they have the graphical user inter-
face (GUI), we consider the initialization is complete when
the ﬁrst GUI component is created. For each program, we run
the application 10 times to measure overhead during recording
and reconstruction, and then we take the average.
Fig. 11. Runtime overhead on Client Applications during Initialization.
Fig. 11 shows the result. The average is 5.47% for record-
ing and 8.31% for reconstruction. Large applications such
as Firefox (8.48% and 14.86%), Thunderbirds (7.85% and
12.58%), and Skype (7.47% and 9.49%) incur more overhead
than others as they issue more syscalls during initialization
(e.g., loading conﬁguration ﬁles and connecting servers to
load user proﬁles). We believe the overhead is reasonable as
the frequency of syscall invocations becomes lower after the
initialization, meaning that in practice, the overhead of C2SR
is lower than the overhead presented in Fig. 11.
B. Space Overhead
We measure the space overhead of execution traces gen-
erated by C2SR. Note that the traces include all inputs and
outputs to/from a program, meaning that the traces always take
more space than all the inputs and outputs.
SPEC CPU2017. Most SPEC CPU programs have multiple
reference inputs. We use all of them and add all the logs
to measure the space overhead as shown in Table V. The
second column shows the total accumulated trace size for
each program. The next three columns show the size of non
I/O syscalls, input related syscalls, and output related syscalls
in the trace. Note that the size of I/O (input and output)
Fig. 10. Runtime overhead on SPEC CPU2017.
Web Browsers and Web Servers. We evaluate the recording
performance of C2SR on web-browsers using JS/DOM bench-
marks as shown in Table III. Speciﬁcally, we use Octane [78]
and Speedometer [90] to measure the performance of each
browser application with and without C2SR’s recorder. The
numbers are normalized and represent overhead with respect
to the performance without C2SR. In most cases, C2SR slows
down the execution by less than 2%, except the Opera in
Speedometer case which results in 3.84% slow down. The
results conﬁrm that C2SR is highly practical, causing low
overhead. We also evaluate C2SR’s recording performance on
three popular web-servers leveraging the apache benchmark
program [1]. Speciﬁcally, we use the tool to generate 1,000,000
requests with 8 threads and then measure the elapsed time
on each web server with and without C2SR’s recorder. As
shown in Table IV, the recoding overhead is negligible. Note
that processing a trace to create virtualized resources is an
ofﬂine process hence does not affect the runtime performance.
11
0%2%4%perlbenchgccmcfomnetppxalancbmkx264deepsjengleelaexchange2xzperlbenchgccmcfomnetppxalancbmkx264deepsjengleelaexchange2xzSPECspeedSPECrateRecordingReconstructed Execution8.48%5.95%3.24%4.08%2.73%7.85%7.47%3.98%5.47%14.86%8.48%5.08%5.81%3.02%12.58%9.49%7.16%8.31%0%3%6%9%12%15%RecordingReconstructed ExecutionTABLE V.
SPACE OVERHEAD ON SPEC CPU2017.
Program
perlbench
gcc
mcf
omnetpp
xalancbmk
x264
deepsjeng
leela
exchange2
xz
Total
Zip
Raw (Total)
57.7 MB
218.3 MB
2.2 MB
56.8 KB
119.1 MB
379.8 MB
45.9 KB
1.5 MB
15.4 KB
16.97 MB
795.6 MB
154.9 MB
Non I/O
1,009 KB
11.8 MB
85 B
9.9 KB
3.9 MB
112 KB
40 B
451 B
888 B
99 B
16.9 MB
3.1 MB
Input
50.3 MB
92.4 MB
2.2 MB
46.8 KB
55.4 MB
375.1 MB
1,058 B
51.3 KB
2.9 KB
16.9 MB
592.3 MB
118.9 MB
Output
6.4 MB
114.1 MB
2.5 KB
104 B
59.7 MB
4.6 MB
44.8 KB
1.45 MB
11.6 KB
3.1 KB
186.4 MB
32.9 MB
related logs are almost identical to the I/O contents (e.g.,
input and output ﬁle sizes). Non I/O column shows a space
overhead without the I/O contents. From the total, Non I/O
syscalls only takes 2.12% of the total trace size. This shows
that C2SR does not cause much additional space overhead
beyond logging input and output. Input is required to drive
reconstructed execution and output is needed for verifying the
reconstructed execution is successful.
Fig. 12 presents more detailed analysis of the space over-
head caused by C2SR. It illustrates the percentage of input,
output, and non-I/O syscalls in execution traces. The y-axis
represents each program and the x-axis shows the percentage.
Observe that all the programs except for omnetpp, more than
90% of the trace is occupied by input and output. For omnetpp,
non-I/O syscalls take 17.4% because the total size of the trace
is small (56.8 KB, as shown in Table V), making the proportion
of the non-I/O syscalls signiﬁcant.
Fig. 12. SPEC CPU2017 Space Overhead Breakdown.
TABLE VI.
SPACE OVERHEAD ON THE CLIENT PROGRAMS.
Firefox
0.9 GB
39.8 MB
Thunderbirds
Skype
126.1 MB
8.1 MB
497.2 MB
36.8 MB
Yakyak
314.4 MB
20.2 MB
Apache
433.3 MB
23.8 MB
nginx
289.9 MB
16.7 MB
Raw
Zip
Representative Client Programs. SPEC CPU2017 pro-
grams are computation-intensive, but not syscall
intensive.
As C2SR’s space overhead is dependent on the number of
syscall
invocations, we run an additional experiment with
representative client programs. We run 5 heavy websites
(Facebook, Twitter, CNN, Gmail, and New York Times) for
20 minutes on Firefox (e.g., browsing 37 webpages, reading
7 news articles, searching 10 keywords on Google), reading
and writing emails for 20 minutes in Thunderbirds, accessing
HTML/PHP ﬁles on web servers powered by Apache and
Nginx, and using Skype and yakyak (for Google Hangout)
to send/receive text messages/ﬁles for 20 minutes. As there is
no standard workload available for them, we manually use the
applications actively for the given amount of time. The results
are shown in Table VI. The ﬁrst row shows the trace sizes and
the second row represents compressed (via zlib [105]) trace
sizes. While the size of traces is non-trivial, considering that
all input/output contents (e.g., contents of network servers)
must be stored for post-mortem forensic analysis, we argue
that our space overhead is acceptable for our purpose. Note that
the compression signiﬁcantly reduces the log size. We observe
that the compression works better for real-world applications
because, in part, they have more repetitive trace patterns.
C. Partial Execution Reconstruction
it
To evaluate the effectiveness of C2SR’s partial execution
reconstruction, as shown in Table VII, we use 5 server (top
5 rows) and 5 client programs (bottom 5 rows). For each
program, we record an execution and then reconstruct an
execution of a single (randomly picked) request. Speciﬁcally,
we pick 10 random requests (e.g., a single web-page view in
a web browser or a single session in a server program) and
present a median value in Table VII. Note that the number of
syscalls that need to be reconstructed to successfully reproduce
a single request is very small (i.e., less than 1% of the entire
syscalls). As C2SR does not need to run a target program
from the beginning,
is highly efﬁcient and effective in
reproducing partial executions from a long-running application
for post-mortem analysis. Also, the fourth column shows the
number of syscalls that access timing-dependent resources. In
web-browsers, there are often more timing-dependent related
syscalls as those are often used in GUI-related operations
(e.g., user interaction, animations). In server programs, those
are often used for performance proﬁling and logging func-
tionalities. The last two columns (i.e., Recon. and Syscall)
show the number of reattempted execution reconstructions
and the number of syscalls (on timing-dependent resources)
that were reassigned alternative timezones. In general, client
programs (e.g., web-browsers) require more retrials (e.g., 5
∼ 14) while server programs require at most 3 retrials. Even
in the worst case, Firefox, it only retries 14 times. Note that
the numbers in the sixth columns are the ones that C2SR’s
timeline projection adjustment algorithm searched for. Our
manual inspection reveals that the retrials are caused by the
frequent use of timing-dependent resources for en/decryption
and third-party JS libraries.
TABLE VII.
RECONSTRUCTION OF LONG-RUNNING PROGRAMS.
Program
# of syscalls
# of retrials
Recon.β
Syscallsγ
Total
Reconstructed
482.6M 381.5K (0.07%)
261.7M 351.4K (0.13%)
68.3K (0.9%)
75.6M
45.5K (0.08%)
51.9M
2.3K (0.04%)
5.5M
141 (0.002%)
6.9M
107 (0.001%)