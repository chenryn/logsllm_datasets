本文主要从Jetty的两个WEB-INF信息泄露漏洞CVE-2021-28164和CVE-2021-34429，来分析如何通过编码和相对路径来绕过对敏感信息的校验，以及Jetty中对URL的PATH的解析方式和存在的问题。
## 漏洞信息
Jetty作为Eclipse基金会的一部分，是一个纯粹的基于Java的网页服务器和Java Servlet容器，其支持最新的Java Servlet
API，同时支持WebSocket，SPDY，HTTP/2协议。
在Jetty9.4.37版本中，为了符合[RFC3986](https://datatracker.ietf.org/doc/html/rfc3986#section-3.3)中的规范，选择性地支持可能有歧义解释的URI，默认模式允许URL编码，简单看下RFC3986（替代[RFC2396](https://datatracker.ietf.org/doc/html/rfc2396#section-3.3)）的规定
`.`和`..`称为点段，都是为路径名层次结构中的相对引用而定义的，它们在一些操作系统文件目录结构中分别代表当前目录和父目录。但是与文件系统不同的是，这些点段仅在
URI 路径中解释层次结构，并作为解析过程的一部分被删除。也就是说在解析URI路径时，需要先处理`.`和`..`
Jetty为了符合这种处理方式，却导致了一系列的漏洞产生，首先是在9.4.39版本中修复了CVE-2021-28164，然后出现了新的绕过，其又在9.4.43版本中修复了CVE-2021-34429。
## 漏洞利用
本文将选取Jetty 9.4.37、9.4.40、9.4.43三个版本来解析漏洞如何发生与其如何修复。
### CVE-2021-28164
此漏洞环境可以[vulhub](https://github.com/vulhub/vulhub/blob/master/jetty/CVE-2021-28164/README.zh-cn.md)上搭建，是9.4.37版本，`/%2e/WEB-INF/web.xml`直接可以读取web.xml
payload：`/%2e/WEB-INF/web.xml`
### CVE-2021-34429
本地搭建环境Jetty 9.4.40（ps:懒得新建项目，勿在意项目名）
  * payload1：`/%u002e/WEB-INF/web.xml`
这个payload可以看作CVE-2021-28164的绕过
  * payload2: `/.%00/WEB-INF/web.xml`
这个payload是由多个解析问题导致
  * payload3：`/a/b/..%00/WEB-INF/web.xml` ( **这里是两层，你没有看错** ，下文分析原因)
## 漏洞分析
接下来我们将从源码角度，依次分析漏洞如何产生，由于CVE-2021-34429中的payload1是对CVE-2021-28164的绕过，我们直接调试Jetty
9.4.40版本。这里使用远程调试的方式，一开始搜教程一直调试无法成功，最后发现端口从8787设置到4000行了，参考[how-to-debug-in-jetty-source-code](https://stackoverflow.com/questions/27311620/how-to-debug-in-jetty-source-code)，具体原因未研究。
由于漏洞主要发生在URI解析过程中，所以我们可以直接在`org.eclipse.jetty.http.HttpURI.java:Parse`函数中下断点，开启调试
然后使用`/%u002e/WEB-INF/web.xml`发包，跟踪代码执行
当解析完成path之后，会先调用`canonicalPath`函数，这是漏洞产生的第一个重点函数，主要是用于路径的规范化，也就是处理`.`和`..`，我们先直接跳过
由于是在规范化点段，然而并没有出现点段，只含有%u编码后的`.`，结果依然是原来的路径，接着我们进入`decodePath`函数
    public static String decodePath(String path, int offset, int length) {
            try {
                Utf8StringBuilder builder = null;
                int end = offset + length;
                label67:
                for(int i = offset; i = end) {
                            throw new IllegalArgumentException("Bad URI % encoding");
                        }
                        char u = path.charAt(i + 1);
                        if (u == 'u') {
                            builder.append((char)('\uffff' & TypeUtil.parseInt(path, i + 2, 4, 16)));
                            i += 5;
                        } else {
                            builder.append((byte)(255 & TypeUtil.convertHexDigit(u) * 16 + TypeUtil.convertHexDigit(path.charAt(i + 2))));
                            i += 2;
                        }
                        break;
                    case ';':
                        if (builder == null) {
                            builder = new Utf8StringBuilder(path.length());
                            builder.append(path, offset, i - offset);
                        }
                        do {
                            ++i;
                            if (i >= end) {
                                continue label67;
                            }
                        } while(path.charAt(i) != '/');
                        builder.append('/');
                        break;
                    default:
                        if (builder != null) {
                            builder.append(c);
                        }
                    }
                }
                if (builder != null) {
                    return builder.toString();
                } else if (offset == 0 && length == path.length()) {
                    return path;
                } else {
                    return path.substring(offset, end);
                }
            } catch (NotUtf8Exception var8) {
                LOG.debug(path.substring(offset, offset + length) + " " + var8, new Object[0]);
                return decodeISO88591Path(path, offset, length);
            } catch (IllegalArgumentException var9) {
                throw var9;
            } catch (Exception var10) {
                throw new IllegalArgumentException("cannot decode URI", var10);
            }
        }
可以看到，此解码函数，支持%编码和%u编码，并且支持`;`作为param的解析
解析完的路径自然就变成了`/HelloTomcat/./WEB-INF/web.xml`，那最后怎么绕过敏感文件校验的呢？我们需要继续调试。
在一波操作之后，经过漫长的调用链
找到了在`org.eclipse.jetty.server.handler.ContextHandler.java`的`isProtectedTarget`函数中的校验代码。
最终会拿刚才`decodePath`也就是`/HelloTomcat/./WEB-INF/web.xml`截取项目名之后的路径进行保护文件的校验
能够看到，默认的保护列表有两个`/web-inf`和`/meta-inf`，我们继续进入
很明显，也进行了小写的转换，但是在校验路径是否是以保护文件夹开头时，是直接拿decodePath进行的校验，当然`/./WEB-INF/web.xml`并不是以`/web-inf`开头，此时就解释了为什么一个编码的`.`会绕过安全校验，但是我们还是没看到，为什么会读取到web.xml，需要接着调试
又经过一个漫长的调用链，可以同样在`ContentHandler.java`的`getResource`函数中找到答案
在获取资源之前，调用的相同的规范路径的函数`canonicalPath`，当然会将`/./WEB-INF/web.xml`规范化未`/WEB-INF/web.xml`，从而完成了整个漏洞的利用。
到这里，payload1完成分析，简单理一下
  1. 输入path=`/HelloTomcat/%u002e/WEB-INF/web.xml`
  2. 规范化`canonicalPath(path)` ==> path= `/HelloTomcat/%u002e/WEB-INF/web.xml`
  3. URL解码`decodePath(path)` ==> path=`/HelloTomcat/./WEB-INF/web.xml`
  4. 取target=`/./WEB-INF/web.xml`
  5. 安全校验`isProtectTarget(target)` ==> target= `/./WEB-INF/web.xml`并不是以`/web-inf`或`/web-meta`开头，通过校验