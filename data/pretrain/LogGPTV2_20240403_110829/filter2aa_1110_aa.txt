© 2013 Cisco and/or its affiliates. All rights reserved. 
Page 1 of 20 
White Paper 
Examining the Bitsquatting Attack Surface 
Bit errors in memory, when they occur in a stored domain name, can direct Internet 
traffic to the wrong domain potentially compromising security.  When a domain name 
one bit different from a target domain is registered, this is called “bitsquatting”.  This 
paper describes several previously unknown forms of bitsquatting, and also proposes 
potential mitigations which do not involve the mass registration of additional bitsquat 
domains. The conclusion is that the possibility of bitsquat attacks is more widespread 
than originally thought, but several techniques exist for mitigating the effects of these 
new attacks. 
Introduction 
In the early 1980s, the 7-bit ASCII table became the de facto means of representing text inside computers.  
Several of the specific bitsquats that are possible today owe their very existence, or their non-existence, to the 
layout of the ASCII table.  The 7-bit ASCII code is actually not a product of modern computers, but is descended 
from the early 5-bit “Baudot” codes used in the late nineteenth century and early twentieth centuries by printing 
telegraph machines.  When computers became much more prevalent during the 1950s, it became necessary to 
standardize the representation of characters between different devices so they could better communicate.  By the 
1960s, the 5-bit codes used by the telegraph companies had given way to multiple  6-bit codes.  Finally in 1963, a 
seven bit ASCII code was born which was essentially an amalgamation of the FIELDATA military specification, plus 
the existing ITA-2 telegraph alphabet [1][2]. 
If you analyze the layout of the ASCII table, some remnants of the old teletypes can be found.  For example 
occupying the very last slot in the 7-bit ASCII table is the “DEL” or Delete character.  In the olden days of punched 
tape and printing telegraphs, errors could be corrected by punching all the possible holes in a particular row of the 
tape.  So, to this day the “DEL” character occupies the very last character in the 7-bit ASCII code, as it is 
represented by a string of all ones.  It is in the context of the ASCII binary encoding of characters that we find our 
potential bitsquats – domains that are one binary digit different than another domain.   
© 2013 Cisco and/or its affiliates. All rights reserved. 
Page 2 of 20 
A memory error is a condition that occurs any time one or more bits being read from memory have changed state 
from what was previously written.  Memory errors can be caused by a variety of conditions including cosmic 
radiation, operating devices outside their recommended environmental specifications, defects in manufacturing, 
and even nuclear explosions.  While any bit in memory may be subject to errors, it is when bit errors occur inside of 
a stored domain name that subsequent Internet traffic may be misdirected.  For example, by changing only one bit 
in the underlying ASCII representation, a popular target domain such as “twitter.com” can become the bitsquat 
domain “twitte2.com”.  An attacker can take advantage of these bit errors by registering the bitsquat domain, and 
then intercepting data destined for the target domain, returning malicious data to the client, or performing other 
similar malicious activity.  
In the original published research on bitsquatting, Dinaburg noted that the majority of the estimated 600,000 
memory errors per day across the Internet are useless to a remote attacker [3].  Dinaburg therefore concluded that 
bitsquatting is most effective against the most frequently resolved domain names, since those domains are the 
most likely to appear in memory when bit errors occur.  Our research supports this claim.  However Dinaburg’s 
estimate of bit error rates was extremely conservative [4] and since that time most consumer grade computing 
devices being manufactured continue to lack error correcting memory.  Further, the amount of memory per device 
and number of devices connected to the Internet are both increasing.  Cisco estimates that there will be 37 billion 
“intelligent things” connected to the Internet by 2020 [5].  This is all good news for bitsquatters, as it means that 
domains that were previously not considered “popular” enough to attack will actually produce a useful amount of 
bitsquat traffic. 
Additionally, it is not just the domain names themselves which are susceptible to bit errors in memory.  Bit errors 
can and do occur anywhere.  Sometimes bit errors occur simultaneously in multiple different locations.  In fact, 
Dinaburg’s collected DNS data showed bit errors occurring in requested DNS record type values (ex. A, MX, NS, 
etc.) [6].  It is a certainty that the effects of bit errors are not confined to domain names themselves.  Therefore bit 
errors must also affect commonly used Internet application layer protocols which rely on domain names, such as 
SMTP, SIP, or HTTP for example. 
This all adds up to a landscape where bitsquatting attacks are more practical than ever before.  In Section I, this 
paper demonstrates some previously unknown bitsquatting techniques using examples from real bitsquat domains 
that have been registered.  Section II, suggests potential bitsquatting mitigations that can be used to help minimize, 
or even eliminate the potential for bitsquatting attacks altogether. 
© 2013 Cisco and/or its affiliates. All rights reserved. 
Page 3 of 20 
Section I – New Bitsquatting Attack Vectors 
Subdomain Delimiter Bitsquatting 
RFC1035 declared the valid syntax for domain name labels, which was later refined under RFC1123. The following 
BNF notation describes valid domain name label syntax.  Essentially, the only allowed characters are A-Z, a-z, 0-9, 
and the hyphen. 
 ::=  | " "   
 ::=  |  "."    
 ::=  [ [  ]  ]   
 ::=  |     
 ::=  | "-"   
 ::=  |    
 ::= any one of the 52 alphabetic characters A through Z in upper case 
and a through z in lower case   
 ::= any one of the ten digits 0 through 9 
However when checking for bitsquat domains, limiting the search to characters in  neglects an 
important character that is also valid inside domain names: the dot character.  This first new bitsquatting technique 
relies on bit errors which result in a letter “n” (binary 01101110) becoming a dot “.” (binary 00101110) and vice-
versa.  The technique functions because dots are used to delimit subdomains.   
Figure 1.    A comparison of the ASCII representation of the dot '.' versus the letter 'n' 
There are actually two distinct varieties of subdomain delimiter bitsquats.  The first type occurs when there is a 
letter “n” present in the second level domain name.  Domain names that contain a letter “n” character with 2 or 
more characters after the letter “n” are potential targets.  The resulting bitsquat domain is shorter than the target 
domain.  An example is the target domain “windowsupdate.com”.  When the letter ‘n’ in this domain changes to a 
dot, the traffic is directed at the bitsquat domain "dowsupdate.com" instead as demonstrated in Figure 2. 
© 2013 Cisco and/or its affiliates. All rights reserved. 
Page 4 of 20 
Figure 2.    An example from the bitsquat domain "dowsupdate.com" 
The second variety of subdomain delimiter bitsquat lengthens the 2nd level domain name and relies on the 
presence of 3rd level subdomains.  An attacker can convert the dot separating the 3rd and 2nd level domain names 
into a “n” character, and register the resulting 2nd level domain. For an example, consider the hostname 
“s.ytimg.com” which is a host at the content delivery network used by YouTube.  The resulting bitsquat domain is 
“snytimg.com”.  Indeed, bitsquat traffic is going to this domain, and the HTTP requests for images have a Referrer 
HTTP header set to YouTube as shown in Figure 3.   
© 2013 Cisco and/or its affiliates. All rights reserved. 
Page 5 of 20 
Figure 3.    An example using the bitsquat domain 'snytimg.com" 
Even less popular domains are susceptible to these subdomain delimiter bitsquatting techniques.  Below are some 
example DNS requests meant for the State of New York’s domain: state.ny.us.  Given that the .us TLD is also 
available for general public registration, it makes little sense for government organizations to use these TLDs 
because of bitsquatting or malicious typosquatting possibilities.  This attack against state.ny.us would not be as 
easy if the domain was hosted at .gov instead; the more restrictive .gov registration process shields organizations 
that are entitled to use it from casual attackers.  
Figure 4.   An example using the bitsquat domain "statenny.us" 
URL delimiter squatting – “/” and “o” 
Another useful technique for identifying potential bitsquat domains is to consider not only the valid characters in the 
domain names themselves, but also to consider the context in which a domain name might appear.  One very 
popular context for domain names is within a URL. Inside a typical URL, forward slash characters “/” will act as a 
delimiter separating the scheme from the hostname from the URL path.  The forward slash character (binary 
00101111) can by the flip of one bit become the letter “o” (binary 01101111), and vice-versa.   
Figure 5.   A comparison of the ASCII representation of the forward slash '/' versus the letter 'o' 
© 2013 Cisco and/or its affiliates. All rights reserved. 
Page 6 of 20 
The first bitsquatting technique in this category relies on the letter "o" inside the target domain becoming a forward 
slash, effectively terminating the domain name. This form of bitsquat is possible whenever the letter "o" appears in 
a domain name, and the preceding characters form a valid domain name.  For an example, consider the URL 
https://ecampus.phoenix.edu/.  If the letter "o" in the word “phoenix” is flipped to a “/” in memory, then the 
resulting corrupted URL will be https://ecampus.ph/enix.edu/.  The traffic for that URL will be directed to the 
Philippines domain ”ecampus.ph” instead of “phoenix.edu”.  Perhaps the most interesting aspect of this specific 
technique is that it works against target domains that are registered under different, non-public gTLDs like 
“.edu”, “.gov”, or “.mil”.   
Figure 6.   An example using the bitsquat domain "ecampus.ph" 
And here is another example of the same technique, this time stemming from the site “trading.scottrade.com”: 
Figure 7.  An example using the bitsquat domain "trading.sc" 
The bidirectional nature of bits flipping means that the slashes that delimit the parts of the URL can also flip to 
become a letter “o”, however only bit flips of the second or third slashes will produce a viable bitsquat.  Bit flips of 
the second slash yield bitsquat domains when no 3rd level domain names are generally present.  For example, if 
the second slash in the URL http://slashdot.org/ flips a bit in memory it can become http:/oslashdot.org/.  While 
that syntax is not a valid URL syntax, modern browsers helpfully correct the error in the double slash authority 
delimiter, and direct traffic to the bitsquat domain “oslashdot.org”.  
Figure 8.  An example using the bitsquat domain "oslashdot.org" 
© 2013 Cisco and/or its affiliates. All rights reserved. 
Page 7 of 20 
When no 3rd level subdomain is used, the bitsquat domain is formed by simply adding the letter “o” to the beginning 
of that 2nd level domain name.  Domains that begin with the letter “o” are also at risk in a similar fashion.  For if the 
URL http://oreilly.com/ experiences a bit error in memory, and the leading letter “o” becomes a slash, then the 
resulting URL would be http:///reilly.com/.  This is bad syntax, but yet again, the error in the double slash authority 
delimiter is in fact corrected by the browser, and the traffic directed to racle.com. 
Finally, bit errors that corrupt the 3rd slash in a URL into a letter “o” are 100% dependent on the path in the URL to 
terminate in a valid domain name.  For an example, consider a hypothetical URL such as:  
    http://www.example.com/cisco.com?stuff=1   
If the 3rd slash experiences a bit error and becomes a letter "o", the URL would instead read: 
   http://www.example.comocisco.com?stuff=1  
This URL would direct its traffic to the bitsquat domain "comocisco.com".  These types of bitsquats are exceedingly 
rare, but definitely possible if the URL had the right format and was popular enough. 
URL delimiter squatting – “#” and “c” 
When considering the other valid delimiter characters within a URL that might result in a bitsquat, we must also 
include the “#” character.  Typically, inside a URL the pound character “#” will denote anchor tags within the current 
web page.  It is possible for the letter “c” to change one binary digit to become the “#” character, and when this 
happens inside of a domain name it can create additional bitsquats.  While strictly speaking the syntax is not valid, 
many browsers will helpfully correct the link, as indicated by the status bar at the bottom.  
Figure 9   Notice the hover link at the bottom.  The traffic will not be directed to uscg.mil. 
© 2013 Cisco and/or its affiliates. All rights reserved. 
Page 8 of 20 
Figure 10 This time the c in .cn flips to a "#".  Despite the trailing dot after “com” the bitsquat link still functions 
TLD bitsquatting 
A search for bitsquats cannot be focused exclusively on 2nd level domain names. If bit errors can occur anywhere, 
then they can also occur inside the Top Level Domain (TLD) of a domain name.  Most of the generic TLDs (gTLDs) 
have no bitsquats whatsoever, however there are two gTLDs that contain URL delimiter type bitsquats stemming 
from the presence of the letter “o”.  These are the gTLDs “.pro” and “.coop” with corresponding URL delimiter type 
bitsquats at the country code TLDs (ccTLDs): .pr (Puerto Rico) and .co (Colombia) respectively.  Fortunately, the 
limited popularity of the .pro and .coop gTLDs inside URLs seems to preclude the possibility of finding many useful 
bitsquats in this space.  So generally gTLDs are safe, but what about other TLDs?  There happen to be several 
ccTLDs where bitsquats exist.  It is interesting to note that some ccTLDs have no valid bitsquats while other 
ccTLDs have many.  After surveying all valid Internet TLDs and checking the number of possible bitsquats, the 
following was found: 
All 44 Internationalized Domain Name (IDN) TLDs are safe 
4 ccTLDs are safe (nl –Netherlands, py –Paraguay, uy –Uruguay, za –S.Africa) 
15 ccTLDs have one bitsquat (incl. uk –United Kingdom, hk –Hong Kong) 
33 ccTLDs have two bitsquats (incl. us –United States, de –Germany, jp –Japan) 
43 ccTLD have three bitsquats (incl. fr – France, no – Norway, va –Vatican 
56 ccTLDs have four bitsquats (incl. ru –Russia, kr –South Korea) 
43 ccTLDs have five bitsquats (incl. ca –Canada, it –Italy, eu –Europe) 
37 ccTLDs have six bitsquats (incl. es –Spain, gr –Greece, in –India) 
14 ccTLDs have seven bitsquats (incl. co –Colombia, ch –Switzerland) 
2 ccTLDs have eight bitsquats (cm –Cameroon, cn –China)  
1 ccTLD has nine bitsquats (cg –Republic of Congo) 
1 ccTLD has ten bitsquats (ci –Ivory Coast) 
© 2013 Cisco and/or its affiliates. All rights reserved. 
Page 9 of 20 
One ccTLD bitsquat that was registered and tested was a ccTLD bitsquat of the domain “kremlin.ru” (Russia).  The 
bitsquat domain in this case is ‘kremlin.re’ (Reunion Island).  Figure 9 is an example of a bitsquat http request and 
in Figure 10 is a screen shot of the page that was hosted on the kremlin.ru domain at the time. 
Figure 11.  An example using the bitsquat domain "kremlin.re" 
Figure 12.  The intended web page at kremlin.ru. 
An example of another bitsquat domain that was registered for which bitsquat-related requests were received is 
europa.mu.  The domain europa.mu is one of the ccTLD bitsquat domains of europa.eu, a domain belonging to 
European Parliament.  Figure 11 demonstrates some DNS MX requests received for subdomains of europa.eu. 
© 2013 Cisco and/or its affiliates. All rights reserved. 
Page 10 of 20 
Figure 13.  An example using the bitsquat domain "europa.mu" 
Future gTLD Bitsquatting 
Besides the bitsquatting that is possible using current TLDs, in 2013 ICANN is approving a large number of new 
gTLDs.  Some of these proposed new gTLDs contain subdomain delimiter bitsquats for the entire TLD.  
Possessing one of these would allow the attacker to mount a bitsquat attack against all domains registered under 
the target gTLD. 
    .cleaning -> clea.ing (new gTLD .ing) 