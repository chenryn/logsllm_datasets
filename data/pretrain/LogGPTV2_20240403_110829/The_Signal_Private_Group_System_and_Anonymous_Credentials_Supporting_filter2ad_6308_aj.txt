exactly as the honest server would. It will not fail because t is invalid, by the unforgeability
of the auth credential (unless A is using an expired credential, in which case S fails as the
honest server would). Unforgeability of the proﬁle key credential and security of BlindIssue
ensure that the proﬁle key is valid or Kbad and is registered with F.
Authentication by comparing the ciphertext to the stored value is sound because the
ciphertext is bound to a valid user that A created by the security of the authentication
credentials, and correct because the encryption is deterministic and has unique ciphertexts,
and
In the simulation, S relies on F to ensure that users are not added twice to the group.
In the real world, this is ensured because encryption is deterministic and has unique ci-
phertexts, by comparing two ciphertexts the server can tell whether they encrypt the same
UID. So S is consistent with the honest server in this regard as well.
FetchGroupMembers(gid , t) from A S receives (EA1, EA2) and the AuthCredential-
If the proofs are valid, and gid exists, and (EA1, EA2) is in S’s list of
Presentation.
ciphertexts for gid , authentication succeeds. S can use the group secret key to decrypt
the UID. Decryption succeeds if the proofs are valid, and because the encryption is correct
under adversarially chosen keys. If the UID, denoted uid A was not created by A, then S
fails, denote this event E1.
S makes the call to F: FetchGroupMembers(gid , t) as uid A. If F returns 0 then S fails,
denote this event E2. Otherwise S receives a list (uid 1, K1), . . . , (uid n, Kn). Now S must
create a list of ciphertexts to return to A. For UIDs that A created, return the cached
ciphertext, and for honest users, create the ciphertext using the group secret key. Note
that the cached ciphertexts contain any invalid proﬁle keys A may have used, and for these
F returns Kbad to S, which S does not send to A. By the unique ciphertexts property, the
ciphertexts for honest users that S re-creates are identical to those created in the honest
execution of the real system.
UpdateProﬁleKey(gid , t) from A As in FetchGroupMembers, S can recover the UID,
uid A from the ciphertext, and authenticate uid A as a belonging to the group as the real
server would (but ignoring the proﬁle key ciphertext if uid A is an invited member of
the group). By decrypting the proﬁle key ciphertext, S can determine whether the pro-
ﬁle key K for uid A is valid, and sets K = Kbad if K is invalid. Then S calls to F:
52
UpdateProﬁleKey(gid , K, t) as uid A.
F can fail is if K is not registered as a proﬁle key for uid A. Security of the proﬁle
credential ensures that A only has a credential for a K that was called to GetProﬁleKey-
Credential, which in turn registers a key with F. If K is valid, then it has been sent to F,
otherwise F has Kbad, so S’s call to F will succeed with overwhelming probability.
Other functions The remaining functions are similar to the ones above; InviteToGroup
and DeleteGroupMember are similar to AddGroupMember, and DeleteGroup is simple once
the caller has authenticated to the group (which is done in, e.g., FetchGroupMembers).
53
B.2 Malicious server
Our deﬁnition implies a form of selective opening security from the underlying encryption.
In particular, we need that if the adversary is ﬁrst given encryptions under a variety of
diﬀerent keys, and then allowed to request some of the decryption keys, the remaining
ciphertexts remain secure. This is because the malicious server can ﬁrst see the ciphertexts
stored for each group, and then choose which groups to try to attack (either by corrupting
existing members or convincing them to add a malicious user), we require that the other
groups remain secure.
We could alternatively deﬁne a weaker version of our functionality which would require
the adversary to declare when he creates a group whether it will ever have malicious users.
In that case the properties deﬁned in section 7.2 would be suﬃcient. Here though we will
focus on the stronger deﬁnition.
More formally, the selective opening property we need is as follows:
Deﬁnition 15. For a encryption scheme with algorithms (KeyGen, Enc Dec), consider the
following two experiments between a challenger C, a simulator S and an attacker A.
Real Experiment:
1. A makes queries to C.
• New key query: for query i, C generates new (k(i), pk(i)) ← KeyGen(1κ). It
sends pk(i) to A and stores k(i).
• Encrypt query: A submits index i and message m(i,j) and C outputs c(i,j) =
Enc(k(i), m(i,j)).
• Corrupt Key query: A submits index i and receives k(i).
2. A outputs a bit b.
Simulated Experiment:
1. A makes queries to C.
A.
• New key query: C calls S to obtain (pk(i)) ← KeyGen(1κ). It sends pk(i) to
• Encrypt query: A submits index i an message m(i,j). C stores m(i,j) and
send i to S to obtain c(i,j), which it returns to A.
• Corrupt Key query: A submits index i. C sends all the messages encrypted
under this key, i.e. m(i,1), m(i,n) for some maximum n to S, and receives
k(i) which it sends to A.
2. A outputs a bit b.
We say that the scheme satisﬁes selective opening if for every A there exists a simulator
S such that A’s probability of producing 1 in both games diﬀers by at most a negligible
function.
54
This property is impossible in the standard model by an information theoretic argu-
ment: there are more possible sets of plaintexts than there are decryption keys, so there
must be a noticeable fraction of plaintexts for which the simulator cannot provide an ap-
propriate decryption key. However, we can show that our encryption scheme satisﬁes this
deﬁnition in the generic group model.
Theorem 16. The encryption scheme deﬁned in Section Section 4.1 satisﬁes Deﬁnition
15 in the generic group model when HashToG is modeled as a random oracle.
Proof. (sketch) In the real experiment the adversary interacts with a group oracle which
maintains a table of pairs (d, h), where the ﬁrst element is the discrete log of an element
w.r.t. a ﬁxed base g, and the second is the label by which the adversary refers to this
element. The adversary can provide 2 handles h1, h2, and request the oracle perform the
group operation. The oracle will look up the associated discrete logs and return the handle
associated with d1 + d2 (or create a new one if this does not yet exist). The adversary
can also query the random oracle: on a new input, the random oracle chooses a random
discrete log d, and returns the associated handle (or a fresh handle if this is a new element).
We then consider the experiment where the discrete logs corresponding to random
secrets chosen by the selective opening challenger (i.e. encryption secret keys) are replaced
by formal variables, and the oracle maintains a table of (polynomial, handle) pairs, where
the ﬁrst terms are polynomials in those variables. When a group operation is performed,
the oracle computes the sum of the associated polynomials, and if that polynomial occurs
already in the table it returns the associated handle. Otherwise it generates a new handle
to associate with the new polynomial. When the adversary calls the RO on a new element,
the oracle picks a new formal variable to assign to the output, and returns a new handle.
This will be identical to the previous experiment except when the random secrets chosen
by the challenger cause two polynomials that are not formally identical to evaluate to the
same value, or when the random oracle chooses an output that matches to the evaluation
of a polynomial.
In our scheme, all of our polynomials are of degree at most 3 (the
highest degree term is M a1a2
that occurs in E2), so the probability of this happening if the
order, which is negligible since the adversary is polynomial time and q ≈ 22κ.
adversary makes L group element or RO queries is at most(cid:0)L
(cid:1)3/q, where q is the groups
1
2
Finally, we consider the ideal experiment. Our simulator will be have as follows: When
the adversary requests new public parameters, instead of choosing the associated formal
variables for the associated secret key, the simulator will choose a formal variable pki for the
parameters and an associated handle which it will return. When the adversary requests
a new ciphertext encrypted under parameters pi, the simulator will choose new formal
variables ctxt(i,j)
and an associated handle to return. Finally, when the adversary
provides messages (mi,1, . . . mi,n), the simulator will look up the associated random oracle
outputs r(i,1), . . . r(i,n) (or generate them if they do not exist), choose formal variables
a(i)
1 , a(i)
2 x2, where x1, x2 are the discrete logs
2 associated with ski, replace pki with a(i)
1 x1+a(i)
, ctxt(i,j)
1
2
55
of Ga1, Ga2 respectively, and replace each pair ctxt(i,j)
m(i,j), where m(i,j) is the formal variable associated with the discrete log of m(i,j).
2 with r(i,j)a(i)
1 , r(i,j)a(i)
, ctxt(i,j)
1
1 a(i)
2 +
This will produce a diﬀerent view to the adversary than the previous experiment only
if, when each pki, ci, j is replaced with the associated value in all polynomials, some of the
resulting polynomials become identical. However, note that this cannot happen because
the polynomials we use to replace pki, ci, j have no monomials in common with one another
or with the random oracle responses, which are the only other formal variables.
Thus, the adversary’s probability of producing 1 diﬀers by at most(cid:0)L
(cid:1)3/q between the
real and simulated games, where L is the number of oracle queries the adversary makes,
and q is the group order.
2
Now we are ready to consider the case when the server and some of the users are
malicious. We’ll group the malicious users and server as a single adversary A. Security
should be maintained for the honest users, and the malicious users should learn no more
than they would from the same interactions with F.
We describe a simulator S that interacts with F and A, simulating the real proto-
col for A. The system is secure if A’s view when interacting with S is computationally
indistinguishable from his view when executing the real protocol.
We describe each of the server operations, and describe how S implements them. We
write uid A to denote the user ID of a user controlled by A.
S setup S initializes storage for groups, and will store for each group the gid , the group
secret key, and a list of ciphertexts, in a table LG. It will also store a list of fake proﬁle
keys it has used on behalf of honest users Lproﬁle. S initializes random oracles for all hash
functions in the system.
Create User S sends ServerPublicP arams to uid A. For simplicity we assume all UIDs
are unique. S stores uid A in the list of UIDs created by A.
GetAuthCred The simulator receives (uid , T ) from the GetAuthCred interface of F (i.e.
an honest user is requesting an AuthCredential): it will forward (uid , T ) to the malicious
server as part of an honest request for an authentication token. If the credential issuance
succeeds for each time in T , it will send 1 to the ideal functionality.
CommitToProﬁleKey S receives uid from the CommitToProﬁleKey interface of F (i.e.
an honest user is committing to a proﬁle key). It will choose a random key K and send
the commitment to K and store K in Lproﬁle[uid ].
GetProﬁleCredential
If the simulator receives (K, uid ) from the GetProﬁleCredential
interface of F (i.e. an honest user is requesting a proﬁle key credential for a malicious
56
uid ): S will form a proﬁle key credential commitment to K and honestly execute the
GetProﬁleCredential protocol with A.
If the simulator receives (i, uid ) from the GetProﬁleCredential interface of F (i.e. an
honest user is requesting a proﬁle key credential for an honest uid ): It will retrieve the ith
key from from Lproﬁle[uid ]. Then it will simulate the blind issuance protocol.
CreateGroup If the simulator receives (gid ) from the CreateGroup interface of F (i.e.
an honest user is requesting to create a group): S will generate a new simulated public key
and a simulated encryption under that public key using the selective opening simulator.
It will send this ciphertext along with a simulated credential proof. It will then store the
ciphertext in LG[gid ].ctxts.
If the simulator receives (gid , t, uid , uid(cid:48), K, TG[gid ]) from the Ad-
AddGroupMember
dGroupMember interface of F (i.e. an honest user wants to add a user to a corrupt
group): If this is the ﬁrst such message for this group (i.e. this is the ﬁrst corrupt user
added to the group). S will call the selective opening simulator to open all of the cipher-
texts in LG[gid ].ctxts to the values revealed by TG[gid ] and store the resulting secret key
as LG[gid ].sk. It will then look up the encryptions of uid(cid:48), K and uid . It will send these
ciphertexts along with a simulated zero knowledge proof of authentication credential w.r.t.
the encryption of uid and a simulated zero knowledge proof of a proﬁle key credential for
uid(cid:48), K.
Otherwise: S will lookup LG[gid ].sk, the encryption key for this group, and encrypt
uid(cid:48), K and uid . It will send these ciphertexts along with a simulated zero knowledge proof
of authentication credential w.r.t. the encryption of uid and a simulated zero knowledge
proof of a proﬁle key credential for uid(cid:48), K.
If the simulator receives (gid , t, i) from the AddGroupMember interface of F (i.e. an
honest user wants to add a user to a non-corrupt group): S will look up the ciphertext
LG[gid ].ctxts[i].
It will also simulate a proﬁle key and uid encryptions under the key
corresponding to gid using the selective opening simulator. It will send these ciphertexts
along with a simulated zero knowledge proof of authentication credential w.r.t the ﬁrst
ciphertext and and a zero knowledge proof of proﬁle key credential for the second ciphertext.
FetchGroupMembers
If the simulator receives (gid , TG[gid ], t, uid ) from the Fetch-
GroupMembers interface of F (i.e. an honest user wants to retrieve the membership list for
a corrupt group): Encrypt uid , and send A the ciphertext and a simulated AuthCredential
proof along with a request for the membership list of gid . When A returns the list of
ciphertexts, decrypt them and send the resulting list of (uid , K) pairs to F.
If the simulator receives (gid , t, i) from the FetchGroupMembers interface of F (i.e. an
honest user wants to retrieve the membership list for an uncorrupted group): lookup the
ciphertext LG[gid ].ctxts[i] and send that to A along with a simulated auth credential proof
57
and a request for the membership list of gid . When A returns a list of ciphertexts, look
up the associated positions in LG[gid ].ctxts and send them to F, ignoring any ciphertexts
that do not occur in the table.
Other functions The remaining functions are similar to the ones above; InviteToGroup
and UpdateProﬁleKey and DeleteGroupMember are similar to AddGroupMember, and
DeleteGroup is simple once the caller has authenticated to the group (which is done in,
e.g., FetchGroupMembers).
Showing the real and ideal experiments are indistinguishable. Here we sketch
the sequence of experiments we can use to argue security:
1. Real Experiment
2. Replace all presentation proofs with the simulated versions. This is indistinguishable
by anonymity of the credential system.
3. Abort if, for an uncorrupted group, the ciphertexts sent by the adversarial server
in FetchGroupMembers and decrypted correctly by honest users is not a subset of
the ciphertexts uploaded by the group members. The abort happens with negligible
probability by CCA security of the encryption.
4. Switch to using the selective opening simulator to generate ciphertexts and public
keys, and only generating secret keys when a group is corrupted. This is indistin-
guishable by our selective opening security.
5. Simulate the blind issuance protocol. This is indistinguishable by security of blind
issuance.
6. Switch the K’s in the commitments uploaded by honest users in CommitToProﬁleKey
and GetProﬁleCredential to a new random K(cid:48) diﬀerent from what is used in the rest
of the experiment. This is indistinguishable by hiding of the commitment
7. Ideal Experiment
58