的第一次全面尝试。 然而， 这个模型受到的一个主要批评是: 只准许开发人员后退一个阶段。 瀑布
模型并没有对开发周 期后期发现错误做出 相应规定 。
注意 :
近来， 人们通过为每个阶段都添加确认和马纠正步骤改进了 瀑布模型 。 验证4十对规范坪估产品，
而确认则坪估产品满足实际需求的程度。 这种改进的模型被标记为改良瀑布模型 。 不过， 在螺旋模
型 统治 项 目 管 理领域之前， 改 良瀑布模型 并未得到 广 泛应 用 。
2 螺旋模型
1988 年， TRW 的 Barry Boehrn 提出了一种替代的生命周期模型， 允许瀑布类型处理过程多次
反复。 图 20.3 说明 了 这种模型。 因为螺旋模型封装了许多迭代的其他模型(也就是瀑布模型)， 所 以
被称为元模型或 " 模型 的模型 "。
确定目标、 替代和约束 | 评估替代， 识别和消除风险
计划下一阶段 | 开发和验证下一级产品
图 20.3 螺旋生命周 期模型
第 20 章 软件开发安全
可 以注意到， 螺旋的每次 " 回路 " 都导致新系统原型的开发(在 图 20.3 中用 Pl， P2 和 自 表示)。
理论上， 系统开发人员为每个原型的开发应用完整的瀑布处理过程， 由此逐渐得到满足所有功能要
求(经过全面验证)的成熟系统 。 Boehm 的螺旋模型为瀑布模型受到的主要批评提供了 一个解决方案，
也就是说， 如果技术需求和客户 需求发生变化， 需要改进系统， 就允许开发人员返回到计划编制
阶段。
3. 敏捷软件开发
最近， 软件开发的敏捷模型己经在软件工程界越来越受欢迎。 从 20 世纪 90 年代中期开始， 开
发者越来越接受避开过去僵化模式的软件开发方法， 喜欢采用替代的、 强调客户 需求的和快速开发
的新功能， 并 以j是代的方式满足这些需求。
17 位敏捷开发方法的先驱在 200 1 年聚集在一起 ， 制作了 一份名为 "敏捷开发宣言 " 的文档
(http://agilemanifesto.org) ， 这份文档声 明了这种敏捷开发方法的核心理念:
我们正在发现更好的方法以开发软件， 通过这样做和帮助他人这样做。 通过这项工作 ， 我们可
以 获得以 下价值:
个体与 交王重于过程和工具
有效的软件重于完整的文档
客户 合作重 于合同谈判
响应变更重 于遵循计 划
也就是说， 虽 然有价值的条 目 在右边， 但我们 更重视条 目 的 左边。
" 敏捷宣言" 还定义了 基础理念的 12 条原则 ， 可查看 h即:// agi1emanifesto.org/principles.html。
在 " 敏捷宣言" 中所说的 1 2 条原则是 :
• 我们的 最高优先级是通过早期和持续交付有价值的软件来满足客户 。
• 欢迎不断变化的需求 ， 甚至在开发后 期 。 敏捷过程利用 变化为客户取得竞争优势 。
• 在几星期到几个月 的时间里 以较短的时间， 频繁地提供能用 的软件。
• 业务人 员 和开发人员在整个项 目 过程中， 每天都要在一起工作 。
• 围绕着积极的个人建立项 目 。 给他们所需要的环境和支持， 并且相信他们能够完成这项工作。
597
598
CISSP 官方学 习指南(第 7 版)
• 在开发团队中传递信息的最有效率和最优效果方法是面对面交谈。
• 有效的软件是进度的首要衡量标准。
• 敏捷过程促进可持续开发 。 赞助商、 开发者和用户 应该始终保持同一个步调 。
• 持续关注技术的卓越性和 良好的设计， 能够提高敏捷性。
• 简单一一最大化工作量的艺 术是没有的一一是最重要的 。
• 最好的架构、 需求和设计源于 自 组织团队。
• 在团队内部定期思考如何变得更有效， 并按这样来修正及优化 自 身的行为。
敏捷开发方法在软件圈里有快速发展的势头， 并且有很多变种， 包括 Scrum(迭代式增量软件开
发过程)、 敏捷统一过程(Agile Unified Process ， AUP) 、 动态系统开发模型(Dynarnic System
Development ModeL DSDM)和极限编程(Extreme Programming， XP)。
4. 软件能力成熟度模型
Carnegie Mellon 大学的软件工程学院(SEI)提 出 了 软件能力成熟度模型(So仕ware Capability
Maturity Model， 缩写为 SW-CMM、 C岛位4或 SC.r-.也1)， 这种模型主张所有从事软件开发的组织都依
次经历不同的成熟阶段。 SW-CMM 描述了支持软件过程成熟度的原则与惯例， 目 的是: 通过实现
从特别混沌的过程到成熟的、 有纪律的软件过程的发展路径， 从而帮助软件组织改善软件过程的成
熟度和质量。 SW-CMM 背后 的 思想是软件的质量依赖于其开发过程的质量。
SW-CMM 具有下列阶段:
第1阶段 : 初始级 在这个阶段， 常常可以发现在无组织的工作模式中有很多努力工作的人。
通常 ， 这个阶段几乎没有或完全没有定义软件开发过程。
第 2 阶段 : 可重复级 在这个阶段， 出 现基本的生命周期管理过程。 开始有组织地重用代码，
而且类似的项 目 期望具有可重复的结果。 SEI 将用于这个级别的主要处理范围定义为 : 需求管理、
软件项 目 计划编制、 软件项 目 跟踪和监督、 软件转包合同管理、 软件质量保证和软件配置管理。
第3阶段 : 定义级 在这个阶段， 软件开发人员依照一系列正式的、 文档化的软件开发过程进
行操作。 所有开发项 目 都在新的标准化管理模型的制约下进行。 SEI 将用于这个级别的主要处理范
围定义为: 组织处理中心、 组织处理定义、 培训计划 、 综合的软件管理、 软件产品工程、 团体之间
的协调和对等复审 。
第4阶段 : 管理级 在这个阶段， 软件处理过程的管理进入下一个级别。 定量衡量被用来获得
对开发过程的详细 了解 。 SEI 将用于这个级别的主要处理范固定义为: 定量处理管理和软件质量
管理。
第5阶段 : 优化级 在优化的组织中 ， 会采用一个继续改进的过程。 成熟的软件开发过程已经
确立， 可以确保为了 改善未来的结果将一个阶段的反馈返回给前一个阶段。 SEI 将用于这个级别的
主要处理范围定义为 : 缺陷预防、 技术更改管理和过程更改管理。 耍了 解有关软件能力成熟度模型
的更多信息， 可 以参见 SEI 的 Web 站点www.sei.cmu. edu。
5. I DEAL 模型
SEI 还为软件开发确立了 IDEAL 模型， 这种模型实现了许多 SWαm属性。 IDEAL 模型具有
下列 5 个阶段:
1 : 启动 在 IDEAL 模型的启动阶段， 概述更改的业务原因 ， 为举措提供支持， 以及准备好恰
当 的基础设施。
第 20 章 软件开发安全
2 : 诊断 在诊断阶段， 工程师分析组织的当前状态 ， 并且为更改给出 一般性建议。
3 : 建立 在建立阶段， 组织采用诊断阶段的一般建议， 并且开发帮助实现这些更改的具体动
作计划。
4 : 行动 在行动阶段， 停止 " 讨论" 开始 "执行"。 组织开发解决方案， 随后测试、 改进和实
现解决方案。
5 : 学 习 与任何质量改进过程一样 ， 组织必须不断分析其努力的结果， 从而确定是否 己实现
期望的 目 标， 必要时建议采取新的行动 ， 使组织重返正轨。
IDEAL 模型如图 20.4 所示。
学习
图 20.4 IDEAL 模型
SW-CMM 和 IDEAL 模型的记忆方法
为 了 帮助记忆 sw-ct-.制和 IDEAL 模型 的 10 个级别名 的首字母(ll DR ED AM LO)， 可以想象
一下正坐在斗忡病 医生办公室的长沙发上说着: "1...1， Dr.Ed， am lo(w)"。 如果能够记住这条短句 ，
那 么 就可以抽取这些级别名 的首字母。 如果将这些字母排成两 列 ， 那么就可以按照顺序重构两个系
统的级别名 。 如下所示， 左边一列 字母是 IDEAL 模型 ， 右边一列 字母则表示 sw-c扎也4各级别 的首
字母·
lnitiating(初始
Diagnosing(诊断)
Establishing(建立)
Acting(行动)
Leaming(学习 )
lnitiating(初始)
Repeatable(可重复)
Defined(定义)
Managed(管理)
Optimized(优化)
599
600
CISSP 官方学习指南(第 7 版)
20.1 .4 甘特图 与 PERT
甘特图是一种显示不同时间项 目 和调度之间相互关系的条形图， 提供了帮助计划、 协调和跟踪
项 目 中特定任务的调度图表 。 图20.5给出 了 甘特 图 的一个示例 。
ID 星期 任务名称
1 121314 1 5161718 19110111 12 13 14 15116 17 18119
执行初始设计
2
价格设计
3
预定材料
4
产品测试 1/飞 
5
发布 W 古
图 20.5 甘特图
计划评审技术(program Evaluation Review Technique， PE盯)是一种项 目 调度工具， 这种工具被
用于在开发中判断软件产品 的大小并且为风险评估计算标准偏差(Standard Deviation， SD)o PERT 将
估计的每个组件的最小可能大小、 最可能的大小 以及最大可能大小联系在一起。 PERT 被用于直接