### 1. 瀑布模型

瀑布模型是软件开发中的第一次全面尝试。然而，该模型受到的主要批评之一是只允许开发人员后退一个阶段。此外，瀑布模型没有对开发周期后期发现错误做出相应的规定。

**注意：**
近年来，人们通过为每个阶段添加验证和确认步骤改进了瀑布模型。验证是对规范进行评估以确保产品符合要求，而确认则是评估产品是否满足实际需求。这种改进的模型被称为改良瀑布模型。不过，在螺旋模型成为项目管理领域的主流之前，改良瀑布模型并未得到广泛应用。

### 2. 螺旋模型

1988年，TRW公司的Barry Boehm提出了一种替代的生命周期模型，允许瀑布类型的处理过程多次反复。图20.3说明了这种模型。由于螺旋模型封装了许多迭代的其他模型（即瀑布模型），因此被称为元模型或“模型的模型”。

- **确定目标、替代方案和约束**
- **评估替代方案，识别并消除风险**
- **计划下一阶段**
- **开发并验证下一级产品**

![](图20.3 螺旋生命周期模型)

可以注意到，螺旋的每次“回路”都导致新系统原型的开发（在图20.3中用P1、P2等表示）。理论上，系统开发人员为每个原型的开发应用完整的瀑布处理过程，从而逐渐得到满足所有功能要求（经过全面验证）的成熟系统。Boehm的螺旋模型解决了瀑布模型的主要问题，即当技术需求和客户需求发生变化时，允许开发人员返回到计划编制阶段进行改进。

### 3. 敏捷软件开发

最近，敏捷软件开发方法在软件工程界越来越受欢迎。从20世纪90年代中期开始，开发者逐渐接受避开过去僵化模式的软件开发方法，更倾向于采用灵活、强调客户需求和快速开发的新方法。

2001年，17位敏捷开发方法的先驱共同制定了《敏捷宣言》（http://agilemanifesto.org），这份文档阐明了敏捷开发方法的核心理念：

- **个体与互动重于过程和工具**
- **有效的软件重于完整的文档**
- **客户合作重于合同谈判**
- **响应变更重于遵循计划**

虽然有价值的条目在右边，但我们更重视左边的价值观。

《敏捷宣言》还定义了基础理念的12条原则（详见http://agilemanifesto.org/principles.html）：

- 我们的最高优先级是通过早期和持续交付有价值的软件来满足客户。
- 欢迎不断变化的需求，甚至在开发后期。敏捷过程利用变化为客户取得竞争优势。
- 在几星期到几个月的时间内，频繁地提供可用的软件。
- 业务人员和开发人员在整个项目过程中每天都要在一起工作。
- 围绕积极的个人建立项目。给他们所需的环境和支持，并相信他们能够完成任务。
- 在开发团队中传递信息的最有效方法是面对面交谈。
- 有效的软件是进度的首要衡量标准。
- 敏捷过程促进可持续开发。赞助商、开发者和用户应始终保持同步。
- 持续关注技术的卓越性和良好的设计，能够提高敏捷性。
- 简单——最大化未完成的工作量的艺术——是最重要的。
- 最好的架构、需求和设计源于自组织团队。
- 定期反思如何变得更有效，并据此调整和优化自身行为。

敏捷开发方法在软件圈里迅速发展，并有许多变种，包括Scrum（迭代式增量软件开发过程）、敏捷统一过程（AUP）、动态系统开发模型（DSDM）和极限编程（XP）。

### 4. 软件能力成熟度模型 (SW-CMM)

卡内基梅隆大学的软件工程学院（SEI）提出了软件能力成熟度模型（Software Capability Maturity Model, SW-CMM），主张所有从事软件开发的组织依次经历不同的成熟阶段。SW-CMM描述了支持软件过程成熟度的原则与惯例，旨在通过实现从无序的过程到成熟的、有纪律的软件过程的发展路径，帮助软件组织改善软件过程的成熟度和质量。SW-CMM背后的思想是软件的质量依赖于其开发过程的质量。

SW-CMM具有以下五个阶段：

- **初始级**：在这个阶段，常常可以发现在无组织的工作模式中有很多努力工作的人。通常，这个阶段几乎没有或完全没有定义软件开发过程。
- **可重复级**：在这个阶段，出现基本的生命周期管理过程。开始有组织地重用代码，而且类似的项目期望具有可重复的结果。SEI将用于这个级别的主要处理范围定义为：需求管理、软件项目计划编制、软件项目跟踪和监督、软件转包合同管理、软件质量保证和软件配置管理。
- **定义级**：在这个阶段，软件开发人员依照一系列正式的、文档化的软件开发过程进行操作。所有开发项目都在新的标准化管理模型的制约下进行。SEI将用于这个级别的主要处理范围定义为：组织处理中心、组织处理定义、培训计划、综合的软件管理、软件产品工程、团体之间的协调和对等复审。
- **管理级**：在这个阶段，软件处理过程的管理进入下一个级别。定量衡量被用来获得对开发过程的详细了解。SEI将用于这个级别的主要处理范围定义为：定量处理管理和软件质量管理。
- **优化级**：在优化的组织中，会采用一个继续改进的过程。成熟的软件开发过程已经确立，可以确保为了改善未来的结果将一个阶段的反馈返回给前一个阶段。SEI将用于这个级别的主要处理范围定义为：缺陷预防、技术更改管理和过程更改管理。

要了解有关软件能力成熟度模型的更多信息，可以参见SEI的网站www.sei.cmu.edu。

### 5. IDEAL 模型

SEI还为软件开发确立了IDEAL模型，这种模型实现了许多SW-CMM的属性。IDEAL模型具有以下五个阶段：

- **启动**：在IDEAL模型的启动阶段，概述更改的业务原因，为举措提供支持，并准备好适当的基础设施。
- **诊断**：在诊断阶段，工程师分析组织的当前状态，并为更改给出一般性建议。
- **建立**：在建立阶段，组织采用诊断阶段的一般建议，并开发帮助实现这些更改的具体行动计划。
- **行动**：在行动阶段，停止“讨论”，开始“执行”。组织开发解决方案，随后测试、改进和实现解决方案。
- **学习**：与任何质量改进过程一样，组织必须不断分析其努力的结果，从而确定是否已实现期望的目标，必要时建议采取新的行动，使组织重返正轨。

![](图20.4 IDEAL模型)

### 记忆技巧

为了帮助记忆SW-CMM和IDEAL模型的10个级别名称的首字母（ID DR ED AM LO），可以想象一下正坐在医生办公室的长沙发上说着：“I...I, Dr. Ed, am lo(w)”。如果能够记住这条短句，那么就可以抽取这些级别名称的首字母。如果将这些字母排成两列，那么就可以按照顺序重构两个系统的级别名称。如下所示，左边一列字母是IDEAL模型，右边一列字母则表示SW-CMM各级别的首字母：

| IDEAL模型 | SW-CMM级别 |
|-----------|-------------|
| Initiating | Initial     |
| Diagnosing | Repeatable  |
| Establishing | Defined   |
| Acting    | Managed     |
| Learning  | Optimized   |

### 20.1.4 甘特图与PERT

#### 甘特图

甘特图是一种显示不同时间项目和调度之间相互关系的条形图，提供了帮助计划、协调和跟踪项目中特定任务的调度图表。图20.5给出了甘特图的一个示例。

![](图20.5 甘特图)

#### PERT

计划评审技术（Program Evaluation Review Technique, PERT）是一种项目调度工具，用于在开发中判断软件产品的大小并为风险评估计算标准偏差（Standard Deviation, SD）。PERT将估计的每个组件的最小可能大小、最可能的大小以及最大可能大小联系在一起。PERT被用于直接和间接的项目管理。