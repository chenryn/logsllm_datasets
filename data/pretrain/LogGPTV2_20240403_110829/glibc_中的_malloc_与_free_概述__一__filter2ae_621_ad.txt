            remainder->fd_nextsize = NULL;
            remainder->bk_nextsize = NULL;
          }
        set_head(victim, nb | PREV_INUSE |
             (av != &main_arena ? NON_MAIN_ARENA : 0));
        set_head(remainder, remainder_size | PREV_INUSE);
        set_foot(remainder, remainder_size);   // 设置堆块的结构
        check_malloced_chunk(av, victim, nb);
        void *p = chunk2mem(victim);    // 返回堆块
        if (__builtin_expect (perturb_byte, 0))
          alloc_perturb (p, bytes);
        return p;
重点在于判断条件，nb 在 smallbin 范围内，并且 unsorted bin 中只有一个堆块，并且这个堆块是当前分配区的
last_remainder，并且 nb 小于这个堆块的 size，只有满足了以上四个条件，才能对 unsortedbin 中的堆块进行切割，形成
remainder。
如果上述条件不满足，就不会对 unsortedbin chunk 进行切割，而是运行下面的代码
          /* remove from unsorted list */
          unsorted_chunks(av)->bk = bck;
          bck->fd = unsorted_chunks(av);    // 这两句代码实现了将 unsortedbin 最后一个堆块卸下的操作，注意没有使用标准的 unlink，这是 pwn 题中比较常见的 unsortedbin attack 实现基础
          /* Take now instead of binning if exact fit */
          if (size == nb) {    // 判断这个堆块是否精确匹配
        set_inuse_bit_at_offset(victim, size);
        if (av != &main_arena)
          victim->size |= NON_MAIN_ARENA;
        check_malloced_chunk(av, victim, nb);
        void *p = chunk2mem(victim);    // 精确匹配的情况，直接返回给用户
        if (__builtin_expect (perturb_byte, 0))
          alloc_perturb (p, bytes);
        return p;
          }
unsortedbin chunk 精确匹配的情况，和 smallbin 一样，也是从尾部取出堆块。
如果取出的堆块不能精确匹配 nb 的话，就会将这个堆块放置在对应的 bin 中，所以遍历 unsortedbin 的过程也是清空它的过程。
unsorted bin 分配堆块的过程可以用下面的图片表示
如果取出的堆块不能精确匹配 nb，就会执行下面的代码
          /* place chunk in bin */
          if (in_smallbin_range(size)) {
        victim_index = smallbin_index(size);
        bck = bin_at(av, victim_index);
        fwd = bck->fd;
          }
          else {
        victim_index = largebin_index(size);
        bck = bin_at(av, victim_index);
        fwd = bck->fd;
        /* maintain large bins in sorted order */
        if (fwd != bck) {
          /* Or with inuse bit to speed comparisons */
          size |= PREV_INUSE;
          /* if smaller than smallest, bypass loop below */
          assert((bck->bk->size & NON_MAIN_ARENA) == 0);
          if ((unsigned long)(size) bk->size)) {
            fwd = bck;
            bck = bck->bk;
            victim->fd_nextsize = fwd->fd;
            victim->bk_nextsize = fwd->fd->bk_nextsize;
            fwd->fd->bk_nextsize = victim->bk_nextsize->fd_nextsize = victim;
          }
          else {
            assert((fwd->size & NON_MAIN_ARENA) == 0);
            while ((unsigned long) size size)
              {
            fwd = fwd->fd_nextsize;
            assert((fwd->size & NON_MAIN_ARENA) == 0);
              }
            if ((unsigned long) size == (unsigned long) fwd->size)
              /* Always insert in the second position.  */
              fwd = fwd->fd;
            else
              {
            victim->fd_nextsize = fwd;
            victim->bk_nextsize = fwd->bk_nextsize;
            fwd->bk_nextsize = victim;
            victim->bk_nextsize->fd_nextsize = victim;
              }
            bck = fwd->bk;
          }
        } else
          victim->fd_nextsize = victim->bk_nextsize = victim;
          }
          mark_bin(av, victim_index);
          victim->bk = bck;
          victim->fd = fwd;
          fwd->bk = victim;
          bck->fd = victim;
    #define MAX_ITERS    10000
          if (++iters >= MAX_ITERS)
        break;
上面的代码实现了很简单的功能，如果 size 在 smallbin 范围内，先确定 size 属于哪一条链表，由于 smallbin
的头部插入、尾部取出的特性，所以把表头作为 bck，表头的下一个堆块作为 fwd，最下面的几句代码负责将堆块插入双向链表(学过数据结构的同学应该很熟悉了)。
不过对于 largebin 范围内的 size 情况就不那么简单了，由于 largebin
特殊的结构，想把一个堆块插入到合适的位置是比较复杂的，所以要判断很多的条件来保证效率和正确性。
在遍历 unsorted bin 的循环中有一个 iter 变量，它用来记录当前已经处理了多少个 unsortedbin chunk，为了防止链表中的
chunk 过多导致程序一直处理 unsortedbin，当 iter 超过 10000 时就会跳出循环。
如果前面的代码都不能分配出合适的堆块，那就说明用户的请求可能是 large request，或者 fastbin、smallbin、unsortedbin
都不存在合适的堆块，接下来 ptmalloc 就会开始搜索 largebin，尝试匹配一个合适的堆块。
        if (!in_smallbin_range(nb)) {    // 判断 nb 是不是 smallbin
          bin = bin_at(av, idx);    // 获取链表 (idx 是之前计算的 nb 在 largebin 链表的 index)
          /* skip scan if empty or largest chunk is too small */
          if ((victim = first(bin)) != bin &&
          (unsigned long)(victim->size) >= (unsigned long)(nb)) {  // 检查对应的链表是否为空，或者其中最大的堆块比 nb 还小？
        victim = victim->bk_nextsize;
        while (((unsigned long)(size = chunksize(victim)) bk_nextsize;
        /* Avoid removing the first entry for a size so that the skip
           list does not have to be rerouted.  */
        if (victim != last(bin) && victim->size == victim->fd->size)
          victim = victim->fd;
        remainder_size = size - nb;  // 找到一个合适的堆块，计算一下切割后剩余的堆块大小
        unlink(victim, bck, fwd);   // 将这个堆块从 largebin 卸下
        /* Exhaust */
        if (remainder_size size |= NON_MAIN_ARENA;
        }
        /* Split */
        else {     // 如果切割剩余的堆块大小大于 MINSIZE
          remainder = chunk_at_offset(victim, nb);
          /* We cannot assume the unsorted list is empty and therefore
             have to perform a complete insert here.  */
          bck = unsorted_chunks(av);
          fwd = bck->fd;
          if (__builtin_expect (fwd->bk != bck, 0))
            {
              errstr = "malloc(): corrupted unsorted chunks";
              goto errout;
            }
          remainder->bk = bck;
          remainder->fd = fwd;
          bck->fd = remainder;
          fwd->bk = remainder;    // 将切割剩余的部分插入到 unsortedbin 中
          if (!in_smallbin_range(remainder_size))
            {
              remainder->fd_nextsize = NULL;
              remainder->bk_nextsize = NULL;  // 如果剩下的大小是 largebin，清除它的 fd_nextsize、bk_nextsize 指针(因为它们在 uunsortedbin 中无用)
            }
          set_head(victim, nb | PREV_INUSE |
               (av != &main_arena ? NON_MAIN_ARENA : 0));
          set_head(remainder, remainder_size | PREV_INUSE);
          set_foot(remainder, remainder_size);
        }
        check_malloced_chunk(av, victim, nb);
        void *p = chunk2mem(victim);   // 返回堆块
        if (__builtin_expect (perturb_byte, 0))
          alloc_perturb (p, bytes);
        return p;
          }
        }
上面的代码用来搜索 largebin 尝试找到合适的堆块，注意 largebin 每个链表所存储的是一定范围的堆块，当找到一个合适大小的堆块时，为了不调整
chunksize 链表，需要避免将 chunk size 链表中的节点取出，所以取 victim->fd 节点对应的 chunk 作为候选
chunk。由于 large bin 链表中的 chunk 也是按大小排序，同一大小的 chunk 有多个时，这些 chunk 必定排在一起，所以
victim->fd 节点对应的 chunk 的大小必定与 victim 的大小一样。
如果切割后剩下的堆块大小 小于最小的堆块(16 or 32) 这个堆块会直接返回给用户，例如 64 位系统，切割剩余的大小为
16，那么用户拿到的堆块中有16 个字节是多出来的(或者说是浪费掉的)。
        ++idx;
        bin = bin_at(av,idx);
        block = idx2block(idx);