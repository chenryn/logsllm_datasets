2
0
0
100
100
Clock 
[com.google.android.deskclock]
Total interrupts = 289 
20
Time Sequence (interval = 50 ms)
40
60
80
360 Security 
[com.qihoo.security]
Total interrupts = 424 
20
Time Sequence (interval = 50 ms)
40
60
80
100
100
Fig. 7.
Interrupt time series of 6 apps’ launching processes. The number of interrupts is aggregated in 50ms interval.
SUMMARY OF DEVICE NAMES FOR TOUCHSCREEN CONTROLLER
TABLE I
Phone Model
Google Nexus 6
Moto Droid Turbo
Moto Milestone 2
Sony Xperia Z3
Sony Xperia ion
Samsung Galaxy A5 msm tlmm
PIC Name
msmgpio
msmgpio
GPIO
msmgpio
msmgpio
Samsung Galaxy S3
Samsung Galaxy S
Advance
v4 irq
s5p gpioint
Nomadik-
GPIO
Device Name
atmel mxt ts
atmel mxt ts
qtouch ts int
clearpad
clearpad
mms300-ts
Device Vendor
Ateml
Ateml
Quantum
Synaptics
Synaptics
Melfas
melfas-ts
mxt224 ts
Melfas
Ateml
We model and test the unlock pattern using Google Nexus
6 with AOSP Android 5.1.1 only, but the attack method also
applies to other smartphones.
Reading Interrupt Count. The interrupt
time series for
touchscreen controller could be captured through monitoring
/proc/interrupts. The ﬁrst issue we need to address is
to ﬁnd the right entry regarding touchscreen interrupts from
the log ﬁle. Searching by IRQ number is not a viable solution,
as the IRQ number is customized by Android version or
manufacturer. Instead, we use device name to identify the entry
as it is ﬁxed for the same phone model (atmel_mxt_ts
for Google Nexus 6). In addition, we surveyed a number
of phones and found the device name for touchscreen either
contains substring “ts” or “pad” uniquely, as summarized in
Table I. Therefore, we can use the substring pattern to ﬁnd the
touchscreen log entry on new phone models. The aggregated
interrupt amount since the phone is booted can be read from
the column CPU0, as shown in Fig. 2, and we sample it at a
regular interval.
420420
The sampling frequency of our implementation could reach
1675 Hz, which is much higher than the maximum frequency
of touchscreen IRQs (135 Hz on Google Nexus 6) to minimize
the odds of missing interrupt updates. In fact, we optimize the
data collection stage by only monitoring the interrupts during
the unlocking operation. The malicious app we built can stay
in the sleeping mode in the background and be activated only
when the screen is turned on, which can be detected by reg-
istering Android broadcast channel ACTION_SCREEN_ON.
When the broadcast ACTION_USER_PRESENT is observed,
the unlocking operation is supposed to be ﬁnished, and the
app can turn itself back into the sleeping mode.
Data Pre-processing. The sampled interrupt data stream needs
to be preprocessed before feeding to the subsequent stages for
unlock pattern inference. The steps are elaborated below:
• Data Deduplication. We split the interrupt data stream
by 1 ms interval. Since our sampling rate (1675 Hz)
is higher than 1000 Hz (1 sample per 1 ms), multiple
samples could be collected within 1 ms interval. For such
case, we keep the ﬁrst data point within the 1ms interval.
• Data Interpolation. Although we use a high sampling
rate, occasionally, some changes of interrupts are still
missed, especially when heavy computing tasks are run
by CPU (around 1.8 % 1-ms intervals have no sample
data as observed from the experiments). To ﬁll
the
missing data points, we use the linear interpolation [24]
method, which has been extensively used in the area of
signal processing.
• Interrupt Increment Computation. The interrupt data ob-
tained are the aggregated values since the bootstrap of the
phone. We compute the difference of interrupts counts to
get the increment value.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:05 UTC from IEEE Xplore.  Restrictions apply. 
TABLE II
5 STATES OF SWIPE LINES
State
Length
L1
L2
L3
L4
L5
√
1
2
√
2
√
5
2
2
Swipe Line Examples % of appearance in
all state sequences
1→2, 1→4
1→5, 2→4
1→2→3, 3→6→9
1→6, 6→7
1→5→9, 3→5→7
33.81 %
24.45 %
10.92 %
26.64 %
4.18 %
y
t
i
l
i
b
a
b
o
r
P
0.07
0.06
0.05
0.04
0.03
0.02
0.01
0.00
0
L1
L2
L3
L4
L5
1.0
0.8
0.6
0.4
0.2
s
s
e
c
c
u
S
f
o
y
t
i
l
i
b
a
b
o
r
P
100
0.0
0
1
20
40
80
Amount of interrupts
60
87.29%
97.61%
80%
76.32%
60%
42.45%
40%
20%
Random Guess
Our Gaussian Model
2
Time of Guessing
3
4
5
• Gram Segmentation. We segment a long interrupt time
series to several grams through searching interrupt gap
which is actually the turning points between swipe lines.
According to our experiments and empirical analysis, if
the amount of interrupts in 60 ms is less than 5, we
consider it as a gap. Then we label
the gram using
the accumulated interrupts increments within the time
window. For example, the interrupt time series in Fig. 5
is converted to 4-grams {28, 58, 77, 45}.
Unlock Pattern Modeling. A gram is labeled by the number
of observed interrupts, and we need to ﬁnd the mapping from
it to the corresponding swipe lines. Since the length of a swipe
line is proportional to the number of interrupts, we cluster the
swipe lines by the length and the grams by the interrupt count
and build the correlation. It turns out there are 5 types of swipe
lines, associated with 5 types of grams.
For explanation, we model
the unlock pattern in 2-
dimensional Cartesian coordinate system and set dot 7 as
origin point with coordinate as (0, 0), as shown in Fig. 4.
Therefore, the swipe line from dot 7 (0, 0) to dot 8 (0, 1) is
represented by a vector [0, 1] with length 1. Under this model,
all swipe lines can be clustered into 5 categories (or states),
labeled as Li, i ∈ [1, 5], which are listed in Table II. Based on
such model, every unlock pattern could be represented by a
state sequence. For example, the pattern 41235789 could be
translated to L1L3L5L3. A long swipe line can be represented
by one or two states (e.g., 147 corresponds to L1L1 or L3).
To make sure that the mapping from swipe line to state is
unique, we always use the state with the longest length (so
147 is mapped to L3). On the contrary, the mapping from
state to swipe line is one-to-many (see Table II). The number
of unlock patterns associated with one state sequence is yet
limited, due to the restrictions of valid unlock pattern. On
average, one state sequence corresponds to 20.37 patterns.
Single State Analysis. Our goal is to infer the state sequence
from the grams. As the ﬁrst step, we need to derive the correct
state from a single gram. This task looks trivial at ﬁrst sight:
one simple approach is to correlate the state with the range
of interrupt count and classify a gram into a state if it falls
within the range. Unfortunately, this approach easily failed
due to the big variance of people’s drawing actions. Even for
a single user, the way of swiping a line is different from time
to time. This forces us to ﬁnd a model which can handle the
variances, instead of a simple linear equation.
Fig. 9. Gaussian distributions of 5
states.
Fig. 10. Probability of successful
guess. 5 attempts are needed at most.
To uncover the relationship, we carried out a user study
and recruited 5 users to join our experiments1. We asked each
user to draw lines belonging to each state for 100 times on
the unlock pattern UI of Google Nexus 6. At the same time,
a self-developed app runs in the background and samples
the interrupt count. Fig. 8 shows the interrupt accumulation
histogram of these 5 states.
As shown in the histograms, the amount of interrupts across
different swipes forms Gaussian-like unimodal distribution
(normal distribution), for all 5 states. Such observation inspires
us to compute the probabilities of 5 states derived from a
gram, using the Gaussian model trained from real-user data.
In particular, we use probability density function (PDF):
exp(− (x − μ)2
f (x|μ, σ) =
√
1
2π
)
σ
2σ2
(1)
In our case, f (x|μ, σ) is the probability of state, x is
the amount of interrupts, σ is the expectation, and μ is the
standard deviation. Leveraging the curve ﬁtting functionality
of MATLAB [25], σ and μ could be obtained from the same
set of data collected from the 5 volunteers (also shown in
Fig. 8). Given an interrupt amount x, we calculate probabilities
of states Li, i ∈ [1, 5] it belongs to as:
Pr(y|Li) =
⎧⎪⎪⎪⎪⎨
⎪⎪⎪⎪⎩
f (y|37.43, 6.439), i = 1
f (y|40.79, 7.611), i = 2
f (y|51.38, 8.555), i = 3
f (y|52.62, 8.399), i = 4
f (y|58.84, 8.665), i = 5
(2)
It turns out the distribution of the 5 states can be separated
in most cases, as plotted in Fig. 9. The only exception is for
L3 and L4. This can be explained by their length. In fact, the
geometric length of L3 and L4 is 2 and
5, and the difference
is only 0.23, much less than other pairs.
√
In order to evaluate the accuracy of our Gaussian model, we
designed a simulation experiment. According to the percent-
ages of every state (listed in Table II) and distribution features
(shown in Fig. 8), we generated 1,000,000 simulated interrupt
amount observation values with state label, (y, Li). Based on
these simulated data, the probability of correct guessing for
1We have got the IRB approval from the authors’ institutes before perform-
ing any experiment related to human subjects.
421421
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:05 UTC from IEEE Xplore.  Restrictions apply. 
50
40
y
c
n
e
u
q
e
r
F
30
20
10
State L1
¹=37.43 ¾=6.439
50
40
y
c
n
e
u
q
e
r
F
30
20
10
State L2
¹=40.79 ¾=7.611
50
40
y
c
n
e
u
q
e
r
F
30
20
10
State L3
¹=51.38 ¾=8.555
50
40
y
c
n
e
u
q
e
r
F
30
20
10
State L4
¹=52.62 ¾=8.399
50
40
y
c
n
e
u
q
e
r
F
30
20
10
State L5
¹=58.84 ¾=8.665
0
20 30 40 50 60 70 80 90 100
Amount of interrupts
0
20 30 40 50 60 70 80 90 100
Amount of interrupts
0
20 30 40 50 60 70 80 90 100
Amount of interrupts
0
20 30 40 50 60 70 80 90 100
Amount of interrupts
0
20 30 40 50 60 70 80 90 100
Amount of interrupts
Fig. 8. The distribution of interrupt amounts for 5 states.
State Sequence:
Observed Sequence:
(Amount of interrupt 
occurred)
Lx1
y1
Lx2
y2
Lx3
…...
LxT
y3
yT
Fig. 11. Using HMM to infer state sequence. {Lx1Lx2Lx3 . . . LxT } can
be inferred using {y1y2y3 . . . yT }.
1 to 5 times using our Gaussian model is calculated and the
result is shown in Fig. 10. The success rate is substantially
increased: even for one-time guessing, the success rate is 42.45
%, doubled from that of random model.
State Sequence Analysis. After the probability of a single
state is computed, the next step is to derive the state sequence.
Within one unlock pattern, states are not independent and
the probability of one state is affected by previous ones.
For instance, when a user swipes a line of L5 (1→5→9 or
3→5→7), she can not swipe L5 for next. Therefore, we treat
the problem of ﬁnding state sequence as a process of solving
Hidden Markov Model (HMM) [26], that is to ﬁnd the correct
(hidden) state sequence from the observed sequence (grams),