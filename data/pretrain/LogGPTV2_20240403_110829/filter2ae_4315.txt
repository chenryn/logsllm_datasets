### 本文由红日安全成员：**七月火** 编写，如有不当之处，还望斧正。

## 前言
大家好，我们是红日安全-代码审计小组。近期，我们小组正在进行一个PHP代码审计项目，旨在为大家提供学习和交流的机会。我们将这个项目命名为 **PHP-Audit-Labs**。目前，您所看到的系列文章属于项目的第一阶段内容，题目均来自 [PHP SECURITY CALENDAR 2017](https://www.ripstech.com/php-security-calendar-2017/)。每道题目我们都将进行详细分析，并结合实际CMS案例进行说明。此外，在每篇文章末尾，我们还会附上一道CTF题目供读者练习。希望大家喜欢！以下是我们的第二篇代码审计文章：

## Day 2 - Twig

### 题目介绍
本题名为Twig，涉及以下代码：

```php
// 代码示例
```

### 漏洞解析
本题考察的是XSS（跨站脚本攻击）漏洞。尽管题目中使用了 **escape** 和 **filter_var** 两个过滤方法，但这些措施仍然可以被绕过。

#### 第一处过滤
在第8行，程序使用了[Twig](https://twig.symfony.com/)模板引擎中的 **escape** 过滤器来处理 `link` 变量。实际上，**escape** 过滤器通过PHP内置函数 **htmlspecialchars** 实现。具体定义如下：
- **htmlspecialchars**: 将特殊字符转换为HTML实体。
- 定义: `string htmlspecialchars(string $string, int $flags = ENT_COMPAT | ENT_HTML401, string $encoding = ini_get("default_charset"), bool $double_encode = TRUE)`

例如:
- `&` 转换为 `&amp;`
- `"` 转换为 `&quot;`
- `'` 转换为 `&apos;`
- `>` 转换为 `&gt;`

#### 第二处过滤
在第17行，程序使用了 **filter_var** 函数配合 **FILTER_VALIDATE_URL** 过滤器来验证 `nextSlide` 是否是一个合法的URL。**filter_var** 的定义如下：
- **filter_var**: 使用特定的过滤器对变量进行过滤。
- 定义: `mixed filter_var(mixed $variable, int $filter = FILTER_DEFAULT, mixed $options)`

为了绕过这两处过滤，我们可以利用 **javascript伪协议**。例如，使用以下payload：
- `?url=javascript://comment%250aalert(1)`

这里，`%0a` 是换行符，使得 `alert(1)` 不在同一行注释内，从而能够执行。

### 实例分析
本次实例分析选取的是 **Anchor 0.9.2** 版本。在这个版本中，当用户访问一个不存在的URL时，程序会调用404模板，而该模板存在XSS漏洞。

#### 具体代码
在 `themes\default\404.php` 文件中，第4行的 `current_url` 函数用于获取当前URL。该函数在 `anchor\functions\helpers.php` 中实现，最终调用 `Uri::current()` 方法。

#### 关键代码
- `function current_url() { return Uri::current(); }`
- 在 `system\uri.php` 文件中，`detect` 方法从 `$_SERVER` 数组中获取 `REQUEST_URI`、`PATH_INFO` 和 `ORIG_PATH_INFO` 的值，并通过 `filter_var($uri, FILTER_SANITIZE_URL)` 和 `parse_url($uri, PHP_URL_PATH)` 进行验证。

由于没有针对XSS攻击的过滤，导致攻击者可以轻松利用此漏洞。例如，构造以下payload：
- `http://localhost/anchor/index.php/`

当访问此链接时，程序会调用404模板并嵌入恶意脚本，造成XSS攻击。

### 漏洞利用
构造以下payload：
- `http://localhost/anchor/index.php/`

当访问此链接时，程序会调用404模板并将恶意脚本嵌入到页面中，触发XSS攻击。

### 修复建议
对于XSS漏洞，建议对关键词进行过滤，并将特殊字符进行HTML实体编码替换。参考Dedecms中的防御XSS方法，可以在 `uploads/include/helpers/filter.helper.php` 路径下找到相关代码。

### 结语
希望上述分析能帮助大家更深入地理解如何绕过 **filter_var** 函数。文中提到的CMS可以从 [这里](https://github.com/anchorcms/anchor-cms/releases?after=0.9.3-a) 下载。如果大家对我们的项目感兴趣，欢迎发送邮件至 PI:EMAIL 联系我们。最后，我们留下一道CTF题目供大家练手：

```php
// index.php
You have curl {$site_info['host']} successfully!
";
echo implode(' ', $result);
} else {
    die("Error: Host not allowed");
}
} else {
    echo "Just curl sec-redclub.com! For example:?url=http://sec-redclub.com";
}
?>
// f1agi3hEre.php
```

题解我们会阶段性放出，如果大家有什么好的解法，可以在文章底下留言。祝大家玩得愉快！

## 相关文章
- [Anchor CMS 0.9.2: XSS](https://curesec.com/blog/article/blog/Anchor-CMS-092-XSS-53.html)