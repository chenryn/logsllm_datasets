(cid:2)
Advauth
Π(cid:3), Auth
(A) + Advdowngrade
(A)
Π, DP
(cid:3), X (A) ≤ Advpartnering
Π, PS
+ Advauth
Π, Auth, X (A) ,
where Π(cid:2) is Π restricted to conﬁgurations Cr ∪ C¯r.
Proof sketch: Consider the multi-mode authentication
experiment G0 for Π(cid:2). Let S hold when at some point a session
π completes maliciously on X and Auth(π.mode, π.role) holds
(i.e., A succeeds in breaking authentication iff S holds at the
end of the experiment).
Π, PS
(A).
Game G1 behaves as G0 except it aborts just before a session
π of role r would complete without being partnered. Because
of the restriction in Π(cid:2) and the hypothesis that DP ⊆r PS, it
must be the case that PS(π.cfg). Thus, any time G1 aborts, A
succeeds in breaking the partnering security of Π(cid:2), and thus
that of Π. Hence, the difference in the probability of S between
G0 and G1 is at most Advpartnering
Game G2 behaves as G1 except
(cid:2) such that π.mode (cid:5)= Negor(π.cfg, π
it aborts just before a
session π of role r would complete and there is a partnered
.cfg). The
session π
difference in the probability of S between G1 and G2 is at
(A) since any time G2 aborts but G1 does
most Advdowngrade
not, A succeeds in breaking the downgrade security of Π(cid:2), and
thus that of Π.
By deﬁnition of N , G2 never completes with a session
of role r assigning a mode outside of N . Consequently, the
probability of S in this game is at most Advauth
Π, Auth, X (A) .
Π, DP
(cid:2)
Interestingly, partnering security is similar to the alive-
ness requirement in some (single-mode) security deﬁnitions
which Krawczyk [30] does not consider as fundamental for
key-exchange security. Our second game transformation how-
(cid:2) with the same uid
ever only works if a partnered session π
exists. Otherwise an abort in G2 cannot be translated into a
downgrade security attack.
We sketch a similar theorem for key-indistinguishability in
the full version [14].
C. Downgrade secure sub-protocols
We are interested in minimal core sub-protocols that guar-
antee downgrade security. We justify our use of sub-protocols
as a sound abstraction of a full protocol using simulation. A
sub-protocol can take additional input as part of Init and Send
queries to allow for an accurate simulation of the execution of
the full protocol. This is akin to the sub-protocols of Bergsma
et al. [9] which allow for additional signing oracles (restricted
to not breaking security of the sub-protocol).
For simplicity, the following deﬁnition leaves out details
about handling of long-term keys and corruption models.
When ﬁlling in the details for a particular setting, we require
the simulation to be accurate with respect to e.g. corruption, so
that it issues exactly the same corruption queries as in the full
protocol. We model access to session variables using oracles
that just return the value of the corresponding variable.
of Π for X if we have an efﬁcient simulator S with access to
1) S transparently relays queries to oracles for reading
Deﬁnition 9 (Sub-protocol): A protocol (cid:3)Π is a sub-protocol
the oracles of (cid:3)Π such that:
variables in X to the same oracles in (cid:3)Π.
2) S ◦(cid:3)Π is information-theoretic indistinguishable from Π.
bilistic algorithm. The composition S ◦ (cid:3)Π of a simulator S
and a sub-protocol (cid:3)Π is well-deﬁned when (cid:3)Π includes all
Operationally, the oracles of S ◦(cid:3)Π behave as the algorithmic
composition of the oracles of S and (cid:3)Π. That is, S may use
oracles of (cid:3)Π as subroutines. Similarly, we model an adversary
algorithms called by the oracles of S. The composition itself
is a new collection of algorithms, one for each oracle of S.
Formally, we model a protocol (and a simulator) as a
collection of oracles sharing state, each oracle being a proba-
A as a single probabilistic algorithm with access to oracles,
and the composition A ◦ S (resp. A ◦ Π) behaves as the
algorithmic composition of this algorithm with the oracles of
S (resp. Π).
properties satisﬁed by a sub-protocol to the full protocol.
As the next theorem shows, simulation allows to lift security
Theorem 2 (Downgrade security lifting): Let (cid:3)Π be
tection predicate. Let S be a simulator for(cid:3)Π as in Deﬁnition 9.
downgrade security of (cid:3)Π with pre-agreement on X, and
Π, DP, X (A) .
a sub-protocol of a protocol Π for
session variables
{cfg, uid, mode, key, complete}∪ X, and DP a downgrade pro-
Then, for any adversary A against the downgrade security of
Π with pre-agreement on X, A◦S is an adversary against the
(A ◦ S) = Advdowngrade
Advdowngrade
(cid:2)Π, DP, X
511511
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:10:46 UTC from IEEE Xplore.  Restrictions apply. 
(cid:2)
(cid:2)
(π.cfg, π
Proof sketch:
(cid:2) such that DP(π.cfg, π
If A is successful when interacting with
Π through the protocol oracles, then during the downgrade
security experiment there must be a session π partnered with
.cfg) holds and either
a session π
π.mode (cid:5)= Negoπ.role
(cid:2) disagree on
.cfg) or π and π
Now, since the simulation S ◦ (cid:3)Π is accurate with respect
X. Let E denote this event. Note that the probability of E in
the experiment A ◦ Π is exactly Advdowngrade
to all variables this event depends on, and S ◦(cid:3)Π is indistin-
experiment A◦(S ◦(cid:3)Π) is the same as in the experiment A◦Π.
(cid:3)Π) = (A◦S)◦(cid:3)Π, we conclude by construing the composition
(cid:3)Π with pre-agreement on X.
guishable from Π for A, the probability of E occurring in the
Because the composition operator ◦ is such that A ◦ (S ◦
of A and S as an adversary against the downgrade security of
Π, DP, X (A).
An analogous theorem holds for partnering security.
D. Downgrade security by whitelisting
Consider a protocol that is negotiation correct and guar-
antees multi-mode authentication with pre-agreement on all
variables that inﬂuence the computation of mode, then we get
downgrade protection for
DP(cfg, .)
(cid:2)
= ∀cfg
(cid:2)
. Auth(Negocfg.role
(cfg, cfg
(cid:2)), cfg.role) .
That is, all negotiable modes from downgrade secure conﬁgu-
rations must provide authentication security. This generalizes
the Negotiation-authentication theorem of [21].
IV. SECURE SHELL
Figure 3a models a run of the SSHv2 [45] protocol with a
client that authenticates using the publickey method [44].
We analyze the downgrade security of this protocol using
(cid:2)
the sub-protocol shown on Figure 3b. The functions H, H
in these ﬁgures stand for the composition of a ﬁxed in-
jective formatting function and a negotiated hash function.
Note that there are potential downgrade attacks in SSHv2
from publickey authentication to other mechanisms like
password but the protocol we consider does not model the
negotiation of the authentication mechanism. We stress that
our analysis only applies assuming servers are conﬁgured to
require publickey.
Client and server conﬁgurations include lists algs of key
exchange, server signature, encryption and MAC algorithms
ordered by preference. We let F (cfg) = cfg.algs. Each party
computes the negotiated ciphersuite independently, following
the rules in the protocol speciﬁcation [45, Sect. 7.1], which we
encode in a nego function. Roughly, these rules dictate that the
ﬁrst algorithm for each category in cfgI that is also in cfgR be
selected. Each session locally assigns nego(F (cfgI ), F (cfgR))
to a. In addition, a client conﬁguration cfgI includes a user
name and a service name u, a function PKI mapping a pair
(a, u) to a public key, and a function PKsR mapping a value
a to a set of acceptable server public keys. Conversely, a
server conﬁguration cfgR includes a function PKR mapping
a value a to a public key, and a function PKsI mapping a pair
(a, u) to a set of acceptable client public keys. For instance, in
512512
OpenSSH the keys cfgI .PKsR of acceptable server public keys
are taken from the clients known_hosts ﬁle, whereas the
keys cfgR.PKsI of acceptable client public keys are taken from
the .ssh/authorized_keys ﬁle in the home directory of
the user on the server.
In terms of the template in Section II, the sub-protocol uses
the following session variables:
(cid:2)
cfg
uid
mode
(cid:2)
=
(I, algs, u, PKI , PKsR)
(R, algs, PKR, PKsI )
for I
for R
(cid:2)
= (nI , nR)
(cid:2)
= (a, u, pk I , pk R) .
Client and server exchange nonces and their algorithmic
preferences F (cfgI ), F (cfgR). The server then selects a com-
patible signature key pair (pk R, sk R) and signs a hash log that
includes the ﬁrst two exchanged messages. When receiving
this message, the client checks that pk R is an acceptable
server key in its local conﬁguration, computes log locally and
veriﬁes the server signature. If the signature veriﬁes, it selects
a key pair (pk I , sk I ) in its conﬁguration for authenticating
and sends back to the server a signature over log, u, and
pk I. When receiving this message, the server checks that
pk I is an acceptable client key in cfgR.PKsI (a, u). Each
party completes the session upon successfully verifying the
peer signature, otherwise aborts. Formally, a client aborts if
pk R (cid:5)∈ cfgI .PKsR(a); otherwise it sets mode to:
(nego(F (cfgI ), F (cfgR)), cfgI .u, cfgI .PKI (a, u), pk R)
The server’s behavior is speciﬁed analogously.
We augment the Send oracles of each a session in the sub-
protocol with extra parameters that allow to ﬁll in the blank
(−) used to compute log. This allows a simulator to compute
signatures on the same values as the full protocol, as needed to
consistently answer Send queries. Consequently, we allow an
adversary against the downgrade security of the sub-protocol
to ﬁll in − parameters arbitrarily.
We complete our security model with oracles pk ← KeyGen
for key generation, sk ← Corrupt(pk) for adaptive corruption,
and Coerce(pk) for adversarial key registration. A public key
pk is honest if it was generated by a query to oracle KeyGen
but not corrupted by a Corrupt query.
Theorem 3 (Simulation): SSH-sub (Fig. 3b) is a sub-protocol
of SSH (Fig. 3a) for their common variables.
Proof sketch: The sub-protocol is oblivious of the Difﬁe-
Hellman exchange in the full protocol, so the simulator gener-
ates fresh Difﬁe-Hellman shares of his own for each session.
When needed, the simulator S forwards queries to SSH-sub
after applying message parsing and formatting functions. To
simulate signatures of honest sessions S uses the Difﬁe-
Hellman shares it has computed and the messages it has
received to ﬁll in the value of the extra parameter − of oracles
of the sub-protocol. Note that the adversary knows the secret
exponents of an instance’s Difﬁe-Hellman shares and so it can
always compute the encryption keys k1, k2 needed to simulate
the last two messages of the full protocol.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:10:46 UTC from IEEE Xplore.  Restrictions apply. 
Client I
Server R
VI
VR
II = KEXINIT(nI , algsI )
IR = KEXINIT(nR, algsR)
KEXDH_INIT(gx)
Client I
Server R
m1 = (nI , F (cfgI ))
m2 = (nR, F (cfgR))
KEXDH_REPLY(pk R, gy, sign(sk R, hash(log)))
uid = (nI , nR)
a = nego(F (cfgI ), F (cfgR))
uid = (nI , nR)
a = nego(F (cfgI ), F (cfgR))
(k1, k2) = kdf(gxy, log)
(k1, k2) = kdf(gxy, log)
NEWKEYS
NEWKEYS
{USERAUTH_REQUEST(u, pk I , sign(sk I , hash(log, u, pk I )))}k1
{USERAUTH_SUCCESS}k2
pk R, sign(sk R, hash(log))
u, pk I , sign(sk I , hash(log, u, pk I ))
mode = (a, u, pk I , pk R)
complete = true
mode = (a, u, pk I , pk R)
complete = true
(a) log = H(VI , VR, II , IR, pk R, g
x
y
, g
, g
xy)
(b) log = H
(cid:2)(m1, m2, pk R,−)
Fig. 3: SSHv2 mutually-authenticated key exchange: (a) full protocol and (b) sub-protocol SSH-sub.
A. SSHv2 is partnering and downgrade secure
A remarkable property of the downgrade protection sub-
protocol of mutually-authenticated SSHv2 is that, because both
client and server sign (a hash of) the inputs to the nego
function, downgrade protection security relies only on the
honesty of the signature keys, the collision resistance of the
hash algorithm, and the strength of the signature algorithms.
Notably, it does not rely on the key exchange algorithm being
strong or contributive, not even on it providing high entropy
inputs to H. This means that we can prove this protocol secure
for a predicate DP that only constrains the signature and hash
algorithms of cfgr, and requires honesty of peer public keys
in cfgr.PKs¯r, but has no requirements on cfg¯r.
We prove partnering and downgrade security of SSHv2
with publickey authentication under the agile security
assumptions on hash functions and signatures that we present
next.
Agile hash functions and signatures
As protocol participants may negotiate different hash func-
tions we need to capture collisions across hash functions.
Deﬁnition 10 (Agile collision resistance): Let h(cid:3) be a hash
function, and H a set of hash functions. Consider the game:
(cid:2) ← A()
- h, v, v
- Return h(cid:3)(v) = h(v
(cid:2)) ∧ v (cid:5)= v
(cid:2)
The collision resistance advantage of A, AdvCR
probability that the game returns true.
h(cid:2), P (A) is the
If the ranges of hash functions are disjoint, agile collision
resistance reduces to ordinary collision resistance. Bhargavan
et al. [13] also deﬁne existential unforgeability under chosen-
message attacks (EUF-CMA) for agile hash-then-sign signa-
tures. We here consider such signatures as primitives, although
typical constructions can be proved secure in the random
oracle model.
Deﬁnition 11 (Agile EUF-CMA security): Consider an agile
signature scheme s = (keygen, sign, verify). Let p(cid:3) be an
agility parameter, and P a set of parameters. Consider the
forgery game:
- Let pk, sk ← keygen()
- Set M := {} and run m, σ ← ASign(pk)
513513
- Return m /∈ M ∧ verify(pk, p(cid:3), m, σ)
where Sign(p, m) returns ⊥ if p /∈ P and otherwise sets M :=