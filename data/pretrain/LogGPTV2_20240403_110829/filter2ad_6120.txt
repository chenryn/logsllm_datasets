# The Case for Prefetching and Prevalidating TLS Server Certificates
**Authors: Emily Stark, Lin-Shung Huang, Dinesh Israni, Collin Jackson, Dan Boneh**
**Date: February 8, 2012**

## Abstract
This paper explores the benefits of prefetching and prevalidating Transport Layer Security (TLS) server certificates to reduce the latency associated with the TLS handshake. We present a real-world study of Online Certificate Status Protocol (OCSP) response times and propose four strategies for certificate prefetching and prevalidation. Our analysis shows that these techniques can significantly reduce the latency of the TLS handshake, making it more efficient and user-friendly.

## Introduction
### Transport Layer Security (TLS)
- **Objective**: Secure traffic between web browsers and servers.
- **Challenge**: Latency introduced by the TLS handshake process.

## The TLS Handshake
The TLS handshake is a critical part of establishing a secure connection but introduces latency due to the need to retrieve and validate server certificates.

## Certificate Validation: OCSP
- **Online Certificate Status Protocol (OCSP)**: A protocol used to check the revocation status of a certificate.
- **Process**:
  - The server certificate specifies an OCSP responder.
  - The client queries the responder to check if the certificate is valid.
  - The responder provides a response that includes the validity period of the certificate.

## Removing Round Trips
### Previous Proposal: TLS Snap Start
- **Zero Round Trip Handshake**: Aims to eliminate the round trips in the TLS handshake.
- **Challenges**:
  - The client must know the server certificate in advance.
  - Revocation checking remains slow even with cached certificates.

## Problem Statement
- **Latency Issue**: TLS imposes extra latency due to retrieving and validating server certificates.
- **Questions**:
  - How to obtain the certificate for a Snap Start handshake?
  - How to validate the certificate without introducing additional latency?

## Contribution
- **Real-World Study**: Analysis of OCSP response times.
- **Certificate Prefetching and Prevalidation**: Four proposed strategies.
- **Effectiveness Analysis**: Evaluation of the proposed methods.
- **Prototype Implementation**: Implementation in Chromium.

## Real-World OCSP Response Times
### Experimental Setup
- **Data Collection**: OCSP response times collected from users running the Perspectives browser extension.
- **Statistics**: 242 clients, 4474 certificates, 24 responders.
- **Results**: 
  - Median response time: 291 ms.
  - Mean response time: 498 ms.

## Design
### Prefetching and Prevalidating Certificates
- **Prefetching**:
  - Enables more frequent Snap Start handshakes.
- **Prevalidation**:
  - Removes the OCSP lookup from the critical path.

### Design Questions
- **When to Prefetch and Prevalidate?**
- **How to Obtain the Certificate?**

### When to Prefetch
- **DNS Prefetching Triggers**: Effective for certificate prefetching.
- **HTML Hints**: Can be used to trigger effective prefetching.

### How to Prefetch
- **Goal**: Obtain the server certificate.
- **Challenge**: Full TLS handshake is expensive.
- **Proposed Methods**:
  1. **Truncated Handshake**:
     - No public key cryptography.
     - Server admin does nothing.
     - Requires new API in the TLS layer.
  2. **HTTP GET Request**:
     - Example: `http://www.domain.com/cert`
     - Less load than a full TLS handshake but still impacts the server.
  3. **Retrieve from CDN**:
     - HTTP GET request, avoiding the web server.
  4. **Retrieve from DNS**:
     - DNS TXT record can store the certificate.
     - No impact on the web server.

### Prevalidation
- **Process**: After prefetching, prevalidate the certificate using normal OCSP lookup.

## Prototype
- **Implementation**: Prefetching and prevalidating in Chromium.
- **Architecture**: Piggyback on DNS prefetching.
- **Methods**: DNS and HTTP GET prefetching.

## Analysis
### Impact on Handshake Latency
- **Normal TLS Handshake**: 122 ms.
- **Snap Start, Unvalidated Certificate**: 83 ms.
- **Snap Start, Prevalidated Certificate**: 30 ms.
- **HTTP GET Request**: 16 ms.

## Conclusions
- **OCSP Latency**: Significant, especially with fewer round trips.
- **Need for Prefetched Certificates**: Essential for enabling Snap Start and OCSP prevalidation.
- **Proposed Strategies**: Four methods for prefetching certificates.
- **Latency Reduction**: Reduces TLS handshake by two round trips and OCSP response time by a factor of 4 in our experiments.

This optimized version of the text is more structured, clear, and professional, making it easier to understand the key points and contributions of the research.